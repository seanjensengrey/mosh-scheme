;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (u2865@library-file-path->cache-path u2867@read-annotated u2869@annotation-stripped u286b@annotation? u286d@annotation-source u286f@annotation-expression u2871@scm->fasl u2873@fasl-save u2875@fasl-load u2877@serialize-library u2879@load-serialized-library u287b@make-record-printer u287d@compile-core u287f@read-library-source-file u2881@make-parameter u2883@mosh-cache-dir u2919@file-options-spec) (begin (set! u2865@library-file-path->cache-path (lambda (u291a@x) (call-with-values (lambda () (open-string-output-port)) (lambda (u2920@u291d u2921@u291f) ((lambda (u2924@extract u2925@p) ((lambda (u2929@display-hex) (begin (set! u2929@display-hex (lambda (u2932@n) (if (<= '0 u2932@n '9) (display u2932@n u2925@p) (display (integer->char (+ (char->integer '#\a) (- u2932@n '10))) u2925@p)))) (begin ((letrec ((u292a@f (lambda (u292c@ls) (if (not (null? u292c@ls)) (begin (display '"_" u2925@p) (for-each (lambda (u292e@c) (if (or (char<=? '#\a u292e@c '#\z) (char<=? '#\A u292e@c '#\Z) (char<=? '#\0 u292e@c '#\9) (memv u292e@c '(#\- #\. #\_ #\~))) (display u292e@c u2925@p) (begin (display '"%" u2925@p) ((lambda (u2930@n) (begin (u2929@display-hex (quotient u2930@n '16)) (u2929@display-hex (remainder u2930@n '16)))) (char->integer u292e@c))))) (string->list (car u292c@ls))) (u292a@f (cdr u292c@ls))) (void))))) u292a@f) (string-split u291a@x '#\/)) (u2924@extract)))) '#f)) u2921@u291f u2920@u291d))))) (set! u2867@read-annotated read) (set! u2869@annotation-stripped (lambda (u2934@x) (u286f@annotation-expression u2934@x))) (set! u286b@annotation? (lambda (u2936@x) (source-info u2936@x))) (set! u286d@annotation-source (lambda (u2938@x) (source-info u2938@x))) (set! u286f@annotation-expression (lambda (u293a@x) (if (pair? u293a@x) (cons (car u293a@x) (cdr u293a@x)) (display '"line:46\n")))) (set! u2871@scm->fasl (lambda (u293c@filename) (string-append (u2883@mosh-cache-dir) '"/" (u2865@library-file-path->cache-path u293c@filename) '".mosh-fasl"))) (set! u2873@fasl-save (lambda (u293e@filename u293f@obj) (call-with-port (open-file-output-port u293e@filename) (lambda (u2942@port) ((symbol-value 'fasl-write!) u293f@obj u2942@port))))) (set! u2875@fasl-load (lambda (u2944@filename) (call-with-port (open-file-input-port u2944@filename) (symbol-value 'fasl-read!)))) (set! u2877@serialize-library (lambda (u2946@filename u2947@obj) (begin ((lambda (u294a@expanded2core) ((lambda (u294c@compile) ((lambda (u294e@code) ((lambda (u2950@pivot) ((lambda (u2952@visit) ((lambda () (begin (set-car! u2950@pivot u2952@visit) ((lambda (u2954@pivot) ((lambda (u2956@invoke) ((lambda () (set-car! u2954@pivot u2956@invoke)))) (u294c@compile (u294a@expanded2core (car u2954@pivot))))) (cdr u2950@pivot)))))) (u294c@compile (u294a@expanded2core (car u2950@pivot))))) (cddddr (cddddr u294e@code)))) u2947@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (u2958@fasl-file) (begin (if (file-exists? u2958@fasl-file) (delete-file u2958@fasl-file) (void)) ((call/cc (lambda (u295c@u295a) (lambda () (with-exception-handler (lambda (u295e@c) ((call/cc (lambda (u2960@u295b) (u295c@u295a (lambda () (if '#t (begin (format (current-error-port) '"Warning:serialize-library failed " u2946@filename) (if (file-exists? u2958@fasl-file) (delete-file u2958@fasl-file) (void)) '#f) (u2960@u295b (lambda () (raise-continuable u295e@c)))))))))) (lambda () (u2873@fasl-save u2958@fasl-file u2947@obj))))))))) (u2871@scm->fasl u2946@filename))))) (set! u2879@load-serialized-library (lambda (u2962@filename u2963@obj) (and (u2883@mosh-cache-dir) ((lambda (u2966@fasl-file) (if (and (file-exists? u2966@fasl-file) ((symbol-value 'file-newer?) u2966@fasl-file u2962@filename)) ((lambda (u2968@expanded2core) ((lambda (u296a@eval-compiled-core) ((lambda (u296c@code) ((lambda (u296e@pivot) ((lambda (u2970@visit) ((lambda (u2972@visit-proc) ((lambda () (begin (set-car! u296e@pivot u2972@visit-proc) ((lambda (u2974@pivot) ((lambda (u2976@invoke) ((lambda () (begin (set-car! u2974@pivot (lambda () (u296a@eval-compiled-core u2976@invoke))) (apply u2963@obj u296c@code))))) (car u2974@pivot))) (cdr u296e@pivot)))))) (lambda () (u296a@eval-compiled-core u2970@visit)))) (car u296e@pivot))) (cddddr (cddddr u296c@code)))) (u2875@fasl-load u2966@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (u2871@scm->fasl u2962@filename))))) (set! u287b@make-record-printer (lambda (u2978@name u2979@printer) (lambda u297c@x (begin (display '"record printer") (for-each display u297c@x))))) (set! u287d@compile-core (lambda u297e@x (apply error 'comile-core '"not implementated" u297e@x))) (set! u287f@read-library-source-file (lambda (u2980@file-name) (with-input-from-file u2980@file-name u2867@read-annotated))) (set! u2881@make-parameter (lambda u2990 ((lambda (u2991) (if (= u2991 '1) (apply (lambda (u2982@x) (u2881@make-parameter u2982@x (lambda (u2984@x) u2984@x))) u2990) (if (= u2991 '2) (apply (lambda (u2986@x u2987@fender) ((lambda (u298a@x) (lambda u298e ((lambda (u298f) (if (= u298f '0) (apply (lambda () u298a@x) u298e) (if (= u298f '1) (apply (lambda (u298c@v) (set! u298a@x (u2987@fender u298c@v))) u298e) (error 'apply '"invalid arg count")))) (length u298e)))) (u2987@fender u2986@x))) u2990) (error 'apply '"invalid arg count")))) (length u2990)))) (set! u2883@mosh-cache-dir (u2881@make-parameter '#f)) (set! u2919@file-options-spec (lambda (u2992@x) u2992@x)) (begin (set! u29a4@u2919@file-options-spec u2919@file-options-spec) (set! u29a3@u2883@mosh-cache-dir u2883@mosh-cache-dir) (set! u29a2@u2881@make-parameter u2881@make-parameter) (set! u29a1@u287f@read-library-source-file u287f@read-library-source-file) (set! u29a0@u287d@compile-core u287d@compile-core) (set! u299f@u287b@make-record-printer u287b@make-record-printer) (set! u299e@u2879@load-serialized-library u2879@load-serialized-library) (set! u299d@u2877@serialize-library u2877@serialize-library) (set! u299c@u2875@fasl-load u2875@fasl-load) (set! u299b@u2873@fasl-save u2873@fasl-save) (set! u299a@u2871@scm->fasl u2871@scm->fasl) (set! u2999@u286f@annotation-expression u286f@annotation-expression) (set! u2998@u286d@annotation-source u286d@annotation-source) (set! u2997@u286b@annotation? u286b@annotation?) (set! u2996@u2869@annotation-stripped u2869@annotation-stripped) (set! u2995@u2867@read-annotated u2867@read-annotated) (set! u2994@u2865@library-file-path->cache-path u2865@library-file-path->cache-path)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (u29aa@current-primitive-locations u29ac@mutable? u29ae@rewriter u29b0@expanded->core u29b2@compile-core-expr u29b4@pretty-print u29b6@compile-core-expr-to-port) (begin (set! u29aa@current-primitive-locations (u29a2@u2881@make-parameter (lambda (u29b7@x) '#f) (lambda (u29b9@p) u29b9@p))) (set! u29ac@mutable? (lambda (u29bb@x) (or (pair? u29bb@x) (vector? u29bb@x) (hashtable? u29bb@x)))) (set! u29ae@rewriter (lambda (u29bd@quote-hack?) ((lambda (u29c0@f) (begin (set! u29c0@f (lambda (u29c1@x) (if (pair? u29c1@x) ((lambda (u29c3@t) (if (memv u29c3@t '(quote)) (if (and u29bd@quote-hack? (u29ac@mutable? (cadr u29c1@x))) ((lambda (u29c5@g) (begin (set-symbol-value! u29c5@g (cadr u29c1@x)) u29c5@g)) (gensym)) u29c1@x) (if (memv u29c3@t '(case-lambda)) (cons 'case-lambda (map (lambda (u29c7@x) (cons (car u29c7@x) (map u29c0@f (cdr u29c7@x)))) (cdr u29c1@x))) (if (memv u29c3@t '(lambda)) (cons* 'lambda (cadr u29c1@x) (map u29c0@f (cddr u29c1@x))) (if (memv u29c3@t '(letrec)) ((lambda (u29c9@bindings u29ca@body*) ((lambda (u29cd@lhs* u29ce@rhs*) (cons* 'letrec (map list u29cd@lhs* (map u29c0@f u29ce@rhs*)) (map u29c0@f u29ca@body*))) (map car u29c9@bindings) (map cadr u29c9@bindings))) (cadr u29c1@x) (cddr u29c1@x)) (if (memv u29c3@t '(letrec*)) ((lambda (u29d1@bindings u29d2@body*) ((lambda (u29d5@lhs* u29d6@rhs*) (cons* 'letrec* (map list u29d5@lhs* (map u29c0@f u29d6@rhs*)) (map u29c0@f u29d2@body*))) (map car u29d1@bindings) (map cadr u29d1@bindings))) (cadr u29c1@x) (cddr u29c1@x)) (if (memv u29c3@t '(library-letrec*)) ((lambda (u29d9@name u29da@x) ((lambda (u29dd@bindings u29de@body*) ((lambda (u29e1@lhs* u29e2@lhs** u29e3@rhs*) (cons* 'library-letrec* u29d9@name (map list u29e1@lhs* u29e2@lhs** (map u29c0@f u29e3@rhs*)) (map u29c0@f u29de@body*))) (map car u29dd@bindings) (map cadr u29dd@bindings) (map caddr u29dd@bindings))) (cadr u29da@x) (cddr u29da@x))) (cadr u29c1@x) (cdr u29c1@x)) (if (memv u29c3@t '(begin)) (cons 'begin (map u29c0@f (cdr u29c1@x))) (if (memv u29c3@t '(set!)) (list 'set! (cadr u29c1@x) (u29c0@f (caddr u29c1@x))) (if (memv u29c3@t '(primitive)) ((lambda (u29e7@op) ((lambda (u29e9@t) (if u29e9@t ((lambda (u29eb@loc) u29eb@loc) u29e9@t) u29e7@op)) ((u29aa@current-primitive-locations) u29e7@op))) (cadr u29c1@x)) (if (memv u29c3@t '(define)) u29c1@x (if (list? u29c1@x) (map u29c0@f u29c1@x) (error 'rewrite '"invalid form ~s ~s" u29c1@x (list? u29c1@x)))))))))))))) (car u29c1@x)) u29c1@x))) u29c0@f)) '#f))) (set! u29b0@expanded->core (lambda (u29ed@x) ((u29ae@rewriter '#f) u29ed@x))) (set! u29b2@compile-core-expr (lambda (u29ef@x) ((u29ae@rewriter '#f) u29ef@x))) (set! u29b4@pretty-print write) (set! u29b6@compile-core-expr-to-port (lambda (u29f1@x u29f2@p) (u29b4@pretty-print ((u29ae@rewriter '#f) u29f1@x) u29f2@p))) (begin (set! u29fb@u29b6@compile-core-expr-to-port u29b6@compile-core-expr-to-port) (set! u29fa@u29b4@pretty-print u29b4@pretty-print) (set! u29f9@u29b2@compile-core-expr u29b2@compile-core-expr) (set! u29f8@u29b0@expanded->core u29b0@expanded->core) (set! u29f7@u29ae@rewriter u29ae@rewriter) (set! u29f6@u29ac@mutable? u29ac@mutable?) (set! u29f5@u29aa@current-primitive-locations u29aa@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (u2a4a@make-collection u2a4c@current-library-collection u2a4e@rp u2a58@library? u2a5a@library-id u2a5c@set-library-id! u2a5e@library-name u2a60@set-library-name! u2a62@library-version u2a64@set-library-version! u2a66@library-imp* u2a68@set-library-imp*! u2a6a@library-vis* u2a6c@set-library-vis*! u2a6e@library-inv* u2a70@set-library-inv*! u2a72@library-subst u2a74@set-library-subst! u2a76@library-env u2a78@set-library-env! u2a7a@library-visit-state u2a7c@set-library-visit-state! u2a7e@library-invoke-state u2a80@set-library-invoke-state! u2a82@library-visit-code u2a84@set-library-visit-code! u2a86@library-invoke-code u2a88@set-library-invoke-code! u2a8a@library-visible? u2a8c@set-library-visible?! u2a8e@library-source-file-name u2a90@set-library-source-file-name! u2a92@dummy u2a94@find-dependencies u2a96@find-library-by u2a98@library-path u2a9a@library-extensions u2a9c@library-name->file-name u2a9e@file-locator u2aa0@serialize-all u2aa2@current-precompiled-library-loader u2aa4@try-load-from-file u2aa6@library-loader u2aa8@current-library-expander u2aaa@external-pending-libraries u2aac@find-external-library u2aae@find-library-by-name u2ab0@library-exists? u2ab2@find-library-by-spec/die u2ab4@label->binding-table u2ab6@install-library-record u2ab8@install-library u2aba@imported-label->binding u2abc@invoke-library u2abe@visit-library u2ac0@invoke-library-by-spec u2ac2@installed-libraries u2ac4@library-spec) (begin (set! u2a4a@make-collection (lambda () ((lambda (u2ac5@set) ((lambda (u2ac8@set-cons) (begin (set! u2ac8@set-cons (lambda (u2acd@x u2ace@ls) (if (memq u2acd@x u2ace@ls) u2ace@ls (cons u2acd@x u2ace@ls)))) (lambda u2acb ((lambda (u2acc) (if (= u2acc '0) (apply (lambda () u2ac5@set) u2acb) (if (= u2acc '1) (apply (lambda (u2ac9@x) (set! u2ac5@set (u2ac8@set-cons u2ac9@x u2ac5@set))) u2acb) (error 'apply '"invalid arg count")))) (length u2acb))))) '#f)) '()))) (set! u2a4c@current-library-collection (u29a2@u2881@make-parameter (u2a4a@make-collection) (lambda (u2ad1@x) (begin (if (not (procedure? u2ad1@x)) (assertion-violation 'current-library-collection '"not a procedure" u2ad1@x) (void)) u2ad1@x)))) (set! u2a4e@rp (u299f@u287b@make-record-printer 'library (lambda (u2ad3@x u2ad4@p u2ad5@wr) (begin (if (not (u2a58@library? u2ad3@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (u2a62@library-version u2ad3@x)) (u2a5e@library-name u2ad3@x) (append (u2a5e@library-name u2ad3@x) (list (u2a62@library-version u2ad3@x))))) u2ad4@p))))) (set! u2a58@library? (lambda (u2ad9@x) (and (simple-struct? u2ad9@x) (eq? (simple-struct-name u2ad9@x) 'library)))) (set! u2a5a@library-id (lambda (u2adb@x) (simple-struct-ref u2adb@x '0))) (set! u2a5c@set-library-id! (lambda (u2add@x u2ade@val) (simple-struct-set! u2add@x '0 u2ade@val))) (set! u2a5e@library-name (lambda (u2ae1@x) (simple-struct-ref u2ae1@x '1))) (set! u2a60@set-library-name! (lambda (u2ae3@x u2ae4@val) (simple-struct-set! u2ae3@x '1 u2ae4@val))) (set! u2a62@library-version (lambda (u2ae7@x) (simple-struct-ref u2ae7@x '2))) (set! u2a64@set-library-version! (lambda (u2ae9@x u2aea@val) (simple-struct-set! u2ae9@x '2 u2aea@val))) (set! u2a66@library-imp* (lambda (u2aed@x) (simple-struct-ref u2aed@x '3))) (set! u2a68@set-library-imp*! (lambda (u2aef@x u2af0@val) (simple-struct-set! u2aef@x '3 u2af0@val))) (set! u2a6a@library-vis* (lambda (u2af3@x) (simple-struct-ref u2af3@x '4))) (set! u2a6c@set-library-vis*! (lambda (u2af5@x u2af6@val) (simple-struct-set! u2af5@x '4 u2af6@val))) (set! u2a6e@library-inv* (lambda (u2af9@x) (simple-struct-ref u2af9@x '5))) (set! u2a70@set-library-inv*! (lambda (u2afb@x u2afc@val) (simple-struct-set! u2afb@x '5 u2afc@val))) (set! u2a72@library-subst (lambda (u2aff@x) (simple-struct-ref u2aff@x '6))) (set! u2a74@set-library-subst! (lambda (u2b01@x u2b02@val) (simple-struct-set! u2b01@x '6 u2b02@val))) (set! u2a76@library-env (lambda (u2b05@x) (simple-struct-ref u2b05@x '7))) (set! u2a78@set-library-env! (lambda (u2b07@x u2b08@val) (simple-struct-set! u2b07@x '7 u2b08@val))) (set! u2a7a@library-visit-state (lambda (u2b0b@x) (simple-struct-ref u2b0b@x '8))) (set! u2a7c@set-library-visit-state! (lambda (u2b0d@x u2b0e@val) (simple-struct-set! u2b0d@x '8 u2b0e@val))) (set! u2a7e@library-invoke-state (lambda (u2b11@x) (simple-struct-ref u2b11@x '9))) (set! u2a80@set-library-invoke-state! (lambda (u2b13@x u2b14@val) (simple-struct-set! u2b13@x '9 u2b14@val))) (set! u2a82@library-visit-code (lambda (u2b17@x) (simple-struct-ref u2b17@x '10))) (set! u2a84@set-library-visit-code! (lambda (u2b19@x u2b1a@val) (simple-struct-set! u2b19@x '10 u2b1a@val))) (set! u2a86@library-invoke-code (lambda (u2b1d@x) (simple-struct-ref u2b1d@x '11))) (set! u2a88@set-library-invoke-code! (lambda (u2b1f@x u2b20@val) (simple-struct-set! u2b1f@x '11 u2b20@val))) (set! u2a8a@library-visible? (lambda (u2b23@x) (simple-struct-ref u2b23@x '12))) (set! u2a8c@set-library-visible?! (lambda (u2b25@x u2b26@val) (simple-struct-set! u2b25@x '12 u2b26@val))) (set! u2a8e@library-source-file-name (lambda (u2b29@x) (simple-struct-ref u2b29@x '13))) (set! u2a90@set-library-source-file-name! (lambda (u2b2b@x u2b2c@val) (simple-struct-set! u2b2b@x '13 u2b2c@val))) (set! u2a92@dummy '3) (set! u2a94@find-dependencies (lambda (u2b2f@ls) (if (null? u2b2f@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! u2a96@find-library-by (lambda (u2b31@pred) ((letrec ((u2b33@f (lambda (u2b35@ls) (if (null? u2b35@ls) '#f (if (u2b31@pred (car u2b35@ls)) (car u2b35@ls) (u2b33@f (cdr u2b35@ls))))))) u2b33@f) ((u2a4c@current-library-collection))))) (set! u2a98@library-path (u29a2@u2881@make-parameter '(".") (lambda (u2b37@x) (if (and (list? u2b37@x) (for-all string? u2b37@x)) (map (lambda (u2b39@x) u2b39@x) u2b37@x) (assertion-violation 'library-path '"not a list of strings" u2b37@x))))) (set! u2a9a@library-extensions (u29a2@u2881@make-parameter '(".sls" ".ss" ".scm") (lambda (u2b3b@x) (if (and (list? u2b3b@x) (for-all string? u2b3b@x)) (map (lambda (u2b3d@x) u2b3d@x) u2b3b@x) (assertion-violation 'library-extensions '"not a list of strings" u2b3b@x))))) (set! u2a9c@library-name->file-name (lambda (u2b3f@x) (call-with-values (lambda () (open-string-output-port)) (lambda (u2b45@u2b42 u2b46@u2b44) ((lambda (u2b49@extract u2b4a@p) ((lambda (u2b4e@display-hex) (begin (set! u2b4e@display-hex (lambda (u2b57@n) (if (<= '0 u2b57@n '9) (display u2b57@n u2b4a@p) (display (integer->char (+ (char->integer '#\a) (- u2b57@n '10))) u2b4a@p)))) (begin ((letrec ((u2b4f@f (lambda (u2b51@ls) (if (not (null? u2b51@ls)) (begin (display '"/" u2b4a@p) (for-each (lambda (u2b53@c) (if (or (char<=? '#\a u2b53@c '#\z) (char<=? '#\A u2b53@c '#\Z) (char<=? '#\0 u2b53@c '#\9) (memv u2b53@c '(#\- #\. #\_ #\~))) (display u2b53@c u2b4a@p) (begin (display '"%" u2b4a@p) ((lambda (u2b55@n) (begin (u2b4e@display-hex (quotient u2b55@n '16)) (u2b4e@display-hex (remainder u2b55@n '16)))) (char->integer u2b53@c))))) (string->list (symbol->string (car u2b51@ls)))) (u2b4f@f (cdr u2b51@ls))) (void))))) u2b4f@f) u2b3f@x) (u2b49@extract)))) '#f)) u2b46@u2b44 u2b45@u2b42))))) (set! u2a9e@file-locator (u29a2@u2881@make-parameter (lambda (u2b59@x) ((lambda (u2b5b@str) ((letrec ((u2b5d@f (lambda (u2b5f@ls u2b60@exts u2b61@failed-list) (if (null? u2b5f@ls) ((lambda () ((lambda (u2b6d@u2b68 u2b6f@u2b6a u2b71@u2b69 u2b74@u2b67 u2b76@make-library-resolution-condition u2b78@u2b65 u2b7a@u2b66 u2b7c@library-resolution-condition? u2b7e@condition-library u2b80@condition-files) (begin (set! u2b6d@u2b68 (make-record-type-descriptor '&library-resolution u4e17@u4b5e@&condition-rtd 'u2b6b '#f '#f '#((immutable library) (immutable files)))) (set! u2b6f@u2b6a '#f) (set! u2b71@u2b69 (make-record-constructor-descriptor u2b6d@u2b68 u4e18@u4b60@&condition-rcd u2b6f@u2b6a)) (set! u2b74@u2b67 (record-predicate u2b6d@u2b68)) (set! u2b76@make-library-resolution-condition (record-constructor u2b71@u2b69)) (set! u2b78@u2b65 (record-accessor u2b6d@u2b68 '0)) (set! u2b7a@u2b66 (record-accessor u2b6d@u2b68 '1)) (set! u2b7c@library-resolution-condition? (condition-predicate u2b6d@u2b68)) (set! u2b7e@condition-library (condition-accessor u2b6d@u2b68 u2b78@u2b65)) (set! u2b80@condition-files (condition-accessor u2b6d@u2b68 u2b7a@u2b66)) (raise (condition (u4e37@u4bf8@make-error) (u4e59@u4c54@make-who-condition 'expander) (u4e1d@u4bb5@make-message-condition '"cannot locate library in library-path") (u2b76@make-library-resolution-condition u2b59@x (reverse u2b61@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? u2b60@exts) (u2b5d@f (cdr u2b5f@ls) (u2a9a@library-extensions) u2b61@failed-list) ((lambda (u2b81@name) (if (file-exists? u2b81@name) u2b81@name (u2b5d@f u2b5f@ls (cdr u2b60@exts) (cons u2b81@name u2b61@failed-list)))) (string-append (car u2b5f@ls) u2b5b@str (car u2b60@exts)))))))) u2b5d@f) (u2a98@library-path) (u2a9a@library-extensions) '())) (u2a9c@library-name->file-name u2b59@x))) (lambda (u2b83@f) (if (procedure? u2b83@f) u2b83@f (assertion-violation 'file-locator '"not a procedure" u2b83@f))))) (set! u2aa0@serialize-all (lambda (u2b85@serialize u2b86@compile) ((lambda (u2b8a@library-desc) (begin (set! u2b8a@library-desc (lambda (u2b8d@x) (list (u2a5a@library-id u2b8d@x) (u2a5e@library-name u2b8d@x)))) (for-each (lambda (u2b8b@x) (if (u2a8e@library-source-file-name u2b8b@x) (u2b85@serialize (u2a8e@library-source-file-name u2b8b@x) (list (u2a5a@library-id u2b8b@x) (u2a5e@library-name u2b8b@x) (u2a62@library-version u2b8b@x) (map u2b8a@library-desc (u2a66@library-imp* u2b8b@x)) (map u2b8a@library-desc (u2a6a@library-vis* u2b8b@x)) (map u2b8a@library-desc (u2a6e@library-inv* u2b8b@x)) (u2a72@library-subst u2b8b@x) (u2a76@library-env u2b8b@x) (u2b86@compile (u2a82@library-visit-code u2b8b@x)) (u2b86@compile (u2a86@library-invoke-code u2b8b@x)) (u2a8a@library-visible? u2b8b@x))) (void))) ((u2a4c@current-library-collection))))) '#f))) (set! u2aa2@current-precompiled-library-loader (u29a2@u2881@make-parameter (lambda (u2b8f@filename u2b90@sk) '#f))) (set! u2aa4@try-load-from-file (lambda (u2b93@filename) ((u2aa2@current-precompiled-library-loader) u2b93@filename (lambda u2bb9 ((lambda (u2bba) (if (= u2bba '11) (apply (lambda (u2b95@id u2b96@name u2b97@ver u2b98@imp* u2b99@vis* u2b9a@inv* u2b9b@exp-subst u2b9c@exp-env u2b9d@visit-proc u2b9e@invoke-proc u2b9f@visible?) ((letrec ((u2bab@f (lambda (u2bad@deps) (if (null? u2bad@deps) (begin (u2ab8@install-library u2b95@id u2b96@name u2b97@ver u2b98@imp* u2b99@vis* u2b9a@inv* u2b9b@exp-subst u2b9c@exp-env u2b9d@visit-proc u2b9e@invoke-proc '#f '#f u2b9f@visible? '#f) '#t) ((lambda (u2baf@d) ((lambda (u2bb1@label u2bb2@dname) ((lambda (u2bb5@l) (if (and (u2a58@library? u2bb5@l) (eq? u2bb1@label (u2a5a@library-id u2bb5@l))) (u2bab@f (cdr u2bad@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" u2b96@name u2bb2@dname u2b93@filename u2bb5@l u2bb1@label (u2a5a@library-id u2bb5@l)) '#f))) (u2aae@find-library-by-name u2bb2@dname))) (car u2baf@d) (cadr u2baf@d))) (car u2bad@deps)))))) u2bab@f) (append u2b98@imp* u2b99@vis* u2b9a@inv*))) u2bb9) (if (>= u2bba '0) (apply (lambda u2bb7@others '#f) u2bb9) (error 'apply '"invalid arg count")))) (length u2bb9)))))) (set! u2aa6@library-loader (u29a2@u2881@make-parameter (lambda (u2bbb@x) ((lambda (u2bbd@file-name) (if (not u2bbd@file-name) (assertion-violation '#f '"cannot file library" u2bbb@x) (or (u2aa4@try-load-from-file u2bbd@file-name) ((u2aa8@current-library-expander) (u29a1@u287f@read-library-source-file u2bbd@file-name) u2bbd@file-name (lambda (u2bbf@name) (if (not (fast-equal? u2bbf@name u2bbb@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (u2bc5@u2bc2 u2bc6@u2bc4) ((lambda (u2bc9@e u2bca@p) (begin (display '"expected to find library " u2bca@p) (write u2bbb@x u2bca@p) (display '" in file " u2bca@p) (display u2bbd@file-name u2bca@p) (display '", found " u2bca@p) (write u2bbf@name u2bca@p) (display '" instead" u2bca@p) (u2bc9@e))) u2bc6@u2bc4 u2bc5@u2bc2)))) (void))))))) ((u2a9e@file-locator) u2bbb@x))) (lambda (u2bcd@f) (if (procedure? u2bcd@f) u2bcd@f (assertion-violation 'library-locator '"not a procedure" u2bcd@f))))) (set! u2aa8@current-library-expander (u29a2@u2881@make-parameter (lambda (u2bcf@x) (assertion-violation 'library-expander '"not initialized")) (lambda (u2bd1@f) (if (procedure? u2bd1@f) u2bd1@f (assertion-violation 'library-expander '"not a procedure" u2bd1@f))))) (set! u2aaa@external-pending-libraries (u29a2@u2881@make-parameter '())) (set! u2aac@find-external-library (lambda (u2bd3@name) (begin (if (member u2bd3@name (u2aaa@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" u2bd3@name) (void)) ((lambda (u2bd9@u2bd6 u2bda@u2bd8) ((lambda (u2bdd@swap) (dynamic-wind u2bdd@swap (lambda () (begin ((u2aa6@library-loader) u2bd3@name) (or (u2a96@find-library-by (lambda (u2bdf@x) (fast-equal? (u2a5e@library-name u2bdf@x) u2bd3@name))) (assertion-violation '#f '"handling external library did not yield the correct library" u2bd3@name)))) u2bdd@swap)) (lambda () ((lambda (u2be1@t) (begin (u2bd9@u2bd6 u2bda@u2bd8) (set! u2bda@u2bd8 u2be1@t))) (u2bd9@u2bd6))))) u2aaa@external-pending-libraries (cons u2bd3@name (u2aaa@external-pending-libraries)))))) (set! u2aae@find-library-by-name (lambda (u2be3@name) (or (u2a96@find-library-by (lambda (u2be5@x) (fast-equal? (u2a5e@library-name u2be5@x) u2be3@name))) (u2aac@find-external-library u2be3@name)))) (set! u2ab0@library-exists? (lambda (u2be7@name) (and (u2a96@find-library-by (lambda (u2be9@x) (fast-equal? (u2a5e@library-name u2be9@x) u2be7@name))) '#t))) (set! u2ab2@find-library-by-spec/die (lambda (u2beb@spec) ((lambda (u2bed@id) (or (u2a96@find-library-by (lambda (u2bef@x) (eq? u2bed@id (u2a5a@library-id u2bef@x)))) (assertion-violation '#f '"cannot find library with required spec" u2beb@spec))) (car u2beb@spec)))) (set! u2ab4@label->binding-table (make-eq-hashtable)) (set! u2ab6@install-library-record (lambda (u2bf1@lib) (begin ((lambda (u2bf3@exp-env) (for-each (lambda (u2bf5@x) ((lambda (u2bf7@label u2bf8@binding) ((lambda (u2bfb@binding) (begin (if (hashtable-ref u2ab4@label->binding-table u2bf7@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" u2bf7@label (hashtable-ref u2ab4@label->binding-table u2bf7@label '#f) u2bfb@binding) (exit)) (void)) (hashtable-set! u2ab4@label->binding-table u2bf7@label u2bfb@binding))) ((lambda (u2bfd@t) (if (memv u2bfd@t '(global)) (cons 'global (cons u2bf1@lib (cdr u2bf8@binding))) (if (memv u2bfd@t '(global-macro)) (cons 'global-macro (cons u2bf1@lib (cdr u2bf8@binding))) (if (memv u2bfd@t '(global-macro!)) (cons 'global-macro! (cons u2bf1@lib (cdr u2bf8@binding))) u2bf8@binding)))) (car u2bf8@binding)))) (car u2bf5@x) (cdr u2bf5@x))) u2bf3@exp-env)) (u2a76@library-env u2bf1@lib)) ((u2a4c@current-library-collection) u2bf1@lib)))) (set! u2ab8@install-library (lambda (u2bff@id u2c00@name u2c01@ver u2c02@imp* u2c03@vis* u2c04@inv* u2c05@exp-subst u2c06@exp-env u2c07@visit-proc u2c08@invoke-proc u2c09@visit-code u2c0a@invoke-code u2c0b@visible? u2c0c@source-file-name) ((lambda (u2c1b@imp-lib* u2c1c@vis-lib* u2c1d@inv-lib*) (begin (if (not (and (symbol? u2bff@id) (list? u2c00@name) (list? u2c01@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" u2bff@id u2c00@name u2c01@ver) (void)) (if (u2ab0@library-exists? u2c00@name) (assertion-violation 'install-library '"library is already installed" u2c00@name) (void)) ((lambda (u2c21@lib) (u2ab6@install-library-record u2c21@lib)) (make-simple-struct 'library '15 (list u2bff@id u2c00@name u2c01@ver u2c1b@imp-lib* u2c1c@vis-lib* u2c1d@inv-lib* u2c05@exp-subst u2c06@exp-env u2c07@visit-proc u2c08@invoke-proc u2c09@visit-code u2c0a@invoke-code u2c0b@visible? u2c0c@source-file-name))))) (map u2ab2@find-library-by-spec/die u2c02@imp*) (map u2ab2@find-library-by-spec/die u2c03@vis*) (map u2ab2@find-library-by-spec/die u2c04@inv*)))) (set! u2aba@imported-label->binding (lambda (u2c23@lab) (hashtable-ref u2ab4@label->binding-table u2c23@lab '#f))) (set! u2abc@invoke-library (lambda (u2c25@lib) ((lambda (u2c27@invoke) (if (procedure? u2c27@invoke) (begin (u2a80@set-library-invoke-state! u2c25@lib (lambda () (assertion-violation 'invoke '"circularity detected" u2c25@lib))) (for-each u2abc@invoke-library (u2a6e@library-inv* u2c25@lib)) (u2a80@set-library-invoke-state! u2c25@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" u2c25@lib))) (u2c27@invoke) (u2a80@set-library-invoke-state! u2c25@lib '#t)) (void))) (u2a7e@library-invoke-state u2c25@lib)))) (set! u2abe@visit-library (lambda (u2c29@lib) ((lambda (u2c2b@visit) (if (procedure? u2c2b@visit) (begin (u2a7c@set-library-visit-state! u2c29@lib (lambda () (assertion-violation 'visit '"circularity detected" u2c29@lib))) (for-each u2abc@invoke-library (u2a6a@library-vis* u2c29@lib)) (u2a7c@set-library-visit-state! u2c29@lib (lambda () (assertion-violation 'invoke '"first visit did not return" u2c29@lib))) (u2c2b@visit) (u2a7c@set-library-visit-state! u2c29@lib '#t)) (void))) (u2a7a@library-visit-state u2c29@lib)))) (set! u2ac0@invoke-library-by-spec (lambda (u2c2d@spec) (u2abc@invoke-library (u2ab2@find-library-by-spec/die u2c2d@spec)))) (set! u2ac2@installed-libraries (lambda u2c35 ((lambda (u2c36) (if (= u2c36 '1) (apply (lambda (u2c2f@all?) ((letrec ((u2c31@f (lambda (u2c33@ls) (if (null? u2c33@ls) '() (if (or u2c2f@all? (u2a8a@library-visible? (car u2c33@ls))) (cons (car u2c33@ls) (u2c31@f (cdr u2c33@ls))) (u2c31@f (cdr u2c33@ls))))))) u2c31@f) ((u2a4c@current-library-collection)))) u2c35) (if (= u2c36 '0) (apply (lambda () (u2ac2@installed-libraries '#f)) u2c35) (error 'apply '"invalid arg count")))) (length u2c35)))) (set! u2ac4@library-spec (lambda (u2c37@x) (begin (if (not (u2a58@library? u2c37@x)) (assertion-violation 'library-spec '"not a library" u2c37@x) (void)) (list (u2a5a@library-id u2c37@x) (u2a5e@library-name u2c37@x) (u2a62@library-version u2c37@x))))) (begin (set! u2c72@u2ac4@library-spec u2ac4@library-spec) (set! u2c71@u2ac2@installed-libraries u2ac2@installed-libraries) (set! u2c70@u2ac0@invoke-library-by-spec u2ac0@invoke-library-by-spec) (set! u2c6f@u2abe@visit-library u2abe@visit-library) (set! u2c6e@u2abc@invoke-library u2abc@invoke-library) (set! u2c6d@u2aba@imported-label->binding u2aba@imported-label->binding) (set! u2c6c@u2ab8@install-library u2ab8@install-library) (set! u2c6b@u2ab6@install-library-record u2ab6@install-library-record) (set! u2c6a@u2ab4@label->binding-table u2ab4@label->binding-table) (set! u2c69@u2ab2@find-library-by-spec/die u2ab2@find-library-by-spec/die) (set! u2c68@u2ab0@library-exists? u2ab0@library-exists?) (set! u2c67@u2aae@find-library-by-name u2aae@find-library-by-name) (set! u2c66@u2aac@find-external-library u2aac@find-external-library) (set! u2c65@u2aaa@external-pending-libraries u2aaa@external-pending-libraries) (set! u2c64@u2aa8@current-library-expander u2aa8@current-library-expander) (set! u2c63@u2aa6@library-loader u2aa6@library-loader) (set! u2c62@u2aa4@try-load-from-file u2aa4@try-load-from-file) (set! u2c61@u2aa2@current-precompiled-library-loader u2aa2@current-precompiled-library-loader) (set! u2c60@u2aa0@serialize-all u2aa0@serialize-all) (set! u2c5f@u2a9e@file-locator u2a9e@file-locator) (set! u2c5e@u2a9c@library-name->file-name u2a9c@library-name->file-name) (set! u2c5d@u2a9a@library-extensions u2a9a@library-extensions) (set! u2c5c@u2a98@library-path u2a98@library-path) (set! u2c5b@u2a96@find-library-by u2a96@find-library-by) (set! u2c5a@u2a94@find-dependencies u2a94@find-dependencies) (set! u2c59@u2a92@dummy u2a92@dummy) (set! u2c58@u2a90@set-library-source-file-name! u2a90@set-library-source-file-name!) (set! u2c57@u2a8e@library-source-file-name u2a8e@library-source-file-name) (set! u2c56@u2a8c@set-library-visible?! u2a8c@set-library-visible?!) (set! u2c55@u2a8a@library-visible? u2a8a@library-visible?) (set! u2c54@u2a88@set-library-invoke-code! u2a88@set-library-invoke-code!) (set! u2c53@u2a86@library-invoke-code u2a86@library-invoke-code) (set! u2c52@u2a84@set-library-visit-code! u2a84@set-library-visit-code!) (set! u2c51@u2a82@library-visit-code u2a82@library-visit-code) (set! u2c50@u2a80@set-library-invoke-state! u2a80@set-library-invoke-state!) (set! u2c4f@u2a7e@library-invoke-state u2a7e@library-invoke-state) (set! u2c4e@u2a7c@set-library-visit-state! u2a7c@set-library-visit-state!) (set! u2c4d@u2a7a@library-visit-state u2a7a@library-visit-state) (set! u2c4c@u2a78@set-library-env! u2a78@set-library-env!) (set! u2c4b@u2a76@library-env u2a76@library-env) (set! u2c4a@u2a74@set-library-subst! u2a74@set-library-subst!) (set! u2c49@u2a72@library-subst u2a72@library-subst) (set! u2c48@u2a70@set-library-inv*! u2a70@set-library-inv*!) (set! u2c47@u2a6e@library-inv* u2a6e@library-inv*) (set! u2c46@u2a6c@set-library-vis*! u2a6c@set-library-vis*!) (set! u2c45@u2a6a@library-vis* u2a6a@library-vis*) (set! u2c44@u2a68@set-library-imp*! u2a68@set-library-imp*!) (set! u2c43@u2a66@library-imp* u2a66@library-imp*) (set! u2c42@u2a64@set-library-version! u2a64@set-library-version!) (set! u2c41@u2a62@library-version u2a62@library-version) (set! u2c40@u2a60@set-library-name! u2a60@set-library-name!) (set! u2c3f@u2a5e@library-name u2a5e@library-name) (set! u2c3e@u2a5c@set-library-id! u2a5c@set-library-id!) (set! u2c3d@u2a5a@library-id u2a5a@library-id) (set! u2c3c@u2a58@library? u2a58@library?) (set! u2c3b@u2a4e@rp u2a4e@rp) (set! u2c3a@u2a4c@current-library-collection u2a4c@current-library-collection) (set! u2c39@u2a4a@make-collection u2a4a@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (u2c76@build-global-define u2ce7@build-lambda u2ce9@build-case-lambda u2ceb@build-let u2d19@build-sequence u2d1b@build-void u2d1d@build-letrec u2d1f@build-letrec* u2d21@build-library-letrec* u2d23@build-receive) (begin (set! u2c76@build-global-define (lambda (u2d24@x) (u2d1b@build-void))) (set! u2ce7@build-lambda (lambda (u2d26@ae u2d27@vars u2d28@exp) (list 'lambda u2d27@vars u2d28@exp))) (set! u2ce9@build-case-lambda (lambda (u2d2c@ae u2d2d@vars* u2d2e@exp*) ((lambda (u2d33@build-error u2d35@build-pred u2d37@build-apply u2d39@expand-case-lambda) (begin (set! u2d33@build-error (lambda (u2d6a@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! u2d35@build-pred (lambda (u2d52@ae u2d53@n u2d54@vars) (call-with-values (lambda () ((letrec ((u2d5c@f (lambda (u2d5e@vars u2d5f@count) (if (pair? u2d5e@vars) (u2d5c@f (cdr u2d5e@vars) (+ u2d5f@count '1)) (if (null? u2d5e@vars) (values u2d5f@count '=) (values u2d5f@count '>=)))))) u2d5c@f) u2d54@vars '0)) (lambda (u2d62@u2d59 u2d63@u2d5b) ((lambda (u2d66@pred u2d67@count) (list (list 'primitive u2d66@pred) u2d53@n (list 'quote u2d67@count))) u2d63@u2d5b u2d62@u2d59))))) (set! u2d37@build-apply (lambda (u2d4a@ae u2d4b@g u2d4c@vars u2d4d@exp) (list '(primitive apply) (u2ce7@build-lambda u2d4a@ae u2d4c@vars u2d4d@exp) u2d4b@g))) (set! u2d39@expand-case-lambda (lambda (u2d3a@ae u2d3b@vars u2d3c@exp*) ((lambda (u2d40@g u2d41@n) (list 'lambda u2d40@g (u2ceb@build-let u2d3a@ae (list u2d41@n) (list (list '(primitive length) u2d40@g)) ((letrec ((u2d44@f (lambda (u2d46@vars* u2d47@exp*) (if (null? u2d46@vars*) (u2d33@build-error u2d3a@ae) (list 'if (u2d35@build-pred u2d3a@ae u2d41@n (car u2d46@vars*)) (u2d37@build-apply u2d3a@ae u2d40@g (car u2d46@vars*) (car u2d47@exp*)) (u2d44@f (cdr u2d46@vars*) (cdr u2d47@exp*))))))) u2d44@f) u2d2d@vars* u2d3c@exp*)))) (gensym) (gensym)))) (if (= (length u2d2e@exp*) '1) (u2ce7@build-lambda u2d2c@ae (car u2d2d@vars*) (car u2d2e@exp*)) (u2d39@expand-case-lambda u2d2c@ae u2d2d@vars* u2d2e@exp*)))) '#f '#f '#f '#f))) (set! u2ceb@build-let (lambda (u2d6c@ae u2d6d@lhs* u2d6e@rhs* u2d6f@body) (cons (u2ce7@build-lambda u2d6c@ae u2d6d@lhs* u2d6f@body) u2d6e@rhs*))) (set! u2d19@build-sequence (lambda (u2d74@ae u2d75@exps) ((letrec ((u2d78@loop (lambda (u2d7a@exps) (if (null? (cdr u2d7a@exps)) (car u2d7a@exps) (if (equal? (car u2d7a@exps) (u2d1b@build-void)) (u2d78@loop (cdr u2d7a@exps)) (cons 'begin u2d7a@exps)))))) u2d78@loop) u2d75@exps))) (set! u2d1b@build-void (lambda () '((primitive void)))) (set! u2d1d@build-letrec (lambda (u2d7c@ae u2d7d@vars u2d7e@val-exps u2d7f@body-exp) (if (null? u2d7d@vars) u2d7f@body-exp (list 'letrec (map list u2d7d@vars u2d7e@val-exps) u2d7f@body-exp)))) (set! u2d1f@build-letrec* (lambda (u2d84@ae u2d85@vars u2d86@val-exps u2d87@body-exp) (if (null? u2d85@vars) u2d87@body-exp (u2ceb@build-let u2d84@ae u2d85@vars (map (lambda (u2d8c@x) (list 'quote '#f)) u2d85@vars) (u2d19@build-sequence u2d84@ae (append (map (lambda (u2d8e@lhs u2d8f@rhs) (list 'set! u2d8e@lhs u2d8f@rhs)) u2d85@vars u2d86@val-exps) (list u2d87@body-exp))))))) (set! u2d21@build-library-letrec* (lambda (u2d92@ae u2d93@name u2d94@vars u2d95@locs u2d96@val-exps u2d97@body-exp) (list 'library-letrec* u2d93@name (map list u2d94@vars u2d95@locs u2d96@val-exps) u2d97@body-exp))) (set! u2d23@build-receive (lambda (u2d9e@ae u2d9f@vars u2da0@producer u2da1@body*) (begin (display '"************** in ") (cons 'receive (cons u2d9f@vars (cons u2da0@producer u2da1@body*)))))) (begin (set! u2daf@u2d23@build-receive u2d23@build-receive) (set! u2dae@u2d21@build-library-letrec* u2d21@build-library-letrec*) (set! u2dad@u2d1f@build-letrec* u2d1f@build-letrec*) (set! u2dac@u2d1d@build-letrec u2d1d@build-letrec) (set! u2dab@u2d1b@build-void u2d1b@build-void) (set! u2daa@u2d19@build-sequence u2d19@build-sequence) (set! u2da9@u2ceb@build-let u2ceb@build-let) (set! u2da8@u2ce9@build-case-lambda u2ce9@build-case-lambda) (set! u2da7@u2ce7@build-lambda u2ce7@build-lambda) (set! u2da6@u2c76@build-global-define u2c76@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (u2dbe@file-options-macro u2dc0@set-cons u2dc2@set-union u2dc7@top-mark* u2dc9@top-marked? u2dcb@gen-lexical u2dcd@gen-global u2dcf@gen-label u2dd1@gen-top-level-label u2dd3@gen-define-label+loc u2dd5@gen-define-label u2ddf@rib? u2de1@rib-sym* u2de3@set-rib-sym*! u2de5@rib-mark** u2de7@set-rib-mark**! u2de9@rib-label* u2deb@set-rib-label*! u2ded@rib-sealed/freq u2def@set-rib-sealed/freq! u2df1@rib-cache u2df3@set-rib-cache! u2df5@dummy u2df7@make-empty-rib u2df9@extend-rib! u2dfb@extend-rib/nc! u2dfd@make-rib-map u2dff@seal-rib! u2e01@unseal-rib! u2e03@make-full-rib u2e05@rp u2e0f@stx? u2e11@stx-expr u2e13@set-stx-expr! u2e15@stx-mark* u2e17@set-stx-mark*! u2e19@stx-subst* u2e1b@set-stx-subst*! u2e1d@stx-ae* u2e1f@set-stx-ae*! u2e21@dummy u2e23@datum->stx u2e25@gen-mark u2e27@anti-mark u2e29@anti-mark? u2e2b@mkstx u2e2d@add-mark u2e2f@add-subst u2e31@syntax-kind? u2e33@syntax-vector->list u2e35@syntax-pair? u2e37@syntax-vector? u2e39@syntax-null? u2e3b@syntax-list? u2e3d@syntax-car u2e3f@syntax-cdr u2e41@syntax->list u2e43@id? u2e45@id->sym u2e47@bound-id=? u2e49@free-id=? u2e4b@valid-bound-ids? u2e4d@distinct-bound-ids? u2e4f@bound-id-member? u2e51@self-evaluating? u2e53@strip-annotations u2e55@strip u2e57@stx->datum u2e59@id->label u2e5b@label->binding u2e5d@make-binding u2e5f@binding-type u2e61@binding-value u2e63@raise-unbound-error u2e65@syntax-type u2e73@sanitize-binding u2e75@make-variable-transformer u2e77@variable-transformer? u2e79@variable-transformer-procedure u2e7b@make-eval-transformer u2fcc@parse-define u2fce@parse-define-syntax u2fd0@scheme-stx-hashtable u2fd2@scheme-stx u2fd4@lexical-var u2fd6@lexical-mutable? u2fd8@set-lexical-mutable! u2fda@add-lexical u2fdc@add-lexicals u2fde@letrec-helper u2fe0@letrec-transformer u2fe2@letrec*-transformer u2fe4@fluid-let-syntax-transformer u2fe6@type-descriptor-transformer u2fe8@record-type-descriptor-transformer u2fea@record-constructor-descriptor-transformer u2fec@when-macro u2fee@unless-macro u2ff0@if-transformer u2ff2@and-transformer u2ff4@or-transformer u2ff6@case-macro u2ff8@quote-transformer u2ffa@case-lambda-transformer u2ffc@lambda-transformer u2ffe@bless u3000@with-syntax-macro u3002@invalid-fmls-error u3004@let-macro u3006@let-values-macro u3008@let*-values-macro u300a@trace-lambda-macro u300c@trace-define-macro u300e@trace-define-syntax-macro u3010@trace-let/rec-syntax u3012@trace-let-syntax-macro u3014@trace-letrec-syntax-macro u3016@guard-macro u3018@define-enumeration-macro u301a@time-macro u301c@delay-macro u301e@assert-macro u3020@endianness-macro u3022@identifier-syntax-macro u3024@do-macro u3026@let*-macro u3028@or-macro u302a@and-macro u302c@cond-macro u302e@do-include u3030@include-macro u3032@include-into-macro u3034@syntax-rules-macro u3036@quasiquote-macro u3038@quasisyntax-macro u303a@define-struct-macro u303c@define-record-type-macro u303e@define-condition-type-macro u3040@incorrect-usage-macro u3042@parameterize-macro u3044@foreign-call-transformer u3046@convert-pattern u3048@syntax-dispatch u304a@ellipsis? u304c@underscore? u304e@verify-literals u3050@syntax-case-transformer u3052@ellipsis-map u3054@syntax-transformer u3056@core-macro-transformer u3058@symbol-macro u305a@macro-transformer u305c@local-macro-transformer u305e@do-macro-call u3060@chi-macro u3062@chi-local-macro u3064@chi-global-macro u3066@chi-expr* u3068@chi-application u306a@chi-expr u306c@chi-set! u306e@verify-formals u3070@chi-lambda-clause u3072@chi-lambda-clause* u3074@chi-defun u3076@chi-rhs u3078@expand-interaction-rhs*/init* u307a@chi-rhs* u307c@find-bound=? u307e@find-dups u3080@chi-internal u3082@parse-module u308c@module-interface? u308e@module-interface-first-mark u3090@set-module-interface-first-mark! u3092@module-interface-exp-id-vec u3094@set-module-interface-exp-id-vec! u3096@module-interface-exp-lab-vec u3098@set-module-interface-exp-lab-vec! u309a@dummy u309c@module-interface-exp-id* u309e@chi-internal-module u30a0@chi-body* u30a2@expand-transformer u30a4@parse-exports u30a6@parse-library-name u30a8@parse-library u30aa@parse-import-spec* u30ac@make-top-rib u30ae@make-collector u30b0@inv-collector u30b2@vis-collector u30b4@imp-collector u30b6@chi-library-internal u30b8@chi-interaction-expr u30ba@library-body-expander u30bc@core-library-expander u30be@parse-top-level-program u30c0@top-level-expander u30c2@rp u30cc@env? u30ce@env-names u30d0@set-env-names! u30d2@env-labels u30d4@set-env-labels! u30d6@env-itc u30d8@set-env-itc! u30da@dummy u30dc@rp u30e6@interaction-env? u30e8@interaction-env-rib u30ea@set-interaction-env-rib! u30ec@interaction-env-r u30ee@set-interaction-env-r! u30f0@interaction-env-locs u30f2@set-interaction-env-locs! u30f4@dummy u30f6@interaction-environment-symbols u30f8@environment-bindings u30fa@parse-binding u30fc@environment? u30fe@environment-symbols u3100@environment u3102@null-environment u3104@scheme-report-environment u3106@expand u3108@eval u310a@library-expander u310c@boot-library-expand u310e@rev-map-append u3110@build-exports u3112@make-export-subst u3114@make-export-env/macros u3116@generate-temporaries u3118@free-identifier=? u311a@bound-identifier=? u311c@make-source-condition u311e@extract-position-condition u3120@expression-position u3122@assertion-error u3124@syntax-error u3126@syntax-violation* u3128@syntax-violation u312a@identifier? u312c@datum->syntax u312e@syntax->datum u3130@compile-r6rs-top-level u3132@pre-compile-r6rs-top-level u3134@interaction-environment u3136@top-level-context) (begin (set! u2dbe@file-options-macro (lambda (u3137@x) ((lambda (u313a@valid-option?) (begin (set! u313a@valid-option? (lambda (u3143@x) (and (u2e43@id? u3143@x) (memq (u2e45@id->sym u3143@x) '(no-fail no-create no-truncate))))) ((lambda (u313b@t) ((lambda (u313d@ls/false) (if (and u313d@ls/false (apply (lambda (u313f@opt*) (for-all u313a@valid-option? u313f@opt*)) u313d@ls/false)) (apply (lambda (u3141@opt*) (u2ffe@bless (list 'make-file-options (list 'quote u3141@opt*)))) u313d@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u313b@t))) (u3048@syntax-dispatch u313b@t '(_ . each-any)))) u3137@x))) '#f))) (set! u2dc0@set-cons (lambda (u3145@x u3146@ls) (if (memq u3145@x u3146@ls) u3146@ls (cons u3145@x u3146@ls)))) (set! u2dc2@set-union (lambda (u3149@ls1 u314a@ls2) (if (null? u3149@ls1) u314a@ls2 (if (memq (car u3149@ls1) u314a@ls2) (u2dc2@set-union (cdr u3149@ls1) u314a@ls2) (cons (car u3149@ls1) (u2dc2@set-union (cdr u3149@ls1) u314a@ls2)))))) (set! u2dc7@top-mark* '(top)) (set! u2dc9@top-marked? (lambda (u314d@m*) (memq 'top u314d@m*))) (set! u2dcb@gen-lexical (lambda (u314f@sym) (if (symbol? u314f@sym) (gensym u314f@sym) (if (u2e0f@stx? u314f@sym) (u2dcb@gen-lexical (u2e45@id->sym u314f@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" u314f@sym))))) (set! u2dcd@gen-global (lambda (u3151@x) (u2dcb@gen-lexical u3151@x))) (set! u2dcf@gen-label (lambda (u3153@_) (gensym))) (set! u2dd1@gen-top-level-label (lambda (u3155@id u3156@rib) ((lambda (u315a@find) (begin (set! u315a@find (lambda (u3165@sym u3166@mark* u3167@sym* u3168@mark** u3169@label*) (and (pair? u3167@sym*) (if (and (eq? u3165@sym (car u3167@sym*)) (same-marks? u3166@mark* (car u3168@mark**))) (car u3169@label*) (u315a@find u3165@sym u3166@mark* (cdr u3167@sym*) (cdr u3168@mark**) (cdr u3169@label*)))))) ((lambda (u315b@sym u315c@mark*) ((lambda (u315f@sym*) ((lambda (u3161@t) (if u3161@t ((lambda (u3163@label) (if (u2c6d@u2aba@imported-label->binding u3163@label) (gensym) u3163@label)) u3161@t) (gensym))) (and (memq u315b@sym (u2de1@rib-sym* u3156@rib)) (u315a@find u315b@sym u315c@mark* u315f@sym* (u2de5@rib-mark** u3156@rib) (u2de9@rib-label* u3156@rib))))) (u2de1@rib-sym* u3156@rib))) (u2e45@id->sym u3155@id) (u2e15@stx-mark* u3155@id)))) '#f))) (set! u2dd3@gen-define-label+loc (lambda (u316f@id u3170@rib) ((lambda (u3173@t) (if u3173@t ((lambda (u3175@env) ((lambda (u3177@label u3178@locs) (values u3177@label ((lambda (u317b@t) (if u317b@t (cdr u317b@t) ((lambda (u317d@loc) (begin (u30f2@set-interaction-env-locs! u3175@env (cons (cons u3177@label u317d@loc) u3178@locs)) u317d@loc)) (u2dcb@gen-lexical u316f@id)))) (assq u3177@label u3178@locs)))) (u2dd1@gen-top-level-label u316f@id u3170@rib) (u30f0@interaction-env-locs u3175@env))) u3173@t) (values (gensym) (u2dcb@gen-lexical u316f@id)))) (u3136@top-level-context)))) (set! u2dd5@gen-define-label (lambda (u317f@id u3180@rib) (if (u3136@top-level-context) (u2dd1@gen-top-level-label u317f@id u3180@rib) (gensym)))) (set! u2ddf@rib? (lambda (u3183@x) (and (simple-struct? u3183@x) (eq? (simple-struct-name u3183@x) 'rib)))) (set! u2de1@rib-sym* (lambda (u3185@x) (simple-struct-ref u3185@x '0))) (set! u2de3@set-rib-sym*! (lambda (u3187@x u3188@val) (simple-struct-set! u3187@x '0 u3188@val))) (set! u2de5@rib-mark** (lambda (u318b@x) (simple-struct-ref u318b@x '1))) (set! u2de7@set-rib-mark**! (lambda (u318d@x u318e@val) (simple-struct-set! u318d@x '1 u318e@val))) (set! u2de9@rib-label* (lambda (u3191@x) (simple-struct-ref u3191@x '2))) (set! u2deb@set-rib-label*! (lambda (u3193@x u3194@val) (simple-struct-set! u3193@x '2 u3194@val))) (set! u2ded@rib-sealed/freq (lambda (u3197@x) (simple-struct-ref u3197@x '3))) (set! u2def@set-rib-sealed/freq! (lambda (u3199@x u319a@val) (simple-struct-set! u3199@x '3 u319a@val))) (set! u2df1@rib-cache (lambda (u319d@x) (simple-struct-ref u319d@x '4))) (set! u2df3@set-rib-cache! (lambda (u319f@x u31a0@val) (simple-struct-set! u319f@x '4 u31a0@val))) (set! u2df5@dummy '3) (set! u2df7@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! u2df9@extend-rib! (lambda (u31a3@rib u31a4@id u31a5@label) ((lambda (u31aa@find) (begin (set! u31aa@find (lambda (u31b7@sym u31b8@mark* u31b9@sym* u31ba@mark** u31bb@label*) (and (pair? u31b9@sym*) (if (and (eq? u31b7@sym (car u31b9@sym*)) (same-marks? u31b8@mark* (car u31ba@mark**))) u31bb@label* (u31aa@find u31b7@sym u31b8@mark* (cdr u31b9@sym*) (cdr u31ba@mark**) (cdr u31bb@label*)))))) (begin (if (u2ded@rib-sealed/freq u31a3@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" u31a3@rib) (void)) ((lambda (u31ab@sym u31ac@mark*) ((lambda (u31af@sym*) ((lambda (u31b1@t) (if u31b1@t ((lambda (u31b3@p) (if (not (eq? u31a5@label (car u31b3@p))) (if (u3136@top-level-context) (set-car! u31b3@p u31a5@label) (u3128@syntax-violation '#f '"multiple definitions of identifier" u31a4@id)) (void))) u31b1@t) (begin (if (u2df1@rib-cache u31a3@rib) (hashtable-update! (u2df1@rib-cache u31a3@rib) u31ab@sym (lambda (u31b5@e) (cons (cons u31ac@mark* u31a5@label) u31b5@e)) '()) (void)) (u2de3@set-rib-sym*! u31a3@rib (cons u31ab@sym u31af@sym*)) (u2de7@set-rib-mark**! u31a3@rib (cons u31ac@mark* (u2de5@rib-mark** u31a3@rib))) (u2deb@set-rib-label*! u31a3@rib (cons u31a5@label (u2de9@rib-label* u31a3@rib)))))) (and (memq u31ab@sym (u2de1@rib-sym* u31a3@rib)) (u31aa@find u31ab@sym u31ac@mark* u31af@sym* (u2de5@rib-mark** u31a3@rib) (u2de9@rib-label* u31a3@rib))))) (u2de1@rib-sym* u31a3@rib))) (u2e45@id->sym u31a4@id) (u2e15@stx-mark* u31a4@id))))) '#f))) (set! u2dfb@extend-rib/nc! (lambda (u31c1@rib u31c2@id u31c3@label) ((lambda (u31c7@sym u31c8@mark*) ((lambda (u31cb@sym*) (begin (if (u2df1@rib-cache u31c1@rib) (hashtable-update! (u2df1@rib-cache u31c1@rib) u31c7@sym (lambda (u31cd@e) (cons (cons u31c8@mark* u31c3@label) u31cd@e)) '()) (void)) (u2de3@set-rib-sym*! u31c1@rib (cons u31c7@sym u31cb@sym*)) (u2de7@set-rib-mark**! u31c1@rib (cons u31c8@mark* (u2de5@rib-mark** u31c1@rib))) (u2deb@set-rib-label*! u31c1@rib (cons u31c3@label (u2de9@rib-label* u31c1@rib))))) (u2de1@rib-sym* u31c1@rib))) (u2e45@id->sym u31c2@id) (u2e15@stx-mark* u31c2@id)))) (set! u2dfd@make-rib-map (lambda (u31cf@sym*) ((lambda (u31d1@ht) ((letrec ((u31d3@f (lambda (u31d5@i u31d6@sym*) (if (null? u31d6@sym*) u31d1@ht (begin (hashtable-update! u31d1@ht (car u31d6@sym*) (lambda (u31d9@x) (cons u31d5@i u31d9@x)) '()) (u31d3@f (+ u31d5@i '1) (cdr u31d6@sym*))))))) u31d3@f) '0 u31cf@sym*)) (make-eq-hashtable)))) (set! u2dff@seal-rib! (lambda (u31db@rib) ((lambda (u31dd@sym*) (if (not (null? u31dd@sym*)) (begin (u2de3@set-rib-sym*! u31db@rib (list->vector u31dd@sym*)) (u2de7@set-rib-mark**! u31db@rib (list->vector (u2de5@rib-mark** u31db@rib))) (u2deb@set-rib-label*! u31db@rib (list->vector (u2de9@rib-label* u31db@rib))) (u2def@set-rib-sealed/freq! u31db@rib (u2dfd@make-rib-map u31dd@sym*))) (void))) (u2de1@rib-sym* u31db@rib)))) (set! u2e01@unseal-rib! (lambda (u31df@rib) (if (u2ded@rib-sealed/freq u31df@rib) (begin (u2def@set-rib-sealed/freq! u31df@rib '#f) (u2de3@set-rib-sym*! u31df@rib (vector->list (u2de1@rib-sym* u31df@rib))) (u2de7@set-rib-mark**! u31df@rib (vector->list (u2de5@rib-mark** u31df@rib))) (u2deb@set-rib-label*! u31df@rib (vector->list (u2de9@rib-label* u31df@rib)))) (void)))) (set! u2e03@make-full-rib (lambda (u31e1@id* u31e2@label*) ((lambda (u31e5@r) (begin (u2dff@seal-rib! u31e5@r) u31e5@r)) (make-simple-struct 'rib '6 (list (map u2e45@id->sym u31e1@id*) (map u2e15@stx-mark* u31e1@id*) u31e2@label* '#f '#f))))) (set! u2e05@rp (u299f@u287b@make-record-printer 'stx (lambda (u31e7@x u31e8@p u31e9@wr) (begin (display '"#<syntax " u31e8@p) (write (u2e57@stx->datum u31e7@x) u31e8@p) ((lambda (u31ed@expr) (if (u2997@u286b@annotation? u31ed@expr) ((lambda (u31ef@src) (if (pair? u31ef@src) (begin (display '" [" u31e8@p) (display (cdr u31ef@src) u31e8@p) (display '" of " u31e8@p) (display (car u31ef@src) u31e8@p) (display '"]" u31e8@p)) (void))) (u2998@u286d@annotation-source u31ed@expr)) (void))) (u2e11@stx-expr u31e7@x)) (display '">" u31e8@p))))) (set! u2e0f@stx? (lambda (u31f1@x) (and (simple-struct? u31f1@x) (eq? (simple-struct-name u31f1@x) 'stx)))) (set! u2e11@stx-expr (lambda (u31f3@x) (simple-struct-ref u31f3@x '0))) (set! u2e13@set-stx-expr! (lambda (u31f5@x u31f6@val) (simple-struct-set! u31f5@x '0 u31f6@val))) (set! u2e15@stx-mark* (lambda (u31f9@x) (simple-struct-ref u31f9@x '1))) (set! u2e17@set-stx-mark*! (lambda (u31fb@x u31fc@val) (simple-struct-set! u31fb@x '1 u31fc@val))) (set! u2e19@stx-subst* (lambda (u31ff@x) (simple-struct-ref u31ff@x '2))) (set! u2e1b@set-stx-subst*! (lambda (u3201@x u3202@val) (simple-struct-set! u3201@x '2 u3202@val))) (set! u2e1d@stx-ae* (lambda (u3205@x) (simple-struct-ref u3205@x '3))) (set! u2e1f@set-stx-ae*! (lambda (u3207@x u3208@val) (simple-struct-set! u3207@x '3 u3208@val))) (set! u2e21@dummy '3) (set! u2e23@datum->stx (lambda (u320b@id u320c@datum) (make-simple-struct 'stx '5 (list u320c@datum (u2e15@stx-mark* u320b@id) (u2e19@stx-subst* u320b@id) (u2e1d@stx-ae* u320b@id))))) (set! u2e25@gen-mark (lambda () (string '#\m))) (set! u2e27@anti-mark '#f) (set! u2e29@anti-mark? not) (set! u2e2b@mkstx (lambda (u320f@e u3210@m* u3211@s* u3212@ae*) (if (and (u2e0f@stx? u320f@e) (not (u2dc9@top-marked? u3210@m*))) (call-with-values (lambda () (join-wraps u3210@m* u3211@s* u3212@ae* u320f@e)) (lambda (u321d@u3218 u321e@u321a u321f@u321c) ((lambda (u3223@ae* u3224@s* u3225@m*) (make-simple-struct 'stx '5 (list (u2e11@stx-expr u320f@e) u3225@m* u3224@s* u3223@ae*))) u321f@u321c u321e@u321a u321d@u3218))) (make-simple-struct 'stx '5 (list u320f@e u3210@m* u3211@s* u3212@ae*))))) (set! u2e2d@add-mark (lambda (u3229@m u322a@e u322b@ae) (u2e2b@mkstx u322a@e (list u3229@m) '(shift) (list u322b@ae)))) (set! u2e2f@add-subst (lambda (u322f@subst u3230@e) (u2e2b@mkstx u3230@e '() (list u322f@subst) '()))) (set! u2e31@syntax-kind? (lambda (u3233@x u3234@p?) (if (u2e0f@stx? u3233@x) (u2e31@syntax-kind? (u2e11@stx-expr u3233@x) u3234@p?) (if (u2997@u286b@annotation? u3233@x) (u2e31@syntax-kind? (u2999@u286f@annotation-expression u3233@x) u3234@p?) (u3234@p? u3233@x))))) (set! u2e33@syntax-vector->list (lambda (u3237@x) (if (u2e0f@stx? u3237@x) ((lambda (u3239@ls u323a@m* u323b@s* u323c@ae*) (map (lambda (u3241@x) (u2e2b@mkstx u3241@x u323a@m* u323b@s* u323c@ae*)) u3239@ls)) (u2e33@syntax-vector->list (u2e11@stx-expr u3237@x)) (u2e15@stx-mark* u3237@x) (u2e19@stx-subst* u3237@x) (u2e1d@stx-ae* u3237@x)) (if (u2997@u286b@annotation? u3237@x) (u2e33@syntax-vector->list (u2999@u286f@annotation-expression u3237@x)) (if (vector? u3237@x) (vector->list u3237@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" u3237@x)))))) (set! u2e35@syntax-pair? (lambda (u3243@x) (u2e31@syntax-kind? u3243@x pair?))) (set! u2e37@syntax-vector? (lambda (u3245@x) (u2e31@syntax-kind? u3245@x vector?))) (set! u2e39@syntax-null? (lambda (u3247@x) (u2e31@syntax-kind? u3247@x null?))) (set! u2e3b@syntax-list? (lambda (u3249@x) (or (u2e39@syntax-null? u3249@x) (and (u2e35@syntax-pair? u3249@x) (u2e3b@syntax-list? (u2e3f@syntax-cdr u3249@x)))))) (set! u2e3d@syntax-car (lambda (u324b@x) (if (u2e0f@stx? u324b@x) (u2e2b@mkstx (u2e3d@syntax-car (u2e11@stx-expr u324b@x)) (u2e15@stx-mark* u324b@x) (u2e19@stx-subst* u324b@x) (u2e1d@stx-ae* u324b@x)) (if (u2997@u286b@annotation? u324b@x) (u2e3d@syntax-car (u2999@u286f@annotation-expression u324b@x)) (if (pair? u324b@x) (car u324b@x) (assertion-violation 'syntax-car '"BUG: not a pair" u324b@x)))))) (set! u2e3f@syntax-cdr (lambda (u324d@x) (if (u2e0f@stx? u324d@x) (u2e2b@mkstx (u2e3f@syntax-cdr (u2e11@stx-expr u324d@x)) (u2e15@stx-mark* u324d@x) (u2e19@stx-subst* u324d@x) (u2e1d@stx-ae* u324d@x)) (if (u2997@u286b@annotation? u324d@x) (u2e3f@syntax-cdr (u2999@u286f@annotation-expression u324d@x)) (if (pair? u324d@x) (cdr u324d@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" u324d@x)))))) (set! u2e41@syntax->list (lambda (u324f@x) (if (u2e35@syntax-pair? u324f@x) (cons (u2e3d@syntax-car u324f@x) (u2e41@syntax->list (u2e3f@syntax-cdr u324f@x))) (if (u2e39@syntax-null? u324f@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" u324f@x))))) (set! u2e43@id? (lambda (u3251@x) (and (u2e0f@stx? u3251@x) (symbol? (u2e11@stx-expr u3251@x))))) (set! u2e45@id->sym (lambda (u3253@x) (u2e11@stx-expr u3253@x))) (set! u2e47@bound-id=? (lambda (u3255@x u3256@y) (and (eq? (u2e45@id->sym u3255@x) (u2e45@id->sym u3256@y)) (same-marks? (u2e15@stx-mark* u3255@x) (u2e15@stx-mark* u3256@y))))) (set! u2e49@free-id=? (lambda (u3259@i u325a@j) ((lambda (u325d@t0 u325e@t1) (if (or u325d@t0 u325e@t1) (eq? u325d@t0 u325e@t1) (eq? (u2e45@id->sym u3259@i) (u2e45@id->sym u325a@j)))) (id->real-label u3259@i) (id->real-label u325a@j)))) (set! u2e4b@valid-bound-ids? (lambda (u3261@id*) (and (for-all u2e43@id? u3261@id*) (u2e4d@distinct-bound-ids? u3261@id*)))) (set! u2e4d@distinct-bound-ids? (lambda (u3263@id*) (or (null? u3263@id*) (and (not (u2e4f@bound-id-member? (car u3263@id*) (cdr u3263@id*))) (u2e4d@distinct-bound-ids? (cdr u3263@id*)))))) (set! u2e4f@bound-id-member? (lambda (u3265@id u3266@id*) (and (pair? u3266@id*) (or (u2e47@bound-id=? u3265@id (car u3266@id*)) (u2e4f@bound-id-member? u3265@id (cdr u3266@id*)))))) (set! u2e51@self-evaluating? (lambda (u3269@x) (or (number? u3269@x) (string? u3269@x) (char? u3269@x) (boolean? u3269@x) (regexp? u3269@x) (bytevector? u3269@x)))) (set! u2e53@strip-annotations (lambda (u326b@x) (if (pair? u326b@x) (cons (u2e53@strip-annotations (car u326b@x)) (u2e53@strip-annotations (cdr u326b@x))) (if (vector? u326b@x) (vector-map u2e53@strip-annotations u326b@x) (if (u2997@u286b@annotation? u326b@x) (u2996@u2869@annotation-stripped u326b@x) u326b@x))))) (set! u2e55@strip (lambda (u326d@x u326e@m*) (if (u2dc9@top-marked? u326e@m*) (if (or (u2997@u286b@annotation? u326d@x) (and (pair? u326d@x) (u2997@u286b@annotation? (car u326d@x))) (and (vector? u326d@x) (> (vector-length u326d@x) '0) (u2997@u286b@annotation? (vector-ref u326d@x '0)))) (u2e53@strip-annotations u326d@x) u326d@x) ((letrec ((u3271@f (lambda (u3273@x) (if (u2e0f@stx? u3273@x) (u2e55@strip (u2e11@stx-expr u3273@x) (u2e15@stx-mark* u3273@x)) (if (u2997@u286b@annotation? u3273@x) (u2996@u2869@annotation-stripped u3273@x) (if (pair? u3273@x) ((lambda (u3275@a u3276@d) (if (and (eq? u3275@a (car u3273@x)) (eq? u3276@d (cdr u3273@x))) u3273@x (cons u3275@a u3276@d))) (u3271@f (car u3273@x)) (u3271@f (cdr u3273@x))) (if (vector? u3273@x) ((lambda (u3279@old) ((lambda (u327b@new) (if (for-all eq? u3279@old u327b@new) u3273@x (list->vector u327b@new))) (map u3271@f u3279@old))) (vector->list u3273@x)) u3273@x))))))) u3271@f) u326d@x)))) (set! u2e57@stx->datum (lambda (u327d@x) (u2e55@strip u327d@x '()))) (set! u2e59@id->label (lambda (u327f@id) (or (id->real-label u327f@id) ((lambda (u3281@t) (if u3281@t ((lambda (u3283@env) ((lambda (u3285@rib) (call-with-values (lambda () (u2dd3@gen-define-label+loc u327f@id u3285@rib)) (lambda (u328b@u3288 u328c@u328a) ((lambda (u328f@loc_ u3290@lab) (begin (u2df9@extend-rib! u3285@rib u327f@id u3290@lab) u3290@lab)) u328c@u328a u328b@u3288)))) (u30e8@interaction-env-rib u3283@env))) u3281@t) '#f)) (u3136@top-level-context))))) (set! u2e5b@label->binding (lambda (u3293@x u3294@r) ((lambda (u3297@t) (if u3297@t ((lambda (u3299@b) (if (and (pair? u3299@b) (eq? (car u3299@b) '$core-rtd)) (cons '$rtd (map u2ffe@bless (cdr u3299@b))) (if (and (pair? u3299@b) (eq? (car u3299@b) 'global-rtd)) ((lambda (u329b@lib u329c@loc) (cons '$rtd (symbol-value u329c@loc))) (cadr u3299@b) (cddr u3299@b)) u3299@b))) u3297@t) ((lambda (u329f@t) (if u329f@t (cdr u329f@t) ((lambda (u32a1@t) (if u32a1@t ((lambda (u32a3@env) ((lambda (u32a5@t) (if u32a5@t ((lambda (u32a7@p) (cons* 'lexical (cdr u32a7@p) '#f)) u32a5@t) '(displaced-lexical . #f))) (assq u3293@x (u30f0@interaction-env-locs u32a3@env)))) u32a1@t) '(displaced-lexical . #f))) (u3136@top-level-context)))) (assq u3293@x u3294@r)))) (u2c6d@u2aba@imported-label->binding u3293@x)))) (set! u2e5d@make-binding cons) (set! u2e5f@binding-type car) (set! u2e61@binding-value cdr) (set! u2e63@raise-unbound-error (lambda (u32a9@id) (u3126@syntax-violation* '#f '"unbound identifier" u32a9@id (u4e87@u4ccd@make-undefined-violation)))) (set! u2e65@syntax-type (lambda (u32ab@e u32ac@r) (if (u2e43@id? u32ab@e) ((lambda (u32af@id) ((lambda (u32b1@label) ((lambda (u32b3@b) ((lambda (u32b5@type) ((lambda () (begin (if (not u32b1@label) (u2e63@raise-unbound-error u32af@id) (void)) ((lambda (u32b7@t) (if (memv u32b7@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values u32b5@type (u2e61@binding-value u32b3@b) u32af@id) (values 'other '#f '#f))) u32b5@type))))) (u2e5f@binding-type u32b3@b))) (u2e5b@label->binding u32b1@label u32ac@r))) (u2e59@id->label u32af@id))) u32ab@e) (if (u2e35@syntax-pair? u32ab@e) ((lambda (u32b9@id) (if (u2e43@id? u32b9@id) ((lambda (u32bb@label) ((lambda (u32bd@b) ((lambda (u32bf@type) ((lambda () (begin (if (not u32bb@label) (u2e63@raise-unbound-error u32b9@id) (void)) ((lambda (u32c1@t) (if (memv u32c1@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values u32bf@type (u2e61@binding-value u32bd@b) u32b9@id) (values 'call '#f '#f))) u32bf@type))))) (u2e5f@binding-type u32bd@b))) (u2e5b@label->binding u32bb@label u32ac@r))) (u2e59@id->label u32b9@id)) (values 'call '#f '#f))) (u2e3d@syntax-car u32ab@e)) ((lambda (u32c3@d) (if (u2e51@self-evaluating? u32c3@d) (values 'constant u32c3@d '#f) (values 'other '#f '#f))) (u2e57@stx->datum u32ab@e)))))) (set! u2e73@sanitize-binding (lambda (u32c5@x u32c6@src) (if (procedure? u32c5@x) (cons* 'local-macro u32c5@x u32c6@src) (if (and (pair? u32c5@x) (eq? (car u32c5@x) 'macro!) (procedure? (cdr u32c5@x))) (cons* 'local-macro! (cdr u32c5@x) u32c6@src) (if (and (pair? u32c5@x) (eq? (car u32c5@x) '$rtd)) u32c5@x (assertion-violation 'expand '"invalid transformer" u32c5@x)))))) (set! u2e75@make-variable-transformer (lambda (u32c9@x) (if (procedure? u32c9@x) (cons 'macro! u32c9@x) (assertion-violation 'make-variable-transformer '"not a procedure" u32c9@x)))) (set! u2e77@variable-transformer? (lambda (u32cb@x) (and (pair? u32cb@x) (eq? (car u32cb@x) 'macro!) (procedure? (cdr u32cb@x))))) (set! u2e79@variable-transformer-procedure (lambda (u32cd@x) (if (u2e77@variable-transformer? u32cd@x) (cdr u32cd@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" u32cd@x)))) (set! u2e7b@make-eval-transformer (lambda (u32cf@x) (u2e73@sanitize-binding (eval-core (u29f8@u29b0@expanded->core u32cf@x)) u32cf@x))) (set! u2fcc@parse-define (lambda (u32d1@x) ((lambda (u32d3@t) ((lambda (u32d5@ls/false) (if (and u32d5@ls/false (apply (lambda (u32d7@id u32d8@fmls u32d9@b u32da@b*) (u2e43@id? u32d7@id)) u32d5@ls/false)) (apply (lambda (u32df@id u32e0@fmls u32e1@b u32e2@b*) (begin (u306e@verify-formals u32e0@fmls u32d1@x) (values u32df@id (cons 'defun (cons u32e0@fmls (cons u32e1@b u32e2@b*)))))) u32d5@ls/false) ((lambda (u32e7@t) ((lambda (u32e9@ls/false) (if (and u32e9@ls/false (apply (lambda (u32eb@id u32ec@val) (u2e43@id? u32eb@id)) u32e9@ls/false)) (apply (lambda (u32ef@id u32f0@val) (values u32ef@id (cons 'expr u32f0@val))) u32e9@ls/false) ((lambda (u32f3@t) ((lambda (u32f5@ls/false) (if (and u32f5@ls/false (apply (lambda (u32f7@id) (u2e43@id? u32f7@id)) u32f5@ls/false)) (apply (lambda (u32f9@id) (values u32f9@id (cons 'expr (u2ffe@bless '(void))))) u32f5@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u32f3@t))) (u3048@syntax-dispatch u32f3@t '(_ any)))) u32e7@t))) (u3048@syntax-dispatch u32e7@t '(_ any any)))) u32d3@t))) (u3048@syntax-dispatch u32d3@t '(_ (any . any) any . each-any)))) u32d1@x))) (set! u2fce@parse-define-syntax (lambda (u32fb@x) ((lambda (u32fd@t) ((lambda (u32ff@ls/false) (if (and u32ff@ls/false (apply (lambda (u3301@id u3302@val) (u2e43@id? u3301@id)) u32ff@ls/false)) (apply (lambda (u3305@id u3306@val) (values u3305@id u3306@val)) u32ff@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u32fd@t))) (u3048@syntax-dispatch u32fd@t '(_ any any)))) u32fb@x))) (set! u2fd0@scheme-stx-hashtable (make-eq-hashtable)) (set! u2fd2@scheme-stx (lambda (u3309@sym) (or (hashtable-ref u2fd0@scheme-stx-hashtable u3309@sym '#f) ((lambda (u330b@subst) ((lambda (u330d@stx) ((lambda (u330f@stx) ((lambda () (begin (hashtable-set! u2fd0@scheme-stx-hashtable u3309@sym u330f@stx) u330f@stx)))) ((lambda (u3311@t) (if u3311@t ((lambda (u3313@x) ((lambda (u3315@name u3316@label) (u2e2f@add-subst (make-simple-struct 'rib '6 (list (list u3315@name) (list u2dc7@top-mark*) (list u3316@label) '#f '#f)) u330d@stx)) (car u3313@x) (cdr u3313@x))) u3311@t) u330d@stx)) (assq u3309@sym u330b@subst)))) (make-simple-struct 'stx '5 (list u3309@sym u2dc7@top-mark* '() '())))) (u2c49@u2a72@library-subst (u2c67@u2aae@find-library-by-name '(psyntax system $all))))))) (set! u2fd4@lexical-var car) (set! u2fd6@lexical-mutable? cdr) (set! u2fd8@set-lexical-mutable! set-cdr!) (set! u2fda@add-lexical (lambda (u3319@lab u331a@lex u331b@r) (cons (cons* u3319@lab 'lexical u331a@lex '#f) u331b@r))) (set! u2fdc@add-lexicals (lambda (u331f@lab* u3320@lex* u3321@r) (if (null? u331f@lab*) u3321@r (u2fdc@add-lexicals (cdr u331f@lab*) (cdr u3320@lex*) (u2fda@add-lexical (car u331f@lab*) (car u3320@lex*) u3321@r))))) (set! u2fde@letrec-helper (lambda (u3325@e u3326@r u3327@mr u3328@build) ((lambda (u332d@t) ((lambda (u332f@ls/false) (if u332f@ls/false (apply (lambda (u3331@lhs* u3332@rhs* u3333@b u3334@b*) (if (not (u2e4b@valid-bound-ids? u3331@lhs*)) (u3002@invalid-fmls-error u3325@e u3331@lhs*) ((lambda (u3339@lex* u333a@lab*) ((lambda (u333d@rib u333e@r) ((lambda (u3341@body u3342@rhs*) (u3328@build '#f u3339@lex* u3342@rhs* u3341@body)) (u3080@chi-internal (u2e2f@add-subst u333d@rib (cons u3333@b u3334@b*)) u333e@r u3327@mr) (u3066@chi-expr* (map (lambda (u3345@x) (u2e2f@add-subst u333d@rib u3345@x)) u3332@rhs*) u333e@r u3327@mr))) (u2e03@make-full-rib u3331@lhs* u333a@lab*) (u2fdc@add-lexicals u333a@lab* u3339@lex* u3326@r))) (map u2dcb@gen-lexical u3331@lhs*) (map u2dcf@gen-label u3331@lhs*)))) u332f@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u332d@t))) (u3048@syntax-dispatch u332d@t '(_ #(each (any any)) any . each-any)))) u3325@e))) (set! u2fe0@letrec-transformer (lambda (u3347@e u3348@r u3349@mr) (u2fde@letrec-helper u3347@e u3348@r u3349@mr u2dac@u2d1d@build-letrec))) (set! u2fe2@letrec*-transformer (lambda (u334d@e u334e@r u334f@mr) (u2fde@letrec-helper u334d@e u334e@r u334f@mr u2dad@u2d1f@build-letrec*))) (set! u2fe4@fluid-let-syntax-transformer (lambda (u3353@e u3354@r u3355@mr) ((lambda (u335a@lookup) (begin (set! u335a@lookup (lambda (u336d@x) (or (u2e59@id->label u336d@x) (u3128@syntax-violation '#f '"unbound identifier" u3353@e u336d@x)))) ((lambda (u335b@t) ((lambda (u335d@ls/false) (if u335d@ls/false (apply (lambda (u335f@lhs* u3360@rhs* u3361@b u3362@b*) (if (not (u2e4b@valid-bound-ids? u335f@lhs*)) (u3002@invalid-fmls-error u3353@e u335f@lhs*) ((lambda (u3367@lab* u3368@rhs*) (u3080@chi-internal (cons u3361@b u3362@b*) (append (map cons u3367@lab* u3368@rhs*) u3354@r) (append (map cons u3367@lab* u3368@rhs*) u3355@mr))) (map u335a@lookup u335f@lhs*) (map (lambda (u336b@x) (u2e7b@make-eval-transformer (u30a2@expand-transformer u336b@x u3355@mr))) u3360@rhs*)))) u335d@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u335b@t))) (u3048@syntax-dispatch u335b@t '(_ #(each (any any)) any . each-any)))) u3353@e))) '#f))) (set! u2fe6@type-descriptor-transformer (lambda (u336f@e u3370@r u3371@mr) ((lambda (u3375@t) ((lambda (u3377@ls/false) (if (and u3377@ls/false (apply (lambda (u3379@id) (u2e43@id? u3379@id)) u3377@ls/false)) (apply (lambda (u337b@id) ((lambda (u337d@lab) ((lambda (u337f@b) ((lambda (u3381@type) ((lambda () (begin (if (not u337d@lab) (u2e63@raise-unbound-error u337b@id) (void)) (if (not (and (eq? u3381@type '$rtd) (not (list? (u2e61@binding-value u337f@b))))) (u3128@syntax-violation '#f '"not a record type" u336f@e) (void)) (list 'quote (u2e61@binding-value u337f@b)))))) (u2e5f@binding-type u337f@b))) (u2e5b@label->binding u337d@lab u3370@r))) (u2e59@id->label u337b@id))) u3377@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3375@t))) (u3048@syntax-dispatch u3375@t '(_ any)))) u336f@e))) (set! u2fe8@record-type-descriptor-transformer (lambda (u3383@e u3384@r u3385@mr) ((lambda (u3389@t) ((lambda (u338b@ls/false) (if (and u338b@ls/false (apply (lambda (u338d@id) (u2e43@id? u338d@id)) u338b@ls/false)) (apply (lambda (u338f@id) ((lambda (u3391@lab) ((lambda (u3393@b) ((lambda (u3395@type) ((lambda () (begin (if (not u3391@lab) (u2e63@raise-unbound-error u338f@id) (void)) (if (not (and (eq? u3395@type '$rtd) (list? (u2e61@binding-value u3393@b)))) (u3128@syntax-violation '#f '"not a record type" u3383@e) (void)) (u306a@chi-expr (car (u2e61@binding-value u3393@b)) u3384@r u3385@mr))))) (u2e5f@binding-type u3393@b))) (u2e5b@label->binding u3391@lab u3384@r))) (u2e59@id->label u338f@id))) u338b@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3389@t))) (u3048@syntax-dispatch u3389@t '(_ any)))) u3383@e))) (set! u2fea@record-constructor-descriptor-transformer (lambda (u3397@e u3398@r u3399@mr) ((lambda (u339d@t) ((lambda (u339f@ls/false) (if (and u339f@ls/false (apply (lambda (u33a1@id) (u2e43@id? u33a1@id)) u339f@ls/false)) (apply (lambda (u33a3@id) ((lambda (u33a5@lab) ((lambda (u33a7@b) ((lambda (u33a9@type) ((lambda () (begin (if (not u33a5@lab) (u2e63@raise-unbound-error u33a3@id) (void)) (if (not (and (eq? u33a9@type '$rtd) (list? (u2e61@binding-value u33a7@b)))) (u3128@syntax-violation '#f '"invalid type" u3397@e) (void)) (u306a@chi-expr (cadr (u2e61@binding-value u33a7@b)) u3398@r u3399@mr))))) (u2e5f@binding-type u33a7@b))) (u2e5b@label->binding u33a5@lab u3398@r))) (u2e59@id->label u33a3@id))) u339f@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u339d@t))) (u3048@syntax-dispatch u339d@t '(_ any)))) u3397@e))) (set! u2fec@when-macro (lambda (u33ab@e) ((lambda (u33ad@t) ((lambda (u33af@ls/false) (if u33af@ls/false (apply (lambda (u33b1@test u33b2@e u33b3@e*) (u2ffe@bless (list 'if u33b1@test (cons 'begin (cons u33b2@e u33b3@e*))))) u33af@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u33ad@t))) (u3048@syntax-dispatch u33ad@t '(_ any any . each-any)))) u33ab@e))) (set! u2fee@unless-macro (lambda (u33b7@e) ((lambda (u33b9@t) ((lambda (u33bb@ls/false) (if u33bb@ls/false (apply (lambda (u33bd@test u33be@e u33bf@e*) (u2ffe@bless (list 'if (list 'not u33bd@test) (cons 'begin (cons u33be@e u33bf@e*))))) u33bb@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u33b9@t))) (u3048@syntax-dispatch u33b9@t '(_ any any . each-any)))) u33b7@e))) (set! u2ff0@if-transformer (lambda (u33c3@e u33c4@r u33c5@mr) ((lambda (u33c9@t) ((lambda (u33cb@ls/false) (if u33cb@ls/false (apply (lambda (u33cd@e0 u33ce@e1 u33cf@e2) (list 'if (u306a@chi-expr u33cd@e0 u33c4@r u33c5@mr) (u306a@chi-expr u33ce@e1 u33c4@r u33c5@mr) (u306a@chi-expr u33cf@e2 u33c4@r u33c5@mr))) u33cb@ls/false) ((lambda (u33d3@t) ((lambda (u33d5@ls/false) (if u33d5@ls/false (apply (lambda (u33d7@e0 u33d8@e1) (list 'if (u306a@chi-expr u33d7@e0 u33c4@r u33c5@mr) (u306a@chi-expr u33d8@e1 u33c4@r u33c5@mr) (u2dab@u2d1b@build-void))) u33d5@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u33d3@t))) (u3048@syntax-dispatch u33d3@t '(_ any any)))) u33c9@t))) (u3048@syntax-dispatch u33c9@t '(_ any any any)))) u33c3@e))) (set! u2ff2@and-transformer (lambda (u33db@e u33dc@r u33dd@mr) ((lambda (u33e1@t) ((lambda (u33e3@ls/false) (if u33e3@ls/false (apply (lambda (u33e5@e*) (cons 'and (u3066@chi-expr* u33e5@e* u33dc@r u33dd@mr))) u33e3@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u33e1@t))) (u3048@syntax-dispatch u33e1@t '(_ . each-any)))) u33db@e))) (set! u2ff4@or-transformer (lambda (u33e7@e u33e8@r u33e9@mr) ((lambda (u33ed@t) ((lambda (u33ef@ls/false) (if u33ef@ls/false (apply (lambda (u33f1@e*) (cons 'or (u3066@chi-expr* u33f1@e* u33e8@r u33e9@mr))) u33ef@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u33ed@t))) (u3048@syntax-dispatch u33ed@t '(_ . each-any)))) u33e7@e))) (set! u2ff6@case-macro (lambda (u33f3@e) ((lambda (u33f6@build-last u33f8@build-one) (begin (set! u33f6@build-last (lambda (u341d@cls) ((lambda (u341f@t) ((lambda (u3421@ls/false) (if u3421@ls/false (apply (lambda (u3423@e u3424@e*) (cons 'begin (cons u3423@e u3424@e*))) u3421@ls/false) ((lambda (u3427@t) ((lambda (u3429@ls/false) (if u3429@ls/false (apply (lambda () (u33f8@build-one u341d@cls '(if #f #f))) u3429@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3427@t))) (u3048@syntax-dispatch u3427@t '_))) u341f@t))) (u3048@syntax-dispatch u341f@t '(#(scheme-id else) any . each-any)))) u341d@cls))) (set! u33f8@build-one (lambda (u340f@cls u3410@k) ((lambda (u3413@t) ((lambda (u3415@ls/false) (if u3415@ls/false (apply (lambda (u3417@d* u3418@e u3419@e*) (list 'if (list 'memv 't (list 'quote u3417@d*)) (cons 'begin (cons u3418@e u3419@e*)) u3410@k)) u3415@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3413@t))) (u3048@syntax-dispatch u3413@t '(each-any any . each-any)))) u340f@cls))) ((lambda (u33f9@t) ((lambda (u33fb@ls/false) (if u33fb@ls/false (apply (lambda (u33fd@expr) (u2ffe@bless (cons 'let (cons (list (list 't u33fd@expr)) '((if #f #f)))))) u33fb@ls/false) ((lambda (u33ff@t) ((lambda (u3401@ls/false) (if u3401@ls/false (apply (lambda (u3403@expr u3404@cls u3405@cls*) (u2ffe@bless (list 'let (list (list 't u3403@expr)) ((letrec ((u3409@f (lambda (u340b@cls u340c@cls*) (if (null? u340c@cls*) (u33f6@build-last u340b@cls) (u33f8@build-one u340b@cls (u3409@f (car u340c@cls*) (cdr u340c@cls*))))))) u3409@f) u3404@cls u3405@cls*)))) u3401@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u33ff@t))) (u3048@syntax-dispatch u33ff@t '(_ any any . each-any)))) u33f9@t))) (u3048@syntax-dispatch u33f9@t '(_ any)))) u33f3@e))) '#f '#f))) (set! u2ff8@quote-transformer (lambda (u342b@e u342c@r u342d@mr) ((lambda (u3431@t) ((lambda (u3433@ls/false) (if u3433@ls/false (apply (lambda (u3435@datum) (list 'quote (u2e57@stx->datum u3435@datum))) u3433@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3431@t))) (u3048@syntax-dispatch u3431@t '(_ any)))) u342b@e))) (set! u2ffa@case-lambda-transformer (lambda (u3437@e u3438@r u3439@mr) ((lambda (u343d@t) ((lambda (u343f@ls/false) (if u343f@ls/false (apply (lambda (u3441@fmls* u3442@b* u3443@b**) (call-with-values (lambda () (u3072@chi-lambda-clause* u3437@e u3441@fmls* (map cons u3442@b* u3443@b**) u3438@r u3439@mr)) (lambda (u344b@u3448 u344c@u344a) ((lambda (u344f@body* u3450@fmls*) (u2da8@u2ce9@build-case-lambda '#f u3450@fmls* u344f@body*)) u344c@u344a u344b@u3448)))) u343f@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u343d@t))) (u3048@syntax-dispatch u343d@t '(_ . #(each (any any . each-any)))))) u3437@e))) (set! u2ffc@lambda-transformer (lambda (u3453@e u3454@r u3455@mr) ((lambda (u3459@t) ((lambda (u345b@ls/false) (if u345b@ls/false (apply (lambda (u345d@fmls u345e@b u345f@b*) (call-with-values (lambda () (u3070@chi-lambda-clause u3453@e u345d@fmls (cons u345e@b u345f@b*) u3454@r u3455@mr)) (lambda (u3467@u3464 u3468@u3466) ((lambda (u346b@body u346c@fmls) (u2da7@u2ce7@build-lambda '#f u346c@fmls u346b@body)) u3468@u3466 u3467@u3464)))) u345b@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3459@t))) (u3048@syntax-dispatch u3459@t '(_ any any . each-any)))) u3453@e))) (set! u2ffe@bless (lambda (u346f@x) (u2e2b@mkstx ((letrec ((u3471@f (lambda (u3473@x) (if (u2e0f@stx? u3473@x) u3473@x (if (pair? u3473@x) (cons (u3471@f (car u3473@x)) (u3471@f (cdr u3473@x))) (if (symbol? u3473@x) (u2fd2@scheme-stx u3473@x) (if (vector? u3473@x) (vector-map u3471@f u3473@x) u3473@x))))))) u3471@f) u346f@x) '() '() '()))) (set! u3000@with-syntax-macro (lambda (u3475@e) ((lambda (u3477@t) ((lambda (u3479@ls/false) (if u3479@ls/false (apply (lambda (u347b@pat* u347c@expr* u347d@b u347e@b*) ((lambda (u3483@idn*) (begin (u306e@verify-formals (map car u3483@idn*) u3475@e) ((lambda (u3485@t*) (u2ffe@bless (list 'let (map list u3485@t* u347c@expr*) ((letrec ((u3487@f (lambda (u3489@pat* u348a@t*) (if (null? u3489@pat*) (cons 'begin (cons '#f (cons u347d@b u347e@b*))) (list 'syntax-case (car u348a@t*) '() (list (car u3489@pat*) (u3487@f (cdr u3489@pat*) (cdr u348a@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car u3489@pat*)) (car u348a@t*)))))))) u3487@f) u347b@pat* u3485@t*)))) (u3116@generate-temporaries u347c@expr*)))) ((letrec ((u348d@f (lambda (u348f@pat*) (if (null? u348f@pat*) '() (call-with-values (lambda () (u3046@convert-pattern (car u348f@pat*) '())) (lambda (u3495@u3492 u3496@u3494) ((lambda (u3499@idn* u349a@pat) (append u3499@idn* (u348d@f (cdr u348f@pat*)))) u3496@u3494 u3495@u3492))))))) u348d@f) u347b@pat*))) u3479@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3477@t))) (u3048@syntax-dispatch u3477@t '(_ #(each (any any)) any . each-any)))) u3475@e))) (set! u3002@invalid-fmls-error (lambda (u349d@stx u349e@fmls) ((lambda (u34a1@t) ((lambda (u34a3@ls/false) (if u34a3@ls/false (apply (lambda (u34a5@id* u34a6@last) ((letrec ((u34a9@f (lambda (u34ab@id*) (if (null? u34ab@id*) (values) (if (not (u2e43@id? (car u34ab@id*))) (u3128@syntax-violation '#f '"not an identifier" u349d@stx (car u34ab@id*)) (begin (u34a9@f (cdr u34ab@id*)) (if (u2e4f@bound-id-member? (car u34ab@id*) (cdr u34ab@id*)) (u3128@syntax-violation '#f '"duplicate binding" u349d@stx (car u34ab@id*)) (void)))))))) u34a9@f) (if (u2e43@id? u34a6@last) (cons u34a6@last u34a5@id*) (if (u2e39@syntax-null? u34a6@last) u34a5@id* (u3128@syntax-violation '#f '"not an identifier" u349d@stx u34a6@last))))) u34a3@ls/false) ((lambda (u34ad@t) ((lambda (u34af@ls/false) (if u34af@ls/false (apply (lambda () (u3128@syntax-violation '#f '"malformed binding form" u349d@stx u349e@fmls)) u34af@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u34ad@t))) (u3048@syntax-dispatch u34ad@t '_))) u34a1@t))) (u3048@syntax-dispatch u34a1@t '#(each+ any () any)))) u349e@fmls))) (set! u3004@let-macro (lambda (u34b1@stx) ((lambda (u34b3@t) ((lambda (u34b5@ls/false) (if u34b5@ls/false (apply (lambda (u34b7@lhs* u34b8@rhs* u34b9@b u34ba@b*) (if (u2e4b@valid-bound-ids? u34b7@lhs*) (u2ffe@bless (cons (cons 'lambda (cons u34b7@lhs* (cons u34b9@b u34ba@b*))) u34b8@rhs*)) (u3002@invalid-fmls-error u34b1@stx u34b7@lhs*))) u34b5@ls/false) ((lambda (u34bf@t) ((lambda (u34c1@ls/false) (if (and u34c1@ls/false (apply (lambda (u34c3@f u34c4@lhs* u34c5@rhs* u34c6@b u34c7@b*) (u2e43@id? u34c3@f)) u34c1@ls/false)) (apply (lambda (u34cd@f u34ce@lhs* u34cf@rhs* u34d0@b u34d1@b*) (if (u2e4b@valid-bound-ids? u34ce@lhs*) (u2ffe@bless (cons (list 'letrec (list (list u34cd@f (cons 'lambda (cons u34ce@lhs* (cons u34d0@b u34d1@b*))))) u34cd@f) u34cf@rhs*)) (u3002@invalid-fmls-error u34b1@stx u34ce@lhs*))) u34c1@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u34bf@t))) (u3048@syntax-dispatch u34bf@t '(_ any #(each (any any)) any . each-any)))) u34b3@t))) (u3048@syntax-dispatch u34b3@t '(_ #(each (any any)) any . each-any)))) u34b1@stx))) (set! u3006@let-values-macro (lambda (u34d7@stx) ((lambda (u34da@rename u34dc@rename*) (begin (set! u34da@rename (lambda (u353f@x u3540@old* u3541@new*) (begin (if (not (u2e43@id? u353f@x)) (u3128@syntax-violation '#f '"not an indentifier" u34d7@stx u353f@x) (void)) (if (u2e4f@bound-id-member? u353f@x u3540@old*) (u3128@syntax-violation '#f '"duplicate binding" u34d7@stx u353f@x) (void)) ((lambda (u3545@y) (values u3545@y (cons u353f@x u3540@old*) (cons u3545@y u3541@new*))) (gensym (u312e@syntax->datum u353f@x)))))) (set! u34dc@rename* (lambda (u352d@x* u352e@old* u352f@new*) (if (null? u352d@x*) (values '() u352e@old* u352f@new*) (call-with-values (lambda () (u34da@rename (car u352d@x*) u352e@old* u352f@new*)) (lambda (u3533@x u3534@old* u3535@new*) (call-with-values (lambda () (u34dc@rename* (cdr u352d@x*) u3534@old* u3535@new*)) (lambda (u3539@x* u353a@old* u353b@new*) (values (cons u3533@x u3539@x*) u353a@old* u353b@new*)))))))) ((lambda (u34dd@t) ((lambda (u34df@ls/false) (if u34df@ls/false (apply (lambda (u34e1@b u34e2@b*) (cons* (u2ffe@bless 'let) '() u34e1@b u34e2@b*)) u34df@ls/false) ((lambda (u34e5@t) ((lambda (u34e7@ls/false) (if u34e7@ls/false (apply (lambda (u34e9@lhs* u34ea@rhs* u34eb@b u34ec@b*) (u2ffe@bless ((letrec ((u34f1@f (lambda (u34f3@lhs* u34f4@rhs* u34f5@old* u34f6@new*) (if (null? u34f3@lhs*) (cons 'let (cons (map list u34f5@old* u34f6@new*) (cons u34eb@b u34ec@b*))) ((lambda (u34fb@t) ((lambda (u34fd@ls/false) (if u34fd@ls/false (apply (lambda (u34ff@x*) (call-with-values (lambda () (u34dc@rename* u34ff@x* u34f5@old* u34f6@new*)) (lambda (u3507@u3502 u3508@u3504 u3509@u3506) ((lambda (u350d@new* u350e@old* u350f@y*) (list 'call-with-values (list 'lambda '() (car u34f4@rhs*)) (list 'lambda u350f@y* (u34f1@f (cdr u34f3@lhs*) (cdr u34f4@rhs*) u350e@old* u350d@new*)))) u3509@u3506 u3508@u3504 u3507@u3502)))) u34fd@ls/false) ((lambda (u3513@t) ((lambda (u3515@ls/false) (if u3515@ls/false (apply (lambda (u3517@x* u3518@x) (call-with-values (lambda () (u34da@rename u3518@x u34f5@old* u34f6@new*)) (lambda (u351b@y u351c@old* u351d@new*) (call-with-values (lambda () (u34dc@rename* u3517@x* u351c@old* u351d@new*)) (lambda (u3521@y* u3522@old* u3523@new*) (list 'call-with-values (list 'lambda '() (car u34f4@rhs*)) (list 'lambda (append u3521@y* u351b@y) (u34f1@f (cdr u34f3@lhs*) (cdr u34f4@rhs*) u3522@old* u3523@new*)))))))) u3515@ls/false) ((lambda (u3527@t) ((lambda (u3529@ls/false) (if u3529@ls/false (apply (lambda (u352b@others) (u3128@syntax-violation '#f '"malformed bindings" u34d7@stx u352b@others)) u3529@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3527@t))) (u3048@syntax-dispatch u3527@t 'any))) u3513@t))) (u3048@syntax-dispatch u3513@t '#(each+ any () any)))) u34fb@t))) (u3048@syntax-dispatch u34fb@t 'each-any))) (car u34f3@lhs*)))))) u34f1@f) u34e9@lhs* u34ea@rhs* '() '()))) u34e7@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u34e5@t))) (u3048@syntax-dispatch u34e5@t '(_ #(each (any any)) any . each-any)))) u34dd@t))) (u3048@syntax-dispatch u34dd@t '(_ () any . each-any)))) u34d7@stx))) '#f '#f))) (set! u3008@let*-values-macro (lambda (u3547@stx) ((lambda (u354a@check) (begin (set! u354a@check (lambda (u3579@x*) (if (not (null? u3579@x*)) ((lambda (u357b@x) (begin (if (not (u2e43@id? u357b@x)) (u3128@syntax-violation '#f '"not an identifier" u3547@stx u357b@x) (void)) (u354a@check (cdr u3579@x*)) (if (u2e4f@bound-id-member? u357b@x (cdr u3579@x*)) (u3128@syntax-violation '#f '"duplicate identifier" u3547@stx u357b@x) (void)))) (car u3579@x*)) (void)))) ((lambda (u354b@t) ((lambda (u354d@ls/false) (if u354d@ls/false (apply (lambda (u354f@b u3550@b*) (cons* (u2ffe@bless 'let) '() u354f@b u3550@b*)) u354d@ls/false) ((lambda (u3553@t) ((lambda (u3555@ls/false) (if u3555@ls/false (apply (lambda (u3557@lhs* u3558@rhs* u3559@b u355a@b*) (u2ffe@bless ((letrec ((u355f@f (lambda (u3561@lhs* u3562@rhs*) (if (null? u3561@lhs*) (cons 'begin (cons u3559@b u355a@b*)) ((lambda (u3565@t) ((lambda (u3567@ls/false) (if u3567@ls/false (apply (lambda (u3569@x*) (begin (u354a@check u3569@x*) (list 'call-with-values (list 'lambda '() (car u3562@rhs*)) (list 'lambda u3569@x* (u355f@f (cdr u3561@lhs*) (cdr u3562@rhs*)))))) u3567@ls/false) ((lambda (u356b@t) ((lambda (u356d@ls/false) (if u356d@ls/false (apply (lambda (u356f@x* u3570@x) (begin (u354a@check (cons u3570@x u356f@x*)) (list 'call-with-values (list 'lambda '() (car u3562@rhs*)) (list 'lambda (append u356f@x* u3570@x) (u355f@f (cdr u3561@lhs*) (cdr u3562@rhs*)))))) u356d@ls/false) ((lambda (u3573@t) ((lambda (u3575@ls/false) (if u3575@ls/false (apply (lambda (u3577@others) (u3128@syntax-violation '#f '"malformed bindings" u3547@stx u3577@others)) u3575@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3573@t))) (u3048@syntax-dispatch u3573@t 'any))) u356b@t))) (u3048@syntax-dispatch u356b@t '#(each+ any () any)))) u3565@t))) (u3048@syntax-dispatch u3565@t 'each-any))) (car u3561@lhs*)))))) u355f@f) u3557@lhs* u3558@rhs*))) u3555@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3553@t))) (u3048@syntax-dispatch u3553@t '(_ #(each (any any)) any . each-any)))) u354b@t))) (u3048@syntax-dispatch u354b@t '(_ () any . each-any)))) u3547@stx))) '#f))) (set! u300a@trace-lambda-macro (lambda (u357d@stx) ((lambda (u357f@t) ((lambda (u3581@ls/false) (if u3581@ls/false (apply (lambda (u3583@who u3584@fmls u3585@b u3586@b*) (if (u2e4b@valid-bound-ids? u3584@fmls) (u2ffe@bless (list 'make-traced-procedure (list 'quote u3583@who) (cons 'lambda (cons u3584@fmls (cons u3585@b u3586@b*))))) (u3002@invalid-fmls-error u357d@stx u3584@fmls))) u3581@ls/false) ((lambda (u358b@t) ((lambda (u358d@ls/false) (if u358d@ls/false (apply (lambda (u358f@who u3590@fmls u3591@last u3592@b u3593@b*) (if (u2e4b@valid-bound-ids? (cons u3591@last u3590@fmls)) (u2ffe@bless (list 'make-traced-procedure (list 'quote u358f@who) (cons 'lambda (cons (append u3590@fmls u3591@last) (cons u3592@b u3593@b*))))) (u3002@invalid-fmls-error u357d@stx (append u3590@fmls u3591@last)))) u358d@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u358b@t))) (u3048@syntax-dispatch u358b@t '(_ any #(each+ any () any) any . each-any)))) u357f@t))) (u3048@syntax-dispatch u357f@t '(_ any each-any any . each-any)))) u357d@stx))) (set! u300c@trace-define-macro (lambda (u3599@stx) ((lambda (u359b@t) ((lambda (u359d@ls/false) (if u359d@ls/false (apply (lambda (u359f@who u35a0@fmls u35a1@b u35a2@b*) (if (u2e4b@valid-bound-ids? u35a0@fmls) (u2ffe@bless (list 'define u359f@who (list 'make-traced-procedure (list 'quote u359f@who) (cons 'lambda (cons u35a0@fmls (cons u35a1@b u35a2@b*)))))) (u3002@invalid-fmls-error u3599@stx u35a0@fmls))) u359d@ls/false) ((lambda (u35a7@t) ((lambda (u35a9@ls/false) (if u35a9@ls/false (apply (lambda (u35ab@who u35ac@fmls u35ad@last u35ae@b u35af@b*) (if (u2e4b@valid-bound-ids? (cons u35ad@last u35ac@fmls)) (u2ffe@bless (list 'define u35ab@who (list 'make-traced-procedure (list 'quote u35ab@who) (cons 'lambda (cons (append u35ac@fmls u35ad@last) (cons u35ae@b u35af@b*)))))) (u3002@invalid-fmls-error u3599@stx (append u35ac@fmls u35ad@last)))) u35a9@ls/false) ((lambda (u35b5@t) ((lambda (u35b7@ls/false) (if u35b7@ls/false (apply (lambda (u35b9@who u35ba@expr) (if (u2e43@id? u35b9@who) (u2ffe@bless (list 'define u35b9@who (list 'let (list (list 'v u35ba@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote u35b9@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (u3128@syntax-violation '#f '"invalid name" u3599@stx))) u35b7@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u35b5@t))) (u3048@syntax-dispatch u35b5@t '(_ any any)))) u35a7@t))) (u3048@syntax-dispatch u35a7@t '(_ (any . #(each+ any () any)) any . each-any)))) u359b@t))) (u3048@syntax-dispatch u359b@t '(_ (any . each-any) any . each-any)))) u3599@stx))) (set! u300e@trace-define-syntax-macro (lambda (u35bd@stx) ((lambda (u35bf@t) ((lambda (u35c1@ls/false) (if u35c1@ls/false (apply (lambda (u35c3@who u35c4@expr) (if (u2e43@id? u35c3@who) (u2ffe@bless (list 'define-syntax u35c3@who (list 'make-traced-macro (list 'quote u35c3@who) u35c4@expr))) (u3128@syntax-violation '#f '"invalid name" u35bd@stx))) u35c1@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u35bf@t))) (u3048@syntax-dispatch u35bf@t '(_ any any)))) u35bd@stx))) (set! u3010@trace-let/rec-syntax (lambda (u35c7@who) (lambda (u35c9@stx) ((lambda (u35cb@t) ((lambda (u35cd@ls/false) (if u35cd@ls/false (apply (lambda (u35cf@lhs* u35d0@rhs* u35d1@b u35d2@b*) (if (u2e4b@valid-bound-ids? u35cf@lhs*) ((lambda (u35d7@rhs*) (u2ffe@bless (cons u35c7@who (cons (map list u35cf@lhs* u35d7@rhs*) (cons u35d1@b u35d2@b*))))) (map (lambda (u35d9@lhs u35da@rhs) (list 'make-traced-macro (list 'quote u35d9@lhs) u35da@rhs)) u35cf@lhs* u35d0@rhs*)) (u3002@invalid-fmls-error u35c9@stx u35cf@lhs*))) u35cd@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u35cb@t))) (u3048@syntax-dispatch u35cb@t '(_ #(each (any any)) any . each-any)))) u35c9@stx)))) (set! u3012@trace-let-syntax-macro (u3010@trace-let/rec-syntax 'let-syntax)) (set! u3014@trace-letrec-syntax-macro (u3010@trace-let/rec-syntax 'letrec-syntax)) (set! u3016@guard-macro (lambda (u35dd@x) ((lambda (u35e0@gen-clauses) (begin (set! u35e0@gen-clauses (lambda (u35f7@con u35f8@outerk u35f9@clause*) ((lambda (u35fe@f u3600@f*) (begin (set! u35fe@f (lambda (u3637@x u3638@k) ((lambda (u363b@t) ((lambda (u363d@ls/false) (if u363d@ls/false (apply (lambda (u363f@e u3640@p) ((lambda (u3643@t) (list 'let (list (list u3643@t u363f@e)) (list 'if u3643@t (list u3640@p u3643@t) u3638@k))) (gensym))) u363d@ls/false) ((lambda (u3645@t) ((lambda (u3647@ls/false) (if u3647@ls/false (apply (lambda (u3649@e) ((lambda (u364b@t) (list 'let (list (list u364b@t u3649@e)) (list 'if u364b@t u364b@t u3638@k))) (gensym))) u3647@ls/false) ((lambda (u364d@t) ((lambda (u364f@ls/false) (if u364f@ls/false (apply (lambda (u3651@e u3652@v u3653@v*) (list 'if u3651@e (cons 'begin (cons u3652@v u3653@v*)) u3638@k)) u364f@ls/false) ((lambda (u3657@t) ((lambda (u3659@ls/false) (if u3659@ls/false (apply (lambda () (u3128@syntax-violation '#f '"invalid guard clause" u3637@x)) u3659@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3657@t))) (u3048@syntax-dispatch u3657@t '_))) u364d@t))) (u3048@syntax-dispatch u364d@t '(any any . each-any)))) u3645@t))) (u3048@syntax-dispatch u3645@t '(any)))) u363b@t))) (u3048@syntax-dispatch u363b@t '(any #(scheme-id =>) any)))) u3637@x))) (set! u3600@f* (lambda (u360d@x*) ((lambda (u360f@t) ((lambda (u3611@ls/false) (if u3611@ls/false (apply (lambda () ((lambda (u3613@g) (values (list u3613@g (list 'lambda '() (list 'raise-continuable u35f7@con))) u3613@g)) (gensym))) u3611@ls/false) ((lambda (u3615@t) ((lambda (u3617@ls/false) (if u3617@ls/false (apply (lambda (u3619@e u361a@e*) (values (cons 'begin (cons u3619@e u361a@e*)) '#f)) u3617@ls/false) ((lambda (u361d@t) ((lambda (u361f@ls/false) (if u361f@ls/false (apply (lambda (u3621@cls u3622@cls*) (call-with-values (lambda () (u3600@f* u3622@cls*)) (lambda (u3629@u3626 u362a@u3628) ((lambda (u362d@g u362e@e) (values (u35fe@f u3621@cls u362e@e) u362d@g)) u362a@u3628 u3629@u3626)))) u361f@ls/false) ((lambda (u3631@t) ((lambda (u3633@ls/false) (if u3633@ls/false (apply (lambda (u3635@others) (u3128@syntax-violation '#f '"invalid guard clause" u3635@others)) u3633@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3631@t))) (u3048@syntax-dispatch u3631@t 'any))) u361d@t))) (u3048@syntax-dispatch u361d@t '(any . any)))) u3615@t))) (u3048@syntax-dispatch u3615@t '((#(scheme-id else) any . each-any))))) u360f@t))) (u3048@syntax-dispatch u360f@t '()))) u360d@x*))) (call-with-values (lambda () (u3600@f* u35f9@clause*)) (lambda (u3605@u3602 u3606@u3604) ((lambda (u3609@raisek u360a@code) (if u3609@raisek (list (list 'call/cc (list 'lambda (list u3609@raisek) (list u35f8@outerk (list 'lambda '() u360a@code))))) (list u35f8@outerk (list 'lambda '() u360a@code)))) u3606@u3604 u3605@u3602))))) '#f '#f))) ((lambda (u35e1@t) ((lambda (u35e3@ls/false) (if (and u35e3@ls/false (apply (lambda (u35e5@con u35e6@clause* u35e7@b u35e8@b*) (u2e43@id? u35e5@con)) u35e3@ls/false)) (apply (lambda (u35ed@con u35ee@clause* u35ef@b u35f0@b*) ((lambda (u35f5@outerk) (u2ffe@bless (list (list 'call/cc (list 'lambda (list u35f5@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list u35ed@con) (u35e0@gen-clauses u35ed@con u35f5@outerk u35ee@clause*)) (cons 'lambda (cons '() (cons u35ef@b u35f0@b*)))))))))) (gensym))) u35e3@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u35e1@t))) (u3048@syntax-dispatch u35e1@t '(_ (any . each-any) any . each-any)))) u35dd@x))) '#f))) (set! u3018@define-enumeration-macro (lambda (u365b@stx) ((lambda (u365e@set? u3660@remove-dups) (begin (set! u365e@set? (lambda (u3677@x) (or (null? u3677@x) (and (not (memq (car u3677@x) (cdr u3677@x))) (u365e@set? (cdr u3677@x)))))) (set! u3660@remove-dups (lambda (u3675@ls) (if (null? u3675@ls) '() (cons (car u3675@ls) (u3660@remove-dups (remq (car u3675@ls) (cdr u3675@ls))))))) ((lambda (u3661@t) ((lambda (u3663@ls/false) (if (and u3663@ls/false (apply (lambda (u3665@name u3666@id* u3667@maker) (and (u2e43@id? u3665@name) (u2e43@id? u3667@maker) (for-all u2e43@id? u3666@id*))) u3663@ls/false)) (apply (lambda (u366b@name u366c@id* u366d@maker) ((lambda (u3671@name* u3672@mk) (u2ffe@bless (list 'begin (list 'define u3672@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote u3671@name*)))) (list 'define-syntax u366b@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote u3671@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote u366b@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax u366d@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote u366d@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote u3671@name*)) (cons 'syntax-violation (cons (list 'quote u366d@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons u3672@mk '('(n* ...)))))))))))) (u3660@remove-dups (u312e@syntax->datum u366c@id*)) (gensym))) u3663@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3661@t))) (u3048@syntax-dispatch u3661@t '(_ any each-any any)))) u365b@stx))) '#f '#f))) (set! u301a@time-macro (lambda (u3679@stx) ((lambda (u367b@t) ((lambda (u367d@ls/false) (if u367d@ls/false (apply (lambda (u367f@expr) (u2ffe@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() u367f@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) u367d@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u367b@t))) (u3048@syntax-dispatch u367b@t '(_ any)))) u3679@stx))) (set! u301c@delay-macro (lambda (u3681@stx) ((lambda (u3683@t) ((lambda (u3685@ls/false) (if u3685@ls/false (apply (lambda (u3687@expr) (u2ffe@bless (list 'make-promise (list 'lambda '() u3687@expr)))) u3685@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3683@t))) (u3048@syntax-dispatch u3683@t '(_ any)))) u3681@stx))) (set! u301e@assert-macro (lambda (u3689@stx) ((lambda (u368b@t) ((lambda (u368d@ls/false) (if u368d@ls/false (apply (lambda (u368f@expr) ((lambda (u3691@pos) (u2ffe@bless (list 'unless u368f@expr (list 'assertion-error (list 'quote u368f@expr) (list 'quote u3691@pos))))) (or (u3120@expression-position u3689@stx) (u3120@expression-position u368f@expr)))) u368d@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u368b@t))) (u3048@syntax-dispatch u368b@t '(_ any)))) u3689@stx))) (set! u3020@endianness-macro (lambda (u3693@stx) ((lambda (u3695@t) ((lambda (u3697@ls/false) (if u3697@ls/false (apply (lambda (u3699@e) ((lambda (u369b@t) (if (memv u369b@t '(little)) (u2ffe@bless ''little) (if (memv u369b@t '(big)) (u2ffe@bless ''big) (u3128@syntax-violation '#f '"endianness must be big or little" u3693@stx)))) (u312e@syntax->datum u3699@e))) u3697@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3695@t))) (u3048@syntax-dispatch u3695@t '(_ any)))) u3693@stx))) (set! u3022@identifier-syntax-macro (lambda (u369d@stx) ((lambda (u369f@t) ((lambda (u36a1@ls/false) (if u36a1@ls/false (apply (lambda (u36a3@expr) (u2ffe@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax u36a3@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax u36a3@expr) '((syntax (e* ...)))))))))) u36a1@ls/false) ((lambda (u36a5@t) ((lambda (u36a7@ls/false) (if (and u36a7@ls/false (apply (lambda (u36a9@id1 u36aa@expr1 u36ab@id2 u36ac@expr2 u36ad@expr3) (and (u2e43@id? u36a9@id1) (u2e43@id? u36ab@id2) (u2e43@id? u36ac@expr2))) u36a7@ls/false)) (apply (lambda (u36b3@id1 u36b4@expr1 u36b5@id2 u36b6@expr2 u36b7@expr3) (u2ffe@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax u36b4@expr1)) (list (list 'set! 'id u36b6@expr2) (list 'syntax u36b7@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons u36b4@expr1 '(e* ...))))))))) u36a7@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u36a5@t))) (u3048@syntax-dispatch u36a5@t '(_ (any any) ((#(scheme-id set!) any any) any))))) u369f@t))) (u3048@syntax-dispatch u369f@t '(_ any)))) u369d@stx))) (set! u3024@do-macro (lambda (u36bd@stx) ((lambda (u36c0@bind) (begin (set! u36c0@bind (lambda (u36d7@x) ((lambda (u36d9@t) ((lambda (u36db@ls/false) (if u36db@ls/false (apply (lambda (u36dd@x u36de@init) (list u36dd@x u36de@init u36dd@x)) u36db@ls/false) ((lambda (u36e1@t) ((lambda (u36e3@ls/false) (if u36e3@ls/false (apply (lambda (u36e5@x u36e6@init u36e7@step) (list u36e5@x u36e6@init u36e7@step)) u36e3@ls/false) ((lambda (u36eb@t) ((lambda (u36ed@ls/false) (if u36ed@ls/false (apply (lambda () (u3128@syntax-violation '#f '"invalid binding" u36bd@stx)) u36ed@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u36eb@t))) (u3048@syntax-dispatch u36eb@t '_))) u36e1@t))) (u3048@syntax-dispatch u36e1@t '(any any any)))) u36d9@t))) (u3048@syntax-dispatch u36d9@t '(any any)))) u36d7@x))) ((lambda (u36c1@t) ((lambda (u36c3@ls/false) (if u36c3@ls/false (apply (lambda (u36c5@binding* u36c6@test u36c7@expr* u36c8@command*) ((lambda (u36cd@t) ((lambda (u36cf@ls/false) (if u36cf@ls/false (apply (lambda (u36d1@x* u36d2@init* u36d3@step*) (if (u2e4b@valid-bound-ids? u36d1@x*) (u2ffe@bless (list 'letrec (list (list 'loop (list 'lambda u36d1@x* (list 'if u36c6@test (cons 'begin (cons '(if #f #f) u36c7@expr*)) (cons 'begin (append u36c8@command* (list (cons 'loop u36d3@step*)))))))) (cons 'loop u36d2@init*))) (u3128@syntax-violation '#f '"invalid bindings" u36bd@stx))) u36cf@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u36cd@t))) (u3048@syntax-dispatch u36cd@t '#(each (any any any))))) (map u36c0@bind u36c5@binding*))) u36c3@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u36c1@t))) (u3048@syntax-dispatch u36c1@t '(_ each-any (any . each-any) . each-any)))) u36bd@stx))) '#f))) (set! u3026@let*-macro (lambda (u36ef@stx) ((lambda (u36f1@t) ((lambda (u36f3@ls/false) (if (and u36f3@ls/false (apply (lambda (u36f5@lhs* u36f6@rhs* u36f7@b u36f8@b*) (for-all u2e43@id? u36f5@lhs*)) u36f3@ls/false)) (apply (lambda (u36fd@lhs* u36fe@rhs* u36ff@b u3700@b*) (u2ffe@bless ((letrec ((u3705@f (lambda (u3707@x*) (if (null? u3707@x*) (cons 'let (cons '() (cons u36ff@b u3700@b*))) (list 'let (list (car u3707@x*)) (u3705@f (cdr u3707@x*))))))) u3705@f) (map list u36fd@lhs* u36fe@rhs*)))) u36f3@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u36f1@t))) (u3048@syntax-dispatch u36f1@t '(_ #(each (any any)) any . each-any)))) u36ef@stx))) (set! u3028@or-macro (lambda (u3709@stx) ((lambda (u370b@t) ((lambda (u370d@ls/false) (if u370d@ls/false (apply (lambda () '#f) u370d@ls/false) ((lambda (u370f@t) ((lambda (u3711@ls/false) (if u3711@ls/false (apply (lambda (u3713@e u3714@e*) (u2ffe@bless ((letrec ((u3717@f (lambda (u3719@e u371a@e*) (if (null? u371a@e*) (list 'begin '#f u3719@e) (list 'let (list (list 't u3719@e)) (list 'if 't 't (u3717@f (car u371a@e*) (cdr u371a@e*)))))))) u3717@f) u3713@e u3714@e*))) u3711@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u370f@t))) (u3048@syntax-dispatch u370f@t '(_ any . each-any)))) u370b@t))) (u3048@syntax-dispatch u370b@t '(_)))) u3709@stx))) (set! u302a@and-macro (lambda (u371d@stx) ((lambda (u371f@t) ((lambda (u3721@ls/false) (if u3721@ls/false (apply (lambda () '#t) u3721@ls/false) ((lambda (u3723@t) ((lambda (u3725@ls/false) (if u3725@ls/false (apply (lambda (u3727@e u3728@e*) (u2ffe@bless ((letrec ((u372b@f (lambda (u372d@e u372e@e*) (if (null? u372e@e*) (list 'begin '#f u372d@e) (cons 'if (cons u372d@e (cons (u372b@f (car u372e@e*) (cdr u372e@e*)) '(#f)))))))) u372b@f) u3727@e u3728@e*))) u3725@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3723@t))) (u3048@syntax-dispatch u3723@t '(_ any . each-any)))) u371f@t))) (u3048@syntax-dispatch u371f@t '(_)))) u371d@stx))) (set! u302c@cond-macro (lambda (u3731@stx) ((lambda (u3733@t) ((lambda (u3735@ls/false) (if u3735@ls/false (apply (lambda (u3737@cls u3738@cls*) (u2ffe@bless ((letrec ((u373b@f (lambda (u373d@cls u373e@cls*) (if (null? u373e@cls*) ((lambda (u3741@t) ((lambda (u3743@ls/false) (if u3743@ls/false (apply (lambda (u3745@e u3746@e*) (cons 'begin (cons u3745@e u3746@e*))) u3743@ls/false) ((lambda (u3749@t) ((lambda (u374b@ls/false) (if u374b@ls/false (apply (lambda (u374d@e u374e@p) (list 'let (list (list 't u374d@e)) (list 'if 't (cons u374e@p '(t))))) u374b@ls/false) ((lambda (u3751@t) ((lambda (u3753@ls/false) (if u3753@ls/false (apply (lambda (u3755@e) (cons 'or (cons u3755@e '((if #f #f))))) u3753@ls/false) ((lambda (u3757@t) ((lambda (u3759@ls/false) (if u3759@ls/false (apply (lambda (u375b@e u375c@e*) (list 'if u375b@e (cons 'begin u375c@e*))) u3759@ls/false) ((lambda (u375f@t) ((lambda (u3761@ls/false) (if u3761@ls/false (apply (lambda () (u3128@syntax-violation '#f '"invalid last clause" u3731@stx)) u3761@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u375f@t))) (u3048@syntax-dispatch u375f@t '_))) u3757@t))) (u3048@syntax-dispatch u3757@t '(any . each-any)))) u3751@t))) (u3048@syntax-dispatch u3751@t '(any)))) u3749@t))) (u3048@syntax-dispatch u3749@t '(any #(scheme-id =>) any)))) u3741@t))) (u3048@syntax-dispatch u3741@t '(#(scheme-id else) any . each-any)))) u373d@cls) ((lambda (u3763@t) ((lambda (u3765@ls/false) (if u3765@ls/false (apply (lambda (u3767@e u3768@e*) (u3128@syntax-violation '#f '"incorrect position of keyword else" u3731@stx)) u3765@ls/false) ((lambda (u376b@t) ((lambda (u376d@ls/false) (if u376d@ls/false (apply (lambda (u376f@e u3770@p) (list 'let (list (list 't u376f@e)) (list 'if 't (cons u3770@p '(t)) (u373b@f (car u373e@cls*) (cdr u373e@cls*))))) u376d@ls/false) ((lambda (u3773@t) ((lambda (u3775@ls/false) (if u3775@ls/false (apply (lambda (u3777@e) (list 'or u3777@e (u373b@f (car u373e@cls*) (cdr u373e@cls*)))) u3775@ls/false) ((lambda (u3779@t) ((lambda (u377b@ls/false) (if u377b@ls/false (apply (lambda (u377d@e u377e@e*) (list 'if u377d@e (cons 'begin u377e@e*) (u373b@f (car u373e@cls*) (cdr u373e@cls*)))) u377b@ls/false) ((lambda (u3781@t) ((lambda (u3783@ls/false) (if u3783@ls/false (apply (lambda () (u3128@syntax-violation '#f '"invalid last clause" u3731@stx)) u3783@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3781@t))) (u3048@syntax-dispatch u3781@t '_))) u3779@t))) (u3048@syntax-dispatch u3779@t '(any . each-any)))) u3773@t))) (u3048@syntax-dispatch u3773@t '(any)))) u376b@t))) (u3048@syntax-dispatch u376b@t '(any #(scheme-id =>) any)))) u3763@t))) (u3048@syntax-dispatch u3763@t '(#(scheme-id else) any . each-any)))) u373d@cls))))) u373b@f) u3737@cls u3738@cls*))) u3735@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3733@t))) (u3048@syntax-dispatch u3733@t '(_ any . each-any)))) u3731@stx))) (set! u302e@do-include (lambda (u3785@stx u3786@id u3787@filename) ((lambda (u378b@filename) (begin (if (not (and (string? u378b@filename) (u2e43@id? u3786@id))) (u3128@syntax-violation '#f '"invalid syntax" u3785@stx) (void)) (cons (u2ffe@bless 'begin) (with-input-from-file u378b@filename (lambda () ((letrec ((u378d@f (lambda (u378f@ls) ((lambda (u3791@x) (if (eof-object? u3791@x) (reverse u378f@ls) (u378d@f (cons (u2e23@datum->stx u3786@id u3791@x) u378f@ls)))) (u2995@u2867@read-annotated))))) u378d@f) '())))))) (u2e57@stx->datum u3787@filename)))) (set! u3030@include-macro (lambda (u3793@e) ((lambda (u3795@t) ((lambda (u3797@ls/false) (if u3797@ls/false (apply (lambda (u3799@id u379a@filename) (u302e@do-include u3793@e u3799@id u379a@filename)) u3797@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3795@t))) (u3048@syntax-dispatch u3795@t '(any any)))) u3793@e))) (set! u3032@include-into-macro (lambda (u379d@e) ((lambda (u379f@t) ((lambda (u37a1@ls/false) (if u37a1@ls/false (apply (lambda (u37a3@id u37a4@filename) (u302e@do-include u379d@e u37a3@id u37a4@filename)) u37a1@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u379f@t))) (u3048@syntax-dispatch u379f@t '(_ any any)))) u379d@e))) (set! u3034@syntax-rules-macro (lambda (u37a7@e) ((lambda (u37a9@t) ((lambda (u37ab@ls/false) (if u37ab@ls/false (apply (lambda (u37ad@lits u37ae@pat* u37af@tmp*) (begin (u304e@verify-literals u37ad@lits u37a7@e) (u2ffe@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons u37ad@lits (map (lambda (u37b3@pat u37b4@tmp) ((lambda (u37b7@t) ((lambda (u37b9@ls/false) (if u37b9@ls/false (apply (lambda (u37bb@rest) (list (cons 'g u37bb@rest) (list 'syntax u37b4@tmp))) u37b9@ls/false) ((lambda (u37bd@t) ((lambda (u37bf@ls/false) (if u37bf@ls/false (apply (lambda () (u3128@syntax-violation '#f '"invalid syntax-rules pattern" u37a7@e u37b3@pat)) u37bf@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u37bd@t))) (u3048@syntax-dispatch u37bd@t '_))) u37b7@t))) (u3048@syntax-dispatch u37b7@t '(_ . any)))) u37b3@pat)) u37ae@pat* u37af@tmp*)))))))) u37ab@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u37a9@t))) (u3048@syntax-dispatch u37a9@t '(_ each-any . #(each (any any)))))) u37a7@e))) (set! u3036@quasiquote-macro ((lambda () ((lambda (u37c2@datum u37de@quasicons* u37e0@quasicons u37e2@quasiappend u37e4@quasivector u37e6@vquasi u37e8@quasi) (begin (set! u37c2@datum (lambda (u38c3@x) (list (u2fd2@scheme-stx 'quote) (u2e2b@mkstx u38c3@x '() '() '())))) (set! u37de@quasicons* (lambda (u38bb@x u38bc@y) ((letrec ((u38bf@f (lambda (u38c1@x) (if (null? u38c1@x) u38bc@y (u37e0@quasicons (car u38c1@x) (u38bf@f (cdr u38c1@x))))))) u38bf@f) u38bb@x))) (set! u37e0@quasicons (lambda (u3895@x u3896@y) ((lambda (u3899@t) ((lambda (u389b@ls/false) (if u389b@ls/false (apply (lambda (u389d@dy) ((lambda (u389f@t) ((lambda (u38a1@ls/false) (if u38a1@ls/false (apply (lambda (u38a3@dx) (list (u2fd2@scheme-stx 'quote) (cons u38a3@dx u389d@dy))) u38a1@ls/false) ((lambda (u38a5@t) ((lambda (u38a7@ls/false) (if u38a7@ls/false (apply (lambda () ((lambda (u38a9@t) ((lambda (u38ab@ls/false) (if u38ab@ls/false (apply (lambda () (list (u2fd2@scheme-stx 'list) u3895@x)) u38ab@ls/false) ((lambda (u38ad@t) ((lambda (u38af@ls/false) (if u38af@ls/false (apply (lambda () (list (u2fd2@scheme-stx 'cons) u3895@x u3896@y)) u38af@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u38ad@t))) (u3048@syntax-dispatch u38ad@t '_))) u38a9@t))) (u3048@syntax-dispatch u38a9@t '()))) u389d@dy)) u38a7@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u38a5@t))) (u3048@syntax-dispatch u38a5@t '_))) u389f@t))) (u3048@syntax-dispatch u389f@t '(#(scheme-id quote) any)))) u3895@x)) u389b@ls/false) ((lambda (u38b1@t) ((lambda (u38b3@ls/false) (if u38b3@ls/false (apply (lambda (u38b5@stuff) (cons* (u2fd2@scheme-stx 'list) u3895@x u38b5@stuff)) u38b3@ls/false) ((lambda (u38b7@t) ((lambda (u38b9@ls/false) (if u38b9@ls/false (apply (lambda () (list (u2fd2@scheme-stx 'cons) u3895@x u3896@y)) u38b9@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u38b7@t))) (u3048@syntax-dispatch u38b7@t '_))) u38b1@t))) (u3048@syntax-dispatch u38b1@t '(#(scheme-id list) . each-any)))) u3899@t))) (u3048@syntax-dispatch u3899@t '(#(scheme-id quote) any)))) u3896@y))) (set! u37e2@quasiappend (lambda (u387b@x u387c@y) ((lambda (u387f@ls) (if (null? u387f@ls) (list (u2fd2@scheme-stx 'quote) '()) (if (null? (cdr u387f@ls)) (car u387f@ls) (cons* (u2fd2@scheme-stx 'append) u387f@ls)))) ((letrec ((u3881@f (lambda (u3883@x) (if (null? u3883@x) ((lambda (u3885@t) ((lambda (u3887@ls/false) (if u3887@ls/false (apply (lambda () '()) u3887@ls/false) ((lambda (u3889@t) ((lambda (u388b@ls/false) (if u388b@ls/false (apply (lambda () (list u387c@y)) u388b@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3889@t))) (u3048@syntax-dispatch u3889@t '_))) u3885@t))) (u3048@syntax-dispatch u3885@t '(#(scheme-id quote) ())))) u387c@y) ((lambda (u388d@t) ((lambda (u388f@ls/false) (if u388f@ls/false (apply (lambda () (u3881@f (cdr u3883@x))) u388f@ls/false) ((lambda (u3891@t) ((lambda (u3893@ls/false) (if u3893@ls/false (apply (lambda () (cons (car u3883@x) (u3881@f (cdr u3883@x)))) u3893@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3891@t))) (u3048@syntax-dispatch u3891@t '_))) u388d@t))) (u3048@syntax-dispatch u388d@t '(#(scheme-id quote) ())))) (car u3883@x)))))) u3881@f) u387b@x)))) (set! u37e4@quasivector (lambda (u3849@x) ((lambda (u384b@pat-x) ((lambda (u384d@t) ((lambda (u384f@ls/false) (if u384f@ls/false (apply (lambda (u3851@x*) (list (u2fd2@scheme-stx 'quote) (list->vector u3851@x*))) u384f@ls/false) ((lambda (u3853@t) ((lambda (u3855@ls/false) (if u3855@ls/false (apply (lambda () ((letrec ((u3857@f (lambda (u3859@x u385a@k) ((lambda (u385d@t) ((lambda (u385f@ls/false) (if u385f@ls/false (apply (lambda (u3861@x*) (u385a@k (map (lambda (u3863@x) (list (u2fd2@scheme-stx 'quote) u3863@x)) u3861@x*))) u385f@ls/false) ((lambda (u3865@t) ((lambda (u3867@ls/false) (if u3867@ls/false (apply (lambda (u3869@x*) (u385a@k u3869@x*)) u3867@ls/false) ((lambda (u386b@t) ((lambda (u386d@ls/false) (if u386d@ls/false (apply (lambda (u386f@x u3870@y) (u3857@f u3870@y (lambda (u3873@ls) (u385a@k (cons u386f@x u3873@ls))))) u386d@ls/false) ((lambda (u3875@t) ((lambda (u3877@ls/false) (if u3877@ls/false (apply (lambda () (list (u2fd2@scheme-stx 'list->vector) u384b@pat-x)) u3877@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3875@t))) (u3048@syntax-dispatch u3875@t '_))) u386b@t))) (u3048@syntax-dispatch u386b@t '(#(scheme-id cons) any any)))) u3865@t))) (u3048@syntax-dispatch u3865@t '(#(scheme-id list) . each-any)))) u385d@t))) (u3048@syntax-dispatch u385d@t '(#(scheme-id quote) each-any)))) u3859@x)))) u3857@f) u3849@x (lambda (u3879@ls) (cons* (u2fd2@scheme-stx 'vector) u3879@ls)))) u3855@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3853@t))) (u3048@syntax-dispatch u3853@t '_))) u384d@t))) (u3048@syntax-dispatch u384d@t '(#(scheme-id quote) each-any)))) u384b@pat-x)) u3849@x))) (set! u37e6@vquasi (lambda (u3827@p u3828@lev) ((lambda (u382b@t) ((lambda (u382d@ls/false) (if u382d@ls/false (apply (lambda (u382f@p u3830@q) ((lambda (u3833@t) ((lambda (u3835@ls/false) (if u3835@ls/false (apply (lambda (u3837@p) (if (= u3828@lev '0) (u37de@quasicons* u3837@p (u37e6@vquasi u3830@q u3828@lev)) (u37e0@quasicons (u37e0@quasicons (u37c2@datum 'unquote) (u37e8@quasi u3837@p (- u3828@lev '1))) (u37e6@vquasi u3830@q u3828@lev)))) u3835@ls/false) ((lambda (u3839@t) ((lambda (u383b@ls/false) (if u383b@ls/false (apply (lambda (u383d@p) (if (= u3828@lev '0) (u37e2@quasiappend u383d@p (u37e6@vquasi u3830@q u3828@lev)) (u37e0@quasicons (u37e0@quasicons (u37c2@datum 'unquote-splicing) (u37e8@quasi u383d@p (- u3828@lev '1))) (u37e6@vquasi u3830@q u3828@lev)))) u383b@ls/false) ((lambda (u383f@t) ((lambda (u3841@ls/false) (if u3841@ls/false (apply (lambda (u3843@p) (u37e0@quasicons (u37e8@quasi u3843@p u3828@lev) (u37e6@vquasi u3830@q u3828@lev))) u3841@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u383f@t))) (u3048@syntax-dispatch u383f@t 'any))) u3839@t))) (u3048@syntax-dispatch u3839@t '(#(scheme-id unquote-splicing) . each-any)))) u3833@t))) (u3048@syntax-dispatch u3833@t '(#(scheme-id unquote) . each-any)))) u382f@p)) u382d@ls/false) ((lambda (u3845@t) ((lambda (u3847@ls/false) (if u3847@ls/false (apply (lambda () (list (u2fd2@scheme-stx 'quote) '())) u3847@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3845@t))) (u3048@syntax-dispatch u3845@t '()))) u382b@t))) (u3048@syntax-dispatch u382b@t '(any . any)))) u3827@p))) (set! u37e8@quasi (lambda (u37f1@p u37f2@lev) ((lambda (u37f5@t) ((lambda (u37f7@ls/false) (if u37f7@ls/false (apply (lambda (u37f9@p) (if (= u37f2@lev '0) u37f9@p (u37e0@quasicons (u37c2@datum 'unquote) (u37e8@quasi (list u37f9@p) (- u37f2@lev '1))))) u37f7@ls/false) ((lambda (u37fb@t) ((lambda (u37fd@ls/false) (if u37fd@ls/false (apply (lambda (u37ff@p u3800@q) (if (= u37f2@lev '0) (u37de@quasicons* u37ff@p (u37e8@quasi u3800@q u37f2@lev)) (u37e0@quasicons (u37e0@quasicons (u37c2@datum 'unquote) (u37e8@quasi u37ff@p (- u37f2@lev '1))) (u37e8@quasi u3800@q u37f2@lev)))) u37fd@ls/false) ((lambda (u3803@t) ((lambda (u3805@ls/false) (if u3805@ls/false (apply (lambda (u3807@p u3808@q) (if (= u37f2@lev '0) (u37e2@quasiappend u3807@p (u37e8@quasi u3808@q u37f2@lev)) (u37e0@quasicons (u37e0@quasicons (u37c2@datum 'unquote-splicing) (u37e8@quasi u3807@p (- u37f2@lev '1))) (u37e8@quasi u3808@q u37f2@lev)))) u3805@ls/false) ((lambda (u380b@t) ((lambda (u380d@ls/false) (if u380d@ls/false (apply (lambda (u380f@p) (u37e0@quasicons (u37c2@datum 'quasiquote) (u37e8@quasi (list u380f@p) (+ u37f2@lev '1)))) u380d@ls/false) ((lambda (u3811@t) ((lambda (u3813@ls/false) (if u3813@ls/false (apply (lambda (u3815@p u3816@q) (u37e0@quasicons (u37e8@quasi u3815@p u37f2@lev) (u37e8@quasi u3816@q u37f2@lev))) u3813@ls/false) ((lambda (u3819@t) ((lambda (u381b@ls/false) (if (and u381b@ls/false (apply (lambda (u381d@x) (not (u2e0f@stx? u381d@x))) u381b@ls/false)) (apply (lambda (u381f@x) (u37e4@quasivector (u37e6@vquasi u381f@x u37f2@lev))) u381b@ls/false) ((lambda (u3821@t) ((lambda (u3823@ls/false) (if u3823@ls/false (apply (lambda (u3825@p) (list (u2fd2@scheme-stx 'quote) u3825@p)) u3823@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3821@t))) (u3048@syntax-dispatch u3821@t 'any))) u3819@t))) (u3048@syntax-dispatch u3819@t '#(vector each-any)))) u3811@t))) (u3048@syntax-dispatch u3811@t '(any . any)))) u380b@t))) (u3048@syntax-dispatch u380b@t '(#(scheme-id quasiquote) any)))) u3803@t))) (u3048@syntax-dispatch u3803@t '((#(scheme-id unquote-splicing) . each-any) . any)))) u37fb@t))) (u3048@syntax-dispatch u37fb@t '((#(scheme-id unquote) . each-any) . any)))) u37f5@t))) (u3048@syntax-dispatch u37f5@t '(#(scheme-id unquote) any)))) u37f1@p))) (lambda (u37e9@x) ((lambda (u37eb@t) ((lambda (u37ed@ls/false) (if u37ed@ls/false (apply (lambda (u37ef@e) (u37e8@quasi u37ef@e '0)) u37ed@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u37eb@t))) (u3048@syntax-dispatch u37eb@t '(_ any)))) u37e9@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! u3038@quasisyntax-macro ((lambda () ((lambda (u38c6@quasi) (begin (set! u38c6@quasi (lambda (u38e1@p u38e2@lev) ((lambda (u38e5@t) ((lambda (u38e7@ls/false) (if u38e7@ls/false (apply (lambda (u38e9@p) (if (= u38e2@lev '0) ((lambda (u38eb@g) (values (list u38eb@g) (list u38e9@p) u38eb@g)) (gensym)) (call-with-values (lambda () (u38c6@quasi u38e9@p (- u38e2@lev '1))) (lambda (u38f3@u38ee u38f4@u38f0 u38f5@u38f2) ((lambda (u38f9@p u38fa@rhs* u38fb@lhs*) (values u38fb@lhs* u38fa@rhs* (list 'unsyntax u38f9@p))) u38f5@u38f2 u38f4@u38f0 u38f3@u38ee))))) u38e7@ls/false) ((lambda (u38ff@t) ((lambda (u3901@ls/false) (if (and u3901@ls/false (apply (lambda () (= u38e2@lev '0)) u3901@ls/false)) (apply (lambda () (u3128@syntax-violation '#f '"incorrect use of unsyntax" u38e1@p)) u3901@ls/false) ((lambda (u3903@t) ((lambda (u3905@ls/false) (if u3905@ls/false (apply (lambda (u3907@p* u3908@q) (call-with-values (lambda () (u38c6@quasi u3908@q u38e2@lev)) (lambda (u3911@u390c u3912@u390e u3913@u3910) ((lambda (u3917@q u3918@rhs* u3919@lhs*) (if (= u38e2@lev '0) ((lambda (u391d@g*) (values (append u391d@g* u3919@lhs*) (append u3907@p* u3918@rhs*) (append u391d@g* u3917@q))) (map (lambda (u391f@x) (gensym)) u3907@p*)) (call-with-values (lambda () (u38c6@quasi u3907@p* (- u38e2@lev '1))) (lambda (u3927@u3922 u3928@u3924 u3929@u3926) ((lambda (u392d@p* u392e@rhs2* u392f@lhs2*) (values (append u392f@lhs2* u3919@lhs*) (append u392e@rhs2* u3918@rhs*) (cons (cons 'unsyntax u392d@p*) u3917@q))) u3929@u3926 u3928@u3924 u3927@u3922))))) u3913@u3910 u3912@u390e u3911@u390c)))) u3905@ls/false) ((lambda (u3933@t) ((lambda (u3935@ls/false) (if u3935@ls/false (apply (lambda (u3937@p* u3938@q) (call-with-values (lambda () (u38c6@quasi u3938@q u38e2@lev)) (lambda (u3941@u393c u3942@u393e u3943@u3940) ((lambda (u3947@q u3948@rhs* u3949@lhs*) (if (= u38e2@lev '0) ((lambda (u394d@g*) (values (append (map (lambda (u394f@g) (cons u394f@g '(...))) u394d@g*) u3949@lhs*) (append u3937@p* u3948@rhs*) (append (apply append (map (lambda (u3951@g) (cons u3951@g '(...))) u394d@g*)) u3947@q))) (map (lambda (u3953@x) (gensym)) u3937@p*)) (call-with-values (lambda () (u38c6@quasi u3937@p* (- u38e2@lev '1))) (lambda (u395b@u3956 u395c@u3958 u395d@u395a) ((lambda (u3961@p* u3962@rhs2* u3963@lhs2*) (values (append u3963@lhs2* u3949@lhs*) (append u3962@rhs2* u3948@rhs*) (cons (cons 'unsyntax-splicing u3961@p*) u3947@q))) u395d@u395a u395c@u3958 u395b@u3956))))) u3943@u3940 u3942@u393e u3941@u393c)))) u3935@ls/false) ((lambda (u3967@t) ((lambda (u3969@ls/false) (if (and u3969@ls/false (apply (lambda () (= u38e2@lev '0)) u3969@ls/false)) (apply (lambda () (u3128@syntax-violation '#f '"incorrect use of unsyntax-splicing" u38e1@p)) u3969@ls/false) ((lambda (u396b@t) ((lambda (u396d@ls/false) (if u396d@ls/false (apply (lambda (u396f@p) (call-with-values (lambda () (u38c6@quasi u396f@p (+ u38e2@lev '1))) (lambda (u3977@u3972 u3978@u3974 u3979@u3976) ((lambda (u397d@p u397e@rhs* u397f@lhs*) (values u397f@lhs* u397e@rhs* (list 'quasisyntax u397d@p))) u3979@u3976 u3978@u3974 u3977@u3972)))) u396d@ls/false) ((lambda (u3983@t) ((lambda (u3985@ls/false) (if u3985@ls/false (apply (lambda (u3987@p u3988@q) (call-with-values (lambda () (u38c6@quasi u3987@p u38e2@lev)) (lambda (u3997@u398c u3998@u398e u3999@u3990) (call-with-values (lambda () (u38c6@quasi u3988@q u38e2@lev)) (lambda (u399d@u3992 u399e@u3994 u399f@u3996) ((lambda (u39a3@q u39a4@rhs2* u39a5@lhs2* u39a6@p u39a7@rhs* u39a8@lhs*) (values (append u39a5@lhs2* u39a8@lhs*) (append u39a4@rhs2* u39a7@rhs*) (cons u39a6@p u39a3@q))) u399f@u3996 u399e@u3994 u399d@u3992 u3999@u3990 u3998@u398e u3997@u398c)))))) u3985@ls/false) ((lambda (u39af@t) ((lambda (u39b1@ls/false) (if u39b1@ls/false (apply (lambda (u39b3@x*) (call-with-values (lambda () (u38c6@quasi u39b3@x* u38e2@lev)) (lambda (u39bb@u39b6 u39bc@u39b8 u39bd@u39ba) ((lambda (u39c1@x* u39c2@rhs* u39c3@lhs*) (values u39c3@lhs* u39c2@rhs* (list->vector u39c1@x*))) u39bd@u39ba u39bc@u39b8 u39bb@u39b6)))) u39b1@ls/false) ((lambda (u39c7@t) ((lambda (u39c9@ls/false) (if u39c9@ls/false (apply (lambda () (values '() '() u38e1@p)) u39c9@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u39c7@t))) (u3048@syntax-dispatch u39c7@t '_))) u39af@t))) (u3048@syntax-dispatch u39af@t '#(vector each-any)))) u3983@t))) (u3048@syntax-dispatch u3983@t '(any . any)))) u396b@t))) (u3048@syntax-dispatch u396b@t '(#(scheme-id quasisyntax) any)))) u3967@t))) (u3048@syntax-dispatch u3967@t '#(scheme-id unsyntax-splicing)))) u3933@t))) (u3048@syntax-dispatch u3933@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) u3903@t))) (u3048@syntax-dispatch u3903@t '((#(scheme-id unsyntax) . each-any) . any)))) u38ff@t))) (u3048@syntax-dispatch u38ff@t '#(scheme-id unsyntax)))) u38e5@t))) (u3048@syntax-dispatch u38e5@t '(#(scheme-id unsyntax) any)))) u38e1@p))) (lambda (u38c7@x) ((lambda (u38c9@t) ((lambda (u38cb@ls/false) (if u38cb@ls/false (apply (lambda (u38cd@e) (call-with-values (lambda () (u38c6@quasi u38cd@e '0)) (lambda (u38d5@u38d0 u38d6@u38d2 u38d7@u38d4) ((lambda (u38db@v u38dc@rhs* u38dd@lhs*) (u2ffe@bless (list 'syntax-case (cons 'list u38dc@rhs*) '() (list u38dd@lhs* (list 'syntax u38db@v))))) u38d7@u38d4 u38d6@u38d2 u38d5@u38d0)))) u38cb@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u38c9@t))) (u3048@syntax-dispatch u38c9@t '(_ any)))) u38c7@x)))) '#f)))) (set! u303a@define-struct-macro (lambda (u39cb@stx) (u3128@syntax-violation '#f '"define-struct not supported" u39cb@stx))) (set! u303c@define-record-type-macro (lambda (u39cd@x) ((lambda (u39d0@id u39d2@get-record-name u39d4@get-record-constructor-name u39d6@get-record-predicate-name u39d8@get-clause u39da@foo-rtd-code u39dc@parent-rtd-code u39de@parent-rcd-code u39e0@foo-rcd-code u39e2@get-protocol-code u39e4@get-fields u39e6@get-mutator-indices u39e8@get-mutators u39ea@get-accessors u39ec@enumerate u39ee@do-define-record u39f0@verify-clauses) (begin (set! u39d0@id (lambda (u3bc3@ctxt . u3bc5@str*) (u312c@datum->syntax u3bc3@ctxt (string->symbol (apply string-append (map (lambda (u3bc7@x) (if (symbol? u3bc7@x) (symbol->string u3bc7@x) (if (string? u3bc7@x) u3bc7@x (assertion-violation 'define-record-type '"BUG")))) u3bc5@str*)))))) (set! u39d2@get-record-name (lambda (u3bb1@spec) ((lambda (u3bb3@t) ((lambda (u3bb5@ls/false) (if u3bb5@ls/false (apply (lambda (u3bb7@foo u3bb8@make-foo u3bb9@foo?) u3bb7@foo) u3bb5@ls/false) ((lambda (u3bbd@t) ((lambda (u3bbf@ls/false) (if u3bbf@ls/false (apply (lambda (u3bc1@foo) u3bc1@foo) u3bbf@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3bbd@t))) (u3048@syntax-dispatch u3bbd@t 'any))) u3bb3@t))) (u3048@syntax-dispatch u3bb3@t '(any any any)))) u3bb1@spec))) (set! u39d4@get-record-constructor-name (lambda (u3b9d@spec) ((lambda (u3b9f@t) ((lambda (u3ba1@ls/false) (if u3ba1@ls/false (apply (lambda (u3ba3@foo u3ba4@make-foo u3ba5@foo?) u3ba4@make-foo) u3ba1@ls/false) ((lambda (u3ba9@t) ((lambda (u3bab@ls/false) (if (and u3bab@ls/false (apply (lambda (u3bad@foo) (u2e43@id? u3bad@foo)) u3bab@ls/false)) (apply (lambda (u3baf@foo) (u39d0@id u3baf@foo '"make-" (u2e57@stx->datum u3baf@foo))) u3bab@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3ba9@t))) (u3048@syntax-dispatch u3ba9@t 'any))) u3b9f@t))) (u3048@syntax-dispatch u3b9f@t '(any any any)))) u3b9d@spec))) (set! u39d6@get-record-predicate-name (lambda (u3b89@spec) ((lambda (u3b8b@t) ((lambda (u3b8d@ls/false) (if u3b8d@ls/false (apply (lambda (u3b8f@foo u3b90@make-foo u3b91@foo?) u3b91@foo?) u3b8d@ls/false) ((lambda (u3b95@t) ((lambda (u3b97@ls/false) (if (and u3b97@ls/false (apply (lambda (u3b99@foo) (u2e43@id? u3b99@foo)) u3b97@ls/false)) (apply (lambda (u3b9b@foo) (u39d0@id u3b9b@foo (u2e57@stx->datum u3b9b@foo) '"?")) u3b97@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3b95@t))) (u3048@syntax-dispatch u3b95@t 'any))) u3b8b@t))) (u3048@syntax-dispatch u3b8b@t '(any any any)))) u3b89@spec))) (set! u39d8@get-clause (lambda (u3b77@id u3b78@ls) ((lambda (u3b7b@t) ((lambda (u3b7d@ls/false) (if u3b7d@ls/false (apply (lambda () '#f) u3b7d@ls/false) ((lambda (u3b7f@t) ((lambda (u3b81@ls/false) (if u3b81@ls/false (apply (lambda (u3b83@x u3b84@rest u3b85@ls) (if (u2e49@free-id=? (u2ffe@bless u3b77@id) u3b83@x) (cons u3b83@x u3b84@rest) (u39d8@get-clause u3b77@id u3b85@ls))) u3b81@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3b7f@t))) (u3048@syntax-dispatch u3b7f@t '((any . any) . any)))) u3b7b@t))) (u3048@syntax-dispatch u3b7b@t '()))) u3b78@ls))) (set! u39da@foo-rtd-code (lambda (u3b25@name u3b26@clause* u3b27@parent-rtd-code) ((lambda (u3b2c@convert-field-spec*) (begin (set! u3b2c@convert-field-spec* (lambda (u3b5d@ls) (list->vector (map (lambda (u3b5f@x) ((lambda (u3b61@t) ((lambda (u3b63@ls/false) (if u3b63@ls/false (apply (lambda (u3b65@name u3b66@rest) (list 'mutable u3b65@name)) u3b63@ls/false) ((lambda (u3b69@t) ((lambda (u3b6b@ls/false) (if u3b6b@ls/false (apply (lambda (u3b6d@name u3b6e@rest) (list 'immutable u3b6d@name)) u3b6b@ls/false) ((lambda (u3b71@t) ((lambda (u3b73@ls/false) (if u3b73@ls/false (apply (lambda (u3b75@name) (list 'immutable u3b75@name)) u3b73@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3b71@t))) (u3048@syntax-dispatch u3b71@t 'any))) u3b69@t))) (u3048@syntax-dispatch u3b69@t '(#(scheme-id immutable) any . any)))) u3b61@t))) (u3048@syntax-dispatch u3b61@t '(#(scheme-id mutable) any . any)))) u3b5f@x)) u3b5d@ls)))) ((lambda (u3b2d@uid-code u3b2e@sealed? u3b2f@opaque? u3b30@fields) (u2ffe@bless (list 'make-record-type-descriptor (list 'quote u3b25@name) u3b27@parent-rtd-code u3b2d@uid-code u3b2e@sealed? u3b2f@opaque? u3b30@fields))) ((lambda (u3b35@t) ((lambda (u3b37@ls/false) (if u3b37@ls/false (apply (lambda () (list 'quote (gensym))) u3b37@ls/false) ((lambda (u3b39@t) ((lambda (u3b3b@ls/false) (if u3b3b@ls/false (apply (lambda (u3b3d@uid) (list 'quote u3b3d@uid)) u3b3b@ls/false) ((lambda (u3b3f@t) ((lambda (u3b41@ls/false) (if u3b41@ls/false (apply (lambda () '#f) u3b41@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3b3f@t))) (u3048@syntax-dispatch u3b3f@t '_))) u3b39@t))) (u3048@syntax-dispatch u3b39@t '(_ any)))) u3b35@t))) (u3048@syntax-dispatch u3b35@t '(_)))) (u39d8@get-clause 'nongenerative u3b26@clause*)) ((lambda (u3b43@t) ((lambda (u3b45@ls/false) (if u3b45@ls/false (apply (lambda () '#t) u3b45@ls/false) ((lambda (u3b47@t) ((lambda (u3b49@ls/false) (if u3b49@ls/false (apply (lambda () '#f) u3b49@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3b47@t))) (u3048@syntax-dispatch u3b47@t '_))) u3b43@t))) (u3048@syntax-dispatch u3b43@t '(_ #(atom #t))))) (u39d8@get-clause 'sealed u3b26@clause*)) ((lambda (u3b4b@t) ((lambda (u3b4d@ls/false) (if u3b4d@ls/false (apply (lambda () '#t) u3b4d@ls/false) ((lambda (u3b4f@t) ((lambda (u3b51@ls/false) (if u3b51@ls/false (apply (lambda () '#f) u3b51@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3b4f@t))) (u3048@syntax-dispatch u3b4f@t '_))) u3b4b@t))) (u3048@syntax-dispatch u3b4b@t '(_ #(atom #t))))) (u39d8@get-clause 'opaque u3b26@clause*)) ((lambda (u3b53@t) ((lambda (u3b55@ls/false) (if u3b55@ls/false (apply (lambda (u3b57@field-spec*) (list 'quote (u3b2c@convert-field-spec* u3b57@field-spec*))) u3b55@ls/false) ((lambda (u3b59@t) ((lambda (u3b5b@ls/false) (if u3b5b@ls/false (apply (lambda () ''#()) u3b5b@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3b59@t))) (u3048@syntax-dispatch u3b59@t '_))) u3b53@t))) (u3048@syntax-dispatch u3b53@t '(_ . each-any)))) (u39d8@get-clause 'fields u3b26@clause*))))) '#f))) (set! u39dc@parent-rtd-code (lambda (u3b0d@clause*) ((lambda (u3b0f@t) ((lambda (u3b11@ls/false) (if u3b11@ls/false (apply (lambda (u3b13@name) (list 'record-type-descriptor u3b13@name)) u3b11@ls/false) ((lambda (u3b15@t) ((lambda (u3b17@ls/false) (if u3b17@ls/false (apply (lambda () ((lambda (u3b19@t) ((lambda (u3b1b@ls/false) (if u3b1b@ls/false (apply (lambda (u3b1d@rtd u3b1e@rcd) u3b1d@rtd) u3b1b@ls/false) ((lambda (u3b21@t) ((lambda (u3b23@ls/false) (if u3b23@ls/false (apply (lambda () '#f) u3b23@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3b21@t))) (u3048@syntax-dispatch u3b21@t '#(atom #f)))) u3b19@t))) (u3048@syntax-dispatch u3b19@t '(_ any any)))) (u39d8@get-clause 'parent-rtd u3b0d@clause*))) u3b17@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3b15@t))) (u3048@syntax-dispatch u3b15@t '#(atom #f)))) u3b0f@t))) (u3048@syntax-dispatch u3b0f@t '(_ any)))) (u39d8@get-clause 'parent u3b0d@clause*)))) (set! u39de@parent-rcd-code (lambda (u3af5@clause*) ((lambda (u3af7@t) ((lambda (u3af9@ls/false) (if u3af9@ls/false (apply (lambda (u3afb@name) (list 'record-constructor-descriptor u3afb@name)) u3af9@ls/false) ((lambda (u3afd@t) ((lambda (u3aff@ls/false) (if u3aff@ls/false (apply (lambda () ((lambda (u3b01@t) ((lambda (u3b03@ls/false) (if u3b03@ls/false (apply (lambda (u3b05@rtd u3b06@rcd) u3b06@rcd) u3b03@ls/false) ((lambda (u3b09@t) ((lambda (u3b0b@ls/false) (if u3b0b@ls/false (apply (lambda () '#f) u3b0b@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3b09@t))) (u3048@syntax-dispatch u3b09@t '#(atom #f)))) u3b01@t))) (u3048@syntax-dispatch u3b01@t '(_ any any)))) (u39d8@get-clause 'parent-rtd u3af5@clause*))) u3aff@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3afd@t))) (u3048@syntax-dispatch u3afd@t '#(atom #f)))) u3af7@t))) (u3048@syntax-dispatch u3af7@t '(_ any)))) (u39d8@get-clause 'parent u3af5@clause*)))) (set! u39e0@foo-rcd-code (lambda (u3aed@clause* u3aee@foo-rtd u3aef@protocol u3af0@parent-rcd-code) (list 'make-record-constructor-descriptor u3aee@foo-rtd u3af0@parent-rcd-code u3aef@protocol))) (set! u39e2@get-protocol-code (lambda (u3ae1@clause*) ((lambda (u3ae3@t) ((lambda (u3ae5@ls/false) (if u3ae5@ls/false (apply (lambda (u3ae7@expr) u3ae7@expr) u3ae5@ls/false) ((lambda (u3ae9@t) ((lambda (u3aeb@ls/false) (if u3aeb@ls/false (apply (lambda () '#f) u3aeb@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3ae9@t))) (u3048@syntax-dispatch u3ae9@t '_))) u3ae3@t))) (u3048@syntax-dispatch u3ae3@t '(_ any)))) (u39d8@get-clause 'protocol u3ae1@clause*)))) (set! u39e4@get-fields (lambda (u3acf@clause*) ((lambda (u3ad1@t) ((lambda (u3ad3@ls/false) (if u3ad3@ls/false (apply (lambda () '()) u3ad3@ls/false) ((lambda (u3ad5@t) ((lambda (u3ad7@ls/false) (if u3ad7@ls/false (apply (lambda (u3ad9@f*) u3ad9@f*) u3ad7@ls/false) ((lambda (u3adb@t) ((lambda (u3add@ls/false) (if u3add@ls/false (apply (lambda (u3adf@rest) (u39e4@get-fields u3adf@rest)) u3add@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3adb@t))) (u3048@syntax-dispatch u3adb@t '(_ . any)))) u3ad5@t))) (u3048@syntax-dispatch u3ad5@t '((#(scheme-id fields) . each-any) . _)))) u3ad1@t))) (u3048@syntax-dispatch u3ad1@t '()))) u3acf@clause*))) (set! u39e6@get-mutator-indices (lambda (u3ab7@fields) ((letrec ((u3ab9@f (lambda (u3abb@fields u3abc@i) ((lambda (u3abf@t) ((lambda (u3ac1@ls/false) (if u3ac1@ls/false (apply (lambda () '()) u3ac1@ls/false) ((lambda (u3ac3@t) ((lambda (u3ac5@ls/false) (if u3ac5@ls/false (apply (lambda (u3ac7@rest) (cons u3abc@i (u3ab9@f u3ac7@rest (+ u3abc@i '1)))) u3ac5@ls/false) ((lambda (u3ac9@t) ((lambda (u3acb@ls/false) (if u3acb@ls/false (apply (lambda (u3acd@rest) (u3ab9@f u3acd@rest (+ u3abc@i '1))) u3acb@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3ac9@t))) (u3048@syntax-dispatch u3ac9@t '(_ . any)))) u3ac3@t))) (u3048@syntax-dispatch u3ac3@t '((#(scheme-id mutable) . _) . any)))) u3abf@t))) (u3048@syntax-dispatch u3abf@t '()))) u3abb@fields)))) u3ab9@f) u3ab7@fields '0))) (set! u39e8@get-mutators (lambda (u3a8d@foo u3a8e@fields) ((lambda (u3a92@gen-name) (begin (set! u3a92@gen-name (lambda (u3ab5@x) (u312c@datum->syntax u3a8d@foo (string->symbol (string-append (symbol->string (u312e@syntax->datum u3a8d@foo)) '"-" (symbol->string (u312e@syntax->datum u3ab5@x)) '"-set!"))))) ((letrec ((u3a93@f (lambda (u3a95@fields) ((lambda (u3a97@t) ((lambda (u3a99@ls/false) (if u3a99@ls/false (apply (lambda () '()) u3a99@ls/false) ((lambda (u3a9b@t) ((lambda (u3a9d@ls/false) (if u3a9d@ls/false (apply (lambda (u3a9f@name u3aa0@accessor u3aa1@mutator u3aa2@rest) (cons u3aa1@mutator (u3a93@f u3aa2@rest))) u3a9d@ls/false) ((lambda (u3aa7@t) ((lambda (u3aa9@ls/false) (if u3aa9@ls/false (apply (lambda (u3aab@name u3aac@rest) (cons (u3a92@gen-name u3aab@name) (u3a93@f u3aac@rest))) u3aa9@ls/false) ((lambda (u3aaf@t) ((lambda (u3ab1@ls/false) (if u3ab1@ls/false (apply (lambda (u3ab3@rest) (u3a93@f u3ab3@rest)) u3ab1@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3aaf@t))) (u3048@syntax-dispatch u3aaf@t '(_ . any)))) u3aa7@t))) (u3048@syntax-dispatch u3aa7@t '((#(scheme-id mutable) any) . any)))) u3a9b@t))) (u3048@syntax-dispatch u3a9b@t '((#(scheme-id mutable) any any any) . any)))) u3a97@t))) (u3048@syntax-dispatch u3a97@t '()))) u3a95@fields)))) u3a93@f) u3a8e@fields))) '#f))) (set! u39ea@get-accessors (lambda (u3a49@foo u3a4a@fields) ((lambda (u3a4e@gen-name) (begin (set! u3a4e@gen-name (lambda (u3a8b@x) (u312c@datum->syntax u3a49@foo (string->symbol (string-append (symbol->string (u312e@syntax->datum u3a49@foo)) '"-" (symbol->string (u312e@syntax->datum u3a8b@x))))))) (map (lambda (u3a4f@field) ((lambda (u3a51@t) ((lambda (u3a53@ls/false) (if (and u3a53@ls/false (apply (lambda (u3a55@name u3a56@accessor u3a57@mutator) (u2e43@id? u3a56@accessor)) u3a53@ls/false)) (apply (lambda (u3a5b@name u3a5c@accessor u3a5d@mutator) u3a5c@accessor) u3a53@ls/false) ((lambda (u3a61@t) ((lambda (u3a63@ls/false) (if (and u3a63@ls/false (apply (lambda (u3a65@name u3a66@accessor) (u2e43@id? u3a66@accessor)) u3a63@ls/false)) (apply (lambda (u3a69@name u3a6a@accessor) u3a6a@accessor) u3a63@ls/false) ((lambda (u3a6d@t) ((lambda (u3a6f@ls/false) (if (and u3a6f@ls/false (apply (lambda (u3a71@name) (u2e43@id? u3a71@name)) u3a6f@ls/false)) (apply (lambda (u3a73@name) (u3a4e@gen-name u3a73@name)) u3a6f@ls/false) ((lambda (u3a75@t) ((lambda (u3a77@ls/false) (if (and u3a77@ls/false (apply (lambda (u3a79@name) (u2e43@id? u3a79@name)) u3a77@ls/false)) (apply (lambda (u3a7b@name) (u3a4e@gen-name u3a7b@name)) u3a77@ls/false) ((lambda (u3a7d@t) ((lambda (u3a7f@ls/false) (if (and u3a7f@ls/false (apply (lambda (u3a81@name) (u2e43@id? u3a81@name)) u3a7f@ls/false)) (apply (lambda (u3a83@name) (u3a4e@gen-name u3a83@name)) u3a7f@ls/false) ((lambda (u3a85@t) ((lambda (u3a87@ls/false) (if u3a87@ls/false (apply (lambda (u3a89@others) (u3128@syntax-violation '#f '"invalid field spec" u3a4f@field)) u3a87@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3a85@t))) (u3048@syntax-dispatch u3a85@t 'any))) u3a7d@t))) (u3048@syntax-dispatch u3a7d@t 'any))) u3a75@t))) (u3048@syntax-dispatch u3a75@t '(#(scheme-id immutable) any)))) u3a6d@t))) (u3048@syntax-dispatch u3a6d@t '(#(scheme-id mutable) any)))) u3a61@t))) (u3048@syntax-dispatch u3a61@t '(#(scheme-id immutable) any any)))) u3a51@t))) (u3048@syntax-dispatch u3a51@t '(#(scheme-id mutable) any any any)))) u3a4f@field)) u3a4a@fields))) '#f))) (set! u39ec@enumerate (lambda (u3a41@ls) ((letrec ((u3a43@f (lambda (u3a45@ls u3a46@i) (if (null? u3a45@ls) '() (cons u3a46@i (u3a43@f (cdr u3a45@ls) (+ u3a46@i '1))))))) u3a43@f) u3a41@ls '0))) (set! u39ee@do-define-record (lambda (u3a19@namespec u3a1a@clause*) ((lambda (u3a1d@foo) ((lambda (u3a1f@foo-rtd) ((lambda (u3a21@foo-rcd) ((lambda (u3a23@protocol) ((lambda (u3a25@make-foo) ((lambda (u3a27@fields) ((lambda (u3a29@idx*) ((lambda (u3a2b@foo-x*) ((lambda (u3a2d@set-foo-x!*) ((lambda (u3a2f@set-foo-idx*) ((lambda (u3a31@foo?) ((lambda (u3a33@foo-rtd-code) ((lambda (u3a35@foo-rcd-code) ((lambda (u3a37@protocol-code) ((lambda () (u2ffe@bless (cons 'begin (cons (list 'define u3a1f@foo-rtd u3a33@foo-rtd-code) (cons (list 'define u3a23@protocol u3a37@protocol-code) (cons (list 'define u3a21@foo-rcd u3a35@foo-rcd-code) (cons (list 'define-syntax u3a1d@foo (list 'list ''$rtd (list 'syntax u3a1f@foo-rtd) (list 'syntax u3a21@foo-rcd))) (cons (list 'define u3a31@foo? (list 'record-predicate u3a1f@foo-rtd)) (cons (list 'define u3a25@make-foo (list 'record-constructor u3a21@foo-rcd)) (append (map (lambda (u3a39@foo-x u3a3a@idx) (list 'define u3a39@foo-x (list 'record-accessor u3a1f@foo-rtd u3a3a@idx))) u3a2b@foo-x* u3a29@idx*) (map (lambda (u3a3d@set-foo-x! u3a3e@idx) (list 'define u3a3d@set-foo-x! (list 'record-mutator u3a1f@foo-rtd u3a3e@idx))) u3a2d@set-foo-x!* u3a2f@set-foo-idx*))))))))))))) (u39e2@get-protocol-code u3a1a@clause*))) (u39e0@foo-rcd-code u3a1a@clause* u3a1f@foo-rtd u3a23@protocol (u39de@parent-rcd-code u3a1a@clause*)))) (u39da@foo-rtd-code u3a1d@foo u3a1a@clause* (u39dc@parent-rtd-code u3a1a@clause*)))) (u39d6@get-record-predicate-name u3a19@namespec))) (u39e6@get-mutator-indices u3a27@fields))) (u39e8@get-mutators u3a1d@foo u3a27@fields))) (u39ea@get-accessors u3a1d@foo u3a27@fields))) (u39ec@enumerate u3a27@fields))) (u39e4@get-fields u3a1a@clause*))) (u39d4@get-record-constructor-name u3a19@namespec))) (gensym))) (gensym))) (gensym))) (u39d2@get-record-name u3a19@namespec)))) (set! u39f0@verify-clauses (lambda (u39f9@x u39fa@cls*) ((lambda (u39fe@valid-kwds u3a00@free-id-member?) (begin (set! u39fe@valid-kwds (map u2ffe@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! u3a00@free-id-member? (lambda (u3a15@x u3a16@ls) (and (pair? u3a16@ls) (or (u2e49@free-id=? u3a15@x (car u3a16@ls)) (u3a00@free-id-member? u3a15@x (cdr u3a16@ls)))))) ((letrec ((u3a01@f (lambda (u3a03@cls* u3a04@seen*) (if (not (null? u3a03@cls*)) ((lambda (u3a07@t) ((lambda (u3a09@ls/false) (if u3a09@ls/false (apply (lambda (u3a0b@kwd u3a0c@rest) (if (or (not (u2e43@id? u3a0b@kwd)) (not (u3a00@free-id-member? u3a0b@kwd u39fe@valid-kwds))) (u3128@syntax-violation '#f '"not a valid define-record-type keyword" u3a0b@kwd) (if (u2e4f@bound-id-member? u3a0b@kwd u3a04@seen*) (u3128@syntax-violation '#f '"duplicate use of keyword " u39f9@x u3a0b@kwd) (u3a01@f (cdr u3a03@cls*) (cons u3a0b@kwd u3a04@seen*))))) u3a09@ls/false) ((lambda (u3a0f@t) ((lambda (u3a11@ls/false) (if u3a11@ls/false (apply (lambda (u3a13@cls) (u3128@syntax-violation '#f '"malformed define-record-type clause" u3a13@cls)) u3a11@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3a0f@t))) (u3048@syntax-dispatch u3a0f@t 'any))) u3a07@t))) (u3048@syntax-dispatch u3a07@t '(any . any)))) (car u3a03@cls*)) (void))))) u3a01@f) u39fa@cls* '()))) '#f '#f))) ((lambda (u39f1@t) ((lambda (u39f3@ls/false) (if u39f3@ls/false (apply (lambda (u39f5@namespec u39f6@clause*) (begin (u39f0@verify-clauses u39cd@x u39f6@clause*) (u39ee@do-define-record u39f5@namespec u39f6@clause*))) u39f3@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u39f1@t))) (u3048@syntax-dispatch u39f1@t '(_ any . each-any)))) u39cd@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! u303e@define-condition-type-macro (lambda (u3bc9@x) ((lambda (u3bcc@mkname) (begin (set! u3bcc@mkname (lambda (u3bf9@name u3bfa@suffix) (u312c@datum->syntax u3bf9@name (string->symbol (string-append (symbol->string (u312e@syntax->datum u3bf9@name)) u3bfa@suffix))))) ((lambda (u3bcd@t) ((lambda (u3bcf@ls/false) (if (and u3bcf@ls/false (apply (lambda (u3bd1@ctxt u3bd2@name u3bd3@super u3bd4@constructor u3bd5@predicate u3bd6@field* u3bd7@accessor*) (and (u2e43@id? u3bd2@name) (u2e43@id? u3bd3@super) (u2e43@id? u3bd4@constructor) (u2e43@id? u3bd5@predicate) (for-all u2e43@id? u3bd6@field*) (for-all u2e43@id? u3bd7@accessor*))) u3bcf@ls/false)) (apply (lambda (u3bdf@ctxt u3be0@name u3be1@super u3be2@constructor u3be3@predicate u3be4@field* u3be5@accessor*) ((lambda (u3bed@aux-accessor*) (u2ffe@bless (cons 'begin (cons (cons 'define-record-type (cons (list u3be0@name u3be2@constructor (gensym)) (cons (list 'parent u3be1@super) (cons (cons 'fields (map (lambda (u3bef@field u3bf0@aux) (list 'immutable u3bef@field u3bf0@aux)) u3be4@field* u3bed@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define u3be3@predicate (list 'condition-predicate (list 'record-type-descriptor u3be0@name))) (map (lambda (u3bf3@accessor u3bf4@aux) (list 'define u3bf3@accessor (list 'condition-accessor (list 'record-type-descriptor u3be0@name) u3bf4@aux))) u3be5@accessor* u3bed@aux-accessor*)))))) (map (lambda (u3bf7@x) (gensym)) u3be5@accessor*))) u3bcf@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3bcd@t))) (u3048@syntax-dispatch u3bcd@t '(any any any any any . #(each (any any)))))) u3bc9@x))) '#f))) (set! u3040@incorrect-usage-macro (lambda (u3bfd@e) (u3128@syntax-violation '#f '"incorrect usage of auxiliary keyword" u3bfd@e))) (set! u3042@parameterize-macro (lambda (u3bff@e) ((lambda (u3c01@t) ((lambda (u3c03@ls/false) (if u3c03@ls/false (apply (lambda (u3c05@b u3c06@b*) (u2ffe@bless (cons 'let (cons '() (cons u3c05@b u3c06@b*))))) u3c03@ls/false) ((lambda (u3c09@t) ((lambda (u3c0b@ls/false) (if u3c0b@ls/false (apply (lambda (u3c0d@olhs* u3c0e@orhs* u3c0f@b u3c10@b*) ((lambda (u3c15@lhs* u3c16@rhs*) (u2ffe@bless (cons (list 'lambda (append u3c15@lhs* u3c16@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (u3c19@lhs u3c1a@rhs) (list 'let (list (list 't (list u3c19@lhs))) (list u3c19@lhs u3c1a@rhs) (cons 'set! (cons u3c1a@rhs '(t))))) u3c15@lhs* u3c16@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons u3c0f@b u3c10@b*))) '(swap)))))) (append u3c0d@olhs* u3c0e@orhs*)))) (u3116@generate-temporaries u3c0d@olhs*) (u3116@generate-temporaries u3c0e@orhs*))) u3c0b@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3c09@t))) (u3048@syntax-dispatch u3c09@t '(_ #(each (any any)) any . each-any)))) u3c01@t))) (u3048@syntax-dispatch u3c01@t '(_ () any . each-any)))) u3bff@e))) (set! u3044@foreign-call-transformer (lambda (u3c1d@e u3c1e@r u3c1f@mr) ((lambda (u3c23@t) ((lambda (u3c25@ls/false) (if u3c25@ls/false (apply (lambda (u3c27@name u3c28@arg*) (cons 'foreign-call (cons (u306a@chi-expr u3c27@name u3c1e@r u3c1f@mr) (u3066@chi-expr* u3c28@arg* u3c1e@r u3c1f@mr)))) u3c25@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3c23@t))) (u3048@syntax-dispatch u3c23@t '(_ any . each-any)))) u3c1d@e))) (set! u3046@convert-pattern (lambda (u3c2b@pattern u3c2c@keys) ((lambda (u3c30@cvt* u3c32@cvt) (begin (set! u3c30@cvt* (lambda (u3ccf@p* u3cd0@n u3cd1@ids) (if (null? u3ccf@p*) (values '() u3cd1@ids) (call-with-values (lambda () (u3c30@cvt* (cdr u3ccf@p*) u3cd0@n u3cd1@ids)) (lambda (u3cd9@u3cd6 u3cda@u3cd8) ((lambda (u3cdd@ids u3cde@y) (call-with-values (lambda () (u3c32@cvt (car u3ccf@p*) u3cd0@n u3cdd@ids)) (lambda (u3ce5@u3ce2 u3ce6@u3ce4) ((lambda (u3ce9@ids u3cea@x) (values (cons u3cea@x u3cde@y) u3ce9@ids)) u3ce6@u3ce4 u3ce5@u3ce2)))) u3cda@u3cd8 u3cd9@u3cd6)))))) (set! u3c32@cvt (lambda (u3c33@p u3c34@n u3c35@ids) ((lambda (u3c39@t) ((lambda (u3c3b@ls/false) (if (and u3c3b@ls/false (apply (lambda (u3c3d@id) (u2e43@id? u3c3d@id)) u3c3b@ls/false)) (apply (lambda (u3c3f@id) (if (u2e4f@bound-id-member? u3c33@p u3c2c@keys) (values (vector 'free-id u3c33@p) u3c35@ids) (if (u2e49@free-id=? u3c33@p (u2fd2@scheme-stx '_)) (values '_ u3c35@ids) (values 'any (cons (cons u3c33@p u3c34@n) u3c35@ids))))) u3c3b@ls/false) ((lambda (u3c41@t) ((lambda (u3c43@ls/false) (if (and u3c43@ls/false (apply (lambda (u3c45@p u3c46@dots) (u304a@ellipsis? u3c46@dots)) u3c43@ls/false)) (apply (lambda (u3c49@p u3c4a@dots) (call-with-values (lambda () (u3c32@cvt u3c49@p (+ u3c34@n '1) u3c35@ids)) (lambda (u3c51@u3c4e u3c52@u3c50) ((lambda (u3c55@ids u3c56@p) (values (if (eq? u3c56@p 'any) 'each-any (vector 'each u3c56@p)) u3c55@ids)) u3c52@u3c50 u3c51@u3c4e)))) u3c43@ls/false) ((lambda (u3c59@t) ((lambda (u3c5b@ls/false) (if (and u3c5b@ls/false (apply (lambda (u3c5d@x u3c5e@dots u3c5f@ys u3c60@z) (u304a@ellipsis? u3c5e@dots)) u3c5b@ls/false)) (apply (lambda (u3c65@x u3c66@dots u3c67@ys u3c68@z) (call-with-values (lambda () (u3c32@cvt u3c68@z u3c34@n u3c35@ids)) (lambda (u3c71@u3c6e u3c72@u3c70) ((lambda (u3c75@ids u3c76@z) (call-with-values (lambda () (u3c30@cvt* u3c67@ys u3c34@n u3c75@ids)) (lambda (u3c7d@u3c7a u3c7e@u3c7c) ((lambda (u3c81@ids u3c82@ys) (call-with-values (lambda () (u3c32@cvt u3c65@x (+ u3c34@n '1) u3c81@ids)) (lambda (u3c89@u3c86 u3c8a@u3c88) ((lambda (u3c8d@ids u3c8e@x) (values (vector 'each+ u3c8e@x (reverse u3c82@ys) u3c76@z) u3c8d@ids)) u3c8a@u3c88 u3c89@u3c86)))) u3c7e@u3c7c u3c7d@u3c7a)))) u3c72@u3c70 u3c71@u3c6e)))) u3c5b@ls/false) ((lambda (u3c91@t) ((lambda (u3c93@ls/false) (if u3c93@ls/false (apply (lambda (u3c95@x u3c96@y) (call-with-values (lambda () (u3c32@cvt u3c96@y u3c34@n u3c35@ids)) (lambda (u3c9d@u3c9a u3c9e@u3c9c) ((lambda (u3ca1@ids u3ca2@y) (call-with-values (lambda () (u3c32@cvt u3c95@x u3c34@n u3ca1@ids)) (lambda (u3ca9@u3ca6 u3caa@u3ca8) ((lambda (u3cad@ids u3cae@x) (values (cons u3cae@x u3ca2@y) u3cad@ids)) u3caa@u3ca8 u3ca9@u3ca6)))) u3c9e@u3c9c u3c9d@u3c9a)))) u3c93@ls/false) ((lambda (u3cb1@t) ((lambda (u3cb3@ls/false) (if u3cb3@ls/false (apply (lambda () (values '() u3c35@ids)) u3cb3@ls/false) ((lambda (u3cb5@t) ((lambda (u3cb7@ls/false) (if (and u3cb7@ls/false (apply (lambda (u3cb9@p) (not (u2e0f@stx? u3cb9@p))) u3cb7@ls/false)) (apply (lambda (u3cbb@p) (call-with-values (lambda () (u3c32@cvt u3cbb@p u3c34@n u3c35@ids)) (lambda (u3cc1@u3cbe u3cc2@u3cc0) ((lambda (u3cc5@ids u3cc6@p) (values (vector 'vector u3cc6@p) u3cc5@ids)) u3cc2@u3cc0 u3cc1@u3cbe)))) u3cb7@ls/false) ((lambda (u3cc9@t) ((lambda (u3ccb@ls/false) (if u3ccb@ls/false (apply (lambda (u3ccd@datum) (values (vector 'atom (u2e57@stx->datum u3ccd@datum)) u3c35@ids)) u3ccb@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3cc9@t))) (u3048@syntax-dispatch u3cc9@t 'any))) u3cb5@t))) (u3048@syntax-dispatch u3cb5@t '#(vector each-any)))) u3cb1@t))) (u3048@syntax-dispatch u3cb1@t '()))) u3c91@t))) (u3048@syntax-dispatch u3c91@t '(any . any)))) u3c59@t))) (u3048@syntax-dispatch u3c59@t '(any any . #(each+ any () any))))) u3c41@t))) (u3048@syntax-dispatch u3c41@t '(any any)))) u3c39@t))) (u3048@syntax-dispatch u3c39@t 'any))) u3c33@p))) (u3c32@cvt u3c2b@pattern '0 '()))) '#f '#f))) (set! u3048@syntax-dispatch ((lambda () ((lambda (u3cee@stx^ u3cf0@match-each u3cf2@match-each+ u3cf4@match-each-any u3cf6@match-empty u3cf8@combine u3cfa@match* u3cfc@match) (begin (set! u3cee@stx^ (lambda (u3dc9@e u3dca@m* u3dcb@s* u3dcc@ae*) (if (and (null? u3dca@m*) (null? u3dcb@s*) (null? u3dcc@ae*)) u3dc9@e (u2e2b@mkstx u3dc9@e u3dca@m* u3dcb@s* u3dcc@ae*)))) (set! u3cf0@match-each (lambda (u3da9@e u3daa@p u3dab@m* u3dac@s* u3dad@ae*) (if (pair? u3da9@e) ((lambda (u3db3@first) (and u3db3@first ((lambda (u3db5@rest) (and u3db5@rest (cons u3db3@first u3db5@rest))) (u3cf0@match-each (cdr u3da9@e) u3daa@p u3dab@m* u3dac@s* u3dad@ae*)))) (u3cfc@match (car u3da9@e) u3daa@p u3dab@m* u3dac@s* u3dad@ae* '())) (if (null? u3da9@e) '() (if (u2e0f@stx? u3da9@e) (and (not (u2dc9@top-marked? u3dab@m*)) (call-with-values (lambda () (join-wraps u3dab@m* u3dac@s* u3dad@ae* u3da9@e)) (lambda (u3dbd@u3db8 u3dbe@u3dba u3dbf@u3dbc) ((lambda (u3dc3@ae* u3dc4@s* u3dc5@m*) (u3cf0@match-each (u2e11@stx-expr u3da9@e) u3daa@p u3dc5@m* u3dc4@s* u3dc3@ae*)) u3dbf@u3dbc u3dbe@u3dba u3dbd@u3db8)))) (if (u2997@u286b@annotation? u3da9@e) (u3cf0@match-each (u2999@u286f@annotation-expression u3da9@e) u3daa@p u3dab@m* u3dac@s* u3dad@ae*) '#f)))))) (set! u3cf2@match-each+ (lambda (u3d69@e u3d6a@x-pat u3d6b@y-pat u3d6c@z-pat u3d6d@m* u3d6e@s* u3d6f@ae* u3d70@r) ((letrec ((u3d79@f (lambda (u3d7b@e u3d7c@m* u3d7d@s* u3d7e@ae*) (if (pair? u3d7b@e) (call-with-values (lambda () (u3d79@f (cdr u3d7b@e) u3d7c@m* u3d7d@s* u3d7e@ae*)) (lambda (u3d89@u3d84 u3d8a@u3d86 u3d8b@u3d88) ((lambda (u3d8f@r u3d90@y-pat u3d91@xr*) (if u3d8f@r (if (null? u3d90@y-pat) ((lambda (u3d95@xr) (if u3d95@xr (values (cons u3d95@xr u3d91@xr*) u3d90@y-pat u3d8f@r) (values '#f '#f '#f))) (u3cfc@match (car u3d7b@e) u3d6a@x-pat u3d7c@m* u3d7d@s* u3d7e@ae* '())) (values '() (cdr u3d90@y-pat) (u3cfc@match (car u3d7b@e) (car u3d90@y-pat) u3d7c@m* u3d7d@s* u3d7e@ae* u3d8f@r))) (values '#f '#f '#f))) u3d8b@u3d88 u3d8a@u3d86 u3d89@u3d84))) (if (u2e0f@stx? u3d7b@e) (if (u2dc9@top-marked? u3d7c@m*) (values '() u3d6b@y-pat (u3cfc@match u3d7b@e u3d6c@z-pat u3d7c@m* u3d7d@s* u3d7e@ae* u3d70@r)) (call-with-values (lambda () (join-wraps u3d7c@m* u3d7d@s* u3d7e@ae* u3d7b@e)) (lambda (u3d9d@u3d98 u3d9e@u3d9a u3d9f@u3d9c) ((lambda (u3da3@ae* u3da4@s* u3da5@m*) (u3d79@f (u2e11@stx-expr u3d7b@e) u3da5@m* u3da4@s* u3da3@ae*)) u3d9f@u3d9c u3d9e@u3d9a u3d9d@u3d98)))) (if (u2997@u286b@annotation? u3d7b@e) (u3d79@f (u2999@u286f@annotation-expression u3d7b@e) u3d7c@m* u3d7d@s* u3d7e@ae*) (values '() u3d6b@y-pat (u3cfc@match u3d7b@e u3d6c@z-pat u3d7c@m* u3d7d@s* u3d7e@ae* u3d70@r)))))))) u3d79@f) u3d69@e u3d6d@m* u3d6e@s* u3d6f@ae*))) (set! u3cf4@match-each-any (lambda (u3d4d@e u3d4e@m* u3d4f@s* u3d50@ae*) (if (pair? u3d4d@e) ((lambda (u3d55@l) (and u3d55@l (cons (u3cee@stx^ (car u3d4d@e) u3d4e@m* u3d4f@s* u3d50@ae*) u3d55@l))) (u3cf4@match-each-any (cdr u3d4d@e) u3d4e@m* u3d4f@s* u3d50@ae*)) (if (null? u3d4d@e) '() (if (u2e0f@stx? u3d4d@e) (and (not (u2dc9@top-marked? u3d4e@m*)) (call-with-values (lambda () (join-wraps u3d4e@m* u3d4f@s* u3d50@ae* u3d4d@e)) (lambda (u3d5d@u3d58 u3d5e@u3d5a u3d5f@u3d5c) ((lambda (u3d63@ae* u3d64@s* u3d65@m*) (u3cf4@match-each-any (u2e11@stx-expr u3d4d@e) u3d65@m* u3d64@s* u3d63@ae*)) u3d5f@u3d5c u3d5e@u3d5a u3d5d@u3d58)))) (if (u2997@u286b@annotation? u3d4d@e) (u3cf4@match-each-any (u2999@u286f@annotation-expression u3d4d@e) u3d4e@m* u3d4f@s* u3d50@ae*) '#f)))))) (set! u3cf6@match-empty (lambda (u3d47@p u3d48@r) (if (null? u3d47@p) u3d48@r (if (eq? u3d47@p '_) u3d48@r (if (eq? u3d47@p 'any) (cons '() u3d48@r) (if (pair? u3d47@p) (u3cf6@match-empty (car u3d47@p) (u3cf6@match-empty (cdr u3d47@p) u3d48@r)) (if (eq? u3d47@p 'each-any) (cons '() u3d48@r) ((lambda (u3d4b@t) (if (memv u3d4b@t '(each)) (u3cf6@match-empty (vector-ref u3d47@p '1) u3d48@r) (if (memv u3d4b@t '(each+)) (u3cf6@match-empty (vector-ref u3d47@p '1) (u3cf6@match-empty (reverse (vector-ref u3d47@p '2)) (u3cf6@match-empty (vector-ref u3d47@p '3) u3d48@r))) (if (memv u3d4b@t '(free-id atom)) u3d48@r (if (memv u3d4b@t '(scheme-id atom)) u3d48@r (if (memv u3d4b@t '(vector)) (u3cf6@match-empty (vector-ref u3d47@p '1) u3d48@r) (assertion-violation 'syntax-dispatch '"invalid pattern" u3d47@p))))))) (vector-ref u3d47@p '0))))))))) (set! u3cf8@combine (lambda (u3d43@r* u3d44@r) (if (null? (car u3d43@r*)) u3d44@r (cons (map car u3d43@r*) (u3cf8@combine (map cdr u3d43@r*) u3d44@r))))) (set! u3cfa@match* (lambda (u3d1f@e u3d20@p u3d21@m* u3d22@s* u3d23@ae* u3d24@r) (if (null? u3d20@p) (and (null? u3d1f@e) u3d24@r) (if (pair? u3d20@p) (and (pair? u3d1f@e) (u3cfc@match (car u3d1f@e) (car u3d20@p) u3d21@m* u3d22@s* u3d23@ae* (u3cfc@match (cdr u3d1f@e) (cdr u3d20@p) u3d21@m* u3d22@s* u3d23@ae* u3d24@r))) (if (eq? u3d20@p 'each-any) ((lambda (u3d2b@l) (and u3d2b@l (cons u3d2b@l u3d24@r))) (u3cf4@match-each-any u3d1f@e u3d21@m* u3d22@s* u3d23@ae*)) ((lambda (u3d2d@t) (if (memv u3d2d@t '(each)) (if (null? u3d1f@e) (u3cf6@match-empty (vector-ref u3d20@p '1) u3d24@r) ((lambda (u3d2f@r*) (and u3d2f@r* (u3cf8@combine u3d2f@r* u3d24@r))) (u3cf0@match-each u3d1f@e (vector-ref u3d20@p '1) u3d21@m* u3d22@s* u3d23@ae*))) (if (memv u3d2d@t '(free-id)) (and (symbol? u3d1f@e) (u2dc9@top-marked? u3d21@m*) (u2e49@free-id=? (u3cee@stx^ u3d1f@e u3d21@m* u3d22@s* u3d23@ae*) (vector-ref u3d20@p '1)) u3d24@r) (if (memv u3d2d@t '(scheme-id)) (and (symbol? u3d1f@e) (u2dc9@top-marked? u3d21@m*) (u2e49@free-id=? (u3cee@stx^ u3d1f@e u3d21@m* u3d22@s* u3d23@ae*) (u2fd2@scheme-stx (vector-ref u3d20@p '1))) u3d24@r) (if (memv u3d2d@t '(each+)) (call-with-values (lambda () (u3cf2@match-each+ u3d1f@e (vector-ref u3d20@p '1) (vector-ref u3d20@p '2) (vector-ref u3d20@p '3) u3d21@m* u3d22@s* u3d23@ae* u3d24@r)) (lambda (u3d37@u3d32 u3d38@u3d34 u3d39@u3d36) ((lambda (u3d3d@r u3d3e@y-pat u3d3f@xr*) (and u3d3d@r (null? u3d3e@y-pat) (if (null? u3d3f@xr*) (u3cf6@match-empty (vector-ref u3d20@p '1) u3d3d@r) (u3cf8@combine u3d3f@xr* u3d3d@r)))) u3d39@u3d36 u3d38@u3d34 u3d37@u3d32))) (if (memv u3d2d@t '(atom)) (and (fast-equal? (vector-ref u3d20@p '1) (u2e55@strip u3d1f@e u3d21@m*)) u3d24@r) (if (memv u3d2d@t '(vector)) (and (vector? u3d1f@e) (u3cfc@match (vector->list u3d1f@e) (vector-ref u3d20@p '1) u3d21@m* u3d22@s* u3d23@ae* u3d24@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" u3d20@p)))))))) (vector-ref u3d20@p '0))))))) (set! u3cfc@match (lambda (u3d01@e u3d02@p u3d03@m* u3d04@s* u3d05@ae* u3d06@r) (if (not u3d06@r) '#f (if (eq? u3d02@p '_) u3d06@r (if (eq? u3d02@p 'any) (cons (u3cee@stx^ u3d01@e u3d03@m* u3d04@s* u3d05@ae*) u3d06@r) (if (u2e0f@stx? u3d01@e) (and (not (u2dc9@top-marked? u3d03@m*)) (call-with-values (lambda () (join-wraps u3d03@m* u3d04@s* u3d05@ae* u3d01@e)) (lambda (u3d13@u3d0e u3d14@u3d10 u3d15@u3d12) ((lambda (u3d19@ae* u3d1a@s* u3d1b@m*) (u3cfc@match (u2e11@stx-expr u3d01@e) u3d02@p u3d1b@m* u3d1a@s* u3d19@ae* u3d06@r)) u3d15@u3d12 u3d14@u3d10 u3d13@u3d0e)))) (if (u2997@u286b@annotation? u3d01@e) (u3cfc@match (u2999@u286f@annotation-expression u3d01@e) u3d02@p u3d03@m* u3d04@s* u3d05@ae* u3d06@r) (u3cfa@match* u3d01@e u3d02@p u3d03@m* u3d04@s* u3d05@ae* u3d06@r)))))))) (lambda (u3cfd@e u3cfe@p) (u3cfc@match u3cfd@e u3cfe@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! u304a@ellipsis? (lambda (u3dd1@x) (and (u2e43@id? u3dd1@x) (u2e49@free-id=? u3dd1@x (u2fd2@scheme-stx '...))))) (set! u304c@underscore? (lambda (u3dd3@x) (and (u2e43@id? u3dd3@x) (u2e49@free-id=? u3dd3@x (u2fd2@scheme-stx '_))))) (set! u304e@verify-literals (lambda (u3dd5@lits u3dd6@expr) (for-each (lambda (u3dd9@x) (if (or (not (u2e43@id? u3dd9@x)) (u304a@ellipsis? u3dd9@x) (u304c@underscore? u3dd9@x)) (u3128@syntax-violation '#f '"invalid literal" u3dd6@expr u3dd9@x) (void))) u3dd5@lits))) (set! u3050@syntax-case-transformer ((lambda () ((lambda (u3ddc@build-dispatch-call u3dde@invalid-ids-error u3de0@gen-clause u3de2@gen-syntax-case) (begin (set! u3ddc@build-dispatch-call (lambda (u3e4d@pvars u3e4e@expr u3e4f@y u3e50@r u3e51@mr) ((lambda (u3e57@ids u3e58@levels) ((lambda (u3e5b@labels u3e5c@new-vars) ((lambda (u3e5f@body) (list '(primitive apply) (u2da7@u2ce7@build-lambda '#f u3e5c@new-vars u3e5f@body) u3e4f@y)) (u306a@chi-expr (u2e2f@add-subst (u2e03@make-full-rib u3e57@ids u3e5b@labels) u3e4e@expr) (append (map (lambda (u3e61@label u3e62@var u3e63@level) (cons u3e61@label (u2e5d@make-binding 'syntax (cons u3e62@var u3e63@level)))) u3e5b@labels u3e5c@new-vars (map cdr u3e4d@pvars)) u3e50@r) u3e51@mr))) (map u2dcf@gen-label u3e57@ids) (map u2dcb@gen-lexical u3e57@ids))) (map car u3e4d@pvars) (map cdr u3e4d@pvars)))) (set! u3dde@invalid-ids-error (lambda (u3e41@id* u3e42@e u3e43@class) ((letrec ((u3e47@find (lambda (u3e49@id* u3e4a@ok*) (if (null? u3e49@id*) (u3128@syntax-violation '#f '"invalid syntax" u3e42@e) (if (u2e43@id? (car u3e49@id*)) (if (u2e4f@bound-id-member? (car u3e49@id*) u3e4a@ok*) (u3124@syntax-error (car u3e49@id*) '"duplicate " u3e43@class) (u3e47@find (cdr u3e49@id*) (cons (car u3e49@id*) u3e4a@ok*))) (u3124@syntax-error (car u3e49@id*) '"invalid " u3e43@class)))))) u3e47@find) u3e41@id* '()))) (set! u3de0@gen-clause (lambda (u3e19@x u3e1a@keys u3e1b@clauses u3e1c@r u3e1d@mr u3e1e@pat u3e1f@fender u3e20@expr) (call-with-values (lambda () (u3046@convert-pattern u3e1e@pat u3e1a@keys)) (lambda (u3e2d@u3e2a u3e2e@u3e2c) ((lambda (u3e31@pvars u3e32@p) (if (not (u2e4d@distinct-bound-ids? (map car u3e31@pvars))) (u3dde@invalid-ids-error (map car u3e31@pvars) u3e1e@pat '"pattern variable") (if (not (for-all (lambda (u3e35@x) (not (u304a@ellipsis? (car u3e35@x)))) u3e31@pvars)) (u3128@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" u3e1e@pat) ((lambda (u3e37@y) ((lambda (u3e39@test) ((lambda (u3e3b@conseq) ((lambda (u3e3d@altern) (list (u2da7@u2ce7@build-lambda '#f (list u3e37@y) (list 'if u3e39@test u3e3b@conseq u3e3d@altern)) (list '(primitive syntax-dispatch) u3e19@x (list 'quote u3e32@p)))) (u3de2@gen-syntax-case u3e19@x u3e1a@keys u3e1b@clauses u3e1c@r u3e1d@mr))) (u3ddc@build-dispatch-call u3e31@pvars u3e20@expr u3e37@y u3e1c@r u3e1d@mr))) (if (eq? u3e1f@fender '#t) u3e37@y ((lambda (u3e3f@call) (list 'if u3e37@y u3e3f@call (list 'quote '#f))) (u3ddc@build-dispatch-call u3e31@pvars u3e1f@fender u3e37@y u3e1c@r u3e1d@mr))))) (u2dcb@gen-lexical 'tmp))))) u3e2e@u3e2c u3e2d@u3e2a))))) (set! u3de2@gen-syntax-case (lambda (u3df7@x u3df8@keys u3df9@clauses u3dfa@r u3dfb@mr) (if (null? u3df9@clauses) (list '(primitive syntax-error) u3df7@x) ((lambda (u3e01@t) ((lambda (u3e03@ls/false) (if u3e03@ls/false (apply (lambda (u3e05@pat u3e06@expr) (if (and (u2e43@id? u3e05@pat) (not (u2e4f@bound-id-member? u3e05@pat u3df8@keys)) (not (u304a@ellipsis? u3e05@pat))) (if (u2e49@free-id=? u3e05@pat (u2fd2@scheme-stx '_)) (u306a@chi-expr u3e06@expr u3dfa@r u3dfb@mr) ((lambda (u3e09@lab u3e0a@lex) ((lambda (u3e0d@body) (list (u2da7@u2ce7@build-lambda '#f (list u3e0a@lex) u3e0d@body) u3df7@x)) (u306a@chi-expr (u2e2f@add-subst (u2e03@make-full-rib (list u3e05@pat) (list u3e09@lab)) u3e06@expr) (cons (cons u3e09@lab (u2e5d@make-binding 'syntax (cons u3e0a@lex '0))) u3dfa@r) u3dfb@mr))) (u2dcf@gen-label u3e05@pat) (u2dcb@gen-lexical u3e05@pat))) (u3de0@gen-clause u3df7@x u3df8@keys (cdr u3df9@clauses) u3dfa@r u3dfb@mr u3e05@pat '#t u3e06@expr))) u3e03@ls/false) ((lambda (u3e0f@t) ((lambda (u3e11@ls/false) (if u3e11@ls/false (apply (lambda (u3e13@pat u3e14@fender u3e15@expr) (u3de0@gen-clause u3df7@x u3df8@keys (cdr u3df9@clauses) u3dfa@r u3dfb@mr u3e13@pat u3e14@fender u3e15@expr)) u3e11@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3e0f@t))) (u3048@syntax-dispatch u3e0f@t '(any any any)))) u3e01@t))) (u3048@syntax-dispatch u3e01@t '(any any)))) (car u3df9@clauses))))) (lambda (u3de3@e u3de4@r u3de5@mr) ((lambda (u3de9@t) ((lambda (u3deb@ls/false) (if u3deb@ls/false (apply (lambda (u3ded@expr u3dee@keys u3def@clauses) (begin (u304e@verify-literals u3dee@keys u3de3@e) ((lambda (u3df3@x) ((lambda (u3df5@body) (list (u2da7@u2ce7@build-lambda '#f (list u3df3@x) u3df5@body) (u306a@chi-expr u3ded@expr u3de4@r u3de5@mr))) (u3de2@gen-syntax-case u3df3@x u3dee@keys u3def@clauses u3de4@r u3de5@mr))) (u2dcb@gen-lexical 'tmp)))) u3deb@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3de9@t))) (u3048@syntax-dispatch u3de9@t '(_ any each-any . each-any)))) u3de3@e)))) '#f '#f '#f '#f)))) (set! u3052@ellipsis-map (lambda (u3e67@proc u3e68@ls . u3e6b@ls*) ((lambda (u3e6e@who) (begin (set! u3e6e@who '...) (begin (if (not (list? u3e68@ls)) (assertion-violation u3e6e@who '"not a list" u3e68@ls) (void)) (if (not (null? u3e6b@ls*)) ((lambda (u3e6f@n) (for-each (lambda (u3e71@x) (begin (if (not (list? u3e71@x)) (assertion-violation u3e6e@who '"not a list" u3e71@x) (void)) (if (not (= (length u3e71@x) u3e6f@n)) (assertion-violation u3e6e@who '"length mismatch" u3e68@ls u3e71@x) (void)))) u3e6b@ls*)) (length u3e68@ls)) (void)) (apply map u3e67@proc u3e68@ls u3e6b@ls*)))) '#f))) (set! u3054@syntax-transformer ((lambda () ((lambda (u3e74@gen-syntax u3e76@gen-ref u3e78@gen-append u3e7a@gen-mappend u3e7c@gen-map u3e7e@gen-cons u3e80@gen-vector u3e82@regen) (begin (set! u3e74@gen-syntax (lambda (u3eeb@src u3eec@e u3eed@r u3eee@maps u3eef@ellipsis? u3ef0@vec?) ((lambda (u3ef7@t) ((lambda (u3ef9@ls/false) (if (and u3ef9@ls/false (apply (lambda (u3efb@dots) (u3eef@ellipsis? u3efb@dots)) u3ef9@ls/false)) (apply (lambda (u3efd@dots) (u3128@syntax-violation '#f '"misplaced ellipsis in syntax form" u3eeb@src)) u3ef9@ls/false) ((lambda (u3eff@t) ((lambda (u3f01@ls/false) (if (and u3f01@ls/false (apply (lambda (u3f03@id) (u2e43@id? u3f03@id)) u3f01@ls/false)) (apply (lambda (u3f05@id) ((lambda (u3f07@label) ((lambda (u3f09@b) ((lambda () (if (eq? (u2e5f@binding-type u3f09@b) 'syntax) (call-with-values (lambda () ((lambda (u3f0f@var.lev) (u3e76@gen-ref u3eeb@src (car u3f0f@var.lev) (cdr u3f0f@var.lev) u3eee@maps)) (u2e61@binding-value u3f09@b))) (lambda (u3f11@u3f0c u3f12@u3f0e) ((lambda (u3f15@maps u3f16@var) (values (list 'ref u3f16@var) u3f15@maps)) u3f12@u3f0e u3f11@u3f0c))) (values (list 'quote u3eec@e) u3eee@maps))))) (u2e5b@label->binding u3f07@label u3eed@r))) (u2e59@id->label u3eec@e))) u3f01@ls/false) ((lambda (u3f19@t) ((lambda (u3f1b@ls/false) (if (and u3f1b@ls/false (apply (lambda (u3f1d@dots u3f1e@e) (u3eef@ellipsis? u3f1d@dots)) u3f1b@ls/false)) (apply (lambda (u3f21@dots u3f22@e) (if u3ef0@vec? (u3128@syntax-violation '#f '"misplaced ellipsis in syntax form" u3eeb@src) (u3e74@gen-syntax u3eeb@src u3f22@e u3eed@r u3eee@maps (lambda (u3f25@x) '#f) '#f))) u3f1b@ls/false) ((lambda (u3f27@t) ((lambda (u3f29@ls/false) (if (and u3f29@ls/false (apply (lambda (u3f2b@x u3f2c@dots u3f2d@y) (u3eef@ellipsis? u3f2c@dots)) u3f29@ls/false)) (apply (lambda (u3f31@x u3f32@dots u3f33@y) ((letrec ((u3f37@f (lambda (u3f39@y u3f3a@k) ((lambda (u3f3d@t) ((lambda (u3f3f@ls/false) (if u3f3f@ls/false (apply (lambda () (u3f3a@k u3eee@maps)) u3f3f@ls/false) ((lambda (u3f41@t) ((lambda (u3f43@ls/false) (if (and u3f43@ls/false (apply (lambda (u3f45@dots u3f46@y) (u3eef@ellipsis? u3f45@dots)) u3f43@ls/false)) (apply (lambda (u3f49@dots u3f4a@y) (u3f37@f u3f4a@y (lambda (u3f4d@maps) (call-with-values (lambda () (u3f3a@k (cons '() u3f4d@maps))) (lambda (u3f53@u3f50 u3f54@u3f52) ((lambda (u3f57@maps u3f58@x) (if (null? (car u3f57@maps)) (u3128@syntax-violation '#f '"extra ellipsis in syntax form" u3eeb@src) (values (u3e7a@gen-mappend u3f58@x (car u3f57@maps)) (cdr u3f57@maps)))) u3f54@u3f52 u3f53@u3f50)))))) u3f43@ls/false) ((lambda (u3f5b@t) ((lambda (u3f5d@ls/false) (if u3f5d@ls/false (apply (lambda () (call-with-values (lambda () (u3e74@gen-syntax u3eeb@src u3f39@y u3eed@r u3eee@maps u3eef@ellipsis? u3ef0@vec?)) (lambda (u3f63@u3f60 u3f64@u3f62) ((lambda (u3f67@maps u3f68@y) (call-with-values (lambda () (u3f3a@k u3f67@maps)) (lambda (u3f6f@u3f6c u3f70@u3f6e) ((lambda (u3f73@maps u3f74@x) (values (u3e78@gen-append u3f74@x u3f68@y) u3f73@maps)) u3f70@u3f6e u3f6f@u3f6c)))) u3f64@u3f62 u3f63@u3f60)))) u3f5d@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3f5b@t))) (u3048@syntax-dispatch u3f5b@t '_))) u3f41@t))) (u3048@syntax-dispatch u3f41@t '(any . any)))) u3f3d@t))) (u3048@syntax-dispatch u3f3d@t '()))) u3f39@y)))) u3f37@f) u3f33@y (lambda (u3f77@maps) (call-with-values (lambda () (u3e74@gen-syntax u3eeb@src u3f31@x u3eed@r (cons '() u3f77@maps) u3eef@ellipsis? '#f)) (lambda (u3f7d@u3f7a u3f7e@u3f7c) ((lambda (u3f81@maps u3f82@x) (if (null? (car u3f81@maps)) (u3128@syntax-violation '#f '"extra ellipsis in syntax form" u3eeb@src) (values (u3e7c@gen-map u3f82@x (car u3f81@maps)) (cdr u3f81@maps)))) u3f7e@u3f7c u3f7d@u3f7a)))))) u3f29@ls/false) ((lambda (u3f85@t) ((lambda (u3f87@ls/false) (if u3f87@ls/false (apply (lambda (u3f89@x u3f8a@y) (call-with-values (lambda () (u3e74@gen-syntax u3eeb@src u3f89@x u3eed@r u3eee@maps u3eef@ellipsis? '#f)) (lambda (u3f91@u3f8e u3f92@u3f90) ((lambda (u3f95@maps u3f96@xnew) (call-with-values (lambda () (u3e74@gen-syntax u3eeb@src u3f8a@y u3eed@r u3f95@maps u3eef@ellipsis? u3ef0@vec?)) (lambda (u3f9d@u3f9a u3f9e@u3f9c) ((lambda (u3fa1@maps u3fa2@ynew) (values (u3e7e@gen-cons u3eec@e u3f89@x u3f8a@y u3f96@xnew u3fa2@ynew) u3fa1@maps)) u3f9e@u3f9c u3f9d@u3f9a)))) u3f92@u3f90 u3f91@u3f8e)))) u3f87@ls/false) ((lambda (u3fa5@t) ((lambda (u3fa7@ls/false) (if u3fa7@ls/false (apply (lambda (u3fa9@ls) (call-with-values (lambda () (u3e74@gen-syntax u3eeb@src u3fa9@ls u3eed@r u3eee@maps u3eef@ellipsis? '#t)) (lambda (u3faf@u3fac u3fb0@u3fae) ((lambda (u3fb3@maps u3fb4@lsnew) (values (u3e80@gen-vector u3eec@e u3fa9@ls u3fb4@lsnew) u3fb3@maps)) u3fb0@u3fae u3faf@u3fac)))) u3fa7@ls/false) ((lambda (u3fb7@t) ((lambda (u3fb9@ls/false) (if u3fb9@ls/false (apply (lambda () (values (list 'quote u3eec@e) u3eee@maps)) u3fb9@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3fb7@t))) (u3048@syntax-dispatch u3fb7@t '_))) u3fa5@t))) (u3048@syntax-dispatch u3fa5@t '#(vector each-any)))) u3f85@t))) (u3048@syntax-dispatch u3f85@t '(any . any)))) u3f27@t))) (u3048@syntax-dispatch u3f27@t '(any any . any)))) u3f19@t))) (u3048@syntax-dispatch u3f19@t '(any any)))) u3eff@t))) (u3048@syntax-dispatch u3eff@t 'any))) u3ef7@t))) (u3048@syntax-dispatch u3ef7@t 'any))) u3eec@e))) (set! u3e76@gen-ref (lambda (u3ed1@src u3ed2@var u3ed3@level u3ed4@maps) (if (= u3ed3@level '0) (values u3ed2@var u3ed4@maps) (if (null? u3ed4@maps) (u3128@syntax-violation '#f '"missing ellipsis in syntax form" u3ed1@src) (call-with-values (lambda () (u3e76@gen-ref u3ed1@src u3ed2@var (- u3ed3@level '1) (cdr u3ed4@maps))) (lambda (u3edd@u3eda u3ede@u3edc) ((lambda (u3ee1@outer-maps u3ee2@outer-var) ((lambda (u3ee5@t) (if u3ee5@t ((lambda (u3ee7@b) (values (cdr u3ee7@b) u3ed4@maps)) u3ee5@t) ((lambda (u3ee9@inner-var) (values u3ee9@inner-var (cons (cons (cons u3ee2@outer-var u3ee9@inner-var) (car u3ed4@maps)) u3ee1@outer-maps))) (u2dcb@gen-lexical 'tmp)))) (assq u3ee2@outer-var (car u3ed4@maps)))) u3ede@u3edc u3edd@u3eda))))))) (set! u3e78@gen-append (lambda (u3ecd@x u3ece@y) (if (fast-equal? u3ece@y ''()) u3ecd@x (list 'append u3ecd@x u3ece@y)))) (set! u3e7a@gen-mappend (lambda (u3ec9@e u3eca@map-env) (list 'apply '(primitive append) (u3e7c@gen-map u3ec9@e u3eca@map-env)))) (set! u3e7c@gen-map (lambda (u3eb7@e u3eb8@map-env) ((lambda (u3ebb@formals u3ebc@actuals) (if (eq? (car u3eb7@e) 'ref) (car u3ebc@actuals) (if (for-all (lambda (u3ebf@x) (and (eq? (car u3ebf@x) 'ref) (memq (cadr u3ebf@x) u3ebb@formals))) (cdr u3eb7@e)) ((lambda (u3ec1@args) (cons 'map (cons (list 'primitive (car u3eb7@e)) u3ec1@args))) (map ((lambda (u3ec3@r) (lambda (u3ec5@x) (cdr (assq (cadr u3ec5@x) u3ec3@r)))) (map cons u3ebb@formals u3ebc@actuals)) (cdr u3eb7@e))) (cons* 'map (list 'lambda u3ebb@formals u3eb7@e) u3ebc@actuals)))) (map cdr u3eb8@map-env) (map (lambda (u3ec7@x) (list 'ref (car u3ec7@x))) u3eb8@map-env)))) (set! u3e7e@gen-cons (lambda (u3ea7@e u3ea8@x u3ea9@y u3eaa@xnew u3eab@ynew) ((lambda (u3eb1@t) (if (memv u3eb1@t '(quote)) (if (eq? (car u3eaa@xnew) 'quote) ((lambda (u3eb3@xnew u3eb4@ynew) (if (and (eq? u3eb3@xnew u3ea8@x) (eq? u3eb4@ynew u3ea9@y)) (list 'quote u3ea7@e) (list 'quote (cons u3eb3@xnew u3eb4@ynew)))) (cadr u3eaa@xnew) (cadr u3eab@ynew)) (if (null? (cadr u3eab@ynew)) (list 'list u3eaa@xnew) (list 'cons u3eaa@xnew u3eab@ynew))) (if (memv u3eb1@t '(list)) (cons 'list (cons u3eaa@xnew (cdr u3eab@ynew))) (list 'cons u3eaa@xnew u3eab@ynew)))) (car u3eab@ynew)))) (set! u3e80@gen-vector (lambda (u3ea1@e u3ea2@ls u3ea3@lsnew) (if (eq? (car u3ea3@lsnew) 'quote) (if (eq? (cadr u3ea3@lsnew) u3ea2@ls) (list 'quote u3ea1@e) (list 'quote (list->vector (cadr u3ea3@lsnew)))) (if (eq? (car u3ea3@lsnew) 'list) (cons 'vector (cdr u3ea3@lsnew)) (list 'list->vector u3ea3@lsnew))))) (set! u3e82@regen (lambda (u3e9b@x) ((lambda (u3e9d@t) (if (memv u3e9d@t '(ref)) (cadr u3e9b@x) (if (memv u3e9d@t '(primitive)) (list 'primitive (cadr u3e9b@x)) (if (memv u3e9d@t '(quote)) (list 'quote (cadr u3e9b@x)) (if (memv u3e9d@t '(lambda)) (u2da7@u2ce7@build-lambda '#f (cadr u3e9b@x) (u3e82@regen (caddr u3e9b@x))) (if (memv u3e9d@t '(map)) ((lambda (u3e9f@ls) (cons '(primitive ellipsis-map) u3e9f@ls)) (map u3e82@regen (cdr u3e9b@x))) (cons (list 'primitive (car u3e9b@x)) (map u3e82@regen (cdr u3e9b@x))))))))) (car u3e9b@x)))) (lambda (u3e83@e u3e84@r u3e85@mr) ((lambda (u3e89@t) ((lambda (u3e8b@ls/false) (if u3e8b@ls/false (apply (lambda (u3e8d@x) (call-with-values (lambda () (u3e74@gen-syntax u3e83@e u3e8d@x u3e84@r '() u304a@ellipsis? '#f)) (lambda (u3e93@u3e90 u3e94@u3e92) ((lambda (u3e97@maps u3e98@e) (u3e82@regen u3e98@e)) u3e94@u3e92 u3e93@u3e90)))) u3e8b@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3e89@t))) (u3048@syntax-dispatch u3e89@t '(_ any)))) u3e83@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! u3056@core-macro-transformer (lambda (u3fbb@name) ((lambda (u3fbd@t) (if (memv u3fbd@t '(quote)) u2ff8@quote-transformer (if (memv u3fbd@t '(lambda)) u2ffc@lambda-transformer (if (memv u3fbd@t '(case-lambda)) u2ffa@case-lambda-transformer (if (memv u3fbd@t '(letrec)) u2fe0@letrec-transformer (if (memv u3fbd@t '(letrec*)) u2fe2@letrec*-transformer (if (memv u3fbd@t '(if)) u2ff0@if-transformer (if (memv u3fbd@t '(and)) u2ff2@and-transformer (if (memv u3fbd@t '(or)) u2ff4@or-transformer (if (memv u3fbd@t '(foreign-call)) u3044@foreign-call-transformer (if (memv u3fbd@t '(syntax-case)) u3050@syntax-case-transformer (if (memv u3fbd@t '(syntax)) u3054@syntax-transformer (if (memv u3fbd@t '(type-descriptor)) u2fe6@type-descriptor-transformer (if (memv u3fbd@t '(record-type-descriptor)) u2fe8@record-type-descriptor-transformer (if (memv u3fbd@t '(record-constructor-descriptor)) u2fea@record-constructor-descriptor-transformer (if (memv u3fbd@t '(fluid-let-syntax)) u2fe4@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" u3fbb@name))))))))))))))))) u3fbb@name))) (set! u3058@symbol-macro (lambda (u3fbf@x u3fc0@set) ((lambda (u3fc3@t) ((lambda (u3fc5@ls/false) (if (and u3fc5@ls/false (apply (lambda (u3fc7@name) (and (u2e43@id? u3fc7@name) (memq (u2e45@id->sym u3fc7@name) u3fc0@set))) u3fc5@ls/false)) (apply (lambda (u3fc9@name) (u2ffe@bless (list 'quote u3fc9@name))) u3fc5@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u3fc3@t))) (u3048@syntax-dispatch u3fc3@t '(_ any)))) u3fbf@x))) (set! u305a@macro-transformer (lambda (u3fcb@x) (if (procedure? u3fcb@x) u3fcb@x (if (symbol? u3fcb@x) ((lambda (u3fcd@t) (if (memv u3fcd@t '(define-record-type)) u303c@define-record-type-macro (if (memv u3fcd@t '(define-struct)) u303a@define-struct-macro (if (memv u3fcd@t '(include)) u3030@include-macro (if (memv u3fcd@t '(cond)) u302c@cond-macro (if (memv u3fcd@t '(let)) u3004@let-macro (if (memv u3fcd@t '(do)) u3024@do-macro (if (memv u3fcd@t '(or)) u3028@or-macro (if (memv u3fcd@t '(and)) u302a@and-macro (if (memv u3fcd@t '(let*)) u3026@let*-macro (if (memv u3fcd@t '(let-values)) u3006@let-values-macro (if (memv u3fcd@t '(let*-values)) u3008@let*-values-macro (if (memv u3fcd@t '(syntax-rules)) u3034@syntax-rules-macro (if (memv u3fcd@t '(quasiquote)) u3036@quasiquote-macro (if (memv u3fcd@t '(quasisyntax)) u3038@quasisyntax-macro (if (memv u3fcd@t '(with-syntax)) u3000@with-syntax-macro (if (memv u3fcd@t '(when)) u2fec@when-macro (if (memv u3fcd@t '(unless)) u2fee@unless-macro (if (memv u3fcd@t '(case)) u2ff6@case-macro (if (memv u3fcd@t '(identifier-syntax)) u3022@identifier-syntax-macro (if (memv u3fcd@t '(time)) u301a@time-macro (if (memv u3fcd@t '(delay)) u301c@delay-macro (if (memv u3fcd@t '(assert)) u301e@assert-macro (if (memv u3fcd@t '(endianness)) u3020@endianness-macro (if (memv u3fcd@t '(guard)) u3016@guard-macro (if (memv u3fcd@t '(define-enumeration)) u3018@define-enumeration-macro (if (memv u3fcd@t '(trace-lambda)) u300a@trace-lambda-macro (if (memv u3fcd@t '(trace-define)) u300c@trace-define-macro (if (memv u3fcd@t '(trace-define-syntax)) u300e@trace-define-syntax-macro (if (memv u3fcd@t '(trace-let-syntax)) u3012@trace-let-syntax-macro (if (memv u3fcd@t '(trace-letrec-syntax)) u3014@trace-letrec-syntax-macro (if (memv u3fcd@t '(define-condition-type)) u303e@define-condition-type-macro (if (memv u3fcd@t '(parameterize)) u3042@parameterize-macro (if (memv u3fcd@t '(include-into)) u3032@include-into-macro (if (memv u3fcd@t '(eol-style)) (lambda (u3fcf@x) (u3058@symbol-macro u3fcf@x '(none lf cr crlf nel crnel ls))) (if (memv u3fcd@t '(error-handling-mode)) (lambda (u3fd1@x) (u3058@symbol-macro u3fd1@x '(ignore raise replace))) (if (memv u3fcd@t '(buffer-mode)) (lambda (u3fd3@x) (u3058@symbol-macro u3fd3@x '(none line block))) (if (memv u3fcd@t '(file-options)) u2dbe@file-options-macro (if (memv u3fcd@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) u3040@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" u3fcb@x)))))))))))))))))))))))))))))))))))))))) u3fcb@x) (error 'core-macro-transformer '"BUG: invalid macro" u3fcb@x))))) (set! u305c@local-macro-transformer (lambda (u3fd5@x) (car u3fd5@x))) (set! u305e@do-macro-call (lambda (u3fd7@transformer u3fd8@expr) ((lambda (u3fdb@out) (begin ((letrec ((u3fdd@f (lambda (u3fdf@x) (if (not (u2e0f@stx? u3fdf@x)) (if (pair? u3fdf@x) (begin (u3fdd@f (car u3fdf@x)) (u3fdd@f (cdr u3fdf@x))) (if (vector? u3fdf@x) (vector-for-each u3fdd@f u3fdf@x) (if (symbol? u3fdf@x) (u3128@syntax-violation '#f '"raw symbol encountered in output of macro" u3fd8@expr u3fdf@x) (void)))) (void))))) u3fdd@f) u3fdb@out) (u2e2d@add-mark (u2e25@gen-mark) u3fdb@out u3fd8@expr))) (u3fd7@transformer (u2e2d@add-mark u2e27@anti-mark u3fd8@expr '#f))))) (set! u3060@chi-macro (lambda (u3fe1@p u3fe2@e) (u305e@do-macro-call (u305a@macro-transformer u3fe1@p) u3fe2@e))) (set! u3062@chi-local-macro (lambda (u3fe5@p u3fe6@e) (u305e@do-macro-call (u305c@local-macro-transformer u3fe5@p) u3fe6@e))) (set! u3064@chi-global-macro (lambda (u3fe9@p u3fea@e) ((lambda (u3fed@lib u3fee@loc) (begin (u2c6f@u2abe@visit-library u3fed@lib) ((lambda (u3ff1@x) ((lambda (u3ff3@transformer) (u305e@do-macro-call u3ff3@transformer u3fea@e)) (if (procedure? u3ff1@x) u3ff1@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" u3ff1@x)))) (symbol-value u3fee@loc)))) (car u3fe9@p) (cdr u3fe9@p)))) (set! u3066@chi-expr* (lambda (u3ff5@e* u3ff6@r u3ff7@mr) (if (null? u3ff5@e*) '() ((lambda (u3ffb@e) (cons u3ffb@e (u3066@chi-expr* (cdr u3ff5@e*) u3ff6@r u3ff7@mr))) (u306a@chi-expr (car u3ff5@e*) u3ff6@r u3ff7@mr))))) (set! u3068@chi-application (lambda (u3ffd@e u3ffe@r u3fff@mr) ((lambda (u4003@t) ((lambda (u4005@ls/false) (if u4005@ls/false (apply (lambda (u4007@rator u4008@rands) ((lambda (u400b@rator) (cons u400b@rator (u3066@chi-expr* u4008@rands u3ffe@r u3fff@mr))) (u306a@chi-expr u4007@rator u3ffe@r u3fff@mr))) u4005@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u4003@t))) (u3048@syntax-dispatch u4003@t '(any . each-any)))) u3ffd@e))) (set! u306a@chi-expr (lambda (u400d@e u400e@r u400f@mr) (call-with-values (lambda () (u2e65@syntax-type u400d@e u400e@r)) (lambda (u4019@u4014 u401a@u4016 u401b@u4018) ((lambda (u401f@kwd u4020@value u4021@type) ((lambda (u4025@t) (if (memv u4025@t '(core-macro)) ((lambda (u4027@transformer) (u4027@transformer u400d@e u400e@r u400f@mr)) (u3056@core-macro-transformer u4020@value)) (if (memv u4025@t '(global)) ((lambda (u4029@lib) ((lambda (u402b@loc) ((lambda () (begin ((u30b0@inv-collector) u4029@lib) u402b@loc)))) (cdr u4020@value))) (car u4020@value)) (if (memv u4025@t '(core-prim)) ((lambda (u402d@name) (list 'primitive u402d@name)) u4020@value) (if (memv u4025@t '(call)) (u3068@chi-application u400d@e u400e@r u400f@mr) (if (memv u4025@t '(lexical)) ((lambda (u402f@lex) u402f@lex) (u2fd4@lexical-var u4020@value)) (if (memv u4025@t '(global-macro global-macro!)) (u306a@chi-expr (u3064@chi-global-macro u4020@value u400d@e) u400e@r u400f@mr) (if (memv u4025@t '(local-macro local-macro!)) (u306a@chi-expr (u3062@chi-local-macro u4020@value u400d@e) u400e@r u400f@mr) (if (memv u4025@t '(macro macro!)) (u306a@chi-expr (u3060@chi-macro u4020@value u400d@e) u400e@r u400f@mr) (if (memv u4025@t '(constant)) ((lambda (u4031@datum) (list 'quote u4031@datum)) u4020@value) (if (memv u4025@t '(set!)) (u306c@chi-set! u400d@e u400e@r u400f@mr) (if (memv u4025@t '(begin)) ((lambda (u4033@t) ((lambda (u4035@ls/false) (if u4035@ls/false (apply (lambda (u4037@x u4038@x*) (u2daa@u2d19@build-sequence '#f (u3066@chi-expr* (cons u4037@x u4038@x*) u400e@r u400f@mr))) u4035@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u4033@t))) (u3048@syntax-dispatch u4033@t '(_ any . each-any)))) u400d@e) (if (memv u4025@t '(let-syntax letrec-syntax)) ((lambda (u403b@t) ((lambda (u403d@ls/false) (if (and u403d@ls/false (apply (lambda (u403f@xlhs* u4040@xrhs* u4041@xbody u4042@xbody*) (if (not (u2e4b@valid-bound-ids? u403f@xlhs*)) (u3128@syntax-violation '#f '"invalid identifiers" u400d@e) (void))) u403d@ls/false)) (apply (lambda (u4047@xlhs* u4048@xrhs* u4049@xbody u404a@xbody*) ((lambda (u404f@xlab*) ((lambda (u4051@xrib) ((lambda (u4053@xb*) ((lambda () (u2daa@u2d19@build-sequence '#f (u3066@chi-expr* (map (lambda (u4055@x) (u2e2f@add-subst u4051@xrib u4055@x)) (cons u4049@xbody u404a@xbody*)) (append (map cons u404f@xlab* u4053@xb*) u400e@r) (append (map cons u404f@xlab* u4053@xb*) u400f@mr)))))) (map (lambda (u4057@x) (u2e7b@make-eval-transformer (u30a2@expand-transformer (if (eq? u4021@type 'let-syntax) u4057@x (u2e2f@add-subst u4051@xrib u4057@x)) u400f@mr))) u4048@xrhs*))) (u2e03@make-full-rib u4047@xlhs* u404f@xlab*))) (map u2dcf@gen-label u4047@xlhs*))) u403d@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u403b@t))) (u3048@syntax-dispatch u403b@t '(_ #(each (any any)) any . each-any)))) u400d@e) (if (memv u4025@t '(displaced-lexical)) (u3128@syntax-violation '#f '"identifier out of context" u400d@e) (if (memv u4025@t '(syntax)) (u3128@syntax-violation '#f '"reference to pattern variable outside a syntax form" u400d@e) (if (memv u4025@t '(define define-syntax module import library)) (u3128@syntax-violation '#f (string-append ((lambda (u4059@t) (if (memv u4059@t '(define)) '"a definition" (if (memv u4059@t '(define-syntax)) '"a define-syntax" (if (memv u4059@t '(module)) '"a module definition" (if (memv u4059@t '(library)) '"a library definition" (if (memv u4059@t '(import)) '"an import declaration" (if (memv u4059@t '(export)) '"an export declaration" '"a non-expression"))))))) u4021@type) '" was found where an expression was expected") u400d@e) (if (memv u4025@t '(mutable)) (u3128@syntax-violation '#f '"attempt to reference an unexportable variable" u400d@e) (u3128@syntax-violation '#f '"invalid expression" u400d@e)))))))))))))))))) u4021@type)) u401b@u4018 u401a@u4016 u4019@u4014))))) (set! u306c@chi-set! (lambda (u405b@e u405c@r u405d@mr) ((lambda (u4061@t) ((lambda (u4063@ls/false) (if (and u4063@ls/false (apply (lambda (u4065@x u4066@v) (u2e43@id? u4065@x)) u4063@ls/false)) (apply (lambda (u4069@x u406a@v) (call-with-values (lambda () (u2e65@syntax-type u4069@x u405c@r)) (lambda (u4073@u406e u4074@u4070 u4075@u4072) ((lambda (u4079@kwd u407a@value u407b@type) ((lambda (u407f@t) (if (memv u407f@t '(lexical)) (begin (u2fd8@set-lexical-mutable! u407a@value '#t) (list 'set! (u2fd4@lexical-var u407a@value) (u306a@chi-expr u406a@v u405c@r u405d@mr))) (if (memv u407f@t '(core-prim)) (u3128@syntax-violation '#f '"cannot modify imported core primitive" u405b@e) (if (memv u407f@t '(global)) (u3128@syntax-violation '#f '"attempt to modify imported binding" u405b@e) (if (memv u407f@t '(global-macro!)) (u306a@chi-expr (u3064@chi-global-macro u407a@value u405b@e) u405c@r u405d@mr) (if (memv u407f@t '(local-macro!)) (u306a@chi-expr (u3062@chi-local-macro u407a@value u405b@e) u405c@r u405d@mr) (if (memv u407f@t '(mutable)) (u3128@syntax-violation '#f '"attempt to assign to an unexportable variable" u405b@e) (u3128@syntax-violation '#f '"invalid syntax" u405b@e)))))))) u407b@type)) u4075@u4072 u4074@u4070 u4073@u406e)))) u4063@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u4061@t))) (u3048@syntax-dispatch u4061@t '(_ any any)))) u405b@e))) (set! u306e@verify-formals (lambda (u4081@fmls u4082@stx) ((lambda (u4085@t) ((lambda (u4087@ls/false) (if u4087@ls/false (apply (lambda (u4089@x*) (if (not (u2e4b@valid-bound-ids? u4089@x*)) (u3002@invalid-fmls-error u4082@stx u4081@fmls) (void))) u4087@ls/false) ((lambda (u408b@t) ((lambda (u408d@ls/false) (if u408d@ls/false (apply (lambda (u408f@x* u4090@x) (if (not (u2e4b@valid-bound-ids? (cons u4090@x u408f@x*))) (u3002@invalid-fmls-error u4082@stx u4081@fmls) (void))) u408d@ls/false) ((lambda (u4093@t) ((lambda (u4095@ls/false) (if u4095@ls/false (apply (lambda () (u3128@syntax-violation '#f '"invalid syntax" u4082@stx)) u4095@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u4093@t))) (u3048@syntax-dispatch u4093@t '_))) u408b@t))) (u3048@syntax-dispatch u408b@t '#(each+ any () any)))) u4085@t))) (u3048@syntax-dispatch u4085@t 'each-any))) u4081@fmls))) (set! u3070@chi-lambda-clause (lambda (u4097@stx u4098@fmls u4099@body* u409a@r u409b@mr) ((lambda (u40a1@t) ((lambda (u40a3@ls/false) (if u40a3@ls/false (apply (lambda (u40a5@x*) (begin (u306e@verify-formals u4098@fmls u4097@stx) ((lambda (u40a7@lex* u40a8@lab*) (values u40a7@lex* (u3080@chi-internal (u2e2f@add-subst (u2e03@make-full-rib u40a5@x* u40a8@lab*) u4099@body*) (u2fdc@add-lexicals u40a8@lab* u40a7@lex* u409a@r) u409b@mr))) (map u2dcb@gen-lexical u40a5@x*) (map u2dcf@gen-label u40a5@x*)))) u40a3@ls/false) ((lambda (u40ab@t) ((lambda (u40ad@ls/false) (if u40ad@ls/false (apply (lambda (u40af@x* u40b0@x) (begin (u306e@verify-formals u4098@fmls u4097@stx) ((lambda (u40b3@lex* u40b4@lab* u40b5@lex u40b6@lab) (values (append u40b3@lex* u40b5@lex) (u3080@chi-internal (u2e2f@add-subst (u2e03@make-full-rib (cons u40b0@x u40af@x*) (cons u40b6@lab u40b4@lab*)) u4099@body*) (u2fdc@add-lexicals (cons u40b6@lab u40b4@lab*) (cons u40b5@lex u40b3@lex*) u409a@r) u409b@mr))) (map u2dcb@gen-lexical u40af@x*) (map u2dcf@gen-label u40af@x*) (u2dcb@gen-lexical u40b0@x) (u2dcf@gen-label u40b0@x)))) u40ad@ls/false) ((lambda (u40bb@t) ((lambda (u40bd@ls/false) (if u40bd@ls/false (apply (lambda () (u3128@syntax-violation '#f '"invalid syntax" u4098@fmls)) u40bd@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u40bb@t))) (u3048@syntax-dispatch u40bb@t '_))) u40ab@t))) (u3048@syntax-dispatch u40ab@t '#(each+ any () any)))) u40a1@t))) (u3048@syntax-dispatch u40a1@t 'each-any))) u4098@fmls))) (set! u3072@chi-lambda-clause* (lambda (u40bf@stx u40c0@fmls* u40c1@body** u40c2@r u40c3@mr) (if (null? u40c0@fmls*) (values '() '()) (call-with-values (lambda () (u3070@chi-lambda-clause u40bf@stx (car u40c0@fmls*) (car u40c1@body**) u40c2@r u40c3@mr)) (lambda (u40cd@u40ca u40ce@u40cc) ((lambda (u40d1@b u40d2@a) (call-with-values (lambda () (u3072@chi-lambda-clause* u40bf@stx (cdr u40c0@fmls*) (cdr u40c1@body**) u40c2@r u40c3@mr)) (lambda (u40d9@u40d6 u40da@u40d8) ((lambda (u40dd@b* u40de@a*) (values (cons u40d2@a u40de@a*) (cons u40d1@b u40dd@b*))) u40da@u40d8 u40d9@u40d6)))) u40ce@u40cc u40cd@u40ca)))))) (set! u3074@chi-defun (lambda (u40e1@x u40e2@r u40e3@mr) ((lambda (u40e7@fmls u40e8@body*) (call-with-values (lambda () (u3070@chi-lambda-clause u40e7@fmls u40e7@fmls u40e8@body* u40e2@r u40e3@mr)) (lambda (u40ef@u40ec u40f0@u40ee) ((lambda (u40f3@body u40f4@fmls) (u2da7@u2ce7@build-lambda '#f u40f4@fmls u40f3@body)) u40f0@u40ee u40ef@u40ec)))) (car u40e1@x) (cdr u40e1@x)))) (set! u3076@chi-rhs (lambda (u40f7@rhs u40f8@r u40f9@mr) ((lambda (u40fd@t) (if (memv u40fd@t '(defun)) (u3074@chi-defun (cdr u40f7@rhs) u40f8@r u40f9@mr) (if (memv u40fd@t '(expr)) ((lambda (u40ff@expr) (u306a@chi-expr u40ff@expr u40f8@r u40f9@mr)) (cdr u40f7@rhs)) (if (memv u40fd@t '(top-expr)) ((lambda (u4101@expr) (u2daa@u2d19@build-sequence '#f (list (u306a@chi-expr u4101@expr u40f8@r u40f9@mr) (u2dab@u2d1b@build-void)))) (cdr u40f7@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" u40f7@rhs))))) (car u40f7@rhs)))) (set! u3078@expand-interaction-rhs*/init* (lambda (u4103@lhs* u4104@rhs* u4105@init* u4106@r u4107@mr) ((letrec ((u410d@f (lambda (u410f@lhs* u4110@rhs*) (if (null? u410f@lhs*) (map (lambda (u4113@x) (u306a@chi-expr u4113@x u4106@r u4107@mr)) u4105@init*) ((lambda (u4115@lhs u4116@rhs) ((lambda (u4119@t) (if (memv u4119@t '(defun)) ((lambda (u411b@rhs) (cons (list 'set! u4115@lhs u411b@rhs) (u410d@f (cdr u410f@lhs*) (cdr u4110@rhs*)))) (u3074@chi-defun (cdr u4116@rhs) u4106@r u4107@mr)) (if (memv u4119@t '(expr)) ((lambda (u411d@rhs) (cons (list 'set! u4115@lhs u411d@rhs) (u410d@f (cdr u410f@lhs*) (cdr u4110@rhs*)))) (u306a@chi-expr (cdr u4116@rhs) u4106@r u4107@mr)) (if (memv u4119@t '(top-expr)) ((lambda (u411f@e) (cons u411f@e (u410d@f (cdr u410f@lhs*) (cdr u4110@rhs*)))) (u306a@chi-expr (cdr u4116@rhs) u4106@r u4107@mr)) (error 'expand-interaction '"invallid" u4116@rhs))))) (car u4116@rhs))) (car u410f@lhs*) (car u4110@rhs*)))))) u410d@f) u4103@lhs* u4104@rhs*))) (set! u307a@chi-rhs* (lambda (u4121@rhs* u4122@r u4123@mr) ((letrec ((u4127@f (lambda (u4129@ls) (if (null? u4129@ls) '() ((lambda (u412b@a) (cons u412b@a (u4127@f (cdr u4129@ls)))) (u3076@chi-rhs (car u4129@ls) u4122@r u4123@mr)))))) u4127@f) u4121@rhs*))) (set! u307c@find-bound=? (lambda (u412d@x u412e@lhs* u412f@rhs*) (if (null? u412e@lhs*) '#f (if (u2e47@bound-id=? u412d@x (car u412e@lhs*)) (car u412f@rhs*) (u307c@find-bound=? u412d@x (cdr u412e@lhs*) (cdr u412f@rhs*)))))) (set! u307e@find-dups (lambda (u4133@ls) ((letrec ((u4135@f (lambda (u4137@ls u4138@dups) (if (null? u4137@ls) u4138@dups ((lambda (u413b@t) (if u413b@t ((lambda (u413d@x) (u4135@f (cdr u4137@ls) (cons (list (car u4137@ls) u413d@x) u4138@dups))) u413b@t) (u4135@f (cdr u4137@ls) u4138@dups))) (u307c@find-bound=? (car u4137@ls) (cdr u4137@ls) (cdr u4137@ls))))))) u4135@f) u4133@ls '()))) (set! u3080@chi-internal (lambda (u413f@e* u4140@r u4141@mr) ((lambda (u4145@rib) (call-with-values (lambda () (u30a0@chi-body* (map (lambda (u4157@x) (u2e2f@add-subst u4145@rib u4157@x)) (u2e41@syntax->list u413f@e*)) u4140@r u4141@mr '() '() '() '() '() u4145@rib '#f)) (lambda (u4159@u4148 u415a@u414a u415b@u414c u415c@u414e u415d@u4150 u415e@u4152 u415f@u4154 u4160@u4156) ((lambda (u4169@_exp* u416a@kwd* u416b@mod** u416c@rhs* u416d@lex* u416e@mr u416f@r u4170@e*) (begin (if (null? u4170@e*) (u3128@syntax-violation '#f '"no expression in body" u4170@e*) (void)) ((lambda (u4179@init*) ((lambda (u417b@rhs*) ((lambda () (u2dad@u2d1f@build-letrec* '#f (reverse u416d@lex*) (reverse u417b@rhs*) (u2daa@u2d19@build-sequence '#f u4179@init*))))) (u307a@chi-rhs* u416c@rhs* u416f@r u416e@mr))) (u3066@chi-expr* (append (apply append (reverse u416b@mod**)) u4170@e*) u416f@r u416e@mr)))) u4160@u4156 u415f@u4154 u415e@u4152 u415d@u4150 u415c@u414e u415b@u414c u415a@u414a u4159@u4148)))) (u2df7@make-empty-rib)))) (set! u3082@parse-module (lambda (u417d@e) ((lambda (u417f@t) ((lambda (u4181@ls/false) (if u4181@ls/false (apply (lambda (u4183@export* u4184@b*) (begin (if (not (for-all u2e43@id? u4183@export*)) (u3128@syntax-violation '#f '"module exports must be identifiers" u417d@e) (void)) (values '#f (list->vector u4183@export*) u4184@b*))) u4181@ls/false) ((lambda (u4187@t) ((lambda (u4189@ls/false) (if u4189@ls/false (apply (lambda (u418b@name u418c@export* u418d@b*) (begin (if (not (u2e43@id? u418b@name)) (u3128@syntax-violation '#f '"module name must be an identifier" u417d@e) (void)) (if (not (for-all u2e43@id? u418c@export*)) (u3128@syntax-violation '#f '"module exports must be identifiers" u417d@e) (void)) (values u418b@name (list->vector u418c@export*) u418d@b*))) u4189@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u4187@t))) (u3048@syntax-dispatch u4187@t '(_ any each-any . each-any)))) u417f@t))) (u3048@syntax-dispatch u417f@t '(_ each-any . each-any)))) u417d@e))) (set! u308c@module-interface? (lambda (u4191@x) (and (simple-struct? u4191@x) (eq? (simple-struct-name u4191@x) 'module-interface)))) (set! u308e@module-interface-first-mark (lambda (u4193@x) (simple-struct-ref u4193@x '0))) (set! u3090@set-module-interface-first-mark! (lambda (u4195@x u4196@val) (simple-struct-set! u4195@x '0 u4196@val))) (set! u3092@module-interface-exp-id-vec (lambda (u4199@x) (simple-struct-ref u4199@x '1))) (set! u3094@set-module-interface-exp-id-vec! (lambda (u419b@x u419c@val) (simple-struct-set! u419b@x '1 u419c@val))) (set! u3096@module-interface-exp-lab-vec (lambda (u419f@x) (simple-struct-ref u419f@x '2))) (set! u3098@set-module-interface-exp-lab-vec! (lambda (u41a1@x u41a2@val) (simple-struct-set! u41a1@x '2 u41a2@val))) (set! u309a@dummy '3) (set! u309c@module-interface-exp-id* (lambda (u41a5@iface u41a6@id) ((lambda (u41aa@diff-marks) (begin (set! u41aa@diff-marks (lambda (u41b1@ls u41b2@x) (begin (if (null? u41b1@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (u41b5@a) (if (eq? u41b5@a u41b2@x) '() (cons u41b5@a (u41aa@diff-marks (cdr u41b1@ls) u41b2@x)))) (car u41b1@ls))))) ((lambda (u41ab@diff u41ac@id-vec) (if (null? u41ab@diff) u41ac@id-vec (vector-map (lambda (u41af@x) (make-simple-struct 'stx '5 (list (u2e11@stx-expr u41af@x) (append u41ab@diff (u2e15@stx-mark* u41af@x)) '() '()))) u41ac@id-vec))) (u41aa@diff-marks (u2e15@stx-mark* u41a6@id) (u308e@module-interface-first-mark u41a5@iface)) (u3092@module-interface-exp-id-vec u41a5@iface)))) '#f))) (set! u309e@chi-internal-module (lambda (u41b7@e u41b8@r u41b9@mr u41ba@lex* u41bb@rhs* u41bc@mod** u41bd@kwd*) (call-with-values (lambda () (u3082@parse-module u41b7@e)) (lambda (u41cb@u41c6 u41cc@u41c8 u41cd@u41ca) ((lambda (u41d1@e* u41d2@exp-id* u41d3@name) ((lambda (u41d7@rib) ((lambda (u41d9@e*) ((lambda () (call-with-values (lambda () (u30a0@chi-body* u41d9@e* u41b8@r u41b9@mr u41ba@lex* u41bb@rhs* u41bc@mod** u41bd@kwd* '() u41d7@rib '#f)) (lambda (u41eb@u41dc u41ec@u41de u41ed@u41e0 u41ee@u41e2 u41ef@u41e4 u41f0@u41e6 u41f1@u41e8 u41f2@u41ea) ((lambda (u41fb@_exp* u41fc@kwd* u41fd@mod** u41fe@rhs* u41ff@lex* u4200@mr u4201@r u4202@e*) ((lambda (u420b@exp-lab* u420c@mod**) (if (not u41d3@name) (values u41ff@lex* u41fe@rhs* u41d2@exp-id* u420b@exp-lab* u4201@r u4200@mr u420c@mod** u41fc@kwd*) ((lambda (u420f@lab u4210@iface) (values u41ff@lex* u41fe@rhs* (vector u41d3@name) (vector u420f@lab) (cons (cons u420f@lab (cons '$module u4210@iface)) u4201@r) (cons (cons u420f@lab (cons '$module u4210@iface)) u4200@mr) u420c@mod** u41fc@kwd*)) (u2dcf@gen-label 'module) (make-simple-struct 'module-interface '4 (list (car (u2e15@stx-mark* u41d3@name)) (vector-map (lambda (u4213@x) (make-simple-struct 'stx '5 (list (u2e11@stx-expr u4213@x) (u2e15@stx-mark* u4213@x) '() '()))) u41d2@exp-id*) u420b@exp-lab*))))) (vector-map (lambda (u4215@x) (or (u2e59@id->label (make-simple-struct 'stx '5 (list (u2e45@id->sym u4215@x) (u2e15@stx-mark* u4215@x) (list u41d7@rib) '()))) (u3128@syntax-violation '#f '"cannot find module export" u4215@x))) u41d2@exp-id*) (cons u4202@e* u41fd@mod**))) u41f2@u41ea u41f1@u41e8 u41f0@u41e6 u41ef@u41e4 u41ee@u41e2 u41ed@u41e0 u41ec@u41de u41eb@u41dc)))))) (map (lambda (u4217@x) (u2e2f@add-subst u41d7@rib u4217@x)) (u2e41@syntax->list u41d1@e*)))) (u2df7@make-empty-rib))) u41cd@u41ca u41cc@u41c8 u41cb@u41c6))))) (set! u30a0@chi-body* (lambda (u4219@e* u421a@r u421b@mr u421c@lex* u421d@rhs* u421e@mod** u421f@kwd* u4220@exp* u4221@rib u4222@top?) (if (null? u4219@e*) (values u4219@e* u421a@r u421b@mr u421c@lex* u421d@rhs* u421e@mod** u421f@kwd* u4220@exp*) ((lambda (u422d@e) (call-with-values (lambda () (u2e65@syntax-type u422d@e u421a@r)) (lambda (u4235@u4230 u4236@u4232 u4237@u4234) ((lambda (u423b@kwd u423c@value u423d@type) ((lambda (u4241@kwd*) ((lambda (u4243@t) (if (memv u4243@t '(define)) (call-with-values (lambda () (u2fcc@parse-define u422d@e)) (lambda (u4249@u4246 u424a@u4248) ((lambda (u424d@rhs u424e@id) (begin (if (u2e4f@bound-id-member? u424e@id u4241@kwd*) (u3128@syntax-violation '#f '"cannot redefine keyword" u422d@e) (void)) (call-with-values (lambda () (u2dd3@gen-define-label+loc u424e@id u4221@rib)) (lambda (u4255@u4252 u4256@u4254) ((lambda (u4259@lex u425a@lab) (begin (u2df9@extend-rib! u4221@rib u424e@id u425a@lab) (u30a0@chi-body* (cdr u4219@e*) (u2fda@add-lexical u425a@lab u4259@lex u421a@r) u421b@mr (cons u4259@lex u421c@lex*) (cons u424d@rhs u421d@rhs*) u421e@mod** u4241@kwd* u4220@exp* u4221@rib u4222@top?))) u4256@u4254 u4255@u4252))))) u424a@u4248 u4249@u4246))) (if (memv u4243@t '(define-syntax)) (call-with-values (lambda () (u2fce@parse-define-syntax u422d@e)) (lambda (u4261@u425e u4262@u4260) ((lambda (u4265@rhs u4266@id) (begin (if (u2e4f@bound-id-member? u4266@id u4241@kwd*) (u3128@syntax-violation '#f '"cannot redefine keyword" u422d@e) (void)) ((lambda (u4269@lab u426a@expanded-rhs) (begin (u2df9@extend-rib! u4221@rib u4266@id u4269@lab) ((lambda (u426d@b) (u30a0@chi-body* (cdr u4219@e*) (cons (cons u4269@lab u426d@b) u421a@r) (cons (cons u4269@lab u426d@b) u421b@mr) u421c@lex* u421d@rhs* u421e@mod** u4241@kwd* u4220@exp* u4221@rib u4222@top?)) (u2e7b@make-eval-transformer u426a@expanded-rhs)))) (u2dd5@gen-define-label u4266@id u4221@rib) (u30a2@expand-transformer u4265@rhs u421b@mr)))) u4262@u4260 u4261@u425e))) (if (memv u4243@t '(let-syntax letrec-syntax)) ((lambda (u426f@t) ((lambda (u4271@ls/false) (if (and u4271@ls/false (apply (lambda (u4273@xlhs* u4274@xrhs* u4275@xbody*) (if (not (u2e4b@valid-bound-ids? u4273@xlhs*)) (u3128@syntax-violation '#f '"invalid identifiers" u422d@e) (void))) u4271@ls/false)) (apply (lambda (u4279@xlhs* u427a@xrhs* u427b@xbody*) ((lambda (u427f@xlab*) ((lambda (u4281@xrib) ((lambda (u4283@xb*) ((lambda () (u30a0@chi-body* (append (map (lambda (u4285@x) (u2e2f@add-subst u4281@xrib u4285@x)) u427b@xbody*) (cdr u4219@e*)) (append (map cons u427f@xlab* u4283@xb*) u421a@r) (append (map cons u427f@xlab* u4283@xb*) u421b@mr) u421c@lex* u421d@rhs* u421e@mod** u4241@kwd* u4220@exp* u4221@rib u4222@top?)))) (map (lambda (u4287@x) (u2e7b@make-eval-transformer (u30a2@expand-transformer (if (eq? u423d@type 'let-syntax) u4287@x (u2e2f@add-subst u4281@xrib u4287@x)) u421b@mr))) u427a@xrhs*))) (u2e03@make-full-rib u4279@xlhs* u427f@xlab*))) (map u2dcf@gen-label u4279@xlhs*))) u4271@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u426f@t))) (u3048@syntax-dispatch u426f@t '(_ #(each (any any)) . each-any)))) u422d@e) (if (memv u4243@t '(begin)) ((lambda (u4289@t) ((lambda (u428b@ls/false) (if u428b@ls/false (apply (lambda (u428d@x*) (u30a0@chi-body* (append u428d@x* (cdr u4219@e*)) u421a@r u421b@mr u421c@lex* u421d@rhs* u421e@mod** u4241@kwd* u4220@exp* u4221@rib u4222@top?)) u428b@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u4289@t))) (u3048@syntax-dispatch u4289@t '(_ . each-any)))) u422d@e) (if (memv u4243@t '(global-macro global-macro!)) (u30a0@chi-body* (cons (u2e2f@add-subst u4221@rib (u3064@chi-global-macro u423c@value u422d@e)) (cdr u4219@e*)) u421a@r u421b@mr u421c@lex* u421d@rhs* u421e@mod** u4241@kwd* u4220@exp* u4221@rib u4222@top?) (if (memv u4243@t '(local-macro local-macro!)) (u30a0@chi-body* (cons (u2e2f@add-subst u4221@rib (u3062@chi-local-macro u423c@value u422d@e)) (cdr u4219@e*)) u421a@r u421b@mr u421c@lex* u421d@rhs* u421e@mod** u4241@kwd* u4220@exp* u4221@rib u4222@top?) (if (memv u4243@t '(macro macro!)) (u30a0@chi-body* (cons (u2e2f@add-subst u4221@rib (u3060@chi-macro u423c@value u422d@e)) (cdr u4219@e*)) u421a@r u421b@mr u421c@lex* u421d@rhs* u421e@mod** u4241@kwd* u4220@exp* u4221@rib u4222@top?) (if (memv u4243@t '(module)) (call-with-values (lambda () (u309e@chi-internal-module u422d@e u421a@r u421b@mr u421c@lex* u421d@rhs* u421e@mod** u4241@kwd*)) (lambda (u429f@u4290 u42a0@u4292 u42a1@u4294 u42a2@u4296 u42a3@u4298 u42a4@u429a u42a5@u429c u42a6@u429e) ((lambda (u42af@kwd* u42b0@mod** u42b1@mr u42b2@r u42b3@m-exp-lab* u42b4@m-exp-id* u42b5@rhs* u42b6@lex*) (begin (vector-for-each (lambda (u42bf@id u42c0@lab) (u2df9@extend-rib! u4221@rib u42bf@id u42c0@lab)) u42b4@m-exp-id* u42b3@m-exp-lab*) (u30a0@chi-body* (cdr u4219@e*) u42b2@r u42b1@mr u42b6@lex* u42b5@rhs* u42b0@mod** u42af@kwd* u4220@exp* u4221@rib u4222@top?))) u42a6@u429e u42a5@u429c u42a4@u429a u42a3@u4298 u42a2@u4296 u42a1@u4294 u42a0@u4292 u429f@u4290))) (if (memv u4243@t '(library)) (begin (u310a@library-expander (u2e57@stx->datum u422d@e)) (u30a0@chi-body* (cdr u4219@e*) u421a@r u421b@mr u421c@lex* u421d@rhs* u421e@mod** u4241@kwd* u4220@exp* u4221@rib u4222@top?)) (if (memv u4243@t '(export)) ((lambda (u42c3@t) ((lambda (u42c5@ls/false) (if u42c5@ls/false (apply (lambda (u42c7@exp-decl*) (u30a0@chi-body* (cdr u4219@e*) u421a@r u421b@mr u421c@lex* u421d@rhs* u421e@mod** u4241@kwd* (append u42c7@exp-decl* u4220@exp*) u4221@rib u4222@top?)) u42c5@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u42c3@t))) (u3048@syntax-dispatch u42c3@t '(_ . each-any)))) u422d@e) (if (memv u4243@t '(import)) ((lambda () ((lambda (u42ca@module-import? u42cc@module-import u42ce@library-import) (begin (set! u42ca@module-import? (lambda (u431d@e) ((lambda (u431f@t) ((lambda (u4321@ls/false) (if (and u4321@ls/false (apply (lambda (u4323@id) (u2e43@id? u4323@id)) u4321@ls/false)) (apply (lambda (u4325@id) '#t) u4321@ls/false) ((lambda (u4327@t) ((lambda (u4329@ls/false) (if u4329@ls/false (apply (lambda (u432b@imp*) '#f) u4329@ls/false) ((lambda (u432d@t) ((lambda (u432f@ls/false) (if u432f@ls/false (apply (lambda () (u3128@syntax-violation '#f '"malformed import form" u431d@e)) u432f@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u432d@t))) (u3048@syntax-dispatch u432d@t '_))) u4327@t))) (u3048@syntax-dispatch u4327@t '(_ . each-any)))) u431f@t))) (u3048@syntax-dispatch u431f@t '(_ any)))) u431d@e))) (set! u42cc@module-import (lambda (u42fb@e u42fc@r) ((lambda (u42ff@t) ((lambda (u4301@ls/false) (if (and u4301@ls/false (apply (lambda (u4303@id) (u2e43@id? u4303@id)) u4301@ls/false)) (apply (lambda (u4305@id) (call-with-values (lambda () (u2e65@syntax-type u4305@id u42fc@r)) (lambda (u430d@u4308 u430e@u430a u430f@u430c) ((lambda (u4313@kwd u4314@value u4315@type) ((lambda (u4319@t) (if (memv u4319@t '($module)) ((lambda (u431b@iface) (values (u309c@module-interface-exp-id* u431b@iface u4305@id) (u3096@module-interface-exp-lab-vec u431b@iface))) u4314@value) (u3128@syntax-violation '#f '"invalid import" u42fb@e))) u4315@type)) u430f@u430c u430e@u430a u430d@u4308)))) u4301@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u42ff@t))) (u3048@syntax-dispatch u42ff@t '(_ any)))) u42fb@e))) (set! u42ce@library-import (lambda (u42df@e) ((lambda (u42e1@t) ((lambda (u42e3@ls/false) (if u42e3@ls/false (apply (lambda (u42e5@ctxt u42e6@imp*) (call-with-values (lambda () (u30aa@parse-import-spec* (u312e@syntax->datum u42e6@imp*))) (lambda (u42ed@u42ea u42ee@u42ec) ((lambda (u42f1@subst-labels u42f2@subst-names) (values (vector-map (lambda (u42f5@name) (u2e23@datum->stx u42e5@ctxt u42f5@name)) u42f2@subst-names) u42f1@subst-labels)) u42ee@u42ec u42ed@u42ea)))) u42e3@ls/false) ((lambda (u42f7@t) ((lambda (u42f9@ls/false) (if u42f9@ls/false (apply (lambda () (u3128@syntax-violation '#f '"invalid import form" u42df@e)) u42f9@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u42f7@t))) (u3048@syntax-dispatch u42f7@t '_))) u42e1@t))) (u3048@syntax-dispatch u42e1@t '(any . each-any)))) u42df@e))) (begin (call-with-values (lambda () (if (u42ca@module-import? u422d@e) (u42cc@module-import u422d@e u421a@r) (u42ce@library-import u422d@e))) (lambda (u42d3@u42d0 u42d4@u42d2) ((lambda (u42d7@lab* u42d8@id*) (vector-for-each (lambda (u42db@id u42dc@lab) (u2df9@extend-rib! u4221@rib u42db@id u42dc@lab)) u42d8@id* u42d7@lab*)) u42d4@u42d2 u42d3@u42d0))) (u30a0@chi-body* (cdr u4219@e*) u421a@r u421b@mr u421c@lex* u421d@rhs* u421e@mod** u4241@kwd* u4220@exp* u4221@rib u4222@top?)))) '#f '#f '#f))) (if u4222@top? (u30a0@chi-body* (cdr u4219@e*) u421a@r u421b@mr (cons (u2dcb@gen-lexical 'dummy) u421c@lex*) (cons (cons 'top-expr u422d@e) u421d@rhs*) u421e@mod** u4241@kwd* u4220@exp* u4221@rib u4222@top?) (values u4219@e* u421a@r u421b@mr u421c@lex* u421d@rhs* u421e@mod** u4241@kwd* u4220@exp*)))))))))))))) u423d@type)) (if (u2e43@id? u423b@kwd) (cons u423b@kwd u421f@kwd*) u421f@kwd*))) u4237@u4234 u4236@u4232 u4235@u4230)))) (car u4219@e*))))) (set! u30a2@expand-transformer (lambda (u4331@expr u4332@r) ((lambda (u4335@rtc) ((lambda (u4337@expanded-rhs) (begin (for-each ((lambda (u4339@mark-visit) (lambda (u433b@x) (begin (u2c6e@u2abc@invoke-library u433b@x) (u4339@mark-visit u433b@x)))) (u30b2@vis-collector)) (u4335@rtc)) u4337@expanded-rhs)) ((lambda (u4345@u433e u4346@u4340 u4347@u4342 u4348@u4344) ((lambda (u434d@swap) (dynamic-wind u434d@swap (lambda () (u306a@chi-expr u4331@expr u4332@r u4332@r)) u434d@swap)) (lambda () (begin ((lambda (u434f@t) (begin (u4345@u433e u4347@u4342) (set! u4347@u4342 u434f@t))) (u4345@u433e)) ((lambda (u4351@t) (begin (u4346@u4340 u4348@u4344) (set! u4348@u4344 u4351@t))) (u4346@u4340)))))) u30b0@inv-collector u30b2@vis-collector u4335@rtc (lambda (u4353@x) (values))))) (u30ae@make-collector)))) (set! u30a4@parse-exports (lambda (u4355@exp*) ((letrec ((u4357@f (lambda (u4359@exp* u435a@int* u435b@ext*) (if (null? u4359@exp*) (begin (if (not (u2e4b@valid-bound-ids? u435b@ext*)) (u3128@syntax-violation 'export '"invalid exports" (u307e@find-dups u435b@ext*)) (void)) (values (map u312e@syntax->datum u435b@ext*) u435a@int*)) ((lambda (u435f@t) ((lambda (u4361@ls/false) (if u4361@ls/false (apply (lambda (u4363@rename u4364@i* u4365@e*) (begin (if (not (and (eq? (u312e@syntax->datum u4363@rename) 'rename) (for-all u2e43@id? u4364@i*) (for-all u2e43@id? u4365@e*))) (u3128@syntax-violation 'export '"invalid export specifier" (car u4359@exp*)) (void)) (u4357@f (cdr u4359@exp*) (append u4364@i* u435a@int*) (append u4365@e* u435b@ext*)))) u4361@ls/false) ((lambda (u4369@t) ((lambda (u436b@ls/false) (if u436b@ls/false (apply (lambda (u436d@ie) (begin (if (not (u2e43@id? u436d@ie)) (u3128@syntax-violation 'export '"invalid export" u436d@ie) (void)) (u4357@f (cdr u4359@exp*) (cons u436d@ie u435a@int*) (cons u436d@ie u435b@ext*)))) u436b@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u4369@t))) (u3048@syntax-dispatch u4369@t 'any))) u435f@t))) (u3048@syntax-dispatch u435f@t '(any . #(each (any any)))))) (car u4359@exp*)))))) u4357@f) u4355@exp* '() '()))) (set! u30a6@parse-library-name (lambda (u436f@spec) ((lambda (u4372@parse) (begin (set! u4372@parse (lambda (u437f@x) ((lambda (u4381@t) ((lambda (u4383@ls/false) (if (and u4383@ls/false (apply (lambda (u4385@v*) (for-all (lambda (u4387@x) ((lambda (u4389@x) (and (integer? u4389@x) (exact? u4389@x))) (u312e@syntax->datum u4387@x))) u4385@v*)) u4383@ls/false)) (apply (lambda (u438b@v*) (values '() (map u312e@syntax->datum u438b@v*))) u4383@ls/false) ((lambda (u438d@t) ((lambda (u438f@ls/false) (if (and u438f@ls/false (apply (lambda (u4391@x u4392@rest) (symbol? (u312e@syntax->datum u4391@x))) u438f@ls/false)) (apply (lambda (u4395@x u4396@rest) (call-with-values (lambda () (u4372@parse u4396@rest)) (lambda (u439d@u439a u439e@u439c) ((lambda (u43a1@v* u43a2@x*) (values (cons (u312e@syntax->datum u4395@x) u43a2@x*) u43a1@v*)) u439e@u439c u439d@u439a)))) u438f@ls/false) ((lambda (u43a5@t) ((lambda (u43a7@ls/false) (if u43a7@ls/false (apply (lambda () (values '() '())) u43a7@ls/false) ((lambda (u43a9@t) ((lambda (u43ab@ls/false) (if u43ab@ls/false (apply (lambda () (u3128@syntax-violation '#f '"invalid library name" u436f@spec)) u43ab@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u43a9@t))) (u3048@syntax-dispatch u43a9@t '_))) u43a5@t))) (u3048@syntax-dispatch u43a5@t '()))) u438d@t))) (u3048@syntax-dispatch u438d@t '(any . any)))) u4381@t))) (u3048@syntax-dispatch u4381@t '(each-any)))) u437f@x))) (call-with-values (lambda () (u4372@parse u436f@spec)) (lambda (u4377@u4374 u4378@u4376) ((lambda (u437b@ver* u437c@name*) (begin (if (null? u437c@name*) (u3128@syntax-violation '#f '"empty library name" u436f@spec) (void)) (values u437c@name* u437b@ver*))) u4378@u4376 u4377@u4374))))) '#f))) (set! u30a8@parse-library (lambda (u43ad@e) ((lambda (u43af@t) ((lambda (u43b1@ls/false) (if (and u43b1@ls/false (apply (lambda (u43b3@library u43b4@name* u43b5@export u43b6@exp* u43b7@import u43b8@imp* u43b9@b*) (and (eq? (u312e@syntax->datum u43b5@export) 'export) (eq? (u312e@syntax->datum u43b7@import) 'import) (eq? (u312e@syntax->datum u43b3@library) 'library))) u43b1@ls/false)) (apply (lambda (u43c1@library u43c2@name* u43c3@export u43c4@exp* u43c5@import u43c6@imp* u43c7@b*) (values u43c2@name* u43c4@exp* u43c6@imp* u43c7@b*)) u43b1@ls/false) ((lambda (u43cf@t) ((lambda (u43d1@ls/false) (if u43d1@ls/false (apply (lambda () (u3128@syntax-violation '#f '"malformed library" u43ad@e)) u43d1@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u43cf@t))) (u3048@syntax-dispatch u43cf@t '_))) u43af@t))) (u3048@syntax-dispatch u43af@t '(any each-any (any . each-any) (any . each-any) . each-any)))) u43ad@e))) (set! u30aa@parse-import-spec* ((lambda () ((lambda (u43d4@idsyn? u43d6@dup-error u43d8@merge-substs u43da@exclude* u43dc@find* u43de@rem* u43e0@remove-dups u43e2@parse-library-name u43e4@import-library u43e6@get-import u43e8@add-imports!) (begin (set! u43d4@idsyn? (lambda (u45dd@x) (symbol? (u312e@syntax->datum u45dd@x)))) (set! u43d6@dup-error (lambda (u45db@name) (u3128@syntax-violation 'import '"two imports with different bindings" u45db@name))) (set! u43d8@merge-substs (lambda (u45c9@s u45ca@subst) ((lambda (u45ce@insert-to-subst) (begin (set! u45ce@insert-to-subst (lambda (u45cf@a u45d0@subst) ((lambda (u45d3@name u45d4@label) ((lambda (u45d7@t) (if u45d7@t ((lambda (u45d9@x) (if (eq? (cdr u45d9@x) u45d4@label) u45d0@subst (u43d6@dup-error u45d3@name))) u45d7@t) (cons u45cf@a u45d0@subst))) (assq u45d3@name u45d0@subst))) (car u45cf@a) (cdr u45cf@a)))) (if (null? u45c9@s) u45ca@subst (u45ce@insert-to-subst (car u45c9@s) (u43d8@merge-substs (cdr u45c9@s) u45ca@subst))))) '#f))) (set! u43da@exclude* (lambda (u4599@sym* u459a@subst) ((lambda (u459e@exclude) (begin (set! u459e@exclude (lambda (u45b7@sym u45b8@subst) (if (null? u45b8@subst) (u3128@syntax-violation 'import '"cannot rename unbound identifier" u45b7@sym) (if (eq? u45b7@sym (caar u45b8@subst)) (values (cdar u45b8@subst) (cdr u45b8@subst)) ((lambda (u45bb@a) (call-with-values (lambda () (u459e@exclude u45b7@sym (cdr u45b8@subst))) (lambda (u45c1@u45be u45c2@u45c0) ((lambda (u45c5@subst u45c6@old) (values u45c6@old (cons u45bb@a u45c5@subst))) u45c2@u45c0 u45c1@u45be)))) (car u45b8@subst)))))) (if (null? u4599@sym*) (values '() u459a@subst) (call-with-values (lambda () (u459e@exclude (car u4599@sym*) u459a@subst)) (lambda (u45a3@u45a0 u45a4@u45a2) ((lambda (u45a7@subst u45a8@old) (call-with-values (lambda () (u43da@exclude* (cdr u4599@sym*) u45a7@subst)) (lambda (u45af@u45ac u45b0@u45ae) ((lambda (u45b3@subst u45b4@old*) (values (cons u45a8@old u45b4@old*) u45b3@subst)) u45b0@u45ae u45af@u45ac)))) u45a4@u45a2 u45a3@u45a0)))))) '#f))) (set! u43dc@find* (lambda (u4591@sym* u4592@subst) (map (lambda (u4595@x) ((lambda (u4597@t) (if u4597@t (cdr u4597@t) (u3128@syntax-violation 'import '"cannot find identifier" u4595@x))) (assq u4595@x u4592@subst))) u4591@sym*))) (set! u43de@rem* (lambda (u4589@sym* u458a@subst) ((letrec ((u458d@f (lambda (u458f@subst) (if (null? u458f@subst) '() (if (memq (caar u458f@subst) u4589@sym*) (u458d@f (cdr u458f@subst)) (cons (car u458f@subst) (u458d@f (cdr u458f@subst)))))))) u458d@f) u458a@subst))) (set! u43e0@remove-dups (lambda (u4587@ls) (if (null? u4587@ls) '() (if (memq (car u4587@ls) (cdr u4587@ls)) (u43e0@remove-dups (cdr u4587@ls)) (cons (car u4587@ls) (u43e0@remove-dups (cdr u4587@ls))))))) (set! u43e2@parse-library-name (lambda (u449f@spec) ((lambda (u44a2@subversion? u44a4@subversion-pred u44a6@version-pred) (begin (set! u44a2@subversion? (lambda (u4583@x) ((lambda (u4585@x) (and (integer? u4585@x) (exact? u4585@x) (>= u4585@x '0))) (u312e@syntax->datum u4583@x)))) (set! u44a4@subversion-pred (lambda (u4523@x*) ((lambda (u4525@t) ((lambda (u4527@ls/false) (if (and u4527@ls/false (apply (lambda (u4529@n) (u44a2@subversion? u4529@n)) u4527@ls/false)) (apply (lambda (u452b@n) (lambda (u452d@x) (= u452d@x (u312e@syntax->datum u452b@n)))) u4527@ls/false) ((lambda (u452f@t) ((lambda (u4531@ls/false) (if (and u4531@ls/false (apply (lambda (u4533@p? u4534@sub*) (eq? (u312e@syntax->datum u4533@p?) 'and)) u4531@ls/false)) (apply (lambda (u4537@p? u4538@sub*) ((lambda (u453b@p*) (lambda (u453d@x) (for-all (lambda (u453f@p) (u453f@p u453d@x)) u453b@p*))) (map u44a4@subversion-pred u4538@sub*))) u4531@ls/false) ((lambda (u4541@t) ((lambda (u4543@ls/false) (if (and u4543@ls/false (apply (lambda (u4545@p? u4546@sub*) (eq? (u312e@syntax->datum u4545@p?) 'or)) u4543@ls/false)) (apply (lambda (u4549@p? u454a@sub*) ((lambda (u454d@p*) (lambda (u454f@x) (exists (lambda (u4551@p) (u4551@p u454f@x)) u454d@p*))) (map u44a4@subversion-pred u454a@sub*))) u4543@ls/false) ((lambda (u4553@t) ((lambda (u4555@ls/false) (if (and u4555@ls/false (apply (lambda (u4557@p? u4558@sub) (eq? (u312e@syntax->datum u4557@p?) 'not)) u4555@ls/false)) (apply (lambda (u455b@p? u455c@sub) ((lambda (u455f@p) (lambda (u4561@x) (not (u455f@p u4561@x)))) (u44a4@subversion-pred u455c@sub))) u4555@ls/false) ((lambda (u4563@t) ((lambda (u4565@ls/false) (if (and u4565@ls/false (apply (lambda (u4567@p? u4568@n) (and (eq? (u312e@syntax->datum u4567@p?) '<=) (u44a2@subversion? u4568@n))) u4565@ls/false)) (apply (lambda (u456b@p? u456c@n) (lambda (u456f@x) (<= u456f@x (u312e@syntax->datum u456c@n)))) u4565@ls/false) ((lambda (u4571@t) ((lambda (u4573@ls/false) (if (and u4573@ls/false (apply (lambda (u4575@p? u4576@n) (and (eq? (u312e@syntax->datum u4575@p?) '>=) (u44a2@subversion? u4576@n))) u4573@ls/false)) (apply (lambda (u4579@p? u457a@n) (lambda (u457d@x) (>= u457d@x (u312e@syntax->datum u457a@n)))) u4573@ls/false) ((lambda (u457f@t) ((lambda (u4581@ls/false) (if u4581@ls/false (apply (lambda () (u3128@syntax-violation 'import '"invalid sub-version spec" u449f@spec u4523@x*)) u4581@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u457f@t))) (u3048@syntax-dispatch u457f@t '_))) u4571@t))) (u3048@syntax-dispatch u4571@t '(any any)))) u4563@t))) (u3048@syntax-dispatch u4563@t '(any any)))) u4553@t))) (u3048@syntax-dispatch u4553@t '(any any)))) u4541@t))) (u3048@syntax-dispatch u4541@t '(any . each-any)))) u452f@t))) (u3048@syntax-dispatch u452f@t '(any . each-any)))) u4525@t))) (u3048@syntax-dispatch u4525@t 'any))) u4523@x*))) (set! u44a6@version-pred (lambda (u44d3@x*) ((lambda (u44d5@t) ((lambda (u44d7@ls/false) (if u44d7@ls/false (apply (lambda () (lambda (u44d9@x) '#t)) u44d7@ls/false) ((lambda (u44db@t) ((lambda (u44dd@ls/false) (if (and u44dd@ls/false (apply (lambda (u44df@c u44e0@ver*) (eq? (u312e@syntax->datum u44df@c) 'and)) u44dd@ls/false)) (apply (lambda (u44e3@c u44e4@ver*) ((lambda (u44e7@p*) (lambda (u44e9@x) (for-all (lambda (u44eb@p) (u44eb@p u44e9@x)) u44e7@p*))) (map u44a6@version-pred u44e4@ver*))) u44dd@ls/false) ((lambda (u44ed@t) ((lambda (u44ef@ls/false) (if (and u44ef@ls/false (apply (lambda (u44f1@c u44f2@ver*) (eq? (u312e@syntax->datum u44f1@c) 'or)) u44ef@ls/false)) (apply (lambda (u44f5@c u44f6@ver*) ((lambda (u44f9@p*) (lambda (u44fb@x) (exists (lambda (u44fd@p) (u44fd@p u44fb@x)) u44f9@p*))) (map u44a6@version-pred u44f6@ver*))) u44ef@ls/false) ((lambda (u44ff@t) ((lambda (u4501@ls/false) (if (and u4501@ls/false (apply (lambda (u4503@c u4504@ver) (eq? (u312e@syntax->datum u4503@c) 'not)) u4501@ls/false)) (apply (lambda (u4507@c u4508@ver) ((lambda (u450b@p) (lambda (u450d@x) (not (u450b@p u450d@x)))) (u44a6@version-pred u4508@ver))) u4501@ls/false) ((lambda (u450f@t) ((lambda (u4511@ls/false) (if u4511@ls/false (apply (lambda (u4513@sub*) ((lambda (u4515@p*) (lambda (u4517@x) ((letrec ((u4519@f (lambda (u451b@p* u451c@x) (if (null? u451b@p*) '#t (if (null? u451c@x) '#f (and ((car u451b@p*) (car u451c@x)) (u4519@f (cdr u451b@p*) (cdr u451c@x)))))))) u4519@f) u4515@p* u4517@x))) (map u44a4@subversion-pred u4513@sub*))) u4511@ls/false) ((lambda (u451f@t) ((lambda (u4521@ls/false) (if u4521@ls/false (apply (lambda () (u3128@syntax-violation 'import '"invalid version spec" u449f@spec u44d3@x*)) u4521@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u451f@t))) (u3048@syntax-dispatch u451f@t '_))) u450f@t))) (u3048@syntax-dispatch u450f@t 'each-any))) u44ff@t))) (u3048@syntax-dispatch u44ff@t '(any any)))) u44ed@t))) (u3048@syntax-dispatch u44ed@t '(any . each-any)))) u44db@t))) (u3048@syntax-dispatch u44db@t '(any . each-any)))) u44d5@t))) (u3048@syntax-dispatch u44d5@t '()))) u44d3@x*))) ((letrec ((u44a7@f (lambda (u44a9@x) ((lambda (u44ab@t) ((lambda (u44ad@ls/false) (if u44ad@ls/false (apply (lambda (u44af@version-spec*) (values '() (u44a6@version-pred u44af@version-spec*))) u44ad@ls/false) ((lambda (u44b1@t) ((lambda (u44b3@ls/false) (if (and u44b3@ls/false (apply (lambda (u44b5@x u44b6@x*) (u43d4@idsyn? u44b5@x)) u44b3@ls/false)) (apply (lambda (u44b9@x u44ba@x*) (call-with-values (lambda () (u44a7@f u44ba@x*)) (lambda (u44c1@u44be u44c2@u44c0) ((lambda (u44c5@pred u44c6@name) (values (cons (u312e@syntax->datum u44b9@x) u44c6@name) u44c5@pred)) u44c2@u44c0 u44c1@u44be)))) u44b3@ls/false) ((lambda (u44c9@t) ((lambda (u44cb@ls/false) (if u44cb@ls/false (apply (lambda () (values '() (lambda (u44cd@x) '#t))) u44cb@ls/false) ((lambda (u44cf@t) ((lambda (u44d1@ls/false) (if u44d1@ls/false (apply (lambda () (u3128@syntax-violation '#f '"invalid import spec" u449f@spec)) u44d1@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u44cf@t))) (u3048@syntax-dispatch u44cf@t '_))) u44c9@t))) (u3048@syntax-dispatch u44c9@t '()))) u44b1@t))) (u3048@syntax-dispatch u44b1@t '(any . any)))) u44ab@t))) (u3048@syntax-dispatch u44ab@t '(each-any)))) u44a9@x)))) u44a7@f) u449f@spec))) '#f '#f '#f))) (set! u43e4@import-library (lambda (u448f@spec*) (call-with-values (lambda () (u43e2@parse-library-name u448f@spec*)) (lambda (u4495@u4492 u4496@u4494) ((lambda (u4499@pred u449a@name) (begin (if (null? u449a@name) (u3128@syntax-violation 'import '"empty library name" u448f@spec*) (void)) ((lambda (u449d@lib) (begin (if (not u449d@lib) (u3128@syntax-violation 'import '"cannot find library with required name" u449a@name) (void)) (if (not (u4499@pred (u2c41@u2a62@library-version u449d@lib))) (u3128@syntax-violation 'import '"library does not satisfy version specification" u448f@spec* u449d@lib) (void)) ((u30b4@imp-collector) u449d@lib) (u2c49@u2a72@library-subst u449d@lib))) (u2c67@u2aae@find-library-by-name u449a@name)))) u4496@u4494 u4495@u4492))))) (set! u43e6@get-import (lambda (u4401@spec) ((lambda (u4403@t) ((lambda (u4405@ls/false) (if (and u4405@ls/false (apply (lambda (u4407@x u4408@x*) (not (memq (u312e@syntax->datum u4407@x) '(for rename except only prefix library)))) u4405@ls/false)) (apply (lambda (u440b@x u440c@x*) (u43e4@import-library (cons u440b@x u440c@x*))) u4405@ls/false) ((lambda (u440f@t) ((lambda (u4411@ls/false) (if (and u4411@ls/false (apply (lambda (u4413@rename u4414@isp u4415@old* u4416@new*) (and (eq? (u312e@syntax->datum u4413@rename) 'rename) (for-all u43d4@idsyn? u4415@old*) (for-all u43d4@idsyn? u4416@new*))) u4411@ls/false)) (apply (lambda (u441b@rename u441c@isp u441d@old* u441e@new*) ((lambda (u4423@subst u4424@old* u4425@new*) ((lambda (u4429@old-label*) ((lambda (u442b@subst) (u43d8@merge-substs (map cons u4425@new* u4429@old-label*) u442b@subst)) (u43de@rem* u4424@old* u4423@subst))) (u43dc@find* u4424@old* u4423@subst))) (u43e6@get-import u441c@isp) (map u312e@syntax->datum u441d@old*) (map u312e@syntax->datum u441e@new*))) u4411@ls/false) ((lambda (u442d@t) ((lambda (u442f@ls/false) (if (and u442f@ls/false (apply (lambda (u4431@except u4432@isp u4433@sym*) (and (eq? (u312e@syntax->datum u4431@except) 'except) (for-all u43d4@idsyn? u4433@sym*))) u442f@ls/false)) (apply (lambda (u4437@except u4438@isp u4439@sym*) ((lambda (u443d@subst) (u43de@rem* (map u312e@syntax->datum u4439@sym*) u443d@subst)) (u43e6@get-import u4438@isp))) u442f@ls/false) ((lambda (u443f@t) ((lambda (u4441@ls/false) (if (and u4441@ls/false (apply (lambda (u4443@only u4444@isp u4445@sym*) (and (eq? (u312e@syntax->datum u4443@only) 'only) (for-all u43d4@idsyn? u4445@sym*))) u4441@ls/false)) (apply (lambda (u4449@only u444a@isp u444b@sym*) ((lambda (u444f@subst u4450@sym*) ((lambda (u4453@sym*) ((lambda (u4455@lab*) (map cons u4453@sym* u4455@lab*)) (u43dc@find* u4453@sym* u444f@subst))) (u43e0@remove-dups u4450@sym*))) (u43e6@get-import u444a@isp) (map u312e@syntax->datum u444b@sym*))) u4441@ls/false) ((lambda (u4457@t) ((lambda (u4459@ls/false) (if (and u4459@ls/false (apply (lambda (u445b@prefix u445c@isp u445d@p) (and (eq? (u312e@syntax->datum u445b@prefix) 'prefix) (u43d4@idsyn? u445d@p))) u4459@ls/false)) (apply (lambda (u4461@prefix u4462@isp u4463@p) ((lambda (u4467@subst u4468@prefix) (map (lambda (u446b@x) (cons (string->symbol (string-append u4468@prefix (symbol->string (car u446b@x)))) (cdr u446b@x))) u4467@subst)) (u43e6@get-import u4462@isp) (symbol->string (u312e@syntax->datum u4463@p)))) u4459@ls/false) ((lambda (u446d@t) ((lambda (u446f@ls/false) (if (and u446f@ls/false (apply (lambda (u4471@library u4472@spec*) (eq? (u312e@syntax->datum u4471@library) 'library)) u446f@ls/false)) (apply (lambda (u4475@library u4476@spec*) (u43e4@import-library u4476@spec*)) u446f@ls/false) ((lambda (u4479@t) ((lambda (u447b@ls/false) (if (and u447b@ls/false (apply (lambda (u447d@for u447e@isp u447f@rest) (eq? (u312e@syntax->datum u447d@for) 'for)) u447b@ls/false)) (apply (lambda (u4483@for u4484@isp u4485@rest) (u43e6@get-import u4484@isp)) u447b@ls/false) ((lambda (u4489@t) ((lambda (u448b@ls/false) (if u448b@ls/false (apply (lambda (u448d@spec) (u3128@syntax-violation 'import '"invalid import spec" u448d@spec)) u448b@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u4489@t))) (u3048@syntax-dispatch u4489@t 'any))) u4479@t))) (u3048@syntax-dispatch u4479@t '(any any . any)))) u446d@t))) (u3048@syntax-dispatch u446d@t '(any each-any)))) u4457@t))) (u3048@syntax-dispatch u4457@t '(any any any)))) u443f@t))) (u3048@syntax-dispatch u443f@t '(any any . each-any)))) u442d@t))) (u3048@syntax-dispatch u442d@t '(any any . each-any)))) u440f@t))) (u3048@syntax-dispatch u440f@t '(any any . #(each (any any)))))) u4403@t))) (u3048@syntax-dispatch u4403@t '(any . each-any)))) u4401@spec))) (set! u43e8@add-imports! (lambda (u43f1@imp u43f2@h) ((lambda (u43f5@subst) (for-each (lambda (u43f7@x) ((lambda (u43f9@name u43fa@label) ((lambda (u43fd@t) (if u43fd@t ((lambda (u43ff@l) (if (not (eq? u43ff@l u43fa@label)) (u43d6@dup-error u43f9@name) (void))) u43fd@t) (hashtable-set! u43f2@h u43f9@name u43fa@label))) (hashtable-ref u43f2@h u43f9@name '#f))) (car u43f7@x) (cdr u43f7@x))) u43f5@subst)) (u43e6@get-import u43f1@imp)))) (lambda (u43e9@imp*) ((letrec ((u43eb@f (lambda (u43ed@imp* u43ee@h) (if (null? u43ed@imp*) (hashtable-entries u43ee@h) (begin (u43e8@add-imports! (car u43ed@imp*) u43ee@h) (u43eb@f (cdr u43ed@imp*) u43ee@h)))))) u43eb@f) u43e9@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! u30ac@make-top-rib (lambda (u45df@names u45e0@labels) ((lambda (u45e3@rib) (begin (vector-for-each (lambda (u45e5@name u45e6@label) (begin (if (not (symbol? u45e5@name)) (error 'make-top-rib '"BUG: not a symbol" u45e5@name) (void)) (u2dfb@extend-rib/nc! u45e3@rib (make-simple-struct 'stx '5 (list u45e5@name u2dc7@top-mark* '() '())) u45e6@label))) u45df@names u45e0@labels) u45e3@rib)) (u2df7@make-empty-rib)))) (set! u30ae@make-collector (lambda () ((lambda (u45e9@ls) (lambda u45ed ((lambda (u45ee) (if (= u45ee '0) (apply (lambda () u45e9@ls) u45ed) (if (= u45ee '1) (apply (lambda (u45eb@x) (set! u45e9@ls (u2dc0@set-cons u45eb@x u45e9@ls))) u45ed) (error 'apply '"invalid arg count")))) (length u45ed)))) '()))) (set! u30b0@inv-collector (u29a2@u2881@make-parameter (lambda u45ef@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (u45f1@x) (begin (if (not (procedure? u45f1@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" u45f1@x) (void)) u45f1@x)))) (set! u30b2@vis-collector (u29a2@u2881@make-parameter (lambda u45f3@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (u45f5@x) (begin (if (not (procedure? u45f5@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" u45f5@x) (void)) u45f5@x)))) (set! u30b4@imp-collector (u29a2@u2881@make-parameter (lambda u45f7@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (u45f9@x) (begin (if (not (procedure? u45f9@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" u45f9@x) (void)) u45f9@x)))) (set! u30b6@chi-library-internal (lambda (u45fb@e* u45fc@rib u45fd@top?) (call-with-values (lambda () (u30a0@chi-body* u45fb@e* '() '() '() '() '() '() '() u45fc@rib u45fd@top?)) (lambda (u4611@u4602 u4612@u4604 u4613@u4606 u4614@u4608 u4615@u460a u4616@u460c u4617@u460e u4618@u4610) ((lambda (u4621@exp* u4622@_kwd* u4623@mod** u4624@rhs* u4625@lex* u4626@mr u4627@r u4628@e*) (values (append (apply append (reverse u4623@mod**)) u4628@e*) u4627@r u4626@mr (reverse u4625@lex*) (reverse u4624@rhs*) u4621@exp*)) u4618@u4610 u4617@u460e u4616@u460c u4615@u460a u4614@u4608 u4613@u4606 u4612@u4604 u4611@u4602))))) (set! u30b8@chi-interaction-expr (lambda (u4631@e u4632@rib u4633@r) (call-with-values (lambda () (u30a0@chi-body* (list u4631@e) u4633@r u4633@r '() '() '() '() '() u4632@rib '#t)) (lambda (u4647@u4638 u4648@u463a u4649@u463c u464a@u463e u464b@u4640 u464c@u4642 u464d@u4644 u464e@u4646) ((lambda (u4657@_exp* u4658@_kwd* u4659@mod** u465a@rhs* u465b@lex* u465c@mr u465d@r u465e@e*) ((lambda (u4667@e*) ((lambda (u4669@e) (values u4669@e u465d@r)) (if (null? u4667@e*) (u2dab@u2d1b@build-void) (if (null? (cdr u4667@e*)) (car u4667@e*) (u2daa@u2d19@build-sequence '#f u4667@e*))))) (u3078@expand-interaction-rhs*/init* (reverse u465b@lex*) (reverse u465a@rhs*) (append (apply append (reverse u4659@mod**)) u465e@e*) u465d@r u465c@mr))) u464e@u4646 u464d@u4644 u464c@u4642 u464b@u4640 u464a@u463e u4649@u463c u4648@u463a u4647@u4638))))) (set! u30ba@library-body-expander (lambda (u466b@name u466c@main-exp* u466d@imp* u466e@b* u466f@top?) ((lambda (u4676@itc) (begin (set! u4676@itc (u30ae@make-collector)) ((lambda (u467f@u4678 u4680@u467a u4681@u467c u4682@u467e) ((lambda (u4687@swap) (dynamic-wind u4687@swap (lambda () (call-with-values (lambda () (u30aa@parse-import-spec* u466d@imp*)) (lambda (u468d@u468a u468e@u468c) ((lambda (u4691@subst-labels u4692@subst-names) ((lambda (u4695@rib) ((lambda (u4698@wrap) (begin (set! u4698@wrap (lambda (u4713@x) (make-simple-struct 'stx '5 (list u4713@x u2dc7@top-mark* (list u4695@rib) '())))) ((lambda (u4699@b* u469a@main-exp* u469b@rtc u469c@vtc) ((lambda (u46a9@u46a2 u46aa@u46a4 u46ab@u46a6 u46ac@u46a8) ((lambda (u46b1@swap) (dynamic-wind u46b1@swap (lambda () (call-with-values (lambda () (u30b6@chi-library-internal u4699@b* u4695@rib u466f@top?)) (lambda (u46bf@u46b4 u46c0@u46b6 u46c1@u46b8 u46c2@u46ba u46c3@u46bc u46c4@u46be) ((lambda (u46cb@internal-exp* u46cc@rhs* u46cd@lex* u46ce@mr u46cf@r u46d0@init*) (call-with-values (lambda () (u30a4@parse-exports (append u469a@main-exp* u46cb@internal-exp*))) (lambda (u46db@u46d8 u46dc@u46da) ((lambda (u46df@exp-id* u46e0@exp-name*) (begin (u2dff@seal-rib! u4695@rib) ((lambda (u46e3@init*) ((lambda (u46e5@rhs*) ((lambda () (begin (u2e01@unseal-rib! u4695@rib) ((lambda (u46e7@loc* u46e8@export-subst) ((lambda (u46ec@errstr) (begin (set! u46ec@errstr '"attempt to export mutated variable") (call-with-values (lambda () (u3114@make-export-env/macros u46cd@lex* u46e7@loc* u46cf@r)) (lambda (u46f3@u46ee u46f4@u46f0 u46f5@u46f2) ((lambda (u46f9@macro* u46fa@global* u46fb@export-env) (begin (for-each (lambda (u46ff@s) ((lambda (u4701@name u4702@label) ((lambda (u4705@p) (if u4705@p ((lambda (u4707@b) ((lambda (u4709@type) (if (eq? u4709@type 'mutable) (u3128@syntax-violation 'export u46ec@errstr u4701@name) (void))) (car u4707@b))) (cdr u4705@p)) (void))) (assq u4702@label u46fb@export-env))) (car u46ff@s) (cdr u46ff@s))) u46e8@export-subst) ((lambda (u470b@invoke-body u470c@invoke-definitions) (values (u4676@itc) (u469b@rtc) (u469c@vtc) (u2daa@u2d19@build-sequence '#f (append u470c@invoke-definitions (list u470b@invoke-body))) u46f9@macro* u46e8@export-subst u46fb@export-env)) (u2dad@u2d1f@build-letrec* '#f u46cd@lex* u46e5@rhs* (u3110@build-exports u46fa@global* u46e3@init*)) (map u2da6@u2c76@build-global-define (map cdr u46fa@global*))))) u46f5@u46f2 u46f4@u46f0 u46f3@u46ee))))) '#f)) (map u2dcd@gen-global u46cd@lex*) (u3112@make-export-subst u46e0@exp-name* u46df@exp-id*)))))) (u307a@chi-rhs* u46cc@rhs* u46cf@r u46ce@mr))) (u3066@chi-expr* u46d0@init* u46cf@r u46ce@mr)))) u46dc@u46da u46db@u46d8)))) u46c4@u46be u46c3@u46bc u46c2@u46ba u46c1@u46b8 u46c0@u46b6 u46bf@u46b4)))) u46b1@swap)) (lambda () (begin ((lambda (u470f@t) (begin (u46a9@u46a2 u46ab@u46a6) (set! u46ab@u46a6 u470f@t))) (u46a9@u46a2)) ((lambda (u4711@t) (begin (u46aa@u46a4 u46ac@u46a8) (set! u46ac@u46a8 u4711@t))) (u46aa@u46a4)))))) u30b0@inv-collector u30b2@vis-collector u469b@rtc u469c@vtc)) (map u4698@wrap u466e@b*) (map u4698@wrap u466c@main-exp*) (u30ae@make-collector) (u30ae@make-collector)))) '#f)) (u30ac@make-top-rib u4692@subst-names u4691@subst-labels))) u468e@u468c u468d@u468a)))) u4687@swap)) (lambda () (begin ((lambda (u4715@t) (begin (u467f@u4678 u4681@u467c) (set! u4681@u467c u4715@t))) (u467f@u4678)) ((lambda (u4717@t) (begin (u4680@u467a u4682@u467e) (set! u4682@u467e u4717@t))) (u4680@u467a)))))) u30b4@imp-collector u3136@top-level-context u4676@itc '#f))) '#f))) (set! u30bc@core-library-expander (lambda (u4719@e u471a@verify-name) (call-with-values (lambda () (u30a8@parse-library u4719@e)) (lambda (u4725@u471e u4726@u4720 u4727@u4722 u4728@u4724) ((lambda (u472d@b* u472e@imp* u472f@exp* u4730@name*) (call-with-values (lambda () (u30a6@parse-library-name u4730@name*)) (lambda (u4739@u4736 u473a@u4738) ((lambda (u473d@ver u473e@name) (begin (u471a@verify-name u473e@name) (call-with-values (lambda () (u30ba@library-body-expander u473e@name u472f@exp* u472e@imp* u472d@b* '#f)) (lambda (u474f@u4742 u4750@u4744 u4751@u4746 u4752@u4748 u4753@u474a u4754@u474c u4755@u474e) ((lambda (u475d@export-env u475e@export-subst u475f@visit-code u4760@invoke-code u4761@visit-req* u4762@invoke-req* u4763@imp*) (values u473e@name u473d@ver u4763@imp* u4762@invoke-req* u4761@visit-req* u4760@invoke-code u475f@visit-code u475e@export-subst u475d@export-env)) u4755@u474e u4754@u474c u4753@u474a u4752@u4748 u4751@u4746 u4750@u4744 u474f@u4742))))) u473a@u4738 u4739@u4736)))) u4728@u4724 u4727@u4722 u4726@u4720 u4725@u471e))))) (set! u30be@parse-top-level-program (lambda (u476b@e*) ((lambda (u476d@t) ((lambda (u476f@ls/false) (if (and u476f@ls/false (apply (lambda (u4771@import u4772@imp* u4773@b*) (eq? (u312e@syntax->datum u4771@import) 'import)) u476f@ls/false)) (apply (lambda (u4777@import u4778@imp* u4779@b*) (values u4778@imp* u4779@b*)) u476f@ls/false) ((lambda (u477d@t) ((lambda (u477f@ls/false) (if (and u477f@ls/false (apply (lambda (u4781@import u4782@x u4783@y) (eq? (u312e@syntax->datum u4781@import) 'import)) u477f@ls/false)) (apply (lambda (u4787@import u4788@x u4789@y) (u3128@syntax-violation 'expander '"invalid syntax of top-level program" (u2e3d@syntax-car u476b@e*))) u477f@ls/false) ((lambda (u478d@t) ((lambda (u478f@ls/false) (if u478f@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) u478f@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u478d@t))) (u3048@syntax-dispatch u478d@t '_))) u477d@t))) (u3048@syntax-dispatch u477d@t '((any . any) . any)))) u476d@t))) (u3048@syntax-dispatch u476d@t '((any . each-any) . each-any)))) u476b@e*))) (set! u30c0@top-level-expander (lambda (u4791@e*) (call-with-values (lambda () (u30be@parse-top-level-program u4791@e*)) (lambda (u4797@u4794 u4798@u4796) ((lambda (u479b@b* u479c@imp*) (call-with-values (lambda () (u30ba@library-body-expander '() '() u479c@imp* u479b@b* '#t)) (lambda (u47ad@u47a0 u47ae@u47a2 u47af@u47a4 u47b0@u47a6 u47b1@u47a8 u47b2@u47aa u47b3@u47ac) ((lambda (u47bb@export-env u47bc@export-subst u47bd@visit-code u47be@invoke-code u47bf@visit-req* u47c0@invoke-req* u47c1@imp*) (values u47c0@invoke-req* u47be@invoke-code)) u47b3@u47ac u47b2@u47aa u47b1@u47a8 u47b0@u47a6 u47af@u47a4 u47ae@u47a2 u47ad@u47a0)))) u4798@u4796 u4797@u4794))))) (set! u30c2@rp (u299f@u287b@make-record-printer 'env (lambda (u47c9@x u47ca@p u47cb@wr) (display '"#<environment>" u47ca@p)))) (set! u30cc@env? (lambda (u47cf@x) (and (simple-struct? u47cf@x) (eq? (simple-struct-name u47cf@x) 'env)))) (set! u30ce@env-names (lambda (u47d1@x) (simple-struct-ref u47d1@x '0))) (set! u30d0@set-env-names! (lambda (u47d3@x u47d4@val) (simple-struct-set! u47d3@x '0 u47d4@val))) (set! u30d2@env-labels (lambda (u47d7@x) (simple-struct-ref u47d7@x '1))) (set! u30d4@set-env-labels! (lambda (u47d9@x u47da@val) (simple-struct-set! u47d9@x '1 u47da@val))) (set! u30d6@env-itc (lambda (u47dd@x) (simple-struct-ref u47dd@x '2))) (set! u30d8@set-env-itc! (lambda (u47df@x u47e0@val) (simple-struct-set! u47df@x '2 u47e0@val))) (set! u30da@dummy '3) (set! u30dc@rp (u299f@u287b@make-record-printer 'interaction-env (lambda (u47e3@x u47e4@p u47e5@wr) (display '"#<environment>" u47e4@p)))) (set! u30e6@interaction-env? (lambda (u47e9@x) (and (simple-struct? u47e9@x) (eq? (simple-struct-name u47e9@x) 'interaction-env)))) (set! u30e8@interaction-env-rib (lambda (u47eb@x) (simple-struct-ref u47eb@x '0))) (set! u30ea@set-interaction-env-rib! (lambda (u47ed@x u47ee@val) (simple-struct-set! u47ed@x '0 u47ee@val))) (set! u30ec@interaction-env-r (lambda (u47f1@x) (simple-struct-ref u47f1@x '1))) (set! u30ee@set-interaction-env-r! (lambda (u47f3@x u47f4@val) (simple-struct-set! u47f3@x '1 u47f4@val))) (set! u30f0@interaction-env-locs (lambda (u47f7@x) (simple-struct-ref u47f7@x '2))) (set! u30f2@set-interaction-env-locs! (lambda (u47f9@x u47fa@val) (simple-struct-set! u47f9@x '2 u47fa@val))) (set! u30f4@dummy '3) (set! u30f6@interaction-environment-symbols (lambda () (u30fe@environment-symbols (u3134@interaction-environment)))) (set! u30f8@environment-bindings (lambda (u47fd@e) (vector->list (vector-map (lambda (u47ff@name u4800@label) (u30fa@parse-binding (cons u47ff@name (u2c6d@u2aba@imported-label->binding u4800@label)))) (u30ce@env-names u47fd@e) (u30d2@env-labels u47fd@e))))) (set! u30fa@parse-binding (lambda (u4803@b) (cons (car u4803@b) ((lambda (u4805@t) (if (memv u4805@t '(core-prim global)) 'procedure (if (memv u4805@t '(core-macro macro global-macro)) 'syntax (if (memv u4805@t '($core-rtd)) 'record (if (eq? (car u4803@b) (cadr u4803@b)) 'syntax 'unknown))))) (cadr u4803@b))))) (set! u30fc@environment? (lambda (u4807@x) (or (u30cc@env? u4807@x) (u30e6@interaction-env? u4807@x)))) (set! u30fe@environment-symbols (lambda (u4809@x) (if (u30cc@env? u4809@x) (vector->list (u30ce@env-names u4809@x)) (if (u30e6@interaction-env? u4809@x) (map values (u2de1@rib-sym* (u30e8@interaction-env-rib u4809@x))) (assertion-violation 'environment-symbols '"not an environment" u4809@x))))) (set! u3100@environment (lambda u480b@imp* ((lambda (u480d@itc) ((lambda (u4813@u4810 u4814@u4812) ((lambda (u4817@swap) (dynamic-wind u4817@swap (lambda () (call-with-values (lambda () (u30aa@parse-import-spec* u480b@imp*)) (lambda (u481d@u481a u481e@u481c) ((lambda (u4821@subst-labels u4822@subst-names) (make-simple-struct 'env '4 (list u4822@subst-names u4821@subst-labels u480d@itc))) u481e@u481c u481d@u481a)))) u4817@swap)) (lambda () ((lambda (u4825@t) (begin (u4813@u4810 u4814@u4812) (set! u4814@u4812 u4825@t))) (u4813@u4810))))) u30b4@imp-collector u480d@itc)) (u30ae@make-collector)))) (set! u3102@null-environment (lambda (u4827@n) (begin (if (not (eqv? u4827@n '5)) (assertion-violation 'null-environment '"not 5" u4827@n) (void)) (u3100@environment '(psyntax null-environment-5))))) (set! u3104@scheme-report-environment (lambda (u4829@n) (begin (if (not (eqv? u4829@n '5)) (assertion-violation 'scheme-report-environment '"not 5" u4829@n) (void)) (u3100@environment '(psyntax scheme-report-environment-5))))) (set! u3106@expand (lambda (u482b@x u482c@env) (if (u30cc@env? u482c@env) ((lambda (u482f@rib) ((lambda (u4831@x u4832@itc u4833@rtc u4834@vtc) ((lambda (u4839@x) (begin (u2dff@seal-rib! u482f@rib) (values u4839@x (u4833@rtc)))) ((lambda (u484b@u483c u484c@u483e u484d@u4840 u484e@u4842 u484f@u4844 u4850@u4846 u4851@u4848 u4852@u484a) ((lambda (u485b@swap) (dynamic-wind u485b@swap (lambda () (u306a@chi-expr u4831@x '() '())) u485b@swap)) (lambda () (begin ((lambda (u485d@t) (begin (u484b@u483c u484f@u4844) (set! u484f@u4844 u485d@t))) (u484b@u483c)) ((lambda (u485f@t) (begin (u484c@u483e u4850@u4846) (set! u4850@u4846 u485f@t))) (u484c@u483e)) ((lambda (u4861@t) (begin (u484d@u4840 u4851@u4848) (set! u4851@u4848 u4861@t))) (u484d@u4840)) ((lambda (u4863@t) (begin (u484e@u4842 u4852@u484a) (set! u4852@u484a u4863@t))) (u484e@u4842)))))) u3136@top-level-context u30b0@inv-collector u30b2@vis-collector u30b4@imp-collector '#f u4833@rtc u4834@vtc u4832@itc))) (make-simple-struct 'stx '5 (list u482b@x u2dc7@top-mark* (list u482f@rib) '())) (u30d6@env-itc u482c@env) (u30ae@make-collector) (u30ae@make-collector))) (u30ac@make-top-rib (u30ce@env-names u482c@env) (u30d2@env-labels u482c@env))) (if (u30e6@interaction-env? u482c@env) ((lambda (u4865@rib u4866@r u4867@rtc) ((lambda (u486b@x) (call-with-values (lambda () ((lambda (u4881@u4872 u4882@u4874 u4883@u4876 u4884@u4878 u4885@u487a u4886@u487c u4887@u487e u4888@u4880) ((lambda (u4891@swap) (dynamic-wind u4891@swap (lambda () (u30b8@chi-interaction-expr u486b@x u4865@rib u4866@r)) u4891@swap)) (lambda () (begin ((lambda (u4893@t) (begin (u4881@u4872 u4885@u487a) (set! u4885@u487a u4893@t))) (u4881@u4872)) ((lambda (u4895@t) (begin (u4882@u4874 u4886@u487c) (set! u4886@u487c u4895@t))) (u4882@u4874)) ((lambda (u4897@t) (begin (u4883@u4876 u4887@u487e) (set! u4887@u487e u4897@t))) (u4883@u4876)) ((lambda (u4899@t) (begin (u4884@u4878 u4888@u4880) (set! u4888@u4880 u4899@t))) (u4884@u4878)))))) u3136@top-level-context u30b0@inv-collector u30b2@vis-collector u30b4@imp-collector u482c@env u4867@rtc (u30ae@make-collector) (u30ae@make-collector))) (lambda (u489b@u486e u489c@u4870) ((lambda (u489f@r^ u48a0@e) (begin (u30ee@set-interaction-env-r! u482c@env u489f@r^) (values u48a0@e (u4867@rtc)))) u489c@u4870 u489b@u486e)))) (make-simple-struct 'stx '5 (list u482b@x u2dc7@top-mark* (list u4865@rib) '())))) (u30e8@interaction-env-rib u482c@env) (u30ec@interaction-env-r u482c@env) (u30ae@make-collector)) (assertion-violation 'expand '"not an environment" u482c@env))))) (set! u3108@eval (lambda (u48a3@x u48a4@env) (begin (if (not (u30fc@environment? u48a4@env)) (error 'eval '"not an environment" u48a4@env) (void)) (call-with-values (lambda () (u3106@expand u48a3@x u48a4@env)) (lambda (u48ab@u48a8 u48ac@u48aa) ((lambda (u48af@invoke-req* u48b0@x) (begin (for-each u2c6e@u2abc@invoke-library u48af@invoke-req*) (eval-core (u29f8@u29b0@expanded->core u48b0@x)))) u48ac@u48aa u48ab@u48a8)))))) (set! u310a@library-expander (lambda u4921 ((lambda (u4922) (if (= u4922 '3) (apply (lambda (u48b3@x u48b4@filename u48b5@verify-name) ((lambda (u48ba@build-visit-code u48bc@visit!) (begin (set! u48ba@build-visit-code (lambda (u490f@macro*) (if (null? u490f@macro*) (u2dab@u2d1b@build-void) (u2daa@u2d19@build-sequence '#f (map (lambda (u4911@x) ((lambda (u4913@loc u4914@src) (list 'set! u4913@loc u4914@src)) (car u4911@x) (cddr u4911@x))) u490f@macro*))))) (set! u48bc@visit! (lambda (u4907@macro*) (for-each (lambda (u4909@x) ((lambda (u490b@loc u490c@proc) (set-symbol-value! u490b@loc u490c@proc)) (car u4909@x) (cadr u4909@x))) u4907@macro*))) (call-with-values (lambda () (u30bc@core-library-expander u48b3@x u48b5@verify-name)) (lambda (u48cf@u48be u48d0@u48c0 u48d1@u48c2 u48d2@u48c4 u48d3@u48c6 u48d4@u48c8 u48d5@u48ca u48d6@u48cc u48d7@u48ce) ((lambda (u48e1@export-env u48e2@export-subst u48e3@macro* u48e4@invoke-code u48e5@vis* u48e6@inv* u48e7@imp* u48e8@ver u48e9@name) ((lambda (u48f3@id u48f4@name u48f5@ver u48f6@imp* u48f7@vis* u48f8@inv* u48f9@visit-proc u48fa@invoke-proc u48fb@visit-code u48fc@invoke-code) (begin (u2c6c@u2ab8@install-library u48f3@id u48f4@name u48f5@ver u48f6@imp* u48f7@vis* u48f8@inv* u48e2@export-subst u48e1@export-env u48f9@visit-proc u48fa@invoke-proc u48fb@visit-code u48fc@invoke-code '#t u48b4@filename) (values u48f3@id u48f4@name u48f5@ver u48f6@imp* u48f7@vis* u48f8@inv* u48fc@invoke-code u48fb@visit-code u48e2@export-subst u48e1@export-env))) (gensym) u48e9@name u48e8@ver (map u2c72@u2ac4@library-spec u48e7@imp*) (map u2c72@u2ac4@library-spec u48e5@vis*) (map u2c72@u2ac4@library-spec u48e6@inv*) (lambda () (u48bc@visit! u48e3@macro*)) (lambda () (eval-core (u29f8@u29b0@expanded->core u48e4@invoke-code))) (u48ba@build-visit-code u48e3@macro*) u48e4@invoke-code)) u48d7@u48ce u48d6@u48cc u48d5@u48ca u48d4@u48c8 u48d3@u48c6 u48d2@u48c4 u48d1@u48c2 u48d0@u48c0 u48cf@u48be))))) '#f '#f)) u4921) (if (= u4922 '2) (apply (lambda (u4917@x u4918@filename) (u310a@library-expander u4917@x u4918@filename (lambda (u491b@x) (values)))) u4921) (if (= u4922 '1) (apply (lambda (u491d@x) (u310a@library-expander u491d@x '#f (lambda (u491f@x) (values)))) u4921) (error 'apply '"invalid arg count"))))) (length u4921)))) (set! u310c@boot-library-expand (lambda (u4923@x) (call-with-values (lambda () (u310a@library-expander u4923@x)) (lambda (u4939@u4926 u493a@u4928 u493b@u492a u493c@u492c u493d@u492e u493e@u4930 u493f@u4932 u4940@u4934 u4941@u4936 u4942@u4938) ((lambda (u494d@export-env u494e@export-subst u494f@visit-code u4950@invoke-code u4951@inv* u4952@vis* u4953@imp* u4954@ver u4955@name u4956@id) (values u4955@name u4950@invoke-code u494e@export-subst u494d@export-env)) u4942@u4938 u4941@u4936 u4940@u4934 u493f@u4932 u493e@u4930 u493d@u492e u493c@u492c u493b@u492a u493a@u4928 u4939@u4926))))) (set! u310e@rev-map-append (lambda (u4961@f u4962@ls u4963@ac) (if (null? u4962@ls) u4963@ac (u310e@rev-map-append u4961@f (cdr u4962@ls) (cons (u4961@f (car u4962@ls)) u4963@ac))))) (set! u3110@build-exports (lambda (u4967@lex*+loc* u4968@init*) (u2daa@u2d19@build-sequence '#f (cons (u2dab@u2d1b@build-void) (u310e@rev-map-append (lambda (u496b@x) (list 'set! (cdr u496b@x) (car u496b@x))) u4967@lex*+loc* u4968@init*))))) (set! u3112@make-export-subst (lambda (u496d@name* u496e@id*) (map (lambda (u4971@name u4972@id) ((lambda (u4975@label) (begin (if (not u4975@label) (u3128@syntax-violation '#f '"cannot export unbound identifier" u4972@id) (void)) (cons u4971@name u4975@label))) (u2e59@id->label u4972@id))) u496d@name* u496e@id*))) (set! u3114@make-export-env/macros (lambda (u4977@lex* u4978@loc* u4979@r) ((lambda (u497e@lookup) (begin (set! u497e@lookup (lambda (u499b@x) ((letrec ((u499d@f (lambda (u499f@x u49a0@lex* u49a1@loc*) (if (pair? u49a0@lex*) (if (eq? u499f@x (car u49a0@lex*)) (car u49a1@loc*) (u499d@f u499f@x (cdr u49a0@lex*) (cdr u49a1@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) u499d@f) u499b@x u4977@lex* u4978@loc*))) ((letrec ((u497f@f (lambda (u4981@r u4982@env u4983@global* u4984@macro*) (if (null? u4981@r) (values u4982@env u4983@global* u4984@macro*) ((lambda (u4989@x) ((lambda (u498b@label u498c@b) ((lambda (u498f@t) (if (memv u498f@t '(lexical)) ((lambda (u4991@v) ((lambda (u4993@loc u4994@type) (u497f@f (cdr u4981@r) (cons (cons* u498b@label u4994@type u4993@loc) u4982@env) (cons (cons (u2fd4@lexical-var u4991@v) u4993@loc) u4983@global*) u4984@macro*)) (u497e@lookup (u2fd4@lexical-var u4991@v)) (if (u2fd6@lexical-mutable? u4991@v) 'mutable 'global))) (u2e61@binding-value u498c@b)) (if (memv u498f@t '(local-macro)) ((lambda (u4997@loc) (u497f@f (cdr u4981@r) (cons (cons* u498b@label 'global-macro u4997@loc) u4982@env) u4983@global* (cons (cons u4997@loc (u2e61@binding-value u498c@b)) u4984@macro*))) (gensym)) (if (memv u498f@t '(local-macro!)) ((lambda (u4999@loc) (u497f@f (cdr u4981@r) (cons (cons* u498b@label 'global-macro! u4999@loc) u4982@env) u4983@global* (cons (cons u4999@loc (u2e61@binding-value u498c@b)) u4984@macro*))) (gensym)) (if (memv u498f@t '($rtd $module)) (u497f@f (cdr u4981@r) (cons u4989@x u4982@env) u4983@global* u4984@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (u2e5f@binding-type u498c@b) (u2e61@binding-value u498c@b))))))) (u2e5f@binding-type u498c@b))) (car u4989@x) (cdr u4989@x))) (car u4981@r)))))) u497f@f) u4979@r '() '() '()))) '#f))) (set! u3116@generate-temporaries (lambda (u49a5@ls) ((lambda (u49a7@t) ((lambda (u49a9@ls/false) (if u49a9@ls/false (apply (lambda (u49ab@ls) (map (lambda (u49ad@x) (make-simple-struct 'stx '5 (list ((lambda (u49af@x) (if (or (symbol? u49af@x) (string? u49af@x)) (gensym u49af@x) (gensym 't))) (u312e@syntax->datum u49ad@x)) u2dc7@top-mark* '() '()))) u49ab@ls)) u49a9@ls/false) ((lambda (u49b1@t) ((lambda (u49b3@ls/false) (if u49b3@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) u49b3@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u49b1@t))) (u3048@syntax-dispatch u49b1@t '_))) u49a7@t))) (u3048@syntax-dispatch u49a7@t 'each-any))) u49a5@ls))) (set! u3118@free-identifier=? (lambda (u49b5@x u49b6@y) (if (u2e43@id? u49b5@x) (if (u2e43@id? u49b6@y) (u2e49@free-id=? u49b5@x u49b6@y) (assertion-violation 'free-identifier=? '"not an identifier" u49b6@y)) (assertion-violation 'free-identifier=? '"not an identifier" u49b5@x)))) (set! u311a@bound-identifier=? (lambda (u49b9@x u49ba@y) (if (u2e43@id? u49b9@x) (if (u2e43@id? u49ba@y) (u2e47@bound-id=? u49b9@x u49ba@y) (assertion-violation 'bound-identifier=? '"not an identifier" u49ba@y)) (assertion-violation 'bound-identifier=? '"not an identifier" u49b9@x)))) (set! u311c@make-source-condition (lambda (u49bd@x) ((lambda (u49c7@u49c2 u49c9@u49c4 u49cb@u49c3 u49ce@u49c1 u49d0@make-source-condition u49d2@u49bf u49d4@u49c0 u49d6@source-condition? u49d8@source-filename u49da@source-character) (begin (set! u49c7@u49c2 (make-record-type-descriptor '&source-information u4e17@u4b5e@&condition-rtd 'u49c5 '#f '#f '#((immutable file-name) (immutable character)))) (set! u49c9@u49c4 '#f) (set! u49cb@u49c3 (make-record-constructor-descriptor u49c7@u49c2 u4e18@u4b60@&condition-rcd u49c9@u49c4)) (set! u49ce@u49c1 (record-predicate u49c7@u49c2)) (set! u49d0@make-source-condition (record-constructor u49cb@u49c3)) (set! u49d2@u49bf (record-accessor u49c7@u49c2 '0)) (set! u49d4@u49c0 (record-accessor u49c7@u49c2 '1)) (set! u49d6@source-condition? (condition-predicate u49c7@u49c2)) (set! u49d8@source-filename (condition-accessor u49c7@u49c2 u49d2@u49bf)) (set! u49da@source-character (condition-accessor u49c7@u49c2 u49d4@u49c0)) (if (pair? u49bd@x) (u49d0@make-source-condition (car u49bd@x) (cdr u49bd@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! u311e@extract-position-condition (lambda (u49db@x) (u311c@make-source-condition (u3120@expression-position u49db@x)))) (set! u3120@expression-position (lambda (u49dd@x) (and (u2e0f@stx? u49dd@x) ((lambda (u49df@x) (and (u2997@u286b@annotation? u49df@x) (u2998@u286d@annotation-source u49df@x))) (u2e11@stx-expr u49dd@x))))) (set! u3122@assertion-error (lambda (u49e1@expr u49e2@pos) (raise (condition (u4e47@u4c22@make-assertion-violation) (u4e59@u4c54@make-who-condition 'assert) (u4e1d@u4bb5@make-message-condition '"assertion failed") (u4e4f@u4c39@make-irritants-condition (list u49e1@expr)) (u311c@make-source-condition u49e2@pos))))) (set! u3124@syntax-error (lambda (u49e5@x . u49e7@args) (begin (if (not (for-all string? u49e7@args)) (assertion-violation 'syntax-error '"invalid argument" u49e7@args) (void)) (raise (condition (u4e1d@u4bb5@make-message-condition (if (null? u49e7@args) '"invalid syntax" (apply string-append u49e7@args))) (u4e7b@u4cb0@make-syntax-violation (u312e@syntax->datum u49e5@x) '#f) (u311e@extract-position-condition u49e5@x)))))) (set! u3126@syntax-violation* (lambda (u49e9@who u49ea@msg u49eb@form u49ec@condition-object) (begin (if (not (string? u49ea@msg)) (assertion-violation 'syntax-violation '"message is not a string" u49ea@msg) (void)) ((lambda (u49f1@who) (raise (condition (if u49f1@who (u4e59@u4c54@make-who-condition u49f1@who) (condition)) (u4e1d@u4bb5@make-message-condition u49ea@msg) u49ec@condition-object (u311e@extract-position-condition u49eb@form)))) (if (or (string? u49e9@who) (symbol? u49e9@who)) u49e9@who (if (not u49e9@who) ((lambda (u49f3@t) ((lambda (u49f5@ls/false) (if (and u49f5@ls/false (apply (lambda (u49f7@id) (u2e43@id? u49f7@id)) u49f5@ls/false)) (apply (lambda (u49f9@id) (u312e@syntax->datum u49f9@id)) u49f5@ls/false) ((lambda (u49fb@t) ((lambda (u49fd@ls/false) (if (and u49fd@ls/false (apply (lambda (u49ff@id u4a00@rest) (u2e43@id? u49ff@id)) u49fd@ls/false)) (apply (lambda (u4a03@id u4a04@rest) (u312e@syntax->datum u4a03@id)) u49fd@ls/false) ((lambda (u4a07@t) ((lambda (u4a09@ls/false) (if u4a09@ls/false (apply (lambda () '#f) u4a09@ls/false) (u3128@syntax-violation '#f '"invalid syntax" u4a07@t))) (u3048@syntax-dispatch u4a07@t '_))) u49fb@t))) (u3048@syntax-dispatch u49fb@t '(any . any)))) u49f3@t))) (u3048@syntax-dispatch u49f3@t 'any))) u49eb@form) (assertion-violation 'syntax-violation '"invalid who argument" u49e9@who))))))) (set! u3128@syntax-violation (lambda u4a19 ((lambda (u4a1a) (if (= u4a1a '3) (apply (lambda (u4a0b@who u4a0c@msg u4a0d@form) (u3128@syntax-violation u4a0b@who u4a0c@msg u4a0d@form '#f)) u4a19) (if (= u4a1a '4) (apply (lambda (u4a11@who u4a12@msg u4a13@form u4a14@subform) (u3126@syntax-violation* u4a11@who u4a12@msg u4a13@form (u4e7b@u4cb0@make-syntax-violation (u312e@syntax->datum u4a13@form) (u312e@syntax->datum u4a14@subform)))) u4a19) (error 'apply '"invalid arg count")))) (length u4a19)))) (set! u312a@identifier? (lambda (u4a1b@x) (u2e43@id? u4a1b@x))) (set! u312c@datum->syntax (lambda (u4a1d@id u4a1e@datum) (if (u2e43@id? u4a1d@id) (u2e23@datum->stx u4a1d@id u4a1e@datum) (assertion-violation 'datum->syntax '"not an identifier" u4a1d@id)))) (set! u312e@syntax->datum (lambda (u4a21@x) (u2e57@stx->datum u4a21@x))) (set! u3130@compile-r6rs-top-level (lambda (u4a23@x*) (call-with-values (lambda () (u30c0@top-level-expander u4a23@x*)) (lambda (u4a29@u4a26 u4a2a@u4a28) ((lambda (u4a2d@invoke-code u4a2e@lib*) (lambda () (begin (for-each u2c6e@u2abc@invoke-library u4a2e@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (u29f8@u29b0@expanded->core u4a2d@invoke-code)) (void)) (eval-core (u29f8@u29b0@expanded->core u4a2d@invoke-code))))) u4a2a@u4a28 u4a29@u4a26))))) (set! u3132@pre-compile-r6rs-top-level (lambda (u4a31@x*) (call-with-values (lambda () (u30c0@top-level-expander u4a31@x*)) (lambda (u4a37@u4a34 u4a38@u4a36) ((lambda (u4a3b@invoke-code u4a3c@lib*) (begin (for-each u2c6e@u2abc@invoke-library u4a3c@lib*) (u29a0@u287d@compile-core (u29f8@u29b0@expanded->core u4a3b@invoke-code)))) u4a38@u4a36 u4a37@u4a34))))) (set! u3134@interaction-environment ((lambda (u4a3f@the-env) (lambda () (or u4a3f@the-env ((lambda (u4a41@lib u4a42@rib) (begin ((lambda (u4a45@subst) (begin (u2de3@set-rib-sym*! u4a42@rib (map car u4a45@subst)) (u2de7@set-rib-mark**! u4a42@rib (map (lambda (u4a47@x) u2dc7@top-mark*) u4a45@subst)) (u2deb@set-rib-label*! u4a42@rib (map cdr u4a45@subst)))) (u2c49@u2a72@library-subst u4a41@lib)) ((lambda (u4a49@env) (begin (set! u4a3f@the-env u4a49@env) u4a49@env)) (make-simple-struct 'interaction-env '4 (list u4a42@rib '() '()))))) (u2c67@u2aae@find-library-by-name '(mosh interaction)) (u2df7@make-empty-rib))))) '#f)) (set! u3136@top-level-context (u29a2@u2881@make-parameter '#f)) (begin (set! u4b44@u3136@top-level-context u3136@top-level-context) (set! u4b43@u3134@interaction-environment u3134@interaction-environment) (set! u4b42@u3132@pre-compile-r6rs-top-level u3132@pre-compile-r6rs-top-level) (set! u4b41@u3130@compile-r6rs-top-level u3130@compile-r6rs-top-level) (set! u4b40@u312e@syntax->datum u312e@syntax->datum) (set! u4b3f@u312c@datum->syntax u312c@datum->syntax) (set! u4b3e@u312a@identifier? u312a@identifier?) (set! u4b3d@u3128@syntax-violation u3128@syntax-violation) (set! u4b3c@u3126@syntax-violation* u3126@syntax-violation*) (set! u4b3b@u3124@syntax-error u3124@syntax-error) (set! u4b3a@u3122@assertion-error u3122@assertion-error) (set! u4b39@u3120@expression-position u3120@expression-position) (set! u4b38@u311e@extract-position-condition u311e@extract-position-condition) (set! u4b37@u311c@make-source-condition u311c@make-source-condition) (set! u4b36@u311a@bound-identifier=? u311a@bound-identifier=?) (set! u4b35@u3118@free-identifier=? u3118@free-identifier=?) (set! u4b34@u3116@generate-temporaries u3116@generate-temporaries) (set! u4b33@u3114@make-export-env/macros u3114@make-export-env/macros) (set! u4b32@u3112@make-export-subst u3112@make-export-subst) (set! u4b31@u3110@build-exports u3110@build-exports) (set! u4b30@u310e@rev-map-append u310e@rev-map-append) (set! u4b2f@u310c@boot-library-expand u310c@boot-library-expand) (set! u4b2e@u310a@library-expander u310a@library-expander) (set! u4b2d@u3108@eval u3108@eval) (set! u4b2c@u3106@expand u3106@expand) (set! u4b2b@u3104@scheme-report-environment u3104@scheme-report-environment) (set! u4b2a@u3102@null-environment u3102@null-environment) (set! u4b29@u3100@environment u3100@environment) (set! u4b28@u30fe@environment-symbols u30fe@environment-symbols) (set! u4b27@u30fc@environment? u30fc@environment?) (set! u4b26@u30fa@parse-binding u30fa@parse-binding) (set! u4b25@u30f8@environment-bindings u30f8@environment-bindings) (set! u4b24@u30f6@interaction-environment-symbols u30f6@interaction-environment-symbols) (set! u4b23@u30f4@dummy u30f4@dummy) (set! u4b22@u30f2@set-interaction-env-locs! u30f2@set-interaction-env-locs!) (set! u4b21@u30f0@interaction-env-locs u30f0@interaction-env-locs) (set! u4b20@u30ee@set-interaction-env-r! u30ee@set-interaction-env-r!) (set! u4b1f@u30ec@interaction-env-r u30ec@interaction-env-r) (set! u4b1e@u30ea@set-interaction-env-rib! u30ea@set-interaction-env-rib!) (set! u4b1d@u30e8@interaction-env-rib u30e8@interaction-env-rib) (set! u4b1c@u30e6@interaction-env? u30e6@interaction-env?) (set! u4b1b@u30dc@rp u30dc@rp) (set! u4b1a@u30da@dummy u30da@dummy) (set! u4b19@u30d8@set-env-itc! u30d8@set-env-itc!) (set! u4b18@u30d6@env-itc u30d6@env-itc) (set! u4b17@u30d4@set-env-labels! u30d4@set-env-labels!) (set! u4b16@u30d2@env-labels u30d2@env-labels) (set! u4b15@u30d0@set-env-names! u30d0@set-env-names!) (set! u4b14@u30ce@env-names u30ce@env-names) (set! u4b13@u30cc@env? u30cc@env?) (set! u4b12@u30c2@rp u30c2@rp) (set! u4b11@u30c0@top-level-expander u30c0@top-level-expander) (set! u4b10@u30be@parse-top-level-program u30be@parse-top-level-program) (set! u4b0f@u30bc@core-library-expander u30bc@core-library-expander) (set! u4b0e@u30ba@library-body-expander u30ba@library-body-expander) (set! u4b0d@u30b8@chi-interaction-expr u30b8@chi-interaction-expr) (set! u4b0c@u30b6@chi-library-internal u30b6@chi-library-internal) (set! u4b0b@u30b4@imp-collector u30b4@imp-collector) (set! u4b0a@u30b2@vis-collector u30b2@vis-collector) (set! u4b09@u30b0@inv-collector u30b0@inv-collector) (set! u4b08@u30ae@make-collector u30ae@make-collector) (set! u4b07@u30ac@make-top-rib u30ac@make-top-rib) (set! u4b06@u30aa@parse-import-spec* u30aa@parse-import-spec*) (set! u4b05@u30a8@parse-library u30a8@parse-library) (set! u4b04@u30a6@parse-library-name u30a6@parse-library-name) (set! u4b03@u30a4@parse-exports u30a4@parse-exports) (set! u4b02@u30a2@expand-transformer u30a2@expand-transformer) (set! u4b01@u30a0@chi-body* u30a0@chi-body*) (set! u4b00@u309e@chi-internal-module u309e@chi-internal-module) (set! u4aff@u309c@module-interface-exp-id* u309c@module-interface-exp-id*) (set! u4afe@u309a@dummy u309a@dummy) (set! u4afd@u3098@set-module-interface-exp-lab-vec! u3098@set-module-interface-exp-lab-vec!) (set! u4afc@u3096@module-interface-exp-lab-vec u3096@module-interface-exp-lab-vec) (set! u4afb@u3094@set-module-interface-exp-id-vec! u3094@set-module-interface-exp-id-vec!) (set! u4afa@u3092@module-interface-exp-id-vec u3092@module-interface-exp-id-vec) (set! u4af9@u3090@set-module-interface-first-mark! u3090@set-module-interface-first-mark!) (set! u4af8@u308e@module-interface-first-mark u308e@module-interface-first-mark) (set! u4af7@u308c@module-interface? u308c@module-interface?) (set! u4af6@u3082@parse-module u3082@parse-module) (set! u4af5@u3080@chi-internal u3080@chi-internal) (set! u4af4@u307e@find-dups u307e@find-dups) (set! u4af3@u307c@find-bound=? u307c@find-bound=?) (set! u4af2@u307a@chi-rhs* u307a@chi-rhs*) (set! u4af1@u3078@expand-interaction-rhs*/init* u3078@expand-interaction-rhs*/init*) (set! u4af0@u3076@chi-rhs u3076@chi-rhs) (set! u4aef@u3074@chi-defun u3074@chi-defun) (set! u4aee@u3072@chi-lambda-clause* u3072@chi-lambda-clause*) (set! u4aed@u3070@chi-lambda-clause u3070@chi-lambda-clause) (set! u4aec@u306e@verify-formals u306e@verify-formals) (set! u4aeb@u306c@chi-set! u306c@chi-set!) (set! u4aea@u306a@chi-expr u306a@chi-expr) (set! u4ae9@u3068@chi-application u3068@chi-application) (set! u4ae8@u3066@chi-expr* u3066@chi-expr*) (set! u4ae7@u3064@chi-global-macro u3064@chi-global-macro) (set! u4ae6@u3062@chi-local-macro u3062@chi-local-macro) (set! u4ae5@u3060@chi-macro u3060@chi-macro) (set! u4ae4@u305e@do-macro-call u305e@do-macro-call) (set! u4ae3@u305c@local-macro-transformer u305c@local-macro-transformer) (set! u4ae2@u305a@macro-transformer u305a@macro-transformer) (set! u4ae1@u3058@symbol-macro u3058@symbol-macro) (set! u4ae0@u3056@core-macro-transformer u3056@core-macro-transformer) (set! u4adf@u3054@syntax-transformer u3054@syntax-transformer) (set! u4ade@u3052@ellipsis-map u3052@ellipsis-map) (set! u4add@u3050@syntax-case-transformer u3050@syntax-case-transformer) (set! u4adc@u304e@verify-literals u304e@verify-literals) (set! u4adb@u304c@underscore? u304c@underscore?) (set! u4ada@u304a@ellipsis? u304a@ellipsis?) (set! u4ad9@u3048@syntax-dispatch u3048@syntax-dispatch) (set! u4ad8@u3046@convert-pattern u3046@convert-pattern) (set! u4ad7@u3044@foreign-call-transformer u3044@foreign-call-transformer) (set! u4ad6@u3042@parameterize-macro u3042@parameterize-macro) (set! u4ad5@u3040@incorrect-usage-macro u3040@incorrect-usage-macro) (set! u4ad4@u303e@define-condition-type-macro u303e@define-condition-type-macro) (set! u4ad3@u303c@define-record-type-macro u303c@define-record-type-macro) (set! u4ad2@u303a@define-struct-macro u303a@define-struct-macro) (set! u4ad1@u3038@quasisyntax-macro u3038@quasisyntax-macro) (set! u4ad0@u3036@quasiquote-macro u3036@quasiquote-macro) (set! u4acf@u3034@syntax-rules-macro u3034@syntax-rules-macro) (set! u4ace@u3032@include-into-macro u3032@include-into-macro) (set! u4acd@u3030@include-macro u3030@include-macro) (set! u4acc@u302e@do-include u302e@do-include) (set! u4acb@u302c@cond-macro u302c@cond-macro) (set! u4aca@u302a@and-macro u302a@and-macro) (set! u4ac9@u3028@or-macro u3028@or-macro) (set! u4ac8@u3026@let*-macro u3026@let*-macro) (set! u4ac7@u3024@do-macro u3024@do-macro) (set! u4ac6@u3022@identifier-syntax-macro u3022@identifier-syntax-macro) (set! u4ac5@u3020@endianness-macro u3020@endianness-macro) (set! u4ac4@u301e@assert-macro u301e@assert-macro) (set! u4ac3@u301c@delay-macro u301c@delay-macro) (set! u4ac2@u301a@time-macro u301a@time-macro) (set! u4ac1@u3018@define-enumeration-macro u3018@define-enumeration-macro) (set! u4ac0@u3016@guard-macro u3016@guard-macro) (set! u4abf@u3014@trace-letrec-syntax-macro u3014@trace-letrec-syntax-macro) (set! u4abe@u3012@trace-let-syntax-macro u3012@trace-let-syntax-macro) (set! u4abd@u3010@trace-let/rec-syntax u3010@trace-let/rec-syntax) (set! u4abc@u300e@trace-define-syntax-macro u300e@trace-define-syntax-macro) (set! u4abb@u300c@trace-define-macro u300c@trace-define-macro) (set! u4aba@u300a@trace-lambda-macro u300a@trace-lambda-macro) (set! u4ab9@u3008@let*-values-macro u3008@let*-values-macro) (set! u4ab8@u3006@let-values-macro u3006@let-values-macro) (set! u4ab7@u3004@let-macro u3004@let-macro) (set! u4ab6@u3002@invalid-fmls-error u3002@invalid-fmls-error) (set! u4ab5@u3000@with-syntax-macro u3000@with-syntax-macro) (set! u4ab4@u2ffe@bless u2ffe@bless) (set! u4ab3@u2ffc@lambda-transformer u2ffc@lambda-transformer) (set! u4ab2@u2ffa@case-lambda-transformer u2ffa@case-lambda-transformer) (set! u4ab1@u2ff8@quote-transformer u2ff8@quote-transformer) (set! u4ab0@u2ff6@case-macro u2ff6@case-macro) (set! u4aaf@u2ff4@or-transformer u2ff4@or-transformer) (set! u4aae@u2ff2@and-transformer u2ff2@and-transformer) (set! u4aad@u2ff0@if-transformer u2ff0@if-transformer) (set! u4aac@u2fee@unless-macro u2fee@unless-macro) (set! u4aab@u2fec@when-macro u2fec@when-macro) (set! u4aaa@u2fea@record-constructor-descriptor-transformer u2fea@record-constructor-descriptor-transformer) (set! u4aa9@u2fe8@record-type-descriptor-transformer u2fe8@record-type-descriptor-transformer) (set! u4aa8@u2fe6@type-descriptor-transformer u2fe6@type-descriptor-transformer) (set! u4aa7@u2fe4@fluid-let-syntax-transformer u2fe4@fluid-let-syntax-transformer) (set! u4aa6@u2fe2@letrec*-transformer u2fe2@letrec*-transformer) (set! u4aa5@u2fe0@letrec-transformer u2fe0@letrec-transformer) (set! u4aa4@u2fde@letrec-helper u2fde@letrec-helper) (set! u4aa3@u2fdc@add-lexicals u2fdc@add-lexicals) (set! u4aa2@u2fda@add-lexical u2fda@add-lexical) (set! u4aa1@u2fd8@set-lexical-mutable! u2fd8@set-lexical-mutable!) (set! u4aa0@u2fd6@lexical-mutable? u2fd6@lexical-mutable?) (set! u4a9f@u2fd4@lexical-var u2fd4@lexical-var) (set! u4a9e@u2fd2@scheme-stx u2fd2@scheme-stx) (set! u4a9d@u2fd0@scheme-stx-hashtable u2fd0@scheme-stx-hashtable) (set! u4a9c@u2fce@parse-define-syntax u2fce@parse-define-syntax) (set! u4a9b@u2fcc@parse-define u2fcc@parse-define) (set! u4a9a@u2e7b@make-eval-transformer u2e7b@make-eval-transformer) (set! u4a99@u2e79@variable-transformer-procedure u2e79@variable-transformer-procedure) (set! u4a98@u2e77@variable-transformer? u2e77@variable-transformer?) (set! u4a97@u2e75@make-variable-transformer u2e75@make-variable-transformer) (set! u4a96@u2e73@sanitize-binding u2e73@sanitize-binding) (set! u4a95@u2e65@syntax-type u2e65@syntax-type) (set! u4a94@u2e63@raise-unbound-error u2e63@raise-unbound-error) (set! u4a93@u2e61@binding-value u2e61@binding-value) (set! u4a92@u2e5f@binding-type u2e5f@binding-type) (set! u4a91@u2e5d@make-binding u2e5d@make-binding) (set! u4a90@u2e5b@label->binding u2e5b@label->binding) (set! u4a8f@u2e59@id->label u2e59@id->label) (set! u4a8e@u2e57@stx->datum u2e57@stx->datum) (set! u4a8d@u2e55@strip u2e55@strip) (set! u4a8c@u2e53@strip-annotations u2e53@strip-annotations) (set! u4a8b@u2e51@self-evaluating? u2e51@self-evaluating?) (set! u4a8a@u2e4f@bound-id-member? u2e4f@bound-id-member?) (set! u4a89@u2e4d@distinct-bound-ids? u2e4d@distinct-bound-ids?) (set! u4a88@u2e4b@valid-bound-ids? u2e4b@valid-bound-ids?) (set! u4a87@u2e49@free-id=? u2e49@free-id=?) (set! u4a86@u2e47@bound-id=? u2e47@bound-id=?) (set! u4a85@u2e45@id->sym u2e45@id->sym) (set! u4a84@u2e43@id? u2e43@id?) (set! u4a83@u2e41@syntax->list u2e41@syntax->list) (set! u4a82@u2e3f@syntax-cdr u2e3f@syntax-cdr) (set! u4a81@u2e3d@syntax-car u2e3d@syntax-car) (set! u4a80@u2e3b@syntax-list? u2e3b@syntax-list?) (set! u4a7f@u2e39@syntax-null? u2e39@syntax-null?) (set! u4a7e@u2e37@syntax-vector? u2e37@syntax-vector?) (set! u4a7d@u2e35@syntax-pair? u2e35@syntax-pair?) (set! u4a7c@u2e33@syntax-vector->list u2e33@syntax-vector->list) (set! u4a7b@u2e31@syntax-kind? u2e31@syntax-kind?) (set! u4a7a@u2e2f@add-subst u2e2f@add-subst) (set! u4a79@u2e2d@add-mark u2e2d@add-mark) (set! u4a78@u2e2b@mkstx u2e2b@mkstx) (set! u4a77@u2e29@anti-mark? u2e29@anti-mark?) (set! u4a76@u2e27@anti-mark u2e27@anti-mark) (set! u4a75@u2e25@gen-mark u2e25@gen-mark) (set! u4a74@u2e23@datum->stx u2e23@datum->stx) (set! u4a73@u2e21@dummy u2e21@dummy) (set! u4a72@u2e1f@set-stx-ae*! u2e1f@set-stx-ae*!) (set! u4a71@u2e1d@stx-ae* u2e1d@stx-ae*) (set! u4a70@u2e1b@set-stx-subst*! u2e1b@set-stx-subst*!) (set! u4a6f@u2e19@stx-subst* u2e19@stx-subst*) (set! u4a6e@u2e17@set-stx-mark*! u2e17@set-stx-mark*!) (set! u4a6d@u2e15@stx-mark* u2e15@stx-mark*) (set! u4a6c@u2e13@set-stx-expr! u2e13@set-stx-expr!) (set! u4a6b@u2e11@stx-expr u2e11@stx-expr) (set! u4a6a@u2e0f@stx? u2e0f@stx?) (set! u4a69@u2e05@rp u2e05@rp) (set! u4a68@u2e03@make-full-rib u2e03@make-full-rib) (set! u4a67@u2e01@unseal-rib! u2e01@unseal-rib!) (set! u4a66@u2dff@seal-rib! u2dff@seal-rib!) (set! u4a65@u2dfd@make-rib-map u2dfd@make-rib-map) (set! u4a64@u2dfb@extend-rib/nc! u2dfb@extend-rib/nc!) (set! u4a63@u2df9@extend-rib! u2df9@extend-rib!) (set! u4a62@u2df7@make-empty-rib u2df7@make-empty-rib) (set! u4a61@u2df5@dummy u2df5@dummy) (set! u4a60@u2df3@set-rib-cache! u2df3@set-rib-cache!) (set! u4a5f@u2df1@rib-cache u2df1@rib-cache) (set! u4a5e@u2def@set-rib-sealed/freq! u2def@set-rib-sealed/freq!) (set! u4a5d@u2ded@rib-sealed/freq u2ded@rib-sealed/freq) (set! u4a5c@u2deb@set-rib-label*! u2deb@set-rib-label*!) (set! u4a5b@u2de9@rib-label* u2de9@rib-label*) (set! u4a5a@u2de7@set-rib-mark**! u2de7@set-rib-mark**!) (set! u4a59@u2de5@rib-mark** u2de5@rib-mark**) (set! u4a58@u2de3@set-rib-sym*! u2de3@set-rib-sym*!) (set! u4a57@u2de1@rib-sym* u2de1@rib-sym*) (set! u4a56@u2ddf@rib? u2ddf@rib?) (set! u4a55@u2dd5@gen-define-label u2dd5@gen-define-label) (set! u4a54@u2dd3@gen-define-label+loc u2dd3@gen-define-label+loc) (set! u4a53@u2dd1@gen-top-level-label u2dd1@gen-top-level-label) (set! u4a52@u2dcf@gen-label u2dcf@gen-label) (set! u4a51@u2dcd@gen-global u2dcd@gen-global) (set! u4a50@u2dcb@gen-lexical u2dcb@gen-lexical) (set! u4a4f@u2dc9@top-marked? u2dc9@top-marked?) (set! u4a4e@u2dc7@top-mark* u2dc7@top-mark*) (set! u4a4d@u2dc2@set-union u2dc2@set-union) (set! u4a4c@u2dc0@set-cons u2dc0@set-cons) (set! u4a4b@u2dbe@file-options-macro u2dbe@file-options-macro) (u2c64@u2aa8@current-library-expander u310a@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (u4b53@u4b4e u4b55@u4b50 u4b57@u4b4f u4b5a@&condition? u4b5c@make-&condition u4b5e@&condition-rtd u4b60@&condition-rcd u4bac@u4ba7 u4bae@u4ba9 u4bb0@u4ba8 u4bb3@p? u4bb5@make-message-condition u4bb7@u4ba6 u4bb9@message-condition? u4bbb@condition-message u4bbd@&message-rtd u4bbf@&message-rcd u4bc5@u4bc0 u4bc7@u4bc2 u4bc9@u4bc1 u4bcc@p? u4bce@make-warning u4bd0@warning? u4bd2@&warning-rtd u4bd4@&warning-rcd u4bda@u4bd5 u4bdc@u4bd7 u4bde@u4bd6 u4be1@p? u4be3@make-serious-condition u4be5@serious-condition? u4be7@&serious-rtd u4be9@&serious-rcd u4bef@u4bea u4bf1@u4bec u4bf3@u4beb u4bf6@p? u4bf8@make-error u4bfa@error? u4bfc@&error-rtd u4bfe@&error-rcd u4c04@u4bff u4c06@u4c01 u4c08@u4c00 u4c0b@p? u4c0d@make-violation u4c0f@violation? u4c11@&violation-rtd u4c13@&violation-rcd u4c19@u4c14 u4c1b@u4c16 u4c1d@u4c15 u4c20@p? u4c22@make-assertion-violation u4c24@assertion-violation? u4c26@&assertion-rtd u4c28@&assertion-rcd u4c30@u4c2b u4c32@u4c2d u4c34@u4c2c u4c37@p? u4c39@make-irritants-condition u4c3b@u4c2a u4c3d@irritants-condition? u4c3f@condition-irritants u4c41@&irritants-rtd u4c43@&irritants-rcd u4c4b@u4c46 u4c4d@u4c48 u4c4f@u4c47 u4c52@p? u4c54@make-who-condition u4c56@u4c45 u4c58@who-condition? u4c5a@condition-who u4c5c@&who-rtd u4c5e@&who-rcd u4c64@u4c5f u4c66@u4c61 u4c68@u4c60 u4c6b@p? u4c6d@make-non-continuable-violation u4c6f@non-continuable-violation? u4c71@&non-continuable-rtd u4c73@&non-continuable-rcd u4c79@u4c74 u4c7b@u4c76 u4c7d@u4c75 u4c80@p? u4c82@make-implementation-restriction-violation u4c84@implementation-restriction-violation? u4c86@&implementation-restriction-rtd u4c88@&implementation-restriction-rcd u4c8e@u4c89 u4c90@u4c8b u4c92@u4c8a u4c95@p? u4c97@make-lexical-violation u4c99@lexical-violation? u4c9b@&lexical-rtd u4c9d@&lexical-rcd u4ca7@u4ca2 u4ca9@u4ca4 u4cab@u4ca3 u4cae@p? u4cb0@make-syntax-violation u4cb2@u4c9f u4cb4@u4ca1 u4cb6@syntax-violation? u4cb8@syntax-violation-form u4cba@syntax-violation-subform u4cbc@&syntax-rtd u4cbe@&syntax-rcd u4cc4@u4cbf u4cc6@u4cc1 u4cc8@u4cc0 u4ccb@p? u4ccd@make-undefined-violation u4ccf@undefined-violation? u4cd1@&undefined-rtd u4cd3@&undefined-rcd u4cd9@u4cd4 u4cdb@u4cd6 u4cdd@u4cd5 u4ce0@p? u4ce2@make-i/o-error u4ce4@i/o-error? u4ce6@&i/o-rtd u4ce8@&i/o-rcd u4cee@u4ce9 u4cf0@u4ceb u4cf2@u4cea u4cf5@p? u4cf7@make-i/o-read-error u4cf9@i/o-read-error? u4cfb@&i/o-read-rtd u4cfd@&i/o-read-rcd u4d03@u4cfe u4d05@u4d00 u4d07@u4cff u4d0a@p? u4d0c@make-i/o-write-error u4d0e@i/o-write-error? u4d10@&i/o-write-rtd u4d12@&i/o-write-rcd u4d1a@u4d15 u4d1c@u4d17 u4d1e@u4d16 u4d21@p? u4d23@make-i/o-invalid-position-error u4d25@u4d14 u4d27@i/o-invalid-position-error? u4d29@i/o-error-position u4d2b@&i/o-invalid-position-rtd u4d2d@&i/o-invalid-position-rcd u4d35@u4d30 u4d37@u4d32 u4d39@u4d31 u4d3c@p? u4d3e@make-i/o-filename-error u4d40@u4d2f u4d42@i/o-filename-error? u4d44@i/o-error-filename u4d46@&i/o-filename-rtd u4d48@&i/o-filename-rcd u4d4e@u4d49 u4d50@u4d4b u4d52@u4d4a u4d55@p? u4d57@make-i/o-file-protection-error u4d59@i/o-file-protection-error? u4d5b@&i/o-file-protection-rtd u4d5d@&i/o-file-protection-rcd u4d63@u4d5e u4d65@u4d60 u4d67@u4d5f u4d6a@p? u4d6c@make-i/o-file-is-read-only-error u4d6e@i/o-file-is-read-only-error? u4d70@&i/o-file-is-read-only-rtd u4d72@&i/o-file-is-read-only-rcd u4d78@u4d73 u4d7a@u4d75 u4d7c@u4d74 u4d7f@p? u4d81@make-i/o-file-already-exists-error u4d83@i/o-file-already-exists-error? u4d85@&i/o-file-already-exists-rtd u4d87@&i/o-file-already-exists-rcd u4d8d@u4d88 u4d8f@u4d8a u4d91@u4d89 u4d94@p? u4d96@make-i/o-file-does-not-exist-error u4d98@i/o-file-does-not-exist-error? u4d9a@&i/o-file-does-not-exist-rtd u4d9c@&i/o-file-does-not-exist-rcd u4da4@u4d9f u4da6@u4da1 u4da8@u4da0 u4dab@p? u4dad@make-i/o-port-error u4daf@u4d9e u4db1@i/o-port-error? u4db3@i/o-error-port u4db5@&i/o-port-rtd u4db7@&i/o-port-rcd u4dbd@u4db8 u4dbf@u4dba u4dc1@u4db9 u4dc4@p? u4dc6@make-i/o-decoding-error u4dc8@i/o-decoding-error? u4dca@&i/o-decoding-rtd u4dcc@&i/o-decoding-rcd u4dd4@u4dcf u4dd6@u4dd1 u4dd8@u4dd0 u4ddb@p? u4ddd@make-i/o-encoding-error u4ddf@u4dce u4de1@i/o-encoding-error? u4de3@i/o-encoding-error-char u4de5@&i/o-encoding-rtd u4de7@&i/o-encoding-rcd u4ded@u4de8 u4def@u4dea u4df1@u4de9 u4df4@p? u4df6@make-no-infinities-violation u4df8@no-infinities-violation? u4dfa@&no-infinities-rtd u4dfc@&no-infinities-rcd u4e02@u4dfd u4e04@u4dff u4e06@u4dfe u4e09@p? u4e0b@make-no-nans-violation u4e0d@no-nans-violation? u4e0f@&no-nans-rtd u4e11@&no-nans-rcd) (begin (set! u4b53@u4b4e (make-record-type-descriptor '&condition '#f 'u4b51 '#f '#f '#())) (set! u4b55@u4b50 '#f) (set! u4b57@u4b4f (make-record-constructor-descriptor u4b53@u4b4e '#f u4b55@u4b50)) (set! u4b5a@&condition? (record-predicate u4b53@u4b4e)) (set! u4b5c@make-&condition (record-constructor u4b57@u4b4f)) (set! u4b5e@&condition-rtd u4b53@u4b4e) (set! u4b60@&condition-rcd u4b57@u4b4f) (set! u4bac@u4ba7 (make-record-type-descriptor '&message u4b53@u4b4e 'u4baa '#f '#f '#((immutable message)))) (set! u4bae@u4ba9 '#f) (set! u4bb0@u4ba8 (make-record-constructor-descriptor u4bac@u4ba7 u4b57@u4b4f u4bae@u4ba9)) (set! u4bb3@p? (record-predicate u4bac@u4ba7)) (set! u4bb5@make-message-condition (record-constructor u4bb0@u4ba8)) (set! u4bb7@u4ba6 (record-accessor u4bac@u4ba7 '0)) (set! u4bb9@message-condition? (condition-predicate u4bac@u4ba7)) (set! u4bbb@condition-message (condition-accessor u4bac@u4ba7 u4bb7@u4ba6)) (set! u4bbd@&message-rtd u4bac@u4ba7) (set! u4bbf@&message-rcd u4bb0@u4ba8) (set! u4bc5@u4bc0 (make-record-type-descriptor '&warning u4b53@u4b4e 'u4bc3 '#f '#f '#())) (set! u4bc7@u4bc2 '#f) (set! u4bc9@u4bc1 (make-record-constructor-descriptor u4bc5@u4bc0 u4b57@u4b4f u4bc7@u4bc2)) (set! u4bcc@p? (record-predicate u4bc5@u4bc0)) (set! u4bce@make-warning (record-constructor u4bc9@u4bc1)) (set! u4bd0@warning? (condition-predicate u4bc5@u4bc0)) (set! u4bd2@&warning-rtd u4bc5@u4bc0) (set! u4bd4@&warning-rcd u4bc9@u4bc1) (set! u4bda@u4bd5 (make-record-type-descriptor '&serious u4b53@u4b4e 'u4bd8 '#f '#f '#())) (set! u4bdc@u4bd7 '#f) (set! u4bde@u4bd6 (make-record-constructor-descriptor u4bda@u4bd5 u4b57@u4b4f u4bdc@u4bd7)) (set! u4be1@p? (record-predicate u4bda@u4bd5)) (set! u4be3@make-serious-condition (record-constructor u4bde@u4bd6)) (set! u4be5@serious-condition? (condition-predicate u4bda@u4bd5)) (set! u4be7@&serious-rtd u4bda@u4bd5) (set! u4be9@&serious-rcd u4bde@u4bd6) (set! u4bef@u4bea (make-record-type-descriptor '&error u4bda@u4bd5 'u4bed '#f '#f '#())) (set! u4bf1@u4bec '#f) (set! u4bf3@u4beb (make-record-constructor-descriptor u4bef@u4bea u4bde@u4bd6 u4bf1@u4bec)) (set! u4bf6@p? (record-predicate u4bef@u4bea)) (set! u4bf8@make-error (record-constructor u4bf3@u4beb)) (set! u4bfa@error? (condition-predicate u4bef@u4bea)) (set! u4bfc@&error-rtd u4bef@u4bea) (set! u4bfe@&error-rcd u4bf3@u4beb) (set! u4c04@u4bff (make-record-type-descriptor '&violation u4bda@u4bd5 'u4c02 '#f '#f '#())) (set! u4c06@u4c01 '#f) (set! u4c08@u4c00 (make-record-constructor-descriptor u4c04@u4bff u4bde@u4bd6 u4c06@u4c01)) (set! u4c0b@p? (record-predicate u4c04@u4bff)) (set! u4c0d@make-violation (record-constructor u4c08@u4c00)) (set! u4c0f@violation? (condition-predicate u4c04@u4bff)) (set! u4c11@&violation-rtd u4c04@u4bff) (set! u4c13@&violation-rcd u4c08@u4c00) (set! u4c19@u4c14 (make-record-type-descriptor '&assertion u4c04@u4bff 'u4c17 '#f '#f '#())) (set! u4c1b@u4c16 '#f) (set! u4c1d@u4c15 (make-record-constructor-descriptor u4c19@u4c14 u4c08@u4c00 u4c1b@u4c16)) (set! u4c20@p? (record-predicate u4c19@u4c14)) (set! u4c22@make-assertion-violation (record-constructor u4c1d@u4c15)) (set! u4c24@assertion-violation? (condition-predicate u4c19@u4c14)) (set! u4c26@&assertion-rtd u4c19@u4c14) (set! u4c28@&assertion-rcd u4c1d@u4c15) (set! u4c30@u4c2b (make-record-type-descriptor '&irritants u4b53@u4b4e 'u4c2e '#f '#f '#((immutable irritants)))) (set! u4c32@u4c2d '#f) (set! u4c34@u4c2c (make-record-constructor-descriptor u4c30@u4c2b u4b57@u4b4f u4c32@u4c2d)) (set! u4c37@p? (record-predicate u4c30@u4c2b)) (set! u4c39@make-irritants-condition (record-constructor u4c34@u4c2c)) (set! u4c3b@u4c2a (record-accessor u4c30@u4c2b '0)) (set! u4c3d@irritants-condition? (condition-predicate u4c30@u4c2b)) (set! u4c3f@condition-irritants (condition-accessor u4c30@u4c2b u4c3b@u4c2a)) (set! u4c41@&irritants-rtd u4c30@u4c2b) (set! u4c43@&irritants-rcd u4c34@u4c2c) (set! u4c4b@u4c46 (make-record-type-descriptor '&who u4b53@u4b4e 'u4c49 '#f '#f '#((immutable who)))) (set! u4c4d@u4c48 '#f) (set! u4c4f@u4c47 (make-record-constructor-descriptor u4c4b@u4c46 u4b57@u4b4f u4c4d@u4c48)) (set! u4c52@p? (record-predicate u4c4b@u4c46)) (set! u4c54@make-who-condition (record-constructor u4c4f@u4c47)) (set! u4c56@u4c45 (record-accessor u4c4b@u4c46 '0)) (set! u4c58@who-condition? (condition-predicate u4c4b@u4c46)) (set! u4c5a@condition-who (condition-accessor u4c4b@u4c46 u4c56@u4c45)) (set! u4c5c@&who-rtd u4c4b@u4c46) (set! u4c5e@&who-rcd u4c4f@u4c47) (set! u4c64@u4c5f (make-record-type-descriptor '&non-continuable u4c04@u4bff 'u4c62 '#f '#f '#())) (set! u4c66@u4c61 '#f) (set! u4c68@u4c60 (make-record-constructor-descriptor u4c64@u4c5f u4c08@u4c00 u4c66@u4c61)) (set! u4c6b@p? (record-predicate u4c64@u4c5f)) (set! u4c6d@make-non-continuable-violation (record-constructor u4c68@u4c60)) (set! u4c6f@non-continuable-violation? (condition-predicate u4c64@u4c5f)) (set! u4c71@&non-continuable-rtd u4c64@u4c5f) (set! u4c73@&non-continuable-rcd u4c68@u4c60) (set! u4c79@u4c74 (make-record-type-descriptor '&implementation-restriction u4c04@u4bff 'u4c77 '#f '#f '#())) (set! u4c7b@u4c76 '#f) (set! u4c7d@u4c75 (make-record-constructor-descriptor u4c79@u4c74 u4c08@u4c00 u4c7b@u4c76)) (set! u4c80@p? (record-predicate u4c79@u4c74)) (set! u4c82@make-implementation-restriction-violation (record-constructor u4c7d@u4c75)) (set! u4c84@implementation-restriction-violation? (condition-predicate u4c79@u4c74)) (set! u4c86@&implementation-restriction-rtd u4c79@u4c74) (set! u4c88@&implementation-restriction-rcd u4c7d@u4c75) (set! u4c8e@u4c89 (make-record-type-descriptor '&lexical u4c04@u4bff 'u4c8c '#f '#f '#())) (set! u4c90@u4c8b '#f) (set! u4c92@u4c8a (make-record-constructor-descriptor u4c8e@u4c89 u4c08@u4c00 u4c90@u4c8b)) (set! u4c95@p? (record-predicate u4c8e@u4c89)) (set! u4c97@make-lexical-violation (record-constructor u4c92@u4c8a)) (set! u4c99@lexical-violation? (condition-predicate u4c8e@u4c89)) (set! u4c9b@&lexical-rtd u4c8e@u4c89) (set! u4c9d@&lexical-rcd u4c92@u4c8a) (set! u4ca7@u4ca2 (make-record-type-descriptor '&syntax u4c04@u4bff 'u4ca5 '#f '#f '#((immutable form) (immutable subform)))) (set! u4ca9@u4ca4 '#f) (set! u4cab@u4ca3 (make-record-constructor-descriptor u4ca7@u4ca2 u4c08@u4c00 u4ca9@u4ca4)) (set! u4cae@p? (record-predicate u4ca7@u4ca2)) (set! u4cb0@make-syntax-violation (record-constructor u4cab@u4ca3)) (set! u4cb2@u4c9f (record-accessor u4ca7@u4ca2 '0)) (set! u4cb4@u4ca1 (record-accessor u4ca7@u4ca2 '1)) (set! u4cb6@syntax-violation? (condition-predicate u4ca7@u4ca2)) (set! u4cb8@syntax-violation-form (condition-accessor u4ca7@u4ca2 u4cb2@u4c9f)) (set! u4cba@syntax-violation-subform (condition-accessor u4ca7@u4ca2 u4cb4@u4ca1)) (set! u4cbc@&syntax-rtd u4ca7@u4ca2) (set! u4cbe@&syntax-rcd u4cab@u4ca3) (set! u4cc4@u4cbf (make-record-type-descriptor '&undefined u4c04@u4bff 'u4cc2 '#f '#f '#())) (set! u4cc6@u4cc1 '#f) (set! u4cc8@u4cc0 (make-record-constructor-descriptor u4cc4@u4cbf u4c08@u4c00 u4cc6@u4cc1)) (set! u4ccb@p? (record-predicate u4cc4@u4cbf)) (set! u4ccd@make-undefined-violation (record-constructor u4cc8@u4cc0)) (set! u4ccf@undefined-violation? (condition-predicate u4cc4@u4cbf)) (set! u4cd1@&undefined-rtd u4cc4@u4cbf) (set! u4cd3@&undefined-rcd u4cc8@u4cc0) (set! u4cd9@u4cd4 (make-record-type-descriptor '&i/o u4bef@u4bea 'u4cd7 '#f '#f '#())) (set! u4cdb@u4cd6 '#f) (set! u4cdd@u4cd5 (make-record-constructor-descriptor u4cd9@u4cd4 u4bf3@u4beb u4cdb@u4cd6)) (set! u4ce0@p? (record-predicate u4cd9@u4cd4)) (set! u4ce2@make-i/o-error (record-constructor u4cdd@u4cd5)) (set! u4ce4@i/o-error? (condition-predicate u4cd9@u4cd4)) (set! u4ce6@&i/o-rtd u4cd9@u4cd4) (set! u4ce8@&i/o-rcd u4cdd@u4cd5) (set! u4cee@u4ce9 (make-record-type-descriptor '&i/o-read u4cd9@u4cd4 'u4cec '#f '#f '#())) (set! u4cf0@u4ceb '#f) (set! u4cf2@u4cea (make-record-constructor-descriptor u4cee@u4ce9 u4cdd@u4cd5 u4cf0@u4ceb)) (set! u4cf5@p? (record-predicate u4cee@u4ce9)) (set! u4cf7@make-i/o-read-error (record-constructor u4cf2@u4cea)) (set! u4cf9@i/o-read-error? (condition-predicate u4cee@u4ce9)) (set! u4cfb@&i/o-read-rtd u4cee@u4ce9) (set! u4cfd@&i/o-read-rcd u4cf2@u4cea) (set! u4d03@u4cfe (make-record-type-descriptor '&i/o-write u4cd9@u4cd4 'u4d01 '#f '#f '#())) (set! u4d05@u4d00 '#f) (set! u4d07@u4cff (make-record-constructor-descriptor u4d03@u4cfe u4cdd@u4cd5 u4d05@u4d00)) (set! u4d0a@p? (record-predicate u4d03@u4cfe)) (set! u4d0c@make-i/o-write-error (record-constructor u4d07@u4cff)) (set! u4d0e@i/o-write-error? (condition-predicate u4d03@u4cfe)) (set! u4d10@&i/o-write-rtd u4d03@u4cfe) (set! u4d12@&i/o-write-rcd u4d07@u4cff) (set! u4d1a@u4d15 (make-record-type-descriptor '&i/o-invalid-position u4cd9@u4cd4 'u4d18 '#f '#f '#((immutable position)))) (set! u4d1c@u4d17 '#f) (set! u4d1e@u4d16 (make-record-constructor-descriptor u4d1a@u4d15 u4cdd@u4cd5 u4d1c@u4d17)) (set! u4d21@p? (record-predicate u4d1a@u4d15)) (set! u4d23@make-i/o-invalid-position-error (record-constructor u4d1e@u4d16)) (set! u4d25@u4d14 (record-accessor u4d1a@u4d15 '0)) (set! u4d27@i/o-invalid-position-error? (condition-predicate u4d1a@u4d15)) (set! u4d29@i/o-error-position (condition-accessor u4d1a@u4d15 u4d25@u4d14)) (set! u4d2b@&i/o-invalid-position-rtd u4d1a@u4d15) (set! u4d2d@&i/o-invalid-position-rcd u4d1e@u4d16) (set! u4d35@u4d30 (make-record-type-descriptor '&i/o-filename u4cd9@u4cd4 'u4d33 '#f '#f '#((immutable filename)))) (set! u4d37@u4d32 '#f) (set! u4d39@u4d31 (make-record-constructor-descriptor u4d35@u4d30 u4cdd@u4cd5 u4d37@u4d32)) (set! u4d3c@p? (record-predicate u4d35@u4d30)) (set! u4d3e@make-i/o-filename-error (record-constructor u4d39@u4d31)) (set! u4d40@u4d2f (record-accessor u4d35@u4d30 '0)) (set! u4d42@i/o-filename-error? (condition-predicate u4d35@u4d30)) (set! u4d44@i/o-error-filename (condition-accessor u4d35@u4d30 u4d40@u4d2f)) (set! u4d46@&i/o-filename-rtd u4d35@u4d30) (set! u4d48@&i/o-filename-rcd u4d39@u4d31) (set! u4d4e@u4d49 (make-record-type-descriptor '&i/o-file-protection u4d35@u4d30 'u4d4c '#f '#f '#())) (set! u4d50@u4d4b '#f) (set! u4d52@u4d4a (make-record-constructor-descriptor u4d4e@u4d49 u4d39@u4d31 u4d50@u4d4b)) (set! u4d55@p? (record-predicate u4d4e@u4d49)) (set! u4d57@make-i/o-file-protection-error (record-constructor u4d52@u4d4a)) (set! u4d59@i/o-file-protection-error? (condition-predicate u4d4e@u4d49)) (set! u4d5b@&i/o-file-protection-rtd u4d4e@u4d49) (set! u4d5d@&i/o-file-protection-rcd u4d52@u4d4a) (set! u4d63@u4d5e (make-record-type-descriptor '&i/o-file-is-read-only u4d4e@u4d49 'u4d61 '#f '#f '#())) (set! u4d65@u4d60 '#f) (set! u4d67@u4d5f (make-record-constructor-descriptor u4d63@u4d5e u4d52@u4d4a u4d65@u4d60)) (set! u4d6a@p? (record-predicate u4d63@u4d5e)) (set! u4d6c@make-i/o-file-is-read-only-error (record-constructor u4d67@u4d5f)) (set! u4d6e@i/o-file-is-read-only-error? (condition-predicate u4d63@u4d5e)) (set! u4d70@&i/o-file-is-read-only-rtd u4d63@u4d5e) (set! u4d72@&i/o-file-is-read-only-rcd u4d67@u4d5f) (set! u4d78@u4d73 (make-record-type-descriptor '&i/o-file-already-exists u4d35@u4d30 'u4d76 '#f '#f '#())) (set! u4d7a@u4d75 '#f) (set! u4d7c@u4d74 (make-record-constructor-descriptor u4d78@u4d73 u4d39@u4d31 u4d7a@u4d75)) (set! u4d7f@p? (record-predicate u4d78@u4d73)) (set! u4d81@make-i/o-file-already-exists-error (record-constructor u4d7c@u4d74)) (set! u4d83@i/o-file-already-exists-error? (condition-predicate u4d78@u4d73)) (set! u4d85@&i/o-file-already-exists-rtd u4d78@u4d73) (set! u4d87@&i/o-file-already-exists-rcd u4d7c@u4d74) (set! u4d8d@u4d88 (make-record-type-descriptor '&i/o-file-does-not-exist u4d35@u4d30 'u4d8b '#f '#f '#())) (set! u4d8f@u4d8a '#f) (set! u4d91@u4d89 (make-record-constructor-descriptor u4d8d@u4d88 u4d39@u4d31 u4d8f@u4d8a)) (set! u4d94@p? (record-predicate u4d8d@u4d88)) (set! u4d96@make-i/o-file-does-not-exist-error (record-constructor u4d91@u4d89)) (set! u4d98@i/o-file-does-not-exist-error? (condition-predicate u4d8d@u4d88)) (set! u4d9a@&i/o-file-does-not-exist-rtd u4d8d@u4d88) (set! u4d9c@&i/o-file-does-not-exist-rcd u4d91@u4d89) (set! u4da4@u4d9f (make-record-type-descriptor '&i/o-port u4cd9@u4cd4 'u4da2 '#f '#f '#((immutable port)))) (set! u4da6@u4da1 '#f) (set! u4da8@u4da0 (make-record-constructor-descriptor u4da4@u4d9f u4cdd@u4cd5 u4da6@u4da1)) (set! u4dab@p? (record-predicate u4da4@u4d9f)) (set! u4dad@make-i/o-port-error (record-constructor u4da8@u4da0)) (set! u4daf@u4d9e (record-accessor u4da4@u4d9f '0)) (set! u4db1@i/o-port-error? (condition-predicate u4da4@u4d9f)) (set! u4db3@i/o-error-port (condition-accessor u4da4@u4d9f u4daf@u4d9e)) (set! u4db5@&i/o-port-rtd u4da4@u4d9f) (set! u4db7@&i/o-port-rcd u4da8@u4da0) (set! u4dbd@u4db8 (make-record-type-descriptor '&i/o-decoding u4da4@u4d9f 'u4dbb '#f '#f '#())) (set! u4dbf@u4dba '#f) (set! u4dc1@u4db9 (make-record-constructor-descriptor u4dbd@u4db8 u4da8@u4da0 u4dbf@u4dba)) (set! u4dc4@p? (record-predicate u4dbd@u4db8)) (set! u4dc6@make-i/o-decoding-error (record-constructor u4dc1@u4db9)) (set! u4dc8@i/o-decoding-error? (condition-predicate u4dbd@u4db8)) (set! u4dca@&i/o-decoding-rtd u4dbd@u4db8) (set! u4dcc@&i/o-decoding-rcd u4dc1@u4db9) (set! u4dd4@u4dcf (make-record-type-descriptor '&i/o-encoding u4da4@u4d9f 'u4dd2 '#f '#f '#((immutable char)))) (set! u4dd6@u4dd1 '#f) (set! u4dd8@u4dd0 (make-record-constructor-descriptor u4dd4@u4dcf u4da8@u4da0 u4dd6@u4dd1)) (set! u4ddb@p? (record-predicate u4dd4@u4dcf)) (set! u4ddd@make-i/o-encoding-error (record-constructor u4dd8@u4dd0)) (set! u4ddf@u4dce (record-accessor u4dd4@u4dcf '0)) (set! u4de1@i/o-encoding-error? (condition-predicate u4dd4@u4dcf)) (set! u4de3@i/o-encoding-error-char (condition-accessor u4dd4@u4dcf u4ddf@u4dce)) (set! u4de5@&i/o-encoding-rtd u4dd4@u4dcf) (set! u4de7@&i/o-encoding-rcd u4dd8@u4dd0) (set! u4ded@u4de8 (make-record-type-descriptor '&no-infinities u4c79@u4c74 'u4deb '#f '#f '#())) (set! u4def@u4dea '#f) (set! u4df1@u4de9 (make-record-constructor-descriptor u4ded@u4de8 u4c7d@u4c75 u4def@u4dea)) (set! u4df4@p? (record-predicate u4ded@u4de8)) (set! u4df6@make-no-infinities-violation (record-constructor u4df1@u4de9)) (set! u4df8@no-infinities-violation? (condition-predicate u4ded@u4de8)) (set! u4dfa@&no-infinities-rtd u4ded@u4de8) (set! u4dfc@&no-infinities-rcd u4df1@u4de9) (set! u4e02@u4dfd (make-record-type-descriptor '&no-nans u4c79@u4c74 'u4e00 '#f '#f '#())) (set! u4e04@u4dff '#f) (set! u4e06@u4dfe (make-record-constructor-descriptor u4e02@u4dfd u4c7d@u4c75 u4e04@u4dff)) (set! u4e09@p? (record-predicate u4e02@u4dfd)) (set! u4e0b@make-no-nans-violation (record-constructor u4e06@u4dfe)) (set! u4e0d@no-nans-violation? (condition-predicate u4e02@u4dfd)) (set! u4e0f@&no-nans-rtd u4e02@u4dfd) (set! u4e11@&no-nans-rcd u4e06@u4dfe) (begin (set! u4f02@u4e11@&no-nans-rcd u4e11@&no-nans-rcd) (set! u4f01@u4e0f@&no-nans-rtd u4e0f@&no-nans-rtd) (set! u4f00@u4e0d@no-nans-violation? u4e0d@no-nans-violation?) (set! u4eff@u4e0b@make-no-nans-violation u4e0b@make-no-nans-violation) (set! u4efe@u4e09@p? u4e09@p?) (set! u4efd@u4e06@u4dfe u4e06@u4dfe) (set! u4efc@u4e04@u4dff u4e04@u4dff) (set! u4efb@u4e02@u4dfd u4e02@u4dfd) (set! u4efa@u4dfc@&no-infinities-rcd u4dfc@&no-infinities-rcd) (set! u4ef9@u4dfa@&no-infinities-rtd u4dfa@&no-infinities-rtd) (set! u4ef8@u4df8@no-infinities-violation? u4df8@no-infinities-violation?) (set! u4ef7@u4df6@make-no-infinities-violation u4df6@make-no-infinities-violation) (set! u4ef6@u4df4@p? u4df4@p?) (set! u4ef5@u4df1@u4de9 u4df1@u4de9) (set! u4ef4@u4def@u4dea u4def@u4dea) (set! u4ef3@u4ded@u4de8 u4ded@u4de8) (set! u4ef2@u4de7@&i/o-encoding-rcd u4de7@&i/o-encoding-rcd) (set! u4ef1@u4de5@&i/o-encoding-rtd u4de5@&i/o-encoding-rtd) (set! u4ef0@u4de3@i/o-encoding-error-char u4de3@i/o-encoding-error-char) (set! u4eef@u4de1@i/o-encoding-error? u4de1@i/o-encoding-error?) (set! u4eee@u4ddf@u4dce u4ddf@u4dce) (set! u4eed@u4ddd@make-i/o-encoding-error u4ddd@make-i/o-encoding-error) (set! u4eec@u4ddb@p? u4ddb@p?) (set! u4eeb@u4dd8@u4dd0 u4dd8@u4dd0) (set! u4eea@u4dd6@u4dd1 u4dd6@u4dd1) (set! u4ee9@u4dd4@u4dcf u4dd4@u4dcf) (set! u4ee8@u4dcc@&i/o-decoding-rcd u4dcc@&i/o-decoding-rcd) (set! u4ee7@u4dca@&i/o-decoding-rtd u4dca@&i/o-decoding-rtd) (set! u4ee6@u4dc8@i/o-decoding-error? u4dc8@i/o-decoding-error?) (set! u4ee5@u4dc6@make-i/o-decoding-error u4dc6@make-i/o-decoding-error) (set! u4ee4@u4dc4@p? u4dc4@p?) (set! u4ee3@u4dc1@u4db9 u4dc1@u4db9) (set! u4ee2@u4dbf@u4dba u4dbf@u4dba) (set! u4ee1@u4dbd@u4db8 u4dbd@u4db8) (set! u4ee0@u4db7@&i/o-port-rcd u4db7@&i/o-port-rcd) (set! u4edf@u4db5@&i/o-port-rtd u4db5@&i/o-port-rtd) (set! u4ede@u4db3@i/o-error-port u4db3@i/o-error-port) (set! u4edd@u4db1@i/o-port-error? u4db1@i/o-port-error?) (set! u4edc@u4daf@u4d9e u4daf@u4d9e) (set! u4edb@u4dad@make-i/o-port-error u4dad@make-i/o-port-error) (set! u4eda@u4dab@p? u4dab@p?) (set! u4ed9@u4da8@u4da0 u4da8@u4da0) (set! u4ed8@u4da6@u4da1 u4da6@u4da1) (set! u4ed7@u4da4@u4d9f u4da4@u4d9f) (set! u4ed6@u4d9c@&i/o-file-does-not-exist-rcd u4d9c@&i/o-file-does-not-exist-rcd) (set! u4ed5@u4d9a@&i/o-file-does-not-exist-rtd u4d9a@&i/o-file-does-not-exist-rtd) (set! u4ed4@u4d98@i/o-file-does-not-exist-error? u4d98@i/o-file-does-not-exist-error?) (set! u4ed3@u4d96@make-i/o-file-does-not-exist-error u4d96@make-i/o-file-does-not-exist-error) (set! u4ed2@u4d94@p? u4d94@p?) (set! u4ed1@u4d91@u4d89 u4d91@u4d89) (set! u4ed0@u4d8f@u4d8a u4d8f@u4d8a) (set! u4ecf@u4d8d@u4d88 u4d8d@u4d88) (set! u4ece@u4d87@&i/o-file-already-exists-rcd u4d87@&i/o-file-already-exists-rcd) (set! u4ecd@u4d85@&i/o-file-already-exists-rtd u4d85@&i/o-file-already-exists-rtd) (set! u4ecc@u4d83@i/o-file-already-exists-error? u4d83@i/o-file-already-exists-error?) (set! u4ecb@u4d81@make-i/o-file-already-exists-error u4d81@make-i/o-file-already-exists-error) (set! u4eca@u4d7f@p? u4d7f@p?) (set! u4ec9@u4d7c@u4d74 u4d7c@u4d74) (set! u4ec8@u4d7a@u4d75 u4d7a@u4d75) (set! u4ec7@u4d78@u4d73 u4d78@u4d73) (set! u4ec6@u4d72@&i/o-file-is-read-only-rcd u4d72@&i/o-file-is-read-only-rcd) (set! u4ec5@u4d70@&i/o-file-is-read-only-rtd u4d70@&i/o-file-is-read-only-rtd) (set! u4ec4@u4d6e@i/o-file-is-read-only-error? u4d6e@i/o-file-is-read-only-error?) (set! u4ec3@u4d6c@make-i/o-file-is-read-only-error u4d6c@make-i/o-file-is-read-only-error) (set! u4ec2@u4d6a@p? u4d6a@p?) (set! u4ec1@u4d67@u4d5f u4d67@u4d5f) (set! u4ec0@u4d65@u4d60 u4d65@u4d60) (set! u4ebf@u4d63@u4d5e u4d63@u4d5e) (set! u4ebe@u4d5d@&i/o-file-protection-rcd u4d5d@&i/o-file-protection-rcd) (set! u4ebd@u4d5b@&i/o-file-protection-rtd u4d5b@&i/o-file-protection-rtd) (set! u4ebc@u4d59@i/o-file-protection-error? u4d59@i/o-file-protection-error?) (set! u4ebb@u4d57@make-i/o-file-protection-error u4d57@make-i/o-file-protection-error) (set! u4eba@u4d55@p? u4d55@p?) (set! u4eb9@u4d52@u4d4a u4d52@u4d4a) (set! u4eb8@u4d50@u4d4b u4d50@u4d4b) (set! u4eb7@u4d4e@u4d49 u4d4e@u4d49) (set! u4eb6@u4d48@&i/o-filename-rcd u4d48@&i/o-filename-rcd) (set! u4eb5@u4d46@&i/o-filename-rtd u4d46@&i/o-filename-rtd) (set! u4eb4@u4d44@i/o-error-filename u4d44@i/o-error-filename) (set! u4eb3@u4d42@i/o-filename-error? u4d42@i/o-filename-error?) (set! u4eb2@u4d40@u4d2f u4d40@u4d2f) (set! u4eb1@u4d3e@make-i/o-filename-error u4d3e@make-i/o-filename-error) (set! u4eb0@u4d3c@p? u4d3c@p?) (set! u4eaf@u4d39@u4d31 u4d39@u4d31) (set! u4eae@u4d37@u4d32 u4d37@u4d32) (set! u4ead@u4d35@u4d30 u4d35@u4d30) (set! u4eac@u4d2d@&i/o-invalid-position-rcd u4d2d@&i/o-invalid-position-rcd) (set! u4eab@u4d2b@&i/o-invalid-position-rtd u4d2b@&i/o-invalid-position-rtd) (set! u4eaa@u4d29@i/o-error-position u4d29@i/o-error-position) (set! u4ea9@u4d27@i/o-invalid-position-error? u4d27@i/o-invalid-position-error?) (set! u4ea8@u4d25@u4d14 u4d25@u4d14) (set! u4ea7@u4d23@make-i/o-invalid-position-error u4d23@make-i/o-invalid-position-error) (set! u4ea6@u4d21@p? u4d21@p?) (set! u4ea5@u4d1e@u4d16 u4d1e@u4d16) (set! u4ea4@u4d1c@u4d17 u4d1c@u4d17) (set! u4ea3@u4d1a@u4d15 u4d1a@u4d15) (set! u4ea2@u4d12@&i/o-write-rcd u4d12@&i/o-write-rcd) (set! u4ea1@u4d10@&i/o-write-rtd u4d10@&i/o-write-rtd) (set! u4ea0@u4d0e@i/o-write-error? u4d0e@i/o-write-error?) (set! u4e9f@u4d0c@make-i/o-write-error u4d0c@make-i/o-write-error) (set! u4e9e@u4d0a@p? u4d0a@p?) (set! u4e9d@u4d07@u4cff u4d07@u4cff) (set! u4e9c@u4d05@u4d00 u4d05@u4d00) (set! u4e9b@u4d03@u4cfe u4d03@u4cfe) (set! u4e9a@u4cfd@&i/o-read-rcd u4cfd@&i/o-read-rcd) (set! u4e99@u4cfb@&i/o-read-rtd u4cfb@&i/o-read-rtd) (set! u4e98@u4cf9@i/o-read-error? u4cf9@i/o-read-error?) (set! u4e97@u4cf7@make-i/o-read-error u4cf7@make-i/o-read-error) (set! u4e96@u4cf5@p? u4cf5@p?) (set! u4e95@u4cf2@u4cea u4cf2@u4cea) (set! u4e94@u4cf0@u4ceb u4cf0@u4ceb) (set! u4e93@u4cee@u4ce9 u4cee@u4ce9) (set! u4e92@u4ce8@&i/o-rcd u4ce8@&i/o-rcd) (set! u4e91@u4ce6@&i/o-rtd u4ce6@&i/o-rtd) (set! u4e90@u4ce4@i/o-error? u4ce4@i/o-error?) (set! u4e8f@u4ce2@make-i/o-error u4ce2@make-i/o-error) (set! u4e8e@u4ce0@p? u4ce0@p?) (set! u4e8d@u4cdd@u4cd5 u4cdd@u4cd5) (set! u4e8c@u4cdb@u4cd6 u4cdb@u4cd6) (set! u4e8b@u4cd9@u4cd4 u4cd9@u4cd4) (set! u4e8a@u4cd3@&undefined-rcd u4cd3@&undefined-rcd) (set! u4e89@u4cd1@&undefined-rtd u4cd1@&undefined-rtd) (set! u4e88@u4ccf@undefined-violation? u4ccf@undefined-violation?) (set! u4e87@u4ccd@make-undefined-violation u4ccd@make-undefined-violation) (set! u4e86@u4ccb@p? u4ccb@p?) (set! u4e85@u4cc8@u4cc0 u4cc8@u4cc0) (set! u4e84@u4cc6@u4cc1 u4cc6@u4cc1) (set! u4e83@u4cc4@u4cbf u4cc4@u4cbf) (set! u4e82@u4cbe@&syntax-rcd u4cbe@&syntax-rcd) (set! u4e81@u4cbc@&syntax-rtd u4cbc@&syntax-rtd) (set! u4e80@u4cba@syntax-violation-subform u4cba@syntax-violation-subform) (set! u4e7f@u4cb8@syntax-violation-form u4cb8@syntax-violation-form) (set! u4e7e@u4cb6@syntax-violation? u4cb6@syntax-violation?) (set! u4e7d@u4cb4@u4ca1 u4cb4@u4ca1) (set! u4e7c@u4cb2@u4c9f u4cb2@u4c9f) (set! u4e7b@u4cb0@make-syntax-violation u4cb0@make-syntax-violation) (set! u4e7a@u4cae@p? u4cae@p?) (set! u4e79@u4cab@u4ca3 u4cab@u4ca3) (set! u4e78@u4ca9@u4ca4 u4ca9@u4ca4) (set! u4e77@u4ca7@u4ca2 u4ca7@u4ca2) (set! u4e76@u4c9d@&lexical-rcd u4c9d@&lexical-rcd) (set! u4e75@u4c9b@&lexical-rtd u4c9b@&lexical-rtd) (set! u4e74@u4c99@lexical-violation? u4c99@lexical-violation?) (set! u4e73@u4c97@make-lexical-violation u4c97@make-lexical-violation) (set! u4e72@u4c95@p? u4c95@p?) (set! u4e71@u4c92@u4c8a u4c92@u4c8a) (set! u4e70@u4c90@u4c8b u4c90@u4c8b) (set! u4e6f@u4c8e@u4c89 u4c8e@u4c89) (set! u4e6e@u4c88@&implementation-restriction-rcd u4c88@&implementation-restriction-rcd) (set! u4e6d@u4c86@&implementation-restriction-rtd u4c86@&implementation-restriction-rtd) (set! u4e6c@u4c84@implementation-restriction-violation? u4c84@implementation-restriction-violation?) (set! u4e6b@u4c82@make-implementation-restriction-violation u4c82@make-implementation-restriction-violation) (set! u4e6a@u4c80@p? u4c80@p?) (set! u4e69@u4c7d@u4c75 u4c7d@u4c75) (set! u4e68@u4c7b@u4c76 u4c7b@u4c76) (set! u4e67@u4c79@u4c74 u4c79@u4c74) (set! u4e66@u4c73@&non-continuable-rcd u4c73@&non-continuable-rcd) (set! u4e65@u4c71@&non-continuable-rtd u4c71@&non-continuable-rtd) (set! u4e64@u4c6f@non-continuable-violation? u4c6f@non-continuable-violation?) (set! u4e63@u4c6d@make-non-continuable-violation u4c6d@make-non-continuable-violation) (set! u4e62@u4c6b@p? u4c6b@p?) (set! u4e61@u4c68@u4c60 u4c68@u4c60) (set! u4e60@u4c66@u4c61 u4c66@u4c61) (set! u4e5f@u4c64@u4c5f u4c64@u4c5f) (set! u4e5e@u4c5e@&who-rcd u4c5e@&who-rcd) (set! u4e5d@u4c5c@&who-rtd u4c5c@&who-rtd) (set! u4e5c@u4c5a@condition-who u4c5a@condition-who) (set! u4e5b@u4c58@who-condition? u4c58@who-condition?) (set! u4e5a@u4c56@u4c45 u4c56@u4c45) (set! u4e59@u4c54@make-who-condition u4c54@make-who-condition) (set! u4e58@u4c52@p? u4c52@p?) (set! u4e57@u4c4f@u4c47 u4c4f@u4c47) (set! u4e56@u4c4d@u4c48 u4c4d@u4c48) (set! u4e55@u4c4b@u4c46 u4c4b@u4c46) (set! u4e54@u4c43@&irritants-rcd u4c43@&irritants-rcd) (set! u4e53@u4c41@&irritants-rtd u4c41@&irritants-rtd) (set! u4e52@u4c3f@condition-irritants u4c3f@condition-irritants) (set! u4e51@u4c3d@irritants-condition? u4c3d@irritants-condition?) (set! u4e50@u4c3b@u4c2a u4c3b@u4c2a) (set! u4e4f@u4c39@make-irritants-condition u4c39@make-irritants-condition) (set! u4e4e@u4c37@p? u4c37@p?) (set! u4e4d@u4c34@u4c2c u4c34@u4c2c) (set! u4e4c@u4c32@u4c2d u4c32@u4c2d) (set! u4e4b@u4c30@u4c2b u4c30@u4c2b) (set! u4e4a@u4c28@&assertion-rcd u4c28@&assertion-rcd) (set! u4e49@u4c26@&assertion-rtd u4c26@&assertion-rtd) (set! u4e48@u4c24@assertion-violation? u4c24@assertion-violation?) (set! u4e47@u4c22@make-assertion-violation u4c22@make-assertion-violation) (set! u4e46@u4c20@p? u4c20@p?) (set! u4e45@u4c1d@u4c15 u4c1d@u4c15) (set! u4e44@u4c1b@u4c16 u4c1b@u4c16) (set! u4e43@u4c19@u4c14 u4c19@u4c14) (set! u4e42@u4c13@&violation-rcd u4c13@&violation-rcd) (set! u4e41@u4c11@&violation-rtd u4c11@&violation-rtd) (set! u4e40@u4c0f@violation? u4c0f@violation?) (set! u4e3f@u4c0d@make-violation u4c0d@make-violation) (set! u4e3e@u4c0b@p? u4c0b@p?) (set! u4e3d@u4c08@u4c00 u4c08@u4c00) (set! u4e3c@u4c06@u4c01 u4c06@u4c01) (set! u4e3b@u4c04@u4bff u4c04@u4bff) (set! u4e3a@u4bfe@&error-rcd u4bfe@&error-rcd) (set! u4e39@u4bfc@&error-rtd u4bfc@&error-rtd) (set! u4e38@u4bfa@error? u4bfa@error?) (set! u4e37@u4bf8@make-error u4bf8@make-error) (set! u4e36@u4bf6@p? u4bf6@p?) (set! u4e35@u4bf3@u4beb u4bf3@u4beb) (set! u4e34@u4bf1@u4bec u4bf1@u4bec) (set! u4e33@u4bef@u4bea u4bef@u4bea) (set! u4e32@u4be9@&serious-rcd u4be9@&serious-rcd) (set! u4e31@u4be7@&serious-rtd u4be7@&serious-rtd) (set! u4e30@u4be5@serious-condition? u4be5@serious-condition?) (set! u4e2f@u4be3@make-serious-condition u4be3@make-serious-condition) (set! u4e2e@u4be1@p? u4be1@p?) (set! u4e2d@u4bde@u4bd6 u4bde@u4bd6) (set! u4e2c@u4bdc@u4bd7 u4bdc@u4bd7) (set! u4e2b@u4bda@u4bd5 u4bda@u4bd5) (set! u4e2a@u4bd4@&warning-rcd u4bd4@&warning-rcd) (set! u4e29@u4bd2@&warning-rtd u4bd2@&warning-rtd) (set! u4e28@u4bd0@warning? u4bd0@warning?) (set! u4e27@u4bce@make-warning u4bce@make-warning) (set! u4e26@u4bcc@p? u4bcc@p?) (set! u4e25@u4bc9@u4bc1 u4bc9@u4bc1) (set! u4e24@u4bc7@u4bc2 u4bc7@u4bc2) (set! u4e23@u4bc5@u4bc0 u4bc5@u4bc0) (set! u4e22@u4bbf@&message-rcd u4bbf@&message-rcd) (set! u4e21@u4bbd@&message-rtd u4bbd@&message-rtd) (set! u4e20@u4bbb@condition-message u4bbb@condition-message) (set! u4e1f@u4bb9@message-condition? u4bb9@message-condition?) (set! u4e1e@u4bb7@u4ba6 u4bb7@u4ba6) (set! u4e1d@u4bb5@make-message-condition u4bb5@make-message-condition) (set! u4e1c@u4bb3@p? u4bb3@p?) (set! u4e1b@u4bb0@u4ba8 u4bb0@u4ba8) (set! u4e1a@u4bae@u4ba9 u4bae@u4ba9) (set! u4e19@u4bac@u4ba7 u4bac@u4ba7) (set! u4e18@u4b60@&condition-rcd u4b60@&condition-rcd) (set! u4e17@u4b5e@&condition-rtd u4b5e@&condition-rtd) (set! u4e16@u4b5c@make-&condition u4b5c@make-&condition) (set! u4e15@u4b5a@&condition? u4b5a@&condition?) (set! u4e14@u4b57@u4b4f u4b57@u4b4f) (set! u4e13@u4b55@u4b50 u4b55@u4b50) (set! u4e12@u4b53@u4b4e u4b53@u4b4e)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (u29f5@u29aa@current-primitive-locations (lambda (u53da@x) ((lambda (u53dc@t) (if u53dc@t (cdr u53dc@t) '#f)) (assq u53da@x '((&no-nans-rcd . u4f02@u4e11@&no-nans-rcd) (&no-nans-rtd . u4f01@u4e0f@&no-nans-rtd) (&no-infinities-rcd . u4efa@u4dfc@&no-infinities-rcd) (&no-infinities-rtd . u4ef9@u4dfa@&no-infinities-rtd) (&i/o-encoding-rcd . u4ef2@u4de7@&i/o-encoding-rcd) (&i/o-encoding-rtd . u4ef1@u4de5@&i/o-encoding-rtd) (&i/o-decoding-rcd . u4ee8@u4dcc@&i/o-decoding-rcd) (&i/o-decoding-rtd . u4ee7@u4dca@&i/o-decoding-rtd) (&i/o-port-rcd . u4ee0@u4db7@&i/o-port-rcd) (&i/o-port-rtd . u4edf@u4db5@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . u4ed6@u4d9c@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . u4ed5@u4d9a@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . u4ece@u4d87@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . u4ecd@u4d85@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . u4ec6@u4d72@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . u4ec5@u4d70@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . u4ebe@u4d5d@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . u4ebd@u4d5b@&i/o-file-protection-rtd) (&i/o-filename-rcd . u4eb6@u4d48@&i/o-filename-rcd) (&i/o-filename-rtd . u4eb5@u4d46@&i/o-filename-rtd) (&i/o-invalid-position-rcd . u4eac@u4d2d@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . u4eab@u4d2b@&i/o-invalid-position-rtd) (&i/o-write-rcd . u4ea2@u4d12@&i/o-write-rcd) (&i/o-write-rtd . u4ea1@u4d10@&i/o-write-rtd) (&i/o-read-rcd . u4e9a@u4cfd@&i/o-read-rcd) (&i/o-read-rtd . u4e99@u4cfb@&i/o-read-rtd) (&i/o-rcd . u4e92@u4ce8@&i/o-rcd) (&i/o-rtd . u4e91@u4ce6@&i/o-rtd) (&undefined-rcd . u4e8a@u4cd3@&undefined-rcd) (&undefined-rtd . u4e89@u4cd1@&undefined-rtd) (&syntax-rcd . u4e82@u4cbe@&syntax-rcd) (&syntax-rtd . u4e81@u4cbc@&syntax-rtd) (&lexical-rcd . u4e76@u4c9d@&lexical-rcd) (&lexical-rtd . u4e75@u4c9b@&lexical-rtd) (&implementation-restriction-rcd . u4e6e@u4c88@&implementation-restriction-rcd) (&implementation-restriction-rtd . u4e6d@u4c86@&implementation-restriction-rtd) (&non-continuable-rcd . u4e66@u4c73@&non-continuable-rcd) (&non-continuable-rtd . u4e65@u4c71@&non-continuable-rtd) (&who-rcd . u4e5e@u4c5e@&who-rcd) (&who-rtd . u4e5d@u4c5c@&who-rtd) (&irritants-rcd . u4e54@u4c43@&irritants-rcd) (&irritants-rtd . u4e53@u4c41@&irritants-rtd) (&assertion-rcd . u4e4a@u4c28@&assertion-rcd) (&assertion-rtd . u4e49@u4c26@&assertion-rtd) (&violation-rcd . u4e42@u4c13@&violation-rcd) (&violation-rtd . u4e41@u4c11@&violation-rtd) (&error-rcd . u4e3a@u4bfe@&error-rcd) (&error-rtd . u4e39@u4bfc@&error-rtd) (&serious-rcd . u4e32@u4be9@&serious-rcd) (&serious-rtd . u4e31@u4be7@&serious-rtd) (&warning-rcd . u4e2a@u4bd4@&warning-rcd) (&warning-rtd . u4e29@u4bd2@&warning-rtd) (&message-rcd . u4e22@u4bbf@&message-rcd) (&message-rtd . u4e21@u4bbd@&message-rtd) (&condition-rcd . u4e18@u4b60@&condition-rcd) (&condition-rtd . u4e17@u4b5e@&condition-rtd) (syntax-error . u4b3b@u3124@syntax-error) (syntax-dispatch . u4ad9@u3048@syntax-dispatch) (load . u5087@u4f1e@load) (interaction-environment . u4b43@u3134@interaction-environment) (library-path . u2c5c@u2a98@library-path) (make-parameter . u29a2@u2881@make-parameter) (make-variable-transformer . u4a97@u2e75@make-variable-transformer) (identifier? . u4b3e@u312a@identifier?) (generate-temporaries . u4b34@u3116@generate-temporaries) (free-identifier=? . u4b35@u3118@free-identifier=?) (syntax->datum . u4b40@u312e@syntax->datum) (datum->syntax . u4b3f@u312c@datum->syntax) (bound-identifier=? . u4b36@u311a@bound-identifier=?) (make-i/o-write-error . u4e9f@u4d0c@make-i/o-write-error) (make-i/o-read-error . u4e97@u4cf7@make-i/o-read-error) (make-i/o-port-error . u4edb@u4dad@make-i/o-port-error) (make-i/o-invalid-position-error . u4ea7@u4d23@make-i/o-invalid-position-error) (make-i/o-filename-error . u4eb1@u4d3e@make-i/o-filename-error) (make-i/o-file-protection-error . u4ebb@u4d57@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . u4ec3@u4d6c@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . u4ed3@u4d96@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . u4ecb@u4d81@make-i/o-file-already-exists-error) (make-i/o-error . u4e8f@u4ce2@make-i/o-error) (make-i/o-encoding-error . u4eed@u4ddd@make-i/o-encoding-error) (make-i/o-decoding-error . u4ee5@u4dc6@make-i/o-decoding-error) (i/o-write-error? . u4ea0@u4d0e@i/o-write-error?) (i/o-read-error? . u4e98@u4cf9@i/o-read-error?) (i/o-port-error? . u4edd@u4db1@i/o-port-error?) (i/o-invalid-position-error? . u4ea9@u4d27@i/o-invalid-position-error?) (i/o-filename-error? . u4eb3@u4d42@i/o-filename-error?) (i/o-file-protection-error? . u4ebc@u4d59@i/o-file-protection-error?) (i/o-file-is-read-only-error? . u4ec4@u4d6e@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . u4ed4@u4d98@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . u4ecc@u4d83@i/o-file-already-exists-error?) (i/o-error? . u4e90@u4ce4@i/o-error?) (i/o-error-position . u4eaa@u4d29@i/o-error-position) (i/o-error-port . u4ede@u4db3@i/o-error-port) (i/o-error-filename . u4eb4@u4d44@i/o-error-filename) (i/o-encoding-error? . u4eef@u4de1@i/o-encoding-error?) (i/o-encoding-error-char . u4ef0@u4de3@i/o-encoding-error-char) (i/o-decoding-error? . u4ee6@u4dc8@i/o-decoding-error?) (scheme-report-environment . u4b2b@u3104@scheme-report-environment) (null-environment . u4b2a@u3102@null-environment) (command-line . u5084@u4f18@command-line) (eval . u4b2d@u3108@eval) (environment . u4b29@u3100@environment) (who-condition? . u4e5b@u4c58@who-condition?) (warning? . u4e28@u4bd0@warning?) (violation? . u4e40@u4c0f@violation?) (undefined-violation? . u4e88@u4ccf@undefined-violation?) (syntax-violation? . u4e7e@u4cb6@syntax-violation?) (syntax-violation-subform . u4e80@u4cba@syntax-violation-subform) (syntax-violation-form . u4e7f@u4cb8@syntax-violation-form) (syntax-violation . u4b3d@u3128@syntax-violation) (serious-condition? . u4e30@u4be5@serious-condition?) (non-continuable-violation? . u4e64@u4c6f@non-continuable-violation?) (message-condition? . u4e1f@u4bb9@message-condition?) (make-who-condition . u4e59@u4c54@make-who-condition) (make-warning . u4e27@u4bce@make-warning) (make-violation . u4e3f@u4c0d@make-violation) (make-undefined-violation . u4e87@u4ccd@make-undefined-violation) (make-syntax-violation . u4e7b@u4cb0@make-syntax-violation) (make-serious-condition . u4e2f@u4be3@make-serious-condition) (make-non-continuable-violation . u4e63@u4c6d@make-non-continuable-violation) (make-message-condition . u4e1d@u4bb5@make-message-condition) (make-lexical-violation . u4e73@u4c97@make-lexical-violation) (make-irritants-condition . u4e4f@u4c39@make-irritants-condition) (make-implementation-restriction-violation . u4e6b@u4c82@make-implementation-restriction-violation) (make-error . u4e37@u4bf8@make-error) (make-assertion-violation . u4e47@u4c22@make-assertion-violation) (lexical-violation? . u4e74@u4c99@lexical-violation?) (irritants-condition? . u4e51@u4c3d@irritants-condition?) (implementation-restriction-violation? . u4e6c@u4c84@implementation-restriction-violation?) (error? . u4e38@u4bfa@error?) (condition-who . u4e5c@u4c5a@condition-who) (condition-message . u4e20@u4bbb@condition-message) (condition-irritants . u4e52@u4c3f@condition-irritants) (assertion-violation? . u4e48@u4c24@assertion-violation?) (no-nans-violation? . u4f00@u4e0d@no-nans-violation?) (no-infinities-violation? . u4ef8@u4df8@no-infinities-violation?) (make-no-nans-violation . u4eff@u4e0b@make-no-nans-violation) (make-no-infinities-violation . u4ef7@u4df6@make-no-infinities-violation) (assertion-error . u4b3a@u3122@assertion-error)))))) (u2c6c@u2ab8@install-library 'u53b7 '(mosh interaction) '() '() '() '() '((regexp? . u53af) (alist->eq-hash-table . u53ab) (format . u53a8) (string-split . u539d) (call-process . u5397) (set-current-directory! . u5393) (expand-path . u5392) (current-directory . u5391) (%spawn . u5390) (%waitpid . u538f) (simple-struct-name . u538e) (simple-struct-set! . u538d) (simple-struct-ref . u538c) (make-simple-struct . u538b) (simple-struct? . u538a) (pointer-ref-c-int64 . u5389) (pointer-ref-c-int32 . u5388) (pointer-ref-c-int16 . u5387) (pointer-ref-c-int8 . u5386) (pointer-ref-c-uint64 . u5385) (pointer-ref-c-uint32 . u5384) (pointer-ref-c-uint16 . u5383) (pointer-ref-c-uint8 . u5382) (pointer-set-c-uint64! . u5381) (pointer-set-c-uint32! . u5380) (pointer-set-c-uint16! . u537f) (pointer-set-c-uint8! . u537e) (pointer-set-c-int64! . u537d) (pointer-set-c-int32! . u537c) (pointer-set-c-int16! . u537b) (pointer-set-c-int8! . u537a) (pointer-set-c-pointer! . u5379) (pointer-set-c-double! . u5378) (pointer-set-c-float! . u5377) (pointer-set-c-long-long! . u5376) (pointer-set-c-long! . u5375) (pointer-set-c-int! . u5374) (pointer-set-c-short! . u5373) (pointer-set-c-char! . u5372) (pointer-ref-c-pointer . u5371) (pointer-ref-c-double . u5370) (pointer-ref-c-float . u536f) (pointer-ref-c-unsigned-long-long . u536e) (pointer-ref-c-signed-long-long . u536d) (pointer-ref-c-unsigned-long . u536c) (pointer-ref-c-signed-long . u536b) (pointer-ref-c-unsigned-int . u536a) (pointer-ref-c-signed-int . u5369) (pointer-ref-c-unsigned-short . u5368) (pointer-ref-c-signed-short . u5367) (pointer-ref-c-unsigned-char . u5366) (pointer-ref-c-signed-char . u5365) (pointer->integer . u5364) (integer->pointer . u5363) (pointer? . u5362) (shared-errno . u5361) (%ffi-supported? . u5360) (%ffi-pointer->string . u535f) (%ffi-call->string-or-zero . u535e) (%ffi-call->double . u535d) (%ffi-call->void* . u535c) (%ffi-call->void . u535b) (%ffi-call->char . u535a) (%ffi-call->int . u5359) (%ffi-lookup . u5358) (%ffi-open . u5357) (%fork . u5356) (%pipe . u5355) (p . u5354) (whereis . u5339) (register . u5338) (vm-join! . u5337) (vm-set-value! . u5336) (vm? . u5335) (main-vm? . u5334) (vm-eval . u5333) (vm-self . u5332) (vm-start! . u5331) (make-vm . u5330) (mutex-try-lock! . u532f) (mutex-unlock! . u532e) (mutex-lock! . u532d) (mutex? . u532c) (make-mutex . u532b) (condition-variable-notify-all! . u532a) (condition-variable-notify! . u5329) (condition-variable-wait! . u5328) (make-condition-variable . u5327) (string-upcase . u5310) (string-titlecase . u530f) (string-normalize-nfkd . u530e) (string-normalize-nfkc . u530d) (string-normalize-nfd . u530c) (string-normalize-nfc . u530b) (string-foldcase . u530a) (string-downcase . u5309) (string-ci>? . u5308) (string-ci>=? . u5307) (string-ci=? . u5306) (string-ci<? . u5305) (string-ci<=? . u5304) (char-whitespace? . u5303) (char-upper-case? . u5302) (char-title-case? . u5301) (char-numeric? . u5300) (char-lower-case? . u52ff) (char-general-category . u52fe) (char-upcase . u52fd) (char-titlecase . u52fc) (char-foldcase . u52fb) (char-downcase . u52fa) (char-ci>? . u52f9) (char-ci>=? . u52f8) (char-ci=? . u52f7) (char-ci<? . u52f6) (char-ci<=? . u52f5) (char-alphabetic? . u52f4) (make-variable-transformer . u2e74) (identifier? . u3129) (generate-temporaries . u3115) (free-identifier=? . u3117) (syntax->datum . u312d) (datum->syntax . u312b) (bound-identifier=? . u3119) (record-type-descriptor? . u52f3) (record-predicate . u52f2) (record-mutator . u52f1) (record-constructor . u52f0) (record-accessor . u52ef) (make-record-type-descriptor . u52ee) (make-record-constructor-descriptor . u52ed) (record? . u52ec) (record-type-uid . u52eb) (record-type-sealed? . u52ea) (record-type-parent . u52e9) (record-type-opaque? . u52e8) (record-type-name . u52e7) (record-type-generative? . u52e6) (record-type-field-names . u52e5) (record-rtd . u52e4) (record-field-mutable? . u52e3) (delete-file . u52e2) (file-exists? . u52e1) (vector-sort! . u52e0) (vector-sort . u52df) (list-sort . u52de) (symbol-hash . u52dd) (string-ci-hash . u52dc) (string-hash . u52db) (equal-hash . u52da) (hashtable-equivalence-function . u52d9) (make-hashtable . u52d8) (hashtable-hash-function . u52d7) (make-eqv-hashtable . u52d6) (make-eq-hashtable . u52d5) (hashtable? . u52d4) (hashtable-update! . u52d3) (hashtable-size . u52d2) (hashtable-set! . u52d1) (hashtable-ref . u52d0) (hashtable-mutable? . u52cf) (hashtable-keys . u52ce) (hashtable-entries . u52cd) (hashtable-delete! . u52cc) (hashtable-copy . u52cb) (hashtable-contains? . u52ca) (hashtable-clear! . u52c9) (call-with-output-file . u52c8) (call-with-input-file . u52c7) (write-char . u52c6) (write . u52c5) (with-output-to-file . u52c4) (with-input-from-file . u52c3) (read-char . u52c2) (read . u52c1) (peek-char . u52c0) (open-output-file . u52bf) (open-input-file . u52be) (newline . u52bd) (display . u52bc) (close-output-port . u52bb) (close-input-port . u52ba) (eof-object? . u52b9) (eof-object . u52b8) (current-error-port . u52b7) (current-output-port . u52b6) (current-input-port . u52b5) (output-port? . u52b4) (input-port? . u52b3) (utf-8-codec . u52b2) (utf-16-codec . u52b1) (transcoder-error-handling-mode . u52b0) (transcoder-eol-style . u52af) (transcoder-codec . u52ae) (transcoded-port . u52ad) (textual-port? . u52ac) (string->bytevector . u52ab) (standard-output-port . u52aa) (standard-input-port . u52a9) (standard-error-port . u52a8) (set-port-position! . u52a7) (put-u8 . u52a6) (put-string . u52a5) (put-datum . u52a4) (put-char . u52a3) (put-bytevector . u52a2) (port? . u52a1) (port-transcoder . u52a0) (port-position . u529f) (port-has-set-port-position!? . u529e) (port-has-port-position? . u529d) (port-eof? . u529c) (output-port-buffer-mode . u529b) (open-string-output-port . u529a) (open-string-input-port . u5299) (open-file-output-port . u5298) (open-file-input/output-port . u5297) (open-file-input-port . u5296) (open-bytevector-output-port . u5295) (open-bytevector-input-port . u5294) (native-transcoder . u5293) (native-eol-style . u5292) (make-transcoder . u5291) (latin-1-codec . u5290) (make-i/o-write-error . u4d0b) (make-i/o-read-error . u4cf6) (make-i/o-port-error . u4dac) (make-i/o-invalid-position-error . u4d22) (make-i/o-filename-error . u4d3d) (make-i/o-file-protection-error . u4d56) (make-i/o-file-is-read-only-error . u4d6b) (make-i/o-file-does-not-exist-error . u4d95) (make-i/o-file-already-exists-error . u4d80) (make-i/o-error . u4ce1) (make-i/o-encoding-error . u4ddc) (make-i/o-decoding-error . u4dc5) (make-custom-textual-output-port . u528f) (make-custom-textual-input/output-port . u528e) (make-custom-textual-input-port . u528d) (make-custom-binary-output-port . u528c) (make-custom-binary-input/output-port . u528b) (make-custom-binary-input-port . u528a) (make-bytevector . u5289) (lookahead-u8 . u5288) (lookahead-char . u5287) (i/o-write-error? . u4d0d) (i/o-read-error? . u4cf8) (i/o-port-error? . u4db0) (i/o-invalid-position-error? . u4d26) (i/o-filename-error? . u4d41) (i/o-file-protection-error? . u4d58) (i/o-file-is-read-only-error? . u4d6d) (i/o-file-does-not-exist-error? . u4d97) (i/o-file-already-exists-error? . u4d82) (i/o-error? . u4ce3) (i/o-error-position . u4d28) (i/o-error-port . u4db2) (i/o-error-filename . u4d43) (i/o-encoding-error? . u4de0) (i/o-encoding-error-char . u4de2) (i/o-decoding-error? . u4dc7) (get-u8 . u5286) (get-string-n! . u5285) (get-string-n . u5284) (get-string-all . u5283) (get-line . u5282) (get-datum . u5281) (get-char . u5280) (get-bytevector-some . u527f) (get-bytevector-n! . u527e) (get-bytevector-n . u527d) (get-bytevector-all . u527c) (flush-output-port . u527b) (close-port . u527a) (exit . u5272) (command-line . u4f17) (string-fill! . u5271) (string-set! . u5270) (set-cdr! . u526f) (set-car! . u526e) (remove . u526d) (remv . u526c) (remp . u526b) (remq . u526a) (partition . u5269) (memv . u5268) (memq . u5267) (memp . u5266) (member . u5265) (exists . u5264) (for-all . u5263) (fold-right . u5262) (fold-left . u5261) (find . u5260) (filter . u525f) (cons* . u525e) (assv . u525d) (assq . u525c) (assp . u525b) (assoc . u525a) (call-with-string-output-port . u5259) (call-with-port . u5258) (call-with-bytevector-output-port . u5257) (bytevector->string . u5256) (buffer-mode? . u5255) (binary-port? . u5254) (with-exception-handler . u5253) (raise-continuable . u5252) (raise . u5251) (eval . u3107) (environment . u30ff) (make-enumeration . u5250) (enum-set=? . u524f) (enum-set-universe . u524e) (enum-set-union . u524d) (enum-set-subset? . u524c) (enum-set-projection . u524b) (enum-set-member? . u524a) (enum-set-intersection . u5249) (enum-set-indexer . u5248) (enum-set-difference . u5247) (enum-set-constructor . u5246) (enum-set-complement . u5245) (enum-set->list . u5244) (who-condition? . u4c57) (warning? . u4bcf) (violation? . u4c0e) (undefined-violation? . u4cce) (syntax-violation? . u4cb5) (syntax-violation-subform . u4cb9) (syntax-violation-form . u4cb7) (syntax-violation . u3127) (simple-conditions . u5243) (serious-condition? . u4be4) (non-continuable-violation? . u4c6e) (message-condition? . u4bb8) (make-who-condition . u4c53) (make-warning . u4bcd) (make-violation . u4c0c) (make-undefined-violation . u4ccc) (make-syntax-violation . u4caf) (make-serious-condition . u4be2) (make-non-continuable-violation . u4c6c) (make-message-condition . u4bb4) (make-lexical-violation . u4c96) (make-irritants-condition . u4c38) (make-implementation-restriction-violation . u4c81) (make-error . u4bf7) (make-assertion-violation . u4c21) (lexical-violation? . u4c98) (irritants-condition? . u4c3c) (implementation-restriction-violation? . u4c83) (error? . u4bf9) (condition-who . u4c59) (condition-predicate . u5242) (condition-message . u4bba) (condition-irritants . u4c3e) (condition-accessor . u5241) (condition . u5240) (assertion-violation? . u4c23) (condition? . u523f) (utf32->string . u523e) (utf16->string . u523d) (utf8->string . u523c) (uint-list->bytevector . u523b) (u8-list->bytevector . u523a) (string->utf8 . u5239) (string->utf32 . u5238) (string->utf16 . u5237) (sint-list->bytevector . u5236) (native-endianness . u5235) (bytevector? . u5234) (bytevector=? . u5233) (bytevector-uint-set! . u5232) (bytevector-uint-ref . u5231) (bytevector-u8-set! . u5230) (bytevector-u8-ref . u522f) (bytevector-u64-set! . u522e) (bytevector-u64-ref . u522d) (bytevector-u64-native-set! . u522c) (bytevector-u64-native-ref . u522b) (bytevector-u32-set! . u522a) (bytevector-u32-ref . u5229) (bytevector-u32-native-set! . u5228) (bytevector-u32-native-ref . u5227) (bytevector-u16-set! . u5226) (bytevector-u16-ref . u5225) (bytevector-u16-native-set! . u5224) (bytevector-u16-native-ref . u5223) (bytevector-sint-set! . u5222) (bytevector-sint-ref . u5221) (bytevector-s8-set! . u5220) (bytevector-s8-ref . u521f) (bytevector-s64-set! . u521e) (bytevector-s64-ref . u521d) (bytevector-s64-native-set! . u521c) (bytevector-s64-native-ref . u521b) (bytevector-s32-set! . u521a) (bytevector-s32-ref . u5219) (bytevector-s32-native-set! . u5218) (bytevector-s32-native-ref . u5217) (bytevector-s16-set! . u5216) (bytevector-s16-ref . u5215) (bytevector-s16-native-set! . u5214) (bytevector-s16-native-ref . u5213) (bytevector-length . u5212) (bytevector-ieee-single-ref . u5211) (bytevector-ieee-single-set! . u5210) (bytevector-ieee-single-native-set! . u520f) (bytevector-ieee-single-native-ref . u520e) (bytevector-ieee-double-set! . u520d) (bytevector-ieee-double-ref . u520c) (bytevector-ieee-double-native-set! . u520b) (bytevector-ieee-double-native-ref . u520a) (bytevector-fill! . u5209) (bytevector-copy! . u5208) (bytevector-copy . u5207) (bytevector->uint-list . u5206) (bytevector->u8-list . u5205) (bytevector->sint-list . u5204) (no-nans-violation? . u4e0c) (no-infinities-violation? . u4df7) (make-no-nans-violation . u4e0a) (make-no-infinities-violation . u4df5) (real->flonum . u5203) (flzero? . u5202) (fltruncate . u5201) (fltan . u5200) (flsqrt . u51ff) (flsin . u51fe) (flround . u51fd) (flpositive? . u51fc) (flonum? . u51fb) (flodd? . u51fa) (flnumerator . u51f9) (flnegative? . u51f8) (flnan? . u51f7) (flmod0 . u51f6) (flmod . u51f5) (flmin . u51f4) (flmax . u51f3) (fllog . u51f2) (flinteger? . u51f1) (flinfinite? . u51f0) (flfloor . u51ef) (flfinite? . u51ee) (flexpt . u51ed) (flexp . u51ec) (fleven? . u51eb) (fldiv0-and-mod0 . u51ea) (fldiv0 . u51e9) (fldiv-and-mod . u51e8) (fldiv . u51e7) (fldenominator . u51e6) (flcos . u51e5) (flceiling . u51e4) (flatan . u51e3) (flasin . u51e2) (flacos . u51e1) (flabs . u51e0) (fl>? . u51df) (fl>=? . u51de) (fl=? . u51dd) (fl<? . u51dc) (fl<=? . u51db) (fl/ . u51da) (fl- . u51d9) (fl+ . u51d8) (fl* . u51d7) (fixnum->flonum . u51d6) (fxzero? . u51d5) (fxxor . u51d4) (fxrotate-bit-field . u51d3) (fxreverse-bit-field . u51d2) (fxpositive? . u51d1) (fxodd? . u51d0) (fxnot . u51cf) (fxnegative? . u51ce) (fxmod0 . u51cd) (fxmod . u51cc) (fxmin . u51cb) (fxmax . u51ca) (fxlength . u51c9) (fxior . u51c8) (fxif . u51c7) (fxfirst-bit-set . u51c6) (fxeven? . u51c5) (fxdiv0-and-mod0 . u51c4) (fxdiv0 . u51c3) (fxdiv-and-mod . u51c2) (fxdiv . u51c1) (fxcopy-bit-field . u51c0) (fxcopy-bit . u51bf) (fxbit-set? . u51be) (fxbit-field . u51bd) (fxbit-count . u51bc) (fxarithmetic-shift-right . u51bb) (fxarithmetic-shift-left . u51ba) (fxarithmetic-shift . u51b9) (fxand . u51b8) (fx>? . u51b7) (fx>=? . u51b6) (fx=? . u51b5) (fx<? . u51b4) (fx<=? . u51b3) (fx-/carry . u51b2) (fx- . u51b1) (fx+/carry . u51b0) (fx+ . u51af) (fx*/carry . u51ae) (fx* . u51ad) (greatest-fixnum . u51ac) (least-fixnum . u51ab) (fixnum-width . u51aa) (fixnum? . u51a9) (bitwise-rotate-bit-field . u51a8) (bitwise-reverse-bit-field . u51a7) (bitwise-length . u51a6) (bitwise-if . u51a5) (bitwise-first-bit-set . u51a4) (bitwise-copy-bit-field . u51a3) (bitwise-copy-bit . u51a2) (bitwise-bit-set? . u51a1) (bitwise-bit-field . u51a0) (bitwise-bit-count . u519f) (bitwise-xor . u519e) (bitwise-ior . u519d) (bitwise-and . u519c) (bitwise-not . u519b) (bitwise-arithmetic-shift-right . u519a) (bitwise-arithmetic-shift-left . u5199) (bitwise-arithmetic-shift . u5198) (zero? . u5197) (vector? . u5196) (vector-set! . u5195) (vector-ref . u5194) (vector-map . u5193) (vector-length . u5192) (vector-for-each . u5191) (vector-fill! . u5190) (vector->list . u518f) (vector . u518e) (values . u518d) (truncate . u518c) (tan . u518b) (symbol? . u518a) (symbol=? . u5189) (symbol->string . u5188) (substring . u5187) (string? . u5186) (string>? . u5185) (string>=? . u5184) (string=? . u5183) (string<? . u5182) (string<=? . u5181) (string-ref . u5180) (string-length . u517f) (string-for-each . u517e) (string-copy . u517d) (string-append . u517c) (string->symbol . u517b) (string->number . u517a) (string->list . u5179) (string . u5178) (sqrt . u5177) (sin . u5176) (round . u5175) (reverse . u5174) (real? . u5173) (real-valued? . u5172) (real-part . u5171) (rationalize . u5170) (rational? . u516f) (rational-valued? . u516e) (procedure? . u516d) (positive? . u516c) (pair? . u516b) (odd? . u516a) (numerator . u5169) (number? . u5168) (number->string . u5167) (null? . u5166) (not . u5165) (negative? . u5164) (nan? . u5163) (min . u5162) (max . u5161) (map . u5160) (make-vector . u515f) (make-string . u515e) (make-rectangular . u515d) (make-polar . u515c) (magnitude . u515b) (log . u515a) (list? . u5159) (list-tail . u5158) (list-ref . u5157) (list->vector . u5156) (list->string . u5155) (list . u5154) (length . u5153) (lcm . u5152) (integer? . u5151) (integer-valued? . u5150) (integer->char . u514f) (infinite? . u514e) (inexact? . u514d) (inexact . u514c) (imag-part . u514b) (gcd . u514a) (for-each . u5149) (floor . u5148) (finite? . u5147) (expt . u5146) (exp . u5145) (exact? . u5144) (exact-integer-sqrt . u5143) (exact . u5142) (even? . u5141) (error . u5140) (eqv? . u513f) (equal? . u513e) (eq? . u513d) (dynamic-wind . u513c) (div0-and-mod0 . u513b) (mod0 . u513a) (div0 . u5139) (div-and-mod . u5138) (mod . u5137) (div . u5136) (denominator . u5135) (cos . u5134) (cons . u5133) (complex? . u5132) (char? . u5131) (char>? . u5130) (char>=? . u512f) (char=? . u512e) (char<? . u512d) (char<=? . u512c) (char->integer . u512b) (ceiling . u512a) (call-with-values . u5129) (call/cc . u5128) (call-with-current-continuation . u5127) (cddddr . u5126) (cdddar . u5125) (cddadr . u5124) (cddaar . u5123) (cdaddr . u5122) (cdadar . u5121) (cdaadr . u5120) (cdaaar . u511f) (cadddr . u511e) (caddar . u511d) (cadadr . u511c) (cadaar . u511b) (caaddr . u511a) (caadar . u5119) (caaadr . u5118) (caaaar . u5117) (cdddr . u5116) (cddar . u5115) (cdadr . u5114) (cdaar . u5113) (caddr . u5112) (cadar . u5111) (caadr . u5110) (caaar . u510f) (cddr . u510e) (cdar . u510d) (cadr . u510c) (caar . u510b) (cdr . u510a) (car . u5109) (boolean? . u5108) (boolean=? . u5107) (atan . u5106) (assertion-violation . u5105) (asin . u5104) (apply . u5103) (append . u5102) (angle . u5101) (acos . u5100) (abs . u50ff) (/ . u50fe) (* . u50fd) (- . u50fc) (+ . u50fb) (>= . u50fa) (> . u50f9) (= . u50f8) (<= . u50f7) (< . u50f6) (library . u50f5) (&no-nans . u50f4) (&no-infinities . u50f3) (&i/o-encoding . u50f2) (&i/o-decoding . u50f1) (&i/o-port . u50f0) (&i/o-file-does-not-exist . u50ef) (&i/o-file-already-exists . u50ee) (&i/o-file-is-read-only . u50ed) (&i/o-file-protection . u50ec) (&i/o-filename . u50eb) (&i/o-invalid-position . u50ea) (&i/o-write . u50e9) (&i/o-read . u50e8) (&i/o . u50e7) (&undefined . u50e6) (&syntax . u50e5) (&lexical . u50e4) (&implementation-restriction . u50e3) (&non-continuable . u50e2) (&who . u50e1) (&irritants . u50e0) (&assertion . u50df) (&violation . u50de) (&error . u50dd) (&serious . u50dc) (&warning . u50db) (&message . u50da) (&condition . u50d9) (define-condition-type . u50d8) (define-enumeration . u50d7) (define-record-type . u50d6) (parent-rtd . u50d5) (nongenerative . u50d4) (opaque . u50d3) (sealed . u50d2) (protocol . u50d1) (parent . u50d0) (immutable . u50cf) (mutable . u50ce) (fields . u50cd) (error-handling-mode . u50cc) (file-options . u50cb) (buffer-mode . u50ca) (eol-style . u50c9) (guard . u50c8) (unsyntax-splicing . u50c5) (unsyntax . u50c4) (unquote-splicing . u50c3) (unquote . u50c2) (_ . u50c1) (else . u50c0) (=> . u50bf) (... . u50be) (assert . u50bd) (endianness . u50bc) (time . u50ba) (do . u50b9) (cond . u50b8) (let* . u50b7) (let . u50b6) (let*-values . u50b5) (let-values . u50b4) (identifier-syntax . u50b3) (with-syntax . u50b2) (quasisyntax . u50b1) (quasiquote . u50b0) (syntax-rules . u50af) (include . u50ae) (record-constructor-descriptor . u50ac) (record-type-descriptor . u50ab) (case . u50aa) (unless . u50a8) (when . u50a7) (or . u50a6) (and . u50a5) (if . u50a4) (letrec* . u50a3) (letrec . u50a2) (case-lambda . u50a0) (lambda . u509f) (syntax . u509e) (syntax-case . u509d) (quote . u509c) (letrec-syntax . u509a) (let-syntax . u5099) (set! . u5098) (import . u5097) (begin . u5096) (define-syntax . u5094) (define . u5093)) '() values values '#f '#f '#t '#f) (u2c6c@u2ab8@install-library 'u53b8 '(psyntax null-environment-5) '() '() '() '() '((make-promise . u5273) (unquote-splicing . u50c3) (unquote . u50c2) (_ . u50c1) (else . u50c0) (=> . u50bf) (... . u50be) (delay . u50bb) (do . u50b9) (cond . u50b8) (let* . u50b7) (let . u50b6) (quasiquote . u50b0) (syntax-rules . u50af) (case . u50aa) (or . u50a6) (and . u50a5) (if . u50a4) (letrec . u50a2) (lambda . u509f) (quote . u509c) (letrec-syntax . u509a) (let-syntax . u5099) (set! . u5098) (begin . u5096) (define-syntax . u5094) (define . u5093)) '() values values '#f '#f '#t '#f) (u2c6c@u2ab8@install-library 'u53b9 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . u5308) (string-ci>=? . u5307) (string-ci=? . u5306) (string-ci<? . u5305) (string-ci<=? . u5304) (char-whitespace? . u5303) (char-upper-case? . u5302) (char-numeric? . u5300) (char-lower-case? . u52ff) (char-upcase . u52fd) (char-downcase . u52fa) (char-ci>? . u52f9) (char-ci>=? . u52f8) (char-ci=? . u52f7) (char-ci<? . u52f6) (char-ci<=? . u52f5) (char-alphabetic? . u52f4) (call-with-output-file . u52c8) (call-with-input-file . u52c7) (write-char . u52c6) (write . u52c5) (with-output-to-file . u52c4) (with-input-from-file . u52c3) (read-char . u52c2) (read . u52c1) (peek-char . u52c0) (open-output-file . u52bf) (open-input-file . u52be) (newline . u52bd) (display . u52bc) (close-output-port . u52bb) (close-input-port . u52ba) (eof-object . u52b8) (current-output-port . u52b6) (current-input-port . u52b5) (output-port? . u52b4) (input-port? . u52b3) (scheme-report-environment . u3103) (quotient . u5279) (null-environment . u3101) (remainder . u5278) (modulo . u5277) (inexact->exact . u5276) (force . u5275) (exact->inexact . u5274) (make-promise . u5273) (string-fill! . u5271) (string-set! . u5270) (set-cdr! . u526f) (set-car! . u526e) (memv . u5268) (memq . u5267) (member . u5265) (assv . u525d) (assq . u525c) (assoc . u525a) (eval . u3107) (zero? . u5197) (vector? . u5196) (vector-set! . u5195) (vector-ref . u5194) (vector-length . u5192) (vector-fill! . u5190) (vector->list . u518f) (vector . u518e) (values . u518d) (truncate . u518c) (tan . u518b) (symbol? . u518a) (symbol->string . u5188) (substring . u5187) (string? . u5186) (string>? . u5185) (string>=? . u5184) (string=? . u5183) (string<? . u5182) (string<=? . u5181) (string-ref . u5180) (string-length . u517f) (string-copy . u517d) (string-append . u517c) (string->symbol . u517b) (string->number . u517a) (string->list . u5179) (string . u5178) (sqrt . u5177) (sin . u5176) (round . u5175) (reverse . u5174) (real? . u5173) (real-part . u5171) (rationalize . u5170) (rational? . u516f) (procedure? . u516d) (positive? . u516c) (pair? . u516b) (odd? . u516a) (numerator . u5169) (number? . u5168) (number->string . u5167) (not . u5165) (negative? . u5164) (min . u5162) (max . u5161) (map . u5160) (make-vector . u515f) (make-string . u515e) (make-rectangular . u515d) (make-polar . u515c) (magnitude . u515b) (log . u515a) (list? . u5159) (list-tail . u5158) (list-ref . u5157) (list->vector . u5156) (list->string . u5155) (list . u5154) (length . u5153) (lcm . u5152) (integer? . u5151) (integer->char . u514f) (inexact? . u514d) (imag-part . u514b) (gcd . u514a) (for-each . u5149) (floor . u5148) (expt . u5146) (exp . u5145) (exact? . u5144) (even? . u5141) (eqv? . u513f) (equal? . u513e) (eq? . u513d) (dynamic-wind . u513c) (denominator . u5135) (cos . u5134) (cons . u5133) (complex? . u5132) (char? . u5131) (char>? . u5130) (char>=? . u512f) (char=? . u512e) (char<? . u512d) (char<=? . u512c) (char->integer . u512b) (ceiling . u512a) (call-with-values . u5129) (call-with-current-continuation . u5127) (cddddr . u5126) (cdddar . u5125) (cddadr . u5124) (cddaar . u5123) (cdaddr . u5122) (cdadar . u5121) (cdaadr . u5120) (cdaaar . u511f) (cadddr . u511e) (caddar . u511d) (cadadr . u511c) (cadaar . u511b) (caaddr . u511a) (caadar . u5119) (caaadr . u5118) (caaaar . u5117) (cdddr . u5116) (cddar . u5115) (cdadr . u5114) (cdaar . u5113) (caddr . u5112) (cadar . u5111) (caadr . u5110) (caaar . u510f) (cddr . u510e) (cdar . u510d) (cadr . u510c) (caar . u510b) (cdr . u510a) (car . u5109) (boolean? . u5108) (atan . u5106) (asin . u5104) (apply . u5103) (append . u5102) (angle . u5101) (acos . u5100) (abs . u50ff) (/ . u50fe) (* . u50fd) (- . u50fc) (+ . u50fb) (>= . u50fa) (> . u50f9) (= . u50f8) (<= . u50f7) (< . u50f6) (unquote-splicing . u50c3) (unquote . u50c2) (else . u50c0) (=> . u50bf) (... . u50be) (delay . u50bb) (do . u50b9) (cond . u50b8) (let* . u50b7) (let . u50b6) (quasiquote . u50b0) (syntax-rules . u50af) (case . u50aa) (or . u50a6) (and . u50a5) (if . u50a4) (letrec . u50a2) (lambda . u509f) (quote . u509c) (letrec-syntax . u509a) (let-syntax . u5099) (set! . u5098) (begin . u5096) (define-syntax . u5094) (define . u5093)) '() values values '#f '#f '#t '#f) (u2c6c@u2ab8@install-library 'u53ba '(psyntax modules) '() '() '() '() '((module . u5095)) '() values values '#f '#f '#t '#f) (u2c6c@u2ab8@install-library 'u53bb '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (u2c6c@u2ab8@install-library 'u53bc '(rnrs) '(6) '() '() '() '((regexp? . u53af) (string-upcase . u5310) (string-titlecase . u530f) (string-normalize-nfkd . u530e) (string-normalize-nfkc . u530d) (string-normalize-nfd . u530c) (string-normalize-nfc . u530b) (string-foldcase . u530a) (string-downcase . u5309) (string-ci>? . u5308) (string-ci>=? . u5307) (string-ci=? . u5306) (string-ci<? . u5305) (string-ci<=? . u5304) (char-whitespace? . u5303) (char-upper-case? . u5302) (char-title-case? . u5301) (char-numeric? . u5300) (char-lower-case? . u52ff) (char-general-category . u52fe) (char-upcase . u52fd) (char-titlecase . u52fc) (char-foldcase . u52fb) (char-downcase . u52fa) (char-ci>? . u52f9) (char-ci>=? . u52f8) (char-ci=? . u52f7) (char-ci<? . u52f6) (char-ci<=? . u52f5) (char-alphabetic? . u52f4) (make-variable-transformer . u2e74) (identifier? . u3129) (generate-temporaries . u3115) (free-identifier=? . u3117) (syntax->datum . u312d) (datum->syntax . u312b) (bound-identifier=? . u3119) (record-type-descriptor? . u52f3) (record-predicate . u52f2) (record-mutator . u52f1) (record-constructor . u52f0) (record-accessor . u52ef) (make-record-type-descriptor . u52ee) (make-record-constructor-descriptor . u52ed) (record? . u52ec) (record-type-uid . u52eb) (record-type-sealed? . u52ea) (record-type-parent . u52e9) (record-type-opaque? . u52e8) (record-type-name . u52e7) (record-type-generative? . u52e6) (record-type-field-names . u52e5) (record-rtd . u52e4) (record-field-mutable? . u52e3) (delete-file . u52e2) (file-exists? . u52e1) (vector-sort! . u52e0) (vector-sort . u52df) (list-sort . u52de) (symbol-hash . u52dd) (string-ci-hash . u52dc) (string-hash . u52db) (equal-hash . u52da) (hashtable-equivalence-function . u52d9) (make-hashtable . u52d8) (hashtable-hash-function . u52d7) (make-eqv-hashtable . u52d6) (make-eq-hashtable . u52d5) (hashtable? . u52d4) (hashtable-update! . u52d3) (hashtable-size . u52d2) (hashtable-set! . u52d1) (hashtable-ref . u52d0) (hashtable-mutable? . u52cf) (hashtable-keys . u52ce) (hashtable-entries . u52cd) (hashtable-delete! . u52cc) (hashtable-copy . u52cb) (hashtable-contains? . u52ca) (hashtable-clear! . u52c9) (call-with-output-file . u52c8) (call-with-input-file . u52c7) (write-char . u52c6) (write . u52c5) (with-output-to-file . u52c4) (with-input-from-file . u52c3) (read-char . u52c2) (read . u52c1) (peek-char . u52c0) (open-output-file . u52bf) (open-input-file . u52be) (newline . u52bd) (display . u52bc) (close-output-port . u52bb) (close-input-port . u52ba) (eof-object? . u52b9) (eof-object . u52b8) (current-error-port . u52b7) (current-output-port . u52b6) (current-input-port . u52b5) (output-port? . u52b4) (input-port? . u52b3) (utf-8-codec . u52b2) (utf-16-codec . u52b1) (transcoder-error-handling-mode . u52b0) (transcoder-eol-style . u52af) (transcoder-codec . u52ae) (transcoded-port . u52ad) (textual-port? . u52ac) (string->bytevector . u52ab) (standard-output-port . u52aa) (standard-input-port . u52a9) (standard-error-port . u52a8) (set-port-position! . u52a7) (put-u8 . u52a6) (put-string . u52a5) (put-datum . u52a4) (put-char . u52a3) (put-bytevector . u52a2) (port? . u52a1) (port-transcoder . u52a0) (port-position . u529f) (port-has-set-port-position!? . u529e) (port-has-port-position? . u529d) (port-eof? . u529c) (output-port-buffer-mode . u529b) (open-string-output-port . u529a) (open-string-input-port . u5299) (open-file-output-port . u5298) (open-file-input/output-port . u5297) (open-file-input-port . u5296) (open-bytevector-output-port . u5295) (open-bytevector-input-port . u5294) (native-transcoder . u5293) (native-eol-style . u5292) (make-transcoder . u5291) (latin-1-codec . u5290) (make-i/o-write-error . u4d0b) (make-i/o-read-error . u4cf6) (make-i/o-port-error . u4dac) (make-i/o-invalid-position-error . u4d22) (make-i/o-filename-error . u4d3d) (make-i/o-file-protection-error . u4d56) (make-i/o-file-is-read-only-error . u4d6b) (make-i/o-file-does-not-exist-error . u4d95) (make-i/o-file-already-exists-error . u4d80) (make-i/o-error . u4ce1) (make-i/o-encoding-error . u4ddc) (make-i/o-decoding-error . u4dc5) (make-custom-textual-output-port . u528f) (make-custom-textual-input/output-port . u528e) (make-custom-textual-input-port . u528d) (make-custom-binary-output-port . u528c) (make-custom-binary-input/output-port . u528b) (make-custom-binary-input-port . u528a) (make-bytevector . u5289) (lookahead-u8 . u5288) (lookahead-char . u5287) (i/o-write-error? . u4d0d) (i/o-read-error? . u4cf8) (i/o-port-error? . u4db0) (i/o-invalid-position-error? . u4d26) (i/o-filename-error? . u4d41) (i/o-file-protection-error? . u4d58) (i/o-file-is-read-only-error? . u4d6d) (i/o-file-does-not-exist-error? . u4d97) (i/o-file-already-exists-error? . u4d82) (i/o-error? . u4ce3) (i/o-error-position . u4d28) (i/o-error-port . u4db2) (i/o-error-filename . u4d43) (i/o-encoding-error? . u4de0) (i/o-encoding-error-char . u4de2) (i/o-decoding-error? . u4dc7) (get-u8 . u5286) (get-string-n! . u5285) (get-string-n . u5284) (get-string-all . u5283) (get-line . u5282) (get-datum . u5281) (get-char . u5280) (get-bytevector-some . u527f) (get-bytevector-n! . u527e) (get-bytevector-n . u527d) (get-bytevector-all . u527c) (flush-output-port . u527b) (close-port . u527a) (exit . u5272) (command-line . u4f17) (remove . u526d) (remv . u526c) (remp . u526b) (remq . u526a) (partition . u5269) (memv . u5268) (memq . u5267) (memp . u5266) (member . u5265) (exists . u5264) (for-all . u5263) (fold-right . u5262) (fold-left . u5261) (find . u5260) (filter . u525f) (cons* . u525e) (assv . u525d) (assq . u525c) (assp . u525b) (assoc . u525a) (call-with-string-output-port . u5259) (call-with-port . u5258) (call-with-bytevector-output-port . u5257) (bytevector->string . u5256) (buffer-mode? . u5255) (binary-port? . u5254) (with-exception-handler . u5253) (raise-continuable . u5252) (raise . u5251) (make-enumeration . u5250) (enum-set=? . u524f) (enum-set-universe . u524e) (enum-set-union . u524d) (enum-set-subset? . u524c) (enum-set-projection . u524b) (enum-set-member? . u524a) (enum-set-intersection . u5249) (enum-set-indexer . u5248) (enum-set-difference . u5247) (enum-set-constructor . u5246) (enum-set-complement . u5245) (enum-set->list . u5244) (who-condition? . u4c57) (warning? . u4bcf) (violation? . u4c0e) (undefined-violation? . u4cce) (syntax-violation? . u4cb5) (syntax-violation-subform . u4cb9) (syntax-violation-form . u4cb7) (syntax-violation . u3127) (simple-conditions . u5243) (serious-condition? . u4be4) (non-continuable-violation? . u4c6e) (message-condition? . u4bb8) (make-who-condition . u4c53) (make-warning . u4bcd) (make-violation . u4c0c) (make-undefined-violation . u4ccc) (make-syntax-violation . u4caf) (make-serious-condition . u4be2) (make-non-continuable-violation . u4c6c) (make-message-condition . u4bb4) (make-lexical-violation . u4c96) (make-irritants-condition . u4c38) (make-implementation-restriction-violation . u4c81) (make-error . u4bf7) (make-assertion-violation . u4c21) (lexical-violation? . u4c98) (irritants-condition? . u4c3c) (implementation-restriction-violation? . u4c83) (error? . u4bf9) (condition-who . u4c59) (condition-predicate . u5242) (condition-message . u4bba) (condition-irritants . u4c3e) (condition-accessor . u5241) (condition . u5240) (assertion-violation? . u4c23) (condition? . u523f) (utf32->string . u523e) (utf16->string . u523d) (utf8->string . u523c) (uint-list->bytevector . u523b) (u8-list->bytevector . u523a) (string->utf8 . u5239) (string->utf32 . u5238) (string->utf16 . u5237) (sint-list->bytevector . u5236) (native-endianness . u5235) (bytevector? . u5234) (bytevector=? . u5233) (bytevector-uint-set! . u5232) (bytevector-uint-ref . u5231) (bytevector-u8-set! . u5230) (bytevector-u8-ref . u522f) (bytevector-u64-set! . u522e) (bytevector-u64-ref . u522d) (bytevector-u64-native-set! . u522c) (bytevector-u64-native-ref . u522b) (bytevector-u32-set! . u522a) (bytevector-u32-ref . u5229) (bytevector-u32-native-set! . u5228) (bytevector-u32-native-ref . u5227) (bytevector-u16-set! . u5226) (bytevector-u16-ref . u5225) (bytevector-u16-native-set! . u5224) (bytevector-u16-native-ref . u5223) (bytevector-sint-set! . u5222) (bytevector-sint-ref . u5221) (bytevector-s8-set! . u5220) (bytevector-s8-ref . u521f) (bytevector-s64-set! . u521e) (bytevector-s64-ref . u521d) (bytevector-s64-native-set! . u521c) (bytevector-s64-native-ref . u521b) (bytevector-s32-set! . u521a) (bytevector-s32-ref . u5219) (bytevector-s32-native-set! . u5218) (bytevector-s32-native-ref . u5217) (bytevector-s16-set! . u5216) (bytevector-s16-ref . u5215) (bytevector-s16-native-set! . u5214) (bytevector-s16-native-ref . u5213) (bytevector-length . u5212) (bytevector-ieee-single-ref . u5211) (bytevector-ieee-single-set! . u5210) (bytevector-ieee-single-native-set! . u520f) (bytevector-ieee-single-native-ref . u520e) (bytevector-ieee-double-set! . u520d) (bytevector-ieee-double-ref . u520c) (bytevector-ieee-double-native-set! . u520b) (bytevector-ieee-double-native-ref . u520a) (bytevector-fill! . u5209) (bytevector-copy! . u5208) (bytevector-copy . u5207) (bytevector->uint-list . u5206) (bytevector->u8-list . u5205) (bytevector->sint-list . u5204) (no-nans-violation? . u4e0c) (no-infinities-violation? . u4df7) (make-no-nans-violation . u4e0a) (make-no-infinities-violation . u4df5) (real->flonum . u5203) (flzero? . u5202) (fltruncate . u5201) (fltan . u5200) (flsqrt . u51ff) (flsin . u51fe) (flround . u51fd) (flpositive? . u51fc) (flonum? . u51fb) (flodd? . u51fa) (flnumerator . u51f9) (flnegative? . u51f8) (flnan? . u51f7) (flmod0 . u51f6) (flmod . u51f5) (flmin . u51f4) (flmax . u51f3) (fllog . u51f2) (flinteger? . u51f1) (flinfinite? . u51f0) (flfloor . u51ef) (flfinite? . u51ee) (flexpt . u51ed) (flexp . u51ec) (fleven? . u51eb) (fldiv0-and-mod0 . u51ea) (fldiv0 . u51e9) (fldiv-and-mod . u51e8) (fldiv . u51e7) (fldenominator . u51e6) (flcos . u51e5) (flceiling . u51e4) (flatan . u51e3) (flasin . u51e2) (flacos . u51e1) (flabs . u51e0) (fl>? . u51df) (fl>=? . u51de) (fl=? . u51dd) (fl<? . u51dc) (fl<=? . u51db) (fl/ . u51da) (fl- . u51d9) (fl+ . u51d8) (fl* . u51d7) (fixnum->flonum . u51d6) (fxzero? . u51d5) (fxxor . u51d4) (fxrotate-bit-field . u51d3) (fxreverse-bit-field . u51d2) (fxpositive? . u51d1) (fxodd? . u51d0) (fxnot . u51cf) (fxnegative? . u51ce) (fxmod0 . u51cd) (fxmod . u51cc) (fxmin . u51cb) (fxmax . u51ca) (fxlength . u51c9) (fxior . u51c8) (fxif . u51c7) (fxfirst-bit-set . u51c6) (fxeven? . u51c5) (fxdiv0-and-mod0 . u51c4) (fxdiv0 . u51c3) (fxdiv-and-mod . u51c2) (fxdiv . u51c1) (fxcopy-bit-field . u51c0) (fxcopy-bit . u51bf) (fxbit-set? . u51be) (fxbit-field . u51bd) (fxbit-count . u51bc) (fxarithmetic-shift-right . u51bb) (fxarithmetic-shift-left . u51ba) (fxarithmetic-shift . u51b9) (fxand . u51b8) (fx>? . u51b7) (fx>=? . u51b6) (fx=? . u51b5) (fx<? . u51b4) (fx<=? . u51b3) (fx-/carry . u51b2) (fx- . u51b1) (fx+/carry . u51b0) (fx+ . u51af) (fx*/carry . u51ae) (fx* . u51ad) (greatest-fixnum . u51ac) (least-fixnum . u51ab) (fixnum-width . u51aa) (fixnum? . u51a9) (bitwise-rotate-bit-field . u51a8) (bitwise-reverse-bit-field . u51a7) (bitwise-length . u51a6) (bitwise-if . u51a5) (bitwise-first-bit-set . u51a4) (bitwise-copy-bit-field . u51a3) (bitwise-copy-bit . u51a2) (bitwise-bit-set? . u51a1) (bitwise-bit-field . u51a0) (bitwise-bit-count . u519f) (bitwise-xor . u519e) (bitwise-ior . u519d) (bitwise-and . u519c) (bitwise-not . u519b) (bitwise-arithmetic-shift-right . u519a) (bitwise-arithmetic-shift-left . u5199) (bitwise-arithmetic-shift . u5198) (zero? . u5197) (vector? . u5196) (vector-set! . u5195) (vector-ref . u5194) (vector-map . u5193) (vector-length . u5192) (vector-for-each . u5191) (vector-fill! . u5190) (vector->list . u518f) (vector . u518e) (values . u518d) (truncate . u518c) (tan . u518b) (symbol? . u518a) (symbol=? . u5189) (symbol->string . u5188) (substring . u5187) (string? . u5186) (string>? . u5185) (string>=? . u5184) (string=? . u5183) (string<? . u5182) (string<=? . u5181) (string-ref . u5180) (string-length . u517f) (string-for-each . u517e) (string-copy . u517d) (string-append . u517c) (string->symbol . u517b) (string->number . u517a) (string->list . u5179) (string . u5178) (sqrt . u5177) (sin . u5176) (round . u5175) (reverse . u5174) (real? . u5173) (real-valued? . u5172) (real-part . u5171) (rationalize . u5170) (rational? . u516f) (rational-valued? . u516e) (procedure? . u516d) (positive? . u516c) (pair? . u516b) (odd? . u516a) (numerator . u5169) (number? . u5168) (number->string . u5167) (null? . u5166) (not . u5165) (negative? . u5164) (nan? . u5163) (min . u5162) (max . u5161) (map . u5160) (make-vector . u515f) (make-string . u515e) (make-rectangular . u515d) (make-polar . u515c) (magnitude . u515b) (log . u515a) (list? . u5159) (list-tail . u5158) (list-ref . u5157) (list->vector . u5156) (list->string . u5155) (list . u5154) (length . u5153) (lcm . u5152) (integer? . u5151) (integer-valued? . u5150) (integer->char . u514f) (infinite? . u514e) (inexact? . u514d) (inexact . u514c) (imag-part . u514b) (gcd . u514a) (for-each . u5149) (floor . u5148) (finite? . u5147) (expt . u5146) (exp . u5145) (exact? . u5144) (exact-integer-sqrt . u5143) (exact . u5142) (even? . u5141) (error . u5140) (eqv? . u513f) (equal? . u513e) (eq? . u513d) (dynamic-wind . u513c) (div0-and-mod0 . u513b) (mod0 . u513a) (div0 . u5139) (div-and-mod . u5138) (mod . u5137) (div . u5136) (denominator . u5135) (cos . u5134) (cons . u5133) (complex? . u5132) (char? . u5131) (char>? . u5130) (char>=? . u512f) (char=? . u512e) (char<? . u512d) (char<=? . u512c) (char->integer . u512b) (ceiling . u512a) (call-with-values . u5129) (call/cc . u5128) (call-with-current-continuation . u5127) (cddddr . u5126) (cdddar . u5125) (cddadr . u5124) (cddaar . u5123) (cdaddr . u5122) (cdadar . u5121) (cdaadr . u5120) (cdaaar . u511f) (cadddr . u511e) (caddar . u511d) (cadadr . u511c) (cadaar . u511b) (caaddr . u511a) (caadar . u5119) (caaadr . u5118) (caaaar . u5117) (cdddr . u5116) (cddar . u5115) (cdadr . u5114) (cdaar . u5113) (caddr . u5112) (cadar . u5111) (caadr . u5110) (caaar . u510f) (cddr . u510e) (cdar . u510d) (cadr . u510c) (caar . u510b) (cdr . u510a) (car . u5109) (boolean? . u5108) (boolean=? . u5107) (atan . u5106) (assertion-violation . u5105) (asin . u5104) (apply . u5103) (append . u5102) (angle . u5101) (acos . u5100) (abs . u50ff) (/ . u50fe) (* . u50fd) (- . u50fc) (+ . u50fb) (>= . u50fa) (> . u50f9) (= . u50f8) (<= . u50f7) (< . u50f6) (&no-nans . u50f4) (&no-infinities . u50f3) (&i/o-encoding . u50f2) (&i/o-decoding . u50f1) (&i/o-port . u50f0) (&i/o-file-does-not-exist . u50ef) (&i/o-file-already-exists . u50ee) (&i/o-file-is-read-only . u50ed) (&i/o-file-protection . u50ec) (&i/o-filename . u50eb) (&i/o-invalid-position . u50ea) (&i/o-write . u50e9) (&i/o-read . u50e8) (&i/o . u50e7) (&undefined . u50e6) (&syntax . u50e5) (&lexical . u50e4) (&implementation-restriction . u50e3) (&non-continuable . u50e2) (&who . u50e1) (&irritants . u50e0) (&assertion . u50df) (&violation . u50de) (&error . u50dd) (&serious . u50dc) (&warning . u50db) (&message . u50da) (&condition . u50d9) (define-condition-type . u50d8) (define-enumeration . u50d7) (define-record-type . u50d6) (parent-rtd . u50d5) (nongenerative . u50d4) (opaque . u50d3) (sealed . u50d2) (protocol . u50d1) (parent . u50d0) (immutable . u50cf) (mutable . u50ce) (fields . u50cd) (error-handling-mode . u50cc) (file-options . u50cb) (buffer-mode . u50ca) (eol-style . u50c9) (guard . u50c8) (unsyntax-splicing . u50c5) (unsyntax . u50c4) (unquote-splicing . u50c3) (unquote . u50c2) (_ . u50c1) (else . u50c0) (=> . u50bf) (... . u50be) (assert . u50bd) (endianness . u50bc) (do . u50b9) (cond . u50b8) (let* . u50b7) (let . u50b6) (let*-values . u50b5) (let-values . u50b4) (identifier-syntax . u50b3) (with-syntax . u50b2) (quasisyntax . u50b1) (quasiquote . u50b0) (syntax-rules . u50af) (record-constructor-descriptor . u50ac) (record-type-descriptor . u50ab) (case . u50aa) (unless . u50a8) (when . u50a7) (or . u50a6) (and . u50a5) (if . u50a4) (letrec* . u50a3) (letrec . u50a2) (case-lambda . u50a0) (lambda . u509f) (syntax . u509e) (syntax-case . u509d) (quote . u509c) (letrec-syntax . u509a) (let-syntax . u5099) (set! . u5098) (begin . u5096) (define-syntax . u5094) (define . u5093)) '() values values '#f '#f '#t '#f) (u2c6c@u2ab8@install-library 'u53bd '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . u3103) (quotient . u5279) (null-environment . u3101) (remainder . u5278) (modulo . u5277) (inexact->exact . u5276) (force . u5275) (exact->inexact . u5274) (make-promise . u5273) (delay . u50bb)) '() values values '#f '#f '#t '#f) (u2c6c@u2ab8@install-library 'u53be '(rnrs control) '(6) '() '() '() '((do . u50b9) (unless . u50a8) (when . u50a7) (case-lambda . u50a0)) '() values values '#f '#f '#t '#f) (u2c6c@u2ab8@install-library 'u53bf '(rnrs eval) '(6) '() '() '() '((eval . u3107) (environment . u30ff)) '() values values '#f '#f '#t '#f) (u2c6c@u2ab8@install-library 'u53c0 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . u526f) (set-car! . u526e)) '() values values '#f '#f '#t '#f) (u2c6c@u2ab8@install-library 'u53c1 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . u5271) (string-set! . u5270)) '() values values '#f '#f '#t '#f) (u2c6c@u2ab8@install-library 'u53c2 '(rnrs programs) '(6) '() '() '() '((exit . u5272) (command-line . u4f17)) '() values values '#f '#f '#t '#f) (u2c6c@u2ab8@install-library 'u53c3 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . u2e74) (identifier? . u3129) (generate-temporaries . u3115) (free-identifier=? . u3117) (syntax->datum . u312d) (datum->syntax . u312b) (bound-identifier=? . u3119) (syntax-violation . u3127) (unsyntax-splicing . u50c5) (unsyntax . u50c4) (_ . u50c1) (... . u50be) (with-syntax . u50b2) (quasisyntax . u50b1) (syntax . u509e) (syntax-case . u509d)) '() values values '#f '#f '#t '#f) (u2c6c@u2ab8@install-library 'u53c4 '(rnrs files) '(6) '() '() '() '((delete-file . u52e2) (file-exists? . u52e1) (make-i/o-write-error . u4d0b) (make-i/o-read-error . u4cf6) (make-i/o-port-error . u4dac) (make-i/o-invalid-position-error . u4d22) (make-i/o-filename-error . u4d3d) (make-i/o-file-protection-error . u4d56) (make-i/o-file-is-read-only-error . u4d6b) (make-i/o-file-does-not-exist-error . u4d95) (make-i/o-file-already-exists-error . u4d80) (make-i/o-error . u4ce1) (i/o-write-error? . u4d0d) (i/o-read-error? . u4cf8) (i/o-port-error? . u4db0) (i/o-invalid-position-error? . u4d26) (i/o-filename-error? . u4d41) (i/o-file-protection-error? . u4d58) (i/o-file-is-read-only-error? . u4d6d) (i/o-file-does-not-exist-error? . u4d97) (i/o-file-already-exists-error? . u4d82) (i/o-error? . u4ce3) (i/o-error-position . u4d28) (i/o-error-port . u4db2) (i/o-error-filename . u4d43) (&i/o-port . u50f0) (&i/o-file-does-not-exist . u50ef) (&i/o-file-already-exists . u50ee) (&i/o-file-is-read-only . u50ed) (&i/o-file-protection . u50ec) (&i/o-filename . u50eb) (&i/o-invalid-position . u50ea) (&i/o-write . u50e9) (&i/o-read . u50e8) (&i/o . u50e7)) '() values values '#f '#f '#t '#f) (u2c6c@u2ab8@install-library 'u53c5 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . u52e0) (vector-sort . u52df) (list-sort . u52de)) '() values values '#f '#f '#t '#f) (u2c6c@u2ab8@install-library 'u53c6 '(rnrs base) '(6) '() '() '() '((zero? . u5197) (vector? . u5196) (vector-set! . u5195) (vector-ref . u5194) (vector-map . u5193) (vector-length . u5192) (vector-for-each . u5191) (vector-fill! . u5190) (vector->list . u518f) (vector . u518e) (values . u518d) (truncate . u518c) (tan . u518b) (symbol? . u518a) (symbol=? . u5189) (symbol->string . u5188) (substring . u5187) (string? . u5186) (string>? . u5185) (string>=? . u5184) (string=? . u5183) (string<? . u5182) (string<=? . u5181) (string-ref . u5180) (string-length . u517f) (string-for-each . u517e) (string-copy . u517d) (string-append . u517c) (string->symbol . u517b) (string->number . u517a) (string->list . u5179) (string . u5178) (sqrt . u5177) (sin . u5176) (round . u5175) (reverse . u5174) (real? . u5173) (real-valued? . u5172) (real-part . u5171) (rationalize . u5170) (rational? . u516f) (rational-valued? . u516e) (procedure? . u516d) (positive? . u516c) (pair? . u516b) (odd? . u516a) (numerator . u5169) (number? . u5168) (number->string . u5167) (null? . u5166) (not . u5165) (negative? . u5164) (nan? . u5163) (min . u5162) (max . u5161) (map . u5160) (make-vector . u515f) (make-string . u515e) (make-rectangular . u515d) (make-polar . u515c) (magnitude . u515b) (log . u515a) (list? . u5159) (list-tail . u5158) (list-ref . u5157) (list->vector . u5156) (list->string . u5155) (list . u5154) (length . u5153) (lcm . u5152) (integer? . u5151) (integer-valued? . u5150) (integer->char . u514f) (infinite? . u514e) (inexact? . u514d) (inexact . u514c) (imag-part . u514b) (gcd . u514a) (for-each . u5149) (floor . u5148) (finite? . u5147) (expt . u5146) (exp . u5145) (exact? . u5144) (exact-integer-sqrt . u5143) (exact . u5142) (even? . u5141) (error . u5140) (eqv? . u513f) (equal? . u513e) (eq? . u513d) (dynamic-wind . u513c) (div0-and-mod0 . u513b) (mod0 . u513a) (div0 . u5139) (div-and-mod . u5138) (mod . u5137) (div . u5136) (denominator . u5135) (cos . u5134) (cons . u5133) (complex? . u5132) (char? . u5131) (char>? . u5130) (char>=? . u512f) (char=? . u512e) (char<? . u512d) (char<=? . u512c) (char->integer . u512b) (ceiling . u512a) (call-with-values . u5129) (call/cc . u5128) (call-with-current-continuation . u5127) (cddddr . u5126) (cdddar . u5125) (cddadr . u5124) (cddaar . u5123) (cdaddr . u5122) (cdadar . u5121) (cdaadr . u5120) (cdaaar . u511f) (cadddr . u511e) (caddar . u511d) (cadadr . u511c) (cadaar . u511b) (caaddr . u511a) (caadar . u5119) (caaadr . u5118) (caaaar . u5117) (cdddr . u5116) (cddar . u5115) (cdadr . u5114) (cdaar . u5113) (caddr . u5112) (cadar . u5111) (caadr . u5110) (caaar . u510f) (cddr . u510e) (cdar . u510d) (cadr . u510c) (caar . u510b) (cdr . u510a) (car . u5109) (boolean? . u5108) (boolean=? . u5107) (atan . u5106) (assertion-violation . u5105) (asin . u5104) (apply . u5103) (append . u5102) (angle . u5101) (acos . u5100) (abs . u50ff) (/ . u50fe) (* . u50fd) (- . u50fc) (+ . u50fb) (>= . u50fa) (> . u50f9) (= . u50f8) (<= . u50f7) (< . u50f6) (unquote-splicing . u50c3) (unquote . u50c2) (_ . u50c1) (else . u50c0) (=> . u50bf) (... . u50be) (assert . u50bd) (cond . u50b8) (let* . u50b7) (let . u50b6) (let*-values . u50b5) (let-values . u50b4) (identifier-syntax . u50b3) (quasiquote . u50b0) (syntax-rules . u50af) (case . u50aa) (or . u50a6) (and . u50a5) (if . u50a4) (letrec* . u50a3) (letrec . u50a2) (lambda . u509f) (quote . u509c) (letrec-syntax . u509a) (let-syntax . u5099) (set! . u5098) (begin . u5096) (define-syntax . u5094) (define . u5093)) '() values values '#f '#f '#t '#f) (u2c6c@u2ab8@install-library 'u53c7 '(rnrs lists) '(6) '() '() '() '((remove . u526d) (remv . u526c) (remp . u526b) (remq . u526a) (partition . u5269) (memv . u5268) (memq . u5267) (memp . u5266) (member . u5265) (exists . u5264) (for-all . u5263) (fold-right . u5262) (fold-left . u5261) (find . u5260) (filter . u525f) (cons* . u525e) (assv . u525d) (assq . u525c) (assp . u525b) (assoc . u525a)) '() values values '#f '#f '#t '#f) (u2c6c@u2ab8@install-library 'u53c8 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . u52c8) (call-with-input-file . u52c7) (write-char . u52c6) (write . u52c5) (with-output-to-file . u52c4) (with-input-from-file . u52c3) (read-char . u52c2) (read . u52c1) (peek-char . u52c0) (open-output-file . u52bf) (open-input-file . u52be) (newline . u52bd) (display . u52bc) (close-output-port . u52bb) (close-input-port . u52ba) (eof-object? . u52b9) (eof-object . u52b8) (current-error-port . u52b7) (current-output-port . u52b6) (current-input-port . u52b5) (output-port? . u52b4) (input-port? . u52b3) (make-i/o-write-error . u4d0b) (make-i/o-read-error . u4cf6) (make-i/o-port-error . u4dac) (make-i/o-invalid-position-error . u4d22) (make-i/o-filename-error . u4d3d) (make-i/o-file-protection-error . u4d56) (make-i/o-file-is-read-only-error . u4d6b) (make-i/o-file-does-not-exist-error . u4d95) (make-i/o-file-already-exists-error . u4d80) (make-i/o-error . u4ce1) (i/o-write-error? . u4d0d) (i/o-read-error? . u4cf8) (i/o-port-error? . u4db0) (i/o-invalid-position-error? . u4d26) (i/o-filename-error? . u4d41) (i/o-file-protection-error? . u4d58) (i/o-file-is-read-only-error? . u4d6d) (i/o-file-does-not-exist-error? . u4d97) (i/o-file-already-exists-error? . u4d82) (i/o-error? . u4ce3) (i/o-error-position . u4d28) (i/o-error-port . u4db2) (i/o-error-filename . u4d43) (&i/o-port . u50f0) (&i/o-file-does-not-exist . u50ef) (&i/o-file-already-exists . u50ee) (&i/o-file-is-read-only . u50ed) (&i/o-file-protection . u50ec) (&i/o-filename . u50eb) (&i/o-invalid-position . u50ea) (&i/o-write . u50e9) (&i/o-read . u50e8) (&i/o . u50e7)) '() values values '#f '#f '#t '#f) (u2c6c@u2ab8@install-library 'u53c9 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . u5289) (utf32->string . u523e) (utf16->string . u523d) (utf8->string . u523c) (uint-list->bytevector . u523b) (u8-list->bytevector . u523a) (string->utf8 . u5239) (string->utf32 . u5238) (string->utf16 . u5237) (sint-list->bytevector . u5236) (native-endianness . u5235) (bytevector? . u5234) (bytevector=? . u5233) (bytevector-uint-set! . u5232) (bytevector-uint-ref . u5231) (bytevector-u8-set! . u5230) (bytevector-u8-ref . u522f) (bytevector-u64-set! . u522e) (bytevector-u64-ref . u522d) (bytevector-u64-native-set! . u522c) (bytevector-u64-native-ref . u522b) (bytevector-u32-set! . u522a) (bytevector-u32-ref . u5229) (bytevector-u32-native-set! . u5228) (bytevector-u32-native-ref . u5227) (bytevector-u16-set! . u5226) (bytevector-u16-ref . u5225) (bytevector-u16-native-set! . u5224) (bytevector-u16-native-ref . u5223) (bytevector-sint-set! . u5222) (bytevector-sint-ref . u5221) (bytevector-s8-set! . u5220) (bytevector-s8-ref . u521f) (bytevector-s64-set! . u521e) (bytevector-s64-ref . u521d) (bytevector-s64-native-set! . u521c) (bytevector-s64-native-ref . u521b) (bytevector-s32-set! . u521a) (bytevector-s32-ref . u5219) (bytevector-s32-native-set! . u5218) (bytevector-s32-native-ref . u5217) (bytevector-s16-set! . u5216) (bytevector-s16-ref . u5215) (bytevector-s16-native-set! . u5214) (bytevector-s16-native-ref . u5213) (bytevector-length . u5212) (bytevector-ieee-single-ref . u5211) (bytevector-ieee-single-set! . u5210) (bytevector-ieee-single-native-set! . u520f) (bytevector-ieee-single-native-ref . u520e) (bytevector-ieee-double-set! . u520d) (bytevector-ieee-double-ref . u520c) (bytevector-ieee-double-native-set! . u520b) (bytevector-ieee-double-native-ref . u520a) (bytevector-fill! . u5209) (bytevector-copy! . u5208) (bytevector-copy . u5207) (bytevector->uint-list . u5206) (bytevector->u8-list . u5205) (bytevector->sint-list . u5204) (endianness . u50bc)) '() values values '#f '#f '#t '#f) (u2c6c@u2ab8@install-library 'u53ca '(rnrs unicode) '(6) '() '() '() '((string-upcase . u5310) (string-titlecase . u530f) (string-normalize-nfkd . u530e) (string-normalize-nfkc . u530d) (string-normalize-nfd . u530c) (string-normalize-nfc . u530b) (string-foldcase . u530a) (string-downcase . u5309) (string-ci>? . u5308) (string-ci>=? . u5307) (string-ci=? . u5306) (string-ci<? . u5305) (string-ci<=? . u5304) (char-whitespace? . u5303) (char-upper-case? . u5302) (char-title-case? . u5301) (char-numeric? . u5300) (char-lower-case? . u52ff) (char-general-category . u52fe) (char-upcase . u52fd) (char-titlecase . u52fc) (char-foldcase . u52fb) (char-downcase . u52fa) (char-ci>? . u52f9) (char-ci>=? . u52f8) (char-ci=? . u52f7) (char-ci<? . u52f6) (char-ci<=? . u52f5) (char-alphabetic? . u52f4)) '() values values '#f '#f '#t '#f) (u2c6c@u2ab8@install-library 'u53cb '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . u5253) (raise-continuable . u5252) (raise . u5251) (guard . u50c8) (else . u50c0) (=> . u50bf)) '() values values '#f '#f '#t '#f) (u2c6c@u2ab8@install-library 'u53cc '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . u51a8) (bitwise-reverse-bit-field . u51a7) (bitwise-length . u51a6) (bitwise-if . u51a5) (bitwise-first-bit-set . u51a4) (bitwise-copy-bit-field . u51a3) (bitwise-copy-bit . u51a2) (bitwise-bit-set? . u51a1) (bitwise-bit-field . u51a0) (bitwise-bit-count . u519f) (bitwise-xor . u519e) (bitwise-ior . u519d) (bitwise-and . u519c) (bitwise-not . u519b) (bitwise-arithmetic-shift-right . u519a) (bitwise-arithmetic-shift-left . u5199) (bitwise-arithmetic-shift . u5198)) '() values values '#f '#f '#t '#f) (u2c6c@u2ab8@install-library 'u53cd '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . u51d5) (fxxor . u51d4) (fxrotate-bit-field . u51d3) (fxreverse-bit-field . u51d2) (fxpositive? . u51d1) (fxodd? . u51d0) (fxnot . u51cf) (fxnegative? . u51ce) (fxmod0 . u51cd) (fxmod . u51cc) (fxmin . u51cb) (fxmax . u51ca) (fxlength . u51c9) (fxior . u51c8) (fxif . u51c7) (fxfirst-bit-set . u51c6) (fxeven? . u51c5) (fxdiv0-and-mod0 . u51c4) (fxdiv0 . u51c3) (fxdiv-and-mod . u51c2) (fxdiv . u51c1) (fxcopy-bit-field . u51c0) (fxcopy-bit . u51bf) (fxbit-set? . u51be) (fxbit-field . u51bd) (fxbit-count . u51bc) (fxarithmetic-shift-right . u51bb) (fxarithmetic-shift-left . u51ba) (fxarithmetic-shift . u51b9) (fxand . u51b8) (fx>? . u51b7) (fx>=? . u51b6) (fx=? . u51b5) (fx<? . u51b4) (fx<=? . u51b3) (fx-/carry . u51b2) (fx- . u51b1) (fx+/carry . u51b0) (fx+ . u51af) (fx*/carry . u51ae) (fx* . u51ad) (greatest-fixnum . u51ac) (least-fixnum . u51ab) (fixnum-width . u51aa) (fixnum? . u51a9)) '() values values '#f '#f '#t '#f) (u2c6c@u2ab8@install-library 'u53ce '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . u4e0c) (no-infinities-violation? . u4df7) (make-no-nans-violation . u4e0a) (make-no-infinities-violation . u4df5) (real->flonum . u5203) (flzero? . u5202) (fltruncate . u5201) (fltan . u5200) (flsqrt . u51ff) (flsin . u51fe) (flround . u51fd) (flpositive? . u51fc) (flonum? . u51fb) (flodd? . u51fa) (flnumerator . u51f9) (flnegative? . u51f8) (flnan? . u51f7) (flmod0 . u51f6) (flmod . u51f5) (flmin . u51f4) (flmax . u51f3) (fllog . u51f2) (flinteger? . u51f1) (flinfinite? . u51f0) (flfloor . u51ef) (flfinite? . u51ee) (flexpt . u51ed) (flexp . u51ec) (fleven? . u51eb) (fldiv0-and-mod0 . u51ea) (fldiv0 . u51e9) (fldiv-and-mod . u51e8) (fldiv . u51e7) (fldenominator . u51e6) (flcos . u51e5) (flceiling . u51e4) (flatan . u51e3) (flasin . u51e2) (flacos . u51e1) (flabs . u51e0) (fl>? . u51df) (fl>=? . u51de) (fl=? . u51dd) (fl<? . u51dc) (fl<=? . u51db) (fl/ . u51da) (fl- . u51d9) (fl+ . u51d8) (fl* . u51d7) (fixnum->flonum . u51d6) (&no-nans . u50f4) (&no-infinities . u50f3)) '() values values '#f '#f '#t '#f) (u2c6c@u2ab8@install-library 'u53cf '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . u52dd) (string-ci-hash . u52dc) (string-hash . u52db) (equal-hash . u52da) (hashtable-equivalence-function . u52d9) (make-hashtable . u52d8) (hashtable-hash-function . u52d7) (make-eqv-hashtable . u52d6) (make-eq-hashtable . u52d5) (hashtable? . u52d4) (hashtable-update! . u52d3) (hashtable-size . u52d2) (hashtable-set! . u52d1) (hashtable-ref . u52d0) (hashtable-mutable? . u52cf) (hashtable-keys . u52ce) (hashtable-entries . u52cd) (hashtable-delete! . u52cc) (hashtable-copy . u52cb) (hashtable-contains? . u52ca) (hashtable-clear! . u52c9)) '() values values '#f '#f '#t '#f) (u2c6c@u2ab8@install-library 'u53d0 '(rnrs io ports) '(6) '() '() '() '((eof-object? . u52b9) (eof-object . u52b8) (current-error-port . u52b7) (current-output-port . u52b6) (current-input-port . u52b5) (output-port? . u52b4) (input-port? . u52b3) (utf-8-codec . u52b2) (utf-16-codec . u52b1) (transcoder-error-handling-mode . u52b0) (transcoder-eol-style . u52af) (transcoder-codec . u52ae) (transcoded-port . u52ad) (textual-port? . u52ac) (string->bytevector . u52ab) (standard-output-port . u52aa) (standard-input-port . u52a9) (standard-error-port . u52a8) (set-port-position! . u52a7) (put-u8 . u52a6) (put-string . u52a5) (put-datum . u52a4) (put-char . u52a3) (put-bytevector . u52a2) (port? . u52a1) (port-transcoder . u52a0) (port-position . u529f) (port-has-set-port-position!? . u529e) (port-has-port-position? . u529d) (port-eof? . u529c) (output-port-buffer-mode . u529b) (open-string-output-port . u529a) (open-string-input-port . u5299) (open-file-output-port . u5298) (open-file-input/output-port . u5297) (open-file-input-port . u5296) (open-bytevector-output-port . u5295) (open-bytevector-input-port . u5294) (native-transcoder . u5293) (native-eol-style . u5292) (make-transcoder . u5291) (latin-1-codec . u5290) (make-i/o-write-error . u4d0b) (make-i/o-read-error . u4cf6) (make-i/o-port-error . u4dac) (make-i/o-invalid-position-error . u4d22) (make-i/o-filename-error . u4d3d) (make-i/o-file-protection-error . u4d56) (make-i/o-file-is-read-only-error . u4d6b) (make-i/o-file-does-not-exist-error . u4d95) (make-i/o-file-already-exists-error . u4d80) (make-i/o-error . u4ce1) (make-i/o-encoding-error . u4ddc) (make-i/o-decoding-error . u4dc5) (make-custom-textual-output-port . u528f) (make-custom-textual-input/output-port . u528e) (make-custom-textual-input-port . u528d) (make-custom-binary-output-port . u528c) (make-custom-binary-input/output-port . u528b) (make-custom-binary-input-port . u528a) (lookahead-u8 . u5288) (lookahead-char . u5287) (i/o-write-error? . u4d0d) (i/o-read-error? . u4cf8) (i/o-port-error? . u4db0) (i/o-invalid-position-error? . u4d26) (i/o-filename-error? . u4d41) (i/o-file-protection-error? . u4d58) (i/o-file-is-read-only-error? . u4d6d) (i/o-file-does-not-exist-error? . u4d97) (i/o-file-already-exists-error? . u4d82) (i/o-error? . u4ce3) (i/o-error-position . u4d28) (i/o-error-port . u4db2) (i/o-error-filename . u4d43) (i/o-encoding-error? . u4de0) (i/o-encoding-error-char . u4de2) (i/o-decoding-error? . u4dc7) (get-u8 . u5286) (get-string-n! . u5285) (get-string-n . u5284) (get-string-all . u5283) (get-line . u5282) (get-datum . u5281) (get-char . u5280) (get-bytevector-some . u527f) (get-bytevector-n! . u527e) (get-bytevector-n . u527d) (get-bytevector-all . u527c) (flush-output-port . u527b) (close-port . u527a) (call-with-string-output-port . u5259) (call-with-port . u5258) (call-with-bytevector-output-port . u5257) (bytevector->string . u5256) (buffer-mode? . u5255) (binary-port? . u5254) (&i/o-encoding . u50f2) (&i/o-decoding . u50f1) (&i/o-port . u50f0) (&i/o-file-does-not-exist . u50ef) (&i/o-file-already-exists . u50ee) (&i/o-file-is-read-only . u50ed) (&i/o-file-protection . u50ec) (&i/o-filename . u50eb) (&i/o-invalid-position . u50ea) (&i/o-write . u50e9) (&i/o-read . u50e8) (&i/o . u50e7) (error-handling-mode . u50cc) (file-options . u50cb) (buffer-mode . u50ca) (eol-style . u50c9)) '() values values '#f '#f '#t '#f) (u2c6c@u2ab8@install-library 'u53d1 '(rnrs enums) '(6) '() '() '() '((make-enumeration . u5250) (enum-set=? . u524f) (enum-set-universe . u524e) (enum-set-union . u524d) (enum-set-subset? . u524c) (enum-set-projection . u524b) (enum-set-member? . u524a) (enum-set-intersection . u5249) (enum-set-indexer . u5248) (enum-set-difference . u5247) (enum-set-constructor . u5246) (enum-set-complement . u5245) (enum-set->list . u5244) (define-enumeration . u50d7)) '() values values '#f '#f '#t '#f) (u2c6c@u2ab8@install-library 'u53d2 '(rnrs conditions) '(6) '() '() '() '((who-condition? . u4c57) (warning? . u4bcf) (violation? . u4c0e) (undefined-violation? . u4cce) (syntax-violation? . u4cb5) (syntax-violation-subform . u4cb9) (syntax-violation-form . u4cb7) (syntax-violation . u3127) (simple-conditions . u5243) (serious-condition? . u4be4) (non-continuable-violation? . u4c6e) (message-condition? . u4bb8) (make-who-condition . u4c53) (make-warning . u4bcd) (make-violation . u4c0c) (make-undefined-violation . u4ccc) (make-syntax-violation . u4caf) (make-serious-condition . u4be2) (make-non-continuable-violation . u4c6c) (make-message-condition . u4bb4) (make-lexical-violation . u4c96) (make-irritants-condition . u4c38) (make-implementation-restriction-violation . u4c81) (make-error . u4bf7) (make-assertion-violation . u4c21) (lexical-violation? . u4c98) (irritants-condition? . u4c3c) (implementation-restriction-violation? . u4c83) (error? . u4bf9) (condition-who . u4c59) (condition-predicate . u5242) (condition-message . u4bba) (condition-irritants . u4c3e) (condition-accessor . u5241) (condition . u5240) (assertion-violation? . u4c23) (condition? . u523f) (&undefined . u50e6) (&syntax . u50e5) (&lexical . u50e4) (&implementation-restriction . u50e3) (&non-continuable . u50e2) (&who . u50e1) (&irritants . u50e0) (&assertion . u50df) (&violation . u50de) (&error . u50dd) (&serious . u50dc) (&warning . u50db) (&message . u50da) (&condition . u50d9) (define-condition-type . u50d8)) '() values values '#f '#f '#t '#f) (u2c6c@u2ab8@install-library 'u53d3 '(rnrs records inspection) '(6) '() '() '() '((record? . u52ec) (record-type-uid . u52eb) (record-type-sealed? . u52ea) (record-type-parent . u52e9) (record-type-opaque? . u52e8) (record-type-name . u52e7) (record-type-generative? . u52e6) (record-type-field-names . u52e5) (record-rtd . u52e4) (record-field-mutable? . u52e3)) '() values values '#f '#f '#t '#f) (u2c6c@u2ab8@install-library 'u53d4 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . u52f3) (record-predicate . u52f2) (record-mutator . u52f1) (record-constructor . u52f0) (record-accessor . u52ef) (make-record-type-descriptor . u52ee) (make-record-constructor-descriptor . u52ed)) '() values values '#f '#f '#t '#f) (u2c6c@u2ab8@install-library 'u53d5 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . u50d6) (parent-rtd . u50d5) (nongenerative . u50d4) (opaque . u50d3) (sealed . u50d2) (protocol . u50d1) (parent . u50d0) (immutable . u50cf) (mutable . u50ce) (fields . u50cd) (record-constructor-descriptor . u50ac) (record-type-descriptor . u50ab)) '() values values '#f '#f '#t '#f) (u2c6c@u2ab8@install-library 'u53d6 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . u4e10) (&no-nans-rtd . u4e0e) (&no-infinities-rcd . u4dfb) (&no-infinities-rtd . u4df9) (&i/o-encoding-rcd . u4de6) (&i/o-encoding-rtd . u4de4) (&i/o-decoding-rcd . u4dcb) (&i/o-decoding-rtd . u4dc9) (&i/o-port-rcd . u4db6) (&i/o-port-rtd . u4db4) (&i/o-file-does-not-exist-rcd . u4d9b) (&i/o-file-does-not-exist-rtd . u4d99) (&i/o-file-already-exists-rcd . u4d86) (&i/o-file-already-exists-rtd . u4d84) (&i/o-file-is-read-only-rcd . u4d71) (&i/o-file-is-read-only-rtd . u4d6f) (&i/o-file-protection-rcd . u4d5c) (&i/o-file-protection-rtd . u4d5a) (&i/o-filename-rcd . u4d47) (&i/o-filename-rtd . u4d45) (&i/o-invalid-position-rcd . u4d2c) (&i/o-invalid-position-rtd . u4d2a) (&i/o-write-rcd . u4d11) (&i/o-write-rtd . u4d0f) (&i/o-read-rcd . u4cfc) (&i/o-read-rtd . u4cfa) (&i/o-rcd . u4ce7) (&i/o-rtd . u4ce5) (&undefined-rcd . u4cd2) (&undefined-rtd . u4cd0) (&syntax-rcd . u4cbd) (&syntax-rtd . u4cbb) (&lexical-rcd . u4c9c) (&lexical-rtd . u4c9a) (&implementation-restriction-rcd . u4c87) (&implementation-restriction-rtd . u4c85) (&non-continuable-rcd . u4c72) (&non-continuable-rtd . u4c70) (&who-rcd . u4c5d) (&who-rtd . u4c5b) (&irritants-rcd . u4c42) (&irritants-rtd . u4c40) (&assertion-rcd . u4c27) (&assertion-rtd . u4c25) (&violation-rcd . u4c12) (&violation-rtd . u4c10) (&error-rcd . u4bfd) (&error-rtd . u4bfb) (&serious-rcd . u4be8) (&serious-rtd . u4be6) (&warning-rcd . u4bd3) (&warning-rtd . u4bd1) (&message-rcd . u4bbe) (&message-rtd . u4bbc) (&condition-rcd . u4b5f) (&condition-rtd . u4b5d) (syntax-error . u3123) (syntax-dispatch . u3047) (pretty-print . u53b6) (eval-core . u53b5) (set-symbol-value! . u53b4) (symbol-value . u53b3) (gensym . u53b2) (void . u53b1) (load . u4f1d) (interaction-environment . u3133) (char-ready? . u53b0) (regexp? . u53af) (read-line . u53ae) (gensym-prefix-set! . u53ad) (ungensym . u53ac) (alist->eq-hash-table . u53ab) (assoc-ref . u53aa) (print . u53a9) (format . u53a8) (host-os . u53a7) (library-path . u2a97) (standard-library-path . u53a6) (file-newer? . u53a5) (stat-mtime . u53a4) (write-to-file . u53a3) (file->list . u53a2) (file->string . u53a1) (digit->integer . u53a0) (call-with-string-input-port . u539f) (call-with-string-io . u539e) (string-split . u539d) (bytevector-for-each . u539c) (string->regexp . u539b) (rxmatch . u539a) (regexp-replace-all . u5399) (hashtable-for-each . u5398) (call-process . u5397) (local-tz-offset . u5396) (microseconds . u5395) (directory-list . u5394) (set-current-directory! . u5393) (expand-path . u5392) (current-directory . u5391) (%spawn . u5390) (%waitpid . u538f) (simple-struct-name . u538e) (simple-struct-set! . u538d) (simple-struct-ref . u538c) (make-simple-struct . u538b) (simple-struct? . u538a) (pointer-ref-c-int64 . u5389) (pointer-ref-c-int32 . u5388) (pointer-ref-c-int16 . u5387) (pointer-ref-c-int8 . u5386) (pointer-ref-c-uint64 . u5385) (pointer-ref-c-uint32 . u5384) (pointer-ref-c-uint16 . u5383) (pointer-ref-c-uint8 . u5382) (pointer-set-c-uint64! . u5381) (pointer-set-c-uint32! . u5380) (pointer-set-c-uint16! . u537f) (pointer-set-c-uint8! . u537e) (pointer-set-c-int64! . u537d) (pointer-set-c-int32! . u537c) (pointer-set-c-int16! . u537b) (pointer-set-c-int8! . u537a) (pointer-set-c-pointer! . u5379) (pointer-set-c-double! . u5378) (pointer-set-c-float! . u5377) (pointer-set-c-long-long! . u5376) (pointer-set-c-long! . u5375) (pointer-set-c-int! . u5374) (pointer-set-c-short! . u5373) (pointer-set-c-char! . u5372) (pointer-ref-c-pointer . u5371) (pointer-ref-c-double . u5370) (pointer-ref-c-float . u536f) (pointer-ref-c-unsigned-long-long . u536e) (pointer-ref-c-signed-long-long . u536d) (pointer-ref-c-unsigned-long . u536c) (pointer-ref-c-signed-long . u536b) (pointer-ref-c-unsigned-int . u536a) (pointer-ref-c-signed-int . u5369) (pointer-ref-c-unsigned-short . u5368) (pointer-ref-c-signed-short . u5367) (pointer-ref-c-unsigned-char . u5366) (pointer-ref-c-signed-char . u5365) (pointer->integer . u5364) (integer->pointer . u5363) (pointer? . u5362) (shared-errno . u5361) (%ffi-supported? . u5360) (%ffi-pointer->string . u535f) (%ffi-call->string-or-zero . u535e) (%ffi-call->double . u535d) (%ffi-call->void* . u535c) (%ffi-call->void . u535b) (%ffi-call->char . u535a) (%ffi-call->int . u5359) (%ffi-lookup . u5358) (%ffi-open . u5357) (%fork . u5356) (%pipe . u5355) (p . u5354) (open-output-string . u5353) (get-output-string . u5352) (file-stat-ctime . u5351) (file-stat-atime . u5350) (file-stat-mtime . u534f) (file-size-in-bytes . u534e) (file-writable? . u534d) (file-executable? . u534c) (file-readable? . u534b) (file-regular? . u534a) (file-symbolic-link? . u5349) (file-directory? . u5348) (create-symbolic-link . u5347) (rename-file . u5346) (delete-directory . u5345) (create-directory . u5344) (create-mosh-cache-dir . u5343) (get-environment-variables . u5342) (get-environment-variable . u5341) (join-wraps . u5340) (id->real-label . u533f) (same-marks? . u533e) (same-marks*? . u533d) (get-timeofday . u533c) (get-command-line . u533b) (sys-display . u533a) (whereis . u5339) (register . u5338) (vm-join! . u5337) (vm-set-value! . u5336) (vm? . u5335) (main-vm? . u5334) (vm-eval . u5333) (vm-self . u5332) (vm-start! . u5331) (make-vm . u5330) (mutex-try-lock! . u532f) (mutex-unlock! . u532e) (mutex-lock! . u532d) (mutex? . u532c) (make-mutex . u532b) (condition-variable-notify-all! . u532a) (condition-variable-notify! . u5329) (condition-variable-wait! . u5328) (make-condition-variable . u5327) (mosh-executable-path . u5326) (make-file-options . u5325) (source-info . u5324) (make-compiler-instruction . u5323) (make-instruction . u5322) (set-source-info! . u5321) (bignum? . u5320) (fast-equal? . u531f) (fasl-read . u531e) (fasl-write . u531d) (time-usage . u531c) (os-constant . u531b) (make-parameter . u2880) (socket-port . u531a) (socket-shutdown . u5319) (socket-close . u5318) (socket-send . u5317) (socket-recv! . u5316) (socket-recv . u5315) (make-server-socket . u5314) (make-client-socket . u5313) (socket-accept . u5312) (socket? . u5311) (string-upcase . u5310) (string-titlecase . u530f) (string-normalize-nfkd . u530e) (string-normalize-nfkc . u530d) (string-normalize-nfd . u530c) (string-normalize-nfc . u530b) (string-foldcase . u530a) (string-downcase . u5309) (string-ci>? . u5308) (string-ci>=? . u5307) (string-ci=? . u5306) (string-ci<? . u5305) (string-ci<=? . u5304) (char-whitespace? . u5303) (char-upper-case? . u5302) (char-title-case? . u5301) (char-numeric? . u5300) (char-lower-case? . u52ff) (char-general-category . u52fe) (char-upcase . u52fd) (char-titlecase . u52fc) (char-foldcase . u52fb) (char-downcase . u52fa) (char-ci>? . u52f9) (char-ci>=? . u52f8) (char-ci=? . u52f7) (char-ci<? . u52f6) (char-ci<=? . u52f5) (char-alphabetic? . u52f4) (make-variable-transformer . u2e74) (identifier? . u3129) (generate-temporaries . u3115) (free-identifier=? . u3117) (syntax->datum . u312d) (datum->syntax . u312b) (bound-identifier=? . u3119) (record-type-descriptor? . u52f3) (record-predicate . u52f2) (record-mutator . u52f1) (record-constructor . u52f0) (record-accessor . u52ef) (make-record-type-descriptor . u52ee) (make-record-constructor-descriptor . u52ed) (record? . u52ec) (record-type-uid . u52eb) (record-type-sealed? . u52ea) (record-type-parent . u52e9) (record-type-opaque? . u52e8) (record-type-name . u52e7) (record-type-generative? . u52e6) (record-type-field-names . u52e5) (record-rtd . u52e4) (record-field-mutable? . u52e3) (delete-file . u52e2) (file-exists? . u52e1) (vector-sort! . u52e0) (vector-sort . u52df) (list-sort . u52de) (symbol-hash . u52dd) (string-ci-hash . u52dc) (string-hash . u52db) (equal-hash . u52da) (hashtable-equivalence-function . u52d9) (make-hashtable . u52d8) (hashtable-hash-function . u52d7) (make-eqv-hashtable . u52d6) (make-eq-hashtable . u52d5) (hashtable? . u52d4) (hashtable-update! . u52d3) (hashtable-size . u52d2) (hashtable-set! . u52d1) (hashtable-ref . u52d0) (hashtable-mutable? . u52cf) (hashtable-keys . u52ce) (hashtable-entries . u52cd) (hashtable-delete! . u52cc) (hashtable-copy . u52cb) (hashtable-contains? . u52ca) (hashtable-clear! . u52c9) (call-with-output-file . u52c8) (call-with-input-file . u52c7) (write-char . u52c6) (write . u52c5) (with-output-to-file . u52c4) (with-input-from-file . u52c3) (read-char . u52c2) (read . u52c1) (peek-char . u52c0) (open-output-file . u52bf) (open-input-file . u52be) (newline . u52bd) (display . u52bc) (close-output-port . u52bb) (close-input-port . u52ba) (eof-object? . u52b9) (eof-object . u52b8) (current-error-port . u52b7) (current-output-port . u52b6) (current-input-port . u52b5) (output-port? . u52b4) (input-port? . u52b3) (utf-8-codec . u52b2) (utf-16-codec . u52b1) (transcoder-error-handling-mode . u52b0) (transcoder-eol-style . u52af) (transcoder-codec . u52ae) (transcoded-port . u52ad) (textual-port? . u52ac) (string->bytevector . u52ab) (standard-output-port . u52aa) (standard-input-port . u52a9) (standard-error-port . u52a8) (set-port-position! . u52a7) (put-u8 . u52a6) (put-string . u52a5) (put-datum . u52a4) (put-char . u52a3) (put-bytevector . u52a2) (port? . u52a1) (port-transcoder . u52a0) (port-position . u529f) (port-has-set-port-position!? . u529e) (port-has-port-position? . u529d) (port-eof? . u529c) (output-port-buffer-mode . u529b) (open-string-output-port . u529a) (open-string-input-port . u5299) (open-file-output-port . u5298) (open-file-input/output-port . u5297) (open-file-input-port . u5296) (open-bytevector-output-port . u5295) (open-bytevector-input-port . u5294) (native-transcoder . u5293) (native-eol-style . u5292) (make-transcoder . u5291) (latin-1-codec . u5290) (make-i/o-write-error . u4d0b) (make-i/o-read-error . u4cf6) (make-i/o-port-error . u4dac) (make-i/o-invalid-position-error . u4d22) (make-i/o-filename-error . u4d3d) (make-i/o-file-protection-error . u4d56) (make-i/o-file-is-read-only-error . u4d6b) (make-i/o-file-does-not-exist-error . u4d95) (make-i/o-file-already-exists-error . u4d80) (make-i/o-error . u4ce1) (make-i/o-encoding-error . u4ddc) (make-i/o-decoding-error . u4dc5) (make-custom-textual-output-port . u528f) (make-custom-textual-input/output-port . u528e) (make-custom-textual-input-port . u528d) (make-custom-binary-output-port . u528c) (make-custom-binary-input/output-port . u528b) (make-custom-binary-input-port . u528a) (make-bytevector . u5289) (lookahead-u8 . u5288) (lookahead-char . u5287) (i/o-write-error? . u4d0d) (i/o-read-error? . u4cf8) (i/o-port-error? . u4db0) (i/o-invalid-position-error? . u4d26) (i/o-filename-error? . u4d41) (i/o-file-protection-error? . u4d58) (i/o-file-is-read-only-error? . u4d6d) (i/o-file-does-not-exist-error? . u4d97) (i/o-file-already-exists-error? . u4d82) (i/o-error? . u4ce3) (i/o-error-position . u4d28) (i/o-error-port . u4db2) (i/o-error-filename . u4d43) (i/o-encoding-error? . u4de0) (i/o-encoding-error-char . u4de2) (i/o-decoding-error? . u4dc7) (get-u8 . u5286) (get-string-n! . u5285) (get-string-n . u5284) (get-string-all . u5283) (get-line . u5282) (get-datum . u5281) (get-char . u5280) (get-bytevector-some . u527f) (get-bytevector-n! . u527e) (get-bytevector-n . u527d) (get-bytevector-all . u527c) (flush-output-port . u527b) (close-port . u527a) (scheme-report-environment . u3103) (quotient . u5279) (null-environment . u3101) (remainder . u5278) (modulo . u5277) (inexact->exact . u5276) (force . u5275) (exact->inexact . u5274) (make-promise . u5273) (exit . u5272) (command-line . u4f17) (string-fill! . u5271) (string-set! . u5270) (set-cdr! . u526f) (set-car! . u526e) (remove . u526d) (remv . u526c) (remp . u526b) (remq . u526a) (partition . u5269) (memv . u5268) (memq . u5267) (memp . u5266) (member . u5265) (exists . u5264) (for-all . u5263) (fold-right . u5262) (fold-left . u5261) (find . u5260) (filter . u525f) (cons* . u525e) (assv . u525d) (assq . u525c) (assp . u525b) (assoc . u525a) (call-with-string-output-port . u5259) (call-with-port . u5258) (call-with-bytevector-output-port . u5257) (bytevector->string . u5256) (buffer-mode? . u5255) (binary-port? . u5254) (with-exception-handler . u5253) (raise-continuable . u5252) (raise . u5251) (eval . u3107) (environment . u30ff) (make-enumeration . u5250) (enum-set=? . u524f) (enum-set-universe . u524e) (enum-set-union . u524d) (enum-set-subset? . u524c) (enum-set-projection . u524b) (enum-set-member? . u524a) (enum-set-intersection . u5249) (enum-set-indexer . u5248) (enum-set-difference . u5247) (enum-set-constructor . u5246) (enum-set-complement . u5245) (enum-set->list . u5244) (who-condition? . u4c57) (warning? . u4bcf) (violation? . u4c0e) (undefined-violation? . u4cce) (syntax-violation? . u4cb5) (syntax-violation-subform . u4cb9) (syntax-violation-form . u4cb7) (syntax-violation . u3127) (simple-conditions . u5243) (serious-condition? . u4be4) (non-continuable-violation? . u4c6e) (message-condition? . u4bb8) (make-who-condition . u4c53) (make-warning . u4bcd) (make-violation . u4c0c) (make-undefined-violation . u4ccc) (make-syntax-violation . u4caf) (make-serious-condition . u4be2) (make-non-continuable-violation . u4c6c) (make-message-condition . u4bb4) (make-lexical-violation . u4c96) (make-irritants-condition . u4c38) (make-implementation-restriction-violation . u4c81) (make-error . u4bf7) (make-assertion-violation . u4c21) (lexical-violation? . u4c98) (irritants-condition? . u4c3c) (implementation-restriction-violation? . u4c83) (error? . u4bf9) (condition-who . u4c59) (condition-predicate . u5242) (condition-message . u4bba) (condition-irritants . u4c3e) (condition-accessor . u5241) (condition . u5240) (assertion-violation? . u4c23) (condition? . u523f) (utf32->string . u523e) (utf16->string . u523d) (utf8->string . u523c) (uint-list->bytevector . u523b) (u8-list->bytevector . u523a) (string->utf8 . u5239) (string->utf32 . u5238) (string->utf16 . u5237) (sint-list->bytevector . u5236) (native-endianness . u5235) (bytevector? . u5234) (bytevector=? . u5233) (bytevector-uint-set! . u5232) (bytevector-uint-ref . u5231) (bytevector-u8-set! . u5230) (bytevector-u8-ref . u522f) (bytevector-u64-set! . u522e) (bytevector-u64-ref . u522d) (bytevector-u64-native-set! . u522c) (bytevector-u64-native-ref . u522b) (bytevector-u32-set! . u522a) (bytevector-u32-ref . u5229) (bytevector-u32-native-set! . u5228) (bytevector-u32-native-ref . u5227) (bytevector-u16-set! . u5226) (bytevector-u16-ref . u5225) (bytevector-u16-native-set! . u5224) (bytevector-u16-native-ref . u5223) (bytevector-sint-set! . u5222) (bytevector-sint-ref . u5221) (bytevector-s8-set! . u5220) (bytevector-s8-ref . u521f) (bytevector-s64-set! . u521e) (bytevector-s64-ref . u521d) (bytevector-s64-native-set! . u521c) (bytevector-s64-native-ref . u521b) (bytevector-s32-set! . u521a) (bytevector-s32-ref . u5219) (bytevector-s32-native-set! . u5218) (bytevector-s32-native-ref . u5217) (bytevector-s16-set! . u5216) (bytevector-s16-ref . u5215) (bytevector-s16-native-set! . u5214) (bytevector-s16-native-ref . u5213) (bytevector-length . u5212) (bytevector-ieee-single-ref . u5211) (bytevector-ieee-single-set! . u5210) (bytevector-ieee-single-native-set! . u520f) (bytevector-ieee-single-native-ref . u520e) (bytevector-ieee-double-set! . u520d) (bytevector-ieee-double-ref . u520c) (bytevector-ieee-double-native-set! . u520b) (bytevector-ieee-double-native-ref . u520a) (bytevector-fill! . u5209) (bytevector-copy! . u5208) (bytevector-copy . u5207) (bytevector->uint-list . u5206) (bytevector->u8-list . u5205) (bytevector->sint-list . u5204) (no-nans-violation? . u4e0c) (no-infinities-violation? . u4df7) (make-no-nans-violation . u4e0a) (make-no-infinities-violation . u4df5) (real->flonum . u5203) (flzero? . u5202) (fltruncate . u5201) (fltan . u5200) (flsqrt . u51ff) (flsin . u51fe) (flround . u51fd) (flpositive? . u51fc) (flonum? . u51fb) (flodd? . u51fa) (flnumerator . u51f9) (flnegative? . u51f8) (flnan? . u51f7) (flmod0 . u51f6) (flmod . u51f5) (flmin . u51f4) (flmax . u51f3) (fllog . u51f2) (flinteger? . u51f1) (flinfinite? . u51f0) (flfloor . u51ef) (flfinite? . u51ee) (flexpt . u51ed) (flexp . u51ec) (fleven? . u51eb) (fldiv0-and-mod0 . u51ea) (fldiv0 . u51e9) (fldiv-and-mod . u51e8) (fldiv . u51e7) (fldenominator . u51e6) (flcos . u51e5) (flceiling . u51e4) (flatan . u51e3) (flasin . u51e2) (flacos . u51e1) (flabs . u51e0) (fl>? . u51df) (fl>=? . u51de) (fl=? . u51dd) (fl<? . u51dc) (fl<=? . u51db) (fl/ . u51da) (fl- . u51d9) (fl+ . u51d8) (fl* . u51d7) (fixnum->flonum . u51d6) (fxzero? . u51d5) (fxxor . u51d4) (fxrotate-bit-field . u51d3) (fxreverse-bit-field . u51d2) (fxpositive? . u51d1) (fxodd? . u51d0) (fxnot . u51cf) (fxnegative? . u51ce) (fxmod0 . u51cd) (fxmod . u51cc) (fxmin . u51cb) (fxmax . u51ca) (fxlength . u51c9) (fxior . u51c8) (fxif . u51c7) (fxfirst-bit-set . u51c6) (fxeven? . u51c5) (fxdiv0-and-mod0 . u51c4) (fxdiv0 . u51c3) (fxdiv-and-mod . u51c2) (fxdiv . u51c1) (fxcopy-bit-field . u51c0) (fxcopy-bit . u51bf) (fxbit-set? . u51be) (fxbit-field . u51bd) (fxbit-count . u51bc) (fxarithmetic-shift-right . u51bb) (fxarithmetic-shift-left . u51ba) (fxarithmetic-shift . u51b9) (fxand . u51b8) (fx>? . u51b7) (fx>=? . u51b6) (fx=? . u51b5) (fx<? . u51b4) (fx<=? . u51b3) (fx-/carry . u51b2) (fx- . u51b1) (fx+/carry . u51b0) (fx+ . u51af) (fx*/carry . u51ae) (fx* . u51ad) (greatest-fixnum . u51ac) (least-fixnum . u51ab) (fixnum-width . u51aa) (fixnum? . u51a9) (bitwise-rotate-bit-field . u51a8) (bitwise-reverse-bit-field . u51a7) (bitwise-length . u51a6) (bitwise-if . u51a5) (bitwise-first-bit-set . u51a4) (bitwise-copy-bit-field . u51a3) (bitwise-copy-bit . u51a2) (bitwise-bit-set? . u51a1) (bitwise-bit-field . u51a0) (bitwise-bit-count . u519f) (bitwise-xor . u519e) (bitwise-ior . u519d) (bitwise-and . u519c) (bitwise-not . u519b) (bitwise-arithmetic-shift-right . u519a) (bitwise-arithmetic-shift-left . u5199) (bitwise-arithmetic-shift . u5198) (zero? . u5197) (vector? . u5196) (vector-set! . u5195) (vector-ref . u5194) (vector-map . u5193) (vector-length . u5192) (vector-for-each . u5191) (vector-fill! . u5190) (vector->list . u518f) (vector . u518e) (values . u518d) (truncate . u518c) (tan . u518b) (symbol? . u518a) (symbol=? . u5189) (symbol->string . u5188) (substring . u5187) (string? . u5186) (string>? . u5185) (string>=? . u5184) (string=? . u5183) (string<? . u5182) (string<=? . u5181) (string-ref . u5180) (string-length . u517f) (string-for-each . u517e) (string-copy . u517d) (string-append . u517c) (string->symbol . u517b) (string->number . u517a) (string->list . u5179) (string . u5178) (sqrt . u5177) (sin . u5176) (round . u5175) (reverse . u5174) (real? . u5173) (real-valued? . u5172) (real-part . u5171) (rationalize . u5170) (rational? . u516f) (rational-valued? . u516e) (procedure? . u516d) (positive? . u516c) (pair? . u516b) (odd? . u516a) (numerator . u5169) (number? . u5168) (number->string . u5167) (null? . u5166) (not . u5165) (negative? . u5164) (nan? . u5163) (min . u5162) (max . u5161) (map . u5160) (make-vector . u515f) (make-string . u515e) (make-rectangular . u515d) (make-polar . u515c) (magnitude . u515b) (log . u515a) (list? . u5159) (list-tail . u5158) (list-ref . u5157) (list->vector . u5156) (list->string . u5155) (list . u5154) (length . u5153) (lcm . u5152) (integer? . u5151) (integer-valued? . u5150) (integer->char . u514f) (infinite? . u514e) (inexact? . u514d) (inexact . u514c) (imag-part . u514b) (gcd . u514a) (for-each . u5149) (floor . u5148) (finite? . u5147) (expt . u5146) (exp . u5145) (exact? . u5144) (exact-integer-sqrt . u5143) (exact . u5142) (even? . u5141) (error . u5140) (eqv? . u513f) (equal? . u513e) (eq? . u513d) (dynamic-wind . u513c) (div0-and-mod0 . u513b) (mod0 . u513a) (div0 . u5139) (div-and-mod . u5138) (mod . u5137) (div . u5136) (denominator . u5135) (cos . u5134) (cons . u5133) (complex? . u5132) (char? . u5131) (char>? . u5130) (char>=? . u512f) (char=? . u512e) (char<? . u512d) (char<=? . u512c) (char->integer . u512b) (ceiling . u512a) (call-with-values . u5129) (call/cc . u5128) (call-with-current-continuation . u5127) (cddddr . u5126) (cdddar . u5125) (cddadr . u5124) (cddaar . u5123) (cdaddr . u5122) (cdadar . u5121) (cdaadr . u5120) (cdaaar . u511f) (cadddr . u511e) (caddar . u511d) (cadadr . u511c) (cadaar . u511b) (caaddr . u511a) (caadar . u5119) (caaadr . u5118) (caaaar . u5117) (cdddr . u5116) (cddar . u5115) (cdadr . u5114) (cdaar . u5113) (caddr . u5112) (cadar . u5111) (caadr . u5110) (caaar . u510f) (cddr . u510e) (cdar . u510d) (cadr . u510c) (caar . u510b) (cdr . u510a) (car . u5109) (boolean? . u5108) (boolean=? . u5107) (atan . u5106) (assertion-violation . u5105) (assertion-error . u3121) (asin . u5104) (apply . u5103) (append . u5102) (angle . u5101) (acos . u5100) (abs . u50ff) (/ . u50fe) (* . u50fd) (- . u50fc) (+ . u50fb) (>= . u50fa) (> . u50f9) (= . u50f8) (<= . u50f7) (< . u50f6) (library . u50f5) (&no-nans . u50f4) (&no-infinities . u50f3) (&i/o-encoding . u50f2) (&i/o-decoding . u50f1) (&i/o-port . u50f0) (&i/o-file-does-not-exist . u50ef) (&i/o-file-already-exists . u50ee) (&i/o-file-is-read-only . u50ed) (&i/o-file-protection . u50ec) (&i/o-filename . u50eb) (&i/o-invalid-position . u50ea) (&i/o-write . u50e9) (&i/o-read . u50e8) (&i/o . u50e7) (&undefined . u50e6) (&syntax . u50e5) (&lexical . u50e4) (&implementation-restriction . u50e3) (&non-continuable . u50e2) (&who . u50e1) (&irritants . u50e0) (&assertion . u50df) (&violation . u50de) (&error . u50dd) (&serious . u50dc) (&warning . u50db) (&message . u50da) (&condition . u50d9) (define-condition-type . u50d8) (define-enumeration . u50d7) (define-record-type . u50d6) (parent-rtd . u50d5) (nongenerative . u50d4) (opaque . u50d3) (sealed . u50d2) (protocol . u50d1) (parent . u50d0) (immutable . u50cf) (mutable . u50ce) (fields . u50cd) (error-handling-mode . u50cc) (file-options . u50cb) (buffer-mode . u50ca) (eol-style . u50c9) (guard . u50c8) (trace-define . u50c7) (trace-lambda . u50c6) (unsyntax-splicing . u50c5) (unsyntax . u50c4) (unquote-splicing . u50c3) (unquote . u50c2) (_ . u50c1) (else . u50c0) (=> . u50bf) (... . u50be) (assert . u50bd) (endianness . u50bc) (delay . u50bb) (time . u50ba) (do . u50b9) (cond . u50b8) (let* . u50b7) (let . u50b6) (let*-values . u50b5) (let-values . u50b4) (identifier-syntax . u50b3) (with-syntax . u50b2) (quasisyntax . u50b1) (quasiquote . u50b0) (syntax-rules . u50af) (include . u50ae) (define-struct . u50ad) (record-constructor-descriptor . u50ac) (record-type-descriptor . u50ab) (case . u50aa) (parameterize . u50a9) (unless . u50a8) (when . u50a7) (or . u50a6) (and . u50a5) (if . u50a4) (letrec* . u50a3) (letrec . u50a2) (type-descriptor . u50a1) (case-lambda . u50a0) (lambda . u509f) (syntax . u509e) (syntax-case . u509d) (quote . u509c) (foreign-call . u509b) (letrec-syntax . u509a) (let-syntax . u5099) (set! . u5098) (import . u5097) (begin . u5096) (module . u5095) (define-syntax . u5094) (define . u5093)) '((u4e10 core-prim . &no-nans-rcd) (u4e0e core-prim . &no-nans-rtd) (u4dfb core-prim . &no-infinities-rcd) (u4df9 core-prim . &no-infinities-rtd) (u4de6 core-prim . &i/o-encoding-rcd) (u4de4 core-prim . &i/o-encoding-rtd) (u4dcb core-prim . &i/o-decoding-rcd) (u4dc9 core-prim . &i/o-decoding-rtd) (u4db6 core-prim . &i/o-port-rcd) (u4db4 core-prim . &i/o-port-rtd) (u4d9b core-prim . &i/o-file-does-not-exist-rcd) (u4d99 core-prim . &i/o-file-does-not-exist-rtd) (u4d86 core-prim . &i/o-file-already-exists-rcd) (u4d84 core-prim . &i/o-file-already-exists-rtd) (u4d71 core-prim . &i/o-file-is-read-only-rcd) (u4d6f core-prim . &i/o-file-is-read-only-rtd) (u4d5c core-prim . &i/o-file-protection-rcd) (u4d5a core-prim . &i/o-file-protection-rtd) (u4d47 core-prim . &i/o-filename-rcd) (u4d45 core-prim . &i/o-filename-rtd) (u4d2c core-prim . &i/o-invalid-position-rcd) (u4d2a core-prim . &i/o-invalid-position-rtd) (u4d11 core-prim . &i/o-write-rcd) (u4d0f core-prim . &i/o-write-rtd) (u4cfc core-prim . &i/o-read-rcd) (u4cfa core-prim . &i/o-read-rtd) (u4ce7 core-prim . &i/o-rcd) (u4ce5 core-prim . &i/o-rtd) (u4cd2 core-prim . &undefined-rcd) (u4cd0 core-prim . &undefined-rtd) (u4cbd core-prim . &syntax-rcd) (u4cbb core-prim . &syntax-rtd) (u4c9c core-prim . &lexical-rcd) (u4c9a core-prim . &lexical-rtd) (u4c87 core-prim . &implementation-restriction-rcd) (u4c85 core-prim . &implementation-restriction-rtd) (u4c72 core-prim . &non-continuable-rcd) (u4c70 core-prim . &non-continuable-rtd) (u4c5d core-prim . &who-rcd) (u4c5b core-prim . &who-rtd) (u4c42 core-prim . &irritants-rcd) (u4c40 core-prim . &irritants-rtd) (u4c27 core-prim . &assertion-rcd) (u4c25 core-prim . &assertion-rtd) (u4c12 core-prim . &violation-rcd) (u4c10 core-prim . &violation-rtd) (u4bfd core-prim . &error-rcd) (u4bfb core-prim . &error-rtd) (u4be8 core-prim . &serious-rcd) (u4be6 core-prim . &serious-rtd) (u4bd3 core-prim . &warning-rcd) (u4bd1 core-prim . &warning-rtd) (u4bbe core-prim . &message-rcd) (u4bbc core-prim . &message-rtd) (u4b5f core-prim . &condition-rcd) (u4b5d core-prim . &condition-rtd) (u3123 core-prim . syntax-error) (u3047 core-prim . syntax-dispatch) (u53b6 core-prim . pretty-print) (u53b5 core-prim . eval-core) (u53b4 core-prim . set-symbol-value!) (u53b3 core-prim . symbol-value) (u53b2 core-prim . gensym) (u53b1 core-prim . void) (u4f1d core-prim . load) (u3133 core-prim . interaction-environment) (u53b0 core-prim . char-ready?) (u53af core-prim . regexp?) (u53ae core-prim . read-line) (u53ad core-prim . gensym-prefix-set!) (u53ac core-prim . ungensym) (u53ab core-prim . alist->eq-hash-table) (u53aa core-prim . assoc-ref) (u53a9 core-prim . print) (u53a8 core-prim . format) (u53a7 core-prim . host-os) (u2a97 core-prim . library-path) (u53a6 core-prim . standard-library-path) (u53a5 core-prim . file-newer?) (u53a4 core-prim . stat-mtime) (u53a3 core-prim . write-to-file) (u53a2 core-prim . file->list) (u53a1 core-prim . file->string) (u53a0 core-prim . digit->integer) (u539f core-prim . call-with-string-input-port) (u539e core-prim . call-with-string-io) (u539d core-prim . string-split) (u539c core-prim . bytevector-for-each) (u539b core-prim . string->regexp) (u539a core-prim . rxmatch) (u5399 core-prim . regexp-replace-all) (u5398 core-prim . hashtable-for-each) (u5397 core-prim . call-process) (u5396 core-prim . local-tz-offset) (u5395 core-prim . microseconds) (u5394 core-prim . directory-list) (u5393 core-prim . set-current-directory!) (u5392 core-prim . expand-path) (u5391 core-prim . current-directory) (u5390 core-prim . %spawn) (u538f core-prim . %waitpid) (u538e core-prim . simple-struct-name) (u538d core-prim . simple-struct-set!) (u538c core-prim . simple-struct-ref) (u538b core-prim . make-simple-struct) (u538a core-prim . simple-struct?) (u5389 core-prim . pointer-ref-c-int64) (u5388 core-prim . pointer-ref-c-int32) (u5387 core-prim . pointer-ref-c-int16) (u5386 core-prim . pointer-ref-c-int8) (u5385 core-prim . pointer-ref-c-uint64) (u5384 core-prim . pointer-ref-c-uint32) (u5383 core-prim . pointer-ref-c-uint16) (u5382 core-prim . pointer-ref-c-uint8) (u5381 core-prim . pointer-set-c-uint64!) (u5380 core-prim . pointer-set-c-uint32!) (u537f core-prim . pointer-set-c-uint16!) (u537e core-prim . pointer-set-c-uint8!) (u537d core-prim . pointer-set-c-int64!) (u537c core-prim . pointer-set-c-int32!) (u537b core-prim . pointer-set-c-int16!) (u537a core-prim . pointer-set-c-int8!) (u5379 core-prim . pointer-set-c-pointer!) (u5378 core-prim . pointer-set-c-double!) (u5377 core-prim . pointer-set-c-float!) (u5376 core-prim . pointer-set-c-long-long!) (u5375 core-prim . pointer-set-c-long!) (u5374 core-prim . pointer-set-c-int!) (u5373 core-prim . pointer-set-c-short!) (u5372 core-prim . pointer-set-c-char!) (u5371 core-prim . pointer-ref-c-pointer) (u5370 core-prim . pointer-ref-c-double) (u536f core-prim . pointer-ref-c-float) (u536e core-prim . pointer-ref-c-unsigned-long-long) (u536d core-prim . pointer-ref-c-signed-long-long) (u536c core-prim . pointer-ref-c-unsigned-long) (u536b core-prim . pointer-ref-c-signed-long) (u536a core-prim . pointer-ref-c-unsigned-int) (u5369 core-prim . pointer-ref-c-signed-int) (u5368 core-prim . pointer-ref-c-unsigned-short) (u5367 core-prim . pointer-ref-c-signed-short) (u5366 core-prim . pointer-ref-c-unsigned-char) (u5365 core-prim . pointer-ref-c-signed-char) (u5364 core-prim . pointer->integer) (u5363 core-prim . integer->pointer) (u5362 core-prim . pointer?) (u5361 core-prim . shared-errno) (u5360 core-prim . %ffi-supported?) (u535f core-prim . %ffi-pointer->string) (u535e core-prim . %ffi-call->string-or-zero) (u535d core-prim . %ffi-call->double) (u535c core-prim . %ffi-call->void*) (u535b core-prim . %ffi-call->void) (u535a core-prim . %ffi-call->char) (u5359 core-prim . %ffi-call->int) (u5358 core-prim . %ffi-lookup) (u5357 core-prim . %ffi-open) (u5356 core-prim . %fork) (u5355 core-prim . %pipe) (u5354 core-prim . p) (u5353 core-prim . open-output-string) (u5352 core-prim . get-output-string) (u5351 core-prim . file-stat-ctime) (u5350 core-prim . file-stat-atime) (u534f core-prim . file-stat-mtime) (u534e core-prim . file-size-in-bytes) (u534d core-prim . file-writable?) (u534c core-prim . file-executable?) (u534b core-prim . file-readable?) (u534a core-prim . file-regular?) (u5349 core-prim . file-symbolic-link?) (u5348 core-prim . file-directory?) (u5347 core-prim . create-symbolic-link) (u5346 core-prim . rename-file) (u5345 core-prim . delete-directory) (u5344 core-prim . create-directory) (u5343 core-prim . create-mosh-cache-dir) (u5342 core-prim . get-environment-variables) (u5341 core-prim . get-environment-variable) (u5340 core-prim . join-wraps) (u533f core-prim . id->real-label) (u533e core-prim . same-marks?) (u533d core-prim . same-marks*?) (u533c core-prim . get-timeofday) (u533b core-prim . get-command-line) (u533a core-prim . sys-display) (u5339 core-prim . whereis) (u5338 core-prim . register) (u5337 core-prim . vm-join!) (u5336 core-prim . vm-set-value!) (u5335 core-prim . vm?) (u5334 core-prim . main-vm?) (u5333 core-prim . vm-eval) (u5332 core-prim . vm-self) (u5331 core-prim . vm-start!) (u5330 core-prim . make-vm) (u532f core-prim . mutex-try-lock!) (u532e core-prim . mutex-unlock!) (u532d core-prim . mutex-lock!) (u532c core-prim . mutex?) (u532b core-prim . make-mutex) (u532a core-prim . condition-variable-notify-all!) (u5329 core-prim . condition-variable-notify!) (u5328 core-prim . condition-variable-wait!) (u5327 core-prim . make-condition-variable) (u5326 core-prim . mosh-executable-path) (u5325 core-prim . make-file-options) (u5324 core-prim . source-info) (u5323 core-prim . make-compiler-instruction) (u5322 core-prim . make-instruction) (u5321 core-prim . set-source-info!) (u5320 core-prim . bignum?) (u531f core-prim . fast-equal?) (u531e core-prim . fasl-read) (u531d core-prim . fasl-write) (u531c core-prim . time-usage) (u531b core-prim . os-constant) (u2880 core-prim . make-parameter) (u531a core-prim . socket-port) (u5319 core-prim . socket-shutdown) (u5318 core-prim . socket-close) (u5317 core-prim . socket-send) (u5316 core-prim . socket-recv!) (u5315 core-prim . socket-recv) (u5314 core-prim . make-server-socket) (u5313 core-prim . make-client-socket) (u5312 core-prim . socket-accept) (u5311 core-prim . socket?) (u5310 core-prim . string-upcase) (u530f core-prim . string-titlecase) (u530e core-prim . string-normalize-nfkd) (u530d core-prim . string-normalize-nfkc) (u530c core-prim . string-normalize-nfd) (u530b core-prim . string-normalize-nfc) (u530a core-prim . string-foldcase) (u5309 core-prim . string-downcase) (u5308 core-prim . string-ci>?) (u5307 core-prim . string-ci>=?) (u5306 core-prim . string-ci=?) (u5305 core-prim . string-ci<?) (u5304 core-prim . string-ci<=?) (u5303 core-prim . char-whitespace?) (u5302 core-prim . char-upper-case?) (u5301 core-prim . char-title-case?) (u5300 core-prim . char-numeric?) (u52ff core-prim . char-lower-case?) (u52fe core-prim . char-general-category) (u52fd core-prim . char-upcase) (u52fc core-prim . char-titlecase) (u52fb core-prim . char-foldcase) (u52fa core-prim . char-downcase) (u52f9 core-prim . char-ci>?) (u52f8 core-prim . char-ci>=?) (u52f7 core-prim . char-ci=?) (u52f6 core-prim . char-ci<?) (u52f5 core-prim . char-ci<=?) (u52f4 core-prim . char-alphabetic?) (u2e74 core-prim . make-variable-transformer) (u3129 core-prim . identifier?) (u3115 core-prim . generate-temporaries) (u3117 core-prim . free-identifier=?) (u312d core-prim . syntax->datum) (u312b core-prim . datum->syntax) (u3119 core-prim . bound-identifier=?) (u52f3 core-prim . record-type-descriptor?) (u52f2 core-prim . record-predicate) (u52f1 core-prim . record-mutator) (u52f0 core-prim . record-constructor) (u52ef core-prim . record-accessor) (u52ee core-prim . make-record-type-descriptor) (u52ed core-prim . make-record-constructor-descriptor) (u52ec core-prim . record?) (u52eb core-prim . record-type-uid) (u52ea core-prim . record-type-sealed?) (u52e9 core-prim . record-type-parent) (u52e8 core-prim . record-type-opaque?) (u52e7 core-prim . record-type-name) (u52e6 core-prim . record-type-generative?) (u52e5 core-prim . record-type-field-names) (u52e4 core-prim . record-rtd) (u52e3 core-prim . record-field-mutable?) (u52e2 core-prim . delete-file) (u52e1 core-prim . file-exists?) (u52e0 core-prim . vector-sort!) (u52df core-prim . vector-sort) (u52de core-prim . list-sort) (u52dd core-prim . symbol-hash) (u52dc core-prim . string-ci-hash) (u52db core-prim . string-hash) (u52da core-prim . equal-hash) (u52d9 core-prim . hashtable-equivalence-function) (u52d8 core-prim . make-hashtable) (u52d7 core-prim . hashtable-hash-function) (u52d6 core-prim . make-eqv-hashtable) (u52d5 core-prim . make-eq-hashtable) (u52d4 core-prim . hashtable?) (u52d3 core-prim . hashtable-update!) (u52d2 core-prim . hashtable-size) (u52d1 core-prim . hashtable-set!) (u52d0 core-prim . hashtable-ref) (u52cf core-prim . hashtable-mutable?) (u52ce core-prim . hashtable-keys) (u52cd core-prim . hashtable-entries) (u52cc core-prim . hashtable-delete!) (u52cb core-prim . hashtable-copy) (u52ca core-prim . hashtable-contains?) (u52c9 core-prim . hashtable-clear!) (u52c8 core-prim . call-with-output-file) (u52c7 core-prim . call-with-input-file) (u52c6 core-prim . write-char) (u52c5 core-prim . write) (u52c4 core-prim . with-output-to-file) (u52c3 core-prim . with-input-from-file) (u52c2 core-prim . read-char) (u52c1 core-prim . read) (u52c0 core-prim . peek-char) (u52bf core-prim . open-output-file) (u52be core-prim . open-input-file) (u52bd core-prim . newline) (u52bc core-prim . display) (u52bb core-prim . close-output-port) (u52ba core-prim . close-input-port) (u52b9 core-prim . eof-object?) (u52b8 core-prim . eof-object) (u52b7 core-prim . current-error-port) (u52b6 core-prim . current-output-port) (u52b5 core-prim . current-input-port) (u52b4 core-prim . output-port?) (u52b3 core-prim . input-port?) (u52b2 core-prim . utf-8-codec) (u52b1 core-prim . utf-16-codec) (u52b0 core-prim . transcoder-error-handling-mode) (u52af core-prim . transcoder-eol-style) (u52ae core-prim . transcoder-codec) (u52ad core-prim . transcoded-port) (u52ac core-prim . textual-port?) (u52ab core-prim . string->bytevector) (u52aa core-prim . standard-output-port) (u52a9 core-prim . standard-input-port) (u52a8 core-prim . standard-error-port) (u52a7 core-prim . set-port-position!) (u52a6 core-prim . put-u8) (u52a5 core-prim . put-string) (u52a4 core-prim . put-datum) (u52a3 core-prim . put-char) (u52a2 core-prim . put-bytevector) (u52a1 core-prim . port?) (u52a0 core-prim . port-transcoder) (u529f core-prim . port-position) (u529e core-prim . port-has-set-port-position!?) (u529d core-prim . port-has-port-position?) (u529c core-prim . port-eof?) (u529b core-prim . output-port-buffer-mode) (u529a core-prim . open-string-output-port) (u5299 core-prim . open-string-input-port) (u5298 core-prim . open-file-output-port) (u5297 core-prim . open-file-input/output-port) (u5296 core-prim . open-file-input-port) (u5295 core-prim . open-bytevector-output-port) (u5294 core-prim . open-bytevector-input-port) (u5293 core-prim . native-transcoder) (u5292 core-prim . native-eol-style) (u5291 core-prim . make-transcoder) (u5290 core-prim . latin-1-codec) (u4d0b core-prim . make-i/o-write-error) (u4cf6 core-prim . make-i/o-read-error) (u4dac core-prim . make-i/o-port-error) (u4d22 core-prim . make-i/o-invalid-position-error) (u4d3d core-prim . make-i/o-filename-error) (u4d56 core-prim . make-i/o-file-protection-error) (u4d6b core-prim . make-i/o-file-is-read-only-error) (u4d95 core-prim . make-i/o-file-does-not-exist-error) (u4d80 core-prim . make-i/o-file-already-exists-error) (u4ce1 core-prim . make-i/o-error) (u4ddc core-prim . make-i/o-encoding-error) (u4dc5 core-prim . make-i/o-decoding-error) (u528f core-prim . make-custom-textual-output-port) (u528e core-prim . make-custom-textual-input/output-port) (u528d core-prim . make-custom-textual-input-port) (u528c core-prim . make-custom-binary-output-port) (u528b core-prim . make-custom-binary-input/output-port) (u528a core-prim . make-custom-binary-input-port) (u5289 core-prim . make-bytevector) (u5288 core-prim . lookahead-u8) (u5287 core-prim . lookahead-char) (u4d0d core-prim . i/o-write-error?) (u4cf8 core-prim . i/o-read-error?) (u4db0 core-prim . i/o-port-error?) (u4d26 core-prim . i/o-invalid-position-error?) (u4d41 core-prim . i/o-filename-error?) (u4d58 core-prim . i/o-file-protection-error?) (u4d6d core-prim . i/o-file-is-read-only-error?) (u4d97 core-prim . i/o-file-does-not-exist-error?) (u4d82 core-prim . i/o-file-already-exists-error?) (u4ce3 core-prim . i/o-error?) (u4d28 core-prim . i/o-error-position) (u4db2 core-prim . i/o-error-port) (u4d43 core-prim . i/o-error-filename) (u4de0 core-prim . i/o-encoding-error?) (u4de2 core-prim . i/o-encoding-error-char) (u4dc7 core-prim . i/o-decoding-error?) (u5286 core-prim . get-u8) (u5285 core-prim . get-string-n!) (u5284 core-prim . get-string-n) (u5283 core-prim . get-string-all) (u5282 core-prim . get-line) (u5281 core-prim . get-datum) (u5280 core-prim . get-char) (u527f core-prim . get-bytevector-some) (u527e core-prim . get-bytevector-n!) (u527d core-prim . get-bytevector-n) (u527c core-prim . get-bytevector-all) (u527b core-prim . flush-output-port) (u527a core-prim . close-port) (u3103 core-prim . scheme-report-environment) (u5279 core-prim . quotient) (u3101 core-prim . null-environment) (u5278 core-prim . remainder) (u5277 core-prim . modulo) (u5276 core-prim . inexact->exact) (u5275 core-prim . force) (u5274 core-prim . exact->inexact) (u5273 core-prim . make-promise) (u5272 core-prim . exit) (u4f17 core-prim . command-line) (u5271 core-prim . string-fill!) (u5270 core-prim . string-set!) (u526f core-prim . set-cdr!) (u526e core-prim . set-car!) (u526d core-prim . remove) (u526c core-prim . remv) (u526b core-prim . remp) (u526a core-prim . remq) (u5269 core-prim . partition) (u5268 core-prim . memv) (u5267 core-prim . memq) (u5266 core-prim . memp) (u5265 core-prim . member) (u5264 core-prim . exists) (u5263 core-prim . for-all) (u5262 core-prim . fold-right) (u5261 core-prim . fold-left) (u5260 core-prim . find) (u525f core-prim . filter) (u525e core-prim . cons*) (u525d core-prim . assv) (u525c core-prim . assq) (u525b core-prim . assp) (u525a core-prim . assoc) (u5259 core-prim . call-with-string-output-port) (u5258 core-prim . call-with-port) (u5257 core-prim . call-with-bytevector-output-port) (u5256 core-prim . bytevector->string) (u5255 core-prim . buffer-mode?) (u5254 core-prim . binary-port?) (u5253 core-prim . with-exception-handler) (u5252 core-prim . raise-continuable) (u5251 core-prim . raise) (u3107 core-prim . eval) (u30ff core-prim . environment) (u5250 core-prim . make-enumeration) (u524f core-prim . enum-set=?) (u524e core-prim . enum-set-universe) (u524d core-prim . enum-set-union) (u524c core-prim . enum-set-subset?) (u524b core-prim . enum-set-projection) (u524a core-prim . enum-set-member?) (u5249 core-prim . enum-set-intersection) (u5248 core-prim . enum-set-indexer) (u5247 core-prim . enum-set-difference) (u5246 core-prim . enum-set-constructor) (u5245 core-prim . enum-set-complement) (u5244 core-prim . enum-set->list) (u4c57 core-prim . who-condition?) (u4bcf core-prim . warning?) (u4c0e core-prim . violation?) (u4cce core-prim . undefined-violation?) (u4cb5 core-prim . syntax-violation?) (u4cb9 core-prim . syntax-violation-subform) (u4cb7 core-prim . syntax-violation-form) (u3127 core-prim . syntax-violation) (u5243 core-prim . simple-conditions) (u4be4 core-prim . serious-condition?) (u4c6e core-prim . non-continuable-violation?) (u4bb8 core-prim . message-condition?) (u4c53 core-prim . make-who-condition) (u4bcd core-prim . make-warning) (u4c0c core-prim . make-violation) (u4ccc core-prim . make-undefined-violation) (u4caf core-prim . make-syntax-violation) (u4be2 core-prim . make-serious-condition) (u4c6c core-prim . make-non-continuable-violation) (u4bb4 core-prim . make-message-condition) (u4c96 core-prim . make-lexical-violation) (u4c38 core-prim . make-irritants-condition) (u4c81 core-prim . make-implementation-restriction-violation) (u4bf7 core-prim . make-error) (u4c21 core-prim . make-assertion-violation) (u4c98 core-prim . lexical-violation?) (u4c3c core-prim . irritants-condition?) (u4c83 core-prim . implementation-restriction-violation?) (u4bf9 core-prim . error?) (u4c59 core-prim . condition-who) (u5242 core-prim . condition-predicate) (u4bba core-prim . condition-message) (u4c3e core-prim . condition-irritants) (u5241 core-prim . condition-accessor) (u5240 core-prim . condition) (u4c23 core-prim . assertion-violation?) (u523f core-prim . condition?) (u523e core-prim . utf32->string) (u523d core-prim . utf16->string) (u523c core-prim . utf8->string) (u523b core-prim . uint-list->bytevector) (u523a core-prim . u8-list->bytevector) (u5239 core-prim . string->utf8) (u5238 core-prim . string->utf32) (u5237 core-prim . string->utf16) (u5236 core-prim . sint-list->bytevector) (u5235 core-prim . native-endianness) (u5234 core-prim . bytevector?) (u5233 core-prim . bytevector=?) (u5232 core-prim . bytevector-uint-set!) (u5231 core-prim . bytevector-uint-ref) (u5230 core-prim . bytevector-u8-set!) (u522f core-prim . bytevector-u8-ref) (u522e core-prim . bytevector-u64-set!) (u522d core-prim . bytevector-u64-ref) (u522c core-prim . bytevector-u64-native-set!) (u522b core-prim . bytevector-u64-native-ref) (u522a core-prim . bytevector-u32-set!) (u5229 core-prim . bytevector-u32-ref) (u5228 core-prim . bytevector-u32-native-set!) (u5227 core-prim . bytevector-u32-native-ref) (u5226 core-prim . bytevector-u16-set!) (u5225 core-prim . bytevector-u16-ref) (u5224 core-prim . bytevector-u16-native-set!) (u5223 core-prim . bytevector-u16-native-ref) (u5222 core-prim . bytevector-sint-set!) (u5221 core-prim . bytevector-sint-ref) (u5220 core-prim . bytevector-s8-set!) (u521f core-prim . bytevector-s8-ref) (u521e core-prim . bytevector-s64-set!) (u521d core-prim . bytevector-s64-ref) (u521c core-prim . bytevector-s64-native-set!) (u521b core-prim . bytevector-s64-native-ref) (u521a core-prim . bytevector-s32-set!) (u5219 core-prim . bytevector-s32-ref) (u5218 core-prim . bytevector-s32-native-set!) (u5217 core-prim . bytevector-s32-native-ref) (u5216 core-prim . bytevector-s16-set!) (u5215 core-prim . bytevector-s16-ref) (u5214 core-prim . bytevector-s16-native-set!) (u5213 core-prim . bytevector-s16-native-ref) (u5212 core-prim . bytevector-length) (u5211 core-prim . bytevector-ieee-single-ref) (u5210 core-prim . bytevector-ieee-single-set!) (u520f core-prim . bytevector-ieee-single-native-set!) (u520e core-prim . bytevector-ieee-single-native-ref) (u520d core-prim . bytevector-ieee-double-set!) (u520c core-prim . bytevector-ieee-double-ref) (u520b core-prim . bytevector-ieee-double-native-set!) (u520a core-prim . bytevector-ieee-double-native-ref) (u5209 core-prim . bytevector-fill!) (u5208 core-prim . bytevector-copy!) (u5207 core-prim . bytevector-copy) (u5206 core-prim . bytevector->uint-list) (u5205 core-prim . bytevector->u8-list) (u5204 core-prim . bytevector->sint-list) (u4e0c core-prim . no-nans-violation?) (u4df7 core-prim . no-infinities-violation?) (u4e0a core-prim . make-no-nans-violation) (u4df5 core-prim . make-no-infinities-violation) (u5203 core-prim . real->flonum) (u5202 core-prim . flzero?) (u5201 core-prim . fltruncate) (u5200 core-prim . fltan) (u51ff core-prim . flsqrt) (u51fe core-prim . flsin) (u51fd core-prim . flround) (u51fc core-prim . flpositive?) (u51fb core-prim . flonum?) (u51fa core-prim . flodd?) (u51f9 core-prim . flnumerator) (u51f8 core-prim . flnegative?) (u51f7 core-prim . flnan?) (u51f6 core-prim . flmod0) (u51f5 core-prim . flmod) (u51f4 core-prim . flmin) (u51f3 core-prim . flmax) (u51f2 core-prim . fllog) (u51f1 core-prim . flinteger?) (u51f0 core-prim . flinfinite?) (u51ef core-prim . flfloor) (u51ee core-prim . flfinite?) (u51ed core-prim . flexpt) (u51ec core-prim . flexp) (u51eb core-prim . fleven?) (u51ea core-prim . fldiv0-and-mod0) (u51e9 core-prim . fldiv0) (u51e8 core-prim . fldiv-and-mod) (u51e7 core-prim . fldiv) (u51e6 core-prim . fldenominator) (u51e5 core-prim . flcos) (u51e4 core-prim . flceiling) (u51e3 core-prim . flatan) (u51e2 core-prim . flasin) (u51e1 core-prim . flacos) (u51e0 core-prim . flabs) (u51df core-prim . fl>?) (u51de core-prim . fl>=?) (u51dd core-prim . fl=?) (u51dc core-prim . fl<?) (u51db core-prim . fl<=?) (u51da core-prim . fl/) (u51d9 core-prim . fl-) (u51d8 core-prim . fl+) (u51d7 core-prim . fl*) (u51d6 core-prim . fixnum->flonum) (u51d5 core-prim . fxzero?) (u51d4 core-prim . fxxor) (u51d3 core-prim . fxrotate-bit-field) (u51d2 core-prim . fxreverse-bit-field) (u51d1 core-prim . fxpositive?) (u51d0 core-prim . fxodd?) (u51cf core-prim . fxnot) (u51ce core-prim . fxnegative?) (u51cd core-prim . fxmod0) (u51cc core-prim . fxmod) (u51cb core-prim . fxmin) (u51ca core-prim . fxmax) (u51c9 core-prim . fxlength) (u51c8 core-prim . fxior) (u51c7 core-prim . fxif) (u51c6 core-prim . fxfirst-bit-set) (u51c5 core-prim . fxeven?) (u51c4 core-prim . fxdiv0-and-mod0) (u51c3 core-prim . fxdiv0) (u51c2 core-prim . fxdiv-and-mod) (u51c1 core-prim . fxdiv) (u51c0 core-prim . fxcopy-bit-field) (u51bf core-prim . fxcopy-bit) (u51be core-prim . fxbit-set?) (u51bd core-prim . fxbit-field) (u51bc core-prim . fxbit-count) (u51bb core-prim . fxarithmetic-shift-right) (u51ba core-prim . fxarithmetic-shift-left) (u51b9 core-prim . fxarithmetic-shift) (u51b8 core-prim . fxand) (u51b7 core-prim . fx>?) (u51b6 core-prim . fx>=?) (u51b5 core-prim . fx=?) (u51b4 core-prim . fx<?) (u51b3 core-prim . fx<=?) (u51b2 core-prim . fx-/carry) (u51b1 core-prim . fx-) (u51b0 core-prim . fx+/carry) (u51af core-prim . fx+) (u51ae core-prim . fx*/carry) (u51ad core-prim . fx*) (u51ac core-prim . greatest-fixnum) (u51ab core-prim . least-fixnum) (u51aa core-prim . fixnum-width) (u51a9 core-prim . fixnum?) (u51a8 core-prim . bitwise-rotate-bit-field) (u51a7 core-prim . bitwise-reverse-bit-field) (u51a6 core-prim . bitwise-length) (u51a5 core-prim . bitwise-if) (u51a4 core-prim . bitwise-first-bit-set) (u51a3 core-prim . bitwise-copy-bit-field) (u51a2 core-prim . bitwise-copy-bit) (u51a1 core-prim . bitwise-bit-set?) (u51a0 core-prim . bitwise-bit-field) (u519f core-prim . bitwise-bit-count) (u519e core-prim . bitwise-xor) (u519d core-prim . bitwise-ior) (u519c core-prim . bitwise-and) (u519b core-prim . bitwise-not) (u519a core-prim . bitwise-arithmetic-shift-right) (u5199 core-prim . bitwise-arithmetic-shift-left) (u5198 core-prim . bitwise-arithmetic-shift) (u5197 core-prim . zero?) (u5196 core-prim . vector?) (u5195 core-prim . vector-set!) (u5194 core-prim . vector-ref) (u5193 core-prim . vector-map) (u5192 core-prim . vector-length) (u5191 core-prim . vector-for-each) (u5190 core-prim . vector-fill!) (u518f core-prim . vector->list) (u518e core-prim . vector) (u518d core-prim . values) (u518c core-prim . truncate) (u518b core-prim . tan) (u518a core-prim . symbol?) (u5189 core-prim . symbol=?) (u5188 core-prim . symbol->string) (u5187 core-prim . substring) (u5186 core-prim . string?) (u5185 core-prim . string>?) (u5184 core-prim . string>=?) (u5183 core-prim . string=?) (u5182 core-prim . string<?) (u5181 core-prim . string<=?) (u5180 core-prim . string-ref) (u517f core-prim . string-length) (u517e core-prim . string-for-each) (u517d core-prim . string-copy) (u517c core-prim . string-append) (u517b core-prim . string->symbol) (u517a core-prim . string->number) (u5179 core-prim . string->list) (u5178 core-prim . string) (u5177 core-prim . sqrt) (u5176 core-prim . sin) (u5175 core-prim . round) (u5174 core-prim . reverse) (u5173 core-prim . real?) (u5172 core-prim . real-valued?) (u5171 core-prim . real-part) (u5170 core-prim . rationalize) (u516f core-prim . rational?) (u516e core-prim . rational-valued?) (u516d core-prim . procedure?) (u516c core-prim . positive?) (u516b core-prim . pair?) (u516a core-prim . odd?) (u5169 core-prim . numerator) (u5168 core-prim . number?) (u5167 core-prim . number->string) (u5166 core-prim . null?) (u5165 core-prim . not) (u5164 core-prim . negative?) (u5163 core-prim . nan?) (u5162 core-prim . min) (u5161 core-prim . max) (u5160 core-prim . map) (u515f core-prim . make-vector) (u515e core-prim . make-string) (u515d core-prim . make-rectangular) (u515c core-prim . make-polar) (u515b core-prim . magnitude) (u515a core-prim . log) (u5159 core-prim . list?) (u5158 core-prim . list-tail) (u5157 core-prim . list-ref) (u5156 core-prim . list->vector) (u5155 core-prim . list->string) (u5154 core-prim . list) (u5153 core-prim . length) (u5152 core-prim . lcm) (u5151 core-prim . integer?) (u5150 core-prim . integer-valued?) (u514f core-prim . integer->char) (u514e core-prim . infinite?) (u514d core-prim . inexact?) (u514c core-prim . inexact) (u514b core-prim . imag-part) (u514a core-prim . gcd) (u5149 core-prim . for-each) (u5148 core-prim . floor) (u5147 core-prim . finite?) (u5146 core-prim . expt) (u5145 core-prim . exp) (u5144 core-prim . exact?) (u5143 core-prim . exact-integer-sqrt) (u5142 core-prim . exact) (u5141 core-prim . even?) (u5140 core-prim . error) (u513f core-prim . eqv?) (u513e core-prim . equal?) (u513d core-prim . eq?) (u513c core-prim . dynamic-wind) (u513b core-prim . div0-and-mod0) (u513a core-prim . mod0) (u5139 core-prim . div0) (u5138 core-prim . div-and-mod) (u5137 core-prim . mod) (u5136 core-prim . div) (u5135 core-prim . denominator) (u5134 core-prim . cos) (u5133 core-prim . cons) (u5132 core-prim . complex?) (u5131 core-prim . char?) (u5130 core-prim . char>?) (u512f core-prim . char>=?) (u512e core-prim . char=?) (u512d core-prim . char<?) (u512c core-prim . char<=?) (u512b core-prim . char->integer) (u512a core-prim . ceiling) (u5129 core-prim . call-with-values) (u5128 core-prim . call/cc) (u5127 core-prim . call-with-current-continuation) (u5126 core-prim . cddddr) (u5125 core-prim . cdddar) (u5124 core-prim . cddadr) (u5123 core-prim . cddaar) (u5122 core-prim . cdaddr) (u5121 core-prim . cdadar) (u5120 core-prim . cdaadr) (u511f core-prim . cdaaar) (u511e core-prim . cadddr) (u511d core-prim . caddar) (u511c core-prim . cadadr) (u511b core-prim . cadaar) (u511a core-prim . caaddr) (u5119 core-prim . caadar) (u5118 core-prim . caaadr) (u5117 core-prim . caaaar) (u5116 core-prim . cdddr) (u5115 core-prim . cddar) (u5114 core-prim . cdadr) (u5113 core-prim . cdaar) (u5112 core-prim . caddr) (u5111 core-prim . cadar) (u5110 core-prim . caadr) (u510f core-prim . caaar) (u510e core-prim . cddr) (u510d core-prim . cdar) (u510c core-prim . cadr) (u510b core-prim . caar) (u510a core-prim . cdr) (u5109 core-prim . car) (u5108 core-prim . boolean?) (u5107 core-prim . boolean=?) (u5106 core-prim . atan) (u5105 core-prim . assertion-violation) (u3121 core-prim . assertion-error) (u5104 core-prim . asin) (u5103 core-prim . apply) (u5102 core-prim . append) (u5101 core-prim . angle) (u5100 core-prim . acos) (u50ff core-prim . abs) (u50fe core-prim . /) (u50fd core-prim . *) (u50fc core-prim . -) (u50fb core-prim . +) (u50fa core-prim . >=) (u50f9 core-prim . >) (u50f8 core-prim . =) (u50f7 core-prim . <=) (u50f6 core-prim . <) (u50f5 core-prim . library) (u50f4 $core-rtd &no-nans-rtd &no-nans-rcd) (u50f3 $core-rtd &no-infinities-rtd &no-infinities-rcd) (u50f2 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (u50f1 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (u50f0 $core-rtd &i/o-port-rtd &i/o-port-rcd) (u50ef $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (u50ee $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (u50ed $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (u50ec $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (u50eb $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (u50ea $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (u50e9 $core-rtd &i/o-write-rtd &i/o-write-rcd) (u50e8 $core-rtd &i/o-read-rtd &i/o-read-rcd) (u50e7 $core-rtd &i/o-rtd &i/o-rcd) (u50e6 $core-rtd &undefined-rtd &undefined-rcd) (u50e5 $core-rtd &syntax-rtd &syntax-rcd) (u50e4 $core-rtd &lexical-rtd &lexical-rcd) (u50e3 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (u50e2 $core-rtd &non-continuable-rtd &non-continuable-rcd) (u50e1 $core-rtd &who-rtd &who-rcd) (u50e0 $core-rtd &irritants-rtd &irritants-rcd) (u50df $core-rtd &assertion-rtd &assertion-rcd) (u50de $core-rtd &violation-rtd &violation-rcd) (u50dd $core-rtd &error-rtd &error-rcd) (u50dc $core-rtd &serious-rtd &serious-rcd) (u50db $core-rtd &warning-rtd &warning-rcd) (u50da $core-rtd &message-rtd &message-rcd) (u50d9 $core-rtd &condition-rtd &condition-rcd) (u50d8 macro . define-condition-type) (u50d7 macro . define-enumeration) (u50d6 macro . define-record-type) (u50d5 macro . parent-rtd) (u50d4 macro . nongenerative) (u50d3 macro . opaque) (u50d2 macro . sealed) (u50d1 macro . protocol) (u50d0 macro . parent) (u50cf macro . immutable) (u50ce macro . mutable) (u50cd macro . fields) (u50cc macro . error-handling-mode) (u50cb macro . file-options) (u50ca macro . buffer-mode) (u50c9 macro . eol-style) (u50c8 macro . guard) (u50c7 macro . trace-define) (u50c6 macro . trace-lambda) (u50c5 macro . unsyntax-splicing) (u50c4 macro . unsyntax) (u50c3 macro . unquote-splicing) (u50c2 macro . unquote) (u50c1 macro . _) (u50c0 macro . else) (u50bf macro . =>) (u50be macro . ...) (u50bd macro . assert) (u50bc macro . endianness) (u50bb macro . delay) (u50ba macro . time) (u50b9 macro . do) (u50b8 macro . cond) (u50b7 macro . let*) (u50b6 macro . let) (u50b5 macro . let*-values) (u50b4 macro . let-values) (u50b3 macro . identifier-syntax) (u50b2 macro . with-syntax) (u50b1 macro . quasisyntax) (u50b0 macro . quasiquote) (u50af macro . syntax-rules) (u50ae macro . include) (u50ad macro . define-struct) (u50ac core-macro . record-constructor-descriptor) (u50ab core-macro . record-type-descriptor) (u50aa macro . case) (u50a9 macro . parameterize) (u50a8 macro . unless) (u50a7 macro . when) (u50a6 core-macro . or) (u50a5 core-macro . and) (u50a4 core-macro . if) (u50a3 core-macro . letrec*) (u50a2 core-macro . letrec) (u50a1 core-macro . type-descriptor) (u50a0 core-macro . case-lambda) (u509f core-macro . lambda) (u509e core-macro . syntax) (u509d core-macro . syntax-case) (u509c core-macro . quote) (u509b core-macro . foreign-call) (u509a letrec-syntax) (u5099 let-syntax) (u5098 set!) (u5097 import) (u5096 begin) (u5095 module) (u5094 define-syntax) (u5093 define)) values values '#f '#f '#f '#f) (u2c6c@u2ab8@install-library 'u53d7 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . u53b6) (eval-core . u53b5) (set-symbol-value! . u53b4) (symbol-value . u53b3) (gensym . u53b2) (void . u53b1)) '() values values '#f '#f '#f '#f) (u2c6c@u2ab8@install-library 'u53d8 '(mosh) '() '() '() '() '((set-symbol-value! . u53b4) (symbol-value . u53b3) (regexp? . u53af) (read-line . u53ae) (ungensym . u53ac) (alist->eq-hash-table . u53ab) (assoc-ref . u53aa) (print . u53a9) (format . u53a8) (host-os . u53a7) (library-path . u2a97) (standard-library-path . u53a6) (file-newer? . u53a5) (stat-mtime . u53a4) (digit->integer . u53a0) (call-with-string-input-port . u539f) (call-with-string-io . u539e) (string-split . u539d) (bytevector-for-each . u539c) (string->regexp . u539b) (rxmatch . u539a) (regexp-replace-all . u5399) (hashtable-for-each . u5398) (set-current-directory! . u5393) (expand-path . u5392) (current-directory . u5391) (p . u5354) (get-timeofday . u533c) (get-command-line . u533b) (sys-display . u533a) (whereis . u5339) (register . u5338) (vm-join! . u5337) (vm-set-value! . u5336) (vm? . u5335) (main-vm? . u5334) (vm-eval . u5333) (vm-self . u5332) (vm-start! . u5331) (make-vm . u5330) (mutex-try-lock! . u532f) (mutex-unlock! . u532e) (mutex-lock! . u532d) (mutex? . u532c) (make-mutex . u532b) (condition-variable-notify-all! . u532a) (condition-variable-notify! . u5329) (condition-variable-wait! . u5328) (make-condition-variable . u5327) (mosh-executable-path . u5326) (make-file-options . u5325) (source-info . u5324) (make-compiler-instruction . u5323) (make-instruction . u5322) (set-source-info! . u5321) (bignum? . u5320) (fast-equal? . u531f) (fasl-read . u531e) (fasl-write . u531d) (time-usage . u531c) (os-constant . u531b) (time . u50ba) (include . u50ae)) '() values values '#f '#f '#f '#f) (u2c6c@u2ab8@install-library 'u53d9 '(system) '() '() '() '() '((gensym-prefix-set! . u53ad) (write-to-file . u53a3) (file->list . u53a2) (file->string . u53a1) (call-process . u5397) (local-tz-offset . u5396) (microseconds . u5395) (directory-list . u5394) (expand-path . u5392) (%spawn . u5390) (%waitpid . u538f) (simple-struct-name . u538e) (simple-struct-set! . u538d) (simple-struct-ref . u538c) (make-simple-struct . u538b) (simple-struct? . u538a) (pointer-ref-c-int64 . u5389) (pointer-ref-c-int32 . u5388) (pointer-ref-c-int16 . u5387) (pointer-ref-c-int8 . u5386) (pointer-ref-c-uint64 . u5385) (pointer-ref-c-uint32 . u5384) (pointer-ref-c-uint16 . u5383) (pointer-ref-c-uint8 . u5382) (pointer-set-c-uint64! . u5381) (pointer-set-c-uint32! . u5380) (pointer-set-c-uint16! . u537f) (pointer-set-c-uint8! . u537e) (pointer-set-c-int64! . u537d) (pointer-set-c-int32! . u537c) (pointer-set-c-int16! . u537b) (pointer-set-c-int8! . u537a) (pointer-set-c-pointer! . u5379) (pointer-set-c-double! . u5378) (pointer-set-c-float! . u5377) (pointer-set-c-long-long! . u5376) (pointer-set-c-long! . u5375) (pointer-set-c-int! . u5374) (pointer-set-c-short! . u5373) (pointer-set-c-char! . u5372) (pointer-ref-c-pointer . u5371) (pointer-ref-c-double . u5370) (pointer-ref-c-float . u536f) (pointer-ref-c-unsigned-long-long . u536e) (pointer-ref-c-signed-long-long . u536d) (pointer-ref-c-unsigned-long . u536c) (pointer-ref-c-signed-long . u536b) (pointer-ref-c-unsigned-int . u536a) (pointer-ref-c-signed-int . u5369) (pointer-ref-c-unsigned-short . u5368) (pointer-ref-c-signed-short . u5367) (pointer-ref-c-unsigned-char . u5366) (pointer-ref-c-signed-char . u5365) (pointer->integer . u5364) (integer->pointer . u5363) (pointer? . u5362) (shared-errno . u5361) (%ffi-supported? . u5360) (%ffi-pointer->string . u535f) (%ffi-call->string-or-zero . u535e) (%ffi-call->double . u535d) (%ffi-call->void* . u535c) (%ffi-call->void . u535b) (%ffi-call->char . u535a) (%ffi-call->int . u5359) (%ffi-lookup . u5358) (%ffi-open . u5357) (%fork . u5356) (%pipe . u5355) (open-output-string . u5353) (get-output-string . u5352) (file-stat-ctime . u5351) (file-stat-atime . u5350) (file-stat-mtime . u534f) (file-size-in-bytes . u534e) (file-writable? . u534d) (file-executable? . u534c) (file-readable? . u534b) (file-regular? . u534a) (file-symbolic-link? . u5349) (file-directory? . u5348) (create-symbolic-link . u5347) (rename-file . u5346) (delete-directory . u5345) (create-directory . u5344) (create-mosh-cache-dir . u5343) (get-environment-variables . u5342) (get-environment-variable . u5341) (join-wraps . u5340) (id->real-label . u533f) (same-marks? . u533e) (same-marks*? . u533d) (make-parameter . u2880) (socket-port . u531a) (socket-shutdown . u5319) (socket-close . u5318) (socket-send . u5317) (socket-recv! . u5316) (socket-recv . u5315) (make-server-socket . u5314) (make-client-socket . u5313) (socket-accept . u5312) (socket? . u5311) (parameterize . u50a9)) '() values values '#f '#f '#f '#f))
((lambda (u4f06@add-library-path! u4f08@parse-and-add-library-path u4f0a@for-each-with-index u4f0c@rpad u4f0e@condition-printer u4f10@record->field-alist u4f12@map-with-index u4f14@repl u4f16@trace-printer u4f18@command-line u4f1a@local-library-path u4f1c@load/args u4f1e@load u4f20@ironscheme-build u4f22@eval-top-level u4f24@compile-system-libraries u4f26@compile u4f28@compile->closure u4f2a@pre-compile-r6rs-file u4f2c@load-r6rs-top-level u4f2e@load-r6rs-top-level-sexp u4f30@prefix-inc u4f32@prefix-inc!) (begin (set! u4f06@add-library-path! (lambda (u4f6b@path) (u2c5c@u2a98@library-path (append (u2c5c@u2a98@library-path) (list u4f6b@path))))) (set! u4f08@parse-and-add-library-path (lambda (u4f6d@paths u4f6e@message) ((lambda (u4f71@t) (if u4f71@t ((lambda (u4f73@paths) (for-each (lambda (u4f75@path) (if (file-exists? u4f75@path) (u4f06@add-library-path! (expand-path u4f75@path)) (format (current-error-port) u4f6e@message u4f75@path))) (string-split u4f73@paths '#\:))) u4f71@t) (void))) u4f6d@paths))) (set! u4f0a@for-each-with-index (lambda (u4f77@proc u4f78@lst) (letrec ((u4f7b@loop (lambda (u4f7d@i u4f7e@lst) (if (null? u4f7e@lst) (if '#f '#f (void)) (begin (u4f77@proc u4f7d@i (car u4f7e@lst)) (u4f7b@loop (+ u4f7d@i '1) (cdr u4f7e@lst))))))) (u4f7b@loop '1 u4f78@lst)))) (set! u4f0c@rpad (lambda (u4f81@str u4f82@pad u4f83@n) ((lambda (u4f87@rest) ((letrec ((u4f89@loop (lambda (u4f8b@rest u4f8c@ret) (if (<= u4f8b@rest '0) u4f8c@ret (u4f89@loop (- u4f8b@rest '1) (string-append u4f8c@ret u4f82@pad)))))) u4f89@loop) u4f87@rest (format '"~a" u4f81@str))) (- u4f83@n (string-length (format '"~a" u4f81@str)))))) (set! u4f0e@condition-printer (lambda (u4f8f@e u4f90@port) ((lambda (u4f94@max-condition-len) (begin (set! u4f94@max-condition-len (apply max (map (lambda (u4fa5@c) (string-length (symbol->string (record-type-name (record-rtd u4fa5@c))))) (simple-conditions u4f8f@e)))) (begin (display '" Condition components:\n" u4f90@port) (u4f0a@for-each-with-index (lambda (u4f95@i u4f96@x) ((lambda (u4f99@rtd u4f9a@fields-alist) (begin (format u4f90@port '" ~d. ~a" u4f95@i (u4f0c@rpad (symbol->string (record-type-name u4f99@rtd)) '" " u4f94@max-condition-len)) (if (null? u4f9a@fields-alist) (newline u4f90@port) (void)) ((letrec ((u4f9d@loop (lambda (u4f9f@first u4fa0@fields-alist) (if (null? u4fa0@fields-alist) '() ((lambda (u4fa3@field) (begin (if (not u4f9f@first) (display (u4f0c@rpad '"" '" " (+ '4 u4f94@max-condition-len)) u4f90@port) (void)) (display '"       " u4f90@port) (display (car u4fa3@field) u4f90@port) (display '": " u4f90@port) (write (cdr u4fa3@field) u4f90@port) (newline u4f90@port) (u4f9d@loop '#f (cdr u4fa0@fields-alist)))) (car u4fa0@fields-alist)))))) u4f9d@loop) '#t u4f9a@fields-alist))) (record-rtd u4f96@x) (u4f10@record->field-alist u4f96@x))) (simple-conditions u4f8f@e))))) '#f))) (set! u4f10@record->field-alist (lambda (u4fa7@r) ((lambda (u4faa@ref) (begin (set! u4faa@ref (lambda (u4fb5@rtd u4fb6@i u4fb7@x) ((lambda (u4fbb@val) (if (symbol? u4fbb@val) (ungensym u4fbb@val) u4fbb@val)) ((record-accessor u4fb5@rtd u4fb6@i) u4fb7@x)))) ((letrec ((u4fab@loop (lambda (u4fad@ret u4fae@rtd) (if u4fae@rtd (u4fab@loop (append u4fad@ret (u4f12@map-with-index (lambda (u4fb1@i u4fb2@field) (cons u4fb2@field (u4faa@ref u4fae@rtd u4fb1@i u4fa7@r))) (vector->list (record-type-field-names u4fae@rtd)))) (record-type-parent u4fae@rtd)) u4fad@ret)))) u4fab@loop) '() (record-rtd u4fa7@r)))) '#f))) (set! u4f12@map-with-index (lambda (u4fbd@proc u4fbe@lst) ((letrec ((u4fc1@loop (lambda (u4fc3@i u4fc4@lst u4fc5@ret) (if (null? u4fc4@lst) (reverse u4fc5@ret) (u4fc1@loop (+ u4fc3@i '1) (cdr u4fc4@lst) (cons (u4fbd@proc u4fc3@i (car u4fc4@lst)) u4fc5@ret)))))) u4fc1@loop) '0 u4fbe@lst '()))) (set! u4f14@repl (lambda u4fc9@x ((lambda (u4fcc@rec) (begin (set! u4fcc@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (u4fcf@u4fcd) (lambda () (with-exception-handler (lambda (u4fd1@e) ((call/cc (lambda (u4fd3@u4fce) (u4fcf@u4fcd (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? u4fd1@e) (u4f0e@condition-printer u4fd1@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" u4fd1@e))) (u4fd3@u4fce (lambda () (raise-continuable u4fd1@e)))))))))) (lambda () ((letrec ((u4fd5@loop (lambda (u4fd7@line u4fd8@accum) ((lambda (u4fdc@parentheses-ok? u4fde@eval-string-print) (begin (set! u4fdc@parentheses-ok? (lambda (u4fe3@text) ((letrec ((u4fe5@loop (lambda (u4fe7@chars u4fe8@p0 u4fe9@p1) (if (null? u4fe7@chars) (= '0 u4fe8@p0 u4fe9@p1) ((lambda (u4fed@t) (if (memv u4fed@t '(#\()) (u4fe5@loop (cdr u4fe7@chars) (+ u4fe8@p0 '1) u4fe9@p1) (if (memv u4fed@t '(#\))) (u4fe5@loop (cdr u4fe7@chars) (- u4fe8@p0 '1) u4fe9@p1) (if (memv u4fed@t '(#\[)) (u4fe5@loop (cdr u4fe7@chars) u4fe8@p0 (+ u4fe9@p1 '1)) (if (memv u4fed@t '(#\])) (u4fe5@loop (cdr u4fe7@chars) u4fe8@p0 (- u4fe9@p1 '1)) (u4fe5@loop (cdr u4fe7@chars) u4fe8@p0 u4fe9@p1)))))) (car u4fe7@chars)))))) u4fe5@loop) (string->list u4fe3@text) '0 '0))) (set! u4fde@eval-string-print (lambda (u4fe1@text) (if (not (or (string=? '"\n" u4fe1@text) (= '0 (string-length u4fe1@text)))) (write (u4f22@eval-top-level (call-with-port (open-string-input-port u4fe1@text) read))) (void)))) (if (eof-object? u4fd7@line) (begin (u4fde@eval-string-print u4fd8@accum) (exit)) ((lambda (u4fdf@current) (if (u4fdc@parentheses-ok? u4fdf@current) (u4fde@eval-string-print u4fdf@current) (u4fd5@loop (get-line (current-input-port)) u4fdf@current))) (string-append u4fd8@accum u4fd7@line))))) '#f '#f)))) u4fd5@loop) (get-line (current-input-port)) '""))))))) (newline) (u4fcc@rec)))) (u4fcc@rec))) '#f))) (set! u4f16@trace-printer (u29a2@u2881@make-parameter write)) (set! u4f18@command-line (u29a2@u2881@make-parameter (get-command-line))) (set! u4f1a@local-library-path (lambda (u4fef@filename) (u2c5c@u2a98@library-path))) (set! u4f1c@load/args (lambda (u4ff1@filename . u4ff3@args) (begin (apply u4f2c@load-r6rs-top-level u4ff1@filename 'load u4ff3@args) (void)))) (set! u4f1e@load (lambda (u4ff5@filename) (begin (apply u4f2c@load-r6rs-top-level u4ff5@filename 'load (u4f18@command-line)) (void)))) (set! u4f20@ironscheme-build (lambda () (u4f1e@load '"ironscheme-buildscript.ss"))) (set! u4f22@eval-top-level (lambda (u4ff7@x) (u4b2d@u3108@eval u4ff7@x (u4b43@u3134@interaction-environment)))) (set! u4f24@compile-system-libraries (lambda () (u4f22@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! u4f26@compile (lambda (u4ff9@filename) (u4f2c@load-r6rs-top-level u4ff9@filename 'compile))) (set! u4f28@compile->closure (lambda (u4ffb@filename) (u4f2c@load-r6rs-top-level u4ffb@filename 'closure))) (set! u4f2a@pre-compile-r6rs-file (lambda (u4ffd@filename) (u4f2c@load-r6rs-top-level u4ffd@filename 'compile))) (set! u4f2c@load-r6rs-top-level (lambda (u4fff@filename u5000@how . u5003@args) ((lambda (u5009@u5006 u500a@u5008) ((lambda (u500d@swap) (dynamic-wind u500d@swap (lambda () ((lambda (u500f@x*) ((lambda (u5011@t) (if (memv u5011@t '(closure)) (u4b42@u3132@pre-compile-r6rs-top-level u500f@x*) (if (memv u5011@t '(load)) ((lambda (u501b@u5014 u501c@u5016 u501d@u5018 u501e@u501a) ((lambda (u5023@swap) (dynamic-wind u5023@swap (lambda () (begin (if (u29a3@u2883@mosh-cache-dir) (gensym-prefix-set! (u4f32@prefix-inc! (string-append (u29a3@u2883@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (u5025@file) ((call/cc (lambda (u5029@u5027) (lambda () (with-exception-handler (lambda (u502b@c) ((call/cc (lambda (u502d@u5028) (u5029@u5027 (lambda () (if '#t '#t (u502d@u5028 (lambda () (raise-continuable u502b@c)))))))))) (lambda () (delete-file (string-append (u29a3@u2883@mosh-cache-dir) '"/" u5025@file))))))))) (directory-list (u29a3@u2883@mosh-cache-dir))) (void)) ((lambda (u502f@compiled) (begin (if (and (u29a3@u2883@mosh-cache-dir) (not (symbol-value '%disable-acc))) (begin (format (current-error-port) '"cacheing ~a\n" (u29a3@u2883@mosh-cache-dir)) (u2c60@u2aa0@serialize-all u299d@u2877@serialize-library u29f9@u29b2@compile-core-expr)) (void)) (u502f@compiled))) (u4b41@u3130@compile-r6rs-top-level u500f@x*)))) u5023@swap)) (lambda () (begin ((lambda (u5031@t) (begin (u501b@u5014 u501d@u5018) (set! u501d@u5018 u5031@t))) (u501b@u5014)) ((lambda (u5033@t) (begin (u501c@u5016 u501e@u501a) (set! u501e@u501a u5033@t))) (u501c@u5016)))))) u4f18@command-line u29a3@u2883@mosh-cache-dir (cons u4fff@filename (car u5003@args)) (create-mosh-cache-dir)) (if (memv u5011@t '(compile)) (begin (u4b41@u3130@compile-r6rs-top-level u500f@x*) (u2c60@u2aa0@serialize-all u299d@u2877@serialize-library u29f9@u29b2@compile-core-expr)) (if '#f '#f (void)))))) u5000@how)) (with-input-from-file u4fff@filename (lambda () ((letrec ((u5035@f (lambda () ((lambda (u5037@x) (if (eof-object? u5037@x) '() (cons u5037@x (u5035@f)))) (u2995@u2867@read-annotated))))) u5035@f)))))) u500d@swap)) (lambda () ((lambda (u5039@t) (begin (u5009@u5006 u500a@u5008) (set! u500a@u5008 u5039@t))) (u5009@u5006))))) u2c5c@u2a98@library-path (u4f1a@local-library-path u4fff@filename)))) (set! u4f2e@load-r6rs-top-level-sexp (lambda (u503b@import-spec u503c@thunk) ((lambda (u5047@u5040 u5048@u5042 u5049@u5044 u504a@u5046) ((lambda (u504f@swap) (dynamic-wind u504f@swap (lambda () (begin (if (u29a3@u2883@mosh-cache-dir) (gensym-prefix-set! (u4f32@prefix-inc! (string-append (u29a3@u2883@mosh-cache-dir) '"/prefix.txt"))) (void)) ((lambda (u5055@u5052 u5056@u5054) ((lambda (u5059@swap) (dynamic-wind u5059@swap (lambda () ((u4b41@u3130@compile-r6rs-top-level (list (cons 'import u503b@import-spec) (list u503c@thunk))))) u5059@swap)) (lambda () ((lambda (u505b@t) (begin (u5055@u5052 u5056@u5054) (set! u5056@u5054 u505b@t))) (u5055@u5052))))) u4f18@command-line '()))) u504f@swap)) (lambda () (begin ((lambda (u505d@t) (begin (u5047@u5040 u5049@u5044) (set! u5049@u5044 u505d@t))) (u5047@u5040)) ((lambda (u505f@t) (begin (u5048@u5042 u504a@u5046) (set! u504a@u5046 u505f@t))) (u5048@u5042)))))) u2c5c@u2a98@library-path u29a3@u2883@mosh-cache-dir (u4f1a@local-library-path '"") (create-mosh-cache-dir)))) (set! u4f30@prefix-inc (lambda (u5061@prefix-string) ((lambda (u5063@prefix) ((lambda (u5065@len) ((lambda () ((letrec ((u5067@loop (lambda (u5069@i u506a@carry? u506b@accum) (if (< u5069@i '0) (string->symbol (list->string (if u506a@carry? (cons '#\a u506b@accum) u506b@accum))) (if u506a@carry? ((lambda (u506f@next-integer) (if (= u506f@next-integer '123) (u5067@loop (- u5069@i '1) '#f (cons '#\A u506b@accum)) (if (= u506f@next-integer '91) (u5067@loop (- u5069@i '1) '#t (cons '#\a u506b@accum)) (u5067@loop (- u5069@i '1) '#f (cons (integer->char u506f@next-integer) u506b@accum))))) (+ '1 (char->integer (string-ref u5063@prefix u5069@i)))) (u5067@loop (- u5069@i '1) '#f (cons (string-ref u5063@prefix u5069@i) u506b@accum))))))) u5067@loop) (- u5065@len '1) '#t '())))) (string-length u5063@prefix))) (symbol->string u5061@prefix-string)))) (set! u4f32@prefix-inc! (lambda (u5071@file) (begin (if (not (file-exists? u5071@file)) (call-with-output-file u5071@file (lambda (u5073@port) (write 'd u5073@port))) (void)) ((lambda (u5075@prefix) ((lambda (u5077@next-prefix) ((lambda () (begin (call-with-output-file u5071@file (lambda (u5079@port) (write u5077@next-prefix u5079@port))) u5075@prefix)))) (u4f30@prefix-inc u5075@prefix))) (call-with-input-file u5071@file read))))) (begin (set! u5091@u4f32@prefix-inc! u4f32@prefix-inc!) (set! u5090@u4f30@prefix-inc u4f30@prefix-inc) (set! u508f@u4f2e@load-r6rs-top-level-sexp u4f2e@load-r6rs-top-level-sexp) (set! u508e@u4f2c@load-r6rs-top-level u4f2c@load-r6rs-top-level) (set! u508d@u4f2a@pre-compile-r6rs-file u4f2a@pre-compile-r6rs-file) (set! u508c@u4f28@compile->closure u4f28@compile->closure) (set! u508b@u4f26@compile u4f26@compile) (set! u508a@u4f24@compile-system-libraries u4f24@compile-system-libraries) (set! u5089@u4f22@eval-top-level u4f22@eval-top-level) (set! u5088@u4f20@ironscheme-build u4f20@ironscheme-build) (set! u5087@u4f1e@load u4f1e@load) (set! u5086@u4f1c@load/args u4f1c@load/args) (set! u5085@u4f1a@local-library-path u4f1a@local-library-path) (set! u5084@u4f18@command-line u4f18@command-line) (set! u5083@u4f16@trace-printer u4f16@trace-printer) (set! u5082@u4f14@repl u4f14@repl) (set! u5081@u4f12@map-with-index u4f12@map-with-index) (set! u5080@u4f10@record->field-alist u4f10@record->field-alist) (set! u507f@u4f0e@condition-printer u4f0e@condition-printer) (set! u507e@u4f0c@rpad u4f0c@rpad) (set! u507d@u4f0a@for-each-with-index u4f0a@for-each-with-index) (set! u507c@u4f08@parse-and-add-library-path u4f08@parse-and-add-library-path) (set! u507b@u4f06@add-library-path! u4f06@add-library-path!) (u2c61@u2aa2@current-precompiled-library-loader u299e@u2879@load-serialized-library) (set-symbol-value! 'load u4f1e@load) (set-symbol-value! 'pre-compile-r6rs-file u4f2a@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs u4f22@eval-top-level) (set-symbol-value! 'int-env-syms u4b24@u30f6@interaction-environment-symbols) (set-symbol-value! 'expanded2core u29f8@u29b0@expanded->core) (set-symbol-value! 'trace-printer u4f16@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (u4f33@c) (condition (u4e63@u4c6d@make-non-continuable-violation) (u4e59@u4c54@make-who-condition 'raise) (u4e1d@u4bb5@make-message-condition '"returned from non-continuable exception") (u4e4f@u4c39@make-irritants-condition (list u4f33@c))))) (u4f08@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (u4f08@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (u4f06@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (u4f06@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (u4f06@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) ((lambda (u4f35@prefix) (u2c5d@u2a9a@library-extensions (u4f35@prefix '".mosh" (u2c5d@u2a9a@library-extensions)))) (lambda (u4f37@ext u4f38@ls) (append (map (lambda (u4f3b@x) (string-append u4f37@ext u4f3b@x)) u4f38@ls) u4f38@ls))) ((lambda (u4f3d@args u4f3e@port) ((lambda (u4f42@ref) (begin (set! u4f42@ref (lambda (u4f63@rtd u4f64@i u4f65@x) ((lambda (u4f69@val) (if (symbol? u4f69@val) (ungensym u4f69@val) u4f69@val)) ((record-accessor u4f63@rtd u4f64@i) u4f65@x)))) (with-exception-handler (lambda (u4f43@c) (if (condition? u4f43@c) (u4f0e@condition-printer u4f43@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" u4f43@c))) (lambda () (if ((call/cc (lambda (u4f47@u4f45) (lambda () (with-exception-handler (lambda (u4f49@c) ((call/cc (lambda (u4f4b@u4f46) (u4f47@u4f45 (lambda () (if '#t '#f (u4f4b@u4f46 (lambda () (raise-continuable u4f49@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (u4f2e@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? u4f3d@args) ((lambda (u4f55@u4f4e u4f56@u4f50 u4f57@u4f52 u4f58@u4f54) ((lambda (u4f5d@swap) (dynamic-wind u4f5d@swap (lambda () (begin (if (u29a3@u2883@mosh-cache-dir) (gensym-prefix-set! (u4f32@prefix-inc! (string-append (u29a3@u2883@mosh-cache-dir) '"/prefix.txt"))) (void)) (u4f14@repl))) u4f5d@swap)) (lambda () (begin ((lambda (u4f5f@t) (begin (u4f55@u4f4e u4f57@u4f52) (set! u4f57@u4f52 u4f5f@t))) (u4f55@u4f4e)) ((lambda (u4f61@t) (begin (u4f56@u4f50 u4f58@u4f54) (set! u4f58@u4f54 u4f61@t))) (u4f56@u4f50)))))) u4f18@command-line u29a3@u2883@mosh-cache-dir '() (create-mosh-cache-dir)) (u4f2c@load-r6rs-top-level (car u4f3d@args) 'load (cdr u4f3d@args)))))))) '#f)) (u4f18@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
