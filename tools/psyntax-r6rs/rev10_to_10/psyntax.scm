;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (y27aa@read-annotated y27ac@annotation-stripped y27ae@annotation? y27b0@annotation-source y27b2@annotation-expression y27b4@scm->fasl y27b6@fasl-save y27b8@fasl-load y27ba@serialize-library y27bc@load-serialized-library y27be@make-record-printer y27c0@compile-core y27c2@read-library-source-file y27c4@make-parameter y282c@file-options-spec) (begin (set! y27aa@read-annotated read) (set! y27ac@annotation-stripped (lambda (y282d@x) (y27b2@annotation-expression y282d@x))) (set! y27ae@annotation? (lambda (y282f@x) (source-info y282f@x))) (set! y27b0@annotation-source (lambda (y2831@x) (source-info y2831@x))) (set! y27b2@annotation-expression (lambda (y2833@x) (if (pair? y2833@x) (cons (car y2833@x) (cdr y2833@x)) (display '"line:46\n")))) (set! y27b4@scm->fasl (lambda (y2835@filename) (string-append y2835@filename '".mosh-fasl"))) (set! y27b6@fasl-save (lambda (y2837@filename y2838@obj) (call-with-port (open-file-output-port y2837@filename) (lambda (y283b@port) ((symbol-value 'fasl-write!) y2838@obj y283b@port))))) (set! y27b8@fasl-load (lambda (y283d@filename) (call-with-port (open-file-input-port y283d@filename) (symbol-value 'fasl-read!)))) (set! y27ba@serialize-library (lambda (y283f@filename y2840@obj) (begin (format '#t '"serialize-library ~a\n..." y283f@filename) ((lambda (y2843@expanded2core) ((lambda (y2845@compile) ((lambda (y2847@code) ((lambda (y2849@pivot) ((lambda (y284b@visit) ((lambda () (begin (set-car! y2849@pivot y284b@visit) ((lambda (y284d@pivot) ((lambda (y284f@invoke) ((lambda () (set-car! y284d@pivot y284f@invoke)))) (y2845@compile (y2843@expanded2core (car y284d@pivot))))) (cdr y2849@pivot)))))) (y2845@compile (y2843@expanded2core (car y2849@pivot))))) (cddddr (cddddr y2847@code)))) y2840@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (y2851@fasl-file) (begin (if (file-exists? y2851@fasl-file) (delete-file y2851@fasl-file) (void)) ((call/cc (lambda (y2855@y2853) (lambda () (with-exception-handler (lambda (y2857@c) ((call/cc (lambda (y2859@y2854) (y2855@y2853 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " y283f@filename) (if (file-exists? y2851@fasl-file) (delete-file y2851@fasl-file) (void)) '#f) (y2859@y2854 (lambda () (raise-continuable y2857@c)))))))))) (lambda () (begin (y27b6@fasl-save y2851@fasl-file y2840@obj) (display '"OK\n")))))))))) (y27b4@scm->fasl y283f@filename))))) (set! y27bc@load-serialized-library (lambda (y285b@filename y285c@obj) ((lambda (y285f@fasl-file) (if (and (file-exists? y285f@fasl-file) ((symbol-value 'file-newer?) y285f@fasl-file y285b@filename)) ((lambda (y2861@expanded2core) ((lambda (y2863@eval-compiled-core) ((lambda (y2865@code) ((lambda (y2867@pivot) ((lambda (y2869@visit) ((lambda (y286b@visit-proc) ((lambda () (begin (set-car! y2867@pivot y286b@visit-proc) ((lambda (y286d@pivot) ((lambda (y286f@invoke) ((lambda () (begin (set-car! y286d@pivot (lambda () (y2863@eval-compiled-core y286f@invoke))) (apply y285c@obj y2865@code))))) (car y286d@pivot))) (cdr y2867@pivot)) '#t)))) (lambda () (y2863@eval-compiled-core y2869@visit)))) (car y2867@pivot))) (cddddr (cddddr y2865@code)))) (y27b8@fasl-load y285f@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (y27b4@scm->fasl y285b@filename)))) (set! y27be@make-record-printer (lambda (y2871@name y2872@printer) (lambda y2875@x (begin (display '"record printer") (for-each display y2875@x))))) (set! y27c0@compile-core (lambda y2877@x (apply error 'comile-core '"not implementated" y2877@x))) (set! y27c2@read-library-source-file (lambda (y2879@file-name) (with-input-from-file y2879@file-name y27aa@read-annotated))) (set! y27c4@make-parameter (lambda y2889 ((lambda (y288a) (if (= y288a '1) (apply (lambda (y287b@x) (y27c4@make-parameter y287b@x (lambda (y287d@x) y287d@x))) y2889) (if (= y288a '2) (apply (lambda (y287f@x y2880@fender) ((lambda (y2883@x) (lambda y2887 ((lambda (y2888) (if (= y2888 '0) (apply (lambda () y2883@x) y2887) (if (= y2888 '1) (apply (lambda (y2885@v) (set! y2883@x (y2880@fender y2885@v))) y2887) (error 'apply '"invalid arg count")))) (length y2887)))) (y2880@fender y287f@x))) y2889) (error 'apply '"invalid arg count")))) (length y2889)))) (set! y282c@file-options-spec (lambda (y288b@x) y288b@x)) (begin (set! y289b@y282c@file-options-spec y282c@file-options-spec) (set! y289a@y27c4@make-parameter y27c4@make-parameter) (set! y2899@y27c2@read-library-source-file y27c2@read-library-source-file) (set! y2898@y27c0@compile-core y27c0@compile-core) (set! y2897@y27be@make-record-printer y27be@make-record-printer) (set! y2896@y27bc@load-serialized-library y27bc@load-serialized-library) (set! y2895@y27ba@serialize-library y27ba@serialize-library) (set! y2894@y27b8@fasl-load y27b8@fasl-load) (set! y2893@y27b6@fasl-save y27b6@fasl-save) (set! y2892@y27b4@scm->fasl y27b4@scm->fasl) (set! y2891@y27b2@annotation-expression y27b2@annotation-expression) (set! y2890@y27b0@annotation-source y27b0@annotation-source) (set! y288f@y27ae@annotation? y27ae@annotation?) (set! y288e@y27ac@annotation-stripped y27ac@annotation-stripped) (set! y288d@y27aa@read-annotated y27aa@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (y28a0@current-primitive-locations y28a2@mutable? y28a4@rewriter y28a6@expanded->core y28a8@compile-core-expr y28aa@pretty-print y28ac@compile-core-expr-to-port) (begin (set! y28a0@current-primitive-locations (y289a@y27c4@make-parameter (lambda (y28ad@x) '#f) (lambda (y28af@p) y28af@p))) (set! y28a2@mutable? (lambda (y28b1@x) (or (pair? y28b1@x) (vector? y28b1@x) (hashtable? y28b1@x)))) (set! y28a4@rewriter (lambda (y28b3@quote-hack?) ((lambda (y28b6@f) (begin (set! y28b6@f (lambda (y28b7@x) (if (pair? y28b7@x) ((lambda (y28b9@t) (if (memv y28b9@t '(quote)) (if (and y28b3@quote-hack? (y28a2@mutable? (cadr y28b7@x))) ((lambda (y28bb@g) (begin (set-symbol-value! y28bb@g (cadr y28b7@x)) y28bb@g)) (gensym)) y28b7@x) (if (memv y28b9@t '(case-lambda)) (cons 'case-lambda (map (lambda (y28bd@x) (cons (car y28bd@x) (map y28b6@f (cdr y28bd@x)))) (cdr y28b7@x))) (if (memv y28b9@t '(lambda)) (cons* 'lambda (cadr y28b7@x) (map y28b6@f (cddr y28b7@x))) (if (memv y28b9@t '(letrec)) ((lambda (y28bf@bindings y28c0@body*) ((lambda (y28c3@lhs* y28c4@rhs*) (cons* 'letrec (map list y28c3@lhs* (map y28b6@f y28c4@rhs*)) (map y28b6@f y28c0@body*))) (map car y28bf@bindings) (map cadr y28bf@bindings))) (cadr y28b7@x) (cddr y28b7@x)) (if (memv y28b9@t '(letrec*)) ((lambda (y28c7@bindings y28c8@body*) ((lambda (y28cb@lhs* y28cc@rhs*) (cons* 'letrec* (map list y28cb@lhs* (map y28b6@f y28cc@rhs*)) (map y28b6@f y28c8@body*))) (map car y28c7@bindings) (map cadr y28c7@bindings))) (cadr y28b7@x) (cddr y28b7@x)) (if (memv y28b9@t '(library-letrec*)) ((lambda (y28cf@name y28d0@x) ((lambda (y28d3@bindings y28d4@body*) ((lambda (y28d7@lhs* y28d8@lhs** y28d9@rhs*) (cons* 'library-letrec* y28cf@name (map list y28d7@lhs* y28d8@lhs** (map y28b6@f y28d9@rhs*)) (map y28b6@f y28d4@body*))) (map car y28d3@bindings) (map cadr y28d3@bindings) (map caddr y28d3@bindings))) (cadr y28d0@x) (cddr y28d0@x))) (cadr y28b7@x) (cdr y28b7@x)) (if (memv y28b9@t '(begin)) (cons 'begin (map y28b6@f (cdr y28b7@x))) (if (memv y28b9@t '(set!)) (list 'set! (cadr y28b7@x) (y28b6@f (caddr y28b7@x))) (if (memv y28b9@t '(primitive)) ((lambda (y28dd@op) ((lambda (y28df@t) (if y28df@t ((lambda (y28e1@loc) y28e1@loc) y28df@t) y28dd@op)) ((y28a0@current-primitive-locations) y28dd@op))) (cadr y28b7@x)) (if (memv y28b9@t '(define)) y28b7@x (if (list? y28b7@x) (map y28b6@f y28b7@x) (error 'rewrite '"invalid form ~s ~s" y28b7@x (list? y28b7@x)))))))))))))) (car y28b7@x)) y28b7@x))) y28b6@f)) '#f))) (set! y28a6@expanded->core (lambda (y28e3@x) ((y28a4@rewriter '#f) y28e3@x))) (set! y28a8@compile-core-expr (lambda (y28e5@x) ((y28a4@rewriter '#f) y28e5@x))) (set! y28aa@pretty-print write) (set! y28ac@compile-core-expr-to-port (lambda (y28e7@x y28e8@p) (y28aa@pretty-print ((y28a4@rewriter '#f) y28e7@x) y28e8@p))) (begin (set! y28f1@y28ac@compile-core-expr-to-port y28ac@compile-core-expr-to-port) (set! y28f0@y28aa@pretty-print y28aa@pretty-print) (set! y28ef@y28a8@compile-core-expr y28a8@compile-core-expr) (set! y28ee@y28a6@expanded->core y28a6@expanded->core) (set! y28ed@y28a4@rewriter y28a4@rewriter) (set! y28ec@y28a2@mutable? y28a2@mutable?) (set! y28eb@y28a0@current-primitive-locations y28a0@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (y2940@make-collection y2942@current-library-collection y2948@y2943 y294a@y2945 y294c@y2944 y294f@library? y2951@make-library y2953@library-id y2955@library-name y2957@library-version y2959@library-imp* y295b@library-vis* y295d@library-inv* y295f@library-subst y2961@library-env y2963@library-visit-state y2965@library-invoke-state y2967@library-visit-code y2969@library-invoke-code y296b@library-visible? y296d@library-source-file-name y296f@set-library-id! y2971@set-library-name! y2973@set-library-version! y2975@set-library-imp*! y2977@set-library-vis*! y2979@set-library-inv*! y297b@set-library-subst! y297d@set-library-env! y297f@set-library-visit-state! y2981@set-library-invoke-state! y2983@set-library-visit-code! y2985@set-library-invoke-code! y2987@set-library-visible?! y2989@set-library-source-file-name! y298b@rp y298d@find-dependencies y298f@find-library-by y2991@library-path y2993@library-extensions y2995@library-name->file-name y2997@file-locator y2999@serialize-all y299b@current-precompiled-library-loader y299d@try-load-from-file y299f@library-loader y29a1@current-library-expander y29a3@external-pending-libraries y29a5@find-external-library y29a7@find-library-by-name y29a9@library-exists? y29ab@find-library-by-spec/die y29ad@label->binding-table y29af@install-library-record y29b1@install-library y29b3@imported-label->binding y29b5@invoke-library y29b7@visit-library y29b9@invoke-library-by-spec y29bb@installed-libraries y29bd@library-spec) (begin (set! y2940@make-collection (lambda () ((lambda (y29be@set) ((lambda (y29c1@set-cons) (begin (set! y29c1@set-cons (lambda (y29c6@x y29c7@ls) (if (memq y29c6@x y29c7@ls) y29c7@ls (cons y29c6@x y29c7@ls)))) (lambda y29c4 ((lambda (y29c5) (if (= y29c5 '0) (apply (lambda () y29be@set) y29c4) (if (= y29c5 '1) (apply (lambda (y29c2@x) (set! y29be@set (y29c1@set-cons y29c2@x y29be@set))) y29c4) (error 'apply '"invalid arg count")))) (length y29c4))))) '#f)) '()))) (set! y2942@current-library-collection (y289a@y27c4@make-parameter (y2940@make-collection) (lambda (y29ca@x) (begin (if (not (procedure? y29ca@x)) (assertion-violation 'current-library-collection '"not a procedure" y29ca@x) (void)) y29ca@x)))) (set! y2948@y2943 (make-record-type-descriptor 'library '#f 'y2946 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! y294a@y2945 '#f) (set! y294c@y2944 (make-record-constructor-descriptor y2948@y2943 '#f y294a@y2945)) (set! y294f@library? (record-predicate y2948@y2943)) (set! y2951@make-library (record-constructor y294c@y2944)) (set! y2953@library-id (record-accessor y2948@y2943 '0)) (set! y2955@library-name (record-accessor y2948@y2943 '1)) (set! y2957@library-version (record-accessor y2948@y2943 '2)) (set! y2959@library-imp* (record-accessor y2948@y2943 '3)) (set! y295b@library-vis* (record-accessor y2948@y2943 '4)) (set! y295d@library-inv* (record-accessor y2948@y2943 '5)) (set! y295f@library-subst (record-accessor y2948@y2943 '6)) (set! y2961@library-env (record-accessor y2948@y2943 '7)) (set! y2963@library-visit-state (record-accessor y2948@y2943 '8)) (set! y2965@library-invoke-state (record-accessor y2948@y2943 '9)) (set! y2967@library-visit-code (record-accessor y2948@y2943 '10)) (set! y2969@library-invoke-code (record-accessor y2948@y2943 '11)) (set! y296b@library-visible? (record-accessor y2948@y2943 '12)) (set! y296d@library-source-file-name (record-accessor y2948@y2943 '13)) (set! y296f@set-library-id! (record-mutator y2948@y2943 '0)) (set! y2971@set-library-name! (record-mutator y2948@y2943 '1)) (set! y2973@set-library-version! (record-mutator y2948@y2943 '2)) (set! y2975@set-library-imp*! (record-mutator y2948@y2943 '3)) (set! y2977@set-library-vis*! (record-mutator y2948@y2943 '4)) (set! y2979@set-library-inv*! (record-mutator y2948@y2943 '5)) (set! y297b@set-library-subst! (record-mutator y2948@y2943 '6)) (set! y297d@set-library-env! (record-mutator y2948@y2943 '7)) (set! y297f@set-library-visit-state! (record-mutator y2948@y2943 '8)) (set! y2981@set-library-invoke-state! (record-mutator y2948@y2943 '9)) (set! y2983@set-library-visit-code! (record-mutator y2948@y2943 '10)) (set! y2985@set-library-invoke-code! (record-mutator y2948@y2943 '11)) (set! y2987@set-library-visible?! (record-mutator y2948@y2943 '12)) (set! y2989@set-library-source-file-name! (record-mutator y2948@y2943 '13)) (set! y298b@rp (y2897@y27be@make-record-printer 'library (lambda (y29cc@x y29cd@p y29ce@wr) (begin (if (not (y294f@library? y29cc@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (y2957@library-version y29cc@x)) (y2955@library-name y29cc@x) (append (y2955@library-name y29cc@x) (list (y2957@library-version y29cc@x))))) y29cd@p))))) (set! y298d@find-dependencies (lambda (y29d2@ls) (if (null? y29d2@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! y298f@find-library-by (lambda (y29d4@pred) ((letrec ((y29d6@f (lambda (y29d8@ls) (if (null? y29d8@ls) '#f (if (y29d4@pred (car y29d8@ls)) (car y29d8@ls) (y29d6@f (cdr y29d8@ls))))))) y29d6@f) ((y2942@current-library-collection))))) (set! y2991@library-path (y289a@y27c4@make-parameter '(".") (lambda (y29da@x) (if (and (list? y29da@x) (for-all string? y29da@x)) (map (lambda (y29dc@x) y29dc@x) y29da@x) (assertion-violation 'library-path '"not a list of strings" y29da@x))))) (set! y2993@library-extensions (y289a@y27c4@make-parameter '(".sls" ".ss" ".scm") (lambda (y29de@x) (if (and (list? y29de@x) (for-all string? y29de@x)) (map (lambda (y29e0@x) y29e0@x) y29de@x) (assertion-violation 'library-extensions '"not a list of strings" y29de@x))))) (set! y2995@library-name->file-name (lambda (y29e2@x) (call-with-values (lambda () (open-string-output-port)) (lambda (y29e8@y29e5 y29e9@y29e7) ((lambda (y29ec@extract y29ed@p) ((lambda (y29f1@display-hex) (begin (set! y29f1@display-hex (lambda (y29fa@n) (if (<= '0 y29fa@n '9) (display y29fa@n y29ed@p) (display (integer->char (+ (char->integer '#\a) (- y29fa@n '10))) y29ed@p)))) (begin ((letrec ((y29f2@f (lambda (y29f4@ls) (if (not (null? y29f4@ls)) (begin (display '"/" y29ed@p) (for-each (lambda (y29f6@c) (if (or (char<=? '#\a y29f6@c '#\z) (char<=? '#\A y29f6@c '#\Z) (char<=? '#\0 y29f6@c '#\9) (memv y29f6@c '(#\- #\. #\_ #\~))) (display y29f6@c y29ed@p) (begin (display '"%" y29ed@p) ((lambda (y29f8@n) (begin (y29f1@display-hex (quotient y29f8@n '16)) (y29f1@display-hex (remainder y29f8@n '16)))) (char->integer y29f6@c))))) (string->list (symbol->string (car y29f4@ls)))) (y29f2@f (cdr y29f4@ls))) (void))))) y29f2@f) y29e2@x) (y29ec@extract)))) '#f)) y29e9@y29e7 y29e8@y29e5))))) (set! y2997@file-locator (y289a@y27c4@make-parameter (lambda (y29fc@x) ((lambda (y29fe@str) ((letrec ((y2a00@f (lambda (y2a02@ls y2a03@exts y2a04@failed-list) (if (null? y2a02@ls) ((lambda () ((lambda (y2a10@y2a0b y2a12@y2a0d y2a14@y2a0c y2a17@y2a0a y2a19@make-library-resolution-condition y2a1b@y2a08 y2a1d@y2a09 y2a1f@library-resolution-condition? y2a21@condition-library y2a23@condition-files) (begin (set! y2a10@y2a0b (make-record-type-descriptor '&library-resolution y4cb1@y49f8@&condition-rtd 'y2a0e '#f '#f '#((immutable library) (immutable files)))) (set! y2a12@y2a0d '#f) (set! y2a14@y2a0c (make-record-constructor-descriptor y2a10@y2a0b y4cb2@y49fa@&condition-rcd y2a12@y2a0d)) (set! y2a17@y2a0a (record-predicate y2a10@y2a0b)) (set! y2a19@make-library-resolution-condition (record-constructor y2a14@y2a0c)) (set! y2a1b@y2a08 (record-accessor y2a10@y2a0b '0)) (set! y2a1d@y2a09 (record-accessor y2a10@y2a0b '1)) (set! y2a1f@library-resolution-condition? (condition-predicate y2a10@y2a0b)) (set! y2a21@condition-library (condition-accessor y2a10@y2a0b y2a1b@y2a08)) (set! y2a23@condition-files (condition-accessor y2a10@y2a0b y2a1d@y2a09)) (raise (condition (y4cd1@y4a92@make-error) (y4cf3@y4aee@make-who-condition 'expander) (y4cb7@y4a4f@make-message-condition '"cannot locate library in library-path") (y2a19@make-library-resolution-condition y29fc@x (reverse y2a04@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? y2a03@exts) (y2a00@f (cdr y2a02@ls) (y2993@library-extensions) y2a04@failed-list) ((lambda (y2a24@name) (if (file-exists? y2a24@name) y2a24@name (y2a00@f y2a02@ls (cdr y2a03@exts) (cons y2a24@name y2a04@failed-list)))) (string-append (car y2a02@ls) y29fe@str (car y2a03@exts)))))))) y2a00@f) (y2991@library-path) (y2993@library-extensions) '())) (y2995@library-name->file-name y29fc@x))) (lambda (y2a26@f) (if (procedure? y2a26@f) y2a26@f (assertion-violation 'file-locator '"not a procedure" y2a26@f))))) (set! y2999@serialize-all (lambda (y2a28@serialize y2a29@compile) ((lambda (y2a2d@library-desc) (begin (set! y2a2d@library-desc (lambda (y2a30@x) (list (y2953@library-id y2a30@x) (y2955@library-name y2a30@x)))) (for-each (lambda (y2a2e@x) (if (y296d@library-source-file-name y2a2e@x) (y2a28@serialize (y296d@library-source-file-name y2a2e@x) (list (y2953@library-id y2a2e@x) (y2955@library-name y2a2e@x) (y2957@library-version y2a2e@x) (map y2a2d@library-desc (y2959@library-imp* y2a2e@x)) (map y2a2d@library-desc (y295b@library-vis* y2a2e@x)) (map y2a2d@library-desc (y295d@library-inv* y2a2e@x)) (y295f@library-subst y2a2e@x) (y2961@library-env y2a2e@x) (y2a29@compile (y2967@library-visit-code y2a2e@x)) (y2a29@compile (y2969@library-invoke-code y2a2e@x)) (y296b@library-visible? y2a2e@x))) (void))) ((y2942@current-library-collection))))) '#f))) (set! y299b@current-precompiled-library-loader (y289a@y27c4@make-parameter (lambda (y2a32@filename y2a33@sk) '#f))) (set! y299d@try-load-from-file (lambda (y2a36@filename) ((y299b@current-precompiled-library-loader) y2a36@filename (lambda y2a5c ((lambda (y2a5d) (if (= y2a5d '11) (apply (lambda (y2a38@id y2a39@name y2a3a@ver y2a3b@imp* y2a3c@vis* y2a3d@inv* y2a3e@exp-subst y2a3f@exp-env y2a40@visit-proc y2a41@invoke-proc y2a42@visible?) ((letrec ((y2a4e@f (lambda (y2a50@deps) (if (null? y2a50@deps) (begin (y29b1@install-library y2a38@id y2a39@name y2a3a@ver y2a3b@imp* y2a3c@vis* y2a3d@inv* y2a3e@exp-subst y2a3f@exp-env y2a40@visit-proc y2a41@invoke-proc '#f '#f y2a42@visible? '#f) '#t) ((lambda (y2a52@d) ((lambda (y2a54@label y2a55@dname) ((lambda (y2a58@l) (if (and (y294f@library? y2a58@l) (eq? y2a54@label (y2953@library-id y2a58@l))) (y2a4e@f (cdr y2a50@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" y2a39@name y2a55@dname y2a36@filename y2a58@l y2a54@label (y2953@library-id y2a58@l)) '#f))) (y29a7@find-library-by-name y2a55@dname))) (car y2a52@d) (cadr y2a52@d))) (car y2a50@deps)))))) y2a4e@f) (append y2a3b@imp* y2a3c@vis* y2a3d@inv*))) y2a5c) (if (>= y2a5d '0) (apply (lambda y2a5a@others '#f) y2a5c) (error 'apply '"invalid arg count")))) (length y2a5c)))))) (set! y299f@library-loader (y289a@y27c4@make-parameter (lambda (y2a5e@x) ((lambda (y2a60@file-name) (if (not y2a60@file-name) (assertion-violation '#f '"cannot file library" y2a5e@x) (or (y299d@try-load-from-file y2a60@file-name) ((y29a1@current-library-expander) (y2899@y27c2@read-library-source-file y2a60@file-name) y2a60@file-name (lambda (y2a62@name) (if (not (fast-equal? y2a62@name y2a5e@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (y2a68@y2a65 y2a69@y2a67) ((lambda (y2a6c@e y2a6d@p) (begin (display '"expected to find library " y2a6d@p) (write y2a5e@x y2a6d@p) (display '" in file " y2a6d@p) (display y2a60@file-name y2a6d@p) (display '", found " y2a6d@p) (write y2a62@name y2a6d@p) (display '" instead" y2a6d@p) (y2a6c@e))) y2a69@y2a67 y2a68@y2a65)))) (void))))))) ((y2997@file-locator) y2a5e@x))) (lambda (y2a70@f) (if (procedure? y2a70@f) y2a70@f (assertion-violation 'library-locator '"not a procedure" y2a70@f))))) (set! y29a1@current-library-expander (y289a@y27c4@make-parameter (lambda (y2a72@x) (assertion-violation 'library-expander '"not initialized")) (lambda (y2a74@f) (if (procedure? y2a74@f) y2a74@f (assertion-violation 'library-expander '"not a procedure" y2a74@f))))) (set! y29a3@external-pending-libraries (y289a@y27c4@make-parameter '())) (set! y29a5@find-external-library (lambda (y2a76@name) (begin (if (member y2a76@name (y29a3@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" y2a76@name) (void)) ((lambda (y2a7c@y2a79 y2a7d@y2a7b) ((lambda (y2a80@swap) (dynamic-wind y2a80@swap (lambda () (begin ((y299f@library-loader) y2a76@name) (or (y298f@find-library-by (lambda (y2a82@x) (fast-equal? (y2955@library-name y2a82@x) y2a76@name))) (assertion-violation '#f '"handling external library did not yield the correct library" y2a76@name)))) y2a80@swap)) (lambda () ((lambda (y2a84@t) (begin (y2a7c@y2a79 y2a7d@y2a7b) (set! y2a7d@y2a7b y2a84@t))) (y2a7c@y2a79))))) y29a3@external-pending-libraries (cons y2a76@name (y29a3@external-pending-libraries)))))) (set! y29a7@find-library-by-name (lambda (y2a86@name) (or (y298f@find-library-by (lambda (y2a88@x) (fast-equal? (y2955@library-name y2a88@x) y2a86@name))) (y29a5@find-external-library y2a86@name)))) (set! y29a9@library-exists? (lambda (y2a8a@name) (and (y298f@find-library-by (lambda (y2a8c@x) (fast-equal? (y2955@library-name y2a8c@x) y2a8a@name))) '#t))) (set! y29ab@find-library-by-spec/die (lambda (y2a8e@spec) ((lambda (y2a90@id) (or (y298f@find-library-by (lambda (y2a92@x) (eq? y2a90@id (y2953@library-id y2a92@x)))) (assertion-violation '#f '"cannot find library with required spec" y2a8e@spec))) (car y2a8e@spec)))) (set! y29ad@label->binding-table (make-eq-hashtable)) (set! y29af@install-library-record (lambda (y2a94@lib) (begin ((lambda (y2a96@exp-env) (for-each (lambda (y2a98@x) ((lambda (y2a9a@label y2a9b@binding) ((lambda (y2a9e@binding) (begin (if (hashtable-ref y29ad@label->binding-table y2a9a@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" y2a9a@label (hashtable-ref y29ad@label->binding-table y2a9a@label '#f) y2a9e@binding) (exit)) (void)) (hashtable-set! y29ad@label->binding-table y2a9a@label y2a9e@binding))) ((lambda (y2aa0@t) (if (memv y2aa0@t '(global)) (cons 'global (cons y2a94@lib (cdr y2a9b@binding))) (if (memv y2aa0@t '(global-macro)) (cons 'global-macro (cons y2a94@lib (cdr y2a9b@binding))) (if (memv y2aa0@t '(global-macro!)) (cons 'global-macro! (cons y2a94@lib (cdr y2a9b@binding))) y2a9b@binding)))) (car y2a9b@binding)))) (car y2a98@x) (cdr y2a98@x))) y2a96@exp-env)) (y2961@library-env y2a94@lib)) ((y2942@current-library-collection) y2a94@lib)))) (set! y29b1@install-library (lambda (y2aa2@id y2aa3@name y2aa4@ver y2aa5@imp* y2aa6@vis* y2aa7@inv* y2aa8@exp-subst y2aa9@exp-env y2aaa@visit-proc y2aab@invoke-proc y2aac@visit-code y2aad@invoke-code y2aae@visible? y2aaf@source-file-name) ((lambda (y2abe@imp-lib* y2abf@vis-lib* y2ac0@inv-lib*) (begin (if (not (and (symbol? y2aa2@id) (list? y2aa3@name) (list? y2aa4@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" y2aa2@id y2aa3@name y2aa4@ver) (void)) (if (y29a9@library-exists? y2aa3@name) (assertion-violation 'install-library '"library is already installed" y2aa3@name) (void)) ((lambda (y2ac4@lib) (y29af@install-library-record y2ac4@lib)) (y2951@make-library y2aa2@id y2aa3@name y2aa4@ver y2abe@imp-lib* y2abf@vis-lib* y2ac0@inv-lib* y2aa8@exp-subst y2aa9@exp-env y2aaa@visit-proc y2aab@invoke-proc y2aac@visit-code y2aad@invoke-code y2aae@visible? y2aaf@source-file-name)))) (map y29ab@find-library-by-spec/die y2aa5@imp*) (map y29ab@find-library-by-spec/die y2aa6@vis*) (map y29ab@find-library-by-spec/die y2aa7@inv*)))) (set! y29b3@imported-label->binding (lambda (y2ac6@lab) (hashtable-ref y29ad@label->binding-table y2ac6@lab '#f))) (set! y29b5@invoke-library (lambda (y2ac8@lib) ((lambda (y2aca@invoke) (if (procedure? y2aca@invoke) (begin (y2981@set-library-invoke-state! y2ac8@lib (lambda () (assertion-violation 'invoke '"circularity detected" y2ac8@lib))) (for-each y29b5@invoke-library (y295d@library-inv* y2ac8@lib)) (y2981@set-library-invoke-state! y2ac8@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" y2ac8@lib))) (y2aca@invoke) (y2981@set-library-invoke-state! y2ac8@lib '#t)) (void))) (y2965@library-invoke-state y2ac8@lib)))) (set! y29b7@visit-library (lambda (y2acc@lib) ((lambda (y2ace@visit) (if (procedure? y2ace@visit) (begin (y297f@set-library-visit-state! y2acc@lib (lambda () (assertion-violation 'visit '"circularity detected" y2acc@lib))) (for-each y29b5@invoke-library (y295b@library-vis* y2acc@lib)) (y297f@set-library-visit-state! y2acc@lib (lambda () (assertion-violation 'invoke '"first visit did not return" y2acc@lib))) (y2ace@visit) (y297f@set-library-visit-state! y2acc@lib '#t)) (void))) (y2963@library-visit-state y2acc@lib)))) (set! y29b9@invoke-library-by-spec (lambda (y2ad0@spec) (y29b5@invoke-library (y29ab@find-library-by-spec/die y2ad0@spec)))) (set! y29bb@installed-libraries (lambda y2ad8 ((lambda (y2ad9) (if (= y2ad9 '1) (apply (lambda (y2ad2@all?) ((letrec ((y2ad4@f (lambda (y2ad6@ls) (if (null? y2ad6@ls) '() (if (or y2ad2@all? (y296b@library-visible? (car y2ad6@ls))) (cons (car y2ad6@ls) (y2ad4@f (cdr y2ad6@ls))) (y2ad4@f (cdr y2ad6@ls))))))) y2ad4@f) ((y2942@current-library-collection)))) y2ad8) (if (= y2ad9 '0) (apply (lambda () (y29bb@installed-libraries '#f)) y2ad8) (error 'apply '"invalid arg count")))) (length y2ad8)))) (set! y29bd@library-spec (lambda (y2ada@x) (begin (if (not (y294f@library? y2ada@x)) (assertion-violation 'library-spec '"not a library" y2ada@x) (void)) (list (y2953@library-id y2ada@x) (y2955@library-name y2ada@x) (y2957@library-version y2ada@x))))) (begin (set! y2b18@y29bd@library-spec y29bd@library-spec) (set! y2b17@y29bb@installed-libraries y29bb@installed-libraries) (set! y2b16@y29b9@invoke-library-by-spec y29b9@invoke-library-by-spec) (set! y2b15@y29b7@visit-library y29b7@visit-library) (set! y2b14@y29b5@invoke-library y29b5@invoke-library) (set! y2b13@y29b3@imported-label->binding y29b3@imported-label->binding) (set! y2b12@y29b1@install-library y29b1@install-library) (set! y2b11@y29af@install-library-record y29af@install-library-record) (set! y2b10@y29ad@label->binding-table y29ad@label->binding-table) (set! y2b0f@y29ab@find-library-by-spec/die y29ab@find-library-by-spec/die) (set! y2b0e@y29a9@library-exists? y29a9@library-exists?) (set! y2b0d@y29a7@find-library-by-name y29a7@find-library-by-name) (set! y2b0c@y29a5@find-external-library y29a5@find-external-library) (set! y2b0b@y29a3@external-pending-libraries y29a3@external-pending-libraries) (set! y2b0a@y29a1@current-library-expander y29a1@current-library-expander) (set! y2b09@y299f@library-loader y299f@library-loader) (set! y2b08@y299d@try-load-from-file y299d@try-load-from-file) (set! y2b07@y299b@current-precompiled-library-loader y299b@current-precompiled-library-loader) (set! y2b06@y2999@serialize-all y2999@serialize-all) (set! y2b05@y2997@file-locator y2997@file-locator) (set! y2b04@y2995@library-name->file-name y2995@library-name->file-name) (set! y2b03@y2993@library-extensions y2993@library-extensions) (set! y2b02@y2991@library-path y2991@library-path) (set! y2b01@y298f@find-library-by y298f@find-library-by) (set! y2b00@y298d@find-dependencies y298d@find-dependencies) (set! y2aff@y298b@rp y298b@rp) (set! y2afe@y2989@set-library-source-file-name! y2989@set-library-source-file-name!) (set! y2afd@y2987@set-library-visible?! y2987@set-library-visible?!) (set! y2afc@y2985@set-library-invoke-code! y2985@set-library-invoke-code!) (set! y2afb@y2983@set-library-visit-code! y2983@set-library-visit-code!) (set! y2afa@y2981@set-library-invoke-state! y2981@set-library-invoke-state!) (set! y2af9@y297f@set-library-visit-state! y297f@set-library-visit-state!) (set! y2af8@y297d@set-library-env! y297d@set-library-env!) (set! y2af7@y297b@set-library-subst! y297b@set-library-subst!) (set! y2af6@y2979@set-library-inv*! y2979@set-library-inv*!) (set! y2af5@y2977@set-library-vis*! y2977@set-library-vis*!) (set! y2af4@y2975@set-library-imp*! y2975@set-library-imp*!) (set! y2af3@y2973@set-library-version! y2973@set-library-version!) (set! y2af2@y2971@set-library-name! y2971@set-library-name!) (set! y2af1@y296f@set-library-id! y296f@set-library-id!) (set! y2af0@y296d@library-source-file-name y296d@library-source-file-name) (set! y2aef@y296b@library-visible? y296b@library-visible?) (set! y2aee@y2969@library-invoke-code y2969@library-invoke-code) (set! y2aed@y2967@library-visit-code y2967@library-visit-code) (set! y2aec@y2965@library-invoke-state y2965@library-invoke-state) (set! y2aeb@y2963@library-visit-state y2963@library-visit-state) (set! y2aea@y2961@library-env y2961@library-env) (set! y2ae9@y295f@library-subst y295f@library-subst) (set! y2ae8@y295d@library-inv* y295d@library-inv*) (set! y2ae7@y295b@library-vis* y295b@library-vis*) (set! y2ae6@y2959@library-imp* y2959@library-imp*) (set! y2ae5@y2957@library-version y2957@library-version) (set! y2ae4@y2955@library-name y2955@library-name) (set! y2ae3@y2953@library-id y2953@library-id) (set! y2ae2@y2951@make-library y2951@make-library) (set! y2ae1@y294f@library? y294f@library?) (set! y2ae0@y294c@y2944 y294c@y2944) (set! y2adf@y294a@y2945 y294a@y2945) (set! y2ade@y2948@y2943 y2948@y2943) (set! y2add@y2942@current-library-collection y2942@current-library-collection) (set! y2adc@y2940@make-collection y2940@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (y2b1b@build-global-define y2b8c@build-lambda y2b8e@build-case-lambda y2b90@build-let y2bbe@build-sequence y2bc0@build-void y2bc2@build-letrec y2bc4@build-letrec* y2bc6@build-library-letrec* y2bc8@build-receive) (begin (set! y2b1b@build-global-define (lambda (y2bc9@x) (y2bc0@build-void))) (set! y2b8c@build-lambda (lambda (y2bcb@ae y2bcc@vars y2bcd@exp) (list 'lambda y2bcc@vars y2bcd@exp))) (set! y2b8e@build-case-lambda (lambda (y2bd1@ae y2bd2@vars* y2bd3@exp*) ((lambda (y2bd8@build-error y2bda@build-pred y2bdc@build-apply y2bde@expand-case-lambda) (begin (set! y2bd8@build-error (lambda (y2c0f@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! y2bda@build-pred (lambda (y2bf7@ae y2bf8@n y2bf9@vars) (call-with-values (lambda () ((letrec ((y2c01@f (lambda (y2c03@vars y2c04@count) (if (pair? y2c03@vars) (y2c01@f (cdr y2c03@vars) (+ y2c04@count '1)) (if (null? y2c03@vars) (values y2c04@count '=) (values y2c04@count '>=)))))) y2c01@f) y2bf9@vars '0)) (lambda (y2c07@y2bfe y2c08@y2c00) ((lambda (y2c0b@pred y2c0c@count) (list (list 'primitive y2c0b@pred) y2bf8@n (list 'quote y2c0c@count))) y2c08@y2c00 y2c07@y2bfe))))) (set! y2bdc@build-apply (lambda (y2bef@ae y2bf0@g y2bf1@vars y2bf2@exp) (list '(primitive apply) (y2b8c@build-lambda y2bef@ae y2bf1@vars y2bf2@exp) y2bf0@g))) (set! y2bde@expand-case-lambda (lambda (y2bdf@ae y2be0@vars y2be1@exp*) ((lambda (y2be5@g y2be6@n) (list 'lambda y2be5@g (y2b90@build-let y2bdf@ae (list y2be6@n) (list (list '(primitive length) y2be5@g)) ((letrec ((y2be9@f (lambda (y2beb@vars* y2bec@exp*) (if (null? y2beb@vars*) (y2bd8@build-error y2bdf@ae) (list 'if (y2bda@build-pred y2bdf@ae y2be6@n (car y2beb@vars*)) (y2bdc@build-apply y2bdf@ae y2be5@g (car y2beb@vars*) (car y2bec@exp*)) (y2be9@f (cdr y2beb@vars*) (cdr y2bec@exp*))))))) y2be9@f) y2bd2@vars* y2be1@exp*)))) (gensym) (gensym)))) (if (= (length y2bd3@exp*) '1) (y2b8c@build-lambda y2bd1@ae (car y2bd2@vars*) (car y2bd3@exp*)) (y2bde@expand-case-lambda y2bd1@ae y2bd2@vars* y2bd3@exp*)))) '#f '#f '#f '#f))) (set! y2b90@build-let (lambda (y2c11@ae y2c12@lhs* y2c13@rhs* y2c14@body) (cons (y2b8c@build-lambda y2c11@ae y2c12@lhs* y2c14@body) y2c13@rhs*))) (set! y2bbe@build-sequence (lambda (y2c19@ae y2c1a@exps) ((letrec ((y2c1d@loop (lambda (y2c1f@exps) (if (null? (cdr y2c1f@exps)) (car y2c1f@exps) (if (equal? (car y2c1f@exps) (y2bc0@build-void)) (y2c1d@loop (cdr y2c1f@exps)) (cons 'begin y2c1f@exps)))))) y2c1d@loop) y2c1a@exps))) (set! y2bc0@build-void (lambda () '((primitive void)))) (set! y2bc2@build-letrec (lambda (y2c21@ae y2c22@vars y2c23@val-exps y2c24@body-exp) (if (null? y2c22@vars) y2c24@body-exp (list 'letrec (map list y2c22@vars y2c23@val-exps) y2c24@body-exp)))) (set! y2bc4@build-letrec* (lambda (y2c29@ae y2c2a@vars y2c2b@val-exps y2c2c@body-exp) (if (null? y2c2a@vars) y2c2c@body-exp (y2b90@build-let y2c29@ae y2c2a@vars (map (lambda (y2c31@x) (list 'quote '#f)) y2c2a@vars) (y2bbe@build-sequence y2c29@ae (append (map (lambda (y2c33@lhs y2c34@rhs) (list 'set! y2c33@lhs y2c34@rhs)) y2c2a@vars y2c2b@val-exps) (list y2c2c@body-exp))))))) (set! y2bc6@build-library-letrec* (lambda (y2c37@ae y2c38@name y2c39@vars y2c3a@locs y2c3b@val-exps y2c3c@body-exp) (list 'library-letrec* y2c38@name (map list y2c39@vars y2c3a@locs y2c3b@val-exps) y2c3c@body-exp))) (set! y2bc8@build-receive (lambda (y2c43@ae y2c44@vars y2c45@producer y2c46@body*) (begin (display '"************** in ") (cons 'receive (cons y2c44@vars (cons y2c45@producer y2c46@body*)))))) (begin (set! y2c54@y2bc8@build-receive y2bc8@build-receive) (set! y2c53@y2bc6@build-library-letrec* y2bc6@build-library-letrec*) (set! y2c52@y2bc4@build-letrec* y2bc4@build-letrec*) (set! y2c51@y2bc2@build-letrec y2bc2@build-letrec) (set! y2c50@y2bc0@build-void y2bc0@build-void) (set! y2c4f@y2bbe@build-sequence y2bbe@build-sequence) (set! y2c4e@y2b90@build-let y2b90@build-let) (set! y2c4d@y2b8e@build-case-lambda y2b8e@build-case-lambda) (set! y2c4c@y2b8c@build-lambda y2b8c@build-lambda) (set! y2c4b@y2b1b@build-global-define y2b1b@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (y2c63@file-options-macro y2c65@set-cons y2c67@set-union y2c6c@top-mark* y2c6e@top-marked? y2c70@gen-lexical y2c72@gen-global y2c74@gen-label y2c76@gen-top-level-label y2c78@gen-define-label+loc y2c7a@gen-define-label y2c80@y2c7b y2c82@y2c7d y2c84@y2c7c y2c87@rib? y2c89@make-rib y2c8b@rib-sym* y2c8d@rib-mark** y2c8f@rib-label* y2c91@rib-sealed/freq y2c93@rib-cache y2c95@set-rib-sym*! y2c97@set-rib-mark**! y2c99@set-rib-label*! y2c9b@set-rib-sealed/freq! y2c9d@set-rib-cache! y2c9f@make-empty-rib y2ca1@extend-rib! y2ca3@extend-rib/nc! y2ca5@make-rib-map y2ca7@seal-rib! y2ca9@unseal-rib! y2cab@make-full-rib y2cb1@y2cac y2cb3@y2cae y2cb5@y2cad y2cb8@stx? y2cba@make-stx y2cbc@stx-expr y2cbe@stx-mark* y2cc0@stx-subst* y2cc2@stx-ae* y2cc4@set-stx-expr! y2cc6@set-stx-mark*! y2cc8@set-stx-subst*! y2cca@set-stx-ae*! y2ccc@rp y2cce@datum->stx y2cd0@gen-mark y2cd2@anti-mark y2cd4@anti-mark? y2cd6@join-wraps y2cd8@mkstx y2cda@add-mark y2cdc@add-subst y2cde@syntax-kind? y2ce0@syntax-vector->list y2ce2@syntax-pair? y2ce4@syntax-vector? y2ce6@syntax-null? y2ce8@syntax-list? y2cea@syntax-car y2cec@syntax-cdr y2cee@syntax->list y2cf0@id? y2cf2@id->sym y2cf4@same-marks? y2cf6@bound-id=? y2cf8@free-id=? y2cfa@valid-bound-ids? y2cfc@distinct-bound-ids? y2cfe@bound-id-member? y2d00@self-evaluating? y2d02@strip-annotations y2d04@strip y2d06@stx->datum y2d08@same-marks*? y2d0a@id->label y2d0c@id->real-label y2d0e@label->binding y2d10@make-binding y2d12@binding-type y2d14@binding-value y2d16@raise-unbound-error y2d18@syntax-type y2d26@sanitize-binding y2d28@make-variable-transformer y2d2a@variable-transformer? y2d2c@variable-transformer-procedure y2d2e@make-eval-transformer y2e7f@parse-define y2e81@parse-define-syntax y2e83@scheme-stx-hashtable y2e85@scheme-stx y2e87@lexical-var y2e89@lexical-mutable? y2e8b@set-lexical-mutable! y2e8d@add-lexical y2e8f@add-lexicals y2e91@letrec-helper y2e93@letrec-transformer y2e95@letrec*-transformer y2e97@fluid-let-syntax-transformer y2e99@type-descriptor-transformer y2e9b@record-type-descriptor-transformer y2e9d@record-constructor-descriptor-transformer y2e9f@when-macro y2ea1@unless-macro y2ea3@if-transformer y2ea5@and-transformer y2ea7@or-transformer y2ea9@case-macro y2eab@quote-transformer y2ead@case-lambda-transformer y2eaf@lambda-transformer y2eb1@bless y2eb3@with-syntax-macro y2eb5@invalid-fmls-error y2eb7@let-macro y2eb9@let-values-macro y2ebb@let*-values-macro y2ebd@trace-lambda-macro y2ebf@trace-define-macro y2ec1@trace-define-syntax-macro y2ec3@trace-let/rec-syntax y2ec5@trace-let-syntax-macro y2ec7@trace-letrec-syntax-macro y2ec9@guard-macro y2ecb@define-enumeration-macro y2ecd@time-macro y2ecf@delay-macro y2ed1@assert-macro y2ed3@endianness-macro y2ed5@identifier-syntax-macro y2ed7@do-macro y2ed9@let*-macro y2edb@or-macro y2edd@and-macro y2edf@cond-macro y2ee1@do-include y2ee3@include-macro y2ee5@include-into-macro y2ee7@syntax-rules-macro y2ee9@quasiquote-macro y2eeb@quasisyntax-macro y2eed@define-struct-macro y2eef@define-record-type-macro y2ef1@define-condition-type-macro y2ef3@incorrect-usage-macro y2ef5@parameterize-macro y2ef7@foreign-call-transformer y2ef9@convert-pattern y2efb@syntax-dispatch y2efd@ellipsis? y2eff@underscore? y2f01@verify-literals y2f03@syntax-case-transformer y2f05@ellipsis-map y2f07@syntax-transformer y2f09@core-macro-transformer y2f0b@symbol-macro y2f0d@macro-transformer y2f0f@local-macro-transformer y2f11@do-macro-call y2f13@chi-macro y2f15@chi-local-macro y2f17@chi-global-macro y2f19@chi-expr* y2f1b@chi-application y2f1d@chi-expr y2f1f@chi-set! y2f21@verify-formals y2f23@chi-lambda-clause y2f25@chi-lambda-clause* y2f27@chi-defun y2f29@chi-rhs y2f2b@expand-interaction-rhs*/init* y2f2d@chi-rhs* y2f2f@find-bound=? y2f31@find-dups y2f33@chi-internal y2f35@parse-module y2f3b@y2f36 y2f3d@y2f38 y2f3f@y2f37 y2f42@module-interface? y2f44@make-module-interface y2f46@module-interface-first-mark y2f48@module-interface-exp-id-vec y2f4a@module-interface-exp-lab-vec y2f4c@set-module-interface-first-mark! y2f4e@set-module-interface-exp-id-vec! y2f50@set-module-interface-exp-lab-vec! y2f52@module-interface-exp-id* y2f54@chi-internal-module y2f56@chi-body* y2f58@expand-transformer y2f5a@parse-exports y2f5c@parse-library-name y2f5e@parse-library y2f60@parse-import-spec* y2f62@make-top-rib y2f64@make-collector y2f66@inv-collector y2f68@vis-collector y2f6a@imp-collector y2f6c@chi-library-internal y2f6e@chi-interaction-expr y2f70@library-body-expander y2f72@core-library-expander y2f74@parse-top-level-program y2f76@top-level-expander y2f7c@y2f77 y2f7e@y2f79 y2f80@y2f78 y2f83@env? y2f85@make-env y2f87@env-names y2f89@env-labels y2f8b@env-itc y2f8d@set-env-names! y2f8f@set-env-labels! y2f91@set-env-itc! y2f93@rp y2f99@y2f94 y2f9b@y2f96 y2f9d@y2f95 y2fa0@interaction-env? y2fa2@make-interaction-env y2fa4@interaction-env-rib y2fa6@interaction-env-r y2fa8@interaction-env-locs y2faa@set-interaction-env-rib! y2fac@set-interaction-env-r! y2fae@set-interaction-env-locs! y2fb0@rp y2fb2@interaction-environment-symbols y2fb4@environment-bindings y2fb6@parse-binding y2fb8@environment? y2fba@environment-symbols y2fbc@environment y2fbe@null-environment y2fc0@scheme-report-environment y2fc2@expand y2fc4@eval y2fc6@library-expander y2fc8@boot-library-expand y2fca@rev-map-append y2fcc@build-exports y2fce@make-export-subst y2fd0@make-export-env/macros y2fd2@generate-temporaries y2fd4@free-identifier=? y2fd6@bound-identifier=? y2fd8@make-source-condition y2fda@extract-position-condition y2fdc@expression-position y2fde@assertion-error y2fe0@syntax-error y2fe2@syntax-violation* y2fe4@syntax-violation y2fe6@identifier? y2fe8@datum->syntax y2fea@syntax->datum y2fec@compile-r6rs-top-level y2fee@pre-compile-r6rs-top-level y2ff0@interaction-environment y2ff2@top-level-context) (begin (set! y2c63@file-options-macro (lambda (y2ff3@x) ((lambda (y2ff6@valid-option?) (begin (set! y2ff6@valid-option? (lambda (y2fff@x) (and (y2cf0@id? y2fff@x) (memq (y2cf2@id->sym y2fff@x) '(no-fail no-create no-truncate))))) ((lambda (y2ff7@t) ((lambda (y2ff9@ls/false) (if (and y2ff9@ls/false (apply (lambda (y2ffb@opt*) (for-all y2ff6@valid-option? y2ffb@opt*)) y2ff9@ls/false)) (apply (lambda (y2ffd@opt*) (y2eb1@bless (list 'make-file-options (list 'quote y2ffd@opt*)))) y2ff9@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y2ff7@t))) (y2efb@syntax-dispatch y2ff7@t '(_ . each-any)))) y2ff3@x))) '#f))) (set! y2c65@set-cons (lambda (y3001@x y3002@ls) (if (memq y3001@x y3002@ls) y3002@ls (cons y3001@x y3002@ls)))) (set! y2c67@set-union (lambda (y3005@ls1 y3006@ls2) (if (null? y3005@ls1) y3006@ls2 (if (memq (car y3005@ls1) y3006@ls2) (y2c67@set-union (cdr y3005@ls1) y3006@ls2) (cons (car y3005@ls1) (y2c67@set-union (cdr y3005@ls1) y3006@ls2)))))) (set! y2c6c@top-mark* '(top)) (set! y2c6e@top-marked? (lambda (y3009@m*) (memq 'top y3009@m*))) (set! y2c70@gen-lexical (lambda (y300b@sym) (if (symbol? y300b@sym) (gensym y300b@sym) (if (y2cb8@stx? y300b@sym) (y2c70@gen-lexical (y2cf2@id->sym y300b@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" y300b@sym))))) (set! y2c72@gen-global (lambda (y300d@x) (y2c70@gen-lexical y300d@x))) (set! y2c74@gen-label (lambda (y300f@_) (gensym))) (set! y2c76@gen-top-level-label (lambda (y3011@id y3012@rib) ((lambda (y3016@find) (begin (set! y3016@find (lambda (y3021@sym y3022@mark* y3023@sym* y3024@mark** y3025@label*) (and (pair? y3023@sym*) (if (and (eq? y3021@sym (car y3023@sym*)) (y2cf4@same-marks? y3022@mark* (car y3024@mark**))) (car y3025@label*) (y3016@find y3021@sym y3022@mark* (cdr y3023@sym*) (cdr y3024@mark**) (cdr y3025@label*)))))) ((lambda (y3017@sym y3018@mark*) ((lambda (y301b@sym*) ((lambda (y301d@t) (if y301d@t ((lambda (y301f@label) (if (y2b13@y29b3@imported-label->binding y301f@label) (gensym) y301f@label)) y301d@t) (gensym))) (and (memq y3017@sym (y2c8b@rib-sym* y3012@rib)) (y3016@find y3017@sym y3018@mark* y301b@sym* (y2c8d@rib-mark** y3012@rib) (y2c8f@rib-label* y3012@rib))))) (y2c8b@rib-sym* y3012@rib))) (y2cf2@id->sym y3011@id) (y2cbe@stx-mark* y3011@id)))) '#f))) (set! y2c78@gen-define-label+loc (lambda (y302b@id y302c@rib) ((lambda (y302f@t) (if y302f@t ((lambda (y3031@env) ((lambda (y3033@label y3034@locs) (values y3033@label ((lambda (y3037@t) (if y3037@t (cdr y3037@t) ((lambda (y3039@loc) (begin (y2fae@set-interaction-env-locs! y3031@env (cons (cons y3033@label y3039@loc) y3034@locs)) y3039@loc)) (y2c70@gen-lexical y302b@id)))) (assq y3033@label y3034@locs)))) (y2c76@gen-top-level-label y302b@id y302c@rib) (y2fa8@interaction-env-locs y3031@env))) y302f@t) (values (gensym) (y2c70@gen-lexical y302b@id)))) (y2ff2@top-level-context)))) (set! y2c7a@gen-define-label (lambda (y303b@id y303c@rib) (if (y2ff2@top-level-context) (y2c76@gen-top-level-label y303b@id y303c@rib) (gensym)))) (set! y2c80@y2c7b (make-record-type-descriptor 'rib '#f 'y2c7e '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! y2c82@y2c7d '#f) (set! y2c84@y2c7c (make-record-constructor-descriptor y2c80@y2c7b '#f y2c82@y2c7d)) (set! y2c87@rib? (record-predicate y2c80@y2c7b)) (set! y2c89@make-rib (record-constructor y2c84@y2c7c)) (set! y2c8b@rib-sym* (record-accessor y2c80@y2c7b '0)) (set! y2c8d@rib-mark** (record-accessor y2c80@y2c7b '1)) (set! y2c8f@rib-label* (record-accessor y2c80@y2c7b '2)) (set! y2c91@rib-sealed/freq (record-accessor y2c80@y2c7b '3)) (set! y2c93@rib-cache (record-accessor y2c80@y2c7b '4)) (set! y2c95@set-rib-sym*! (record-mutator y2c80@y2c7b '0)) (set! y2c97@set-rib-mark**! (record-mutator y2c80@y2c7b '1)) (set! y2c99@set-rib-label*! (record-mutator y2c80@y2c7b '2)) (set! y2c9b@set-rib-sealed/freq! (record-mutator y2c80@y2c7b '3)) (set! y2c9d@set-rib-cache! (record-mutator y2c80@y2c7b '4)) (set! y2c9f@make-empty-rib (lambda () (y2c89@make-rib '() '() '() '#f '#f))) (set! y2ca1@extend-rib! (lambda (y303f@rib y3040@id y3041@label) ((lambda (y3046@find) (begin (set! y3046@find (lambda (y3053@sym y3054@mark* y3055@sym* y3056@mark** y3057@label*) (and (pair? y3055@sym*) (if (and (eq? y3053@sym (car y3055@sym*)) (y2cf4@same-marks? y3054@mark* (car y3056@mark**))) y3057@label* (y3046@find y3053@sym y3054@mark* (cdr y3055@sym*) (cdr y3056@mark**) (cdr y3057@label*)))))) (begin (if (y2c91@rib-sealed/freq y303f@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" y303f@rib) (void)) ((lambda (y3047@sym y3048@mark*) ((lambda (y304b@sym*) ((lambda (y304d@t) (if y304d@t ((lambda (y304f@p) (if (not (eq? y3041@label (car y304f@p))) (if (y2ff2@top-level-context) (set-car! y304f@p y3041@label) (y2fe4@syntax-violation '#f '"multiple definitions of identifier" y3040@id)) (void))) y304d@t) (begin (if (y2c93@rib-cache y303f@rib) (hashtable-update! (y2c93@rib-cache y303f@rib) y3047@sym (lambda (y3051@e) (cons (cons y3048@mark* y3041@label) y3051@e)) '()) (void)) (y2c95@set-rib-sym*! y303f@rib (cons y3047@sym y304b@sym*)) (y2c97@set-rib-mark**! y303f@rib (cons y3048@mark* (y2c8d@rib-mark** y303f@rib))) (y2c99@set-rib-label*! y303f@rib (cons y3041@label (y2c8f@rib-label* y303f@rib)))))) (and (memq y3047@sym (y2c8b@rib-sym* y303f@rib)) (y3046@find y3047@sym y3048@mark* y304b@sym* (y2c8d@rib-mark** y303f@rib) (y2c8f@rib-label* y303f@rib))))) (y2c8b@rib-sym* y303f@rib))) (y2cf2@id->sym y3040@id) (y2cbe@stx-mark* y3040@id))))) '#f))) (set! y2ca3@extend-rib/nc! (lambda (y305d@rib y305e@id y305f@label) ((lambda (y3063@sym y3064@mark*) ((lambda (y3067@sym*) (begin (if (y2c93@rib-cache y305d@rib) (hashtable-update! (y2c93@rib-cache y305d@rib) y3063@sym (lambda (y3069@e) (cons (cons y3064@mark* y305f@label) y3069@e)) '()) (void)) (y2c95@set-rib-sym*! y305d@rib (cons y3063@sym y3067@sym*)) (y2c97@set-rib-mark**! y305d@rib (cons y3064@mark* (y2c8d@rib-mark** y305d@rib))) (y2c99@set-rib-label*! y305d@rib (cons y305f@label (y2c8f@rib-label* y305d@rib))))) (y2c8b@rib-sym* y305d@rib))) (y2cf2@id->sym y305e@id) (y2cbe@stx-mark* y305e@id)))) (set! y2ca5@make-rib-map (lambda (y306b@sym*) ((lambda (y306d@ht) ((letrec ((y306f@f (lambda (y3071@i y3072@sym*) (if (null? y3072@sym*) y306d@ht (begin (hashtable-update! y306d@ht (car y3072@sym*) (lambda (y3075@x) (cons y3071@i y3075@x)) '()) (y306f@f (+ y3071@i '1) (cdr y3072@sym*))))))) y306f@f) '0 y306b@sym*)) (make-eq-hashtable)))) (set! y2ca7@seal-rib! (lambda (y3077@rib) ((lambda (y3079@sym*) (if (not (null? y3079@sym*)) (begin (y2c95@set-rib-sym*! y3077@rib (list->vector y3079@sym*)) (y2c97@set-rib-mark**! y3077@rib (list->vector (y2c8d@rib-mark** y3077@rib))) (y2c99@set-rib-label*! y3077@rib (list->vector (y2c8f@rib-label* y3077@rib))) (y2c9b@set-rib-sealed/freq! y3077@rib (y2ca5@make-rib-map y3079@sym*))) (void))) (y2c8b@rib-sym* y3077@rib)))) (set! y2ca9@unseal-rib! (lambda (y307b@rib) (if (y2c91@rib-sealed/freq y307b@rib) (begin (y2c9b@set-rib-sealed/freq! y307b@rib '#f) (y2c95@set-rib-sym*! y307b@rib (vector->list (y2c8b@rib-sym* y307b@rib))) (y2c97@set-rib-mark**! y307b@rib (vector->list (y2c8d@rib-mark** y307b@rib))) (y2c99@set-rib-label*! y307b@rib (vector->list (y2c8f@rib-label* y307b@rib)))) (void)))) (set! y2cab@make-full-rib (lambda (y307d@id* y307e@label*) ((lambda (y3081@r) (begin (y2ca7@seal-rib! y3081@r) y3081@r)) (y2c89@make-rib (map y2cf2@id->sym y307d@id*) (map y2cbe@stx-mark* y307d@id*) y307e@label* '#f '#f)))) (set! y2cb1@y2cac (make-record-type-descriptor 'stx '#f 'y2caf '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! y2cb3@y2cae '#f) (set! y2cb5@y2cad (make-record-constructor-descriptor y2cb1@y2cac '#f y2cb3@y2cae)) (set! y2cb8@stx? (record-predicate y2cb1@y2cac)) (set! y2cba@make-stx (record-constructor y2cb5@y2cad)) (set! y2cbc@stx-expr (record-accessor y2cb1@y2cac '0)) (set! y2cbe@stx-mark* (record-accessor y2cb1@y2cac '1)) (set! y2cc0@stx-subst* (record-accessor y2cb1@y2cac '2)) (set! y2cc2@stx-ae* (record-accessor y2cb1@y2cac '3)) (set! y2cc4@set-stx-expr! (record-mutator y2cb1@y2cac '0)) (set! y2cc6@set-stx-mark*! (record-mutator y2cb1@y2cac '1)) (set! y2cc8@set-stx-subst*! (record-mutator y2cb1@y2cac '2)) (set! y2cca@set-stx-ae*! (record-mutator y2cb1@y2cac '3)) (set! y2ccc@rp (y2897@y27be@make-record-printer 'stx (lambda (y3083@x y3084@p y3085@wr) (begin (display '"#<syntax " y3084@p) (write (y2d06@stx->datum y3083@x) y3084@p) ((lambda (y3089@expr) (if (y288f@y27ae@annotation? y3089@expr) ((lambda (y308b@src) (if (pair? y308b@src) (begin (display '" [" y3084@p) (display (cdr y308b@src) y3084@p) (display '" of " y3084@p) (display (car y308b@src) y3084@p) (display '"]" y3084@p)) (void))) (y2890@y27b0@annotation-source y3089@expr)) (void))) (y2cbc@stx-expr y3083@x)) (display '">" y3084@p))))) (set! y2cce@datum->stx (lambda (y308d@id y308e@datum) (y2cba@make-stx y308e@datum (y2cbe@stx-mark* y308d@id) (y2cc0@stx-subst* y308d@id) (y2cc2@stx-ae* y308d@id)))) (set! y2cd0@gen-mark (lambda () (string '#\m))) (set! y2cd2@anti-mark '#f) (set! y2cd4@anti-mark? not) (set! y2cd6@join-wraps (lambda (y3091@m1* y3092@s1* y3093@ae1* y3094@e) ((lambda (y309a@cancel) (begin (set! y309a@cancel (lambda (y30a1@ls1 y30a2@ls2) ((letrec ((y30a5@f (lambda (y30a7@x y30a8@ls1) (if (null? y30a8@ls1) (cdr y30a2@ls2) (cons y30a7@x (y30a5@f (car y30a8@ls1) (cdr y30a8@ls1))))))) y30a5@f) (car y30a1@ls1) (cdr y30a1@ls1)))) ((lambda (y309b@m2* y309c@s2* y309d@ae2*) (if (and (not (null? y3091@m1*)) (not (null? y309b@m2*)) (y2cd4@anti-mark? (car y309b@m2*))) (values (y309a@cancel y3091@m1* y309b@m2*) (y309a@cancel y3092@s1* y309c@s2*) (y309a@cancel y3093@ae1* y309d@ae2*)) (values (append y3091@m1* y309b@m2*) (append y3092@s1* y309c@s2*) (append y3093@ae1* y309d@ae2*)))) (y2cbe@stx-mark* y3094@e) (y2cc0@stx-subst* y3094@e) (y2cc2@stx-ae* y3094@e)))) '#f))) (set! y2cd8@mkstx (lambda (y30ab@e y30ac@m* y30ad@s* y30ae@ae*) (if (and (y2cb8@stx? y30ab@e) (not (y2c6e@top-marked? y30ac@m*))) (call-with-values (lambda () (y2cd6@join-wraps y30ac@m* y30ad@s* y30ae@ae* y30ab@e)) (lambda (y30b9@y30b4 y30ba@y30b6 y30bb@y30b8) ((lambda (y30bf@ae* y30c0@s* y30c1@m*) (y2cba@make-stx (y2cbc@stx-expr y30ab@e) y30c1@m* y30c0@s* y30bf@ae*)) y30bb@y30b8 y30ba@y30b6 y30b9@y30b4))) (y2cba@make-stx y30ab@e y30ac@m* y30ad@s* y30ae@ae*)))) (set! y2cda@add-mark (lambda (y30c5@m y30c6@e y30c7@ae) (y2cd8@mkstx y30c6@e (list y30c5@m) '(shift) (list y30c7@ae)))) (set! y2cdc@add-subst (lambda (y30cb@subst y30cc@e) (y2cd8@mkstx y30cc@e '() (list y30cb@subst) '()))) (set! y2cde@syntax-kind? (lambda (y30cf@x y30d0@p?) (if (y2cb8@stx? y30cf@x) (y2cde@syntax-kind? (y2cbc@stx-expr y30cf@x) y30d0@p?) (if (y288f@y27ae@annotation? y30cf@x) (y2cde@syntax-kind? (y2891@y27b2@annotation-expression y30cf@x) y30d0@p?) (y30d0@p? y30cf@x))))) (set! y2ce0@syntax-vector->list (lambda (y30d3@x) (if (y2cb8@stx? y30d3@x) ((lambda (y30d5@ls y30d6@m* y30d7@s* y30d8@ae*) (map (lambda (y30dd@x) (y2cd8@mkstx y30dd@x y30d6@m* y30d7@s* y30d8@ae*)) y30d5@ls)) (y2ce0@syntax-vector->list (y2cbc@stx-expr y30d3@x)) (y2cbe@stx-mark* y30d3@x) (y2cc0@stx-subst* y30d3@x) (y2cc2@stx-ae* y30d3@x)) (if (y288f@y27ae@annotation? y30d3@x) (y2ce0@syntax-vector->list (y2891@y27b2@annotation-expression y30d3@x)) (if (vector? y30d3@x) (vector->list y30d3@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" y30d3@x)))))) (set! y2ce2@syntax-pair? (lambda (y30df@x) (y2cde@syntax-kind? y30df@x pair?))) (set! y2ce4@syntax-vector? (lambda (y30e1@x) (y2cde@syntax-kind? y30e1@x vector?))) (set! y2ce6@syntax-null? (lambda (y30e3@x) (y2cde@syntax-kind? y30e3@x null?))) (set! y2ce8@syntax-list? (lambda (y30e5@x) (or (y2ce6@syntax-null? y30e5@x) (and (y2ce2@syntax-pair? y30e5@x) (y2ce8@syntax-list? (y2cec@syntax-cdr y30e5@x)))))) (set! y2cea@syntax-car (lambda (y30e7@x) (if (y2cb8@stx? y30e7@x) (y2cd8@mkstx (y2cea@syntax-car (y2cbc@stx-expr y30e7@x)) (y2cbe@stx-mark* y30e7@x) (y2cc0@stx-subst* y30e7@x) (y2cc2@stx-ae* y30e7@x)) (if (y288f@y27ae@annotation? y30e7@x) (y2cea@syntax-car (y2891@y27b2@annotation-expression y30e7@x)) (if (pair? y30e7@x) (car y30e7@x) (assertion-violation 'syntax-car '"BUG: not a pair" y30e7@x)))))) (set! y2cec@syntax-cdr (lambda (y30e9@x) (if (y2cb8@stx? y30e9@x) (y2cd8@mkstx (y2cec@syntax-cdr (y2cbc@stx-expr y30e9@x)) (y2cbe@stx-mark* y30e9@x) (y2cc0@stx-subst* y30e9@x) (y2cc2@stx-ae* y30e9@x)) (if (y288f@y27ae@annotation? y30e9@x) (y2cec@syntax-cdr (y2891@y27b2@annotation-expression y30e9@x)) (if (pair? y30e9@x) (cdr y30e9@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" y30e9@x)))))) (set! y2cee@syntax->list (lambda (y30eb@x) (if (y2ce2@syntax-pair? y30eb@x) (cons (y2cea@syntax-car y30eb@x) (y2cee@syntax->list (y2cec@syntax-cdr y30eb@x))) (if (y2ce6@syntax-null? y30eb@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" y30eb@x))))) (set! y2cf0@id? (lambda (y30ed@x) (and (y2cb8@stx? y30ed@x) ((lambda (y30ef@expr) (symbol? (if (y288f@y27ae@annotation? y30ef@expr) (y288e@y27ac@annotation-stripped y30ef@expr) y30ef@expr))) (y2cbc@stx-expr y30ed@x))))) (set! y2cf2@id->sym (lambda (y30f1@x) (begin (if (not (y2cb8@stx? y30f1@x)) (error 'id->sym '"BUG in ikarus: not an id" y30f1@x) (void)) ((lambda (y30f3@expr) ((lambda (y30f5@sym) (if (symbol? y30f5@sym) y30f5@sym (error 'id->sym '"BUG in ikarus: not an id" y30f1@x))) (if (y288f@y27ae@annotation? y30f3@expr) (y288e@y27ac@annotation-stripped y30f3@expr) y30f3@expr))) (y2cbc@stx-expr y30f1@x))))) (set! y2cf4@same-marks? (lambda (y30f7@x y30f8@y) (or (and (null? y30f7@x) (null? y30f8@y)) (and (pair? y30f7@x) (pair? y30f8@y) (eq? (car y30f7@x) (car y30f8@y)) (y2cf4@same-marks? (cdr y30f7@x) (cdr y30f8@y)))))) (set! y2cf6@bound-id=? (lambda (y30fb@x y30fc@y) (and (eq? (y2cf2@id->sym y30fb@x) (y2cf2@id->sym y30fc@y)) (y2cf4@same-marks? (y2cbe@stx-mark* y30fb@x) (y2cbe@stx-mark* y30fc@y))))) (set! y2cf8@free-id=? (lambda (y30ff@i y3100@j) ((lambda (y3103@t0 y3104@t1) (if (or y3103@t0 y3104@t1) (eq? y3103@t0 y3104@t1) (eq? (y2cf2@id->sym y30ff@i) (y2cf2@id->sym y3100@j)))) (y2d0c@id->real-label y30ff@i) (y2d0c@id->real-label y3100@j)))) (set! y2cfa@valid-bound-ids? (lambda (y3107@id*) (and (for-all y2cf0@id? y3107@id*) (y2cfc@distinct-bound-ids? y3107@id*)))) (set! y2cfc@distinct-bound-ids? (lambda (y3109@id*) (or (null? y3109@id*) (and (not (y2cfe@bound-id-member? (car y3109@id*) (cdr y3109@id*))) (y2cfc@distinct-bound-ids? (cdr y3109@id*)))))) (set! y2cfe@bound-id-member? (lambda (y310b@id y310c@id*) (and (pair? y310c@id*) (or (y2cf6@bound-id=? y310b@id (car y310c@id*)) (y2cfe@bound-id-member? y310b@id (cdr y310c@id*)))))) (set! y2d00@self-evaluating? (lambda (y310f@x) (or (number? y310f@x) (string? y310f@x) (char? y310f@x) (boolean? y310f@x) (regexp? y310f@x) (bytevector? y310f@x)))) (set! y2d02@strip-annotations (lambda (y3111@x) (if (pair? y3111@x) (cons (y2d02@strip-annotations (car y3111@x)) (y2d02@strip-annotations (cdr y3111@x))) (if (vector? y3111@x) (vector-map y2d02@strip-annotations y3111@x) (if (y288f@y27ae@annotation? y3111@x) (y288e@y27ac@annotation-stripped y3111@x) y3111@x))))) (set! y2d04@strip (lambda (y3113@x y3114@m*) (if (y2c6e@top-marked? y3114@m*) (if (or (y288f@y27ae@annotation? y3113@x) (and (pair? y3113@x) (y288f@y27ae@annotation? (car y3113@x))) (and (vector? y3113@x) (> (vector-length y3113@x) '0) (y288f@y27ae@annotation? (vector-ref y3113@x '0)))) (y2d02@strip-annotations y3113@x) y3113@x) ((letrec ((y3117@f (lambda (y3119@x) (if (y2cb8@stx? y3119@x) (y2d04@strip (y2cbc@stx-expr y3119@x) (y2cbe@stx-mark* y3119@x)) (if (y288f@y27ae@annotation? y3119@x) (y288e@y27ac@annotation-stripped y3119@x) (if (pair? y3119@x) ((lambda (y311b@a y311c@d) (if (and (eq? y311b@a (car y3119@x)) (eq? y311c@d (cdr y3119@x))) y3119@x (cons y311b@a y311c@d))) (y3117@f (car y3119@x)) (y3117@f (cdr y3119@x))) (if (vector? y3119@x) ((lambda (y311f@old) ((lambda (y3121@new) (if (for-all eq? y311f@old y3121@new) y3119@x (list->vector y3121@new))) (map y3117@f y311f@old))) (vector->list y3119@x)) y3119@x))))))) y3117@f) y3113@x)))) (set! y2d06@stx->datum (lambda (y3123@x) (y2d04@strip y3123@x '()))) (set! y2d08@same-marks*? (lambda (y3125@mark* y3126@mark** y3127@si) (if (null? y3127@si) '#f (if (y2cf4@same-marks? y3125@mark* (vector-ref y3126@mark** (car y3127@si))) (car y3127@si) (y2d08@same-marks*? y3125@mark* y3126@mark** (cdr y3127@si)))))) (set! y2d0a@id->label (lambda (y312b@id) (or (y2d0c@id->real-label y312b@id) ((lambda (y312d@t) (if y312d@t ((lambda (y312f@env) ((lambda (y3131@rib) (call-with-values (lambda () (y2c78@gen-define-label+loc y312b@id y3131@rib)) (lambda (y3137@y3134 y3138@y3136) ((lambda (y313b@loc_ y313c@lab) (begin (y2ca1@extend-rib! y3131@rib y312b@id y313c@lab) y313c@lab)) y3138@y3136 y3137@y3134)))) (y2fa4@interaction-env-rib y312f@env))) y312d@t) '#f)) (y2ff2@top-level-context))))) (set! y2d0c@id->real-label (lambda (y313f@id) ((lambda (y3141@sym) ((letrec ((y3143@search (lambda (y3145@subst* y3146@mark*) (if (null? y3145@subst*) '#f (if (eq? (car y3145@subst*) 'shift) (y3143@search (cdr y3145@subst*) (cdr y3146@mark*)) ((lambda (y3149@rib) ((lambda (y314b@t) (if y314b@t ((lambda (y314d@ht) ((lambda (y314f@si) ((lambda (y3151@i) (if y3151@i (vector-ref (y2c8f@rib-label* y3149@rib) y3151@i) (y3143@search (cdr y3145@subst*) y3146@mark*))) (and y314f@si (y2d08@same-marks*? y3146@mark* (y2c8d@rib-mark** y3149@rib) (reverse y314f@si))))) (hashtable-ref y314d@ht y3141@sym '#f))) y314b@t) ((letrec ((y3153@f (lambda (y3155@sym* y3156@mark** y3157@label*) (if (null? y3155@sym*) (y3143@search (cdr y3145@subst*) y3146@mark*) (if (and (eq? (car y3155@sym*) y3141@sym) (y2cf4@same-marks? (car y3156@mark**) y3146@mark*)) (car y3157@label*) (y3153@f (cdr y3155@sym*) (cdr y3156@mark**) (cdr y3157@label*))))))) y3153@f) (y2c8b@rib-sym* y3149@rib) (y2c8d@rib-mark** y3149@rib) (y2c8f@rib-label* y3149@rib)))) (y2c91@rib-sealed/freq y3149@rib))) (car y3145@subst*))))))) y3143@search) (y2cc0@stx-subst* y313f@id) (y2cbe@stx-mark* y313f@id))) (y2cf2@id->sym y313f@id)))) (set! y2d0e@label->binding (lambda (y315b@x y315c@r) ((lambda (y315f@t) (if y315f@t ((lambda (y3161@b) (if (and (pair? y3161@b) (eq? (car y3161@b) '$core-rtd)) (cons '$rtd (map y2eb1@bless (cdr y3161@b))) (if (and (pair? y3161@b) (eq? (car y3161@b) 'global-rtd)) ((lambda (y3163@lib y3164@loc) (cons '$rtd (symbol-value y3164@loc))) (cadr y3161@b) (cddr y3161@b)) y3161@b))) y315f@t) ((lambda (y3167@t) (if y3167@t (cdr y3167@t) ((lambda (y3169@t) (if y3169@t ((lambda (y316b@env) ((lambda (y316d@t) (if y316d@t ((lambda (y316f@p) (cons* 'lexical (cdr y316f@p) '#f)) y316d@t) '(displaced-lexical . #f))) (assq y315b@x (y2fa8@interaction-env-locs y316b@env)))) y3169@t) '(displaced-lexical . #f))) (y2ff2@top-level-context)))) (assq y315b@x y315c@r)))) (y2b13@y29b3@imported-label->binding y315b@x)))) (set! y2d10@make-binding cons) (set! y2d12@binding-type car) (set! y2d14@binding-value cdr) (set! y2d16@raise-unbound-error (lambda (y3171@id) (y2fe2@syntax-violation* '#f '"unbound identifier" y3171@id (y4d21@y4b67@make-undefined-violation)))) (set! y2d18@syntax-type (lambda (y3173@e y3174@r) (if (y2cf0@id? y3173@e) ((lambda (y3177@id) ((lambda (y3179@label) ((lambda (y317b@b) ((lambda (y317d@type) ((lambda () (begin (if (not y3179@label) (y2d16@raise-unbound-error y3177@id) (void)) ((lambda (y317f@t) (if (memv y317f@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values y317d@type (y2d14@binding-value y317b@b) y3177@id) (values 'other '#f '#f))) y317d@type))))) (y2d12@binding-type y317b@b))) (y2d0e@label->binding y3179@label y3174@r))) (y2d0a@id->label y3177@id))) y3173@e) (if (y2ce2@syntax-pair? y3173@e) ((lambda (y3181@id) (if (y2cf0@id? y3181@id) ((lambda (y3183@label) ((lambda (y3185@b) ((lambda (y3187@type) ((lambda () (begin (if (not y3183@label) (y2d16@raise-unbound-error y3181@id) (void)) ((lambda (y3189@t) (if (memv y3189@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values y3187@type (y2d14@binding-value y3185@b) y3181@id) (values 'call '#f '#f))) y3187@type))))) (y2d12@binding-type y3185@b))) (y2d0e@label->binding y3183@label y3174@r))) (y2d0a@id->label y3181@id)) (values 'call '#f '#f))) (y2cea@syntax-car y3173@e)) ((lambda (y318b@d) (if (y2d00@self-evaluating? y318b@d) (values 'constant y318b@d '#f) (values 'other '#f '#f))) (y2d06@stx->datum y3173@e)))))) (set! y2d26@sanitize-binding (lambda (y318d@x y318e@src) (if (procedure? y318d@x) (cons* 'local-macro y318d@x y318e@src) (if (and (pair? y318d@x) (eq? (car y318d@x) 'macro!) (procedure? (cdr y318d@x))) (cons* 'local-macro! (cdr y318d@x) y318e@src) (if (and (pair? y318d@x) (eq? (car y318d@x) '$rtd)) y318d@x (assertion-violation 'expand '"invalid transformer" y318d@x)))))) (set! y2d28@make-variable-transformer (lambda (y3191@x) (if (procedure? y3191@x) (cons 'macro! y3191@x) (assertion-violation 'make-variable-transformer '"not a procedure" y3191@x)))) (set! y2d2a@variable-transformer? (lambda (y3193@x) (and (pair? y3193@x) (eq? (car y3193@x) 'macro!) (procedure? (cdr y3193@x))))) (set! y2d2c@variable-transformer-procedure (lambda (y3195@x) (if (y2d2a@variable-transformer? y3195@x) (cdr y3195@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" y3195@x)))) (set! y2d2e@make-eval-transformer (lambda (y3197@x) (y2d26@sanitize-binding (eval-core (y28ee@y28a6@expanded->core y3197@x)) y3197@x))) (set! y2e7f@parse-define (lambda (y3199@x) ((lambda (y319b@t) ((lambda (y319d@ls/false) (if (and y319d@ls/false (apply (lambda (y319f@id y31a0@fmls y31a1@b y31a2@b*) (y2cf0@id? y319f@id)) y319d@ls/false)) (apply (lambda (y31a7@id y31a8@fmls y31a9@b y31aa@b*) (begin (y2f21@verify-formals y31a8@fmls y3199@x) (values y31a7@id (cons 'defun (cons y31a8@fmls (cons y31a9@b y31aa@b*)))))) y319d@ls/false) ((lambda (y31af@t) ((lambda (y31b1@ls/false) (if (and y31b1@ls/false (apply (lambda (y31b3@id y31b4@val) (y2cf0@id? y31b3@id)) y31b1@ls/false)) (apply (lambda (y31b7@id y31b8@val) (values y31b7@id (cons 'expr y31b8@val))) y31b1@ls/false) ((lambda (y31bb@t) ((lambda (y31bd@ls/false) (if (and y31bd@ls/false (apply (lambda (y31bf@id) (y2cf0@id? y31bf@id)) y31bd@ls/false)) (apply (lambda (y31c1@id) (values y31c1@id (cons 'expr (y2eb1@bless '(void))))) y31bd@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y31bb@t))) (y2efb@syntax-dispatch y31bb@t '(_ any)))) y31af@t))) (y2efb@syntax-dispatch y31af@t '(_ any any)))) y319b@t))) (y2efb@syntax-dispatch y319b@t '(_ (any . any) any . each-any)))) y3199@x))) (set! y2e81@parse-define-syntax (lambda (y31c3@x) ((lambda (y31c5@t) ((lambda (y31c7@ls/false) (if (and y31c7@ls/false (apply (lambda (y31c9@id y31ca@val) (y2cf0@id? y31c9@id)) y31c7@ls/false)) (apply (lambda (y31cd@id y31ce@val) (values y31cd@id y31ce@val)) y31c7@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y31c5@t))) (y2efb@syntax-dispatch y31c5@t '(_ any any)))) y31c3@x))) (set! y2e83@scheme-stx-hashtable (make-eq-hashtable)) (set! y2e85@scheme-stx (lambda (y31d1@sym) (or (hashtable-ref y2e83@scheme-stx-hashtable y31d1@sym '#f) ((lambda (y31d3@subst) ((lambda (y31d5@stx) ((lambda (y31d7@stx) ((lambda () (begin (hashtable-set! y2e83@scheme-stx-hashtable y31d1@sym y31d7@stx) y31d7@stx)))) ((lambda (y31d9@t) (if y31d9@t ((lambda (y31db@x) ((lambda (y31dd@name y31de@label) (y2cdc@add-subst (y2c89@make-rib (list y31dd@name) (list y2c6c@top-mark*) (list y31de@label) '#f '#f) y31d5@stx)) (car y31db@x) (cdr y31db@x))) y31d9@t) y31d5@stx)) (assq y31d1@sym y31d3@subst)))) (y2cba@make-stx y31d1@sym y2c6c@top-mark* '() '()))) (y2ae9@y295f@library-subst (y2b0d@y29a7@find-library-by-name '(psyntax system $all))))))) (set! y2e87@lexical-var car) (set! y2e89@lexical-mutable? cdr) (set! y2e8b@set-lexical-mutable! set-cdr!) (set! y2e8d@add-lexical (lambda (y31e1@lab y31e2@lex y31e3@r) (cons (cons* y31e1@lab 'lexical y31e2@lex '#f) y31e3@r))) (set! y2e8f@add-lexicals (lambda (y31e7@lab* y31e8@lex* y31e9@r) (if (null? y31e7@lab*) y31e9@r (y2e8f@add-lexicals (cdr y31e7@lab*) (cdr y31e8@lex*) (y2e8d@add-lexical (car y31e7@lab*) (car y31e8@lex*) y31e9@r))))) (set! y2e91@letrec-helper (lambda (y31ed@e y31ee@r y31ef@mr y31f0@build) ((lambda (y31f5@t) ((lambda (y31f7@ls/false) (if y31f7@ls/false (apply (lambda (y31f9@lhs* y31fa@rhs* y31fb@b y31fc@b*) (if (not (y2cfa@valid-bound-ids? y31f9@lhs*)) (y2eb5@invalid-fmls-error y31ed@e y31f9@lhs*) ((lambda (y3201@lex* y3202@lab*) ((lambda (y3205@rib y3206@r) ((lambda (y3209@body y320a@rhs*) (y31f0@build '#f y3201@lex* y320a@rhs* y3209@body)) (y2f33@chi-internal (y2cdc@add-subst y3205@rib (cons y31fb@b y31fc@b*)) y3206@r y31ef@mr) (y2f19@chi-expr* (map (lambda (y320d@x) (y2cdc@add-subst y3205@rib y320d@x)) y31fa@rhs*) y3206@r y31ef@mr))) (y2cab@make-full-rib y31f9@lhs* y3202@lab*) (y2e8f@add-lexicals y3202@lab* y3201@lex* y31ee@r))) (map y2c70@gen-lexical y31f9@lhs*) (map y2c74@gen-label y31f9@lhs*)))) y31f7@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y31f5@t))) (y2efb@syntax-dispatch y31f5@t '(_ #(each (any any)) any . each-any)))) y31ed@e))) (set! y2e93@letrec-transformer (lambda (y320f@e y3210@r y3211@mr) (y2e91@letrec-helper y320f@e y3210@r y3211@mr y2c51@y2bc2@build-letrec))) (set! y2e95@letrec*-transformer (lambda (y3215@e y3216@r y3217@mr) (y2e91@letrec-helper y3215@e y3216@r y3217@mr y2c52@y2bc4@build-letrec*))) (set! y2e97@fluid-let-syntax-transformer (lambda (y321b@e y321c@r y321d@mr) ((lambda (y3222@lookup) (begin (set! y3222@lookup (lambda (y3235@x) (or (y2d0a@id->label y3235@x) (y2fe4@syntax-violation '#f '"unbound identifier" y321b@e y3235@x)))) ((lambda (y3223@t) ((lambda (y3225@ls/false) (if y3225@ls/false (apply (lambda (y3227@lhs* y3228@rhs* y3229@b y322a@b*) (if (not (y2cfa@valid-bound-ids? y3227@lhs*)) (y2eb5@invalid-fmls-error y321b@e y3227@lhs*) ((lambda (y322f@lab* y3230@rhs*) (y2f33@chi-internal (cons y3229@b y322a@b*) (append (map cons y322f@lab* y3230@rhs*) y321c@r) (append (map cons y322f@lab* y3230@rhs*) y321d@mr))) (map y3222@lookup y3227@lhs*) (map (lambda (y3233@x) (y2d2e@make-eval-transformer (y2f58@expand-transformer y3233@x y321d@mr))) y3228@rhs*)))) y3225@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3223@t))) (y2efb@syntax-dispatch y3223@t '(_ #(each (any any)) any . each-any)))) y321b@e))) '#f))) (set! y2e99@type-descriptor-transformer (lambda (y3237@e y3238@r y3239@mr) ((lambda (y323d@t) ((lambda (y323f@ls/false) (if (and y323f@ls/false (apply (lambda (y3241@id) (y2cf0@id? y3241@id)) y323f@ls/false)) (apply (lambda (y3243@id) ((lambda (y3245@lab) ((lambda (y3247@b) ((lambda (y3249@type) ((lambda () (begin (if (not y3245@lab) (y2d16@raise-unbound-error y3243@id) (void)) (if (not (and (eq? y3249@type '$rtd) (not (list? (y2d14@binding-value y3247@b))))) (y2fe4@syntax-violation '#f '"not a record type" y3237@e) (void)) (list 'quote (y2d14@binding-value y3247@b)))))) (y2d12@binding-type y3247@b))) (y2d0e@label->binding y3245@lab y3238@r))) (y2d0a@id->label y3243@id))) y323f@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y323d@t))) (y2efb@syntax-dispatch y323d@t '(_ any)))) y3237@e))) (set! y2e9b@record-type-descriptor-transformer (lambda (y324b@e y324c@r y324d@mr) ((lambda (y3251@t) ((lambda (y3253@ls/false) (if (and y3253@ls/false (apply (lambda (y3255@id) (y2cf0@id? y3255@id)) y3253@ls/false)) (apply (lambda (y3257@id) ((lambda (y3259@lab) ((lambda (y325b@b) ((lambda (y325d@type) ((lambda () (begin (if (not y3259@lab) (y2d16@raise-unbound-error y3257@id) (void)) (if (not (and (eq? y325d@type '$rtd) (list? (y2d14@binding-value y325b@b)))) (y2fe4@syntax-violation '#f '"not a record type" y324b@e) (void)) (y2f1d@chi-expr (car (y2d14@binding-value y325b@b)) y324c@r y324d@mr))))) (y2d12@binding-type y325b@b))) (y2d0e@label->binding y3259@lab y324c@r))) (y2d0a@id->label y3257@id))) y3253@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3251@t))) (y2efb@syntax-dispatch y3251@t '(_ any)))) y324b@e))) (set! y2e9d@record-constructor-descriptor-transformer (lambda (y325f@e y3260@r y3261@mr) ((lambda (y3265@t) ((lambda (y3267@ls/false) (if (and y3267@ls/false (apply (lambda (y3269@id) (y2cf0@id? y3269@id)) y3267@ls/false)) (apply (lambda (y326b@id) ((lambda (y326d@lab) ((lambda (y326f@b) ((lambda (y3271@type) ((lambda () (begin (if (not y326d@lab) (y2d16@raise-unbound-error y326b@id) (void)) (if (not (and (eq? y3271@type '$rtd) (list? (y2d14@binding-value y326f@b)))) (y2fe4@syntax-violation '#f '"invalid type" y325f@e) (void)) (y2f1d@chi-expr (cadr (y2d14@binding-value y326f@b)) y3260@r y3261@mr))))) (y2d12@binding-type y326f@b))) (y2d0e@label->binding y326d@lab y3260@r))) (y2d0a@id->label y326b@id))) y3267@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3265@t))) (y2efb@syntax-dispatch y3265@t '(_ any)))) y325f@e))) (set! y2e9f@when-macro (lambda (y3273@e) ((lambda (y3275@t) ((lambda (y3277@ls/false) (if y3277@ls/false (apply (lambda (y3279@test y327a@e y327b@e*) (y2eb1@bless (list 'if y3279@test (cons 'begin (cons y327a@e y327b@e*))))) y3277@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3275@t))) (y2efb@syntax-dispatch y3275@t '(_ any any . each-any)))) y3273@e))) (set! y2ea1@unless-macro (lambda (y327f@e) ((lambda (y3281@t) ((lambda (y3283@ls/false) (if y3283@ls/false (apply (lambda (y3285@test y3286@e y3287@e*) (y2eb1@bless (list 'if (list 'not y3285@test) (cons 'begin (cons y3286@e y3287@e*))))) y3283@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3281@t))) (y2efb@syntax-dispatch y3281@t '(_ any any . each-any)))) y327f@e))) (set! y2ea3@if-transformer (lambda (y328b@e y328c@r y328d@mr) ((lambda (y3291@t) ((lambda (y3293@ls/false) (if y3293@ls/false (apply (lambda (y3295@e0 y3296@e1 y3297@e2) (list 'if (y2f1d@chi-expr y3295@e0 y328c@r y328d@mr) (y2f1d@chi-expr y3296@e1 y328c@r y328d@mr) (y2f1d@chi-expr y3297@e2 y328c@r y328d@mr))) y3293@ls/false) ((lambda (y329b@t) ((lambda (y329d@ls/false) (if y329d@ls/false (apply (lambda (y329f@e0 y32a0@e1) (list 'if (y2f1d@chi-expr y329f@e0 y328c@r y328d@mr) (y2f1d@chi-expr y32a0@e1 y328c@r y328d@mr) (y2c50@y2bc0@build-void))) y329d@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y329b@t))) (y2efb@syntax-dispatch y329b@t '(_ any any)))) y3291@t))) (y2efb@syntax-dispatch y3291@t '(_ any any any)))) y328b@e))) (set! y2ea5@and-transformer (lambda (y32a3@e y32a4@r y32a5@mr) ((lambda (y32a9@t) ((lambda (y32ab@ls/false) (if y32ab@ls/false (apply (lambda (y32ad@e*) (cons 'and (y2f19@chi-expr* y32ad@e* y32a4@r y32a5@mr))) y32ab@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y32a9@t))) (y2efb@syntax-dispatch y32a9@t '(_ . each-any)))) y32a3@e))) (set! y2ea7@or-transformer (lambda (y32af@e y32b0@r y32b1@mr) ((lambda (y32b5@t) ((lambda (y32b7@ls/false) (if y32b7@ls/false (apply (lambda (y32b9@e*) (cons 'or (y2f19@chi-expr* y32b9@e* y32b0@r y32b1@mr))) y32b7@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y32b5@t))) (y2efb@syntax-dispatch y32b5@t '(_ . each-any)))) y32af@e))) (set! y2ea9@case-macro (lambda (y32bb@e) ((lambda (y32be@build-last y32c0@build-one) (begin (set! y32be@build-last (lambda (y32e5@cls) ((lambda (y32e7@t) ((lambda (y32e9@ls/false) (if y32e9@ls/false (apply (lambda (y32eb@e y32ec@e*) (cons 'begin (cons y32eb@e y32ec@e*))) y32e9@ls/false) ((lambda (y32ef@t) ((lambda (y32f1@ls/false) (if y32f1@ls/false (apply (lambda () (y32c0@build-one y32e5@cls '(if #f #f))) y32f1@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y32ef@t))) (y2efb@syntax-dispatch y32ef@t '_))) y32e7@t))) (y2efb@syntax-dispatch y32e7@t '(#(scheme-id else) any . each-any)))) y32e5@cls))) (set! y32c0@build-one (lambda (y32d7@cls y32d8@k) ((lambda (y32db@t) ((lambda (y32dd@ls/false) (if y32dd@ls/false (apply (lambda (y32df@d* y32e0@e y32e1@e*) (list 'if (list 'memv 't (list 'quote y32df@d*)) (cons 'begin (cons y32e0@e y32e1@e*)) y32d8@k)) y32dd@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y32db@t))) (y2efb@syntax-dispatch y32db@t '(each-any any . each-any)))) y32d7@cls))) ((lambda (y32c1@t) ((lambda (y32c3@ls/false) (if y32c3@ls/false (apply (lambda (y32c5@expr) (y2eb1@bless (cons 'let (cons (list (list 't y32c5@expr)) '((if #f #f)))))) y32c3@ls/false) ((lambda (y32c7@t) ((lambda (y32c9@ls/false) (if y32c9@ls/false (apply (lambda (y32cb@expr y32cc@cls y32cd@cls*) (y2eb1@bless (list 'let (list (list 't y32cb@expr)) ((letrec ((y32d1@f (lambda (y32d3@cls y32d4@cls*) (if (null? y32d4@cls*) (y32be@build-last y32d3@cls) (y32c0@build-one y32d3@cls (y32d1@f (car y32d4@cls*) (cdr y32d4@cls*))))))) y32d1@f) y32cc@cls y32cd@cls*)))) y32c9@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y32c7@t))) (y2efb@syntax-dispatch y32c7@t '(_ any any . each-any)))) y32c1@t))) (y2efb@syntax-dispatch y32c1@t '(_ any)))) y32bb@e))) '#f '#f))) (set! y2eab@quote-transformer (lambda (y32f3@e y32f4@r y32f5@mr) ((lambda (y32f9@t) ((lambda (y32fb@ls/false) (if y32fb@ls/false (apply (lambda (y32fd@datum) (list 'quote (y2d06@stx->datum y32fd@datum))) y32fb@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y32f9@t))) (y2efb@syntax-dispatch y32f9@t '(_ any)))) y32f3@e))) (set! y2ead@case-lambda-transformer (lambda (y32ff@e y3300@r y3301@mr) ((lambda (y3305@t) ((lambda (y3307@ls/false) (if y3307@ls/false (apply (lambda (y3309@fmls* y330a@b* y330b@b**) (call-with-values (lambda () (y2f25@chi-lambda-clause* y32ff@e y3309@fmls* (map cons y330a@b* y330b@b**) y3300@r y3301@mr)) (lambda (y3313@y3310 y3314@y3312) ((lambda (y3317@body* y3318@fmls*) (y2c4d@y2b8e@build-case-lambda '#f y3318@fmls* y3317@body*)) y3314@y3312 y3313@y3310)))) y3307@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3305@t))) (y2efb@syntax-dispatch y3305@t '(_ . #(each (any any . each-any)))))) y32ff@e))) (set! y2eaf@lambda-transformer (lambda (y331b@e y331c@r y331d@mr) ((lambda (y3321@t) ((lambda (y3323@ls/false) (if y3323@ls/false (apply (lambda (y3325@fmls y3326@b y3327@b*) (call-with-values (lambda () (y2f23@chi-lambda-clause y331b@e y3325@fmls (cons y3326@b y3327@b*) y331c@r y331d@mr)) (lambda (y332f@y332c y3330@y332e) ((lambda (y3333@body y3334@fmls) (y2c4c@y2b8c@build-lambda '#f y3334@fmls y3333@body)) y3330@y332e y332f@y332c)))) y3323@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3321@t))) (y2efb@syntax-dispatch y3321@t '(_ any any . each-any)))) y331b@e))) (set! y2eb1@bless (lambda (y3337@x) (y2cd8@mkstx ((letrec ((y3339@f (lambda (y333b@x) (if (y2cb8@stx? y333b@x) y333b@x (if (pair? y333b@x) (cons (y3339@f (car y333b@x)) (y3339@f (cdr y333b@x))) (if (symbol? y333b@x) (y2e85@scheme-stx y333b@x) (if (vector? y333b@x) (vector-map y3339@f y333b@x) y333b@x))))))) y3339@f) y3337@x) '() '() '()))) (set! y2eb3@with-syntax-macro (lambda (y333d@e) ((lambda (y333f@t) ((lambda (y3341@ls/false) (if y3341@ls/false (apply (lambda (y3343@pat* y3344@expr* y3345@b y3346@b*) ((lambda (y334b@idn*) (begin (y2f21@verify-formals (map car y334b@idn*) y333d@e) ((lambda (y334d@t*) (y2eb1@bless (list 'let (map list y334d@t* y3344@expr*) ((letrec ((y334f@f (lambda (y3351@pat* y3352@t*) (if (null? y3351@pat*) (cons 'begin (cons '#f (cons y3345@b y3346@b*))) (list 'syntax-case (car y3352@t*) '() (list (car y3351@pat*) (y334f@f (cdr y3351@pat*) (cdr y3352@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car y3351@pat*)) (car y3352@t*)))))))) y334f@f) y3343@pat* y334d@t*)))) (y2fd2@generate-temporaries y3344@expr*)))) ((letrec ((y3355@f (lambda (y3357@pat*) (if (null? y3357@pat*) '() (call-with-values (lambda () (y2ef9@convert-pattern (car y3357@pat*) '())) (lambda (y335d@y335a y335e@y335c) ((lambda (y3361@idn* y3362@pat) (append y3361@idn* (y3355@f (cdr y3357@pat*)))) y335e@y335c y335d@y335a))))))) y3355@f) y3343@pat*))) y3341@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y333f@t))) (y2efb@syntax-dispatch y333f@t '(_ #(each (any any)) any . each-any)))) y333d@e))) (set! y2eb5@invalid-fmls-error (lambda (y3365@stx y3366@fmls) ((lambda (y3369@t) ((lambda (y336b@ls/false) (if y336b@ls/false (apply (lambda (y336d@id* y336e@last) ((letrec ((y3371@f (lambda (y3373@id*) (if (null? y3373@id*) (values) (if (not (y2cf0@id? (car y3373@id*))) (y2fe4@syntax-violation '#f '"not an identifier" y3365@stx (car y3373@id*)) (begin (y3371@f (cdr y3373@id*)) (if (y2cfe@bound-id-member? (car y3373@id*) (cdr y3373@id*)) (y2fe4@syntax-violation '#f '"duplicate binding" y3365@stx (car y3373@id*)) (void)))))))) y3371@f) (if (y2cf0@id? y336e@last) (cons y336e@last y336d@id*) (if (y2ce6@syntax-null? y336e@last) y336d@id* (y2fe4@syntax-violation '#f '"not an identifier" y3365@stx y336e@last))))) y336b@ls/false) ((lambda (y3375@t) ((lambda (y3377@ls/false) (if y3377@ls/false (apply (lambda () (y2fe4@syntax-violation '#f '"malformed binding form" y3365@stx y3366@fmls)) y3377@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3375@t))) (y2efb@syntax-dispatch y3375@t '_))) y3369@t))) (y2efb@syntax-dispatch y3369@t '#(each+ any () any)))) y3366@fmls))) (set! y2eb7@let-macro (lambda (y3379@stx) ((lambda (y337b@t) ((lambda (y337d@ls/false) (if y337d@ls/false (apply (lambda (y337f@lhs* y3380@rhs* y3381@b y3382@b*) (if (y2cfa@valid-bound-ids? y337f@lhs*) (y2eb1@bless (cons (cons 'lambda (cons y337f@lhs* (cons y3381@b y3382@b*))) y3380@rhs*)) (y2eb5@invalid-fmls-error y3379@stx y337f@lhs*))) y337d@ls/false) ((lambda (y3387@t) ((lambda (y3389@ls/false) (if (and y3389@ls/false (apply (lambda (y338b@f y338c@lhs* y338d@rhs* y338e@b y338f@b*) (y2cf0@id? y338b@f)) y3389@ls/false)) (apply (lambda (y3395@f y3396@lhs* y3397@rhs* y3398@b y3399@b*) (if (y2cfa@valid-bound-ids? y3396@lhs*) (y2eb1@bless (cons (list 'letrec (list (list y3395@f (cons 'lambda (cons y3396@lhs* (cons y3398@b y3399@b*))))) y3395@f) y3397@rhs*)) (y2eb5@invalid-fmls-error y3379@stx y3396@lhs*))) y3389@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3387@t))) (y2efb@syntax-dispatch y3387@t '(_ any #(each (any any)) any . each-any)))) y337b@t))) (y2efb@syntax-dispatch y337b@t '(_ #(each (any any)) any . each-any)))) y3379@stx))) (set! y2eb9@let-values-macro (lambda (y339f@stx) ((lambda (y33a2@rename y33a4@rename*) (begin (set! y33a2@rename (lambda (y3407@x y3408@old* y3409@new*) (begin (if (not (y2cf0@id? y3407@x)) (y2fe4@syntax-violation '#f '"not an indentifier" y339f@stx y3407@x) (void)) (if (y2cfe@bound-id-member? y3407@x y3408@old*) (y2fe4@syntax-violation '#f '"duplicate binding" y339f@stx y3407@x) (void)) ((lambda (y340d@y) (values y340d@y (cons y3407@x y3408@old*) (cons y340d@y y3409@new*))) (gensym (y2fea@syntax->datum y3407@x)))))) (set! y33a4@rename* (lambda (y33f5@x* y33f6@old* y33f7@new*) (if (null? y33f5@x*) (values '() y33f6@old* y33f7@new*) (call-with-values (lambda () (y33a2@rename (car y33f5@x*) y33f6@old* y33f7@new*)) (lambda (y33fb@x y33fc@old* y33fd@new*) (call-with-values (lambda () (y33a4@rename* (cdr y33f5@x*) y33fc@old* y33fd@new*)) (lambda (y3401@x* y3402@old* y3403@new*) (values (cons y33fb@x y3401@x*) y3402@old* y3403@new*)))))))) ((lambda (y33a5@t) ((lambda (y33a7@ls/false) (if y33a7@ls/false (apply (lambda (y33a9@b y33aa@b*) (cons* (y2eb1@bless 'let) '() y33a9@b y33aa@b*)) y33a7@ls/false) ((lambda (y33ad@t) ((lambda (y33af@ls/false) (if y33af@ls/false (apply (lambda (y33b1@lhs* y33b2@rhs* y33b3@b y33b4@b*) (y2eb1@bless ((letrec ((y33b9@f (lambda (y33bb@lhs* y33bc@rhs* y33bd@old* y33be@new*) (if (null? y33bb@lhs*) (cons 'let (cons (map list y33bd@old* y33be@new*) (cons y33b3@b y33b4@b*))) ((lambda (y33c3@t) ((lambda (y33c5@ls/false) (if y33c5@ls/false (apply (lambda (y33c7@x*) (call-with-values (lambda () (y33a4@rename* y33c7@x* y33bd@old* y33be@new*)) (lambda (y33cf@y33ca y33d0@y33cc y33d1@y33ce) ((lambda (y33d5@new* y33d6@old* y33d7@y*) (list 'call-with-values (list 'lambda '() (car y33bc@rhs*)) (list 'lambda y33d7@y* (y33b9@f (cdr y33bb@lhs*) (cdr y33bc@rhs*) y33d6@old* y33d5@new*)))) y33d1@y33ce y33d0@y33cc y33cf@y33ca)))) y33c5@ls/false) ((lambda (y33db@t) ((lambda (y33dd@ls/false) (if y33dd@ls/false (apply (lambda (y33df@x* y33e0@x) (call-with-values (lambda () (y33a2@rename y33e0@x y33bd@old* y33be@new*)) (lambda (y33e3@y y33e4@old* y33e5@new*) (call-with-values (lambda () (y33a4@rename* y33df@x* y33e4@old* y33e5@new*)) (lambda (y33e9@y* y33ea@old* y33eb@new*) (list 'call-with-values (list 'lambda '() (car y33bc@rhs*)) (list 'lambda (append y33e9@y* y33e3@y) (y33b9@f (cdr y33bb@lhs*) (cdr y33bc@rhs*) y33ea@old* y33eb@new*)))))))) y33dd@ls/false) ((lambda (y33ef@t) ((lambda (y33f1@ls/false) (if y33f1@ls/false (apply (lambda (y33f3@others) (y2fe4@syntax-violation '#f '"malformed bindings" y339f@stx y33f3@others)) y33f1@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y33ef@t))) (y2efb@syntax-dispatch y33ef@t 'any))) y33db@t))) (y2efb@syntax-dispatch y33db@t '#(each+ any () any)))) y33c3@t))) (y2efb@syntax-dispatch y33c3@t 'each-any))) (car y33bb@lhs*)))))) y33b9@f) y33b1@lhs* y33b2@rhs* '() '()))) y33af@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y33ad@t))) (y2efb@syntax-dispatch y33ad@t '(_ #(each (any any)) any . each-any)))) y33a5@t))) (y2efb@syntax-dispatch y33a5@t '(_ () any . each-any)))) y339f@stx))) '#f '#f))) (set! y2ebb@let*-values-macro (lambda (y340f@stx) ((lambda (y3412@check) (begin (set! y3412@check (lambda (y3441@x*) (if (not (null? y3441@x*)) ((lambda (y3443@x) (begin (if (not (y2cf0@id? y3443@x)) (y2fe4@syntax-violation '#f '"not an identifier" y340f@stx y3443@x) (void)) (y3412@check (cdr y3441@x*)) (if (y2cfe@bound-id-member? y3443@x (cdr y3441@x*)) (y2fe4@syntax-violation '#f '"duplicate identifier" y340f@stx y3443@x) (void)))) (car y3441@x*)) (void)))) ((lambda (y3413@t) ((lambda (y3415@ls/false) (if y3415@ls/false (apply (lambda (y3417@b y3418@b*) (cons* (y2eb1@bless 'let) '() y3417@b y3418@b*)) y3415@ls/false) ((lambda (y341b@t) ((lambda (y341d@ls/false) (if y341d@ls/false (apply (lambda (y341f@lhs* y3420@rhs* y3421@b y3422@b*) (y2eb1@bless ((letrec ((y3427@f (lambda (y3429@lhs* y342a@rhs*) (if (null? y3429@lhs*) (cons 'begin (cons y3421@b y3422@b*)) ((lambda (y342d@t) ((lambda (y342f@ls/false) (if y342f@ls/false (apply (lambda (y3431@x*) (begin (y3412@check y3431@x*) (list 'call-with-values (list 'lambda '() (car y342a@rhs*)) (list 'lambda y3431@x* (y3427@f (cdr y3429@lhs*) (cdr y342a@rhs*)))))) y342f@ls/false) ((lambda (y3433@t) ((lambda (y3435@ls/false) (if y3435@ls/false (apply (lambda (y3437@x* y3438@x) (begin (y3412@check (cons y3438@x y3437@x*)) (list 'call-with-values (list 'lambda '() (car y342a@rhs*)) (list 'lambda (append y3437@x* y3438@x) (y3427@f (cdr y3429@lhs*) (cdr y342a@rhs*)))))) y3435@ls/false) ((lambda (y343b@t) ((lambda (y343d@ls/false) (if y343d@ls/false (apply (lambda (y343f@others) (y2fe4@syntax-violation '#f '"malformed bindings" y340f@stx y343f@others)) y343d@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y343b@t))) (y2efb@syntax-dispatch y343b@t 'any))) y3433@t))) (y2efb@syntax-dispatch y3433@t '#(each+ any () any)))) y342d@t))) (y2efb@syntax-dispatch y342d@t 'each-any))) (car y3429@lhs*)))))) y3427@f) y341f@lhs* y3420@rhs*))) y341d@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y341b@t))) (y2efb@syntax-dispatch y341b@t '(_ #(each (any any)) any . each-any)))) y3413@t))) (y2efb@syntax-dispatch y3413@t '(_ () any . each-any)))) y340f@stx))) '#f))) (set! y2ebd@trace-lambda-macro (lambda (y3445@stx) ((lambda (y3447@t) ((lambda (y3449@ls/false) (if y3449@ls/false (apply (lambda (y344b@who y344c@fmls y344d@b y344e@b*) (if (y2cfa@valid-bound-ids? y344c@fmls) (y2eb1@bless (list 'make-traced-procedure (list 'quote y344b@who) (cons 'lambda (cons y344c@fmls (cons y344d@b y344e@b*))))) (y2eb5@invalid-fmls-error y3445@stx y344c@fmls))) y3449@ls/false) ((lambda (y3453@t) ((lambda (y3455@ls/false) (if y3455@ls/false (apply (lambda (y3457@who y3458@fmls y3459@last y345a@b y345b@b*) (if (y2cfa@valid-bound-ids? (cons y3459@last y3458@fmls)) (y2eb1@bless (list 'make-traced-procedure (list 'quote y3457@who) (cons 'lambda (cons (append y3458@fmls y3459@last) (cons y345a@b y345b@b*))))) (y2eb5@invalid-fmls-error y3445@stx (append y3458@fmls y3459@last)))) y3455@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3453@t))) (y2efb@syntax-dispatch y3453@t '(_ any #(each+ any () any) any . each-any)))) y3447@t))) (y2efb@syntax-dispatch y3447@t '(_ any each-any any . each-any)))) y3445@stx))) (set! y2ebf@trace-define-macro (lambda (y3461@stx) ((lambda (y3463@t) ((lambda (y3465@ls/false) (if y3465@ls/false (apply (lambda (y3467@who y3468@fmls y3469@b y346a@b*) (if (y2cfa@valid-bound-ids? y3468@fmls) (y2eb1@bless (list 'define y3467@who (list 'make-traced-procedure (list 'quote y3467@who) (cons 'lambda (cons y3468@fmls (cons y3469@b y346a@b*)))))) (y2eb5@invalid-fmls-error y3461@stx y3468@fmls))) y3465@ls/false) ((lambda (y346f@t) ((lambda (y3471@ls/false) (if y3471@ls/false (apply (lambda (y3473@who y3474@fmls y3475@last y3476@b y3477@b*) (if (y2cfa@valid-bound-ids? (cons y3475@last y3474@fmls)) (y2eb1@bless (list 'define y3473@who (list 'make-traced-procedure (list 'quote y3473@who) (cons 'lambda (cons (append y3474@fmls y3475@last) (cons y3476@b y3477@b*)))))) (y2eb5@invalid-fmls-error y3461@stx (append y3474@fmls y3475@last)))) y3471@ls/false) ((lambda (y347d@t) ((lambda (y347f@ls/false) (if y347f@ls/false (apply (lambda (y3481@who y3482@expr) (if (y2cf0@id? y3481@who) (y2eb1@bless (list 'define y3481@who (list 'let (list (list 'v y3482@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote y3481@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (y2fe4@syntax-violation '#f '"invalid name" y3461@stx))) y347f@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y347d@t))) (y2efb@syntax-dispatch y347d@t '(_ any any)))) y346f@t))) (y2efb@syntax-dispatch y346f@t '(_ (any . #(each+ any () any)) any . each-any)))) y3463@t))) (y2efb@syntax-dispatch y3463@t '(_ (any . each-any) any . each-any)))) y3461@stx))) (set! y2ec1@trace-define-syntax-macro (lambda (y3485@stx) ((lambda (y3487@t) ((lambda (y3489@ls/false) (if y3489@ls/false (apply (lambda (y348b@who y348c@expr) (if (y2cf0@id? y348b@who) (y2eb1@bless (list 'define-syntax y348b@who (list 'make-traced-macro (list 'quote y348b@who) y348c@expr))) (y2fe4@syntax-violation '#f '"invalid name" y3485@stx))) y3489@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3487@t))) (y2efb@syntax-dispatch y3487@t '(_ any any)))) y3485@stx))) (set! y2ec3@trace-let/rec-syntax (lambda (y348f@who) (lambda (y3491@stx) ((lambda (y3493@t) ((lambda (y3495@ls/false) (if y3495@ls/false (apply (lambda (y3497@lhs* y3498@rhs* y3499@b y349a@b*) (if (y2cfa@valid-bound-ids? y3497@lhs*) ((lambda (y349f@rhs*) (y2eb1@bless (cons y348f@who (cons (map list y3497@lhs* y349f@rhs*) (cons y3499@b y349a@b*))))) (map (lambda (y34a1@lhs y34a2@rhs) (list 'make-traced-macro (list 'quote y34a1@lhs) y34a2@rhs)) y3497@lhs* y3498@rhs*)) (y2eb5@invalid-fmls-error y3491@stx y3497@lhs*))) y3495@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3493@t))) (y2efb@syntax-dispatch y3493@t '(_ #(each (any any)) any . each-any)))) y3491@stx)))) (set! y2ec5@trace-let-syntax-macro (y2ec3@trace-let/rec-syntax 'let-syntax)) (set! y2ec7@trace-letrec-syntax-macro (y2ec3@trace-let/rec-syntax 'letrec-syntax)) (set! y2ec9@guard-macro (lambda (y34a5@x) ((lambda (y34a8@gen-clauses) (begin (set! y34a8@gen-clauses (lambda (y34bf@con y34c0@outerk y34c1@clause*) ((lambda (y34c6@f y34c8@f*) (begin (set! y34c6@f (lambda (y34ff@x y3500@k) ((lambda (y3503@t) ((lambda (y3505@ls/false) (if y3505@ls/false (apply (lambda (y3507@e y3508@p) ((lambda (y350b@t) (list 'let (list (list y350b@t y3507@e)) (list 'if y350b@t (list y3508@p y350b@t) y3500@k))) (gensym))) y3505@ls/false) ((lambda (y350d@t) ((lambda (y350f@ls/false) (if y350f@ls/false (apply (lambda (y3511@e) ((lambda (y3513@t) (list 'let (list (list y3513@t y3511@e)) (list 'if y3513@t y3513@t y3500@k))) (gensym))) y350f@ls/false) ((lambda (y3515@t) ((lambda (y3517@ls/false) (if y3517@ls/false (apply (lambda (y3519@e y351a@v y351b@v*) (list 'if y3519@e (cons 'begin (cons y351a@v y351b@v*)) y3500@k)) y3517@ls/false) ((lambda (y351f@t) ((lambda (y3521@ls/false) (if y3521@ls/false (apply (lambda () (y2fe4@syntax-violation '#f '"invalid guard clause" y34ff@x)) y3521@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y351f@t))) (y2efb@syntax-dispatch y351f@t '_))) y3515@t))) (y2efb@syntax-dispatch y3515@t '(any any . each-any)))) y350d@t))) (y2efb@syntax-dispatch y350d@t '(any)))) y3503@t))) (y2efb@syntax-dispatch y3503@t '(any #(scheme-id =>) any)))) y34ff@x))) (set! y34c8@f* (lambda (y34d5@x*) ((lambda (y34d7@t) ((lambda (y34d9@ls/false) (if y34d9@ls/false (apply (lambda () ((lambda (y34db@g) (values (list y34db@g (list 'lambda '() (list 'raise-continuable y34bf@con))) y34db@g)) (gensym))) y34d9@ls/false) ((lambda (y34dd@t) ((lambda (y34df@ls/false) (if y34df@ls/false (apply (lambda (y34e1@e y34e2@e*) (values (cons 'begin (cons y34e1@e y34e2@e*)) '#f)) y34df@ls/false) ((lambda (y34e5@t) ((lambda (y34e7@ls/false) (if y34e7@ls/false (apply (lambda (y34e9@cls y34ea@cls*) (call-with-values (lambda () (y34c8@f* y34ea@cls*)) (lambda (y34f1@y34ee y34f2@y34f0) ((lambda (y34f5@g y34f6@e) (values (y34c6@f y34e9@cls y34f6@e) y34f5@g)) y34f2@y34f0 y34f1@y34ee)))) y34e7@ls/false) ((lambda (y34f9@t) ((lambda (y34fb@ls/false) (if y34fb@ls/false (apply (lambda (y34fd@others) (y2fe4@syntax-violation '#f '"invalid guard clause" y34fd@others)) y34fb@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y34f9@t))) (y2efb@syntax-dispatch y34f9@t 'any))) y34e5@t))) (y2efb@syntax-dispatch y34e5@t '(any . any)))) y34dd@t))) (y2efb@syntax-dispatch y34dd@t '((#(scheme-id else) any . each-any))))) y34d7@t))) (y2efb@syntax-dispatch y34d7@t '()))) y34d5@x*))) (call-with-values (lambda () (y34c8@f* y34c1@clause*)) (lambda (y34cd@y34ca y34ce@y34cc) ((lambda (y34d1@raisek y34d2@code) (if y34d1@raisek (list (list 'call/cc (list 'lambda (list y34d1@raisek) (list y34c0@outerk (list 'lambda '() y34d2@code))))) (list y34c0@outerk (list 'lambda '() y34d2@code)))) y34ce@y34cc y34cd@y34ca))))) '#f '#f))) ((lambda (y34a9@t) ((lambda (y34ab@ls/false) (if (and y34ab@ls/false (apply (lambda (y34ad@con y34ae@clause* y34af@b y34b0@b*) (y2cf0@id? y34ad@con)) y34ab@ls/false)) (apply (lambda (y34b5@con y34b6@clause* y34b7@b y34b8@b*) ((lambda (y34bd@outerk) (y2eb1@bless (list (list 'call/cc (list 'lambda (list y34bd@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list y34b5@con) (y34a8@gen-clauses y34b5@con y34bd@outerk y34b6@clause*)) (cons 'lambda (cons '() (cons y34b7@b y34b8@b*)))))))))) (gensym))) y34ab@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y34a9@t))) (y2efb@syntax-dispatch y34a9@t '(_ (any . each-any) any . each-any)))) y34a5@x))) '#f))) (set! y2ecb@define-enumeration-macro (lambda (y3523@stx) ((lambda (y3526@set? y3528@remove-dups) (begin (set! y3526@set? (lambda (y353f@x) (or (null? y353f@x) (and (not (memq (car y353f@x) (cdr y353f@x))) (y3526@set? (cdr y353f@x)))))) (set! y3528@remove-dups (lambda (y353d@ls) (if (null? y353d@ls) '() (cons (car y353d@ls) (y3528@remove-dups (remq (car y353d@ls) (cdr y353d@ls))))))) ((lambda (y3529@t) ((lambda (y352b@ls/false) (if (and y352b@ls/false (apply (lambda (y352d@name y352e@id* y352f@maker) (and (y2cf0@id? y352d@name) (y2cf0@id? y352f@maker) (for-all y2cf0@id? y352e@id*))) y352b@ls/false)) (apply (lambda (y3533@name y3534@id* y3535@maker) ((lambda (y3539@name* y353a@mk) (y2eb1@bless (list 'begin (list 'define y353a@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote y3539@name*)))) (list 'define-syntax y3533@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote y3539@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote y3533@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax y3535@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote y3535@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote y3539@name*)) (cons 'syntax-violation (cons (list 'quote y3535@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons y353a@mk '('(n* ...)))))))))))) (y3528@remove-dups (y2fea@syntax->datum y3534@id*)) (gensym))) y352b@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3529@t))) (y2efb@syntax-dispatch y3529@t '(_ any each-any any)))) y3523@stx))) '#f '#f))) (set! y2ecd@time-macro (lambda (y3541@stx) ((lambda (y3543@t) ((lambda (y3545@ls/false) (if y3545@ls/false (apply (lambda (y3547@expr) (y2eb1@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() y3547@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) y3545@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3543@t))) (y2efb@syntax-dispatch y3543@t '(_ any)))) y3541@stx))) (set! y2ecf@delay-macro (lambda (y3549@stx) ((lambda (y354b@t) ((lambda (y354d@ls/false) (if y354d@ls/false (apply (lambda (y354f@expr) (y2eb1@bless (list 'make-promise (list 'lambda '() y354f@expr)))) y354d@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y354b@t))) (y2efb@syntax-dispatch y354b@t '(_ any)))) y3549@stx))) (set! y2ed1@assert-macro (lambda (y3551@stx) ((lambda (y3553@t) ((lambda (y3555@ls/false) (if y3555@ls/false (apply (lambda (y3557@expr) ((lambda (y3559@pos) (y2eb1@bless (list 'unless y3557@expr (list 'assertion-error (list 'quote y3557@expr) (list 'quote y3559@pos))))) (or (y2fdc@expression-position y3551@stx) (y2fdc@expression-position y3557@expr)))) y3555@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3553@t))) (y2efb@syntax-dispatch y3553@t '(_ any)))) y3551@stx))) (set! y2ed3@endianness-macro (lambda (y355b@stx) ((lambda (y355d@t) ((lambda (y355f@ls/false) (if y355f@ls/false (apply (lambda (y3561@e) ((lambda (y3563@t) (if (memv y3563@t '(little)) (y2eb1@bless ''little) (if (memv y3563@t '(big)) (y2eb1@bless ''big) (y2fe4@syntax-violation '#f '"endianness must be big or little" y355b@stx)))) (y2fea@syntax->datum y3561@e))) y355f@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y355d@t))) (y2efb@syntax-dispatch y355d@t '(_ any)))) y355b@stx))) (set! y2ed5@identifier-syntax-macro (lambda (y3565@stx) ((lambda (y3567@t) ((lambda (y3569@ls/false) (if y3569@ls/false (apply (lambda (y356b@expr) (y2eb1@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax y356b@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax y356b@expr) '((syntax (e* ...)))))))))) y3569@ls/false) ((lambda (y356d@t) ((lambda (y356f@ls/false) (if (and y356f@ls/false (apply (lambda (y3571@id1 y3572@expr1 y3573@id2 y3574@expr2 y3575@expr3) (and (y2cf0@id? y3571@id1) (y2cf0@id? y3573@id2) (y2cf0@id? y3574@expr2))) y356f@ls/false)) (apply (lambda (y357b@id1 y357c@expr1 y357d@id2 y357e@expr2 y357f@expr3) (y2eb1@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax y357c@expr1)) (list (list 'set! 'id y357e@expr2) (list 'syntax y357f@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons y357c@expr1 '(e* ...))))))))) y356f@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y356d@t))) (y2efb@syntax-dispatch y356d@t '(_ (any any) ((#(scheme-id set!) any any) any))))) y3567@t))) (y2efb@syntax-dispatch y3567@t '(_ any)))) y3565@stx))) (set! y2ed7@do-macro (lambda (y3585@stx) ((lambda (y3588@bind) (begin (set! y3588@bind (lambda (y359f@x) ((lambda (y35a1@t) ((lambda (y35a3@ls/false) (if y35a3@ls/false (apply (lambda (y35a5@x y35a6@init) (list y35a5@x y35a6@init y35a5@x)) y35a3@ls/false) ((lambda (y35a9@t) ((lambda (y35ab@ls/false) (if y35ab@ls/false (apply (lambda (y35ad@x y35ae@init y35af@step) (list y35ad@x y35ae@init y35af@step)) y35ab@ls/false) ((lambda (y35b3@t) ((lambda (y35b5@ls/false) (if y35b5@ls/false (apply (lambda () (y2fe4@syntax-violation '#f '"invalid binding" y3585@stx)) y35b5@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y35b3@t))) (y2efb@syntax-dispatch y35b3@t '_))) y35a9@t))) (y2efb@syntax-dispatch y35a9@t '(any any any)))) y35a1@t))) (y2efb@syntax-dispatch y35a1@t '(any any)))) y359f@x))) ((lambda (y3589@t) ((lambda (y358b@ls/false) (if y358b@ls/false (apply (lambda (y358d@binding* y358e@test y358f@expr* y3590@command*) ((lambda (y3595@t) ((lambda (y3597@ls/false) (if y3597@ls/false (apply (lambda (y3599@x* y359a@init* y359b@step*) (if (y2cfa@valid-bound-ids? y3599@x*) (y2eb1@bless (list 'letrec (list (list 'loop (list 'lambda y3599@x* (list 'if y358e@test (cons 'begin (cons '(if #f #f) y358f@expr*)) (cons 'begin (append y3590@command* (list (cons 'loop y359b@step*)))))))) (cons 'loop y359a@init*))) (y2fe4@syntax-violation '#f '"invalid bindings" y3585@stx))) y3597@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3595@t))) (y2efb@syntax-dispatch y3595@t '#(each (any any any))))) (map y3588@bind y358d@binding*))) y358b@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3589@t))) (y2efb@syntax-dispatch y3589@t '(_ each-any (any . each-any) . each-any)))) y3585@stx))) '#f))) (set! y2ed9@let*-macro (lambda (y35b7@stx) ((lambda (y35b9@t) ((lambda (y35bb@ls/false) (if (and y35bb@ls/false (apply (lambda (y35bd@lhs* y35be@rhs* y35bf@b y35c0@b*) (for-all y2cf0@id? y35bd@lhs*)) y35bb@ls/false)) (apply (lambda (y35c5@lhs* y35c6@rhs* y35c7@b y35c8@b*) (y2eb1@bless ((letrec ((y35cd@f (lambda (y35cf@x*) (if (null? y35cf@x*) (cons 'let (cons '() (cons y35c7@b y35c8@b*))) (list 'let (list (car y35cf@x*)) (y35cd@f (cdr y35cf@x*))))))) y35cd@f) (map list y35c5@lhs* y35c6@rhs*)))) y35bb@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y35b9@t))) (y2efb@syntax-dispatch y35b9@t '(_ #(each (any any)) any . each-any)))) y35b7@stx))) (set! y2edb@or-macro (lambda (y35d1@stx) ((lambda (y35d3@t) ((lambda (y35d5@ls/false) (if y35d5@ls/false (apply (lambda () '#f) y35d5@ls/false) ((lambda (y35d7@t) ((lambda (y35d9@ls/false) (if y35d9@ls/false (apply (lambda (y35db@e y35dc@e*) (y2eb1@bless ((letrec ((y35df@f (lambda (y35e1@e y35e2@e*) (if (null? y35e2@e*) (list 'begin '#f y35e1@e) (list 'let (list (list 't y35e1@e)) (list 'if 't 't (y35df@f (car y35e2@e*) (cdr y35e2@e*)))))))) y35df@f) y35db@e y35dc@e*))) y35d9@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y35d7@t))) (y2efb@syntax-dispatch y35d7@t '(_ any . each-any)))) y35d3@t))) (y2efb@syntax-dispatch y35d3@t '(_)))) y35d1@stx))) (set! y2edd@and-macro (lambda (y35e5@stx) ((lambda (y35e7@t) ((lambda (y35e9@ls/false) (if y35e9@ls/false (apply (lambda () '#t) y35e9@ls/false) ((lambda (y35eb@t) ((lambda (y35ed@ls/false) (if y35ed@ls/false (apply (lambda (y35ef@e y35f0@e*) (y2eb1@bless ((letrec ((y35f3@f (lambda (y35f5@e y35f6@e*) (if (null? y35f6@e*) (list 'begin '#f y35f5@e) (cons 'if (cons y35f5@e (cons (y35f3@f (car y35f6@e*) (cdr y35f6@e*)) '(#f)))))))) y35f3@f) y35ef@e y35f0@e*))) y35ed@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y35eb@t))) (y2efb@syntax-dispatch y35eb@t '(_ any . each-any)))) y35e7@t))) (y2efb@syntax-dispatch y35e7@t '(_)))) y35e5@stx))) (set! y2edf@cond-macro (lambda (y35f9@stx) ((lambda (y35fb@t) ((lambda (y35fd@ls/false) (if y35fd@ls/false (apply (lambda (y35ff@cls y3600@cls*) (y2eb1@bless ((letrec ((y3603@f (lambda (y3605@cls y3606@cls*) (if (null? y3606@cls*) ((lambda (y3609@t) ((lambda (y360b@ls/false) (if y360b@ls/false (apply (lambda (y360d@e y360e@e*) (cons 'begin (cons y360d@e y360e@e*))) y360b@ls/false) ((lambda (y3611@t) ((lambda (y3613@ls/false) (if y3613@ls/false (apply (lambda (y3615@e y3616@p) (list 'let (list (list 't y3615@e)) (list 'if 't (cons y3616@p '(t))))) y3613@ls/false) ((lambda (y3619@t) ((lambda (y361b@ls/false) (if y361b@ls/false (apply (lambda (y361d@e) (cons 'or (cons y361d@e '((if #f #f))))) y361b@ls/false) ((lambda (y361f@t) ((lambda (y3621@ls/false) (if y3621@ls/false (apply (lambda (y3623@e y3624@e*) (list 'if y3623@e (cons 'begin y3624@e*))) y3621@ls/false) ((lambda (y3627@t) ((lambda (y3629@ls/false) (if y3629@ls/false (apply (lambda () (y2fe4@syntax-violation '#f '"invalid last clause" y35f9@stx)) y3629@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3627@t))) (y2efb@syntax-dispatch y3627@t '_))) y361f@t))) (y2efb@syntax-dispatch y361f@t '(any . each-any)))) y3619@t))) (y2efb@syntax-dispatch y3619@t '(any)))) y3611@t))) (y2efb@syntax-dispatch y3611@t '(any #(scheme-id =>) any)))) y3609@t))) (y2efb@syntax-dispatch y3609@t '(#(scheme-id else) any . each-any)))) y3605@cls) ((lambda (y362b@t) ((lambda (y362d@ls/false) (if y362d@ls/false (apply (lambda (y362f@e y3630@e*) (y2fe4@syntax-violation '#f '"incorrect position of keyword else" y35f9@stx)) y362d@ls/false) ((lambda (y3633@t) ((lambda (y3635@ls/false) (if y3635@ls/false (apply (lambda (y3637@e y3638@p) (list 'let (list (list 't y3637@e)) (list 'if 't (cons y3638@p '(t)) (y3603@f (car y3606@cls*) (cdr y3606@cls*))))) y3635@ls/false) ((lambda (y363b@t) ((lambda (y363d@ls/false) (if y363d@ls/false (apply (lambda (y363f@e) (list 'or y363f@e (y3603@f (car y3606@cls*) (cdr y3606@cls*)))) y363d@ls/false) ((lambda (y3641@t) ((lambda (y3643@ls/false) (if y3643@ls/false (apply (lambda (y3645@e y3646@e*) (list 'if y3645@e (cons 'begin y3646@e*) (y3603@f (car y3606@cls*) (cdr y3606@cls*)))) y3643@ls/false) ((lambda (y3649@t) ((lambda (y364b@ls/false) (if y364b@ls/false (apply (lambda () (y2fe4@syntax-violation '#f '"invalid last clause" y35f9@stx)) y364b@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3649@t))) (y2efb@syntax-dispatch y3649@t '_))) y3641@t))) (y2efb@syntax-dispatch y3641@t '(any . each-any)))) y363b@t))) (y2efb@syntax-dispatch y363b@t '(any)))) y3633@t))) (y2efb@syntax-dispatch y3633@t '(any #(scheme-id =>) any)))) y362b@t))) (y2efb@syntax-dispatch y362b@t '(#(scheme-id else) any . each-any)))) y3605@cls))))) y3603@f) y35ff@cls y3600@cls*))) y35fd@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y35fb@t))) (y2efb@syntax-dispatch y35fb@t '(_ any . each-any)))) y35f9@stx))) (set! y2ee1@do-include (lambda (y364d@stx y364e@id y364f@filename) ((lambda (y3653@filename) (begin (if (not (and (string? y3653@filename) (y2cf0@id? y364e@id))) (y2fe4@syntax-violation '#f '"invalid syntax" y364d@stx) (void)) (cons (y2eb1@bless 'begin) (with-input-from-file y3653@filename (lambda () ((letrec ((y3655@f (lambda (y3657@ls) ((lambda (y3659@x) (if (eof-object? y3659@x) (reverse y3657@ls) (y3655@f (cons (y2cce@datum->stx y364e@id y3659@x) y3657@ls)))) (y288d@y27aa@read-annotated))))) y3655@f) '())))))) (y2d06@stx->datum y364f@filename)))) (set! y2ee3@include-macro (lambda (y365b@e) ((lambda (y365d@t) ((lambda (y365f@ls/false) (if y365f@ls/false (apply (lambda (y3661@id y3662@filename) (y2ee1@do-include y365b@e y3661@id y3662@filename)) y365f@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y365d@t))) (y2efb@syntax-dispatch y365d@t '(any any)))) y365b@e))) (set! y2ee5@include-into-macro (lambda (y3665@e) ((lambda (y3667@t) ((lambda (y3669@ls/false) (if y3669@ls/false (apply (lambda (y366b@id y366c@filename) (y2ee1@do-include y3665@e y366b@id y366c@filename)) y3669@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3667@t))) (y2efb@syntax-dispatch y3667@t '(_ any any)))) y3665@e))) (set! y2ee7@syntax-rules-macro (lambda (y366f@e) ((lambda (y3671@t) ((lambda (y3673@ls/false) (if y3673@ls/false (apply (lambda (y3675@lits y3676@pat* y3677@tmp*) (begin (y2f01@verify-literals y3675@lits y366f@e) (y2eb1@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons y3675@lits (map (lambda (y367b@pat y367c@tmp) ((lambda (y367f@t) ((lambda (y3681@ls/false) (if y3681@ls/false (apply (lambda (y3683@rest) (list (cons 'g y3683@rest) (list 'syntax y367c@tmp))) y3681@ls/false) ((lambda (y3685@t) ((lambda (y3687@ls/false) (if y3687@ls/false (apply (lambda () (y2fe4@syntax-violation '#f '"invalid syntax-rules pattern" y366f@e y367b@pat)) y3687@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3685@t))) (y2efb@syntax-dispatch y3685@t '_))) y367f@t))) (y2efb@syntax-dispatch y367f@t '(_ . any)))) y367b@pat)) y3676@pat* y3677@tmp*)))))))) y3673@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3671@t))) (y2efb@syntax-dispatch y3671@t '(_ each-any . #(each (any any)))))) y366f@e))) (set! y2ee9@quasiquote-macro ((lambda () ((lambda (y368a@datum y36a6@quasicons* y36a8@quasicons y36aa@quasiappend y36ac@quasivector y36ae@vquasi y36b0@quasi) (begin (set! y368a@datum (lambda (y378b@x) (list (y2e85@scheme-stx 'quote) (y2cd8@mkstx y378b@x '() '() '())))) (set! y36a6@quasicons* (lambda (y3783@x y3784@y) ((letrec ((y3787@f (lambda (y3789@x) (if (null? y3789@x) y3784@y (y36a8@quasicons (car y3789@x) (y3787@f (cdr y3789@x))))))) y3787@f) y3783@x))) (set! y36a8@quasicons (lambda (y375d@x y375e@y) ((lambda (y3761@t) ((lambda (y3763@ls/false) (if y3763@ls/false (apply (lambda (y3765@dy) ((lambda (y3767@t) ((lambda (y3769@ls/false) (if y3769@ls/false (apply (lambda (y376b@dx) (list (y2e85@scheme-stx 'quote) (cons y376b@dx y3765@dy))) y3769@ls/false) ((lambda (y376d@t) ((lambda (y376f@ls/false) (if y376f@ls/false (apply (lambda () ((lambda (y3771@t) ((lambda (y3773@ls/false) (if y3773@ls/false (apply (lambda () (list (y2e85@scheme-stx 'list) y375d@x)) y3773@ls/false) ((lambda (y3775@t) ((lambda (y3777@ls/false) (if y3777@ls/false (apply (lambda () (list (y2e85@scheme-stx 'cons) y375d@x y375e@y)) y3777@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3775@t))) (y2efb@syntax-dispatch y3775@t '_))) y3771@t))) (y2efb@syntax-dispatch y3771@t '()))) y3765@dy)) y376f@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y376d@t))) (y2efb@syntax-dispatch y376d@t '_))) y3767@t))) (y2efb@syntax-dispatch y3767@t '(#(scheme-id quote) any)))) y375d@x)) y3763@ls/false) ((lambda (y3779@t) ((lambda (y377b@ls/false) (if y377b@ls/false (apply (lambda (y377d@stuff) (cons* (y2e85@scheme-stx 'list) y375d@x y377d@stuff)) y377b@ls/false) ((lambda (y377f@t) ((lambda (y3781@ls/false) (if y3781@ls/false (apply (lambda () (list (y2e85@scheme-stx 'cons) y375d@x y375e@y)) y3781@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y377f@t))) (y2efb@syntax-dispatch y377f@t '_))) y3779@t))) (y2efb@syntax-dispatch y3779@t '(#(scheme-id list) . each-any)))) y3761@t))) (y2efb@syntax-dispatch y3761@t '(#(scheme-id quote) any)))) y375e@y))) (set! y36aa@quasiappend (lambda (y3743@x y3744@y) ((lambda (y3747@ls) (if (null? y3747@ls) (list (y2e85@scheme-stx 'quote) '()) (if (null? (cdr y3747@ls)) (car y3747@ls) (cons* (y2e85@scheme-stx 'append) y3747@ls)))) ((letrec ((y3749@f (lambda (y374b@x) (if (null? y374b@x) ((lambda (y374d@t) ((lambda (y374f@ls/false) (if y374f@ls/false (apply (lambda () '()) y374f@ls/false) ((lambda (y3751@t) ((lambda (y3753@ls/false) (if y3753@ls/false (apply (lambda () (list y3744@y)) y3753@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3751@t))) (y2efb@syntax-dispatch y3751@t '_))) y374d@t))) (y2efb@syntax-dispatch y374d@t '(#(scheme-id quote) ())))) y3744@y) ((lambda (y3755@t) ((lambda (y3757@ls/false) (if y3757@ls/false (apply (lambda () (y3749@f (cdr y374b@x))) y3757@ls/false) ((lambda (y3759@t) ((lambda (y375b@ls/false) (if y375b@ls/false (apply (lambda () (cons (car y374b@x) (y3749@f (cdr y374b@x)))) y375b@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3759@t))) (y2efb@syntax-dispatch y3759@t '_))) y3755@t))) (y2efb@syntax-dispatch y3755@t '(#(scheme-id quote) ())))) (car y374b@x)))))) y3749@f) y3743@x)))) (set! y36ac@quasivector (lambda (y3711@x) ((lambda (y3713@pat-x) ((lambda (y3715@t) ((lambda (y3717@ls/false) (if y3717@ls/false (apply (lambda (y3719@x*) (list (y2e85@scheme-stx 'quote) (list->vector y3719@x*))) y3717@ls/false) ((lambda (y371b@t) ((lambda (y371d@ls/false) (if y371d@ls/false (apply (lambda () ((letrec ((y371f@f (lambda (y3721@x y3722@k) ((lambda (y3725@t) ((lambda (y3727@ls/false) (if y3727@ls/false (apply (lambda (y3729@x*) (y3722@k (map (lambda (y372b@x) (list (y2e85@scheme-stx 'quote) y372b@x)) y3729@x*))) y3727@ls/false) ((lambda (y372d@t) ((lambda (y372f@ls/false) (if y372f@ls/false (apply (lambda (y3731@x*) (y3722@k y3731@x*)) y372f@ls/false) ((lambda (y3733@t) ((lambda (y3735@ls/false) (if y3735@ls/false (apply (lambda (y3737@x y3738@y) (y371f@f y3738@y (lambda (y373b@ls) (y3722@k (cons y3737@x y373b@ls))))) y3735@ls/false) ((lambda (y373d@t) ((lambda (y373f@ls/false) (if y373f@ls/false (apply (lambda () (list (y2e85@scheme-stx 'list->vector) y3713@pat-x)) y373f@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y373d@t))) (y2efb@syntax-dispatch y373d@t '_))) y3733@t))) (y2efb@syntax-dispatch y3733@t '(#(scheme-id cons) any any)))) y372d@t))) (y2efb@syntax-dispatch y372d@t '(#(scheme-id list) . each-any)))) y3725@t))) (y2efb@syntax-dispatch y3725@t '(#(scheme-id quote) each-any)))) y3721@x)))) y371f@f) y3711@x (lambda (y3741@ls) (cons* (y2e85@scheme-stx 'vector) y3741@ls)))) y371d@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y371b@t))) (y2efb@syntax-dispatch y371b@t '_))) y3715@t))) (y2efb@syntax-dispatch y3715@t '(#(scheme-id quote) each-any)))) y3713@pat-x)) y3711@x))) (set! y36ae@vquasi (lambda (y36ef@p y36f0@lev) ((lambda (y36f3@t) ((lambda (y36f5@ls/false) (if y36f5@ls/false (apply (lambda (y36f7@p y36f8@q) ((lambda (y36fb@t) ((lambda (y36fd@ls/false) (if y36fd@ls/false (apply (lambda (y36ff@p) (if (= y36f0@lev '0) (y36a6@quasicons* y36ff@p (y36ae@vquasi y36f8@q y36f0@lev)) (y36a8@quasicons (y36a8@quasicons (y368a@datum 'unquote) (y36b0@quasi y36ff@p (- y36f0@lev '1))) (y36ae@vquasi y36f8@q y36f0@lev)))) y36fd@ls/false) ((lambda (y3701@t) ((lambda (y3703@ls/false) (if y3703@ls/false (apply (lambda (y3705@p) (if (= y36f0@lev '0) (y36aa@quasiappend y3705@p (y36ae@vquasi y36f8@q y36f0@lev)) (y36a8@quasicons (y36a8@quasicons (y368a@datum 'unquote-splicing) (y36b0@quasi y3705@p (- y36f0@lev '1))) (y36ae@vquasi y36f8@q y36f0@lev)))) y3703@ls/false) ((lambda (y3707@t) ((lambda (y3709@ls/false) (if y3709@ls/false (apply (lambda (y370b@p) (y36a8@quasicons (y36b0@quasi y370b@p y36f0@lev) (y36ae@vquasi y36f8@q y36f0@lev))) y3709@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3707@t))) (y2efb@syntax-dispatch y3707@t 'any))) y3701@t))) (y2efb@syntax-dispatch y3701@t '(#(scheme-id unquote-splicing) . each-any)))) y36fb@t))) (y2efb@syntax-dispatch y36fb@t '(#(scheme-id unquote) . each-any)))) y36f7@p)) y36f5@ls/false) ((lambda (y370d@t) ((lambda (y370f@ls/false) (if y370f@ls/false (apply (lambda () (list (y2e85@scheme-stx 'quote) '())) y370f@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y370d@t))) (y2efb@syntax-dispatch y370d@t '()))) y36f3@t))) (y2efb@syntax-dispatch y36f3@t '(any . any)))) y36ef@p))) (set! y36b0@quasi (lambda (y36b9@p y36ba@lev) ((lambda (y36bd@t) ((lambda (y36bf@ls/false) (if y36bf@ls/false (apply (lambda (y36c1@p) (if (= y36ba@lev '0) y36c1@p (y36a8@quasicons (y368a@datum 'unquote) (y36b0@quasi (list y36c1@p) (- y36ba@lev '1))))) y36bf@ls/false) ((lambda (y36c3@t) ((lambda (y36c5@ls/false) (if y36c5@ls/false (apply (lambda (y36c7@p y36c8@q) (if (= y36ba@lev '0) (y36a6@quasicons* y36c7@p (y36b0@quasi y36c8@q y36ba@lev)) (y36a8@quasicons (y36a8@quasicons (y368a@datum 'unquote) (y36b0@quasi y36c7@p (- y36ba@lev '1))) (y36b0@quasi y36c8@q y36ba@lev)))) y36c5@ls/false) ((lambda (y36cb@t) ((lambda (y36cd@ls/false) (if y36cd@ls/false (apply (lambda (y36cf@p y36d0@q) (if (= y36ba@lev '0) (y36aa@quasiappend y36cf@p (y36b0@quasi y36d0@q y36ba@lev)) (y36a8@quasicons (y36a8@quasicons (y368a@datum 'unquote-splicing) (y36b0@quasi y36cf@p (- y36ba@lev '1))) (y36b0@quasi y36d0@q y36ba@lev)))) y36cd@ls/false) ((lambda (y36d3@t) ((lambda (y36d5@ls/false) (if y36d5@ls/false (apply (lambda (y36d7@p) (y36a8@quasicons (y368a@datum 'quasiquote) (y36b0@quasi (list y36d7@p) (+ y36ba@lev '1)))) y36d5@ls/false) ((lambda (y36d9@t) ((lambda (y36db@ls/false) (if y36db@ls/false (apply (lambda (y36dd@p y36de@q) (y36a8@quasicons (y36b0@quasi y36dd@p y36ba@lev) (y36b0@quasi y36de@q y36ba@lev))) y36db@ls/false) ((lambda (y36e1@t) ((lambda (y36e3@ls/false) (if (and y36e3@ls/false (apply (lambda (y36e5@x) (not (y2cb8@stx? y36e5@x))) y36e3@ls/false)) (apply (lambda (y36e7@x) (y36ac@quasivector (y36ae@vquasi y36e7@x y36ba@lev))) y36e3@ls/false) ((lambda (y36e9@t) ((lambda (y36eb@ls/false) (if y36eb@ls/false (apply (lambda (y36ed@p) (list (y2e85@scheme-stx 'quote) y36ed@p)) y36eb@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y36e9@t))) (y2efb@syntax-dispatch y36e9@t 'any))) y36e1@t))) (y2efb@syntax-dispatch y36e1@t '#(vector each-any)))) y36d9@t))) (y2efb@syntax-dispatch y36d9@t '(any . any)))) y36d3@t))) (y2efb@syntax-dispatch y36d3@t '(#(scheme-id quasiquote) any)))) y36cb@t))) (y2efb@syntax-dispatch y36cb@t '((#(scheme-id unquote-splicing) . each-any) . any)))) y36c3@t))) (y2efb@syntax-dispatch y36c3@t '((#(scheme-id unquote) . each-any) . any)))) y36bd@t))) (y2efb@syntax-dispatch y36bd@t '(#(scheme-id unquote) any)))) y36b9@p))) (lambda (y36b1@x) ((lambda (y36b3@t) ((lambda (y36b5@ls/false) (if y36b5@ls/false (apply (lambda (y36b7@e) (y36b0@quasi y36b7@e '0)) y36b5@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y36b3@t))) (y2efb@syntax-dispatch y36b3@t '(_ any)))) y36b1@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! y2eeb@quasisyntax-macro ((lambda () ((lambda (y378e@quasi) (begin (set! y378e@quasi (lambda (y37a9@p y37aa@lev) ((lambda (y37ad@t) ((lambda (y37af@ls/false) (if y37af@ls/false (apply (lambda (y37b1@p) (if (= y37aa@lev '0) ((lambda (y37b3@g) (values (list y37b3@g) (list y37b1@p) y37b3@g)) (gensym)) (call-with-values (lambda () (y378e@quasi y37b1@p (- y37aa@lev '1))) (lambda (y37bb@y37b6 y37bc@y37b8 y37bd@y37ba) ((lambda (y37c1@p y37c2@rhs* y37c3@lhs*) (values y37c3@lhs* y37c2@rhs* (list 'unsyntax y37c1@p))) y37bd@y37ba y37bc@y37b8 y37bb@y37b6))))) y37af@ls/false) ((lambda (y37c7@t) ((lambda (y37c9@ls/false) (if (and y37c9@ls/false (apply (lambda () (= y37aa@lev '0)) y37c9@ls/false)) (apply (lambda () (y2fe4@syntax-violation '#f '"incorrect use of unsyntax" y37a9@p)) y37c9@ls/false) ((lambda (y37cb@t) ((lambda (y37cd@ls/false) (if y37cd@ls/false (apply (lambda (y37cf@p* y37d0@q) (call-with-values (lambda () (y378e@quasi y37d0@q y37aa@lev)) (lambda (y37d9@y37d4 y37da@y37d6 y37db@y37d8) ((lambda (y37df@q y37e0@rhs* y37e1@lhs*) (if (= y37aa@lev '0) ((lambda (y37e5@g*) (values (append y37e5@g* y37e1@lhs*) (append y37cf@p* y37e0@rhs*) (append y37e5@g* y37df@q))) (map (lambda (y37e7@x) (gensym)) y37cf@p*)) (call-with-values (lambda () (y378e@quasi y37cf@p* (- y37aa@lev '1))) (lambda (y37ef@y37ea y37f0@y37ec y37f1@y37ee) ((lambda (y37f5@p* y37f6@rhs2* y37f7@lhs2*) (values (append y37f7@lhs2* y37e1@lhs*) (append y37f6@rhs2* y37e0@rhs*) (cons (cons 'unsyntax y37f5@p*) y37df@q))) y37f1@y37ee y37f0@y37ec y37ef@y37ea))))) y37db@y37d8 y37da@y37d6 y37d9@y37d4)))) y37cd@ls/false) ((lambda (y37fb@t) ((lambda (y37fd@ls/false) (if y37fd@ls/false (apply (lambda (y37ff@p* y3800@q) (call-with-values (lambda () (y378e@quasi y3800@q y37aa@lev)) (lambda (y3809@y3804 y380a@y3806 y380b@y3808) ((lambda (y380f@q y3810@rhs* y3811@lhs*) (if (= y37aa@lev '0) ((lambda (y3815@g*) (values (append (map (lambda (y3817@g) (cons y3817@g '(...))) y3815@g*) y3811@lhs*) (append y37ff@p* y3810@rhs*) (append (apply append (map (lambda (y3819@g) (cons y3819@g '(...))) y3815@g*)) y380f@q))) (map (lambda (y381b@x) (gensym)) y37ff@p*)) (call-with-values (lambda () (y378e@quasi y37ff@p* (- y37aa@lev '1))) (lambda (y3823@y381e y3824@y3820 y3825@y3822) ((lambda (y3829@p* y382a@rhs2* y382b@lhs2*) (values (append y382b@lhs2* y3811@lhs*) (append y382a@rhs2* y3810@rhs*) (cons (cons 'unsyntax-splicing y3829@p*) y380f@q))) y3825@y3822 y3824@y3820 y3823@y381e))))) y380b@y3808 y380a@y3806 y3809@y3804)))) y37fd@ls/false) ((lambda (y382f@t) ((lambda (y3831@ls/false) (if (and y3831@ls/false (apply (lambda () (= y37aa@lev '0)) y3831@ls/false)) (apply (lambda () (y2fe4@syntax-violation '#f '"incorrect use of unsyntax-splicing" y37a9@p)) y3831@ls/false) ((lambda (y3833@t) ((lambda (y3835@ls/false) (if y3835@ls/false (apply (lambda (y3837@p) (call-with-values (lambda () (y378e@quasi y3837@p (+ y37aa@lev '1))) (lambda (y383f@y383a y3840@y383c y3841@y383e) ((lambda (y3845@p y3846@rhs* y3847@lhs*) (values y3847@lhs* y3846@rhs* (list 'quasisyntax y3845@p))) y3841@y383e y3840@y383c y383f@y383a)))) y3835@ls/false) ((lambda (y384b@t) ((lambda (y384d@ls/false) (if y384d@ls/false (apply (lambda (y384f@p y3850@q) (call-with-values (lambda () (y378e@quasi y384f@p y37aa@lev)) (lambda (y385f@y3854 y3860@y3856 y3861@y3858) (call-with-values (lambda () (y378e@quasi y3850@q y37aa@lev)) (lambda (y3865@y385a y3866@y385c y3867@y385e) ((lambda (y386b@q y386c@rhs2* y386d@lhs2* y386e@p y386f@rhs* y3870@lhs*) (values (append y386d@lhs2* y3870@lhs*) (append y386c@rhs2* y386f@rhs*) (cons y386e@p y386b@q))) y3867@y385e y3866@y385c y3865@y385a y3861@y3858 y3860@y3856 y385f@y3854)))))) y384d@ls/false) ((lambda (y3877@t) ((lambda (y3879@ls/false) (if y3879@ls/false (apply (lambda (y387b@x*) (call-with-values (lambda () (y378e@quasi y387b@x* y37aa@lev)) (lambda (y3883@y387e y3884@y3880 y3885@y3882) ((lambda (y3889@x* y388a@rhs* y388b@lhs*) (values y388b@lhs* y388a@rhs* (list->vector y3889@x*))) y3885@y3882 y3884@y3880 y3883@y387e)))) y3879@ls/false) ((lambda (y388f@t) ((lambda (y3891@ls/false) (if y3891@ls/false (apply (lambda () (values '() '() y37a9@p)) y3891@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y388f@t))) (y2efb@syntax-dispatch y388f@t '_))) y3877@t))) (y2efb@syntax-dispatch y3877@t '#(vector each-any)))) y384b@t))) (y2efb@syntax-dispatch y384b@t '(any . any)))) y3833@t))) (y2efb@syntax-dispatch y3833@t '(#(scheme-id quasisyntax) any)))) y382f@t))) (y2efb@syntax-dispatch y382f@t '#(scheme-id unsyntax-splicing)))) y37fb@t))) (y2efb@syntax-dispatch y37fb@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) y37cb@t))) (y2efb@syntax-dispatch y37cb@t '((#(scheme-id unsyntax) . each-any) . any)))) y37c7@t))) (y2efb@syntax-dispatch y37c7@t '#(scheme-id unsyntax)))) y37ad@t))) (y2efb@syntax-dispatch y37ad@t '(#(scheme-id unsyntax) any)))) y37a9@p))) (lambda (y378f@x) ((lambda (y3791@t) ((lambda (y3793@ls/false) (if y3793@ls/false (apply (lambda (y3795@e) (call-with-values (lambda () (y378e@quasi y3795@e '0)) (lambda (y379d@y3798 y379e@y379a y379f@y379c) ((lambda (y37a3@v y37a4@rhs* y37a5@lhs*) (y2eb1@bless (list 'syntax-case (cons 'list y37a4@rhs*) '() (list y37a5@lhs* (list 'syntax y37a3@v))))) y379f@y379c y379e@y379a y379d@y3798)))) y3793@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3791@t))) (y2efb@syntax-dispatch y3791@t '(_ any)))) y378f@x)))) '#f)))) (set! y2eed@define-struct-macro (lambda (y3893@stx) (y2fe4@syntax-violation '#f '"define-struct not supported" y3893@stx))) (set! y2eef@define-record-type-macro (lambda (y3895@x) ((lambda (y3898@id y389a@get-record-name y389c@get-record-constructor-name y389e@get-record-predicate-name y38a0@get-clause y38a2@foo-rtd-code y38a4@parent-rtd-code y38a6@parent-rcd-code y38a8@foo-rcd-code y38aa@get-protocol-code y38ac@get-fields y38ae@get-mutator-indices y38b0@get-mutators y38b2@get-accessors y38b4@enumerate y38b6@do-define-record y38b8@verify-clauses) (begin (set! y3898@id (lambda (y3a8b@ctxt . y3a8d@str*) (y2fe8@datum->syntax y3a8b@ctxt (string->symbol (apply string-append (map (lambda (y3a8f@x) (if (symbol? y3a8f@x) (symbol->string y3a8f@x) (if (string? y3a8f@x) y3a8f@x (assertion-violation 'define-record-type '"BUG")))) y3a8d@str*)))))) (set! y389a@get-record-name (lambda (y3a79@spec) ((lambda (y3a7b@t) ((lambda (y3a7d@ls/false) (if y3a7d@ls/false (apply (lambda (y3a7f@foo y3a80@make-foo y3a81@foo?) y3a7f@foo) y3a7d@ls/false) ((lambda (y3a85@t) ((lambda (y3a87@ls/false) (if y3a87@ls/false (apply (lambda (y3a89@foo) y3a89@foo) y3a87@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3a85@t))) (y2efb@syntax-dispatch y3a85@t 'any))) y3a7b@t))) (y2efb@syntax-dispatch y3a7b@t '(any any any)))) y3a79@spec))) (set! y389c@get-record-constructor-name (lambda (y3a65@spec) ((lambda (y3a67@t) ((lambda (y3a69@ls/false) (if y3a69@ls/false (apply (lambda (y3a6b@foo y3a6c@make-foo y3a6d@foo?) y3a6c@make-foo) y3a69@ls/false) ((lambda (y3a71@t) ((lambda (y3a73@ls/false) (if (and y3a73@ls/false (apply (lambda (y3a75@foo) (y2cf0@id? y3a75@foo)) y3a73@ls/false)) (apply (lambda (y3a77@foo) (y3898@id y3a77@foo '"make-" (y2d06@stx->datum y3a77@foo))) y3a73@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3a71@t))) (y2efb@syntax-dispatch y3a71@t 'any))) y3a67@t))) (y2efb@syntax-dispatch y3a67@t '(any any any)))) y3a65@spec))) (set! y389e@get-record-predicate-name (lambda (y3a51@spec) ((lambda (y3a53@t) ((lambda (y3a55@ls/false) (if y3a55@ls/false (apply (lambda (y3a57@foo y3a58@make-foo y3a59@foo?) y3a59@foo?) y3a55@ls/false) ((lambda (y3a5d@t) ((lambda (y3a5f@ls/false) (if (and y3a5f@ls/false (apply (lambda (y3a61@foo) (y2cf0@id? y3a61@foo)) y3a5f@ls/false)) (apply (lambda (y3a63@foo) (y3898@id y3a63@foo (y2d06@stx->datum y3a63@foo) '"?")) y3a5f@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3a5d@t))) (y2efb@syntax-dispatch y3a5d@t 'any))) y3a53@t))) (y2efb@syntax-dispatch y3a53@t '(any any any)))) y3a51@spec))) (set! y38a0@get-clause (lambda (y3a3f@id y3a40@ls) ((lambda (y3a43@t) ((lambda (y3a45@ls/false) (if y3a45@ls/false (apply (lambda () '#f) y3a45@ls/false) ((lambda (y3a47@t) ((lambda (y3a49@ls/false) (if y3a49@ls/false (apply (lambda (y3a4b@x y3a4c@rest y3a4d@ls) (if (y2cf8@free-id=? (y2eb1@bless y3a3f@id) y3a4b@x) (cons y3a4b@x y3a4c@rest) (y38a0@get-clause y3a3f@id y3a4d@ls))) y3a49@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3a47@t))) (y2efb@syntax-dispatch y3a47@t '((any . any) . any)))) y3a43@t))) (y2efb@syntax-dispatch y3a43@t '()))) y3a40@ls))) (set! y38a2@foo-rtd-code (lambda (y39ed@name y39ee@clause* y39ef@parent-rtd-code) ((lambda (y39f4@convert-field-spec*) (begin (set! y39f4@convert-field-spec* (lambda (y3a25@ls) (list->vector (map (lambda (y3a27@x) ((lambda (y3a29@t) ((lambda (y3a2b@ls/false) (if y3a2b@ls/false (apply (lambda (y3a2d@name y3a2e@rest) (list 'mutable y3a2d@name)) y3a2b@ls/false) ((lambda (y3a31@t) ((lambda (y3a33@ls/false) (if y3a33@ls/false (apply (lambda (y3a35@name y3a36@rest) (list 'immutable y3a35@name)) y3a33@ls/false) ((lambda (y3a39@t) ((lambda (y3a3b@ls/false) (if y3a3b@ls/false (apply (lambda (y3a3d@name) (list 'immutable y3a3d@name)) y3a3b@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3a39@t))) (y2efb@syntax-dispatch y3a39@t 'any))) y3a31@t))) (y2efb@syntax-dispatch y3a31@t '(#(scheme-id immutable) any . any)))) y3a29@t))) (y2efb@syntax-dispatch y3a29@t '(#(scheme-id mutable) any . any)))) y3a27@x)) y3a25@ls)))) ((lambda (y39f5@uid-code y39f6@sealed? y39f7@opaque? y39f8@fields) (y2eb1@bless (list 'make-record-type-descriptor (list 'quote y39ed@name) y39ef@parent-rtd-code y39f5@uid-code y39f6@sealed? y39f7@opaque? y39f8@fields))) ((lambda (y39fd@t) ((lambda (y39ff@ls/false) (if y39ff@ls/false (apply (lambda () (list 'quote (gensym))) y39ff@ls/false) ((lambda (y3a01@t) ((lambda (y3a03@ls/false) (if y3a03@ls/false (apply (lambda (y3a05@uid) (list 'quote y3a05@uid)) y3a03@ls/false) ((lambda (y3a07@t) ((lambda (y3a09@ls/false) (if y3a09@ls/false (apply (lambda () '#f) y3a09@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3a07@t))) (y2efb@syntax-dispatch y3a07@t '_))) y3a01@t))) (y2efb@syntax-dispatch y3a01@t '(_ any)))) y39fd@t))) (y2efb@syntax-dispatch y39fd@t '(_)))) (y38a0@get-clause 'nongenerative y39ee@clause*)) ((lambda (y3a0b@t) ((lambda (y3a0d@ls/false) (if y3a0d@ls/false (apply (lambda () '#t) y3a0d@ls/false) ((lambda (y3a0f@t) ((lambda (y3a11@ls/false) (if y3a11@ls/false (apply (lambda () '#f) y3a11@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3a0f@t))) (y2efb@syntax-dispatch y3a0f@t '_))) y3a0b@t))) (y2efb@syntax-dispatch y3a0b@t '(_ #(atom #t))))) (y38a0@get-clause 'sealed y39ee@clause*)) ((lambda (y3a13@t) ((lambda (y3a15@ls/false) (if y3a15@ls/false (apply (lambda () '#t) y3a15@ls/false) ((lambda (y3a17@t) ((lambda (y3a19@ls/false) (if y3a19@ls/false (apply (lambda () '#f) y3a19@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3a17@t))) (y2efb@syntax-dispatch y3a17@t '_))) y3a13@t))) (y2efb@syntax-dispatch y3a13@t '(_ #(atom #t))))) (y38a0@get-clause 'opaque y39ee@clause*)) ((lambda (y3a1b@t) ((lambda (y3a1d@ls/false) (if y3a1d@ls/false (apply (lambda (y3a1f@field-spec*) (list 'quote (y39f4@convert-field-spec* y3a1f@field-spec*))) y3a1d@ls/false) ((lambda (y3a21@t) ((lambda (y3a23@ls/false) (if y3a23@ls/false (apply (lambda () ''#()) y3a23@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3a21@t))) (y2efb@syntax-dispatch y3a21@t '_))) y3a1b@t))) (y2efb@syntax-dispatch y3a1b@t '(_ . each-any)))) (y38a0@get-clause 'fields y39ee@clause*))))) '#f))) (set! y38a4@parent-rtd-code (lambda (y39d5@clause*) ((lambda (y39d7@t) ((lambda (y39d9@ls/false) (if y39d9@ls/false (apply (lambda (y39db@name) (list 'record-type-descriptor y39db@name)) y39d9@ls/false) ((lambda (y39dd@t) ((lambda (y39df@ls/false) (if y39df@ls/false (apply (lambda () ((lambda (y39e1@t) ((lambda (y39e3@ls/false) (if y39e3@ls/false (apply (lambda (y39e5@rtd y39e6@rcd) y39e5@rtd) y39e3@ls/false) ((lambda (y39e9@t) ((lambda (y39eb@ls/false) (if y39eb@ls/false (apply (lambda () '#f) y39eb@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y39e9@t))) (y2efb@syntax-dispatch y39e9@t '#(atom #f)))) y39e1@t))) (y2efb@syntax-dispatch y39e1@t '(_ any any)))) (y38a0@get-clause 'parent-rtd y39d5@clause*))) y39df@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y39dd@t))) (y2efb@syntax-dispatch y39dd@t '#(atom #f)))) y39d7@t))) (y2efb@syntax-dispatch y39d7@t '(_ any)))) (y38a0@get-clause 'parent y39d5@clause*)))) (set! y38a6@parent-rcd-code (lambda (y39bd@clause*) ((lambda (y39bf@t) ((lambda (y39c1@ls/false) (if y39c1@ls/false (apply (lambda (y39c3@name) (list 'record-constructor-descriptor y39c3@name)) y39c1@ls/false) ((lambda (y39c5@t) ((lambda (y39c7@ls/false) (if y39c7@ls/false (apply (lambda () ((lambda (y39c9@t) ((lambda (y39cb@ls/false) (if y39cb@ls/false (apply (lambda (y39cd@rtd y39ce@rcd) y39ce@rcd) y39cb@ls/false) ((lambda (y39d1@t) ((lambda (y39d3@ls/false) (if y39d3@ls/false (apply (lambda () '#f) y39d3@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y39d1@t))) (y2efb@syntax-dispatch y39d1@t '#(atom #f)))) y39c9@t))) (y2efb@syntax-dispatch y39c9@t '(_ any any)))) (y38a0@get-clause 'parent-rtd y39bd@clause*))) y39c7@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y39c5@t))) (y2efb@syntax-dispatch y39c5@t '#(atom #f)))) y39bf@t))) (y2efb@syntax-dispatch y39bf@t '(_ any)))) (y38a0@get-clause 'parent y39bd@clause*)))) (set! y38a8@foo-rcd-code (lambda (y39b5@clause* y39b6@foo-rtd y39b7@protocol y39b8@parent-rcd-code) (list 'make-record-constructor-descriptor y39b6@foo-rtd y39b8@parent-rcd-code y39b7@protocol))) (set! y38aa@get-protocol-code (lambda (y39a9@clause*) ((lambda (y39ab@t) ((lambda (y39ad@ls/false) (if y39ad@ls/false (apply (lambda (y39af@expr) y39af@expr) y39ad@ls/false) ((lambda (y39b1@t) ((lambda (y39b3@ls/false) (if y39b3@ls/false (apply (lambda () '#f) y39b3@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y39b1@t))) (y2efb@syntax-dispatch y39b1@t '_))) y39ab@t))) (y2efb@syntax-dispatch y39ab@t '(_ any)))) (y38a0@get-clause 'protocol y39a9@clause*)))) (set! y38ac@get-fields (lambda (y3997@clause*) ((lambda (y3999@t) ((lambda (y399b@ls/false) (if y399b@ls/false (apply (lambda () '()) y399b@ls/false) ((lambda (y399d@t) ((lambda (y399f@ls/false) (if y399f@ls/false (apply (lambda (y39a1@f*) y39a1@f*) y399f@ls/false) ((lambda (y39a3@t) ((lambda (y39a5@ls/false) (if y39a5@ls/false (apply (lambda (y39a7@rest) (y38ac@get-fields y39a7@rest)) y39a5@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y39a3@t))) (y2efb@syntax-dispatch y39a3@t '(_ . any)))) y399d@t))) (y2efb@syntax-dispatch y399d@t '((#(scheme-id fields) . each-any) . _)))) y3999@t))) (y2efb@syntax-dispatch y3999@t '()))) y3997@clause*))) (set! y38ae@get-mutator-indices (lambda (y397f@fields) ((letrec ((y3981@f (lambda (y3983@fields y3984@i) ((lambda (y3987@t) ((lambda (y3989@ls/false) (if y3989@ls/false (apply (lambda () '()) y3989@ls/false) ((lambda (y398b@t) ((lambda (y398d@ls/false) (if y398d@ls/false (apply (lambda (y398f@rest) (cons y3984@i (y3981@f y398f@rest (+ y3984@i '1)))) y398d@ls/false) ((lambda (y3991@t) ((lambda (y3993@ls/false) (if y3993@ls/false (apply (lambda (y3995@rest) (y3981@f y3995@rest (+ y3984@i '1))) y3993@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3991@t))) (y2efb@syntax-dispatch y3991@t '(_ . any)))) y398b@t))) (y2efb@syntax-dispatch y398b@t '((#(scheme-id mutable) . _) . any)))) y3987@t))) (y2efb@syntax-dispatch y3987@t '()))) y3983@fields)))) y3981@f) y397f@fields '0))) (set! y38b0@get-mutators (lambda (y3955@foo y3956@fields) ((lambda (y395a@gen-name) (begin (set! y395a@gen-name (lambda (y397d@x) (y2fe8@datum->syntax y3955@foo (string->symbol (string-append (symbol->string (y2fea@syntax->datum y3955@foo)) '"-" (symbol->string (y2fea@syntax->datum y397d@x)) '"-set!"))))) ((letrec ((y395b@f (lambda (y395d@fields) ((lambda (y395f@t) ((lambda (y3961@ls/false) (if y3961@ls/false (apply (lambda () '()) y3961@ls/false) ((lambda (y3963@t) ((lambda (y3965@ls/false) (if y3965@ls/false (apply (lambda (y3967@name y3968@accessor y3969@mutator y396a@rest) (cons y3969@mutator (y395b@f y396a@rest))) y3965@ls/false) ((lambda (y396f@t) ((lambda (y3971@ls/false) (if y3971@ls/false (apply (lambda (y3973@name y3974@rest) (cons (y395a@gen-name y3973@name) (y395b@f y3974@rest))) y3971@ls/false) ((lambda (y3977@t) ((lambda (y3979@ls/false) (if y3979@ls/false (apply (lambda (y397b@rest) (y395b@f y397b@rest)) y3979@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3977@t))) (y2efb@syntax-dispatch y3977@t '(_ . any)))) y396f@t))) (y2efb@syntax-dispatch y396f@t '((#(scheme-id mutable) any) . any)))) y3963@t))) (y2efb@syntax-dispatch y3963@t '((#(scheme-id mutable) any any any) . any)))) y395f@t))) (y2efb@syntax-dispatch y395f@t '()))) y395d@fields)))) y395b@f) y3956@fields))) '#f))) (set! y38b2@get-accessors (lambda (y3911@foo y3912@fields) ((lambda (y3916@gen-name) (begin (set! y3916@gen-name (lambda (y3953@x) (y2fe8@datum->syntax y3911@foo (string->symbol (string-append (symbol->string (y2fea@syntax->datum y3911@foo)) '"-" (symbol->string (y2fea@syntax->datum y3953@x))))))) (map (lambda (y3917@field) ((lambda (y3919@t) ((lambda (y391b@ls/false) (if (and y391b@ls/false (apply (lambda (y391d@name y391e@accessor y391f@mutator) (y2cf0@id? y391e@accessor)) y391b@ls/false)) (apply (lambda (y3923@name y3924@accessor y3925@mutator) y3924@accessor) y391b@ls/false) ((lambda (y3929@t) ((lambda (y392b@ls/false) (if (and y392b@ls/false (apply (lambda (y392d@name y392e@accessor) (y2cf0@id? y392e@accessor)) y392b@ls/false)) (apply (lambda (y3931@name y3932@accessor) y3932@accessor) y392b@ls/false) ((lambda (y3935@t) ((lambda (y3937@ls/false) (if (and y3937@ls/false (apply (lambda (y3939@name) (y2cf0@id? y3939@name)) y3937@ls/false)) (apply (lambda (y393b@name) (y3916@gen-name y393b@name)) y3937@ls/false) ((lambda (y393d@t) ((lambda (y393f@ls/false) (if (and y393f@ls/false (apply (lambda (y3941@name) (y2cf0@id? y3941@name)) y393f@ls/false)) (apply (lambda (y3943@name) (y3916@gen-name y3943@name)) y393f@ls/false) ((lambda (y3945@t) ((lambda (y3947@ls/false) (if (and y3947@ls/false (apply (lambda (y3949@name) (y2cf0@id? y3949@name)) y3947@ls/false)) (apply (lambda (y394b@name) (y3916@gen-name y394b@name)) y3947@ls/false) ((lambda (y394d@t) ((lambda (y394f@ls/false) (if y394f@ls/false (apply (lambda (y3951@others) (y2fe4@syntax-violation '#f '"invalid field spec" y3917@field)) y394f@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y394d@t))) (y2efb@syntax-dispatch y394d@t 'any))) y3945@t))) (y2efb@syntax-dispatch y3945@t 'any))) y393d@t))) (y2efb@syntax-dispatch y393d@t '(#(scheme-id immutable) any)))) y3935@t))) (y2efb@syntax-dispatch y3935@t '(#(scheme-id mutable) any)))) y3929@t))) (y2efb@syntax-dispatch y3929@t '(#(scheme-id immutable) any any)))) y3919@t))) (y2efb@syntax-dispatch y3919@t '(#(scheme-id mutable) any any any)))) y3917@field)) y3912@fields))) '#f))) (set! y38b4@enumerate (lambda (y3909@ls) ((letrec ((y390b@f (lambda (y390d@ls y390e@i) (if (null? y390d@ls) '() (cons y390e@i (y390b@f (cdr y390d@ls) (+ y390e@i '1))))))) y390b@f) y3909@ls '0))) (set! y38b6@do-define-record (lambda (y38e1@namespec y38e2@clause*) ((lambda (y38e5@foo) ((lambda (y38e7@foo-rtd) ((lambda (y38e9@foo-rcd) ((lambda (y38eb@protocol) ((lambda (y38ed@make-foo) ((lambda (y38ef@fields) ((lambda (y38f1@idx*) ((lambda (y38f3@foo-x*) ((lambda (y38f5@set-foo-x!*) ((lambda (y38f7@set-foo-idx*) ((lambda (y38f9@foo?) ((lambda (y38fb@foo-rtd-code) ((lambda (y38fd@foo-rcd-code) ((lambda (y38ff@protocol-code) ((lambda () (y2eb1@bless (cons 'begin (cons (list 'define y38e7@foo-rtd y38fb@foo-rtd-code) (cons (list 'define y38eb@protocol y38ff@protocol-code) (cons (list 'define y38e9@foo-rcd y38fd@foo-rcd-code) (cons (list 'define-syntax y38e5@foo (list 'list ''$rtd (list 'syntax y38e7@foo-rtd) (list 'syntax y38e9@foo-rcd))) (cons (list 'define y38f9@foo? (list 'record-predicate y38e7@foo-rtd)) (cons (list 'define y38ed@make-foo (list 'record-constructor y38e9@foo-rcd)) (append (map (lambda (y3901@foo-x y3902@idx) (list 'define y3901@foo-x (list 'record-accessor y38e7@foo-rtd y3902@idx))) y38f3@foo-x* y38f1@idx*) (map (lambda (y3905@set-foo-x! y3906@idx) (list 'define y3905@set-foo-x! (list 'record-mutator y38e7@foo-rtd y3906@idx))) y38f5@set-foo-x!* y38f7@set-foo-idx*))))))))))))) (y38aa@get-protocol-code y38e2@clause*))) (y38a8@foo-rcd-code y38e2@clause* y38e7@foo-rtd y38eb@protocol (y38a6@parent-rcd-code y38e2@clause*)))) (y38a2@foo-rtd-code y38e5@foo y38e2@clause* (y38a4@parent-rtd-code y38e2@clause*)))) (y389e@get-record-predicate-name y38e1@namespec))) (y38ae@get-mutator-indices y38ef@fields))) (y38b0@get-mutators y38e5@foo y38ef@fields))) (y38b2@get-accessors y38e5@foo y38ef@fields))) (y38b4@enumerate y38ef@fields))) (y38ac@get-fields y38e2@clause*))) (y389c@get-record-constructor-name y38e1@namespec))) (gensym))) (gensym))) (gensym))) (y389a@get-record-name y38e1@namespec)))) (set! y38b8@verify-clauses (lambda (y38c1@x y38c2@cls*) ((lambda (y38c6@valid-kwds y38c8@free-id-member?) (begin (set! y38c6@valid-kwds (map y2eb1@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! y38c8@free-id-member? (lambda (y38dd@x y38de@ls) (and (pair? y38de@ls) (or (y2cf8@free-id=? y38dd@x (car y38de@ls)) (y38c8@free-id-member? y38dd@x (cdr y38de@ls)))))) ((letrec ((y38c9@f (lambda (y38cb@cls* y38cc@seen*) (if (not (null? y38cb@cls*)) ((lambda (y38cf@t) ((lambda (y38d1@ls/false) (if y38d1@ls/false (apply (lambda (y38d3@kwd y38d4@rest) (if (or (not (y2cf0@id? y38d3@kwd)) (not (y38c8@free-id-member? y38d3@kwd y38c6@valid-kwds))) (y2fe4@syntax-violation '#f '"not a valid define-record-type keyword" y38d3@kwd) (if (y2cfe@bound-id-member? y38d3@kwd y38cc@seen*) (y2fe4@syntax-violation '#f '"duplicate use of keyword " y38c1@x y38d3@kwd) (y38c9@f (cdr y38cb@cls*) (cons y38d3@kwd y38cc@seen*))))) y38d1@ls/false) ((lambda (y38d7@t) ((lambda (y38d9@ls/false) (if y38d9@ls/false (apply (lambda (y38db@cls) (y2fe4@syntax-violation '#f '"malformed define-record-type clause" y38db@cls)) y38d9@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y38d7@t))) (y2efb@syntax-dispatch y38d7@t 'any))) y38cf@t))) (y2efb@syntax-dispatch y38cf@t '(any . any)))) (car y38cb@cls*)) (void))))) y38c9@f) y38c2@cls* '()))) '#f '#f))) ((lambda (y38b9@t) ((lambda (y38bb@ls/false) (if y38bb@ls/false (apply (lambda (y38bd@namespec y38be@clause*) (begin (y38b8@verify-clauses y3895@x y38be@clause*) (y38b6@do-define-record y38bd@namespec y38be@clause*))) y38bb@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y38b9@t))) (y2efb@syntax-dispatch y38b9@t '(_ any . each-any)))) y3895@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! y2ef1@define-condition-type-macro (lambda (y3a91@x) ((lambda (y3a94@mkname) (begin (set! y3a94@mkname (lambda (y3ac1@name y3ac2@suffix) (y2fe8@datum->syntax y3ac1@name (string->symbol (string-append (symbol->string (y2fea@syntax->datum y3ac1@name)) y3ac2@suffix))))) ((lambda (y3a95@t) ((lambda (y3a97@ls/false) (if (and y3a97@ls/false (apply (lambda (y3a99@ctxt y3a9a@name y3a9b@super y3a9c@constructor y3a9d@predicate y3a9e@field* y3a9f@accessor*) (and (y2cf0@id? y3a9a@name) (y2cf0@id? y3a9b@super) (y2cf0@id? y3a9c@constructor) (y2cf0@id? y3a9d@predicate) (for-all y2cf0@id? y3a9e@field*) (for-all y2cf0@id? y3a9f@accessor*))) y3a97@ls/false)) (apply (lambda (y3aa7@ctxt y3aa8@name y3aa9@super y3aaa@constructor y3aab@predicate y3aac@field* y3aad@accessor*) ((lambda (y3ab5@aux-accessor*) (y2eb1@bless (cons 'begin (cons (cons 'define-record-type (cons (list y3aa8@name y3aaa@constructor (gensym)) (cons (list 'parent y3aa9@super) (cons (cons 'fields (map (lambda (y3ab7@field y3ab8@aux) (list 'immutable y3ab7@field y3ab8@aux)) y3aac@field* y3ab5@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define y3aab@predicate (list 'condition-predicate (list 'record-type-descriptor y3aa8@name))) (map (lambda (y3abb@accessor y3abc@aux) (list 'define y3abb@accessor (list 'condition-accessor (list 'record-type-descriptor y3aa8@name) y3abc@aux))) y3aad@accessor* y3ab5@aux-accessor*)))))) (map (lambda (y3abf@x) (gensym)) y3aad@accessor*))) y3a97@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3a95@t))) (y2efb@syntax-dispatch y3a95@t '(any any any any any . #(each (any any)))))) y3a91@x))) '#f))) (set! y2ef3@incorrect-usage-macro (lambda (y3ac5@e) (y2fe4@syntax-violation '#f '"incorrect usage of auxiliary keyword" y3ac5@e))) (set! y2ef5@parameterize-macro (lambda (y3ac7@e) ((lambda (y3ac9@t) ((lambda (y3acb@ls/false) (if y3acb@ls/false (apply (lambda (y3acd@b y3ace@b*) (y2eb1@bless (cons 'let (cons '() (cons y3acd@b y3ace@b*))))) y3acb@ls/false) ((lambda (y3ad1@t) ((lambda (y3ad3@ls/false) (if y3ad3@ls/false (apply (lambda (y3ad5@olhs* y3ad6@orhs* y3ad7@b y3ad8@b*) ((lambda (y3add@lhs* y3ade@rhs*) (y2eb1@bless (cons (list 'lambda (append y3add@lhs* y3ade@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (y3ae1@lhs y3ae2@rhs) (list 'let (list (list 't (list y3ae1@lhs))) (list y3ae1@lhs y3ae2@rhs) (cons 'set! (cons y3ae2@rhs '(t))))) y3add@lhs* y3ade@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons y3ad7@b y3ad8@b*))) '(swap)))))) (append y3ad5@olhs* y3ad6@orhs*)))) (y2fd2@generate-temporaries y3ad5@olhs*) (y2fd2@generate-temporaries y3ad6@orhs*))) y3ad3@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3ad1@t))) (y2efb@syntax-dispatch y3ad1@t '(_ #(each (any any)) any . each-any)))) y3ac9@t))) (y2efb@syntax-dispatch y3ac9@t '(_ () any . each-any)))) y3ac7@e))) (set! y2ef7@foreign-call-transformer (lambda (y3ae5@e y3ae6@r y3ae7@mr) ((lambda (y3aeb@t) ((lambda (y3aed@ls/false) (if y3aed@ls/false (apply (lambda (y3aef@name y3af0@arg*) (cons 'foreign-call (cons (y2f1d@chi-expr y3aef@name y3ae6@r y3ae7@mr) (y2f19@chi-expr* y3af0@arg* y3ae6@r y3ae7@mr)))) y3aed@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3aeb@t))) (y2efb@syntax-dispatch y3aeb@t '(_ any . each-any)))) y3ae5@e))) (set! y2ef9@convert-pattern (lambda (y3af3@pattern y3af4@keys) ((lambda (y3af8@cvt* y3afa@cvt) (begin (set! y3af8@cvt* (lambda (y3b97@p* y3b98@n y3b99@ids) (if (null? y3b97@p*) (values '() y3b99@ids) (call-with-values (lambda () (y3af8@cvt* (cdr y3b97@p*) y3b98@n y3b99@ids)) (lambda (y3ba1@y3b9e y3ba2@y3ba0) ((lambda (y3ba5@ids y3ba6@y) (call-with-values (lambda () (y3afa@cvt (car y3b97@p*) y3b98@n y3ba5@ids)) (lambda (y3bad@y3baa y3bae@y3bac) ((lambda (y3bb1@ids y3bb2@x) (values (cons y3bb2@x y3ba6@y) y3bb1@ids)) y3bae@y3bac y3bad@y3baa)))) y3ba2@y3ba0 y3ba1@y3b9e)))))) (set! y3afa@cvt (lambda (y3afb@p y3afc@n y3afd@ids) ((lambda (y3b01@t) ((lambda (y3b03@ls/false) (if (and y3b03@ls/false (apply (lambda (y3b05@id) (y2cf0@id? y3b05@id)) y3b03@ls/false)) (apply (lambda (y3b07@id) (if (y2cfe@bound-id-member? y3afb@p y3af4@keys) (values (vector 'free-id y3afb@p) y3afd@ids) (if (y2cf8@free-id=? y3afb@p (y2e85@scheme-stx '_)) (values '_ y3afd@ids) (values 'any (cons (cons y3afb@p y3afc@n) y3afd@ids))))) y3b03@ls/false) ((lambda (y3b09@t) ((lambda (y3b0b@ls/false) (if (and y3b0b@ls/false (apply (lambda (y3b0d@p y3b0e@dots) (y2efd@ellipsis? y3b0e@dots)) y3b0b@ls/false)) (apply (lambda (y3b11@p y3b12@dots) (call-with-values (lambda () (y3afa@cvt y3b11@p (+ y3afc@n '1) y3afd@ids)) (lambda (y3b19@y3b16 y3b1a@y3b18) ((lambda (y3b1d@ids y3b1e@p) (values (if (eq? y3b1e@p 'any) 'each-any (vector 'each y3b1e@p)) y3b1d@ids)) y3b1a@y3b18 y3b19@y3b16)))) y3b0b@ls/false) ((lambda (y3b21@t) ((lambda (y3b23@ls/false) (if (and y3b23@ls/false (apply (lambda (y3b25@x y3b26@dots y3b27@ys y3b28@z) (y2efd@ellipsis? y3b26@dots)) y3b23@ls/false)) (apply (lambda (y3b2d@x y3b2e@dots y3b2f@ys y3b30@z) (call-with-values (lambda () (y3afa@cvt y3b30@z y3afc@n y3afd@ids)) (lambda (y3b39@y3b36 y3b3a@y3b38) ((lambda (y3b3d@ids y3b3e@z) (call-with-values (lambda () (y3af8@cvt* y3b2f@ys y3afc@n y3b3d@ids)) (lambda (y3b45@y3b42 y3b46@y3b44) ((lambda (y3b49@ids y3b4a@ys) (call-with-values (lambda () (y3afa@cvt y3b2d@x (+ y3afc@n '1) y3b49@ids)) (lambda (y3b51@y3b4e y3b52@y3b50) ((lambda (y3b55@ids y3b56@x) (values (vector 'each+ y3b56@x (reverse y3b4a@ys) y3b3e@z) y3b55@ids)) y3b52@y3b50 y3b51@y3b4e)))) y3b46@y3b44 y3b45@y3b42)))) y3b3a@y3b38 y3b39@y3b36)))) y3b23@ls/false) ((lambda (y3b59@t) ((lambda (y3b5b@ls/false) (if y3b5b@ls/false (apply (lambda (y3b5d@x y3b5e@y) (call-with-values (lambda () (y3afa@cvt y3b5e@y y3afc@n y3afd@ids)) (lambda (y3b65@y3b62 y3b66@y3b64) ((lambda (y3b69@ids y3b6a@y) (call-with-values (lambda () (y3afa@cvt y3b5d@x y3afc@n y3b69@ids)) (lambda (y3b71@y3b6e y3b72@y3b70) ((lambda (y3b75@ids y3b76@x) (values (cons y3b76@x y3b6a@y) y3b75@ids)) y3b72@y3b70 y3b71@y3b6e)))) y3b66@y3b64 y3b65@y3b62)))) y3b5b@ls/false) ((lambda (y3b79@t) ((lambda (y3b7b@ls/false) (if y3b7b@ls/false (apply (lambda () (values '() y3afd@ids)) y3b7b@ls/false) ((lambda (y3b7d@t) ((lambda (y3b7f@ls/false) (if (and y3b7f@ls/false (apply (lambda (y3b81@p) (not (y2cb8@stx? y3b81@p))) y3b7f@ls/false)) (apply (lambda (y3b83@p) (call-with-values (lambda () (y3afa@cvt y3b83@p y3afc@n y3afd@ids)) (lambda (y3b89@y3b86 y3b8a@y3b88) ((lambda (y3b8d@ids y3b8e@p) (values (vector 'vector y3b8e@p) y3b8d@ids)) y3b8a@y3b88 y3b89@y3b86)))) y3b7f@ls/false) ((lambda (y3b91@t) ((lambda (y3b93@ls/false) (if y3b93@ls/false (apply (lambda (y3b95@datum) (values (vector 'atom (y2d06@stx->datum y3b95@datum)) y3afd@ids)) y3b93@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3b91@t))) (y2efb@syntax-dispatch y3b91@t 'any))) y3b7d@t))) (y2efb@syntax-dispatch y3b7d@t '#(vector each-any)))) y3b79@t))) (y2efb@syntax-dispatch y3b79@t '()))) y3b59@t))) (y2efb@syntax-dispatch y3b59@t '(any . any)))) y3b21@t))) (y2efb@syntax-dispatch y3b21@t '(any any . #(each+ any () any))))) y3b09@t))) (y2efb@syntax-dispatch y3b09@t '(any any)))) y3b01@t))) (y2efb@syntax-dispatch y3b01@t 'any))) y3afb@p))) (y3afa@cvt y3af3@pattern '0 '()))) '#f '#f))) (set! y2efb@syntax-dispatch ((lambda () ((lambda (y3bb6@stx^ y3bb8@match-each y3bba@match-each+ y3bbc@match-each-any y3bbe@match-empty y3bc0@combine y3bc2@match* y3bc4@match) (begin (set! y3bb6@stx^ (lambda (y3c91@e y3c92@m* y3c93@s* y3c94@ae*) (if (and (null? y3c92@m*) (null? y3c93@s*) (null? y3c94@ae*)) y3c91@e (y2cd8@mkstx y3c91@e y3c92@m* y3c93@s* y3c94@ae*)))) (set! y3bb8@match-each (lambda (y3c71@e y3c72@p y3c73@m* y3c74@s* y3c75@ae*) (if (pair? y3c71@e) ((lambda (y3c7b@first) (and y3c7b@first ((lambda (y3c7d@rest) (and y3c7d@rest (cons y3c7b@first y3c7d@rest))) (y3bb8@match-each (cdr y3c71@e) y3c72@p y3c73@m* y3c74@s* y3c75@ae*)))) (y3bc4@match (car y3c71@e) y3c72@p y3c73@m* y3c74@s* y3c75@ae* '())) (if (null? y3c71@e) '() (if (y2cb8@stx? y3c71@e) (and (not (y2c6e@top-marked? y3c73@m*)) (call-with-values (lambda () (y2cd6@join-wraps y3c73@m* y3c74@s* y3c75@ae* y3c71@e)) (lambda (y3c85@y3c80 y3c86@y3c82 y3c87@y3c84) ((lambda (y3c8b@ae* y3c8c@s* y3c8d@m*) (y3bb8@match-each (y2cbc@stx-expr y3c71@e) y3c72@p y3c8d@m* y3c8c@s* y3c8b@ae*)) y3c87@y3c84 y3c86@y3c82 y3c85@y3c80)))) (if (y288f@y27ae@annotation? y3c71@e) (y3bb8@match-each (y2891@y27b2@annotation-expression y3c71@e) y3c72@p y3c73@m* y3c74@s* y3c75@ae*) '#f)))))) (set! y3bba@match-each+ (lambda (y3c31@e y3c32@x-pat y3c33@y-pat y3c34@z-pat y3c35@m* y3c36@s* y3c37@ae* y3c38@r) ((letrec ((y3c41@f (lambda (y3c43@e y3c44@m* y3c45@s* y3c46@ae*) (if (pair? y3c43@e) (call-with-values (lambda () (y3c41@f (cdr y3c43@e) y3c44@m* y3c45@s* y3c46@ae*)) (lambda (y3c51@y3c4c y3c52@y3c4e y3c53@y3c50) ((lambda (y3c57@r y3c58@y-pat y3c59@xr*) (if y3c57@r (if (null? y3c58@y-pat) ((lambda (y3c5d@xr) (if y3c5d@xr (values (cons y3c5d@xr y3c59@xr*) y3c58@y-pat y3c57@r) (values '#f '#f '#f))) (y3bc4@match (car y3c43@e) y3c32@x-pat y3c44@m* y3c45@s* y3c46@ae* '())) (values '() (cdr y3c58@y-pat) (y3bc4@match (car y3c43@e) (car y3c58@y-pat) y3c44@m* y3c45@s* y3c46@ae* y3c57@r))) (values '#f '#f '#f))) y3c53@y3c50 y3c52@y3c4e y3c51@y3c4c))) (if (y2cb8@stx? y3c43@e) (if (y2c6e@top-marked? y3c44@m*) (values '() y3c33@y-pat (y3bc4@match y3c43@e y3c34@z-pat y3c44@m* y3c45@s* y3c46@ae* y3c38@r)) (call-with-values (lambda () (y2cd6@join-wraps y3c44@m* y3c45@s* y3c46@ae* y3c43@e)) (lambda (y3c65@y3c60 y3c66@y3c62 y3c67@y3c64) ((lambda (y3c6b@ae* y3c6c@s* y3c6d@m*) (y3c41@f (y2cbc@stx-expr y3c43@e) y3c6d@m* y3c6c@s* y3c6b@ae*)) y3c67@y3c64 y3c66@y3c62 y3c65@y3c60)))) (if (y288f@y27ae@annotation? y3c43@e) (y3c41@f (y2891@y27b2@annotation-expression y3c43@e) y3c44@m* y3c45@s* y3c46@ae*) (values '() y3c33@y-pat (y3bc4@match y3c43@e y3c34@z-pat y3c44@m* y3c45@s* y3c46@ae* y3c38@r)))))))) y3c41@f) y3c31@e y3c35@m* y3c36@s* y3c37@ae*))) (set! y3bbc@match-each-any (lambda (y3c15@e y3c16@m* y3c17@s* y3c18@ae*) (if (pair? y3c15@e) ((lambda (y3c1d@l) (and y3c1d@l (cons (y3bb6@stx^ (car y3c15@e) y3c16@m* y3c17@s* y3c18@ae*) y3c1d@l))) (y3bbc@match-each-any (cdr y3c15@e) y3c16@m* y3c17@s* y3c18@ae*)) (if (null? y3c15@e) '() (if (y2cb8@stx? y3c15@e) (and (not (y2c6e@top-marked? y3c16@m*)) (call-with-values (lambda () (y2cd6@join-wraps y3c16@m* y3c17@s* y3c18@ae* y3c15@e)) (lambda (y3c25@y3c20 y3c26@y3c22 y3c27@y3c24) ((lambda (y3c2b@ae* y3c2c@s* y3c2d@m*) (y3bbc@match-each-any (y2cbc@stx-expr y3c15@e) y3c2d@m* y3c2c@s* y3c2b@ae*)) y3c27@y3c24 y3c26@y3c22 y3c25@y3c20)))) (if (y288f@y27ae@annotation? y3c15@e) (y3bbc@match-each-any (y2891@y27b2@annotation-expression y3c15@e) y3c16@m* y3c17@s* y3c18@ae*) '#f)))))) (set! y3bbe@match-empty (lambda (y3c0f@p y3c10@r) (if (null? y3c0f@p) y3c10@r (if (eq? y3c0f@p '_) y3c10@r (if (eq? y3c0f@p 'any) (cons '() y3c10@r) (if (pair? y3c0f@p) (y3bbe@match-empty (car y3c0f@p) (y3bbe@match-empty (cdr y3c0f@p) y3c10@r)) (if (eq? y3c0f@p 'each-any) (cons '() y3c10@r) ((lambda (y3c13@t) (if (memv y3c13@t '(each)) (y3bbe@match-empty (vector-ref y3c0f@p '1) y3c10@r) (if (memv y3c13@t '(each+)) (y3bbe@match-empty (vector-ref y3c0f@p '1) (y3bbe@match-empty (reverse (vector-ref y3c0f@p '2)) (y3bbe@match-empty (vector-ref y3c0f@p '3) y3c10@r))) (if (memv y3c13@t '(free-id atom)) y3c10@r (if (memv y3c13@t '(scheme-id atom)) y3c10@r (if (memv y3c13@t '(vector)) (y3bbe@match-empty (vector-ref y3c0f@p '1) y3c10@r) (assertion-violation 'syntax-dispatch '"invalid pattern" y3c0f@p))))))) (vector-ref y3c0f@p '0))))))))) (set! y3bc0@combine (lambda (y3c0b@r* y3c0c@r) (if (null? (car y3c0b@r*)) y3c0c@r (cons (map car y3c0b@r*) (y3bc0@combine (map cdr y3c0b@r*) y3c0c@r))))) (set! y3bc2@match* (lambda (y3be7@e y3be8@p y3be9@m* y3bea@s* y3beb@ae* y3bec@r) (if (null? y3be8@p) (and (null? y3be7@e) y3bec@r) (if (pair? y3be8@p) (and (pair? y3be7@e) (y3bc4@match (car y3be7@e) (car y3be8@p) y3be9@m* y3bea@s* y3beb@ae* (y3bc4@match (cdr y3be7@e) (cdr y3be8@p) y3be9@m* y3bea@s* y3beb@ae* y3bec@r))) (if (eq? y3be8@p 'each-any) ((lambda (y3bf3@l) (and y3bf3@l (cons y3bf3@l y3bec@r))) (y3bbc@match-each-any y3be7@e y3be9@m* y3bea@s* y3beb@ae*)) ((lambda (y3bf5@t) (if (memv y3bf5@t '(each)) (if (null? y3be7@e) (y3bbe@match-empty (vector-ref y3be8@p '1) y3bec@r) ((lambda (y3bf7@r*) (and y3bf7@r* (y3bc0@combine y3bf7@r* y3bec@r))) (y3bb8@match-each y3be7@e (vector-ref y3be8@p '1) y3be9@m* y3bea@s* y3beb@ae*))) (if (memv y3bf5@t '(free-id)) (and (symbol? y3be7@e) (y2c6e@top-marked? y3be9@m*) (y2cf8@free-id=? (y3bb6@stx^ y3be7@e y3be9@m* y3bea@s* y3beb@ae*) (vector-ref y3be8@p '1)) y3bec@r) (if (memv y3bf5@t '(scheme-id)) (and (symbol? y3be7@e) (y2c6e@top-marked? y3be9@m*) (y2cf8@free-id=? (y3bb6@stx^ y3be7@e y3be9@m* y3bea@s* y3beb@ae*) (y2e85@scheme-stx (vector-ref y3be8@p '1))) y3bec@r) (if (memv y3bf5@t '(each+)) (call-with-values (lambda () (y3bba@match-each+ y3be7@e (vector-ref y3be8@p '1) (vector-ref y3be8@p '2) (vector-ref y3be8@p '3) y3be9@m* y3bea@s* y3beb@ae* y3bec@r)) (lambda (y3bff@y3bfa y3c00@y3bfc y3c01@y3bfe) ((lambda (y3c05@r y3c06@y-pat y3c07@xr*) (and y3c05@r (null? y3c06@y-pat) (if (null? y3c07@xr*) (y3bbe@match-empty (vector-ref y3be8@p '1) y3c05@r) (y3bc0@combine y3c07@xr* y3c05@r)))) y3c01@y3bfe y3c00@y3bfc y3bff@y3bfa))) (if (memv y3bf5@t '(atom)) (and (fast-equal? (vector-ref y3be8@p '1) (y2d04@strip y3be7@e y3be9@m*)) y3bec@r) (if (memv y3bf5@t '(vector)) (and (vector? y3be7@e) (y3bc4@match (vector->list y3be7@e) (vector-ref y3be8@p '1) y3be9@m* y3bea@s* y3beb@ae* y3bec@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" y3be8@p)))))))) (vector-ref y3be8@p '0))))))) (set! y3bc4@match (lambda (y3bc9@e y3bca@p y3bcb@m* y3bcc@s* y3bcd@ae* y3bce@r) (if (not y3bce@r) '#f (if (eq? y3bca@p '_) y3bce@r (if (eq? y3bca@p 'any) (cons (y3bb6@stx^ y3bc9@e y3bcb@m* y3bcc@s* y3bcd@ae*) y3bce@r) (if (y2cb8@stx? y3bc9@e) (and (not (y2c6e@top-marked? y3bcb@m*)) (call-with-values (lambda () (y2cd6@join-wraps y3bcb@m* y3bcc@s* y3bcd@ae* y3bc9@e)) (lambda (y3bdb@y3bd6 y3bdc@y3bd8 y3bdd@y3bda) ((lambda (y3be1@ae* y3be2@s* y3be3@m*) (y3bc4@match (y2cbc@stx-expr y3bc9@e) y3bca@p y3be3@m* y3be2@s* y3be1@ae* y3bce@r)) y3bdd@y3bda y3bdc@y3bd8 y3bdb@y3bd6)))) (if (y288f@y27ae@annotation? y3bc9@e) (y3bc4@match (y2891@y27b2@annotation-expression y3bc9@e) y3bca@p y3bcb@m* y3bcc@s* y3bcd@ae* y3bce@r) (y3bc2@match* y3bc9@e y3bca@p y3bcb@m* y3bcc@s* y3bcd@ae* y3bce@r)))))))) (lambda (y3bc5@e y3bc6@p) (y3bc4@match y3bc5@e y3bc6@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! y2efd@ellipsis? (lambda (y3c99@x) (and (y2cf0@id? y3c99@x) (y2cf8@free-id=? y3c99@x (y2e85@scheme-stx '...))))) (set! y2eff@underscore? (lambda (y3c9b@x) (and (y2cf0@id? y3c9b@x) (y2cf8@free-id=? y3c9b@x (y2e85@scheme-stx '_))))) (set! y2f01@verify-literals (lambda (y3c9d@lits y3c9e@expr) (for-each (lambda (y3ca1@x) (if (or (not (y2cf0@id? y3ca1@x)) (y2efd@ellipsis? y3ca1@x) (y2eff@underscore? y3ca1@x)) (y2fe4@syntax-violation '#f '"invalid literal" y3c9e@expr y3ca1@x) (void))) y3c9d@lits))) (set! y2f03@syntax-case-transformer ((lambda () ((lambda (y3ca4@build-dispatch-call y3ca6@invalid-ids-error y3ca8@gen-clause y3caa@gen-syntax-case) (begin (set! y3ca4@build-dispatch-call (lambda (y3d15@pvars y3d16@expr y3d17@y y3d18@r y3d19@mr) ((lambda (y3d1f@ids y3d20@levels) ((lambda (y3d23@labels y3d24@new-vars) ((lambda (y3d27@body) (list '(primitive apply) (y2c4c@y2b8c@build-lambda '#f y3d24@new-vars y3d27@body) y3d17@y)) (y2f1d@chi-expr (y2cdc@add-subst (y2cab@make-full-rib y3d1f@ids y3d23@labels) y3d16@expr) (append (map (lambda (y3d29@label y3d2a@var y3d2b@level) (cons y3d29@label (y2d10@make-binding 'syntax (cons y3d2a@var y3d2b@level)))) y3d23@labels y3d24@new-vars (map cdr y3d15@pvars)) y3d18@r) y3d19@mr))) (map y2c74@gen-label y3d1f@ids) (map y2c70@gen-lexical y3d1f@ids))) (map car y3d15@pvars) (map cdr y3d15@pvars)))) (set! y3ca6@invalid-ids-error (lambda (y3d09@id* y3d0a@e y3d0b@class) ((letrec ((y3d0f@find (lambda (y3d11@id* y3d12@ok*) (if (null? y3d11@id*) (y2fe4@syntax-violation '#f '"invalid syntax" y3d0a@e) (if (y2cf0@id? (car y3d11@id*)) (if (y2cfe@bound-id-member? (car y3d11@id*) y3d12@ok*) (y2fe0@syntax-error (car y3d11@id*) '"duplicate " y3d0b@class) (y3d0f@find (cdr y3d11@id*) (cons (car y3d11@id*) y3d12@ok*))) (y2fe0@syntax-error (car y3d11@id*) '"invalid " y3d0b@class)))))) y3d0f@find) y3d09@id* '()))) (set! y3ca8@gen-clause (lambda (y3ce1@x y3ce2@keys y3ce3@clauses y3ce4@r y3ce5@mr y3ce6@pat y3ce7@fender y3ce8@expr) (call-with-values (lambda () (y2ef9@convert-pattern y3ce6@pat y3ce2@keys)) (lambda (y3cf5@y3cf2 y3cf6@y3cf4) ((lambda (y3cf9@pvars y3cfa@p) (if (not (y2cfc@distinct-bound-ids? (map car y3cf9@pvars))) (y3ca6@invalid-ids-error (map car y3cf9@pvars) y3ce6@pat '"pattern variable") (if (not (for-all (lambda (y3cfd@x) (not (y2efd@ellipsis? (car y3cfd@x)))) y3cf9@pvars)) (y2fe4@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" y3ce6@pat) ((lambda (y3cff@y) ((lambda (y3d01@test) ((lambda (y3d03@conseq) ((lambda (y3d05@altern) (list (y2c4c@y2b8c@build-lambda '#f (list y3cff@y) (list 'if y3d01@test y3d03@conseq y3d05@altern)) (list '(primitive syntax-dispatch) y3ce1@x (list 'quote y3cfa@p)))) (y3caa@gen-syntax-case y3ce1@x y3ce2@keys y3ce3@clauses y3ce4@r y3ce5@mr))) (y3ca4@build-dispatch-call y3cf9@pvars y3ce8@expr y3cff@y y3ce4@r y3ce5@mr))) (if (eq? y3ce7@fender '#t) y3cff@y ((lambda (y3d07@call) (list 'if y3cff@y y3d07@call (list 'quote '#f))) (y3ca4@build-dispatch-call y3cf9@pvars y3ce7@fender y3cff@y y3ce4@r y3ce5@mr))))) (y2c70@gen-lexical 'tmp))))) y3cf6@y3cf4 y3cf5@y3cf2))))) (set! y3caa@gen-syntax-case (lambda (y3cbf@x y3cc0@keys y3cc1@clauses y3cc2@r y3cc3@mr) (if (null? y3cc1@clauses) (list '(primitive syntax-error) y3cbf@x) ((lambda (y3cc9@t) ((lambda (y3ccb@ls/false) (if y3ccb@ls/false (apply (lambda (y3ccd@pat y3cce@expr) (if (and (y2cf0@id? y3ccd@pat) (not (y2cfe@bound-id-member? y3ccd@pat y3cc0@keys)) (not (y2efd@ellipsis? y3ccd@pat))) (if (y2cf8@free-id=? y3ccd@pat (y2e85@scheme-stx '_)) (y2f1d@chi-expr y3cce@expr y3cc2@r y3cc3@mr) ((lambda (y3cd1@lab y3cd2@lex) ((lambda (y3cd5@body) (list (y2c4c@y2b8c@build-lambda '#f (list y3cd2@lex) y3cd5@body) y3cbf@x)) (y2f1d@chi-expr (y2cdc@add-subst (y2cab@make-full-rib (list y3ccd@pat) (list y3cd1@lab)) y3cce@expr) (cons (cons y3cd1@lab (y2d10@make-binding 'syntax (cons y3cd2@lex '0))) y3cc2@r) y3cc3@mr))) (y2c74@gen-label y3ccd@pat) (y2c70@gen-lexical y3ccd@pat))) (y3ca8@gen-clause y3cbf@x y3cc0@keys (cdr y3cc1@clauses) y3cc2@r y3cc3@mr y3ccd@pat '#t y3cce@expr))) y3ccb@ls/false) ((lambda (y3cd7@t) ((lambda (y3cd9@ls/false) (if y3cd9@ls/false (apply (lambda (y3cdb@pat y3cdc@fender y3cdd@expr) (y3ca8@gen-clause y3cbf@x y3cc0@keys (cdr y3cc1@clauses) y3cc2@r y3cc3@mr y3cdb@pat y3cdc@fender y3cdd@expr)) y3cd9@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3cd7@t))) (y2efb@syntax-dispatch y3cd7@t '(any any any)))) y3cc9@t))) (y2efb@syntax-dispatch y3cc9@t '(any any)))) (car y3cc1@clauses))))) (lambda (y3cab@e y3cac@r y3cad@mr) ((lambda (y3cb1@t) ((lambda (y3cb3@ls/false) (if y3cb3@ls/false (apply (lambda (y3cb5@expr y3cb6@keys y3cb7@clauses) (begin (y2f01@verify-literals y3cb6@keys y3cab@e) ((lambda (y3cbb@x) ((lambda (y3cbd@body) (list (y2c4c@y2b8c@build-lambda '#f (list y3cbb@x) y3cbd@body) (y2f1d@chi-expr y3cb5@expr y3cac@r y3cad@mr))) (y3caa@gen-syntax-case y3cbb@x y3cb6@keys y3cb7@clauses y3cac@r y3cad@mr))) (y2c70@gen-lexical 'tmp)))) y3cb3@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3cb1@t))) (y2efb@syntax-dispatch y3cb1@t '(_ any each-any . each-any)))) y3cab@e)))) '#f '#f '#f '#f)))) (set! y2f05@ellipsis-map (lambda (y3d2f@proc y3d30@ls . y3d33@ls*) ((lambda (y3d36@who) (begin (set! y3d36@who '...) (begin (if (not (list? y3d30@ls)) (assertion-violation y3d36@who '"not a list" y3d30@ls) (void)) (if (not (null? y3d33@ls*)) ((lambda (y3d37@n) (for-each (lambda (y3d39@x) (begin (if (not (list? y3d39@x)) (assertion-violation y3d36@who '"not a list" y3d39@x) (void)) (if (not (= (length y3d39@x) y3d37@n)) (assertion-violation y3d36@who '"length mismatch" y3d30@ls y3d39@x) (void)))) y3d33@ls*)) (length y3d30@ls)) (void)) (apply map y3d2f@proc y3d30@ls y3d33@ls*)))) '#f))) (set! y2f07@syntax-transformer ((lambda () ((lambda (y3d3c@gen-syntax y3d3e@gen-ref y3d40@gen-append y3d42@gen-mappend y3d44@gen-map y3d46@gen-cons y3d48@gen-vector y3d4a@regen) (begin (set! y3d3c@gen-syntax (lambda (y3db3@src y3db4@e y3db5@r y3db6@maps y3db7@ellipsis? y3db8@vec?) ((lambda (y3dbf@t) ((lambda (y3dc1@ls/false) (if (and y3dc1@ls/false (apply (lambda (y3dc3@dots) (y3db7@ellipsis? y3dc3@dots)) y3dc1@ls/false)) (apply (lambda (y3dc5@dots) (y2fe4@syntax-violation '#f '"misplaced ellipsis in syntax form" y3db3@src)) y3dc1@ls/false) ((lambda (y3dc7@t) ((lambda (y3dc9@ls/false) (if (and y3dc9@ls/false (apply (lambda (y3dcb@id) (y2cf0@id? y3dcb@id)) y3dc9@ls/false)) (apply (lambda (y3dcd@id) ((lambda (y3dcf@label) ((lambda (y3dd1@b) ((lambda () (if (eq? (y2d12@binding-type y3dd1@b) 'syntax) (call-with-values (lambda () ((lambda (y3dd7@var.lev) (y3d3e@gen-ref y3db3@src (car y3dd7@var.lev) (cdr y3dd7@var.lev) y3db6@maps)) (y2d14@binding-value y3dd1@b))) (lambda (y3dd9@y3dd4 y3dda@y3dd6) ((lambda (y3ddd@maps y3dde@var) (values (list 'ref y3dde@var) y3ddd@maps)) y3dda@y3dd6 y3dd9@y3dd4))) (values (list 'quote y3db4@e) y3db6@maps))))) (y2d0e@label->binding y3dcf@label y3db5@r))) (y2d0a@id->label y3db4@e))) y3dc9@ls/false) ((lambda (y3de1@t) ((lambda (y3de3@ls/false) (if (and y3de3@ls/false (apply (lambda (y3de5@dots y3de6@e) (y3db7@ellipsis? y3de5@dots)) y3de3@ls/false)) (apply (lambda (y3de9@dots y3dea@e) (if y3db8@vec? (y2fe4@syntax-violation '#f '"misplaced ellipsis in syntax form" y3db3@src) (y3d3c@gen-syntax y3db3@src y3dea@e y3db5@r y3db6@maps (lambda (y3ded@x) '#f) '#f))) y3de3@ls/false) ((lambda (y3def@t) ((lambda (y3df1@ls/false) (if (and y3df1@ls/false (apply (lambda (y3df3@x y3df4@dots y3df5@y) (y3db7@ellipsis? y3df4@dots)) y3df1@ls/false)) (apply (lambda (y3df9@x y3dfa@dots y3dfb@y) ((letrec ((y3dff@f (lambda (y3e01@y y3e02@k) ((lambda (y3e05@t) ((lambda (y3e07@ls/false) (if y3e07@ls/false (apply (lambda () (y3e02@k y3db6@maps)) y3e07@ls/false) ((lambda (y3e09@t) ((lambda (y3e0b@ls/false) (if (and y3e0b@ls/false (apply (lambda (y3e0d@dots y3e0e@y) (y3db7@ellipsis? y3e0d@dots)) y3e0b@ls/false)) (apply (lambda (y3e11@dots y3e12@y) (y3dff@f y3e12@y (lambda (y3e15@maps) (call-with-values (lambda () (y3e02@k (cons '() y3e15@maps))) (lambda (y3e1b@y3e18 y3e1c@y3e1a) ((lambda (y3e1f@maps y3e20@x) (if (null? (car y3e1f@maps)) (y2fe4@syntax-violation '#f '"extra ellipsis in syntax form" y3db3@src) (values (y3d42@gen-mappend y3e20@x (car y3e1f@maps)) (cdr y3e1f@maps)))) y3e1c@y3e1a y3e1b@y3e18)))))) y3e0b@ls/false) ((lambda (y3e23@t) ((lambda (y3e25@ls/false) (if y3e25@ls/false (apply (lambda () (call-with-values (lambda () (y3d3c@gen-syntax y3db3@src y3e01@y y3db5@r y3db6@maps y3db7@ellipsis? y3db8@vec?)) (lambda (y3e2b@y3e28 y3e2c@y3e2a) ((lambda (y3e2f@maps y3e30@y) (call-with-values (lambda () (y3e02@k y3e2f@maps)) (lambda (y3e37@y3e34 y3e38@y3e36) ((lambda (y3e3b@maps y3e3c@x) (values (y3d40@gen-append y3e3c@x y3e30@y) y3e3b@maps)) y3e38@y3e36 y3e37@y3e34)))) y3e2c@y3e2a y3e2b@y3e28)))) y3e25@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3e23@t))) (y2efb@syntax-dispatch y3e23@t '_))) y3e09@t))) (y2efb@syntax-dispatch y3e09@t '(any . any)))) y3e05@t))) (y2efb@syntax-dispatch y3e05@t '()))) y3e01@y)))) y3dff@f) y3dfb@y (lambda (y3e3f@maps) (call-with-values (lambda () (y3d3c@gen-syntax y3db3@src y3df9@x y3db5@r (cons '() y3e3f@maps) y3db7@ellipsis? '#f)) (lambda (y3e45@y3e42 y3e46@y3e44) ((lambda (y3e49@maps y3e4a@x) (if (null? (car y3e49@maps)) (y2fe4@syntax-violation '#f '"extra ellipsis in syntax form" y3db3@src) (values (y3d44@gen-map y3e4a@x (car y3e49@maps)) (cdr y3e49@maps)))) y3e46@y3e44 y3e45@y3e42)))))) y3df1@ls/false) ((lambda (y3e4d@t) ((lambda (y3e4f@ls/false) (if y3e4f@ls/false (apply (lambda (y3e51@x y3e52@y) (call-with-values (lambda () (y3d3c@gen-syntax y3db3@src y3e51@x y3db5@r y3db6@maps y3db7@ellipsis? '#f)) (lambda (y3e59@y3e56 y3e5a@y3e58) ((lambda (y3e5d@maps y3e5e@xnew) (call-with-values (lambda () (y3d3c@gen-syntax y3db3@src y3e52@y y3db5@r y3e5d@maps y3db7@ellipsis? y3db8@vec?)) (lambda (y3e65@y3e62 y3e66@y3e64) ((lambda (y3e69@maps y3e6a@ynew) (values (y3d46@gen-cons y3db4@e y3e51@x y3e52@y y3e5e@xnew y3e6a@ynew) y3e69@maps)) y3e66@y3e64 y3e65@y3e62)))) y3e5a@y3e58 y3e59@y3e56)))) y3e4f@ls/false) ((lambda (y3e6d@t) ((lambda (y3e6f@ls/false) (if y3e6f@ls/false (apply (lambda (y3e71@ls) (call-with-values (lambda () (y3d3c@gen-syntax y3db3@src y3e71@ls y3db5@r y3db6@maps y3db7@ellipsis? '#t)) (lambda (y3e77@y3e74 y3e78@y3e76) ((lambda (y3e7b@maps y3e7c@lsnew) (values (y3d48@gen-vector y3db4@e y3e71@ls y3e7c@lsnew) y3e7b@maps)) y3e78@y3e76 y3e77@y3e74)))) y3e6f@ls/false) ((lambda (y3e7f@t) ((lambda (y3e81@ls/false) (if y3e81@ls/false (apply (lambda () (values (list 'quote y3db4@e) y3db6@maps)) y3e81@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3e7f@t))) (y2efb@syntax-dispatch y3e7f@t '_))) y3e6d@t))) (y2efb@syntax-dispatch y3e6d@t '#(vector each-any)))) y3e4d@t))) (y2efb@syntax-dispatch y3e4d@t '(any . any)))) y3def@t))) (y2efb@syntax-dispatch y3def@t '(any any . any)))) y3de1@t))) (y2efb@syntax-dispatch y3de1@t '(any any)))) y3dc7@t))) (y2efb@syntax-dispatch y3dc7@t 'any))) y3dbf@t))) (y2efb@syntax-dispatch y3dbf@t 'any))) y3db4@e))) (set! y3d3e@gen-ref (lambda (y3d99@src y3d9a@var y3d9b@level y3d9c@maps) (if (= y3d9b@level '0) (values y3d9a@var y3d9c@maps) (if (null? y3d9c@maps) (y2fe4@syntax-violation '#f '"missing ellipsis in syntax form" y3d99@src) (call-with-values (lambda () (y3d3e@gen-ref y3d99@src y3d9a@var (- y3d9b@level '1) (cdr y3d9c@maps))) (lambda (y3da5@y3da2 y3da6@y3da4) ((lambda (y3da9@outer-maps y3daa@outer-var) ((lambda (y3dad@t) (if y3dad@t ((lambda (y3daf@b) (values (cdr y3daf@b) y3d9c@maps)) y3dad@t) ((lambda (y3db1@inner-var) (values y3db1@inner-var (cons (cons (cons y3daa@outer-var y3db1@inner-var) (car y3d9c@maps)) y3da9@outer-maps))) (y2c70@gen-lexical 'tmp)))) (assq y3daa@outer-var (car y3d9c@maps)))) y3da6@y3da4 y3da5@y3da2))))))) (set! y3d40@gen-append (lambda (y3d95@x y3d96@y) (if (fast-equal? y3d96@y ''()) y3d95@x (list 'append y3d95@x y3d96@y)))) (set! y3d42@gen-mappend (lambda (y3d91@e y3d92@map-env) (list 'apply '(primitive append) (y3d44@gen-map y3d91@e y3d92@map-env)))) (set! y3d44@gen-map (lambda (y3d7f@e y3d80@map-env) ((lambda (y3d83@formals y3d84@actuals) (if (eq? (car y3d7f@e) 'ref) (car y3d84@actuals) (if (for-all (lambda (y3d87@x) (and (eq? (car y3d87@x) 'ref) (memq (cadr y3d87@x) y3d83@formals))) (cdr y3d7f@e)) ((lambda (y3d89@args) (cons 'map (cons (list 'primitive (car y3d7f@e)) y3d89@args))) (map ((lambda (y3d8b@r) (lambda (y3d8d@x) (cdr (assq (cadr y3d8d@x) y3d8b@r)))) (map cons y3d83@formals y3d84@actuals)) (cdr y3d7f@e))) (cons* 'map (list 'lambda y3d83@formals y3d7f@e) y3d84@actuals)))) (map cdr y3d80@map-env) (map (lambda (y3d8f@x) (list 'ref (car y3d8f@x))) y3d80@map-env)))) (set! y3d46@gen-cons (lambda (y3d6f@e y3d70@x y3d71@y y3d72@xnew y3d73@ynew) ((lambda (y3d79@t) (if (memv y3d79@t '(quote)) (if (eq? (car y3d72@xnew) 'quote) ((lambda (y3d7b@xnew y3d7c@ynew) (if (and (eq? y3d7b@xnew y3d70@x) (eq? y3d7c@ynew y3d71@y)) (list 'quote y3d6f@e) (list 'quote (cons y3d7b@xnew y3d7c@ynew)))) (cadr y3d72@xnew) (cadr y3d73@ynew)) (if (null? (cadr y3d73@ynew)) (list 'list y3d72@xnew) (list 'cons y3d72@xnew y3d73@ynew))) (if (memv y3d79@t '(list)) (cons 'list (cons y3d72@xnew (cdr y3d73@ynew))) (list 'cons y3d72@xnew y3d73@ynew)))) (car y3d73@ynew)))) (set! y3d48@gen-vector (lambda (y3d69@e y3d6a@ls y3d6b@lsnew) (if (eq? (car y3d6b@lsnew) 'quote) (if (eq? (cadr y3d6b@lsnew) y3d6a@ls) (list 'quote y3d69@e) (list 'quote (list->vector (cadr y3d6b@lsnew)))) (if (eq? (car y3d6b@lsnew) 'list) (cons 'vector (cdr y3d6b@lsnew)) (list 'list->vector y3d6b@lsnew))))) (set! y3d4a@regen (lambda (y3d63@x) ((lambda (y3d65@t) (if (memv y3d65@t '(ref)) (cadr y3d63@x) (if (memv y3d65@t '(primitive)) (list 'primitive (cadr y3d63@x)) (if (memv y3d65@t '(quote)) (list 'quote (cadr y3d63@x)) (if (memv y3d65@t '(lambda)) (y2c4c@y2b8c@build-lambda '#f (cadr y3d63@x) (y3d4a@regen (caddr y3d63@x))) (if (memv y3d65@t '(map)) ((lambda (y3d67@ls) (cons '(primitive ellipsis-map) y3d67@ls)) (map y3d4a@regen (cdr y3d63@x))) (cons (list 'primitive (car y3d63@x)) (map y3d4a@regen (cdr y3d63@x))))))))) (car y3d63@x)))) (lambda (y3d4b@e y3d4c@r y3d4d@mr) ((lambda (y3d51@t) ((lambda (y3d53@ls/false) (if y3d53@ls/false (apply (lambda (y3d55@x) (call-with-values (lambda () (y3d3c@gen-syntax y3d4b@e y3d55@x y3d4c@r '() y2efd@ellipsis? '#f)) (lambda (y3d5b@y3d58 y3d5c@y3d5a) ((lambda (y3d5f@maps y3d60@e) (y3d4a@regen y3d60@e)) y3d5c@y3d5a y3d5b@y3d58)))) y3d53@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3d51@t))) (y2efb@syntax-dispatch y3d51@t '(_ any)))) y3d4b@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! y2f09@core-macro-transformer (lambda (y3e83@name) ((lambda (y3e85@t) (if (memv y3e85@t '(quote)) y2eab@quote-transformer (if (memv y3e85@t '(lambda)) y2eaf@lambda-transformer (if (memv y3e85@t '(case-lambda)) y2ead@case-lambda-transformer (if (memv y3e85@t '(letrec)) y2e93@letrec-transformer (if (memv y3e85@t '(letrec*)) y2e95@letrec*-transformer (if (memv y3e85@t '(if)) y2ea3@if-transformer (if (memv y3e85@t '(and)) y2ea5@and-transformer (if (memv y3e85@t '(or)) y2ea7@or-transformer (if (memv y3e85@t '(foreign-call)) y2ef7@foreign-call-transformer (if (memv y3e85@t '(syntax-case)) y2f03@syntax-case-transformer (if (memv y3e85@t '(syntax)) y2f07@syntax-transformer (if (memv y3e85@t '(type-descriptor)) y2e99@type-descriptor-transformer (if (memv y3e85@t '(record-type-descriptor)) y2e9b@record-type-descriptor-transformer (if (memv y3e85@t '(record-constructor-descriptor)) y2e9d@record-constructor-descriptor-transformer (if (memv y3e85@t '(fluid-let-syntax)) y2e97@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" y3e83@name))))))))))))))))) y3e83@name))) (set! y2f0b@symbol-macro (lambda (y3e87@x y3e88@set) ((lambda (y3e8b@t) ((lambda (y3e8d@ls/false) (if (and y3e8d@ls/false (apply (lambda (y3e8f@name) (and (y2cf0@id? y3e8f@name) (memq (y2cf2@id->sym y3e8f@name) y3e88@set))) y3e8d@ls/false)) (apply (lambda (y3e91@name) (y2eb1@bless (list 'quote y3e91@name))) y3e8d@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3e8b@t))) (y2efb@syntax-dispatch y3e8b@t '(_ any)))) y3e87@x))) (set! y2f0d@macro-transformer (lambda (y3e93@x) (if (procedure? y3e93@x) y3e93@x (if (symbol? y3e93@x) ((lambda (y3e95@t) (if (memv y3e95@t '(define-record-type)) y2eef@define-record-type-macro (if (memv y3e95@t '(define-struct)) y2eed@define-struct-macro (if (memv y3e95@t '(include)) y2ee3@include-macro (if (memv y3e95@t '(cond)) y2edf@cond-macro (if (memv y3e95@t '(let)) y2eb7@let-macro (if (memv y3e95@t '(do)) y2ed7@do-macro (if (memv y3e95@t '(or)) y2edb@or-macro (if (memv y3e95@t '(and)) y2edd@and-macro (if (memv y3e95@t '(let*)) y2ed9@let*-macro (if (memv y3e95@t '(let-values)) y2eb9@let-values-macro (if (memv y3e95@t '(let*-values)) y2ebb@let*-values-macro (if (memv y3e95@t '(syntax-rules)) y2ee7@syntax-rules-macro (if (memv y3e95@t '(quasiquote)) y2ee9@quasiquote-macro (if (memv y3e95@t '(quasisyntax)) y2eeb@quasisyntax-macro (if (memv y3e95@t '(with-syntax)) y2eb3@with-syntax-macro (if (memv y3e95@t '(when)) y2e9f@when-macro (if (memv y3e95@t '(unless)) y2ea1@unless-macro (if (memv y3e95@t '(case)) y2ea9@case-macro (if (memv y3e95@t '(identifier-syntax)) y2ed5@identifier-syntax-macro (if (memv y3e95@t '(time)) y2ecd@time-macro (if (memv y3e95@t '(delay)) y2ecf@delay-macro (if (memv y3e95@t '(assert)) y2ed1@assert-macro (if (memv y3e95@t '(endianness)) y2ed3@endianness-macro (if (memv y3e95@t '(guard)) y2ec9@guard-macro (if (memv y3e95@t '(define-enumeration)) y2ecb@define-enumeration-macro (if (memv y3e95@t '(trace-lambda)) y2ebd@trace-lambda-macro (if (memv y3e95@t '(trace-define)) y2ebf@trace-define-macro (if (memv y3e95@t '(trace-define-syntax)) y2ec1@trace-define-syntax-macro (if (memv y3e95@t '(trace-let-syntax)) y2ec5@trace-let-syntax-macro (if (memv y3e95@t '(trace-letrec-syntax)) y2ec7@trace-letrec-syntax-macro (if (memv y3e95@t '(define-condition-type)) y2ef1@define-condition-type-macro (if (memv y3e95@t '(parameterize)) y2ef5@parameterize-macro (if (memv y3e95@t '(include-into)) y2ee5@include-into-macro (if (memv y3e95@t '(eol-style)) (lambda (y3e97@x) (y2f0b@symbol-macro y3e97@x '(none lf cr crlf nel crnel ls))) (if (memv y3e95@t '(error-handling-mode)) (lambda (y3e99@x) (y2f0b@symbol-macro y3e99@x '(ignore raise replace))) (if (memv y3e95@t '(buffer-mode)) (lambda (y3e9b@x) (y2f0b@symbol-macro y3e9b@x '(none line block))) (if (memv y3e95@t '(file-options)) y2c63@file-options-macro (if (memv y3e95@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) y2ef3@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" y3e93@x)))))))))))))))))))))))))))))))))))))))) y3e93@x) (error 'core-macro-transformer '"BUG: invalid macro" y3e93@x))))) (set! y2f0f@local-macro-transformer (lambda (y3e9d@x) (car y3e9d@x))) (set! y2f11@do-macro-call (lambda (y3e9f@transformer y3ea0@expr) ((lambda (y3ea3@out) (begin ((letrec ((y3ea5@f (lambda (y3ea7@x) (if (not (y2cb8@stx? y3ea7@x)) (if (pair? y3ea7@x) (begin (y3ea5@f (car y3ea7@x)) (y3ea5@f (cdr y3ea7@x))) (if (vector? y3ea7@x) (vector-for-each y3ea5@f y3ea7@x) (if (symbol? y3ea7@x) (y2fe4@syntax-violation '#f '"raw symbol encountered in output of macro" y3ea0@expr y3ea7@x) (void)))) (void))))) y3ea5@f) y3ea3@out) (y2cda@add-mark (y2cd0@gen-mark) y3ea3@out y3ea0@expr))) (y3e9f@transformer (y2cda@add-mark y2cd2@anti-mark y3ea0@expr '#f))))) (set! y2f13@chi-macro (lambda (y3ea9@p y3eaa@e) (y2f11@do-macro-call (y2f0d@macro-transformer y3ea9@p) y3eaa@e))) (set! y2f15@chi-local-macro (lambda (y3ead@p y3eae@e) (y2f11@do-macro-call (y2f0f@local-macro-transformer y3ead@p) y3eae@e))) (set! y2f17@chi-global-macro (lambda (y3eb1@p y3eb2@e) ((lambda (y3eb5@lib y3eb6@loc) (begin (y2b15@y29b7@visit-library y3eb5@lib) ((lambda (y3eb9@x) ((lambda (y3ebb@transformer) (y2f11@do-macro-call y3ebb@transformer y3eb2@e)) (if (procedure? y3eb9@x) y3eb9@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" y3eb9@x)))) (symbol-value y3eb6@loc)))) (car y3eb1@p) (cdr y3eb1@p)))) (set! y2f19@chi-expr* (lambda (y3ebd@e* y3ebe@r y3ebf@mr) (if (null? y3ebd@e*) '() ((lambda (y3ec3@e) (cons y3ec3@e (y2f19@chi-expr* (cdr y3ebd@e*) y3ebe@r y3ebf@mr))) (y2f1d@chi-expr (car y3ebd@e*) y3ebe@r y3ebf@mr))))) (set! y2f1b@chi-application (lambda (y3ec5@e y3ec6@r y3ec7@mr) ((lambda (y3ecb@t) ((lambda (y3ecd@ls/false) (if y3ecd@ls/false (apply (lambda (y3ecf@rator y3ed0@rands) ((lambda (y3ed3@rator) (cons y3ed3@rator (y2f19@chi-expr* y3ed0@rands y3ec6@r y3ec7@mr))) (y2f1d@chi-expr y3ecf@rator y3ec6@r y3ec7@mr))) y3ecd@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3ecb@t))) (y2efb@syntax-dispatch y3ecb@t '(any . each-any)))) y3ec5@e))) (set! y2f1d@chi-expr (lambda (y3ed5@e y3ed6@r y3ed7@mr) (call-with-values (lambda () (y2d18@syntax-type y3ed5@e y3ed6@r)) (lambda (y3ee1@y3edc y3ee2@y3ede y3ee3@y3ee0) ((lambda (y3ee7@kwd y3ee8@value y3ee9@type) ((lambda (y3eed@t) (if (memv y3eed@t '(core-macro)) ((lambda (y3eef@transformer) (y3eef@transformer y3ed5@e y3ed6@r y3ed7@mr)) (y2f09@core-macro-transformer y3ee8@value)) (if (memv y3eed@t '(global)) ((lambda (y3ef1@lib) ((lambda (y3ef3@loc) ((lambda () (begin ((y2f66@inv-collector) y3ef1@lib) y3ef3@loc)))) (cdr y3ee8@value))) (car y3ee8@value)) (if (memv y3eed@t '(core-prim)) ((lambda (y3ef5@name) (list 'primitive y3ef5@name)) y3ee8@value) (if (memv y3eed@t '(call)) (y2f1b@chi-application y3ed5@e y3ed6@r y3ed7@mr) (if (memv y3eed@t '(lexical)) ((lambda (y3ef7@lex) y3ef7@lex) (y2e87@lexical-var y3ee8@value)) (if (memv y3eed@t '(global-macro global-macro!)) (y2f1d@chi-expr (y2f17@chi-global-macro y3ee8@value y3ed5@e) y3ed6@r y3ed7@mr) (if (memv y3eed@t '(local-macro local-macro!)) (y2f1d@chi-expr (y2f15@chi-local-macro y3ee8@value y3ed5@e) y3ed6@r y3ed7@mr) (if (memv y3eed@t '(macro macro!)) (y2f1d@chi-expr (y2f13@chi-macro y3ee8@value y3ed5@e) y3ed6@r y3ed7@mr) (if (memv y3eed@t '(constant)) ((lambda (y3ef9@datum) (list 'quote y3ef9@datum)) y3ee8@value) (if (memv y3eed@t '(set!)) (y2f1f@chi-set! y3ed5@e y3ed6@r y3ed7@mr) (if (memv y3eed@t '(begin)) ((lambda (y3efb@t) ((lambda (y3efd@ls/false) (if y3efd@ls/false (apply (lambda (y3eff@x y3f00@x*) (y2c4f@y2bbe@build-sequence '#f (y2f19@chi-expr* (cons y3eff@x y3f00@x*) y3ed6@r y3ed7@mr))) y3efd@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3efb@t))) (y2efb@syntax-dispatch y3efb@t '(_ any . each-any)))) y3ed5@e) (if (memv y3eed@t '(let-syntax letrec-syntax)) ((lambda (y3f03@t) ((lambda (y3f05@ls/false) (if (and y3f05@ls/false (apply (lambda (y3f07@xlhs* y3f08@xrhs* y3f09@xbody y3f0a@xbody*) (if (not (y2cfa@valid-bound-ids? y3f07@xlhs*)) (y2fe4@syntax-violation '#f '"invalid identifiers" y3ed5@e) (void))) y3f05@ls/false)) (apply (lambda (y3f0f@xlhs* y3f10@xrhs* y3f11@xbody y3f12@xbody*) ((lambda (y3f17@xlab*) ((lambda (y3f19@xrib) ((lambda (y3f1b@xb*) ((lambda () (y2c4f@y2bbe@build-sequence '#f (y2f19@chi-expr* (map (lambda (y3f1d@x) (y2cdc@add-subst y3f19@xrib y3f1d@x)) (cons y3f11@xbody y3f12@xbody*)) (append (map cons y3f17@xlab* y3f1b@xb*) y3ed6@r) (append (map cons y3f17@xlab* y3f1b@xb*) y3ed7@mr)))))) (map (lambda (y3f1f@x) (y2d2e@make-eval-transformer (y2f58@expand-transformer (if (eq? y3ee9@type 'let-syntax) y3f1f@x (y2cdc@add-subst y3f19@xrib y3f1f@x)) y3ed7@mr))) y3f10@xrhs*))) (y2cab@make-full-rib y3f0f@xlhs* y3f17@xlab*))) (map y2c74@gen-label y3f0f@xlhs*))) y3f05@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3f03@t))) (y2efb@syntax-dispatch y3f03@t '(_ #(each (any any)) any . each-any)))) y3ed5@e) (if (memv y3eed@t '(displaced-lexical)) (y2fe4@syntax-violation '#f '"identifier out of context" y3ed5@e) (if (memv y3eed@t '(syntax)) (y2fe4@syntax-violation '#f '"reference to pattern variable outside a syntax form" y3ed5@e) (if (memv y3eed@t '(define define-syntax module import library)) (y2fe4@syntax-violation '#f (string-append ((lambda (y3f21@t) (if (memv y3f21@t '(define)) '"a definition" (if (memv y3f21@t '(define-syntax)) '"a define-syntax" (if (memv y3f21@t '(module)) '"a module definition" (if (memv y3f21@t '(library)) '"a library definition" (if (memv y3f21@t '(import)) '"an import declaration" (if (memv y3f21@t '(export)) '"an export declaration" '"a non-expression"))))))) y3ee9@type) '" was found where an expression was expected") y3ed5@e) (if (memv y3eed@t '(mutable)) (y2fe4@syntax-violation '#f '"attempt to reference an unexportable variable" y3ed5@e) (y2fe4@syntax-violation '#f '"invalid expression" y3ed5@e)))))))))))))))))) y3ee9@type)) y3ee3@y3ee0 y3ee2@y3ede y3ee1@y3edc))))) (set! y2f1f@chi-set! (lambda (y3f23@e y3f24@r y3f25@mr) ((lambda (y3f29@t) ((lambda (y3f2b@ls/false) (if (and y3f2b@ls/false (apply (lambda (y3f2d@x y3f2e@v) (y2cf0@id? y3f2d@x)) y3f2b@ls/false)) (apply (lambda (y3f31@x y3f32@v) (call-with-values (lambda () (y2d18@syntax-type y3f31@x y3f24@r)) (lambda (y3f3b@y3f36 y3f3c@y3f38 y3f3d@y3f3a) ((lambda (y3f41@kwd y3f42@value y3f43@type) ((lambda (y3f47@t) (if (memv y3f47@t '(lexical)) (begin (y2e8b@set-lexical-mutable! y3f42@value '#t) (list 'set! (y2e87@lexical-var y3f42@value) (y2f1d@chi-expr y3f32@v y3f24@r y3f25@mr))) (if (memv y3f47@t '(core-prim)) (y2fe4@syntax-violation '#f '"cannot modify imported core primitive" y3f23@e) (if (memv y3f47@t '(global)) (y2fe4@syntax-violation '#f '"attempt to modify imported binding" y3f23@e) (if (memv y3f47@t '(global-macro!)) (y2f1d@chi-expr (y2f17@chi-global-macro y3f42@value y3f23@e) y3f24@r y3f25@mr) (if (memv y3f47@t '(local-macro!)) (y2f1d@chi-expr (y2f15@chi-local-macro y3f42@value y3f23@e) y3f24@r y3f25@mr) (if (memv y3f47@t '(mutable)) (y2fe4@syntax-violation '#f '"attempt to assign to an unexportable variable" y3f23@e) (y2fe4@syntax-violation '#f '"invalid syntax" y3f23@e)))))))) y3f43@type)) y3f3d@y3f3a y3f3c@y3f38 y3f3b@y3f36)))) y3f2b@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3f29@t))) (y2efb@syntax-dispatch y3f29@t '(_ any any)))) y3f23@e))) (set! y2f21@verify-formals (lambda (y3f49@fmls y3f4a@stx) ((lambda (y3f4d@t) ((lambda (y3f4f@ls/false) (if y3f4f@ls/false (apply (lambda (y3f51@x*) (if (not (y2cfa@valid-bound-ids? y3f51@x*)) (y2eb5@invalid-fmls-error y3f4a@stx y3f49@fmls) (void))) y3f4f@ls/false) ((lambda (y3f53@t) ((lambda (y3f55@ls/false) (if y3f55@ls/false (apply (lambda (y3f57@x* y3f58@x) (if (not (y2cfa@valid-bound-ids? (cons y3f58@x y3f57@x*))) (y2eb5@invalid-fmls-error y3f4a@stx y3f49@fmls) (void))) y3f55@ls/false) ((lambda (y3f5b@t) ((lambda (y3f5d@ls/false) (if y3f5d@ls/false (apply (lambda () (y2fe4@syntax-violation '#f '"invalid syntax" y3f4a@stx)) y3f5d@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3f5b@t))) (y2efb@syntax-dispatch y3f5b@t '_))) y3f53@t))) (y2efb@syntax-dispatch y3f53@t '#(each+ any () any)))) y3f4d@t))) (y2efb@syntax-dispatch y3f4d@t 'each-any))) y3f49@fmls))) (set! y2f23@chi-lambda-clause (lambda (y3f5f@stx y3f60@fmls y3f61@body* y3f62@r y3f63@mr) ((lambda (y3f69@t) ((lambda (y3f6b@ls/false) (if y3f6b@ls/false (apply (lambda (y3f6d@x*) (begin (y2f21@verify-formals y3f60@fmls y3f5f@stx) ((lambda (y3f6f@lex* y3f70@lab*) (values y3f6f@lex* (y2f33@chi-internal (y2cdc@add-subst (y2cab@make-full-rib y3f6d@x* y3f70@lab*) y3f61@body*) (y2e8f@add-lexicals y3f70@lab* y3f6f@lex* y3f62@r) y3f63@mr))) (map y2c70@gen-lexical y3f6d@x*) (map y2c74@gen-label y3f6d@x*)))) y3f6b@ls/false) ((lambda (y3f73@t) ((lambda (y3f75@ls/false) (if y3f75@ls/false (apply (lambda (y3f77@x* y3f78@x) (begin (y2f21@verify-formals y3f60@fmls y3f5f@stx) ((lambda (y3f7b@lex* y3f7c@lab* y3f7d@lex y3f7e@lab) (values (append y3f7b@lex* y3f7d@lex) (y2f33@chi-internal (y2cdc@add-subst (y2cab@make-full-rib (cons y3f78@x y3f77@x*) (cons y3f7e@lab y3f7c@lab*)) y3f61@body*) (y2e8f@add-lexicals (cons y3f7e@lab y3f7c@lab*) (cons y3f7d@lex y3f7b@lex*) y3f62@r) y3f63@mr))) (map y2c70@gen-lexical y3f77@x*) (map y2c74@gen-label y3f77@x*) (y2c70@gen-lexical y3f78@x) (y2c74@gen-label y3f78@x)))) y3f75@ls/false) ((lambda (y3f83@t) ((lambda (y3f85@ls/false) (if y3f85@ls/false (apply (lambda () (y2fe4@syntax-violation '#f '"invalid syntax" y3f60@fmls)) y3f85@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y3f83@t))) (y2efb@syntax-dispatch y3f83@t '_))) y3f73@t))) (y2efb@syntax-dispatch y3f73@t '#(each+ any () any)))) y3f69@t))) (y2efb@syntax-dispatch y3f69@t 'each-any))) y3f60@fmls))) (set! y2f25@chi-lambda-clause* (lambda (y3f87@stx y3f88@fmls* y3f89@body** y3f8a@r y3f8b@mr) (if (null? y3f88@fmls*) (values '() '()) (call-with-values (lambda () (y2f23@chi-lambda-clause y3f87@stx (car y3f88@fmls*) (car y3f89@body**) y3f8a@r y3f8b@mr)) (lambda (y3f95@y3f92 y3f96@y3f94) ((lambda (y3f99@b y3f9a@a) (call-with-values (lambda () (y2f25@chi-lambda-clause* y3f87@stx (cdr y3f88@fmls*) (cdr y3f89@body**) y3f8a@r y3f8b@mr)) (lambda (y3fa1@y3f9e y3fa2@y3fa0) ((lambda (y3fa5@b* y3fa6@a*) (values (cons y3f9a@a y3fa6@a*) (cons y3f99@b y3fa5@b*))) y3fa2@y3fa0 y3fa1@y3f9e)))) y3f96@y3f94 y3f95@y3f92)))))) (set! y2f27@chi-defun (lambda (y3fa9@x y3faa@r y3fab@mr) ((lambda (y3faf@fmls y3fb0@body*) (call-with-values (lambda () (y2f23@chi-lambda-clause y3faf@fmls y3faf@fmls y3fb0@body* y3faa@r y3fab@mr)) (lambda (y3fb7@y3fb4 y3fb8@y3fb6) ((lambda (y3fbb@body y3fbc@fmls) (y2c4c@y2b8c@build-lambda '#f y3fbc@fmls y3fbb@body)) y3fb8@y3fb6 y3fb7@y3fb4)))) (car y3fa9@x) (cdr y3fa9@x)))) (set! y2f29@chi-rhs (lambda (y3fbf@rhs y3fc0@r y3fc1@mr) ((lambda (y3fc5@t) (if (memv y3fc5@t '(defun)) (y2f27@chi-defun (cdr y3fbf@rhs) y3fc0@r y3fc1@mr) (if (memv y3fc5@t '(expr)) ((lambda (y3fc7@expr) (y2f1d@chi-expr y3fc7@expr y3fc0@r y3fc1@mr)) (cdr y3fbf@rhs)) (if (memv y3fc5@t '(top-expr)) ((lambda (y3fc9@expr) (y2c4f@y2bbe@build-sequence '#f (list (y2f1d@chi-expr y3fc9@expr y3fc0@r y3fc1@mr) (y2c50@y2bc0@build-void)))) (cdr y3fbf@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" y3fbf@rhs))))) (car y3fbf@rhs)))) (set! y2f2b@expand-interaction-rhs*/init* (lambda (y3fcb@lhs* y3fcc@rhs* y3fcd@init* y3fce@r y3fcf@mr) ((letrec ((y3fd5@f (lambda (y3fd7@lhs* y3fd8@rhs*) (if (null? y3fd7@lhs*) (map (lambda (y3fdb@x) (y2f1d@chi-expr y3fdb@x y3fce@r y3fcf@mr)) y3fcd@init*) ((lambda (y3fdd@lhs y3fde@rhs) ((lambda (y3fe1@t) (if (memv y3fe1@t '(defun)) ((lambda (y3fe3@rhs) (cons (list 'set! y3fdd@lhs y3fe3@rhs) (y3fd5@f (cdr y3fd7@lhs*) (cdr y3fd8@rhs*)))) (y2f27@chi-defun (cdr y3fde@rhs) y3fce@r y3fcf@mr)) (if (memv y3fe1@t '(expr)) ((lambda (y3fe5@rhs) (cons (list 'set! y3fdd@lhs y3fe5@rhs) (y3fd5@f (cdr y3fd7@lhs*) (cdr y3fd8@rhs*)))) (y2f1d@chi-expr (cdr y3fde@rhs) y3fce@r y3fcf@mr)) (if (memv y3fe1@t '(top-expr)) ((lambda (y3fe7@e) (cons y3fe7@e (y3fd5@f (cdr y3fd7@lhs*) (cdr y3fd8@rhs*)))) (y2f1d@chi-expr (cdr y3fde@rhs) y3fce@r y3fcf@mr)) (error 'expand-interaction '"invallid" y3fde@rhs))))) (car y3fde@rhs))) (car y3fd7@lhs*) (car y3fd8@rhs*)))))) y3fd5@f) y3fcb@lhs* y3fcc@rhs*))) (set! y2f2d@chi-rhs* (lambda (y3fe9@rhs* y3fea@r y3feb@mr) ((letrec ((y3fef@f (lambda (y3ff1@ls) (if (null? y3ff1@ls) '() ((lambda (y3ff3@a) (cons y3ff3@a (y3fef@f (cdr y3ff1@ls)))) (y2f29@chi-rhs (car y3ff1@ls) y3fea@r y3feb@mr)))))) y3fef@f) y3fe9@rhs*))) (set! y2f2f@find-bound=? (lambda (y3ff5@x y3ff6@lhs* y3ff7@rhs*) (if (null? y3ff6@lhs*) '#f (if (y2cf6@bound-id=? y3ff5@x (car y3ff6@lhs*)) (car y3ff7@rhs*) (y2f2f@find-bound=? y3ff5@x (cdr y3ff6@lhs*) (cdr y3ff7@rhs*)))))) (set! y2f31@find-dups (lambda (y3ffb@ls) ((letrec ((y3ffd@f (lambda (y3fff@ls y4000@dups) (if (null? y3fff@ls) y4000@dups ((lambda (y4003@t) (if y4003@t ((lambda (y4005@x) (y3ffd@f (cdr y3fff@ls) (cons (list (car y3fff@ls) y4005@x) y4000@dups))) y4003@t) (y3ffd@f (cdr y3fff@ls) y4000@dups))) (y2f2f@find-bound=? (car y3fff@ls) (cdr y3fff@ls) (cdr y3fff@ls))))))) y3ffd@f) y3ffb@ls '()))) (set! y2f33@chi-internal (lambda (y4007@e* y4008@r y4009@mr) ((lambda (y400d@rib) (call-with-values (lambda () (y2f56@chi-body* (map (lambda (y401f@x) (y2cdc@add-subst y400d@rib y401f@x)) (y2cee@syntax->list y4007@e*)) y4008@r y4009@mr '() '() '() '() '() y400d@rib '#f)) (lambda (y4021@y4010 y4022@y4012 y4023@y4014 y4024@y4016 y4025@y4018 y4026@y401a y4027@y401c y4028@y401e) ((lambda (y4031@_exp* y4032@kwd* y4033@mod** y4034@rhs* y4035@lex* y4036@mr y4037@r y4038@e*) (begin (if (null? y4038@e*) (y2fe4@syntax-violation '#f '"no expression in body" y4038@e*) (void)) ((lambda (y4041@init*) ((lambda (y4043@rhs*) ((lambda () (y2c52@y2bc4@build-letrec* '#f (reverse y4035@lex*) (reverse y4043@rhs*) (y2c4f@y2bbe@build-sequence '#f y4041@init*))))) (y2f2d@chi-rhs* y4034@rhs* y4037@r y4036@mr))) (y2f19@chi-expr* (append (apply append (reverse y4033@mod**)) y4038@e*) y4037@r y4036@mr)))) y4028@y401e y4027@y401c y4026@y401a y4025@y4018 y4024@y4016 y4023@y4014 y4022@y4012 y4021@y4010)))) (y2c9f@make-empty-rib)))) (set! y2f35@parse-module (lambda (y4045@e) ((lambda (y4047@t) ((lambda (y4049@ls/false) (if y4049@ls/false (apply (lambda (y404b@export* y404c@b*) (begin (if (not (for-all y2cf0@id? y404b@export*)) (y2fe4@syntax-violation '#f '"module exports must be identifiers" y4045@e) (void)) (values '#f (list->vector y404b@export*) y404c@b*))) y4049@ls/false) ((lambda (y404f@t) ((lambda (y4051@ls/false) (if y4051@ls/false (apply (lambda (y4053@name y4054@export* y4055@b*) (begin (if (not (y2cf0@id? y4053@name)) (y2fe4@syntax-violation '#f '"module name must be an identifier" y4045@e) (void)) (if (not (for-all y2cf0@id? y4054@export*)) (y2fe4@syntax-violation '#f '"module exports must be identifiers" y4045@e) (void)) (values y4053@name (list->vector y4054@export*) y4055@b*))) y4051@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y404f@t))) (y2efb@syntax-dispatch y404f@t '(_ any each-any . each-any)))) y4047@t))) (y2efb@syntax-dispatch y4047@t '(_ each-any . each-any)))) y4045@e))) (set! y2f3b@y2f36 (make-record-type-descriptor 'module-interface '#f 'y2f39 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! y2f3d@y2f38 '#f) (set! y2f3f@y2f37 (make-record-constructor-descriptor y2f3b@y2f36 '#f y2f3d@y2f38)) (set! y2f42@module-interface? (record-predicate y2f3b@y2f36)) (set! y2f44@make-module-interface (record-constructor y2f3f@y2f37)) (set! y2f46@module-interface-first-mark (record-accessor y2f3b@y2f36 '0)) (set! y2f48@module-interface-exp-id-vec (record-accessor y2f3b@y2f36 '1)) (set! y2f4a@module-interface-exp-lab-vec (record-accessor y2f3b@y2f36 '2)) (set! y2f4c@set-module-interface-first-mark! (record-mutator y2f3b@y2f36 '0)) (set! y2f4e@set-module-interface-exp-id-vec! (record-mutator y2f3b@y2f36 '1)) (set! y2f50@set-module-interface-exp-lab-vec! (record-mutator y2f3b@y2f36 '2)) (set! y2f52@module-interface-exp-id* (lambda (y4059@iface y405a@id) ((lambda (y405e@diff-marks) (begin (set! y405e@diff-marks (lambda (y4065@ls y4066@x) (begin (if (null? y4065@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (y4069@a) (if (eq? y4069@a y4066@x) '() (cons y4069@a (y405e@diff-marks (cdr y4065@ls) y4066@x)))) (car y4065@ls))))) ((lambda (y405f@diff y4060@id-vec) (if (null? y405f@diff) y4060@id-vec (vector-map (lambda (y4063@x) (y2cba@make-stx (y2cbc@stx-expr y4063@x) (append y405f@diff (y2cbe@stx-mark* y4063@x)) '() '())) y4060@id-vec))) (y405e@diff-marks (y2cbe@stx-mark* y405a@id) (y2f46@module-interface-first-mark y4059@iface)) (y2f48@module-interface-exp-id-vec y4059@iface)))) '#f))) (set! y2f54@chi-internal-module (lambda (y406b@e y406c@r y406d@mr y406e@lex* y406f@rhs* y4070@mod** y4071@kwd*) (call-with-values (lambda () (y2f35@parse-module y406b@e)) (lambda (y407f@y407a y4080@y407c y4081@y407e) ((lambda (y4085@e* y4086@exp-id* y4087@name) ((lambda (y408b@rib) ((lambda (y408d@e*) ((lambda () (call-with-values (lambda () (y2f56@chi-body* y408d@e* y406c@r y406d@mr y406e@lex* y406f@rhs* y4070@mod** y4071@kwd* '() y408b@rib '#f)) (lambda (y409f@y4090 y40a0@y4092 y40a1@y4094 y40a2@y4096 y40a3@y4098 y40a4@y409a y40a5@y409c y40a6@y409e) ((lambda (y40af@_exp* y40b0@kwd* y40b1@mod** y40b2@rhs* y40b3@lex* y40b4@mr y40b5@r y40b6@e*) ((lambda (y40bf@exp-lab* y40c0@mod**) (if (not y4087@name) (values y40b3@lex* y40b2@rhs* y4086@exp-id* y40bf@exp-lab* y40b5@r y40b4@mr y40c0@mod** y40b0@kwd*) ((lambda (y40c3@lab y40c4@iface) (values y40b3@lex* y40b2@rhs* (vector y4087@name) (vector y40c3@lab) (cons (cons y40c3@lab (cons '$module y40c4@iface)) y40b5@r) (cons (cons y40c3@lab (cons '$module y40c4@iface)) y40b4@mr) y40c0@mod** y40b0@kwd*)) (y2c74@gen-label 'module) (y2f44@make-module-interface (car (y2cbe@stx-mark* y4087@name)) (vector-map (lambda (y40c7@x) (y2cba@make-stx (y2cbc@stx-expr y40c7@x) (y2cbe@stx-mark* y40c7@x) '() '())) y4086@exp-id*) y40bf@exp-lab*)))) (vector-map (lambda (y40c9@x) (or (y2d0a@id->label (y2cba@make-stx (y2cf2@id->sym y40c9@x) (y2cbe@stx-mark* y40c9@x) (list y408b@rib) '())) (y2fe4@syntax-violation '#f '"cannot find module export" y40c9@x))) y4086@exp-id*) (cons y40b6@e* y40b1@mod**))) y40a6@y409e y40a5@y409c y40a4@y409a y40a3@y4098 y40a2@y4096 y40a1@y4094 y40a0@y4092 y409f@y4090)))))) (map (lambda (y40cb@x) (y2cdc@add-subst y408b@rib y40cb@x)) (y2cee@syntax->list y4085@e*)))) (y2c9f@make-empty-rib))) y4081@y407e y4080@y407c y407f@y407a))))) (set! y2f56@chi-body* (lambda (y40cd@e* y40ce@r y40cf@mr y40d0@lex* y40d1@rhs* y40d2@mod** y40d3@kwd* y40d4@exp* y40d5@rib y40d6@top?) (if (null? y40cd@e*) (values y40cd@e* y40ce@r y40cf@mr y40d0@lex* y40d1@rhs* y40d2@mod** y40d3@kwd* y40d4@exp*) ((lambda (y40e1@e) (call-with-values (lambda () (y2d18@syntax-type y40e1@e y40ce@r)) (lambda (y40e9@y40e4 y40ea@y40e6 y40eb@y40e8) ((lambda (y40ef@kwd y40f0@value y40f1@type) ((lambda (y40f5@kwd*) ((lambda (y40f7@t) (if (memv y40f7@t '(define)) (call-with-values (lambda () (y2e7f@parse-define y40e1@e)) (lambda (y40fd@y40fa y40fe@y40fc) ((lambda (y4101@rhs y4102@id) (begin (if (y2cfe@bound-id-member? y4102@id y40f5@kwd*) (y2fe4@syntax-violation '#f '"cannot redefine keyword" y40e1@e) (void)) (call-with-values (lambda () (y2c78@gen-define-label+loc y4102@id y40d5@rib)) (lambda (y4109@y4106 y410a@y4108) ((lambda (y410d@lex y410e@lab) (begin (y2ca1@extend-rib! y40d5@rib y4102@id y410e@lab) (y2f56@chi-body* (cdr y40cd@e*) (y2e8d@add-lexical y410e@lab y410d@lex y40ce@r) y40cf@mr (cons y410d@lex y40d0@lex*) (cons y4101@rhs y40d1@rhs*) y40d2@mod** y40f5@kwd* y40d4@exp* y40d5@rib y40d6@top?))) y410a@y4108 y4109@y4106))))) y40fe@y40fc y40fd@y40fa))) (if (memv y40f7@t '(define-syntax)) (call-with-values (lambda () (y2e81@parse-define-syntax y40e1@e)) (lambda (y4115@y4112 y4116@y4114) ((lambda (y4119@rhs y411a@id) (begin (if (y2cfe@bound-id-member? y411a@id y40f5@kwd*) (y2fe4@syntax-violation '#f '"cannot redefine keyword" y40e1@e) (void)) ((lambda (y411d@lab y411e@expanded-rhs) (begin (y2ca1@extend-rib! y40d5@rib y411a@id y411d@lab) ((lambda (y4121@b) (y2f56@chi-body* (cdr y40cd@e*) (cons (cons y411d@lab y4121@b) y40ce@r) (cons (cons y411d@lab y4121@b) y40cf@mr) y40d0@lex* y40d1@rhs* y40d2@mod** y40f5@kwd* y40d4@exp* y40d5@rib y40d6@top?)) (y2d2e@make-eval-transformer y411e@expanded-rhs)))) (y2c7a@gen-define-label y411a@id y40d5@rib) (y2f58@expand-transformer y4119@rhs y40cf@mr)))) y4116@y4114 y4115@y4112))) (if (memv y40f7@t '(let-syntax letrec-syntax)) ((lambda (y4123@t) ((lambda (y4125@ls/false) (if (and y4125@ls/false (apply (lambda (y4127@xlhs* y4128@xrhs* y4129@xbody*) (if (not (y2cfa@valid-bound-ids? y4127@xlhs*)) (y2fe4@syntax-violation '#f '"invalid identifiers" y40e1@e) (void))) y4125@ls/false)) (apply (lambda (y412d@xlhs* y412e@xrhs* y412f@xbody*) ((lambda (y4133@xlab*) ((lambda (y4135@xrib) ((lambda (y4137@xb*) ((lambda () (y2f56@chi-body* (append (map (lambda (y4139@x) (y2cdc@add-subst y4135@xrib y4139@x)) y412f@xbody*) (cdr y40cd@e*)) (append (map cons y4133@xlab* y4137@xb*) y40ce@r) (append (map cons y4133@xlab* y4137@xb*) y40cf@mr) y40d0@lex* y40d1@rhs* y40d2@mod** y40f5@kwd* y40d4@exp* y40d5@rib y40d6@top?)))) (map (lambda (y413b@x) (y2d2e@make-eval-transformer (y2f58@expand-transformer (if (eq? y40f1@type 'let-syntax) y413b@x (y2cdc@add-subst y4135@xrib y413b@x)) y40cf@mr))) y412e@xrhs*))) (y2cab@make-full-rib y412d@xlhs* y4133@xlab*))) (map y2c74@gen-label y412d@xlhs*))) y4125@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y4123@t))) (y2efb@syntax-dispatch y4123@t '(_ #(each (any any)) . each-any)))) y40e1@e) (if (memv y40f7@t '(begin)) ((lambda (y413d@t) ((lambda (y413f@ls/false) (if y413f@ls/false (apply (lambda (y4141@x*) (y2f56@chi-body* (append y4141@x* (cdr y40cd@e*)) y40ce@r y40cf@mr y40d0@lex* y40d1@rhs* y40d2@mod** y40f5@kwd* y40d4@exp* y40d5@rib y40d6@top?)) y413f@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y413d@t))) (y2efb@syntax-dispatch y413d@t '(_ . each-any)))) y40e1@e) (if (memv y40f7@t '(global-macro global-macro!)) (y2f56@chi-body* (cons (y2cdc@add-subst y40d5@rib (y2f17@chi-global-macro y40f0@value y40e1@e)) (cdr y40cd@e*)) y40ce@r y40cf@mr y40d0@lex* y40d1@rhs* y40d2@mod** y40f5@kwd* y40d4@exp* y40d5@rib y40d6@top?) (if (memv y40f7@t '(local-macro local-macro!)) (y2f56@chi-body* (cons (y2cdc@add-subst y40d5@rib (y2f15@chi-local-macro y40f0@value y40e1@e)) (cdr y40cd@e*)) y40ce@r y40cf@mr y40d0@lex* y40d1@rhs* y40d2@mod** y40f5@kwd* y40d4@exp* y40d5@rib y40d6@top?) (if (memv y40f7@t '(macro macro!)) (y2f56@chi-body* (cons (y2cdc@add-subst y40d5@rib (y2f13@chi-macro y40f0@value y40e1@e)) (cdr y40cd@e*)) y40ce@r y40cf@mr y40d0@lex* y40d1@rhs* y40d2@mod** y40f5@kwd* y40d4@exp* y40d5@rib y40d6@top?) (if (memv y40f7@t '(module)) (call-with-values (lambda () (y2f54@chi-internal-module y40e1@e y40ce@r y40cf@mr y40d0@lex* y40d1@rhs* y40d2@mod** y40f5@kwd*)) (lambda (y4153@y4144 y4154@y4146 y4155@y4148 y4156@y414a y4157@y414c y4158@y414e y4159@y4150 y415a@y4152) ((lambda (y4163@kwd* y4164@mod** y4165@mr y4166@r y4167@m-exp-lab* y4168@m-exp-id* y4169@rhs* y416a@lex*) (begin (vector-for-each (lambda (y4173@id y4174@lab) (y2ca1@extend-rib! y40d5@rib y4173@id y4174@lab)) y4168@m-exp-id* y4167@m-exp-lab*) (y2f56@chi-body* (cdr y40cd@e*) y4166@r y4165@mr y416a@lex* y4169@rhs* y4164@mod** y4163@kwd* y40d4@exp* y40d5@rib y40d6@top?))) y415a@y4152 y4159@y4150 y4158@y414e y4157@y414c y4156@y414a y4155@y4148 y4154@y4146 y4153@y4144))) (if (memv y40f7@t '(library)) (begin (y2fc6@library-expander (y2d06@stx->datum y40e1@e)) (y2f56@chi-body* (cdr y40cd@e*) y40ce@r y40cf@mr y40d0@lex* y40d1@rhs* y40d2@mod** y40f5@kwd* y40d4@exp* y40d5@rib y40d6@top?)) (if (memv y40f7@t '(export)) ((lambda (y4177@t) ((lambda (y4179@ls/false) (if y4179@ls/false (apply (lambda (y417b@exp-decl*) (y2f56@chi-body* (cdr y40cd@e*) y40ce@r y40cf@mr y40d0@lex* y40d1@rhs* y40d2@mod** y40f5@kwd* (append y417b@exp-decl* y40d4@exp*) y40d5@rib y40d6@top?)) y4179@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y4177@t))) (y2efb@syntax-dispatch y4177@t '(_ . each-any)))) y40e1@e) (if (memv y40f7@t '(import)) ((lambda () ((lambda (y417e@module-import? y4180@module-import y4182@library-import) (begin (set! y417e@module-import? (lambda (y41d1@e) ((lambda (y41d3@t) ((lambda (y41d5@ls/false) (if (and y41d5@ls/false (apply (lambda (y41d7@id) (y2cf0@id? y41d7@id)) y41d5@ls/false)) (apply (lambda (y41d9@id) '#t) y41d5@ls/false) ((lambda (y41db@t) ((lambda (y41dd@ls/false) (if y41dd@ls/false (apply (lambda (y41df@imp*) '#f) y41dd@ls/false) ((lambda (y41e1@t) ((lambda (y41e3@ls/false) (if y41e3@ls/false (apply (lambda () (y2fe4@syntax-violation '#f '"malformed import form" y41d1@e)) y41e3@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y41e1@t))) (y2efb@syntax-dispatch y41e1@t '_))) y41db@t))) (y2efb@syntax-dispatch y41db@t '(_ . each-any)))) y41d3@t))) (y2efb@syntax-dispatch y41d3@t '(_ any)))) y41d1@e))) (set! y4180@module-import (lambda (y41af@e y41b0@r) ((lambda (y41b3@t) ((lambda (y41b5@ls/false) (if (and y41b5@ls/false (apply (lambda (y41b7@id) (y2cf0@id? y41b7@id)) y41b5@ls/false)) (apply (lambda (y41b9@id) (call-with-values (lambda () (y2d18@syntax-type y41b9@id y41b0@r)) (lambda (y41c1@y41bc y41c2@y41be y41c3@y41c0) ((lambda (y41c7@kwd y41c8@value y41c9@type) ((lambda (y41cd@t) (if (memv y41cd@t '($module)) ((lambda (y41cf@iface) (values (y2f52@module-interface-exp-id* y41cf@iface y41b9@id) (y2f4a@module-interface-exp-lab-vec y41cf@iface))) y41c8@value) (y2fe4@syntax-violation '#f '"invalid import" y41af@e))) y41c9@type)) y41c3@y41c0 y41c2@y41be y41c1@y41bc)))) y41b5@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y41b3@t))) (y2efb@syntax-dispatch y41b3@t '(_ any)))) y41af@e))) (set! y4182@library-import (lambda (y4193@e) ((lambda (y4195@t) ((lambda (y4197@ls/false) (if y4197@ls/false (apply (lambda (y4199@ctxt y419a@imp*) (call-with-values (lambda () (y2f60@parse-import-spec* (y2fea@syntax->datum y419a@imp*))) (lambda (y41a1@y419e y41a2@y41a0) ((lambda (y41a5@subst-labels y41a6@subst-names) (values (vector-map (lambda (y41a9@name) (y2cce@datum->stx y4199@ctxt y41a9@name)) y41a6@subst-names) y41a5@subst-labels)) y41a2@y41a0 y41a1@y419e)))) y4197@ls/false) ((lambda (y41ab@t) ((lambda (y41ad@ls/false) (if y41ad@ls/false (apply (lambda () (y2fe4@syntax-violation '#f '"invalid import form" y4193@e)) y41ad@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y41ab@t))) (y2efb@syntax-dispatch y41ab@t '_))) y4195@t))) (y2efb@syntax-dispatch y4195@t '(any . each-any)))) y4193@e))) (begin (call-with-values (lambda () (if (y417e@module-import? y40e1@e) (y4180@module-import y40e1@e y40ce@r) (y4182@library-import y40e1@e))) (lambda (y4187@y4184 y4188@y4186) ((lambda (y418b@lab* y418c@id*) (vector-for-each (lambda (y418f@id y4190@lab) (y2ca1@extend-rib! y40d5@rib y418f@id y4190@lab)) y418c@id* y418b@lab*)) y4188@y4186 y4187@y4184))) (y2f56@chi-body* (cdr y40cd@e*) y40ce@r y40cf@mr y40d0@lex* y40d1@rhs* y40d2@mod** y40f5@kwd* y40d4@exp* y40d5@rib y40d6@top?)))) '#f '#f '#f))) (if y40d6@top? (y2f56@chi-body* (cdr y40cd@e*) y40ce@r y40cf@mr (cons (y2c70@gen-lexical 'dummy) y40d0@lex*) (cons (cons 'top-expr y40e1@e) y40d1@rhs*) y40d2@mod** y40f5@kwd* y40d4@exp* y40d5@rib y40d6@top?) (values y40cd@e* y40ce@r y40cf@mr y40d0@lex* y40d1@rhs* y40d2@mod** y40f5@kwd* y40d4@exp*)))))))))))))) y40f1@type)) (if (y2cf0@id? y40ef@kwd) (cons y40ef@kwd y40d3@kwd*) y40d3@kwd*))) y40eb@y40e8 y40ea@y40e6 y40e9@y40e4)))) (car y40cd@e*))))) (set! y2f58@expand-transformer (lambda (y41e5@expr y41e6@r) ((lambda (y41e9@rtc) ((lambda (y41eb@expanded-rhs) (begin (for-each ((lambda (y41ed@mark-visit) (lambda (y41ef@x) (begin (y2b14@y29b5@invoke-library y41ef@x) (y41ed@mark-visit y41ef@x)))) (y2f68@vis-collector)) (y41e9@rtc)) y41eb@expanded-rhs)) ((lambda (y41f9@y41f2 y41fa@y41f4 y41fb@y41f6 y41fc@y41f8) ((lambda (y4201@swap) (dynamic-wind y4201@swap (lambda () (y2f1d@chi-expr y41e5@expr y41e6@r y41e6@r)) y4201@swap)) (lambda () (begin ((lambda (y4203@t) (begin (y41f9@y41f2 y41fb@y41f6) (set! y41fb@y41f6 y4203@t))) (y41f9@y41f2)) ((lambda (y4205@t) (begin (y41fa@y41f4 y41fc@y41f8) (set! y41fc@y41f8 y4205@t))) (y41fa@y41f4)))))) y2f66@inv-collector y2f68@vis-collector y41e9@rtc (lambda (y4207@x) (values))))) (y2f64@make-collector)))) (set! y2f5a@parse-exports (lambda (y4209@exp*) ((letrec ((y420b@f (lambda (y420d@exp* y420e@int* y420f@ext*) (if (null? y420d@exp*) (begin (if (not (y2cfa@valid-bound-ids? y420f@ext*)) (y2fe4@syntax-violation 'export '"invalid exports" (y2f31@find-dups y420f@ext*)) (void)) (values (map y2fea@syntax->datum y420f@ext*) y420e@int*)) ((lambda (y4213@t) ((lambda (y4215@ls/false) (if y4215@ls/false (apply (lambda (y4217@rename y4218@i* y4219@e*) (begin (if (not (and (eq? (y2fea@syntax->datum y4217@rename) 'rename) (for-all y2cf0@id? y4218@i*) (for-all y2cf0@id? y4219@e*))) (y2fe4@syntax-violation 'export '"invalid export specifier" (car y420d@exp*)) (void)) (y420b@f (cdr y420d@exp*) (append y4218@i* y420e@int*) (append y4219@e* y420f@ext*)))) y4215@ls/false) ((lambda (y421d@t) ((lambda (y421f@ls/false) (if y421f@ls/false (apply (lambda (y4221@ie) (begin (if (not (y2cf0@id? y4221@ie)) (y2fe4@syntax-violation 'export '"invalid export" y4221@ie) (void)) (y420b@f (cdr y420d@exp*) (cons y4221@ie y420e@int*) (cons y4221@ie y420f@ext*)))) y421f@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y421d@t))) (y2efb@syntax-dispatch y421d@t 'any))) y4213@t))) (y2efb@syntax-dispatch y4213@t '(any . #(each (any any)))))) (car y420d@exp*)))))) y420b@f) y4209@exp* '() '()))) (set! y2f5c@parse-library-name (lambda (y4223@spec) ((lambda (y4226@parse) (begin (set! y4226@parse (lambda (y4233@x) ((lambda (y4235@t) ((lambda (y4237@ls/false) (if (and y4237@ls/false (apply (lambda (y4239@v*) (for-all (lambda (y423b@x) ((lambda (y423d@x) (and (integer? y423d@x) (exact? y423d@x))) (y2fea@syntax->datum y423b@x))) y4239@v*)) y4237@ls/false)) (apply (lambda (y423f@v*) (values '() (map y2fea@syntax->datum y423f@v*))) y4237@ls/false) ((lambda (y4241@t) ((lambda (y4243@ls/false) (if (and y4243@ls/false (apply (lambda (y4245@x y4246@rest) (symbol? (y2fea@syntax->datum y4245@x))) y4243@ls/false)) (apply (lambda (y4249@x y424a@rest) (call-with-values (lambda () (y4226@parse y424a@rest)) (lambda (y4251@y424e y4252@y4250) ((lambda (y4255@v* y4256@x*) (values (cons (y2fea@syntax->datum y4249@x) y4256@x*) y4255@v*)) y4252@y4250 y4251@y424e)))) y4243@ls/false) ((lambda (y4259@t) ((lambda (y425b@ls/false) (if y425b@ls/false (apply (lambda () (values '() '())) y425b@ls/false) ((lambda (y425d@t) ((lambda (y425f@ls/false) (if y425f@ls/false (apply (lambda () (y2fe4@syntax-violation '#f '"invalid library name" y4223@spec)) y425f@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y425d@t))) (y2efb@syntax-dispatch y425d@t '_))) y4259@t))) (y2efb@syntax-dispatch y4259@t '()))) y4241@t))) (y2efb@syntax-dispatch y4241@t '(any . any)))) y4235@t))) (y2efb@syntax-dispatch y4235@t '(each-any)))) y4233@x))) (call-with-values (lambda () (y4226@parse y4223@spec)) (lambda (y422b@y4228 y422c@y422a) ((lambda (y422f@ver* y4230@name*) (begin (if (null? y4230@name*) (y2fe4@syntax-violation '#f '"empty library name" y4223@spec) (void)) (values y4230@name* y422f@ver*))) y422c@y422a y422b@y4228))))) '#f))) (set! y2f5e@parse-library (lambda (y4261@e) ((lambda (y4263@t) ((lambda (y4265@ls/false) (if (and y4265@ls/false (apply (lambda (y4267@library y4268@name* y4269@export y426a@exp* y426b@import y426c@imp* y426d@b*) (and (eq? (y2fea@syntax->datum y4269@export) 'export) (eq? (y2fea@syntax->datum y426b@import) 'import) (eq? (y2fea@syntax->datum y4267@library) 'library))) y4265@ls/false)) (apply (lambda (y4275@library y4276@name* y4277@export y4278@exp* y4279@import y427a@imp* y427b@b*) (values y4276@name* y4278@exp* y427a@imp* y427b@b*)) y4265@ls/false) ((lambda (y4283@t) ((lambda (y4285@ls/false) (if y4285@ls/false (apply (lambda () (y2fe4@syntax-violation '#f '"malformed library" y4261@e)) y4285@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y4283@t))) (y2efb@syntax-dispatch y4283@t '_))) y4263@t))) (y2efb@syntax-dispatch y4263@t '(any each-any (any . each-any) (any . each-any) . each-any)))) y4261@e))) (set! y2f60@parse-import-spec* ((lambda () ((lambda (y4288@idsyn? y428a@dup-error y428c@merge-substs y428e@exclude* y4290@find* y4292@rem* y4294@remove-dups y4296@parse-library-name y4298@import-library y429a@get-import y429c@add-imports!) (begin (set! y4288@idsyn? (lambda (y4491@x) (symbol? (y2fea@syntax->datum y4491@x)))) (set! y428a@dup-error (lambda (y448f@name) (y2fe4@syntax-violation 'import '"two imports with different bindings" y448f@name))) (set! y428c@merge-substs (lambda (y447d@s y447e@subst) ((lambda (y4482@insert-to-subst) (begin (set! y4482@insert-to-subst (lambda (y4483@a y4484@subst) ((lambda (y4487@name y4488@label) ((lambda (y448b@t) (if y448b@t ((lambda (y448d@x) (if (eq? (cdr y448d@x) y4488@label) y4484@subst (y428a@dup-error y4487@name))) y448b@t) (cons y4483@a y4484@subst))) (assq y4487@name y4484@subst))) (car y4483@a) (cdr y4483@a)))) (if (null? y447d@s) y447e@subst (y4482@insert-to-subst (car y447d@s) (y428c@merge-substs (cdr y447d@s) y447e@subst))))) '#f))) (set! y428e@exclude* (lambda (y444d@sym* y444e@subst) ((lambda (y4452@exclude) (begin (set! y4452@exclude (lambda (y446b@sym y446c@subst) (if (null? y446c@subst) (y2fe4@syntax-violation 'import '"cannot rename unbound identifier" y446b@sym) (if (eq? y446b@sym (caar y446c@subst)) (values (cdar y446c@subst) (cdr y446c@subst)) ((lambda (y446f@a) (call-with-values (lambda () (y4452@exclude y446b@sym (cdr y446c@subst))) (lambda (y4475@y4472 y4476@y4474) ((lambda (y4479@subst y447a@old) (values y447a@old (cons y446f@a y4479@subst))) y4476@y4474 y4475@y4472)))) (car y446c@subst)))))) (if (null? y444d@sym*) (values '() y444e@subst) (call-with-values (lambda () (y4452@exclude (car y444d@sym*) y444e@subst)) (lambda (y4457@y4454 y4458@y4456) ((lambda (y445b@subst y445c@old) (call-with-values (lambda () (y428e@exclude* (cdr y444d@sym*) y445b@subst)) (lambda (y4463@y4460 y4464@y4462) ((lambda (y4467@subst y4468@old*) (values (cons y445c@old y4468@old*) y4467@subst)) y4464@y4462 y4463@y4460)))) y4458@y4456 y4457@y4454)))))) '#f))) (set! y4290@find* (lambda (y4445@sym* y4446@subst) (map (lambda (y4449@x) ((lambda (y444b@t) (if y444b@t (cdr y444b@t) (y2fe4@syntax-violation 'import '"cannot find identifier" y4449@x))) (assq y4449@x y4446@subst))) y4445@sym*))) (set! y4292@rem* (lambda (y443d@sym* y443e@subst) ((letrec ((y4441@f (lambda (y4443@subst) (if (null? y4443@subst) '() (if (memq (caar y4443@subst) y443d@sym*) (y4441@f (cdr y4443@subst)) (cons (car y4443@subst) (y4441@f (cdr y4443@subst)))))))) y4441@f) y443e@subst))) (set! y4294@remove-dups (lambda (y443b@ls) (if (null? y443b@ls) '() (if (memq (car y443b@ls) (cdr y443b@ls)) (y4294@remove-dups (cdr y443b@ls)) (cons (car y443b@ls) (y4294@remove-dups (cdr y443b@ls))))))) (set! y4296@parse-library-name (lambda (y4353@spec) ((lambda (y4356@subversion? y4358@subversion-pred y435a@version-pred) (begin (set! y4356@subversion? (lambda (y4437@x) ((lambda (y4439@x) (and (integer? y4439@x) (exact? y4439@x) (>= y4439@x '0))) (y2fea@syntax->datum y4437@x)))) (set! y4358@subversion-pred (lambda (y43d7@x*) ((lambda (y43d9@t) ((lambda (y43db@ls/false) (if (and y43db@ls/false (apply (lambda (y43dd@n) (y4356@subversion? y43dd@n)) y43db@ls/false)) (apply (lambda (y43df@n) (lambda (y43e1@x) (= y43e1@x (y2fea@syntax->datum y43df@n)))) y43db@ls/false) ((lambda (y43e3@t) ((lambda (y43e5@ls/false) (if (and y43e5@ls/false (apply (lambda (y43e7@p? y43e8@sub*) (eq? (y2fea@syntax->datum y43e7@p?) 'and)) y43e5@ls/false)) (apply (lambda (y43eb@p? y43ec@sub*) ((lambda (y43ef@p*) (lambda (y43f1@x) (for-all (lambda (y43f3@p) (y43f3@p y43f1@x)) y43ef@p*))) (map y4358@subversion-pred y43ec@sub*))) y43e5@ls/false) ((lambda (y43f5@t) ((lambda (y43f7@ls/false) (if (and y43f7@ls/false (apply (lambda (y43f9@p? y43fa@sub*) (eq? (y2fea@syntax->datum y43f9@p?) 'or)) y43f7@ls/false)) (apply (lambda (y43fd@p? y43fe@sub*) ((lambda (y4401@p*) (lambda (y4403@x) (exists (lambda (y4405@p) (y4405@p y4403@x)) y4401@p*))) (map y4358@subversion-pred y43fe@sub*))) y43f7@ls/false) ((lambda (y4407@t) ((lambda (y4409@ls/false) (if (and y4409@ls/false (apply (lambda (y440b@p? y440c@sub) (eq? (y2fea@syntax->datum y440b@p?) 'not)) y4409@ls/false)) (apply (lambda (y440f@p? y4410@sub) ((lambda (y4413@p) (lambda (y4415@x) (not (y4413@p y4415@x)))) (y4358@subversion-pred y4410@sub))) y4409@ls/false) ((lambda (y4417@t) ((lambda (y4419@ls/false) (if (and y4419@ls/false (apply (lambda (y441b@p? y441c@n) (and (eq? (y2fea@syntax->datum y441b@p?) '<=) (y4356@subversion? y441c@n))) y4419@ls/false)) (apply (lambda (y441f@p? y4420@n) (lambda (y4423@x) (<= y4423@x (y2fea@syntax->datum y4420@n)))) y4419@ls/false) ((lambda (y4425@t) ((lambda (y4427@ls/false) (if (and y4427@ls/false (apply (lambda (y4429@p? y442a@n) (and (eq? (y2fea@syntax->datum y4429@p?) '>=) (y4356@subversion? y442a@n))) y4427@ls/false)) (apply (lambda (y442d@p? y442e@n) (lambda (y4431@x) (>= y4431@x (y2fea@syntax->datum y442e@n)))) y4427@ls/false) ((lambda (y4433@t) ((lambda (y4435@ls/false) (if y4435@ls/false (apply (lambda () (y2fe4@syntax-violation 'import '"invalid sub-version spec" y4353@spec y43d7@x*)) y4435@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y4433@t))) (y2efb@syntax-dispatch y4433@t '_))) y4425@t))) (y2efb@syntax-dispatch y4425@t '(any any)))) y4417@t))) (y2efb@syntax-dispatch y4417@t '(any any)))) y4407@t))) (y2efb@syntax-dispatch y4407@t '(any any)))) y43f5@t))) (y2efb@syntax-dispatch y43f5@t '(any . each-any)))) y43e3@t))) (y2efb@syntax-dispatch y43e3@t '(any . each-any)))) y43d9@t))) (y2efb@syntax-dispatch y43d9@t 'any))) y43d7@x*))) (set! y435a@version-pred (lambda (y4387@x*) ((lambda (y4389@t) ((lambda (y438b@ls/false) (if y438b@ls/false (apply (lambda () (lambda (y438d@x) '#t)) y438b@ls/false) ((lambda (y438f@t) ((lambda (y4391@ls/false) (if (and y4391@ls/false (apply (lambda (y4393@c y4394@ver*) (eq? (y2fea@syntax->datum y4393@c) 'and)) y4391@ls/false)) (apply (lambda (y4397@c y4398@ver*) ((lambda (y439b@p*) (lambda (y439d@x) (for-all (lambda (y439f@p) (y439f@p y439d@x)) y439b@p*))) (map y435a@version-pred y4398@ver*))) y4391@ls/false) ((lambda (y43a1@t) ((lambda (y43a3@ls/false) (if (and y43a3@ls/false (apply (lambda (y43a5@c y43a6@ver*) (eq? (y2fea@syntax->datum y43a5@c) 'or)) y43a3@ls/false)) (apply (lambda (y43a9@c y43aa@ver*) ((lambda (y43ad@p*) (lambda (y43af@x) (exists (lambda (y43b1@p) (y43b1@p y43af@x)) y43ad@p*))) (map y435a@version-pred y43aa@ver*))) y43a3@ls/false) ((lambda (y43b3@t) ((lambda (y43b5@ls/false) (if (and y43b5@ls/false (apply (lambda (y43b7@c y43b8@ver) (eq? (y2fea@syntax->datum y43b7@c) 'not)) y43b5@ls/false)) (apply (lambda (y43bb@c y43bc@ver) ((lambda (y43bf@p) (lambda (y43c1@x) (not (y43bf@p y43c1@x)))) (y435a@version-pred y43bc@ver))) y43b5@ls/false) ((lambda (y43c3@t) ((lambda (y43c5@ls/false) (if y43c5@ls/false (apply (lambda (y43c7@sub*) ((lambda (y43c9@p*) (lambda (y43cb@x) ((letrec ((y43cd@f (lambda (y43cf@p* y43d0@x) (if (null? y43cf@p*) '#t (if (null? y43d0@x) '#f (and ((car y43cf@p*) (car y43d0@x)) (y43cd@f (cdr y43cf@p*) (cdr y43d0@x)))))))) y43cd@f) y43c9@p* y43cb@x))) (map y4358@subversion-pred y43c7@sub*))) y43c5@ls/false) ((lambda (y43d3@t) ((lambda (y43d5@ls/false) (if y43d5@ls/false (apply (lambda () (y2fe4@syntax-violation 'import '"invalid version spec" y4353@spec y4387@x*)) y43d5@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y43d3@t))) (y2efb@syntax-dispatch y43d3@t '_))) y43c3@t))) (y2efb@syntax-dispatch y43c3@t 'each-any))) y43b3@t))) (y2efb@syntax-dispatch y43b3@t '(any any)))) y43a1@t))) (y2efb@syntax-dispatch y43a1@t '(any . each-any)))) y438f@t))) (y2efb@syntax-dispatch y438f@t '(any . each-any)))) y4389@t))) (y2efb@syntax-dispatch y4389@t '()))) y4387@x*))) ((letrec ((y435b@f (lambda (y435d@x) ((lambda (y435f@t) ((lambda (y4361@ls/false) (if y4361@ls/false (apply (lambda (y4363@version-spec*) (values '() (y435a@version-pred y4363@version-spec*))) y4361@ls/false) ((lambda (y4365@t) ((lambda (y4367@ls/false) (if (and y4367@ls/false (apply (lambda (y4369@x y436a@x*) (y4288@idsyn? y4369@x)) y4367@ls/false)) (apply (lambda (y436d@x y436e@x*) (call-with-values (lambda () (y435b@f y436e@x*)) (lambda (y4375@y4372 y4376@y4374) ((lambda (y4379@pred y437a@name) (values (cons (y2fea@syntax->datum y436d@x) y437a@name) y4379@pred)) y4376@y4374 y4375@y4372)))) y4367@ls/false) ((lambda (y437d@t) ((lambda (y437f@ls/false) (if y437f@ls/false (apply (lambda () (values '() (lambda (y4381@x) '#t))) y437f@ls/false) ((lambda (y4383@t) ((lambda (y4385@ls/false) (if y4385@ls/false (apply (lambda () (y2fe4@syntax-violation '#f '"invalid import spec" y4353@spec)) y4385@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y4383@t))) (y2efb@syntax-dispatch y4383@t '_))) y437d@t))) (y2efb@syntax-dispatch y437d@t '()))) y4365@t))) (y2efb@syntax-dispatch y4365@t '(any . any)))) y435f@t))) (y2efb@syntax-dispatch y435f@t '(each-any)))) y435d@x)))) y435b@f) y4353@spec))) '#f '#f '#f))) (set! y4298@import-library (lambda (y4343@spec*) (call-with-values (lambda () (y4296@parse-library-name y4343@spec*)) (lambda (y4349@y4346 y434a@y4348) ((lambda (y434d@pred y434e@name) (begin (if (null? y434e@name) (y2fe4@syntax-violation 'import '"empty library name" y4343@spec*) (void)) ((lambda (y4351@lib) (begin (if (not y4351@lib) (y2fe4@syntax-violation 'import '"cannot find library with required name" y434e@name) (void)) (if (not (y434d@pred (y2ae5@y2957@library-version y4351@lib))) (y2fe4@syntax-violation 'import '"library does not satisfy version specification" y4343@spec* y4351@lib) (void)) ((y2f6a@imp-collector) y4351@lib) (y2ae9@y295f@library-subst y4351@lib))) (y2b0d@y29a7@find-library-by-name y434e@name)))) y434a@y4348 y4349@y4346))))) (set! y429a@get-import (lambda (y42b5@spec) ((lambda (y42b7@t) ((lambda (y42b9@ls/false) (if (and y42b9@ls/false (apply (lambda (y42bb@x y42bc@x*) (not (memq (y2fea@syntax->datum y42bb@x) '(for rename except only prefix library)))) y42b9@ls/false)) (apply (lambda (y42bf@x y42c0@x*) (y4298@import-library (cons y42bf@x y42c0@x*))) y42b9@ls/false) ((lambda (y42c3@t) ((lambda (y42c5@ls/false) (if (and y42c5@ls/false (apply (lambda (y42c7@rename y42c8@isp y42c9@old* y42ca@new*) (and (eq? (y2fea@syntax->datum y42c7@rename) 'rename) (for-all y4288@idsyn? y42c9@old*) (for-all y4288@idsyn? y42ca@new*))) y42c5@ls/false)) (apply (lambda (y42cf@rename y42d0@isp y42d1@old* y42d2@new*) ((lambda (y42d7@subst y42d8@old* y42d9@new*) ((lambda (y42dd@old-label*) ((lambda (y42df@subst) (y428c@merge-substs (map cons y42d9@new* y42dd@old-label*) y42df@subst)) (y4292@rem* y42d8@old* y42d7@subst))) (y4290@find* y42d8@old* y42d7@subst))) (y429a@get-import y42d0@isp) (map y2fea@syntax->datum y42d1@old*) (map y2fea@syntax->datum y42d2@new*))) y42c5@ls/false) ((lambda (y42e1@t) ((lambda (y42e3@ls/false) (if (and y42e3@ls/false (apply (lambda (y42e5@except y42e6@isp y42e7@sym*) (and (eq? (y2fea@syntax->datum y42e5@except) 'except) (for-all y4288@idsyn? y42e7@sym*))) y42e3@ls/false)) (apply (lambda (y42eb@except y42ec@isp y42ed@sym*) ((lambda (y42f1@subst) (y4292@rem* (map y2fea@syntax->datum y42ed@sym*) y42f1@subst)) (y429a@get-import y42ec@isp))) y42e3@ls/false) ((lambda (y42f3@t) ((lambda (y42f5@ls/false) (if (and y42f5@ls/false (apply (lambda (y42f7@only y42f8@isp y42f9@sym*) (and (eq? (y2fea@syntax->datum y42f7@only) 'only) (for-all y4288@idsyn? y42f9@sym*))) y42f5@ls/false)) (apply (lambda (y42fd@only y42fe@isp y42ff@sym*) ((lambda (y4303@subst y4304@sym*) ((lambda (y4307@sym*) ((lambda (y4309@lab*) (map cons y4307@sym* y4309@lab*)) (y4290@find* y4307@sym* y4303@subst))) (y4294@remove-dups y4304@sym*))) (y429a@get-import y42fe@isp) (map y2fea@syntax->datum y42ff@sym*))) y42f5@ls/false) ((lambda (y430b@t) ((lambda (y430d@ls/false) (if (and y430d@ls/false (apply (lambda (y430f@prefix y4310@isp y4311@p) (and (eq? (y2fea@syntax->datum y430f@prefix) 'prefix) (y4288@idsyn? y4311@p))) y430d@ls/false)) (apply (lambda (y4315@prefix y4316@isp y4317@p) ((lambda (y431b@subst y431c@prefix) (map (lambda (y431f@x) (cons (string->symbol (string-append y431c@prefix (symbol->string (car y431f@x)))) (cdr y431f@x))) y431b@subst)) (y429a@get-import y4316@isp) (symbol->string (y2fea@syntax->datum y4317@p)))) y430d@ls/false) ((lambda (y4321@t) ((lambda (y4323@ls/false) (if (and y4323@ls/false (apply (lambda (y4325@library y4326@spec*) (eq? (y2fea@syntax->datum y4325@library) 'library)) y4323@ls/false)) (apply (lambda (y4329@library y432a@spec*) (y4298@import-library y432a@spec*)) y4323@ls/false) ((lambda (y432d@t) ((lambda (y432f@ls/false) (if (and y432f@ls/false (apply (lambda (y4331@for y4332@isp y4333@rest) (eq? (y2fea@syntax->datum y4331@for) 'for)) y432f@ls/false)) (apply (lambda (y4337@for y4338@isp y4339@rest) (y429a@get-import y4338@isp)) y432f@ls/false) ((lambda (y433d@t) ((lambda (y433f@ls/false) (if y433f@ls/false (apply (lambda (y4341@spec) (y2fe4@syntax-violation 'import '"invalid import spec" y4341@spec)) y433f@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y433d@t))) (y2efb@syntax-dispatch y433d@t 'any))) y432d@t))) (y2efb@syntax-dispatch y432d@t '(any any . any)))) y4321@t))) (y2efb@syntax-dispatch y4321@t '(any each-any)))) y430b@t))) (y2efb@syntax-dispatch y430b@t '(any any any)))) y42f3@t))) (y2efb@syntax-dispatch y42f3@t '(any any . each-any)))) y42e1@t))) (y2efb@syntax-dispatch y42e1@t '(any any . each-any)))) y42c3@t))) (y2efb@syntax-dispatch y42c3@t '(any any . #(each (any any)))))) y42b7@t))) (y2efb@syntax-dispatch y42b7@t '(any . each-any)))) y42b5@spec))) (set! y429c@add-imports! (lambda (y42a5@imp y42a6@h) ((lambda (y42a9@subst) (for-each (lambda (y42ab@x) ((lambda (y42ad@name y42ae@label) ((lambda (y42b1@t) (if y42b1@t ((lambda (y42b3@l) (if (not (eq? y42b3@l y42ae@label)) (y428a@dup-error y42ad@name) (void))) y42b1@t) (hashtable-set! y42a6@h y42ad@name y42ae@label))) (hashtable-ref y42a6@h y42ad@name '#f))) (car y42ab@x) (cdr y42ab@x))) y42a9@subst)) (y429a@get-import y42a5@imp)))) (lambda (y429d@imp*) ((letrec ((y429f@f (lambda (y42a1@imp* y42a2@h) (if (null? y42a1@imp*) (hashtable-entries y42a2@h) (begin (y429c@add-imports! (car y42a1@imp*) y42a2@h) (y429f@f (cdr y42a1@imp*) y42a2@h)))))) y429f@f) y429d@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! y2f62@make-top-rib (lambda (y4493@names y4494@labels) ((lambda (y4497@rib) (begin (vector-for-each (lambda (y4499@name y449a@label) (begin (if (not (symbol? y4499@name)) (error 'make-top-rib '"BUG: not a symbol" y4499@name) (void)) (y2ca3@extend-rib/nc! y4497@rib (y2cba@make-stx y4499@name y2c6c@top-mark* '() '()) y449a@label))) y4493@names y4494@labels) y4497@rib)) (y2c9f@make-empty-rib)))) (set! y2f64@make-collector (lambda () ((lambda (y449d@ls) (lambda y44a1 ((lambda (y44a2) (if (= y44a2 '0) (apply (lambda () y449d@ls) y44a1) (if (= y44a2 '1) (apply (lambda (y449f@x) (set! y449d@ls (y2c65@set-cons y449f@x y449d@ls))) y44a1) (error 'apply '"invalid arg count")))) (length y44a1)))) '()))) (set! y2f66@inv-collector (y289a@y27c4@make-parameter (lambda y44a3@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (y44a5@x) (begin (if (not (procedure? y44a5@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" y44a5@x) (void)) y44a5@x)))) (set! y2f68@vis-collector (y289a@y27c4@make-parameter (lambda y44a7@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (y44a9@x) (begin (if (not (procedure? y44a9@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" y44a9@x) (void)) y44a9@x)))) (set! y2f6a@imp-collector (y289a@y27c4@make-parameter (lambda y44ab@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (y44ad@x) (begin (if (not (procedure? y44ad@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" y44ad@x) (void)) y44ad@x)))) (set! y2f6c@chi-library-internal (lambda (y44af@e* y44b0@rib y44b1@top?) (call-with-values (lambda () (y2f56@chi-body* y44af@e* '() '() '() '() '() '() '() y44b0@rib y44b1@top?)) (lambda (y44c5@y44b6 y44c6@y44b8 y44c7@y44ba y44c8@y44bc y44c9@y44be y44ca@y44c0 y44cb@y44c2 y44cc@y44c4) ((lambda (y44d5@exp* y44d6@_kwd* y44d7@mod** y44d8@rhs* y44d9@lex* y44da@mr y44db@r y44dc@e*) (values (append (apply append (reverse y44d7@mod**)) y44dc@e*) y44db@r y44da@mr (reverse y44d9@lex*) (reverse y44d8@rhs*) y44d5@exp*)) y44cc@y44c4 y44cb@y44c2 y44ca@y44c0 y44c9@y44be y44c8@y44bc y44c7@y44ba y44c6@y44b8 y44c5@y44b6))))) (set! y2f6e@chi-interaction-expr (lambda (y44e5@e y44e6@rib y44e7@r) (call-with-values (lambda () (y2f56@chi-body* (list y44e5@e) y44e7@r y44e7@r '() '() '() '() '() y44e6@rib '#t)) (lambda (y44fb@y44ec y44fc@y44ee y44fd@y44f0 y44fe@y44f2 y44ff@y44f4 y4500@y44f6 y4501@y44f8 y4502@y44fa) ((lambda (y450b@_exp* y450c@_kwd* y450d@mod** y450e@rhs* y450f@lex* y4510@mr y4511@r y4512@e*) ((lambda (y451b@e*) ((lambda (y451d@e) (values y451d@e y4511@r)) (if (null? y451b@e*) (y2c50@y2bc0@build-void) (if (null? (cdr y451b@e*)) (car y451b@e*) (y2c4f@y2bbe@build-sequence '#f y451b@e*))))) (y2f2b@expand-interaction-rhs*/init* (reverse y450f@lex*) (reverse y450e@rhs*) (append (apply append (reverse y450d@mod**)) y4512@e*) y4511@r y4510@mr))) y4502@y44fa y4501@y44f8 y4500@y44f6 y44ff@y44f4 y44fe@y44f2 y44fd@y44f0 y44fc@y44ee y44fb@y44ec))))) (set! y2f70@library-body-expander (lambda (y451f@name y4520@main-exp* y4521@imp* y4522@b* y4523@top?) ((lambda (y452a@itc) (begin (set! y452a@itc (y2f64@make-collector)) ((lambda (y4533@y452c y4534@y452e y4535@y4530 y4536@y4532) ((lambda (y453b@swap) (dynamic-wind y453b@swap (lambda () (call-with-values (lambda () (y2f60@parse-import-spec* y4521@imp*)) (lambda (y4541@y453e y4542@y4540) ((lambda (y4545@subst-labels y4546@subst-names) ((lambda (y4549@rib) ((lambda (y454c@wrap) (begin (set! y454c@wrap (lambda (y45c7@x) (y2cba@make-stx y45c7@x y2c6c@top-mark* (list y4549@rib) '()))) ((lambda (y454d@b* y454e@main-exp* y454f@rtc y4550@vtc) ((lambda (y455d@y4556 y455e@y4558 y455f@y455a y4560@y455c) ((lambda (y4565@swap) (dynamic-wind y4565@swap (lambda () (call-with-values (lambda () (y2f6c@chi-library-internal y454d@b* y4549@rib y4523@top?)) (lambda (y4573@y4568 y4574@y456a y4575@y456c y4576@y456e y4577@y4570 y4578@y4572) ((lambda (y457f@internal-exp* y4580@rhs* y4581@lex* y4582@mr y4583@r y4584@init*) (call-with-values (lambda () (y2f5a@parse-exports (append y454e@main-exp* y457f@internal-exp*))) (lambda (y458f@y458c y4590@y458e) ((lambda (y4593@exp-id* y4594@exp-name*) (begin (y2ca7@seal-rib! y4549@rib) ((lambda (y4597@init*) ((lambda (y4599@rhs*) ((lambda () (begin (y2ca9@unseal-rib! y4549@rib) ((lambda (y459b@loc* y459c@export-subst) ((lambda (y45a0@errstr) (begin (set! y45a0@errstr '"attempt to export mutated variable") (call-with-values (lambda () (y2fd0@make-export-env/macros y4581@lex* y459b@loc* y4583@r)) (lambda (y45a7@y45a2 y45a8@y45a4 y45a9@y45a6) ((lambda (y45ad@macro* y45ae@global* y45af@export-env) (begin (for-each (lambda (y45b3@s) ((lambda (y45b5@name y45b6@label) ((lambda (y45b9@p) (if y45b9@p ((lambda (y45bb@b) ((lambda (y45bd@type) (if (eq? y45bd@type 'mutable) (y2fe4@syntax-violation 'export y45a0@errstr y45b5@name) (void))) (car y45bb@b))) (cdr y45b9@p)) (void))) (assq y45b6@label y45af@export-env))) (car y45b3@s) (cdr y45b3@s))) y459c@export-subst) ((lambda (y45bf@invoke-body y45c0@invoke-definitions) (values (y452a@itc) (y454f@rtc) (y4550@vtc) (y2c4f@y2bbe@build-sequence '#f (append y45c0@invoke-definitions (list y45bf@invoke-body))) y45ad@macro* y459c@export-subst y45af@export-env)) (y2c52@y2bc4@build-letrec* '#f y4581@lex* y4599@rhs* (y2fcc@build-exports y45ae@global* y4597@init*)) (map y2c4b@y2b1b@build-global-define (map cdr y45ae@global*))))) y45a9@y45a6 y45a8@y45a4 y45a7@y45a2))))) '#f)) (map y2c72@gen-global y4581@lex*) (y2fce@make-export-subst y4594@exp-name* y4593@exp-id*)))))) (y2f2d@chi-rhs* y4580@rhs* y4583@r y4582@mr))) (y2f19@chi-expr* y4584@init* y4583@r y4582@mr)))) y4590@y458e y458f@y458c)))) y4578@y4572 y4577@y4570 y4576@y456e y4575@y456c y4574@y456a y4573@y4568)))) y4565@swap)) (lambda () (begin ((lambda (y45c3@t) (begin (y455d@y4556 y455f@y455a) (set! y455f@y455a y45c3@t))) (y455d@y4556)) ((lambda (y45c5@t) (begin (y455e@y4558 y4560@y455c) (set! y4560@y455c y45c5@t))) (y455e@y4558)))))) y2f66@inv-collector y2f68@vis-collector y454f@rtc y4550@vtc)) (map y454c@wrap y4522@b*) (map y454c@wrap y4520@main-exp*) (y2f64@make-collector) (y2f64@make-collector)))) '#f)) (y2f62@make-top-rib y4546@subst-names y4545@subst-labels))) y4542@y4540 y4541@y453e)))) y453b@swap)) (lambda () (begin ((lambda (y45c9@t) (begin (y4533@y452c y4535@y4530) (set! y4535@y4530 y45c9@t))) (y4533@y452c)) ((lambda (y45cb@t) (begin (y4534@y452e y4536@y4532) (set! y4536@y4532 y45cb@t))) (y4534@y452e)))))) y2f6a@imp-collector y2ff2@top-level-context y452a@itc '#f))) '#f))) (set! y2f72@core-library-expander (lambda (y45cd@e y45ce@verify-name) (call-with-values (lambda () (y2f5e@parse-library y45cd@e)) (lambda (y45d9@y45d2 y45da@y45d4 y45db@y45d6 y45dc@y45d8) ((lambda (y45e1@b* y45e2@imp* y45e3@exp* y45e4@name*) (call-with-values (lambda () (y2f5c@parse-library-name y45e4@name*)) (lambda (y45ed@y45ea y45ee@y45ec) ((lambda (y45f1@ver y45f2@name) (begin (y45ce@verify-name y45f2@name) (call-with-values (lambda () (y2f70@library-body-expander y45f2@name y45e3@exp* y45e2@imp* y45e1@b* '#f)) (lambda (y4603@y45f6 y4604@y45f8 y4605@y45fa y4606@y45fc y4607@y45fe y4608@y4600 y4609@y4602) ((lambda (y4611@export-env y4612@export-subst y4613@visit-code y4614@invoke-code y4615@visit-req* y4616@invoke-req* y4617@imp*) (values y45f2@name y45f1@ver y4617@imp* y4616@invoke-req* y4615@visit-req* y4614@invoke-code y4613@visit-code y4612@export-subst y4611@export-env)) y4609@y4602 y4608@y4600 y4607@y45fe y4606@y45fc y4605@y45fa y4604@y45f8 y4603@y45f6))))) y45ee@y45ec y45ed@y45ea)))) y45dc@y45d8 y45db@y45d6 y45da@y45d4 y45d9@y45d2))))) (set! y2f74@parse-top-level-program (lambda (y461f@e*) ((lambda (y4621@t) ((lambda (y4623@ls/false) (if (and y4623@ls/false (apply (lambda (y4625@import y4626@imp* y4627@b*) (eq? (y2fea@syntax->datum y4625@import) 'import)) y4623@ls/false)) (apply (lambda (y462b@import y462c@imp* y462d@b*) (values y462c@imp* y462d@b*)) y4623@ls/false) ((lambda (y4631@t) ((lambda (y4633@ls/false) (if (and y4633@ls/false (apply (lambda (y4635@import y4636@x y4637@y) (eq? (y2fea@syntax->datum y4635@import) 'import)) y4633@ls/false)) (apply (lambda (y463b@import y463c@x y463d@y) (y2fe4@syntax-violation 'expander '"invalid syntax of top-level program" (y2cea@syntax-car y461f@e*))) y4633@ls/false) ((lambda (y4641@t) ((lambda (y4643@ls/false) (if y4643@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) y4643@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y4641@t))) (y2efb@syntax-dispatch y4641@t '_))) y4631@t))) (y2efb@syntax-dispatch y4631@t '((any . any) . any)))) y4621@t))) (y2efb@syntax-dispatch y4621@t '((any . each-any) . each-any)))) y461f@e*))) (set! y2f76@top-level-expander (lambda (y4645@e*) (call-with-values (lambda () (y2f74@parse-top-level-program y4645@e*)) (lambda (y464b@y4648 y464c@y464a) ((lambda (y464f@b* y4650@imp*) (call-with-values (lambda () (y2f70@library-body-expander '() '() y4650@imp* y464f@b* '#t)) (lambda (y4661@y4654 y4662@y4656 y4663@y4658 y4664@y465a y4665@y465c y4666@y465e y4667@y4660) ((lambda (y466f@export-env y4670@export-subst y4671@visit-code y4672@invoke-code y4673@visit-req* y4674@invoke-req* y4675@imp*) (values y4674@invoke-req* y4672@invoke-code)) y4667@y4660 y4666@y465e y4665@y465c y4664@y465a y4663@y4658 y4662@y4656 y4661@y4654)))) y464c@y464a y464b@y4648))))) (set! y2f7c@y2f77 (make-record-type-descriptor 'env '#f 'y2f7a '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! y2f7e@y2f79 '#f) (set! y2f80@y2f78 (make-record-constructor-descriptor y2f7c@y2f77 '#f y2f7e@y2f79)) (set! y2f83@env? (record-predicate y2f7c@y2f77)) (set! y2f85@make-env (record-constructor y2f80@y2f78)) (set! y2f87@env-names (record-accessor y2f7c@y2f77 '0)) (set! y2f89@env-labels (record-accessor y2f7c@y2f77 '1)) (set! y2f8b@env-itc (record-accessor y2f7c@y2f77 '2)) (set! y2f8d@set-env-names! (record-mutator y2f7c@y2f77 '0)) (set! y2f8f@set-env-labels! (record-mutator y2f7c@y2f77 '1)) (set! y2f91@set-env-itc! (record-mutator y2f7c@y2f77 '2)) (set! y2f93@rp (y2897@y27be@make-record-printer 'env (lambda (y467d@x y467e@p y467f@wr) (display '"#<environment>" y467e@p)))) (set! y2f99@y2f94 (make-record-type-descriptor 'interaction-env '#f 'y2f97 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! y2f9b@y2f96 '#f) (set! y2f9d@y2f95 (make-record-constructor-descriptor y2f99@y2f94 '#f y2f9b@y2f96)) (set! y2fa0@interaction-env? (record-predicate y2f99@y2f94)) (set! y2fa2@make-interaction-env (record-constructor y2f9d@y2f95)) (set! y2fa4@interaction-env-rib (record-accessor y2f99@y2f94 '0)) (set! y2fa6@interaction-env-r (record-accessor y2f99@y2f94 '1)) (set! y2fa8@interaction-env-locs (record-accessor y2f99@y2f94 '2)) (set! y2faa@set-interaction-env-rib! (record-mutator y2f99@y2f94 '0)) (set! y2fac@set-interaction-env-r! (record-mutator y2f99@y2f94 '1)) (set! y2fae@set-interaction-env-locs! (record-mutator y2f99@y2f94 '2)) (set! y2fb0@rp (y2897@y27be@make-record-printer 'interaction-env (lambda (y4683@x y4684@p y4685@wr) (display '"#<environment>" y4684@p)))) (set! y2fb2@interaction-environment-symbols (lambda () (y2fba@environment-symbols (y2ff0@interaction-environment)))) (set! y2fb4@environment-bindings (lambda (y4689@e) (vector->list (vector-map (lambda (y468b@name y468c@label) (y2fb6@parse-binding (cons y468b@name (y2b13@y29b3@imported-label->binding y468c@label)))) (y2f87@env-names y4689@e) (y2f89@env-labels y4689@e))))) (set! y2fb6@parse-binding (lambda (y468f@b) (cons (car y468f@b) ((lambda (y4691@t) (if (memv y4691@t '(core-prim global)) 'procedure (if (memv y4691@t '(core-macro macro global-macro)) 'syntax (if (memv y4691@t '($core-rtd)) 'record (if (eq? (car y468f@b) (cadr y468f@b)) 'syntax 'unknown))))) (cadr y468f@b))))) (set! y2fb8@environment? (lambda (y4693@x) (or (y2f83@env? y4693@x) (y2fa0@interaction-env? y4693@x)))) (set! y2fba@environment-symbols (lambda (y4695@x) (if (y2f83@env? y4695@x) (vector->list (y2f87@env-names y4695@x)) (if (y2fa0@interaction-env? y4695@x) (map values (y2c8b@rib-sym* (y2fa4@interaction-env-rib y4695@x))) (assertion-violation 'environment-symbols '"not an environment" y4695@x))))) (set! y2fbc@environment (lambda y4697@imp* ((lambda (y4699@itc) ((lambda (y469f@y469c y46a0@y469e) ((lambda (y46a3@swap) (dynamic-wind y46a3@swap (lambda () (call-with-values (lambda () (y2f60@parse-import-spec* y4697@imp*)) (lambda (y46a9@y46a6 y46aa@y46a8) ((lambda (y46ad@subst-labels y46ae@subst-names) (y2f85@make-env y46ae@subst-names y46ad@subst-labels y4699@itc)) y46aa@y46a8 y46a9@y46a6)))) y46a3@swap)) (lambda () ((lambda (y46b1@t) (begin (y469f@y469c y46a0@y469e) (set! y46a0@y469e y46b1@t))) (y469f@y469c))))) y2f6a@imp-collector y4699@itc)) (y2f64@make-collector)))) (set! y2fbe@null-environment (lambda (y46b3@n) (begin (if (not (eqv? y46b3@n '5)) (assertion-violation 'null-environment '"not 5" y46b3@n) (void)) (y2fbc@environment '(psyntax null-environment-5))))) (set! y2fc0@scheme-report-environment (lambda (y46b5@n) (begin (if (not (eqv? y46b5@n '5)) (assertion-violation 'scheme-report-environment '"not 5" y46b5@n) (void)) (y2fbc@environment '(psyntax scheme-report-environment-5))))) (set! y2fc2@expand (lambda (y46b7@x y46b8@env) (if (y2f83@env? y46b8@env) ((lambda (y46bb@rib) ((lambda (y46bd@x y46be@itc y46bf@rtc y46c0@vtc) ((lambda (y46c5@x) (begin (y2ca7@seal-rib! y46bb@rib) (values y46c5@x (y46bf@rtc)))) ((lambda (y46d7@y46c8 y46d8@y46ca y46d9@y46cc y46da@y46ce y46db@y46d0 y46dc@y46d2 y46dd@y46d4 y46de@y46d6) ((lambda (y46e7@swap) (dynamic-wind y46e7@swap (lambda () (y2f1d@chi-expr y46bd@x '() '())) y46e7@swap)) (lambda () (begin ((lambda (y46e9@t) (begin (y46d7@y46c8 y46db@y46d0) (set! y46db@y46d0 y46e9@t))) (y46d7@y46c8)) ((lambda (y46eb@t) (begin (y46d8@y46ca y46dc@y46d2) (set! y46dc@y46d2 y46eb@t))) (y46d8@y46ca)) ((lambda (y46ed@t) (begin (y46d9@y46cc y46dd@y46d4) (set! y46dd@y46d4 y46ed@t))) (y46d9@y46cc)) ((lambda (y46ef@t) (begin (y46da@y46ce y46de@y46d6) (set! y46de@y46d6 y46ef@t))) (y46da@y46ce)))))) y2ff2@top-level-context y2f66@inv-collector y2f68@vis-collector y2f6a@imp-collector '#f y46bf@rtc y46c0@vtc y46be@itc))) (y2cba@make-stx y46b7@x y2c6c@top-mark* (list y46bb@rib) '()) (y2f8b@env-itc y46b8@env) (y2f64@make-collector) (y2f64@make-collector))) (y2f62@make-top-rib (y2f87@env-names y46b8@env) (y2f89@env-labels y46b8@env))) (if (y2fa0@interaction-env? y46b8@env) ((lambda (y46f1@rib y46f2@r y46f3@rtc) ((lambda (y46f7@x) (call-with-values (lambda () ((lambda (y470d@y46fe y470e@y4700 y470f@y4702 y4710@y4704 y4711@y4706 y4712@y4708 y4713@y470a y4714@y470c) ((lambda (y471d@swap) (dynamic-wind y471d@swap (lambda () (y2f6e@chi-interaction-expr y46f7@x y46f1@rib y46f2@r)) y471d@swap)) (lambda () (begin ((lambda (y471f@t) (begin (y470d@y46fe y4711@y4706) (set! y4711@y4706 y471f@t))) (y470d@y46fe)) ((lambda (y4721@t) (begin (y470e@y4700 y4712@y4708) (set! y4712@y4708 y4721@t))) (y470e@y4700)) ((lambda (y4723@t) (begin (y470f@y4702 y4713@y470a) (set! y4713@y470a y4723@t))) (y470f@y4702)) ((lambda (y4725@t) (begin (y4710@y4704 y4714@y470c) (set! y4714@y470c y4725@t))) (y4710@y4704)))))) y2ff2@top-level-context y2f66@inv-collector y2f68@vis-collector y2f6a@imp-collector y46b8@env y46f3@rtc (y2f64@make-collector) (y2f64@make-collector))) (lambda (y4727@y46fa y4728@y46fc) ((lambda (y472b@r^ y472c@e) (begin (y2fac@set-interaction-env-r! y46b8@env y472b@r^) (values y472c@e (y46f3@rtc)))) y4728@y46fc y4727@y46fa)))) (y2cba@make-stx y46b7@x y2c6c@top-mark* (list y46f1@rib) '()))) (y2fa4@interaction-env-rib y46b8@env) (y2fa6@interaction-env-r y46b8@env) (y2f64@make-collector)) (assertion-violation 'expand '"not an environment" y46b8@env))))) (set! y2fc4@eval (lambda (y472f@x y4730@env) (begin (if (not (y2fb8@environment? y4730@env)) (error 'eval '"not an environment" y4730@env) (void)) (call-with-values (lambda () (y2fc2@expand y472f@x y4730@env)) (lambda (y4737@y4734 y4738@y4736) ((lambda (y473b@invoke-req* y473c@x) (begin (for-each y2b14@y29b5@invoke-library y473b@invoke-req*) (eval-core (y28ee@y28a6@expanded->core y473c@x)))) y4738@y4736 y4737@y4734)))))) (set! y2fc6@library-expander (lambda y47ad ((lambda (y47ae) (if (= y47ae '3) (apply (lambda (y473f@x y4740@filename y4741@verify-name) ((lambda (y4746@build-visit-code y4748@visit!) (begin (set! y4746@build-visit-code (lambda (y479b@macro*) (if (null? y479b@macro*) (y2c50@y2bc0@build-void) (y2c4f@y2bbe@build-sequence '#f (map (lambda (y479d@x) ((lambda (y479f@loc y47a0@src) (list 'set! y479f@loc y47a0@src)) (car y479d@x) (cddr y479d@x))) y479b@macro*))))) (set! y4748@visit! (lambda (y4793@macro*) (for-each (lambda (y4795@x) ((lambda (y4797@loc y4798@proc) (set-symbol-value! y4797@loc y4798@proc)) (car y4795@x) (cadr y4795@x))) y4793@macro*))) (call-with-values (lambda () (y2f72@core-library-expander y473f@x y4741@verify-name)) (lambda (y475b@y474a y475c@y474c y475d@y474e y475e@y4750 y475f@y4752 y4760@y4754 y4761@y4756 y4762@y4758 y4763@y475a) ((lambda (y476d@export-env y476e@export-subst y476f@macro* y4770@invoke-code y4771@vis* y4772@inv* y4773@imp* y4774@ver y4775@name) ((lambda (y477f@id y4780@name y4781@ver y4782@imp* y4783@vis* y4784@inv* y4785@visit-proc y4786@invoke-proc y4787@visit-code y4788@invoke-code) (begin (y2b12@y29b1@install-library y477f@id y4780@name y4781@ver y4782@imp* y4783@vis* y4784@inv* y476e@export-subst y476d@export-env y4785@visit-proc y4786@invoke-proc y4787@visit-code y4788@invoke-code '#t y4740@filename) (values y477f@id y4780@name y4781@ver y4782@imp* y4783@vis* y4784@inv* y4788@invoke-code y4787@visit-code y476e@export-subst y476d@export-env))) (gensym) y4775@name y4774@ver (map y2b18@y29bd@library-spec y4773@imp*) (map y2b18@y29bd@library-spec y4771@vis*) (map y2b18@y29bd@library-spec y4772@inv*) (lambda () (y4748@visit! y476f@macro*)) (lambda () (eval-core (y28ee@y28a6@expanded->core y4770@invoke-code))) (y4746@build-visit-code y476f@macro*) y4770@invoke-code)) y4763@y475a y4762@y4758 y4761@y4756 y4760@y4754 y475f@y4752 y475e@y4750 y475d@y474e y475c@y474c y475b@y474a))))) '#f '#f)) y47ad) (if (= y47ae '2) (apply (lambda (y47a3@x y47a4@filename) (y2fc6@library-expander y47a3@x y47a4@filename (lambda (y47a7@x) (values)))) y47ad) (if (= y47ae '1) (apply (lambda (y47a9@x) (y2fc6@library-expander y47a9@x '#f (lambda (y47ab@x) (values)))) y47ad) (error 'apply '"invalid arg count"))))) (length y47ad)))) (set! y2fc8@boot-library-expand (lambda (y47af@x) (call-with-values (lambda () (y2fc6@library-expander y47af@x)) (lambda (y47c5@y47b2 y47c6@y47b4 y47c7@y47b6 y47c8@y47b8 y47c9@y47ba y47ca@y47bc y47cb@y47be y47cc@y47c0 y47cd@y47c2 y47ce@y47c4) ((lambda (y47d9@export-env y47da@export-subst y47db@visit-code y47dc@invoke-code y47dd@inv* y47de@vis* y47df@imp* y47e0@ver y47e1@name y47e2@id) (values y47e1@name y47dc@invoke-code y47da@export-subst y47d9@export-env)) y47ce@y47c4 y47cd@y47c2 y47cc@y47c0 y47cb@y47be y47ca@y47bc y47c9@y47ba y47c8@y47b8 y47c7@y47b6 y47c6@y47b4 y47c5@y47b2))))) (set! y2fca@rev-map-append (lambda (y47ed@f y47ee@ls y47ef@ac) (if (null? y47ee@ls) y47ef@ac (y2fca@rev-map-append y47ed@f (cdr y47ee@ls) (cons (y47ed@f (car y47ee@ls)) y47ef@ac))))) (set! y2fcc@build-exports (lambda (y47f3@lex*+loc* y47f4@init*) (y2c4f@y2bbe@build-sequence '#f (cons (y2c50@y2bc0@build-void) (y2fca@rev-map-append (lambda (y47f7@x) (list 'set! (cdr y47f7@x) (car y47f7@x))) y47f3@lex*+loc* y47f4@init*))))) (set! y2fce@make-export-subst (lambda (y47f9@name* y47fa@id*) (map (lambda (y47fd@name y47fe@id) ((lambda (y4801@label) (begin (if (not y4801@label) (y2fe4@syntax-violation '#f '"cannot export unbound identifier" y47fe@id) (void)) (cons y47fd@name y4801@label))) (y2d0a@id->label y47fe@id))) y47f9@name* y47fa@id*))) (set! y2fd0@make-export-env/macros (lambda (y4803@lex* y4804@loc* y4805@r) ((lambda (y480a@lookup) (begin (set! y480a@lookup (lambda (y4827@x) ((letrec ((y4829@f (lambda (y482b@x y482c@lex* y482d@loc*) (if (pair? y482c@lex*) (if (eq? y482b@x (car y482c@lex*)) (car y482d@loc*) (y4829@f y482b@x (cdr y482c@lex*) (cdr y482d@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) y4829@f) y4827@x y4803@lex* y4804@loc*))) ((letrec ((y480b@f (lambda (y480d@r y480e@env y480f@global* y4810@macro*) (if (null? y480d@r) (values y480e@env y480f@global* y4810@macro*) ((lambda (y4815@x) ((lambda (y4817@label y4818@b) ((lambda (y481b@t) (if (memv y481b@t '(lexical)) ((lambda (y481d@v) ((lambda (y481f@loc y4820@type) (y480b@f (cdr y480d@r) (cons (cons* y4817@label y4820@type y481f@loc) y480e@env) (cons (cons (y2e87@lexical-var y481d@v) y481f@loc) y480f@global*) y4810@macro*)) (y480a@lookup (y2e87@lexical-var y481d@v)) (if (y2e89@lexical-mutable? y481d@v) 'mutable 'global))) (y2d14@binding-value y4818@b)) (if (memv y481b@t '(local-macro)) ((lambda (y4823@loc) (y480b@f (cdr y480d@r) (cons (cons* y4817@label 'global-macro y4823@loc) y480e@env) y480f@global* (cons (cons y4823@loc (y2d14@binding-value y4818@b)) y4810@macro*))) (gensym)) (if (memv y481b@t '(local-macro!)) ((lambda (y4825@loc) (y480b@f (cdr y480d@r) (cons (cons* y4817@label 'global-macro! y4825@loc) y480e@env) y480f@global* (cons (cons y4825@loc (y2d14@binding-value y4818@b)) y4810@macro*))) (gensym)) (if (memv y481b@t '($rtd $module)) (y480b@f (cdr y480d@r) (cons y4815@x y480e@env) y480f@global* y4810@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (y2d12@binding-type y4818@b) (y2d14@binding-value y4818@b))))))) (y2d12@binding-type y4818@b))) (car y4815@x) (cdr y4815@x))) (car y480d@r)))))) y480b@f) y4805@r '() '() '()))) '#f))) (set! y2fd2@generate-temporaries (lambda (y4831@ls) ((lambda (y4833@t) ((lambda (y4835@ls/false) (if y4835@ls/false (apply (lambda (y4837@ls) (map (lambda (y4839@x) (y2cba@make-stx ((lambda (y483b@x) (if (or (symbol? y483b@x) (string? y483b@x)) (gensym y483b@x) (gensym 't))) (y2fea@syntax->datum y4839@x)) y2c6c@top-mark* '() '())) y4837@ls)) y4835@ls/false) ((lambda (y483d@t) ((lambda (y483f@ls/false) (if y483f@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) y483f@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y483d@t))) (y2efb@syntax-dispatch y483d@t '_))) y4833@t))) (y2efb@syntax-dispatch y4833@t 'each-any))) y4831@ls))) (set! y2fd4@free-identifier=? (lambda (y4841@x y4842@y) (if (y2cf0@id? y4841@x) (if (y2cf0@id? y4842@y) (y2cf8@free-id=? y4841@x y4842@y) (assertion-violation 'free-identifier=? '"not an identifier" y4842@y)) (assertion-violation 'free-identifier=? '"not an identifier" y4841@x)))) (set! y2fd6@bound-identifier=? (lambda (y4845@x y4846@y) (if (y2cf0@id? y4845@x) (if (y2cf0@id? y4846@y) (y2cf6@bound-id=? y4845@x y4846@y) (assertion-violation 'bound-identifier=? '"not an identifier" y4846@y)) (assertion-violation 'bound-identifier=? '"not an identifier" y4845@x)))) (set! y2fd8@make-source-condition (lambda (y4849@x) ((lambda (y4853@y484e y4855@y4850 y4857@y484f y485a@y484d y485c@make-source-condition y485e@y484b y4860@y484c y4862@source-condition? y4864@source-filename y4866@source-character) (begin (set! y4853@y484e (make-record-type-descriptor '&source-information y4cb1@y49f8@&condition-rtd 'y4851 '#f '#f '#((immutable file-name) (immutable character)))) (set! y4855@y4850 '#f) (set! y4857@y484f (make-record-constructor-descriptor y4853@y484e y4cb2@y49fa@&condition-rcd y4855@y4850)) (set! y485a@y484d (record-predicate y4853@y484e)) (set! y485c@make-source-condition (record-constructor y4857@y484f)) (set! y485e@y484b (record-accessor y4853@y484e '0)) (set! y4860@y484c (record-accessor y4853@y484e '1)) (set! y4862@source-condition? (condition-predicate y4853@y484e)) (set! y4864@source-filename (condition-accessor y4853@y484e y485e@y484b)) (set! y4866@source-character (condition-accessor y4853@y484e y4860@y484c)) (if (pair? y4849@x) (y485c@make-source-condition (car y4849@x) (cdr y4849@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! y2fda@extract-position-condition (lambda (y4867@x) (y2fd8@make-source-condition (y2fdc@expression-position y4867@x)))) (set! y2fdc@expression-position (lambda (y4869@x) (and (y2cb8@stx? y4869@x) ((lambda (y486b@x) (and (y288f@y27ae@annotation? y486b@x) (y2890@y27b0@annotation-source y486b@x))) (y2cbc@stx-expr y4869@x))))) (set! y2fde@assertion-error (lambda (y486d@expr y486e@pos) (raise (condition (y4ce1@y4abc@make-assertion-violation) (y4cf3@y4aee@make-who-condition 'assert) (y4cb7@y4a4f@make-message-condition '"assertion failed") (y4ce9@y4ad3@make-irritants-condition (list y486d@expr)) (y2fd8@make-source-condition y486e@pos))))) (set! y2fe0@syntax-error (lambda (y4871@x . y4873@args) (begin (if (not (for-all string? y4873@args)) (assertion-violation 'syntax-error '"invalid argument" y4873@args) (void)) (raise (condition (y4cb7@y4a4f@make-message-condition (if (null? y4873@args) '"invalid syntax" (apply string-append y4873@args))) (y4d15@y4b4a@make-syntax-violation (y2fea@syntax->datum y4871@x) '#f) (y2fda@extract-position-condition y4871@x)))))) (set! y2fe2@syntax-violation* (lambda (y4875@who y4876@msg y4877@form y4878@condition-object) (begin (if (not (string? y4876@msg)) (assertion-violation 'syntax-violation '"message is not a string" y4876@msg) (void)) ((lambda (y487d@who) (raise (condition (if y487d@who (y4cf3@y4aee@make-who-condition y487d@who) (condition)) (y4cb7@y4a4f@make-message-condition y4876@msg) y4878@condition-object (y2fda@extract-position-condition y4877@form)))) (if (or (string? y4875@who) (symbol? y4875@who)) y4875@who (if (not y4875@who) ((lambda (y487f@t) ((lambda (y4881@ls/false) (if (and y4881@ls/false (apply (lambda (y4883@id) (y2cf0@id? y4883@id)) y4881@ls/false)) (apply (lambda (y4885@id) (y2fea@syntax->datum y4885@id)) y4881@ls/false) ((lambda (y4887@t) ((lambda (y4889@ls/false) (if (and y4889@ls/false (apply (lambda (y488b@id y488c@rest) (y2cf0@id? y488b@id)) y4889@ls/false)) (apply (lambda (y488f@id y4890@rest) (y2fea@syntax->datum y488f@id)) y4889@ls/false) ((lambda (y4893@t) ((lambda (y4895@ls/false) (if y4895@ls/false (apply (lambda () '#f) y4895@ls/false) (y2fe4@syntax-violation '#f '"invalid syntax" y4893@t))) (y2efb@syntax-dispatch y4893@t '_))) y4887@t))) (y2efb@syntax-dispatch y4887@t '(any . any)))) y487f@t))) (y2efb@syntax-dispatch y487f@t 'any))) y4877@form) (assertion-violation 'syntax-violation '"invalid who argument" y4875@who))))))) (set! y2fe4@syntax-violation (lambda y48a5 ((lambda (y48a6) (if (= y48a6 '3) (apply (lambda (y4897@who y4898@msg y4899@form) (y2fe4@syntax-violation y4897@who y4898@msg y4899@form '#f)) y48a5) (if (= y48a6 '4) (apply (lambda (y489d@who y489e@msg y489f@form y48a0@subform) (y2fe2@syntax-violation* y489d@who y489e@msg y489f@form (y4d15@y4b4a@make-syntax-violation (y2fea@syntax->datum y489f@form) (y2fea@syntax->datum y48a0@subform)))) y48a5) (error 'apply '"invalid arg count")))) (length y48a5)))) (set! y2fe6@identifier? (lambda (y48a7@x) (y2cf0@id? y48a7@x))) (set! y2fe8@datum->syntax (lambda (y48a9@id y48aa@datum) (if (y2cf0@id? y48a9@id) (y2cce@datum->stx y48a9@id y48aa@datum) (assertion-violation 'datum->syntax '"not an identifier" y48a9@id)))) (set! y2fea@syntax->datum (lambda (y48ad@x) (y2d06@stx->datum y48ad@x))) (set! y2fec@compile-r6rs-top-level (lambda (y48af@x*) (call-with-values (lambda () (y2f76@top-level-expander y48af@x*)) (lambda (y48b5@y48b2 y48b6@y48b4) ((lambda (y48b9@invoke-code y48ba@lib*) (lambda () (begin (for-each y2b14@y29b5@invoke-library y48ba@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (y28ee@y28a6@expanded->core y48b9@invoke-code)) (void)) (eval-core (y28ee@y28a6@expanded->core y48b9@invoke-code))))) y48b6@y48b4 y48b5@y48b2))))) (set! y2fee@pre-compile-r6rs-top-level (lambda (y48bd@x*) (call-with-values (lambda () (y2f76@top-level-expander y48bd@x*)) (lambda (y48c3@y48c0 y48c4@y48c2) ((lambda (y48c7@invoke-code y48c8@lib*) (begin (for-each y2b14@y29b5@invoke-library y48c8@lib*) (y2898@y27c0@compile-core (y28ee@y28a6@expanded->core y48c7@invoke-code)))) y48c4@y48c2 y48c3@y48c0))))) (set! y2ff0@interaction-environment ((lambda (y48cb@the-env) (lambda () (or y48cb@the-env ((lambda (y48cd@lib y48ce@rib) (begin ((lambda (y48d1@subst) (begin (y2c95@set-rib-sym*! y48ce@rib (map car y48d1@subst)) (y2c97@set-rib-mark**! y48ce@rib (map (lambda (y48d3@x) y2c6c@top-mark*) y48d1@subst)) (y2c99@set-rib-label*! y48ce@rib (map cdr y48d1@subst)))) (y2ae9@y295f@library-subst y48cd@lib)) ((lambda (y48d5@env) (begin (set! y48cb@the-env y48d5@env) y48d5@env)) (y2fa2@make-interaction-env y48ce@rib '() '())))) (y2b0d@y29a7@find-library-by-name '(mosh interaction)) (y2c9f@make-empty-rib))))) '#f)) (set! y2ff2@top-level-context (y289a@y27c4@make-parameter '#f)) (begin (set! y49e3@y2ff2@top-level-context y2ff2@top-level-context) (set! y49e2@y2ff0@interaction-environment y2ff0@interaction-environment) (set! y49e1@y2fee@pre-compile-r6rs-top-level y2fee@pre-compile-r6rs-top-level) (set! y49e0@y2fec@compile-r6rs-top-level y2fec@compile-r6rs-top-level) (set! y49df@y2fea@syntax->datum y2fea@syntax->datum) (set! y49de@y2fe8@datum->syntax y2fe8@datum->syntax) (set! y49dd@y2fe6@identifier? y2fe6@identifier?) (set! y49dc@y2fe4@syntax-violation y2fe4@syntax-violation) (set! y49db@y2fe2@syntax-violation* y2fe2@syntax-violation*) (set! y49da@y2fe0@syntax-error y2fe0@syntax-error) (set! y49d9@y2fde@assertion-error y2fde@assertion-error) (set! y49d8@y2fdc@expression-position y2fdc@expression-position) (set! y49d7@y2fda@extract-position-condition y2fda@extract-position-condition) (set! y49d6@y2fd8@make-source-condition y2fd8@make-source-condition) (set! y49d5@y2fd6@bound-identifier=? y2fd6@bound-identifier=?) (set! y49d4@y2fd4@free-identifier=? y2fd4@free-identifier=?) (set! y49d3@y2fd2@generate-temporaries y2fd2@generate-temporaries) (set! y49d2@y2fd0@make-export-env/macros y2fd0@make-export-env/macros) (set! y49d1@y2fce@make-export-subst y2fce@make-export-subst) (set! y49d0@y2fcc@build-exports y2fcc@build-exports) (set! y49cf@y2fca@rev-map-append y2fca@rev-map-append) (set! y49ce@y2fc8@boot-library-expand y2fc8@boot-library-expand) (set! y49cd@y2fc6@library-expander y2fc6@library-expander) (set! y49cc@y2fc4@eval y2fc4@eval) (set! y49cb@y2fc2@expand y2fc2@expand) (set! y49ca@y2fc0@scheme-report-environment y2fc0@scheme-report-environment) (set! y49c9@y2fbe@null-environment y2fbe@null-environment) (set! y49c8@y2fbc@environment y2fbc@environment) (set! y49c7@y2fba@environment-symbols y2fba@environment-symbols) (set! y49c6@y2fb8@environment? y2fb8@environment?) (set! y49c5@y2fb6@parse-binding y2fb6@parse-binding) (set! y49c4@y2fb4@environment-bindings y2fb4@environment-bindings) (set! y49c3@y2fb2@interaction-environment-symbols y2fb2@interaction-environment-symbols) (set! y49c2@y2fb0@rp y2fb0@rp) (set! y49c1@y2fae@set-interaction-env-locs! y2fae@set-interaction-env-locs!) (set! y49c0@y2fac@set-interaction-env-r! y2fac@set-interaction-env-r!) (set! y49bf@y2faa@set-interaction-env-rib! y2faa@set-interaction-env-rib!) (set! y49be@y2fa8@interaction-env-locs y2fa8@interaction-env-locs) (set! y49bd@y2fa6@interaction-env-r y2fa6@interaction-env-r) (set! y49bc@y2fa4@interaction-env-rib y2fa4@interaction-env-rib) (set! y49bb@y2fa2@make-interaction-env y2fa2@make-interaction-env) (set! y49ba@y2fa0@interaction-env? y2fa0@interaction-env?) (set! y49b9@y2f9d@y2f95 y2f9d@y2f95) (set! y49b8@y2f9b@y2f96 y2f9b@y2f96) (set! y49b7@y2f99@y2f94 y2f99@y2f94) (set! y49b6@y2f93@rp y2f93@rp) (set! y49b5@y2f91@set-env-itc! y2f91@set-env-itc!) (set! y49b4@y2f8f@set-env-labels! y2f8f@set-env-labels!) (set! y49b3@y2f8d@set-env-names! y2f8d@set-env-names!) (set! y49b2@y2f8b@env-itc y2f8b@env-itc) (set! y49b1@y2f89@env-labels y2f89@env-labels) (set! y49b0@y2f87@env-names y2f87@env-names) (set! y49af@y2f85@make-env y2f85@make-env) (set! y49ae@y2f83@env? y2f83@env?) (set! y49ad@y2f80@y2f78 y2f80@y2f78) (set! y49ac@y2f7e@y2f79 y2f7e@y2f79) (set! y49ab@y2f7c@y2f77 y2f7c@y2f77) (set! y49aa@y2f76@top-level-expander y2f76@top-level-expander) (set! y49a9@y2f74@parse-top-level-program y2f74@parse-top-level-program) (set! y49a8@y2f72@core-library-expander y2f72@core-library-expander) (set! y49a7@y2f70@library-body-expander y2f70@library-body-expander) (set! y49a6@y2f6e@chi-interaction-expr y2f6e@chi-interaction-expr) (set! y49a5@y2f6c@chi-library-internal y2f6c@chi-library-internal) (set! y49a4@y2f6a@imp-collector y2f6a@imp-collector) (set! y49a3@y2f68@vis-collector y2f68@vis-collector) (set! y49a2@y2f66@inv-collector y2f66@inv-collector) (set! y49a1@y2f64@make-collector y2f64@make-collector) (set! y49a0@y2f62@make-top-rib y2f62@make-top-rib) (set! y499f@y2f60@parse-import-spec* y2f60@parse-import-spec*) (set! y499e@y2f5e@parse-library y2f5e@parse-library) (set! y499d@y2f5c@parse-library-name y2f5c@parse-library-name) (set! y499c@y2f5a@parse-exports y2f5a@parse-exports) (set! y499b@y2f58@expand-transformer y2f58@expand-transformer) (set! y499a@y2f56@chi-body* y2f56@chi-body*) (set! y4999@y2f54@chi-internal-module y2f54@chi-internal-module) (set! y4998@y2f52@module-interface-exp-id* y2f52@module-interface-exp-id*) (set! y4997@y2f50@set-module-interface-exp-lab-vec! y2f50@set-module-interface-exp-lab-vec!) (set! y4996@y2f4e@set-module-interface-exp-id-vec! y2f4e@set-module-interface-exp-id-vec!) (set! y4995@y2f4c@set-module-interface-first-mark! y2f4c@set-module-interface-first-mark!) (set! y4994@y2f4a@module-interface-exp-lab-vec y2f4a@module-interface-exp-lab-vec) (set! y4993@y2f48@module-interface-exp-id-vec y2f48@module-interface-exp-id-vec) (set! y4992@y2f46@module-interface-first-mark y2f46@module-interface-first-mark) (set! y4991@y2f44@make-module-interface y2f44@make-module-interface) (set! y4990@y2f42@module-interface? y2f42@module-interface?) (set! y498f@y2f3f@y2f37 y2f3f@y2f37) (set! y498e@y2f3d@y2f38 y2f3d@y2f38) (set! y498d@y2f3b@y2f36 y2f3b@y2f36) (set! y498c@y2f35@parse-module y2f35@parse-module) (set! y498b@y2f33@chi-internal y2f33@chi-internal) (set! y498a@y2f31@find-dups y2f31@find-dups) (set! y4989@y2f2f@find-bound=? y2f2f@find-bound=?) (set! y4988@y2f2d@chi-rhs* y2f2d@chi-rhs*) (set! y4987@y2f2b@expand-interaction-rhs*/init* y2f2b@expand-interaction-rhs*/init*) (set! y4986@y2f29@chi-rhs y2f29@chi-rhs) (set! y4985@y2f27@chi-defun y2f27@chi-defun) (set! y4984@y2f25@chi-lambda-clause* y2f25@chi-lambda-clause*) (set! y4983@y2f23@chi-lambda-clause y2f23@chi-lambda-clause) (set! y4982@y2f21@verify-formals y2f21@verify-formals) (set! y4981@y2f1f@chi-set! y2f1f@chi-set!) (set! y4980@y2f1d@chi-expr y2f1d@chi-expr) (set! y497f@y2f1b@chi-application y2f1b@chi-application) (set! y497e@y2f19@chi-expr* y2f19@chi-expr*) (set! y497d@y2f17@chi-global-macro y2f17@chi-global-macro) (set! y497c@y2f15@chi-local-macro y2f15@chi-local-macro) (set! y497b@y2f13@chi-macro y2f13@chi-macro) (set! y497a@y2f11@do-macro-call y2f11@do-macro-call) (set! y4979@y2f0f@local-macro-transformer y2f0f@local-macro-transformer) (set! y4978@y2f0d@macro-transformer y2f0d@macro-transformer) (set! y4977@y2f0b@symbol-macro y2f0b@symbol-macro) (set! y4976@y2f09@core-macro-transformer y2f09@core-macro-transformer) (set! y4975@y2f07@syntax-transformer y2f07@syntax-transformer) (set! y4974@y2f05@ellipsis-map y2f05@ellipsis-map) (set! y4973@y2f03@syntax-case-transformer y2f03@syntax-case-transformer) (set! y4972@y2f01@verify-literals y2f01@verify-literals) (set! y4971@y2eff@underscore? y2eff@underscore?) (set! y4970@y2efd@ellipsis? y2efd@ellipsis?) (set! y496f@y2efb@syntax-dispatch y2efb@syntax-dispatch) (set! y496e@y2ef9@convert-pattern y2ef9@convert-pattern) (set! y496d@y2ef7@foreign-call-transformer y2ef7@foreign-call-transformer) (set! y496c@y2ef5@parameterize-macro y2ef5@parameterize-macro) (set! y496b@y2ef3@incorrect-usage-macro y2ef3@incorrect-usage-macro) (set! y496a@y2ef1@define-condition-type-macro y2ef1@define-condition-type-macro) (set! y4969@y2eef@define-record-type-macro y2eef@define-record-type-macro) (set! y4968@y2eed@define-struct-macro y2eed@define-struct-macro) (set! y4967@y2eeb@quasisyntax-macro y2eeb@quasisyntax-macro) (set! y4966@y2ee9@quasiquote-macro y2ee9@quasiquote-macro) (set! y4965@y2ee7@syntax-rules-macro y2ee7@syntax-rules-macro) (set! y4964@y2ee5@include-into-macro y2ee5@include-into-macro) (set! y4963@y2ee3@include-macro y2ee3@include-macro) (set! y4962@y2ee1@do-include y2ee1@do-include) (set! y4961@y2edf@cond-macro y2edf@cond-macro) (set! y4960@y2edd@and-macro y2edd@and-macro) (set! y495f@y2edb@or-macro y2edb@or-macro) (set! y495e@y2ed9@let*-macro y2ed9@let*-macro) (set! y495d@y2ed7@do-macro y2ed7@do-macro) (set! y495c@y2ed5@identifier-syntax-macro y2ed5@identifier-syntax-macro) (set! y495b@y2ed3@endianness-macro y2ed3@endianness-macro) (set! y495a@y2ed1@assert-macro y2ed1@assert-macro) (set! y4959@y2ecf@delay-macro y2ecf@delay-macro) (set! y4958@y2ecd@time-macro y2ecd@time-macro) (set! y4957@y2ecb@define-enumeration-macro y2ecb@define-enumeration-macro) (set! y4956@y2ec9@guard-macro y2ec9@guard-macro) (set! y4955@y2ec7@trace-letrec-syntax-macro y2ec7@trace-letrec-syntax-macro) (set! y4954@y2ec5@trace-let-syntax-macro y2ec5@trace-let-syntax-macro) (set! y4953@y2ec3@trace-let/rec-syntax y2ec3@trace-let/rec-syntax) (set! y4952@y2ec1@trace-define-syntax-macro y2ec1@trace-define-syntax-macro) (set! y4951@y2ebf@trace-define-macro y2ebf@trace-define-macro) (set! y4950@y2ebd@trace-lambda-macro y2ebd@trace-lambda-macro) (set! y494f@y2ebb@let*-values-macro y2ebb@let*-values-macro) (set! y494e@y2eb9@let-values-macro y2eb9@let-values-macro) (set! y494d@y2eb7@let-macro y2eb7@let-macro) (set! y494c@y2eb5@invalid-fmls-error y2eb5@invalid-fmls-error) (set! y494b@y2eb3@with-syntax-macro y2eb3@with-syntax-macro) (set! y494a@y2eb1@bless y2eb1@bless) (set! y4949@y2eaf@lambda-transformer y2eaf@lambda-transformer) (set! y4948@y2ead@case-lambda-transformer y2ead@case-lambda-transformer) (set! y4947@y2eab@quote-transformer y2eab@quote-transformer) (set! y4946@y2ea9@case-macro y2ea9@case-macro) (set! y4945@y2ea7@or-transformer y2ea7@or-transformer) (set! y4944@y2ea5@and-transformer y2ea5@and-transformer) (set! y4943@y2ea3@if-transformer y2ea3@if-transformer) (set! y4942@y2ea1@unless-macro y2ea1@unless-macro) (set! y4941@y2e9f@when-macro y2e9f@when-macro) (set! y4940@y2e9d@record-constructor-descriptor-transformer y2e9d@record-constructor-descriptor-transformer) (set! y493f@y2e9b@record-type-descriptor-transformer y2e9b@record-type-descriptor-transformer) (set! y493e@y2e99@type-descriptor-transformer y2e99@type-descriptor-transformer) (set! y493d@y2e97@fluid-let-syntax-transformer y2e97@fluid-let-syntax-transformer) (set! y493c@y2e95@letrec*-transformer y2e95@letrec*-transformer) (set! y493b@y2e93@letrec-transformer y2e93@letrec-transformer) (set! y493a@y2e91@letrec-helper y2e91@letrec-helper) (set! y4939@y2e8f@add-lexicals y2e8f@add-lexicals) (set! y4938@y2e8d@add-lexical y2e8d@add-lexical) (set! y4937@y2e8b@set-lexical-mutable! y2e8b@set-lexical-mutable!) (set! y4936@y2e89@lexical-mutable? y2e89@lexical-mutable?) (set! y4935@y2e87@lexical-var y2e87@lexical-var) (set! y4934@y2e85@scheme-stx y2e85@scheme-stx) (set! y4933@y2e83@scheme-stx-hashtable y2e83@scheme-stx-hashtable) (set! y4932@y2e81@parse-define-syntax y2e81@parse-define-syntax) (set! y4931@y2e7f@parse-define y2e7f@parse-define) (set! y4930@y2d2e@make-eval-transformer y2d2e@make-eval-transformer) (set! y492f@y2d2c@variable-transformer-procedure y2d2c@variable-transformer-procedure) (set! y492e@y2d2a@variable-transformer? y2d2a@variable-transformer?) (set! y492d@y2d28@make-variable-transformer y2d28@make-variable-transformer) (set! y492c@y2d26@sanitize-binding y2d26@sanitize-binding) (set! y492b@y2d18@syntax-type y2d18@syntax-type) (set! y492a@y2d16@raise-unbound-error y2d16@raise-unbound-error) (set! y4929@y2d14@binding-value y2d14@binding-value) (set! y4928@y2d12@binding-type y2d12@binding-type) (set! y4927@y2d10@make-binding y2d10@make-binding) (set! y4926@y2d0e@label->binding y2d0e@label->binding) (set! y4925@y2d0c@id->real-label y2d0c@id->real-label) (set! y4924@y2d0a@id->label y2d0a@id->label) (set! y4923@y2d08@same-marks*? y2d08@same-marks*?) (set! y4922@y2d06@stx->datum y2d06@stx->datum) (set! y4921@y2d04@strip y2d04@strip) (set! y4920@y2d02@strip-annotations y2d02@strip-annotations) (set! y491f@y2d00@self-evaluating? y2d00@self-evaluating?) (set! y491e@y2cfe@bound-id-member? y2cfe@bound-id-member?) (set! y491d@y2cfc@distinct-bound-ids? y2cfc@distinct-bound-ids?) (set! y491c@y2cfa@valid-bound-ids? y2cfa@valid-bound-ids?) (set! y491b@y2cf8@free-id=? y2cf8@free-id=?) (set! y491a@y2cf6@bound-id=? y2cf6@bound-id=?) (set! y4919@y2cf4@same-marks? y2cf4@same-marks?) (set! y4918@y2cf2@id->sym y2cf2@id->sym) (set! y4917@y2cf0@id? y2cf0@id?) (set! y4916@y2cee@syntax->list y2cee@syntax->list) (set! y4915@y2cec@syntax-cdr y2cec@syntax-cdr) (set! y4914@y2cea@syntax-car y2cea@syntax-car) (set! y4913@y2ce8@syntax-list? y2ce8@syntax-list?) (set! y4912@y2ce6@syntax-null? y2ce6@syntax-null?) (set! y4911@y2ce4@syntax-vector? y2ce4@syntax-vector?) (set! y4910@y2ce2@syntax-pair? y2ce2@syntax-pair?) (set! y490f@y2ce0@syntax-vector->list y2ce0@syntax-vector->list) (set! y490e@y2cde@syntax-kind? y2cde@syntax-kind?) (set! y490d@y2cdc@add-subst y2cdc@add-subst) (set! y490c@y2cda@add-mark y2cda@add-mark) (set! y490b@y2cd8@mkstx y2cd8@mkstx) (set! y490a@y2cd6@join-wraps y2cd6@join-wraps) (set! y4909@y2cd4@anti-mark? y2cd4@anti-mark?) (set! y4908@y2cd2@anti-mark y2cd2@anti-mark) (set! y4907@y2cd0@gen-mark y2cd0@gen-mark) (set! y4906@y2cce@datum->stx y2cce@datum->stx) (set! y4905@y2ccc@rp y2ccc@rp) (set! y4904@y2cca@set-stx-ae*! y2cca@set-stx-ae*!) (set! y4903@y2cc8@set-stx-subst*! y2cc8@set-stx-subst*!) (set! y4902@y2cc6@set-stx-mark*! y2cc6@set-stx-mark*!) (set! y4901@y2cc4@set-stx-expr! y2cc4@set-stx-expr!) (set! y4900@y2cc2@stx-ae* y2cc2@stx-ae*) (set! y48ff@y2cc0@stx-subst* y2cc0@stx-subst*) (set! y48fe@y2cbe@stx-mark* y2cbe@stx-mark*) (set! y48fd@y2cbc@stx-expr y2cbc@stx-expr) (set! y48fc@y2cba@make-stx y2cba@make-stx) (set! y48fb@y2cb8@stx? y2cb8@stx?) (set! y48fa@y2cb5@y2cad y2cb5@y2cad) (set! y48f9@y2cb3@y2cae y2cb3@y2cae) (set! y48f8@y2cb1@y2cac y2cb1@y2cac) (set! y48f7@y2cab@make-full-rib y2cab@make-full-rib) (set! y48f6@y2ca9@unseal-rib! y2ca9@unseal-rib!) (set! y48f5@y2ca7@seal-rib! y2ca7@seal-rib!) (set! y48f4@y2ca5@make-rib-map y2ca5@make-rib-map) (set! y48f3@y2ca3@extend-rib/nc! y2ca3@extend-rib/nc!) (set! y48f2@y2ca1@extend-rib! y2ca1@extend-rib!) (set! y48f1@y2c9f@make-empty-rib y2c9f@make-empty-rib) (set! y48f0@y2c9d@set-rib-cache! y2c9d@set-rib-cache!) (set! y48ef@y2c9b@set-rib-sealed/freq! y2c9b@set-rib-sealed/freq!) (set! y48ee@y2c99@set-rib-label*! y2c99@set-rib-label*!) (set! y48ed@y2c97@set-rib-mark**! y2c97@set-rib-mark**!) (set! y48ec@y2c95@set-rib-sym*! y2c95@set-rib-sym*!) (set! y48eb@y2c93@rib-cache y2c93@rib-cache) (set! y48ea@y2c91@rib-sealed/freq y2c91@rib-sealed/freq) (set! y48e9@y2c8f@rib-label* y2c8f@rib-label*) (set! y48e8@y2c8d@rib-mark** y2c8d@rib-mark**) (set! y48e7@y2c8b@rib-sym* y2c8b@rib-sym*) (set! y48e6@y2c89@make-rib y2c89@make-rib) (set! y48e5@y2c87@rib? y2c87@rib?) (set! y48e4@y2c84@y2c7c y2c84@y2c7c) (set! y48e3@y2c82@y2c7d y2c82@y2c7d) (set! y48e2@y2c80@y2c7b y2c80@y2c7b) (set! y48e1@y2c7a@gen-define-label y2c7a@gen-define-label) (set! y48e0@y2c78@gen-define-label+loc y2c78@gen-define-label+loc) (set! y48df@y2c76@gen-top-level-label y2c76@gen-top-level-label) (set! y48de@y2c74@gen-label y2c74@gen-label) (set! y48dd@y2c72@gen-global y2c72@gen-global) (set! y48dc@y2c70@gen-lexical y2c70@gen-lexical) (set! y48db@y2c6e@top-marked? y2c6e@top-marked?) (set! y48da@y2c6c@top-mark* y2c6c@top-mark*) (set! y48d9@y2c67@set-union y2c67@set-union) (set! y48d8@y2c65@set-cons y2c65@set-cons) (set! y48d7@y2c63@file-options-macro y2c63@file-options-macro) (y2b0a@y29a1@current-library-expander y2fc6@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (y49ed@y49e8 y49ef@y49ea y49f1@y49e9 y49f4@&condition? y49f6@make-&condition y49f8@&condition-rtd y49fa@&condition-rcd y4a46@y4a41 y4a48@y4a43 y4a4a@y4a42 y4a4d@p? y4a4f@make-message-condition y4a51@y4a40 y4a53@message-condition? y4a55@condition-message y4a57@&message-rtd y4a59@&message-rcd y4a5f@y4a5a y4a61@y4a5c y4a63@y4a5b y4a66@p? y4a68@make-warning y4a6a@warning? y4a6c@&warning-rtd y4a6e@&warning-rcd y4a74@y4a6f y4a76@y4a71 y4a78@y4a70 y4a7b@p? y4a7d@make-serious-condition y4a7f@serious-condition? y4a81@&serious-rtd y4a83@&serious-rcd y4a89@y4a84 y4a8b@y4a86 y4a8d@y4a85 y4a90@p? y4a92@make-error y4a94@error? y4a96@&error-rtd y4a98@&error-rcd y4a9e@y4a99 y4aa0@y4a9b y4aa2@y4a9a y4aa5@p? y4aa7@make-violation y4aa9@violation? y4aab@&violation-rtd y4aad@&violation-rcd y4ab3@y4aae y4ab5@y4ab0 y4ab7@y4aaf y4aba@p? y4abc@make-assertion-violation y4abe@assertion-violation? y4ac0@&assertion-rtd y4ac2@&assertion-rcd y4aca@y4ac5 y4acc@y4ac7 y4ace@y4ac6 y4ad1@p? y4ad3@make-irritants-condition y4ad5@y4ac4 y4ad7@irritants-condition? y4ad9@condition-irritants y4adb@&irritants-rtd y4add@&irritants-rcd y4ae5@y4ae0 y4ae7@y4ae2 y4ae9@y4ae1 y4aec@p? y4aee@make-who-condition y4af0@y4adf y4af2@who-condition? y4af4@condition-who y4af6@&who-rtd y4af8@&who-rcd y4afe@y4af9 y4b00@y4afb y4b02@y4afa y4b05@p? y4b07@make-non-continuable-violation y4b09@non-continuable-violation? y4b0b@&non-continuable-rtd y4b0d@&non-continuable-rcd y4b13@y4b0e y4b15@y4b10 y4b17@y4b0f y4b1a@p? y4b1c@make-implementation-restriction-violation y4b1e@implementation-restriction-violation? y4b20@&implementation-restriction-rtd y4b22@&implementation-restriction-rcd y4b28@y4b23 y4b2a@y4b25 y4b2c@y4b24 y4b2f@p? y4b31@make-lexical-violation y4b33@lexical-violation? y4b35@&lexical-rtd y4b37@&lexical-rcd y4b41@y4b3c y4b43@y4b3e y4b45@y4b3d y4b48@p? y4b4a@make-syntax-violation y4b4c@y4b39 y4b4e@y4b3b y4b50@syntax-violation? y4b52@syntax-violation-form y4b54@syntax-violation-subform y4b56@&syntax-rtd y4b58@&syntax-rcd y4b5e@y4b59 y4b60@y4b5b y4b62@y4b5a y4b65@p? y4b67@make-undefined-violation y4b69@undefined-violation? y4b6b@&undefined-rtd y4b6d@&undefined-rcd y4b73@y4b6e y4b75@y4b70 y4b77@y4b6f y4b7a@p? y4b7c@make-i/o-error y4b7e@i/o-error? y4b80@&i/o-rtd y4b82@&i/o-rcd y4b88@y4b83 y4b8a@y4b85 y4b8c@y4b84 y4b8f@p? y4b91@make-i/o-read-error y4b93@i/o-read-error? y4b95@&i/o-read-rtd y4b97@&i/o-read-rcd y4b9d@y4b98 y4b9f@y4b9a y4ba1@y4b99 y4ba4@p? y4ba6@make-i/o-write-error y4ba8@i/o-write-error? y4baa@&i/o-write-rtd y4bac@&i/o-write-rcd y4bb4@y4baf y4bb6@y4bb1 y4bb8@y4bb0 y4bbb@p? y4bbd@make-i/o-invalid-position-error y4bbf@y4bae y4bc1@i/o-invalid-position-error? y4bc3@i/o-error-position y4bc5@&i/o-invalid-position-rtd y4bc7@&i/o-invalid-position-rcd y4bcf@y4bca y4bd1@y4bcc y4bd3@y4bcb y4bd6@p? y4bd8@make-i/o-filename-error y4bda@y4bc9 y4bdc@i/o-filename-error? y4bde@i/o-error-filename y4be0@&i/o-filename-rtd y4be2@&i/o-filename-rcd y4be8@y4be3 y4bea@y4be5 y4bec@y4be4 y4bef@p? y4bf1@make-i/o-file-protection-error y4bf3@i/o-file-protection-error? y4bf5@&i/o-file-protection-rtd y4bf7@&i/o-file-protection-rcd y4bfd@y4bf8 y4bff@y4bfa y4c01@y4bf9 y4c04@p? y4c06@make-i/o-file-is-read-only-error y4c08@i/o-file-is-read-only-error? y4c0a@&i/o-file-is-read-only-rtd y4c0c@&i/o-file-is-read-only-rcd y4c12@y4c0d y4c14@y4c0f y4c16@y4c0e y4c19@p? y4c1b@make-i/o-file-already-exists-error y4c1d@i/o-file-already-exists-error? y4c1f@&i/o-file-already-exists-rtd y4c21@&i/o-file-already-exists-rcd y4c27@y4c22 y4c29@y4c24 y4c2b@y4c23 y4c2e@p? y4c30@make-i/o-file-does-not-exist-error y4c32@i/o-file-does-not-exist-error? y4c34@&i/o-file-does-not-exist-rtd y4c36@&i/o-file-does-not-exist-rcd y4c3e@y4c39 y4c40@y4c3b y4c42@y4c3a y4c45@p? y4c47@make-i/o-port-error y4c49@y4c38 y4c4b@i/o-port-error? y4c4d@i/o-error-port y4c4f@&i/o-port-rtd y4c51@&i/o-port-rcd y4c57@y4c52 y4c59@y4c54 y4c5b@y4c53 y4c5e@p? y4c60@make-i/o-decoding-error y4c62@i/o-decoding-error? y4c64@&i/o-decoding-rtd y4c66@&i/o-decoding-rcd y4c6e@y4c69 y4c70@y4c6b y4c72@y4c6a y4c75@p? y4c77@make-i/o-encoding-error y4c79@y4c68 y4c7b@i/o-encoding-error? y4c7d@i/o-encoding-error-char y4c7f@&i/o-encoding-rtd y4c81@&i/o-encoding-rcd y4c87@y4c82 y4c89@y4c84 y4c8b@y4c83 y4c8e@p? y4c90@make-no-infinities-violation y4c92@no-infinities-violation? y4c94@&no-infinities-rtd y4c96@&no-infinities-rcd y4c9c@y4c97 y4c9e@y4c99 y4ca0@y4c98 y4ca3@p? y4ca5@make-no-nans-violation y4ca7@no-nans-violation? y4ca9@&no-nans-rtd y4cab@&no-nans-rcd) (begin (set! y49ed@y49e8 (make-record-type-descriptor '&condition '#f 'y49eb '#f '#f '#())) (set! y49ef@y49ea '#f) (set! y49f1@y49e9 (make-record-constructor-descriptor y49ed@y49e8 '#f y49ef@y49ea)) (set! y49f4@&condition? (record-predicate y49ed@y49e8)) (set! y49f6@make-&condition (record-constructor y49f1@y49e9)) (set! y49f8@&condition-rtd y49ed@y49e8) (set! y49fa@&condition-rcd y49f1@y49e9) (set! y4a46@y4a41 (make-record-type-descriptor '&message y49ed@y49e8 'y4a44 '#f '#f '#((immutable message)))) (set! y4a48@y4a43 '#f) (set! y4a4a@y4a42 (make-record-constructor-descriptor y4a46@y4a41 y49f1@y49e9 y4a48@y4a43)) (set! y4a4d@p? (record-predicate y4a46@y4a41)) (set! y4a4f@make-message-condition (record-constructor y4a4a@y4a42)) (set! y4a51@y4a40 (record-accessor y4a46@y4a41 '0)) (set! y4a53@message-condition? (condition-predicate y4a46@y4a41)) (set! y4a55@condition-message (condition-accessor y4a46@y4a41 y4a51@y4a40)) (set! y4a57@&message-rtd y4a46@y4a41) (set! y4a59@&message-rcd y4a4a@y4a42) (set! y4a5f@y4a5a (make-record-type-descriptor '&warning y49ed@y49e8 'y4a5d '#f '#f '#())) (set! y4a61@y4a5c '#f) (set! y4a63@y4a5b (make-record-constructor-descriptor y4a5f@y4a5a y49f1@y49e9 y4a61@y4a5c)) (set! y4a66@p? (record-predicate y4a5f@y4a5a)) (set! y4a68@make-warning (record-constructor y4a63@y4a5b)) (set! y4a6a@warning? (condition-predicate y4a5f@y4a5a)) (set! y4a6c@&warning-rtd y4a5f@y4a5a) (set! y4a6e@&warning-rcd y4a63@y4a5b) (set! y4a74@y4a6f (make-record-type-descriptor '&serious y49ed@y49e8 'y4a72 '#f '#f '#())) (set! y4a76@y4a71 '#f) (set! y4a78@y4a70 (make-record-constructor-descriptor y4a74@y4a6f y49f1@y49e9 y4a76@y4a71)) (set! y4a7b@p? (record-predicate y4a74@y4a6f)) (set! y4a7d@make-serious-condition (record-constructor y4a78@y4a70)) (set! y4a7f@serious-condition? (condition-predicate y4a74@y4a6f)) (set! y4a81@&serious-rtd y4a74@y4a6f) (set! y4a83@&serious-rcd y4a78@y4a70) (set! y4a89@y4a84 (make-record-type-descriptor '&error y4a74@y4a6f 'y4a87 '#f '#f '#())) (set! y4a8b@y4a86 '#f) (set! y4a8d@y4a85 (make-record-constructor-descriptor y4a89@y4a84 y4a78@y4a70 y4a8b@y4a86)) (set! y4a90@p? (record-predicate y4a89@y4a84)) (set! y4a92@make-error (record-constructor y4a8d@y4a85)) (set! y4a94@error? (condition-predicate y4a89@y4a84)) (set! y4a96@&error-rtd y4a89@y4a84) (set! y4a98@&error-rcd y4a8d@y4a85) (set! y4a9e@y4a99 (make-record-type-descriptor '&violation y4a74@y4a6f 'y4a9c '#f '#f '#())) (set! y4aa0@y4a9b '#f) (set! y4aa2@y4a9a (make-record-constructor-descriptor y4a9e@y4a99 y4a78@y4a70 y4aa0@y4a9b)) (set! y4aa5@p? (record-predicate y4a9e@y4a99)) (set! y4aa7@make-violation (record-constructor y4aa2@y4a9a)) (set! y4aa9@violation? (condition-predicate y4a9e@y4a99)) (set! y4aab@&violation-rtd y4a9e@y4a99) (set! y4aad@&violation-rcd y4aa2@y4a9a) (set! y4ab3@y4aae (make-record-type-descriptor '&assertion y4a9e@y4a99 'y4ab1 '#f '#f '#())) (set! y4ab5@y4ab0 '#f) (set! y4ab7@y4aaf (make-record-constructor-descriptor y4ab3@y4aae y4aa2@y4a9a y4ab5@y4ab0)) (set! y4aba@p? (record-predicate y4ab3@y4aae)) (set! y4abc@make-assertion-violation (record-constructor y4ab7@y4aaf)) (set! y4abe@assertion-violation? (condition-predicate y4ab3@y4aae)) (set! y4ac0@&assertion-rtd y4ab3@y4aae) (set! y4ac2@&assertion-rcd y4ab7@y4aaf) (set! y4aca@y4ac5 (make-record-type-descriptor '&irritants y49ed@y49e8 'y4ac8 '#f '#f '#((immutable irritants)))) (set! y4acc@y4ac7 '#f) (set! y4ace@y4ac6 (make-record-constructor-descriptor y4aca@y4ac5 y49f1@y49e9 y4acc@y4ac7)) (set! y4ad1@p? (record-predicate y4aca@y4ac5)) (set! y4ad3@make-irritants-condition (record-constructor y4ace@y4ac6)) (set! y4ad5@y4ac4 (record-accessor y4aca@y4ac5 '0)) (set! y4ad7@irritants-condition? (condition-predicate y4aca@y4ac5)) (set! y4ad9@condition-irritants (condition-accessor y4aca@y4ac5 y4ad5@y4ac4)) (set! y4adb@&irritants-rtd y4aca@y4ac5) (set! y4add@&irritants-rcd y4ace@y4ac6) (set! y4ae5@y4ae0 (make-record-type-descriptor '&who y49ed@y49e8 'y4ae3 '#f '#f '#((immutable who)))) (set! y4ae7@y4ae2 '#f) (set! y4ae9@y4ae1 (make-record-constructor-descriptor y4ae5@y4ae0 y49f1@y49e9 y4ae7@y4ae2)) (set! y4aec@p? (record-predicate y4ae5@y4ae0)) (set! y4aee@make-who-condition (record-constructor y4ae9@y4ae1)) (set! y4af0@y4adf (record-accessor y4ae5@y4ae0 '0)) (set! y4af2@who-condition? (condition-predicate y4ae5@y4ae0)) (set! y4af4@condition-who (condition-accessor y4ae5@y4ae0 y4af0@y4adf)) (set! y4af6@&who-rtd y4ae5@y4ae0) (set! y4af8@&who-rcd y4ae9@y4ae1) (set! y4afe@y4af9 (make-record-type-descriptor '&non-continuable y4a9e@y4a99 'y4afc '#f '#f '#())) (set! y4b00@y4afb '#f) (set! y4b02@y4afa (make-record-constructor-descriptor y4afe@y4af9 y4aa2@y4a9a y4b00@y4afb)) (set! y4b05@p? (record-predicate y4afe@y4af9)) (set! y4b07@make-non-continuable-violation (record-constructor y4b02@y4afa)) (set! y4b09@non-continuable-violation? (condition-predicate y4afe@y4af9)) (set! y4b0b@&non-continuable-rtd y4afe@y4af9) (set! y4b0d@&non-continuable-rcd y4b02@y4afa) (set! y4b13@y4b0e (make-record-type-descriptor '&implementation-restriction y4a9e@y4a99 'y4b11 '#f '#f '#())) (set! y4b15@y4b10 '#f) (set! y4b17@y4b0f (make-record-constructor-descriptor y4b13@y4b0e y4aa2@y4a9a y4b15@y4b10)) (set! y4b1a@p? (record-predicate y4b13@y4b0e)) (set! y4b1c@make-implementation-restriction-violation (record-constructor y4b17@y4b0f)) (set! y4b1e@implementation-restriction-violation? (condition-predicate y4b13@y4b0e)) (set! y4b20@&implementation-restriction-rtd y4b13@y4b0e) (set! y4b22@&implementation-restriction-rcd y4b17@y4b0f) (set! y4b28@y4b23 (make-record-type-descriptor '&lexical y4a9e@y4a99 'y4b26 '#f '#f '#())) (set! y4b2a@y4b25 '#f) (set! y4b2c@y4b24 (make-record-constructor-descriptor y4b28@y4b23 y4aa2@y4a9a y4b2a@y4b25)) (set! y4b2f@p? (record-predicate y4b28@y4b23)) (set! y4b31@make-lexical-violation (record-constructor y4b2c@y4b24)) (set! y4b33@lexical-violation? (condition-predicate y4b28@y4b23)) (set! y4b35@&lexical-rtd y4b28@y4b23) (set! y4b37@&lexical-rcd y4b2c@y4b24) (set! y4b41@y4b3c (make-record-type-descriptor '&syntax y4a9e@y4a99 'y4b3f '#f '#f '#((immutable form) (immutable subform)))) (set! y4b43@y4b3e '#f) (set! y4b45@y4b3d (make-record-constructor-descriptor y4b41@y4b3c y4aa2@y4a9a y4b43@y4b3e)) (set! y4b48@p? (record-predicate y4b41@y4b3c)) (set! y4b4a@make-syntax-violation (record-constructor y4b45@y4b3d)) (set! y4b4c@y4b39 (record-accessor y4b41@y4b3c '0)) (set! y4b4e@y4b3b (record-accessor y4b41@y4b3c '1)) (set! y4b50@syntax-violation? (condition-predicate y4b41@y4b3c)) (set! y4b52@syntax-violation-form (condition-accessor y4b41@y4b3c y4b4c@y4b39)) (set! y4b54@syntax-violation-subform (condition-accessor y4b41@y4b3c y4b4e@y4b3b)) (set! y4b56@&syntax-rtd y4b41@y4b3c) (set! y4b58@&syntax-rcd y4b45@y4b3d) (set! y4b5e@y4b59 (make-record-type-descriptor '&undefined y4a9e@y4a99 'y4b5c '#f '#f '#())) (set! y4b60@y4b5b '#f) (set! y4b62@y4b5a (make-record-constructor-descriptor y4b5e@y4b59 y4aa2@y4a9a y4b60@y4b5b)) (set! y4b65@p? (record-predicate y4b5e@y4b59)) (set! y4b67@make-undefined-violation (record-constructor y4b62@y4b5a)) (set! y4b69@undefined-violation? (condition-predicate y4b5e@y4b59)) (set! y4b6b@&undefined-rtd y4b5e@y4b59) (set! y4b6d@&undefined-rcd y4b62@y4b5a) (set! y4b73@y4b6e (make-record-type-descriptor '&i/o y4a89@y4a84 'y4b71 '#f '#f '#())) (set! y4b75@y4b70 '#f) (set! y4b77@y4b6f (make-record-constructor-descriptor y4b73@y4b6e y4a8d@y4a85 y4b75@y4b70)) (set! y4b7a@p? (record-predicate y4b73@y4b6e)) (set! y4b7c@make-i/o-error (record-constructor y4b77@y4b6f)) (set! y4b7e@i/o-error? (condition-predicate y4b73@y4b6e)) (set! y4b80@&i/o-rtd y4b73@y4b6e) (set! y4b82@&i/o-rcd y4b77@y4b6f) (set! y4b88@y4b83 (make-record-type-descriptor '&i/o-read y4b73@y4b6e 'y4b86 '#f '#f '#())) (set! y4b8a@y4b85 '#f) (set! y4b8c@y4b84 (make-record-constructor-descriptor y4b88@y4b83 y4b77@y4b6f y4b8a@y4b85)) (set! y4b8f@p? (record-predicate y4b88@y4b83)) (set! y4b91@make-i/o-read-error (record-constructor y4b8c@y4b84)) (set! y4b93@i/o-read-error? (condition-predicate y4b88@y4b83)) (set! y4b95@&i/o-read-rtd y4b88@y4b83) (set! y4b97@&i/o-read-rcd y4b8c@y4b84) (set! y4b9d@y4b98 (make-record-type-descriptor '&i/o-write y4b73@y4b6e 'y4b9b '#f '#f '#())) (set! y4b9f@y4b9a '#f) (set! y4ba1@y4b99 (make-record-constructor-descriptor y4b9d@y4b98 y4b77@y4b6f y4b9f@y4b9a)) (set! y4ba4@p? (record-predicate y4b9d@y4b98)) (set! y4ba6@make-i/o-write-error (record-constructor y4ba1@y4b99)) (set! y4ba8@i/o-write-error? (condition-predicate y4b9d@y4b98)) (set! y4baa@&i/o-write-rtd y4b9d@y4b98) (set! y4bac@&i/o-write-rcd y4ba1@y4b99) (set! y4bb4@y4baf (make-record-type-descriptor '&i/o-invalid-position y4b73@y4b6e 'y4bb2 '#f '#f '#((immutable position)))) (set! y4bb6@y4bb1 '#f) (set! y4bb8@y4bb0 (make-record-constructor-descriptor y4bb4@y4baf y4b77@y4b6f y4bb6@y4bb1)) (set! y4bbb@p? (record-predicate y4bb4@y4baf)) (set! y4bbd@make-i/o-invalid-position-error (record-constructor y4bb8@y4bb0)) (set! y4bbf@y4bae (record-accessor y4bb4@y4baf '0)) (set! y4bc1@i/o-invalid-position-error? (condition-predicate y4bb4@y4baf)) (set! y4bc3@i/o-error-position (condition-accessor y4bb4@y4baf y4bbf@y4bae)) (set! y4bc5@&i/o-invalid-position-rtd y4bb4@y4baf) (set! y4bc7@&i/o-invalid-position-rcd y4bb8@y4bb0) (set! y4bcf@y4bca (make-record-type-descriptor '&i/o-filename y4b73@y4b6e 'y4bcd '#f '#f '#((immutable filename)))) (set! y4bd1@y4bcc '#f) (set! y4bd3@y4bcb (make-record-constructor-descriptor y4bcf@y4bca y4b77@y4b6f y4bd1@y4bcc)) (set! y4bd6@p? (record-predicate y4bcf@y4bca)) (set! y4bd8@make-i/o-filename-error (record-constructor y4bd3@y4bcb)) (set! y4bda@y4bc9 (record-accessor y4bcf@y4bca '0)) (set! y4bdc@i/o-filename-error? (condition-predicate y4bcf@y4bca)) (set! y4bde@i/o-error-filename (condition-accessor y4bcf@y4bca y4bda@y4bc9)) (set! y4be0@&i/o-filename-rtd y4bcf@y4bca) (set! y4be2@&i/o-filename-rcd y4bd3@y4bcb) (set! y4be8@y4be3 (make-record-type-descriptor '&i/o-file-protection y4bcf@y4bca 'y4be6 '#f '#f '#())) (set! y4bea@y4be5 '#f) (set! y4bec@y4be4 (make-record-constructor-descriptor y4be8@y4be3 y4bd3@y4bcb y4bea@y4be5)) (set! y4bef@p? (record-predicate y4be8@y4be3)) (set! y4bf1@make-i/o-file-protection-error (record-constructor y4bec@y4be4)) (set! y4bf3@i/o-file-protection-error? (condition-predicate y4be8@y4be3)) (set! y4bf5@&i/o-file-protection-rtd y4be8@y4be3) (set! y4bf7@&i/o-file-protection-rcd y4bec@y4be4) (set! y4bfd@y4bf8 (make-record-type-descriptor '&i/o-file-is-read-only y4be8@y4be3 'y4bfb '#f '#f '#())) (set! y4bff@y4bfa '#f) (set! y4c01@y4bf9 (make-record-constructor-descriptor y4bfd@y4bf8 y4bec@y4be4 y4bff@y4bfa)) (set! y4c04@p? (record-predicate y4bfd@y4bf8)) (set! y4c06@make-i/o-file-is-read-only-error (record-constructor y4c01@y4bf9)) (set! y4c08@i/o-file-is-read-only-error? (condition-predicate y4bfd@y4bf8)) (set! y4c0a@&i/o-file-is-read-only-rtd y4bfd@y4bf8) (set! y4c0c@&i/o-file-is-read-only-rcd y4c01@y4bf9) (set! y4c12@y4c0d (make-record-type-descriptor '&i/o-file-already-exists y4bcf@y4bca 'y4c10 '#f '#f '#())) (set! y4c14@y4c0f '#f) (set! y4c16@y4c0e (make-record-constructor-descriptor y4c12@y4c0d y4bd3@y4bcb y4c14@y4c0f)) (set! y4c19@p? (record-predicate y4c12@y4c0d)) (set! y4c1b@make-i/o-file-already-exists-error (record-constructor y4c16@y4c0e)) (set! y4c1d@i/o-file-already-exists-error? (condition-predicate y4c12@y4c0d)) (set! y4c1f@&i/o-file-already-exists-rtd y4c12@y4c0d) (set! y4c21@&i/o-file-already-exists-rcd y4c16@y4c0e) (set! y4c27@y4c22 (make-record-type-descriptor '&i/o-file-does-not-exist y4bcf@y4bca 'y4c25 '#f '#f '#())) (set! y4c29@y4c24 '#f) (set! y4c2b@y4c23 (make-record-constructor-descriptor y4c27@y4c22 y4bd3@y4bcb y4c29@y4c24)) (set! y4c2e@p? (record-predicate y4c27@y4c22)) (set! y4c30@make-i/o-file-does-not-exist-error (record-constructor y4c2b@y4c23)) (set! y4c32@i/o-file-does-not-exist-error? (condition-predicate y4c27@y4c22)) (set! y4c34@&i/o-file-does-not-exist-rtd y4c27@y4c22) (set! y4c36@&i/o-file-does-not-exist-rcd y4c2b@y4c23) (set! y4c3e@y4c39 (make-record-type-descriptor '&i/o-port y4b73@y4b6e 'y4c3c '#f '#f '#((immutable port)))) (set! y4c40@y4c3b '#f) (set! y4c42@y4c3a (make-record-constructor-descriptor y4c3e@y4c39 y4b77@y4b6f y4c40@y4c3b)) (set! y4c45@p? (record-predicate y4c3e@y4c39)) (set! y4c47@make-i/o-port-error (record-constructor y4c42@y4c3a)) (set! y4c49@y4c38 (record-accessor y4c3e@y4c39 '0)) (set! y4c4b@i/o-port-error? (condition-predicate y4c3e@y4c39)) (set! y4c4d@i/o-error-port (condition-accessor y4c3e@y4c39 y4c49@y4c38)) (set! y4c4f@&i/o-port-rtd y4c3e@y4c39) (set! y4c51@&i/o-port-rcd y4c42@y4c3a) (set! y4c57@y4c52 (make-record-type-descriptor '&i/o-decoding y4c3e@y4c39 'y4c55 '#f '#f '#())) (set! y4c59@y4c54 '#f) (set! y4c5b@y4c53 (make-record-constructor-descriptor y4c57@y4c52 y4c42@y4c3a y4c59@y4c54)) (set! y4c5e@p? (record-predicate y4c57@y4c52)) (set! y4c60@make-i/o-decoding-error (record-constructor y4c5b@y4c53)) (set! y4c62@i/o-decoding-error? (condition-predicate y4c57@y4c52)) (set! y4c64@&i/o-decoding-rtd y4c57@y4c52) (set! y4c66@&i/o-decoding-rcd y4c5b@y4c53) (set! y4c6e@y4c69 (make-record-type-descriptor '&i/o-encoding y4c3e@y4c39 'y4c6c '#f '#f '#((immutable char)))) (set! y4c70@y4c6b '#f) (set! y4c72@y4c6a (make-record-constructor-descriptor y4c6e@y4c69 y4c42@y4c3a y4c70@y4c6b)) (set! y4c75@p? (record-predicate y4c6e@y4c69)) (set! y4c77@make-i/o-encoding-error (record-constructor y4c72@y4c6a)) (set! y4c79@y4c68 (record-accessor y4c6e@y4c69 '0)) (set! y4c7b@i/o-encoding-error? (condition-predicate y4c6e@y4c69)) (set! y4c7d@i/o-encoding-error-char (condition-accessor y4c6e@y4c69 y4c79@y4c68)) (set! y4c7f@&i/o-encoding-rtd y4c6e@y4c69) (set! y4c81@&i/o-encoding-rcd y4c72@y4c6a) (set! y4c87@y4c82 (make-record-type-descriptor '&no-infinities y4b13@y4b0e 'y4c85 '#f '#f '#())) (set! y4c89@y4c84 '#f) (set! y4c8b@y4c83 (make-record-constructor-descriptor y4c87@y4c82 y4b17@y4b0f y4c89@y4c84)) (set! y4c8e@p? (record-predicate y4c87@y4c82)) (set! y4c90@make-no-infinities-violation (record-constructor y4c8b@y4c83)) (set! y4c92@no-infinities-violation? (condition-predicate y4c87@y4c82)) (set! y4c94@&no-infinities-rtd y4c87@y4c82) (set! y4c96@&no-infinities-rcd y4c8b@y4c83) (set! y4c9c@y4c97 (make-record-type-descriptor '&no-nans y4b13@y4b0e 'y4c9a '#f '#f '#())) (set! y4c9e@y4c99 '#f) (set! y4ca0@y4c98 (make-record-constructor-descriptor y4c9c@y4c97 y4b17@y4b0f y4c9e@y4c99)) (set! y4ca3@p? (record-predicate y4c9c@y4c97)) (set! y4ca5@make-no-nans-violation (record-constructor y4ca0@y4c98)) (set! y4ca7@no-nans-violation? (condition-predicate y4c9c@y4c97)) (set! y4ca9@&no-nans-rtd y4c9c@y4c97) (set! y4cab@&no-nans-rcd y4ca0@y4c98) (begin (set! y4d9c@y4cab@&no-nans-rcd y4cab@&no-nans-rcd) (set! y4d9b@y4ca9@&no-nans-rtd y4ca9@&no-nans-rtd) (set! y4d9a@y4ca7@no-nans-violation? y4ca7@no-nans-violation?) (set! y4d99@y4ca5@make-no-nans-violation y4ca5@make-no-nans-violation) (set! y4d98@y4ca3@p? y4ca3@p?) (set! y4d97@y4ca0@y4c98 y4ca0@y4c98) (set! y4d96@y4c9e@y4c99 y4c9e@y4c99) (set! y4d95@y4c9c@y4c97 y4c9c@y4c97) (set! y4d94@y4c96@&no-infinities-rcd y4c96@&no-infinities-rcd) (set! y4d93@y4c94@&no-infinities-rtd y4c94@&no-infinities-rtd) (set! y4d92@y4c92@no-infinities-violation? y4c92@no-infinities-violation?) (set! y4d91@y4c90@make-no-infinities-violation y4c90@make-no-infinities-violation) (set! y4d90@y4c8e@p? y4c8e@p?) (set! y4d8f@y4c8b@y4c83 y4c8b@y4c83) (set! y4d8e@y4c89@y4c84 y4c89@y4c84) (set! y4d8d@y4c87@y4c82 y4c87@y4c82) (set! y4d8c@y4c81@&i/o-encoding-rcd y4c81@&i/o-encoding-rcd) (set! y4d8b@y4c7f@&i/o-encoding-rtd y4c7f@&i/o-encoding-rtd) (set! y4d8a@y4c7d@i/o-encoding-error-char y4c7d@i/o-encoding-error-char) (set! y4d89@y4c7b@i/o-encoding-error? y4c7b@i/o-encoding-error?) (set! y4d88@y4c79@y4c68 y4c79@y4c68) (set! y4d87@y4c77@make-i/o-encoding-error y4c77@make-i/o-encoding-error) (set! y4d86@y4c75@p? y4c75@p?) (set! y4d85@y4c72@y4c6a y4c72@y4c6a) (set! y4d84@y4c70@y4c6b y4c70@y4c6b) (set! y4d83@y4c6e@y4c69 y4c6e@y4c69) (set! y4d82@y4c66@&i/o-decoding-rcd y4c66@&i/o-decoding-rcd) (set! y4d81@y4c64@&i/o-decoding-rtd y4c64@&i/o-decoding-rtd) (set! y4d80@y4c62@i/o-decoding-error? y4c62@i/o-decoding-error?) (set! y4d7f@y4c60@make-i/o-decoding-error y4c60@make-i/o-decoding-error) (set! y4d7e@y4c5e@p? y4c5e@p?) (set! y4d7d@y4c5b@y4c53 y4c5b@y4c53) (set! y4d7c@y4c59@y4c54 y4c59@y4c54) (set! y4d7b@y4c57@y4c52 y4c57@y4c52) (set! y4d7a@y4c51@&i/o-port-rcd y4c51@&i/o-port-rcd) (set! y4d79@y4c4f@&i/o-port-rtd y4c4f@&i/o-port-rtd) (set! y4d78@y4c4d@i/o-error-port y4c4d@i/o-error-port) (set! y4d77@y4c4b@i/o-port-error? y4c4b@i/o-port-error?) (set! y4d76@y4c49@y4c38 y4c49@y4c38) (set! y4d75@y4c47@make-i/o-port-error y4c47@make-i/o-port-error) (set! y4d74@y4c45@p? y4c45@p?) (set! y4d73@y4c42@y4c3a y4c42@y4c3a) (set! y4d72@y4c40@y4c3b y4c40@y4c3b) (set! y4d71@y4c3e@y4c39 y4c3e@y4c39) (set! y4d70@y4c36@&i/o-file-does-not-exist-rcd y4c36@&i/o-file-does-not-exist-rcd) (set! y4d6f@y4c34@&i/o-file-does-not-exist-rtd y4c34@&i/o-file-does-not-exist-rtd) (set! y4d6e@y4c32@i/o-file-does-not-exist-error? y4c32@i/o-file-does-not-exist-error?) (set! y4d6d@y4c30@make-i/o-file-does-not-exist-error y4c30@make-i/o-file-does-not-exist-error) (set! y4d6c@y4c2e@p? y4c2e@p?) (set! y4d6b@y4c2b@y4c23 y4c2b@y4c23) (set! y4d6a@y4c29@y4c24 y4c29@y4c24) (set! y4d69@y4c27@y4c22 y4c27@y4c22) (set! y4d68@y4c21@&i/o-file-already-exists-rcd y4c21@&i/o-file-already-exists-rcd) (set! y4d67@y4c1f@&i/o-file-already-exists-rtd y4c1f@&i/o-file-already-exists-rtd) (set! y4d66@y4c1d@i/o-file-already-exists-error? y4c1d@i/o-file-already-exists-error?) (set! y4d65@y4c1b@make-i/o-file-already-exists-error y4c1b@make-i/o-file-already-exists-error) (set! y4d64@y4c19@p? y4c19@p?) (set! y4d63@y4c16@y4c0e y4c16@y4c0e) (set! y4d62@y4c14@y4c0f y4c14@y4c0f) (set! y4d61@y4c12@y4c0d y4c12@y4c0d) (set! y4d60@y4c0c@&i/o-file-is-read-only-rcd y4c0c@&i/o-file-is-read-only-rcd) (set! y4d5f@y4c0a@&i/o-file-is-read-only-rtd y4c0a@&i/o-file-is-read-only-rtd) (set! y4d5e@y4c08@i/o-file-is-read-only-error? y4c08@i/o-file-is-read-only-error?) (set! y4d5d@y4c06@make-i/o-file-is-read-only-error y4c06@make-i/o-file-is-read-only-error) (set! y4d5c@y4c04@p? y4c04@p?) (set! y4d5b@y4c01@y4bf9 y4c01@y4bf9) (set! y4d5a@y4bff@y4bfa y4bff@y4bfa) (set! y4d59@y4bfd@y4bf8 y4bfd@y4bf8) (set! y4d58@y4bf7@&i/o-file-protection-rcd y4bf7@&i/o-file-protection-rcd) (set! y4d57@y4bf5@&i/o-file-protection-rtd y4bf5@&i/o-file-protection-rtd) (set! y4d56@y4bf3@i/o-file-protection-error? y4bf3@i/o-file-protection-error?) (set! y4d55@y4bf1@make-i/o-file-protection-error y4bf1@make-i/o-file-protection-error) (set! y4d54@y4bef@p? y4bef@p?) (set! y4d53@y4bec@y4be4 y4bec@y4be4) (set! y4d52@y4bea@y4be5 y4bea@y4be5) (set! y4d51@y4be8@y4be3 y4be8@y4be3) (set! y4d50@y4be2@&i/o-filename-rcd y4be2@&i/o-filename-rcd) (set! y4d4f@y4be0@&i/o-filename-rtd y4be0@&i/o-filename-rtd) (set! y4d4e@y4bde@i/o-error-filename y4bde@i/o-error-filename) (set! y4d4d@y4bdc@i/o-filename-error? y4bdc@i/o-filename-error?) (set! y4d4c@y4bda@y4bc9 y4bda@y4bc9) (set! y4d4b@y4bd8@make-i/o-filename-error y4bd8@make-i/o-filename-error) (set! y4d4a@y4bd6@p? y4bd6@p?) (set! y4d49@y4bd3@y4bcb y4bd3@y4bcb) (set! y4d48@y4bd1@y4bcc y4bd1@y4bcc) (set! y4d47@y4bcf@y4bca y4bcf@y4bca) (set! y4d46@y4bc7@&i/o-invalid-position-rcd y4bc7@&i/o-invalid-position-rcd) (set! y4d45@y4bc5@&i/o-invalid-position-rtd y4bc5@&i/o-invalid-position-rtd) (set! y4d44@y4bc3@i/o-error-position y4bc3@i/o-error-position) (set! y4d43@y4bc1@i/o-invalid-position-error? y4bc1@i/o-invalid-position-error?) (set! y4d42@y4bbf@y4bae y4bbf@y4bae) (set! y4d41@y4bbd@make-i/o-invalid-position-error y4bbd@make-i/o-invalid-position-error) (set! y4d40@y4bbb@p? y4bbb@p?) (set! y4d3f@y4bb8@y4bb0 y4bb8@y4bb0) (set! y4d3e@y4bb6@y4bb1 y4bb6@y4bb1) (set! y4d3d@y4bb4@y4baf y4bb4@y4baf) (set! y4d3c@y4bac@&i/o-write-rcd y4bac@&i/o-write-rcd) (set! y4d3b@y4baa@&i/o-write-rtd y4baa@&i/o-write-rtd) (set! y4d3a@y4ba8@i/o-write-error? y4ba8@i/o-write-error?) (set! y4d39@y4ba6@make-i/o-write-error y4ba6@make-i/o-write-error) (set! y4d38@y4ba4@p? y4ba4@p?) (set! y4d37@y4ba1@y4b99 y4ba1@y4b99) (set! y4d36@y4b9f@y4b9a y4b9f@y4b9a) (set! y4d35@y4b9d@y4b98 y4b9d@y4b98) (set! y4d34@y4b97@&i/o-read-rcd y4b97@&i/o-read-rcd) (set! y4d33@y4b95@&i/o-read-rtd y4b95@&i/o-read-rtd) (set! y4d32@y4b93@i/o-read-error? y4b93@i/o-read-error?) (set! y4d31@y4b91@make-i/o-read-error y4b91@make-i/o-read-error) (set! y4d30@y4b8f@p? y4b8f@p?) (set! y4d2f@y4b8c@y4b84 y4b8c@y4b84) (set! y4d2e@y4b8a@y4b85 y4b8a@y4b85) (set! y4d2d@y4b88@y4b83 y4b88@y4b83) (set! y4d2c@y4b82@&i/o-rcd y4b82@&i/o-rcd) (set! y4d2b@y4b80@&i/o-rtd y4b80@&i/o-rtd) (set! y4d2a@y4b7e@i/o-error? y4b7e@i/o-error?) (set! y4d29@y4b7c@make-i/o-error y4b7c@make-i/o-error) (set! y4d28@y4b7a@p? y4b7a@p?) (set! y4d27@y4b77@y4b6f y4b77@y4b6f) (set! y4d26@y4b75@y4b70 y4b75@y4b70) (set! y4d25@y4b73@y4b6e y4b73@y4b6e) (set! y4d24@y4b6d@&undefined-rcd y4b6d@&undefined-rcd) (set! y4d23@y4b6b@&undefined-rtd y4b6b@&undefined-rtd) (set! y4d22@y4b69@undefined-violation? y4b69@undefined-violation?) (set! y4d21@y4b67@make-undefined-violation y4b67@make-undefined-violation) (set! y4d20@y4b65@p? y4b65@p?) (set! y4d1f@y4b62@y4b5a y4b62@y4b5a) (set! y4d1e@y4b60@y4b5b y4b60@y4b5b) (set! y4d1d@y4b5e@y4b59 y4b5e@y4b59) (set! y4d1c@y4b58@&syntax-rcd y4b58@&syntax-rcd) (set! y4d1b@y4b56@&syntax-rtd y4b56@&syntax-rtd) (set! y4d1a@y4b54@syntax-violation-subform y4b54@syntax-violation-subform) (set! y4d19@y4b52@syntax-violation-form y4b52@syntax-violation-form) (set! y4d18@y4b50@syntax-violation? y4b50@syntax-violation?) (set! y4d17@y4b4e@y4b3b y4b4e@y4b3b) (set! y4d16@y4b4c@y4b39 y4b4c@y4b39) (set! y4d15@y4b4a@make-syntax-violation y4b4a@make-syntax-violation) (set! y4d14@y4b48@p? y4b48@p?) (set! y4d13@y4b45@y4b3d y4b45@y4b3d) (set! y4d12@y4b43@y4b3e y4b43@y4b3e) (set! y4d11@y4b41@y4b3c y4b41@y4b3c) (set! y4d10@y4b37@&lexical-rcd y4b37@&lexical-rcd) (set! y4d0f@y4b35@&lexical-rtd y4b35@&lexical-rtd) (set! y4d0e@y4b33@lexical-violation? y4b33@lexical-violation?) (set! y4d0d@y4b31@make-lexical-violation y4b31@make-lexical-violation) (set! y4d0c@y4b2f@p? y4b2f@p?) (set! y4d0b@y4b2c@y4b24 y4b2c@y4b24) (set! y4d0a@y4b2a@y4b25 y4b2a@y4b25) (set! y4d09@y4b28@y4b23 y4b28@y4b23) (set! y4d08@y4b22@&implementation-restriction-rcd y4b22@&implementation-restriction-rcd) (set! y4d07@y4b20@&implementation-restriction-rtd y4b20@&implementation-restriction-rtd) (set! y4d06@y4b1e@implementation-restriction-violation? y4b1e@implementation-restriction-violation?) (set! y4d05@y4b1c@make-implementation-restriction-violation y4b1c@make-implementation-restriction-violation) (set! y4d04@y4b1a@p? y4b1a@p?) (set! y4d03@y4b17@y4b0f y4b17@y4b0f) (set! y4d02@y4b15@y4b10 y4b15@y4b10) (set! y4d01@y4b13@y4b0e y4b13@y4b0e) (set! y4d00@y4b0d@&non-continuable-rcd y4b0d@&non-continuable-rcd) (set! y4cff@y4b0b@&non-continuable-rtd y4b0b@&non-continuable-rtd) (set! y4cfe@y4b09@non-continuable-violation? y4b09@non-continuable-violation?) (set! y4cfd@y4b07@make-non-continuable-violation y4b07@make-non-continuable-violation) (set! y4cfc@y4b05@p? y4b05@p?) (set! y4cfb@y4b02@y4afa y4b02@y4afa) (set! y4cfa@y4b00@y4afb y4b00@y4afb) (set! y4cf9@y4afe@y4af9 y4afe@y4af9) (set! y4cf8@y4af8@&who-rcd y4af8@&who-rcd) (set! y4cf7@y4af6@&who-rtd y4af6@&who-rtd) (set! y4cf6@y4af4@condition-who y4af4@condition-who) (set! y4cf5@y4af2@who-condition? y4af2@who-condition?) (set! y4cf4@y4af0@y4adf y4af0@y4adf) (set! y4cf3@y4aee@make-who-condition y4aee@make-who-condition) (set! y4cf2@y4aec@p? y4aec@p?) (set! y4cf1@y4ae9@y4ae1 y4ae9@y4ae1) (set! y4cf0@y4ae7@y4ae2 y4ae7@y4ae2) (set! y4cef@y4ae5@y4ae0 y4ae5@y4ae0) (set! y4cee@y4add@&irritants-rcd y4add@&irritants-rcd) (set! y4ced@y4adb@&irritants-rtd y4adb@&irritants-rtd) (set! y4cec@y4ad9@condition-irritants y4ad9@condition-irritants) (set! y4ceb@y4ad7@irritants-condition? y4ad7@irritants-condition?) (set! y4cea@y4ad5@y4ac4 y4ad5@y4ac4) (set! y4ce9@y4ad3@make-irritants-condition y4ad3@make-irritants-condition) (set! y4ce8@y4ad1@p? y4ad1@p?) (set! y4ce7@y4ace@y4ac6 y4ace@y4ac6) (set! y4ce6@y4acc@y4ac7 y4acc@y4ac7) (set! y4ce5@y4aca@y4ac5 y4aca@y4ac5) (set! y4ce4@y4ac2@&assertion-rcd y4ac2@&assertion-rcd) (set! y4ce3@y4ac0@&assertion-rtd y4ac0@&assertion-rtd) (set! y4ce2@y4abe@assertion-violation? y4abe@assertion-violation?) (set! y4ce1@y4abc@make-assertion-violation y4abc@make-assertion-violation) (set! y4ce0@y4aba@p? y4aba@p?) (set! y4cdf@y4ab7@y4aaf y4ab7@y4aaf) (set! y4cde@y4ab5@y4ab0 y4ab5@y4ab0) (set! y4cdd@y4ab3@y4aae y4ab3@y4aae) (set! y4cdc@y4aad@&violation-rcd y4aad@&violation-rcd) (set! y4cdb@y4aab@&violation-rtd y4aab@&violation-rtd) (set! y4cda@y4aa9@violation? y4aa9@violation?) (set! y4cd9@y4aa7@make-violation y4aa7@make-violation) (set! y4cd8@y4aa5@p? y4aa5@p?) (set! y4cd7@y4aa2@y4a9a y4aa2@y4a9a) (set! y4cd6@y4aa0@y4a9b y4aa0@y4a9b) (set! y4cd5@y4a9e@y4a99 y4a9e@y4a99) (set! y4cd4@y4a98@&error-rcd y4a98@&error-rcd) (set! y4cd3@y4a96@&error-rtd y4a96@&error-rtd) (set! y4cd2@y4a94@error? y4a94@error?) (set! y4cd1@y4a92@make-error y4a92@make-error) (set! y4cd0@y4a90@p? y4a90@p?) (set! y4ccf@y4a8d@y4a85 y4a8d@y4a85) (set! y4cce@y4a8b@y4a86 y4a8b@y4a86) (set! y4ccd@y4a89@y4a84 y4a89@y4a84) (set! y4ccc@y4a83@&serious-rcd y4a83@&serious-rcd) (set! y4ccb@y4a81@&serious-rtd y4a81@&serious-rtd) (set! y4cca@y4a7f@serious-condition? y4a7f@serious-condition?) (set! y4cc9@y4a7d@make-serious-condition y4a7d@make-serious-condition) (set! y4cc8@y4a7b@p? y4a7b@p?) (set! y4cc7@y4a78@y4a70 y4a78@y4a70) (set! y4cc6@y4a76@y4a71 y4a76@y4a71) (set! y4cc5@y4a74@y4a6f y4a74@y4a6f) (set! y4cc4@y4a6e@&warning-rcd y4a6e@&warning-rcd) (set! y4cc3@y4a6c@&warning-rtd y4a6c@&warning-rtd) (set! y4cc2@y4a6a@warning? y4a6a@warning?) (set! y4cc1@y4a68@make-warning y4a68@make-warning) (set! y4cc0@y4a66@p? y4a66@p?) (set! y4cbf@y4a63@y4a5b y4a63@y4a5b) (set! y4cbe@y4a61@y4a5c y4a61@y4a5c) (set! y4cbd@y4a5f@y4a5a y4a5f@y4a5a) (set! y4cbc@y4a59@&message-rcd y4a59@&message-rcd) (set! y4cbb@y4a57@&message-rtd y4a57@&message-rtd) (set! y4cba@y4a55@condition-message y4a55@condition-message) (set! y4cb9@y4a53@message-condition? y4a53@message-condition?) (set! y4cb8@y4a51@y4a40 y4a51@y4a40) (set! y4cb7@y4a4f@make-message-condition y4a4f@make-message-condition) (set! y4cb6@y4a4d@p? y4a4d@p?) (set! y4cb5@y4a4a@y4a42 y4a4a@y4a42) (set! y4cb4@y4a48@y4a43 y4a48@y4a43) (set! y4cb3@y4a46@y4a41 y4a46@y4a41) (set! y4cb2@y49fa@&condition-rcd y49fa@&condition-rcd) (set! y4cb1@y49f8@&condition-rtd y49f8@&condition-rtd) (set! y4cb0@y49f6@make-&condition y49f6@make-&condition) (set! y4caf@y49f4@&condition? y49f4@&condition?) (set! y4cae@y49f1@y49e9 y49f1@y49e9) (set! y4cad@y49ef@y49ea y49ef@y49ea) (set! y4cac@y49ed@y49e8 y49ed@y49e8)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (y28eb@y28a0@current-primitive-locations (lambda (y520e@x) ((lambda (y5210@t) (if y5210@t (cdr y5210@t) '#f)) (assq y520e@x '((&no-nans-rcd . y4d9c@y4cab@&no-nans-rcd) (&no-nans-rtd . y4d9b@y4ca9@&no-nans-rtd) (&no-infinities-rcd . y4d94@y4c96@&no-infinities-rcd) (&no-infinities-rtd . y4d93@y4c94@&no-infinities-rtd) (&i/o-encoding-rcd . y4d8c@y4c81@&i/o-encoding-rcd) (&i/o-encoding-rtd . y4d8b@y4c7f@&i/o-encoding-rtd) (&i/o-decoding-rcd . y4d82@y4c66@&i/o-decoding-rcd) (&i/o-decoding-rtd . y4d81@y4c64@&i/o-decoding-rtd) (&i/o-port-rcd . y4d7a@y4c51@&i/o-port-rcd) (&i/o-port-rtd . y4d79@y4c4f@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . y4d70@y4c36@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . y4d6f@y4c34@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . y4d68@y4c21@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . y4d67@y4c1f@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . y4d60@y4c0c@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . y4d5f@y4c0a@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . y4d58@y4bf7@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . y4d57@y4bf5@&i/o-file-protection-rtd) (&i/o-filename-rcd . y4d50@y4be2@&i/o-filename-rcd) (&i/o-filename-rtd . y4d4f@y4be0@&i/o-filename-rtd) (&i/o-invalid-position-rcd . y4d46@y4bc7@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . y4d45@y4bc5@&i/o-invalid-position-rtd) (&i/o-write-rcd . y4d3c@y4bac@&i/o-write-rcd) (&i/o-write-rtd . y4d3b@y4baa@&i/o-write-rtd) (&i/o-read-rcd . y4d34@y4b97@&i/o-read-rcd) (&i/o-read-rtd . y4d33@y4b95@&i/o-read-rtd) (&i/o-rcd . y4d2c@y4b82@&i/o-rcd) (&i/o-rtd . y4d2b@y4b80@&i/o-rtd) (&undefined-rcd . y4d24@y4b6d@&undefined-rcd) (&undefined-rtd . y4d23@y4b6b@&undefined-rtd) (&syntax-rcd . y4d1c@y4b58@&syntax-rcd) (&syntax-rtd . y4d1b@y4b56@&syntax-rtd) (&lexical-rcd . y4d10@y4b37@&lexical-rcd) (&lexical-rtd . y4d0f@y4b35@&lexical-rtd) (&implementation-restriction-rcd . y4d08@y4b22@&implementation-restriction-rcd) (&implementation-restriction-rtd . y4d07@y4b20@&implementation-restriction-rtd) (&non-continuable-rcd . y4d00@y4b0d@&non-continuable-rcd) (&non-continuable-rtd . y4cff@y4b0b@&non-continuable-rtd) (&who-rcd . y4cf8@y4af8@&who-rcd) (&who-rtd . y4cf7@y4af6@&who-rtd) (&irritants-rcd . y4cee@y4add@&irritants-rcd) (&irritants-rtd . y4ced@y4adb@&irritants-rtd) (&assertion-rcd . y4ce4@y4ac2@&assertion-rcd) (&assertion-rtd . y4ce3@y4ac0@&assertion-rtd) (&violation-rcd . y4cdc@y4aad@&violation-rcd) (&violation-rtd . y4cdb@y4aab@&violation-rtd) (&error-rcd . y4cd4@y4a98@&error-rcd) (&error-rtd . y4cd3@y4a96@&error-rtd) (&serious-rcd . y4ccc@y4a83@&serious-rcd) (&serious-rtd . y4ccb@y4a81@&serious-rtd) (&warning-rcd . y4cc4@y4a6e@&warning-rcd) (&warning-rtd . y4cc3@y4a6c@&warning-rtd) (&message-rcd . y4cbc@y4a59@&message-rcd) (&message-rtd . y4cbb@y4a57@&message-rtd) (&condition-rcd . y4cb2@y49fa@&condition-rcd) (&condition-rtd . y4cb1@y49f8@&condition-rtd) (syntax-error . y49da@y2fe0@syntax-error) (syntax-dispatch . y496f@y2efb@syntax-dispatch) (load . y4ecd@y4db8@load) (interaction-environment . y49e2@y2ff0@interaction-environment) (library-path . y2b02@y2991@library-path) (make-parameter . y289a@y27c4@make-parameter) (make-variable-transformer . y492d@y2d28@make-variable-transformer) (identifier? . y49dd@y2fe6@identifier?) (generate-temporaries . y49d3@y2fd2@generate-temporaries) (free-identifier=? . y49d4@y2fd4@free-identifier=?) (syntax->datum . y49df@y2fea@syntax->datum) (datum->syntax . y49de@y2fe8@datum->syntax) (bound-identifier=? . y49d5@y2fd6@bound-identifier=?) (make-i/o-write-error . y4d39@y4ba6@make-i/o-write-error) (make-i/o-read-error . y4d31@y4b91@make-i/o-read-error) (make-i/o-port-error . y4d75@y4c47@make-i/o-port-error) (make-i/o-invalid-position-error . y4d41@y4bbd@make-i/o-invalid-position-error) (make-i/o-filename-error . y4d4b@y4bd8@make-i/o-filename-error) (make-i/o-file-protection-error . y4d55@y4bf1@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . y4d5d@y4c06@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . y4d6d@y4c30@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . y4d65@y4c1b@make-i/o-file-already-exists-error) (make-i/o-error . y4d29@y4b7c@make-i/o-error) (make-i/o-encoding-error . y4d87@y4c77@make-i/o-encoding-error) (make-i/o-decoding-error . y4d7f@y4c60@make-i/o-decoding-error) (i/o-write-error? . y4d3a@y4ba8@i/o-write-error?) (i/o-read-error? . y4d32@y4b93@i/o-read-error?) (i/o-port-error? . y4d77@y4c4b@i/o-port-error?) (i/o-invalid-position-error? . y4d43@y4bc1@i/o-invalid-position-error?) (i/o-filename-error? . y4d4d@y4bdc@i/o-filename-error?) (i/o-file-protection-error? . y4d56@y4bf3@i/o-file-protection-error?) (i/o-file-is-read-only-error? . y4d5e@y4c08@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . y4d6e@y4c32@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . y4d66@y4c1d@i/o-file-already-exists-error?) (i/o-error? . y4d2a@y4b7e@i/o-error?) (i/o-error-position . y4d44@y4bc3@i/o-error-position) (i/o-error-port . y4d78@y4c4d@i/o-error-port) (i/o-error-filename . y4d4e@y4bde@i/o-error-filename) (i/o-encoding-error? . y4d89@y4c7b@i/o-encoding-error?) (i/o-encoding-error-char . y4d8a@y4c7d@i/o-encoding-error-char) (i/o-decoding-error? . y4d80@y4c62@i/o-decoding-error?) (scheme-report-environment . y49ca@y2fc0@scheme-report-environment) (null-environment . y49c9@y2fbe@null-environment) (command-line . y4eca@y4db2@command-line) (eval . y49cc@y2fc4@eval) (environment . y49c8@y2fbc@environment) (who-condition? . y4cf5@y4af2@who-condition?) (warning? . y4cc2@y4a6a@warning?) (violation? . y4cda@y4aa9@violation?) (undefined-violation? . y4d22@y4b69@undefined-violation?) (syntax-violation? . y4d18@y4b50@syntax-violation?) (syntax-violation-subform . y4d1a@y4b54@syntax-violation-subform) (syntax-violation-form . y4d19@y4b52@syntax-violation-form) (syntax-violation . y49dc@y2fe4@syntax-violation) (serious-condition? . y4cca@y4a7f@serious-condition?) (non-continuable-violation? . y4cfe@y4b09@non-continuable-violation?) (message-condition? . y4cb9@y4a53@message-condition?) (make-who-condition . y4cf3@y4aee@make-who-condition) (make-warning . y4cc1@y4a68@make-warning) (make-violation . y4cd9@y4aa7@make-violation) (make-undefined-violation . y4d21@y4b67@make-undefined-violation) (make-syntax-violation . y4d15@y4b4a@make-syntax-violation) (make-serious-condition . y4cc9@y4a7d@make-serious-condition) (make-non-continuable-violation . y4cfd@y4b07@make-non-continuable-violation) (make-message-condition . y4cb7@y4a4f@make-message-condition) (make-lexical-violation . y4d0d@y4b31@make-lexical-violation) (make-irritants-condition . y4ce9@y4ad3@make-irritants-condition) (make-implementation-restriction-violation . y4d05@y4b1c@make-implementation-restriction-violation) (make-error . y4cd1@y4a92@make-error) (make-assertion-violation . y4ce1@y4abc@make-assertion-violation) (lexical-violation? . y4d0e@y4b33@lexical-violation?) (irritants-condition? . y4ceb@y4ad7@irritants-condition?) (implementation-restriction-violation? . y4d06@y4b1e@implementation-restriction-violation?) (error? . y4cd2@y4a94@error?) (condition-who . y4cf6@y4af4@condition-who) (condition-message . y4cba@y4a55@condition-message) (condition-irritants . y4cec@y4ad9@condition-irritants) (assertion-violation? . y4ce2@y4abe@assertion-violation?) (no-nans-violation? . y4d9a@y4ca7@no-nans-violation?) (no-infinities-violation? . y4d92@y4c92@no-infinities-violation?) (make-no-nans-violation . y4d99@y4ca5@make-no-nans-violation) (make-no-infinities-violation . y4d91@y4c90@make-no-infinities-violation) (assertion-error . y49d9@y2fde@assertion-error)))))) (y2b12@y29b1@install-library 'y51eb '(mosh interaction) '() '() '() '() '((regexp? . y51e3) (alist->eq-hash-table . y51e0) (format . y51dd) (string-split . y51d2) (call-process . y51cc) (set-current-directory! . y51c8) (expand-path . y51c7) (current-directory . y51c6) (%spawn . y51c5) (%waitpid . y51c4) (pointer-ref-c-int64 . y51c3) (pointer-ref-c-int32 . y51c2) (pointer-ref-c-int16 . y51c1) (pointer-ref-c-int8 . y51c0) (pointer-ref-c-uint64 . y51bf) (pointer-ref-c-uint32 . y51be) (pointer-ref-c-uint16 . y51bd) (pointer-ref-c-uint8 . y51bc) (pointer-set-c-int64! . y51bb) (pointer-set-c-int32! . y51ba) (pointer-set-c-int16! . y51b9) (pointer-set-c-int8! . y51b8) (pointer-set-c-pointer! . y51b7) (pointer-set-c-double! . y51b6) (pointer-set-c-float! . y51b5) (pointer-set-c-long-long! . y51b4) (pointer-set-c-long! . y51b3) (pointer-set-c-int! . y51b2) (pointer-set-c-short! . y51b1) (pointer-set-c-char! . y51b0) (pointer-ref-c-pointer . y51af) (pointer-ref-c-double . y51ae) (pointer-ref-c-float . y51ad) (pointer-ref-c-unsigned-long-long . y51ac) (pointer-ref-c-signed-long-long . y51ab) (pointer-ref-c-unsigned-long . y51aa) (pointer-ref-c-signed-long . y51a9) (pointer-ref-c-unsigned-int . y51a8) (pointer-ref-c-signed-int . y51a7) (pointer-ref-c-unsigned-short . y51a6) (pointer-ref-c-signed-short . y51a5) (pointer-ref-c-unsigned-char . y51a4) (pointer-ref-c-signed-char . y51a3) (pointer->integer . y51a2) (integer->pointer . y51a1) (pointer? . y51a0) (shared-errno . y519f) (%ffi-supported? . y519e) (%ffi-pointer->string . y519d) (%ffi-call->string-or-zero . y519c) (%ffi-call->double . y519b) (%ffi-call->void* . y519a) (%ffi-call->void . y5199) (%ffi-call->int . y5198) (%ffi-lookup . y5197) (%ffi-open . y5196) (%fork . y5195) (%pipe . y5194) (p . y5193) (whereis . y517d) (register . y517c) (vm-join! . y517b) (vm-set-value! . y517a) (vm? . y5179) (main-vm? . y5178) (vm-eval . y5177) (vm-self . y5176) (vm-start! . y5175) (make-vm . y5174) (mutex-try-lock! . y5173) (mutex-unlock! . y5172) (mutex-lock! . y5171) (mutex? . y5170) (make-mutex . y516f) (condition-variable-notify-all! . y516e) (condition-variable-notify! . y516d) (condition-variable-wait! . y516c) (make-condition-variable . y516b) (string-upcase . y5154) (string-titlecase . y5153) (string-normalize-nfkd . y5152) (string-normalize-nfkc . y5151) (string-normalize-nfd . y5150) (string-normalize-nfc . y514f) (string-foldcase . y514e) (string-downcase . y514d) (string-ci>? . y514c) (string-ci>=? . y514b) (string-ci=? . y514a) (string-ci<? . y5149) (string-ci<=? . y5148) (char-whitespace? . y5147) (char-upper-case? . y5146) (char-title-case? . y5145) (char-numeric? . y5144) (char-lower-case? . y5143) (char-general-category . y5142) (char-upcase . y5141) (char-titlecase . y5140) (char-foldcase . y513f) (char-downcase . y513e) (char-ci>? . y513d) (char-ci>=? . y513c) (char-ci=? . y513b) (char-ci<? . y513a) (char-ci<=? . y5139) (char-alphabetic? . y5138) (make-variable-transformer . y2d27) (identifier? . y2fe5) (generate-temporaries . y2fd1) (free-identifier=? . y2fd3) (syntax->datum . y2fe9) (datum->syntax . y2fe7) (bound-identifier=? . y2fd5) (record-type-descriptor? . y5137) (record-predicate . y5136) (record-mutator . y5135) (record-constructor . y5134) (record-accessor . y5133) (make-record-type-descriptor . y5132) (make-record-constructor-descriptor . y5131) (record? . y5130) (record-type-uid . y512f) (record-type-sealed? . y512e) (record-type-parent . y512d) (record-type-opaque? . y512c) (record-type-name . y512b) (record-type-generative? . y512a) (record-type-field-names . y5129) (record-rtd . y5128) (record-field-mutable? . y5127) (delete-file . y5126) (file-exists? . y5125) (vector-sort! . y5124) (vector-sort . y5123) (list-sort . y5122) (symbol-hash . y5121) (string-ci-hash . y5120) (string-hash . y511f) (equal-hash . y511e) (hashtable-equivalence-function . y511d) (make-hashtable . y511c) (hashtable-hash-function . y511b) (make-eqv-hashtable . y511a) (make-eq-hashtable . y5119) (hashtable? . y5118) (hashtable-update! . y5117) (hashtable-size . y5116) (hashtable-set! . y5115) (hashtable-ref . y5114) (hashtable-mutable? . y5113) (hashtable-keys . y5112) (hashtable-entries . y5111) (hashtable-delete! . y5110) (hashtable-copy . y510f) (hashtable-contains? . y510e) (hashtable-clear! . y510d) (call-with-output-file . y510c) (call-with-input-file . y510b) (write-char . y510a) (write . y5109) (with-output-to-file . y5108) (with-input-from-file . y5107) (read-char . y5106) (read . y5105) (peek-char . y5104) (open-output-file . y5103) (open-input-file . y5102) (newline . y5101) (display . y5100) (close-output-port . y50ff) (close-input-port . y50fe) (eof-object? . y50fd) (eof-object . y50fc) (current-error-port . y50fb) (current-output-port . y50fa) (current-input-port . y50f9) (output-port? . y50f8) (input-port? . y50f7) (utf-8-codec . y50f6) (utf-16-codec . y50f5) (transcoder-error-handling-mode . y50f4) (transcoder-eol-style . y50f3) (transcoder-codec . y50f2) (transcoded-port . y50f1) (textual-port? . y50f0) (string->bytevector . y50ef) (standard-output-port . y50ee) (standard-input-port . y50ed) (standard-error-port . y50ec) (set-port-position! . y50eb) (put-u8 . y50ea) (put-string . y50e9) (put-datum . y50e8) (put-char . y50e7) (put-bytevector . y50e6) (port? . y50e5) (port-transcoder . y50e4) (port-position . y50e3) (port-has-set-port-position!? . y50e2) (port-has-port-position? . y50e1) (port-eof? . y50e0) (output-port-buffer-mode . y50df) (open-string-output-port . y50de) (open-string-input-port . y50dd) (open-file-output-port . y50dc) (open-file-input/output-port . y50db) (open-file-input-port . y50da) (open-bytevector-output-port . y50d9) (open-bytevector-input-port . y50d8) (native-transcoder . y50d7) (native-eol-style . y50d6) (make-transcoder . y50d5) (latin-1-codec . y50d4) (make-i/o-write-error . y4ba5) (make-i/o-read-error . y4b90) (make-i/o-port-error . y4c46) (make-i/o-invalid-position-error . y4bbc) (make-i/o-filename-error . y4bd7) (make-i/o-file-protection-error . y4bf0) (make-i/o-file-is-read-only-error . y4c05) (make-i/o-file-does-not-exist-error . y4c2f) (make-i/o-file-already-exists-error . y4c1a) (make-i/o-error . y4b7b) (make-i/o-encoding-error . y4c76) (make-i/o-decoding-error . y4c5f) (make-custom-textual-output-port . y50d3) (make-custom-textual-input/output-port . y50d2) (make-custom-textual-input-port . y50d1) (make-custom-binary-output-port . y50d0) (make-custom-binary-input/output-port . y50cf) (make-custom-binary-input-port . y50ce) (make-bytevector . y50cd) (lookahead-u8 . y50cc) (lookahead-char . y50cb) (i/o-write-error? . y4ba7) (i/o-read-error? . y4b92) (i/o-port-error? . y4c4a) (i/o-invalid-position-error? . y4bc0) (i/o-filename-error? . y4bdb) (i/o-file-protection-error? . y4bf2) (i/o-file-is-read-only-error? . y4c07) (i/o-file-does-not-exist-error? . y4c31) (i/o-file-already-exists-error? . y4c1c) (i/o-error? . y4b7d) (i/o-error-position . y4bc2) (i/o-error-port . y4c4c) (i/o-error-filename . y4bdd) (i/o-encoding-error? . y4c7a) (i/o-encoding-error-char . y4c7c) (i/o-decoding-error? . y4c61) (get-u8 . y50ca) (get-string-n! . y50c9) (get-string-n . y50c8) (get-string-all . y50c7) (get-line . y50c6) (get-datum . y50c5) (get-char . y50c4) (get-bytevector-some . y50c3) (get-bytevector-n! . y50c2) (get-bytevector-n . y50c1) (get-bytevector-all . y50c0) (flush-output-port . y50bf) (close-port . y50be) (exit . y50b6) (command-line . y4db1) (string-fill! . y50b5) (string-set! . y50b4) (set-cdr! . y50b3) (set-car! . y50b2) (remove . y50b1) (remv . y50b0) (remp . y50af) (remq . y50ae) (partition . y50ad) (memv . y50ac) (memq . y50ab) (memp . y50aa) (member . y50a9) (exists . y50a8) (for-all . y50a7) (fold-right . y50a6) (fold-left . y50a5) (find . y50a4) (filter . y50a3) (cons* . y50a2) (assv . y50a1) (assq . y50a0) (assp . y509f) (assoc . y509e) (call-with-string-output-port . y509d) (call-with-port . y509c) (call-with-bytevector-output-port . y509b) (bytevector->string . y509a) (buffer-mode? . y5099) (binary-port? . y5098) (with-exception-handler . y5097) (raise-continuable . y5096) (raise . y5095) (eval . y2fc3) (environment . y2fbb) (make-enumeration . y5094) (enum-set=? . y5093) (enum-set-universe . y5092) (enum-set-union . y5091) (enum-set-subset? . y5090) (enum-set-projection . y508f) (enum-set-member? . y508e) (enum-set-intersection . y508d) (enum-set-indexer . y508c) (enum-set-difference . y508b) (enum-set-constructor . y508a) (enum-set-complement . y5089) (enum-set->list . y5088) (who-condition? . y4af1) (warning? . y4a69) (violation? . y4aa8) (undefined-violation? . y4b68) (syntax-violation? . y4b4f) (syntax-violation-subform . y4b53) (syntax-violation-form . y4b51) (syntax-violation . y2fe3) (simple-conditions . y5087) (serious-condition? . y4a7e) (non-continuable-violation? . y4b08) (message-condition? . y4a52) (make-who-condition . y4aed) (make-warning . y4a67) (make-violation . y4aa6) (make-undefined-violation . y4b66) (make-syntax-violation . y4b49) (make-serious-condition . y4a7c) (make-non-continuable-violation . y4b06) (make-message-condition . y4a4e) (make-lexical-violation . y4b30) (make-irritants-condition . y4ad2) (make-implementation-restriction-violation . y4b1b) (make-error . y4a91) (make-assertion-violation . y4abb) (lexical-violation? . y4b32) (irritants-condition? . y4ad6) (implementation-restriction-violation? . y4b1d) (error? . y4a93) (condition-who . y4af3) (condition-predicate . y5086) (condition-message . y4a54) (condition-irritants . y4ad8) (condition-accessor . y5085) (condition . y5084) (assertion-violation? . y4abd) (condition? . y5083) (utf32->string . y5082) (utf16->string . y5081) (utf8->string . y5080) (uint-list->bytevector . y507f) (u8-list->bytevector . y507e) (string->utf8 . y507d) (string->utf32 . y507c) (string->utf16 . y507b) (sint-list->bytevector . y507a) (native-endianness . y5079) (bytevector? . y5078) (bytevector=? . y5077) (bytevector-uint-set! . y5076) (bytevector-uint-ref . y5075) (bytevector-u8-set! . y5074) (bytevector-u8-ref . y5073) (bytevector-u64-set! . y5072) (bytevector-u64-ref . y5071) (bytevector-u64-native-set! . y5070) (bytevector-u64-native-ref . y506f) (bytevector-u32-set! . y506e) (bytevector-u32-ref . y506d) (bytevector-u32-native-set! . y506c) (bytevector-u32-native-ref . y506b) (bytevector-u16-set! . y506a) (bytevector-u16-ref . y5069) (bytevector-u16-native-set! . y5068) (bytevector-u16-native-ref . y5067) (bytevector-sint-set! . y5066) (bytevector-sint-ref . y5065) (bytevector-s8-set! . y5064) (bytevector-s8-ref . y5063) (bytevector-s64-set! . y5062) (bytevector-s64-ref . y5061) (bytevector-s64-native-set! . y5060) (bytevector-s64-native-ref . y505f) (bytevector-s32-set! . y505e) (bytevector-s32-ref . y505d) (bytevector-s32-native-set! . y505c) (bytevector-s32-native-ref . y505b) (bytevector-s16-set! . y505a) (bytevector-s16-ref . y5059) (bytevector-s16-native-set! . y5058) (bytevector-s16-native-ref . y5057) (bytevector-length . y5056) (bytevector-ieee-single-ref . y5055) (bytevector-ieee-single-set! . y5054) (bytevector-ieee-single-native-set! . y5053) (bytevector-ieee-single-native-ref . y5052) (bytevector-ieee-double-set! . y5051) (bytevector-ieee-double-ref . y5050) (bytevector-ieee-double-native-set! . y504f) (bytevector-ieee-double-native-ref . y504e) (bytevector-fill! . y504d) (bytevector-copy! . y504c) (bytevector-copy . y504b) (bytevector->uint-list . y504a) (bytevector->u8-list . y5049) (bytevector->sint-list . y5048) (no-nans-violation? . y4ca6) (no-infinities-violation? . y4c91) (make-no-nans-violation . y4ca4) (make-no-infinities-violation . y4c8f) (real->flonum . y5047) (flzero? . y5046) (fltruncate . y5045) (fltan . y5044) (flsqrt . y5043) (flsin . y5042) (flround . y5041) (flpositive? . y5040) (flonum? . y503f) (flodd? . y503e) (flnumerator . y503d) (flnegative? . y503c) (flnan? . y503b) (flmod0 . y503a) (flmod . y5039) (flmin . y5038) (flmax . y5037) (fllog . y5036) (flinteger? . y5035) (flinfinite? . y5034) (flfloor . y5033) (flfinite? . y5032) (flexpt . y5031) (flexp . y5030) (fleven? . y502f) (fldiv0-and-mod0 . y502e) (fldiv0 . y502d) (fldiv-and-mod . y502c) (fldiv . y502b) (fldenominator . y502a) (flcos . y5029) (flceiling . y5028) (flatan . y5027) (flasin . y5026) (flacos . y5025) (flabs . y5024) (fl>? . y5023) (fl>=? . y5022) (fl=? . y5021) (fl<? . y5020) (fl<=? . y501f) (fl/ . y501e) (fl- . y501d) (fl+ . y501c) (fl* . y501b) (fixnum->flonum . y501a) (fxzero? . y5019) (fxxor . y5018) (fxrotate-bit-field . y5017) (fxreverse-bit-field . y5016) (fxpositive? . y5015) (fxodd? . y5014) (fxnot . y5013) (fxnegative? . y5012) (fxmod0 . y5011) (fxmod . y5010) (fxmin . y500f) (fxmax . y500e) (fxlength . y500d) (fxior . y500c) (fxif . y500b) (fxfirst-bit-set . y500a) (fxeven? . y5009) (fxdiv0-and-mod0 . y5008) (fxdiv0 . y5007) (fxdiv-and-mod . y5006) (fxdiv . y5005) (fxcopy-bit-field . y5004) (fxcopy-bit . y5003) (fxbit-set? . y5002) (fxbit-field . y5001) (fxbit-count . y5000) (fxarithmetic-shift-right . y4fff) (fxarithmetic-shift-left . y4ffe) (fxarithmetic-shift . y4ffd) (fxand . y4ffc) (fx>? . y4ffb) (fx>=? . y4ffa) (fx=? . y4ff9) (fx<? . y4ff8) (fx<=? . y4ff7) (fx-/carry . y4ff6) (fx- . y4ff5) (fx+/carry . y4ff4) (fx+ . y4ff3) (fx*/carry . y4ff2) (fx* . y4ff1) (greatest-fixnum . y4ff0) (least-fixnum . y4fef) (fixnum-width . y4fee) (fixnum? . y4fed) (bitwise-rotate-bit-field . y4fec) (bitwise-reverse-bit-field . y4feb) (bitwise-length . y4fea) (bitwise-if . y4fe9) (bitwise-first-bit-set . y4fe8) (bitwise-copy-bit-field . y4fe7) (bitwise-copy-bit . y4fe6) (bitwise-bit-set? . y4fe5) (bitwise-bit-field . y4fe4) (bitwise-bit-count . y4fe3) (bitwise-xor . y4fe2) (bitwise-ior . y4fe1) (bitwise-and . y4fe0) (bitwise-not . y4fdf) (bitwise-arithmetic-shift-right . y4fde) (bitwise-arithmetic-shift-left . y4fdd) (bitwise-arithmetic-shift . y4fdc) (zero? . y4fdb) (vector? . y4fda) (vector-set! . y4fd9) (vector-ref . y4fd8) (vector-map . y4fd7) (vector-length . y4fd6) (vector-for-each . y4fd5) (vector-fill! . y4fd4) (vector->list . y4fd3) (vector . y4fd2) (values . y4fd1) (truncate . y4fd0) (tan . y4fcf) (symbol? . y4fce) (symbol=? . y4fcd) (symbol->string . y4fcc) (substring . y4fcb) (string? . y4fca) (string>? . y4fc9) (string>=? . y4fc8) (string=? . y4fc7) (string<? . y4fc6) (string<=? . y4fc5) (string-ref . y4fc4) (string-length . y4fc3) (string-for-each . y4fc2) (string-copy . y4fc1) (string-append . y4fc0) (string->symbol . y4fbf) (string->number . y4fbe) (string->list . y4fbd) (string . y4fbc) (sqrt . y4fbb) (sin . y4fba) (round . y4fb9) (reverse . y4fb8) (real? . y4fb7) (real-valued? . y4fb6) (real-part . y4fb5) (rationalize . y4fb4) (rational? . y4fb3) (rational-valued? . y4fb2) (procedure? . y4fb1) (positive? . y4fb0) (pair? . y4faf) (odd? . y4fae) (numerator . y4fad) (number? . y4fac) (number->string . y4fab) (null? . y4faa) (not . y4fa9) (negative? . y4fa8) (nan? . y4fa7) (min . y4fa6) (max . y4fa5) (map . y4fa4) (make-vector . y4fa3) (make-string . y4fa2) (make-rectangular . y4fa1) (make-polar . y4fa0) (magnitude . y4f9f) (log . y4f9e) (list? . y4f9d) (list-tail . y4f9c) (list-ref . y4f9b) (list->vector . y4f9a) (list->string . y4f99) (list . y4f98) (length . y4f97) (lcm . y4f96) (integer? . y4f95) (integer-valued? . y4f94) (integer->char . y4f93) (infinite? . y4f92) (inexact? . y4f91) (inexact . y4f90) (imag-part . y4f8f) (gcd . y4f8e) (for-each . y4f8d) (floor . y4f8c) (finite? . y4f8b) (expt . y4f8a) (exp . y4f89) (exact? . y4f88) (exact-integer-sqrt . y4f87) (exact . y4f86) (even? . y4f85) (error . y4f84) (eqv? . y4f83) (equal? . y4f82) (eq? . y4f81) (dynamic-wind . y4f80) (div0-and-mod0 . y4f7f) (mod0 . y4f7e) (div0 . y4f7d) (div-and-mod . y4f7c) (mod . y4f7b) (div . y4f7a) (denominator . y4f79) (cos . y4f78) (cons . y4f77) (complex? . y4f76) (char? . y4f75) (char>? . y4f74) (char>=? . y4f73) (char=? . y4f72) (char<? . y4f71) (char<=? . y4f70) (char->integer . y4f6f) (ceiling . y4f6e) (call-with-values . y4f6d) (call/cc . y4f6c) (call-with-current-continuation . y4f6b) (cddddr . y4f6a) (cdddar . y4f69) (cddadr . y4f68) (cddaar . y4f67) (cdaddr . y4f66) (cdadar . y4f65) (cdaadr . y4f64) (cdaaar . y4f63) (cadddr . y4f62) (caddar . y4f61) (cadadr . y4f60) (cadaar . y4f5f) (caaddr . y4f5e) (caadar . y4f5d) (caaadr . y4f5c) (caaaar . y4f5b) (cdddr . y4f5a) (cddar . y4f59) (cdadr . y4f58) (cdaar . y4f57) (caddr . y4f56) (cadar . y4f55) (caadr . y4f54) (caaar . y4f53) (cddr . y4f52) (cdar . y4f51) (cadr . y4f50) (caar . y4f4f) (cdr . y4f4e) (car . y4f4d) (boolean? . y4f4c) (boolean=? . y4f4b) (atan . y4f4a) (assertion-violation . y4f49) (asin . y4f48) (apply . y4f47) (append . y4f46) (angle . y4f45) (acos . y4f44) (abs . y4f43) (/ . y4f42) (* . y4f41) (- . y4f40) (+ . y4f3f) (>= . y4f3e) (> . y4f3d) (= . y4f3c) (<= . y4f3b) (< . y4f3a) (library . y4f39) (&no-nans . y4f38) (&no-infinities . y4f37) (&i/o-encoding . y4f36) (&i/o-decoding . y4f35) (&i/o-port . y4f34) (&i/o-file-does-not-exist . y4f33) (&i/o-file-already-exists . y4f32) (&i/o-file-is-read-only . y4f31) (&i/o-file-protection . y4f30) (&i/o-filename . y4f2f) (&i/o-invalid-position . y4f2e) (&i/o-write . y4f2d) (&i/o-read . y4f2c) (&i/o . y4f2b) (&undefined . y4f2a) (&syntax . y4f29) (&lexical . y4f28) (&implementation-restriction . y4f27) (&non-continuable . y4f26) (&who . y4f25) (&irritants . y4f24) (&assertion . y4f23) (&violation . y4f22) (&error . y4f21) (&serious . y4f20) (&warning . y4f1f) (&message . y4f1e) (&condition . y4f1d) (define-condition-type . y4f1c) (define-enumeration . y4f1b) (define-record-type . y4f1a) (parent-rtd . y4f19) (nongenerative . y4f18) (opaque . y4f17) (sealed . y4f16) (protocol . y4f15) (parent . y4f14) (immutable . y4f13) (mutable . y4f12) (fields . y4f11) (error-handling-mode . y4f10) (file-options . y4f0f) (buffer-mode . y4f0e) (eol-style . y4f0d) (guard . y4f0c) (unsyntax-splicing . y4f09) (unsyntax . y4f08) (unquote-splicing . y4f07) (unquote . y4f06) (_ . y4f05) (else . y4f04) (=> . y4f03) (... . y4f02) (assert . y4f01) (endianness . y4f00) (time . y4efe) (do . y4efd) (cond . y4efc) (let* . y4efb) (let . y4efa) (let*-values . y4ef9) (let-values . y4ef8) (identifier-syntax . y4ef7) (with-syntax . y4ef6) (quasisyntax . y4ef5) (quasiquote . y4ef4) (syntax-rules . y4ef3) (include . y4ef2) (record-constructor-descriptor . y4ef0) (record-type-descriptor . y4eef) (case . y4eee) (unless . y4eec) (when . y4eeb) (or . y4eea) (and . y4ee9) (if . y4ee8) (letrec* . y4ee7) (letrec . y4ee6) (case-lambda . y4ee4) (lambda . y4ee3) (syntax . y4ee2) (syntax-case . y4ee1) (quote . y4ee0) (letrec-syntax . y4ede) (let-syntax . y4edd) (set! . y4edc) (import . y4edb) (begin . y4eda) (define-syntax . y4ed8) (define . y4ed7)) '() values values '#f '#f '#t '#f) (y2b12@y29b1@install-library 'y51ec '(psyntax null-environment-5) '() '() '() '() '((make-promise . y50b7) (unquote-splicing . y4f07) (unquote . y4f06) (_ . y4f05) (else . y4f04) (=> . y4f03) (... . y4f02) (delay . y4eff) (do . y4efd) (cond . y4efc) (let* . y4efb) (let . y4efa) (quasiquote . y4ef4) (syntax-rules . y4ef3) (case . y4eee) (or . y4eea) (and . y4ee9) (if . y4ee8) (letrec . y4ee6) (lambda . y4ee3) (quote . y4ee0) (letrec-syntax . y4ede) (let-syntax . y4edd) (set! . y4edc) (begin . y4eda) (define-syntax . y4ed8) (define . y4ed7)) '() values values '#f '#f '#t '#f) (y2b12@y29b1@install-library 'y51ed '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . y514c) (string-ci>=? . y514b) (string-ci=? . y514a) (string-ci<? . y5149) (string-ci<=? . y5148) (char-whitespace? . y5147) (char-upper-case? . y5146) (char-numeric? . y5144) (char-lower-case? . y5143) (char-upcase . y5141) (char-downcase . y513e) (char-ci>? . y513d) (char-ci>=? . y513c) (char-ci=? . y513b) (char-ci<? . y513a) (char-ci<=? . y5139) (char-alphabetic? . y5138) (call-with-output-file . y510c) (call-with-input-file . y510b) (write-char . y510a) (write . y5109) (with-output-to-file . y5108) (with-input-from-file . y5107) (read-char . y5106) (read . y5105) (peek-char . y5104) (open-output-file . y5103) (open-input-file . y5102) (newline . y5101) (display . y5100) (close-output-port . y50ff) (close-input-port . y50fe) (eof-object . y50fc) (current-output-port . y50fa) (current-input-port . y50f9) (output-port? . y50f8) (input-port? . y50f7) (scheme-report-environment . y2fbf) (quotient . y50bd) (null-environment . y2fbd) (remainder . y50bc) (modulo . y50bb) (inexact->exact . y50ba) (force . y50b9) (exact->inexact . y50b8) (make-promise . y50b7) (string-fill! . y50b5) (string-set! . y50b4) (set-cdr! . y50b3) (set-car! . y50b2) (memv . y50ac) (memq . y50ab) (member . y50a9) (assv . y50a1) (assq . y50a0) (assoc . y509e) (eval . y2fc3) (zero? . y4fdb) (vector? . y4fda) (vector-set! . y4fd9) (vector-ref . y4fd8) (vector-length . y4fd6) (vector-fill! . y4fd4) (vector->list . y4fd3) (vector . y4fd2) (values . y4fd1) (truncate . y4fd0) (tan . y4fcf) (symbol? . y4fce) (symbol->string . y4fcc) (substring . y4fcb) (string? . y4fca) (string>? . y4fc9) (string>=? . y4fc8) (string=? . y4fc7) (string<? . y4fc6) (string<=? . y4fc5) (string-ref . y4fc4) (string-length . y4fc3) (string-copy . y4fc1) (string-append . y4fc0) (string->symbol . y4fbf) (string->number . y4fbe) (string->list . y4fbd) (string . y4fbc) (sqrt . y4fbb) (sin . y4fba) (round . y4fb9) (reverse . y4fb8) (real? . y4fb7) (real-part . y4fb5) (rationalize . y4fb4) (rational? . y4fb3) (procedure? . y4fb1) (positive? . y4fb0) (pair? . y4faf) (odd? . y4fae) (numerator . y4fad) (number? . y4fac) (number->string . y4fab) (not . y4fa9) (negative? . y4fa8) (min . y4fa6) (max . y4fa5) (map . y4fa4) (make-vector . y4fa3) (make-string . y4fa2) (make-rectangular . y4fa1) (make-polar . y4fa0) (magnitude . y4f9f) (log . y4f9e) (list? . y4f9d) (list-tail . y4f9c) (list-ref . y4f9b) (list->vector . y4f9a) (list->string . y4f99) (list . y4f98) (length . y4f97) (lcm . y4f96) (integer? . y4f95) (integer->char . y4f93) (inexact? . y4f91) (imag-part . y4f8f) (gcd . y4f8e) (for-each . y4f8d) (floor . y4f8c) (expt . y4f8a) (exp . y4f89) (exact? . y4f88) (even? . y4f85) (eqv? . y4f83) (equal? . y4f82) (eq? . y4f81) (dynamic-wind . y4f80) (denominator . y4f79) (cos . y4f78) (cons . y4f77) (complex? . y4f76) (char? . y4f75) (char>? . y4f74) (char>=? . y4f73) (char=? . y4f72) (char<? . y4f71) (char<=? . y4f70) (char->integer . y4f6f) (ceiling . y4f6e) (call-with-values . y4f6d) (call-with-current-continuation . y4f6b) (cddddr . y4f6a) (cdddar . y4f69) (cddadr . y4f68) (cddaar . y4f67) (cdaddr . y4f66) (cdadar . y4f65) (cdaadr . y4f64) (cdaaar . y4f63) (cadddr . y4f62) (caddar . y4f61) (cadadr . y4f60) (cadaar . y4f5f) (caaddr . y4f5e) (caadar . y4f5d) (caaadr . y4f5c) (caaaar . y4f5b) (cdddr . y4f5a) (cddar . y4f59) (cdadr . y4f58) (cdaar . y4f57) (caddr . y4f56) (cadar . y4f55) (caadr . y4f54) (caaar . y4f53) (cddr . y4f52) (cdar . y4f51) (cadr . y4f50) (caar . y4f4f) (cdr . y4f4e) (car . y4f4d) (boolean? . y4f4c) (atan . y4f4a) (asin . y4f48) (apply . y4f47) (append . y4f46) (angle . y4f45) (acos . y4f44) (abs . y4f43) (/ . y4f42) (* . y4f41) (- . y4f40) (+ . y4f3f) (>= . y4f3e) (> . y4f3d) (= . y4f3c) (<= . y4f3b) (< . y4f3a) (unquote-splicing . y4f07) (unquote . y4f06) (else . y4f04) (=> . y4f03) (... . y4f02) (delay . y4eff) (do . y4efd) (cond . y4efc) (let* . y4efb) (let . y4efa) (quasiquote . y4ef4) (syntax-rules . y4ef3) (case . y4eee) (or . y4eea) (and . y4ee9) (if . y4ee8) (letrec . y4ee6) (lambda . y4ee3) (quote . y4ee0) (letrec-syntax . y4ede) (let-syntax . y4edd) (set! . y4edc) (begin . y4eda) (define-syntax . y4ed8) (define . y4ed7)) '() values values '#f '#f '#t '#f) (y2b12@y29b1@install-library 'y51ee '(psyntax modules) '() '() '() '() '((module . y4ed9)) '() values values '#f '#f '#t '#f) (y2b12@y29b1@install-library 'y51ef '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (y2b12@y29b1@install-library 'y51f0 '(rnrs) '(6) '() '() '() '((regexp? . y51e3) (string-upcase . y5154) (string-titlecase . y5153) (string-normalize-nfkd . y5152) (string-normalize-nfkc . y5151) (string-normalize-nfd . y5150) (string-normalize-nfc . y514f) (string-foldcase . y514e) (string-downcase . y514d) (string-ci>? . y514c) (string-ci>=? . y514b) (string-ci=? . y514a) (string-ci<? . y5149) (string-ci<=? . y5148) (char-whitespace? . y5147) (char-upper-case? . y5146) (char-title-case? . y5145) (char-numeric? . y5144) (char-lower-case? . y5143) (char-general-category . y5142) (char-upcase . y5141) (char-titlecase . y5140) (char-foldcase . y513f) (char-downcase . y513e) (char-ci>? . y513d) (char-ci>=? . y513c) (char-ci=? . y513b) (char-ci<? . y513a) (char-ci<=? . y5139) (char-alphabetic? . y5138) (make-variable-transformer . y2d27) (identifier? . y2fe5) (generate-temporaries . y2fd1) (free-identifier=? . y2fd3) (syntax->datum . y2fe9) (datum->syntax . y2fe7) (bound-identifier=? . y2fd5) (record-type-descriptor? . y5137) (record-predicate . y5136) (record-mutator . y5135) (record-constructor . y5134) (record-accessor . y5133) (make-record-type-descriptor . y5132) (make-record-constructor-descriptor . y5131) (record? . y5130) (record-type-uid . y512f) (record-type-sealed? . y512e) (record-type-parent . y512d) (record-type-opaque? . y512c) (record-type-name . y512b) (record-type-generative? . y512a) (record-type-field-names . y5129) (record-rtd . y5128) (record-field-mutable? . y5127) (delete-file . y5126) (file-exists? . y5125) (vector-sort! . y5124) (vector-sort . y5123) (list-sort . y5122) (symbol-hash . y5121) (string-ci-hash . y5120) (string-hash . y511f) (equal-hash . y511e) (hashtable-equivalence-function . y511d) (make-hashtable . y511c) (hashtable-hash-function . y511b) (make-eqv-hashtable . y511a) (make-eq-hashtable . y5119) (hashtable? . y5118) (hashtable-update! . y5117) (hashtable-size . y5116) (hashtable-set! . y5115) (hashtable-ref . y5114) (hashtable-mutable? . y5113) (hashtable-keys . y5112) (hashtable-entries . y5111) (hashtable-delete! . y5110) (hashtable-copy . y510f) (hashtable-contains? . y510e) (hashtable-clear! . y510d) (call-with-output-file . y510c) (call-with-input-file . y510b) (write-char . y510a) (write . y5109) (with-output-to-file . y5108) (with-input-from-file . y5107) (read-char . y5106) (read . y5105) (peek-char . y5104) (open-output-file . y5103) (open-input-file . y5102) (newline . y5101) (display . y5100) (close-output-port . y50ff) (close-input-port . y50fe) (eof-object? . y50fd) (eof-object . y50fc) (current-error-port . y50fb) (current-output-port . y50fa) (current-input-port . y50f9) (output-port? . y50f8) (input-port? . y50f7) (utf-8-codec . y50f6) (utf-16-codec . y50f5) (transcoder-error-handling-mode . y50f4) (transcoder-eol-style . y50f3) (transcoder-codec . y50f2) (transcoded-port . y50f1) (textual-port? . y50f0) (string->bytevector . y50ef) (standard-output-port . y50ee) (standard-input-port . y50ed) (standard-error-port . y50ec) (set-port-position! . y50eb) (put-u8 . y50ea) (put-string . y50e9) (put-datum . y50e8) (put-char . y50e7) (put-bytevector . y50e6) (port? . y50e5) (port-transcoder . y50e4) (port-position . y50e3) (port-has-set-port-position!? . y50e2) (port-has-port-position? . y50e1) (port-eof? . y50e0) (output-port-buffer-mode . y50df) (open-string-output-port . y50de) (open-string-input-port . y50dd) (open-file-output-port . y50dc) (open-file-input/output-port . y50db) (open-file-input-port . y50da) (open-bytevector-output-port . y50d9) (open-bytevector-input-port . y50d8) (native-transcoder . y50d7) (native-eol-style . y50d6) (make-transcoder . y50d5) (latin-1-codec . y50d4) (make-i/o-write-error . y4ba5) (make-i/o-read-error . y4b90) (make-i/o-port-error . y4c46) (make-i/o-invalid-position-error . y4bbc) (make-i/o-filename-error . y4bd7) (make-i/o-file-protection-error . y4bf0) (make-i/o-file-is-read-only-error . y4c05) (make-i/o-file-does-not-exist-error . y4c2f) (make-i/o-file-already-exists-error . y4c1a) (make-i/o-error . y4b7b) (make-i/o-encoding-error . y4c76) (make-i/o-decoding-error . y4c5f) (make-custom-textual-output-port . y50d3) (make-custom-textual-input/output-port . y50d2) (make-custom-textual-input-port . y50d1) (make-custom-binary-output-port . y50d0) (make-custom-binary-input/output-port . y50cf) (make-custom-binary-input-port . y50ce) (make-bytevector . y50cd) (lookahead-u8 . y50cc) (lookahead-char . y50cb) (i/o-write-error? . y4ba7) (i/o-read-error? . y4b92) (i/o-port-error? . y4c4a) (i/o-invalid-position-error? . y4bc0) (i/o-filename-error? . y4bdb) (i/o-file-protection-error? . y4bf2) (i/o-file-is-read-only-error? . y4c07) (i/o-file-does-not-exist-error? . y4c31) (i/o-file-already-exists-error? . y4c1c) (i/o-error? . y4b7d) (i/o-error-position . y4bc2) (i/o-error-port . y4c4c) (i/o-error-filename . y4bdd) (i/o-encoding-error? . y4c7a) (i/o-encoding-error-char . y4c7c) (i/o-decoding-error? . y4c61) (get-u8 . y50ca) (get-string-n! . y50c9) (get-string-n . y50c8) (get-string-all . y50c7) (get-line . y50c6) (get-datum . y50c5) (get-char . y50c4) (get-bytevector-some . y50c3) (get-bytevector-n! . y50c2) (get-bytevector-n . y50c1) (get-bytevector-all . y50c0) (flush-output-port . y50bf) (close-port . y50be) (exit . y50b6) (command-line . y4db1) (remove . y50b1) (remv . y50b0) (remp . y50af) (remq . y50ae) (partition . y50ad) (memv . y50ac) (memq . y50ab) (memp . y50aa) (member . y50a9) (exists . y50a8) (for-all . y50a7) (fold-right . y50a6) (fold-left . y50a5) (find . y50a4) (filter . y50a3) (cons* . y50a2) (assv . y50a1) (assq . y50a0) (assp . y509f) (assoc . y509e) (call-with-string-output-port . y509d) (call-with-port . y509c) (call-with-bytevector-output-port . y509b) (bytevector->string . y509a) (buffer-mode? . y5099) (binary-port? . y5098) (with-exception-handler . y5097) (raise-continuable . y5096) (raise . y5095) (make-enumeration . y5094) (enum-set=? . y5093) (enum-set-universe . y5092) (enum-set-union . y5091) (enum-set-subset? . y5090) (enum-set-projection . y508f) (enum-set-member? . y508e) (enum-set-intersection . y508d) (enum-set-indexer . y508c) (enum-set-difference . y508b) (enum-set-constructor . y508a) (enum-set-complement . y5089) (enum-set->list . y5088) (who-condition? . y4af1) (warning? . y4a69) (violation? . y4aa8) (undefined-violation? . y4b68) (syntax-violation? . y4b4f) (syntax-violation-subform . y4b53) (syntax-violation-form . y4b51) (syntax-violation . y2fe3) (simple-conditions . y5087) (serious-condition? . y4a7e) (non-continuable-violation? . y4b08) (message-condition? . y4a52) (make-who-condition . y4aed) (make-warning . y4a67) (make-violation . y4aa6) (make-undefined-violation . y4b66) (make-syntax-violation . y4b49) (make-serious-condition . y4a7c) (make-non-continuable-violation . y4b06) (make-message-condition . y4a4e) (make-lexical-violation . y4b30) (make-irritants-condition . y4ad2) (make-implementation-restriction-violation . y4b1b) (make-error . y4a91) (make-assertion-violation . y4abb) (lexical-violation? . y4b32) (irritants-condition? . y4ad6) (implementation-restriction-violation? . y4b1d) (error? . y4a93) (condition-who . y4af3) (condition-predicate . y5086) (condition-message . y4a54) (condition-irritants . y4ad8) (condition-accessor . y5085) (condition . y5084) (assertion-violation? . y4abd) (condition? . y5083) (utf32->string . y5082) (utf16->string . y5081) (utf8->string . y5080) (uint-list->bytevector . y507f) (u8-list->bytevector . y507e) (string->utf8 . y507d) (string->utf32 . y507c) (string->utf16 . y507b) (sint-list->bytevector . y507a) (native-endianness . y5079) (bytevector? . y5078) (bytevector=? . y5077) (bytevector-uint-set! . y5076) (bytevector-uint-ref . y5075) (bytevector-u8-set! . y5074) (bytevector-u8-ref . y5073) (bytevector-u64-set! . y5072) (bytevector-u64-ref . y5071) (bytevector-u64-native-set! . y5070) (bytevector-u64-native-ref . y506f) (bytevector-u32-set! . y506e) (bytevector-u32-ref . y506d) (bytevector-u32-native-set! . y506c) (bytevector-u32-native-ref . y506b) (bytevector-u16-set! . y506a) (bytevector-u16-ref . y5069) (bytevector-u16-native-set! . y5068) (bytevector-u16-native-ref . y5067) (bytevector-sint-set! . y5066) (bytevector-sint-ref . y5065) (bytevector-s8-set! . y5064) (bytevector-s8-ref . y5063) (bytevector-s64-set! . y5062) (bytevector-s64-ref . y5061) (bytevector-s64-native-set! . y5060) (bytevector-s64-native-ref . y505f) (bytevector-s32-set! . y505e) (bytevector-s32-ref . y505d) (bytevector-s32-native-set! . y505c) (bytevector-s32-native-ref . y505b) (bytevector-s16-set! . y505a) (bytevector-s16-ref . y5059) (bytevector-s16-native-set! . y5058) (bytevector-s16-native-ref . y5057) (bytevector-length . y5056) (bytevector-ieee-single-ref . y5055) (bytevector-ieee-single-set! . y5054) (bytevector-ieee-single-native-set! . y5053) (bytevector-ieee-single-native-ref . y5052) (bytevector-ieee-double-set! . y5051) (bytevector-ieee-double-ref . y5050) (bytevector-ieee-double-native-set! . y504f) (bytevector-ieee-double-native-ref . y504e) (bytevector-fill! . y504d) (bytevector-copy! . y504c) (bytevector-copy . y504b) (bytevector->uint-list . y504a) (bytevector->u8-list . y5049) (bytevector->sint-list . y5048) (no-nans-violation? . y4ca6) (no-infinities-violation? . y4c91) (make-no-nans-violation . y4ca4) (make-no-infinities-violation . y4c8f) (real->flonum . y5047) (flzero? . y5046) (fltruncate . y5045) (fltan . y5044) (flsqrt . y5043) (flsin . y5042) (flround . y5041) (flpositive? . y5040) (flonum? . y503f) (flodd? . y503e) (flnumerator . y503d) (flnegative? . y503c) (flnan? . y503b) (flmod0 . y503a) (flmod . y5039) (flmin . y5038) (flmax . y5037) (fllog . y5036) (flinteger? . y5035) (flinfinite? . y5034) (flfloor . y5033) (flfinite? . y5032) (flexpt . y5031) (flexp . y5030) (fleven? . y502f) (fldiv0-and-mod0 . y502e) (fldiv0 . y502d) (fldiv-and-mod . y502c) (fldiv . y502b) (fldenominator . y502a) (flcos . y5029) (flceiling . y5028) (flatan . y5027) (flasin . y5026) (flacos . y5025) (flabs . y5024) (fl>? . y5023) (fl>=? . y5022) (fl=? . y5021) (fl<? . y5020) (fl<=? . y501f) (fl/ . y501e) (fl- . y501d) (fl+ . y501c) (fl* . y501b) (fixnum->flonum . y501a) (fxzero? . y5019) (fxxor . y5018) (fxrotate-bit-field . y5017) (fxreverse-bit-field . y5016) (fxpositive? . y5015) (fxodd? . y5014) (fxnot . y5013) (fxnegative? . y5012) (fxmod0 . y5011) (fxmod . y5010) (fxmin . y500f) (fxmax . y500e) (fxlength . y500d) (fxior . y500c) (fxif . y500b) (fxfirst-bit-set . y500a) (fxeven? . y5009) (fxdiv0-and-mod0 . y5008) (fxdiv0 . y5007) (fxdiv-and-mod . y5006) (fxdiv . y5005) (fxcopy-bit-field . y5004) (fxcopy-bit . y5003) (fxbit-set? . y5002) (fxbit-field . y5001) (fxbit-count . y5000) (fxarithmetic-shift-right . y4fff) (fxarithmetic-shift-left . y4ffe) (fxarithmetic-shift . y4ffd) (fxand . y4ffc) (fx>? . y4ffb) (fx>=? . y4ffa) (fx=? . y4ff9) (fx<? . y4ff8) (fx<=? . y4ff7) (fx-/carry . y4ff6) (fx- . y4ff5) (fx+/carry . y4ff4) (fx+ . y4ff3) (fx*/carry . y4ff2) (fx* . y4ff1) (greatest-fixnum . y4ff0) (least-fixnum . y4fef) (fixnum-width . y4fee) (fixnum? . y4fed) (bitwise-rotate-bit-field . y4fec) (bitwise-reverse-bit-field . y4feb) (bitwise-length . y4fea) (bitwise-if . y4fe9) (bitwise-first-bit-set . y4fe8) (bitwise-copy-bit-field . y4fe7) (bitwise-copy-bit . y4fe6) (bitwise-bit-set? . y4fe5) (bitwise-bit-field . y4fe4) (bitwise-bit-count . y4fe3) (bitwise-xor . y4fe2) (bitwise-ior . y4fe1) (bitwise-and . y4fe0) (bitwise-not . y4fdf) (bitwise-arithmetic-shift-right . y4fde) (bitwise-arithmetic-shift-left . y4fdd) (bitwise-arithmetic-shift . y4fdc) (zero? . y4fdb) (vector? . y4fda) (vector-set! . y4fd9) (vector-ref . y4fd8) (vector-map . y4fd7) (vector-length . y4fd6) (vector-for-each . y4fd5) (vector-fill! . y4fd4) (vector->list . y4fd3) (vector . y4fd2) (values . y4fd1) (truncate . y4fd0) (tan . y4fcf) (symbol? . y4fce) (symbol=? . y4fcd) (symbol->string . y4fcc) (substring . y4fcb) (string? . y4fca) (string>? . y4fc9) (string>=? . y4fc8) (string=? . y4fc7) (string<? . y4fc6) (string<=? . y4fc5) (string-ref . y4fc4) (string-length . y4fc3) (string-for-each . y4fc2) (string-copy . y4fc1) (string-append . y4fc0) (string->symbol . y4fbf) (string->number . y4fbe) (string->list . y4fbd) (string . y4fbc) (sqrt . y4fbb) (sin . y4fba) (round . y4fb9) (reverse . y4fb8) (real? . y4fb7) (real-valued? . y4fb6) (real-part . y4fb5) (rationalize . y4fb4) (rational? . y4fb3) (rational-valued? . y4fb2) (procedure? . y4fb1) (positive? . y4fb0) (pair? . y4faf) (odd? . y4fae) (numerator . y4fad) (number? . y4fac) (number->string . y4fab) (null? . y4faa) (not . y4fa9) (negative? . y4fa8) (nan? . y4fa7) (min . y4fa6) (max . y4fa5) (map . y4fa4) (make-vector . y4fa3) (make-string . y4fa2) (make-rectangular . y4fa1) (make-polar . y4fa0) (magnitude . y4f9f) (log . y4f9e) (list? . y4f9d) (list-tail . y4f9c) (list-ref . y4f9b) (list->vector . y4f9a) (list->string . y4f99) (list . y4f98) (length . y4f97) (lcm . y4f96) (integer? . y4f95) (integer-valued? . y4f94) (integer->char . y4f93) (infinite? . y4f92) (inexact? . y4f91) (inexact . y4f90) (imag-part . y4f8f) (gcd . y4f8e) (for-each . y4f8d) (floor . y4f8c) (finite? . y4f8b) (expt . y4f8a) (exp . y4f89) (exact? . y4f88) (exact-integer-sqrt . y4f87) (exact . y4f86) (even? . y4f85) (error . y4f84) (eqv? . y4f83) (equal? . y4f82) (eq? . y4f81) (dynamic-wind . y4f80) (div0-and-mod0 . y4f7f) (mod0 . y4f7e) (div0 . y4f7d) (div-and-mod . y4f7c) (mod . y4f7b) (div . y4f7a) (denominator . y4f79) (cos . y4f78) (cons . y4f77) (complex? . y4f76) (char? . y4f75) (char>? . y4f74) (char>=? . y4f73) (char=? . y4f72) (char<? . y4f71) (char<=? . y4f70) (char->integer . y4f6f) (ceiling . y4f6e) (call-with-values . y4f6d) (call/cc . y4f6c) (call-with-current-continuation . y4f6b) (cddddr . y4f6a) (cdddar . y4f69) (cddadr . y4f68) (cddaar . y4f67) (cdaddr . y4f66) (cdadar . y4f65) (cdaadr . y4f64) (cdaaar . y4f63) (cadddr . y4f62) (caddar . y4f61) (cadadr . y4f60) (cadaar . y4f5f) (caaddr . y4f5e) (caadar . y4f5d) (caaadr . y4f5c) (caaaar . y4f5b) (cdddr . y4f5a) (cddar . y4f59) (cdadr . y4f58) (cdaar . y4f57) (caddr . y4f56) (cadar . y4f55) (caadr . y4f54) (caaar . y4f53) (cddr . y4f52) (cdar . y4f51) (cadr . y4f50) (caar . y4f4f) (cdr . y4f4e) (car . y4f4d) (boolean? . y4f4c) (boolean=? . y4f4b) (atan . y4f4a) (assertion-violation . y4f49) (asin . y4f48) (apply . y4f47) (append . y4f46) (angle . y4f45) (acos . y4f44) (abs . y4f43) (/ . y4f42) (* . y4f41) (- . y4f40) (+ . y4f3f) (>= . y4f3e) (> . y4f3d) (= . y4f3c) (<= . y4f3b) (< . y4f3a) (&no-nans . y4f38) (&no-infinities . y4f37) (&i/o-encoding . y4f36) (&i/o-decoding . y4f35) (&i/o-port . y4f34) (&i/o-file-does-not-exist . y4f33) (&i/o-file-already-exists . y4f32) (&i/o-file-is-read-only . y4f31) (&i/o-file-protection . y4f30) (&i/o-filename . y4f2f) (&i/o-invalid-position . y4f2e) (&i/o-write . y4f2d) (&i/o-read . y4f2c) (&i/o . y4f2b) (&undefined . y4f2a) (&syntax . y4f29) (&lexical . y4f28) (&implementation-restriction . y4f27) (&non-continuable . y4f26) (&who . y4f25) (&irritants . y4f24) (&assertion . y4f23) (&violation . y4f22) (&error . y4f21) (&serious . y4f20) (&warning . y4f1f) (&message . y4f1e) (&condition . y4f1d) (define-condition-type . y4f1c) (define-enumeration . y4f1b) (define-record-type . y4f1a) (parent-rtd . y4f19) (nongenerative . y4f18) (opaque . y4f17) (sealed . y4f16) (protocol . y4f15) (parent . y4f14) (immutable . y4f13) (mutable . y4f12) (fields . y4f11) (error-handling-mode . y4f10) (file-options . y4f0f) (buffer-mode . y4f0e) (eol-style . y4f0d) (guard . y4f0c) (unsyntax-splicing . y4f09) (unsyntax . y4f08) (unquote-splicing . y4f07) (unquote . y4f06) (_ . y4f05) (else . y4f04) (=> . y4f03) (... . y4f02) (assert . y4f01) (endianness . y4f00) (do . y4efd) (cond . y4efc) (let* . y4efb) (let . y4efa) (let*-values . y4ef9) (let-values . y4ef8) (identifier-syntax . y4ef7) (with-syntax . y4ef6) (quasisyntax . y4ef5) (quasiquote . y4ef4) (syntax-rules . y4ef3) (record-constructor-descriptor . y4ef0) (record-type-descriptor . y4eef) (case . y4eee) (unless . y4eec) (when . y4eeb) (or . y4eea) (and . y4ee9) (if . y4ee8) (letrec* . y4ee7) (letrec . y4ee6) (case-lambda . y4ee4) (lambda . y4ee3) (syntax . y4ee2) (syntax-case . y4ee1) (quote . y4ee0) (letrec-syntax . y4ede) (let-syntax . y4edd) (set! . y4edc) (begin . y4eda) (define-syntax . y4ed8) (define . y4ed7)) '() values values '#f '#f '#t '#f) (y2b12@y29b1@install-library 'y51f1 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . y2fbf) (quotient . y50bd) (null-environment . y2fbd) (remainder . y50bc) (modulo . y50bb) (inexact->exact . y50ba) (force . y50b9) (exact->inexact . y50b8) (make-promise . y50b7) (delay . y4eff)) '() values values '#f '#f '#t '#f) (y2b12@y29b1@install-library 'y51f2 '(rnrs control) '(6) '() '() '() '((do . y4efd) (unless . y4eec) (when . y4eeb) (case-lambda . y4ee4)) '() values values '#f '#f '#t '#f) (y2b12@y29b1@install-library 'y51f3 '(rnrs eval) '(6) '() '() '() '((eval . y2fc3) (environment . y2fbb)) '() values values '#f '#f '#t '#f) (y2b12@y29b1@install-library 'y51f4 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . y50b3) (set-car! . y50b2)) '() values values '#f '#f '#t '#f) (y2b12@y29b1@install-library 'y51f5 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . y50b5) (string-set! . y50b4)) '() values values '#f '#f '#t '#f) (y2b12@y29b1@install-library 'y51f6 '(rnrs programs) '(6) '() '() '() '((exit . y50b6) (command-line . y4db1)) '() values values '#f '#f '#t '#f) (y2b12@y29b1@install-library 'y51f7 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . y2d27) (identifier? . y2fe5) (generate-temporaries . y2fd1) (free-identifier=? . y2fd3) (syntax->datum . y2fe9) (datum->syntax . y2fe7) (bound-identifier=? . y2fd5) (syntax-violation . y2fe3) (unsyntax-splicing . y4f09) (unsyntax . y4f08) (_ . y4f05) (... . y4f02) (with-syntax . y4ef6) (quasisyntax . y4ef5) (syntax . y4ee2) (syntax-case . y4ee1)) '() values values '#f '#f '#t '#f) (y2b12@y29b1@install-library 'y51f8 '(rnrs files) '(6) '() '() '() '((delete-file . y5126) (file-exists? . y5125) (make-i/o-write-error . y4ba5) (make-i/o-read-error . y4b90) (make-i/o-port-error . y4c46) (make-i/o-invalid-position-error . y4bbc) (make-i/o-filename-error . y4bd7) (make-i/o-file-protection-error . y4bf0) (make-i/o-file-is-read-only-error . y4c05) (make-i/o-file-does-not-exist-error . y4c2f) (make-i/o-file-already-exists-error . y4c1a) (make-i/o-error . y4b7b) (i/o-write-error? . y4ba7) (i/o-read-error? . y4b92) (i/o-port-error? . y4c4a) (i/o-invalid-position-error? . y4bc0) (i/o-filename-error? . y4bdb) (i/o-file-protection-error? . y4bf2) (i/o-file-is-read-only-error? . y4c07) (i/o-file-does-not-exist-error? . y4c31) (i/o-file-already-exists-error? . y4c1c) (i/o-error? . y4b7d) (i/o-error-position . y4bc2) (i/o-error-port . y4c4c) (i/o-error-filename . y4bdd) (&i/o-port . y4f34) (&i/o-file-does-not-exist . y4f33) (&i/o-file-already-exists . y4f32) (&i/o-file-is-read-only . y4f31) (&i/o-file-protection . y4f30) (&i/o-filename . y4f2f) (&i/o-invalid-position . y4f2e) (&i/o-write . y4f2d) (&i/o-read . y4f2c) (&i/o . y4f2b)) '() values values '#f '#f '#t '#f) (y2b12@y29b1@install-library 'y51f9 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . y5124) (vector-sort . y5123) (list-sort . y5122)) '() values values '#f '#f '#t '#f) (y2b12@y29b1@install-library 'y51fa '(rnrs base) '(6) '() '() '() '((zero? . y4fdb) (vector? . y4fda) (vector-set! . y4fd9) (vector-ref . y4fd8) (vector-map . y4fd7) (vector-length . y4fd6) (vector-for-each . y4fd5) (vector-fill! . y4fd4) (vector->list . y4fd3) (vector . y4fd2) (values . y4fd1) (truncate . y4fd0) (tan . y4fcf) (symbol? . y4fce) (symbol=? . y4fcd) (symbol->string . y4fcc) (substring . y4fcb) (string? . y4fca) (string>? . y4fc9) (string>=? . y4fc8) (string=? . y4fc7) (string<? . y4fc6) (string<=? . y4fc5) (string-ref . y4fc4) (string-length . y4fc3) (string-for-each . y4fc2) (string-copy . y4fc1) (string-append . y4fc0) (string->symbol . y4fbf) (string->number . y4fbe) (string->list . y4fbd) (string . y4fbc) (sqrt . y4fbb) (sin . y4fba) (round . y4fb9) (reverse . y4fb8) (real? . y4fb7) (real-valued? . y4fb6) (real-part . y4fb5) (rationalize . y4fb4) (rational? . y4fb3) (rational-valued? . y4fb2) (procedure? . y4fb1) (positive? . y4fb0) (pair? . y4faf) (odd? . y4fae) (numerator . y4fad) (number? . y4fac) (number->string . y4fab) (null? . y4faa) (not . y4fa9) (negative? . y4fa8) (nan? . y4fa7) (min . y4fa6) (max . y4fa5) (map . y4fa4) (make-vector . y4fa3) (make-string . y4fa2) (make-rectangular . y4fa1) (make-polar . y4fa0) (magnitude . y4f9f) (log . y4f9e) (list? . y4f9d) (list-tail . y4f9c) (list-ref . y4f9b) (list->vector . y4f9a) (list->string . y4f99) (list . y4f98) (length . y4f97) (lcm . y4f96) (integer? . y4f95) (integer-valued? . y4f94) (integer->char . y4f93) (infinite? . y4f92) (inexact? . y4f91) (inexact . y4f90) (imag-part . y4f8f) (gcd . y4f8e) (for-each . y4f8d) (floor . y4f8c) (finite? . y4f8b) (expt . y4f8a) (exp . y4f89) (exact? . y4f88) (exact-integer-sqrt . y4f87) (exact . y4f86) (even? . y4f85) (error . y4f84) (eqv? . y4f83) (equal? . y4f82) (eq? . y4f81) (dynamic-wind . y4f80) (div0-and-mod0 . y4f7f) (mod0 . y4f7e) (div0 . y4f7d) (div-and-mod . y4f7c) (mod . y4f7b) (div . y4f7a) (denominator . y4f79) (cos . y4f78) (cons . y4f77) (complex? . y4f76) (char? . y4f75) (char>? . y4f74) (char>=? . y4f73) (char=? . y4f72) (char<? . y4f71) (char<=? . y4f70) (char->integer . y4f6f) (ceiling . y4f6e) (call-with-values . y4f6d) (call/cc . y4f6c) (call-with-current-continuation . y4f6b) (cddddr . y4f6a) (cdddar . y4f69) (cddadr . y4f68) (cddaar . y4f67) (cdaddr . y4f66) (cdadar . y4f65) (cdaadr . y4f64) (cdaaar . y4f63) (cadddr . y4f62) (caddar . y4f61) (cadadr . y4f60) (cadaar . y4f5f) (caaddr . y4f5e) (caadar . y4f5d) (caaadr . y4f5c) (caaaar . y4f5b) (cdddr . y4f5a) (cddar . y4f59) (cdadr . y4f58) (cdaar . y4f57) (caddr . y4f56) (cadar . y4f55) (caadr . y4f54) (caaar . y4f53) (cddr . y4f52) (cdar . y4f51) (cadr . y4f50) (caar . y4f4f) (cdr . y4f4e) (car . y4f4d) (boolean? . y4f4c) (boolean=? . y4f4b) (atan . y4f4a) (assertion-violation . y4f49) (asin . y4f48) (apply . y4f47) (append . y4f46) (angle . y4f45) (acos . y4f44) (abs . y4f43) (/ . y4f42) (* . y4f41) (- . y4f40) (+ . y4f3f) (>= . y4f3e) (> . y4f3d) (= . y4f3c) (<= . y4f3b) (< . y4f3a) (unquote-splicing . y4f07) (unquote . y4f06) (_ . y4f05) (else . y4f04) (=> . y4f03) (... . y4f02) (assert . y4f01) (cond . y4efc) (let* . y4efb) (let . y4efa) (let*-values . y4ef9) (let-values . y4ef8) (identifier-syntax . y4ef7) (quasiquote . y4ef4) (syntax-rules . y4ef3) (case . y4eee) (or . y4eea) (and . y4ee9) (if . y4ee8) (letrec* . y4ee7) (letrec . y4ee6) (lambda . y4ee3) (quote . y4ee0) (letrec-syntax . y4ede) (let-syntax . y4edd) (set! . y4edc) (begin . y4eda) (define-syntax . y4ed8) (define . y4ed7)) '() values values '#f '#f '#t '#f) (y2b12@y29b1@install-library 'y51fb '(rnrs lists) '(6) '() '() '() '((remove . y50b1) (remv . y50b0) (remp . y50af) (remq . y50ae) (partition . y50ad) (memv . y50ac) (memq . y50ab) (memp . y50aa) (member . y50a9) (exists . y50a8) (for-all . y50a7) (fold-right . y50a6) (fold-left . y50a5) (find . y50a4) (filter . y50a3) (cons* . y50a2) (assv . y50a1) (assq . y50a0) (assp . y509f) (assoc . y509e)) '() values values '#f '#f '#t '#f) (y2b12@y29b1@install-library 'y51fc '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . y510c) (call-with-input-file . y510b) (write-char . y510a) (write . y5109) (with-output-to-file . y5108) (with-input-from-file . y5107) (read-char . y5106) (read . y5105) (peek-char . y5104) (open-output-file . y5103) (open-input-file . y5102) (newline . y5101) (display . y5100) (close-output-port . y50ff) (close-input-port . y50fe) (eof-object? . y50fd) (eof-object . y50fc) (current-error-port . y50fb) (current-output-port . y50fa) (current-input-port . y50f9) (output-port? . y50f8) (input-port? . y50f7) (make-i/o-write-error . y4ba5) (make-i/o-read-error . y4b90) (make-i/o-port-error . y4c46) (make-i/o-invalid-position-error . y4bbc) (make-i/o-filename-error . y4bd7) (make-i/o-file-protection-error . y4bf0) (make-i/o-file-is-read-only-error . y4c05) (make-i/o-file-does-not-exist-error . y4c2f) (make-i/o-file-already-exists-error . y4c1a) (make-i/o-error . y4b7b) (i/o-write-error? . y4ba7) (i/o-read-error? . y4b92) (i/o-port-error? . y4c4a) (i/o-invalid-position-error? . y4bc0) (i/o-filename-error? . y4bdb) (i/o-file-protection-error? . y4bf2) (i/o-file-is-read-only-error? . y4c07) (i/o-file-does-not-exist-error? . y4c31) (i/o-file-already-exists-error? . y4c1c) (i/o-error? . y4b7d) (i/o-error-position . y4bc2) (i/o-error-port . y4c4c) (i/o-error-filename . y4bdd) (&i/o-port . y4f34) (&i/o-file-does-not-exist . y4f33) (&i/o-file-already-exists . y4f32) (&i/o-file-is-read-only . y4f31) (&i/o-file-protection . y4f30) (&i/o-filename . y4f2f) (&i/o-invalid-position . y4f2e) (&i/o-write . y4f2d) (&i/o-read . y4f2c) (&i/o . y4f2b)) '() values values '#f '#f '#t '#f) (y2b12@y29b1@install-library 'y51fd '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . y50cd) (utf32->string . y5082) (utf16->string . y5081) (utf8->string . y5080) (uint-list->bytevector . y507f) (u8-list->bytevector . y507e) (string->utf8 . y507d) (string->utf32 . y507c) (string->utf16 . y507b) (sint-list->bytevector . y507a) (native-endianness . y5079) (bytevector? . y5078) (bytevector=? . y5077) (bytevector-uint-set! . y5076) (bytevector-uint-ref . y5075) (bytevector-u8-set! . y5074) (bytevector-u8-ref . y5073) (bytevector-u64-set! . y5072) (bytevector-u64-ref . y5071) (bytevector-u64-native-set! . y5070) (bytevector-u64-native-ref . y506f) (bytevector-u32-set! . y506e) (bytevector-u32-ref . y506d) (bytevector-u32-native-set! . y506c) (bytevector-u32-native-ref . y506b) (bytevector-u16-set! . y506a) (bytevector-u16-ref . y5069) (bytevector-u16-native-set! . y5068) (bytevector-u16-native-ref . y5067) (bytevector-sint-set! . y5066) (bytevector-sint-ref . y5065) (bytevector-s8-set! . y5064) (bytevector-s8-ref . y5063) (bytevector-s64-set! . y5062) (bytevector-s64-ref . y5061) (bytevector-s64-native-set! . y5060) (bytevector-s64-native-ref . y505f) (bytevector-s32-set! . y505e) (bytevector-s32-ref . y505d) (bytevector-s32-native-set! . y505c) (bytevector-s32-native-ref . y505b) (bytevector-s16-set! . y505a) (bytevector-s16-ref . y5059) (bytevector-s16-native-set! . y5058) (bytevector-s16-native-ref . y5057) (bytevector-length . y5056) (bytevector-ieee-single-ref . y5055) (bytevector-ieee-single-set! . y5054) (bytevector-ieee-single-native-set! . y5053) (bytevector-ieee-single-native-ref . y5052) (bytevector-ieee-double-set! . y5051) (bytevector-ieee-double-ref . y5050) (bytevector-ieee-double-native-set! . y504f) (bytevector-ieee-double-native-ref . y504e) (bytevector-fill! . y504d) (bytevector-copy! . y504c) (bytevector-copy . y504b) (bytevector->uint-list . y504a) (bytevector->u8-list . y5049) (bytevector->sint-list . y5048) (endianness . y4f00)) '() values values '#f '#f '#t '#f) (y2b12@y29b1@install-library 'y51fe '(rnrs unicode) '(6) '() '() '() '((string-upcase . y5154) (string-titlecase . y5153) (string-normalize-nfkd . y5152) (string-normalize-nfkc . y5151) (string-normalize-nfd . y5150) (string-normalize-nfc . y514f) (string-foldcase . y514e) (string-downcase . y514d) (string-ci>? . y514c) (string-ci>=? . y514b) (string-ci=? . y514a) (string-ci<? . y5149) (string-ci<=? . y5148) (char-whitespace? . y5147) (char-upper-case? . y5146) (char-title-case? . y5145) (char-numeric? . y5144) (char-lower-case? . y5143) (char-general-category . y5142) (char-upcase . y5141) (char-titlecase . y5140) (char-foldcase . y513f) (char-downcase . y513e) (char-ci>? . y513d) (char-ci>=? . y513c) (char-ci=? . y513b) (char-ci<? . y513a) (char-ci<=? . y5139) (char-alphabetic? . y5138)) '() values values '#f '#f '#t '#f) (y2b12@y29b1@install-library 'y51ff '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . y5097) (raise-continuable . y5096) (raise . y5095) (guard . y4f0c) (else . y4f04) (=> . y4f03)) '() values values '#f '#f '#t '#f) (y2b12@y29b1@install-library 'y5200 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . y4fec) (bitwise-reverse-bit-field . y4feb) (bitwise-length . y4fea) (bitwise-if . y4fe9) (bitwise-first-bit-set . y4fe8) (bitwise-copy-bit-field . y4fe7) (bitwise-copy-bit . y4fe6) (bitwise-bit-set? . y4fe5) (bitwise-bit-field . y4fe4) (bitwise-bit-count . y4fe3) (bitwise-xor . y4fe2) (bitwise-ior . y4fe1) (bitwise-and . y4fe0) (bitwise-not . y4fdf) (bitwise-arithmetic-shift-right . y4fde) (bitwise-arithmetic-shift-left . y4fdd) (bitwise-arithmetic-shift . y4fdc)) '() values values '#f '#f '#t '#f) (y2b12@y29b1@install-library 'y5201 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . y5019) (fxxor . y5018) (fxrotate-bit-field . y5017) (fxreverse-bit-field . y5016) (fxpositive? . y5015) (fxodd? . y5014) (fxnot . y5013) (fxnegative? . y5012) (fxmod0 . y5011) (fxmod . y5010) (fxmin . y500f) (fxmax . y500e) (fxlength . y500d) (fxior . y500c) (fxif . y500b) (fxfirst-bit-set . y500a) (fxeven? . y5009) (fxdiv0-and-mod0 . y5008) (fxdiv0 . y5007) (fxdiv-and-mod . y5006) (fxdiv . y5005) (fxcopy-bit-field . y5004) (fxcopy-bit . y5003) (fxbit-set? . y5002) (fxbit-field . y5001) (fxbit-count . y5000) (fxarithmetic-shift-right . y4fff) (fxarithmetic-shift-left . y4ffe) (fxarithmetic-shift . y4ffd) (fxand . y4ffc) (fx>? . y4ffb) (fx>=? . y4ffa) (fx=? . y4ff9) (fx<? . y4ff8) (fx<=? . y4ff7) (fx-/carry . y4ff6) (fx- . y4ff5) (fx+/carry . y4ff4) (fx+ . y4ff3) (fx*/carry . y4ff2) (fx* . y4ff1) (greatest-fixnum . y4ff0) (least-fixnum . y4fef) (fixnum-width . y4fee) (fixnum? . y4fed)) '() values values '#f '#f '#t '#f) (y2b12@y29b1@install-library 'y5202 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . y4ca6) (no-infinities-violation? . y4c91) (make-no-nans-violation . y4ca4) (make-no-infinities-violation . y4c8f) (real->flonum . y5047) (flzero? . y5046) (fltruncate . y5045) (fltan . y5044) (flsqrt . y5043) (flsin . y5042) (flround . y5041) (flpositive? . y5040) (flonum? . y503f) (flodd? . y503e) (flnumerator . y503d) (flnegative? . y503c) (flnan? . y503b) (flmod0 . y503a) (flmod . y5039) (flmin . y5038) (flmax . y5037) (fllog . y5036) (flinteger? . y5035) (flinfinite? . y5034) (flfloor . y5033) (flfinite? . y5032) (flexpt . y5031) (flexp . y5030) (fleven? . y502f) (fldiv0-and-mod0 . y502e) (fldiv0 . y502d) (fldiv-and-mod . y502c) (fldiv . y502b) (fldenominator . y502a) (flcos . y5029) (flceiling . y5028) (flatan . y5027) (flasin . y5026) (flacos . y5025) (flabs . y5024) (fl>? . y5023) (fl>=? . y5022) (fl=? . y5021) (fl<? . y5020) (fl<=? . y501f) (fl/ . y501e) (fl- . y501d) (fl+ . y501c) (fl* . y501b) (fixnum->flonum . y501a) (&no-nans . y4f38) (&no-infinities . y4f37)) '() values values '#f '#f '#t '#f) (y2b12@y29b1@install-library 'y5203 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . y5121) (string-ci-hash . y5120) (string-hash . y511f) (equal-hash . y511e) (hashtable-equivalence-function . y511d) (make-hashtable . y511c) (hashtable-hash-function . y511b) (make-eqv-hashtable . y511a) (make-eq-hashtable . y5119) (hashtable? . y5118) (hashtable-update! . y5117) (hashtable-size . y5116) (hashtable-set! . y5115) (hashtable-ref . y5114) (hashtable-mutable? . y5113) (hashtable-keys . y5112) (hashtable-entries . y5111) (hashtable-delete! . y5110) (hashtable-copy . y510f) (hashtable-contains? . y510e) (hashtable-clear! . y510d)) '() values values '#f '#f '#t '#f) (y2b12@y29b1@install-library 'y5204 '(rnrs io ports) '(6) '() '() '() '((eof-object? . y50fd) (eof-object . y50fc) (current-error-port . y50fb) (current-output-port . y50fa) (current-input-port . y50f9) (output-port? . y50f8) (input-port? . y50f7) (utf-8-codec . y50f6) (utf-16-codec . y50f5) (transcoder-error-handling-mode . y50f4) (transcoder-eol-style . y50f3) (transcoder-codec . y50f2) (transcoded-port . y50f1) (textual-port? . y50f0) (string->bytevector . y50ef) (standard-output-port . y50ee) (standard-input-port . y50ed) (standard-error-port . y50ec) (set-port-position! . y50eb) (put-u8 . y50ea) (put-string . y50e9) (put-datum . y50e8) (put-char . y50e7) (put-bytevector . y50e6) (port? . y50e5) (port-transcoder . y50e4) (port-position . y50e3) (port-has-set-port-position!? . y50e2) (port-has-port-position? . y50e1) (port-eof? . y50e0) (output-port-buffer-mode . y50df) (open-string-output-port . y50de) (open-string-input-port . y50dd) (open-file-output-port . y50dc) (open-file-input/output-port . y50db) (open-file-input-port . y50da) (open-bytevector-output-port . y50d9) (open-bytevector-input-port . y50d8) (native-transcoder . y50d7) (native-eol-style . y50d6) (make-transcoder . y50d5) (latin-1-codec . y50d4) (make-i/o-write-error . y4ba5) (make-i/o-read-error . y4b90) (make-i/o-port-error . y4c46) (make-i/o-invalid-position-error . y4bbc) (make-i/o-filename-error . y4bd7) (make-i/o-file-protection-error . y4bf0) (make-i/o-file-is-read-only-error . y4c05) (make-i/o-file-does-not-exist-error . y4c2f) (make-i/o-file-already-exists-error . y4c1a) (make-i/o-error . y4b7b) (make-i/o-encoding-error . y4c76) (make-i/o-decoding-error . y4c5f) (make-custom-textual-output-port . y50d3) (make-custom-textual-input/output-port . y50d2) (make-custom-textual-input-port . y50d1) (make-custom-binary-output-port . y50d0) (make-custom-binary-input/output-port . y50cf) (make-custom-binary-input-port . y50ce) (lookahead-u8 . y50cc) (lookahead-char . y50cb) (i/o-write-error? . y4ba7) (i/o-read-error? . y4b92) (i/o-port-error? . y4c4a) (i/o-invalid-position-error? . y4bc0) (i/o-filename-error? . y4bdb) (i/o-file-protection-error? . y4bf2) (i/o-file-is-read-only-error? . y4c07) (i/o-file-does-not-exist-error? . y4c31) (i/o-file-already-exists-error? . y4c1c) (i/o-error? . y4b7d) (i/o-error-position . y4bc2) (i/o-error-port . y4c4c) (i/o-error-filename . y4bdd) (i/o-encoding-error? . y4c7a) (i/o-encoding-error-char . y4c7c) (i/o-decoding-error? . y4c61) (get-u8 . y50ca) (get-string-n! . y50c9) (get-string-n . y50c8) (get-string-all . y50c7) (get-line . y50c6) (get-datum . y50c5) (get-char . y50c4) (get-bytevector-some . y50c3) (get-bytevector-n! . y50c2) (get-bytevector-n . y50c1) (get-bytevector-all . y50c0) (flush-output-port . y50bf) (close-port . y50be) (call-with-string-output-port . y509d) (call-with-port . y509c) (call-with-bytevector-output-port . y509b) (bytevector->string . y509a) (buffer-mode? . y5099) (binary-port? . y5098) (&i/o-encoding . y4f36) (&i/o-decoding . y4f35) (&i/o-port . y4f34) (&i/o-file-does-not-exist . y4f33) (&i/o-file-already-exists . y4f32) (&i/o-file-is-read-only . y4f31) (&i/o-file-protection . y4f30) (&i/o-filename . y4f2f) (&i/o-invalid-position . y4f2e) (&i/o-write . y4f2d) (&i/o-read . y4f2c) (&i/o . y4f2b) (error-handling-mode . y4f10) (file-options . y4f0f) (buffer-mode . y4f0e) (eol-style . y4f0d)) '() values values '#f '#f '#t '#f) (y2b12@y29b1@install-library 'y5205 '(rnrs enums) '(6) '() '() '() '((make-enumeration . y5094) (enum-set=? . y5093) (enum-set-universe . y5092) (enum-set-union . y5091) (enum-set-subset? . y5090) (enum-set-projection . y508f) (enum-set-member? . y508e) (enum-set-intersection . y508d) (enum-set-indexer . y508c) (enum-set-difference . y508b) (enum-set-constructor . y508a) (enum-set-complement . y5089) (enum-set->list . y5088) (define-enumeration . y4f1b)) '() values values '#f '#f '#t '#f) (y2b12@y29b1@install-library 'y5206 '(rnrs conditions) '(6) '() '() '() '((who-condition? . y4af1) (warning? . y4a69) (violation? . y4aa8) (undefined-violation? . y4b68) (syntax-violation? . y4b4f) (syntax-violation-subform . y4b53) (syntax-violation-form . y4b51) (syntax-violation . y2fe3) (simple-conditions . y5087) (serious-condition? . y4a7e) (non-continuable-violation? . y4b08) (message-condition? . y4a52) (make-who-condition . y4aed) (make-warning . y4a67) (make-violation . y4aa6) (make-undefined-violation . y4b66) (make-syntax-violation . y4b49) (make-serious-condition . y4a7c) (make-non-continuable-violation . y4b06) (make-message-condition . y4a4e) (make-lexical-violation . y4b30) (make-irritants-condition . y4ad2) (make-implementation-restriction-violation . y4b1b) (make-error . y4a91) (make-assertion-violation . y4abb) (lexical-violation? . y4b32) (irritants-condition? . y4ad6) (implementation-restriction-violation? . y4b1d) (error? . y4a93) (condition-who . y4af3) (condition-predicate . y5086) (condition-message . y4a54) (condition-irritants . y4ad8) (condition-accessor . y5085) (condition . y5084) (assertion-violation? . y4abd) (condition? . y5083) (&undefined . y4f2a) (&syntax . y4f29) (&lexical . y4f28) (&implementation-restriction . y4f27) (&non-continuable . y4f26) (&who . y4f25) (&irritants . y4f24) (&assertion . y4f23) (&violation . y4f22) (&error . y4f21) (&serious . y4f20) (&warning . y4f1f) (&message . y4f1e) (&condition . y4f1d) (define-condition-type . y4f1c)) '() values values '#f '#f '#t '#f) (y2b12@y29b1@install-library 'y5207 '(rnrs records inspection) '(6) '() '() '() '((record? . y5130) (record-type-uid . y512f) (record-type-sealed? . y512e) (record-type-parent . y512d) (record-type-opaque? . y512c) (record-type-name . y512b) (record-type-generative? . y512a) (record-type-field-names . y5129) (record-rtd . y5128) (record-field-mutable? . y5127)) '() values values '#f '#f '#t '#f) (y2b12@y29b1@install-library 'y5208 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . y5137) (record-predicate . y5136) (record-mutator . y5135) (record-constructor . y5134) (record-accessor . y5133) (make-record-type-descriptor . y5132) (make-record-constructor-descriptor . y5131)) '() values values '#f '#f '#t '#f) (y2b12@y29b1@install-library 'y5209 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . y4f1a) (parent-rtd . y4f19) (nongenerative . y4f18) (opaque . y4f17) (sealed . y4f16) (protocol . y4f15) (parent . y4f14) (immutable . y4f13) (mutable . y4f12) (fields . y4f11) (record-constructor-descriptor . y4ef0) (record-type-descriptor . y4eef)) '() values values '#f '#f '#t '#f) (y2b12@y29b1@install-library 'y520a '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . y4caa) (&no-nans-rtd . y4ca8) (&no-infinities-rcd . y4c95) (&no-infinities-rtd . y4c93) (&i/o-encoding-rcd . y4c80) (&i/o-encoding-rtd . y4c7e) (&i/o-decoding-rcd . y4c65) (&i/o-decoding-rtd . y4c63) (&i/o-port-rcd . y4c50) (&i/o-port-rtd . y4c4e) (&i/o-file-does-not-exist-rcd . y4c35) (&i/o-file-does-not-exist-rtd . y4c33) (&i/o-file-already-exists-rcd . y4c20) (&i/o-file-already-exists-rtd . y4c1e) (&i/o-file-is-read-only-rcd . y4c0b) (&i/o-file-is-read-only-rtd . y4c09) (&i/o-file-protection-rcd . y4bf6) (&i/o-file-protection-rtd . y4bf4) (&i/o-filename-rcd . y4be1) (&i/o-filename-rtd . y4bdf) (&i/o-invalid-position-rcd . y4bc6) (&i/o-invalid-position-rtd . y4bc4) (&i/o-write-rcd . y4bab) (&i/o-write-rtd . y4ba9) (&i/o-read-rcd . y4b96) (&i/o-read-rtd . y4b94) (&i/o-rcd . y4b81) (&i/o-rtd . y4b7f) (&undefined-rcd . y4b6c) (&undefined-rtd . y4b6a) (&syntax-rcd . y4b57) (&syntax-rtd . y4b55) (&lexical-rcd . y4b36) (&lexical-rtd . y4b34) (&implementation-restriction-rcd . y4b21) (&implementation-restriction-rtd . y4b1f) (&non-continuable-rcd . y4b0c) (&non-continuable-rtd . y4b0a) (&who-rcd . y4af7) (&who-rtd . y4af5) (&irritants-rcd . y4adc) (&irritants-rtd . y4ada) (&assertion-rcd . y4ac1) (&assertion-rtd . y4abf) (&violation-rcd . y4aac) (&violation-rtd . y4aaa) (&error-rcd . y4a97) (&error-rtd . y4a95) (&serious-rcd . y4a82) (&serious-rtd . y4a80) (&warning-rcd . y4a6d) (&warning-rtd . y4a6b) (&message-rcd . y4a58) (&message-rtd . y4a56) (&condition-rcd . y49f9) (&condition-rtd . y49f7) (syntax-error . y2fdf) (syntax-dispatch . y2efa) (pretty-print . y51ea) (eval-core . y51e9) (set-symbol-value! . y51e8) (symbol-value . y51e7) (gensym . y51e6) (void . y51e5) (load . y4db7) (interaction-environment . y2fef) (char-ready? . y51e4) (regexp? . y51e3) (read-line . y51e2) (ungensym . y51e1) (alist->eq-hash-table . y51e0) (assoc-ref . y51df) (print . y51de) (format . y51dd) (host-os . y51dc) (library-path . y2990) (standard-library-path . y51db) (file-newer? . y51da) (stat-mtime . y51d9) (write-to-file . y51d8) (file->list . y51d7) (file->string . y51d6) (digit->integer . y51d5) (call-with-string-input-port . y51d4) (call-with-string-io . y51d3) (string-split . y51d2) (bytevector-for-each . y51d1) (string->regexp . y51d0) (rxmatch . y51cf) (regexp-replace-all . y51ce) (hashtable-for-each . y51cd) (call-process . y51cc) (local-tz-offset . y51cb) (microseconds . y51ca) (directory-list . y51c9) (set-current-directory! . y51c8) (expand-path . y51c7) (current-directory . y51c6) (%spawn . y51c5) (%waitpid . y51c4) (pointer-ref-c-int64 . y51c3) (pointer-ref-c-int32 . y51c2) (pointer-ref-c-int16 . y51c1) (pointer-ref-c-int8 . y51c0) (pointer-ref-c-uint64 . y51bf) (pointer-ref-c-uint32 . y51be) (pointer-ref-c-uint16 . y51bd) (pointer-ref-c-uint8 . y51bc) (pointer-set-c-int64! . y51bb) (pointer-set-c-int32! . y51ba) (pointer-set-c-int16! . y51b9) (pointer-set-c-int8! . y51b8) (pointer-set-c-pointer! . y51b7) (pointer-set-c-double! . y51b6) (pointer-set-c-float! . y51b5) (pointer-set-c-long-long! . y51b4) (pointer-set-c-long! . y51b3) (pointer-set-c-int! . y51b2) (pointer-set-c-short! . y51b1) (pointer-set-c-char! . y51b0) (pointer-ref-c-pointer . y51af) (pointer-ref-c-double . y51ae) (pointer-ref-c-float . y51ad) (pointer-ref-c-unsigned-long-long . y51ac) (pointer-ref-c-signed-long-long . y51ab) (pointer-ref-c-unsigned-long . y51aa) (pointer-ref-c-signed-long . y51a9) (pointer-ref-c-unsigned-int . y51a8) (pointer-ref-c-signed-int . y51a7) (pointer-ref-c-unsigned-short . y51a6) (pointer-ref-c-signed-short . y51a5) (pointer-ref-c-unsigned-char . y51a4) (pointer-ref-c-signed-char . y51a3) (pointer->integer . y51a2) (integer->pointer . y51a1) (pointer? . y51a0) (shared-errno . y519f) (%ffi-supported? . y519e) (%ffi-pointer->string . y519d) (%ffi-call->string-or-zero . y519c) (%ffi-call->double . y519b) (%ffi-call->void* . y519a) (%ffi-call->void . y5199) (%ffi-call->int . y5198) (%ffi-lookup . y5197) (%ffi-open . y5196) (%fork . y5195) (%pipe . y5194) (p . y5193) (open-output-string . y5192) (get-output-string . y5191) (file-stat-ctime . y5190) (file-stat-atime . y518f) (file-stat-mtime . y518e) (file-size-in-bytes . y518d) (file-writable? . y518c) (file-executable? . y518b) (file-readable? . y518a) (file-regular? . y5189) (file-symbolic-link? . y5188) (file-directory? . y5187) (create-symbolic-link . y5186) (rename-file . y5185) (delete-directory . y5184) (create-directory . y5183) (get-environment-variables . y5182) (get-environment-variable . y5181) (get-timeofday . y5180) (get-command-line . y517f) (sys-display . y517e) (whereis . y517d) (register . y517c) (vm-join! . y517b) (vm-set-value! . y517a) (vm? . y5179) (main-vm? . y5178) (vm-eval . y5177) (vm-self . y5176) (vm-start! . y5175) (make-vm . y5174) (mutex-try-lock! . y5173) (mutex-unlock! . y5172) (mutex-lock! . y5171) (mutex? . y5170) (make-mutex . y516f) (condition-variable-notify-all! . y516e) (condition-variable-notify! . y516d) (condition-variable-wait! . y516c) (make-condition-variable . y516b) (mosh-executable-path . y516a) (make-file-options . y5169) (source-info . y5168) (make-compiler-instruction . y5167) (make-instruction . y5166) (set-source-info! . y5165) (bignum? . y5164) (fast-equal? . y5163) (fasl-read . y5162) (fasl-write . y5161) (time-usage . y5160) (os-constant . y515f) (make-parameter . y27c3) (socket-port . y515e) (socket-shutdown . y515d) (socket-close . y515c) (socket-send . y515b) (socket-recv! . y515a) (socket-recv . y5159) (make-server-socket . y5158) (make-client-socket . y5157) (socket-accept . y5156) (socket? . y5155) (string-upcase . y5154) (string-titlecase . y5153) (string-normalize-nfkd . y5152) (string-normalize-nfkc . y5151) (string-normalize-nfd . y5150) (string-normalize-nfc . y514f) (string-foldcase . y514e) (string-downcase . y514d) (string-ci>? . y514c) (string-ci>=? . y514b) (string-ci=? . y514a) (string-ci<? . y5149) (string-ci<=? . y5148) (char-whitespace? . y5147) (char-upper-case? . y5146) (char-title-case? . y5145) (char-numeric? . y5144) (char-lower-case? . y5143) (char-general-category . y5142) (char-upcase . y5141) (char-titlecase . y5140) (char-foldcase . y513f) (char-downcase . y513e) (char-ci>? . y513d) (char-ci>=? . y513c) (char-ci=? . y513b) (char-ci<? . y513a) (char-ci<=? . y5139) (char-alphabetic? . y5138) (make-variable-transformer . y2d27) (identifier? . y2fe5) (generate-temporaries . y2fd1) (free-identifier=? . y2fd3) (syntax->datum . y2fe9) (datum->syntax . y2fe7) (bound-identifier=? . y2fd5) (record-type-descriptor? . y5137) (record-predicate . y5136) (record-mutator . y5135) (record-constructor . y5134) (record-accessor . y5133) (make-record-type-descriptor . y5132) (make-record-constructor-descriptor . y5131) (record? . y5130) (record-type-uid . y512f) (record-type-sealed? . y512e) (record-type-parent . y512d) (record-type-opaque? . y512c) (record-type-name . y512b) (record-type-generative? . y512a) (record-type-field-names . y5129) (record-rtd . y5128) (record-field-mutable? . y5127) (delete-file . y5126) (file-exists? . y5125) (vector-sort! . y5124) (vector-sort . y5123) (list-sort . y5122) (symbol-hash . y5121) (string-ci-hash . y5120) (string-hash . y511f) (equal-hash . y511e) (hashtable-equivalence-function . y511d) (make-hashtable . y511c) (hashtable-hash-function . y511b) (make-eqv-hashtable . y511a) (make-eq-hashtable . y5119) (hashtable? . y5118) (hashtable-update! . y5117) (hashtable-size . y5116) (hashtable-set! . y5115) (hashtable-ref . y5114) (hashtable-mutable? . y5113) (hashtable-keys . y5112) (hashtable-entries . y5111) (hashtable-delete! . y5110) (hashtable-copy . y510f) (hashtable-contains? . y510e) (hashtable-clear! . y510d) (call-with-output-file . y510c) (call-with-input-file . y510b) (write-char . y510a) (write . y5109) (with-output-to-file . y5108) (with-input-from-file . y5107) (read-char . y5106) (read . y5105) (peek-char . y5104) (open-output-file . y5103) (open-input-file . y5102) (newline . y5101) (display . y5100) (close-output-port . y50ff) (close-input-port . y50fe) (eof-object? . y50fd) (eof-object . y50fc) (current-error-port . y50fb) (current-output-port . y50fa) (current-input-port . y50f9) (output-port? . y50f8) (input-port? . y50f7) (utf-8-codec . y50f6) (utf-16-codec . y50f5) (transcoder-error-handling-mode . y50f4) (transcoder-eol-style . y50f3) (transcoder-codec . y50f2) (transcoded-port . y50f1) (textual-port? . y50f0) (string->bytevector . y50ef) (standard-output-port . y50ee) (standard-input-port . y50ed) (standard-error-port . y50ec) (set-port-position! . y50eb) (put-u8 . y50ea) (put-string . y50e9) (put-datum . y50e8) (put-char . y50e7) (put-bytevector . y50e6) (port? . y50e5) (port-transcoder . y50e4) (port-position . y50e3) (port-has-set-port-position!? . y50e2) (port-has-port-position? . y50e1) (port-eof? . y50e0) (output-port-buffer-mode . y50df) (open-string-output-port . y50de) (open-string-input-port . y50dd) (open-file-output-port . y50dc) (open-file-input/output-port . y50db) (open-file-input-port . y50da) (open-bytevector-output-port . y50d9) (open-bytevector-input-port . y50d8) (native-transcoder . y50d7) (native-eol-style . y50d6) (make-transcoder . y50d5) (latin-1-codec . y50d4) (make-i/o-write-error . y4ba5) (make-i/o-read-error . y4b90) (make-i/o-port-error . y4c46) (make-i/o-invalid-position-error . y4bbc) (make-i/o-filename-error . y4bd7) (make-i/o-file-protection-error . y4bf0) (make-i/o-file-is-read-only-error . y4c05) (make-i/o-file-does-not-exist-error . y4c2f) (make-i/o-file-already-exists-error . y4c1a) (make-i/o-error . y4b7b) (make-i/o-encoding-error . y4c76) (make-i/o-decoding-error . y4c5f) (make-custom-textual-output-port . y50d3) (make-custom-textual-input/output-port . y50d2) (make-custom-textual-input-port . y50d1) (make-custom-binary-output-port . y50d0) (make-custom-binary-input/output-port . y50cf) (make-custom-binary-input-port . y50ce) (make-bytevector . y50cd) (lookahead-u8 . y50cc) (lookahead-char . y50cb) (i/o-write-error? . y4ba7) (i/o-read-error? . y4b92) (i/o-port-error? . y4c4a) (i/o-invalid-position-error? . y4bc0) (i/o-filename-error? . y4bdb) (i/o-file-protection-error? . y4bf2) (i/o-file-is-read-only-error? . y4c07) (i/o-file-does-not-exist-error? . y4c31) (i/o-file-already-exists-error? . y4c1c) (i/o-error? . y4b7d) (i/o-error-position . y4bc2) (i/o-error-port . y4c4c) (i/o-error-filename . y4bdd) (i/o-encoding-error? . y4c7a) (i/o-encoding-error-char . y4c7c) (i/o-decoding-error? . y4c61) (get-u8 . y50ca) (get-string-n! . y50c9) (get-string-n . y50c8) (get-string-all . y50c7) (get-line . y50c6) (get-datum . y50c5) (get-char . y50c4) (get-bytevector-some . y50c3) (get-bytevector-n! . y50c2) (get-bytevector-n . y50c1) (get-bytevector-all . y50c0) (flush-output-port . y50bf) (close-port . y50be) (scheme-report-environment . y2fbf) (quotient . y50bd) (null-environment . y2fbd) (remainder . y50bc) (modulo . y50bb) (inexact->exact . y50ba) (force . y50b9) (exact->inexact . y50b8) (make-promise . y50b7) (exit . y50b6) (command-line . y4db1) (string-fill! . y50b5) (string-set! . y50b4) (set-cdr! . y50b3) (set-car! . y50b2) (remove . y50b1) (remv . y50b0) (remp . y50af) (remq . y50ae) (partition . y50ad) (memv . y50ac) (memq . y50ab) (memp . y50aa) (member . y50a9) (exists . y50a8) (for-all . y50a7) (fold-right . y50a6) (fold-left . y50a5) (find . y50a4) (filter . y50a3) (cons* . y50a2) (assv . y50a1) (assq . y50a0) (assp . y509f) (assoc . y509e) (call-with-string-output-port . y509d) (call-with-port . y509c) (call-with-bytevector-output-port . y509b) (bytevector->string . y509a) (buffer-mode? . y5099) (binary-port? . y5098) (with-exception-handler . y5097) (raise-continuable . y5096) (raise . y5095) (eval . y2fc3) (environment . y2fbb) (make-enumeration . y5094) (enum-set=? . y5093) (enum-set-universe . y5092) (enum-set-union . y5091) (enum-set-subset? . y5090) (enum-set-projection . y508f) (enum-set-member? . y508e) (enum-set-intersection . y508d) (enum-set-indexer . y508c) (enum-set-difference . y508b) (enum-set-constructor . y508a) (enum-set-complement . y5089) (enum-set->list . y5088) (who-condition? . y4af1) (warning? . y4a69) (violation? . y4aa8) (undefined-violation? . y4b68) (syntax-violation? . y4b4f) (syntax-violation-subform . y4b53) (syntax-violation-form . y4b51) (syntax-violation . y2fe3) (simple-conditions . y5087) (serious-condition? . y4a7e) (non-continuable-violation? . y4b08) (message-condition? . y4a52) (make-who-condition . y4aed) (make-warning . y4a67) (make-violation . y4aa6) (make-undefined-violation . y4b66) (make-syntax-violation . y4b49) (make-serious-condition . y4a7c) (make-non-continuable-violation . y4b06) (make-message-condition . y4a4e) (make-lexical-violation . y4b30) (make-irritants-condition . y4ad2) (make-implementation-restriction-violation . y4b1b) (make-error . y4a91) (make-assertion-violation . y4abb) (lexical-violation? . y4b32) (irritants-condition? . y4ad6) (implementation-restriction-violation? . y4b1d) (error? . y4a93) (condition-who . y4af3) (condition-predicate . y5086) (condition-message . y4a54) (condition-irritants . y4ad8) (condition-accessor . y5085) (condition . y5084) (assertion-violation? . y4abd) (condition? . y5083) (utf32->string . y5082) (utf16->string . y5081) (utf8->string . y5080) (uint-list->bytevector . y507f) (u8-list->bytevector . y507e) (string->utf8 . y507d) (string->utf32 . y507c) (string->utf16 . y507b) (sint-list->bytevector . y507a) (native-endianness . y5079) (bytevector? . y5078) (bytevector=? . y5077) (bytevector-uint-set! . y5076) (bytevector-uint-ref . y5075) (bytevector-u8-set! . y5074) (bytevector-u8-ref . y5073) (bytevector-u64-set! . y5072) (bytevector-u64-ref . y5071) (bytevector-u64-native-set! . y5070) (bytevector-u64-native-ref . y506f) (bytevector-u32-set! . y506e) (bytevector-u32-ref . y506d) (bytevector-u32-native-set! . y506c) (bytevector-u32-native-ref . y506b) (bytevector-u16-set! . y506a) (bytevector-u16-ref . y5069) (bytevector-u16-native-set! . y5068) (bytevector-u16-native-ref . y5067) (bytevector-sint-set! . y5066) (bytevector-sint-ref . y5065) (bytevector-s8-set! . y5064) (bytevector-s8-ref . y5063) (bytevector-s64-set! . y5062) (bytevector-s64-ref . y5061) (bytevector-s64-native-set! . y5060) (bytevector-s64-native-ref . y505f) (bytevector-s32-set! . y505e) (bytevector-s32-ref . y505d) (bytevector-s32-native-set! . y505c) (bytevector-s32-native-ref . y505b) (bytevector-s16-set! . y505a) (bytevector-s16-ref . y5059) (bytevector-s16-native-set! . y5058) (bytevector-s16-native-ref . y5057) (bytevector-length . y5056) (bytevector-ieee-single-ref . y5055) (bytevector-ieee-single-set! . y5054) (bytevector-ieee-single-native-set! . y5053) (bytevector-ieee-single-native-ref . y5052) (bytevector-ieee-double-set! . y5051) (bytevector-ieee-double-ref . y5050) (bytevector-ieee-double-native-set! . y504f) (bytevector-ieee-double-native-ref . y504e) (bytevector-fill! . y504d) (bytevector-copy! . y504c) (bytevector-copy . y504b) (bytevector->uint-list . y504a) (bytevector->u8-list . y5049) (bytevector->sint-list . y5048) (no-nans-violation? . y4ca6) (no-infinities-violation? . y4c91) (make-no-nans-violation . y4ca4) (make-no-infinities-violation . y4c8f) (real->flonum . y5047) (flzero? . y5046) (fltruncate . y5045) (fltan . y5044) (flsqrt . y5043) (flsin . y5042) (flround . y5041) (flpositive? . y5040) (flonum? . y503f) (flodd? . y503e) (flnumerator . y503d) (flnegative? . y503c) (flnan? . y503b) (flmod0 . y503a) (flmod . y5039) (flmin . y5038) (flmax . y5037) (fllog . y5036) (flinteger? . y5035) (flinfinite? . y5034) (flfloor . y5033) (flfinite? . y5032) (flexpt . y5031) (flexp . y5030) (fleven? . y502f) (fldiv0-and-mod0 . y502e) (fldiv0 . y502d) (fldiv-and-mod . y502c) (fldiv . y502b) (fldenominator . y502a) (flcos . y5029) (flceiling . y5028) (flatan . y5027) (flasin . y5026) (flacos . y5025) (flabs . y5024) (fl>? . y5023) (fl>=? . y5022) (fl=? . y5021) (fl<? . y5020) (fl<=? . y501f) (fl/ . y501e) (fl- . y501d) (fl+ . y501c) (fl* . y501b) (fixnum->flonum . y501a) (fxzero? . y5019) (fxxor . y5018) (fxrotate-bit-field . y5017) (fxreverse-bit-field . y5016) (fxpositive? . y5015) (fxodd? . y5014) (fxnot . y5013) (fxnegative? . y5012) (fxmod0 . y5011) (fxmod . y5010) (fxmin . y500f) (fxmax . y500e) (fxlength . y500d) (fxior . y500c) (fxif . y500b) (fxfirst-bit-set . y500a) (fxeven? . y5009) (fxdiv0-and-mod0 . y5008) (fxdiv0 . y5007) (fxdiv-and-mod . y5006) (fxdiv . y5005) (fxcopy-bit-field . y5004) (fxcopy-bit . y5003) (fxbit-set? . y5002) (fxbit-field . y5001) (fxbit-count . y5000) (fxarithmetic-shift-right . y4fff) (fxarithmetic-shift-left . y4ffe) (fxarithmetic-shift . y4ffd) (fxand . y4ffc) (fx>? . y4ffb) (fx>=? . y4ffa) (fx=? . y4ff9) (fx<? . y4ff8) (fx<=? . y4ff7) (fx-/carry . y4ff6) (fx- . y4ff5) (fx+/carry . y4ff4) (fx+ . y4ff3) (fx*/carry . y4ff2) (fx* . y4ff1) (greatest-fixnum . y4ff0) (least-fixnum . y4fef) (fixnum-width . y4fee) (fixnum? . y4fed) (bitwise-rotate-bit-field . y4fec) (bitwise-reverse-bit-field . y4feb) (bitwise-length . y4fea) (bitwise-if . y4fe9) (bitwise-first-bit-set . y4fe8) (bitwise-copy-bit-field . y4fe7) (bitwise-copy-bit . y4fe6) (bitwise-bit-set? . y4fe5) (bitwise-bit-field . y4fe4) (bitwise-bit-count . y4fe3) (bitwise-xor . y4fe2) (bitwise-ior . y4fe1) (bitwise-and . y4fe0) (bitwise-not . y4fdf) (bitwise-arithmetic-shift-right . y4fde) (bitwise-arithmetic-shift-left . y4fdd) (bitwise-arithmetic-shift . y4fdc) (zero? . y4fdb) (vector? . y4fda) (vector-set! . y4fd9) (vector-ref . y4fd8) (vector-map . y4fd7) (vector-length . y4fd6) (vector-for-each . y4fd5) (vector-fill! . y4fd4) (vector->list . y4fd3) (vector . y4fd2) (values . y4fd1) (truncate . y4fd0) (tan . y4fcf) (symbol? . y4fce) (symbol=? . y4fcd) (symbol->string . y4fcc) (substring . y4fcb) (string? . y4fca) (string>? . y4fc9) (string>=? . y4fc8) (string=? . y4fc7) (string<? . y4fc6) (string<=? . y4fc5) (string-ref . y4fc4) (string-length . y4fc3) (string-for-each . y4fc2) (string-copy . y4fc1) (string-append . y4fc0) (string->symbol . y4fbf) (string->number . y4fbe) (string->list . y4fbd) (string . y4fbc) (sqrt . y4fbb) (sin . y4fba) (round . y4fb9) (reverse . y4fb8) (real? . y4fb7) (real-valued? . y4fb6) (real-part . y4fb5) (rationalize . y4fb4) (rational? . y4fb3) (rational-valued? . y4fb2) (procedure? . y4fb1) (positive? . y4fb0) (pair? . y4faf) (odd? . y4fae) (numerator . y4fad) (number? . y4fac) (number->string . y4fab) (null? . y4faa) (not . y4fa9) (negative? . y4fa8) (nan? . y4fa7) (min . y4fa6) (max . y4fa5) (map . y4fa4) (make-vector . y4fa3) (make-string . y4fa2) (make-rectangular . y4fa1) (make-polar . y4fa0) (magnitude . y4f9f) (log . y4f9e) (list? . y4f9d) (list-tail . y4f9c) (list-ref . y4f9b) (list->vector . y4f9a) (list->string . y4f99) (list . y4f98) (length . y4f97) (lcm . y4f96) (integer? . y4f95) (integer-valued? . y4f94) (integer->char . y4f93) (infinite? . y4f92) (inexact? . y4f91) (inexact . y4f90) (imag-part . y4f8f) (gcd . y4f8e) (for-each . y4f8d) (floor . y4f8c) (finite? . y4f8b) (expt . y4f8a) (exp . y4f89) (exact? . y4f88) (exact-integer-sqrt . y4f87) (exact . y4f86) (even? . y4f85) (error . y4f84) (eqv? . y4f83) (equal? . y4f82) (eq? . y4f81) (dynamic-wind . y4f80) (div0-and-mod0 . y4f7f) (mod0 . y4f7e) (div0 . y4f7d) (div-and-mod . y4f7c) (mod . y4f7b) (div . y4f7a) (denominator . y4f79) (cos . y4f78) (cons . y4f77) (complex? . y4f76) (char? . y4f75) (char>? . y4f74) (char>=? . y4f73) (char=? . y4f72) (char<? . y4f71) (char<=? . y4f70) (char->integer . y4f6f) (ceiling . y4f6e) (call-with-values . y4f6d) (call/cc . y4f6c) (call-with-current-continuation . y4f6b) (cddddr . y4f6a) (cdddar . y4f69) (cddadr . y4f68) (cddaar . y4f67) (cdaddr . y4f66) (cdadar . y4f65) (cdaadr . y4f64) (cdaaar . y4f63) (cadddr . y4f62) (caddar . y4f61) (cadadr . y4f60) (cadaar . y4f5f) (caaddr . y4f5e) (caadar . y4f5d) (caaadr . y4f5c) (caaaar . y4f5b) (cdddr . y4f5a) (cddar . y4f59) (cdadr . y4f58) (cdaar . y4f57) (caddr . y4f56) (cadar . y4f55) (caadr . y4f54) (caaar . y4f53) (cddr . y4f52) (cdar . y4f51) (cadr . y4f50) (caar . y4f4f) (cdr . y4f4e) (car . y4f4d) (boolean? . y4f4c) (boolean=? . y4f4b) (atan . y4f4a) (assertion-violation . y4f49) (assertion-error . y2fdd) (asin . y4f48) (apply . y4f47) (append . y4f46) (angle . y4f45) (acos . y4f44) (abs . y4f43) (/ . y4f42) (* . y4f41) (- . y4f40) (+ . y4f3f) (>= . y4f3e) (> . y4f3d) (= . y4f3c) (<= . y4f3b) (< . y4f3a) (library . y4f39) (&no-nans . y4f38) (&no-infinities . y4f37) (&i/o-encoding . y4f36) (&i/o-decoding . y4f35) (&i/o-port . y4f34) (&i/o-file-does-not-exist . y4f33) (&i/o-file-already-exists . y4f32) (&i/o-file-is-read-only . y4f31) (&i/o-file-protection . y4f30) (&i/o-filename . y4f2f) (&i/o-invalid-position . y4f2e) (&i/o-write . y4f2d) (&i/o-read . y4f2c) (&i/o . y4f2b) (&undefined . y4f2a) (&syntax . y4f29) (&lexical . y4f28) (&implementation-restriction . y4f27) (&non-continuable . y4f26) (&who . y4f25) (&irritants . y4f24) (&assertion . y4f23) (&violation . y4f22) (&error . y4f21) (&serious . y4f20) (&warning . y4f1f) (&message . y4f1e) (&condition . y4f1d) (define-condition-type . y4f1c) (define-enumeration . y4f1b) (define-record-type . y4f1a) (parent-rtd . y4f19) (nongenerative . y4f18) (opaque . y4f17) (sealed . y4f16) (protocol . y4f15) (parent . y4f14) (immutable . y4f13) (mutable . y4f12) (fields . y4f11) (error-handling-mode . y4f10) (file-options . y4f0f) (buffer-mode . y4f0e) (eol-style . y4f0d) (guard . y4f0c) (trace-define . y4f0b) (trace-lambda . y4f0a) (unsyntax-splicing . y4f09) (unsyntax . y4f08) (unquote-splicing . y4f07) (unquote . y4f06) (_ . y4f05) (else . y4f04) (=> . y4f03) (... . y4f02) (assert . y4f01) (endianness . y4f00) (delay . y4eff) (time . y4efe) (do . y4efd) (cond . y4efc) (let* . y4efb) (let . y4efa) (let*-values . y4ef9) (let-values . y4ef8) (identifier-syntax . y4ef7) (with-syntax . y4ef6) (quasisyntax . y4ef5) (quasiquote . y4ef4) (syntax-rules . y4ef3) (include . y4ef2) (define-struct . y4ef1) (record-constructor-descriptor . y4ef0) (record-type-descriptor . y4eef) (case . y4eee) (parameterize . y4eed) (unless . y4eec) (when . y4eeb) (or . y4eea) (and . y4ee9) (if . y4ee8) (letrec* . y4ee7) (letrec . y4ee6) (type-descriptor . y4ee5) (case-lambda . y4ee4) (lambda . y4ee3) (syntax . y4ee2) (syntax-case . y4ee1) (quote . y4ee0) (foreign-call . y4edf) (letrec-syntax . y4ede) (let-syntax . y4edd) (set! . y4edc) (import . y4edb) (begin . y4eda) (module . y4ed9) (define-syntax . y4ed8) (define . y4ed7)) '((y4caa core-prim . &no-nans-rcd) (y4ca8 core-prim . &no-nans-rtd) (y4c95 core-prim . &no-infinities-rcd) (y4c93 core-prim . &no-infinities-rtd) (y4c80 core-prim . &i/o-encoding-rcd) (y4c7e core-prim . &i/o-encoding-rtd) (y4c65 core-prim . &i/o-decoding-rcd) (y4c63 core-prim . &i/o-decoding-rtd) (y4c50 core-prim . &i/o-port-rcd) (y4c4e core-prim . &i/o-port-rtd) (y4c35 core-prim . &i/o-file-does-not-exist-rcd) (y4c33 core-prim . &i/o-file-does-not-exist-rtd) (y4c20 core-prim . &i/o-file-already-exists-rcd) (y4c1e core-prim . &i/o-file-already-exists-rtd) (y4c0b core-prim . &i/o-file-is-read-only-rcd) (y4c09 core-prim . &i/o-file-is-read-only-rtd) (y4bf6 core-prim . &i/o-file-protection-rcd) (y4bf4 core-prim . &i/o-file-protection-rtd) (y4be1 core-prim . &i/o-filename-rcd) (y4bdf core-prim . &i/o-filename-rtd) (y4bc6 core-prim . &i/o-invalid-position-rcd) (y4bc4 core-prim . &i/o-invalid-position-rtd) (y4bab core-prim . &i/o-write-rcd) (y4ba9 core-prim . &i/o-write-rtd) (y4b96 core-prim . &i/o-read-rcd) (y4b94 core-prim . &i/o-read-rtd) (y4b81 core-prim . &i/o-rcd) (y4b7f core-prim . &i/o-rtd) (y4b6c core-prim . &undefined-rcd) (y4b6a core-prim . &undefined-rtd) (y4b57 core-prim . &syntax-rcd) (y4b55 core-prim . &syntax-rtd) (y4b36 core-prim . &lexical-rcd) (y4b34 core-prim . &lexical-rtd) (y4b21 core-prim . &implementation-restriction-rcd) (y4b1f core-prim . &implementation-restriction-rtd) (y4b0c core-prim . &non-continuable-rcd) (y4b0a core-prim . &non-continuable-rtd) (y4af7 core-prim . &who-rcd) (y4af5 core-prim . &who-rtd) (y4adc core-prim . &irritants-rcd) (y4ada core-prim . &irritants-rtd) (y4ac1 core-prim . &assertion-rcd) (y4abf core-prim . &assertion-rtd) (y4aac core-prim . &violation-rcd) (y4aaa core-prim . &violation-rtd) (y4a97 core-prim . &error-rcd) (y4a95 core-prim . &error-rtd) (y4a82 core-prim . &serious-rcd) (y4a80 core-prim . &serious-rtd) (y4a6d core-prim . &warning-rcd) (y4a6b core-prim . &warning-rtd) (y4a58 core-prim . &message-rcd) (y4a56 core-prim . &message-rtd) (y49f9 core-prim . &condition-rcd) (y49f7 core-prim . &condition-rtd) (y2fdf core-prim . syntax-error) (y2efa core-prim . syntax-dispatch) (y51ea core-prim . pretty-print) (y51e9 core-prim . eval-core) (y51e8 core-prim . set-symbol-value!) (y51e7 core-prim . symbol-value) (y51e6 core-prim . gensym) (y51e5 core-prim . void) (y4db7 core-prim . load) (y2fef core-prim . interaction-environment) (y51e4 core-prim . char-ready?) (y51e3 core-prim . regexp?) (y51e2 core-prim . read-line) (y51e1 core-prim . ungensym) (y51e0 core-prim . alist->eq-hash-table) (y51df core-prim . assoc-ref) (y51de core-prim . print) (y51dd core-prim . format) (y51dc core-prim . host-os) (y2990 core-prim . library-path) (y51db core-prim . standard-library-path) (y51da core-prim . file-newer?) (y51d9 core-prim . stat-mtime) (y51d8 core-prim . write-to-file) (y51d7 core-prim . file->list) (y51d6 core-prim . file->string) (y51d5 core-prim . digit->integer) (y51d4 core-prim . call-with-string-input-port) (y51d3 core-prim . call-with-string-io) (y51d2 core-prim . string-split) (y51d1 core-prim . bytevector-for-each) (y51d0 core-prim . string->regexp) (y51cf core-prim . rxmatch) (y51ce core-prim . regexp-replace-all) (y51cd core-prim . hashtable-for-each) (y51cc core-prim . call-process) (y51cb core-prim . local-tz-offset) (y51ca core-prim . microseconds) (y51c9 core-prim . directory-list) (y51c8 core-prim . set-current-directory!) (y51c7 core-prim . expand-path) (y51c6 core-prim . current-directory) (y51c5 core-prim . %spawn) (y51c4 core-prim . %waitpid) (y51c3 core-prim . pointer-ref-c-int64) (y51c2 core-prim . pointer-ref-c-int32) (y51c1 core-prim . pointer-ref-c-int16) (y51c0 core-prim . pointer-ref-c-int8) (y51bf core-prim . pointer-ref-c-uint64) (y51be core-prim . pointer-ref-c-uint32) (y51bd core-prim . pointer-ref-c-uint16) (y51bc core-prim . pointer-ref-c-uint8) (y51bb core-prim . pointer-set-c-int64!) (y51ba core-prim . pointer-set-c-int32!) (y51b9 core-prim . pointer-set-c-int16!) (y51b8 core-prim . pointer-set-c-int8!) (y51b7 core-prim . pointer-set-c-pointer!) (y51b6 core-prim . pointer-set-c-double!) (y51b5 core-prim . pointer-set-c-float!) (y51b4 core-prim . pointer-set-c-long-long!) (y51b3 core-prim . pointer-set-c-long!) (y51b2 core-prim . pointer-set-c-int!) (y51b1 core-prim . pointer-set-c-short!) (y51b0 core-prim . pointer-set-c-char!) (y51af core-prim . pointer-ref-c-pointer) (y51ae core-prim . pointer-ref-c-double) (y51ad core-prim . pointer-ref-c-float) (y51ac core-prim . pointer-ref-c-unsigned-long-long) (y51ab core-prim . pointer-ref-c-signed-long-long) (y51aa core-prim . pointer-ref-c-unsigned-long) (y51a9 core-prim . pointer-ref-c-signed-long) (y51a8 core-prim . pointer-ref-c-unsigned-int) (y51a7 core-prim . pointer-ref-c-signed-int) (y51a6 core-prim . pointer-ref-c-unsigned-short) (y51a5 core-prim . pointer-ref-c-signed-short) (y51a4 core-prim . pointer-ref-c-unsigned-char) (y51a3 core-prim . pointer-ref-c-signed-char) (y51a2 core-prim . pointer->integer) (y51a1 core-prim . integer->pointer) (y51a0 core-prim . pointer?) (y519f core-prim . shared-errno) (y519e core-prim . %ffi-supported?) (y519d core-prim . %ffi-pointer->string) (y519c core-prim . %ffi-call->string-or-zero) (y519b core-prim . %ffi-call->double) (y519a core-prim . %ffi-call->void*) (y5199 core-prim . %ffi-call->void) (y5198 core-prim . %ffi-call->int) (y5197 core-prim . %ffi-lookup) (y5196 core-prim . %ffi-open) (y5195 core-prim . %fork) (y5194 core-prim . %pipe) (y5193 core-prim . p) (y5192 core-prim . open-output-string) (y5191 core-prim . get-output-string) (y5190 core-prim . file-stat-ctime) (y518f core-prim . file-stat-atime) (y518e core-prim . file-stat-mtime) (y518d core-prim . file-size-in-bytes) (y518c core-prim . file-writable?) (y518b core-prim . file-executable?) (y518a core-prim . file-readable?) (y5189 core-prim . file-regular?) (y5188 core-prim . file-symbolic-link?) (y5187 core-prim . file-directory?) (y5186 core-prim . create-symbolic-link) (y5185 core-prim . rename-file) (y5184 core-prim . delete-directory) (y5183 core-prim . create-directory) (y5182 core-prim . get-environment-variables) (y5181 core-prim . get-environment-variable) (y5180 core-prim . get-timeofday) (y517f core-prim . get-command-line) (y517e core-prim . sys-display) (y517d core-prim . whereis) (y517c core-prim . register) (y517b core-prim . vm-join!) (y517a core-prim . vm-set-value!) (y5179 core-prim . vm?) (y5178 core-prim . main-vm?) (y5177 core-prim . vm-eval) (y5176 core-prim . vm-self) (y5175 core-prim . vm-start!) (y5174 core-prim . make-vm) (y5173 core-prim . mutex-try-lock!) (y5172 core-prim . mutex-unlock!) (y5171 core-prim . mutex-lock!) (y5170 core-prim . mutex?) (y516f core-prim . make-mutex) (y516e core-prim . condition-variable-notify-all!) (y516d core-prim . condition-variable-notify!) (y516c core-prim . condition-variable-wait!) (y516b core-prim . make-condition-variable) (y516a core-prim . mosh-executable-path) (y5169 core-prim . make-file-options) (y5168 core-prim . source-info) (y5167 core-prim . make-compiler-instruction) (y5166 core-prim . make-instruction) (y5165 core-prim . set-source-info!) (y5164 core-prim . bignum?) (y5163 core-prim . fast-equal?) (y5162 core-prim . fasl-read) (y5161 core-prim . fasl-write) (y5160 core-prim . time-usage) (y515f core-prim . os-constant) (y27c3 core-prim . make-parameter) (y515e core-prim . socket-port) (y515d core-prim . socket-shutdown) (y515c core-prim . socket-close) (y515b core-prim . socket-send) (y515a core-prim . socket-recv!) (y5159 core-prim . socket-recv) (y5158 core-prim . make-server-socket) (y5157 core-prim . make-client-socket) (y5156 core-prim . socket-accept) (y5155 core-prim . socket?) (y5154 core-prim . string-upcase) (y5153 core-prim . string-titlecase) (y5152 core-prim . string-normalize-nfkd) (y5151 core-prim . string-normalize-nfkc) (y5150 core-prim . string-normalize-nfd) (y514f core-prim . string-normalize-nfc) (y514e core-prim . string-foldcase) (y514d core-prim . string-downcase) (y514c core-prim . string-ci>?) (y514b core-prim . string-ci>=?) (y514a core-prim . string-ci=?) (y5149 core-prim . string-ci<?) (y5148 core-prim . string-ci<=?) (y5147 core-prim . char-whitespace?) (y5146 core-prim . char-upper-case?) (y5145 core-prim . char-title-case?) (y5144 core-prim . char-numeric?) (y5143 core-prim . char-lower-case?) (y5142 core-prim . char-general-category) (y5141 core-prim . char-upcase) (y5140 core-prim . char-titlecase) (y513f core-prim . char-foldcase) (y513e core-prim . char-downcase) (y513d core-prim . char-ci>?) (y513c core-prim . char-ci>=?) (y513b core-prim . char-ci=?) (y513a core-prim . char-ci<?) (y5139 core-prim . char-ci<=?) (y5138 core-prim . char-alphabetic?) (y2d27 core-prim . make-variable-transformer) (y2fe5 core-prim . identifier?) (y2fd1 core-prim . generate-temporaries) (y2fd3 core-prim . free-identifier=?) (y2fe9 core-prim . syntax->datum) (y2fe7 core-prim . datum->syntax) (y2fd5 core-prim . bound-identifier=?) (y5137 core-prim . record-type-descriptor?) (y5136 core-prim . record-predicate) (y5135 core-prim . record-mutator) (y5134 core-prim . record-constructor) (y5133 core-prim . record-accessor) (y5132 core-prim . make-record-type-descriptor) (y5131 core-prim . make-record-constructor-descriptor) (y5130 core-prim . record?) (y512f core-prim . record-type-uid) (y512e core-prim . record-type-sealed?) (y512d core-prim . record-type-parent) (y512c core-prim . record-type-opaque?) (y512b core-prim . record-type-name) (y512a core-prim . record-type-generative?) (y5129 core-prim . record-type-field-names) (y5128 core-prim . record-rtd) (y5127 core-prim . record-field-mutable?) (y5126 core-prim . delete-file) (y5125 core-prim . file-exists?) (y5124 core-prim . vector-sort!) (y5123 core-prim . vector-sort) (y5122 core-prim . list-sort) (y5121 core-prim . symbol-hash) (y5120 core-prim . string-ci-hash) (y511f core-prim . string-hash) (y511e core-prim . equal-hash) (y511d core-prim . hashtable-equivalence-function) (y511c core-prim . make-hashtable) (y511b core-prim . hashtable-hash-function) (y511a core-prim . make-eqv-hashtable) (y5119 core-prim . make-eq-hashtable) (y5118 core-prim . hashtable?) (y5117 core-prim . hashtable-update!) (y5116 core-prim . hashtable-size) (y5115 core-prim . hashtable-set!) (y5114 core-prim . hashtable-ref) (y5113 core-prim . hashtable-mutable?) (y5112 core-prim . hashtable-keys) (y5111 core-prim . hashtable-entries) (y5110 core-prim . hashtable-delete!) (y510f core-prim . hashtable-copy) (y510e core-prim . hashtable-contains?) (y510d core-prim . hashtable-clear!) (y510c core-prim . call-with-output-file) (y510b core-prim . call-with-input-file) (y510a core-prim . write-char) (y5109 core-prim . write) (y5108 core-prim . with-output-to-file) (y5107 core-prim . with-input-from-file) (y5106 core-prim . read-char) (y5105 core-prim . read) (y5104 core-prim . peek-char) (y5103 core-prim . open-output-file) (y5102 core-prim . open-input-file) (y5101 core-prim . newline) (y5100 core-prim . display) (y50ff core-prim . close-output-port) (y50fe core-prim . close-input-port) (y50fd core-prim . eof-object?) (y50fc core-prim . eof-object) (y50fb core-prim . current-error-port) (y50fa core-prim . current-output-port) (y50f9 core-prim . current-input-port) (y50f8 core-prim . output-port?) (y50f7 core-prim . input-port?) (y50f6 core-prim . utf-8-codec) (y50f5 core-prim . utf-16-codec) (y50f4 core-prim . transcoder-error-handling-mode) (y50f3 core-prim . transcoder-eol-style) (y50f2 core-prim . transcoder-codec) (y50f1 core-prim . transcoded-port) (y50f0 core-prim . textual-port?) (y50ef core-prim . string->bytevector) (y50ee core-prim . standard-output-port) (y50ed core-prim . standard-input-port) (y50ec core-prim . standard-error-port) (y50eb core-prim . set-port-position!) (y50ea core-prim . put-u8) (y50e9 core-prim . put-string) (y50e8 core-prim . put-datum) (y50e7 core-prim . put-char) (y50e6 core-prim . put-bytevector) (y50e5 core-prim . port?) (y50e4 core-prim . port-transcoder) (y50e3 core-prim . port-position) (y50e2 core-prim . port-has-set-port-position!?) (y50e1 core-prim . port-has-port-position?) (y50e0 core-prim . port-eof?) (y50df core-prim . output-port-buffer-mode) (y50de core-prim . open-string-output-port) (y50dd core-prim . open-string-input-port) (y50dc core-prim . open-file-output-port) (y50db core-prim . open-file-input/output-port) (y50da core-prim . open-file-input-port) (y50d9 core-prim . open-bytevector-output-port) (y50d8 core-prim . open-bytevector-input-port) (y50d7 core-prim . native-transcoder) (y50d6 core-prim . native-eol-style) (y50d5 core-prim . make-transcoder) (y50d4 core-prim . latin-1-codec) (y4ba5 core-prim . make-i/o-write-error) (y4b90 core-prim . make-i/o-read-error) (y4c46 core-prim . make-i/o-port-error) (y4bbc core-prim . make-i/o-invalid-position-error) (y4bd7 core-prim . make-i/o-filename-error) (y4bf0 core-prim . make-i/o-file-protection-error) (y4c05 core-prim . make-i/o-file-is-read-only-error) (y4c2f core-prim . make-i/o-file-does-not-exist-error) (y4c1a core-prim . make-i/o-file-already-exists-error) (y4b7b core-prim . make-i/o-error) (y4c76 core-prim . make-i/o-encoding-error) (y4c5f core-prim . make-i/o-decoding-error) (y50d3 core-prim . make-custom-textual-output-port) (y50d2 core-prim . make-custom-textual-input/output-port) (y50d1 core-prim . make-custom-textual-input-port) (y50d0 core-prim . make-custom-binary-output-port) (y50cf core-prim . make-custom-binary-input/output-port) (y50ce core-prim . make-custom-binary-input-port) (y50cd core-prim . make-bytevector) (y50cc core-prim . lookahead-u8) (y50cb core-prim . lookahead-char) (y4ba7 core-prim . i/o-write-error?) (y4b92 core-prim . i/o-read-error?) (y4c4a core-prim . i/o-port-error?) (y4bc0 core-prim . i/o-invalid-position-error?) (y4bdb core-prim . i/o-filename-error?) (y4bf2 core-prim . i/o-file-protection-error?) (y4c07 core-prim . i/o-file-is-read-only-error?) (y4c31 core-prim . i/o-file-does-not-exist-error?) (y4c1c core-prim . i/o-file-already-exists-error?) (y4b7d core-prim . i/o-error?) (y4bc2 core-prim . i/o-error-position) (y4c4c core-prim . i/o-error-port) (y4bdd core-prim . i/o-error-filename) (y4c7a core-prim . i/o-encoding-error?) (y4c7c core-prim . i/o-encoding-error-char) (y4c61 core-prim . i/o-decoding-error?) (y50ca core-prim . get-u8) (y50c9 core-prim . get-string-n!) (y50c8 core-prim . get-string-n) (y50c7 core-prim . get-string-all) (y50c6 core-prim . get-line) (y50c5 core-prim . get-datum) (y50c4 core-prim . get-char) (y50c3 core-prim . get-bytevector-some) (y50c2 core-prim . get-bytevector-n!) (y50c1 core-prim . get-bytevector-n) (y50c0 core-prim . get-bytevector-all) (y50bf core-prim . flush-output-port) (y50be core-prim . close-port) (y2fbf core-prim . scheme-report-environment) (y50bd core-prim . quotient) (y2fbd core-prim . null-environment) (y50bc core-prim . remainder) (y50bb core-prim . modulo) (y50ba core-prim . inexact->exact) (y50b9 core-prim . force) (y50b8 core-prim . exact->inexact) (y50b7 core-prim . make-promise) (y50b6 core-prim . exit) (y4db1 core-prim . command-line) (y50b5 core-prim . string-fill!) (y50b4 core-prim . string-set!) (y50b3 core-prim . set-cdr!) (y50b2 core-prim . set-car!) (y50b1 core-prim . remove) (y50b0 core-prim . remv) (y50af core-prim . remp) (y50ae core-prim . remq) (y50ad core-prim . partition) (y50ac core-prim . memv) (y50ab core-prim . memq) (y50aa core-prim . memp) (y50a9 core-prim . member) (y50a8 core-prim . exists) (y50a7 core-prim . for-all) (y50a6 core-prim . fold-right) (y50a5 core-prim . fold-left) (y50a4 core-prim . find) (y50a3 core-prim . filter) (y50a2 core-prim . cons*) (y50a1 core-prim . assv) (y50a0 core-prim . assq) (y509f core-prim . assp) (y509e core-prim . assoc) (y509d core-prim . call-with-string-output-port) (y509c core-prim . call-with-port) (y509b core-prim . call-with-bytevector-output-port) (y509a core-prim . bytevector->string) (y5099 core-prim . buffer-mode?) (y5098 core-prim . binary-port?) (y5097 core-prim . with-exception-handler) (y5096 core-prim . raise-continuable) (y5095 core-prim . raise) (y2fc3 core-prim . eval) (y2fbb core-prim . environment) (y5094 core-prim . make-enumeration) (y5093 core-prim . enum-set=?) (y5092 core-prim . enum-set-universe) (y5091 core-prim . enum-set-union) (y5090 core-prim . enum-set-subset?) (y508f core-prim . enum-set-projection) (y508e core-prim . enum-set-member?) (y508d core-prim . enum-set-intersection) (y508c core-prim . enum-set-indexer) (y508b core-prim . enum-set-difference) (y508a core-prim . enum-set-constructor) (y5089 core-prim . enum-set-complement) (y5088 core-prim . enum-set->list) (y4af1 core-prim . who-condition?) (y4a69 core-prim . warning?) (y4aa8 core-prim . violation?) (y4b68 core-prim . undefined-violation?) (y4b4f core-prim . syntax-violation?) (y4b53 core-prim . syntax-violation-subform) (y4b51 core-prim . syntax-violation-form) (y2fe3 core-prim . syntax-violation) (y5087 core-prim . simple-conditions) (y4a7e core-prim . serious-condition?) (y4b08 core-prim . non-continuable-violation?) (y4a52 core-prim . message-condition?) (y4aed core-prim . make-who-condition) (y4a67 core-prim . make-warning) (y4aa6 core-prim . make-violation) (y4b66 core-prim . make-undefined-violation) (y4b49 core-prim . make-syntax-violation) (y4a7c core-prim . make-serious-condition) (y4b06 core-prim . make-non-continuable-violation) (y4a4e core-prim . make-message-condition) (y4b30 core-prim . make-lexical-violation) (y4ad2 core-prim . make-irritants-condition) (y4b1b core-prim . make-implementation-restriction-violation) (y4a91 core-prim . make-error) (y4abb core-prim . make-assertion-violation) (y4b32 core-prim . lexical-violation?) (y4ad6 core-prim . irritants-condition?) (y4b1d core-prim . implementation-restriction-violation?) (y4a93 core-prim . error?) (y4af3 core-prim . condition-who) (y5086 core-prim . condition-predicate) (y4a54 core-prim . condition-message) (y4ad8 core-prim . condition-irritants) (y5085 core-prim . condition-accessor) (y5084 core-prim . condition) (y4abd core-prim . assertion-violation?) (y5083 core-prim . condition?) (y5082 core-prim . utf32->string) (y5081 core-prim . utf16->string) (y5080 core-prim . utf8->string) (y507f core-prim . uint-list->bytevector) (y507e core-prim . u8-list->bytevector) (y507d core-prim . string->utf8) (y507c core-prim . string->utf32) (y507b core-prim . string->utf16) (y507a core-prim . sint-list->bytevector) (y5079 core-prim . native-endianness) (y5078 core-prim . bytevector?) (y5077 core-prim . bytevector=?) (y5076 core-prim . bytevector-uint-set!) (y5075 core-prim . bytevector-uint-ref) (y5074 core-prim . bytevector-u8-set!) (y5073 core-prim . bytevector-u8-ref) (y5072 core-prim . bytevector-u64-set!) (y5071 core-prim . bytevector-u64-ref) (y5070 core-prim . bytevector-u64-native-set!) (y506f core-prim . bytevector-u64-native-ref) (y506e core-prim . bytevector-u32-set!) (y506d core-prim . bytevector-u32-ref) (y506c core-prim . bytevector-u32-native-set!) (y506b core-prim . bytevector-u32-native-ref) (y506a core-prim . bytevector-u16-set!) (y5069 core-prim . bytevector-u16-ref) (y5068 core-prim . bytevector-u16-native-set!) (y5067 core-prim . bytevector-u16-native-ref) (y5066 core-prim . bytevector-sint-set!) (y5065 core-prim . bytevector-sint-ref) (y5064 core-prim . bytevector-s8-set!) (y5063 core-prim . bytevector-s8-ref) (y5062 core-prim . bytevector-s64-set!) (y5061 core-prim . bytevector-s64-ref) (y5060 core-prim . bytevector-s64-native-set!) (y505f core-prim . bytevector-s64-native-ref) (y505e core-prim . bytevector-s32-set!) (y505d core-prim . bytevector-s32-ref) (y505c core-prim . bytevector-s32-native-set!) (y505b core-prim . bytevector-s32-native-ref) (y505a core-prim . bytevector-s16-set!) (y5059 core-prim . bytevector-s16-ref) (y5058 core-prim . bytevector-s16-native-set!) (y5057 core-prim . bytevector-s16-native-ref) (y5056 core-prim . bytevector-length) (y5055 core-prim . bytevector-ieee-single-ref) (y5054 core-prim . bytevector-ieee-single-set!) (y5053 core-prim . bytevector-ieee-single-native-set!) (y5052 core-prim . bytevector-ieee-single-native-ref) (y5051 core-prim . bytevector-ieee-double-set!) (y5050 core-prim . bytevector-ieee-double-ref) (y504f core-prim . bytevector-ieee-double-native-set!) (y504e core-prim . bytevector-ieee-double-native-ref) (y504d core-prim . bytevector-fill!) (y504c core-prim . bytevector-copy!) (y504b core-prim . bytevector-copy) (y504a core-prim . bytevector->uint-list) (y5049 core-prim . bytevector->u8-list) (y5048 core-prim . bytevector->sint-list) (y4ca6 core-prim . no-nans-violation?) (y4c91 core-prim . no-infinities-violation?) (y4ca4 core-prim . make-no-nans-violation) (y4c8f core-prim . make-no-infinities-violation) (y5047 core-prim . real->flonum) (y5046 core-prim . flzero?) (y5045 core-prim . fltruncate) (y5044 core-prim . fltan) (y5043 core-prim . flsqrt) (y5042 core-prim . flsin) (y5041 core-prim . flround) (y5040 core-prim . flpositive?) (y503f core-prim . flonum?) (y503e core-prim . flodd?) (y503d core-prim . flnumerator) (y503c core-prim . flnegative?) (y503b core-prim . flnan?) (y503a core-prim . flmod0) (y5039 core-prim . flmod) (y5038 core-prim . flmin) (y5037 core-prim . flmax) (y5036 core-prim . fllog) (y5035 core-prim . flinteger?) (y5034 core-prim . flinfinite?) (y5033 core-prim . flfloor) (y5032 core-prim . flfinite?) (y5031 core-prim . flexpt) (y5030 core-prim . flexp) (y502f core-prim . fleven?) (y502e core-prim . fldiv0-and-mod0) (y502d core-prim . fldiv0) (y502c core-prim . fldiv-and-mod) (y502b core-prim . fldiv) (y502a core-prim . fldenominator) (y5029 core-prim . flcos) (y5028 core-prim . flceiling) (y5027 core-prim . flatan) (y5026 core-prim . flasin) (y5025 core-prim . flacos) (y5024 core-prim . flabs) (y5023 core-prim . fl>?) (y5022 core-prim . fl>=?) (y5021 core-prim . fl=?) (y5020 core-prim . fl<?) (y501f core-prim . fl<=?) (y501e core-prim . fl/) (y501d core-prim . fl-) (y501c core-prim . fl+) (y501b core-prim . fl*) (y501a core-prim . fixnum->flonum) (y5019 core-prim . fxzero?) (y5018 core-prim . fxxor) (y5017 core-prim . fxrotate-bit-field) (y5016 core-prim . fxreverse-bit-field) (y5015 core-prim . fxpositive?) (y5014 core-prim . fxodd?) (y5013 core-prim . fxnot) (y5012 core-prim . fxnegative?) (y5011 core-prim . fxmod0) (y5010 core-prim . fxmod) (y500f core-prim . fxmin) (y500e core-prim . fxmax) (y500d core-prim . fxlength) (y500c core-prim . fxior) (y500b core-prim . fxif) (y500a core-prim . fxfirst-bit-set) (y5009 core-prim . fxeven?) (y5008 core-prim . fxdiv0-and-mod0) (y5007 core-prim . fxdiv0) (y5006 core-prim . fxdiv-and-mod) (y5005 core-prim . fxdiv) (y5004 core-prim . fxcopy-bit-field) (y5003 core-prim . fxcopy-bit) (y5002 core-prim . fxbit-set?) (y5001 core-prim . fxbit-field) (y5000 core-prim . fxbit-count) (y4fff core-prim . fxarithmetic-shift-right) (y4ffe core-prim . fxarithmetic-shift-left) (y4ffd core-prim . fxarithmetic-shift) (y4ffc core-prim . fxand) (y4ffb core-prim . fx>?) (y4ffa core-prim . fx>=?) (y4ff9 core-prim . fx=?) (y4ff8 core-prim . fx<?) (y4ff7 core-prim . fx<=?) (y4ff6 core-prim . fx-/carry) (y4ff5 core-prim . fx-) (y4ff4 core-prim . fx+/carry) (y4ff3 core-prim . fx+) (y4ff2 core-prim . fx*/carry) (y4ff1 core-prim . fx*) (y4ff0 core-prim . greatest-fixnum) (y4fef core-prim . least-fixnum) (y4fee core-prim . fixnum-width) (y4fed core-prim . fixnum?) (y4fec core-prim . bitwise-rotate-bit-field) (y4feb core-prim . bitwise-reverse-bit-field) (y4fea core-prim . bitwise-length) (y4fe9 core-prim . bitwise-if) (y4fe8 core-prim . bitwise-first-bit-set) (y4fe7 core-prim . bitwise-copy-bit-field) (y4fe6 core-prim . bitwise-copy-bit) (y4fe5 core-prim . bitwise-bit-set?) (y4fe4 core-prim . bitwise-bit-field) (y4fe3 core-prim . bitwise-bit-count) (y4fe2 core-prim . bitwise-xor) (y4fe1 core-prim . bitwise-ior) (y4fe0 core-prim . bitwise-and) (y4fdf core-prim . bitwise-not) (y4fde core-prim . bitwise-arithmetic-shift-right) (y4fdd core-prim . bitwise-arithmetic-shift-left) (y4fdc core-prim . bitwise-arithmetic-shift) (y4fdb core-prim . zero?) (y4fda core-prim . vector?) (y4fd9 core-prim . vector-set!) (y4fd8 core-prim . vector-ref) (y4fd7 core-prim . vector-map) (y4fd6 core-prim . vector-length) (y4fd5 core-prim . vector-for-each) (y4fd4 core-prim . vector-fill!) (y4fd3 core-prim . vector->list) (y4fd2 core-prim . vector) (y4fd1 core-prim . values) (y4fd0 core-prim . truncate) (y4fcf core-prim . tan) (y4fce core-prim . symbol?) (y4fcd core-prim . symbol=?) (y4fcc core-prim . symbol->string) (y4fcb core-prim . substring) (y4fca core-prim . string?) (y4fc9 core-prim . string>?) (y4fc8 core-prim . string>=?) (y4fc7 core-prim . string=?) (y4fc6 core-prim . string<?) (y4fc5 core-prim . string<=?) (y4fc4 core-prim . string-ref) (y4fc3 core-prim . string-length) (y4fc2 core-prim . string-for-each) (y4fc1 core-prim . string-copy) (y4fc0 core-prim . string-append) (y4fbf core-prim . string->symbol) (y4fbe core-prim . string->number) (y4fbd core-prim . string->list) (y4fbc core-prim . string) (y4fbb core-prim . sqrt) (y4fba core-prim . sin) (y4fb9 core-prim . round) (y4fb8 core-prim . reverse) (y4fb7 core-prim . real?) (y4fb6 core-prim . real-valued?) (y4fb5 core-prim . real-part) (y4fb4 core-prim . rationalize) (y4fb3 core-prim . rational?) (y4fb2 core-prim . rational-valued?) (y4fb1 core-prim . procedure?) (y4fb0 core-prim . positive?) (y4faf core-prim . pair?) (y4fae core-prim . odd?) (y4fad core-prim . numerator) (y4fac core-prim . number?) (y4fab core-prim . number->string) (y4faa core-prim . null?) (y4fa9 core-prim . not) (y4fa8 core-prim . negative?) (y4fa7 core-prim . nan?) (y4fa6 core-prim . min) (y4fa5 core-prim . max) (y4fa4 core-prim . map) (y4fa3 core-prim . make-vector) (y4fa2 core-prim . make-string) (y4fa1 core-prim . make-rectangular) (y4fa0 core-prim . make-polar) (y4f9f core-prim . magnitude) (y4f9e core-prim . log) (y4f9d core-prim . list?) (y4f9c core-prim . list-tail) (y4f9b core-prim . list-ref) (y4f9a core-prim . list->vector) (y4f99 core-prim . list->string) (y4f98 core-prim . list) (y4f97 core-prim . length) (y4f96 core-prim . lcm) (y4f95 core-prim . integer?) (y4f94 core-prim . integer-valued?) (y4f93 core-prim . integer->char) (y4f92 core-prim . infinite?) (y4f91 core-prim . inexact?) (y4f90 core-prim . inexact) (y4f8f core-prim . imag-part) (y4f8e core-prim . gcd) (y4f8d core-prim . for-each) (y4f8c core-prim . floor) (y4f8b core-prim . finite?) (y4f8a core-prim . expt) (y4f89 core-prim . exp) (y4f88 core-prim . exact?) (y4f87 core-prim . exact-integer-sqrt) (y4f86 core-prim . exact) (y4f85 core-prim . even?) (y4f84 core-prim . error) (y4f83 core-prim . eqv?) (y4f82 core-prim . equal?) (y4f81 core-prim . eq?) (y4f80 core-prim . dynamic-wind) (y4f7f core-prim . div0-and-mod0) (y4f7e core-prim . mod0) (y4f7d core-prim . div0) (y4f7c core-prim . div-and-mod) (y4f7b core-prim . mod) (y4f7a core-prim . div) (y4f79 core-prim . denominator) (y4f78 core-prim . cos) (y4f77 core-prim . cons) (y4f76 core-prim . complex?) (y4f75 core-prim . char?) (y4f74 core-prim . char>?) (y4f73 core-prim . char>=?) (y4f72 core-prim . char=?) (y4f71 core-prim . char<?) (y4f70 core-prim . char<=?) (y4f6f core-prim . char->integer) (y4f6e core-prim . ceiling) (y4f6d core-prim . call-with-values) (y4f6c core-prim . call/cc) (y4f6b core-prim . call-with-current-continuation) (y4f6a core-prim . cddddr) (y4f69 core-prim . cdddar) (y4f68 core-prim . cddadr) (y4f67 core-prim . cddaar) (y4f66 core-prim . cdaddr) (y4f65 core-prim . cdadar) (y4f64 core-prim . cdaadr) (y4f63 core-prim . cdaaar) (y4f62 core-prim . cadddr) (y4f61 core-prim . caddar) (y4f60 core-prim . cadadr) (y4f5f core-prim . cadaar) (y4f5e core-prim . caaddr) (y4f5d core-prim . caadar) (y4f5c core-prim . caaadr) (y4f5b core-prim . caaaar) (y4f5a core-prim . cdddr) (y4f59 core-prim . cddar) (y4f58 core-prim . cdadr) (y4f57 core-prim . cdaar) (y4f56 core-prim . caddr) (y4f55 core-prim . cadar) (y4f54 core-prim . caadr) (y4f53 core-prim . caaar) (y4f52 core-prim . cddr) (y4f51 core-prim . cdar) (y4f50 core-prim . cadr) (y4f4f core-prim . caar) (y4f4e core-prim . cdr) (y4f4d core-prim . car) (y4f4c core-prim . boolean?) (y4f4b core-prim . boolean=?) (y4f4a core-prim . atan) (y4f49 core-prim . assertion-violation) (y2fdd core-prim . assertion-error) (y4f48 core-prim . asin) (y4f47 core-prim . apply) (y4f46 core-prim . append) (y4f45 core-prim . angle) (y4f44 core-prim . acos) (y4f43 core-prim . abs) (y4f42 core-prim . /) (y4f41 core-prim . *) (y4f40 core-prim . -) (y4f3f core-prim . +) (y4f3e core-prim . >=) (y4f3d core-prim . >) (y4f3c core-prim . =) (y4f3b core-prim . <=) (y4f3a core-prim . <) (y4f39 core-prim . library) (y4f38 $core-rtd &no-nans-rtd &no-nans-rcd) (y4f37 $core-rtd &no-infinities-rtd &no-infinities-rcd) (y4f36 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (y4f35 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (y4f34 $core-rtd &i/o-port-rtd &i/o-port-rcd) (y4f33 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (y4f32 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (y4f31 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (y4f30 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (y4f2f $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (y4f2e $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (y4f2d $core-rtd &i/o-write-rtd &i/o-write-rcd) (y4f2c $core-rtd &i/o-read-rtd &i/o-read-rcd) (y4f2b $core-rtd &i/o-rtd &i/o-rcd) (y4f2a $core-rtd &undefined-rtd &undefined-rcd) (y4f29 $core-rtd &syntax-rtd &syntax-rcd) (y4f28 $core-rtd &lexical-rtd &lexical-rcd) (y4f27 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (y4f26 $core-rtd &non-continuable-rtd &non-continuable-rcd) (y4f25 $core-rtd &who-rtd &who-rcd) (y4f24 $core-rtd &irritants-rtd &irritants-rcd) (y4f23 $core-rtd &assertion-rtd &assertion-rcd) (y4f22 $core-rtd &violation-rtd &violation-rcd) (y4f21 $core-rtd &error-rtd &error-rcd) (y4f20 $core-rtd &serious-rtd &serious-rcd) (y4f1f $core-rtd &warning-rtd &warning-rcd) (y4f1e $core-rtd &message-rtd &message-rcd) (y4f1d $core-rtd &condition-rtd &condition-rcd) (y4f1c macro . define-condition-type) (y4f1b macro . define-enumeration) (y4f1a macro . define-record-type) (y4f19 macro . parent-rtd) (y4f18 macro . nongenerative) (y4f17 macro . opaque) (y4f16 macro . sealed) (y4f15 macro . protocol) (y4f14 macro . parent) (y4f13 macro . immutable) (y4f12 macro . mutable) (y4f11 macro . fields) (y4f10 macro . error-handling-mode) (y4f0f macro . file-options) (y4f0e macro . buffer-mode) (y4f0d macro . eol-style) (y4f0c macro . guard) (y4f0b macro . trace-define) (y4f0a macro . trace-lambda) (y4f09 macro . unsyntax-splicing) (y4f08 macro . unsyntax) (y4f07 macro . unquote-splicing) (y4f06 macro . unquote) (y4f05 macro . _) (y4f04 macro . else) (y4f03 macro . =>) (y4f02 macro . ...) (y4f01 macro . assert) (y4f00 macro . endianness) (y4eff macro . delay) (y4efe macro . time) (y4efd macro . do) (y4efc macro . cond) (y4efb macro . let*) (y4efa macro . let) (y4ef9 macro . let*-values) (y4ef8 macro . let-values) (y4ef7 macro . identifier-syntax) (y4ef6 macro . with-syntax) (y4ef5 macro . quasisyntax) (y4ef4 macro . quasiquote) (y4ef3 macro . syntax-rules) (y4ef2 macro . include) (y4ef1 macro . define-struct) (y4ef0 core-macro . record-constructor-descriptor) (y4eef core-macro . record-type-descriptor) (y4eee macro . case) (y4eed macro . parameterize) (y4eec macro . unless) (y4eeb macro . when) (y4eea core-macro . or) (y4ee9 core-macro . and) (y4ee8 core-macro . if) (y4ee7 core-macro . letrec*) (y4ee6 core-macro . letrec) (y4ee5 core-macro . type-descriptor) (y4ee4 core-macro . case-lambda) (y4ee3 core-macro . lambda) (y4ee2 core-macro . syntax) (y4ee1 core-macro . syntax-case) (y4ee0 core-macro . quote) (y4edf core-macro . foreign-call) (y4ede letrec-syntax) (y4edd let-syntax) (y4edc set!) (y4edb import) (y4eda begin) (y4ed9 module) (y4ed8 define-syntax) (y4ed7 define)) values values '#f '#f '#f '#f) (y2b12@y29b1@install-library 'y520b '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . y51ea) (eval-core . y51e9) (set-symbol-value! . y51e8) (symbol-value . y51e7) (gensym . y51e6) (void . y51e5)) '() values values '#f '#f '#f '#f) (y2b12@y29b1@install-library 'y520c '(mosh) '() '() '() '() '((set-symbol-value! . y51e8) (symbol-value . y51e7) (regexp? . y51e3) (read-line . y51e2) (ungensym . y51e1) (alist->eq-hash-table . y51e0) (assoc-ref . y51df) (print . y51de) (format . y51dd) (host-os . y51dc) (library-path . y2990) (standard-library-path . y51db) (file-newer? . y51da) (stat-mtime . y51d9) (digit->integer . y51d5) (call-with-string-input-port . y51d4) (call-with-string-io . y51d3) (string-split . y51d2) (bytevector-for-each . y51d1) (string->regexp . y51d0) (rxmatch . y51cf) (regexp-replace-all . y51ce) (hashtable-for-each . y51cd) (set-current-directory! . y51c8) (expand-path . y51c7) (current-directory . y51c6) (p . y5193) (get-timeofday . y5180) (get-command-line . y517f) (sys-display . y517e) (whereis . y517d) (register . y517c) (vm-join! . y517b) (vm-set-value! . y517a) (vm? . y5179) (main-vm? . y5178) (vm-eval . y5177) (vm-self . y5176) (vm-start! . y5175) (make-vm . y5174) (mutex-try-lock! . y5173) (mutex-unlock! . y5172) (mutex-lock! . y5171) (mutex? . y5170) (make-mutex . y516f) (condition-variable-notify-all! . y516e) (condition-variable-notify! . y516d) (condition-variable-wait! . y516c) (make-condition-variable . y516b) (mosh-executable-path . y516a) (make-file-options . y5169) (source-info . y5168) (make-compiler-instruction . y5167) (make-instruction . y5166) (set-source-info! . y5165) (bignum? . y5164) (fast-equal? . y5163) (fasl-read . y5162) (fasl-write . y5161) (time-usage . y5160) (os-constant . y515f) (time . y4efe) (include . y4ef2)) '() values values '#f '#f '#f '#f) (y2b12@y29b1@install-library 'y520d '(system) '() '() '() '() '((write-to-file . y51d8) (file->list . y51d7) (file->string . y51d6) (call-process . y51cc) (local-tz-offset . y51cb) (microseconds . y51ca) (directory-list . y51c9) (expand-path . y51c7) (%spawn . y51c5) (%waitpid . y51c4) (pointer-ref-c-int64 . y51c3) (pointer-ref-c-int32 . y51c2) (pointer-ref-c-int16 . y51c1) (pointer-ref-c-int8 . y51c0) (pointer-ref-c-uint64 . y51bf) (pointer-ref-c-uint32 . y51be) (pointer-ref-c-uint16 . y51bd) (pointer-ref-c-uint8 . y51bc) (pointer-set-c-int64! . y51bb) (pointer-set-c-int32! . y51ba) (pointer-set-c-int16! . y51b9) (pointer-set-c-int8! . y51b8) (pointer-set-c-pointer! . y51b7) (pointer-set-c-double! . y51b6) (pointer-set-c-float! . y51b5) (pointer-set-c-long-long! . y51b4) (pointer-set-c-long! . y51b3) (pointer-set-c-int! . y51b2) (pointer-set-c-short! . y51b1) (pointer-set-c-char! . y51b0) (pointer-ref-c-pointer . y51af) (pointer-ref-c-double . y51ae) (pointer-ref-c-float . y51ad) (pointer-ref-c-unsigned-long-long . y51ac) (pointer-ref-c-signed-long-long . y51ab) (pointer-ref-c-unsigned-long . y51aa) (pointer-ref-c-signed-long . y51a9) (pointer-ref-c-unsigned-int . y51a8) (pointer-ref-c-signed-int . y51a7) (pointer-ref-c-unsigned-short . y51a6) (pointer-ref-c-signed-short . y51a5) (pointer-ref-c-unsigned-char . y51a4) (pointer-ref-c-signed-char . y51a3) (pointer->integer . y51a2) (integer->pointer . y51a1) (pointer? . y51a0) (shared-errno . y519f) (%ffi-supported? . y519e) (%ffi-pointer->string . y519d) (%ffi-call->string-or-zero . y519c) (%ffi-call->double . y519b) (%ffi-call->void* . y519a) (%ffi-call->void . y5199) (%ffi-call->int . y5198) (%ffi-lookup . y5197) (%ffi-open . y5196) (%fork . y5195) (%pipe . y5194) (open-output-string . y5192) (get-output-string . y5191) (file-stat-ctime . y5190) (file-stat-atime . y518f) (file-stat-mtime . y518e) (file-size-in-bytes . y518d) (file-writable? . y518c) (file-executable? . y518b) (file-readable? . y518a) (file-regular? . y5189) (file-symbolic-link? . y5188) (file-directory? . y5187) (create-symbolic-link . y5186) (rename-file . y5185) (delete-directory . y5184) (create-directory . y5183) (get-environment-variables . y5182) (get-environment-variable . y5181) (make-parameter . y27c3) (socket-port . y515e) (socket-shutdown . y515d) (socket-close . y515c) (socket-send . y515b) (socket-recv! . y515a) (socket-recv . y5159) (make-server-socket . y5158) (make-client-socket . y5157) (socket-accept . y5156) (socket? . y5155) (parameterize . y4eed)) '() values values '#f '#f '#f '#f))
((lambda (y4da0@add-library-path! y4da2@parse-and-add-library-path y4da4@for-each-with-index y4da6@rpad y4da8@condition-printer y4daa@record->field-alist y4dac@map-with-index y4dae@repl y4db0@trace-printer y4db2@command-line y4db4@local-library-path y4db6@load/args y4db8@load y4dba@ironscheme-build y4dbc@eval-top-level y4dbe@compile-system-libraries y4dc0@compile y4dc2@compile->closure y4dc4@pre-compile-r6rs-file y4dc6@load-r6rs-top-level y4dc8@load-r6rs-top-level-sexp) (begin (set! y4da0@add-library-path! (lambda (y4deb@path) (y2b02@y2991@library-path (append (y2b02@y2991@library-path) (list y4deb@path))))) (set! y4da2@parse-and-add-library-path (lambda (y4ded@paths y4dee@message) ((lambda (y4df1@t) (if y4df1@t ((lambda (y4df3@paths) (for-each (lambda (y4df5@path) (if (file-exists? y4df5@path) (y4da0@add-library-path! (expand-path y4df5@path)) (format (current-error-port) y4dee@message y4df5@path))) (string-split y4df3@paths '#\:))) y4df1@t) (void))) y4ded@paths))) (set! y4da4@for-each-with-index (lambda (y4df7@proc y4df8@lst) (letrec ((y4dfb@loop (lambda (y4dfd@i y4dfe@lst) (if (null? y4dfe@lst) (if '#f '#f (void)) (begin (y4df7@proc y4dfd@i (car y4dfe@lst)) (y4dfb@loop (+ y4dfd@i '1) (cdr y4dfe@lst))))))) (y4dfb@loop '1 y4df8@lst)))) (set! y4da6@rpad (lambda (y4e01@str y4e02@pad y4e03@n) ((lambda (y4e07@rest) ((letrec ((y4e09@loop (lambda (y4e0b@rest y4e0c@ret) (if (<= y4e0b@rest '0) y4e0c@ret (y4e09@loop (- y4e0b@rest '1) (string-append y4e0c@ret y4e02@pad)))))) y4e09@loop) y4e07@rest (format '"~a" y4e01@str))) (- y4e03@n (string-length (format '"~a" y4e01@str)))))) (set! y4da8@condition-printer (lambda (y4e0f@e y4e10@port) ((lambda (y4e14@max-condition-len) (begin (set! y4e14@max-condition-len (apply max (map (lambda (y4e25@c) (string-length (symbol->string (record-type-name (record-rtd y4e25@c))))) (simple-conditions y4e0f@e)))) (begin (display '" Condition components:\n" y4e10@port) (y4da4@for-each-with-index (lambda (y4e15@i y4e16@x) ((lambda (y4e19@rtd y4e1a@fields-alist) (begin (format y4e10@port '" ~d. ~a" y4e15@i (y4da6@rpad (symbol->string (record-type-name y4e19@rtd)) '" " y4e14@max-condition-len)) (if (null? y4e1a@fields-alist) (newline y4e10@port) (void)) ((letrec ((y4e1d@loop (lambda (y4e1f@first y4e20@fields-alist) (if (null? y4e20@fields-alist) '() ((lambda (y4e23@field) (begin (if (not y4e1f@first) (display (y4da6@rpad '"" '" " (+ '4 y4e14@max-condition-len)) y4e10@port) (void)) (display '"       " y4e10@port) (display (car y4e23@field) y4e10@port) (display '": " y4e10@port) (write (cdr y4e23@field) y4e10@port) (newline y4e10@port) (y4e1d@loop '#f (cdr y4e20@fields-alist)))) (car y4e20@fields-alist)))))) y4e1d@loop) '#t y4e1a@fields-alist))) (record-rtd y4e16@x) (y4daa@record->field-alist y4e16@x))) (simple-conditions y4e0f@e))))) '#f))) (set! y4daa@record->field-alist (lambda (y4e27@r) ((lambda (y4e2a@ref) (begin (set! y4e2a@ref (lambda (y4e35@rtd y4e36@i y4e37@x) ((lambda (y4e3b@val) (if (symbol? y4e3b@val) (ungensym y4e3b@val) y4e3b@val)) ((record-accessor y4e35@rtd y4e36@i) y4e37@x)))) ((letrec ((y4e2b@loop (lambda (y4e2d@ret y4e2e@rtd) (if y4e2e@rtd (y4e2b@loop (append y4e2d@ret (y4dac@map-with-index (lambda (y4e31@i y4e32@field) (cons y4e32@field (y4e2a@ref y4e2e@rtd y4e31@i y4e27@r))) (vector->list (record-type-field-names y4e2e@rtd)))) (record-type-parent y4e2e@rtd)) y4e2d@ret)))) y4e2b@loop) '() (record-rtd y4e27@r)))) '#f))) (set! y4dac@map-with-index (lambda (y4e3d@proc y4e3e@lst) ((letrec ((y4e41@loop (lambda (y4e43@i y4e44@lst y4e45@ret) (if (null? y4e44@lst) (reverse y4e45@ret) (y4e41@loop (+ y4e43@i '1) (cdr y4e44@lst) (cons (y4e3d@proc y4e43@i (car y4e44@lst)) y4e45@ret)))))) y4e41@loop) '0 y4e3e@lst '()))) (set! y4dae@repl (lambda y4e49@x ((lambda (y4e4c@rec) (begin (set! y4e4c@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (y4e4f@y4e4d) (lambda () (with-exception-handler (lambda (y4e51@e) ((call/cc (lambda (y4e53@y4e4e) (y4e4f@y4e4d (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? y4e51@e) (y4da8@condition-printer y4e51@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" y4e51@e))) (y4e53@y4e4e (lambda () (raise-continuable y4e51@e)))))))))) (lambda () ((letrec ((y4e55@loop (lambda (y4e57@line y4e58@accum) ((lambda (y4e5c@parentheses-ok? y4e5e@eval-string-print) (begin (set! y4e5c@parentheses-ok? (lambda (y4e63@text) ((letrec ((y4e65@loop (lambda (y4e67@chars y4e68@p0 y4e69@p1) (if (null? y4e67@chars) (= '0 y4e68@p0 y4e69@p1) ((lambda (y4e6d@t) (if (memv y4e6d@t '(#\()) (y4e65@loop (cdr y4e67@chars) (+ y4e68@p0 '1) y4e69@p1) (if (memv y4e6d@t '(#\))) (y4e65@loop (cdr y4e67@chars) (- y4e68@p0 '1) y4e69@p1) (if (memv y4e6d@t '(#\[)) (y4e65@loop (cdr y4e67@chars) y4e68@p0 (+ y4e69@p1 '1)) (if (memv y4e6d@t '(#\])) (y4e65@loop (cdr y4e67@chars) y4e68@p0 (- y4e69@p1 '1)) (y4e65@loop (cdr y4e67@chars) y4e68@p0 y4e69@p1)))))) (car y4e67@chars)))))) y4e65@loop) (string->list y4e63@text) '0 '0))) (set! y4e5e@eval-string-print (lambda (y4e61@text) (if (not (or (string=? '"\n" y4e61@text) (= '0 (string-length y4e61@text)))) (write (y4dbc@eval-top-level (call-with-port (open-string-input-port y4e61@text) read))) (void)))) (if (eof-object? y4e57@line) (begin (y4e5e@eval-string-print y4e58@accum) (exit)) ((lambda (y4e5f@current) (if (y4e5c@parentheses-ok? y4e5f@current) (y4e5e@eval-string-print y4e5f@current) (y4e55@loop (get-line (current-input-port)) y4e5f@current))) (string-append y4e58@accum y4e57@line))))) '#f '#f)))) y4e55@loop) (get-line (current-input-port)) '""))))))) (newline) (y4e4c@rec)))) (y4e4c@rec))) '#f))) (set! y4db0@trace-printer (y289a@y27c4@make-parameter write)) (set! y4db2@command-line (y289a@y27c4@make-parameter (get-command-line))) (set! y4db4@local-library-path (lambda (y4e6f@filename) (y2b02@y2991@library-path))) (set! y4db6@load/args (lambda (y4e71@filename . y4e73@args) (begin (apply y4dc6@load-r6rs-top-level y4e71@filename 'load y4e73@args) (void)))) (set! y4db8@load (lambda (y4e75@filename) (begin (apply y4dc6@load-r6rs-top-level y4e75@filename 'load (y4db2@command-line)) (void)))) (set! y4dba@ironscheme-build (lambda () (y4db8@load '"ironscheme-buildscript.ss"))) (set! y4dbc@eval-top-level (lambda (y4e77@x) (y49cc@y2fc4@eval y4e77@x (y49e2@y2ff0@interaction-environment)))) (set! y4dbe@compile-system-libraries (lambda () (y4dbc@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! y4dc0@compile (lambda (y4e79@filename) (y4dc6@load-r6rs-top-level y4e79@filename 'compile))) (set! y4dc2@compile->closure (lambda (y4e7b@filename) (y4dc6@load-r6rs-top-level y4e7b@filename 'closure))) (set! y4dc4@pre-compile-r6rs-file (lambda (y4e7d@filename) (y4dc6@load-r6rs-top-level y4e7d@filename 'compile))) (set! y4dc6@load-r6rs-top-level (lambda (y4e7f@filename y4e80@how . y4e83@args) ((lambda (y4e89@y4e86 y4e8a@y4e88) ((lambda (y4e8d@swap) (dynamic-wind y4e8d@swap (lambda () ((lambda (y4e8f@x*) ((lambda (y4e91@t) (if (memv y4e91@t '(closure)) (y49e1@y2fee@pre-compile-r6rs-top-level y4e8f@x*) (if (memv y4e91@t '(load)) ((lambda (y4e97@y4e94 y4e98@y4e96) ((lambda (y4e9b@swap) (dynamic-wind y4e9b@swap (lambda () ((y49e0@y2fec@compile-r6rs-top-level y4e8f@x*))) y4e9b@swap)) (lambda () ((lambda (y4e9d@t) (begin (y4e97@y4e94 y4e98@y4e96) (set! y4e98@y4e96 y4e9d@t))) (y4e97@y4e94))))) y4db2@command-line (cons y4e7f@filename (car y4e83@args))) (if (memv y4e91@t '(compile)) (begin (y49e0@y2fec@compile-r6rs-top-level y4e8f@x*) (y2b06@y2999@serialize-all y2895@y27ba@serialize-library y28ef@y28a8@compile-core-expr)) (if '#f '#f (void)))))) y4e80@how)) (with-input-from-file y4e7f@filename (lambda () ((letrec ((y4e9f@f (lambda () ((lambda (y4ea1@x) (if (eof-object? y4ea1@x) '() (cons y4ea1@x (y4e9f@f)))) (y288d@y27aa@read-annotated))))) y4e9f@f)))))) y4e8d@swap)) (lambda () ((lambda (y4ea3@t) (begin (y4e89@y4e86 y4e8a@y4e88) (set! y4e8a@y4e88 y4ea3@t))) (y4e89@y4e86))))) y2b02@y2991@library-path (y4db4@local-library-path y4e7f@filename)))) (set! y4dc8@load-r6rs-top-level-sexp (lambda (y4ea5@import-spec y4ea6@thunk) ((lambda (y4ead@y4eaa y4eae@y4eac) ((lambda (y4eb1@swap) (dynamic-wind y4eb1@swap (lambda () ((lambda (y4eb7@y4eb4 y4eb8@y4eb6) ((lambda (y4ebb@swap) (dynamic-wind y4ebb@swap (lambda () ((y49e0@y2fec@compile-r6rs-top-level (list (cons 'import y4ea5@import-spec) (list y4ea6@thunk))))) y4ebb@swap)) (lambda () ((lambda (y4ebd@t) (begin (y4eb7@y4eb4 y4eb8@y4eb6) (set! y4eb8@y4eb6 y4ebd@t))) (y4eb7@y4eb4))))) y4db2@command-line '())) y4eb1@swap)) (lambda () ((lambda (y4ebf@t) (begin (y4ead@y4eaa y4eae@y4eac) (set! y4eae@y4eac y4ebf@t))) (y4ead@y4eaa))))) y2b02@y2991@library-path (y4db4@local-library-path '"")))) (begin (set! y4ed5@y4dc8@load-r6rs-top-level-sexp y4dc8@load-r6rs-top-level-sexp) (set! y4ed4@y4dc6@load-r6rs-top-level y4dc6@load-r6rs-top-level) (set! y4ed3@y4dc4@pre-compile-r6rs-file y4dc4@pre-compile-r6rs-file) (set! y4ed2@y4dc2@compile->closure y4dc2@compile->closure) (set! y4ed1@y4dc0@compile y4dc0@compile) (set! y4ed0@y4dbe@compile-system-libraries y4dbe@compile-system-libraries) (set! y4ecf@y4dbc@eval-top-level y4dbc@eval-top-level) (set! y4ece@y4dba@ironscheme-build y4dba@ironscheme-build) (set! y4ecd@y4db8@load y4db8@load) (set! y4ecc@y4db6@load/args y4db6@load/args) (set! y4ecb@y4db4@local-library-path y4db4@local-library-path) (set! y4eca@y4db2@command-line y4db2@command-line) (set! y4ec9@y4db0@trace-printer y4db0@trace-printer) (set! y4ec8@y4dae@repl y4dae@repl) (set! y4ec7@y4dac@map-with-index y4dac@map-with-index) (set! y4ec6@y4daa@record->field-alist y4daa@record->field-alist) (set! y4ec5@y4da8@condition-printer y4da8@condition-printer) (set! y4ec4@y4da6@rpad y4da6@rpad) (set! y4ec3@y4da4@for-each-with-index y4da4@for-each-with-index) (set! y4ec2@y4da2@parse-and-add-library-path y4da2@parse-and-add-library-path) (set! y4ec1@y4da0@add-library-path! y4da0@add-library-path!) (y2b07@y299b@current-precompiled-library-loader y2896@y27bc@load-serialized-library) (set-symbol-value! 'load y4db8@load) (set-symbol-value! 'pre-compile-r6rs-file y4dc4@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs y4dbc@eval-top-level) (set-symbol-value! 'int-env-syms y49c3@y2fb2@interaction-environment-symbols) (set-symbol-value! 'expanded2core y28ee@y28a6@expanded->core) (set-symbol-value! 'trace-printer y4db0@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (y4dc9@c) (condition (y4cfd@y4b07@make-non-continuable-violation) (y4cf3@y4aee@make-who-condition 'raise) (y4cb7@y4a4f@make-message-condition '"returned from non-continuable exception") (y4ce9@y4ad3@make-irritants-condition (list y4dc9@c))))) (y4da2@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (y4da2@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (y4da0@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (y4da0@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (y4da0@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) ((lambda (y4dcb@prefix) (y2b03@y2993@library-extensions (y4dcb@prefix '".mosh" (y2b03@y2993@library-extensions)))) (lambda (y4dcd@ext y4dce@ls) (append (map (lambda (y4dd1@x) (string-append y4dcd@ext y4dd1@x)) y4dce@ls) y4dce@ls))) ((lambda (y4dd3@args y4dd4@port) ((lambda (y4dd8@ref) (begin (set! y4dd8@ref (lambda (y4de3@rtd y4de4@i y4de5@x) ((lambda (y4de9@val) (if (symbol? y4de9@val) (ungensym y4de9@val) y4de9@val)) ((record-accessor y4de3@rtd y4de4@i) y4de5@x)))) (with-exception-handler (lambda (y4dd9@c) (if (condition? y4dd9@c) (y4da8@condition-printer y4dd9@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" y4dd9@c))) (lambda () (if ((call/cc (lambda (y4ddd@y4ddb) (lambda () (with-exception-handler (lambda (y4ddf@c) ((call/cc (lambda (y4de1@y4ddc) (y4ddd@y4ddb (lambda () (if '#t '#f (y4de1@y4ddc (lambda () (raise-continuable y4ddf@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (y4dc8@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? y4dd3@args) (y4dae@repl) (y4dc6@load-r6rs-top-level (car y4dd3@args) 'load (cdr y4dd3@args)))))))) '#f)) (y4db2@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
