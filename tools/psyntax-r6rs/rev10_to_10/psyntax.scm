;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (dO57b@library-file-path->cache-path dO57d@read-annotated dO57f@annotation-stripped dO581@annotation? dO583@annotation-source dO585@annotation-expression dO587@scm->fasl dO589@fasl-save dO58b@fasl-load dO58d@serialize-library dO58f@load-serialized-library dO591@make-record-printer dO593@compile-core dO595@read-library-source-file dO597@make-parameter dO599@mosh-cache-dir dO62f@file-options-spec) (begin (set! dO57b@library-file-path->cache-path (lambda (dO630@x) (call-with-values (lambda () (open-string-output-port)) (lambda (dO636@dO633 dO637@dO635) ((lambda (dO63a@extract dO63b@p) ((lambda (dO63f@display-hex) (begin (set! dO63f@display-hex (lambda (dO648@n) (if (<= '0 dO648@n '9) (display dO648@n dO63b@p) (display (integer->char (+ (char->integer '#\a) (- dO648@n '10))) dO63b@p)))) (begin ((letrec ((dO640@f (lambda (dO642@ls) (if (not (null? dO642@ls)) (begin (display '"_" dO63b@p) (for-each (lambda (dO644@c) (if (or (char<=? '#\a dO644@c '#\z) (char<=? '#\A dO644@c '#\Z) (char<=? '#\0 dO644@c '#\9) (memv dO644@c '(#\- #\. #\_ #\~))) (display dO644@c dO63b@p) (begin (display '"%" dO63b@p) ((lambda (dO646@n) (begin (dO63f@display-hex (quotient dO646@n '16)) (dO63f@display-hex (remainder dO646@n '16)))) (char->integer dO644@c))))) (string->list (car dO642@ls))) (dO640@f (cdr dO642@ls))) (void))))) dO640@f) (string-split dO630@x '#\/)) (dO63a@extract)))) '#f)) dO637@dO635 dO636@dO633))))) (set! dO57d@read-annotated read) (set! dO57f@annotation-stripped (lambda (dO64a@x) (dO585@annotation-expression dO64a@x))) (set! dO581@annotation? (lambda (dO64c@x) (source-info dO64c@x))) (set! dO583@annotation-source (lambda (dO64e@x) (source-info dO64e@x))) (set! dO585@annotation-expression (lambda (dO650@x) (if (pair? dO650@x) (cons (car dO650@x) (cdr dO650@x)) (display '"line:46\n")))) (set! dO587@scm->fasl (lambda (dO652@filename) (string-append (dO599@mosh-cache-dir) '"/" (dO57b@library-file-path->cache-path dO652@filename) '".mosh-fasl"))) (set! dO589@fasl-save (lambda (dO654@filename dO655@obj) (call-with-port (open-file-output-port dO654@filename) (lambda (dO658@port) ((symbol-value 'fasl-write!) dO655@obj dO658@port))))) (set! dO58b@fasl-load (lambda (dO65a@filename) (call-with-port (open-file-input-port dO65a@filename) (symbol-value 'fasl-read!)))) (set! dO58d@serialize-library (lambda (dO65c@filename dO65d@obj) (begin ((lambda (dO660@expanded2core) ((lambda (dO662@compile) ((lambda (dO664@code) ((lambda (dO666@pivot) ((lambda (dO668@visit) ((lambda () (begin (set-car! dO666@pivot dO668@visit) ((lambda (dO66a@pivot) ((lambda (dO66c@invoke) ((lambda () (set-car! dO66a@pivot dO66c@invoke)))) (dO662@compile (dO660@expanded2core (car dO66a@pivot))))) (cdr dO666@pivot)))))) (dO662@compile (dO660@expanded2core (car dO666@pivot))))) (cddddr (cddddr dO664@code)))) dO65d@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (dO66e@fasl-file) (begin (if (file-exists? dO66e@fasl-file) (delete-file dO66e@fasl-file) (void)) ((call/cc (lambda (dO672@dO670) (lambda () (with-exception-handler (lambda (dO674@c) ((call/cc (lambda (dO676@dO671) (dO672@dO670 (lambda () (if '#t (begin (format (current-error-port) '"Warning:serialize-library failed " dO65c@filename) (if (file-exists? dO66e@fasl-file) (delete-file dO66e@fasl-file) (void)) '#f) (dO676@dO671 (lambda () (raise-continuable dO674@c)))))))))) (lambda () (dO589@fasl-save dO66e@fasl-file dO65d@obj))))))))) (dO587@scm->fasl dO65c@filename))))) (set! dO58f@load-serialized-library (lambda (dO678@filename dO679@obj) ((lambda (dO67c@fasl-file) (if (and (file-exists? dO67c@fasl-file) ((symbol-value 'file-newer?) dO67c@fasl-file dO678@filename)) ((lambda (dO67e@expanded2core) ((lambda (dO680@eval-compiled-core) ((lambda (dO682@code) ((lambda (dO684@pivot) ((lambda (dO686@visit) ((lambda (dO688@visit-proc) ((lambda () (begin (set-car! dO684@pivot dO688@visit-proc) ((lambda (dO68a@pivot) ((lambda (dO68c@invoke) ((lambda () (begin (set-car! dO68a@pivot (lambda () (dO680@eval-compiled-core dO68c@invoke))) (apply dO679@obj dO682@code))))) (car dO68a@pivot))) (cdr dO684@pivot)))))) (lambda () (dO680@eval-compiled-core dO686@visit)))) (car dO684@pivot))) (cddddr (cddddr dO682@code)))) (dO58b@fasl-load dO67c@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (dO587@scm->fasl dO678@filename)))) (set! dO591@make-record-printer (lambda (dO68e@name dO68f@printer) (lambda dO692@x (begin (display '"record printer") (for-each display dO692@x))))) (set! dO593@compile-core (lambda dO694@x (apply error 'comile-core '"not implementated" dO694@x))) (set! dO595@read-library-source-file (lambda (dO696@file-name) (with-input-from-file dO696@file-name dO57d@read-annotated))) (set! dO597@make-parameter (lambda dO6a6 ((lambda (dO6a7) (if (= dO6a7 '1) (apply (lambda (dO698@x) (dO597@make-parameter dO698@x (lambda (dO69a@x) dO69a@x))) dO6a6) (if (= dO6a7 '2) (apply (lambda (dO69c@x dO69d@fender) ((lambda (dO6a0@x) (lambda dO6a4 ((lambda (dO6a5) (if (= dO6a5 '0) (apply (lambda () dO6a0@x) dO6a4) (if (= dO6a5 '1) (apply (lambda (dO6a2@v) (set! dO6a0@x (dO69d@fender dO6a2@v))) dO6a4) (error 'apply '"invalid arg count")))) (length dO6a4)))) (dO69d@fender dO69c@x))) dO6a6) (error 'apply '"invalid arg count")))) (length dO6a6)))) (set! dO599@mosh-cache-dir (dO597@make-parameter '#f)) (set! dO62f@file-options-spec (lambda (dO6a8@x) dO6a8@x)) (begin (set! dO6ba@dO62f@file-options-spec dO62f@file-options-spec) (set! dO6b9@dO599@mosh-cache-dir dO599@mosh-cache-dir) (set! dO6b8@dO597@make-parameter dO597@make-parameter) (set! dO6b7@dO595@read-library-source-file dO595@read-library-source-file) (set! dO6b6@dO593@compile-core dO593@compile-core) (set! dO6b5@dO591@make-record-printer dO591@make-record-printer) (set! dO6b4@dO58f@load-serialized-library dO58f@load-serialized-library) (set! dO6b3@dO58d@serialize-library dO58d@serialize-library) (set! dO6b2@dO58b@fasl-load dO58b@fasl-load) (set! dO6b1@dO589@fasl-save dO589@fasl-save) (set! dO6b0@dO587@scm->fasl dO587@scm->fasl) (set! dO6af@dO585@annotation-expression dO585@annotation-expression) (set! dO6ae@dO583@annotation-source dO583@annotation-source) (set! dO6ad@dO581@annotation? dO581@annotation?) (set! dO6ac@dO57f@annotation-stripped dO57f@annotation-stripped) (set! dO6ab@dO57d@read-annotated dO57d@read-annotated) (set! dO6aa@dO57b@library-file-path->cache-path dO57b@library-file-path->cache-path)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (dO6c0@current-primitive-locations dO6c2@mutable? dO6c4@rewriter dO6c6@expanded->core dO6c8@compile-core-expr dO6ca@pretty-print dO6cc@compile-core-expr-to-port) (begin (set! dO6c0@current-primitive-locations (dO6b8@dO597@make-parameter (lambda (dO6cd@x) '#f) (lambda (dO6cf@p) dO6cf@p))) (set! dO6c2@mutable? (lambda (dO6d1@x) (or (pair? dO6d1@x) (vector? dO6d1@x) (hashtable? dO6d1@x)))) (set! dO6c4@rewriter (lambda (dO6d3@quote-hack?) ((lambda (dO6d6@f) (begin (set! dO6d6@f (lambda (dO6d7@x) (if (pair? dO6d7@x) ((lambda (dO6d9@t) (if (memv dO6d9@t '(quote)) (if (and dO6d3@quote-hack? (dO6c2@mutable? (cadr dO6d7@x))) ((lambda (dO6db@g) (begin (set-symbol-value! dO6db@g (cadr dO6d7@x)) dO6db@g)) (gensym)) dO6d7@x) (if (memv dO6d9@t '(case-lambda)) (cons 'case-lambda (map (lambda (dO6dd@x) (cons (car dO6dd@x) (map dO6d6@f (cdr dO6dd@x)))) (cdr dO6d7@x))) (if (memv dO6d9@t '(lambda)) (cons* 'lambda (cadr dO6d7@x) (map dO6d6@f (cddr dO6d7@x))) (if (memv dO6d9@t '(letrec)) ((lambda (dO6df@bindings dO6e0@body*) ((lambda (dO6e3@lhs* dO6e4@rhs*) (cons* 'letrec (map list dO6e3@lhs* (map dO6d6@f dO6e4@rhs*)) (map dO6d6@f dO6e0@body*))) (map car dO6df@bindings) (map cadr dO6df@bindings))) (cadr dO6d7@x) (cddr dO6d7@x)) (if (memv dO6d9@t '(letrec*)) ((lambda (dO6e7@bindings dO6e8@body*) ((lambda (dO6eb@lhs* dO6ec@rhs*) (cons* 'letrec* (map list dO6eb@lhs* (map dO6d6@f dO6ec@rhs*)) (map dO6d6@f dO6e8@body*))) (map car dO6e7@bindings) (map cadr dO6e7@bindings))) (cadr dO6d7@x) (cddr dO6d7@x)) (if (memv dO6d9@t '(library-letrec*)) ((lambda (dO6ef@name dO6f0@x) ((lambda (dO6f3@bindings dO6f4@body*) ((lambda (dO6f7@lhs* dO6f8@lhs** dO6f9@rhs*) (cons* 'library-letrec* dO6ef@name (map list dO6f7@lhs* dO6f8@lhs** (map dO6d6@f dO6f9@rhs*)) (map dO6d6@f dO6f4@body*))) (map car dO6f3@bindings) (map cadr dO6f3@bindings) (map caddr dO6f3@bindings))) (cadr dO6f0@x) (cddr dO6f0@x))) (cadr dO6d7@x) (cdr dO6d7@x)) (if (memv dO6d9@t '(begin)) (cons 'begin (map dO6d6@f (cdr dO6d7@x))) (if (memv dO6d9@t '(set!)) (list 'set! (cadr dO6d7@x) (dO6d6@f (caddr dO6d7@x))) (if (memv dO6d9@t '(primitive)) ((lambda (dO6fd@op) ((lambda (dO6ff@t) (if dO6ff@t ((lambda (dO701@loc) dO701@loc) dO6ff@t) dO6fd@op)) ((dO6c0@current-primitive-locations) dO6fd@op))) (cadr dO6d7@x)) (if (memv dO6d9@t '(define)) dO6d7@x (if (list? dO6d7@x) (map dO6d6@f dO6d7@x) (error 'rewrite '"invalid form ~s ~s" dO6d7@x (list? dO6d7@x)))))))))))))) (car dO6d7@x)) dO6d7@x))) dO6d6@f)) '#f))) (set! dO6c6@expanded->core (lambda (dO703@x) ((dO6c4@rewriter '#f) dO703@x))) (set! dO6c8@compile-core-expr (lambda (dO705@x) ((dO6c4@rewriter '#f) dO705@x))) (set! dO6ca@pretty-print write) (set! dO6cc@compile-core-expr-to-port (lambda (dO707@x dO708@p) (dO6ca@pretty-print ((dO6c4@rewriter '#f) dO707@x) dO708@p))) (begin (set! dO711@dO6cc@compile-core-expr-to-port dO6cc@compile-core-expr-to-port) (set! dO710@dO6ca@pretty-print dO6ca@pretty-print) (set! dO70f@dO6c8@compile-core-expr dO6c8@compile-core-expr) (set! dO70e@dO6c6@expanded->core dO6c6@expanded->core) (set! dO70d@dO6c4@rewriter dO6c4@rewriter) (set! dO70c@dO6c2@mutable? dO6c2@mutable?) (set! dO70b@dO6c0@current-primitive-locations dO6c0@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (dO760@make-collection dO762@current-library-collection dO764@rp dO76e@library? dO770@library-id dO772@set-library-id! dO774@library-name dO776@set-library-name! dO778@library-version dO77a@set-library-version! dO77c@library-imp* dO77e@set-library-imp*! dO780@library-vis* dO782@set-library-vis*! dO784@library-inv* dO786@set-library-inv*! dO788@library-subst dO78a@set-library-subst! dO78c@library-env dO78e@set-library-env! dO790@library-visit-state dO792@set-library-visit-state! dO794@library-invoke-state dO796@set-library-invoke-state! dO798@library-visit-code dO79a@set-library-visit-code! dO79c@library-invoke-code dO79e@set-library-invoke-code! dO7a0@library-visible? dO7a2@set-library-visible?! dO7a4@library-source-file-name dO7a6@set-library-source-file-name! dO7a8@dummy dO7aa@find-dependencies dO7ac@find-library-by dO7ae@library-path dO7b0@library-extensions dO7b2@library-name->file-name dO7b4@file-locator dO7b6@serialize-all dO7b8@current-precompiled-library-loader dO7ba@try-load-from-file dO7bc@library-loader dO7be@current-library-expander dO7c0@external-pending-libraries dO7c2@find-external-library dO7c4@find-library-by-name dO7c6@library-exists? dO7c8@find-library-by-spec/die dO7ca@label->binding-table dO7cc@install-library-record dO7ce@install-library dO7d0@imported-label->binding dO7d2@invoke-library dO7d4@visit-library dO7d6@invoke-library-by-spec dO7d8@installed-libraries dO7da@library-spec) (begin (set! dO760@make-collection (lambda () ((lambda (dO7db@set) ((lambda (dO7de@set-cons) (begin (set! dO7de@set-cons (lambda (dO7e3@x dO7e4@ls) (if (memq dO7e3@x dO7e4@ls) dO7e4@ls (cons dO7e3@x dO7e4@ls)))) (lambda dO7e1 ((lambda (dO7e2) (if (= dO7e2 '0) (apply (lambda () dO7db@set) dO7e1) (if (= dO7e2 '1) (apply (lambda (dO7df@x) (set! dO7db@set (dO7de@set-cons dO7df@x dO7db@set))) dO7e1) (error 'apply '"invalid arg count")))) (length dO7e1))))) '#f)) '()))) (set! dO762@current-library-collection (dO6b8@dO597@make-parameter (dO760@make-collection) (lambda (dO7e7@x) (begin (if (not (procedure? dO7e7@x)) (assertion-violation 'current-library-collection '"not a procedure" dO7e7@x) (void)) dO7e7@x)))) (set! dO764@rp (dO6b5@dO591@make-record-printer 'library (lambda (dO7e9@x dO7ea@p dO7eb@wr) (begin (if (not (dO76e@library? dO7e9@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (dO778@library-version dO7e9@x)) (dO774@library-name dO7e9@x) (append (dO774@library-name dO7e9@x) (list (dO778@library-version dO7e9@x))))) dO7ea@p))))) (set! dO76e@library? (lambda (dO7ef@x) (and (simple-struct? dO7ef@x) (eq? (simple-struct-name dO7ef@x) 'library)))) (set! dO770@library-id (lambda (dO7f1@x) (simple-struct-ref dO7f1@x '0))) (set! dO772@set-library-id! (lambda (dO7f3@x dO7f4@val) (simple-struct-set! dO7f3@x '0 dO7f4@val))) (set! dO774@library-name (lambda (dO7f7@x) (simple-struct-ref dO7f7@x '1))) (set! dO776@set-library-name! (lambda (dO7f9@x dO7fa@val) (simple-struct-set! dO7f9@x '1 dO7fa@val))) (set! dO778@library-version (lambda (dO7fd@x) (simple-struct-ref dO7fd@x '2))) (set! dO77a@set-library-version! (lambda (dO7ff@x dO800@val) (simple-struct-set! dO7ff@x '2 dO800@val))) (set! dO77c@library-imp* (lambda (dO803@x) (simple-struct-ref dO803@x '3))) (set! dO77e@set-library-imp*! (lambda (dO805@x dO806@val) (simple-struct-set! dO805@x '3 dO806@val))) (set! dO780@library-vis* (lambda (dO809@x) (simple-struct-ref dO809@x '4))) (set! dO782@set-library-vis*! (lambda (dO80b@x dO80c@val) (simple-struct-set! dO80b@x '4 dO80c@val))) (set! dO784@library-inv* (lambda (dO80f@x) (simple-struct-ref dO80f@x '5))) (set! dO786@set-library-inv*! (lambda (dO811@x dO812@val) (simple-struct-set! dO811@x '5 dO812@val))) (set! dO788@library-subst (lambda (dO815@x) (simple-struct-ref dO815@x '6))) (set! dO78a@set-library-subst! (lambda (dO817@x dO818@val) (simple-struct-set! dO817@x '6 dO818@val))) (set! dO78c@library-env (lambda (dO81b@x) (simple-struct-ref dO81b@x '7))) (set! dO78e@set-library-env! (lambda (dO81d@x dO81e@val) (simple-struct-set! dO81d@x '7 dO81e@val))) (set! dO790@library-visit-state (lambda (dO821@x) (simple-struct-ref dO821@x '8))) (set! dO792@set-library-visit-state! (lambda (dO823@x dO824@val) (simple-struct-set! dO823@x '8 dO824@val))) (set! dO794@library-invoke-state (lambda (dO827@x) (simple-struct-ref dO827@x '9))) (set! dO796@set-library-invoke-state! (lambda (dO829@x dO82a@val) (simple-struct-set! dO829@x '9 dO82a@val))) (set! dO798@library-visit-code (lambda (dO82d@x) (simple-struct-ref dO82d@x '10))) (set! dO79a@set-library-visit-code! (lambda (dO82f@x dO830@val) (simple-struct-set! dO82f@x '10 dO830@val))) (set! dO79c@library-invoke-code (lambda (dO833@x) (simple-struct-ref dO833@x '11))) (set! dO79e@set-library-invoke-code! (lambda (dO835@x dO836@val) (simple-struct-set! dO835@x '11 dO836@val))) (set! dO7a0@library-visible? (lambda (dO839@x) (simple-struct-ref dO839@x '12))) (set! dO7a2@set-library-visible?! (lambda (dO83b@x dO83c@val) (simple-struct-set! dO83b@x '12 dO83c@val))) (set! dO7a4@library-source-file-name (lambda (dO83f@x) (simple-struct-ref dO83f@x '13))) (set! dO7a6@set-library-source-file-name! (lambda (dO841@x dO842@val) (simple-struct-set! dO841@x '13 dO842@val))) (set! dO7a8@dummy '3) (set! dO7aa@find-dependencies (lambda (dO845@ls) (if (null? dO845@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! dO7ac@find-library-by (lambda (dO847@pred) ((letrec ((dO849@f (lambda (dO84b@ls) (if (null? dO84b@ls) '#f (if (dO847@pred (car dO84b@ls)) (car dO84b@ls) (dO849@f (cdr dO84b@ls))))))) dO849@f) ((dO762@current-library-collection))))) (set! dO7ae@library-path (dO6b8@dO597@make-parameter '(".") (lambda (dO84d@x) (if (and (list? dO84d@x) (for-all string? dO84d@x)) (map (lambda (dO84f@x) dO84f@x) dO84d@x) (assertion-violation 'library-path '"not a list of strings" dO84d@x))))) (set! dO7b0@library-extensions (dO6b8@dO597@make-parameter '(".sls" ".ss" ".scm") (lambda (dO851@x) (if (and (list? dO851@x) (for-all string? dO851@x)) (map (lambda (dO853@x) dO853@x) dO851@x) (assertion-violation 'library-extensions '"not a list of strings" dO851@x))))) (set! dO7b2@library-name->file-name (lambda (dO855@x) (call-with-values (lambda () (open-string-output-port)) (lambda (dO85b@dO858 dO85c@dO85a) ((lambda (dO85f@extract dO860@p) ((lambda (dO864@display-hex) (begin (set! dO864@display-hex (lambda (dO86d@n) (if (<= '0 dO86d@n '9) (display dO86d@n dO860@p) (display (integer->char (+ (char->integer '#\a) (- dO86d@n '10))) dO860@p)))) (begin ((letrec ((dO865@f (lambda (dO867@ls) (if (not (null? dO867@ls)) (begin (display '"/" dO860@p) (for-each (lambda (dO869@c) (if (or (char<=? '#\a dO869@c '#\z) (char<=? '#\A dO869@c '#\Z) (char<=? '#\0 dO869@c '#\9) (memv dO869@c '(#\- #\. #\_ #\~))) (display dO869@c dO860@p) (begin (display '"%" dO860@p) ((lambda (dO86b@n) (begin (dO864@display-hex (quotient dO86b@n '16)) (dO864@display-hex (remainder dO86b@n '16)))) (char->integer dO869@c))))) (string->list (symbol->string (car dO867@ls)))) (dO865@f (cdr dO867@ls))) (void))))) dO865@f) dO855@x) (dO85f@extract)))) '#f)) dO85c@dO85a dO85b@dO858))))) (set! dO7b4@file-locator (dO6b8@dO597@make-parameter (lambda (dO86f@x) ((lambda (dO871@str) ((letrec ((dO873@f (lambda (dO875@ls dO876@exts dO877@failed-list) (if (null? dO875@ls) ((lambda () ((lambda (dO883@dO87e dO885@dO880 dO887@dO87f dO88a@dO87d dO88c@make-library-resolution-condition dO88e@dO87b dO890@dO87c dO892@library-resolution-condition? dO894@condition-library dO896@condition-files) (begin (set! dO883@dO87e (make-record-type-descriptor '&library-resolution dO2b2d@dO2874@&condition-rtd 'dO881 '#f '#f '#((immutable library) (immutable files)))) (set! dO885@dO880 '#f) (set! dO887@dO87f (make-record-constructor-descriptor dO883@dO87e dO2b2e@dO2876@&condition-rcd dO885@dO880)) (set! dO88a@dO87d (record-predicate dO883@dO87e)) (set! dO88c@make-library-resolution-condition (record-constructor dO887@dO87f)) (set! dO88e@dO87b (record-accessor dO883@dO87e '0)) (set! dO890@dO87c (record-accessor dO883@dO87e '1)) (set! dO892@library-resolution-condition? (condition-predicate dO883@dO87e)) (set! dO894@condition-library (condition-accessor dO883@dO87e dO88e@dO87b)) (set! dO896@condition-files (condition-accessor dO883@dO87e dO890@dO87c)) (raise (condition (dO2b4d@dO290e@make-error) (dO2b6f@dO296a@make-who-condition 'expander) (dO2b33@dO28cb@make-message-condition '"cannot locate library in library-path") (dO88c@make-library-resolution-condition dO86f@x (reverse dO877@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? dO876@exts) (dO873@f (cdr dO875@ls) (dO7b0@library-extensions) dO877@failed-list) ((lambda (dO897@name) (if (file-exists? dO897@name) dO897@name (dO873@f dO875@ls (cdr dO876@exts) (cons dO897@name dO877@failed-list)))) (string-append (car dO875@ls) dO871@str (car dO876@exts)))))))) dO873@f) (dO7ae@library-path) (dO7b0@library-extensions) '())) (dO7b2@library-name->file-name dO86f@x))) (lambda (dO899@f) (if (procedure? dO899@f) dO899@f (assertion-violation 'file-locator '"not a procedure" dO899@f))))) (set! dO7b6@serialize-all (lambda (dO89b@serialize dO89c@compile) ((lambda (dO8a0@library-desc) (begin (set! dO8a0@library-desc (lambda (dO8a3@x) (list (dO770@library-id dO8a3@x) (dO774@library-name dO8a3@x)))) (for-each (lambda (dO8a1@x) (if (dO7a4@library-source-file-name dO8a1@x) (dO89b@serialize (dO7a4@library-source-file-name dO8a1@x) (list (dO770@library-id dO8a1@x) (dO774@library-name dO8a1@x) (dO778@library-version dO8a1@x) (map dO8a0@library-desc (dO77c@library-imp* dO8a1@x)) (map dO8a0@library-desc (dO780@library-vis* dO8a1@x)) (map dO8a0@library-desc (dO784@library-inv* dO8a1@x)) (dO788@library-subst dO8a1@x) (dO78c@library-env dO8a1@x) (dO89c@compile (dO798@library-visit-code dO8a1@x)) (dO89c@compile (dO79c@library-invoke-code dO8a1@x)) (dO7a0@library-visible? dO8a1@x))) (void))) ((dO762@current-library-collection))))) '#f))) (set! dO7b8@current-precompiled-library-loader (dO6b8@dO597@make-parameter (lambda (dO8a5@filename dO8a6@sk) '#f))) (set! dO7ba@try-load-from-file (lambda (dO8a9@filename) ((dO7b8@current-precompiled-library-loader) dO8a9@filename (lambda dO8cf ((lambda (dO8d0) (if (= dO8d0 '11) (apply (lambda (dO8ab@id dO8ac@name dO8ad@ver dO8ae@imp* dO8af@vis* dO8b0@inv* dO8b1@exp-subst dO8b2@exp-env dO8b3@visit-proc dO8b4@invoke-proc dO8b5@visible?) ((letrec ((dO8c1@f (lambda (dO8c3@deps) (if (null? dO8c3@deps) (begin (dO7ce@install-library dO8ab@id dO8ac@name dO8ad@ver dO8ae@imp* dO8af@vis* dO8b0@inv* dO8b1@exp-subst dO8b2@exp-env dO8b3@visit-proc dO8b4@invoke-proc '#f '#f dO8b5@visible? '#f) '#t) ((lambda (dO8c5@d) ((lambda (dO8c7@label dO8c8@dname) ((lambda (dO8cb@l) (if (and (dO76e@library? dO8cb@l) (eq? dO8c7@label (dO770@library-id dO8cb@l))) (dO8c1@f (cdr dO8c3@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" dO8ac@name dO8c8@dname dO8a9@filename dO8cb@l dO8c7@label (dO770@library-id dO8cb@l)) '#f))) (dO7c4@find-library-by-name dO8c8@dname))) (car dO8c5@d) (cadr dO8c5@d))) (car dO8c3@deps)))))) dO8c1@f) (append dO8ae@imp* dO8af@vis* dO8b0@inv*))) dO8cf) (if (>= dO8d0 '0) (apply (lambda dO8cd@others '#f) dO8cf) (error 'apply '"invalid arg count")))) (length dO8cf)))))) (set! dO7bc@library-loader (dO6b8@dO597@make-parameter (lambda (dO8d1@x) ((lambda (dO8d3@file-name) (if (not dO8d3@file-name) (assertion-violation '#f '"cannot file library" dO8d1@x) (or (dO7ba@try-load-from-file dO8d3@file-name) ((dO7be@current-library-expander) (dO6b7@dO595@read-library-source-file dO8d3@file-name) dO8d3@file-name (lambda (dO8d5@name) (if (not (fast-equal? dO8d5@name dO8d1@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (dO8db@dO8d8 dO8dc@dO8da) ((lambda (dO8df@e dO8e0@p) (begin (display '"expected to find library " dO8e0@p) (write dO8d1@x dO8e0@p) (display '" in file " dO8e0@p) (display dO8d3@file-name dO8e0@p) (display '", found " dO8e0@p) (write dO8d5@name dO8e0@p) (display '" instead" dO8e0@p) (dO8df@e))) dO8dc@dO8da dO8db@dO8d8)))) (void))))))) ((dO7b4@file-locator) dO8d1@x))) (lambda (dO8e3@f) (if (procedure? dO8e3@f) dO8e3@f (assertion-violation 'library-locator '"not a procedure" dO8e3@f))))) (set! dO7be@current-library-expander (dO6b8@dO597@make-parameter (lambda (dO8e5@x) (assertion-violation 'library-expander '"not initialized")) (lambda (dO8e7@f) (if (procedure? dO8e7@f) dO8e7@f (assertion-violation 'library-expander '"not a procedure" dO8e7@f))))) (set! dO7c0@external-pending-libraries (dO6b8@dO597@make-parameter '())) (set! dO7c2@find-external-library (lambda (dO8e9@name) (begin (if (member dO8e9@name (dO7c0@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" dO8e9@name) (void)) ((lambda (dO8ef@dO8ec dO8f0@dO8ee) ((lambda (dO8f3@swap) (dynamic-wind dO8f3@swap (lambda () (begin ((dO7bc@library-loader) dO8e9@name) (or (dO7ac@find-library-by (lambda (dO8f5@x) (fast-equal? (dO774@library-name dO8f5@x) dO8e9@name))) (assertion-violation '#f '"handling external library did not yield the correct library" dO8e9@name)))) dO8f3@swap)) (lambda () ((lambda (dO8f7@t) (begin (dO8ef@dO8ec dO8f0@dO8ee) (set! dO8f0@dO8ee dO8f7@t))) (dO8ef@dO8ec))))) dO7c0@external-pending-libraries (cons dO8e9@name (dO7c0@external-pending-libraries)))))) (set! dO7c4@find-library-by-name (lambda (dO8f9@name) (or (dO7ac@find-library-by (lambda (dO8fb@x) (fast-equal? (dO774@library-name dO8fb@x) dO8f9@name))) (dO7c2@find-external-library dO8f9@name)))) (set! dO7c6@library-exists? (lambda (dO8fd@name) (and (dO7ac@find-library-by (lambda (dO8ff@x) (fast-equal? (dO774@library-name dO8ff@x) dO8fd@name))) '#t))) (set! dO7c8@find-library-by-spec/die (lambda (dO901@spec) ((lambda (dO903@id) (or (dO7ac@find-library-by (lambda (dO905@x) (eq? dO903@id (dO770@library-id dO905@x)))) (assertion-violation '#f '"cannot find library with required spec" dO901@spec))) (car dO901@spec)))) (set! dO7ca@label->binding-table (make-eq-hashtable)) (set! dO7cc@install-library-record (lambda (dO907@lib) (begin ((lambda (dO909@exp-env) (for-each (lambda (dO90b@x) ((lambda (dO90d@label dO90e@binding) ((lambda (dO911@binding) (begin (if (hashtable-ref dO7ca@label->binding-table dO90d@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" dO90d@label (hashtable-ref dO7ca@label->binding-table dO90d@label '#f) dO911@binding) (exit)) (void)) (hashtable-set! dO7ca@label->binding-table dO90d@label dO911@binding))) ((lambda (dO913@t) (if (memv dO913@t '(global)) (cons 'global (cons dO907@lib (cdr dO90e@binding))) (if (memv dO913@t '(global-macro)) (cons 'global-macro (cons dO907@lib (cdr dO90e@binding))) (if (memv dO913@t '(global-macro!)) (cons 'global-macro! (cons dO907@lib (cdr dO90e@binding))) dO90e@binding)))) (car dO90e@binding)))) (car dO90b@x) (cdr dO90b@x))) dO909@exp-env)) (dO78c@library-env dO907@lib)) ((dO762@current-library-collection) dO907@lib)))) (set! dO7ce@install-library (lambda (dO915@id dO916@name dO917@ver dO918@imp* dO919@vis* dO91a@inv* dO91b@exp-subst dO91c@exp-env dO91d@visit-proc dO91e@invoke-proc dO91f@visit-code dO920@invoke-code dO921@visible? dO922@source-file-name) ((lambda (dO931@imp-lib* dO932@vis-lib* dO933@inv-lib*) (begin (if (not (and (symbol? dO915@id) (list? dO916@name) (list? dO917@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" dO915@id dO916@name dO917@ver) (void)) (if (dO7c6@library-exists? dO916@name) (assertion-violation 'install-library '"library is already installed" dO916@name) (void)) ((lambda (dO937@lib) (dO7cc@install-library-record dO937@lib)) (make-simple-struct 'library '15 (list dO915@id dO916@name dO917@ver dO931@imp-lib* dO932@vis-lib* dO933@inv-lib* dO91b@exp-subst dO91c@exp-env dO91d@visit-proc dO91e@invoke-proc dO91f@visit-code dO920@invoke-code dO921@visible? dO922@source-file-name))))) (map dO7c8@find-library-by-spec/die dO918@imp*) (map dO7c8@find-library-by-spec/die dO919@vis*) (map dO7c8@find-library-by-spec/die dO91a@inv*)))) (set! dO7d0@imported-label->binding (lambda (dO939@lab) (hashtable-ref dO7ca@label->binding-table dO939@lab '#f))) (set! dO7d2@invoke-library (lambda (dO93b@lib) ((lambda (dO93d@invoke) (if (procedure? dO93d@invoke) (begin (dO796@set-library-invoke-state! dO93b@lib (lambda () (assertion-violation 'invoke '"circularity detected" dO93b@lib))) (for-each dO7d2@invoke-library (dO784@library-inv* dO93b@lib)) (dO796@set-library-invoke-state! dO93b@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" dO93b@lib))) (dO93d@invoke) (dO796@set-library-invoke-state! dO93b@lib '#t)) (void))) (dO794@library-invoke-state dO93b@lib)))) (set! dO7d4@visit-library (lambda (dO93f@lib) ((lambda (dO941@visit) (if (procedure? dO941@visit) (begin (dO792@set-library-visit-state! dO93f@lib (lambda () (assertion-violation 'visit '"circularity detected" dO93f@lib))) (for-each dO7d2@invoke-library (dO780@library-vis* dO93f@lib)) (dO792@set-library-visit-state! dO93f@lib (lambda () (assertion-violation 'invoke '"first visit did not return" dO93f@lib))) (dO941@visit) (dO792@set-library-visit-state! dO93f@lib '#t)) (void))) (dO790@library-visit-state dO93f@lib)))) (set! dO7d6@invoke-library-by-spec (lambda (dO943@spec) (dO7d2@invoke-library (dO7c8@find-library-by-spec/die dO943@spec)))) (set! dO7d8@installed-libraries (lambda dO94b ((lambda (dO94c) (if (= dO94c '1) (apply (lambda (dO945@all?) ((letrec ((dO947@f (lambda (dO949@ls) (if (null? dO949@ls) '() (if (or dO945@all? (dO7a0@library-visible? (car dO949@ls))) (cons (car dO949@ls) (dO947@f (cdr dO949@ls))) (dO947@f (cdr dO949@ls))))))) dO947@f) ((dO762@current-library-collection)))) dO94b) (if (= dO94c '0) (apply (lambda () (dO7d8@installed-libraries '#f)) dO94b) (error 'apply '"invalid arg count")))) (length dO94b)))) (set! dO7da@library-spec (lambda (dO94d@x) (begin (if (not (dO76e@library? dO94d@x)) (assertion-violation 'library-spec '"not a library" dO94d@x) (void)) (list (dO770@library-id dO94d@x) (dO774@library-name dO94d@x) (dO778@library-version dO94d@x))))) (begin (set! dO988@dO7da@library-spec dO7da@library-spec) (set! dO987@dO7d8@installed-libraries dO7d8@installed-libraries) (set! dO986@dO7d6@invoke-library-by-spec dO7d6@invoke-library-by-spec) (set! dO985@dO7d4@visit-library dO7d4@visit-library) (set! dO984@dO7d2@invoke-library dO7d2@invoke-library) (set! dO983@dO7d0@imported-label->binding dO7d0@imported-label->binding) (set! dO982@dO7ce@install-library dO7ce@install-library) (set! dO981@dO7cc@install-library-record dO7cc@install-library-record) (set! dO980@dO7ca@label->binding-table dO7ca@label->binding-table) (set! dO97f@dO7c8@find-library-by-spec/die dO7c8@find-library-by-spec/die) (set! dO97e@dO7c6@library-exists? dO7c6@library-exists?) (set! dO97d@dO7c4@find-library-by-name dO7c4@find-library-by-name) (set! dO97c@dO7c2@find-external-library dO7c2@find-external-library) (set! dO97b@dO7c0@external-pending-libraries dO7c0@external-pending-libraries) (set! dO97a@dO7be@current-library-expander dO7be@current-library-expander) (set! dO979@dO7bc@library-loader dO7bc@library-loader) (set! dO978@dO7ba@try-load-from-file dO7ba@try-load-from-file) (set! dO977@dO7b8@current-precompiled-library-loader dO7b8@current-precompiled-library-loader) (set! dO976@dO7b6@serialize-all dO7b6@serialize-all) (set! dO975@dO7b4@file-locator dO7b4@file-locator) (set! dO974@dO7b2@library-name->file-name dO7b2@library-name->file-name) (set! dO973@dO7b0@library-extensions dO7b0@library-extensions) (set! dO972@dO7ae@library-path dO7ae@library-path) (set! dO971@dO7ac@find-library-by dO7ac@find-library-by) (set! dO970@dO7aa@find-dependencies dO7aa@find-dependencies) (set! dO96f@dO7a8@dummy dO7a8@dummy) (set! dO96e@dO7a6@set-library-source-file-name! dO7a6@set-library-source-file-name!) (set! dO96d@dO7a4@library-source-file-name dO7a4@library-source-file-name) (set! dO96c@dO7a2@set-library-visible?! dO7a2@set-library-visible?!) (set! dO96b@dO7a0@library-visible? dO7a0@library-visible?) (set! dO96a@dO79e@set-library-invoke-code! dO79e@set-library-invoke-code!) (set! dO969@dO79c@library-invoke-code dO79c@library-invoke-code) (set! dO968@dO79a@set-library-visit-code! dO79a@set-library-visit-code!) (set! dO967@dO798@library-visit-code dO798@library-visit-code) (set! dO966@dO796@set-library-invoke-state! dO796@set-library-invoke-state!) (set! dO965@dO794@library-invoke-state dO794@library-invoke-state) (set! dO964@dO792@set-library-visit-state! dO792@set-library-visit-state!) (set! dO963@dO790@library-visit-state dO790@library-visit-state) (set! dO962@dO78e@set-library-env! dO78e@set-library-env!) (set! dO961@dO78c@library-env dO78c@library-env) (set! dO960@dO78a@set-library-subst! dO78a@set-library-subst!) (set! dO95f@dO788@library-subst dO788@library-subst) (set! dO95e@dO786@set-library-inv*! dO786@set-library-inv*!) (set! dO95d@dO784@library-inv* dO784@library-inv*) (set! dO95c@dO782@set-library-vis*! dO782@set-library-vis*!) (set! dO95b@dO780@library-vis* dO780@library-vis*) (set! dO95a@dO77e@set-library-imp*! dO77e@set-library-imp*!) (set! dO959@dO77c@library-imp* dO77c@library-imp*) (set! dO958@dO77a@set-library-version! dO77a@set-library-version!) (set! dO957@dO778@library-version dO778@library-version) (set! dO956@dO776@set-library-name! dO776@set-library-name!) (set! dO955@dO774@library-name dO774@library-name) (set! dO954@dO772@set-library-id! dO772@set-library-id!) (set! dO953@dO770@library-id dO770@library-id) (set! dO952@dO76e@library? dO76e@library?) (set! dO951@dO764@rp dO764@rp) (set! dO950@dO762@current-library-collection dO762@current-library-collection) (set! dO94f@dO760@make-collection dO760@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (dO98c@build-global-define dO9fd@build-lambda dO9ff@build-case-lambda dOa01@build-let dOa2f@build-sequence dOa31@build-void dOa33@build-letrec dOa35@build-letrec* dOa37@build-library-letrec* dOa39@build-receive) (begin (set! dO98c@build-global-define (lambda (dOa3a@x) (dOa31@build-void))) (set! dO9fd@build-lambda (lambda (dOa3c@ae dOa3d@vars dOa3e@exp) (list 'lambda dOa3d@vars dOa3e@exp))) (set! dO9ff@build-case-lambda (lambda (dOa42@ae dOa43@vars* dOa44@exp*) ((lambda (dOa49@build-error dOa4b@build-pred dOa4d@build-apply dOa4f@expand-case-lambda) (begin (set! dOa49@build-error (lambda (dOa80@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! dOa4b@build-pred (lambda (dOa68@ae dOa69@n dOa6a@vars) (call-with-values (lambda () ((letrec ((dOa72@f (lambda (dOa74@vars dOa75@count) (if (pair? dOa74@vars) (dOa72@f (cdr dOa74@vars) (+ dOa75@count '1)) (if (null? dOa74@vars) (values dOa75@count '=) (values dOa75@count '>=)))))) dOa72@f) dOa6a@vars '0)) (lambda (dOa78@dOa6f dOa79@dOa71) ((lambda (dOa7c@pred dOa7d@count) (list (list 'primitive dOa7c@pred) dOa69@n (list 'quote dOa7d@count))) dOa79@dOa71 dOa78@dOa6f))))) (set! dOa4d@build-apply (lambda (dOa60@ae dOa61@g dOa62@vars dOa63@exp) (list '(primitive apply) (dO9fd@build-lambda dOa60@ae dOa62@vars dOa63@exp) dOa61@g))) (set! dOa4f@expand-case-lambda (lambda (dOa50@ae dOa51@vars dOa52@exp*) ((lambda (dOa56@g dOa57@n) (list 'lambda dOa56@g (dOa01@build-let dOa50@ae (list dOa57@n) (list (list '(primitive length) dOa56@g)) ((letrec ((dOa5a@f (lambda (dOa5c@vars* dOa5d@exp*) (if (null? dOa5c@vars*) (dOa49@build-error dOa50@ae) (list 'if (dOa4b@build-pred dOa50@ae dOa57@n (car dOa5c@vars*)) (dOa4d@build-apply dOa50@ae dOa56@g (car dOa5c@vars*) (car dOa5d@exp*)) (dOa5a@f (cdr dOa5c@vars*) (cdr dOa5d@exp*))))))) dOa5a@f) dOa43@vars* dOa52@exp*)))) (gensym) (gensym)))) (if (= (length dOa44@exp*) '1) (dO9fd@build-lambda dOa42@ae (car dOa43@vars*) (car dOa44@exp*)) (dOa4f@expand-case-lambda dOa42@ae dOa43@vars* dOa44@exp*)))) '#f '#f '#f '#f))) (set! dOa01@build-let (lambda (dOa82@ae dOa83@lhs* dOa84@rhs* dOa85@body) (cons (dO9fd@build-lambda dOa82@ae dOa83@lhs* dOa85@body) dOa84@rhs*))) (set! dOa2f@build-sequence (lambda (dOa8a@ae dOa8b@exps) ((letrec ((dOa8e@loop (lambda (dOa90@exps) (if (null? (cdr dOa90@exps)) (car dOa90@exps) (if (equal? (car dOa90@exps) (dOa31@build-void)) (dOa8e@loop (cdr dOa90@exps)) (cons 'begin dOa90@exps)))))) dOa8e@loop) dOa8b@exps))) (set! dOa31@build-void (lambda () '((primitive void)))) (set! dOa33@build-letrec (lambda (dOa92@ae dOa93@vars dOa94@val-exps dOa95@body-exp) (if (null? dOa93@vars) dOa95@body-exp (list 'letrec (map list dOa93@vars dOa94@val-exps) dOa95@body-exp)))) (set! dOa35@build-letrec* (lambda (dOa9a@ae dOa9b@vars dOa9c@val-exps dOa9d@body-exp) (if (null? dOa9b@vars) dOa9d@body-exp (dOa01@build-let dOa9a@ae dOa9b@vars (map (lambda (dOaa2@x) (list 'quote '#f)) dOa9b@vars) (dOa2f@build-sequence dOa9a@ae (append (map (lambda (dOaa4@lhs dOaa5@rhs) (list 'set! dOaa4@lhs dOaa5@rhs)) dOa9b@vars dOa9c@val-exps) (list dOa9d@body-exp))))))) (set! dOa37@build-library-letrec* (lambda (dOaa8@ae dOaa9@name dOaaa@vars dOaab@locs dOaac@val-exps dOaad@body-exp) (list 'library-letrec* dOaa9@name (map list dOaaa@vars dOaab@locs dOaac@val-exps) dOaad@body-exp))) (set! dOa39@build-receive (lambda (dOab4@ae dOab5@vars dOab6@producer dOab7@body*) (begin (display '"************** in ") (cons 'receive (cons dOab5@vars (cons dOab6@producer dOab7@body*)))))) (begin (set! dOac5@dOa39@build-receive dOa39@build-receive) (set! dOac4@dOa37@build-library-letrec* dOa37@build-library-letrec*) (set! dOac3@dOa35@build-letrec* dOa35@build-letrec*) (set! dOac2@dOa33@build-letrec dOa33@build-letrec) (set! dOac1@dOa31@build-void dOa31@build-void) (set! dOac0@dOa2f@build-sequence dOa2f@build-sequence) (set! dOabf@dOa01@build-let dOa01@build-let) (set! dOabe@dO9ff@build-case-lambda dO9ff@build-case-lambda) (set! dOabd@dO9fd@build-lambda dO9fd@build-lambda) (set! dOabc@dO98c@build-global-define dO98c@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (dOad4@file-options-macro dOad6@set-cons dOad8@set-union dOadd@top-mark* dOadf@top-marked? dOae1@gen-lexical dOae3@gen-global dOae5@gen-label dOae7@gen-top-level-label dOae9@gen-define-label+loc dOaeb@gen-define-label dOaf5@rib? dOaf7@rib-sym* dOaf9@set-rib-sym*! dOafb@rib-mark** dOafd@set-rib-mark**! dOaff@rib-label* dOb01@set-rib-label*! dOb03@rib-sealed/freq dOb05@set-rib-sealed/freq! dOb07@rib-cache dOb09@set-rib-cache! dOb0b@dummy dOb0d@make-empty-rib dOb0f@extend-rib! dOb11@extend-rib/nc! dOb13@make-rib-map dOb15@seal-rib! dOb17@unseal-rib! dOb19@make-full-rib dOb1b@rp dOb25@stx? dOb27@stx-expr dOb29@set-stx-expr! dOb2b@stx-mark* dOb2d@set-stx-mark*! dOb2f@stx-subst* dOb31@set-stx-subst*! dOb33@stx-ae* dOb35@set-stx-ae*! dOb37@dummy dOb39@datum->stx dOb3b@gen-mark dOb3d@anti-mark dOb3f@anti-mark? dOb41@mkstx dOb43@add-mark dOb45@add-subst dOb47@syntax-kind? dOb49@syntax-vector->list dOb4b@syntax-pair? dOb4d@syntax-vector? dOb4f@syntax-null? dOb51@syntax-list? dOb53@syntax-car dOb55@syntax-cdr dOb57@syntax->list dOb59@id? dOb5b@id->sym dOb5d@bound-id=? dOb5f@free-id=? dOb61@valid-bound-ids? dOb63@distinct-bound-ids? dOb65@bound-id-member? dOb67@self-evaluating? dOb69@strip-annotations dOb6b@strip dOb6d@stx->datum dOb6f@id->label dOb71@label->binding dOb73@make-binding dOb75@binding-type dOb77@binding-value dOb79@raise-unbound-error dOb7b@syntax-type dOb89@sanitize-binding dOb8b@make-variable-transformer dOb8d@variable-transformer? dOb8f@variable-transformer-procedure dOb91@make-eval-transformer dOce2@parse-define dOce4@parse-define-syntax dOce6@scheme-stx-hashtable dOce8@scheme-stx dOcea@lexical-var dOcec@lexical-mutable? dOcee@set-lexical-mutable! dOcf0@add-lexical dOcf2@add-lexicals dOcf4@letrec-helper dOcf6@letrec-transformer dOcf8@letrec*-transformer dOcfa@fluid-let-syntax-transformer dOcfc@type-descriptor-transformer dOcfe@record-type-descriptor-transformer dOd00@record-constructor-descriptor-transformer dOd02@when-macro dOd04@unless-macro dOd06@if-transformer dOd08@and-transformer dOd0a@or-transformer dOd0c@case-macro dOd0e@quote-transformer dOd10@case-lambda-transformer dOd12@lambda-transformer dOd14@bless dOd16@with-syntax-macro dOd18@invalid-fmls-error dOd1a@let-macro dOd1c@let-values-macro dOd1e@let*-values-macro dOd20@trace-lambda-macro dOd22@trace-define-macro dOd24@trace-define-syntax-macro dOd26@trace-let/rec-syntax dOd28@trace-let-syntax-macro dOd2a@trace-letrec-syntax-macro dOd2c@guard-macro dOd2e@define-enumeration-macro dOd30@time-macro dOd32@delay-macro dOd34@assert-macro dOd36@endianness-macro dOd38@identifier-syntax-macro dOd3a@do-macro dOd3c@let*-macro dOd3e@or-macro dOd40@and-macro dOd42@cond-macro dOd44@do-include dOd46@include-macro dOd48@include-into-macro dOd4a@syntax-rules-macro dOd4c@quasiquote-macro dOd4e@quasisyntax-macro dOd50@define-struct-macro dOd52@define-record-type-macro dOd54@define-condition-type-macro dOd56@incorrect-usage-macro dOd58@parameterize-macro dOd5a@foreign-call-transformer dOd5c@convert-pattern dOd5e@syntax-dispatch dOd60@ellipsis? dOd62@underscore? dOd64@verify-literals dOd66@syntax-case-transformer dOd68@ellipsis-map dOd6a@syntax-transformer dOd6c@core-macro-transformer dOd6e@symbol-macro dOd70@macro-transformer dOd72@local-macro-transformer dOd74@do-macro-call dOd76@chi-macro dOd78@chi-local-macro dOd7a@chi-global-macro dOd7c@chi-expr* dOd7e@chi-application dOd80@chi-expr dOd82@chi-set! dOd84@verify-formals dOd86@chi-lambda-clause dOd88@chi-lambda-clause* dOd8a@chi-defun dOd8c@chi-rhs dOd8e@expand-interaction-rhs*/init* dOd90@chi-rhs* dOd92@find-bound=? dOd94@find-dups dOd96@chi-internal dOd98@parse-module dOda2@module-interface? dOda4@module-interface-first-mark dOda6@set-module-interface-first-mark! dOda8@module-interface-exp-id-vec dOdaa@set-module-interface-exp-id-vec! dOdac@module-interface-exp-lab-vec dOdae@set-module-interface-exp-lab-vec! dOdb0@dummy dOdb2@module-interface-exp-id* dOdb4@chi-internal-module dOdb6@chi-body* dOdb8@expand-transformer dOdba@parse-exports dOdbc@parse-library-name dOdbe@parse-library dOdc0@parse-import-spec* dOdc2@make-top-rib dOdc4@make-collector dOdc6@inv-collector dOdc8@vis-collector dOdca@imp-collector dOdcc@chi-library-internal dOdce@chi-interaction-expr dOdd0@library-body-expander dOdd2@core-library-expander dOdd4@parse-top-level-program dOdd6@top-level-expander dOdd8@rp dOde2@env? dOde4@env-names dOde6@set-env-names! dOde8@env-labels dOdea@set-env-labels! dOdec@env-itc dOdee@set-env-itc! dOdf0@dummy dOdf2@rp dOdfc@interaction-env? dOdfe@interaction-env-rib dOe00@set-interaction-env-rib! dOe02@interaction-env-r dOe04@set-interaction-env-r! dOe06@interaction-env-locs dOe08@set-interaction-env-locs! dOe0a@dummy dOe0c@interaction-environment-symbols dOe0e@environment-bindings dOe10@parse-binding dOe12@environment? dOe14@environment-symbols dOe16@environment dOe18@null-environment dOe1a@scheme-report-environment dOe1c@expand dOe1e@eval dOe20@library-expander dOe22@boot-library-expand dOe24@rev-map-append dOe26@build-exports dOe28@make-export-subst dOe2a@make-export-env/macros dOe2c@generate-temporaries dOe2e@free-identifier=? dOe30@bound-identifier=? dOe32@make-source-condition dOe34@extract-position-condition dOe36@expression-position dOe38@assertion-error dOe3a@syntax-error dOe3c@syntax-violation* dOe3e@syntax-violation dOe40@identifier? dOe42@datum->syntax dOe44@syntax->datum dOe46@compile-r6rs-top-level dOe48@pre-compile-r6rs-top-level dOe4a@interaction-environment dOe4c@top-level-context) (begin (set! dOad4@file-options-macro (lambda (dOe4d@x) ((lambda (dOe50@valid-option?) (begin (set! dOe50@valid-option? (lambda (dOe59@x) (and (dOb59@id? dOe59@x) (memq (dOb5b@id->sym dOe59@x) '(no-fail no-create no-truncate))))) ((lambda (dOe51@t) ((lambda (dOe53@ls/false) (if (and dOe53@ls/false (apply (lambda (dOe55@opt*) (for-all dOe50@valid-option? dOe55@opt*)) dOe53@ls/false)) (apply (lambda (dOe57@opt*) (dOd14@bless (list 'make-file-options (list 'quote dOe57@opt*)))) dOe53@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dOe51@t))) (dOd5e@syntax-dispatch dOe51@t '(_ . each-any)))) dOe4d@x))) '#f))) (set! dOad6@set-cons (lambda (dOe5b@x dOe5c@ls) (if (memq dOe5b@x dOe5c@ls) dOe5c@ls (cons dOe5b@x dOe5c@ls)))) (set! dOad8@set-union (lambda (dOe5f@ls1 dOe60@ls2) (if (null? dOe5f@ls1) dOe60@ls2 (if (memq (car dOe5f@ls1) dOe60@ls2) (dOad8@set-union (cdr dOe5f@ls1) dOe60@ls2) (cons (car dOe5f@ls1) (dOad8@set-union (cdr dOe5f@ls1) dOe60@ls2)))))) (set! dOadd@top-mark* '(top)) (set! dOadf@top-marked? (lambda (dOe63@m*) (memq 'top dOe63@m*))) (set! dOae1@gen-lexical (lambda (dOe65@sym) (if (symbol? dOe65@sym) (gensym dOe65@sym) (if (dOb25@stx? dOe65@sym) (dOae1@gen-lexical (dOb5b@id->sym dOe65@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" dOe65@sym))))) (set! dOae3@gen-global (lambda (dOe67@x) (dOae1@gen-lexical dOe67@x))) (set! dOae5@gen-label (lambda (dOe69@_) (gensym))) (set! dOae7@gen-top-level-label (lambda (dOe6b@id dOe6c@rib) ((lambda (dOe70@find) (begin (set! dOe70@find (lambda (dOe7b@sym dOe7c@mark* dOe7d@sym* dOe7e@mark** dOe7f@label*) (and (pair? dOe7d@sym*) (if (and (eq? dOe7b@sym (car dOe7d@sym*)) (same-marks? dOe7c@mark* (car dOe7e@mark**))) (car dOe7f@label*) (dOe70@find dOe7b@sym dOe7c@mark* (cdr dOe7d@sym*) (cdr dOe7e@mark**) (cdr dOe7f@label*)))))) ((lambda (dOe71@sym dOe72@mark*) ((lambda (dOe75@sym*) ((lambda (dOe77@t) (if dOe77@t ((lambda (dOe79@label) (if (dO983@dO7d0@imported-label->binding dOe79@label) (gensym) dOe79@label)) dOe77@t) (gensym))) (and (memq dOe71@sym (dOaf7@rib-sym* dOe6c@rib)) (dOe70@find dOe71@sym dOe72@mark* dOe75@sym* (dOafb@rib-mark** dOe6c@rib) (dOaff@rib-label* dOe6c@rib))))) (dOaf7@rib-sym* dOe6c@rib))) (dOb5b@id->sym dOe6b@id) (dOb2b@stx-mark* dOe6b@id)))) '#f))) (set! dOae9@gen-define-label+loc (lambda (dOe85@id dOe86@rib) ((lambda (dOe89@t) (if dOe89@t ((lambda (dOe8b@env) ((lambda (dOe8d@label dOe8e@locs) (values dOe8d@label ((lambda (dOe91@t) (if dOe91@t (cdr dOe91@t) ((lambda (dOe93@loc) (begin (dOe08@set-interaction-env-locs! dOe8b@env (cons (cons dOe8d@label dOe93@loc) dOe8e@locs)) dOe93@loc)) (dOae1@gen-lexical dOe85@id)))) (assq dOe8d@label dOe8e@locs)))) (dOae7@gen-top-level-label dOe85@id dOe86@rib) (dOe06@interaction-env-locs dOe8b@env))) dOe89@t) (values (gensym) (dOae1@gen-lexical dOe85@id)))) (dOe4c@top-level-context)))) (set! dOaeb@gen-define-label (lambda (dOe95@id dOe96@rib) (if (dOe4c@top-level-context) (dOae7@gen-top-level-label dOe95@id dOe96@rib) (gensym)))) (set! dOaf5@rib? (lambda (dOe99@x) (and (simple-struct? dOe99@x) (eq? (simple-struct-name dOe99@x) 'rib)))) (set! dOaf7@rib-sym* (lambda (dOe9b@x) (simple-struct-ref dOe9b@x '0))) (set! dOaf9@set-rib-sym*! (lambda (dOe9d@x dOe9e@val) (simple-struct-set! dOe9d@x '0 dOe9e@val))) (set! dOafb@rib-mark** (lambda (dOea1@x) (simple-struct-ref dOea1@x '1))) (set! dOafd@set-rib-mark**! (lambda (dOea3@x dOea4@val) (simple-struct-set! dOea3@x '1 dOea4@val))) (set! dOaff@rib-label* (lambda (dOea7@x) (simple-struct-ref dOea7@x '2))) (set! dOb01@set-rib-label*! (lambda (dOea9@x dOeaa@val) (simple-struct-set! dOea9@x '2 dOeaa@val))) (set! dOb03@rib-sealed/freq (lambda (dOead@x) (simple-struct-ref dOead@x '3))) (set! dOb05@set-rib-sealed/freq! (lambda (dOeaf@x dOeb0@val) (simple-struct-set! dOeaf@x '3 dOeb0@val))) (set! dOb07@rib-cache (lambda (dOeb3@x) (simple-struct-ref dOeb3@x '4))) (set! dOb09@set-rib-cache! (lambda (dOeb5@x dOeb6@val) (simple-struct-set! dOeb5@x '4 dOeb6@val))) (set! dOb0b@dummy '3) (set! dOb0d@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! dOb0f@extend-rib! (lambda (dOeb9@rib dOeba@id dOebb@label) ((lambda (dOec0@find) (begin (set! dOec0@find (lambda (dOecd@sym dOece@mark* dOecf@sym* dOed0@mark** dOed1@label*) (and (pair? dOecf@sym*) (if (and (eq? dOecd@sym (car dOecf@sym*)) (same-marks? dOece@mark* (car dOed0@mark**))) dOed1@label* (dOec0@find dOecd@sym dOece@mark* (cdr dOecf@sym*) (cdr dOed0@mark**) (cdr dOed1@label*)))))) (begin (if (dOb03@rib-sealed/freq dOeb9@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" dOeb9@rib) (void)) ((lambda (dOec1@sym dOec2@mark*) ((lambda (dOec5@sym*) ((lambda (dOec7@t) (if dOec7@t ((lambda (dOec9@p) (if (not (eq? dOebb@label (car dOec9@p))) (if (dOe4c@top-level-context) (set-car! dOec9@p dOebb@label) (dOe3e@syntax-violation '#f '"multiple definitions of identifier" dOeba@id)) (void))) dOec7@t) (begin (if (dOb07@rib-cache dOeb9@rib) (hashtable-update! (dOb07@rib-cache dOeb9@rib) dOec1@sym (lambda (dOecb@e) (cons (cons dOec2@mark* dOebb@label) dOecb@e)) '()) (void)) (dOaf9@set-rib-sym*! dOeb9@rib (cons dOec1@sym dOec5@sym*)) (dOafd@set-rib-mark**! dOeb9@rib (cons dOec2@mark* (dOafb@rib-mark** dOeb9@rib))) (dOb01@set-rib-label*! dOeb9@rib (cons dOebb@label (dOaff@rib-label* dOeb9@rib)))))) (and (memq dOec1@sym (dOaf7@rib-sym* dOeb9@rib)) (dOec0@find dOec1@sym dOec2@mark* dOec5@sym* (dOafb@rib-mark** dOeb9@rib) (dOaff@rib-label* dOeb9@rib))))) (dOaf7@rib-sym* dOeb9@rib))) (dOb5b@id->sym dOeba@id) (dOb2b@stx-mark* dOeba@id))))) '#f))) (set! dOb11@extend-rib/nc! (lambda (dOed7@rib dOed8@id dOed9@label) ((lambda (dOedd@sym dOede@mark*) ((lambda (dOee1@sym*) (begin (if (dOb07@rib-cache dOed7@rib) (hashtable-update! (dOb07@rib-cache dOed7@rib) dOedd@sym (lambda (dOee3@e) (cons (cons dOede@mark* dOed9@label) dOee3@e)) '()) (void)) (dOaf9@set-rib-sym*! dOed7@rib (cons dOedd@sym dOee1@sym*)) (dOafd@set-rib-mark**! dOed7@rib (cons dOede@mark* (dOafb@rib-mark** dOed7@rib))) (dOb01@set-rib-label*! dOed7@rib (cons dOed9@label (dOaff@rib-label* dOed7@rib))))) (dOaf7@rib-sym* dOed7@rib))) (dOb5b@id->sym dOed8@id) (dOb2b@stx-mark* dOed8@id)))) (set! dOb13@make-rib-map (lambda (dOee5@sym*) ((lambda (dOee7@ht) ((letrec ((dOee9@f (lambda (dOeeb@i dOeec@sym*) (if (null? dOeec@sym*) dOee7@ht (begin (hashtable-update! dOee7@ht (car dOeec@sym*) (lambda (dOeef@x) (cons dOeeb@i dOeef@x)) '()) (dOee9@f (+ dOeeb@i '1) (cdr dOeec@sym*))))))) dOee9@f) '0 dOee5@sym*)) (make-eq-hashtable)))) (set! dOb15@seal-rib! (lambda (dOef1@rib) ((lambda (dOef3@sym*) (if (not (null? dOef3@sym*)) (begin (dOaf9@set-rib-sym*! dOef1@rib (list->vector dOef3@sym*)) (dOafd@set-rib-mark**! dOef1@rib (list->vector (dOafb@rib-mark** dOef1@rib))) (dOb01@set-rib-label*! dOef1@rib (list->vector (dOaff@rib-label* dOef1@rib))) (dOb05@set-rib-sealed/freq! dOef1@rib (dOb13@make-rib-map dOef3@sym*))) (void))) (dOaf7@rib-sym* dOef1@rib)))) (set! dOb17@unseal-rib! (lambda (dOef5@rib) (if (dOb03@rib-sealed/freq dOef5@rib) (begin (dOb05@set-rib-sealed/freq! dOef5@rib '#f) (dOaf9@set-rib-sym*! dOef5@rib (vector->list (dOaf7@rib-sym* dOef5@rib))) (dOafd@set-rib-mark**! dOef5@rib (vector->list (dOafb@rib-mark** dOef5@rib))) (dOb01@set-rib-label*! dOef5@rib (vector->list (dOaff@rib-label* dOef5@rib)))) (void)))) (set! dOb19@make-full-rib (lambda (dOef7@id* dOef8@label*) ((lambda (dOefb@r) (begin (dOb15@seal-rib! dOefb@r) dOefb@r)) (make-simple-struct 'rib '6 (list (map dOb5b@id->sym dOef7@id*) (map dOb2b@stx-mark* dOef7@id*) dOef8@label* '#f '#f))))) (set! dOb1b@rp (dO6b5@dO591@make-record-printer 'stx (lambda (dOefd@x dOefe@p dOeff@wr) (begin (display '"#<syntax " dOefe@p) (write (dOb6d@stx->datum dOefd@x) dOefe@p) ((lambda (dOf03@expr) (if (dO6ad@dO581@annotation? dOf03@expr) ((lambda (dOf05@src) (if (pair? dOf05@src) (begin (display '" [" dOefe@p) (display (cdr dOf05@src) dOefe@p) (display '" of " dOefe@p) (display (car dOf05@src) dOefe@p) (display '"]" dOefe@p)) (void))) (dO6ae@dO583@annotation-source dOf03@expr)) (void))) (dOb27@stx-expr dOefd@x)) (display '">" dOefe@p))))) (set! dOb25@stx? (lambda (dOf07@x) (and (simple-struct? dOf07@x) (eq? (simple-struct-name dOf07@x) 'stx)))) (set! dOb27@stx-expr (lambda (dOf09@x) (simple-struct-ref dOf09@x '0))) (set! dOb29@set-stx-expr! (lambda (dOf0b@x dOf0c@val) (simple-struct-set! dOf0b@x '0 dOf0c@val))) (set! dOb2b@stx-mark* (lambda (dOf0f@x) (simple-struct-ref dOf0f@x '1))) (set! dOb2d@set-stx-mark*! (lambda (dOf11@x dOf12@val) (simple-struct-set! dOf11@x '1 dOf12@val))) (set! dOb2f@stx-subst* (lambda (dOf15@x) (simple-struct-ref dOf15@x '2))) (set! dOb31@set-stx-subst*! (lambda (dOf17@x dOf18@val) (simple-struct-set! dOf17@x '2 dOf18@val))) (set! dOb33@stx-ae* (lambda (dOf1b@x) (simple-struct-ref dOf1b@x '3))) (set! dOb35@set-stx-ae*! (lambda (dOf1d@x dOf1e@val) (simple-struct-set! dOf1d@x '3 dOf1e@val))) (set! dOb37@dummy '3) (set! dOb39@datum->stx (lambda (dOf21@id dOf22@datum) (make-simple-struct 'stx '5 (list dOf22@datum (dOb2b@stx-mark* dOf21@id) (dOb2f@stx-subst* dOf21@id) (dOb33@stx-ae* dOf21@id))))) (set! dOb3b@gen-mark (lambda () (string '#\m))) (set! dOb3d@anti-mark '#f) (set! dOb3f@anti-mark? not) (set! dOb41@mkstx (lambda (dOf25@e dOf26@m* dOf27@s* dOf28@ae*) (if (and (dOb25@stx? dOf25@e) (not (dOadf@top-marked? dOf26@m*))) (call-with-values (lambda () (join-wraps dOf26@m* dOf27@s* dOf28@ae* dOf25@e)) (lambda (dOf33@dOf2e dOf34@dOf30 dOf35@dOf32) ((lambda (dOf39@ae* dOf3a@s* dOf3b@m*) (make-simple-struct 'stx '5 (list (dOb27@stx-expr dOf25@e) dOf3b@m* dOf3a@s* dOf39@ae*))) dOf35@dOf32 dOf34@dOf30 dOf33@dOf2e))) (make-simple-struct 'stx '5 (list dOf25@e dOf26@m* dOf27@s* dOf28@ae*))))) (set! dOb43@add-mark (lambda (dOf3f@m dOf40@e dOf41@ae) (dOb41@mkstx dOf40@e (list dOf3f@m) '(shift) (list dOf41@ae)))) (set! dOb45@add-subst (lambda (dOf45@subst dOf46@e) (dOb41@mkstx dOf46@e '() (list dOf45@subst) '()))) (set! dOb47@syntax-kind? (lambda (dOf49@x dOf4a@p?) (if (dOb25@stx? dOf49@x) (dOb47@syntax-kind? (dOb27@stx-expr dOf49@x) dOf4a@p?) (if (dO6ad@dO581@annotation? dOf49@x) (dOb47@syntax-kind? (dO6af@dO585@annotation-expression dOf49@x) dOf4a@p?) (dOf4a@p? dOf49@x))))) (set! dOb49@syntax-vector->list (lambda (dOf4d@x) (if (dOb25@stx? dOf4d@x) ((lambda (dOf4f@ls dOf50@m* dOf51@s* dOf52@ae*) (map (lambda (dOf57@x) (dOb41@mkstx dOf57@x dOf50@m* dOf51@s* dOf52@ae*)) dOf4f@ls)) (dOb49@syntax-vector->list (dOb27@stx-expr dOf4d@x)) (dOb2b@stx-mark* dOf4d@x) (dOb2f@stx-subst* dOf4d@x) (dOb33@stx-ae* dOf4d@x)) (if (dO6ad@dO581@annotation? dOf4d@x) (dOb49@syntax-vector->list (dO6af@dO585@annotation-expression dOf4d@x)) (if (vector? dOf4d@x) (vector->list dOf4d@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" dOf4d@x)))))) (set! dOb4b@syntax-pair? (lambda (dOf59@x) (dOb47@syntax-kind? dOf59@x pair?))) (set! dOb4d@syntax-vector? (lambda (dOf5b@x) (dOb47@syntax-kind? dOf5b@x vector?))) (set! dOb4f@syntax-null? (lambda (dOf5d@x) (dOb47@syntax-kind? dOf5d@x null?))) (set! dOb51@syntax-list? (lambda (dOf5f@x) (or (dOb4f@syntax-null? dOf5f@x) (and (dOb4b@syntax-pair? dOf5f@x) (dOb51@syntax-list? (dOb55@syntax-cdr dOf5f@x)))))) (set! dOb53@syntax-car (lambda (dOf61@x) (if (dOb25@stx? dOf61@x) (dOb41@mkstx (dOb53@syntax-car (dOb27@stx-expr dOf61@x)) (dOb2b@stx-mark* dOf61@x) (dOb2f@stx-subst* dOf61@x) (dOb33@stx-ae* dOf61@x)) (if (dO6ad@dO581@annotation? dOf61@x) (dOb53@syntax-car (dO6af@dO585@annotation-expression dOf61@x)) (if (pair? dOf61@x) (car dOf61@x) (assertion-violation 'syntax-car '"BUG: not a pair" dOf61@x)))))) (set! dOb55@syntax-cdr (lambda (dOf63@x) (if (dOb25@stx? dOf63@x) (dOb41@mkstx (dOb55@syntax-cdr (dOb27@stx-expr dOf63@x)) (dOb2b@stx-mark* dOf63@x) (dOb2f@stx-subst* dOf63@x) (dOb33@stx-ae* dOf63@x)) (if (dO6ad@dO581@annotation? dOf63@x) (dOb55@syntax-cdr (dO6af@dO585@annotation-expression dOf63@x)) (if (pair? dOf63@x) (cdr dOf63@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" dOf63@x)))))) (set! dOb57@syntax->list (lambda (dOf65@x) (if (dOb4b@syntax-pair? dOf65@x) (cons (dOb53@syntax-car dOf65@x) (dOb57@syntax->list (dOb55@syntax-cdr dOf65@x))) (if (dOb4f@syntax-null? dOf65@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" dOf65@x))))) (set! dOb59@id? (lambda (dOf67@x) (and (dOb25@stx? dOf67@x) (symbol? (dOb27@stx-expr dOf67@x))))) (set! dOb5b@id->sym (lambda (dOf69@x) (dOb27@stx-expr dOf69@x))) (set! dOb5d@bound-id=? (lambda (dOf6b@x dOf6c@y) (and (eq? (dOb5b@id->sym dOf6b@x) (dOb5b@id->sym dOf6c@y)) (same-marks? (dOb2b@stx-mark* dOf6b@x) (dOb2b@stx-mark* dOf6c@y))))) (set! dOb5f@free-id=? (lambda (dOf6f@i dOf70@j) ((lambda (dOf73@t0 dOf74@t1) (if (or dOf73@t0 dOf74@t1) (eq? dOf73@t0 dOf74@t1) (eq? (dOb5b@id->sym dOf6f@i) (dOb5b@id->sym dOf70@j)))) (id->real-label dOf6f@i) (id->real-label dOf70@j)))) (set! dOb61@valid-bound-ids? (lambda (dOf77@id*) (and (for-all dOb59@id? dOf77@id*) (dOb63@distinct-bound-ids? dOf77@id*)))) (set! dOb63@distinct-bound-ids? (lambda (dOf79@id*) (or (null? dOf79@id*) (and (not (dOb65@bound-id-member? (car dOf79@id*) (cdr dOf79@id*))) (dOb63@distinct-bound-ids? (cdr dOf79@id*)))))) (set! dOb65@bound-id-member? (lambda (dOf7b@id dOf7c@id*) (and (pair? dOf7c@id*) (or (dOb5d@bound-id=? dOf7b@id (car dOf7c@id*)) (dOb65@bound-id-member? dOf7b@id (cdr dOf7c@id*)))))) (set! dOb67@self-evaluating? (lambda (dOf7f@x) (or (number? dOf7f@x) (string? dOf7f@x) (char? dOf7f@x) (boolean? dOf7f@x) (regexp? dOf7f@x) (bytevector? dOf7f@x)))) (set! dOb69@strip-annotations (lambda (dOf81@x) (if (pair? dOf81@x) (cons (dOb69@strip-annotations (car dOf81@x)) (dOb69@strip-annotations (cdr dOf81@x))) (if (vector? dOf81@x) (vector-map dOb69@strip-annotations dOf81@x) (if (dO6ad@dO581@annotation? dOf81@x) (dO6ac@dO57f@annotation-stripped dOf81@x) dOf81@x))))) (set! dOb6b@strip (lambda (dOf83@x dOf84@m*) (if (dOadf@top-marked? dOf84@m*) (if (or (dO6ad@dO581@annotation? dOf83@x) (and (pair? dOf83@x) (dO6ad@dO581@annotation? (car dOf83@x))) (and (vector? dOf83@x) (> (vector-length dOf83@x) '0) (dO6ad@dO581@annotation? (vector-ref dOf83@x '0)))) (dOb69@strip-annotations dOf83@x) dOf83@x) ((letrec ((dOf87@f (lambda (dOf89@x) (if (dOb25@stx? dOf89@x) (dOb6b@strip (dOb27@stx-expr dOf89@x) (dOb2b@stx-mark* dOf89@x)) (if (dO6ad@dO581@annotation? dOf89@x) (dO6ac@dO57f@annotation-stripped dOf89@x) (if (pair? dOf89@x) ((lambda (dOf8b@a dOf8c@d) (if (and (eq? dOf8b@a (car dOf89@x)) (eq? dOf8c@d (cdr dOf89@x))) dOf89@x (cons dOf8b@a dOf8c@d))) (dOf87@f (car dOf89@x)) (dOf87@f (cdr dOf89@x))) (if (vector? dOf89@x) ((lambda (dOf8f@old) ((lambda (dOf91@new) (if (for-all eq? dOf8f@old dOf91@new) dOf89@x (list->vector dOf91@new))) (map dOf87@f dOf8f@old))) (vector->list dOf89@x)) dOf89@x))))))) dOf87@f) dOf83@x)))) (set! dOb6d@stx->datum (lambda (dOf93@x) (dOb6b@strip dOf93@x '()))) (set! dOb6f@id->label (lambda (dOf95@id) (or (id->real-label dOf95@id) ((lambda (dOf97@t) (if dOf97@t ((lambda (dOf99@env) ((lambda (dOf9b@rib) (call-with-values (lambda () (dOae9@gen-define-label+loc dOf95@id dOf9b@rib)) (lambda (dOfa1@dOf9e dOfa2@dOfa0) ((lambda (dOfa5@loc_ dOfa6@lab) (begin (dOb0f@extend-rib! dOf9b@rib dOf95@id dOfa6@lab) dOfa6@lab)) dOfa2@dOfa0 dOfa1@dOf9e)))) (dOdfe@interaction-env-rib dOf99@env))) dOf97@t) '#f)) (dOe4c@top-level-context))))) (set! dOb71@label->binding (lambda (dOfa9@x dOfaa@r) ((lambda (dOfad@t) (if dOfad@t ((lambda (dOfaf@b) (if (and (pair? dOfaf@b) (eq? (car dOfaf@b) '$core-rtd)) (cons '$rtd (map dOd14@bless (cdr dOfaf@b))) (if (and (pair? dOfaf@b) (eq? (car dOfaf@b) 'global-rtd)) ((lambda (dOfb1@lib dOfb2@loc) (cons '$rtd (symbol-value dOfb2@loc))) (cadr dOfaf@b) (cddr dOfaf@b)) dOfaf@b))) dOfad@t) ((lambda (dOfb5@t) (if dOfb5@t (cdr dOfb5@t) ((lambda (dOfb7@t) (if dOfb7@t ((lambda (dOfb9@env) ((lambda (dOfbb@t) (if dOfbb@t ((lambda (dOfbd@p) (cons* 'lexical (cdr dOfbd@p) '#f)) dOfbb@t) '(displaced-lexical . #f))) (assq dOfa9@x (dOe06@interaction-env-locs dOfb9@env)))) dOfb7@t) '(displaced-lexical . #f))) (dOe4c@top-level-context)))) (assq dOfa9@x dOfaa@r)))) (dO983@dO7d0@imported-label->binding dOfa9@x)))) (set! dOb73@make-binding cons) (set! dOb75@binding-type car) (set! dOb77@binding-value cdr) (set! dOb79@raise-unbound-error (lambda (dOfbf@id) (dOe3c@syntax-violation* '#f '"unbound identifier" dOfbf@id (dO2b9d@dO29e3@make-undefined-violation)))) (set! dOb7b@syntax-type (lambda (dOfc1@e dOfc2@r) (if (dOb59@id? dOfc1@e) ((lambda (dOfc5@id) ((lambda (dOfc7@label) ((lambda (dOfc9@b) ((lambda (dOfcb@type) ((lambda () (begin (if (not dOfc7@label) (dOb79@raise-unbound-error dOfc5@id) (void)) ((lambda (dOfcd@t) (if (memv dOfcd@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values dOfcb@type (dOb77@binding-value dOfc9@b) dOfc5@id) (values 'other '#f '#f))) dOfcb@type))))) (dOb75@binding-type dOfc9@b))) (dOb71@label->binding dOfc7@label dOfc2@r))) (dOb6f@id->label dOfc5@id))) dOfc1@e) (if (dOb4b@syntax-pair? dOfc1@e) ((lambda (dOfcf@id) (if (dOb59@id? dOfcf@id) ((lambda (dOfd1@label) ((lambda (dOfd3@b) ((lambda (dOfd5@type) ((lambda () (begin (if (not dOfd1@label) (dOb79@raise-unbound-error dOfcf@id) (void)) ((lambda (dOfd7@t) (if (memv dOfd7@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values dOfd5@type (dOb77@binding-value dOfd3@b) dOfcf@id) (values 'call '#f '#f))) dOfd5@type))))) (dOb75@binding-type dOfd3@b))) (dOb71@label->binding dOfd1@label dOfc2@r))) (dOb6f@id->label dOfcf@id)) (values 'call '#f '#f))) (dOb53@syntax-car dOfc1@e)) ((lambda (dOfd9@d) (if (dOb67@self-evaluating? dOfd9@d) (values 'constant dOfd9@d '#f) (values 'other '#f '#f))) (dOb6d@stx->datum dOfc1@e)))))) (set! dOb89@sanitize-binding (lambda (dOfdb@x dOfdc@src) (if (procedure? dOfdb@x) (cons* 'local-macro dOfdb@x dOfdc@src) (if (and (pair? dOfdb@x) (eq? (car dOfdb@x) 'macro!) (procedure? (cdr dOfdb@x))) (cons* 'local-macro! (cdr dOfdb@x) dOfdc@src) (if (and (pair? dOfdb@x) (eq? (car dOfdb@x) '$rtd)) dOfdb@x (assertion-violation 'expand '"invalid transformer" dOfdb@x)))))) (set! dOb8b@make-variable-transformer (lambda (dOfdf@x) (if (procedure? dOfdf@x) (cons 'macro! dOfdf@x) (assertion-violation 'make-variable-transformer '"not a procedure" dOfdf@x)))) (set! dOb8d@variable-transformer? (lambda (dOfe1@x) (and (pair? dOfe1@x) (eq? (car dOfe1@x) 'macro!) (procedure? (cdr dOfe1@x))))) (set! dOb8f@variable-transformer-procedure (lambda (dOfe3@x) (if (dOb8d@variable-transformer? dOfe3@x) (cdr dOfe3@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" dOfe3@x)))) (set! dOb91@make-eval-transformer (lambda (dOfe5@x) (dOb89@sanitize-binding (eval-core (dO70e@dO6c6@expanded->core dOfe5@x)) dOfe5@x))) (set! dOce2@parse-define (lambda (dOfe7@x) ((lambda (dOfe9@t) ((lambda (dOfeb@ls/false) (if (and dOfeb@ls/false (apply (lambda (dOfed@id dOfee@fmls dOfef@b dOff0@b*) (dOb59@id? dOfed@id)) dOfeb@ls/false)) (apply (lambda (dOff5@id dOff6@fmls dOff7@b dOff8@b*) (begin (dOd84@verify-formals dOff6@fmls dOfe7@x) (values dOff5@id (cons 'defun (cons dOff6@fmls (cons dOff7@b dOff8@b*)))))) dOfeb@ls/false) ((lambda (dOffd@t) ((lambda (dOfff@ls/false) (if (and dOfff@ls/false (apply (lambda (dO1001@id dO1002@val) (dOb59@id? dO1001@id)) dOfff@ls/false)) (apply (lambda (dO1005@id dO1006@val) (values dO1005@id (cons 'expr dO1006@val))) dOfff@ls/false) ((lambda (dO1009@t) ((lambda (dO100b@ls/false) (if (and dO100b@ls/false (apply (lambda (dO100d@id) (dOb59@id? dO100d@id)) dO100b@ls/false)) (apply (lambda (dO100f@id) (values dO100f@id (cons 'expr (dOd14@bless '(void))))) dO100b@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1009@t))) (dOd5e@syntax-dispatch dO1009@t '(_ any)))) dOffd@t))) (dOd5e@syntax-dispatch dOffd@t '(_ any any)))) dOfe9@t))) (dOd5e@syntax-dispatch dOfe9@t '(_ (any . any) any . each-any)))) dOfe7@x))) (set! dOce4@parse-define-syntax (lambda (dO1011@x) ((lambda (dO1013@t) ((lambda (dO1015@ls/false) (if (and dO1015@ls/false (apply (lambda (dO1017@id dO1018@val) (dOb59@id? dO1017@id)) dO1015@ls/false)) (apply (lambda (dO101b@id dO101c@val) (values dO101b@id dO101c@val)) dO1015@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1013@t))) (dOd5e@syntax-dispatch dO1013@t '(_ any any)))) dO1011@x))) (set! dOce6@scheme-stx-hashtable (make-eq-hashtable)) (set! dOce8@scheme-stx (lambda (dO101f@sym) (or (hashtable-ref dOce6@scheme-stx-hashtable dO101f@sym '#f) ((lambda (dO1021@subst) ((lambda (dO1023@stx) ((lambda (dO1025@stx) ((lambda () (begin (hashtable-set! dOce6@scheme-stx-hashtable dO101f@sym dO1025@stx) dO1025@stx)))) ((lambda (dO1027@t) (if dO1027@t ((lambda (dO1029@x) ((lambda (dO102b@name dO102c@label) (dOb45@add-subst (make-simple-struct 'rib '6 (list (list dO102b@name) (list dOadd@top-mark*) (list dO102c@label) '#f '#f)) dO1023@stx)) (car dO1029@x) (cdr dO1029@x))) dO1027@t) dO1023@stx)) (assq dO101f@sym dO1021@subst)))) (make-simple-struct 'stx '5 (list dO101f@sym dOadd@top-mark* '() '())))) (dO95f@dO788@library-subst (dO97d@dO7c4@find-library-by-name '(psyntax system $all))))))) (set! dOcea@lexical-var car) (set! dOcec@lexical-mutable? cdr) (set! dOcee@set-lexical-mutable! set-cdr!) (set! dOcf0@add-lexical (lambda (dO102f@lab dO1030@lex dO1031@r) (cons (cons* dO102f@lab 'lexical dO1030@lex '#f) dO1031@r))) (set! dOcf2@add-lexicals (lambda (dO1035@lab* dO1036@lex* dO1037@r) (if (null? dO1035@lab*) dO1037@r (dOcf2@add-lexicals (cdr dO1035@lab*) (cdr dO1036@lex*) (dOcf0@add-lexical (car dO1035@lab*) (car dO1036@lex*) dO1037@r))))) (set! dOcf4@letrec-helper (lambda (dO103b@e dO103c@r dO103d@mr dO103e@build) ((lambda (dO1043@t) ((lambda (dO1045@ls/false) (if dO1045@ls/false (apply (lambda (dO1047@lhs* dO1048@rhs* dO1049@b dO104a@b*) (if (not (dOb61@valid-bound-ids? dO1047@lhs*)) (dOd18@invalid-fmls-error dO103b@e dO1047@lhs*) ((lambda (dO104f@lex* dO1050@lab*) ((lambda (dO1053@rib dO1054@r) ((lambda (dO1057@body dO1058@rhs*) (dO103e@build '#f dO104f@lex* dO1058@rhs* dO1057@body)) (dOd96@chi-internal (dOb45@add-subst dO1053@rib (cons dO1049@b dO104a@b*)) dO1054@r dO103d@mr) (dOd7c@chi-expr* (map (lambda (dO105b@x) (dOb45@add-subst dO1053@rib dO105b@x)) dO1048@rhs*) dO1054@r dO103d@mr))) (dOb19@make-full-rib dO1047@lhs* dO1050@lab*) (dOcf2@add-lexicals dO1050@lab* dO104f@lex* dO103c@r))) (map dOae1@gen-lexical dO1047@lhs*) (map dOae5@gen-label dO1047@lhs*)))) dO1045@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1043@t))) (dOd5e@syntax-dispatch dO1043@t '(_ #(each (any any)) any . each-any)))) dO103b@e))) (set! dOcf6@letrec-transformer (lambda (dO105d@e dO105e@r dO105f@mr) (dOcf4@letrec-helper dO105d@e dO105e@r dO105f@mr dOac2@dOa33@build-letrec))) (set! dOcf8@letrec*-transformer (lambda (dO1063@e dO1064@r dO1065@mr) (dOcf4@letrec-helper dO1063@e dO1064@r dO1065@mr dOac3@dOa35@build-letrec*))) (set! dOcfa@fluid-let-syntax-transformer (lambda (dO1069@e dO106a@r dO106b@mr) ((lambda (dO1070@lookup) (begin (set! dO1070@lookup (lambda (dO1083@x) (or (dOb6f@id->label dO1083@x) (dOe3e@syntax-violation '#f '"unbound identifier" dO1069@e dO1083@x)))) ((lambda (dO1071@t) ((lambda (dO1073@ls/false) (if dO1073@ls/false (apply (lambda (dO1075@lhs* dO1076@rhs* dO1077@b dO1078@b*) (if (not (dOb61@valid-bound-ids? dO1075@lhs*)) (dOd18@invalid-fmls-error dO1069@e dO1075@lhs*) ((lambda (dO107d@lab* dO107e@rhs*) (dOd96@chi-internal (cons dO1077@b dO1078@b*) (append (map cons dO107d@lab* dO107e@rhs*) dO106a@r) (append (map cons dO107d@lab* dO107e@rhs*) dO106b@mr))) (map dO1070@lookup dO1075@lhs*) (map (lambda (dO1081@x) (dOb91@make-eval-transformer (dOdb8@expand-transformer dO1081@x dO106b@mr))) dO1076@rhs*)))) dO1073@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1071@t))) (dOd5e@syntax-dispatch dO1071@t '(_ #(each (any any)) any . each-any)))) dO1069@e))) '#f))) (set! dOcfc@type-descriptor-transformer (lambda (dO1085@e dO1086@r dO1087@mr) ((lambda (dO108b@t) ((lambda (dO108d@ls/false) (if (and dO108d@ls/false (apply (lambda (dO108f@id) (dOb59@id? dO108f@id)) dO108d@ls/false)) (apply (lambda (dO1091@id) ((lambda (dO1093@lab) ((lambda (dO1095@b) ((lambda (dO1097@type) ((lambda () (begin (if (not dO1093@lab) (dOb79@raise-unbound-error dO1091@id) (void)) (if (not (and (eq? dO1097@type '$rtd) (not (list? (dOb77@binding-value dO1095@b))))) (dOe3e@syntax-violation '#f '"not a record type" dO1085@e) (void)) (list 'quote (dOb77@binding-value dO1095@b)))))) (dOb75@binding-type dO1095@b))) (dOb71@label->binding dO1093@lab dO1086@r))) (dOb6f@id->label dO1091@id))) dO108d@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO108b@t))) (dOd5e@syntax-dispatch dO108b@t '(_ any)))) dO1085@e))) (set! dOcfe@record-type-descriptor-transformer (lambda (dO1099@e dO109a@r dO109b@mr) ((lambda (dO109f@t) ((lambda (dO10a1@ls/false) (if (and dO10a1@ls/false (apply (lambda (dO10a3@id) (dOb59@id? dO10a3@id)) dO10a1@ls/false)) (apply (lambda (dO10a5@id) ((lambda (dO10a7@lab) ((lambda (dO10a9@b) ((lambda (dO10ab@type) ((lambda () (begin (if (not dO10a7@lab) (dOb79@raise-unbound-error dO10a5@id) (void)) (if (not (and (eq? dO10ab@type '$rtd) (list? (dOb77@binding-value dO10a9@b)))) (dOe3e@syntax-violation '#f '"not a record type" dO1099@e) (void)) (dOd80@chi-expr (car (dOb77@binding-value dO10a9@b)) dO109a@r dO109b@mr))))) (dOb75@binding-type dO10a9@b))) (dOb71@label->binding dO10a7@lab dO109a@r))) (dOb6f@id->label dO10a5@id))) dO10a1@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO109f@t))) (dOd5e@syntax-dispatch dO109f@t '(_ any)))) dO1099@e))) (set! dOd00@record-constructor-descriptor-transformer (lambda (dO10ad@e dO10ae@r dO10af@mr) ((lambda (dO10b3@t) ((lambda (dO10b5@ls/false) (if (and dO10b5@ls/false (apply (lambda (dO10b7@id) (dOb59@id? dO10b7@id)) dO10b5@ls/false)) (apply (lambda (dO10b9@id) ((lambda (dO10bb@lab) ((lambda (dO10bd@b) ((lambda (dO10bf@type) ((lambda () (begin (if (not dO10bb@lab) (dOb79@raise-unbound-error dO10b9@id) (void)) (if (not (and (eq? dO10bf@type '$rtd) (list? (dOb77@binding-value dO10bd@b)))) (dOe3e@syntax-violation '#f '"invalid type" dO10ad@e) (void)) (dOd80@chi-expr (cadr (dOb77@binding-value dO10bd@b)) dO10ae@r dO10af@mr))))) (dOb75@binding-type dO10bd@b))) (dOb71@label->binding dO10bb@lab dO10ae@r))) (dOb6f@id->label dO10b9@id))) dO10b5@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO10b3@t))) (dOd5e@syntax-dispatch dO10b3@t '(_ any)))) dO10ad@e))) (set! dOd02@when-macro (lambda (dO10c1@e) ((lambda (dO10c3@t) ((lambda (dO10c5@ls/false) (if dO10c5@ls/false (apply (lambda (dO10c7@test dO10c8@e dO10c9@e*) (dOd14@bless (list 'if dO10c7@test (cons 'begin (cons dO10c8@e dO10c9@e*))))) dO10c5@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO10c3@t))) (dOd5e@syntax-dispatch dO10c3@t '(_ any any . each-any)))) dO10c1@e))) (set! dOd04@unless-macro (lambda (dO10cd@e) ((lambda (dO10cf@t) ((lambda (dO10d1@ls/false) (if dO10d1@ls/false (apply (lambda (dO10d3@test dO10d4@e dO10d5@e*) (dOd14@bless (list 'if (list 'not dO10d3@test) (cons 'begin (cons dO10d4@e dO10d5@e*))))) dO10d1@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO10cf@t))) (dOd5e@syntax-dispatch dO10cf@t '(_ any any . each-any)))) dO10cd@e))) (set! dOd06@if-transformer (lambda (dO10d9@e dO10da@r dO10db@mr) ((lambda (dO10df@t) ((lambda (dO10e1@ls/false) (if dO10e1@ls/false (apply (lambda (dO10e3@e0 dO10e4@e1 dO10e5@e2) (list 'if (dOd80@chi-expr dO10e3@e0 dO10da@r dO10db@mr) (dOd80@chi-expr dO10e4@e1 dO10da@r dO10db@mr) (dOd80@chi-expr dO10e5@e2 dO10da@r dO10db@mr))) dO10e1@ls/false) ((lambda (dO10e9@t) ((lambda (dO10eb@ls/false) (if dO10eb@ls/false (apply (lambda (dO10ed@e0 dO10ee@e1) (list 'if (dOd80@chi-expr dO10ed@e0 dO10da@r dO10db@mr) (dOd80@chi-expr dO10ee@e1 dO10da@r dO10db@mr) (dOac1@dOa31@build-void))) dO10eb@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO10e9@t))) (dOd5e@syntax-dispatch dO10e9@t '(_ any any)))) dO10df@t))) (dOd5e@syntax-dispatch dO10df@t '(_ any any any)))) dO10d9@e))) (set! dOd08@and-transformer (lambda (dO10f1@e dO10f2@r dO10f3@mr) ((lambda (dO10f7@t) ((lambda (dO10f9@ls/false) (if dO10f9@ls/false (apply (lambda (dO10fb@e*) (cons 'and (dOd7c@chi-expr* dO10fb@e* dO10f2@r dO10f3@mr))) dO10f9@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO10f7@t))) (dOd5e@syntax-dispatch dO10f7@t '(_ . each-any)))) dO10f1@e))) (set! dOd0a@or-transformer (lambda (dO10fd@e dO10fe@r dO10ff@mr) ((lambda (dO1103@t) ((lambda (dO1105@ls/false) (if dO1105@ls/false (apply (lambda (dO1107@e*) (cons 'or (dOd7c@chi-expr* dO1107@e* dO10fe@r dO10ff@mr))) dO1105@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1103@t))) (dOd5e@syntax-dispatch dO1103@t '(_ . each-any)))) dO10fd@e))) (set! dOd0c@case-macro (lambda (dO1109@e) ((lambda (dO110c@build-last dO110e@build-one) (begin (set! dO110c@build-last (lambda (dO1133@cls) ((lambda (dO1135@t) ((lambda (dO1137@ls/false) (if dO1137@ls/false (apply (lambda (dO1139@e dO113a@e*) (cons 'begin (cons dO1139@e dO113a@e*))) dO1137@ls/false) ((lambda (dO113d@t) ((lambda (dO113f@ls/false) (if dO113f@ls/false (apply (lambda () (dO110e@build-one dO1133@cls '(if #f #f))) dO113f@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO113d@t))) (dOd5e@syntax-dispatch dO113d@t '_))) dO1135@t))) (dOd5e@syntax-dispatch dO1135@t '(#(scheme-id else) any . each-any)))) dO1133@cls))) (set! dO110e@build-one (lambda (dO1125@cls dO1126@k) ((lambda (dO1129@t) ((lambda (dO112b@ls/false) (if dO112b@ls/false (apply (lambda (dO112d@d* dO112e@e dO112f@e*) (list 'if (list 'memv 't (list 'quote dO112d@d*)) (cons 'begin (cons dO112e@e dO112f@e*)) dO1126@k)) dO112b@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1129@t))) (dOd5e@syntax-dispatch dO1129@t '(each-any any . each-any)))) dO1125@cls))) ((lambda (dO110f@t) ((lambda (dO1111@ls/false) (if dO1111@ls/false (apply (lambda (dO1113@expr) (dOd14@bless (cons 'let (cons (list (list 't dO1113@expr)) '((if #f #f)))))) dO1111@ls/false) ((lambda (dO1115@t) ((lambda (dO1117@ls/false) (if dO1117@ls/false (apply (lambda (dO1119@expr dO111a@cls dO111b@cls*) (dOd14@bless (list 'let (list (list 't dO1119@expr)) ((letrec ((dO111f@f (lambda (dO1121@cls dO1122@cls*) (if (null? dO1122@cls*) (dO110c@build-last dO1121@cls) (dO110e@build-one dO1121@cls (dO111f@f (car dO1122@cls*) (cdr dO1122@cls*))))))) dO111f@f) dO111a@cls dO111b@cls*)))) dO1117@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1115@t))) (dOd5e@syntax-dispatch dO1115@t '(_ any any . each-any)))) dO110f@t))) (dOd5e@syntax-dispatch dO110f@t '(_ any)))) dO1109@e))) '#f '#f))) (set! dOd0e@quote-transformer (lambda (dO1141@e dO1142@r dO1143@mr) ((lambda (dO1147@t) ((lambda (dO1149@ls/false) (if dO1149@ls/false (apply (lambda (dO114b@datum) (list 'quote (dOb6d@stx->datum dO114b@datum))) dO1149@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1147@t))) (dOd5e@syntax-dispatch dO1147@t '(_ any)))) dO1141@e))) (set! dOd10@case-lambda-transformer (lambda (dO114d@e dO114e@r dO114f@mr) ((lambda (dO1153@t) ((lambda (dO1155@ls/false) (if dO1155@ls/false (apply (lambda (dO1157@fmls* dO1158@b* dO1159@b**) (call-with-values (lambda () (dOd88@chi-lambda-clause* dO114d@e dO1157@fmls* (map cons dO1158@b* dO1159@b**) dO114e@r dO114f@mr)) (lambda (dO1161@dO115e dO1162@dO1160) ((lambda (dO1165@body* dO1166@fmls*) (dOabe@dO9ff@build-case-lambda '#f dO1166@fmls* dO1165@body*)) dO1162@dO1160 dO1161@dO115e)))) dO1155@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1153@t))) (dOd5e@syntax-dispatch dO1153@t '(_ . #(each (any any . each-any)))))) dO114d@e))) (set! dOd12@lambda-transformer (lambda (dO1169@e dO116a@r dO116b@mr) ((lambda (dO116f@t) ((lambda (dO1171@ls/false) (if dO1171@ls/false (apply (lambda (dO1173@fmls dO1174@b dO1175@b*) (call-with-values (lambda () (dOd86@chi-lambda-clause dO1169@e dO1173@fmls (cons dO1174@b dO1175@b*) dO116a@r dO116b@mr)) (lambda (dO117d@dO117a dO117e@dO117c) ((lambda (dO1181@body dO1182@fmls) (dOabd@dO9fd@build-lambda '#f dO1182@fmls dO1181@body)) dO117e@dO117c dO117d@dO117a)))) dO1171@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO116f@t))) (dOd5e@syntax-dispatch dO116f@t '(_ any any . each-any)))) dO1169@e))) (set! dOd14@bless (lambda (dO1185@x) (dOb41@mkstx ((letrec ((dO1187@f (lambda (dO1189@x) (if (dOb25@stx? dO1189@x) dO1189@x (if (pair? dO1189@x) (cons (dO1187@f (car dO1189@x)) (dO1187@f (cdr dO1189@x))) (if (symbol? dO1189@x) (dOce8@scheme-stx dO1189@x) (if (vector? dO1189@x) (vector-map dO1187@f dO1189@x) dO1189@x))))))) dO1187@f) dO1185@x) '() '() '()))) (set! dOd16@with-syntax-macro (lambda (dO118b@e) ((lambda (dO118d@t) ((lambda (dO118f@ls/false) (if dO118f@ls/false (apply (lambda (dO1191@pat* dO1192@expr* dO1193@b dO1194@b*) ((lambda (dO1199@idn*) (begin (dOd84@verify-formals (map car dO1199@idn*) dO118b@e) ((lambda (dO119b@t*) (dOd14@bless (list 'let (map list dO119b@t* dO1192@expr*) ((letrec ((dO119d@f (lambda (dO119f@pat* dO11a0@t*) (if (null? dO119f@pat*) (cons 'begin (cons '#f (cons dO1193@b dO1194@b*))) (list 'syntax-case (car dO11a0@t*) '() (list (car dO119f@pat*) (dO119d@f (cdr dO119f@pat*) (cdr dO11a0@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car dO119f@pat*)) (car dO11a0@t*)))))))) dO119d@f) dO1191@pat* dO119b@t*)))) (dOe2c@generate-temporaries dO1192@expr*)))) ((letrec ((dO11a3@f (lambda (dO11a5@pat*) (if (null? dO11a5@pat*) '() (call-with-values (lambda () (dOd5c@convert-pattern (car dO11a5@pat*) '())) (lambda (dO11ab@dO11a8 dO11ac@dO11aa) ((lambda (dO11af@idn* dO11b0@pat) (append dO11af@idn* (dO11a3@f (cdr dO11a5@pat*)))) dO11ac@dO11aa dO11ab@dO11a8))))))) dO11a3@f) dO1191@pat*))) dO118f@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO118d@t))) (dOd5e@syntax-dispatch dO118d@t '(_ #(each (any any)) any . each-any)))) dO118b@e))) (set! dOd18@invalid-fmls-error (lambda (dO11b3@stx dO11b4@fmls) ((lambda (dO11b7@t) ((lambda (dO11b9@ls/false) (if dO11b9@ls/false (apply (lambda (dO11bb@id* dO11bc@last) ((letrec ((dO11bf@f (lambda (dO11c1@id*) (if (null? dO11c1@id*) (values) (if (not (dOb59@id? (car dO11c1@id*))) (dOe3e@syntax-violation '#f '"not an identifier" dO11b3@stx (car dO11c1@id*)) (begin (dO11bf@f (cdr dO11c1@id*)) (if (dOb65@bound-id-member? (car dO11c1@id*) (cdr dO11c1@id*)) (dOe3e@syntax-violation '#f '"duplicate binding" dO11b3@stx (car dO11c1@id*)) (void)))))))) dO11bf@f) (if (dOb59@id? dO11bc@last) (cons dO11bc@last dO11bb@id*) (if (dOb4f@syntax-null? dO11bc@last) dO11bb@id* (dOe3e@syntax-violation '#f '"not an identifier" dO11b3@stx dO11bc@last))))) dO11b9@ls/false) ((lambda (dO11c3@t) ((lambda (dO11c5@ls/false) (if dO11c5@ls/false (apply (lambda () (dOe3e@syntax-violation '#f '"malformed binding form" dO11b3@stx dO11b4@fmls)) dO11c5@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO11c3@t))) (dOd5e@syntax-dispatch dO11c3@t '_))) dO11b7@t))) (dOd5e@syntax-dispatch dO11b7@t '#(each+ any () any)))) dO11b4@fmls))) (set! dOd1a@let-macro (lambda (dO11c7@stx) ((lambda (dO11c9@t) ((lambda (dO11cb@ls/false) (if dO11cb@ls/false (apply (lambda (dO11cd@lhs* dO11ce@rhs* dO11cf@b dO11d0@b*) (if (dOb61@valid-bound-ids? dO11cd@lhs*) (dOd14@bless (cons (cons 'lambda (cons dO11cd@lhs* (cons dO11cf@b dO11d0@b*))) dO11ce@rhs*)) (dOd18@invalid-fmls-error dO11c7@stx dO11cd@lhs*))) dO11cb@ls/false) ((lambda (dO11d5@t) ((lambda (dO11d7@ls/false) (if (and dO11d7@ls/false (apply (lambda (dO11d9@f dO11da@lhs* dO11db@rhs* dO11dc@b dO11dd@b*) (dOb59@id? dO11d9@f)) dO11d7@ls/false)) (apply (lambda (dO11e3@f dO11e4@lhs* dO11e5@rhs* dO11e6@b dO11e7@b*) (if (dOb61@valid-bound-ids? dO11e4@lhs*) (dOd14@bless (cons (list 'letrec (list (list dO11e3@f (cons 'lambda (cons dO11e4@lhs* (cons dO11e6@b dO11e7@b*))))) dO11e3@f) dO11e5@rhs*)) (dOd18@invalid-fmls-error dO11c7@stx dO11e4@lhs*))) dO11d7@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO11d5@t))) (dOd5e@syntax-dispatch dO11d5@t '(_ any #(each (any any)) any . each-any)))) dO11c9@t))) (dOd5e@syntax-dispatch dO11c9@t '(_ #(each (any any)) any . each-any)))) dO11c7@stx))) (set! dOd1c@let-values-macro (lambda (dO11ed@stx) ((lambda (dO11f0@rename dO11f2@rename*) (begin (set! dO11f0@rename (lambda (dO1255@x dO1256@old* dO1257@new*) (begin (if (not (dOb59@id? dO1255@x)) (dOe3e@syntax-violation '#f '"not an indentifier" dO11ed@stx dO1255@x) (void)) (if (dOb65@bound-id-member? dO1255@x dO1256@old*) (dOe3e@syntax-violation '#f '"duplicate binding" dO11ed@stx dO1255@x) (void)) ((lambda (dO125b@y) (values dO125b@y (cons dO1255@x dO1256@old*) (cons dO125b@y dO1257@new*))) (gensym (dOe44@syntax->datum dO1255@x)))))) (set! dO11f2@rename* (lambda (dO1243@x* dO1244@old* dO1245@new*) (if (null? dO1243@x*) (values '() dO1244@old* dO1245@new*) (call-with-values (lambda () (dO11f0@rename (car dO1243@x*) dO1244@old* dO1245@new*)) (lambda (dO1249@x dO124a@old* dO124b@new*) (call-with-values (lambda () (dO11f2@rename* (cdr dO1243@x*) dO124a@old* dO124b@new*)) (lambda (dO124f@x* dO1250@old* dO1251@new*) (values (cons dO1249@x dO124f@x*) dO1250@old* dO1251@new*)))))))) ((lambda (dO11f3@t) ((lambda (dO11f5@ls/false) (if dO11f5@ls/false (apply (lambda (dO11f7@b dO11f8@b*) (cons* (dOd14@bless 'let) '() dO11f7@b dO11f8@b*)) dO11f5@ls/false) ((lambda (dO11fb@t) ((lambda (dO11fd@ls/false) (if dO11fd@ls/false (apply (lambda (dO11ff@lhs* dO1200@rhs* dO1201@b dO1202@b*) (dOd14@bless ((letrec ((dO1207@f (lambda (dO1209@lhs* dO120a@rhs* dO120b@old* dO120c@new*) (if (null? dO1209@lhs*) (cons 'let (cons (map list dO120b@old* dO120c@new*) (cons dO1201@b dO1202@b*))) ((lambda (dO1211@t) ((lambda (dO1213@ls/false) (if dO1213@ls/false (apply (lambda (dO1215@x*) (call-with-values (lambda () (dO11f2@rename* dO1215@x* dO120b@old* dO120c@new*)) (lambda (dO121d@dO1218 dO121e@dO121a dO121f@dO121c) ((lambda (dO1223@new* dO1224@old* dO1225@y*) (list 'call-with-values (list 'lambda '() (car dO120a@rhs*)) (list 'lambda dO1225@y* (dO1207@f (cdr dO1209@lhs*) (cdr dO120a@rhs*) dO1224@old* dO1223@new*)))) dO121f@dO121c dO121e@dO121a dO121d@dO1218)))) dO1213@ls/false) ((lambda (dO1229@t) ((lambda (dO122b@ls/false) (if dO122b@ls/false (apply (lambda (dO122d@x* dO122e@x) (call-with-values (lambda () (dO11f0@rename dO122e@x dO120b@old* dO120c@new*)) (lambda (dO1231@y dO1232@old* dO1233@new*) (call-with-values (lambda () (dO11f2@rename* dO122d@x* dO1232@old* dO1233@new*)) (lambda (dO1237@y* dO1238@old* dO1239@new*) (list 'call-with-values (list 'lambda '() (car dO120a@rhs*)) (list 'lambda (append dO1237@y* dO1231@y) (dO1207@f (cdr dO1209@lhs*) (cdr dO120a@rhs*) dO1238@old* dO1239@new*)))))))) dO122b@ls/false) ((lambda (dO123d@t) ((lambda (dO123f@ls/false) (if dO123f@ls/false (apply (lambda (dO1241@others) (dOe3e@syntax-violation '#f '"malformed bindings" dO11ed@stx dO1241@others)) dO123f@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO123d@t))) (dOd5e@syntax-dispatch dO123d@t 'any))) dO1229@t))) (dOd5e@syntax-dispatch dO1229@t '#(each+ any () any)))) dO1211@t))) (dOd5e@syntax-dispatch dO1211@t 'each-any))) (car dO1209@lhs*)))))) dO1207@f) dO11ff@lhs* dO1200@rhs* '() '()))) dO11fd@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO11fb@t))) (dOd5e@syntax-dispatch dO11fb@t '(_ #(each (any any)) any . each-any)))) dO11f3@t))) (dOd5e@syntax-dispatch dO11f3@t '(_ () any . each-any)))) dO11ed@stx))) '#f '#f))) (set! dOd1e@let*-values-macro (lambda (dO125d@stx) ((lambda (dO1260@check) (begin (set! dO1260@check (lambda (dO128f@x*) (if (not (null? dO128f@x*)) ((lambda (dO1291@x) (begin (if (not (dOb59@id? dO1291@x)) (dOe3e@syntax-violation '#f '"not an identifier" dO125d@stx dO1291@x) (void)) (dO1260@check (cdr dO128f@x*)) (if (dOb65@bound-id-member? dO1291@x (cdr dO128f@x*)) (dOe3e@syntax-violation '#f '"duplicate identifier" dO125d@stx dO1291@x) (void)))) (car dO128f@x*)) (void)))) ((lambda (dO1261@t) ((lambda (dO1263@ls/false) (if dO1263@ls/false (apply (lambda (dO1265@b dO1266@b*) (cons* (dOd14@bless 'let) '() dO1265@b dO1266@b*)) dO1263@ls/false) ((lambda (dO1269@t) ((lambda (dO126b@ls/false) (if dO126b@ls/false (apply (lambda (dO126d@lhs* dO126e@rhs* dO126f@b dO1270@b*) (dOd14@bless ((letrec ((dO1275@f (lambda (dO1277@lhs* dO1278@rhs*) (if (null? dO1277@lhs*) (cons 'begin (cons dO126f@b dO1270@b*)) ((lambda (dO127b@t) ((lambda (dO127d@ls/false) (if dO127d@ls/false (apply (lambda (dO127f@x*) (begin (dO1260@check dO127f@x*) (list 'call-with-values (list 'lambda '() (car dO1278@rhs*)) (list 'lambda dO127f@x* (dO1275@f (cdr dO1277@lhs*) (cdr dO1278@rhs*)))))) dO127d@ls/false) ((lambda (dO1281@t) ((lambda (dO1283@ls/false) (if dO1283@ls/false (apply (lambda (dO1285@x* dO1286@x) (begin (dO1260@check (cons dO1286@x dO1285@x*)) (list 'call-with-values (list 'lambda '() (car dO1278@rhs*)) (list 'lambda (append dO1285@x* dO1286@x) (dO1275@f (cdr dO1277@lhs*) (cdr dO1278@rhs*)))))) dO1283@ls/false) ((lambda (dO1289@t) ((lambda (dO128b@ls/false) (if dO128b@ls/false (apply (lambda (dO128d@others) (dOe3e@syntax-violation '#f '"malformed bindings" dO125d@stx dO128d@others)) dO128b@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1289@t))) (dOd5e@syntax-dispatch dO1289@t 'any))) dO1281@t))) (dOd5e@syntax-dispatch dO1281@t '#(each+ any () any)))) dO127b@t))) (dOd5e@syntax-dispatch dO127b@t 'each-any))) (car dO1277@lhs*)))))) dO1275@f) dO126d@lhs* dO126e@rhs*))) dO126b@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1269@t))) (dOd5e@syntax-dispatch dO1269@t '(_ #(each (any any)) any . each-any)))) dO1261@t))) (dOd5e@syntax-dispatch dO1261@t '(_ () any . each-any)))) dO125d@stx))) '#f))) (set! dOd20@trace-lambda-macro (lambda (dO1293@stx) ((lambda (dO1295@t) ((lambda (dO1297@ls/false) (if dO1297@ls/false (apply (lambda (dO1299@who dO129a@fmls dO129b@b dO129c@b*) (if (dOb61@valid-bound-ids? dO129a@fmls) (dOd14@bless (list 'make-traced-procedure (list 'quote dO1299@who) (cons 'lambda (cons dO129a@fmls (cons dO129b@b dO129c@b*))))) (dOd18@invalid-fmls-error dO1293@stx dO129a@fmls))) dO1297@ls/false) ((lambda (dO12a1@t) ((lambda (dO12a3@ls/false) (if dO12a3@ls/false (apply (lambda (dO12a5@who dO12a6@fmls dO12a7@last dO12a8@b dO12a9@b*) (if (dOb61@valid-bound-ids? (cons dO12a7@last dO12a6@fmls)) (dOd14@bless (list 'make-traced-procedure (list 'quote dO12a5@who) (cons 'lambda (cons (append dO12a6@fmls dO12a7@last) (cons dO12a8@b dO12a9@b*))))) (dOd18@invalid-fmls-error dO1293@stx (append dO12a6@fmls dO12a7@last)))) dO12a3@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO12a1@t))) (dOd5e@syntax-dispatch dO12a1@t '(_ any #(each+ any () any) any . each-any)))) dO1295@t))) (dOd5e@syntax-dispatch dO1295@t '(_ any each-any any . each-any)))) dO1293@stx))) (set! dOd22@trace-define-macro (lambda (dO12af@stx) ((lambda (dO12b1@t) ((lambda (dO12b3@ls/false) (if dO12b3@ls/false (apply (lambda (dO12b5@who dO12b6@fmls dO12b7@b dO12b8@b*) (if (dOb61@valid-bound-ids? dO12b6@fmls) (dOd14@bless (list 'define dO12b5@who (list 'make-traced-procedure (list 'quote dO12b5@who) (cons 'lambda (cons dO12b6@fmls (cons dO12b7@b dO12b8@b*)))))) (dOd18@invalid-fmls-error dO12af@stx dO12b6@fmls))) dO12b3@ls/false) ((lambda (dO12bd@t) ((lambda (dO12bf@ls/false) (if dO12bf@ls/false (apply (lambda (dO12c1@who dO12c2@fmls dO12c3@last dO12c4@b dO12c5@b*) (if (dOb61@valid-bound-ids? (cons dO12c3@last dO12c2@fmls)) (dOd14@bless (list 'define dO12c1@who (list 'make-traced-procedure (list 'quote dO12c1@who) (cons 'lambda (cons (append dO12c2@fmls dO12c3@last) (cons dO12c4@b dO12c5@b*)))))) (dOd18@invalid-fmls-error dO12af@stx (append dO12c2@fmls dO12c3@last)))) dO12bf@ls/false) ((lambda (dO12cb@t) ((lambda (dO12cd@ls/false) (if dO12cd@ls/false (apply (lambda (dO12cf@who dO12d0@expr) (if (dOb59@id? dO12cf@who) (dOd14@bless (list 'define dO12cf@who (list 'let (list (list 'v dO12d0@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote dO12cf@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (dOe3e@syntax-violation '#f '"invalid name" dO12af@stx))) dO12cd@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO12cb@t))) (dOd5e@syntax-dispatch dO12cb@t '(_ any any)))) dO12bd@t))) (dOd5e@syntax-dispatch dO12bd@t '(_ (any . #(each+ any () any)) any . each-any)))) dO12b1@t))) (dOd5e@syntax-dispatch dO12b1@t '(_ (any . each-any) any . each-any)))) dO12af@stx))) (set! dOd24@trace-define-syntax-macro (lambda (dO12d3@stx) ((lambda (dO12d5@t) ((lambda (dO12d7@ls/false) (if dO12d7@ls/false (apply (lambda (dO12d9@who dO12da@expr) (if (dOb59@id? dO12d9@who) (dOd14@bless (list 'define-syntax dO12d9@who (list 'make-traced-macro (list 'quote dO12d9@who) dO12da@expr))) (dOe3e@syntax-violation '#f '"invalid name" dO12d3@stx))) dO12d7@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO12d5@t))) (dOd5e@syntax-dispatch dO12d5@t '(_ any any)))) dO12d3@stx))) (set! dOd26@trace-let/rec-syntax (lambda (dO12dd@who) (lambda (dO12df@stx) ((lambda (dO12e1@t) ((lambda (dO12e3@ls/false) (if dO12e3@ls/false (apply (lambda (dO12e5@lhs* dO12e6@rhs* dO12e7@b dO12e8@b*) (if (dOb61@valid-bound-ids? dO12e5@lhs*) ((lambda (dO12ed@rhs*) (dOd14@bless (cons dO12dd@who (cons (map list dO12e5@lhs* dO12ed@rhs*) (cons dO12e7@b dO12e8@b*))))) (map (lambda (dO12ef@lhs dO12f0@rhs) (list 'make-traced-macro (list 'quote dO12ef@lhs) dO12f0@rhs)) dO12e5@lhs* dO12e6@rhs*)) (dOd18@invalid-fmls-error dO12df@stx dO12e5@lhs*))) dO12e3@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO12e1@t))) (dOd5e@syntax-dispatch dO12e1@t '(_ #(each (any any)) any . each-any)))) dO12df@stx)))) (set! dOd28@trace-let-syntax-macro (dOd26@trace-let/rec-syntax 'let-syntax)) (set! dOd2a@trace-letrec-syntax-macro (dOd26@trace-let/rec-syntax 'letrec-syntax)) (set! dOd2c@guard-macro (lambda (dO12f3@x) ((lambda (dO12f6@gen-clauses) (begin (set! dO12f6@gen-clauses (lambda (dO130d@con dO130e@outerk dO130f@clause*) ((lambda (dO1314@f dO1316@f*) (begin (set! dO1314@f (lambda (dO134d@x dO134e@k) ((lambda (dO1351@t) ((lambda (dO1353@ls/false) (if dO1353@ls/false (apply (lambda (dO1355@e dO1356@p) ((lambda (dO1359@t) (list 'let (list (list dO1359@t dO1355@e)) (list 'if dO1359@t (list dO1356@p dO1359@t) dO134e@k))) (gensym))) dO1353@ls/false) ((lambda (dO135b@t) ((lambda (dO135d@ls/false) (if dO135d@ls/false (apply (lambda (dO135f@e) ((lambda (dO1361@t) (list 'let (list (list dO1361@t dO135f@e)) (list 'if dO1361@t dO1361@t dO134e@k))) (gensym))) dO135d@ls/false) ((lambda (dO1363@t) ((lambda (dO1365@ls/false) (if dO1365@ls/false (apply (lambda (dO1367@e dO1368@v dO1369@v*) (list 'if dO1367@e (cons 'begin (cons dO1368@v dO1369@v*)) dO134e@k)) dO1365@ls/false) ((lambda (dO136d@t) ((lambda (dO136f@ls/false) (if dO136f@ls/false (apply (lambda () (dOe3e@syntax-violation '#f '"invalid guard clause" dO134d@x)) dO136f@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO136d@t))) (dOd5e@syntax-dispatch dO136d@t '_))) dO1363@t))) (dOd5e@syntax-dispatch dO1363@t '(any any . each-any)))) dO135b@t))) (dOd5e@syntax-dispatch dO135b@t '(any)))) dO1351@t))) (dOd5e@syntax-dispatch dO1351@t '(any #(scheme-id =>) any)))) dO134d@x))) (set! dO1316@f* (lambda (dO1323@x*) ((lambda (dO1325@t) ((lambda (dO1327@ls/false) (if dO1327@ls/false (apply (lambda () ((lambda (dO1329@g) (values (list dO1329@g (list 'lambda '() (list 'raise-continuable dO130d@con))) dO1329@g)) (gensym))) dO1327@ls/false) ((lambda (dO132b@t) ((lambda (dO132d@ls/false) (if dO132d@ls/false (apply (lambda (dO132f@e dO1330@e*) (values (cons 'begin (cons dO132f@e dO1330@e*)) '#f)) dO132d@ls/false) ((lambda (dO1333@t) ((lambda (dO1335@ls/false) (if dO1335@ls/false (apply (lambda (dO1337@cls dO1338@cls*) (call-with-values (lambda () (dO1316@f* dO1338@cls*)) (lambda (dO133f@dO133c dO1340@dO133e) ((lambda (dO1343@g dO1344@e) (values (dO1314@f dO1337@cls dO1344@e) dO1343@g)) dO1340@dO133e dO133f@dO133c)))) dO1335@ls/false) ((lambda (dO1347@t) ((lambda (dO1349@ls/false) (if dO1349@ls/false (apply (lambda (dO134b@others) (dOe3e@syntax-violation '#f '"invalid guard clause" dO134b@others)) dO1349@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1347@t))) (dOd5e@syntax-dispatch dO1347@t 'any))) dO1333@t))) (dOd5e@syntax-dispatch dO1333@t '(any . any)))) dO132b@t))) (dOd5e@syntax-dispatch dO132b@t '((#(scheme-id else) any . each-any))))) dO1325@t))) (dOd5e@syntax-dispatch dO1325@t '()))) dO1323@x*))) (call-with-values (lambda () (dO1316@f* dO130f@clause*)) (lambda (dO131b@dO1318 dO131c@dO131a) ((lambda (dO131f@raisek dO1320@code) (if dO131f@raisek (list (list 'call/cc (list 'lambda (list dO131f@raisek) (list dO130e@outerk (list 'lambda '() dO1320@code))))) (list dO130e@outerk (list 'lambda '() dO1320@code)))) dO131c@dO131a dO131b@dO1318))))) '#f '#f))) ((lambda (dO12f7@t) ((lambda (dO12f9@ls/false) (if (and dO12f9@ls/false (apply (lambda (dO12fb@con dO12fc@clause* dO12fd@b dO12fe@b*) (dOb59@id? dO12fb@con)) dO12f9@ls/false)) (apply (lambda (dO1303@con dO1304@clause* dO1305@b dO1306@b*) ((lambda (dO130b@outerk) (dOd14@bless (list (list 'call/cc (list 'lambda (list dO130b@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list dO1303@con) (dO12f6@gen-clauses dO1303@con dO130b@outerk dO1304@clause*)) (cons 'lambda (cons '() (cons dO1305@b dO1306@b*)))))))))) (gensym))) dO12f9@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO12f7@t))) (dOd5e@syntax-dispatch dO12f7@t '(_ (any . each-any) any . each-any)))) dO12f3@x))) '#f))) (set! dOd2e@define-enumeration-macro (lambda (dO1371@stx) ((lambda (dO1374@set? dO1376@remove-dups) (begin (set! dO1374@set? (lambda (dO138d@x) (or (null? dO138d@x) (and (not (memq (car dO138d@x) (cdr dO138d@x))) (dO1374@set? (cdr dO138d@x)))))) (set! dO1376@remove-dups (lambda (dO138b@ls) (if (null? dO138b@ls) '() (cons (car dO138b@ls) (dO1376@remove-dups (remq (car dO138b@ls) (cdr dO138b@ls))))))) ((lambda (dO1377@t) ((lambda (dO1379@ls/false) (if (and dO1379@ls/false (apply (lambda (dO137b@name dO137c@id* dO137d@maker) (and (dOb59@id? dO137b@name) (dOb59@id? dO137d@maker) (for-all dOb59@id? dO137c@id*))) dO1379@ls/false)) (apply (lambda (dO1381@name dO1382@id* dO1383@maker) ((lambda (dO1387@name* dO1388@mk) (dOd14@bless (list 'begin (list 'define dO1388@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote dO1387@name*)))) (list 'define-syntax dO1381@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote dO1387@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote dO1381@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax dO1383@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote dO1383@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote dO1387@name*)) (cons 'syntax-violation (cons (list 'quote dO1383@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons dO1388@mk '('(n* ...)))))))))))) (dO1376@remove-dups (dOe44@syntax->datum dO1382@id*)) (gensym))) dO1379@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1377@t))) (dOd5e@syntax-dispatch dO1377@t '(_ any each-any any)))) dO1371@stx))) '#f '#f))) (set! dOd30@time-macro (lambda (dO138f@stx) ((lambda (dO1391@t) ((lambda (dO1393@ls/false) (if dO1393@ls/false (apply (lambda (dO1395@expr) (dOd14@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() dO1395@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) dO1393@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1391@t))) (dOd5e@syntax-dispatch dO1391@t '(_ any)))) dO138f@stx))) (set! dOd32@delay-macro (lambda (dO1397@stx) ((lambda (dO1399@t) ((lambda (dO139b@ls/false) (if dO139b@ls/false (apply (lambda (dO139d@expr) (dOd14@bless (list 'make-promise (list 'lambda '() dO139d@expr)))) dO139b@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1399@t))) (dOd5e@syntax-dispatch dO1399@t '(_ any)))) dO1397@stx))) (set! dOd34@assert-macro (lambda (dO139f@stx) ((lambda (dO13a1@t) ((lambda (dO13a3@ls/false) (if dO13a3@ls/false (apply (lambda (dO13a5@expr) ((lambda (dO13a7@pos) (dOd14@bless (list 'unless dO13a5@expr (list 'assertion-error (list 'quote dO13a5@expr) (list 'quote dO13a7@pos))))) (or (dOe36@expression-position dO139f@stx) (dOe36@expression-position dO13a5@expr)))) dO13a3@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO13a1@t))) (dOd5e@syntax-dispatch dO13a1@t '(_ any)))) dO139f@stx))) (set! dOd36@endianness-macro (lambda (dO13a9@stx) ((lambda (dO13ab@t) ((lambda (dO13ad@ls/false) (if dO13ad@ls/false (apply (lambda (dO13af@e) ((lambda (dO13b1@t) (if (memv dO13b1@t '(little)) (dOd14@bless ''little) (if (memv dO13b1@t '(big)) (dOd14@bless ''big) (dOe3e@syntax-violation '#f '"endianness must be big or little" dO13a9@stx)))) (dOe44@syntax->datum dO13af@e))) dO13ad@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO13ab@t))) (dOd5e@syntax-dispatch dO13ab@t '(_ any)))) dO13a9@stx))) (set! dOd38@identifier-syntax-macro (lambda (dO13b3@stx) ((lambda (dO13b5@t) ((lambda (dO13b7@ls/false) (if dO13b7@ls/false (apply (lambda (dO13b9@expr) (dOd14@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax dO13b9@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax dO13b9@expr) '((syntax (e* ...)))))))))) dO13b7@ls/false) ((lambda (dO13bb@t) ((lambda (dO13bd@ls/false) (if (and dO13bd@ls/false (apply (lambda (dO13bf@id1 dO13c0@expr1 dO13c1@id2 dO13c2@expr2 dO13c3@expr3) (and (dOb59@id? dO13bf@id1) (dOb59@id? dO13c1@id2) (dOb59@id? dO13c2@expr2))) dO13bd@ls/false)) (apply (lambda (dO13c9@id1 dO13ca@expr1 dO13cb@id2 dO13cc@expr2 dO13cd@expr3) (dOd14@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax dO13ca@expr1)) (list (list 'set! 'id dO13cc@expr2) (list 'syntax dO13cd@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons dO13ca@expr1 '(e* ...))))))))) dO13bd@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO13bb@t))) (dOd5e@syntax-dispatch dO13bb@t '(_ (any any) ((#(scheme-id set!) any any) any))))) dO13b5@t))) (dOd5e@syntax-dispatch dO13b5@t '(_ any)))) dO13b3@stx))) (set! dOd3a@do-macro (lambda (dO13d3@stx) ((lambda (dO13d6@bind) (begin (set! dO13d6@bind (lambda (dO13ed@x) ((lambda (dO13ef@t) ((lambda (dO13f1@ls/false) (if dO13f1@ls/false (apply (lambda (dO13f3@x dO13f4@init) (list dO13f3@x dO13f4@init dO13f3@x)) dO13f1@ls/false) ((lambda (dO13f7@t) ((lambda (dO13f9@ls/false) (if dO13f9@ls/false (apply (lambda (dO13fb@x dO13fc@init dO13fd@step) (list dO13fb@x dO13fc@init dO13fd@step)) dO13f9@ls/false) ((lambda (dO1401@t) ((lambda (dO1403@ls/false) (if dO1403@ls/false (apply (lambda () (dOe3e@syntax-violation '#f '"invalid binding" dO13d3@stx)) dO1403@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1401@t))) (dOd5e@syntax-dispatch dO1401@t '_))) dO13f7@t))) (dOd5e@syntax-dispatch dO13f7@t '(any any any)))) dO13ef@t))) (dOd5e@syntax-dispatch dO13ef@t '(any any)))) dO13ed@x))) ((lambda (dO13d7@t) ((lambda (dO13d9@ls/false) (if dO13d9@ls/false (apply (lambda (dO13db@binding* dO13dc@test dO13dd@expr* dO13de@command*) ((lambda (dO13e3@t) ((lambda (dO13e5@ls/false) (if dO13e5@ls/false (apply (lambda (dO13e7@x* dO13e8@init* dO13e9@step*) (if (dOb61@valid-bound-ids? dO13e7@x*) (dOd14@bless (list 'letrec (list (list 'loop (list 'lambda dO13e7@x* (list 'if dO13dc@test (cons 'begin (cons '(if #f #f) dO13dd@expr*)) (cons 'begin (append dO13de@command* (list (cons 'loop dO13e9@step*)))))))) (cons 'loop dO13e8@init*))) (dOe3e@syntax-violation '#f '"invalid bindings" dO13d3@stx))) dO13e5@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO13e3@t))) (dOd5e@syntax-dispatch dO13e3@t '#(each (any any any))))) (map dO13d6@bind dO13db@binding*))) dO13d9@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO13d7@t))) (dOd5e@syntax-dispatch dO13d7@t '(_ each-any (any . each-any) . each-any)))) dO13d3@stx))) '#f))) (set! dOd3c@let*-macro (lambda (dO1405@stx) ((lambda (dO1407@t) ((lambda (dO1409@ls/false) (if (and dO1409@ls/false (apply (lambda (dO140b@lhs* dO140c@rhs* dO140d@b dO140e@b*) (for-all dOb59@id? dO140b@lhs*)) dO1409@ls/false)) (apply (lambda (dO1413@lhs* dO1414@rhs* dO1415@b dO1416@b*) (dOd14@bless ((letrec ((dO141b@f (lambda (dO141d@x*) (if (null? dO141d@x*) (cons 'let (cons '() (cons dO1415@b dO1416@b*))) (list 'let (list (car dO141d@x*)) (dO141b@f (cdr dO141d@x*))))))) dO141b@f) (map list dO1413@lhs* dO1414@rhs*)))) dO1409@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1407@t))) (dOd5e@syntax-dispatch dO1407@t '(_ #(each (any any)) any . each-any)))) dO1405@stx))) (set! dOd3e@or-macro (lambda (dO141f@stx) ((lambda (dO1421@t) ((lambda (dO1423@ls/false) (if dO1423@ls/false (apply (lambda () '#f) dO1423@ls/false) ((lambda (dO1425@t) ((lambda (dO1427@ls/false) (if dO1427@ls/false (apply (lambda (dO1429@e dO142a@e*) (dOd14@bless ((letrec ((dO142d@f (lambda (dO142f@e dO1430@e*) (if (null? dO1430@e*) (list 'begin '#f dO142f@e) (list 'let (list (list 't dO142f@e)) (list 'if 't 't (dO142d@f (car dO1430@e*) (cdr dO1430@e*)))))))) dO142d@f) dO1429@e dO142a@e*))) dO1427@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1425@t))) (dOd5e@syntax-dispatch dO1425@t '(_ any . each-any)))) dO1421@t))) (dOd5e@syntax-dispatch dO1421@t '(_)))) dO141f@stx))) (set! dOd40@and-macro (lambda (dO1433@stx) ((lambda (dO1435@t) ((lambda (dO1437@ls/false) (if dO1437@ls/false (apply (lambda () '#t) dO1437@ls/false) ((lambda (dO1439@t) ((lambda (dO143b@ls/false) (if dO143b@ls/false (apply (lambda (dO143d@e dO143e@e*) (dOd14@bless ((letrec ((dO1441@f (lambda (dO1443@e dO1444@e*) (if (null? dO1444@e*) (list 'begin '#f dO1443@e) (cons 'if (cons dO1443@e (cons (dO1441@f (car dO1444@e*) (cdr dO1444@e*)) '(#f)))))))) dO1441@f) dO143d@e dO143e@e*))) dO143b@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1439@t))) (dOd5e@syntax-dispatch dO1439@t '(_ any . each-any)))) dO1435@t))) (dOd5e@syntax-dispatch dO1435@t '(_)))) dO1433@stx))) (set! dOd42@cond-macro (lambda (dO1447@stx) ((lambda (dO1449@t) ((lambda (dO144b@ls/false) (if dO144b@ls/false (apply (lambda (dO144d@cls dO144e@cls*) (dOd14@bless ((letrec ((dO1451@f (lambda (dO1453@cls dO1454@cls*) (if (null? dO1454@cls*) ((lambda (dO1457@t) ((lambda (dO1459@ls/false) (if dO1459@ls/false (apply (lambda (dO145b@e dO145c@e*) (cons 'begin (cons dO145b@e dO145c@e*))) dO1459@ls/false) ((lambda (dO145f@t) ((lambda (dO1461@ls/false) (if dO1461@ls/false (apply (lambda (dO1463@e dO1464@p) (list 'let (list (list 't dO1463@e)) (list 'if 't (cons dO1464@p '(t))))) dO1461@ls/false) ((lambda (dO1467@t) ((lambda (dO1469@ls/false) (if dO1469@ls/false (apply (lambda (dO146b@e) (cons 'or (cons dO146b@e '((if #f #f))))) dO1469@ls/false) ((lambda (dO146d@t) ((lambda (dO146f@ls/false) (if dO146f@ls/false (apply (lambda (dO1471@e dO1472@e*) (list 'if dO1471@e (cons 'begin dO1472@e*))) dO146f@ls/false) ((lambda (dO1475@t) ((lambda (dO1477@ls/false) (if dO1477@ls/false (apply (lambda () (dOe3e@syntax-violation '#f '"invalid last clause" dO1447@stx)) dO1477@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1475@t))) (dOd5e@syntax-dispatch dO1475@t '_))) dO146d@t))) (dOd5e@syntax-dispatch dO146d@t '(any . each-any)))) dO1467@t))) (dOd5e@syntax-dispatch dO1467@t '(any)))) dO145f@t))) (dOd5e@syntax-dispatch dO145f@t '(any #(scheme-id =>) any)))) dO1457@t))) (dOd5e@syntax-dispatch dO1457@t '(#(scheme-id else) any . each-any)))) dO1453@cls) ((lambda (dO1479@t) ((lambda (dO147b@ls/false) (if dO147b@ls/false (apply (lambda (dO147d@e dO147e@e*) (dOe3e@syntax-violation '#f '"incorrect position of keyword else" dO1447@stx)) dO147b@ls/false) ((lambda (dO1481@t) ((lambda (dO1483@ls/false) (if dO1483@ls/false (apply (lambda (dO1485@e dO1486@p) (list 'let (list (list 't dO1485@e)) (list 'if 't (cons dO1486@p '(t)) (dO1451@f (car dO1454@cls*) (cdr dO1454@cls*))))) dO1483@ls/false) ((lambda (dO1489@t) ((lambda (dO148b@ls/false) (if dO148b@ls/false (apply (lambda (dO148d@e) (list 'or dO148d@e (dO1451@f (car dO1454@cls*) (cdr dO1454@cls*)))) dO148b@ls/false) ((lambda (dO148f@t) ((lambda (dO1491@ls/false) (if dO1491@ls/false (apply (lambda (dO1493@e dO1494@e*) (list 'if dO1493@e (cons 'begin dO1494@e*) (dO1451@f (car dO1454@cls*) (cdr dO1454@cls*)))) dO1491@ls/false) ((lambda (dO1497@t) ((lambda (dO1499@ls/false) (if dO1499@ls/false (apply (lambda () (dOe3e@syntax-violation '#f '"invalid last clause" dO1447@stx)) dO1499@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1497@t))) (dOd5e@syntax-dispatch dO1497@t '_))) dO148f@t))) (dOd5e@syntax-dispatch dO148f@t '(any . each-any)))) dO1489@t))) (dOd5e@syntax-dispatch dO1489@t '(any)))) dO1481@t))) (dOd5e@syntax-dispatch dO1481@t '(any #(scheme-id =>) any)))) dO1479@t))) (dOd5e@syntax-dispatch dO1479@t '(#(scheme-id else) any . each-any)))) dO1453@cls))))) dO1451@f) dO144d@cls dO144e@cls*))) dO144b@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1449@t))) (dOd5e@syntax-dispatch dO1449@t '(_ any . each-any)))) dO1447@stx))) (set! dOd44@do-include (lambda (dO149b@stx dO149c@id dO149d@filename) ((lambda (dO14a1@filename) (begin (if (not (and (string? dO14a1@filename) (dOb59@id? dO149c@id))) (dOe3e@syntax-violation '#f '"invalid syntax" dO149b@stx) (void)) (cons (dOd14@bless 'begin) (with-input-from-file dO14a1@filename (lambda () ((letrec ((dO14a3@f (lambda (dO14a5@ls) ((lambda (dO14a7@x) (if (eof-object? dO14a7@x) (reverse dO14a5@ls) (dO14a3@f (cons (dOb39@datum->stx dO149c@id dO14a7@x) dO14a5@ls)))) (dO6ab@dO57d@read-annotated))))) dO14a3@f) '())))))) (dOb6d@stx->datum dO149d@filename)))) (set! dOd46@include-macro (lambda (dO14a9@e) ((lambda (dO14ab@t) ((lambda (dO14ad@ls/false) (if dO14ad@ls/false (apply (lambda (dO14af@id dO14b0@filename) (dOd44@do-include dO14a9@e dO14af@id dO14b0@filename)) dO14ad@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO14ab@t))) (dOd5e@syntax-dispatch dO14ab@t '(any any)))) dO14a9@e))) (set! dOd48@include-into-macro (lambda (dO14b3@e) ((lambda (dO14b5@t) ((lambda (dO14b7@ls/false) (if dO14b7@ls/false (apply (lambda (dO14b9@id dO14ba@filename) (dOd44@do-include dO14b3@e dO14b9@id dO14ba@filename)) dO14b7@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO14b5@t))) (dOd5e@syntax-dispatch dO14b5@t '(_ any any)))) dO14b3@e))) (set! dOd4a@syntax-rules-macro (lambda (dO14bd@e) ((lambda (dO14bf@t) ((lambda (dO14c1@ls/false) (if dO14c1@ls/false (apply (lambda (dO14c3@lits dO14c4@pat* dO14c5@tmp*) (begin (dOd64@verify-literals dO14c3@lits dO14bd@e) (dOd14@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons dO14c3@lits (map (lambda (dO14c9@pat dO14ca@tmp) ((lambda (dO14cd@t) ((lambda (dO14cf@ls/false) (if dO14cf@ls/false (apply (lambda (dO14d1@rest) (list (cons 'g dO14d1@rest) (list 'syntax dO14ca@tmp))) dO14cf@ls/false) ((lambda (dO14d3@t) ((lambda (dO14d5@ls/false) (if dO14d5@ls/false (apply (lambda () (dOe3e@syntax-violation '#f '"invalid syntax-rules pattern" dO14bd@e dO14c9@pat)) dO14d5@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO14d3@t))) (dOd5e@syntax-dispatch dO14d3@t '_))) dO14cd@t))) (dOd5e@syntax-dispatch dO14cd@t '(_ . any)))) dO14c9@pat)) dO14c4@pat* dO14c5@tmp*)))))))) dO14c1@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO14bf@t))) (dOd5e@syntax-dispatch dO14bf@t '(_ each-any . #(each (any any)))))) dO14bd@e))) (set! dOd4c@quasiquote-macro ((lambda () ((lambda (dO14d8@datum dO14f4@quasicons* dO14f6@quasicons dO14f8@quasiappend dO14fa@quasivector dO14fc@vquasi dO14fe@quasi) (begin (set! dO14d8@datum (lambda (dO15d9@x) (list (dOce8@scheme-stx 'quote) (dOb41@mkstx dO15d9@x '() '() '())))) (set! dO14f4@quasicons* (lambda (dO15d1@x dO15d2@y) ((letrec ((dO15d5@f (lambda (dO15d7@x) (if (null? dO15d7@x) dO15d2@y (dO14f6@quasicons (car dO15d7@x) (dO15d5@f (cdr dO15d7@x))))))) dO15d5@f) dO15d1@x))) (set! dO14f6@quasicons (lambda (dO15ab@x dO15ac@y) ((lambda (dO15af@t) ((lambda (dO15b1@ls/false) (if dO15b1@ls/false (apply (lambda (dO15b3@dy) ((lambda (dO15b5@t) ((lambda (dO15b7@ls/false) (if dO15b7@ls/false (apply (lambda (dO15b9@dx) (list (dOce8@scheme-stx 'quote) (cons dO15b9@dx dO15b3@dy))) dO15b7@ls/false) ((lambda (dO15bb@t) ((lambda (dO15bd@ls/false) (if dO15bd@ls/false (apply (lambda () ((lambda (dO15bf@t) ((lambda (dO15c1@ls/false) (if dO15c1@ls/false (apply (lambda () (list (dOce8@scheme-stx 'list) dO15ab@x)) dO15c1@ls/false) ((lambda (dO15c3@t) ((lambda (dO15c5@ls/false) (if dO15c5@ls/false (apply (lambda () (list (dOce8@scheme-stx 'cons) dO15ab@x dO15ac@y)) dO15c5@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO15c3@t))) (dOd5e@syntax-dispatch dO15c3@t '_))) dO15bf@t))) (dOd5e@syntax-dispatch dO15bf@t '()))) dO15b3@dy)) dO15bd@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO15bb@t))) (dOd5e@syntax-dispatch dO15bb@t '_))) dO15b5@t))) (dOd5e@syntax-dispatch dO15b5@t '(#(scheme-id quote) any)))) dO15ab@x)) dO15b1@ls/false) ((lambda (dO15c7@t) ((lambda (dO15c9@ls/false) (if dO15c9@ls/false (apply (lambda (dO15cb@stuff) (cons* (dOce8@scheme-stx 'list) dO15ab@x dO15cb@stuff)) dO15c9@ls/false) ((lambda (dO15cd@t) ((lambda (dO15cf@ls/false) (if dO15cf@ls/false (apply (lambda () (list (dOce8@scheme-stx 'cons) dO15ab@x dO15ac@y)) dO15cf@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO15cd@t))) (dOd5e@syntax-dispatch dO15cd@t '_))) dO15c7@t))) (dOd5e@syntax-dispatch dO15c7@t '(#(scheme-id list) . each-any)))) dO15af@t))) (dOd5e@syntax-dispatch dO15af@t '(#(scheme-id quote) any)))) dO15ac@y))) (set! dO14f8@quasiappend (lambda (dO1591@x dO1592@y) ((lambda (dO1595@ls) (if (null? dO1595@ls) (list (dOce8@scheme-stx 'quote) '()) (if (null? (cdr dO1595@ls)) (car dO1595@ls) (cons* (dOce8@scheme-stx 'append) dO1595@ls)))) ((letrec ((dO1597@f (lambda (dO1599@x) (if (null? dO1599@x) ((lambda (dO159b@t) ((lambda (dO159d@ls/false) (if dO159d@ls/false (apply (lambda () '()) dO159d@ls/false) ((lambda (dO159f@t) ((lambda (dO15a1@ls/false) (if dO15a1@ls/false (apply (lambda () (list dO1592@y)) dO15a1@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO159f@t))) (dOd5e@syntax-dispatch dO159f@t '_))) dO159b@t))) (dOd5e@syntax-dispatch dO159b@t '(#(scheme-id quote) ())))) dO1592@y) ((lambda (dO15a3@t) ((lambda (dO15a5@ls/false) (if dO15a5@ls/false (apply (lambda () (dO1597@f (cdr dO1599@x))) dO15a5@ls/false) ((lambda (dO15a7@t) ((lambda (dO15a9@ls/false) (if dO15a9@ls/false (apply (lambda () (cons (car dO1599@x) (dO1597@f (cdr dO1599@x)))) dO15a9@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO15a7@t))) (dOd5e@syntax-dispatch dO15a7@t '_))) dO15a3@t))) (dOd5e@syntax-dispatch dO15a3@t '(#(scheme-id quote) ())))) (car dO1599@x)))))) dO1597@f) dO1591@x)))) (set! dO14fa@quasivector (lambda (dO155f@x) ((lambda (dO1561@pat-x) ((lambda (dO1563@t) ((lambda (dO1565@ls/false) (if dO1565@ls/false (apply (lambda (dO1567@x*) (list (dOce8@scheme-stx 'quote) (list->vector dO1567@x*))) dO1565@ls/false) ((lambda (dO1569@t) ((lambda (dO156b@ls/false) (if dO156b@ls/false (apply (lambda () ((letrec ((dO156d@f (lambda (dO156f@x dO1570@k) ((lambda (dO1573@t) ((lambda (dO1575@ls/false) (if dO1575@ls/false (apply (lambda (dO1577@x*) (dO1570@k (map (lambda (dO1579@x) (list (dOce8@scheme-stx 'quote) dO1579@x)) dO1577@x*))) dO1575@ls/false) ((lambda (dO157b@t) ((lambda (dO157d@ls/false) (if dO157d@ls/false (apply (lambda (dO157f@x*) (dO1570@k dO157f@x*)) dO157d@ls/false) ((lambda (dO1581@t) ((lambda (dO1583@ls/false) (if dO1583@ls/false (apply (lambda (dO1585@x dO1586@y) (dO156d@f dO1586@y (lambda (dO1589@ls) (dO1570@k (cons dO1585@x dO1589@ls))))) dO1583@ls/false) ((lambda (dO158b@t) ((lambda (dO158d@ls/false) (if dO158d@ls/false (apply (lambda () (list (dOce8@scheme-stx 'list->vector) dO1561@pat-x)) dO158d@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO158b@t))) (dOd5e@syntax-dispatch dO158b@t '_))) dO1581@t))) (dOd5e@syntax-dispatch dO1581@t '(#(scheme-id cons) any any)))) dO157b@t))) (dOd5e@syntax-dispatch dO157b@t '(#(scheme-id list) . each-any)))) dO1573@t))) (dOd5e@syntax-dispatch dO1573@t '(#(scheme-id quote) each-any)))) dO156f@x)))) dO156d@f) dO155f@x (lambda (dO158f@ls) (cons* (dOce8@scheme-stx 'vector) dO158f@ls)))) dO156b@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1569@t))) (dOd5e@syntax-dispatch dO1569@t '_))) dO1563@t))) (dOd5e@syntax-dispatch dO1563@t '(#(scheme-id quote) each-any)))) dO1561@pat-x)) dO155f@x))) (set! dO14fc@vquasi (lambda (dO153d@p dO153e@lev) ((lambda (dO1541@t) ((lambda (dO1543@ls/false) (if dO1543@ls/false (apply (lambda (dO1545@p dO1546@q) ((lambda (dO1549@t) ((lambda (dO154b@ls/false) (if dO154b@ls/false (apply (lambda (dO154d@p) (if (= dO153e@lev '0) (dO14f4@quasicons* dO154d@p (dO14fc@vquasi dO1546@q dO153e@lev)) (dO14f6@quasicons (dO14f6@quasicons (dO14d8@datum 'unquote) (dO14fe@quasi dO154d@p (- dO153e@lev '1))) (dO14fc@vquasi dO1546@q dO153e@lev)))) dO154b@ls/false) ((lambda (dO154f@t) ((lambda (dO1551@ls/false) (if dO1551@ls/false (apply (lambda (dO1553@p) (if (= dO153e@lev '0) (dO14f8@quasiappend dO1553@p (dO14fc@vquasi dO1546@q dO153e@lev)) (dO14f6@quasicons (dO14f6@quasicons (dO14d8@datum 'unquote-splicing) (dO14fe@quasi dO1553@p (- dO153e@lev '1))) (dO14fc@vquasi dO1546@q dO153e@lev)))) dO1551@ls/false) ((lambda (dO1555@t) ((lambda (dO1557@ls/false) (if dO1557@ls/false (apply (lambda (dO1559@p) (dO14f6@quasicons (dO14fe@quasi dO1559@p dO153e@lev) (dO14fc@vquasi dO1546@q dO153e@lev))) dO1557@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1555@t))) (dOd5e@syntax-dispatch dO1555@t 'any))) dO154f@t))) (dOd5e@syntax-dispatch dO154f@t '(#(scheme-id unquote-splicing) . each-any)))) dO1549@t))) (dOd5e@syntax-dispatch dO1549@t '(#(scheme-id unquote) . each-any)))) dO1545@p)) dO1543@ls/false) ((lambda (dO155b@t) ((lambda (dO155d@ls/false) (if dO155d@ls/false (apply (lambda () (list (dOce8@scheme-stx 'quote) '())) dO155d@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO155b@t))) (dOd5e@syntax-dispatch dO155b@t '()))) dO1541@t))) (dOd5e@syntax-dispatch dO1541@t '(any . any)))) dO153d@p))) (set! dO14fe@quasi (lambda (dO1507@p dO1508@lev) ((lambda (dO150b@t) ((lambda (dO150d@ls/false) (if dO150d@ls/false (apply (lambda (dO150f@p) (if (= dO1508@lev '0) dO150f@p (dO14f6@quasicons (dO14d8@datum 'unquote) (dO14fe@quasi (list dO150f@p) (- dO1508@lev '1))))) dO150d@ls/false) ((lambda (dO1511@t) ((lambda (dO1513@ls/false) (if dO1513@ls/false (apply (lambda (dO1515@p dO1516@q) (if (= dO1508@lev '0) (dO14f4@quasicons* dO1515@p (dO14fe@quasi dO1516@q dO1508@lev)) (dO14f6@quasicons (dO14f6@quasicons (dO14d8@datum 'unquote) (dO14fe@quasi dO1515@p (- dO1508@lev '1))) (dO14fe@quasi dO1516@q dO1508@lev)))) dO1513@ls/false) ((lambda (dO1519@t) ((lambda (dO151b@ls/false) (if dO151b@ls/false (apply (lambda (dO151d@p dO151e@q) (if (= dO1508@lev '0) (dO14f8@quasiappend dO151d@p (dO14fe@quasi dO151e@q dO1508@lev)) (dO14f6@quasicons (dO14f6@quasicons (dO14d8@datum 'unquote-splicing) (dO14fe@quasi dO151d@p (- dO1508@lev '1))) (dO14fe@quasi dO151e@q dO1508@lev)))) dO151b@ls/false) ((lambda (dO1521@t) ((lambda (dO1523@ls/false) (if dO1523@ls/false (apply (lambda (dO1525@p) (dO14f6@quasicons (dO14d8@datum 'quasiquote) (dO14fe@quasi (list dO1525@p) (+ dO1508@lev '1)))) dO1523@ls/false) ((lambda (dO1527@t) ((lambda (dO1529@ls/false) (if dO1529@ls/false (apply (lambda (dO152b@p dO152c@q) (dO14f6@quasicons (dO14fe@quasi dO152b@p dO1508@lev) (dO14fe@quasi dO152c@q dO1508@lev))) dO1529@ls/false) ((lambda (dO152f@t) ((lambda (dO1531@ls/false) (if (and dO1531@ls/false (apply (lambda (dO1533@x) (not (dOb25@stx? dO1533@x))) dO1531@ls/false)) (apply (lambda (dO1535@x) (dO14fa@quasivector (dO14fc@vquasi dO1535@x dO1508@lev))) dO1531@ls/false) ((lambda (dO1537@t) ((lambda (dO1539@ls/false) (if dO1539@ls/false (apply (lambda (dO153b@p) (list (dOce8@scheme-stx 'quote) dO153b@p)) dO1539@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1537@t))) (dOd5e@syntax-dispatch dO1537@t 'any))) dO152f@t))) (dOd5e@syntax-dispatch dO152f@t '#(vector each-any)))) dO1527@t))) (dOd5e@syntax-dispatch dO1527@t '(any . any)))) dO1521@t))) (dOd5e@syntax-dispatch dO1521@t '(#(scheme-id quasiquote) any)))) dO1519@t))) (dOd5e@syntax-dispatch dO1519@t '((#(scheme-id unquote-splicing) . each-any) . any)))) dO1511@t))) (dOd5e@syntax-dispatch dO1511@t '((#(scheme-id unquote) . each-any) . any)))) dO150b@t))) (dOd5e@syntax-dispatch dO150b@t '(#(scheme-id unquote) any)))) dO1507@p))) (lambda (dO14ff@x) ((lambda (dO1501@t) ((lambda (dO1503@ls/false) (if dO1503@ls/false (apply (lambda (dO1505@e) (dO14fe@quasi dO1505@e '0)) dO1503@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1501@t))) (dOd5e@syntax-dispatch dO1501@t '(_ any)))) dO14ff@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! dOd4e@quasisyntax-macro ((lambda () ((lambda (dO15dc@quasi) (begin (set! dO15dc@quasi (lambda (dO15f7@p dO15f8@lev) ((lambda (dO15fb@t) ((lambda (dO15fd@ls/false) (if dO15fd@ls/false (apply (lambda (dO15ff@p) (if (= dO15f8@lev '0) ((lambda (dO1601@g) (values (list dO1601@g) (list dO15ff@p) dO1601@g)) (gensym)) (call-with-values (lambda () (dO15dc@quasi dO15ff@p (- dO15f8@lev '1))) (lambda (dO1609@dO1604 dO160a@dO1606 dO160b@dO1608) ((lambda (dO160f@p dO1610@rhs* dO1611@lhs*) (values dO1611@lhs* dO1610@rhs* (list 'unsyntax dO160f@p))) dO160b@dO1608 dO160a@dO1606 dO1609@dO1604))))) dO15fd@ls/false) ((lambda (dO1615@t) ((lambda (dO1617@ls/false) (if (and dO1617@ls/false (apply (lambda () (= dO15f8@lev '0)) dO1617@ls/false)) (apply (lambda () (dOe3e@syntax-violation '#f '"incorrect use of unsyntax" dO15f7@p)) dO1617@ls/false) ((lambda (dO1619@t) ((lambda (dO161b@ls/false) (if dO161b@ls/false (apply (lambda (dO161d@p* dO161e@q) (call-with-values (lambda () (dO15dc@quasi dO161e@q dO15f8@lev)) (lambda (dO1627@dO1622 dO1628@dO1624 dO1629@dO1626) ((lambda (dO162d@q dO162e@rhs* dO162f@lhs*) (if (= dO15f8@lev '0) ((lambda (dO1633@g*) (values (append dO1633@g* dO162f@lhs*) (append dO161d@p* dO162e@rhs*) (append dO1633@g* dO162d@q))) (map (lambda (dO1635@x) (gensym)) dO161d@p*)) (call-with-values (lambda () (dO15dc@quasi dO161d@p* (- dO15f8@lev '1))) (lambda (dO163d@dO1638 dO163e@dO163a dO163f@dO163c) ((lambda (dO1643@p* dO1644@rhs2* dO1645@lhs2*) (values (append dO1645@lhs2* dO162f@lhs*) (append dO1644@rhs2* dO162e@rhs*) (cons (cons 'unsyntax dO1643@p*) dO162d@q))) dO163f@dO163c dO163e@dO163a dO163d@dO1638))))) dO1629@dO1626 dO1628@dO1624 dO1627@dO1622)))) dO161b@ls/false) ((lambda (dO1649@t) ((lambda (dO164b@ls/false) (if dO164b@ls/false (apply (lambda (dO164d@p* dO164e@q) (call-with-values (lambda () (dO15dc@quasi dO164e@q dO15f8@lev)) (lambda (dO1657@dO1652 dO1658@dO1654 dO1659@dO1656) ((lambda (dO165d@q dO165e@rhs* dO165f@lhs*) (if (= dO15f8@lev '0) ((lambda (dO1663@g*) (values (append (map (lambda (dO1665@g) (cons dO1665@g '(...))) dO1663@g*) dO165f@lhs*) (append dO164d@p* dO165e@rhs*) (append (apply append (map (lambda (dO1667@g) (cons dO1667@g '(...))) dO1663@g*)) dO165d@q))) (map (lambda (dO1669@x) (gensym)) dO164d@p*)) (call-with-values (lambda () (dO15dc@quasi dO164d@p* (- dO15f8@lev '1))) (lambda (dO1671@dO166c dO1672@dO166e dO1673@dO1670) ((lambda (dO1677@p* dO1678@rhs2* dO1679@lhs2*) (values (append dO1679@lhs2* dO165f@lhs*) (append dO1678@rhs2* dO165e@rhs*) (cons (cons 'unsyntax-splicing dO1677@p*) dO165d@q))) dO1673@dO1670 dO1672@dO166e dO1671@dO166c))))) dO1659@dO1656 dO1658@dO1654 dO1657@dO1652)))) dO164b@ls/false) ((lambda (dO167d@t) ((lambda (dO167f@ls/false) (if (and dO167f@ls/false (apply (lambda () (= dO15f8@lev '0)) dO167f@ls/false)) (apply (lambda () (dOe3e@syntax-violation '#f '"incorrect use of unsyntax-splicing" dO15f7@p)) dO167f@ls/false) ((lambda (dO1681@t) ((lambda (dO1683@ls/false) (if dO1683@ls/false (apply (lambda (dO1685@p) (call-with-values (lambda () (dO15dc@quasi dO1685@p (+ dO15f8@lev '1))) (lambda (dO168d@dO1688 dO168e@dO168a dO168f@dO168c) ((lambda (dO1693@p dO1694@rhs* dO1695@lhs*) (values dO1695@lhs* dO1694@rhs* (list 'quasisyntax dO1693@p))) dO168f@dO168c dO168e@dO168a dO168d@dO1688)))) dO1683@ls/false) ((lambda (dO1699@t) ((lambda (dO169b@ls/false) (if dO169b@ls/false (apply (lambda (dO169d@p dO169e@q) (call-with-values (lambda () (dO15dc@quasi dO169d@p dO15f8@lev)) (lambda (dO16ad@dO16a2 dO16ae@dO16a4 dO16af@dO16a6) (call-with-values (lambda () (dO15dc@quasi dO169e@q dO15f8@lev)) (lambda (dO16b3@dO16a8 dO16b4@dO16aa dO16b5@dO16ac) ((lambda (dO16b9@q dO16ba@rhs2* dO16bb@lhs2* dO16bc@p dO16bd@rhs* dO16be@lhs*) (values (append dO16bb@lhs2* dO16be@lhs*) (append dO16ba@rhs2* dO16bd@rhs*) (cons dO16bc@p dO16b9@q))) dO16b5@dO16ac dO16b4@dO16aa dO16b3@dO16a8 dO16af@dO16a6 dO16ae@dO16a4 dO16ad@dO16a2)))))) dO169b@ls/false) ((lambda (dO16c5@t) ((lambda (dO16c7@ls/false) (if dO16c7@ls/false (apply (lambda (dO16c9@x*) (call-with-values (lambda () (dO15dc@quasi dO16c9@x* dO15f8@lev)) (lambda (dO16d1@dO16cc dO16d2@dO16ce dO16d3@dO16d0) ((lambda (dO16d7@x* dO16d8@rhs* dO16d9@lhs*) (values dO16d9@lhs* dO16d8@rhs* (list->vector dO16d7@x*))) dO16d3@dO16d0 dO16d2@dO16ce dO16d1@dO16cc)))) dO16c7@ls/false) ((lambda (dO16dd@t) ((lambda (dO16df@ls/false) (if dO16df@ls/false (apply (lambda () (values '() '() dO15f7@p)) dO16df@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO16dd@t))) (dOd5e@syntax-dispatch dO16dd@t '_))) dO16c5@t))) (dOd5e@syntax-dispatch dO16c5@t '#(vector each-any)))) dO1699@t))) (dOd5e@syntax-dispatch dO1699@t '(any . any)))) dO1681@t))) (dOd5e@syntax-dispatch dO1681@t '(#(scheme-id quasisyntax) any)))) dO167d@t))) (dOd5e@syntax-dispatch dO167d@t '#(scheme-id unsyntax-splicing)))) dO1649@t))) (dOd5e@syntax-dispatch dO1649@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) dO1619@t))) (dOd5e@syntax-dispatch dO1619@t '((#(scheme-id unsyntax) . each-any) . any)))) dO1615@t))) (dOd5e@syntax-dispatch dO1615@t '#(scheme-id unsyntax)))) dO15fb@t))) (dOd5e@syntax-dispatch dO15fb@t '(#(scheme-id unsyntax) any)))) dO15f7@p))) (lambda (dO15dd@x) ((lambda (dO15df@t) ((lambda (dO15e1@ls/false) (if dO15e1@ls/false (apply (lambda (dO15e3@e) (call-with-values (lambda () (dO15dc@quasi dO15e3@e '0)) (lambda (dO15eb@dO15e6 dO15ec@dO15e8 dO15ed@dO15ea) ((lambda (dO15f1@v dO15f2@rhs* dO15f3@lhs*) (dOd14@bless (list 'syntax-case (cons 'list dO15f2@rhs*) '() (list dO15f3@lhs* (list 'syntax dO15f1@v))))) dO15ed@dO15ea dO15ec@dO15e8 dO15eb@dO15e6)))) dO15e1@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO15df@t))) (dOd5e@syntax-dispatch dO15df@t '(_ any)))) dO15dd@x)))) '#f)))) (set! dOd50@define-struct-macro (lambda (dO16e1@stx) (dOe3e@syntax-violation '#f '"define-struct not supported" dO16e1@stx))) (set! dOd52@define-record-type-macro (lambda (dO16e3@x) ((lambda (dO16e6@id dO16e8@get-record-name dO16ea@get-record-constructor-name dO16ec@get-record-predicate-name dO16ee@get-clause dO16f0@foo-rtd-code dO16f2@parent-rtd-code dO16f4@parent-rcd-code dO16f6@foo-rcd-code dO16f8@get-protocol-code dO16fa@get-fields dO16fc@get-mutator-indices dO16fe@get-mutators dO1700@get-accessors dO1702@enumerate dO1704@do-define-record dO1706@verify-clauses) (begin (set! dO16e6@id (lambda (dO18d9@ctxt . dO18db@str*) (dOe42@datum->syntax dO18d9@ctxt (string->symbol (apply string-append (map (lambda (dO18dd@x) (if (symbol? dO18dd@x) (symbol->string dO18dd@x) (if (string? dO18dd@x) dO18dd@x (assertion-violation 'define-record-type '"BUG")))) dO18db@str*)))))) (set! dO16e8@get-record-name (lambda (dO18c7@spec) ((lambda (dO18c9@t) ((lambda (dO18cb@ls/false) (if dO18cb@ls/false (apply (lambda (dO18cd@foo dO18ce@make-foo dO18cf@foo?) dO18cd@foo) dO18cb@ls/false) ((lambda (dO18d3@t) ((lambda (dO18d5@ls/false) (if dO18d5@ls/false (apply (lambda (dO18d7@foo) dO18d7@foo) dO18d5@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO18d3@t))) (dOd5e@syntax-dispatch dO18d3@t 'any))) dO18c9@t))) (dOd5e@syntax-dispatch dO18c9@t '(any any any)))) dO18c7@spec))) (set! dO16ea@get-record-constructor-name (lambda (dO18b3@spec) ((lambda (dO18b5@t) ((lambda (dO18b7@ls/false) (if dO18b7@ls/false (apply (lambda (dO18b9@foo dO18ba@make-foo dO18bb@foo?) dO18ba@make-foo) dO18b7@ls/false) ((lambda (dO18bf@t) ((lambda (dO18c1@ls/false) (if (and dO18c1@ls/false (apply (lambda (dO18c3@foo) (dOb59@id? dO18c3@foo)) dO18c1@ls/false)) (apply (lambda (dO18c5@foo) (dO16e6@id dO18c5@foo '"make-" (dOb6d@stx->datum dO18c5@foo))) dO18c1@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO18bf@t))) (dOd5e@syntax-dispatch dO18bf@t 'any))) dO18b5@t))) (dOd5e@syntax-dispatch dO18b5@t '(any any any)))) dO18b3@spec))) (set! dO16ec@get-record-predicate-name (lambda (dO189f@spec) ((lambda (dO18a1@t) ((lambda (dO18a3@ls/false) (if dO18a3@ls/false (apply (lambda (dO18a5@foo dO18a6@make-foo dO18a7@foo?) dO18a7@foo?) dO18a3@ls/false) ((lambda (dO18ab@t) ((lambda (dO18ad@ls/false) (if (and dO18ad@ls/false (apply (lambda (dO18af@foo) (dOb59@id? dO18af@foo)) dO18ad@ls/false)) (apply (lambda (dO18b1@foo) (dO16e6@id dO18b1@foo (dOb6d@stx->datum dO18b1@foo) '"?")) dO18ad@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO18ab@t))) (dOd5e@syntax-dispatch dO18ab@t 'any))) dO18a1@t))) (dOd5e@syntax-dispatch dO18a1@t '(any any any)))) dO189f@spec))) (set! dO16ee@get-clause (lambda (dO188d@id dO188e@ls) ((lambda (dO1891@t) ((lambda (dO1893@ls/false) (if dO1893@ls/false (apply (lambda () '#f) dO1893@ls/false) ((lambda (dO1895@t) ((lambda (dO1897@ls/false) (if dO1897@ls/false (apply (lambda (dO1899@x dO189a@rest dO189b@ls) (if (dOb5f@free-id=? (dOd14@bless dO188d@id) dO1899@x) (cons dO1899@x dO189a@rest) (dO16ee@get-clause dO188d@id dO189b@ls))) dO1897@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1895@t))) (dOd5e@syntax-dispatch dO1895@t '((any . any) . any)))) dO1891@t))) (dOd5e@syntax-dispatch dO1891@t '()))) dO188e@ls))) (set! dO16f0@foo-rtd-code (lambda (dO183b@name dO183c@clause* dO183d@parent-rtd-code) ((lambda (dO1842@convert-field-spec*) (begin (set! dO1842@convert-field-spec* (lambda (dO1873@ls) (list->vector (map (lambda (dO1875@x) ((lambda (dO1877@t) ((lambda (dO1879@ls/false) (if dO1879@ls/false (apply (lambda (dO187b@name dO187c@rest) (list 'mutable dO187b@name)) dO1879@ls/false) ((lambda (dO187f@t) ((lambda (dO1881@ls/false) (if dO1881@ls/false (apply (lambda (dO1883@name dO1884@rest) (list 'immutable dO1883@name)) dO1881@ls/false) ((lambda (dO1887@t) ((lambda (dO1889@ls/false) (if dO1889@ls/false (apply (lambda (dO188b@name) (list 'immutable dO188b@name)) dO1889@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1887@t))) (dOd5e@syntax-dispatch dO1887@t 'any))) dO187f@t))) (dOd5e@syntax-dispatch dO187f@t '(#(scheme-id immutable) any . any)))) dO1877@t))) (dOd5e@syntax-dispatch dO1877@t '(#(scheme-id mutable) any . any)))) dO1875@x)) dO1873@ls)))) ((lambda (dO1843@uid-code dO1844@sealed? dO1845@opaque? dO1846@fields) (dOd14@bless (list 'make-record-type-descriptor (list 'quote dO183b@name) dO183d@parent-rtd-code dO1843@uid-code dO1844@sealed? dO1845@opaque? dO1846@fields))) ((lambda (dO184b@t) ((lambda (dO184d@ls/false) (if dO184d@ls/false (apply (lambda () (list 'quote (gensym))) dO184d@ls/false) ((lambda (dO184f@t) ((lambda (dO1851@ls/false) (if dO1851@ls/false (apply (lambda (dO1853@uid) (list 'quote dO1853@uid)) dO1851@ls/false) ((lambda (dO1855@t) ((lambda (dO1857@ls/false) (if dO1857@ls/false (apply (lambda () '#f) dO1857@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1855@t))) (dOd5e@syntax-dispatch dO1855@t '_))) dO184f@t))) (dOd5e@syntax-dispatch dO184f@t '(_ any)))) dO184b@t))) (dOd5e@syntax-dispatch dO184b@t '(_)))) (dO16ee@get-clause 'nongenerative dO183c@clause*)) ((lambda (dO1859@t) ((lambda (dO185b@ls/false) (if dO185b@ls/false (apply (lambda () '#t) dO185b@ls/false) ((lambda (dO185d@t) ((lambda (dO185f@ls/false) (if dO185f@ls/false (apply (lambda () '#f) dO185f@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO185d@t))) (dOd5e@syntax-dispatch dO185d@t '_))) dO1859@t))) (dOd5e@syntax-dispatch dO1859@t '(_ #(atom #t))))) (dO16ee@get-clause 'sealed dO183c@clause*)) ((lambda (dO1861@t) ((lambda (dO1863@ls/false) (if dO1863@ls/false (apply (lambda () '#t) dO1863@ls/false) ((lambda (dO1865@t) ((lambda (dO1867@ls/false) (if dO1867@ls/false (apply (lambda () '#f) dO1867@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1865@t))) (dOd5e@syntax-dispatch dO1865@t '_))) dO1861@t))) (dOd5e@syntax-dispatch dO1861@t '(_ #(atom #t))))) (dO16ee@get-clause 'opaque dO183c@clause*)) ((lambda (dO1869@t) ((lambda (dO186b@ls/false) (if dO186b@ls/false (apply (lambda (dO186d@field-spec*) (list 'quote (dO1842@convert-field-spec* dO186d@field-spec*))) dO186b@ls/false) ((lambda (dO186f@t) ((lambda (dO1871@ls/false) (if dO1871@ls/false (apply (lambda () ''#()) dO1871@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO186f@t))) (dOd5e@syntax-dispatch dO186f@t '_))) dO1869@t))) (dOd5e@syntax-dispatch dO1869@t '(_ . each-any)))) (dO16ee@get-clause 'fields dO183c@clause*))))) '#f))) (set! dO16f2@parent-rtd-code (lambda (dO1823@clause*) ((lambda (dO1825@t) ((lambda (dO1827@ls/false) (if dO1827@ls/false (apply (lambda (dO1829@name) (list 'record-type-descriptor dO1829@name)) dO1827@ls/false) ((lambda (dO182b@t) ((lambda (dO182d@ls/false) (if dO182d@ls/false (apply (lambda () ((lambda (dO182f@t) ((lambda (dO1831@ls/false) (if dO1831@ls/false (apply (lambda (dO1833@rtd dO1834@rcd) dO1833@rtd) dO1831@ls/false) ((lambda (dO1837@t) ((lambda (dO1839@ls/false) (if dO1839@ls/false (apply (lambda () '#f) dO1839@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1837@t))) (dOd5e@syntax-dispatch dO1837@t '#(atom #f)))) dO182f@t))) (dOd5e@syntax-dispatch dO182f@t '(_ any any)))) (dO16ee@get-clause 'parent-rtd dO1823@clause*))) dO182d@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO182b@t))) (dOd5e@syntax-dispatch dO182b@t '#(atom #f)))) dO1825@t))) (dOd5e@syntax-dispatch dO1825@t '(_ any)))) (dO16ee@get-clause 'parent dO1823@clause*)))) (set! dO16f4@parent-rcd-code (lambda (dO180b@clause*) ((lambda (dO180d@t) ((lambda (dO180f@ls/false) (if dO180f@ls/false (apply (lambda (dO1811@name) (list 'record-constructor-descriptor dO1811@name)) dO180f@ls/false) ((lambda (dO1813@t) ((lambda (dO1815@ls/false) (if dO1815@ls/false (apply (lambda () ((lambda (dO1817@t) ((lambda (dO1819@ls/false) (if dO1819@ls/false (apply (lambda (dO181b@rtd dO181c@rcd) dO181c@rcd) dO1819@ls/false) ((lambda (dO181f@t) ((lambda (dO1821@ls/false) (if dO1821@ls/false (apply (lambda () '#f) dO1821@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO181f@t))) (dOd5e@syntax-dispatch dO181f@t '#(atom #f)))) dO1817@t))) (dOd5e@syntax-dispatch dO1817@t '(_ any any)))) (dO16ee@get-clause 'parent-rtd dO180b@clause*))) dO1815@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1813@t))) (dOd5e@syntax-dispatch dO1813@t '#(atom #f)))) dO180d@t))) (dOd5e@syntax-dispatch dO180d@t '(_ any)))) (dO16ee@get-clause 'parent dO180b@clause*)))) (set! dO16f6@foo-rcd-code (lambda (dO1803@clause* dO1804@foo-rtd dO1805@protocol dO1806@parent-rcd-code) (list 'make-record-constructor-descriptor dO1804@foo-rtd dO1806@parent-rcd-code dO1805@protocol))) (set! dO16f8@get-protocol-code (lambda (dO17f7@clause*) ((lambda (dO17f9@t) ((lambda (dO17fb@ls/false) (if dO17fb@ls/false (apply (lambda (dO17fd@expr) dO17fd@expr) dO17fb@ls/false) ((lambda (dO17ff@t) ((lambda (dO1801@ls/false) (if dO1801@ls/false (apply (lambda () '#f) dO1801@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO17ff@t))) (dOd5e@syntax-dispatch dO17ff@t '_))) dO17f9@t))) (dOd5e@syntax-dispatch dO17f9@t '(_ any)))) (dO16ee@get-clause 'protocol dO17f7@clause*)))) (set! dO16fa@get-fields (lambda (dO17e5@clause*) ((lambda (dO17e7@t) ((lambda (dO17e9@ls/false) (if dO17e9@ls/false (apply (lambda () '()) dO17e9@ls/false) ((lambda (dO17eb@t) ((lambda (dO17ed@ls/false) (if dO17ed@ls/false (apply (lambda (dO17ef@f*) dO17ef@f*) dO17ed@ls/false) ((lambda (dO17f1@t) ((lambda (dO17f3@ls/false) (if dO17f3@ls/false (apply (lambda (dO17f5@rest) (dO16fa@get-fields dO17f5@rest)) dO17f3@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO17f1@t))) (dOd5e@syntax-dispatch dO17f1@t '(_ . any)))) dO17eb@t))) (dOd5e@syntax-dispatch dO17eb@t '((#(scheme-id fields) . each-any) . _)))) dO17e7@t))) (dOd5e@syntax-dispatch dO17e7@t '()))) dO17e5@clause*))) (set! dO16fc@get-mutator-indices (lambda (dO17cd@fields) ((letrec ((dO17cf@f (lambda (dO17d1@fields dO17d2@i) ((lambda (dO17d5@t) ((lambda (dO17d7@ls/false) (if dO17d7@ls/false (apply (lambda () '()) dO17d7@ls/false) ((lambda (dO17d9@t) ((lambda (dO17db@ls/false) (if dO17db@ls/false (apply (lambda (dO17dd@rest) (cons dO17d2@i (dO17cf@f dO17dd@rest (+ dO17d2@i '1)))) dO17db@ls/false) ((lambda (dO17df@t) ((lambda (dO17e1@ls/false) (if dO17e1@ls/false (apply (lambda (dO17e3@rest) (dO17cf@f dO17e3@rest (+ dO17d2@i '1))) dO17e1@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO17df@t))) (dOd5e@syntax-dispatch dO17df@t '(_ . any)))) dO17d9@t))) (dOd5e@syntax-dispatch dO17d9@t '((#(scheme-id mutable) . _) . any)))) dO17d5@t))) (dOd5e@syntax-dispatch dO17d5@t '()))) dO17d1@fields)))) dO17cf@f) dO17cd@fields '0))) (set! dO16fe@get-mutators (lambda (dO17a3@foo dO17a4@fields) ((lambda (dO17a8@gen-name) (begin (set! dO17a8@gen-name (lambda (dO17cb@x) (dOe42@datum->syntax dO17a3@foo (string->symbol (string-append (symbol->string (dOe44@syntax->datum dO17a3@foo)) '"-" (symbol->string (dOe44@syntax->datum dO17cb@x)) '"-set!"))))) ((letrec ((dO17a9@f (lambda (dO17ab@fields) ((lambda (dO17ad@t) ((lambda (dO17af@ls/false) (if dO17af@ls/false (apply (lambda () '()) dO17af@ls/false) ((lambda (dO17b1@t) ((lambda (dO17b3@ls/false) (if dO17b3@ls/false (apply (lambda (dO17b5@name dO17b6@accessor dO17b7@mutator dO17b8@rest) (cons dO17b7@mutator (dO17a9@f dO17b8@rest))) dO17b3@ls/false) ((lambda (dO17bd@t) ((lambda (dO17bf@ls/false) (if dO17bf@ls/false (apply (lambda (dO17c1@name dO17c2@rest) (cons (dO17a8@gen-name dO17c1@name) (dO17a9@f dO17c2@rest))) dO17bf@ls/false) ((lambda (dO17c5@t) ((lambda (dO17c7@ls/false) (if dO17c7@ls/false (apply (lambda (dO17c9@rest) (dO17a9@f dO17c9@rest)) dO17c7@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO17c5@t))) (dOd5e@syntax-dispatch dO17c5@t '(_ . any)))) dO17bd@t))) (dOd5e@syntax-dispatch dO17bd@t '((#(scheme-id mutable) any) . any)))) dO17b1@t))) (dOd5e@syntax-dispatch dO17b1@t '((#(scheme-id mutable) any any any) . any)))) dO17ad@t))) (dOd5e@syntax-dispatch dO17ad@t '()))) dO17ab@fields)))) dO17a9@f) dO17a4@fields))) '#f))) (set! dO1700@get-accessors (lambda (dO175f@foo dO1760@fields) ((lambda (dO1764@gen-name) (begin (set! dO1764@gen-name (lambda (dO17a1@x) (dOe42@datum->syntax dO175f@foo (string->symbol (string-append (symbol->string (dOe44@syntax->datum dO175f@foo)) '"-" (symbol->string (dOe44@syntax->datum dO17a1@x))))))) (map (lambda (dO1765@field) ((lambda (dO1767@t) ((lambda (dO1769@ls/false) (if (and dO1769@ls/false (apply (lambda (dO176b@name dO176c@accessor dO176d@mutator) (dOb59@id? dO176c@accessor)) dO1769@ls/false)) (apply (lambda (dO1771@name dO1772@accessor dO1773@mutator) dO1772@accessor) dO1769@ls/false) ((lambda (dO1777@t) ((lambda (dO1779@ls/false) (if (and dO1779@ls/false (apply (lambda (dO177b@name dO177c@accessor) (dOb59@id? dO177c@accessor)) dO1779@ls/false)) (apply (lambda (dO177f@name dO1780@accessor) dO1780@accessor) dO1779@ls/false) ((lambda (dO1783@t) ((lambda (dO1785@ls/false) (if (and dO1785@ls/false (apply (lambda (dO1787@name) (dOb59@id? dO1787@name)) dO1785@ls/false)) (apply (lambda (dO1789@name) (dO1764@gen-name dO1789@name)) dO1785@ls/false) ((lambda (dO178b@t) ((lambda (dO178d@ls/false) (if (and dO178d@ls/false (apply (lambda (dO178f@name) (dOb59@id? dO178f@name)) dO178d@ls/false)) (apply (lambda (dO1791@name) (dO1764@gen-name dO1791@name)) dO178d@ls/false) ((lambda (dO1793@t) ((lambda (dO1795@ls/false) (if (and dO1795@ls/false (apply (lambda (dO1797@name) (dOb59@id? dO1797@name)) dO1795@ls/false)) (apply (lambda (dO1799@name) (dO1764@gen-name dO1799@name)) dO1795@ls/false) ((lambda (dO179b@t) ((lambda (dO179d@ls/false) (if dO179d@ls/false (apply (lambda (dO179f@others) (dOe3e@syntax-violation '#f '"invalid field spec" dO1765@field)) dO179d@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO179b@t))) (dOd5e@syntax-dispatch dO179b@t 'any))) dO1793@t))) (dOd5e@syntax-dispatch dO1793@t 'any))) dO178b@t))) (dOd5e@syntax-dispatch dO178b@t '(#(scheme-id immutable) any)))) dO1783@t))) (dOd5e@syntax-dispatch dO1783@t '(#(scheme-id mutable) any)))) dO1777@t))) (dOd5e@syntax-dispatch dO1777@t '(#(scheme-id immutable) any any)))) dO1767@t))) (dOd5e@syntax-dispatch dO1767@t '(#(scheme-id mutable) any any any)))) dO1765@field)) dO1760@fields))) '#f))) (set! dO1702@enumerate (lambda (dO1757@ls) ((letrec ((dO1759@f (lambda (dO175b@ls dO175c@i) (if (null? dO175b@ls) '() (cons dO175c@i (dO1759@f (cdr dO175b@ls) (+ dO175c@i '1))))))) dO1759@f) dO1757@ls '0))) (set! dO1704@do-define-record (lambda (dO172f@namespec dO1730@clause*) ((lambda (dO1733@foo) ((lambda (dO1735@foo-rtd) ((lambda (dO1737@foo-rcd) ((lambda (dO1739@protocol) ((lambda (dO173b@make-foo) ((lambda (dO173d@fields) ((lambda (dO173f@idx*) ((lambda (dO1741@foo-x*) ((lambda (dO1743@set-foo-x!*) ((lambda (dO1745@set-foo-idx*) ((lambda (dO1747@foo?) ((lambda (dO1749@foo-rtd-code) ((lambda (dO174b@foo-rcd-code) ((lambda (dO174d@protocol-code) ((lambda () (dOd14@bless (cons 'begin (cons (list 'define dO1735@foo-rtd dO1749@foo-rtd-code) (cons (list 'define dO1739@protocol dO174d@protocol-code) (cons (list 'define dO1737@foo-rcd dO174b@foo-rcd-code) (cons (list 'define-syntax dO1733@foo (list 'list ''$rtd (list 'syntax dO1735@foo-rtd) (list 'syntax dO1737@foo-rcd))) (cons (list 'define dO1747@foo? (list 'record-predicate dO1735@foo-rtd)) (cons (list 'define dO173b@make-foo (list 'record-constructor dO1737@foo-rcd)) (append (map (lambda (dO174f@foo-x dO1750@idx) (list 'define dO174f@foo-x (list 'record-accessor dO1735@foo-rtd dO1750@idx))) dO1741@foo-x* dO173f@idx*) (map (lambda (dO1753@set-foo-x! dO1754@idx) (list 'define dO1753@set-foo-x! (list 'record-mutator dO1735@foo-rtd dO1754@idx))) dO1743@set-foo-x!* dO1745@set-foo-idx*))))))))))))) (dO16f8@get-protocol-code dO1730@clause*))) (dO16f6@foo-rcd-code dO1730@clause* dO1735@foo-rtd dO1739@protocol (dO16f4@parent-rcd-code dO1730@clause*)))) (dO16f0@foo-rtd-code dO1733@foo dO1730@clause* (dO16f2@parent-rtd-code dO1730@clause*)))) (dO16ec@get-record-predicate-name dO172f@namespec))) (dO16fc@get-mutator-indices dO173d@fields))) (dO16fe@get-mutators dO1733@foo dO173d@fields))) (dO1700@get-accessors dO1733@foo dO173d@fields))) (dO1702@enumerate dO173d@fields))) (dO16fa@get-fields dO1730@clause*))) (dO16ea@get-record-constructor-name dO172f@namespec))) (gensym))) (gensym))) (gensym))) (dO16e8@get-record-name dO172f@namespec)))) (set! dO1706@verify-clauses (lambda (dO170f@x dO1710@cls*) ((lambda (dO1714@valid-kwds dO1716@free-id-member?) (begin (set! dO1714@valid-kwds (map dOd14@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! dO1716@free-id-member? (lambda (dO172b@x dO172c@ls) (and (pair? dO172c@ls) (or (dOb5f@free-id=? dO172b@x (car dO172c@ls)) (dO1716@free-id-member? dO172b@x (cdr dO172c@ls)))))) ((letrec ((dO1717@f (lambda (dO1719@cls* dO171a@seen*) (if (not (null? dO1719@cls*)) ((lambda (dO171d@t) ((lambda (dO171f@ls/false) (if dO171f@ls/false (apply (lambda (dO1721@kwd dO1722@rest) (if (or (not (dOb59@id? dO1721@kwd)) (not (dO1716@free-id-member? dO1721@kwd dO1714@valid-kwds))) (dOe3e@syntax-violation '#f '"not a valid define-record-type keyword" dO1721@kwd) (if (dOb65@bound-id-member? dO1721@kwd dO171a@seen*) (dOe3e@syntax-violation '#f '"duplicate use of keyword " dO170f@x dO1721@kwd) (dO1717@f (cdr dO1719@cls*) (cons dO1721@kwd dO171a@seen*))))) dO171f@ls/false) ((lambda (dO1725@t) ((lambda (dO1727@ls/false) (if dO1727@ls/false (apply (lambda (dO1729@cls) (dOe3e@syntax-violation '#f '"malformed define-record-type clause" dO1729@cls)) dO1727@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1725@t))) (dOd5e@syntax-dispatch dO1725@t 'any))) dO171d@t))) (dOd5e@syntax-dispatch dO171d@t '(any . any)))) (car dO1719@cls*)) (void))))) dO1717@f) dO1710@cls* '()))) '#f '#f))) ((lambda (dO1707@t) ((lambda (dO1709@ls/false) (if dO1709@ls/false (apply (lambda (dO170b@namespec dO170c@clause*) (begin (dO1706@verify-clauses dO16e3@x dO170c@clause*) (dO1704@do-define-record dO170b@namespec dO170c@clause*))) dO1709@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1707@t))) (dOd5e@syntax-dispatch dO1707@t '(_ any . each-any)))) dO16e3@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! dOd54@define-condition-type-macro (lambda (dO18df@x) ((lambda (dO18e2@mkname) (begin (set! dO18e2@mkname (lambda (dO190f@name dO1910@suffix) (dOe42@datum->syntax dO190f@name (string->symbol (string-append (symbol->string (dOe44@syntax->datum dO190f@name)) dO1910@suffix))))) ((lambda (dO18e3@t) ((lambda (dO18e5@ls/false) (if (and dO18e5@ls/false (apply (lambda (dO18e7@ctxt dO18e8@name dO18e9@super dO18ea@constructor dO18eb@predicate dO18ec@field* dO18ed@accessor*) (and (dOb59@id? dO18e8@name) (dOb59@id? dO18e9@super) (dOb59@id? dO18ea@constructor) (dOb59@id? dO18eb@predicate) (for-all dOb59@id? dO18ec@field*) (for-all dOb59@id? dO18ed@accessor*))) dO18e5@ls/false)) (apply (lambda (dO18f5@ctxt dO18f6@name dO18f7@super dO18f8@constructor dO18f9@predicate dO18fa@field* dO18fb@accessor*) ((lambda (dO1903@aux-accessor*) (dOd14@bless (cons 'begin (cons (cons 'define-record-type (cons (list dO18f6@name dO18f8@constructor (gensym)) (cons (list 'parent dO18f7@super) (cons (cons 'fields (map (lambda (dO1905@field dO1906@aux) (list 'immutable dO1905@field dO1906@aux)) dO18fa@field* dO1903@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define dO18f9@predicate (list 'condition-predicate (list 'record-type-descriptor dO18f6@name))) (map (lambda (dO1909@accessor dO190a@aux) (list 'define dO1909@accessor (list 'condition-accessor (list 'record-type-descriptor dO18f6@name) dO190a@aux))) dO18fb@accessor* dO1903@aux-accessor*)))))) (map (lambda (dO190d@x) (gensym)) dO18fb@accessor*))) dO18e5@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO18e3@t))) (dOd5e@syntax-dispatch dO18e3@t '(any any any any any . #(each (any any)))))) dO18df@x))) '#f))) (set! dOd56@incorrect-usage-macro (lambda (dO1913@e) (dOe3e@syntax-violation '#f '"incorrect usage of auxiliary keyword" dO1913@e))) (set! dOd58@parameterize-macro (lambda (dO1915@e) ((lambda (dO1917@t) ((lambda (dO1919@ls/false) (if dO1919@ls/false (apply (lambda (dO191b@b dO191c@b*) (dOd14@bless (cons 'let (cons '() (cons dO191b@b dO191c@b*))))) dO1919@ls/false) ((lambda (dO191f@t) ((lambda (dO1921@ls/false) (if dO1921@ls/false (apply (lambda (dO1923@olhs* dO1924@orhs* dO1925@b dO1926@b*) ((lambda (dO192b@lhs* dO192c@rhs*) (dOd14@bless (cons (list 'lambda (append dO192b@lhs* dO192c@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (dO192f@lhs dO1930@rhs) (list 'let (list (list 't (list dO192f@lhs))) (list dO192f@lhs dO1930@rhs) (cons 'set! (cons dO1930@rhs '(t))))) dO192b@lhs* dO192c@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons dO1925@b dO1926@b*))) '(swap)))))) (append dO1923@olhs* dO1924@orhs*)))) (dOe2c@generate-temporaries dO1923@olhs*) (dOe2c@generate-temporaries dO1924@orhs*))) dO1921@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO191f@t))) (dOd5e@syntax-dispatch dO191f@t '(_ #(each (any any)) any . each-any)))) dO1917@t))) (dOd5e@syntax-dispatch dO1917@t '(_ () any . each-any)))) dO1915@e))) (set! dOd5a@foreign-call-transformer (lambda (dO1933@e dO1934@r dO1935@mr) ((lambda (dO1939@t) ((lambda (dO193b@ls/false) (if dO193b@ls/false (apply (lambda (dO193d@name dO193e@arg*) (cons 'foreign-call (cons (dOd80@chi-expr dO193d@name dO1934@r dO1935@mr) (dOd7c@chi-expr* dO193e@arg* dO1934@r dO1935@mr)))) dO193b@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1939@t))) (dOd5e@syntax-dispatch dO1939@t '(_ any . each-any)))) dO1933@e))) (set! dOd5c@convert-pattern (lambda (dO1941@pattern dO1942@keys) ((lambda (dO1946@cvt* dO1948@cvt) (begin (set! dO1946@cvt* (lambda (dO19e5@p* dO19e6@n dO19e7@ids) (if (null? dO19e5@p*) (values '() dO19e7@ids) (call-with-values (lambda () (dO1946@cvt* (cdr dO19e5@p*) dO19e6@n dO19e7@ids)) (lambda (dO19ef@dO19ec dO19f0@dO19ee) ((lambda (dO19f3@ids dO19f4@y) (call-with-values (lambda () (dO1948@cvt (car dO19e5@p*) dO19e6@n dO19f3@ids)) (lambda (dO19fb@dO19f8 dO19fc@dO19fa) ((lambda (dO19ff@ids dO1a00@x) (values (cons dO1a00@x dO19f4@y) dO19ff@ids)) dO19fc@dO19fa dO19fb@dO19f8)))) dO19f0@dO19ee dO19ef@dO19ec)))))) (set! dO1948@cvt (lambda (dO1949@p dO194a@n dO194b@ids) ((lambda (dO194f@t) ((lambda (dO1951@ls/false) (if (and dO1951@ls/false (apply (lambda (dO1953@id) (dOb59@id? dO1953@id)) dO1951@ls/false)) (apply (lambda (dO1955@id) (if (dOb65@bound-id-member? dO1949@p dO1942@keys) (values (vector 'free-id dO1949@p) dO194b@ids) (if (dOb5f@free-id=? dO1949@p (dOce8@scheme-stx '_)) (values '_ dO194b@ids) (values 'any (cons (cons dO1949@p dO194a@n) dO194b@ids))))) dO1951@ls/false) ((lambda (dO1957@t) ((lambda (dO1959@ls/false) (if (and dO1959@ls/false (apply (lambda (dO195b@p dO195c@dots) (dOd60@ellipsis? dO195c@dots)) dO1959@ls/false)) (apply (lambda (dO195f@p dO1960@dots) (call-with-values (lambda () (dO1948@cvt dO195f@p (+ dO194a@n '1) dO194b@ids)) (lambda (dO1967@dO1964 dO1968@dO1966) ((lambda (dO196b@ids dO196c@p) (values (if (eq? dO196c@p 'any) 'each-any (vector 'each dO196c@p)) dO196b@ids)) dO1968@dO1966 dO1967@dO1964)))) dO1959@ls/false) ((lambda (dO196f@t) ((lambda (dO1971@ls/false) (if (and dO1971@ls/false (apply (lambda (dO1973@x dO1974@dots dO1975@ys dO1976@z) (dOd60@ellipsis? dO1974@dots)) dO1971@ls/false)) (apply (lambda (dO197b@x dO197c@dots dO197d@ys dO197e@z) (call-with-values (lambda () (dO1948@cvt dO197e@z dO194a@n dO194b@ids)) (lambda (dO1987@dO1984 dO1988@dO1986) ((lambda (dO198b@ids dO198c@z) (call-with-values (lambda () (dO1946@cvt* dO197d@ys dO194a@n dO198b@ids)) (lambda (dO1993@dO1990 dO1994@dO1992) ((lambda (dO1997@ids dO1998@ys) (call-with-values (lambda () (dO1948@cvt dO197b@x (+ dO194a@n '1) dO1997@ids)) (lambda (dO199f@dO199c dO19a0@dO199e) ((lambda (dO19a3@ids dO19a4@x) (values (vector 'each+ dO19a4@x (reverse dO1998@ys) dO198c@z) dO19a3@ids)) dO19a0@dO199e dO199f@dO199c)))) dO1994@dO1992 dO1993@dO1990)))) dO1988@dO1986 dO1987@dO1984)))) dO1971@ls/false) ((lambda (dO19a7@t) ((lambda (dO19a9@ls/false) (if dO19a9@ls/false (apply (lambda (dO19ab@x dO19ac@y) (call-with-values (lambda () (dO1948@cvt dO19ac@y dO194a@n dO194b@ids)) (lambda (dO19b3@dO19b0 dO19b4@dO19b2) ((lambda (dO19b7@ids dO19b8@y) (call-with-values (lambda () (dO1948@cvt dO19ab@x dO194a@n dO19b7@ids)) (lambda (dO19bf@dO19bc dO19c0@dO19be) ((lambda (dO19c3@ids dO19c4@x) (values (cons dO19c4@x dO19b8@y) dO19c3@ids)) dO19c0@dO19be dO19bf@dO19bc)))) dO19b4@dO19b2 dO19b3@dO19b0)))) dO19a9@ls/false) ((lambda (dO19c7@t) ((lambda (dO19c9@ls/false) (if dO19c9@ls/false (apply (lambda () (values '() dO194b@ids)) dO19c9@ls/false) ((lambda (dO19cb@t) ((lambda (dO19cd@ls/false) (if (and dO19cd@ls/false (apply (lambda (dO19cf@p) (not (dOb25@stx? dO19cf@p))) dO19cd@ls/false)) (apply (lambda (dO19d1@p) (call-with-values (lambda () (dO1948@cvt dO19d1@p dO194a@n dO194b@ids)) (lambda (dO19d7@dO19d4 dO19d8@dO19d6) ((lambda (dO19db@ids dO19dc@p) (values (vector 'vector dO19dc@p) dO19db@ids)) dO19d8@dO19d6 dO19d7@dO19d4)))) dO19cd@ls/false) ((lambda (dO19df@t) ((lambda (dO19e1@ls/false) (if dO19e1@ls/false (apply (lambda (dO19e3@datum) (values (vector 'atom (dOb6d@stx->datum dO19e3@datum)) dO194b@ids)) dO19e1@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO19df@t))) (dOd5e@syntax-dispatch dO19df@t 'any))) dO19cb@t))) (dOd5e@syntax-dispatch dO19cb@t '#(vector each-any)))) dO19c7@t))) (dOd5e@syntax-dispatch dO19c7@t '()))) dO19a7@t))) (dOd5e@syntax-dispatch dO19a7@t '(any . any)))) dO196f@t))) (dOd5e@syntax-dispatch dO196f@t '(any any . #(each+ any () any))))) dO1957@t))) (dOd5e@syntax-dispatch dO1957@t '(any any)))) dO194f@t))) (dOd5e@syntax-dispatch dO194f@t 'any))) dO1949@p))) (dO1948@cvt dO1941@pattern '0 '()))) '#f '#f))) (set! dOd5e@syntax-dispatch ((lambda () ((lambda (dO1a04@stx^ dO1a06@match-each dO1a08@match-each+ dO1a0a@match-each-any dO1a0c@match-empty dO1a0e@combine dO1a10@match* dO1a12@match) (begin (set! dO1a04@stx^ (lambda (dO1adf@e dO1ae0@m* dO1ae1@s* dO1ae2@ae*) (if (and (null? dO1ae0@m*) (null? dO1ae1@s*) (null? dO1ae2@ae*)) dO1adf@e (dOb41@mkstx dO1adf@e dO1ae0@m* dO1ae1@s* dO1ae2@ae*)))) (set! dO1a06@match-each (lambda (dO1abf@e dO1ac0@p dO1ac1@m* dO1ac2@s* dO1ac3@ae*) (if (pair? dO1abf@e) ((lambda (dO1ac9@first) (and dO1ac9@first ((lambda (dO1acb@rest) (and dO1acb@rest (cons dO1ac9@first dO1acb@rest))) (dO1a06@match-each (cdr dO1abf@e) dO1ac0@p dO1ac1@m* dO1ac2@s* dO1ac3@ae*)))) (dO1a12@match (car dO1abf@e) dO1ac0@p dO1ac1@m* dO1ac2@s* dO1ac3@ae* '())) (if (null? dO1abf@e) '() (if (dOb25@stx? dO1abf@e) (and (not (dOadf@top-marked? dO1ac1@m*)) (call-with-values (lambda () (join-wraps dO1ac1@m* dO1ac2@s* dO1ac3@ae* dO1abf@e)) (lambda (dO1ad3@dO1ace dO1ad4@dO1ad0 dO1ad5@dO1ad2) ((lambda (dO1ad9@ae* dO1ada@s* dO1adb@m*) (dO1a06@match-each (dOb27@stx-expr dO1abf@e) dO1ac0@p dO1adb@m* dO1ada@s* dO1ad9@ae*)) dO1ad5@dO1ad2 dO1ad4@dO1ad0 dO1ad3@dO1ace)))) (if (dO6ad@dO581@annotation? dO1abf@e) (dO1a06@match-each (dO6af@dO585@annotation-expression dO1abf@e) dO1ac0@p dO1ac1@m* dO1ac2@s* dO1ac3@ae*) '#f)))))) (set! dO1a08@match-each+ (lambda (dO1a7f@e dO1a80@x-pat dO1a81@y-pat dO1a82@z-pat dO1a83@m* dO1a84@s* dO1a85@ae* dO1a86@r) ((letrec ((dO1a8f@f (lambda (dO1a91@e dO1a92@m* dO1a93@s* dO1a94@ae*) (if (pair? dO1a91@e) (call-with-values (lambda () (dO1a8f@f (cdr dO1a91@e) dO1a92@m* dO1a93@s* dO1a94@ae*)) (lambda (dO1a9f@dO1a9a dO1aa0@dO1a9c dO1aa1@dO1a9e) ((lambda (dO1aa5@r dO1aa6@y-pat dO1aa7@xr*) (if dO1aa5@r (if (null? dO1aa6@y-pat) ((lambda (dO1aab@xr) (if dO1aab@xr (values (cons dO1aab@xr dO1aa7@xr*) dO1aa6@y-pat dO1aa5@r) (values '#f '#f '#f))) (dO1a12@match (car dO1a91@e) dO1a80@x-pat dO1a92@m* dO1a93@s* dO1a94@ae* '())) (values '() (cdr dO1aa6@y-pat) (dO1a12@match (car dO1a91@e) (car dO1aa6@y-pat) dO1a92@m* dO1a93@s* dO1a94@ae* dO1aa5@r))) (values '#f '#f '#f))) dO1aa1@dO1a9e dO1aa0@dO1a9c dO1a9f@dO1a9a))) (if (dOb25@stx? dO1a91@e) (if (dOadf@top-marked? dO1a92@m*) (values '() dO1a81@y-pat (dO1a12@match dO1a91@e dO1a82@z-pat dO1a92@m* dO1a93@s* dO1a94@ae* dO1a86@r)) (call-with-values (lambda () (join-wraps dO1a92@m* dO1a93@s* dO1a94@ae* dO1a91@e)) (lambda (dO1ab3@dO1aae dO1ab4@dO1ab0 dO1ab5@dO1ab2) ((lambda (dO1ab9@ae* dO1aba@s* dO1abb@m*) (dO1a8f@f (dOb27@stx-expr dO1a91@e) dO1abb@m* dO1aba@s* dO1ab9@ae*)) dO1ab5@dO1ab2 dO1ab4@dO1ab0 dO1ab3@dO1aae)))) (if (dO6ad@dO581@annotation? dO1a91@e) (dO1a8f@f (dO6af@dO585@annotation-expression dO1a91@e) dO1a92@m* dO1a93@s* dO1a94@ae*) (values '() dO1a81@y-pat (dO1a12@match dO1a91@e dO1a82@z-pat dO1a92@m* dO1a93@s* dO1a94@ae* dO1a86@r)))))))) dO1a8f@f) dO1a7f@e dO1a83@m* dO1a84@s* dO1a85@ae*))) (set! dO1a0a@match-each-any (lambda (dO1a63@e dO1a64@m* dO1a65@s* dO1a66@ae*) (if (pair? dO1a63@e) ((lambda (dO1a6b@l) (and dO1a6b@l (cons (dO1a04@stx^ (car dO1a63@e) dO1a64@m* dO1a65@s* dO1a66@ae*) dO1a6b@l))) (dO1a0a@match-each-any (cdr dO1a63@e) dO1a64@m* dO1a65@s* dO1a66@ae*)) (if (null? dO1a63@e) '() (if (dOb25@stx? dO1a63@e) (and (not (dOadf@top-marked? dO1a64@m*)) (call-with-values (lambda () (join-wraps dO1a64@m* dO1a65@s* dO1a66@ae* dO1a63@e)) (lambda (dO1a73@dO1a6e dO1a74@dO1a70 dO1a75@dO1a72) ((lambda (dO1a79@ae* dO1a7a@s* dO1a7b@m*) (dO1a0a@match-each-any (dOb27@stx-expr dO1a63@e) dO1a7b@m* dO1a7a@s* dO1a79@ae*)) dO1a75@dO1a72 dO1a74@dO1a70 dO1a73@dO1a6e)))) (if (dO6ad@dO581@annotation? dO1a63@e) (dO1a0a@match-each-any (dO6af@dO585@annotation-expression dO1a63@e) dO1a64@m* dO1a65@s* dO1a66@ae*) '#f)))))) (set! dO1a0c@match-empty (lambda (dO1a5d@p dO1a5e@r) (if (null? dO1a5d@p) dO1a5e@r (if (eq? dO1a5d@p '_) dO1a5e@r (if (eq? dO1a5d@p 'any) (cons '() dO1a5e@r) (if (pair? dO1a5d@p) (dO1a0c@match-empty (car dO1a5d@p) (dO1a0c@match-empty (cdr dO1a5d@p) dO1a5e@r)) (if (eq? dO1a5d@p 'each-any) (cons '() dO1a5e@r) ((lambda (dO1a61@t) (if (memv dO1a61@t '(each)) (dO1a0c@match-empty (vector-ref dO1a5d@p '1) dO1a5e@r) (if (memv dO1a61@t '(each+)) (dO1a0c@match-empty (vector-ref dO1a5d@p '1) (dO1a0c@match-empty (reverse (vector-ref dO1a5d@p '2)) (dO1a0c@match-empty (vector-ref dO1a5d@p '3) dO1a5e@r))) (if (memv dO1a61@t '(free-id atom)) dO1a5e@r (if (memv dO1a61@t '(scheme-id atom)) dO1a5e@r (if (memv dO1a61@t '(vector)) (dO1a0c@match-empty (vector-ref dO1a5d@p '1) dO1a5e@r) (assertion-violation 'syntax-dispatch '"invalid pattern" dO1a5d@p))))))) (vector-ref dO1a5d@p '0))))))))) (set! dO1a0e@combine (lambda (dO1a59@r* dO1a5a@r) (if (null? (car dO1a59@r*)) dO1a5a@r (cons (map car dO1a59@r*) (dO1a0e@combine (map cdr dO1a59@r*) dO1a5a@r))))) (set! dO1a10@match* (lambda (dO1a35@e dO1a36@p dO1a37@m* dO1a38@s* dO1a39@ae* dO1a3a@r) (if (null? dO1a36@p) (and (null? dO1a35@e) dO1a3a@r) (if (pair? dO1a36@p) (and (pair? dO1a35@e) (dO1a12@match (car dO1a35@e) (car dO1a36@p) dO1a37@m* dO1a38@s* dO1a39@ae* (dO1a12@match (cdr dO1a35@e) (cdr dO1a36@p) dO1a37@m* dO1a38@s* dO1a39@ae* dO1a3a@r))) (if (eq? dO1a36@p 'each-any) ((lambda (dO1a41@l) (and dO1a41@l (cons dO1a41@l dO1a3a@r))) (dO1a0a@match-each-any dO1a35@e dO1a37@m* dO1a38@s* dO1a39@ae*)) ((lambda (dO1a43@t) (if (memv dO1a43@t '(each)) (if (null? dO1a35@e) (dO1a0c@match-empty (vector-ref dO1a36@p '1) dO1a3a@r) ((lambda (dO1a45@r*) (and dO1a45@r* (dO1a0e@combine dO1a45@r* dO1a3a@r))) (dO1a06@match-each dO1a35@e (vector-ref dO1a36@p '1) dO1a37@m* dO1a38@s* dO1a39@ae*))) (if (memv dO1a43@t '(free-id)) (and (symbol? dO1a35@e) (dOadf@top-marked? dO1a37@m*) (dOb5f@free-id=? (dO1a04@stx^ dO1a35@e dO1a37@m* dO1a38@s* dO1a39@ae*) (vector-ref dO1a36@p '1)) dO1a3a@r) (if (memv dO1a43@t '(scheme-id)) (and (symbol? dO1a35@e) (dOadf@top-marked? dO1a37@m*) (dOb5f@free-id=? (dO1a04@stx^ dO1a35@e dO1a37@m* dO1a38@s* dO1a39@ae*) (dOce8@scheme-stx (vector-ref dO1a36@p '1))) dO1a3a@r) (if (memv dO1a43@t '(each+)) (call-with-values (lambda () (dO1a08@match-each+ dO1a35@e (vector-ref dO1a36@p '1) (vector-ref dO1a36@p '2) (vector-ref dO1a36@p '3) dO1a37@m* dO1a38@s* dO1a39@ae* dO1a3a@r)) (lambda (dO1a4d@dO1a48 dO1a4e@dO1a4a dO1a4f@dO1a4c) ((lambda (dO1a53@r dO1a54@y-pat dO1a55@xr*) (and dO1a53@r (null? dO1a54@y-pat) (if (null? dO1a55@xr*) (dO1a0c@match-empty (vector-ref dO1a36@p '1) dO1a53@r) (dO1a0e@combine dO1a55@xr* dO1a53@r)))) dO1a4f@dO1a4c dO1a4e@dO1a4a dO1a4d@dO1a48))) (if (memv dO1a43@t '(atom)) (and (fast-equal? (vector-ref dO1a36@p '1) (dOb6b@strip dO1a35@e dO1a37@m*)) dO1a3a@r) (if (memv dO1a43@t '(vector)) (and (vector? dO1a35@e) (dO1a12@match (vector->list dO1a35@e) (vector-ref dO1a36@p '1) dO1a37@m* dO1a38@s* dO1a39@ae* dO1a3a@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" dO1a36@p)))))))) (vector-ref dO1a36@p '0))))))) (set! dO1a12@match (lambda (dO1a17@e dO1a18@p dO1a19@m* dO1a1a@s* dO1a1b@ae* dO1a1c@r) (if (not dO1a1c@r) '#f (if (eq? dO1a18@p '_) dO1a1c@r (if (eq? dO1a18@p 'any) (cons (dO1a04@stx^ dO1a17@e dO1a19@m* dO1a1a@s* dO1a1b@ae*) dO1a1c@r) (if (dOb25@stx? dO1a17@e) (and (not (dOadf@top-marked? dO1a19@m*)) (call-with-values (lambda () (join-wraps dO1a19@m* dO1a1a@s* dO1a1b@ae* dO1a17@e)) (lambda (dO1a29@dO1a24 dO1a2a@dO1a26 dO1a2b@dO1a28) ((lambda (dO1a2f@ae* dO1a30@s* dO1a31@m*) (dO1a12@match (dOb27@stx-expr dO1a17@e) dO1a18@p dO1a31@m* dO1a30@s* dO1a2f@ae* dO1a1c@r)) dO1a2b@dO1a28 dO1a2a@dO1a26 dO1a29@dO1a24)))) (if (dO6ad@dO581@annotation? dO1a17@e) (dO1a12@match (dO6af@dO585@annotation-expression dO1a17@e) dO1a18@p dO1a19@m* dO1a1a@s* dO1a1b@ae* dO1a1c@r) (dO1a10@match* dO1a17@e dO1a18@p dO1a19@m* dO1a1a@s* dO1a1b@ae* dO1a1c@r)))))))) (lambda (dO1a13@e dO1a14@p) (dO1a12@match dO1a13@e dO1a14@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! dOd60@ellipsis? (lambda (dO1ae7@x) (and (dOb59@id? dO1ae7@x) (dOb5f@free-id=? dO1ae7@x (dOce8@scheme-stx '...))))) (set! dOd62@underscore? (lambda (dO1ae9@x) (and (dOb59@id? dO1ae9@x) (dOb5f@free-id=? dO1ae9@x (dOce8@scheme-stx '_))))) (set! dOd64@verify-literals (lambda (dO1aeb@lits dO1aec@expr) (for-each (lambda (dO1aef@x) (if (or (not (dOb59@id? dO1aef@x)) (dOd60@ellipsis? dO1aef@x) (dOd62@underscore? dO1aef@x)) (dOe3e@syntax-violation '#f '"invalid literal" dO1aec@expr dO1aef@x) (void))) dO1aeb@lits))) (set! dOd66@syntax-case-transformer ((lambda () ((lambda (dO1af2@build-dispatch-call dO1af4@invalid-ids-error dO1af6@gen-clause dO1af8@gen-syntax-case) (begin (set! dO1af2@build-dispatch-call (lambda (dO1b63@pvars dO1b64@expr dO1b65@y dO1b66@r dO1b67@mr) ((lambda (dO1b6d@ids dO1b6e@levels) ((lambda (dO1b71@labels dO1b72@new-vars) ((lambda (dO1b75@body) (list '(primitive apply) (dOabd@dO9fd@build-lambda '#f dO1b72@new-vars dO1b75@body) dO1b65@y)) (dOd80@chi-expr (dOb45@add-subst (dOb19@make-full-rib dO1b6d@ids dO1b71@labels) dO1b64@expr) (append (map (lambda (dO1b77@label dO1b78@var dO1b79@level) (cons dO1b77@label (dOb73@make-binding 'syntax (cons dO1b78@var dO1b79@level)))) dO1b71@labels dO1b72@new-vars (map cdr dO1b63@pvars)) dO1b66@r) dO1b67@mr))) (map dOae5@gen-label dO1b6d@ids) (map dOae1@gen-lexical dO1b6d@ids))) (map car dO1b63@pvars) (map cdr dO1b63@pvars)))) (set! dO1af4@invalid-ids-error (lambda (dO1b57@id* dO1b58@e dO1b59@class) ((letrec ((dO1b5d@find (lambda (dO1b5f@id* dO1b60@ok*) (if (null? dO1b5f@id*) (dOe3e@syntax-violation '#f '"invalid syntax" dO1b58@e) (if (dOb59@id? (car dO1b5f@id*)) (if (dOb65@bound-id-member? (car dO1b5f@id*) dO1b60@ok*) (dOe3a@syntax-error (car dO1b5f@id*) '"duplicate " dO1b59@class) (dO1b5d@find (cdr dO1b5f@id*) (cons (car dO1b5f@id*) dO1b60@ok*))) (dOe3a@syntax-error (car dO1b5f@id*) '"invalid " dO1b59@class)))))) dO1b5d@find) dO1b57@id* '()))) (set! dO1af6@gen-clause (lambda (dO1b2f@x dO1b30@keys dO1b31@clauses dO1b32@r dO1b33@mr dO1b34@pat dO1b35@fender dO1b36@expr) (call-with-values (lambda () (dOd5c@convert-pattern dO1b34@pat dO1b30@keys)) (lambda (dO1b43@dO1b40 dO1b44@dO1b42) ((lambda (dO1b47@pvars dO1b48@p) (if (not (dOb63@distinct-bound-ids? (map car dO1b47@pvars))) (dO1af4@invalid-ids-error (map car dO1b47@pvars) dO1b34@pat '"pattern variable") (if (not (for-all (lambda (dO1b4b@x) (not (dOd60@ellipsis? (car dO1b4b@x)))) dO1b47@pvars)) (dOe3e@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" dO1b34@pat) ((lambda (dO1b4d@y) ((lambda (dO1b4f@test) ((lambda (dO1b51@conseq) ((lambda (dO1b53@altern) (list (dOabd@dO9fd@build-lambda '#f (list dO1b4d@y) (list 'if dO1b4f@test dO1b51@conseq dO1b53@altern)) (list '(primitive syntax-dispatch) dO1b2f@x (list 'quote dO1b48@p)))) (dO1af8@gen-syntax-case dO1b2f@x dO1b30@keys dO1b31@clauses dO1b32@r dO1b33@mr))) (dO1af2@build-dispatch-call dO1b47@pvars dO1b36@expr dO1b4d@y dO1b32@r dO1b33@mr))) (if (eq? dO1b35@fender '#t) dO1b4d@y ((lambda (dO1b55@call) (list 'if dO1b4d@y dO1b55@call (list 'quote '#f))) (dO1af2@build-dispatch-call dO1b47@pvars dO1b35@fender dO1b4d@y dO1b32@r dO1b33@mr))))) (dOae1@gen-lexical 'tmp))))) dO1b44@dO1b42 dO1b43@dO1b40))))) (set! dO1af8@gen-syntax-case (lambda (dO1b0d@x dO1b0e@keys dO1b0f@clauses dO1b10@r dO1b11@mr) (if (null? dO1b0f@clauses) (list '(primitive syntax-error) dO1b0d@x) ((lambda (dO1b17@t) ((lambda (dO1b19@ls/false) (if dO1b19@ls/false (apply (lambda (dO1b1b@pat dO1b1c@expr) (if (and (dOb59@id? dO1b1b@pat) (not (dOb65@bound-id-member? dO1b1b@pat dO1b0e@keys)) (not (dOd60@ellipsis? dO1b1b@pat))) (if (dOb5f@free-id=? dO1b1b@pat (dOce8@scheme-stx '_)) (dOd80@chi-expr dO1b1c@expr dO1b10@r dO1b11@mr) ((lambda (dO1b1f@lab dO1b20@lex) ((lambda (dO1b23@body) (list (dOabd@dO9fd@build-lambda '#f (list dO1b20@lex) dO1b23@body) dO1b0d@x)) (dOd80@chi-expr (dOb45@add-subst (dOb19@make-full-rib (list dO1b1b@pat) (list dO1b1f@lab)) dO1b1c@expr) (cons (cons dO1b1f@lab (dOb73@make-binding 'syntax (cons dO1b20@lex '0))) dO1b10@r) dO1b11@mr))) (dOae5@gen-label dO1b1b@pat) (dOae1@gen-lexical dO1b1b@pat))) (dO1af6@gen-clause dO1b0d@x dO1b0e@keys (cdr dO1b0f@clauses) dO1b10@r dO1b11@mr dO1b1b@pat '#t dO1b1c@expr))) dO1b19@ls/false) ((lambda (dO1b25@t) ((lambda (dO1b27@ls/false) (if dO1b27@ls/false (apply (lambda (dO1b29@pat dO1b2a@fender dO1b2b@expr) (dO1af6@gen-clause dO1b0d@x dO1b0e@keys (cdr dO1b0f@clauses) dO1b10@r dO1b11@mr dO1b29@pat dO1b2a@fender dO1b2b@expr)) dO1b27@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1b25@t))) (dOd5e@syntax-dispatch dO1b25@t '(any any any)))) dO1b17@t))) (dOd5e@syntax-dispatch dO1b17@t '(any any)))) (car dO1b0f@clauses))))) (lambda (dO1af9@e dO1afa@r dO1afb@mr) ((lambda (dO1aff@t) ((lambda (dO1b01@ls/false) (if dO1b01@ls/false (apply (lambda (dO1b03@expr dO1b04@keys dO1b05@clauses) (begin (dOd64@verify-literals dO1b04@keys dO1af9@e) ((lambda (dO1b09@x) ((lambda (dO1b0b@body) (list (dOabd@dO9fd@build-lambda '#f (list dO1b09@x) dO1b0b@body) (dOd80@chi-expr dO1b03@expr dO1afa@r dO1afb@mr))) (dO1af8@gen-syntax-case dO1b09@x dO1b04@keys dO1b05@clauses dO1afa@r dO1afb@mr))) (dOae1@gen-lexical 'tmp)))) dO1b01@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1aff@t))) (dOd5e@syntax-dispatch dO1aff@t '(_ any each-any . each-any)))) dO1af9@e)))) '#f '#f '#f '#f)))) (set! dOd68@ellipsis-map (lambda (dO1b7d@proc dO1b7e@ls . dO1b81@ls*) ((lambda (dO1b84@who) (begin (set! dO1b84@who '...) (begin (if (not (list? dO1b7e@ls)) (assertion-violation dO1b84@who '"not a list" dO1b7e@ls) (void)) (if (not (null? dO1b81@ls*)) ((lambda (dO1b85@n) (for-each (lambda (dO1b87@x) (begin (if (not (list? dO1b87@x)) (assertion-violation dO1b84@who '"not a list" dO1b87@x) (void)) (if (not (= (length dO1b87@x) dO1b85@n)) (assertion-violation dO1b84@who '"length mismatch" dO1b7e@ls dO1b87@x) (void)))) dO1b81@ls*)) (length dO1b7e@ls)) (void)) (apply map dO1b7d@proc dO1b7e@ls dO1b81@ls*)))) '#f))) (set! dOd6a@syntax-transformer ((lambda () ((lambda (dO1b8a@gen-syntax dO1b8c@gen-ref dO1b8e@gen-append dO1b90@gen-mappend dO1b92@gen-map dO1b94@gen-cons dO1b96@gen-vector dO1b98@regen) (begin (set! dO1b8a@gen-syntax (lambda (dO1c01@src dO1c02@e dO1c03@r dO1c04@maps dO1c05@ellipsis? dO1c06@vec?) ((lambda (dO1c0d@t) ((lambda (dO1c0f@ls/false) (if (and dO1c0f@ls/false (apply (lambda (dO1c11@dots) (dO1c05@ellipsis? dO1c11@dots)) dO1c0f@ls/false)) (apply (lambda (dO1c13@dots) (dOe3e@syntax-violation '#f '"misplaced ellipsis in syntax form" dO1c01@src)) dO1c0f@ls/false) ((lambda (dO1c15@t) ((lambda (dO1c17@ls/false) (if (and dO1c17@ls/false (apply (lambda (dO1c19@id) (dOb59@id? dO1c19@id)) dO1c17@ls/false)) (apply (lambda (dO1c1b@id) ((lambda (dO1c1d@label) ((lambda (dO1c1f@b) ((lambda () (if (eq? (dOb75@binding-type dO1c1f@b) 'syntax) (call-with-values (lambda () ((lambda (dO1c25@var.lev) (dO1b8c@gen-ref dO1c01@src (car dO1c25@var.lev) (cdr dO1c25@var.lev) dO1c04@maps)) (dOb77@binding-value dO1c1f@b))) (lambda (dO1c27@dO1c22 dO1c28@dO1c24) ((lambda (dO1c2b@maps dO1c2c@var) (values (list 'ref dO1c2c@var) dO1c2b@maps)) dO1c28@dO1c24 dO1c27@dO1c22))) (values (list 'quote dO1c02@e) dO1c04@maps))))) (dOb71@label->binding dO1c1d@label dO1c03@r))) (dOb6f@id->label dO1c02@e))) dO1c17@ls/false) ((lambda (dO1c2f@t) ((lambda (dO1c31@ls/false) (if (and dO1c31@ls/false (apply (lambda (dO1c33@dots dO1c34@e) (dO1c05@ellipsis? dO1c33@dots)) dO1c31@ls/false)) (apply (lambda (dO1c37@dots dO1c38@e) (if dO1c06@vec? (dOe3e@syntax-violation '#f '"misplaced ellipsis in syntax form" dO1c01@src) (dO1b8a@gen-syntax dO1c01@src dO1c38@e dO1c03@r dO1c04@maps (lambda (dO1c3b@x) '#f) '#f))) dO1c31@ls/false) ((lambda (dO1c3d@t) ((lambda (dO1c3f@ls/false) (if (and dO1c3f@ls/false (apply (lambda (dO1c41@x dO1c42@dots dO1c43@y) (dO1c05@ellipsis? dO1c42@dots)) dO1c3f@ls/false)) (apply (lambda (dO1c47@x dO1c48@dots dO1c49@y) ((letrec ((dO1c4d@f (lambda (dO1c4f@y dO1c50@k) ((lambda (dO1c53@t) ((lambda (dO1c55@ls/false) (if dO1c55@ls/false (apply (lambda () (dO1c50@k dO1c04@maps)) dO1c55@ls/false) ((lambda (dO1c57@t) ((lambda (dO1c59@ls/false) (if (and dO1c59@ls/false (apply (lambda (dO1c5b@dots dO1c5c@y) (dO1c05@ellipsis? dO1c5b@dots)) dO1c59@ls/false)) (apply (lambda (dO1c5f@dots dO1c60@y) (dO1c4d@f dO1c60@y (lambda (dO1c63@maps) (call-with-values (lambda () (dO1c50@k (cons '() dO1c63@maps))) (lambda (dO1c69@dO1c66 dO1c6a@dO1c68) ((lambda (dO1c6d@maps dO1c6e@x) (if (null? (car dO1c6d@maps)) (dOe3e@syntax-violation '#f '"extra ellipsis in syntax form" dO1c01@src) (values (dO1b90@gen-mappend dO1c6e@x (car dO1c6d@maps)) (cdr dO1c6d@maps)))) dO1c6a@dO1c68 dO1c69@dO1c66)))))) dO1c59@ls/false) ((lambda (dO1c71@t) ((lambda (dO1c73@ls/false) (if dO1c73@ls/false (apply (lambda () (call-with-values (lambda () (dO1b8a@gen-syntax dO1c01@src dO1c4f@y dO1c03@r dO1c04@maps dO1c05@ellipsis? dO1c06@vec?)) (lambda (dO1c79@dO1c76 dO1c7a@dO1c78) ((lambda (dO1c7d@maps dO1c7e@y) (call-with-values (lambda () (dO1c50@k dO1c7d@maps)) (lambda (dO1c85@dO1c82 dO1c86@dO1c84) ((lambda (dO1c89@maps dO1c8a@x) (values (dO1b8e@gen-append dO1c8a@x dO1c7e@y) dO1c89@maps)) dO1c86@dO1c84 dO1c85@dO1c82)))) dO1c7a@dO1c78 dO1c79@dO1c76)))) dO1c73@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1c71@t))) (dOd5e@syntax-dispatch dO1c71@t '_))) dO1c57@t))) (dOd5e@syntax-dispatch dO1c57@t '(any . any)))) dO1c53@t))) (dOd5e@syntax-dispatch dO1c53@t '()))) dO1c4f@y)))) dO1c4d@f) dO1c49@y (lambda (dO1c8d@maps) (call-with-values (lambda () (dO1b8a@gen-syntax dO1c01@src dO1c47@x dO1c03@r (cons '() dO1c8d@maps) dO1c05@ellipsis? '#f)) (lambda (dO1c93@dO1c90 dO1c94@dO1c92) ((lambda (dO1c97@maps dO1c98@x) (if (null? (car dO1c97@maps)) (dOe3e@syntax-violation '#f '"extra ellipsis in syntax form" dO1c01@src) (values (dO1b92@gen-map dO1c98@x (car dO1c97@maps)) (cdr dO1c97@maps)))) dO1c94@dO1c92 dO1c93@dO1c90)))))) dO1c3f@ls/false) ((lambda (dO1c9b@t) ((lambda (dO1c9d@ls/false) (if dO1c9d@ls/false (apply (lambda (dO1c9f@x dO1ca0@y) (call-with-values (lambda () (dO1b8a@gen-syntax dO1c01@src dO1c9f@x dO1c03@r dO1c04@maps dO1c05@ellipsis? '#f)) (lambda (dO1ca7@dO1ca4 dO1ca8@dO1ca6) ((lambda (dO1cab@maps dO1cac@xnew) (call-with-values (lambda () (dO1b8a@gen-syntax dO1c01@src dO1ca0@y dO1c03@r dO1cab@maps dO1c05@ellipsis? dO1c06@vec?)) (lambda (dO1cb3@dO1cb0 dO1cb4@dO1cb2) ((lambda (dO1cb7@maps dO1cb8@ynew) (values (dO1b94@gen-cons dO1c02@e dO1c9f@x dO1ca0@y dO1cac@xnew dO1cb8@ynew) dO1cb7@maps)) dO1cb4@dO1cb2 dO1cb3@dO1cb0)))) dO1ca8@dO1ca6 dO1ca7@dO1ca4)))) dO1c9d@ls/false) ((lambda (dO1cbb@t) ((lambda (dO1cbd@ls/false) (if dO1cbd@ls/false (apply (lambda (dO1cbf@ls) (call-with-values (lambda () (dO1b8a@gen-syntax dO1c01@src dO1cbf@ls dO1c03@r dO1c04@maps dO1c05@ellipsis? '#t)) (lambda (dO1cc5@dO1cc2 dO1cc6@dO1cc4) ((lambda (dO1cc9@maps dO1cca@lsnew) (values (dO1b96@gen-vector dO1c02@e dO1cbf@ls dO1cca@lsnew) dO1cc9@maps)) dO1cc6@dO1cc4 dO1cc5@dO1cc2)))) dO1cbd@ls/false) ((lambda (dO1ccd@t) ((lambda (dO1ccf@ls/false) (if dO1ccf@ls/false (apply (lambda () (values (list 'quote dO1c02@e) dO1c04@maps)) dO1ccf@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1ccd@t))) (dOd5e@syntax-dispatch dO1ccd@t '_))) dO1cbb@t))) (dOd5e@syntax-dispatch dO1cbb@t '#(vector each-any)))) dO1c9b@t))) (dOd5e@syntax-dispatch dO1c9b@t '(any . any)))) dO1c3d@t))) (dOd5e@syntax-dispatch dO1c3d@t '(any any . any)))) dO1c2f@t))) (dOd5e@syntax-dispatch dO1c2f@t '(any any)))) dO1c15@t))) (dOd5e@syntax-dispatch dO1c15@t 'any))) dO1c0d@t))) (dOd5e@syntax-dispatch dO1c0d@t 'any))) dO1c02@e))) (set! dO1b8c@gen-ref (lambda (dO1be7@src dO1be8@var dO1be9@level dO1bea@maps) (if (= dO1be9@level '0) (values dO1be8@var dO1bea@maps) (if (null? dO1bea@maps) (dOe3e@syntax-violation '#f '"missing ellipsis in syntax form" dO1be7@src) (call-with-values (lambda () (dO1b8c@gen-ref dO1be7@src dO1be8@var (- dO1be9@level '1) (cdr dO1bea@maps))) (lambda (dO1bf3@dO1bf0 dO1bf4@dO1bf2) ((lambda (dO1bf7@outer-maps dO1bf8@outer-var) ((lambda (dO1bfb@t) (if dO1bfb@t ((lambda (dO1bfd@b) (values (cdr dO1bfd@b) dO1bea@maps)) dO1bfb@t) ((lambda (dO1bff@inner-var) (values dO1bff@inner-var (cons (cons (cons dO1bf8@outer-var dO1bff@inner-var) (car dO1bea@maps)) dO1bf7@outer-maps))) (dOae1@gen-lexical 'tmp)))) (assq dO1bf8@outer-var (car dO1bea@maps)))) dO1bf4@dO1bf2 dO1bf3@dO1bf0))))))) (set! dO1b8e@gen-append (lambda (dO1be3@x dO1be4@y) (if (fast-equal? dO1be4@y ''()) dO1be3@x (list 'append dO1be3@x dO1be4@y)))) (set! dO1b90@gen-mappend (lambda (dO1bdf@e dO1be0@map-env) (list 'apply '(primitive append) (dO1b92@gen-map dO1bdf@e dO1be0@map-env)))) (set! dO1b92@gen-map (lambda (dO1bcd@e dO1bce@map-env) ((lambda (dO1bd1@formals dO1bd2@actuals) (if (eq? (car dO1bcd@e) 'ref) (car dO1bd2@actuals) (if (for-all (lambda (dO1bd5@x) (and (eq? (car dO1bd5@x) 'ref) (memq (cadr dO1bd5@x) dO1bd1@formals))) (cdr dO1bcd@e)) ((lambda (dO1bd7@args) (cons 'map (cons (list 'primitive (car dO1bcd@e)) dO1bd7@args))) (map ((lambda (dO1bd9@r) (lambda (dO1bdb@x) (cdr (assq (cadr dO1bdb@x) dO1bd9@r)))) (map cons dO1bd1@formals dO1bd2@actuals)) (cdr dO1bcd@e))) (cons* 'map (list 'lambda dO1bd1@formals dO1bcd@e) dO1bd2@actuals)))) (map cdr dO1bce@map-env) (map (lambda (dO1bdd@x) (list 'ref (car dO1bdd@x))) dO1bce@map-env)))) (set! dO1b94@gen-cons (lambda (dO1bbd@e dO1bbe@x dO1bbf@y dO1bc0@xnew dO1bc1@ynew) ((lambda (dO1bc7@t) (if (memv dO1bc7@t '(quote)) (if (eq? (car dO1bc0@xnew) 'quote) ((lambda (dO1bc9@xnew dO1bca@ynew) (if (and (eq? dO1bc9@xnew dO1bbe@x) (eq? dO1bca@ynew dO1bbf@y)) (list 'quote dO1bbd@e) (list 'quote (cons dO1bc9@xnew dO1bca@ynew)))) (cadr dO1bc0@xnew) (cadr dO1bc1@ynew)) (if (null? (cadr dO1bc1@ynew)) (list 'list dO1bc0@xnew) (list 'cons dO1bc0@xnew dO1bc1@ynew))) (if (memv dO1bc7@t '(list)) (cons 'list (cons dO1bc0@xnew (cdr dO1bc1@ynew))) (list 'cons dO1bc0@xnew dO1bc1@ynew)))) (car dO1bc1@ynew)))) (set! dO1b96@gen-vector (lambda (dO1bb7@e dO1bb8@ls dO1bb9@lsnew) (if (eq? (car dO1bb9@lsnew) 'quote) (if (eq? (cadr dO1bb9@lsnew) dO1bb8@ls) (list 'quote dO1bb7@e) (list 'quote (list->vector (cadr dO1bb9@lsnew)))) (if (eq? (car dO1bb9@lsnew) 'list) (cons 'vector (cdr dO1bb9@lsnew)) (list 'list->vector dO1bb9@lsnew))))) (set! dO1b98@regen (lambda (dO1bb1@x) ((lambda (dO1bb3@t) (if (memv dO1bb3@t '(ref)) (cadr dO1bb1@x) (if (memv dO1bb3@t '(primitive)) (list 'primitive (cadr dO1bb1@x)) (if (memv dO1bb3@t '(quote)) (list 'quote (cadr dO1bb1@x)) (if (memv dO1bb3@t '(lambda)) (dOabd@dO9fd@build-lambda '#f (cadr dO1bb1@x) (dO1b98@regen (caddr dO1bb1@x))) (if (memv dO1bb3@t '(map)) ((lambda (dO1bb5@ls) (cons '(primitive ellipsis-map) dO1bb5@ls)) (map dO1b98@regen (cdr dO1bb1@x))) (cons (list 'primitive (car dO1bb1@x)) (map dO1b98@regen (cdr dO1bb1@x))))))))) (car dO1bb1@x)))) (lambda (dO1b99@e dO1b9a@r dO1b9b@mr) ((lambda (dO1b9f@t) ((lambda (dO1ba1@ls/false) (if dO1ba1@ls/false (apply (lambda (dO1ba3@x) (call-with-values (lambda () (dO1b8a@gen-syntax dO1b99@e dO1ba3@x dO1b9a@r '() dOd60@ellipsis? '#f)) (lambda (dO1ba9@dO1ba6 dO1baa@dO1ba8) ((lambda (dO1bad@maps dO1bae@e) (dO1b98@regen dO1bae@e)) dO1baa@dO1ba8 dO1ba9@dO1ba6)))) dO1ba1@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1b9f@t))) (dOd5e@syntax-dispatch dO1b9f@t '(_ any)))) dO1b99@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! dOd6c@core-macro-transformer (lambda (dO1cd1@name) ((lambda (dO1cd3@t) (if (memv dO1cd3@t '(quote)) dOd0e@quote-transformer (if (memv dO1cd3@t '(lambda)) dOd12@lambda-transformer (if (memv dO1cd3@t '(case-lambda)) dOd10@case-lambda-transformer (if (memv dO1cd3@t '(letrec)) dOcf6@letrec-transformer (if (memv dO1cd3@t '(letrec*)) dOcf8@letrec*-transformer (if (memv dO1cd3@t '(if)) dOd06@if-transformer (if (memv dO1cd3@t '(and)) dOd08@and-transformer (if (memv dO1cd3@t '(or)) dOd0a@or-transformer (if (memv dO1cd3@t '(foreign-call)) dOd5a@foreign-call-transformer (if (memv dO1cd3@t '(syntax-case)) dOd66@syntax-case-transformer (if (memv dO1cd3@t '(syntax)) dOd6a@syntax-transformer (if (memv dO1cd3@t '(type-descriptor)) dOcfc@type-descriptor-transformer (if (memv dO1cd3@t '(record-type-descriptor)) dOcfe@record-type-descriptor-transformer (if (memv dO1cd3@t '(record-constructor-descriptor)) dOd00@record-constructor-descriptor-transformer (if (memv dO1cd3@t '(fluid-let-syntax)) dOcfa@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" dO1cd1@name))))))))))))))))) dO1cd1@name))) (set! dOd6e@symbol-macro (lambda (dO1cd5@x dO1cd6@set) ((lambda (dO1cd9@t) ((lambda (dO1cdb@ls/false) (if (and dO1cdb@ls/false (apply (lambda (dO1cdd@name) (and (dOb59@id? dO1cdd@name) (memq (dOb5b@id->sym dO1cdd@name) dO1cd6@set))) dO1cdb@ls/false)) (apply (lambda (dO1cdf@name) (dOd14@bless (list 'quote dO1cdf@name))) dO1cdb@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1cd9@t))) (dOd5e@syntax-dispatch dO1cd9@t '(_ any)))) dO1cd5@x))) (set! dOd70@macro-transformer (lambda (dO1ce1@x) (if (procedure? dO1ce1@x) dO1ce1@x (if (symbol? dO1ce1@x) ((lambda (dO1ce3@t) (if (memv dO1ce3@t '(define-record-type)) dOd52@define-record-type-macro (if (memv dO1ce3@t '(define-struct)) dOd50@define-struct-macro (if (memv dO1ce3@t '(include)) dOd46@include-macro (if (memv dO1ce3@t '(cond)) dOd42@cond-macro (if (memv dO1ce3@t '(let)) dOd1a@let-macro (if (memv dO1ce3@t '(do)) dOd3a@do-macro (if (memv dO1ce3@t '(or)) dOd3e@or-macro (if (memv dO1ce3@t '(and)) dOd40@and-macro (if (memv dO1ce3@t '(let*)) dOd3c@let*-macro (if (memv dO1ce3@t '(let-values)) dOd1c@let-values-macro (if (memv dO1ce3@t '(let*-values)) dOd1e@let*-values-macro (if (memv dO1ce3@t '(syntax-rules)) dOd4a@syntax-rules-macro (if (memv dO1ce3@t '(quasiquote)) dOd4c@quasiquote-macro (if (memv dO1ce3@t '(quasisyntax)) dOd4e@quasisyntax-macro (if (memv dO1ce3@t '(with-syntax)) dOd16@with-syntax-macro (if (memv dO1ce3@t '(when)) dOd02@when-macro (if (memv dO1ce3@t '(unless)) dOd04@unless-macro (if (memv dO1ce3@t '(case)) dOd0c@case-macro (if (memv dO1ce3@t '(identifier-syntax)) dOd38@identifier-syntax-macro (if (memv dO1ce3@t '(time)) dOd30@time-macro (if (memv dO1ce3@t '(delay)) dOd32@delay-macro (if (memv dO1ce3@t '(assert)) dOd34@assert-macro (if (memv dO1ce3@t '(endianness)) dOd36@endianness-macro (if (memv dO1ce3@t '(guard)) dOd2c@guard-macro (if (memv dO1ce3@t '(define-enumeration)) dOd2e@define-enumeration-macro (if (memv dO1ce3@t '(trace-lambda)) dOd20@trace-lambda-macro (if (memv dO1ce3@t '(trace-define)) dOd22@trace-define-macro (if (memv dO1ce3@t '(trace-define-syntax)) dOd24@trace-define-syntax-macro (if (memv dO1ce3@t '(trace-let-syntax)) dOd28@trace-let-syntax-macro (if (memv dO1ce3@t '(trace-letrec-syntax)) dOd2a@trace-letrec-syntax-macro (if (memv dO1ce3@t '(define-condition-type)) dOd54@define-condition-type-macro (if (memv dO1ce3@t '(parameterize)) dOd58@parameterize-macro (if (memv dO1ce3@t '(include-into)) dOd48@include-into-macro (if (memv dO1ce3@t '(eol-style)) (lambda (dO1ce5@x) (dOd6e@symbol-macro dO1ce5@x '(none lf cr crlf nel crnel ls))) (if (memv dO1ce3@t '(error-handling-mode)) (lambda (dO1ce7@x) (dOd6e@symbol-macro dO1ce7@x '(ignore raise replace))) (if (memv dO1ce3@t '(buffer-mode)) (lambda (dO1ce9@x) (dOd6e@symbol-macro dO1ce9@x '(none line block))) (if (memv dO1ce3@t '(file-options)) dOad4@file-options-macro (if (memv dO1ce3@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) dOd56@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" dO1ce1@x)))))))))))))))))))))))))))))))))))))))) dO1ce1@x) (error 'core-macro-transformer '"BUG: invalid macro" dO1ce1@x))))) (set! dOd72@local-macro-transformer (lambda (dO1ceb@x) (car dO1ceb@x))) (set! dOd74@do-macro-call (lambda (dO1ced@transformer dO1cee@expr) ((lambda (dO1cf1@out) (begin ((letrec ((dO1cf3@f (lambda (dO1cf5@x) (if (not (dOb25@stx? dO1cf5@x)) (if (pair? dO1cf5@x) (begin (dO1cf3@f (car dO1cf5@x)) (dO1cf3@f (cdr dO1cf5@x))) (if (vector? dO1cf5@x) (vector-for-each dO1cf3@f dO1cf5@x) (if (symbol? dO1cf5@x) (dOe3e@syntax-violation '#f '"raw symbol encountered in output of macro" dO1cee@expr dO1cf5@x) (void)))) (void))))) dO1cf3@f) dO1cf1@out) (dOb43@add-mark (dOb3b@gen-mark) dO1cf1@out dO1cee@expr))) (dO1ced@transformer (dOb43@add-mark dOb3d@anti-mark dO1cee@expr '#f))))) (set! dOd76@chi-macro (lambda (dO1cf7@p dO1cf8@e) (dOd74@do-macro-call (dOd70@macro-transformer dO1cf7@p) dO1cf8@e))) (set! dOd78@chi-local-macro (lambda (dO1cfb@p dO1cfc@e) (dOd74@do-macro-call (dOd72@local-macro-transformer dO1cfb@p) dO1cfc@e))) (set! dOd7a@chi-global-macro (lambda (dO1cff@p dO1d00@e) ((lambda (dO1d03@lib dO1d04@loc) (begin (dO985@dO7d4@visit-library dO1d03@lib) ((lambda (dO1d07@x) ((lambda (dO1d09@transformer) (dOd74@do-macro-call dO1d09@transformer dO1d00@e)) (if (procedure? dO1d07@x) dO1d07@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" dO1d07@x)))) (symbol-value dO1d04@loc)))) (car dO1cff@p) (cdr dO1cff@p)))) (set! dOd7c@chi-expr* (lambda (dO1d0b@e* dO1d0c@r dO1d0d@mr) (if (null? dO1d0b@e*) '() ((lambda (dO1d11@e) (cons dO1d11@e (dOd7c@chi-expr* (cdr dO1d0b@e*) dO1d0c@r dO1d0d@mr))) (dOd80@chi-expr (car dO1d0b@e*) dO1d0c@r dO1d0d@mr))))) (set! dOd7e@chi-application (lambda (dO1d13@e dO1d14@r dO1d15@mr) ((lambda (dO1d19@t) ((lambda (dO1d1b@ls/false) (if dO1d1b@ls/false (apply (lambda (dO1d1d@rator dO1d1e@rands) ((lambda (dO1d21@rator) (cons dO1d21@rator (dOd7c@chi-expr* dO1d1e@rands dO1d14@r dO1d15@mr))) (dOd80@chi-expr dO1d1d@rator dO1d14@r dO1d15@mr))) dO1d1b@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1d19@t))) (dOd5e@syntax-dispatch dO1d19@t '(any . each-any)))) dO1d13@e))) (set! dOd80@chi-expr (lambda (dO1d23@e dO1d24@r dO1d25@mr) (call-with-values (lambda () (dOb7b@syntax-type dO1d23@e dO1d24@r)) (lambda (dO1d2f@dO1d2a dO1d30@dO1d2c dO1d31@dO1d2e) ((lambda (dO1d35@kwd dO1d36@value dO1d37@type) ((lambda (dO1d3b@t) (if (memv dO1d3b@t '(core-macro)) ((lambda (dO1d3d@transformer) (dO1d3d@transformer dO1d23@e dO1d24@r dO1d25@mr)) (dOd6c@core-macro-transformer dO1d36@value)) (if (memv dO1d3b@t '(global)) ((lambda (dO1d3f@lib) ((lambda (dO1d41@loc) ((lambda () (begin ((dOdc6@inv-collector) dO1d3f@lib) dO1d41@loc)))) (cdr dO1d36@value))) (car dO1d36@value)) (if (memv dO1d3b@t '(core-prim)) ((lambda (dO1d43@name) (list 'primitive dO1d43@name)) dO1d36@value) (if (memv dO1d3b@t '(call)) (dOd7e@chi-application dO1d23@e dO1d24@r dO1d25@mr) (if (memv dO1d3b@t '(lexical)) ((lambda (dO1d45@lex) dO1d45@lex) (dOcea@lexical-var dO1d36@value)) (if (memv dO1d3b@t '(global-macro global-macro!)) (dOd80@chi-expr (dOd7a@chi-global-macro dO1d36@value dO1d23@e) dO1d24@r dO1d25@mr) (if (memv dO1d3b@t '(local-macro local-macro!)) (dOd80@chi-expr (dOd78@chi-local-macro dO1d36@value dO1d23@e) dO1d24@r dO1d25@mr) (if (memv dO1d3b@t '(macro macro!)) (dOd80@chi-expr (dOd76@chi-macro dO1d36@value dO1d23@e) dO1d24@r dO1d25@mr) (if (memv dO1d3b@t '(constant)) ((lambda (dO1d47@datum) (list 'quote dO1d47@datum)) dO1d36@value) (if (memv dO1d3b@t '(set!)) (dOd82@chi-set! dO1d23@e dO1d24@r dO1d25@mr) (if (memv dO1d3b@t '(begin)) ((lambda (dO1d49@t) ((lambda (dO1d4b@ls/false) (if dO1d4b@ls/false (apply (lambda (dO1d4d@x dO1d4e@x*) (dOac0@dOa2f@build-sequence '#f (dOd7c@chi-expr* (cons dO1d4d@x dO1d4e@x*) dO1d24@r dO1d25@mr))) dO1d4b@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1d49@t))) (dOd5e@syntax-dispatch dO1d49@t '(_ any . each-any)))) dO1d23@e) (if (memv dO1d3b@t '(let-syntax letrec-syntax)) ((lambda (dO1d51@t) ((lambda (dO1d53@ls/false) (if (and dO1d53@ls/false (apply (lambda (dO1d55@xlhs* dO1d56@xrhs* dO1d57@xbody dO1d58@xbody*) (if (not (dOb61@valid-bound-ids? dO1d55@xlhs*)) (dOe3e@syntax-violation '#f '"invalid identifiers" dO1d23@e) (void))) dO1d53@ls/false)) (apply (lambda (dO1d5d@xlhs* dO1d5e@xrhs* dO1d5f@xbody dO1d60@xbody*) ((lambda (dO1d65@xlab*) ((lambda (dO1d67@xrib) ((lambda (dO1d69@xb*) ((lambda () (dOac0@dOa2f@build-sequence '#f (dOd7c@chi-expr* (map (lambda (dO1d6b@x) (dOb45@add-subst dO1d67@xrib dO1d6b@x)) (cons dO1d5f@xbody dO1d60@xbody*)) (append (map cons dO1d65@xlab* dO1d69@xb*) dO1d24@r) (append (map cons dO1d65@xlab* dO1d69@xb*) dO1d25@mr)))))) (map (lambda (dO1d6d@x) (dOb91@make-eval-transformer (dOdb8@expand-transformer (if (eq? dO1d37@type 'let-syntax) dO1d6d@x (dOb45@add-subst dO1d67@xrib dO1d6d@x)) dO1d25@mr))) dO1d5e@xrhs*))) (dOb19@make-full-rib dO1d5d@xlhs* dO1d65@xlab*))) (map dOae5@gen-label dO1d5d@xlhs*))) dO1d53@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1d51@t))) (dOd5e@syntax-dispatch dO1d51@t '(_ #(each (any any)) any . each-any)))) dO1d23@e) (if (memv dO1d3b@t '(displaced-lexical)) (dOe3e@syntax-violation '#f '"identifier out of context" dO1d23@e) (if (memv dO1d3b@t '(syntax)) (dOe3e@syntax-violation '#f '"reference to pattern variable outside a syntax form" dO1d23@e) (if (memv dO1d3b@t '(define define-syntax module import library)) (dOe3e@syntax-violation '#f (string-append ((lambda (dO1d6f@t) (if (memv dO1d6f@t '(define)) '"a definition" (if (memv dO1d6f@t '(define-syntax)) '"a define-syntax" (if (memv dO1d6f@t '(module)) '"a module definition" (if (memv dO1d6f@t '(library)) '"a library definition" (if (memv dO1d6f@t '(import)) '"an import declaration" (if (memv dO1d6f@t '(export)) '"an export declaration" '"a non-expression"))))))) dO1d37@type) '" was found where an expression was expected") dO1d23@e) (if (memv dO1d3b@t '(mutable)) (dOe3e@syntax-violation '#f '"attempt to reference an unexportable variable" dO1d23@e) (dOe3e@syntax-violation '#f '"invalid expression" dO1d23@e)))))))))))))))))) dO1d37@type)) dO1d31@dO1d2e dO1d30@dO1d2c dO1d2f@dO1d2a))))) (set! dOd82@chi-set! (lambda (dO1d71@e dO1d72@r dO1d73@mr) ((lambda (dO1d77@t) ((lambda (dO1d79@ls/false) (if (and dO1d79@ls/false (apply (lambda (dO1d7b@x dO1d7c@v) (dOb59@id? dO1d7b@x)) dO1d79@ls/false)) (apply (lambda (dO1d7f@x dO1d80@v) (call-with-values (lambda () (dOb7b@syntax-type dO1d7f@x dO1d72@r)) (lambda (dO1d89@dO1d84 dO1d8a@dO1d86 dO1d8b@dO1d88) ((lambda (dO1d8f@kwd dO1d90@value dO1d91@type) ((lambda (dO1d95@t) (if (memv dO1d95@t '(lexical)) (begin (dOcee@set-lexical-mutable! dO1d90@value '#t) (list 'set! (dOcea@lexical-var dO1d90@value) (dOd80@chi-expr dO1d80@v dO1d72@r dO1d73@mr))) (if (memv dO1d95@t '(core-prim)) (dOe3e@syntax-violation '#f '"cannot modify imported core primitive" dO1d71@e) (if (memv dO1d95@t '(global)) (dOe3e@syntax-violation '#f '"attempt to modify imported binding" dO1d71@e) (if (memv dO1d95@t '(global-macro!)) (dOd80@chi-expr (dOd7a@chi-global-macro dO1d90@value dO1d71@e) dO1d72@r dO1d73@mr) (if (memv dO1d95@t '(local-macro!)) (dOd80@chi-expr (dOd78@chi-local-macro dO1d90@value dO1d71@e) dO1d72@r dO1d73@mr) (if (memv dO1d95@t '(mutable)) (dOe3e@syntax-violation '#f '"attempt to assign to an unexportable variable" dO1d71@e) (dOe3e@syntax-violation '#f '"invalid syntax" dO1d71@e)))))))) dO1d91@type)) dO1d8b@dO1d88 dO1d8a@dO1d86 dO1d89@dO1d84)))) dO1d79@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1d77@t))) (dOd5e@syntax-dispatch dO1d77@t '(_ any any)))) dO1d71@e))) (set! dOd84@verify-formals (lambda (dO1d97@fmls dO1d98@stx) ((lambda (dO1d9b@t) ((lambda (dO1d9d@ls/false) (if dO1d9d@ls/false (apply (lambda (dO1d9f@x*) (if (not (dOb61@valid-bound-ids? dO1d9f@x*)) (dOd18@invalid-fmls-error dO1d98@stx dO1d97@fmls) (void))) dO1d9d@ls/false) ((lambda (dO1da1@t) ((lambda (dO1da3@ls/false) (if dO1da3@ls/false (apply (lambda (dO1da5@x* dO1da6@x) (if (not (dOb61@valid-bound-ids? (cons dO1da6@x dO1da5@x*))) (dOd18@invalid-fmls-error dO1d98@stx dO1d97@fmls) (void))) dO1da3@ls/false) ((lambda (dO1da9@t) ((lambda (dO1dab@ls/false) (if dO1dab@ls/false (apply (lambda () (dOe3e@syntax-violation '#f '"invalid syntax" dO1d98@stx)) dO1dab@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1da9@t))) (dOd5e@syntax-dispatch dO1da9@t '_))) dO1da1@t))) (dOd5e@syntax-dispatch dO1da1@t '#(each+ any () any)))) dO1d9b@t))) (dOd5e@syntax-dispatch dO1d9b@t 'each-any))) dO1d97@fmls))) (set! dOd86@chi-lambda-clause (lambda (dO1dad@stx dO1dae@fmls dO1daf@body* dO1db0@r dO1db1@mr) ((lambda (dO1db7@t) ((lambda (dO1db9@ls/false) (if dO1db9@ls/false (apply (lambda (dO1dbb@x*) (begin (dOd84@verify-formals dO1dae@fmls dO1dad@stx) ((lambda (dO1dbd@lex* dO1dbe@lab*) (values dO1dbd@lex* (dOd96@chi-internal (dOb45@add-subst (dOb19@make-full-rib dO1dbb@x* dO1dbe@lab*) dO1daf@body*) (dOcf2@add-lexicals dO1dbe@lab* dO1dbd@lex* dO1db0@r) dO1db1@mr))) (map dOae1@gen-lexical dO1dbb@x*) (map dOae5@gen-label dO1dbb@x*)))) dO1db9@ls/false) ((lambda (dO1dc1@t) ((lambda (dO1dc3@ls/false) (if dO1dc3@ls/false (apply (lambda (dO1dc5@x* dO1dc6@x) (begin (dOd84@verify-formals dO1dae@fmls dO1dad@stx) ((lambda (dO1dc9@lex* dO1dca@lab* dO1dcb@lex dO1dcc@lab) (values (append dO1dc9@lex* dO1dcb@lex) (dOd96@chi-internal (dOb45@add-subst (dOb19@make-full-rib (cons dO1dc6@x dO1dc5@x*) (cons dO1dcc@lab dO1dca@lab*)) dO1daf@body*) (dOcf2@add-lexicals (cons dO1dcc@lab dO1dca@lab*) (cons dO1dcb@lex dO1dc9@lex*) dO1db0@r) dO1db1@mr))) (map dOae1@gen-lexical dO1dc5@x*) (map dOae5@gen-label dO1dc5@x*) (dOae1@gen-lexical dO1dc6@x) (dOae5@gen-label dO1dc6@x)))) dO1dc3@ls/false) ((lambda (dO1dd1@t) ((lambda (dO1dd3@ls/false) (if dO1dd3@ls/false (apply (lambda () (dOe3e@syntax-violation '#f '"invalid syntax" dO1dae@fmls)) dO1dd3@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1dd1@t))) (dOd5e@syntax-dispatch dO1dd1@t '_))) dO1dc1@t))) (dOd5e@syntax-dispatch dO1dc1@t '#(each+ any () any)))) dO1db7@t))) (dOd5e@syntax-dispatch dO1db7@t 'each-any))) dO1dae@fmls))) (set! dOd88@chi-lambda-clause* (lambda (dO1dd5@stx dO1dd6@fmls* dO1dd7@body** dO1dd8@r dO1dd9@mr) (if (null? dO1dd6@fmls*) (values '() '()) (call-with-values (lambda () (dOd86@chi-lambda-clause dO1dd5@stx (car dO1dd6@fmls*) (car dO1dd7@body**) dO1dd8@r dO1dd9@mr)) (lambda (dO1de3@dO1de0 dO1de4@dO1de2) ((lambda (dO1de7@b dO1de8@a) (call-with-values (lambda () (dOd88@chi-lambda-clause* dO1dd5@stx (cdr dO1dd6@fmls*) (cdr dO1dd7@body**) dO1dd8@r dO1dd9@mr)) (lambda (dO1def@dO1dec dO1df0@dO1dee) ((lambda (dO1df3@b* dO1df4@a*) (values (cons dO1de8@a dO1df4@a*) (cons dO1de7@b dO1df3@b*))) dO1df0@dO1dee dO1def@dO1dec)))) dO1de4@dO1de2 dO1de3@dO1de0)))))) (set! dOd8a@chi-defun (lambda (dO1df7@x dO1df8@r dO1df9@mr) ((lambda (dO1dfd@fmls dO1dfe@body*) (call-with-values (lambda () (dOd86@chi-lambda-clause dO1dfd@fmls dO1dfd@fmls dO1dfe@body* dO1df8@r dO1df9@mr)) (lambda (dO1e05@dO1e02 dO1e06@dO1e04) ((lambda (dO1e09@body dO1e0a@fmls) (dOabd@dO9fd@build-lambda '#f dO1e0a@fmls dO1e09@body)) dO1e06@dO1e04 dO1e05@dO1e02)))) (car dO1df7@x) (cdr dO1df7@x)))) (set! dOd8c@chi-rhs (lambda (dO1e0d@rhs dO1e0e@r dO1e0f@mr) ((lambda (dO1e13@t) (if (memv dO1e13@t '(defun)) (dOd8a@chi-defun (cdr dO1e0d@rhs) dO1e0e@r dO1e0f@mr) (if (memv dO1e13@t '(expr)) ((lambda (dO1e15@expr) (dOd80@chi-expr dO1e15@expr dO1e0e@r dO1e0f@mr)) (cdr dO1e0d@rhs)) (if (memv dO1e13@t '(top-expr)) ((lambda (dO1e17@expr) (dOac0@dOa2f@build-sequence '#f (list (dOd80@chi-expr dO1e17@expr dO1e0e@r dO1e0f@mr) (dOac1@dOa31@build-void)))) (cdr dO1e0d@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" dO1e0d@rhs))))) (car dO1e0d@rhs)))) (set! dOd8e@expand-interaction-rhs*/init* (lambda (dO1e19@lhs* dO1e1a@rhs* dO1e1b@init* dO1e1c@r dO1e1d@mr) ((letrec ((dO1e23@f (lambda (dO1e25@lhs* dO1e26@rhs*) (if (null? dO1e25@lhs*) (map (lambda (dO1e29@x) (dOd80@chi-expr dO1e29@x dO1e1c@r dO1e1d@mr)) dO1e1b@init*) ((lambda (dO1e2b@lhs dO1e2c@rhs) ((lambda (dO1e2f@t) (if (memv dO1e2f@t '(defun)) ((lambda (dO1e31@rhs) (cons (list 'set! dO1e2b@lhs dO1e31@rhs) (dO1e23@f (cdr dO1e25@lhs*) (cdr dO1e26@rhs*)))) (dOd8a@chi-defun (cdr dO1e2c@rhs) dO1e1c@r dO1e1d@mr)) (if (memv dO1e2f@t '(expr)) ((lambda (dO1e33@rhs) (cons (list 'set! dO1e2b@lhs dO1e33@rhs) (dO1e23@f (cdr dO1e25@lhs*) (cdr dO1e26@rhs*)))) (dOd80@chi-expr (cdr dO1e2c@rhs) dO1e1c@r dO1e1d@mr)) (if (memv dO1e2f@t '(top-expr)) ((lambda (dO1e35@e) (cons dO1e35@e (dO1e23@f (cdr dO1e25@lhs*) (cdr dO1e26@rhs*)))) (dOd80@chi-expr (cdr dO1e2c@rhs) dO1e1c@r dO1e1d@mr)) (error 'expand-interaction '"invallid" dO1e2c@rhs))))) (car dO1e2c@rhs))) (car dO1e25@lhs*) (car dO1e26@rhs*)))))) dO1e23@f) dO1e19@lhs* dO1e1a@rhs*))) (set! dOd90@chi-rhs* (lambda (dO1e37@rhs* dO1e38@r dO1e39@mr) ((letrec ((dO1e3d@f (lambda (dO1e3f@ls) (if (null? dO1e3f@ls) '() ((lambda (dO1e41@a) (cons dO1e41@a (dO1e3d@f (cdr dO1e3f@ls)))) (dOd8c@chi-rhs (car dO1e3f@ls) dO1e38@r dO1e39@mr)))))) dO1e3d@f) dO1e37@rhs*))) (set! dOd92@find-bound=? (lambda (dO1e43@x dO1e44@lhs* dO1e45@rhs*) (if (null? dO1e44@lhs*) '#f (if (dOb5d@bound-id=? dO1e43@x (car dO1e44@lhs*)) (car dO1e45@rhs*) (dOd92@find-bound=? dO1e43@x (cdr dO1e44@lhs*) (cdr dO1e45@rhs*)))))) (set! dOd94@find-dups (lambda (dO1e49@ls) ((letrec ((dO1e4b@f (lambda (dO1e4d@ls dO1e4e@dups) (if (null? dO1e4d@ls) dO1e4e@dups ((lambda (dO1e51@t) (if dO1e51@t ((lambda (dO1e53@x) (dO1e4b@f (cdr dO1e4d@ls) (cons (list (car dO1e4d@ls) dO1e53@x) dO1e4e@dups))) dO1e51@t) (dO1e4b@f (cdr dO1e4d@ls) dO1e4e@dups))) (dOd92@find-bound=? (car dO1e4d@ls) (cdr dO1e4d@ls) (cdr dO1e4d@ls))))))) dO1e4b@f) dO1e49@ls '()))) (set! dOd96@chi-internal (lambda (dO1e55@e* dO1e56@r dO1e57@mr) ((lambda (dO1e5b@rib) (call-with-values (lambda () (dOdb6@chi-body* (map (lambda (dO1e6d@x) (dOb45@add-subst dO1e5b@rib dO1e6d@x)) (dOb57@syntax->list dO1e55@e*)) dO1e56@r dO1e57@mr '() '() '() '() '() dO1e5b@rib '#f)) (lambda (dO1e6f@dO1e5e dO1e70@dO1e60 dO1e71@dO1e62 dO1e72@dO1e64 dO1e73@dO1e66 dO1e74@dO1e68 dO1e75@dO1e6a dO1e76@dO1e6c) ((lambda (dO1e7f@_exp* dO1e80@kwd* dO1e81@mod** dO1e82@rhs* dO1e83@lex* dO1e84@mr dO1e85@r dO1e86@e*) (begin (if (null? dO1e86@e*) (dOe3e@syntax-violation '#f '"no expression in body" dO1e86@e*) (void)) ((lambda (dO1e8f@init*) ((lambda (dO1e91@rhs*) ((lambda () (dOac3@dOa35@build-letrec* '#f (reverse dO1e83@lex*) (reverse dO1e91@rhs*) (dOac0@dOa2f@build-sequence '#f dO1e8f@init*))))) (dOd90@chi-rhs* dO1e82@rhs* dO1e85@r dO1e84@mr))) (dOd7c@chi-expr* (append (apply append (reverse dO1e81@mod**)) dO1e86@e*) dO1e85@r dO1e84@mr)))) dO1e76@dO1e6c dO1e75@dO1e6a dO1e74@dO1e68 dO1e73@dO1e66 dO1e72@dO1e64 dO1e71@dO1e62 dO1e70@dO1e60 dO1e6f@dO1e5e)))) (dOb0d@make-empty-rib)))) (set! dOd98@parse-module (lambda (dO1e93@e) ((lambda (dO1e95@t) ((lambda (dO1e97@ls/false) (if dO1e97@ls/false (apply (lambda (dO1e99@export* dO1e9a@b*) (begin (if (not (for-all dOb59@id? dO1e99@export*)) (dOe3e@syntax-violation '#f '"module exports must be identifiers" dO1e93@e) (void)) (values '#f (list->vector dO1e99@export*) dO1e9a@b*))) dO1e97@ls/false) ((lambda (dO1e9d@t) ((lambda (dO1e9f@ls/false) (if dO1e9f@ls/false (apply (lambda (dO1ea1@name dO1ea2@export* dO1ea3@b*) (begin (if (not (dOb59@id? dO1ea1@name)) (dOe3e@syntax-violation '#f '"module name must be an identifier" dO1e93@e) (void)) (if (not (for-all dOb59@id? dO1ea2@export*)) (dOe3e@syntax-violation '#f '"module exports must be identifiers" dO1e93@e) (void)) (values dO1ea1@name (list->vector dO1ea2@export*) dO1ea3@b*))) dO1e9f@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1e9d@t))) (dOd5e@syntax-dispatch dO1e9d@t '(_ any each-any . each-any)))) dO1e95@t))) (dOd5e@syntax-dispatch dO1e95@t '(_ each-any . each-any)))) dO1e93@e))) (set! dOda2@module-interface? (lambda (dO1ea7@x) (and (simple-struct? dO1ea7@x) (eq? (simple-struct-name dO1ea7@x) 'module-interface)))) (set! dOda4@module-interface-first-mark (lambda (dO1ea9@x) (simple-struct-ref dO1ea9@x '0))) (set! dOda6@set-module-interface-first-mark! (lambda (dO1eab@x dO1eac@val) (simple-struct-set! dO1eab@x '0 dO1eac@val))) (set! dOda8@module-interface-exp-id-vec (lambda (dO1eaf@x) (simple-struct-ref dO1eaf@x '1))) (set! dOdaa@set-module-interface-exp-id-vec! (lambda (dO1eb1@x dO1eb2@val) (simple-struct-set! dO1eb1@x '1 dO1eb2@val))) (set! dOdac@module-interface-exp-lab-vec (lambda (dO1eb5@x) (simple-struct-ref dO1eb5@x '2))) (set! dOdae@set-module-interface-exp-lab-vec! (lambda (dO1eb7@x dO1eb8@val) (simple-struct-set! dO1eb7@x '2 dO1eb8@val))) (set! dOdb0@dummy '3) (set! dOdb2@module-interface-exp-id* (lambda (dO1ebb@iface dO1ebc@id) ((lambda (dO1ec0@diff-marks) (begin (set! dO1ec0@diff-marks (lambda (dO1ec7@ls dO1ec8@x) (begin (if (null? dO1ec7@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (dO1ecb@a) (if (eq? dO1ecb@a dO1ec8@x) '() (cons dO1ecb@a (dO1ec0@diff-marks (cdr dO1ec7@ls) dO1ec8@x)))) (car dO1ec7@ls))))) ((lambda (dO1ec1@diff dO1ec2@id-vec) (if (null? dO1ec1@diff) dO1ec2@id-vec (vector-map (lambda (dO1ec5@x) (make-simple-struct 'stx '5 (list (dOb27@stx-expr dO1ec5@x) (append dO1ec1@diff (dOb2b@stx-mark* dO1ec5@x)) '() '()))) dO1ec2@id-vec))) (dO1ec0@diff-marks (dOb2b@stx-mark* dO1ebc@id) (dOda4@module-interface-first-mark dO1ebb@iface)) (dOda8@module-interface-exp-id-vec dO1ebb@iface)))) '#f))) (set! dOdb4@chi-internal-module (lambda (dO1ecd@e dO1ece@r dO1ecf@mr dO1ed0@lex* dO1ed1@rhs* dO1ed2@mod** dO1ed3@kwd*) (call-with-values (lambda () (dOd98@parse-module dO1ecd@e)) (lambda (dO1ee1@dO1edc dO1ee2@dO1ede dO1ee3@dO1ee0) ((lambda (dO1ee7@e* dO1ee8@exp-id* dO1ee9@name) ((lambda (dO1eed@rib) ((lambda (dO1eef@e*) ((lambda () (call-with-values (lambda () (dOdb6@chi-body* dO1eef@e* dO1ece@r dO1ecf@mr dO1ed0@lex* dO1ed1@rhs* dO1ed2@mod** dO1ed3@kwd* '() dO1eed@rib '#f)) (lambda (dO1f01@dO1ef2 dO1f02@dO1ef4 dO1f03@dO1ef6 dO1f04@dO1ef8 dO1f05@dO1efa dO1f06@dO1efc dO1f07@dO1efe dO1f08@dO1f00) ((lambda (dO1f11@_exp* dO1f12@kwd* dO1f13@mod** dO1f14@rhs* dO1f15@lex* dO1f16@mr dO1f17@r dO1f18@e*) ((lambda (dO1f21@exp-lab* dO1f22@mod**) (if (not dO1ee9@name) (values dO1f15@lex* dO1f14@rhs* dO1ee8@exp-id* dO1f21@exp-lab* dO1f17@r dO1f16@mr dO1f22@mod** dO1f12@kwd*) ((lambda (dO1f25@lab dO1f26@iface) (values dO1f15@lex* dO1f14@rhs* (vector dO1ee9@name) (vector dO1f25@lab) (cons (cons dO1f25@lab (cons '$module dO1f26@iface)) dO1f17@r) (cons (cons dO1f25@lab (cons '$module dO1f26@iface)) dO1f16@mr) dO1f22@mod** dO1f12@kwd*)) (dOae5@gen-label 'module) (make-simple-struct 'module-interface '4 (list (car (dOb2b@stx-mark* dO1ee9@name)) (vector-map (lambda (dO1f29@x) (make-simple-struct 'stx '5 (list (dOb27@stx-expr dO1f29@x) (dOb2b@stx-mark* dO1f29@x) '() '()))) dO1ee8@exp-id*) dO1f21@exp-lab*))))) (vector-map (lambda (dO1f2b@x) (or (dOb6f@id->label (make-simple-struct 'stx '5 (list (dOb5b@id->sym dO1f2b@x) (dOb2b@stx-mark* dO1f2b@x) (list dO1eed@rib) '()))) (dOe3e@syntax-violation '#f '"cannot find module export" dO1f2b@x))) dO1ee8@exp-id*) (cons dO1f18@e* dO1f13@mod**))) dO1f08@dO1f00 dO1f07@dO1efe dO1f06@dO1efc dO1f05@dO1efa dO1f04@dO1ef8 dO1f03@dO1ef6 dO1f02@dO1ef4 dO1f01@dO1ef2)))))) (map (lambda (dO1f2d@x) (dOb45@add-subst dO1eed@rib dO1f2d@x)) (dOb57@syntax->list dO1ee7@e*)))) (dOb0d@make-empty-rib))) dO1ee3@dO1ee0 dO1ee2@dO1ede dO1ee1@dO1edc))))) (set! dOdb6@chi-body* (lambda (dO1f2f@e* dO1f30@r dO1f31@mr dO1f32@lex* dO1f33@rhs* dO1f34@mod** dO1f35@kwd* dO1f36@exp* dO1f37@rib dO1f38@top?) (if (null? dO1f2f@e*) (values dO1f2f@e* dO1f30@r dO1f31@mr dO1f32@lex* dO1f33@rhs* dO1f34@mod** dO1f35@kwd* dO1f36@exp*) ((lambda (dO1f43@e) (call-with-values (lambda () (dOb7b@syntax-type dO1f43@e dO1f30@r)) (lambda (dO1f4b@dO1f46 dO1f4c@dO1f48 dO1f4d@dO1f4a) ((lambda (dO1f51@kwd dO1f52@value dO1f53@type) ((lambda (dO1f57@kwd*) ((lambda (dO1f59@t) (if (memv dO1f59@t '(define)) (call-with-values (lambda () (dOce2@parse-define dO1f43@e)) (lambda (dO1f5f@dO1f5c dO1f60@dO1f5e) ((lambda (dO1f63@rhs dO1f64@id) (begin (if (dOb65@bound-id-member? dO1f64@id dO1f57@kwd*) (dOe3e@syntax-violation '#f '"cannot redefine keyword" dO1f43@e) (void)) (call-with-values (lambda () (dOae9@gen-define-label+loc dO1f64@id dO1f37@rib)) (lambda (dO1f6b@dO1f68 dO1f6c@dO1f6a) ((lambda (dO1f6f@lex dO1f70@lab) (begin (dOb0f@extend-rib! dO1f37@rib dO1f64@id dO1f70@lab) (dOdb6@chi-body* (cdr dO1f2f@e*) (dOcf0@add-lexical dO1f70@lab dO1f6f@lex dO1f30@r) dO1f31@mr (cons dO1f6f@lex dO1f32@lex*) (cons dO1f63@rhs dO1f33@rhs*) dO1f34@mod** dO1f57@kwd* dO1f36@exp* dO1f37@rib dO1f38@top?))) dO1f6c@dO1f6a dO1f6b@dO1f68))))) dO1f60@dO1f5e dO1f5f@dO1f5c))) (if (memv dO1f59@t '(define-syntax)) (call-with-values (lambda () (dOce4@parse-define-syntax dO1f43@e)) (lambda (dO1f77@dO1f74 dO1f78@dO1f76) ((lambda (dO1f7b@rhs dO1f7c@id) (begin (if (dOb65@bound-id-member? dO1f7c@id dO1f57@kwd*) (dOe3e@syntax-violation '#f '"cannot redefine keyword" dO1f43@e) (void)) ((lambda (dO1f7f@lab dO1f80@expanded-rhs) (begin (dOb0f@extend-rib! dO1f37@rib dO1f7c@id dO1f7f@lab) ((lambda (dO1f83@b) (dOdb6@chi-body* (cdr dO1f2f@e*) (cons (cons dO1f7f@lab dO1f83@b) dO1f30@r) (cons (cons dO1f7f@lab dO1f83@b) dO1f31@mr) dO1f32@lex* dO1f33@rhs* dO1f34@mod** dO1f57@kwd* dO1f36@exp* dO1f37@rib dO1f38@top?)) (dOb91@make-eval-transformer dO1f80@expanded-rhs)))) (dOaeb@gen-define-label dO1f7c@id dO1f37@rib) (dOdb8@expand-transformer dO1f7b@rhs dO1f31@mr)))) dO1f78@dO1f76 dO1f77@dO1f74))) (if (memv dO1f59@t '(let-syntax letrec-syntax)) ((lambda (dO1f85@t) ((lambda (dO1f87@ls/false) (if (and dO1f87@ls/false (apply (lambda (dO1f89@xlhs* dO1f8a@xrhs* dO1f8b@xbody*) (if (not (dOb61@valid-bound-ids? dO1f89@xlhs*)) (dOe3e@syntax-violation '#f '"invalid identifiers" dO1f43@e) (void))) dO1f87@ls/false)) (apply (lambda (dO1f8f@xlhs* dO1f90@xrhs* dO1f91@xbody*) ((lambda (dO1f95@xlab*) ((lambda (dO1f97@xrib) ((lambda (dO1f99@xb*) ((lambda () (dOdb6@chi-body* (append (map (lambda (dO1f9b@x) (dOb45@add-subst dO1f97@xrib dO1f9b@x)) dO1f91@xbody*) (cdr dO1f2f@e*)) (append (map cons dO1f95@xlab* dO1f99@xb*) dO1f30@r) (append (map cons dO1f95@xlab* dO1f99@xb*) dO1f31@mr) dO1f32@lex* dO1f33@rhs* dO1f34@mod** dO1f57@kwd* dO1f36@exp* dO1f37@rib dO1f38@top?)))) (map (lambda (dO1f9d@x) (dOb91@make-eval-transformer (dOdb8@expand-transformer (if (eq? dO1f53@type 'let-syntax) dO1f9d@x (dOb45@add-subst dO1f97@xrib dO1f9d@x)) dO1f31@mr))) dO1f90@xrhs*))) (dOb19@make-full-rib dO1f8f@xlhs* dO1f95@xlab*))) (map dOae5@gen-label dO1f8f@xlhs*))) dO1f87@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1f85@t))) (dOd5e@syntax-dispatch dO1f85@t '(_ #(each (any any)) . each-any)))) dO1f43@e) (if (memv dO1f59@t '(begin)) ((lambda (dO1f9f@t) ((lambda (dO1fa1@ls/false) (if dO1fa1@ls/false (apply (lambda (dO1fa3@x*) (dOdb6@chi-body* (append dO1fa3@x* (cdr dO1f2f@e*)) dO1f30@r dO1f31@mr dO1f32@lex* dO1f33@rhs* dO1f34@mod** dO1f57@kwd* dO1f36@exp* dO1f37@rib dO1f38@top?)) dO1fa1@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1f9f@t))) (dOd5e@syntax-dispatch dO1f9f@t '(_ . each-any)))) dO1f43@e) (if (memv dO1f59@t '(global-macro global-macro!)) (dOdb6@chi-body* (cons (dOb45@add-subst dO1f37@rib (dOd7a@chi-global-macro dO1f52@value dO1f43@e)) (cdr dO1f2f@e*)) dO1f30@r dO1f31@mr dO1f32@lex* dO1f33@rhs* dO1f34@mod** dO1f57@kwd* dO1f36@exp* dO1f37@rib dO1f38@top?) (if (memv dO1f59@t '(local-macro local-macro!)) (dOdb6@chi-body* (cons (dOb45@add-subst dO1f37@rib (dOd78@chi-local-macro dO1f52@value dO1f43@e)) (cdr dO1f2f@e*)) dO1f30@r dO1f31@mr dO1f32@lex* dO1f33@rhs* dO1f34@mod** dO1f57@kwd* dO1f36@exp* dO1f37@rib dO1f38@top?) (if (memv dO1f59@t '(macro macro!)) (dOdb6@chi-body* (cons (dOb45@add-subst dO1f37@rib (dOd76@chi-macro dO1f52@value dO1f43@e)) (cdr dO1f2f@e*)) dO1f30@r dO1f31@mr dO1f32@lex* dO1f33@rhs* dO1f34@mod** dO1f57@kwd* dO1f36@exp* dO1f37@rib dO1f38@top?) (if (memv dO1f59@t '(module)) (call-with-values (lambda () (dOdb4@chi-internal-module dO1f43@e dO1f30@r dO1f31@mr dO1f32@lex* dO1f33@rhs* dO1f34@mod** dO1f57@kwd*)) (lambda (dO1fb5@dO1fa6 dO1fb6@dO1fa8 dO1fb7@dO1faa dO1fb8@dO1fac dO1fb9@dO1fae dO1fba@dO1fb0 dO1fbb@dO1fb2 dO1fbc@dO1fb4) ((lambda (dO1fc5@kwd* dO1fc6@mod** dO1fc7@mr dO1fc8@r dO1fc9@m-exp-lab* dO1fca@m-exp-id* dO1fcb@rhs* dO1fcc@lex*) (begin (vector-for-each (lambda (dO1fd5@id dO1fd6@lab) (dOb0f@extend-rib! dO1f37@rib dO1fd5@id dO1fd6@lab)) dO1fca@m-exp-id* dO1fc9@m-exp-lab*) (dOdb6@chi-body* (cdr dO1f2f@e*) dO1fc8@r dO1fc7@mr dO1fcc@lex* dO1fcb@rhs* dO1fc6@mod** dO1fc5@kwd* dO1f36@exp* dO1f37@rib dO1f38@top?))) dO1fbc@dO1fb4 dO1fbb@dO1fb2 dO1fba@dO1fb0 dO1fb9@dO1fae dO1fb8@dO1fac dO1fb7@dO1faa dO1fb6@dO1fa8 dO1fb5@dO1fa6))) (if (memv dO1f59@t '(library)) (begin (dOe20@library-expander (dOb6d@stx->datum dO1f43@e)) (dOdb6@chi-body* (cdr dO1f2f@e*) dO1f30@r dO1f31@mr dO1f32@lex* dO1f33@rhs* dO1f34@mod** dO1f57@kwd* dO1f36@exp* dO1f37@rib dO1f38@top?)) (if (memv dO1f59@t '(export)) ((lambda (dO1fd9@t) ((lambda (dO1fdb@ls/false) (if dO1fdb@ls/false (apply (lambda (dO1fdd@exp-decl*) (dOdb6@chi-body* (cdr dO1f2f@e*) dO1f30@r dO1f31@mr dO1f32@lex* dO1f33@rhs* dO1f34@mod** dO1f57@kwd* (append dO1fdd@exp-decl* dO1f36@exp*) dO1f37@rib dO1f38@top?)) dO1fdb@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO1fd9@t))) (dOd5e@syntax-dispatch dO1fd9@t '(_ . each-any)))) dO1f43@e) (if (memv dO1f59@t '(import)) ((lambda () ((lambda (dO1fe0@module-import? dO1fe2@module-import dO1fe4@library-import) (begin (set! dO1fe0@module-import? (lambda (dO2033@e) ((lambda (dO2035@t) ((lambda (dO2037@ls/false) (if (and dO2037@ls/false (apply (lambda (dO2039@id) (dOb59@id? dO2039@id)) dO2037@ls/false)) (apply (lambda (dO203b@id) '#t) dO2037@ls/false) ((lambda (dO203d@t) ((lambda (dO203f@ls/false) (if dO203f@ls/false (apply (lambda (dO2041@imp*) '#f) dO203f@ls/false) ((lambda (dO2043@t) ((lambda (dO2045@ls/false) (if dO2045@ls/false (apply (lambda () (dOe3e@syntax-violation '#f '"malformed import form" dO2033@e)) dO2045@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO2043@t))) (dOd5e@syntax-dispatch dO2043@t '_))) dO203d@t))) (dOd5e@syntax-dispatch dO203d@t '(_ . each-any)))) dO2035@t))) (dOd5e@syntax-dispatch dO2035@t '(_ any)))) dO2033@e))) (set! dO1fe2@module-import (lambda (dO2011@e dO2012@r) ((lambda (dO2015@t) ((lambda (dO2017@ls/false) (if (and dO2017@ls/false (apply (lambda (dO2019@id) (dOb59@id? dO2019@id)) dO2017@ls/false)) (apply (lambda (dO201b@id) (call-with-values (lambda () (dOb7b@syntax-type dO201b@id dO2012@r)) (lambda (dO2023@dO201e dO2024@dO2020 dO2025@dO2022) ((lambda (dO2029@kwd dO202a@value dO202b@type) ((lambda (dO202f@t) (if (memv dO202f@t '($module)) ((lambda (dO2031@iface) (values (dOdb2@module-interface-exp-id* dO2031@iface dO201b@id) (dOdac@module-interface-exp-lab-vec dO2031@iface))) dO202a@value) (dOe3e@syntax-violation '#f '"invalid import" dO2011@e))) dO202b@type)) dO2025@dO2022 dO2024@dO2020 dO2023@dO201e)))) dO2017@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO2015@t))) (dOd5e@syntax-dispatch dO2015@t '(_ any)))) dO2011@e))) (set! dO1fe4@library-import (lambda (dO1ff5@e) ((lambda (dO1ff7@t) ((lambda (dO1ff9@ls/false) (if dO1ff9@ls/false (apply (lambda (dO1ffb@ctxt dO1ffc@imp*) (call-with-values (lambda () (dOdc0@parse-import-spec* (dOe44@syntax->datum dO1ffc@imp*))) (lambda (dO2003@dO2000 dO2004@dO2002) ((lambda (dO2007@subst-labels dO2008@subst-names) (values (vector-map (lambda (dO200b@name) (dOb39@datum->stx dO1ffb@ctxt dO200b@name)) dO2008@subst-names) dO2007@subst-labels)) dO2004@dO2002 dO2003@dO2000)))) dO1ff9@ls/false) ((lambda (dO200d@t) ((lambda (dO200f@ls/false) (if dO200f@ls/false (apply (lambda () (dOe3e@syntax-violation '#f '"invalid import form" dO1ff5@e)) dO200f@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO200d@t))) (dOd5e@syntax-dispatch dO200d@t '_))) dO1ff7@t))) (dOd5e@syntax-dispatch dO1ff7@t '(any . each-any)))) dO1ff5@e))) (begin (call-with-values (lambda () (if (dO1fe0@module-import? dO1f43@e) (dO1fe2@module-import dO1f43@e dO1f30@r) (dO1fe4@library-import dO1f43@e))) (lambda (dO1fe9@dO1fe6 dO1fea@dO1fe8) ((lambda (dO1fed@lab* dO1fee@id*) (vector-for-each (lambda (dO1ff1@id dO1ff2@lab) (dOb0f@extend-rib! dO1f37@rib dO1ff1@id dO1ff2@lab)) dO1fee@id* dO1fed@lab*)) dO1fea@dO1fe8 dO1fe9@dO1fe6))) (dOdb6@chi-body* (cdr dO1f2f@e*) dO1f30@r dO1f31@mr dO1f32@lex* dO1f33@rhs* dO1f34@mod** dO1f57@kwd* dO1f36@exp* dO1f37@rib dO1f38@top?)))) '#f '#f '#f))) (if dO1f38@top? (dOdb6@chi-body* (cdr dO1f2f@e*) dO1f30@r dO1f31@mr (cons (dOae1@gen-lexical 'dummy) dO1f32@lex*) (cons (cons 'top-expr dO1f43@e) dO1f33@rhs*) dO1f34@mod** dO1f57@kwd* dO1f36@exp* dO1f37@rib dO1f38@top?) (values dO1f2f@e* dO1f30@r dO1f31@mr dO1f32@lex* dO1f33@rhs* dO1f34@mod** dO1f57@kwd* dO1f36@exp*)))))))))))))) dO1f53@type)) (if (dOb59@id? dO1f51@kwd) (cons dO1f51@kwd dO1f35@kwd*) dO1f35@kwd*))) dO1f4d@dO1f4a dO1f4c@dO1f48 dO1f4b@dO1f46)))) (car dO1f2f@e*))))) (set! dOdb8@expand-transformer (lambda (dO2047@expr dO2048@r) ((lambda (dO204b@rtc) ((lambda (dO204d@expanded-rhs) (begin (for-each ((lambda (dO204f@mark-visit) (lambda (dO2051@x) (begin (dO984@dO7d2@invoke-library dO2051@x) (dO204f@mark-visit dO2051@x)))) (dOdc8@vis-collector)) (dO204b@rtc)) dO204d@expanded-rhs)) ((lambda (dO205b@dO2054 dO205c@dO2056 dO205d@dO2058 dO205e@dO205a) ((lambda (dO2063@swap) (dynamic-wind dO2063@swap (lambda () (dOd80@chi-expr dO2047@expr dO2048@r dO2048@r)) dO2063@swap)) (lambda () (begin ((lambda (dO2065@t) (begin (dO205b@dO2054 dO205d@dO2058) (set! dO205d@dO2058 dO2065@t))) (dO205b@dO2054)) ((lambda (dO2067@t) (begin (dO205c@dO2056 dO205e@dO205a) (set! dO205e@dO205a dO2067@t))) (dO205c@dO2056)))))) dOdc6@inv-collector dOdc8@vis-collector dO204b@rtc (lambda (dO2069@x) (values))))) (dOdc4@make-collector)))) (set! dOdba@parse-exports (lambda (dO206b@exp*) ((letrec ((dO206d@f (lambda (dO206f@exp* dO2070@int* dO2071@ext*) (if (null? dO206f@exp*) (begin (if (not (dOb61@valid-bound-ids? dO2071@ext*)) (dOe3e@syntax-violation 'export '"invalid exports" (dOd94@find-dups dO2071@ext*)) (void)) (values (map dOe44@syntax->datum dO2071@ext*) dO2070@int*)) ((lambda (dO2075@t) ((lambda (dO2077@ls/false) (if dO2077@ls/false (apply (lambda (dO2079@rename dO207a@i* dO207b@e*) (begin (if (not (and (eq? (dOe44@syntax->datum dO2079@rename) 'rename) (for-all dOb59@id? dO207a@i*) (for-all dOb59@id? dO207b@e*))) (dOe3e@syntax-violation 'export '"invalid export specifier" (car dO206f@exp*)) (void)) (dO206d@f (cdr dO206f@exp*) (append dO207a@i* dO2070@int*) (append dO207b@e* dO2071@ext*)))) dO2077@ls/false) ((lambda (dO207f@t) ((lambda (dO2081@ls/false) (if dO2081@ls/false (apply (lambda (dO2083@ie) (begin (if (not (dOb59@id? dO2083@ie)) (dOe3e@syntax-violation 'export '"invalid export" dO2083@ie) (void)) (dO206d@f (cdr dO206f@exp*) (cons dO2083@ie dO2070@int*) (cons dO2083@ie dO2071@ext*)))) dO2081@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO207f@t))) (dOd5e@syntax-dispatch dO207f@t 'any))) dO2075@t))) (dOd5e@syntax-dispatch dO2075@t '(any . #(each (any any)))))) (car dO206f@exp*)))))) dO206d@f) dO206b@exp* '() '()))) (set! dOdbc@parse-library-name (lambda (dO2085@spec) ((lambda (dO2088@parse) (begin (set! dO2088@parse (lambda (dO2095@x) ((lambda (dO2097@t) ((lambda (dO2099@ls/false) (if (and dO2099@ls/false (apply (lambda (dO209b@v*) (for-all (lambda (dO209d@x) ((lambda (dO209f@x) (and (integer? dO209f@x) (exact? dO209f@x))) (dOe44@syntax->datum dO209d@x))) dO209b@v*)) dO2099@ls/false)) (apply (lambda (dO20a1@v*) (values '() (map dOe44@syntax->datum dO20a1@v*))) dO2099@ls/false) ((lambda (dO20a3@t) ((lambda (dO20a5@ls/false) (if (and dO20a5@ls/false (apply (lambda (dO20a7@x dO20a8@rest) (symbol? (dOe44@syntax->datum dO20a7@x))) dO20a5@ls/false)) (apply (lambda (dO20ab@x dO20ac@rest) (call-with-values (lambda () (dO2088@parse dO20ac@rest)) (lambda (dO20b3@dO20b0 dO20b4@dO20b2) ((lambda (dO20b7@v* dO20b8@x*) (values (cons (dOe44@syntax->datum dO20ab@x) dO20b8@x*) dO20b7@v*)) dO20b4@dO20b2 dO20b3@dO20b0)))) dO20a5@ls/false) ((lambda (dO20bb@t) ((lambda (dO20bd@ls/false) (if dO20bd@ls/false (apply (lambda () (values '() '())) dO20bd@ls/false) ((lambda (dO20bf@t) ((lambda (dO20c1@ls/false) (if dO20c1@ls/false (apply (lambda () (dOe3e@syntax-violation '#f '"invalid library name" dO2085@spec)) dO20c1@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO20bf@t))) (dOd5e@syntax-dispatch dO20bf@t '_))) dO20bb@t))) (dOd5e@syntax-dispatch dO20bb@t '()))) dO20a3@t))) (dOd5e@syntax-dispatch dO20a3@t '(any . any)))) dO2097@t))) (dOd5e@syntax-dispatch dO2097@t '(each-any)))) dO2095@x))) (call-with-values (lambda () (dO2088@parse dO2085@spec)) (lambda (dO208d@dO208a dO208e@dO208c) ((lambda (dO2091@ver* dO2092@name*) (begin (if (null? dO2092@name*) (dOe3e@syntax-violation '#f '"empty library name" dO2085@spec) (void)) (values dO2092@name* dO2091@ver*))) dO208e@dO208c dO208d@dO208a))))) '#f))) (set! dOdbe@parse-library (lambda (dO20c3@e) ((lambda (dO20c5@t) ((lambda (dO20c7@ls/false) (if (and dO20c7@ls/false (apply (lambda (dO20c9@library dO20ca@name* dO20cb@export dO20cc@exp* dO20cd@import dO20ce@imp* dO20cf@b*) (and (eq? (dOe44@syntax->datum dO20cb@export) 'export) (eq? (dOe44@syntax->datum dO20cd@import) 'import) (eq? (dOe44@syntax->datum dO20c9@library) 'library))) dO20c7@ls/false)) (apply (lambda (dO20d7@library dO20d8@name* dO20d9@export dO20da@exp* dO20db@import dO20dc@imp* dO20dd@b*) (values dO20d8@name* dO20da@exp* dO20dc@imp* dO20dd@b*)) dO20c7@ls/false) ((lambda (dO20e5@t) ((lambda (dO20e7@ls/false) (if dO20e7@ls/false (apply (lambda () (dOe3e@syntax-violation '#f '"malformed library" dO20c3@e)) dO20e7@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO20e5@t))) (dOd5e@syntax-dispatch dO20e5@t '_))) dO20c5@t))) (dOd5e@syntax-dispatch dO20c5@t '(any each-any (any . each-any) (any . each-any) . each-any)))) dO20c3@e))) (set! dOdc0@parse-import-spec* ((lambda () ((lambda (dO20ea@idsyn? dO20ec@dup-error dO20ee@merge-substs dO20f0@exclude* dO20f2@find* dO20f4@rem* dO20f6@remove-dups dO20f8@parse-library-name dO20fa@import-library dO20fc@get-import dO20fe@add-imports!) (begin (set! dO20ea@idsyn? (lambda (dO22f3@x) (symbol? (dOe44@syntax->datum dO22f3@x)))) (set! dO20ec@dup-error (lambda (dO22f1@name) (dOe3e@syntax-violation 'import '"two imports with different bindings" dO22f1@name))) (set! dO20ee@merge-substs (lambda (dO22df@s dO22e0@subst) ((lambda (dO22e4@insert-to-subst) (begin (set! dO22e4@insert-to-subst (lambda (dO22e5@a dO22e6@subst) ((lambda (dO22e9@name dO22ea@label) ((lambda (dO22ed@t) (if dO22ed@t ((lambda (dO22ef@x) (if (eq? (cdr dO22ef@x) dO22ea@label) dO22e6@subst (dO20ec@dup-error dO22e9@name))) dO22ed@t) (cons dO22e5@a dO22e6@subst))) (assq dO22e9@name dO22e6@subst))) (car dO22e5@a) (cdr dO22e5@a)))) (if (null? dO22df@s) dO22e0@subst (dO22e4@insert-to-subst (car dO22df@s) (dO20ee@merge-substs (cdr dO22df@s) dO22e0@subst))))) '#f))) (set! dO20f0@exclude* (lambda (dO22af@sym* dO22b0@subst) ((lambda (dO22b4@exclude) (begin (set! dO22b4@exclude (lambda (dO22cd@sym dO22ce@subst) (if (null? dO22ce@subst) (dOe3e@syntax-violation 'import '"cannot rename unbound identifier" dO22cd@sym) (if (eq? dO22cd@sym (caar dO22ce@subst)) (values (cdar dO22ce@subst) (cdr dO22ce@subst)) ((lambda (dO22d1@a) (call-with-values (lambda () (dO22b4@exclude dO22cd@sym (cdr dO22ce@subst))) (lambda (dO22d7@dO22d4 dO22d8@dO22d6) ((lambda (dO22db@subst dO22dc@old) (values dO22dc@old (cons dO22d1@a dO22db@subst))) dO22d8@dO22d6 dO22d7@dO22d4)))) (car dO22ce@subst)))))) (if (null? dO22af@sym*) (values '() dO22b0@subst) (call-with-values (lambda () (dO22b4@exclude (car dO22af@sym*) dO22b0@subst)) (lambda (dO22b9@dO22b6 dO22ba@dO22b8) ((lambda (dO22bd@subst dO22be@old) (call-with-values (lambda () (dO20f0@exclude* (cdr dO22af@sym*) dO22bd@subst)) (lambda (dO22c5@dO22c2 dO22c6@dO22c4) ((lambda (dO22c9@subst dO22ca@old*) (values (cons dO22be@old dO22ca@old*) dO22c9@subst)) dO22c6@dO22c4 dO22c5@dO22c2)))) dO22ba@dO22b8 dO22b9@dO22b6)))))) '#f))) (set! dO20f2@find* (lambda (dO22a7@sym* dO22a8@subst) (map (lambda (dO22ab@x) ((lambda (dO22ad@t) (if dO22ad@t (cdr dO22ad@t) (dOe3e@syntax-violation 'import '"cannot find identifier" dO22ab@x))) (assq dO22ab@x dO22a8@subst))) dO22a7@sym*))) (set! dO20f4@rem* (lambda (dO229f@sym* dO22a0@subst) ((letrec ((dO22a3@f (lambda (dO22a5@subst) (if (null? dO22a5@subst) '() (if (memq (caar dO22a5@subst) dO229f@sym*) (dO22a3@f (cdr dO22a5@subst)) (cons (car dO22a5@subst) (dO22a3@f (cdr dO22a5@subst)))))))) dO22a3@f) dO22a0@subst))) (set! dO20f6@remove-dups (lambda (dO229d@ls) (if (null? dO229d@ls) '() (if (memq (car dO229d@ls) (cdr dO229d@ls)) (dO20f6@remove-dups (cdr dO229d@ls)) (cons (car dO229d@ls) (dO20f6@remove-dups (cdr dO229d@ls))))))) (set! dO20f8@parse-library-name (lambda (dO21b5@spec) ((lambda (dO21b8@subversion? dO21ba@subversion-pred dO21bc@version-pred) (begin (set! dO21b8@subversion? (lambda (dO2299@x) ((lambda (dO229b@x) (and (integer? dO229b@x) (exact? dO229b@x) (>= dO229b@x '0))) (dOe44@syntax->datum dO2299@x)))) (set! dO21ba@subversion-pred (lambda (dO2239@x*) ((lambda (dO223b@t) ((lambda (dO223d@ls/false) (if (and dO223d@ls/false (apply (lambda (dO223f@n) (dO21b8@subversion? dO223f@n)) dO223d@ls/false)) (apply (lambda (dO2241@n) (lambda (dO2243@x) (= dO2243@x (dOe44@syntax->datum dO2241@n)))) dO223d@ls/false) ((lambda (dO2245@t) ((lambda (dO2247@ls/false) (if (and dO2247@ls/false (apply (lambda (dO2249@p? dO224a@sub*) (eq? (dOe44@syntax->datum dO2249@p?) 'and)) dO2247@ls/false)) (apply (lambda (dO224d@p? dO224e@sub*) ((lambda (dO2251@p*) (lambda (dO2253@x) (for-all (lambda (dO2255@p) (dO2255@p dO2253@x)) dO2251@p*))) (map dO21ba@subversion-pred dO224e@sub*))) dO2247@ls/false) ((lambda (dO2257@t) ((lambda (dO2259@ls/false) (if (and dO2259@ls/false (apply (lambda (dO225b@p? dO225c@sub*) (eq? (dOe44@syntax->datum dO225b@p?) 'or)) dO2259@ls/false)) (apply (lambda (dO225f@p? dO2260@sub*) ((lambda (dO2263@p*) (lambda (dO2265@x) (exists (lambda (dO2267@p) (dO2267@p dO2265@x)) dO2263@p*))) (map dO21ba@subversion-pred dO2260@sub*))) dO2259@ls/false) ((lambda (dO2269@t) ((lambda (dO226b@ls/false) (if (and dO226b@ls/false (apply (lambda (dO226d@p? dO226e@sub) (eq? (dOe44@syntax->datum dO226d@p?) 'not)) dO226b@ls/false)) (apply (lambda (dO2271@p? dO2272@sub) ((lambda (dO2275@p) (lambda (dO2277@x) (not (dO2275@p dO2277@x)))) (dO21ba@subversion-pred dO2272@sub))) dO226b@ls/false) ((lambda (dO2279@t) ((lambda (dO227b@ls/false) (if (and dO227b@ls/false (apply (lambda (dO227d@p? dO227e@n) (and (eq? (dOe44@syntax->datum dO227d@p?) '<=) (dO21b8@subversion? dO227e@n))) dO227b@ls/false)) (apply (lambda (dO2281@p? dO2282@n) (lambda (dO2285@x) (<= dO2285@x (dOe44@syntax->datum dO2282@n)))) dO227b@ls/false) ((lambda (dO2287@t) ((lambda (dO2289@ls/false) (if (and dO2289@ls/false (apply (lambda (dO228b@p? dO228c@n) (and (eq? (dOe44@syntax->datum dO228b@p?) '>=) (dO21b8@subversion? dO228c@n))) dO2289@ls/false)) (apply (lambda (dO228f@p? dO2290@n) (lambda (dO2293@x) (>= dO2293@x (dOe44@syntax->datum dO2290@n)))) dO2289@ls/false) ((lambda (dO2295@t) ((lambda (dO2297@ls/false) (if dO2297@ls/false (apply (lambda () (dOe3e@syntax-violation 'import '"invalid sub-version spec" dO21b5@spec dO2239@x*)) dO2297@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO2295@t))) (dOd5e@syntax-dispatch dO2295@t '_))) dO2287@t))) (dOd5e@syntax-dispatch dO2287@t '(any any)))) dO2279@t))) (dOd5e@syntax-dispatch dO2279@t '(any any)))) dO2269@t))) (dOd5e@syntax-dispatch dO2269@t '(any any)))) dO2257@t))) (dOd5e@syntax-dispatch dO2257@t '(any . each-any)))) dO2245@t))) (dOd5e@syntax-dispatch dO2245@t '(any . each-any)))) dO223b@t))) (dOd5e@syntax-dispatch dO223b@t 'any))) dO2239@x*))) (set! dO21bc@version-pred (lambda (dO21e9@x*) ((lambda (dO21eb@t) ((lambda (dO21ed@ls/false) (if dO21ed@ls/false (apply (lambda () (lambda (dO21ef@x) '#t)) dO21ed@ls/false) ((lambda (dO21f1@t) ((lambda (dO21f3@ls/false) (if (and dO21f3@ls/false (apply (lambda (dO21f5@c dO21f6@ver*) (eq? (dOe44@syntax->datum dO21f5@c) 'and)) dO21f3@ls/false)) (apply (lambda (dO21f9@c dO21fa@ver*) ((lambda (dO21fd@p*) (lambda (dO21ff@x) (for-all (lambda (dO2201@p) (dO2201@p dO21ff@x)) dO21fd@p*))) (map dO21bc@version-pred dO21fa@ver*))) dO21f3@ls/false) ((lambda (dO2203@t) ((lambda (dO2205@ls/false) (if (and dO2205@ls/false (apply (lambda (dO2207@c dO2208@ver*) (eq? (dOe44@syntax->datum dO2207@c) 'or)) dO2205@ls/false)) (apply (lambda (dO220b@c dO220c@ver*) ((lambda (dO220f@p*) (lambda (dO2211@x) (exists (lambda (dO2213@p) (dO2213@p dO2211@x)) dO220f@p*))) (map dO21bc@version-pred dO220c@ver*))) dO2205@ls/false) ((lambda (dO2215@t) ((lambda (dO2217@ls/false) (if (and dO2217@ls/false (apply (lambda (dO2219@c dO221a@ver) (eq? (dOe44@syntax->datum dO2219@c) 'not)) dO2217@ls/false)) (apply (lambda (dO221d@c dO221e@ver) ((lambda (dO2221@p) (lambda (dO2223@x) (not (dO2221@p dO2223@x)))) (dO21bc@version-pred dO221e@ver))) dO2217@ls/false) ((lambda (dO2225@t) ((lambda (dO2227@ls/false) (if dO2227@ls/false (apply (lambda (dO2229@sub*) ((lambda (dO222b@p*) (lambda (dO222d@x) ((letrec ((dO222f@f (lambda (dO2231@p* dO2232@x) (if (null? dO2231@p*) '#t (if (null? dO2232@x) '#f (and ((car dO2231@p*) (car dO2232@x)) (dO222f@f (cdr dO2231@p*) (cdr dO2232@x)))))))) dO222f@f) dO222b@p* dO222d@x))) (map dO21ba@subversion-pred dO2229@sub*))) dO2227@ls/false) ((lambda (dO2235@t) ((lambda (dO2237@ls/false) (if dO2237@ls/false (apply (lambda () (dOe3e@syntax-violation 'import '"invalid version spec" dO21b5@spec dO21e9@x*)) dO2237@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO2235@t))) (dOd5e@syntax-dispatch dO2235@t '_))) dO2225@t))) (dOd5e@syntax-dispatch dO2225@t 'each-any))) dO2215@t))) (dOd5e@syntax-dispatch dO2215@t '(any any)))) dO2203@t))) (dOd5e@syntax-dispatch dO2203@t '(any . each-any)))) dO21f1@t))) (dOd5e@syntax-dispatch dO21f1@t '(any . each-any)))) dO21eb@t))) (dOd5e@syntax-dispatch dO21eb@t '()))) dO21e9@x*))) ((letrec ((dO21bd@f (lambda (dO21bf@x) ((lambda (dO21c1@t) ((lambda (dO21c3@ls/false) (if dO21c3@ls/false (apply (lambda (dO21c5@version-spec*) (values '() (dO21bc@version-pred dO21c5@version-spec*))) dO21c3@ls/false) ((lambda (dO21c7@t) ((lambda (dO21c9@ls/false) (if (and dO21c9@ls/false (apply (lambda (dO21cb@x dO21cc@x*) (dO20ea@idsyn? dO21cb@x)) dO21c9@ls/false)) (apply (lambda (dO21cf@x dO21d0@x*) (call-with-values (lambda () (dO21bd@f dO21d0@x*)) (lambda (dO21d7@dO21d4 dO21d8@dO21d6) ((lambda (dO21db@pred dO21dc@name) (values (cons (dOe44@syntax->datum dO21cf@x) dO21dc@name) dO21db@pred)) dO21d8@dO21d6 dO21d7@dO21d4)))) dO21c9@ls/false) ((lambda (dO21df@t) ((lambda (dO21e1@ls/false) (if dO21e1@ls/false (apply (lambda () (values '() (lambda (dO21e3@x) '#t))) dO21e1@ls/false) ((lambda (dO21e5@t) ((lambda (dO21e7@ls/false) (if dO21e7@ls/false (apply (lambda () (dOe3e@syntax-violation '#f '"invalid import spec" dO21b5@spec)) dO21e7@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO21e5@t))) (dOd5e@syntax-dispatch dO21e5@t '_))) dO21df@t))) (dOd5e@syntax-dispatch dO21df@t '()))) dO21c7@t))) (dOd5e@syntax-dispatch dO21c7@t '(any . any)))) dO21c1@t))) (dOd5e@syntax-dispatch dO21c1@t '(each-any)))) dO21bf@x)))) dO21bd@f) dO21b5@spec))) '#f '#f '#f))) (set! dO20fa@import-library (lambda (dO21a5@spec*) (call-with-values (lambda () (dO20f8@parse-library-name dO21a5@spec*)) (lambda (dO21ab@dO21a8 dO21ac@dO21aa) ((lambda (dO21af@pred dO21b0@name) (begin (if (null? dO21b0@name) (dOe3e@syntax-violation 'import '"empty library name" dO21a5@spec*) (void)) ((lambda (dO21b3@lib) (begin (if (not dO21b3@lib) (dOe3e@syntax-violation 'import '"cannot find library with required name" dO21b0@name) (void)) (if (not (dO21af@pred (dO957@dO778@library-version dO21b3@lib))) (dOe3e@syntax-violation 'import '"library does not satisfy version specification" dO21a5@spec* dO21b3@lib) (void)) ((dOdca@imp-collector) dO21b3@lib) (dO95f@dO788@library-subst dO21b3@lib))) (dO97d@dO7c4@find-library-by-name dO21b0@name)))) dO21ac@dO21aa dO21ab@dO21a8))))) (set! dO20fc@get-import (lambda (dO2117@spec) ((lambda (dO2119@t) ((lambda (dO211b@ls/false) (if (and dO211b@ls/false (apply (lambda (dO211d@x dO211e@x*) (not (memq (dOe44@syntax->datum dO211d@x) '(for rename except only prefix library)))) dO211b@ls/false)) (apply (lambda (dO2121@x dO2122@x*) (dO20fa@import-library (cons dO2121@x dO2122@x*))) dO211b@ls/false) ((lambda (dO2125@t) ((lambda (dO2127@ls/false) (if (and dO2127@ls/false (apply (lambda (dO2129@rename dO212a@isp dO212b@old* dO212c@new*) (and (eq? (dOe44@syntax->datum dO2129@rename) 'rename) (for-all dO20ea@idsyn? dO212b@old*) (for-all dO20ea@idsyn? dO212c@new*))) dO2127@ls/false)) (apply (lambda (dO2131@rename dO2132@isp dO2133@old* dO2134@new*) ((lambda (dO2139@subst dO213a@old* dO213b@new*) ((lambda (dO213f@old-label*) ((lambda (dO2141@subst) (dO20ee@merge-substs (map cons dO213b@new* dO213f@old-label*) dO2141@subst)) (dO20f4@rem* dO213a@old* dO2139@subst))) (dO20f2@find* dO213a@old* dO2139@subst))) (dO20fc@get-import dO2132@isp) (map dOe44@syntax->datum dO2133@old*) (map dOe44@syntax->datum dO2134@new*))) dO2127@ls/false) ((lambda (dO2143@t) ((lambda (dO2145@ls/false) (if (and dO2145@ls/false (apply (lambda (dO2147@except dO2148@isp dO2149@sym*) (and (eq? (dOe44@syntax->datum dO2147@except) 'except) (for-all dO20ea@idsyn? dO2149@sym*))) dO2145@ls/false)) (apply (lambda (dO214d@except dO214e@isp dO214f@sym*) ((lambda (dO2153@subst) (dO20f4@rem* (map dOe44@syntax->datum dO214f@sym*) dO2153@subst)) (dO20fc@get-import dO214e@isp))) dO2145@ls/false) ((lambda (dO2155@t) ((lambda (dO2157@ls/false) (if (and dO2157@ls/false (apply (lambda (dO2159@only dO215a@isp dO215b@sym*) (and (eq? (dOe44@syntax->datum dO2159@only) 'only) (for-all dO20ea@idsyn? dO215b@sym*))) dO2157@ls/false)) (apply (lambda (dO215f@only dO2160@isp dO2161@sym*) ((lambda (dO2165@subst dO2166@sym*) ((lambda (dO2169@sym*) ((lambda (dO216b@lab*) (map cons dO2169@sym* dO216b@lab*)) (dO20f2@find* dO2169@sym* dO2165@subst))) (dO20f6@remove-dups dO2166@sym*))) (dO20fc@get-import dO2160@isp) (map dOe44@syntax->datum dO2161@sym*))) dO2157@ls/false) ((lambda (dO216d@t) ((lambda (dO216f@ls/false) (if (and dO216f@ls/false (apply (lambda (dO2171@prefix dO2172@isp dO2173@p) (and (eq? (dOe44@syntax->datum dO2171@prefix) 'prefix) (dO20ea@idsyn? dO2173@p))) dO216f@ls/false)) (apply (lambda (dO2177@prefix dO2178@isp dO2179@p) ((lambda (dO217d@subst dO217e@prefix) (map (lambda (dO2181@x) (cons (string->symbol (string-append dO217e@prefix (symbol->string (car dO2181@x)))) (cdr dO2181@x))) dO217d@subst)) (dO20fc@get-import dO2178@isp) (symbol->string (dOe44@syntax->datum dO2179@p)))) dO216f@ls/false) ((lambda (dO2183@t) ((lambda (dO2185@ls/false) (if (and dO2185@ls/false (apply (lambda (dO2187@library dO2188@spec*) (eq? (dOe44@syntax->datum dO2187@library) 'library)) dO2185@ls/false)) (apply (lambda (dO218b@library dO218c@spec*) (dO20fa@import-library dO218c@spec*)) dO2185@ls/false) ((lambda (dO218f@t) ((lambda (dO2191@ls/false) (if (and dO2191@ls/false (apply (lambda (dO2193@for dO2194@isp dO2195@rest) (eq? (dOe44@syntax->datum dO2193@for) 'for)) dO2191@ls/false)) (apply (lambda (dO2199@for dO219a@isp dO219b@rest) (dO20fc@get-import dO219a@isp)) dO2191@ls/false) ((lambda (dO219f@t) ((lambda (dO21a1@ls/false) (if dO21a1@ls/false (apply (lambda (dO21a3@spec) (dOe3e@syntax-violation 'import '"invalid import spec" dO21a3@spec)) dO21a1@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO219f@t))) (dOd5e@syntax-dispatch dO219f@t 'any))) dO218f@t))) (dOd5e@syntax-dispatch dO218f@t '(any any . any)))) dO2183@t))) (dOd5e@syntax-dispatch dO2183@t '(any each-any)))) dO216d@t))) (dOd5e@syntax-dispatch dO216d@t '(any any any)))) dO2155@t))) (dOd5e@syntax-dispatch dO2155@t '(any any . each-any)))) dO2143@t))) (dOd5e@syntax-dispatch dO2143@t '(any any . each-any)))) dO2125@t))) (dOd5e@syntax-dispatch dO2125@t '(any any . #(each (any any)))))) dO2119@t))) (dOd5e@syntax-dispatch dO2119@t '(any . each-any)))) dO2117@spec))) (set! dO20fe@add-imports! (lambda (dO2107@imp dO2108@h) ((lambda (dO210b@subst) (for-each (lambda (dO210d@x) ((lambda (dO210f@name dO2110@label) ((lambda (dO2113@t) (if dO2113@t ((lambda (dO2115@l) (if (not (eq? dO2115@l dO2110@label)) (dO20ec@dup-error dO210f@name) (void))) dO2113@t) (hashtable-set! dO2108@h dO210f@name dO2110@label))) (hashtable-ref dO2108@h dO210f@name '#f))) (car dO210d@x) (cdr dO210d@x))) dO210b@subst)) (dO20fc@get-import dO2107@imp)))) (lambda (dO20ff@imp*) ((letrec ((dO2101@f (lambda (dO2103@imp* dO2104@h) (if (null? dO2103@imp*) (hashtable-entries dO2104@h) (begin (dO20fe@add-imports! (car dO2103@imp*) dO2104@h) (dO2101@f (cdr dO2103@imp*) dO2104@h)))))) dO2101@f) dO20ff@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! dOdc2@make-top-rib (lambda (dO22f5@names dO22f6@labels) ((lambda (dO22f9@rib) (begin (vector-for-each (lambda (dO22fb@name dO22fc@label) (begin (if (not (symbol? dO22fb@name)) (error 'make-top-rib '"BUG: not a symbol" dO22fb@name) (void)) (dOb11@extend-rib/nc! dO22f9@rib (make-simple-struct 'stx '5 (list dO22fb@name dOadd@top-mark* '() '())) dO22fc@label))) dO22f5@names dO22f6@labels) dO22f9@rib)) (dOb0d@make-empty-rib)))) (set! dOdc4@make-collector (lambda () ((lambda (dO22ff@ls) (lambda dO2303 ((lambda (dO2304) (if (= dO2304 '0) (apply (lambda () dO22ff@ls) dO2303) (if (= dO2304 '1) (apply (lambda (dO2301@x) (set! dO22ff@ls (dOad6@set-cons dO2301@x dO22ff@ls))) dO2303) (error 'apply '"invalid arg count")))) (length dO2303)))) '()))) (set! dOdc6@inv-collector (dO6b8@dO597@make-parameter (lambda dO2305@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (dO2307@x) (begin (if (not (procedure? dO2307@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" dO2307@x) (void)) dO2307@x)))) (set! dOdc8@vis-collector (dO6b8@dO597@make-parameter (lambda dO2309@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (dO230b@x) (begin (if (not (procedure? dO230b@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" dO230b@x) (void)) dO230b@x)))) (set! dOdca@imp-collector (dO6b8@dO597@make-parameter (lambda dO230d@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (dO230f@x) (begin (if (not (procedure? dO230f@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" dO230f@x) (void)) dO230f@x)))) (set! dOdcc@chi-library-internal (lambda (dO2311@e* dO2312@rib dO2313@top?) (call-with-values (lambda () (dOdb6@chi-body* dO2311@e* '() '() '() '() '() '() '() dO2312@rib dO2313@top?)) (lambda (dO2327@dO2318 dO2328@dO231a dO2329@dO231c dO232a@dO231e dO232b@dO2320 dO232c@dO2322 dO232d@dO2324 dO232e@dO2326) ((lambda (dO2337@exp* dO2338@_kwd* dO2339@mod** dO233a@rhs* dO233b@lex* dO233c@mr dO233d@r dO233e@e*) (values (append (apply append (reverse dO2339@mod**)) dO233e@e*) dO233d@r dO233c@mr (reverse dO233b@lex*) (reverse dO233a@rhs*) dO2337@exp*)) dO232e@dO2326 dO232d@dO2324 dO232c@dO2322 dO232b@dO2320 dO232a@dO231e dO2329@dO231c dO2328@dO231a dO2327@dO2318))))) (set! dOdce@chi-interaction-expr (lambda (dO2347@e dO2348@rib dO2349@r) (call-with-values (lambda () (dOdb6@chi-body* (list dO2347@e) dO2349@r dO2349@r '() '() '() '() '() dO2348@rib '#t)) (lambda (dO235d@dO234e dO235e@dO2350 dO235f@dO2352 dO2360@dO2354 dO2361@dO2356 dO2362@dO2358 dO2363@dO235a dO2364@dO235c) ((lambda (dO236d@_exp* dO236e@_kwd* dO236f@mod** dO2370@rhs* dO2371@lex* dO2372@mr dO2373@r dO2374@e*) ((lambda (dO237d@e*) ((lambda (dO237f@e) (values dO237f@e dO2373@r)) (if (null? dO237d@e*) (dOac1@dOa31@build-void) (if (null? (cdr dO237d@e*)) (car dO237d@e*) (dOac0@dOa2f@build-sequence '#f dO237d@e*))))) (dOd8e@expand-interaction-rhs*/init* (reverse dO2371@lex*) (reverse dO2370@rhs*) (append (apply append (reverse dO236f@mod**)) dO2374@e*) dO2373@r dO2372@mr))) dO2364@dO235c dO2363@dO235a dO2362@dO2358 dO2361@dO2356 dO2360@dO2354 dO235f@dO2352 dO235e@dO2350 dO235d@dO234e))))) (set! dOdd0@library-body-expander (lambda (dO2381@name dO2382@main-exp* dO2383@imp* dO2384@b* dO2385@top?) ((lambda (dO238c@itc) (begin (set! dO238c@itc (dOdc4@make-collector)) ((lambda (dO2395@dO238e dO2396@dO2390 dO2397@dO2392 dO2398@dO2394) ((lambda (dO239d@swap) (dynamic-wind dO239d@swap (lambda () (call-with-values (lambda () (dOdc0@parse-import-spec* dO2383@imp*)) (lambda (dO23a3@dO23a0 dO23a4@dO23a2) ((lambda (dO23a7@subst-labels dO23a8@subst-names) ((lambda (dO23ab@rib) ((lambda (dO23ae@wrap) (begin (set! dO23ae@wrap (lambda (dO2429@x) (make-simple-struct 'stx '5 (list dO2429@x dOadd@top-mark* (list dO23ab@rib) '())))) ((lambda (dO23af@b* dO23b0@main-exp* dO23b1@rtc dO23b2@vtc) ((lambda (dO23bf@dO23b8 dO23c0@dO23ba dO23c1@dO23bc dO23c2@dO23be) ((lambda (dO23c7@swap) (dynamic-wind dO23c7@swap (lambda () (call-with-values (lambda () (dOdcc@chi-library-internal dO23af@b* dO23ab@rib dO2385@top?)) (lambda (dO23d5@dO23ca dO23d6@dO23cc dO23d7@dO23ce dO23d8@dO23d0 dO23d9@dO23d2 dO23da@dO23d4) ((lambda (dO23e1@internal-exp* dO23e2@rhs* dO23e3@lex* dO23e4@mr dO23e5@r dO23e6@init*) (call-with-values (lambda () (dOdba@parse-exports (append dO23b0@main-exp* dO23e1@internal-exp*))) (lambda (dO23f1@dO23ee dO23f2@dO23f0) ((lambda (dO23f5@exp-id* dO23f6@exp-name*) (begin (dOb15@seal-rib! dO23ab@rib) ((lambda (dO23f9@init*) ((lambda (dO23fb@rhs*) ((lambda () (begin (dOb17@unseal-rib! dO23ab@rib) ((lambda (dO23fd@loc* dO23fe@export-subst) ((lambda (dO2402@errstr) (begin (set! dO2402@errstr '"attempt to export mutated variable") (call-with-values (lambda () (dOe2a@make-export-env/macros dO23e3@lex* dO23fd@loc* dO23e5@r)) (lambda (dO2409@dO2404 dO240a@dO2406 dO240b@dO2408) ((lambda (dO240f@macro* dO2410@global* dO2411@export-env) (begin (for-each (lambda (dO2415@s) ((lambda (dO2417@name dO2418@label) ((lambda (dO241b@p) (if dO241b@p ((lambda (dO241d@b) ((lambda (dO241f@type) (if (eq? dO241f@type 'mutable) (dOe3e@syntax-violation 'export dO2402@errstr dO2417@name) (void))) (car dO241d@b))) (cdr dO241b@p)) (void))) (assq dO2418@label dO2411@export-env))) (car dO2415@s) (cdr dO2415@s))) dO23fe@export-subst) ((lambda (dO2421@invoke-body dO2422@invoke-definitions) (values (dO238c@itc) (dO23b1@rtc) (dO23b2@vtc) (dOac0@dOa2f@build-sequence '#f (append dO2422@invoke-definitions (list dO2421@invoke-body))) dO240f@macro* dO23fe@export-subst dO2411@export-env)) (dOac3@dOa35@build-letrec* '#f dO23e3@lex* dO23fb@rhs* (dOe26@build-exports dO2410@global* dO23f9@init*)) (map dOabc@dO98c@build-global-define (map cdr dO2410@global*))))) dO240b@dO2408 dO240a@dO2406 dO2409@dO2404))))) '#f)) (map dOae3@gen-global dO23e3@lex*) (dOe28@make-export-subst dO23f6@exp-name* dO23f5@exp-id*)))))) (dOd90@chi-rhs* dO23e2@rhs* dO23e5@r dO23e4@mr))) (dOd7c@chi-expr* dO23e6@init* dO23e5@r dO23e4@mr)))) dO23f2@dO23f0 dO23f1@dO23ee)))) dO23da@dO23d4 dO23d9@dO23d2 dO23d8@dO23d0 dO23d7@dO23ce dO23d6@dO23cc dO23d5@dO23ca)))) dO23c7@swap)) (lambda () (begin ((lambda (dO2425@t) (begin (dO23bf@dO23b8 dO23c1@dO23bc) (set! dO23c1@dO23bc dO2425@t))) (dO23bf@dO23b8)) ((lambda (dO2427@t) (begin (dO23c0@dO23ba dO23c2@dO23be) (set! dO23c2@dO23be dO2427@t))) (dO23c0@dO23ba)))))) dOdc6@inv-collector dOdc8@vis-collector dO23b1@rtc dO23b2@vtc)) (map dO23ae@wrap dO2384@b*) (map dO23ae@wrap dO2382@main-exp*) (dOdc4@make-collector) (dOdc4@make-collector)))) '#f)) (dOdc2@make-top-rib dO23a8@subst-names dO23a7@subst-labels))) dO23a4@dO23a2 dO23a3@dO23a0)))) dO239d@swap)) (lambda () (begin ((lambda (dO242b@t) (begin (dO2395@dO238e dO2397@dO2392) (set! dO2397@dO2392 dO242b@t))) (dO2395@dO238e)) ((lambda (dO242d@t) (begin (dO2396@dO2390 dO2398@dO2394) (set! dO2398@dO2394 dO242d@t))) (dO2396@dO2390)))))) dOdca@imp-collector dOe4c@top-level-context dO238c@itc '#f))) '#f))) (set! dOdd2@core-library-expander (lambda (dO242f@e dO2430@verify-name) (call-with-values (lambda () (dOdbe@parse-library dO242f@e)) (lambda (dO243b@dO2434 dO243c@dO2436 dO243d@dO2438 dO243e@dO243a) ((lambda (dO2443@b* dO2444@imp* dO2445@exp* dO2446@name*) (call-with-values (lambda () (dOdbc@parse-library-name dO2446@name*)) (lambda (dO244f@dO244c dO2450@dO244e) ((lambda (dO2453@ver dO2454@name) (begin (dO2430@verify-name dO2454@name) (call-with-values (lambda () (dOdd0@library-body-expander dO2454@name dO2445@exp* dO2444@imp* dO2443@b* '#f)) (lambda (dO2465@dO2458 dO2466@dO245a dO2467@dO245c dO2468@dO245e dO2469@dO2460 dO246a@dO2462 dO246b@dO2464) ((lambda (dO2473@export-env dO2474@export-subst dO2475@visit-code dO2476@invoke-code dO2477@visit-req* dO2478@invoke-req* dO2479@imp*) (values dO2454@name dO2453@ver dO2479@imp* dO2478@invoke-req* dO2477@visit-req* dO2476@invoke-code dO2475@visit-code dO2474@export-subst dO2473@export-env)) dO246b@dO2464 dO246a@dO2462 dO2469@dO2460 dO2468@dO245e dO2467@dO245c dO2466@dO245a dO2465@dO2458))))) dO2450@dO244e dO244f@dO244c)))) dO243e@dO243a dO243d@dO2438 dO243c@dO2436 dO243b@dO2434))))) (set! dOdd4@parse-top-level-program (lambda (dO2481@e*) ((lambda (dO2483@t) ((lambda (dO2485@ls/false) (if (and dO2485@ls/false (apply (lambda (dO2487@import dO2488@imp* dO2489@b*) (eq? (dOe44@syntax->datum dO2487@import) 'import)) dO2485@ls/false)) (apply (lambda (dO248d@import dO248e@imp* dO248f@b*) (values dO248e@imp* dO248f@b*)) dO2485@ls/false) ((lambda (dO2493@t) ((lambda (dO2495@ls/false) (if (and dO2495@ls/false (apply (lambda (dO2497@import dO2498@x dO2499@y) (eq? (dOe44@syntax->datum dO2497@import) 'import)) dO2495@ls/false)) (apply (lambda (dO249d@import dO249e@x dO249f@y) (dOe3e@syntax-violation 'expander '"invalid syntax of top-level program" (dOb53@syntax-car dO2481@e*))) dO2495@ls/false) ((lambda (dO24a3@t) ((lambda (dO24a5@ls/false) (if dO24a5@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) dO24a5@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO24a3@t))) (dOd5e@syntax-dispatch dO24a3@t '_))) dO2493@t))) (dOd5e@syntax-dispatch dO2493@t '((any . any) . any)))) dO2483@t))) (dOd5e@syntax-dispatch dO2483@t '((any . each-any) . each-any)))) dO2481@e*))) (set! dOdd6@top-level-expander (lambda (dO24a7@e*) (call-with-values (lambda () (dOdd4@parse-top-level-program dO24a7@e*)) (lambda (dO24ad@dO24aa dO24ae@dO24ac) ((lambda (dO24b1@b* dO24b2@imp*) (call-with-values (lambda () (dOdd0@library-body-expander '() '() dO24b2@imp* dO24b1@b* '#t)) (lambda (dO24c3@dO24b6 dO24c4@dO24b8 dO24c5@dO24ba dO24c6@dO24bc dO24c7@dO24be dO24c8@dO24c0 dO24c9@dO24c2) ((lambda (dO24d1@export-env dO24d2@export-subst dO24d3@visit-code dO24d4@invoke-code dO24d5@visit-req* dO24d6@invoke-req* dO24d7@imp*) (values dO24d6@invoke-req* dO24d4@invoke-code)) dO24c9@dO24c2 dO24c8@dO24c0 dO24c7@dO24be dO24c6@dO24bc dO24c5@dO24ba dO24c4@dO24b8 dO24c3@dO24b6)))) dO24ae@dO24ac dO24ad@dO24aa))))) (set! dOdd8@rp (dO6b5@dO591@make-record-printer 'env (lambda (dO24df@x dO24e0@p dO24e1@wr) (display '"#<environment>" dO24e0@p)))) (set! dOde2@env? (lambda (dO24e5@x) (and (simple-struct? dO24e5@x) (eq? (simple-struct-name dO24e5@x) 'env)))) (set! dOde4@env-names (lambda (dO24e7@x) (simple-struct-ref dO24e7@x '0))) (set! dOde6@set-env-names! (lambda (dO24e9@x dO24ea@val) (simple-struct-set! dO24e9@x '0 dO24ea@val))) (set! dOde8@env-labels (lambda (dO24ed@x) (simple-struct-ref dO24ed@x '1))) (set! dOdea@set-env-labels! (lambda (dO24ef@x dO24f0@val) (simple-struct-set! dO24ef@x '1 dO24f0@val))) (set! dOdec@env-itc (lambda (dO24f3@x) (simple-struct-ref dO24f3@x '2))) (set! dOdee@set-env-itc! (lambda (dO24f5@x dO24f6@val) (simple-struct-set! dO24f5@x '2 dO24f6@val))) (set! dOdf0@dummy '3) (set! dOdf2@rp (dO6b5@dO591@make-record-printer 'interaction-env (lambda (dO24f9@x dO24fa@p dO24fb@wr) (display '"#<environment>" dO24fa@p)))) (set! dOdfc@interaction-env? (lambda (dO24ff@x) (and (simple-struct? dO24ff@x) (eq? (simple-struct-name dO24ff@x) 'interaction-env)))) (set! dOdfe@interaction-env-rib (lambda (dO2501@x) (simple-struct-ref dO2501@x '0))) (set! dOe00@set-interaction-env-rib! (lambda (dO2503@x dO2504@val) (simple-struct-set! dO2503@x '0 dO2504@val))) (set! dOe02@interaction-env-r (lambda (dO2507@x) (simple-struct-ref dO2507@x '1))) (set! dOe04@set-interaction-env-r! (lambda (dO2509@x dO250a@val) (simple-struct-set! dO2509@x '1 dO250a@val))) (set! dOe06@interaction-env-locs (lambda (dO250d@x) (simple-struct-ref dO250d@x '2))) (set! dOe08@set-interaction-env-locs! (lambda (dO250f@x dO2510@val) (simple-struct-set! dO250f@x '2 dO2510@val))) (set! dOe0a@dummy '3) (set! dOe0c@interaction-environment-symbols (lambda () (dOe14@environment-symbols (dOe4a@interaction-environment)))) (set! dOe0e@environment-bindings (lambda (dO2513@e) (vector->list (vector-map (lambda (dO2515@name dO2516@label) (dOe10@parse-binding (cons dO2515@name (dO983@dO7d0@imported-label->binding dO2516@label)))) (dOde4@env-names dO2513@e) (dOde8@env-labels dO2513@e))))) (set! dOe10@parse-binding (lambda (dO2519@b) (cons (car dO2519@b) ((lambda (dO251b@t) (if (memv dO251b@t '(core-prim global)) 'procedure (if (memv dO251b@t '(core-macro macro global-macro)) 'syntax (if (memv dO251b@t '($core-rtd)) 'record (if (eq? (car dO2519@b) (cadr dO2519@b)) 'syntax 'unknown))))) (cadr dO2519@b))))) (set! dOe12@environment? (lambda (dO251d@x) (or (dOde2@env? dO251d@x) (dOdfc@interaction-env? dO251d@x)))) (set! dOe14@environment-symbols (lambda (dO251f@x) (if (dOde2@env? dO251f@x) (vector->list (dOde4@env-names dO251f@x)) (if (dOdfc@interaction-env? dO251f@x) (map values (dOaf7@rib-sym* (dOdfe@interaction-env-rib dO251f@x))) (assertion-violation 'environment-symbols '"not an environment" dO251f@x))))) (set! dOe16@environment (lambda dO2521@imp* ((lambda (dO2523@itc) ((lambda (dO2529@dO2526 dO252a@dO2528) ((lambda (dO252d@swap) (dynamic-wind dO252d@swap (lambda () (call-with-values (lambda () (dOdc0@parse-import-spec* dO2521@imp*)) (lambda (dO2533@dO2530 dO2534@dO2532) ((lambda (dO2537@subst-labels dO2538@subst-names) (make-simple-struct 'env '4 (list dO2538@subst-names dO2537@subst-labels dO2523@itc))) dO2534@dO2532 dO2533@dO2530)))) dO252d@swap)) (lambda () ((lambda (dO253b@t) (begin (dO2529@dO2526 dO252a@dO2528) (set! dO252a@dO2528 dO253b@t))) (dO2529@dO2526))))) dOdca@imp-collector dO2523@itc)) (dOdc4@make-collector)))) (set! dOe18@null-environment (lambda (dO253d@n) (begin (if (not (eqv? dO253d@n '5)) (assertion-violation 'null-environment '"not 5" dO253d@n) (void)) (dOe16@environment '(psyntax null-environment-5))))) (set! dOe1a@scheme-report-environment (lambda (dO253f@n) (begin (if (not (eqv? dO253f@n '5)) (assertion-violation 'scheme-report-environment '"not 5" dO253f@n) (void)) (dOe16@environment '(psyntax scheme-report-environment-5))))) (set! dOe1c@expand (lambda (dO2541@x dO2542@env) (if (dOde2@env? dO2542@env) ((lambda (dO2545@rib) ((lambda (dO2547@x dO2548@itc dO2549@rtc dO254a@vtc) ((lambda (dO254f@x) (begin (dOb15@seal-rib! dO2545@rib) (values dO254f@x (dO2549@rtc)))) ((lambda (dO2561@dO2552 dO2562@dO2554 dO2563@dO2556 dO2564@dO2558 dO2565@dO255a dO2566@dO255c dO2567@dO255e dO2568@dO2560) ((lambda (dO2571@swap) (dynamic-wind dO2571@swap (lambda () (dOd80@chi-expr dO2547@x '() '())) dO2571@swap)) (lambda () (begin ((lambda (dO2573@t) (begin (dO2561@dO2552 dO2565@dO255a) (set! dO2565@dO255a dO2573@t))) (dO2561@dO2552)) ((lambda (dO2575@t) (begin (dO2562@dO2554 dO2566@dO255c) (set! dO2566@dO255c dO2575@t))) (dO2562@dO2554)) ((lambda (dO2577@t) (begin (dO2563@dO2556 dO2567@dO255e) (set! dO2567@dO255e dO2577@t))) (dO2563@dO2556)) ((lambda (dO2579@t) (begin (dO2564@dO2558 dO2568@dO2560) (set! dO2568@dO2560 dO2579@t))) (dO2564@dO2558)))))) dOe4c@top-level-context dOdc6@inv-collector dOdc8@vis-collector dOdca@imp-collector '#f dO2549@rtc dO254a@vtc dO2548@itc))) (make-simple-struct 'stx '5 (list dO2541@x dOadd@top-mark* (list dO2545@rib) '())) (dOdec@env-itc dO2542@env) (dOdc4@make-collector) (dOdc4@make-collector))) (dOdc2@make-top-rib (dOde4@env-names dO2542@env) (dOde8@env-labels dO2542@env))) (if (dOdfc@interaction-env? dO2542@env) ((lambda (dO257b@rib dO257c@r dO257d@rtc) ((lambda (dO2581@x) (call-with-values (lambda () ((lambda (dO2597@dO2588 dO2598@dO258a dO2599@dO258c dO259a@dO258e dO259b@dO2590 dO259c@dO2592 dO259d@dO2594 dO259e@dO2596) ((lambda (dO25a7@swap) (dynamic-wind dO25a7@swap (lambda () (dOdce@chi-interaction-expr dO2581@x dO257b@rib dO257c@r)) dO25a7@swap)) (lambda () (begin ((lambda (dO25a9@t) (begin (dO2597@dO2588 dO259b@dO2590) (set! dO259b@dO2590 dO25a9@t))) (dO2597@dO2588)) ((lambda (dO25ab@t) (begin (dO2598@dO258a dO259c@dO2592) (set! dO259c@dO2592 dO25ab@t))) (dO2598@dO258a)) ((lambda (dO25ad@t) (begin (dO2599@dO258c dO259d@dO2594) (set! dO259d@dO2594 dO25ad@t))) (dO2599@dO258c)) ((lambda (dO25af@t) (begin (dO259a@dO258e dO259e@dO2596) (set! dO259e@dO2596 dO25af@t))) (dO259a@dO258e)))))) dOe4c@top-level-context dOdc6@inv-collector dOdc8@vis-collector dOdca@imp-collector dO2542@env dO257d@rtc (dOdc4@make-collector) (dOdc4@make-collector))) (lambda (dO25b1@dO2584 dO25b2@dO2586) ((lambda (dO25b5@r^ dO25b6@e) (begin (dOe04@set-interaction-env-r! dO2542@env dO25b5@r^) (values dO25b6@e (dO257d@rtc)))) dO25b2@dO2586 dO25b1@dO2584)))) (make-simple-struct 'stx '5 (list dO2541@x dOadd@top-mark* (list dO257b@rib) '())))) (dOdfe@interaction-env-rib dO2542@env) (dOe02@interaction-env-r dO2542@env) (dOdc4@make-collector)) (assertion-violation 'expand '"not an environment" dO2542@env))))) (set! dOe1e@eval (lambda (dO25b9@x dO25ba@env) (begin (if (not (dOe12@environment? dO25ba@env)) (error 'eval '"not an environment" dO25ba@env) (void)) (call-with-values (lambda () (dOe1c@expand dO25b9@x dO25ba@env)) (lambda (dO25c1@dO25be dO25c2@dO25c0) ((lambda (dO25c5@invoke-req* dO25c6@x) (begin (for-each dO984@dO7d2@invoke-library dO25c5@invoke-req*) (eval-core (dO70e@dO6c6@expanded->core dO25c6@x)))) dO25c2@dO25c0 dO25c1@dO25be)))))) (set! dOe20@library-expander (lambda dO2637 ((lambda (dO2638) (if (= dO2638 '3) (apply (lambda (dO25c9@x dO25ca@filename dO25cb@verify-name) ((lambda (dO25d0@build-visit-code dO25d2@visit!) (begin (set! dO25d0@build-visit-code (lambda (dO2625@macro*) (if (null? dO2625@macro*) (dOac1@dOa31@build-void) (dOac0@dOa2f@build-sequence '#f (map (lambda (dO2627@x) ((lambda (dO2629@loc dO262a@src) (list 'set! dO2629@loc dO262a@src)) (car dO2627@x) (cddr dO2627@x))) dO2625@macro*))))) (set! dO25d2@visit! (lambda (dO261d@macro*) (for-each (lambda (dO261f@x) ((lambda (dO2621@loc dO2622@proc) (set-symbol-value! dO2621@loc dO2622@proc)) (car dO261f@x) (cadr dO261f@x))) dO261d@macro*))) (call-with-values (lambda () (dOdd2@core-library-expander dO25c9@x dO25cb@verify-name)) (lambda (dO25e5@dO25d4 dO25e6@dO25d6 dO25e7@dO25d8 dO25e8@dO25da dO25e9@dO25dc dO25ea@dO25de dO25eb@dO25e0 dO25ec@dO25e2 dO25ed@dO25e4) ((lambda (dO25f7@export-env dO25f8@export-subst dO25f9@macro* dO25fa@invoke-code dO25fb@vis* dO25fc@inv* dO25fd@imp* dO25fe@ver dO25ff@name) ((lambda (dO2609@id dO260a@name dO260b@ver dO260c@imp* dO260d@vis* dO260e@inv* dO260f@visit-proc dO2610@invoke-proc dO2611@visit-code dO2612@invoke-code) (begin (dO982@dO7ce@install-library dO2609@id dO260a@name dO260b@ver dO260c@imp* dO260d@vis* dO260e@inv* dO25f8@export-subst dO25f7@export-env dO260f@visit-proc dO2610@invoke-proc dO2611@visit-code dO2612@invoke-code '#t dO25ca@filename) (values dO2609@id dO260a@name dO260b@ver dO260c@imp* dO260d@vis* dO260e@inv* dO2612@invoke-code dO2611@visit-code dO25f8@export-subst dO25f7@export-env))) (gensym) dO25ff@name dO25fe@ver (map dO988@dO7da@library-spec dO25fd@imp*) (map dO988@dO7da@library-spec dO25fb@vis*) (map dO988@dO7da@library-spec dO25fc@inv*) (lambda () (dO25d2@visit! dO25f9@macro*)) (lambda () (eval-core (dO70e@dO6c6@expanded->core dO25fa@invoke-code))) (dO25d0@build-visit-code dO25f9@macro*) dO25fa@invoke-code)) dO25ed@dO25e4 dO25ec@dO25e2 dO25eb@dO25e0 dO25ea@dO25de dO25e9@dO25dc dO25e8@dO25da dO25e7@dO25d8 dO25e6@dO25d6 dO25e5@dO25d4))))) '#f '#f)) dO2637) (if (= dO2638 '2) (apply (lambda (dO262d@x dO262e@filename) (dOe20@library-expander dO262d@x dO262e@filename (lambda (dO2631@x) (values)))) dO2637) (if (= dO2638 '1) (apply (lambda (dO2633@x) (dOe20@library-expander dO2633@x '#f (lambda (dO2635@x) (values)))) dO2637) (error 'apply '"invalid arg count"))))) (length dO2637)))) (set! dOe22@boot-library-expand (lambda (dO2639@x) (call-with-values (lambda () (dOe20@library-expander dO2639@x)) (lambda (dO264f@dO263c dO2650@dO263e dO2651@dO2640 dO2652@dO2642 dO2653@dO2644 dO2654@dO2646 dO2655@dO2648 dO2656@dO264a dO2657@dO264c dO2658@dO264e) ((lambda (dO2663@export-env dO2664@export-subst dO2665@visit-code dO2666@invoke-code dO2667@inv* dO2668@vis* dO2669@imp* dO266a@ver dO266b@name dO266c@id) (values dO266b@name dO2666@invoke-code dO2664@export-subst dO2663@export-env)) dO2658@dO264e dO2657@dO264c dO2656@dO264a dO2655@dO2648 dO2654@dO2646 dO2653@dO2644 dO2652@dO2642 dO2651@dO2640 dO2650@dO263e dO264f@dO263c))))) (set! dOe24@rev-map-append (lambda (dO2677@f dO2678@ls dO2679@ac) (if (null? dO2678@ls) dO2679@ac (dOe24@rev-map-append dO2677@f (cdr dO2678@ls) (cons (dO2677@f (car dO2678@ls)) dO2679@ac))))) (set! dOe26@build-exports (lambda (dO267d@lex*+loc* dO267e@init*) (dOac0@dOa2f@build-sequence '#f (cons (dOac1@dOa31@build-void) (dOe24@rev-map-append (lambda (dO2681@x) (list 'set! (cdr dO2681@x) (car dO2681@x))) dO267d@lex*+loc* dO267e@init*))))) (set! dOe28@make-export-subst (lambda (dO2683@name* dO2684@id*) (map (lambda (dO2687@name dO2688@id) ((lambda (dO268b@label) (begin (if (not dO268b@label) (dOe3e@syntax-violation '#f '"cannot export unbound identifier" dO2688@id) (void)) (cons dO2687@name dO268b@label))) (dOb6f@id->label dO2688@id))) dO2683@name* dO2684@id*))) (set! dOe2a@make-export-env/macros (lambda (dO268d@lex* dO268e@loc* dO268f@r) ((lambda (dO2694@lookup) (begin (set! dO2694@lookup (lambda (dO26b1@x) ((letrec ((dO26b3@f (lambda (dO26b5@x dO26b6@lex* dO26b7@loc*) (if (pair? dO26b6@lex*) (if (eq? dO26b5@x (car dO26b6@lex*)) (car dO26b7@loc*) (dO26b3@f dO26b5@x (cdr dO26b6@lex*) (cdr dO26b7@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) dO26b3@f) dO26b1@x dO268d@lex* dO268e@loc*))) ((letrec ((dO2695@f (lambda (dO2697@r dO2698@env dO2699@global* dO269a@macro*) (if (null? dO2697@r) (values dO2698@env dO2699@global* dO269a@macro*) ((lambda (dO269f@x) ((lambda (dO26a1@label dO26a2@b) ((lambda (dO26a5@t) (if (memv dO26a5@t '(lexical)) ((lambda (dO26a7@v) ((lambda (dO26a9@loc dO26aa@type) (dO2695@f (cdr dO2697@r) (cons (cons* dO26a1@label dO26aa@type dO26a9@loc) dO2698@env) (cons (cons (dOcea@lexical-var dO26a7@v) dO26a9@loc) dO2699@global*) dO269a@macro*)) (dO2694@lookup (dOcea@lexical-var dO26a7@v)) (if (dOcec@lexical-mutable? dO26a7@v) 'mutable 'global))) (dOb77@binding-value dO26a2@b)) (if (memv dO26a5@t '(local-macro)) ((lambda (dO26ad@loc) (dO2695@f (cdr dO2697@r) (cons (cons* dO26a1@label 'global-macro dO26ad@loc) dO2698@env) dO2699@global* (cons (cons dO26ad@loc (dOb77@binding-value dO26a2@b)) dO269a@macro*))) (gensym)) (if (memv dO26a5@t '(local-macro!)) ((lambda (dO26af@loc) (dO2695@f (cdr dO2697@r) (cons (cons* dO26a1@label 'global-macro! dO26af@loc) dO2698@env) dO2699@global* (cons (cons dO26af@loc (dOb77@binding-value dO26a2@b)) dO269a@macro*))) (gensym)) (if (memv dO26a5@t '($rtd $module)) (dO2695@f (cdr dO2697@r) (cons dO269f@x dO2698@env) dO2699@global* dO269a@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (dOb75@binding-type dO26a2@b) (dOb77@binding-value dO26a2@b))))))) (dOb75@binding-type dO26a2@b))) (car dO269f@x) (cdr dO269f@x))) (car dO2697@r)))))) dO2695@f) dO268f@r '() '() '()))) '#f))) (set! dOe2c@generate-temporaries (lambda (dO26bb@ls) ((lambda (dO26bd@t) ((lambda (dO26bf@ls/false) (if dO26bf@ls/false (apply (lambda (dO26c1@ls) (map (lambda (dO26c3@x) (make-simple-struct 'stx '5 (list ((lambda (dO26c5@x) (if (or (symbol? dO26c5@x) (string? dO26c5@x)) (gensym dO26c5@x) (gensym 't))) (dOe44@syntax->datum dO26c3@x)) dOadd@top-mark* '() '()))) dO26c1@ls)) dO26bf@ls/false) ((lambda (dO26c7@t) ((lambda (dO26c9@ls/false) (if dO26c9@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) dO26c9@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO26c7@t))) (dOd5e@syntax-dispatch dO26c7@t '_))) dO26bd@t))) (dOd5e@syntax-dispatch dO26bd@t 'each-any))) dO26bb@ls))) (set! dOe2e@free-identifier=? (lambda (dO26cb@x dO26cc@y) (if (dOb59@id? dO26cb@x) (if (dOb59@id? dO26cc@y) (dOb5f@free-id=? dO26cb@x dO26cc@y) (assertion-violation 'free-identifier=? '"not an identifier" dO26cc@y)) (assertion-violation 'free-identifier=? '"not an identifier" dO26cb@x)))) (set! dOe30@bound-identifier=? (lambda (dO26cf@x dO26d0@y) (if (dOb59@id? dO26cf@x) (if (dOb59@id? dO26d0@y) (dOb5d@bound-id=? dO26cf@x dO26d0@y) (assertion-violation 'bound-identifier=? '"not an identifier" dO26d0@y)) (assertion-violation 'bound-identifier=? '"not an identifier" dO26cf@x)))) (set! dOe32@make-source-condition (lambda (dO26d3@x) ((lambda (dO26dd@dO26d8 dO26df@dO26da dO26e1@dO26d9 dO26e4@dO26d7 dO26e6@make-source-condition dO26e8@dO26d5 dO26ea@dO26d6 dO26ec@source-condition? dO26ee@source-filename dO26f0@source-character) (begin (set! dO26dd@dO26d8 (make-record-type-descriptor '&source-information dO2b2d@dO2874@&condition-rtd 'dO26db '#f '#f '#((immutable file-name) (immutable character)))) (set! dO26df@dO26da '#f) (set! dO26e1@dO26d9 (make-record-constructor-descriptor dO26dd@dO26d8 dO2b2e@dO2876@&condition-rcd dO26df@dO26da)) (set! dO26e4@dO26d7 (record-predicate dO26dd@dO26d8)) (set! dO26e6@make-source-condition (record-constructor dO26e1@dO26d9)) (set! dO26e8@dO26d5 (record-accessor dO26dd@dO26d8 '0)) (set! dO26ea@dO26d6 (record-accessor dO26dd@dO26d8 '1)) (set! dO26ec@source-condition? (condition-predicate dO26dd@dO26d8)) (set! dO26ee@source-filename (condition-accessor dO26dd@dO26d8 dO26e8@dO26d5)) (set! dO26f0@source-character (condition-accessor dO26dd@dO26d8 dO26ea@dO26d6)) (if (pair? dO26d3@x) (dO26e6@make-source-condition (car dO26d3@x) (cdr dO26d3@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! dOe34@extract-position-condition (lambda (dO26f1@x) (dOe32@make-source-condition (dOe36@expression-position dO26f1@x)))) (set! dOe36@expression-position (lambda (dO26f3@x) (and (dOb25@stx? dO26f3@x) ((lambda (dO26f5@x) (and (dO6ad@dO581@annotation? dO26f5@x) (dO6ae@dO583@annotation-source dO26f5@x))) (dOb27@stx-expr dO26f3@x))))) (set! dOe38@assertion-error (lambda (dO26f7@expr dO26f8@pos) (raise (condition (dO2b5d@dO2938@make-assertion-violation) (dO2b6f@dO296a@make-who-condition 'assert) (dO2b33@dO28cb@make-message-condition '"assertion failed") (dO2b65@dO294f@make-irritants-condition (list dO26f7@expr)) (dOe32@make-source-condition dO26f8@pos))))) (set! dOe3a@syntax-error (lambda (dO26fb@x . dO26fd@args) (begin (if (not (for-all string? dO26fd@args)) (assertion-violation 'syntax-error '"invalid argument" dO26fd@args) (void)) (raise (condition (dO2b33@dO28cb@make-message-condition (if (null? dO26fd@args) '"invalid syntax" (apply string-append dO26fd@args))) (dO2b91@dO29c6@make-syntax-violation (dOe44@syntax->datum dO26fb@x) '#f) (dOe34@extract-position-condition dO26fb@x)))))) (set! dOe3c@syntax-violation* (lambda (dO26ff@who dO2700@msg dO2701@form dO2702@condition-object) (begin (if (not (string? dO2700@msg)) (assertion-violation 'syntax-violation '"message is not a string" dO2700@msg) (void)) ((lambda (dO2707@who) (raise (condition (if dO2707@who (dO2b6f@dO296a@make-who-condition dO2707@who) (condition)) (dO2b33@dO28cb@make-message-condition dO2700@msg) dO2702@condition-object (dOe34@extract-position-condition dO2701@form)))) (if (or (string? dO26ff@who) (symbol? dO26ff@who)) dO26ff@who (if (not dO26ff@who) ((lambda (dO2709@t) ((lambda (dO270b@ls/false) (if (and dO270b@ls/false (apply (lambda (dO270d@id) (dOb59@id? dO270d@id)) dO270b@ls/false)) (apply (lambda (dO270f@id) (dOe44@syntax->datum dO270f@id)) dO270b@ls/false) ((lambda (dO2711@t) ((lambda (dO2713@ls/false) (if (and dO2713@ls/false (apply (lambda (dO2715@id dO2716@rest) (dOb59@id? dO2715@id)) dO2713@ls/false)) (apply (lambda (dO2719@id dO271a@rest) (dOe44@syntax->datum dO2719@id)) dO2713@ls/false) ((lambda (dO271d@t) ((lambda (dO271f@ls/false) (if dO271f@ls/false (apply (lambda () '#f) dO271f@ls/false) (dOe3e@syntax-violation '#f '"invalid syntax" dO271d@t))) (dOd5e@syntax-dispatch dO271d@t '_))) dO2711@t))) (dOd5e@syntax-dispatch dO2711@t '(any . any)))) dO2709@t))) (dOd5e@syntax-dispatch dO2709@t 'any))) dO2701@form) (assertion-violation 'syntax-violation '"invalid who argument" dO26ff@who))))))) (set! dOe3e@syntax-violation (lambda dO272f ((lambda (dO2730) (if (= dO2730 '3) (apply (lambda (dO2721@who dO2722@msg dO2723@form) (dOe3e@syntax-violation dO2721@who dO2722@msg dO2723@form '#f)) dO272f) (if (= dO2730 '4) (apply (lambda (dO2727@who dO2728@msg dO2729@form dO272a@subform) (dOe3c@syntax-violation* dO2727@who dO2728@msg dO2729@form (dO2b91@dO29c6@make-syntax-violation (dOe44@syntax->datum dO2729@form) (dOe44@syntax->datum dO272a@subform)))) dO272f) (error 'apply '"invalid arg count")))) (length dO272f)))) (set! dOe40@identifier? (lambda (dO2731@x) (dOb59@id? dO2731@x))) (set! dOe42@datum->syntax (lambda (dO2733@id dO2734@datum) (if (dOb59@id? dO2733@id) (dOb39@datum->stx dO2733@id dO2734@datum) (assertion-violation 'datum->syntax '"not an identifier" dO2733@id)))) (set! dOe44@syntax->datum (lambda (dO2737@x) (dOb6d@stx->datum dO2737@x))) (set! dOe46@compile-r6rs-top-level (lambda (dO2739@x*) (call-with-values (lambda () (dOdd6@top-level-expander dO2739@x*)) (lambda (dO273f@dO273c dO2740@dO273e) ((lambda (dO2743@invoke-code dO2744@lib*) (lambda () (begin (for-each dO984@dO7d2@invoke-library dO2744@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (dO70e@dO6c6@expanded->core dO2743@invoke-code)) (void)) (eval-core (dO70e@dO6c6@expanded->core dO2743@invoke-code))))) dO2740@dO273e dO273f@dO273c))))) (set! dOe48@pre-compile-r6rs-top-level (lambda (dO2747@x*) (call-with-values (lambda () (dOdd6@top-level-expander dO2747@x*)) (lambda (dO274d@dO274a dO274e@dO274c) ((lambda (dO2751@invoke-code dO2752@lib*) (begin (for-each dO984@dO7d2@invoke-library dO2752@lib*) (dO6b6@dO593@compile-core (dO70e@dO6c6@expanded->core dO2751@invoke-code)))) dO274e@dO274c dO274d@dO274a))))) (set! dOe4a@interaction-environment ((lambda (dO2755@the-env) (lambda () (or dO2755@the-env ((lambda (dO2757@lib dO2758@rib) (begin ((lambda (dO275b@subst) (begin (dOaf9@set-rib-sym*! dO2758@rib (map car dO275b@subst)) (dOafd@set-rib-mark**! dO2758@rib (map (lambda (dO275d@x) dOadd@top-mark*) dO275b@subst)) (dOb01@set-rib-label*! dO2758@rib (map cdr dO275b@subst)))) (dO95f@dO788@library-subst dO2757@lib)) ((lambda (dO275f@env) (begin (set! dO2755@the-env dO275f@env) dO275f@env)) (make-simple-struct 'interaction-env '4 (list dO2758@rib '() '()))))) (dO97d@dO7c4@find-library-by-name '(mosh interaction)) (dOb0d@make-empty-rib))))) '#f)) (set! dOe4c@top-level-context (dO6b8@dO597@make-parameter '#f)) (begin (set! dO285a@dOe4c@top-level-context dOe4c@top-level-context) (set! dO2859@dOe4a@interaction-environment dOe4a@interaction-environment) (set! dO2858@dOe48@pre-compile-r6rs-top-level dOe48@pre-compile-r6rs-top-level) (set! dO2857@dOe46@compile-r6rs-top-level dOe46@compile-r6rs-top-level) (set! dO2856@dOe44@syntax->datum dOe44@syntax->datum) (set! dO2855@dOe42@datum->syntax dOe42@datum->syntax) (set! dO2854@dOe40@identifier? dOe40@identifier?) (set! dO2853@dOe3e@syntax-violation dOe3e@syntax-violation) (set! dO2852@dOe3c@syntax-violation* dOe3c@syntax-violation*) (set! dO2851@dOe3a@syntax-error dOe3a@syntax-error) (set! dO2850@dOe38@assertion-error dOe38@assertion-error) (set! dO284f@dOe36@expression-position dOe36@expression-position) (set! dO284e@dOe34@extract-position-condition dOe34@extract-position-condition) (set! dO284d@dOe32@make-source-condition dOe32@make-source-condition) (set! dO284c@dOe30@bound-identifier=? dOe30@bound-identifier=?) (set! dO284b@dOe2e@free-identifier=? dOe2e@free-identifier=?) (set! dO284a@dOe2c@generate-temporaries dOe2c@generate-temporaries) (set! dO2849@dOe2a@make-export-env/macros dOe2a@make-export-env/macros) (set! dO2848@dOe28@make-export-subst dOe28@make-export-subst) (set! dO2847@dOe26@build-exports dOe26@build-exports) (set! dO2846@dOe24@rev-map-append dOe24@rev-map-append) (set! dO2845@dOe22@boot-library-expand dOe22@boot-library-expand) (set! dO2844@dOe20@library-expander dOe20@library-expander) (set! dO2843@dOe1e@eval dOe1e@eval) (set! dO2842@dOe1c@expand dOe1c@expand) (set! dO2841@dOe1a@scheme-report-environment dOe1a@scheme-report-environment) (set! dO2840@dOe18@null-environment dOe18@null-environment) (set! dO283f@dOe16@environment dOe16@environment) (set! dO283e@dOe14@environment-symbols dOe14@environment-symbols) (set! dO283d@dOe12@environment? dOe12@environment?) (set! dO283c@dOe10@parse-binding dOe10@parse-binding) (set! dO283b@dOe0e@environment-bindings dOe0e@environment-bindings) (set! dO283a@dOe0c@interaction-environment-symbols dOe0c@interaction-environment-symbols) (set! dO2839@dOe0a@dummy dOe0a@dummy) (set! dO2838@dOe08@set-interaction-env-locs! dOe08@set-interaction-env-locs!) (set! dO2837@dOe06@interaction-env-locs dOe06@interaction-env-locs) (set! dO2836@dOe04@set-interaction-env-r! dOe04@set-interaction-env-r!) (set! dO2835@dOe02@interaction-env-r dOe02@interaction-env-r) (set! dO2834@dOe00@set-interaction-env-rib! dOe00@set-interaction-env-rib!) (set! dO2833@dOdfe@interaction-env-rib dOdfe@interaction-env-rib) (set! dO2832@dOdfc@interaction-env? dOdfc@interaction-env?) (set! dO2831@dOdf2@rp dOdf2@rp) (set! dO2830@dOdf0@dummy dOdf0@dummy) (set! dO282f@dOdee@set-env-itc! dOdee@set-env-itc!) (set! dO282e@dOdec@env-itc dOdec@env-itc) (set! dO282d@dOdea@set-env-labels! dOdea@set-env-labels!) (set! dO282c@dOde8@env-labels dOde8@env-labels) (set! dO282b@dOde6@set-env-names! dOde6@set-env-names!) (set! dO282a@dOde4@env-names dOde4@env-names) (set! dO2829@dOde2@env? dOde2@env?) (set! dO2828@dOdd8@rp dOdd8@rp) (set! dO2827@dOdd6@top-level-expander dOdd6@top-level-expander) (set! dO2826@dOdd4@parse-top-level-program dOdd4@parse-top-level-program) (set! dO2825@dOdd2@core-library-expander dOdd2@core-library-expander) (set! dO2824@dOdd0@library-body-expander dOdd0@library-body-expander) (set! dO2823@dOdce@chi-interaction-expr dOdce@chi-interaction-expr) (set! dO2822@dOdcc@chi-library-internal dOdcc@chi-library-internal) (set! dO2821@dOdca@imp-collector dOdca@imp-collector) (set! dO2820@dOdc8@vis-collector dOdc8@vis-collector) (set! dO281f@dOdc6@inv-collector dOdc6@inv-collector) (set! dO281e@dOdc4@make-collector dOdc4@make-collector) (set! dO281d@dOdc2@make-top-rib dOdc2@make-top-rib) (set! dO281c@dOdc0@parse-import-spec* dOdc0@parse-import-spec*) (set! dO281b@dOdbe@parse-library dOdbe@parse-library) (set! dO281a@dOdbc@parse-library-name dOdbc@parse-library-name) (set! dO2819@dOdba@parse-exports dOdba@parse-exports) (set! dO2818@dOdb8@expand-transformer dOdb8@expand-transformer) (set! dO2817@dOdb6@chi-body* dOdb6@chi-body*) (set! dO2816@dOdb4@chi-internal-module dOdb4@chi-internal-module) (set! dO2815@dOdb2@module-interface-exp-id* dOdb2@module-interface-exp-id*) (set! dO2814@dOdb0@dummy dOdb0@dummy) (set! dO2813@dOdae@set-module-interface-exp-lab-vec! dOdae@set-module-interface-exp-lab-vec!) (set! dO2812@dOdac@module-interface-exp-lab-vec dOdac@module-interface-exp-lab-vec) (set! dO2811@dOdaa@set-module-interface-exp-id-vec! dOdaa@set-module-interface-exp-id-vec!) (set! dO2810@dOda8@module-interface-exp-id-vec dOda8@module-interface-exp-id-vec) (set! dO280f@dOda6@set-module-interface-first-mark! dOda6@set-module-interface-first-mark!) (set! dO280e@dOda4@module-interface-first-mark dOda4@module-interface-first-mark) (set! dO280d@dOda2@module-interface? dOda2@module-interface?) (set! dO280c@dOd98@parse-module dOd98@parse-module) (set! dO280b@dOd96@chi-internal dOd96@chi-internal) (set! dO280a@dOd94@find-dups dOd94@find-dups) (set! dO2809@dOd92@find-bound=? dOd92@find-bound=?) (set! dO2808@dOd90@chi-rhs* dOd90@chi-rhs*) (set! dO2807@dOd8e@expand-interaction-rhs*/init* dOd8e@expand-interaction-rhs*/init*) (set! dO2806@dOd8c@chi-rhs dOd8c@chi-rhs) (set! dO2805@dOd8a@chi-defun dOd8a@chi-defun) (set! dO2804@dOd88@chi-lambda-clause* dOd88@chi-lambda-clause*) (set! dO2803@dOd86@chi-lambda-clause dOd86@chi-lambda-clause) (set! dO2802@dOd84@verify-formals dOd84@verify-formals) (set! dO2801@dOd82@chi-set! dOd82@chi-set!) (set! dO2800@dOd80@chi-expr dOd80@chi-expr) (set! dO27ff@dOd7e@chi-application dOd7e@chi-application) (set! dO27fe@dOd7c@chi-expr* dOd7c@chi-expr*) (set! dO27fd@dOd7a@chi-global-macro dOd7a@chi-global-macro) (set! dO27fc@dOd78@chi-local-macro dOd78@chi-local-macro) (set! dO27fb@dOd76@chi-macro dOd76@chi-macro) (set! dO27fa@dOd74@do-macro-call dOd74@do-macro-call) (set! dO27f9@dOd72@local-macro-transformer dOd72@local-macro-transformer) (set! dO27f8@dOd70@macro-transformer dOd70@macro-transformer) (set! dO27f7@dOd6e@symbol-macro dOd6e@symbol-macro) (set! dO27f6@dOd6c@core-macro-transformer dOd6c@core-macro-transformer) (set! dO27f5@dOd6a@syntax-transformer dOd6a@syntax-transformer) (set! dO27f4@dOd68@ellipsis-map dOd68@ellipsis-map) (set! dO27f3@dOd66@syntax-case-transformer dOd66@syntax-case-transformer) (set! dO27f2@dOd64@verify-literals dOd64@verify-literals) (set! dO27f1@dOd62@underscore? dOd62@underscore?) (set! dO27f0@dOd60@ellipsis? dOd60@ellipsis?) (set! dO27ef@dOd5e@syntax-dispatch dOd5e@syntax-dispatch) (set! dO27ee@dOd5c@convert-pattern dOd5c@convert-pattern) (set! dO27ed@dOd5a@foreign-call-transformer dOd5a@foreign-call-transformer) (set! dO27ec@dOd58@parameterize-macro dOd58@parameterize-macro) (set! dO27eb@dOd56@incorrect-usage-macro dOd56@incorrect-usage-macro) (set! dO27ea@dOd54@define-condition-type-macro dOd54@define-condition-type-macro) (set! dO27e9@dOd52@define-record-type-macro dOd52@define-record-type-macro) (set! dO27e8@dOd50@define-struct-macro dOd50@define-struct-macro) (set! dO27e7@dOd4e@quasisyntax-macro dOd4e@quasisyntax-macro) (set! dO27e6@dOd4c@quasiquote-macro dOd4c@quasiquote-macro) (set! dO27e5@dOd4a@syntax-rules-macro dOd4a@syntax-rules-macro) (set! dO27e4@dOd48@include-into-macro dOd48@include-into-macro) (set! dO27e3@dOd46@include-macro dOd46@include-macro) (set! dO27e2@dOd44@do-include dOd44@do-include) (set! dO27e1@dOd42@cond-macro dOd42@cond-macro) (set! dO27e0@dOd40@and-macro dOd40@and-macro) (set! dO27df@dOd3e@or-macro dOd3e@or-macro) (set! dO27de@dOd3c@let*-macro dOd3c@let*-macro) (set! dO27dd@dOd3a@do-macro dOd3a@do-macro) (set! dO27dc@dOd38@identifier-syntax-macro dOd38@identifier-syntax-macro) (set! dO27db@dOd36@endianness-macro dOd36@endianness-macro) (set! dO27da@dOd34@assert-macro dOd34@assert-macro) (set! dO27d9@dOd32@delay-macro dOd32@delay-macro) (set! dO27d8@dOd30@time-macro dOd30@time-macro) (set! dO27d7@dOd2e@define-enumeration-macro dOd2e@define-enumeration-macro) (set! dO27d6@dOd2c@guard-macro dOd2c@guard-macro) (set! dO27d5@dOd2a@trace-letrec-syntax-macro dOd2a@trace-letrec-syntax-macro) (set! dO27d4@dOd28@trace-let-syntax-macro dOd28@trace-let-syntax-macro) (set! dO27d3@dOd26@trace-let/rec-syntax dOd26@trace-let/rec-syntax) (set! dO27d2@dOd24@trace-define-syntax-macro dOd24@trace-define-syntax-macro) (set! dO27d1@dOd22@trace-define-macro dOd22@trace-define-macro) (set! dO27d0@dOd20@trace-lambda-macro dOd20@trace-lambda-macro) (set! dO27cf@dOd1e@let*-values-macro dOd1e@let*-values-macro) (set! dO27ce@dOd1c@let-values-macro dOd1c@let-values-macro) (set! dO27cd@dOd1a@let-macro dOd1a@let-macro) (set! dO27cc@dOd18@invalid-fmls-error dOd18@invalid-fmls-error) (set! dO27cb@dOd16@with-syntax-macro dOd16@with-syntax-macro) (set! dO27ca@dOd14@bless dOd14@bless) (set! dO27c9@dOd12@lambda-transformer dOd12@lambda-transformer) (set! dO27c8@dOd10@case-lambda-transformer dOd10@case-lambda-transformer) (set! dO27c7@dOd0e@quote-transformer dOd0e@quote-transformer) (set! dO27c6@dOd0c@case-macro dOd0c@case-macro) (set! dO27c5@dOd0a@or-transformer dOd0a@or-transformer) (set! dO27c4@dOd08@and-transformer dOd08@and-transformer) (set! dO27c3@dOd06@if-transformer dOd06@if-transformer) (set! dO27c2@dOd04@unless-macro dOd04@unless-macro) (set! dO27c1@dOd02@when-macro dOd02@when-macro) (set! dO27c0@dOd00@record-constructor-descriptor-transformer dOd00@record-constructor-descriptor-transformer) (set! dO27bf@dOcfe@record-type-descriptor-transformer dOcfe@record-type-descriptor-transformer) (set! dO27be@dOcfc@type-descriptor-transformer dOcfc@type-descriptor-transformer) (set! dO27bd@dOcfa@fluid-let-syntax-transformer dOcfa@fluid-let-syntax-transformer) (set! dO27bc@dOcf8@letrec*-transformer dOcf8@letrec*-transformer) (set! dO27bb@dOcf6@letrec-transformer dOcf6@letrec-transformer) (set! dO27ba@dOcf4@letrec-helper dOcf4@letrec-helper) (set! dO27b9@dOcf2@add-lexicals dOcf2@add-lexicals) (set! dO27b8@dOcf0@add-lexical dOcf0@add-lexical) (set! dO27b7@dOcee@set-lexical-mutable! dOcee@set-lexical-mutable!) (set! dO27b6@dOcec@lexical-mutable? dOcec@lexical-mutable?) (set! dO27b5@dOcea@lexical-var dOcea@lexical-var) (set! dO27b4@dOce8@scheme-stx dOce8@scheme-stx) (set! dO27b3@dOce6@scheme-stx-hashtable dOce6@scheme-stx-hashtable) (set! dO27b2@dOce4@parse-define-syntax dOce4@parse-define-syntax) (set! dO27b1@dOce2@parse-define dOce2@parse-define) (set! dO27b0@dOb91@make-eval-transformer dOb91@make-eval-transformer) (set! dO27af@dOb8f@variable-transformer-procedure dOb8f@variable-transformer-procedure) (set! dO27ae@dOb8d@variable-transformer? dOb8d@variable-transformer?) (set! dO27ad@dOb8b@make-variable-transformer dOb8b@make-variable-transformer) (set! dO27ac@dOb89@sanitize-binding dOb89@sanitize-binding) (set! dO27ab@dOb7b@syntax-type dOb7b@syntax-type) (set! dO27aa@dOb79@raise-unbound-error dOb79@raise-unbound-error) (set! dO27a9@dOb77@binding-value dOb77@binding-value) (set! dO27a8@dOb75@binding-type dOb75@binding-type) (set! dO27a7@dOb73@make-binding dOb73@make-binding) (set! dO27a6@dOb71@label->binding dOb71@label->binding) (set! dO27a5@dOb6f@id->label dOb6f@id->label) (set! dO27a4@dOb6d@stx->datum dOb6d@stx->datum) (set! dO27a3@dOb6b@strip dOb6b@strip) (set! dO27a2@dOb69@strip-annotations dOb69@strip-annotations) (set! dO27a1@dOb67@self-evaluating? dOb67@self-evaluating?) (set! dO27a0@dOb65@bound-id-member? dOb65@bound-id-member?) (set! dO279f@dOb63@distinct-bound-ids? dOb63@distinct-bound-ids?) (set! dO279e@dOb61@valid-bound-ids? dOb61@valid-bound-ids?) (set! dO279d@dOb5f@free-id=? dOb5f@free-id=?) (set! dO279c@dOb5d@bound-id=? dOb5d@bound-id=?) (set! dO279b@dOb5b@id->sym dOb5b@id->sym) (set! dO279a@dOb59@id? dOb59@id?) (set! dO2799@dOb57@syntax->list dOb57@syntax->list) (set! dO2798@dOb55@syntax-cdr dOb55@syntax-cdr) (set! dO2797@dOb53@syntax-car dOb53@syntax-car) (set! dO2796@dOb51@syntax-list? dOb51@syntax-list?) (set! dO2795@dOb4f@syntax-null? dOb4f@syntax-null?) (set! dO2794@dOb4d@syntax-vector? dOb4d@syntax-vector?) (set! dO2793@dOb4b@syntax-pair? dOb4b@syntax-pair?) (set! dO2792@dOb49@syntax-vector->list dOb49@syntax-vector->list) (set! dO2791@dOb47@syntax-kind? dOb47@syntax-kind?) (set! dO2790@dOb45@add-subst dOb45@add-subst) (set! dO278f@dOb43@add-mark dOb43@add-mark) (set! dO278e@dOb41@mkstx dOb41@mkstx) (set! dO278d@dOb3f@anti-mark? dOb3f@anti-mark?) (set! dO278c@dOb3d@anti-mark dOb3d@anti-mark) (set! dO278b@dOb3b@gen-mark dOb3b@gen-mark) (set! dO278a@dOb39@datum->stx dOb39@datum->stx) (set! dO2789@dOb37@dummy dOb37@dummy) (set! dO2788@dOb35@set-stx-ae*! dOb35@set-stx-ae*!) (set! dO2787@dOb33@stx-ae* dOb33@stx-ae*) (set! dO2786@dOb31@set-stx-subst*! dOb31@set-stx-subst*!) (set! dO2785@dOb2f@stx-subst* dOb2f@stx-subst*) (set! dO2784@dOb2d@set-stx-mark*! dOb2d@set-stx-mark*!) (set! dO2783@dOb2b@stx-mark* dOb2b@stx-mark*) (set! dO2782@dOb29@set-stx-expr! dOb29@set-stx-expr!) (set! dO2781@dOb27@stx-expr dOb27@stx-expr) (set! dO2780@dOb25@stx? dOb25@stx?) (set! dO277f@dOb1b@rp dOb1b@rp) (set! dO277e@dOb19@make-full-rib dOb19@make-full-rib) (set! dO277d@dOb17@unseal-rib! dOb17@unseal-rib!) (set! dO277c@dOb15@seal-rib! dOb15@seal-rib!) (set! dO277b@dOb13@make-rib-map dOb13@make-rib-map) (set! dO277a@dOb11@extend-rib/nc! dOb11@extend-rib/nc!) (set! dO2779@dOb0f@extend-rib! dOb0f@extend-rib!) (set! dO2778@dOb0d@make-empty-rib dOb0d@make-empty-rib) (set! dO2777@dOb0b@dummy dOb0b@dummy) (set! dO2776@dOb09@set-rib-cache! dOb09@set-rib-cache!) (set! dO2775@dOb07@rib-cache dOb07@rib-cache) (set! dO2774@dOb05@set-rib-sealed/freq! dOb05@set-rib-sealed/freq!) (set! dO2773@dOb03@rib-sealed/freq dOb03@rib-sealed/freq) (set! dO2772@dOb01@set-rib-label*! dOb01@set-rib-label*!) (set! dO2771@dOaff@rib-label* dOaff@rib-label*) (set! dO2770@dOafd@set-rib-mark**! dOafd@set-rib-mark**!) (set! dO276f@dOafb@rib-mark** dOafb@rib-mark**) (set! dO276e@dOaf9@set-rib-sym*! dOaf9@set-rib-sym*!) (set! dO276d@dOaf7@rib-sym* dOaf7@rib-sym*) (set! dO276c@dOaf5@rib? dOaf5@rib?) (set! dO276b@dOaeb@gen-define-label dOaeb@gen-define-label) (set! dO276a@dOae9@gen-define-label+loc dOae9@gen-define-label+loc) (set! dO2769@dOae7@gen-top-level-label dOae7@gen-top-level-label) (set! dO2768@dOae5@gen-label dOae5@gen-label) (set! dO2767@dOae3@gen-global dOae3@gen-global) (set! dO2766@dOae1@gen-lexical dOae1@gen-lexical) (set! dO2765@dOadf@top-marked? dOadf@top-marked?) (set! dO2764@dOadd@top-mark* dOadd@top-mark*) (set! dO2763@dOad8@set-union dOad8@set-union) (set! dO2762@dOad6@set-cons dOad6@set-cons) (set! dO2761@dOad4@file-options-macro dOad4@file-options-macro) (dO97a@dO7be@current-library-expander dOe20@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (dO2869@dO2864 dO286b@dO2866 dO286d@dO2865 dO2870@&condition? dO2872@make-&condition dO2874@&condition-rtd dO2876@&condition-rcd dO28c2@dO28bd dO28c4@dO28bf dO28c6@dO28be dO28c9@p? dO28cb@make-message-condition dO28cd@dO28bc dO28cf@message-condition? dO28d1@condition-message dO28d3@&message-rtd dO28d5@&message-rcd dO28db@dO28d6 dO28dd@dO28d8 dO28df@dO28d7 dO28e2@p? dO28e4@make-warning dO28e6@warning? dO28e8@&warning-rtd dO28ea@&warning-rcd dO28f0@dO28eb dO28f2@dO28ed dO28f4@dO28ec dO28f7@p? dO28f9@make-serious-condition dO28fb@serious-condition? dO28fd@&serious-rtd dO28ff@&serious-rcd dO2905@dO2900 dO2907@dO2902 dO2909@dO2901 dO290c@p? dO290e@make-error dO2910@error? dO2912@&error-rtd dO2914@&error-rcd dO291a@dO2915 dO291c@dO2917 dO291e@dO2916 dO2921@p? dO2923@make-violation dO2925@violation? dO2927@&violation-rtd dO2929@&violation-rcd dO292f@dO292a dO2931@dO292c dO2933@dO292b dO2936@p? dO2938@make-assertion-violation dO293a@assertion-violation? dO293c@&assertion-rtd dO293e@&assertion-rcd dO2946@dO2941 dO2948@dO2943 dO294a@dO2942 dO294d@p? dO294f@make-irritants-condition dO2951@dO2940 dO2953@irritants-condition? dO2955@condition-irritants dO2957@&irritants-rtd dO2959@&irritants-rcd dO2961@dO295c dO2963@dO295e dO2965@dO295d dO2968@p? dO296a@make-who-condition dO296c@dO295b dO296e@who-condition? dO2970@condition-who dO2972@&who-rtd dO2974@&who-rcd dO297a@dO2975 dO297c@dO2977 dO297e@dO2976 dO2981@p? dO2983@make-non-continuable-violation dO2985@non-continuable-violation? dO2987@&non-continuable-rtd dO2989@&non-continuable-rcd dO298f@dO298a dO2991@dO298c dO2993@dO298b dO2996@p? dO2998@make-implementation-restriction-violation dO299a@implementation-restriction-violation? dO299c@&implementation-restriction-rtd dO299e@&implementation-restriction-rcd dO29a4@dO299f dO29a6@dO29a1 dO29a8@dO29a0 dO29ab@p? dO29ad@make-lexical-violation dO29af@lexical-violation? dO29b1@&lexical-rtd dO29b3@&lexical-rcd dO29bd@dO29b8 dO29bf@dO29ba dO29c1@dO29b9 dO29c4@p? dO29c6@make-syntax-violation dO29c8@dO29b5 dO29ca@dO29b7 dO29cc@syntax-violation? dO29ce@syntax-violation-form dO29d0@syntax-violation-subform dO29d2@&syntax-rtd dO29d4@&syntax-rcd dO29da@dO29d5 dO29dc@dO29d7 dO29de@dO29d6 dO29e1@p? dO29e3@make-undefined-violation dO29e5@undefined-violation? dO29e7@&undefined-rtd dO29e9@&undefined-rcd dO29ef@dO29ea dO29f1@dO29ec dO29f3@dO29eb dO29f6@p? dO29f8@make-i/o-error dO29fa@i/o-error? dO29fc@&i/o-rtd dO29fe@&i/o-rcd dO2a04@dO29ff dO2a06@dO2a01 dO2a08@dO2a00 dO2a0b@p? dO2a0d@make-i/o-read-error dO2a0f@i/o-read-error? dO2a11@&i/o-read-rtd dO2a13@&i/o-read-rcd dO2a19@dO2a14 dO2a1b@dO2a16 dO2a1d@dO2a15 dO2a20@p? dO2a22@make-i/o-write-error dO2a24@i/o-write-error? dO2a26@&i/o-write-rtd dO2a28@&i/o-write-rcd dO2a30@dO2a2b dO2a32@dO2a2d dO2a34@dO2a2c dO2a37@p? dO2a39@make-i/o-invalid-position-error dO2a3b@dO2a2a dO2a3d@i/o-invalid-position-error? dO2a3f@i/o-error-position dO2a41@&i/o-invalid-position-rtd dO2a43@&i/o-invalid-position-rcd dO2a4b@dO2a46 dO2a4d@dO2a48 dO2a4f@dO2a47 dO2a52@p? dO2a54@make-i/o-filename-error dO2a56@dO2a45 dO2a58@i/o-filename-error? dO2a5a@i/o-error-filename dO2a5c@&i/o-filename-rtd dO2a5e@&i/o-filename-rcd dO2a64@dO2a5f dO2a66@dO2a61 dO2a68@dO2a60 dO2a6b@p? dO2a6d@make-i/o-file-protection-error dO2a6f@i/o-file-protection-error? dO2a71@&i/o-file-protection-rtd dO2a73@&i/o-file-protection-rcd dO2a79@dO2a74 dO2a7b@dO2a76 dO2a7d@dO2a75 dO2a80@p? dO2a82@make-i/o-file-is-read-only-error dO2a84@i/o-file-is-read-only-error? dO2a86@&i/o-file-is-read-only-rtd dO2a88@&i/o-file-is-read-only-rcd dO2a8e@dO2a89 dO2a90@dO2a8b dO2a92@dO2a8a dO2a95@p? dO2a97@make-i/o-file-already-exists-error dO2a99@i/o-file-already-exists-error? dO2a9b@&i/o-file-already-exists-rtd dO2a9d@&i/o-file-already-exists-rcd dO2aa3@dO2a9e dO2aa5@dO2aa0 dO2aa7@dO2a9f dO2aaa@p? dO2aac@make-i/o-file-does-not-exist-error dO2aae@i/o-file-does-not-exist-error? dO2ab0@&i/o-file-does-not-exist-rtd dO2ab2@&i/o-file-does-not-exist-rcd dO2aba@dO2ab5 dO2abc@dO2ab7 dO2abe@dO2ab6 dO2ac1@p? dO2ac3@make-i/o-port-error dO2ac5@dO2ab4 dO2ac7@i/o-port-error? dO2ac9@i/o-error-port dO2acb@&i/o-port-rtd dO2acd@&i/o-port-rcd dO2ad3@dO2ace dO2ad5@dO2ad0 dO2ad7@dO2acf dO2ada@p? dO2adc@make-i/o-decoding-error dO2ade@i/o-decoding-error? dO2ae0@&i/o-decoding-rtd dO2ae2@&i/o-decoding-rcd dO2aea@dO2ae5 dO2aec@dO2ae7 dO2aee@dO2ae6 dO2af1@p? dO2af3@make-i/o-encoding-error dO2af5@dO2ae4 dO2af7@i/o-encoding-error? dO2af9@i/o-encoding-error-char dO2afb@&i/o-encoding-rtd dO2afd@&i/o-encoding-rcd dO2b03@dO2afe dO2b05@dO2b00 dO2b07@dO2aff dO2b0a@p? dO2b0c@make-no-infinities-violation dO2b0e@no-infinities-violation? dO2b10@&no-infinities-rtd dO2b12@&no-infinities-rcd dO2b18@dO2b13 dO2b1a@dO2b15 dO2b1c@dO2b14 dO2b1f@p? dO2b21@make-no-nans-violation dO2b23@no-nans-violation? dO2b25@&no-nans-rtd dO2b27@&no-nans-rcd) (begin (set! dO2869@dO2864 (make-record-type-descriptor '&condition '#f 'dO2867 '#f '#f '#())) (set! dO286b@dO2866 '#f) (set! dO286d@dO2865 (make-record-constructor-descriptor dO2869@dO2864 '#f dO286b@dO2866)) (set! dO2870@&condition? (record-predicate dO2869@dO2864)) (set! dO2872@make-&condition (record-constructor dO286d@dO2865)) (set! dO2874@&condition-rtd dO2869@dO2864) (set! dO2876@&condition-rcd dO286d@dO2865) (set! dO28c2@dO28bd (make-record-type-descriptor '&message dO2869@dO2864 'dO28c0 '#f '#f '#((immutable message)))) (set! dO28c4@dO28bf '#f) (set! dO28c6@dO28be (make-record-constructor-descriptor dO28c2@dO28bd dO286d@dO2865 dO28c4@dO28bf)) (set! dO28c9@p? (record-predicate dO28c2@dO28bd)) (set! dO28cb@make-message-condition (record-constructor dO28c6@dO28be)) (set! dO28cd@dO28bc (record-accessor dO28c2@dO28bd '0)) (set! dO28cf@message-condition? (condition-predicate dO28c2@dO28bd)) (set! dO28d1@condition-message (condition-accessor dO28c2@dO28bd dO28cd@dO28bc)) (set! dO28d3@&message-rtd dO28c2@dO28bd) (set! dO28d5@&message-rcd dO28c6@dO28be) (set! dO28db@dO28d6 (make-record-type-descriptor '&warning dO2869@dO2864 'dO28d9 '#f '#f '#())) (set! dO28dd@dO28d8 '#f) (set! dO28df@dO28d7 (make-record-constructor-descriptor dO28db@dO28d6 dO286d@dO2865 dO28dd@dO28d8)) (set! dO28e2@p? (record-predicate dO28db@dO28d6)) (set! dO28e4@make-warning (record-constructor dO28df@dO28d7)) (set! dO28e6@warning? (condition-predicate dO28db@dO28d6)) (set! dO28e8@&warning-rtd dO28db@dO28d6) (set! dO28ea@&warning-rcd dO28df@dO28d7) (set! dO28f0@dO28eb (make-record-type-descriptor '&serious dO2869@dO2864 'dO28ee '#f '#f '#())) (set! dO28f2@dO28ed '#f) (set! dO28f4@dO28ec (make-record-constructor-descriptor dO28f0@dO28eb dO286d@dO2865 dO28f2@dO28ed)) (set! dO28f7@p? (record-predicate dO28f0@dO28eb)) (set! dO28f9@make-serious-condition (record-constructor dO28f4@dO28ec)) (set! dO28fb@serious-condition? (condition-predicate dO28f0@dO28eb)) (set! dO28fd@&serious-rtd dO28f0@dO28eb) (set! dO28ff@&serious-rcd dO28f4@dO28ec) (set! dO2905@dO2900 (make-record-type-descriptor '&error dO28f0@dO28eb 'dO2903 '#f '#f '#())) (set! dO2907@dO2902 '#f) (set! dO2909@dO2901 (make-record-constructor-descriptor dO2905@dO2900 dO28f4@dO28ec dO2907@dO2902)) (set! dO290c@p? (record-predicate dO2905@dO2900)) (set! dO290e@make-error (record-constructor dO2909@dO2901)) (set! dO2910@error? (condition-predicate dO2905@dO2900)) (set! dO2912@&error-rtd dO2905@dO2900) (set! dO2914@&error-rcd dO2909@dO2901) (set! dO291a@dO2915 (make-record-type-descriptor '&violation dO28f0@dO28eb 'dO2918 '#f '#f '#())) (set! dO291c@dO2917 '#f) (set! dO291e@dO2916 (make-record-constructor-descriptor dO291a@dO2915 dO28f4@dO28ec dO291c@dO2917)) (set! dO2921@p? (record-predicate dO291a@dO2915)) (set! dO2923@make-violation (record-constructor dO291e@dO2916)) (set! dO2925@violation? (condition-predicate dO291a@dO2915)) (set! dO2927@&violation-rtd dO291a@dO2915) (set! dO2929@&violation-rcd dO291e@dO2916) (set! dO292f@dO292a (make-record-type-descriptor '&assertion dO291a@dO2915 'dO292d '#f '#f '#())) (set! dO2931@dO292c '#f) (set! dO2933@dO292b (make-record-constructor-descriptor dO292f@dO292a dO291e@dO2916 dO2931@dO292c)) (set! dO2936@p? (record-predicate dO292f@dO292a)) (set! dO2938@make-assertion-violation (record-constructor dO2933@dO292b)) (set! dO293a@assertion-violation? (condition-predicate dO292f@dO292a)) (set! dO293c@&assertion-rtd dO292f@dO292a) (set! dO293e@&assertion-rcd dO2933@dO292b) (set! dO2946@dO2941 (make-record-type-descriptor '&irritants dO2869@dO2864 'dO2944 '#f '#f '#((immutable irritants)))) (set! dO2948@dO2943 '#f) (set! dO294a@dO2942 (make-record-constructor-descriptor dO2946@dO2941 dO286d@dO2865 dO2948@dO2943)) (set! dO294d@p? (record-predicate dO2946@dO2941)) (set! dO294f@make-irritants-condition (record-constructor dO294a@dO2942)) (set! dO2951@dO2940 (record-accessor dO2946@dO2941 '0)) (set! dO2953@irritants-condition? (condition-predicate dO2946@dO2941)) (set! dO2955@condition-irritants (condition-accessor dO2946@dO2941 dO2951@dO2940)) (set! dO2957@&irritants-rtd dO2946@dO2941) (set! dO2959@&irritants-rcd dO294a@dO2942) (set! dO2961@dO295c (make-record-type-descriptor '&who dO2869@dO2864 'dO295f '#f '#f '#((immutable who)))) (set! dO2963@dO295e '#f) (set! dO2965@dO295d (make-record-constructor-descriptor dO2961@dO295c dO286d@dO2865 dO2963@dO295e)) (set! dO2968@p? (record-predicate dO2961@dO295c)) (set! dO296a@make-who-condition (record-constructor dO2965@dO295d)) (set! dO296c@dO295b (record-accessor dO2961@dO295c '0)) (set! dO296e@who-condition? (condition-predicate dO2961@dO295c)) (set! dO2970@condition-who (condition-accessor dO2961@dO295c dO296c@dO295b)) (set! dO2972@&who-rtd dO2961@dO295c) (set! dO2974@&who-rcd dO2965@dO295d) (set! dO297a@dO2975 (make-record-type-descriptor '&non-continuable dO291a@dO2915 'dO2978 '#f '#f '#())) (set! dO297c@dO2977 '#f) (set! dO297e@dO2976 (make-record-constructor-descriptor dO297a@dO2975 dO291e@dO2916 dO297c@dO2977)) (set! dO2981@p? (record-predicate dO297a@dO2975)) (set! dO2983@make-non-continuable-violation (record-constructor dO297e@dO2976)) (set! dO2985@non-continuable-violation? (condition-predicate dO297a@dO2975)) (set! dO2987@&non-continuable-rtd dO297a@dO2975) (set! dO2989@&non-continuable-rcd dO297e@dO2976) (set! dO298f@dO298a (make-record-type-descriptor '&implementation-restriction dO291a@dO2915 'dO298d '#f '#f '#())) (set! dO2991@dO298c '#f) (set! dO2993@dO298b (make-record-constructor-descriptor dO298f@dO298a dO291e@dO2916 dO2991@dO298c)) (set! dO2996@p? (record-predicate dO298f@dO298a)) (set! dO2998@make-implementation-restriction-violation (record-constructor dO2993@dO298b)) (set! dO299a@implementation-restriction-violation? (condition-predicate dO298f@dO298a)) (set! dO299c@&implementation-restriction-rtd dO298f@dO298a) (set! dO299e@&implementation-restriction-rcd dO2993@dO298b) (set! dO29a4@dO299f (make-record-type-descriptor '&lexical dO291a@dO2915 'dO29a2 '#f '#f '#())) (set! dO29a6@dO29a1 '#f) (set! dO29a8@dO29a0 (make-record-constructor-descriptor dO29a4@dO299f dO291e@dO2916 dO29a6@dO29a1)) (set! dO29ab@p? (record-predicate dO29a4@dO299f)) (set! dO29ad@make-lexical-violation (record-constructor dO29a8@dO29a0)) (set! dO29af@lexical-violation? (condition-predicate dO29a4@dO299f)) (set! dO29b1@&lexical-rtd dO29a4@dO299f) (set! dO29b3@&lexical-rcd dO29a8@dO29a0) (set! dO29bd@dO29b8 (make-record-type-descriptor '&syntax dO291a@dO2915 'dO29bb '#f '#f '#((immutable form) (immutable subform)))) (set! dO29bf@dO29ba '#f) (set! dO29c1@dO29b9 (make-record-constructor-descriptor dO29bd@dO29b8 dO291e@dO2916 dO29bf@dO29ba)) (set! dO29c4@p? (record-predicate dO29bd@dO29b8)) (set! dO29c6@make-syntax-violation (record-constructor dO29c1@dO29b9)) (set! dO29c8@dO29b5 (record-accessor dO29bd@dO29b8 '0)) (set! dO29ca@dO29b7 (record-accessor dO29bd@dO29b8 '1)) (set! dO29cc@syntax-violation? (condition-predicate dO29bd@dO29b8)) (set! dO29ce@syntax-violation-form (condition-accessor dO29bd@dO29b8 dO29c8@dO29b5)) (set! dO29d0@syntax-violation-subform (condition-accessor dO29bd@dO29b8 dO29ca@dO29b7)) (set! dO29d2@&syntax-rtd dO29bd@dO29b8) (set! dO29d4@&syntax-rcd dO29c1@dO29b9) (set! dO29da@dO29d5 (make-record-type-descriptor '&undefined dO291a@dO2915 'dO29d8 '#f '#f '#())) (set! dO29dc@dO29d7 '#f) (set! dO29de@dO29d6 (make-record-constructor-descriptor dO29da@dO29d5 dO291e@dO2916 dO29dc@dO29d7)) (set! dO29e1@p? (record-predicate dO29da@dO29d5)) (set! dO29e3@make-undefined-violation (record-constructor dO29de@dO29d6)) (set! dO29e5@undefined-violation? (condition-predicate dO29da@dO29d5)) (set! dO29e7@&undefined-rtd dO29da@dO29d5) (set! dO29e9@&undefined-rcd dO29de@dO29d6) (set! dO29ef@dO29ea (make-record-type-descriptor '&i/o dO2905@dO2900 'dO29ed '#f '#f '#())) (set! dO29f1@dO29ec '#f) (set! dO29f3@dO29eb (make-record-constructor-descriptor dO29ef@dO29ea dO2909@dO2901 dO29f1@dO29ec)) (set! dO29f6@p? (record-predicate dO29ef@dO29ea)) (set! dO29f8@make-i/o-error (record-constructor dO29f3@dO29eb)) (set! dO29fa@i/o-error? (condition-predicate dO29ef@dO29ea)) (set! dO29fc@&i/o-rtd dO29ef@dO29ea) (set! dO29fe@&i/o-rcd dO29f3@dO29eb) (set! dO2a04@dO29ff (make-record-type-descriptor '&i/o-read dO29ef@dO29ea 'dO2a02 '#f '#f '#())) (set! dO2a06@dO2a01 '#f) (set! dO2a08@dO2a00 (make-record-constructor-descriptor dO2a04@dO29ff dO29f3@dO29eb dO2a06@dO2a01)) (set! dO2a0b@p? (record-predicate dO2a04@dO29ff)) (set! dO2a0d@make-i/o-read-error (record-constructor dO2a08@dO2a00)) (set! dO2a0f@i/o-read-error? (condition-predicate dO2a04@dO29ff)) (set! dO2a11@&i/o-read-rtd dO2a04@dO29ff) (set! dO2a13@&i/o-read-rcd dO2a08@dO2a00) (set! dO2a19@dO2a14 (make-record-type-descriptor '&i/o-write dO29ef@dO29ea 'dO2a17 '#f '#f '#())) (set! dO2a1b@dO2a16 '#f) (set! dO2a1d@dO2a15 (make-record-constructor-descriptor dO2a19@dO2a14 dO29f3@dO29eb dO2a1b@dO2a16)) (set! dO2a20@p? (record-predicate dO2a19@dO2a14)) (set! dO2a22@make-i/o-write-error (record-constructor dO2a1d@dO2a15)) (set! dO2a24@i/o-write-error? (condition-predicate dO2a19@dO2a14)) (set! dO2a26@&i/o-write-rtd dO2a19@dO2a14) (set! dO2a28@&i/o-write-rcd dO2a1d@dO2a15) (set! dO2a30@dO2a2b (make-record-type-descriptor '&i/o-invalid-position dO29ef@dO29ea 'dO2a2e '#f '#f '#((immutable position)))) (set! dO2a32@dO2a2d '#f) (set! dO2a34@dO2a2c (make-record-constructor-descriptor dO2a30@dO2a2b dO29f3@dO29eb dO2a32@dO2a2d)) (set! dO2a37@p? (record-predicate dO2a30@dO2a2b)) (set! dO2a39@make-i/o-invalid-position-error (record-constructor dO2a34@dO2a2c)) (set! dO2a3b@dO2a2a (record-accessor dO2a30@dO2a2b '0)) (set! dO2a3d@i/o-invalid-position-error? (condition-predicate dO2a30@dO2a2b)) (set! dO2a3f@i/o-error-position (condition-accessor dO2a30@dO2a2b dO2a3b@dO2a2a)) (set! dO2a41@&i/o-invalid-position-rtd dO2a30@dO2a2b) (set! dO2a43@&i/o-invalid-position-rcd dO2a34@dO2a2c) (set! dO2a4b@dO2a46 (make-record-type-descriptor '&i/o-filename dO29ef@dO29ea 'dO2a49 '#f '#f '#((immutable filename)))) (set! dO2a4d@dO2a48 '#f) (set! dO2a4f@dO2a47 (make-record-constructor-descriptor dO2a4b@dO2a46 dO29f3@dO29eb dO2a4d@dO2a48)) (set! dO2a52@p? (record-predicate dO2a4b@dO2a46)) (set! dO2a54@make-i/o-filename-error (record-constructor dO2a4f@dO2a47)) (set! dO2a56@dO2a45 (record-accessor dO2a4b@dO2a46 '0)) (set! dO2a58@i/o-filename-error? (condition-predicate dO2a4b@dO2a46)) (set! dO2a5a@i/o-error-filename (condition-accessor dO2a4b@dO2a46 dO2a56@dO2a45)) (set! dO2a5c@&i/o-filename-rtd dO2a4b@dO2a46) (set! dO2a5e@&i/o-filename-rcd dO2a4f@dO2a47) (set! dO2a64@dO2a5f (make-record-type-descriptor '&i/o-file-protection dO2a4b@dO2a46 'dO2a62 '#f '#f '#())) (set! dO2a66@dO2a61 '#f) (set! dO2a68@dO2a60 (make-record-constructor-descriptor dO2a64@dO2a5f dO2a4f@dO2a47 dO2a66@dO2a61)) (set! dO2a6b@p? (record-predicate dO2a64@dO2a5f)) (set! dO2a6d@make-i/o-file-protection-error (record-constructor dO2a68@dO2a60)) (set! dO2a6f@i/o-file-protection-error? (condition-predicate dO2a64@dO2a5f)) (set! dO2a71@&i/o-file-protection-rtd dO2a64@dO2a5f) (set! dO2a73@&i/o-file-protection-rcd dO2a68@dO2a60) (set! dO2a79@dO2a74 (make-record-type-descriptor '&i/o-file-is-read-only dO2a64@dO2a5f 'dO2a77 '#f '#f '#())) (set! dO2a7b@dO2a76 '#f) (set! dO2a7d@dO2a75 (make-record-constructor-descriptor dO2a79@dO2a74 dO2a68@dO2a60 dO2a7b@dO2a76)) (set! dO2a80@p? (record-predicate dO2a79@dO2a74)) (set! dO2a82@make-i/o-file-is-read-only-error (record-constructor dO2a7d@dO2a75)) (set! dO2a84@i/o-file-is-read-only-error? (condition-predicate dO2a79@dO2a74)) (set! dO2a86@&i/o-file-is-read-only-rtd dO2a79@dO2a74) (set! dO2a88@&i/o-file-is-read-only-rcd dO2a7d@dO2a75) (set! dO2a8e@dO2a89 (make-record-type-descriptor '&i/o-file-already-exists dO2a4b@dO2a46 'dO2a8c '#f '#f '#())) (set! dO2a90@dO2a8b '#f) (set! dO2a92@dO2a8a (make-record-constructor-descriptor dO2a8e@dO2a89 dO2a4f@dO2a47 dO2a90@dO2a8b)) (set! dO2a95@p? (record-predicate dO2a8e@dO2a89)) (set! dO2a97@make-i/o-file-already-exists-error (record-constructor dO2a92@dO2a8a)) (set! dO2a99@i/o-file-already-exists-error? (condition-predicate dO2a8e@dO2a89)) (set! dO2a9b@&i/o-file-already-exists-rtd dO2a8e@dO2a89) (set! dO2a9d@&i/o-file-already-exists-rcd dO2a92@dO2a8a) (set! dO2aa3@dO2a9e (make-record-type-descriptor '&i/o-file-does-not-exist dO2a4b@dO2a46 'dO2aa1 '#f '#f '#())) (set! dO2aa5@dO2aa0 '#f) (set! dO2aa7@dO2a9f (make-record-constructor-descriptor dO2aa3@dO2a9e dO2a4f@dO2a47 dO2aa5@dO2aa0)) (set! dO2aaa@p? (record-predicate dO2aa3@dO2a9e)) (set! dO2aac@make-i/o-file-does-not-exist-error (record-constructor dO2aa7@dO2a9f)) (set! dO2aae@i/o-file-does-not-exist-error? (condition-predicate dO2aa3@dO2a9e)) (set! dO2ab0@&i/o-file-does-not-exist-rtd dO2aa3@dO2a9e) (set! dO2ab2@&i/o-file-does-not-exist-rcd dO2aa7@dO2a9f) (set! dO2aba@dO2ab5 (make-record-type-descriptor '&i/o-port dO29ef@dO29ea 'dO2ab8 '#f '#f '#((immutable port)))) (set! dO2abc@dO2ab7 '#f) (set! dO2abe@dO2ab6 (make-record-constructor-descriptor dO2aba@dO2ab5 dO29f3@dO29eb dO2abc@dO2ab7)) (set! dO2ac1@p? (record-predicate dO2aba@dO2ab5)) (set! dO2ac3@make-i/o-port-error (record-constructor dO2abe@dO2ab6)) (set! dO2ac5@dO2ab4 (record-accessor dO2aba@dO2ab5 '0)) (set! dO2ac7@i/o-port-error? (condition-predicate dO2aba@dO2ab5)) (set! dO2ac9@i/o-error-port (condition-accessor dO2aba@dO2ab5 dO2ac5@dO2ab4)) (set! dO2acb@&i/o-port-rtd dO2aba@dO2ab5) (set! dO2acd@&i/o-port-rcd dO2abe@dO2ab6) (set! dO2ad3@dO2ace (make-record-type-descriptor '&i/o-decoding dO2aba@dO2ab5 'dO2ad1 '#f '#f '#())) (set! dO2ad5@dO2ad0 '#f) (set! dO2ad7@dO2acf (make-record-constructor-descriptor dO2ad3@dO2ace dO2abe@dO2ab6 dO2ad5@dO2ad0)) (set! dO2ada@p? (record-predicate dO2ad3@dO2ace)) (set! dO2adc@make-i/o-decoding-error (record-constructor dO2ad7@dO2acf)) (set! dO2ade@i/o-decoding-error? (condition-predicate dO2ad3@dO2ace)) (set! dO2ae0@&i/o-decoding-rtd dO2ad3@dO2ace) (set! dO2ae2@&i/o-decoding-rcd dO2ad7@dO2acf) (set! dO2aea@dO2ae5 (make-record-type-descriptor '&i/o-encoding dO2aba@dO2ab5 'dO2ae8 '#f '#f '#((immutable char)))) (set! dO2aec@dO2ae7 '#f) (set! dO2aee@dO2ae6 (make-record-constructor-descriptor dO2aea@dO2ae5 dO2abe@dO2ab6 dO2aec@dO2ae7)) (set! dO2af1@p? (record-predicate dO2aea@dO2ae5)) (set! dO2af3@make-i/o-encoding-error (record-constructor dO2aee@dO2ae6)) (set! dO2af5@dO2ae4 (record-accessor dO2aea@dO2ae5 '0)) (set! dO2af7@i/o-encoding-error? (condition-predicate dO2aea@dO2ae5)) (set! dO2af9@i/o-encoding-error-char (condition-accessor dO2aea@dO2ae5 dO2af5@dO2ae4)) (set! dO2afb@&i/o-encoding-rtd dO2aea@dO2ae5) (set! dO2afd@&i/o-encoding-rcd dO2aee@dO2ae6) (set! dO2b03@dO2afe (make-record-type-descriptor '&no-infinities dO298f@dO298a 'dO2b01 '#f '#f '#())) (set! dO2b05@dO2b00 '#f) (set! dO2b07@dO2aff (make-record-constructor-descriptor dO2b03@dO2afe dO2993@dO298b dO2b05@dO2b00)) (set! dO2b0a@p? (record-predicate dO2b03@dO2afe)) (set! dO2b0c@make-no-infinities-violation (record-constructor dO2b07@dO2aff)) (set! dO2b0e@no-infinities-violation? (condition-predicate dO2b03@dO2afe)) (set! dO2b10@&no-infinities-rtd dO2b03@dO2afe) (set! dO2b12@&no-infinities-rcd dO2b07@dO2aff) (set! dO2b18@dO2b13 (make-record-type-descriptor '&no-nans dO298f@dO298a 'dO2b16 '#f '#f '#())) (set! dO2b1a@dO2b15 '#f) (set! dO2b1c@dO2b14 (make-record-constructor-descriptor dO2b18@dO2b13 dO2993@dO298b dO2b1a@dO2b15)) (set! dO2b1f@p? (record-predicate dO2b18@dO2b13)) (set! dO2b21@make-no-nans-violation (record-constructor dO2b1c@dO2b14)) (set! dO2b23@no-nans-violation? (condition-predicate dO2b18@dO2b13)) (set! dO2b25@&no-nans-rtd dO2b18@dO2b13) (set! dO2b27@&no-nans-rcd dO2b1c@dO2b14) (begin (set! dO2c18@dO2b27@&no-nans-rcd dO2b27@&no-nans-rcd) (set! dO2c17@dO2b25@&no-nans-rtd dO2b25@&no-nans-rtd) (set! dO2c16@dO2b23@no-nans-violation? dO2b23@no-nans-violation?) (set! dO2c15@dO2b21@make-no-nans-violation dO2b21@make-no-nans-violation) (set! dO2c14@dO2b1f@p? dO2b1f@p?) (set! dO2c13@dO2b1c@dO2b14 dO2b1c@dO2b14) (set! dO2c12@dO2b1a@dO2b15 dO2b1a@dO2b15) (set! dO2c11@dO2b18@dO2b13 dO2b18@dO2b13) (set! dO2c10@dO2b12@&no-infinities-rcd dO2b12@&no-infinities-rcd) (set! dO2c0f@dO2b10@&no-infinities-rtd dO2b10@&no-infinities-rtd) (set! dO2c0e@dO2b0e@no-infinities-violation? dO2b0e@no-infinities-violation?) (set! dO2c0d@dO2b0c@make-no-infinities-violation dO2b0c@make-no-infinities-violation) (set! dO2c0c@dO2b0a@p? dO2b0a@p?) (set! dO2c0b@dO2b07@dO2aff dO2b07@dO2aff) (set! dO2c0a@dO2b05@dO2b00 dO2b05@dO2b00) (set! dO2c09@dO2b03@dO2afe dO2b03@dO2afe) (set! dO2c08@dO2afd@&i/o-encoding-rcd dO2afd@&i/o-encoding-rcd) (set! dO2c07@dO2afb@&i/o-encoding-rtd dO2afb@&i/o-encoding-rtd) (set! dO2c06@dO2af9@i/o-encoding-error-char dO2af9@i/o-encoding-error-char) (set! dO2c05@dO2af7@i/o-encoding-error? dO2af7@i/o-encoding-error?) (set! dO2c04@dO2af5@dO2ae4 dO2af5@dO2ae4) (set! dO2c03@dO2af3@make-i/o-encoding-error dO2af3@make-i/o-encoding-error) (set! dO2c02@dO2af1@p? dO2af1@p?) (set! dO2c01@dO2aee@dO2ae6 dO2aee@dO2ae6) (set! dO2c00@dO2aec@dO2ae7 dO2aec@dO2ae7) (set! dO2bff@dO2aea@dO2ae5 dO2aea@dO2ae5) (set! dO2bfe@dO2ae2@&i/o-decoding-rcd dO2ae2@&i/o-decoding-rcd) (set! dO2bfd@dO2ae0@&i/o-decoding-rtd dO2ae0@&i/o-decoding-rtd) (set! dO2bfc@dO2ade@i/o-decoding-error? dO2ade@i/o-decoding-error?) (set! dO2bfb@dO2adc@make-i/o-decoding-error dO2adc@make-i/o-decoding-error) (set! dO2bfa@dO2ada@p? dO2ada@p?) (set! dO2bf9@dO2ad7@dO2acf dO2ad7@dO2acf) (set! dO2bf8@dO2ad5@dO2ad0 dO2ad5@dO2ad0) (set! dO2bf7@dO2ad3@dO2ace dO2ad3@dO2ace) (set! dO2bf6@dO2acd@&i/o-port-rcd dO2acd@&i/o-port-rcd) (set! dO2bf5@dO2acb@&i/o-port-rtd dO2acb@&i/o-port-rtd) (set! dO2bf4@dO2ac9@i/o-error-port dO2ac9@i/o-error-port) (set! dO2bf3@dO2ac7@i/o-port-error? dO2ac7@i/o-port-error?) (set! dO2bf2@dO2ac5@dO2ab4 dO2ac5@dO2ab4) (set! dO2bf1@dO2ac3@make-i/o-port-error dO2ac3@make-i/o-port-error) (set! dO2bf0@dO2ac1@p? dO2ac1@p?) (set! dO2bef@dO2abe@dO2ab6 dO2abe@dO2ab6) (set! dO2bee@dO2abc@dO2ab7 dO2abc@dO2ab7) (set! dO2bed@dO2aba@dO2ab5 dO2aba@dO2ab5) (set! dO2bec@dO2ab2@&i/o-file-does-not-exist-rcd dO2ab2@&i/o-file-does-not-exist-rcd) (set! dO2beb@dO2ab0@&i/o-file-does-not-exist-rtd dO2ab0@&i/o-file-does-not-exist-rtd) (set! dO2bea@dO2aae@i/o-file-does-not-exist-error? dO2aae@i/o-file-does-not-exist-error?) (set! dO2be9@dO2aac@make-i/o-file-does-not-exist-error dO2aac@make-i/o-file-does-not-exist-error) (set! dO2be8@dO2aaa@p? dO2aaa@p?) (set! dO2be7@dO2aa7@dO2a9f dO2aa7@dO2a9f) (set! dO2be6@dO2aa5@dO2aa0 dO2aa5@dO2aa0) (set! dO2be5@dO2aa3@dO2a9e dO2aa3@dO2a9e) (set! dO2be4@dO2a9d@&i/o-file-already-exists-rcd dO2a9d@&i/o-file-already-exists-rcd) (set! dO2be3@dO2a9b@&i/o-file-already-exists-rtd dO2a9b@&i/o-file-already-exists-rtd) (set! dO2be2@dO2a99@i/o-file-already-exists-error? dO2a99@i/o-file-already-exists-error?) (set! dO2be1@dO2a97@make-i/o-file-already-exists-error dO2a97@make-i/o-file-already-exists-error) (set! dO2be0@dO2a95@p? dO2a95@p?) (set! dO2bdf@dO2a92@dO2a8a dO2a92@dO2a8a) (set! dO2bde@dO2a90@dO2a8b dO2a90@dO2a8b) (set! dO2bdd@dO2a8e@dO2a89 dO2a8e@dO2a89) (set! dO2bdc@dO2a88@&i/o-file-is-read-only-rcd dO2a88@&i/o-file-is-read-only-rcd) (set! dO2bdb@dO2a86@&i/o-file-is-read-only-rtd dO2a86@&i/o-file-is-read-only-rtd) (set! dO2bda@dO2a84@i/o-file-is-read-only-error? dO2a84@i/o-file-is-read-only-error?) (set! dO2bd9@dO2a82@make-i/o-file-is-read-only-error dO2a82@make-i/o-file-is-read-only-error) (set! dO2bd8@dO2a80@p? dO2a80@p?) (set! dO2bd7@dO2a7d@dO2a75 dO2a7d@dO2a75) (set! dO2bd6@dO2a7b@dO2a76 dO2a7b@dO2a76) (set! dO2bd5@dO2a79@dO2a74 dO2a79@dO2a74) (set! dO2bd4@dO2a73@&i/o-file-protection-rcd dO2a73@&i/o-file-protection-rcd) (set! dO2bd3@dO2a71@&i/o-file-protection-rtd dO2a71@&i/o-file-protection-rtd) (set! dO2bd2@dO2a6f@i/o-file-protection-error? dO2a6f@i/o-file-protection-error?) (set! dO2bd1@dO2a6d@make-i/o-file-protection-error dO2a6d@make-i/o-file-protection-error) (set! dO2bd0@dO2a6b@p? dO2a6b@p?) (set! dO2bcf@dO2a68@dO2a60 dO2a68@dO2a60) (set! dO2bce@dO2a66@dO2a61 dO2a66@dO2a61) (set! dO2bcd@dO2a64@dO2a5f dO2a64@dO2a5f) (set! dO2bcc@dO2a5e@&i/o-filename-rcd dO2a5e@&i/o-filename-rcd) (set! dO2bcb@dO2a5c@&i/o-filename-rtd dO2a5c@&i/o-filename-rtd) (set! dO2bca@dO2a5a@i/o-error-filename dO2a5a@i/o-error-filename) (set! dO2bc9@dO2a58@i/o-filename-error? dO2a58@i/o-filename-error?) (set! dO2bc8@dO2a56@dO2a45 dO2a56@dO2a45) (set! dO2bc7@dO2a54@make-i/o-filename-error dO2a54@make-i/o-filename-error) (set! dO2bc6@dO2a52@p? dO2a52@p?) (set! dO2bc5@dO2a4f@dO2a47 dO2a4f@dO2a47) (set! dO2bc4@dO2a4d@dO2a48 dO2a4d@dO2a48) (set! dO2bc3@dO2a4b@dO2a46 dO2a4b@dO2a46) (set! dO2bc2@dO2a43@&i/o-invalid-position-rcd dO2a43@&i/o-invalid-position-rcd) (set! dO2bc1@dO2a41@&i/o-invalid-position-rtd dO2a41@&i/o-invalid-position-rtd) (set! dO2bc0@dO2a3f@i/o-error-position dO2a3f@i/o-error-position) (set! dO2bbf@dO2a3d@i/o-invalid-position-error? dO2a3d@i/o-invalid-position-error?) (set! dO2bbe@dO2a3b@dO2a2a dO2a3b@dO2a2a) (set! dO2bbd@dO2a39@make-i/o-invalid-position-error dO2a39@make-i/o-invalid-position-error) (set! dO2bbc@dO2a37@p? dO2a37@p?) (set! dO2bbb@dO2a34@dO2a2c dO2a34@dO2a2c) (set! dO2bba@dO2a32@dO2a2d dO2a32@dO2a2d) (set! dO2bb9@dO2a30@dO2a2b dO2a30@dO2a2b) (set! dO2bb8@dO2a28@&i/o-write-rcd dO2a28@&i/o-write-rcd) (set! dO2bb7@dO2a26@&i/o-write-rtd dO2a26@&i/o-write-rtd) (set! dO2bb6@dO2a24@i/o-write-error? dO2a24@i/o-write-error?) (set! dO2bb5@dO2a22@make-i/o-write-error dO2a22@make-i/o-write-error) (set! dO2bb4@dO2a20@p? dO2a20@p?) (set! dO2bb3@dO2a1d@dO2a15 dO2a1d@dO2a15) (set! dO2bb2@dO2a1b@dO2a16 dO2a1b@dO2a16) (set! dO2bb1@dO2a19@dO2a14 dO2a19@dO2a14) (set! dO2bb0@dO2a13@&i/o-read-rcd dO2a13@&i/o-read-rcd) (set! dO2baf@dO2a11@&i/o-read-rtd dO2a11@&i/o-read-rtd) (set! dO2bae@dO2a0f@i/o-read-error? dO2a0f@i/o-read-error?) (set! dO2bad@dO2a0d@make-i/o-read-error dO2a0d@make-i/o-read-error) (set! dO2bac@dO2a0b@p? dO2a0b@p?) (set! dO2bab@dO2a08@dO2a00 dO2a08@dO2a00) (set! dO2baa@dO2a06@dO2a01 dO2a06@dO2a01) (set! dO2ba9@dO2a04@dO29ff dO2a04@dO29ff) (set! dO2ba8@dO29fe@&i/o-rcd dO29fe@&i/o-rcd) (set! dO2ba7@dO29fc@&i/o-rtd dO29fc@&i/o-rtd) (set! dO2ba6@dO29fa@i/o-error? dO29fa@i/o-error?) (set! dO2ba5@dO29f8@make-i/o-error dO29f8@make-i/o-error) (set! dO2ba4@dO29f6@p? dO29f6@p?) (set! dO2ba3@dO29f3@dO29eb dO29f3@dO29eb) (set! dO2ba2@dO29f1@dO29ec dO29f1@dO29ec) (set! dO2ba1@dO29ef@dO29ea dO29ef@dO29ea) (set! dO2ba0@dO29e9@&undefined-rcd dO29e9@&undefined-rcd) (set! dO2b9f@dO29e7@&undefined-rtd dO29e7@&undefined-rtd) (set! dO2b9e@dO29e5@undefined-violation? dO29e5@undefined-violation?) (set! dO2b9d@dO29e3@make-undefined-violation dO29e3@make-undefined-violation) (set! dO2b9c@dO29e1@p? dO29e1@p?) (set! dO2b9b@dO29de@dO29d6 dO29de@dO29d6) (set! dO2b9a@dO29dc@dO29d7 dO29dc@dO29d7) (set! dO2b99@dO29da@dO29d5 dO29da@dO29d5) (set! dO2b98@dO29d4@&syntax-rcd dO29d4@&syntax-rcd) (set! dO2b97@dO29d2@&syntax-rtd dO29d2@&syntax-rtd) (set! dO2b96@dO29d0@syntax-violation-subform dO29d0@syntax-violation-subform) (set! dO2b95@dO29ce@syntax-violation-form dO29ce@syntax-violation-form) (set! dO2b94@dO29cc@syntax-violation? dO29cc@syntax-violation?) (set! dO2b93@dO29ca@dO29b7 dO29ca@dO29b7) (set! dO2b92@dO29c8@dO29b5 dO29c8@dO29b5) (set! dO2b91@dO29c6@make-syntax-violation dO29c6@make-syntax-violation) (set! dO2b90@dO29c4@p? dO29c4@p?) (set! dO2b8f@dO29c1@dO29b9 dO29c1@dO29b9) (set! dO2b8e@dO29bf@dO29ba dO29bf@dO29ba) (set! dO2b8d@dO29bd@dO29b8 dO29bd@dO29b8) (set! dO2b8c@dO29b3@&lexical-rcd dO29b3@&lexical-rcd) (set! dO2b8b@dO29b1@&lexical-rtd dO29b1@&lexical-rtd) (set! dO2b8a@dO29af@lexical-violation? dO29af@lexical-violation?) (set! dO2b89@dO29ad@make-lexical-violation dO29ad@make-lexical-violation) (set! dO2b88@dO29ab@p? dO29ab@p?) (set! dO2b87@dO29a8@dO29a0 dO29a8@dO29a0) (set! dO2b86@dO29a6@dO29a1 dO29a6@dO29a1) (set! dO2b85@dO29a4@dO299f dO29a4@dO299f) (set! dO2b84@dO299e@&implementation-restriction-rcd dO299e@&implementation-restriction-rcd) (set! dO2b83@dO299c@&implementation-restriction-rtd dO299c@&implementation-restriction-rtd) (set! dO2b82@dO299a@implementation-restriction-violation? dO299a@implementation-restriction-violation?) (set! dO2b81@dO2998@make-implementation-restriction-violation dO2998@make-implementation-restriction-violation) (set! dO2b80@dO2996@p? dO2996@p?) (set! dO2b7f@dO2993@dO298b dO2993@dO298b) (set! dO2b7e@dO2991@dO298c dO2991@dO298c) (set! dO2b7d@dO298f@dO298a dO298f@dO298a) (set! dO2b7c@dO2989@&non-continuable-rcd dO2989@&non-continuable-rcd) (set! dO2b7b@dO2987@&non-continuable-rtd dO2987@&non-continuable-rtd) (set! dO2b7a@dO2985@non-continuable-violation? dO2985@non-continuable-violation?) (set! dO2b79@dO2983@make-non-continuable-violation dO2983@make-non-continuable-violation) (set! dO2b78@dO2981@p? dO2981@p?) (set! dO2b77@dO297e@dO2976 dO297e@dO2976) (set! dO2b76@dO297c@dO2977 dO297c@dO2977) (set! dO2b75@dO297a@dO2975 dO297a@dO2975) (set! dO2b74@dO2974@&who-rcd dO2974@&who-rcd) (set! dO2b73@dO2972@&who-rtd dO2972@&who-rtd) (set! dO2b72@dO2970@condition-who dO2970@condition-who) (set! dO2b71@dO296e@who-condition? dO296e@who-condition?) (set! dO2b70@dO296c@dO295b dO296c@dO295b) (set! dO2b6f@dO296a@make-who-condition dO296a@make-who-condition) (set! dO2b6e@dO2968@p? dO2968@p?) (set! dO2b6d@dO2965@dO295d dO2965@dO295d) (set! dO2b6c@dO2963@dO295e dO2963@dO295e) (set! dO2b6b@dO2961@dO295c dO2961@dO295c) (set! dO2b6a@dO2959@&irritants-rcd dO2959@&irritants-rcd) (set! dO2b69@dO2957@&irritants-rtd dO2957@&irritants-rtd) (set! dO2b68@dO2955@condition-irritants dO2955@condition-irritants) (set! dO2b67@dO2953@irritants-condition? dO2953@irritants-condition?) (set! dO2b66@dO2951@dO2940 dO2951@dO2940) (set! dO2b65@dO294f@make-irritants-condition dO294f@make-irritants-condition) (set! dO2b64@dO294d@p? dO294d@p?) (set! dO2b63@dO294a@dO2942 dO294a@dO2942) (set! dO2b62@dO2948@dO2943 dO2948@dO2943) (set! dO2b61@dO2946@dO2941 dO2946@dO2941) (set! dO2b60@dO293e@&assertion-rcd dO293e@&assertion-rcd) (set! dO2b5f@dO293c@&assertion-rtd dO293c@&assertion-rtd) (set! dO2b5e@dO293a@assertion-violation? dO293a@assertion-violation?) (set! dO2b5d@dO2938@make-assertion-violation dO2938@make-assertion-violation) (set! dO2b5c@dO2936@p? dO2936@p?) (set! dO2b5b@dO2933@dO292b dO2933@dO292b) (set! dO2b5a@dO2931@dO292c dO2931@dO292c) (set! dO2b59@dO292f@dO292a dO292f@dO292a) (set! dO2b58@dO2929@&violation-rcd dO2929@&violation-rcd) (set! dO2b57@dO2927@&violation-rtd dO2927@&violation-rtd) (set! dO2b56@dO2925@violation? dO2925@violation?) (set! dO2b55@dO2923@make-violation dO2923@make-violation) (set! dO2b54@dO2921@p? dO2921@p?) (set! dO2b53@dO291e@dO2916 dO291e@dO2916) (set! dO2b52@dO291c@dO2917 dO291c@dO2917) (set! dO2b51@dO291a@dO2915 dO291a@dO2915) (set! dO2b50@dO2914@&error-rcd dO2914@&error-rcd) (set! dO2b4f@dO2912@&error-rtd dO2912@&error-rtd) (set! dO2b4e@dO2910@error? dO2910@error?) (set! dO2b4d@dO290e@make-error dO290e@make-error) (set! dO2b4c@dO290c@p? dO290c@p?) (set! dO2b4b@dO2909@dO2901 dO2909@dO2901) (set! dO2b4a@dO2907@dO2902 dO2907@dO2902) (set! dO2b49@dO2905@dO2900 dO2905@dO2900) (set! dO2b48@dO28ff@&serious-rcd dO28ff@&serious-rcd) (set! dO2b47@dO28fd@&serious-rtd dO28fd@&serious-rtd) (set! dO2b46@dO28fb@serious-condition? dO28fb@serious-condition?) (set! dO2b45@dO28f9@make-serious-condition dO28f9@make-serious-condition) (set! dO2b44@dO28f7@p? dO28f7@p?) (set! dO2b43@dO28f4@dO28ec dO28f4@dO28ec) (set! dO2b42@dO28f2@dO28ed dO28f2@dO28ed) (set! dO2b41@dO28f0@dO28eb dO28f0@dO28eb) (set! dO2b40@dO28ea@&warning-rcd dO28ea@&warning-rcd) (set! dO2b3f@dO28e8@&warning-rtd dO28e8@&warning-rtd) (set! dO2b3e@dO28e6@warning? dO28e6@warning?) (set! dO2b3d@dO28e4@make-warning dO28e4@make-warning) (set! dO2b3c@dO28e2@p? dO28e2@p?) (set! dO2b3b@dO28df@dO28d7 dO28df@dO28d7) (set! dO2b3a@dO28dd@dO28d8 dO28dd@dO28d8) (set! dO2b39@dO28db@dO28d6 dO28db@dO28d6) (set! dO2b38@dO28d5@&message-rcd dO28d5@&message-rcd) (set! dO2b37@dO28d3@&message-rtd dO28d3@&message-rtd) (set! dO2b36@dO28d1@condition-message dO28d1@condition-message) (set! dO2b35@dO28cf@message-condition? dO28cf@message-condition?) (set! dO2b34@dO28cd@dO28bc dO28cd@dO28bc) (set! dO2b33@dO28cb@make-message-condition dO28cb@make-message-condition) (set! dO2b32@dO28c9@p? dO28c9@p?) (set! dO2b31@dO28c6@dO28be dO28c6@dO28be) (set! dO2b30@dO28c4@dO28bf dO28c4@dO28bf) (set! dO2b2f@dO28c2@dO28bd dO28c2@dO28bd) (set! dO2b2e@dO2876@&condition-rcd dO2876@&condition-rcd) (set! dO2b2d@dO2874@&condition-rtd dO2874@&condition-rtd) (set! dO2b2c@dO2872@make-&condition dO2872@make-&condition) (set! dO2b2b@dO2870@&condition? dO2870@&condition?) (set! dO2b2a@dO286d@dO2865 dO286d@dO2865) (set! dO2b29@dO286b@dO2866 dO286b@dO2866) (set! dO2b28@dO2869@dO2864 dO2869@dO2864)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (dO70b@dO6c0@current-primitive-locations (lambda (dO30f0@x) ((lambda (dO30f2@t) (if dO30f2@t (cdr dO30f2@t) '#f)) (assq dO30f0@x '((&no-nans-rcd . dO2c18@dO2b27@&no-nans-rcd) (&no-nans-rtd . dO2c17@dO2b25@&no-nans-rtd) (&no-infinities-rcd . dO2c10@dO2b12@&no-infinities-rcd) (&no-infinities-rtd . dO2c0f@dO2b10@&no-infinities-rtd) (&i/o-encoding-rcd . dO2c08@dO2afd@&i/o-encoding-rcd) (&i/o-encoding-rtd . dO2c07@dO2afb@&i/o-encoding-rtd) (&i/o-decoding-rcd . dO2bfe@dO2ae2@&i/o-decoding-rcd) (&i/o-decoding-rtd . dO2bfd@dO2ae0@&i/o-decoding-rtd) (&i/o-port-rcd . dO2bf6@dO2acd@&i/o-port-rcd) (&i/o-port-rtd . dO2bf5@dO2acb@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . dO2bec@dO2ab2@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . dO2beb@dO2ab0@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . dO2be4@dO2a9d@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . dO2be3@dO2a9b@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . dO2bdc@dO2a88@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . dO2bdb@dO2a86@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . dO2bd4@dO2a73@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . dO2bd3@dO2a71@&i/o-file-protection-rtd) (&i/o-filename-rcd . dO2bcc@dO2a5e@&i/o-filename-rcd) (&i/o-filename-rtd . dO2bcb@dO2a5c@&i/o-filename-rtd) (&i/o-invalid-position-rcd . dO2bc2@dO2a43@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . dO2bc1@dO2a41@&i/o-invalid-position-rtd) (&i/o-write-rcd . dO2bb8@dO2a28@&i/o-write-rcd) (&i/o-write-rtd . dO2bb7@dO2a26@&i/o-write-rtd) (&i/o-read-rcd . dO2bb0@dO2a13@&i/o-read-rcd) (&i/o-read-rtd . dO2baf@dO2a11@&i/o-read-rtd) (&i/o-rcd . dO2ba8@dO29fe@&i/o-rcd) (&i/o-rtd . dO2ba7@dO29fc@&i/o-rtd) (&undefined-rcd . dO2ba0@dO29e9@&undefined-rcd) (&undefined-rtd . dO2b9f@dO29e7@&undefined-rtd) (&syntax-rcd . dO2b98@dO29d4@&syntax-rcd) (&syntax-rtd . dO2b97@dO29d2@&syntax-rtd) (&lexical-rcd . dO2b8c@dO29b3@&lexical-rcd) (&lexical-rtd . dO2b8b@dO29b1@&lexical-rtd) (&implementation-restriction-rcd . dO2b84@dO299e@&implementation-restriction-rcd) (&implementation-restriction-rtd . dO2b83@dO299c@&implementation-restriction-rtd) (&non-continuable-rcd . dO2b7c@dO2989@&non-continuable-rcd) (&non-continuable-rtd . dO2b7b@dO2987@&non-continuable-rtd) (&who-rcd . dO2b74@dO2974@&who-rcd) (&who-rtd . dO2b73@dO2972@&who-rtd) (&irritants-rcd . dO2b6a@dO2959@&irritants-rcd) (&irritants-rtd . dO2b69@dO2957@&irritants-rtd) (&assertion-rcd . dO2b60@dO293e@&assertion-rcd) (&assertion-rtd . dO2b5f@dO293c@&assertion-rtd) (&violation-rcd . dO2b58@dO2929@&violation-rcd) (&violation-rtd . dO2b57@dO2927@&violation-rtd) (&error-rcd . dO2b50@dO2914@&error-rcd) (&error-rtd . dO2b4f@dO2912@&error-rtd) (&serious-rcd . dO2b48@dO28ff@&serious-rcd) (&serious-rtd . dO2b47@dO28fd@&serious-rtd) (&warning-rcd . dO2b40@dO28ea@&warning-rcd) (&warning-rtd . dO2b3f@dO28e8@&warning-rtd) (&message-rcd . dO2b38@dO28d5@&message-rcd) (&message-rtd . dO2b37@dO28d3@&message-rtd) (&condition-rcd . dO2b2e@dO2876@&condition-rcd) (&condition-rtd . dO2b2d@dO2874@&condition-rtd) (syntax-error . dO2851@dOe3a@syntax-error) (syntax-dispatch . dO27ef@dOd5e@syntax-dispatch) (load . dO2d9d@dO2c34@load) (interaction-environment . dO2859@dOe4a@interaction-environment) (library-path . dO972@dO7ae@library-path) (make-parameter . dO6b8@dO597@make-parameter) (make-variable-transformer . dO27ad@dOb8b@make-variable-transformer) (identifier? . dO2854@dOe40@identifier?) (generate-temporaries . dO284a@dOe2c@generate-temporaries) (free-identifier=? . dO284b@dOe2e@free-identifier=?) (syntax->datum . dO2856@dOe44@syntax->datum) (datum->syntax . dO2855@dOe42@datum->syntax) (bound-identifier=? . dO284c@dOe30@bound-identifier=?) (make-i/o-write-error . dO2bb5@dO2a22@make-i/o-write-error) (make-i/o-read-error . dO2bad@dO2a0d@make-i/o-read-error) (make-i/o-port-error . dO2bf1@dO2ac3@make-i/o-port-error) (make-i/o-invalid-position-error . dO2bbd@dO2a39@make-i/o-invalid-position-error) (make-i/o-filename-error . dO2bc7@dO2a54@make-i/o-filename-error) (make-i/o-file-protection-error . dO2bd1@dO2a6d@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . dO2bd9@dO2a82@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . dO2be9@dO2aac@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . dO2be1@dO2a97@make-i/o-file-already-exists-error) (make-i/o-error . dO2ba5@dO29f8@make-i/o-error) (make-i/o-encoding-error . dO2c03@dO2af3@make-i/o-encoding-error) (make-i/o-decoding-error . dO2bfb@dO2adc@make-i/o-decoding-error) (i/o-write-error? . dO2bb6@dO2a24@i/o-write-error?) (i/o-read-error? . dO2bae@dO2a0f@i/o-read-error?) (i/o-port-error? . dO2bf3@dO2ac7@i/o-port-error?) (i/o-invalid-position-error? . dO2bbf@dO2a3d@i/o-invalid-position-error?) (i/o-filename-error? . dO2bc9@dO2a58@i/o-filename-error?) (i/o-file-protection-error? . dO2bd2@dO2a6f@i/o-file-protection-error?) (i/o-file-is-read-only-error? . dO2bda@dO2a84@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . dO2bea@dO2aae@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . dO2be2@dO2a99@i/o-file-already-exists-error?) (i/o-error? . dO2ba6@dO29fa@i/o-error?) (i/o-error-position . dO2bc0@dO2a3f@i/o-error-position) (i/o-error-port . dO2bf4@dO2ac9@i/o-error-port) (i/o-error-filename . dO2bca@dO2a5a@i/o-error-filename) (i/o-encoding-error? . dO2c05@dO2af7@i/o-encoding-error?) (i/o-encoding-error-char . dO2c06@dO2af9@i/o-encoding-error-char) (i/o-decoding-error? . dO2bfc@dO2ade@i/o-decoding-error?) (scheme-report-environment . dO2841@dOe1a@scheme-report-environment) (null-environment . dO2840@dOe18@null-environment) (command-line . dO2d9a@dO2c2e@command-line) (eval . dO2843@dOe1e@eval) (environment . dO283f@dOe16@environment) (who-condition? . dO2b71@dO296e@who-condition?) (warning? . dO2b3e@dO28e6@warning?) (violation? . dO2b56@dO2925@violation?) (undefined-violation? . dO2b9e@dO29e5@undefined-violation?) (syntax-violation? . dO2b94@dO29cc@syntax-violation?) (syntax-violation-subform . dO2b96@dO29d0@syntax-violation-subform) (syntax-violation-form . dO2b95@dO29ce@syntax-violation-form) (syntax-violation . dO2853@dOe3e@syntax-violation) (serious-condition? . dO2b46@dO28fb@serious-condition?) (non-continuable-violation? . dO2b7a@dO2985@non-continuable-violation?) (message-condition? . dO2b35@dO28cf@message-condition?) (make-who-condition . dO2b6f@dO296a@make-who-condition) (make-warning . dO2b3d@dO28e4@make-warning) (make-violation . dO2b55@dO2923@make-violation) (make-undefined-violation . dO2b9d@dO29e3@make-undefined-violation) (make-syntax-violation . dO2b91@dO29c6@make-syntax-violation) (make-serious-condition . dO2b45@dO28f9@make-serious-condition) (make-non-continuable-violation . dO2b79@dO2983@make-non-continuable-violation) (make-message-condition . dO2b33@dO28cb@make-message-condition) (make-lexical-violation . dO2b89@dO29ad@make-lexical-violation) (make-irritants-condition . dO2b65@dO294f@make-irritants-condition) (make-implementation-restriction-violation . dO2b81@dO2998@make-implementation-restriction-violation) (make-error . dO2b4d@dO290e@make-error) (make-assertion-violation . dO2b5d@dO2938@make-assertion-violation) (lexical-violation? . dO2b8a@dO29af@lexical-violation?) (irritants-condition? . dO2b67@dO2953@irritants-condition?) (implementation-restriction-violation? . dO2b82@dO299a@implementation-restriction-violation?) (error? . dO2b4e@dO2910@error?) (condition-who . dO2b72@dO2970@condition-who) (condition-message . dO2b36@dO28d1@condition-message) (condition-irritants . dO2b68@dO2955@condition-irritants) (assertion-violation? . dO2b5e@dO293a@assertion-violation?) (no-nans-violation? . dO2c16@dO2b23@no-nans-violation?) (no-infinities-violation? . dO2c0e@dO2b0e@no-infinities-violation?) (make-no-nans-violation . dO2c15@dO2b21@make-no-nans-violation) (make-no-infinities-violation . dO2c0d@dO2b0c@make-no-infinities-violation) (assertion-error . dO2850@dOe38@assertion-error)))))) (dO982@dO7ce@install-library 'dO30cd '(mosh interaction) '() '() '() '() '((regexp? . dO30c5) (alist->eq-hash-table . dO30c1) (format . dO30be) (string-split . dO30b3) (call-process . dO30ad) (set-current-directory! . dO30a9) (expand-path . dO30a8) (current-directory . dO30a7) (%spawn . dO30a6) (%waitpid . dO30a5) (simple-struct-name . dO30a4) (simple-struct-set! . dO30a3) (simple-struct-ref . dO30a2) (make-simple-struct . dO30a1) (simple-struct? . dO30a0) (pointer-ref-c-int64 . dO309f) (pointer-ref-c-int32 . dO309e) (pointer-ref-c-int16 . dO309d) (pointer-ref-c-int8 . dO309c) (pointer-ref-c-uint64 . dO309b) (pointer-ref-c-uint32 . dO309a) (pointer-ref-c-uint16 . dO3099) (pointer-ref-c-uint8 . dO3098) (pointer-set-c-uint64! . dO3097) (pointer-set-c-uint32! . dO3096) (pointer-set-c-uint16! . dO3095) (pointer-set-c-uint8! . dO3094) (pointer-set-c-int64! . dO3093) (pointer-set-c-int32! . dO3092) (pointer-set-c-int16! . dO3091) (pointer-set-c-int8! . dO3090) (pointer-set-c-pointer! . dO308f) (pointer-set-c-double! . dO308e) (pointer-set-c-float! . dO308d) (pointer-set-c-long-long! . dO308c) (pointer-set-c-long! . dO308b) (pointer-set-c-int! . dO308a) (pointer-set-c-short! . dO3089) (pointer-set-c-char! . dO3088) (pointer-ref-c-pointer . dO3087) (pointer-ref-c-double . dO3086) (pointer-ref-c-float . dO3085) (pointer-ref-c-unsigned-long-long . dO3084) (pointer-ref-c-signed-long-long . dO3083) (pointer-ref-c-unsigned-long . dO3082) (pointer-ref-c-signed-long . dO3081) (pointer-ref-c-unsigned-int . dO3080) (pointer-ref-c-signed-int . dO307f) (pointer-ref-c-unsigned-short . dO307e) (pointer-ref-c-signed-short . dO307d) (pointer-ref-c-unsigned-char . dO307c) (pointer-ref-c-signed-char . dO307b) (pointer->integer . dO307a) (integer->pointer . dO3079) (pointer? . dO3078) (shared-errno . dO3077) (%ffi-supported? . dO3076) (%ffi-pointer->string . dO3075) (%ffi-call->string-or-zero . dO3074) (%ffi-call->double . dO3073) (%ffi-call->void* . dO3072) (%ffi-call->void . dO3071) (%ffi-call->char . dO3070) (%ffi-call->int . dO306f) (%ffi-lookup . dO306e) (%ffi-open . dO306d) (%fork . dO306c) (%pipe . dO306b) (p . dO306a) (whereis . dO304f) (register . dO304e) (vm-join! . dO304d) (vm-set-value! . dO304c) (vm? . dO304b) (main-vm? . dO304a) (vm-eval . dO3049) (vm-self . dO3048) (vm-start! . dO3047) (make-vm . dO3046) (mutex-try-lock! . dO3045) (mutex-unlock! . dO3044) (mutex-lock! . dO3043) (mutex? . dO3042) (make-mutex . dO3041) (condition-variable-notify-all! . dO3040) (condition-variable-notify! . dO303f) (condition-variable-wait! . dO303e) (make-condition-variable . dO303d) (string-upcase . dO3026) (string-titlecase . dO3025) (string-normalize-nfkd . dO3024) (string-normalize-nfkc . dO3023) (string-normalize-nfd . dO3022) (string-normalize-nfc . dO3021) (string-foldcase . dO3020) (string-downcase . dO301f) (string-ci>? . dO301e) (string-ci>=? . dO301d) (string-ci=? . dO301c) (string-ci<? . dO301b) (string-ci<=? . dO301a) (char-whitespace? . dO3019) (char-upper-case? . dO3018) (char-title-case? . dO3017) (char-numeric? . dO3016) (char-lower-case? . dO3015) (char-general-category . dO3014) (char-upcase . dO3013) (char-titlecase . dO3012) (char-foldcase . dO3011) (char-downcase . dO3010) (char-ci>? . dO300f) (char-ci>=? . dO300e) (char-ci=? . dO300d) (char-ci<? . dO300c) (char-ci<=? . dO300b) (char-alphabetic? . dO300a) (make-variable-transformer . dOb8a) (identifier? . dOe3f) (generate-temporaries . dOe2b) (free-identifier=? . dOe2d) (syntax->datum . dOe43) (datum->syntax . dOe41) (bound-identifier=? . dOe2f) (record-type-descriptor? . dO3009) (record-predicate . dO3008) (record-mutator . dO3007) (record-constructor . dO3006) (record-accessor . dO3005) (make-record-type-descriptor . dO3004) (make-record-constructor-descriptor . dO3003) (record? . dO3002) (record-type-uid . dO3001) (record-type-sealed? . dO3000) (record-type-parent . dO2fff) (record-type-opaque? . dO2ffe) (record-type-name . dO2ffd) (record-type-generative? . dO2ffc) (record-type-field-names . dO2ffb) (record-rtd . dO2ffa) (record-field-mutable? . dO2ff9) (delete-file . dO2ff8) (file-exists? . dO2ff7) (vector-sort! . dO2ff6) (vector-sort . dO2ff5) (list-sort . dO2ff4) (symbol-hash . dO2ff3) (string-ci-hash . dO2ff2) (string-hash . dO2ff1) (equal-hash . dO2ff0) (hashtable-equivalence-function . dO2fef) (make-hashtable . dO2fee) (hashtable-hash-function . dO2fed) (make-eqv-hashtable . dO2fec) (make-eq-hashtable . dO2feb) (hashtable? . dO2fea) (hashtable-update! . dO2fe9) (hashtable-size . dO2fe8) (hashtable-set! . dO2fe7) (hashtable-ref . dO2fe6) (hashtable-mutable? . dO2fe5) (hashtable-keys . dO2fe4) (hashtable-entries . dO2fe3) (hashtable-delete! . dO2fe2) (hashtable-copy . dO2fe1) (hashtable-contains? . dO2fe0) (hashtable-clear! . dO2fdf) (call-with-output-file . dO2fde) (call-with-input-file . dO2fdd) (write-char . dO2fdc) (write . dO2fdb) (with-output-to-file . dO2fda) (with-input-from-file . dO2fd9) (read-char . dO2fd8) (read . dO2fd7) (peek-char . dO2fd6) (open-output-file . dO2fd5) (open-input-file . dO2fd4) (newline . dO2fd3) (display . dO2fd2) (close-output-port . dO2fd1) (close-input-port . dO2fd0) (eof-object? . dO2fcf) (eof-object . dO2fce) (current-error-port . dO2fcd) (current-output-port . dO2fcc) (current-input-port . dO2fcb) (output-port? . dO2fca) (input-port? . dO2fc9) (utf-8-codec . dO2fc8) (utf-16-codec . dO2fc7) (transcoder-error-handling-mode . dO2fc6) (transcoder-eol-style . dO2fc5) (transcoder-codec . dO2fc4) (transcoded-port . dO2fc3) (textual-port? . dO2fc2) (string->bytevector . dO2fc1) (standard-output-port . dO2fc0) (standard-input-port . dO2fbf) (standard-error-port . dO2fbe) (set-port-position! . dO2fbd) (put-u8 . dO2fbc) (put-string . dO2fbb) (put-datum . dO2fba) (put-char . dO2fb9) (put-bytevector . dO2fb8) (port? . dO2fb7) (port-transcoder . dO2fb6) (port-position . dO2fb5) (port-has-set-port-position!? . dO2fb4) (port-has-port-position? . dO2fb3) (port-eof? . dO2fb2) (output-port-buffer-mode . dO2fb1) (open-string-output-port . dO2fb0) (open-string-input-port . dO2faf) (open-file-output-port . dO2fae) (open-file-input/output-port . dO2fad) (open-file-input-port . dO2fac) (open-bytevector-output-port . dO2fab) (open-bytevector-input-port . dO2faa) (native-transcoder . dO2fa9) (native-eol-style . dO2fa8) (make-transcoder . dO2fa7) (latin-1-codec . dO2fa6) (make-i/o-write-error . dO2a21) (make-i/o-read-error . dO2a0c) (make-i/o-port-error . dO2ac2) (make-i/o-invalid-position-error . dO2a38) (make-i/o-filename-error . dO2a53) (make-i/o-file-protection-error . dO2a6c) (make-i/o-file-is-read-only-error . dO2a81) (make-i/o-file-does-not-exist-error . dO2aab) (make-i/o-file-already-exists-error . dO2a96) (make-i/o-error . dO29f7) (make-i/o-encoding-error . dO2af2) (make-i/o-decoding-error . dO2adb) (make-custom-textual-output-port . dO2fa5) (make-custom-textual-input/output-port . dO2fa4) (make-custom-textual-input-port . dO2fa3) (make-custom-binary-output-port . dO2fa2) (make-custom-binary-input/output-port . dO2fa1) (make-custom-binary-input-port . dO2fa0) (make-bytevector . dO2f9f) (lookahead-u8 . dO2f9e) (lookahead-char . dO2f9d) (i/o-write-error? . dO2a23) (i/o-read-error? . dO2a0e) (i/o-port-error? . dO2ac6) (i/o-invalid-position-error? . dO2a3c) (i/o-filename-error? . dO2a57) (i/o-file-protection-error? . dO2a6e) (i/o-file-is-read-only-error? . dO2a83) (i/o-file-does-not-exist-error? . dO2aad) (i/o-file-already-exists-error? . dO2a98) (i/o-error? . dO29f9) (i/o-error-position . dO2a3e) (i/o-error-port . dO2ac8) (i/o-error-filename . dO2a59) (i/o-encoding-error? . dO2af6) (i/o-encoding-error-char . dO2af8) (i/o-decoding-error? . dO2add) (get-u8 . dO2f9c) (get-string-n! . dO2f9b) (get-string-n . dO2f9a) (get-string-all . dO2f99) (get-line . dO2f98) (get-datum . dO2f97) (get-char . dO2f96) (get-bytevector-some . dO2f95) (get-bytevector-n! . dO2f94) (get-bytevector-n . dO2f93) (get-bytevector-all . dO2f92) (flush-output-port . dO2f91) (close-port . dO2f90) (exit . dO2f88) (command-line . dO2c2d) (string-fill! . dO2f87) (string-set! . dO2f86) (set-cdr! . dO2f85) (set-car! . dO2f84) (remove . dO2f83) (remv . dO2f82) (remp . dO2f81) (remq . dO2f80) (partition . dO2f7f) (memv . dO2f7e) (memq . dO2f7d) (memp . dO2f7c) (member . dO2f7b) (exists . dO2f7a) (for-all . dO2f79) (fold-right . dO2f78) (fold-left . dO2f77) (find . dO2f76) (filter . dO2f75) (cons* . dO2f74) (assv . dO2f73) (assq . dO2f72) (assp . dO2f71) (assoc . dO2f70) (call-with-string-output-port . dO2f6f) (call-with-port . dO2f6e) (call-with-bytevector-output-port . dO2f6d) (bytevector->string . dO2f6c) (buffer-mode? . dO2f6b) (binary-port? . dO2f6a) (with-exception-handler . dO2f69) (raise-continuable . dO2f68) (raise . dO2f67) (eval . dOe1d) (environment . dOe15) (make-enumeration . dO2f66) (enum-set=? . dO2f65) (enum-set-universe . dO2f64) (enum-set-union . dO2f63) (enum-set-subset? . dO2f62) (enum-set-projection . dO2f61) (enum-set-member? . dO2f60) (enum-set-intersection . dO2f5f) (enum-set-indexer . dO2f5e) (enum-set-difference . dO2f5d) (enum-set-constructor . dO2f5c) (enum-set-complement . dO2f5b) (enum-set->list . dO2f5a) (who-condition? . dO296d) (warning? . dO28e5) (violation? . dO2924) (undefined-violation? . dO29e4) (syntax-violation? . dO29cb) (syntax-violation-subform . dO29cf) (syntax-violation-form . dO29cd) (syntax-violation . dOe3d) (simple-conditions . dO2f59) (serious-condition? . dO28fa) (non-continuable-violation? . dO2984) (message-condition? . dO28ce) (make-who-condition . dO2969) (make-warning . dO28e3) (make-violation . dO2922) (make-undefined-violation . dO29e2) (make-syntax-violation . dO29c5) (make-serious-condition . dO28f8) (make-non-continuable-violation . dO2982) (make-message-condition . dO28ca) (make-lexical-violation . dO29ac) (make-irritants-condition . dO294e) (make-implementation-restriction-violation . dO2997) (make-error . dO290d) (make-assertion-violation . dO2937) (lexical-violation? . dO29ae) (irritants-condition? . dO2952) (implementation-restriction-violation? . dO2999) (error? . dO290f) (condition-who . dO296f) (condition-predicate . dO2f58) (condition-message . dO28d0) (condition-irritants . dO2954) (condition-accessor . dO2f57) (condition . dO2f56) (assertion-violation? . dO2939) (condition? . dO2f55) (utf32->string . dO2f54) (utf16->string . dO2f53) (utf8->string . dO2f52) (uint-list->bytevector . dO2f51) (u8-list->bytevector . dO2f50) (string->utf8 . dO2f4f) (string->utf32 . dO2f4e) (string->utf16 . dO2f4d) (sint-list->bytevector . dO2f4c) (native-endianness . dO2f4b) (bytevector? . dO2f4a) (bytevector=? . dO2f49) (bytevector-uint-set! . dO2f48) (bytevector-uint-ref . dO2f47) (bytevector-u8-set! . dO2f46) (bytevector-u8-ref . dO2f45) (bytevector-u64-set! . dO2f44) (bytevector-u64-ref . dO2f43) (bytevector-u64-native-set! . dO2f42) (bytevector-u64-native-ref . dO2f41) (bytevector-u32-set! . dO2f40) (bytevector-u32-ref . dO2f3f) (bytevector-u32-native-set! . dO2f3e) (bytevector-u32-native-ref . dO2f3d) (bytevector-u16-set! . dO2f3c) (bytevector-u16-ref . dO2f3b) (bytevector-u16-native-set! . dO2f3a) (bytevector-u16-native-ref . dO2f39) (bytevector-sint-set! . dO2f38) (bytevector-sint-ref . dO2f37) (bytevector-s8-set! . dO2f36) (bytevector-s8-ref . dO2f35) (bytevector-s64-set! . dO2f34) (bytevector-s64-ref . dO2f33) (bytevector-s64-native-set! . dO2f32) (bytevector-s64-native-ref . dO2f31) (bytevector-s32-set! . dO2f30) (bytevector-s32-ref . dO2f2f) (bytevector-s32-native-set! . dO2f2e) (bytevector-s32-native-ref . dO2f2d) (bytevector-s16-set! . dO2f2c) (bytevector-s16-ref . dO2f2b) (bytevector-s16-native-set! . dO2f2a) (bytevector-s16-native-ref . dO2f29) (bytevector-length . dO2f28) (bytevector-ieee-single-ref . dO2f27) (bytevector-ieee-single-set! . dO2f26) (bytevector-ieee-single-native-set! . dO2f25) (bytevector-ieee-single-native-ref . dO2f24) (bytevector-ieee-double-set! . dO2f23) (bytevector-ieee-double-ref . dO2f22) (bytevector-ieee-double-native-set! . dO2f21) (bytevector-ieee-double-native-ref . dO2f20) (bytevector-fill! . dO2f1f) (bytevector-copy! . dO2f1e) (bytevector-copy . dO2f1d) (bytevector->uint-list . dO2f1c) (bytevector->u8-list . dO2f1b) (bytevector->sint-list . dO2f1a) (no-nans-violation? . dO2b22) (no-infinities-violation? . dO2b0d) (make-no-nans-violation . dO2b20) (make-no-infinities-violation . dO2b0b) (real->flonum . dO2f19) (flzero? . dO2f18) (fltruncate . dO2f17) (fltan . dO2f16) (flsqrt . dO2f15) (flsin . dO2f14) (flround . dO2f13) (flpositive? . dO2f12) (flonum? . dO2f11) (flodd? . dO2f10) (flnumerator . dO2f0f) (flnegative? . dO2f0e) (flnan? . dO2f0d) (flmod0 . dO2f0c) (flmod . dO2f0b) (flmin . dO2f0a) (flmax . dO2f09) (fllog . dO2f08) (flinteger? . dO2f07) (flinfinite? . dO2f06) (flfloor . dO2f05) (flfinite? . dO2f04) (flexpt . dO2f03) (flexp . dO2f02) (fleven? . dO2f01) (fldiv0-and-mod0 . dO2f00) (fldiv0 . dO2eff) (fldiv-and-mod . dO2efe) (fldiv . dO2efd) (fldenominator . dO2efc) (flcos . dO2efb) (flceiling . dO2efa) (flatan . dO2ef9) (flasin . dO2ef8) (flacos . dO2ef7) (flabs . dO2ef6) (fl>? . dO2ef5) (fl>=? . dO2ef4) (fl=? . dO2ef3) (fl<? . dO2ef2) (fl<=? . dO2ef1) (fl/ . dO2ef0) (fl- . dO2eef) (fl+ . dO2eee) (fl* . dO2eed) (fixnum->flonum . dO2eec) (fxzero? . dO2eeb) (fxxor . dO2eea) (fxrotate-bit-field . dO2ee9) (fxreverse-bit-field . dO2ee8) (fxpositive? . dO2ee7) (fxodd? . dO2ee6) (fxnot . dO2ee5) (fxnegative? . dO2ee4) (fxmod0 . dO2ee3) (fxmod . dO2ee2) (fxmin . dO2ee1) (fxmax . dO2ee0) (fxlength . dO2edf) (fxior . dO2ede) (fxif . dO2edd) (fxfirst-bit-set . dO2edc) (fxeven? . dO2edb) (fxdiv0-and-mod0 . dO2eda) (fxdiv0 . dO2ed9) (fxdiv-and-mod . dO2ed8) (fxdiv . dO2ed7) (fxcopy-bit-field . dO2ed6) (fxcopy-bit . dO2ed5) (fxbit-set? . dO2ed4) (fxbit-field . dO2ed3) (fxbit-count . dO2ed2) (fxarithmetic-shift-right . dO2ed1) (fxarithmetic-shift-left . dO2ed0) (fxarithmetic-shift . dO2ecf) (fxand . dO2ece) (fx>? . dO2ecd) (fx>=? . dO2ecc) (fx=? . dO2ecb) (fx<? . dO2eca) (fx<=? . dO2ec9) (fx-/carry . dO2ec8) (fx- . dO2ec7) (fx+/carry . dO2ec6) (fx+ . dO2ec5) (fx*/carry . dO2ec4) (fx* . dO2ec3) (greatest-fixnum . dO2ec2) (least-fixnum . dO2ec1) (fixnum-width . dO2ec0) (fixnum? . dO2ebf) (bitwise-rotate-bit-field . dO2ebe) (bitwise-reverse-bit-field . dO2ebd) (bitwise-length . dO2ebc) (bitwise-if . dO2ebb) (bitwise-first-bit-set . dO2eba) (bitwise-copy-bit-field . dO2eb9) (bitwise-copy-bit . dO2eb8) (bitwise-bit-set? . dO2eb7) (bitwise-bit-field . dO2eb6) (bitwise-bit-count . dO2eb5) (bitwise-xor . dO2eb4) (bitwise-ior . dO2eb3) (bitwise-and . dO2eb2) (bitwise-not . dO2eb1) (bitwise-arithmetic-shift-right . dO2eb0) (bitwise-arithmetic-shift-left . dO2eaf) (bitwise-arithmetic-shift . dO2eae) (zero? . dO2ead) (vector? . dO2eac) (vector-set! . dO2eab) (vector-ref . dO2eaa) (vector-map . dO2ea9) (vector-length . dO2ea8) (vector-for-each . dO2ea7) (vector-fill! . dO2ea6) (vector->list . dO2ea5) (vector . dO2ea4) (values . dO2ea3) (truncate . dO2ea2) (tan . dO2ea1) (symbol? . dO2ea0) (symbol=? . dO2e9f) (symbol->string . dO2e9e) (substring . dO2e9d) (string? . dO2e9c) (string>? . dO2e9b) (string>=? . dO2e9a) (string=? . dO2e99) (string<? . dO2e98) (string<=? . dO2e97) (string-ref . dO2e96) (string-length . dO2e95) (string-for-each . dO2e94) (string-copy . dO2e93) (string-append . dO2e92) (string->symbol . dO2e91) (string->number . dO2e90) (string->list . dO2e8f) (string . dO2e8e) (sqrt . dO2e8d) (sin . dO2e8c) (round . dO2e8b) (reverse . dO2e8a) (real? . dO2e89) (real-valued? . dO2e88) (real-part . dO2e87) (rationalize . dO2e86) (rational? . dO2e85) (rational-valued? . dO2e84) (procedure? . dO2e83) (positive? . dO2e82) (pair? . dO2e81) (odd? . dO2e80) (numerator . dO2e7f) (number? . dO2e7e) (number->string . dO2e7d) (null? . dO2e7c) (not . dO2e7b) (negative? . dO2e7a) (nan? . dO2e79) (min . dO2e78) (max . dO2e77) (map . dO2e76) (make-vector . dO2e75) (make-string . dO2e74) (make-rectangular . dO2e73) (make-polar . dO2e72) (magnitude . dO2e71) (log . dO2e70) (list? . dO2e6f) (list-tail . dO2e6e) (list-ref . dO2e6d) (list->vector . dO2e6c) (list->string . dO2e6b) (list . dO2e6a) (length . dO2e69) (lcm . dO2e68) (integer? . dO2e67) (integer-valued? . dO2e66) (integer->char . dO2e65) (infinite? . dO2e64) (inexact? . dO2e63) (inexact . dO2e62) (imag-part . dO2e61) (gcd . dO2e60) (for-each . dO2e5f) (floor . dO2e5e) (finite? . dO2e5d) (expt . dO2e5c) (exp . dO2e5b) (exact? . dO2e5a) (exact-integer-sqrt . dO2e59) (exact . dO2e58) (even? . dO2e57) (error . dO2e56) (eqv? . dO2e55) (equal? . dO2e54) (eq? . dO2e53) (dynamic-wind . dO2e52) (div0-and-mod0 . dO2e51) (mod0 . dO2e50) (div0 . dO2e4f) (div-and-mod . dO2e4e) (mod . dO2e4d) (div . dO2e4c) (denominator . dO2e4b) (cos . dO2e4a) (cons . dO2e49) (complex? . dO2e48) (char? . dO2e47) (char>? . dO2e46) (char>=? . dO2e45) (char=? . dO2e44) (char<? . dO2e43) (char<=? . dO2e42) (char->integer . dO2e41) (ceiling . dO2e40) (call-with-values . dO2e3f) (call/cc . dO2e3e) (call-with-current-continuation . dO2e3d) (cddddr . dO2e3c) (cdddar . dO2e3b) (cddadr . dO2e3a) (cddaar . dO2e39) (cdaddr . dO2e38) (cdadar . dO2e37) (cdaadr . dO2e36) (cdaaar . dO2e35) (cadddr . dO2e34) (caddar . dO2e33) (cadadr . dO2e32) (cadaar . dO2e31) (caaddr . dO2e30) (caadar . dO2e2f) (caaadr . dO2e2e) (caaaar . dO2e2d) (cdddr . dO2e2c) (cddar . dO2e2b) (cdadr . dO2e2a) (cdaar . dO2e29) (caddr . dO2e28) (cadar . dO2e27) (caadr . dO2e26) (caaar . dO2e25) (cddr . dO2e24) (cdar . dO2e23) (cadr . dO2e22) (caar . dO2e21) (cdr . dO2e20) (car . dO2e1f) (boolean? . dO2e1e) (boolean=? . dO2e1d) (atan . dO2e1c) (assertion-violation . dO2e1b) (asin . dO2e1a) (apply . dO2e19) (append . dO2e18) (angle . dO2e17) (acos . dO2e16) (abs . dO2e15) (/ . dO2e14) (* . dO2e13) (- . dO2e12) (+ . dO2e11) (>= . dO2e10) (> . dO2e0f) (= . dO2e0e) (<= . dO2e0d) (< . dO2e0c) (library . dO2e0b) (&no-nans . dO2e0a) (&no-infinities . dO2e09) (&i/o-encoding . dO2e08) (&i/o-decoding . dO2e07) (&i/o-port . dO2e06) (&i/o-file-does-not-exist . dO2e05) (&i/o-file-already-exists . dO2e04) (&i/o-file-is-read-only . dO2e03) (&i/o-file-protection . dO2e02) (&i/o-filename . dO2e01) (&i/o-invalid-position . dO2e00) (&i/o-write . dO2dff) (&i/o-read . dO2dfe) (&i/o . dO2dfd) (&undefined . dO2dfc) (&syntax . dO2dfb) (&lexical . dO2dfa) (&implementation-restriction . dO2df9) (&non-continuable . dO2df8) (&who . dO2df7) (&irritants . dO2df6) (&assertion . dO2df5) (&violation . dO2df4) (&error . dO2df3) (&serious . dO2df2) (&warning . dO2df1) (&message . dO2df0) (&condition . dO2def) (define-condition-type . dO2dee) (define-enumeration . dO2ded) (define-record-type . dO2dec) (parent-rtd . dO2deb) (nongenerative . dO2dea) (opaque . dO2de9) (sealed . dO2de8) (protocol . dO2de7) (parent . dO2de6) (immutable . dO2de5) (mutable . dO2de4) (fields . dO2de3) (error-handling-mode . dO2de2) (file-options . dO2de1) (buffer-mode . dO2de0) (eol-style . dO2ddf) (guard . dO2dde) (unsyntax-splicing . dO2ddb) (unsyntax . dO2dda) (unquote-splicing . dO2dd9) (unquote . dO2dd8) (_ . dO2dd7) (else . dO2dd6) (=> . dO2dd5) (... . dO2dd4) (assert . dO2dd3) (endianness . dO2dd2) (time . dO2dd0) (do . dO2dcf) (cond . dO2dce) (let* . dO2dcd) (let . dO2dcc) (let*-values . dO2dcb) (let-values . dO2dca) (identifier-syntax . dO2dc9) (with-syntax . dO2dc8) (quasisyntax . dO2dc7) (quasiquote . dO2dc6) (syntax-rules . dO2dc5) (include . dO2dc4) (record-constructor-descriptor . dO2dc2) (record-type-descriptor . dO2dc1) (case . dO2dc0) (unless . dO2dbe) (when . dO2dbd) (or . dO2dbc) (and . dO2dbb) (if . dO2dba) (letrec* . dO2db9) (letrec . dO2db8) (case-lambda . dO2db6) (lambda . dO2db5) (syntax . dO2db4) (syntax-case . dO2db3) (quote . dO2db2) (letrec-syntax . dO2db0) (let-syntax . dO2daf) (set! . dO2dae) (import . dO2dad) (begin . dO2dac) (define-syntax . dO2daa) (define . dO2da9)) '() values values '#f '#f '#t '#f) (dO982@dO7ce@install-library 'dO30ce '(psyntax null-environment-5) '() '() '() '() '((make-promise . dO2f89) (unquote-splicing . dO2dd9) (unquote . dO2dd8) (_ . dO2dd7) (else . dO2dd6) (=> . dO2dd5) (... . dO2dd4) (delay . dO2dd1) (do . dO2dcf) (cond . dO2dce) (let* . dO2dcd) (let . dO2dcc) (quasiquote . dO2dc6) (syntax-rules . dO2dc5) (case . dO2dc0) (or . dO2dbc) (and . dO2dbb) (if . dO2dba) (letrec . dO2db8) (lambda . dO2db5) (quote . dO2db2) (letrec-syntax . dO2db0) (let-syntax . dO2daf) (set! . dO2dae) (begin . dO2dac) (define-syntax . dO2daa) (define . dO2da9)) '() values values '#f '#f '#t '#f) (dO982@dO7ce@install-library 'dO30cf '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . dO301e) (string-ci>=? . dO301d) (string-ci=? . dO301c) (string-ci<? . dO301b) (string-ci<=? . dO301a) (char-whitespace? . dO3019) (char-upper-case? . dO3018) (char-numeric? . dO3016) (char-lower-case? . dO3015) (char-upcase . dO3013) (char-downcase . dO3010) (char-ci>? . dO300f) (char-ci>=? . dO300e) (char-ci=? . dO300d) (char-ci<? . dO300c) (char-ci<=? . dO300b) (char-alphabetic? . dO300a) (call-with-output-file . dO2fde) (call-with-input-file . dO2fdd) (write-char . dO2fdc) (write . dO2fdb) (with-output-to-file . dO2fda) (with-input-from-file . dO2fd9) (read-char . dO2fd8) (read . dO2fd7) (peek-char . dO2fd6) (open-output-file . dO2fd5) (open-input-file . dO2fd4) (newline . dO2fd3) (display . dO2fd2) (close-output-port . dO2fd1) (close-input-port . dO2fd0) (eof-object . dO2fce) (current-output-port . dO2fcc) (current-input-port . dO2fcb) (output-port? . dO2fca) (input-port? . dO2fc9) (scheme-report-environment . dOe19) (quotient . dO2f8f) (null-environment . dOe17) (remainder . dO2f8e) (modulo . dO2f8d) (inexact->exact . dO2f8c) (force . dO2f8b) (exact->inexact . dO2f8a) (make-promise . dO2f89) (string-fill! . dO2f87) (string-set! . dO2f86) (set-cdr! . dO2f85) (set-car! . dO2f84) (memv . dO2f7e) (memq . dO2f7d) (member . dO2f7b) (assv . dO2f73) (assq . dO2f72) (assoc . dO2f70) (eval . dOe1d) (zero? . dO2ead) (vector? . dO2eac) (vector-set! . dO2eab) (vector-ref . dO2eaa) (vector-length . dO2ea8) (vector-fill! . dO2ea6) (vector->list . dO2ea5) (vector . dO2ea4) (values . dO2ea3) (truncate . dO2ea2) (tan . dO2ea1) (symbol? . dO2ea0) (symbol->string . dO2e9e) (substring . dO2e9d) (string? . dO2e9c) (string>? . dO2e9b) (string>=? . dO2e9a) (string=? . dO2e99) (string<? . dO2e98) (string<=? . dO2e97) (string-ref . dO2e96) (string-length . dO2e95) (string-copy . dO2e93) (string-append . dO2e92) (string->symbol . dO2e91) (string->number . dO2e90) (string->list . dO2e8f) (string . dO2e8e) (sqrt . dO2e8d) (sin . dO2e8c) (round . dO2e8b) (reverse . dO2e8a) (real? . dO2e89) (real-part . dO2e87) (rationalize . dO2e86) (rational? . dO2e85) (procedure? . dO2e83) (positive? . dO2e82) (pair? . dO2e81) (odd? . dO2e80) (numerator . dO2e7f) (number? . dO2e7e) (number->string . dO2e7d) (not . dO2e7b) (negative? . dO2e7a) (min . dO2e78) (max . dO2e77) (map . dO2e76) (make-vector . dO2e75) (make-string . dO2e74) (make-rectangular . dO2e73) (make-polar . dO2e72) (magnitude . dO2e71) (log . dO2e70) (list? . dO2e6f) (list-tail . dO2e6e) (list-ref . dO2e6d) (list->vector . dO2e6c) (list->string . dO2e6b) (list . dO2e6a) (length . dO2e69) (lcm . dO2e68) (integer? . dO2e67) (integer->char . dO2e65) (inexact? . dO2e63) (imag-part . dO2e61) (gcd . dO2e60) (for-each . dO2e5f) (floor . dO2e5e) (expt . dO2e5c) (exp . dO2e5b) (exact? . dO2e5a) (even? . dO2e57) (eqv? . dO2e55) (equal? . dO2e54) (eq? . dO2e53) (dynamic-wind . dO2e52) (denominator . dO2e4b) (cos . dO2e4a) (cons . dO2e49) (complex? . dO2e48) (char? . dO2e47) (char>? . dO2e46) (char>=? . dO2e45) (char=? . dO2e44) (char<? . dO2e43) (char<=? . dO2e42) (char->integer . dO2e41) (ceiling . dO2e40) (call-with-values . dO2e3f) (call-with-current-continuation . dO2e3d) (cddddr . dO2e3c) (cdddar . dO2e3b) (cddadr . dO2e3a) (cddaar . dO2e39) (cdaddr . dO2e38) (cdadar . dO2e37) (cdaadr . dO2e36) (cdaaar . dO2e35) (cadddr . dO2e34) (caddar . dO2e33) (cadadr . dO2e32) (cadaar . dO2e31) (caaddr . dO2e30) (caadar . dO2e2f) (caaadr . dO2e2e) (caaaar . dO2e2d) (cdddr . dO2e2c) (cddar . dO2e2b) (cdadr . dO2e2a) (cdaar . dO2e29) (caddr . dO2e28) (cadar . dO2e27) (caadr . dO2e26) (caaar . dO2e25) (cddr . dO2e24) (cdar . dO2e23) (cadr . dO2e22) (caar . dO2e21) (cdr . dO2e20) (car . dO2e1f) (boolean? . dO2e1e) (atan . dO2e1c) (asin . dO2e1a) (apply . dO2e19) (append . dO2e18) (angle . dO2e17) (acos . dO2e16) (abs . dO2e15) (/ . dO2e14) (* . dO2e13) (- . dO2e12) (+ . dO2e11) (>= . dO2e10) (> . dO2e0f) (= . dO2e0e) (<= . dO2e0d) (< . dO2e0c) (unquote-splicing . dO2dd9) (unquote . dO2dd8) (else . dO2dd6) (=> . dO2dd5) (... . dO2dd4) (delay . dO2dd1) (do . dO2dcf) (cond . dO2dce) (let* . dO2dcd) (let . dO2dcc) (quasiquote . dO2dc6) (syntax-rules . dO2dc5) (case . dO2dc0) (or . dO2dbc) (and . dO2dbb) (if . dO2dba) (letrec . dO2db8) (lambda . dO2db5) (quote . dO2db2) (letrec-syntax . dO2db0) (let-syntax . dO2daf) (set! . dO2dae) (begin . dO2dac) (define-syntax . dO2daa) (define . dO2da9)) '() values values '#f '#f '#t '#f) (dO982@dO7ce@install-library 'dO30d0 '(psyntax modules) '() '() '() '() '((module . dO2dab)) '() values values '#f '#f '#t '#f) (dO982@dO7ce@install-library 'dO30d1 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (dO982@dO7ce@install-library 'dO30d2 '(rnrs) '(6) '() '() '() '((regexp? . dO30c5) (string-upcase . dO3026) (string-titlecase . dO3025) (string-normalize-nfkd . dO3024) (string-normalize-nfkc . dO3023) (string-normalize-nfd . dO3022) (string-normalize-nfc . dO3021) (string-foldcase . dO3020) (string-downcase . dO301f) (string-ci>? . dO301e) (string-ci>=? . dO301d) (string-ci=? . dO301c) (string-ci<? . dO301b) (string-ci<=? . dO301a) (char-whitespace? . dO3019) (char-upper-case? . dO3018) (char-title-case? . dO3017) (char-numeric? . dO3016) (char-lower-case? . dO3015) (char-general-category . dO3014) (char-upcase . dO3013) (char-titlecase . dO3012) (char-foldcase . dO3011) (char-downcase . dO3010) (char-ci>? . dO300f) (char-ci>=? . dO300e) (char-ci=? . dO300d) (char-ci<? . dO300c) (char-ci<=? . dO300b) (char-alphabetic? . dO300a) (make-variable-transformer . dOb8a) (identifier? . dOe3f) (generate-temporaries . dOe2b) (free-identifier=? . dOe2d) (syntax->datum . dOe43) (datum->syntax . dOe41) (bound-identifier=? . dOe2f) (record-type-descriptor? . dO3009) (record-predicate . dO3008) (record-mutator . dO3007) (record-constructor . dO3006) (record-accessor . dO3005) (make-record-type-descriptor . dO3004) (make-record-constructor-descriptor . dO3003) (record? . dO3002) (record-type-uid . dO3001) (record-type-sealed? . dO3000) (record-type-parent . dO2fff) (record-type-opaque? . dO2ffe) (record-type-name . dO2ffd) (record-type-generative? . dO2ffc) (record-type-field-names . dO2ffb) (record-rtd . dO2ffa) (record-field-mutable? . dO2ff9) (delete-file . dO2ff8) (file-exists? . dO2ff7) (vector-sort! . dO2ff6) (vector-sort . dO2ff5) (list-sort . dO2ff4) (symbol-hash . dO2ff3) (string-ci-hash . dO2ff2) (string-hash . dO2ff1) (equal-hash . dO2ff0) (hashtable-equivalence-function . dO2fef) (make-hashtable . dO2fee) (hashtable-hash-function . dO2fed) (make-eqv-hashtable . dO2fec) (make-eq-hashtable . dO2feb) (hashtable? . dO2fea) (hashtable-update! . dO2fe9) (hashtable-size . dO2fe8) (hashtable-set! . dO2fe7) (hashtable-ref . dO2fe6) (hashtable-mutable? . dO2fe5) (hashtable-keys . dO2fe4) (hashtable-entries . dO2fe3) (hashtable-delete! . dO2fe2) (hashtable-copy . dO2fe1) (hashtable-contains? . dO2fe0) (hashtable-clear! . dO2fdf) (call-with-output-file . dO2fde) (call-with-input-file . dO2fdd) (write-char . dO2fdc) (write . dO2fdb) (with-output-to-file . dO2fda) (with-input-from-file . dO2fd9) (read-char . dO2fd8) (read . dO2fd7) (peek-char . dO2fd6) (open-output-file . dO2fd5) (open-input-file . dO2fd4) (newline . dO2fd3) (display . dO2fd2) (close-output-port . dO2fd1) (close-input-port . dO2fd0) (eof-object? . dO2fcf) (eof-object . dO2fce) (current-error-port . dO2fcd) (current-output-port . dO2fcc) (current-input-port . dO2fcb) (output-port? . dO2fca) (input-port? . dO2fc9) (utf-8-codec . dO2fc8) (utf-16-codec . dO2fc7) (transcoder-error-handling-mode . dO2fc6) (transcoder-eol-style . dO2fc5) (transcoder-codec . dO2fc4) (transcoded-port . dO2fc3) (textual-port? . dO2fc2) (string->bytevector . dO2fc1) (standard-output-port . dO2fc0) (standard-input-port . dO2fbf) (standard-error-port . dO2fbe) (set-port-position! . dO2fbd) (put-u8 . dO2fbc) (put-string . dO2fbb) (put-datum . dO2fba) (put-char . dO2fb9) (put-bytevector . dO2fb8) (port? . dO2fb7) (port-transcoder . dO2fb6) (port-position . dO2fb5) (port-has-set-port-position!? . dO2fb4) (port-has-port-position? . dO2fb3) (port-eof? . dO2fb2) (output-port-buffer-mode . dO2fb1) (open-string-output-port . dO2fb0) (open-string-input-port . dO2faf) (open-file-output-port . dO2fae) (open-file-input/output-port . dO2fad) (open-file-input-port . dO2fac) (open-bytevector-output-port . dO2fab) (open-bytevector-input-port . dO2faa) (native-transcoder . dO2fa9) (native-eol-style . dO2fa8) (make-transcoder . dO2fa7) (latin-1-codec . dO2fa6) (make-i/o-write-error . dO2a21) (make-i/o-read-error . dO2a0c) (make-i/o-port-error . dO2ac2) (make-i/o-invalid-position-error . dO2a38) (make-i/o-filename-error . dO2a53) (make-i/o-file-protection-error . dO2a6c) (make-i/o-file-is-read-only-error . dO2a81) (make-i/o-file-does-not-exist-error . dO2aab) (make-i/o-file-already-exists-error . dO2a96) (make-i/o-error . dO29f7) (make-i/o-encoding-error . dO2af2) (make-i/o-decoding-error . dO2adb) (make-custom-textual-output-port . dO2fa5) (make-custom-textual-input/output-port . dO2fa4) (make-custom-textual-input-port . dO2fa3) (make-custom-binary-output-port . dO2fa2) (make-custom-binary-input/output-port . dO2fa1) (make-custom-binary-input-port . dO2fa0) (make-bytevector . dO2f9f) (lookahead-u8 . dO2f9e) (lookahead-char . dO2f9d) (i/o-write-error? . dO2a23) (i/o-read-error? . dO2a0e) (i/o-port-error? . dO2ac6) (i/o-invalid-position-error? . dO2a3c) (i/o-filename-error? . dO2a57) (i/o-file-protection-error? . dO2a6e) (i/o-file-is-read-only-error? . dO2a83) (i/o-file-does-not-exist-error? . dO2aad) (i/o-file-already-exists-error? . dO2a98) (i/o-error? . dO29f9) (i/o-error-position . dO2a3e) (i/o-error-port . dO2ac8) (i/o-error-filename . dO2a59) (i/o-encoding-error? . dO2af6) (i/o-encoding-error-char . dO2af8) (i/o-decoding-error? . dO2add) (get-u8 . dO2f9c) (get-string-n! . dO2f9b) (get-string-n . dO2f9a) (get-string-all . dO2f99) (get-line . dO2f98) (get-datum . dO2f97) (get-char . dO2f96) (get-bytevector-some . dO2f95) (get-bytevector-n! . dO2f94) (get-bytevector-n . dO2f93) (get-bytevector-all . dO2f92) (flush-output-port . dO2f91) (close-port . dO2f90) (exit . dO2f88) (command-line . dO2c2d) (remove . dO2f83) (remv . dO2f82) (remp . dO2f81) (remq . dO2f80) (partition . dO2f7f) (memv . dO2f7e) (memq . dO2f7d) (memp . dO2f7c) (member . dO2f7b) (exists . dO2f7a) (for-all . dO2f79) (fold-right . dO2f78) (fold-left . dO2f77) (find . dO2f76) (filter . dO2f75) (cons* . dO2f74) (assv . dO2f73) (assq . dO2f72) (assp . dO2f71) (assoc . dO2f70) (call-with-string-output-port . dO2f6f) (call-with-port . dO2f6e) (call-with-bytevector-output-port . dO2f6d) (bytevector->string . dO2f6c) (buffer-mode? . dO2f6b) (binary-port? . dO2f6a) (with-exception-handler . dO2f69) (raise-continuable . dO2f68) (raise . dO2f67) (make-enumeration . dO2f66) (enum-set=? . dO2f65) (enum-set-universe . dO2f64) (enum-set-union . dO2f63) (enum-set-subset? . dO2f62) (enum-set-projection . dO2f61) (enum-set-member? . dO2f60) (enum-set-intersection . dO2f5f) (enum-set-indexer . dO2f5e) (enum-set-difference . dO2f5d) (enum-set-constructor . dO2f5c) (enum-set-complement . dO2f5b) (enum-set->list . dO2f5a) (who-condition? . dO296d) (warning? . dO28e5) (violation? . dO2924) (undefined-violation? . dO29e4) (syntax-violation? . dO29cb) (syntax-violation-subform . dO29cf) (syntax-violation-form . dO29cd) (syntax-violation . dOe3d) (simple-conditions . dO2f59) (serious-condition? . dO28fa) (non-continuable-violation? . dO2984) (message-condition? . dO28ce) (make-who-condition . dO2969) (make-warning . dO28e3) (make-violation . dO2922) (make-undefined-violation . dO29e2) (make-syntax-violation . dO29c5) (make-serious-condition . dO28f8) (make-non-continuable-violation . dO2982) (make-message-condition . dO28ca) (make-lexical-violation . dO29ac) (make-irritants-condition . dO294e) (make-implementation-restriction-violation . dO2997) (make-error . dO290d) (make-assertion-violation . dO2937) (lexical-violation? . dO29ae) (irritants-condition? . dO2952) (implementation-restriction-violation? . dO2999) (error? . dO290f) (condition-who . dO296f) (condition-predicate . dO2f58) (condition-message . dO28d0) (condition-irritants . dO2954) (condition-accessor . dO2f57) (condition . dO2f56) (assertion-violation? . dO2939) (condition? . dO2f55) (utf32->string . dO2f54) (utf16->string . dO2f53) (utf8->string . dO2f52) (uint-list->bytevector . dO2f51) (u8-list->bytevector . dO2f50) (string->utf8 . dO2f4f) (string->utf32 . dO2f4e) (string->utf16 . dO2f4d) (sint-list->bytevector . dO2f4c) (native-endianness . dO2f4b) (bytevector? . dO2f4a) (bytevector=? . dO2f49) (bytevector-uint-set! . dO2f48) (bytevector-uint-ref . dO2f47) (bytevector-u8-set! . dO2f46) (bytevector-u8-ref . dO2f45) (bytevector-u64-set! . dO2f44) (bytevector-u64-ref . dO2f43) (bytevector-u64-native-set! . dO2f42) (bytevector-u64-native-ref . dO2f41) (bytevector-u32-set! . dO2f40) (bytevector-u32-ref . dO2f3f) (bytevector-u32-native-set! . dO2f3e) (bytevector-u32-native-ref . dO2f3d) (bytevector-u16-set! . dO2f3c) (bytevector-u16-ref . dO2f3b) (bytevector-u16-native-set! . dO2f3a) (bytevector-u16-native-ref . dO2f39) (bytevector-sint-set! . dO2f38) (bytevector-sint-ref . dO2f37) (bytevector-s8-set! . dO2f36) (bytevector-s8-ref . dO2f35) (bytevector-s64-set! . dO2f34) (bytevector-s64-ref . dO2f33) (bytevector-s64-native-set! . dO2f32) (bytevector-s64-native-ref . dO2f31) (bytevector-s32-set! . dO2f30) (bytevector-s32-ref . dO2f2f) (bytevector-s32-native-set! . dO2f2e) (bytevector-s32-native-ref . dO2f2d) (bytevector-s16-set! . dO2f2c) (bytevector-s16-ref . dO2f2b) (bytevector-s16-native-set! . dO2f2a) (bytevector-s16-native-ref . dO2f29) (bytevector-length . dO2f28) (bytevector-ieee-single-ref . dO2f27) (bytevector-ieee-single-set! . dO2f26) (bytevector-ieee-single-native-set! . dO2f25) (bytevector-ieee-single-native-ref . dO2f24) (bytevector-ieee-double-set! . dO2f23) (bytevector-ieee-double-ref . dO2f22) (bytevector-ieee-double-native-set! . dO2f21) (bytevector-ieee-double-native-ref . dO2f20) (bytevector-fill! . dO2f1f) (bytevector-copy! . dO2f1e) (bytevector-copy . dO2f1d) (bytevector->uint-list . dO2f1c) (bytevector->u8-list . dO2f1b) (bytevector->sint-list . dO2f1a) (no-nans-violation? . dO2b22) (no-infinities-violation? . dO2b0d) (make-no-nans-violation . dO2b20) (make-no-infinities-violation . dO2b0b) (real->flonum . dO2f19) (flzero? . dO2f18) (fltruncate . dO2f17) (fltan . dO2f16) (flsqrt . dO2f15) (flsin . dO2f14) (flround . dO2f13) (flpositive? . dO2f12) (flonum? . dO2f11) (flodd? . dO2f10) (flnumerator . dO2f0f) (flnegative? . dO2f0e) (flnan? . dO2f0d) (flmod0 . dO2f0c) (flmod . dO2f0b) (flmin . dO2f0a) (flmax . dO2f09) (fllog . dO2f08) (flinteger? . dO2f07) (flinfinite? . dO2f06) (flfloor . dO2f05) (flfinite? . dO2f04) (flexpt . dO2f03) (flexp . dO2f02) (fleven? . dO2f01) (fldiv0-and-mod0 . dO2f00) (fldiv0 . dO2eff) (fldiv-and-mod . dO2efe) (fldiv . dO2efd) (fldenominator . dO2efc) (flcos . dO2efb) (flceiling . dO2efa) (flatan . dO2ef9) (flasin . dO2ef8) (flacos . dO2ef7) (flabs . dO2ef6) (fl>? . dO2ef5) (fl>=? . dO2ef4) (fl=? . dO2ef3) (fl<? . dO2ef2) (fl<=? . dO2ef1) (fl/ . dO2ef0) (fl- . dO2eef) (fl+ . dO2eee) (fl* . dO2eed) (fixnum->flonum . dO2eec) (fxzero? . dO2eeb) (fxxor . dO2eea) (fxrotate-bit-field . dO2ee9) (fxreverse-bit-field . dO2ee8) (fxpositive? . dO2ee7) (fxodd? . dO2ee6) (fxnot . dO2ee5) (fxnegative? . dO2ee4) (fxmod0 . dO2ee3) (fxmod . dO2ee2) (fxmin . dO2ee1) (fxmax . dO2ee0) (fxlength . dO2edf) (fxior . dO2ede) (fxif . dO2edd) (fxfirst-bit-set . dO2edc) (fxeven? . dO2edb) (fxdiv0-and-mod0 . dO2eda) (fxdiv0 . dO2ed9) (fxdiv-and-mod . dO2ed8) (fxdiv . dO2ed7) (fxcopy-bit-field . dO2ed6) (fxcopy-bit . dO2ed5) (fxbit-set? . dO2ed4) (fxbit-field . dO2ed3) (fxbit-count . dO2ed2) (fxarithmetic-shift-right . dO2ed1) (fxarithmetic-shift-left . dO2ed0) (fxarithmetic-shift . dO2ecf) (fxand . dO2ece) (fx>? . dO2ecd) (fx>=? . dO2ecc) (fx=? . dO2ecb) (fx<? . dO2eca) (fx<=? . dO2ec9) (fx-/carry . dO2ec8) (fx- . dO2ec7) (fx+/carry . dO2ec6) (fx+ . dO2ec5) (fx*/carry . dO2ec4) (fx* . dO2ec3) (greatest-fixnum . dO2ec2) (least-fixnum . dO2ec1) (fixnum-width . dO2ec0) (fixnum? . dO2ebf) (bitwise-rotate-bit-field . dO2ebe) (bitwise-reverse-bit-field . dO2ebd) (bitwise-length . dO2ebc) (bitwise-if . dO2ebb) (bitwise-first-bit-set . dO2eba) (bitwise-copy-bit-field . dO2eb9) (bitwise-copy-bit . dO2eb8) (bitwise-bit-set? . dO2eb7) (bitwise-bit-field . dO2eb6) (bitwise-bit-count . dO2eb5) (bitwise-xor . dO2eb4) (bitwise-ior . dO2eb3) (bitwise-and . dO2eb2) (bitwise-not . dO2eb1) (bitwise-arithmetic-shift-right . dO2eb0) (bitwise-arithmetic-shift-left . dO2eaf) (bitwise-arithmetic-shift . dO2eae) (zero? . dO2ead) (vector? . dO2eac) (vector-set! . dO2eab) (vector-ref . dO2eaa) (vector-map . dO2ea9) (vector-length . dO2ea8) (vector-for-each . dO2ea7) (vector-fill! . dO2ea6) (vector->list . dO2ea5) (vector . dO2ea4) (values . dO2ea3) (truncate . dO2ea2) (tan . dO2ea1) (symbol? . dO2ea0) (symbol=? . dO2e9f) (symbol->string . dO2e9e) (substring . dO2e9d) (string? . dO2e9c) (string>? . dO2e9b) (string>=? . dO2e9a) (string=? . dO2e99) (string<? . dO2e98) (string<=? . dO2e97) (string-ref . dO2e96) (string-length . dO2e95) (string-for-each . dO2e94) (string-copy . dO2e93) (string-append . dO2e92) (string->symbol . dO2e91) (string->number . dO2e90) (string->list . dO2e8f) (string . dO2e8e) (sqrt . dO2e8d) (sin . dO2e8c) (round . dO2e8b) (reverse . dO2e8a) (real? . dO2e89) (real-valued? . dO2e88) (real-part . dO2e87) (rationalize . dO2e86) (rational? . dO2e85) (rational-valued? . dO2e84) (procedure? . dO2e83) (positive? . dO2e82) (pair? . dO2e81) (odd? . dO2e80) (numerator . dO2e7f) (number? . dO2e7e) (number->string . dO2e7d) (null? . dO2e7c) (not . dO2e7b) (negative? . dO2e7a) (nan? . dO2e79) (min . dO2e78) (max . dO2e77) (map . dO2e76) (make-vector . dO2e75) (make-string . dO2e74) (make-rectangular . dO2e73) (make-polar . dO2e72) (magnitude . dO2e71) (log . dO2e70) (list? . dO2e6f) (list-tail . dO2e6e) (list-ref . dO2e6d) (list->vector . dO2e6c) (list->string . dO2e6b) (list . dO2e6a) (length . dO2e69) (lcm . dO2e68) (integer? . dO2e67) (integer-valued? . dO2e66) (integer->char . dO2e65) (infinite? . dO2e64) (inexact? . dO2e63) (inexact . dO2e62) (imag-part . dO2e61) (gcd . dO2e60) (for-each . dO2e5f) (floor . dO2e5e) (finite? . dO2e5d) (expt . dO2e5c) (exp . dO2e5b) (exact? . dO2e5a) (exact-integer-sqrt . dO2e59) (exact . dO2e58) (even? . dO2e57) (error . dO2e56) (eqv? . dO2e55) (equal? . dO2e54) (eq? . dO2e53) (dynamic-wind . dO2e52) (div0-and-mod0 . dO2e51) (mod0 . dO2e50) (div0 . dO2e4f) (div-and-mod . dO2e4e) (mod . dO2e4d) (div . dO2e4c) (denominator . dO2e4b) (cos . dO2e4a) (cons . dO2e49) (complex? . dO2e48) (char? . dO2e47) (char>? . dO2e46) (char>=? . dO2e45) (char=? . dO2e44) (char<? . dO2e43) (char<=? . dO2e42) (char->integer . dO2e41) (ceiling . dO2e40) (call-with-values . dO2e3f) (call/cc . dO2e3e) (call-with-current-continuation . dO2e3d) (cddddr . dO2e3c) (cdddar . dO2e3b) (cddadr . dO2e3a) (cddaar . dO2e39) (cdaddr . dO2e38) (cdadar . dO2e37) (cdaadr . dO2e36) (cdaaar . dO2e35) (cadddr . dO2e34) (caddar . dO2e33) (cadadr . dO2e32) (cadaar . dO2e31) (caaddr . dO2e30) (caadar . dO2e2f) (caaadr . dO2e2e) (caaaar . dO2e2d) (cdddr . dO2e2c) (cddar . dO2e2b) (cdadr . dO2e2a) (cdaar . dO2e29) (caddr . dO2e28) (cadar . dO2e27) (caadr . dO2e26) (caaar . dO2e25) (cddr . dO2e24) (cdar . dO2e23) (cadr . dO2e22) (caar . dO2e21) (cdr . dO2e20) (car . dO2e1f) (boolean? . dO2e1e) (boolean=? . dO2e1d) (atan . dO2e1c) (assertion-violation . dO2e1b) (asin . dO2e1a) (apply . dO2e19) (append . dO2e18) (angle . dO2e17) (acos . dO2e16) (abs . dO2e15) (/ . dO2e14) (* . dO2e13) (- . dO2e12) (+ . dO2e11) (>= . dO2e10) (> . dO2e0f) (= . dO2e0e) (<= . dO2e0d) (< . dO2e0c) (&no-nans . dO2e0a) (&no-infinities . dO2e09) (&i/o-encoding . dO2e08) (&i/o-decoding . dO2e07) (&i/o-port . dO2e06) (&i/o-file-does-not-exist . dO2e05) (&i/o-file-already-exists . dO2e04) (&i/o-file-is-read-only . dO2e03) (&i/o-file-protection . dO2e02) (&i/o-filename . dO2e01) (&i/o-invalid-position . dO2e00) (&i/o-write . dO2dff) (&i/o-read . dO2dfe) (&i/o . dO2dfd) (&undefined . dO2dfc) (&syntax . dO2dfb) (&lexical . dO2dfa) (&implementation-restriction . dO2df9) (&non-continuable . dO2df8) (&who . dO2df7) (&irritants . dO2df6) (&assertion . dO2df5) (&violation . dO2df4) (&error . dO2df3) (&serious . dO2df2) (&warning . dO2df1) (&message . dO2df0) (&condition . dO2def) (define-condition-type . dO2dee) (define-enumeration . dO2ded) (define-record-type . dO2dec) (parent-rtd . dO2deb) (nongenerative . dO2dea) (opaque . dO2de9) (sealed . dO2de8) (protocol . dO2de7) (parent . dO2de6) (immutable . dO2de5) (mutable . dO2de4) (fields . dO2de3) (error-handling-mode . dO2de2) (file-options . dO2de1) (buffer-mode . dO2de0) (eol-style . dO2ddf) (guard . dO2dde) (unsyntax-splicing . dO2ddb) (unsyntax . dO2dda) (unquote-splicing . dO2dd9) (unquote . dO2dd8) (_ . dO2dd7) (else . dO2dd6) (=> . dO2dd5) (... . dO2dd4) (assert . dO2dd3) (endianness . dO2dd2) (do . dO2dcf) (cond . dO2dce) (let* . dO2dcd) (let . dO2dcc) (let*-values . dO2dcb) (let-values . dO2dca) (identifier-syntax . dO2dc9) (with-syntax . dO2dc8) (quasisyntax . dO2dc7) (quasiquote . dO2dc6) (syntax-rules . dO2dc5) (record-constructor-descriptor . dO2dc2) (record-type-descriptor . dO2dc1) (case . dO2dc0) (unless . dO2dbe) (when . dO2dbd) (or . dO2dbc) (and . dO2dbb) (if . dO2dba) (letrec* . dO2db9) (letrec . dO2db8) (case-lambda . dO2db6) (lambda . dO2db5) (syntax . dO2db4) (syntax-case . dO2db3) (quote . dO2db2) (letrec-syntax . dO2db0) (let-syntax . dO2daf) (set! . dO2dae) (begin . dO2dac) (define-syntax . dO2daa) (define . dO2da9)) '() values values '#f '#f '#t '#f) (dO982@dO7ce@install-library 'dO30d3 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . dOe19) (quotient . dO2f8f) (null-environment . dOe17) (remainder . dO2f8e) (modulo . dO2f8d) (inexact->exact . dO2f8c) (force . dO2f8b) (exact->inexact . dO2f8a) (make-promise . dO2f89) (delay . dO2dd1)) '() values values '#f '#f '#t '#f) (dO982@dO7ce@install-library 'dO30d4 '(rnrs control) '(6) '() '() '() '((do . dO2dcf) (unless . dO2dbe) (when . dO2dbd) (case-lambda . dO2db6)) '() values values '#f '#f '#t '#f) (dO982@dO7ce@install-library 'dO30d5 '(rnrs eval) '(6) '() '() '() '((eval . dOe1d) (environment . dOe15)) '() values values '#f '#f '#t '#f) (dO982@dO7ce@install-library 'dO30d6 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . dO2f85) (set-car! . dO2f84)) '() values values '#f '#f '#t '#f) (dO982@dO7ce@install-library 'dO30d7 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . dO2f87) (string-set! . dO2f86)) '() values values '#f '#f '#t '#f) (dO982@dO7ce@install-library 'dO30d8 '(rnrs programs) '(6) '() '() '() '((exit . dO2f88) (command-line . dO2c2d)) '() values values '#f '#f '#t '#f) (dO982@dO7ce@install-library 'dO30d9 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . dOb8a) (identifier? . dOe3f) (generate-temporaries . dOe2b) (free-identifier=? . dOe2d) (syntax->datum . dOe43) (datum->syntax . dOe41) (bound-identifier=? . dOe2f) (syntax-violation . dOe3d) (unsyntax-splicing . dO2ddb) (unsyntax . dO2dda) (_ . dO2dd7) (... . dO2dd4) (with-syntax . dO2dc8) (quasisyntax . dO2dc7) (syntax . dO2db4) (syntax-case . dO2db3)) '() values values '#f '#f '#t '#f) (dO982@dO7ce@install-library 'dO30da '(rnrs files) '(6) '() '() '() '((delete-file . dO2ff8) (file-exists? . dO2ff7) (make-i/o-write-error . dO2a21) (make-i/o-read-error . dO2a0c) (make-i/o-port-error . dO2ac2) (make-i/o-invalid-position-error . dO2a38) (make-i/o-filename-error . dO2a53) (make-i/o-file-protection-error . dO2a6c) (make-i/o-file-is-read-only-error . dO2a81) (make-i/o-file-does-not-exist-error . dO2aab) (make-i/o-file-already-exists-error . dO2a96) (make-i/o-error . dO29f7) (i/o-write-error? . dO2a23) (i/o-read-error? . dO2a0e) (i/o-port-error? . dO2ac6) (i/o-invalid-position-error? . dO2a3c) (i/o-filename-error? . dO2a57) (i/o-file-protection-error? . dO2a6e) (i/o-file-is-read-only-error? . dO2a83) (i/o-file-does-not-exist-error? . dO2aad) (i/o-file-already-exists-error? . dO2a98) (i/o-error? . dO29f9) (i/o-error-position . dO2a3e) (i/o-error-port . dO2ac8) (i/o-error-filename . dO2a59) (&i/o-port . dO2e06) (&i/o-file-does-not-exist . dO2e05) (&i/o-file-already-exists . dO2e04) (&i/o-file-is-read-only . dO2e03) (&i/o-file-protection . dO2e02) (&i/o-filename . dO2e01) (&i/o-invalid-position . dO2e00) (&i/o-write . dO2dff) (&i/o-read . dO2dfe) (&i/o . dO2dfd)) '() values values '#f '#f '#t '#f) (dO982@dO7ce@install-library 'dO30db '(rnrs sorting) '(6) '() '() '() '((vector-sort! . dO2ff6) (vector-sort . dO2ff5) (list-sort . dO2ff4)) '() values values '#f '#f '#t '#f) (dO982@dO7ce@install-library 'dO30dc '(rnrs base) '(6) '() '() '() '((zero? . dO2ead) (vector? . dO2eac) (vector-set! . dO2eab) (vector-ref . dO2eaa) (vector-map . dO2ea9) (vector-length . dO2ea8) (vector-for-each . dO2ea7) (vector-fill! . dO2ea6) (vector->list . dO2ea5) (vector . dO2ea4) (values . dO2ea3) (truncate . dO2ea2) (tan . dO2ea1) (symbol? . dO2ea0) (symbol=? . dO2e9f) (symbol->string . dO2e9e) (substring . dO2e9d) (string? . dO2e9c) (string>? . dO2e9b) (string>=? . dO2e9a) (string=? . dO2e99) (string<? . dO2e98) (string<=? . dO2e97) (string-ref . dO2e96) (string-length . dO2e95) (string-for-each . dO2e94) (string-copy . dO2e93) (string-append . dO2e92) (string->symbol . dO2e91) (string->number . dO2e90) (string->list . dO2e8f) (string . dO2e8e) (sqrt . dO2e8d) (sin . dO2e8c) (round . dO2e8b) (reverse . dO2e8a) (real? . dO2e89) (real-valued? . dO2e88) (real-part . dO2e87) (rationalize . dO2e86) (rational? . dO2e85) (rational-valued? . dO2e84) (procedure? . dO2e83) (positive? . dO2e82) (pair? . dO2e81) (odd? . dO2e80) (numerator . dO2e7f) (number? . dO2e7e) (number->string . dO2e7d) (null? . dO2e7c) (not . dO2e7b) (negative? . dO2e7a) (nan? . dO2e79) (min . dO2e78) (max . dO2e77) (map . dO2e76) (make-vector . dO2e75) (make-string . dO2e74) (make-rectangular . dO2e73) (make-polar . dO2e72) (magnitude . dO2e71) (log . dO2e70) (list? . dO2e6f) (list-tail . dO2e6e) (list-ref . dO2e6d) (list->vector . dO2e6c) (list->string . dO2e6b) (list . dO2e6a) (length . dO2e69) (lcm . dO2e68) (integer? . dO2e67) (integer-valued? . dO2e66) (integer->char . dO2e65) (infinite? . dO2e64) (inexact? . dO2e63) (inexact . dO2e62) (imag-part . dO2e61) (gcd . dO2e60) (for-each . dO2e5f) (floor . dO2e5e) (finite? . dO2e5d) (expt . dO2e5c) (exp . dO2e5b) (exact? . dO2e5a) (exact-integer-sqrt . dO2e59) (exact . dO2e58) (even? . dO2e57) (error . dO2e56) (eqv? . dO2e55) (equal? . dO2e54) (eq? . dO2e53) (dynamic-wind . dO2e52) (div0-and-mod0 . dO2e51) (mod0 . dO2e50) (div0 . dO2e4f) (div-and-mod . dO2e4e) (mod . dO2e4d) (div . dO2e4c) (denominator . dO2e4b) (cos . dO2e4a) (cons . dO2e49) (complex? . dO2e48) (char? . dO2e47) (char>? . dO2e46) (char>=? . dO2e45) (char=? . dO2e44) (char<? . dO2e43) (char<=? . dO2e42) (char->integer . dO2e41) (ceiling . dO2e40) (call-with-values . dO2e3f) (call/cc . dO2e3e) (call-with-current-continuation . dO2e3d) (cddddr . dO2e3c) (cdddar . dO2e3b) (cddadr . dO2e3a) (cddaar . dO2e39) (cdaddr . dO2e38) (cdadar . dO2e37) (cdaadr . dO2e36) (cdaaar . dO2e35) (cadddr . dO2e34) (caddar . dO2e33) (cadadr . dO2e32) (cadaar . dO2e31) (caaddr . dO2e30) (caadar . dO2e2f) (caaadr . dO2e2e) (caaaar . dO2e2d) (cdddr . dO2e2c) (cddar . dO2e2b) (cdadr . dO2e2a) (cdaar . dO2e29) (caddr . dO2e28) (cadar . dO2e27) (caadr . dO2e26) (caaar . dO2e25) (cddr . dO2e24) (cdar . dO2e23) (cadr . dO2e22) (caar . dO2e21) (cdr . dO2e20) (car . dO2e1f) (boolean? . dO2e1e) (boolean=? . dO2e1d) (atan . dO2e1c) (assertion-violation . dO2e1b) (asin . dO2e1a) (apply . dO2e19) (append . dO2e18) (angle . dO2e17) (acos . dO2e16) (abs . dO2e15) (/ . dO2e14) (* . dO2e13) (- . dO2e12) (+ . dO2e11) (>= . dO2e10) (> . dO2e0f) (= . dO2e0e) (<= . dO2e0d) (< . dO2e0c) (unquote-splicing . dO2dd9) (unquote . dO2dd8) (_ . dO2dd7) (else . dO2dd6) (=> . dO2dd5) (... . dO2dd4) (assert . dO2dd3) (cond . dO2dce) (let* . dO2dcd) (let . dO2dcc) (let*-values . dO2dcb) (let-values . dO2dca) (identifier-syntax . dO2dc9) (quasiquote . dO2dc6) (syntax-rules . dO2dc5) (case . dO2dc0) (or . dO2dbc) (and . dO2dbb) (if . dO2dba) (letrec* . dO2db9) (letrec . dO2db8) (lambda . dO2db5) (quote . dO2db2) (letrec-syntax . dO2db0) (let-syntax . dO2daf) (set! . dO2dae) (begin . dO2dac) (define-syntax . dO2daa) (define . dO2da9)) '() values values '#f '#f '#t '#f) (dO982@dO7ce@install-library 'dO30dd '(rnrs lists) '(6) '() '() '() '((remove . dO2f83) (remv . dO2f82) (remp . dO2f81) (remq . dO2f80) (partition . dO2f7f) (memv . dO2f7e) (memq . dO2f7d) (memp . dO2f7c) (member . dO2f7b) (exists . dO2f7a) (for-all . dO2f79) (fold-right . dO2f78) (fold-left . dO2f77) (find . dO2f76) (filter . dO2f75) (cons* . dO2f74) (assv . dO2f73) (assq . dO2f72) (assp . dO2f71) (assoc . dO2f70)) '() values values '#f '#f '#t '#f) (dO982@dO7ce@install-library 'dO30de '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . dO2fde) (call-with-input-file . dO2fdd) (write-char . dO2fdc) (write . dO2fdb) (with-output-to-file . dO2fda) (with-input-from-file . dO2fd9) (read-char . dO2fd8) (read . dO2fd7) (peek-char . dO2fd6) (open-output-file . dO2fd5) (open-input-file . dO2fd4) (newline . dO2fd3) (display . dO2fd2) (close-output-port . dO2fd1) (close-input-port . dO2fd0) (eof-object? . dO2fcf) (eof-object . dO2fce) (current-error-port . dO2fcd) (current-output-port . dO2fcc) (current-input-port . dO2fcb) (output-port? . dO2fca) (input-port? . dO2fc9) (make-i/o-write-error . dO2a21) (make-i/o-read-error . dO2a0c) (make-i/o-port-error . dO2ac2) (make-i/o-invalid-position-error . dO2a38) (make-i/o-filename-error . dO2a53) (make-i/o-file-protection-error . dO2a6c) (make-i/o-file-is-read-only-error . dO2a81) (make-i/o-file-does-not-exist-error . dO2aab) (make-i/o-file-already-exists-error . dO2a96) (make-i/o-error . dO29f7) (i/o-write-error? . dO2a23) (i/o-read-error? . dO2a0e) (i/o-port-error? . dO2ac6) (i/o-invalid-position-error? . dO2a3c) (i/o-filename-error? . dO2a57) (i/o-file-protection-error? . dO2a6e) (i/o-file-is-read-only-error? . dO2a83) (i/o-file-does-not-exist-error? . dO2aad) (i/o-file-already-exists-error? . dO2a98) (i/o-error? . dO29f9) (i/o-error-position . dO2a3e) (i/o-error-port . dO2ac8) (i/o-error-filename . dO2a59) (&i/o-port . dO2e06) (&i/o-file-does-not-exist . dO2e05) (&i/o-file-already-exists . dO2e04) (&i/o-file-is-read-only . dO2e03) (&i/o-file-protection . dO2e02) (&i/o-filename . dO2e01) (&i/o-invalid-position . dO2e00) (&i/o-write . dO2dff) (&i/o-read . dO2dfe) (&i/o . dO2dfd)) '() values values '#f '#f '#t '#f) (dO982@dO7ce@install-library 'dO30df '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . dO2f9f) (utf32->string . dO2f54) (utf16->string . dO2f53) (utf8->string . dO2f52) (uint-list->bytevector . dO2f51) (u8-list->bytevector . dO2f50) (string->utf8 . dO2f4f) (string->utf32 . dO2f4e) (string->utf16 . dO2f4d) (sint-list->bytevector . dO2f4c) (native-endianness . dO2f4b) (bytevector? . dO2f4a) (bytevector=? . dO2f49) (bytevector-uint-set! . dO2f48) (bytevector-uint-ref . dO2f47) (bytevector-u8-set! . dO2f46) (bytevector-u8-ref . dO2f45) (bytevector-u64-set! . dO2f44) (bytevector-u64-ref . dO2f43) (bytevector-u64-native-set! . dO2f42) (bytevector-u64-native-ref . dO2f41) (bytevector-u32-set! . dO2f40) (bytevector-u32-ref . dO2f3f) (bytevector-u32-native-set! . dO2f3e) (bytevector-u32-native-ref . dO2f3d) (bytevector-u16-set! . dO2f3c) (bytevector-u16-ref . dO2f3b) (bytevector-u16-native-set! . dO2f3a) (bytevector-u16-native-ref . dO2f39) (bytevector-sint-set! . dO2f38) (bytevector-sint-ref . dO2f37) (bytevector-s8-set! . dO2f36) (bytevector-s8-ref . dO2f35) (bytevector-s64-set! . dO2f34) (bytevector-s64-ref . dO2f33) (bytevector-s64-native-set! . dO2f32) (bytevector-s64-native-ref . dO2f31) (bytevector-s32-set! . dO2f30) (bytevector-s32-ref . dO2f2f) (bytevector-s32-native-set! . dO2f2e) (bytevector-s32-native-ref . dO2f2d) (bytevector-s16-set! . dO2f2c) (bytevector-s16-ref . dO2f2b) (bytevector-s16-native-set! . dO2f2a) (bytevector-s16-native-ref . dO2f29) (bytevector-length . dO2f28) (bytevector-ieee-single-ref . dO2f27) (bytevector-ieee-single-set! . dO2f26) (bytevector-ieee-single-native-set! . dO2f25) (bytevector-ieee-single-native-ref . dO2f24) (bytevector-ieee-double-set! . dO2f23) (bytevector-ieee-double-ref . dO2f22) (bytevector-ieee-double-native-set! . dO2f21) (bytevector-ieee-double-native-ref . dO2f20) (bytevector-fill! . dO2f1f) (bytevector-copy! . dO2f1e) (bytevector-copy . dO2f1d) (bytevector->uint-list . dO2f1c) (bytevector->u8-list . dO2f1b) (bytevector->sint-list . dO2f1a) (endianness . dO2dd2)) '() values values '#f '#f '#t '#f) (dO982@dO7ce@install-library 'dO30e0 '(rnrs unicode) '(6) '() '() '() '((string-upcase . dO3026) (string-titlecase . dO3025) (string-normalize-nfkd . dO3024) (string-normalize-nfkc . dO3023) (string-normalize-nfd . dO3022) (string-normalize-nfc . dO3021) (string-foldcase . dO3020) (string-downcase . dO301f) (string-ci>? . dO301e) (string-ci>=? . dO301d) (string-ci=? . dO301c) (string-ci<? . dO301b) (string-ci<=? . dO301a) (char-whitespace? . dO3019) (char-upper-case? . dO3018) (char-title-case? . dO3017) (char-numeric? . dO3016) (char-lower-case? . dO3015) (char-general-category . dO3014) (char-upcase . dO3013) (char-titlecase . dO3012) (char-foldcase . dO3011) (char-downcase . dO3010) (char-ci>? . dO300f) (char-ci>=? . dO300e) (char-ci=? . dO300d) (char-ci<? . dO300c) (char-ci<=? . dO300b) (char-alphabetic? . dO300a)) '() values values '#f '#f '#t '#f) (dO982@dO7ce@install-library 'dO30e1 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . dO2f69) (raise-continuable . dO2f68) (raise . dO2f67) (guard . dO2dde) (else . dO2dd6) (=> . dO2dd5)) '() values values '#f '#f '#t '#f) (dO982@dO7ce@install-library 'dO30e2 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . dO2ebe) (bitwise-reverse-bit-field . dO2ebd) (bitwise-length . dO2ebc) (bitwise-if . dO2ebb) (bitwise-first-bit-set . dO2eba) (bitwise-copy-bit-field . dO2eb9) (bitwise-copy-bit . dO2eb8) (bitwise-bit-set? . dO2eb7) (bitwise-bit-field . dO2eb6) (bitwise-bit-count . dO2eb5) (bitwise-xor . dO2eb4) (bitwise-ior . dO2eb3) (bitwise-and . dO2eb2) (bitwise-not . dO2eb1) (bitwise-arithmetic-shift-right . dO2eb0) (bitwise-arithmetic-shift-left . dO2eaf) (bitwise-arithmetic-shift . dO2eae)) '() values values '#f '#f '#t '#f) (dO982@dO7ce@install-library 'dO30e3 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . dO2eeb) (fxxor . dO2eea) (fxrotate-bit-field . dO2ee9) (fxreverse-bit-field . dO2ee8) (fxpositive? . dO2ee7) (fxodd? . dO2ee6) (fxnot . dO2ee5) (fxnegative? . dO2ee4) (fxmod0 . dO2ee3) (fxmod . dO2ee2) (fxmin . dO2ee1) (fxmax . dO2ee0) (fxlength . dO2edf) (fxior . dO2ede) (fxif . dO2edd) (fxfirst-bit-set . dO2edc) (fxeven? . dO2edb) (fxdiv0-and-mod0 . dO2eda) (fxdiv0 . dO2ed9) (fxdiv-and-mod . dO2ed8) (fxdiv . dO2ed7) (fxcopy-bit-field . dO2ed6) (fxcopy-bit . dO2ed5) (fxbit-set? . dO2ed4) (fxbit-field . dO2ed3) (fxbit-count . dO2ed2) (fxarithmetic-shift-right . dO2ed1) (fxarithmetic-shift-left . dO2ed0) (fxarithmetic-shift . dO2ecf) (fxand . dO2ece) (fx>? . dO2ecd) (fx>=? . dO2ecc) (fx=? . dO2ecb) (fx<? . dO2eca) (fx<=? . dO2ec9) (fx-/carry . dO2ec8) (fx- . dO2ec7) (fx+/carry . dO2ec6) (fx+ . dO2ec5) (fx*/carry . dO2ec4) (fx* . dO2ec3) (greatest-fixnum . dO2ec2) (least-fixnum . dO2ec1) (fixnum-width . dO2ec0) (fixnum? . dO2ebf)) '() values values '#f '#f '#t '#f) (dO982@dO7ce@install-library 'dO30e4 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . dO2b22) (no-infinities-violation? . dO2b0d) (make-no-nans-violation . dO2b20) (make-no-infinities-violation . dO2b0b) (real->flonum . dO2f19) (flzero? . dO2f18) (fltruncate . dO2f17) (fltan . dO2f16) (flsqrt . dO2f15) (flsin . dO2f14) (flround . dO2f13) (flpositive? . dO2f12) (flonum? . dO2f11) (flodd? . dO2f10) (flnumerator . dO2f0f) (flnegative? . dO2f0e) (flnan? . dO2f0d) (flmod0 . dO2f0c) (flmod . dO2f0b) (flmin . dO2f0a) (flmax . dO2f09) (fllog . dO2f08) (flinteger? . dO2f07) (flinfinite? . dO2f06) (flfloor . dO2f05) (flfinite? . dO2f04) (flexpt . dO2f03) (flexp . dO2f02) (fleven? . dO2f01) (fldiv0-and-mod0 . dO2f00) (fldiv0 . dO2eff) (fldiv-and-mod . dO2efe) (fldiv . dO2efd) (fldenominator . dO2efc) (flcos . dO2efb) (flceiling . dO2efa) (flatan . dO2ef9) (flasin . dO2ef8) (flacos . dO2ef7) (flabs . dO2ef6) (fl>? . dO2ef5) (fl>=? . dO2ef4) (fl=? . dO2ef3) (fl<? . dO2ef2) (fl<=? . dO2ef1) (fl/ . dO2ef0) (fl- . dO2eef) (fl+ . dO2eee) (fl* . dO2eed) (fixnum->flonum . dO2eec) (&no-nans . dO2e0a) (&no-infinities . dO2e09)) '() values values '#f '#f '#t '#f) (dO982@dO7ce@install-library 'dO30e5 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . dO2ff3) (string-ci-hash . dO2ff2) (string-hash . dO2ff1) (equal-hash . dO2ff0) (hashtable-equivalence-function . dO2fef) (make-hashtable . dO2fee) (hashtable-hash-function . dO2fed) (make-eqv-hashtable . dO2fec) (make-eq-hashtable . dO2feb) (hashtable? . dO2fea) (hashtable-update! . dO2fe9) (hashtable-size . dO2fe8) (hashtable-set! . dO2fe7) (hashtable-ref . dO2fe6) (hashtable-mutable? . dO2fe5) (hashtable-keys . dO2fe4) (hashtable-entries . dO2fe3) (hashtable-delete! . dO2fe2) (hashtable-copy . dO2fe1) (hashtable-contains? . dO2fe0) (hashtable-clear! . dO2fdf)) '() values values '#f '#f '#t '#f) (dO982@dO7ce@install-library 'dO30e6 '(rnrs io ports) '(6) '() '() '() '((eof-object? . dO2fcf) (eof-object . dO2fce) (current-error-port . dO2fcd) (current-output-port . dO2fcc) (current-input-port . dO2fcb) (output-port? . dO2fca) (input-port? . dO2fc9) (utf-8-codec . dO2fc8) (utf-16-codec . dO2fc7) (transcoder-error-handling-mode . dO2fc6) (transcoder-eol-style . dO2fc5) (transcoder-codec . dO2fc4) (transcoded-port . dO2fc3) (textual-port? . dO2fc2) (string->bytevector . dO2fc1) (standard-output-port . dO2fc0) (standard-input-port . dO2fbf) (standard-error-port . dO2fbe) (set-port-position! . dO2fbd) (put-u8 . dO2fbc) (put-string . dO2fbb) (put-datum . dO2fba) (put-char . dO2fb9) (put-bytevector . dO2fb8) (port? . dO2fb7) (port-transcoder . dO2fb6) (port-position . dO2fb5) (port-has-set-port-position!? . dO2fb4) (port-has-port-position? . dO2fb3) (port-eof? . dO2fb2) (output-port-buffer-mode . dO2fb1) (open-string-output-port . dO2fb0) (open-string-input-port . dO2faf) (open-file-output-port . dO2fae) (open-file-input/output-port . dO2fad) (open-file-input-port . dO2fac) (open-bytevector-output-port . dO2fab) (open-bytevector-input-port . dO2faa) (native-transcoder . dO2fa9) (native-eol-style . dO2fa8) (make-transcoder . dO2fa7) (latin-1-codec . dO2fa6) (make-i/o-write-error . dO2a21) (make-i/o-read-error . dO2a0c) (make-i/o-port-error . dO2ac2) (make-i/o-invalid-position-error . dO2a38) (make-i/o-filename-error . dO2a53) (make-i/o-file-protection-error . dO2a6c) (make-i/o-file-is-read-only-error . dO2a81) (make-i/o-file-does-not-exist-error . dO2aab) (make-i/o-file-already-exists-error . dO2a96) (make-i/o-error . dO29f7) (make-i/o-encoding-error . dO2af2) (make-i/o-decoding-error . dO2adb) (make-custom-textual-output-port . dO2fa5) (make-custom-textual-input/output-port . dO2fa4) (make-custom-textual-input-port . dO2fa3) (make-custom-binary-output-port . dO2fa2) (make-custom-binary-input/output-port . dO2fa1) (make-custom-binary-input-port . dO2fa0) (lookahead-u8 . dO2f9e) (lookahead-char . dO2f9d) (i/o-write-error? . dO2a23) (i/o-read-error? . dO2a0e) (i/o-port-error? . dO2ac6) (i/o-invalid-position-error? . dO2a3c) (i/o-filename-error? . dO2a57) (i/o-file-protection-error? . dO2a6e) (i/o-file-is-read-only-error? . dO2a83) (i/o-file-does-not-exist-error? . dO2aad) (i/o-file-already-exists-error? . dO2a98) (i/o-error? . dO29f9) (i/o-error-position . dO2a3e) (i/o-error-port . dO2ac8) (i/o-error-filename . dO2a59) (i/o-encoding-error? . dO2af6) (i/o-encoding-error-char . dO2af8) (i/o-decoding-error? . dO2add) (get-u8 . dO2f9c) (get-string-n! . dO2f9b) (get-string-n . dO2f9a) (get-string-all . dO2f99) (get-line . dO2f98) (get-datum . dO2f97) (get-char . dO2f96) (get-bytevector-some . dO2f95) (get-bytevector-n! . dO2f94) (get-bytevector-n . dO2f93) (get-bytevector-all . dO2f92) (flush-output-port . dO2f91) (close-port . dO2f90) (call-with-string-output-port . dO2f6f) (call-with-port . dO2f6e) (call-with-bytevector-output-port . dO2f6d) (bytevector->string . dO2f6c) (buffer-mode? . dO2f6b) (binary-port? . dO2f6a) (&i/o-encoding . dO2e08) (&i/o-decoding . dO2e07) (&i/o-port . dO2e06) (&i/o-file-does-not-exist . dO2e05) (&i/o-file-already-exists . dO2e04) (&i/o-file-is-read-only . dO2e03) (&i/o-file-protection . dO2e02) (&i/o-filename . dO2e01) (&i/o-invalid-position . dO2e00) (&i/o-write . dO2dff) (&i/o-read . dO2dfe) (&i/o . dO2dfd) (error-handling-mode . dO2de2) (file-options . dO2de1) (buffer-mode . dO2de0) (eol-style . dO2ddf)) '() values values '#f '#f '#t '#f) (dO982@dO7ce@install-library 'dO30e7 '(rnrs enums) '(6) '() '() '() '((make-enumeration . dO2f66) (enum-set=? . dO2f65) (enum-set-universe . dO2f64) (enum-set-union . dO2f63) (enum-set-subset? . dO2f62) (enum-set-projection . dO2f61) (enum-set-member? . dO2f60) (enum-set-intersection . dO2f5f) (enum-set-indexer . dO2f5e) (enum-set-difference . dO2f5d) (enum-set-constructor . dO2f5c) (enum-set-complement . dO2f5b) (enum-set->list . dO2f5a) (define-enumeration . dO2ded)) '() values values '#f '#f '#t '#f) (dO982@dO7ce@install-library 'dO30e8 '(rnrs conditions) '(6) '() '() '() '((who-condition? . dO296d) (warning? . dO28e5) (violation? . dO2924) (undefined-violation? . dO29e4) (syntax-violation? . dO29cb) (syntax-violation-subform . dO29cf) (syntax-violation-form . dO29cd) (syntax-violation . dOe3d) (simple-conditions . dO2f59) (serious-condition? . dO28fa) (non-continuable-violation? . dO2984) (message-condition? . dO28ce) (make-who-condition . dO2969) (make-warning . dO28e3) (make-violation . dO2922) (make-undefined-violation . dO29e2) (make-syntax-violation . dO29c5) (make-serious-condition . dO28f8) (make-non-continuable-violation . dO2982) (make-message-condition . dO28ca) (make-lexical-violation . dO29ac) (make-irritants-condition . dO294e) (make-implementation-restriction-violation . dO2997) (make-error . dO290d) (make-assertion-violation . dO2937) (lexical-violation? . dO29ae) (irritants-condition? . dO2952) (implementation-restriction-violation? . dO2999) (error? . dO290f) (condition-who . dO296f) (condition-predicate . dO2f58) (condition-message . dO28d0) (condition-irritants . dO2954) (condition-accessor . dO2f57) (condition . dO2f56) (assertion-violation? . dO2939) (condition? . dO2f55) (&undefined . dO2dfc) (&syntax . dO2dfb) (&lexical . dO2dfa) (&implementation-restriction . dO2df9) (&non-continuable . dO2df8) (&who . dO2df7) (&irritants . dO2df6) (&assertion . dO2df5) (&violation . dO2df4) (&error . dO2df3) (&serious . dO2df2) (&warning . dO2df1) (&message . dO2df0) (&condition . dO2def) (define-condition-type . dO2dee)) '() values values '#f '#f '#t '#f) (dO982@dO7ce@install-library 'dO30e9 '(rnrs records inspection) '(6) '() '() '() '((record? . dO3002) (record-type-uid . dO3001) (record-type-sealed? . dO3000) (record-type-parent . dO2fff) (record-type-opaque? . dO2ffe) (record-type-name . dO2ffd) (record-type-generative? . dO2ffc) (record-type-field-names . dO2ffb) (record-rtd . dO2ffa) (record-field-mutable? . dO2ff9)) '() values values '#f '#f '#t '#f) (dO982@dO7ce@install-library 'dO30ea '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . dO3009) (record-predicate . dO3008) (record-mutator . dO3007) (record-constructor . dO3006) (record-accessor . dO3005) (make-record-type-descriptor . dO3004) (make-record-constructor-descriptor . dO3003)) '() values values '#f '#f '#t '#f) (dO982@dO7ce@install-library 'dO30eb '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . dO2dec) (parent-rtd . dO2deb) (nongenerative . dO2dea) (opaque . dO2de9) (sealed . dO2de8) (protocol . dO2de7) (parent . dO2de6) (immutable . dO2de5) (mutable . dO2de4) (fields . dO2de3) (record-constructor-descriptor . dO2dc2) (record-type-descriptor . dO2dc1)) '() values values '#f '#f '#t '#f) (dO982@dO7ce@install-library 'dO30ec '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . dO2b26) (&no-nans-rtd . dO2b24) (&no-infinities-rcd . dO2b11) (&no-infinities-rtd . dO2b0f) (&i/o-encoding-rcd . dO2afc) (&i/o-encoding-rtd . dO2afa) (&i/o-decoding-rcd . dO2ae1) (&i/o-decoding-rtd . dO2adf) (&i/o-port-rcd . dO2acc) (&i/o-port-rtd . dO2aca) (&i/o-file-does-not-exist-rcd . dO2ab1) (&i/o-file-does-not-exist-rtd . dO2aaf) (&i/o-file-already-exists-rcd . dO2a9c) (&i/o-file-already-exists-rtd . dO2a9a) (&i/o-file-is-read-only-rcd . dO2a87) (&i/o-file-is-read-only-rtd . dO2a85) (&i/o-file-protection-rcd . dO2a72) (&i/o-file-protection-rtd . dO2a70) (&i/o-filename-rcd . dO2a5d) (&i/o-filename-rtd . dO2a5b) (&i/o-invalid-position-rcd . dO2a42) (&i/o-invalid-position-rtd . dO2a40) (&i/o-write-rcd . dO2a27) (&i/o-write-rtd . dO2a25) (&i/o-read-rcd . dO2a12) (&i/o-read-rtd . dO2a10) (&i/o-rcd . dO29fd) (&i/o-rtd . dO29fb) (&undefined-rcd . dO29e8) (&undefined-rtd . dO29e6) (&syntax-rcd . dO29d3) (&syntax-rtd . dO29d1) (&lexical-rcd . dO29b2) (&lexical-rtd . dO29b0) (&implementation-restriction-rcd . dO299d) (&implementation-restriction-rtd . dO299b) (&non-continuable-rcd . dO2988) (&non-continuable-rtd . dO2986) (&who-rcd . dO2973) (&who-rtd . dO2971) (&irritants-rcd . dO2958) (&irritants-rtd . dO2956) (&assertion-rcd . dO293d) (&assertion-rtd . dO293b) (&violation-rcd . dO2928) (&violation-rtd . dO2926) (&error-rcd . dO2913) (&error-rtd . dO2911) (&serious-rcd . dO28fe) (&serious-rtd . dO28fc) (&warning-rcd . dO28e9) (&warning-rtd . dO28e7) (&message-rcd . dO28d4) (&message-rtd . dO28d2) (&condition-rcd . dO2875) (&condition-rtd . dO2873) (syntax-error . dOe39) (syntax-dispatch . dOd5d) (pretty-print . dO30cc) (eval-core . dO30cb) (set-symbol-value! . dO30ca) (symbol-value . dO30c9) (gensym . dO30c8) (void . dO30c7) (load . dO2c33) (interaction-environment . dOe49) (char-ready? . dO30c6) (regexp? . dO30c5) (read-line . dO30c4) (gensym-prefix-set! . dO30c3) (ungensym . dO30c2) (alist->eq-hash-table . dO30c1) (assoc-ref . dO30c0) (print . dO30bf) (format . dO30be) (host-os . dO30bd) (library-path . dO7ad) (standard-library-path . dO30bc) (file-newer? . dO30bb) (stat-mtime . dO30ba) (write-to-file . dO30b9) (file->list . dO30b8) (file->string . dO30b7) (digit->integer . dO30b6) (call-with-string-input-port . dO30b5) (call-with-string-io . dO30b4) (string-split . dO30b3) (bytevector-for-each . dO30b2) (string->regexp . dO30b1) (rxmatch . dO30b0) (regexp-replace-all . dO30af) (hashtable-for-each . dO30ae) (call-process . dO30ad) (local-tz-offset . dO30ac) (microseconds . dO30ab) (directory-list . dO30aa) (set-current-directory! . dO30a9) (expand-path . dO30a8) (current-directory . dO30a7) (%spawn . dO30a6) (%waitpid . dO30a5) (simple-struct-name . dO30a4) (simple-struct-set! . dO30a3) (simple-struct-ref . dO30a2) (make-simple-struct . dO30a1) (simple-struct? . dO30a0) (pointer-ref-c-int64 . dO309f) (pointer-ref-c-int32 . dO309e) (pointer-ref-c-int16 . dO309d) (pointer-ref-c-int8 . dO309c) (pointer-ref-c-uint64 . dO309b) (pointer-ref-c-uint32 . dO309a) (pointer-ref-c-uint16 . dO3099) (pointer-ref-c-uint8 . dO3098) (pointer-set-c-uint64! . dO3097) (pointer-set-c-uint32! . dO3096) (pointer-set-c-uint16! . dO3095) (pointer-set-c-uint8! . dO3094) (pointer-set-c-int64! . dO3093) (pointer-set-c-int32! . dO3092) (pointer-set-c-int16! . dO3091) (pointer-set-c-int8! . dO3090) (pointer-set-c-pointer! . dO308f) (pointer-set-c-double! . dO308e) (pointer-set-c-float! . dO308d) (pointer-set-c-long-long! . dO308c) (pointer-set-c-long! . dO308b) (pointer-set-c-int! . dO308a) (pointer-set-c-short! . dO3089) (pointer-set-c-char! . dO3088) (pointer-ref-c-pointer . dO3087) (pointer-ref-c-double . dO3086) (pointer-ref-c-float . dO3085) (pointer-ref-c-unsigned-long-long . dO3084) (pointer-ref-c-signed-long-long . dO3083) (pointer-ref-c-unsigned-long . dO3082) (pointer-ref-c-signed-long . dO3081) (pointer-ref-c-unsigned-int . dO3080) (pointer-ref-c-signed-int . dO307f) (pointer-ref-c-unsigned-short . dO307e) (pointer-ref-c-signed-short . dO307d) (pointer-ref-c-unsigned-char . dO307c) (pointer-ref-c-signed-char . dO307b) (pointer->integer . dO307a) (integer->pointer . dO3079) (pointer? . dO3078) (shared-errno . dO3077) (%ffi-supported? . dO3076) (%ffi-pointer->string . dO3075) (%ffi-call->string-or-zero . dO3074) (%ffi-call->double . dO3073) (%ffi-call->void* . dO3072) (%ffi-call->void . dO3071) (%ffi-call->char . dO3070) (%ffi-call->int . dO306f) (%ffi-lookup . dO306e) (%ffi-open . dO306d) (%fork . dO306c) (%pipe . dO306b) (p . dO306a) (open-output-string . dO3069) (get-output-string . dO3068) (file-stat-ctime . dO3067) (file-stat-atime . dO3066) (file-stat-mtime . dO3065) (file-size-in-bytes . dO3064) (file-writable? . dO3063) (file-executable? . dO3062) (file-readable? . dO3061) (file-regular? . dO3060) (file-symbolic-link? . dO305f) (file-directory? . dO305e) (create-symbolic-link . dO305d) (rename-file . dO305c) (delete-directory . dO305b) (create-directory . dO305a) (create-mosh-cache-dir . dO3059) (get-environment-variables . dO3058) (get-environment-variable . dO3057) (join-wraps . dO3056) (id->real-label . dO3055) (same-marks? . dO3054) (same-marks*? . dO3053) (get-timeofday . dO3052) (get-command-line . dO3051) (sys-display . dO3050) (whereis . dO304f) (register . dO304e) (vm-join! . dO304d) (vm-set-value! . dO304c) (vm? . dO304b) (main-vm? . dO304a) (vm-eval . dO3049) (vm-self . dO3048) (vm-start! . dO3047) (make-vm . dO3046) (mutex-try-lock! . dO3045) (mutex-unlock! . dO3044) (mutex-lock! . dO3043) (mutex? . dO3042) (make-mutex . dO3041) (condition-variable-notify-all! . dO3040) (condition-variable-notify! . dO303f) (condition-variable-wait! . dO303e) (make-condition-variable . dO303d) (mosh-executable-path . dO303c) (make-file-options . dO303b) (source-info . dO303a) (make-compiler-instruction . dO3039) (make-instruction . dO3038) (set-source-info! . dO3037) (bignum? . dO3036) (fast-equal? . dO3035) (fasl-read . dO3034) (fasl-write . dO3033) (time-usage . dO3032) (os-constant . dO3031) (make-parameter . dO596) (socket-port . dO3030) (socket-shutdown . dO302f) (socket-close . dO302e) (socket-send . dO302d) (socket-recv! . dO302c) (socket-recv . dO302b) (make-server-socket . dO302a) (make-client-socket . dO3029) (socket-accept . dO3028) (socket? . dO3027) (string-upcase . dO3026) (string-titlecase . dO3025) (string-normalize-nfkd . dO3024) (string-normalize-nfkc . dO3023) (string-normalize-nfd . dO3022) (string-normalize-nfc . dO3021) (string-foldcase . dO3020) (string-downcase . dO301f) (string-ci>? . dO301e) (string-ci>=? . dO301d) (string-ci=? . dO301c) (string-ci<? . dO301b) (string-ci<=? . dO301a) (char-whitespace? . dO3019) (char-upper-case? . dO3018) (char-title-case? . dO3017) (char-numeric? . dO3016) (char-lower-case? . dO3015) (char-general-category . dO3014) (char-upcase . dO3013) (char-titlecase . dO3012) (char-foldcase . dO3011) (char-downcase . dO3010) (char-ci>? . dO300f) (char-ci>=? . dO300e) (char-ci=? . dO300d) (char-ci<? . dO300c) (char-ci<=? . dO300b) (char-alphabetic? . dO300a) (make-variable-transformer . dOb8a) (identifier? . dOe3f) (generate-temporaries . dOe2b) (free-identifier=? . dOe2d) (syntax->datum . dOe43) (datum->syntax . dOe41) (bound-identifier=? . dOe2f) (record-type-descriptor? . dO3009) (record-predicate . dO3008) (record-mutator . dO3007) (record-constructor . dO3006) (record-accessor . dO3005) (make-record-type-descriptor . dO3004) (make-record-constructor-descriptor . dO3003) (record? . dO3002) (record-type-uid . dO3001) (record-type-sealed? . dO3000) (record-type-parent . dO2fff) (record-type-opaque? . dO2ffe) (record-type-name . dO2ffd) (record-type-generative? . dO2ffc) (record-type-field-names . dO2ffb) (record-rtd . dO2ffa) (record-field-mutable? . dO2ff9) (delete-file . dO2ff8) (file-exists? . dO2ff7) (vector-sort! . dO2ff6) (vector-sort . dO2ff5) (list-sort . dO2ff4) (symbol-hash . dO2ff3) (string-ci-hash . dO2ff2) (string-hash . dO2ff1) (equal-hash . dO2ff0) (hashtable-equivalence-function . dO2fef) (make-hashtable . dO2fee) (hashtable-hash-function . dO2fed) (make-eqv-hashtable . dO2fec) (make-eq-hashtable . dO2feb) (hashtable? . dO2fea) (hashtable-update! . dO2fe9) (hashtable-size . dO2fe8) (hashtable-set! . dO2fe7) (hashtable-ref . dO2fe6) (hashtable-mutable? . dO2fe5) (hashtable-keys . dO2fe4) (hashtable-entries . dO2fe3) (hashtable-delete! . dO2fe2) (hashtable-copy . dO2fe1) (hashtable-contains? . dO2fe0) (hashtable-clear! . dO2fdf) (call-with-output-file . dO2fde) (call-with-input-file . dO2fdd) (write-char . dO2fdc) (write . dO2fdb) (with-output-to-file . dO2fda) (with-input-from-file . dO2fd9) (read-char . dO2fd8) (read . dO2fd7) (peek-char . dO2fd6) (open-output-file . dO2fd5) (open-input-file . dO2fd4) (newline . dO2fd3) (display . dO2fd2) (close-output-port . dO2fd1) (close-input-port . dO2fd0) (eof-object? . dO2fcf) (eof-object . dO2fce) (current-error-port . dO2fcd) (current-output-port . dO2fcc) (current-input-port . dO2fcb) (output-port? . dO2fca) (input-port? . dO2fc9) (utf-8-codec . dO2fc8) (utf-16-codec . dO2fc7) (transcoder-error-handling-mode . dO2fc6) (transcoder-eol-style . dO2fc5) (transcoder-codec . dO2fc4) (transcoded-port . dO2fc3) (textual-port? . dO2fc2) (string->bytevector . dO2fc1) (standard-output-port . dO2fc0) (standard-input-port . dO2fbf) (standard-error-port . dO2fbe) (set-port-position! . dO2fbd) (put-u8 . dO2fbc) (put-string . dO2fbb) (put-datum . dO2fba) (put-char . dO2fb9) (put-bytevector . dO2fb8) (port? . dO2fb7) (port-transcoder . dO2fb6) (port-position . dO2fb5) (port-has-set-port-position!? . dO2fb4) (port-has-port-position? . dO2fb3) (port-eof? . dO2fb2) (output-port-buffer-mode . dO2fb1) (open-string-output-port . dO2fb0) (open-string-input-port . dO2faf) (open-file-output-port . dO2fae) (open-file-input/output-port . dO2fad) (open-file-input-port . dO2fac) (open-bytevector-output-port . dO2fab) (open-bytevector-input-port . dO2faa) (native-transcoder . dO2fa9) (native-eol-style . dO2fa8) (make-transcoder . dO2fa7) (latin-1-codec . dO2fa6) (make-i/o-write-error . dO2a21) (make-i/o-read-error . dO2a0c) (make-i/o-port-error . dO2ac2) (make-i/o-invalid-position-error . dO2a38) (make-i/o-filename-error . dO2a53) (make-i/o-file-protection-error . dO2a6c) (make-i/o-file-is-read-only-error . dO2a81) (make-i/o-file-does-not-exist-error . dO2aab) (make-i/o-file-already-exists-error . dO2a96) (make-i/o-error . dO29f7) (make-i/o-encoding-error . dO2af2) (make-i/o-decoding-error . dO2adb) (make-custom-textual-output-port . dO2fa5) (make-custom-textual-input/output-port . dO2fa4) (make-custom-textual-input-port . dO2fa3) (make-custom-binary-output-port . dO2fa2) (make-custom-binary-input/output-port . dO2fa1) (make-custom-binary-input-port . dO2fa0) (make-bytevector . dO2f9f) (lookahead-u8 . dO2f9e) (lookahead-char . dO2f9d) (i/o-write-error? . dO2a23) (i/o-read-error? . dO2a0e) (i/o-port-error? . dO2ac6) (i/o-invalid-position-error? . dO2a3c) (i/o-filename-error? . dO2a57) (i/o-file-protection-error? . dO2a6e) (i/o-file-is-read-only-error? . dO2a83) (i/o-file-does-not-exist-error? . dO2aad) (i/o-file-already-exists-error? . dO2a98) (i/o-error? . dO29f9) (i/o-error-position . dO2a3e) (i/o-error-port . dO2ac8) (i/o-error-filename . dO2a59) (i/o-encoding-error? . dO2af6) (i/o-encoding-error-char . dO2af8) (i/o-decoding-error? . dO2add) (get-u8 . dO2f9c) (get-string-n! . dO2f9b) (get-string-n . dO2f9a) (get-string-all . dO2f99) (get-line . dO2f98) (get-datum . dO2f97) (get-char . dO2f96) (get-bytevector-some . dO2f95) (get-bytevector-n! . dO2f94) (get-bytevector-n . dO2f93) (get-bytevector-all . dO2f92) (flush-output-port . dO2f91) (close-port . dO2f90) (scheme-report-environment . dOe19) (quotient . dO2f8f) (null-environment . dOe17) (remainder . dO2f8e) (modulo . dO2f8d) (inexact->exact . dO2f8c) (force . dO2f8b) (exact->inexact . dO2f8a) (make-promise . dO2f89) (exit . dO2f88) (command-line . dO2c2d) (string-fill! . dO2f87) (string-set! . dO2f86) (set-cdr! . dO2f85) (set-car! . dO2f84) (remove . dO2f83) (remv . dO2f82) (remp . dO2f81) (remq . dO2f80) (partition . dO2f7f) (memv . dO2f7e) (memq . dO2f7d) (memp . dO2f7c) (member . dO2f7b) (exists . dO2f7a) (for-all . dO2f79) (fold-right . dO2f78) (fold-left . dO2f77) (find . dO2f76) (filter . dO2f75) (cons* . dO2f74) (assv . dO2f73) (assq . dO2f72) (assp . dO2f71) (assoc . dO2f70) (call-with-string-output-port . dO2f6f) (call-with-port . dO2f6e) (call-with-bytevector-output-port . dO2f6d) (bytevector->string . dO2f6c) (buffer-mode? . dO2f6b) (binary-port? . dO2f6a) (with-exception-handler . dO2f69) (raise-continuable . dO2f68) (raise . dO2f67) (eval . dOe1d) (environment . dOe15) (make-enumeration . dO2f66) (enum-set=? . dO2f65) (enum-set-universe . dO2f64) (enum-set-union . dO2f63) (enum-set-subset? . dO2f62) (enum-set-projection . dO2f61) (enum-set-member? . dO2f60) (enum-set-intersection . dO2f5f) (enum-set-indexer . dO2f5e) (enum-set-difference . dO2f5d) (enum-set-constructor . dO2f5c) (enum-set-complement . dO2f5b) (enum-set->list . dO2f5a) (who-condition? . dO296d) (warning? . dO28e5) (violation? . dO2924) (undefined-violation? . dO29e4) (syntax-violation? . dO29cb) (syntax-violation-subform . dO29cf) (syntax-violation-form . dO29cd) (syntax-violation . dOe3d) (simple-conditions . dO2f59) (serious-condition? . dO28fa) (non-continuable-violation? . dO2984) (message-condition? . dO28ce) (make-who-condition . dO2969) (make-warning . dO28e3) (make-violation . dO2922) (make-undefined-violation . dO29e2) (make-syntax-violation . dO29c5) (make-serious-condition . dO28f8) (make-non-continuable-violation . dO2982) (make-message-condition . dO28ca) (make-lexical-violation . dO29ac) (make-irritants-condition . dO294e) (make-implementation-restriction-violation . dO2997) (make-error . dO290d) (make-assertion-violation . dO2937) (lexical-violation? . dO29ae) (irritants-condition? . dO2952) (implementation-restriction-violation? . dO2999) (error? . dO290f) (condition-who . dO296f) (condition-predicate . dO2f58) (condition-message . dO28d0) (condition-irritants . dO2954) (condition-accessor . dO2f57) (condition . dO2f56) (assertion-violation? . dO2939) (condition? . dO2f55) (utf32->string . dO2f54) (utf16->string . dO2f53) (utf8->string . dO2f52) (uint-list->bytevector . dO2f51) (u8-list->bytevector . dO2f50) (string->utf8 . dO2f4f) (string->utf32 . dO2f4e) (string->utf16 . dO2f4d) (sint-list->bytevector . dO2f4c) (native-endianness . dO2f4b) (bytevector? . dO2f4a) (bytevector=? . dO2f49) (bytevector-uint-set! . dO2f48) (bytevector-uint-ref . dO2f47) (bytevector-u8-set! . dO2f46) (bytevector-u8-ref . dO2f45) (bytevector-u64-set! . dO2f44) (bytevector-u64-ref . dO2f43) (bytevector-u64-native-set! . dO2f42) (bytevector-u64-native-ref . dO2f41) (bytevector-u32-set! . dO2f40) (bytevector-u32-ref . dO2f3f) (bytevector-u32-native-set! . dO2f3e) (bytevector-u32-native-ref . dO2f3d) (bytevector-u16-set! . dO2f3c) (bytevector-u16-ref . dO2f3b) (bytevector-u16-native-set! . dO2f3a) (bytevector-u16-native-ref . dO2f39) (bytevector-sint-set! . dO2f38) (bytevector-sint-ref . dO2f37) (bytevector-s8-set! . dO2f36) (bytevector-s8-ref . dO2f35) (bytevector-s64-set! . dO2f34) (bytevector-s64-ref . dO2f33) (bytevector-s64-native-set! . dO2f32) (bytevector-s64-native-ref . dO2f31) (bytevector-s32-set! . dO2f30) (bytevector-s32-ref . dO2f2f) (bytevector-s32-native-set! . dO2f2e) (bytevector-s32-native-ref . dO2f2d) (bytevector-s16-set! . dO2f2c) (bytevector-s16-ref . dO2f2b) (bytevector-s16-native-set! . dO2f2a) (bytevector-s16-native-ref . dO2f29) (bytevector-length . dO2f28) (bytevector-ieee-single-ref . dO2f27) (bytevector-ieee-single-set! . dO2f26) (bytevector-ieee-single-native-set! . dO2f25) (bytevector-ieee-single-native-ref . dO2f24) (bytevector-ieee-double-set! . dO2f23) (bytevector-ieee-double-ref . dO2f22) (bytevector-ieee-double-native-set! . dO2f21) (bytevector-ieee-double-native-ref . dO2f20) (bytevector-fill! . dO2f1f) (bytevector-copy! . dO2f1e) (bytevector-copy . dO2f1d) (bytevector->uint-list . dO2f1c) (bytevector->u8-list . dO2f1b) (bytevector->sint-list . dO2f1a) (no-nans-violation? . dO2b22) (no-infinities-violation? . dO2b0d) (make-no-nans-violation . dO2b20) (make-no-infinities-violation . dO2b0b) (real->flonum . dO2f19) (flzero? . dO2f18) (fltruncate . dO2f17) (fltan . dO2f16) (flsqrt . dO2f15) (flsin . dO2f14) (flround . dO2f13) (flpositive? . dO2f12) (flonum? . dO2f11) (flodd? . dO2f10) (flnumerator . dO2f0f) (flnegative? . dO2f0e) (flnan? . dO2f0d) (flmod0 . dO2f0c) (flmod . dO2f0b) (flmin . dO2f0a) (flmax . dO2f09) (fllog . dO2f08) (flinteger? . dO2f07) (flinfinite? . dO2f06) (flfloor . dO2f05) (flfinite? . dO2f04) (flexpt . dO2f03) (flexp . dO2f02) (fleven? . dO2f01) (fldiv0-and-mod0 . dO2f00) (fldiv0 . dO2eff) (fldiv-and-mod . dO2efe) (fldiv . dO2efd) (fldenominator . dO2efc) (flcos . dO2efb) (flceiling . dO2efa) (flatan . dO2ef9) (flasin . dO2ef8) (flacos . dO2ef7) (flabs . dO2ef6) (fl>? . dO2ef5) (fl>=? . dO2ef4) (fl=? . dO2ef3) (fl<? . dO2ef2) (fl<=? . dO2ef1) (fl/ . dO2ef0) (fl- . dO2eef) (fl+ . dO2eee) (fl* . dO2eed) (fixnum->flonum . dO2eec) (fxzero? . dO2eeb) (fxxor . dO2eea) (fxrotate-bit-field . dO2ee9) (fxreverse-bit-field . dO2ee8) (fxpositive? . dO2ee7) (fxodd? . dO2ee6) (fxnot . dO2ee5) (fxnegative? . dO2ee4) (fxmod0 . dO2ee3) (fxmod . dO2ee2) (fxmin . dO2ee1) (fxmax . dO2ee0) (fxlength . dO2edf) (fxior . dO2ede) (fxif . dO2edd) (fxfirst-bit-set . dO2edc) (fxeven? . dO2edb) (fxdiv0-and-mod0 . dO2eda) (fxdiv0 . dO2ed9) (fxdiv-and-mod . dO2ed8) (fxdiv . dO2ed7) (fxcopy-bit-field . dO2ed6) (fxcopy-bit . dO2ed5) (fxbit-set? . dO2ed4) (fxbit-field . dO2ed3) (fxbit-count . dO2ed2) (fxarithmetic-shift-right . dO2ed1) (fxarithmetic-shift-left . dO2ed0) (fxarithmetic-shift . dO2ecf) (fxand . dO2ece) (fx>? . dO2ecd) (fx>=? . dO2ecc) (fx=? . dO2ecb) (fx<? . dO2eca) (fx<=? . dO2ec9) (fx-/carry . dO2ec8) (fx- . dO2ec7) (fx+/carry . dO2ec6) (fx+ . dO2ec5) (fx*/carry . dO2ec4) (fx* . dO2ec3) (greatest-fixnum . dO2ec2) (least-fixnum . dO2ec1) (fixnum-width . dO2ec0) (fixnum? . dO2ebf) (bitwise-rotate-bit-field . dO2ebe) (bitwise-reverse-bit-field . dO2ebd) (bitwise-length . dO2ebc) (bitwise-if . dO2ebb) (bitwise-first-bit-set . dO2eba) (bitwise-copy-bit-field . dO2eb9) (bitwise-copy-bit . dO2eb8) (bitwise-bit-set? . dO2eb7) (bitwise-bit-field . dO2eb6) (bitwise-bit-count . dO2eb5) (bitwise-xor . dO2eb4) (bitwise-ior . dO2eb3) (bitwise-and . dO2eb2) (bitwise-not . dO2eb1) (bitwise-arithmetic-shift-right . dO2eb0) (bitwise-arithmetic-shift-left . dO2eaf) (bitwise-arithmetic-shift . dO2eae) (zero? . dO2ead) (vector? . dO2eac) (vector-set! . dO2eab) (vector-ref . dO2eaa) (vector-map . dO2ea9) (vector-length . dO2ea8) (vector-for-each . dO2ea7) (vector-fill! . dO2ea6) (vector->list . dO2ea5) (vector . dO2ea4) (values . dO2ea3) (truncate . dO2ea2) (tan . dO2ea1) (symbol? . dO2ea0) (symbol=? . dO2e9f) (symbol->string . dO2e9e) (substring . dO2e9d) (string? . dO2e9c) (string>? . dO2e9b) (string>=? . dO2e9a) (string=? . dO2e99) (string<? . dO2e98) (string<=? . dO2e97) (string-ref . dO2e96) (string-length . dO2e95) (string-for-each . dO2e94) (string-copy . dO2e93) (string-append . dO2e92) (string->symbol . dO2e91) (string->number . dO2e90) (string->list . dO2e8f) (string . dO2e8e) (sqrt . dO2e8d) (sin . dO2e8c) (round . dO2e8b) (reverse . dO2e8a) (real? . dO2e89) (real-valued? . dO2e88) (real-part . dO2e87) (rationalize . dO2e86) (rational? . dO2e85) (rational-valued? . dO2e84) (procedure? . dO2e83) (positive? . dO2e82) (pair? . dO2e81) (odd? . dO2e80) (numerator . dO2e7f) (number? . dO2e7e) (number->string . dO2e7d) (null? . dO2e7c) (not . dO2e7b) (negative? . dO2e7a) (nan? . dO2e79) (min . dO2e78) (max . dO2e77) (map . dO2e76) (make-vector . dO2e75) (make-string . dO2e74) (make-rectangular . dO2e73) (make-polar . dO2e72) (magnitude . dO2e71) (log . dO2e70) (list? . dO2e6f) (list-tail . dO2e6e) (list-ref . dO2e6d) (list->vector . dO2e6c) (list->string . dO2e6b) (list . dO2e6a) (length . dO2e69) (lcm . dO2e68) (integer? . dO2e67) (integer-valued? . dO2e66) (integer->char . dO2e65) (infinite? . dO2e64) (inexact? . dO2e63) (inexact . dO2e62) (imag-part . dO2e61) (gcd . dO2e60) (for-each . dO2e5f) (floor . dO2e5e) (finite? . dO2e5d) (expt . dO2e5c) (exp . dO2e5b) (exact? . dO2e5a) (exact-integer-sqrt . dO2e59) (exact . dO2e58) (even? . dO2e57) (error . dO2e56) (eqv? . dO2e55) (equal? . dO2e54) (eq? . dO2e53) (dynamic-wind . dO2e52) (div0-and-mod0 . dO2e51) (mod0 . dO2e50) (div0 . dO2e4f) (div-and-mod . dO2e4e) (mod . dO2e4d) (div . dO2e4c) (denominator . dO2e4b) (cos . dO2e4a) (cons . dO2e49) (complex? . dO2e48) (char? . dO2e47) (char>? . dO2e46) (char>=? . dO2e45) (char=? . dO2e44) (char<? . dO2e43) (char<=? . dO2e42) (char->integer . dO2e41) (ceiling . dO2e40) (call-with-values . dO2e3f) (call/cc . dO2e3e) (call-with-current-continuation . dO2e3d) (cddddr . dO2e3c) (cdddar . dO2e3b) (cddadr . dO2e3a) (cddaar . dO2e39) (cdaddr . dO2e38) (cdadar . dO2e37) (cdaadr . dO2e36) (cdaaar . dO2e35) (cadddr . dO2e34) (caddar . dO2e33) (cadadr . dO2e32) (cadaar . dO2e31) (caaddr . dO2e30) (caadar . dO2e2f) (caaadr . dO2e2e) (caaaar . dO2e2d) (cdddr . dO2e2c) (cddar . dO2e2b) (cdadr . dO2e2a) (cdaar . dO2e29) (caddr . dO2e28) (cadar . dO2e27) (caadr . dO2e26) (caaar . dO2e25) (cddr . dO2e24) (cdar . dO2e23) (cadr . dO2e22) (caar . dO2e21) (cdr . dO2e20) (car . dO2e1f) (boolean? . dO2e1e) (boolean=? . dO2e1d) (atan . dO2e1c) (assertion-violation . dO2e1b) (assertion-error . dOe37) (asin . dO2e1a) (apply . dO2e19) (append . dO2e18) (angle . dO2e17) (acos . dO2e16) (abs . dO2e15) (/ . dO2e14) (* . dO2e13) (- . dO2e12) (+ . dO2e11) (>= . dO2e10) (> . dO2e0f) (= . dO2e0e) (<= . dO2e0d) (< . dO2e0c) (library . dO2e0b) (&no-nans . dO2e0a) (&no-infinities . dO2e09) (&i/o-encoding . dO2e08) (&i/o-decoding . dO2e07) (&i/o-port . dO2e06) (&i/o-file-does-not-exist . dO2e05) (&i/o-file-already-exists . dO2e04) (&i/o-file-is-read-only . dO2e03) (&i/o-file-protection . dO2e02) (&i/o-filename . dO2e01) (&i/o-invalid-position . dO2e00) (&i/o-write . dO2dff) (&i/o-read . dO2dfe) (&i/o . dO2dfd) (&undefined . dO2dfc) (&syntax . dO2dfb) (&lexical . dO2dfa) (&implementation-restriction . dO2df9) (&non-continuable . dO2df8) (&who . dO2df7) (&irritants . dO2df6) (&assertion . dO2df5) (&violation . dO2df4) (&error . dO2df3) (&serious . dO2df2) (&warning . dO2df1) (&message . dO2df0) (&condition . dO2def) (define-condition-type . dO2dee) (define-enumeration . dO2ded) (define-record-type . dO2dec) (parent-rtd . dO2deb) (nongenerative . dO2dea) (opaque . dO2de9) (sealed . dO2de8) (protocol . dO2de7) (parent . dO2de6) (immutable . dO2de5) (mutable . dO2de4) (fields . dO2de3) (error-handling-mode . dO2de2) (file-options . dO2de1) (buffer-mode . dO2de0) (eol-style . dO2ddf) (guard . dO2dde) (trace-define . dO2ddd) (trace-lambda . dO2ddc) (unsyntax-splicing . dO2ddb) (unsyntax . dO2dda) (unquote-splicing . dO2dd9) (unquote . dO2dd8) (_ . dO2dd7) (else . dO2dd6) (=> . dO2dd5) (... . dO2dd4) (assert . dO2dd3) (endianness . dO2dd2) (delay . dO2dd1) (time . dO2dd0) (do . dO2dcf) (cond . dO2dce) (let* . dO2dcd) (let . dO2dcc) (let*-values . dO2dcb) (let-values . dO2dca) (identifier-syntax . dO2dc9) (with-syntax . dO2dc8) (quasisyntax . dO2dc7) (quasiquote . dO2dc6) (syntax-rules . dO2dc5) (include . dO2dc4) (define-struct . dO2dc3) (record-constructor-descriptor . dO2dc2) (record-type-descriptor . dO2dc1) (case . dO2dc0) (parameterize . dO2dbf) (unless . dO2dbe) (when . dO2dbd) (or . dO2dbc) (and . dO2dbb) (if . dO2dba) (letrec* . dO2db9) (letrec . dO2db8) (type-descriptor . dO2db7) (case-lambda . dO2db6) (lambda . dO2db5) (syntax . dO2db4) (syntax-case . dO2db3) (quote . dO2db2) (foreign-call . dO2db1) (letrec-syntax . dO2db0) (let-syntax . dO2daf) (set! . dO2dae) (import . dO2dad) (begin . dO2dac) (module . dO2dab) (define-syntax . dO2daa) (define . dO2da9)) '((dO2b26 core-prim . &no-nans-rcd) (dO2b24 core-prim . &no-nans-rtd) (dO2b11 core-prim . &no-infinities-rcd) (dO2b0f core-prim . &no-infinities-rtd) (dO2afc core-prim . &i/o-encoding-rcd) (dO2afa core-prim . &i/o-encoding-rtd) (dO2ae1 core-prim . &i/o-decoding-rcd) (dO2adf core-prim . &i/o-decoding-rtd) (dO2acc core-prim . &i/o-port-rcd) (dO2aca core-prim . &i/o-port-rtd) (dO2ab1 core-prim . &i/o-file-does-not-exist-rcd) (dO2aaf core-prim . &i/o-file-does-not-exist-rtd) (dO2a9c core-prim . &i/o-file-already-exists-rcd) (dO2a9a core-prim . &i/o-file-already-exists-rtd) (dO2a87 core-prim . &i/o-file-is-read-only-rcd) (dO2a85 core-prim . &i/o-file-is-read-only-rtd) (dO2a72 core-prim . &i/o-file-protection-rcd) (dO2a70 core-prim . &i/o-file-protection-rtd) (dO2a5d core-prim . &i/o-filename-rcd) (dO2a5b core-prim . &i/o-filename-rtd) (dO2a42 core-prim . &i/o-invalid-position-rcd) (dO2a40 core-prim . &i/o-invalid-position-rtd) (dO2a27 core-prim . &i/o-write-rcd) (dO2a25 core-prim . &i/o-write-rtd) (dO2a12 core-prim . &i/o-read-rcd) (dO2a10 core-prim . &i/o-read-rtd) (dO29fd core-prim . &i/o-rcd) (dO29fb core-prim . &i/o-rtd) (dO29e8 core-prim . &undefined-rcd) (dO29e6 core-prim . &undefined-rtd) (dO29d3 core-prim . &syntax-rcd) (dO29d1 core-prim . &syntax-rtd) (dO29b2 core-prim . &lexical-rcd) (dO29b0 core-prim . &lexical-rtd) (dO299d core-prim . &implementation-restriction-rcd) (dO299b core-prim . &implementation-restriction-rtd) (dO2988 core-prim . &non-continuable-rcd) (dO2986 core-prim . &non-continuable-rtd) (dO2973 core-prim . &who-rcd) (dO2971 core-prim . &who-rtd) (dO2958 core-prim . &irritants-rcd) (dO2956 core-prim . &irritants-rtd) (dO293d core-prim . &assertion-rcd) (dO293b core-prim . &assertion-rtd) (dO2928 core-prim . &violation-rcd) (dO2926 core-prim . &violation-rtd) (dO2913 core-prim . &error-rcd) (dO2911 core-prim . &error-rtd) (dO28fe core-prim . &serious-rcd) (dO28fc core-prim . &serious-rtd) (dO28e9 core-prim . &warning-rcd) (dO28e7 core-prim . &warning-rtd) (dO28d4 core-prim . &message-rcd) (dO28d2 core-prim . &message-rtd) (dO2875 core-prim . &condition-rcd) (dO2873 core-prim . &condition-rtd) (dOe39 core-prim . syntax-error) (dOd5d core-prim . syntax-dispatch) (dO30cc core-prim . pretty-print) (dO30cb core-prim . eval-core) (dO30ca core-prim . set-symbol-value!) (dO30c9 core-prim . symbol-value) (dO30c8 core-prim . gensym) (dO30c7 core-prim . void) (dO2c33 core-prim . load) (dOe49 core-prim . interaction-environment) (dO30c6 core-prim . char-ready?) (dO30c5 core-prim . regexp?) (dO30c4 core-prim . read-line) (dO30c3 core-prim . gensym-prefix-set!) (dO30c2 core-prim . ungensym) (dO30c1 core-prim . alist->eq-hash-table) (dO30c0 core-prim . assoc-ref) (dO30bf core-prim . print) (dO30be core-prim . format) (dO30bd core-prim . host-os) (dO7ad core-prim . library-path) (dO30bc core-prim . standard-library-path) (dO30bb core-prim . file-newer?) (dO30ba core-prim . stat-mtime) (dO30b9 core-prim . write-to-file) (dO30b8 core-prim . file->list) (dO30b7 core-prim . file->string) (dO30b6 core-prim . digit->integer) (dO30b5 core-prim . call-with-string-input-port) (dO30b4 core-prim . call-with-string-io) (dO30b3 core-prim . string-split) (dO30b2 core-prim . bytevector-for-each) (dO30b1 core-prim . string->regexp) (dO30b0 core-prim . rxmatch) (dO30af core-prim . regexp-replace-all) (dO30ae core-prim . hashtable-for-each) (dO30ad core-prim . call-process) (dO30ac core-prim . local-tz-offset) (dO30ab core-prim . microseconds) (dO30aa core-prim . directory-list) (dO30a9 core-prim . set-current-directory!) (dO30a8 core-prim . expand-path) (dO30a7 core-prim . current-directory) (dO30a6 core-prim . %spawn) (dO30a5 core-prim . %waitpid) (dO30a4 core-prim . simple-struct-name) (dO30a3 core-prim . simple-struct-set!) (dO30a2 core-prim . simple-struct-ref) (dO30a1 core-prim . make-simple-struct) (dO30a0 core-prim . simple-struct?) (dO309f core-prim . pointer-ref-c-int64) (dO309e core-prim . pointer-ref-c-int32) (dO309d core-prim . pointer-ref-c-int16) (dO309c core-prim . pointer-ref-c-int8) (dO309b core-prim . pointer-ref-c-uint64) (dO309a core-prim . pointer-ref-c-uint32) (dO3099 core-prim . pointer-ref-c-uint16) (dO3098 core-prim . pointer-ref-c-uint8) (dO3097 core-prim . pointer-set-c-uint64!) (dO3096 core-prim . pointer-set-c-uint32!) (dO3095 core-prim . pointer-set-c-uint16!) (dO3094 core-prim . pointer-set-c-uint8!) (dO3093 core-prim . pointer-set-c-int64!) (dO3092 core-prim . pointer-set-c-int32!) (dO3091 core-prim . pointer-set-c-int16!) (dO3090 core-prim . pointer-set-c-int8!) (dO308f core-prim . pointer-set-c-pointer!) (dO308e core-prim . pointer-set-c-double!) (dO308d core-prim . pointer-set-c-float!) (dO308c core-prim . pointer-set-c-long-long!) (dO308b core-prim . pointer-set-c-long!) (dO308a core-prim . pointer-set-c-int!) (dO3089 core-prim . pointer-set-c-short!) (dO3088 core-prim . pointer-set-c-char!) (dO3087 core-prim . pointer-ref-c-pointer) (dO3086 core-prim . pointer-ref-c-double) (dO3085 core-prim . pointer-ref-c-float) (dO3084 core-prim . pointer-ref-c-unsigned-long-long) (dO3083 core-prim . pointer-ref-c-signed-long-long) (dO3082 core-prim . pointer-ref-c-unsigned-long) (dO3081 core-prim . pointer-ref-c-signed-long) (dO3080 core-prim . pointer-ref-c-unsigned-int) (dO307f core-prim . pointer-ref-c-signed-int) (dO307e core-prim . pointer-ref-c-unsigned-short) (dO307d core-prim . pointer-ref-c-signed-short) (dO307c core-prim . pointer-ref-c-unsigned-char) (dO307b core-prim . pointer-ref-c-signed-char) (dO307a core-prim . pointer->integer) (dO3079 core-prim . integer->pointer) (dO3078 core-prim . pointer?) (dO3077 core-prim . shared-errno) (dO3076 core-prim . %ffi-supported?) (dO3075 core-prim . %ffi-pointer->string) (dO3074 core-prim . %ffi-call->string-or-zero) (dO3073 core-prim . %ffi-call->double) (dO3072 core-prim . %ffi-call->void*) (dO3071 core-prim . %ffi-call->void) (dO3070 core-prim . %ffi-call->char) (dO306f core-prim . %ffi-call->int) (dO306e core-prim . %ffi-lookup) (dO306d core-prim . %ffi-open) (dO306c core-prim . %fork) (dO306b core-prim . %pipe) (dO306a core-prim . p) (dO3069 core-prim . open-output-string) (dO3068 core-prim . get-output-string) (dO3067 core-prim . file-stat-ctime) (dO3066 core-prim . file-stat-atime) (dO3065 core-prim . file-stat-mtime) (dO3064 core-prim . file-size-in-bytes) (dO3063 core-prim . file-writable?) (dO3062 core-prim . file-executable?) (dO3061 core-prim . file-readable?) (dO3060 core-prim . file-regular?) (dO305f core-prim . file-symbolic-link?) (dO305e core-prim . file-directory?) (dO305d core-prim . create-symbolic-link) (dO305c core-prim . rename-file) (dO305b core-prim . delete-directory) (dO305a core-prim . create-directory) (dO3059 core-prim . create-mosh-cache-dir) (dO3058 core-prim . get-environment-variables) (dO3057 core-prim . get-environment-variable) (dO3056 core-prim . join-wraps) (dO3055 core-prim . id->real-label) (dO3054 core-prim . same-marks?) (dO3053 core-prim . same-marks*?) (dO3052 core-prim . get-timeofday) (dO3051 core-prim . get-command-line) (dO3050 core-prim . sys-display) (dO304f core-prim . whereis) (dO304e core-prim . register) (dO304d core-prim . vm-join!) (dO304c core-prim . vm-set-value!) (dO304b core-prim . vm?) (dO304a core-prim . main-vm?) (dO3049 core-prim . vm-eval) (dO3048 core-prim . vm-self) (dO3047 core-prim . vm-start!) (dO3046 core-prim . make-vm) (dO3045 core-prim . mutex-try-lock!) (dO3044 core-prim . mutex-unlock!) (dO3043 core-prim . mutex-lock!) (dO3042 core-prim . mutex?) (dO3041 core-prim . make-mutex) (dO3040 core-prim . condition-variable-notify-all!) (dO303f core-prim . condition-variable-notify!) (dO303e core-prim . condition-variable-wait!) (dO303d core-prim . make-condition-variable) (dO303c core-prim . mosh-executable-path) (dO303b core-prim . make-file-options) (dO303a core-prim . source-info) (dO3039 core-prim . make-compiler-instruction) (dO3038 core-prim . make-instruction) (dO3037 core-prim . set-source-info!) (dO3036 core-prim . bignum?) (dO3035 core-prim . fast-equal?) (dO3034 core-prim . fasl-read) (dO3033 core-prim . fasl-write) (dO3032 core-prim . time-usage) (dO3031 core-prim . os-constant) (dO596 core-prim . make-parameter) (dO3030 core-prim . socket-port) (dO302f core-prim . socket-shutdown) (dO302e core-prim . socket-close) (dO302d core-prim . socket-send) (dO302c core-prim . socket-recv!) (dO302b core-prim . socket-recv) (dO302a core-prim . make-server-socket) (dO3029 core-prim . make-client-socket) (dO3028 core-prim . socket-accept) (dO3027 core-prim . socket?) (dO3026 core-prim . string-upcase) (dO3025 core-prim . string-titlecase) (dO3024 core-prim . string-normalize-nfkd) (dO3023 core-prim . string-normalize-nfkc) (dO3022 core-prim . string-normalize-nfd) (dO3021 core-prim . string-normalize-nfc) (dO3020 core-prim . string-foldcase) (dO301f core-prim . string-downcase) (dO301e core-prim . string-ci>?) (dO301d core-prim . string-ci>=?) (dO301c core-prim . string-ci=?) (dO301b core-prim . string-ci<?) (dO301a core-prim . string-ci<=?) (dO3019 core-prim . char-whitespace?) (dO3018 core-prim . char-upper-case?) (dO3017 core-prim . char-title-case?) (dO3016 core-prim . char-numeric?) (dO3015 core-prim . char-lower-case?) (dO3014 core-prim . char-general-category) (dO3013 core-prim . char-upcase) (dO3012 core-prim . char-titlecase) (dO3011 core-prim . char-foldcase) (dO3010 core-prim . char-downcase) (dO300f core-prim . char-ci>?) (dO300e core-prim . char-ci>=?) (dO300d core-prim . char-ci=?) (dO300c core-prim . char-ci<?) (dO300b core-prim . char-ci<=?) (dO300a core-prim . char-alphabetic?) (dOb8a core-prim . make-variable-transformer) (dOe3f core-prim . identifier?) (dOe2b core-prim . generate-temporaries) (dOe2d core-prim . free-identifier=?) (dOe43 core-prim . syntax->datum) (dOe41 core-prim . datum->syntax) (dOe2f core-prim . bound-identifier=?) (dO3009 core-prim . record-type-descriptor?) (dO3008 core-prim . record-predicate) (dO3007 core-prim . record-mutator) (dO3006 core-prim . record-constructor) (dO3005 core-prim . record-accessor) (dO3004 core-prim . make-record-type-descriptor) (dO3003 core-prim . make-record-constructor-descriptor) (dO3002 core-prim . record?) (dO3001 core-prim . record-type-uid) (dO3000 core-prim . record-type-sealed?) (dO2fff core-prim . record-type-parent) (dO2ffe core-prim . record-type-opaque?) (dO2ffd core-prim . record-type-name) (dO2ffc core-prim . record-type-generative?) (dO2ffb core-prim . record-type-field-names) (dO2ffa core-prim . record-rtd) (dO2ff9 core-prim . record-field-mutable?) (dO2ff8 core-prim . delete-file) (dO2ff7 core-prim . file-exists?) (dO2ff6 core-prim . vector-sort!) (dO2ff5 core-prim . vector-sort) (dO2ff4 core-prim . list-sort) (dO2ff3 core-prim . symbol-hash) (dO2ff2 core-prim . string-ci-hash) (dO2ff1 core-prim . string-hash) (dO2ff0 core-prim . equal-hash) (dO2fef core-prim . hashtable-equivalence-function) (dO2fee core-prim . make-hashtable) (dO2fed core-prim . hashtable-hash-function) (dO2fec core-prim . make-eqv-hashtable) (dO2feb core-prim . make-eq-hashtable) (dO2fea core-prim . hashtable?) (dO2fe9 core-prim . hashtable-update!) (dO2fe8 core-prim . hashtable-size) (dO2fe7 core-prim . hashtable-set!) (dO2fe6 core-prim . hashtable-ref) (dO2fe5 core-prim . hashtable-mutable?) (dO2fe4 core-prim . hashtable-keys) (dO2fe3 core-prim . hashtable-entries) (dO2fe2 core-prim . hashtable-delete!) (dO2fe1 core-prim . hashtable-copy) (dO2fe0 core-prim . hashtable-contains?) (dO2fdf core-prim . hashtable-clear!) (dO2fde core-prim . call-with-output-file) (dO2fdd core-prim . call-with-input-file) (dO2fdc core-prim . write-char) (dO2fdb core-prim . write) (dO2fda core-prim . with-output-to-file) (dO2fd9 core-prim . with-input-from-file) (dO2fd8 core-prim . read-char) (dO2fd7 core-prim . read) (dO2fd6 core-prim . peek-char) (dO2fd5 core-prim . open-output-file) (dO2fd4 core-prim . open-input-file) (dO2fd3 core-prim . newline) (dO2fd2 core-prim . display) (dO2fd1 core-prim . close-output-port) (dO2fd0 core-prim . close-input-port) (dO2fcf core-prim . eof-object?) (dO2fce core-prim . eof-object) (dO2fcd core-prim . current-error-port) (dO2fcc core-prim . current-output-port) (dO2fcb core-prim . current-input-port) (dO2fca core-prim . output-port?) (dO2fc9 core-prim . input-port?) (dO2fc8 core-prim . utf-8-codec) (dO2fc7 core-prim . utf-16-codec) (dO2fc6 core-prim . transcoder-error-handling-mode) (dO2fc5 core-prim . transcoder-eol-style) (dO2fc4 core-prim . transcoder-codec) (dO2fc3 core-prim . transcoded-port) (dO2fc2 core-prim . textual-port?) (dO2fc1 core-prim . string->bytevector) (dO2fc0 core-prim . standard-output-port) (dO2fbf core-prim . standard-input-port) (dO2fbe core-prim . standard-error-port) (dO2fbd core-prim . set-port-position!) (dO2fbc core-prim . put-u8) (dO2fbb core-prim . put-string) (dO2fba core-prim . put-datum) (dO2fb9 core-prim . put-char) (dO2fb8 core-prim . put-bytevector) (dO2fb7 core-prim . port?) (dO2fb6 core-prim . port-transcoder) (dO2fb5 core-prim . port-position) (dO2fb4 core-prim . port-has-set-port-position!?) (dO2fb3 core-prim . port-has-port-position?) (dO2fb2 core-prim . port-eof?) (dO2fb1 core-prim . output-port-buffer-mode) (dO2fb0 core-prim . open-string-output-port) (dO2faf core-prim . open-string-input-port) (dO2fae core-prim . open-file-output-port) (dO2fad core-prim . open-file-input/output-port) (dO2fac core-prim . open-file-input-port) (dO2fab core-prim . open-bytevector-output-port) (dO2faa core-prim . open-bytevector-input-port) (dO2fa9 core-prim . native-transcoder) (dO2fa8 core-prim . native-eol-style) (dO2fa7 core-prim . make-transcoder) (dO2fa6 core-prim . latin-1-codec) (dO2a21 core-prim . make-i/o-write-error) (dO2a0c core-prim . make-i/o-read-error) (dO2ac2 core-prim . make-i/o-port-error) (dO2a38 core-prim . make-i/o-invalid-position-error) (dO2a53 core-prim . make-i/o-filename-error) (dO2a6c core-prim . make-i/o-file-protection-error) (dO2a81 core-prim . make-i/o-file-is-read-only-error) (dO2aab core-prim . make-i/o-file-does-not-exist-error) (dO2a96 core-prim . make-i/o-file-already-exists-error) (dO29f7 core-prim . make-i/o-error) (dO2af2 core-prim . make-i/o-encoding-error) (dO2adb core-prim . make-i/o-decoding-error) (dO2fa5 core-prim . make-custom-textual-output-port) (dO2fa4 core-prim . make-custom-textual-input/output-port) (dO2fa3 core-prim . make-custom-textual-input-port) (dO2fa2 core-prim . make-custom-binary-output-port) (dO2fa1 core-prim . make-custom-binary-input/output-port) (dO2fa0 core-prim . make-custom-binary-input-port) (dO2f9f core-prim . make-bytevector) (dO2f9e core-prim . lookahead-u8) (dO2f9d core-prim . lookahead-char) (dO2a23 core-prim . i/o-write-error?) (dO2a0e core-prim . i/o-read-error?) (dO2ac6 core-prim . i/o-port-error?) (dO2a3c core-prim . i/o-invalid-position-error?) (dO2a57 core-prim . i/o-filename-error?) (dO2a6e core-prim . i/o-file-protection-error?) (dO2a83 core-prim . i/o-file-is-read-only-error?) (dO2aad core-prim . i/o-file-does-not-exist-error?) (dO2a98 core-prim . i/o-file-already-exists-error?) (dO29f9 core-prim . i/o-error?) (dO2a3e core-prim . i/o-error-position) (dO2ac8 core-prim . i/o-error-port) (dO2a59 core-prim . i/o-error-filename) (dO2af6 core-prim . i/o-encoding-error?) (dO2af8 core-prim . i/o-encoding-error-char) (dO2add core-prim . i/o-decoding-error?) (dO2f9c core-prim . get-u8) (dO2f9b core-prim . get-string-n!) (dO2f9a core-prim . get-string-n) (dO2f99 core-prim . get-string-all) (dO2f98 core-prim . get-line) (dO2f97 core-prim . get-datum) (dO2f96 core-prim . get-char) (dO2f95 core-prim . get-bytevector-some) (dO2f94 core-prim . get-bytevector-n!) (dO2f93 core-prim . get-bytevector-n) (dO2f92 core-prim . get-bytevector-all) (dO2f91 core-prim . flush-output-port) (dO2f90 core-prim . close-port) (dOe19 core-prim . scheme-report-environment) (dO2f8f core-prim . quotient) (dOe17 core-prim . null-environment) (dO2f8e core-prim . remainder) (dO2f8d core-prim . modulo) (dO2f8c core-prim . inexact->exact) (dO2f8b core-prim . force) (dO2f8a core-prim . exact->inexact) (dO2f89 core-prim . make-promise) (dO2f88 core-prim . exit) (dO2c2d core-prim . command-line) (dO2f87 core-prim . string-fill!) (dO2f86 core-prim . string-set!) (dO2f85 core-prim . set-cdr!) (dO2f84 core-prim . set-car!) (dO2f83 core-prim . remove) (dO2f82 core-prim . remv) (dO2f81 core-prim . remp) (dO2f80 core-prim . remq) (dO2f7f core-prim . partition) (dO2f7e core-prim . memv) (dO2f7d core-prim . memq) (dO2f7c core-prim . memp) (dO2f7b core-prim . member) (dO2f7a core-prim . exists) (dO2f79 core-prim . for-all) (dO2f78 core-prim . fold-right) (dO2f77 core-prim . fold-left) (dO2f76 core-prim . find) (dO2f75 core-prim . filter) (dO2f74 core-prim . cons*) (dO2f73 core-prim . assv) (dO2f72 core-prim . assq) (dO2f71 core-prim . assp) (dO2f70 core-prim . assoc) (dO2f6f core-prim . call-with-string-output-port) (dO2f6e core-prim . call-with-port) (dO2f6d core-prim . call-with-bytevector-output-port) (dO2f6c core-prim . bytevector->string) (dO2f6b core-prim . buffer-mode?) (dO2f6a core-prim . binary-port?) (dO2f69 core-prim . with-exception-handler) (dO2f68 core-prim . raise-continuable) (dO2f67 core-prim . raise) (dOe1d core-prim . eval) (dOe15 core-prim . environment) (dO2f66 core-prim . make-enumeration) (dO2f65 core-prim . enum-set=?) (dO2f64 core-prim . enum-set-universe) (dO2f63 core-prim . enum-set-union) (dO2f62 core-prim . enum-set-subset?) (dO2f61 core-prim . enum-set-projection) (dO2f60 core-prim . enum-set-member?) (dO2f5f core-prim . enum-set-intersection) (dO2f5e core-prim . enum-set-indexer) (dO2f5d core-prim . enum-set-difference) (dO2f5c core-prim . enum-set-constructor) (dO2f5b core-prim . enum-set-complement) (dO2f5a core-prim . enum-set->list) (dO296d core-prim . who-condition?) (dO28e5 core-prim . warning?) (dO2924 core-prim . violation?) (dO29e4 core-prim . undefined-violation?) (dO29cb core-prim . syntax-violation?) (dO29cf core-prim . syntax-violation-subform) (dO29cd core-prim . syntax-violation-form) (dOe3d core-prim . syntax-violation) (dO2f59 core-prim . simple-conditions) (dO28fa core-prim . serious-condition?) (dO2984 core-prim . non-continuable-violation?) (dO28ce core-prim . message-condition?) (dO2969 core-prim . make-who-condition) (dO28e3 core-prim . make-warning) (dO2922 core-prim . make-violation) (dO29e2 core-prim . make-undefined-violation) (dO29c5 core-prim . make-syntax-violation) (dO28f8 core-prim . make-serious-condition) (dO2982 core-prim . make-non-continuable-violation) (dO28ca core-prim . make-message-condition) (dO29ac core-prim . make-lexical-violation) (dO294e core-prim . make-irritants-condition) (dO2997 core-prim . make-implementation-restriction-violation) (dO290d core-prim . make-error) (dO2937 core-prim . make-assertion-violation) (dO29ae core-prim . lexical-violation?) (dO2952 core-prim . irritants-condition?) (dO2999 core-prim . implementation-restriction-violation?) (dO290f core-prim . error?) (dO296f core-prim . condition-who) (dO2f58 core-prim . condition-predicate) (dO28d0 core-prim . condition-message) (dO2954 core-prim . condition-irritants) (dO2f57 core-prim . condition-accessor) (dO2f56 core-prim . condition) (dO2939 core-prim . assertion-violation?) (dO2f55 core-prim . condition?) (dO2f54 core-prim . utf32->string) (dO2f53 core-prim . utf16->string) (dO2f52 core-prim . utf8->string) (dO2f51 core-prim . uint-list->bytevector) (dO2f50 core-prim . u8-list->bytevector) (dO2f4f core-prim . string->utf8) (dO2f4e core-prim . string->utf32) (dO2f4d core-prim . string->utf16) (dO2f4c core-prim . sint-list->bytevector) (dO2f4b core-prim . native-endianness) (dO2f4a core-prim . bytevector?) (dO2f49 core-prim . bytevector=?) (dO2f48 core-prim . bytevector-uint-set!) (dO2f47 core-prim . bytevector-uint-ref) (dO2f46 core-prim . bytevector-u8-set!) (dO2f45 core-prim . bytevector-u8-ref) (dO2f44 core-prim . bytevector-u64-set!) (dO2f43 core-prim . bytevector-u64-ref) (dO2f42 core-prim . bytevector-u64-native-set!) (dO2f41 core-prim . bytevector-u64-native-ref) (dO2f40 core-prim . bytevector-u32-set!) (dO2f3f core-prim . bytevector-u32-ref) (dO2f3e core-prim . bytevector-u32-native-set!) (dO2f3d core-prim . bytevector-u32-native-ref) (dO2f3c core-prim . bytevector-u16-set!) (dO2f3b core-prim . bytevector-u16-ref) (dO2f3a core-prim . bytevector-u16-native-set!) (dO2f39 core-prim . bytevector-u16-native-ref) (dO2f38 core-prim . bytevector-sint-set!) (dO2f37 core-prim . bytevector-sint-ref) (dO2f36 core-prim . bytevector-s8-set!) (dO2f35 core-prim . bytevector-s8-ref) (dO2f34 core-prim . bytevector-s64-set!) (dO2f33 core-prim . bytevector-s64-ref) (dO2f32 core-prim . bytevector-s64-native-set!) (dO2f31 core-prim . bytevector-s64-native-ref) (dO2f30 core-prim . bytevector-s32-set!) (dO2f2f core-prim . bytevector-s32-ref) (dO2f2e core-prim . bytevector-s32-native-set!) (dO2f2d core-prim . bytevector-s32-native-ref) (dO2f2c core-prim . bytevector-s16-set!) (dO2f2b core-prim . bytevector-s16-ref) (dO2f2a core-prim . bytevector-s16-native-set!) (dO2f29 core-prim . bytevector-s16-native-ref) (dO2f28 core-prim . bytevector-length) (dO2f27 core-prim . bytevector-ieee-single-ref) (dO2f26 core-prim . bytevector-ieee-single-set!) (dO2f25 core-prim . bytevector-ieee-single-native-set!) (dO2f24 core-prim . bytevector-ieee-single-native-ref) (dO2f23 core-prim . bytevector-ieee-double-set!) (dO2f22 core-prim . bytevector-ieee-double-ref) (dO2f21 core-prim . bytevector-ieee-double-native-set!) (dO2f20 core-prim . bytevector-ieee-double-native-ref) (dO2f1f core-prim . bytevector-fill!) (dO2f1e core-prim . bytevector-copy!) (dO2f1d core-prim . bytevector-copy) (dO2f1c core-prim . bytevector->uint-list) (dO2f1b core-prim . bytevector->u8-list) (dO2f1a core-prim . bytevector->sint-list) (dO2b22 core-prim . no-nans-violation?) (dO2b0d core-prim . no-infinities-violation?) (dO2b20 core-prim . make-no-nans-violation) (dO2b0b core-prim . make-no-infinities-violation) (dO2f19 core-prim . real->flonum) (dO2f18 core-prim . flzero?) (dO2f17 core-prim . fltruncate) (dO2f16 core-prim . fltan) (dO2f15 core-prim . flsqrt) (dO2f14 core-prim . flsin) (dO2f13 core-prim . flround) (dO2f12 core-prim . flpositive?) (dO2f11 core-prim . flonum?) (dO2f10 core-prim . flodd?) (dO2f0f core-prim . flnumerator) (dO2f0e core-prim . flnegative?) (dO2f0d core-prim . flnan?) (dO2f0c core-prim . flmod0) (dO2f0b core-prim . flmod) (dO2f0a core-prim . flmin) (dO2f09 core-prim . flmax) (dO2f08 core-prim . fllog) (dO2f07 core-prim . flinteger?) (dO2f06 core-prim . flinfinite?) (dO2f05 core-prim . flfloor) (dO2f04 core-prim . flfinite?) (dO2f03 core-prim . flexpt) (dO2f02 core-prim . flexp) (dO2f01 core-prim . fleven?) (dO2f00 core-prim . fldiv0-and-mod0) (dO2eff core-prim . fldiv0) (dO2efe core-prim . fldiv-and-mod) (dO2efd core-prim . fldiv) (dO2efc core-prim . fldenominator) (dO2efb core-prim . flcos) (dO2efa core-prim . flceiling) (dO2ef9 core-prim . flatan) (dO2ef8 core-prim . flasin) (dO2ef7 core-prim . flacos) (dO2ef6 core-prim . flabs) (dO2ef5 core-prim . fl>?) (dO2ef4 core-prim . fl>=?) (dO2ef3 core-prim . fl=?) (dO2ef2 core-prim . fl<?) (dO2ef1 core-prim . fl<=?) (dO2ef0 core-prim . fl/) (dO2eef core-prim . fl-) (dO2eee core-prim . fl+) (dO2eed core-prim . fl*) (dO2eec core-prim . fixnum->flonum) (dO2eeb core-prim . fxzero?) (dO2eea core-prim . fxxor) (dO2ee9 core-prim . fxrotate-bit-field) (dO2ee8 core-prim . fxreverse-bit-field) (dO2ee7 core-prim . fxpositive?) (dO2ee6 core-prim . fxodd?) (dO2ee5 core-prim . fxnot) (dO2ee4 core-prim . fxnegative?) (dO2ee3 core-prim . fxmod0) (dO2ee2 core-prim . fxmod) (dO2ee1 core-prim . fxmin) (dO2ee0 core-prim . fxmax) (dO2edf core-prim . fxlength) (dO2ede core-prim . fxior) (dO2edd core-prim . fxif) (dO2edc core-prim . fxfirst-bit-set) (dO2edb core-prim . fxeven?) (dO2eda core-prim . fxdiv0-and-mod0) (dO2ed9 core-prim . fxdiv0) (dO2ed8 core-prim . fxdiv-and-mod) (dO2ed7 core-prim . fxdiv) (dO2ed6 core-prim . fxcopy-bit-field) (dO2ed5 core-prim . fxcopy-bit) (dO2ed4 core-prim . fxbit-set?) (dO2ed3 core-prim . fxbit-field) (dO2ed2 core-prim . fxbit-count) (dO2ed1 core-prim . fxarithmetic-shift-right) (dO2ed0 core-prim . fxarithmetic-shift-left) (dO2ecf core-prim . fxarithmetic-shift) (dO2ece core-prim . fxand) (dO2ecd core-prim . fx>?) (dO2ecc core-prim . fx>=?) (dO2ecb core-prim . fx=?) (dO2eca core-prim . fx<?) (dO2ec9 core-prim . fx<=?) (dO2ec8 core-prim . fx-/carry) (dO2ec7 core-prim . fx-) (dO2ec6 core-prim . fx+/carry) (dO2ec5 core-prim . fx+) (dO2ec4 core-prim . fx*/carry) (dO2ec3 core-prim . fx*) (dO2ec2 core-prim . greatest-fixnum) (dO2ec1 core-prim . least-fixnum) (dO2ec0 core-prim . fixnum-width) (dO2ebf core-prim . fixnum?) (dO2ebe core-prim . bitwise-rotate-bit-field) (dO2ebd core-prim . bitwise-reverse-bit-field) (dO2ebc core-prim . bitwise-length) (dO2ebb core-prim . bitwise-if) (dO2eba core-prim . bitwise-first-bit-set) (dO2eb9 core-prim . bitwise-copy-bit-field) (dO2eb8 core-prim . bitwise-copy-bit) (dO2eb7 core-prim . bitwise-bit-set?) (dO2eb6 core-prim . bitwise-bit-field) (dO2eb5 core-prim . bitwise-bit-count) (dO2eb4 core-prim . bitwise-xor) (dO2eb3 core-prim . bitwise-ior) (dO2eb2 core-prim . bitwise-and) (dO2eb1 core-prim . bitwise-not) (dO2eb0 core-prim . bitwise-arithmetic-shift-right) (dO2eaf core-prim . bitwise-arithmetic-shift-left) (dO2eae core-prim . bitwise-arithmetic-shift) (dO2ead core-prim . zero?) (dO2eac core-prim . vector?) (dO2eab core-prim . vector-set!) (dO2eaa core-prim . vector-ref) (dO2ea9 core-prim . vector-map) (dO2ea8 core-prim . vector-length) (dO2ea7 core-prim . vector-for-each) (dO2ea6 core-prim . vector-fill!) (dO2ea5 core-prim . vector->list) (dO2ea4 core-prim . vector) (dO2ea3 core-prim . values) (dO2ea2 core-prim . truncate) (dO2ea1 core-prim . tan) (dO2ea0 core-prim . symbol?) (dO2e9f core-prim . symbol=?) (dO2e9e core-prim . symbol->string) (dO2e9d core-prim . substring) (dO2e9c core-prim . string?) (dO2e9b core-prim . string>?) (dO2e9a core-prim . string>=?) (dO2e99 core-prim . string=?) (dO2e98 core-prim . string<?) (dO2e97 core-prim . string<=?) (dO2e96 core-prim . string-ref) (dO2e95 core-prim . string-length) (dO2e94 core-prim . string-for-each) (dO2e93 core-prim . string-copy) (dO2e92 core-prim . string-append) (dO2e91 core-prim . string->symbol) (dO2e90 core-prim . string->number) (dO2e8f core-prim . string->list) (dO2e8e core-prim . string) (dO2e8d core-prim . sqrt) (dO2e8c core-prim . sin) (dO2e8b core-prim . round) (dO2e8a core-prim . reverse) (dO2e89 core-prim . real?) (dO2e88 core-prim . real-valued?) (dO2e87 core-prim . real-part) (dO2e86 core-prim . rationalize) (dO2e85 core-prim . rational?) (dO2e84 core-prim . rational-valued?) (dO2e83 core-prim . procedure?) (dO2e82 core-prim . positive?) (dO2e81 core-prim . pair?) (dO2e80 core-prim . odd?) (dO2e7f core-prim . numerator) (dO2e7e core-prim . number?) (dO2e7d core-prim . number->string) (dO2e7c core-prim . null?) (dO2e7b core-prim . not) (dO2e7a core-prim . negative?) (dO2e79 core-prim . nan?) (dO2e78 core-prim . min) (dO2e77 core-prim . max) (dO2e76 core-prim . map) (dO2e75 core-prim . make-vector) (dO2e74 core-prim . make-string) (dO2e73 core-prim . make-rectangular) (dO2e72 core-prim . make-polar) (dO2e71 core-prim . magnitude) (dO2e70 core-prim . log) (dO2e6f core-prim . list?) (dO2e6e core-prim . list-tail) (dO2e6d core-prim . list-ref) (dO2e6c core-prim . list->vector) (dO2e6b core-prim . list->string) (dO2e6a core-prim . list) (dO2e69 core-prim . length) (dO2e68 core-prim . lcm) (dO2e67 core-prim . integer?) (dO2e66 core-prim . integer-valued?) (dO2e65 core-prim . integer->char) (dO2e64 core-prim . infinite?) (dO2e63 core-prim . inexact?) (dO2e62 core-prim . inexact) (dO2e61 core-prim . imag-part) (dO2e60 core-prim . gcd) (dO2e5f core-prim . for-each) (dO2e5e core-prim . floor) (dO2e5d core-prim . finite?) (dO2e5c core-prim . expt) (dO2e5b core-prim . exp) (dO2e5a core-prim . exact?) (dO2e59 core-prim . exact-integer-sqrt) (dO2e58 core-prim . exact) (dO2e57 core-prim . even?) (dO2e56 core-prim . error) (dO2e55 core-prim . eqv?) (dO2e54 core-prim . equal?) (dO2e53 core-prim . eq?) (dO2e52 core-prim . dynamic-wind) (dO2e51 core-prim . div0-and-mod0) (dO2e50 core-prim . mod0) (dO2e4f core-prim . div0) (dO2e4e core-prim . div-and-mod) (dO2e4d core-prim . mod) (dO2e4c core-prim . div) (dO2e4b core-prim . denominator) (dO2e4a core-prim . cos) (dO2e49 core-prim . cons) (dO2e48 core-prim . complex?) (dO2e47 core-prim . char?) (dO2e46 core-prim . char>?) (dO2e45 core-prim . char>=?) (dO2e44 core-prim . char=?) (dO2e43 core-prim . char<?) (dO2e42 core-prim . char<=?) (dO2e41 core-prim . char->integer) (dO2e40 core-prim . ceiling) (dO2e3f core-prim . call-with-values) (dO2e3e core-prim . call/cc) (dO2e3d core-prim . call-with-current-continuation) (dO2e3c core-prim . cddddr) (dO2e3b core-prim . cdddar) (dO2e3a core-prim . cddadr) (dO2e39 core-prim . cddaar) (dO2e38 core-prim . cdaddr) (dO2e37 core-prim . cdadar) (dO2e36 core-prim . cdaadr) (dO2e35 core-prim . cdaaar) (dO2e34 core-prim . cadddr) (dO2e33 core-prim . caddar) (dO2e32 core-prim . cadadr) (dO2e31 core-prim . cadaar) (dO2e30 core-prim . caaddr) (dO2e2f core-prim . caadar) (dO2e2e core-prim . caaadr) (dO2e2d core-prim . caaaar) (dO2e2c core-prim . cdddr) (dO2e2b core-prim . cddar) (dO2e2a core-prim . cdadr) (dO2e29 core-prim . cdaar) (dO2e28 core-prim . caddr) (dO2e27 core-prim . cadar) (dO2e26 core-prim . caadr) (dO2e25 core-prim . caaar) (dO2e24 core-prim . cddr) (dO2e23 core-prim . cdar) (dO2e22 core-prim . cadr) (dO2e21 core-prim . caar) (dO2e20 core-prim . cdr) (dO2e1f core-prim . car) (dO2e1e core-prim . boolean?) (dO2e1d core-prim . boolean=?) (dO2e1c core-prim . atan) (dO2e1b core-prim . assertion-violation) (dOe37 core-prim . assertion-error) (dO2e1a core-prim . asin) (dO2e19 core-prim . apply) (dO2e18 core-prim . append) (dO2e17 core-prim . angle) (dO2e16 core-prim . acos) (dO2e15 core-prim . abs) (dO2e14 core-prim . /) (dO2e13 core-prim . *) (dO2e12 core-prim . -) (dO2e11 core-prim . +) (dO2e10 core-prim . >=) (dO2e0f core-prim . >) (dO2e0e core-prim . =) (dO2e0d core-prim . <=) (dO2e0c core-prim . <) (dO2e0b core-prim . library) (dO2e0a $core-rtd &no-nans-rtd &no-nans-rcd) (dO2e09 $core-rtd &no-infinities-rtd &no-infinities-rcd) (dO2e08 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (dO2e07 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (dO2e06 $core-rtd &i/o-port-rtd &i/o-port-rcd) (dO2e05 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (dO2e04 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (dO2e03 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (dO2e02 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (dO2e01 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (dO2e00 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (dO2dff $core-rtd &i/o-write-rtd &i/o-write-rcd) (dO2dfe $core-rtd &i/o-read-rtd &i/o-read-rcd) (dO2dfd $core-rtd &i/o-rtd &i/o-rcd) (dO2dfc $core-rtd &undefined-rtd &undefined-rcd) (dO2dfb $core-rtd &syntax-rtd &syntax-rcd) (dO2dfa $core-rtd &lexical-rtd &lexical-rcd) (dO2df9 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (dO2df8 $core-rtd &non-continuable-rtd &non-continuable-rcd) (dO2df7 $core-rtd &who-rtd &who-rcd) (dO2df6 $core-rtd &irritants-rtd &irritants-rcd) (dO2df5 $core-rtd &assertion-rtd &assertion-rcd) (dO2df4 $core-rtd &violation-rtd &violation-rcd) (dO2df3 $core-rtd &error-rtd &error-rcd) (dO2df2 $core-rtd &serious-rtd &serious-rcd) (dO2df1 $core-rtd &warning-rtd &warning-rcd) (dO2df0 $core-rtd &message-rtd &message-rcd) (dO2def $core-rtd &condition-rtd &condition-rcd) (dO2dee macro . define-condition-type) (dO2ded macro . define-enumeration) (dO2dec macro . define-record-type) (dO2deb macro . parent-rtd) (dO2dea macro . nongenerative) (dO2de9 macro . opaque) (dO2de8 macro . sealed) (dO2de7 macro . protocol) (dO2de6 macro . parent) (dO2de5 macro . immutable) (dO2de4 macro . mutable) (dO2de3 macro . fields) (dO2de2 macro . error-handling-mode) (dO2de1 macro . file-options) (dO2de0 macro . buffer-mode) (dO2ddf macro . eol-style) (dO2dde macro . guard) (dO2ddd macro . trace-define) (dO2ddc macro . trace-lambda) (dO2ddb macro . unsyntax-splicing) (dO2dda macro . unsyntax) (dO2dd9 macro . unquote-splicing) (dO2dd8 macro . unquote) (dO2dd7 macro . _) (dO2dd6 macro . else) (dO2dd5 macro . =>) (dO2dd4 macro . ...) (dO2dd3 macro . assert) (dO2dd2 macro . endianness) (dO2dd1 macro . delay) (dO2dd0 macro . time) (dO2dcf macro . do) (dO2dce macro . cond) (dO2dcd macro . let*) (dO2dcc macro . let) (dO2dcb macro . let*-values) (dO2dca macro . let-values) (dO2dc9 macro . identifier-syntax) (dO2dc8 macro . with-syntax) (dO2dc7 macro . quasisyntax) (dO2dc6 macro . quasiquote) (dO2dc5 macro . syntax-rules) (dO2dc4 macro . include) (dO2dc3 macro . define-struct) (dO2dc2 core-macro . record-constructor-descriptor) (dO2dc1 core-macro . record-type-descriptor) (dO2dc0 macro . case) (dO2dbf macro . parameterize) (dO2dbe macro . unless) (dO2dbd macro . when) (dO2dbc core-macro . or) (dO2dbb core-macro . and) (dO2dba core-macro . if) (dO2db9 core-macro . letrec*) (dO2db8 core-macro . letrec) (dO2db7 core-macro . type-descriptor) (dO2db6 core-macro . case-lambda) (dO2db5 core-macro . lambda) (dO2db4 core-macro . syntax) (dO2db3 core-macro . syntax-case) (dO2db2 core-macro . quote) (dO2db1 core-macro . foreign-call) (dO2db0 letrec-syntax) (dO2daf let-syntax) (dO2dae set!) (dO2dad import) (dO2dac begin) (dO2dab module) (dO2daa define-syntax) (dO2da9 define)) values values '#f '#f '#f '#f) (dO982@dO7ce@install-library 'dO30ed '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . dO30cc) (eval-core . dO30cb) (set-symbol-value! . dO30ca) (symbol-value . dO30c9) (gensym . dO30c8) (void . dO30c7)) '() values values '#f '#f '#f '#f) (dO982@dO7ce@install-library 'dO30ee '(mosh) '() '() '() '() '((set-symbol-value! . dO30ca) (symbol-value . dO30c9) (regexp? . dO30c5) (read-line . dO30c4) (ungensym . dO30c2) (alist->eq-hash-table . dO30c1) (assoc-ref . dO30c0) (print . dO30bf) (format . dO30be) (host-os . dO30bd) (library-path . dO7ad) (standard-library-path . dO30bc) (file-newer? . dO30bb) (stat-mtime . dO30ba) (digit->integer . dO30b6) (call-with-string-input-port . dO30b5) (call-with-string-io . dO30b4) (string-split . dO30b3) (bytevector-for-each . dO30b2) (string->regexp . dO30b1) (rxmatch . dO30b0) (regexp-replace-all . dO30af) (hashtable-for-each . dO30ae) (set-current-directory! . dO30a9) (expand-path . dO30a8) (current-directory . dO30a7) (p . dO306a) (get-timeofday . dO3052) (get-command-line . dO3051) (sys-display . dO3050) (whereis . dO304f) (register . dO304e) (vm-join! . dO304d) (vm-set-value! . dO304c) (vm? . dO304b) (main-vm? . dO304a) (vm-eval . dO3049) (vm-self . dO3048) (vm-start! . dO3047) (make-vm . dO3046) (mutex-try-lock! . dO3045) (mutex-unlock! . dO3044) (mutex-lock! . dO3043) (mutex? . dO3042) (make-mutex . dO3041) (condition-variable-notify-all! . dO3040) (condition-variable-notify! . dO303f) (condition-variable-wait! . dO303e) (make-condition-variable . dO303d) (mosh-executable-path . dO303c) (make-file-options . dO303b) (source-info . dO303a) (make-compiler-instruction . dO3039) (make-instruction . dO3038) (set-source-info! . dO3037) (bignum? . dO3036) (fast-equal? . dO3035) (fasl-read . dO3034) (fasl-write . dO3033) (time-usage . dO3032) (os-constant . dO3031) (time . dO2dd0) (include . dO2dc4)) '() values values '#f '#f '#f '#f) (dO982@dO7ce@install-library 'dO30ef '(system) '() '() '() '() '((gensym-prefix-set! . dO30c3) (write-to-file . dO30b9) (file->list . dO30b8) (file->string . dO30b7) (call-process . dO30ad) (local-tz-offset . dO30ac) (microseconds . dO30ab) (directory-list . dO30aa) (expand-path . dO30a8) (%spawn . dO30a6) (%waitpid . dO30a5) (simple-struct-name . dO30a4) (simple-struct-set! . dO30a3) (simple-struct-ref . dO30a2) (make-simple-struct . dO30a1) (simple-struct? . dO30a0) (pointer-ref-c-int64 . dO309f) (pointer-ref-c-int32 . dO309e) (pointer-ref-c-int16 . dO309d) (pointer-ref-c-int8 . dO309c) (pointer-ref-c-uint64 . dO309b) (pointer-ref-c-uint32 . dO309a) (pointer-ref-c-uint16 . dO3099) (pointer-ref-c-uint8 . dO3098) (pointer-set-c-uint64! . dO3097) (pointer-set-c-uint32! . dO3096) (pointer-set-c-uint16! . dO3095) (pointer-set-c-uint8! . dO3094) (pointer-set-c-int64! . dO3093) (pointer-set-c-int32! . dO3092) (pointer-set-c-int16! . dO3091) (pointer-set-c-int8! . dO3090) (pointer-set-c-pointer! . dO308f) (pointer-set-c-double! . dO308e) (pointer-set-c-float! . dO308d) (pointer-set-c-long-long! . dO308c) (pointer-set-c-long! . dO308b) (pointer-set-c-int! . dO308a) (pointer-set-c-short! . dO3089) (pointer-set-c-char! . dO3088) (pointer-ref-c-pointer . dO3087) (pointer-ref-c-double . dO3086) (pointer-ref-c-float . dO3085) (pointer-ref-c-unsigned-long-long . dO3084) (pointer-ref-c-signed-long-long . dO3083) (pointer-ref-c-unsigned-long . dO3082) (pointer-ref-c-signed-long . dO3081) (pointer-ref-c-unsigned-int . dO3080) (pointer-ref-c-signed-int . dO307f) (pointer-ref-c-unsigned-short . dO307e) (pointer-ref-c-signed-short . dO307d) (pointer-ref-c-unsigned-char . dO307c) (pointer-ref-c-signed-char . dO307b) (pointer->integer . dO307a) (integer->pointer . dO3079) (pointer? . dO3078) (shared-errno . dO3077) (%ffi-supported? . dO3076) (%ffi-pointer->string . dO3075) (%ffi-call->string-or-zero . dO3074) (%ffi-call->double . dO3073) (%ffi-call->void* . dO3072) (%ffi-call->void . dO3071) (%ffi-call->char . dO3070) (%ffi-call->int . dO306f) (%ffi-lookup . dO306e) (%ffi-open . dO306d) (%fork . dO306c) (%pipe . dO306b) (open-output-string . dO3069) (get-output-string . dO3068) (file-stat-ctime . dO3067) (file-stat-atime . dO3066) (file-stat-mtime . dO3065) (file-size-in-bytes . dO3064) (file-writable? . dO3063) (file-executable? . dO3062) (file-readable? . dO3061) (file-regular? . dO3060) (file-symbolic-link? . dO305f) (file-directory? . dO305e) (create-symbolic-link . dO305d) (rename-file . dO305c) (delete-directory . dO305b) (create-directory . dO305a) (create-mosh-cache-dir . dO3059) (get-environment-variables . dO3058) (get-environment-variable . dO3057) (join-wraps . dO3056) (id->real-label . dO3055) (same-marks? . dO3054) (same-marks*? . dO3053) (make-parameter . dO596) (socket-port . dO3030) (socket-shutdown . dO302f) (socket-close . dO302e) (socket-send . dO302d) (socket-recv! . dO302c) (socket-recv . dO302b) (make-server-socket . dO302a) (make-client-socket . dO3029) (socket-accept . dO3028) (socket? . dO3027) (parameterize . dO2dbf)) '() values values '#f '#f '#f '#f))
((lambda (dO2c1c@add-library-path! dO2c1e@parse-and-add-library-path dO2c20@for-each-with-index dO2c22@rpad dO2c24@condition-printer dO2c26@record->field-alist dO2c28@map-with-index dO2c2a@repl dO2c2c@trace-printer dO2c2e@command-line dO2c30@local-library-path dO2c32@load/args dO2c34@load dO2c36@ironscheme-build dO2c38@eval-top-level dO2c3a@compile-system-libraries dO2c3c@compile dO2c3e@compile->closure dO2c40@pre-compile-r6rs-file dO2c42@load-r6rs-top-level dO2c44@load-r6rs-top-level-sexp dO2c46@prefix-inc dO2c48@prefix-inc!) (begin (set! dO2c1c@add-library-path! (lambda (dO2c81@path) (dO972@dO7ae@library-path (append (dO972@dO7ae@library-path) (list dO2c81@path))))) (set! dO2c1e@parse-and-add-library-path (lambda (dO2c83@paths dO2c84@message) ((lambda (dO2c87@t) (if dO2c87@t ((lambda (dO2c89@paths) (for-each (lambda (dO2c8b@path) (if (file-exists? dO2c8b@path) (dO2c1c@add-library-path! (expand-path dO2c8b@path)) (format (current-error-port) dO2c84@message dO2c8b@path))) (string-split dO2c89@paths '#\:))) dO2c87@t) (void))) dO2c83@paths))) (set! dO2c20@for-each-with-index (lambda (dO2c8d@proc dO2c8e@lst) (letrec ((dO2c91@loop (lambda (dO2c93@i dO2c94@lst) (if (null? dO2c94@lst) (if '#f '#f (void)) (begin (dO2c8d@proc dO2c93@i (car dO2c94@lst)) (dO2c91@loop (+ dO2c93@i '1) (cdr dO2c94@lst))))))) (dO2c91@loop '1 dO2c8e@lst)))) (set! dO2c22@rpad (lambda (dO2c97@str dO2c98@pad dO2c99@n) ((lambda (dO2c9d@rest) ((letrec ((dO2c9f@loop (lambda (dO2ca1@rest dO2ca2@ret) (if (<= dO2ca1@rest '0) dO2ca2@ret (dO2c9f@loop (- dO2ca1@rest '1) (string-append dO2ca2@ret dO2c98@pad)))))) dO2c9f@loop) dO2c9d@rest (format '"~a" dO2c97@str))) (- dO2c99@n (string-length (format '"~a" dO2c97@str)))))) (set! dO2c24@condition-printer (lambda (dO2ca5@e dO2ca6@port) ((lambda (dO2caa@max-condition-len) (begin (set! dO2caa@max-condition-len (apply max (map (lambda (dO2cbb@c) (string-length (symbol->string (record-type-name (record-rtd dO2cbb@c))))) (simple-conditions dO2ca5@e)))) (begin (display '" Condition components:\n" dO2ca6@port) (dO2c20@for-each-with-index (lambda (dO2cab@i dO2cac@x) ((lambda (dO2caf@rtd dO2cb0@fields-alist) (begin (format dO2ca6@port '" ~d. ~a" dO2cab@i (dO2c22@rpad (symbol->string (record-type-name dO2caf@rtd)) '" " dO2caa@max-condition-len)) (if (null? dO2cb0@fields-alist) (newline dO2ca6@port) (void)) ((letrec ((dO2cb3@loop (lambda (dO2cb5@first dO2cb6@fields-alist) (if (null? dO2cb6@fields-alist) '() ((lambda (dO2cb9@field) (begin (if (not dO2cb5@first) (display (dO2c22@rpad '"" '" " (+ '4 dO2caa@max-condition-len)) dO2ca6@port) (void)) (display '"       " dO2ca6@port) (display (car dO2cb9@field) dO2ca6@port) (display '": " dO2ca6@port) (write (cdr dO2cb9@field) dO2ca6@port) (newline dO2ca6@port) (dO2cb3@loop '#f (cdr dO2cb6@fields-alist)))) (car dO2cb6@fields-alist)))))) dO2cb3@loop) '#t dO2cb0@fields-alist))) (record-rtd dO2cac@x) (dO2c26@record->field-alist dO2cac@x))) (simple-conditions dO2ca5@e))))) '#f))) (set! dO2c26@record->field-alist (lambda (dO2cbd@r) ((lambda (dO2cc0@ref) (begin (set! dO2cc0@ref (lambda (dO2ccb@rtd dO2ccc@i dO2ccd@x) ((lambda (dO2cd1@val) (if (symbol? dO2cd1@val) (ungensym dO2cd1@val) dO2cd1@val)) ((record-accessor dO2ccb@rtd dO2ccc@i) dO2ccd@x)))) ((letrec ((dO2cc1@loop (lambda (dO2cc3@ret dO2cc4@rtd) (if dO2cc4@rtd (dO2cc1@loop (append dO2cc3@ret (dO2c28@map-with-index (lambda (dO2cc7@i dO2cc8@field) (cons dO2cc8@field (dO2cc0@ref dO2cc4@rtd dO2cc7@i dO2cbd@r))) (vector->list (record-type-field-names dO2cc4@rtd)))) (record-type-parent dO2cc4@rtd)) dO2cc3@ret)))) dO2cc1@loop) '() (record-rtd dO2cbd@r)))) '#f))) (set! dO2c28@map-with-index (lambda (dO2cd3@proc dO2cd4@lst) ((letrec ((dO2cd7@loop (lambda (dO2cd9@i dO2cda@lst dO2cdb@ret) (if (null? dO2cda@lst) (reverse dO2cdb@ret) (dO2cd7@loop (+ dO2cd9@i '1) (cdr dO2cda@lst) (cons (dO2cd3@proc dO2cd9@i (car dO2cda@lst)) dO2cdb@ret)))))) dO2cd7@loop) '0 dO2cd4@lst '()))) (set! dO2c2a@repl (lambda dO2cdf@x ((lambda (dO2ce2@rec) (begin (set! dO2ce2@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (dO2ce5@dO2ce3) (lambda () (with-exception-handler (lambda (dO2ce7@e) ((call/cc (lambda (dO2ce9@dO2ce4) (dO2ce5@dO2ce3 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? dO2ce7@e) (dO2c24@condition-printer dO2ce7@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" dO2ce7@e))) (dO2ce9@dO2ce4 (lambda () (raise-continuable dO2ce7@e)))))))))) (lambda () ((letrec ((dO2ceb@loop (lambda (dO2ced@line dO2cee@accum) ((lambda (dO2cf2@parentheses-ok? dO2cf4@eval-string-print) (begin (set! dO2cf2@parentheses-ok? (lambda (dO2cf9@text) ((letrec ((dO2cfb@loop (lambda (dO2cfd@chars dO2cfe@p0 dO2cff@p1) (if (null? dO2cfd@chars) (= '0 dO2cfe@p0 dO2cff@p1) ((lambda (dO2d03@t) (if (memv dO2d03@t '(#\()) (dO2cfb@loop (cdr dO2cfd@chars) (+ dO2cfe@p0 '1) dO2cff@p1) (if (memv dO2d03@t '(#\))) (dO2cfb@loop (cdr dO2cfd@chars) (- dO2cfe@p0 '1) dO2cff@p1) (if (memv dO2d03@t '(#\[)) (dO2cfb@loop (cdr dO2cfd@chars) dO2cfe@p0 (+ dO2cff@p1 '1)) (if (memv dO2d03@t '(#\])) (dO2cfb@loop (cdr dO2cfd@chars) dO2cfe@p0 (- dO2cff@p1 '1)) (dO2cfb@loop (cdr dO2cfd@chars) dO2cfe@p0 dO2cff@p1)))))) (car dO2cfd@chars)))))) dO2cfb@loop) (string->list dO2cf9@text) '0 '0))) (set! dO2cf4@eval-string-print (lambda (dO2cf7@text) (if (not (or (string=? '"\n" dO2cf7@text) (= '0 (string-length dO2cf7@text)))) (write (dO2c38@eval-top-level (call-with-port (open-string-input-port dO2cf7@text) read))) (void)))) (if (eof-object? dO2ced@line) (begin (dO2cf4@eval-string-print dO2cee@accum) (exit)) ((lambda (dO2cf5@current) (if (dO2cf2@parentheses-ok? dO2cf5@current) (dO2cf4@eval-string-print dO2cf5@current) (dO2ceb@loop (get-line (current-input-port)) dO2cf5@current))) (string-append dO2cee@accum dO2ced@line))))) '#f '#f)))) dO2ceb@loop) (get-line (current-input-port)) '""))))))) (newline) (dO2ce2@rec)))) (dO2ce2@rec))) '#f))) (set! dO2c2c@trace-printer (dO6b8@dO597@make-parameter write)) (set! dO2c2e@command-line (dO6b8@dO597@make-parameter (get-command-line))) (set! dO2c30@local-library-path (lambda (dO2d05@filename) (dO972@dO7ae@library-path))) (set! dO2c32@load/args (lambda (dO2d07@filename . dO2d09@args) (begin (apply dO2c42@load-r6rs-top-level dO2d07@filename 'load dO2d09@args) (void)))) (set! dO2c34@load (lambda (dO2d0b@filename) (begin (apply dO2c42@load-r6rs-top-level dO2d0b@filename 'load (dO2c2e@command-line)) (void)))) (set! dO2c36@ironscheme-build (lambda () (dO2c34@load '"ironscheme-buildscript.ss"))) (set! dO2c38@eval-top-level (lambda (dO2d0d@x) (dO2843@dOe1e@eval dO2d0d@x (dO2859@dOe4a@interaction-environment)))) (set! dO2c3a@compile-system-libraries (lambda () (dO2c38@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! dO2c3c@compile (lambda (dO2d0f@filename) (dO2c42@load-r6rs-top-level dO2d0f@filename 'compile))) (set! dO2c3e@compile->closure (lambda (dO2d11@filename) (dO2c42@load-r6rs-top-level dO2d11@filename 'closure))) (set! dO2c40@pre-compile-r6rs-file (lambda (dO2d13@filename) (dO2c42@load-r6rs-top-level dO2d13@filename 'compile))) (set! dO2c42@load-r6rs-top-level (lambda (dO2d15@filename dO2d16@how . dO2d19@args) ((lambda (dO2d1f@dO2d1c dO2d20@dO2d1e) ((lambda (dO2d23@swap) (dynamic-wind dO2d23@swap (lambda () ((lambda (dO2d25@x*) ((lambda (dO2d27@t) (if (memv dO2d27@t '(closure)) (dO2858@dOe48@pre-compile-r6rs-top-level dO2d25@x*) (if (memv dO2d27@t '(load)) ((lambda (dO2d31@dO2d2a dO2d32@dO2d2c dO2d33@dO2d2e dO2d34@dO2d30) ((lambda (dO2d39@swap) (dynamic-wind dO2d39@swap (lambda () (begin (gensym-prefix-set! (dO2c48@prefix-inc! (string-append (dO6b9@dO599@mosh-cache-dir) '"/prefix.txt"))) (if (symbol-value '%clean-acc) (for-each (lambda (dO2d3b@file) ((call/cc (lambda (dO2d3f@dO2d3d) (lambda () (with-exception-handler (lambda (dO2d41@c) ((call/cc (lambda (dO2d43@dO2d3e) (dO2d3f@dO2d3d (lambda () (if '#t '#t (dO2d43@dO2d3e (lambda () (raise-continuable dO2d41@c)))))))))) (lambda () (delete-file (string-append (dO6b9@dO599@mosh-cache-dir) '"/" dO2d3b@file))))))))) (directory-list (dO6b9@dO599@mosh-cache-dir))) (void)) ((lambda (dO2d45@compiled) (begin (if (not (symbol-value '%disable-acc)) (dO976@dO7b6@serialize-all dO6b3@dO58d@serialize-library dO70f@dO6c8@compile-core-expr) (void)) (dO2d45@compiled))) (dO2857@dOe46@compile-r6rs-top-level dO2d25@x*)))) dO2d39@swap)) (lambda () (begin ((lambda (dO2d47@t) (begin (dO2d31@dO2d2a dO2d33@dO2d2e) (set! dO2d33@dO2d2e dO2d47@t))) (dO2d31@dO2d2a)) ((lambda (dO2d49@t) (begin (dO2d32@dO2d2c dO2d34@dO2d30) (set! dO2d34@dO2d30 dO2d49@t))) (dO2d32@dO2d2c)))))) dO2c2e@command-line dO6b9@dO599@mosh-cache-dir (cons dO2d15@filename (car dO2d19@args)) (create-mosh-cache-dir)) (if (memv dO2d27@t '(compile)) (begin (dO2857@dOe46@compile-r6rs-top-level dO2d25@x*) (dO976@dO7b6@serialize-all dO6b3@dO58d@serialize-library dO70f@dO6c8@compile-core-expr)) (if '#f '#f (void)))))) dO2d16@how)) (with-input-from-file dO2d15@filename (lambda () ((letrec ((dO2d4b@f (lambda () ((lambda (dO2d4d@x) (if (eof-object? dO2d4d@x) '() (cons dO2d4d@x (dO2d4b@f)))) (dO6ab@dO57d@read-annotated))))) dO2d4b@f)))))) dO2d23@swap)) (lambda () ((lambda (dO2d4f@t) (begin (dO2d1f@dO2d1c dO2d20@dO2d1e) (set! dO2d20@dO2d1e dO2d4f@t))) (dO2d1f@dO2d1c))))) dO972@dO7ae@library-path (dO2c30@local-library-path dO2d15@filename)))) (set! dO2c44@load-r6rs-top-level-sexp (lambda (dO2d51@import-spec dO2d52@thunk) ((lambda (dO2d5d@dO2d56 dO2d5e@dO2d58 dO2d5f@dO2d5a dO2d60@dO2d5c) ((lambda (dO2d65@swap) (dynamic-wind dO2d65@swap (lambda () (begin (gensym-prefix-set! (dO2c48@prefix-inc! (string-append (dO6b9@dO599@mosh-cache-dir) '"/prefix.txt"))) ((lambda (dO2d6b@dO2d68 dO2d6c@dO2d6a) ((lambda (dO2d6f@swap) (dynamic-wind dO2d6f@swap (lambda () ((dO2857@dOe46@compile-r6rs-top-level (list (cons 'import dO2d51@import-spec) (list dO2d52@thunk))))) dO2d6f@swap)) (lambda () ((lambda (dO2d71@t) (begin (dO2d6b@dO2d68 dO2d6c@dO2d6a) (set! dO2d6c@dO2d6a dO2d71@t))) (dO2d6b@dO2d68))))) dO2c2e@command-line '()))) dO2d65@swap)) (lambda () (begin ((lambda (dO2d73@t) (begin (dO2d5d@dO2d56 dO2d5f@dO2d5a) (set! dO2d5f@dO2d5a dO2d73@t))) (dO2d5d@dO2d56)) ((lambda (dO2d75@t) (begin (dO2d5e@dO2d58 dO2d60@dO2d5c) (set! dO2d60@dO2d5c dO2d75@t))) (dO2d5e@dO2d58)))))) dO972@dO7ae@library-path dO6b9@dO599@mosh-cache-dir (dO2c30@local-library-path '"") (create-mosh-cache-dir)))) (set! dO2c46@prefix-inc (lambda (dO2d77@prefix-string) ((lambda (dO2d79@prefix) ((lambda (dO2d7b@len) ((lambda () ((letrec ((dO2d7d@loop (lambda (dO2d7f@i dO2d80@carry? dO2d81@accum) (if (< dO2d7f@i '0) (string->symbol (list->string (if dO2d80@carry? (cons '#\a dO2d81@accum) dO2d81@accum))) (if dO2d80@carry? ((lambda (dO2d85@next-integer) (if (= dO2d85@next-integer '123) (dO2d7d@loop (- dO2d7f@i '1) '#f (cons '#\A dO2d81@accum)) (if (= dO2d85@next-integer '91) (dO2d7d@loop (- dO2d7f@i '1) '#t (cons '#\a dO2d81@accum)) (dO2d7d@loop (- dO2d7f@i '1) '#f (cons (integer->char dO2d85@next-integer) dO2d81@accum))))) (+ '1 (char->integer (string-ref dO2d79@prefix dO2d7f@i)))) (dO2d7d@loop (- dO2d7f@i '1) '#f (cons (string-ref dO2d79@prefix dO2d7f@i) dO2d81@accum))))))) dO2d7d@loop) (- dO2d7b@len '1) '#t '())))) (string-length dO2d79@prefix))) (symbol->string dO2d77@prefix-string)))) (set! dO2c48@prefix-inc! (lambda (dO2d87@file) (begin (if (not (file-exists? dO2d87@file)) (call-with-output-file dO2d87@file (lambda (dO2d89@port) (write 'd dO2d89@port))) (void)) ((lambda (dO2d8b@prefix) ((lambda (dO2d8d@next-prefix) ((lambda () (begin (call-with-output-file dO2d87@file (lambda (dO2d8f@port) (write dO2d8d@next-prefix dO2d8f@port))) dO2d8b@prefix)))) (dO2c46@prefix-inc dO2d8b@prefix))) (call-with-input-file dO2d87@file read))))) (begin (set! dO2da7@dO2c48@prefix-inc! dO2c48@prefix-inc!) (set! dO2da6@dO2c46@prefix-inc dO2c46@prefix-inc) (set! dO2da5@dO2c44@load-r6rs-top-level-sexp dO2c44@load-r6rs-top-level-sexp) (set! dO2da4@dO2c42@load-r6rs-top-level dO2c42@load-r6rs-top-level) (set! dO2da3@dO2c40@pre-compile-r6rs-file dO2c40@pre-compile-r6rs-file) (set! dO2da2@dO2c3e@compile->closure dO2c3e@compile->closure) (set! dO2da1@dO2c3c@compile dO2c3c@compile) (set! dO2da0@dO2c3a@compile-system-libraries dO2c3a@compile-system-libraries) (set! dO2d9f@dO2c38@eval-top-level dO2c38@eval-top-level) (set! dO2d9e@dO2c36@ironscheme-build dO2c36@ironscheme-build) (set! dO2d9d@dO2c34@load dO2c34@load) (set! dO2d9c@dO2c32@load/args dO2c32@load/args) (set! dO2d9b@dO2c30@local-library-path dO2c30@local-library-path) (set! dO2d9a@dO2c2e@command-line dO2c2e@command-line) (set! dO2d99@dO2c2c@trace-printer dO2c2c@trace-printer) (set! dO2d98@dO2c2a@repl dO2c2a@repl) (set! dO2d97@dO2c28@map-with-index dO2c28@map-with-index) (set! dO2d96@dO2c26@record->field-alist dO2c26@record->field-alist) (set! dO2d95@dO2c24@condition-printer dO2c24@condition-printer) (set! dO2d94@dO2c22@rpad dO2c22@rpad) (set! dO2d93@dO2c20@for-each-with-index dO2c20@for-each-with-index) (set! dO2d92@dO2c1e@parse-and-add-library-path dO2c1e@parse-and-add-library-path) (set! dO2d91@dO2c1c@add-library-path! dO2c1c@add-library-path!) (dO977@dO7b8@current-precompiled-library-loader dO6b4@dO58f@load-serialized-library) (set-symbol-value! 'load dO2c34@load) (set-symbol-value! 'pre-compile-r6rs-file dO2c40@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs dO2c38@eval-top-level) (set-symbol-value! 'int-env-syms dO283a@dOe0c@interaction-environment-symbols) (set-symbol-value! 'expanded2core dO70e@dO6c6@expanded->core) (set-symbol-value! 'trace-printer dO2c2c@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (dO2c49@c) (condition (dO2b79@dO2983@make-non-continuable-violation) (dO2b6f@dO296a@make-who-condition 'raise) (dO2b33@dO28cb@make-message-condition '"returned from non-continuable exception") (dO2b65@dO294f@make-irritants-condition (list dO2c49@c))))) (dO2c1e@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (dO2c1e@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (dO2c1c@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (dO2c1c@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (dO2c1c@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) ((lambda (dO2c4b@prefix) (dO973@dO7b0@library-extensions (dO2c4b@prefix '".mosh" (dO973@dO7b0@library-extensions)))) (lambda (dO2c4d@ext dO2c4e@ls) (append (map (lambda (dO2c51@x) (string-append dO2c4d@ext dO2c51@x)) dO2c4e@ls) dO2c4e@ls))) ((lambda (dO2c53@args dO2c54@port) ((lambda (dO2c58@ref) (begin (set! dO2c58@ref (lambda (dO2c79@rtd dO2c7a@i dO2c7b@x) ((lambda (dO2c7f@val) (if (symbol? dO2c7f@val) (ungensym dO2c7f@val) dO2c7f@val)) ((record-accessor dO2c79@rtd dO2c7a@i) dO2c7b@x)))) (with-exception-handler (lambda (dO2c59@c) (if (condition? dO2c59@c) (dO2c24@condition-printer dO2c59@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" dO2c59@c))) (lambda () (if ((call/cc (lambda (dO2c5d@dO2c5b) (lambda () (with-exception-handler (lambda (dO2c5f@c) ((call/cc (lambda (dO2c61@dO2c5c) (dO2c5d@dO2c5b (lambda () (if '#t '#f (dO2c61@dO2c5c (lambda () (raise-continuable dO2c5f@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (dO2c44@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? dO2c53@args) ((lambda (dO2c6b@dO2c64 dO2c6c@dO2c66 dO2c6d@dO2c68 dO2c6e@dO2c6a) ((lambda (dO2c73@swap) (dynamic-wind dO2c73@swap (lambda () (begin (gensym-prefix-set! (dO2c48@prefix-inc! (string-append (dO6b9@dO599@mosh-cache-dir) '"/prefix.txt"))) (dO2c2a@repl))) dO2c73@swap)) (lambda () (begin ((lambda (dO2c75@t) (begin (dO2c6b@dO2c64 dO2c6d@dO2c68) (set! dO2c6d@dO2c68 dO2c75@t))) (dO2c6b@dO2c64)) ((lambda (dO2c77@t) (begin (dO2c6c@dO2c66 dO2c6e@dO2c6a) (set! dO2c6e@dO2c6a dO2c77@t))) (dO2c6c@dO2c66)))))) dO2c2e@command-line dO6b9@dO599@mosh-cache-dir '() (create-mosh-cache-dir)) (dO2c42@load-r6rs-top-level (car dO2c53@args) 'load (cdr dO2c53@args)))))))) '#f)) (dO2c2e@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
