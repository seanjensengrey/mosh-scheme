;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (B2865@library-file-path->cache-path B2867@read-annotated B2869@annotation-stripped B286b@annotation? B286d@annotation-source B286f@annotation-expression B2871@scm->fasl B2873@fasl-save B2875@fasl-load B2877@serialize-library B2879@load-serialized-library B287b@make-record-printer B287d@compile-core B287f@read-library-source-file B2881@make-parameter B2883@mosh-cache-dir B2919@file-options-spec) (begin (set! B2865@library-file-path->cache-path (lambda (B291a@x) (call-with-values (lambda () (open-string-output-port)) (lambda (B2920@B291d B2921@B291f) ((lambda (B2924@extract B2925@p) ((lambda (B2929@display-hex) (begin (set! B2929@display-hex (lambda (B2932@n) (if (<= '0 B2932@n '9) (display B2932@n B2925@p) (display (integer->char (+ (char->integer '#\a) (- B2932@n '10))) B2925@p)))) (begin ((letrec ((B292a@f (lambda (B292c@ls) (if (not (null? B292c@ls)) (begin (display '"_" B2925@p) (for-each (lambda (B292e@c) (if (or (char<=? '#\a B292e@c '#\z) (char<=? '#\A B292e@c '#\Z) (char<=? '#\0 B292e@c '#\9) (memv B292e@c '(#\- #\. #\_ #\~))) (display B292e@c B2925@p) (begin (display '"%" B2925@p) ((lambda (B2930@n) (begin (B2929@display-hex (quotient B2930@n '16)) (B2929@display-hex (remainder B2930@n '16)))) (char->integer B292e@c))))) (string->list (car B292c@ls))) (B292a@f (cdr B292c@ls))) (void))))) B292a@f) (string-split B291a@x '#\/)) (B2924@extract)))) '#f)) B2921@B291f B2920@B291d))))) (set! B2867@read-annotated read) (set! B2869@annotation-stripped (lambda (B2934@x) (B286f@annotation-expression B2934@x))) (set! B286b@annotation? (lambda (B2936@x) (source-info B2936@x))) (set! B286d@annotation-source (lambda (B2938@x) (source-info B2938@x))) (set! B286f@annotation-expression (lambda (B293a@x) (if (pair? B293a@x) (cons (car B293a@x) (cdr B293a@x)) (display '"line:46\n")))) (set! B2871@scm->fasl (lambda (B293c@filename) (string-append (B2883@mosh-cache-dir) '"/" (B2865@library-file-path->cache-path B293c@filename) '".mosh-fasl"))) (set! B2873@fasl-save (lambda (B293e@filename B293f@obj) (call-with-port (open-file-output-port B293e@filename) (lambda (B2942@port) ((symbol-value 'fasl-write!) B293f@obj B2942@port))))) (set! B2875@fasl-load (lambda (B2944@filename) (call-with-port (open-file-input-port B2944@filename) (symbol-value 'fasl-read!)))) (set! B2877@serialize-library (lambda (B2946@filename B2947@obj) (begin ((lambda (B294a@expanded2core) ((lambda (B294c@compile) ((lambda (B294e@code) ((lambda (B2950@pivot) ((lambda (B2952@visit) ((lambda () (begin (set-car! B2950@pivot B2952@visit) ((lambda (B2954@pivot) ((lambda (B2956@invoke) ((lambda () (set-car! B2954@pivot B2956@invoke)))) (B294c@compile (B294a@expanded2core (car B2954@pivot))))) (cdr B2950@pivot)))))) (B294c@compile (B294a@expanded2core (car B2950@pivot))))) (cddddr (cddddr B294e@code)))) B2947@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (B2958@fasl-file) (begin (if (file-exists? B2958@fasl-file) (delete-file B2958@fasl-file) (void)) ((call/cc (lambda (B295c@B295a) (lambda () (with-exception-handler (lambda (B295e@c) ((call/cc (lambda (B2960@B295b) (B295c@B295a (lambda () (if '#t (begin (format (current-error-port) '"Warning:serialize-library failed " B2946@filename) (if (file-exists? B2958@fasl-file) (delete-file B2958@fasl-file) (void)) '#f) (B2960@B295b (lambda () (raise-continuable B295e@c)))))))))) (lambda () (B2873@fasl-save B2958@fasl-file B2947@obj))))))))) (B2871@scm->fasl B2946@filename))))) (set! B2879@load-serialized-library (lambda (B2962@filename B2963@obj) ((lambda (B2966@fasl-file) (if (and (file-exists? B2966@fasl-file) ((symbol-value 'file-newer?) B2966@fasl-file B2962@filename)) ((lambda (B2968@expanded2core) ((lambda (B296a@eval-compiled-core) ((lambda (B296c@code) ((lambda (B296e@pivot) ((lambda (B2970@visit) ((lambda (B2972@visit-proc) ((lambda () (begin (set-car! B296e@pivot B2972@visit-proc) ((lambda (B2974@pivot) ((lambda (B2976@invoke) ((lambda () (begin (set-car! B2974@pivot (lambda () (B296a@eval-compiled-core B2976@invoke))) (apply B2963@obj B296c@code))))) (car B2974@pivot))) (cdr B296e@pivot)))))) (lambda () (B296a@eval-compiled-core B2970@visit)))) (car B296e@pivot))) (cddddr (cddddr B296c@code)))) (B2875@fasl-load B2966@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (B2871@scm->fasl B2962@filename)))) (set! B287b@make-record-printer (lambda (B2978@name B2979@printer) (lambda B297c@x (begin (display '"record printer") (for-each display B297c@x))))) (set! B287d@compile-core (lambda B297e@x (apply error 'comile-core '"not implementated" B297e@x))) (set! B287f@read-library-source-file (lambda (B2980@file-name) (with-input-from-file B2980@file-name B2867@read-annotated))) (set! B2881@make-parameter (lambda B2990 ((lambda (B2991) (if (= B2991 '1) (apply (lambda (B2982@x) (B2881@make-parameter B2982@x (lambda (B2984@x) B2984@x))) B2990) (if (= B2991 '2) (apply (lambda (B2986@x B2987@fender) ((lambda (B298a@x) (lambda B298e ((lambda (B298f) (if (= B298f '0) (apply (lambda () B298a@x) B298e) (if (= B298f '1) (apply (lambda (B298c@v) (set! B298a@x (B2987@fender B298c@v))) B298e) (error 'apply '"invalid arg count")))) (length B298e)))) (B2987@fender B2986@x))) B2990) (error 'apply '"invalid arg count")))) (length B2990)))) (set! B2883@mosh-cache-dir (B2881@make-parameter '#f)) (set! B2919@file-options-spec (lambda (B2992@x) B2992@x)) (begin (set! B29a4@B2919@file-options-spec B2919@file-options-spec) (set! B29a3@B2883@mosh-cache-dir B2883@mosh-cache-dir) (set! B29a2@B2881@make-parameter B2881@make-parameter) (set! B29a1@B287f@read-library-source-file B287f@read-library-source-file) (set! B29a0@B287d@compile-core B287d@compile-core) (set! B299f@B287b@make-record-printer B287b@make-record-printer) (set! B299e@B2879@load-serialized-library B2879@load-serialized-library) (set! B299d@B2877@serialize-library B2877@serialize-library) (set! B299c@B2875@fasl-load B2875@fasl-load) (set! B299b@B2873@fasl-save B2873@fasl-save) (set! B299a@B2871@scm->fasl B2871@scm->fasl) (set! B2999@B286f@annotation-expression B286f@annotation-expression) (set! B2998@B286d@annotation-source B286d@annotation-source) (set! B2997@B286b@annotation? B286b@annotation?) (set! B2996@B2869@annotation-stripped B2869@annotation-stripped) (set! B2995@B2867@read-annotated B2867@read-annotated) (set! B2994@B2865@library-file-path->cache-path B2865@library-file-path->cache-path)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (B29aa@current-primitive-locations B29ac@mutable? B29ae@rewriter B29b0@expanded->core B29b2@compile-core-expr B29b4@pretty-print B29b6@compile-core-expr-to-port) (begin (set! B29aa@current-primitive-locations (B29a2@B2881@make-parameter (lambda (B29b7@x) '#f) (lambda (B29b9@p) B29b9@p))) (set! B29ac@mutable? (lambda (B29bb@x) (or (pair? B29bb@x) (vector? B29bb@x) (hashtable? B29bb@x)))) (set! B29ae@rewriter (lambda (B29bd@quote-hack?) ((lambda (B29c0@f) (begin (set! B29c0@f (lambda (B29c1@x) (if (pair? B29c1@x) ((lambda (B29c3@t) (if (memv B29c3@t '(quote)) (if (and B29bd@quote-hack? (B29ac@mutable? (cadr B29c1@x))) ((lambda (B29c5@g) (begin (set-symbol-value! B29c5@g (cadr B29c1@x)) B29c5@g)) (gensym)) B29c1@x) (if (memv B29c3@t '(case-lambda)) (cons 'case-lambda (map (lambda (B29c7@x) (cons (car B29c7@x) (map B29c0@f (cdr B29c7@x)))) (cdr B29c1@x))) (if (memv B29c3@t '(lambda)) (cons* 'lambda (cadr B29c1@x) (map B29c0@f (cddr B29c1@x))) (if (memv B29c3@t '(letrec)) ((lambda (B29c9@bindings B29ca@body*) ((lambda (B29cd@lhs* B29ce@rhs*) (cons* 'letrec (map list B29cd@lhs* (map B29c0@f B29ce@rhs*)) (map B29c0@f B29ca@body*))) (map car B29c9@bindings) (map cadr B29c9@bindings))) (cadr B29c1@x) (cddr B29c1@x)) (if (memv B29c3@t '(letrec*)) ((lambda (B29d1@bindings B29d2@body*) ((lambda (B29d5@lhs* B29d6@rhs*) (cons* 'letrec* (map list B29d5@lhs* (map B29c0@f B29d6@rhs*)) (map B29c0@f B29d2@body*))) (map car B29d1@bindings) (map cadr B29d1@bindings))) (cadr B29c1@x) (cddr B29c1@x)) (if (memv B29c3@t '(library-letrec*)) ((lambda (B29d9@name B29da@x) ((lambda (B29dd@bindings B29de@body*) ((lambda (B29e1@lhs* B29e2@lhs** B29e3@rhs*) (cons* 'library-letrec* B29d9@name (map list B29e1@lhs* B29e2@lhs** (map B29c0@f B29e3@rhs*)) (map B29c0@f B29de@body*))) (map car B29dd@bindings) (map cadr B29dd@bindings) (map caddr B29dd@bindings))) (cadr B29da@x) (cddr B29da@x))) (cadr B29c1@x) (cdr B29c1@x)) (if (memv B29c3@t '(begin)) (cons 'begin (map B29c0@f (cdr B29c1@x))) (if (memv B29c3@t '(set!)) (list 'set! (cadr B29c1@x) (B29c0@f (caddr B29c1@x))) (if (memv B29c3@t '(primitive)) ((lambda (B29e7@op) ((lambda (B29e9@t) (if B29e9@t ((lambda (B29eb@loc) B29eb@loc) B29e9@t) B29e7@op)) ((B29aa@current-primitive-locations) B29e7@op))) (cadr B29c1@x)) (if (memv B29c3@t '(define)) B29c1@x (if (list? B29c1@x) (map B29c0@f B29c1@x) (error 'rewrite '"invalid form ~s ~s" B29c1@x (list? B29c1@x)))))))))))))) (car B29c1@x)) B29c1@x))) B29c0@f)) '#f))) (set! B29b0@expanded->core (lambda (B29ed@x) ((B29ae@rewriter '#f) B29ed@x))) (set! B29b2@compile-core-expr (lambda (B29ef@x) ((B29ae@rewriter '#f) B29ef@x))) (set! B29b4@pretty-print write) (set! B29b6@compile-core-expr-to-port (lambda (B29f1@x B29f2@p) (B29b4@pretty-print ((B29ae@rewriter '#f) B29f1@x) B29f2@p))) (begin (set! B29fb@B29b6@compile-core-expr-to-port B29b6@compile-core-expr-to-port) (set! B29fa@B29b4@pretty-print B29b4@pretty-print) (set! B29f9@B29b2@compile-core-expr B29b2@compile-core-expr) (set! B29f8@B29b0@expanded->core B29b0@expanded->core) (set! B29f7@B29ae@rewriter B29ae@rewriter) (set! B29f6@B29ac@mutable? B29ac@mutable?) (set! B29f5@B29aa@current-primitive-locations B29aa@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (B2a4a@make-collection B2a4c@current-library-collection B2a4e@rp B2a58@library? B2a5a@library-id B2a5c@set-library-id! B2a5e@library-name B2a60@set-library-name! B2a62@library-version B2a64@set-library-version! B2a66@library-imp* B2a68@set-library-imp*! B2a6a@library-vis* B2a6c@set-library-vis*! B2a6e@library-inv* B2a70@set-library-inv*! B2a72@library-subst B2a74@set-library-subst! B2a76@library-env B2a78@set-library-env! B2a7a@library-visit-state B2a7c@set-library-visit-state! B2a7e@library-invoke-state B2a80@set-library-invoke-state! B2a82@library-visit-code B2a84@set-library-visit-code! B2a86@library-invoke-code B2a88@set-library-invoke-code! B2a8a@library-visible? B2a8c@set-library-visible?! B2a8e@library-source-file-name B2a90@set-library-source-file-name! B2a92@dummy B2a94@find-dependencies B2a96@find-library-by B2a98@library-path B2a9a@library-extensions B2a9c@library-name->file-name B2a9e@file-locator B2aa0@serialize-all B2aa2@current-precompiled-library-loader B2aa4@try-load-from-file B2aa6@library-loader B2aa8@current-library-expander B2aaa@external-pending-libraries B2aac@find-external-library B2aae@find-library-by-name B2ab0@library-exists? B2ab2@find-library-by-spec/die B2ab4@label->binding-table B2ab6@install-library-record B2ab8@install-library B2aba@imported-label->binding B2abc@invoke-library B2abe@visit-library B2ac0@invoke-library-by-spec B2ac2@installed-libraries B2ac4@library-spec) (begin (set! B2a4a@make-collection (lambda () ((lambda (B2ac5@set) ((lambda (B2ac8@set-cons) (begin (set! B2ac8@set-cons (lambda (B2acd@x B2ace@ls) (if (memq B2acd@x B2ace@ls) B2ace@ls (cons B2acd@x B2ace@ls)))) (lambda B2acb ((lambda (B2acc) (if (= B2acc '0) (apply (lambda () B2ac5@set) B2acb) (if (= B2acc '1) (apply (lambda (B2ac9@x) (set! B2ac5@set (B2ac8@set-cons B2ac9@x B2ac5@set))) B2acb) (error 'apply '"invalid arg count")))) (length B2acb))))) '#f)) '()))) (set! B2a4c@current-library-collection (B29a2@B2881@make-parameter (B2a4a@make-collection) (lambda (B2ad1@x) (begin (if (not (procedure? B2ad1@x)) (assertion-violation 'current-library-collection '"not a procedure" B2ad1@x) (void)) B2ad1@x)))) (set! B2a4e@rp (B299f@B287b@make-record-printer 'library (lambda (B2ad3@x B2ad4@p B2ad5@wr) (begin (if (not (B2a58@library? B2ad3@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (B2a62@library-version B2ad3@x)) (B2a5e@library-name B2ad3@x) (append (B2a5e@library-name B2ad3@x) (list (B2a62@library-version B2ad3@x))))) B2ad4@p))))) (set! B2a58@library? (lambda (B2ad9@x) (and (simple-struct? B2ad9@x) (eq? (simple-struct-name B2ad9@x) 'library)))) (set! B2a5a@library-id (lambda (B2adb@x) (simple-struct-ref B2adb@x '0))) (set! B2a5c@set-library-id! (lambda (B2add@x B2ade@val) (simple-struct-set! B2add@x '0 B2ade@val))) (set! B2a5e@library-name (lambda (B2ae1@x) (simple-struct-ref B2ae1@x '1))) (set! B2a60@set-library-name! (lambda (B2ae3@x B2ae4@val) (simple-struct-set! B2ae3@x '1 B2ae4@val))) (set! B2a62@library-version (lambda (B2ae7@x) (simple-struct-ref B2ae7@x '2))) (set! B2a64@set-library-version! (lambda (B2ae9@x B2aea@val) (simple-struct-set! B2ae9@x '2 B2aea@val))) (set! B2a66@library-imp* (lambda (B2aed@x) (simple-struct-ref B2aed@x '3))) (set! B2a68@set-library-imp*! (lambda (B2aef@x B2af0@val) (simple-struct-set! B2aef@x '3 B2af0@val))) (set! B2a6a@library-vis* (lambda (B2af3@x) (simple-struct-ref B2af3@x '4))) (set! B2a6c@set-library-vis*! (lambda (B2af5@x B2af6@val) (simple-struct-set! B2af5@x '4 B2af6@val))) (set! B2a6e@library-inv* (lambda (B2af9@x) (simple-struct-ref B2af9@x '5))) (set! B2a70@set-library-inv*! (lambda (B2afb@x B2afc@val) (simple-struct-set! B2afb@x '5 B2afc@val))) (set! B2a72@library-subst (lambda (B2aff@x) (simple-struct-ref B2aff@x '6))) (set! B2a74@set-library-subst! (lambda (B2b01@x B2b02@val) (simple-struct-set! B2b01@x '6 B2b02@val))) (set! B2a76@library-env (lambda (B2b05@x) (simple-struct-ref B2b05@x '7))) (set! B2a78@set-library-env! (lambda (B2b07@x B2b08@val) (simple-struct-set! B2b07@x '7 B2b08@val))) (set! B2a7a@library-visit-state (lambda (B2b0b@x) (simple-struct-ref B2b0b@x '8))) (set! B2a7c@set-library-visit-state! (lambda (B2b0d@x B2b0e@val) (simple-struct-set! B2b0d@x '8 B2b0e@val))) (set! B2a7e@library-invoke-state (lambda (B2b11@x) (simple-struct-ref B2b11@x '9))) (set! B2a80@set-library-invoke-state! (lambda (B2b13@x B2b14@val) (simple-struct-set! B2b13@x '9 B2b14@val))) (set! B2a82@library-visit-code (lambda (B2b17@x) (simple-struct-ref B2b17@x '10))) (set! B2a84@set-library-visit-code! (lambda (B2b19@x B2b1a@val) (simple-struct-set! B2b19@x '10 B2b1a@val))) (set! B2a86@library-invoke-code (lambda (B2b1d@x) (simple-struct-ref B2b1d@x '11))) (set! B2a88@set-library-invoke-code! (lambda (B2b1f@x B2b20@val) (simple-struct-set! B2b1f@x '11 B2b20@val))) (set! B2a8a@library-visible? (lambda (B2b23@x) (simple-struct-ref B2b23@x '12))) (set! B2a8c@set-library-visible?! (lambda (B2b25@x B2b26@val) (simple-struct-set! B2b25@x '12 B2b26@val))) (set! B2a8e@library-source-file-name (lambda (B2b29@x) (simple-struct-ref B2b29@x '13))) (set! B2a90@set-library-source-file-name! (lambda (B2b2b@x B2b2c@val) (simple-struct-set! B2b2b@x '13 B2b2c@val))) (set! B2a92@dummy '3) (set! B2a94@find-dependencies (lambda (B2b2f@ls) (if (null? B2b2f@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! B2a96@find-library-by (lambda (B2b31@pred) ((letrec ((B2b33@f (lambda (B2b35@ls) (if (null? B2b35@ls) '#f (if (B2b31@pred (car B2b35@ls)) (car B2b35@ls) (B2b33@f (cdr B2b35@ls))))))) B2b33@f) ((B2a4c@current-library-collection))))) (set! B2a98@library-path (B29a2@B2881@make-parameter '(".") (lambda (B2b37@x) (if (and (list? B2b37@x) (for-all string? B2b37@x)) (map (lambda (B2b39@x) B2b39@x) B2b37@x) (assertion-violation 'library-path '"not a list of strings" B2b37@x))))) (set! B2a9a@library-extensions (B29a2@B2881@make-parameter '(".sls" ".ss" ".scm") (lambda (B2b3b@x) (if (and (list? B2b3b@x) (for-all string? B2b3b@x)) (map (lambda (B2b3d@x) B2b3d@x) B2b3b@x) (assertion-violation 'library-extensions '"not a list of strings" B2b3b@x))))) (set! B2a9c@library-name->file-name (lambda (B2b3f@x) (call-with-values (lambda () (open-string-output-port)) (lambda (B2b45@B2b42 B2b46@B2b44) ((lambda (B2b49@extract B2b4a@p) ((lambda (B2b4e@display-hex) (begin (set! B2b4e@display-hex (lambda (B2b57@n) (if (<= '0 B2b57@n '9) (display B2b57@n B2b4a@p) (display (integer->char (+ (char->integer '#\a) (- B2b57@n '10))) B2b4a@p)))) (begin ((letrec ((B2b4f@f (lambda (B2b51@ls) (if (not (null? B2b51@ls)) (begin (display '"/" B2b4a@p) (for-each (lambda (B2b53@c) (if (or (char<=? '#\a B2b53@c '#\z) (char<=? '#\A B2b53@c '#\Z) (char<=? '#\0 B2b53@c '#\9) (memv B2b53@c '(#\- #\. #\_ #\~))) (display B2b53@c B2b4a@p) (begin (display '"%" B2b4a@p) ((lambda (B2b55@n) (begin (B2b4e@display-hex (quotient B2b55@n '16)) (B2b4e@display-hex (remainder B2b55@n '16)))) (char->integer B2b53@c))))) (string->list (symbol->string (car B2b51@ls)))) (B2b4f@f (cdr B2b51@ls))) (void))))) B2b4f@f) B2b3f@x) (B2b49@extract)))) '#f)) B2b46@B2b44 B2b45@B2b42))))) (set! B2a9e@file-locator (B29a2@B2881@make-parameter (lambda (B2b59@x) ((lambda (B2b5b@str) ((letrec ((B2b5d@f (lambda (B2b5f@ls B2b60@exts B2b61@failed-list) (if (null? B2b5f@ls) ((lambda () ((lambda (B2b6d@B2b68 B2b6f@B2b6a B2b71@B2b69 B2b74@B2b67 B2b76@make-library-resolution-condition B2b78@B2b65 B2b7a@B2b66 B2b7c@library-resolution-condition? B2b7e@condition-library B2b80@condition-files) (begin (set! B2b6d@B2b68 (make-record-type-descriptor '&library-resolution B4e17@B4b5e@&condition-rtd 'B2b6b '#f '#f '#((immutable library) (immutable files)))) (set! B2b6f@B2b6a '#f) (set! B2b71@B2b69 (make-record-constructor-descriptor B2b6d@B2b68 B4e18@B4b60@&condition-rcd B2b6f@B2b6a)) (set! B2b74@B2b67 (record-predicate B2b6d@B2b68)) (set! B2b76@make-library-resolution-condition (record-constructor B2b71@B2b69)) (set! B2b78@B2b65 (record-accessor B2b6d@B2b68 '0)) (set! B2b7a@B2b66 (record-accessor B2b6d@B2b68 '1)) (set! B2b7c@library-resolution-condition? (condition-predicate B2b6d@B2b68)) (set! B2b7e@condition-library (condition-accessor B2b6d@B2b68 B2b78@B2b65)) (set! B2b80@condition-files (condition-accessor B2b6d@B2b68 B2b7a@B2b66)) (raise (condition (B4e37@B4bf8@make-error) (B4e59@B4c54@make-who-condition 'expander) (B4e1d@B4bb5@make-message-condition '"cannot locate library in library-path") (B2b76@make-library-resolution-condition B2b59@x (reverse B2b61@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? B2b60@exts) (B2b5d@f (cdr B2b5f@ls) (B2a9a@library-extensions) B2b61@failed-list) ((lambda (B2b81@name) (if (file-exists? B2b81@name) B2b81@name (B2b5d@f B2b5f@ls (cdr B2b60@exts) (cons B2b81@name B2b61@failed-list)))) (string-append (car B2b5f@ls) B2b5b@str (car B2b60@exts)))))))) B2b5d@f) (B2a98@library-path) (B2a9a@library-extensions) '())) (B2a9c@library-name->file-name B2b59@x))) (lambda (B2b83@f) (if (procedure? B2b83@f) B2b83@f (assertion-violation 'file-locator '"not a procedure" B2b83@f))))) (set! B2aa0@serialize-all (lambda (B2b85@serialize B2b86@compile) ((lambda (B2b8a@library-desc) (begin (set! B2b8a@library-desc (lambda (B2b8d@x) (list (B2a5a@library-id B2b8d@x) (B2a5e@library-name B2b8d@x)))) (for-each (lambda (B2b8b@x) (if (B2a8e@library-source-file-name B2b8b@x) (B2b85@serialize (B2a8e@library-source-file-name B2b8b@x) (list (B2a5a@library-id B2b8b@x) (B2a5e@library-name B2b8b@x) (B2a62@library-version B2b8b@x) (map B2b8a@library-desc (B2a66@library-imp* B2b8b@x)) (map B2b8a@library-desc (B2a6a@library-vis* B2b8b@x)) (map B2b8a@library-desc (B2a6e@library-inv* B2b8b@x)) (B2a72@library-subst B2b8b@x) (B2a76@library-env B2b8b@x) (B2b86@compile (B2a82@library-visit-code B2b8b@x)) (B2b86@compile (B2a86@library-invoke-code B2b8b@x)) (B2a8a@library-visible? B2b8b@x))) (void))) ((B2a4c@current-library-collection))))) '#f))) (set! B2aa2@current-precompiled-library-loader (B29a2@B2881@make-parameter (lambda (B2b8f@filename B2b90@sk) '#f))) (set! B2aa4@try-load-from-file (lambda (B2b93@filename) ((B2aa2@current-precompiled-library-loader) B2b93@filename (lambda B2bb9 ((lambda (B2bba) (if (= B2bba '11) (apply (lambda (B2b95@id B2b96@name B2b97@ver B2b98@imp* B2b99@vis* B2b9a@inv* B2b9b@exp-subst B2b9c@exp-env B2b9d@visit-proc B2b9e@invoke-proc B2b9f@visible?) ((letrec ((B2bab@f (lambda (B2bad@deps) (if (null? B2bad@deps) (begin (B2ab8@install-library B2b95@id B2b96@name B2b97@ver B2b98@imp* B2b99@vis* B2b9a@inv* B2b9b@exp-subst B2b9c@exp-env B2b9d@visit-proc B2b9e@invoke-proc '#f '#f B2b9f@visible? '#f) '#t) ((lambda (B2baf@d) ((lambda (B2bb1@label B2bb2@dname) ((lambda (B2bb5@l) (if (and (B2a58@library? B2bb5@l) (eq? B2bb1@label (B2a5a@library-id B2bb5@l))) (B2bab@f (cdr B2bad@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" B2b96@name B2bb2@dname B2b93@filename B2bb5@l B2bb1@label (B2a5a@library-id B2bb5@l)) '#f))) (B2aae@find-library-by-name B2bb2@dname))) (car B2baf@d) (cadr B2baf@d))) (car B2bad@deps)))))) B2bab@f) (append B2b98@imp* B2b99@vis* B2b9a@inv*))) B2bb9) (if (>= B2bba '0) (apply (lambda B2bb7@others '#f) B2bb9) (error 'apply '"invalid arg count")))) (length B2bb9)))))) (set! B2aa6@library-loader (B29a2@B2881@make-parameter (lambda (B2bbb@x) ((lambda (B2bbd@file-name) (if (not B2bbd@file-name) (assertion-violation '#f '"cannot file library" B2bbb@x) (or (B2aa4@try-load-from-file B2bbd@file-name) ((B2aa8@current-library-expander) (B29a1@B287f@read-library-source-file B2bbd@file-name) B2bbd@file-name (lambda (B2bbf@name) (if (not (fast-equal? B2bbf@name B2bbb@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (B2bc5@B2bc2 B2bc6@B2bc4) ((lambda (B2bc9@e B2bca@p) (begin (display '"expected to find library " B2bca@p) (write B2bbb@x B2bca@p) (display '" in file " B2bca@p) (display B2bbd@file-name B2bca@p) (display '", found " B2bca@p) (write B2bbf@name B2bca@p) (display '" instead" B2bca@p) (B2bc9@e))) B2bc6@B2bc4 B2bc5@B2bc2)))) (void))))))) ((B2a9e@file-locator) B2bbb@x))) (lambda (B2bcd@f) (if (procedure? B2bcd@f) B2bcd@f (assertion-violation 'library-locator '"not a procedure" B2bcd@f))))) (set! B2aa8@current-library-expander (B29a2@B2881@make-parameter (lambda (B2bcf@x) (assertion-violation 'library-expander '"not initialized")) (lambda (B2bd1@f) (if (procedure? B2bd1@f) B2bd1@f (assertion-violation 'library-expander '"not a procedure" B2bd1@f))))) (set! B2aaa@external-pending-libraries (B29a2@B2881@make-parameter '())) (set! B2aac@find-external-library (lambda (B2bd3@name) (begin (if (member B2bd3@name (B2aaa@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" B2bd3@name) (void)) ((lambda (B2bd9@B2bd6 B2bda@B2bd8) ((lambda (B2bdd@swap) (dynamic-wind B2bdd@swap (lambda () (begin ((B2aa6@library-loader) B2bd3@name) (or (B2a96@find-library-by (lambda (B2bdf@x) (fast-equal? (B2a5e@library-name B2bdf@x) B2bd3@name))) (assertion-violation '#f '"handling external library did not yield the correct library" B2bd3@name)))) B2bdd@swap)) (lambda () ((lambda (B2be1@t) (begin (B2bd9@B2bd6 B2bda@B2bd8) (set! B2bda@B2bd8 B2be1@t))) (B2bd9@B2bd6))))) B2aaa@external-pending-libraries (cons B2bd3@name (B2aaa@external-pending-libraries)))))) (set! B2aae@find-library-by-name (lambda (B2be3@name) (or (B2a96@find-library-by (lambda (B2be5@x) (fast-equal? (B2a5e@library-name B2be5@x) B2be3@name))) (B2aac@find-external-library B2be3@name)))) (set! B2ab0@library-exists? (lambda (B2be7@name) (and (B2a96@find-library-by (lambda (B2be9@x) (fast-equal? (B2a5e@library-name B2be9@x) B2be7@name))) '#t))) (set! B2ab2@find-library-by-spec/die (lambda (B2beb@spec) ((lambda (B2bed@id) (or (B2a96@find-library-by (lambda (B2bef@x) (eq? B2bed@id (B2a5a@library-id B2bef@x)))) (assertion-violation '#f '"cannot find library with required spec" B2beb@spec))) (car B2beb@spec)))) (set! B2ab4@label->binding-table (make-eq-hashtable)) (set! B2ab6@install-library-record (lambda (B2bf1@lib) (begin ((lambda (B2bf3@exp-env) (for-each (lambda (B2bf5@x) ((lambda (B2bf7@label B2bf8@binding) ((lambda (B2bfb@binding) (begin (if (hashtable-ref B2ab4@label->binding-table B2bf7@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" B2bf7@label (hashtable-ref B2ab4@label->binding-table B2bf7@label '#f) B2bfb@binding) (exit)) (void)) (hashtable-set! B2ab4@label->binding-table B2bf7@label B2bfb@binding))) ((lambda (B2bfd@t) (if (memv B2bfd@t '(global)) (cons 'global (cons B2bf1@lib (cdr B2bf8@binding))) (if (memv B2bfd@t '(global-macro)) (cons 'global-macro (cons B2bf1@lib (cdr B2bf8@binding))) (if (memv B2bfd@t '(global-macro!)) (cons 'global-macro! (cons B2bf1@lib (cdr B2bf8@binding))) B2bf8@binding)))) (car B2bf8@binding)))) (car B2bf5@x) (cdr B2bf5@x))) B2bf3@exp-env)) (B2a76@library-env B2bf1@lib)) ((B2a4c@current-library-collection) B2bf1@lib)))) (set! B2ab8@install-library (lambda (B2bff@id B2c00@name B2c01@ver B2c02@imp* B2c03@vis* B2c04@inv* B2c05@exp-subst B2c06@exp-env B2c07@visit-proc B2c08@invoke-proc B2c09@visit-code B2c0a@invoke-code B2c0b@visible? B2c0c@source-file-name) ((lambda (B2c1b@imp-lib* B2c1c@vis-lib* B2c1d@inv-lib*) (begin (if (not (and (symbol? B2bff@id) (list? B2c00@name) (list? B2c01@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" B2bff@id B2c00@name B2c01@ver) (void)) (if (B2ab0@library-exists? B2c00@name) (assertion-violation 'install-library '"library is already installed" B2c00@name) (void)) ((lambda (B2c21@lib) (B2ab6@install-library-record B2c21@lib)) (make-simple-struct 'library '15 (list B2bff@id B2c00@name B2c01@ver B2c1b@imp-lib* B2c1c@vis-lib* B2c1d@inv-lib* B2c05@exp-subst B2c06@exp-env B2c07@visit-proc B2c08@invoke-proc B2c09@visit-code B2c0a@invoke-code B2c0b@visible? B2c0c@source-file-name))))) (map B2ab2@find-library-by-spec/die B2c02@imp*) (map B2ab2@find-library-by-spec/die B2c03@vis*) (map B2ab2@find-library-by-spec/die B2c04@inv*)))) (set! B2aba@imported-label->binding (lambda (B2c23@lab) (hashtable-ref B2ab4@label->binding-table B2c23@lab '#f))) (set! B2abc@invoke-library (lambda (B2c25@lib) ((lambda (B2c27@invoke) (if (procedure? B2c27@invoke) (begin (B2a80@set-library-invoke-state! B2c25@lib (lambda () (assertion-violation 'invoke '"circularity detected" B2c25@lib))) (for-each B2abc@invoke-library (B2a6e@library-inv* B2c25@lib)) (B2a80@set-library-invoke-state! B2c25@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" B2c25@lib))) (B2c27@invoke) (B2a80@set-library-invoke-state! B2c25@lib '#t)) (void))) (B2a7e@library-invoke-state B2c25@lib)))) (set! B2abe@visit-library (lambda (B2c29@lib) ((lambda (B2c2b@visit) (if (procedure? B2c2b@visit) (begin (B2a7c@set-library-visit-state! B2c29@lib (lambda () (assertion-violation 'visit '"circularity detected" B2c29@lib))) (for-each B2abc@invoke-library (B2a6a@library-vis* B2c29@lib)) (B2a7c@set-library-visit-state! B2c29@lib (lambda () (assertion-violation 'invoke '"first visit did not return" B2c29@lib))) (B2c2b@visit) (B2a7c@set-library-visit-state! B2c29@lib '#t)) (void))) (B2a7a@library-visit-state B2c29@lib)))) (set! B2ac0@invoke-library-by-spec (lambda (B2c2d@spec) (B2abc@invoke-library (B2ab2@find-library-by-spec/die B2c2d@spec)))) (set! B2ac2@installed-libraries (lambda B2c35 ((lambda (B2c36) (if (= B2c36 '1) (apply (lambda (B2c2f@all?) ((letrec ((B2c31@f (lambda (B2c33@ls) (if (null? B2c33@ls) '() (if (or B2c2f@all? (B2a8a@library-visible? (car B2c33@ls))) (cons (car B2c33@ls) (B2c31@f (cdr B2c33@ls))) (B2c31@f (cdr B2c33@ls))))))) B2c31@f) ((B2a4c@current-library-collection)))) B2c35) (if (= B2c36 '0) (apply (lambda () (B2ac2@installed-libraries '#f)) B2c35) (error 'apply '"invalid arg count")))) (length B2c35)))) (set! B2ac4@library-spec (lambda (B2c37@x) (begin (if (not (B2a58@library? B2c37@x)) (assertion-violation 'library-spec '"not a library" B2c37@x) (void)) (list (B2a5a@library-id B2c37@x) (B2a5e@library-name B2c37@x) (B2a62@library-version B2c37@x))))) (begin (set! B2c72@B2ac4@library-spec B2ac4@library-spec) (set! B2c71@B2ac2@installed-libraries B2ac2@installed-libraries) (set! B2c70@B2ac0@invoke-library-by-spec B2ac0@invoke-library-by-spec) (set! B2c6f@B2abe@visit-library B2abe@visit-library) (set! B2c6e@B2abc@invoke-library B2abc@invoke-library) (set! B2c6d@B2aba@imported-label->binding B2aba@imported-label->binding) (set! B2c6c@B2ab8@install-library B2ab8@install-library) (set! B2c6b@B2ab6@install-library-record B2ab6@install-library-record) (set! B2c6a@B2ab4@label->binding-table B2ab4@label->binding-table) (set! B2c69@B2ab2@find-library-by-spec/die B2ab2@find-library-by-spec/die) (set! B2c68@B2ab0@library-exists? B2ab0@library-exists?) (set! B2c67@B2aae@find-library-by-name B2aae@find-library-by-name) (set! B2c66@B2aac@find-external-library B2aac@find-external-library) (set! B2c65@B2aaa@external-pending-libraries B2aaa@external-pending-libraries) (set! B2c64@B2aa8@current-library-expander B2aa8@current-library-expander) (set! B2c63@B2aa6@library-loader B2aa6@library-loader) (set! B2c62@B2aa4@try-load-from-file B2aa4@try-load-from-file) (set! B2c61@B2aa2@current-precompiled-library-loader B2aa2@current-precompiled-library-loader) (set! B2c60@B2aa0@serialize-all B2aa0@serialize-all) (set! B2c5f@B2a9e@file-locator B2a9e@file-locator) (set! B2c5e@B2a9c@library-name->file-name B2a9c@library-name->file-name) (set! B2c5d@B2a9a@library-extensions B2a9a@library-extensions) (set! B2c5c@B2a98@library-path B2a98@library-path) (set! B2c5b@B2a96@find-library-by B2a96@find-library-by) (set! B2c5a@B2a94@find-dependencies B2a94@find-dependencies) (set! B2c59@B2a92@dummy B2a92@dummy) (set! B2c58@B2a90@set-library-source-file-name! B2a90@set-library-source-file-name!) (set! B2c57@B2a8e@library-source-file-name B2a8e@library-source-file-name) (set! B2c56@B2a8c@set-library-visible?! B2a8c@set-library-visible?!) (set! B2c55@B2a8a@library-visible? B2a8a@library-visible?) (set! B2c54@B2a88@set-library-invoke-code! B2a88@set-library-invoke-code!) (set! B2c53@B2a86@library-invoke-code B2a86@library-invoke-code) (set! B2c52@B2a84@set-library-visit-code! B2a84@set-library-visit-code!) (set! B2c51@B2a82@library-visit-code B2a82@library-visit-code) (set! B2c50@B2a80@set-library-invoke-state! B2a80@set-library-invoke-state!) (set! B2c4f@B2a7e@library-invoke-state B2a7e@library-invoke-state) (set! B2c4e@B2a7c@set-library-visit-state! B2a7c@set-library-visit-state!) (set! B2c4d@B2a7a@library-visit-state B2a7a@library-visit-state) (set! B2c4c@B2a78@set-library-env! B2a78@set-library-env!) (set! B2c4b@B2a76@library-env B2a76@library-env) (set! B2c4a@B2a74@set-library-subst! B2a74@set-library-subst!) (set! B2c49@B2a72@library-subst B2a72@library-subst) (set! B2c48@B2a70@set-library-inv*! B2a70@set-library-inv*!) (set! B2c47@B2a6e@library-inv* B2a6e@library-inv*) (set! B2c46@B2a6c@set-library-vis*! B2a6c@set-library-vis*!) (set! B2c45@B2a6a@library-vis* B2a6a@library-vis*) (set! B2c44@B2a68@set-library-imp*! B2a68@set-library-imp*!) (set! B2c43@B2a66@library-imp* B2a66@library-imp*) (set! B2c42@B2a64@set-library-version! B2a64@set-library-version!) (set! B2c41@B2a62@library-version B2a62@library-version) (set! B2c40@B2a60@set-library-name! B2a60@set-library-name!) (set! B2c3f@B2a5e@library-name B2a5e@library-name) (set! B2c3e@B2a5c@set-library-id! B2a5c@set-library-id!) (set! B2c3d@B2a5a@library-id B2a5a@library-id) (set! B2c3c@B2a58@library? B2a58@library?) (set! B2c3b@B2a4e@rp B2a4e@rp) (set! B2c3a@B2a4c@current-library-collection B2a4c@current-library-collection) (set! B2c39@B2a4a@make-collection B2a4a@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (B2c76@build-global-define B2ce7@build-lambda B2ce9@build-case-lambda B2ceb@build-let B2d19@build-sequence B2d1b@build-void B2d1d@build-letrec B2d1f@build-letrec* B2d21@build-library-letrec* B2d23@build-receive) (begin (set! B2c76@build-global-define (lambda (B2d24@x) (B2d1b@build-void))) (set! B2ce7@build-lambda (lambda (B2d26@ae B2d27@vars B2d28@exp) (list 'lambda B2d27@vars B2d28@exp))) (set! B2ce9@build-case-lambda (lambda (B2d2c@ae B2d2d@vars* B2d2e@exp*) ((lambda (B2d33@build-error B2d35@build-pred B2d37@build-apply B2d39@expand-case-lambda) (begin (set! B2d33@build-error (lambda (B2d6a@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! B2d35@build-pred (lambda (B2d52@ae B2d53@n B2d54@vars) (call-with-values (lambda () ((letrec ((B2d5c@f (lambda (B2d5e@vars B2d5f@count) (if (pair? B2d5e@vars) (B2d5c@f (cdr B2d5e@vars) (+ B2d5f@count '1)) (if (null? B2d5e@vars) (values B2d5f@count '=) (values B2d5f@count '>=)))))) B2d5c@f) B2d54@vars '0)) (lambda (B2d62@B2d59 B2d63@B2d5b) ((lambda (B2d66@pred B2d67@count) (list (list 'primitive B2d66@pred) B2d53@n (list 'quote B2d67@count))) B2d63@B2d5b B2d62@B2d59))))) (set! B2d37@build-apply (lambda (B2d4a@ae B2d4b@g B2d4c@vars B2d4d@exp) (list '(primitive apply) (B2ce7@build-lambda B2d4a@ae B2d4c@vars B2d4d@exp) B2d4b@g))) (set! B2d39@expand-case-lambda (lambda (B2d3a@ae B2d3b@vars B2d3c@exp*) ((lambda (B2d40@g B2d41@n) (list 'lambda B2d40@g (B2ceb@build-let B2d3a@ae (list B2d41@n) (list (list '(primitive length) B2d40@g)) ((letrec ((B2d44@f (lambda (B2d46@vars* B2d47@exp*) (if (null? B2d46@vars*) (B2d33@build-error B2d3a@ae) (list 'if (B2d35@build-pred B2d3a@ae B2d41@n (car B2d46@vars*)) (B2d37@build-apply B2d3a@ae B2d40@g (car B2d46@vars*) (car B2d47@exp*)) (B2d44@f (cdr B2d46@vars*) (cdr B2d47@exp*))))))) B2d44@f) B2d2d@vars* B2d3c@exp*)))) (gensym) (gensym)))) (if (= (length B2d2e@exp*) '1) (B2ce7@build-lambda B2d2c@ae (car B2d2d@vars*) (car B2d2e@exp*)) (B2d39@expand-case-lambda B2d2c@ae B2d2d@vars* B2d2e@exp*)))) '#f '#f '#f '#f))) (set! B2ceb@build-let (lambda (B2d6c@ae B2d6d@lhs* B2d6e@rhs* B2d6f@body) (cons (B2ce7@build-lambda B2d6c@ae B2d6d@lhs* B2d6f@body) B2d6e@rhs*))) (set! B2d19@build-sequence (lambda (B2d74@ae B2d75@exps) ((letrec ((B2d78@loop (lambda (B2d7a@exps) (if (null? (cdr B2d7a@exps)) (car B2d7a@exps) (if (equal? (car B2d7a@exps) (B2d1b@build-void)) (B2d78@loop (cdr B2d7a@exps)) (cons 'begin B2d7a@exps)))))) B2d78@loop) B2d75@exps))) (set! B2d1b@build-void (lambda () '((primitive void)))) (set! B2d1d@build-letrec (lambda (B2d7c@ae B2d7d@vars B2d7e@val-exps B2d7f@body-exp) (if (null? B2d7d@vars) B2d7f@body-exp (list 'letrec (map list B2d7d@vars B2d7e@val-exps) B2d7f@body-exp)))) (set! B2d1f@build-letrec* (lambda (B2d84@ae B2d85@vars B2d86@val-exps B2d87@body-exp) (if (null? B2d85@vars) B2d87@body-exp (B2ceb@build-let B2d84@ae B2d85@vars (map (lambda (B2d8c@x) (list 'quote '#f)) B2d85@vars) (B2d19@build-sequence B2d84@ae (append (map (lambda (B2d8e@lhs B2d8f@rhs) (list 'set! B2d8e@lhs B2d8f@rhs)) B2d85@vars B2d86@val-exps) (list B2d87@body-exp))))))) (set! B2d21@build-library-letrec* (lambda (B2d92@ae B2d93@name B2d94@vars B2d95@locs B2d96@val-exps B2d97@body-exp) (list 'library-letrec* B2d93@name (map list B2d94@vars B2d95@locs B2d96@val-exps) B2d97@body-exp))) (set! B2d23@build-receive (lambda (B2d9e@ae B2d9f@vars B2da0@producer B2da1@body*) (begin (display '"************** in ") (cons 'receive (cons B2d9f@vars (cons B2da0@producer B2da1@body*)))))) (begin (set! B2daf@B2d23@build-receive B2d23@build-receive) (set! B2dae@B2d21@build-library-letrec* B2d21@build-library-letrec*) (set! B2dad@B2d1f@build-letrec* B2d1f@build-letrec*) (set! B2dac@B2d1d@build-letrec B2d1d@build-letrec) (set! B2dab@B2d1b@build-void B2d1b@build-void) (set! B2daa@B2d19@build-sequence B2d19@build-sequence) (set! B2da9@B2ceb@build-let B2ceb@build-let) (set! B2da8@B2ce9@build-case-lambda B2ce9@build-case-lambda) (set! B2da7@B2ce7@build-lambda B2ce7@build-lambda) (set! B2da6@B2c76@build-global-define B2c76@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (B2dbe@file-options-macro B2dc0@set-cons B2dc2@set-union B2dc7@top-mark* B2dc9@top-marked? B2dcb@gen-lexical B2dcd@gen-global B2dcf@gen-label B2dd1@gen-top-level-label B2dd3@gen-define-label+loc B2dd5@gen-define-label B2ddf@rib? B2de1@rib-sym* B2de3@set-rib-sym*! B2de5@rib-mark** B2de7@set-rib-mark**! B2de9@rib-label* B2deb@set-rib-label*! B2ded@rib-sealed/freq B2def@set-rib-sealed/freq! B2df1@rib-cache B2df3@set-rib-cache! B2df5@dummy B2df7@make-empty-rib B2df9@extend-rib! B2dfb@extend-rib/nc! B2dfd@make-rib-map B2dff@seal-rib! B2e01@unseal-rib! B2e03@make-full-rib B2e05@rp B2e0f@stx? B2e11@stx-expr B2e13@set-stx-expr! B2e15@stx-mark* B2e17@set-stx-mark*! B2e19@stx-subst* B2e1b@set-stx-subst*! B2e1d@stx-ae* B2e1f@set-stx-ae*! B2e21@dummy B2e23@datum->stx B2e25@gen-mark B2e27@anti-mark B2e29@anti-mark? B2e2b@mkstx B2e2d@add-mark B2e2f@add-subst B2e31@syntax-kind? B2e33@syntax-vector->list B2e35@syntax-pair? B2e37@syntax-vector? B2e39@syntax-null? B2e3b@syntax-list? B2e3d@syntax-car B2e3f@syntax-cdr B2e41@syntax->list B2e43@id? B2e45@id->sym B2e47@bound-id=? B2e49@free-id=? B2e4b@valid-bound-ids? B2e4d@distinct-bound-ids? B2e4f@bound-id-member? B2e51@self-evaluating? B2e53@strip-annotations B2e55@strip B2e57@stx->datum B2e59@id->label B2e5b@label->binding B2e5d@make-binding B2e5f@binding-type B2e61@binding-value B2e63@raise-unbound-error B2e65@syntax-type B2e73@sanitize-binding B2e75@make-variable-transformer B2e77@variable-transformer? B2e79@variable-transformer-procedure B2e7b@make-eval-transformer B2fcc@parse-define B2fce@parse-define-syntax B2fd0@scheme-stx-hashtable B2fd2@scheme-stx B2fd4@lexical-var B2fd6@lexical-mutable? B2fd8@set-lexical-mutable! B2fda@add-lexical B2fdc@add-lexicals B2fde@letrec-helper B2fe0@letrec-transformer B2fe2@letrec*-transformer B2fe4@fluid-let-syntax-transformer B2fe6@type-descriptor-transformer B2fe8@record-type-descriptor-transformer B2fea@record-constructor-descriptor-transformer B2fec@when-macro B2fee@unless-macro B2ff0@if-transformer B2ff2@and-transformer B2ff4@or-transformer B2ff6@case-macro B2ff8@quote-transformer B2ffa@case-lambda-transformer B2ffc@lambda-transformer B2ffe@bless B3000@with-syntax-macro B3002@invalid-fmls-error B3004@let-macro B3006@let-values-macro B3008@let*-values-macro B300a@trace-lambda-macro B300c@trace-define-macro B300e@trace-define-syntax-macro B3010@trace-let/rec-syntax B3012@trace-let-syntax-macro B3014@trace-letrec-syntax-macro B3016@guard-macro B3018@define-enumeration-macro B301a@time-macro B301c@delay-macro B301e@assert-macro B3020@endianness-macro B3022@identifier-syntax-macro B3024@do-macro B3026@let*-macro B3028@or-macro B302a@and-macro B302c@cond-macro B302e@do-include B3030@include-macro B3032@include-into-macro B3034@syntax-rules-macro B3036@quasiquote-macro B3038@quasisyntax-macro B303a@define-struct-macro B303c@define-record-type-macro B303e@define-condition-type-macro B3040@incorrect-usage-macro B3042@parameterize-macro B3044@foreign-call-transformer B3046@convert-pattern B3048@syntax-dispatch B304a@ellipsis? B304c@underscore? B304e@verify-literals B3050@syntax-case-transformer B3052@ellipsis-map B3054@syntax-transformer B3056@core-macro-transformer B3058@symbol-macro B305a@macro-transformer B305c@local-macro-transformer B305e@do-macro-call B3060@chi-macro B3062@chi-local-macro B3064@chi-global-macro B3066@chi-expr* B3068@chi-application B306a@chi-expr B306c@chi-set! B306e@verify-formals B3070@chi-lambda-clause B3072@chi-lambda-clause* B3074@chi-defun B3076@chi-rhs B3078@expand-interaction-rhs*/init* B307a@chi-rhs* B307c@find-bound=? B307e@find-dups B3080@chi-internal B3082@parse-module B308c@module-interface? B308e@module-interface-first-mark B3090@set-module-interface-first-mark! B3092@module-interface-exp-id-vec B3094@set-module-interface-exp-id-vec! B3096@module-interface-exp-lab-vec B3098@set-module-interface-exp-lab-vec! B309a@dummy B309c@module-interface-exp-id* B309e@chi-internal-module B30a0@chi-body* B30a2@expand-transformer B30a4@parse-exports B30a6@parse-library-name B30a8@parse-library B30aa@parse-import-spec* B30ac@make-top-rib B30ae@make-collector B30b0@inv-collector B30b2@vis-collector B30b4@imp-collector B30b6@chi-library-internal B30b8@chi-interaction-expr B30ba@library-body-expander B30bc@core-library-expander B30be@parse-top-level-program B30c0@top-level-expander B30c2@rp B30cc@env? B30ce@env-names B30d0@set-env-names! B30d2@env-labels B30d4@set-env-labels! B30d6@env-itc B30d8@set-env-itc! B30da@dummy B30dc@rp B30e6@interaction-env? B30e8@interaction-env-rib B30ea@set-interaction-env-rib! B30ec@interaction-env-r B30ee@set-interaction-env-r! B30f0@interaction-env-locs B30f2@set-interaction-env-locs! B30f4@dummy B30f6@interaction-environment-symbols B30f8@environment-bindings B30fa@parse-binding B30fc@environment? B30fe@environment-symbols B3100@environment B3102@null-environment B3104@scheme-report-environment B3106@expand B3108@eval B310a@library-expander B310c@boot-library-expand B310e@rev-map-append B3110@build-exports B3112@make-export-subst B3114@make-export-env/macros B3116@generate-temporaries B3118@free-identifier=? B311a@bound-identifier=? B311c@make-source-condition B311e@extract-position-condition B3120@expression-position B3122@assertion-error B3124@syntax-error B3126@syntax-violation* B3128@syntax-violation B312a@identifier? B312c@datum->syntax B312e@syntax->datum B3130@compile-r6rs-top-level B3132@pre-compile-r6rs-top-level B3134@interaction-environment B3136@top-level-context) (begin (set! B2dbe@file-options-macro (lambda (B3137@x) ((lambda (B313a@valid-option?) (begin (set! B313a@valid-option? (lambda (B3143@x) (and (B2e43@id? B3143@x) (memq (B2e45@id->sym B3143@x) '(no-fail no-create no-truncate))))) ((lambda (B313b@t) ((lambda (B313d@ls/false) (if (and B313d@ls/false (apply (lambda (B313f@opt*) (for-all B313a@valid-option? B313f@opt*)) B313d@ls/false)) (apply (lambda (B3141@opt*) (B2ffe@bless (list 'make-file-options (list 'quote B3141@opt*)))) B313d@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B313b@t))) (B3048@syntax-dispatch B313b@t '(_ . each-any)))) B3137@x))) '#f))) (set! B2dc0@set-cons (lambda (B3145@x B3146@ls) (if (memq B3145@x B3146@ls) B3146@ls (cons B3145@x B3146@ls)))) (set! B2dc2@set-union (lambda (B3149@ls1 B314a@ls2) (if (null? B3149@ls1) B314a@ls2 (if (memq (car B3149@ls1) B314a@ls2) (B2dc2@set-union (cdr B3149@ls1) B314a@ls2) (cons (car B3149@ls1) (B2dc2@set-union (cdr B3149@ls1) B314a@ls2)))))) (set! B2dc7@top-mark* '(top)) (set! B2dc9@top-marked? (lambda (B314d@m*) (memq 'top B314d@m*))) (set! B2dcb@gen-lexical (lambda (B314f@sym) (if (symbol? B314f@sym) (gensym B314f@sym) (if (B2e0f@stx? B314f@sym) (B2dcb@gen-lexical (B2e45@id->sym B314f@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" B314f@sym))))) (set! B2dcd@gen-global (lambda (B3151@x) (B2dcb@gen-lexical B3151@x))) (set! B2dcf@gen-label (lambda (B3153@_) (gensym))) (set! B2dd1@gen-top-level-label (lambda (B3155@id B3156@rib) ((lambda (B315a@find) (begin (set! B315a@find (lambda (B3165@sym B3166@mark* B3167@sym* B3168@mark** B3169@label*) (and (pair? B3167@sym*) (if (and (eq? B3165@sym (car B3167@sym*)) (same-marks? B3166@mark* (car B3168@mark**))) (car B3169@label*) (B315a@find B3165@sym B3166@mark* (cdr B3167@sym*) (cdr B3168@mark**) (cdr B3169@label*)))))) ((lambda (B315b@sym B315c@mark*) ((lambda (B315f@sym*) ((lambda (B3161@t) (if B3161@t ((lambda (B3163@label) (if (B2c6d@B2aba@imported-label->binding B3163@label) (gensym) B3163@label)) B3161@t) (gensym))) (and (memq B315b@sym (B2de1@rib-sym* B3156@rib)) (B315a@find B315b@sym B315c@mark* B315f@sym* (B2de5@rib-mark** B3156@rib) (B2de9@rib-label* B3156@rib))))) (B2de1@rib-sym* B3156@rib))) (B2e45@id->sym B3155@id) (B2e15@stx-mark* B3155@id)))) '#f))) (set! B2dd3@gen-define-label+loc (lambda (B316f@id B3170@rib) ((lambda (B3173@t) (if B3173@t ((lambda (B3175@env) ((lambda (B3177@label B3178@locs) (values B3177@label ((lambda (B317b@t) (if B317b@t (cdr B317b@t) ((lambda (B317d@loc) (begin (B30f2@set-interaction-env-locs! B3175@env (cons (cons B3177@label B317d@loc) B3178@locs)) B317d@loc)) (B2dcb@gen-lexical B316f@id)))) (assq B3177@label B3178@locs)))) (B2dd1@gen-top-level-label B316f@id B3170@rib) (B30f0@interaction-env-locs B3175@env))) B3173@t) (values (gensym) (B2dcb@gen-lexical B316f@id)))) (B3136@top-level-context)))) (set! B2dd5@gen-define-label (lambda (B317f@id B3180@rib) (if (B3136@top-level-context) (B2dd1@gen-top-level-label B317f@id B3180@rib) (gensym)))) (set! B2ddf@rib? (lambda (B3183@x) (and (simple-struct? B3183@x) (eq? (simple-struct-name B3183@x) 'rib)))) (set! B2de1@rib-sym* (lambda (B3185@x) (simple-struct-ref B3185@x '0))) (set! B2de3@set-rib-sym*! (lambda (B3187@x B3188@val) (simple-struct-set! B3187@x '0 B3188@val))) (set! B2de5@rib-mark** (lambda (B318b@x) (simple-struct-ref B318b@x '1))) (set! B2de7@set-rib-mark**! (lambda (B318d@x B318e@val) (simple-struct-set! B318d@x '1 B318e@val))) (set! B2de9@rib-label* (lambda (B3191@x) (simple-struct-ref B3191@x '2))) (set! B2deb@set-rib-label*! (lambda (B3193@x B3194@val) (simple-struct-set! B3193@x '2 B3194@val))) (set! B2ded@rib-sealed/freq (lambda (B3197@x) (simple-struct-ref B3197@x '3))) (set! B2def@set-rib-sealed/freq! (lambda (B3199@x B319a@val) (simple-struct-set! B3199@x '3 B319a@val))) (set! B2df1@rib-cache (lambda (B319d@x) (simple-struct-ref B319d@x '4))) (set! B2df3@set-rib-cache! (lambda (B319f@x B31a0@val) (simple-struct-set! B319f@x '4 B31a0@val))) (set! B2df5@dummy '3) (set! B2df7@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! B2df9@extend-rib! (lambda (B31a3@rib B31a4@id B31a5@label) ((lambda (B31aa@find) (begin (set! B31aa@find (lambda (B31b7@sym B31b8@mark* B31b9@sym* B31ba@mark** B31bb@label*) (and (pair? B31b9@sym*) (if (and (eq? B31b7@sym (car B31b9@sym*)) (same-marks? B31b8@mark* (car B31ba@mark**))) B31bb@label* (B31aa@find B31b7@sym B31b8@mark* (cdr B31b9@sym*) (cdr B31ba@mark**) (cdr B31bb@label*)))))) (begin (if (B2ded@rib-sealed/freq B31a3@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" B31a3@rib) (void)) ((lambda (B31ab@sym B31ac@mark*) ((lambda (B31af@sym*) ((lambda (B31b1@t) (if B31b1@t ((lambda (B31b3@p) (if (not (eq? B31a5@label (car B31b3@p))) (if (B3136@top-level-context) (set-car! B31b3@p B31a5@label) (B3128@syntax-violation '#f '"multiple definitions of identifier" B31a4@id)) (void))) B31b1@t) (begin (if (B2df1@rib-cache B31a3@rib) (hashtable-update! (B2df1@rib-cache B31a3@rib) B31ab@sym (lambda (B31b5@e) (cons (cons B31ac@mark* B31a5@label) B31b5@e)) '()) (void)) (B2de3@set-rib-sym*! B31a3@rib (cons B31ab@sym B31af@sym*)) (B2de7@set-rib-mark**! B31a3@rib (cons B31ac@mark* (B2de5@rib-mark** B31a3@rib))) (B2deb@set-rib-label*! B31a3@rib (cons B31a5@label (B2de9@rib-label* B31a3@rib)))))) (and (memq B31ab@sym (B2de1@rib-sym* B31a3@rib)) (B31aa@find B31ab@sym B31ac@mark* B31af@sym* (B2de5@rib-mark** B31a3@rib) (B2de9@rib-label* B31a3@rib))))) (B2de1@rib-sym* B31a3@rib))) (B2e45@id->sym B31a4@id) (B2e15@stx-mark* B31a4@id))))) '#f))) (set! B2dfb@extend-rib/nc! (lambda (B31c1@rib B31c2@id B31c3@label) ((lambda (B31c7@sym B31c8@mark*) ((lambda (B31cb@sym*) (begin (if (B2df1@rib-cache B31c1@rib) (hashtable-update! (B2df1@rib-cache B31c1@rib) B31c7@sym (lambda (B31cd@e) (cons (cons B31c8@mark* B31c3@label) B31cd@e)) '()) (void)) (B2de3@set-rib-sym*! B31c1@rib (cons B31c7@sym B31cb@sym*)) (B2de7@set-rib-mark**! B31c1@rib (cons B31c8@mark* (B2de5@rib-mark** B31c1@rib))) (B2deb@set-rib-label*! B31c1@rib (cons B31c3@label (B2de9@rib-label* B31c1@rib))))) (B2de1@rib-sym* B31c1@rib))) (B2e45@id->sym B31c2@id) (B2e15@stx-mark* B31c2@id)))) (set! B2dfd@make-rib-map (lambda (B31cf@sym*) ((lambda (B31d1@ht) ((letrec ((B31d3@f (lambda (B31d5@i B31d6@sym*) (if (null? B31d6@sym*) B31d1@ht (begin (hashtable-update! B31d1@ht (car B31d6@sym*) (lambda (B31d9@x) (cons B31d5@i B31d9@x)) '()) (B31d3@f (+ B31d5@i '1) (cdr B31d6@sym*))))))) B31d3@f) '0 B31cf@sym*)) (make-eq-hashtable)))) (set! B2dff@seal-rib! (lambda (B31db@rib) ((lambda (B31dd@sym*) (if (not (null? B31dd@sym*)) (begin (B2de3@set-rib-sym*! B31db@rib (list->vector B31dd@sym*)) (B2de7@set-rib-mark**! B31db@rib (list->vector (B2de5@rib-mark** B31db@rib))) (B2deb@set-rib-label*! B31db@rib (list->vector (B2de9@rib-label* B31db@rib))) (B2def@set-rib-sealed/freq! B31db@rib (B2dfd@make-rib-map B31dd@sym*))) (void))) (B2de1@rib-sym* B31db@rib)))) (set! B2e01@unseal-rib! (lambda (B31df@rib) (if (B2ded@rib-sealed/freq B31df@rib) (begin (B2def@set-rib-sealed/freq! B31df@rib '#f) (B2de3@set-rib-sym*! B31df@rib (vector->list (B2de1@rib-sym* B31df@rib))) (B2de7@set-rib-mark**! B31df@rib (vector->list (B2de5@rib-mark** B31df@rib))) (B2deb@set-rib-label*! B31df@rib (vector->list (B2de9@rib-label* B31df@rib)))) (void)))) (set! B2e03@make-full-rib (lambda (B31e1@id* B31e2@label*) ((lambda (B31e5@r) (begin (B2dff@seal-rib! B31e5@r) B31e5@r)) (make-simple-struct 'rib '6 (list (map B2e45@id->sym B31e1@id*) (map B2e15@stx-mark* B31e1@id*) B31e2@label* '#f '#f))))) (set! B2e05@rp (B299f@B287b@make-record-printer 'stx (lambda (B31e7@x B31e8@p B31e9@wr) (begin (display '"#<syntax " B31e8@p) (write (B2e57@stx->datum B31e7@x) B31e8@p) ((lambda (B31ed@expr) (if (B2997@B286b@annotation? B31ed@expr) ((lambda (B31ef@src) (if (pair? B31ef@src) (begin (display '" [" B31e8@p) (display (cdr B31ef@src) B31e8@p) (display '" of " B31e8@p) (display (car B31ef@src) B31e8@p) (display '"]" B31e8@p)) (void))) (B2998@B286d@annotation-source B31ed@expr)) (void))) (B2e11@stx-expr B31e7@x)) (display '">" B31e8@p))))) (set! B2e0f@stx? (lambda (B31f1@x) (and (simple-struct? B31f1@x) (eq? (simple-struct-name B31f1@x) 'stx)))) (set! B2e11@stx-expr (lambda (B31f3@x) (simple-struct-ref B31f3@x '0))) (set! B2e13@set-stx-expr! (lambda (B31f5@x B31f6@val) (simple-struct-set! B31f5@x '0 B31f6@val))) (set! B2e15@stx-mark* (lambda (B31f9@x) (simple-struct-ref B31f9@x '1))) (set! B2e17@set-stx-mark*! (lambda (B31fb@x B31fc@val) (simple-struct-set! B31fb@x '1 B31fc@val))) (set! B2e19@stx-subst* (lambda (B31ff@x) (simple-struct-ref B31ff@x '2))) (set! B2e1b@set-stx-subst*! (lambda (B3201@x B3202@val) (simple-struct-set! B3201@x '2 B3202@val))) (set! B2e1d@stx-ae* (lambda (B3205@x) (simple-struct-ref B3205@x '3))) (set! B2e1f@set-stx-ae*! (lambda (B3207@x B3208@val) (simple-struct-set! B3207@x '3 B3208@val))) (set! B2e21@dummy '3) (set! B2e23@datum->stx (lambda (B320b@id B320c@datum) (make-simple-struct 'stx '5 (list B320c@datum (B2e15@stx-mark* B320b@id) (B2e19@stx-subst* B320b@id) (B2e1d@stx-ae* B320b@id))))) (set! B2e25@gen-mark (lambda () (string '#\m))) (set! B2e27@anti-mark '#f) (set! B2e29@anti-mark? not) (set! B2e2b@mkstx (lambda (B320f@e B3210@m* B3211@s* B3212@ae*) (if (and (B2e0f@stx? B320f@e) (not (B2dc9@top-marked? B3210@m*))) (call-with-values (lambda () (join-wraps B3210@m* B3211@s* B3212@ae* B320f@e)) (lambda (B321d@B3218 B321e@B321a B321f@B321c) ((lambda (B3223@ae* B3224@s* B3225@m*) (make-simple-struct 'stx '5 (list (B2e11@stx-expr B320f@e) B3225@m* B3224@s* B3223@ae*))) B321f@B321c B321e@B321a B321d@B3218))) (make-simple-struct 'stx '5 (list B320f@e B3210@m* B3211@s* B3212@ae*))))) (set! B2e2d@add-mark (lambda (B3229@m B322a@e B322b@ae) (B2e2b@mkstx B322a@e (list B3229@m) '(shift) (list B322b@ae)))) (set! B2e2f@add-subst (lambda (B322f@subst B3230@e) (B2e2b@mkstx B3230@e '() (list B322f@subst) '()))) (set! B2e31@syntax-kind? (lambda (B3233@x B3234@p?) (if (B2e0f@stx? B3233@x) (B2e31@syntax-kind? (B2e11@stx-expr B3233@x) B3234@p?) (if (B2997@B286b@annotation? B3233@x) (B2e31@syntax-kind? (B2999@B286f@annotation-expression B3233@x) B3234@p?) (B3234@p? B3233@x))))) (set! B2e33@syntax-vector->list (lambda (B3237@x) (if (B2e0f@stx? B3237@x) ((lambda (B3239@ls B323a@m* B323b@s* B323c@ae*) (map (lambda (B3241@x) (B2e2b@mkstx B3241@x B323a@m* B323b@s* B323c@ae*)) B3239@ls)) (B2e33@syntax-vector->list (B2e11@stx-expr B3237@x)) (B2e15@stx-mark* B3237@x) (B2e19@stx-subst* B3237@x) (B2e1d@stx-ae* B3237@x)) (if (B2997@B286b@annotation? B3237@x) (B2e33@syntax-vector->list (B2999@B286f@annotation-expression B3237@x)) (if (vector? B3237@x) (vector->list B3237@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" B3237@x)))))) (set! B2e35@syntax-pair? (lambda (B3243@x) (B2e31@syntax-kind? B3243@x pair?))) (set! B2e37@syntax-vector? (lambda (B3245@x) (B2e31@syntax-kind? B3245@x vector?))) (set! B2e39@syntax-null? (lambda (B3247@x) (B2e31@syntax-kind? B3247@x null?))) (set! B2e3b@syntax-list? (lambda (B3249@x) (or (B2e39@syntax-null? B3249@x) (and (B2e35@syntax-pair? B3249@x) (B2e3b@syntax-list? (B2e3f@syntax-cdr B3249@x)))))) (set! B2e3d@syntax-car (lambda (B324b@x) (if (B2e0f@stx? B324b@x) (B2e2b@mkstx (B2e3d@syntax-car (B2e11@stx-expr B324b@x)) (B2e15@stx-mark* B324b@x) (B2e19@stx-subst* B324b@x) (B2e1d@stx-ae* B324b@x)) (if (B2997@B286b@annotation? B324b@x) (B2e3d@syntax-car (B2999@B286f@annotation-expression B324b@x)) (if (pair? B324b@x) (car B324b@x) (assertion-violation 'syntax-car '"BUG: not a pair" B324b@x)))))) (set! B2e3f@syntax-cdr (lambda (B324d@x) (if (B2e0f@stx? B324d@x) (B2e2b@mkstx (B2e3f@syntax-cdr (B2e11@stx-expr B324d@x)) (B2e15@stx-mark* B324d@x) (B2e19@stx-subst* B324d@x) (B2e1d@stx-ae* B324d@x)) (if (B2997@B286b@annotation? B324d@x) (B2e3f@syntax-cdr (B2999@B286f@annotation-expression B324d@x)) (if (pair? B324d@x) (cdr B324d@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" B324d@x)))))) (set! B2e41@syntax->list (lambda (B324f@x) (if (B2e35@syntax-pair? B324f@x) (cons (B2e3d@syntax-car B324f@x) (B2e41@syntax->list (B2e3f@syntax-cdr B324f@x))) (if (B2e39@syntax-null? B324f@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" B324f@x))))) (set! B2e43@id? (lambda (B3251@x) (and (B2e0f@stx? B3251@x) (symbol? (B2e11@stx-expr B3251@x))))) (set! B2e45@id->sym (lambda (B3253@x) (B2e11@stx-expr B3253@x))) (set! B2e47@bound-id=? (lambda (B3255@x B3256@y) (and (eq? (B2e45@id->sym B3255@x) (B2e45@id->sym B3256@y)) (same-marks? (B2e15@stx-mark* B3255@x) (B2e15@stx-mark* B3256@y))))) (set! B2e49@free-id=? (lambda (B3259@i B325a@j) ((lambda (B325d@t0 B325e@t1) (if (or B325d@t0 B325e@t1) (eq? B325d@t0 B325e@t1) (eq? (B2e45@id->sym B3259@i) (B2e45@id->sym B325a@j)))) (id->real-label B3259@i) (id->real-label B325a@j)))) (set! B2e4b@valid-bound-ids? (lambda (B3261@id*) (and (for-all B2e43@id? B3261@id*) (B2e4d@distinct-bound-ids? B3261@id*)))) (set! B2e4d@distinct-bound-ids? (lambda (B3263@id*) (or (null? B3263@id*) (and (not (B2e4f@bound-id-member? (car B3263@id*) (cdr B3263@id*))) (B2e4d@distinct-bound-ids? (cdr B3263@id*)))))) (set! B2e4f@bound-id-member? (lambda (B3265@id B3266@id*) (and (pair? B3266@id*) (or (B2e47@bound-id=? B3265@id (car B3266@id*)) (B2e4f@bound-id-member? B3265@id (cdr B3266@id*)))))) (set! B2e51@self-evaluating? (lambda (B3269@x) (or (number? B3269@x) (string? B3269@x) (char? B3269@x) (boolean? B3269@x) (regexp? B3269@x) (bytevector? B3269@x)))) (set! B2e53@strip-annotations (lambda (B326b@x) (if (pair? B326b@x) (cons (B2e53@strip-annotations (car B326b@x)) (B2e53@strip-annotations (cdr B326b@x))) (if (vector? B326b@x) (vector-map B2e53@strip-annotations B326b@x) (if (B2997@B286b@annotation? B326b@x) (B2996@B2869@annotation-stripped B326b@x) B326b@x))))) (set! B2e55@strip (lambda (B326d@x B326e@m*) (if (B2dc9@top-marked? B326e@m*) (if (or (B2997@B286b@annotation? B326d@x) (and (pair? B326d@x) (B2997@B286b@annotation? (car B326d@x))) (and (vector? B326d@x) (> (vector-length B326d@x) '0) (B2997@B286b@annotation? (vector-ref B326d@x '0)))) (B2e53@strip-annotations B326d@x) B326d@x) ((letrec ((B3271@f (lambda (B3273@x) (if (B2e0f@stx? B3273@x) (B2e55@strip (B2e11@stx-expr B3273@x) (B2e15@stx-mark* B3273@x)) (if (B2997@B286b@annotation? B3273@x) (B2996@B2869@annotation-stripped B3273@x) (if (pair? B3273@x) ((lambda (B3275@a B3276@d) (if (and (eq? B3275@a (car B3273@x)) (eq? B3276@d (cdr B3273@x))) B3273@x (cons B3275@a B3276@d))) (B3271@f (car B3273@x)) (B3271@f (cdr B3273@x))) (if (vector? B3273@x) ((lambda (B3279@old) ((lambda (B327b@new) (if (for-all eq? B3279@old B327b@new) B3273@x (list->vector B327b@new))) (map B3271@f B3279@old))) (vector->list B3273@x)) B3273@x))))))) B3271@f) B326d@x)))) (set! B2e57@stx->datum (lambda (B327d@x) (B2e55@strip B327d@x '()))) (set! B2e59@id->label (lambda (B327f@id) (or (id->real-label B327f@id) ((lambda (B3281@t) (if B3281@t ((lambda (B3283@env) ((lambda (B3285@rib) (call-with-values (lambda () (B2dd3@gen-define-label+loc B327f@id B3285@rib)) (lambda (B328b@B3288 B328c@B328a) ((lambda (B328f@loc_ B3290@lab) (begin (B2df9@extend-rib! B3285@rib B327f@id B3290@lab) B3290@lab)) B328c@B328a B328b@B3288)))) (B30e8@interaction-env-rib B3283@env))) B3281@t) '#f)) (B3136@top-level-context))))) (set! B2e5b@label->binding (lambda (B3293@x B3294@r) ((lambda (B3297@t) (if B3297@t ((lambda (B3299@b) (if (and (pair? B3299@b) (eq? (car B3299@b) '$core-rtd)) (cons '$rtd (map B2ffe@bless (cdr B3299@b))) (if (and (pair? B3299@b) (eq? (car B3299@b) 'global-rtd)) ((lambda (B329b@lib B329c@loc) (cons '$rtd (symbol-value B329c@loc))) (cadr B3299@b) (cddr B3299@b)) B3299@b))) B3297@t) ((lambda (B329f@t) (if B329f@t (cdr B329f@t) ((lambda (B32a1@t) (if B32a1@t ((lambda (B32a3@env) ((lambda (B32a5@t) (if B32a5@t ((lambda (B32a7@p) (cons* 'lexical (cdr B32a7@p) '#f)) B32a5@t) '(displaced-lexical . #f))) (assq B3293@x (B30f0@interaction-env-locs B32a3@env)))) B32a1@t) '(displaced-lexical . #f))) (B3136@top-level-context)))) (assq B3293@x B3294@r)))) (B2c6d@B2aba@imported-label->binding B3293@x)))) (set! B2e5d@make-binding cons) (set! B2e5f@binding-type car) (set! B2e61@binding-value cdr) (set! B2e63@raise-unbound-error (lambda (B32a9@id) (B3126@syntax-violation* '#f '"unbound identifier" B32a9@id (B4e87@B4ccd@make-undefined-violation)))) (set! B2e65@syntax-type (lambda (B32ab@e B32ac@r) (if (B2e43@id? B32ab@e) ((lambda (B32af@id) ((lambda (B32b1@label) ((lambda (B32b3@b) ((lambda (B32b5@type) ((lambda () (begin (if (not B32b1@label) (B2e63@raise-unbound-error B32af@id) (void)) ((lambda (B32b7@t) (if (memv B32b7@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values B32b5@type (B2e61@binding-value B32b3@b) B32af@id) (values 'other '#f '#f))) B32b5@type))))) (B2e5f@binding-type B32b3@b))) (B2e5b@label->binding B32b1@label B32ac@r))) (B2e59@id->label B32af@id))) B32ab@e) (if (B2e35@syntax-pair? B32ab@e) ((lambda (B32b9@id) (if (B2e43@id? B32b9@id) ((lambda (B32bb@label) ((lambda (B32bd@b) ((lambda (B32bf@type) ((lambda () (begin (if (not B32bb@label) (B2e63@raise-unbound-error B32b9@id) (void)) ((lambda (B32c1@t) (if (memv B32c1@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values B32bf@type (B2e61@binding-value B32bd@b) B32b9@id) (values 'call '#f '#f))) B32bf@type))))) (B2e5f@binding-type B32bd@b))) (B2e5b@label->binding B32bb@label B32ac@r))) (B2e59@id->label B32b9@id)) (values 'call '#f '#f))) (B2e3d@syntax-car B32ab@e)) ((lambda (B32c3@d) (if (B2e51@self-evaluating? B32c3@d) (values 'constant B32c3@d '#f) (values 'other '#f '#f))) (B2e57@stx->datum B32ab@e)))))) (set! B2e73@sanitize-binding (lambda (B32c5@x B32c6@src) (if (procedure? B32c5@x) (cons* 'local-macro B32c5@x B32c6@src) (if (and (pair? B32c5@x) (eq? (car B32c5@x) 'macro!) (procedure? (cdr B32c5@x))) (cons* 'local-macro! (cdr B32c5@x) B32c6@src) (if (and (pair? B32c5@x) (eq? (car B32c5@x) '$rtd)) B32c5@x (assertion-violation 'expand '"invalid transformer" B32c5@x)))))) (set! B2e75@make-variable-transformer (lambda (B32c9@x) (if (procedure? B32c9@x) (cons 'macro! B32c9@x) (assertion-violation 'make-variable-transformer '"not a procedure" B32c9@x)))) (set! B2e77@variable-transformer? (lambda (B32cb@x) (and (pair? B32cb@x) (eq? (car B32cb@x) 'macro!) (procedure? (cdr B32cb@x))))) (set! B2e79@variable-transformer-procedure (lambda (B32cd@x) (if (B2e77@variable-transformer? B32cd@x) (cdr B32cd@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" B32cd@x)))) (set! B2e7b@make-eval-transformer (lambda (B32cf@x) (B2e73@sanitize-binding (eval-core (B29f8@B29b0@expanded->core B32cf@x)) B32cf@x))) (set! B2fcc@parse-define (lambda (B32d1@x) ((lambda (B32d3@t) ((lambda (B32d5@ls/false) (if (and B32d5@ls/false (apply (lambda (B32d7@id B32d8@fmls B32d9@b B32da@b*) (B2e43@id? B32d7@id)) B32d5@ls/false)) (apply (lambda (B32df@id B32e0@fmls B32e1@b B32e2@b*) (begin (B306e@verify-formals B32e0@fmls B32d1@x) (values B32df@id (cons 'defun (cons B32e0@fmls (cons B32e1@b B32e2@b*)))))) B32d5@ls/false) ((lambda (B32e7@t) ((lambda (B32e9@ls/false) (if (and B32e9@ls/false (apply (lambda (B32eb@id B32ec@val) (B2e43@id? B32eb@id)) B32e9@ls/false)) (apply (lambda (B32ef@id B32f0@val) (values B32ef@id (cons 'expr B32f0@val))) B32e9@ls/false) ((lambda (B32f3@t) ((lambda (B32f5@ls/false) (if (and B32f5@ls/false (apply (lambda (B32f7@id) (B2e43@id? B32f7@id)) B32f5@ls/false)) (apply (lambda (B32f9@id) (values B32f9@id (cons 'expr (B2ffe@bless '(void))))) B32f5@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B32f3@t))) (B3048@syntax-dispatch B32f3@t '(_ any)))) B32e7@t))) (B3048@syntax-dispatch B32e7@t '(_ any any)))) B32d3@t))) (B3048@syntax-dispatch B32d3@t '(_ (any . any) any . each-any)))) B32d1@x))) (set! B2fce@parse-define-syntax (lambda (B32fb@x) ((lambda (B32fd@t) ((lambda (B32ff@ls/false) (if (and B32ff@ls/false (apply (lambda (B3301@id B3302@val) (B2e43@id? B3301@id)) B32ff@ls/false)) (apply (lambda (B3305@id B3306@val) (values B3305@id B3306@val)) B32ff@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B32fd@t))) (B3048@syntax-dispatch B32fd@t '(_ any any)))) B32fb@x))) (set! B2fd0@scheme-stx-hashtable (make-eq-hashtable)) (set! B2fd2@scheme-stx (lambda (B3309@sym) (or (hashtable-ref B2fd0@scheme-stx-hashtable B3309@sym '#f) ((lambda (B330b@subst) ((lambda (B330d@stx) ((lambda (B330f@stx) ((lambda () (begin (hashtable-set! B2fd0@scheme-stx-hashtable B3309@sym B330f@stx) B330f@stx)))) ((lambda (B3311@t) (if B3311@t ((lambda (B3313@x) ((lambda (B3315@name B3316@label) (B2e2f@add-subst (make-simple-struct 'rib '6 (list (list B3315@name) (list B2dc7@top-mark*) (list B3316@label) '#f '#f)) B330d@stx)) (car B3313@x) (cdr B3313@x))) B3311@t) B330d@stx)) (assq B3309@sym B330b@subst)))) (make-simple-struct 'stx '5 (list B3309@sym B2dc7@top-mark* '() '())))) (B2c49@B2a72@library-subst (B2c67@B2aae@find-library-by-name '(psyntax system $all))))))) (set! B2fd4@lexical-var car) (set! B2fd6@lexical-mutable? cdr) (set! B2fd8@set-lexical-mutable! set-cdr!) (set! B2fda@add-lexical (lambda (B3319@lab B331a@lex B331b@r) (cons (cons* B3319@lab 'lexical B331a@lex '#f) B331b@r))) (set! B2fdc@add-lexicals (lambda (B331f@lab* B3320@lex* B3321@r) (if (null? B331f@lab*) B3321@r (B2fdc@add-lexicals (cdr B331f@lab*) (cdr B3320@lex*) (B2fda@add-lexical (car B331f@lab*) (car B3320@lex*) B3321@r))))) (set! B2fde@letrec-helper (lambda (B3325@e B3326@r B3327@mr B3328@build) ((lambda (B332d@t) ((lambda (B332f@ls/false) (if B332f@ls/false (apply (lambda (B3331@lhs* B3332@rhs* B3333@b B3334@b*) (if (not (B2e4b@valid-bound-ids? B3331@lhs*)) (B3002@invalid-fmls-error B3325@e B3331@lhs*) ((lambda (B3339@lex* B333a@lab*) ((lambda (B333d@rib B333e@r) ((lambda (B3341@body B3342@rhs*) (B3328@build '#f B3339@lex* B3342@rhs* B3341@body)) (B3080@chi-internal (B2e2f@add-subst B333d@rib (cons B3333@b B3334@b*)) B333e@r B3327@mr) (B3066@chi-expr* (map (lambda (B3345@x) (B2e2f@add-subst B333d@rib B3345@x)) B3332@rhs*) B333e@r B3327@mr))) (B2e03@make-full-rib B3331@lhs* B333a@lab*) (B2fdc@add-lexicals B333a@lab* B3339@lex* B3326@r))) (map B2dcb@gen-lexical B3331@lhs*) (map B2dcf@gen-label B3331@lhs*)))) B332f@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B332d@t))) (B3048@syntax-dispatch B332d@t '(_ #(each (any any)) any . each-any)))) B3325@e))) (set! B2fe0@letrec-transformer (lambda (B3347@e B3348@r B3349@mr) (B2fde@letrec-helper B3347@e B3348@r B3349@mr B2dac@B2d1d@build-letrec))) (set! B2fe2@letrec*-transformer (lambda (B334d@e B334e@r B334f@mr) (B2fde@letrec-helper B334d@e B334e@r B334f@mr B2dad@B2d1f@build-letrec*))) (set! B2fe4@fluid-let-syntax-transformer (lambda (B3353@e B3354@r B3355@mr) ((lambda (B335a@lookup) (begin (set! B335a@lookup (lambda (B336d@x) (or (B2e59@id->label B336d@x) (B3128@syntax-violation '#f '"unbound identifier" B3353@e B336d@x)))) ((lambda (B335b@t) ((lambda (B335d@ls/false) (if B335d@ls/false (apply (lambda (B335f@lhs* B3360@rhs* B3361@b B3362@b*) (if (not (B2e4b@valid-bound-ids? B335f@lhs*)) (B3002@invalid-fmls-error B3353@e B335f@lhs*) ((lambda (B3367@lab* B3368@rhs*) (B3080@chi-internal (cons B3361@b B3362@b*) (append (map cons B3367@lab* B3368@rhs*) B3354@r) (append (map cons B3367@lab* B3368@rhs*) B3355@mr))) (map B335a@lookup B335f@lhs*) (map (lambda (B336b@x) (B2e7b@make-eval-transformer (B30a2@expand-transformer B336b@x B3355@mr))) B3360@rhs*)))) B335d@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B335b@t))) (B3048@syntax-dispatch B335b@t '(_ #(each (any any)) any . each-any)))) B3353@e))) '#f))) (set! B2fe6@type-descriptor-transformer (lambda (B336f@e B3370@r B3371@mr) ((lambda (B3375@t) ((lambda (B3377@ls/false) (if (and B3377@ls/false (apply (lambda (B3379@id) (B2e43@id? B3379@id)) B3377@ls/false)) (apply (lambda (B337b@id) ((lambda (B337d@lab) ((lambda (B337f@b) ((lambda (B3381@type) ((lambda () (begin (if (not B337d@lab) (B2e63@raise-unbound-error B337b@id) (void)) (if (not (and (eq? B3381@type '$rtd) (not (list? (B2e61@binding-value B337f@b))))) (B3128@syntax-violation '#f '"not a record type" B336f@e) (void)) (list 'quote (B2e61@binding-value B337f@b)))))) (B2e5f@binding-type B337f@b))) (B2e5b@label->binding B337d@lab B3370@r))) (B2e59@id->label B337b@id))) B3377@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3375@t))) (B3048@syntax-dispatch B3375@t '(_ any)))) B336f@e))) (set! B2fe8@record-type-descriptor-transformer (lambda (B3383@e B3384@r B3385@mr) ((lambda (B3389@t) ((lambda (B338b@ls/false) (if (and B338b@ls/false (apply (lambda (B338d@id) (B2e43@id? B338d@id)) B338b@ls/false)) (apply (lambda (B338f@id) ((lambda (B3391@lab) ((lambda (B3393@b) ((lambda (B3395@type) ((lambda () (begin (if (not B3391@lab) (B2e63@raise-unbound-error B338f@id) (void)) (if (not (and (eq? B3395@type '$rtd) (list? (B2e61@binding-value B3393@b)))) (B3128@syntax-violation '#f '"not a record type" B3383@e) (void)) (B306a@chi-expr (car (B2e61@binding-value B3393@b)) B3384@r B3385@mr))))) (B2e5f@binding-type B3393@b))) (B2e5b@label->binding B3391@lab B3384@r))) (B2e59@id->label B338f@id))) B338b@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3389@t))) (B3048@syntax-dispatch B3389@t '(_ any)))) B3383@e))) (set! B2fea@record-constructor-descriptor-transformer (lambda (B3397@e B3398@r B3399@mr) ((lambda (B339d@t) ((lambda (B339f@ls/false) (if (and B339f@ls/false (apply (lambda (B33a1@id) (B2e43@id? B33a1@id)) B339f@ls/false)) (apply (lambda (B33a3@id) ((lambda (B33a5@lab) ((lambda (B33a7@b) ((lambda (B33a9@type) ((lambda () (begin (if (not B33a5@lab) (B2e63@raise-unbound-error B33a3@id) (void)) (if (not (and (eq? B33a9@type '$rtd) (list? (B2e61@binding-value B33a7@b)))) (B3128@syntax-violation '#f '"invalid type" B3397@e) (void)) (B306a@chi-expr (cadr (B2e61@binding-value B33a7@b)) B3398@r B3399@mr))))) (B2e5f@binding-type B33a7@b))) (B2e5b@label->binding B33a5@lab B3398@r))) (B2e59@id->label B33a3@id))) B339f@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B339d@t))) (B3048@syntax-dispatch B339d@t '(_ any)))) B3397@e))) (set! B2fec@when-macro (lambda (B33ab@e) ((lambda (B33ad@t) ((lambda (B33af@ls/false) (if B33af@ls/false (apply (lambda (B33b1@test B33b2@e B33b3@e*) (B2ffe@bless (list 'if B33b1@test (cons 'begin (cons B33b2@e B33b3@e*))))) B33af@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B33ad@t))) (B3048@syntax-dispatch B33ad@t '(_ any any . each-any)))) B33ab@e))) (set! B2fee@unless-macro (lambda (B33b7@e) ((lambda (B33b9@t) ((lambda (B33bb@ls/false) (if B33bb@ls/false (apply (lambda (B33bd@test B33be@e B33bf@e*) (B2ffe@bless (list 'if (list 'not B33bd@test) (cons 'begin (cons B33be@e B33bf@e*))))) B33bb@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B33b9@t))) (B3048@syntax-dispatch B33b9@t '(_ any any . each-any)))) B33b7@e))) (set! B2ff0@if-transformer (lambda (B33c3@e B33c4@r B33c5@mr) ((lambda (B33c9@t) ((lambda (B33cb@ls/false) (if B33cb@ls/false (apply (lambda (B33cd@e0 B33ce@e1 B33cf@e2) (list 'if (B306a@chi-expr B33cd@e0 B33c4@r B33c5@mr) (B306a@chi-expr B33ce@e1 B33c4@r B33c5@mr) (B306a@chi-expr B33cf@e2 B33c4@r B33c5@mr))) B33cb@ls/false) ((lambda (B33d3@t) ((lambda (B33d5@ls/false) (if B33d5@ls/false (apply (lambda (B33d7@e0 B33d8@e1) (list 'if (B306a@chi-expr B33d7@e0 B33c4@r B33c5@mr) (B306a@chi-expr B33d8@e1 B33c4@r B33c5@mr) (B2dab@B2d1b@build-void))) B33d5@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B33d3@t))) (B3048@syntax-dispatch B33d3@t '(_ any any)))) B33c9@t))) (B3048@syntax-dispatch B33c9@t '(_ any any any)))) B33c3@e))) (set! B2ff2@and-transformer (lambda (B33db@e B33dc@r B33dd@mr) ((lambda (B33e1@t) ((lambda (B33e3@ls/false) (if B33e3@ls/false (apply (lambda (B33e5@e*) (cons 'and (B3066@chi-expr* B33e5@e* B33dc@r B33dd@mr))) B33e3@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B33e1@t))) (B3048@syntax-dispatch B33e1@t '(_ . each-any)))) B33db@e))) (set! B2ff4@or-transformer (lambda (B33e7@e B33e8@r B33e9@mr) ((lambda (B33ed@t) ((lambda (B33ef@ls/false) (if B33ef@ls/false (apply (lambda (B33f1@e*) (cons 'or (B3066@chi-expr* B33f1@e* B33e8@r B33e9@mr))) B33ef@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B33ed@t))) (B3048@syntax-dispatch B33ed@t '(_ . each-any)))) B33e7@e))) (set! B2ff6@case-macro (lambda (B33f3@e) ((lambda (B33f6@build-last B33f8@build-one) (begin (set! B33f6@build-last (lambda (B341d@cls) ((lambda (B341f@t) ((lambda (B3421@ls/false) (if B3421@ls/false (apply (lambda (B3423@e B3424@e*) (cons 'begin (cons B3423@e B3424@e*))) B3421@ls/false) ((lambda (B3427@t) ((lambda (B3429@ls/false) (if B3429@ls/false (apply (lambda () (B33f8@build-one B341d@cls '(if #f #f))) B3429@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3427@t))) (B3048@syntax-dispatch B3427@t '_))) B341f@t))) (B3048@syntax-dispatch B341f@t '(#(scheme-id else) any . each-any)))) B341d@cls))) (set! B33f8@build-one (lambda (B340f@cls B3410@k) ((lambda (B3413@t) ((lambda (B3415@ls/false) (if B3415@ls/false (apply (lambda (B3417@d* B3418@e B3419@e*) (list 'if (list 'memv 't (list 'quote B3417@d*)) (cons 'begin (cons B3418@e B3419@e*)) B3410@k)) B3415@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3413@t))) (B3048@syntax-dispatch B3413@t '(each-any any . each-any)))) B340f@cls))) ((lambda (B33f9@t) ((lambda (B33fb@ls/false) (if B33fb@ls/false (apply (lambda (B33fd@expr) (B2ffe@bless (cons 'let (cons (list (list 't B33fd@expr)) '((if #f #f)))))) B33fb@ls/false) ((lambda (B33ff@t) ((lambda (B3401@ls/false) (if B3401@ls/false (apply (lambda (B3403@expr B3404@cls B3405@cls*) (B2ffe@bless (list 'let (list (list 't B3403@expr)) ((letrec ((B3409@f (lambda (B340b@cls B340c@cls*) (if (null? B340c@cls*) (B33f6@build-last B340b@cls) (B33f8@build-one B340b@cls (B3409@f (car B340c@cls*) (cdr B340c@cls*))))))) B3409@f) B3404@cls B3405@cls*)))) B3401@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B33ff@t))) (B3048@syntax-dispatch B33ff@t '(_ any any . each-any)))) B33f9@t))) (B3048@syntax-dispatch B33f9@t '(_ any)))) B33f3@e))) '#f '#f))) (set! B2ff8@quote-transformer (lambda (B342b@e B342c@r B342d@mr) ((lambda (B3431@t) ((lambda (B3433@ls/false) (if B3433@ls/false (apply (lambda (B3435@datum) (list 'quote (B2e57@stx->datum B3435@datum))) B3433@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3431@t))) (B3048@syntax-dispatch B3431@t '(_ any)))) B342b@e))) (set! B2ffa@case-lambda-transformer (lambda (B3437@e B3438@r B3439@mr) ((lambda (B343d@t) ((lambda (B343f@ls/false) (if B343f@ls/false (apply (lambda (B3441@fmls* B3442@b* B3443@b**) (call-with-values (lambda () (B3072@chi-lambda-clause* B3437@e B3441@fmls* (map cons B3442@b* B3443@b**) B3438@r B3439@mr)) (lambda (B344b@B3448 B344c@B344a) ((lambda (B344f@body* B3450@fmls*) (B2da8@B2ce9@build-case-lambda '#f B3450@fmls* B344f@body*)) B344c@B344a B344b@B3448)))) B343f@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B343d@t))) (B3048@syntax-dispatch B343d@t '(_ . #(each (any any . each-any)))))) B3437@e))) (set! B2ffc@lambda-transformer (lambda (B3453@e B3454@r B3455@mr) ((lambda (B3459@t) ((lambda (B345b@ls/false) (if B345b@ls/false (apply (lambda (B345d@fmls B345e@b B345f@b*) (call-with-values (lambda () (B3070@chi-lambda-clause B3453@e B345d@fmls (cons B345e@b B345f@b*) B3454@r B3455@mr)) (lambda (B3467@B3464 B3468@B3466) ((lambda (B346b@body B346c@fmls) (B2da7@B2ce7@build-lambda '#f B346c@fmls B346b@body)) B3468@B3466 B3467@B3464)))) B345b@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3459@t))) (B3048@syntax-dispatch B3459@t '(_ any any . each-any)))) B3453@e))) (set! B2ffe@bless (lambda (B346f@x) (B2e2b@mkstx ((letrec ((B3471@f (lambda (B3473@x) (if (B2e0f@stx? B3473@x) B3473@x (if (pair? B3473@x) (cons (B3471@f (car B3473@x)) (B3471@f (cdr B3473@x))) (if (symbol? B3473@x) (B2fd2@scheme-stx B3473@x) (if (vector? B3473@x) (vector-map B3471@f B3473@x) B3473@x))))))) B3471@f) B346f@x) '() '() '()))) (set! B3000@with-syntax-macro (lambda (B3475@e) ((lambda (B3477@t) ((lambda (B3479@ls/false) (if B3479@ls/false (apply (lambda (B347b@pat* B347c@expr* B347d@b B347e@b*) ((lambda (B3483@idn*) (begin (B306e@verify-formals (map car B3483@idn*) B3475@e) ((lambda (B3485@t*) (B2ffe@bless (list 'let (map list B3485@t* B347c@expr*) ((letrec ((B3487@f (lambda (B3489@pat* B348a@t*) (if (null? B3489@pat*) (cons 'begin (cons '#f (cons B347d@b B347e@b*))) (list 'syntax-case (car B348a@t*) '() (list (car B3489@pat*) (B3487@f (cdr B3489@pat*) (cdr B348a@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car B3489@pat*)) (car B348a@t*)))))))) B3487@f) B347b@pat* B3485@t*)))) (B3116@generate-temporaries B347c@expr*)))) ((letrec ((B348d@f (lambda (B348f@pat*) (if (null? B348f@pat*) '() (call-with-values (lambda () (B3046@convert-pattern (car B348f@pat*) '())) (lambda (B3495@B3492 B3496@B3494) ((lambda (B3499@idn* B349a@pat) (append B3499@idn* (B348d@f (cdr B348f@pat*)))) B3496@B3494 B3495@B3492))))))) B348d@f) B347b@pat*))) B3479@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3477@t))) (B3048@syntax-dispatch B3477@t '(_ #(each (any any)) any . each-any)))) B3475@e))) (set! B3002@invalid-fmls-error (lambda (B349d@stx B349e@fmls) ((lambda (B34a1@t) ((lambda (B34a3@ls/false) (if B34a3@ls/false (apply (lambda (B34a5@id* B34a6@last) ((letrec ((B34a9@f (lambda (B34ab@id*) (if (null? B34ab@id*) (values) (if (not (B2e43@id? (car B34ab@id*))) (B3128@syntax-violation '#f '"not an identifier" B349d@stx (car B34ab@id*)) (begin (B34a9@f (cdr B34ab@id*)) (if (B2e4f@bound-id-member? (car B34ab@id*) (cdr B34ab@id*)) (B3128@syntax-violation '#f '"duplicate binding" B349d@stx (car B34ab@id*)) (void)))))))) B34a9@f) (if (B2e43@id? B34a6@last) (cons B34a6@last B34a5@id*) (if (B2e39@syntax-null? B34a6@last) B34a5@id* (B3128@syntax-violation '#f '"not an identifier" B349d@stx B34a6@last))))) B34a3@ls/false) ((lambda (B34ad@t) ((lambda (B34af@ls/false) (if B34af@ls/false (apply (lambda () (B3128@syntax-violation '#f '"malformed binding form" B349d@stx B349e@fmls)) B34af@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B34ad@t))) (B3048@syntax-dispatch B34ad@t '_))) B34a1@t))) (B3048@syntax-dispatch B34a1@t '#(each+ any () any)))) B349e@fmls))) (set! B3004@let-macro (lambda (B34b1@stx) ((lambda (B34b3@t) ((lambda (B34b5@ls/false) (if B34b5@ls/false (apply (lambda (B34b7@lhs* B34b8@rhs* B34b9@b B34ba@b*) (if (B2e4b@valid-bound-ids? B34b7@lhs*) (B2ffe@bless (cons (cons 'lambda (cons B34b7@lhs* (cons B34b9@b B34ba@b*))) B34b8@rhs*)) (B3002@invalid-fmls-error B34b1@stx B34b7@lhs*))) B34b5@ls/false) ((lambda (B34bf@t) ((lambda (B34c1@ls/false) (if (and B34c1@ls/false (apply (lambda (B34c3@f B34c4@lhs* B34c5@rhs* B34c6@b B34c7@b*) (B2e43@id? B34c3@f)) B34c1@ls/false)) (apply (lambda (B34cd@f B34ce@lhs* B34cf@rhs* B34d0@b B34d1@b*) (if (B2e4b@valid-bound-ids? B34ce@lhs*) (B2ffe@bless (cons (list 'letrec (list (list B34cd@f (cons 'lambda (cons B34ce@lhs* (cons B34d0@b B34d1@b*))))) B34cd@f) B34cf@rhs*)) (B3002@invalid-fmls-error B34b1@stx B34ce@lhs*))) B34c1@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B34bf@t))) (B3048@syntax-dispatch B34bf@t '(_ any #(each (any any)) any . each-any)))) B34b3@t))) (B3048@syntax-dispatch B34b3@t '(_ #(each (any any)) any . each-any)))) B34b1@stx))) (set! B3006@let-values-macro (lambda (B34d7@stx) ((lambda (B34da@rename B34dc@rename*) (begin (set! B34da@rename (lambda (B353f@x B3540@old* B3541@new*) (begin (if (not (B2e43@id? B353f@x)) (B3128@syntax-violation '#f '"not an indentifier" B34d7@stx B353f@x) (void)) (if (B2e4f@bound-id-member? B353f@x B3540@old*) (B3128@syntax-violation '#f '"duplicate binding" B34d7@stx B353f@x) (void)) ((lambda (B3545@y) (values B3545@y (cons B353f@x B3540@old*) (cons B3545@y B3541@new*))) (gensym (B312e@syntax->datum B353f@x)))))) (set! B34dc@rename* (lambda (B352d@x* B352e@old* B352f@new*) (if (null? B352d@x*) (values '() B352e@old* B352f@new*) (call-with-values (lambda () (B34da@rename (car B352d@x*) B352e@old* B352f@new*)) (lambda (B3533@x B3534@old* B3535@new*) (call-with-values (lambda () (B34dc@rename* (cdr B352d@x*) B3534@old* B3535@new*)) (lambda (B3539@x* B353a@old* B353b@new*) (values (cons B3533@x B3539@x*) B353a@old* B353b@new*)))))))) ((lambda (B34dd@t) ((lambda (B34df@ls/false) (if B34df@ls/false (apply (lambda (B34e1@b B34e2@b*) (cons* (B2ffe@bless 'let) '() B34e1@b B34e2@b*)) B34df@ls/false) ((lambda (B34e5@t) ((lambda (B34e7@ls/false) (if B34e7@ls/false (apply (lambda (B34e9@lhs* B34ea@rhs* B34eb@b B34ec@b*) (B2ffe@bless ((letrec ((B34f1@f (lambda (B34f3@lhs* B34f4@rhs* B34f5@old* B34f6@new*) (if (null? B34f3@lhs*) (cons 'let (cons (map list B34f5@old* B34f6@new*) (cons B34eb@b B34ec@b*))) ((lambda (B34fb@t) ((lambda (B34fd@ls/false) (if B34fd@ls/false (apply (lambda (B34ff@x*) (call-with-values (lambda () (B34dc@rename* B34ff@x* B34f5@old* B34f6@new*)) (lambda (B3507@B3502 B3508@B3504 B3509@B3506) ((lambda (B350d@new* B350e@old* B350f@y*) (list 'call-with-values (list 'lambda '() (car B34f4@rhs*)) (list 'lambda B350f@y* (B34f1@f (cdr B34f3@lhs*) (cdr B34f4@rhs*) B350e@old* B350d@new*)))) B3509@B3506 B3508@B3504 B3507@B3502)))) B34fd@ls/false) ((lambda (B3513@t) ((lambda (B3515@ls/false) (if B3515@ls/false (apply (lambda (B3517@x* B3518@x) (call-with-values (lambda () (B34da@rename B3518@x B34f5@old* B34f6@new*)) (lambda (B351b@y B351c@old* B351d@new*) (call-with-values (lambda () (B34dc@rename* B3517@x* B351c@old* B351d@new*)) (lambda (B3521@y* B3522@old* B3523@new*) (list 'call-with-values (list 'lambda '() (car B34f4@rhs*)) (list 'lambda (append B3521@y* B351b@y) (B34f1@f (cdr B34f3@lhs*) (cdr B34f4@rhs*) B3522@old* B3523@new*)))))))) B3515@ls/false) ((lambda (B3527@t) ((lambda (B3529@ls/false) (if B3529@ls/false (apply (lambda (B352b@others) (B3128@syntax-violation '#f '"malformed bindings" B34d7@stx B352b@others)) B3529@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3527@t))) (B3048@syntax-dispatch B3527@t 'any))) B3513@t))) (B3048@syntax-dispatch B3513@t '#(each+ any () any)))) B34fb@t))) (B3048@syntax-dispatch B34fb@t 'each-any))) (car B34f3@lhs*)))))) B34f1@f) B34e9@lhs* B34ea@rhs* '() '()))) B34e7@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B34e5@t))) (B3048@syntax-dispatch B34e5@t '(_ #(each (any any)) any . each-any)))) B34dd@t))) (B3048@syntax-dispatch B34dd@t '(_ () any . each-any)))) B34d7@stx))) '#f '#f))) (set! B3008@let*-values-macro (lambda (B3547@stx) ((lambda (B354a@check) (begin (set! B354a@check (lambda (B3579@x*) (if (not (null? B3579@x*)) ((lambda (B357b@x) (begin (if (not (B2e43@id? B357b@x)) (B3128@syntax-violation '#f '"not an identifier" B3547@stx B357b@x) (void)) (B354a@check (cdr B3579@x*)) (if (B2e4f@bound-id-member? B357b@x (cdr B3579@x*)) (B3128@syntax-violation '#f '"duplicate identifier" B3547@stx B357b@x) (void)))) (car B3579@x*)) (void)))) ((lambda (B354b@t) ((lambda (B354d@ls/false) (if B354d@ls/false (apply (lambda (B354f@b B3550@b*) (cons* (B2ffe@bless 'let) '() B354f@b B3550@b*)) B354d@ls/false) ((lambda (B3553@t) ((lambda (B3555@ls/false) (if B3555@ls/false (apply (lambda (B3557@lhs* B3558@rhs* B3559@b B355a@b*) (B2ffe@bless ((letrec ((B355f@f (lambda (B3561@lhs* B3562@rhs*) (if (null? B3561@lhs*) (cons 'begin (cons B3559@b B355a@b*)) ((lambda (B3565@t) ((lambda (B3567@ls/false) (if B3567@ls/false (apply (lambda (B3569@x*) (begin (B354a@check B3569@x*) (list 'call-with-values (list 'lambda '() (car B3562@rhs*)) (list 'lambda B3569@x* (B355f@f (cdr B3561@lhs*) (cdr B3562@rhs*)))))) B3567@ls/false) ((lambda (B356b@t) ((lambda (B356d@ls/false) (if B356d@ls/false (apply (lambda (B356f@x* B3570@x) (begin (B354a@check (cons B3570@x B356f@x*)) (list 'call-with-values (list 'lambda '() (car B3562@rhs*)) (list 'lambda (append B356f@x* B3570@x) (B355f@f (cdr B3561@lhs*) (cdr B3562@rhs*)))))) B356d@ls/false) ((lambda (B3573@t) ((lambda (B3575@ls/false) (if B3575@ls/false (apply (lambda (B3577@others) (B3128@syntax-violation '#f '"malformed bindings" B3547@stx B3577@others)) B3575@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3573@t))) (B3048@syntax-dispatch B3573@t 'any))) B356b@t))) (B3048@syntax-dispatch B356b@t '#(each+ any () any)))) B3565@t))) (B3048@syntax-dispatch B3565@t 'each-any))) (car B3561@lhs*)))))) B355f@f) B3557@lhs* B3558@rhs*))) B3555@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3553@t))) (B3048@syntax-dispatch B3553@t '(_ #(each (any any)) any . each-any)))) B354b@t))) (B3048@syntax-dispatch B354b@t '(_ () any . each-any)))) B3547@stx))) '#f))) (set! B300a@trace-lambda-macro (lambda (B357d@stx) ((lambda (B357f@t) ((lambda (B3581@ls/false) (if B3581@ls/false (apply (lambda (B3583@who B3584@fmls B3585@b B3586@b*) (if (B2e4b@valid-bound-ids? B3584@fmls) (B2ffe@bless (list 'make-traced-procedure (list 'quote B3583@who) (cons 'lambda (cons B3584@fmls (cons B3585@b B3586@b*))))) (B3002@invalid-fmls-error B357d@stx B3584@fmls))) B3581@ls/false) ((lambda (B358b@t) ((lambda (B358d@ls/false) (if B358d@ls/false (apply (lambda (B358f@who B3590@fmls B3591@last B3592@b B3593@b*) (if (B2e4b@valid-bound-ids? (cons B3591@last B3590@fmls)) (B2ffe@bless (list 'make-traced-procedure (list 'quote B358f@who) (cons 'lambda (cons (append B3590@fmls B3591@last) (cons B3592@b B3593@b*))))) (B3002@invalid-fmls-error B357d@stx (append B3590@fmls B3591@last)))) B358d@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B358b@t))) (B3048@syntax-dispatch B358b@t '(_ any #(each+ any () any) any . each-any)))) B357f@t))) (B3048@syntax-dispatch B357f@t '(_ any each-any any . each-any)))) B357d@stx))) (set! B300c@trace-define-macro (lambda (B3599@stx) ((lambda (B359b@t) ((lambda (B359d@ls/false) (if B359d@ls/false (apply (lambda (B359f@who B35a0@fmls B35a1@b B35a2@b*) (if (B2e4b@valid-bound-ids? B35a0@fmls) (B2ffe@bless (list 'define B359f@who (list 'make-traced-procedure (list 'quote B359f@who) (cons 'lambda (cons B35a0@fmls (cons B35a1@b B35a2@b*)))))) (B3002@invalid-fmls-error B3599@stx B35a0@fmls))) B359d@ls/false) ((lambda (B35a7@t) ((lambda (B35a9@ls/false) (if B35a9@ls/false (apply (lambda (B35ab@who B35ac@fmls B35ad@last B35ae@b B35af@b*) (if (B2e4b@valid-bound-ids? (cons B35ad@last B35ac@fmls)) (B2ffe@bless (list 'define B35ab@who (list 'make-traced-procedure (list 'quote B35ab@who) (cons 'lambda (cons (append B35ac@fmls B35ad@last) (cons B35ae@b B35af@b*)))))) (B3002@invalid-fmls-error B3599@stx (append B35ac@fmls B35ad@last)))) B35a9@ls/false) ((lambda (B35b5@t) ((lambda (B35b7@ls/false) (if B35b7@ls/false (apply (lambda (B35b9@who B35ba@expr) (if (B2e43@id? B35b9@who) (B2ffe@bless (list 'define B35b9@who (list 'let (list (list 'v B35ba@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote B35b9@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (B3128@syntax-violation '#f '"invalid name" B3599@stx))) B35b7@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B35b5@t))) (B3048@syntax-dispatch B35b5@t '(_ any any)))) B35a7@t))) (B3048@syntax-dispatch B35a7@t '(_ (any . #(each+ any () any)) any . each-any)))) B359b@t))) (B3048@syntax-dispatch B359b@t '(_ (any . each-any) any . each-any)))) B3599@stx))) (set! B300e@trace-define-syntax-macro (lambda (B35bd@stx) ((lambda (B35bf@t) ((lambda (B35c1@ls/false) (if B35c1@ls/false (apply (lambda (B35c3@who B35c4@expr) (if (B2e43@id? B35c3@who) (B2ffe@bless (list 'define-syntax B35c3@who (list 'make-traced-macro (list 'quote B35c3@who) B35c4@expr))) (B3128@syntax-violation '#f '"invalid name" B35bd@stx))) B35c1@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B35bf@t))) (B3048@syntax-dispatch B35bf@t '(_ any any)))) B35bd@stx))) (set! B3010@trace-let/rec-syntax (lambda (B35c7@who) (lambda (B35c9@stx) ((lambda (B35cb@t) ((lambda (B35cd@ls/false) (if B35cd@ls/false (apply (lambda (B35cf@lhs* B35d0@rhs* B35d1@b B35d2@b*) (if (B2e4b@valid-bound-ids? B35cf@lhs*) ((lambda (B35d7@rhs*) (B2ffe@bless (cons B35c7@who (cons (map list B35cf@lhs* B35d7@rhs*) (cons B35d1@b B35d2@b*))))) (map (lambda (B35d9@lhs B35da@rhs) (list 'make-traced-macro (list 'quote B35d9@lhs) B35da@rhs)) B35cf@lhs* B35d0@rhs*)) (B3002@invalid-fmls-error B35c9@stx B35cf@lhs*))) B35cd@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B35cb@t))) (B3048@syntax-dispatch B35cb@t '(_ #(each (any any)) any . each-any)))) B35c9@stx)))) (set! B3012@trace-let-syntax-macro (B3010@trace-let/rec-syntax 'let-syntax)) (set! B3014@trace-letrec-syntax-macro (B3010@trace-let/rec-syntax 'letrec-syntax)) (set! B3016@guard-macro (lambda (B35dd@x) ((lambda (B35e0@gen-clauses) (begin (set! B35e0@gen-clauses (lambda (B35f7@con B35f8@outerk B35f9@clause*) ((lambda (B35fe@f B3600@f*) (begin (set! B35fe@f (lambda (B3637@x B3638@k) ((lambda (B363b@t) ((lambda (B363d@ls/false) (if B363d@ls/false (apply (lambda (B363f@e B3640@p) ((lambda (B3643@t) (list 'let (list (list B3643@t B363f@e)) (list 'if B3643@t (list B3640@p B3643@t) B3638@k))) (gensym))) B363d@ls/false) ((lambda (B3645@t) ((lambda (B3647@ls/false) (if B3647@ls/false (apply (lambda (B3649@e) ((lambda (B364b@t) (list 'let (list (list B364b@t B3649@e)) (list 'if B364b@t B364b@t B3638@k))) (gensym))) B3647@ls/false) ((lambda (B364d@t) ((lambda (B364f@ls/false) (if B364f@ls/false (apply (lambda (B3651@e B3652@v B3653@v*) (list 'if B3651@e (cons 'begin (cons B3652@v B3653@v*)) B3638@k)) B364f@ls/false) ((lambda (B3657@t) ((lambda (B3659@ls/false) (if B3659@ls/false (apply (lambda () (B3128@syntax-violation '#f '"invalid guard clause" B3637@x)) B3659@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3657@t))) (B3048@syntax-dispatch B3657@t '_))) B364d@t))) (B3048@syntax-dispatch B364d@t '(any any . each-any)))) B3645@t))) (B3048@syntax-dispatch B3645@t '(any)))) B363b@t))) (B3048@syntax-dispatch B363b@t '(any #(scheme-id =>) any)))) B3637@x))) (set! B3600@f* (lambda (B360d@x*) ((lambda (B360f@t) ((lambda (B3611@ls/false) (if B3611@ls/false (apply (lambda () ((lambda (B3613@g) (values (list B3613@g (list 'lambda '() (list 'raise-continuable B35f7@con))) B3613@g)) (gensym))) B3611@ls/false) ((lambda (B3615@t) ((lambda (B3617@ls/false) (if B3617@ls/false (apply (lambda (B3619@e B361a@e*) (values (cons 'begin (cons B3619@e B361a@e*)) '#f)) B3617@ls/false) ((lambda (B361d@t) ((lambda (B361f@ls/false) (if B361f@ls/false (apply (lambda (B3621@cls B3622@cls*) (call-with-values (lambda () (B3600@f* B3622@cls*)) (lambda (B3629@B3626 B362a@B3628) ((lambda (B362d@g B362e@e) (values (B35fe@f B3621@cls B362e@e) B362d@g)) B362a@B3628 B3629@B3626)))) B361f@ls/false) ((lambda (B3631@t) ((lambda (B3633@ls/false) (if B3633@ls/false (apply (lambda (B3635@others) (B3128@syntax-violation '#f '"invalid guard clause" B3635@others)) B3633@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3631@t))) (B3048@syntax-dispatch B3631@t 'any))) B361d@t))) (B3048@syntax-dispatch B361d@t '(any . any)))) B3615@t))) (B3048@syntax-dispatch B3615@t '((#(scheme-id else) any . each-any))))) B360f@t))) (B3048@syntax-dispatch B360f@t '()))) B360d@x*))) (call-with-values (lambda () (B3600@f* B35f9@clause*)) (lambda (B3605@B3602 B3606@B3604) ((lambda (B3609@raisek B360a@code) (if B3609@raisek (list (list 'call/cc (list 'lambda (list B3609@raisek) (list B35f8@outerk (list 'lambda '() B360a@code))))) (list B35f8@outerk (list 'lambda '() B360a@code)))) B3606@B3604 B3605@B3602))))) '#f '#f))) ((lambda (B35e1@t) ((lambda (B35e3@ls/false) (if (and B35e3@ls/false (apply (lambda (B35e5@con B35e6@clause* B35e7@b B35e8@b*) (B2e43@id? B35e5@con)) B35e3@ls/false)) (apply (lambda (B35ed@con B35ee@clause* B35ef@b B35f0@b*) ((lambda (B35f5@outerk) (B2ffe@bless (list (list 'call/cc (list 'lambda (list B35f5@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list B35ed@con) (B35e0@gen-clauses B35ed@con B35f5@outerk B35ee@clause*)) (cons 'lambda (cons '() (cons B35ef@b B35f0@b*)))))))))) (gensym))) B35e3@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B35e1@t))) (B3048@syntax-dispatch B35e1@t '(_ (any . each-any) any . each-any)))) B35dd@x))) '#f))) (set! B3018@define-enumeration-macro (lambda (B365b@stx) ((lambda (B365e@set? B3660@remove-dups) (begin (set! B365e@set? (lambda (B3677@x) (or (null? B3677@x) (and (not (memq (car B3677@x) (cdr B3677@x))) (B365e@set? (cdr B3677@x)))))) (set! B3660@remove-dups (lambda (B3675@ls) (if (null? B3675@ls) '() (cons (car B3675@ls) (B3660@remove-dups (remq (car B3675@ls) (cdr B3675@ls))))))) ((lambda (B3661@t) ((lambda (B3663@ls/false) (if (and B3663@ls/false (apply (lambda (B3665@name B3666@id* B3667@maker) (and (B2e43@id? B3665@name) (B2e43@id? B3667@maker) (for-all B2e43@id? B3666@id*))) B3663@ls/false)) (apply (lambda (B366b@name B366c@id* B366d@maker) ((lambda (B3671@name* B3672@mk) (B2ffe@bless (list 'begin (list 'define B3672@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote B3671@name*)))) (list 'define-syntax B366b@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote B3671@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote B366b@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax B366d@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote B366d@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote B3671@name*)) (cons 'syntax-violation (cons (list 'quote B366d@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons B3672@mk '('(n* ...)))))))))))) (B3660@remove-dups (B312e@syntax->datum B366c@id*)) (gensym))) B3663@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3661@t))) (B3048@syntax-dispatch B3661@t '(_ any each-any any)))) B365b@stx))) '#f '#f))) (set! B301a@time-macro (lambda (B3679@stx) ((lambda (B367b@t) ((lambda (B367d@ls/false) (if B367d@ls/false (apply (lambda (B367f@expr) (B2ffe@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() B367f@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) B367d@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B367b@t))) (B3048@syntax-dispatch B367b@t '(_ any)))) B3679@stx))) (set! B301c@delay-macro (lambda (B3681@stx) ((lambda (B3683@t) ((lambda (B3685@ls/false) (if B3685@ls/false (apply (lambda (B3687@expr) (B2ffe@bless (list 'make-promise (list 'lambda '() B3687@expr)))) B3685@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3683@t))) (B3048@syntax-dispatch B3683@t '(_ any)))) B3681@stx))) (set! B301e@assert-macro (lambda (B3689@stx) ((lambda (B368b@t) ((lambda (B368d@ls/false) (if B368d@ls/false (apply (lambda (B368f@expr) ((lambda (B3691@pos) (B2ffe@bless (list 'unless B368f@expr (list 'assertion-error (list 'quote B368f@expr) (list 'quote B3691@pos))))) (or (B3120@expression-position B3689@stx) (B3120@expression-position B368f@expr)))) B368d@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B368b@t))) (B3048@syntax-dispatch B368b@t '(_ any)))) B3689@stx))) (set! B3020@endianness-macro (lambda (B3693@stx) ((lambda (B3695@t) ((lambda (B3697@ls/false) (if B3697@ls/false (apply (lambda (B3699@e) ((lambda (B369b@t) (if (memv B369b@t '(little)) (B2ffe@bless ''little) (if (memv B369b@t '(big)) (B2ffe@bless ''big) (B3128@syntax-violation '#f '"endianness must be big or little" B3693@stx)))) (B312e@syntax->datum B3699@e))) B3697@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3695@t))) (B3048@syntax-dispatch B3695@t '(_ any)))) B3693@stx))) (set! B3022@identifier-syntax-macro (lambda (B369d@stx) ((lambda (B369f@t) ((lambda (B36a1@ls/false) (if B36a1@ls/false (apply (lambda (B36a3@expr) (B2ffe@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax B36a3@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax B36a3@expr) '((syntax (e* ...)))))))))) B36a1@ls/false) ((lambda (B36a5@t) ((lambda (B36a7@ls/false) (if (and B36a7@ls/false (apply (lambda (B36a9@id1 B36aa@expr1 B36ab@id2 B36ac@expr2 B36ad@expr3) (and (B2e43@id? B36a9@id1) (B2e43@id? B36ab@id2) (B2e43@id? B36ac@expr2))) B36a7@ls/false)) (apply (lambda (B36b3@id1 B36b4@expr1 B36b5@id2 B36b6@expr2 B36b7@expr3) (B2ffe@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax B36b4@expr1)) (list (list 'set! 'id B36b6@expr2) (list 'syntax B36b7@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons B36b4@expr1 '(e* ...))))))))) B36a7@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B36a5@t))) (B3048@syntax-dispatch B36a5@t '(_ (any any) ((#(scheme-id set!) any any) any))))) B369f@t))) (B3048@syntax-dispatch B369f@t '(_ any)))) B369d@stx))) (set! B3024@do-macro (lambda (B36bd@stx) ((lambda (B36c0@bind) (begin (set! B36c0@bind (lambda (B36d7@x) ((lambda (B36d9@t) ((lambda (B36db@ls/false) (if B36db@ls/false (apply (lambda (B36dd@x B36de@init) (list B36dd@x B36de@init B36dd@x)) B36db@ls/false) ((lambda (B36e1@t) ((lambda (B36e3@ls/false) (if B36e3@ls/false (apply (lambda (B36e5@x B36e6@init B36e7@step) (list B36e5@x B36e6@init B36e7@step)) B36e3@ls/false) ((lambda (B36eb@t) ((lambda (B36ed@ls/false) (if B36ed@ls/false (apply (lambda () (B3128@syntax-violation '#f '"invalid binding" B36bd@stx)) B36ed@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B36eb@t))) (B3048@syntax-dispatch B36eb@t '_))) B36e1@t))) (B3048@syntax-dispatch B36e1@t '(any any any)))) B36d9@t))) (B3048@syntax-dispatch B36d9@t '(any any)))) B36d7@x))) ((lambda (B36c1@t) ((lambda (B36c3@ls/false) (if B36c3@ls/false (apply (lambda (B36c5@binding* B36c6@test B36c7@expr* B36c8@command*) ((lambda (B36cd@t) ((lambda (B36cf@ls/false) (if B36cf@ls/false (apply (lambda (B36d1@x* B36d2@init* B36d3@step*) (if (B2e4b@valid-bound-ids? B36d1@x*) (B2ffe@bless (list 'letrec (list (list 'loop (list 'lambda B36d1@x* (list 'if B36c6@test (cons 'begin (cons '(if #f #f) B36c7@expr*)) (cons 'begin (append B36c8@command* (list (cons 'loop B36d3@step*)))))))) (cons 'loop B36d2@init*))) (B3128@syntax-violation '#f '"invalid bindings" B36bd@stx))) B36cf@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B36cd@t))) (B3048@syntax-dispatch B36cd@t '#(each (any any any))))) (map B36c0@bind B36c5@binding*))) B36c3@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B36c1@t))) (B3048@syntax-dispatch B36c1@t '(_ each-any (any . each-any) . each-any)))) B36bd@stx))) '#f))) (set! B3026@let*-macro (lambda (B36ef@stx) ((lambda (B36f1@t) ((lambda (B36f3@ls/false) (if (and B36f3@ls/false (apply (lambda (B36f5@lhs* B36f6@rhs* B36f7@b B36f8@b*) (for-all B2e43@id? B36f5@lhs*)) B36f3@ls/false)) (apply (lambda (B36fd@lhs* B36fe@rhs* B36ff@b B3700@b*) (B2ffe@bless ((letrec ((B3705@f (lambda (B3707@x*) (if (null? B3707@x*) (cons 'let (cons '() (cons B36ff@b B3700@b*))) (list 'let (list (car B3707@x*)) (B3705@f (cdr B3707@x*))))))) B3705@f) (map list B36fd@lhs* B36fe@rhs*)))) B36f3@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B36f1@t))) (B3048@syntax-dispatch B36f1@t '(_ #(each (any any)) any . each-any)))) B36ef@stx))) (set! B3028@or-macro (lambda (B3709@stx) ((lambda (B370b@t) ((lambda (B370d@ls/false) (if B370d@ls/false (apply (lambda () '#f) B370d@ls/false) ((lambda (B370f@t) ((lambda (B3711@ls/false) (if B3711@ls/false (apply (lambda (B3713@e B3714@e*) (B2ffe@bless ((letrec ((B3717@f (lambda (B3719@e B371a@e*) (if (null? B371a@e*) (list 'begin '#f B3719@e) (list 'let (list (list 't B3719@e)) (list 'if 't 't (B3717@f (car B371a@e*) (cdr B371a@e*)))))))) B3717@f) B3713@e B3714@e*))) B3711@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B370f@t))) (B3048@syntax-dispatch B370f@t '(_ any . each-any)))) B370b@t))) (B3048@syntax-dispatch B370b@t '(_)))) B3709@stx))) (set! B302a@and-macro (lambda (B371d@stx) ((lambda (B371f@t) ((lambda (B3721@ls/false) (if B3721@ls/false (apply (lambda () '#t) B3721@ls/false) ((lambda (B3723@t) ((lambda (B3725@ls/false) (if B3725@ls/false (apply (lambda (B3727@e B3728@e*) (B2ffe@bless ((letrec ((B372b@f (lambda (B372d@e B372e@e*) (if (null? B372e@e*) (list 'begin '#f B372d@e) (cons 'if (cons B372d@e (cons (B372b@f (car B372e@e*) (cdr B372e@e*)) '(#f)))))))) B372b@f) B3727@e B3728@e*))) B3725@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3723@t))) (B3048@syntax-dispatch B3723@t '(_ any . each-any)))) B371f@t))) (B3048@syntax-dispatch B371f@t '(_)))) B371d@stx))) (set! B302c@cond-macro (lambda (B3731@stx) ((lambda (B3733@t) ((lambda (B3735@ls/false) (if B3735@ls/false (apply (lambda (B3737@cls B3738@cls*) (B2ffe@bless ((letrec ((B373b@f (lambda (B373d@cls B373e@cls*) (if (null? B373e@cls*) ((lambda (B3741@t) ((lambda (B3743@ls/false) (if B3743@ls/false (apply (lambda (B3745@e B3746@e*) (cons 'begin (cons B3745@e B3746@e*))) B3743@ls/false) ((lambda (B3749@t) ((lambda (B374b@ls/false) (if B374b@ls/false (apply (lambda (B374d@e B374e@p) (list 'let (list (list 't B374d@e)) (list 'if 't (cons B374e@p '(t))))) B374b@ls/false) ((lambda (B3751@t) ((lambda (B3753@ls/false) (if B3753@ls/false (apply (lambda (B3755@e) (cons 'or (cons B3755@e '((if #f #f))))) B3753@ls/false) ((lambda (B3757@t) ((lambda (B3759@ls/false) (if B3759@ls/false (apply (lambda (B375b@e B375c@e*) (list 'if B375b@e (cons 'begin B375c@e*))) B3759@ls/false) ((lambda (B375f@t) ((lambda (B3761@ls/false) (if B3761@ls/false (apply (lambda () (B3128@syntax-violation '#f '"invalid last clause" B3731@stx)) B3761@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B375f@t))) (B3048@syntax-dispatch B375f@t '_))) B3757@t))) (B3048@syntax-dispatch B3757@t '(any . each-any)))) B3751@t))) (B3048@syntax-dispatch B3751@t '(any)))) B3749@t))) (B3048@syntax-dispatch B3749@t '(any #(scheme-id =>) any)))) B3741@t))) (B3048@syntax-dispatch B3741@t '(#(scheme-id else) any . each-any)))) B373d@cls) ((lambda (B3763@t) ((lambda (B3765@ls/false) (if B3765@ls/false (apply (lambda (B3767@e B3768@e*) (B3128@syntax-violation '#f '"incorrect position of keyword else" B3731@stx)) B3765@ls/false) ((lambda (B376b@t) ((lambda (B376d@ls/false) (if B376d@ls/false (apply (lambda (B376f@e B3770@p) (list 'let (list (list 't B376f@e)) (list 'if 't (cons B3770@p '(t)) (B373b@f (car B373e@cls*) (cdr B373e@cls*))))) B376d@ls/false) ((lambda (B3773@t) ((lambda (B3775@ls/false) (if B3775@ls/false (apply (lambda (B3777@e) (list 'or B3777@e (B373b@f (car B373e@cls*) (cdr B373e@cls*)))) B3775@ls/false) ((lambda (B3779@t) ((lambda (B377b@ls/false) (if B377b@ls/false (apply (lambda (B377d@e B377e@e*) (list 'if B377d@e (cons 'begin B377e@e*) (B373b@f (car B373e@cls*) (cdr B373e@cls*)))) B377b@ls/false) ((lambda (B3781@t) ((lambda (B3783@ls/false) (if B3783@ls/false (apply (lambda () (B3128@syntax-violation '#f '"invalid last clause" B3731@stx)) B3783@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3781@t))) (B3048@syntax-dispatch B3781@t '_))) B3779@t))) (B3048@syntax-dispatch B3779@t '(any . each-any)))) B3773@t))) (B3048@syntax-dispatch B3773@t '(any)))) B376b@t))) (B3048@syntax-dispatch B376b@t '(any #(scheme-id =>) any)))) B3763@t))) (B3048@syntax-dispatch B3763@t '(#(scheme-id else) any . each-any)))) B373d@cls))))) B373b@f) B3737@cls B3738@cls*))) B3735@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3733@t))) (B3048@syntax-dispatch B3733@t '(_ any . each-any)))) B3731@stx))) (set! B302e@do-include (lambda (B3785@stx B3786@id B3787@filename) ((lambda (B378b@filename) (begin (if (not (and (string? B378b@filename) (B2e43@id? B3786@id))) (B3128@syntax-violation '#f '"invalid syntax" B3785@stx) (void)) (cons (B2ffe@bless 'begin) (with-input-from-file B378b@filename (lambda () ((letrec ((B378d@f (lambda (B378f@ls) ((lambda (B3791@x) (if (eof-object? B3791@x) (reverse B378f@ls) (B378d@f (cons (B2e23@datum->stx B3786@id B3791@x) B378f@ls)))) (B2995@B2867@read-annotated))))) B378d@f) '())))))) (B2e57@stx->datum B3787@filename)))) (set! B3030@include-macro (lambda (B3793@e) ((lambda (B3795@t) ((lambda (B3797@ls/false) (if B3797@ls/false (apply (lambda (B3799@id B379a@filename) (B302e@do-include B3793@e B3799@id B379a@filename)) B3797@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3795@t))) (B3048@syntax-dispatch B3795@t '(any any)))) B3793@e))) (set! B3032@include-into-macro (lambda (B379d@e) ((lambda (B379f@t) ((lambda (B37a1@ls/false) (if B37a1@ls/false (apply (lambda (B37a3@id B37a4@filename) (B302e@do-include B379d@e B37a3@id B37a4@filename)) B37a1@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B379f@t))) (B3048@syntax-dispatch B379f@t '(_ any any)))) B379d@e))) (set! B3034@syntax-rules-macro (lambda (B37a7@e) ((lambda (B37a9@t) ((lambda (B37ab@ls/false) (if B37ab@ls/false (apply (lambda (B37ad@lits B37ae@pat* B37af@tmp*) (begin (B304e@verify-literals B37ad@lits B37a7@e) (B2ffe@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons B37ad@lits (map (lambda (B37b3@pat B37b4@tmp) ((lambda (B37b7@t) ((lambda (B37b9@ls/false) (if B37b9@ls/false (apply (lambda (B37bb@rest) (list (cons 'g B37bb@rest) (list 'syntax B37b4@tmp))) B37b9@ls/false) ((lambda (B37bd@t) ((lambda (B37bf@ls/false) (if B37bf@ls/false (apply (lambda () (B3128@syntax-violation '#f '"invalid syntax-rules pattern" B37a7@e B37b3@pat)) B37bf@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B37bd@t))) (B3048@syntax-dispatch B37bd@t '_))) B37b7@t))) (B3048@syntax-dispatch B37b7@t '(_ . any)))) B37b3@pat)) B37ae@pat* B37af@tmp*)))))))) B37ab@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B37a9@t))) (B3048@syntax-dispatch B37a9@t '(_ each-any . #(each (any any)))))) B37a7@e))) (set! B3036@quasiquote-macro ((lambda () ((lambda (B37c2@datum B37de@quasicons* B37e0@quasicons B37e2@quasiappend B37e4@quasivector B37e6@vquasi B37e8@quasi) (begin (set! B37c2@datum (lambda (B38c3@x) (list (B2fd2@scheme-stx 'quote) (B2e2b@mkstx B38c3@x '() '() '())))) (set! B37de@quasicons* (lambda (B38bb@x B38bc@y) ((letrec ((B38bf@f (lambda (B38c1@x) (if (null? B38c1@x) B38bc@y (B37e0@quasicons (car B38c1@x) (B38bf@f (cdr B38c1@x))))))) B38bf@f) B38bb@x))) (set! B37e0@quasicons (lambda (B3895@x B3896@y) ((lambda (B3899@t) ((lambda (B389b@ls/false) (if B389b@ls/false (apply (lambda (B389d@dy) ((lambda (B389f@t) ((lambda (B38a1@ls/false) (if B38a1@ls/false (apply (lambda (B38a3@dx) (list (B2fd2@scheme-stx 'quote) (cons B38a3@dx B389d@dy))) B38a1@ls/false) ((lambda (B38a5@t) ((lambda (B38a7@ls/false) (if B38a7@ls/false (apply (lambda () ((lambda (B38a9@t) ((lambda (B38ab@ls/false) (if B38ab@ls/false (apply (lambda () (list (B2fd2@scheme-stx 'list) B3895@x)) B38ab@ls/false) ((lambda (B38ad@t) ((lambda (B38af@ls/false) (if B38af@ls/false (apply (lambda () (list (B2fd2@scheme-stx 'cons) B3895@x B3896@y)) B38af@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B38ad@t))) (B3048@syntax-dispatch B38ad@t '_))) B38a9@t))) (B3048@syntax-dispatch B38a9@t '()))) B389d@dy)) B38a7@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B38a5@t))) (B3048@syntax-dispatch B38a5@t '_))) B389f@t))) (B3048@syntax-dispatch B389f@t '(#(scheme-id quote) any)))) B3895@x)) B389b@ls/false) ((lambda (B38b1@t) ((lambda (B38b3@ls/false) (if B38b3@ls/false (apply (lambda (B38b5@stuff) (cons* (B2fd2@scheme-stx 'list) B3895@x B38b5@stuff)) B38b3@ls/false) ((lambda (B38b7@t) ((lambda (B38b9@ls/false) (if B38b9@ls/false (apply (lambda () (list (B2fd2@scheme-stx 'cons) B3895@x B3896@y)) B38b9@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B38b7@t))) (B3048@syntax-dispatch B38b7@t '_))) B38b1@t))) (B3048@syntax-dispatch B38b1@t '(#(scheme-id list) . each-any)))) B3899@t))) (B3048@syntax-dispatch B3899@t '(#(scheme-id quote) any)))) B3896@y))) (set! B37e2@quasiappend (lambda (B387b@x B387c@y) ((lambda (B387f@ls) (if (null? B387f@ls) (list (B2fd2@scheme-stx 'quote) '()) (if (null? (cdr B387f@ls)) (car B387f@ls) (cons* (B2fd2@scheme-stx 'append) B387f@ls)))) ((letrec ((B3881@f (lambda (B3883@x) (if (null? B3883@x) ((lambda (B3885@t) ((lambda (B3887@ls/false) (if B3887@ls/false (apply (lambda () '()) B3887@ls/false) ((lambda (B3889@t) ((lambda (B388b@ls/false) (if B388b@ls/false (apply (lambda () (list B387c@y)) B388b@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3889@t))) (B3048@syntax-dispatch B3889@t '_))) B3885@t))) (B3048@syntax-dispatch B3885@t '(#(scheme-id quote) ())))) B387c@y) ((lambda (B388d@t) ((lambda (B388f@ls/false) (if B388f@ls/false (apply (lambda () (B3881@f (cdr B3883@x))) B388f@ls/false) ((lambda (B3891@t) ((lambda (B3893@ls/false) (if B3893@ls/false (apply (lambda () (cons (car B3883@x) (B3881@f (cdr B3883@x)))) B3893@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3891@t))) (B3048@syntax-dispatch B3891@t '_))) B388d@t))) (B3048@syntax-dispatch B388d@t '(#(scheme-id quote) ())))) (car B3883@x)))))) B3881@f) B387b@x)))) (set! B37e4@quasivector (lambda (B3849@x) ((lambda (B384b@pat-x) ((lambda (B384d@t) ((lambda (B384f@ls/false) (if B384f@ls/false (apply (lambda (B3851@x*) (list (B2fd2@scheme-stx 'quote) (list->vector B3851@x*))) B384f@ls/false) ((lambda (B3853@t) ((lambda (B3855@ls/false) (if B3855@ls/false (apply (lambda () ((letrec ((B3857@f (lambda (B3859@x B385a@k) ((lambda (B385d@t) ((lambda (B385f@ls/false) (if B385f@ls/false (apply (lambda (B3861@x*) (B385a@k (map (lambda (B3863@x) (list (B2fd2@scheme-stx 'quote) B3863@x)) B3861@x*))) B385f@ls/false) ((lambda (B3865@t) ((lambda (B3867@ls/false) (if B3867@ls/false (apply (lambda (B3869@x*) (B385a@k B3869@x*)) B3867@ls/false) ((lambda (B386b@t) ((lambda (B386d@ls/false) (if B386d@ls/false (apply (lambda (B386f@x B3870@y) (B3857@f B3870@y (lambda (B3873@ls) (B385a@k (cons B386f@x B3873@ls))))) B386d@ls/false) ((lambda (B3875@t) ((lambda (B3877@ls/false) (if B3877@ls/false (apply (lambda () (list (B2fd2@scheme-stx 'list->vector) B384b@pat-x)) B3877@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3875@t))) (B3048@syntax-dispatch B3875@t '_))) B386b@t))) (B3048@syntax-dispatch B386b@t '(#(scheme-id cons) any any)))) B3865@t))) (B3048@syntax-dispatch B3865@t '(#(scheme-id list) . each-any)))) B385d@t))) (B3048@syntax-dispatch B385d@t '(#(scheme-id quote) each-any)))) B3859@x)))) B3857@f) B3849@x (lambda (B3879@ls) (cons* (B2fd2@scheme-stx 'vector) B3879@ls)))) B3855@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3853@t))) (B3048@syntax-dispatch B3853@t '_))) B384d@t))) (B3048@syntax-dispatch B384d@t '(#(scheme-id quote) each-any)))) B384b@pat-x)) B3849@x))) (set! B37e6@vquasi (lambda (B3827@p B3828@lev) ((lambda (B382b@t) ((lambda (B382d@ls/false) (if B382d@ls/false (apply (lambda (B382f@p B3830@q) ((lambda (B3833@t) ((lambda (B3835@ls/false) (if B3835@ls/false (apply (lambda (B3837@p) (if (= B3828@lev '0) (B37de@quasicons* B3837@p (B37e6@vquasi B3830@q B3828@lev)) (B37e0@quasicons (B37e0@quasicons (B37c2@datum 'unquote) (B37e8@quasi B3837@p (- B3828@lev '1))) (B37e6@vquasi B3830@q B3828@lev)))) B3835@ls/false) ((lambda (B3839@t) ((lambda (B383b@ls/false) (if B383b@ls/false (apply (lambda (B383d@p) (if (= B3828@lev '0) (B37e2@quasiappend B383d@p (B37e6@vquasi B3830@q B3828@lev)) (B37e0@quasicons (B37e0@quasicons (B37c2@datum 'unquote-splicing) (B37e8@quasi B383d@p (- B3828@lev '1))) (B37e6@vquasi B3830@q B3828@lev)))) B383b@ls/false) ((lambda (B383f@t) ((lambda (B3841@ls/false) (if B3841@ls/false (apply (lambda (B3843@p) (B37e0@quasicons (B37e8@quasi B3843@p B3828@lev) (B37e6@vquasi B3830@q B3828@lev))) B3841@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B383f@t))) (B3048@syntax-dispatch B383f@t 'any))) B3839@t))) (B3048@syntax-dispatch B3839@t '(#(scheme-id unquote-splicing) . each-any)))) B3833@t))) (B3048@syntax-dispatch B3833@t '(#(scheme-id unquote) . each-any)))) B382f@p)) B382d@ls/false) ((lambda (B3845@t) ((lambda (B3847@ls/false) (if B3847@ls/false (apply (lambda () (list (B2fd2@scheme-stx 'quote) '())) B3847@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3845@t))) (B3048@syntax-dispatch B3845@t '()))) B382b@t))) (B3048@syntax-dispatch B382b@t '(any . any)))) B3827@p))) (set! B37e8@quasi (lambda (B37f1@p B37f2@lev) ((lambda (B37f5@t) ((lambda (B37f7@ls/false) (if B37f7@ls/false (apply (lambda (B37f9@p) (if (= B37f2@lev '0) B37f9@p (B37e0@quasicons (B37c2@datum 'unquote) (B37e8@quasi (list B37f9@p) (- B37f2@lev '1))))) B37f7@ls/false) ((lambda (B37fb@t) ((lambda (B37fd@ls/false) (if B37fd@ls/false (apply (lambda (B37ff@p B3800@q) (if (= B37f2@lev '0) (B37de@quasicons* B37ff@p (B37e8@quasi B3800@q B37f2@lev)) (B37e0@quasicons (B37e0@quasicons (B37c2@datum 'unquote) (B37e8@quasi B37ff@p (- B37f2@lev '1))) (B37e8@quasi B3800@q B37f2@lev)))) B37fd@ls/false) ((lambda (B3803@t) ((lambda (B3805@ls/false) (if B3805@ls/false (apply (lambda (B3807@p B3808@q) (if (= B37f2@lev '0) (B37e2@quasiappend B3807@p (B37e8@quasi B3808@q B37f2@lev)) (B37e0@quasicons (B37e0@quasicons (B37c2@datum 'unquote-splicing) (B37e8@quasi B3807@p (- B37f2@lev '1))) (B37e8@quasi B3808@q B37f2@lev)))) B3805@ls/false) ((lambda (B380b@t) ((lambda (B380d@ls/false) (if B380d@ls/false (apply (lambda (B380f@p) (B37e0@quasicons (B37c2@datum 'quasiquote) (B37e8@quasi (list B380f@p) (+ B37f2@lev '1)))) B380d@ls/false) ((lambda (B3811@t) ((lambda (B3813@ls/false) (if B3813@ls/false (apply (lambda (B3815@p B3816@q) (B37e0@quasicons (B37e8@quasi B3815@p B37f2@lev) (B37e8@quasi B3816@q B37f2@lev))) B3813@ls/false) ((lambda (B3819@t) ((lambda (B381b@ls/false) (if (and B381b@ls/false (apply (lambda (B381d@x) (not (B2e0f@stx? B381d@x))) B381b@ls/false)) (apply (lambda (B381f@x) (B37e4@quasivector (B37e6@vquasi B381f@x B37f2@lev))) B381b@ls/false) ((lambda (B3821@t) ((lambda (B3823@ls/false) (if B3823@ls/false (apply (lambda (B3825@p) (list (B2fd2@scheme-stx 'quote) B3825@p)) B3823@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3821@t))) (B3048@syntax-dispatch B3821@t 'any))) B3819@t))) (B3048@syntax-dispatch B3819@t '#(vector each-any)))) B3811@t))) (B3048@syntax-dispatch B3811@t '(any . any)))) B380b@t))) (B3048@syntax-dispatch B380b@t '(#(scheme-id quasiquote) any)))) B3803@t))) (B3048@syntax-dispatch B3803@t '((#(scheme-id unquote-splicing) . each-any) . any)))) B37fb@t))) (B3048@syntax-dispatch B37fb@t '((#(scheme-id unquote) . each-any) . any)))) B37f5@t))) (B3048@syntax-dispatch B37f5@t '(#(scheme-id unquote) any)))) B37f1@p))) (lambda (B37e9@x) ((lambda (B37eb@t) ((lambda (B37ed@ls/false) (if B37ed@ls/false (apply (lambda (B37ef@e) (B37e8@quasi B37ef@e '0)) B37ed@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B37eb@t))) (B3048@syntax-dispatch B37eb@t '(_ any)))) B37e9@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! B3038@quasisyntax-macro ((lambda () ((lambda (B38c6@quasi) (begin (set! B38c6@quasi (lambda (B38e1@p B38e2@lev) ((lambda (B38e5@t) ((lambda (B38e7@ls/false) (if B38e7@ls/false (apply (lambda (B38e9@p) (if (= B38e2@lev '0) ((lambda (B38eb@g) (values (list B38eb@g) (list B38e9@p) B38eb@g)) (gensym)) (call-with-values (lambda () (B38c6@quasi B38e9@p (- B38e2@lev '1))) (lambda (B38f3@B38ee B38f4@B38f0 B38f5@B38f2) ((lambda (B38f9@p B38fa@rhs* B38fb@lhs*) (values B38fb@lhs* B38fa@rhs* (list 'unsyntax B38f9@p))) B38f5@B38f2 B38f4@B38f0 B38f3@B38ee))))) B38e7@ls/false) ((lambda (B38ff@t) ((lambda (B3901@ls/false) (if (and B3901@ls/false (apply (lambda () (= B38e2@lev '0)) B3901@ls/false)) (apply (lambda () (B3128@syntax-violation '#f '"incorrect use of unsyntax" B38e1@p)) B3901@ls/false) ((lambda (B3903@t) ((lambda (B3905@ls/false) (if B3905@ls/false (apply (lambda (B3907@p* B3908@q) (call-with-values (lambda () (B38c6@quasi B3908@q B38e2@lev)) (lambda (B3911@B390c B3912@B390e B3913@B3910) ((lambda (B3917@q B3918@rhs* B3919@lhs*) (if (= B38e2@lev '0) ((lambda (B391d@g*) (values (append B391d@g* B3919@lhs*) (append B3907@p* B3918@rhs*) (append B391d@g* B3917@q))) (map (lambda (B391f@x) (gensym)) B3907@p*)) (call-with-values (lambda () (B38c6@quasi B3907@p* (- B38e2@lev '1))) (lambda (B3927@B3922 B3928@B3924 B3929@B3926) ((lambda (B392d@p* B392e@rhs2* B392f@lhs2*) (values (append B392f@lhs2* B3919@lhs*) (append B392e@rhs2* B3918@rhs*) (cons (cons 'unsyntax B392d@p*) B3917@q))) B3929@B3926 B3928@B3924 B3927@B3922))))) B3913@B3910 B3912@B390e B3911@B390c)))) B3905@ls/false) ((lambda (B3933@t) ((lambda (B3935@ls/false) (if B3935@ls/false (apply (lambda (B3937@p* B3938@q) (call-with-values (lambda () (B38c6@quasi B3938@q B38e2@lev)) (lambda (B3941@B393c B3942@B393e B3943@B3940) ((lambda (B3947@q B3948@rhs* B3949@lhs*) (if (= B38e2@lev '0) ((lambda (B394d@g*) (values (append (map (lambda (B394f@g) (cons B394f@g '(...))) B394d@g*) B3949@lhs*) (append B3937@p* B3948@rhs*) (append (apply append (map (lambda (B3951@g) (cons B3951@g '(...))) B394d@g*)) B3947@q))) (map (lambda (B3953@x) (gensym)) B3937@p*)) (call-with-values (lambda () (B38c6@quasi B3937@p* (- B38e2@lev '1))) (lambda (B395b@B3956 B395c@B3958 B395d@B395a) ((lambda (B3961@p* B3962@rhs2* B3963@lhs2*) (values (append B3963@lhs2* B3949@lhs*) (append B3962@rhs2* B3948@rhs*) (cons (cons 'unsyntax-splicing B3961@p*) B3947@q))) B395d@B395a B395c@B3958 B395b@B3956))))) B3943@B3940 B3942@B393e B3941@B393c)))) B3935@ls/false) ((lambda (B3967@t) ((lambda (B3969@ls/false) (if (and B3969@ls/false (apply (lambda () (= B38e2@lev '0)) B3969@ls/false)) (apply (lambda () (B3128@syntax-violation '#f '"incorrect use of unsyntax-splicing" B38e1@p)) B3969@ls/false) ((lambda (B396b@t) ((lambda (B396d@ls/false) (if B396d@ls/false (apply (lambda (B396f@p) (call-with-values (lambda () (B38c6@quasi B396f@p (+ B38e2@lev '1))) (lambda (B3977@B3972 B3978@B3974 B3979@B3976) ((lambda (B397d@p B397e@rhs* B397f@lhs*) (values B397f@lhs* B397e@rhs* (list 'quasisyntax B397d@p))) B3979@B3976 B3978@B3974 B3977@B3972)))) B396d@ls/false) ((lambda (B3983@t) ((lambda (B3985@ls/false) (if B3985@ls/false (apply (lambda (B3987@p B3988@q) (call-with-values (lambda () (B38c6@quasi B3987@p B38e2@lev)) (lambda (B3997@B398c B3998@B398e B3999@B3990) (call-with-values (lambda () (B38c6@quasi B3988@q B38e2@lev)) (lambda (B399d@B3992 B399e@B3994 B399f@B3996) ((lambda (B39a3@q B39a4@rhs2* B39a5@lhs2* B39a6@p B39a7@rhs* B39a8@lhs*) (values (append B39a5@lhs2* B39a8@lhs*) (append B39a4@rhs2* B39a7@rhs*) (cons B39a6@p B39a3@q))) B399f@B3996 B399e@B3994 B399d@B3992 B3999@B3990 B3998@B398e B3997@B398c)))))) B3985@ls/false) ((lambda (B39af@t) ((lambda (B39b1@ls/false) (if B39b1@ls/false (apply (lambda (B39b3@x*) (call-with-values (lambda () (B38c6@quasi B39b3@x* B38e2@lev)) (lambda (B39bb@B39b6 B39bc@B39b8 B39bd@B39ba) ((lambda (B39c1@x* B39c2@rhs* B39c3@lhs*) (values B39c3@lhs* B39c2@rhs* (list->vector B39c1@x*))) B39bd@B39ba B39bc@B39b8 B39bb@B39b6)))) B39b1@ls/false) ((lambda (B39c7@t) ((lambda (B39c9@ls/false) (if B39c9@ls/false (apply (lambda () (values '() '() B38e1@p)) B39c9@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B39c7@t))) (B3048@syntax-dispatch B39c7@t '_))) B39af@t))) (B3048@syntax-dispatch B39af@t '#(vector each-any)))) B3983@t))) (B3048@syntax-dispatch B3983@t '(any . any)))) B396b@t))) (B3048@syntax-dispatch B396b@t '(#(scheme-id quasisyntax) any)))) B3967@t))) (B3048@syntax-dispatch B3967@t '#(scheme-id unsyntax-splicing)))) B3933@t))) (B3048@syntax-dispatch B3933@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) B3903@t))) (B3048@syntax-dispatch B3903@t '((#(scheme-id unsyntax) . each-any) . any)))) B38ff@t))) (B3048@syntax-dispatch B38ff@t '#(scheme-id unsyntax)))) B38e5@t))) (B3048@syntax-dispatch B38e5@t '(#(scheme-id unsyntax) any)))) B38e1@p))) (lambda (B38c7@x) ((lambda (B38c9@t) ((lambda (B38cb@ls/false) (if B38cb@ls/false (apply (lambda (B38cd@e) (call-with-values (lambda () (B38c6@quasi B38cd@e '0)) (lambda (B38d5@B38d0 B38d6@B38d2 B38d7@B38d4) ((lambda (B38db@v B38dc@rhs* B38dd@lhs*) (B2ffe@bless (list 'syntax-case (cons 'list B38dc@rhs*) '() (list B38dd@lhs* (list 'syntax B38db@v))))) B38d7@B38d4 B38d6@B38d2 B38d5@B38d0)))) B38cb@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B38c9@t))) (B3048@syntax-dispatch B38c9@t '(_ any)))) B38c7@x)))) '#f)))) (set! B303a@define-struct-macro (lambda (B39cb@stx) (B3128@syntax-violation '#f '"define-struct not supported" B39cb@stx))) (set! B303c@define-record-type-macro (lambda (B39cd@x) ((lambda (B39d0@id B39d2@get-record-name B39d4@get-record-constructor-name B39d6@get-record-predicate-name B39d8@get-clause B39da@foo-rtd-code B39dc@parent-rtd-code B39de@parent-rcd-code B39e0@foo-rcd-code B39e2@get-protocol-code B39e4@get-fields B39e6@get-mutator-indices B39e8@get-mutators B39ea@get-accessors B39ec@enumerate B39ee@do-define-record B39f0@verify-clauses) (begin (set! B39d0@id (lambda (B3bc3@ctxt . B3bc5@str*) (B312c@datum->syntax B3bc3@ctxt (string->symbol (apply string-append (map (lambda (B3bc7@x) (if (symbol? B3bc7@x) (symbol->string B3bc7@x) (if (string? B3bc7@x) B3bc7@x (assertion-violation 'define-record-type '"BUG")))) B3bc5@str*)))))) (set! B39d2@get-record-name (lambda (B3bb1@spec) ((lambda (B3bb3@t) ((lambda (B3bb5@ls/false) (if B3bb5@ls/false (apply (lambda (B3bb7@foo B3bb8@make-foo B3bb9@foo?) B3bb7@foo) B3bb5@ls/false) ((lambda (B3bbd@t) ((lambda (B3bbf@ls/false) (if B3bbf@ls/false (apply (lambda (B3bc1@foo) B3bc1@foo) B3bbf@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3bbd@t))) (B3048@syntax-dispatch B3bbd@t 'any))) B3bb3@t))) (B3048@syntax-dispatch B3bb3@t '(any any any)))) B3bb1@spec))) (set! B39d4@get-record-constructor-name (lambda (B3b9d@spec) ((lambda (B3b9f@t) ((lambda (B3ba1@ls/false) (if B3ba1@ls/false (apply (lambda (B3ba3@foo B3ba4@make-foo B3ba5@foo?) B3ba4@make-foo) B3ba1@ls/false) ((lambda (B3ba9@t) ((lambda (B3bab@ls/false) (if (and B3bab@ls/false (apply (lambda (B3bad@foo) (B2e43@id? B3bad@foo)) B3bab@ls/false)) (apply (lambda (B3baf@foo) (B39d0@id B3baf@foo '"make-" (B2e57@stx->datum B3baf@foo))) B3bab@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3ba9@t))) (B3048@syntax-dispatch B3ba9@t 'any))) B3b9f@t))) (B3048@syntax-dispatch B3b9f@t '(any any any)))) B3b9d@spec))) (set! B39d6@get-record-predicate-name (lambda (B3b89@spec) ((lambda (B3b8b@t) ((lambda (B3b8d@ls/false) (if B3b8d@ls/false (apply (lambda (B3b8f@foo B3b90@make-foo B3b91@foo?) B3b91@foo?) B3b8d@ls/false) ((lambda (B3b95@t) ((lambda (B3b97@ls/false) (if (and B3b97@ls/false (apply (lambda (B3b99@foo) (B2e43@id? B3b99@foo)) B3b97@ls/false)) (apply (lambda (B3b9b@foo) (B39d0@id B3b9b@foo (B2e57@stx->datum B3b9b@foo) '"?")) B3b97@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3b95@t))) (B3048@syntax-dispatch B3b95@t 'any))) B3b8b@t))) (B3048@syntax-dispatch B3b8b@t '(any any any)))) B3b89@spec))) (set! B39d8@get-clause (lambda (B3b77@id B3b78@ls) ((lambda (B3b7b@t) ((lambda (B3b7d@ls/false) (if B3b7d@ls/false (apply (lambda () '#f) B3b7d@ls/false) ((lambda (B3b7f@t) ((lambda (B3b81@ls/false) (if B3b81@ls/false (apply (lambda (B3b83@x B3b84@rest B3b85@ls) (if (B2e49@free-id=? (B2ffe@bless B3b77@id) B3b83@x) (cons B3b83@x B3b84@rest) (B39d8@get-clause B3b77@id B3b85@ls))) B3b81@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3b7f@t))) (B3048@syntax-dispatch B3b7f@t '((any . any) . any)))) B3b7b@t))) (B3048@syntax-dispatch B3b7b@t '()))) B3b78@ls))) (set! B39da@foo-rtd-code (lambda (B3b25@name B3b26@clause* B3b27@parent-rtd-code) ((lambda (B3b2c@convert-field-spec*) (begin (set! B3b2c@convert-field-spec* (lambda (B3b5d@ls) (list->vector (map (lambda (B3b5f@x) ((lambda (B3b61@t) ((lambda (B3b63@ls/false) (if B3b63@ls/false (apply (lambda (B3b65@name B3b66@rest) (list 'mutable B3b65@name)) B3b63@ls/false) ((lambda (B3b69@t) ((lambda (B3b6b@ls/false) (if B3b6b@ls/false (apply (lambda (B3b6d@name B3b6e@rest) (list 'immutable B3b6d@name)) B3b6b@ls/false) ((lambda (B3b71@t) ((lambda (B3b73@ls/false) (if B3b73@ls/false (apply (lambda (B3b75@name) (list 'immutable B3b75@name)) B3b73@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3b71@t))) (B3048@syntax-dispatch B3b71@t 'any))) B3b69@t))) (B3048@syntax-dispatch B3b69@t '(#(scheme-id immutable) any . any)))) B3b61@t))) (B3048@syntax-dispatch B3b61@t '(#(scheme-id mutable) any . any)))) B3b5f@x)) B3b5d@ls)))) ((lambda (B3b2d@uid-code B3b2e@sealed? B3b2f@opaque? B3b30@fields) (B2ffe@bless (list 'make-record-type-descriptor (list 'quote B3b25@name) B3b27@parent-rtd-code B3b2d@uid-code B3b2e@sealed? B3b2f@opaque? B3b30@fields))) ((lambda (B3b35@t) ((lambda (B3b37@ls/false) (if B3b37@ls/false (apply (lambda () (list 'quote (gensym))) B3b37@ls/false) ((lambda (B3b39@t) ((lambda (B3b3b@ls/false) (if B3b3b@ls/false (apply (lambda (B3b3d@uid) (list 'quote B3b3d@uid)) B3b3b@ls/false) ((lambda (B3b3f@t) ((lambda (B3b41@ls/false) (if B3b41@ls/false (apply (lambda () '#f) B3b41@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3b3f@t))) (B3048@syntax-dispatch B3b3f@t '_))) B3b39@t))) (B3048@syntax-dispatch B3b39@t '(_ any)))) B3b35@t))) (B3048@syntax-dispatch B3b35@t '(_)))) (B39d8@get-clause 'nongenerative B3b26@clause*)) ((lambda (B3b43@t) ((lambda (B3b45@ls/false) (if B3b45@ls/false (apply (lambda () '#t) B3b45@ls/false) ((lambda (B3b47@t) ((lambda (B3b49@ls/false) (if B3b49@ls/false (apply (lambda () '#f) B3b49@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3b47@t))) (B3048@syntax-dispatch B3b47@t '_))) B3b43@t))) (B3048@syntax-dispatch B3b43@t '(_ #(atom #t))))) (B39d8@get-clause 'sealed B3b26@clause*)) ((lambda (B3b4b@t) ((lambda (B3b4d@ls/false) (if B3b4d@ls/false (apply (lambda () '#t) B3b4d@ls/false) ((lambda (B3b4f@t) ((lambda (B3b51@ls/false) (if B3b51@ls/false (apply (lambda () '#f) B3b51@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3b4f@t))) (B3048@syntax-dispatch B3b4f@t '_))) B3b4b@t))) (B3048@syntax-dispatch B3b4b@t '(_ #(atom #t))))) (B39d8@get-clause 'opaque B3b26@clause*)) ((lambda (B3b53@t) ((lambda (B3b55@ls/false) (if B3b55@ls/false (apply (lambda (B3b57@field-spec*) (list 'quote (B3b2c@convert-field-spec* B3b57@field-spec*))) B3b55@ls/false) ((lambda (B3b59@t) ((lambda (B3b5b@ls/false) (if B3b5b@ls/false (apply (lambda () ''#()) B3b5b@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3b59@t))) (B3048@syntax-dispatch B3b59@t '_))) B3b53@t))) (B3048@syntax-dispatch B3b53@t '(_ . each-any)))) (B39d8@get-clause 'fields B3b26@clause*))))) '#f))) (set! B39dc@parent-rtd-code (lambda (B3b0d@clause*) ((lambda (B3b0f@t) ((lambda (B3b11@ls/false) (if B3b11@ls/false (apply (lambda (B3b13@name) (list 'record-type-descriptor B3b13@name)) B3b11@ls/false) ((lambda (B3b15@t) ((lambda (B3b17@ls/false) (if B3b17@ls/false (apply (lambda () ((lambda (B3b19@t) ((lambda (B3b1b@ls/false) (if B3b1b@ls/false (apply (lambda (B3b1d@rtd B3b1e@rcd) B3b1d@rtd) B3b1b@ls/false) ((lambda (B3b21@t) ((lambda (B3b23@ls/false) (if B3b23@ls/false (apply (lambda () '#f) B3b23@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3b21@t))) (B3048@syntax-dispatch B3b21@t '#(atom #f)))) B3b19@t))) (B3048@syntax-dispatch B3b19@t '(_ any any)))) (B39d8@get-clause 'parent-rtd B3b0d@clause*))) B3b17@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3b15@t))) (B3048@syntax-dispatch B3b15@t '#(atom #f)))) B3b0f@t))) (B3048@syntax-dispatch B3b0f@t '(_ any)))) (B39d8@get-clause 'parent B3b0d@clause*)))) (set! B39de@parent-rcd-code (lambda (B3af5@clause*) ((lambda (B3af7@t) ((lambda (B3af9@ls/false) (if B3af9@ls/false (apply (lambda (B3afb@name) (list 'record-constructor-descriptor B3afb@name)) B3af9@ls/false) ((lambda (B3afd@t) ((lambda (B3aff@ls/false) (if B3aff@ls/false (apply (lambda () ((lambda (B3b01@t) ((lambda (B3b03@ls/false) (if B3b03@ls/false (apply (lambda (B3b05@rtd B3b06@rcd) B3b06@rcd) B3b03@ls/false) ((lambda (B3b09@t) ((lambda (B3b0b@ls/false) (if B3b0b@ls/false (apply (lambda () '#f) B3b0b@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3b09@t))) (B3048@syntax-dispatch B3b09@t '#(atom #f)))) B3b01@t))) (B3048@syntax-dispatch B3b01@t '(_ any any)))) (B39d8@get-clause 'parent-rtd B3af5@clause*))) B3aff@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3afd@t))) (B3048@syntax-dispatch B3afd@t '#(atom #f)))) B3af7@t))) (B3048@syntax-dispatch B3af7@t '(_ any)))) (B39d8@get-clause 'parent B3af5@clause*)))) (set! B39e0@foo-rcd-code (lambda (B3aed@clause* B3aee@foo-rtd B3aef@protocol B3af0@parent-rcd-code) (list 'make-record-constructor-descriptor B3aee@foo-rtd B3af0@parent-rcd-code B3aef@protocol))) (set! B39e2@get-protocol-code (lambda (B3ae1@clause*) ((lambda (B3ae3@t) ((lambda (B3ae5@ls/false) (if B3ae5@ls/false (apply (lambda (B3ae7@expr) B3ae7@expr) B3ae5@ls/false) ((lambda (B3ae9@t) ((lambda (B3aeb@ls/false) (if B3aeb@ls/false (apply (lambda () '#f) B3aeb@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3ae9@t))) (B3048@syntax-dispatch B3ae9@t '_))) B3ae3@t))) (B3048@syntax-dispatch B3ae3@t '(_ any)))) (B39d8@get-clause 'protocol B3ae1@clause*)))) (set! B39e4@get-fields (lambda (B3acf@clause*) ((lambda (B3ad1@t) ((lambda (B3ad3@ls/false) (if B3ad3@ls/false (apply (lambda () '()) B3ad3@ls/false) ((lambda (B3ad5@t) ((lambda (B3ad7@ls/false) (if B3ad7@ls/false (apply (lambda (B3ad9@f*) B3ad9@f*) B3ad7@ls/false) ((lambda (B3adb@t) ((lambda (B3add@ls/false) (if B3add@ls/false (apply (lambda (B3adf@rest) (B39e4@get-fields B3adf@rest)) B3add@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3adb@t))) (B3048@syntax-dispatch B3adb@t '(_ . any)))) B3ad5@t))) (B3048@syntax-dispatch B3ad5@t '((#(scheme-id fields) . each-any) . _)))) B3ad1@t))) (B3048@syntax-dispatch B3ad1@t '()))) B3acf@clause*))) (set! B39e6@get-mutator-indices (lambda (B3ab7@fields) ((letrec ((B3ab9@f (lambda (B3abb@fields B3abc@i) ((lambda (B3abf@t) ((lambda (B3ac1@ls/false) (if B3ac1@ls/false (apply (lambda () '()) B3ac1@ls/false) ((lambda (B3ac3@t) ((lambda (B3ac5@ls/false) (if B3ac5@ls/false (apply (lambda (B3ac7@rest) (cons B3abc@i (B3ab9@f B3ac7@rest (+ B3abc@i '1)))) B3ac5@ls/false) ((lambda (B3ac9@t) ((lambda (B3acb@ls/false) (if B3acb@ls/false (apply (lambda (B3acd@rest) (B3ab9@f B3acd@rest (+ B3abc@i '1))) B3acb@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3ac9@t))) (B3048@syntax-dispatch B3ac9@t '(_ . any)))) B3ac3@t))) (B3048@syntax-dispatch B3ac3@t '((#(scheme-id mutable) . _) . any)))) B3abf@t))) (B3048@syntax-dispatch B3abf@t '()))) B3abb@fields)))) B3ab9@f) B3ab7@fields '0))) (set! B39e8@get-mutators (lambda (B3a8d@foo B3a8e@fields) ((lambda (B3a92@gen-name) (begin (set! B3a92@gen-name (lambda (B3ab5@x) (B312c@datum->syntax B3a8d@foo (string->symbol (string-append (symbol->string (B312e@syntax->datum B3a8d@foo)) '"-" (symbol->string (B312e@syntax->datum B3ab5@x)) '"-set!"))))) ((letrec ((B3a93@f (lambda (B3a95@fields) ((lambda (B3a97@t) ((lambda (B3a99@ls/false) (if B3a99@ls/false (apply (lambda () '()) B3a99@ls/false) ((lambda (B3a9b@t) ((lambda (B3a9d@ls/false) (if B3a9d@ls/false (apply (lambda (B3a9f@name B3aa0@accessor B3aa1@mutator B3aa2@rest) (cons B3aa1@mutator (B3a93@f B3aa2@rest))) B3a9d@ls/false) ((lambda (B3aa7@t) ((lambda (B3aa9@ls/false) (if B3aa9@ls/false (apply (lambda (B3aab@name B3aac@rest) (cons (B3a92@gen-name B3aab@name) (B3a93@f B3aac@rest))) B3aa9@ls/false) ((lambda (B3aaf@t) ((lambda (B3ab1@ls/false) (if B3ab1@ls/false (apply (lambda (B3ab3@rest) (B3a93@f B3ab3@rest)) B3ab1@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3aaf@t))) (B3048@syntax-dispatch B3aaf@t '(_ . any)))) B3aa7@t))) (B3048@syntax-dispatch B3aa7@t '((#(scheme-id mutable) any) . any)))) B3a9b@t))) (B3048@syntax-dispatch B3a9b@t '((#(scheme-id mutable) any any any) . any)))) B3a97@t))) (B3048@syntax-dispatch B3a97@t '()))) B3a95@fields)))) B3a93@f) B3a8e@fields))) '#f))) (set! B39ea@get-accessors (lambda (B3a49@foo B3a4a@fields) ((lambda (B3a4e@gen-name) (begin (set! B3a4e@gen-name (lambda (B3a8b@x) (B312c@datum->syntax B3a49@foo (string->symbol (string-append (symbol->string (B312e@syntax->datum B3a49@foo)) '"-" (symbol->string (B312e@syntax->datum B3a8b@x))))))) (map (lambda (B3a4f@field) ((lambda (B3a51@t) ((lambda (B3a53@ls/false) (if (and B3a53@ls/false (apply (lambda (B3a55@name B3a56@accessor B3a57@mutator) (B2e43@id? B3a56@accessor)) B3a53@ls/false)) (apply (lambda (B3a5b@name B3a5c@accessor B3a5d@mutator) B3a5c@accessor) B3a53@ls/false) ((lambda (B3a61@t) ((lambda (B3a63@ls/false) (if (and B3a63@ls/false (apply (lambda (B3a65@name B3a66@accessor) (B2e43@id? B3a66@accessor)) B3a63@ls/false)) (apply (lambda (B3a69@name B3a6a@accessor) B3a6a@accessor) B3a63@ls/false) ((lambda (B3a6d@t) ((lambda (B3a6f@ls/false) (if (and B3a6f@ls/false (apply (lambda (B3a71@name) (B2e43@id? B3a71@name)) B3a6f@ls/false)) (apply (lambda (B3a73@name) (B3a4e@gen-name B3a73@name)) B3a6f@ls/false) ((lambda (B3a75@t) ((lambda (B3a77@ls/false) (if (and B3a77@ls/false (apply (lambda (B3a79@name) (B2e43@id? B3a79@name)) B3a77@ls/false)) (apply (lambda (B3a7b@name) (B3a4e@gen-name B3a7b@name)) B3a77@ls/false) ((lambda (B3a7d@t) ((lambda (B3a7f@ls/false) (if (and B3a7f@ls/false (apply (lambda (B3a81@name) (B2e43@id? B3a81@name)) B3a7f@ls/false)) (apply (lambda (B3a83@name) (B3a4e@gen-name B3a83@name)) B3a7f@ls/false) ((lambda (B3a85@t) ((lambda (B3a87@ls/false) (if B3a87@ls/false (apply (lambda (B3a89@others) (B3128@syntax-violation '#f '"invalid field spec" B3a4f@field)) B3a87@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3a85@t))) (B3048@syntax-dispatch B3a85@t 'any))) B3a7d@t))) (B3048@syntax-dispatch B3a7d@t 'any))) B3a75@t))) (B3048@syntax-dispatch B3a75@t '(#(scheme-id immutable) any)))) B3a6d@t))) (B3048@syntax-dispatch B3a6d@t '(#(scheme-id mutable) any)))) B3a61@t))) (B3048@syntax-dispatch B3a61@t '(#(scheme-id immutable) any any)))) B3a51@t))) (B3048@syntax-dispatch B3a51@t '(#(scheme-id mutable) any any any)))) B3a4f@field)) B3a4a@fields))) '#f))) (set! B39ec@enumerate (lambda (B3a41@ls) ((letrec ((B3a43@f (lambda (B3a45@ls B3a46@i) (if (null? B3a45@ls) '() (cons B3a46@i (B3a43@f (cdr B3a45@ls) (+ B3a46@i '1))))))) B3a43@f) B3a41@ls '0))) (set! B39ee@do-define-record (lambda (B3a19@namespec B3a1a@clause*) ((lambda (B3a1d@foo) ((lambda (B3a1f@foo-rtd) ((lambda (B3a21@foo-rcd) ((lambda (B3a23@protocol) ((lambda (B3a25@make-foo) ((lambda (B3a27@fields) ((lambda (B3a29@idx*) ((lambda (B3a2b@foo-x*) ((lambda (B3a2d@set-foo-x!*) ((lambda (B3a2f@set-foo-idx*) ((lambda (B3a31@foo?) ((lambda (B3a33@foo-rtd-code) ((lambda (B3a35@foo-rcd-code) ((lambda (B3a37@protocol-code) ((lambda () (B2ffe@bless (cons 'begin (cons (list 'define B3a1f@foo-rtd B3a33@foo-rtd-code) (cons (list 'define B3a23@protocol B3a37@protocol-code) (cons (list 'define B3a21@foo-rcd B3a35@foo-rcd-code) (cons (list 'define-syntax B3a1d@foo (list 'list ''$rtd (list 'syntax B3a1f@foo-rtd) (list 'syntax B3a21@foo-rcd))) (cons (list 'define B3a31@foo? (list 'record-predicate B3a1f@foo-rtd)) (cons (list 'define B3a25@make-foo (list 'record-constructor B3a21@foo-rcd)) (append (map (lambda (B3a39@foo-x B3a3a@idx) (list 'define B3a39@foo-x (list 'record-accessor B3a1f@foo-rtd B3a3a@idx))) B3a2b@foo-x* B3a29@idx*) (map (lambda (B3a3d@set-foo-x! B3a3e@idx) (list 'define B3a3d@set-foo-x! (list 'record-mutator B3a1f@foo-rtd B3a3e@idx))) B3a2d@set-foo-x!* B3a2f@set-foo-idx*))))))))))))) (B39e2@get-protocol-code B3a1a@clause*))) (B39e0@foo-rcd-code B3a1a@clause* B3a1f@foo-rtd B3a23@protocol (B39de@parent-rcd-code B3a1a@clause*)))) (B39da@foo-rtd-code B3a1d@foo B3a1a@clause* (B39dc@parent-rtd-code B3a1a@clause*)))) (B39d6@get-record-predicate-name B3a19@namespec))) (B39e6@get-mutator-indices B3a27@fields))) (B39e8@get-mutators B3a1d@foo B3a27@fields))) (B39ea@get-accessors B3a1d@foo B3a27@fields))) (B39ec@enumerate B3a27@fields))) (B39e4@get-fields B3a1a@clause*))) (B39d4@get-record-constructor-name B3a19@namespec))) (gensym))) (gensym))) (gensym))) (B39d2@get-record-name B3a19@namespec)))) (set! B39f0@verify-clauses (lambda (B39f9@x B39fa@cls*) ((lambda (B39fe@valid-kwds B3a00@free-id-member?) (begin (set! B39fe@valid-kwds (map B2ffe@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! B3a00@free-id-member? (lambda (B3a15@x B3a16@ls) (and (pair? B3a16@ls) (or (B2e49@free-id=? B3a15@x (car B3a16@ls)) (B3a00@free-id-member? B3a15@x (cdr B3a16@ls)))))) ((letrec ((B3a01@f (lambda (B3a03@cls* B3a04@seen*) (if (not (null? B3a03@cls*)) ((lambda (B3a07@t) ((lambda (B3a09@ls/false) (if B3a09@ls/false (apply (lambda (B3a0b@kwd B3a0c@rest) (if (or (not (B2e43@id? B3a0b@kwd)) (not (B3a00@free-id-member? B3a0b@kwd B39fe@valid-kwds))) (B3128@syntax-violation '#f '"not a valid define-record-type keyword" B3a0b@kwd) (if (B2e4f@bound-id-member? B3a0b@kwd B3a04@seen*) (B3128@syntax-violation '#f '"duplicate use of keyword " B39f9@x B3a0b@kwd) (B3a01@f (cdr B3a03@cls*) (cons B3a0b@kwd B3a04@seen*))))) B3a09@ls/false) ((lambda (B3a0f@t) ((lambda (B3a11@ls/false) (if B3a11@ls/false (apply (lambda (B3a13@cls) (B3128@syntax-violation '#f '"malformed define-record-type clause" B3a13@cls)) B3a11@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3a0f@t))) (B3048@syntax-dispatch B3a0f@t 'any))) B3a07@t))) (B3048@syntax-dispatch B3a07@t '(any . any)))) (car B3a03@cls*)) (void))))) B3a01@f) B39fa@cls* '()))) '#f '#f))) ((lambda (B39f1@t) ((lambda (B39f3@ls/false) (if B39f3@ls/false (apply (lambda (B39f5@namespec B39f6@clause*) (begin (B39f0@verify-clauses B39cd@x B39f6@clause*) (B39ee@do-define-record B39f5@namespec B39f6@clause*))) B39f3@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B39f1@t))) (B3048@syntax-dispatch B39f1@t '(_ any . each-any)))) B39cd@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! B303e@define-condition-type-macro (lambda (B3bc9@x) ((lambda (B3bcc@mkname) (begin (set! B3bcc@mkname (lambda (B3bf9@name B3bfa@suffix) (B312c@datum->syntax B3bf9@name (string->symbol (string-append (symbol->string (B312e@syntax->datum B3bf9@name)) B3bfa@suffix))))) ((lambda (B3bcd@t) ((lambda (B3bcf@ls/false) (if (and B3bcf@ls/false (apply (lambda (B3bd1@ctxt B3bd2@name B3bd3@super B3bd4@constructor B3bd5@predicate B3bd6@field* B3bd7@accessor*) (and (B2e43@id? B3bd2@name) (B2e43@id? B3bd3@super) (B2e43@id? B3bd4@constructor) (B2e43@id? B3bd5@predicate) (for-all B2e43@id? B3bd6@field*) (for-all B2e43@id? B3bd7@accessor*))) B3bcf@ls/false)) (apply (lambda (B3bdf@ctxt B3be0@name B3be1@super B3be2@constructor B3be3@predicate B3be4@field* B3be5@accessor*) ((lambda (B3bed@aux-accessor*) (B2ffe@bless (cons 'begin (cons (cons 'define-record-type (cons (list B3be0@name B3be2@constructor (gensym)) (cons (list 'parent B3be1@super) (cons (cons 'fields (map (lambda (B3bef@field B3bf0@aux) (list 'immutable B3bef@field B3bf0@aux)) B3be4@field* B3bed@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define B3be3@predicate (list 'condition-predicate (list 'record-type-descriptor B3be0@name))) (map (lambda (B3bf3@accessor B3bf4@aux) (list 'define B3bf3@accessor (list 'condition-accessor (list 'record-type-descriptor B3be0@name) B3bf4@aux))) B3be5@accessor* B3bed@aux-accessor*)))))) (map (lambda (B3bf7@x) (gensym)) B3be5@accessor*))) B3bcf@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3bcd@t))) (B3048@syntax-dispatch B3bcd@t '(any any any any any . #(each (any any)))))) B3bc9@x))) '#f))) (set! B3040@incorrect-usage-macro (lambda (B3bfd@e) (B3128@syntax-violation '#f '"incorrect usage of auxiliary keyword" B3bfd@e))) (set! B3042@parameterize-macro (lambda (B3bff@e) ((lambda (B3c01@t) ((lambda (B3c03@ls/false) (if B3c03@ls/false (apply (lambda (B3c05@b B3c06@b*) (B2ffe@bless (cons 'let (cons '() (cons B3c05@b B3c06@b*))))) B3c03@ls/false) ((lambda (B3c09@t) ((lambda (B3c0b@ls/false) (if B3c0b@ls/false (apply (lambda (B3c0d@olhs* B3c0e@orhs* B3c0f@b B3c10@b*) ((lambda (B3c15@lhs* B3c16@rhs*) (B2ffe@bless (cons (list 'lambda (append B3c15@lhs* B3c16@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (B3c19@lhs B3c1a@rhs) (list 'let (list (list 't (list B3c19@lhs))) (list B3c19@lhs B3c1a@rhs) (cons 'set! (cons B3c1a@rhs '(t))))) B3c15@lhs* B3c16@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons B3c0f@b B3c10@b*))) '(swap)))))) (append B3c0d@olhs* B3c0e@orhs*)))) (B3116@generate-temporaries B3c0d@olhs*) (B3116@generate-temporaries B3c0e@orhs*))) B3c0b@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3c09@t))) (B3048@syntax-dispatch B3c09@t '(_ #(each (any any)) any . each-any)))) B3c01@t))) (B3048@syntax-dispatch B3c01@t '(_ () any . each-any)))) B3bff@e))) (set! B3044@foreign-call-transformer (lambda (B3c1d@e B3c1e@r B3c1f@mr) ((lambda (B3c23@t) ((lambda (B3c25@ls/false) (if B3c25@ls/false (apply (lambda (B3c27@name B3c28@arg*) (cons 'foreign-call (cons (B306a@chi-expr B3c27@name B3c1e@r B3c1f@mr) (B3066@chi-expr* B3c28@arg* B3c1e@r B3c1f@mr)))) B3c25@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3c23@t))) (B3048@syntax-dispatch B3c23@t '(_ any . each-any)))) B3c1d@e))) (set! B3046@convert-pattern (lambda (B3c2b@pattern B3c2c@keys) ((lambda (B3c30@cvt* B3c32@cvt) (begin (set! B3c30@cvt* (lambda (B3ccf@p* B3cd0@n B3cd1@ids) (if (null? B3ccf@p*) (values '() B3cd1@ids) (call-with-values (lambda () (B3c30@cvt* (cdr B3ccf@p*) B3cd0@n B3cd1@ids)) (lambda (B3cd9@B3cd6 B3cda@B3cd8) ((lambda (B3cdd@ids B3cde@y) (call-with-values (lambda () (B3c32@cvt (car B3ccf@p*) B3cd0@n B3cdd@ids)) (lambda (B3ce5@B3ce2 B3ce6@B3ce4) ((lambda (B3ce9@ids B3cea@x) (values (cons B3cea@x B3cde@y) B3ce9@ids)) B3ce6@B3ce4 B3ce5@B3ce2)))) B3cda@B3cd8 B3cd9@B3cd6)))))) (set! B3c32@cvt (lambda (B3c33@p B3c34@n B3c35@ids) ((lambda (B3c39@t) ((lambda (B3c3b@ls/false) (if (and B3c3b@ls/false (apply (lambda (B3c3d@id) (B2e43@id? B3c3d@id)) B3c3b@ls/false)) (apply (lambda (B3c3f@id) (if (B2e4f@bound-id-member? B3c33@p B3c2c@keys) (values (vector 'free-id B3c33@p) B3c35@ids) (if (B2e49@free-id=? B3c33@p (B2fd2@scheme-stx '_)) (values '_ B3c35@ids) (values 'any (cons (cons B3c33@p B3c34@n) B3c35@ids))))) B3c3b@ls/false) ((lambda (B3c41@t) ((lambda (B3c43@ls/false) (if (and B3c43@ls/false (apply (lambda (B3c45@p B3c46@dots) (B304a@ellipsis? B3c46@dots)) B3c43@ls/false)) (apply (lambda (B3c49@p B3c4a@dots) (call-with-values (lambda () (B3c32@cvt B3c49@p (+ B3c34@n '1) B3c35@ids)) (lambda (B3c51@B3c4e B3c52@B3c50) ((lambda (B3c55@ids B3c56@p) (values (if (eq? B3c56@p 'any) 'each-any (vector 'each B3c56@p)) B3c55@ids)) B3c52@B3c50 B3c51@B3c4e)))) B3c43@ls/false) ((lambda (B3c59@t) ((lambda (B3c5b@ls/false) (if (and B3c5b@ls/false (apply (lambda (B3c5d@x B3c5e@dots B3c5f@ys B3c60@z) (B304a@ellipsis? B3c5e@dots)) B3c5b@ls/false)) (apply (lambda (B3c65@x B3c66@dots B3c67@ys B3c68@z) (call-with-values (lambda () (B3c32@cvt B3c68@z B3c34@n B3c35@ids)) (lambda (B3c71@B3c6e B3c72@B3c70) ((lambda (B3c75@ids B3c76@z) (call-with-values (lambda () (B3c30@cvt* B3c67@ys B3c34@n B3c75@ids)) (lambda (B3c7d@B3c7a B3c7e@B3c7c) ((lambda (B3c81@ids B3c82@ys) (call-with-values (lambda () (B3c32@cvt B3c65@x (+ B3c34@n '1) B3c81@ids)) (lambda (B3c89@B3c86 B3c8a@B3c88) ((lambda (B3c8d@ids B3c8e@x) (values (vector 'each+ B3c8e@x (reverse B3c82@ys) B3c76@z) B3c8d@ids)) B3c8a@B3c88 B3c89@B3c86)))) B3c7e@B3c7c B3c7d@B3c7a)))) B3c72@B3c70 B3c71@B3c6e)))) B3c5b@ls/false) ((lambda (B3c91@t) ((lambda (B3c93@ls/false) (if B3c93@ls/false (apply (lambda (B3c95@x B3c96@y) (call-with-values (lambda () (B3c32@cvt B3c96@y B3c34@n B3c35@ids)) (lambda (B3c9d@B3c9a B3c9e@B3c9c) ((lambda (B3ca1@ids B3ca2@y) (call-with-values (lambda () (B3c32@cvt B3c95@x B3c34@n B3ca1@ids)) (lambda (B3ca9@B3ca6 B3caa@B3ca8) ((lambda (B3cad@ids B3cae@x) (values (cons B3cae@x B3ca2@y) B3cad@ids)) B3caa@B3ca8 B3ca9@B3ca6)))) B3c9e@B3c9c B3c9d@B3c9a)))) B3c93@ls/false) ((lambda (B3cb1@t) ((lambda (B3cb3@ls/false) (if B3cb3@ls/false (apply (lambda () (values '() B3c35@ids)) B3cb3@ls/false) ((lambda (B3cb5@t) ((lambda (B3cb7@ls/false) (if (and B3cb7@ls/false (apply (lambda (B3cb9@p) (not (B2e0f@stx? B3cb9@p))) B3cb7@ls/false)) (apply (lambda (B3cbb@p) (call-with-values (lambda () (B3c32@cvt B3cbb@p B3c34@n B3c35@ids)) (lambda (B3cc1@B3cbe B3cc2@B3cc0) ((lambda (B3cc5@ids B3cc6@p) (values (vector 'vector B3cc6@p) B3cc5@ids)) B3cc2@B3cc0 B3cc1@B3cbe)))) B3cb7@ls/false) ((lambda (B3cc9@t) ((lambda (B3ccb@ls/false) (if B3ccb@ls/false (apply (lambda (B3ccd@datum) (values (vector 'atom (B2e57@stx->datum B3ccd@datum)) B3c35@ids)) B3ccb@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3cc9@t))) (B3048@syntax-dispatch B3cc9@t 'any))) B3cb5@t))) (B3048@syntax-dispatch B3cb5@t '#(vector each-any)))) B3cb1@t))) (B3048@syntax-dispatch B3cb1@t '()))) B3c91@t))) (B3048@syntax-dispatch B3c91@t '(any . any)))) B3c59@t))) (B3048@syntax-dispatch B3c59@t '(any any . #(each+ any () any))))) B3c41@t))) (B3048@syntax-dispatch B3c41@t '(any any)))) B3c39@t))) (B3048@syntax-dispatch B3c39@t 'any))) B3c33@p))) (B3c32@cvt B3c2b@pattern '0 '()))) '#f '#f))) (set! B3048@syntax-dispatch ((lambda () ((lambda (B3cee@stx^ B3cf0@match-each B3cf2@match-each+ B3cf4@match-each-any B3cf6@match-empty B3cf8@combine B3cfa@match* B3cfc@match) (begin (set! B3cee@stx^ (lambda (B3dc9@e B3dca@m* B3dcb@s* B3dcc@ae*) (if (and (null? B3dca@m*) (null? B3dcb@s*) (null? B3dcc@ae*)) B3dc9@e (B2e2b@mkstx B3dc9@e B3dca@m* B3dcb@s* B3dcc@ae*)))) (set! B3cf0@match-each (lambda (B3da9@e B3daa@p B3dab@m* B3dac@s* B3dad@ae*) (if (pair? B3da9@e) ((lambda (B3db3@first) (and B3db3@first ((lambda (B3db5@rest) (and B3db5@rest (cons B3db3@first B3db5@rest))) (B3cf0@match-each (cdr B3da9@e) B3daa@p B3dab@m* B3dac@s* B3dad@ae*)))) (B3cfc@match (car B3da9@e) B3daa@p B3dab@m* B3dac@s* B3dad@ae* '())) (if (null? B3da9@e) '() (if (B2e0f@stx? B3da9@e) (and (not (B2dc9@top-marked? B3dab@m*)) (call-with-values (lambda () (join-wraps B3dab@m* B3dac@s* B3dad@ae* B3da9@e)) (lambda (B3dbd@B3db8 B3dbe@B3dba B3dbf@B3dbc) ((lambda (B3dc3@ae* B3dc4@s* B3dc5@m*) (B3cf0@match-each (B2e11@stx-expr B3da9@e) B3daa@p B3dc5@m* B3dc4@s* B3dc3@ae*)) B3dbf@B3dbc B3dbe@B3dba B3dbd@B3db8)))) (if (B2997@B286b@annotation? B3da9@e) (B3cf0@match-each (B2999@B286f@annotation-expression B3da9@e) B3daa@p B3dab@m* B3dac@s* B3dad@ae*) '#f)))))) (set! B3cf2@match-each+ (lambda (B3d69@e B3d6a@x-pat B3d6b@y-pat B3d6c@z-pat B3d6d@m* B3d6e@s* B3d6f@ae* B3d70@r) ((letrec ((B3d79@f (lambda (B3d7b@e B3d7c@m* B3d7d@s* B3d7e@ae*) (if (pair? B3d7b@e) (call-with-values (lambda () (B3d79@f (cdr B3d7b@e) B3d7c@m* B3d7d@s* B3d7e@ae*)) (lambda (B3d89@B3d84 B3d8a@B3d86 B3d8b@B3d88) ((lambda (B3d8f@r B3d90@y-pat B3d91@xr*) (if B3d8f@r (if (null? B3d90@y-pat) ((lambda (B3d95@xr) (if B3d95@xr (values (cons B3d95@xr B3d91@xr*) B3d90@y-pat B3d8f@r) (values '#f '#f '#f))) (B3cfc@match (car B3d7b@e) B3d6a@x-pat B3d7c@m* B3d7d@s* B3d7e@ae* '())) (values '() (cdr B3d90@y-pat) (B3cfc@match (car B3d7b@e) (car B3d90@y-pat) B3d7c@m* B3d7d@s* B3d7e@ae* B3d8f@r))) (values '#f '#f '#f))) B3d8b@B3d88 B3d8a@B3d86 B3d89@B3d84))) (if (B2e0f@stx? B3d7b@e) (if (B2dc9@top-marked? B3d7c@m*) (values '() B3d6b@y-pat (B3cfc@match B3d7b@e B3d6c@z-pat B3d7c@m* B3d7d@s* B3d7e@ae* B3d70@r)) (call-with-values (lambda () (join-wraps B3d7c@m* B3d7d@s* B3d7e@ae* B3d7b@e)) (lambda (B3d9d@B3d98 B3d9e@B3d9a B3d9f@B3d9c) ((lambda (B3da3@ae* B3da4@s* B3da5@m*) (B3d79@f (B2e11@stx-expr B3d7b@e) B3da5@m* B3da4@s* B3da3@ae*)) B3d9f@B3d9c B3d9e@B3d9a B3d9d@B3d98)))) (if (B2997@B286b@annotation? B3d7b@e) (B3d79@f (B2999@B286f@annotation-expression B3d7b@e) B3d7c@m* B3d7d@s* B3d7e@ae*) (values '() B3d6b@y-pat (B3cfc@match B3d7b@e B3d6c@z-pat B3d7c@m* B3d7d@s* B3d7e@ae* B3d70@r)))))))) B3d79@f) B3d69@e B3d6d@m* B3d6e@s* B3d6f@ae*))) (set! B3cf4@match-each-any (lambda (B3d4d@e B3d4e@m* B3d4f@s* B3d50@ae*) (if (pair? B3d4d@e) ((lambda (B3d55@l) (and B3d55@l (cons (B3cee@stx^ (car B3d4d@e) B3d4e@m* B3d4f@s* B3d50@ae*) B3d55@l))) (B3cf4@match-each-any (cdr B3d4d@e) B3d4e@m* B3d4f@s* B3d50@ae*)) (if (null? B3d4d@e) '() (if (B2e0f@stx? B3d4d@e) (and (not (B2dc9@top-marked? B3d4e@m*)) (call-with-values (lambda () (join-wraps B3d4e@m* B3d4f@s* B3d50@ae* B3d4d@e)) (lambda (B3d5d@B3d58 B3d5e@B3d5a B3d5f@B3d5c) ((lambda (B3d63@ae* B3d64@s* B3d65@m*) (B3cf4@match-each-any (B2e11@stx-expr B3d4d@e) B3d65@m* B3d64@s* B3d63@ae*)) B3d5f@B3d5c B3d5e@B3d5a B3d5d@B3d58)))) (if (B2997@B286b@annotation? B3d4d@e) (B3cf4@match-each-any (B2999@B286f@annotation-expression B3d4d@e) B3d4e@m* B3d4f@s* B3d50@ae*) '#f)))))) (set! B3cf6@match-empty (lambda (B3d47@p B3d48@r) (if (null? B3d47@p) B3d48@r (if (eq? B3d47@p '_) B3d48@r (if (eq? B3d47@p 'any) (cons '() B3d48@r) (if (pair? B3d47@p) (B3cf6@match-empty (car B3d47@p) (B3cf6@match-empty (cdr B3d47@p) B3d48@r)) (if (eq? B3d47@p 'each-any) (cons '() B3d48@r) ((lambda (B3d4b@t) (if (memv B3d4b@t '(each)) (B3cf6@match-empty (vector-ref B3d47@p '1) B3d48@r) (if (memv B3d4b@t '(each+)) (B3cf6@match-empty (vector-ref B3d47@p '1) (B3cf6@match-empty (reverse (vector-ref B3d47@p '2)) (B3cf6@match-empty (vector-ref B3d47@p '3) B3d48@r))) (if (memv B3d4b@t '(free-id atom)) B3d48@r (if (memv B3d4b@t '(scheme-id atom)) B3d48@r (if (memv B3d4b@t '(vector)) (B3cf6@match-empty (vector-ref B3d47@p '1) B3d48@r) (assertion-violation 'syntax-dispatch '"invalid pattern" B3d47@p))))))) (vector-ref B3d47@p '0))))))))) (set! B3cf8@combine (lambda (B3d43@r* B3d44@r) (if (null? (car B3d43@r*)) B3d44@r (cons (map car B3d43@r*) (B3cf8@combine (map cdr B3d43@r*) B3d44@r))))) (set! B3cfa@match* (lambda (B3d1f@e B3d20@p B3d21@m* B3d22@s* B3d23@ae* B3d24@r) (if (null? B3d20@p) (and (null? B3d1f@e) B3d24@r) (if (pair? B3d20@p) (and (pair? B3d1f@e) (B3cfc@match (car B3d1f@e) (car B3d20@p) B3d21@m* B3d22@s* B3d23@ae* (B3cfc@match (cdr B3d1f@e) (cdr B3d20@p) B3d21@m* B3d22@s* B3d23@ae* B3d24@r))) (if (eq? B3d20@p 'each-any) ((lambda (B3d2b@l) (and B3d2b@l (cons B3d2b@l B3d24@r))) (B3cf4@match-each-any B3d1f@e B3d21@m* B3d22@s* B3d23@ae*)) ((lambda (B3d2d@t) (if (memv B3d2d@t '(each)) (if (null? B3d1f@e) (B3cf6@match-empty (vector-ref B3d20@p '1) B3d24@r) ((lambda (B3d2f@r*) (and B3d2f@r* (B3cf8@combine B3d2f@r* B3d24@r))) (B3cf0@match-each B3d1f@e (vector-ref B3d20@p '1) B3d21@m* B3d22@s* B3d23@ae*))) (if (memv B3d2d@t '(free-id)) (and (symbol? B3d1f@e) (B2dc9@top-marked? B3d21@m*) (B2e49@free-id=? (B3cee@stx^ B3d1f@e B3d21@m* B3d22@s* B3d23@ae*) (vector-ref B3d20@p '1)) B3d24@r) (if (memv B3d2d@t '(scheme-id)) (and (symbol? B3d1f@e) (B2dc9@top-marked? B3d21@m*) (B2e49@free-id=? (B3cee@stx^ B3d1f@e B3d21@m* B3d22@s* B3d23@ae*) (B2fd2@scheme-stx (vector-ref B3d20@p '1))) B3d24@r) (if (memv B3d2d@t '(each+)) (call-with-values (lambda () (B3cf2@match-each+ B3d1f@e (vector-ref B3d20@p '1) (vector-ref B3d20@p '2) (vector-ref B3d20@p '3) B3d21@m* B3d22@s* B3d23@ae* B3d24@r)) (lambda (B3d37@B3d32 B3d38@B3d34 B3d39@B3d36) ((lambda (B3d3d@r B3d3e@y-pat B3d3f@xr*) (and B3d3d@r (null? B3d3e@y-pat) (if (null? B3d3f@xr*) (B3cf6@match-empty (vector-ref B3d20@p '1) B3d3d@r) (B3cf8@combine B3d3f@xr* B3d3d@r)))) B3d39@B3d36 B3d38@B3d34 B3d37@B3d32))) (if (memv B3d2d@t '(atom)) (and (fast-equal? (vector-ref B3d20@p '1) (B2e55@strip B3d1f@e B3d21@m*)) B3d24@r) (if (memv B3d2d@t '(vector)) (and (vector? B3d1f@e) (B3cfc@match (vector->list B3d1f@e) (vector-ref B3d20@p '1) B3d21@m* B3d22@s* B3d23@ae* B3d24@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" B3d20@p)))))))) (vector-ref B3d20@p '0))))))) (set! B3cfc@match (lambda (B3d01@e B3d02@p B3d03@m* B3d04@s* B3d05@ae* B3d06@r) (if (not B3d06@r) '#f (if (eq? B3d02@p '_) B3d06@r (if (eq? B3d02@p 'any) (cons (B3cee@stx^ B3d01@e B3d03@m* B3d04@s* B3d05@ae*) B3d06@r) (if (B2e0f@stx? B3d01@e) (and (not (B2dc9@top-marked? B3d03@m*)) (call-with-values (lambda () (join-wraps B3d03@m* B3d04@s* B3d05@ae* B3d01@e)) (lambda (B3d13@B3d0e B3d14@B3d10 B3d15@B3d12) ((lambda (B3d19@ae* B3d1a@s* B3d1b@m*) (B3cfc@match (B2e11@stx-expr B3d01@e) B3d02@p B3d1b@m* B3d1a@s* B3d19@ae* B3d06@r)) B3d15@B3d12 B3d14@B3d10 B3d13@B3d0e)))) (if (B2997@B286b@annotation? B3d01@e) (B3cfc@match (B2999@B286f@annotation-expression B3d01@e) B3d02@p B3d03@m* B3d04@s* B3d05@ae* B3d06@r) (B3cfa@match* B3d01@e B3d02@p B3d03@m* B3d04@s* B3d05@ae* B3d06@r)))))))) (lambda (B3cfd@e B3cfe@p) (B3cfc@match B3cfd@e B3cfe@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! B304a@ellipsis? (lambda (B3dd1@x) (and (B2e43@id? B3dd1@x) (B2e49@free-id=? B3dd1@x (B2fd2@scheme-stx '...))))) (set! B304c@underscore? (lambda (B3dd3@x) (and (B2e43@id? B3dd3@x) (B2e49@free-id=? B3dd3@x (B2fd2@scheme-stx '_))))) (set! B304e@verify-literals (lambda (B3dd5@lits B3dd6@expr) (for-each (lambda (B3dd9@x) (if (or (not (B2e43@id? B3dd9@x)) (B304a@ellipsis? B3dd9@x) (B304c@underscore? B3dd9@x)) (B3128@syntax-violation '#f '"invalid literal" B3dd6@expr B3dd9@x) (void))) B3dd5@lits))) (set! B3050@syntax-case-transformer ((lambda () ((lambda (B3ddc@build-dispatch-call B3dde@invalid-ids-error B3de0@gen-clause B3de2@gen-syntax-case) (begin (set! B3ddc@build-dispatch-call (lambda (B3e4d@pvars B3e4e@expr B3e4f@y B3e50@r B3e51@mr) ((lambda (B3e57@ids B3e58@levels) ((lambda (B3e5b@labels B3e5c@new-vars) ((lambda (B3e5f@body) (list '(primitive apply) (B2da7@B2ce7@build-lambda '#f B3e5c@new-vars B3e5f@body) B3e4f@y)) (B306a@chi-expr (B2e2f@add-subst (B2e03@make-full-rib B3e57@ids B3e5b@labels) B3e4e@expr) (append (map (lambda (B3e61@label B3e62@var B3e63@level) (cons B3e61@label (B2e5d@make-binding 'syntax (cons B3e62@var B3e63@level)))) B3e5b@labels B3e5c@new-vars (map cdr B3e4d@pvars)) B3e50@r) B3e51@mr))) (map B2dcf@gen-label B3e57@ids) (map B2dcb@gen-lexical B3e57@ids))) (map car B3e4d@pvars) (map cdr B3e4d@pvars)))) (set! B3dde@invalid-ids-error (lambda (B3e41@id* B3e42@e B3e43@class) ((letrec ((B3e47@find (lambda (B3e49@id* B3e4a@ok*) (if (null? B3e49@id*) (B3128@syntax-violation '#f '"invalid syntax" B3e42@e) (if (B2e43@id? (car B3e49@id*)) (if (B2e4f@bound-id-member? (car B3e49@id*) B3e4a@ok*) (B3124@syntax-error (car B3e49@id*) '"duplicate " B3e43@class) (B3e47@find (cdr B3e49@id*) (cons (car B3e49@id*) B3e4a@ok*))) (B3124@syntax-error (car B3e49@id*) '"invalid " B3e43@class)))))) B3e47@find) B3e41@id* '()))) (set! B3de0@gen-clause (lambda (B3e19@x B3e1a@keys B3e1b@clauses B3e1c@r B3e1d@mr B3e1e@pat B3e1f@fender B3e20@expr) (call-with-values (lambda () (B3046@convert-pattern B3e1e@pat B3e1a@keys)) (lambda (B3e2d@B3e2a B3e2e@B3e2c) ((lambda (B3e31@pvars B3e32@p) (if (not (B2e4d@distinct-bound-ids? (map car B3e31@pvars))) (B3dde@invalid-ids-error (map car B3e31@pvars) B3e1e@pat '"pattern variable") (if (not (for-all (lambda (B3e35@x) (not (B304a@ellipsis? (car B3e35@x)))) B3e31@pvars)) (B3128@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" B3e1e@pat) ((lambda (B3e37@y) ((lambda (B3e39@test) ((lambda (B3e3b@conseq) ((lambda (B3e3d@altern) (list (B2da7@B2ce7@build-lambda '#f (list B3e37@y) (list 'if B3e39@test B3e3b@conseq B3e3d@altern)) (list '(primitive syntax-dispatch) B3e19@x (list 'quote B3e32@p)))) (B3de2@gen-syntax-case B3e19@x B3e1a@keys B3e1b@clauses B3e1c@r B3e1d@mr))) (B3ddc@build-dispatch-call B3e31@pvars B3e20@expr B3e37@y B3e1c@r B3e1d@mr))) (if (eq? B3e1f@fender '#t) B3e37@y ((lambda (B3e3f@call) (list 'if B3e37@y B3e3f@call (list 'quote '#f))) (B3ddc@build-dispatch-call B3e31@pvars B3e1f@fender B3e37@y B3e1c@r B3e1d@mr))))) (B2dcb@gen-lexical 'tmp))))) B3e2e@B3e2c B3e2d@B3e2a))))) (set! B3de2@gen-syntax-case (lambda (B3df7@x B3df8@keys B3df9@clauses B3dfa@r B3dfb@mr) (if (null? B3df9@clauses) (list '(primitive syntax-error) B3df7@x) ((lambda (B3e01@t) ((lambda (B3e03@ls/false) (if B3e03@ls/false (apply (lambda (B3e05@pat B3e06@expr) (if (and (B2e43@id? B3e05@pat) (not (B2e4f@bound-id-member? B3e05@pat B3df8@keys)) (not (B304a@ellipsis? B3e05@pat))) (if (B2e49@free-id=? B3e05@pat (B2fd2@scheme-stx '_)) (B306a@chi-expr B3e06@expr B3dfa@r B3dfb@mr) ((lambda (B3e09@lab B3e0a@lex) ((lambda (B3e0d@body) (list (B2da7@B2ce7@build-lambda '#f (list B3e0a@lex) B3e0d@body) B3df7@x)) (B306a@chi-expr (B2e2f@add-subst (B2e03@make-full-rib (list B3e05@pat) (list B3e09@lab)) B3e06@expr) (cons (cons B3e09@lab (B2e5d@make-binding 'syntax (cons B3e0a@lex '0))) B3dfa@r) B3dfb@mr))) (B2dcf@gen-label B3e05@pat) (B2dcb@gen-lexical B3e05@pat))) (B3de0@gen-clause B3df7@x B3df8@keys (cdr B3df9@clauses) B3dfa@r B3dfb@mr B3e05@pat '#t B3e06@expr))) B3e03@ls/false) ((lambda (B3e0f@t) ((lambda (B3e11@ls/false) (if B3e11@ls/false (apply (lambda (B3e13@pat B3e14@fender B3e15@expr) (B3de0@gen-clause B3df7@x B3df8@keys (cdr B3df9@clauses) B3dfa@r B3dfb@mr B3e13@pat B3e14@fender B3e15@expr)) B3e11@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3e0f@t))) (B3048@syntax-dispatch B3e0f@t '(any any any)))) B3e01@t))) (B3048@syntax-dispatch B3e01@t '(any any)))) (car B3df9@clauses))))) (lambda (B3de3@e B3de4@r B3de5@mr) ((lambda (B3de9@t) ((lambda (B3deb@ls/false) (if B3deb@ls/false (apply (lambda (B3ded@expr B3dee@keys B3def@clauses) (begin (B304e@verify-literals B3dee@keys B3de3@e) ((lambda (B3df3@x) ((lambda (B3df5@body) (list (B2da7@B2ce7@build-lambda '#f (list B3df3@x) B3df5@body) (B306a@chi-expr B3ded@expr B3de4@r B3de5@mr))) (B3de2@gen-syntax-case B3df3@x B3dee@keys B3def@clauses B3de4@r B3de5@mr))) (B2dcb@gen-lexical 'tmp)))) B3deb@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3de9@t))) (B3048@syntax-dispatch B3de9@t '(_ any each-any . each-any)))) B3de3@e)))) '#f '#f '#f '#f)))) (set! B3052@ellipsis-map (lambda (B3e67@proc B3e68@ls . B3e6b@ls*) ((lambda (B3e6e@who) (begin (set! B3e6e@who '...) (begin (if (not (list? B3e68@ls)) (assertion-violation B3e6e@who '"not a list" B3e68@ls) (void)) (if (not (null? B3e6b@ls*)) ((lambda (B3e6f@n) (for-each (lambda (B3e71@x) (begin (if (not (list? B3e71@x)) (assertion-violation B3e6e@who '"not a list" B3e71@x) (void)) (if (not (= (length B3e71@x) B3e6f@n)) (assertion-violation B3e6e@who '"length mismatch" B3e68@ls B3e71@x) (void)))) B3e6b@ls*)) (length B3e68@ls)) (void)) (apply map B3e67@proc B3e68@ls B3e6b@ls*)))) '#f))) (set! B3054@syntax-transformer ((lambda () ((lambda (B3e74@gen-syntax B3e76@gen-ref B3e78@gen-append B3e7a@gen-mappend B3e7c@gen-map B3e7e@gen-cons B3e80@gen-vector B3e82@regen) (begin (set! B3e74@gen-syntax (lambda (B3eeb@src B3eec@e B3eed@r B3eee@maps B3eef@ellipsis? B3ef0@vec?) ((lambda (B3ef7@t) ((lambda (B3ef9@ls/false) (if (and B3ef9@ls/false (apply (lambda (B3efb@dots) (B3eef@ellipsis? B3efb@dots)) B3ef9@ls/false)) (apply (lambda (B3efd@dots) (B3128@syntax-violation '#f '"misplaced ellipsis in syntax form" B3eeb@src)) B3ef9@ls/false) ((lambda (B3eff@t) ((lambda (B3f01@ls/false) (if (and B3f01@ls/false (apply (lambda (B3f03@id) (B2e43@id? B3f03@id)) B3f01@ls/false)) (apply (lambda (B3f05@id) ((lambda (B3f07@label) ((lambda (B3f09@b) ((lambda () (if (eq? (B2e5f@binding-type B3f09@b) 'syntax) (call-with-values (lambda () ((lambda (B3f0f@var.lev) (B3e76@gen-ref B3eeb@src (car B3f0f@var.lev) (cdr B3f0f@var.lev) B3eee@maps)) (B2e61@binding-value B3f09@b))) (lambda (B3f11@B3f0c B3f12@B3f0e) ((lambda (B3f15@maps B3f16@var) (values (list 'ref B3f16@var) B3f15@maps)) B3f12@B3f0e B3f11@B3f0c))) (values (list 'quote B3eec@e) B3eee@maps))))) (B2e5b@label->binding B3f07@label B3eed@r))) (B2e59@id->label B3eec@e))) B3f01@ls/false) ((lambda (B3f19@t) ((lambda (B3f1b@ls/false) (if (and B3f1b@ls/false (apply (lambda (B3f1d@dots B3f1e@e) (B3eef@ellipsis? B3f1d@dots)) B3f1b@ls/false)) (apply (lambda (B3f21@dots B3f22@e) (if B3ef0@vec? (B3128@syntax-violation '#f '"misplaced ellipsis in syntax form" B3eeb@src) (B3e74@gen-syntax B3eeb@src B3f22@e B3eed@r B3eee@maps (lambda (B3f25@x) '#f) '#f))) B3f1b@ls/false) ((lambda (B3f27@t) ((lambda (B3f29@ls/false) (if (and B3f29@ls/false (apply (lambda (B3f2b@x B3f2c@dots B3f2d@y) (B3eef@ellipsis? B3f2c@dots)) B3f29@ls/false)) (apply (lambda (B3f31@x B3f32@dots B3f33@y) ((letrec ((B3f37@f (lambda (B3f39@y B3f3a@k) ((lambda (B3f3d@t) ((lambda (B3f3f@ls/false) (if B3f3f@ls/false (apply (lambda () (B3f3a@k B3eee@maps)) B3f3f@ls/false) ((lambda (B3f41@t) ((lambda (B3f43@ls/false) (if (and B3f43@ls/false (apply (lambda (B3f45@dots B3f46@y) (B3eef@ellipsis? B3f45@dots)) B3f43@ls/false)) (apply (lambda (B3f49@dots B3f4a@y) (B3f37@f B3f4a@y (lambda (B3f4d@maps) (call-with-values (lambda () (B3f3a@k (cons '() B3f4d@maps))) (lambda (B3f53@B3f50 B3f54@B3f52) ((lambda (B3f57@maps B3f58@x) (if (null? (car B3f57@maps)) (B3128@syntax-violation '#f '"extra ellipsis in syntax form" B3eeb@src) (values (B3e7a@gen-mappend B3f58@x (car B3f57@maps)) (cdr B3f57@maps)))) B3f54@B3f52 B3f53@B3f50)))))) B3f43@ls/false) ((lambda (B3f5b@t) ((lambda (B3f5d@ls/false) (if B3f5d@ls/false (apply (lambda () (call-with-values (lambda () (B3e74@gen-syntax B3eeb@src B3f39@y B3eed@r B3eee@maps B3eef@ellipsis? B3ef0@vec?)) (lambda (B3f63@B3f60 B3f64@B3f62) ((lambda (B3f67@maps B3f68@y) (call-with-values (lambda () (B3f3a@k B3f67@maps)) (lambda (B3f6f@B3f6c B3f70@B3f6e) ((lambda (B3f73@maps B3f74@x) (values (B3e78@gen-append B3f74@x B3f68@y) B3f73@maps)) B3f70@B3f6e B3f6f@B3f6c)))) B3f64@B3f62 B3f63@B3f60)))) B3f5d@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3f5b@t))) (B3048@syntax-dispatch B3f5b@t '_))) B3f41@t))) (B3048@syntax-dispatch B3f41@t '(any . any)))) B3f3d@t))) (B3048@syntax-dispatch B3f3d@t '()))) B3f39@y)))) B3f37@f) B3f33@y (lambda (B3f77@maps) (call-with-values (lambda () (B3e74@gen-syntax B3eeb@src B3f31@x B3eed@r (cons '() B3f77@maps) B3eef@ellipsis? '#f)) (lambda (B3f7d@B3f7a B3f7e@B3f7c) ((lambda (B3f81@maps B3f82@x) (if (null? (car B3f81@maps)) (B3128@syntax-violation '#f '"extra ellipsis in syntax form" B3eeb@src) (values (B3e7c@gen-map B3f82@x (car B3f81@maps)) (cdr B3f81@maps)))) B3f7e@B3f7c B3f7d@B3f7a)))))) B3f29@ls/false) ((lambda (B3f85@t) ((lambda (B3f87@ls/false) (if B3f87@ls/false (apply (lambda (B3f89@x B3f8a@y) (call-with-values (lambda () (B3e74@gen-syntax B3eeb@src B3f89@x B3eed@r B3eee@maps B3eef@ellipsis? '#f)) (lambda (B3f91@B3f8e B3f92@B3f90) ((lambda (B3f95@maps B3f96@xnew) (call-with-values (lambda () (B3e74@gen-syntax B3eeb@src B3f8a@y B3eed@r B3f95@maps B3eef@ellipsis? B3ef0@vec?)) (lambda (B3f9d@B3f9a B3f9e@B3f9c) ((lambda (B3fa1@maps B3fa2@ynew) (values (B3e7e@gen-cons B3eec@e B3f89@x B3f8a@y B3f96@xnew B3fa2@ynew) B3fa1@maps)) B3f9e@B3f9c B3f9d@B3f9a)))) B3f92@B3f90 B3f91@B3f8e)))) B3f87@ls/false) ((lambda (B3fa5@t) ((lambda (B3fa7@ls/false) (if B3fa7@ls/false (apply (lambda (B3fa9@ls) (call-with-values (lambda () (B3e74@gen-syntax B3eeb@src B3fa9@ls B3eed@r B3eee@maps B3eef@ellipsis? '#t)) (lambda (B3faf@B3fac B3fb0@B3fae) ((lambda (B3fb3@maps B3fb4@lsnew) (values (B3e80@gen-vector B3eec@e B3fa9@ls B3fb4@lsnew) B3fb3@maps)) B3fb0@B3fae B3faf@B3fac)))) B3fa7@ls/false) ((lambda (B3fb7@t) ((lambda (B3fb9@ls/false) (if B3fb9@ls/false (apply (lambda () (values (list 'quote B3eec@e) B3eee@maps)) B3fb9@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3fb7@t))) (B3048@syntax-dispatch B3fb7@t '_))) B3fa5@t))) (B3048@syntax-dispatch B3fa5@t '#(vector each-any)))) B3f85@t))) (B3048@syntax-dispatch B3f85@t '(any . any)))) B3f27@t))) (B3048@syntax-dispatch B3f27@t '(any any . any)))) B3f19@t))) (B3048@syntax-dispatch B3f19@t '(any any)))) B3eff@t))) (B3048@syntax-dispatch B3eff@t 'any))) B3ef7@t))) (B3048@syntax-dispatch B3ef7@t 'any))) B3eec@e))) (set! B3e76@gen-ref (lambda (B3ed1@src B3ed2@var B3ed3@level B3ed4@maps) (if (= B3ed3@level '0) (values B3ed2@var B3ed4@maps) (if (null? B3ed4@maps) (B3128@syntax-violation '#f '"missing ellipsis in syntax form" B3ed1@src) (call-with-values (lambda () (B3e76@gen-ref B3ed1@src B3ed2@var (- B3ed3@level '1) (cdr B3ed4@maps))) (lambda (B3edd@B3eda B3ede@B3edc) ((lambda (B3ee1@outer-maps B3ee2@outer-var) ((lambda (B3ee5@t) (if B3ee5@t ((lambda (B3ee7@b) (values (cdr B3ee7@b) B3ed4@maps)) B3ee5@t) ((lambda (B3ee9@inner-var) (values B3ee9@inner-var (cons (cons (cons B3ee2@outer-var B3ee9@inner-var) (car B3ed4@maps)) B3ee1@outer-maps))) (B2dcb@gen-lexical 'tmp)))) (assq B3ee2@outer-var (car B3ed4@maps)))) B3ede@B3edc B3edd@B3eda))))))) (set! B3e78@gen-append (lambda (B3ecd@x B3ece@y) (if (fast-equal? B3ece@y ''()) B3ecd@x (list 'append B3ecd@x B3ece@y)))) (set! B3e7a@gen-mappend (lambda (B3ec9@e B3eca@map-env) (list 'apply '(primitive append) (B3e7c@gen-map B3ec9@e B3eca@map-env)))) (set! B3e7c@gen-map (lambda (B3eb7@e B3eb8@map-env) ((lambda (B3ebb@formals B3ebc@actuals) (if (eq? (car B3eb7@e) 'ref) (car B3ebc@actuals) (if (for-all (lambda (B3ebf@x) (and (eq? (car B3ebf@x) 'ref) (memq (cadr B3ebf@x) B3ebb@formals))) (cdr B3eb7@e)) ((lambda (B3ec1@args) (cons 'map (cons (list 'primitive (car B3eb7@e)) B3ec1@args))) (map ((lambda (B3ec3@r) (lambda (B3ec5@x) (cdr (assq (cadr B3ec5@x) B3ec3@r)))) (map cons B3ebb@formals B3ebc@actuals)) (cdr B3eb7@e))) (cons* 'map (list 'lambda B3ebb@formals B3eb7@e) B3ebc@actuals)))) (map cdr B3eb8@map-env) (map (lambda (B3ec7@x) (list 'ref (car B3ec7@x))) B3eb8@map-env)))) (set! B3e7e@gen-cons (lambda (B3ea7@e B3ea8@x B3ea9@y B3eaa@xnew B3eab@ynew) ((lambda (B3eb1@t) (if (memv B3eb1@t '(quote)) (if (eq? (car B3eaa@xnew) 'quote) ((lambda (B3eb3@xnew B3eb4@ynew) (if (and (eq? B3eb3@xnew B3ea8@x) (eq? B3eb4@ynew B3ea9@y)) (list 'quote B3ea7@e) (list 'quote (cons B3eb3@xnew B3eb4@ynew)))) (cadr B3eaa@xnew) (cadr B3eab@ynew)) (if (null? (cadr B3eab@ynew)) (list 'list B3eaa@xnew) (list 'cons B3eaa@xnew B3eab@ynew))) (if (memv B3eb1@t '(list)) (cons 'list (cons B3eaa@xnew (cdr B3eab@ynew))) (list 'cons B3eaa@xnew B3eab@ynew)))) (car B3eab@ynew)))) (set! B3e80@gen-vector (lambda (B3ea1@e B3ea2@ls B3ea3@lsnew) (if (eq? (car B3ea3@lsnew) 'quote) (if (eq? (cadr B3ea3@lsnew) B3ea2@ls) (list 'quote B3ea1@e) (list 'quote (list->vector (cadr B3ea3@lsnew)))) (if (eq? (car B3ea3@lsnew) 'list) (cons 'vector (cdr B3ea3@lsnew)) (list 'list->vector B3ea3@lsnew))))) (set! B3e82@regen (lambda (B3e9b@x) ((lambda (B3e9d@t) (if (memv B3e9d@t '(ref)) (cadr B3e9b@x) (if (memv B3e9d@t '(primitive)) (list 'primitive (cadr B3e9b@x)) (if (memv B3e9d@t '(quote)) (list 'quote (cadr B3e9b@x)) (if (memv B3e9d@t '(lambda)) (B2da7@B2ce7@build-lambda '#f (cadr B3e9b@x) (B3e82@regen (caddr B3e9b@x))) (if (memv B3e9d@t '(map)) ((lambda (B3e9f@ls) (cons '(primitive ellipsis-map) B3e9f@ls)) (map B3e82@regen (cdr B3e9b@x))) (cons (list 'primitive (car B3e9b@x)) (map B3e82@regen (cdr B3e9b@x))))))))) (car B3e9b@x)))) (lambda (B3e83@e B3e84@r B3e85@mr) ((lambda (B3e89@t) ((lambda (B3e8b@ls/false) (if B3e8b@ls/false (apply (lambda (B3e8d@x) (call-with-values (lambda () (B3e74@gen-syntax B3e83@e B3e8d@x B3e84@r '() B304a@ellipsis? '#f)) (lambda (B3e93@B3e90 B3e94@B3e92) ((lambda (B3e97@maps B3e98@e) (B3e82@regen B3e98@e)) B3e94@B3e92 B3e93@B3e90)))) B3e8b@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3e89@t))) (B3048@syntax-dispatch B3e89@t '(_ any)))) B3e83@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! B3056@core-macro-transformer (lambda (B3fbb@name) ((lambda (B3fbd@t) (if (memv B3fbd@t '(quote)) B2ff8@quote-transformer (if (memv B3fbd@t '(lambda)) B2ffc@lambda-transformer (if (memv B3fbd@t '(case-lambda)) B2ffa@case-lambda-transformer (if (memv B3fbd@t '(letrec)) B2fe0@letrec-transformer (if (memv B3fbd@t '(letrec*)) B2fe2@letrec*-transformer (if (memv B3fbd@t '(if)) B2ff0@if-transformer (if (memv B3fbd@t '(and)) B2ff2@and-transformer (if (memv B3fbd@t '(or)) B2ff4@or-transformer (if (memv B3fbd@t '(foreign-call)) B3044@foreign-call-transformer (if (memv B3fbd@t '(syntax-case)) B3050@syntax-case-transformer (if (memv B3fbd@t '(syntax)) B3054@syntax-transformer (if (memv B3fbd@t '(type-descriptor)) B2fe6@type-descriptor-transformer (if (memv B3fbd@t '(record-type-descriptor)) B2fe8@record-type-descriptor-transformer (if (memv B3fbd@t '(record-constructor-descriptor)) B2fea@record-constructor-descriptor-transformer (if (memv B3fbd@t '(fluid-let-syntax)) B2fe4@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" B3fbb@name))))))))))))))))) B3fbb@name))) (set! B3058@symbol-macro (lambda (B3fbf@x B3fc0@set) ((lambda (B3fc3@t) ((lambda (B3fc5@ls/false) (if (and B3fc5@ls/false (apply (lambda (B3fc7@name) (and (B2e43@id? B3fc7@name) (memq (B2e45@id->sym B3fc7@name) B3fc0@set))) B3fc5@ls/false)) (apply (lambda (B3fc9@name) (B2ffe@bless (list 'quote B3fc9@name))) B3fc5@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B3fc3@t))) (B3048@syntax-dispatch B3fc3@t '(_ any)))) B3fbf@x))) (set! B305a@macro-transformer (lambda (B3fcb@x) (if (procedure? B3fcb@x) B3fcb@x (if (symbol? B3fcb@x) ((lambda (B3fcd@t) (if (memv B3fcd@t '(define-record-type)) B303c@define-record-type-macro (if (memv B3fcd@t '(define-struct)) B303a@define-struct-macro (if (memv B3fcd@t '(include)) B3030@include-macro (if (memv B3fcd@t '(cond)) B302c@cond-macro (if (memv B3fcd@t '(let)) B3004@let-macro (if (memv B3fcd@t '(do)) B3024@do-macro (if (memv B3fcd@t '(or)) B3028@or-macro (if (memv B3fcd@t '(and)) B302a@and-macro (if (memv B3fcd@t '(let*)) B3026@let*-macro (if (memv B3fcd@t '(let-values)) B3006@let-values-macro (if (memv B3fcd@t '(let*-values)) B3008@let*-values-macro (if (memv B3fcd@t '(syntax-rules)) B3034@syntax-rules-macro (if (memv B3fcd@t '(quasiquote)) B3036@quasiquote-macro (if (memv B3fcd@t '(quasisyntax)) B3038@quasisyntax-macro (if (memv B3fcd@t '(with-syntax)) B3000@with-syntax-macro (if (memv B3fcd@t '(when)) B2fec@when-macro (if (memv B3fcd@t '(unless)) B2fee@unless-macro (if (memv B3fcd@t '(case)) B2ff6@case-macro (if (memv B3fcd@t '(identifier-syntax)) B3022@identifier-syntax-macro (if (memv B3fcd@t '(time)) B301a@time-macro (if (memv B3fcd@t '(delay)) B301c@delay-macro (if (memv B3fcd@t '(assert)) B301e@assert-macro (if (memv B3fcd@t '(endianness)) B3020@endianness-macro (if (memv B3fcd@t '(guard)) B3016@guard-macro (if (memv B3fcd@t '(define-enumeration)) B3018@define-enumeration-macro (if (memv B3fcd@t '(trace-lambda)) B300a@trace-lambda-macro (if (memv B3fcd@t '(trace-define)) B300c@trace-define-macro (if (memv B3fcd@t '(trace-define-syntax)) B300e@trace-define-syntax-macro (if (memv B3fcd@t '(trace-let-syntax)) B3012@trace-let-syntax-macro (if (memv B3fcd@t '(trace-letrec-syntax)) B3014@trace-letrec-syntax-macro (if (memv B3fcd@t '(define-condition-type)) B303e@define-condition-type-macro (if (memv B3fcd@t '(parameterize)) B3042@parameterize-macro (if (memv B3fcd@t '(include-into)) B3032@include-into-macro (if (memv B3fcd@t '(eol-style)) (lambda (B3fcf@x) (B3058@symbol-macro B3fcf@x '(none lf cr crlf nel crnel ls))) (if (memv B3fcd@t '(error-handling-mode)) (lambda (B3fd1@x) (B3058@symbol-macro B3fd1@x '(ignore raise replace))) (if (memv B3fcd@t '(buffer-mode)) (lambda (B3fd3@x) (B3058@symbol-macro B3fd3@x '(none line block))) (if (memv B3fcd@t '(file-options)) B2dbe@file-options-macro (if (memv B3fcd@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) B3040@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" B3fcb@x)))))))))))))))))))))))))))))))))))))))) B3fcb@x) (error 'core-macro-transformer '"BUG: invalid macro" B3fcb@x))))) (set! B305c@local-macro-transformer (lambda (B3fd5@x) (car B3fd5@x))) (set! B305e@do-macro-call (lambda (B3fd7@transformer B3fd8@expr) ((lambda (B3fdb@out) (begin ((letrec ((B3fdd@f (lambda (B3fdf@x) (if (not (B2e0f@stx? B3fdf@x)) (if (pair? B3fdf@x) (begin (B3fdd@f (car B3fdf@x)) (B3fdd@f (cdr B3fdf@x))) (if (vector? B3fdf@x) (vector-for-each B3fdd@f B3fdf@x) (if (symbol? B3fdf@x) (B3128@syntax-violation '#f '"raw symbol encountered in output of macro" B3fd8@expr B3fdf@x) (void)))) (void))))) B3fdd@f) B3fdb@out) (B2e2d@add-mark (B2e25@gen-mark) B3fdb@out B3fd8@expr))) (B3fd7@transformer (B2e2d@add-mark B2e27@anti-mark B3fd8@expr '#f))))) (set! B3060@chi-macro (lambda (B3fe1@p B3fe2@e) (B305e@do-macro-call (B305a@macro-transformer B3fe1@p) B3fe2@e))) (set! B3062@chi-local-macro (lambda (B3fe5@p B3fe6@e) (B305e@do-macro-call (B305c@local-macro-transformer B3fe5@p) B3fe6@e))) (set! B3064@chi-global-macro (lambda (B3fe9@p B3fea@e) ((lambda (B3fed@lib B3fee@loc) (begin (B2c6f@B2abe@visit-library B3fed@lib) ((lambda (B3ff1@x) ((lambda (B3ff3@transformer) (B305e@do-macro-call B3ff3@transformer B3fea@e)) (if (procedure? B3ff1@x) B3ff1@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" B3ff1@x)))) (symbol-value B3fee@loc)))) (car B3fe9@p) (cdr B3fe9@p)))) (set! B3066@chi-expr* (lambda (B3ff5@e* B3ff6@r B3ff7@mr) (if (null? B3ff5@e*) '() ((lambda (B3ffb@e) (cons B3ffb@e (B3066@chi-expr* (cdr B3ff5@e*) B3ff6@r B3ff7@mr))) (B306a@chi-expr (car B3ff5@e*) B3ff6@r B3ff7@mr))))) (set! B3068@chi-application (lambda (B3ffd@e B3ffe@r B3fff@mr) ((lambda (B4003@t) ((lambda (B4005@ls/false) (if B4005@ls/false (apply (lambda (B4007@rator B4008@rands) ((lambda (B400b@rator) (cons B400b@rator (B3066@chi-expr* B4008@rands B3ffe@r B3fff@mr))) (B306a@chi-expr B4007@rator B3ffe@r B3fff@mr))) B4005@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B4003@t))) (B3048@syntax-dispatch B4003@t '(any . each-any)))) B3ffd@e))) (set! B306a@chi-expr (lambda (B400d@e B400e@r B400f@mr) (call-with-values (lambda () (B2e65@syntax-type B400d@e B400e@r)) (lambda (B4019@B4014 B401a@B4016 B401b@B4018) ((lambda (B401f@kwd B4020@value B4021@type) ((lambda (B4025@t) (if (memv B4025@t '(core-macro)) ((lambda (B4027@transformer) (B4027@transformer B400d@e B400e@r B400f@mr)) (B3056@core-macro-transformer B4020@value)) (if (memv B4025@t '(global)) ((lambda (B4029@lib) ((lambda (B402b@loc) ((lambda () (begin ((B30b0@inv-collector) B4029@lib) B402b@loc)))) (cdr B4020@value))) (car B4020@value)) (if (memv B4025@t '(core-prim)) ((lambda (B402d@name) (list 'primitive B402d@name)) B4020@value) (if (memv B4025@t '(call)) (B3068@chi-application B400d@e B400e@r B400f@mr) (if (memv B4025@t '(lexical)) ((lambda (B402f@lex) B402f@lex) (B2fd4@lexical-var B4020@value)) (if (memv B4025@t '(global-macro global-macro!)) (B306a@chi-expr (B3064@chi-global-macro B4020@value B400d@e) B400e@r B400f@mr) (if (memv B4025@t '(local-macro local-macro!)) (B306a@chi-expr (B3062@chi-local-macro B4020@value B400d@e) B400e@r B400f@mr) (if (memv B4025@t '(macro macro!)) (B306a@chi-expr (B3060@chi-macro B4020@value B400d@e) B400e@r B400f@mr) (if (memv B4025@t '(constant)) ((lambda (B4031@datum) (list 'quote B4031@datum)) B4020@value) (if (memv B4025@t '(set!)) (B306c@chi-set! B400d@e B400e@r B400f@mr) (if (memv B4025@t '(begin)) ((lambda (B4033@t) ((lambda (B4035@ls/false) (if B4035@ls/false (apply (lambda (B4037@x B4038@x*) (B2daa@B2d19@build-sequence '#f (B3066@chi-expr* (cons B4037@x B4038@x*) B400e@r B400f@mr))) B4035@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B4033@t))) (B3048@syntax-dispatch B4033@t '(_ any . each-any)))) B400d@e) (if (memv B4025@t '(let-syntax letrec-syntax)) ((lambda (B403b@t) ((lambda (B403d@ls/false) (if (and B403d@ls/false (apply (lambda (B403f@xlhs* B4040@xrhs* B4041@xbody B4042@xbody*) (if (not (B2e4b@valid-bound-ids? B403f@xlhs*)) (B3128@syntax-violation '#f '"invalid identifiers" B400d@e) (void))) B403d@ls/false)) (apply (lambda (B4047@xlhs* B4048@xrhs* B4049@xbody B404a@xbody*) ((lambda (B404f@xlab*) ((lambda (B4051@xrib) ((lambda (B4053@xb*) ((lambda () (B2daa@B2d19@build-sequence '#f (B3066@chi-expr* (map (lambda (B4055@x) (B2e2f@add-subst B4051@xrib B4055@x)) (cons B4049@xbody B404a@xbody*)) (append (map cons B404f@xlab* B4053@xb*) B400e@r) (append (map cons B404f@xlab* B4053@xb*) B400f@mr)))))) (map (lambda (B4057@x) (B2e7b@make-eval-transformer (B30a2@expand-transformer (if (eq? B4021@type 'let-syntax) B4057@x (B2e2f@add-subst B4051@xrib B4057@x)) B400f@mr))) B4048@xrhs*))) (B2e03@make-full-rib B4047@xlhs* B404f@xlab*))) (map B2dcf@gen-label B4047@xlhs*))) B403d@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B403b@t))) (B3048@syntax-dispatch B403b@t '(_ #(each (any any)) any . each-any)))) B400d@e) (if (memv B4025@t '(displaced-lexical)) (B3128@syntax-violation '#f '"identifier out of context" B400d@e) (if (memv B4025@t '(syntax)) (B3128@syntax-violation '#f '"reference to pattern variable outside a syntax form" B400d@e) (if (memv B4025@t '(define define-syntax module import library)) (B3128@syntax-violation '#f (string-append ((lambda (B4059@t) (if (memv B4059@t '(define)) '"a definition" (if (memv B4059@t '(define-syntax)) '"a define-syntax" (if (memv B4059@t '(module)) '"a module definition" (if (memv B4059@t '(library)) '"a library definition" (if (memv B4059@t '(import)) '"an import declaration" (if (memv B4059@t '(export)) '"an export declaration" '"a non-expression"))))))) B4021@type) '" was found where an expression was expected") B400d@e) (if (memv B4025@t '(mutable)) (B3128@syntax-violation '#f '"attempt to reference an unexportable variable" B400d@e) (B3128@syntax-violation '#f '"invalid expression" B400d@e)))))))))))))))))) B4021@type)) B401b@B4018 B401a@B4016 B4019@B4014))))) (set! B306c@chi-set! (lambda (B405b@e B405c@r B405d@mr) ((lambda (B4061@t) ((lambda (B4063@ls/false) (if (and B4063@ls/false (apply (lambda (B4065@x B4066@v) (B2e43@id? B4065@x)) B4063@ls/false)) (apply (lambda (B4069@x B406a@v) (call-with-values (lambda () (B2e65@syntax-type B4069@x B405c@r)) (lambda (B4073@B406e B4074@B4070 B4075@B4072) ((lambda (B4079@kwd B407a@value B407b@type) ((lambda (B407f@t) (if (memv B407f@t '(lexical)) (begin (B2fd8@set-lexical-mutable! B407a@value '#t) (list 'set! (B2fd4@lexical-var B407a@value) (B306a@chi-expr B406a@v B405c@r B405d@mr))) (if (memv B407f@t '(core-prim)) (B3128@syntax-violation '#f '"cannot modify imported core primitive" B405b@e) (if (memv B407f@t '(global)) (B3128@syntax-violation '#f '"attempt to modify imported binding" B405b@e) (if (memv B407f@t '(global-macro!)) (B306a@chi-expr (B3064@chi-global-macro B407a@value B405b@e) B405c@r B405d@mr) (if (memv B407f@t '(local-macro!)) (B306a@chi-expr (B3062@chi-local-macro B407a@value B405b@e) B405c@r B405d@mr) (if (memv B407f@t '(mutable)) (B3128@syntax-violation '#f '"attempt to assign to an unexportable variable" B405b@e) (B3128@syntax-violation '#f '"invalid syntax" B405b@e)))))))) B407b@type)) B4075@B4072 B4074@B4070 B4073@B406e)))) B4063@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B4061@t))) (B3048@syntax-dispatch B4061@t '(_ any any)))) B405b@e))) (set! B306e@verify-formals (lambda (B4081@fmls B4082@stx) ((lambda (B4085@t) ((lambda (B4087@ls/false) (if B4087@ls/false (apply (lambda (B4089@x*) (if (not (B2e4b@valid-bound-ids? B4089@x*)) (B3002@invalid-fmls-error B4082@stx B4081@fmls) (void))) B4087@ls/false) ((lambda (B408b@t) ((lambda (B408d@ls/false) (if B408d@ls/false (apply (lambda (B408f@x* B4090@x) (if (not (B2e4b@valid-bound-ids? (cons B4090@x B408f@x*))) (B3002@invalid-fmls-error B4082@stx B4081@fmls) (void))) B408d@ls/false) ((lambda (B4093@t) ((lambda (B4095@ls/false) (if B4095@ls/false (apply (lambda () (B3128@syntax-violation '#f '"invalid syntax" B4082@stx)) B4095@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B4093@t))) (B3048@syntax-dispatch B4093@t '_))) B408b@t))) (B3048@syntax-dispatch B408b@t '#(each+ any () any)))) B4085@t))) (B3048@syntax-dispatch B4085@t 'each-any))) B4081@fmls))) (set! B3070@chi-lambda-clause (lambda (B4097@stx B4098@fmls B4099@body* B409a@r B409b@mr) ((lambda (B40a1@t) ((lambda (B40a3@ls/false) (if B40a3@ls/false (apply (lambda (B40a5@x*) (begin (B306e@verify-formals B4098@fmls B4097@stx) ((lambda (B40a7@lex* B40a8@lab*) (values B40a7@lex* (B3080@chi-internal (B2e2f@add-subst (B2e03@make-full-rib B40a5@x* B40a8@lab*) B4099@body*) (B2fdc@add-lexicals B40a8@lab* B40a7@lex* B409a@r) B409b@mr))) (map B2dcb@gen-lexical B40a5@x*) (map B2dcf@gen-label B40a5@x*)))) B40a3@ls/false) ((lambda (B40ab@t) ((lambda (B40ad@ls/false) (if B40ad@ls/false (apply (lambda (B40af@x* B40b0@x) (begin (B306e@verify-formals B4098@fmls B4097@stx) ((lambda (B40b3@lex* B40b4@lab* B40b5@lex B40b6@lab) (values (append B40b3@lex* B40b5@lex) (B3080@chi-internal (B2e2f@add-subst (B2e03@make-full-rib (cons B40b0@x B40af@x*) (cons B40b6@lab B40b4@lab*)) B4099@body*) (B2fdc@add-lexicals (cons B40b6@lab B40b4@lab*) (cons B40b5@lex B40b3@lex*) B409a@r) B409b@mr))) (map B2dcb@gen-lexical B40af@x*) (map B2dcf@gen-label B40af@x*) (B2dcb@gen-lexical B40b0@x) (B2dcf@gen-label B40b0@x)))) B40ad@ls/false) ((lambda (B40bb@t) ((lambda (B40bd@ls/false) (if B40bd@ls/false (apply (lambda () (B3128@syntax-violation '#f '"invalid syntax" B4098@fmls)) B40bd@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B40bb@t))) (B3048@syntax-dispatch B40bb@t '_))) B40ab@t))) (B3048@syntax-dispatch B40ab@t '#(each+ any () any)))) B40a1@t))) (B3048@syntax-dispatch B40a1@t 'each-any))) B4098@fmls))) (set! B3072@chi-lambda-clause* (lambda (B40bf@stx B40c0@fmls* B40c1@body** B40c2@r B40c3@mr) (if (null? B40c0@fmls*) (values '() '()) (call-with-values (lambda () (B3070@chi-lambda-clause B40bf@stx (car B40c0@fmls*) (car B40c1@body**) B40c2@r B40c3@mr)) (lambda (B40cd@B40ca B40ce@B40cc) ((lambda (B40d1@b B40d2@a) (call-with-values (lambda () (B3072@chi-lambda-clause* B40bf@stx (cdr B40c0@fmls*) (cdr B40c1@body**) B40c2@r B40c3@mr)) (lambda (B40d9@B40d6 B40da@B40d8) ((lambda (B40dd@b* B40de@a*) (values (cons B40d2@a B40de@a*) (cons B40d1@b B40dd@b*))) B40da@B40d8 B40d9@B40d6)))) B40ce@B40cc B40cd@B40ca)))))) (set! B3074@chi-defun (lambda (B40e1@x B40e2@r B40e3@mr) ((lambda (B40e7@fmls B40e8@body*) (call-with-values (lambda () (B3070@chi-lambda-clause B40e7@fmls B40e7@fmls B40e8@body* B40e2@r B40e3@mr)) (lambda (B40ef@B40ec B40f0@B40ee) ((lambda (B40f3@body B40f4@fmls) (B2da7@B2ce7@build-lambda '#f B40f4@fmls B40f3@body)) B40f0@B40ee B40ef@B40ec)))) (car B40e1@x) (cdr B40e1@x)))) (set! B3076@chi-rhs (lambda (B40f7@rhs B40f8@r B40f9@mr) ((lambda (B40fd@t) (if (memv B40fd@t '(defun)) (B3074@chi-defun (cdr B40f7@rhs) B40f8@r B40f9@mr) (if (memv B40fd@t '(expr)) ((lambda (B40ff@expr) (B306a@chi-expr B40ff@expr B40f8@r B40f9@mr)) (cdr B40f7@rhs)) (if (memv B40fd@t '(top-expr)) ((lambda (B4101@expr) (B2daa@B2d19@build-sequence '#f (list (B306a@chi-expr B4101@expr B40f8@r B40f9@mr) (B2dab@B2d1b@build-void)))) (cdr B40f7@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" B40f7@rhs))))) (car B40f7@rhs)))) (set! B3078@expand-interaction-rhs*/init* (lambda (B4103@lhs* B4104@rhs* B4105@init* B4106@r B4107@mr) ((letrec ((B410d@f (lambda (B410f@lhs* B4110@rhs*) (if (null? B410f@lhs*) (map (lambda (B4113@x) (B306a@chi-expr B4113@x B4106@r B4107@mr)) B4105@init*) ((lambda (B4115@lhs B4116@rhs) ((lambda (B4119@t) (if (memv B4119@t '(defun)) ((lambda (B411b@rhs) (cons (list 'set! B4115@lhs B411b@rhs) (B410d@f (cdr B410f@lhs*) (cdr B4110@rhs*)))) (B3074@chi-defun (cdr B4116@rhs) B4106@r B4107@mr)) (if (memv B4119@t '(expr)) ((lambda (B411d@rhs) (cons (list 'set! B4115@lhs B411d@rhs) (B410d@f (cdr B410f@lhs*) (cdr B4110@rhs*)))) (B306a@chi-expr (cdr B4116@rhs) B4106@r B4107@mr)) (if (memv B4119@t '(top-expr)) ((lambda (B411f@e) (cons B411f@e (B410d@f (cdr B410f@lhs*) (cdr B4110@rhs*)))) (B306a@chi-expr (cdr B4116@rhs) B4106@r B4107@mr)) (error 'expand-interaction '"invallid" B4116@rhs))))) (car B4116@rhs))) (car B410f@lhs*) (car B4110@rhs*)))))) B410d@f) B4103@lhs* B4104@rhs*))) (set! B307a@chi-rhs* (lambda (B4121@rhs* B4122@r B4123@mr) ((letrec ((B4127@f (lambda (B4129@ls) (if (null? B4129@ls) '() ((lambda (B412b@a) (cons B412b@a (B4127@f (cdr B4129@ls)))) (B3076@chi-rhs (car B4129@ls) B4122@r B4123@mr)))))) B4127@f) B4121@rhs*))) (set! B307c@find-bound=? (lambda (B412d@x B412e@lhs* B412f@rhs*) (if (null? B412e@lhs*) '#f (if (B2e47@bound-id=? B412d@x (car B412e@lhs*)) (car B412f@rhs*) (B307c@find-bound=? B412d@x (cdr B412e@lhs*) (cdr B412f@rhs*)))))) (set! B307e@find-dups (lambda (B4133@ls) ((letrec ((B4135@f (lambda (B4137@ls B4138@dups) (if (null? B4137@ls) B4138@dups ((lambda (B413b@t) (if B413b@t ((lambda (B413d@x) (B4135@f (cdr B4137@ls) (cons (list (car B4137@ls) B413d@x) B4138@dups))) B413b@t) (B4135@f (cdr B4137@ls) B4138@dups))) (B307c@find-bound=? (car B4137@ls) (cdr B4137@ls) (cdr B4137@ls))))))) B4135@f) B4133@ls '()))) (set! B3080@chi-internal (lambda (B413f@e* B4140@r B4141@mr) ((lambda (B4145@rib) (call-with-values (lambda () (B30a0@chi-body* (map (lambda (B4157@x) (B2e2f@add-subst B4145@rib B4157@x)) (B2e41@syntax->list B413f@e*)) B4140@r B4141@mr '() '() '() '() '() B4145@rib '#f)) (lambda (B4159@B4148 B415a@B414a B415b@B414c B415c@B414e B415d@B4150 B415e@B4152 B415f@B4154 B4160@B4156) ((lambda (B4169@_exp* B416a@kwd* B416b@mod** B416c@rhs* B416d@lex* B416e@mr B416f@r B4170@e*) (begin (if (null? B4170@e*) (B3128@syntax-violation '#f '"no expression in body" B4170@e*) (void)) ((lambda (B4179@init*) ((lambda (B417b@rhs*) ((lambda () (B2dad@B2d1f@build-letrec* '#f (reverse B416d@lex*) (reverse B417b@rhs*) (B2daa@B2d19@build-sequence '#f B4179@init*))))) (B307a@chi-rhs* B416c@rhs* B416f@r B416e@mr))) (B3066@chi-expr* (append (apply append (reverse B416b@mod**)) B4170@e*) B416f@r B416e@mr)))) B4160@B4156 B415f@B4154 B415e@B4152 B415d@B4150 B415c@B414e B415b@B414c B415a@B414a B4159@B4148)))) (B2df7@make-empty-rib)))) (set! B3082@parse-module (lambda (B417d@e) ((lambda (B417f@t) ((lambda (B4181@ls/false) (if B4181@ls/false (apply (lambda (B4183@export* B4184@b*) (begin (if (not (for-all B2e43@id? B4183@export*)) (B3128@syntax-violation '#f '"module exports must be identifiers" B417d@e) (void)) (values '#f (list->vector B4183@export*) B4184@b*))) B4181@ls/false) ((lambda (B4187@t) ((lambda (B4189@ls/false) (if B4189@ls/false (apply (lambda (B418b@name B418c@export* B418d@b*) (begin (if (not (B2e43@id? B418b@name)) (B3128@syntax-violation '#f '"module name must be an identifier" B417d@e) (void)) (if (not (for-all B2e43@id? B418c@export*)) (B3128@syntax-violation '#f '"module exports must be identifiers" B417d@e) (void)) (values B418b@name (list->vector B418c@export*) B418d@b*))) B4189@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B4187@t))) (B3048@syntax-dispatch B4187@t '(_ any each-any . each-any)))) B417f@t))) (B3048@syntax-dispatch B417f@t '(_ each-any . each-any)))) B417d@e))) (set! B308c@module-interface? (lambda (B4191@x) (and (simple-struct? B4191@x) (eq? (simple-struct-name B4191@x) 'module-interface)))) (set! B308e@module-interface-first-mark (lambda (B4193@x) (simple-struct-ref B4193@x '0))) (set! B3090@set-module-interface-first-mark! (lambda (B4195@x B4196@val) (simple-struct-set! B4195@x '0 B4196@val))) (set! B3092@module-interface-exp-id-vec (lambda (B4199@x) (simple-struct-ref B4199@x '1))) (set! B3094@set-module-interface-exp-id-vec! (lambda (B419b@x B419c@val) (simple-struct-set! B419b@x '1 B419c@val))) (set! B3096@module-interface-exp-lab-vec (lambda (B419f@x) (simple-struct-ref B419f@x '2))) (set! B3098@set-module-interface-exp-lab-vec! (lambda (B41a1@x B41a2@val) (simple-struct-set! B41a1@x '2 B41a2@val))) (set! B309a@dummy '3) (set! B309c@module-interface-exp-id* (lambda (B41a5@iface B41a6@id) ((lambda (B41aa@diff-marks) (begin (set! B41aa@diff-marks (lambda (B41b1@ls B41b2@x) (begin (if (null? B41b1@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (B41b5@a) (if (eq? B41b5@a B41b2@x) '() (cons B41b5@a (B41aa@diff-marks (cdr B41b1@ls) B41b2@x)))) (car B41b1@ls))))) ((lambda (B41ab@diff B41ac@id-vec) (if (null? B41ab@diff) B41ac@id-vec (vector-map (lambda (B41af@x) (make-simple-struct 'stx '5 (list (B2e11@stx-expr B41af@x) (append B41ab@diff (B2e15@stx-mark* B41af@x)) '() '()))) B41ac@id-vec))) (B41aa@diff-marks (B2e15@stx-mark* B41a6@id) (B308e@module-interface-first-mark B41a5@iface)) (B3092@module-interface-exp-id-vec B41a5@iface)))) '#f))) (set! B309e@chi-internal-module (lambda (B41b7@e B41b8@r B41b9@mr B41ba@lex* B41bb@rhs* B41bc@mod** B41bd@kwd*) (call-with-values (lambda () (B3082@parse-module B41b7@e)) (lambda (B41cb@B41c6 B41cc@B41c8 B41cd@B41ca) ((lambda (B41d1@e* B41d2@exp-id* B41d3@name) ((lambda (B41d7@rib) ((lambda (B41d9@e*) ((lambda () (call-with-values (lambda () (B30a0@chi-body* B41d9@e* B41b8@r B41b9@mr B41ba@lex* B41bb@rhs* B41bc@mod** B41bd@kwd* '() B41d7@rib '#f)) (lambda (B41eb@B41dc B41ec@B41de B41ed@B41e0 B41ee@B41e2 B41ef@B41e4 B41f0@B41e6 B41f1@B41e8 B41f2@B41ea) ((lambda (B41fb@_exp* B41fc@kwd* B41fd@mod** B41fe@rhs* B41ff@lex* B4200@mr B4201@r B4202@e*) ((lambda (B420b@exp-lab* B420c@mod**) (if (not B41d3@name) (values B41ff@lex* B41fe@rhs* B41d2@exp-id* B420b@exp-lab* B4201@r B4200@mr B420c@mod** B41fc@kwd*) ((lambda (B420f@lab B4210@iface) (values B41ff@lex* B41fe@rhs* (vector B41d3@name) (vector B420f@lab) (cons (cons B420f@lab (cons '$module B4210@iface)) B4201@r) (cons (cons B420f@lab (cons '$module B4210@iface)) B4200@mr) B420c@mod** B41fc@kwd*)) (B2dcf@gen-label 'module) (make-simple-struct 'module-interface '4 (list (car (B2e15@stx-mark* B41d3@name)) (vector-map (lambda (B4213@x) (make-simple-struct 'stx '5 (list (B2e11@stx-expr B4213@x) (B2e15@stx-mark* B4213@x) '() '()))) B41d2@exp-id*) B420b@exp-lab*))))) (vector-map (lambda (B4215@x) (or (B2e59@id->label (make-simple-struct 'stx '5 (list (B2e45@id->sym B4215@x) (B2e15@stx-mark* B4215@x) (list B41d7@rib) '()))) (B3128@syntax-violation '#f '"cannot find module export" B4215@x))) B41d2@exp-id*) (cons B4202@e* B41fd@mod**))) B41f2@B41ea B41f1@B41e8 B41f0@B41e6 B41ef@B41e4 B41ee@B41e2 B41ed@B41e0 B41ec@B41de B41eb@B41dc)))))) (map (lambda (B4217@x) (B2e2f@add-subst B41d7@rib B4217@x)) (B2e41@syntax->list B41d1@e*)))) (B2df7@make-empty-rib))) B41cd@B41ca B41cc@B41c8 B41cb@B41c6))))) (set! B30a0@chi-body* (lambda (B4219@e* B421a@r B421b@mr B421c@lex* B421d@rhs* B421e@mod** B421f@kwd* B4220@exp* B4221@rib B4222@top?) (if (null? B4219@e*) (values B4219@e* B421a@r B421b@mr B421c@lex* B421d@rhs* B421e@mod** B421f@kwd* B4220@exp*) ((lambda (B422d@e) (call-with-values (lambda () (B2e65@syntax-type B422d@e B421a@r)) (lambda (B4235@B4230 B4236@B4232 B4237@B4234) ((lambda (B423b@kwd B423c@value B423d@type) ((lambda (B4241@kwd*) ((lambda (B4243@t) (if (memv B4243@t '(define)) (call-with-values (lambda () (B2fcc@parse-define B422d@e)) (lambda (B4249@B4246 B424a@B4248) ((lambda (B424d@rhs B424e@id) (begin (if (B2e4f@bound-id-member? B424e@id B4241@kwd*) (B3128@syntax-violation '#f '"cannot redefine keyword" B422d@e) (void)) (call-with-values (lambda () (B2dd3@gen-define-label+loc B424e@id B4221@rib)) (lambda (B4255@B4252 B4256@B4254) ((lambda (B4259@lex B425a@lab) (begin (B2df9@extend-rib! B4221@rib B424e@id B425a@lab) (B30a0@chi-body* (cdr B4219@e*) (B2fda@add-lexical B425a@lab B4259@lex B421a@r) B421b@mr (cons B4259@lex B421c@lex*) (cons B424d@rhs B421d@rhs*) B421e@mod** B4241@kwd* B4220@exp* B4221@rib B4222@top?))) B4256@B4254 B4255@B4252))))) B424a@B4248 B4249@B4246))) (if (memv B4243@t '(define-syntax)) (call-with-values (lambda () (B2fce@parse-define-syntax B422d@e)) (lambda (B4261@B425e B4262@B4260) ((lambda (B4265@rhs B4266@id) (begin (if (B2e4f@bound-id-member? B4266@id B4241@kwd*) (B3128@syntax-violation '#f '"cannot redefine keyword" B422d@e) (void)) ((lambda (B4269@lab B426a@expanded-rhs) (begin (B2df9@extend-rib! B4221@rib B4266@id B4269@lab) ((lambda (B426d@b) (B30a0@chi-body* (cdr B4219@e*) (cons (cons B4269@lab B426d@b) B421a@r) (cons (cons B4269@lab B426d@b) B421b@mr) B421c@lex* B421d@rhs* B421e@mod** B4241@kwd* B4220@exp* B4221@rib B4222@top?)) (B2e7b@make-eval-transformer B426a@expanded-rhs)))) (B2dd5@gen-define-label B4266@id B4221@rib) (B30a2@expand-transformer B4265@rhs B421b@mr)))) B4262@B4260 B4261@B425e))) (if (memv B4243@t '(let-syntax letrec-syntax)) ((lambda (B426f@t) ((lambda (B4271@ls/false) (if (and B4271@ls/false (apply (lambda (B4273@xlhs* B4274@xrhs* B4275@xbody*) (if (not (B2e4b@valid-bound-ids? B4273@xlhs*)) (B3128@syntax-violation '#f '"invalid identifiers" B422d@e) (void))) B4271@ls/false)) (apply (lambda (B4279@xlhs* B427a@xrhs* B427b@xbody*) ((lambda (B427f@xlab*) ((lambda (B4281@xrib) ((lambda (B4283@xb*) ((lambda () (B30a0@chi-body* (append (map (lambda (B4285@x) (B2e2f@add-subst B4281@xrib B4285@x)) B427b@xbody*) (cdr B4219@e*)) (append (map cons B427f@xlab* B4283@xb*) B421a@r) (append (map cons B427f@xlab* B4283@xb*) B421b@mr) B421c@lex* B421d@rhs* B421e@mod** B4241@kwd* B4220@exp* B4221@rib B4222@top?)))) (map (lambda (B4287@x) (B2e7b@make-eval-transformer (B30a2@expand-transformer (if (eq? B423d@type 'let-syntax) B4287@x (B2e2f@add-subst B4281@xrib B4287@x)) B421b@mr))) B427a@xrhs*))) (B2e03@make-full-rib B4279@xlhs* B427f@xlab*))) (map B2dcf@gen-label B4279@xlhs*))) B4271@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B426f@t))) (B3048@syntax-dispatch B426f@t '(_ #(each (any any)) . each-any)))) B422d@e) (if (memv B4243@t '(begin)) ((lambda (B4289@t) ((lambda (B428b@ls/false) (if B428b@ls/false (apply (lambda (B428d@x*) (B30a0@chi-body* (append B428d@x* (cdr B4219@e*)) B421a@r B421b@mr B421c@lex* B421d@rhs* B421e@mod** B4241@kwd* B4220@exp* B4221@rib B4222@top?)) B428b@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B4289@t))) (B3048@syntax-dispatch B4289@t '(_ . each-any)))) B422d@e) (if (memv B4243@t '(global-macro global-macro!)) (B30a0@chi-body* (cons (B2e2f@add-subst B4221@rib (B3064@chi-global-macro B423c@value B422d@e)) (cdr B4219@e*)) B421a@r B421b@mr B421c@lex* B421d@rhs* B421e@mod** B4241@kwd* B4220@exp* B4221@rib B4222@top?) (if (memv B4243@t '(local-macro local-macro!)) (B30a0@chi-body* (cons (B2e2f@add-subst B4221@rib (B3062@chi-local-macro B423c@value B422d@e)) (cdr B4219@e*)) B421a@r B421b@mr B421c@lex* B421d@rhs* B421e@mod** B4241@kwd* B4220@exp* B4221@rib B4222@top?) (if (memv B4243@t '(macro macro!)) (B30a0@chi-body* (cons (B2e2f@add-subst B4221@rib (B3060@chi-macro B423c@value B422d@e)) (cdr B4219@e*)) B421a@r B421b@mr B421c@lex* B421d@rhs* B421e@mod** B4241@kwd* B4220@exp* B4221@rib B4222@top?) (if (memv B4243@t '(module)) (call-with-values (lambda () (B309e@chi-internal-module B422d@e B421a@r B421b@mr B421c@lex* B421d@rhs* B421e@mod** B4241@kwd*)) (lambda (B429f@B4290 B42a0@B4292 B42a1@B4294 B42a2@B4296 B42a3@B4298 B42a4@B429a B42a5@B429c B42a6@B429e) ((lambda (B42af@kwd* B42b0@mod** B42b1@mr B42b2@r B42b3@m-exp-lab* B42b4@m-exp-id* B42b5@rhs* B42b6@lex*) (begin (vector-for-each (lambda (B42bf@id B42c0@lab) (B2df9@extend-rib! B4221@rib B42bf@id B42c0@lab)) B42b4@m-exp-id* B42b3@m-exp-lab*) (B30a0@chi-body* (cdr B4219@e*) B42b2@r B42b1@mr B42b6@lex* B42b5@rhs* B42b0@mod** B42af@kwd* B4220@exp* B4221@rib B4222@top?))) B42a6@B429e B42a5@B429c B42a4@B429a B42a3@B4298 B42a2@B4296 B42a1@B4294 B42a0@B4292 B429f@B4290))) (if (memv B4243@t '(library)) (begin (B310a@library-expander (B2e57@stx->datum B422d@e)) (B30a0@chi-body* (cdr B4219@e*) B421a@r B421b@mr B421c@lex* B421d@rhs* B421e@mod** B4241@kwd* B4220@exp* B4221@rib B4222@top?)) (if (memv B4243@t '(export)) ((lambda (B42c3@t) ((lambda (B42c5@ls/false) (if B42c5@ls/false (apply (lambda (B42c7@exp-decl*) (B30a0@chi-body* (cdr B4219@e*) B421a@r B421b@mr B421c@lex* B421d@rhs* B421e@mod** B4241@kwd* (append B42c7@exp-decl* B4220@exp*) B4221@rib B4222@top?)) B42c5@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B42c3@t))) (B3048@syntax-dispatch B42c3@t '(_ . each-any)))) B422d@e) (if (memv B4243@t '(import)) ((lambda () ((lambda (B42ca@module-import? B42cc@module-import B42ce@library-import) (begin (set! B42ca@module-import? (lambda (B431d@e) ((lambda (B431f@t) ((lambda (B4321@ls/false) (if (and B4321@ls/false (apply (lambda (B4323@id) (B2e43@id? B4323@id)) B4321@ls/false)) (apply (lambda (B4325@id) '#t) B4321@ls/false) ((lambda (B4327@t) ((lambda (B4329@ls/false) (if B4329@ls/false (apply (lambda (B432b@imp*) '#f) B4329@ls/false) ((lambda (B432d@t) ((lambda (B432f@ls/false) (if B432f@ls/false (apply (lambda () (B3128@syntax-violation '#f '"malformed import form" B431d@e)) B432f@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B432d@t))) (B3048@syntax-dispatch B432d@t '_))) B4327@t))) (B3048@syntax-dispatch B4327@t '(_ . each-any)))) B431f@t))) (B3048@syntax-dispatch B431f@t '(_ any)))) B431d@e))) (set! B42cc@module-import (lambda (B42fb@e B42fc@r) ((lambda (B42ff@t) ((lambda (B4301@ls/false) (if (and B4301@ls/false (apply (lambda (B4303@id) (B2e43@id? B4303@id)) B4301@ls/false)) (apply (lambda (B4305@id) (call-with-values (lambda () (B2e65@syntax-type B4305@id B42fc@r)) (lambda (B430d@B4308 B430e@B430a B430f@B430c) ((lambda (B4313@kwd B4314@value B4315@type) ((lambda (B4319@t) (if (memv B4319@t '($module)) ((lambda (B431b@iface) (values (B309c@module-interface-exp-id* B431b@iface B4305@id) (B3096@module-interface-exp-lab-vec B431b@iface))) B4314@value) (B3128@syntax-violation '#f '"invalid import" B42fb@e))) B4315@type)) B430f@B430c B430e@B430a B430d@B4308)))) B4301@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B42ff@t))) (B3048@syntax-dispatch B42ff@t '(_ any)))) B42fb@e))) (set! B42ce@library-import (lambda (B42df@e) ((lambda (B42e1@t) ((lambda (B42e3@ls/false) (if B42e3@ls/false (apply (lambda (B42e5@ctxt B42e6@imp*) (call-with-values (lambda () (B30aa@parse-import-spec* (B312e@syntax->datum B42e6@imp*))) (lambda (B42ed@B42ea B42ee@B42ec) ((lambda (B42f1@subst-labels B42f2@subst-names) (values (vector-map (lambda (B42f5@name) (B2e23@datum->stx B42e5@ctxt B42f5@name)) B42f2@subst-names) B42f1@subst-labels)) B42ee@B42ec B42ed@B42ea)))) B42e3@ls/false) ((lambda (B42f7@t) ((lambda (B42f9@ls/false) (if B42f9@ls/false (apply (lambda () (B3128@syntax-violation '#f '"invalid import form" B42df@e)) B42f9@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B42f7@t))) (B3048@syntax-dispatch B42f7@t '_))) B42e1@t))) (B3048@syntax-dispatch B42e1@t '(any . each-any)))) B42df@e))) (begin (call-with-values (lambda () (if (B42ca@module-import? B422d@e) (B42cc@module-import B422d@e B421a@r) (B42ce@library-import B422d@e))) (lambda (B42d3@B42d0 B42d4@B42d2) ((lambda (B42d7@lab* B42d8@id*) (vector-for-each (lambda (B42db@id B42dc@lab) (B2df9@extend-rib! B4221@rib B42db@id B42dc@lab)) B42d8@id* B42d7@lab*)) B42d4@B42d2 B42d3@B42d0))) (B30a0@chi-body* (cdr B4219@e*) B421a@r B421b@mr B421c@lex* B421d@rhs* B421e@mod** B4241@kwd* B4220@exp* B4221@rib B4222@top?)))) '#f '#f '#f))) (if B4222@top? (B30a0@chi-body* (cdr B4219@e*) B421a@r B421b@mr (cons (B2dcb@gen-lexical 'dummy) B421c@lex*) (cons (cons 'top-expr B422d@e) B421d@rhs*) B421e@mod** B4241@kwd* B4220@exp* B4221@rib B4222@top?) (values B4219@e* B421a@r B421b@mr B421c@lex* B421d@rhs* B421e@mod** B4241@kwd* B4220@exp*)))))))))))))) B423d@type)) (if (B2e43@id? B423b@kwd) (cons B423b@kwd B421f@kwd*) B421f@kwd*))) B4237@B4234 B4236@B4232 B4235@B4230)))) (car B4219@e*))))) (set! B30a2@expand-transformer (lambda (B4331@expr B4332@r) ((lambda (B4335@rtc) ((lambda (B4337@expanded-rhs) (begin (for-each ((lambda (B4339@mark-visit) (lambda (B433b@x) (begin (B2c6e@B2abc@invoke-library B433b@x) (B4339@mark-visit B433b@x)))) (B30b2@vis-collector)) (B4335@rtc)) B4337@expanded-rhs)) ((lambda (B4345@B433e B4346@B4340 B4347@B4342 B4348@B4344) ((lambda (B434d@swap) (dynamic-wind B434d@swap (lambda () (B306a@chi-expr B4331@expr B4332@r B4332@r)) B434d@swap)) (lambda () (begin ((lambda (B434f@t) (begin (B4345@B433e B4347@B4342) (set! B4347@B4342 B434f@t))) (B4345@B433e)) ((lambda (B4351@t) (begin (B4346@B4340 B4348@B4344) (set! B4348@B4344 B4351@t))) (B4346@B4340)))))) B30b0@inv-collector B30b2@vis-collector B4335@rtc (lambda (B4353@x) (values))))) (B30ae@make-collector)))) (set! B30a4@parse-exports (lambda (B4355@exp*) ((letrec ((B4357@f (lambda (B4359@exp* B435a@int* B435b@ext*) (if (null? B4359@exp*) (begin (if (not (B2e4b@valid-bound-ids? B435b@ext*)) (B3128@syntax-violation 'export '"invalid exports" (B307e@find-dups B435b@ext*)) (void)) (values (map B312e@syntax->datum B435b@ext*) B435a@int*)) ((lambda (B435f@t) ((lambda (B4361@ls/false) (if B4361@ls/false (apply (lambda (B4363@rename B4364@i* B4365@e*) (begin (if (not (and (eq? (B312e@syntax->datum B4363@rename) 'rename) (for-all B2e43@id? B4364@i*) (for-all B2e43@id? B4365@e*))) (B3128@syntax-violation 'export '"invalid export specifier" (car B4359@exp*)) (void)) (B4357@f (cdr B4359@exp*) (append B4364@i* B435a@int*) (append B4365@e* B435b@ext*)))) B4361@ls/false) ((lambda (B4369@t) ((lambda (B436b@ls/false) (if B436b@ls/false (apply (lambda (B436d@ie) (begin (if (not (B2e43@id? B436d@ie)) (B3128@syntax-violation 'export '"invalid export" B436d@ie) (void)) (B4357@f (cdr B4359@exp*) (cons B436d@ie B435a@int*) (cons B436d@ie B435b@ext*)))) B436b@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B4369@t))) (B3048@syntax-dispatch B4369@t 'any))) B435f@t))) (B3048@syntax-dispatch B435f@t '(any . #(each (any any)))))) (car B4359@exp*)))))) B4357@f) B4355@exp* '() '()))) (set! B30a6@parse-library-name (lambda (B436f@spec) ((lambda (B4372@parse) (begin (set! B4372@parse (lambda (B437f@x) ((lambda (B4381@t) ((lambda (B4383@ls/false) (if (and B4383@ls/false (apply (lambda (B4385@v*) (for-all (lambda (B4387@x) ((lambda (B4389@x) (and (integer? B4389@x) (exact? B4389@x))) (B312e@syntax->datum B4387@x))) B4385@v*)) B4383@ls/false)) (apply (lambda (B438b@v*) (values '() (map B312e@syntax->datum B438b@v*))) B4383@ls/false) ((lambda (B438d@t) ((lambda (B438f@ls/false) (if (and B438f@ls/false (apply (lambda (B4391@x B4392@rest) (symbol? (B312e@syntax->datum B4391@x))) B438f@ls/false)) (apply (lambda (B4395@x B4396@rest) (call-with-values (lambda () (B4372@parse B4396@rest)) (lambda (B439d@B439a B439e@B439c) ((lambda (B43a1@v* B43a2@x*) (values (cons (B312e@syntax->datum B4395@x) B43a2@x*) B43a1@v*)) B439e@B439c B439d@B439a)))) B438f@ls/false) ((lambda (B43a5@t) ((lambda (B43a7@ls/false) (if B43a7@ls/false (apply (lambda () (values '() '())) B43a7@ls/false) ((lambda (B43a9@t) ((lambda (B43ab@ls/false) (if B43ab@ls/false (apply (lambda () (B3128@syntax-violation '#f '"invalid library name" B436f@spec)) B43ab@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B43a9@t))) (B3048@syntax-dispatch B43a9@t '_))) B43a5@t))) (B3048@syntax-dispatch B43a5@t '()))) B438d@t))) (B3048@syntax-dispatch B438d@t '(any . any)))) B4381@t))) (B3048@syntax-dispatch B4381@t '(each-any)))) B437f@x))) (call-with-values (lambda () (B4372@parse B436f@spec)) (lambda (B4377@B4374 B4378@B4376) ((lambda (B437b@ver* B437c@name*) (begin (if (null? B437c@name*) (B3128@syntax-violation '#f '"empty library name" B436f@spec) (void)) (values B437c@name* B437b@ver*))) B4378@B4376 B4377@B4374))))) '#f))) (set! B30a8@parse-library (lambda (B43ad@e) ((lambda (B43af@t) ((lambda (B43b1@ls/false) (if (and B43b1@ls/false (apply (lambda (B43b3@library B43b4@name* B43b5@export B43b6@exp* B43b7@import B43b8@imp* B43b9@b*) (and (eq? (B312e@syntax->datum B43b5@export) 'export) (eq? (B312e@syntax->datum B43b7@import) 'import) (eq? (B312e@syntax->datum B43b3@library) 'library))) B43b1@ls/false)) (apply (lambda (B43c1@library B43c2@name* B43c3@export B43c4@exp* B43c5@import B43c6@imp* B43c7@b*) (values B43c2@name* B43c4@exp* B43c6@imp* B43c7@b*)) B43b1@ls/false) ((lambda (B43cf@t) ((lambda (B43d1@ls/false) (if B43d1@ls/false (apply (lambda () (B3128@syntax-violation '#f '"malformed library" B43ad@e)) B43d1@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B43cf@t))) (B3048@syntax-dispatch B43cf@t '_))) B43af@t))) (B3048@syntax-dispatch B43af@t '(any each-any (any . each-any) (any . each-any) . each-any)))) B43ad@e))) (set! B30aa@parse-import-spec* ((lambda () ((lambda (B43d4@idsyn? B43d6@dup-error B43d8@merge-substs B43da@exclude* B43dc@find* B43de@rem* B43e0@remove-dups B43e2@parse-library-name B43e4@import-library B43e6@get-import B43e8@add-imports!) (begin (set! B43d4@idsyn? (lambda (B45dd@x) (symbol? (B312e@syntax->datum B45dd@x)))) (set! B43d6@dup-error (lambda (B45db@name) (B3128@syntax-violation 'import '"two imports with different bindings" B45db@name))) (set! B43d8@merge-substs (lambda (B45c9@s B45ca@subst) ((lambda (B45ce@insert-to-subst) (begin (set! B45ce@insert-to-subst (lambda (B45cf@a B45d0@subst) ((lambda (B45d3@name B45d4@label) ((lambda (B45d7@t) (if B45d7@t ((lambda (B45d9@x) (if (eq? (cdr B45d9@x) B45d4@label) B45d0@subst (B43d6@dup-error B45d3@name))) B45d7@t) (cons B45cf@a B45d0@subst))) (assq B45d3@name B45d0@subst))) (car B45cf@a) (cdr B45cf@a)))) (if (null? B45c9@s) B45ca@subst (B45ce@insert-to-subst (car B45c9@s) (B43d8@merge-substs (cdr B45c9@s) B45ca@subst))))) '#f))) (set! B43da@exclude* (lambda (B4599@sym* B459a@subst) ((lambda (B459e@exclude) (begin (set! B459e@exclude (lambda (B45b7@sym B45b8@subst) (if (null? B45b8@subst) (B3128@syntax-violation 'import '"cannot rename unbound identifier" B45b7@sym) (if (eq? B45b7@sym (caar B45b8@subst)) (values (cdar B45b8@subst) (cdr B45b8@subst)) ((lambda (B45bb@a) (call-with-values (lambda () (B459e@exclude B45b7@sym (cdr B45b8@subst))) (lambda (B45c1@B45be B45c2@B45c0) ((lambda (B45c5@subst B45c6@old) (values B45c6@old (cons B45bb@a B45c5@subst))) B45c2@B45c0 B45c1@B45be)))) (car B45b8@subst)))))) (if (null? B4599@sym*) (values '() B459a@subst) (call-with-values (lambda () (B459e@exclude (car B4599@sym*) B459a@subst)) (lambda (B45a3@B45a0 B45a4@B45a2) ((lambda (B45a7@subst B45a8@old) (call-with-values (lambda () (B43da@exclude* (cdr B4599@sym*) B45a7@subst)) (lambda (B45af@B45ac B45b0@B45ae) ((lambda (B45b3@subst B45b4@old*) (values (cons B45a8@old B45b4@old*) B45b3@subst)) B45b0@B45ae B45af@B45ac)))) B45a4@B45a2 B45a3@B45a0)))))) '#f))) (set! B43dc@find* (lambda (B4591@sym* B4592@subst) (map (lambda (B4595@x) ((lambda (B4597@t) (if B4597@t (cdr B4597@t) (B3128@syntax-violation 'import '"cannot find identifier" B4595@x))) (assq B4595@x B4592@subst))) B4591@sym*))) (set! B43de@rem* (lambda (B4589@sym* B458a@subst) ((letrec ((B458d@f (lambda (B458f@subst) (if (null? B458f@subst) '() (if (memq (caar B458f@subst) B4589@sym*) (B458d@f (cdr B458f@subst)) (cons (car B458f@subst) (B458d@f (cdr B458f@subst)))))))) B458d@f) B458a@subst))) (set! B43e0@remove-dups (lambda (B4587@ls) (if (null? B4587@ls) '() (if (memq (car B4587@ls) (cdr B4587@ls)) (B43e0@remove-dups (cdr B4587@ls)) (cons (car B4587@ls) (B43e0@remove-dups (cdr B4587@ls))))))) (set! B43e2@parse-library-name (lambda (B449f@spec) ((lambda (B44a2@subversion? B44a4@subversion-pred B44a6@version-pred) (begin (set! B44a2@subversion? (lambda (B4583@x) ((lambda (B4585@x) (and (integer? B4585@x) (exact? B4585@x) (>= B4585@x '0))) (B312e@syntax->datum B4583@x)))) (set! B44a4@subversion-pred (lambda (B4523@x*) ((lambda (B4525@t) ((lambda (B4527@ls/false) (if (and B4527@ls/false (apply (lambda (B4529@n) (B44a2@subversion? B4529@n)) B4527@ls/false)) (apply (lambda (B452b@n) (lambda (B452d@x) (= B452d@x (B312e@syntax->datum B452b@n)))) B4527@ls/false) ((lambda (B452f@t) ((lambda (B4531@ls/false) (if (and B4531@ls/false (apply (lambda (B4533@p? B4534@sub*) (eq? (B312e@syntax->datum B4533@p?) 'and)) B4531@ls/false)) (apply (lambda (B4537@p? B4538@sub*) ((lambda (B453b@p*) (lambda (B453d@x) (for-all (lambda (B453f@p) (B453f@p B453d@x)) B453b@p*))) (map B44a4@subversion-pred B4538@sub*))) B4531@ls/false) ((lambda (B4541@t) ((lambda (B4543@ls/false) (if (and B4543@ls/false (apply (lambda (B4545@p? B4546@sub*) (eq? (B312e@syntax->datum B4545@p?) 'or)) B4543@ls/false)) (apply (lambda (B4549@p? B454a@sub*) ((lambda (B454d@p*) (lambda (B454f@x) (exists (lambda (B4551@p) (B4551@p B454f@x)) B454d@p*))) (map B44a4@subversion-pred B454a@sub*))) B4543@ls/false) ((lambda (B4553@t) ((lambda (B4555@ls/false) (if (and B4555@ls/false (apply (lambda (B4557@p? B4558@sub) (eq? (B312e@syntax->datum B4557@p?) 'not)) B4555@ls/false)) (apply (lambda (B455b@p? B455c@sub) ((lambda (B455f@p) (lambda (B4561@x) (not (B455f@p B4561@x)))) (B44a4@subversion-pred B455c@sub))) B4555@ls/false) ((lambda (B4563@t) ((lambda (B4565@ls/false) (if (and B4565@ls/false (apply (lambda (B4567@p? B4568@n) (and (eq? (B312e@syntax->datum B4567@p?) '<=) (B44a2@subversion? B4568@n))) B4565@ls/false)) (apply (lambda (B456b@p? B456c@n) (lambda (B456f@x) (<= B456f@x (B312e@syntax->datum B456c@n)))) B4565@ls/false) ((lambda (B4571@t) ((lambda (B4573@ls/false) (if (and B4573@ls/false (apply (lambda (B4575@p? B4576@n) (and (eq? (B312e@syntax->datum B4575@p?) '>=) (B44a2@subversion? B4576@n))) B4573@ls/false)) (apply (lambda (B4579@p? B457a@n) (lambda (B457d@x) (>= B457d@x (B312e@syntax->datum B457a@n)))) B4573@ls/false) ((lambda (B457f@t) ((lambda (B4581@ls/false) (if B4581@ls/false (apply (lambda () (B3128@syntax-violation 'import '"invalid sub-version spec" B449f@spec B4523@x*)) B4581@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B457f@t))) (B3048@syntax-dispatch B457f@t '_))) B4571@t))) (B3048@syntax-dispatch B4571@t '(any any)))) B4563@t))) (B3048@syntax-dispatch B4563@t '(any any)))) B4553@t))) (B3048@syntax-dispatch B4553@t '(any any)))) B4541@t))) (B3048@syntax-dispatch B4541@t '(any . each-any)))) B452f@t))) (B3048@syntax-dispatch B452f@t '(any . each-any)))) B4525@t))) (B3048@syntax-dispatch B4525@t 'any))) B4523@x*))) (set! B44a6@version-pred (lambda (B44d3@x*) ((lambda (B44d5@t) ((lambda (B44d7@ls/false) (if B44d7@ls/false (apply (lambda () (lambda (B44d9@x) '#t)) B44d7@ls/false) ((lambda (B44db@t) ((lambda (B44dd@ls/false) (if (and B44dd@ls/false (apply (lambda (B44df@c B44e0@ver*) (eq? (B312e@syntax->datum B44df@c) 'and)) B44dd@ls/false)) (apply (lambda (B44e3@c B44e4@ver*) ((lambda (B44e7@p*) (lambda (B44e9@x) (for-all (lambda (B44eb@p) (B44eb@p B44e9@x)) B44e7@p*))) (map B44a6@version-pred B44e4@ver*))) B44dd@ls/false) ((lambda (B44ed@t) ((lambda (B44ef@ls/false) (if (and B44ef@ls/false (apply (lambda (B44f1@c B44f2@ver*) (eq? (B312e@syntax->datum B44f1@c) 'or)) B44ef@ls/false)) (apply (lambda (B44f5@c B44f6@ver*) ((lambda (B44f9@p*) (lambda (B44fb@x) (exists (lambda (B44fd@p) (B44fd@p B44fb@x)) B44f9@p*))) (map B44a6@version-pred B44f6@ver*))) B44ef@ls/false) ((lambda (B44ff@t) ((lambda (B4501@ls/false) (if (and B4501@ls/false (apply (lambda (B4503@c B4504@ver) (eq? (B312e@syntax->datum B4503@c) 'not)) B4501@ls/false)) (apply (lambda (B4507@c B4508@ver) ((lambda (B450b@p) (lambda (B450d@x) (not (B450b@p B450d@x)))) (B44a6@version-pred B4508@ver))) B4501@ls/false) ((lambda (B450f@t) ((lambda (B4511@ls/false) (if B4511@ls/false (apply (lambda (B4513@sub*) ((lambda (B4515@p*) (lambda (B4517@x) ((letrec ((B4519@f (lambda (B451b@p* B451c@x) (if (null? B451b@p*) '#t (if (null? B451c@x) '#f (and ((car B451b@p*) (car B451c@x)) (B4519@f (cdr B451b@p*) (cdr B451c@x)))))))) B4519@f) B4515@p* B4517@x))) (map B44a4@subversion-pred B4513@sub*))) B4511@ls/false) ((lambda (B451f@t) ((lambda (B4521@ls/false) (if B4521@ls/false (apply (lambda () (B3128@syntax-violation 'import '"invalid version spec" B449f@spec B44d3@x*)) B4521@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B451f@t))) (B3048@syntax-dispatch B451f@t '_))) B450f@t))) (B3048@syntax-dispatch B450f@t 'each-any))) B44ff@t))) (B3048@syntax-dispatch B44ff@t '(any any)))) B44ed@t))) (B3048@syntax-dispatch B44ed@t '(any . each-any)))) B44db@t))) (B3048@syntax-dispatch B44db@t '(any . each-any)))) B44d5@t))) (B3048@syntax-dispatch B44d5@t '()))) B44d3@x*))) ((letrec ((B44a7@f (lambda (B44a9@x) ((lambda (B44ab@t) ((lambda (B44ad@ls/false) (if B44ad@ls/false (apply (lambda (B44af@version-spec*) (values '() (B44a6@version-pred B44af@version-spec*))) B44ad@ls/false) ((lambda (B44b1@t) ((lambda (B44b3@ls/false) (if (and B44b3@ls/false (apply (lambda (B44b5@x B44b6@x*) (B43d4@idsyn? B44b5@x)) B44b3@ls/false)) (apply (lambda (B44b9@x B44ba@x*) (call-with-values (lambda () (B44a7@f B44ba@x*)) (lambda (B44c1@B44be B44c2@B44c0) ((lambda (B44c5@pred B44c6@name) (values (cons (B312e@syntax->datum B44b9@x) B44c6@name) B44c5@pred)) B44c2@B44c0 B44c1@B44be)))) B44b3@ls/false) ((lambda (B44c9@t) ((lambda (B44cb@ls/false) (if B44cb@ls/false (apply (lambda () (values '() (lambda (B44cd@x) '#t))) B44cb@ls/false) ((lambda (B44cf@t) ((lambda (B44d1@ls/false) (if B44d1@ls/false (apply (lambda () (B3128@syntax-violation '#f '"invalid import spec" B449f@spec)) B44d1@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B44cf@t))) (B3048@syntax-dispatch B44cf@t '_))) B44c9@t))) (B3048@syntax-dispatch B44c9@t '()))) B44b1@t))) (B3048@syntax-dispatch B44b1@t '(any . any)))) B44ab@t))) (B3048@syntax-dispatch B44ab@t '(each-any)))) B44a9@x)))) B44a7@f) B449f@spec))) '#f '#f '#f))) (set! B43e4@import-library (lambda (B448f@spec*) (call-with-values (lambda () (B43e2@parse-library-name B448f@spec*)) (lambda (B4495@B4492 B4496@B4494) ((lambda (B4499@pred B449a@name) (begin (if (null? B449a@name) (B3128@syntax-violation 'import '"empty library name" B448f@spec*) (void)) ((lambda (B449d@lib) (begin (if (not B449d@lib) (B3128@syntax-violation 'import '"cannot find library with required name" B449a@name) (void)) (if (not (B4499@pred (B2c41@B2a62@library-version B449d@lib))) (B3128@syntax-violation 'import '"library does not satisfy version specification" B448f@spec* B449d@lib) (void)) ((B30b4@imp-collector) B449d@lib) (B2c49@B2a72@library-subst B449d@lib))) (B2c67@B2aae@find-library-by-name B449a@name)))) B4496@B4494 B4495@B4492))))) (set! B43e6@get-import (lambda (B4401@spec) ((lambda (B4403@t) ((lambda (B4405@ls/false) (if (and B4405@ls/false (apply (lambda (B4407@x B4408@x*) (not (memq (B312e@syntax->datum B4407@x) '(for rename except only prefix library)))) B4405@ls/false)) (apply (lambda (B440b@x B440c@x*) (B43e4@import-library (cons B440b@x B440c@x*))) B4405@ls/false) ((lambda (B440f@t) ((lambda (B4411@ls/false) (if (and B4411@ls/false (apply (lambda (B4413@rename B4414@isp B4415@old* B4416@new*) (and (eq? (B312e@syntax->datum B4413@rename) 'rename) (for-all B43d4@idsyn? B4415@old*) (for-all B43d4@idsyn? B4416@new*))) B4411@ls/false)) (apply (lambda (B441b@rename B441c@isp B441d@old* B441e@new*) ((lambda (B4423@subst B4424@old* B4425@new*) ((lambda (B4429@old-label*) ((lambda (B442b@subst) (B43d8@merge-substs (map cons B4425@new* B4429@old-label*) B442b@subst)) (B43de@rem* B4424@old* B4423@subst))) (B43dc@find* B4424@old* B4423@subst))) (B43e6@get-import B441c@isp) (map B312e@syntax->datum B441d@old*) (map B312e@syntax->datum B441e@new*))) B4411@ls/false) ((lambda (B442d@t) ((lambda (B442f@ls/false) (if (and B442f@ls/false (apply (lambda (B4431@except B4432@isp B4433@sym*) (and (eq? (B312e@syntax->datum B4431@except) 'except) (for-all B43d4@idsyn? B4433@sym*))) B442f@ls/false)) (apply (lambda (B4437@except B4438@isp B4439@sym*) ((lambda (B443d@subst) (B43de@rem* (map B312e@syntax->datum B4439@sym*) B443d@subst)) (B43e6@get-import B4438@isp))) B442f@ls/false) ((lambda (B443f@t) ((lambda (B4441@ls/false) (if (and B4441@ls/false (apply (lambda (B4443@only B4444@isp B4445@sym*) (and (eq? (B312e@syntax->datum B4443@only) 'only) (for-all B43d4@idsyn? B4445@sym*))) B4441@ls/false)) (apply (lambda (B4449@only B444a@isp B444b@sym*) ((lambda (B444f@subst B4450@sym*) ((lambda (B4453@sym*) ((lambda (B4455@lab*) (map cons B4453@sym* B4455@lab*)) (B43dc@find* B4453@sym* B444f@subst))) (B43e0@remove-dups B4450@sym*))) (B43e6@get-import B444a@isp) (map B312e@syntax->datum B444b@sym*))) B4441@ls/false) ((lambda (B4457@t) ((lambda (B4459@ls/false) (if (and B4459@ls/false (apply (lambda (B445b@prefix B445c@isp B445d@p) (and (eq? (B312e@syntax->datum B445b@prefix) 'prefix) (B43d4@idsyn? B445d@p))) B4459@ls/false)) (apply (lambda (B4461@prefix B4462@isp B4463@p) ((lambda (B4467@subst B4468@prefix) (map (lambda (B446b@x) (cons (string->symbol (string-append B4468@prefix (symbol->string (car B446b@x)))) (cdr B446b@x))) B4467@subst)) (B43e6@get-import B4462@isp) (symbol->string (B312e@syntax->datum B4463@p)))) B4459@ls/false) ((lambda (B446d@t) ((lambda (B446f@ls/false) (if (and B446f@ls/false (apply (lambda (B4471@library B4472@spec*) (eq? (B312e@syntax->datum B4471@library) 'library)) B446f@ls/false)) (apply (lambda (B4475@library B4476@spec*) (B43e4@import-library B4476@spec*)) B446f@ls/false) ((lambda (B4479@t) ((lambda (B447b@ls/false) (if (and B447b@ls/false (apply (lambda (B447d@for B447e@isp B447f@rest) (eq? (B312e@syntax->datum B447d@for) 'for)) B447b@ls/false)) (apply (lambda (B4483@for B4484@isp B4485@rest) (B43e6@get-import B4484@isp)) B447b@ls/false) ((lambda (B4489@t) ((lambda (B448b@ls/false) (if B448b@ls/false (apply (lambda (B448d@spec) (B3128@syntax-violation 'import '"invalid import spec" B448d@spec)) B448b@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B4489@t))) (B3048@syntax-dispatch B4489@t 'any))) B4479@t))) (B3048@syntax-dispatch B4479@t '(any any . any)))) B446d@t))) (B3048@syntax-dispatch B446d@t '(any each-any)))) B4457@t))) (B3048@syntax-dispatch B4457@t '(any any any)))) B443f@t))) (B3048@syntax-dispatch B443f@t '(any any . each-any)))) B442d@t))) (B3048@syntax-dispatch B442d@t '(any any . each-any)))) B440f@t))) (B3048@syntax-dispatch B440f@t '(any any . #(each (any any)))))) B4403@t))) (B3048@syntax-dispatch B4403@t '(any . each-any)))) B4401@spec))) (set! B43e8@add-imports! (lambda (B43f1@imp B43f2@h) ((lambda (B43f5@subst) (for-each (lambda (B43f7@x) ((lambda (B43f9@name B43fa@label) ((lambda (B43fd@t) (if B43fd@t ((lambda (B43ff@l) (if (not (eq? B43ff@l B43fa@label)) (B43d6@dup-error B43f9@name) (void))) B43fd@t) (hashtable-set! B43f2@h B43f9@name B43fa@label))) (hashtable-ref B43f2@h B43f9@name '#f))) (car B43f7@x) (cdr B43f7@x))) B43f5@subst)) (B43e6@get-import B43f1@imp)))) (lambda (B43e9@imp*) ((letrec ((B43eb@f (lambda (B43ed@imp* B43ee@h) (if (null? B43ed@imp*) (hashtable-entries B43ee@h) (begin (B43e8@add-imports! (car B43ed@imp*) B43ee@h) (B43eb@f (cdr B43ed@imp*) B43ee@h)))))) B43eb@f) B43e9@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! B30ac@make-top-rib (lambda (B45df@names B45e0@labels) ((lambda (B45e3@rib) (begin (vector-for-each (lambda (B45e5@name B45e6@label) (begin (if (not (symbol? B45e5@name)) (error 'make-top-rib '"BUG: not a symbol" B45e5@name) (void)) (B2dfb@extend-rib/nc! B45e3@rib (make-simple-struct 'stx '5 (list B45e5@name B2dc7@top-mark* '() '())) B45e6@label))) B45df@names B45e0@labels) B45e3@rib)) (B2df7@make-empty-rib)))) (set! B30ae@make-collector (lambda () ((lambda (B45e9@ls) (lambda B45ed ((lambda (B45ee) (if (= B45ee '0) (apply (lambda () B45e9@ls) B45ed) (if (= B45ee '1) (apply (lambda (B45eb@x) (set! B45e9@ls (B2dc0@set-cons B45eb@x B45e9@ls))) B45ed) (error 'apply '"invalid arg count")))) (length B45ed)))) '()))) (set! B30b0@inv-collector (B29a2@B2881@make-parameter (lambda B45ef@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (B45f1@x) (begin (if (not (procedure? B45f1@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" B45f1@x) (void)) B45f1@x)))) (set! B30b2@vis-collector (B29a2@B2881@make-parameter (lambda B45f3@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (B45f5@x) (begin (if (not (procedure? B45f5@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" B45f5@x) (void)) B45f5@x)))) (set! B30b4@imp-collector (B29a2@B2881@make-parameter (lambda B45f7@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (B45f9@x) (begin (if (not (procedure? B45f9@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" B45f9@x) (void)) B45f9@x)))) (set! B30b6@chi-library-internal (lambda (B45fb@e* B45fc@rib B45fd@top?) (call-with-values (lambda () (B30a0@chi-body* B45fb@e* '() '() '() '() '() '() '() B45fc@rib B45fd@top?)) (lambda (B4611@B4602 B4612@B4604 B4613@B4606 B4614@B4608 B4615@B460a B4616@B460c B4617@B460e B4618@B4610) ((lambda (B4621@exp* B4622@_kwd* B4623@mod** B4624@rhs* B4625@lex* B4626@mr B4627@r B4628@e*) (values (append (apply append (reverse B4623@mod**)) B4628@e*) B4627@r B4626@mr (reverse B4625@lex*) (reverse B4624@rhs*) B4621@exp*)) B4618@B4610 B4617@B460e B4616@B460c B4615@B460a B4614@B4608 B4613@B4606 B4612@B4604 B4611@B4602))))) (set! B30b8@chi-interaction-expr (lambda (B4631@e B4632@rib B4633@r) (call-with-values (lambda () (B30a0@chi-body* (list B4631@e) B4633@r B4633@r '() '() '() '() '() B4632@rib '#t)) (lambda (B4647@B4638 B4648@B463a B4649@B463c B464a@B463e B464b@B4640 B464c@B4642 B464d@B4644 B464e@B4646) ((lambda (B4657@_exp* B4658@_kwd* B4659@mod** B465a@rhs* B465b@lex* B465c@mr B465d@r B465e@e*) ((lambda (B4667@e*) ((lambda (B4669@e) (values B4669@e B465d@r)) (if (null? B4667@e*) (B2dab@B2d1b@build-void) (if (null? (cdr B4667@e*)) (car B4667@e*) (B2daa@B2d19@build-sequence '#f B4667@e*))))) (B3078@expand-interaction-rhs*/init* (reverse B465b@lex*) (reverse B465a@rhs*) (append (apply append (reverse B4659@mod**)) B465e@e*) B465d@r B465c@mr))) B464e@B4646 B464d@B4644 B464c@B4642 B464b@B4640 B464a@B463e B4649@B463c B4648@B463a B4647@B4638))))) (set! B30ba@library-body-expander (lambda (B466b@name B466c@main-exp* B466d@imp* B466e@b* B466f@top?) ((lambda (B4676@itc) (begin (set! B4676@itc (B30ae@make-collector)) ((lambda (B467f@B4678 B4680@B467a B4681@B467c B4682@B467e) ((lambda (B4687@swap) (dynamic-wind B4687@swap (lambda () (call-with-values (lambda () (B30aa@parse-import-spec* B466d@imp*)) (lambda (B468d@B468a B468e@B468c) ((lambda (B4691@subst-labels B4692@subst-names) ((lambda (B4695@rib) ((lambda (B4698@wrap) (begin (set! B4698@wrap (lambda (B4713@x) (make-simple-struct 'stx '5 (list B4713@x B2dc7@top-mark* (list B4695@rib) '())))) ((lambda (B4699@b* B469a@main-exp* B469b@rtc B469c@vtc) ((lambda (B46a9@B46a2 B46aa@B46a4 B46ab@B46a6 B46ac@B46a8) ((lambda (B46b1@swap) (dynamic-wind B46b1@swap (lambda () (call-with-values (lambda () (B30b6@chi-library-internal B4699@b* B4695@rib B466f@top?)) (lambda (B46bf@B46b4 B46c0@B46b6 B46c1@B46b8 B46c2@B46ba B46c3@B46bc B46c4@B46be) ((lambda (B46cb@internal-exp* B46cc@rhs* B46cd@lex* B46ce@mr B46cf@r B46d0@init*) (call-with-values (lambda () (B30a4@parse-exports (append B469a@main-exp* B46cb@internal-exp*))) (lambda (B46db@B46d8 B46dc@B46da) ((lambda (B46df@exp-id* B46e0@exp-name*) (begin (B2dff@seal-rib! B4695@rib) ((lambda (B46e3@init*) ((lambda (B46e5@rhs*) ((lambda () (begin (B2e01@unseal-rib! B4695@rib) ((lambda (B46e7@loc* B46e8@export-subst) ((lambda (B46ec@errstr) (begin (set! B46ec@errstr '"attempt to export mutated variable") (call-with-values (lambda () (B3114@make-export-env/macros B46cd@lex* B46e7@loc* B46cf@r)) (lambda (B46f3@B46ee B46f4@B46f0 B46f5@B46f2) ((lambda (B46f9@macro* B46fa@global* B46fb@export-env) (begin (for-each (lambda (B46ff@s) ((lambda (B4701@name B4702@label) ((lambda (B4705@p) (if B4705@p ((lambda (B4707@b) ((lambda (B4709@type) (if (eq? B4709@type 'mutable) (B3128@syntax-violation 'export B46ec@errstr B4701@name) (void))) (car B4707@b))) (cdr B4705@p)) (void))) (assq B4702@label B46fb@export-env))) (car B46ff@s) (cdr B46ff@s))) B46e8@export-subst) ((lambda (B470b@invoke-body B470c@invoke-definitions) (values (B4676@itc) (B469b@rtc) (B469c@vtc) (B2daa@B2d19@build-sequence '#f (append B470c@invoke-definitions (list B470b@invoke-body))) B46f9@macro* B46e8@export-subst B46fb@export-env)) (B2dad@B2d1f@build-letrec* '#f B46cd@lex* B46e5@rhs* (B3110@build-exports B46fa@global* B46e3@init*)) (map B2da6@B2c76@build-global-define (map cdr B46fa@global*))))) B46f5@B46f2 B46f4@B46f0 B46f3@B46ee))))) '#f)) (map B2dcd@gen-global B46cd@lex*) (B3112@make-export-subst B46e0@exp-name* B46df@exp-id*)))))) (B307a@chi-rhs* B46cc@rhs* B46cf@r B46ce@mr))) (B3066@chi-expr* B46d0@init* B46cf@r B46ce@mr)))) B46dc@B46da B46db@B46d8)))) B46c4@B46be B46c3@B46bc B46c2@B46ba B46c1@B46b8 B46c0@B46b6 B46bf@B46b4)))) B46b1@swap)) (lambda () (begin ((lambda (B470f@t) (begin (B46a9@B46a2 B46ab@B46a6) (set! B46ab@B46a6 B470f@t))) (B46a9@B46a2)) ((lambda (B4711@t) (begin (B46aa@B46a4 B46ac@B46a8) (set! B46ac@B46a8 B4711@t))) (B46aa@B46a4)))))) B30b0@inv-collector B30b2@vis-collector B469b@rtc B469c@vtc)) (map B4698@wrap B466e@b*) (map B4698@wrap B466c@main-exp*) (B30ae@make-collector) (B30ae@make-collector)))) '#f)) (B30ac@make-top-rib B4692@subst-names B4691@subst-labels))) B468e@B468c B468d@B468a)))) B4687@swap)) (lambda () (begin ((lambda (B4715@t) (begin (B467f@B4678 B4681@B467c) (set! B4681@B467c B4715@t))) (B467f@B4678)) ((lambda (B4717@t) (begin (B4680@B467a B4682@B467e) (set! B4682@B467e B4717@t))) (B4680@B467a)))))) B30b4@imp-collector B3136@top-level-context B4676@itc '#f))) '#f))) (set! B30bc@core-library-expander (lambda (B4719@e B471a@verify-name) (call-with-values (lambda () (B30a8@parse-library B4719@e)) (lambda (B4725@B471e B4726@B4720 B4727@B4722 B4728@B4724) ((lambda (B472d@b* B472e@imp* B472f@exp* B4730@name*) (call-with-values (lambda () (B30a6@parse-library-name B4730@name*)) (lambda (B4739@B4736 B473a@B4738) ((lambda (B473d@ver B473e@name) (begin (B471a@verify-name B473e@name) (call-with-values (lambda () (B30ba@library-body-expander B473e@name B472f@exp* B472e@imp* B472d@b* '#f)) (lambda (B474f@B4742 B4750@B4744 B4751@B4746 B4752@B4748 B4753@B474a B4754@B474c B4755@B474e) ((lambda (B475d@export-env B475e@export-subst B475f@visit-code B4760@invoke-code B4761@visit-req* B4762@invoke-req* B4763@imp*) (values B473e@name B473d@ver B4763@imp* B4762@invoke-req* B4761@visit-req* B4760@invoke-code B475f@visit-code B475e@export-subst B475d@export-env)) B4755@B474e B4754@B474c B4753@B474a B4752@B4748 B4751@B4746 B4750@B4744 B474f@B4742))))) B473a@B4738 B4739@B4736)))) B4728@B4724 B4727@B4722 B4726@B4720 B4725@B471e))))) (set! B30be@parse-top-level-program (lambda (B476b@e*) ((lambda (B476d@t) ((lambda (B476f@ls/false) (if (and B476f@ls/false (apply (lambda (B4771@import B4772@imp* B4773@b*) (eq? (B312e@syntax->datum B4771@import) 'import)) B476f@ls/false)) (apply (lambda (B4777@import B4778@imp* B4779@b*) (values B4778@imp* B4779@b*)) B476f@ls/false) ((lambda (B477d@t) ((lambda (B477f@ls/false) (if (and B477f@ls/false (apply (lambda (B4781@import B4782@x B4783@y) (eq? (B312e@syntax->datum B4781@import) 'import)) B477f@ls/false)) (apply (lambda (B4787@import B4788@x B4789@y) (B3128@syntax-violation 'expander '"invalid syntax of top-level program" (B2e3d@syntax-car B476b@e*))) B477f@ls/false) ((lambda (B478d@t) ((lambda (B478f@ls/false) (if B478f@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) B478f@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B478d@t))) (B3048@syntax-dispatch B478d@t '_))) B477d@t))) (B3048@syntax-dispatch B477d@t '((any . any) . any)))) B476d@t))) (B3048@syntax-dispatch B476d@t '((any . each-any) . each-any)))) B476b@e*))) (set! B30c0@top-level-expander (lambda (B4791@e*) (call-with-values (lambda () (B30be@parse-top-level-program B4791@e*)) (lambda (B4797@B4794 B4798@B4796) ((lambda (B479b@b* B479c@imp*) (call-with-values (lambda () (B30ba@library-body-expander '() '() B479c@imp* B479b@b* '#t)) (lambda (B47ad@B47a0 B47ae@B47a2 B47af@B47a4 B47b0@B47a6 B47b1@B47a8 B47b2@B47aa B47b3@B47ac) ((lambda (B47bb@export-env B47bc@export-subst B47bd@visit-code B47be@invoke-code B47bf@visit-req* B47c0@invoke-req* B47c1@imp*) (values B47c0@invoke-req* B47be@invoke-code)) B47b3@B47ac B47b2@B47aa B47b1@B47a8 B47b0@B47a6 B47af@B47a4 B47ae@B47a2 B47ad@B47a0)))) B4798@B4796 B4797@B4794))))) (set! B30c2@rp (B299f@B287b@make-record-printer 'env (lambda (B47c9@x B47ca@p B47cb@wr) (display '"#<environment>" B47ca@p)))) (set! B30cc@env? (lambda (B47cf@x) (and (simple-struct? B47cf@x) (eq? (simple-struct-name B47cf@x) 'env)))) (set! B30ce@env-names (lambda (B47d1@x) (simple-struct-ref B47d1@x '0))) (set! B30d0@set-env-names! (lambda (B47d3@x B47d4@val) (simple-struct-set! B47d3@x '0 B47d4@val))) (set! B30d2@env-labels (lambda (B47d7@x) (simple-struct-ref B47d7@x '1))) (set! B30d4@set-env-labels! (lambda (B47d9@x B47da@val) (simple-struct-set! B47d9@x '1 B47da@val))) (set! B30d6@env-itc (lambda (B47dd@x) (simple-struct-ref B47dd@x '2))) (set! B30d8@set-env-itc! (lambda (B47df@x B47e0@val) (simple-struct-set! B47df@x '2 B47e0@val))) (set! B30da@dummy '3) (set! B30dc@rp (B299f@B287b@make-record-printer 'interaction-env (lambda (B47e3@x B47e4@p B47e5@wr) (display '"#<environment>" B47e4@p)))) (set! B30e6@interaction-env? (lambda (B47e9@x) (and (simple-struct? B47e9@x) (eq? (simple-struct-name B47e9@x) 'interaction-env)))) (set! B30e8@interaction-env-rib (lambda (B47eb@x) (simple-struct-ref B47eb@x '0))) (set! B30ea@set-interaction-env-rib! (lambda (B47ed@x B47ee@val) (simple-struct-set! B47ed@x '0 B47ee@val))) (set! B30ec@interaction-env-r (lambda (B47f1@x) (simple-struct-ref B47f1@x '1))) (set! B30ee@set-interaction-env-r! (lambda (B47f3@x B47f4@val) (simple-struct-set! B47f3@x '1 B47f4@val))) (set! B30f0@interaction-env-locs (lambda (B47f7@x) (simple-struct-ref B47f7@x '2))) (set! B30f2@set-interaction-env-locs! (lambda (B47f9@x B47fa@val) (simple-struct-set! B47f9@x '2 B47fa@val))) (set! B30f4@dummy '3) (set! B30f6@interaction-environment-symbols (lambda () (B30fe@environment-symbols (B3134@interaction-environment)))) (set! B30f8@environment-bindings (lambda (B47fd@e) (vector->list (vector-map (lambda (B47ff@name B4800@label) (B30fa@parse-binding (cons B47ff@name (B2c6d@B2aba@imported-label->binding B4800@label)))) (B30ce@env-names B47fd@e) (B30d2@env-labels B47fd@e))))) (set! B30fa@parse-binding (lambda (B4803@b) (cons (car B4803@b) ((lambda (B4805@t) (if (memv B4805@t '(core-prim global)) 'procedure (if (memv B4805@t '(core-macro macro global-macro)) 'syntax (if (memv B4805@t '($core-rtd)) 'record (if (eq? (car B4803@b) (cadr B4803@b)) 'syntax 'unknown))))) (cadr B4803@b))))) (set! B30fc@environment? (lambda (B4807@x) (or (B30cc@env? B4807@x) (B30e6@interaction-env? B4807@x)))) (set! B30fe@environment-symbols (lambda (B4809@x) (if (B30cc@env? B4809@x) (vector->list (B30ce@env-names B4809@x)) (if (B30e6@interaction-env? B4809@x) (map values (B2de1@rib-sym* (B30e8@interaction-env-rib B4809@x))) (assertion-violation 'environment-symbols '"not an environment" B4809@x))))) (set! B3100@environment (lambda B480b@imp* ((lambda (B480d@itc) ((lambda (B4813@B4810 B4814@B4812) ((lambda (B4817@swap) (dynamic-wind B4817@swap (lambda () (call-with-values (lambda () (B30aa@parse-import-spec* B480b@imp*)) (lambda (B481d@B481a B481e@B481c) ((lambda (B4821@subst-labels B4822@subst-names) (make-simple-struct 'env '4 (list B4822@subst-names B4821@subst-labels B480d@itc))) B481e@B481c B481d@B481a)))) B4817@swap)) (lambda () ((lambda (B4825@t) (begin (B4813@B4810 B4814@B4812) (set! B4814@B4812 B4825@t))) (B4813@B4810))))) B30b4@imp-collector B480d@itc)) (B30ae@make-collector)))) (set! B3102@null-environment (lambda (B4827@n) (begin (if (not (eqv? B4827@n '5)) (assertion-violation 'null-environment '"not 5" B4827@n) (void)) (B3100@environment '(psyntax null-environment-5))))) (set! B3104@scheme-report-environment (lambda (B4829@n) (begin (if (not (eqv? B4829@n '5)) (assertion-violation 'scheme-report-environment '"not 5" B4829@n) (void)) (B3100@environment '(psyntax scheme-report-environment-5))))) (set! B3106@expand (lambda (B482b@x B482c@env) (if (B30cc@env? B482c@env) ((lambda (B482f@rib) ((lambda (B4831@x B4832@itc B4833@rtc B4834@vtc) ((lambda (B4839@x) (begin (B2dff@seal-rib! B482f@rib) (values B4839@x (B4833@rtc)))) ((lambda (B484b@B483c B484c@B483e B484d@B4840 B484e@B4842 B484f@B4844 B4850@B4846 B4851@B4848 B4852@B484a) ((lambda (B485b@swap) (dynamic-wind B485b@swap (lambda () (B306a@chi-expr B4831@x '() '())) B485b@swap)) (lambda () (begin ((lambda (B485d@t) (begin (B484b@B483c B484f@B4844) (set! B484f@B4844 B485d@t))) (B484b@B483c)) ((lambda (B485f@t) (begin (B484c@B483e B4850@B4846) (set! B4850@B4846 B485f@t))) (B484c@B483e)) ((lambda (B4861@t) (begin (B484d@B4840 B4851@B4848) (set! B4851@B4848 B4861@t))) (B484d@B4840)) ((lambda (B4863@t) (begin (B484e@B4842 B4852@B484a) (set! B4852@B484a B4863@t))) (B484e@B4842)))))) B3136@top-level-context B30b0@inv-collector B30b2@vis-collector B30b4@imp-collector '#f B4833@rtc B4834@vtc B4832@itc))) (make-simple-struct 'stx '5 (list B482b@x B2dc7@top-mark* (list B482f@rib) '())) (B30d6@env-itc B482c@env) (B30ae@make-collector) (B30ae@make-collector))) (B30ac@make-top-rib (B30ce@env-names B482c@env) (B30d2@env-labels B482c@env))) (if (B30e6@interaction-env? B482c@env) ((lambda (B4865@rib B4866@r B4867@rtc) ((lambda (B486b@x) (call-with-values (lambda () ((lambda (B4881@B4872 B4882@B4874 B4883@B4876 B4884@B4878 B4885@B487a B4886@B487c B4887@B487e B4888@B4880) ((lambda (B4891@swap) (dynamic-wind B4891@swap (lambda () (B30b8@chi-interaction-expr B486b@x B4865@rib B4866@r)) B4891@swap)) (lambda () (begin ((lambda (B4893@t) (begin (B4881@B4872 B4885@B487a) (set! B4885@B487a B4893@t))) (B4881@B4872)) ((lambda (B4895@t) (begin (B4882@B4874 B4886@B487c) (set! B4886@B487c B4895@t))) (B4882@B4874)) ((lambda (B4897@t) (begin (B4883@B4876 B4887@B487e) (set! B4887@B487e B4897@t))) (B4883@B4876)) ((lambda (B4899@t) (begin (B4884@B4878 B4888@B4880) (set! B4888@B4880 B4899@t))) (B4884@B4878)))))) B3136@top-level-context B30b0@inv-collector B30b2@vis-collector B30b4@imp-collector B482c@env B4867@rtc (B30ae@make-collector) (B30ae@make-collector))) (lambda (B489b@B486e B489c@B4870) ((lambda (B489f@r^ B48a0@e) (begin (B30ee@set-interaction-env-r! B482c@env B489f@r^) (values B48a0@e (B4867@rtc)))) B489c@B4870 B489b@B486e)))) (make-simple-struct 'stx '5 (list B482b@x B2dc7@top-mark* (list B4865@rib) '())))) (B30e8@interaction-env-rib B482c@env) (B30ec@interaction-env-r B482c@env) (B30ae@make-collector)) (assertion-violation 'expand '"not an environment" B482c@env))))) (set! B3108@eval (lambda (B48a3@x B48a4@env) (begin (if (not (B30fc@environment? B48a4@env)) (error 'eval '"not an environment" B48a4@env) (void)) (call-with-values (lambda () (B3106@expand B48a3@x B48a4@env)) (lambda (B48ab@B48a8 B48ac@B48aa) ((lambda (B48af@invoke-req* B48b0@x) (begin (for-each B2c6e@B2abc@invoke-library B48af@invoke-req*) (eval-core (B29f8@B29b0@expanded->core B48b0@x)))) B48ac@B48aa B48ab@B48a8)))))) (set! B310a@library-expander (lambda B4921 ((lambda (B4922) (if (= B4922 '3) (apply (lambda (B48b3@x B48b4@filename B48b5@verify-name) ((lambda (B48ba@build-visit-code B48bc@visit!) (begin (set! B48ba@build-visit-code (lambda (B490f@macro*) (if (null? B490f@macro*) (B2dab@B2d1b@build-void) (B2daa@B2d19@build-sequence '#f (map (lambda (B4911@x) ((lambda (B4913@loc B4914@src) (list 'set! B4913@loc B4914@src)) (car B4911@x) (cddr B4911@x))) B490f@macro*))))) (set! B48bc@visit! (lambda (B4907@macro*) (for-each (lambda (B4909@x) ((lambda (B490b@loc B490c@proc) (set-symbol-value! B490b@loc B490c@proc)) (car B4909@x) (cadr B4909@x))) B4907@macro*))) (call-with-values (lambda () (B30bc@core-library-expander B48b3@x B48b5@verify-name)) (lambda (B48cf@B48be B48d0@B48c0 B48d1@B48c2 B48d2@B48c4 B48d3@B48c6 B48d4@B48c8 B48d5@B48ca B48d6@B48cc B48d7@B48ce) ((lambda (B48e1@export-env B48e2@export-subst B48e3@macro* B48e4@invoke-code B48e5@vis* B48e6@inv* B48e7@imp* B48e8@ver B48e9@name) ((lambda (B48f3@id B48f4@name B48f5@ver B48f6@imp* B48f7@vis* B48f8@inv* B48f9@visit-proc B48fa@invoke-proc B48fb@visit-code B48fc@invoke-code) (begin (B2c6c@B2ab8@install-library B48f3@id B48f4@name B48f5@ver B48f6@imp* B48f7@vis* B48f8@inv* B48e2@export-subst B48e1@export-env B48f9@visit-proc B48fa@invoke-proc B48fb@visit-code B48fc@invoke-code '#t B48b4@filename) (values B48f3@id B48f4@name B48f5@ver B48f6@imp* B48f7@vis* B48f8@inv* B48fc@invoke-code B48fb@visit-code B48e2@export-subst B48e1@export-env))) (gensym) B48e9@name B48e8@ver (map B2c72@B2ac4@library-spec B48e7@imp*) (map B2c72@B2ac4@library-spec B48e5@vis*) (map B2c72@B2ac4@library-spec B48e6@inv*) (lambda () (B48bc@visit! B48e3@macro*)) (lambda () (eval-core (B29f8@B29b0@expanded->core B48e4@invoke-code))) (B48ba@build-visit-code B48e3@macro*) B48e4@invoke-code)) B48d7@B48ce B48d6@B48cc B48d5@B48ca B48d4@B48c8 B48d3@B48c6 B48d2@B48c4 B48d1@B48c2 B48d0@B48c0 B48cf@B48be))))) '#f '#f)) B4921) (if (= B4922 '2) (apply (lambda (B4917@x B4918@filename) (B310a@library-expander B4917@x B4918@filename (lambda (B491b@x) (values)))) B4921) (if (= B4922 '1) (apply (lambda (B491d@x) (B310a@library-expander B491d@x '#f (lambda (B491f@x) (values)))) B4921) (error 'apply '"invalid arg count"))))) (length B4921)))) (set! B310c@boot-library-expand (lambda (B4923@x) (call-with-values (lambda () (B310a@library-expander B4923@x)) (lambda (B4939@B4926 B493a@B4928 B493b@B492a B493c@B492c B493d@B492e B493e@B4930 B493f@B4932 B4940@B4934 B4941@B4936 B4942@B4938) ((lambda (B494d@export-env B494e@export-subst B494f@visit-code B4950@invoke-code B4951@inv* B4952@vis* B4953@imp* B4954@ver B4955@name B4956@id) (values B4955@name B4950@invoke-code B494e@export-subst B494d@export-env)) B4942@B4938 B4941@B4936 B4940@B4934 B493f@B4932 B493e@B4930 B493d@B492e B493c@B492c B493b@B492a B493a@B4928 B4939@B4926))))) (set! B310e@rev-map-append (lambda (B4961@f B4962@ls B4963@ac) (if (null? B4962@ls) B4963@ac (B310e@rev-map-append B4961@f (cdr B4962@ls) (cons (B4961@f (car B4962@ls)) B4963@ac))))) (set! B3110@build-exports (lambda (B4967@lex*+loc* B4968@init*) (B2daa@B2d19@build-sequence '#f (cons (B2dab@B2d1b@build-void) (B310e@rev-map-append (lambda (B496b@x) (list 'set! (cdr B496b@x) (car B496b@x))) B4967@lex*+loc* B4968@init*))))) (set! B3112@make-export-subst (lambda (B496d@name* B496e@id*) (map (lambda (B4971@name B4972@id) ((lambda (B4975@label) (begin (if (not B4975@label) (B3128@syntax-violation '#f '"cannot export unbound identifier" B4972@id) (void)) (cons B4971@name B4975@label))) (B2e59@id->label B4972@id))) B496d@name* B496e@id*))) (set! B3114@make-export-env/macros (lambda (B4977@lex* B4978@loc* B4979@r) ((lambda (B497e@lookup) (begin (set! B497e@lookup (lambda (B499b@x) ((letrec ((B499d@f (lambda (B499f@x B49a0@lex* B49a1@loc*) (if (pair? B49a0@lex*) (if (eq? B499f@x (car B49a0@lex*)) (car B49a1@loc*) (B499d@f B499f@x (cdr B49a0@lex*) (cdr B49a1@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) B499d@f) B499b@x B4977@lex* B4978@loc*))) ((letrec ((B497f@f (lambda (B4981@r B4982@env B4983@global* B4984@macro*) (if (null? B4981@r) (values B4982@env B4983@global* B4984@macro*) ((lambda (B4989@x) ((lambda (B498b@label B498c@b) ((lambda (B498f@t) (if (memv B498f@t '(lexical)) ((lambda (B4991@v) ((lambda (B4993@loc B4994@type) (B497f@f (cdr B4981@r) (cons (cons* B498b@label B4994@type B4993@loc) B4982@env) (cons (cons (B2fd4@lexical-var B4991@v) B4993@loc) B4983@global*) B4984@macro*)) (B497e@lookup (B2fd4@lexical-var B4991@v)) (if (B2fd6@lexical-mutable? B4991@v) 'mutable 'global))) (B2e61@binding-value B498c@b)) (if (memv B498f@t '(local-macro)) ((lambda (B4997@loc) (B497f@f (cdr B4981@r) (cons (cons* B498b@label 'global-macro B4997@loc) B4982@env) B4983@global* (cons (cons B4997@loc (B2e61@binding-value B498c@b)) B4984@macro*))) (gensym)) (if (memv B498f@t '(local-macro!)) ((lambda (B4999@loc) (B497f@f (cdr B4981@r) (cons (cons* B498b@label 'global-macro! B4999@loc) B4982@env) B4983@global* (cons (cons B4999@loc (B2e61@binding-value B498c@b)) B4984@macro*))) (gensym)) (if (memv B498f@t '($rtd $module)) (B497f@f (cdr B4981@r) (cons B4989@x B4982@env) B4983@global* B4984@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (B2e5f@binding-type B498c@b) (B2e61@binding-value B498c@b))))))) (B2e5f@binding-type B498c@b))) (car B4989@x) (cdr B4989@x))) (car B4981@r)))))) B497f@f) B4979@r '() '() '()))) '#f))) (set! B3116@generate-temporaries (lambda (B49a5@ls) ((lambda (B49a7@t) ((lambda (B49a9@ls/false) (if B49a9@ls/false (apply (lambda (B49ab@ls) (map (lambda (B49ad@x) (make-simple-struct 'stx '5 (list ((lambda (B49af@x) (if (or (symbol? B49af@x) (string? B49af@x)) (gensym B49af@x) (gensym 't))) (B312e@syntax->datum B49ad@x)) B2dc7@top-mark* '() '()))) B49ab@ls)) B49a9@ls/false) ((lambda (B49b1@t) ((lambda (B49b3@ls/false) (if B49b3@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) B49b3@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B49b1@t))) (B3048@syntax-dispatch B49b1@t '_))) B49a7@t))) (B3048@syntax-dispatch B49a7@t 'each-any))) B49a5@ls))) (set! B3118@free-identifier=? (lambda (B49b5@x B49b6@y) (if (B2e43@id? B49b5@x) (if (B2e43@id? B49b6@y) (B2e49@free-id=? B49b5@x B49b6@y) (assertion-violation 'free-identifier=? '"not an identifier" B49b6@y)) (assertion-violation 'free-identifier=? '"not an identifier" B49b5@x)))) (set! B311a@bound-identifier=? (lambda (B49b9@x B49ba@y) (if (B2e43@id? B49b9@x) (if (B2e43@id? B49ba@y) (B2e47@bound-id=? B49b9@x B49ba@y) (assertion-violation 'bound-identifier=? '"not an identifier" B49ba@y)) (assertion-violation 'bound-identifier=? '"not an identifier" B49b9@x)))) (set! B311c@make-source-condition (lambda (B49bd@x) ((lambda (B49c7@B49c2 B49c9@B49c4 B49cb@B49c3 B49ce@B49c1 B49d0@make-source-condition B49d2@B49bf B49d4@B49c0 B49d6@source-condition? B49d8@source-filename B49da@source-character) (begin (set! B49c7@B49c2 (make-record-type-descriptor '&source-information B4e17@B4b5e@&condition-rtd 'B49c5 '#f '#f '#((immutable file-name) (immutable character)))) (set! B49c9@B49c4 '#f) (set! B49cb@B49c3 (make-record-constructor-descriptor B49c7@B49c2 B4e18@B4b60@&condition-rcd B49c9@B49c4)) (set! B49ce@B49c1 (record-predicate B49c7@B49c2)) (set! B49d0@make-source-condition (record-constructor B49cb@B49c3)) (set! B49d2@B49bf (record-accessor B49c7@B49c2 '0)) (set! B49d4@B49c0 (record-accessor B49c7@B49c2 '1)) (set! B49d6@source-condition? (condition-predicate B49c7@B49c2)) (set! B49d8@source-filename (condition-accessor B49c7@B49c2 B49d2@B49bf)) (set! B49da@source-character (condition-accessor B49c7@B49c2 B49d4@B49c0)) (if (pair? B49bd@x) (B49d0@make-source-condition (car B49bd@x) (cdr B49bd@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! B311e@extract-position-condition (lambda (B49db@x) (B311c@make-source-condition (B3120@expression-position B49db@x)))) (set! B3120@expression-position (lambda (B49dd@x) (and (B2e0f@stx? B49dd@x) ((lambda (B49df@x) (and (B2997@B286b@annotation? B49df@x) (B2998@B286d@annotation-source B49df@x))) (B2e11@stx-expr B49dd@x))))) (set! B3122@assertion-error (lambda (B49e1@expr B49e2@pos) (raise (condition (B4e47@B4c22@make-assertion-violation) (B4e59@B4c54@make-who-condition 'assert) (B4e1d@B4bb5@make-message-condition '"assertion failed") (B4e4f@B4c39@make-irritants-condition (list B49e1@expr)) (B311c@make-source-condition B49e2@pos))))) (set! B3124@syntax-error (lambda (B49e5@x . B49e7@args) (begin (if (not (for-all string? B49e7@args)) (assertion-violation 'syntax-error '"invalid argument" B49e7@args) (void)) (raise (condition (B4e1d@B4bb5@make-message-condition (if (null? B49e7@args) '"invalid syntax" (apply string-append B49e7@args))) (B4e7b@B4cb0@make-syntax-violation (B312e@syntax->datum B49e5@x) '#f) (B311e@extract-position-condition B49e5@x)))))) (set! B3126@syntax-violation* (lambda (B49e9@who B49ea@msg B49eb@form B49ec@condition-object) (begin (if (not (string? B49ea@msg)) (assertion-violation 'syntax-violation '"message is not a string" B49ea@msg) (void)) ((lambda (B49f1@who) (raise (condition (if B49f1@who (B4e59@B4c54@make-who-condition B49f1@who) (condition)) (B4e1d@B4bb5@make-message-condition B49ea@msg) B49ec@condition-object (B311e@extract-position-condition B49eb@form)))) (if (or (string? B49e9@who) (symbol? B49e9@who)) B49e9@who (if (not B49e9@who) ((lambda (B49f3@t) ((lambda (B49f5@ls/false) (if (and B49f5@ls/false (apply (lambda (B49f7@id) (B2e43@id? B49f7@id)) B49f5@ls/false)) (apply (lambda (B49f9@id) (B312e@syntax->datum B49f9@id)) B49f5@ls/false) ((lambda (B49fb@t) ((lambda (B49fd@ls/false) (if (and B49fd@ls/false (apply (lambda (B49ff@id B4a00@rest) (B2e43@id? B49ff@id)) B49fd@ls/false)) (apply (lambda (B4a03@id B4a04@rest) (B312e@syntax->datum B4a03@id)) B49fd@ls/false) ((lambda (B4a07@t) ((lambda (B4a09@ls/false) (if B4a09@ls/false (apply (lambda () '#f) B4a09@ls/false) (B3128@syntax-violation '#f '"invalid syntax" B4a07@t))) (B3048@syntax-dispatch B4a07@t '_))) B49fb@t))) (B3048@syntax-dispatch B49fb@t '(any . any)))) B49f3@t))) (B3048@syntax-dispatch B49f3@t 'any))) B49eb@form) (assertion-violation 'syntax-violation '"invalid who argument" B49e9@who))))))) (set! B3128@syntax-violation (lambda B4a19 ((lambda (B4a1a) (if (= B4a1a '3) (apply (lambda (B4a0b@who B4a0c@msg B4a0d@form) (B3128@syntax-violation B4a0b@who B4a0c@msg B4a0d@form '#f)) B4a19) (if (= B4a1a '4) (apply (lambda (B4a11@who B4a12@msg B4a13@form B4a14@subform) (B3126@syntax-violation* B4a11@who B4a12@msg B4a13@form (B4e7b@B4cb0@make-syntax-violation (B312e@syntax->datum B4a13@form) (B312e@syntax->datum B4a14@subform)))) B4a19) (error 'apply '"invalid arg count")))) (length B4a19)))) (set! B312a@identifier? (lambda (B4a1b@x) (B2e43@id? B4a1b@x))) (set! B312c@datum->syntax (lambda (B4a1d@id B4a1e@datum) (if (B2e43@id? B4a1d@id) (B2e23@datum->stx B4a1d@id B4a1e@datum) (assertion-violation 'datum->syntax '"not an identifier" B4a1d@id)))) (set! B312e@syntax->datum (lambda (B4a21@x) (B2e57@stx->datum B4a21@x))) (set! B3130@compile-r6rs-top-level (lambda (B4a23@x*) (call-with-values (lambda () (B30c0@top-level-expander B4a23@x*)) (lambda (B4a29@B4a26 B4a2a@B4a28) ((lambda (B4a2d@invoke-code B4a2e@lib*) (lambda () (begin (for-each B2c6e@B2abc@invoke-library B4a2e@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (B29f8@B29b0@expanded->core B4a2d@invoke-code)) (void)) (eval-core (B29f8@B29b0@expanded->core B4a2d@invoke-code))))) B4a2a@B4a28 B4a29@B4a26))))) (set! B3132@pre-compile-r6rs-top-level (lambda (B4a31@x*) (call-with-values (lambda () (B30c0@top-level-expander B4a31@x*)) (lambda (B4a37@B4a34 B4a38@B4a36) ((lambda (B4a3b@invoke-code B4a3c@lib*) (begin (for-each B2c6e@B2abc@invoke-library B4a3c@lib*) (B29a0@B287d@compile-core (B29f8@B29b0@expanded->core B4a3b@invoke-code)))) B4a38@B4a36 B4a37@B4a34))))) (set! B3134@interaction-environment ((lambda (B4a3f@the-env) (lambda () (or B4a3f@the-env ((lambda (B4a41@lib B4a42@rib) (begin ((lambda (B4a45@subst) (begin (B2de3@set-rib-sym*! B4a42@rib (map car B4a45@subst)) (B2de7@set-rib-mark**! B4a42@rib (map (lambda (B4a47@x) B2dc7@top-mark*) B4a45@subst)) (B2deb@set-rib-label*! B4a42@rib (map cdr B4a45@subst)))) (B2c49@B2a72@library-subst B4a41@lib)) ((lambda (B4a49@env) (begin (set! B4a3f@the-env B4a49@env) B4a49@env)) (make-simple-struct 'interaction-env '4 (list B4a42@rib '() '()))))) (B2c67@B2aae@find-library-by-name '(mosh interaction)) (B2df7@make-empty-rib))))) '#f)) (set! B3136@top-level-context (B29a2@B2881@make-parameter '#f)) (begin (set! B4b44@B3136@top-level-context B3136@top-level-context) (set! B4b43@B3134@interaction-environment B3134@interaction-environment) (set! B4b42@B3132@pre-compile-r6rs-top-level B3132@pre-compile-r6rs-top-level) (set! B4b41@B3130@compile-r6rs-top-level B3130@compile-r6rs-top-level) (set! B4b40@B312e@syntax->datum B312e@syntax->datum) (set! B4b3f@B312c@datum->syntax B312c@datum->syntax) (set! B4b3e@B312a@identifier? B312a@identifier?) (set! B4b3d@B3128@syntax-violation B3128@syntax-violation) (set! B4b3c@B3126@syntax-violation* B3126@syntax-violation*) (set! B4b3b@B3124@syntax-error B3124@syntax-error) (set! B4b3a@B3122@assertion-error B3122@assertion-error) (set! B4b39@B3120@expression-position B3120@expression-position) (set! B4b38@B311e@extract-position-condition B311e@extract-position-condition) (set! B4b37@B311c@make-source-condition B311c@make-source-condition) (set! B4b36@B311a@bound-identifier=? B311a@bound-identifier=?) (set! B4b35@B3118@free-identifier=? B3118@free-identifier=?) (set! B4b34@B3116@generate-temporaries B3116@generate-temporaries) (set! B4b33@B3114@make-export-env/macros B3114@make-export-env/macros) (set! B4b32@B3112@make-export-subst B3112@make-export-subst) (set! B4b31@B3110@build-exports B3110@build-exports) (set! B4b30@B310e@rev-map-append B310e@rev-map-append) (set! B4b2f@B310c@boot-library-expand B310c@boot-library-expand) (set! B4b2e@B310a@library-expander B310a@library-expander) (set! B4b2d@B3108@eval B3108@eval) (set! B4b2c@B3106@expand B3106@expand) (set! B4b2b@B3104@scheme-report-environment B3104@scheme-report-environment) (set! B4b2a@B3102@null-environment B3102@null-environment) (set! B4b29@B3100@environment B3100@environment) (set! B4b28@B30fe@environment-symbols B30fe@environment-symbols) (set! B4b27@B30fc@environment? B30fc@environment?) (set! B4b26@B30fa@parse-binding B30fa@parse-binding) (set! B4b25@B30f8@environment-bindings B30f8@environment-bindings) (set! B4b24@B30f6@interaction-environment-symbols B30f6@interaction-environment-symbols) (set! B4b23@B30f4@dummy B30f4@dummy) (set! B4b22@B30f2@set-interaction-env-locs! B30f2@set-interaction-env-locs!) (set! B4b21@B30f0@interaction-env-locs B30f0@interaction-env-locs) (set! B4b20@B30ee@set-interaction-env-r! B30ee@set-interaction-env-r!) (set! B4b1f@B30ec@interaction-env-r B30ec@interaction-env-r) (set! B4b1e@B30ea@set-interaction-env-rib! B30ea@set-interaction-env-rib!) (set! B4b1d@B30e8@interaction-env-rib B30e8@interaction-env-rib) (set! B4b1c@B30e6@interaction-env? B30e6@interaction-env?) (set! B4b1b@B30dc@rp B30dc@rp) (set! B4b1a@B30da@dummy B30da@dummy) (set! B4b19@B30d8@set-env-itc! B30d8@set-env-itc!) (set! B4b18@B30d6@env-itc B30d6@env-itc) (set! B4b17@B30d4@set-env-labels! B30d4@set-env-labels!) (set! B4b16@B30d2@env-labels B30d2@env-labels) (set! B4b15@B30d0@set-env-names! B30d0@set-env-names!) (set! B4b14@B30ce@env-names B30ce@env-names) (set! B4b13@B30cc@env? B30cc@env?) (set! B4b12@B30c2@rp B30c2@rp) (set! B4b11@B30c0@top-level-expander B30c0@top-level-expander) (set! B4b10@B30be@parse-top-level-program B30be@parse-top-level-program) (set! B4b0f@B30bc@core-library-expander B30bc@core-library-expander) (set! B4b0e@B30ba@library-body-expander B30ba@library-body-expander) (set! B4b0d@B30b8@chi-interaction-expr B30b8@chi-interaction-expr) (set! B4b0c@B30b6@chi-library-internal B30b6@chi-library-internal) (set! B4b0b@B30b4@imp-collector B30b4@imp-collector) (set! B4b0a@B30b2@vis-collector B30b2@vis-collector) (set! B4b09@B30b0@inv-collector B30b0@inv-collector) (set! B4b08@B30ae@make-collector B30ae@make-collector) (set! B4b07@B30ac@make-top-rib B30ac@make-top-rib) (set! B4b06@B30aa@parse-import-spec* B30aa@parse-import-spec*) (set! B4b05@B30a8@parse-library B30a8@parse-library) (set! B4b04@B30a6@parse-library-name B30a6@parse-library-name) (set! B4b03@B30a4@parse-exports B30a4@parse-exports) (set! B4b02@B30a2@expand-transformer B30a2@expand-transformer) (set! B4b01@B30a0@chi-body* B30a0@chi-body*) (set! B4b00@B309e@chi-internal-module B309e@chi-internal-module) (set! B4aff@B309c@module-interface-exp-id* B309c@module-interface-exp-id*) (set! B4afe@B309a@dummy B309a@dummy) (set! B4afd@B3098@set-module-interface-exp-lab-vec! B3098@set-module-interface-exp-lab-vec!) (set! B4afc@B3096@module-interface-exp-lab-vec B3096@module-interface-exp-lab-vec) (set! B4afb@B3094@set-module-interface-exp-id-vec! B3094@set-module-interface-exp-id-vec!) (set! B4afa@B3092@module-interface-exp-id-vec B3092@module-interface-exp-id-vec) (set! B4af9@B3090@set-module-interface-first-mark! B3090@set-module-interface-first-mark!) (set! B4af8@B308e@module-interface-first-mark B308e@module-interface-first-mark) (set! B4af7@B308c@module-interface? B308c@module-interface?) (set! B4af6@B3082@parse-module B3082@parse-module) (set! B4af5@B3080@chi-internal B3080@chi-internal) (set! B4af4@B307e@find-dups B307e@find-dups) (set! B4af3@B307c@find-bound=? B307c@find-bound=?) (set! B4af2@B307a@chi-rhs* B307a@chi-rhs*) (set! B4af1@B3078@expand-interaction-rhs*/init* B3078@expand-interaction-rhs*/init*) (set! B4af0@B3076@chi-rhs B3076@chi-rhs) (set! B4aef@B3074@chi-defun B3074@chi-defun) (set! B4aee@B3072@chi-lambda-clause* B3072@chi-lambda-clause*) (set! B4aed@B3070@chi-lambda-clause B3070@chi-lambda-clause) (set! B4aec@B306e@verify-formals B306e@verify-formals) (set! B4aeb@B306c@chi-set! B306c@chi-set!) (set! B4aea@B306a@chi-expr B306a@chi-expr) (set! B4ae9@B3068@chi-application B3068@chi-application) (set! B4ae8@B3066@chi-expr* B3066@chi-expr*) (set! B4ae7@B3064@chi-global-macro B3064@chi-global-macro) (set! B4ae6@B3062@chi-local-macro B3062@chi-local-macro) (set! B4ae5@B3060@chi-macro B3060@chi-macro) (set! B4ae4@B305e@do-macro-call B305e@do-macro-call) (set! B4ae3@B305c@local-macro-transformer B305c@local-macro-transformer) (set! B4ae2@B305a@macro-transformer B305a@macro-transformer) (set! B4ae1@B3058@symbol-macro B3058@symbol-macro) (set! B4ae0@B3056@core-macro-transformer B3056@core-macro-transformer) (set! B4adf@B3054@syntax-transformer B3054@syntax-transformer) (set! B4ade@B3052@ellipsis-map B3052@ellipsis-map) (set! B4add@B3050@syntax-case-transformer B3050@syntax-case-transformer) (set! B4adc@B304e@verify-literals B304e@verify-literals) (set! B4adb@B304c@underscore? B304c@underscore?) (set! B4ada@B304a@ellipsis? B304a@ellipsis?) (set! B4ad9@B3048@syntax-dispatch B3048@syntax-dispatch) (set! B4ad8@B3046@convert-pattern B3046@convert-pattern) (set! B4ad7@B3044@foreign-call-transformer B3044@foreign-call-transformer) (set! B4ad6@B3042@parameterize-macro B3042@parameterize-macro) (set! B4ad5@B3040@incorrect-usage-macro B3040@incorrect-usage-macro) (set! B4ad4@B303e@define-condition-type-macro B303e@define-condition-type-macro) (set! B4ad3@B303c@define-record-type-macro B303c@define-record-type-macro) (set! B4ad2@B303a@define-struct-macro B303a@define-struct-macro) (set! B4ad1@B3038@quasisyntax-macro B3038@quasisyntax-macro) (set! B4ad0@B3036@quasiquote-macro B3036@quasiquote-macro) (set! B4acf@B3034@syntax-rules-macro B3034@syntax-rules-macro) (set! B4ace@B3032@include-into-macro B3032@include-into-macro) (set! B4acd@B3030@include-macro B3030@include-macro) (set! B4acc@B302e@do-include B302e@do-include) (set! B4acb@B302c@cond-macro B302c@cond-macro) (set! B4aca@B302a@and-macro B302a@and-macro) (set! B4ac9@B3028@or-macro B3028@or-macro) (set! B4ac8@B3026@let*-macro B3026@let*-macro) (set! B4ac7@B3024@do-macro B3024@do-macro) (set! B4ac6@B3022@identifier-syntax-macro B3022@identifier-syntax-macro) (set! B4ac5@B3020@endianness-macro B3020@endianness-macro) (set! B4ac4@B301e@assert-macro B301e@assert-macro) (set! B4ac3@B301c@delay-macro B301c@delay-macro) (set! B4ac2@B301a@time-macro B301a@time-macro) (set! B4ac1@B3018@define-enumeration-macro B3018@define-enumeration-macro) (set! B4ac0@B3016@guard-macro B3016@guard-macro) (set! B4abf@B3014@trace-letrec-syntax-macro B3014@trace-letrec-syntax-macro) (set! B4abe@B3012@trace-let-syntax-macro B3012@trace-let-syntax-macro) (set! B4abd@B3010@trace-let/rec-syntax B3010@trace-let/rec-syntax) (set! B4abc@B300e@trace-define-syntax-macro B300e@trace-define-syntax-macro) (set! B4abb@B300c@trace-define-macro B300c@trace-define-macro) (set! B4aba@B300a@trace-lambda-macro B300a@trace-lambda-macro) (set! B4ab9@B3008@let*-values-macro B3008@let*-values-macro) (set! B4ab8@B3006@let-values-macro B3006@let-values-macro) (set! B4ab7@B3004@let-macro B3004@let-macro) (set! B4ab6@B3002@invalid-fmls-error B3002@invalid-fmls-error) (set! B4ab5@B3000@with-syntax-macro B3000@with-syntax-macro) (set! B4ab4@B2ffe@bless B2ffe@bless) (set! B4ab3@B2ffc@lambda-transformer B2ffc@lambda-transformer) (set! B4ab2@B2ffa@case-lambda-transformer B2ffa@case-lambda-transformer) (set! B4ab1@B2ff8@quote-transformer B2ff8@quote-transformer) (set! B4ab0@B2ff6@case-macro B2ff6@case-macro) (set! B4aaf@B2ff4@or-transformer B2ff4@or-transformer) (set! B4aae@B2ff2@and-transformer B2ff2@and-transformer) (set! B4aad@B2ff0@if-transformer B2ff0@if-transformer) (set! B4aac@B2fee@unless-macro B2fee@unless-macro) (set! B4aab@B2fec@when-macro B2fec@when-macro) (set! B4aaa@B2fea@record-constructor-descriptor-transformer B2fea@record-constructor-descriptor-transformer) (set! B4aa9@B2fe8@record-type-descriptor-transformer B2fe8@record-type-descriptor-transformer) (set! B4aa8@B2fe6@type-descriptor-transformer B2fe6@type-descriptor-transformer) (set! B4aa7@B2fe4@fluid-let-syntax-transformer B2fe4@fluid-let-syntax-transformer) (set! B4aa6@B2fe2@letrec*-transformer B2fe2@letrec*-transformer) (set! B4aa5@B2fe0@letrec-transformer B2fe0@letrec-transformer) (set! B4aa4@B2fde@letrec-helper B2fde@letrec-helper) (set! B4aa3@B2fdc@add-lexicals B2fdc@add-lexicals) (set! B4aa2@B2fda@add-lexical B2fda@add-lexical) (set! B4aa1@B2fd8@set-lexical-mutable! B2fd8@set-lexical-mutable!) (set! B4aa0@B2fd6@lexical-mutable? B2fd6@lexical-mutable?) (set! B4a9f@B2fd4@lexical-var B2fd4@lexical-var) (set! B4a9e@B2fd2@scheme-stx B2fd2@scheme-stx) (set! B4a9d@B2fd0@scheme-stx-hashtable B2fd0@scheme-stx-hashtable) (set! B4a9c@B2fce@parse-define-syntax B2fce@parse-define-syntax) (set! B4a9b@B2fcc@parse-define B2fcc@parse-define) (set! B4a9a@B2e7b@make-eval-transformer B2e7b@make-eval-transformer) (set! B4a99@B2e79@variable-transformer-procedure B2e79@variable-transformer-procedure) (set! B4a98@B2e77@variable-transformer? B2e77@variable-transformer?) (set! B4a97@B2e75@make-variable-transformer B2e75@make-variable-transformer) (set! B4a96@B2e73@sanitize-binding B2e73@sanitize-binding) (set! B4a95@B2e65@syntax-type B2e65@syntax-type) (set! B4a94@B2e63@raise-unbound-error B2e63@raise-unbound-error) (set! B4a93@B2e61@binding-value B2e61@binding-value) (set! B4a92@B2e5f@binding-type B2e5f@binding-type) (set! B4a91@B2e5d@make-binding B2e5d@make-binding) (set! B4a90@B2e5b@label->binding B2e5b@label->binding) (set! B4a8f@B2e59@id->label B2e59@id->label) (set! B4a8e@B2e57@stx->datum B2e57@stx->datum) (set! B4a8d@B2e55@strip B2e55@strip) (set! B4a8c@B2e53@strip-annotations B2e53@strip-annotations) (set! B4a8b@B2e51@self-evaluating? B2e51@self-evaluating?) (set! B4a8a@B2e4f@bound-id-member? B2e4f@bound-id-member?) (set! B4a89@B2e4d@distinct-bound-ids? B2e4d@distinct-bound-ids?) (set! B4a88@B2e4b@valid-bound-ids? B2e4b@valid-bound-ids?) (set! B4a87@B2e49@free-id=? B2e49@free-id=?) (set! B4a86@B2e47@bound-id=? B2e47@bound-id=?) (set! B4a85@B2e45@id->sym B2e45@id->sym) (set! B4a84@B2e43@id? B2e43@id?) (set! B4a83@B2e41@syntax->list B2e41@syntax->list) (set! B4a82@B2e3f@syntax-cdr B2e3f@syntax-cdr) (set! B4a81@B2e3d@syntax-car B2e3d@syntax-car) (set! B4a80@B2e3b@syntax-list? B2e3b@syntax-list?) (set! B4a7f@B2e39@syntax-null? B2e39@syntax-null?) (set! B4a7e@B2e37@syntax-vector? B2e37@syntax-vector?) (set! B4a7d@B2e35@syntax-pair? B2e35@syntax-pair?) (set! B4a7c@B2e33@syntax-vector->list B2e33@syntax-vector->list) (set! B4a7b@B2e31@syntax-kind? B2e31@syntax-kind?) (set! B4a7a@B2e2f@add-subst B2e2f@add-subst) (set! B4a79@B2e2d@add-mark B2e2d@add-mark) (set! B4a78@B2e2b@mkstx B2e2b@mkstx) (set! B4a77@B2e29@anti-mark? B2e29@anti-mark?) (set! B4a76@B2e27@anti-mark B2e27@anti-mark) (set! B4a75@B2e25@gen-mark B2e25@gen-mark) (set! B4a74@B2e23@datum->stx B2e23@datum->stx) (set! B4a73@B2e21@dummy B2e21@dummy) (set! B4a72@B2e1f@set-stx-ae*! B2e1f@set-stx-ae*!) (set! B4a71@B2e1d@stx-ae* B2e1d@stx-ae*) (set! B4a70@B2e1b@set-stx-subst*! B2e1b@set-stx-subst*!) (set! B4a6f@B2e19@stx-subst* B2e19@stx-subst*) (set! B4a6e@B2e17@set-stx-mark*! B2e17@set-stx-mark*!) (set! B4a6d@B2e15@stx-mark* B2e15@stx-mark*) (set! B4a6c@B2e13@set-stx-expr! B2e13@set-stx-expr!) (set! B4a6b@B2e11@stx-expr B2e11@stx-expr) (set! B4a6a@B2e0f@stx? B2e0f@stx?) (set! B4a69@B2e05@rp B2e05@rp) (set! B4a68@B2e03@make-full-rib B2e03@make-full-rib) (set! B4a67@B2e01@unseal-rib! B2e01@unseal-rib!) (set! B4a66@B2dff@seal-rib! B2dff@seal-rib!) (set! B4a65@B2dfd@make-rib-map B2dfd@make-rib-map) (set! B4a64@B2dfb@extend-rib/nc! B2dfb@extend-rib/nc!) (set! B4a63@B2df9@extend-rib! B2df9@extend-rib!) (set! B4a62@B2df7@make-empty-rib B2df7@make-empty-rib) (set! B4a61@B2df5@dummy B2df5@dummy) (set! B4a60@B2df3@set-rib-cache! B2df3@set-rib-cache!) (set! B4a5f@B2df1@rib-cache B2df1@rib-cache) (set! B4a5e@B2def@set-rib-sealed/freq! B2def@set-rib-sealed/freq!) (set! B4a5d@B2ded@rib-sealed/freq B2ded@rib-sealed/freq) (set! B4a5c@B2deb@set-rib-label*! B2deb@set-rib-label*!) (set! B4a5b@B2de9@rib-label* B2de9@rib-label*) (set! B4a5a@B2de7@set-rib-mark**! B2de7@set-rib-mark**!) (set! B4a59@B2de5@rib-mark** B2de5@rib-mark**) (set! B4a58@B2de3@set-rib-sym*! B2de3@set-rib-sym*!) (set! B4a57@B2de1@rib-sym* B2de1@rib-sym*) (set! B4a56@B2ddf@rib? B2ddf@rib?) (set! B4a55@B2dd5@gen-define-label B2dd5@gen-define-label) (set! B4a54@B2dd3@gen-define-label+loc B2dd3@gen-define-label+loc) (set! B4a53@B2dd1@gen-top-level-label B2dd1@gen-top-level-label) (set! B4a52@B2dcf@gen-label B2dcf@gen-label) (set! B4a51@B2dcd@gen-global B2dcd@gen-global) (set! B4a50@B2dcb@gen-lexical B2dcb@gen-lexical) (set! B4a4f@B2dc9@top-marked? B2dc9@top-marked?) (set! B4a4e@B2dc7@top-mark* B2dc7@top-mark*) (set! B4a4d@B2dc2@set-union B2dc2@set-union) (set! B4a4c@B2dc0@set-cons B2dc0@set-cons) (set! B4a4b@B2dbe@file-options-macro B2dbe@file-options-macro) (B2c64@B2aa8@current-library-expander B310a@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (B4b53@B4b4e B4b55@B4b50 B4b57@B4b4f B4b5a@&condition? B4b5c@make-&condition B4b5e@&condition-rtd B4b60@&condition-rcd B4bac@B4ba7 B4bae@B4ba9 B4bb0@B4ba8 B4bb3@p? B4bb5@make-message-condition B4bb7@B4ba6 B4bb9@message-condition? B4bbb@condition-message B4bbd@&message-rtd B4bbf@&message-rcd B4bc5@B4bc0 B4bc7@B4bc2 B4bc9@B4bc1 B4bcc@p? B4bce@make-warning B4bd0@warning? B4bd2@&warning-rtd B4bd4@&warning-rcd B4bda@B4bd5 B4bdc@B4bd7 B4bde@B4bd6 B4be1@p? B4be3@make-serious-condition B4be5@serious-condition? B4be7@&serious-rtd B4be9@&serious-rcd B4bef@B4bea B4bf1@B4bec B4bf3@B4beb B4bf6@p? B4bf8@make-error B4bfa@error? B4bfc@&error-rtd B4bfe@&error-rcd B4c04@B4bff B4c06@B4c01 B4c08@B4c00 B4c0b@p? B4c0d@make-violation B4c0f@violation? B4c11@&violation-rtd B4c13@&violation-rcd B4c19@B4c14 B4c1b@B4c16 B4c1d@B4c15 B4c20@p? B4c22@make-assertion-violation B4c24@assertion-violation? B4c26@&assertion-rtd B4c28@&assertion-rcd B4c30@B4c2b B4c32@B4c2d B4c34@B4c2c B4c37@p? B4c39@make-irritants-condition B4c3b@B4c2a B4c3d@irritants-condition? B4c3f@condition-irritants B4c41@&irritants-rtd B4c43@&irritants-rcd B4c4b@B4c46 B4c4d@B4c48 B4c4f@B4c47 B4c52@p? B4c54@make-who-condition B4c56@B4c45 B4c58@who-condition? B4c5a@condition-who B4c5c@&who-rtd B4c5e@&who-rcd B4c64@B4c5f B4c66@B4c61 B4c68@B4c60 B4c6b@p? B4c6d@make-non-continuable-violation B4c6f@non-continuable-violation? B4c71@&non-continuable-rtd B4c73@&non-continuable-rcd B4c79@B4c74 B4c7b@B4c76 B4c7d@B4c75 B4c80@p? B4c82@make-implementation-restriction-violation B4c84@implementation-restriction-violation? B4c86@&implementation-restriction-rtd B4c88@&implementation-restriction-rcd B4c8e@B4c89 B4c90@B4c8b B4c92@B4c8a B4c95@p? B4c97@make-lexical-violation B4c99@lexical-violation? B4c9b@&lexical-rtd B4c9d@&lexical-rcd B4ca7@B4ca2 B4ca9@B4ca4 B4cab@B4ca3 B4cae@p? B4cb0@make-syntax-violation B4cb2@B4c9f B4cb4@B4ca1 B4cb6@syntax-violation? B4cb8@syntax-violation-form B4cba@syntax-violation-subform B4cbc@&syntax-rtd B4cbe@&syntax-rcd B4cc4@B4cbf B4cc6@B4cc1 B4cc8@B4cc0 B4ccb@p? B4ccd@make-undefined-violation B4ccf@undefined-violation? B4cd1@&undefined-rtd B4cd3@&undefined-rcd B4cd9@B4cd4 B4cdb@B4cd6 B4cdd@B4cd5 B4ce0@p? B4ce2@make-i/o-error B4ce4@i/o-error? B4ce6@&i/o-rtd B4ce8@&i/o-rcd B4cee@B4ce9 B4cf0@B4ceb B4cf2@B4cea B4cf5@p? B4cf7@make-i/o-read-error B4cf9@i/o-read-error? B4cfb@&i/o-read-rtd B4cfd@&i/o-read-rcd B4d03@B4cfe B4d05@B4d00 B4d07@B4cff B4d0a@p? B4d0c@make-i/o-write-error B4d0e@i/o-write-error? B4d10@&i/o-write-rtd B4d12@&i/o-write-rcd B4d1a@B4d15 B4d1c@B4d17 B4d1e@B4d16 B4d21@p? B4d23@make-i/o-invalid-position-error B4d25@B4d14 B4d27@i/o-invalid-position-error? B4d29@i/o-error-position B4d2b@&i/o-invalid-position-rtd B4d2d@&i/o-invalid-position-rcd B4d35@B4d30 B4d37@B4d32 B4d39@B4d31 B4d3c@p? B4d3e@make-i/o-filename-error B4d40@B4d2f B4d42@i/o-filename-error? B4d44@i/o-error-filename B4d46@&i/o-filename-rtd B4d48@&i/o-filename-rcd B4d4e@B4d49 B4d50@B4d4b B4d52@B4d4a B4d55@p? B4d57@make-i/o-file-protection-error B4d59@i/o-file-protection-error? B4d5b@&i/o-file-protection-rtd B4d5d@&i/o-file-protection-rcd B4d63@B4d5e B4d65@B4d60 B4d67@B4d5f B4d6a@p? B4d6c@make-i/o-file-is-read-only-error B4d6e@i/o-file-is-read-only-error? B4d70@&i/o-file-is-read-only-rtd B4d72@&i/o-file-is-read-only-rcd B4d78@B4d73 B4d7a@B4d75 B4d7c@B4d74 B4d7f@p? B4d81@make-i/o-file-already-exists-error B4d83@i/o-file-already-exists-error? B4d85@&i/o-file-already-exists-rtd B4d87@&i/o-file-already-exists-rcd B4d8d@B4d88 B4d8f@B4d8a B4d91@B4d89 B4d94@p? B4d96@make-i/o-file-does-not-exist-error B4d98@i/o-file-does-not-exist-error? B4d9a@&i/o-file-does-not-exist-rtd B4d9c@&i/o-file-does-not-exist-rcd B4da4@B4d9f B4da6@B4da1 B4da8@B4da0 B4dab@p? B4dad@make-i/o-port-error B4daf@B4d9e B4db1@i/o-port-error? B4db3@i/o-error-port B4db5@&i/o-port-rtd B4db7@&i/o-port-rcd B4dbd@B4db8 B4dbf@B4dba B4dc1@B4db9 B4dc4@p? B4dc6@make-i/o-decoding-error B4dc8@i/o-decoding-error? B4dca@&i/o-decoding-rtd B4dcc@&i/o-decoding-rcd B4dd4@B4dcf B4dd6@B4dd1 B4dd8@B4dd0 B4ddb@p? B4ddd@make-i/o-encoding-error B4ddf@B4dce B4de1@i/o-encoding-error? B4de3@i/o-encoding-error-char B4de5@&i/o-encoding-rtd B4de7@&i/o-encoding-rcd B4ded@B4de8 B4def@B4dea B4df1@B4de9 B4df4@p? B4df6@make-no-infinities-violation B4df8@no-infinities-violation? B4dfa@&no-infinities-rtd B4dfc@&no-infinities-rcd B4e02@B4dfd B4e04@B4dff B4e06@B4dfe B4e09@p? B4e0b@make-no-nans-violation B4e0d@no-nans-violation? B4e0f@&no-nans-rtd B4e11@&no-nans-rcd) (begin (set! B4b53@B4b4e (make-record-type-descriptor '&condition '#f 'B4b51 '#f '#f '#())) (set! B4b55@B4b50 '#f) (set! B4b57@B4b4f (make-record-constructor-descriptor B4b53@B4b4e '#f B4b55@B4b50)) (set! B4b5a@&condition? (record-predicate B4b53@B4b4e)) (set! B4b5c@make-&condition (record-constructor B4b57@B4b4f)) (set! B4b5e@&condition-rtd B4b53@B4b4e) (set! B4b60@&condition-rcd B4b57@B4b4f) (set! B4bac@B4ba7 (make-record-type-descriptor '&message B4b53@B4b4e 'B4baa '#f '#f '#((immutable message)))) (set! B4bae@B4ba9 '#f) (set! B4bb0@B4ba8 (make-record-constructor-descriptor B4bac@B4ba7 B4b57@B4b4f B4bae@B4ba9)) (set! B4bb3@p? (record-predicate B4bac@B4ba7)) (set! B4bb5@make-message-condition (record-constructor B4bb0@B4ba8)) (set! B4bb7@B4ba6 (record-accessor B4bac@B4ba7 '0)) (set! B4bb9@message-condition? (condition-predicate B4bac@B4ba7)) (set! B4bbb@condition-message (condition-accessor B4bac@B4ba7 B4bb7@B4ba6)) (set! B4bbd@&message-rtd B4bac@B4ba7) (set! B4bbf@&message-rcd B4bb0@B4ba8) (set! B4bc5@B4bc0 (make-record-type-descriptor '&warning B4b53@B4b4e 'B4bc3 '#f '#f '#())) (set! B4bc7@B4bc2 '#f) (set! B4bc9@B4bc1 (make-record-constructor-descriptor B4bc5@B4bc0 B4b57@B4b4f B4bc7@B4bc2)) (set! B4bcc@p? (record-predicate B4bc5@B4bc0)) (set! B4bce@make-warning (record-constructor B4bc9@B4bc1)) (set! B4bd0@warning? (condition-predicate B4bc5@B4bc0)) (set! B4bd2@&warning-rtd B4bc5@B4bc0) (set! B4bd4@&warning-rcd B4bc9@B4bc1) (set! B4bda@B4bd5 (make-record-type-descriptor '&serious B4b53@B4b4e 'B4bd8 '#f '#f '#())) (set! B4bdc@B4bd7 '#f) (set! B4bde@B4bd6 (make-record-constructor-descriptor B4bda@B4bd5 B4b57@B4b4f B4bdc@B4bd7)) (set! B4be1@p? (record-predicate B4bda@B4bd5)) (set! B4be3@make-serious-condition (record-constructor B4bde@B4bd6)) (set! B4be5@serious-condition? (condition-predicate B4bda@B4bd5)) (set! B4be7@&serious-rtd B4bda@B4bd5) (set! B4be9@&serious-rcd B4bde@B4bd6) (set! B4bef@B4bea (make-record-type-descriptor '&error B4bda@B4bd5 'B4bed '#f '#f '#())) (set! B4bf1@B4bec '#f) (set! B4bf3@B4beb (make-record-constructor-descriptor B4bef@B4bea B4bde@B4bd6 B4bf1@B4bec)) (set! B4bf6@p? (record-predicate B4bef@B4bea)) (set! B4bf8@make-error (record-constructor B4bf3@B4beb)) (set! B4bfa@error? (condition-predicate B4bef@B4bea)) (set! B4bfc@&error-rtd B4bef@B4bea) (set! B4bfe@&error-rcd B4bf3@B4beb) (set! B4c04@B4bff (make-record-type-descriptor '&violation B4bda@B4bd5 'B4c02 '#f '#f '#())) (set! B4c06@B4c01 '#f) (set! B4c08@B4c00 (make-record-constructor-descriptor B4c04@B4bff B4bde@B4bd6 B4c06@B4c01)) (set! B4c0b@p? (record-predicate B4c04@B4bff)) (set! B4c0d@make-violation (record-constructor B4c08@B4c00)) (set! B4c0f@violation? (condition-predicate B4c04@B4bff)) (set! B4c11@&violation-rtd B4c04@B4bff) (set! B4c13@&violation-rcd B4c08@B4c00) (set! B4c19@B4c14 (make-record-type-descriptor '&assertion B4c04@B4bff 'B4c17 '#f '#f '#())) (set! B4c1b@B4c16 '#f) (set! B4c1d@B4c15 (make-record-constructor-descriptor B4c19@B4c14 B4c08@B4c00 B4c1b@B4c16)) (set! B4c20@p? (record-predicate B4c19@B4c14)) (set! B4c22@make-assertion-violation (record-constructor B4c1d@B4c15)) (set! B4c24@assertion-violation? (condition-predicate B4c19@B4c14)) (set! B4c26@&assertion-rtd B4c19@B4c14) (set! B4c28@&assertion-rcd B4c1d@B4c15) (set! B4c30@B4c2b (make-record-type-descriptor '&irritants B4b53@B4b4e 'B4c2e '#f '#f '#((immutable irritants)))) (set! B4c32@B4c2d '#f) (set! B4c34@B4c2c (make-record-constructor-descriptor B4c30@B4c2b B4b57@B4b4f B4c32@B4c2d)) (set! B4c37@p? (record-predicate B4c30@B4c2b)) (set! B4c39@make-irritants-condition (record-constructor B4c34@B4c2c)) (set! B4c3b@B4c2a (record-accessor B4c30@B4c2b '0)) (set! B4c3d@irritants-condition? (condition-predicate B4c30@B4c2b)) (set! B4c3f@condition-irritants (condition-accessor B4c30@B4c2b B4c3b@B4c2a)) (set! B4c41@&irritants-rtd B4c30@B4c2b) (set! B4c43@&irritants-rcd B4c34@B4c2c) (set! B4c4b@B4c46 (make-record-type-descriptor '&who B4b53@B4b4e 'B4c49 '#f '#f '#((immutable who)))) (set! B4c4d@B4c48 '#f) (set! B4c4f@B4c47 (make-record-constructor-descriptor B4c4b@B4c46 B4b57@B4b4f B4c4d@B4c48)) (set! B4c52@p? (record-predicate B4c4b@B4c46)) (set! B4c54@make-who-condition (record-constructor B4c4f@B4c47)) (set! B4c56@B4c45 (record-accessor B4c4b@B4c46 '0)) (set! B4c58@who-condition? (condition-predicate B4c4b@B4c46)) (set! B4c5a@condition-who (condition-accessor B4c4b@B4c46 B4c56@B4c45)) (set! B4c5c@&who-rtd B4c4b@B4c46) (set! B4c5e@&who-rcd B4c4f@B4c47) (set! B4c64@B4c5f (make-record-type-descriptor '&non-continuable B4c04@B4bff 'B4c62 '#f '#f '#())) (set! B4c66@B4c61 '#f) (set! B4c68@B4c60 (make-record-constructor-descriptor B4c64@B4c5f B4c08@B4c00 B4c66@B4c61)) (set! B4c6b@p? (record-predicate B4c64@B4c5f)) (set! B4c6d@make-non-continuable-violation (record-constructor B4c68@B4c60)) (set! B4c6f@non-continuable-violation? (condition-predicate B4c64@B4c5f)) (set! B4c71@&non-continuable-rtd B4c64@B4c5f) (set! B4c73@&non-continuable-rcd B4c68@B4c60) (set! B4c79@B4c74 (make-record-type-descriptor '&implementation-restriction B4c04@B4bff 'B4c77 '#f '#f '#())) (set! B4c7b@B4c76 '#f) (set! B4c7d@B4c75 (make-record-constructor-descriptor B4c79@B4c74 B4c08@B4c00 B4c7b@B4c76)) (set! B4c80@p? (record-predicate B4c79@B4c74)) (set! B4c82@make-implementation-restriction-violation (record-constructor B4c7d@B4c75)) (set! B4c84@implementation-restriction-violation? (condition-predicate B4c79@B4c74)) (set! B4c86@&implementation-restriction-rtd B4c79@B4c74) (set! B4c88@&implementation-restriction-rcd B4c7d@B4c75) (set! B4c8e@B4c89 (make-record-type-descriptor '&lexical B4c04@B4bff 'B4c8c '#f '#f '#())) (set! B4c90@B4c8b '#f) (set! B4c92@B4c8a (make-record-constructor-descriptor B4c8e@B4c89 B4c08@B4c00 B4c90@B4c8b)) (set! B4c95@p? (record-predicate B4c8e@B4c89)) (set! B4c97@make-lexical-violation (record-constructor B4c92@B4c8a)) (set! B4c99@lexical-violation? (condition-predicate B4c8e@B4c89)) (set! B4c9b@&lexical-rtd B4c8e@B4c89) (set! B4c9d@&lexical-rcd B4c92@B4c8a) (set! B4ca7@B4ca2 (make-record-type-descriptor '&syntax B4c04@B4bff 'B4ca5 '#f '#f '#((immutable form) (immutable subform)))) (set! B4ca9@B4ca4 '#f) (set! B4cab@B4ca3 (make-record-constructor-descriptor B4ca7@B4ca2 B4c08@B4c00 B4ca9@B4ca4)) (set! B4cae@p? (record-predicate B4ca7@B4ca2)) (set! B4cb0@make-syntax-violation (record-constructor B4cab@B4ca3)) (set! B4cb2@B4c9f (record-accessor B4ca7@B4ca2 '0)) (set! B4cb4@B4ca1 (record-accessor B4ca7@B4ca2 '1)) (set! B4cb6@syntax-violation? (condition-predicate B4ca7@B4ca2)) (set! B4cb8@syntax-violation-form (condition-accessor B4ca7@B4ca2 B4cb2@B4c9f)) (set! B4cba@syntax-violation-subform (condition-accessor B4ca7@B4ca2 B4cb4@B4ca1)) (set! B4cbc@&syntax-rtd B4ca7@B4ca2) (set! B4cbe@&syntax-rcd B4cab@B4ca3) (set! B4cc4@B4cbf (make-record-type-descriptor '&undefined B4c04@B4bff 'B4cc2 '#f '#f '#())) (set! B4cc6@B4cc1 '#f) (set! B4cc8@B4cc0 (make-record-constructor-descriptor B4cc4@B4cbf B4c08@B4c00 B4cc6@B4cc1)) (set! B4ccb@p? (record-predicate B4cc4@B4cbf)) (set! B4ccd@make-undefined-violation (record-constructor B4cc8@B4cc0)) (set! B4ccf@undefined-violation? (condition-predicate B4cc4@B4cbf)) (set! B4cd1@&undefined-rtd B4cc4@B4cbf) (set! B4cd3@&undefined-rcd B4cc8@B4cc0) (set! B4cd9@B4cd4 (make-record-type-descriptor '&i/o B4bef@B4bea 'B4cd7 '#f '#f '#())) (set! B4cdb@B4cd6 '#f) (set! B4cdd@B4cd5 (make-record-constructor-descriptor B4cd9@B4cd4 B4bf3@B4beb B4cdb@B4cd6)) (set! B4ce0@p? (record-predicate B4cd9@B4cd4)) (set! B4ce2@make-i/o-error (record-constructor B4cdd@B4cd5)) (set! B4ce4@i/o-error? (condition-predicate B4cd9@B4cd4)) (set! B4ce6@&i/o-rtd B4cd9@B4cd4) (set! B4ce8@&i/o-rcd B4cdd@B4cd5) (set! B4cee@B4ce9 (make-record-type-descriptor '&i/o-read B4cd9@B4cd4 'B4cec '#f '#f '#())) (set! B4cf0@B4ceb '#f) (set! B4cf2@B4cea (make-record-constructor-descriptor B4cee@B4ce9 B4cdd@B4cd5 B4cf0@B4ceb)) (set! B4cf5@p? (record-predicate B4cee@B4ce9)) (set! B4cf7@make-i/o-read-error (record-constructor B4cf2@B4cea)) (set! B4cf9@i/o-read-error? (condition-predicate B4cee@B4ce9)) (set! B4cfb@&i/o-read-rtd B4cee@B4ce9) (set! B4cfd@&i/o-read-rcd B4cf2@B4cea) (set! B4d03@B4cfe (make-record-type-descriptor '&i/o-write B4cd9@B4cd4 'B4d01 '#f '#f '#())) (set! B4d05@B4d00 '#f) (set! B4d07@B4cff (make-record-constructor-descriptor B4d03@B4cfe B4cdd@B4cd5 B4d05@B4d00)) (set! B4d0a@p? (record-predicate B4d03@B4cfe)) (set! B4d0c@make-i/o-write-error (record-constructor B4d07@B4cff)) (set! B4d0e@i/o-write-error? (condition-predicate B4d03@B4cfe)) (set! B4d10@&i/o-write-rtd B4d03@B4cfe) (set! B4d12@&i/o-write-rcd B4d07@B4cff) (set! B4d1a@B4d15 (make-record-type-descriptor '&i/o-invalid-position B4cd9@B4cd4 'B4d18 '#f '#f '#((immutable position)))) (set! B4d1c@B4d17 '#f) (set! B4d1e@B4d16 (make-record-constructor-descriptor B4d1a@B4d15 B4cdd@B4cd5 B4d1c@B4d17)) (set! B4d21@p? (record-predicate B4d1a@B4d15)) (set! B4d23@make-i/o-invalid-position-error (record-constructor B4d1e@B4d16)) (set! B4d25@B4d14 (record-accessor B4d1a@B4d15 '0)) (set! B4d27@i/o-invalid-position-error? (condition-predicate B4d1a@B4d15)) (set! B4d29@i/o-error-position (condition-accessor B4d1a@B4d15 B4d25@B4d14)) (set! B4d2b@&i/o-invalid-position-rtd B4d1a@B4d15) (set! B4d2d@&i/o-invalid-position-rcd B4d1e@B4d16) (set! B4d35@B4d30 (make-record-type-descriptor '&i/o-filename B4cd9@B4cd4 'B4d33 '#f '#f '#((immutable filename)))) (set! B4d37@B4d32 '#f) (set! B4d39@B4d31 (make-record-constructor-descriptor B4d35@B4d30 B4cdd@B4cd5 B4d37@B4d32)) (set! B4d3c@p? (record-predicate B4d35@B4d30)) (set! B4d3e@make-i/o-filename-error (record-constructor B4d39@B4d31)) (set! B4d40@B4d2f (record-accessor B4d35@B4d30 '0)) (set! B4d42@i/o-filename-error? (condition-predicate B4d35@B4d30)) (set! B4d44@i/o-error-filename (condition-accessor B4d35@B4d30 B4d40@B4d2f)) (set! B4d46@&i/o-filename-rtd B4d35@B4d30) (set! B4d48@&i/o-filename-rcd B4d39@B4d31) (set! B4d4e@B4d49 (make-record-type-descriptor '&i/o-file-protection B4d35@B4d30 'B4d4c '#f '#f '#())) (set! B4d50@B4d4b '#f) (set! B4d52@B4d4a (make-record-constructor-descriptor B4d4e@B4d49 B4d39@B4d31 B4d50@B4d4b)) (set! B4d55@p? (record-predicate B4d4e@B4d49)) (set! B4d57@make-i/o-file-protection-error (record-constructor B4d52@B4d4a)) (set! B4d59@i/o-file-protection-error? (condition-predicate B4d4e@B4d49)) (set! B4d5b@&i/o-file-protection-rtd B4d4e@B4d49) (set! B4d5d@&i/o-file-protection-rcd B4d52@B4d4a) (set! B4d63@B4d5e (make-record-type-descriptor '&i/o-file-is-read-only B4d4e@B4d49 'B4d61 '#f '#f '#())) (set! B4d65@B4d60 '#f) (set! B4d67@B4d5f (make-record-constructor-descriptor B4d63@B4d5e B4d52@B4d4a B4d65@B4d60)) (set! B4d6a@p? (record-predicate B4d63@B4d5e)) (set! B4d6c@make-i/o-file-is-read-only-error (record-constructor B4d67@B4d5f)) (set! B4d6e@i/o-file-is-read-only-error? (condition-predicate B4d63@B4d5e)) (set! B4d70@&i/o-file-is-read-only-rtd B4d63@B4d5e) (set! B4d72@&i/o-file-is-read-only-rcd B4d67@B4d5f) (set! B4d78@B4d73 (make-record-type-descriptor '&i/o-file-already-exists B4d35@B4d30 'B4d76 '#f '#f '#())) (set! B4d7a@B4d75 '#f) (set! B4d7c@B4d74 (make-record-constructor-descriptor B4d78@B4d73 B4d39@B4d31 B4d7a@B4d75)) (set! B4d7f@p? (record-predicate B4d78@B4d73)) (set! B4d81@make-i/o-file-already-exists-error (record-constructor B4d7c@B4d74)) (set! B4d83@i/o-file-already-exists-error? (condition-predicate B4d78@B4d73)) (set! B4d85@&i/o-file-already-exists-rtd B4d78@B4d73) (set! B4d87@&i/o-file-already-exists-rcd B4d7c@B4d74) (set! B4d8d@B4d88 (make-record-type-descriptor '&i/o-file-does-not-exist B4d35@B4d30 'B4d8b '#f '#f '#())) (set! B4d8f@B4d8a '#f) (set! B4d91@B4d89 (make-record-constructor-descriptor B4d8d@B4d88 B4d39@B4d31 B4d8f@B4d8a)) (set! B4d94@p? (record-predicate B4d8d@B4d88)) (set! B4d96@make-i/o-file-does-not-exist-error (record-constructor B4d91@B4d89)) (set! B4d98@i/o-file-does-not-exist-error? (condition-predicate B4d8d@B4d88)) (set! B4d9a@&i/o-file-does-not-exist-rtd B4d8d@B4d88) (set! B4d9c@&i/o-file-does-not-exist-rcd B4d91@B4d89) (set! B4da4@B4d9f (make-record-type-descriptor '&i/o-port B4cd9@B4cd4 'B4da2 '#f '#f '#((immutable port)))) (set! B4da6@B4da1 '#f) (set! B4da8@B4da0 (make-record-constructor-descriptor B4da4@B4d9f B4cdd@B4cd5 B4da6@B4da1)) (set! B4dab@p? (record-predicate B4da4@B4d9f)) (set! B4dad@make-i/o-port-error (record-constructor B4da8@B4da0)) (set! B4daf@B4d9e (record-accessor B4da4@B4d9f '0)) (set! B4db1@i/o-port-error? (condition-predicate B4da4@B4d9f)) (set! B4db3@i/o-error-port (condition-accessor B4da4@B4d9f B4daf@B4d9e)) (set! B4db5@&i/o-port-rtd B4da4@B4d9f) (set! B4db7@&i/o-port-rcd B4da8@B4da0) (set! B4dbd@B4db8 (make-record-type-descriptor '&i/o-decoding B4da4@B4d9f 'B4dbb '#f '#f '#())) (set! B4dbf@B4dba '#f) (set! B4dc1@B4db9 (make-record-constructor-descriptor B4dbd@B4db8 B4da8@B4da0 B4dbf@B4dba)) (set! B4dc4@p? (record-predicate B4dbd@B4db8)) (set! B4dc6@make-i/o-decoding-error (record-constructor B4dc1@B4db9)) (set! B4dc8@i/o-decoding-error? (condition-predicate B4dbd@B4db8)) (set! B4dca@&i/o-decoding-rtd B4dbd@B4db8) (set! B4dcc@&i/o-decoding-rcd B4dc1@B4db9) (set! B4dd4@B4dcf (make-record-type-descriptor '&i/o-encoding B4da4@B4d9f 'B4dd2 '#f '#f '#((immutable char)))) (set! B4dd6@B4dd1 '#f) (set! B4dd8@B4dd0 (make-record-constructor-descriptor B4dd4@B4dcf B4da8@B4da0 B4dd6@B4dd1)) (set! B4ddb@p? (record-predicate B4dd4@B4dcf)) (set! B4ddd@make-i/o-encoding-error (record-constructor B4dd8@B4dd0)) (set! B4ddf@B4dce (record-accessor B4dd4@B4dcf '0)) (set! B4de1@i/o-encoding-error? (condition-predicate B4dd4@B4dcf)) (set! B4de3@i/o-encoding-error-char (condition-accessor B4dd4@B4dcf B4ddf@B4dce)) (set! B4de5@&i/o-encoding-rtd B4dd4@B4dcf) (set! B4de7@&i/o-encoding-rcd B4dd8@B4dd0) (set! B4ded@B4de8 (make-record-type-descriptor '&no-infinities B4c79@B4c74 'B4deb '#f '#f '#())) (set! B4def@B4dea '#f) (set! B4df1@B4de9 (make-record-constructor-descriptor B4ded@B4de8 B4c7d@B4c75 B4def@B4dea)) (set! B4df4@p? (record-predicate B4ded@B4de8)) (set! B4df6@make-no-infinities-violation (record-constructor B4df1@B4de9)) (set! B4df8@no-infinities-violation? (condition-predicate B4ded@B4de8)) (set! B4dfa@&no-infinities-rtd B4ded@B4de8) (set! B4dfc@&no-infinities-rcd B4df1@B4de9) (set! B4e02@B4dfd (make-record-type-descriptor '&no-nans B4c79@B4c74 'B4e00 '#f '#f '#())) (set! B4e04@B4dff '#f) (set! B4e06@B4dfe (make-record-constructor-descriptor B4e02@B4dfd B4c7d@B4c75 B4e04@B4dff)) (set! B4e09@p? (record-predicate B4e02@B4dfd)) (set! B4e0b@make-no-nans-violation (record-constructor B4e06@B4dfe)) (set! B4e0d@no-nans-violation? (condition-predicate B4e02@B4dfd)) (set! B4e0f@&no-nans-rtd B4e02@B4dfd) (set! B4e11@&no-nans-rcd B4e06@B4dfe) (begin (set! B4f02@B4e11@&no-nans-rcd B4e11@&no-nans-rcd) (set! B4f01@B4e0f@&no-nans-rtd B4e0f@&no-nans-rtd) (set! B4f00@B4e0d@no-nans-violation? B4e0d@no-nans-violation?) (set! B4eff@B4e0b@make-no-nans-violation B4e0b@make-no-nans-violation) (set! B4efe@B4e09@p? B4e09@p?) (set! B4efd@B4e06@B4dfe B4e06@B4dfe) (set! B4efc@B4e04@B4dff B4e04@B4dff) (set! B4efb@B4e02@B4dfd B4e02@B4dfd) (set! B4efa@B4dfc@&no-infinities-rcd B4dfc@&no-infinities-rcd) (set! B4ef9@B4dfa@&no-infinities-rtd B4dfa@&no-infinities-rtd) (set! B4ef8@B4df8@no-infinities-violation? B4df8@no-infinities-violation?) (set! B4ef7@B4df6@make-no-infinities-violation B4df6@make-no-infinities-violation) (set! B4ef6@B4df4@p? B4df4@p?) (set! B4ef5@B4df1@B4de9 B4df1@B4de9) (set! B4ef4@B4def@B4dea B4def@B4dea) (set! B4ef3@B4ded@B4de8 B4ded@B4de8) (set! B4ef2@B4de7@&i/o-encoding-rcd B4de7@&i/o-encoding-rcd) (set! B4ef1@B4de5@&i/o-encoding-rtd B4de5@&i/o-encoding-rtd) (set! B4ef0@B4de3@i/o-encoding-error-char B4de3@i/o-encoding-error-char) (set! B4eef@B4de1@i/o-encoding-error? B4de1@i/o-encoding-error?) (set! B4eee@B4ddf@B4dce B4ddf@B4dce) (set! B4eed@B4ddd@make-i/o-encoding-error B4ddd@make-i/o-encoding-error) (set! B4eec@B4ddb@p? B4ddb@p?) (set! B4eeb@B4dd8@B4dd0 B4dd8@B4dd0) (set! B4eea@B4dd6@B4dd1 B4dd6@B4dd1) (set! B4ee9@B4dd4@B4dcf B4dd4@B4dcf) (set! B4ee8@B4dcc@&i/o-decoding-rcd B4dcc@&i/o-decoding-rcd) (set! B4ee7@B4dca@&i/o-decoding-rtd B4dca@&i/o-decoding-rtd) (set! B4ee6@B4dc8@i/o-decoding-error? B4dc8@i/o-decoding-error?) (set! B4ee5@B4dc6@make-i/o-decoding-error B4dc6@make-i/o-decoding-error) (set! B4ee4@B4dc4@p? B4dc4@p?) (set! B4ee3@B4dc1@B4db9 B4dc1@B4db9) (set! B4ee2@B4dbf@B4dba B4dbf@B4dba) (set! B4ee1@B4dbd@B4db8 B4dbd@B4db8) (set! B4ee0@B4db7@&i/o-port-rcd B4db7@&i/o-port-rcd) (set! B4edf@B4db5@&i/o-port-rtd B4db5@&i/o-port-rtd) (set! B4ede@B4db3@i/o-error-port B4db3@i/o-error-port) (set! B4edd@B4db1@i/o-port-error? B4db1@i/o-port-error?) (set! B4edc@B4daf@B4d9e B4daf@B4d9e) (set! B4edb@B4dad@make-i/o-port-error B4dad@make-i/o-port-error) (set! B4eda@B4dab@p? B4dab@p?) (set! B4ed9@B4da8@B4da0 B4da8@B4da0) (set! B4ed8@B4da6@B4da1 B4da6@B4da1) (set! B4ed7@B4da4@B4d9f B4da4@B4d9f) (set! B4ed6@B4d9c@&i/o-file-does-not-exist-rcd B4d9c@&i/o-file-does-not-exist-rcd) (set! B4ed5@B4d9a@&i/o-file-does-not-exist-rtd B4d9a@&i/o-file-does-not-exist-rtd) (set! B4ed4@B4d98@i/o-file-does-not-exist-error? B4d98@i/o-file-does-not-exist-error?) (set! B4ed3@B4d96@make-i/o-file-does-not-exist-error B4d96@make-i/o-file-does-not-exist-error) (set! B4ed2@B4d94@p? B4d94@p?) (set! B4ed1@B4d91@B4d89 B4d91@B4d89) (set! B4ed0@B4d8f@B4d8a B4d8f@B4d8a) (set! B4ecf@B4d8d@B4d88 B4d8d@B4d88) (set! B4ece@B4d87@&i/o-file-already-exists-rcd B4d87@&i/o-file-already-exists-rcd) (set! B4ecd@B4d85@&i/o-file-already-exists-rtd B4d85@&i/o-file-already-exists-rtd) (set! B4ecc@B4d83@i/o-file-already-exists-error? B4d83@i/o-file-already-exists-error?) (set! B4ecb@B4d81@make-i/o-file-already-exists-error B4d81@make-i/o-file-already-exists-error) (set! B4eca@B4d7f@p? B4d7f@p?) (set! B4ec9@B4d7c@B4d74 B4d7c@B4d74) (set! B4ec8@B4d7a@B4d75 B4d7a@B4d75) (set! B4ec7@B4d78@B4d73 B4d78@B4d73) (set! B4ec6@B4d72@&i/o-file-is-read-only-rcd B4d72@&i/o-file-is-read-only-rcd) (set! B4ec5@B4d70@&i/o-file-is-read-only-rtd B4d70@&i/o-file-is-read-only-rtd) (set! B4ec4@B4d6e@i/o-file-is-read-only-error? B4d6e@i/o-file-is-read-only-error?) (set! B4ec3@B4d6c@make-i/o-file-is-read-only-error B4d6c@make-i/o-file-is-read-only-error) (set! B4ec2@B4d6a@p? B4d6a@p?) (set! B4ec1@B4d67@B4d5f B4d67@B4d5f) (set! B4ec0@B4d65@B4d60 B4d65@B4d60) (set! B4ebf@B4d63@B4d5e B4d63@B4d5e) (set! B4ebe@B4d5d@&i/o-file-protection-rcd B4d5d@&i/o-file-protection-rcd) (set! B4ebd@B4d5b@&i/o-file-protection-rtd B4d5b@&i/o-file-protection-rtd) (set! B4ebc@B4d59@i/o-file-protection-error? B4d59@i/o-file-protection-error?) (set! B4ebb@B4d57@make-i/o-file-protection-error B4d57@make-i/o-file-protection-error) (set! B4eba@B4d55@p? B4d55@p?) (set! B4eb9@B4d52@B4d4a B4d52@B4d4a) (set! B4eb8@B4d50@B4d4b B4d50@B4d4b) (set! B4eb7@B4d4e@B4d49 B4d4e@B4d49) (set! B4eb6@B4d48@&i/o-filename-rcd B4d48@&i/o-filename-rcd) (set! B4eb5@B4d46@&i/o-filename-rtd B4d46@&i/o-filename-rtd) (set! B4eb4@B4d44@i/o-error-filename B4d44@i/o-error-filename) (set! B4eb3@B4d42@i/o-filename-error? B4d42@i/o-filename-error?) (set! B4eb2@B4d40@B4d2f B4d40@B4d2f) (set! B4eb1@B4d3e@make-i/o-filename-error B4d3e@make-i/o-filename-error) (set! B4eb0@B4d3c@p? B4d3c@p?) (set! B4eaf@B4d39@B4d31 B4d39@B4d31) (set! B4eae@B4d37@B4d32 B4d37@B4d32) (set! B4ead@B4d35@B4d30 B4d35@B4d30) (set! B4eac@B4d2d@&i/o-invalid-position-rcd B4d2d@&i/o-invalid-position-rcd) (set! B4eab@B4d2b@&i/o-invalid-position-rtd B4d2b@&i/o-invalid-position-rtd) (set! B4eaa@B4d29@i/o-error-position B4d29@i/o-error-position) (set! B4ea9@B4d27@i/o-invalid-position-error? B4d27@i/o-invalid-position-error?) (set! B4ea8@B4d25@B4d14 B4d25@B4d14) (set! B4ea7@B4d23@make-i/o-invalid-position-error B4d23@make-i/o-invalid-position-error) (set! B4ea6@B4d21@p? B4d21@p?) (set! B4ea5@B4d1e@B4d16 B4d1e@B4d16) (set! B4ea4@B4d1c@B4d17 B4d1c@B4d17) (set! B4ea3@B4d1a@B4d15 B4d1a@B4d15) (set! B4ea2@B4d12@&i/o-write-rcd B4d12@&i/o-write-rcd) (set! B4ea1@B4d10@&i/o-write-rtd B4d10@&i/o-write-rtd) (set! B4ea0@B4d0e@i/o-write-error? B4d0e@i/o-write-error?) (set! B4e9f@B4d0c@make-i/o-write-error B4d0c@make-i/o-write-error) (set! B4e9e@B4d0a@p? B4d0a@p?) (set! B4e9d@B4d07@B4cff B4d07@B4cff) (set! B4e9c@B4d05@B4d00 B4d05@B4d00) (set! B4e9b@B4d03@B4cfe B4d03@B4cfe) (set! B4e9a@B4cfd@&i/o-read-rcd B4cfd@&i/o-read-rcd) (set! B4e99@B4cfb@&i/o-read-rtd B4cfb@&i/o-read-rtd) (set! B4e98@B4cf9@i/o-read-error? B4cf9@i/o-read-error?) (set! B4e97@B4cf7@make-i/o-read-error B4cf7@make-i/o-read-error) (set! B4e96@B4cf5@p? B4cf5@p?) (set! B4e95@B4cf2@B4cea B4cf2@B4cea) (set! B4e94@B4cf0@B4ceb B4cf0@B4ceb) (set! B4e93@B4cee@B4ce9 B4cee@B4ce9) (set! B4e92@B4ce8@&i/o-rcd B4ce8@&i/o-rcd) (set! B4e91@B4ce6@&i/o-rtd B4ce6@&i/o-rtd) (set! B4e90@B4ce4@i/o-error? B4ce4@i/o-error?) (set! B4e8f@B4ce2@make-i/o-error B4ce2@make-i/o-error) (set! B4e8e@B4ce0@p? B4ce0@p?) (set! B4e8d@B4cdd@B4cd5 B4cdd@B4cd5) (set! B4e8c@B4cdb@B4cd6 B4cdb@B4cd6) (set! B4e8b@B4cd9@B4cd4 B4cd9@B4cd4) (set! B4e8a@B4cd3@&undefined-rcd B4cd3@&undefined-rcd) (set! B4e89@B4cd1@&undefined-rtd B4cd1@&undefined-rtd) (set! B4e88@B4ccf@undefined-violation? B4ccf@undefined-violation?) (set! B4e87@B4ccd@make-undefined-violation B4ccd@make-undefined-violation) (set! B4e86@B4ccb@p? B4ccb@p?) (set! B4e85@B4cc8@B4cc0 B4cc8@B4cc0) (set! B4e84@B4cc6@B4cc1 B4cc6@B4cc1) (set! B4e83@B4cc4@B4cbf B4cc4@B4cbf) (set! B4e82@B4cbe@&syntax-rcd B4cbe@&syntax-rcd) (set! B4e81@B4cbc@&syntax-rtd B4cbc@&syntax-rtd) (set! B4e80@B4cba@syntax-violation-subform B4cba@syntax-violation-subform) (set! B4e7f@B4cb8@syntax-violation-form B4cb8@syntax-violation-form) (set! B4e7e@B4cb6@syntax-violation? B4cb6@syntax-violation?) (set! B4e7d@B4cb4@B4ca1 B4cb4@B4ca1) (set! B4e7c@B4cb2@B4c9f B4cb2@B4c9f) (set! B4e7b@B4cb0@make-syntax-violation B4cb0@make-syntax-violation) (set! B4e7a@B4cae@p? B4cae@p?) (set! B4e79@B4cab@B4ca3 B4cab@B4ca3) (set! B4e78@B4ca9@B4ca4 B4ca9@B4ca4) (set! B4e77@B4ca7@B4ca2 B4ca7@B4ca2) (set! B4e76@B4c9d@&lexical-rcd B4c9d@&lexical-rcd) (set! B4e75@B4c9b@&lexical-rtd B4c9b@&lexical-rtd) (set! B4e74@B4c99@lexical-violation? B4c99@lexical-violation?) (set! B4e73@B4c97@make-lexical-violation B4c97@make-lexical-violation) (set! B4e72@B4c95@p? B4c95@p?) (set! B4e71@B4c92@B4c8a B4c92@B4c8a) (set! B4e70@B4c90@B4c8b B4c90@B4c8b) (set! B4e6f@B4c8e@B4c89 B4c8e@B4c89) (set! B4e6e@B4c88@&implementation-restriction-rcd B4c88@&implementation-restriction-rcd) (set! B4e6d@B4c86@&implementation-restriction-rtd B4c86@&implementation-restriction-rtd) (set! B4e6c@B4c84@implementation-restriction-violation? B4c84@implementation-restriction-violation?) (set! B4e6b@B4c82@make-implementation-restriction-violation B4c82@make-implementation-restriction-violation) (set! B4e6a@B4c80@p? B4c80@p?) (set! B4e69@B4c7d@B4c75 B4c7d@B4c75) (set! B4e68@B4c7b@B4c76 B4c7b@B4c76) (set! B4e67@B4c79@B4c74 B4c79@B4c74) (set! B4e66@B4c73@&non-continuable-rcd B4c73@&non-continuable-rcd) (set! B4e65@B4c71@&non-continuable-rtd B4c71@&non-continuable-rtd) (set! B4e64@B4c6f@non-continuable-violation? B4c6f@non-continuable-violation?) (set! B4e63@B4c6d@make-non-continuable-violation B4c6d@make-non-continuable-violation) (set! B4e62@B4c6b@p? B4c6b@p?) (set! B4e61@B4c68@B4c60 B4c68@B4c60) (set! B4e60@B4c66@B4c61 B4c66@B4c61) (set! B4e5f@B4c64@B4c5f B4c64@B4c5f) (set! B4e5e@B4c5e@&who-rcd B4c5e@&who-rcd) (set! B4e5d@B4c5c@&who-rtd B4c5c@&who-rtd) (set! B4e5c@B4c5a@condition-who B4c5a@condition-who) (set! B4e5b@B4c58@who-condition? B4c58@who-condition?) (set! B4e5a@B4c56@B4c45 B4c56@B4c45) (set! B4e59@B4c54@make-who-condition B4c54@make-who-condition) (set! B4e58@B4c52@p? B4c52@p?) (set! B4e57@B4c4f@B4c47 B4c4f@B4c47) (set! B4e56@B4c4d@B4c48 B4c4d@B4c48) (set! B4e55@B4c4b@B4c46 B4c4b@B4c46) (set! B4e54@B4c43@&irritants-rcd B4c43@&irritants-rcd) (set! B4e53@B4c41@&irritants-rtd B4c41@&irritants-rtd) (set! B4e52@B4c3f@condition-irritants B4c3f@condition-irritants) (set! B4e51@B4c3d@irritants-condition? B4c3d@irritants-condition?) (set! B4e50@B4c3b@B4c2a B4c3b@B4c2a) (set! B4e4f@B4c39@make-irritants-condition B4c39@make-irritants-condition) (set! B4e4e@B4c37@p? B4c37@p?) (set! B4e4d@B4c34@B4c2c B4c34@B4c2c) (set! B4e4c@B4c32@B4c2d B4c32@B4c2d) (set! B4e4b@B4c30@B4c2b B4c30@B4c2b) (set! B4e4a@B4c28@&assertion-rcd B4c28@&assertion-rcd) (set! B4e49@B4c26@&assertion-rtd B4c26@&assertion-rtd) (set! B4e48@B4c24@assertion-violation? B4c24@assertion-violation?) (set! B4e47@B4c22@make-assertion-violation B4c22@make-assertion-violation) (set! B4e46@B4c20@p? B4c20@p?) (set! B4e45@B4c1d@B4c15 B4c1d@B4c15) (set! B4e44@B4c1b@B4c16 B4c1b@B4c16) (set! B4e43@B4c19@B4c14 B4c19@B4c14) (set! B4e42@B4c13@&violation-rcd B4c13@&violation-rcd) (set! B4e41@B4c11@&violation-rtd B4c11@&violation-rtd) (set! B4e40@B4c0f@violation? B4c0f@violation?) (set! B4e3f@B4c0d@make-violation B4c0d@make-violation) (set! B4e3e@B4c0b@p? B4c0b@p?) (set! B4e3d@B4c08@B4c00 B4c08@B4c00) (set! B4e3c@B4c06@B4c01 B4c06@B4c01) (set! B4e3b@B4c04@B4bff B4c04@B4bff) (set! B4e3a@B4bfe@&error-rcd B4bfe@&error-rcd) (set! B4e39@B4bfc@&error-rtd B4bfc@&error-rtd) (set! B4e38@B4bfa@error? B4bfa@error?) (set! B4e37@B4bf8@make-error B4bf8@make-error) (set! B4e36@B4bf6@p? B4bf6@p?) (set! B4e35@B4bf3@B4beb B4bf3@B4beb) (set! B4e34@B4bf1@B4bec B4bf1@B4bec) (set! B4e33@B4bef@B4bea B4bef@B4bea) (set! B4e32@B4be9@&serious-rcd B4be9@&serious-rcd) (set! B4e31@B4be7@&serious-rtd B4be7@&serious-rtd) (set! B4e30@B4be5@serious-condition? B4be5@serious-condition?) (set! B4e2f@B4be3@make-serious-condition B4be3@make-serious-condition) (set! B4e2e@B4be1@p? B4be1@p?) (set! B4e2d@B4bde@B4bd6 B4bde@B4bd6) (set! B4e2c@B4bdc@B4bd7 B4bdc@B4bd7) (set! B4e2b@B4bda@B4bd5 B4bda@B4bd5) (set! B4e2a@B4bd4@&warning-rcd B4bd4@&warning-rcd) (set! B4e29@B4bd2@&warning-rtd B4bd2@&warning-rtd) (set! B4e28@B4bd0@warning? B4bd0@warning?) (set! B4e27@B4bce@make-warning B4bce@make-warning) (set! B4e26@B4bcc@p? B4bcc@p?) (set! B4e25@B4bc9@B4bc1 B4bc9@B4bc1) (set! B4e24@B4bc7@B4bc2 B4bc7@B4bc2) (set! B4e23@B4bc5@B4bc0 B4bc5@B4bc0) (set! B4e22@B4bbf@&message-rcd B4bbf@&message-rcd) (set! B4e21@B4bbd@&message-rtd B4bbd@&message-rtd) (set! B4e20@B4bbb@condition-message B4bbb@condition-message) (set! B4e1f@B4bb9@message-condition? B4bb9@message-condition?) (set! B4e1e@B4bb7@B4ba6 B4bb7@B4ba6) (set! B4e1d@B4bb5@make-message-condition B4bb5@make-message-condition) (set! B4e1c@B4bb3@p? B4bb3@p?) (set! B4e1b@B4bb0@B4ba8 B4bb0@B4ba8) (set! B4e1a@B4bae@B4ba9 B4bae@B4ba9) (set! B4e19@B4bac@B4ba7 B4bac@B4ba7) (set! B4e18@B4b60@&condition-rcd B4b60@&condition-rcd) (set! B4e17@B4b5e@&condition-rtd B4b5e@&condition-rtd) (set! B4e16@B4b5c@make-&condition B4b5c@make-&condition) (set! B4e15@B4b5a@&condition? B4b5a@&condition?) (set! B4e14@B4b57@B4b4f B4b57@B4b4f) (set! B4e13@B4b55@B4b50 B4b55@B4b50) (set! B4e12@B4b53@B4b4e B4b53@B4b4e)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (B29f5@B29aa@current-primitive-locations (lambda (B53c4@x) ((lambda (B53c6@t) (if B53c6@t (cdr B53c6@t) '#f)) (assq B53c4@x '((&no-nans-rcd . B4f02@B4e11@&no-nans-rcd) (&no-nans-rtd . B4f01@B4e0f@&no-nans-rtd) (&no-infinities-rcd . B4efa@B4dfc@&no-infinities-rcd) (&no-infinities-rtd . B4ef9@B4dfa@&no-infinities-rtd) (&i/o-encoding-rcd . B4ef2@B4de7@&i/o-encoding-rcd) (&i/o-encoding-rtd . B4ef1@B4de5@&i/o-encoding-rtd) (&i/o-decoding-rcd . B4ee8@B4dcc@&i/o-decoding-rcd) (&i/o-decoding-rtd . B4ee7@B4dca@&i/o-decoding-rtd) (&i/o-port-rcd . B4ee0@B4db7@&i/o-port-rcd) (&i/o-port-rtd . B4edf@B4db5@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . B4ed6@B4d9c@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . B4ed5@B4d9a@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . B4ece@B4d87@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . B4ecd@B4d85@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . B4ec6@B4d72@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . B4ec5@B4d70@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . B4ebe@B4d5d@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . B4ebd@B4d5b@&i/o-file-protection-rtd) (&i/o-filename-rcd . B4eb6@B4d48@&i/o-filename-rcd) (&i/o-filename-rtd . B4eb5@B4d46@&i/o-filename-rtd) (&i/o-invalid-position-rcd . B4eac@B4d2d@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . B4eab@B4d2b@&i/o-invalid-position-rtd) (&i/o-write-rcd . B4ea2@B4d12@&i/o-write-rcd) (&i/o-write-rtd . B4ea1@B4d10@&i/o-write-rtd) (&i/o-read-rcd . B4e9a@B4cfd@&i/o-read-rcd) (&i/o-read-rtd . B4e99@B4cfb@&i/o-read-rtd) (&i/o-rcd . B4e92@B4ce8@&i/o-rcd) (&i/o-rtd . B4e91@B4ce6@&i/o-rtd) (&undefined-rcd . B4e8a@B4cd3@&undefined-rcd) (&undefined-rtd . B4e89@B4cd1@&undefined-rtd) (&syntax-rcd . B4e82@B4cbe@&syntax-rcd) (&syntax-rtd . B4e81@B4cbc@&syntax-rtd) (&lexical-rcd . B4e76@B4c9d@&lexical-rcd) (&lexical-rtd . B4e75@B4c9b@&lexical-rtd) (&implementation-restriction-rcd . B4e6e@B4c88@&implementation-restriction-rcd) (&implementation-restriction-rtd . B4e6d@B4c86@&implementation-restriction-rtd) (&non-continuable-rcd . B4e66@B4c73@&non-continuable-rcd) (&non-continuable-rtd . B4e65@B4c71@&non-continuable-rtd) (&who-rcd . B4e5e@B4c5e@&who-rcd) (&who-rtd . B4e5d@B4c5c@&who-rtd) (&irritants-rcd . B4e54@B4c43@&irritants-rcd) (&irritants-rtd . B4e53@B4c41@&irritants-rtd) (&assertion-rcd . B4e4a@B4c28@&assertion-rcd) (&assertion-rtd . B4e49@B4c26@&assertion-rtd) (&violation-rcd . B4e42@B4c13@&violation-rcd) (&violation-rtd . B4e41@B4c11@&violation-rtd) (&error-rcd . B4e3a@B4bfe@&error-rcd) (&error-rtd . B4e39@B4bfc@&error-rtd) (&serious-rcd . B4e32@B4be9@&serious-rcd) (&serious-rtd . B4e31@B4be7@&serious-rtd) (&warning-rcd . B4e2a@B4bd4@&warning-rcd) (&warning-rtd . B4e29@B4bd2@&warning-rtd) (&message-rcd . B4e22@B4bbf@&message-rcd) (&message-rtd . B4e21@B4bbd@&message-rtd) (&condition-rcd . B4e18@B4b60@&condition-rcd) (&condition-rtd . B4e17@B4b5e@&condition-rtd) (syntax-error . B4b3b@B3124@syntax-error) (syntax-dispatch . B4ad9@B3048@syntax-dispatch) (load . B5071@B4f1e@load) (interaction-environment . B4b43@B3134@interaction-environment) (library-path . B2c5c@B2a98@library-path) (make-parameter . B29a2@B2881@make-parameter) (make-variable-transformer . B4a97@B2e75@make-variable-transformer) (identifier? . B4b3e@B312a@identifier?) (generate-temporaries . B4b34@B3116@generate-temporaries) (free-identifier=? . B4b35@B3118@free-identifier=?) (syntax->datum . B4b40@B312e@syntax->datum) (datum->syntax . B4b3f@B312c@datum->syntax) (bound-identifier=? . B4b36@B311a@bound-identifier=?) (make-i/o-write-error . B4e9f@B4d0c@make-i/o-write-error) (make-i/o-read-error . B4e97@B4cf7@make-i/o-read-error) (make-i/o-port-error . B4edb@B4dad@make-i/o-port-error) (make-i/o-invalid-position-error . B4ea7@B4d23@make-i/o-invalid-position-error) (make-i/o-filename-error . B4eb1@B4d3e@make-i/o-filename-error) (make-i/o-file-protection-error . B4ebb@B4d57@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . B4ec3@B4d6c@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . B4ed3@B4d96@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . B4ecb@B4d81@make-i/o-file-already-exists-error) (make-i/o-error . B4e8f@B4ce2@make-i/o-error) (make-i/o-encoding-error . B4eed@B4ddd@make-i/o-encoding-error) (make-i/o-decoding-error . B4ee5@B4dc6@make-i/o-decoding-error) (i/o-write-error? . B4ea0@B4d0e@i/o-write-error?) (i/o-read-error? . B4e98@B4cf9@i/o-read-error?) (i/o-port-error? . B4edd@B4db1@i/o-port-error?) (i/o-invalid-position-error? . B4ea9@B4d27@i/o-invalid-position-error?) (i/o-filename-error? . B4eb3@B4d42@i/o-filename-error?) (i/o-file-protection-error? . B4ebc@B4d59@i/o-file-protection-error?) (i/o-file-is-read-only-error? . B4ec4@B4d6e@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . B4ed4@B4d98@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . B4ecc@B4d83@i/o-file-already-exists-error?) (i/o-error? . B4e90@B4ce4@i/o-error?) (i/o-error-position . B4eaa@B4d29@i/o-error-position) (i/o-error-port . B4ede@B4db3@i/o-error-port) (i/o-error-filename . B4eb4@B4d44@i/o-error-filename) (i/o-encoding-error? . B4eef@B4de1@i/o-encoding-error?) (i/o-encoding-error-char . B4ef0@B4de3@i/o-encoding-error-char) (i/o-decoding-error? . B4ee6@B4dc8@i/o-decoding-error?) (scheme-report-environment . B4b2b@B3104@scheme-report-environment) (null-environment . B4b2a@B3102@null-environment) (command-line . B506e@B4f18@command-line) (eval . B4b2d@B3108@eval) (environment . B4b29@B3100@environment) (who-condition? . B4e5b@B4c58@who-condition?) (warning? . B4e28@B4bd0@warning?) (violation? . B4e40@B4c0f@violation?) (undefined-violation? . B4e88@B4ccf@undefined-violation?) (syntax-violation? . B4e7e@B4cb6@syntax-violation?) (syntax-violation-subform . B4e80@B4cba@syntax-violation-subform) (syntax-violation-form . B4e7f@B4cb8@syntax-violation-form) (syntax-violation . B4b3d@B3128@syntax-violation) (serious-condition? . B4e30@B4be5@serious-condition?) (non-continuable-violation? . B4e64@B4c6f@non-continuable-violation?) (message-condition? . B4e1f@B4bb9@message-condition?) (make-who-condition . B4e59@B4c54@make-who-condition) (make-warning . B4e27@B4bce@make-warning) (make-violation . B4e3f@B4c0d@make-violation) (make-undefined-violation . B4e87@B4ccd@make-undefined-violation) (make-syntax-violation . B4e7b@B4cb0@make-syntax-violation) (make-serious-condition . B4e2f@B4be3@make-serious-condition) (make-non-continuable-violation . B4e63@B4c6d@make-non-continuable-violation) (make-message-condition . B4e1d@B4bb5@make-message-condition) (make-lexical-violation . B4e73@B4c97@make-lexical-violation) (make-irritants-condition . B4e4f@B4c39@make-irritants-condition) (make-implementation-restriction-violation . B4e6b@B4c82@make-implementation-restriction-violation) (make-error . B4e37@B4bf8@make-error) (make-assertion-violation . B4e47@B4c22@make-assertion-violation) (lexical-violation? . B4e74@B4c99@lexical-violation?) (irritants-condition? . B4e51@B4c3d@irritants-condition?) (implementation-restriction-violation? . B4e6c@B4c84@implementation-restriction-violation?) (error? . B4e38@B4bfa@error?) (condition-who . B4e5c@B4c5a@condition-who) (condition-message . B4e20@B4bbb@condition-message) (condition-irritants . B4e52@B4c3f@condition-irritants) (assertion-violation? . B4e48@B4c24@assertion-violation?) (no-nans-violation? . B4f00@B4e0d@no-nans-violation?) (no-infinities-violation? . B4ef8@B4df8@no-infinities-violation?) (make-no-nans-violation . B4eff@B4e0b@make-no-nans-violation) (make-no-infinities-violation . B4ef7@B4df6@make-no-infinities-violation) (assertion-error . B4b3a@B3122@assertion-error)))))) (B2c6c@B2ab8@install-library 'B53a1 '(mosh interaction) '() '() '() '() '((regexp? . B5399) (alist->eq-hash-table . B5395) (format . B5392) (string-split . B5387) (call-process . B5381) (set-current-directory! . B537d) (expand-path . B537c) (current-directory . B537b) (%spawn . B537a) (%waitpid . B5379) (simple-struct-name . B5378) (simple-struct-set! . B5377) (simple-struct-ref . B5376) (make-simple-struct . B5375) (simple-struct? . B5374) (pointer-ref-c-int64 . B5373) (pointer-ref-c-int32 . B5372) (pointer-ref-c-int16 . B5371) (pointer-ref-c-int8 . B5370) (pointer-ref-c-uint64 . B536f) (pointer-ref-c-uint32 . B536e) (pointer-ref-c-uint16 . B536d) (pointer-ref-c-uint8 . B536c) (pointer-set-c-uint64! . B536b) (pointer-set-c-uint32! . B536a) (pointer-set-c-uint16! . B5369) (pointer-set-c-uint8! . B5368) (pointer-set-c-int64! . B5367) (pointer-set-c-int32! . B5366) (pointer-set-c-int16! . B5365) (pointer-set-c-int8! . B5364) (pointer-set-c-pointer! . B5363) (pointer-set-c-double! . B5362) (pointer-set-c-float! . B5361) (pointer-set-c-long-long! . B5360) (pointer-set-c-long! . B535f) (pointer-set-c-int! . B535e) (pointer-set-c-short! . B535d) (pointer-set-c-char! . B535c) (pointer-ref-c-pointer . B535b) (pointer-ref-c-double . B535a) (pointer-ref-c-float . B5359) (pointer-ref-c-unsigned-long-long . B5358) (pointer-ref-c-signed-long-long . B5357) (pointer-ref-c-unsigned-long . B5356) (pointer-ref-c-signed-long . B5355) (pointer-ref-c-unsigned-int . B5354) (pointer-ref-c-signed-int . B5353) (pointer-ref-c-unsigned-short . B5352) (pointer-ref-c-signed-short . B5351) (pointer-ref-c-unsigned-char . B5350) (pointer-ref-c-signed-char . B534f) (pointer->integer . B534e) (integer->pointer . B534d) (pointer? . B534c) (shared-errno . B534b) (%ffi-supported? . B534a) (%ffi-pointer->string . B5349) (%ffi-call->string-or-zero . B5348) (%ffi-call->double . B5347) (%ffi-call->void* . B5346) (%ffi-call->void . B5345) (%ffi-call->char . B5344) (%ffi-call->int . B5343) (%ffi-lookup . B5342) (%ffi-open . B5341) (%fork . B5340) (%pipe . B533f) (p . B533e) (whereis . B5323) (register . B5322) (vm-join! . B5321) (vm-set-value! . B5320) (vm? . B531f) (main-vm? . B531e) (vm-eval . B531d) (vm-self . B531c) (vm-start! . B531b) (make-vm . B531a) (mutex-try-lock! . B5319) (mutex-unlock! . B5318) (mutex-lock! . B5317) (mutex? . B5316) (make-mutex . B5315) (condition-variable-notify-all! . B5314) (condition-variable-notify! . B5313) (condition-variable-wait! . B5312) (make-condition-variable . B5311) (string-upcase . B52fa) (string-titlecase . B52f9) (string-normalize-nfkd . B52f8) (string-normalize-nfkc . B52f7) (string-normalize-nfd . B52f6) (string-normalize-nfc . B52f5) (string-foldcase . B52f4) (string-downcase . B52f3) (string-ci>? . B52f2) (string-ci>=? . B52f1) (string-ci=? . B52f0) (string-ci<? . B52ef) (string-ci<=? . B52ee) (char-whitespace? . B52ed) (char-upper-case? . B52ec) (char-title-case? . B52eb) (char-numeric? . B52ea) (char-lower-case? . B52e9) (char-general-category . B52e8) (char-upcase . B52e7) (char-titlecase . B52e6) (char-foldcase . B52e5) (char-downcase . B52e4) (char-ci>? . B52e3) (char-ci>=? . B52e2) (char-ci=? . B52e1) (char-ci<? . B52e0) (char-ci<=? . B52df) (char-alphabetic? . B52de) (make-variable-transformer . B2e74) (identifier? . B3129) (generate-temporaries . B3115) (free-identifier=? . B3117) (syntax->datum . B312d) (datum->syntax . B312b) (bound-identifier=? . B3119) (record-type-descriptor? . B52dd) (record-predicate . B52dc) (record-mutator . B52db) (record-constructor . B52da) (record-accessor . B52d9) (make-record-type-descriptor . B52d8) (make-record-constructor-descriptor . B52d7) (record? . B52d6) (record-type-uid . B52d5) (record-type-sealed? . B52d4) (record-type-parent . B52d3) (record-type-opaque? . B52d2) (record-type-name . B52d1) (record-type-generative? . B52d0) (record-type-field-names . B52cf) (record-rtd . B52ce) (record-field-mutable? . B52cd) (delete-file . B52cc) (file-exists? . B52cb) (vector-sort! . B52ca) (vector-sort . B52c9) (list-sort . B52c8) (symbol-hash . B52c7) (string-ci-hash . B52c6) (string-hash . B52c5) (equal-hash . B52c4) (hashtable-equivalence-function . B52c3) (make-hashtable . B52c2) (hashtable-hash-function . B52c1) (make-eqv-hashtable . B52c0) (make-eq-hashtable . B52bf) (hashtable? . B52be) (hashtable-update! . B52bd) (hashtable-size . B52bc) (hashtable-set! . B52bb) (hashtable-ref . B52ba) (hashtable-mutable? . B52b9) (hashtable-keys . B52b8) (hashtable-entries . B52b7) (hashtable-delete! . B52b6) (hashtable-copy . B52b5) (hashtable-contains? . B52b4) (hashtable-clear! . B52b3) (call-with-output-file . B52b2) (call-with-input-file . B52b1) (write-char . B52b0) (write . B52af) (with-output-to-file . B52ae) (with-input-from-file . B52ad) (read-char . B52ac) (read . B52ab) (peek-char . B52aa) (open-output-file . B52a9) (open-input-file . B52a8) (newline . B52a7) (display . B52a6) (close-output-port . B52a5) (close-input-port . B52a4) (eof-object? . B52a3) (eof-object . B52a2) (current-error-port . B52a1) (current-output-port . B52a0) (current-input-port . B529f) (output-port? . B529e) (input-port? . B529d) (utf-8-codec . B529c) (utf-16-codec . B529b) (transcoder-error-handling-mode . B529a) (transcoder-eol-style . B5299) (transcoder-codec . B5298) (transcoded-port . B5297) (textual-port? . B5296) (string->bytevector . B5295) (standard-output-port . B5294) (standard-input-port . B5293) (standard-error-port . B5292) (set-port-position! . B5291) (put-u8 . B5290) (put-string . B528f) (put-datum . B528e) (put-char . B528d) (put-bytevector . B528c) (port? . B528b) (port-transcoder . B528a) (port-position . B5289) (port-has-set-port-position!? . B5288) (port-has-port-position? . B5287) (port-eof? . B5286) (output-port-buffer-mode . B5285) (open-string-output-port . B5284) (open-string-input-port . B5283) (open-file-output-port . B5282) (open-file-input/output-port . B5281) (open-file-input-port . B5280) (open-bytevector-output-port . B527f) (open-bytevector-input-port . B527e) (native-transcoder . B527d) (native-eol-style . B527c) (make-transcoder . B527b) (latin-1-codec . B527a) (make-i/o-write-error . B4d0b) (make-i/o-read-error . B4cf6) (make-i/o-port-error . B4dac) (make-i/o-invalid-position-error . B4d22) (make-i/o-filename-error . B4d3d) (make-i/o-file-protection-error . B4d56) (make-i/o-file-is-read-only-error . B4d6b) (make-i/o-file-does-not-exist-error . B4d95) (make-i/o-file-already-exists-error . B4d80) (make-i/o-error . B4ce1) (make-i/o-encoding-error . B4ddc) (make-i/o-decoding-error . B4dc5) (make-custom-textual-output-port . B5279) (make-custom-textual-input/output-port . B5278) (make-custom-textual-input-port . B5277) (make-custom-binary-output-port . B5276) (make-custom-binary-input/output-port . B5275) (make-custom-binary-input-port . B5274) (make-bytevector . B5273) (lookahead-u8 . B5272) (lookahead-char . B5271) (i/o-write-error? . B4d0d) (i/o-read-error? . B4cf8) (i/o-port-error? . B4db0) (i/o-invalid-position-error? . B4d26) (i/o-filename-error? . B4d41) (i/o-file-protection-error? . B4d58) (i/o-file-is-read-only-error? . B4d6d) (i/o-file-does-not-exist-error? . B4d97) (i/o-file-already-exists-error? . B4d82) (i/o-error? . B4ce3) (i/o-error-position . B4d28) (i/o-error-port . B4db2) (i/o-error-filename . B4d43) (i/o-encoding-error? . B4de0) (i/o-encoding-error-char . B4de2) (i/o-decoding-error? . B4dc7) (get-u8 . B5270) (get-string-n! . B526f) (get-string-n . B526e) (get-string-all . B526d) (get-line . B526c) (get-datum . B526b) (get-char . B526a) (get-bytevector-some . B5269) (get-bytevector-n! . B5268) (get-bytevector-n . B5267) (get-bytevector-all . B5266) (flush-output-port . B5265) (close-port . B5264) (exit . B525c) (command-line . B4f17) (string-fill! . B525b) (string-set! . B525a) (set-cdr! . B5259) (set-car! . B5258) (remove . B5257) (remv . B5256) (remp . B5255) (remq . B5254) (partition . B5253) (memv . B5252) (memq . B5251) (memp . B5250) (member . B524f) (exists . B524e) (for-all . B524d) (fold-right . B524c) (fold-left . B524b) (find . B524a) (filter . B5249) (cons* . B5248) (assv . B5247) (assq . B5246) (assp . B5245) (assoc . B5244) (call-with-string-output-port . B5243) (call-with-port . B5242) (call-with-bytevector-output-port . B5241) (bytevector->string . B5240) (buffer-mode? . B523f) (binary-port? . B523e) (with-exception-handler . B523d) (raise-continuable . B523c) (raise . B523b) (eval . B3107) (environment . B30ff) (make-enumeration . B523a) (enum-set=? . B5239) (enum-set-universe . B5238) (enum-set-union . B5237) (enum-set-subset? . B5236) (enum-set-projection . B5235) (enum-set-member? . B5234) (enum-set-intersection . B5233) (enum-set-indexer . B5232) (enum-set-difference . B5231) (enum-set-constructor . B5230) (enum-set-complement . B522f) (enum-set->list . B522e) (who-condition? . B4c57) (warning? . B4bcf) (violation? . B4c0e) (undefined-violation? . B4cce) (syntax-violation? . B4cb5) (syntax-violation-subform . B4cb9) (syntax-violation-form . B4cb7) (syntax-violation . B3127) (simple-conditions . B522d) (serious-condition? . B4be4) (non-continuable-violation? . B4c6e) (message-condition? . B4bb8) (make-who-condition . B4c53) (make-warning . B4bcd) (make-violation . B4c0c) (make-undefined-violation . B4ccc) (make-syntax-violation . B4caf) (make-serious-condition . B4be2) (make-non-continuable-violation . B4c6c) (make-message-condition . B4bb4) (make-lexical-violation . B4c96) (make-irritants-condition . B4c38) (make-implementation-restriction-violation . B4c81) (make-error . B4bf7) (make-assertion-violation . B4c21) (lexical-violation? . B4c98) (irritants-condition? . B4c3c) (implementation-restriction-violation? . B4c83) (error? . B4bf9) (condition-who . B4c59) (condition-predicate . B522c) (condition-message . B4bba) (condition-irritants . B4c3e) (condition-accessor . B522b) (condition . B522a) (assertion-violation? . B4c23) (condition? . B5229) (utf32->string . B5228) (utf16->string . B5227) (utf8->string . B5226) (uint-list->bytevector . B5225) (u8-list->bytevector . B5224) (string->utf8 . B5223) (string->utf32 . B5222) (string->utf16 . B5221) (sint-list->bytevector . B5220) (native-endianness . B521f) (bytevector? . B521e) (bytevector=? . B521d) (bytevector-uint-set! . B521c) (bytevector-uint-ref . B521b) (bytevector-u8-set! . B521a) (bytevector-u8-ref . B5219) (bytevector-u64-set! . B5218) (bytevector-u64-ref . B5217) (bytevector-u64-native-set! . B5216) (bytevector-u64-native-ref . B5215) (bytevector-u32-set! . B5214) (bytevector-u32-ref . B5213) (bytevector-u32-native-set! . B5212) (bytevector-u32-native-ref . B5211) (bytevector-u16-set! . B5210) (bytevector-u16-ref . B520f) (bytevector-u16-native-set! . B520e) (bytevector-u16-native-ref . B520d) (bytevector-sint-set! . B520c) (bytevector-sint-ref . B520b) (bytevector-s8-set! . B520a) (bytevector-s8-ref . B5209) (bytevector-s64-set! . B5208) (bytevector-s64-ref . B5207) (bytevector-s64-native-set! . B5206) (bytevector-s64-native-ref . B5205) (bytevector-s32-set! . B5204) (bytevector-s32-ref . B5203) (bytevector-s32-native-set! . B5202) (bytevector-s32-native-ref . B5201) (bytevector-s16-set! . B5200) (bytevector-s16-ref . B51ff) (bytevector-s16-native-set! . B51fe) (bytevector-s16-native-ref . B51fd) (bytevector-length . B51fc) (bytevector-ieee-single-ref . B51fb) (bytevector-ieee-single-set! . B51fa) (bytevector-ieee-single-native-set! . B51f9) (bytevector-ieee-single-native-ref . B51f8) (bytevector-ieee-double-set! . B51f7) (bytevector-ieee-double-ref . B51f6) (bytevector-ieee-double-native-set! . B51f5) (bytevector-ieee-double-native-ref . B51f4) (bytevector-fill! . B51f3) (bytevector-copy! . B51f2) (bytevector-copy . B51f1) (bytevector->uint-list . B51f0) (bytevector->u8-list . B51ef) (bytevector->sint-list . B51ee) (no-nans-violation? . B4e0c) (no-infinities-violation? . B4df7) (make-no-nans-violation . B4e0a) (make-no-infinities-violation . B4df5) (real->flonum . B51ed) (flzero? . B51ec) (fltruncate . B51eb) (fltan . B51ea) (flsqrt . B51e9) (flsin . B51e8) (flround . B51e7) (flpositive? . B51e6) (flonum? . B51e5) (flodd? . B51e4) (flnumerator . B51e3) (flnegative? . B51e2) (flnan? . B51e1) (flmod0 . B51e0) (flmod . B51df) (flmin . B51de) (flmax . B51dd) (fllog . B51dc) (flinteger? . B51db) (flinfinite? . B51da) (flfloor . B51d9) (flfinite? . B51d8) (flexpt . B51d7) (flexp . B51d6) (fleven? . B51d5) (fldiv0-and-mod0 . B51d4) (fldiv0 . B51d3) (fldiv-and-mod . B51d2) (fldiv . B51d1) (fldenominator . B51d0) (flcos . B51cf) (flceiling . B51ce) (flatan . B51cd) (flasin . B51cc) (flacos . B51cb) (flabs . B51ca) (fl>? . B51c9) (fl>=? . B51c8) (fl=? . B51c7) (fl<? . B51c6) (fl<=? . B51c5) (fl/ . B51c4) (fl- . B51c3) (fl+ . B51c2) (fl* . B51c1) (fixnum->flonum . B51c0) (fxzero? . B51bf) (fxxor . B51be) (fxrotate-bit-field . B51bd) (fxreverse-bit-field . B51bc) (fxpositive? . B51bb) (fxodd? . B51ba) (fxnot . B51b9) (fxnegative? . B51b8) (fxmod0 . B51b7) (fxmod . B51b6) (fxmin . B51b5) (fxmax . B51b4) (fxlength . B51b3) (fxior . B51b2) (fxif . B51b1) (fxfirst-bit-set . B51b0) (fxeven? . B51af) (fxdiv0-and-mod0 . B51ae) (fxdiv0 . B51ad) (fxdiv-and-mod . B51ac) (fxdiv . B51ab) (fxcopy-bit-field . B51aa) (fxcopy-bit . B51a9) (fxbit-set? . B51a8) (fxbit-field . B51a7) (fxbit-count . B51a6) (fxarithmetic-shift-right . B51a5) (fxarithmetic-shift-left . B51a4) (fxarithmetic-shift . B51a3) (fxand . B51a2) (fx>? . B51a1) (fx>=? . B51a0) (fx=? . B519f) (fx<? . B519e) (fx<=? . B519d) (fx-/carry . B519c) (fx- . B519b) (fx+/carry . B519a) (fx+ . B5199) (fx*/carry . B5198) (fx* . B5197) (greatest-fixnum . B5196) (least-fixnum . B5195) (fixnum-width . B5194) (fixnum? . B5193) (bitwise-rotate-bit-field . B5192) (bitwise-reverse-bit-field . B5191) (bitwise-length . B5190) (bitwise-if . B518f) (bitwise-first-bit-set . B518e) (bitwise-copy-bit-field . B518d) (bitwise-copy-bit . B518c) (bitwise-bit-set? . B518b) (bitwise-bit-field . B518a) (bitwise-bit-count . B5189) (bitwise-xor . B5188) (bitwise-ior . B5187) (bitwise-and . B5186) (bitwise-not . B5185) (bitwise-arithmetic-shift-right . B5184) (bitwise-arithmetic-shift-left . B5183) (bitwise-arithmetic-shift . B5182) (zero? . B5181) (vector? . B5180) (vector-set! . B517f) (vector-ref . B517e) (vector-map . B517d) (vector-length . B517c) (vector-for-each . B517b) (vector-fill! . B517a) (vector->list . B5179) (vector . B5178) (values . B5177) (truncate . B5176) (tan . B5175) (symbol? . B5174) (symbol=? . B5173) (symbol->string . B5172) (substring . B5171) (string? . B5170) (string>? . B516f) (string>=? . B516e) (string=? . B516d) (string<? . B516c) (string<=? . B516b) (string-ref . B516a) (string-length . B5169) (string-for-each . B5168) (string-copy . B5167) (string-append . B5166) (string->symbol . B5165) (string->number . B5164) (string->list . B5163) (string . B5162) (sqrt . B5161) (sin . B5160) (round . B515f) (reverse . B515e) (real? . B515d) (real-valued? . B515c) (real-part . B515b) (rationalize . B515a) (rational? . B5159) (rational-valued? . B5158) (procedure? . B5157) (positive? . B5156) (pair? . B5155) (odd? . B5154) (numerator . B5153) (number? . B5152) (number->string . B5151) (null? . B5150) (not . B514f) (negative? . B514e) (nan? . B514d) (min . B514c) (max . B514b) (map . B514a) (make-vector . B5149) (make-string . B5148) (make-rectangular . B5147) (make-polar . B5146) (magnitude . B5145) (log . B5144) (list? . B5143) (list-tail . B5142) (list-ref . B5141) (list->vector . B5140) (list->string . B513f) (list . B513e) (length . B513d) (lcm . B513c) (integer? . B513b) (integer-valued? . B513a) (integer->char . B5139) (infinite? . B5138) (inexact? . B5137) (inexact . B5136) (imag-part . B5135) (gcd . B5134) (for-each . B5133) (floor . B5132) (finite? . B5131) (expt . B5130) (exp . B512f) (exact? . B512e) (exact-integer-sqrt . B512d) (exact . B512c) (even? . B512b) (error . B512a) (eqv? . B5129) (equal? . B5128) (eq? . B5127) (dynamic-wind . B5126) (div0-and-mod0 . B5125) (mod0 . B5124) (div0 . B5123) (div-and-mod . B5122) (mod . B5121) (div . B5120) (denominator . B511f) (cos . B511e) (cons . B511d) (complex? . B511c) (char? . B511b) (char>? . B511a) (char>=? . B5119) (char=? . B5118) (char<? . B5117) (char<=? . B5116) (char->integer . B5115) (ceiling . B5114) (call-with-values . B5113) (call/cc . B5112) (call-with-current-continuation . B5111) (cddddr . B5110) (cdddar . B510f) (cddadr . B510e) (cddaar . B510d) (cdaddr . B510c) (cdadar . B510b) (cdaadr . B510a) (cdaaar . B5109) (cadddr . B5108) (caddar . B5107) (cadadr . B5106) (cadaar . B5105) (caaddr . B5104) (caadar . B5103) (caaadr . B5102) (caaaar . B5101) (cdddr . B5100) (cddar . B50ff) (cdadr . B50fe) (cdaar . B50fd) (caddr . B50fc) (cadar . B50fb) (caadr . B50fa) (caaar . B50f9) (cddr . B50f8) (cdar . B50f7) (cadr . B50f6) (caar . B50f5) (cdr . B50f4) (car . B50f3) (boolean? . B50f2) (boolean=? . B50f1) (atan . B50f0) (assertion-violation . B50ef) (asin . B50ee) (apply . B50ed) (append . B50ec) (angle . B50eb) (acos . B50ea) (abs . B50e9) (/ . B50e8) (* . B50e7) (- . B50e6) (+ . B50e5) (>= . B50e4) (> . B50e3) (= . B50e2) (<= . B50e1) (< . B50e0) (library . B50df) (&no-nans . B50de) (&no-infinities . B50dd) (&i/o-encoding . B50dc) (&i/o-decoding . B50db) (&i/o-port . B50da) (&i/o-file-does-not-exist . B50d9) (&i/o-file-already-exists . B50d8) (&i/o-file-is-read-only . B50d7) (&i/o-file-protection . B50d6) (&i/o-filename . B50d5) (&i/o-invalid-position . B50d4) (&i/o-write . B50d3) (&i/o-read . B50d2) (&i/o . B50d1) (&undefined . B50d0) (&syntax . B50cf) (&lexical . B50ce) (&implementation-restriction . B50cd) (&non-continuable . B50cc) (&who . B50cb) (&irritants . B50ca) (&assertion . B50c9) (&violation . B50c8) (&error . B50c7) (&serious . B50c6) (&warning . B50c5) (&message . B50c4) (&condition . B50c3) (define-condition-type . B50c2) (define-enumeration . B50c1) (define-record-type . B50c0) (parent-rtd . B50bf) (nongenerative . B50be) (opaque . B50bd) (sealed . B50bc) (protocol . B50bb) (parent . B50ba) (immutable . B50b9) (mutable . B50b8) (fields . B50b7) (error-handling-mode . B50b6) (file-options . B50b5) (buffer-mode . B50b4) (eol-style . B50b3) (guard . B50b2) (unsyntax-splicing . B50af) (unsyntax . B50ae) (unquote-splicing . B50ad) (unquote . B50ac) (_ . B50ab) (else . B50aa) (=> . B50a9) (... . B50a8) (assert . B50a7) (endianness . B50a6) (time . B50a4) (do . B50a3) (cond . B50a2) (let* . B50a1) (let . B50a0) (let*-values . B509f) (let-values . B509e) (identifier-syntax . B509d) (with-syntax . B509c) (quasisyntax . B509b) (quasiquote . B509a) (syntax-rules . B5099) (include . B5098) (record-constructor-descriptor . B5096) (record-type-descriptor . B5095) (case . B5094) (unless . B5092) (when . B5091) (or . B5090) (and . B508f) (if . B508e) (letrec* . B508d) (letrec . B508c) (case-lambda . B508a) (lambda . B5089) (syntax . B5088) (syntax-case . B5087) (quote . B5086) (letrec-syntax . B5084) (let-syntax . B5083) (set! . B5082) (import . B5081) (begin . B5080) (define-syntax . B507e) (define . B507d)) '() values values '#f '#f '#t '#f) (B2c6c@B2ab8@install-library 'B53a2 '(psyntax null-environment-5) '() '() '() '() '((make-promise . B525d) (unquote-splicing . B50ad) (unquote . B50ac) (_ . B50ab) (else . B50aa) (=> . B50a9) (... . B50a8) (delay . B50a5) (do . B50a3) (cond . B50a2) (let* . B50a1) (let . B50a0) (quasiquote . B509a) (syntax-rules . B5099) (case . B5094) (or . B5090) (and . B508f) (if . B508e) (letrec . B508c) (lambda . B5089) (quote . B5086) (letrec-syntax . B5084) (let-syntax . B5083) (set! . B5082) (begin . B5080) (define-syntax . B507e) (define . B507d)) '() values values '#f '#f '#t '#f) (B2c6c@B2ab8@install-library 'B53a3 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . B52f2) (string-ci>=? . B52f1) (string-ci=? . B52f0) (string-ci<? . B52ef) (string-ci<=? . B52ee) (char-whitespace? . B52ed) (char-upper-case? . B52ec) (char-numeric? . B52ea) (char-lower-case? . B52e9) (char-upcase . B52e7) (char-downcase . B52e4) (char-ci>? . B52e3) (char-ci>=? . B52e2) (char-ci=? . B52e1) (char-ci<? . B52e0) (char-ci<=? . B52df) (char-alphabetic? . B52de) (call-with-output-file . B52b2) (call-with-input-file . B52b1) (write-char . B52b0) (write . B52af) (with-output-to-file . B52ae) (with-input-from-file . B52ad) (read-char . B52ac) (read . B52ab) (peek-char . B52aa) (open-output-file . B52a9) (open-input-file . B52a8) (newline . B52a7) (display . B52a6) (close-output-port . B52a5) (close-input-port . B52a4) (eof-object . B52a2) (current-output-port . B52a0) (current-input-port . B529f) (output-port? . B529e) (input-port? . B529d) (scheme-report-environment . B3103) (quotient . B5263) (null-environment . B3101) (remainder . B5262) (modulo . B5261) (inexact->exact . B5260) (force . B525f) (exact->inexact . B525e) (make-promise . B525d) (string-fill! . B525b) (string-set! . B525a) (set-cdr! . B5259) (set-car! . B5258) (memv . B5252) (memq . B5251) (member . B524f) (assv . B5247) (assq . B5246) (assoc . B5244) (eval . B3107) (zero? . B5181) (vector? . B5180) (vector-set! . B517f) (vector-ref . B517e) (vector-length . B517c) (vector-fill! . B517a) (vector->list . B5179) (vector . B5178) (values . B5177) (truncate . B5176) (tan . B5175) (symbol? . B5174) (symbol->string . B5172) (substring . B5171) (string? . B5170) (string>? . B516f) (string>=? . B516e) (string=? . B516d) (string<? . B516c) (string<=? . B516b) (string-ref . B516a) (string-length . B5169) (string-copy . B5167) (string-append . B5166) (string->symbol . B5165) (string->number . B5164) (string->list . B5163) (string . B5162) (sqrt . B5161) (sin . B5160) (round . B515f) (reverse . B515e) (real? . B515d) (real-part . B515b) (rationalize . B515a) (rational? . B5159) (procedure? . B5157) (positive? . B5156) (pair? . B5155) (odd? . B5154) (numerator . B5153) (number? . B5152) (number->string . B5151) (not . B514f) (negative? . B514e) (min . B514c) (max . B514b) (map . B514a) (make-vector . B5149) (make-string . B5148) (make-rectangular . B5147) (make-polar . B5146) (magnitude . B5145) (log . B5144) (list? . B5143) (list-tail . B5142) (list-ref . B5141) (list->vector . B5140) (list->string . B513f) (list . B513e) (length . B513d) (lcm . B513c) (integer? . B513b) (integer->char . B5139) (inexact? . B5137) (imag-part . B5135) (gcd . B5134) (for-each . B5133) (floor . B5132) (expt . B5130) (exp . B512f) (exact? . B512e) (even? . B512b) (eqv? . B5129) (equal? . B5128) (eq? . B5127) (dynamic-wind . B5126) (denominator . B511f) (cos . B511e) (cons . B511d) (complex? . B511c) (char? . B511b) (char>? . B511a) (char>=? . B5119) (char=? . B5118) (char<? . B5117) (char<=? . B5116) (char->integer . B5115) (ceiling . B5114) (call-with-values . B5113) (call-with-current-continuation . B5111) (cddddr . B5110) (cdddar . B510f) (cddadr . B510e) (cddaar . B510d) (cdaddr . B510c) (cdadar . B510b) (cdaadr . B510a) (cdaaar . B5109) (cadddr . B5108) (caddar . B5107) (cadadr . B5106) (cadaar . B5105) (caaddr . B5104) (caadar . B5103) (caaadr . B5102) (caaaar . B5101) (cdddr . B5100) (cddar . B50ff) (cdadr . B50fe) (cdaar . B50fd) (caddr . B50fc) (cadar . B50fb) (caadr . B50fa) (caaar . B50f9) (cddr . B50f8) (cdar . B50f7) (cadr . B50f6) (caar . B50f5) (cdr . B50f4) (car . B50f3) (boolean? . B50f2) (atan . B50f0) (asin . B50ee) (apply . B50ed) (append . B50ec) (angle . B50eb) (acos . B50ea) (abs . B50e9) (/ . B50e8) (* . B50e7) (- . B50e6) (+ . B50e5) (>= . B50e4) (> . B50e3) (= . B50e2) (<= . B50e1) (< . B50e0) (unquote-splicing . B50ad) (unquote . B50ac) (else . B50aa) (=> . B50a9) (... . B50a8) (delay . B50a5) (do . B50a3) (cond . B50a2) (let* . B50a1) (let . B50a0) (quasiquote . B509a) (syntax-rules . B5099) (case . B5094) (or . B5090) (and . B508f) (if . B508e) (letrec . B508c) (lambda . B5089) (quote . B5086) (letrec-syntax . B5084) (let-syntax . B5083) (set! . B5082) (begin . B5080) (define-syntax . B507e) (define . B507d)) '() values values '#f '#f '#t '#f) (B2c6c@B2ab8@install-library 'B53a4 '(psyntax modules) '() '() '() '() '((module . B507f)) '() values values '#f '#f '#t '#f) (B2c6c@B2ab8@install-library 'B53a5 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (B2c6c@B2ab8@install-library 'B53a6 '(rnrs) '(6) '() '() '() '((regexp? . B5399) (string-upcase . B52fa) (string-titlecase . B52f9) (string-normalize-nfkd . B52f8) (string-normalize-nfkc . B52f7) (string-normalize-nfd . B52f6) (string-normalize-nfc . B52f5) (string-foldcase . B52f4) (string-downcase . B52f3) (string-ci>? . B52f2) (string-ci>=? . B52f1) (string-ci=? . B52f0) (string-ci<? . B52ef) (string-ci<=? . B52ee) (char-whitespace? . B52ed) (char-upper-case? . B52ec) (char-title-case? . B52eb) (char-numeric? . B52ea) (char-lower-case? . B52e9) (char-general-category . B52e8) (char-upcase . B52e7) (char-titlecase . B52e6) (char-foldcase . B52e5) (char-downcase . B52e4) (char-ci>? . B52e3) (char-ci>=? . B52e2) (char-ci=? . B52e1) (char-ci<? . B52e0) (char-ci<=? . B52df) (char-alphabetic? . B52de) (make-variable-transformer . B2e74) (identifier? . B3129) (generate-temporaries . B3115) (free-identifier=? . B3117) (syntax->datum . B312d) (datum->syntax . B312b) (bound-identifier=? . B3119) (record-type-descriptor? . B52dd) (record-predicate . B52dc) (record-mutator . B52db) (record-constructor . B52da) (record-accessor . B52d9) (make-record-type-descriptor . B52d8) (make-record-constructor-descriptor . B52d7) (record? . B52d6) (record-type-uid . B52d5) (record-type-sealed? . B52d4) (record-type-parent . B52d3) (record-type-opaque? . B52d2) (record-type-name . B52d1) (record-type-generative? . B52d0) (record-type-field-names . B52cf) (record-rtd . B52ce) (record-field-mutable? . B52cd) (delete-file . B52cc) (file-exists? . B52cb) (vector-sort! . B52ca) (vector-sort . B52c9) (list-sort . B52c8) (symbol-hash . B52c7) (string-ci-hash . B52c6) (string-hash . B52c5) (equal-hash . B52c4) (hashtable-equivalence-function . B52c3) (make-hashtable . B52c2) (hashtable-hash-function . B52c1) (make-eqv-hashtable . B52c0) (make-eq-hashtable . B52bf) (hashtable? . B52be) (hashtable-update! . B52bd) (hashtable-size . B52bc) (hashtable-set! . B52bb) (hashtable-ref . B52ba) (hashtable-mutable? . B52b9) (hashtable-keys . B52b8) (hashtable-entries . B52b7) (hashtable-delete! . B52b6) (hashtable-copy . B52b5) (hashtable-contains? . B52b4) (hashtable-clear! . B52b3) (call-with-output-file . B52b2) (call-with-input-file . B52b1) (write-char . B52b0) (write . B52af) (with-output-to-file . B52ae) (with-input-from-file . B52ad) (read-char . B52ac) (read . B52ab) (peek-char . B52aa) (open-output-file . B52a9) (open-input-file . B52a8) (newline . B52a7) (display . B52a6) (close-output-port . B52a5) (close-input-port . B52a4) (eof-object? . B52a3) (eof-object . B52a2) (current-error-port . B52a1) (current-output-port . B52a0) (current-input-port . B529f) (output-port? . B529e) (input-port? . B529d) (utf-8-codec . B529c) (utf-16-codec . B529b) (transcoder-error-handling-mode . B529a) (transcoder-eol-style . B5299) (transcoder-codec . B5298) (transcoded-port . B5297) (textual-port? . B5296) (string->bytevector . B5295) (standard-output-port . B5294) (standard-input-port . B5293) (standard-error-port . B5292) (set-port-position! . B5291) (put-u8 . B5290) (put-string . B528f) (put-datum . B528e) (put-char . B528d) (put-bytevector . B528c) (port? . B528b) (port-transcoder . B528a) (port-position . B5289) (port-has-set-port-position!? . B5288) (port-has-port-position? . B5287) (port-eof? . B5286) (output-port-buffer-mode . B5285) (open-string-output-port . B5284) (open-string-input-port . B5283) (open-file-output-port . B5282) (open-file-input/output-port . B5281) (open-file-input-port . B5280) (open-bytevector-output-port . B527f) (open-bytevector-input-port . B527e) (native-transcoder . B527d) (native-eol-style . B527c) (make-transcoder . B527b) (latin-1-codec . B527a) (make-i/o-write-error . B4d0b) (make-i/o-read-error . B4cf6) (make-i/o-port-error . B4dac) (make-i/o-invalid-position-error . B4d22) (make-i/o-filename-error . B4d3d) (make-i/o-file-protection-error . B4d56) (make-i/o-file-is-read-only-error . B4d6b) (make-i/o-file-does-not-exist-error . B4d95) (make-i/o-file-already-exists-error . B4d80) (make-i/o-error . B4ce1) (make-i/o-encoding-error . B4ddc) (make-i/o-decoding-error . B4dc5) (make-custom-textual-output-port . B5279) (make-custom-textual-input/output-port . B5278) (make-custom-textual-input-port . B5277) (make-custom-binary-output-port . B5276) (make-custom-binary-input/output-port . B5275) (make-custom-binary-input-port . B5274) (make-bytevector . B5273) (lookahead-u8 . B5272) (lookahead-char . B5271) (i/o-write-error? . B4d0d) (i/o-read-error? . B4cf8) (i/o-port-error? . B4db0) (i/o-invalid-position-error? . B4d26) (i/o-filename-error? . B4d41) (i/o-file-protection-error? . B4d58) (i/o-file-is-read-only-error? . B4d6d) (i/o-file-does-not-exist-error? . B4d97) (i/o-file-already-exists-error? . B4d82) (i/o-error? . B4ce3) (i/o-error-position . B4d28) (i/o-error-port . B4db2) (i/o-error-filename . B4d43) (i/o-encoding-error? . B4de0) (i/o-encoding-error-char . B4de2) (i/o-decoding-error? . B4dc7) (get-u8 . B5270) (get-string-n! . B526f) (get-string-n . B526e) (get-string-all . B526d) (get-line . B526c) (get-datum . B526b) (get-char . B526a) (get-bytevector-some . B5269) (get-bytevector-n! . B5268) (get-bytevector-n . B5267) (get-bytevector-all . B5266) (flush-output-port . B5265) (close-port . B5264) (exit . B525c) (command-line . B4f17) (remove . B5257) (remv . B5256) (remp . B5255) (remq . B5254) (partition . B5253) (memv . B5252) (memq . B5251) (memp . B5250) (member . B524f) (exists . B524e) (for-all . B524d) (fold-right . B524c) (fold-left . B524b) (find . B524a) (filter . B5249) (cons* . B5248) (assv . B5247) (assq . B5246) (assp . B5245) (assoc . B5244) (call-with-string-output-port . B5243) (call-with-port . B5242) (call-with-bytevector-output-port . B5241) (bytevector->string . B5240) (buffer-mode? . B523f) (binary-port? . B523e) (with-exception-handler . B523d) (raise-continuable . B523c) (raise . B523b) (make-enumeration . B523a) (enum-set=? . B5239) (enum-set-universe . B5238) (enum-set-union . B5237) (enum-set-subset? . B5236) (enum-set-projection . B5235) (enum-set-member? . B5234) (enum-set-intersection . B5233) (enum-set-indexer . B5232) (enum-set-difference . B5231) (enum-set-constructor . B5230) (enum-set-complement . B522f) (enum-set->list . B522e) (who-condition? . B4c57) (warning? . B4bcf) (violation? . B4c0e) (undefined-violation? . B4cce) (syntax-violation? . B4cb5) (syntax-violation-subform . B4cb9) (syntax-violation-form . B4cb7) (syntax-violation . B3127) (simple-conditions . B522d) (serious-condition? . B4be4) (non-continuable-violation? . B4c6e) (message-condition? . B4bb8) (make-who-condition . B4c53) (make-warning . B4bcd) (make-violation . B4c0c) (make-undefined-violation . B4ccc) (make-syntax-violation . B4caf) (make-serious-condition . B4be2) (make-non-continuable-violation . B4c6c) (make-message-condition . B4bb4) (make-lexical-violation . B4c96) (make-irritants-condition . B4c38) (make-implementation-restriction-violation . B4c81) (make-error . B4bf7) (make-assertion-violation . B4c21) (lexical-violation? . B4c98) (irritants-condition? . B4c3c) (implementation-restriction-violation? . B4c83) (error? . B4bf9) (condition-who . B4c59) (condition-predicate . B522c) (condition-message . B4bba) (condition-irritants . B4c3e) (condition-accessor . B522b) (condition . B522a) (assertion-violation? . B4c23) (condition? . B5229) (utf32->string . B5228) (utf16->string . B5227) (utf8->string . B5226) (uint-list->bytevector . B5225) (u8-list->bytevector . B5224) (string->utf8 . B5223) (string->utf32 . B5222) (string->utf16 . B5221) (sint-list->bytevector . B5220) (native-endianness . B521f) (bytevector? . B521e) (bytevector=? . B521d) (bytevector-uint-set! . B521c) (bytevector-uint-ref . B521b) (bytevector-u8-set! . B521a) (bytevector-u8-ref . B5219) (bytevector-u64-set! . B5218) (bytevector-u64-ref . B5217) (bytevector-u64-native-set! . B5216) (bytevector-u64-native-ref . B5215) (bytevector-u32-set! . B5214) (bytevector-u32-ref . B5213) (bytevector-u32-native-set! . B5212) (bytevector-u32-native-ref . B5211) (bytevector-u16-set! . B5210) (bytevector-u16-ref . B520f) (bytevector-u16-native-set! . B520e) (bytevector-u16-native-ref . B520d) (bytevector-sint-set! . B520c) (bytevector-sint-ref . B520b) (bytevector-s8-set! . B520a) (bytevector-s8-ref . B5209) (bytevector-s64-set! . B5208) (bytevector-s64-ref . B5207) (bytevector-s64-native-set! . B5206) (bytevector-s64-native-ref . B5205) (bytevector-s32-set! . B5204) (bytevector-s32-ref . B5203) (bytevector-s32-native-set! . B5202) (bytevector-s32-native-ref . B5201) (bytevector-s16-set! . B5200) (bytevector-s16-ref . B51ff) (bytevector-s16-native-set! . B51fe) (bytevector-s16-native-ref . B51fd) (bytevector-length . B51fc) (bytevector-ieee-single-ref . B51fb) (bytevector-ieee-single-set! . B51fa) (bytevector-ieee-single-native-set! . B51f9) (bytevector-ieee-single-native-ref . B51f8) (bytevector-ieee-double-set! . B51f7) (bytevector-ieee-double-ref . B51f6) (bytevector-ieee-double-native-set! . B51f5) (bytevector-ieee-double-native-ref . B51f4) (bytevector-fill! . B51f3) (bytevector-copy! . B51f2) (bytevector-copy . B51f1) (bytevector->uint-list . B51f0) (bytevector->u8-list . B51ef) (bytevector->sint-list . B51ee) (no-nans-violation? . B4e0c) (no-infinities-violation? . B4df7) (make-no-nans-violation . B4e0a) (make-no-infinities-violation . B4df5) (real->flonum . B51ed) (flzero? . B51ec) (fltruncate . B51eb) (fltan . B51ea) (flsqrt . B51e9) (flsin . B51e8) (flround . B51e7) (flpositive? . B51e6) (flonum? . B51e5) (flodd? . B51e4) (flnumerator . B51e3) (flnegative? . B51e2) (flnan? . B51e1) (flmod0 . B51e0) (flmod . B51df) (flmin . B51de) (flmax . B51dd) (fllog . B51dc) (flinteger? . B51db) (flinfinite? . B51da) (flfloor . B51d9) (flfinite? . B51d8) (flexpt . B51d7) (flexp . B51d6) (fleven? . B51d5) (fldiv0-and-mod0 . B51d4) (fldiv0 . B51d3) (fldiv-and-mod . B51d2) (fldiv . B51d1) (fldenominator . B51d0) (flcos . B51cf) (flceiling . B51ce) (flatan . B51cd) (flasin . B51cc) (flacos . B51cb) (flabs . B51ca) (fl>? . B51c9) (fl>=? . B51c8) (fl=? . B51c7) (fl<? . B51c6) (fl<=? . B51c5) (fl/ . B51c4) (fl- . B51c3) (fl+ . B51c2) (fl* . B51c1) (fixnum->flonum . B51c0) (fxzero? . B51bf) (fxxor . B51be) (fxrotate-bit-field . B51bd) (fxreverse-bit-field . B51bc) (fxpositive? . B51bb) (fxodd? . B51ba) (fxnot . B51b9) (fxnegative? . B51b8) (fxmod0 . B51b7) (fxmod . B51b6) (fxmin . B51b5) (fxmax . B51b4) (fxlength . B51b3) (fxior . B51b2) (fxif . B51b1) (fxfirst-bit-set . B51b0) (fxeven? . B51af) (fxdiv0-and-mod0 . B51ae) (fxdiv0 . B51ad) (fxdiv-and-mod . B51ac) (fxdiv . B51ab) (fxcopy-bit-field . B51aa) (fxcopy-bit . B51a9) (fxbit-set? . B51a8) (fxbit-field . B51a7) (fxbit-count . B51a6) (fxarithmetic-shift-right . B51a5) (fxarithmetic-shift-left . B51a4) (fxarithmetic-shift . B51a3) (fxand . B51a2) (fx>? . B51a1) (fx>=? . B51a0) (fx=? . B519f) (fx<? . B519e) (fx<=? . B519d) (fx-/carry . B519c) (fx- . B519b) (fx+/carry . B519a) (fx+ . B5199) (fx*/carry . B5198) (fx* . B5197) (greatest-fixnum . B5196) (least-fixnum . B5195) (fixnum-width . B5194) (fixnum? . B5193) (bitwise-rotate-bit-field . B5192) (bitwise-reverse-bit-field . B5191) (bitwise-length . B5190) (bitwise-if . B518f) (bitwise-first-bit-set . B518e) (bitwise-copy-bit-field . B518d) (bitwise-copy-bit . B518c) (bitwise-bit-set? . B518b) (bitwise-bit-field . B518a) (bitwise-bit-count . B5189) (bitwise-xor . B5188) (bitwise-ior . B5187) (bitwise-and . B5186) (bitwise-not . B5185) (bitwise-arithmetic-shift-right . B5184) (bitwise-arithmetic-shift-left . B5183) (bitwise-arithmetic-shift . B5182) (zero? . B5181) (vector? . B5180) (vector-set! . B517f) (vector-ref . B517e) (vector-map . B517d) (vector-length . B517c) (vector-for-each . B517b) (vector-fill! . B517a) (vector->list . B5179) (vector . B5178) (values . B5177) (truncate . B5176) (tan . B5175) (symbol? . B5174) (symbol=? . B5173) (symbol->string . B5172) (substring . B5171) (string? . B5170) (string>? . B516f) (string>=? . B516e) (string=? . B516d) (string<? . B516c) (string<=? . B516b) (string-ref . B516a) (string-length . B5169) (string-for-each . B5168) (string-copy . B5167) (string-append . B5166) (string->symbol . B5165) (string->number . B5164) (string->list . B5163) (string . B5162) (sqrt . B5161) (sin . B5160) (round . B515f) (reverse . B515e) (real? . B515d) (real-valued? . B515c) (real-part . B515b) (rationalize . B515a) (rational? . B5159) (rational-valued? . B5158) (procedure? . B5157) (positive? . B5156) (pair? . B5155) (odd? . B5154) (numerator . B5153) (number? . B5152) (number->string . B5151) (null? . B5150) (not . B514f) (negative? . B514e) (nan? . B514d) (min . B514c) (max . B514b) (map . B514a) (make-vector . B5149) (make-string . B5148) (make-rectangular . B5147) (make-polar . B5146) (magnitude . B5145) (log . B5144) (list? . B5143) (list-tail . B5142) (list-ref . B5141) (list->vector . B5140) (list->string . B513f) (list . B513e) (length . B513d) (lcm . B513c) (integer? . B513b) (integer-valued? . B513a) (integer->char . B5139) (infinite? . B5138) (inexact? . B5137) (inexact . B5136) (imag-part . B5135) (gcd . B5134) (for-each . B5133) (floor . B5132) (finite? . B5131) (expt . B5130) (exp . B512f) (exact? . B512e) (exact-integer-sqrt . B512d) (exact . B512c) (even? . B512b) (error . B512a) (eqv? . B5129) (equal? . B5128) (eq? . B5127) (dynamic-wind . B5126) (div0-and-mod0 . B5125) (mod0 . B5124) (div0 . B5123) (div-and-mod . B5122) (mod . B5121) (div . B5120) (denominator . B511f) (cos . B511e) (cons . B511d) (complex? . B511c) (char? . B511b) (char>? . B511a) (char>=? . B5119) (char=? . B5118) (char<? . B5117) (char<=? . B5116) (char->integer . B5115) (ceiling . B5114) (call-with-values . B5113) (call/cc . B5112) (call-with-current-continuation . B5111) (cddddr . B5110) (cdddar . B510f) (cddadr . B510e) (cddaar . B510d) (cdaddr . B510c) (cdadar . B510b) (cdaadr . B510a) (cdaaar . B5109) (cadddr . B5108) (caddar . B5107) (cadadr . B5106) (cadaar . B5105) (caaddr . B5104) (caadar . B5103) (caaadr . B5102) (caaaar . B5101) (cdddr . B5100) (cddar . B50ff) (cdadr . B50fe) (cdaar . B50fd) (caddr . B50fc) (cadar . B50fb) (caadr . B50fa) (caaar . B50f9) (cddr . B50f8) (cdar . B50f7) (cadr . B50f6) (caar . B50f5) (cdr . B50f4) (car . B50f3) (boolean? . B50f2) (boolean=? . B50f1) (atan . B50f0) (assertion-violation . B50ef) (asin . B50ee) (apply . B50ed) (append . B50ec) (angle . B50eb) (acos . B50ea) (abs . B50e9) (/ . B50e8) (* . B50e7) (- . B50e6) (+ . B50e5) (>= . B50e4) (> . B50e3) (= . B50e2) (<= . B50e1) (< . B50e0) (&no-nans . B50de) (&no-infinities . B50dd) (&i/o-encoding . B50dc) (&i/o-decoding . B50db) (&i/o-port . B50da) (&i/o-file-does-not-exist . B50d9) (&i/o-file-already-exists . B50d8) (&i/o-file-is-read-only . B50d7) (&i/o-file-protection . B50d6) (&i/o-filename . B50d5) (&i/o-invalid-position . B50d4) (&i/o-write . B50d3) (&i/o-read . B50d2) (&i/o . B50d1) (&undefined . B50d0) (&syntax . B50cf) (&lexical . B50ce) (&implementation-restriction . B50cd) (&non-continuable . B50cc) (&who . B50cb) (&irritants . B50ca) (&assertion . B50c9) (&violation . B50c8) (&error . B50c7) (&serious . B50c6) (&warning . B50c5) (&message . B50c4) (&condition . B50c3) (define-condition-type . B50c2) (define-enumeration . B50c1) (define-record-type . B50c0) (parent-rtd . B50bf) (nongenerative . B50be) (opaque . B50bd) (sealed . B50bc) (protocol . B50bb) (parent . B50ba) (immutable . B50b9) (mutable . B50b8) (fields . B50b7) (error-handling-mode . B50b6) (file-options . B50b5) (buffer-mode . B50b4) (eol-style . B50b3) (guard . B50b2) (unsyntax-splicing . B50af) (unsyntax . B50ae) (unquote-splicing . B50ad) (unquote . B50ac) (_ . B50ab) (else . B50aa) (=> . B50a9) (... . B50a8) (assert . B50a7) (endianness . B50a6) (do . B50a3) (cond . B50a2) (let* . B50a1) (let . B50a0) (let*-values . B509f) (let-values . B509e) (identifier-syntax . B509d) (with-syntax . B509c) (quasisyntax . B509b) (quasiquote . B509a) (syntax-rules . B5099) (record-constructor-descriptor . B5096) (record-type-descriptor . B5095) (case . B5094) (unless . B5092) (when . B5091) (or . B5090) (and . B508f) (if . B508e) (letrec* . B508d) (letrec . B508c) (case-lambda . B508a) (lambda . B5089) (syntax . B5088) (syntax-case . B5087) (quote . B5086) (letrec-syntax . B5084) (let-syntax . B5083) (set! . B5082) (begin . B5080) (define-syntax . B507e) (define . B507d)) '() values values '#f '#f '#t '#f) (B2c6c@B2ab8@install-library 'B53a7 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . B3103) (quotient . B5263) (null-environment . B3101) (remainder . B5262) (modulo . B5261) (inexact->exact . B5260) (force . B525f) (exact->inexact . B525e) (make-promise . B525d) (delay . B50a5)) '() values values '#f '#f '#t '#f) (B2c6c@B2ab8@install-library 'B53a8 '(rnrs control) '(6) '() '() '() '((do . B50a3) (unless . B5092) (when . B5091) (case-lambda . B508a)) '() values values '#f '#f '#t '#f) (B2c6c@B2ab8@install-library 'B53a9 '(rnrs eval) '(6) '() '() '() '((eval . B3107) (environment . B30ff)) '() values values '#f '#f '#t '#f) (B2c6c@B2ab8@install-library 'B53aa '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . B5259) (set-car! . B5258)) '() values values '#f '#f '#t '#f) (B2c6c@B2ab8@install-library 'B53ab '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . B525b) (string-set! . B525a)) '() values values '#f '#f '#t '#f) (B2c6c@B2ab8@install-library 'B53ac '(rnrs programs) '(6) '() '() '() '((exit . B525c) (command-line . B4f17)) '() values values '#f '#f '#t '#f) (B2c6c@B2ab8@install-library 'B53ad '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . B2e74) (identifier? . B3129) (generate-temporaries . B3115) (free-identifier=? . B3117) (syntax->datum . B312d) (datum->syntax . B312b) (bound-identifier=? . B3119) (syntax-violation . B3127) (unsyntax-splicing . B50af) (unsyntax . B50ae) (_ . B50ab) (... . B50a8) (with-syntax . B509c) (quasisyntax . B509b) (syntax . B5088) (syntax-case . B5087)) '() values values '#f '#f '#t '#f) (B2c6c@B2ab8@install-library 'B53ae '(rnrs files) '(6) '() '() '() '((delete-file . B52cc) (file-exists? . B52cb) (make-i/o-write-error . B4d0b) (make-i/o-read-error . B4cf6) (make-i/o-port-error . B4dac) (make-i/o-invalid-position-error . B4d22) (make-i/o-filename-error . B4d3d) (make-i/o-file-protection-error . B4d56) (make-i/o-file-is-read-only-error . B4d6b) (make-i/o-file-does-not-exist-error . B4d95) (make-i/o-file-already-exists-error . B4d80) (make-i/o-error . B4ce1) (i/o-write-error? . B4d0d) (i/o-read-error? . B4cf8) (i/o-port-error? . B4db0) (i/o-invalid-position-error? . B4d26) (i/o-filename-error? . B4d41) (i/o-file-protection-error? . B4d58) (i/o-file-is-read-only-error? . B4d6d) (i/o-file-does-not-exist-error? . B4d97) (i/o-file-already-exists-error? . B4d82) (i/o-error? . B4ce3) (i/o-error-position . B4d28) (i/o-error-port . B4db2) (i/o-error-filename . B4d43) (&i/o-port . B50da) (&i/o-file-does-not-exist . B50d9) (&i/o-file-already-exists . B50d8) (&i/o-file-is-read-only . B50d7) (&i/o-file-protection . B50d6) (&i/o-filename . B50d5) (&i/o-invalid-position . B50d4) (&i/o-write . B50d3) (&i/o-read . B50d2) (&i/o . B50d1)) '() values values '#f '#f '#t '#f) (B2c6c@B2ab8@install-library 'B53af '(rnrs sorting) '(6) '() '() '() '((vector-sort! . B52ca) (vector-sort . B52c9) (list-sort . B52c8)) '() values values '#f '#f '#t '#f) (B2c6c@B2ab8@install-library 'B53b0 '(rnrs base) '(6) '() '() '() '((zero? . B5181) (vector? . B5180) (vector-set! . B517f) (vector-ref . B517e) (vector-map . B517d) (vector-length . B517c) (vector-for-each . B517b) (vector-fill! . B517a) (vector->list . B5179) (vector . B5178) (values . B5177) (truncate . B5176) (tan . B5175) (symbol? . B5174) (symbol=? . B5173) (symbol->string . B5172) (substring . B5171) (string? . B5170) (string>? . B516f) (string>=? . B516e) (string=? . B516d) (string<? . B516c) (string<=? . B516b) (string-ref . B516a) (string-length . B5169) (string-for-each . B5168) (string-copy . B5167) (string-append . B5166) (string->symbol . B5165) (string->number . B5164) (string->list . B5163) (string . B5162) (sqrt . B5161) (sin . B5160) (round . B515f) (reverse . B515e) (real? . B515d) (real-valued? . B515c) (real-part . B515b) (rationalize . B515a) (rational? . B5159) (rational-valued? . B5158) (procedure? . B5157) (positive? . B5156) (pair? . B5155) (odd? . B5154) (numerator . B5153) (number? . B5152) (number->string . B5151) (null? . B5150) (not . B514f) (negative? . B514e) (nan? . B514d) (min . B514c) (max . B514b) (map . B514a) (make-vector . B5149) (make-string . B5148) (make-rectangular . B5147) (make-polar . B5146) (magnitude . B5145) (log . B5144) (list? . B5143) (list-tail . B5142) (list-ref . B5141) (list->vector . B5140) (list->string . B513f) (list . B513e) (length . B513d) (lcm . B513c) (integer? . B513b) (integer-valued? . B513a) (integer->char . B5139) (infinite? . B5138) (inexact? . B5137) (inexact . B5136) (imag-part . B5135) (gcd . B5134) (for-each . B5133) (floor . B5132) (finite? . B5131) (expt . B5130) (exp . B512f) (exact? . B512e) (exact-integer-sqrt . B512d) (exact . B512c) (even? . B512b) (error . B512a) (eqv? . B5129) (equal? . B5128) (eq? . B5127) (dynamic-wind . B5126) (div0-and-mod0 . B5125) (mod0 . B5124) (div0 . B5123) (div-and-mod . B5122) (mod . B5121) (div . B5120) (denominator . B511f) (cos . B511e) (cons . B511d) (complex? . B511c) (char? . B511b) (char>? . B511a) (char>=? . B5119) (char=? . B5118) (char<? . B5117) (char<=? . B5116) (char->integer . B5115) (ceiling . B5114) (call-with-values . B5113) (call/cc . B5112) (call-with-current-continuation . B5111) (cddddr . B5110) (cdddar . B510f) (cddadr . B510e) (cddaar . B510d) (cdaddr . B510c) (cdadar . B510b) (cdaadr . B510a) (cdaaar . B5109) (cadddr . B5108) (caddar . B5107) (cadadr . B5106) (cadaar . B5105) (caaddr . B5104) (caadar . B5103) (caaadr . B5102) (caaaar . B5101) (cdddr . B5100) (cddar . B50ff) (cdadr . B50fe) (cdaar . B50fd) (caddr . B50fc) (cadar . B50fb) (caadr . B50fa) (caaar . B50f9) (cddr . B50f8) (cdar . B50f7) (cadr . B50f6) (caar . B50f5) (cdr . B50f4) (car . B50f3) (boolean? . B50f2) (boolean=? . B50f1) (atan . B50f0) (assertion-violation . B50ef) (asin . B50ee) (apply . B50ed) (append . B50ec) (angle . B50eb) (acos . B50ea) (abs . B50e9) (/ . B50e8) (* . B50e7) (- . B50e6) (+ . B50e5) (>= . B50e4) (> . B50e3) (= . B50e2) (<= . B50e1) (< . B50e0) (unquote-splicing . B50ad) (unquote . B50ac) (_ . B50ab) (else . B50aa) (=> . B50a9) (... . B50a8) (assert . B50a7) (cond . B50a2) (let* . B50a1) (let . B50a0) (let*-values . B509f) (let-values . B509e) (identifier-syntax . B509d) (quasiquote . B509a) (syntax-rules . B5099) (case . B5094) (or . B5090) (and . B508f) (if . B508e) (letrec* . B508d) (letrec . B508c) (lambda . B5089) (quote . B5086) (letrec-syntax . B5084) (let-syntax . B5083) (set! . B5082) (begin . B5080) (define-syntax . B507e) (define . B507d)) '() values values '#f '#f '#t '#f) (B2c6c@B2ab8@install-library 'B53b1 '(rnrs lists) '(6) '() '() '() '((remove . B5257) (remv . B5256) (remp . B5255) (remq . B5254) (partition . B5253) (memv . B5252) (memq . B5251) (memp . B5250) (member . B524f) (exists . B524e) (for-all . B524d) (fold-right . B524c) (fold-left . B524b) (find . B524a) (filter . B5249) (cons* . B5248) (assv . B5247) (assq . B5246) (assp . B5245) (assoc . B5244)) '() values values '#f '#f '#t '#f) (B2c6c@B2ab8@install-library 'B53b2 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . B52b2) (call-with-input-file . B52b1) (write-char . B52b0) (write . B52af) (with-output-to-file . B52ae) (with-input-from-file . B52ad) (read-char . B52ac) (read . B52ab) (peek-char . B52aa) (open-output-file . B52a9) (open-input-file . B52a8) (newline . B52a7) (display . B52a6) (close-output-port . B52a5) (close-input-port . B52a4) (eof-object? . B52a3) (eof-object . B52a2) (current-error-port . B52a1) (current-output-port . B52a0) (current-input-port . B529f) (output-port? . B529e) (input-port? . B529d) (make-i/o-write-error . B4d0b) (make-i/o-read-error . B4cf6) (make-i/o-port-error . B4dac) (make-i/o-invalid-position-error . B4d22) (make-i/o-filename-error . B4d3d) (make-i/o-file-protection-error . B4d56) (make-i/o-file-is-read-only-error . B4d6b) (make-i/o-file-does-not-exist-error . B4d95) (make-i/o-file-already-exists-error . B4d80) (make-i/o-error . B4ce1) (i/o-write-error? . B4d0d) (i/o-read-error? . B4cf8) (i/o-port-error? . B4db0) (i/o-invalid-position-error? . B4d26) (i/o-filename-error? . B4d41) (i/o-file-protection-error? . B4d58) (i/o-file-is-read-only-error? . B4d6d) (i/o-file-does-not-exist-error? . B4d97) (i/o-file-already-exists-error? . B4d82) (i/o-error? . B4ce3) (i/o-error-position . B4d28) (i/o-error-port . B4db2) (i/o-error-filename . B4d43) (&i/o-port . B50da) (&i/o-file-does-not-exist . B50d9) (&i/o-file-already-exists . B50d8) (&i/o-file-is-read-only . B50d7) (&i/o-file-protection . B50d6) (&i/o-filename . B50d5) (&i/o-invalid-position . B50d4) (&i/o-write . B50d3) (&i/o-read . B50d2) (&i/o . B50d1)) '() values values '#f '#f '#t '#f) (B2c6c@B2ab8@install-library 'B53b3 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . B5273) (utf32->string . B5228) (utf16->string . B5227) (utf8->string . B5226) (uint-list->bytevector . B5225) (u8-list->bytevector . B5224) (string->utf8 . B5223) (string->utf32 . B5222) (string->utf16 . B5221) (sint-list->bytevector . B5220) (native-endianness . B521f) (bytevector? . B521e) (bytevector=? . B521d) (bytevector-uint-set! . B521c) (bytevector-uint-ref . B521b) (bytevector-u8-set! . B521a) (bytevector-u8-ref . B5219) (bytevector-u64-set! . B5218) (bytevector-u64-ref . B5217) (bytevector-u64-native-set! . B5216) (bytevector-u64-native-ref . B5215) (bytevector-u32-set! . B5214) (bytevector-u32-ref . B5213) (bytevector-u32-native-set! . B5212) (bytevector-u32-native-ref . B5211) (bytevector-u16-set! . B5210) (bytevector-u16-ref . B520f) (bytevector-u16-native-set! . B520e) (bytevector-u16-native-ref . B520d) (bytevector-sint-set! . B520c) (bytevector-sint-ref . B520b) (bytevector-s8-set! . B520a) (bytevector-s8-ref . B5209) (bytevector-s64-set! . B5208) (bytevector-s64-ref . B5207) (bytevector-s64-native-set! . B5206) (bytevector-s64-native-ref . B5205) (bytevector-s32-set! . B5204) (bytevector-s32-ref . B5203) (bytevector-s32-native-set! . B5202) (bytevector-s32-native-ref . B5201) (bytevector-s16-set! . B5200) (bytevector-s16-ref . B51ff) (bytevector-s16-native-set! . B51fe) (bytevector-s16-native-ref . B51fd) (bytevector-length . B51fc) (bytevector-ieee-single-ref . B51fb) (bytevector-ieee-single-set! . B51fa) (bytevector-ieee-single-native-set! . B51f9) (bytevector-ieee-single-native-ref . B51f8) (bytevector-ieee-double-set! . B51f7) (bytevector-ieee-double-ref . B51f6) (bytevector-ieee-double-native-set! . B51f5) (bytevector-ieee-double-native-ref . B51f4) (bytevector-fill! . B51f3) (bytevector-copy! . B51f2) (bytevector-copy . B51f1) (bytevector->uint-list . B51f0) (bytevector->u8-list . B51ef) (bytevector->sint-list . B51ee) (endianness . B50a6)) '() values values '#f '#f '#t '#f) (B2c6c@B2ab8@install-library 'B53b4 '(rnrs unicode) '(6) '() '() '() '((string-upcase . B52fa) (string-titlecase . B52f9) (string-normalize-nfkd . B52f8) (string-normalize-nfkc . B52f7) (string-normalize-nfd . B52f6) (string-normalize-nfc . B52f5) (string-foldcase . B52f4) (string-downcase . B52f3) (string-ci>? . B52f2) (string-ci>=? . B52f1) (string-ci=? . B52f0) (string-ci<? . B52ef) (string-ci<=? . B52ee) (char-whitespace? . B52ed) (char-upper-case? . B52ec) (char-title-case? . B52eb) (char-numeric? . B52ea) (char-lower-case? . B52e9) (char-general-category . B52e8) (char-upcase . B52e7) (char-titlecase . B52e6) (char-foldcase . B52e5) (char-downcase . B52e4) (char-ci>? . B52e3) (char-ci>=? . B52e2) (char-ci=? . B52e1) (char-ci<? . B52e0) (char-ci<=? . B52df) (char-alphabetic? . B52de)) '() values values '#f '#f '#t '#f) (B2c6c@B2ab8@install-library 'B53b5 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . B523d) (raise-continuable . B523c) (raise . B523b) (guard . B50b2) (else . B50aa) (=> . B50a9)) '() values values '#f '#f '#t '#f) (B2c6c@B2ab8@install-library 'B53b6 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . B5192) (bitwise-reverse-bit-field . B5191) (bitwise-length . B5190) (bitwise-if . B518f) (bitwise-first-bit-set . B518e) (bitwise-copy-bit-field . B518d) (bitwise-copy-bit . B518c) (bitwise-bit-set? . B518b) (bitwise-bit-field . B518a) (bitwise-bit-count . B5189) (bitwise-xor . B5188) (bitwise-ior . B5187) (bitwise-and . B5186) (bitwise-not . B5185) (bitwise-arithmetic-shift-right . B5184) (bitwise-arithmetic-shift-left . B5183) (bitwise-arithmetic-shift . B5182)) '() values values '#f '#f '#t '#f) (B2c6c@B2ab8@install-library 'B53b7 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . B51bf) (fxxor . B51be) (fxrotate-bit-field . B51bd) (fxreverse-bit-field . B51bc) (fxpositive? . B51bb) (fxodd? . B51ba) (fxnot . B51b9) (fxnegative? . B51b8) (fxmod0 . B51b7) (fxmod . B51b6) (fxmin . B51b5) (fxmax . B51b4) (fxlength . B51b3) (fxior . B51b2) (fxif . B51b1) (fxfirst-bit-set . B51b0) (fxeven? . B51af) (fxdiv0-and-mod0 . B51ae) (fxdiv0 . B51ad) (fxdiv-and-mod . B51ac) (fxdiv . B51ab) (fxcopy-bit-field . B51aa) (fxcopy-bit . B51a9) (fxbit-set? . B51a8) (fxbit-field . B51a7) (fxbit-count . B51a6) (fxarithmetic-shift-right . B51a5) (fxarithmetic-shift-left . B51a4) (fxarithmetic-shift . B51a3) (fxand . B51a2) (fx>? . B51a1) (fx>=? . B51a0) (fx=? . B519f) (fx<? . B519e) (fx<=? . B519d) (fx-/carry . B519c) (fx- . B519b) (fx+/carry . B519a) (fx+ . B5199) (fx*/carry . B5198) (fx* . B5197) (greatest-fixnum . B5196) (least-fixnum . B5195) (fixnum-width . B5194) (fixnum? . B5193)) '() values values '#f '#f '#t '#f) (B2c6c@B2ab8@install-library 'B53b8 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . B4e0c) (no-infinities-violation? . B4df7) (make-no-nans-violation . B4e0a) (make-no-infinities-violation . B4df5) (real->flonum . B51ed) (flzero? . B51ec) (fltruncate . B51eb) (fltan . B51ea) (flsqrt . B51e9) (flsin . B51e8) (flround . B51e7) (flpositive? . B51e6) (flonum? . B51e5) (flodd? . B51e4) (flnumerator . B51e3) (flnegative? . B51e2) (flnan? . B51e1) (flmod0 . B51e0) (flmod . B51df) (flmin . B51de) (flmax . B51dd) (fllog . B51dc) (flinteger? . B51db) (flinfinite? . B51da) (flfloor . B51d9) (flfinite? . B51d8) (flexpt . B51d7) (flexp . B51d6) (fleven? . B51d5) (fldiv0-and-mod0 . B51d4) (fldiv0 . B51d3) (fldiv-and-mod . B51d2) (fldiv . B51d1) (fldenominator . B51d0) (flcos . B51cf) (flceiling . B51ce) (flatan . B51cd) (flasin . B51cc) (flacos . B51cb) (flabs . B51ca) (fl>? . B51c9) (fl>=? . B51c8) (fl=? . B51c7) (fl<? . B51c6) (fl<=? . B51c5) (fl/ . B51c4) (fl- . B51c3) (fl+ . B51c2) (fl* . B51c1) (fixnum->flonum . B51c0) (&no-nans . B50de) (&no-infinities . B50dd)) '() values values '#f '#f '#t '#f) (B2c6c@B2ab8@install-library 'B53b9 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . B52c7) (string-ci-hash . B52c6) (string-hash . B52c5) (equal-hash . B52c4) (hashtable-equivalence-function . B52c3) (make-hashtable . B52c2) (hashtable-hash-function . B52c1) (make-eqv-hashtable . B52c0) (make-eq-hashtable . B52bf) (hashtable? . B52be) (hashtable-update! . B52bd) (hashtable-size . B52bc) (hashtable-set! . B52bb) (hashtable-ref . B52ba) (hashtable-mutable? . B52b9) (hashtable-keys . B52b8) (hashtable-entries . B52b7) (hashtable-delete! . B52b6) (hashtable-copy . B52b5) (hashtable-contains? . B52b4) (hashtable-clear! . B52b3)) '() values values '#f '#f '#t '#f) (B2c6c@B2ab8@install-library 'B53ba '(rnrs io ports) '(6) '() '() '() '((eof-object? . B52a3) (eof-object . B52a2) (current-error-port . B52a1) (current-output-port . B52a0) (current-input-port . B529f) (output-port? . B529e) (input-port? . B529d) (utf-8-codec . B529c) (utf-16-codec . B529b) (transcoder-error-handling-mode . B529a) (transcoder-eol-style . B5299) (transcoder-codec . B5298) (transcoded-port . B5297) (textual-port? . B5296) (string->bytevector . B5295) (standard-output-port . B5294) (standard-input-port . B5293) (standard-error-port . B5292) (set-port-position! . B5291) (put-u8 . B5290) (put-string . B528f) (put-datum . B528e) (put-char . B528d) (put-bytevector . B528c) (port? . B528b) (port-transcoder . B528a) (port-position . B5289) (port-has-set-port-position!? . B5288) (port-has-port-position? . B5287) (port-eof? . B5286) (output-port-buffer-mode . B5285) (open-string-output-port . B5284) (open-string-input-port . B5283) (open-file-output-port . B5282) (open-file-input/output-port . B5281) (open-file-input-port . B5280) (open-bytevector-output-port . B527f) (open-bytevector-input-port . B527e) (native-transcoder . B527d) (native-eol-style . B527c) (make-transcoder . B527b) (latin-1-codec . B527a) (make-i/o-write-error . B4d0b) (make-i/o-read-error . B4cf6) (make-i/o-port-error . B4dac) (make-i/o-invalid-position-error . B4d22) (make-i/o-filename-error . B4d3d) (make-i/o-file-protection-error . B4d56) (make-i/o-file-is-read-only-error . B4d6b) (make-i/o-file-does-not-exist-error . B4d95) (make-i/o-file-already-exists-error . B4d80) (make-i/o-error . B4ce1) (make-i/o-encoding-error . B4ddc) (make-i/o-decoding-error . B4dc5) (make-custom-textual-output-port . B5279) (make-custom-textual-input/output-port . B5278) (make-custom-textual-input-port . B5277) (make-custom-binary-output-port . B5276) (make-custom-binary-input/output-port . B5275) (make-custom-binary-input-port . B5274) (lookahead-u8 . B5272) (lookahead-char . B5271) (i/o-write-error? . B4d0d) (i/o-read-error? . B4cf8) (i/o-port-error? . B4db0) (i/o-invalid-position-error? . B4d26) (i/o-filename-error? . B4d41) (i/o-file-protection-error? . B4d58) (i/o-file-is-read-only-error? . B4d6d) (i/o-file-does-not-exist-error? . B4d97) (i/o-file-already-exists-error? . B4d82) (i/o-error? . B4ce3) (i/o-error-position . B4d28) (i/o-error-port . B4db2) (i/o-error-filename . B4d43) (i/o-encoding-error? . B4de0) (i/o-encoding-error-char . B4de2) (i/o-decoding-error? . B4dc7) (get-u8 . B5270) (get-string-n! . B526f) (get-string-n . B526e) (get-string-all . B526d) (get-line . B526c) (get-datum . B526b) (get-char . B526a) (get-bytevector-some . B5269) (get-bytevector-n! . B5268) (get-bytevector-n . B5267) (get-bytevector-all . B5266) (flush-output-port . B5265) (close-port . B5264) (call-with-string-output-port . B5243) (call-with-port . B5242) (call-with-bytevector-output-port . B5241) (bytevector->string . B5240) (buffer-mode? . B523f) (binary-port? . B523e) (&i/o-encoding . B50dc) (&i/o-decoding . B50db) (&i/o-port . B50da) (&i/o-file-does-not-exist . B50d9) (&i/o-file-already-exists . B50d8) (&i/o-file-is-read-only . B50d7) (&i/o-file-protection . B50d6) (&i/o-filename . B50d5) (&i/o-invalid-position . B50d4) (&i/o-write . B50d3) (&i/o-read . B50d2) (&i/o . B50d1) (error-handling-mode . B50b6) (file-options . B50b5) (buffer-mode . B50b4) (eol-style . B50b3)) '() values values '#f '#f '#t '#f) (B2c6c@B2ab8@install-library 'B53bb '(rnrs enums) '(6) '() '() '() '((make-enumeration . B523a) (enum-set=? . B5239) (enum-set-universe . B5238) (enum-set-union . B5237) (enum-set-subset? . B5236) (enum-set-projection . B5235) (enum-set-member? . B5234) (enum-set-intersection . B5233) (enum-set-indexer . B5232) (enum-set-difference . B5231) (enum-set-constructor . B5230) (enum-set-complement . B522f) (enum-set->list . B522e) (define-enumeration . B50c1)) '() values values '#f '#f '#t '#f) (B2c6c@B2ab8@install-library 'B53bc '(rnrs conditions) '(6) '() '() '() '((who-condition? . B4c57) (warning? . B4bcf) (violation? . B4c0e) (undefined-violation? . B4cce) (syntax-violation? . B4cb5) (syntax-violation-subform . B4cb9) (syntax-violation-form . B4cb7) (syntax-violation . B3127) (simple-conditions . B522d) (serious-condition? . B4be4) (non-continuable-violation? . B4c6e) (message-condition? . B4bb8) (make-who-condition . B4c53) (make-warning . B4bcd) (make-violation . B4c0c) (make-undefined-violation . B4ccc) (make-syntax-violation . B4caf) (make-serious-condition . B4be2) (make-non-continuable-violation . B4c6c) (make-message-condition . B4bb4) (make-lexical-violation . B4c96) (make-irritants-condition . B4c38) (make-implementation-restriction-violation . B4c81) (make-error . B4bf7) (make-assertion-violation . B4c21) (lexical-violation? . B4c98) (irritants-condition? . B4c3c) (implementation-restriction-violation? . B4c83) (error? . B4bf9) (condition-who . B4c59) (condition-predicate . B522c) (condition-message . B4bba) (condition-irritants . B4c3e) (condition-accessor . B522b) (condition . B522a) (assertion-violation? . B4c23) (condition? . B5229) (&undefined . B50d0) (&syntax . B50cf) (&lexical . B50ce) (&implementation-restriction . B50cd) (&non-continuable . B50cc) (&who . B50cb) (&irritants . B50ca) (&assertion . B50c9) (&violation . B50c8) (&error . B50c7) (&serious . B50c6) (&warning . B50c5) (&message . B50c4) (&condition . B50c3) (define-condition-type . B50c2)) '() values values '#f '#f '#t '#f) (B2c6c@B2ab8@install-library 'B53bd '(rnrs records inspection) '(6) '() '() '() '((record? . B52d6) (record-type-uid . B52d5) (record-type-sealed? . B52d4) (record-type-parent . B52d3) (record-type-opaque? . B52d2) (record-type-name . B52d1) (record-type-generative? . B52d0) (record-type-field-names . B52cf) (record-rtd . B52ce) (record-field-mutable? . B52cd)) '() values values '#f '#f '#t '#f) (B2c6c@B2ab8@install-library 'B53be '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . B52dd) (record-predicate . B52dc) (record-mutator . B52db) (record-constructor . B52da) (record-accessor . B52d9) (make-record-type-descriptor . B52d8) (make-record-constructor-descriptor . B52d7)) '() values values '#f '#f '#t '#f) (B2c6c@B2ab8@install-library 'B53bf '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . B50c0) (parent-rtd . B50bf) (nongenerative . B50be) (opaque . B50bd) (sealed . B50bc) (protocol . B50bb) (parent . B50ba) (immutable . B50b9) (mutable . B50b8) (fields . B50b7) (record-constructor-descriptor . B5096) (record-type-descriptor . B5095)) '() values values '#f '#f '#t '#f) (B2c6c@B2ab8@install-library 'B53c0 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . B4e10) (&no-nans-rtd . B4e0e) (&no-infinities-rcd . B4dfb) (&no-infinities-rtd . B4df9) (&i/o-encoding-rcd . B4de6) (&i/o-encoding-rtd . B4de4) (&i/o-decoding-rcd . B4dcb) (&i/o-decoding-rtd . B4dc9) (&i/o-port-rcd . B4db6) (&i/o-port-rtd . B4db4) (&i/o-file-does-not-exist-rcd . B4d9b) (&i/o-file-does-not-exist-rtd . B4d99) (&i/o-file-already-exists-rcd . B4d86) (&i/o-file-already-exists-rtd . B4d84) (&i/o-file-is-read-only-rcd . B4d71) (&i/o-file-is-read-only-rtd . B4d6f) (&i/o-file-protection-rcd . B4d5c) (&i/o-file-protection-rtd . B4d5a) (&i/o-filename-rcd . B4d47) (&i/o-filename-rtd . B4d45) (&i/o-invalid-position-rcd . B4d2c) (&i/o-invalid-position-rtd . B4d2a) (&i/o-write-rcd . B4d11) (&i/o-write-rtd . B4d0f) (&i/o-read-rcd . B4cfc) (&i/o-read-rtd . B4cfa) (&i/o-rcd . B4ce7) (&i/o-rtd . B4ce5) (&undefined-rcd . B4cd2) (&undefined-rtd . B4cd0) (&syntax-rcd . B4cbd) (&syntax-rtd . B4cbb) (&lexical-rcd . B4c9c) (&lexical-rtd . B4c9a) (&implementation-restriction-rcd . B4c87) (&implementation-restriction-rtd . B4c85) (&non-continuable-rcd . B4c72) (&non-continuable-rtd . B4c70) (&who-rcd . B4c5d) (&who-rtd . B4c5b) (&irritants-rcd . B4c42) (&irritants-rtd . B4c40) (&assertion-rcd . B4c27) (&assertion-rtd . B4c25) (&violation-rcd . B4c12) (&violation-rtd . B4c10) (&error-rcd . B4bfd) (&error-rtd . B4bfb) (&serious-rcd . B4be8) (&serious-rtd . B4be6) (&warning-rcd . B4bd3) (&warning-rtd . B4bd1) (&message-rcd . B4bbe) (&message-rtd . B4bbc) (&condition-rcd . B4b5f) (&condition-rtd . B4b5d) (syntax-error . B3123) (syntax-dispatch . B3047) (pretty-print . B53a0) (eval-core . B539f) (set-symbol-value! . B539e) (symbol-value . B539d) (gensym . B539c) (void . B539b) (load . B4f1d) (interaction-environment . B3133) (char-ready? . B539a) (regexp? . B5399) (read-line . B5398) (gensym-prefix-set! . B5397) (ungensym . B5396) (alist->eq-hash-table . B5395) (assoc-ref . B5394) (print . B5393) (format . B5392) (host-os . B5391) (library-path . B2a97) (standard-library-path . B5390) (file-newer? . B538f) (stat-mtime . B538e) (write-to-file . B538d) (file->list . B538c) (file->string . B538b) (digit->integer . B538a) (call-with-string-input-port . B5389) (call-with-string-io . B5388) (string-split . B5387) (bytevector-for-each . B5386) (string->regexp . B5385) (rxmatch . B5384) (regexp-replace-all . B5383) (hashtable-for-each . B5382) (call-process . B5381) (local-tz-offset . B5380) (microseconds . B537f) (directory-list . B537e) (set-current-directory! . B537d) (expand-path . B537c) (current-directory . B537b) (%spawn . B537a) (%waitpid . B5379) (simple-struct-name . B5378) (simple-struct-set! . B5377) (simple-struct-ref . B5376) (make-simple-struct . B5375) (simple-struct? . B5374) (pointer-ref-c-int64 . B5373) (pointer-ref-c-int32 . B5372) (pointer-ref-c-int16 . B5371) (pointer-ref-c-int8 . B5370) (pointer-ref-c-uint64 . B536f) (pointer-ref-c-uint32 . B536e) (pointer-ref-c-uint16 . B536d) (pointer-ref-c-uint8 . B536c) (pointer-set-c-uint64! . B536b) (pointer-set-c-uint32! . B536a) (pointer-set-c-uint16! . B5369) (pointer-set-c-uint8! . B5368) (pointer-set-c-int64! . B5367) (pointer-set-c-int32! . B5366) (pointer-set-c-int16! . B5365) (pointer-set-c-int8! . B5364) (pointer-set-c-pointer! . B5363) (pointer-set-c-double! . B5362) (pointer-set-c-float! . B5361) (pointer-set-c-long-long! . B5360) (pointer-set-c-long! . B535f) (pointer-set-c-int! . B535e) (pointer-set-c-short! . B535d) (pointer-set-c-char! . B535c) (pointer-ref-c-pointer . B535b) (pointer-ref-c-double . B535a) (pointer-ref-c-float . B5359) (pointer-ref-c-unsigned-long-long . B5358) (pointer-ref-c-signed-long-long . B5357) (pointer-ref-c-unsigned-long . B5356) (pointer-ref-c-signed-long . B5355) (pointer-ref-c-unsigned-int . B5354) (pointer-ref-c-signed-int . B5353) (pointer-ref-c-unsigned-short . B5352) (pointer-ref-c-signed-short . B5351) (pointer-ref-c-unsigned-char . B5350) (pointer-ref-c-signed-char . B534f) (pointer->integer . B534e) (integer->pointer . B534d) (pointer? . B534c) (shared-errno . B534b) (%ffi-supported? . B534a) (%ffi-pointer->string . B5349) (%ffi-call->string-or-zero . B5348) (%ffi-call->double . B5347) (%ffi-call->void* . B5346) (%ffi-call->void . B5345) (%ffi-call->char . B5344) (%ffi-call->int . B5343) (%ffi-lookup . B5342) (%ffi-open . B5341) (%fork . B5340) (%pipe . B533f) (p . B533e) (open-output-string . B533d) (get-output-string . B533c) (file-stat-ctime . B533b) (file-stat-atime . B533a) (file-stat-mtime . B5339) (file-size-in-bytes . B5338) (file-writable? . B5337) (file-executable? . B5336) (file-readable? . B5335) (file-regular? . B5334) (file-symbolic-link? . B5333) (file-directory? . B5332) (create-symbolic-link . B5331) (rename-file . B5330) (delete-directory . B532f) (create-directory . B532e) (create-mosh-cache-dir . B532d) (get-environment-variables . B532c) (get-environment-variable . B532b) (join-wraps . B532a) (id->real-label . B5329) (same-marks? . B5328) (same-marks*? . B5327) (get-timeofday . B5326) (get-command-line . B5325) (sys-display . B5324) (whereis . B5323) (register . B5322) (vm-join! . B5321) (vm-set-value! . B5320) (vm? . B531f) (main-vm? . B531e) (vm-eval . B531d) (vm-self . B531c) (vm-start! . B531b) (make-vm . B531a) (mutex-try-lock! . B5319) (mutex-unlock! . B5318) (mutex-lock! . B5317) (mutex? . B5316) (make-mutex . B5315) (condition-variable-notify-all! . B5314) (condition-variable-notify! . B5313) (condition-variable-wait! . B5312) (make-condition-variable . B5311) (mosh-executable-path . B5310) (make-file-options . B530f) (source-info . B530e) (make-compiler-instruction . B530d) (make-instruction . B530c) (set-source-info! . B530b) (bignum? . B530a) (fast-equal? . B5309) (fasl-read . B5308) (fasl-write . B5307) (time-usage . B5306) (os-constant . B5305) (make-parameter . B2880) (socket-port . B5304) (socket-shutdown . B5303) (socket-close . B5302) (socket-send . B5301) (socket-recv! . B5300) (socket-recv . B52ff) (make-server-socket . B52fe) (make-client-socket . B52fd) (socket-accept . B52fc) (socket? . B52fb) (string-upcase . B52fa) (string-titlecase . B52f9) (string-normalize-nfkd . B52f8) (string-normalize-nfkc . B52f7) (string-normalize-nfd . B52f6) (string-normalize-nfc . B52f5) (string-foldcase . B52f4) (string-downcase . B52f3) (string-ci>? . B52f2) (string-ci>=? . B52f1) (string-ci=? . B52f0) (string-ci<? . B52ef) (string-ci<=? . B52ee) (char-whitespace? . B52ed) (char-upper-case? . B52ec) (char-title-case? . B52eb) (char-numeric? . B52ea) (char-lower-case? . B52e9) (char-general-category . B52e8) (char-upcase . B52e7) (char-titlecase . B52e6) (char-foldcase . B52e5) (char-downcase . B52e4) (char-ci>? . B52e3) (char-ci>=? . B52e2) (char-ci=? . B52e1) (char-ci<? . B52e0) (char-ci<=? . B52df) (char-alphabetic? . B52de) (make-variable-transformer . B2e74) (identifier? . B3129) (generate-temporaries . B3115) (free-identifier=? . B3117) (syntax->datum . B312d) (datum->syntax . B312b) (bound-identifier=? . B3119) (record-type-descriptor? . B52dd) (record-predicate . B52dc) (record-mutator . B52db) (record-constructor . B52da) (record-accessor . B52d9) (make-record-type-descriptor . B52d8) (make-record-constructor-descriptor . B52d7) (record? . B52d6) (record-type-uid . B52d5) (record-type-sealed? . B52d4) (record-type-parent . B52d3) (record-type-opaque? . B52d2) (record-type-name . B52d1) (record-type-generative? . B52d0) (record-type-field-names . B52cf) (record-rtd . B52ce) (record-field-mutable? . B52cd) (delete-file . B52cc) (file-exists? . B52cb) (vector-sort! . B52ca) (vector-sort . B52c9) (list-sort . B52c8) (symbol-hash . B52c7) (string-ci-hash . B52c6) (string-hash . B52c5) (equal-hash . B52c4) (hashtable-equivalence-function . B52c3) (make-hashtable . B52c2) (hashtable-hash-function . B52c1) (make-eqv-hashtable . B52c0) (make-eq-hashtable . B52bf) (hashtable? . B52be) (hashtable-update! . B52bd) (hashtable-size . B52bc) (hashtable-set! . B52bb) (hashtable-ref . B52ba) (hashtable-mutable? . B52b9) (hashtable-keys . B52b8) (hashtable-entries . B52b7) (hashtable-delete! . B52b6) (hashtable-copy . B52b5) (hashtable-contains? . B52b4) (hashtable-clear! . B52b3) (call-with-output-file . B52b2) (call-with-input-file . B52b1) (write-char . B52b0) (write . B52af) (with-output-to-file . B52ae) (with-input-from-file . B52ad) (read-char . B52ac) (read . B52ab) (peek-char . B52aa) (open-output-file . B52a9) (open-input-file . B52a8) (newline . B52a7) (display . B52a6) (close-output-port . B52a5) (close-input-port . B52a4) (eof-object? . B52a3) (eof-object . B52a2) (current-error-port . B52a1) (current-output-port . B52a0) (current-input-port . B529f) (output-port? . B529e) (input-port? . B529d) (utf-8-codec . B529c) (utf-16-codec . B529b) (transcoder-error-handling-mode . B529a) (transcoder-eol-style . B5299) (transcoder-codec . B5298) (transcoded-port . B5297) (textual-port? . B5296) (string->bytevector . B5295) (standard-output-port . B5294) (standard-input-port . B5293) (standard-error-port . B5292) (set-port-position! . B5291) (put-u8 . B5290) (put-string . B528f) (put-datum . B528e) (put-char . B528d) (put-bytevector . B528c) (port? . B528b) (port-transcoder . B528a) (port-position . B5289) (port-has-set-port-position!? . B5288) (port-has-port-position? . B5287) (port-eof? . B5286) (output-port-buffer-mode . B5285) (open-string-output-port . B5284) (open-string-input-port . B5283) (open-file-output-port . B5282) (open-file-input/output-port . B5281) (open-file-input-port . B5280) (open-bytevector-output-port . B527f) (open-bytevector-input-port . B527e) (native-transcoder . B527d) (native-eol-style . B527c) (make-transcoder . B527b) (latin-1-codec . B527a) (make-i/o-write-error . B4d0b) (make-i/o-read-error . B4cf6) (make-i/o-port-error . B4dac) (make-i/o-invalid-position-error . B4d22) (make-i/o-filename-error . B4d3d) (make-i/o-file-protection-error . B4d56) (make-i/o-file-is-read-only-error . B4d6b) (make-i/o-file-does-not-exist-error . B4d95) (make-i/o-file-already-exists-error . B4d80) (make-i/o-error . B4ce1) (make-i/o-encoding-error . B4ddc) (make-i/o-decoding-error . B4dc5) (make-custom-textual-output-port . B5279) (make-custom-textual-input/output-port . B5278) (make-custom-textual-input-port . B5277) (make-custom-binary-output-port . B5276) (make-custom-binary-input/output-port . B5275) (make-custom-binary-input-port . B5274) (make-bytevector . B5273) (lookahead-u8 . B5272) (lookahead-char . B5271) (i/o-write-error? . B4d0d) (i/o-read-error? . B4cf8) (i/o-port-error? . B4db0) (i/o-invalid-position-error? . B4d26) (i/o-filename-error? . B4d41) (i/o-file-protection-error? . B4d58) (i/o-file-is-read-only-error? . B4d6d) (i/o-file-does-not-exist-error? . B4d97) (i/o-file-already-exists-error? . B4d82) (i/o-error? . B4ce3) (i/o-error-position . B4d28) (i/o-error-port . B4db2) (i/o-error-filename . B4d43) (i/o-encoding-error? . B4de0) (i/o-encoding-error-char . B4de2) (i/o-decoding-error? . B4dc7) (get-u8 . B5270) (get-string-n! . B526f) (get-string-n . B526e) (get-string-all . B526d) (get-line . B526c) (get-datum . B526b) (get-char . B526a) (get-bytevector-some . B5269) (get-bytevector-n! . B5268) (get-bytevector-n . B5267) (get-bytevector-all . B5266) (flush-output-port . B5265) (close-port . B5264) (scheme-report-environment . B3103) (quotient . B5263) (null-environment . B3101) (remainder . B5262) (modulo . B5261) (inexact->exact . B5260) (force . B525f) (exact->inexact . B525e) (make-promise . B525d) (exit . B525c) (command-line . B4f17) (string-fill! . B525b) (string-set! . B525a) (set-cdr! . B5259) (set-car! . B5258) (remove . B5257) (remv . B5256) (remp . B5255) (remq . B5254) (partition . B5253) (memv . B5252) (memq . B5251) (memp . B5250) (member . B524f) (exists . B524e) (for-all . B524d) (fold-right . B524c) (fold-left . B524b) (find . B524a) (filter . B5249) (cons* . B5248) (assv . B5247) (assq . B5246) (assp . B5245) (assoc . B5244) (call-with-string-output-port . B5243) (call-with-port . B5242) (call-with-bytevector-output-port . B5241) (bytevector->string . B5240) (buffer-mode? . B523f) (binary-port? . B523e) (with-exception-handler . B523d) (raise-continuable . B523c) (raise . B523b) (eval . B3107) (environment . B30ff) (make-enumeration . B523a) (enum-set=? . B5239) (enum-set-universe . B5238) (enum-set-union . B5237) (enum-set-subset? . B5236) (enum-set-projection . B5235) (enum-set-member? . B5234) (enum-set-intersection . B5233) (enum-set-indexer . B5232) (enum-set-difference . B5231) (enum-set-constructor . B5230) (enum-set-complement . B522f) (enum-set->list . B522e) (who-condition? . B4c57) (warning? . B4bcf) (violation? . B4c0e) (undefined-violation? . B4cce) (syntax-violation? . B4cb5) (syntax-violation-subform . B4cb9) (syntax-violation-form . B4cb7) (syntax-violation . B3127) (simple-conditions . B522d) (serious-condition? . B4be4) (non-continuable-violation? . B4c6e) (message-condition? . B4bb8) (make-who-condition . B4c53) (make-warning . B4bcd) (make-violation . B4c0c) (make-undefined-violation . B4ccc) (make-syntax-violation . B4caf) (make-serious-condition . B4be2) (make-non-continuable-violation . B4c6c) (make-message-condition . B4bb4) (make-lexical-violation . B4c96) (make-irritants-condition . B4c38) (make-implementation-restriction-violation . B4c81) (make-error . B4bf7) (make-assertion-violation . B4c21) (lexical-violation? . B4c98) (irritants-condition? . B4c3c) (implementation-restriction-violation? . B4c83) (error? . B4bf9) (condition-who . B4c59) (condition-predicate . B522c) (condition-message . B4bba) (condition-irritants . B4c3e) (condition-accessor . B522b) (condition . B522a) (assertion-violation? . B4c23) (condition? . B5229) (utf32->string . B5228) (utf16->string . B5227) (utf8->string . B5226) (uint-list->bytevector . B5225) (u8-list->bytevector . B5224) (string->utf8 . B5223) (string->utf32 . B5222) (string->utf16 . B5221) (sint-list->bytevector . B5220) (native-endianness . B521f) (bytevector? . B521e) (bytevector=? . B521d) (bytevector-uint-set! . B521c) (bytevector-uint-ref . B521b) (bytevector-u8-set! . B521a) (bytevector-u8-ref . B5219) (bytevector-u64-set! . B5218) (bytevector-u64-ref . B5217) (bytevector-u64-native-set! . B5216) (bytevector-u64-native-ref . B5215) (bytevector-u32-set! . B5214) (bytevector-u32-ref . B5213) (bytevector-u32-native-set! . B5212) (bytevector-u32-native-ref . B5211) (bytevector-u16-set! . B5210) (bytevector-u16-ref . B520f) (bytevector-u16-native-set! . B520e) (bytevector-u16-native-ref . B520d) (bytevector-sint-set! . B520c) (bytevector-sint-ref . B520b) (bytevector-s8-set! . B520a) (bytevector-s8-ref . B5209) (bytevector-s64-set! . B5208) (bytevector-s64-ref . B5207) (bytevector-s64-native-set! . B5206) (bytevector-s64-native-ref . B5205) (bytevector-s32-set! . B5204) (bytevector-s32-ref . B5203) (bytevector-s32-native-set! . B5202) (bytevector-s32-native-ref . B5201) (bytevector-s16-set! . B5200) (bytevector-s16-ref . B51ff) (bytevector-s16-native-set! . B51fe) (bytevector-s16-native-ref . B51fd) (bytevector-length . B51fc) (bytevector-ieee-single-ref . B51fb) (bytevector-ieee-single-set! . B51fa) (bytevector-ieee-single-native-set! . B51f9) (bytevector-ieee-single-native-ref . B51f8) (bytevector-ieee-double-set! . B51f7) (bytevector-ieee-double-ref . B51f6) (bytevector-ieee-double-native-set! . B51f5) (bytevector-ieee-double-native-ref . B51f4) (bytevector-fill! . B51f3) (bytevector-copy! . B51f2) (bytevector-copy . B51f1) (bytevector->uint-list . B51f0) (bytevector->u8-list . B51ef) (bytevector->sint-list . B51ee) (no-nans-violation? . B4e0c) (no-infinities-violation? . B4df7) (make-no-nans-violation . B4e0a) (make-no-infinities-violation . B4df5) (real->flonum . B51ed) (flzero? . B51ec) (fltruncate . B51eb) (fltan . B51ea) (flsqrt . B51e9) (flsin . B51e8) (flround . B51e7) (flpositive? . B51e6) (flonum? . B51e5) (flodd? . B51e4) (flnumerator . B51e3) (flnegative? . B51e2) (flnan? . B51e1) (flmod0 . B51e0) (flmod . B51df) (flmin . B51de) (flmax . B51dd) (fllog . B51dc) (flinteger? . B51db) (flinfinite? . B51da) (flfloor . B51d9) (flfinite? . B51d8) (flexpt . B51d7) (flexp . B51d6) (fleven? . B51d5) (fldiv0-and-mod0 . B51d4) (fldiv0 . B51d3) (fldiv-and-mod . B51d2) (fldiv . B51d1) (fldenominator . B51d0) (flcos . B51cf) (flceiling . B51ce) (flatan . B51cd) (flasin . B51cc) (flacos . B51cb) (flabs . B51ca) (fl>? . B51c9) (fl>=? . B51c8) (fl=? . B51c7) (fl<? . B51c6) (fl<=? . B51c5) (fl/ . B51c4) (fl- . B51c3) (fl+ . B51c2) (fl* . B51c1) (fixnum->flonum . B51c0) (fxzero? . B51bf) (fxxor . B51be) (fxrotate-bit-field . B51bd) (fxreverse-bit-field . B51bc) (fxpositive? . B51bb) (fxodd? . B51ba) (fxnot . B51b9) (fxnegative? . B51b8) (fxmod0 . B51b7) (fxmod . B51b6) (fxmin . B51b5) (fxmax . B51b4) (fxlength . B51b3) (fxior . B51b2) (fxif . B51b1) (fxfirst-bit-set . B51b0) (fxeven? . B51af) (fxdiv0-and-mod0 . B51ae) (fxdiv0 . B51ad) (fxdiv-and-mod . B51ac) (fxdiv . B51ab) (fxcopy-bit-field . B51aa) (fxcopy-bit . B51a9) (fxbit-set? . B51a8) (fxbit-field . B51a7) (fxbit-count . B51a6) (fxarithmetic-shift-right . B51a5) (fxarithmetic-shift-left . B51a4) (fxarithmetic-shift . B51a3) (fxand . B51a2) (fx>? . B51a1) (fx>=? . B51a0) (fx=? . B519f) (fx<? . B519e) (fx<=? . B519d) (fx-/carry . B519c) (fx- . B519b) (fx+/carry . B519a) (fx+ . B5199) (fx*/carry . B5198) (fx* . B5197) (greatest-fixnum . B5196) (least-fixnum . B5195) (fixnum-width . B5194) (fixnum? . B5193) (bitwise-rotate-bit-field . B5192) (bitwise-reverse-bit-field . B5191) (bitwise-length . B5190) (bitwise-if . B518f) (bitwise-first-bit-set . B518e) (bitwise-copy-bit-field . B518d) (bitwise-copy-bit . B518c) (bitwise-bit-set? . B518b) (bitwise-bit-field . B518a) (bitwise-bit-count . B5189) (bitwise-xor . B5188) (bitwise-ior . B5187) (bitwise-and . B5186) (bitwise-not . B5185) (bitwise-arithmetic-shift-right . B5184) (bitwise-arithmetic-shift-left . B5183) (bitwise-arithmetic-shift . B5182) (zero? . B5181) (vector? . B5180) (vector-set! . B517f) (vector-ref . B517e) (vector-map . B517d) (vector-length . B517c) (vector-for-each . B517b) (vector-fill! . B517a) (vector->list . B5179) (vector . B5178) (values . B5177) (truncate . B5176) (tan . B5175) (symbol? . B5174) (symbol=? . B5173) (symbol->string . B5172) (substring . B5171) (string? . B5170) (string>? . B516f) (string>=? . B516e) (string=? . B516d) (string<? . B516c) (string<=? . B516b) (string-ref . B516a) (string-length . B5169) (string-for-each . B5168) (string-copy . B5167) (string-append . B5166) (string->symbol . B5165) (string->number . B5164) (string->list . B5163) (string . B5162) (sqrt . B5161) (sin . B5160) (round . B515f) (reverse . B515e) (real? . B515d) (real-valued? . B515c) (real-part . B515b) (rationalize . B515a) (rational? . B5159) (rational-valued? . B5158) (procedure? . B5157) (positive? . B5156) (pair? . B5155) (odd? . B5154) (numerator . B5153) (number? . B5152) (number->string . B5151) (null? . B5150) (not . B514f) (negative? . B514e) (nan? . B514d) (min . B514c) (max . B514b) (map . B514a) (make-vector . B5149) (make-string . B5148) (make-rectangular . B5147) (make-polar . B5146) (magnitude . B5145) (log . B5144) (list? . B5143) (list-tail . B5142) (list-ref . B5141) (list->vector . B5140) (list->string . B513f) (list . B513e) (length . B513d) (lcm . B513c) (integer? . B513b) (integer-valued? . B513a) (integer->char . B5139) (infinite? . B5138) (inexact? . B5137) (inexact . B5136) (imag-part . B5135) (gcd . B5134) (for-each . B5133) (floor . B5132) (finite? . B5131) (expt . B5130) (exp . B512f) (exact? . B512e) (exact-integer-sqrt . B512d) (exact . B512c) (even? . B512b) (error . B512a) (eqv? . B5129) (equal? . B5128) (eq? . B5127) (dynamic-wind . B5126) (div0-and-mod0 . B5125) (mod0 . B5124) (div0 . B5123) (div-and-mod . B5122) (mod . B5121) (div . B5120) (denominator . B511f) (cos . B511e) (cons . B511d) (complex? . B511c) (char? . B511b) (char>? . B511a) (char>=? . B5119) (char=? . B5118) (char<? . B5117) (char<=? . B5116) (char->integer . B5115) (ceiling . B5114) (call-with-values . B5113) (call/cc . B5112) (call-with-current-continuation . B5111) (cddddr . B5110) (cdddar . B510f) (cddadr . B510e) (cddaar . B510d) (cdaddr . B510c) (cdadar . B510b) (cdaadr . B510a) (cdaaar . B5109) (cadddr . B5108) (caddar . B5107) (cadadr . B5106) (cadaar . B5105) (caaddr . B5104) (caadar . B5103) (caaadr . B5102) (caaaar . B5101) (cdddr . B5100) (cddar . B50ff) (cdadr . B50fe) (cdaar . B50fd) (caddr . B50fc) (cadar . B50fb) (caadr . B50fa) (caaar . B50f9) (cddr . B50f8) (cdar . B50f7) (cadr . B50f6) (caar . B50f5) (cdr . B50f4) (car . B50f3) (boolean? . B50f2) (boolean=? . B50f1) (atan . B50f0) (assertion-violation . B50ef) (assertion-error . B3121) (asin . B50ee) (apply . B50ed) (append . B50ec) (angle . B50eb) (acos . B50ea) (abs . B50e9) (/ . B50e8) (* . B50e7) (- . B50e6) (+ . B50e5) (>= . B50e4) (> . B50e3) (= . B50e2) (<= . B50e1) (< . B50e0) (library . B50df) (&no-nans . B50de) (&no-infinities . B50dd) (&i/o-encoding . B50dc) (&i/o-decoding . B50db) (&i/o-port . B50da) (&i/o-file-does-not-exist . B50d9) (&i/o-file-already-exists . B50d8) (&i/o-file-is-read-only . B50d7) (&i/o-file-protection . B50d6) (&i/o-filename . B50d5) (&i/o-invalid-position . B50d4) (&i/o-write . B50d3) (&i/o-read . B50d2) (&i/o . B50d1) (&undefined . B50d0) (&syntax . B50cf) (&lexical . B50ce) (&implementation-restriction . B50cd) (&non-continuable . B50cc) (&who . B50cb) (&irritants . B50ca) (&assertion . B50c9) (&violation . B50c8) (&error . B50c7) (&serious . B50c6) (&warning . B50c5) (&message . B50c4) (&condition . B50c3) (define-condition-type . B50c2) (define-enumeration . B50c1) (define-record-type . B50c0) (parent-rtd . B50bf) (nongenerative . B50be) (opaque . B50bd) (sealed . B50bc) (protocol . B50bb) (parent . B50ba) (immutable . B50b9) (mutable . B50b8) (fields . B50b7) (error-handling-mode . B50b6) (file-options . B50b5) (buffer-mode . B50b4) (eol-style . B50b3) (guard . B50b2) (trace-define . B50b1) (trace-lambda . B50b0) (unsyntax-splicing . B50af) (unsyntax . B50ae) (unquote-splicing . B50ad) (unquote . B50ac) (_ . B50ab) (else . B50aa) (=> . B50a9) (... . B50a8) (assert . B50a7) (endianness . B50a6) (delay . B50a5) (time . B50a4) (do . B50a3) (cond . B50a2) (let* . B50a1) (let . B50a0) (let*-values . B509f) (let-values . B509e) (identifier-syntax . B509d) (with-syntax . B509c) (quasisyntax . B509b) (quasiquote . B509a) (syntax-rules . B5099) (include . B5098) (define-struct . B5097) (record-constructor-descriptor . B5096) (record-type-descriptor . B5095) (case . B5094) (parameterize . B5093) (unless . B5092) (when . B5091) (or . B5090) (and . B508f) (if . B508e) (letrec* . B508d) (letrec . B508c) (type-descriptor . B508b) (case-lambda . B508a) (lambda . B5089) (syntax . B5088) (syntax-case . B5087) (quote . B5086) (foreign-call . B5085) (letrec-syntax . B5084) (let-syntax . B5083) (set! . B5082) (import . B5081) (begin . B5080) (module . B507f) (define-syntax . B507e) (define . B507d)) '((B4e10 core-prim . &no-nans-rcd) (B4e0e core-prim . &no-nans-rtd) (B4dfb core-prim . &no-infinities-rcd) (B4df9 core-prim . &no-infinities-rtd) (B4de6 core-prim . &i/o-encoding-rcd) (B4de4 core-prim . &i/o-encoding-rtd) (B4dcb core-prim . &i/o-decoding-rcd) (B4dc9 core-prim . &i/o-decoding-rtd) (B4db6 core-prim . &i/o-port-rcd) (B4db4 core-prim . &i/o-port-rtd) (B4d9b core-prim . &i/o-file-does-not-exist-rcd) (B4d99 core-prim . &i/o-file-does-not-exist-rtd) (B4d86 core-prim . &i/o-file-already-exists-rcd) (B4d84 core-prim . &i/o-file-already-exists-rtd) (B4d71 core-prim . &i/o-file-is-read-only-rcd) (B4d6f core-prim . &i/o-file-is-read-only-rtd) (B4d5c core-prim . &i/o-file-protection-rcd) (B4d5a core-prim . &i/o-file-protection-rtd) (B4d47 core-prim . &i/o-filename-rcd) (B4d45 core-prim . &i/o-filename-rtd) (B4d2c core-prim . &i/o-invalid-position-rcd) (B4d2a core-prim . &i/o-invalid-position-rtd) (B4d11 core-prim . &i/o-write-rcd) (B4d0f core-prim . &i/o-write-rtd) (B4cfc core-prim . &i/o-read-rcd) (B4cfa core-prim . &i/o-read-rtd) (B4ce7 core-prim . &i/o-rcd) (B4ce5 core-prim . &i/o-rtd) (B4cd2 core-prim . &undefined-rcd) (B4cd0 core-prim . &undefined-rtd) (B4cbd core-prim . &syntax-rcd) (B4cbb core-prim . &syntax-rtd) (B4c9c core-prim . &lexical-rcd) (B4c9a core-prim . &lexical-rtd) (B4c87 core-prim . &implementation-restriction-rcd) (B4c85 core-prim . &implementation-restriction-rtd) (B4c72 core-prim . &non-continuable-rcd) (B4c70 core-prim . &non-continuable-rtd) (B4c5d core-prim . &who-rcd) (B4c5b core-prim . &who-rtd) (B4c42 core-prim . &irritants-rcd) (B4c40 core-prim . &irritants-rtd) (B4c27 core-prim . &assertion-rcd) (B4c25 core-prim . &assertion-rtd) (B4c12 core-prim . &violation-rcd) (B4c10 core-prim . &violation-rtd) (B4bfd core-prim . &error-rcd) (B4bfb core-prim . &error-rtd) (B4be8 core-prim . &serious-rcd) (B4be6 core-prim . &serious-rtd) (B4bd3 core-prim . &warning-rcd) (B4bd1 core-prim . &warning-rtd) (B4bbe core-prim . &message-rcd) (B4bbc core-prim . &message-rtd) (B4b5f core-prim . &condition-rcd) (B4b5d core-prim . &condition-rtd) (B3123 core-prim . syntax-error) (B3047 core-prim . syntax-dispatch) (B53a0 core-prim . pretty-print) (B539f core-prim . eval-core) (B539e core-prim . set-symbol-value!) (B539d core-prim . symbol-value) (B539c core-prim . gensym) (B539b core-prim . void) (B4f1d core-prim . load) (B3133 core-prim . interaction-environment) (B539a core-prim . char-ready?) (B5399 core-prim . regexp?) (B5398 core-prim . read-line) (B5397 core-prim . gensym-prefix-set!) (B5396 core-prim . ungensym) (B5395 core-prim . alist->eq-hash-table) (B5394 core-prim . assoc-ref) (B5393 core-prim . print) (B5392 core-prim . format) (B5391 core-prim . host-os) (B2a97 core-prim . library-path) (B5390 core-prim . standard-library-path) (B538f core-prim . file-newer?) (B538e core-prim . stat-mtime) (B538d core-prim . write-to-file) (B538c core-prim . file->list) (B538b core-prim . file->string) (B538a core-prim . digit->integer) (B5389 core-prim . call-with-string-input-port) (B5388 core-prim . call-with-string-io) (B5387 core-prim . string-split) (B5386 core-prim . bytevector-for-each) (B5385 core-prim . string->regexp) (B5384 core-prim . rxmatch) (B5383 core-prim . regexp-replace-all) (B5382 core-prim . hashtable-for-each) (B5381 core-prim . call-process) (B5380 core-prim . local-tz-offset) (B537f core-prim . microseconds) (B537e core-prim . directory-list) (B537d core-prim . set-current-directory!) (B537c core-prim . expand-path) (B537b core-prim . current-directory) (B537a core-prim . %spawn) (B5379 core-prim . %waitpid) (B5378 core-prim . simple-struct-name) (B5377 core-prim . simple-struct-set!) (B5376 core-prim . simple-struct-ref) (B5375 core-prim . make-simple-struct) (B5374 core-prim . simple-struct?) (B5373 core-prim . pointer-ref-c-int64) (B5372 core-prim . pointer-ref-c-int32) (B5371 core-prim . pointer-ref-c-int16) (B5370 core-prim . pointer-ref-c-int8) (B536f core-prim . pointer-ref-c-uint64) (B536e core-prim . pointer-ref-c-uint32) (B536d core-prim . pointer-ref-c-uint16) (B536c core-prim . pointer-ref-c-uint8) (B536b core-prim . pointer-set-c-uint64!) (B536a core-prim . pointer-set-c-uint32!) (B5369 core-prim . pointer-set-c-uint16!) (B5368 core-prim . pointer-set-c-uint8!) (B5367 core-prim . pointer-set-c-int64!) (B5366 core-prim . pointer-set-c-int32!) (B5365 core-prim . pointer-set-c-int16!) (B5364 core-prim . pointer-set-c-int8!) (B5363 core-prim . pointer-set-c-pointer!) (B5362 core-prim . pointer-set-c-double!) (B5361 core-prim . pointer-set-c-float!) (B5360 core-prim . pointer-set-c-long-long!) (B535f core-prim . pointer-set-c-long!) (B535e core-prim . pointer-set-c-int!) (B535d core-prim . pointer-set-c-short!) (B535c core-prim . pointer-set-c-char!) (B535b core-prim . pointer-ref-c-pointer) (B535a core-prim . pointer-ref-c-double) (B5359 core-prim . pointer-ref-c-float) (B5358 core-prim . pointer-ref-c-unsigned-long-long) (B5357 core-prim . pointer-ref-c-signed-long-long) (B5356 core-prim . pointer-ref-c-unsigned-long) (B5355 core-prim . pointer-ref-c-signed-long) (B5354 core-prim . pointer-ref-c-unsigned-int) (B5353 core-prim . pointer-ref-c-signed-int) (B5352 core-prim . pointer-ref-c-unsigned-short) (B5351 core-prim . pointer-ref-c-signed-short) (B5350 core-prim . pointer-ref-c-unsigned-char) (B534f core-prim . pointer-ref-c-signed-char) (B534e core-prim . pointer->integer) (B534d core-prim . integer->pointer) (B534c core-prim . pointer?) (B534b core-prim . shared-errno) (B534a core-prim . %ffi-supported?) (B5349 core-prim . %ffi-pointer->string) (B5348 core-prim . %ffi-call->string-or-zero) (B5347 core-prim . %ffi-call->double) (B5346 core-prim . %ffi-call->void*) (B5345 core-prim . %ffi-call->void) (B5344 core-prim . %ffi-call->char) (B5343 core-prim . %ffi-call->int) (B5342 core-prim . %ffi-lookup) (B5341 core-prim . %ffi-open) (B5340 core-prim . %fork) (B533f core-prim . %pipe) (B533e core-prim . p) (B533d core-prim . open-output-string) (B533c core-prim . get-output-string) (B533b core-prim . file-stat-ctime) (B533a core-prim . file-stat-atime) (B5339 core-prim . file-stat-mtime) (B5338 core-prim . file-size-in-bytes) (B5337 core-prim . file-writable?) (B5336 core-prim . file-executable?) (B5335 core-prim . file-readable?) (B5334 core-prim . file-regular?) (B5333 core-prim . file-symbolic-link?) (B5332 core-prim . file-directory?) (B5331 core-prim . create-symbolic-link) (B5330 core-prim . rename-file) (B532f core-prim . delete-directory) (B532e core-prim . create-directory) (B532d core-prim . create-mosh-cache-dir) (B532c core-prim . get-environment-variables) (B532b core-prim . get-environment-variable) (B532a core-prim . join-wraps) (B5329 core-prim . id->real-label) (B5328 core-prim . same-marks?) (B5327 core-prim . same-marks*?) (B5326 core-prim . get-timeofday) (B5325 core-prim . get-command-line) (B5324 core-prim . sys-display) (B5323 core-prim . whereis) (B5322 core-prim . register) (B5321 core-prim . vm-join!) (B5320 core-prim . vm-set-value!) (B531f core-prim . vm?) (B531e core-prim . main-vm?) (B531d core-prim . vm-eval) (B531c core-prim . vm-self) (B531b core-prim . vm-start!) (B531a core-prim . make-vm) (B5319 core-prim . mutex-try-lock!) (B5318 core-prim . mutex-unlock!) (B5317 core-prim . mutex-lock!) (B5316 core-prim . mutex?) (B5315 core-prim . make-mutex) (B5314 core-prim . condition-variable-notify-all!) (B5313 core-prim . condition-variable-notify!) (B5312 core-prim . condition-variable-wait!) (B5311 core-prim . make-condition-variable) (B5310 core-prim . mosh-executable-path) (B530f core-prim . make-file-options) (B530e core-prim . source-info) (B530d core-prim . make-compiler-instruction) (B530c core-prim . make-instruction) (B530b core-prim . set-source-info!) (B530a core-prim . bignum?) (B5309 core-prim . fast-equal?) (B5308 core-prim . fasl-read) (B5307 core-prim . fasl-write) (B5306 core-prim . time-usage) (B5305 core-prim . os-constant) (B2880 core-prim . make-parameter) (B5304 core-prim . socket-port) (B5303 core-prim . socket-shutdown) (B5302 core-prim . socket-close) (B5301 core-prim . socket-send) (B5300 core-prim . socket-recv!) (B52ff core-prim . socket-recv) (B52fe core-prim . make-server-socket) (B52fd core-prim . make-client-socket) (B52fc core-prim . socket-accept) (B52fb core-prim . socket?) (B52fa core-prim . string-upcase) (B52f9 core-prim . string-titlecase) (B52f8 core-prim . string-normalize-nfkd) (B52f7 core-prim . string-normalize-nfkc) (B52f6 core-prim . string-normalize-nfd) (B52f5 core-prim . string-normalize-nfc) (B52f4 core-prim . string-foldcase) (B52f3 core-prim . string-downcase) (B52f2 core-prim . string-ci>?) (B52f1 core-prim . string-ci>=?) (B52f0 core-prim . string-ci=?) (B52ef core-prim . string-ci<?) (B52ee core-prim . string-ci<=?) (B52ed core-prim . char-whitespace?) (B52ec core-prim . char-upper-case?) (B52eb core-prim . char-title-case?) (B52ea core-prim . char-numeric?) (B52e9 core-prim . char-lower-case?) (B52e8 core-prim . char-general-category) (B52e7 core-prim . char-upcase) (B52e6 core-prim . char-titlecase) (B52e5 core-prim . char-foldcase) (B52e4 core-prim . char-downcase) (B52e3 core-prim . char-ci>?) (B52e2 core-prim . char-ci>=?) (B52e1 core-prim . char-ci=?) (B52e0 core-prim . char-ci<?) (B52df core-prim . char-ci<=?) (B52de core-prim . char-alphabetic?) (B2e74 core-prim . make-variable-transformer) (B3129 core-prim . identifier?) (B3115 core-prim . generate-temporaries) (B3117 core-prim . free-identifier=?) (B312d core-prim . syntax->datum) (B312b core-prim . datum->syntax) (B3119 core-prim . bound-identifier=?) (B52dd core-prim . record-type-descriptor?) (B52dc core-prim . record-predicate) (B52db core-prim . record-mutator) (B52da core-prim . record-constructor) (B52d9 core-prim . record-accessor) (B52d8 core-prim . make-record-type-descriptor) (B52d7 core-prim . make-record-constructor-descriptor) (B52d6 core-prim . record?) (B52d5 core-prim . record-type-uid) (B52d4 core-prim . record-type-sealed?) (B52d3 core-prim . record-type-parent) (B52d2 core-prim . record-type-opaque?) (B52d1 core-prim . record-type-name) (B52d0 core-prim . record-type-generative?) (B52cf core-prim . record-type-field-names) (B52ce core-prim . record-rtd) (B52cd core-prim . record-field-mutable?) (B52cc core-prim . delete-file) (B52cb core-prim . file-exists?) (B52ca core-prim . vector-sort!) (B52c9 core-prim . vector-sort) (B52c8 core-prim . list-sort) (B52c7 core-prim . symbol-hash) (B52c6 core-prim . string-ci-hash) (B52c5 core-prim . string-hash) (B52c4 core-prim . equal-hash) (B52c3 core-prim . hashtable-equivalence-function) (B52c2 core-prim . make-hashtable) (B52c1 core-prim . hashtable-hash-function) (B52c0 core-prim . make-eqv-hashtable) (B52bf core-prim . make-eq-hashtable) (B52be core-prim . hashtable?) (B52bd core-prim . hashtable-update!) (B52bc core-prim . hashtable-size) (B52bb core-prim . hashtable-set!) (B52ba core-prim . hashtable-ref) (B52b9 core-prim . hashtable-mutable?) (B52b8 core-prim . hashtable-keys) (B52b7 core-prim . hashtable-entries) (B52b6 core-prim . hashtable-delete!) (B52b5 core-prim . hashtable-copy) (B52b4 core-prim . hashtable-contains?) (B52b3 core-prim . hashtable-clear!) (B52b2 core-prim . call-with-output-file) (B52b1 core-prim . call-with-input-file) (B52b0 core-prim . write-char) (B52af core-prim . write) (B52ae core-prim . with-output-to-file) (B52ad core-prim . with-input-from-file) (B52ac core-prim . read-char) (B52ab core-prim . read) (B52aa core-prim . peek-char) (B52a9 core-prim . open-output-file) (B52a8 core-prim . open-input-file) (B52a7 core-prim . newline) (B52a6 core-prim . display) (B52a5 core-prim . close-output-port) (B52a4 core-prim . close-input-port) (B52a3 core-prim . eof-object?) (B52a2 core-prim . eof-object) (B52a1 core-prim . current-error-port) (B52a0 core-prim . current-output-port) (B529f core-prim . current-input-port) (B529e core-prim . output-port?) (B529d core-prim . input-port?) (B529c core-prim . utf-8-codec) (B529b core-prim . utf-16-codec) (B529a core-prim . transcoder-error-handling-mode) (B5299 core-prim . transcoder-eol-style) (B5298 core-prim . transcoder-codec) (B5297 core-prim . transcoded-port) (B5296 core-prim . textual-port?) (B5295 core-prim . string->bytevector) (B5294 core-prim . standard-output-port) (B5293 core-prim . standard-input-port) (B5292 core-prim . standard-error-port) (B5291 core-prim . set-port-position!) (B5290 core-prim . put-u8) (B528f core-prim . put-string) (B528e core-prim . put-datum) (B528d core-prim . put-char) (B528c core-prim . put-bytevector) (B528b core-prim . port?) (B528a core-prim . port-transcoder) (B5289 core-prim . port-position) (B5288 core-prim . port-has-set-port-position!?) (B5287 core-prim . port-has-port-position?) (B5286 core-prim . port-eof?) (B5285 core-prim . output-port-buffer-mode) (B5284 core-prim . open-string-output-port) (B5283 core-prim . open-string-input-port) (B5282 core-prim . open-file-output-port) (B5281 core-prim . open-file-input/output-port) (B5280 core-prim . open-file-input-port) (B527f core-prim . open-bytevector-output-port) (B527e core-prim . open-bytevector-input-port) (B527d core-prim . native-transcoder) (B527c core-prim . native-eol-style) (B527b core-prim . make-transcoder) (B527a core-prim . latin-1-codec) (B4d0b core-prim . make-i/o-write-error) (B4cf6 core-prim . make-i/o-read-error) (B4dac core-prim . make-i/o-port-error) (B4d22 core-prim . make-i/o-invalid-position-error) (B4d3d core-prim . make-i/o-filename-error) (B4d56 core-prim . make-i/o-file-protection-error) (B4d6b core-prim . make-i/o-file-is-read-only-error) (B4d95 core-prim . make-i/o-file-does-not-exist-error) (B4d80 core-prim . make-i/o-file-already-exists-error) (B4ce1 core-prim . make-i/o-error) (B4ddc core-prim . make-i/o-encoding-error) (B4dc5 core-prim . make-i/o-decoding-error) (B5279 core-prim . make-custom-textual-output-port) (B5278 core-prim . make-custom-textual-input/output-port) (B5277 core-prim . make-custom-textual-input-port) (B5276 core-prim . make-custom-binary-output-port) (B5275 core-prim . make-custom-binary-input/output-port) (B5274 core-prim . make-custom-binary-input-port) (B5273 core-prim . make-bytevector) (B5272 core-prim . lookahead-u8) (B5271 core-prim . lookahead-char) (B4d0d core-prim . i/o-write-error?) (B4cf8 core-prim . i/o-read-error?) (B4db0 core-prim . i/o-port-error?) (B4d26 core-prim . i/o-invalid-position-error?) (B4d41 core-prim . i/o-filename-error?) (B4d58 core-prim . i/o-file-protection-error?) (B4d6d core-prim . i/o-file-is-read-only-error?) (B4d97 core-prim . i/o-file-does-not-exist-error?) (B4d82 core-prim . i/o-file-already-exists-error?) (B4ce3 core-prim . i/o-error?) (B4d28 core-prim . i/o-error-position) (B4db2 core-prim . i/o-error-port) (B4d43 core-prim . i/o-error-filename) (B4de0 core-prim . i/o-encoding-error?) (B4de2 core-prim . i/o-encoding-error-char) (B4dc7 core-prim . i/o-decoding-error?) (B5270 core-prim . get-u8) (B526f core-prim . get-string-n!) (B526e core-prim . get-string-n) (B526d core-prim . get-string-all) (B526c core-prim . get-line) (B526b core-prim . get-datum) (B526a core-prim . get-char) (B5269 core-prim . get-bytevector-some) (B5268 core-prim . get-bytevector-n!) (B5267 core-prim . get-bytevector-n) (B5266 core-prim . get-bytevector-all) (B5265 core-prim . flush-output-port) (B5264 core-prim . close-port) (B3103 core-prim . scheme-report-environment) (B5263 core-prim . quotient) (B3101 core-prim . null-environment) (B5262 core-prim . remainder) (B5261 core-prim . modulo) (B5260 core-prim . inexact->exact) (B525f core-prim . force) (B525e core-prim . exact->inexact) (B525d core-prim . make-promise) (B525c core-prim . exit) (B4f17 core-prim . command-line) (B525b core-prim . string-fill!) (B525a core-prim . string-set!) (B5259 core-prim . set-cdr!) (B5258 core-prim . set-car!) (B5257 core-prim . remove) (B5256 core-prim . remv) (B5255 core-prim . remp) (B5254 core-prim . remq) (B5253 core-prim . partition) (B5252 core-prim . memv) (B5251 core-prim . memq) (B5250 core-prim . memp) (B524f core-prim . member) (B524e core-prim . exists) (B524d core-prim . for-all) (B524c core-prim . fold-right) (B524b core-prim . fold-left) (B524a core-prim . find) (B5249 core-prim . filter) (B5248 core-prim . cons*) (B5247 core-prim . assv) (B5246 core-prim . assq) (B5245 core-prim . assp) (B5244 core-prim . assoc) (B5243 core-prim . call-with-string-output-port) (B5242 core-prim . call-with-port) (B5241 core-prim . call-with-bytevector-output-port) (B5240 core-prim . bytevector->string) (B523f core-prim . buffer-mode?) (B523e core-prim . binary-port?) (B523d core-prim . with-exception-handler) (B523c core-prim . raise-continuable) (B523b core-prim . raise) (B3107 core-prim . eval) (B30ff core-prim . environment) (B523a core-prim . make-enumeration) (B5239 core-prim . enum-set=?) (B5238 core-prim . enum-set-universe) (B5237 core-prim . enum-set-union) (B5236 core-prim . enum-set-subset?) (B5235 core-prim . enum-set-projection) (B5234 core-prim . enum-set-member?) (B5233 core-prim . enum-set-intersection) (B5232 core-prim . enum-set-indexer) (B5231 core-prim . enum-set-difference) (B5230 core-prim . enum-set-constructor) (B522f core-prim . enum-set-complement) (B522e core-prim . enum-set->list) (B4c57 core-prim . who-condition?) (B4bcf core-prim . warning?) (B4c0e core-prim . violation?) (B4cce core-prim . undefined-violation?) (B4cb5 core-prim . syntax-violation?) (B4cb9 core-prim . syntax-violation-subform) (B4cb7 core-prim . syntax-violation-form) (B3127 core-prim . syntax-violation) (B522d core-prim . simple-conditions) (B4be4 core-prim . serious-condition?) (B4c6e core-prim . non-continuable-violation?) (B4bb8 core-prim . message-condition?) (B4c53 core-prim . make-who-condition) (B4bcd core-prim . make-warning) (B4c0c core-prim . make-violation) (B4ccc core-prim . make-undefined-violation) (B4caf core-prim . make-syntax-violation) (B4be2 core-prim . make-serious-condition) (B4c6c core-prim . make-non-continuable-violation) (B4bb4 core-prim . make-message-condition) (B4c96 core-prim . make-lexical-violation) (B4c38 core-prim . make-irritants-condition) (B4c81 core-prim . make-implementation-restriction-violation) (B4bf7 core-prim . make-error) (B4c21 core-prim . make-assertion-violation) (B4c98 core-prim . lexical-violation?) (B4c3c core-prim . irritants-condition?) (B4c83 core-prim . implementation-restriction-violation?) (B4bf9 core-prim . error?) (B4c59 core-prim . condition-who) (B522c core-prim . condition-predicate) (B4bba core-prim . condition-message) (B4c3e core-prim . condition-irritants) (B522b core-prim . condition-accessor) (B522a core-prim . condition) (B4c23 core-prim . assertion-violation?) (B5229 core-prim . condition?) (B5228 core-prim . utf32->string) (B5227 core-prim . utf16->string) (B5226 core-prim . utf8->string) (B5225 core-prim . uint-list->bytevector) (B5224 core-prim . u8-list->bytevector) (B5223 core-prim . string->utf8) (B5222 core-prim . string->utf32) (B5221 core-prim . string->utf16) (B5220 core-prim . sint-list->bytevector) (B521f core-prim . native-endianness) (B521e core-prim . bytevector?) (B521d core-prim . bytevector=?) (B521c core-prim . bytevector-uint-set!) (B521b core-prim . bytevector-uint-ref) (B521a core-prim . bytevector-u8-set!) (B5219 core-prim . bytevector-u8-ref) (B5218 core-prim . bytevector-u64-set!) (B5217 core-prim . bytevector-u64-ref) (B5216 core-prim . bytevector-u64-native-set!) (B5215 core-prim . bytevector-u64-native-ref) (B5214 core-prim . bytevector-u32-set!) (B5213 core-prim . bytevector-u32-ref) (B5212 core-prim . bytevector-u32-native-set!) (B5211 core-prim . bytevector-u32-native-ref) (B5210 core-prim . bytevector-u16-set!) (B520f core-prim . bytevector-u16-ref) (B520e core-prim . bytevector-u16-native-set!) (B520d core-prim . bytevector-u16-native-ref) (B520c core-prim . bytevector-sint-set!) (B520b core-prim . bytevector-sint-ref) (B520a core-prim . bytevector-s8-set!) (B5209 core-prim . bytevector-s8-ref) (B5208 core-prim . bytevector-s64-set!) (B5207 core-prim . bytevector-s64-ref) (B5206 core-prim . bytevector-s64-native-set!) (B5205 core-prim . bytevector-s64-native-ref) (B5204 core-prim . bytevector-s32-set!) (B5203 core-prim . bytevector-s32-ref) (B5202 core-prim . bytevector-s32-native-set!) (B5201 core-prim . bytevector-s32-native-ref) (B5200 core-prim . bytevector-s16-set!) (B51ff core-prim . bytevector-s16-ref) (B51fe core-prim . bytevector-s16-native-set!) (B51fd core-prim . bytevector-s16-native-ref) (B51fc core-prim . bytevector-length) (B51fb core-prim . bytevector-ieee-single-ref) (B51fa core-prim . bytevector-ieee-single-set!) (B51f9 core-prim . bytevector-ieee-single-native-set!) (B51f8 core-prim . bytevector-ieee-single-native-ref) (B51f7 core-prim . bytevector-ieee-double-set!) (B51f6 core-prim . bytevector-ieee-double-ref) (B51f5 core-prim . bytevector-ieee-double-native-set!) (B51f4 core-prim . bytevector-ieee-double-native-ref) (B51f3 core-prim . bytevector-fill!) (B51f2 core-prim . bytevector-copy!) (B51f1 core-prim . bytevector-copy) (B51f0 core-prim . bytevector->uint-list) (B51ef core-prim . bytevector->u8-list) (B51ee core-prim . bytevector->sint-list) (B4e0c core-prim . no-nans-violation?) (B4df7 core-prim . no-infinities-violation?) (B4e0a core-prim . make-no-nans-violation) (B4df5 core-prim . make-no-infinities-violation) (B51ed core-prim . real->flonum) (B51ec core-prim . flzero?) (B51eb core-prim . fltruncate) (B51ea core-prim . fltan) (B51e9 core-prim . flsqrt) (B51e8 core-prim . flsin) (B51e7 core-prim . flround) (B51e6 core-prim . flpositive?) (B51e5 core-prim . flonum?) (B51e4 core-prim . flodd?) (B51e3 core-prim . flnumerator) (B51e2 core-prim . flnegative?) (B51e1 core-prim . flnan?) (B51e0 core-prim . flmod0) (B51df core-prim . flmod) (B51de core-prim . flmin) (B51dd core-prim . flmax) (B51dc core-prim . fllog) (B51db core-prim . flinteger?) (B51da core-prim . flinfinite?) (B51d9 core-prim . flfloor) (B51d8 core-prim . flfinite?) (B51d7 core-prim . flexpt) (B51d6 core-prim . flexp) (B51d5 core-prim . fleven?) (B51d4 core-prim . fldiv0-and-mod0) (B51d3 core-prim . fldiv0) (B51d2 core-prim . fldiv-and-mod) (B51d1 core-prim . fldiv) (B51d0 core-prim . fldenominator) (B51cf core-prim . flcos) (B51ce core-prim . flceiling) (B51cd core-prim . flatan) (B51cc core-prim . flasin) (B51cb core-prim . flacos) (B51ca core-prim . flabs) (B51c9 core-prim . fl>?) (B51c8 core-prim . fl>=?) (B51c7 core-prim . fl=?) (B51c6 core-prim . fl<?) (B51c5 core-prim . fl<=?) (B51c4 core-prim . fl/) (B51c3 core-prim . fl-) (B51c2 core-prim . fl+) (B51c1 core-prim . fl*) (B51c0 core-prim . fixnum->flonum) (B51bf core-prim . fxzero?) (B51be core-prim . fxxor) (B51bd core-prim . fxrotate-bit-field) (B51bc core-prim . fxreverse-bit-field) (B51bb core-prim . fxpositive?) (B51ba core-prim . fxodd?) (B51b9 core-prim . fxnot) (B51b8 core-prim . fxnegative?) (B51b7 core-prim . fxmod0) (B51b6 core-prim . fxmod) (B51b5 core-prim . fxmin) (B51b4 core-prim . fxmax) (B51b3 core-prim . fxlength) (B51b2 core-prim . fxior) (B51b1 core-prim . fxif) (B51b0 core-prim . fxfirst-bit-set) (B51af core-prim . fxeven?) (B51ae core-prim . fxdiv0-and-mod0) (B51ad core-prim . fxdiv0) (B51ac core-prim . fxdiv-and-mod) (B51ab core-prim . fxdiv) (B51aa core-prim . fxcopy-bit-field) (B51a9 core-prim . fxcopy-bit) (B51a8 core-prim . fxbit-set?) (B51a7 core-prim . fxbit-field) (B51a6 core-prim . fxbit-count) (B51a5 core-prim . fxarithmetic-shift-right) (B51a4 core-prim . fxarithmetic-shift-left) (B51a3 core-prim . fxarithmetic-shift) (B51a2 core-prim . fxand) (B51a1 core-prim . fx>?) (B51a0 core-prim . fx>=?) (B519f core-prim . fx=?) (B519e core-prim . fx<?) (B519d core-prim . fx<=?) (B519c core-prim . fx-/carry) (B519b core-prim . fx-) (B519a core-prim . fx+/carry) (B5199 core-prim . fx+) (B5198 core-prim . fx*/carry) (B5197 core-prim . fx*) (B5196 core-prim . greatest-fixnum) (B5195 core-prim . least-fixnum) (B5194 core-prim . fixnum-width) (B5193 core-prim . fixnum?) (B5192 core-prim . bitwise-rotate-bit-field) (B5191 core-prim . bitwise-reverse-bit-field) (B5190 core-prim . bitwise-length) (B518f core-prim . bitwise-if) (B518e core-prim . bitwise-first-bit-set) (B518d core-prim . bitwise-copy-bit-field) (B518c core-prim . bitwise-copy-bit) (B518b core-prim . bitwise-bit-set?) (B518a core-prim . bitwise-bit-field) (B5189 core-prim . bitwise-bit-count) (B5188 core-prim . bitwise-xor) (B5187 core-prim . bitwise-ior) (B5186 core-prim . bitwise-and) (B5185 core-prim . bitwise-not) (B5184 core-prim . bitwise-arithmetic-shift-right) (B5183 core-prim . bitwise-arithmetic-shift-left) (B5182 core-prim . bitwise-arithmetic-shift) (B5181 core-prim . zero?) (B5180 core-prim . vector?) (B517f core-prim . vector-set!) (B517e core-prim . vector-ref) (B517d core-prim . vector-map) (B517c core-prim . vector-length) (B517b core-prim . vector-for-each) (B517a core-prim . vector-fill!) (B5179 core-prim . vector->list) (B5178 core-prim . vector) (B5177 core-prim . values) (B5176 core-prim . truncate) (B5175 core-prim . tan) (B5174 core-prim . symbol?) (B5173 core-prim . symbol=?) (B5172 core-prim . symbol->string) (B5171 core-prim . substring) (B5170 core-prim . string?) (B516f core-prim . string>?) (B516e core-prim . string>=?) (B516d core-prim . string=?) (B516c core-prim . string<?) (B516b core-prim . string<=?) (B516a core-prim . string-ref) (B5169 core-prim . string-length) (B5168 core-prim . string-for-each) (B5167 core-prim . string-copy) (B5166 core-prim . string-append) (B5165 core-prim . string->symbol) (B5164 core-prim . string->number) (B5163 core-prim . string->list) (B5162 core-prim . string) (B5161 core-prim . sqrt) (B5160 core-prim . sin) (B515f core-prim . round) (B515e core-prim . reverse) (B515d core-prim . real?) (B515c core-prim . real-valued?) (B515b core-prim . real-part) (B515a core-prim . rationalize) (B5159 core-prim . rational?) (B5158 core-prim . rational-valued?) (B5157 core-prim . procedure?) (B5156 core-prim . positive?) (B5155 core-prim . pair?) (B5154 core-prim . odd?) (B5153 core-prim . numerator) (B5152 core-prim . number?) (B5151 core-prim . number->string) (B5150 core-prim . null?) (B514f core-prim . not) (B514e core-prim . negative?) (B514d core-prim . nan?) (B514c core-prim . min) (B514b core-prim . max) (B514a core-prim . map) (B5149 core-prim . make-vector) (B5148 core-prim . make-string) (B5147 core-prim . make-rectangular) (B5146 core-prim . make-polar) (B5145 core-prim . magnitude) (B5144 core-prim . log) (B5143 core-prim . list?) (B5142 core-prim . list-tail) (B5141 core-prim . list-ref) (B5140 core-prim . list->vector) (B513f core-prim . list->string) (B513e core-prim . list) (B513d core-prim . length) (B513c core-prim . lcm) (B513b core-prim . integer?) (B513a core-prim . integer-valued?) (B5139 core-prim . integer->char) (B5138 core-prim . infinite?) (B5137 core-prim . inexact?) (B5136 core-prim . inexact) (B5135 core-prim . imag-part) (B5134 core-prim . gcd) (B5133 core-prim . for-each) (B5132 core-prim . floor) (B5131 core-prim . finite?) (B5130 core-prim . expt) (B512f core-prim . exp) (B512e core-prim . exact?) (B512d core-prim . exact-integer-sqrt) (B512c core-prim . exact) (B512b core-prim . even?) (B512a core-prim . error) (B5129 core-prim . eqv?) (B5128 core-prim . equal?) (B5127 core-prim . eq?) (B5126 core-prim . dynamic-wind) (B5125 core-prim . div0-and-mod0) (B5124 core-prim . mod0) (B5123 core-prim . div0) (B5122 core-prim . div-and-mod) (B5121 core-prim . mod) (B5120 core-prim . div) (B511f core-prim . denominator) (B511e core-prim . cos) (B511d core-prim . cons) (B511c core-prim . complex?) (B511b core-prim . char?) (B511a core-prim . char>?) (B5119 core-prim . char>=?) (B5118 core-prim . char=?) (B5117 core-prim . char<?) (B5116 core-prim . char<=?) (B5115 core-prim . char->integer) (B5114 core-prim . ceiling) (B5113 core-prim . call-with-values) (B5112 core-prim . call/cc) (B5111 core-prim . call-with-current-continuation) (B5110 core-prim . cddddr) (B510f core-prim . cdddar) (B510e core-prim . cddadr) (B510d core-prim . cddaar) (B510c core-prim . cdaddr) (B510b core-prim . cdadar) (B510a core-prim . cdaadr) (B5109 core-prim . cdaaar) (B5108 core-prim . cadddr) (B5107 core-prim . caddar) (B5106 core-prim . cadadr) (B5105 core-prim . cadaar) (B5104 core-prim . caaddr) (B5103 core-prim . caadar) (B5102 core-prim . caaadr) (B5101 core-prim . caaaar) (B5100 core-prim . cdddr) (B50ff core-prim . cddar) (B50fe core-prim . cdadr) (B50fd core-prim . cdaar) (B50fc core-prim . caddr) (B50fb core-prim . cadar) (B50fa core-prim . caadr) (B50f9 core-prim . caaar) (B50f8 core-prim . cddr) (B50f7 core-prim . cdar) (B50f6 core-prim . cadr) (B50f5 core-prim . caar) (B50f4 core-prim . cdr) (B50f3 core-prim . car) (B50f2 core-prim . boolean?) (B50f1 core-prim . boolean=?) (B50f0 core-prim . atan) (B50ef core-prim . assertion-violation) (B3121 core-prim . assertion-error) (B50ee core-prim . asin) (B50ed core-prim . apply) (B50ec core-prim . append) (B50eb core-prim . angle) (B50ea core-prim . acos) (B50e9 core-prim . abs) (B50e8 core-prim . /) (B50e7 core-prim . *) (B50e6 core-prim . -) (B50e5 core-prim . +) (B50e4 core-prim . >=) (B50e3 core-prim . >) (B50e2 core-prim . =) (B50e1 core-prim . <=) (B50e0 core-prim . <) (B50df core-prim . library) (B50de $core-rtd &no-nans-rtd &no-nans-rcd) (B50dd $core-rtd &no-infinities-rtd &no-infinities-rcd) (B50dc $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (B50db $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (B50da $core-rtd &i/o-port-rtd &i/o-port-rcd) (B50d9 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (B50d8 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (B50d7 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (B50d6 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (B50d5 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (B50d4 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (B50d3 $core-rtd &i/o-write-rtd &i/o-write-rcd) (B50d2 $core-rtd &i/o-read-rtd &i/o-read-rcd) (B50d1 $core-rtd &i/o-rtd &i/o-rcd) (B50d0 $core-rtd &undefined-rtd &undefined-rcd) (B50cf $core-rtd &syntax-rtd &syntax-rcd) (B50ce $core-rtd &lexical-rtd &lexical-rcd) (B50cd $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (B50cc $core-rtd &non-continuable-rtd &non-continuable-rcd) (B50cb $core-rtd &who-rtd &who-rcd) (B50ca $core-rtd &irritants-rtd &irritants-rcd) (B50c9 $core-rtd &assertion-rtd &assertion-rcd) (B50c8 $core-rtd &violation-rtd &violation-rcd) (B50c7 $core-rtd &error-rtd &error-rcd) (B50c6 $core-rtd &serious-rtd &serious-rcd) (B50c5 $core-rtd &warning-rtd &warning-rcd) (B50c4 $core-rtd &message-rtd &message-rcd) (B50c3 $core-rtd &condition-rtd &condition-rcd) (B50c2 macro . define-condition-type) (B50c1 macro . define-enumeration) (B50c0 macro . define-record-type) (B50bf macro . parent-rtd) (B50be macro . nongenerative) (B50bd macro . opaque) (B50bc macro . sealed) (B50bb macro . protocol) (B50ba macro . parent) (B50b9 macro . immutable) (B50b8 macro . mutable) (B50b7 macro . fields) (B50b6 macro . error-handling-mode) (B50b5 macro . file-options) (B50b4 macro . buffer-mode) (B50b3 macro . eol-style) (B50b2 macro . guard) (B50b1 macro . trace-define) (B50b0 macro . trace-lambda) (B50af macro . unsyntax-splicing) (B50ae macro . unsyntax) (B50ad macro . unquote-splicing) (B50ac macro . unquote) (B50ab macro . _) (B50aa macro . else) (B50a9 macro . =>) (B50a8 macro . ...) (B50a7 macro . assert) (B50a6 macro . endianness) (B50a5 macro . delay) (B50a4 macro . time) (B50a3 macro . do) (B50a2 macro . cond) (B50a1 macro . let*) (B50a0 macro . let) (B509f macro . let*-values) (B509e macro . let-values) (B509d macro . identifier-syntax) (B509c macro . with-syntax) (B509b macro . quasisyntax) (B509a macro . quasiquote) (B5099 macro . syntax-rules) (B5098 macro . include) (B5097 macro . define-struct) (B5096 core-macro . record-constructor-descriptor) (B5095 core-macro . record-type-descriptor) (B5094 macro . case) (B5093 macro . parameterize) (B5092 macro . unless) (B5091 macro . when) (B5090 core-macro . or) (B508f core-macro . and) (B508e core-macro . if) (B508d core-macro . letrec*) (B508c core-macro . letrec) (B508b core-macro . type-descriptor) (B508a core-macro . case-lambda) (B5089 core-macro . lambda) (B5088 core-macro . syntax) (B5087 core-macro . syntax-case) (B5086 core-macro . quote) (B5085 core-macro . foreign-call) (B5084 letrec-syntax) (B5083 let-syntax) (B5082 set!) (B5081 import) (B5080 begin) (B507f module) (B507e define-syntax) (B507d define)) values values '#f '#f '#f '#f) (B2c6c@B2ab8@install-library 'B53c1 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . B53a0) (eval-core . B539f) (set-symbol-value! . B539e) (symbol-value . B539d) (gensym . B539c) (void . B539b)) '() values values '#f '#f '#f '#f) (B2c6c@B2ab8@install-library 'B53c2 '(mosh) '() '() '() '() '((set-symbol-value! . B539e) (symbol-value . B539d) (regexp? . B5399) (read-line . B5398) (ungensym . B5396) (alist->eq-hash-table . B5395) (assoc-ref . B5394) (print . B5393) (format . B5392) (host-os . B5391) (library-path . B2a97) (standard-library-path . B5390) (file-newer? . B538f) (stat-mtime . B538e) (digit->integer . B538a) (call-with-string-input-port . B5389) (call-with-string-io . B5388) (string-split . B5387) (bytevector-for-each . B5386) (string->regexp . B5385) (rxmatch . B5384) (regexp-replace-all . B5383) (hashtable-for-each . B5382) (set-current-directory! . B537d) (expand-path . B537c) (current-directory . B537b) (p . B533e) (get-timeofday . B5326) (get-command-line . B5325) (sys-display . B5324) (whereis . B5323) (register . B5322) (vm-join! . B5321) (vm-set-value! . B5320) (vm? . B531f) (main-vm? . B531e) (vm-eval . B531d) (vm-self . B531c) (vm-start! . B531b) (make-vm . B531a) (mutex-try-lock! . B5319) (mutex-unlock! . B5318) (mutex-lock! . B5317) (mutex? . B5316) (make-mutex . B5315) (condition-variable-notify-all! . B5314) (condition-variable-notify! . B5313) (condition-variable-wait! . B5312) (make-condition-variable . B5311) (mosh-executable-path . B5310) (make-file-options . B530f) (source-info . B530e) (make-compiler-instruction . B530d) (make-instruction . B530c) (set-source-info! . B530b) (bignum? . B530a) (fast-equal? . B5309) (fasl-read . B5308) (fasl-write . B5307) (time-usage . B5306) (os-constant . B5305) (time . B50a4) (include . B5098)) '() values values '#f '#f '#f '#f) (B2c6c@B2ab8@install-library 'B53c3 '(system) '() '() '() '() '((gensym-prefix-set! . B5397) (write-to-file . B538d) (file->list . B538c) (file->string . B538b) (call-process . B5381) (local-tz-offset . B5380) (microseconds . B537f) (directory-list . B537e) (expand-path . B537c) (%spawn . B537a) (%waitpid . B5379) (simple-struct-name . B5378) (simple-struct-set! . B5377) (simple-struct-ref . B5376) (make-simple-struct . B5375) (simple-struct? . B5374) (pointer-ref-c-int64 . B5373) (pointer-ref-c-int32 . B5372) (pointer-ref-c-int16 . B5371) (pointer-ref-c-int8 . B5370) (pointer-ref-c-uint64 . B536f) (pointer-ref-c-uint32 . B536e) (pointer-ref-c-uint16 . B536d) (pointer-ref-c-uint8 . B536c) (pointer-set-c-uint64! . B536b) (pointer-set-c-uint32! . B536a) (pointer-set-c-uint16! . B5369) (pointer-set-c-uint8! . B5368) (pointer-set-c-int64! . B5367) (pointer-set-c-int32! . B5366) (pointer-set-c-int16! . B5365) (pointer-set-c-int8! . B5364) (pointer-set-c-pointer! . B5363) (pointer-set-c-double! . B5362) (pointer-set-c-float! . B5361) (pointer-set-c-long-long! . B5360) (pointer-set-c-long! . B535f) (pointer-set-c-int! . B535e) (pointer-set-c-short! . B535d) (pointer-set-c-char! . B535c) (pointer-ref-c-pointer . B535b) (pointer-ref-c-double . B535a) (pointer-ref-c-float . B5359) (pointer-ref-c-unsigned-long-long . B5358) (pointer-ref-c-signed-long-long . B5357) (pointer-ref-c-unsigned-long . B5356) (pointer-ref-c-signed-long . B5355) (pointer-ref-c-unsigned-int . B5354) (pointer-ref-c-signed-int . B5353) (pointer-ref-c-unsigned-short . B5352) (pointer-ref-c-signed-short . B5351) (pointer-ref-c-unsigned-char . B5350) (pointer-ref-c-signed-char . B534f) (pointer->integer . B534e) (integer->pointer . B534d) (pointer? . B534c) (shared-errno . B534b) (%ffi-supported? . B534a) (%ffi-pointer->string . B5349) (%ffi-call->string-or-zero . B5348) (%ffi-call->double . B5347) (%ffi-call->void* . B5346) (%ffi-call->void . B5345) (%ffi-call->char . B5344) (%ffi-call->int . B5343) (%ffi-lookup . B5342) (%ffi-open . B5341) (%fork . B5340) (%pipe . B533f) (open-output-string . B533d) (get-output-string . B533c) (file-stat-ctime . B533b) (file-stat-atime . B533a) (file-stat-mtime . B5339) (file-size-in-bytes . B5338) (file-writable? . B5337) (file-executable? . B5336) (file-readable? . B5335) (file-regular? . B5334) (file-symbolic-link? . B5333) (file-directory? . B5332) (create-symbolic-link . B5331) (rename-file . B5330) (delete-directory . B532f) (create-directory . B532e) (create-mosh-cache-dir . B532d) (get-environment-variables . B532c) (get-environment-variable . B532b) (join-wraps . B532a) (id->real-label . B5329) (same-marks? . B5328) (same-marks*? . B5327) (make-parameter . B2880) (socket-port . B5304) (socket-shutdown . B5303) (socket-close . B5302) (socket-send . B5301) (socket-recv! . B5300) (socket-recv . B52ff) (make-server-socket . B52fe) (make-client-socket . B52fd) (socket-accept . B52fc) (socket? . B52fb) (parameterize . B5093)) '() values values '#f '#f '#f '#f))
((lambda (B4f06@add-library-path! B4f08@parse-and-add-library-path B4f0a@for-each-with-index B4f0c@rpad B4f0e@condition-printer B4f10@record->field-alist B4f12@map-with-index B4f14@repl B4f16@trace-printer B4f18@command-line B4f1a@local-library-path B4f1c@load/args B4f1e@load B4f20@ironscheme-build B4f22@eval-top-level B4f24@compile-system-libraries B4f26@compile B4f28@compile->closure B4f2a@pre-compile-r6rs-file B4f2c@load-r6rs-top-level B4f2e@load-r6rs-top-level-sexp B4f30@prefix-inc B4f32@prefix-inc!) (begin (set! B4f06@add-library-path! (lambda (B4f55@path) (B2c5c@B2a98@library-path (append (B2c5c@B2a98@library-path) (list B4f55@path))))) (set! B4f08@parse-and-add-library-path (lambda (B4f57@paths B4f58@message) ((lambda (B4f5b@t) (if B4f5b@t ((lambda (B4f5d@paths) (for-each (lambda (B4f5f@path) (if (file-exists? B4f5f@path) (B4f06@add-library-path! (expand-path B4f5f@path)) (format (current-error-port) B4f58@message B4f5f@path))) (string-split B4f5d@paths '#\:))) B4f5b@t) (void))) B4f57@paths))) (set! B4f0a@for-each-with-index (lambda (B4f61@proc B4f62@lst) (letrec ((B4f65@loop (lambda (B4f67@i B4f68@lst) (if (null? B4f68@lst) (if '#f '#f (void)) (begin (B4f61@proc B4f67@i (car B4f68@lst)) (B4f65@loop (+ B4f67@i '1) (cdr B4f68@lst))))))) (B4f65@loop '1 B4f62@lst)))) (set! B4f0c@rpad (lambda (B4f6b@str B4f6c@pad B4f6d@n) ((lambda (B4f71@rest) ((letrec ((B4f73@loop (lambda (B4f75@rest B4f76@ret) (if (<= B4f75@rest '0) B4f76@ret (B4f73@loop (- B4f75@rest '1) (string-append B4f76@ret B4f6c@pad)))))) B4f73@loop) B4f71@rest (format '"~a" B4f6b@str))) (- B4f6d@n (string-length (format '"~a" B4f6b@str)))))) (set! B4f0e@condition-printer (lambda (B4f79@e B4f7a@port) ((lambda (B4f7e@max-condition-len) (begin (set! B4f7e@max-condition-len (apply max (map (lambda (B4f8f@c) (string-length (symbol->string (record-type-name (record-rtd B4f8f@c))))) (simple-conditions B4f79@e)))) (begin (display '" Condition components:\n" B4f7a@port) (B4f0a@for-each-with-index (lambda (B4f7f@i B4f80@x) ((lambda (B4f83@rtd B4f84@fields-alist) (begin (format B4f7a@port '" ~d. ~a" B4f7f@i (B4f0c@rpad (symbol->string (record-type-name B4f83@rtd)) '" " B4f7e@max-condition-len)) (if (null? B4f84@fields-alist) (newline B4f7a@port) (void)) ((letrec ((B4f87@loop (lambda (B4f89@first B4f8a@fields-alist) (if (null? B4f8a@fields-alist) '() ((lambda (B4f8d@field) (begin (if (not B4f89@first) (display (B4f0c@rpad '"" '" " (+ '4 B4f7e@max-condition-len)) B4f7a@port) (void)) (display '"       " B4f7a@port) (display (car B4f8d@field) B4f7a@port) (display '": " B4f7a@port) (write (cdr B4f8d@field) B4f7a@port) (newline B4f7a@port) (B4f87@loop '#f (cdr B4f8a@fields-alist)))) (car B4f8a@fields-alist)))))) B4f87@loop) '#t B4f84@fields-alist))) (record-rtd B4f80@x) (B4f10@record->field-alist B4f80@x))) (simple-conditions B4f79@e))))) '#f))) (set! B4f10@record->field-alist (lambda (B4f91@r) ((lambda (B4f94@ref) (begin (set! B4f94@ref (lambda (B4f9f@rtd B4fa0@i B4fa1@x) ((lambda (B4fa5@val) (if (symbol? B4fa5@val) (ungensym B4fa5@val) B4fa5@val)) ((record-accessor B4f9f@rtd B4fa0@i) B4fa1@x)))) ((letrec ((B4f95@loop (lambda (B4f97@ret B4f98@rtd) (if B4f98@rtd (B4f95@loop (append B4f97@ret (B4f12@map-with-index (lambda (B4f9b@i B4f9c@field) (cons B4f9c@field (B4f94@ref B4f98@rtd B4f9b@i B4f91@r))) (vector->list (record-type-field-names B4f98@rtd)))) (record-type-parent B4f98@rtd)) B4f97@ret)))) B4f95@loop) '() (record-rtd B4f91@r)))) '#f))) (set! B4f12@map-with-index (lambda (B4fa7@proc B4fa8@lst) ((letrec ((B4fab@loop (lambda (B4fad@i B4fae@lst B4faf@ret) (if (null? B4fae@lst) (reverse B4faf@ret) (B4fab@loop (+ B4fad@i '1) (cdr B4fae@lst) (cons (B4fa7@proc B4fad@i (car B4fae@lst)) B4faf@ret)))))) B4fab@loop) '0 B4fa8@lst '()))) (set! B4f14@repl (lambda B4fb3@x ((lambda (B4fb6@rec) (begin (set! B4fb6@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (B4fb9@B4fb7) (lambda () (with-exception-handler (lambda (B4fbb@e) ((call/cc (lambda (B4fbd@B4fb8) (B4fb9@B4fb7 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? B4fbb@e) (B4f0e@condition-printer B4fbb@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" B4fbb@e))) (B4fbd@B4fb8 (lambda () (raise-continuable B4fbb@e)))))))))) (lambda () ((letrec ((B4fbf@loop (lambda (B4fc1@line B4fc2@accum) ((lambda (B4fc6@parentheses-ok? B4fc8@eval-string-print) (begin (set! B4fc6@parentheses-ok? (lambda (B4fcd@text) ((letrec ((B4fcf@loop (lambda (B4fd1@chars B4fd2@p0 B4fd3@p1) (if (null? B4fd1@chars) (= '0 B4fd2@p0 B4fd3@p1) ((lambda (B4fd7@t) (if (memv B4fd7@t '(#\()) (B4fcf@loop (cdr B4fd1@chars) (+ B4fd2@p0 '1) B4fd3@p1) (if (memv B4fd7@t '(#\))) (B4fcf@loop (cdr B4fd1@chars) (- B4fd2@p0 '1) B4fd3@p1) (if (memv B4fd7@t '(#\[)) (B4fcf@loop (cdr B4fd1@chars) B4fd2@p0 (+ B4fd3@p1 '1)) (if (memv B4fd7@t '(#\])) (B4fcf@loop (cdr B4fd1@chars) B4fd2@p0 (- B4fd3@p1 '1)) (B4fcf@loop (cdr B4fd1@chars) B4fd2@p0 B4fd3@p1)))))) (car B4fd1@chars)))))) B4fcf@loop) (string->list B4fcd@text) '0 '0))) (set! B4fc8@eval-string-print (lambda (B4fcb@text) (if (not (or (string=? '"\n" B4fcb@text) (= '0 (string-length B4fcb@text)))) (write (B4f22@eval-top-level (call-with-port (open-string-input-port B4fcb@text) read))) (void)))) (if (eof-object? B4fc1@line) (begin (B4fc8@eval-string-print B4fc2@accum) (exit)) ((lambda (B4fc9@current) (if (B4fc6@parentheses-ok? B4fc9@current) (B4fc8@eval-string-print B4fc9@current) (B4fbf@loop (get-line (current-input-port)) B4fc9@current))) (string-append B4fc2@accum B4fc1@line))))) '#f '#f)))) B4fbf@loop) (get-line (current-input-port)) '""))))))) (newline) (B4fb6@rec)))) (B4fb6@rec))) '#f))) (set! B4f16@trace-printer (B29a2@B2881@make-parameter write)) (set! B4f18@command-line (B29a2@B2881@make-parameter (get-command-line))) (set! B4f1a@local-library-path (lambda (B4fd9@filename) (B2c5c@B2a98@library-path))) (set! B4f1c@load/args (lambda (B4fdb@filename . B4fdd@args) (begin (apply B4f2c@load-r6rs-top-level B4fdb@filename 'load B4fdd@args) (void)))) (set! B4f1e@load (lambda (B4fdf@filename) (begin (apply B4f2c@load-r6rs-top-level B4fdf@filename 'load (B4f18@command-line)) (void)))) (set! B4f20@ironscheme-build (lambda () (B4f1e@load '"ironscheme-buildscript.ss"))) (set! B4f22@eval-top-level (lambda (B4fe1@x) (B4b2d@B3108@eval B4fe1@x (B4b43@B3134@interaction-environment)))) (set! B4f24@compile-system-libraries (lambda () (B4f22@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! B4f26@compile (lambda (B4fe3@filename) (B4f2c@load-r6rs-top-level B4fe3@filename 'compile))) (set! B4f28@compile->closure (lambda (B4fe5@filename) (B4f2c@load-r6rs-top-level B4fe5@filename 'closure))) (set! B4f2a@pre-compile-r6rs-file (lambda (B4fe7@filename) (B4f2c@load-r6rs-top-level B4fe7@filename 'compile))) (set! B4f2c@load-r6rs-top-level (lambda (B4fe9@filename B4fea@how . B4fed@args) ((lambda (B4ff3@B4ff0 B4ff4@B4ff2) ((lambda (B4ff7@swap) (dynamic-wind B4ff7@swap (lambda () ((lambda (B4ff9@x*) ((lambda (B4ffb@t) (if (memv B4ffb@t '(closure)) (B4b42@B3132@pre-compile-r6rs-top-level B4ff9@x*) (if (memv B4ffb@t '(load)) ((lambda (B5005@B4ffe B5006@B5000 B5007@B5002 B5008@B5004) ((lambda (B500d@swap) (dynamic-wind B500d@swap (lambda () (begin (gensym-prefix-set! (B4f32@prefix-inc! (string-append (B29a3@B2883@mosh-cache-dir) '"/prefix.txt"))) (if (symbol-value '%clean-acc) (for-each (lambda (B500f@file) ((call/cc (lambda (B5013@B5011) (lambda () (with-exception-handler (lambda (B5015@c) ((call/cc (lambda (B5017@B5012) (B5013@B5011 (lambda () (if '#t '#t (B5017@B5012 (lambda () (raise-continuable B5015@c)))))))))) (lambda () (delete-file (string-append (B29a3@B2883@mosh-cache-dir) '"/" B500f@file))))))))) (directory-list (B29a3@B2883@mosh-cache-dir))) (void)) ((lambda (B5019@compiled) (begin (if (not (symbol-value '%disable-acc)) (B2c60@B2aa0@serialize-all B299d@B2877@serialize-library B29f9@B29b2@compile-core-expr) (void)) (B5019@compiled))) (B4b41@B3130@compile-r6rs-top-level B4ff9@x*)))) B500d@swap)) (lambda () (begin ((lambda (B501b@t) (begin (B5005@B4ffe B5007@B5002) (set! B5007@B5002 B501b@t))) (B5005@B4ffe)) ((lambda (B501d@t) (begin (B5006@B5000 B5008@B5004) (set! B5008@B5004 B501d@t))) (B5006@B5000)))))) B4f18@command-line B29a3@B2883@mosh-cache-dir (cons B4fe9@filename (car B4fed@args)) (create-mosh-cache-dir)) (if (memv B4ffb@t '(compile)) (begin (B4b41@B3130@compile-r6rs-top-level B4ff9@x*) (B2c60@B2aa0@serialize-all B299d@B2877@serialize-library B29f9@B29b2@compile-core-expr)) (if '#f '#f (void)))))) B4fea@how)) (with-input-from-file B4fe9@filename (lambda () ((letrec ((B501f@f (lambda () ((lambda (B5021@x) (if (eof-object? B5021@x) '() (cons B5021@x (B501f@f)))) (B2995@B2867@read-annotated))))) B501f@f)))))) B4ff7@swap)) (lambda () ((lambda (B5023@t) (begin (B4ff3@B4ff0 B4ff4@B4ff2) (set! B4ff4@B4ff2 B5023@t))) (B4ff3@B4ff0))))) B2c5c@B2a98@library-path (B4f1a@local-library-path B4fe9@filename)))) (set! B4f2e@load-r6rs-top-level-sexp (lambda (B5025@import-spec B5026@thunk) ((lambda (B5031@B502a B5032@B502c B5033@B502e B5034@B5030) ((lambda (B5039@swap) (dynamic-wind B5039@swap (lambda () (begin (gensym-prefix-set! (B4f32@prefix-inc! (string-append (B29a3@B2883@mosh-cache-dir) '"/prefix.txt"))) ((lambda (B503f@B503c B5040@B503e) ((lambda (B5043@swap) (dynamic-wind B5043@swap (lambda () ((B4b41@B3130@compile-r6rs-top-level (list (cons 'import B5025@import-spec) (list B5026@thunk))))) B5043@swap)) (lambda () ((lambda (B5045@t) (begin (B503f@B503c B5040@B503e) (set! B5040@B503e B5045@t))) (B503f@B503c))))) B4f18@command-line '()))) B5039@swap)) (lambda () (begin ((lambda (B5047@t) (begin (B5031@B502a B5033@B502e) (set! B5033@B502e B5047@t))) (B5031@B502a)) ((lambda (B5049@t) (begin (B5032@B502c B5034@B5030) (set! B5034@B5030 B5049@t))) (B5032@B502c)))))) B2c5c@B2a98@library-path B29a3@B2883@mosh-cache-dir (B4f1a@local-library-path '"") (create-mosh-cache-dir)))) (set! B4f30@prefix-inc (lambda (B504b@prefix-string) ((lambda (B504d@prefix) ((lambda (B504f@len) ((lambda () ((letrec ((B5051@loop (lambda (B5053@i B5054@carry? B5055@accum) (if (< B5053@i '0) (string->symbol (list->string (if B5054@carry? (cons '#\a B5055@accum) B5055@accum))) (if B5054@carry? ((lambda (B5059@next-integer) (if (= B5059@next-integer '123) (B5051@loop (- B5053@i '1) '#f (cons '#\A B5055@accum)) (if (= B5059@next-integer '91) (B5051@loop (- B5053@i '1) '#t (cons '#\a B5055@accum)) (B5051@loop (- B5053@i '1) '#f (cons (integer->char B5059@next-integer) B5055@accum))))) (+ '1 (char->integer (string-ref B504d@prefix B5053@i)))) (B5051@loop (- B5053@i '1) '#f (cons (string-ref B504d@prefix B5053@i) B5055@accum))))))) B5051@loop) (- B504f@len '1) '#t '())))) (string-length B504d@prefix))) (symbol->string B504b@prefix-string)))) (set! B4f32@prefix-inc! (lambda (B505b@file) (begin (if (not (file-exists? B505b@file)) (call-with-output-file B505b@file (lambda (B505d@port) (write 'd B505d@port))) (void)) ((lambda (B505f@prefix) ((lambda (B5061@next-prefix) ((lambda () (begin (call-with-output-file B505b@file (lambda (B5063@port) (write B5061@next-prefix B5063@port))) B505f@prefix)))) (B4f30@prefix-inc B505f@prefix))) (call-with-input-file B505b@file read))))) (begin (set! B507b@B4f32@prefix-inc! B4f32@prefix-inc!) (set! B507a@B4f30@prefix-inc B4f30@prefix-inc) (set! B5079@B4f2e@load-r6rs-top-level-sexp B4f2e@load-r6rs-top-level-sexp) (set! B5078@B4f2c@load-r6rs-top-level B4f2c@load-r6rs-top-level) (set! B5077@B4f2a@pre-compile-r6rs-file B4f2a@pre-compile-r6rs-file) (set! B5076@B4f28@compile->closure B4f28@compile->closure) (set! B5075@B4f26@compile B4f26@compile) (set! B5074@B4f24@compile-system-libraries B4f24@compile-system-libraries) (set! B5073@B4f22@eval-top-level B4f22@eval-top-level) (set! B5072@B4f20@ironscheme-build B4f20@ironscheme-build) (set! B5071@B4f1e@load B4f1e@load) (set! B5070@B4f1c@load/args B4f1c@load/args) (set! B506f@B4f1a@local-library-path B4f1a@local-library-path) (set! B506e@B4f18@command-line B4f18@command-line) (set! B506d@B4f16@trace-printer B4f16@trace-printer) (set! B506c@B4f14@repl B4f14@repl) (set! B506b@B4f12@map-with-index B4f12@map-with-index) (set! B506a@B4f10@record->field-alist B4f10@record->field-alist) (set! B5069@B4f0e@condition-printer B4f0e@condition-printer) (set! B5068@B4f0c@rpad B4f0c@rpad) (set! B5067@B4f0a@for-each-with-index B4f0a@for-each-with-index) (set! B5066@B4f08@parse-and-add-library-path B4f08@parse-and-add-library-path) (set! B5065@B4f06@add-library-path! B4f06@add-library-path!) (B2c61@B2aa2@current-precompiled-library-loader B299e@B2879@load-serialized-library) (set-symbol-value! 'load B4f1e@load) (set-symbol-value! 'pre-compile-r6rs-file B4f2a@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs B4f22@eval-top-level) (set-symbol-value! 'int-env-syms B4b24@B30f6@interaction-environment-symbols) (set-symbol-value! 'expanded2core B29f8@B29b0@expanded->core) (set-symbol-value! 'trace-printer B4f16@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (B4f33@c) (condition (B4e63@B4c6d@make-non-continuable-violation) (B4e59@B4c54@make-who-condition 'raise) (B4e1d@B4bb5@make-message-condition '"returned from non-continuable exception") (B4e4f@B4c39@make-irritants-condition (list B4f33@c))))) (B4f08@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (B4f08@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (B4f06@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (B4f06@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (B4f06@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) ((lambda (B4f35@prefix) (B2c5d@B2a9a@library-extensions (B4f35@prefix '".mosh" (B2c5d@B2a9a@library-extensions)))) (lambda (B4f37@ext B4f38@ls) (append (map (lambda (B4f3b@x) (string-append B4f37@ext B4f3b@x)) B4f38@ls) B4f38@ls))) ((lambda (B4f3d@args B4f3e@port) ((lambda (B4f42@ref) (begin (set! B4f42@ref (lambda (B4f4d@rtd B4f4e@i B4f4f@x) ((lambda (B4f53@val) (if (symbol? B4f53@val) (ungensym B4f53@val) B4f53@val)) ((record-accessor B4f4d@rtd B4f4e@i) B4f4f@x)))) (with-exception-handler (lambda (B4f43@c) (if (condition? B4f43@c) (B4f0e@condition-printer B4f43@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" B4f43@c))) (lambda () (if ((call/cc (lambda (B4f47@B4f45) (lambda () (with-exception-handler (lambda (B4f49@c) ((call/cc (lambda (B4f4b@B4f46) (B4f47@B4f45 (lambda () (if '#t '#f (B4f4b@B4f46 (lambda () (raise-continuable B4f49@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (B4f2e@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? B4f3d@args) (B4f14@repl) (B4f2c@load-r6rs-top-level (car B4f3d@args) 'load (cdr B4f3d@args)))))))) '#f)) (B4f18@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
