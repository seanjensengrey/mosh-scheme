;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (o27a9@read-annotated o27ab@annotation-stripped o27ad@annotation? o27af@annotation-source o27b1@annotation-expression o27b3@scm->fasl o27b5@fasl-save o27b7@fasl-load o27b9@serialize-library o27bb@load-serialized-library o27bd@make-record-printer o27bf@compile-core o27c1@read-library-source-file o27c3@make-parameter o282b@file-options-spec) (begin (set! o27a9@read-annotated read) (set! o27ab@annotation-stripped (lambda (o282c@x) (o27b1@annotation-expression o282c@x))) (set! o27ad@annotation? (lambda (o282e@x) (source-info o282e@x))) (set! o27af@annotation-source (lambda (o2830@x) (source-info o2830@x))) (set! o27b1@annotation-expression (lambda (o2832@x) (if (pair? o2832@x) (cons (car o2832@x) (cdr o2832@x)) (display '"line:46\n")))) (set! o27b3@scm->fasl (lambda (o2834@filename) (string-append o2834@filename '".mosh-fasl"))) (set! o27b5@fasl-save (lambda (o2836@filename o2837@obj) (call-with-port (open-file-output-port o2836@filename) (lambda (o283a@port) ((symbol-value 'fasl-write!) o2837@obj o283a@port))))) (set! o27b7@fasl-load (lambda (o283c@filename) (call-with-port (open-file-input-port o283c@filename) (symbol-value 'fasl-read!)))) (set! o27b9@serialize-library (lambda (o283e@filename o283f@obj) (begin (format '#t '"serialize-library ~a\n..." o283e@filename) ((lambda (o2842@expanded2core) ((lambda (o2844@compile) ((lambda (o2846@code) ((lambda (o2848@pivot) ((lambda (o284a@visit) ((lambda () (begin (set-car! o2848@pivot o284a@visit) ((lambda (o284c@pivot) ((lambda (o284e@invoke) ((lambda () (set-car! o284c@pivot o284e@invoke)))) (o2844@compile (o2842@expanded2core (car o284c@pivot))))) (cdr o2848@pivot)))))) (o2844@compile (o2842@expanded2core (car o2848@pivot))))) (cddddr (cddddr o2846@code)))) o283f@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (o2850@fasl-file) (begin (if (file-exists? o2850@fasl-file) (delete-file o2850@fasl-file) (void)) ((call/cc (lambda (o2854@o2852) (lambda () (with-exception-handler (lambda (o2856@c) ((call/cc (lambda (o2858@o2853) (o2854@o2852 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " o283e@filename) (if (file-exists? o2850@fasl-file) (delete-file o2850@fasl-file) (void)) '#f) (o2858@o2853 (lambda () (raise-continuable o2856@c)))))))))) (lambda () (begin (o27b5@fasl-save o2850@fasl-file o283f@obj) (display '"OK\n")))))))))) (o27b3@scm->fasl o283e@filename))))) (set! o27bb@load-serialized-library (lambda (o285a@filename o285b@obj) ((lambda (o285e@fasl-file) (if (and (file-exists? o285e@fasl-file) ((symbol-value 'file-newer?) o285e@fasl-file o285a@filename)) ((lambda (o2860@expanded2core) ((lambda (o2862@eval-compiled-core) ((lambda (o2864@code) ((lambda (o2866@pivot) ((lambda (o2868@visit) ((lambda (o286a@visit-proc) ((lambda () (begin (set-car! o2866@pivot o286a@visit-proc) ((lambda (o286c@pivot) ((lambda (o286e@invoke) ((lambda () (begin (set-car! o286c@pivot (lambda () (o2862@eval-compiled-core o286e@invoke))) (apply o285b@obj o2864@code))))) (car o286c@pivot))) (cdr o2866@pivot)) '#t)))) (lambda () (o2862@eval-compiled-core o2868@visit)))) (car o2866@pivot))) (cddddr (cddddr o2864@code)))) (o27b7@fasl-load o285e@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (o27b3@scm->fasl o285a@filename)))) (set! o27bd@make-record-printer (lambda (o2870@name o2871@printer) (lambda o2874@x (begin (display '"record printer") (for-each display o2874@x))))) (set! o27bf@compile-core (lambda o2876@x (apply error 'comile-core '"not implementated" o2876@x))) (set! o27c1@read-library-source-file (lambda (o2878@file-name) (with-input-from-file o2878@file-name o27a9@read-annotated))) (set! o27c3@make-parameter (lambda o2888 ((lambda (o2889) (if (= o2889 '1) (apply (lambda (o287a@x) (o27c3@make-parameter o287a@x (lambda (o287c@x) o287c@x))) o2888) (if (= o2889 '2) (apply (lambda (o287e@x o287f@fender) ((lambda (o2882@x) (lambda o2886 ((lambda (o2887) (if (= o2887 '0) (apply (lambda () o2882@x) o2886) (if (= o2887 '1) (apply (lambda (o2884@v) (set! o2882@x (o287f@fender o2884@v))) o2886) (error 'apply '"invalid arg count")))) (length o2886)))) (o287f@fender o287e@x))) o2888) (error 'apply '"invalid arg count")))) (length o2888)))) (set! o282b@file-options-spec (lambda (o288a@x) o288a@x)) (begin (set! o289a@o282b@file-options-spec o282b@file-options-spec) (set! o2899@o27c3@make-parameter o27c3@make-parameter) (set! o2898@o27c1@read-library-source-file o27c1@read-library-source-file) (set! o2897@o27bf@compile-core o27bf@compile-core) (set! o2896@o27bd@make-record-printer o27bd@make-record-printer) (set! o2895@o27bb@load-serialized-library o27bb@load-serialized-library) (set! o2894@o27b9@serialize-library o27b9@serialize-library) (set! o2893@o27b7@fasl-load o27b7@fasl-load) (set! o2892@o27b5@fasl-save o27b5@fasl-save) (set! o2891@o27b3@scm->fasl o27b3@scm->fasl) (set! o2890@o27b1@annotation-expression o27b1@annotation-expression) (set! o288f@o27af@annotation-source o27af@annotation-source) (set! o288e@o27ad@annotation? o27ad@annotation?) (set! o288d@o27ab@annotation-stripped o27ab@annotation-stripped) (set! o288c@o27a9@read-annotated o27a9@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (o289f@current-primitive-locations o28a1@mutable? o28a3@rewriter o28a5@expanded->core o28a7@compile-core-expr o28a9@pretty-print o28ab@compile-core-expr-to-port) (begin (set! o289f@current-primitive-locations (o2899@o27c3@make-parameter (lambda (o28ac@x) '#f) (lambda (o28ae@p) o28ae@p))) (set! o28a1@mutable? (lambda (o28b0@x) (or (pair? o28b0@x) (vector? o28b0@x) (hashtable? o28b0@x)))) (set! o28a3@rewriter (lambda (o28b2@quote-hack?) ((lambda (o28b5@f) (begin (set! o28b5@f (lambda (o28b6@x) (if (pair? o28b6@x) ((lambda (o28b8@t) (if (memv o28b8@t '(quote)) (if (and o28b2@quote-hack? (o28a1@mutable? (cadr o28b6@x))) ((lambda (o28ba@g) (begin (set-symbol-value! o28ba@g (cadr o28b6@x)) o28ba@g)) (gensym)) o28b6@x) (if (memv o28b8@t '(case-lambda)) (cons 'case-lambda (map (lambda (o28bc@x) (cons (car o28bc@x) (map o28b5@f (cdr o28bc@x)))) (cdr o28b6@x))) (if (memv o28b8@t '(lambda)) (cons* 'lambda (cadr o28b6@x) (map o28b5@f (cddr o28b6@x))) (if (memv o28b8@t '(letrec)) ((lambda (o28be@bindings o28bf@body*) ((lambda (o28c2@lhs* o28c3@rhs*) (cons* 'letrec (map list o28c2@lhs* (map o28b5@f o28c3@rhs*)) (map o28b5@f o28bf@body*))) (map car o28be@bindings) (map cadr o28be@bindings))) (cadr o28b6@x) (cddr o28b6@x)) (if (memv o28b8@t '(letrec*)) ((lambda (o28c6@bindings o28c7@body*) ((lambda (o28ca@lhs* o28cb@rhs*) (cons* 'letrec* (map list o28ca@lhs* (map o28b5@f o28cb@rhs*)) (map o28b5@f o28c7@body*))) (map car o28c6@bindings) (map cadr o28c6@bindings))) (cadr o28b6@x) (cddr o28b6@x)) (if (memv o28b8@t '(library-letrec*)) ((lambda (o28ce@name o28cf@x) ((lambda (o28d2@bindings o28d3@body*) ((lambda (o28d6@lhs* o28d7@lhs** o28d8@rhs*) (cons* 'library-letrec* o28ce@name (map list o28d6@lhs* o28d7@lhs** (map o28b5@f o28d8@rhs*)) (map o28b5@f o28d3@body*))) (map car o28d2@bindings) (map cadr o28d2@bindings) (map caddr o28d2@bindings))) (cadr o28cf@x) (cddr o28cf@x))) (cadr o28b6@x) (cdr o28b6@x)) (if (memv o28b8@t '(begin)) (cons 'begin (map o28b5@f (cdr o28b6@x))) (if (memv o28b8@t '(set!)) (list 'set! (cadr o28b6@x) (o28b5@f (caddr o28b6@x))) (if (memv o28b8@t '(primitive)) ((lambda (o28dc@op) ((lambda (o28de@t) (if o28de@t ((lambda (o28e0@loc) o28e0@loc) o28de@t) o28dc@op)) ((o289f@current-primitive-locations) o28dc@op))) (cadr o28b6@x)) (if (memv o28b8@t '(define)) o28b6@x (if (list? o28b6@x) (map o28b5@f o28b6@x) (error 'rewrite '"invalid form ~s ~s" o28b6@x (list? o28b6@x)))))))))))))) (car o28b6@x)) o28b6@x))) o28b5@f)) '#f))) (set! o28a5@expanded->core (lambda (o28e2@x) ((o28a3@rewriter '#f) o28e2@x))) (set! o28a7@compile-core-expr (lambda (o28e4@x) ((o28a3@rewriter '#f) o28e4@x))) (set! o28a9@pretty-print write) (set! o28ab@compile-core-expr-to-port (lambda (o28e6@x o28e7@p) (o28a9@pretty-print ((o28a3@rewriter '#f) o28e6@x) o28e7@p))) (begin (set! o28f0@o28ab@compile-core-expr-to-port o28ab@compile-core-expr-to-port) (set! o28ef@o28a9@pretty-print o28a9@pretty-print) (set! o28ee@o28a7@compile-core-expr o28a7@compile-core-expr) (set! o28ed@o28a5@expanded->core o28a5@expanded->core) (set! o28ec@o28a3@rewriter o28a3@rewriter) (set! o28eb@o28a1@mutable? o28a1@mutable?) (set! o28ea@o289f@current-primitive-locations o289f@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (o293f@make-collection o2941@current-library-collection o2947@o2942 o2949@o2944 o294b@o2943 o294e@library? o2950@make-library o2952@library-id o2954@library-name o2956@library-version o2958@library-imp* o295a@library-vis* o295c@library-inv* o295e@library-subst o2960@library-env o2962@library-visit-state o2964@library-invoke-state o2966@library-visit-code o2968@library-invoke-code o296a@library-visible? o296c@library-source-file-name o296e@set-library-id! o2970@set-library-name! o2972@set-library-version! o2974@set-library-imp*! o2976@set-library-vis*! o2978@set-library-inv*! o297a@set-library-subst! o297c@set-library-env! o297e@set-library-visit-state! o2980@set-library-invoke-state! o2982@set-library-visit-code! o2984@set-library-invoke-code! o2986@set-library-visible?! o2988@set-library-source-file-name! o298a@rp o298c@find-dependencies o298e@find-library-by o2990@library-path o2992@library-extensions o2994@library-name->file-name o2996@file-locator o2998@serialize-all o299a@current-precompiled-library-loader o299c@try-load-from-file o299e@library-loader o29a0@current-library-expander o29a2@external-pending-libraries o29a4@find-external-library o29a6@find-library-by-name o29a8@library-exists? o29aa@find-library-by-spec/die o29ac@label->binding-table o29ae@install-library-record o29b0@install-library o29b2@imported-label->binding o29b4@invoke-library o29b6@visit-library o29b8@invoke-library-by-spec o29ba@installed-libraries o29bc@library-spec) (begin (set! o293f@make-collection (lambda () ((lambda (o29bd@set) ((lambda (o29c0@set-cons) (begin (set! o29c0@set-cons (lambda (o29c5@x o29c6@ls) (if (memq o29c5@x o29c6@ls) o29c6@ls (cons o29c5@x o29c6@ls)))) (lambda o29c3 ((lambda (o29c4) (if (= o29c4 '0) (apply (lambda () o29bd@set) o29c3) (if (= o29c4 '1) (apply (lambda (o29c1@x) (set! o29bd@set (o29c0@set-cons o29c1@x o29bd@set))) o29c3) (error 'apply '"invalid arg count")))) (length o29c3))))) '#f)) '()))) (set! o2941@current-library-collection (o2899@o27c3@make-parameter (o293f@make-collection) (lambda (o29c9@x) (begin (if (not (procedure? o29c9@x)) (assertion-violation 'current-library-collection '"not a procedure" o29c9@x) (void)) o29c9@x)))) (set! o2947@o2942 (make-record-type-descriptor 'library '#f 'o2945 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! o2949@o2944 '#f) (set! o294b@o2943 (make-record-constructor-descriptor o2947@o2942 '#f o2949@o2944)) (set! o294e@library? (record-predicate o2947@o2942)) (set! o2950@make-library (record-constructor o294b@o2943)) (set! o2952@library-id (record-accessor o2947@o2942 '0)) (set! o2954@library-name (record-accessor o2947@o2942 '1)) (set! o2956@library-version (record-accessor o2947@o2942 '2)) (set! o2958@library-imp* (record-accessor o2947@o2942 '3)) (set! o295a@library-vis* (record-accessor o2947@o2942 '4)) (set! o295c@library-inv* (record-accessor o2947@o2942 '5)) (set! o295e@library-subst (record-accessor o2947@o2942 '6)) (set! o2960@library-env (record-accessor o2947@o2942 '7)) (set! o2962@library-visit-state (record-accessor o2947@o2942 '8)) (set! o2964@library-invoke-state (record-accessor o2947@o2942 '9)) (set! o2966@library-visit-code (record-accessor o2947@o2942 '10)) (set! o2968@library-invoke-code (record-accessor o2947@o2942 '11)) (set! o296a@library-visible? (record-accessor o2947@o2942 '12)) (set! o296c@library-source-file-name (record-accessor o2947@o2942 '13)) (set! o296e@set-library-id! (record-mutator o2947@o2942 '0)) (set! o2970@set-library-name! (record-mutator o2947@o2942 '1)) (set! o2972@set-library-version! (record-mutator o2947@o2942 '2)) (set! o2974@set-library-imp*! (record-mutator o2947@o2942 '3)) (set! o2976@set-library-vis*! (record-mutator o2947@o2942 '4)) (set! o2978@set-library-inv*! (record-mutator o2947@o2942 '5)) (set! o297a@set-library-subst! (record-mutator o2947@o2942 '6)) (set! o297c@set-library-env! (record-mutator o2947@o2942 '7)) (set! o297e@set-library-visit-state! (record-mutator o2947@o2942 '8)) (set! o2980@set-library-invoke-state! (record-mutator o2947@o2942 '9)) (set! o2982@set-library-visit-code! (record-mutator o2947@o2942 '10)) (set! o2984@set-library-invoke-code! (record-mutator o2947@o2942 '11)) (set! o2986@set-library-visible?! (record-mutator o2947@o2942 '12)) (set! o2988@set-library-source-file-name! (record-mutator o2947@o2942 '13)) (set! o298a@rp (o2896@o27bd@make-record-printer 'library (lambda (o29cb@x o29cc@p o29cd@wr) (begin (if (not (o294e@library? o29cb@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (o2956@library-version o29cb@x)) (o2954@library-name o29cb@x) (append (o2954@library-name o29cb@x) (list (o2956@library-version o29cb@x))))) o29cc@p))))) (set! o298c@find-dependencies (lambda (o29d1@ls) (if (null? o29d1@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! o298e@find-library-by (lambda (o29d3@pred) ((letrec ((o29d5@f (lambda (o29d7@ls) (if (null? o29d7@ls) '#f (if (o29d3@pred (car o29d7@ls)) (car o29d7@ls) (o29d5@f (cdr o29d7@ls))))))) o29d5@f) ((o2941@current-library-collection))))) (set! o2990@library-path (o2899@o27c3@make-parameter '(".") (lambda (o29d9@x) (if (and (list? o29d9@x) (for-all string? o29d9@x)) (map (lambda (o29db@x) o29db@x) o29d9@x) (assertion-violation 'library-path '"not a list of strings" o29d9@x))))) (set! o2992@library-extensions (o2899@o27c3@make-parameter '(".sls" ".ss" ".scm") (lambda (o29dd@x) (if (and (list? o29dd@x) (for-all string? o29dd@x)) (map (lambda (o29df@x) o29df@x) o29dd@x) (assertion-violation 'library-extensions '"not a list of strings" o29dd@x))))) (set! o2994@library-name->file-name (lambda (o29e1@x) (call-with-values (lambda () (open-string-output-port)) (lambda (o29e7@o29e4 o29e8@o29e6) ((lambda (o29eb@extract o29ec@p) ((lambda (o29f0@display-hex) (begin (set! o29f0@display-hex (lambda (o29f9@n) (if (<= '0 o29f9@n '9) (display o29f9@n o29ec@p) (display (integer->char (+ (char->integer '#\a) (- o29f9@n '10))) o29ec@p)))) (begin ((letrec ((o29f1@f (lambda (o29f3@ls) (if (not (null? o29f3@ls)) (begin (display '"/" o29ec@p) (for-each (lambda (o29f5@c) (if (or (char<=? '#\a o29f5@c '#\z) (char<=? '#\A o29f5@c '#\Z) (char<=? '#\0 o29f5@c '#\9) (memv o29f5@c '(#\- #\. #\_ #\~))) (display o29f5@c o29ec@p) (begin (display '"%" o29ec@p) ((lambda (o29f7@n) (begin (o29f0@display-hex (quotient o29f7@n '16)) (o29f0@display-hex (remainder o29f7@n '16)))) (char->integer o29f5@c))))) (string->list (symbol->string (car o29f3@ls)))) (o29f1@f (cdr o29f3@ls))) (void))))) o29f1@f) o29e1@x) (o29eb@extract)))) '#f)) o29e8@o29e6 o29e7@o29e4))))) (set! o2996@file-locator (o2899@o27c3@make-parameter (lambda (o29fb@x) ((lambda (o29fd@str) ((letrec ((o29ff@f (lambda (o2a01@ls o2a02@exts o2a03@failed-list) (if (null? o2a01@ls) ((lambda () ((lambda (o2a0f@o2a0a o2a11@o2a0c o2a13@o2a0b o2a16@o2a09 o2a18@make-library-resolution-condition o2a1a@o2a07 o2a1c@o2a08 o2a1e@library-resolution-condition? o2a20@condition-library o2a22@condition-files) (begin (set! o2a0f@o2a0a (make-record-type-descriptor '&library-resolution o4caa@o49f1@&condition-rtd 'o2a0d '#f '#f '#((immutable library) (immutable files)))) (set! o2a11@o2a0c '#f) (set! o2a13@o2a0b (make-record-constructor-descriptor o2a0f@o2a0a o4cab@o49f3@&condition-rcd o2a11@o2a0c)) (set! o2a16@o2a09 (record-predicate o2a0f@o2a0a)) (set! o2a18@make-library-resolution-condition (record-constructor o2a13@o2a0b)) (set! o2a1a@o2a07 (record-accessor o2a0f@o2a0a '0)) (set! o2a1c@o2a08 (record-accessor o2a0f@o2a0a '1)) (set! o2a1e@library-resolution-condition? (condition-predicate o2a0f@o2a0a)) (set! o2a20@condition-library (condition-accessor o2a0f@o2a0a o2a1a@o2a07)) (set! o2a22@condition-files (condition-accessor o2a0f@o2a0a o2a1c@o2a08)) (raise (condition (o4cca@o4a8b@make-error) (o4cec@o4ae7@make-who-condition 'expander) (o4cb0@o4a48@make-message-condition '"cannot locate library in library-path") (o2a18@make-library-resolution-condition o29fb@x (reverse o2a03@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? o2a02@exts) (o29ff@f (cdr o2a01@ls) (o2992@library-extensions) o2a03@failed-list) ((lambda (o2a23@name) (if (file-exists? o2a23@name) o2a23@name (o29ff@f o2a01@ls (cdr o2a02@exts) (cons o2a23@name o2a03@failed-list)))) (string-append (car o2a01@ls) o29fd@str (car o2a02@exts)))))))) o29ff@f) (o2990@library-path) (o2992@library-extensions) '())) (o2994@library-name->file-name o29fb@x))) (lambda (o2a25@f) (if (procedure? o2a25@f) o2a25@f (assertion-violation 'file-locator '"not a procedure" o2a25@f))))) (set! o2998@serialize-all (lambda (o2a27@serialize o2a28@compile) ((lambda (o2a2c@library-desc) (begin (set! o2a2c@library-desc (lambda (o2a2f@x) (list (o2952@library-id o2a2f@x) (o2954@library-name o2a2f@x)))) (for-each (lambda (o2a2d@x) (if (o296c@library-source-file-name o2a2d@x) (o2a27@serialize (o296c@library-source-file-name o2a2d@x) (list (o2952@library-id o2a2d@x) (o2954@library-name o2a2d@x) (o2956@library-version o2a2d@x) (map o2a2c@library-desc (o2958@library-imp* o2a2d@x)) (map o2a2c@library-desc (o295a@library-vis* o2a2d@x)) (map o2a2c@library-desc (o295c@library-inv* o2a2d@x)) (o295e@library-subst o2a2d@x) (o2960@library-env o2a2d@x) (o2a28@compile (o2966@library-visit-code o2a2d@x)) (o2a28@compile (o2968@library-invoke-code o2a2d@x)) (o296a@library-visible? o2a2d@x))) (void))) ((o2941@current-library-collection))))) '#f))) (set! o299a@current-precompiled-library-loader (o2899@o27c3@make-parameter (lambda (o2a31@filename o2a32@sk) '#f))) (set! o299c@try-load-from-file (lambda (o2a35@filename) ((o299a@current-precompiled-library-loader) o2a35@filename (lambda o2a5b ((lambda (o2a5c) (if (= o2a5c '11) (apply (lambda (o2a37@id o2a38@name o2a39@ver o2a3a@imp* o2a3b@vis* o2a3c@inv* o2a3d@exp-subst o2a3e@exp-env o2a3f@visit-proc o2a40@invoke-proc o2a41@visible?) ((letrec ((o2a4d@f (lambda (o2a4f@deps) (if (null? o2a4f@deps) (begin (o29b0@install-library o2a37@id o2a38@name o2a39@ver o2a3a@imp* o2a3b@vis* o2a3c@inv* o2a3d@exp-subst o2a3e@exp-env o2a3f@visit-proc o2a40@invoke-proc '#f '#f o2a41@visible? '#f) '#t) ((lambda (o2a51@d) ((lambda (o2a53@label o2a54@dname) ((lambda (o2a57@l) (if (and (o294e@library? o2a57@l) (eq? o2a53@label (o2952@library-id o2a57@l))) (o2a4d@f (cdr o2a4f@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" o2a38@name o2a54@dname o2a35@filename o2a57@l o2a53@label (o2952@library-id o2a57@l)) '#f))) (o29a6@find-library-by-name o2a54@dname))) (car o2a51@d) (cadr o2a51@d))) (car o2a4f@deps)))))) o2a4d@f) (append o2a3a@imp* o2a3b@vis* o2a3c@inv*))) o2a5b) (if (>= o2a5c '0) (apply (lambda o2a59@others '#f) o2a5b) (error 'apply '"invalid arg count")))) (length o2a5b)))))) (set! o299e@library-loader (o2899@o27c3@make-parameter (lambda (o2a5d@x) ((lambda (o2a5f@file-name) (if (not o2a5f@file-name) (assertion-violation '#f '"cannot file library" o2a5d@x) (or (o299c@try-load-from-file o2a5f@file-name) ((o29a0@current-library-expander) (o2898@o27c1@read-library-source-file o2a5f@file-name) o2a5f@file-name (lambda (o2a61@name) (if (not (fast-equal? o2a61@name o2a5d@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (o2a67@o2a64 o2a68@o2a66) ((lambda (o2a6b@e o2a6c@p) (begin (display '"expected to find library " o2a6c@p) (write o2a5d@x o2a6c@p) (display '" in file " o2a6c@p) (display o2a5f@file-name o2a6c@p) (display '", found " o2a6c@p) (write o2a61@name o2a6c@p) (display '" instead" o2a6c@p) (o2a6b@e))) o2a68@o2a66 o2a67@o2a64)))) (void))))))) ((o2996@file-locator) o2a5d@x))) (lambda (o2a6f@f) (if (procedure? o2a6f@f) o2a6f@f (assertion-violation 'library-locator '"not a procedure" o2a6f@f))))) (set! o29a0@current-library-expander (o2899@o27c3@make-parameter (lambda (o2a71@x) (assertion-violation 'library-expander '"not initialized")) (lambda (o2a73@f) (if (procedure? o2a73@f) o2a73@f (assertion-violation 'library-expander '"not a procedure" o2a73@f))))) (set! o29a2@external-pending-libraries (o2899@o27c3@make-parameter '())) (set! o29a4@find-external-library (lambda (o2a75@name) (begin (if (member o2a75@name (o29a2@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" o2a75@name) (void)) ((lambda (o2a7b@o2a78 o2a7c@o2a7a) ((lambda (o2a7f@swap) (dynamic-wind o2a7f@swap (lambda () (begin ((o299e@library-loader) o2a75@name) (or (o298e@find-library-by (lambda (o2a81@x) (fast-equal? (o2954@library-name o2a81@x) o2a75@name))) (assertion-violation '#f '"handling external library did not yield the correct library" o2a75@name)))) o2a7f@swap)) (lambda () ((lambda (o2a83@t) (begin (o2a7b@o2a78 o2a7c@o2a7a) (set! o2a7c@o2a7a o2a83@t))) (o2a7b@o2a78))))) o29a2@external-pending-libraries (cons o2a75@name (o29a2@external-pending-libraries)))))) (set! o29a6@find-library-by-name (lambda (o2a85@name) (or (o298e@find-library-by (lambda (o2a87@x) (fast-equal? (o2954@library-name o2a87@x) o2a85@name))) (o29a4@find-external-library o2a85@name)))) (set! o29a8@library-exists? (lambda (o2a89@name) (and (o298e@find-library-by (lambda (o2a8b@x) (fast-equal? (o2954@library-name o2a8b@x) o2a89@name))) '#t))) (set! o29aa@find-library-by-spec/die (lambda (o2a8d@spec) ((lambda (o2a8f@id) (or (o298e@find-library-by (lambda (o2a91@x) (eq? o2a8f@id (o2952@library-id o2a91@x)))) (assertion-violation '#f '"cannot find library with required spec" o2a8d@spec))) (car o2a8d@spec)))) (set! o29ac@label->binding-table (make-eq-hashtable)) (set! o29ae@install-library-record (lambda (o2a93@lib) (begin ((lambda (o2a95@exp-env) (for-each (lambda (o2a97@x) ((lambda (o2a99@label o2a9a@binding) ((lambda (o2a9d@binding) (begin (if (hashtable-ref o29ac@label->binding-table o2a99@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" o2a99@label (hashtable-ref o29ac@label->binding-table o2a99@label '#f) o2a9d@binding) (exit)) (void)) (hashtable-set! o29ac@label->binding-table o2a99@label o2a9d@binding))) ((lambda (o2a9f@t) (if (memv o2a9f@t '(global)) (cons 'global (cons o2a93@lib (cdr o2a9a@binding))) (if (memv o2a9f@t '(global-macro)) (cons 'global-macro (cons o2a93@lib (cdr o2a9a@binding))) (if (memv o2a9f@t '(global-macro!)) (cons 'global-macro! (cons o2a93@lib (cdr o2a9a@binding))) o2a9a@binding)))) (car o2a9a@binding)))) (car o2a97@x) (cdr o2a97@x))) o2a95@exp-env)) (o2960@library-env o2a93@lib)) ((o2941@current-library-collection) o2a93@lib)))) (set! o29b0@install-library (lambda (o2aa1@id o2aa2@name o2aa3@ver o2aa4@imp* o2aa5@vis* o2aa6@inv* o2aa7@exp-subst o2aa8@exp-env o2aa9@visit-proc o2aaa@invoke-proc o2aab@visit-code o2aac@invoke-code o2aad@visible? o2aae@source-file-name) ((lambda (o2abd@imp-lib* o2abe@vis-lib* o2abf@inv-lib*) (begin (if (not (and (symbol? o2aa1@id) (list? o2aa2@name) (list? o2aa3@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" o2aa1@id o2aa2@name o2aa3@ver) (void)) (if (o29a8@library-exists? o2aa2@name) (assertion-violation 'install-library '"library is already installed" o2aa2@name) (void)) ((lambda (o2ac3@lib) (o29ae@install-library-record o2ac3@lib)) (o2950@make-library o2aa1@id o2aa2@name o2aa3@ver o2abd@imp-lib* o2abe@vis-lib* o2abf@inv-lib* o2aa7@exp-subst o2aa8@exp-env o2aa9@visit-proc o2aaa@invoke-proc o2aab@visit-code o2aac@invoke-code o2aad@visible? o2aae@source-file-name)))) (map o29aa@find-library-by-spec/die o2aa4@imp*) (map o29aa@find-library-by-spec/die o2aa5@vis*) (map o29aa@find-library-by-spec/die o2aa6@inv*)))) (set! o29b2@imported-label->binding (lambda (o2ac5@lab) (hashtable-ref o29ac@label->binding-table o2ac5@lab '#f))) (set! o29b4@invoke-library (lambda (o2ac7@lib) ((lambda (o2ac9@invoke) (if (procedure? o2ac9@invoke) (begin (o2980@set-library-invoke-state! o2ac7@lib (lambda () (assertion-violation 'invoke '"circularity detected" o2ac7@lib))) (for-each o29b4@invoke-library (o295c@library-inv* o2ac7@lib)) (o2980@set-library-invoke-state! o2ac7@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" o2ac7@lib))) (o2ac9@invoke) (o2980@set-library-invoke-state! o2ac7@lib '#t)) (void))) (o2964@library-invoke-state o2ac7@lib)))) (set! o29b6@visit-library (lambda (o2acb@lib) ((lambda (o2acd@visit) (if (procedure? o2acd@visit) (begin (o297e@set-library-visit-state! o2acb@lib (lambda () (assertion-violation 'visit '"circularity detected" o2acb@lib))) (for-each o29b4@invoke-library (o295a@library-vis* o2acb@lib)) (o297e@set-library-visit-state! o2acb@lib (lambda () (assertion-violation 'invoke '"first visit did not return" o2acb@lib))) (o2acd@visit) (o297e@set-library-visit-state! o2acb@lib '#t)) (void))) (o2962@library-visit-state o2acb@lib)))) (set! o29b8@invoke-library-by-spec (lambda (o2acf@spec) (o29b4@invoke-library (o29aa@find-library-by-spec/die o2acf@spec)))) (set! o29ba@installed-libraries (lambda o2ad7 ((lambda (o2ad8) (if (= o2ad8 '1) (apply (lambda (o2ad1@all?) ((letrec ((o2ad3@f (lambda (o2ad5@ls) (if (null? o2ad5@ls) '() (if (or o2ad1@all? (o296a@library-visible? (car o2ad5@ls))) (cons (car o2ad5@ls) (o2ad3@f (cdr o2ad5@ls))) (o2ad3@f (cdr o2ad5@ls))))))) o2ad3@f) ((o2941@current-library-collection)))) o2ad7) (if (= o2ad8 '0) (apply (lambda () (o29ba@installed-libraries '#f)) o2ad7) (error 'apply '"invalid arg count")))) (length o2ad7)))) (set! o29bc@library-spec (lambda (o2ad9@x) (begin (if (not (o294e@library? o2ad9@x)) (assertion-violation 'library-spec '"not a library" o2ad9@x) (void)) (list (o2952@library-id o2ad9@x) (o2954@library-name o2ad9@x) (o2956@library-version o2ad9@x))))) (begin (set! o2b17@o29bc@library-spec o29bc@library-spec) (set! o2b16@o29ba@installed-libraries o29ba@installed-libraries) (set! o2b15@o29b8@invoke-library-by-spec o29b8@invoke-library-by-spec) (set! o2b14@o29b6@visit-library o29b6@visit-library) (set! o2b13@o29b4@invoke-library o29b4@invoke-library) (set! o2b12@o29b2@imported-label->binding o29b2@imported-label->binding) (set! o2b11@o29b0@install-library o29b0@install-library) (set! o2b10@o29ae@install-library-record o29ae@install-library-record) (set! o2b0f@o29ac@label->binding-table o29ac@label->binding-table) (set! o2b0e@o29aa@find-library-by-spec/die o29aa@find-library-by-spec/die) (set! o2b0d@o29a8@library-exists? o29a8@library-exists?) (set! o2b0c@o29a6@find-library-by-name o29a6@find-library-by-name) (set! o2b0b@o29a4@find-external-library o29a4@find-external-library) (set! o2b0a@o29a2@external-pending-libraries o29a2@external-pending-libraries) (set! o2b09@o29a0@current-library-expander o29a0@current-library-expander) (set! o2b08@o299e@library-loader o299e@library-loader) (set! o2b07@o299c@try-load-from-file o299c@try-load-from-file) (set! o2b06@o299a@current-precompiled-library-loader o299a@current-precompiled-library-loader) (set! o2b05@o2998@serialize-all o2998@serialize-all) (set! o2b04@o2996@file-locator o2996@file-locator) (set! o2b03@o2994@library-name->file-name o2994@library-name->file-name) (set! o2b02@o2992@library-extensions o2992@library-extensions) (set! o2b01@o2990@library-path o2990@library-path) (set! o2b00@o298e@find-library-by o298e@find-library-by) (set! o2aff@o298c@find-dependencies o298c@find-dependencies) (set! o2afe@o298a@rp o298a@rp) (set! o2afd@o2988@set-library-source-file-name! o2988@set-library-source-file-name!) (set! o2afc@o2986@set-library-visible?! o2986@set-library-visible?!) (set! o2afb@o2984@set-library-invoke-code! o2984@set-library-invoke-code!) (set! o2afa@o2982@set-library-visit-code! o2982@set-library-visit-code!) (set! o2af9@o2980@set-library-invoke-state! o2980@set-library-invoke-state!) (set! o2af8@o297e@set-library-visit-state! o297e@set-library-visit-state!) (set! o2af7@o297c@set-library-env! o297c@set-library-env!) (set! o2af6@o297a@set-library-subst! o297a@set-library-subst!) (set! o2af5@o2978@set-library-inv*! o2978@set-library-inv*!) (set! o2af4@o2976@set-library-vis*! o2976@set-library-vis*!) (set! o2af3@o2974@set-library-imp*! o2974@set-library-imp*!) (set! o2af2@o2972@set-library-version! o2972@set-library-version!) (set! o2af1@o2970@set-library-name! o2970@set-library-name!) (set! o2af0@o296e@set-library-id! o296e@set-library-id!) (set! o2aef@o296c@library-source-file-name o296c@library-source-file-name) (set! o2aee@o296a@library-visible? o296a@library-visible?) (set! o2aed@o2968@library-invoke-code o2968@library-invoke-code) (set! o2aec@o2966@library-visit-code o2966@library-visit-code) (set! o2aeb@o2964@library-invoke-state o2964@library-invoke-state) (set! o2aea@o2962@library-visit-state o2962@library-visit-state) (set! o2ae9@o2960@library-env o2960@library-env) (set! o2ae8@o295e@library-subst o295e@library-subst) (set! o2ae7@o295c@library-inv* o295c@library-inv*) (set! o2ae6@o295a@library-vis* o295a@library-vis*) (set! o2ae5@o2958@library-imp* o2958@library-imp*) (set! o2ae4@o2956@library-version o2956@library-version) (set! o2ae3@o2954@library-name o2954@library-name) (set! o2ae2@o2952@library-id o2952@library-id) (set! o2ae1@o2950@make-library o2950@make-library) (set! o2ae0@o294e@library? o294e@library?) (set! o2adf@o294b@o2943 o294b@o2943) (set! o2ade@o2949@o2944 o2949@o2944) (set! o2add@o2947@o2942 o2947@o2942) (set! o2adc@o2941@current-library-collection o2941@current-library-collection) (set! o2adb@o293f@make-collection o293f@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (o2b1a@build-global-define o2b8b@build-lambda o2b8d@build-case-lambda o2b8f@build-let o2bbd@build-sequence o2bbf@build-void o2bc1@build-letrec o2bc3@build-letrec* o2bc5@build-library-letrec* o2bc7@build-receive) (begin (set! o2b1a@build-global-define (lambda (o2bc8@x) (o2bbf@build-void))) (set! o2b8b@build-lambda (lambda (o2bca@ae o2bcb@vars o2bcc@exp) (list 'lambda o2bcb@vars o2bcc@exp))) (set! o2b8d@build-case-lambda (lambda (o2bd0@ae o2bd1@vars* o2bd2@exp*) ((lambda (o2bd7@build-error o2bd9@build-pred o2bdb@build-apply o2bdd@expand-case-lambda) (begin (set! o2bd7@build-error (lambda (o2c0e@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! o2bd9@build-pred (lambda (o2bf6@ae o2bf7@n o2bf8@vars) (call-with-values (lambda () ((letrec ((o2c00@f (lambda (o2c02@vars o2c03@count) (if (pair? o2c02@vars) (o2c00@f (cdr o2c02@vars) (+ o2c03@count '1)) (if (null? o2c02@vars) (values o2c03@count '=) (values o2c03@count '>=)))))) o2c00@f) o2bf8@vars '0)) (lambda (o2c06@o2bfd o2c07@o2bff) ((lambda (o2c0a@pred o2c0b@count) (list (list 'primitive o2c0a@pred) o2bf7@n (list 'quote o2c0b@count))) o2c07@o2bff o2c06@o2bfd))))) (set! o2bdb@build-apply (lambda (o2bee@ae o2bef@g o2bf0@vars o2bf1@exp) (list '(primitive apply) (o2b8b@build-lambda o2bee@ae o2bf0@vars o2bf1@exp) o2bef@g))) (set! o2bdd@expand-case-lambda (lambda (o2bde@ae o2bdf@vars o2be0@exp*) ((lambda (o2be4@g o2be5@n) (list 'lambda o2be4@g (o2b8f@build-let o2bde@ae (list o2be5@n) (list (list '(primitive length) o2be4@g)) ((letrec ((o2be8@f (lambda (o2bea@vars* o2beb@exp*) (if (null? o2bea@vars*) (o2bd7@build-error o2bde@ae) (list 'if (o2bd9@build-pred o2bde@ae o2be5@n (car o2bea@vars*)) (o2bdb@build-apply o2bde@ae o2be4@g (car o2bea@vars*) (car o2beb@exp*)) (o2be8@f (cdr o2bea@vars*) (cdr o2beb@exp*))))))) o2be8@f) o2bd1@vars* o2be0@exp*)))) (gensym) (gensym)))) (if (= (length o2bd2@exp*) '1) (o2b8b@build-lambda o2bd0@ae (car o2bd1@vars*) (car o2bd2@exp*)) (o2bdd@expand-case-lambda o2bd0@ae o2bd1@vars* o2bd2@exp*)))) '#f '#f '#f '#f))) (set! o2b8f@build-let (lambda (o2c10@ae o2c11@lhs* o2c12@rhs* o2c13@body) (cons (o2b8b@build-lambda o2c10@ae o2c11@lhs* o2c13@body) o2c12@rhs*))) (set! o2bbd@build-sequence (lambda (o2c18@ae o2c19@exps) ((letrec ((o2c1c@loop (lambda (o2c1e@exps) (if (null? (cdr o2c1e@exps)) (car o2c1e@exps) (if (equal? (car o2c1e@exps) (o2bbf@build-void)) (o2c1c@loop (cdr o2c1e@exps)) (cons 'begin o2c1e@exps)))))) o2c1c@loop) o2c19@exps))) (set! o2bbf@build-void (lambda () '((primitive void)))) (set! o2bc1@build-letrec (lambda (o2c20@ae o2c21@vars o2c22@val-exps o2c23@body-exp) (if (null? o2c21@vars) o2c23@body-exp (list 'letrec (map list o2c21@vars o2c22@val-exps) o2c23@body-exp)))) (set! o2bc3@build-letrec* (lambda (o2c28@ae o2c29@vars o2c2a@val-exps o2c2b@body-exp) (if (null? o2c29@vars) o2c2b@body-exp (o2b8f@build-let o2c28@ae o2c29@vars (map (lambda (o2c30@x) (list 'quote '#f)) o2c29@vars) (o2bbd@build-sequence o2c28@ae (append (map (lambda (o2c32@lhs o2c33@rhs) (list 'set! o2c32@lhs o2c33@rhs)) o2c29@vars o2c2a@val-exps) (list o2c2b@body-exp))))))) (set! o2bc5@build-library-letrec* (lambda (o2c36@ae o2c37@name o2c38@vars o2c39@locs o2c3a@val-exps o2c3b@body-exp) (list 'library-letrec* o2c37@name (map list o2c38@vars o2c39@locs o2c3a@val-exps) o2c3b@body-exp))) (set! o2bc7@build-receive (lambda (o2c42@ae o2c43@vars o2c44@producer o2c45@body*) (begin (display '"************** in ") (cons 'receive (cons o2c43@vars (cons o2c44@producer o2c45@body*)))))) (begin (set! o2c53@o2bc7@build-receive o2bc7@build-receive) (set! o2c52@o2bc5@build-library-letrec* o2bc5@build-library-letrec*) (set! o2c51@o2bc3@build-letrec* o2bc3@build-letrec*) (set! o2c50@o2bc1@build-letrec o2bc1@build-letrec) (set! o2c4f@o2bbf@build-void o2bbf@build-void) (set! o2c4e@o2bbd@build-sequence o2bbd@build-sequence) (set! o2c4d@o2b8f@build-let o2b8f@build-let) (set! o2c4c@o2b8d@build-case-lambda o2b8d@build-case-lambda) (set! o2c4b@o2b8b@build-lambda o2b8b@build-lambda) (set! o2c4a@o2b1a@build-global-define o2b1a@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (o2c62@file-options-macro o2c64@set-cons o2c66@set-union o2c6b@top-mark* o2c6d@top-marked? o2c6f@gen-lexical o2c71@gen-global o2c73@gen-label o2c75@gen-top-level-label o2c77@gen-define-label+loc o2c79@gen-define-label o2c7f@o2c7a o2c81@o2c7c o2c83@o2c7b o2c86@rib? o2c88@make-rib o2c8a@rib-sym* o2c8c@rib-mark** o2c8e@rib-label* o2c90@rib-sealed/freq o2c92@rib-cache o2c94@set-rib-sym*! o2c96@set-rib-mark**! o2c98@set-rib-label*! o2c9a@set-rib-sealed/freq! o2c9c@set-rib-cache! o2c9e@make-empty-rib o2ca0@extend-rib! o2ca2@extend-rib/nc! o2ca4@make-rib-map o2ca6@seal-rib! o2ca8@unseal-rib! o2caa@make-full-rib o2cb0@o2cab o2cb2@o2cad o2cb4@o2cac o2cb7@stx? o2cb9@make-stx o2cbb@stx-expr o2cbd@stx-mark* o2cbf@stx-subst* o2cc1@stx-ae* o2cc3@set-stx-expr! o2cc5@set-stx-mark*! o2cc7@set-stx-subst*! o2cc9@set-stx-ae*! o2ccb@rp o2ccd@datum->stx o2ccf@gen-mark o2cd1@anti-mark o2cd3@anti-mark? o2cd5@join-wraps o2cd7@mkstx o2cd9@add-mark o2cdb@add-subst o2cdd@syntax-kind? o2cdf@syntax-vector->list o2ce1@syntax-pair? o2ce3@syntax-vector? o2ce5@syntax-null? o2ce7@syntax-list? o2ce9@syntax-car o2ceb@syntax-cdr o2ced@syntax->list o2cef@id? o2cf1@id->sym o2cf3@same-marks? o2cf5@bound-id=? o2cf7@free-id=? o2cf9@valid-bound-ids? o2cfb@distinct-bound-ids? o2cfd@bound-id-member? o2cff@self-evaluating? o2d01@strip-annotations o2d03@strip o2d05@stx->datum o2d07@same-marks*? o2d09@id->label o2d0b@id->real-label o2d0d@label->binding o2d0f@make-binding o2d11@binding-type o2d13@binding-value o2d15@raise-unbound-error o2d17@syntax-type o2d25@sanitize-binding o2d27@make-variable-transformer o2d29@variable-transformer? o2d2b@variable-transformer-procedure o2d2d@make-eval-transformer o2e7e@parse-define o2e80@parse-define-syntax o2e82@scheme-stx-hashtable o2e84@scheme-stx o2e86@lexical-var o2e88@lexical-mutable? o2e8a@set-lexical-mutable! o2e8c@add-lexical o2e8e@add-lexicals o2e90@letrec-helper o2e92@letrec-transformer o2e94@letrec*-transformer o2e96@fluid-let-syntax-transformer o2e98@type-descriptor-transformer o2e9a@record-type-descriptor-transformer o2e9c@record-constructor-descriptor-transformer o2e9e@when-macro o2ea0@unless-macro o2ea2@if-transformer o2ea4@and-transformer o2ea6@or-transformer o2ea8@case-macro o2eaa@quote-transformer o2eac@case-lambda-transformer o2eae@lambda-transformer o2eb0@bless o2eb2@with-syntax-macro o2eb4@invalid-fmls-error o2eb6@let-macro o2eb8@let-values-macro o2eba@let*-values-macro o2ebc@trace-lambda-macro o2ebe@trace-define-macro o2ec0@trace-define-syntax-macro o2ec2@trace-let/rec-syntax o2ec4@trace-let-syntax-macro o2ec6@trace-letrec-syntax-macro o2ec8@guard-macro o2eca@define-enumeration-macro o2ecc@time-macro o2ece@delay-macro o2ed0@assert-macro o2ed2@endianness-macro o2ed4@identifier-syntax-macro o2ed6@do-macro o2ed8@let*-macro o2eda@or-macro o2edc@and-macro o2ede@cond-macro o2ee0@do-include o2ee2@include-macro o2ee4@include-into-macro o2ee6@syntax-rules-macro o2ee8@quasiquote-macro o2eea@quasisyntax-macro o2eec@define-struct-macro o2eee@define-record-type-macro o2ef0@define-condition-type-macro o2ef2@incorrect-usage-macro o2ef4@parameterize-macro o2ef6@foreign-call-transformer o2ef8@convert-pattern o2efa@syntax-dispatch o2efc@ellipsis? o2efe@underscore? o2f00@verify-literals o2f02@syntax-case-transformer o2f04@ellipsis-map o2f06@syntax-transformer o2f08@core-macro-transformer o2f0a@symbol-macro o2f0c@macro-transformer o2f0e@local-macro-transformer o2f10@do-macro-call o2f12@chi-macro o2f14@chi-local-macro o2f16@chi-global-macro o2f18@chi-expr* o2f1a@chi-application o2f1c@chi-expr o2f1e@chi-set! o2f20@verify-formals o2f22@chi-lambda-clause o2f24@chi-lambda-clause* o2f26@chi-defun o2f28@chi-rhs o2f2a@expand-interaction-rhs*/init* o2f2c@chi-rhs* o2f2e@find-bound=? o2f30@find-dups o2f32@chi-internal o2f34@parse-module o2f3a@o2f35 o2f3c@o2f37 o2f3e@o2f36 o2f41@module-interface? o2f43@make-module-interface o2f45@module-interface-first-mark o2f47@module-interface-exp-id-vec o2f49@module-interface-exp-lab-vec o2f4b@set-module-interface-first-mark! o2f4d@set-module-interface-exp-id-vec! o2f4f@set-module-interface-exp-lab-vec! o2f51@module-interface-exp-id* o2f53@chi-internal-module o2f55@chi-body* o2f57@expand-transformer o2f59@parse-exports o2f5b@parse-library-name o2f5d@parse-library o2f5f@parse-import-spec* o2f61@make-top-rib o2f63@make-collector o2f65@inv-collector o2f67@vis-collector o2f69@imp-collector o2f6b@chi-library-internal o2f6d@chi-interaction-expr o2f6f@library-body-expander o2f71@core-library-expander o2f73@parse-top-level-program o2f75@top-level-expander o2f7b@o2f76 o2f7d@o2f78 o2f7f@o2f77 o2f82@env? o2f84@make-env o2f86@env-names o2f88@env-labels o2f8a@env-itc o2f8c@set-env-names! o2f8e@set-env-labels! o2f90@set-env-itc! o2f92@rp o2f98@o2f93 o2f9a@o2f95 o2f9c@o2f94 o2f9f@interaction-env? o2fa1@make-interaction-env o2fa3@interaction-env-rib o2fa5@interaction-env-r o2fa7@interaction-env-locs o2fa9@set-interaction-env-rib! o2fab@set-interaction-env-r! o2fad@set-interaction-env-locs! o2faf@rp o2fb1@interaction-environment-symbols o2fb3@environment-bindings o2fb5@parse-binding o2fb7@environment? o2fb9@environment-symbols o2fbb@environment o2fbd@null-environment o2fbf@scheme-report-environment o2fc1@expand o2fc3@eval o2fc5@library-expander o2fc7@boot-library-expand o2fc9@rev-map-append o2fcb@build-exports o2fcd@make-export-subst o2fcf@make-export-env/macros o2fd1@generate-temporaries o2fd3@free-identifier=? o2fd5@bound-identifier=? o2fd7@make-source-condition o2fd9@extract-position-condition o2fdb@expression-position o2fdd@assertion-error o2fdf@syntax-error o2fe1@syntax-violation* o2fe3@syntax-violation o2fe5@identifier? o2fe7@datum->syntax o2fe9@syntax->datum o2feb@compile-r6rs-top-level o2fed@pre-compile-r6rs-top-level o2fef@interaction-environment o2ff1@top-level-context) (begin (set! o2c62@file-options-macro (lambda (o2ff2@x) ((lambda (o2ff5@valid-option?) (begin (set! o2ff5@valid-option? (lambda (o2ffe@x) (and (o2cef@id? o2ffe@x) (memq (o2cf1@id->sym o2ffe@x) '(no-fail no-create no-truncate))))) ((lambda (o2ff6@t) ((lambda (o2ff8@ls/false) (if (and o2ff8@ls/false (apply (lambda (o2ffa@opt*) (for-all o2ff5@valid-option? o2ffa@opt*)) o2ff8@ls/false)) (apply (lambda (o2ffc@opt*) (o2eb0@bless (list 'make-file-options (list 'quote o2ffc@opt*)))) o2ff8@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o2ff6@t))) (o2efa@syntax-dispatch o2ff6@t '(_ . each-any)))) o2ff2@x))) '#f))) (set! o2c64@set-cons (lambda (o3000@x o3001@ls) (if (memq o3000@x o3001@ls) o3001@ls (cons o3000@x o3001@ls)))) (set! o2c66@set-union (lambda (o3004@ls1 o3005@ls2) (if (null? o3004@ls1) o3005@ls2 (if (memq (car o3004@ls1) o3005@ls2) (o2c66@set-union (cdr o3004@ls1) o3005@ls2) (cons (car o3004@ls1) (o2c66@set-union (cdr o3004@ls1) o3005@ls2)))))) (set! o2c6b@top-mark* '(top)) (set! o2c6d@top-marked? (lambda (o3008@m*) (memq 'top o3008@m*))) (set! o2c6f@gen-lexical (lambda (o300a@sym) (if (symbol? o300a@sym) (gensym o300a@sym) (if (o2cb7@stx? o300a@sym) (o2c6f@gen-lexical (o2cf1@id->sym o300a@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" o300a@sym))))) (set! o2c71@gen-global (lambda (o300c@x) (o2c6f@gen-lexical o300c@x))) (set! o2c73@gen-label (lambda (o300e@_) (gensym))) (set! o2c75@gen-top-level-label (lambda (o3010@id o3011@rib) ((lambda (o3015@find) (begin (set! o3015@find (lambda (o3020@sym o3021@mark* o3022@sym* o3023@mark** o3024@label*) (and (pair? o3022@sym*) (if (and (eq? o3020@sym (car o3022@sym*)) (o2cf3@same-marks? o3021@mark* (car o3023@mark**))) (car o3024@label*) (o3015@find o3020@sym o3021@mark* (cdr o3022@sym*) (cdr o3023@mark**) (cdr o3024@label*)))))) ((lambda (o3016@sym o3017@mark*) ((lambda (o301a@sym*) ((lambda (o301c@t) (if o301c@t ((lambda (o301e@label) (if (o2b12@o29b2@imported-label->binding o301e@label) (gensym) o301e@label)) o301c@t) (gensym))) (and (memq o3016@sym (o2c8a@rib-sym* o3011@rib)) (o3015@find o3016@sym o3017@mark* o301a@sym* (o2c8c@rib-mark** o3011@rib) (o2c8e@rib-label* o3011@rib))))) (o2c8a@rib-sym* o3011@rib))) (o2cf1@id->sym o3010@id) (o2cbd@stx-mark* o3010@id)))) '#f))) (set! o2c77@gen-define-label+loc (lambda (o302a@id o302b@rib) ((lambda (o302e@t) (if o302e@t ((lambda (o3030@env) ((lambda (o3032@label o3033@locs) (values o3032@label ((lambda (o3036@t) (if o3036@t (cdr o3036@t) ((lambda (o3038@loc) (begin (o2fad@set-interaction-env-locs! o3030@env (cons (cons o3032@label o3038@loc) o3033@locs)) o3038@loc)) (o2c6f@gen-lexical o302a@id)))) (assq o3032@label o3033@locs)))) (o2c75@gen-top-level-label o302a@id o302b@rib) (o2fa7@interaction-env-locs o3030@env))) o302e@t) (values (gensym) (o2c6f@gen-lexical o302a@id)))) (o2ff1@top-level-context)))) (set! o2c79@gen-define-label (lambda (o303a@id o303b@rib) (if (o2ff1@top-level-context) (o2c75@gen-top-level-label o303a@id o303b@rib) (gensym)))) (set! o2c7f@o2c7a (make-record-type-descriptor 'rib '#f 'o2c7d '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! o2c81@o2c7c '#f) (set! o2c83@o2c7b (make-record-constructor-descriptor o2c7f@o2c7a '#f o2c81@o2c7c)) (set! o2c86@rib? (record-predicate o2c7f@o2c7a)) (set! o2c88@make-rib (record-constructor o2c83@o2c7b)) (set! o2c8a@rib-sym* (record-accessor o2c7f@o2c7a '0)) (set! o2c8c@rib-mark** (record-accessor o2c7f@o2c7a '1)) (set! o2c8e@rib-label* (record-accessor o2c7f@o2c7a '2)) (set! o2c90@rib-sealed/freq (record-accessor o2c7f@o2c7a '3)) (set! o2c92@rib-cache (record-accessor o2c7f@o2c7a '4)) (set! o2c94@set-rib-sym*! (record-mutator o2c7f@o2c7a '0)) (set! o2c96@set-rib-mark**! (record-mutator o2c7f@o2c7a '1)) (set! o2c98@set-rib-label*! (record-mutator o2c7f@o2c7a '2)) (set! o2c9a@set-rib-sealed/freq! (record-mutator o2c7f@o2c7a '3)) (set! o2c9c@set-rib-cache! (record-mutator o2c7f@o2c7a '4)) (set! o2c9e@make-empty-rib (lambda () (o2c88@make-rib '() '() '() '#f '#f))) (set! o2ca0@extend-rib! (lambda (o303e@rib o303f@id o3040@label) ((lambda (o3045@find) (begin (set! o3045@find (lambda (o3052@sym o3053@mark* o3054@sym* o3055@mark** o3056@label*) (and (pair? o3054@sym*) (if (and (eq? o3052@sym (car o3054@sym*)) (o2cf3@same-marks? o3053@mark* (car o3055@mark**))) o3056@label* (o3045@find o3052@sym o3053@mark* (cdr o3054@sym*) (cdr o3055@mark**) (cdr o3056@label*)))))) (begin (if (o2c90@rib-sealed/freq o303e@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" o303e@rib) (void)) ((lambda (o3046@sym o3047@mark*) ((lambda (o304a@sym*) ((lambda (o304c@t) (if o304c@t ((lambda (o304e@p) (if (not (eq? o3040@label (car o304e@p))) (if (o2ff1@top-level-context) (set-car! o304e@p o3040@label) (o2fe3@syntax-violation '#f '"multiple definitions of identifier" o303f@id)) (void))) o304c@t) (begin (if (o2c92@rib-cache o303e@rib) (hashtable-update! (o2c92@rib-cache o303e@rib) o3046@sym (lambda (o3050@e) (cons (cons o3047@mark* o3040@label) o3050@e)) '()) (void)) (o2c94@set-rib-sym*! o303e@rib (cons o3046@sym o304a@sym*)) (o2c96@set-rib-mark**! o303e@rib (cons o3047@mark* (o2c8c@rib-mark** o303e@rib))) (o2c98@set-rib-label*! o303e@rib (cons o3040@label (o2c8e@rib-label* o303e@rib)))))) (and (memq o3046@sym (o2c8a@rib-sym* o303e@rib)) (o3045@find o3046@sym o3047@mark* o304a@sym* (o2c8c@rib-mark** o303e@rib) (o2c8e@rib-label* o303e@rib))))) (o2c8a@rib-sym* o303e@rib))) (o2cf1@id->sym o303f@id) (o2cbd@stx-mark* o303f@id))))) '#f))) (set! o2ca2@extend-rib/nc! (lambda (o305c@rib o305d@id o305e@label) ((lambda (o3062@sym o3063@mark*) ((lambda (o3066@sym*) (begin (if (o2c92@rib-cache o305c@rib) (hashtable-update! (o2c92@rib-cache o305c@rib) o3062@sym (lambda (o3068@e) (cons (cons o3063@mark* o305e@label) o3068@e)) '()) (void)) (o2c94@set-rib-sym*! o305c@rib (cons o3062@sym o3066@sym*)) (o2c96@set-rib-mark**! o305c@rib (cons o3063@mark* (o2c8c@rib-mark** o305c@rib))) (o2c98@set-rib-label*! o305c@rib (cons o305e@label (o2c8e@rib-label* o305c@rib))))) (o2c8a@rib-sym* o305c@rib))) (o2cf1@id->sym o305d@id) (o2cbd@stx-mark* o305d@id)))) (set! o2ca4@make-rib-map (lambda (o306a@sym*) ((lambda (o306c@ht) ((letrec ((o306e@f (lambda (o3070@i o3071@sym*) (if (null? o3071@sym*) o306c@ht (begin (hashtable-update! o306c@ht (car o3071@sym*) (lambda (o3074@x) (cons o3070@i o3074@x)) '()) (o306e@f (+ o3070@i '1) (cdr o3071@sym*))))))) o306e@f) '0 o306a@sym*)) (make-eq-hashtable)))) (set! o2ca6@seal-rib! (lambda (o3076@rib) ((lambda (o3078@sym*) (if (not (null? o3078@sym*)) (begin (o2c94@set-rib-sym*! o3076@rib (list->vector o3078@sym*)) (o2c96@set-rib-mark**! o3076@rib (list->vector (o2c8c@rib-mark** o3076@rib))) (o2c98@set-rib-label*! o3076@rib (list->vector (o2c8e@rib-label* o3076@rib))) (o2c9a@set-rib-sealed/freq! o3076@rib (o2ca4@make-rib-map o3078@sym*))) (void))) (o2c8a@rib-sym* o3076@rib)))) (set! o2ca8@unseal-rib! (lambda (o307a@rib) (if (o2c90@rib-sealed/freq o307a@rib) (begin (o2c9a@set-rib-sealed/freq! o307a@rib '#f) (o2c94@set-rib-sym*! o307a@rib (vector->list (o2c8a@rib-sym* o307a@rib))) (o2c96@set-rib-mark**! o307a@rib (vector->list (o2c8c@rib-mark** o307a@rib))) (o2c98@set-rib-label*! o307a@rib (vector->list (o2c8e@rib-label* o307a@rib)))) (void)))) (set! o2caa@make-full-rib (lambda (o307c@id* o307d@label*) ((lambda (o3080@r) (begin (o2ca6@seal-rib! o3080@r) o3080@r)) (o2c88@make-rib (map o2cf1@id->sym o307c@id*) (map o2cbd@stx-mark* o307c@id*) o307d@label* '#f '#f)))) (set! o2cb0@o2cab (make-record-type-descriptor 'stx '#f 'o2cae '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! o2cb2@o2cad '#f) (set! o2cb4@o2cac (make-record-constructor-descriptor o2cb0@o2cab '#f o2cb2@o2cad)) (set! o2cb7@stx? (record-predicate o2cb0@o2cab)) (set! o2cb9@make-stx (record-constructor o2cb4@o2cac)) (set! o2cbb@stx-expr (record-accessor o2cb0@o2cab '0)) (set! o2cbd@stx-mark* (record-accessor o2cb0@o2cab '1)) (set! o2cbf@stx-subst* (record-accessor o2cb0@o2cab '2)) (set! o2cc1@stx-ae* (record-accessor o2cb0@o2cab '3)) (set! o2cc3@set-stx-expr! (record-mutator o2cb0@o2cab '0)) (set! o2cc5@set-stx-mark*! (record-mutator o2cb0@o2cab '1)) (set! o2cc7@set-stx-subst*! (record-mutator o2cb0@o2cab '2)) (set! o2cc9@set-stx-ae*! (record-mutator o2cb0@o2cab '3)) (set! o2ccb@rp (o2896@o27bd@make-record-printer 'stx (lambda (o3082@x o3083@p o3084@wr) (begin (display '"#<syntax " o3083@p) (write (o2d05@stx->datum o3082@x) o3083@p) ((lambda (o3088@expr) (if (o288e@o27ad@annotation? o3088@expr) ((lambda (o308a@src) (if (pair? o308a@src) (begin (display '" [" o3083@p) (display (cdr o308a@src) o3083@p) (display '" of " o3083@p) (display (car o308a@src) o3083@p) (display '"]" o3083@p)) (void))) (o288f@o27af@annotation-source o3088@expr)) (void))) (o2cbb@stx-expr o3082@x)) (display '">" o3083@p))))) (set! o2ccd@datum->stx (lambda (o308c@id o308d@datum) (o2cb9@make-stx o308d@datum (o2cbd@stx-mark* o308c@id) (o2cbf@stx-subst* o308c@id) (o2cc1@stx-ae* o308c@id)))) (set! o2ccf@gen-mark (lambda () (string '#\m))) (set! o2cd1@anti-mark '#f) (set! o2cd3@anti-mark? not) (set! o2cd5@join-wraps (lambda (o3090@m1* o3091@s1* o3092@ae1* o3093@e) ((lambda (o3099@cancel) (begin (set! o3099@cancel (lambda (o30a0@ls1 o30a1@ls2) ((letrec ((o30a4@f (lambda (o30a6@x o30a7@ls1) (if (null? o30a7@ls1) (cdr o30a1@ls2) (cons o30a6@x (o30a4@f (car o30a7@ls1) (cdr o30a7@ls1))))))) o30a4@f) (car o30a0@ls1) (cdr o30a0@ls1)))) ((lambda (o309a@m2* o309b@s2* o309c@ae2*) (if (and (not (null? o3090@m1*)) (not (null? o309a@m2*)) (o2cd3@anti-mark? (car o309a@m2*))) (values (o3099@cancel o3090@m1* o309a@m2*) (o3099@cancel o3091@s1* o309b@s2*) (o3099@cancel o3092@ae1* o309c@ae2*)) (values (append o3090@m1* o309a@m2*) (append o3091@s1* o309b@s2*) (append o3092@ae1* o309c@ae2*)))) (o2cbd@stx-mark* o3093@e) (o2cbf@stx-subst* o3093@e) (o2cc1@stx-ae* o3093@e)))) '#f))) (set! o2cd7@mkstx (lambda (o30aa@e o30ab@m* o30ac@s* o30ad@ae*) (if (and (o2cb7@stx? o30aa@e) (not (o2c6d@top-marked? o30ab@m*))) (call-with-values (lambda () (o2cd5@join-wraps o30ab@m* o30ac@s* o30ad@ae* o30aa@e)) (lambda (o30b8@o30b3 o30b9@o30b5 o30ba@o30b7) ((lambda (o30be@ae* o30bf@s* o30c0@m*) (o2cb9@make-stx (o2cbb@stx-expr o30aa@e) o30c0@m* o30bf@s* o30be@ae*)) o30ba@o30b7 o30b9@o30b5 o30b8@o30b3))) (o2cb9@make-stx o30aa@e o30ab@m* o30ac@s* o30ad@ae*)))) (set! o2cd9@add-mark (lambda (o30c4@m o30c5@e o30c6@ae) (o2cd7@mkstx o30c5@e (list o30c4@m) '(shift) (list o30c6@ae)))) (set! o2cdb@add-subst (lambda (o30ca@subst o30cb@e) (o2cd7@mkstx o30cb@e '() (list o30ca@subst) '()))) (set! o2cdd@syntax-kind? (lambda (o30ce@x o30cf@p?) (if (o2cb7@stx? o30ce@x) (o2cdd@syntax-kind? (o2cbb@stx-expr o30ce@x) o30cf@p?) (if (o288e@o27ad@annotation? o30ce@x) (o2cdd@syntax-kind? (o2890@o27b1@annotation-expression o30ce@x) o30cf@p?) (o30cf@p? o30ce@x))))) (set! o2cdf@syntax-vector->list (lambda (o30d2@x) (if (o2cb7@stx? o30d2@x) ((lambda (o30d4@ls o30d5@m* o30d6@s* o30d7@ae*) (map (lambda (o30dc@x) (o2cd7@mkstx o30dc@x o30d5@m* o30d6@s* o30d7@ae*)) o30d4@ls)) (o2cdf@syntax-vector->list (o2cbb@stx-expr o30d2@x)) (o2cbd@stx-mark* o30d2@x) (o2cbf@stx-subst* o30d2@x) (o2cc1@stx-ae* o30d2@x)) (if (o288e@o27ad@annotation? o30d2@x) (o2cdf@syntax-vector->list (o2890@o27b1@annotation-expression o30d2@x)) (if (vector? o30d2@x) (vector->list o30d2@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" o30d2@x)))))) (set! o2ce1@syntax-pair? (lambda (o30de@x) (o2cdd@syntax-kind? o30de@x pair?))) (set! o2ce3@syntax-vector? (lambda (o30e0@x) (o2cdd@syntax-kind? o30e0@x vector?))) (set! o2ce5@syntax-null? (lambda (o30e2@x) (o2cdd@syntax-kind? o30e2@x null?))) (set! o2ce7@syntax-list? (lambda (o30e4@x) (or (o2ce5@syntax-null? o30e4@x) (and (o2ce1@syntax-pair? o30e4@x) (o2ce7@syntax-list? (o2ceb@syntax-cdr o30e4@x)))))) (set! o2ce9@syntax-car (lambda (o30e6@x) (if (o2cb7@stx? o30e6@x) (o2cd7@mkstx (o2ce9@syntax-car (o2cbb@stx-expr o30e6@x)) (o2cbd@stx-mark* o30e6@x) (o2cbf@stx-subst* o30e6@x) (o2cc1@stx-ae* o30e6@x)) (if (o288e@o27ad@annotation? o30e6@x) (o2ce9@syntax-car (o2890@o27b1@annotation-expression o30e6@x)) (if (pair? o30e6@x) (car o30e6@x) (assertion-violation 'syntax-car '"BUG: not a pair" o30e6@x)))))) (set! o2ceb@syntax-cdr (lambda (o30e8@x) (if (o2cb7@stx? o30e8@x) (o2cd7@mkstx (o2ceb@syntax-cdr (o2cbb@stx-expr o30e8@x)) (o2cbd@stx-mark* o30e8@x) (o2cbf@stx-subst* o30e8@x) (o2cc1@stx-ae* o30e8@x)) (if (o288e@o27ad@annotation? o30e8@x) (o2ceb@syntax-cdr (o2890@o27b1@annotation-expression o30e8@x)) (if (pair? o30e8@x) (cdr o30e8@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" o30e8@x)))))) (set! o2ced@syntax->list (lambda (o30ea@x) (if (o2ce1@syntax-pair? o30ea@x) (cons (o2ce9@syntax-car o30ea@x) (o2ced@syntax->list (o2ceb@syntax-cdr o30ea@x))) (if (o2ce5@syntax-null? o30ea@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" o30ea@x))))) (set! o2cef@id? (lambda (o30ec@x) (and (o2cb7@stx? o30ec@x) (symbol? (o2cbb@stx-expr o30ec@x))))) (set! o2cf1@id->sym (lambda (o30ee@x) (o2cbb@stx-expr o30ee@x))) (set! o2cf3@same-marks? (lambda (o30f0@x o30f1@y) (or (and (null? o30f0@x) (null? o30f1@y)) (and (pair? o30f0@x) (pair? o30f1@y) (eq? (car o30f0@x) (car o30f1@y)) (o2cf3@same-marks? (cdr o30f0@x) (cdr o30f1@y)))))) (set! o2cf5@bound-id=? (lambda (o30f4@x o30f5@y) (and (eq? (o2cf1@id->sym o30f4@x) (o2cf1@id->sym o30f5@y)) (o2cf3@same-marks? (o2cbd@stx-mark* o30f4@x) (o2cbd@stx-mark* o30f5@y))))) (set! o2cf7@free-id=? (lambda (o30f8@i o30f9@j) ((lambda (o30fc@t0 o30fd@t1) (if (or o30fc@t0 o30fd@t1) (eq? o30fc@t0 o30fd@t1) (eq? (o2cf1@id->sym o30f8@i) (o2cf1@id->sym o30f9@j)))) (o2d0b@id->real-label o30f8@i) (o2d0b@id->real-label o30f9@j)))) (set! o2cf9@valid-bound-ids? (lambda (o3100@id*) (and (for-all o2cef@id? o3100@id*) (o2cfb@distinct-bound-ids? o3100@id*)))) (set! o2cfb@distinct-bound-ids? (lambda (o3102@id*) (or (null? o3102@id*) (and (not (o2cfd@bound-id-member? (car o3102@id*) (cdr o3102@id*))) (o2cfb@distinct-bound-ids? (cdr o3102@id*)))))) (set! o2cfd@bound-id-member? (lambda (o3104@id o3105@id*) (and (pair? o3105@id*) (or (o2cf5@bound-id=? o3104@id (car o3105@id*)) (o2cfd@bound-id-member? o3104@id (cdr o3105@id*)))))) (set! o2cff@self-evaluating? (lambda (o3108@x) (or (number? o3108@x) (string? o3108@x) (char? o3108@x) (boolean? o3108@x) (regexp? o3108@x) (bytevector? o3108@x)))) (set! o2d01@strip-annotations (lambda (o310a@x) (if (pair? o310a@x) (cons (o2d01@strip-annotations (car o310a@x)) (o2d01@strip-annotations (cdr o310a@x))) (if (vector? o310a@x) (vector-map o2d01@strip-annotations o310a@x) (if (o288e@o27ad@annotation? o310a@x) (o288d@o27ab@annotation-stripped o310a@x) o310a@x))))) (set! o2d03@strip (lambda (o310c@x o310d@m*) (if (o2c6d@top-marked? o310d@m*) (if (or (o288e@o27ad@annotation? o310c@x) (and (pair? o310c@x) (o288e@o27ad@annotation? (car o310c@x))) (and (vector? o310c@x) (> (vector-length o310c@x) '0) (o288e@o27ad@annotation? (vector-ref o310c@x '0)))) (o2d01@strip-annotations o310c@x) o310c@x) ((letrec ((o3110@f (lambda (o3112@x) (if (o2cb7@stx? o3112@x) (o2d03@strip (o2cbb@stx-expr o3112@x) (o2cbd@stx-mark* o3112@x)) (if (o288e@o27ad@annotation? o3112@x) (o288d@o27ab@annotation-stripped o3112@x) (if (pair? o3112@x) ((lambda (o3114@a o3115@d) (if (and (eq? o3114@a (car o3112@x)) (eq? o3115@d (cdr o3112@x))) o3112@x (cons o3114@a o3115@d))) (o3110@f (car o3112@x)) (o3110@f (cdr o3112@x))) (if (vector? o3112@x) ((lambda (o3118@old) ((lambda (o311a@new) (if (for-all eq? o3118@old o311a@new) o3112@x (list->vector o311a@new))) (map o3110@f o3118@old))) (vector->list o3112@x)) o3112@x))))))) o3110@f) o310c@x)))) (set! o2d05@stx->datum (lambda (o311c@x) (o2d03@strip o311c@x '()))) (set! o2d07@same-marks*? (lambda (o311e@mark* o311f@mark** o3120@si) (if (null? o3120@si) '#f (if (o2cf3@same-marks? o311e@mark* (vector-ref o311f@mark** (car o3120@si))) (car o3120@si) (o2d07@same-marks*? o311e@mark* o311f@mark** (cdr o3120@si)))))) (set! o2d09@id->label (lambda (o3124@id) (or (o2d0b@id->real-label o3124@id) ((lambda (o3126@t) (if o3126@t ((lambda (o3128@env) ((lambda (o312a@rib) (call-with-values (lambda () (o2c77@gen-define-label+loc o3124@id o312a@rib)) (lambda (o3130@o312d o3131@o312f) ((lambda (o3134@loc_ o3135@lab) (begin (o2ca0@extend-rib! o312a@rib o3124@id o3135@lab) o3135@lab)) o3131@o312f o3130@o312d)))) (o2fa3@interaction-env-rib o3128@env))) o3126@t) '#f)) (o2ff1@top-level-context))))) (set! o2d0b@id->real-label (lambda (o3138@id) ((lambda (o313a@sym) ((letrec ((o313c@search (lambda (o313e@subst* o313f@mark*) (if (null? o313e@subst*) '#f (if (eq? (car o313e@subst*) 'shift) (o313c@search (cdr o313e@subst*) (cdr o313f@mark*)) ((lambda (o3142@rib) ((lambda (o3144@t) (if o3144@t ((lambda (o3146@ht) ((lambda (o3148@si) ((lambda (o314a@i) (if o314a@i (vector-ref (o2c8e@rib-label* o3142@rib) o314a@i) (o313c@search (cdr o313e@subst*) o313f@mark*))) (and o3148@si (o2d07@same-marks*? o313f@mark* (o2c8c@rib-mark** o3142@rib) (reverse o3148@si))))) (hashtable-ref o3146@ht o313a@sym '#f))) o3144@t) ((letrec ((o314c@f (lambda (o314e@sym* o314f@mark** o3150@label*) (if (null? o314e@sym*) (o313c@search (cdr o313e@subst*) o313f@mark*) (if (and (eq? (car o314e@sym*) o313a@sym) (o2cf3@same-marks? (car o314f@mark**) o313f@mark*)) (car o3150@label*) (o314c@f (cdr o314e@sym*) (cdr o314f@mark**) (cdr o3150@label*))))))) o314c@f) (o2c8a@rib-sym* o3142@rib) (o2c8c@rib-mark** o3142@rib) (o2c8e@rib-label* o3142@rib)))) (o2c90@rib-sealed/freq o3142@rib))) (car o313e@subst*))))))) o313c@search) (o2cbf@stx-subst* o3138@id) (o2cbd@stx-mark* o3138@id))) (o2cf1@id->sym o3138@id)))) (set! o2d0d@label->binding (lambda (o3154@x o3155@r) ((lambda (o3158@t) (if o3158@t ((lambda (o315a@b) (if (and (pair? o315a@b) (eq? (car o315a@b) '$core-rtd)) (cons '$rtd (map o2eb0@bless (cdr o315a@b))) (if (and (pair? o315a@b) (eq? (car o315a@b) 'global-rtd)) ((lambda (o315c@lib o315d@loc) (cons '$rtd (symbol-value o315d@loc))) (cadr o315a@b) (cddr o315a@b)) o315a@b))) o3158@t) ((lambda (o3160@t) (if o3160@t (cdr o3160@t) ((lambda (o3162@t) (if o3162@t ((lambda (o3164@env) ((lambda (o3166@t) (if o3166@t ((lambda (o3168@p) (cons* 'lexical (cdr o3168@p) '#f)) o3166@t) '(displaced-lexical . #f))) (assq o3154@x (o2fa7@interaction-env-locs o3164@env)))) o3162@t) '(displaced-lexical . #f))) (o2ff1@top-level-context)))) (assq o3154@x o3155@r)))) (o2b12@o29b2@imported-label->binding o3154@x)))) (set! o2d0f@make-binding cons) (set! o2d11@binding-type car) (set! o2d13@binding-value cdr) (set! o2d15@raise-unbound-error (lambda (o316a@id) (o2fe1@syntax-violation* '#f '"unbound identifier" o316a@id (o4d1a@o4b60@make-undefined-violation)))) (set! o2d17@syntax-type (lambda (o316c@e o316d@r) (if (o2cef@id? o316c@e) ((lambda (o3170@id) ((lambda (o3172@label) ((lambda (o3174@b) ((lambda (o3176@type) ((lambda () (begin (if (not o3172@label) (o2d15@raise-unbound-error o3170@id) (void)) ((lambda (o3178@t) (if (memv o3178@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values o3176@type (o2d13@binding-value o3174@b) o3170@id) (values 'other '#f '#f))) o3176@type))))) (o2d11@binding-type o3174@b))) (o2d0d@label->binding o3172@label o316d@r))) (o2d09@id->label o3170@id))) o316c@e) (if (o2ce1@syntax-pair? o316c@e) ((lambda (o317a@id) (if (o2cef@id? o317a@id) ((lambda (o317c@label) ((lambda (o317e@b) ((lambda (o3180@type) ((lambda () (begin (if (not o317c@label) (o2d15@raise-unbound-error o317a@id) (void)) ((lambda (o3182@t) (if (memv o3182@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values o3180@type (o2d13@binding-value o317e@b) o317a@id) (values 'call '#f '#f))) o3180@type))))) (o2d11@binding-type o317e@b))) (o2d0d@label->binding o317c@label o316d@r))) (o2d09@id->label o317a@id)) (values 'call '#f '#f))) (o2ce9@syntax-car o316c@e)) ((lambda (o3184@d) (if (o2cff@self-evaluating? o3184@d) (values 'constant o3184@d '#f) (values 'other '#f '#f))) (o2d05@stx->datum o316c@e)))))) (set! o2d25@sanitize-binding (lambda (o3186@x o3187@src) (if (procedure? o3186@x) (cons* 'local-macro o3186@x o3187@src) (if (and (pair? o3186@x) (eq? (car o3186@x) 'macro!) (procedure? (cdr o3186@x))) (cons* 'local-macro! (cdr o3186@x) o3187@src) (if (and (pair? o3186@x) (eq? (car o3186@x) '$rtd)) o3186@x (assertion-violation 'expand '"invalid transformer" o3186@x)))))) (set! o2d27@make-variable-transformer (lambda (o318a@x) (if (procedure? o318a@x) (cons 'macro! o318a@x) (assertion-violation 'make-variable-transformer '"not a procedure" o318a@x)))) (set! o2d29@variable-transformer? (lambda (o318c@x) (and (pair? o318c@x) (eq? (car o318c@x) 'macro!) (procedure? (cdr o318c@x))))) (set! o2d2b@variable-transformer-procedure (lambda (o318e@x) (if (o2d29@variable-transformer? o318e@x) (cdr o318e@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" o318e@x)))) (set! o2d2d@make-eval-transformer (lambda (o3190@x) (o2d25@sanitize-binding (eval-core (o28ed@o28a5@expanded->core o3190@x)) o3190@x))) (set! o2e7e@parse-define (lambda (o3192@x) ((lambda (o3194@t) ((lambda (o3196@ls/false) (if (and o3196@ls/false (apply (lambda (o3198@id o3199@fmls o319a@b o319b@b*) (o2cef@id? o3198@id)) o3196@ls/false)) (apply (lambda (o31a0@id o31a1@fmls o31a2@b o31a3@b*) (begin (o2f20@verify-formals o31a1@fmls o3192@x) (values o31a0@id (cons 'defun (cons o31a1@fmls (cons o31a2@b o31a3@b*)))))) o3196@ls/false) ((lambda (o31a8@t) ((lambda (o31aa@ls/false) (if (and o31aa@ls/false (apply (lambda (o31ac@id o31ad@val) (o2cef@id? o31ac@id)) o31aa@ls/false)) (apply (lambda (o31b0@id o31b1@val) (values o31b0@id (cons 'expr o31b1@val))) o31aa@ls/false) ((lambda (o31b4@t) ((lambda (o31b6@ls/false) (if (and o31b6@ls/false (apply (lambda (o31b8@id) (o2cef@id? o31b8@id)) o31b6@ls/false)) (apply (lambda (o31ba@id) (values o31ba@id (cons 'expr (o2eb0@bless '(void))))) o31b6@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o31b4@t))) (o2efa@syntax-dispatch o31b4@t '(_ any)))) o31a8@t))) (o2efa@syntax-dispatch o31a8@t '(_ any any)))) o3194@t))) (o2efa@syntax-dispatch o3194@t '(_ (any . any) any . each-any)))) o3192@x))) (set! o2e80@parse-define-syntax (lambda (o31bc@x) ((lambda (o31be@t) ((lambda (o31c0@ls/false) (if (and o31c0@ls/false (apply (lambda (o31c2@id o31c3@val) (o2cef@id? o31c2@id)) o31c0@ls/false)) (apply (lambda (o31c6@id o31c7@val) (values o31c6@id o31c7@val)) o31c0@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o31be@t))) (o2efa@syntax-dispatch o31be@t '(_ any any)))) o31bc@x))) (set! o2e82@scheme-stx-hashtable (make-eq-hashtable)) (set! o2e84@scheme-stx (lambda (o31ca@sym) (or (hashtable-ref o2e82@scheme-stx-hashtable o31ca@sym '#f) ((lambda (o31cc@subst) ((lambda (o31ce@stx) ((lambda (o31d0@stx) ((lambda () (begin (hashtable-set! o2e82@scheme-stx-hashtable o31ca@sym o31d0@stx) o31d0@stx)))) ((lambda (o31d2@t) (if o31d2@t ((lambda (o31d4@x) ((lambda (o31d6@name o31d7@label) (o2cdb@add-subst (o2c88@make-rib (list o31d6@name) (list o2c6b@top-mark*) (list o31d7@label) '#f '#f) o31ce@stx)) (car o31d4@x) (cdr o31d4@x))) o31d2@t) o31ce@stx)) (assq o31ca@sym o31cc@subst)))) (o2cb9@make-stx o31ca@sym o2c6b@top-mark* '() '()))) (o2ae8@o295e@library-subst (o2b0c@o29a6@find-library-by-name '(psyntax system $all))))))) (set! o2e86@lexical-var car) (set! o2e88@lexical-mutable? cdr) (set! o2e8a@set-lexical-mutable! set-cdr!) (set! o2e8c@add-lexical (lambda (o31da@lab o31db@lex o31dc@r) (cons (cons* o31da@lab 'lexical o31db@lex '#f) o31dc@r))) (set! o2e8e@add-lexicals (lambda (o31e0@lab* o31e1@lex* o31e2@r) (if (null? o31e0@lab*) o31e2@r (o2e8e@add-lexicals (cdr o31e0@lab*) (cdr o31e1@lex*) (o2e8c@add-lexical (car o31e0@lab*) (car o31e1@lex*) o31e2@r))))) (set! o2e90@letrec-helper (lambda (o31e6@e o31e7@r o31e8@mr o31e9@build) ((lambda (o31ee@t) ((lambda (o31f0@ls/false) (if o31f0@ls/false (apply (lambda (o31f2@lhs* o31f3@rhs* o31f4@b o31f5@b*) (if (not (o2cf9@valid-bound-ids? o31f2@lhs*)) (o2eb4@invalid-fmls-error o31e6@e o31f2@lhs*) ((lambda (o31fa@lex* o31fb@lab*) ((lambda (o31fe@rib o31ff@r) ((lambda (o3202@body o3203@rhs*) (o31e9@build '#f o31fa@lex* o3203@rhs* o3202@body)) (o2f32@chi-internal (o2cdb@add-subst o31fe@rib (cons o31f4@b o31f5@b*)) o31ff@r o31e8@mr) (o2f18@chi-expr* (map (lambda (o3206@x) (o2cdb@add-subst o31fe@rib o3206@x)) o31f3@rhs*) o31ff@r o31e8@mr))) (o2caa@make-full-rib o31f2@lhs* o31fb@lab*) (o2e8e@add-lexicals o31fb@lab* o31fa@lex* o31e7@r))) (map o2c6f@gen-lexical o31f2@lhs*) (map o2c73@gen-label o31f2@lhs*)))) o31f0@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o31ee@t))) (o2efa@syntax-dispatch o31ee@t '(_ #(each (any any)) any . each-any)))) o31e6@e))) (set! o2e92@letrec-transformer (lambda (o3208@e o3209@r o320a@mr) (o2e90@letrec-helper o3208@e o3209@r o320a@mr o2c50@o2bc1@build-letrec))) (set! o2e94@letrec*-transformer (lambda (o320e@e o320f@r o3210@mr) (o2e90@letrec-helper o320e@e o320f@r o3210@mr o2c51@o2bc3@build-letrec*))) (set! o2e96@fluid-let-syntax-transformer (lambda (o3214@e o3215@r o3216@mr) ((lambda (o321b@lookup) (begin (set! o321b@lookup (lambda (o322e@x) (or (o2d09@id->label o322e@x) (o2fe3@syntax-violation '#f '"unbound identifier" o3214@e o322e@x)))) ((lambda (o321c@t) ((lambda (o321e@ls/false) (if o321e@ls/false (apply (lambda (o3220@lhs* o3221@rhs* o3222@b o3223@b*) (if (not (o2cf9@valid-bound-ids? o3220@lhs*)) (o2eb4@invalid-fmls-error o3214@e o3220@lhs*) ((lambda (o3228@lab* o3229@rhs*) (o2f32@chi-internal (cons o3222@b o3223@b*) (append (map cons o3228@lab* o3229@rhs*) o3215@r) (append (map cons o3228@lab* o3229@rhs*) o3216@mr))) (map o321b@lookup o3220@lhs*) (map (lambda (o322c@x) (o2d2d@make-eval-transformer (o2f57@expand-transformer o322c@x o3216@mr))) o3221@rhs*)))) o321e@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o321c@t))) (o2efa@syntax-dispatch o321c@t '(_ #(each (any any)) any . each-any)))) o3214@e))) '#f))) (set! o2e98@type-descriptor-transformer (lambda (o3230@e o3231@r o3232@mr) ((lambda (o3236@t) ((lambda (o3238@ls/false) (if (and o3238@ls/false (apply (lambda (o323a@id) (o2cef@id? o323a@id)) o3238@ls/false)) (apply (lambda (o323c@id) ((lambda (o323e@lab) ((lambda (o3240@b) ((lambda (o3242@type) ((lambda () (begin (if (not o323e@lab) (o2d15@raise-unbound-error o323c@id) (void)) (if (not (and (eq? o3242@type '$rtd) (not (list? (o2d13@binding-value o3240@b))))) (o2fe3@syntax-violation '#f '"not a record type" o3230@e) (void)) (list 'quote (o2d13@binding-value o3240@b)))))) (o2d11@binding-type o3240@b))) (o2d0d@label->binding o323e@lab o3231@r))) (o2d09@id->label o323c@id))) o3238@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3236@t))) (o2efa@syntax-dispatch o3236@t '(_ any)))) o3230@e))) (set! o2e9a@record-type-descriptor-transformer (lambda (o3244@e o3245@r o3246@mr) ((lambda (o324a@t) ((lambda (o324c@ls/false) (if (and o324c@ls/false (apply (lambda (o324e@id) (o2cef@id? o324e@id)) o324c@ls/false)) (apply (lambda (o3250@id) ((lambda (o3252@lab) ((lambda (o3254@b) ((lambda (o3256@type) ((lambda () (begin (if (not o3252@lab) (o2d15@raise-unbound-error o3250@id) (void)) (if (not (and (eq? o3256@type '$rtd) (list? (o2d13@binding-value o3254@b)))) (o2fe3@syntax-violation '#f '"not a record type" o3244@e) (void)) (o2f1c@chi-expr (car (o2d13@binding-value o3254@b)) o3245@r o3246@mr))))) (o2d11@binding-type o3254@b))) (o2d0d@label->binding o3252@lab o3245@r))) (o2d09@id->label o3250@id))) o324c@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o324a@t))) (o2efa@syntax-dispatch o324a@t '(_ any)))) o3244@e))) (set! o2e9c@record-constructor-descriptor-transformer (lambda (o3258@e o3259@r o325a@mr) ((lambda (o325e@t) ((lambda (o3260@ls/false) (if (and o3260@ls/false (apply (lambda (o3262@id) (o2cef@id? o3262@id)) o3260@ls/false)) (apply (lambda (o3264@id) ((lambda (o3266@lab) ((lambda (o3268@b) ((lambda (o326a@type) ((lambda () (begin (if (not o3266@lab) (o2d15@raise-unbound-error o3264@id) (void)) (if (not (and (eq? o326a@type '$rtd) (list? (o2d13@binding-value o3268@b)))) (o2fe3@syntax-violation '#f '"invalid type" o3258@e) (void)) (o2f1c@chi-expr (cadr (o2d13@binding-value o3268@b)) o3259@r o325a@mr))))) (o2d11@binding-type o3268@b))) (o2d0d@label->binding o3266@lab o3259@r))) (o2d09@id->label o3264@id))) o3260@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o325e@t))) (o2efa@syntax-dispatch o325e@t '(_ any)))) o3258@e))) (set! o2e9e@when-macro (lambda (o326c@e) ((lambda (o326e@t) ((lambda (o3270@ls/false) (if o3270@ls/false (apply (lambda (o3272@test o3273@e o3274@e*) (o2eb0@bless (list 'if o3272@test (cons 'begin (cons o3273@e o3274@e*))))) o3270@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o326e@t))) (o2efa@syntax-dispatch o326e@t '(_ any any . each-any)))) o326c@e))) (set! o2ea0@unless-macro (lambda (o3278@e) ((lambda (o327a@t) ((lambda (o327c@ls/false) (if o327c@ls/false (apply (lambda (o327e@test o327f@e o3280@e*) (o2eb0@bless (list 'if (list 'not o327e@test) (cons 'begin (cons o327f@e o3280@e*))))) o327c@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o327a@t))) (o2efa@syntax-dispatch o327a@t '(_ any any . each-any)))) o3278@e))) (set! o2ea2@if-transformer (lambda (o3284@e o3285@r o3286@mr) ((lambda (o328a@t) ((lambda (o328c@ls/false) (if o328c@ls/false (apply (lambda (o328e@e0 o328f@e1 o3290@e2) (list 'if (o2f1c@chi-expr o328e@e0 o3285@r o3286@mr) (o2f1c@chi-expr o328f@e1 o3285@r o3286@mr) (o2f1c@chi-expr o3290@e2 o3285@r o3286@mr))) o328c@ls/false) ((lambda (o3294@t) ((lambda (o3296@ls/false) (if o3296@ls/false (apply (lambda (o3298@e0 o3299@e1) (list 'if (o2f1c@chi-expr o3298@e0 o3285@r o3286@mr) (o2f1c@chi-expr o3299@e1 o3285@r o3286@mr) (o2c4f@o2bbf@build-void))) o3296@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3294@t))) (o2efa@syntax-dispatch o3294@t '(_ any any)))) o328a@t))) (o2efa@syntax-dispatch o328a@t '(_ any any any)))) o3284@e))) (set! o2ea4@and-transformer (lambda (o329c@e o329d@r o329e@mr) ((lambda (o32a2@t) ((lambda (o32a4@ls/false) (if o32a4@ls/false (apply (lambda (o32a6@e*) (cons 'and (o2f18@chi-expr* o32a6@e* o329d@r o329e@mr))) o32a4@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o32a2@t))) (o2efa@syntax-dispatch o32a2@t '(_ . each-any)))) o329c@e))) (set! o2ea6@or-transformer (lambda (o32a8@e o32a9@r o32aa@mr) ((lambda (o32ae@t) ((lambda (o32b0@ls/false) (if o32b0@ls/false (apply (lambda (o32b2@e*) (cons 'or (o2f18@chi-expr* o32b2@e* o32a9@r o32aa@mr))) o32b0@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o32ae@t))) (o2efa@syntax-dispatch o32ae@t '(_ . each-any)))) o32a8@e))) (set! o2ea8@case-macro (lambda (o32b4@e) ((lambda (o32b7@build-last o32b9@build-one) (begin (set! o32b7@build-last (lambda (o32de@cls) ((lambda (o32e0@t) ((lambda (o32e2@ls/false) (if o32e2@ls/false (apply (lambda (o32e4@e o32e5@e*) (cons 'begin (cons o32e4@e o32e5@e*))) o32e2@ls/false) ((lambda (o32e8@t) ((lambda (o32ea@ls/false) (if o32ea@ls/false (apply (lambda () (o32b9@build-one o32de@cls '(if #f #f))) o32ea@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o32e8@t))) (o2efa@syntax-dispatch o32e8@t '_))) o32e0@t))) (o2efa@syntax-dispatch o32e0@t '(#(scheme-id else) any . each-any)))) o32de@cls))) (set! o32b9@build-one (lambda (o32d0@cls o32d1@k) ((lambda (o32d4@t) ((lambda (o32d6@ls/false) (if o32d6@ls/false (apply (lambda (o32d8@d* o32d9@e o32da@e*) (list 'if (list 'memv 't (list 'quote o32d8@d*)) (cons 'begin (cons o32d9@e o32da@e*)) o32d1@k)) o32d6@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o32d4@t))) (o2efa@syntax-dispatch o32d4@t '(each-any any . each-any)))) o32d0@cls))) ((lambda (o32ba@t) ((lambda (o32bc@ls/false) (if o32bc@ls/false (apply (lambda (o32be@expr) (o2eb0@bless (cons 'let (cons (list (list 't o32be@expr)) '((if #f #f)))))) o32bc@ls/false) ((lambda (o32c0@t) ((lambda (o32c2@ls/false) (if o32c2@ls/false (apply (lambda (o32c4@expr o32c5@cls o32c6@cls*) (o2eb0@bless (list 'let (list (list 't o32c4@expr)) ((letrec ((o32ca@f (lambda (o32cc@cls o32cd@cls*) (if (null? o32cd@cls*) (o32b7@build-last o32cc@cls) (o32b9@build-one o32cc@cls (o32ca@f (car o32cd@cls*) (cdr o32cd@cls*))))))) o32ca@f) o32c5@cls o32c6@cls*)))) o32c2@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o32c0@t))) (o2efa@syntax-dispatch o32c0@t '(_ any any . each-any)))) o32ba@t))) (o2efa@syntax-dispatch o32ba@t '(_ any)))) o32b4@e))) '#f '#f))) (set! o2eaa@quote-transformer (lambda (o32ec@e o32ed@r o32ee@mr) ((lambda (o32f2@t) ((lambda (o32f4@ls/false) (if o32f4@ls/false (apply (lambda (o32f6@datum) (list 'quote (o2d05@stx->datum o32f6@datum))) o32f4@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o32f2@t))) (o2efa@syntax-dispatch o32f2@t '(_ any)))) o32ec@e))) (set! o2eac@case-lambda-transformer (lambda (o32f8@e o32f9@r o32fa@mr) ((lambda (o32fe@t) ((lambda (o3300@ls/false) (if o3300@ls/false (apply (lambda (o3302@fmls* o3303@b* o3304@b**) (call-with-values (lambda () (o2f24@chi-lambda-clause* o32f8@e o3302@fmls* (map cons o3303@b* o3304@b**) o32f9@r o32fa@mr)) (lambda (o330c@o3309 o330d@o330b) ((lambda (o3310@body* o3311@fmls*) (o2c4c@o2b8d@build-case-lambda '#f o3311@fmls* o3310@body*)) o330d@o330b o330c@o3309)))) o3300@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o32fe@t))) (o2efa@syntax-dispatch o32fe@t '(_ . #(each (any any . each-any)))))) o32f8@e))) (set! o2eae@lambda-transformer (lambda (o3314@e o3315@r o3316@mr) ((lambda (o331a@t) ((lambda (o331c@ls/false) (if o331c@ls/false (apply (lambda (o331e@fmls o331f@b o3320@b*) (call-with-values (lambda () (o2f22@chi-lambda-clause o3314@e o331e@fmls (cons o331f@b o3320@b*) o3315@r o3316@mr)) (lambda (o3328@o3325 o3329@o3327) ((lambda (o332c@body o332d@fmls) (o2c4b@o2b8b@build-lambda '#f o332d@fmls o332c@body)) o3329@o3327 o3328@o3325)))) o331c@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o331a@t))) (o2efa@syntax-dispatch o331a@t '(_ any any . each-any)))) o3314@e))) (set! o2eb0@bless (lambda (o3330@x) (o2cd7@mkstx ((letrec ((o3332@f (lambda (o3334@x) (if (o2cb7@stx? o3334@x) o3334@x (if (pair? o3334@x) (cons (o3332@f (car o3334@x)) (o3332@f (cdr o3334@x))) (if (symbol? o3334@x) (o2e84@scheme-stx o3334@x) (if (vector? o3334@x) (vector-map o3332@f o3334@x) o3334@x))))))) o3332@f) o3330@x) '() '() '()))) (set! o2eb2@with-syntax-macro (lambda (o3336@e) ((lambda (o3338@t) ((lambda (o333a@ls/false) (if o333a@ls/false (apply (lambda (o333c@pat* o333d@expr* o333e@b o333f@b*) ((lambda (o3344@idn*) (begin (o2f20@verify-formals (map car o3344@idn*) o3336@e) ((lambda (o3346@t*) (o2eb0@bless (list 'let (map list o3346@t* o333d@expr*) ((letrec ((o3348@f (lambda (o334a@pat* o334b@t*) (if (null? o334a@pat*) (cons 'begin (cons '#f (cons o333e@b o333f@b*))) (list 'syntax-case (car o334b@t*) '() (list (car o334a@pat*) (o3348@f (cdr o334a@pat*) (cdr o334b@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car o334a@pat*)) (car o334b@t*)))))))) o3348@f) o333c@pat* o3346@t*)))) (o2fd1@generate-temporaries o333d@expr*)))) ((letrec ((o334e@f (lambda (o3350@pat*) (if (null? o3350@pat*) '() (call-with-values (lambda () (o2ef8@convert-pattern (car o3350@pat*) '())) (lambda (o3356@o3353 o3357@o3355) ((lambda (o335a@idn* o335b@pat) (append o335a@idn* (o334e@f (cdr o3350@pat*)))) o3357@o3355 o3356@o3353))))))) o334e@f) o333c@pat*))) o333a@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3338@t))) (o2efa@syntax-dispatch o3338@t '(_ #(each (any any)) any . each-any)))) o3336@e))) (set! o2eb4@invalid-fmls-error (lambda (o335e@stx o335f@fmls) ((lambda (o3362@t) ((lambda (o3364@ls/false) (if o3364@ls/false (apply (lambda (o3366@id* o3367@last) ((letrec ((o336a@f (lambda (o336c@id*) (if (null? o336c@id*) (values) (if (not (o2cef@id? (car o336c@id*))) (o2fe3@syntax-violation '#f '"not an identifier" o335e@stx (car o336c@id*)) (begin (o336a@f (cdr o336c@id*)) (if (o2cfd@bound-id-member? (car o336c@id*) (cdr o336c@id*)) (o2fe3@syntax-violation '#f '"duplicate binding" o335e@stx (car o336c@id*)) (void)))))))) o336a@f) (if (o2cef@id? o3367@last) (cons o3367@last o3366@id*) (if (o2ce5@syntax-null? o3367@last) o3366@id* (o2fe3@syntax-violation '#f '"not an identifier" o335e@stx o3367@last))))) o3364@ls/false) ((lambda (o336e@t) ((lambda (o3370@ls/false) (if o3370@ls/false (apply (lambda () (o2fe3@syntax-violation '#f '"malformed binding form" o335e@stx o335f@fmls)) o3370@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o336e@t))) (o2efa@syntax-dispatch o336e@t '_))) o3362@t))) (o2efa@syntax-dispatch o3362@t '#(each+ any () any)))) o335f@fmls))) (set! o2eb6@let-macro (lambda (o3372@stx) ((lambda (o3374@t) ((lambda (o3376@ls/false) (if o3376@ls/false (apply (lambda (o3378@lhs* o3379@rhs* o337a@b o337b@b*) (if (o2cf9@valid-bound-ids? o3378@lhs*) (o2eb0@bless (cons (cons 'lambda (cons o3378@lhs* (cons o337a@b o337b@b*))) o3379@rhs*)) (o2eb4@invalid-fmls-error o3372@stx o3378@lhs*))) o3376@ls/false) ((lambda (o3380@t) ((lambda (o3382@ls/false) (if (and o3382@ls/false (apply (lambda (o3384@f o3385@lhs* o3386@rhs* o3387@b o3388@b*) (o2cef@id? o3384@f)) o3382@ls/false)) (apply (lambda (o338e@f o338f@lhs* o3390@rhs* o3391@b o3392@b*) (if (o2cf9@valid-bound-ids? o338f@lhs*) (o2eb0@bless (cons (list 'letrec (list (list o338e@f (cons 'lambda (cons o338f@lhs* (cons o3391@b o3392@b*))))) o338e@f) o3390@rhs*)) (o2eb4@invalid-fmls-error o3372@stx o338f@lhs*))) o3382@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3380@t))) (o2efa@syntax-dispatch o3380@t '(_ any #(each (any any)) any . each-any)))) o3374@t))) (o2efa@syntax-dispatch o3374@t '(_ #(each (any any)) any . each-any)))) o3372@stx))) (set! o2eb8@let-values-macro (lambda (o3398@stx) ((lambda (o339b@rename o339d@rename*) (begin (set! o339b@rename (lambda (o3400@x o3401@old* o3402@new*) (begin (if (not (o2cef@id? o3400@x)) (o2fe3@syntax-violation '#f '"not an indentifier" o3398@stx o3400@x) (void)) (if (o2cfd@bound-id-member? o3400@x o3401@old*) (o2fe3@syntax-violation '#f '"duplicate binding" o3398@stx o3400@x) (void)) ((lambda (o3406@y) (values o3406@y (cons o3400@x o3401@old*) (cons o3406@y o3402@new*))) (gensym (o2fe9@syntax->datum o3400@x)))))) (set! o339d@rename* (lambda (o33ee@x* o33ef@old* o33f0@new*) (if (null? o33ee@x*) (values '() o33ef@old* o33f0@new*) (call-with-values (lambda () (o339b@rename (car o33ee@x*) o33ef@old* o33f0@new*)) (lambda (o33f4@x o33f5@old* o33f6@new*) (call-with-values (lambda () (o339d@rename* (cdr o33ee@x*) o33f5@old* o33f6@new*)) (lambda (o33fa@x* o33fb@old* o33fc@new*) (values (cons o33f4@x o33fa@x*) o33fb@old* o33fc@new*)))))))) ((lambda (o339e@t) ((lambda (o33a0@ls/false) (if o33a0@ls/false (apply (lambda (o33a2@b o33a3@b*) (cons* (o2eb0@bless 'let) '() o33a2@b o33a3@b*)) o33a0@ls/false) ((lambda (o33a6@t) ((lambda (o33a8@ls/false) (if o33a8@ls/false (apply (lambda (o33aa@lhs* o33ab@rhs* o33ac@b o33ad@b*) (o2eb0@bless ((letrec ((o33b2@f (lambda (o33b4@lhs* o33b5@rhs* o33b6@old* o33b7@new*) (if (null? o33b4@lhs*) (cons 'let (cons (map list o33b6@old* o33b7@new*) (cons o33ac@b o33ad@b*))) ((lambda (o33bc@t) ((lambda (o33be@ls/false) (if o33be@ls/false (apply (lambda (o33c0@x*) (call-with-values (lambda () (o339d@rename* o33c0@x* o33b6@old* o33b7@new*)) (lambda (o33c8@o33c3 o33c9@o33c5 o33ca@o33c7) ((lambda (o33ce@new* o33cf@old* o33d0@y*) (list 'call-with-values (list 'lambda '() (car o33b5@rhs*)) (list 'lambda o33d0@y* (o33b2@f (cdr o33b4@lhs*) (cdr o33b5@rhs*) o33cf@old* o33ce@new*)))) o33ca@o33c7 o33c9@o33c5 o33c8@o33c3)))) o33be@ls/false) ((lambda (o33d4@t) ((lambda (o33d6@ls/false) (if o33d6@ls/false (apply (lambda (o33d8@x* o33d9@x) (call-with-values (lambda () (o339b@rename o33d9@x o33b6@old* o33b7@new*)) (lambda (o33dc@y o33dd@old* o33de@new*) (call-with-values (lambda () (o339d@rename* o33d8@x* o33dd@old* o33de@new*)) (lambda (o33e2@y* o33e3@old* o33e4@new*) (list 'call-with-values (list 'lambda '() (car o33b5@rhs*)) (list 'lambda (append o33e2@y* o33dc@y) (o33b2@f (cdr o33b4@lhs*) (cdr o33b5@rhs*) o33e3@old* o33e4@new*)))))))) o33d6@ls/false) ((lambda (o33e8@t) ((lambda (o33ea@ls/false) (if o33ea@ls/false (apply (lambda (o33ec@others) (o2fe3@syntax-violation '#f '"malformed bindings" o3398@stx o33ec@others)) o33ea@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o33e8@t))) (o2efa@syntax-dispatch o33e8@t 'any))) o33d4@t))) (o2efa@syntax-dispatch o33d4@t '#(each+ any () any)))) o33bc@t))) (o2efa@syntax-dispatch o33bc@t 'each-any))) (car o33b4@lhs*)))))) o33b2@f) o33aa@lhs* o33ab@rhs* '() '()))) o33a8@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o33a6@t))) (o2efa@syntax-dispatch o33a6@t '(_ #(each (any any)) any . each-any)))) o339e@t))) (o2efa@syntax-dispatch o339e@t '(_ () any . each-any)))) o3398@stx))) '#f '#f))) (set! o2eba@let*-values-macro (lambda (o3408@stx) ((lambda (o340b@check) (begin (set! o340b@check (lambda (o343a@x*) (if (not (null? o343a@x*)) ((lambda (o343c@x) (begin (if (not (o2cef@id? o343c@x)) (o2fe3@syntax-violation '#f '"not an identifier" o3408@stx o343c@x) (void)) (o340b@check (cdr o343a@x*)) (if (o2cfd@bound-id-member? o343c@x (cdr o343a@x*)) (o2fe3@syntax-violation '#f '"duplicate identifier" o3408@stx o343c@x) (void)))) (car o343a@x*)) (void)))) ((lambda (o340c@t) ((lambda (o340e@ls/false) (if o340e@ls/false (apply (lambda (o3410@b o3411@b*) (cons* (o2eb0@bless 'let) '() o3410@b o3411@b*)) o340e@ls/false) ((lambda (o3414@t) ((lambda (o3416@ls/false) (if o3416@ls/false (apply (lambda (o3418@lhs* o3419@rhs* o341a@b o341b@b*) (o2eb0@bless ((letrec ((o3420@f (lambda (o3422@lhs* o3423@rhs*) (if (null? o3422@lhs*) (cons 'begin (cons o341a@b o341b@b*)) ((lambda (o3426@t) ((lambda (o3428@ls/false) (if o3428@ls/false (apply (lambda (o342a@x*) (begin (o340b@check o342a@x*) (list 'call-with-values (list 'lambda '() (car o3423@rhs*)) (list 'lambda o342a@x* (o3420@f (cdr o3422@lhs*) (cdr o3423@rhs*)))))) o3428@ls/false) ((lambda (o342c@t) ((lambda (o342e@ls/false) (if o342e@ls/false (apply (lambda (o3430@x* o3431@x) (begin (o340b@check (cons o3431@x o3430@x*)) (list 'call-with-values (list 'lambda '() (car o3423@rhs*)) (list 'lambda (append o3430@x* o3431@x) (o3420@f (cdr o3422@lhs*) (cdr o3423@rhs*)))))) o342e@ls/false) ((lambda (o3434@t) ((lambda (o3436@ls/false) (if o3436@ls/false (apply (lambda (o3438@others) (o2fe3@syntax-violation '#f '"malformed bindings" o3408@stx o3438@others)) o3436@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3434@t))) (o2efa@syntax-dispatch o3434@t 'any))) o342c@t))) (o2efa@syntax-dispatch o342c@t '#(each+ any () any)))) o3426@t))) (o2efa@syntax-dispatch o3426@t 'each-any))) (car o3422@lhs*)))))) o3420@f) o3418@lhs* o3419@rhs*))) o3416@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3414@t))) (o2efa@syntax-dispatch o3414@t '(_ #(each (any any)) any . each-any)))) o340c@t))) (o2efa@syntax-dispatch o340c@t '(_ () any . each-any)))) o3408@stx))) '#f))) (set! o2ebc@trace-lambda-macro (lambda (o343e@stx) ((lambda (o3440@t) ((lambda (o3442@ls/false) (if o3442@ls/false (apply (lambda (o3444@who o3445@fmls o3446@b o3447@b*) (if (o2cf9@valid-bound-ids? o3445@fmls) (o2eb0@bless (list 'make-traced-procedure (list 'quote o3444@who) (cons 'lambda (cons o3445@fmls (cons o3446@b o3447@b*))))) (o2eb4@invalid-fmls-error o343e@stx o3445@fmls))) o3442@ls/false) ((lambda (o344c@t) ((lambda (o344e@ls/false) (if o344e@ls/false (apply (lambda (o3450@who o3451@fmls o3452@last o3453@b o3454@b*) (if (o2cf9@valid-bound-ids? (cons o3452@last o3451@fmls)) (o2eb0@bless (list 'make-traced-procedure (list 'quote o3450@who) (cons 'lambda (cons (append o3451@fmls o3452@last) (cons o3453@b o3454@b*))))) (o2eb4@invalid-fmls-error o343e@stx (append o3451@fmls o3452@last)))) o344e@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o344c@t))) (o2efa@syntax-dispatch o344c@t '(_ any #(each+ any () any) any . each-any)))) o3440@t))) (o2efa@syntax-dispatch o3440@t '(_ any each-any any . each-any)))) o343e@stx))) (set! o2ebe@trace-define-macro (lambda (o345a@stx) ((lambda (o345c@t) ((lambda (o345e@ls/false) (if o345e@ls/false (apply (lambda (o3460@who o3461@fmls o3462@b o3463@b*) (if (o2cf9@valid-bound-ids? o3461@fmls) (o2eb0@bless (list 'define o3460@who (list 'make-traced-procedure (list 'quote o3460@who) (cons 'lambda (cons o3461@fmls (cons o3462@b o3463@b*)))))) (o2eb4@invalid-fmls-error o345a@stx o3461@fmls))) o345e@ls/false) ((lambda (o3468@t) ((lambda (o346a@ls/false) (if o346a@ls/false (apply (lambda (o346c@who o346d@fmls o346e@last o346f@b o3470@b*) (if (o2cf9@valid-bound-ids? (cons o346e@last o346d@fmls)) (o2eb0@bless (list 'define o346c@who (list 'make-traced-procedure (list 'quote o346c@who) (cons 'lambda (cons (append o346d@fmls o346e@last) (cons o346f@b o3470@b*)))))) (o2eb4@invalid-fmls-error o345a@stx (append o346d@fmls o346e@last)))) o346a@ls/false) ((lambda (o3476@t) ((lambda (o3478@ls/false) (if o3478@ls/false (apply (lambda (o347a@who o347b@expr) (if (o2cef@id? o347a@who) (o2eb0@bless (list 'define o347a@who (list 'let (list (list 'v o347b@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote o347a@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (o2fe3@syntax-violation '#f '"invalid name" o345a@stx))) o3478@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3476@t))) (o2efa@syntax-dispatch o3476@t '(_ any any)))) o3468@t))) (o2efa@syntax-dispatch o3468@t '(_ (any . #(each+ any () any)) any . each-any)))) o345c@t))) (o2efa@syntax-dispatch o345c@t '(_ (any . each-any) any . each-any)))) o345a@stx))) (set! o2ec0@trace-define-syntax-macro (lambda (o347e@stx) ((lambda (o3480@t) ((lambda (o3482@ls/false) (if o3482@ls/false (apply (lambda (o3484@who o3485@expr) (if (o2cef@id? o3484@who) (o2eb0@bless (list 'define-syntax o3484@who (list 'make-traced-macro (list 'quote o3484@who) o3485@expr))) (o2fe3@syntax-violation '#f '"invalid name" o347e@stx))) o3482@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3480@t))) (o2efa@syntax-dispatch o3480@t '(_ any any)))) o347e@stx))) (set! o2ec2@trace-let/rec-syntax (lambda (o3488@who) (lambda (o348a@stx) ((lambda (o348c@t) ((lambda (o348e@ls/false) (if o348e@ls/false (apply (lambda (o3490@lhs* o3491@rhs* o3492@b o3493@b*) (if (o2cf9@valid-bound-ids? o3490@lhs*) ((lambda (o3498@rhs*) (o2eb0@bless (cons o3488@who (cons (map list o3490@lhs* o3498@rhs*) (cons o3492@b o3493@b*))))) (map (lambda (o349a@lhs o349b@rhs) (list 'make-traced-macro (list 'quote o349a@lhs) o349b@rhs)) o3490@lhs* o3491@rhs*)) (o2eb4@invalid-fmls-error o348a@stx o3490@lhs*))) o348e@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o348c@t))) (o2efa@syntax-dispatch o348c@t '(_ #(each (any any)) any . each-any)))) o348a@stx)))) (set! o2ec4@trace-let-syntax-macro (o2ec2@trace-let/rec-syntax 'let-syntax)) (set! o2ec6@trace-letrec-syntax-macro (o2ec2@trace-let/rec-syntax 'letrec-syntax)) (set! o2ec8@guard-macro (lambda (o349e@x) ((lambda (o34a1@gen-clauses) (begin (set! o34a1@gen-clauses (lambda (o34b8@con o34b9@outerk o34ba@clause*) ((lambda (o34bf@f o34c1@f*) (begin (set! o34bf@f (lambda (o34f8@x o34f9@k) ((lambda (o34fc@t) ((lambda (o34fe@ls/false) (if o34fe@ls/false (apply (lambda (o3500@e o3501@p) ((lambda (o3504@t) (list 'let (list (list o3504@t o3500@e)) (list 'if o3504@t (list o3501@p o3504@t) o34f9@k))) (gensym))) o34fe@ls/false) ((lambda (o3506@t) ((lambda (o3508@ls/false) (if o3508@ls/false (apply (lambda (o350a@e) ((lambda (o350c@t) (list 'let (list (list o350c@t o350a@e)) (list 'if o350c@t o350c@t o34f9@k))) (gensym))) o3508@ls/false) ((lambda (o350e@t) ((lambda (o3510@ls/false) (if o3510@ls/false (apply (lambda (o3512@e o3513@v o3514@v*) (list 'if o3512@e (cons 'begin (cons o3513@v o3514@v*)) o34f9@k)) o3510@ls/false) ((lambda (o3518@t) ((lambda (o351a@ls/false) (if o351a@ls/false (apply (lambda () (o2fe3@syntax-violation '#f '"invalid guard clause" o34f8@x)) o351a@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3518@t))) (o2efa@syntax-dispatch o3518@t '_))) o350e@t))) (o2efa@syntax-dispatch o350e@t '(any any . each-any)))) o3506@t))) (o2efa@syntax-dispatch o3506@t '(any)))) o34fc@t))) (o2efa@syntax-dispatch o34fc@t '(any #(scheme-id =>) any)))) o34f8@x))) (set! o34c1@f* (lambda (o34ce@x*) ((lambda (o34d0@t) ((lambda (o34d2@ls/false) (if o34d2@ls/false (apply (lambda () ((lambda (o34d4@g) (values (list o34d4@g (list 'lambda '() (list 'raise-continuable o34b8@con))) o34d4@g)) (gensym))) o34d2@ls/false) ((lambda (o34d6@t) ((lambda (o34d8@ls/false) (if o34d8@ls/false (apply (lambda (o34da@e o34db@e*) (values (cons 'begin (cons o34da@e o34db@e*)) '#f)) o34d8@ls/false) ((lambda (o34de@t) ((lambda (o34e0@ls/false) (if o34e0@ls/false (apply (lambda (o34e2@cls o34e3@cls*) (call-with-values (lambda () (o34c1@f* o34e3@cls*)) (lambda (o34ea@o34e7 o34eb@o34e9) ((lambda (o34ee@g o34ef@e) (values (o34bf@f o34e2@cls o34ef@e) o34ee@g)) o34eb@o34e9 o34ea@o34e7)))) o34e0@ls/false) ((lambda (o34f2@t) ((lambda (o34f4@ls/false) (if o34f4@ls/false (apply (lambda (o34f6@others) (o2fe3@syntax-violation '#f '"invalid guard clause" o34f6@others)) o34f4@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o34f2@t))) (o2efa@syntax-dispatch o34f2@t 'any))) o34de@t))) (o2efa@syntax-dispatch o34de@t '(any . any)))) o34d6@t))) (o2efa@syntax-dispatch o34d6@t '((#(scheme-id else) any . each-any))))) o34d0@t))) (o2efa@syntax-dispatch o34d0@t '()))) o34ce@x*))) (call-with-values (lambda () (o34c1@f* o34ba@clause*)) (lambda (o34c6@o34c3 o34c7@o34c5) ((lambda (o34ca@raisek o34cb@code) (if o34ca@raisek (list (list 'call/cc (list 'lambda (list o34ca@raisek) (list o34b9@outerk (list 'lambda '() o34cb@code))))) (list o34b9@outerk (list 'lambda '() o34cb@code)))) o34c7@o34c5 o34c6@o34c3))))) '#f '#f))) ((lambda (o34a2@t) ((lambda (o34a4@ls/false) (if (and o34a4@ls/false (apply (lambda (o34a6@con o34a7@clause* o34a8@b o34a9@b*) (o2cef@id? o34a6@con)) o34a4@ls/false)) (apply (lambda (o34ae@con o34af@clause* o34b0@b o34b1@b*) ((lambda (o34b6@outerk) (o2eb0@bless (list (list 'call/cc (list 'lambda (list o34b6@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list o34ae@con) (o34a1@gen-clauses o34ae@con o34b6@outerk o34af@clause*)) (cons 'lambda (cons '() (cons o34b0@b o34b1@b*)))))))))) (gensym))) o34a4@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o34a2@t))) (o2efa@syntax-dispatch o34a2@t '(_ (any . each-any) any . each-any)))) o349e@x))) '#f))) (set! o2eca@define-enumeration-macro (lambda (o351c@stx) ((lambda (o351f@set? o3521@remove-dups) (begin (set! o351f@set? (lambda (o3538@x) (or (null? o3538@x) (and (not (memq (car o3538@x) (cdr o3538@x))) (o351f@set? (cdr o3538@x)))))) (set! o3521@remove-dups (lambda (o3536@ls) (if (null? o3536@ls) '() (cons (car o3536@ls) (o3521@remove-dups (remq (car o3536@ls) (cdr o3536@ls))))))) ((lambda (o3522@t) ((lambda (o3524@ls/false) (if (and o3524@ls/false (apply (lambda (o3526@name o3527@id* o3528@maker) (and (o2cef@id? o3526@name) (o2cef@id? o3528@maker) (for-all o2cef@id? o3527@id*))) o3524@ls/false)) (apply (lambda (o352c@name o352d@id* o352e@maker) ((lambda (o3532@name* o3533@mk) (o2eb0@bless (list 'begin (list 'define o3533@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote o3532@name*)))) (list 'define-syntax o352c@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote o3532@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote o352c@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax o352e@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote o352e@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote o3532@name*)) (cons 'syntax-violation (cons (list 'quote o352e@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons o3533@mk '('(n* ...)))))))))))) (o3521@remove-dups (o2fe9@syntax->datum o352d@id*)) (gensym))) o3524@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3522@t))) (o2efa@syntax-dispatch o3522@t '(_ any each-any any)))) o351c@stx))) '#f '#f))) (set! o2ecc@time-macro (lambda (o353a@stx) ((lambda (o353c@t) ((lambda (o353e@ls/false) (if o353e@ls/false (apply (lambda (o3540@expr) (o2eb0@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() o3540@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) o353e@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o353c@t))) (o2efa@syntax-dispatch o353c@t '(_ any)))) o353a@stx))) (set! o2ece@delay-macro (lambda (o3542@stx) ((lambda (o3544@t) ((lambda (o3546@ls/false) (if o3546@ls/false (apply (lambda (o3548@expr) (o2eb0@bless (list 'make-promise (list 'lambda '() o3548@expr)))) o3546@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3544@t))) (o2efa@syntax-dispatch o3544@t '(_ any)))) o3542@stx))) (set! o2ed0@assert-macro (lambda (o354a@stx) ((lambda (o354c@t) ((lambda (o354e@ls/false) (if o354e@ls/false (apply (lambda (o3550@expr) ((lambda (o3552@pos) (o2eb0@bless (list 'unless o3550@expr (list 'assertion-error (list 'quote o3550@expr) (list 'quote o3552@pos))))) (or (o2fdb@expression-position o354a@stx) (o2fdb@expression-position o3550@expr)))) o354e@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o354c@t))) (o2efa@syntax-dispatch o354c@t '(_ any)))) o354a@stx))) (set! o2ed2@endianness-macro (lambda (o3554@stx) ((lambda (o3556@t) ((lambda (o3558@ls/false) (if o3558@ls/false (apply (lambda (o355a@e) ((lambda (o355c@t) (if (memv o355c@t '(little)) (o2eb0@bless ''little) (if (memv o355c@t '(big)) (o2eb0@bless ''big) (o2fe3@syntax-violation '#f '"endianness must be big or little" o3554@stx)))) (o2fe9@syntax->datum o355a@e))) o3558@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3556@t))) (o2efa@syntax-dispatch o3556@t '(_ any)))) o3554@stx))) (set! o2ed4@identifier-syntax-macro (lambda (o355e@stx) ((lambda (o3560@t) ((lambda (o3562@ls/false) (if o3562@ls/false (apply (lambda (o3564@expr) (o2eb0@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax o3564@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax o3564@expr) '((syntax (e* ...)))))))))) o3562@ls/false) ((lambda (o3566@t) ((lambda (o3568@ls/false) (if (and o3568@ls/false (apply (lambda (o356a@id1 o356b@expr1 o356c@id2 o356d@expr2 o356e@expr3) (and (o2cef@id? o356a@id1) (o2cef@id? o356c@id2) (o2cef@id? o356d@expr2))) o3568@ls/false)) (apply (lambda (o3574@id1 o3575@expr1 o3576@id2 o3577@expr2 o3578@expr3) (o2eb0@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax o3575@expr1)) (list (list 'set! 'id o3577@expr2) (list 'syntax o3578@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons o3575@expr1 '(e* ...))))))))) o3568@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3566@t))) (o2efa@syntax-dispatch o3566@t '(_ (any any) ((#(scheme-id set!) any any) any))))) o3560@t))) (o2efa@syntax-dispatch o3560@t '(_ any)))) o355e@stx))) (set! o2ed6@do-macro (lambda (o357e@stx) ((lambda (o3581@bind) (begin (set! o3581@bind (lambda (o3598@x) ((lambda (o359a@t) ((lambda (o359c@ls/false) (if o359c@ls/false (apply (lambda (o359e@x o359f@init) (list o359e@x o359f@init o359e@x)) o359c@ls/false) ((lambda (o35a2@t) ((lambda (o35a4@ls/false) (if o35a4@ls/false (apply (lambda (o35a6@x o35a7@init o35a8@step) (list o35a6@x o35a7@init o35a8@step)) o35a4@ls/false) ((lambda (o35ac@t) ((lambda (o35ae@ls/false) (if o35ae@ls/false (apply (lambda () (o2fe3@syntax-violation '#f '"invalid binding" o357e@stx)) o35ae@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o35ac@t))) (o2efa@syntax-dispatch o35ac@t '_))) o35a2@t))) (o2efa@syntax-dispatch o35a2@t '(any any any)))) o359a@t))) (o2efa@syntax-dispatch o359a@t '(any any)))) o3598@x))) ((lambda (o3582@t) ((lambda (o3584@ls/false) (if o3584@ls/false (apply (lambda (o3586@binding* o3587@test o3588@expr* o3589@command*) ((lambda (o358e@t) ((lambda (o3590@ls/false) (if o3590@ls/false (apply (lambda (o3592@x* o3593@init* o3594@step*) (if (o2cf9@valid-bound-ids? o3592@x*) (o2eb0@bless (list 'letrec (list (list 'loop (list 'lambda o3592@x* (list 'if o3587@test (cons 'begin (cons '(if #f #f) o3588@expr*)) (cons 'begin (append o3589@command* (list (cons 'loop o3594@step*)))))))) (cons 'loop o3593@init*))) (o2fe3@syntax-violation '#f '"invalid bindings" o357e@stx))) o3590@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o358e@t))) (o2efa@syntax-dispatch o358e@t '#(each (any any any))))) (map o3581@bind o3586@binding*))) o3584@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3582@t))) (o2efa@syntax-dispatch o3582@t '(_ each-any (any . each-any) . each-any)))) o357e@stx))) '#f))) (set! o2ed8@let*-macro (lambda (o35b0@stx) ((lambda (o35b2@t) ((lambda (o35b4@ls/false) (if (and o35b4@ls/false (apply (lambda (o35b6@lhs* o35b7@rhs* o35b8@b o35b9@b*) (for-all o2cef@id? o35b6@lhs*)) o35b4@ls/false)) (apply (lambda (o35be@lhs* o35bf@rhs* o35c0@b o35c1@b*) (o2eb0@bless ((letrec ((o35c6@f (lambda (o35c8@x*) (if (null? o35c8@x*) (cons 'let (cons '() (cons o35c0@b o35c1@b*))) (list 'let (list (car o35c8@x*)) (o35c6@f (cdr o35c8@x*))))))) o35c6@f) (map list o35be@lhs* o35bf@rhs*)))) o35b4@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o35b2@t))) (o2efa@syntax-dispatch o35b2@t '(_ #(each (any any)) any . each-any)))) o35b0@stx))) (set! o2eda@or-macro (lambda (o35ca@stx) ((lambda (o35cc@t) ((lambda (o35ce@ls/false) (if o35ce@ls/false (apply (lambda () '#f) o35ce@ls/false) ((lambda (o35d0@t) ((lambda (o35d2@ls/false) (if o35d2@ls/false (apply (lambda (o35d4@e o35d5@e*) (o2eb0@bless ((letrec ((o35d8@f (lambda (o35da@e o35db@e*) (if (null? o35db@e*) (list 'begin '#f o35da@e) (list 'let (list (list 't o35da@e)) (list 'if 't 't (o35d8@f (car o35db@e*) (cdr o35db@e*)))))))) o35d8@f) o35d4@e o35d5@e*))) o35d2@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o35d0@t))) (o2efa@syntax-dispatch o35d0@t '(_ any . each-any)))) o35cc@t))) (o2efa@syntax-dispatch o35cc@t '(_)))) o35ca@stx))) (set! o2edc@and-macro (lambda (o35de@stx) ((lambda (o35e0@t) ((lambda (o35e2@ls/false) (if o35e2@ls/false (apply (lambda () '#t) o35e2@ls/false) ((lambda (o35e4@t) ((lambda (o35e6@ls/false) (if o35e6@ls/false (apply (lambda (o35e8@e o35e9@e*) (o2eb0@bless ((letrec ((o35ec@f (lambda (o35ee@e o35ef@e*) (if (null? o35ef@e*) (list 'begin '#f o35ee@e) (cons 'if (cons o35ee@e (cons (o35ec@f (car o35ef@e*) (cdr o35ef@e*)) '(#f)))))))) o35ec@f) o35e8@e o35e9@e*))) o35e6@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o35e4@t))) (o2efa@syntax-dispatch o35e4@t '(_ any . each-any)))) o35e0@t))) (o2efa@syntax-dispatch o35e0@t '(_)))) o35de@stx))) (set! o2ede@cond-macro (lambda (o35f2@stx) ((lambda (o35f4@t) ((lambda (o35f6@ls/false) (if o35f6@ls/false (apply (lambda (o35f8@cls o35f9@cls*) (o2eb0@bless ((letrec ((o35fc@f (lambda (o35fe@cls o35ff@cls*) (if (null? o35ff@cls*) ((lambda (o3602@t) ((lambda (o3604@ls/false) (if o3604@ls/false (apply (lambda (o3606@e o3607@e*) (cons 'begin (cons o3606@e o3607@e*))) o3604@ls/false) ((lambda (o360a@t) ((lambda (o360c@ls/false) (if o360c@ls/false (apply (lambda (o360e@e o360f@p) (list 'let (list (list 't o360e@e)) (list 'if 't (cons o360f@p '(t))))) o360c@ls/false) ((lambda (o3612@t) ((lambda (o3614@ls/false) (if o3614@ls/false (apply (lambda (o3616@e) (cons 'or (cons o3616@e '((if #f #f))))) o3614@ls/false) ((lambda (o3618@t) ((lambda (o361a@ls/false) (if o361a@ls/false (apply (lambda (o361c@e o361d@e*) (list 'if o361c@e (cons 'begin o361d@e*))) o361a@ls/false) ((lambda (o3620@t) ((lambda (o3622@ls/false) (if o3622@ls/false (apply (lambda () (o2fe3@syntax-violation '#f '"invalid last clause" o35f2@stx)) o3622@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3620@t))) (o2efa@syntax-dispatch o3620@t '_))) o3618@t))) (o2efa@syntax-dispatch o3618@t '(any . each-any)))) o3612@t))) (o2efa@syntax-dispatch o3612@t '(any)))) o360a@t))) (o2efa@syntax-dispatch o360a@t '(any #(scheme-id =>) any)))) o3602@t))) (o2efa@syntax-dispatch o3602@t '(#(scheme-id else) any . each-any)))) o35fe@cls) ((lambda (o3624@t) ((lambda (o3626@ls/false) (if o3626@ls/false (apply (lambda (o3628@e o3629@e*) (o2fe3@syntax-violation '#f '"incorrect position of keyword else" o35f2@stx)) o3626@ls/false) ((lambda (o362c@t) ((lambda (o362e@ls/false) (if o362e@ls/false (apply (lambda (o3630@e o3631@p) (list 'let (list (list 't o3630@e)) (list 'if 't (cons o3631@p '(t)) (o35fc@f (car o35ff@cls*) (cdr o35ff@cls*))))) o362e@ls/false) ((lambda (o3634@t) ((lambda (o3636@ls/false) (if o3636@ls/false (apply (lambda (o3638@e) (list 'or o3638@e (o35fc@f (car o35ff@cls*) (cdr o35ff@cls*)))) o3636@ls/false) ((lambda (o363a@t) ((lambda (o363c@ls/false) (if o363c@ls/false (apply (lambda (o363e@e o363f@e*) (list 'if o363e@e (cons 'begin o363f@e*) (o35fc@f (car o35ff@cls*) (cdr o35ff@cls*)))) o363c@ls/false) ((lambda (o3642@t) ((lambda (o3644@ls/false) (if o3644@ls/false (apply (lambda () (o2fe3@syntax-violation '#f '"invalid last clause" o35f2@stx)) o3644@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3642@t))) (o2efa@syntax-dispatch o3642@t '_))) o363a@t))) (o2efa@syntax-dispatch o363a@t '(any . each-any)))) o3634@t))) (o2efa@syntax-dispatch o3634@t '(any)))) o362c@t))) (o2efa@syntax-dispatch o362c@t '(any #(scheme-id =>) any)))) o3624@t))) (o2efa@syntax-dispatch o3624@t '(#(scheme-id else) any . each-any)))) o35fe@cls))))) o35fc@f) o35f8@cls o35f9@cls*))) o35f6@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o35f4@t))) (o2efa@syntax-dispatch o35f4@t '(_ any . each-any)))) o35f2@stx))) (set! o2ee0@do-include (lambda (o3646@stx o3647@id o3648@filename) ((lambda (o364c@filename) (begin (if (not (and (string? o364c@filename) (o2cef@id? o3647@id))) (o2fe3@syntax-violation '#f '"invalid syntax" o3646@stx) (void)) (cons (o2eb0@bless 'begin) (with-input-from-file o364c@filename (lambda () ((letrec ((o364e@f (lambda (o3650@ls) ((lambda (o3652@x) (if (eof-object? o3652@x) (reverse o3650@ls) (o364e@f (cons (o2ccd@datum->stx o3647@id o3652@x) o3650@ls)))) (o288c@o27a9@read-annotated))))) o364e@f) '())))))) (o2d05@stx->datum o3648@filename)))) (set! o2ee2@include-macro (lambda (o3654@e) ((lambda (o3656@t) ((lambda (o3658@ls/false) (if o3658@ls/false (apply (lambda (o365a@id o365b@filename) (o2ee0@do-include o3654@e o365a@id o365b@filename)) o3658@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3656@t))) (o2efa@syntax-dispatch o3656@t '(any any)))) o3654@e))) (set! o2ee4@include-into-macro (lambda (o365e@e) ((lambda (o3660@t) ((lambda (o3662@ls/false) (if o3662@ls/false (apply (lambda (o3664@id o3665@filename) (o2ee0@do-include o365e@e o3664@id o3665@filename)) o3662@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3660@t))) (o2efa@syntax-dispatch o3660@t '(_ any any)))) o365e@e))) (set! o2ee6@syntax-rules-macro (lambda (o3668@e) ((lambda (o366a@t) ((lambda (o366c@ls/false) (if o366c@ls/false (apply (lambda (o366e@lits o366f@pat* o3670@tmp*) (begin (o2f00@verify-literals o366e@lits o3668@e) (o2eb0@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons o366e@lits (map (lambda (o3674@pat o3675@tmp) ((lambda (o3678@t) ((lambda (o367a@ls/false) (if o367a@ls/false (apply (lambda (o367c@rest) (list (cons 'g o367c@rest) (list 'syntax o3675@tmp))) o367a@ls/false) ((lambda (o367e@t) ((lambda (o3680@ls/false) (if o3680@ls/false (apply (lambda () (o2fe3@syntax-violation '#f '"invalid syntax-rules pattern" o3668@e o3674@pat)) o3680@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o367e@t))) (o2efa@syntax-dispatch o367e@t '_))) o3678@t))) (o2efa@syntax-dispatch o3678@t '(_ . any)))) o3674@pat)) o366f@pat* o3670@tmp*)))))))) o366c@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o366a@t))) (o2efa@syntax-dispatch o366a@t '(_ each-any . #(each (any any)))))) o3668@e))) (set! o2ee8@quasiquote-macro ((lambda () ((lambda (o3683@datum o369f@quasicons* o36a1@quasicons o36a3@quasiappend o36a5@quasivector o36a7@vquasi o36a9@quasi) (begin (set! o3683@datum (lambda (o3784@x) (list (o2e84@scheme-stx 'quote) (o2cd7@mkstx o3784@x '() '() '())))) (set! o369f@quasicons* (lambda (o377c@x o377d@y) ((letrec ((o3780@f (lambda (o3782@x) (if (null? o3782@x) o377d@y (o36a1@quasicons (car o3782@x) (o3780@f (cdr o3782@x))))))) o3780@f) o377c@x))) (set! o36a1@quasicons (lambda (o3756@x o3757@y) ((lambda (o375a@t) ((lambda (o375c@ls/false) (if o375c@ls/false (apply (lambda (o375e@dy) ((lambda (o3760@t) ((lambda (o3762@ls/false) (if o3762@ls/false (apply (lambda (o3764@dx) (list (o2e84@scheme-stx 'quote) (cons o3764@dx o375e@dy))) o3762@ls/false) ((lambda (o3766@t) ((lambda (o3768@ls/false) (if o3768@ls/false (apply (lambda () ((lambda (o376a@t) ((lambda (o376c@ls/false) (if o376c@ls/false (apply (lambda () (list (o2e84@scheme-stx 'list) o3756@x)) o376c@ls/false) ((lambda (o376e@t) ((lambda (o3770@ls/false) (if o3770@ls/false (apply (lambda () (list (o2e84@scheme-stx 'cons) o3756@x o3757@y)) o3770@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o376e@t))) (o2efa@syntax-dispatch o376e@t '_))) o376a@t))) (o2efa@syntax-dispatch o376a@t '()))) o375e@dy)) o3768@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3766@t))) (o2efa@syntax-dispatch o3766@t '_))) o3760@t))) (o2efa@syntax-dispatch o3760@t '(#(scheme-id quote) any)))) o3756@x)) o375c@ls/false) ((lambda (o3772@t) ((lambda (o3774@ls/false) (if o3774@ls/false (apply (lambda (o3776@stuff) (cons* (o2e84@scheme-stx 'list) o3756@x o3776@stuff)) o3774@ls/false) ((lambda (o3778@t) ((lambda (o377a@ls/false) (if o377a@ls/false (apply (lambda () (list (o2e84@scheme-stx 'cons) o3756@x o3757@y)) o377a@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3778@t))) (o2efa@syntax-dispatch o3778@t '_))) o3772@t))) (o2efa@syntax-dispatch o3772@t '(#(scheme-id list) . each-any)))) o375a@t))) (o2efa@syntax-dispatch o375a@t '(#(scheme-id quote) any)))) o3757@y))) (set! o36a3@quasiappend (lambda (o373c@x o373d@y) ((lambda (o3740@ls) (if (null? o3740@ls) (list (o2e84@scheme-stx 'quote) '()) (if (null? (cdr o3740@ls)) (car o3740@ls) (cons* (o2e84@scheme-stx 'append) o3740@ls)))) ((letrec ((o3742@f (lambda (o3744@x) (if (null? o3744@x) ((lambda (o3746@t) ((lambda (o3748@ls/false) (if o3748@ls/false (apply (lambda () '()) o3748@ls/false) ((lambda (o374a@t) ((lambda (o374c@ls/false) (if o374c@ls/false (apply (lambda () (list o373d@y)) o374c@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o374a@t))) (o2efa@syntax-dispatch o374a@t '_))) o3746@t))) (o2efa@syntax-dispatch o3746@t '(#(scheme-id quote) ())))) o373d@y) ((lambda (o374e@t) ((lambda (o3750@ls/false) (if o3750@ls/false (apply (lambda () (o3742@f (cdr o3744@x))) o3750@ls/false) ((lambda (o3752@t) ((lambda (o3754@ls/false) (if o3754@ls/false (apply (lambda () (cons (car o3744@x) (o3742@f (cdr o3744@x)))) o3754@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3752@t))) (o2efa@syntax-dispatch o3752@t '_))) o374e@t))) (o2efa@syntax-dispatch o374e@t '(#(scheme-id quote) ())))) (car o3744@x)))))) o3742@f) o373c@x)))) (set! o36a5@quasivector (lambda (o370a@x) ((lambda (o370c@pat-x) ((lambda (o370e@t) ((lambda (o3710@ls/false) (if o3710@ls/false (apply (lambda (o3712@x*) (list (o2e84@scheme-stx 'quote) (list->vector o3712@x*))) o3710@ls/false) ((lambda (o3714@t) ((lambda (o3716@ls/false) (if o3716@ls/false (apply (lambda () ((letrec ((o3718@f (lambda (o371a@x o371b@k) ((lambda (o371e@t) ((lambda (o3720@ls/false) (if o3720@ls/false (apply (lambda (o3722@x*) (o371b@k (map (lambda (o3724@x) (list (o2e84@scheme-stx 'quote) o3724@x)) o3722@x*))) o3720@ls/false) ((lambda (o3726@t) ((lambda (o3728@ls/false) (if o3728@ls/false (apply (lambda (o372a@x*) (o371b@k o372a@x*)) o3728@ls/false) ((lambda (o372c@t) ((lambda (o372e@ls/false) (if o372e@ls/false (apply (lambda (o3730@x o3731@y) (o3718@f o3731@y (lambda (o3734@ls) (o371b@k (cons o3730@x o3734@ls))))) o372e@ls/false) ((lambda (o3736@t) ((lambda (o3738@ls/false) (if o3738@ls/false (apply (lambda () (list (o2e84@scheme-stx 'list->vector) o370c@pat-x)) o3738@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3736@t))) (o2efa@syntax-dispatch o3736@t '_))) o372c@t))) (o2efa@syntax-dispatch o372c@t '(#(scheme-id cons) any any)))) o3726@t))) (o2efa@syntax-dispatch o3726@t '(#(scheme-id list) . each-any)))) o371e@t))) (o2efa@syntax-dispatch o371e@t '(#(scheme-id quote) each-any)))) o371a@x)))) o3718@f) o370a@x (lambda (o373a@ls) (cons* (o2e84@scheme-stx 'vector) o373a@ls)))) o3716@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3714@t))) (o2efa@syntax-dispatch o3714@t '_))) o370e@t))) (o2efa@syntax-dispatch o370e@t '(#(scheme-id quote) each-any)))) o370c@pat-x)) o370a@x))) (set! o36a7@vquasi (lambda (o36e8@p o36e9@lev) ((lambda (o36ec@t) ((lambda (o36ee@ls/false) (if o36ee@ls/false (apply (lambda (o36f0@p o36f1@q) ((lambda (o36f4@t) ((lambda (o36f6@ls/false) (if o36f6@ls/false (apply (lambda (o36f8@p) (if (= o36e9@lev '0) (o369f@quasicons* o36f8@p (o36a7@vquasi o36f1@q o36e9@lev)) (o36a1@quasicons (o36a1@quasicons (o3683@datum 'unquote) (o36a9@quasi o36f8@p (- o36e9@lev '1))) (o36a7@vquasi o36f1@q o36e9@lev)))) o36f6@ls/false) ((lambda (o36fa@t) ((lambda (o36fc@ls/false) (if o36fc@ls/false (apply (lambda (o36fe@p) (if (= o36e9@lev '0) (o36a3@quasiappend o36fe@p (o36a7@vquasi o36f1@q o36e9@lev)) (o36a1@quasicons (o36a1@quasicons (o3683@datum 'unquote-splicing) (o36a9@quasi o36fe@p (- o36e9@lev '1))) (o36a7@vquasi o36f1@q o36e9@lev)))) o36fc@ls/false) ((lambda (o3700@t) ((lambda (o3702@ls/false) (if o3702@ls/false (apply (lambda (o3704@p) (o36a1@quasicons (o36a9@quasi o3704@p o36e9@lev) (o36a7@vquasi o36f1@q o36e9@lev))) o3702@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3700@t))) (o2efa@syntax-dispatch o3700@t 'any))) o36fa@t))) (o2efa@syntax-dispatch o36fa@t '(#(scheme-id unquote-splicing) . each-any)))) o36f4@t))) (o2efa@syntax-dispatch o36f4@t '(#(scheme-id unquote) . each-any)))) o36f0@p)) o36ee@ls/false) ((lambda (o3706@t) ((lambda (o3708@ls/false) (if o3708@ls/false (apply (lambda () (list (o2e84@scheme-stx 'quote) '())) o3708@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3706@t))) (o2efa@syntax-dispatch o3706@t '()))) o36ec@t))) (o2efa@syntax-dispatch o36ec@t '(any . any)))) o36e8@p))) (set! o36a9@quasi (lambda (o36b2@p o36b3@lev) ((lambda (o36b6@t) ((lambda (o36b8@ls/false) (if o36b8@ls/false (apply (lambda (o36ba@p) (if (= o36b3@lev '0) o36ba@p (o36a1@quasicons (o3683@datum 'unquote) (o36a9@quasi (list o36ba@p) (- o36b3@lev '1))))) o36b8@ls/false) ((lambda (o36bc@t) ((lambda (o36be@ls/false) (if o36be@ls/false (apply (lambda (o36c0@p o36c1@q) (if (= o36b3@lev '0) (o369f@quasicons* o36c0@p (o36a9@quasi o36c1@q o36b3@lev)) (o36a1@quasicons (o36a1@quasicons (o3683@datum 'unquote) (o36a9@quasi o36c0@p (- o36b3@lev '1))) (o36a9@quasi o36c1@q o36b3@lev)))) o36be@ls/false) ((lambda (o36c4@t) ((lambda (o36c6@ls/false) (if o36c6@ls/false (apply (lambda (o36c8@p o36c9@q) (if (= o36b3@lev '0) (o36a3@quasiappend o36c8@p (o36a9@quasi o36c9@q o36b3@lev)) (o36a1@quasicons (o36a1@quasicons (o3683@datum 'unquote-splicing) (o36a9@quasi o36c8@p (- o36b3@lev '1))) (o36a9@quasi o36c9@q o36b3@lev)))) o36c6@ls/false) ((lambda (o36cc@t) ((lambda (o36ce@ls/false) (if o36ce@ls/false (apply (lambda (o36d0@p) (o36a1@quasicons (o3683@datum 'quasiquote) (o36a9@quasi (list o36d0@p) (+ o36b3@lev '1)))) o36ce@ls/false) ((lambda (o36d2@t) ((lambda (o36d4@ls/false) (if o36d4@ls/false (apply (lambda (o36d6@p o36d7@q) (o36a1@quasicons (o36a9@quasi o36d6@p o36b3@lev) (o36a9@quasi o36d7@q o36b3@lev))) o36d4@ls/false) ((lambda (o36da@t) ((lambda (o36dc@ls/false) (if (and o36dc@ls/false (apply (lambda (o36de@x) (not (o2cb7@stx? o36de@x))) o36dc@ls/false)) (apply (lambda (o36e0@x) (o36a5@quasivector (o36a7@vquasi o36e0@x o36b3@lev))) o36dc@ls/false) ((lambda (o36e2@t) ((lambda (o36e4@ls/false) (if o36e4@ls/false (apply (lambda (o36e6@p) (list (o2e84@scheme-stx 'quote) o36e6@p)) o36e4@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o36e2@t))) (o2efa@syntax-dispatch o36e2@t 'any))) o36da@t))) (o2efa@syntax-dispatch o36da@t '#(vector each-any)))) o36d2@t))) (o2efa@syntax-dispatch o36d2@t '(any . any)))) o36cc@t))) (o2efa@syntax-dispatch o36cc@t '(#(scheme-id quasiquote) any)))) o36c4@t))) (o2efa@syntax-dispatch o36c4@t '((#(scheme-id unquote-splicing) . each-any) . any)))) o36bc@t))) (o2efa@syntax-dispatch o36bc@t '((#(scheme-id unquote) . each-any) . any)))) o36b6@t))) (o2efa@syntax-dispatch o36b6@t '(#(scheme-id unquote) any)))) o36b2@p))) (lambda (o36aa@x) ((lambda (o36ac@t) ((lambda (o36ae@ls/false) (if o36ae@ls/false (apply (lambda (o36b0@e) (o36a9@quasi o36b0@e '0)) o36ae@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o36ac@t))) (o2efa@syntax-dispatch o36ac@t '(_ any)))) o36aa@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! o2eea@quasisyntax-macro ((lambda () ((lambda (o3787@quasi) (begin (set! o3787@quasi (lambda (o37a2@p o37a3@lev) ((lambda (o37a6@t) ((lambda (o37a8@ls/false) (if o37a8@ls/false (apply (lambda (o37aa@p) (if (= o37a3@lev '0) ((lambda (o37ac@g) (values (list o37ac@g) (list o37aa@p) o37ac@g)) (gensym)) (call-with-values (lambda () (o3787@quasi o37aa@p (- o37a3@lev '1))) (lambda (o37b4@o37af o37b5@o37b1 o37b6@o37b3) ((lambda (o37ba@p o37bb@rhs* o37bc@lhs*) (values o37bc@lhs* o37bb@rhs* (list 'unsyntax o37ba@p))) o37b6@o37b3 o37b5@o37b1 o37b4@o37af))))) o37a8@ls/false) ((lambda (o37c0@t) ((lambda (o37c2@ls/false) (if (and o37c2@ls/false (apply (lambda () (= o37a3@lev '0)) o37c2@ls/false)) (apply (lambda () (o2fe3@syntax-violation '#f '"incorrect use of unsyntax" o37a2@p)) o37c2@ls/false) ((lambda (o37c4@t) ((lambda (o37c6@ls/false) (if o37c6@ls/false (apply (lambda (o37c8@p* o37c9@q) (call-with-values (lambda () (o3787@quasi o37c9@q o37a3@lev)) (lambda (o37d2@o37cd o37d3@o37cf o37d4@o37d1) ((lambda (o37d8@q o37d9@rhs* o37da@lhs*) (if (= o37a3@lev '0) ((lambda (o37de@g*) (values (append o37de@g* o37da@lhs*) (append o37c8@p* o37d9@rhs*) (append o37de@g* o37d8@q))) (map (lambda (o37e0@x) (gensym)) o37c8@p*)) (call-with-values (lambda () (o3787@quasi o37c8@p* (- o37a3@lev '1))) (lambda (o37e8@o37e3 o37e9@o37e5 o37ea@o37e7) ((lambda (o37ee@p* o37ef@rhs2* o37f0@lhs2*) (values (append o37f0@lhs2* o37da@lhs*) (append o37ef@rhs2* o37d9@rhs*) (cons (cons 'unsyntax o37ee@p*) o37d8@q))) o37ea@o37e7 o37e9@o37e5 o37e8@o37e3))))) o37d4@o37d1 o37d3@o37cf o37d2@o37cd)))) o37c6@ls/false) ((lambda (o37f4@t) ((lambda (o37f6@ls/false) (if o37f6@ls/false (apply (lambda (o37f8@p* o37f9@q) (call-with-values (lambda () (o3787@quasi o37f9@q o37a3@lev)) (lambda (o3802@o37fd o3803@o37ff o3804@o3801) ((lambda (o3808@q o3809@rhs* o380a@lhs*) (if (= o37a3@lev '0) ((lambda (o380e@g*) (values (append (map (lambda (o3810@g) (cons o3810@g '(...))) o380e@g*) o380a@lhs*) (append o37f8@p* o3809@rhs*) (append (apply append (map (lambda (o3812@g) (cons o3812@g '(...))) o380e@g*)) o3808@q))) (map (lambda (o3814@x) (gensym)) o37f8@p*)) (call-with-values (lambda () (o3787@quasi o37f8@p* (- o37a3@lev '1))) (lambda (o381c@o3817 o381d@o3819 o381e@o381b) ((lambda (o3822@p* o3823@rhs2* o3824@lhs2*) (values (append o3824@lhs2* o380a@lhs*) (append o3823@rhs2* o3809@rhs*) (cons (cons 'unsyntax-splicing o3822@p*) o3808@q))) o381e@o381b o381d@o3819 o381c@o3817))))) o3804@o3801 o3803@o37ff o3802@o37fd)))) o37f6@ls/false) ((lambda (o3828@t) ((lambda (o382a@ls/false) (if (and o382a@ls/false (apply (lambda () (= o37a3@lev '0)) o382a@ls/false)) (apply (lambda () (o2fe3@syntax-violation '#f '"incorrect use of unsyntax-splicing" o37a2@p)) o382a@ls/false) ((lambda (o382c@t) ((lambda (o382e@ls/false) (if o382e@ls/false (apply (lambda (o3830@p) (call-with-values (lambda () (o3787@quasi o3830@p (+ o37a3@lev '1))) (lambda (o3838@o3833 o3839@o3835 o383a@o3837) ((lambda (o383e@p o383f@rhs* o3840@lhs*) (values o3840@lhs* o383f@rhs* (list 'quasisyntax o383e@p))) o383a@o3837 o3839@o3835 o3838@o3833)))) o382e@ls/false) ((lambda (o3844@t) ((lambda (o3846@ls/false) (if o3846@ls/false (apply (lambda (o3848@p o3849@q) (call-with-values (lambda () (o3787@quasi o3848@p o37a3@lev)) (lambda (o3858@o384d o3859@o384f o385a@o3851) (call-with-values (lambda () (o3787@quasi o3849@q o37a3@lev)) (lambda (o385e@o3853 o385f@o3855 o3860@o3857) ((lambda (o3864@q o3865@rhs2* o3866@lhs2* o3867@p o3868@rhs* o3869@lhs*) (values (append o3866@lhs2* o3869@lhs*) (append o3865@rhs2* o3868@rhs*) (cons o3867@p o3864@q))) o3860@o3857 o385f@o3855 o385e@o3853 o385a@o3851 o3859@o384f o3858@o384d)))))) o3846@ls/false) ((lambda (o3870@t) ((lambda (o3872@ls/false) (if o3872@ls/false (apply (lambda (o3874@x*) (call-with-values (lambda () (o3787@quasi o3874@x* o37a3@lev)) (lambda (o387c@o3877 o387d@o3879 o387e@o387b) ((lambda (o3882@x* o3883@rhs* o3884@lhs*) (values o3884@lhs* o3883@rhs* (list->vector o3882@x*))) o387e@o387b o387d@o3879 o387c@o3877)))) o3872@ls/false) ((lambda (o3888@t) ((lambda (o388a@ls/false) (if o388a@ls/false (apply (lambda () (values '() '() o37a2@p)) o388a@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3888@t))) (o2efa@syntax-dispatch o3888@t '_))) o3870@t))) (o2efa@syntax-dispatch o3870@t '#(vector each-any)))) o3844@t))) (o2efa@syntax-dispatch o3844@t '(any . any)))) o382c@t))) (o2efa@syntax-dispatch o382c@t '(#(scheme-id quasisyntax) any)))) o3828@t))) (o2efa@syntax-dispatch o3828@t '#(scheme-id unsyntax-splicing)))) o37f4@t))) (o2efa@syntax-dispatch o37f4@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) o37c4@t))) (o2efa@syntax-dispatch o37c4@t '((#(scheme-id unsyntax) . each-any) . any)))) o37c0@t))) (o2efa@syntax-dispatch o37c0@t '#(scheme-id unsyntax)))) o37a6@t))) (o2efa@syntax-dispatch o37a6@t '(#(scheme-id unsyntax) any)))) o37a2@p))) (lambda (o3788@x) ((lambda (o378a@t) ((lambda (o378c@ls/false) (if o378c@ls/false (apply (lambda (o378e@e) (call-with-values (lambda () (o3787@quasi o378e@e '0)) (lambda (o3796@o3791 o3797@o3793 o3798@o3795) ((lambda (o379c@v o379d@rhs* o379e@lhs*) (o2eb0@bless (list 'syntax-case (cons 'list o379d@rhs*) '() (list o379e@lhs* (list 'syntax o379c@v))))) o3798@o3795 o3797@o3793 o3796@o3791)))) o378c@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o378a@t))) (o2efa@syntax-dispatch o378a@t '(_ any)))) o3788@x)))) '#f)))) (set! o2eec@define-struct-macro (lambda (o388c@stx) (o2fe3@syntax-violation '#f '"define-struct not supported" o388c@stx))) (set! o2eee@define-record-type-macro (lambda (o388e@x) ((lambda (o3891@id o3893@get-record-name o3895@get-record-constructor-name o3897@get-record-predicate-name o3899@get-clause o389b@foo-rtd-code o389d@parent-rtd-code o389f@parent-rcd-code o38a1@foo-rcd-code o38a3@get-protocol-code o38a5@get-fields o38a7@get-mutator-indices o38a9@get-mutators o38ab@get-accessors o38ad@enumerate o38af@do-define-record o38b1@verify-clauses) (begin (set! o3891@id (lambda (o3a84@ctxt . o3a86@str*) (o2fe7@datum->syntax o3a84@ctxt (string->symbol (apply string-append (map (lambda (o3a88@x) (if (symbol? o3a88@x) (symbol->string o3a88@x) (if (string? o3a88@x) o3a88@x (assertion-violation 'define-record-type '"BUG")))) o3a86@str*)))))) (set! o3893@get-record-name (lambda (o3a72@spec) ((lambda (o3a74@t) ((lambda (o3a76@ls/false) (if o3a76@ls/false (apply (lambda (o3a78@foo o3a79@make-foo o3a7a@foo?) o3a78@foo) o3a76@ls/false) ((lambda (o3a7e@t) ((lambda (o3a80@ls/false) (if o3a80@ls/false (apply (lambda (o3a82@foo) o3a82@foo) o3a80@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3a7e@t))) (o2efa@syntax-dispatch o3a7e@t 'any))) o3a74@t))) (o2efa@syntax-dispatch o3a74@t '(any any any)))) o3a72@spec))) (set! o3895@get-record-constructor-name (lambda (o3a5e@spec) ((lambda (o3a60@t) ((lambda (o3a62@ls/false) (if o3a62@ls/false (apply (lambda (o3a64@foo o3a65@make-foo o3a66@foo?) o3a65@make-foo) o3a62@ls/false) ((lambda (o3a6a@t) ((lambda (o3a6c@ls/false) (if (and o3a6c@ls/false (apply (lambda (o3a6e@foo) (o2cef@id? o3a6e@foo)) o3a6c@ls/false)) (apply (lambda (o3a70@foo) (o3891@id o3a70@foo '"make-" (o2d05@stx->datum o3a70@foo))) o3a6c@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3a6a@t))) (o2efa@syntax-dispatch o3a6a@t 'any))) o3a60@t))) (o2efa@syntax-dispatch o3a60@t '(any any any)))) o3a5e@spec))) (set! o3897@get-record-predicate-name (lambda (o3a4a@spec) ((lambda (o3a4c@t) ((lambda (o3a4e@ls/false) (if o3a4e@ls/false (apply (lambda (o3a50@foo o3a51@make-foo o3a52@foo?) o3a52@foo?) o3a4e@ls/false) ((lambda (o3a56@t) ((lambda (o3a58@ls/false) (if (and o3a58@ls/false (apply (lambda (o3a5a@foo) (o2cef@id? o3a5a@foo)) o3a58@ls/false)) (apply (lambda (o3a5c@foo) (o3891@id o3a5c@foo (o2d05@stx->datum o3a5c@foo) '"?")) o3a58@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3a56@t))) (o2efa@syntax-dispatch o3a56@t 'any))) o3a4c@t))) (o2efa@syntax-dispatch o3a4c@t '(any any any)))) o3a4a@spec))) (set! o3899@get-clause (lambda (o3a38@id o3a39@ls) ((lambda (o3a3c@t) ((lambda (o3a3e@ls/false) (if o3a3e@ls/false (apply (lambda () '#f) o3a3e@ls/false) ((lambda (o3a40@t) ((lambda (o3a42@ls/false) (if o3a42@ls/false (apply (lambda (o3a44@x o3a45@rest o3a46@ls) (if (o2cf7@free-id=? (o2eb0@bless o3a38@id) o3a44@x) (cons o3a44@x o3a45@rest) (o3899@get-clause o3a38@id o3a46@ls))) o3a42@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3a40@t))) (o2efa@syntax-dispatch o3a40@t '((any . any) . any)))) o3a3c@t))) (o2efa@syntax-dispatch o3a3c@t '()))) o3a39@ls))) (set! o389b@foo-rtd-code (lambda (o39e6@name o39e7@clause* o39e8@parent-rtd-code) ((lambda (o39ed@convert-field-spec*) (begin (set! o39ed@convert-field-spec* (lambda (o3a1e@ls) (list->vector (map (lambda (o3a20@x) ((lambda (o3a22@t) ((lambda (o3a24@ls/false) (if o3a24@ls/false (apply (lambda (o3a26@name o3a27@rest) (list 'mutable o3a26@name)) o3a24@ls/false) ((lambda (o3a2a@t) ((lambda (o3a2c@ls/false) (if o3a2c@ls/false (apply (lambda (o3a2e@name o3a2f@rest) (list 'immutable o3a2e@name)) o3a2c@ls/false) ((lambda (o3a32@t) ((lambda (o3a34@ls/false) (if o3a34@ls/false (apply (lambda (o3a36@name) (list 'immutable o3a36@name)) o3a34@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3a32@t))) (o2efa@syntax-dispatch o3a32@t 'any))) o3a2a@t))) (o2efa@syntax-dispatch o3a2a@t '(#(scheme-id immutable) any . any)))) o3a22@t))) (o2efa@syntax-dispatch o3a22@t '(#(scheme-id mutable) any . any)))) o3a20@x)) o3a1e@ls)))) ((lambda (o39ee@uid-code o39ef@sealed? o39f0@opaque? o39f1@fields) (o2eb0@bless (list 'make-record-type-descriptor (list 'quote o39e6@name) o39e8@parent-rtd-code o39ee@uid-code o39ef@sealed? o39f0@opaque? o39f1@fields))) ((lambda (o39f6@t) ((lambda (o39f8@ls/false) (if o39f8@ls/false (apply (lambda () (list 'quote (gensym))) o39f8@ls/false) ((lambda (o39fa@t) ((lambda (o39fc@ls/false) (if o39fc@ls/false (apply (lambda (o39fe@uid) (list 'quote o39fe@uid)) o39fc@ls/false) ((lambda (o3a00@t) ((lambda (o3a02@ls/false) (if o3a02@ls/false (apply (lambda () '#f) o3a02@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3a00@t))) (o2efa@syntax-dispatch o3a00@t '_))) o39fa@t))) (o2efa@syntax-dispatch o39fa@t '(_ any)))) o39f6@t))) (o2efa@syntax-dispatch o39f6@t '(_)))) (o3899@get-clause 'nongenerative o39e7@clause*)) ((lambda (o3a04@t) ((lambda (o3a06@ls/false) (if o3a06@ls/false (apply (lambda () '#t) o3a06@ls/false) ((lambda (o3a08@t) ((lambda (o3a0a@ls/false) (if o3a0a@ls/false (apply (lambda () '#f) o3a0a@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3a08@t))) (o2efa@syntax-dispatch o3a08@t '_))) o3a04@t))) (o2efa@syntax-dispatch o3a04@t '(_ #(atom #t))))) (o3899@get-clause 'sealed o39e7@clause*)) ((lambda (o3a0c@t) ((lambda (o3a0e@ls/false) (if o3a0e@ls/false (apply (lambda () '#t) o3a0e@ls/false) ((lambda (o3a10@t) ((lambda (o3a12@ls/false) (if o3a12@ls/false (apply (lambda () '#f) o3a12@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3a10@t))) (o2efa@syntax-dispatch o3a10@t '_))) o3a0c@t))) (o2efa@syntax-dispatch o3a0c@t '(_ #(atom #t))))) (o3899@get-clause 'opaque o39e7@clause*)) ((lambda (o3a14@t) ((lambda (o3a16@ls/false) (if o3a16@ls/false (apply (lambda (o3a18@field-spec*) (list 'quote (o39ed@convert-field-spec* o3a18@field-spec*))) o3a16@ls/false) ((lambda (o3a1a@t) ((lambda (o3a1c@ls/false) (if o3a1c@ls/false (apply (lambda () ''#()) o3a1c@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3a1a@t))) (o2efa@syntax-dispatch o3a1a@t '_))) o3a14@t))) (o2efa@syntax-dispatch o3a14@t '(_ . each-any)))) (o3899@get-clause 'fields o39e7@clause*))))) '#f))) (set! o389d@parent-rtd-code (lambda (o39ce@clause*) ((lambda (o39d0@t) ((lambda (o39d2@ls/false) (if o39d2@ls/false (apply (lambda (o39d4@name) (list 'record-type-descriptor o39d4@name)) o39d2@ls/false) ((lambda (o39d6@t) ((lambda (o39d8@ls/false) (if o39d8@ls/false (apply (lambda () ((lambda (o39da@t) ((lambda (o39dc@ls/false) (if o39dc@ls/false (apply (lambda (o39de@rtd o39df@rcd) o39de@rtd) o39dc@ls/false) ((lambda (o39e2@t) ((lambda (o39e4@ls/false) (if o39e4@ls/false (apply (lambda () '#f) o39e4@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o39e2@t))) (o2efa@syntax-dispatch o39e2@t '#(atom #f)))) o39da@t))) (o2efa@syntax-dispatch o39da@t '(_ any any)))) (o3899@get-clause 'parent-rtd o39ce@clause*))) o39d8@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o39d6@t))) (o2efa@syntax-dispatch o39d6@t '#(atom #f)))) o39d0@t))) (o2efa@syntax-dispatch o39d0@t '(_ any)))) (o3899@get-clause 'parent o39ce@clause*)))) (set! o389f@parent-rcd-code (lambda (o39b6@clause*) ((lambda (o39b8@t) ((lambda (o39ba@ls/false) (if o39ba@ls/false (apply (lambda (o39bc@name) (list 'record-constructor-descriptor o39bc@name)) o39ba@ls/false) ((lambda (o39be@t) ((lambda (o39c0@ls/false) (if o39c0@ls/false (apply (lambda () ((lambda (o39c2@t) ((lambda (o39c4@ls/false) (if o39c4@ls/false (apply (lambda (o39c6@rtd o39c7@rcd) o39c7@rcd) o39c4@ls/false) ((lambda (o39ca@t) ((lambda (o39cc@ls/false) (if o39cc@ls/false (apply (lambda () '#f) o39cc@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o39ca@t))) (o2efa@syntax-dispatch o39ca@t '#(atom #f)))) o39c2@t))) (o2efa@syntax-dispatch o39c2@t '(_ any any)))) (o3899@get-clause 'parent-rtd o39b6@clause*))) o39c0@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o39be@t))) (o2efa@syntax-dispatch o39be@t '#(atom #f)))) o39b8@t))) (o2efa@syntax-dispatch o39b8@t '(_ any)))) (o3899@get-clause 'parent o39b6@clause*)))) (set! o38a1@foo-rcd-code (lambda (o39ae@clause* o39af@foo-rtd o39b0@protocol o39b1@parent-rcd-code) (list 'make-record-constructor-descriptor o39af@foo-rtd o39b1@parent-rcd-code o39b0@protocol))) (set! o38a3@get-protocol-code (lambda (o39a2@clause*) ((lambda (o39a4@t) ((lambda (o39a6@ls/false) (if o39a6@ls/false (apply (lambda (o39a8@expr) o39a8@expr) o39a6@ls/false) ((lambda (o39aa@t) ((lambda (o39ac@ls/false) (if o39ac@ls/false (apply (lambda () '#f) o39ac@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o39aa@t))) (o2efa@syntax-dispatch o39aa@t '_))) o39a4@t))) (o2efa@syntax-dispatch o39a4@t '(_ any)))) (o3899@get-clause 'protocol o39a2@clause*)))) (set! o38a5@get-fields (lambda (o3990@clause*) ((lambda (o3992@t) ((lambda (o3994@ls/false) (if o3994@ls/false (apply (lambda () '()) o3994@ls/false) ((lambda (o3996@t) ((lambda (o3998@ls/false) (if o3998@ls/false (apply (lambda (o399a@f*) o399a@f*) o3998@ls/false) ((lambda (o399c@t) ((lambda (o399e@ls/false) (if o399e@ls/false (apply (lambda (o39a0@rest) (o38a5@get-fields o39a0@rest)) o399e@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o399c@t))) (o2efa@syntax-dispatch o399c@t '(_ . any)))) o3996@t))) (o2efa@syntax-dispatch o3996@t '((#(scheme-id fields) . each-any) . _)))) o3992@t))) (o2efa@syntax-dispatch o3992@t '()))) o3990@clause*))) (set! o38a7@get-mutator-indices (lambda (o3978@fields) ((letrec ((o397a@f (lambda (o397c@fields o397d@i) ((lambda (o3980@t) ((lambda (o3982@ls/false) (if o3982@ls/false (apply (lambda () '()) o3982@ls/false) ((lambda (o3984@t) ((lambda (o3986@ls/false) (if o3986@ls/false (apply (lambda (o3988@rest) (cons o397d@i (o397a@f o3988@rest (+ o397d@i '1)))) o3986@ls/false) ((lambda (o398a@t) ((lambda (o398c@ls/false) (if o398c@ls/false (apply (lambda (o398e@rest) (o397a@f o398e@rest (+ o397d@i '1))) o398c@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o398a@t))) (o2efa@syntax-dispatch o398a@t '(_ . any)))) o3984@t))) (o2efa@syntax-dispatch o3984@t '((#(scheme-id mutable) . _) . any)))) o3980@t))) (o2efa@syntax-dispatch o3980@t '()))) o397c@fields)))) o397a@f) o3978@fields '0))) (set! o38a9@get-mutators (lambda (o394e@foo o394f@fields) ((lambda (o3953@gen-name) (begin (set! o3953@gen-name (lambda (o3976@x) (o2fe7@datum->syntax o394e@foo (string->symbol (string-append (symbol->string (o2fe9@syntax->datum o394e@foo)) '"-" (symbol->string (o2fe9@syntax->datum o3976@x)) '"-set!"))))) ((letrec ((o3954@f (lambda (o3956@fields) ((lambda (o3958@t) ((lambda (o395a@ls/false) (if o395a@ls/false (apply (lambda () '()) o395a@ls/false) ((lambda (o395c@t) ((lambda (o395e@ls/false) (if o395e@ls/false (apply (lambda (o3960@name o3961@accessor o3962@mutator o3963@rest) (cons o3962@mutator (o3954@f o3963@rest))) o395e@ls/false) ((lambda (o3968@t) ((lambda (o396a@ls/false) (if o396a@ls/false (apply (lambda (o396c@name o396d@rest) (cons (o3953@gen-name o396c@name) (o3954@f o396d@rest))) o396a@ls/false) ((lambda (o3970@t) ((lambda (o3972@ls/false) (if o3972@ls/false (apply (lambda (o3974@rest) (o3954@f o3974@rest)) o3972@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3970@t))) (o2efa@syntax-dispatch o3970@t '(_ . any)))) o3968@t))) (o2efa@syntax-dispatch o3968@t '((#(scheme-id mutable) any) . any)))) o395c@t))) (o2efa@syntax-dispatch o395c@t '((#(scheme-id mutable) any any any) . any)))) o3958@t))) (o2efa@syntax-dispatch o3958@t '()))) o3956@fields)))) o3954@f) o394f@fields))) '#f))) (set! o38ab@get-accessors (lambda (o390a@foo o390b@fields) ((lambda (o390f@gen-name) (begin (set! o390f@gen-name (lambda (o394c@x) (o2fe7@datum->syntax o390a@foo (string->symbol (string-append (symbol->string (o2fe9@syntax->datum o390a@foo)) '"-" (symbol->string (o2fe9@syntax->datum o394c@x))))))) (map (lambda (o3910@field) ((lambda (o3912@t) ((lambda (o3914@ls/false) (if (and o3914@ls/false (apply (lambda (o3916@name o3917@accessor o3918@mutator) (o2cef@id? o3917@accessor)) o3914@ls/false)) (apply (lambda (o391c@name o391d@accessor o391e@mutator) o391d@accessor) o3914@ls/false) ((lambda (o3922@t) ((lambda (o3924@ls/false) (if (and o3924@ls/false (apply (lambda (o3926@name o3927@accessor) (o2cef@id? o3927@accessor)) o3924@ls/false)) (apply (lambda (o392a@name o392b@accessor) o392b@accessor) o3924@ls/false) ((lambda (o392e@t) ((lambda (o3930@ls/false) (if (and o3930@ls/false (apply (lambda (o3932@name) (o2cef@id? o3932@name)) o3930@ls/false)) (apply (lambda (o3934@name) (o390f@gen-name o3934@name)) o3930@ls/false) ((lambda (o3936@t) ((lambda (o3938@ls/false) (if (and o3938@ls/false (apply (lambda (o393a@name) (o2cef@id? o393a@name)) o3938@ls/false)) (apply (lambda (o393c@name) (o390f@gen-name o393c@name)) o3938@ls/false) ((lambda (o393e@t) ((lambda (o3940@ls/false) (if (and o3940@ls/false (apply (lambda (o3942@name) (o2cef@id? o3942@name)) o3940@ls/false)) (apply (lambda (o3944@name) (o390f@gen-name o3944@name)) o3940@ls/false) ((lambda (o3946@t) ((lambda (o3948@ls/false) (if o3948@ls/false (apply (lambda (o394a@others) (o2fe3@syntax-violation '#f '"invalid field spec" o3910@field)) o3948@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3946@t))) (o2efa@syntax-dispatch o3946@t 'any))) o393e@t))) (o2efa@syntax-dispatch o393e@t 'any))) o3936@t))) (o2efa@syntax-dispatch o3936@t '(#(scheme-id immutable) any)))) o392e@t))) (o2efa@syntax-dispatch o392e@t '(#(scheme-id mutable) any)))) o3922@t))) (o2efa@syntax-dispatch o3922@t '(#(scheme-id immutable) any any)))) o3912@t))) (o2efa@syntax-dispatch o3912@t '(#(scheme-id mutable) any any any)))) o3910@field)) o390b@fields))) '#f))) (set! o38ad@enumerate (lambda (o3902@ls) ((letrec ((o3904@f (lambda (o3906@ls o3907@i) (if (null? o3906@ls) '() (cons o3907@i (o3904@f (cdr o3906@ls) (+ o3907@i '1))))))) o3904@f) o3902@ls '0))) (set! o38af@do-define-record (lambda (o38da@namespec o38db@clause*) ((lambda (o38de@foo) ((lambda (o38e0@foo-rtd) ((lambda (o38e2@foo-rcd) ((lambda (o38e4@protocol) ((lambda (o38e6@make-foo) ((lambda (o38e8@fields) ((lambda (o38ea@idx*) ((lambda (o38ec@foo-x*) ((lambda (o38ee@set-foo-x!*) ((lambda (o38f0@set-foo-idx*) ((lambda (o38f2@foo?) ((lambda (o38f4@foo-rtd-code) ((lambda (o38f6@foo-rcd-code) ((lambda (o38f8@protocol-code) ((lambda () (o2eb0@bless (cons 'begin (cons (list 'define o38e0@foo-rtd o38f4@foo-rtd-code) (cons (list 'define o38e4@protocol o38f8@protocol-code) (cons (list 'define o38e2@foo-rcd o38f6@foo-rcd-code) (cons (list 'define-syntax o38de@foo (list 'list ''$rtd (list 'syntax o38e0@foo-rtd) (list 'syntax o38e2@foo-rcd))) (cons (list 'define o38f2@foo? (list 'record-predicate o38e0@foo-rtd)) (cons (list 'define o38e6@make-foo (list 'record-constructor o38e2@foo-rcd)) (append (map (lambda (o38fa@foo-x o38fb@idx) (list 'define o38fa@foo-x (list 'record-accessor o38e0@foo-rtd o38fb@idx))) o38ec@foo-x* o38ea@idx*) (map (lambda (o38fe@set-foo-x! o38ff@idx) (list 'define o38fe@set-foo-x! (list 'record-mutator o38e0@foo-rtd o38ff@idx))) o38ee@set-foo-x!* o38f0@set-foo-idx*))))))))))))) (o38a3@get-protocol-code o38db@clause*))) (o38a1@foo-rcd-code o38db@clause* o38e0@foo-rtd o38e4@protocol (o389f@parent-rcd-code o38db@clause*)))) (o389b@foo-rtd-code o38de@foo o38db@clause* (o389d@parent-rtd-code o38db@clause*)))) (o3897@get-record-predicate-name o38da@namespec))) (o38a7@get-mutator-indices o38e8@fields))) (o38a9@get-mutators o38de@foo o38e8@fields))) (o38ab@get-accessors o38de@foo o38e8@fields))) (o38ad@enumerate o38e8@fields))) (o38a5@get-fields o38db@clause*))) (o3895@get-record-constructor-name o38da@namespec))) (gensym))) (gensym))) (gensym))) (o3893@get-record-name o38da@namespec)))) (set! o38b1@verify-clauses (lambda (o38ba@x o38bb@cls*) ((lambda (o38bf@valid-kwds o38c1@free-id-member?) (begin (set! o38bf@valid-kwds (map o2eb0@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! o38c1@free-id-member? (lambda (o38d6@x o38d7@ls) (and (pair? o38d7@ls) (or (o2cf7@free-id=? o38d6@x (car o38d7@ls)) (o38c1@free-id-member? o38d6@x (cdr o38d7@ls)))))) ((letrec ((o38c2@f (lambda (o38c4@cls* o38c5@seen*) (if (not (null? o38c4@cls*)) ((lambda (o38c8@t) ((lambda (o38ca@ls/false) (if o38ca@ls/false (apply (lambda (o38cc@kwd o38cd@rest) (if (or (not (o2cef@id? o38cc@kwd)) (not (o38c1@free-id-member? o38cc@kwd o38bf@valid-kwds))) (o2fe3@syntax-violation '#f '"not a valid define-record-type keyword" o38cc@kwd) (if (o2cfd@bound-id-member? o38cc@kwd o38c5@seen*) (o2fe3@syntax-violation '#f '"duplicate use of keyword " o38ba@x o38cc@kwd) (o38c2@f (cdr o38c4@cls*) (cons o38cc@kwd o38c5@seen*))))) o38ca@ls/false) ((lambda (o38d0@t) ((lambda (o38d2@ls/false) (if o38d2@ls/false (apply (lambda (o38d4@cls) (o2fe3@syntax-violation '#f '"malformed define-record-type clause" o38d4@cls)) o38d2@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o38d0@t))) (o2efa@syntax-dispatch o38d0@t 'any))) o38c8@t))) (o2efa@syntax-dispatch o38c8@t '(any . any)))) (car o38c4@cls*)) (void))))) o38c2@f) o38bb@cls* '()))) '#f '#f))) ((lambda (o38b2@t) ((lambda (o38b4@ls/false) (if o38b4@ls/false (apply (lambda (o38b6@namespec o38b7@clause*) (begin (o38b1@verify-clauses o388e@x o38b7@clause*) (o38af@do-define-record o38b6@namespec o38b7@clause*))) o38b4@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o38b2@t))) (o2efa@syntax-dispatch o38b2@t '(_ any . each-any)))) o388e@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! o2ef0@define-condition-type-macro (lambda (o3a8a@x) ((lambda (o3a8d@mkname) (begin (set! o3a8d@mkname (lambda (o3aba@name o3abb@suffix) (o2fe7@datum->syntax o3aba@name (string->symbol (string-append (symbol->string (o2fe9@syntax->datum o3aba@name)) o3abb@suffix))))) ((lambda (o3a8e@t) ((lambda (o3a90@ls/false) (if (and o3a90@ls/false (apply (lambda (o3a92@ctxt o3a93@name o3a94@super o3a95@constructor o3a96@predicate o3a97@field* o3a98@accessor*) (and (o2cef@id? o3a93@name) (o2cef@id? o3a94@super) (o2cef@id? o3a95@constructor) (o2cef@id? o3a96@predicate) (for-all o2cef@id? o3a97@field*) (for-all o2cef@id? o3a98@accessor*))) o3a90@ls/false)) (apply (lambda (o3aa0@ctxt o3aa1@name o3aa2@super o3aa3@constructor o3aa4@predicate o3aa5@field* o3aa6@accessor*) ((lambda (o3aae@aux-accessor*) (o2eb0@bless (cons 'begin (cons (cons 'define-record-type (cons (list o3aa1@name o3aa3@constructor (gensym)) (cons (list 'parent o3aa2@super) (cons (cons 'fields (map (lambda (o3ab0@field o3ab1@aux) (list 'immutable o3ab0@field o3ab1@aux)) o3aa5@field* o3aae@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define o3aa4@predicate (list 'condition-predicate (list 'record-type-descriptor o3aa1@name))) (map (lambda (o3ab4@accessor o3ab5@aux) (list 'define o3ab4@accessor (list 'condition-accessor (list 'record-type-descriptor o3aa1@name) o3ab5@aux))) o3aa6@accessor* o3aae@aux-accessor*)))))) (map (lambda (o3ab8@x) (gensym)) o3aa6@accessor*))) o3a90@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3a8e@t))) (o2efa@syntax-dispatch o3a8e@t '(any any any any any . #(each (any any)))))) o3a8a@x))) '#f))) (set! o2ef2@incorrect-usage-macro (lambda (o3abe@e) (o2fe3@syntax-violation '#f '"incorrect usage of auxiliary keyword" o3abe@e))) (set! o2ef4@parameterize-macro (lambda (o3ac0@e) ((lambda (o3ac2@t) ((lambda (o3ac4@ls/false) (if o3ac4@ls/false (apply (lambda (o3ac6@b o3ac7@b*) (o2eb0@bless (cons 'let (cons '() (cons o3ac6@b o3ac7@b*))))) o3ac4@ls/false) ((lambda (o3aca@t) ((lambda (o3acc@ls/false) (if o3acc@ls/false (apply (lambda (o3ace@olhs* o3acf@orhs* o3ad0@b o3ad1@b*) ((lambda (o3ad6@lhs* o3ad7@rhs*) (o2eb0@bless (cons (list 'lambda (append o3ad6@lhs* o3ad7@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (o3ada@lhs o3adb@rhs) (list 'let (list (list 't (list o3ada@lhs))) (list o3ada@lhs o3adb@rhs) (cons 'set! (cons o3adb@rhs '(t))))) o3ad6@lhs* o3ad7@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons o3ad0@b o3ad1@b*))) '(swap)))))) (append o3ace@olhs* o3acf@orhs*)))) (o2fd1@generate-temporaries o3ace@olhs*) (o2fd1@generate-temporaries o3acf@orhs*))) o3acc@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3aca@t))) (o2efa@syntax-dispatch o3aca@t '(_ #(each (any any)) any . each-any)))) o3ac2@t))) (o2efa@syntax-dispatch o3ac2@t '(_ () any . each-any)))) o3ac0@e))) (set! o2ef6@foreign-call-transformer (lambda (o3ade@e o3adf@r o3ae0@mr) ((lambda (o3ae4@t) ((lambda (o3ae6@ls/false) (if o3ae6@ls/false (apply (lambda (o3ae8@name o3ae9@arg*) (cons 'foreign-call (cons (o2f1c@chi-expr o3ae8@name o3adf@r o3ae0@mr) (o2f18@chi-expr* o3ae9@arg* o3adf@r o3ae0@mr)))) o3ae6@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3ae4@t))) (o2efa@syntax-dispatch o3ae4@t '(_ any . each-any)))) o3ade@e))) (set! o2ef8@convert-pattern (lambda (o3aec@pattern o3aed@keys) ((lambda (o3af1@cvt* o3af3@cvt) (begin (set! o3af1@cvt* (lambda (o3b90@p* o3b91@n o3b92@ids) (if (null? o3b90@p*) (values '() o3b92@ids) (call-with-values (lambda () (o3af1@cvt* (cdr o3b90@p*) o3b91@n o3b92@ids)) (lambda (o3b9a@o3b97 o3b9b@o3b99) ((lambda (o3b9e@ids o3b9f@y) (call-with-values (lambda () (o3af3@cvt (car o3b90@p*) o3b91@n o3b9e@ids)) (lambda (o3ba6@o3ba3 o3ba7@o3ba5) ((lambda (o3baa@ids o3bab@x) (values (cons o3bab@x o3b9f@y) o3baa@ids)) o3ba7@o3ba5 o3ba6@o3ba3)))) o3b9b@o3b99 o3b9a@o3b97)))))) (set! o3af3@cvt (lambda (o3af4@p o3af5@n o3af6@ids) ((lambda (o3afa@t) ((lambda (o3afc@ls/false) (if (and o3afc@ls/false (apply (lambda (o3afe@id) (o2cef@id? o3afe@id)) o3afc@ls/false)) (apply (lambda (o3b00@id) (if (o2cfd@bound-id-member? o3af4@p o3aed@keys) (values (vector 'free-id o3af4@p) o3af6@ids) (if (o2cf7@free-id=? o3af4@p (o2e84@scheme-stx '_)) (values '_ o3af6@ids) (values 'any (cons (cons o3af4@p o3af5@n) o3af6@ids))))) o3afc@ls/false) ((lambda (o3b02@t) ((lambda (o3b04@ls/false) (if (and o3b04@ls/false (apply (lambda (o3b06@p o3b07@dots) (o2efc@ellipsis? o3b07@dots)) o3b04@ls/false)) (apply (lambda (o3b0a@p o3b0b@dots) (call-with-values (lambda () (o3af3@cvt o3b0a@p (+ o3af5@n '1) o3af6@ids)) (lambda (o3b12@o3b0f o3b13@o3b11) ((lambda (o3b16@ids o3b17@p) (values (if (eq? o3b17@p 'any) 'each-any (vector 'each o3b17@p)) o3b16@ids)) o3b13@o3b11 o3b12@o3b0f)))) o3b04@ls/false) ((lambda (o3b1a@t) ((lambda (o3b1c@ls/false) (if (and o3b1c@ls/false (apply (lambda (o3b1e@x o3b1f@dots o3b20@ys o3b21@z) (o2efc@ellipsis? o3b1f@dots)) o3b1c@ls/false)) (apply (lambda (o3b26@x o3b27@dots o3b28@ys o3b29@z) (call-with-values (lambda () (o3af3@cvt o3b29@z o3af5@n o3af6@ids)) (lambda (o3b32@o3b2f o3b33@o3b31) ((lambda (o3b36@ids o3b37@z) (call-with-values (lambda () (o3af1@cvt* o3b28@ys o3af5@n o3b36@ids)) (lambda (o3b3e@o3b3b o3b3f@o3b3d) ((lambda (o3b42@ids o3b43@ys) (call-with-values (lambda () (o3af3@cvt o3b26@x (+ o3af5@n '1) o3b42@ids)) (lambda (o3b4a@o3b47 o3b4b@o3b49) ((lambda (o3b4e@ids o3b4f@x) (values (vector 'each+ o3b4f@x (reverse o3b43@ys) o3b37@z) o3b4e@ids)) o3b4b@o3b49 o3b4a@o3b47)))) o3b3f@o3b3d o3b3e@o3b3b)))) o3b33@o3b31 o3b32@o3b2f)))) o3b1c@ls/false) ((lambda (o3b52@t) ((lambda (o3b54@ls/false) (if o3b54@ls/false (apply (lambda (o3b56@x o3b57@y) (call-with-values (lambda () (o3af3@cvt o3b57@y o3af5@n o3af6@ids)) (lambda (o3b5e@o3b5b o3b5f@o3b5d) ((lambda (o3b62@ids o3b63@y) (call-with-values (lambda () (o3af3@cvt o3b56@x o3af5@n o3b62@ids)) (lambda (o3b6a@o3b67 o3b6b@o3b69) ((lambda (o3b6e@ids o3b6f@x) (values (cons o3b6f@x o3b63@y) o3b6e@ids)) o3b6b@o3b69 o3b6a@o3b67)))) o3b5f@o3b5d o3b5e@o3b5b)))) o3b54@ls/false) ((lambda (o3b72@t) ((lambda (o3b74@ls/false) (if o3b74@ls/false (apply (lambda () (values '() o3af6@ids)) o3b74@ls/false) ((lambda (o3b76@t) ((lambda (o3b78@ls/false) (if (and o3b78@ls/false (apply (lambda (o3b7a@p) (not (o2cb7@stx? o3b7a@p))) o3b78@ls/false)) (apply (lambda (o3b7c@p) (call-with-values (lambda () (o3af3@cvt o3b7c@p o3af5@n o3af6@ids)) (lambda (o3b82@o3b7f o3b83@o3b81) ((lambda (o3b86@ids o3b87@p) (values (vector 'vector o3b87@p) o3b86@ids)) o3b83@o3b81 o3b82@o3b7f)))) o3b78@ls/false) ((lambda (o3b8a@t) ((lambda (o3b8c@ls/false) (if o3b8c@ls/false (apply (lambda (o3b8e@datum) (values (vector 'atom (o2d05@stx->datum o3b8e@datum)) o3af6@ids)) o3b8c@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3b8a@t))) (o2efa@syntax-dispatch o3b8a@t 'any))) o3b76@t))) (o2efa@syntax-dispatch o3b76@t '#(vector each-any)))) o3b72@t))) (o2efa@syntax-dispatch o3b72@t '()))) o3b52@t))) (o2efa@syntax-dispatch o3b52@t '(any . any)))) o3b1a@t))) (o2efa@syntax-dispatch o3b1a@t '(any any . #(each+ any () any))))) o3b02@t))) (o2efa@syntax-dispatch o3b02@t '(any any)))) o3afa@t))) (o2efa@syntax-dispatch o3afa@t 'any))) o3af4@p))) (o3af3@cvt o3aec@pattern '0 '()))) '#f '#f))) (set! o2efa@syntax-dispatch ((lambda () ((lambda (o3baf@stx^ o3bb1@match-each o3bb3@match-each+ o3bb5@match-each-any o3bb7@match-empty o3bb9@combine o3bbb@match* o3bbd@match) (begin (set! o3baf@stx^ (lambda (o3c8a@e o3c8b@m* o3c8c@s* o3c8d@ae*) (if (and (null? o3c8b@m*) (null? o3c8c@s*) (null? o3c8d@ae*)) o3c8a@e (o2cd7@mkstx o3c8a@e o3c8b@m* o3c8c@s* o3c8d@ae*)))) (set! o3bb1@match-each (lambda (o3c6a@e o3c6b@p o3c6c@m* o3c6d@s* o3c6e@ae*) (if (pair? o3c6a@e) ((lambda (o3c74@first) (and o3c74@first ((lambda (o3c76@rest) (and o3c76@rest (cons o3c74@first o3c76@rest))) (o3bb1@match-each (cdr o3c6a@e) o3c6b@p o3c6c@m* o3c6d@s* o3c6e@ae*)))) (o3bbd@match (car o3c6a@e) o3c6b@p o3c6c@m* o3c6d@s* o3c6e@ae* '())) (if (null? o3c6a@e) '() (if (o2cb7@stx? o3c6a@e) (and (not (o2c6d@top-marked? o3c6c@m*)) (call-with-values (lambda () (o2cd5@join-wraps o3c6c@m* o3c6d@s* o3c6e@ae* o3c6a@e)) (lambda (o3c7e@o3c79 o3c7f@o3c7b o3c80@o3c7d) ((lambda (o3c84@ae* o3c85@s* o3c86@m*) (o3bb1@match-each (o2cbb@stx-expr o3c6a@e) o3c6b@p o3c86@m* o3c85@s* o3c84@ae*)) o3c80@o3c7d o3c7f@o3c7b o3c7e@o3c79)))) (if (o288e@o27ad@annotation? o3c6a@e) (o3bb1@match-each (o2890@o27b1@annotation-expression o3c6a@e) o3c6b@p o3c6c@m* o3c6d@s* o3c6e@ae*) '#f)))))) (set! o3bb3@match-each+ (lambda (o3c2a@e o3c2b@x-pat o3c2c@y-pat o3c2d@z-pat o3c2e@m* o3c2f@s* o3c30@ae* o3c31@r) ((letrec ((o3c3a@f (lambda (o3c3c@e o3c3d@m* o3c3e@s* o3c3f@ae*) (if (pair? o3c3c@e) (call-with-values (lambda () (o3c3a@f (cdr o3c3c@e) o3c3d@m* o3c3e@s* o3c3f@ae*)) (lambda (o3c4a@o3c45 o3c4b@o3c47 o3c4c@o3c49) ((lambda (o3c50@r o3c51@y-pat o3c52@xr*) (if o3c50@r (if (null? o3c51@y-pat) ((lambda (o3c56@xr) (if o3c56@xr (values (cons o3c56@xr o3c52@xr*) o3c51@y-pat o3c50@r) (values '#f '#f '#f))) (o3bbd@match (car o3c3c@e) o3c2b@x-pat o3c3d@m* o3c3e@s* o3c3f@ae* '())) (values '() (cdr o3c51@y-pat) (o3bbd@match (car o3c3c@e) (car o3c51@y-pat) o3c3d@m* o3c3e@s* o3c3f@ae* o3c50@r))) (values '#f '#f '#f))) o3c4c@o3c49 o3c4b@o3c47 o3c4a@o3c45))) (if (o2cb7@stx? o3c3c@e) (if (o2c6d@top-marked? o3c3d@m*) (values '() o3c2c@y-pat (o3bbd@match o3c3c@e o3c2d@z-pat o3c3d@m* o3c3e@s* o3c3f@ae* o3c31@r)) (call-with-values (lambda () (o2cd5@join-wraps o3c3d@m* o3c3e@s* o3c3f@ae* o3c3c@e)) (lambda (o3c5e@o3c59 o3c5f@o3c5b o3c60@o3c5d) ((lambda (o3c64@ae* o3c65@s* o3c66@m*) (o3c3a@f (o2cbb@stx-expr o3c3c@e) o3c66@m* o3c65@s* o3c64@ae*)) o3c60@o3c5d o3c5f@o3c5b o3c5e@o3c59)))) (if (o288e@o27ad@annotation? o3c3c@e) (o3c3a@f (o2890@o27b1@annotation-expression o3c3c@e) o3c3d@m* o3c3e@s* o3c3f@ae*) (values '() o3c2c@y-pat (o3bbd@match o3c3c@e o3c2d@z-pat o3c3d@m* o3c3e@s* o3c3f@ae* o3c31@r)))))))) o3c3a@f) o3c2a@e o3c2e@m* o3c2f@s* o3c30@ae*))) (set! o3bb5@match-each-any (lambda (o3c0e@e o3c0f@m* o3c10@s* o3c11@ae*) (if (pair? o3c0e@e) ((lambda (o3c16@l) (and o3c16@l (cons (o3baf@stx^ (car o3c0e@e) o3c0f@m* o3c10@s* o3c11@ae*) o3c16@l))) (o3bb5@match-each-any (cdr o3c0e@e) o3c0f@m* o3c10@s* o3c11@ae*)) (if (null? o3c0e@e) '() (if (o2cb7@stx? o3c0e@e) (and (not (o2c6d@top-marked? o3c0f@m*)) (call-with-values (lambda () (o2cd5@join-wraps o3c0f@m* o3c10@s* o3c11@ae* o3c0e@e)) (lambda (o3c1e@o3c19 o3c1f@o3c1b o3c20@o3c1d) ((lambda (o3c24@ae* o3c25@s* o3c26@m*) (o3bb5@match-each-any (o2cbb@stx-expr o3c0e@e) o3c26@m* o3c25@s* o3c24@ae*)) o3c20@o3c1d o3c1f@o3c1b o3c1e@o3c19)))) (if (o288e@o27ad@annotation? o3c0e@e) (o3bb5@match-each-any (o2890@o27b1@annotation-expression o3c0e@e) o3c0f@m* o3c10@s* o3c11@ae*) '#f)))))) (set! o3bb7@match-empty (lambda (o3c08@p o3c09@r) (if (null? o3c08@p) o3c09@r (if (eq? o3c08@p '_) o3c09@r (if (eq? o3c08@p 'any) (cons '() o3c09@r) (if (pair? o3c08@p) (o3bb7@match-empty (car o3c08@p) (o3bb7@match-empty (cdr o3c08@p) o3c09@r)) (if (eq? o3c08@p 'each-any) (cons '() o3c09@r) ((lambda (o3c0c@t) (if (memv o3c0c@t '(each)) (o3bb7@match-empty (vector-ref o3c08@p '1) o3c09@r) (if (memv o3c0c@t '(each+)) (o3bb7@match-empty (vector-ref o3c08@p '1) (o3bb7@match-empty (reverse (vector-ref o3c08@p '2)) (o3bb7@match-empty (vector-ref o3c08@p '3) o3c09@r))) (if (memv o3c0c@t '(free-id atom)) o3c09@r (if (memv o3c0c@t '(scheme-id atom)) o3c09@r (if (memv o3c0c@t '(vector)) (o3bb7@match-empty (vector-ref o3c08@p '1) o3c09@r) (assertion-violation 'syntax-dispatch '"invalid pattern" o3c08@p))))))) (vector-ref o3c08@p '0))))))))) (set! o3bb9@combine (lambda (o3c04@r* o3c05@r) (if (null? (car o3c04@r*)) o3c05@r (cons (map car o3c04@r*) (o3bb9@combine (map cdr o3c04@r*) o3c05@r))))) (set! o3bbb@match* (lambda (o3be0@e o3be1@p o3be2@m* o3be3@s* o3be4@ae* o3be5@r) (if (null? o3be1@p) (and (null? o3be0@e) o3be5@r) (if (pair? o3be1@p) (and (pair? o3be0@e) (o3bbd@match (car o3be0@e) (car o3be1@p) o3be2@m* o3be3@s* o3be4@ae* (o3bbd@match (cdr o3be0@e) (cdr o3be1@p) o3be2@m* o3be3@s* o3be4@ae* o3be5@r))) (if (eq? o3be1@p 'each-any) ((lambda (o3bec@l) (and o3bec@l (cons o3bec@l o3be5@r))) (o3bb5@match-each-any o3be0@e o3be2@m* o3be3@s* o3be4@ae*)) ((lambda (o3bee@t) (if (memv o3bee@t '(each)) (if (null? o3be0@e) (o3bb7@match-empty (vector-ref o3be1@p '1) o3be5@r) ((lambda (o3bf0@r*) (and o3bf0@r* (o3bb9@combine o3bf0@r* o3be5@r))) (o3bb1@match-each o3be0@e (vector-ref o3be1@p '1) o3be2@m* o3be3@s* o3be4@ae*))) (if (memv o3bee@t '(free-id)) (and (symbol? o3be0@e) (o2c6d@top-marked? o3be2@m*) (o2cf7@free-id=? (o3baf@stx^ o3be0@e o3be2@m* o3be3@s* o3be4@ae*) (vector-ref o3be1@p '1)) o3be5@r) (if (memv o3bee@t '(scheme-id)) (and (symbol? o3be0@e) (o2c6d@top-marked? o3be2@m*) (o2cf7@free-id=? (o3baf@stx^ o3be0@e o3be2@m* o3be3@s* o3be4@ae*) (o2e84@scheme-stx (vector-ref o3be1@p '1))) o3be5@r) (if (memv o3bee@t '(each+)) (call-with-values (lambda () (o3bb3@match-each+ o3be0@e (vector-ref o3be1@p '1) (vector-ref o3be1@p '2) (vector-ref o3be1@p '3) o3be2@m* o3be3@s* o3be4@ae* o3be5@r)) (lambda (o3bf8@o3bf3 o3bf9@o3bf5 o3bfa@o3bf7) ((lambda (o3bfe@r o3bff@y-pat o3c00@xr*) (and o3bfe@r (null? o3bff@y-pat) (if (null? o3c00@xr*) (o3bb7@match-empty (vector-ref o3be1@p '1) o3bfe@r) (o3bb9@combine o3c00@xr* o3bfe@r)))) o3bfa@o3bf7 o3bf9@o3bf5 o3bf8@o3bf3))) (if (memv o3bee@t '(atom)) (and (fast-equal? (vector-ref o3be1@p '1) (o2d03@strip o3be0@e o3be2@m*)) o3be5@r) (if (memv o3bee@t '(vector)) (and (vector? o3be0@e) (o3bbd@match (vector->list o3be0@e) (vector-ref o3be1@p '1) o3be2@m* o3be3@s* o3be4@ae* o3be5@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" o3be1@p)))))))) (vector-ref o3be1@p '0))))))) (set! o3bbd@match (lambda (o3bc2@e o3bc3@p o3bc4@m* o3bc5@s* o3bc6@ae* o3bc7@r) (if (not o3bc7@r) '#f (if (eq? o3bc3@p '_) o3bc7@r (if (eq? o3bc3@p 'any) (cons (o3baf@stx^ o3bc2@e o3bc4@m* o3bc5@s* o3bc6@ae*) o3bc7@r) (if (o2cb7@stx? o3bc2@e) (and (not (o2c6d@top-marked? o3bc4@m*)) (call-with-values (lambda () (o2cd5@join-wraps o3bc4@m* o3bc5@s* o3bc6@ae* o3bc2@e)) (lambda (o3bd4@o3bcf o3bd5@o3bd1 o3bd6@o3bd3) ((lambda (o3bda@ae* o3bdb@s* o3bdc@m*) (o3bbd@match (o2cbb@stx-expr o3bc2@e) o3bc3@p o3bdc@m* o3bdb@s* o3bda@ae* o3bc7@r)) o3bd6@o3bd3 o3bd5@o3bd1 o3bd4@o3bcf)))) (if (o288e@o27ad@annotation? o3bc2@e) (o3bbd@match (o2890@o27b1@annotation-expression o3bc2@e) o3bc3@p o3bc4@m* o3bc5@s* o3bc6@ae* o3bc7@r) (o3bbb@match* o3bc2@e o3bc3@p o3bc4@m* o3bc5@s* o3bc6@ae* o3bc7@r)))))))) (lambda (o3bbe@e o3bbf@p) (o3bbd@match o3bbe@e o3bbf@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! o2efc@ellipsis? (lambda (o3c92@x) (and (o2cef@id? o3c92@x) (o2cf7@free-id=? o3c92@x (o2e84@scheme-stx '...))))) (set! o2efe@underscore? (lambda (o3c94@x) (and (o2cef@id? o3c94@x) (o2cf7@free-id=? o3c94@x (o2e84@scheme-stx '_))))) (set! o2f00@verify-literals (lambda (o3c96@lits o3c97@expr) (for-each (lambda (o3c9a@x) (if (or (not (o2cef@id? o3c9a@x)) (o2efc@ellipsis? o3c9a@x) (o2efe@underscore? o3c9a@x)) (o2fe3@syntax-violation '#f '"invalid literal" o3c97@expr o3c9a@x) (void))) o3c96@lits))) (set! o2f02@syntax-case-transformer ((lambda () ((lambda (o3c9d@build-dispatch-call o3c9f@invalid-ids-error o3ca1@gen-clause o3ca3@gen-syntax-case) (begin (set! o3c9d@build-dispatch-call (lambda (o3d0e@pvars o3d0f@expr o3d10@y o3d11@r o3d12@mr) ((lambda (o3d18@ids o3d19@levels) ((lambda (o3d1c@labels o3d1d@new-vars) ((lambda (o3d20@body) (list '(primitive apply) (o2c4b@o2b8b@build-lambda '#f o3d1d@new-vars o3d20@body) o3d10@y)) (o2f1c@chi-expr (o2cdb@add-subst (o2caa@make-full-rib o3d18@ids o3d1c@labels) o3d0f@expr) (append (map (lambda (o3d22@label o3d23@var o3d24@level) (cons o3d22@label (o2d0f@make-binding 'syntax (cons o3d23@var o3d24@level)))) o3d1c@labels o3d1d@new-vars (map cdr o3d0e@pvars)) o3d11@r) o3d12@mr))) (map o2c73@gen-label o3d18@ids) (map o2c6f@gen-lexical o3d18@ids))) (map car o3d0e@pvars) (map cdr o3d0e@pvars)))) (set! o3c9f@invalid-ids-error (lambda (o3d02@id* o3d03@e o3d04@class) ((letrec ((o3d08@find (lambda (o3d0a@id* o3d0b@ok*) (if (null? o3d0a@id*) (o2fe3@syntax-violation '#f '"invalid syntax" o3d03@e) (if (o2cef@id? (car o3d0a@id*)) (if (o2cfd@bound-id-member? (car o3d0a@id*) o3d0b@ok*) (o2fdf@syntax-error (car o3d0a@id*) '"duplicate " o3d04@class) (o3d08@find (cdr o3d0a@id*) (cons (car o3d0a@id*) o3d0b@ok*))) (o2fdf@syntax-error (car o3d0a@id*) '"invalid " o3d04@class)))))) o3d08@find) o3d02@id* '()))) (set! o3ca1@gen-clause (lambda (o3cda@x o3cdb@keys o3cdc@clauses o3cdd@r o3cde@mr o3cdf@pat o3ce0@fender o3ce1@expr) (call-with-values (lambda () (o2ef8@convert-pattern o3cdf@pat o3cdb@keys)) (lambda (o3cee@o3ceb o3cef@o3ced) ((lambda (o3cf2@pvars o3cf3@p) (if (not (o2cfb@distinct-bound-ids? (map car o3cf2@pvars))) (o3c9f@invalid-ids-error (map car o3cf2@pvars) o3cdf@pat '"pattern variable") (if (not (for-all (lambda (o3cf6@x) (not (o2efc@ellipsis? (car o3cf6@x)))) o3cf2@pvars)) (o2fe3@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" o3cdf@pat) ((lambda (o3cf8@y) ((lambda (o3cfa@test) ((lambda (o3cfc@conseq) ((lambda (o3cfe@altern) (list (o2c4b@o2b8b@build-lambda '#f (list o3cf8@y) (list 'if o3cfa@test o3cfc@conseq o3cfe@altern)) (list '(primitive syntax-dispatch) o3cda@x (list 'quote o3cf3@p)))) (o3ca3@gen-syntax-case o3cda@x o3cdb@keys o3cdc@clauses o3cdd@r o3cde@mr))) (o3c9d@build-dispatch-call o3cf2@pvars o3ce1@expr o3cf8@y o3cdd@r o3cde@mr))) (if (eq? o3ce0@fender '#t) o3cf8@y ((lambda (o3d00@call) (list 'if o3cf8@y o3d00@call (list 'quote '#f))) (o3c9d@build-dispatch-call o3cf2@pvars o3ce0@fender o3cf8@y o3cdd@r o3cde@mr))))) (o2c6f@gen-lexical 'tmp))))) o3cef@o3ced o3cee@o3ceb))))) (set! o3ca3@gen-syntax-case (lambda (o3cb8@x o3cb9@keys o3cba@clauses o3cbb@r o3cbc@mr) (if (null? o3cba@clauses) (list '(primitive syntax-error) o3cb8@x) ((lambda (o3cc2@t) ((lambda (o3cc4@ls/false) (if o3cc4@ls/false (apply (lambda (o3cc6@pat o3cc7@expr) (if (and (o2cef@id? o3cc6@pat) (not (o2cfd@bound-id-member? o3cc6@pat o3cb9@keys)) (not (o2efc@ellipsis? o3cc6@pat))) (if (o2cf7@free-id=? o3cc6@pat (o2e84@scheme-stx '_)) (o2f1c@chi-expr o3cc7@expr o3cbb@r o3cbc@mr) ((lambda (o3cca@lab o3ccb@lex) ((lambda (o3cce@body) (list (o2c4b@o2b8b@build-lambda '#f (list o3ccb@lex) o3cce@body) o3cb8@x)) (o2f1c@chi-expr (o2cdb@add-subst (o2caa@make-full-rib (list o3cc6@pat) (list o3cca@lab)) o3cc7@expr) (cons (cons o3cca@lab (o2d0f@make-binding 'syntax (cons o3ccb@lex '0))) o3cbb@r) o3cbc@mr))) (o2c73@gen-label o3cc6@pat) (o2c6f@gen-lexical o3cc6@pat))) (o3ca1@gen-clause o3cb8@x o3cb9@keys (cdr o3cba@clauses) o3cbb@r o3cbc@mr o3cc6@pat '#t o3cc7@expr))) o3cc4@ls/false) ((lambda (o3cd0@t) ((lambda (o3cd2@ls/false) (if o3cd2@ls/false (apply (lambda (o3cd4@pat o3cd5@fender o3cd6@expr) (o3ca1@gen-clause o3cb8@x o3cb9@keys (cdr o3cba@clauses) o3cbb@r o3cbc@mr o3cd4@pat o3cd5@fender o3cd6@expr)) o3cd2@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3cd0@t))) (o2efa@syntax-dispatch o3cd0@t '(any any any)))) o3cc2@t))) (o2efa@syntax-dispatch o3cc2@t '(any any)))) (car o3cba@clauses))))) (lambda (o3ca4@e o3ca5@r o3ca6@mr) ((lambda (o3caa@t) ((lambda (o3cac@ls/false) (if o3cac@ls/false (apply (lambda (o3cae@expr o3caf@keys o3cb0@clauses) (begin (o2f00@verify-literals o3caf@keys o3ca4@e) ((lambda (o3cb4@x) ((lambda (o3cb6@body) (list (o2c4b@o2b8b@build-lambda '#f (list o3cb4@x) o3cb6@body) (o2f1c@chi-expr o3cae@expr o3ca5@r o3ca6@mr))) (o3ca3@gen-syntax-case o3cb4@x o3caf@keys o3cb0@clauses o3ca5@r o3ca6@mr))) (o2c6f@gen-lexical 'tmp)))) o3cac@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3caa@t))) (o2efa@syntax-dispatch o3caa@t '(_ any each-any . each-any)))) o3ca4@e)))) '#f '#f '#f '#f)))) (set! o2f04@ellipsis-map (lambda (o3d28@proc o3d29@ls . o3d2c@ls*) ((lambda (o3d2f@who) (begin (set! o3d2f@who '...) (begin (if (not (list? o3d29@ls)) (assertion-violation o3d2f@who '"not a list" o3d29@ls) (void)) (if (not (null? o3d2c@ls*)) ((lambda (o3d30@n) (for-each (lambda (o3d32@x) (begin (if (not (list? o3d32@x)) (assertion-violation o3d2f@who '"not a list" o3d32@x) (void)) (if (not (= (length o3d32@x) o3d30@n)) (assertion-violation o3d2f@who '"length mismatch" o3d29@ls o3d32@x) (void)))) o3d2c@ls*)) (length o3d29@ls)) (void)) (apply map o3d28@proc o3d29@ls o3d2c@ls*)))) '#f))) (set! o2f06@syntax-transformer ((lambda () ((lambda (o3d35@gen-syntax o3d37@gen-ref o3d39@gen-append o3d3b@gen-mappend o3d3d@gen-map o3d3f@gen-cons o3d41@gen-vector o3d43@regen) (begin (set! o3d35@gen-syntax (lambda (o3dac@src o3dad@e o3dae@r o3daf@maps o3db0@ellipsis? o3db1@vec?) ((lambda (o3db8@t) ((lambda (o3dba@ls/false) (if (and o3dba@ls/false (apply (lambda (o3dbc@dots) (o3db0@ellipsis? o3dbc@dots)) o3dba@ls/false)) (apply (lambda (o3dbe@dots) (o2fe3@syntax-violation '#f '"misplaced ellipsis in syntax form" o3dac@src)) o3dba@ls/false) ((lambda (o3dc0@t) ((lambda (o3dc2@ls/false) (if (and o3dc2@ls/false (apply (lambda (o3dc4@id) (o2cef@id? o3dc4@id)) o3dc2@ls/false)) (apply (lambda (o3dc6@id) ((lambda (o3dc8@label) ((lambda (o3dca@b) ((lambda () (if (eq? (o2d11@binding-type o3dca@b) 'syntax) (call-with-values (lambda () ((lambda (o3dd0@var.lev) (o3d37@gen-ref o3dac@src (car o3dd0@var.lev) (cdr o3dd0@var.lev) o3daf@maps)) (o2d13@binding-value o3dca@b))) (lambda (o3dd2@o3dcd o3dd3@o3dcf) ((lambda (o3dd6@maps o3dd7@var) (values (list 'ref o3dd7@var) o3dd6@maps)) o3dd3@o3dcf o3dd2@o3dcd))) (values (list 'quote o3dad@e) o3daf@maps))))) (o2d0d@label->binding o3dc8@label o3dae@r))) (o2d09@id->label o3dad@e))) o3dc2@ls/false) ((lambda (o3dda@t) ((lambda (o3ddc@ls/false) (if (and o3ddc@ls/false (apply (lambda (o3dde@dots o3ddf@e) (o3db0@ellipsis? o3dde@dots)) o3ddc@ls/false)) (apply (lambda (o3de2@dots o3de3@e) (if o3db1@vec? (o2fe3@syntax-violation '#f '"misplaced ellipsis in syntax form" o3dac@src) (o3d35@gen-syntax o3dac@src o3de3@e o3dae@r o3daf@maps (lambda (o3de6@x) '#f) '#f))) o3ddc@ls/false) ((lambda (o3de8@t) ((lambda (o3dea@ls/false) (if (and o3dea@ls/false (apply (lambda (o3dec@x o3ded@dots o3dee@y) (o3db0@ellipsis? o3ded@dots)) o3dea@ls/false)) (apply (lambda (o3df2@x o3df3@dots o3df4@y) ((letrec ((o3df8@f (lambda (o3dfa@y o3dfb@k) ((lambda (o3dfe@t) ((lambda (o3e00@ls/false) (if o3e00@ls/false (apply (lambda () (o3dfb@k o3daf@maps)) o3e00@ls/false) ((lambda (o3e02@t) ((lambda (o3e04@ls/false) (if (and o3e04@ls/false (apply (lambda (o3e06@dots o3e07@y) (o3db0@ellipsis? o3e06@dots)) o3e04@ls/false)) (apply (lambda (o3e0a@dots o3e0b@y) (o3df8@f o3e0b@y (lambda (o3e0e@maps) (call-with-values (lambda () (o3dfb@k (cons '() o3e0e@maps))) (lambda (o3e14@o3e11 o3e15@o3e13) ((lambda (o3e18@maps o3e19@x) (if (null? (car o3e18@maps)) (o2fe3@syntax-violation '#f '"extra ellipsis in syntax form" o3dac@src) (values (o3d3b@gen-mappend o3e19@x (car o3e18@maps)) (cdr o3e18@maps)))) o3e15@o3e13 o3e14@o3e11)))))) o3e04@ls/false) ((lambda (o3e1c@t) ((lambda (o3e1e@ls/false) (if o3e1e@ls/false (apply (lambda () (call-with-values (lambda () (o3d35@gen-syntax o3dac@src o3dfa@y o3dae@r o3daf@maps o3db0@ellipsis? o3db1@vec?)) (lambda (o3e24@o3e21 o3e25@o3e23) ((lambda (o3e28@maps o3e29@y) (call-with-values (lambda () (o3dfb@k o3e28@maps)) (lambda (o3e30@o3e2d o3e31@o3e2f) ((lambda (o3e34@maps o3e35@x) (values (o3d39@gen-append o3e35@x o3e29@y) o3e34@maps)) o3e31@o3e2f o3e30@o3e2d)))) o3e25@o3e23 o3e24@o3e21)))) o3e1e@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3e1c@t))) (o2efa@syntax-dispatch o3e1c@t '_))) o3e02@t))) (o2efa@syntax-dispatch o3e02@t '(any . any)))) o3dfe@t))) (o2efa@syntax-dispatch o3dfe@t '()))) o3dfa@y)))) o3df8@f) o3df4@y (lambda (o3e38@maps) (call-with-values (lambda () (o3d35@gen-syntax o3dac@src o3df2@x o3dae@r (cons '() o3e38@maps) o3db0@ellipsis? '#f)) (lambda (o3e3e@o3e3b o3e3f@o3e3d) ((lambda (o3e42@maps o3e43@x) (if (null? (car o3e42@maps)) (o2fe3@syntax-violation '#f '"extra ellipsis in syntax form" o3dac@src) (values (o3d3d@gen-map o3e43@x (car o3e42@maps)) (cdr o3e42@maps)))) o3e3f@o3e3d o3e3e@o3e3b)))))) o3dea@ls/false) ((lambda (o3e46@t) ((lambda (o3e48@ls/false) (if o3e48@ls/false (apply (lambda (o3e4a@x o3e4b@y) (call-with-values (lambda () (o3d35@gen-syntax o3dac@src o3e4a@x o3dae@r o3daf@maps o3db0@ellipsis? '#f)) (lambda (o3e52@o3e4f o3e53@o3e51) ((lambda (o3e56@maps o3e57@xnew) (call-with-values (lambda () (o3d35@gen-syntax o3dac@src o3e4b@y o3dae@r o3e56@maps o3db0@ellipsis? o3db1@vec?)) (lambda (o3e5e@o3e5b o3e5f@o3e5d) ((lambda (o3e62@maps o3e63@ynew) (values (o3d3f@gen-cons o3dad@e o3e4a@x o3e4b@y o3e57@xnew o3e63@ynew) o3e62@maps)) o3e5f@o3e5d o3e5e@o3e5b)))) o3e53@o3e51 o3e52@o3e4f)))) o3e48@ls/false) ((lambda (o3e66@t) ((lambda (o3e68@ls/false) (if o3e68@ls/false (apply (lambda (o3e6a@ls) (call-with-values (lambda () (o3d35@gen-syntax o3dac@src o3e6a@ls o3dae@r o3daf@maps o3db0@ellipsis? '#t)) (lambda (o3e70@o3e6d o3e71@o3e6f) ((lambda (o3e74@maps o3e75@lsnew) (values (o3d41@gen-vector o3dad@e o3e6a@ls o3e75@lsnew) o3e74@maps)) o3e71@o3e6f o3e70@o3e6d)))) o3e68@ls/false) ((lambda (o3e78@t) ((lambda (o3e7a@ls/false) (if o3e7a@ls/false (apply (lambda () (values (list 'quote o3dad@e) o3daf@maps)) o3e7a@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3e78@t))) (o2efa@syntax-dispatch o3e78@t '_))) o3e66@t))) (o2efa@syntax-dispatch o3e66@t '#(vector each-any)))) o3e46@t))) (o2efa@syntax-dispatch o3e46@t '(any . any)))) o3de8@t))) (o2efa@syntax-dispatch o3de8@t '(any any . any)))) o3dda@t))) (o2efa@syntax-dispatch o3dda@t '(any any)))) o3dc0@t))) (o2efa@syntax-dispatch o3dc0@t 'any))) o3db8@t))) (o2efa@syntax-dispatch o3db8@t 'any))) o3dad@e))) (set! o3d37@gen-ref (lambda (o3d92@src o3d93@var o3d94@level o3d95@maps) (if (= o3d94@level '0) (values o3d93@var o3d95@maps) (if (null? o3d95@maps) (o2fe3@syntax-violation '#f '"missing ellipsis in syntax form" o3d92@src) (call-with-values (lambda () (o3d37@gen-ref o3d92@src o3d93@var (- o3d94@level '1) (cdr o3d95@maps))) (lambda (o3d9e@o3d9b o3d9f@o3d9d) ((lambda (o3da2@outer-maps o3da3@outer-var) ((lambda (o3da6@t) (if o3da6@t ((lambda (o3da8@b) (values (cdr o3da8@b) o3d95@maps)) o3da6@t) ((lambda (o3daa@inner-var) (values o3daa@inner-var (cons (cons (cons o3da3@outer-var o3daa@inner-var) (car o3d95@maps)) o3da2@outer-maps))) (o2c6f@gen-lexical 'tmp)))) (assq o3da3@outer-var (car o3d95@maps)))) o3d9f@o3d9d o3d9e@o3d9b))))))) (set! o3d39@gen-append (lambda (o3d8e@x o3d8f@y) (if (fast-equal? o3d8f@y ''()) o3d8e@x (list 'append o3d8e@x o3d8f@y)))) (set! o3d3b@gen-mappend (lambda (o3d8a@e o3d8b@map-env) (list 'apply '(primitive append) (o3d3d@gen-map o3d8a@e o3d8b@map-env)))) (set! o3d3d@gen-map (lambda (o3d78@e o3d79@map-env) ((lambda (o3d7c@formals o3d7d@actuals) (if (eq? (car o3d78@e) 'ref) (car o3d7d@actuals) (if (for-all (lambda (o3d80@x) (and (eq? (car o3d80@x) 'ref) (memq (cadr o3d80@x) o3d7c@formals))) (cdr o3d78@e)) ((lambda (o3d82@args) (cons 'map (cons (list 'primitive (car o3d78@e)) o3d82@args))) (map ((lambda (o3d84@r) (lambda (o3d86@x) (cdr (assq (cadr o3d86@x) o3d84@r)))) (map cons o3d7c@formals o3d7d@actuals)) (cdr o3d78@e))) (cons* 'map (list 'lambda o3d7c@formals o3d78@e) o3d7d@actuals)))) (map cdr o3d79@map-env) (map (lambda (o3d88@x) (list 'ref (car o3d88@x))) o3d79@map-env)))) (set! o3d3f@gen-cons (lambda (o3d68@e o3d69@x o3d6a@y o3d6b@xnew o3d6c@ynew) ((lambda (o3d72@t) (if (memv o3d72@t '(quote)) (if (eq? (car o3d6b@xnew) 'quote) ((lambda (o3d74@xnew o3d75@ynew) (if (and (eq? o3d74@xnew o3d69@x) (eq? o3d75@ynew o3d6a@y)) (list 'quote o3d68@e) (list 'quote (cons o3d74@xnew o3d75@ynew)))) (cadr o3d6b@xnew) (cadr o3d6c@ynew)) (if (null? (cadr o3d6c@ynew)) (list 'list o3d6b@xnew) (list 'cons o3d6b@xnew o3d6c@ynew))) (if (memv o3d72@t '(list)) (cons 'list (cons o3d6b@xnew (cdr o3d6c@ynew))) (list 'cons o3d6b@xnew o3d6c@ynew)))) (car o3d6c@ynew)))) (set! o3d41@gen-vector (lambda (o3d62@e o3d63@ls o3d64@lsnew) (if (eq? (car o3d64@lsnew) 'quote) (if (eq? (cadr o3d64@lsnew) o3d63@ls) (list 'quote o3d62@e) (list 'quote (list->vector (cadr o3d64@lsnew)))) (if (eq? (car o3d64@lsnew) 'list) (cons 'vector (cdr o3d64@lsnew)) (list 'list->vector o3d64@lsnew))))) (set! o3d43@regen (lambda (o3d5c@x) ((lambda (o3d5e@t) (if (memv o3d5e@t '(ref)) (cadr o3d5c@x) (if (memv o3d5e@t '(primitive)) (list 'primitive (cadr o3d5c@x)) (if (memv o3d5e@t '(quote)) (list 'quote (cadr o3d5c@x)) (if (memv o3d5e@t '(lambda)) (o2c4b@o2b8b@build-lambda '#f (cadr o3d5c@x) (o3d43@regen (caddr o3d5c@x))) (if (memv o3d5e@t '(map)) ((lambda (o3d60@ls) (cons '(primitive ellipsis-map) o3d60@ls)) (map o3d43@regen (cdr o3d5c@x))) (cons (list 'primitive (car o3d5c@x)) (map o3d43@regen (cdr o3d5c@x))))))))) (car o3d5c@x)))) (lambda (o3d44@e o3d45@r o3d46@mr) ((lambda (o3d4a@t) ((lambda (o3d4c@ls/false) (if o3d4c@ls/false (apply (lambda (o3d4e@x) (call-with-values (lambda () (o3d35@gen-syntax o3d44@e o3d4e@x o3d45@r '() o2efc@ellipsis? '#f)) (lambda (o3d54@o3d51 o3d55@o3d53) ((lambda (o3d58@maps o3d59@e) (o3d43@regen o3d59@e)) o3d55@o3d53 o3d54@o3d51)))) o3d4c@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3d4a@t))) (o2efa@syntax-dispatch o3d4a@t '(_ any)))) o3d44@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! o2f08@core-macro-transformer (lambda (o3e7c@name) ((lambda (o3e7e@t) (if (memv o3e7e@t '(quote)) o2eaa@quote-transformer (if (memv o3e7e@t '(lambda)) o2eae@lambda-transformer (if (memv o3e7e@t '(case-lambda)) o2eac@case-lambda-transformer (if (memv o3e7e@t '(letrec)) o2e92@letrec-transformer (if (memv o3e7e@t '(letrec*)) o2e94@letrec*-transformer (if (memv o3e7e@t '(if)) o2ea2@if-transformer (if (memv o3e7e@t '(and)) o2ea4@and-transformer (if (memv o3e7e@t '(or)) o2ea6@or-transformer (if (memv o3e7e@t '(foreign-call)) o2ef6@foreign-call-transformer (if (memv o3e7e@t '(syntax-case)) o2f02@syntax-case-transformer (if (memv o3e7e@t '(syntax)) o2f06@syntax-transformer (if (memv o3e7e@t '(type-descriptor)) o2e98@type-descriptor-transformer (if (memv o3e7e@t '(record-type-descriptor)) o2e9a@record-type-descriptor-transformer (if (memv o3e7e@t '(record-constructor-descriptor)) o2e9c@record-constructor-descriptor-transformer (if (memv o3e7e@t '(fluid-let-syntax)) o2e96@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" o3e7c@name))))))))))))))))) o3e7c@name))) (set! o2f0a@symbol-macro (lambda (o3e80@x o3e81@set) ((lambda (o3e84@t) ((lambda (o3e86@ls/false) (if (and o3e86@ls/false (apply (lambda (o3e88@name) (and (o2cef@id? o3e88@name) (memq (o2cf1@id->sym o3e88@name) o3e81@set))) o3e86@ls/false)) (apply (lambda (o3e8a@name) (o2eb0@bless (list 'quote o3e8a@name))) o3e86@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3e84@t))) (o2efa@syntax-dispatch o3e84@t '(_ any)))) o3e80@x))) (set! o2f0c@macro-transformer (lambda (o3e8c@x) (if (procedure? o3e8c@x) o3e8c@x (if (symbol? o3e8c@x) ((lambda (o3e8e@t) (if (memv o3e8e@t '(define-record-type)) o2eee@define-record-type-macro (if (memv o3e8e@t '(define-struct)) o2eec@define-struct-macro (if (memv o3e8e@t '(include)) o2ee2@include-macro (if (memv o3e8e@t '(cond)) o2ede@cond-macro (if (memv o3e8e@t '(let)) o2eb6@let-macro (if (memv o3e8e@t '(do)) o2ed6@do-macro (if (memv o3e8e@t '(or)) o2eda@or-macro (if (memv o3e8e@t '(and)) o2edc@and-macro (if (memv o3e8e@t '(let*)) o2ed8@let*-macro (if (memv o3e8e@t '(let-values)) o2eb8@let-values-macro (if (memv o3e8e@t '(let*-values)) o2eba@let*-values-macro (if (memv o3e8e@t '(syntax-rules)) o2ee6@syntax-rules-macro (if (memv o3e8e@t '(quasiquote)) o2ee8@quasiquote-macro (if (memv o3e8e@t '(quasisyntax)) o2eea@quasisyntax-macro (if (memv o3e8e@t '(with-syntax)) o2eb2@with-syntax-macro (if (memv o3e8e@t '(when)) o2e9e@when-macro (if (memv o3e8e@t '(unless)) o2ea0@unless-macro (if (memv o3e8e@t '(case)) o2ea8@case-macro (if (memv o3e8e@t '(identifier-syntax)) o2ed4@identifier-syntax-macro (if (memv o3e8e@t '(time)) o2ecc@time-macro (if (memv o3e8e@t '(delay)) o2ece@delay-macro (if (memv o3e8e@t '(assert)) o2ed0@assert-macro (if (memv o3e8e@t '(endianness)) o2ed2@endianness-macro (if (memv o3e8e@t '(guard)) o2ec8@guard-macro (if (memv o3e8e@t '(define-enumeration)) o2eca@define-enumeration-macro (if (memv o3e8e@t '(trace-lambda)) o2ebc@trace-lambda-macro (if (memv o3e8e@t '(trace-define)) o2ebe@trace-define-macro (if (memv o3e8e@t '(trace-define-syntax)) o2ec0@trace-define-syntax-macro (if (memv o3e8e@t '(trace-let-syntax)) o2ec4@trace-let-syntax-macro (if (memv o3e8e@t '(trace-letrec-syntax)) o2ec6@trace-letrec-syntax-macro (if (memv o3e8e@t '(define-condition-type)) o2ef0@define-condition-type-macro (if (memv o3e8e@t '(parameterize)) o2ef4@parameterize-macro (if (memv o3e8e@t '(include-into)) o2ee4@include-into-macro (if (memv o3e8e@t '(eol-style)) (lambda (o3e90@x) (o2f0a@symbol-macro o3e90@x '(none lf cr crlf nel crnel ls))) (if (memv o3e8e@t '(error-handling-mode)) (lambda (o3e92@x) (o2f0a@symbol-macro o3e92@x '(ignore raise replace))) (if (memv o3e8e@t '(buffer-mode)) (lambda (o3e94@x) (o2f0a@symbol-macro o3e94@x '(none line block))) (if (memv o3e8e@t '(file-options)) o2c62@file-options-macro (if (memv o3e8e@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) o2ef2@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" o3e8c@x)))))))))))))))))))))))))))))))))))))))) o3e8c@x) (error 'core-macro-transformer '"BUG: invalid macro" o3e8c@x))))) (set! o2f0e@local-macro-transformer (lambda (o3e96@x) (car o3e96@x))) (set! o2f10@do-macro-call (lambda (o3e98@transformer o3e99@expr) ((lambda (o3e9c@out) (begin ((letrec ((o3e9e@f (lambda (o3ea0@x) (if (not (o2cb7@stx? o3ea0@x)) (if (pair? o3ea0@x) (begin (o3e9e@f (car o3ea0@x)) (o3e9e@f (cdr o3ea0@x))) (if (vector? o3ea0@x) (vector-for-each o3e9e@f o3ea0@x) (if (symbol? o3ea0@x) (o2fe3@syntax-violation '#f '"raw symbol encountered in output of macro" o3e99@expr o3ea0@x) (void)))) (void))))) o3e9e@f) o3e9c@out) (o2cd9@add-mark (o2ccf@gen-mark) o3e9c@out o3e99@expr))) (o3e98@transformer (o2cd9@add-mark o2cd1@anti-mark o3e99@expr '#f))))) (set! o2f12@chi-macro (lambda (o3ea2@p o3ea3@e) (o2f10@do-macro-call (o2f0c@macro-transformer o3ea2@p) o3ea3@e))) (set! o2f14@chi-local-macro (lambda (o3ea6@p o3ea7@e) (o2f10@do-macro-call (o2f0e@local-macro-transformer o3ea6@p) o3ea7@e))) (set! o2f16@chi-global-macro (lambda (o3eaa@p o3eab@e) ((lambda (o3eae@lib o3eaf@loc) (begin (o2b14@o29b6@visit-library o3eae@lib) ((lambda (o3eb2@x) ((lambda (o3eb4@transformer) (o2f10@do-macro-call o3eb4@transformer o3eab@e)) (if (procedure? o3eb2@x) o3eb2@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" o3eb2@x)))) (symbol-value o3eaf@loc)))) (car o3eaa@p) (cdr o3eaa@p)))) (set! o2f18@chi-expr* (lambda (o3eb6@e* o3eb7@r o3eb8@mr) (if (null? o3eb6@e*) '() ((lambda (o3ebc@e) (cons o3ebc@e (o2f18@chi-expr* (cdr o3eb6@e*) o3eb7@r o3eb8@mr))) (o2f1c@chi-expr (car o3eb6@e*) o3eb7@r o3eb8@mr))))) (set! o2f1a@chi-application (lambda (o3ebe@e o3ebf@r o3ec0@mr) ((lambda (o3ec4@t) ((lambda (o3ec6@ls/false) (if o3ec6@ls/false (apply (lambda (o3ec8@rator o3ec9@rands) ((lambda (o3ecc@rator) (cons o3ecc@rator (o2f18@chi-expr* o3ec9@rands o3ebf@r o3ec0@mr))) (o2f1c@chi-expr o3ec8@rator o3ebf@r o3ec0@mr))) o3ec6@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3ec4@t))) (o2efa@syntax-dispatch o3ec4@t '(any . each-any)))) o3ebe@e))) (set! o2f1c@chi-expr (lambda (o3ece@e o3ecf@r o3ed0@mr) (call-with-values (lambda () (o2d17@syntax-type o3ece@e o3ecf@r)) (lambda (o3eda@o3ed5 o3edb@o3ed7 o3edc@o3ed9) ((lambda (o3ee0@kwd o3ee1@value o3ee2@type) ((lambda (o3ee6@t) (if (memv o3ee6@t '(core-macro)) ((lambda (o3ee8@transformer) (o3ee8@transformer o3ece@e o3ecf@r o3ed0@mr)) (o2f08@core-macro-transformer o3ee1@value)) (if (memv o3ee6@t '(global)) ((lambda (o3eea@lib) ((lambda (o3eec@loc) ((lambda () (begin ((o2f65@inv-collector) o3eea@lib) o3eec@loc)))) (cdr o3ee1@value))) (car o3ee1@value)) (if (memv o3ee6@t '(core-prim)) ((lambda (o3eee@name) (list 'primitive o3eee@name)) o3ee1@value) (if (memv o3ee6@t '(call)) (o2f1a@chi-application o3ece@e o3ecf@r o3ed0@mr) (if (memv o3ee6@t '(lexical)) ((lambda (o3ef0@lex) o3ef0@lex) (o2e86@lexical-var o3ee1@value)) (if (memv o3ee6@t '(global-macro global-macro!)) (o2f1c@chi-expr (o2f16@chi-global-macro o3ee1@value o3ece@e) o3ecf@r o3ed0@mr) (if (memv o3ee6@t '(local-macro local-macro!)) (o2f1c@chi-expr (o2f14@chi-local-macro o3ee1@value o3ece@e) o3ecf@r o3ed0@mr) (if (memv o3ee6@t '(macro macro!)) (o2f1c@chi-expr (o2f12@chi-macro o3ee1@value o3ece@e) o3ecf@r o3ed0@mr) (if (memv o3ee6@t '(constant)) ((lambda (o3ef2@datum) (list 'quote o3ef2@datum)) o3ee1@value) (if (memv o3ee6@t '(set!)) (o2f1e@chi-set! o3ece@e o3ecf@r o3ed0@mr) (if (memv o3ee6@t '(begin)) ((lambda (o3ef4@t) ((lambda (o3ef6@ls/false) (if o3ef6@ls/false (apply (lambda (o3ef8@x o3ef9@x*) (o2c4e@o2bbd@build-sequence '#f (o2f18@chi-expr* (cons o3ef8@x o3ef9@x*) o3ecf@r o3ed0@mr))) o3ef6@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3ef4@t))) (o2efa@syntax-dispatch o3ef4@t '(_ any . each-any)))) o3ece@e) (if (memv o3ee6@t '(let-syntax letrec-syntax)) ((lambda (o3efc@t) ((lambda (o3efe@ls/false) (if (and o3efe@ls/false (apply (lambda (o3f00@xlhs* o3f01@xrhs* o3f02@xbody o3f03@xbody*) (if (not (o2cf9@valid-bound-ids? o3f00@xlhs*)) (o2fe3@syntax-violation '#f '"invalid identifiers" o3ece@e) (void))) o3efe@ls/false)) (apply (lambda (o3f08@xlhs* o3f09@xrhs* o3f0a@xbody o3f0b@xbody*) ((lambda (o3f10@xlab*) ((lambda (o3f12@xrib) ((lambda (o3f14@xb*) ((lambda () (o2c4e@o2bbd@build-sequence '#f (o2f18@chi-expr* (map (lambda (o3f16@x) (o2cdb@add-subst o3f12@xrib o3f16@x)) (cons o3f0a@xbody o3f0b@xbody*)) (append (map cons o3f10@xlab* o3f14@xb*) o3ecf@r) (append (map cons o3f10@xlab* o3f14@xb*) o3ed0@mr)))))) (map (lambda (o3f18@x) (o2d2d@make-eval-transformer (o2f57@expand-transformer (if (eq? o3ee2@type 'let-syntax) o3f18@x (o2cdb@add-subst o3f12@xrib o3f18@x)) o3ed0@mr))) o3f09@xrhs*))) (o2caa@make-full-rib o3f08@xlhs* o3f10@xlab*))) (map o2c73@gen-label o3f08@xlhs*))) o3efe@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3efc@t))) (o2efa@syntax-dispatch o3efc@t '(_ #(each (any any)) any . each-any)))) o3ece@e) (if (memv o3ee6@t '(displaced-lexical)) (o2fe3@syntax-violation '#f '"identifier out of context" o3ece@e) (if (memv o3ee6@t '(syntax)) (o2fe3@syntax-violation '#f '"reference to pattern variable outside a syntax form" o3ece@e) (if (memv o3ee6@t '(define define-syntax module import library)) (o2fe3@syntax-violation '#f (string-append ((lambda (o3f1a@t) (if (memv o3f1a@t '(define)) '"a definition" (if (memv o3f1a@t '(define-syntax)) '"a define-syntax" (if (memv o3f1a@t '(module)) '"a module definition" (if (memv o3f1a@t '(library)) '"a library definition" (if (memv o3f1a@t '(import)) '"an import declaration" (if (memv o3f1a@t '(export)) '"an export declaration" '"a non-expression"))))))) o3ee2@type) '" was found where an expression was expected") o3ece@e) (if (memv o3ee6@t '(mutable)) (o2fe3@syntax-violation '#f '"attempt to reference an unexportable variable" o3ece@e) (o2fe3@syntax-violation '#f '"invalid expression" o3ece@e)))))))))))))))))) o3ee2@type)) o3edc@o3ed9 o3edb@o3ed7 o3eda@o3ed5))))) (set! o2f1e@chi-set! (lambda (o3f1c@e o3f1d@r o3f1e@mr) ((lambda (o3f22@t) ((lambda (o3f24@ls/false) (if (and o3f24@ls/false (apply (lambda (o3f26@x o3f27@v) (o2cef@id? o3f26@x)) o3f24@ls/false)) (apply (lambda (o3f2a@x o3f2b@v) (call-with-values (lambda () (o2d17@syntax-type o3f2a@x o3f1d@r)) (lambda (o3f34@o3f2f o3f35@o3f31 o3f36@o3f33) ((lambda (o3f3a@kwd o3f3b@value o3f3c@type) ((lambda (o3f40@t) (if (memv o3f40@t '(lexical)) (begin (o2e8a@set-lexical-mutable! o3f3b@value '#t) (list 'set! (o2e86@lexical-var o3f3b@value) (o2f1c@chi-expr o3f2b@v o3f1d@r o3f1e@mr))) (if (memv o3f40@t '(core-prim)) (o2fe3@syntax-violation '#f '"cannot modify imported core primitive" o3f1c@e) (if (memv o3f40@t '(global)) (o2fe3@syntax-violation '#f '"attempt to modify imported binding" o3f1c@e) (if (memv o3f40@t '(global-macro!)) (o2f1c@chi-expr (o2f16@chi-global-macro o3f3b@value o3f1c@e) o3f1d@r o3f1e@mr) (if (memv o3f40@t '(local-macro!)) (o2f1c@chi-expr (o2f14@chi-local-macro o3f3b@value o3f1c@e) o3f1d@r o3f1e@mr) (if (memv o3f40@t '(mutable)) (o2fe3@syntax-violation '#f '"attempt to assign to an unexportable variable" o3f1c@e) (o2fe3@syntax-violation '#f '"invalid syntax" o3f1c@e)))))))) o3f3c@type)) o3f36@o3f33 o3f35@o3f31 o3f34@o3f2f)))) o3f24@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3f22@t))) (o2efa@syntax-dispatch o3f22@t '(_ any any)))) o3f1c@e))) (set! o2f20@verify-formals (lambda (o3f42@fmls o3f43@stx) ((lambda (o3f46@t) ((lambda (o3f48@ls/false) (if o3f48@ls/false (apply (lambda (o3f4a@x*) (if (not (o2cf9@valid-bound-ids? o3f4a@x*)) (o2eb4@invalid-fmls-error o3f43@stx o3f42@fmls) (void))) o3f48@ls/false) ((lambda (o3f4c@t) ((lambda (o3f4e@ls/false) (if o3f4e@ls/false (apply (lambda (o3f50@x* o3f51@x) (if (not (o2cf9@valid-bound-ids? (cons o3f51@x o3f50@x*))) (o2eb4@invalid-fmls-error o3f43@stx o3f42@fmls) (void))) o3f4e@ls/false) ((lambda (o3f54@t) ((lambda (o3f56@ls/false) (if o3f56@ls/false (apply (lambda () (o2fe3@syntax-violation '#f '"invalid syntax" o3f43@stx)) o3f56@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3f54@t))) (o2efa@syntax-dispatch o3f54@t '_))) o3f4c@t))) (o2efa@syntax-dispatch o3f4c@t '#(each+ any () any)))) o3f46@t))) (o2efa@syntax-dispatch o3f46@t 'each-any))) o3f42@fmls))) (set! o2f22@chi-lambda-clause (lambda (o3f58@stx o3f59@fmls o3f5a@body* o3f5b@r o3f5c@mr) ((lambda (o3f62@t) ((lambda (o3f64@ls/false) (if o3f64@ls/false (apply (lambda (o3f66@x*) (begin (o2f20@verify-formals o3f59@fmls o3f58@stx) ((lambda (o3f68@lex* o3f69@lab*) (values o3f68@lex* (o2f32@chi-internal (o2cdb@add-subst (o2caa@make-full-rib o3f66@x* o3f69@lab*) o3f5a@body*) (o2e8e@add-lexicals o3f69@lab* o3f68@lex* o3f5b@r) o3f5c@mr))) (map o2c6f@gen-lexical o3f66@x*) (map o2c73@gen-label o3f66@x*)))) o3f64@ls/false) ((lambda (o3f6c@t) ((lambda (o3f6e@ls/false) (if o3f6e@ls/false (apply (lambda (o3f70@x* o3f71@x) (begin (o2f20@verify-formals o3f59@fmls o3f58@stx) ((lambda (o3f74@lex* o3f75@lab* o3f76@lex o3f77@lab) (values (append o3f74@lex* o3f76@lex) (o2f32@chi-internal (o2cdb@add-subst (o2caa@make-full-rib (cons o3f71@x o3f70@x*) (cons o3f77@lab o3f75@lab*)) o3f5a@body*) (o2e8e@add-lexicals (cons o3f77@lab o3f75@lab*) (cons o3f76@lex o3f74@lex*) o3f5b@r) o3f5c@mr))) (map o2c6f@gen-lexical o3f70@x*) (map o2c73@gen-label o3f70@x*) (o2c6f@gen-lexical o3f71@x) (o2c73@gen-label o3f71@x)))) o3f6e@ls/false) ((lambda (o3f7c@t) ((lambda (o3f7e@ls/false) (if o3f7e@ls/false (apply (lambda () (o2fe3@syntax-violation '#f '"invalid syntax" o3f59@fmls)) o3f7e@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o3f7c@t))) (o2efa@syntax-dispatch o3f7c@t '_))) o3f6c@t))) (o2efa@syntax-dispatch o3f6c@t '#(each+ any () any)))) o3f62@t))) (o2efa@syntax-dispatch o3f62@t 'each-any))) o3f59@fmls))) (set! o2f24@chi-lambda-clause* (lambda (o3f80@stx o3f81@fmls* o3f82@body** o3f83@r o3f84@mr) (if (null? o3f81@fmls*) (values '() '()) (call-with-values (lambda () (o2f22@chi-lambda-clause o3f80@stx (car o3f81@fmls*) (car o3f82@body**) o3f83@r o3f84@mr)) (lambda (o3f8e@o3f8b o3f8f@o3f8d) ((lambda (o3f92@b o3f93@a) (call-with-values (lambda () (o2f24@chi-lambda-clause* o3f80@stx (cdr o3f81@fmls*) (cdr o3f82@body**) o3f83@r o3f84@mr)) (lambda (o3f9a@o3f97 o3f9b@o3f99) ((lambda (o3f9e@b* o3f9f@a*) (values (cons o3f93@a o3f9f@a*) (cons o3f92@b o3f9e@b*))) o3f9b@o3f99 o3f9a@o3f97)))) o3f8f@o3f8d o3f8e@o3f8b)))))) (set! o2f26@chi-defun (lambda (o3fa2@x o3fa3@r o3fa4@mr) ((lambda (o3fa8@fmls o3fa9@body*) (call-with-values (lambda () (o2f22@chi-lambda-clause o3fa8@fmls o3fa8@fmls o3fa9@body* o3fa3@r o3fa4@mr)) (lambda (o3fb0@o3fad o3fb1@o3faf) ((lambda (o3fb4@body o3fb5@fmls) (o2c4b@o2b8b@build-lambda '#f o3fb5@fmls o3fb4@body)) o3fb1@o3faf o3fb0@o3fad)))) (car o3fa2@x) (cdr o3fa2@x)))) (set! o2f28@chi-rhs (lambda (o3fb8@rhs o3fb9@r o3fba@mr) ((lambda (o3fbe@t) (if (memv o3fbe@t '(defun)) (o2f26@chi-defun (cdr o3fb8@rhs) o3fb9@r o3fba@mr) (if (memv o3fbe@t '(expr)) ((lambda (o3fc0@expr) (o2f1c@chi-expr o3fc0@expr o3fb9@r o3fba@mr)) (cdr o3fb8@rhs)) (if (memv o3fbe@t '(top-expr)) ((lambda (o3fc2@expr) (o2c4e@o2bbd@build-sequence '#f (list (o2f1c@chi-expr o3fc2@expr o3fb9@r o3fba@mr) (o2c4f@o2bbf@build-void)))) (cdr o3fb8@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" o3fb8@rhs))))) (car o3fb8@rhs)))) (set! o2f2a@expand-interaction-rhs*/init* (lambda (o3fc4@lhs* o3fc5@rhs* o3fc6@init* o3fc7@r o3fc8@mr) ((letrec ((o3fce@f (lambda (o3fd0@lhs* o3fd1@rhs*) (if (null? o3fd0@lhs*) (map (lambda (o3fd4@x) (o2f1c@chi-expr o3fd4@x o3fc7@r o3fc8@mr)) o3fc6@init*) ((lambda (o3fd6@lhs o3fd7@rhs) ((lambda (o3fda@t) (if (memv o3fda@t '(defun)) ((lambda (o3fdc@rhs) (cons (list 'set! o3fd6@lhs o3fdc@rhs) (o3fce@f (cdr o3fd0@lhs*) (cdr o3fd1@rhs*)))) (o2f26@chi-defun (cdr o3fd7@rhs) o3fc7@r o3fc8@mr)) (if (memv o3fda@t '(expr)) ((lambda (o3fde@rhs) (cons (list 'set! o3fd6@lhs o3fde@rhs) (o3fce@f (cdr o3fd0@lhs*) (cdr o3fd1@rhs*)))) (o2f1c@chi-expr (cdr o3fd7@rhs) o3fc7@r o3fc8@mr)) (if (memv o3fda@t '(top-expr)) ((lambda (o3fe0@e) (cons o3fe0@e (o3fce@f (cdr o3fd0@lhs*) (cdr o3fd1@rhs*)))) (o2f1c@chi-expr (cdr o3fd7@rhs) o3fc7@r o3fc8@mr)) (error 'expand-interaction '"invallid" o3fd7@rhs))))) (car o3fd7@rhs))) (car o3fd0@lhs*) (car o3fd1@rhs*)))))) o3fce@f) o3fc4@lhs* o3fc5@rhs*))) (set! o2f2c@chi-rhs* (lambda (o3fe2@rhs* o3fe3@r o3fe4@mr) ((letrec ((o3fe8@f (lambda (o3fea@ls) (if (null? o3fea@ls) '() ((lambda (o3fec@a) (cons o3fec@a (o3fe8@f (cdr o3fea@ls)))) (o2f28@chi-rhs (car o3fea@ls) o3fe3@r o3fe4@mr)))))) o3fe8@f) o3fe2@rhs*))) (set! o2f2e@find-bound=? (lambda (o3fee@x o3fef@lhs* o3ff0@rhs*) (if (null? o3fef@lhs*) '#f (if (o2cf5@bound-id=? o3fee@x (car o3fef@lhs*)) (car o3ff0@rhs*) (o2f2e@find-bound=? o3fee@x (cdr o3fef@lhs*) (cdr o3ff0@rhs*)))))) (set! o2f30@find-dups (lambda (o3ff4@ls) ((letrec ((o3ff6@f (lambda (o3ff8@ls o3ff9@dups) (if (null? o3ff8@ls) o3ff9@dups ((lambda (o3ffc@t) (if o3ffc@t ((lambda (o3ffe@x) (o3ff6@f (cdr o3ff8@ls) (cons (list (car o3ff8@ls) o3ffe@x) o3ff9@dups))) o3ffc@t) (o3ff6@f (cdr o3ff8@ls) o3ff9@dups))) (o2f2e@find-bound=? (car o3ff8@ls) (cdr o3ff8@ls) (cdr o3ff8@ls))))))) o3ff6@f) o3ff4@ls '()))) (set! o2f32@chi-internal (lambda (o4000@e* o4001@r o4002@mr) ((lambda (o4006@rib) (call-with-values (lambda () (o2f55@chi-body* (map (lambda (o4018@x) (o2cdb@add-subst o4006@rib o4018@x)) (o2ced@syntax->list o4000@e*)) o4001@r o4002@mr '() '() '() '() '() o4006@rib '#f)) (lambda (o401a@o4009 o401b@o400b o401c@o400d o401d@o400f o401e@o4011 o401f@o4013 o4020@o4015 o4021@o4017) ((lambda (o402a@_exp* o402b@kwd* o402c@mod** o402d@rhs* o402e@lex* o402f@mr o4030@r o4031@e*) (begin (if (null? o4031@e*) (o2fe3@syntax-violation '#f '"no expression in body" o4031@e*) (void)) ((lambda (o403a@init*) ((lambda (o403c@rhs*) ((lambda () (o2c51@o2bc3@build-letrec* '#f (reverse o402e@lex*) (reverse o403c@rhs*) (o2c4e@o2bbd@build-sequence '#f o403a@init*))))) (o2f2c@chi-rhs* o402d@rhs* o4030@r o402f@mr))) (o2f18@chi-expr* (append (apply append (reverse o402c@mod**)) o4031@e*) o4030@r o402f@mr)))) o4021@o4017 o4020@o4015 o401f@o4013 o401e@o4011 o401d@o400f o401c@o400d o401b@o400b o401a@o4009)))) (o2c9e@make-empty-rib)))) (set! o2f34@parse-module (lambda (o403e@e) ((lambda (o4040@t) ((lambda (o4042@ls/false) (if o4042@ls/false (apply (lambda (o4044@export* o4045@b*) (begin (if (not (for-all o2cef@id? o4044@export*)) (o2fe3@syntax-violation '#f '"module exports must be identifiers" o403e@e) (void)) (values '#f (list->vector o4044@export*) o4045@b*))) o4042@ls/false) ((lambda (o4048@t) ((lambda (o404a@ls/false) (if o404a@ls/false (apply (lambda (o404c@name o404d@export* o404e@b*) (begin (if (not (o2cef@id? o404c@name)) (o2fe3@syntax-violation '#f '"module name must be an identifier" o403e@e) (void)) (if (not (for-all o2cef@id? o404d@export*)) (o2fe3@syntax-violation '#f '"module exports must be identifiers" o403e@e) (void)) (values o404c@name (list->vector o404d@export*) o404e@b*))) o404a@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o4048@t))) (o2efa@syntax-dispatch o4048@t '(_ any each-any . each-any)))) o4040@t))) (o2efa@syntax-dispatch o4040@t '(_ each-any . each-any)))) o403e@e))) (set! o2f3a@o2f35 (make-record-type-descriptor 'module-interface '#f 'o2f38 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! o2f3c@o2f37 '#f) (set! o2f3e@o2f36 (make-record-constructor-descriptor o2f3a@o2f35 '#f o2f3c@o2f37)) (set! o2f41@module-interface? (record-predicate o2f3a@o2f35)) (set! o2f43@make-module-interface (record-constructor o2f3e@o2f36)) (set! o2f45@module-interface-first-mark (record-accessor o2f3a@o2f35 '0)) (set! o2f47@module-interface-exp-id-vec (record-accessor o2f3a@o2f35 '1)) (set! o2f49@module-interface-exp-lab-vec (record-accessor o2f3a@o2f35 '2)) (set! o2f4b@set-module-interface-first-mark! (record-mutator o2f3a@o2f35 '0)) (set! o2f4d@set-module-interface-exp-id-vec! (record-mutator o2f3a@o2f35 '1)) (set! o2f4f@set-module-interface-exp-lab-vec! (record-mutator o2f3a@o2f35 '2)) (set! o2f51@module-interface-exp-id* (lambda (o4052@iface o4053@id) ((lambda (o4057@diff-marks) (begin (set! o4057@diff-marks (lambda (o405e@ls o405f@x) (begin (if (null? o405e@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (o4062@a) (if (eq? o4062@a o405f@x) '() (cons o4062@a (o4057@diff-marks (cdr o405e@ls) o405f@x)))) (car o405e@ls))))) ((lambda (o4058@diff o4059@id-vec) (if (null? o4058@diff) o4059@id-vec (vector-map (lambda (o405c@x) (o2cb9@make-stx (o2cbb@stx-expr o405c@x) (append o4058@diff (o2cbd@stx-mark* o405c@x)) '() '())) o4059@id-vec))) (o4057@diff-marks (o2cbd@stx-mark* o4053@id) (o2f45@module-interface-first-mark o4052@iface)) (o2f47@module-interface-exp-id-vec o4052@iface)))) '#f))) (set! o2f53@chi-internal-module (lambda (o4064@e o4065@r o4066@mr o4067@lex* o4068@rhs* o4069@mod** o406a@kwd*) (call-with-values (lambda () (o2f34@parse-module o4064@e)) (lambda (o4078@o4073 o4079@o4075 o407a@o4077) ((lambda (o407e@e* o407f@exp-id* o4080@name) ((lambda (o4084@rib) ((lambda (o4086@e*) ((lambda () (call-with-values (lambda () (o2f55@chi-body* o4086@e* o4065@r o4066@mr o4067@lex* o4068@rhs* o4069@mod** o406a@kwd* '() o4084@rib '#f)) (lambda (o4098@o4089 o4099@o408b o409a@o408d o409b@o408f o409c@o4091 o409d@o4093 o409e@o4095 o409f@o4097) ((lambda (o40a8@_exp* o40a9@kwd* o40aa@mod** o40ab@rhs* o40ac@lex* o40ad@mr o40ae@r o40af@e*) ((lambda (o40b8@exp-lab* o40b9@mod**) (if (not o4080@name) (values o40ac@lex* o40ab@rhs* o407f@exp-id* o40b8@exp-lab* o40ae@r o40ad@mr o40b9@mod** o40a9@kwd*) ((lambda (o40bc@lab o40bd@iface) (values o40ac@lex* o40ab@rhs* (vector o4080@name) (vector o40bc@lab) (cons (cons o40bc@lab (cons '$module o40bd@iface)) o40ae@r) (cons (cons o40bc@lab (cons '$module o40bd@iface)) o40ad@mr) o40b9@mod** o40a9@kwd*)) (o2c73@gen-label 'module) (o2f43@make-module-interface (car (o2cbd@stx-mark* o4080@name)) (vector-map (lambda (o40c0@x) (o2cb9@make-stx (o2cbb@stx-expr o40c0@x) (o2cbd@stx-mark* o40c0@x) '() '())) o407f@exp-id*) o40b8@exp-lab*)))) (vector-map (lambda (o40c2@x) (or (o2d09@id->label (o2cb9@make-stx (o2cf1@id->sym o40c2@x) (o2cbd@stx-mark* o40c2@x) (list o4084@rib) '())) (o2fe3@syntax-violation '#f '"cannot find module export" o40c2@x))) o407f@exp-id*) (cons o40af@e* o40aa@mod**))) o409f@o4097 o409e@o4095 o409d@o4093 o409c@o4091 o409b@o408f o409a@o408d o4099@o408b o4098@o4089)))))) (map (lambda (o40c4@x) (o2cdb@add-subst o4084@rib o40c4@x)) (o2ced@syntax->list o407e@e*)))) (o2c9e@make-empty-rib))) o407a@o4077 o4079@o4075 o4078@o4073))))) (set! o2f55@chi-body* (lambda (o40c6@e* o40c7@r o40c8@mr o40c9@lex* o40ca@rhs* o40cb@mod** o40cc@kwd* o40cd@exp* o40ce@rib o40cf@top?) (if (null? o40c6@e*) (values o40c6@e* o40c7@r o40c8@mr o40c9@lex* o40ca@rhs* o40cb@mod** o40cc@kwd* o40cd@exp*) ((lambda (o40da@e) (call-with-values (lambda () (o2d17@syntax-type o40da@e o40c7@r)) (lambda (o40e2@o40dd o40e3@o40df o40e4@o40e1) ((lambda (o40e8@kwd o40e9@value o40ea@type) ((lambda (o40ee@kwd*) ((lambda (o40f0@t) (if (memv o40f0@t '(define)) (call-with-values (lambda () (o2e7e@parse-define o40da@e)) (lambda (o40f6@o40f3 o40f7@o40f5) ((lambda (o40fa@rhs o40fb@id) (begin (if (o2cfd@bound-id-member? o40fb@id o40ee@kwd*) (o2fe3@syntax-violation '#f '"cannot redefine keyword" o40da@e) (void)) (call-with-values (lambda () (o2c77@gen-define-label+loc o40fb@id o40ce@rib)) (lambda (o4102@o40ff o4103@o4101) ((lambda (o4106@lex o4107@lab) (begin (o2ca0@extend-rib! o40ce@rib o40fb@id o4107@lab) (o2f55@chi-body* (cdr o40c6@e*) (o2e8c@add-lexical o4107@lab o4106@lex o40c7@r) o40c8@mr (cons o4106@lex o40c9@lex*) (cons o40fa@rhs o40ca@rhs*) o40cb@mod** o40ee@kwd* o40cd@exp* o40ce@rib o40cf@top?))) o4103@o4101 o4102@o40ff))))) o40f7@o40f5 o40f6@o40f3))) (if (memv o40f0@t '(define-syntax)) (call-with-values (lambda () (o2e80@parse-define-syntax o40da@e)) (lambda (o410e@o410b o410f@o410d) ((lambda (o4112@rhs o4113@id) (begin (if (o2cfd@bound-id-member? o4113@id o40ee@kwd*) (o2fe3@syntax-violation '#f '"cannot redefine keyword" o40da@e) (void)) ((lambda (o4116@lab o4117@expanded-rhs) (begin (o2ca0@extend-rib! o40ce@rib o4113@id o4116@lab) ((lambda (o411a@b) (o2f55@chi-body* (cdr o40c6@e*) (cons (cons o4116@lab o411a@b) o40c7@r) (cons (cons o4116@lab o411a@b) o40c8@mr) o40c9@lex* o40ca@rhs* o40cb@mod** o40ee@kwd* o40cd@exp* o40ce@rib o40cf@top?)) (o2d2d@make-eval-transformer o4117@expanded-rhs)))) (o2c79@gen-define-label o4113@id o40ce@rib) (o2f57@expand-transformer o4112@rhs o40c8@mr)))) o410f@o410d o410e@o410b))) (if (memv o40f0@t '(let-syntax letrec-syntax)) ((lambda (o411c@t) ((lambda (o411e@ls/false) (if (and o411e@ls/false (apply (lambda (o4120@xlhs* o4121@xrhs* o4122@xbody*) (if (not (o2cf9@valid-bound-ids? o4120@xlhs*)) (o2fe3@syntax-violation '#f '"invalid identifiers" o40da@e) (void))) o411e@ls/false)) (apply (lambda (o4126@xlhs* o4127@xrhs* o4128@xbody*) ((lambda (o412c@xlab*) ((lambda (o412e@xrib) ((lambda (o4130@xb*) ((lambda () (o2f55@chi-body* (append (map (lambda (o4132@x) (o2cdb@add-subst o412e@xrib o4132@x)) o4128@xbody*) (cdr o40c6@e*)) (append (map cons o412c@xlab* o4130@xb*) o40c7@r) (append (map cons o412c@xlab* o4130@xb*) o40c8@mr) o40c9@lex* o40ca@rhs* o40cb@mod** o40ee@kwd* o40cd@exp* o40ce@rib o40cf@top?)))) (map (lambda (o4134@x) (o2d2d@make-eval-transformer (o2f57@expand-transformer (if (eq? o40ea@type 'let-syntax) o4134@x (o2cdb@add-subst o412e@xrib o4134@x)) o40c8@mr))) o4127@xrhs*))) (o2caa@make-full-rib o4126@xlhs* o412c@xlab*))) (map o2c73@gen-label o4126@xlhs*))) o411e@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o411c@t))) (o2efa@syntax-dispatch o411c@t '(_ #(each (any any)) . each-any)))) o40da@e) (if (memv o40f0@t '(begin)) ((lambda (o4136@t) ((lambda (o4138@ls/false) (if o4138@ls/false (apply (lambda (o413a@x*) (o2f55@chi-body* (append o413a@x* (cdr o40c6@e*)) o40c7@r o40c8@mr o40c9@lex* o40ca@rhs* o40cb@mod** o40ee@kwd* o40cd@exp* o40ce@rib o40cf@top?)) o4138@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o4136@t))) (o2efa@syntax-dispatch o4136@t '(_ . each-any)))) o40da@e) (if (memv o40f0@t '(global-macro global-macro!)) (o2f55@chi-body* (cons (o2cdb@add-subst o40ce@rib (o2f16@chi-global-macro o40e9@value o40da@e)) (cdr o40c6@e*)) o40c7@r o40c8@mr o40c9@lex* o40ca@rhs* o40cb@mod** o40ee@kwd* o40cd@exp* o40ce@rib o40cf@top?) (if (memv o40f0@t '(local-macro local-macro!)) (o2f55@chi-body* (cons (o2cdb@add-subst o40ce@rib (o2f14@chi-local-macro o40e9@value o40da@e)) (cdr o40c6@e*)) o40c7@r o40c8@mr o40c9@lex* o40ca@rhs* o40cb@mod** o40ee@kwd* o40cd@exp* o40ce@rib o40cf@top?) (if (memv o40f0@t '(macro macro!)) (o2f55@chi-body* (cons (o2cdb@add-subst o40ce@rib (o2f12@chi-macro o40e9@value o40da@e)) (cdr o40c6@e*)) o40c7@r o40c8@mr o40c9@lex* o40ca@rhs* o40cb@mod** o40ee@kwd* o40cd@exp* o40ce@rib o40cf@top?) (if (memv o40f0@t '(module)) (call-with-values (lambda () (o2f53@chi-internal-module o40da@e o40c7@r o40c8@mr o40c9@lex* o40ca@rhs* o40cb@mod** o40ee@kwd*)) (lambda (o414c@o413d o414d@o413f o414e@o4141 o414f@o4143 o4150@o4145 o4151@o4147 o4152@o4149 o4153@o414b) ((lambda (o415c@kwd* o415d@mod** o415e@mr o415f@r o4160@m-exp-lab* o4161@m-exp-id* o4162@rhs* o4163@lex*) (begin (vector-for-each (lambda (o416c@id o416d@lab) (o2ca0@extend-rib! o40ce@rib o416c@id o416d@lab)) o4161@m-exp-id* o4160@m-exp-lab*) (o2f55@chi-body* (cdr o40c6@e*) o415f@r o415e@mr o4163@lex* o4162@rhs* o415d@mod** o415c@kwd* o40cd@exp* o40ce@rib o40cf@top?))) o4153@o414b o4152@o4149 o4151@o4147 o4150@o4145 o414f@o4143 o414e@o4141 o414d@o413f o414c@o413d))) (if (memv o40f0@t '(library)) (begin (o2fc5@library-expander (o2d05@stx->datum o40da@e)) (o2f55@chi-body* (cdr o40c6@e*) o40c7@r o40c8@mr o40c9@lex* o40ca@rhs* o40cb@mod** o40ee@kwd* o40cd@exp* o40ce@rib o40cf@top?)) (if (memv o40f0@t '(export)) ((lambda (o4170@t) ((lambda (o4172@ls/false) (if o4172@ls/false (apply (lambda (o4174@exp-decl*) (o2f55@chi-body* (cdr o40c6@e*) o40c7@r o40c8@mr o40c9@lex* o40ca@rhs* o40cb@mod** o40ee@kwd* (append o4174@exp-decl* o40cd@exp*) o40ce@rib o40cf@top?)) o4172@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o4170@t))) (o2efa@syntax-dispatch o4170@t '(_ . each-any)))) o40da@e) (if (memv o40f0@t '(import)) ((lambda () ((lambda (o4177@module-import? o4179@module-import o417b@library-import) (begin (set! o4177@module-import? (lambda (o41ca@e) ((lambda (o41cc@t) ((lambda (o41ce@ls/false) (if (and o41ce@ls/false (apply (lambda (o41d0@id) (o2cef@id? o41d0@id)) o41ce@ls/false)) (apply (lambda (o41d2@id) '#t) o41ce@ls/false) ((lambda (o41d4@t) ((lambda (o41d6@ls/false) (if o41d6@ls/false (apply (lambda (o41d8@imp*) '#f) o41d6@ls/false) ((lambda (o41da@t) ((lambda (o41dc@ls/false) (if o41dc@ls/false (apply (lambda () (o2fe3@syntax-violation '#f '"malformed import form" o41ca@e)) o41dc@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o41da@t))) (o2efa@syntax-dispatch o41da@t '_))) o41d4@t))) (o2efa@syntax-dispatch o41d4@t '(_ . each-any)))) o41cc@t))) (o2efa@syntax-dispatch o41cc@t '(_ any)))) o41ca@e))) (set! o4179@module-import (lambda (o41a8@e o41a9@r) ((lambda (o41ac@t) ((lambda (o41ae@ls/false) (if (and o41ae@ls/false (apply (lambda (o41b0@id) (o2cef@id? o41b0@id)) o41ae@ls/false)) (apply (lambda (o41b2@id) (call-with-values (lambda () (o2d17@syntax-type o41b2@id o41a9@r)) (lambda (o41ba@o41b5 o41bb@o41b7 o41bc@o41b9) ((lambda (o41c0@kwd o41c1@value o41c2@type) ((lambda (o41c6@t) (if (memv o41c6@t '($module)) ((lambda (o41c8@iface) (values (o2f51@module-interface-exp-id* o41c8@iface o41b2@id) (o2f49@module-interface-exp-lab-vec o41c8@iface))) o41c1@value) (o2fe3@syntax-violation '#f '"invalid import" o41a8@e))) o41c2@type)) o41bc@o41b9 o41bb@o41b7 o41ba@o41b5)))) o41ae@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o41ac@t))) (o2efa@syntax-dispatch o41ac@t '(_ any)))) o41a8@e))) (set! o417b@library-import (lambda (o418c@e) ((lambda (o418e@t) ((lambda (o4190@ls/false) (if o4190@ls/false (apply (lambda (o4192@ctxt o4193@imp*) (call-with-values (lambda () (o2f5f@parse-import-spec* (o2fe9@syntax->datum o4193@imp*))) (lambda (o419a@o4197 o419b@o4199) ((lambda (o419e@subst-labels o419f@subst-names) (values (vector-map (lambda (o41a2@name) (o2ccd@datum->stx o4192@ctxt o41a2@name)) o419f@subst-names) o419e@subst-labels)) o419b@o4199 o419a@o4197)))) o4190@ls/false) ((lambda (o41a4@t) ((lambda (o41a6@ls/false) (if o41a6@ls/false (apply (lambda () (o2fe3@syntax-violation '#f '"invalid import form" o418c@e)) o41a6@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o41a4@t))) (o2efa@syntax-dispatch o41a4@t '_))) o418e@t))) (o2efa@syntax-dispatch o418e@t '(any . each-any)))) o418c@e))) (begin (call-with-values (lambda () (if (o4177@module-import? o40da@e) (o4179@module-import o40da@e o40c7@r) (o417b@library-import o40da@e))) (lambda (o4180@o417d o4181@o417f) ((lambda (o4184@lab* o4185@id*) (vector-for-each (lambda (o4188@id o4189@lab) (o2ca0@extend-rib! o40ce@rib o4188@id o4189@lab)) o4185@id* o4184@lab*)) o4181@o417f o4180@o417d))) (o2f55@chi-body* (cdr o40c6@e*) o40c7@r o40c8@mr o40c9@lex* o40ca@rhs* o40cb@mod** o40ee@kwd* o40cd@exp* o40ce@rib o40cf@top?)))) '#f '#f '#f))) (if o40cf@top? (o2f55@chi-body* (cdr o40c6@e*) o40c7@r o40c8@mr (cons (o2c6f@gen-lexical 'dummy) o40c9@lex*) (cons (cons 'top-expr o40da@e) o40ca@rhs*) o40cb@mod** o40ee@kwd* o40cd@exp* o40ce@rib o40cf@top?) (values o40c6@e* o40c7@r o40c8@mr o40c9@lex* o40ca@rhs* o40cb@mod** o40ee@kwd* o40cd@exp*)))))))))))))) o40ea@type)) (if (o2cef@id? o40e8@kwd) (cons o40e8@kwd o40cc@kwd*) o40cc@kwd*))) o40e4@o40e1 o40e3@o40df o40e2@o40dd)))) (car o40c6@e*))))) (set! o2f57@expand-transformer (lambda (o41de@expr o41df@r) ((lambda (o41e2@rtc) ((lambda (o41e4@expanded-rhs) (begin (for-each ((lambda (o41e6@mark-visit) (lambda (o41e8@x) (begin (o2b13@o29b4@invoke-library o41e8@x) (o41e6@mark-visit o41e8@x)))) (o2f67@vis-collector)) (o41e2@rtc)) o41e4@expanded-rhs)) ((lambda (o41f2@o41eb o41f3@o41ed o41f4@o41ef o41f5@o41f1) ((lambda (o41fa@swap) (dynamic-wind o41fa@swap (lambda () (o2f1c@chi-expr o41de@expr o41df@r o41df@r)) o41fa@swap)) (lambda () (begin ((lambda (o41fc@t) (begin (o41f2@o41eb o41f4@o41ef) (set! o41f4@o41ef o41fc@t))) (o41f2@o41eb)) ((lambda (o41fe@t) (begin (o41f3@o41ed o41f5@o41f1) (set! o41f5@o41f1 o41fe@t))) (o41f3@o41ed)))))) o2f65@inv-collector o2f67@vis-collector o41e2@rtc (lambda (o4200@x) (values))))) (o2f63@make-collector)))) (set! o2f59@parse-exports (lambda (o4202@exp*) ((letrec ((o4204@f (lambda (o4206@exp* o4207@int* o4208@ext*) (if (null? o4206@exp*) (begin (if (not (o2cf9@valid-bound-ids? o4208@ext*)) (o2fe3@syntax-violation 'export '"invalid exports" (o2f30@find-dups o4208@ext*)) (void)) (values (map o2fe9@syntax->datum o4208@ext*) o4207@int*)) ((lambda (o420c@t) ((lambda (o420e@ls/false) (if o420e@ls/false (apply (lambda (o4210@rename o4211@i* o4212@e*) (begin (if (not (and (eq? (o2fe9@syntax->datum o4210@rename) 'rename) (for-all o2cef@id? o4211@i*) (for-all o2cef@id? o4212@e*))) (o2fe3@syntax-violation 'export '"invalid export specifier" (car o4206@exp*)) (void)) (o4204@f (cdr o4206@exp*) (append o4211@i* o4207@int*) (append o4212@e* o4208@ext*)))) o420e@ls/false) ((lambda (o4216@t) ((lambda (o4218@ls/false) (if o4218@ls/false (apply (lambda (o421a@ie) (begin (if (not (o2cef@id? o421a@ie)) (o2fe3@syntax-violation 'export '"invalid export" o421a@ie) (void)) (o4204@f (cdr o4206@exp*) (cons o421a@ie o4207@int*) (cons o421a@ie o4208@ext*)))) o4218@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o4216@t))) (o2efa@syntax-dispatch o4216@t 'any))) o420c@t))) (o2efa@syntax-dispatch o420c@t '(any . #(each (any any)))))) (car o4206@exp*)))))) o4204@f) o4202@exp* '() '()))) (set! o2f5b@parse-library-name (lambda (o421c@spec) ((lambda (o421f@parse) (begin (set! o421f@parse (lambda (o422c@x) ((lambda (o422e@t) ((lambda (o4230@ls/false) (if (and o4230@ls/false (apply (lambda (o4232@v*) (for-all (lambda (o4234@x) ((lambda (o4236@x) (and (integer? o4236@x) (exact? o4236@x))) (o2fe9@syntax->datum o4234@x))) o4232@v*)) o4230@ls/false)) (apply (lambda (o4238@v*) (values '() (map o2fe9@syntax->datum o4238@v*))) o4230@ls/false) ((lambda (o423a@t) ((lambda (o423c@ls/false) (if (and o423c@ls/false (apply (lambda (o423e@x o423f@rest) (symbol? (o2fe9@syntax->datum o423e@x))) o423c@ls/false)) (apply (lambda (o4242@x o4243@rest) (call-with-values (lambda () (o421f@parse o4243@rest)) (lambda (o424a@o4247 o424b@o4249) ((lambda (o424e@v* o424f@x*) (values (cons (o2fe9@syntax->datum o4242@x) o424f@x*) o424e@v*)) o424b@o4249 o424a@o4247)))) o423c@ls/false) ((lambda (o4252@t) ((lambda (o4254@ls/false) (if o4254@ls/false (apply (lambda () (values '() '())) o4254@ls/false) ((lambda (o4256@t) ((lambda (o4258@ls/false) (if o4258@ls/false (apply (lambda () (o2fe3@syntax-violation '#f '"invalid library name" o421c@spec)) o4258@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o4256@t))) (o2efa@syntax-dispatch o4256@t '_))) o4252@t))) (o2efa@syntax-dispatch o4252@t '()))) o423a@t))) (o2efa@syntax-dispatch o423a@t '(any . any)))) o422e@t))) (o2efa@syntax-dispatch o422e@t '(each-any)))) o422c@x))) (call-with-values (lambda () (o421f@parse o421c@spec)) (lambda (o4224@o4221 o4225@o4223) ((lambda (o4228@ver* o4229@name*) (begin (if (null? o4229@name*) (o2fe3@syntax-violation '#f '"empty library name" o421c@spec) (void)) (values o4229@name* o4228@ver*))) o4225@o4223 o4224@o4221))))) '#f))) (set! o2f5d@parse-library (lambda (o425a@e) ((lambda (o425c@t) ((lambda (o425e@ls/false) (if (and o425e@ls/false (apply (lambda (o4260@library o4261@name* o4262@export o4263@exp* o4264@import o4265@imp* o4266@b*) (and (eq? (o2fe9@syntax->datum o4262@export) 'export) (eq? (o2fe9@syntax->datum o4264@import) 'import) (eq? (o2fe9@syntax->datum o4260@library) 'library))) o425e@ls/false)) (apply (lambda (o426e@library o426f@name* o4270@export o4271@exp* o4272@import o4273@imp* o4274@b*) (values o426f@name* o4271@exp* o4273@imp* o4274@b*)) o425e@ls/false) ((lambda (o427c@t) ((lambda (o427e@ls/false) (if o427e@ls/false (apply (lambda () (o2fe3@syntax-violation '#f '"malformed library" o425a@e)) o427e@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o427c@t))) (o2efa@syntax-dispatch o427c@t '_))) o425c@t))) (o2efa@syntax-dispatch o425c@t '(any each-any (any . each-any) (any . each-any) . each-any)))) o425a@e))) (set! o2f5f@parse-import-spec* ((lambda () ((lambda (o4281@idsyn? o4283@dup-error o4285@merge-substs o4287@exclude* o4289@find* o428b@rem* o428d@remove-dups o428f@parse-library-name o4291@import-library o4293@get-import o4295@add-imports!) (begin (set! o4281@idsyn? (lambda (o448a@x) (symbol? (o2fe9@syntax->datum o448a@x)))) (set! o4283@dup-error (lambda (o4488@name) (o2fe3@syntax-violation 'import '"two imports with different bindings" o4488@name))) (set! o4285@merge-substs (lambda (o4476@s o4477@subst) ((lambda (o447b@insert-to-subst) (begin (set! o447b@insert-to-subst (lambda (o447c@a o447d@subst) ((lambda (o4480@name o4481@label) ((lambda (o4484@t) (if o4484@t ((lambda (o4486@x) (if (eq? (cdr o4486@x) o4481@label) o447d@subst (o4283@dup-error o4480@name))) o4484@t) (cons o447c@a o447d@subst))) (assq o4480@name o447d@subst))) (car o447c@a) (cdr o447c@a)))) (if (null? o4476@s) o4477@subst (o447b@insert-to-subst (car o4476@s) (o4285@merge-substs (cdr o4476@s) o4477@subst))))) '#f))) (set! o4287@exclude* (lambda (o4446@sym* o4447@subst) ((lambda (o444b@exclude) (begin (set! o444b@exclude (lambda (o4464@sym o4465@subst) (if (null? o4465@subst) (o2fe3@syntax-violation 'import '"cannot rename unbound identifier" o4464@sym) (if (eq? o4464@sym (caar o4465@subst)) (values (cdar o4465@subst) (cdr o4465@subst)) ((lambda (o4468@a) (call-with-values (lambda () (o444b@exclude o4464@sym (cdr o4465@subst))) (lambda (o446e@o446b o446f@o446d) ((lambda (o4472@subst o4473@old) (values o4473@old (cons o4468@a o4472@subst))) o446f@o446d o446e@o446b)))) (car o4465@subst)))))) (if (null? o4446@sym*) (values '() o4447@subst) (call-with-values (lambda () (o444b@exclude (car o4446@sym*) o4447@subst)) (lambda (o4450@o444d o4451@o444f) ((lambda (o4454@subst o4455@old) (call-with-values (lambda () (o4287@exclude* (cdr o4446@sym*) o4454@subst)) (lambda (o445c@o4459 o445d@o445b) ((lambda (o4460@subst o4461@old*) (values (cons o4455@old o4461@old*) o4460@subst)) o445d@o445b o445c@o4459)))) o4451@o444f o4450@o444d)))))) '#f))) (set! o4289@find* (lambda (o443e@sym* o443f@subst) (map (lambda (o4442@x) ((lambda (o4444@t) (if o4444@t (cdr o4444@t) (o2fe3@syntax-violation 'import '"cannot find identifier" o4442@x))) (assq o4442@x o443f@subst))) o443e@sym*))) (set! o428b@rem* (lambda (o4436@sym* o4437@subst) ((letrec ((o443a@f (lambda (o443c@subst) (if (null? o443c@subst) '() (if (memq (caar o443c@subst) o4436@sym*) (o443a@f (cdr o443c@subst)) (cons (car o443c@subst) (o443a@f (cdr o443c@subst)))))))) o443a@f) o4437@subst))) (set! o428d@remove-dups (lambda (o4434@ls) (if (null? o4434@ls) '() (if (memq (car o4434@ls) (cdr o4434@ls)) (o428d@remove-dups (cdr o4434@ls)) (cons (car o4434@ls) (o428d@remove-dups (cdr o4434@ls))))))) (set! o428f@parse-library-name (lambda (o434c@spec) ((lambda (o434f@subversion? o4351@subversion-pred o4353@version-pred) (begin (set! o434f@subversion? (lambda (o4430@x) ((lambda (o4432@x) (and (integer? o4432@x) (exact? o4432@x) (>= o4432@x '0))) (o2fe9@syntax->datum o4430@x)))) (set! o4351@subversion-pred (lambda (o43d0@x*) ((lambda (o43d2@t) ((lambda (o43d4@ls/false) (if (and o43d4@ls/false (apply (lambda (o43d6@n) (o434f@subversion? o43d6@n)) o43d4@ls/false)) (apply (lambda (o43d8@n) (lambda (o43da@x) (= o43da@x (o2fe9@syntax->datum o43d8@n)))) o43d4@ls/false) ((lambda (o43dc@t) ((lambda (o43de@ls/false) (if (and o43de@ls/false (apply (lambda (o43e0@p? o43e1@sub*) (eq? (o2fe9@syntax->datum o43e0@p?) 'and)) o43de@ls/false)) (apply (lambda (o43e4@p? o43e5@sub*) ((lambda (o43e8@p*) (lambda (o43ea@x) (for-all (lambda (o43ec@p) (o43ec@p o43ea@x)) o43e8@p*))) (map o4351@subversion-pred o43e5@sub*))) o43de@ls/false) ((lambda (o43ee@t) ((lambda (o43f0@ls/false) (if (and o43f0@ls/false (apply (lambda (o43f2@p? o43f3@sub*) (eq? (o2fe9@syntax->datum o43f2@p?) 'or)) o43f0@ls/false)) (apply (lambda (o43f6@p? o43f7@sub*) ((lambda (o43fa@p*) (lambda (o43fc@x) (exists (lambda (o43fe@p) (o43fe@p o43fc@x)) o43fa@p*))) (map o4351@subversion-pred o43f7@sub*))) o43f0@ls/false) ((lambda (o4400@t) ((lambda (o4402@ls/false) (if (and o4402@ls/false (apply (lambda (o4404@p? o4405@sub) (eq? (o2fe9@syntax->datum o4404@p?) 'not)) o4402@ls/false)) (apply (lambda (o4408@p? o4409@sub) ((lambda (o440c@p) (lambda (o440e@x) (not (o440c@p o440e@x)))) (o4351@subversion-pred o4409@sub))) o4402@ls/false) ((lambda (o4410@t) ((lambda (o4412@ls/false) (if (and o4412@ls/false (apply (lambda (o4414@p? o4415@n) (and (eq? (o2fe9@syntax->datum o4414@p?) '<=) (o434f@subversion? o4415@n))) o4412@ls/false)) (apply (lambda (o4418@p? o4419@n) (lambda (o441c@x) (<= o441c@x (o2fe9@syntax->datum o4419@n)))) o4412@ls/false) ((lambda (o441e@t) ((lambda (o4420@ls/false) (if (and o4420@ls/false (apply (lambda (o4422@p? o4423@n) (and (eq? (o2fe9@syntax->datum o4422@p?) '>=) (o434f@subversion? o4423@n))) o4420@ls/false)) (apply (lambda (o4426@p? o4427@n) (lambda (o442a@x) (>= o442a@x (o2fe9@syntax->datum o4427@n)))) o4420@ls/false) ((lambda (o442c@t) ((lambda (o442e@ls/false) (if o442e@ls/false (apply (lambda () (o2fe3@syntax-violation 'import '"invalid sub-version spec" o434c@spec o43d0@x*)) o442e@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o442c@t))) (o2efa@syntax-dispatch o442c@t '_))) o441e@t))) (o2efa@syntax-dispatch o441e@t '(any any)))) o4410@t))) (o2efa@syntax-dispatch o4410@t '(any any)))) o4400@t))) (o2efa@syntax-dispatch o4400@t '(any any)))) o43ee@t))) (o2efa@syntax-dispatch o43ee@t '(any . each-any)))) o43dc@t))) (o2efa@syntax-dispatch o43dc@t '(any . each-any)))) o43d2@t))) (o2efa@syntax-dispatch o43d2@t 'any))) o43d0@x*))) (set! o4353@version-pred (lambda (o4380@x*) ((lambda (o4382@t) ((lambda (o4384@ls/false) (if o4384@ls/false (apply (lambda () (lambda (o4386@x) '#t)) o4384@ls/false) ((lambda (o4388@t) ((lambda (o438a@ls/false) (if (and o438a@ls/false (apply (lambda (o438c@c o438d@ver*) (eq? (o2fe9@syntax->datum o438c@c) 'and)) o438a@ls/false)) (apply (lambda (o4390@c o4391@ver*) ((lambda (o4394@p*) (lambda (o4396@x) (for-all (lambda (o4398@p) (o4398@p o4396@x)) o4394@p*))) (map o4353@version-pred o4391@ver*))) o438a@ls/false) ((lambda (o439a@t) ((lambda (o439c@ls/false) (if (and o439c@ls/false (apply (lambda (o439e@c o439f@ver*) (eq? (o2fe9@syntax->datum o439e@c) 'or)) o439c@ls/false)) (apply (lambda (o43a2@c o43a3@ver*) ((lambda (o43a6@p*) (lambda (o43a8@x) (exists (lambda (o43aa@p) (o43aa@p o43a8@x)) o43a6@p*))) (map o4353@version-pred o43a3@ver*))) o439c@ls/false) ((lambda (o43ac@t) ((lambda (o43ae@ls/false) (if (and o43ae@ls/false (apply (lambda (o43b0@c o43b1@ver) (eq? (o2fe9@syntax->datum o43b0@c) 'not)) o43ae@ls/false)) (apply (lambda (o43b4@c o43b5@ver) ((lambda (o43b8@p) (lambda (o43ba@x) (not (o43b8@p o43ba@x)))) (o4353@version-pred o43b5@ver))) o43ae@ls/false) ((lambda (o43bc@t) ((lambda (o43be@ls/false) (if o43be@ls/false (apply (lambda (o43c0@sub*) ((lambda (o43c2@p*) (lambda (o43c4@x) ((letrec ((o43c6@f (lambda (o43c8@p* o43c9@x) (if (null? o43c8@p*) '#t (if (null? o43c9@x) '#f (and ((car o43c8@p*) (car o43c9@x)) (o43c6@f (cdr o43c8@p*) (cdr o43c9@x)))))))) o43c6@f) o43c2@p* o43c4@x))) (map o4351@subversion-pred o43c0@sub*))) o43be@ls/false) ((lambda (o43cc@t) ((lambda (o43ce@ls/false) (if o43ce@ls/false (apply (lambda () (o2fe3@syntax-violation 'import '"invalid version spec" o434c@spec o4380@x*)) o43ce@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o43cc@t))) (o2efa@syntax-dispatch o43cc@t '_))) o43bc@t))) (o2efa@syntax-dispatch o43bc@t 'each-any))) o43ac@t))) (o2efa@syntax-dispatch o43ac@t '(any any)))) o439a@t))) (o2efa@syntax-dispatch o439a@t '(any . each-any)))) o4388@t))) (o2efa@syntax-dispatch o4388@t '(any . each-any)))) o4382@t))) (o2efa@syntax-dispatch o4382@t '()))) o4380@x*))) ((letrec ((o4354@f (lambda (o4356@x) ((lambda (o4358@t) ((lambda (o435a@ls/false) (if o435a@ls/false (apply (lambda (o435c@version-spec*) (values '() (o4353@version-pred o435c@version-spec*))) o435a@ls/false) ((lambda (o435e@t) ((lambda (o4360@ls/false) (if (and o4360@ls/false (apply (lambda (o4362@x o4363@x*) (o4281@idsyn? o4362@x)) o4360@ls/false)) (apply (lambda (o4366@x o4367@x*) (call-with-values (lambda () (o4354@f o4367@x*)) (lambda (o436e@o436b o436f@o436d) ((lambda (o4372@pred o4373@name) (values (cons (o2fe9@syntax->datum o4366@x) o4373@name) o4372@pred)) o436f@o436d o436e@o436b)))) o4360@ls/false) ((lambda (o4376@t) ((lambda (o4378@ls/false) (if o4378@ls/false (apply (lambda () (values '() (lambda (o437a@x) '#t))) o4378@ls/false) ((lambda (o437c@t) ((lambda (o437e@ls/false) (if o437e@ls/false (apply (lambda () (o2fe3@syntax-violation '#f '"invalid import spec" o434c@spec)) o437e@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o437c@t))) (o2efa@syntax-dispatch o437c@t '_))) o4376@t))) (o2efa@syntax-dispatch o4376@t '()))) o435e@t))) (o2efa@syntax-dispatch o435e@t '(any . any)))) o4358@t))) (o2efa@syntax-dispatch o4358@t '(each-any)))) o4356@x)))) o4354@f) o434c@spec))) '#f '#f '#f))) (set! o4291@import-library (lambda (o433c@spec*) (call-with-values (lambda () (o428f@parse-library-name o433c@spec*)) (lambda (o4342@o433f o4343@o4341) ((lambda (o4346@pred o4347@name) (begin (if (null? o4347@name) (o2fe3@syntax-violation 'import '"empty library name" o433c@spec*) (void)) ((lambda (o434a@lib) (begin (if (not o434a@lib) (o2fe3@syntax-violation 'import '"cannot find library with required name" o4347@name) (void)) (if (not (o4346@pred (o2ae4@o2956@library-version o434a@lib))) (o2fe3@syntax-violation 'import '"library does not satisfy version specification" o433c@spec* o434a@lib) (void)) ((o2f69@imp-collector) o434a@lib) (o2ae8@o295e@library-subst o434a@lib))) (o2b0c@o29a6@find-library-by-name o4347@name)))) o4343@o4341 o4342@o433f))))) (set! o4293@get-import (lambda (o42ae@spec) ((lambda (o42b0@t) ((lambda (o42b2@ls/false) (if (and o42b2@ls/false (apply (lambda (o42b4@x o42b5@x*) (not (memq (o2fe9@syntax->datum o42b4@x) '(for rename except only prefix library)))) o42b2@ls/false)) (apply (lambda (o42b8@x o42b9@x*) (o4291@import-library (cons o42b8@x o42b9@x*))) o42b2@ls/false) ((lambda (o42bc@t) ((lambda (o42be@ls/false) (if (and o42be@ls/false (apply (lambda (o42c0@rename o42c1@isp o42c2@old* o42c3@new*) (and (eq? (o2fe9@syntax->datum o42c0@rename) 'rename) (for-all o4281@idsyn? o42c2@old*) (for-all o4281@idsyn? o42c3@new*))) o42be@ls/false)) (apply (lambda (o42c8@rename o42c9@isp o42ca@old* o42cb@new*) ((lambda (o42d0@subst o42d1@old* o42d2@new*) ((lambda (o42d6@old-label*) ((lambda (o42d8@subst) (o4285@merge-substs (map cons o42d2@new* o42d6@old-label*) o42d8@subst)) (o428b@rem* o42d1@old* o42d0@subst))) (o4289@find* o42d1@old* o42d0@subst))) (o4293@get-import o42c9@isp) (map o2fe9@syntax->datum o42ca@old*) (map o2fe9@syntax->datum o42cb@new*))) o42be@ls/false) ((lambda (o42da@t) ((lambda (o42dc@ls/false) (if (and o42dc@ls/false (apply (lambda (o42de@except o42df@isp o42e0@sym*) (and (eq? (o2fe9@syntax->datum o42de@except) 'except) (for-all o4281@idsyn? o42e0@sym*))) o42dc@ls/false)) (apply (lambda (o42e4@except o42e5@isp o42e6@sym*) ((lambda (o42ea@subst) (o428b@rem* (map o2fe9@syntax->datum o42e6@sym*) o42ea@subst)) (o4293@get-import o42e5@isp))) o42dc@ls/false) ((lambda (o42ec@t) ((lambda (o42ee@ls/false) (if (and o42ee@ls/false (apply (lambda (o42f0@only o42f1@isp o42f2@sym*) (and (eq? (o2fe9@syntax->datum o42f0@only) 'only) (for-all o4281@idsyn? o42f2@sym*))) o42ee@ls/false)) (apply (lambda (o42f6@only o42f7@isp o42f8@sym*) ((lambda (o42fc@subst o42fd@sym*) ((lambda (o4300@sym*) ((lambda (o4302@lab*) (map cons o4300@sym* o4302@lab*)) (o4289@find* o4300@sym* o42fc@subst))) (o428d@remove-dups o42fd@sym*))) (o4293@get-import o42f7@isp) (map o2fe9@syntax->datum o42f8@sym*))) o42ee@ls/false) ((lambda (o4304@t) ((lambda (o4306@ls/false) (if (and o4306@ls/false (apply (lambda (o4308@prefix o4309@isp o430a@p) (and (eq? (o2fe9@syntax->datum o4308@prefix) 'prefix) (o4281@idsyn? o430a@p))) o4306@ls/false)) (apply (lambda (o430e@prefix o430f@isp o4310@p) ((lambda (o4314@subst o4315@prefix) (map (lambda (o4318@x) (cons (string->symbol (string-append o4315@prefix (symbol->string (car o4318@x)))) (cdr o4318@x))) o4314@subst)) (o4293@get-import o430f@isp) (symbol->string (o2fe9@syntax->datum o4310@p)))) o4306@ls/false) ((lambda (o431a@t) ((lambda (o431c@ls/false) (if (and o431c@ls/false (apply (lambda (o431e@library o431f@spec*) (eq? (o2fe9@syntax->datum o431e@library) 'library)) o431c@ls/false)) (apply (lambda (o4322@library o4323@spec*) (o4291@import-library o4323@spec*)) o431c@ls/false) ((lambda (o4326@t) ((lambda (o4328@ls/false) (if (and o4328@ls/false (apply (lambda (o432a@for o432b@isp o432c@rest) (eq? (o2fe9@syntax->datum o432a@for) 'for)) o4328@ls/false)) (apply (lambda (o4330@for o4331@isp o4332@rest) (o4293@get-import o4331@isp)) o4328@ls/false) ((lambda (o4336@t) ((lambda (o4338@ls/false) (if o4338@ls/false (apply (lambda (o433a@spec) (o2fe3@syntax-violation 'import '"invalid import spec" o433a@spec)) o4338@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o4336@t))) (o2efa@syntax-dispatch o4336@t 'any))) o4326@t))) (o2efa@syntax-dispatch o4326@t '(any any . any)))) o431a@t))) (o2efa@syntax-dispatch o431a@t '(any each-any)))) o4304@t))) (o2efa@syntax-dispatch o4304@t '(any any any)))) o42ec@t))) (o2efa@syntax-dispatch o42ec@t '(any any . each-any)))) o42da@t))) (o2efa@syntax-dispatch o42da@t '(any any . each-any)))) o42bc@t))) (o2efa@syntax-dispatch o42bc@t '(any any . #(each (any any)))))) o42b0@t))) (o2efa@syntax-dispatch o42b0@t '(any . each-any)))) o42ae@spec))) (set! o4295@add-imports! (lambda (o429e@imp o429f@h) ((lambda (o42a2@subst) (for-each (lambda (o42a4@x) ((lambda (o42a6@name o42a7@label) ((lambda (o42aa@t) (if o42aa@t ((lambda (o42ac@l) (if (not (eq? o42ac@l o42a7@label)) (o4283@dup-error o42a6@name) (void))) o42aa@t) (hashtable-set! o429f@h o42a6@name o42a7@label))) (hashtable-ref o429f@h o42a6@name '#f))) (car o42a4@x) (cdr o42a4@x))) o42a2@subst)) (o4293@get-import o429e@imp)))) (lambda (o4296@imp*) ((letrec ((o4298@f (lambda (o429a@imp* o429b@h) (if (null? o429a@imp*) (hashtable-entries o429b@h) (begin (o4295@add-imports! (car o429a@imp*) o429b@h) (o4298@f (cdr o429a@imp*) o429b@h)))))) o4298@f) o4296@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! o2f61@make-top-rib (lambda (o448c@names o448d@labels) ((lambda (o4490@rib) (begin (vector-for-each (lambda (o4492@name o4493@label) (begin (if (not (symbol? o4492@name)) (error 'make-top-rib '"BUG: not a symbol" o4492@name) (void)) (o2ca2@extend-rib/nc! o4490@rib (o2cb9@make-stx o4492@name o2c6b@top-mark* '() '()) o4493@label))) o448c@names o448d@labels) o4490@rib)) (o2c9e@make-empty-rib)))) (set! o2f63@make-collector (lambda () ((lambda (o4496@ls) (lambda o449a ((lambda (o449b) (if (= o449b '0) (apply (lambda () o4496@ls) o449a) (if (= o449b '1) (apply (lambda (o4498@x) (set! o4496@ls (o2c64@set-cons o4498@x o4496@ls))) o449a) (error 'apply '"invalid arg count")))) (length o449a)))) '()))) (set! o2f65@inv-collector (o2899@o27c3@make-parameter (lambda o449c@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (o449e@x) (begin (if (not (procedure? o449e@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" o449e@x) (void)) o449e@x)))) (set! o2f67@vis-collector (o2899@o27c3@make-parameter (lambda o44a0@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (o44a2@x) (begin (if (not (procedure? o44a2@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" o44a2@x) (void)) o44a2@x)))) (set! o2f69@imp-collector (o2899@o27c3@make-parameter (lambda o44a4@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (o44a6@x) (begin (if (not (procedure? o44a6@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" o44a6@x) (void)) o44a6@x)))) (set! o2f6b@chi-library-internal (lambda (o44a8@e* o44a9@rib o44aa@top?) (call-with-values (lambda () (o2f55@chi-body* o44a8@e* '() '() '() '() '() '() '() o44a9@rib o44aa@top?)) (lambda (o44be@o44af o44bf@o44b1 o44c0@o44b3 o44c1@o44b5 o44c2@o44b7 o44c3@o44b9 o44c4@o44bb o44c5@o44bd) ((lambda (o44ce@exp* o44cf@_kwd* o44d0@mod** o44d1@rhs* o44d2@lex* o44d3@mr o44d4@r o44d5@e*) (values (append (apply append (reverse o44d0@mod**)) o44d5@e*) o44d4@r o44d3@mr (reverse o44d2@lex*) (reverse o44d1@rhs*) o44ce@exp*)) o44c5@o44bd o44c4@o44bb o44c3@o44b9 o44c2@o44b7 o44c1@o44b5 o44c0@o44b3 o44bf@o44b1 o44be@o44af))))) (set! o2f6d@chi-interaction-expr (lambda (o44de@e o44df@rib o44e0@r) (call-with-values (lambda () (o2f55@chi-body* (list o44de@e) o44e0@r o44e0@r '() '() '() '() '() o44df@rib '#t)) (lambda (o44f4@o44e5 o44f5@o44e7 o44f6@o44e9 o44f7@o44eb o44f8@o44ed o44f9@o44ef o44fa@o44f1 o44fb@o44f3) ((lambda (o4504@_exp* o4505@_kwd* o4506@mod** o4507@rhs* o4508@lex* o4509@mr o450a@r o450b@e*) ((lambda (o4514@e*) ((lambda (o4516@e) (values o4516@e o450a@r)) (if (null? o4514@e*) (o2c4f@o2bbf@build-void) (if (null? (cdr o4514@e*)) (car o4514@e*) (o2c4e@o2bbd@build-sequence '#f o4514@e*))))) (o2f2a@expand-interaction-rhs*/init* (reverse o4508@lex*) (reverse o4507@rhs*) (append (apply append (reverse o4506@mod**)) o450b@e*) o450a@r o4509@mr))) o44fb@o44f3 o44fa@o44f1 o44f9@o44ef o44f8@o44ed o44f7@o44eb o44f6@o44e9 o44f5@o44e7 o44f4@o44e5))))) (set! o2f6f@library-body-expander (lambda (o4518@name o4519@main-exp* o451a@imp* o451b@b* o451c@top?) ((lambda (o4523@itc) (begin (set! o4523@itc (o2f63@make-collector)) ((lambda (o452c@o4525 o452d@o4527 o452e@o4529 o452f@o452b) ((lambda (o4534@swap) (dynamic-wind o4534@swap (lambda () (call-with-values (lambda () (o2f5f@parse-import-spec* o451a@imp*)) (lambda (o453a@o4537 o453b@o4539) ((lambda (o453e@subst-labels o453f@subst-names) ((lambda (o4542@rib) ((lambda (o4545@wrap) (begin (set! o4545@wrap (lambda (o45c0@x) (o2cb9@make-stx o45c0@x o2c6b@top-mark* (list o4542@rib) '()))) ((lambda (o4546@b* o4547@main-exp* o4548@rtc o4549@vtc) ((lambda (o4556@o454f o4557@o4551 o4558@o4553 o4559@o4555) ((lambda (o455e@swap) (dynamic-wind o455e@swap (lambda () (call-with-values (lambda () (o2f6b@chi-library-internal o4546@b* o4542@rib o451c@top?)) (lambda (o456c@o4561 o456d@o4563 o456e@o4565 o456f@o4567 o4570@o4569 o4571@o456b) ((lambda (o4578@internal-exp* o4579@rhs* o457a@lex* o457b@mr o457c@r o457d@init*) (call-with-values (lambda () (o2f59@parse-exports (append o4547@main-exp* o4578@internal-exp*))) (lambda (o4588@o4585 o4589@o4587) ((lambda (o458c@exp-id* o458d@exp-name*) (begin (o2ca6@seal-rib! o4542@rib) ((lambda (o4590@init*) ((lambda (o4592@rhs*) ((lambda () (begin (o2ca8@unseal-rib! o4542@rib) ((lambda (o4594@loc* o4595@export-subst) ((lambda (o4599@errstr) (begin (set! o4599@errstr '"attempt to export mutated variable") (call-with-values (lambda () (o2fcf@make-export-env/macros o457a@lex* o4594@loc* o457c@r)) (lambda (o45a0@o459b o45a1@o459d o45a2@o459f) ((lambda (o45a6@macro* o45a7@global* o45a8@export-env) (begin (for-each (lambda (o45ac@s) ((lambda (o45ae@name o45af@label) ((lambda (o45b2@p) (if o45b2@p ((lambda (o45b4@b) ((lambda (o45b6@type) (if (eq? o45b6@type 'mutable) (o2fe3@syntax-violation 'export o4599@errstr o45ae@name) (void))) (car o45b4@b))) (cdr o45b2@p)) (void))) (assq o45af@label o45a8@export-env))) (car o45ac@s) (cdr o45ac@s))) o4595@export-subst) ((lambda (o45b8@invoke-body o45b9@invoke-definitions) (values (o4523@itc) (o4548@rtc) (o4549@vtc) (o2c4e@o2bbd@build-sequence '#f (append o45b9@invoke-definitions (list o45b8@invoke-body))) o45a6@macro* o4595@export-subst o45a8@export-env)) (o2c51@o2bc3@build-letrec* '#f o457a@lex* o4592@rhs* (o2fcb@build-exports o45a7@global* o4590@init*)) (map o2c4a@o2b1a@build-global-define (map cdr o45a7@global*))))) o45a2@o459f o45a1@o459d o45a0@o459b))))) '#f)) (map o2c71@gen-global o457a@lex*) (o2fcd@make-export-subst o458d@exp-name* o458c@exp-id*)))))) (o2f2c@chi-rhs* o4579@rhs* o457c@r o457b@mr))) (o2f18@chi-expr* o457d@init* o457c@r o457b@mr)))) o4589@o4587 o4588@o4585)))) o4571@o456b o4570@o4569 o456f@o4567 o456e@o4565 o456d@o4563 o456c@o4561)))) o455e@swap)) (lambda () (begin ((lambda (o45bc@t) (begin (o4556@o454f o4558@o4553) (set! o4558@o4553 o45bc@t))) (o4556@o454f)) ((lambda (o45be@t) (begin (o4557@o4551 o4559@o4555) (set! o4559@o4555 o45be@t))) (o4557@o4551)))))) o2f65@inv-collector o2f67@vis-collector o4548@rtc o4549@vtc)) (map o4545@wrap o451b@b*) (map o4545@wrap o4519@main-exp*) (o2f63@make-collector) (o2f63@make-collector)))) '#f)) (o2f61@make-top-rib o453f@subst-names o453e@subst-labels))) o453b@o4539 o453a@o4537)))) o4534@swap)) (lambda () (begin ((lambda (o45c2@t) (begin (o452c@o4525 o452e@o4529) (set! o452e@o4529 o45c2@t))) (o452c@o4525)) ((lambda (o45c4@t) (begin (o452d@o4527 o452f@o452b) (set! o452f@o452b o45c4@t))) (o452d@o4527)))))) o2f69@imp-collector o2ff1@top-level-context o4523@itc '#f))) '#f))) (set! o2f71@core-library-expander (lambda (o45c6@e o45c7@verify-name) (call-with-values (lambda () (o2f5d@parse-library o45c6@e)) (lambda (o45d2@o45cb o45d3@o45cd o45d4@o45cf o45d5@o45d1) ((lambda (o45da@b* o45db@imp* o45dc@exp* o45dd@name*) (call-with-values (lambda () (o2f5b@parse-library-name o45dd@name*)) (lambda (o45e6@o45e3 o45e7@o45e5) ((lambda (o45ea@ver o45eb@name) (begin (o45c7@verify-name o45eb@name) (call-with-values (lambda () (o2f6f@library-body-expander o45eb@name o45dc@exp* o45db@imp* o45da@b* '#f)) (lambda (o45fc@o45ef o45fd@o45f1 o45fe@o45f3 o45ff@o45f5 o4600@o45f7 o4601@o45f9 o4602@o45fb) ((lambda (o460a@export-env o460b@export-subst o460c@visit-code o460d@invoke-code o460e@visit-req* o460f@invoke-req* o4610@imp*) (values o45eb@name o45ea@ver o4610@imp* o460f@invoke-req* o460e@visit-req* o460d@invoke-code o460c@visit-code o460b@export-subst o460a@export-env)) o4602@o45fb o4601@o45f9 o4600@o45f7 o45ff@o45f5 o45fe@o45f3 o45fd@o45f1 o45fc@o45ef))))) o45e7@o45e5 o45e6@o45e3)))) o45d5@o45d1 o45d4@o45cf o45d3@o45cd o45d2@o45cb))))) (set! o2f73@parse-top-level-program (lambda (o4618@e*) ((lambda (o461a@t) ((lambda (o461c@ls/false) (if (and o461c@ls/false (apply (lambda (o461e@import o461f@imp* o4620@b*) (eq? (o2fe9@syntax->datum o461e@import) 'import)) o461c@ls/false)) (apply (lambda (o4624@import o4625@imp* o4626@b*) (values o4625@imp* o4626@b*)) o461c@ls/false) ((lambda (o462a@t) ((lambda (o462c@ls/false) (if (and o462c@ls/false (apply (lambda (o462e@import o462f@x o4630@y) (eq? (o2fe9@syntax->datum o462e@import) 'import)) o462c@ls/false)) (apply (lambda (o4634@import o4635@x o4636@y) (o2fe3@syntax-violation 'expander '"invalid syntax of top-level program" (o2ce9@syntax-car o4618@e*))) o462c@ls/false) ((lambda (o463a@t) ((lambda (o463c@ls/false) (if o463c@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) o463c@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o463a@t))) (o2efa@syntax-dispatch o463a@t '_))) o462a@t))) (o2efa@syntax-dispatch o462a@t '((any . any) . any)))) o461a@t))) (o2efa@syntax-dispatch o461a@t '((any . each-any) . each-any)))) o4618@e*))) (set! o2f75@top-level-expander (lambda (o463e@e*) (call-with-values (lambda () (o2f73@parse-top-level-program o463e@e*)) (lambda (o4644@o4641 o4645@o4643) ((lambda (o4648@b* o4649@imp*) (call-with-values (lambda () (o2f6f@library-body-expander '() '() o4649@imp* o4648@b* '#t)) (lambda (o465a@o464d o465b@o464f o465c@o4651 o465d@o4653 o465e@o4655 o465f@o4657 o4660@o4659) ((lambda (o4668@export-env o4669@export-subst o466a@visit-code o466b@invoke-code o466c@visit-req* o466d@invoke-req* o466e@imp*) (values o466d@invoke-req* o466b@invoke-code)) o4660@o4659 o465f@o4657 o465e@o4655 o465d@o4653 o465c@o4651 o465b@o464f o465a@o464d)))) o4645@o4643 o4644@o4641))))) (set! o2f7b@o2f76 (make-record-type-descriptor 'env '#f 'o2f79 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! o2f7d@o2f78 '#f) (set! o2f7f@o2f77 (make-record-constructor-descriptor o2f7b@o2f76 '#f o2f7d@o2f78)) (set! o2f82@env? (record-predicate o2f7b@o2f76)) (set! o2f84@make-env (record-constructor o2f7f@o2f77)) (set! o2f86@env-names (record-accessor o2f7b@o2f76 '0)) (set! o2f88@env-labels (record-accessor o2f7b@o2f76 '1)) (set! o2f8a@env-itc (record-accessor o2f7b@o2f76 '2)) (set! o2f8c@set-env-names! (record-mutator o2f7b@o2f76 '0)) (set! o2f8e@set-env-labels! (record-mutator o2f7b@o2f76 '1)) (set! o2f90@set-env-itc! (record-mutator o2f7b@o2f76 '2)) (set! o2f92@rp (o2896@o27bd@make-record-printer 'env (lambda (o4676@x o4677@p o4678@wr) (display '"#<environment>" o4677@p)))) (set! o2f98@o2f93 (make-record-type-descriptor 'interaction-env '#f 'o2f96 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! o2f9a@o2f95 '#f) (set! o2f9c@o2f94 (make-record-constructor-descriptor o2f98@o2f93 '#f o2f9a@o2f95)) (set! o2f9f@interaction-env? (record-predicate o2f98@o2f93)) (set! o2fa1@make-interaction-env (record-constructor o2f9c@o2f94)) (set! o2fa3@interaction-env-rib (record-accessor o2f98@o2f93 '0)) (set! o2fa5@interaction-env-r (record-accessor o2f98@o2f93 '1)) (set! o2fa7@interaction-env-locs (record-accessor o2f98@o2f93 '2)) (set! o2fa9@set-interaction-env-rib! (record-mutator o2f98@o2f93 '0)) (set! o2fab@set-interaction-env-r! (record-mutator o2f98@o2f93 '1)) (set! o2fad@set-interaction-env-locs! (record-mutator o2f98@o2f93 '2)) (set! o2faf@rp (o2896@o27bd@make-record-printer 'interaction-env (lambda (o467c@x o467d@p o467e@wr) (display '"#<environment>" o467d@p)))) (set! o2fb1@interaction-environment-symbols (lambda () (o2fb9@environment-symbols (o2fef@interaction-environment)))) (set! o2fb3@environment-bindings (lambda (o4682@e) (vector->list (vector-map (lambda (o4684@name o4685@label) (o2fb5@parse-binding (cons o4684@name (o2b12@o29b2@imported-label->binding o4685@label)))) (o2f86@env-names o4682@e) (o2f88@env-labels o4682@e))))) (set! o2fb5@parse-binding (lambda (o4688@b) (cons (car o4688@b) ((lambda (o468a@t) (if (memv o468a@t '(core-prim global)) 'procedure (if (memv o468a@t '(core-macro macro global-macro)) 'syntax (if (memv o468a@t '($core-rtd)) 'record (if (eq? (car o4688@b) (cadr o4688@b)) 'syntax 'unknown))))) (cadr o4688@b))))) (set! o2fb7@environment? (lambda (o468c@x) (or (o2f82@env? o468c@x) (o2f9f@interaction-env? o468c@x)))) (set! o2fb9@environment-symbols (lambda (o468e@x) (if (o2f82@env? o468e@x) (vector->list (o2f86@env-names o468e@x)) (if (o2f9f@interaction-env? o468e@x) (map values (o2c8a@rib-sym* (o2fa3@interaction-env-rib o468e@x))) (assertion-violation 'environment-symbols '"not an environment" o468e@x))))) (set! o2fbb@environment (lambda o4690@imp* ((lambda (o4692@itc) ((lambda (o4698@o4695 o4699@o4697) ((lambda (o469c@swap) (dynamic-wind o469c@swap (lambda () (call-with-values (lambda () (o2f5f@parse-import-spec* o4690@imp*)) (lambda (o46a2@o469f o46a3@o46a1) ((lambda (o46a6@subst-labels o46a7@subst-names) (o2f84@make-env o46a7@subst-names o46a6@subst-labels o4692@itc)) o46a3@o46a1 o46a2@o469f)))) o469c@swap)) (lambda () ((lambda (o46aa@t) (begin (o4698@o4695 o4699@o4697) (set! o4699@o4697 o46aa@t))) (o4698@o4695))))) o2f69@imp-collector o4692@itc)) (o2f63@make-collector)))) (set! o2fbd@null-environment (lambda (o46ac@n) (begin (if (not (eqv? o46ac@n '5)) (assertion-violation 'null-environment '"not 5" o46ac@n) (void)) (o2fbb@environment '(psyntax null-environment-5))))) (set! o2fbf@scheme-report-environment (lambda (o46ae@n) (begin (if (not (eqv? o46ae@n '5)) (assertion-violation 'scheme-report-environment '"not 5" o46ae@n) (void)) (o2fbb@environment '(psyntax scheme-report-environment-5))))) (set! o2fc1@expand (lambda (o46b0@x o46b1@env) (if (o2f82@env? o46b1@env) ((lambda (o46b4@rib) ((lambda (o46b6@x o46b7@itc o46b8@rtc o46b9@vtc) ((lambda (o46be@x) (begin (o2ca6@seal-rib! o46b4@rib) (values o46be@x (o46b8@rtc)))) ((lambda (o46d0@o46c1 o46d1@o46c3 o46d2@o46c5 o46d3@o46c7 o46d4@o46c9 o46d5@o46cb o46d6@o46cd o46d7@o46cf) ((lambda (o46e0@swap) (dynamic-wind o46e0@swap (lambda () (o2f1c@chi-expr o46b6@x '() '())) o46e0@swap)) (lambda () (begin ((lambda (o46e2@t) (begin (o46d0@o46c1 o46d4@o46c9) (set! o46d4@o46c9 o46e2@t))) (o46d0@o46c1)) ((lambda (o46e4@t) (begin (o46d1@o46c3 o46d5@o46cb) (set! o46d5@o46cb o46e4@t))) (o46d1@o46c3)) ((lambda (o46e6@t) (begin (o46d2@o46c5 o46d6@o46cd) (set! o46d6@o46cd o46e6@t))) (o46d2@o46c5)) ((lambda (o46e8@t) (begin (o46d3@o46c7 o46d7@o46cf) (set! o46d7@o46cf o46e8@t))) (o46d3@o46c7)))))) o2ff1@top-level-context o2f65@inv-collector o2f67@vis-collector o2f69@imp-collector '#f o46b8@rtc o46b9@vtc o46b7@itc))) (o2cb9@make-stx o46b0@x o2c6b@top-mark* (list o46b4@rib) '()) (o2f8a@env-itc o46b1@env) (o2f63@make-collector) (o2f63@make-collector))) (o2f61@make-top-rib (o2f86@env-names o46b1@env) (o2f88@env-labels o46b1@env))) (if (o2f9f@interaction-env? o46b1@env) ((lambda (o46ea@rib o46eb@r o46ec@rtc) ((lambda (o46f0@x) (call-with-values (lambda () ((lambda (o4706@o46f7 o4707@o46f9 o4708@o46fb o4709@o46fd o470a@o46ff o470b@o4701 o470c@o4703 o470d@o4705) ((lambda (o4716@swap) (dynamic-wind o4716@swap (lambda () (o2f6d@chi-interaction-expr o46f0@x o46ea@rib o46eb@r)) o4716@swap)) (lambda () (begin ((lambda (o4718@t) (begin (o4706@o46f7 o470a@o46ff) (set! o470a@o46ff o4718@t))) (o4706@o46f7)) ((lambda (o471a@t) (begin (o4707@o46f9 o470b@o4701) (set! o470b@o4701 o471a@t))) (o4707@o46f9)) ((lambda (o471c@t) (begin (o4708@o46fb o470c@o4703) (set! o470c@o4703 o471c@t))) (o4708@o46fb)) ((lambda (o471e@t) (begin (o4709@o46fd o470d@o4705) (set! o470d@o4705 o471e@t))) (o4709@o46fd)))))) o2ff1@top-level-context o2f65@inv-collector o2f67@vis-collector o2f69@imp-collector o46b1@env o46ec@rtc (o2f63@make-collector) (o2f63@make-collector))) (lambda (o4720@o46f3 o4721@o46f5) ((lambda (o4724@r^ o4725@e) (begin (o2fab@set-interaction-env-r! o46b1@env o4724@r^) (values o4725@e (o46ec@rtc)))) o4721@o46f5 o4720@o46f3)))) (o2cb9@make-stx o46b0@x o2c6b@top-mark* (list o46ea@rib) '()))) (o2fa3@interaction-env-rib o46b1@env) (o2fa5@interaction-env-r o46b1@env) (o2f63@make-collector)) (assertion-violation 'expand '"not an environment" o46b1@env))))) (set! o2fc3@eval (lambda (o4728@x o4729@env) (begin (if (not (o2fb7@environment? o4729@env)) (error 'eval '"not an environment" o4729@env) (void)) (call-with-values (lambda () (o2fc1@expand o4728@x o4729@env)) (lambda (o4730@o472d o4731@o472f) ((lambda (o4734@invoke-req* o4735@x) (begin (for-each o2b13@o29b4@invoke-library o4734@invoke-req*) (eval-core (o28ed@o28a5@expanded->core o4735@x)))) o4731@o472f o4730@o472d)))))) (set! o2fc5@library-expander (lambda o47a6 ((lambda (o47a7) (if (= o47a7 '3) (apply (lambda (o4738@x o4739@filename o473a@verify-name) ((lambda (o473f@build-visit-code o4741@visit!) (begin (set! o473f@build-visit-code (lambda (o4794@macro*) (if (null? o4794@macro*) (o2c4f@o2bbf@build-void) (o2c4e@o2bbd@build-sequence '#f (map (lambda (o4796@x) ((lambda (o4798@loc o4799@src) (list 'set! o4798@loc o4799@src)) (car o4796@x) (cddr o4796@x))) o4794@macro*))))) (set! o4741@visit! (lambda (o478c@macro*) (for-each (lambda (o478e@x) ((lambda (o4790@loc o4791@proc) (set-symbol-value! o4790@loc o4791@proc)) (car o478e@x) (cadr o478e@x))) o478c@macro*))) (call-with-values (lambda () (o2f71@core-library-expander o4738@x o473a@verify-name)) (lambda (o4754@o4743 o4755@o4745 o4756@o4747 o4757@o4749 o4758@o474b o4759@o474d o475a@o474f o475b@o4751 o475c@o4753) ((lambda (o4766@export-env o4767@export-subst o4768@macro* o4769@invoke-code o476a@vis* o476b@inv* o476c@imp* o476d@ver o476e@name) ((lambda (o4778@id o4779@name o477a@ver o477b@imp* o477c@vis* o477d@inv* o477e@visit-proc o477f@invoke-proc o4780@visit-code o4781@invoke-code) (begin (o2b11@o29b0@install-library o4778@id o4779@name o477a@ver o477b@imp* o477c@vis* o477d@inv* o4767@export-subst o4766@export-env o477e@visit-proc o477f@invoke-proc o4780@visit-code o4781@invoke-code '#t o4739@filename) (values o4778@id o4779@name o477a@ver o477b@imp* o477c@vis* o477d@inv* o4781@invoke-code o4780@visit-code o4767@export-subst o4766@export-env))) (gensym) o476e@name o476d@ver (map o2b17@o29bc@library-spec o476c@imp*) (map o2b17@o29bc@library-spec o476a@vis*) (map o2b17@o29bc@library-spec o476b@inv*) (lambda () (o4741@visit! o4768@macro*)) (lambda () (eval-core (o28ed@o28a5@expanded->core o4769@invoke-code))) (o473f@build-visit-code o4768@macro*) o4769@invoke-code)) o475c@o4753 o475b@o4751 o475a@o474f o4759@o474d o4758@o474b o4757@o4749 o4756@o4747 o4755@o4745 o4754@o4743))))) '#f '#f)) o47a6) (if (= o47a7 '2) (apply (lambda (o479c@x o479d@filename) (o2fc5@library-expander o479c@x o479d@filename (lambda (o47a0@x) (values)))) o47a6) (if (= o47a7 '1) (apply (lambda (o47a2@x) (o2fc5@library-expander o47a2@x '#f (lambda (o47a4@x) (values)))) o47a6) (error 'apply '"invalid arg count"))))) (length o47a6)))) (set! o2fc7@boot-library-expand (lambda (o47a8@x) (call-with-values (lambda () (o2fc5@library-expander o47a8@x)) (lambda (o47be@o47ab o47bf@o47ad o47c0@o47af o47c1@o47b1 o47c2@o47b3 o47c3@o47b5 o47c4@o47b7 o47c5@o47b9 o47c6@o47bb o47c7@o47bd) ((lambda (o47d2@export-env o47d3@export-subst o47d4@visit-code o47d5@invoke-code o47d6@inv* o47d7@vis* o47d8@imp* o47d9@ver o47da@name o47db@id) (values o47da@name o47d5@invoke-code o47d3@export-subst o47d2@export-env)) o47c7@o47bd o47c6@o47bb o47c5@o47b9 o47c4@o47b7 o47c3@o47b5 o47c2@o47b3 o47c1@o47b1 o47c0@o47af o47bf@o47ad o47be@o47ab))))) (set! o2fc9@rev-map-append (lambda (o47e6@f o47e7@ls o47e8@ac) (if (null? o47e7@ls) o47e8@ac (o2fc9@rev-map-append o47e6@f (cdr o47e7@ls) (cons (o47e6@f (car o47e7@ls)) o47e8@ac))))) (set! o2fcb@build-exports (lambda (o47ec@lex*+loc* o47ed@init*) (o2c4e@o2bbd@build-sequence '#f (cons (o2c4f@o2bbf@build-void) (o2fc9@rev-map-append (lambda (o47f0@x) (list 'set! (cdr o47f0@x) (car o47f0@x))) o47ec@lex*+loc* o47ed@init*))))) (set! o2fcd@make-export-subst (lambda (o47f2@name* o47f3@id*) (map (lambda (o47f6@name o47f7@id) ((lambda (o47fa@label) (begin (if (not o47fa@label) (o2fe3@syntax-violation '#f '"cannot export unbound identifier" o47f7@id) (void)) (cons o47f6@name o47fa@label))) (o2d09@id->label o47f7@id))) o47f2@name* o47f3@id*))) (set! o2fcf@make-export-env/macros (lambda (o47fc@lex* o47fd@loc* o47fe@r) ((lambda (o4803@lookup) (begin (set! o4803@lookup (lambda (o4820@x) ((letrec ((o4822@f (lambda (o4824@x o4825@lex* o4826@loc*) (if (pair? o4825@lex*) (if (eq? o4824@x (car o4825@lex*)) (car o4826@loc*) (o4822@f o4824@x (cdr o4825@lex*) (cdr o4826@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) o4822@f) o4820@x o47fc@lex* o47fd@loc*))) ((letrec ((o4804@f (lambda (o4806@r o4807@env o4808@global* o4809@macro*) (if (null? o4806@r) (values o4807@env o4808@global* o4809@macro*) ((lambda (o480e@x) ((lambda (o4810@label o4811@b) ((lambda (o4814@t) (if (memv o4814@t '(lexical)) ((lambda (o4816@v) ((lambda (o4818@loc o4819@type) (o4804@f (cdr o4806@r) (cons (cons* o4810@label o4819@type o4818@loc) o4807@env) (cons (cons (o2e86@lexical-var o4816@v) o4818@loc) o4808@global*) o4809@macro*)) (o4803@lookup (o2e86@lexical-var o4816@v)) (if (o2e88@lexical-mutable? o4816@v) 'mutable 'global))) (o2d13@binding-value o4811@b)) (if (memv o4814@t '(local-macro)) ((lambda (o481c@loc) (o4804@f (cdr o4806@r) (cons (cons* o4810@label 'global-macro o481c@loc) o4807@env) o4808@global* (cons (cons o481c@loc (o2d13@binding-value o4811@b)) o4809@macro*))) (gensym)) (if (memv o4814@t '(local-macro!)) ((lambda (o481e@loc) (o4804@f (cdr o4806@r) (cons (cons* o4810@label 'global-macro! o481e@loc) o4807@env) o4808@global* (cons (cons o481e@loc (o2d13@binding-value o4811@b)) o4809@macro*))) (gensym)) (if (memv o4814@t '($rtd $module)) (o4804@f (cdr o4806@r) (cons o480e@x o4807@env) o4808@global* o4809@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (o2d11@binding-type o4811@b) (o2d13@binding-value o4811@b))))))) (o2d11@binding-type o4811@b))) (car o480e@x) (cdr o480e@x))) (car o4806@r)))))) o4804@f) o47fe@r '() '() '()))) '#f))) (set! o2fd1@generate-temporaries (lambda (o482a@ls) ((lambda (o482c@t) ((lambda (o482e@ls/false) (if o482e@ls/false (apply (lambda (o4830@ls) (map (lambda (o4832@x) (o2cb9@make-stx ((lambda (o4834@x) (if (or (symbol? o4834@x) (string? o4834@x)) (gensym o4834@x) (gensym 't))) (o2fe9@syntax->datum o4832@x)) o2c6b@top-mark* '() '())) o4830@ls)) o482e@ls/false) ((lambda (o4836@t) ((lambda (o4838@ls/false) (if o4838@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) o4838@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o4836@t))) (o2efa@syntax-dispatch o4836@t '_))) o482c@t))) (o2efa@syntax-dispatch o482c@t 'each-any))) o482a@ls))) (set! o2fd3@free-identifier=? (lambda (o483a@x o483b@y) (if (o2cef@id? o483a@x) (if (o2cef@id? o483b@y) (o2cf7@free-id=? o483a@x o483b@y) (assertion-violation 'free-identifier=? '"not an identifier" o483b@y)) (assertion-violation 'free-identifier=? '"not an identifier" o483a@x)))) (set! o2fd5@bound-identifier=? (lambda (o483e@x o483f@y) (if (o2cef@id? o483e@x) (if (o2cef@id? o483f@y) (o2cf5@bound-id=? o483e@x o483f@y) (assertion-violation 'bound-identifier=? '"not an identifier" o483f@y)) (assertion-violation 'bound-identifier=? '"not an identifier" o483e@x)))) (set! o2fd7@make-source-condition (lambda (o4842@x) ((lambda (o484c@o4847 o484e@o4849 o4850@o4848 o4853@o4846 o4855@make-source-condition o4857@o4844 o4859@o4845 o485b@source-condition? o485d@source-filename o485f@source-character) (begin (set! o484c@o4847 (make-record-type-descriptor '&source-information o4caa@o49f1@&condition-rtd 'o484a '#f '#f '#((immutable file-name) (immutable character)))) (set! o484e@o4849 '#f) (set! o4850@o4848 (make-record-constructor-descriptor o484c@o4847 o4cab@o49f3@&condition-rcd o484e@o4849)) (set! o4853@o4846 (record-predicate o484c@o4847)) (set! o4855@make-source-condition (record-constructor o4850@o4848)) (set! o4857@o4844 (record-accessor o484c@o4847 '0)) (set! o4859@o4845 (record-accessor o484c@o4847 '1)) (set! o485b@source-condition? (condition-predicate o484c@o4847)) (set! o485d@source-filename (condition-accessor o484c@o4847 o4857@o4844)) (set! o485f@source-character (condition-accessor o484c@o4847 o4859@o4845)) (if (pair? o4842@x) (o4855@make-source-condition (car o4842@x) (cdr o4842@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! o2fd9@extract-position-condition (lambda (o4860@x) (o2fd7@make-source-condition (o2fdb@expression-position o4860@x)))) (set! o2fdb@expression-position (lambda (o4862@x) (and (o2cb7@stx? o4862@x) ((lambda (o4864@x) (and (o288e@o27ad@annotation? o4864@x) (o288f@o27af@annotation-source o4864@x))) (o2cbb@stx-expr o4862@x))))) (set! o2fdd@assertion-error (lambda (o4866@expr o4867@pos) (raise (condition (o4cda@o4ab5@make-assertion-violation) (o4cec@o4ae7@make-who-condition 'assert) (o4cb0@o4a48@make-message-condition '"assertion failed") (o4ce2@o4acc@make-irritants-condition (list o4866@expr)) (o2fd7@make-source-condition o4867@pos))))) (set! o2fdf@syntax-error (lambda (o486a@x . o486c@args) (begin (if (not (for-all string? o486c@args)) (assertion-violation 'syntax-error '"invalid argument" o486c@args) (void)) (raise (condition (o4cb0@o4a48@make-message-condition (if (null? o486c@args) '"invalid syntax" (apply string-append o486c@args))) (o4d0e@o4b43@make-syntax-violation (o2fe9@syntax->datum o486a@x) '#f) (o2fd9@extract-position-condition o486a@x)))))) (set! o2fe1@syntax-violation* (lambda (o486e@who o486f@msg o4870@form o4871@condition-object) (begin (if (not (string? o486f@msg)) (assertion-violation 'syntax-violation '"message is not a string" o486f@msg) (void)) ((lambda (o4876@who) (raise (condition (if o4876@who (o4cec@o4ae7@make-who-condition o4876@who) (condition)) (o4cb0@o4a48@make-message-condition o486f@msg) o4871@condition-object (o2fd9@extract-position-condition o4870@form)))) (if (or (string? o486e@who) (symbol? o486e@who)) o486e@who (if (not o486e@who) ((lambda (o4878@t) ((lambda (o487a@ls/false) (if (and o487a@ls/false (apply (lambda (o487c@id) (o2cef@id? o487c@id)) o487a@ls/false)) (apply (lambda (o487e@id) (o2fe9@syntax->datum o487e@id)) o487a@ls/false) ((lambda (o4880@t) ((lambda (o4882@ls/false) (if (and o4882@ls/false (apply (lambda (o4884@id o4885@rest) (o2cef@id? o4884@id)) o4882@ls/false)) (apply (lambda (o4888@id o4889@rest) (o2fe9@syntax->datum o4888@id)) o4882@ls/false) ((lambda (o488c@t) ((lambda (o488e@ls/false) (if o488e@ls/false (apply (lambda () '#f) o488e@ls/false) (o2fe3@syntax-violation '#f '"invalid syntax" o488c@t))) (o2efa@syntax-dispatch o488c@t '_))) o4880@t))) (o2efa@syntax-dispatch o4880@t '(any . any)))) o4878@t))) (o2efa@syntax-dispatch o4878@t 'any))) o4870@form) (assertion-violation 'syntax-violation '"invalid who argument" o486e@who))))))) (set! o2fe3@syntax-violation (lambda o489e ((lambda (o489f) (if (= o489f '3) (apply (lambda (o4890@who o4891@msg o4892@form) (o2fe3@syntax-violation o4890@who o4891@msg o4892@form '#f)) o489e) (if (= o489f '4) (apply (lambda (o4896@who o4897@msg o4898@form o4899@subform) (o2fe1@syntax-violation* o4896@who o4897@msg o4898@form (o4d0e@o4b43@make-syntax-violation (o2fe9@syntax->datum o4898@form) (o2fe9@syntax->datum o4899@subform)))) o489e) (error 'apply '"invalid arg count")))) (length o489e)))) (set! o2fe5@identifier? (lambda (o48a0@x) (o2cef@id? o48a0@x))) (set! o2fe7@datum->syntax (lambda (o48a2@id o48a3@datum) (if (o2cef@id? o48a2@id) (o2ccd@datum->stx o48a2@id o48a3@datum) (assertion-violation 'datum->syntax '"not an identifier" o48a2@id)))) (set! o2fe9@syntax->datum (lambda (o48a6@x) (o2d05@stx->datum o48a6@x))) (set! o2feb@compile-r6rs-top-level (lambda (o48a8@x*) (call-with-values (lambda () (o2f75@top-level-expander o48a8@x*)) (lambda (o48ae@o48ab o48af@o48ad) ((lambda (o48b2@invoke-code o48b3@lib*) (lambda () (begin (for-each o2b13@o29b4@invoke-library o48b3@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (o28ed@o28a5@expanded->core o48b2@invoke-code)) (void)) (eval-core (o28ed@o28a5@expanded->core o48b2@invoke-code))))) o48af@o48ad o48ae@o48ab))))) (set! o2fed@pre-compile-r6rs-top-level (lambda (o48b6@x*) (call-with-values (lambda () (o2f75@top-level-expander o48b6@x*)) (lambda (o48bc@o48b9 o48bd@o48bb) ((lambda (o48c0@invoke-code o48c1@lib*) (begin (for-each o2b13@o29b4@invoke-library o48c1@lib*) (o2897@o27bf@compile-core (o28ed@o28a5@expanded->core o48c0@invoke-code)))) o48bd@o48bb o48bc@o48b9))))) (set! o2fef@interaction-environment ((lambda (o48c4@the-env) (lambda () (or o48c4@the-env ((lambda (o48c6@lib o48c7@rib) (begin ((lambda (o48ca@subst) (begin (o2c94@set-rib-sym*! o48c7@rib (map car o48ca@subst)) (o2c96@set-rib-mark**! o48c7@rib (map (lambda (o48cc@x) o2c6b@top-mark*) o48ca@subst)) (o2c98@set-rib-label*! o48c7@rib (map cdr o48ca@subst)))) (o2ae8@o295e@library-subst o48c6@lib)) ((lambda (o48ce@env) (begin (set! o48c4@the-env o48ce@env) o48ce@env)) (o2fa1@make-interaction-env o48c7@rib '() '())))) (o2b0c@o29a6@find-library-by-name '(mosh interaction)) (o2c9e@make-empty-rib))))) '#f)) (set! o2ff1@top-level-context (o2899@o27c3@make-parameter '#f)) (begin (set! o49dc@o2ff1@top-level-context o2ff1@top-level-context) (set! o49db@o2fef@interaction-environment o2fef@interaction-environment) (set! o49da@o2fed@pre-compile-r6rs-top-level o2fed@pre-compile-r6rs-top-level) (set! o49d9@o2feb@compile-r6rs-top-level o2feb@compile-r6rs-top-level) (set! o49d8@o2fe9@syntax->datum o2fe9@syntax->datum) (set! o49d7@o2fe7@datum->syntax o2fe7@datum->syntax) (set! o49d6@o2fe5@identifier? o2fe5@identifier?) (set! o49d5@o2fe3@syntax-violation o2fe3@syntax-violation) (set! o49d4@o2fe1@syntax-violation* o2fe1@syntax-violation*) (set! o49d3@o2fdf@syntax-error o2fdf@syntax-error) (set! o49d2@o2fdd@assertion-error o2fdd@assertion-error) (set! o49d1@o2fdb@expression-position o2fdb@expression-position) (set! o49d0@o2fd9@extract-position-condition o2fd9@extract-position-condition) (set! o49cf@o2fd7@make-source-condition o2fd7@make-source-condition) (set! o49ce@o2fd5@bound-identifier=? o2fd5@bound-identifier=?) (set! o49cd@o2fd3@free-identifier=? o2fd3@free-identifier=?) (set! o49cc@o2fd1@generate-temporaries o2fd1@generate-temporaries) (set! o49cb@o2fcf@make-export-env/macros o2fcf@make-export-env/macros) (set! o49ca@o2fcd@make-export-subst o2fcd@make-export-subst) (set! o49c9@o2fcb@build-exports o2fcb@build-exports) (set! o49c8@o2fc9@rev-map-append o2fc9@rev-map-append) (set! o49c7@o2fc7@boot-library-expand o2fc7@boot-library-expand) (set! o49c6@o2fc5@library-expander o2fc5@library-expander) (set! o49c5@o2fc3@eval o2fc3@eval) (set! o49c4@o2fc1@expand o2fc1@expand) (set! o49c3@o2fbf@scheme-report-environment o2fbf@scheme-report-environment) (set! o49c2@o2fbd@null-environment o2fbd@null-environment) (set! o49c1@o2fbb@environment o2fbb@environment) (set! o49c0@o2fb9@environment-symbols o2fb9@environment-symbols) (set! o49bf@o2fb7@environment? o2fb7@environment?) (set! o49be@o2fb5@parse-binding o2fb5@parse-binding) (set! o49bd@o2fb3@environment-bindings o2fb3@environment-bindings) (set! o49bc@o2fb1@interaction-environment-symbols o2fb1@interaction-environment-symbols) (set! o49bb@o2faf@rp o2faf@rp) (set! o49ba@o2fad@set-interaction-env-locs! o2fad@set-interaction-env-locs!) (set! o49b9@o2fab@set-interaction-env-r! o2fab@set-interaction-env-r!) (set! o49b8@o2fa9@set-interaction-env-rib! o2fa9@set-interaction-env-rib!) (set! o49b7@o2fa7@interaction-env-locs o2fa7@interaction-env-locs) (set! o49b6@o2fa5@interaction-env-r o2fa5@interaction-env-r) (set! o49b5@o2fa3@interaction-env-rib o2fa3@interaction-env-rib) (set! o49b4@o2fa1@make-interaction-env o2fa1@make-interaction-env) (set! o49b3@o2f9f@interaction-env? o2f9f@interaction-env?) (set! o49b2@o2f9c@o2f94 o2f9c@o2f94) (set! o49b1@o2f9a@o2f95 o2f9a@o2f95) (set! o49b0@o2f98@o2f93 o2f98@o2f93) (set! o49af@o2f92@rp o2f92@rp) (set! o49ae@o2f90@set-env-itc! o2f90@set-env-itc!) (set! o49ad@o2f8e@set-env-labels! o2f8e@set-env-labels!) (set! o49ac@o2f8c@set-env-names! o2f8c@set-env-names!) (set! o49ab@o2f8a@env-itc o2f8a@env-itc) (set! o49aa@o2f88@env-labels o2f88@env-labels) (set! o49a9@o2f86@env-names o2f86@env-names) (set! o49a8@o2f84@make-env o2f84@make-env) (set! o49a7@o2f82@env? o2f82@env?) (set! o49a6@o2f7f@o2f77 o2f7f@o2f77) (set! o49a5@o2f7d@o2f78 o2f7d@o2f78) (set! o49a4@o2f7b@o2f76 o2f7b@o2f76) (set! o49a3@o2f75@top-level-expander o2f75@top-level-expander) (set! o49a2@o2f73@parse-top-level-program o2f73@parse-top-level-program) (set! o49a1@o2f71@core-library-expander o2f71@core-library-expander) (set! o49a0@o2f6f@library-body-expander o2f6f@library-body-expander) (set! o499f@o2f6d@chi-interaction-expr o2f6d@chi-interaction-expr) (set! o499e@o2f6b@chi-library-internal o2f6b@chi-library-internal) (set! o499d@o2f69@imp-collector o2f69@imp-collector) (set! o499c@o2f67@vis-collector o2f67@vis-collector) (set! o499b@o2f65@inv-collector o2f65@inv-collector) (set! o499a@o2f63@make-collector o2f63@make-collector) (set! o4999@o2f61@make-top-rib o2f61@make-top-rib) (set! o4998@o2f5f@parse-import-spec* o2f5f@parse-import-spec*) (set! o4997@o2f5d@parse-library o2f5d@parse-library) (set! o4996@o2f5b@parse-library-name o2f5b@parse-library-name) (set! o4995@o2f59@parse-exports o2f59@parse-exports) (set! o4994@o2f57@expand-transformer o2f57@expand-transformer) (set! o4993@o2f55@chi-body* o2f55@chi-body*) (set! o4992@o2f53@chi-internal-module o2f53@chi-internal-module) (set! o4991@o2f51@module-interface-exp-id* o2f51@module-interface-exp-id*) (set! o4990@o2f4f@set-module-interface-exp-lab-vec! o2f4f@set-module-interface-exp-lab-vec!) (set! o498f@o2f4d@set-module-interface-exp-id-vec! o2f4d@set-module-interface-exp-id-vec!) (set! o498e@o2f4b@set-module-interface-first-mark! o2f4b@set-module-interface-first-mark!) (set! o498d@o2f49@module-interface-exp-lab-vec o2f49@module-interface-exp-lab-vec) (set! o498c@o2f47@module-interface-exp-id-vec o2f47@module-interface-exp-id-vec) (set! o498b@o2f45@module-interface-first-mark o2f45@module-interface-first-mark) (set! o498a@o2f43@make-module-interface o2f43@make-module-interface) (set! o4989@o2f41@module-interface? o2f41@module-interface?) (set! o4988@o2f3e@o2f36 o2f3e@o2f36) (set! o4987@o2f3c@o2f37 o2f3c@o2f37) (set! o4986@o2f3a@o2f35 o2f3a@o2f35) (set! o4985@o2f34@parse-module o2f34@parse-module) (set! o4984@o2f32@chi-internal o2f32@chi-internal) (set! o4983@o2f30@find-dups o2f30@find-dups) (set! o4982@o2f2e@find-bound=? o2f2e@find-bound=?) (set! o4981@o2f2c@chi-rhs* o2f2c@chi-rhs*) (set! o4980@o2f2a@expand-interaction-rhs*/init* o2f2a@expand-interaction-rhs*/init*) (set! o497f@o2f28@chi-rhs o2f28@chi-rhs) (set! o497e@o2f26@chi-defun o2f26@chi-defun) (set! o497d@o2f24@chi-lambda-clause* o2f24@chi-lambda-clause*) (set! o497c@o2f22@chi-lambda-clause o2f22@chi-lambda-clause) (set! o497b@o2f20@verify-formals o2f20@verify-formals) (set! o497a@o2f1e@chi-set! o2f1e@chi-set!) (set! o4979@o2f1c@chi-expr o2f1c@chi-expr) (set! o4978@o2f1a@chi-application o2f1a@chi-application) (set! o4977@o2f18@chi-expr* o2f18@chi-expr*) (set! o4976@o2f16@chi-global-macro o2f16@chi-global-macro) (set! o4975@o2f14@chi-local-macro o2f14@chi-local-macro) (set! o4974@o2f12@chi-macro o2f12@chi-macro) (set! o4973@o2f10@do-macro-call o2f10@do-macro-call) (set! o4972@o2f0e@local-macro-transformer o2f0e@local-macro-transformer) (set! o4971@o2f0c@macro-transformer o2f0c@macro-transformer) (set! o4970@o2f0a@symbol-macro o2f0a@symbol-macro) (set! o496f@o2f08@core-macro-transformer o2f08@core-macro-transformer) (set! o496e@o2f06@syntax-transformer o2f06@syntax-transformer) (set! o496d@o2f04@ellipsis-map o2f04@ellipsis-map) (set! o496c@o2f02@syntax-case-transformer o2f02@syntax-case-transformer) (set! o496b@o2f00@verify-literals o2f00@verify-literals) (set! o496a@o2efe@underscore? o2efe@underscore?) (set! o4969@o2efc@ellipsis? o2efc@ellipsis?) (set! o4968@o2efa@syntax-dispatch o2efa@syntax-dispatch) (set! o4967@o2ef8@convert-pattern o2ef8@convert-pattern) (set! o4966@o2ef6@foreign-call-transformer o2ef6@foreign-call-transformer) (set! o4965@o2ef4@parameterize-macro o2ef4@parameterize-macro) (set! o4964@o2ef2@incorrect-usage-macro o2ef2@incorrect-usage-macro) (set! o4963@o2ef0@define-condition-type-macro o2ef0@define-condition-type-macro) (set! o4962@o2eee@define-record-type-macro o2eee@define-record-type-macro) (set! o4961@o2eec@define-struct-macro o2eec@define-struct-macro) (set! o4960@o2eea@quasisyntax-macro o2eea@quasisyntax-macro) (set! o495f@o2ee8@quasiquote-macro o2ee8@quasiquote-macro) (set! o495e@o2ee6@syntax-rules-macro o2ee6@syntax-rules-macro) (set! o495d@o2ee4@include-into-macro o2ee4@include-into-macro) (set! o495c@o2ee2@include-macro o2ee2@include-macro) (set! o495b@o2ee0@do-include o2ee0@do-include) (set! o495a@o2ede@cond-macro o2ede@cond-macro) (set! o4959@o2edc@and-macro o2edc@and-macro) (set! o4958@o2eda@or-macro o2eda@or-macro) (set! o4957@o2ed8@let*-macro o2ed8@let*-macro) (set! o4956@o2ed6@do-macro o2ed6@do-macro) (set! o4955@o2ed4@identifier-syntax-macro o2ed4@identifier-syntax-macro) (set! o4954@o2ed2@endianness-macro o2ed2@endianness-macro) (set! o4953@o2ed0@assert-macro o2ed0@assert-macro) (set! o4952@o2ece@delay-macro o2ece@delay-macro) (set! o4951@o2ecc@time-macro o2ecc@time-macro) (set! o4950@o2eca@define-enumeration-macro o2eca@define-enumeration-macro) (set! o494f@o2ec8@guard-macro o2ec8@guard-macro) (set! o494e@o2ec6@trace-letrec-syntax-macro o2ec6@trace-letrec-syntax-macro) (set! o494d@o2ec4@trace-let-syntax-macro o2ec4@trace-let-syntax-macro) (set! o494c@o2ec2@trace-let/rec-syntax o2ec2@trace-let/rec-syntax) (set! o494b@o2ec0@trace-define-syntax-macro o2ec0@trace-define-syntax-macro) (set! o494a@o2ebe@trace-define-macro o2ebe@trace-define-macro) (set! o4949@o2ebc@trace-lambda-macro o2ebc@trace-lambda-macro) (set! o4948@o2eba@let*-values-macro o2eba@let*-values-macro) (set! o4947@o2eb8@let-values-macro o2eb8@let-values-macro) (set! o4946@o2eb6@let-macro o2eb6@let-macro) (set! o4945@o2eb4@invalid-fmls-error o2eb4@invalid-fmls-error) (set! o4944@o2eb2@with-syntax-macro o2eb2@with-syntax-macro) (set! o4943@o2eb0@bless o2eb0@bless) (set! o4942@o2eae@lambda-transformer o2eae@lambda-transformer) (set! o4941@o2eac@case-lambda-transformer o2eac@case-lambda-transformer) (set! o4940@o2eaa@quote-transformer o2eaa@quote-transformer) (set! o493f@o2ea8@case-macro o2ea8@case-macro) (set! o493e@o2ea6@or-transformer o2ea6@or-transformer) (set! o493d@o2ea4@and-transformer o2ea4@and-transformer) (set! o493c@o2ea2@if-transformer o2ea2@if-transformer) (set! o493b@o2ea0@unless-macro o2ea0@unless-macro) (set! o493a@o2e9e@when-macro o2e9e@when-macro) (set! o4939@o2e9c@record-constructor-descriptor-transformer o2e9c@record-constructor-descriptor-transformer) (set! o4938@o2e9a@record-type-descriptor-transformer o2e9a@record-type-descriptor-transformer) (set! o4937@o2e98@type-descriptor-transformer o2e98@type-descriptor-transformer) (set! o4936@o2e96@fluid-let-syntax-transformer o2e96@fluid-let-syntax-transformer) (set! o4935@o2e94@letrec*-transformer o2e94@letrec*-transformer) (set! o4934@o2e92@letrec-transformer o2e92@letrec-transformer) (set! o4933@o2e90@letrec-helper o2e90@letrec-helper) (set! o4932@o2e8e@add-lexicals o2e8e@add-lexicals) (set! o4931@o2e8c@add-lexical o2e8c@add-lexical) (set! o4930@o2e8a@set-lexical-mutable! o2e8a@set-lexical-mutable!) (set! o492f@o2e88@lexical-mutable? o2e88@lexical-mutable?) (set! o492e@o2e86@lexical-var o2e86@lexical-var) (set! o492d@o2e84@scheme-stx o2e84@scheme-stx) (set! o492c@o2e82@scheme-stx-hashtable o2e82@scheme-stx-hashtable) (set! o492b@o2e80@parse-define-syntax o2e80@parse-define-syntax) (set! o492a@o2e7e@parse-define o2e7e@parse-define) (set! o4929@o2d2d@make-eval-transformer o2d2d@make-eval-transformer) (set! o4928@o2d2b@variable-transformer-procedure o2d2b@variable-transformer-procedure) (set! o4927@o2d29@variable-transformer? o2d29@variable-transformer?) (set! o4926@o2d27@make-variable-transformer o2d27@make-variable-transformer) (set! o4925@o2d25@sanitize-binding o2d25@sanitize-binding) (set! o4924@o2d17@syntax-type o2d17@syntax-type) (set! o4923@o2d15@raise-unbound-error o2d15@raise-unbound-error) (set! o4922@o2d13@binding-value o2d13@binding-value) (set! o4921@o2d11@binding-type o2d11@binding-type) (set! o4920@o2d0f@make-binding o2d0f@make-binding) (set! o491f@o2d0d@label->binding o2d0d@label->binding) (set! o491e@o2d0b@id->real-label o2d0b@id->real-label) (set! o491d@o2d09@id->label o2d09@id->label) (set! o491c@o2d07@same-marks*? o2d07@same-marks*?) (set! o491b@o2d05@stx->datum o2d05@stx->datum) (set! o491a@o2d03@strip o2d03@strip) (set! o4919@o2d01@strip-annotations o2d01@strip-annotations) (set! o4918@o2cff@self-evaluating? o2cff@self-evaluating?) (set! o4917@o2cfd@bound-id-member? o2cfd@bound-id-member?) (set! o4916@o2cfb@distinct-bound-ids? o2cfb@distinct-bound-ids?) (set! o4915@o2cf9@valid-bound-ids? o2cf9@valid-bound-ids?) (set! o4914@o2cf7@free-id=? o2cf7@free-id=?) (set! o4913@o2cf5@bound-id=? o2cf5@bound-id=?) (set! o4912@o2cf3@same-marks? o2cf3@same-marks?) (set! o4911@o2cf1@id->sym o2cf1@id->sym) (set! o4910@o2cef@id? o2cef@id?) (set! o490f@o2ced@syntax->list o2ced@syntax->list) (set! o490e@o2ceb@syntax-cdr o2ceb@syntax-cdr) (set! o490d@o2ce9@syntax-car o2ce9@syntax-car) (set! o490c@o2ce7@syntax-list? o2ce7@syntax-list?) (set! o490b@o2ce5@syntax-null? o2ce5@syntax-null?) (set! o490a@o2ce3@syntax-vector? o2ce3@syntax-vector?) (set! o4909@o2ce1@syntax-pair? o2ce1@syntax-pair?) (set! o4908@o2cdf@syntax-vector->list o2cdf@syntax-vector->list) (set! o4907@o2cdd@syntax-kind? o2cdd@syntax-kind?) (set! o4906@o2cdb@add-subst o2cdb@add-subst) (set! o4905@o2cd9@add-mark o2cd9@add-mark) (set! o4904@o2cd7@mkstx o2cd7@mkstx) (set! o4903@o2cd5@join-wraps o2cd5@join-wraps) (set! o4902@o2cd3@anti-mark? o2cd3@anti-mark?) (set! o4901@o2cd1@anti-mark o2cd1@anti-mark) (set! o4900@o2ccf@gen-mark o2ccf@gen-mark) (set! o48ff@o2ccd@datum->stx o2ccd@datum->stx) (set! o48fe@o2ccb@rp o2ccb@rp) (set! o48fd@o2cc9@set-stx-ae*! o2cc9@set-stx-ae*!) (set! o48fc@o2cc7@set-stx-subst*! o2cc7@set-stx-subst*!) (set! o48fb@o2cc5@set-stx-mark*! o2cc5@set-stx-mark*!) (set! o48fa@o2cc3@set-stx-expr! o2cc3@set-stx-expr!) (set! o48f9@o2cc1@stx-ae* o2cc1@stx-ae*) (set! o48f8@o2cbf@stx-subst* o2cbf@stx-subst*) (set! o48f7@o2cbd@stx-mark* o2cbd@stx-mark*) (set! o48f6@o2cbb@stx-expr o2cbb@stx-expr) (set! o48f5@o2cb9@make-stx o2cb9@make-stx) (set! o48f4@o2cb7@stx? o2cb7@stx?) (set! o48f3@o2cb4@o2cac o2cb4@o2cac) (set! o48f2@o2cb2@o2cad o2cb2@o2cad) (set! o48f1@o2cb0@o2cab o2cb0@o2cab) (set! o48f0@o2caa@make-full-rib o2caa@make-full-rib) (set! o48ef@o2ca8@unseal-rib! o2ca8@unseal-rib!) (set! o48ee@o2ca6@seal-rib! o2ca6@seal-rib!) (set! o48ed@o2ca4@make-rib-map o2ca4@make-rib-map) (set! o48ec@o2ca2@extend-rib/nc! o2ca2@extend-rib/nc!) (set! o48eb@o2ca0@extend-rib! o2ca0@extend-rib!) (set! o48ea@o2c9e@make-empty-rib o2c9e@make-empty-rib) (set! o48e9@o2c9c@set-rib-cache! o2c9c@set-rib-cache!) (set! o48e8@o2c9a@set-rib-sealed/freq! o2c9a@set-rib-sealed/freq!) (set! o48e7@o2c98@set-rib-label*! o2c98@set-rib-label*!) (set! o48e6@o2c96@set-rib-mark**! o2c96@set-rib-mark**!) (set! o48e5@o2c94@set-rib-sym*! o2c94@set-rib-sym*!) (set! o48e4@o2c92@rib-cache o2c92@rib-cache) (set! o48e3@o2c90@rib-sealed/freq o2c90@rib-sealed/freq) (set! o48e2@o2c8e@rib-label* o2c8e@rib-label*) (set! o48e1@o2c8c@rib-mark** o2c8c@rib-mark**) (set! o48e0@o2c8a@rib-sym* o2c8a@rib-sym*) (set! o48df@o2c88@make-rib o2c88@make-rib) (set! o48de@o2c86@rib? o2c86@rib?) (set! o48dd@o2c83@o2c7b o2c83@o2c7b) (set! o48dc@o2c81@o2c7c o2c81@o2c7c) (set! o48db@o2c7f@o2c7a o2c7f@o2c7a) (set! o48da@o2c79@gen-define-label o2c79@gen-define-label) (set! o48d9@o2c77@gen-define-label+loc o2c77@gen-define-label+loc) (set! o48d8@o2c75@gen-top-level-label o2c75@gen-top-level-label) (set! o48d7@o2c73@gen-label o2c73@gen-label) (set! o48d6@o2c71@gen-global o2c71@gen-global) (set! o48d5@o2c6f@gen-lexical o2c6f@gen-lexical) (set! o48d4@o2c6d@top-marked? o2c6d@top-marked?) (set! o48d3@o2c6b@top-mark* o2c6b@top-mark*) (set! o48d2@o2c66@set-union o2c66@set-union) (set! o48d1@o2c64@set-cons o2c64@set-cons) (set! o48d0@o2c62@file-options-macro o2c62@file-options-macro) (o2b09@o29a0@current-library-expander o2fc5@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (o49e6@o49e1 o49e8@o49e3 o49ea@o49e2 o49ed@&condition? o49ef@make-&condition o49f1@&condition-rtd o49f3@&condition-rcd o4a3f@o4a3a o4a41@o4a3c o4a43@o4a3b o4a46@p? o4a48@make-message-condition o4a4a@o4a39 o4a4c@message-condition? o4a4e@condition-message o4a50@&message-rtd o4a52@&message-rcd o4a58@o4a53 o4a5a@o4a55 o4a5c@o4a54 o4a5f@p? o4a61@make-warning o4a63@warning? o4a65@&warning-rtd o4a67@&warning-rcd o4a6d@o4a68 o4a6f@o4a6a o4a71@o4a69 o4a74@p? o4a76@make-serious-condition o4a78@serious-condition? o4a7a@&serious-rtd o4a7c@&serious-rcd o4a82@o4a7d o4a84@o4a7f o4a86@o4a7e o4a89@p? o4a8b@make-error o4a8d@error? o4a8f@&error-rtd o4a91@&error-rcd o4a97@o4a92 o4a99@o4a94 o4a9b@o4a93 o4a9e@p? o4aa0@make-violation o4aa2@violation? o4aa4@&violation-rtd o4aa6@&violation-rcd o4aac@o4aa7 o4aae@o4aa9 o4ab0@o4aa8 o4ab3@p? o4ab5@make-assertion-violation o4ab7@assertion-violation? o4ab9@&assertion-rtd o4abb@&assertion-rcd o4ac3@o4abe o4ac5@o4ac0 o4ac7@o4abf o4aca@p? o4acc@make-irritants-condition o4ace@o4abd o4ad0@irritants-condition? o4ad2@condition-irritants o4ad4@&irritants-rtd o4ad6@&irritants-rcd o4ade@o4ad9 o4ae0@o4adb o4ae2@o4ada o4ae5@p? o4ae7@make-who-condition o4ae9@o4ad8 o4aeb@who-condition? o4aed@condition-who o4aef@&who-rtd o4af1@&who-rcd o4af7@o4af2 o4af9@o4af4 o4afb@o4af3 o4afe@p? o4b00@make-non-continuable-violation o4b02@non-continuable-violation? o4b04@&non-continuable-rtd o4b06@&non-continuable-rcd o4b0c@o4b07 o4b0e@o4b09 o4b10@o4b08 o4b13@p? o4b15@make-implementation-restriction-violation o4b17@implementation-restriction-violation? o4b19@&implementation-restriction-rtd o4b1b@&implementation-restriction-rcd o4b21@o4b1c o4b23@o4b1e o4b25@o4b1d o4b28@p? o4b2a@make-lexical-violation o4b2c@lexical-violation? o4b2e@&lexical-rtd o4b30@&lexical-rcd o4b3a@o4b35 o4b3c@o4b37 o4b3e@o4b36 o4b41@p? o4b43@make-syntax-violation o4b45@o4b32 o4b47@o4b34 o4b49@syntax-violation? o4b4b@syntax-violation-form o4b4d@syntax-violation-subform o4b4f@&syntax-rtd o4b51@&syntax-rcd o4b57@o4b52 o4b59@o4b54 o4b5b@o4b53 o4b5e@p? o4b60@make-undefined-violation o4b62@undefined-violation? o4b64@&undefined-rtd o4b66@&undefined-rcd o4b6c@o4b67 o4b6e@o4b69 o4b70@o4b68 o4b73@p? o4b75@make-i/o-error o4b77@i/o-error? o4b79@&i/o-rtd o4b7b@&i/o-rcd o4b81@o4b7c o4b83@o4b7e o4b85@o4b7d o4b88@p? o4b8a@make-i/o-read-error o4b8c@i/o-read-error? o4b8e@&i/o-read-rtd o4b90@&i/o-read-rcd o4b96@o4b91 o4b98@o4b93 o4b9a@o4b92 o4b9d@p? o4b9f@make-i/o-write-error o4ba1@i/o-write-error? o4ba3@&i/o-write-rtd o4ba5@&i/o-write-rcd o4bad@o4ba8 o4baf@o4baa o4bb1@o4ba9 o4bb4@p? o4bb6@make-i/o-invalid-position-error o4bb8@o4ba7 o4bba@i/o-invalid-position-error? o4bbc@i/o-error-position o4bbe@&i/o-invalid-position-rtd o4bc0@&i/o-invalid-position-rcd o4bc8@o4bc3 o4bca@o4bc5 o4bcc@o4bc4 o4bcf@p? o4bd1@make-i/o-filename-error o4bd3@o4bc2 o4bd5@i/o-filename-error? o4bd7@i/o-error-filename o4bd9@&i/o-filename-rtd o4bdb@&i/o-filename-rcd o4be1@o4bdc o4be3@o4bde o4be5@o4bdd o4be8@p? o4bea@make-i/o-file-protection-error o4bec@i/o-file-protection-error? o4bee@&i/o-file-protection-rtd o4bf0@&i/o-file-protection-rcd o4bf6@o4bf1 o4bf8@o4bf3 o4bfa@o4bf2 o4bfd@p? o4bff@make-i/o-file-is-read-only-error o4c01@i/o-file-is-read-only-error? o4c03@&i/o-file-is-read-only-rtd o4c05@&i/o-file-is-read-only-rcd o4c0b@o4c06 o4c0d@o4c08 o4c0f@o4c07 o4c12@p? o4c14@make-i/o-file-already-exists-error o4c16@i/o-file-already-exists-error? o4c18@&i/o-file-already-exists-rtd o4c1a@&i/o-file-already-exists-rcd o4c20@o4c1b o4c22@o4c1d o4c24@o4c1c o4c27@p? o4c29@make-i/o-file-does-not-exist-error o4c2b@i/o-file-does-not-exist-error? o4c2d@&i/o-file-does-not-exist-rtd o4c2f@&i/o-file-does-not-exist-rcd o4c37@o4c32 o4c39@o4c34 o4c3b@o4c33 o4c3e@p? o4c40@make-i/o-port-error o4c42@o4c31 o4c44@i/o-port-error? o4c46@i/o-error-port o4c48@&i/o-port-rtd o4c4a@&i/o-port-rcd o4c50@o4c4b o4c52@o4c4d o4c54@o4c4c o4c57@p? o4c59@make-i/o-decoding-error o4c5b@i/o-decoding-error? o4c5d@&i/o-decoding-rtd o4c5f@&i/o-decoding-rcd o4c67@o4c62 o4c69@o4c64 o4c6b@o4c63 o4c6e@p? o4c70@make-i/o-encoding-error o4c72@o4c61 o4c74@i/o-encoding-error? o4c76@i/o-encoding-error-char o4c78@&i/o-encoding-rtd o4c7a@&i/o-encoding-rcd o4c80@o4c7b o4c82@o4c7d o4c84@o4c7c o4c87@p? o4c89@make-no-infinities-violation o4c8b@no-infinities-violation? o4c8d@&no-infinities-rtd o4c8f@&no-infinities-rcd o4c95@o4c90 o4c97@o4c92 o4c99@o4c91 o4c9c@p? o4c9e@make-no-nans-violation o4ca0@no-nans-violation? o4ca2@&no-nans-rtd o4ca4@&no-nans-rcd) (begin (set! o49e6@o49e1 (make-record-type-descriptor '&condition '#f 'o49e4 '#f '#f '#())) (set! o49e8@o49e3 '#f) (set! o49ea@o49e2 (make-record-constructor-descriptor o49e6@o49e1 '#f o49e8@o49e3)) (set! o49ed@&condition? (record-predicate o49e6@o49e1)) (set! o49ef@make-&condition (record-constructor o49ea@o49e2)) (set! o49f1@&condition-rtd o49e6@o49e1) (set! o49f3@&condition-rcd o49ea@o49e2) (set! o4a3f@o4a3a (make-record-type-descriptor '&message o49e6@o49e1 'o4a3d '#f '#f '#((immutable message)))) (set! o4a41@o4a3c '#f) (set! o4a43@o4a3b (make-record-constructor-descriptor o4a3f@o4a3a o49ea@o49e2 o4a41@o4a3c)) (set! o4a46@p? (record-predicate o4a3f@o4a3a)) (set! o4a48@make-message-condition (record-constructor o4a43@o4a3b)) (set! o4a4a@o4a39 (record-accessor o4a3f@o4a3a '0)) (set! o4a4c@message-condition? (condition-predicate o4a3f@o4a3a)) (set! o4a4e@condition-message (condition-accessor o4a3f@o4a3a o4a4a@o4a39)) (set! o4a50@&message-rtd o4a3f@o4a3a) (set! o4a52@&message-rcd o4a43@o4a3b) (set! o4a58@o4a53 (make-record-type-descriptor '&warning o49e6@o49e1 'o4a56 '#f '#f '#())) (set! o4a5a@o4a55 '#f) (set! o4a5c@o4a54 (make-record-constructor-descriptor o4a58@o4a53 o49ea@o49e2 o4a5a@o4a55)) (set! o4a5f@p? (record-predicate o4a58@o4a53)) (set! o4a61@make-warning (record-constructor o4a5c@o4a54)) (set! o4a63@warning? (condition-predicate o4a58@o4a53)) (set! o4a65@&warning-rtd o4a58@o4a53) (set! o4a67@&warning-rcd o4a5c@o4a54) (set! o4a6d@o4a68 (make-record-type-descriptor '&serious o49e6@o49e1 'o4a6b '#f '#f '#())) (set! o4a6f@o4a6a '#f) (set! o4a71@o4a69 (make-record-constructor-descriptor o4a6d@o4a68 o49ea@o49e2 o4a6f@o4a6a)) (set! o4a74@p? (record-predicate o4a6d@o4a68)) (set! o4a76@make-serious-condition (record-constructor o4a71@o4a69)) (set! o4a78@serious-condition? (condition-predicate o4a6d@o4a68)) (set! o4a7a@&serious-rtd o4a6d@o4a68) (set! o4a7c@&serious-rcd o4a71@o4a69) (set! o4a82@o4a7d (make-record-type-descriptor '&error o4a6d@o4a68 'o4a80 '#f '#f '#())) (set! o4a84@o4a7f '#f) (set! o4a86@o4a7e (make-record-constructor-descriptor o4a82@o4a7d o4a71@o4a69 o4a84@o4a7f)) (set! o4a89@p? (record-predicate o4a82@o4a7d)) (set! o4a8b@make-error (record-constructor o4a86@o4a7e)) (set! o4a8d@error? (condition-predicate o4a82@o4a7d)) (set! o4a8f@&error-rtd o4a82@o4a7d) (set! o4a91@&error-rcd o4a86@o4a7e) (set! o4a97@o4a92 (make-record-type-descriptor '&violation o4a6d@o4a68 'o4a95 '#f '#f '#())) (set! o4a99@o4a94 '#f) (set! o4a9b@o4a93 (make-record-constructor-descriptor o4a97@o4a92 o4a71@o4a69 o4a99@o4a94)) (set! o4a9e@p? (record-predicate o4a97@o4a92)) (set! o4aa0@make-violation (record-constructor o4a9b@o4a93)) (set! o4aa2@violation? (condition-predicate o4a97@o4a92)) (set! o4aa4@&violation-rtd o4a97@o4a92) (set! o4aa6@&violation-rcd o4a9b@o4a93) (set! o4aac@o4aa7 (make-record-type-descriptor '&assertion o4a97@o4a92 'o4aaa '#f '#f '#())) (set! o4aae@o4aa9 '#f) (set! o4ab0@o4aa8 (make-record-constructor-descriptor o4aac@o4aa7 o4a9b@o4a93 o4aae@o4aa9)) (set! o4ab3@p? (record-predicate o4aac@o4aa7)) (set! o4ab5@make-assertion-violation (record-constructor o4ab0@o4aa8)) (set! o4ab7@assertion-violation? (condition-predicate o4aac@o4aa7)) (set! o4ab9@&assertion-rtd o4aac@o4aa7) (set! o4abb@&assertion-rcd o4ab0@o4aa8) (set! o4ac3@o4abe (make-record-type-descriptor '&irritants o49e6@o49e1 'o4ac1 '#f '#f '#((immutable irritants)))) (set! o4ac5@o4ac0 '#f) (set! o4ac7@o4abf (make-record-constructor-descriptor o4ac3@o4abe o49ea@o49e2 o4ac5@o4ac0)) (set! o4aca@p? (record-predicate o4ac3@o4abe)) (set! o4acc@make-irritants-condition (record-constructor o4ac7@o4abf)) (set! o4ace@o4abd (record-accessor o4ac3@o4abe '0)) (set! o4ad0@irritants-condition? (condition-predicate o4ac3@o4abe)) (set! o4ad2@condition-irritants (condition-accessor o4ac3@o4abe o4ace@o4abd)) (set! o4ad4@&irritants-rtd o4ac3@o4abe) (set! o4ad6@&irritants-rcd o4ac7@o4abf) (set! o4ade@o4ad9 (make-record-type-descriptor '&who o49e6@o49e1 'o4adc '#f '#f '#((immutable who)))) (set! o4ae0@o4adb '#f) (set! o4ae2@o4ada (make-record-constructor-descriptor o4ade@o4ad9 o49ea@o49e2 o4ae0@o4adb)) (set! o4ae5@p? (record-predicate o4ade@o4ad9)) (set! o4ae7@make-who-condition (record-constructor o4ae2@o4ada)) (set! o4ae9@o4ad8 (record-accessor o4ade@o4ad9 '0)) (set! o4aeb@who-condition? (condition-predicate o4ade@o4ad9)) (set! o4aed@condition-who (condition-accessor o4ade@o4ad9 o4ae9@o4ad8)) (set! o4aef@&who-rtd o4ade@o4ad9) (set! o4af1@&who-rcd o4ae2@o4ada) (set! o4af7@o4af2 (make-record-type-descriptor '&non-continuable o4a97@o4a92 'o4af5 '#f '#f '#())) (set! o4af9@o4af4 '#f) (set! o4afb@o4af3 (make-record-constructor-descriptor o4af7@o4af2 o4a9b@o4a93 o4af9@o4af4)) (set! o4afe@p? (record-predicate o4af7@o4af2)) (set! o4b00@make-non-continuable-violation (record-constructor o4afb@o4af3)) (set! o4b02@non-continuable-violation? (condition-predicate o4af7@o4af2)) (set! o4b04@&non-continuable-rtd o4af7@o4af2) (set! o4b06@&non-continuable-rcd o4afb@o4af3) (set! o4b0c@o4b07 (make-record-type-descriptor '&implementation-restriction o4a97@o4a92 'o4b0a '#f '#f '#())) (set! o4b0e@o4b09 '#f) (set! o4b10@o4b08 (make-record-constructor-descriptor o4b0c@o4b07 o4a9b@o4a93 o4b0e@o4b09)) (set! o4b13@p? (record-predicate o4b0c@o4b07)) (set! o4b15@make-implementation-restriction-violation (record-constructor o4b10@o4b08)) (set! o4b17@implementation-restriction-violation? (condition-predicate o4b0c@o4b07)) (set! o4b19@&implementation-restriction-rtd o4b0c@o4b07) (set! o4b1b@&implementation-restriction-rcd o4b10@o4b08) (set! o4b21@o4b1c (make-record-type-descriptor '&lexical o4a97@o4a92 'o4b1f '#f '#f '#())) (set! o4b23@o4b1e '#f) (set! o4b25@o4b1d (make-record-constructor-descriptor o4b21@o4b1c o4a9b@o4a93 o4b23@o4b1e)) (set! o4b28@p? (record-predicate o4b21@o4b1c)) (set! o4b2a@make-lexical-violation (record-constructor o4b25@o4b1d)) (set! o4b2c@lexical-violation? (condition-predicate o4b21@o4b1c)) (set! o4b2e@&lexical-rtd o4b21@o4b1c) (set! o4b30@&lexical-rcd o4b25@o4b1d) (set! o4b3a@o4b35 (make-record-type-descriptor '&syntax o4a97@o4a92 'o4b38 '#f '#f '#((immutable form) (immutable subform)))) (set! o4b3c@o4b37 '#f) (set! o4b3e@o4b36 (make-record-constructor-descriptor o4b3a@o4b35 o4a9b@o4a93 o4b3c@o4b37)) (set! o4b41@p? (record-predicate o4b3a@o4b35)) (set! o4b43@make-syntax-violation (record-constructor o4b3e@o4b36)) (set! o4b45@o4b32 (record-accessor o4b3a@o4b35 '0)) (set! o4b47@o4b34 (record-accessor o4b3a@o4b35 '1)) (set! o4b49@syntax-violation? (condition-predicate o4b3a@o4b35)) (set! o4b4b@syntax-violation-form (condition-accessor o4b3a@o4b35 o4b45@o4b32)) (set! o4b4d@syntax-violation-subform (condition-accessor o4b3a@o4b35 o4b47@o4b34)) (set! o4b4f@&syntax-rtd o4b3a@o4b35) (set! o4b51@&syntax-rcd o4b3e@o4b36) (set! o4b57@o4b52 (make-record-type-descriptor '&undefined o4a97@o4a92 'o4b55 '#f '#f '#())) (set! o4b59@o4b54 '#f) (set! o4b5b@o4b53 (make-record-constructor-descriptor o4b57@o4b52 o4a9b@o4a93 o4b59@o4b54)) (set! o4b5e@p? (record-predicate o4b57@o4b52)) (set! o4b60@make-undefined-violation (record-constructor o4b5b@o4b53)) (set! o4b62@undefined-violation? (condition-predicate o4b57@o4b52)) (set! o4b64@&undefined-rtd o4b57@o4b52) (set! o4b66@&undefined-rcd o4b5b@o4b53) (set! o4b6c@o4b67 (make-record-type-descriptor '&i/o o4a82@o4a7d 'o4b6a '#f '#f '#())) (set! o4b6e@o4b69 '#f) (set! o4b70@o4b68 (make-record-constructor-descriptor o4b6c@o4b67 o4a86@o4a7e o4b6e@o4b69)) (set! o4b73@p? (record-predicate o4b6c@o4b67)) (set! o4b75@make-i/o-error (record-constructor o4b70@o4b68)) (set! o4b77@i/o-error? (condition-predicate o4b6c@o4b67)) (set! o4b79@&i/o-rtd o4b6c@o4b67) (set! o4b7b@&i/o-rcd o4b70@o4b68) (set! o4b81@o4b7c (make-record-type-descriptor '&i/o-read o4b6c@o4b67 'o4b7f '#f '#f '#())) (set! o4b83@o4b7e '#f) (set! o4b85@o4b7d (make-record-constructor-descriptor o4b81@o4b7c o4b70@o4b68 o4b83@o4b7e)) (set! o4b88@p? (record-predicate o4b81@o4b7c)) (set! o4b8a@make-i/o-read-error (record-constructor o4b85@o4b7d)) (set! o4b8c@i/o-read-error? (condition-predicate o4b81@o4b7c)) (set! o4b8e@&i/o-read-rtd o4b81@o4b7c) (set! o4b90@&i/o-read-rcd o4b85@o4b7d) (set! o4b96@o4b91 (make-record-type-descriptor '&i/o-write o4b6c@o4b67 'o4b94 '#f '#f '#())) (set! o4b98@o4b93 '#f) (set! o4b9a@o4b92 (make-record-constructor-descriptor o4b96@o4b91 o4b70@o4b68 o4b98@o4b93)) (set! o4b9d@p? (record-predicate o4b96@o4b91)) (set! o4b9f@make-i/o-write-error (record-constructor o4b9a@o4b92)) (set! o4ba1@i/o-write-error? (condition-predicate o4b96@o4b91)) (set! o4ba3@&i/o-write-rtd o4b96@o4b91) (set! o4ba5@&i/o-write-rcd o4b9a@o4b92) (set! o4bad@o4ba8 (make-record-type-descriptor '&i/o-invalid-position o4b6c@o4b67 'o4bab '#f '#f '#((immutable position)))) (set! o4baf@o4baa '#f) (set! o4bb1@o4ba9 (make-record-constructor-descriptor o4bad@o4ba8 o4b70@o4b68 o4baf@o4baa)) (set! o4bb4@p? (record-predicate o4bad@o4ba8)) (set! o4bb6@make-i/o-invalid-position-error (record-constructor o4bb1@o4ba9)) (set! o4bb8@o4ba7 (record-accessor o4bad@o4ba8 '0)) (set! o4bba@i/o-invalid-position-error? (condition-predicate o4bad@o4ba8)) (set! o4bbc@i/o-error-position (condition-accessor o4bad@o4ba8 o4bb8@o4ba7)) (set! o4bbe@&i/o-invalid-position-rtd o4bad@o4ba8) (set! o4bc0@&i/o-invalid-position-rcd o4bb1@o4ba9) (set! o4bc8@o4bc3 (make-record-type-descriptor '&i/o-filename o4b6c@o4b67 'o4bc6 '#f '#f '#((immutable filename)))) (set! o4bca@o4bc5 '#f) (set! o4bcc@o4bc4 (make-record-constructor-descriptor o4bc8@o4bc3 o4b70@o4b68 o4bca@o4bc5)) (set! o4bcf@p? (record-predicate o4bc8@o4bc3)) (set! o4bd1@make-i/o-filename-error (record-constructor o4bcc@o4bc4)) (set! o4bd3@o4bc2 (record-accessor o4bc8@o4bc3 '0)) (set! o4bd5@i/o-filename-error? (condition-predicate o4bc8@o4bc3)) (set! o4bd7@i/o-error-filename (condition-accessor o4bc8@o4bc3 o4bd3@o4bc2)) (set! o4bd9@&i/o-filename-rtd o4bc8@o4bc3) (set! o4bdb@&i/o-filename-rcd o4bcc@o4bc4) (set! o4be1@o4bdc (make-record-type-descriptor '&i/o-file-protection o4bc8@o4bc3 'o4bdf '#f '#f '#())) (set! o4be3@o4bde '#f) (set! o4be5@o4bdd (make-record-constructor-descriptor o4be1@o4bdc o4bcc@o4bc4 o4be3@o4bde)) (set! o4be8@p? (record-predicate o4be1@o4bdc)) (set! o4bea@make-i/o-file-protection-error (record-constructor o4be5@o4bdd)) (set! o4bec@i/o-file-protection-error? (condition-predicate o4be1@o4bdc)) (set! o4bee@&i/o-file-protection-rtd o4be1@o4bdc) (set! o4bf0@&i/o-file-protection-rcd o4be5@o4bdd) (set! o4bf6@o4bf1 (make-record-type-descriptor '&i/o-file-is-read-only o4be1@o4bdc 'o4bf4 '#f '#f '#())) (set! o4bf8@o4bf3 '#f) (set! o4bfa@o4bf2 (make-record-constructor-descriptor o4bf6@o4bf1 o4be5@o4bdd o4bf8@o4bf3)) (set! o4bfd@p? (record-predicate o4bf6@o4bf1)) (set! o4bff@make-i/o-file-is-read-only-error (record-constructor o4bfa@o4bf2)) (set! o4c01@i/o-file-is-read-only-error? (condition-predicate o4bf6@o4bf1)) (set! o4c03@&i/o-file-is-read-only-rtd o4bf6@o4bf1) (set! o4c05@&i/o-file-is-read-only-rcd o4bfa@o4bf2) (set! o4c0b@o4c06 (make-record-type-descriptor '&i/o-file-already-exists o4bc8@o4bc3 'o4c09 '#f '#f '#())) (set! o4c0d@o4c08 '#f) (set! o4c0f@o4c07 (make-record-constructor-descriptor o4c0b@o4c06 o4bcc@o4bc4 o4c0d@o4c08)) (set! o4c12@p? (record-predicate o4c0b@o4c06)) (set! o4c14@make-i/o-file-already-exists-error (record-constructor o4c0f@o4c07)) (set! o4c16@i/o-file-already-exists-error? (condition-predicate o4c0b@o4c06)) (set! o4c18@&i/o-file-already-exists-rtd o4c0b@o4c06) (set! o4c1a@&i/o-file-already-exists-rcd o4c0f@o4c07) (set! o4c20@o4c1b (make-record-type-descriptor '&i/o-file-does-not-exist o4bc8@o4bc3 'o4c1e '#f '#f '#())) (set! o4c22@o4c1d '#f) (set! o4c24@o4c1c (make-record-constructor-descriptor o4c20@o4c1b o4bcc@o4bc4 o4c22@o4c1d)) (set! o4c27@p? (record-predicate o4c20@o4c1b)) (set! o4c29@make-i/o-file-does-not-exist-error (record-constructor o4c24@o4c1c)) (set! o4c2b@i/o-file-does-not-exist-error? (condition-predicate o4c20@o4c1b)) (set! o4c2d@&i/o-file-does-not-exist-rtd o4c20@o4c1b) (set! o4c2f@&i/o-file-does-not-exist-rcd o4c24@o4c1c) (set! o4c37@o4c32 (make-record-type-descriptor '&i/o-port o4b6c@o4b67 'o4c35 '#f '#f '#((immutable port)))) (set! o4c39@o4c34 '#f) (set! o4c3b@o4c33 (make-record-constructor-descriptor o4c37@o4c32 o4b70@o4b68 o4c39@o4c34)) (set! o4c3e@p? (record-predicate o4c37@o4c32)) (set! o4c40@make-i/o-port-error (record-constructor o4c3b@o4c33)) (set! o4c42@o4c31 (record-accessor o4c37@o4c32 '0)) (set! o4c44@i/o-port-error? (condition-predicate o4c37@o4c32)) (set! o4c46@i/o-error-port (condition-accessor o4c37@o4c32 o4c42@o4c31)) (set! o4c48@&i/o-port-rtd o4c37@o4c32) (set! o4c4a@&i/o-port-rcd o4c3b@o4c33) (set! o4c50@o4c4b (make-record-type-descriptor '&i/o-decoding o4c37@o4c32 'o4c4e '#f '#f '#())) (set! o4c52@o4c4d '#f) (set! o4c54@o4c4c (make-record-constructor-descriptor o4c50@o4c4b o4c3b@o4c33 o4c52@o4c4d)) (set! o4c57@p? (record-predicate o4c50@o4c4b)) (set! o4c59@make-i/o-decoding-error (record-constructor o4c54@o4c4c)) (set! o4c5b@i/o-decoding-error? (condition-predicate o4c50@o4c4b)) (set! o4c5d@&i/o-decoding-rtd o4c50@o4c4b) (set! o4c5f@&i/o-decoding-rcd o4c54@o4c4c) (set! o4c67@o4c62 (make-record-type-descriptor '&i/o-encoding o4c37@o4c32 'o4c65 '#f '#f '#((immutable char)))) (set! o4c69@o4c64 '#f) (set! o4c6b@o4c63 (make-record-constructor-descriptor o4c67@o4c62 o4c3b@o4c33 o4c69@o4c64)) (set! o4c6e@p? (record-predicate o4c67@o4c62)) (set! o4c70@make-i/o-encoding-error (record-constructor o4c6b@o4c63)) (set! o4c72@o4c61 (record-accessor o4c67@o4c62 '0)) (set! o4c74@i/o-encoding-error? (condition-predicate o4c67@o4c62)) (set! o4c76@i/o-encoding-error-char (condition-accessor o4c67@o4c62 o4c72@o4c61)) (set! o4c78@&i/o-encoding-rtd o4c67@o4c62) (set! o4c7a@&i/o-encoding-rcd o4c6b@o4c63) (set! o4c80@o4c7b (make-record-type-descriptor '&no-infinities o4b0c@o4b07 'o4c7e '#f '#f '#())) (set! o4c82@o4c7d '#f) (set! o4c84@o4c7c (make-record-constructor-descriptor o4c80@o4c7b o4b10@o4b08 o4c82@o4c7d)) (set! o4c87@p? (record-predicate o4c80@o4c7b)) (set! o4c89@make-no-infinities-violation (record-constructor o4c84@o4c7c)) (set! o4c8b@no-infinities-violation? (condition-predicate o4c80@o4c7b)) (set! o4c8d@&no-infinities-rtd o4c80@o4c7b) (set! o4c8f@&no-infinities-rcd o4c84@o4c7c) (set! o4c95@o4c90 (make-record-type-descriptor '&no-nans o4b0c@o4b07 'o4c93 '#f '#f '#())) (set! o4c97@o4c92 '#f) (set! o4c99@o4c91 (make-record-constructor-descriptor o4c95@o4c90 o4b10@o4b08 o4c97@o4c92)) (set! o4c9c@p? (record-predicate o4c95@o4c90)) (set! o4c9e@make-no-nans-violation (record-constructor o4c99@o4c91)) (set! o4ca0@no-nans-violation? (condition-predicate o4c95@o4c90)) (set! o4ca2@&no-nans-rtd o4c95@o4c90) (set! o4ca4@&no-nans-rcd o4c99@o4c91) (begin (set! o4d95@o4ca4@&no-nans-rcd o4ca4@&no-nans-rcd) (set! o4d94@o4ca2@&no-nans-rtd o4ca2@&no-nans-rtd) (set! o4d93@o4ca0@no-nans-violation? o4ca0@no-nans-violation?) (set! o4d92@o4c9e@make-no-nans-violation o4c9e@make-no-nans-violation) (set! o4d91@o4c9c@p? o4c9c@p?) (set! o4d90@o4c99@o4c91 o4c99@o4c91) (set! o4d8f@o4c97@o4c92 o4c97@o4c92) (set! o4d8e@o4c95@o4c90 o4c95@o4c90) (set! o4d8d@o4c8f@&no-infinities-rcd o4c8f@&no-infinities-rcd) (set! o4d8c@o4c8d@&no-infinities-rtd o4c8d@&no-infinities-rtd) (set! o4d8b@o4c8b@no-infinities-violation? o4c8b@no-infinities-violation?) (set! o4d8a@o4c89@make-no-infinities-violation o4c89@make-no-infinities-violation) (set! o4d89@o4c87@p? o4c87@p?) (set! o4d88@o4c84@o4c7c o4c84@o4c7c) (set! o4d87@o4c82@o4c7d o4c82@o4c7d) (set! o4d86@o4c80@o4c7b o4c80@o4c7b) (set! o4d85@o4c7a@&i/o-encoding-rcd o4c7a@&i/o-encoding-rcd) (set! o4d84@o4c78@&i/o-encoding-rtd o4c78@&i/o-encoding-rtd) (set! o4d83@o4c76@i/o-encoding-error-char o4c76@i/o-encoding-error-char) (set! o4d82@o4c74@i/o-encoding-error? o4c74@i/o-encoding-error?) (set! o4d81@o4c72@o4c61 o4c72@o4c61) (set! o4d80@o4c70@make-i/o-encoding-error o4c70@make-i/o-encoding-error) (set! o4d7f@o4c6e@p? o4c6e@p?) (set! o4d7e@o4c6b@o4c63 o4c6b@o4c63) (set! o4d7d@o4c69@o4c64 o4c69@o4c64) (set! o4d7c@o4c67@o4c62 o4c67@o4c62) (set! o4d7b@o4c5f@&i/o-decoding-rcd o4c5f@&i/o-decoding-rcd) (set! o4d7a@o4c5d@&i/o-decoding-rtd o4c5d@&i/o-decoding-rtd) (set! o4d79@o4c5b@i/o-decoding-error? o4c5b@i/o-decoding-error?) (set! o4d78@o4c59@make-i/o-decoding-error o4c59@make-i/o-decoding-error) (set! o4d77@o4c57@p? o4c57@p?) (set! o4d76@o4c54@o4c4c o4c54@o4c4c) (set! o4d75@o4c52@o4c4d o4c52@o4c4d) (set! o4d74@o4c50@o4c4b o4c50@o4c4b) (set! o4d73@o4c4a@&i/o-port-rcd o4c4a@&i/o-port-rcd) (set! o4d72@o4c48@&i/o-port-rtd o4c48@&i/o-port-rtd) (set! o4d71@o4c46@i/o-error-port o4c46@i/o-error-port) (set! o4d70@o4c44@i/o-port-error? o4c44@i/o-port-error?) (set! o4d6f@o4c42@o4c31 o4c42@o4c31) (set! o4d6e@o4c40@make-i/o-port-error o4c40@make-i/o-port-error) (set! o4d6d@o4c3e@p? o4c3e@p?) (set! o4d6c@o4c3b@o4c33 o4c3b@o4c33) (set! o4d6b@o4c39@o4c34 o4c39@o4c34) (set! o4d6a@o4c37@o4c32 o4c37@o4c32) (set! o4d69@o4c2f@&i/o-file-does-not-exist-rcd o4c2f@&i/o-file-does-not-exist-rcd) (set! o4d68@o4c2d@&i/o-file-does-not-exist-rtd o4c2d@&i/o-file-does-not-exist-rtd) (set! o4d67@o4c2b@i/o-file-does-not-exist-error? o4c2b@i/o-file-does-not-exist-error?) (set! o4d66@o4c29@make-i/o-file-does-not-exist-error o4c29@make-i/o-file-does-not-exist-error) (set! o4d65@o4c27@p? o4c27@p?) (set! o4d64@o4c24@o4c1c o4c24@o4c1c) (set! o4d63@o4c22@o4c1d o4c22@o4c1d) (set! o4d62@o4c20@o4c1b o4c20@o4c1b) (set! o4d61@o4c1a@&i/o-file-already-exists-rcd o4c1a@&i/o-file-already-exists-rcd) (set! o4d60@o4c18@&i/o-file-already-exists-rtd o4c18@&i/o-file-already-exists-rtd) (set! o4d5f@o4c16@i/o-file-already-exists-error? o4c16@i/o-file-already-exists-error?) (set! o4d5e@o4c14@make-i/o-file-already-exists-error o4c14@make-i/o-file-already-exists-error) (set! o4d5d@o4c12@p? o4c12@p?) (set! o4d5c@o4c0f@o4c07 o4c0f@o4c07) (set! o4d5b@o4c0d@o4c08 o4c0d@o4c08) (set! o4d5a@o4c0b@o4c06 o4c0b@o4c06) (set! o4d59@o4c05@&i/o-file-is-read-only-rcd o4c05@&i/o-file-is-read-only-rcd) (set! o4d58@o4c03@&i/o-file-is-read-only-rtd o4c03@&i/o-file-is-read-only-rtd) (set! o4d57@o4c01@i/o-file-is-read-only-error? o4c01@i/o-file-is-read-only-error?) (set! o4d56@o4bff@make-i/o-file-is-read-only-error o4bff@make-i/o-file-is-read-only-error) (set! o4d55@o4bfd@p? o4bfd@p?) (set! o4d54@o4bfa@o4bf2 o4bfa@o4bf2) (set! o4d53@o4bf8@o4bf3 o4bf8@o4bf3) (set! o4d52@o4bf6@o4bf1 o4bf6@o4bf1) (set! o4d51@o4bf0@&i/o-file-protection-rcd o4bf0@&i/o-file-protection-rcd) (set! o4d50@o4bee@&i/o-file-protection-rtd o4bee@&i/o-file-protection-rtd) (set! o4d4f@o4bec@i/o-file-protection-error? o4bec@i/o-file-protection-error?) (set! o4d4e@o4bea@make-i/o-file-protection-error o4bea@make-i/o-file-protection-error) (set! o4d4d@o4be8@p? o4be8@p?) (set! o4d4c@o4be5@o4bdd o4be5@o4bdd) (set! o4d4b@o4be3@o4bde o4be3@o4bde) (set! o4d4a@o4be1@o4bdc o4be1@o4bdc) (set! o4d49@o4bdb@&i/o-filename-rcd o4bdb@&i/o-filename-rcd) (set! o4d48@o4bd9@&i/o-filename-rtd o4bd9@&i/o-filename-rtd) (set! o4d47@o4bd7@i/o-error-filename o4bd7@i/o-error-filename) (set! o4d46@o4bd5@i/o-filename-error? o4bd5@i/o-filename-error?) (set! o4d45@o4bd3@o4bc2 o4bd3@o4bc2) (set! o4d44@o4bd1@make-i/o-filename-error o4bd1@make-i/o-filename-error) (set! o4d43@o4bcf@p? o4bcf@p?) (set! o4d42@o4bcc@o4bc4 o4bcc@o4bc4) (set! o4d41@o4bca@o4bc5 o4bca@o4bc5) (set! o4d40@o4bc8@o4bc3 o4bc8@o4bc3) (set! o4d3f@o4bc0@&i/o-invalid-position-rcd o4bc0@&i/o-invalid-position-rcd) (set! o4d3e@o4bbe@&i/o-invalid-position-rtd o4bbe@&i/o-invalid-position-rtd) (set! o4d3d@o4bbc@i/o-error-position o4bbc@i/o-error-position) (set! o4d3c@o4bba@i/o-invalid-position-error? o4bba@i/o-invalid-position-error?) (set! o4d3b@o4bb8@o4ba7 o4bb8@o4ba7) (set! o4d3a@o4bb6@make-i/o-invalid-position-error o4bb6@make-i/o-invalid-position-error) (set! o4d39@o4bb4@p? o4bb4@p?) (set! o4d38@o4bb1@o4ba9 o4bb1@o4ba9) (set! o4d37@o4baf@o4baa o4baf@o4baa) (set! o4d36@o4bad@o4ba8 o4bad@o4ba8) (set! o4d35@o4ba5@&i/o-write-rcd o4ba5@&i/o-write-rcd) (set! o4d34@o4ba3@&i/o-write-rtd o4ba3@&i/o-write-rtd) (set! o4d33@o4ba1@i/o-write-error? o4ba1@i/o-write-error?) (set! o4d32@o4b9f@make-i/o-write-error o4b9f@make-i/o-write-error) (set! o4d31@o4b9d@p? o4b9d@p?) (set! o4d30@o4b9a@o4b92 o4b9a@o4b92) (set! o4d2f@o4b98@o4b93 o4b98@o4b93) (set! o4d2e@o4b96@o4b91 o4b96@o4b91) (set! o4d2d@o4b90@&i/o-read-rcd o4b90@&i/o-read-rcd) (set! o4d2c@o4b8e@&i/o-read-rtd o4b8e@&i/o-read-rtd) (set! o4d2b@o4b8c@i/o-read-error? o4b8c@i/o-read-error?) (set! o4d2a@o4b8a@make-i/o-read-error o4b8a@make-i/o-read-error) (set! o4d29@o4b88@p? o4b88@p?) (set! o4d28@o4b85@o4b7d o4b85@o4b7d) (set! o4d27@o4b83@o4b7e o4b83@o4b7e) (set! o4d26@o4b81@o4b7c o4b81@o4b7c) (set! o4d25@o4b7b@&i/o-rcd o4b7b@&i/o-rcd) (set! o4d24@o4b79@&i/o-rtd o4b79@&i/o-rtd) (set! o4d23@o4b77@i/o-error? o4b77@i/o-error?) (set! o4d22@o4b75@make-i/o-error o4b75@make-i/o-error) (set! o4d21@o4b73@p? o4b73@p?) (set! o4d20@o4b70@o4b68 o4b70@o4b68) (set! o4d1f@o4b6e@o4b69 o4b6e@o4b69) (set! o4d1e@o4b6c@o4b67 o4b6c@o4b67) (set! o4d1d@o4b66@&undefined-rcd o4b66@&undefined-rcd) (set! o4d1c@o4b64@&undefined-rtd o4b64@&undefined-rtd) (set! o4d1b@o4b62@undefined-violation? o4b62@undefined-violation?) (set! o4d1a@o4b60@make-undefined-violation o4b60@make-undefined-violation) (set! o4d19@o4b5e@p? o4b5e@p?) (set! o4d18@o4b5b@o4b53 o4b5b@o4b53) (set! o4d17@o4b59@o4b54 o4b59@o4b54) (set! o4d16@o4b57@o4b52 o4b57@o4b52) (set! o4d15@o4b51@&syntax-rcd o4b51@&syntax-rcd) (set! o4d14@o4b4f@&syntax-rtd o4b4f@&syntax-rtd) (set! o4d13@o4b4d@syntax-violation-subform o4b4d@syntax-violation-subform) (set! o4d12@o4b4b@syntax-violation-form o4b4b@syntax-violation-form) (set! o4d11@o4b49@syntax-violation? o4b49@syntax-violation?) (set! o4d10@o4b47@o4b34 o4b47@o4b34) (set! o4d0f@o4b45@o4b32 o4b45@o4b32) (set! o4d0e@o4b43@make-syntax-violation o4b43@make-syntax-violation) (set! o4d0d@o4b41@p? o4b41@p?) (set! o4d0c@o4b3e@o4b36 o4b3e@o4b36) (set! o4d0b@o4b3c@o4b37 o4b3c@o4b37) (set! o4d0a@o4b3a@o4b35 o4b3a@o4b35) (set! o4d09@o4b30@&lexical-rcd o4b30@&lexical-rcd) (set! o4d08@o4b2e@&lexical-rtd o4b2e@&lexical-rtd) (set! o4d07@o4b2c@lexical-violation? o4b2c@lexical-violation?) (set! o4d06@o4b2a@make-lexical-violation o4b2a@make-lexical-violation) (set! o4d05@o4b28@p? o4b28@p?) (set! o4d04@o4b25@o4b1d o4b25@o4b1d) (set! o4d03@o4b23@o4b1e o4b23@o4b1e) (set! o4d02@o4b21@o4b1c o4b21@o4b1c) (set! o4d01@o4b1b@&implementation-restriction-rcd o4b1b@&implementation-restriction-rcd) (set! o4d00@o4b19@&implementation-restriction-rtd o4b19@&implementation-restriction-rtd) (set! o4cff@o4b17@implementation-restriction-violation? o4b17@implementation-restriction-violation?) (set! o4cfe@o4b15@make-implementation-restriction-violation o4b15@make-implementation-restriction-violation) (set! o4cfd@o4b13@p? o4b13@p?) (set! o4cfc@o4b10@o4b08 o4b10@o4b08) (set! o4cfb@o4b0e@o4b09 o4b0e@o4b09) (set! o4cfa@o4b0c@o4b07 o4b0c@o4b07) (set! o4cf9@o4b06@&non-continuable-rcd o4b06@&non-continuable-rcd) (set! o4cf8@o4b04@&non-continuable-rtd o4b04@&non-continuable-rtd) (set! o4cf7@o4b02@non-continuable-violation? o4b02@non-continuable-violation?) (set! o4cf6@o4b00@make-non-continuable-violation o4b00@make-non-continuable-violation) (set! o4cf5@o4afe@p? o4afe@p?) (set! o4cf4@o4afb@o4af3 o4afb@o4af3) (set! o4cf3@o4af9@o4af4 o4af9@o4af4) (set! o4cf2@o4af7@o4af2 o4af7@o4af2) (set! o4cf1@o4af1@&who-rcd o4af1@&who-rcd) (set! o4cf0@o4aef@&who-rtd o4aef@&who-rtd) (set! o4cef@o4aed@condition-who o4aed@condition-who) (set! o4cee@o4aeb@who-condition? o4aeb@who-condition?) (set! o4ced@o4ae9@o4ad8 o4ae9@o4ad8) (set! o4cec@o4ae7@make-who-condition o4ae7@make-who-condition) (set! o4ceb@o4ae5@p? o4ae5@p?) (set! o4cea@o4ae2@o4ada o4ae2@o4ada) (set! o4ce9@o4ae0@o4adb o4ae0@o4adb) (set! o4ce8@o4ade@o4ad9 o4ade@o4ad9) (set! o4ce7@o4ad6@&irritants-rcd o4ad6@&irritants-rcd) (set! o4ce6@o4ad4@&irritants-rtd o4ad4@&irritants-rtd) (set! o4ce5@o4ad2@condition-irritants o4ad2@condition-irritants) (set! o4ce4@o4ad0@irritants-condition? o4ad0@irritants-condition?) (set! o4ce3@o4ace@o4abd o4ace@o4abd) (set! o4ce2@o4acc@make-irritants-condition o4acc@make-irritants-condition) (set! o4ce1@o4aca@p? o4aca@p?) (set! o4ce0@o4ac7@o4abf o4ac7@o4abf) (set! o4cdf@o4ac5@o4ac0 o4ac5@o4ac0) (set! o4cde@o4ac3@o4abe o4ac3@o4abe) (set! o4cdd@o4abb@&assertion-rcd o4abb@&assertion-rcd) (set! o4cdc@o4ab9@&assertion-rtd o4ab9@&assertion-rtd) (set! o4cdb@o4ab7@assertion-violation? o4ab7@assertion-violation?) (set! o4cda@o4ab5@make-assertion-violation o4ab5@make-assertion-violation) (set! o4cd9@o4ab3@p? o4ab3@p?) (set! o4cd8@o4ab0@o4aa8 o4ab0@o4aa8) (set! o4cd7@o4aae@o4aa9 o4aae@o4aa9) (set! o4cd6@o4aac@o4aa7 o4aac@o4aa7) (set! o4cd5@o4aa6@&violation-rcd o4aa6@&violation-rcd) (set! o4cd4@o4aa4@&violation-rtd o4aa4@&violation-rtd) (set! o4cd3@o4aa2@violation? o4aa2@violation?) (set! o4cd2@o4aa0@make-violation o4aa0@make-violation) (set! o4cd1@o4a9e@p? o4a9e@p?) (set! o4cd0@o4a9b@o4a93 o4a9b@o4a93) (set! o4ccf@o4a99@o4a94 o4a99@o4a94) (set! o4cce@o4a97@o4a92 o4a97@o4a92) (set! o4ccd@o4a91@&error-rcd o4a91@&error-rcd) (set! o4ccc@o4a8f@&error-rtd o4a8f@&error-rtd) (set! o4ccb@o4a8d@error? o4a8d@error?) (set! o4cca@o4a8b@make-error o4a8b@make-error) (set! o4cc9@o4a89@p? o4a89@p?) (set! o4cc8@o4a86@o4a7e o4a86@o4a7e) (set! o4cc7@o4a84@o4a7f o4a84@o4a7f) (set! o4cc6@o4a82@o4a7d o4a82@o4a7d) (set! o4cc5@o4a7c@&serious-rcd o4a7c@&serious-rcd) (set! o4cc4@o4a7a@&serious-rtd o4a7a@&serious-rtd) (set! o4cc3@o4a78@serious-condition? o4a78@serious-condition?) (set! o4cc2@o4a76@make-serious-condition o4a76@make-serious-condition) (set! o4cc1@o4a74@p? o4a74@p?) (set! o4cc0@o4a71@o4a69 o4a71@o4a69) (set! o4cbf@o4a6f@o4a6a o4a6f@o4a6a) (set! o4cbe@o4a6d@o4a68 o4a6d@o4a68) (set! o4cbd@o4a67@&warning-rcd o4a67@&warning-rcd) (set! o4cbc@o4a65@&warning-rtd o4a65@&warning-rtd) (set! o4cbb@o4a63@warning? o4a63@warning?) (set! o4cba@o4a61@make-warning o4a61@make-warning) (set! o4cb9@o4a5f@p? o4a5f@p?) (set! o4cb8@o4a5c@o4a54 o4a5c@o4a54) (set! o4cb7@o4a5a@o4a55 o4a5a@o4a55) (set! o4cb6@o4a58@o4a53 o4a58@o4a53) (set! o4cb5@o4a52@&message-rcd o4a52@&message-rcd) (set! o4cb4@o4a50@&message-rtd o4a50@&message-rtd) (set! o4cb3@o4a4e@condition-message o4a4e@condition-message) (set! o4cb2@o4a4c@message-condition? o4a4c@message-condition?) (set! o4cb1@o4a4a@o4a39 o4a4a@o4a39) (set! o4cb0@o4a48@make-message-condition o4a48@make-message-condition) (set! o4caf@o4a46@p? o4a46@p?) (set! o4cae@o4a43@o4a3b o4a43@o4a3b) (set! o4cad@o4a41@o4a3c o4a41@o4a3c) (set! o4cac@o4a3f@o4a3a o4a3f@o4a3a) (set! o4cab@o49f3@&condition-rcd o49f3@&condition-rcd) (set! o4caa@o49f1@&condition-rtd o49f1@&condition-rtd) (set! o4ca9@o49ef@make-&condition o49ef@make-&condition) (set! o4ca8@o49ed@&condition? o49ed@&condition?) (set! o4ca7@o49ea@o49e2 o49ea@o49e2) (set! o4ca6@o49e8@o49e3 o49e8@o49e3) (set! o4ca5@o49e6@o49e1 o49e6@o49e1)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (o28ea@o289f@current-primitive-locations (lambda (o520c@x) ((lambda (o520e@t) (if o520e@t (cdr o520e@t) '#f)) (assq o520c@x '((&no-nans-rcd . o4d95@o4ca4@&no-nans-rcd) (&no-nans-rtd . o4d94@o4ca2@&no-nans-rtd) (&no-infinities-rcd . o4d8d@o4c8f@&no-infinities-rcd) (&no-infinities-rtd . o4d8c@o4c8d@&no-infinities-rtd) (&i/o-encoding-rcd . o4d85@o4c7a@&i/o-encoding-rcd) (&i/o-encoding-rtd . o4d84@o4c78@&i/o-encoding-rtd) (&i/o-decoding-rcd . o4d7b@o4c5f@&i/o-decoding-rcd) (&i/o-decoding-rtd . o4d7a@o4c5d@&i/o-decoding-rtd) (&i/o-port-rcd . o4d73@o4c4a@&i/o-port-rcd) (&i/o-port-rtd . o4d72@o4c48@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . o4d69@o4c2f@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . o4d68@o4c2d@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . o4d61@o4c1a@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . o4d60@o4c18@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . o4d59@o4c05@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . o4d58@o4c03@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . o4d51@o4bf0@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . o4d50@o4bee@&i/o-file-protection-rtd) (&i/o-filename-rcd . o4d49@o4bdb@&i/o-filename-rcd) (&i/o-filename-rtd . o4d48@o4bd9@&i/o-filename-rtd) (&i/o-invalid-position-rcd . o4d3f@o4bc0@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . o4d3e@o4bbe@&i/o-invalid-position-rtd) (&i/o-write-rcd . o4d35@o4ba5@&i/o-write-rcd) (&i/o-write-rtd . o4d34@o4ba3@&i/o-write-rtd) (&i/o-read-rcd . o4d2d@o4b90@&i/o-read-rcd) (&i/o-read-rtd . o4d2c@o4b8e@&i/o-read-rtd) (&i/o-rcd . o4d25@o4b7b@&i/o-rcd) (&i/o-rtd . o4d24@o4b79@&i/o-rtd) (&undefined-rcd . o4d1d@o4b66@&undefined-rcd) (&undefined-rtd . o4d1c@o4b64@&undefined-rtd) (&syntax-rcd . o4d15@o4b51@&syntax-rcd) (&syntax-rtd . o4d14@o4b4f@&syntax-rtd) (&lexical-rcd . o4d09@o4b30@&lexical-rcd) (&lexical-rtd . o4d08@o4b2e@&lexical-rtd) (&implementation-restriction-rcd . o4d01@o4b1b@&implementation-restriction-rcd) (&implementation-restriction-rtd . o4d00@o4b19@&implementation-restriction-rtd) (&non-continuable-rcd . o4cf9@o4b06@&non-continuable-rcd) (&non-continuable-rtd . o4cf8@o4b04@&non-continuable-rtd) (&who-rcd . o4cf1@o4af1@&who-rcd) (&who-rtd . o4cf0@o4aef@&who-rtd) (&irritants-rcd . o4ce7@o4ad6@&irritants-rcd) (&irritants-rtd . o4ce6@o4ad4@&irritants-rtd) (&assertion-rcd . o4cdd@o4abb@&assertion-rcd) (&assertion-rtd . o4cdc@o4ab9@&assertion-rtd) (&violation-rcd . o4cd5@o4aa6@&violation-rcd) (&violation-rtd . o4cd4@o4aa4@&violation-rtd) (&error-rcd . o4ccd@o4a91@&error-rcd) (&error-rtd . o4ccc@o4a8f@&error-rtd) (&serious-rcd . o4cc5@o4a7c@&serious-rcd) (&serious-rtd . o4cc4@o4a7a@&serious-rtd) (&warning-rcd . o4cbd@o4a67@&warning-rcd) (&warning-rtd . o4cbc@o4a65@&warning-rtd) (&message-rcd . o4cb5@o4a52@&message-rcd) (&message-rtd . o4cb4@o4a50@&message-rtd) (&condition-rcd . o4cab@o49f3@&condition-rcd) (&condition-rtd . o4caa@o49f1@&condition-rtd) (syntax-error . o49d3@o2fdf@syntax-error) (syntax-dispatch . o4968@o2efa@syntax-dispatch) (load . o4ec6@o4db1@load) (interaction-environment . o49db@o2fef@interaction-environment) (library-path . o2b01@o2990@library-path) (make-parameter . o2899@o27c3@make-parameter) (make-variable-transformer . o4926@o2d27@make-variable-transformer) (identifier? . o49d6@o2fe5@identifier?) (generate-temporaries . o49cc@o2fd1@generate-temporaries) (free-identifier=? . o49cd@o2fd3@free-identifier=?) (syntax->datum . o49d8@o2fe9@syntax->datum) (datum->syntax . o49d7@o2fe7@datum->syntax) (bound-identifier=? . o49ce@o2fd5@bound-identifier=?) (make-i/o-write-error . o4d32@o4b9f@make-i/o-write-error) (make-i/o-read-error . o4d2a@o4b8a@make-i/o-read-error) (make-i/o-port-error . o4d6e@o4c40@make-i/o-port-error) (make-i/o-invalid-position-error . o4d3a@o4bb6@make-i/o-invalid-position-error) (make-i/o-filename-error . o4d44@o4bd1@make-i/o-filename-error) (make-i/o-file-protection-error . o4d4e@o4bea@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . o4d56@o4bff@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . o4d66@o4c29@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . o4d5e@o4c14@make-i/o-file-already-exists-error) (make-i/o-error . o4d22@o4b75@make-i/o-error) (make-i/o-encoding-error . o4d80@o4c70@make-i/o-encoding-error) (make-i/o-decoding-error . o4d78@o4c59@make-i/o-decoding-error) (i/o-write-error? . o4d33@o4ba1@i/o-write-error?) (i/o-read-error? . o4d2b@o4b8c@i/o-read-error?) (i/o-port-error? . o4d70@o4c44@i/o-port-error?) (i/o-invalid-position-error? . o4d3c@o4bba@i/o-invalid-position-error?) (i/o-filename-error? . o4d46@o4bd5@i/o-filename-error?) (i/o-file-protection-error? . o4d4f@o4bec@i/o-file-protection-error?) (i/o-file-is-read-only-error? . o4d57@o4c01@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . o4d67@o4c2b@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . o4d5f@o4c16@i/o-file-already-exists-error?) (i/o-error? . o4d23@o4b77@i/o-error?) (i/o-error-position . o4d3d@o4bbc@i/o-error-position) (i/o-error-port . o4d71@o4c46@i/o-error-port) (i/o-error-filename . o4d47@o4bd7@i/o-error-filename) (i/o-encoding-error? . o4d82@o4c74@i/o-encoding-error?) (i/o-encoding-error-char . o4d83@o4c76@i/o-encoding-error-char) (i/o-decoding-error? . o4d79@o4c5b@i/o-decoding-error?) (scheme-report-environment . o49c3@o2fbf@scheme-report-environment) (null-environment . o49c2@o2fbd@null-environment) (command-line . o4ec3@o4dab@command-line) (eval . o49c5@o2fc3@eval) (environment . o49c1@o2fbb@environment) (who-condition? . o4cee@o4aeb@who-condition?) (warning? . o4cbb@o4a63@warning?) (violation? . o4cd3@o4aa2@violation?) (undefined-violation? . o4d1b@o4b62@undefined-violation?) (syntax-violation? . o4d11@o4b49@syntax-violation?) (syntax-violation-subform . o4d13@o4b4d@syntax-violation-subform) (syntax-violation-form . o4d12@o4b4b@syntax-violation-form) (syntax-violation . o49d5@o2fe3@syntax-violation) (serious-condition? . o4cc3@o4a78@serious-condition?) (non-continuable-violation? . o4cf7@o4b02@non-continuable-violation?) (message-condition? . o4cb2@o4a4c@message-condition?) (make-who-condition . o4cec@o4ae7@make-who-condition) (make-warning . o4cba@o4a61@make-warning) (make-violation . o4cd2@o4aa0@make-violation) (make-undefined-violation . o4d1a@o4b60@make-undefined-violation) (make-syntax-violation . o4d0e@o4b43@make-syntax-violation) (make-serious-condition . o4cc2@o4a76@make-serious-condition) (make-non-continuable-violation . o4cf6@o4b00@make-non-continuable-violation) (make-message-condition . o4cb0@o4a48@make-message-condition) (make-lexical-violation . o4d06@o4b2a@make-lexical-violation) (make-irritants-condition . o4ce2@o4acc@make-irritants-condition) (make-implementation-restriction-violation . o4cfe@o4b15@make-implementation-restriction-violation) (make-error . o4cca@o4a8b@make-error) (make-assertion-violation . o4cda@o4ab5@make-assertion-violation) (lexical-violation? . o4d07@o4b2c@lexical-violation?) (irritants-condition? . o4ce4@o4ad0@irritants-condition?) (implementation-restriction-violation? . o4cff@o4b17@implementation-restriction-violation?) (error? . o4ccb@o4a8d@error?) (condition-who . o4cef@o4aed@condition-who) (condition-message . o4cb3@o4a4e@condition-message) (condition-irritants . o4ce5@o4ad2@condition-irritants) (assertion-violation? . o4cdb@o4ab7@assertion-violation?) (no-nans-violation? . o4d93@o4ca0@no-nans-violation?) (no-infinities-violation? . o4d8b@o4c8b@no-infinities-violation?) (make-no-nans-violation . o4d92@o4c9e@make-no-nans-violation) (make-no-infinities-violation . o4d8a@o4c89@make-no-infinities-violation) (assertion-error . o49d2@o2fdd@assertion-error)))))) (o2b11@o29b0@install-library 'o51e9 '(mosh interaction) '() '() '() '() '((regexp? . o51e1) (alist->eq-hash-table . o51de) (format . o51db) (string-split . o51d0) (call-process . o51ca) (set-current-directory! . o51c6) (expand-path . o51c5) (current-directory . o51c4) (%spawn . o51c3) (%waitpid . o51c2) (pointer-ref-c-int64 . o51c1) (pointer-ref-c-int32 . o51c0) (pointer-ref-c-int16 . o51bf) (pointer-ref-c-int8 . o51be) (pointer-ref-c-uint64 . o51bd) (pointer-ref-c-uint32 . o51bc) (pointer-ref-c-uint16 . o51bb) (pointer-ref-c-uint8 . o51ba) (pointer-set-c-uint64! . o51b9) (pointer-set-c-uint32! . o51b8) (pointer-set-c-uint16! . o51b7) (pointer-set-c-uint8! . o51b6) (pointer-set-c-int64! . o51b5) (pointer-set-c-int32! . o51b4) (pointer-set-c-int16! . o51b3) (pointer-set-c-int8! . o51b2) (pointer-set-c-pointer! . o51b1) (pointer-set-c-double! . o51b0) (pointer-set-c-float! . o51af) (pointer-set-c-long-long! . o51ae) (pointer-set-c-long! . o51ad) (pointer-set-c-int! . o51ac) (pointer-set-c-short! . o51ab) (pointer-set-c-char! . o51aa) (pointer-ref-c-pointer . o51a9) (pointer-ref-c-double . o51a8) (pointer-ref-c-float . o51a7) (pointer-ref-c-unsigned-long-long . o51a6) (pointer-ref-c-signed-long-long . o51a5) (pointer-ref-c-unsigned-long . o51a4) (pointer-ref-c-signed-long . o51a3) (pointer-ref-c-unsigned-int . o51a2) (pointer-ref-c-signed-int . o51a1) (pointer-ref-c-unsigned-short . o51a0) (pointer-ref-c-signed-short . o519f) (pointer-ref-c-unsigned-char . o519e) (pointer-ref-c-signed-char . o519d) (pointer->integer . o519c) (integer->pointer . o519b) (pointer? . o519a) (shared-errno . o5199) (%ffi-supported? . o5198) (%ffi-pointer->string . o5197) (%ffi-call->string-or-zero . o5196) (%ffi-call->double . o5195) (%ffi-call->void* . o5194) (%ffi-call->void . o5193) (%ffi-call->char . o5192) (%ffi-call->int . o5191) (%ffi-lookup . o5190) (%ffi-open . o518f) (%fork . o518e) (%pipe . o518d) (p . o518c) (whereis . o5176) (register . o5175) (vm-join! . o5174) (vm-set-value! . o5173) (vm? . o5172) (main-vm? . o5171) (vm-eval . o5170) (vm-self . o516f) (vm-start! . o516e) (make-vm . o516d) (mutex-try-lock! . o516c) (mutex-unlock! . o516b) (mutex-lock! . o516a) (mutex? . o5169) (make-mutex . o5168) (condition-variable-notify-all! . o5167) (condition-variable-notify! . o5166) (condition-variable-wait! . o5165) (make-condition-variable . o5164) (string-upcase . o514d) (string-titlecase . o514c) (string-normalize-nfkd . o514b) (string-normalize-nfkc . o514a) (string-normalize-nfd . o5149) (string-normalize-nfc . o5148) (string-foldcase . o5147) (string-downcase . o5146) (string-ci>? . o5145) (string-ci>=? . o5144) (string-ci=? . o5143) (string-ci<? . o5142) (string-ci<=? . o5141) (char-whitespace? . o5140) (char-upper-case? . o513f) (char-title-case? . o513e) (char-numeric? . o513d) (char-lower-case? . o513c) (char-general-category . o513b) (char-upcase . o513a) (char-titlecase . o5139) (char-foldcase . o5138) (char-downcase . o5137) (char-ci>? . o5136) (char-ci>=? . o5135) (char-ci=? . o5134) (char-ci<? . o5133) (char-ci<=? . o5132) (char-alphabetic? . o5131) (make-variable-transformer . o2d26) (identifier? . o2fe4) (generate-temporaries . o2fd0) (free-identifier=? . o2fd2) (syntax->datum . o2fe8) (datum->syntax . o2fe6) (bound-identifier=? . o2fd4) (record-type-descriptor? . o5130) (record-predicate . o512f) (record-mutator . o512e) (record-constructor . o512d) (record-accessor . o512c) (make-record-type-descriptor . o512b) (make-record-constructor-descriptor . o512a) (record? . o5129) (record-type-uid . o5128) (record-type-sealed? . o5127) (record-type-parent . o5126) (record-type-opaque? . o5125) (record-type-name . o5124) (record-type-generative? . o5123) (record-type-field-names . o5122) (record-rtd . o5121) (record-field-mutable? . o5120) (delete-file . o511f) (file-exists? . o511e) (vector-sort! . o511d) (vector-sort . o511c) (list-sort . o511b) (symbol-hash . o511a) (string-ci-hash . o5119) (string-hash . o5118) (equal-hash . o5117) (hashtable-equivalence-function . o5116) (make-hashtable . o5115) (hashtable-hash-function . o5114) (make-eqv-hashtable . o5113) (make-eq-hashtable . o5112) (hashtable? . o5111) (hashtable-update! . o5110) (hashtable-size . o510f) (hashtable-set! . o510e) (hashtable-ref . o510d) (hashtable-mutable? . o510c) (hashtable-keys . o510b) (hashtable-entries . o510a) (hashtable-delete! . o5109) (hashtable-copy . o5108) (hashtable-contains? . o5107) (hashtable-clear! . o5106) (call-with-output-file . o5105) (call-with-input-file . o5104) (write-char . o5103) (write . o5102) (with-output-to-file . o5101) (with-input-from-file . o5100) (read-char . o50ff) (read . o50fe) (peek-char . o50fd) (open-output-file . o50fc) (open-input-file . o50fb) (newline . o50fa) (display . o50f9) (close-output-port . o50f8) (close-input-port . o50f7) (eof-object? . o50f6) (eof-object . o50f5) (current-error-port . o50f4) (current-output-port . o50f3) (current-input-port . o50f2) (output-port? . o50f1) (input-port? . o50f0) (utf-8-codec . o50ef) (utf-16-codec . o50ee) (transcoder-error-handling-mode . o50ed) (transcoder-eol-style . o50ec) (transcoder-codec . o50eb) (transcoded-port . o50ea) (textual-port? . o50e9) (string->bytevector . o50e8) (standard-output-port . o50e7) (standard-input-port . o50e6) (standard-error-port . o50e5) (set-port-position! . o50e4) (put-u8 . o50e3) (put-string . o50e2) (put-datum . o50e1) (put-char . o50e0) (put-bytevector . o50df) (port? . o50de) (port-transcoder . o50dd) (port-position . o50dc) (port-has-set-port-position!? . o50db) (port-has-port-position? . o50da) (port-eof? . o50d9) (output-port-buffer-mode . o50d8) (open-string-output-port . o50d7) (open-string-input-port . o50d6) (open-file-output-port . o50d5) (open-file-input/output-port . o50d4) (open-file-input-port . o50d3) (open-bytevector-output-port . o50d2) (open-bytevector-input-port . o50d1) (native-transcoder . o50d0) (native-eol-style . o50cf) (make-transcoder . o50ce) (latin-1-codec . o50cd) (make-i/o-write-error . o4b9e) (make-i/o-read-error . o4b89) (make-i/o-port-error . o4c3f) (make-i/o-invalid-position-error . o4bb5) (make-i/o-filename-error . o4bd0) (make-i/o-file-protection-error . o4be9) (make-i/o-file-is-read-only-error . o4bfe) (make-i/o-file-does-not-exist-error . o4c28) (make-i/o-file-already-exists-error . o4c13) (make-i/o-error . o4b74) (make-i/o-encoding-error . o4c6f) (make-i/o-decoding-error . o4c58) (make-custom-textual-output-port . o50cc) (make-custom-textual-input/output-port . o50cb) (make-custom-textual-input-port . o50ca) (make-custom-binary-output-port . o50c9) (make-custom-binary-input/output-port . o50c8) (make-custom-binary-input-port . o50c7) (make-bytevector . o50c6) (lookahead-u8 . o50c5) (lookahead-char . o50c4) (i/o-write-error? . o4ba0) (i/o-read-error? . o4b8b) (i/o-port-error? . o4c43) (i/o-invalid-position-error? . o4bb9) (i/o-filename-error? . o4bd4) (i/o-file-protection-error? . o4beb) (i/o-file-is-read-only-error? . o4c00) (i/o-file-does-not-exist-error? . o4c2a) (i/o-file-already-exists-error? . o4c15) (i/o-error? . o4b76) (i/o-error-position . o4bbb) (i/o-error-port . o4c45) (i/o-error-filename . o4bd6) (i/o-encoding-error? . o4c73) (i/o-encoding-error-char . o4c75) (i/o-decoding-error? . o4c5a) (get-u8 . o50c3) (get-string-n! . o50c2) (get-string-n . o50c1) (get-string-all . o50c0) (get-line . o50bf) (get-datum . o50be) (get-char . o50bd) (get-bytevector-some . o50bc) (get-bytevector-n! . o50bb) (get-bytevector-n . o50ba) (get-bytevector-all . o50b9) (flush-output-port . o50b8) (close-port . o50b7) (exit . o50af) (command-line . o4daa) (string-fill! . o50ae) (string-set! . o50ad) (set-cdr! . o50ac) (set-car! . o50ab) (remove . o50aa) (remv . o50a9) (remp . o50a8) (remq . o50a7) (partition . o50a6) (memv . o50a5) (memq . o50a4) (memp . o50a3) (member . o50a2) (exists . o50a1) (for-all . o50a0) (fold-right . o509f) (fold-left . o509e) (find . o509d) (filter . o509c) (cons* . o509b) (assv . o509a) (assq . o5099) (assp . o5098) (assoc . o5097) (call-with-string-output-port . o5096) (call-with-port . o5095) (call-with-bytevector-output-port . o5094) (bytevector->string . o5093) (buffer-mode? . o5092) (binary-port? . o5091) (with-exception-handler . o5090) (raise-continuable . o508f) (raise . o508e) (eval . o2fc2) (environment . o2fba) (make-enumeration . o508d) (enum-set=? . o508c) (enum-set-universe . o508b) (enum-set-union . o508a) (enum-set-subset? . o5089) (enum-set-projection . o5088) (enum-set-member? . o5087) (enum-set-intersection . o5086) (enum-set-indexer . o5085) (enum-set-difference . o5084) (enum-set-constructor . o5083) (enum-set-complement . o5082) (enum-set->list . o5081) (who-condition? . o4aea) (warning? . o4a62) (violation? . o4aa1) (undefined-violation? . o4b61) (syntax-violation? . o4b48) (syntax-violation-subform . o4b4c) (syntax-violation-form . o4b4a) (syntax-violation . o2fe2) (simple-conditions . o5080) (serious-condition? . o4a77) (non-continuable-violation? . o4b01) (message-condition? . o4a4b) (make-who-condition . o4ae6) (make-warning . o4a60) (make-violation . o4a9f) (make-undefined-violation . o4b5f) (make-syntax-violation . o4b42) (make-serious-condition . o4a75) (make-non-continuable-violation . o4aff) (make-message-condition . o4a47) (make-lexical-violation . o4b29) (make-irritants-condition . o4acb) (make-implementation-restriction-violation . o4b14) (make-error . o4a8a) (make-assertion-violation . o4ab4) (lexical-violation? . o4b2b) (irritants-condition? . o4acf) (implementation-restriction-violation? . o4b16) (error? . o4a8c) (condition-who . o4aec) (condition-predicate . o507f) (condition-message . o4a4d) (condition-irritants . o4ad1) (condition-accessor . o507e) (condition . o507d) (assertion-violation? . o4ab6) (condition? . o507c) (utf32->string . o507b) (utf16->string . o507a) (utf8->string . o5079) (uint-list->bytevector . o5078) (u8-list->bytevector . o5077) (string->utf8 . o5076) (string->utf32 . o5075) (string->utf16 . o5074) (sint-list->bytevector . o5073) (native-endianness . o5072) (bytevector? . o5071) (bytevector=? . o5070) (bytevector-uint-set! . o506f) (bytevector-uint-ref . o506e) (bytevector-u8-set! . o506d) (bytevector-u8-ref . o506c) (bytevector-u64-set! . o506b) (bytevector-u64-ref . o506a) (bytevector-u64-native-set! . o5069) (bytevector-u64-native-ref . o5068) (bytevector-u32-set! . o5067) (bytevector-u32-ref . o5066) (bytevector-u32-native-set! . o5065) (bytevector-u32-native-ref . o5064) (bytevector-u16-set! . o5063) (bytevector-u16-ref . o5062) (bytevector-u16-native-set! . o5061) (bytevector-u16-native-ref . o5060) (bytevector-sint-set! . o505f) (bytevector-sint-ref . o505e) (bytevector-s8-set! . o505d) (bytevector-s8-ref . o505c) (bytevector-s64-set! . o505b) (bytevector-s64-ref . o505a) (bytevector-s64-native-set! . o5059) (bytevector-s64-native-ref . o5058) (bytevector-s32-set! . o5057) (bytevector-s32-ref . o5056) (bytevector-s32-native-set! . o5055) (bytevector-s32-native-ref . o5054) (bytevector-s16-set! . o5053) (bytevector-s16-ref . o5052) (bytevector-s16-native-set! . o5051) (bytevector-s16-native-ref . o5050) (bytevector-length . o504f) (bytevector-ieee-single-ref . o504e) (bytevector-ieee-single-set! . o504d) (bytevector-ieee-single-native-set! . o504c) (bytevector-ieee-single-native-ref . o504b) (bytevector-ieee-double-set! . o504a) (bytevector-ieee-double-ref . o5049) (bytevector-ieee-double-native-set! . o5048) (bytevector-ieee-double-native-ref . o5047) (bytevector-fill! . o5046) (bytevector-copy! . o5045) (bytevector-copy . o5044) (bytevector->uint-list . o5043) (bytevector->u8-list . o5042) (bytevector->sint-list . o5041) (no-nans-violation? . o4c9f) (no-infinities-violation? . o4c8a) (make-no-nans-violation . o4c9d) (make-no-infinities-violation . o4c88) (real->flonum . o5040) (flzero? . o503f) (fltruncate . o503e) (fltan . o503d) (flsqrt . o503c) (flsin . o503b) (flround . o503a) (flpositive? . o5039) (flonum? . o5038) (flodd? . o5037) (flnumerator . o5036) (flnegative? . o5035) (flnan? . o5034) (flmod0 . o5033) (flmod . o5032) (flmin . o5031) (flmax . o5030) (fllog . o502f) (flinteger? . o502e) (flinfinite? . o502d) (flfloor . o502c) (flfinite? . o502b) (flexpt . o502a) (flexp . o5029) (fleven? . o5028) (fldiv0-and-mod0 . o5027) (fldiv0 . o5026) (fldiv-and-mod . o5025) (fldiv . o5024) (fldenominator . o5023) (flcos . o5022) (flceiling . o5021) (flatan . o5020) (flasin . o501f) (flacos . o501e) (flabs . o501d) (fl>? . o501c) (fl>=? . o501b) (fl=? . o501a) (fl<? . o5019) (fl<=? . o5018) (fl/ . o5017) (fl- . o5016) (fl+ . o5015) (fl* . o5014) (fixnum->flonum . o5013) (fxzero? . o5012) (fxxor . o5011) (fxrotate-bit-field . o5010) (fxreverse-bit-field . o500f) (fxpositive? . o500e) (fxodd? . o500d) (fxnot . o500c) (fxnegative? . o500b) (fxmod0 . o500a) (fxmod . o5009) (fxmin . o5008) (fxmax . o5007) (fxlength . o5006) (fxior . o5005) (fxif . o5004) (fxfirst-bit-set . o5003) (fxeven? . o5002) (fxdiv0-and-mod0 . o5001) (fxdiv0 . o5000) (fxdiv-and-mod . o4fff) (fxdiv . o4ffe) (fxcopy-bit-field . o4ffd) (fxcopy-bit . o4ffc) (fxbit-set? . o4ffb) (fxbit-field . o4ffa) (fxbit-count . o4ff9) (fxarithmetic-shift-right . o4ff8) (fxarithmetic-shift-left . o4ff7) (fxarithmetic-shift . o4ff6) (fxand . o4ff5) (fx>? . o4ff4) (fx>=? . o4ff3) (fx=? . o4ff2) (fx<? . o4ff1) (fx<=? . o4ff0) (fx-/carry . o4fef) (fx- . o4fee) (fx+/carry . o4fed) (fx+ . o4fec) (fx*/carry . o4feb) (fx* . o4fea) (greatest-fixnum . o4fe9) (least-fixnum . o4fe8) (fixnum-width . o4fe7) (fixnum? . o4fe6) (bitwise-rotate-bit-field . o4fe5) (bitwise-reverse-bit-field . o4fe4) (bitwise-length . o4fe3) (bitwise-if . o4fe2) (bitwise-first-bit-set . o4fe1) (bitwise-copy-bit-field . o4fe0) (bitwise-copy-bit . o4fdf) (bitwise-bit-set? . o4fde) (bitwise-bit-field . o4fdd) (bitwise-bit-count . o4fdc) (bitwise-xor . o4fdb) (bitwise-ior . o4fda) (bitwise-and . o4fd9) (bitwise-not . o4fd8) (bitwise-arithmetic-shift-right . o4fd7) (bitwise-arithmetic-shift-left . o4fd6) (bitwise-arithmetic-shift . o4fd5) (zero? . o4fd4) (vector? . o4fd3) (vector-set! . o4fd2) (vector-ref . o4fd1) (vector-map . o4fd0) (vector-length . o4fcf) (vector-for-each . o4fce) (vector-fill! . o4fcd) (vector->list . o4fcc) (vector . o4fcb) (values . o4fca) (truncate . o4fc9) (tan . o4fc8) (symbol? . o4fc7) (symbol=? . o4fc6) (symbol->string . o4fc5) (substring . o4fc4) (string? . o4fc3) (string>? . o4fc2) (string>=? . o4fc1) (string=? . o4fc0) (string<? . o4fbf) (string<=? . o4fbe) (string-ref . o4fbd) (string-length . o4fbc) (string-for-each . o4fbb) (string-copy . o4fba) (string-append . o4fb9) (string->symbol . o4fb8) (string->number . o4fb7) (string->list . o4fb6) (string . o4fb5) (sqrt . o4fb4) (sin . o4fb3) (round . o4fb2) (reverse . o4fb1) (real? . o4fb0) (real-valued? . o4faf) (real-part . o4fae) (rationalize . o4fad) (rational? . o4fac) (rational-valued? . o4fab) (procedure? . o4faa) (positive? . o4fa9) (pair? . o4fa8) (odd? . o4fa7) (numerator . o4fa6) (number? . o4fa5) (number->string . o4fa4) (null? . o4fa3) (not . o4fa2) (negative? . o4fa1) (nan? . o4fa0) (min . o4f9f) (max . o4f9e) (map . o4f9d) (make-vector . o4f9c) (make-string . o4f9b) (make-rectangular . o4f9a) (make-polar . o4f99) (magnitude . o4f98) (log . o4f97) (list? . o4f96) (list-tail . o4f95) (list-ref . o4f94) (list->vector . o4f93) (list->string . o4f92) (list . o4f91) (length . o4f90) (lcm . o4f8f) (integer? . o4f8e) (integer-valued? . o4f8d) (integer->char . o4f8c) (infinite? . o4f8b) (inexact? . o4f8a) (inexact . o4f89) (imag-part . o4f88) (gcd . o4f87) (for-each . o4f86) (floor . o4f85) (finite? . o4f84) (expt . o4f83) (exp . o4f82) (exact? . o4f81) (exact-integer-sqrt . o4f80) (exact . o4f7f) (even? . o4f7e) (error . o4f7d) (eqv? . o4f7c) (equal? . o4f7b) (eq? . o4f7a) (dynamic-wind . o4f79) (div0-and-mod0 . o4f78) (mod0 . o4f77) (div0 . o4f76) (div-and-mod . o4f75) (mod . o4f74) (div . o4f73) (denominator . o4f72) (cos . o4f71) (cons . o4f70) (complex? . o4f6f) (char? . o4f6e) (char>? . o4f6d) (char>=? . o4f6c) (char=? . o4f6b) (char<? . o4f6a) (char<=? . o4f69) (char->integer . o4f68) (ceiling . o4f67) (call-with-values . o4f66) (call/cc . o4f65) (call-with-current-continuation . o4f64) (cddddr . o4f63) (cdddar . o4f62) (cddadr . o4f61) (cddaar . o4f60) (cdaddr . o4f5f) (cdadar . o4f5e) (cdaadr . o4f5d) (cdaaar . o4f5c) (cadddr . o4f5b) (caddar . o4f5a) (cadadr . o4f59) (cadaar . o4f58) (caaddr . o4f57) (caadar . o4f56) (caaadr . o4f55) (caaaar . o4f54) (cdddr . o4f53) (cddar . o4f52) (cdadr . o4f51) (cdaar . o4f50) (caddr . o4f4f) (cadar . o4f4e) (caadr . o4f4d) (caaar . o4f4c) (cddr . o4f4b) (cdar . o4f4a) (cadr . o4f49) (caar . o4f48) (cdr . o4f47) (car . o4f46) (boolean? . o4f45) (boolean=? . o4f44) (atan . o4f43) (assertion-violation . o4f42) (asin . o4f41) (apply . o4f40) (append . o4f3f) (angle . o4f3e) (acos . o4f3d) (abs . o4f3c) (/ . o4f3b) (* . o4f3a) (- . o4f39) (+ . o4f38) (>= . o4f37) (> . o4f36) (= . o4f35) (<= . o4f34) (< . o4f33) (library . o4f32) (&no-nans . o4f31) (&no-infinities . o4f30) (&i/o-encoding . o4f2f) (&i/o-decoding . o4f2e) (&i/o-port . o4f2d) (&i/o-file-does-not-exist . o4f2c) (&i/o-file-already-exists . o4f2b) (&i/o-file-is-read-only . o4f2a) (&i/o-file-protection . o4f29) (&i/o-filename . o4f28) (&i/o-invalid-position . o4f27) (&i/o-write . o4f26) (&i/o-read . o4f25) (&i/o . o4f24) (&undefined . o4f23) (&syntax . o4f22) (&lexical . o4f21) (&implementation-restriction . o4f20) (&non-continuable . o4f1f) (&who . o4f1e) (&irritants . o4f1d) (&assertion . o4f1c) (&violation . o4f1b) (&error . o4f1a) (&serious . o4f19) (&warning . o4f18) (&message . o4f17) (&condition . o4f16) (define-condition-type . o4f15) (define-enumeration . o4f14) (define-record-type . o4f13) (parent-rtd . o4f12) (nongenerative . o4f11) (opaque . o4f10) (sealed . o4f0f) (protocol . o4f0e) (parent . o4f0d) (immutable . o4f0c) (mutable . o4f0b) (fields . o4f0a) (error-handling-mode . o4f09) (file-options . o4f08) (buffer-mode . o4f07) (eol-style . o4f06) (guard . o4f05) (unsyntax-splicing . o4f02) (unsyntax . o4f01) (unquote-splicing . o4f00) (unquote . o4eff) (_ . o4efe) (else . o4efd) (=> . o4efc) (... . o4efb) (assert . o4efa) (endianness . o4ef9) (time . o4ef7) (do . o4ef6) (cond . o4ef5) (let* . o4ef4) (let . o4ef3) (let*-values . o4ef2) (let-values . o4ef1) (identifier-syntax . o4ef0) (with-syntax . o4eef) (quasisyntax . o4eee) (quasiquote . o4eed) (syntax-rules . o4eec) (include . o4eeb) (record-constructor-descriptor . o4ee9) (record-type-descriptor . o4ee8) (case . o4ee7) (unless . o4ee5) (when . o4ee4) (or . o4ee3) (and . o4ee2) (if . o4ee1) (letrec* . o4ee0) (letrec . o4edf) (case-lambda . o4edd) (lambda . o4edc) (syntax . o4edb) (syntax-case . o4eda) (quote . o4ed9) (letrec-syntax . o4ed7) (let-syntax . o4ed6) (set! . o4ed5) (import . o4ed4) (begin . o4ed3) (define-syntax . o4ed1) (define . o4ed0)) '() values values '#f '#f '#t '#f) (o2b11@o29b0@install-library 'o51ea '(psyntax null-environment-5) '() '() '() '() '((make-promise . o50b0) (unquote-splicing . o4f00) (unquote . o4eff) (_ . o4efe) (else . o4efd) (=> . o4efc) (... . o4efb) (delay . o4ef8) (do . o4ef6) (cond . o4ef5) (let* . o4ef4) (let . o4ef3) (quasiquote . o4eed) (syntax-rules . o4eec) (case . o4ee7) (or . o4ee3) (and . o4ee2) (if . o4ee1) (letrec . o4edf) (lambda . o4edc) (quote . o4ed9) (letrec-syntax . o4ed7) (let-syntax . o4ed6) (set! . o4ed5) (begin . o4ed3) (define-syntax . o4ed1) (define . o4ed0)) '() values values '#f '#f '#t '#f) (o2b11@o29b0@install-library 'o51eb '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . o5145) (string-ci>=? . o5144) (string-ci=? . o5143) (string-ci<? . o5142) (string-ci<=? . o5141) (char-whitespace? . o5140) (char-upper-case? . o513f) (char-numeric? . o513d) (char-lower-case? . o513c) (char-upcase . o513a) (char-downcase . o5137) (char-ci>? . o5136) (char-ci>=? . o5135) (char-ci=? . o5134) (char-ci<? . o5133) (char-ci<=? . o5132) (char-alphabetic? . o5131) (call-with-output-file . o5105) (call-with-input-file . o5104) (write-char . o5103) (write . o5102) (with-output-to-file . o5101) (with-input-from-file . o5100) (read-char . o50ff) (read . o50fe) (peek-char . o50fd) (open-output-file . o50fc) (open-input-file . o50fb) (newline . o50fa) (display . o50f9) (close-output-port . o50f8) (close-input-port . o50f7) (eof-object . o50f5) (current-output-port . o50f3) (current-input-port . o50f2) (output-port? . o50f1) (input-port? . o50f0) (scheme-report-environment . o2fbe) (quotient . o50b6) (null-environment . o2fbc) (remainder . o50b5) (modulo . o50b4) (inexact->exact . o50b3) (force . o50b2) (exact->inexact . o50b1) (make-promise . o50b0) (string-fill! . o50ae) (string-set! . o50ad) (set-cdr! . o50ac) (set-car! . o50ab) (memv . o50a5) (memq . o50a4) (member . o50a2) (assv . o509a) (assq . o5099) (assoc . o5097) (eval . o2fc2) (zero? . o4fd4) (vector? . o4fd3) (vector-set! . o4fd2) (vector-ref . o4fd1) (vector-length . o4fcf) (vector-fill! . o4fcd) (vector->list . o4fcc) (vector . o4fcb) (values . o4fca) (truncate . o4fc9) (tan . o4fc8) (symbol? . o4fc7) (symbol->string . o4fc5) (substring . o4fc4) (string? . o4fc3) (string>? . o4fc2) (string>=? . o4fc1) (string=? . o4fc0) (string<? . o4fbf) (string<=? . o4fbe) (string-ref . o4fbd) (string-length . o4fbc) (string-copy . o4fba) (string-append . o4fb9) (string->symbol . o4fb8) (string->number . o4fb7) (string->list . o4fb6) (string . o4fb5) (sqrt . o4fb4) (sin . o4fb3) (round . o4fb2) (reverse . o4fb1) (real? . o4fb0) (real-part . o4fae) (rationalize . o4fad) (rational? . o4fac) (procedure? . o4faa) (positive? . o4fa9) (pair? . o4fa8) (odd? . o4fa7) (numerator . o4fa6) (number? . o4fa5) (number->string . o4fa4) (not . o4fa2) (negative? . o4fa1) (min . o4f9f) (max . o4f9e) (map . o4f9d) (make-vector . o4f9c) (make-string . o4f9b) (make-rectangular . o4f9a) (make-polar . o4f99) (magnitude . o4f98) (log . o4f97) (list? . o4f96) (list-tail . o4f95) (list-ref . o4f94) (list->vector . o4f93) (list->string . o4f92) (list . o4f91) (length . o4f90) (lcm . o4f8f) (integer? . o4f8e) (integer->char . o4f8c) (inexact? . o4f8a) (imag-part . o4f88) (gcd . o4f87) (for-each . o4f86) (floor . o4f85) (expt . o4f83) (exp . o4f82) (exact? . o4f81) (even? . o4f7e) (eqv? . o4f7c) (equal? . o4f7b) (eq? . o4f7a) (dynamic-wind . o4f79) (denominator . o4f72) (cos . o4f71) (cons . o4f70) (complex? . o4f6f) (char? . o4f6e) (char>? . o4f6d) (char>=? . o4f6c) (char=? . o4f6b) (char<? . o4f6a) (char<=? . o4f69) (char->integer . o4f68) (ceiling . o4f67) (call-with-values . o4f66) (call-with-current-continuation . o4f64) (cddddr . o4f63) (cdddar . o4f62) (cddadr . o4f61) (cddaar . o4f60) (cdaddr . o4f5f) (cdadar . o4f5e) (cdaadr . o4f5d) (cdaaar . o4f5c) (cadddr . o4f5b) (caddar . o4f5a) (cadadr . o4f59) (cadaar . o4f58) (caaddr . o4f57) (caadar . o4f56) (caaadr . o4f55) (caaaar . o4f54) (cdddr . o4f53) (cddar . o4f52) (cdadr . o4f51) (cdaar . o4f50) (caddr . o4f4f) (cadar . o4f4e) (caadr . o4f4d) (caaar . o4f4c) (cddr . o4f4b) (cdar . o4f4a) (cadr . o4f49) (caar . o4f48) (cdr . o4f47) (car . o4f46) (boolean? . o4f45) (atan . o4f43) (asin . o4f41) (apply . o4f40) (append . o4f3f) (angle . o4f3e) (acos . o4f3d) (abs . o4f3c) (/ . o4f3b) (* . o4f3a) (- . o4f39) (+ . o4f38) (>= . o4f37) (> . o4f36) (= . o4f35) (<= . o4f34) (< . o4f33) (unquote-splicing . o4f00) (unquote . o4eff) (else . o4efd) (=> . o4efc) (... . o4efb) (delay . o4ef8) (do . o4ef6) (cond . o4ef5) (let* . o4ef4) (let . o4ef3) (quasiquote . o4eed) (syntax-rules . o4eec) (case . o4ee7) (or . o4ee3) (and . o4ee2) (if . o4ee1) (letrec . o4edf) (lambda . o4edc) (quote . o4ed9) (letrec-syntax . o4ed7) (let-syntax . o4ed6) (set! . o4ed5) (begin . o4ed3) (define-syntax . o4ed1) (define . o4ed0)) '() values values '#f '#f '#t '#f) (o2b11@o29b0@install-library 'o51ec '(psyntax modules) '() '() '() '() '((module . o4ed2)) '() values values '#f '#f '#t '#f) (o2b11@o29b0@install-library 'o51ed '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (o2b11@o29b0@install-library 'o51ee '(rnrs) '(6) '() '() '() '((regexp? . o51e1) (string-upcase . o514d) (string-titlecase . o514c) (string-normalize-nfkd . o514b) (string-normalize-nfkc . o514a) (string-normalize-nfd . o5149) (string-normalize-nfc . o5148) (string-foldcase . o5147) (string-downcase . o5146) (string-ci>? . o5145) (string-ci>=? . o5144) (string-ci=? . o5143) (string-ci<? . o5142) (string-ci<=? . o5141) (char-whitespace? . o5140) (char-upper-case? . o513f) (char-title-case? . o513e) (char-numeric? . o513d) (char-lower-case? . o513c) (char-general-category . o513b) (char-upcase . o513a) (char-titlecase . o5139) (char-foldcase . o5138) (char-downcase . o5137) (char-ci>? . o5136) (char-ci>=? . o5135) (char-ci=? . o5134) (char-ci<? . o5133) (char-ci<=? . o5132) (char-alphabetic? . o5131) (make-variable-transformer . o2d26) (identifier? . o2fe4) (generate-temporaries . o2fd0) (free-identifier=? . o2fd2) (syntax->datum . o2fe8) (datum->syntax . o2fe6) (bound-identifier=? . o2fd4) (record-type-descriptor? . o5130) (record-predicate . o512f) (record-mutator . o512e) (record-constructor . o512d) (record-accessor . o512c) (make-record-type-descriptor . o512b) (make-record-constructor-descriptor . o512a) (record? . o5129) (record-type-uid . o5128) (record-type-sealed? . o5127) (record-type-parent . o5126) (record-type-opaque? . o5125) (record-type-name . o5124) (record-type-generative? . o5123) (record-type-field-names . o5122) (record-rtd . o5121) (record-field-mutable? . o5120) (delete-file . o511f) (file-exists? . o511e) (vector-sort! . o511d) (vector-sort . o511c) (list-sort . o511b) (symbol-hash . o511a) (string-ci-hash . o5119) (string-hash . o5118) (equal-hash . o5117) (hashtable-equivalence-function . o5116) (make-hashtable . o5115) (hashtable-hash-function . o5114) (make-eqv-hashtable . o5113) (make-eq-hashtable . o5112) (hashtable? . o5111) (hashtable-update! . o5110) (hashtable-size . o510f) (hashtable-set! . o510e) (hashtable-ref . o510d) (hashtable-mutable? . o510c) (hashtable-keys . o510b) (hashtable-entries . o510a) (hashtable-delete! . o5109) (hashtable-copy . o5108) (hashtable-contains? . o5107) (hashtable-clear! . o5106) (call-with-output-file . o5105) (call-with-input-file . o5104) (write-char . o5103) (write . o5102) (with-output-to-file . o5101) (with-input-from-file . o5100) (read-char . o50ff) (read . o50fe) (peek-char . o50fd) (open-output-file . o50fc) (open-input-file . o50fb) (newline . o50fa) (display . o50f9) (close-output-port . o50f8) (close-input-port . o50f7) (eof-object? . o50f6) (eof-object . o50f5) (current-error-port . o50f4) (current-output-port . o50f3) (current-input-port . o50f2) (output-port? . o50f1) (input-port? . o50f0) (utf-8-codec . o50ef) (utf-16-codec . o50ee) (transcoder-error-handling-mode . o50ed) (transcoder-eol-style . o50ec) (transcoder-codec . o50eb) (transcoded-port . o50ea) (textual-port? . o50e9) (string->bytevector . o50e8) (standard-output-port . o50e7) (standard-input-port . o50e6) (standard-error-port . o50e5) (set-port-position! . o50e4) (put-u8 . o50e3) (put-string . o50e2) (put-datum . o50e1) (put-char . o50e0) (put-bytevector . o50df) (port? . o50de) (port-transcoder . o50dd) (port-position . o50dc) (port-has-set-port-position!? . o50db) (port-has-port-position? . o50da) (port-eof? . o50d9) (output-port-buffer-mode . o50d8) (open-string-output-port . o50d7) (open-string-input-port . o50d6) (open-file-output-port . o50d5) (open-file-input/output-port . o50d4) (open-file-input-port . o50d3) (open-bytevector-output-port . o50d2) (open-bytevector-input-port . o50d1) (native-transcoder . o50d0) (native-eol-style . o50cf) (make-transcoder . o50ce) (latin-1-codec . o50cd) (make-i/o-write-error . o4b9e) (make-i/o-read-error . o4b89) (make-i/o-port-error . o4c3f) (make-i/o-invalid-position-error . o4bb5) (make-i/o-filename-error . o4bd0) (make-i/o-file-protection-error . o4be9) (make-i/o-file-is-read-only-error . o4bfe) (make-i/o-file-does-not-exist-error . o4c28) (make-i/o-file-already-exists-error . o4c13) (make-i/o-error . o4b74) (make-i/o-encoding-error . o4c6f) (make-i/o-decoding-error . o4c58) (make-custom-textual-output-port . o50cc) (make-custom-textual-input/output-port . o50cb) (make-custom-textual-input-port . o50ca) (make-custom-binary-output-port . o50c9) (make-custom-binary-input/output-port . o50c8) (make-custom-binary-input-port . o50c7) (make-bytevector . o50c6) (lookahead-u8 . o50c5) (lookahead-char . o50c4) (i/o-write-error? . o4ba0) (i/o-read-error? . o4b8b) (i/o-port-error? . o4c43) (i/o-invalid-position-error? . o4bb9) (i/o-filename-error? . o4bd4) (i/o-file-protection-error? . o4beb) (i/o-file-is-read-only-error? . o4c00) (i/o-file-does-not-exist-error? . o4c2a) (i/o-file-already-exists-error? . o4c15) (i/o-error? . o4b76) (i/o-error-position . o4bbb) (i/o-error-port . o4c45) (i/o-error-filename . o4bd6) (i/o-encoding-error? . o4c73) (i/o-encoding-error-char . o4c75) (i/o-decoding-error? . o4c5a) (get-u8 . o50c3) (get-string-n! . o50c2) (get-string-n . o50c1) (get-string-all . o50c0) (get-line . o50bf) (get-datum . o50be) (get-char . o50bd) (get-bytevector-some . o50bc) (get-bytevector-n! . o50bb) (get-bytevector-n . o50ba) (get-bytevector-all . o50b9) (flush-output-port . o50b8) (close-port . o50b7) (exit . o50af) (command-line . o4daa) (remove . o50aa) (remv . o50a9) (remp . o50a8) (remq . o50a7) (partition . o50a6) (memv . o50a5) (memq . o50a4) (memp . o50a3) (member . o50a2) (exists . o50a1) (for-all . o50a0) (fold-right . o509f) (fold-left . o509e) (find . o509d) (filter . o509c) (cons* . o509b) (assv . o509a) (assq . o5099) (assp . o5098) (assoc . o5097) (call-with-string-output-port . o5096) (call-with-port . o5095) (call-with-bytevector-output-port . o5094) (bytevector->string . o5093) (buffer-mode? . o5092) (binary-port? . o5091) (with-exception-handler . o5090) (raise-continuable . o508f) (raise . o508e) (make-enumeration . o508d) (enum-set=? . o508c) (enum-set-universe . o508b) (enum-set-union . o508a) (enum-set-subset? . o5089) (enum-set-projection . o5088) (enum-set-member? . o5087) (enum-set-intersection . o5086) (enum-set-indexer . o5085) (enum-set-difference . o5084) (enum-set-constructor . o5083) (enum-set-complement . o5082) (enum-set->list . o5081) (who-condition? . o4aea) (warning? . o4a62) (violation? . o4aa1) (undefined-violation? . o4b61) (syntax-violation? . o4b48) (syntax-violation-subform . o4b4c) (syntax-violation-form . o4b4a) (syntax-violation . o2fe2) (simple-conditions . o5080) (serious-condition? . o4a77) (non-continuable-violation? . o4b01) (message-condition? . o4a4b) (make-who-condition . o4ae6) (make-warning . o4a60) (make-violation . o4a9f) (make-undefined-violation . o4b5f) (make-syntax-violation . o4b42) (make-serious-condition . o4a75) (make-non-continuable-violation . o4aff) (make-message-condition . o4a47) (make-lexical-violation . o4b29) (make-irritants-condition . o4acb) (make-implementation-restriction-violation . o4b14) (make-error . o4a8a) (make-assertion-violation . o4ab4) (lexical-violation? . o4b2b) (irritants-condition? . o4acf) (implementation-restriction-violation? . o4b16) (error? . o4a8c) (condition-who . o4aec) (condition-predicate . o507f) (condition-message . o4a4d) (condition-irritants . o4ad1) (condition-accessor . o507e) (condition . o507d) (assertion-violation? . o4ab6) (condition? . o507c) (utf32->string . o507b) (utf16->string . o507a) (utf8->string . o5079) (uint-list->bytevector . o5078) (u8-list->bytevector . o5077) (string->utf8 . o5076) (string->utf32 . o5075) (string->utf16 . o5074) (sint-list->bytevector . o5073) (native-endianness . o5072) (bytevector? . o5071) (bytevector=? . o5070) (bytevector-uint-set! . o506f) (bytevector-uint-ref . o506e) (bytevector-u8-set! . o506d) (bytevector-u8-ref . o506c) (bytevector-u64-set! . o506b) (bytevector-u64-ref . o506a) (bytevector-u64-native-set! . o5069) (bytevector-u64-native-ref . o5068) (bytevector-u32-set! . o5067) (bytevector-u32-ref . o5066) (bytevector-u32-native-set! . o5065) (bytevector-u32-native-ref . o5064) (bytevector-u16-set! . o5063) (bytevector-u16-ref . o5062) (bytevector-u16-native-set! . o5061) (bytevector-u16-native-ref . o5060) (bytevector-sint-set! . o505f) (bytevector-sint-ref . o505e) (bytevector-s8-set! . o505d) (bytevector-s8-ref . o505c) (bytevector-s64-set! . o505b) (bytevector-s64-ref . o505a) (bytevector-s64-native-set! . o5059) (bytevector-s64-native-ref . o5058) (bytevector-s32-set! . o5057) (bytevector-s32-ref . o5056) (bytevector-s32-native-set! . o5055) (bytevector-s32-native-ref . o5054) (bytevector-s16-set! . o5053) (bytevector-s16-ref . o5052) (bytevector-s16-native-set! . o5051) (bytevector-s16-native-ref . o5050) (bytevector-length . o504f) (bytevector-ieee-single-ref . o504e) (bytevector-ieee-single-set! . o504d) (bytevector-ieee-single-native-set! . o504c) (bytevector-ieee-single-native-ref . o504b) (bytevector-ieee-double-set! . o504a) (bytevector-ieee-double-ref . o5049) (bytevector-ieee-double-native-set! . o5048) (bytevector-ieee-double-native-ref . o5047) (bytevector-fill! . o5046) (bytevector-copy! . o5045) (bytevector-copy . o5044) (bytevector->uint-list . o5043) (bytevector->u8-list . o5042) (bytevector->sint-list . o5041) (no-nans-violation? . o4c9f) (no-infinities-violation? . o4c8a) (make-no-nans-violation . o4c9d) (make-no-infinities-violation . o4c88) (real->flonum . o5040) (flzero? . o503f) (fltruncate . o503e) (fltan . o503d) (flsqrt . o503c) (flsin . o503b) (flround . o503a) (flpositive? . o5039) (flonum? . o5038) (flodd? . o5037) (flnumerator . o5036) (flnegative? . o5035) (flnan? . o5034) (flmod0 . o5033) (flmod . o5032) (flmin . o5031) (flmax . o5030) (fllog . o502f) (flinteger? . o502e) (flinfinite? . o502d) (flfloor . o502c) (flfinite? . o502b) (flexpt . o502a) (flexp . o5029) (fleven? . o5028) (fldiv0-and-mod0 . o5027) (fldiv0 . o5026) (fldiv-and-mod . o5025) (fldiv . o5024) (fldenominator . o5023) (flcos . o5022) (flceiling . o5021) (flatan . o5020) (flasin . o501f) (flacos . o501e) (flabs . o501d) (fl>? . o501c) (fl>=? . o501b) (fl=? . o501a) (fl<? . o5019) (fl<=? . o5018) (fl/ . o5017) (fl- . o5016) (fl+ . o5015) (fl* . o5014) (fixnum->flonum . o5013) (fxzero? . o5012) (fxxor . o5011) (fxrotate-bit-field . o5010) (fxreverse-bit-field . o500f) (fxpositive? . o500e) (fxodd? . o500d) (fxnot . o500c) (fxnegative? . o500b) (fxmod0 . o500a) (fxmod . o5009) (fxmin . o5008) (fxmax . o5007) (fxlength . o5006) (fxior . o5005) (fxif . o5004) (fxfirst-bit-set . o5003) (fxeven? . o5002) (fxdiv0-and-mod0 . o5001) (fxdiv0 . o5000) (fxdiv-and-mod . o4fff) (fxdiv . o4ffe) (fxcopy-bit-field . o4ffd) (fxcopy-bit . o4ffc) (fxbit-set? . o4ffb) (fxbit-field . o4ffa) (fxbit-count . o4ff9) (fxarithmetic-shift-right . o4ff8) (fxarithmetic-shift-left . o4ff7) (fxarithmetic-shift . o4ff6) (fxand . o4ff5) (fx>? . o4ff4) (fx>=? . o4ff3) (fx=? . o4ff2) (fx<? . o4ff1) (fx<=? . o4ff0) (fx-/carry . o4fef) (fx- . o4fee) (fx+/carry . o4fed) (fx+ . o4fec) (fx*/carry . o4feb) (fx* . o4fea) (greatest-fixnum . o4fe9) (least-fixnum . o4fe8) (fixnum-width . o4fe7) (fixnum? . o4fe6) (bitwise-rotate-bit-field . o4fe5) (bitwise-reverse-bit-field . o4fe4) (bitwise-length . o4fe3) (bitwise-if . o4fe2) (bitwise-first-bit-set . o4fe1) (bitwise-copy-bit-field . o4fe0) (bitwise-copy-bit . o4fdf) (bitwise-bit-set? . o4fde) (bitwise-bit-field . o4fdd) (bitwise-bit-count . o4fdc) (bitwise-xor . o4fdb) (bitwise-ior . o4fda) (bitwise-and . o4fd9) (bitwise-not . o4fd8) (bitwise-arithmetic-shift-right . o4fd7) (bitwise-arithmetic-shift-left . o4fd6) (bitwise-arithmetic-shift . o4fd5) (zero? . o4fd4) (vector? . o4fd3) (vector-set! . o4fd2) (vector-ref . o4fd1) (vector-map . o4fd0) (vector-length . o4fcf) (vector-for-each . o4fce) (vector-fill! . o4fcd) (vector->list . o4fcc) (vector . o4fcb) (values . o4fca) (truncate . o4fc9) (tan . o4fc8) (symbol? . o4fc7) (symbol=? . o4fc6) (symbol->string . o4fc5) (substring . o4fc4) (string? . o4fc3) (string>? . o4fc2) (string>=? . o4fc1) (string=? . o4fc0) (string<? . o4fbf) (string<=? . o4fbe) (string-ref . o4fbd) (string-length . o4fbc) (string-for-each . o4fbb) (string-copy . o4fba) (string-append . o4fb9) (string->symbol . o4fb8) (string->number . o4fb7) (string->list . o4fb6) (string . o4fb5) (sqrt . o4fb4) (sin . o4fb3) (round . o4fb2) (reverse . o4fb1) (real? . o4fb0) (real-valued? . o4faf) (real-part . o4fae) (rationalize . o4fad) (rational? . o4fac) (rational-valued? . o4fab) (procedure? . o4faa) (positive? . o4fa9) (pair? . o4fa8) (odd? . o4fa7) (numerator . o4fa6) (number? . o4fa5) (number->string . o4fa4) (null? . o4fa3) (not . o4fa2) (negative? . o4fa1) (nan? . o4fa0) (min . o4f9f) (max . o4f9e) (map . o4f9d) (make-vector . o4f9c) (make-string . o4f9b) (make-rectangular . o4f9a) (make-polar . o4f99) (magnitude . o4f98) (log . o4f97) (list? . o4f96) (list-tail . o4f95) (list-ref . o4f94) (list->vector . o4f93) (list->string . o4f92) (list . o4f91) (length . o4f90) (lcm . o4f8f) (integer? . o4f8e) (integer-valued? . o4f8d) (integer->char . o4f8c) (infinite? . o4f8b) (inexact? . o4f8a) (inexact . o4f89) (imag-part . o4f88) (gcd . o4f87) (for-each . o4f86) (floor . o4f85) (finite? . o4f84) (expt . o4f83) (exp . o4f82) (exact? . o4f81) (exact-integer-sqrt . o4f80) (exact . o4f7f) (even? . o4f7e) (error . o4f7d) (eqv? . o4f7c) (equal? . o4f7b) (eq? . o4f7a) (dynamic-wind . o4f79) (div0-and-mod0 . o4f78) (mod0 . o4f77) (div0 . o4f76) (div-and-mod . o4f75) (mod . o4f74) (div . o4f73) (denominator . o4f72) (cos . o4f71) (cons . o4f70) (complex? . o4f6f) (char? . o4f6e) (char>? . o4f6d) (char>=? . o4f6c) (char=? . o4f6b) (char<? . o4f6a) (char<=? . o4f69) (char->integer . o4f68) (ceiling . o4f67) (call-with-values . o4f66) (call/cc . o4f65) (call-with-current-continuation . o4f64) (cddddr . o4f63) (cdddar . o4f62) (cddadr . o4f61) (cddaar . o4f60) (cdaddr . o4f5f) (cdadar . o4f5e) (cdaadr . o4f5d) (cdaaar . o4f5c) (cadddr . o4f5b) (caddar . o4f5a) (cadadr . o4f59) (cadaar . o4f58) (caaddr . o4f57) (caadar . o4f56) (caaadr . o4f55) (caaaar . o4f54) (cdddr . o4f53) (cddar . o4f52) (cdadr . o4f51) (cdaar . o4f50) (caddr . o4f4f) (cadar . o4f4e) (caadr . o4f4d) (caaar . o4f4c) (cddr . o4f4b) (cdar . o4f4a) (cadr . o4f49) (caar . o4f48) (cdr . o4f47) (car . o4f46) (boolean? . o4f45) (boolean=? . o4f44) (atan . o4f43) (assertion-violation . o4f42) (asin . o4f41) (apply . o4f40) (append . o4f3f) (angle . o4f3e) (acos . o4f3d) (abs . o4f3c) (/ . o4f3b) (* . o4f3a) (- . o4f39) (+ . o4f38) (>= . o4f37) (> . o4f36) (= . o4f35) (<= . o4f34) (< . o4f33) (&no-nans . o4f31) (&no-infinities . o4f30) (&i/o-encoding . o4f2f) (&i/o-decoding . o4f2e) (&i/o-port . o4f2d) (&i/o-file-does-not-exist . o4f2c) (&i/o-file-already-exists . o4f2b) (&i/o-file-is-read-only . o4f2a) (&i/o-file-protection . o4f29) (&i/o-filename . o4f28) (&i/o-invalid-position . o4f27) (&i/o-write . o4f26) (&i/o-read . o4f25) (&i/o . o4f24) (&undefined . o4f23) (&syntax . o4f22) (&lexical . o4f21) (&implementation-restriction . o4f20) (&non-continuable . o4f1f) (&who . o4f1e) (&irritants . o4f1d) (&assertion . o4f1c) (&violation . o4f1b) (&error . o4f1a) (&serious . o4f19) (&warning . o4f18) (&message . o4f17) (&condition . o4f16) (define-condition-type . o4f15) (define-enumeration . o4f14) (define-record-type . o4f13) (parent-rtd . o4f12) (nongenerative . o4f11) (opaque . o4f10) (sealed . o4f0f) (protocol . o4f0e) (parent . o4f0d) (immutable . o4f0c) (mutable . o4f0b) (fields . o4f0a) (error-handling-mode . o4f09) (file-options . o4f08) (buffer-mode . o4f07) (eol-style . o4f06) (guard . o4f05) (unsyntax-splicing . o4f02) (unsyntax . o4f01) (unquote-splicing . o4f00) (unquote . o4eff) (_ . o4efe) (else . o4efd) (=> . o4efc) (... . o4efb) (assert . o4efa) (endianness . o4ef9) (do . o4ef6) (cond . o4ef5) (let* . o4ef4) (let . o4ef3) (let*-values . o4ef2) (let-values . o4ef1) (identifier-syntax . o4ef0) (with-syntax . o4eef) (quasisyntax . o4eee) (quasiquote . o4eed) (syntax-rules . o4eec) (record-constructor-descriptor . o4ee9) (record-type-descriptor . o4ee8) (case . o4ee7) (unless . o4ee5) (when . o4ee4) (or . o4ee3) (and . o4ee2) (if . o4ee1) (letrec* . o4ee0) (letrec . o4edf) (case-lambda . o4edd) (lambda . o4edc) (syntax . o4edb) (syntax-case . o4eda) (quote . o4ed9) (letrec-syntax . o4ed7) (let-syntax . o4ed6) (set! . o4ed5) (begin . o4ed3) (define-syntax . o4ed1) (define . o4ed0)) '() values values '#f '#f '#t '#f) (o2b11@o29b0@install-library 'o51ef '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . o2fbe) (quotient . o50b6) (null-environment . o2fbc) (remainder . o50b5) (modulo . o50b4) (inexact->exact . o50b3) (force . o50b2) (exact->inexact . o50b1) (make-promise . o50b0) (delay . o4ef8)) '() values values '#f '#f '#t '#f) (o2b11@o29b0@install-library 'o51f0 '(rnrs control) '(6) '() '() '() '((do . o4ef6) (unless . o4ee5) (when . o4ee4) (case-lambda . o4edd)) '() values values '#f '#f '#t '#f) (o2b11@o29b0@install-library 'o51f1 '(rnrs eval) '(6) '() '() '() '((eval . o2fc2) (environment . o2fba)) '() values values '#f '#f '#t '#f) (o2b11@o29b0@install-library 'o51f2 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . o50ac) (set-car! . o50ab)) '() values values '#f '#f '#t '#f) (o2b11@o29b0@install-library 'o51f3 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . o50ae) (string-set! . o50ad)) '() values values '#f '#f '#t '#f) (o2b11@o29b0@install-library 'o51f4 '(rnrs programs) '(6) '() '() '() '((exit . o50af) (command-line . o4daa)) '() values values '#f '#f '#t '#f) (o2b11@o29b0@install-library 'o51f5 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . o2d26) (identifier? . o2fe4) (generate-temporaries . o2fd0) (free-identifier=? . o2fd2) (syntax->datum . o2fe8) (datum->syntax . o2fe6) (bound-identifier=? . o2fd4) (syntax-violation . o2fe2) (unsyntax-splicing . o4f02) (unsyntax . o4f01) (_ . o4efe) (... . o4efb) (with-syntax . o4eef) (quasisyntax . o4eee) (syntax . o4edb) (syntax-case . o4eda)) '() values values '#f '#f '#t '#f) (o2b11@o29b0@install-library 'o51f6 '(rnrs files) '(6) '() '() '() '((delete-file . o511f) (file-exists? . o511e) (make-i/o-write-error . o4b9e) (make-i/o-read-error . o4b89) (make-i/o-port-error . o4c3f) (make-i/o-invalid-position-error . o4bb5) (make-i/o-filename-error . o4bd0) (make-i/o-file-protection-error . o4be9) (make-i/o-file-is-read-only-error . o4bfe) (make-i/o-file-does-not-exist-error . o4c28) (make-i/o-file-already-exists-error . o4c13) (make-i/o-error . o4b74) (i/o-write-error? . o4ba0) (i/o-read-error? . o4b8b) (i/o-port-error? . o4c43) (i/o-invalid-position-error? . o4bb9) (i/o-filename-error? . o4bd4) (i/o-file-protection-error? . o4beb) (i/o-file-is-read-only-error? . o4c00) (i/o-file-does-not-exist-error? . o4c2a) (i/o-file-already-exists-error? . o4c15) (i/o-error? . o4b76) (i/o-error-position . o4bbb) (i/o-error-port . o4c45) (i/o-error-filename . o4bd6) (&i/o-port . o4f2d) (&i/o-file-does-not-exist . o4f2c) (&i/o-file-already-exists . o4f2b) (&i/o-file-is-read-only . o4f2a) (&i/o-file-protection . o4f29) (&i/o-filename . o4f28) (&i/o-invalid-position . o4f27) (&i/o-write . o4f26) (&i/o-read . o4f25) (&i/o . o4f24)) '() values values '#f '#f '#t '#f) (o2b11@o29b0@install-library 'o51f7 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . o511d) (vector-sort . o511c) (list-sort . o511b)) '() values values '#f '#f '#t '#f) (o2b11@o29b0@install-library 'o51f8 '(rnrs base) '(6) '() '() '() '((zero? . o4fd4) (vector? . o4fd3) (vector-set! . o4fd2) (vector-ref . o4fd1) (vector-map . o4fd0) (vector-length . o4fcf) (vector-for-each . o4fce) (vector-fill! . o4fcd) (vector->list . o4fcc) (vector . o4fcb) (values . o4fca) (truncate . o4fc9) (tan . o4fc8) (symbol? . o4fc7) (symbol=? . o4fc6) (symbol->string . o4fc5) (substring . o4fc4) (string? . o4fc3) (string>? . o4fc2) (string>=? . o4fc1) (string=? . o4fc0) (string<? . o4fbf) (string<=? . o4fbe) (string-ref . o4fbd) (string-length . o4fbc) (string-for-each . o4fbb) (string-copy . o4fba) (string-append . o4fb9) (string->symbol . o4fb8) (string->number . o4fb7) (string->list . o4fb6) (string . o4fb5) (sqrt . o4fb4) (sin . o4fb3) (round . o4fb2) (reverse . o4fb1) (real? . o4fb0) (real-valued? . o4faf) (real-part . o4fae) (rationalize . o4fad) (rational? . o4fac) (rational-valued? . o4fab) (procedure? . o4faa) (positive? . o4fa9) (pair? . o4fa8) (odd? . o4fa7) (numerator . o4fa6) (number? . o4fa5) (number->string . o4fa4) (null? . o4fa3) (not . o4fa2) (negative? . o4fa1) (nan? . o4fa0) (min . o4f9f) (max . o4f9e) (map . o4f9d) (make-vector . o4f9c) (make-string . o4f9b) (make-rectangular . o4f9a) (make-polar . o4f99) (magnitude . o4f98) (log . o4f97) (list? . o4f96) (list-tail . o4f95) (list-ref . o4f94) (list->vector . o4f93) (list->string . o4f92) (list . o4f91) (length . o4f90) (lcm . o4f8f) (integer? . o4f8e) (integer-valued? . o4f8d) (integer->char . o4f8c) (infinite? . o4f8b) (inexact? . o4f8a) (inexact . o4f89) (imag-part . o4f88) (gcd . o4f87) (for-each . o4f86) (floor . o4f85) (finite? . o4f84) (expt . o4f83) (exp . o4f82) (exact? . o4f81) (exact-integer-sqrt . o4f80) (exact . o4f7f) (even? . o4f7e) (error . o4f7d) (eqv? . o4f7c) (equal? . o4f7b) (eq? . o4f7a) (dynamic-wind . o4f79) (div0-and-mod0 . o4f78) (mod0 . o4f77) (div0 . o4f76) (div-and-mod . o4f75) (mod . o4f74) (div . o4f73) (denominator . o4f72) (cos . o4f71) (cons . o4f70) (complex? . o4f6f) (char? . o4f6e) (char>? . o4f6d) (char>=? . o4f6c) (char=? . o4f6b) (char<? . o4f6a) (char<=? . o4f69) (char->integer . o4f68) (ceiling . o4f67) (call-with-values . o4f66) (call/cc . o4f65) (call-with-current-continuation . o4f64) (cddddr . o4f63) (cdddar . o4f62) (cddadr . o4f61) (cddaar . o4f60) (cdaddr . o4f5f) (cdadar . o4f5e) (cdaadr . o4f5d) (cdaaar . o4f5c) (cadddr . o4f5b) (caddar . o4f5a) (cadadr . o4f59) (cadaar . o4f58) (caaddr . o4f57) (caadar . o4f56) (caaadr . o4f55) (caaaar . o4f54) (cdddr . o4f53) (cddar . o4f52) (cdadr . o4f51) (cdaar . o4f50) (caddr . o4f4f) (cadar . o4f4e) (caadr . o4f4d) (caaar . o4f4c) (cddr . o4f4b) (cdar . o4f4a) (cadr . o4f49) (caar . o4f48) (cdr . o4f47) (car . o4f46) (boolean? . o4f45) (boolean=? . o4f44) (atan . o4f43) (assertion-violation . o4f42) (asin . o4f41) (apply . o4f40) (append . o4f3f) (angle . o4f3e) (acos . o4f3d) (abs . o4f3c) (/ . o4f3b) (* . o4f3a) (- . o4f39) (+ . o4f38) (>= . o4f37) (> . o4f36) (= . o4f35) (<= . o4f34) (< . o4f33) (unquote-splicing . o4f00) (unquote . o4eff) (_ . o4efe) (else . o4efd) (=> . o4efc) (... . o4efb) (assert . o4efa) (cond . o4ef5) (let* . o4ef4) (let . o4ef3) (let*-values . o4ef2) (let-values . o4ef1) (identifier-syntax . o4ef0) (quasiquote . o4eed) (syntax-rules . o4eec) (case . o4ee7) (or . o4ee3) (and . o4ee2) (if . o4ee1) (letrec* . o4ee0) (letrec . o4edf) (lambda . o4edc) (quote . o4ed9) (letrec-syntax . o4ed7) (let-syntax . o4ed6) (set! . o4ed5) (begin . o4ed3) (define-syntax . o4ed1) (define . o4ed0)) '() values values '#f '#f '#t '#f) (o2b11@o29b0@install-library 'o51f9 '(rnrs lists) '(6) '() '() '() '((remove . o50aa) (remv . o50a9) (remp . o50a8) (remq . o50a7) (partition . o50a6) (memv . o50a5) (memq . o50a4) (memp . o50a3) (member . o50a2) (exists . o50a1) (for-all . o50a0) (fold-right . o509f) (fold-left . o509e) (find . o509d) (filter . o509c) (cons* . o509b) (assv . o509a) (assq . o5099) (assp . o5098) (assoc . o5097)) '() values values '#f '#f '#t '#f) (o2b11@o29b0@install-library 'o51fa '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . o5105) (call-with-input-file . o5104) (write-char . o5103) (write . o5102) (with-output-to-file . o5101) (with-input-from-file . o5100) (read-char . o50ff) (read . o50fe) (peek-char . o50fd) (open-output-file . o50fc) (open-input-file . o50fb) (newline . o50fa) (display . o50f9) (close-output-port . o50f8) (close-input-port . o50f7) (eof-object? . o50f6) (eof-object . o50f5) (current-error-port . o50f4) (current-output-port . o50f3) (current-input-port . o50f2) (output-port? . o50f1) (input-port? . o50f0) (make-i/o-write-error . o4b9e) (make-i/o-read-error . o4b89) (make-i/o-port-error . o4c3f) (make-i/o-invalid-position-error . o4bb5) (make-i/o-filename-error . o4bd0) (make-i/o-file-protection-error . o4be9) (make-i/o-file-is-read-only-error . o4bfe) (make-i/o-file-does-not-exist-error . o4c28) (make-i/o-file-already-exists-error . o4c13) (make-i/o-error . o4b74) (i/o-write-error? . o4ba0) (i/o-read-error? . o4b8b) (i/o-port-error? . o4c43) (i/o-invalid-position-error? . o4bb9) (i/o-filename-error? . o4bd4) (i/o-file-protection-error? . o4beb) (i/o-file-is-read-only-error? . o4c00) (i/o-file-does-not-exist-error? . o4c2a) (i/o-file-already-exists-error? . o4c15) (i/o-error? . o4b76) (i/o-error-position . o4bbb) (i/o-error-port . o4c45) (i/o-error-filename . o4bd6) (&i/o-port . o4f2d) (&i/o-file-does-not-exist . o4f2c) (&i/o-file-already-exists . o4f2b) (&i/o-file-is-read-only . o4f2a) (&i/o-file-protection . o4f29) (&i/o-filename . o4f28) (&i/o-invalid-position . o4f27) (&i/o-write . o4f26) (&i/o-read . o4f25) (&i/o . o4f24)) '() values values '#f '#f '#t '#f) (o2b11@o29b0@install-library 'o51fb '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . o50c6) (utf32->string . o507b) (utf16->string . o507a) (utf8->string . o5079) (uint-list->bytevector . o5078) (u8-list->bytevector . o5077) (string->utf8 . o5076) (string->utf32 . o5075) (string->utf16 . o5074) (sint-list->bytevector . o5073) (native-endianness . o5072) (bytevector? . o5071) (bytevector=? . o5070) (bytevector-uint-set! . o506f) (bytevector-uint-ref . o506e) (bytevector-u8-set! . o506d) (bytevector-u8-ref . o506c) (bytevector-u64-set! . o506b) (bytevector-u64-ref . o506a) (bytevector-u64-native-set! . o5069) (bytevector-u64-native-ref . o5068) (bytevector-u32-set! . o5067) (bytevector-u32-ref . o5066) (bytevector-u32-native-set! . o5065) (bytevector-u32-native-ref . o5064) (bytevector-u16-set! . o5063) (bytevector-u16-ref . o5062) (bytevector-u16-native-set! . o5061) (bytevector-u16-native-ref . o5060) (bytevector-sint-set! . o505f) (bytevector-sint-ref . o505e) (bytevector-s8-set! . o505d) (bytevector-s8-ref . o505c) (bytevector-s64-set! . o505b) (bytevector-s64-ref . o505a) (bytevector-s64-native-set! . o5059) (bytevector-s64-native-ref . o5058) (bytevector-s32-set! . o5057) (bytevector-s32-ref . o5056) (bytevector-s32-native-set! . o5055) (bytevector-s32-native-ref . o5054) (bytevector-s16-set! . o5053) (bytevector-s16-ref . o5052) (bytevector-s16-native-set! . o5051) (bytevector-s16-native-ref . o5050) (bytevector-length . o504f) (bytevector-ieee-single-ref . o504e) (bytevector-ieee-single-set! . o504d) (bytevector-ieee-single-native-set! . o504c) (bytevector-ieee-single-native-ref . o504b) (bytevector-ieee-double-set! . o504a) (bytevector-ieee-double-ref . o5049) (bytevector-ieee-double-native-set! . o5048) (bytevector-ieee-double-native-ref . o5047) (bytevector-fill! . o5046) (bytevector-copy! . o5045) (bytevector-copy . o5044) (bytevector->uint-list . o5043) (bytevector->u8-list . o5042) (bytevector->sint-list . o5041) (endianness . o4ef9)) '() values values '#f '#f '#t '#f) (o2b11@o29b0@install-library 'o51fc '(rnrs unicode) '(6) '() '() '() '((string-upcase . o514d) (string-titlecase . o514c) (string-normalize-nfkd . o514b) (string-normalize-nfkc . o514a) (string-normalize-nfd . o5149) (string-normalize-nfc . o5148) (string-foldcase . o5147) (string-downcase . o5146) (string-ci>? . o5145) (string-ci>=? . o5144) (string-ci=? . o5143) (string-ci<? . o5142) (string-ci<=? . o5141) (char-whitespace? . o5140) (char-upper-case? . o513f) (char-title-case? . o513e) (char-numeric? . o513d) (char-lower-case? . o513c) (char-general-category . o513b) (char-upcase . o513a) (char-titlecase . o5139) (char-foldcase . o5138) (char-downcase . o5137) (char-ci>? . o5136) (char-ci>=? . o5135) (char-ci=? . o5134) (char-ci<? . o5133) (char-ci<=? . o5132) (char-alphabetic? . o5131)) '() values values '#f '#f '#t '#f) (o2b11@o29b0@install-library 'o51fd '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . o5090) (raise-continuable . o508f) (raise . o508e) (guard . o4f05) (else . o4efd) (=> . o4efc)) '() values values '#f '#f '#t '#f) (o2b11@o29b0@install-library 'o51fe '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . o4fe5) (bitwise-reverse-bit-field . o4fe4) (bitwise-length . o4fe3) (bitwise-if . o4fe2) (bitwise-first-bit-set . o4fe1) (bitwise-copy-bit-field . o4fe0) (bitwise-copy-bit . o4fdf) (bitwise-bit-set? . o4fde) (bitwise-bit-field . o4fdd) (bitwise-bit-count . o4fdc) (bitwise-xor . o4fdb) (bitwise-ior . o4fda) (bitwise-and . o4fd9) (bitwise-not . o4fd8) (bitwise-arithmetic-shift-right . o4fd7) (bitwise-arithmetic-shift-left . o4fd6) (bitwise-arithmetic-shift . o4fd5)) '() values values '#f '#f '#t '#f) (o2b11@o29b0@install-library 'o51ff '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . o5012) (fxxor . o5011) (fxrotate-bit-field . o5010) (fxreverse-bit-field . o500f) (fxpositive? . o500e) (fxodd? . o500d) (fxnot . o500c) (fxnegative? . o500b) (fxmod0 . o500a) (fxmod . o5009) (fxmin . o5008) (fxmax . o5007) (fxlength . o5006) (fxior . o5005) (fxif . o5004) (fxfirst-bit-set . o5003) (fxeven? . o5002) (fxdiv0-and-mod0 . o5001) (fxdiv0 . o5000) (fxdiv-and-mod . o4fff) (fxdiv . o4ffe) (fxcopy-bit-field . o4ffd) (fxcopy-bit . o4ffc) (fxbit-set? . o4ffb) (fxbit-field . o4ffa) (fxbit-count . o4ff9) (fxarithmetic-shift-right . o4ff8) (fxarithmetic-shift-left . o4ff7) (fxarithmetic-shift . o4ff6) (fxand . o4ff5) (fx>? . o4ff4) (fx>=? . o4ff3) (fx=? . o4ff2) (fx<? . o4ff1) (fx<=? . o4ff0) (fx-/carry . o4fef) (fx- . o4fee) (fx+/carry . o4fed) (fx+ . o4fec) (fx*/carry . o4feb) (fx* . o4fea) (greatest-fixnum . o4fe9) (least-fixnum . o4fe8) (fixnum-width . o4fe7) (fixnum? . o4fe6)) '() values values '#f '#f '#t '#f) (o2b11@o29b0@install-library 'o5200 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . o4c9f) (no-infinities-violation? . o4c8a) (make-no-nans-violation . o4c9d) (make-no-infinities-violation . o4c88) (real->flonum . o5040) (flzero? . o503f) (fltruncate . o503e) (fltan . o503d) (flsqrt . o503c) (flsin . o503b) (flround . o503a) (flpositive? . o5039) (flonum? . o5038) (flodd? . o5037) (flnumerator . o5036) (flnegative? . o5035) (flnan? . o5034) (flmod0 . o5033) (flmod . o5032) (flmin . o5031) (flmax . o5030) (fllog . o502f) (flinteger? . o502e) (flinfinite? . o502d) (flfloor . o502c) (flfinite? . o502b) (flexpt . o502a) (flexp . o5029) (fleven? . o5028) (fldiv0-and-mod0 . o5027) (fldiv0 . o5026) (fldiv-and-mod . o5025) (fldiv . o5024) (fldenominator . o5023) (flcos . o5022) (flceiling . o5021) (flatan . o5020) (flasin . o501f) (flacos . o501e) (flabs . o501d) (fl>? . o501c) (fl>=? . o501b) (fl=? . o501a) (fl<? . o5019) (fl<=? . o5018) (fl/ . o5017) (fl- . o5016) (fl+ . o5015) (fl* . o5014) (fixnum->flonum . o5013) (&no-nans . o4f31) (&no-infinities . o4f30)) '() values values '#f '#f '#t '#f) (o2b11@o29b0@install-library 'o5201 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . o511a) (string-ci-hash . o5119) (string-hash . o5118) (equal-hash . o5117) (hashtable-equivalence-function . o5116) (make-hashtable . o5115) (hashtable-hash-function . o5114) (make-eqv-hashtable . o5113) (make-eq-hashtable . o5112) (hashtable? . o5111) (hashtable-update! . o5110) (hashtable-size . o510f) (hashtable-set! . o510e) (hashtable-ref . o510d) (hashtable-mutable? . o510c) (hashtable-keys . o510b) (hashtable-entries . o510a) (hashtable-delete! . o5109) (hashtable-copy . o5108) (hashtable-contains? . o5107) (hashtable-clear! . o5106)) '() values values '#f '#f '#t '#f) (o2b11@o29b0@install-library 'o5202 '(rnrs io ports) '(6) '() '() '() '((eof-object? . o50f6) (eof-object . o50f5) (current-error-port . o50f4) (current-output-port . o50f3) (current-input-port . o50f2) (output-port? . o50f1) (input-port? . o50f0) (utf-8-codec . o50ef) (utf-16-codec . o50ee) (transcoder-error-handling-mode . o50ed) (transcoder-eol-style . o50ec) (transcoder-codec . o50eb) (transcoded-port . o50ea) (textual-port? . o50e9) (string->bytevector . o50e8) (standard-output-port . o50e7) (standard-input-port . o50e6) (standard-error-port . o50e5) (set-port-position! . o50e4) (put-u8 . o50e3) (put-string . o50e2) (put-datum . o50e1) (put-char . o50e0) (put-bytevector . o50df) (port? . o50de) (port-transcoder . o50dd) (port-position . o50dc) (port-has-set-port-position!? . o50db) (port-has-port-position? . o50da) (port-eof? . o50d9) (output-port-buffer-mode . o50d8) (open-string-output-port . o50d7) (open-string-input-port . o50d6) (open-file-output-port . o50d5) (open-file-input/output-port . o50d4) (open-file-input-port . o50d3) (open-bytevector-output-port . o50d2) (open-bytevector-input-port . o50d1) (native-transcoder . o50d0) (native-eol-style . o50cf) (make-transcoder . o50ce) (latin-1-codec . o50cd) (make-i/o-write-error . o4b9e) (make-i/o-read-error . o4b89) (make-i/o-port-error . o4c3f) (make-i/o-invalid-position-error . o4bb5) (make-i/o-filename-error . o4bd0) (make-i/o-file-protection-error . o4be9) (make-i/o-file-is-read-only-error . o4bfe) (make-i/o-file-does-not-exist-error . o4c28) (make-i/o-file-already-exists-error . o4c13) (make-i/o-error . o4b74) (make-i/o-encoding-error . o4c6f) (make-i/o-decoding-error . o4c58) (make-custom-textual-output-port . o50cc) (make-custom-textual-input/output-port . o50cb) (make-custom-textual-input-port . o50ca) (make-custom-binary-output-port . o50c9) (make-custom-binary-input/output-port . o50c8) (make-custom-binary-input-port . o50c7) (lookahead-u8 . o50c5) (lookahead-char . o50c4) (i/o-write-error? . o4ba0) (i/o-read-error? . o4b8b) (i/o-port-error? . o4c43) (i/o-invalid-position-error? . o4bb9) (i/o-filename-error? . o4bd4) (i/o-file-protection-error? . o4beb) (i/o-file-is-read-only-error? . o4c00) (i/o-file-does-not-exist-error? . o4c2a) (i/o-file-already-exists-error? . o4c15) (i/o-error? . o4b76) (i/o-error-position . o4bbb) (i/o-error-port . o4c45) (i/o-error-filename . o4bd6) (i/o-encoding-error? . o4c73) (i/o-encoding-error-char . o4c75) (i/o-decoding-error? . o4c5a) (get-u8 . o50c3) (get-string-n! . o50c2) (get-string-n . o50c1) (get-string-all . o50c0) (get-line . o50bf) (get-datum . o50be) (get-char . o50bd) (get-bytevector-some . o50bc) (get-bytevector-n! . o50bb) (get-bytevector-n . o50ba) (get-bytevector-all . o50b9) (flush-output-port . o50b8) (close-port . o50b7) (call-with-string-output-port . o5096) (call-with-port . o5095) (call-with-bytevector-output-port . o5094) (bytevector->string . o5093) (buffer-mode? . o5092) (binary-port? . o5091) (&i/o-encoding . o4f2f) (&i/o-decoding . o4f2e) (&i/o-port . o4f2d) (&i/o-file-does-not-exist . o4f2c) (&i/o-file-already-exists . o4f2b) (&i/o-file-is-read-only . o4f2a) (&i/o-file-protection . o4f29) (&i/o-filename . o4f28) (&i/o-invalid-position . o4f27) (&i/o-write . o4f26) (&i/o-read . o4f25) (&i/o . o4f24) (error-handling-mode . o4f09) (file-options . o4f08) (buffer-mode . o4f07) (eol-style . o4f06)) '() values values '#f '#f '#t '#f) (o2b11@o29b0@install-library 'o5203 '(rnrs enums) '(6) '() '() '() '((make-enumeration . o508d) (enum-set=? . o508c) (enum-set-universe . o508b) (enum-set-union . o508a) (enum-set-subset? . o5089) (enum-set-projection . o5088) (enum-set-member? . o5087) (enum-set-intersection . o5086) (enum-set-indexer . o5085) (enum-set-difference . o5084) (enum-set-constructor . o5083) (enum-set-complement . o5082) (enum-set->list . o5081) (define-enumeration . o4f14)) '() values values '#f '#f '#t '#f) (o2b11@o29b0@install-library 'o5204 '(rnrs conditions) '(6) '() '() '() '((who-condition? . o4aea) (warning? . o4a62) (violation? . o4aa1) (undefined-violation? . o4b61) (syntax-violation? . o4b48) (syntax-violation-subform . o4b4c) (syntax-violation-form . o4b4a) (syntax-violation . o2fe2) (simple-conditions . o5080) (serious-condition? . o4a77) (non-continuable-violation? . o4b01) (message-condition? . o4a4b) (make-who-condition . o4ae6) (make-warning . o4a60) (make-violation . o4a9f) (make-undefined-violation . o4b5f) (make-syntax-violation . o4b42) (make-serious-condition . o4a75) (make-non-continuable-violation . o4aff) (make-message-condition . o4a47) (make-lexical-violation . o4b29) (make-irritants-condition . o4acb) (make-implementation-restriction-violation . o4b14) (make-error . o4a8a) (make-assertion-violation . o4ab4) (lexical-violation? . o4b2b) (irritants-condition? . o4acf) (implementation-restriction-violation? . o4b16) (error? . o4a8c) (condition-who . o4aec) (condition-predicate . o507f) (condition-message . o4a4d) (condition-irritants . o4ad1) (condition-accessor . o507e) (condition . o507d) (assertion-violation? . o4ab6) (condition? . o507c) (&undefined . o4f23) (&syntax . o4f22) (&lexical . o4f21) (&implementation-restriction . o4f20) (&non-continuable . o4f1f) (&who . o4f1e) (&irritants . o4f1d) (&assertion . o4f1c) (&violation . o4f1b) (&error . o4f1a) (&serious . o4f19) (&warning . o4f18) (&message . o4f17) (&condition . o4f16) (define-condition-type . o4f15)) '() values values '#f '#f '#t '#f) (o2b11@o29b0@install-library 'o5205 '(rnrs records inspection) '(6) '() '() '() '((record? . o5129) (record-type-uid . o5128) (record-type-sealed? . o5127) (record-type-parent . o5126) (record-type-opaque? . o5125) (record-type-name . o5124) (record-type-generative? . o5123) (record-type-field-names . o5122) (record-rtd . o5121) (record-field-mutable? . o5120)) '() values values '#f '#f '#t '#f) (o2b11@o29b0@install-library 'o5206 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . o5130) (record-predicate . o512f) (record-mutator . o512e) (record-constructor . o512d) (record-accessor . o512c) (make-record-type-descriptor . o512b) (make-record-constructor-descriptor . o512a)) '() values values '#f '#f '#t '#f) (o2b11@o29b0@install-library 'o5207 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . o4f13) (parent-rtd . o4f12) (nongenerative . o4f11) (opaque . o4f10) (sealed . o4f0f) (protocol . o4f0e) (parent . o4f0d) (immutable . o4f0c) (mutable . o4f0b) (fields . o4f0a) (record-constructor-descriptor . o4ee9) (record-type-descriptor . o4ee8)) '() values values '#f '#f '#t '#f) (o2b11@o29b0@install-library 'o5208 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . o4ca3) (&no-nans-rtd . o4ca1) (&no-infinities-rcd . o4c8e) (&no-infinities-rtd . o4c8c) (&i/o-encoding-rcd . o4c79) (&i/o-encoding-rtd . o4c77) (&i/o-decoding-rcd . o4c5e) (&i/o-decoding-rtd . o4c5c) (&i/o-port-rcd . o4c49) (&i/o-port-rtd . o4c47) (&i/o-file-does-not-exist-rcd . o4c2e) (&i/o-file-does-not-exist-rtd . o4c2c) (&i/o-file-already-exists-rcd . o4c19) (&i/o-file-already-exists-rtd . o4c17) (&i/o-file-is-read-only-rcd . o4c04) (&i/o-file-is-read-only-rtd . o4c02) (&i/o-file-protection-rcd . o4bef) (&i/o-file-protection-rtd . o4bed) (&i/o-filename-rcd . o4bda) (&i/o-filename-rtd . o4bd8) (&i/o-invalid-position-rcd . o4bbf) (&i/o-invalid-position-rtd . o4bbd) (&i/o-write-rcd . o4ba4) (&i/o-write-rtd . o4ba2) (&i/o-read-rcd . o4b8f) (&i/o-read-rtd . o4b8d) (&i/o-rcd . o4b7a) (&i/o-rtd . o4b78) (&undefined-rcd . o4b65) (&undefined-rtd . o4b63) (&syntax-rcd . o4b50) (&syntax-rtd . o4b4e) (&lexical-rcd . o4b2f) (&lexical-rtd . o4b2d) (&implementation-restriction-rcd . o4b1a) (&implementation-restriction-rtd . o4b18) (&non-continuable-rcd . o4b05) (&non-continuable-rtd . o4b03) (&who-rcd . o4af0) (&who-rtd . o4aee) (&irritants-rcd . o4ad5) (&irritants-rtd . o4ad3) (&assertion-rcd . o4aba) (&assertion-rtd . o4ab8) (&violation-rcd . o4aa5) (&violation-rtd . o4aa3) (&error-rcd . o4a90) (&error-rtd . o4a8e) (&serious-rcd . o4a7b) (&serious-rtd . o4a79) (&warning-rcd . o4a66) (&warning-rtd . o4a64) (&message-rcd . o4a51) (&message-rtd . o4a4f) (&condition-rcd . o49f2) (&condition-rtd . o49f0) (syntax-error . o2fde) (syntax-dispatch . o2ef9) (pretty-print . o51e8) (eval-core . o51e7) (set-symbol-value! . o51e6) (symbol-value . o51e5) (gensym . o51e4) (void . o51e3) (load . o4db0) (interaction-environment . o2fee) (char-ready? . o51e2) (regexp? . o51e1) (read-line . o51e0) (ungensym . o51df) (alist->eq-hash-table . o51de) (assoc-ref . o51dd) (print . o51dc) (format . o51db) (host-os . o51da) (library-path . o298f) (standard-library-path . o51d9) (file-newer? . o51d8) (stat-mtime . o51d7) (write-to-file . o51d6) (file->list . o51d5) (file->string . o51d4) (digit->integer . o51d3) (call-with-string-input-port . o51d2) (call-with-string-io . o51d1) (string-split . o51d0) (bytevector-for-each . o51cf) (string->regexp . o51ce) (rxmatch . o51cd) (regexp-replace-all . o51cc) (hashtable-for-each . o51cb) (call-process . o51ca) (local-tz-offset . o51c9) (microseconds . o51c8) (directory-list . o51c7) (set-current-directory! . o51c6) (expand-path . o51c5) (current-directory . o51c4) (%spawn . o51c3) (%waitpid . o51c2) (pointer-ref-c-int64 . o51c1) (pointer-ref-c-int32 . o51c0) (pointer-ref-c-int16 . o51bf) (pointer-ref-c-int8 . o51be) (pointer-ref-c-uint64 . o51bd) (pointer-ref-c-uint32 . o51bc) (pointer-ref-c-uint16 . o51bb) (pointer-ref-c-uint8 . o51ba) (pointer-set-c-uint64! . o51b9) (pointer-set-c-uint32! . o51b8) (pointer-set-c-uint16! . o51b7) (pointer-set-c-uint8! . o51b6) (pointer-set-c-int64! . o51b5) (pointer-set-c-int32! . o51b4) (pointer-set-c-int16! . o51b3) (pointer-set-c-int8! . o51b2) (pointer-set-c-pointer! . o51b1) (pointer-set-c-double! . o51b0) (pointer-set-c-float! . o51af) (pointer-set-c-long-long! . o51ae) (pointer-set-c-long! . o51ad) (pointer-set-c-int! . o51ac) (pointer-set-c-short! . o51ab) (pointer-set-c-char! . o51aa) (pointer-ref-c-pointer . o51a9) (pointer-ref-c-double . o51a8) (pointer-ref-c-float . o51a7) (pointer-ref-c-unsigned-long-long . o51a6) (pointer-ref-c-signed-long-long . o51a5) (pointer-ref-c-unsigned-long . o51a4) (pointer-ref-c-signed-long . o51a3) (pointer-ref-c-unsigned-int . o51a2) (pointer-ref-c-signed-int . o51a1) (pointer-ref-c-unsigned-short . o51a0) (pointer-ref-c-signed-short . o519f) (pointer-ref-c-unsigned-char . o519e) (pointer-ref-c-signed-char . o519d) (pointer->integer . o519c) (integer->pointer . o519b) (pointer? . o519a) (shared-errno . o5199) (%ffi-supported? . o5198) (%ffi-pointer->string . o5197) (%ffi-call->string-or-zero . o5196) (%ffi-call->double . o5195) (%ffi-call->void* . o5194) (%ffi-call->void . o5193) (%ffi-call->char . o5192) (%ffi-call->int . o5191) (%ffi-lookup . o5190) (%ffi-open . o518f) (%fork . o518e) (%pipe . o518d) (p . o518c) (open-output-string . o518b) (get-output-string . o518a) (file-stat-ctime . o5189) (file-stat-atime . o5188) (file-stat-mtime . o5187) (file-size-in-bytes . o5186) (file-writable? . o5185) (file-executable? . o5184) (file-readable? . o5183) (file-regular? . o5182) (file-symbolic-link? . o5181) (file-directory? . o5180) (create-symbolic-link . o517f) (rename-file . o517e) (delete-directory . o517d) (create-directory . o517c) (get-environment-variables . o517b) (get-environment-variable . o517a) (get-timeofday . o5179) (get-command-line . o5178) (sys-display . o5177) (whereis . o5176) (register . o5175) (vm-join! . o5174) (vm-set-value! . o5173) (vm? . o5172) (main-vm? . o5171) (vm-eval . o5170) (vm-self . o516f) (vm-start! . o516e) (make-vm . o516d) (mutex-try-lock! . o516c) (mutex-unlock! . o516b) (mutex-lock! . o516a) (mutex? . o5169) (make-mutex . o5168) (condition-variable-notify-all! . o5167) (condition-variable-notify! . o5166) (condition-variable-wait! . o5165) (make-condition-variable . o5164) (mosh-executable-path . o5163) (make-file-options . o5162) (source-info . o5161) (make-compiler-instruction . o5160) (make-instruction . o515f) (set-source-info! . o515e) (bignum? . o515d) (fast-equal? . o515c) (fasl-read . o515b) (fasl-write . o515a) (time-usage . o5159) (os-constant . o5158) (make-parameter . o27c2) (socket-port . o5157) (socket-shutdown . o5156) (socket-close . o5155) (socket-send . o5154) (socket-recv! . o5153) (socket-recv . o5152) (make-server-socket . o5151) (make-client-socket . o5150) (socket-accept . o514f) (socket? . o514e) (string-upcase . o514d) (string-titlecase . o514c) (string-normalize-nfkd . o514b) (string-normalize-nfkc . o514a) (string-normalize-nfd . o5149) (string-normalize-nfc . o5148) (string-foldcase . o5147) (string-downcase . o5146) (string-ci>? . o5145) (string-ci>=? . o5144) (string-ci=? . o5143) (string-ci<? . o5142) (string-ci<=? . o5141) (char-whitespace? . o5140) (char-upper-case? . o513f) (char-title-case? . o513e) (char-numeric? . o513d) (char-lower-case? . o513c) (char-general-category . o513b) (char-upcase . o513a) (char-titlecase . o5139) (char-foldcase . o5138) (char-downcase . o5137) (char-ci>? . o5136) (char-ci>=? . o5135) (char-ci=? . o5134) (char-ci<? . o5133) (char-ci<=? . o5132) (char-alphabetic? . o5131) (make-variable-transformer . o2d26) (identifier? . o2fe4) (generate-temporaries . o2fd0) (free-identifier=? . o2fd2) (syntax->datum . o2fe8) (datum->syntax . o2fe6) (bound-identifier=? . o2fd4) (record-type-descriptor? . o5130) (record-predicate . o512f) (record-mutator . o512e) (record-constructor . o512d) (record-accessor . o512c) (make-record-type-descriptor . o512b) (make-record-constructor-descriptor . o512a) (record? . o5129) (record-type-uid . o5128) (record-type-sealed? . o5127) (record-type-parent . o5126) (record-type-opaque? . o5125) (record-type-name . o5124) (record-type-generative? . o5123) (record-type-field-names . o5122) (record-rtd . o5121) (record-field-mutable? . o5120) (delete-file . o511f) (file-exists? . o511e) (vector-sort! . o511d) (vector-sort . o511c) (list-sort . o511b) (symbol-hash . o511a) (string-ci-hash . o5119) (string-hash . o5118) (equal-hash . o5117) (hashtable-equivalence-function . o5116) (make-hashtable . o5115) (hashtable-hash-function . o5114) (make-eqv-hashtable . o5113) (make-eq-hashtable . o5112) (hashtable? . o5111) (hashtable-update! . o5110) (hashtable-size . o510f) (hashtable-set! . o510e) (hashtable-ref . o510d) (hashtable-mutable? . o510c) (hashtable-keys . o510b) (hashtable-entries . o510a) (hashtable-delete! . o5109) (hashtable-copy . o5108) (hashtable-contains? . o5107) (hashtable-clear! . o5106) (call-with-output-file . o5105) (call-with-input-file . o5104) (write-char . o5103) (write . o5102) (with-output-to-file . o5101) (with-input-from-file . o5100) (read-char . o50ff) (read . o50fe) (peek-char . o50fd) (open-output-file . o50fc) (open-input-file . o50fb) (newline . o50fa) (display . o50f9) (close-output-port . o50f8) (close-input-port . o50f7) (eof-object? . o50f6) (eof-object . o50f5) (current-error-port . o50f4) (current-output-port . o50f3) (current-input-port . o50f2) (output-port? . o50f1) (input-port? . o50f0) (utf-8-codec . o50ef) (utf-16-codec . o50ee) (transcoder-error-handling-mode . o50ed) (transcoder-eol-style . o50ec) (transcoder-codec . o50eb) (transcoded-port . o50ea) (textual-port? . o50e9) (string->bytevector . o50e8) (standard-output-port . o50e7) (standard-input-port . o50e6) (standard-error-port . o50e5) (set-port-position! . o50e4) (put-u8 . o50e3) (put-string . o50e2) (put-datum . o50e1) (put-char . o50e0) (put-bytevector . o50df) (port? . o50de) (port-transcoder . o50dd) (port-position . o50dc) (port-has-set-port-position!? . o50db) (port-has-port-position? . o50da) (port-eof? . o50d9) (output-port-buffer-mode . o50d8) (open-string-output-port . o50d7) (open-string-input-port . o50d6) (open-file-output-port . o50d5) (open-file-input/output-port . o50d4) (open-file-input-port . o50d3) (open-bytevector-output-port . o50d2) (open-bytevector-input-port . o50d1) (native-transcoder . o50d0) (native-eol-style . o50cf) (make-transcoder . o50ce) (latin-1-codec . o50cd) (make-i/o-write-error . o4b9e) (make-i/o-read-error . o4b89) (make-i/o-port-error . o4c3f) (make-i/o-invalid-position-error . o4bb5) (make-i/o-filename-error . o4bd0) (make-i/o-file-protection-error . o4be9) (make-i/o-file-is-read-only-error . o4bfe) (make-i/o-file-does-not-exist-error . o4c28) (make-i/o-file-already-exists-error . o4c13) (make-i/o-error . o4b74) (make-i/o-encoding-error . o4c6f) (make-i/o-decoding-error . o4c58) (make-custom-textual-output-port . o50cc) (make-custom-textual-input/output-port . o50cb) (make-custom-textual-input-port . o50ca) (make-custom-binary-output-port . o50c9) (make-custom-binary-input/output-port . o50c8) (make-custom-binary-input-port . o50c7) (make-bytevector . o50c6) (lookahead-u8 . o50c5) (lookahead-char . o50c4) (i/o-write-error? . o4ba0) (i/o-read-error? . o4b8b) (i/o-port-error? . o4c43) (i/o-invalid-position-error? . o4bb9) (i/o-filename-error? . o4bd4) (i/o-file-protection-error? . o4beb) (i/o-file-is-read-only-error? . o4c00) (i/o-file-does-not-exist-error? . o4c2a) (i/o-file-already-exists-error? . o4c15) (i/o-error? . o4b76) (i/o-error-position . o4bbb) (i/o-error-port . o4c45) (i/o-error-filename . o4bd6) (i/o-encoding-error? . o4c73) (i/o-encoding-error-char . o4c75) (i/o-decoding-error? . o4c5a) (get-u8 . o50c3) (get-string-n! . o50c2) (get-string-n . o50c1) (get-string-all . o50c0) (get-line . o50bf) (get-datum . o50be) (get-char . o50bd) (get-bytevector-some . o50bc) (get-bytevector-n! . o50bb) (get-bytevector-n . o50ba) (get-bytevector-all . o50b9) (flush-output-port . o50b8) (close-port . o50b7) (scheme-report-environment . o2fbe) (quotient . o50b6) (null-environment . o2fbc) (remainder . o50b5) (modulo . o50b4) (inexact->exact . o50b3) (force . o50b2) (exact->inexact . o50b1) (make-promise . o50b0) (exit . o50af) (command-line . o4daa) (string-fill! . o50ae) (string-set! . o50ad) (set-cdr! . o50ac) (set-car! . o50ab) (remove . o50aa) (remv . o50a9) (remp . o50a8) (remq . o50a7) (partition . o50a6) (memv . o50a5) (memq . o50a4) (memp . o50a3) (member . o50a2) (exists . o50a1) (for-all . o50a0) (fold-right . o509f) (fold-left . o509e) (find . o509d) (filter . o509c) (cons* . o509b) (assv . o509a) (assq . o5099) (assp . o5098) (assoc . o5097) (call-with-string-output-port . o5096) (call-with-port . o5095) (call-with-bytevector-output-port . o5094) (bytevector->string . o5093) (buffer-mode? . o5092) (binary-port? . o5091) (with-exception-handler . o5090) (raise-continuable . o508f) (raise . o508e) (eval . o2fc2) (environment . o2fba) (make-enumeration . o508d) (enum-set=? . o508c) (enum-set-universe . o508b) (enum-set-union . o508a) (enum-set-subset? . o5089) (enum-set-projection . o5088) (enum-set-member? . o5087) (enum-set-intersection . o5086) (enum-set-indexer . o5085) (enum-set-difference . o5084) (enum-set-constructor . o5083) (enum-set-complement . o5082) (enum-set->list . o5081) (who-condition? . o4aea) (warning? . o4a62) (violation? . o4aa1) (undefined-violation? . o4b61) (syntax-violation? . o4b48) (syntax-violation-subform . o4b4c) (syntax-violation-form . o4b4a) (syntax-violation . o2fe2) (simple-conditions . o5080) (serious-condition? . o4a77) (non-continuable-violation? . o4b01) (message-condition? . o4a4b) (make-who-condition . o4ae6) (make-warning . o4a60) (make-violation . o4a9f) (make-undefined-violation . o4b5f) (make-syntax-violation . o4b42) (make-serious-condition . o4a75) (make-non-continuable-violation . o4aff) (make-message-condition . o4a47) (make-lexical-violation . o4b29) (make-irritants-condition . o4acb) (make-implementation-restriction-violation . o4b14) (make-error . o4a8a) (make-assertion-violation . o4ab4) (lexical-violation? . o4b2b) (irritants-condition? . o4acf) (implementation-restriction-violation? . o4b16) (error? . o4a8c) (condition-who . o4aec) (condition-predicate . o507f) (condition-message . o4a4d) (condition-irritants . o4ad1) (condition-accessor . o507e) (condition . o507d) (assertion-violation? . o4ab6) (condition? . o507c) (utf32->string . o507b) (utf16->string . o507a) (utf8->string . o5079) (uint-list->bytevector . o5078) (u8-list->bytevector . o5077) (string->utf8 . o5076) (string->utf32 . o5075) (string->utf16 . o5074) (sint-list->bytevector . o5073) (native-endianness . o5072) (bytevector? . o5071) (bytevector=? . o5070) (bytevector-uint-set! . o506f) (bytevector-uint-ref . o506e) (bytevector-u8-set! . o506d) (bytevector-u8-ref . o506c) (bytevector-u64-set! . o506b) (bytevector-u64-ref . o506a) (bytevector-u64-native-set! . o5069) (bytevector-u64-native-ref . o5068) (bytevector-u32-set! . o5067) (bytevector-u32-ref . o5066) (bytevector-u32-native-set! . o5065) (bytevector-u32-native-ref . o5064) (bytevector-u16-set! . o5063) (bytevector-u16-ref . o5062) (bytevector-u16-native-set! . o5061) (bytevector-u16-native-ref . o5060) (bytevector-sint-set! . o505f) (bytevector-sint-ref . o505e) (bytevector-s8-set! . o505d) (bytevector-s8-ref . o505c) (bytevector-s64-set! . o505b) (bytevector-s64-ref . o505a) (bytevector-s64-native-set! . o5059) (bytevector-s64-native-ref . o5058) (bytevector-s32-set! . o5057) (bytevector-s32-ref . o5056) (bytevector-s32-native-set! . o5055) (bytevector-s32-native-ref . o5054) (bytevector-s16-set! . o5053) (bytevector-s16-ref . o5052) (bytevector-s16-native-set! . o5051) (bytevector-s16-native-ref . o5050) (bytevector-length . o504f) (bytevector-ieee-single-ref . o504e) (bytevector-ieee-single-set! . o504d) (bytevector-ieee-single-native-set! . o504c) (bytevector-ieee-single-native-ref . o504b) (bytevector-ieee-double-set! . o504a) (bytevector-ieee-double-ref . o5049) (bytevector-ieee-double-native-set! . o5048) (bytevector-ieee-double-native-ref . o5047) (bytevector-fill! . o5046) (bytevector-copy! . o5045) (bytevector-copy . o5044) (bytevector->uint-list . o5043) (bytevector->u8-list . o5042) (bytevector->sint-list . o5041) (no-nans-violation? . o4c9f) (no-infinities-violation? . o4c8a) (make-no-nans-violation . o4c9d) (make-no-infinities-violation . o4c88) (real->flonum . o5040) (flzero? . o503f) (fltruncate . o503e) (fltan . o503d) (flsqrt . o503c) (flsin . o503b) (flround . o503a) (flpositive? . o5039) (flonum? . o5038) (flodd? . o5037) (flnumerator . o5036) (flnegative? . o5035) (flnan? . o5034) (flmod0 . o5033) (flmod . o5032) (flmin . o5031) (flmax . o5030) (fllog . o502f) (flinteger? . o502e) (flinfinite? . o502d) (flfloor . o502c) (flfinite? . o502b) (flexpt . o502a) (flexp . o5029) (fleven? . o5028) (fldiv0-and-mod0 . o5027) (fldiv0 . o5026) (fldiv-and-mod . o5025) (fldiv . o5024) (fldenominator . o5023) (flcos . o5022) (flceiling . o5021) (flatan . o5020) (flasin . o501f) (flacos . o501e) (flabs . o501d) (fl>? . o501c) (fl>=? . o501b) (fl=? . o501a) (fl<? . o5019) (fl<=? . o5018) (fl/ . o5017) (fl- . o5016) (fl+ . o5015) (fl* . o5014) (fixnum->flonum . o5013) (fxzero? . o5012) (fxxor . o5011) (fxrotate-bit-field . o5010) (fxreverse-bit-field . o500f) (fxpositive? . o500e) (fxodd? . o500d) (fxnot . o500c) (fxnegative? . o500b) (fxmod0 . o500a) (fxmod . o5009) (fxmin . o5008) (fxmax . o5007) (fxlength . o5006) (fxior . o5005) (fxif . o5004) (fxfirst-bit-set . o5003) (fxeven? . o5002) (fxdiv0-and-mod0 . o5001) (fxdiv0 . o5000) (fxdiv-and-mod . o4fff) (fxdiv . o4ffe) (fxcopy-bit-field . o4ffd) (fxcopy-bit . o4ffc) (fxbit-set? . o4ffb) (fxbit-field . o4ffa) (fxbit-count . o4ff9) (fxarithmetic-shift-right . o4ff8) (fxarithmetic-shift-left . o4ff7) (fxarithmetic-shift . o4ff6) (fxand . o4ff5) (fx>? . o4ff4) (fx>=? . o4ff3) (fx=? . o4ff2) (fx<? . o4ff1) (fx<=? . o4ff0) (fx-/carry . o4fef) (fx- . o4fee) (fx+/carry . o4fed) (fx+ . o4fec) (fx*/carry . o4feb) (fx* . o4fea) (greatest-fixnum . o4fe9) (least-fixnum . o4fe8) (fixnum-width . o4fe7) (fixnum? . o4fe6) (bitwise-rotate-bit-field . o4fe5) (bitwise-reverse-bit-field . o4fe4) (bitwise-length . o4fe3) (bitwise-if . o4fe2) (bitwise-first-bit-set . o4fe1) (bitwise-copy-bit-field . o4fe0) (bitwise-copy-bit . o4fdf) (bitwise-bit-set? . o4fde) (bitwise-bit-field . o4fdd) (bitwise-bit-count . o4fdc) (bitwise-xor . o4fdb) (bitwise-ior . o4fda) (bitwise-and . o4fd9) (bitwise-not . o4fd8) (bitwise-arithmetic-shift-right . o4fd7) (bitwise-arithmetic-shift-left . o4fd6) (bitwise-arithmetic-shift . o4fd5) (zero? . o4fd4) (vector? . o4fd3) (vector-set! . o4fd2) (vector-ref . o4fd1) (vector-map . o4fd0) (vector-length . o4fcf) (vector-for-each . o4fce) (vector-fill! . o4fcd) (vector->list . o4fcc) (vector . o4fcb) (values . o4fca) (truncate . o4fc9) (tan . o4fc8) (symbol? . o4fc7) (symbol=? . o4fc6) (symbol->string . o4fc5) (substring . o4fc4) (string? . o4fc3) (string>? . o4fc2) (string>=? . o4fc1) (string=? . o4fc0) (string<? . o4fbf) (string<=? . o4fbe) (string-ref . o4fbd) (string-length . o4fbc) (string-for-each . o4fbb) (string-copy . o4fba) (string-append . o4fb9) (string->symbol . o4fb8) (string->number . o4fb7) (string->list . o4fb6) (string . o4fb5) (sqrt . o4fb4) (sin . o4fb3) (round . o4fb2) (reverse . o4fb1) (real? . o4fb0) (real-valued? . o4faf) (real-part . o4fae) (rationalize . o4fad) (rational? . o4fac) (rational-valued? . o4fab) (procedure? . o4faa) (positive? . o4fa9) (pair? . o4fa8) (odd? . o4fa7) (numerator . o4fa6) (number? . o4fa5) (number->string . o4fa4) (null? . o4fa3) (not . o4fa2) (negative? . o4fa1) (nan? . o4fa0) (min . o4f9f) (max . o4f9e) (map . o4f9d) (make-vector . o4f9c) (make-string . o4f9b) (make-rectangular . o4f9a) (make-polar . o4f99) (magnitude . o4f98) (log . o4f97) (list? . o4f96) (list-tail . o4f95) (list-ref . o4f94) (list->vector . o4f93) (list->string . o4f92) (list . o4f91) (length . o4f90) (lcm . o4f8f) (integer? . o4f8e) (integer-valued? . o4f8d) (integer->char . o4f8c) (infinite? . o4f8b) (inexact? . o4f8a) (inexact . o4f89) (imag-part . o4f88) (gcd . o4f87) (for-each . o4f86) (floor . o4f85) (finite? . o4f84) (expt . o4f83) (exp . o4f82) (exact? . o4f81) (exact-integer-sqrt . o4f80) (exact . o4f7f) (even? . o4f7e) (error . o4f7d) (eqv? . o4f7c) (equal? . o4f7b) (eq? . o4f7a) (dynamic-wind . o4f79) (div0-and-mod0 . o4f78) (mod0 . o4f77) (div0 . o4f76) (div-and-mod . o4f75) (mod . o4f74) (div . o4f73) (denominator . o4f72) (cos . o4f71) (cons . o4f70) (complex? . o4f6f) (char? . o4f6e) (char>? . o4f6d) (char>=? . o4f6c) (char=? . o4f6b) (char<? . o4f6a) (char<=? . o4f69) (char->integer . o4f68) (ceiling . o4f67) (call-with-values . o4f66) (call/cc . o4f65) (call-with-current-continuation . o4f64) (cddddr . o4f63) (cdddar . o4f62) (cddadr . o4f61) (cddaar . o4f60) (cdaddr . o4f5f) (cdadar . o4f5e) (cdaadr . o4f5d) (cdaaar . o4f5c) (cadddr . o4f5b) (caddar . o4f5a) (cadadr . o4f59) (cadaar . o4f58) (caaddr . o4f57) (caadar . o4f56) (caaadr . o4f55) (caaaar . o4f54) (cdddr . o4f53) (cddar . o4f52) (cdadr . o4f51) (cdaar . o4f50) (caddr . o4f4f) (cadar . o4f4e) (caadr . o4f4d) (caaar . o4f4c) (cddr . o4f4b) (cdar . o4f4a) (cadr . o4f49) (caar . o4f48) (cdr . o4f47) (car . o4f46) (boolean? . o4f45) (boolean=? . o4f44) (atan . o4f43) (assertion-violation . o4f42) (assertion-error . o2fdc) (asin . o4f41) (apply . o4f40) (append . o4f3f) (angle . o4f3e) (acos . o4f3d) (abs . o4f3c) (/ . o4f3b) (* . o4f3a) (- . o4f39) (+ . o4f38) (>= . o4f37) (> . o4f36) (= . o4f35) (<= . o4f34) (< . o4f33) (library . o4f32) (&no-nans . o4f31) (&no-infinities . o4f30) (&i/o-encoding . o4f2f) (&i/o-decoding . o4f2e) (&i/o-port . o4f2d) (&i/o-file-does-not-exist . o4f2c) (&i/o-file-already-exists . o4f2b) (&i/o-file-is-read-only . o4f2a) (&i/o-file-protection . o4f29) (&i/o-filename . o4f28) (&i/o-invalid-position . o4f27) (&i/o-write . o4f26) (&i/o-read . o4f25) (&i/o . o4f24) (&undefined . o4f23) (&syntax . o4f22) (&lexical . o4f21) (&implementation-restriction . o4f20) (&non-continuable . o4f1f) (&who . o4f1e) (&irritants . o4f1d) (&assertion . o4f1c) (&violation . o4f1b) (&error . o4f1a) (&serious . o4f19) (&warning . o4f18) (&message . o4f17) (&condition . o4f16) (define-condition-type . o4f15) (define-enumeration . o4f14) (define-record-type . o4f13) (parent-rtd . o4f12) (nongenerative . o4f11) (opaque . o4f10) (sealed . o4f0f) (protocol . o4f0e) (parent . o4f0d) (immutable . o4f0c) (mutable . o4f0b) (fields . o4f0a) (error-handling-mode . o4f09) (file-options . o4f08) (buffer-mode . o4f07) (eol-style . o4f06) (guard . o4f05) (trace-define . o4f04) (trace-lambda . o4f03) (unsyntax-splicing . o4f02) (unsyntax . o4f01) (unquote-splicing . o4f00) (unquote . o4eff) (_ . o4efe) (else . o4efd) (=> . o4efc) (... . o4efb) (assert . o4efa) (endianness . o4ef9) (delay . o4ef8) (time . o4ef7) (do . o4ef6) (cond . o4ef5) (let* . o4ef4) (let . o4ef3) (let*-values . o4ef2) (let-values . o4ef1) (identifier-syntax . o4ef0) (with-syntax . o4eef) (quasisyntax . o4eee) (quasiquote . o4eed) (syntax-rules . o4eec) (include . o4eeb) (define-struct . o4eea) (record-constructor-descriptor . o4ee9) (record-type-descriptor . o4ee8) (case . o4ee7) (parameterize . o4ee6) (unless . o4ee5) (when . o4ee4) (or . o4ee3) (and . o4ee2) (if . o4ee1) (letrec* . o4ee0) (letrec . o4edf) (type-descriptor . o4ede) (case-lambda . o4edd) (lambda . o4edc) (syntax . o4edb) (syntax-case . o4eda) (quote . o4ed9) (foreign-call . o4ed8) (letrec-syntax . o4ed7) (let-syntax . o4ed6) (set! . o4ed5) (import . o4ed4) (begin . o4ed3) (module . o4ed2) (define-syntax . o4ed1) (define . o4ed0)) '((o4ca3 core-prim . &no-nans-rcd) (o4ca1 core-prim . &no-nans-rtd) (o4c8e core-prim . &no-infinities-rcd) (o4c8c core-prim . &no-infinities-rtd) (o4c79 core-prim . &i/o-encoding-rcd) (o4c77 core-prim . &i/o-encoding-rtd) (o4c5e core-prim . &i/o-decoding-rcd) (o4c5c core-prim . &i/o-decoding-rtd) (o4c49 core-prim . &i/o-port-rcd) (o4c47 core-prim . &i/o-port-rtd) (o4c2e core-prim . &i/o-file-does-not-exist-rcd) (o4c2c core-prim . &i/o-file-does-not-exist-rtd) (o4c19 core-prim . &i/o-file-already-exists-rcd) (o4c17 core-prim . &i/o-file-already-exists-rtd) (o4c04 core-prim . &i/o-file-is-read-only-rcd) (o4c02 core-prim . &i/o-file-is-read-only-rtd) (o4bef core-prim . &i/o-file-protection-rcd) (o4bed core-prim . &i/o-file-protection-rtd) (o4bda core-prim . &i/o-filename-rcd) (o4bd8 core-prim . &i/o-filename-rtd) (o4bbf core-prim . &i/o-invalid-position-rcd) (o4bbd core-prim . &i/o-invalid-position-rtd) (o4ba4 core-prim . &i/o-write-rcd) (o4ba2 core-prim . &i/o-write-rtd) (o4b8f core-prim . &i/o-read-rcd) (o4b8d core-prim . &i/o-read-rtd) (o4b7a core-prim . &i/o-rcd) (o4b78 core-prim . &i/o-rtd) (o4b65 core-prim . &undefined-rcd) (o4b63 core-prim . &undefined-rtd) (o4b50 core-prim . &syntax-rcd) (o4b4e core-prim . &syntax-rtd) (o4b2f core-prim . &lexical-rcd) (o4b2d core-prim . &lexical-rtd) (o4b1a core-prim . &implementation-restriction-rcd) (o4b18 core-prim . &implementation-restriction-rtd) (o4b05 core-prim . &non-continuable-rcd) (o4b03 core-prim . &non-continuable-rtd) (o4af0 core-prim . &who-rcd) (o4aee core-prim . &who-rtd) (o4ad5 core-prim . &irritants-rcd) (o4ad3 core-prim . &irritants-rtd) (o4aba core-prim . &assertion-rcd) (o4ab8 core-prim . &assertion-rtd) (o4aa5 core-prim . &violation-rcd) (o4aa3 core-prim . &violation-rtd) (o4a90 core-prim . &error-rcd) (o4a8e core-prim . &error-rtd) (o4a7b core-prim . &serious-rcd) (o4a79 core-prim . &serious-rtd) (o4a66 core-prim . &warning-rcd) (o4a64 core-prim . &warning-rtd) (o4a51 core-prim . &message-rcd) (o4a4f core-prim . &message-rtd) (o49f2 core-prim . &condition-rcd) (o49f0 core-prim . &condition-rtd) (o2fde core-prim . syntax-error) (o2ef9 core-prim . syntax-dispatch) (o51e8 core-prim . pretty-print) (o51e7 core-prim . eval-core) (o51e6 core-prim . set-symbol-value!) (o51e5 core-prim . symbol-value) (o51e4 core-prim . gensym) (o51e3 core-prim . void) (o4db0 core-prim . load) (o2fee core-prim . interaction-environment) (o51e2 core-prim . char-ready?) (o51e1 core-prim . regexp?) (o51e0 core-prim . read-line) (o51df core-prim . ungensym) (o51de core-prim . alist->eq-hash-table) (o51dd core-prim . assoc-ref) (o51dc core-prim . print) (o51db core-prim . format) (o51da core-prim . host-os) (o298f core-prim . library-path) (o51d9 core-prim . standard-library-path) (o51d8 core-prim . file-newer?) (o51d7 core-prim . stat-mtime) (o51d6 core-prim . write-to-file) (o51d5 core-prim . file->list) (o51d4 core-prim . file->string) (o51d3 core-prim . digit->integer) (o51d2 core-prim . call-with-string-input-port) (o51d1 core-prim . call-with-string-io) (o51d0 core-prim . string-split) (o51cf core-prim . bytevector-for-each) (o51ce core-prim . string->regexp) (o51cd core-prim . rxmatch) (o51cc core-prim . regexp-replace-all) (o51cb core-prim . hashtable-for-each) (o51ca core-prim . call-process) (o51c9 core-prim . local-tz-offset) (o51c8 core-prim . microseconds) (o51c7 core-prim . directory-list) (o51c6 core-prim . set-current-directory!) (o51c5 core-prim . expand-path) (o51c4 core-prim . current-directory) (o51c3 core-prim . %spawn) (o51c2 core-prim . %waitpid) (o51c1 core-prim . pointer-ref-c-int64) (o51c0 core-prim . pointer-ref-c-int32) (o51bf core-prim . pointer-ref-c-int16) (o51be core-prim . pointer-ref-c-int8) (o51bd core-prim . pointer-ref-c-uint64) (o51bc core-prim . pointer-ref-c-uint32) (o51bb core-prim . pointer-ref-c-uint16) (o51ba core-prim . pointer-ref-c-uint8) (o51b9 core-prim . pointer-set-c-uint64!) (o51b8 core-prim . pointer-set-c-uint32!) (o51b7 core-prim . pointer-set-c-uint16!) (o51b6 core-prim . pointer-set-c-uint8!) (o51b5 core-prim . pointer-set-c-int64!) (o51b4 core-prim . pointer-set-c-int32!) (o51b3 core-prim . pointer-set-c-int16!) (o51b2 core-prim . pointer-set-c-int8!) (o51b1 core-prim . pointer-set-c-pointer!) (o51b0 core-prim . pointer-set-c-double!) (o51af core-prim . pointer-set-c-float!) (o51ae core-prim . pointer-set-c-long-long!) (o51ad core-prim . pointer-set-c-long!) (o51ac core-prim . pointer-set-c-int!) (o51ab core-prim . pointer-set-c-short!) (o51aa core-prim . pointer-set-c-char!) (o51a9 core-prim . pointer-ref-c-pointer) (o51a8 core-prim . pointer-ref-c-double) (o51a7 core-prim . pointer-ref-c-float) (o51a6 core-prim . pointer-ref-c-unsigned-long-long) (o51a5 core-prim . pointer-ref-c-signed-long-long) (o51a4 core-prim . pointer-ref-c-unsigned-long) (o51a3 core-prim . pointer-ref-c-signed-long) (o51a2 core-prim . pointer-ref-c-unsigned-int) (o51a1 core-prim . pointer-ref-c-signed-int) (o51a0 core-prim . pointer-ref-c-unsigned-short) (o519f core-prim . pointer-ref-c-signed-short) (o519e core-prim . pointer-ref-c-unsigned-char) (o519d core-prim . pointer-ref-c-signed-char) (o519c core-prim . pointer->integer) (o519b core-prim . integer->pointer) (o519a core-prim . pointer?) (o5199 core-prim . shared-errno) (o5198 core-prim . %ffi-supported?) (o5197 core-prim . %ffi-pointer->string) (o5196 core-prim . %ffi-call->string-or-zero) (o5195 core-prim . %ffi-call->double) (o5194 core-prim . %ffi-call->void*) (o5193 core-prim . %ffi-call->void) (o5192 core-prim . %ffi-call->char) (o5191 core-prim . %ffi-call->int) (o5190 core-prim . %ffi-lookup) (o518f core-prim . %ffi-open) (o518e core-prim . %fork) (o518d core-prim . %pipe) (o518c core-prim . p) (o518b core-prim . open-output-string) (o518a core-prim . get-output-string) (o5189 core-prim . file-stat-ctime) (o5188 core-prim . file-stat-atime) (o5187 core-prim . file-stat-mtime) (o5186 core-prim . file-size-in-bytes) (o5185 core-prim . file-writable?) (o5184 core-prim . file-executable?) (o5183 core-prim . file-readable?) (o5182 core-prim . file-regular?) (o5181 core-prim . file-symbolic-link?) (o5180 core-prim . file-directory?) (o517f core-prim . create-symbolic-link) (o517e core-prim . rename-file) (o517d core-prim . delete-directory) (o517c core-prim . create-directory) (o517b core-prim . get-environment-variables) (o517a core-prim . get-environment-variable) (o5179 core-prim . get-timeofday) (o5178 core-prim . get-command-line) (o5177 core-prim . sys-display) (o5176 core-prim . whereis) (o5175 core-prim . register) (o5174 core-prim . vm-join!) (o5173 core-prim . vm-set-value!) (o5172 core-prim . vm?) (o5171 core-prim . main-vm?) (o5170 core-prim . vm-eval) (o516f core-prim . vm-self) (o516e core-prim . vm-start!) (o516d core-prim . make-vm) (o516c core-prim . mutex-try-lock!) (o516b core-prim . mutex-unlock!) (o516a core-prim . mutex-lock!) (o5169 core-prim . mutex?) (o5168 core-prim . make-mutex) (o5167 core-prim . condition-variable-notify-all!) (o5166 core-prim . condition-variable-notify!) (o5165 core-prim . condition-variable-wait!) (o5164 core-prim . make-condition-variable) (o5163 core-prim . mosh-executable-path) (o5162 core-prim . make-file-options) (o5161 core-prim . source-info) (o5160 core-prim . make-compiler-instruction) (o515f core-prim . make-instruction) (o515e core-prim . set-source-info!) (o515d core-prim . bignum?) (o515c core-prim . fast-equal?) (o515b core-prim . fasl-read) (o515a core-prim . fasl-write) (o5159 core-prim . time-usage) (o5158 core-prim . os-constant) (o27c2 core-prim . make-parameter) (o5157 core-prim . socket-port) (o5156 core-prim . socket-shutdown) (o5155 core-prim . socket-close) (o5154 core-prim . socket-send) (o5153 core-prim . socket-recv!) (o5152 core-prim . socket-recv) (o5151 core-prim . make-server-socket) (o5150 core-prim . make-client-socket) (o514f core-prim . socket-accept) (o514e core-prim . socket?) (o514d core-prim . string-upcase) (o514c core-prim . string-titlecase) (o514b core-prim . string-normalize-nfkd) (o514a core-prim . string-normalize-nfkc) (o5149 core-prim . string-normalize-nfd) (o5148 core-prim . string-normalize-nfc) (o5147 core-prim . string-foldcase) (o5146 core-prim . string-downcase) (o5145 core-prim . string-ci>?) (o5144 core-prim . string-ci>=?) (o5143 core-prim . string-ci=?) (o5142 core-prim . string-ci<?) (o5141 core-prim . string-ci<=?) (o5140 core-prim . char-whitespace?) (o513f core-prim . char-upper-case?) (o513e core-prim . char-title-case?) (o513d core-prim . char-numeric?) (o513c core-prim . char-lower-case?) (o513b core-prim . char-general-category) (o513a core-prim . char-upcase) (o5139 core-prim . char-titlecase) (o5138 core-prim . char-foldcase) (o5137 core-prim . char-downcase) (o5136 core-prim . char-ci>?) (o5135 core-prim . char-ci>=?) (o5134 core-prim . char-ci=?) (o5133 core-prim . char-ci<?) (o5132 core-prim . char-ci<=?) (o5131 core-prim . char-alphabetic?) (o2d26 core-prim . make-variable-transformer) (o2fe4 core-prim . identifier?) (o2fd0 core-prim . generate-temporaries) (o2fd2 core-prim . free-identifier=?) (o2fe8 core-prim . syntax->datum) (o2fe6 core-prim . datum->syntax) (o2fd4 core-prim . bound-identifier=?) (o5130 core-prim . record-type-descriptor?) (o512f core-prim . record-predicate) (o512e core-prim . record-mutator) (o512d core-prim . record-constructor) (o512c core-prim . record-accessor) (o512b core-prim . make-record-type-descriptor) (o512a core-prim . make-record-constructor-descriptor) (o5129 core-prim . record?) (o5128 core-prim . record-type-uid) (o5127 core-prim . record-type-sealed?) (o5126 core-prim . record-type-parent) (o5125 core-prim . record-type-opaque?) (o5124 core-prim . record-type-name) (o5123 core-prim . record-type-generative?) (o5122 core-prim . record-type-field-names) (o5121 core-prim . record-rtd) (o5120 core-prim . record-field-mutable?) (o511f core-prim . delete-file) (o511e core-prim . file-exists?) (o511d core-prim . vector-sort!) (o511c core-prim . vector-sort) (o511b core-prim . list-sort) (o511a core-prim . symbol-hash) (o5119 core-prim . string-ci-hash) (o5118 core-prim . string-hash) (o5117 core-prim . equal-hash) (o5116 core-prim . hashtable-equivalence-function) (o5115 core-prim . make-hashtable) (o5114 core-prim . hashtable-hash-function) (o5113 core-prim . make-eqv-hashtable) (o5112 core-prim . make-eq-hashtable) (o5111 core-prim . hashtable?) (o5110 core-prim . hashtable-update!) (o510f core-prim . hashtable-size) (o510e core-prim . hashtable-set!) (o510d core-prim . hashtable-ref) (o510c core-prim . hashtable-mutable?) (o510b core-prim . hashtable-keys) (o510a core-prim . hashtable-entries) (o5109 core-prim . hashtable-delete!) (o5108 core-prim . hashtable-copy) (o5107 core-prim . hashtable-contains?) (o5106 core-prim . hashtable-clear!) (o5105 core-prim . call-with-output-file) (o5104 core-prim . call-with-input-file) (o5103 core-prim . write-char) (o5102 core-prim . write) (o5101 core-prim . with-output-to-file) (o5100 core-prim . with-input-from-file) (o50ff core-prim . read-char) (o50fe core-prim . read) (o50fd core-prim . peek-char) (o50fc core-prim . open-output-file) (o50fb core-prim . open-input-file) (o50fa core-prim . newline) (o50f9 core-prim . display) (o50f8 core-prim . close-output-port) (o50f7 core-prim . close-input-port) (o50f6 core-prim . eof-object?) (o50f5 core-prim . eof-object) (o50f4 core-prim . current-error-port) (o50f3 core-prim . current-output-port) (o50f2 core-prim . current-input-port) (o50f1 core-prim . output-port?) (o50f0 core-prim . input-port?) (o50ef core-prim . utf-8-codec) (o50ee core-prim . utf-16-codec) (o50ed core-prim . transcoder-error-handling-mode) (o50ec core-prim . transcoder-eol-style) (o50eb core-prim . transcoder-codec) (o50ea core-prim . transcoded-port) (o50e9 core-prim . textual-port?) (o50e8 core-prim . string->bytevector) (o50e7 core-prim . standard-output-port) (o50e6 core-prim . standard-input-port) (o50e5 core-prim . standard-error-port) (o50e4 core-prim . set-port-position!) (o50e3 core-prim . put-u8) (o50e2 core-prim . put-string) (o50e1 core-prim . put-datum) (o50e0 core-prim . put-char) (o50df core-prim . put-bytevector) (o50de core-prim . port?) (o50dd core-prim . port-transcoder) (o50dc core-prim . port-position) (o50db core-prim . port-has-set-port-position!?) (o50da core-prim . port-has-port-position?) (o50d9 core-prim . port-eof?) (o50d8 core-prim . output-port-buffer-mode) (o50d7 core-prim . open-string-output-port) (o50d6 core-prim . open-string-input-port) (o50d5 core-prim . open-file-output-port) (o50d4 core-prim . open-file-input/output-port) (o50d3 core-prim . open-file-input-port) (o50d2 core-prim . open-bytevector-output-port) (o50d1 core-prim . open-bytevector-input-port) (o50d0 core-prim . native-transcoder) (o50cf core-prim . native-eol-style) (o50ce core-prim . make-transcoder) (o50cd core-prim . latin-1-codec) (o4b9e core-prim . make-i/o-write-error) (o4b89 core-prim . make-i/o-read-error) (o4c3f core-prim . make-i/o-port-error) (o4bb5 core-prim . make-i/o-invalid-position-error) (o4bd0 core-prim . make-i/o-filename-error) (o4be9 core-prim . make-i/o-file-protection-error) (o4bfe core-prim . make-i/o-file-is-read-only-error) (o4c28 core-prim . make-i/o-file-does-not-exist-error) (o4c13 core-prim . make-i/o-file-already-exists-error) (o4b74 core-prim . make-i/o-error) (o4c6f core-prim . make-i/o-encoding-error) (o4c58 core-prim . make-i/o-decoding-error) (o50cc core-prim . make-custom-textual-output-port) (o50cb core-prim . make-custom-textual-input/output-port) (o50ca core-prim . make-custom-textual-input-port) (o50c9 core-prim . make-custom-binary-output-port) (o50c8 core-prim . make-custom-binary-input/output-port) (o50c7 core-prim . make-custom-binary-input-port) (o50c6 core-prim . make-bytevector) (o50c5 core-prim . lookahead-u8) (o50c4 core-prim . lookahead-char) (o4ba0 core-prim . i/o-write-error?) (o4b8b core-prim . i/o-read-error?) (o4c43 core-prim . i/o-port-error?) (o4bb9 core-prim . i/o-invalid-position-error?) (o4bd4 core-prim . i/o-filename-error?) (o4beb core-prim . i/o-file-protection-error?) (o4c00 core-prim . i/o-file-is-read-only-error?) (o4c2a core-prim . i/o-file-does-not-exist-error?) (o4c15 core-prim . i/o-file-already-exists-error?) (o4b76 core-prim . i/o-error?) (o4bbb core-prim . i/o-error-position) (o4c45 core-prim . i/o-error-port) (o4bd6 core-prim . i/o-error-filename) (o4c73 core-prim . i/o-encoding-error?) (o4c75 core-prim . i/o-encoding-error-char) (o4c5a core-prim . i/o-decoding-error?) (o50c3 core-prim . get-u8) (o50c2 core-prim . get-string-n!) (o50c1 core-prim . get-string-n) (o50c0 core-prim . get-string-all) (o50bf core-prim . get-line) (o50be core-prim . get-datum) (o50bd core-prim . get-char) (o50bc core-prim . get-bytevector-some) (o50bb core-prim . get-bytevector-n!) (o50ba core-prim . get-bytevector-n) (o50b9 core-prim . get-bytevector-all) (o50b8 core-prim . flush-output-port) (o50b7 core-prim . close-port) (o2fbe core-prim . scheme-report-environment) (o50b6 core-prim . quotient) (o2fbc core-prim . null-environment) (o50b5 core-prim . remainder) (o50b4 core-prim . modulo) (o50b3 core-prim . inexact->exact) (o50b2 core-prim . force) (o50b1 core-prim . exact->inexact) (o50b0 core-prim . make-promise) (o50af core-prim . exit) (o4daa core-prim . command-line) (o50ae core-prim . string-fill!) (o50ad core-prim . string-set!) (o50ac core-prim . set-cdr!) (o50ab core-prim . set-car!) (o50aa core-prim . remove) (o50a9 core-prim . remv) (o50a8 core-prim . remp) (o50a7 core-prim . remq) (o50a6 core-prim . partition) (o50a5 core-prim . memv) (o50a4 core-prim . memq) (o50a3 core-prim . memp) (o50a2 core-prim . member) (o50a1 core-prim . exists) (o50a0 core-prim . for-all) (o509f core-prim . fold-right) (o509e core-prim . fold-left) (o509d core-prim . find) (o509c core-prim . filter) (o509b core-prim . cons*) (o509a core-prim . assv) (o5099 core-prim . assq) (o5098 core-prim . assp) (o5097 core-prim . assoc) (o5096 core-prim . call-with-string-output-port) (o5095 core-prim . call-with-port) (o5094 core-prim . call-with-bytevector-output-port) (o5093 core-prim . bytevector->string) (o5092 core-prim . buffer-mode?) (o5091 core-prim . binary-port?) (o5090 core-prim . with-exception-handler) (o508f core-prim . raise-continuable) (o508e core-prim . raise) (o2fc2 core-prim . eval) (o2fba core-prim . environment) (o508d core-prim . make-enumeration) (o508c core-prim . enum-set=?) (o508b core-prim . enum-set-universe) (o508a core-prim . enum-set-union) (o5089 core-prim . enum-set-subset?) (o5088 core-prim . enum-set-projection) (o5087 core-prim . enum-set-member?) (o5086 core-prim . enum-set-intersection) (o5085 core-prim . enum-set-indexer) (o5084 core-prim . enum-set-difference) (o5083 core-prim . enum-set-constructor) (o5082 core-prim . enum-set-complement) (o5081 core-prim . enum-set->list) (o4aea core-prim . who-condition?) (o4a62 core-prim . warning?) (o4aa1 core-prim . violation?) (o4b61 core-prim . undefined-violation?) (o4b48 core-prim . syntax-violation?) (o4b4c core-prim . syntax-violation-subform) (o4b4a core-prim . syntax-violation-form) (o2fe2 core-prim . syntax-violation) (o5080 core-prim . simple-conditions) (o4a77 core-prim . serious-condition?) (o4b01 core-prim . non-continuable-violation?) (o4a4b core-prim . message-condition?) (o4ae6 core-prim . make-who-condition) (o4a60 core-prim . make-warning) (o4a9f core-prim . make-violation) (o4b5f core-prim . make-undefined-violation) (o4b42 core-prim . make-syntax-violation) (o4a75 core-prim . make-serious-condition) (o4aff core-prim . make-non-continuable-violation) (o4a47 core-prim . make-message-condition) (o4b29 core-prim . make-lexical-violation) (o4acb core-prim . make-irritants-condition) (o4b14 core-prim . make-implementation-restriction-violation) (o4a8a core-prim . make-error) (o4ab4 core-prim . make-assertion-violation) (o4b2b core-prim . lexical-violation?) (o4acf core-prim . irritants-condition?) (o4b16 core-prim . implementation-restriction-violation?) (o4a8c core-prim . error?) (o4aec core-prim . condition-who) (o507f core-prim . condition-predicate) (o4a4d core-prim . condition-message) (o4ad1 core-prim . condition-irritants) (o507e core-prim . condition-accessor) (o507d core-prim . condition) (o4ab6 core-prim . assertion-violation?) (o507c core-prim . condition?) (o507b core-prim . utf32->string) (o507a core-prim . utf16->string) (o5079 core-prim . utf8->string) (o5078 core-prim . uint-list->bytevector) (o5077 core-prim . u8-list->bytevector) (o5076 core-prim . string->utf8) (o5075 core-prim . string->utf32) (o5074 core-prim . string->utf16) (o5073 core-prim . sint-list->bytevector) (o5072 core-prim . native-endianness) (o5071 core-prim . bytevector?) (o5070 core-prim . bytevector=?) (o506f core-prim . bytevector-uint-set!) (o506e core-prim . bytevector-uint-ref) (o506d core-prim . bytevector-u8-set!) (o506c core-prim . bytevector-u8-ref) (o506b core-prim . bytevector-u64-set!) (o506a core-prim . bytevector-u64-ref) (o5069 core-prim . bytevector-u64-native-set!) (o5068 core-prim . bytevector-u64-native-ref) (o5067 core-prim . bytevector-u32-set!) (o5066 core-prim . bytevector-u32-ref) (o5065 core-prim . bytevector-u32-native-set!) (o5064 core-prim . bytevector-u32-native-ref) (o5063 core-prim . bytevector-u16-set!) (o5062 core-prim . bytevector-u16-ref) (o5061 core-prim . bytevector-u16-native-set!) (o5060 core-prim . bytevector-u16-native-ref) (o505f core-prim . bytevector-sint-set!) (o505e core-prim . bytevector-sint-ref) (o505d core-prim . bytevector-s8-set!) (o505c core-prim . bytevector-s8-ref) (o505b core-prim . bytevector-s64-set!) (o505a core-prim . bytevector-s64-ref) (o5059 core-prim . bytevector-s64-native-set!) (o5058 core-prim . bytevector-s64-native-ref) (o5057 core-prim . bytevector-s32-set!) (o5056 core-prim . bytevector-s32-ref) (o5055 core-prim . bytevector-s32-native-set!) (o5054 core-prim . bytevector-s32-native-ref) (o5053 core-prim . bytevector-s16-set!) (o5052 core-prim . bytevector-s16-ref) (o5051 core-prim . bytevector-s16-native-set!) (o5050 core-prim . bytevector-s16-native-ref) (o504f core-prim . bytevector-length) (o504e core-prim . bytevector-ieee-single-ref) (o504d core-prim . bytevector-ieee-single-set!) (o504c core-prim . bytevector-ieee-single-native-set!) (o504b core-prim . bytevector-ieee-single-native-ref) (o504a core-prim . bytevector-ieee-double-set!) (o5049 core-prim . bytevector-ieee-double-ref) (o5048 core-prim . bytevector-ieee-double-native-set!) (o5047 core-prim . bytevector-ieee-double-native-ref) (o5046 core-prim . bytevector-fill!) (o5045 core-prim . bytevector-copy!) (o5044 core-prim . bytevector-copy) (o5043 core-prim . bytevector->uint-list) (o5042 core-prim . bytevector->u8-list) (o5041 core-prim . bytevector->sint-list) (o4c9f core-prim . no-nans-violation?) (o4c8a core-prim . no-infinities-violation?) (o4c9d core-prim . make-no-nans-violation) (o4c88 core-prim . make-no-infinities-violation) (o5040 core-prim . real->flonum) (o503f core-prim . flzero?) (o503e core-prim . fltruncate) (o503d core-prim . fltan) (o503c core-prim . flsqrt) (o503b core-prim . flsin) (o503a core-prim . flround) (o5039 core-prim . flpositive?) (o5038 core-prim . flonum?) (o5037 core-prim . flodd?) (o5036 core-prim . flnumerator) (o5035 core-prim . flnegative?) (o5034 core-prim . flnan?) (o5033 core-prim . flmod0) (o5032 core-prim . flmod) (o5031 core-prim . flmin) (o5030 core-prim . flmax) (o502f core-prim . fllog) (o502e core-prim . flinteger?) (o502d core-prim . flinfinite?) (o502c core-prim . flfloor) (o502b core-prim . flfinite?) (o502a core-prim . flexpt) (o5029 core-prim . flexp) (o5028 core-prim . fleven?) (o5027 core-prim . fldiv0-and-mod0) (o5026 core-prim . fldiv0) (o5025 core-prim . fldiv-and-mod) (o5024 core-prim . fldiv) (o5023 core-prim . fldenominator) (o5022 core-prim . flcos) (o5021 core-prim . flceiling) (o5020 core-prim . flatan) (o501f core-prim . flasin) (o501e core-prim . flacos) (o501d core-prim . flabs) (o501c core-prim . fl>?) (o501b core-prim . fl>=?) (o501a core-prim . fl=?) (o5019 core-prim . fl<?) (o5018 core-prim . fl<=?) (o5017 core-prim . fl/) (o5016 core-prim . fl-) (o5015 core-prim . fl+) (o5014 core-prim . fl*) (o5013 core-prim . fixnum->flonum) (o5012 core-prim . fxzero?) (o5011 core-prim . fxxor) (o5010 core-prim . fxrotate-bit-field) (o500f core-prim . fxreverse-bit-field) (o500e core-prim . fxpositive?) (o500d core-prim . fxodd?) (o500c core-prim . fxnot) (o500b core-prim . fxnegative?) (o500a core-prim . fxmod0) (o5009 core-prim . fxmod) (o5008 core-prim . fxmin) (o5007 core-prim . fxmax) (o5006 core-prim . fxlength) (o5005 core-prim . fxior) (o5004 core-prim . fxif) (o5003 core-prim . fxfirst-bit-set) (o5002 core-prim . fxeven?) (o5001 core-prim . fxdiv0-and-mod0) (o5000 core-prim . fxdiv0) (o4fff core-prim . fxdiv-and-mod) (o4ffe core-prim . fxdiv) (o4ffd core-prim . fxcopy-bit-field) (o4ffc core-prim . fxcopy-bit) (o4ffb core-prim . fxbit-set?) (o4ffa core-prim . fxbit-field) (o4ff9 core-prim . fxbit-count) (o4ff8 core-prim . fxarithmetic-shift-right) (o4ff7 core-prim . fxarithmetic-shift-left) (o4ff6 core-prim . fxarithmetic-shift) (o4ff5 core-prim . fxand) (o4ff4 core-prim . fx>?) (o4ff3 core-prim . fx>=?) (o4ff2 core-prim . fx=?) (o4ff1 core-prim . fx<?) (o4ff0 core-prim . fx<=?) (o4fef core-prim . fx-/carry) (o4fee core-prim . fx-) (o4fed core-prim . fx+/carry) (o4fec core-prim . fx+) (o4feb core-prim . fx*/carry) (o4fea core-prim . fx*) (o4fe9 core-prim . greatest-fixnum) (o4fe8 core-prim . least-fixnum) (o4fe7 core-prim . fixnum-width) (o4fe6 core-prim . fixnum?) (o4fe5 core-prim . bitwise-rotate-bit-field) (o4fe4 core-prim . bitwise-reverse-bit-field) (o4fe3 core-prim . bitwise-length) (o4fe2 core-prim . bitwise-if) (o4fe1 core-prim . bitwise-first-bit-set) (o4fe0 core-prim . bitwise-copy-bit-field) (o4fdf core-prim . bitwise-copy-bit) (o4fde core-prim . bitwise-bit-set?) (o4fdd core-prim . bitwise-bit-field) (o4fdc core-prim . bitwise-bit-count) (o4fdb core-prim . bitwise-xor) (o4fda core-prim . bitwise-ior) (o4fd9 core-prim . bitwise-and) (o4fd8 core-prim . bitwise-not) (o4fd7 core-prim . bitwise-arithmetic-shift-right) (o4fd6 core-prim . bitwise-arithmetic-shift-left) (o4fd5 core-prim . bitwise-arithmetic-shift) (o4fd4 core-prim . zero?) (o4fd3 core-prim . vector?) (o4fd2 core-prim . vector-set!) (o4fd1 core-prim . vector-ref) (o4fd0 core-prim . vector-map) (o4fcf core-prim . vector-length) (o4fce core-prim . vector-for-each) (o4fcd core-prim . vector-fill!) (o4fcc core-prim . vector->list) (o4fcb core-prim . vector) (o4fca core-prim . values) (o4fc9 core-prim . truncate) (o4fc8 core-prim . tan) (o4fc7 core-prim . symbol?) (o4fc6 core-prim . symbol=?) (o4fc5 core-prim . symbol->string) (o4fc4 core-prim . substring) (o4fc3 core-prim . string?) (o4fc2 core-prim . string>?) (o4fc1 core-prim . string>=?) (o4fc0 core-prim . string=?) (o4fbf core-prim . string<?) (o4fbe core-prim . string<=?) (o4fbd core-prim . string-ref) (o4fbc core-prim . string-length) (o4fbb core-prim . string-for-each) (o4fba core-prim . string-copy) (o4fb9 core-prim . string-append) (o4fb8 core-prim . string->symbol) (o4fb7 core-prim . string->number) (o4fb6 core-prim . string->list) (o4fb5 core-prim . string) (o4fb4 core-prim . sqrt) (o4fb3 core-prim . sin) (o4fb2 core-prim . round) (o4fb1 core-prim . reverse) (o4fb0 core-prim . real?) (o4faf core-prim . real-valued?) (o4fae core-prim . real-part) (o4fad core-prim . rationalize) (o4fac core-prim . rational?) (o4fab core-prim . rational-valued?) (o4faa core-prim . procedure?) (o4fa9 core-prim . positive?) (o4fa8 core-prim . pair?) (o4fa7 core-prim . odd?) (o4fa6 core-prim . numerator) (o4fa5 core-prim . number?) (o4fa4 core-prim . number->string) (o4fa3 core-prim . null?) (o4fa2 core-prim . not) (o4fa1 core-prim . negative?) (o4fa0 core-prim . nan?) (o4f9f core-prim . min) (o4f9e core-prim . max) (o4f9d core-prim . map) (o4f9c core-prim . make-vector) (o4f9b core-prim . make-string) (o4f9a core-prim . make-rectangular) (o4f99 core-prim . make-polar) (o4f98 core-prim . magnitude) (o4f97 core-prim . log) (o4f96 core-prim . list?) (o4f95 core-prim . list-tail) (o4f94 core-prim . list-ref) (o4f93 core-prim . list->vector) (o4f92 core-prim . list->string) (o4f91 core-prim . list) (o4f90 core-prim . length) (o4f8f core-prim . lcm) (o4f8e core-prim . integer?) (o4f8d core-prim . integer-valued?) (o4f8c core-prim . integer->char) (o4f8b core-prim . infinite?) (o4f8a core-prim . inexact?) (o4f89 core-prim . inexact) (o4f88 core-prim . imag-part) (o4f87 core-prim . gcd) (o4f86 core-prim . for-each) (o4f85 core-prim . floor) (o4f84 core-prim . finite?) (o4f83 core-prim . expt) (o4f82 core-prim . exp) (o4f81 core-prim . exact?) (o4f80 core-prim . exact-integer-sqrt) (o4f7f core-prim . exact) (o4f7e core-prim . even?) (o4f7d core-prim . error) (o4f7c core-prim . eqv?) (o4f7b core-prim . equal?) (o4f7a core-prim . eq?) (o4f79 core-prim . dynamic-wind) (o4f78 core-prim . div0-and-mod0) (o4f77 core-prim . mod0) (o4f76 core-prim . div0) (o4f75 core-prim . div-and-mod) (o4f74 core-prim . mod) (o4f73 core-prim . div) (o4f72 core-prim . denominator) (o4f71 core-prim . cos) (o4f70 core-prim . cons) (o4f6f core-prim . complex?) (o4f6e core-prim . char?) (o4f6d core-prim . char>?) (o4f6c core-prim . char>=?) (o4f6b core-prim . char=?) (o4f6a core-prim . char<?) (o4f69 core-prim . char<=?) (o4f68 core-prim . char->integer) (o4f67 core-prim . ceiling) (o4f66 core-prim . call-with-values) (o4f65 core-prim . call/cc) (o4f64 core-prim . call-with-current-continuation) (o4f63 core-prim . cddddr) (o4f62 core-prim . cdddar) (o4f61 core-prim . cddadr) (o4f60 core-prim . cddaar) (o4f5f core-prim . cdaddr) (o4f5e core-prim . cdadar) (o4f5d core-prim . cdaadr) (o4f5c core-prim . cdaaar) (o4f5b core-prim . cadddr) (o4f5a core-prim . caddar) (o4f59 core-prim . cadadr) (o4f58 core-prim . cadaar) (o4f57 core-prim . caaddr) (o4f56 core-prim . caadar) (o4f55 core-prim . caaadr) (o4f54 core-prim . caaaar) (o4f53 core-prim . cdddr) (o4f52 core-prim . cddar) (o4f51 core-prim . cdadr) (o4f50 core-prim . cdaar) (o4f4f core-prim . caddr) (o4f4e core-prim . cadar) (o4f4d core-prim . caadr) (o4f4c core-prim . caaar) (o4f4b core-prim . cddr) (o4f4a core-prim . cdar) (o4f49 core-prim . cadr) (o4f48 core-prim . caar) (o4f47 core-prim . cdr) (o4f46 core-prim . car) (o4f45 core-prim . boolean?) (o4f44 core-prim . boolean=?) (o4f43 core-prim . atan) (o4f42 core-prim . assertion-violation) (o2fdc core-prim . assertion-error) (o4f41 core-prim . asin) (o4f40 core-prim . apply) (o4f3f core-prim . append) (o4f3e core-prim . angle) (o4f3d core-prim . acos) (o4f3c core-prim . abs) (o4f3b core-prim . /) (o4f3a core-prim . *) (o4f39 core-prim . -) (o4f38 core-prim . +) (o4f37 core-prim . >=) (o4f36 core-prim . >) (o4f35 core-prim . =) (o4f34 core-prim . <=) (o4f33 core-prim . <) (o4f32 core-prim . library) (o4f31 $core-rtd &no-nans-rtd &no-nans-rcd) (o4f30 $core-rtd &no-infinities-rtd &no-infinities-rcd) (o4f2f $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (o4f2e $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (o4f2d $core-rtd &i/o-port-rtd &i/o-port-rcd) (o4f2c $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (o4f2b $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (o4f2a $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (o4f29 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (o4f28 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (o4f27 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (o4f26 $core-rtd &i/o-write-rtd &i/o-write-rcd) (o4f25 $core-rtd &i/o-read-rtd &i/o-read-rcd) (o4f24 $core-rtd &i/o-rtd &i/o-rcd) (o4f23 $core-rtd &undefined-rtd &undefined-rcd) (o4f22 $core-rtd &syntax-rtd &syntax-rcd) (o4f21 $core-rtd &lexical-rtd &lexical-rcd) (o4f20 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (o4f1f $core-rtd &non-continuable-rtd &non-continuable-rcd) (o4f1e $core-rtd &who-rtd &who-rcd) (o4f1d $core-rtd &irritants-rtd &irritants-rcd) (o4f1c $core-rtd &assertion-rtd &assertion-rcd) (o4f1b $core-rtd &violation-rtd &violation-rcd) (o4f1a $core-rtd &error-rtd &error-rcd) (o4f19 $core-rtd &serious-rtd &serious-rcd) (o4f18 $core-rtd &warning-rtd &warning-rcd) (o4f17 $core-rtd &message-rtd &message-rcd) (o4f16 $core-rtd &condition-rtd &condition-rcd) (o4f15 macro . define-condition-type) (o4f14 macro . define-enumeration) (o4f13 macro . define-record-type) (o4f12 macro . parent-rtd) (o4f11 macro . nongenerative) (o4f10 macro . opaque) (o4f0f macro . sealed) (o4f0e macro . protocol) (o4f0d macro . parent) (o4f0c macro . immutable) (o4f0b macro . mutable) (o4f0a macro . fields) (o4f09 macro . error-handling-mode) (o4f08 macro . file-options) (o4f07 macro . buffer-mode) (o4f06 macro . eol-style) (o4f05 macro . guard) (o4f04 macro . trace-define) (o4f03 macro . trace-lambda) (o4f02 macro . unsyntax-splicing) (o4f01 macro . unsyntax) (o4f00 macro . unquote-splicing) (o4eff macro . unquote) (o4efe macro . _) (o4efd macro . else) (o4efc macro . =>) (o4efb macro . ...) (o4efa macro . assert) (o4ef9 macro . endianness) (o4ef8 macro . delay) (o4ef7 macro . time) (o4ef6 macro . do) (o4ef5 macro . cond) (o4ef4 macro . let*) (o4ef3 macro . let) (o4ef2 macro . let*-values) (o4ef1 macro . let-values) (o4ef0 macro . identifier-syntax) (o4eef macro . with-syntax) (o4eee macro . quasisyntax) (o4eed macro . quasiquote) (o4eec macro . syntax-rules) (o4eeb macro . include) (o4eea macro . define-struct) (o4ee9 core-macro . record-constructor-descriptor) (o4ee8 core-macro . record-type-descriptor) (o4ee7 macro . case) (o4ee6 macro . parameterize) (o4ee5 macro . unless) (o4ee4 macro . when) (o4ee3 core-macro . or) (o4ee2 core-macro . and) (o4ee1 core-macro . if) (o4ee0 core-macro . letrec*) (o4edf core-macro . letrec) (o4ede core-macro . type-descriptor) (o4edd core-macro . case-lambda) (o4edc core-macro . lambda) (o4edb core-macro . syntax) (o4eda core-macro . syntax-case) (o4ed9 core-macro . quote) (o4ed8 core-macro . foreign-call) (o4ed7 letrec-syntax) (o4ed6 let-syntax) (o4ed5 set!) (o4ed4 import) (o4ed3 begin) (o4ed2 module) (o4ed1 define-syntax) (o4ed0 define)) values values '#f '#f '#f '#f) (o2b11@o29b0@install-library 'o5209 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . o51e8) (eval-core . o51e7) (set-symbol-value! . o51e6) (symbol-value . o51e5) (gensym . o51e4) (void . o51e3)) '() values values '#f '#f '#f '#f) (o2b11@o29b0@install-library 'o520a '(mosh) '() '() '() '() '((set-symbol-value! . o51e6) (symbol-value . o51e5) (regexp? . o51e1) (read-line . o51e0) (ungensym . o51df) (alist->eq-hash-table . o51de) (assoc-ref . o51dd) (print . o51dc) (format . o51db) (host-os . o51da) (library-path . o298f) (standard-library-path . o51d9) (file-newer? . o51d8) (stat-mtime . o51d7) (digit->integer . o51d3) (call-with-string-input-port . o51d2) (call-with-string-io . o51d1) (string-split . o51d0) (bytevector-for-each . o51cf) (string->regexp . o51ce) (rxmatch . o51cd) (regexp-replace-all . o51cc) (hashtable-for-each . o51cb) (set-current-directory! . o51c6) (expand-path . o51c5) (current-directory . o51c4) (p . o518c) (get-timeofday . o5179) (get-command-line . o5178) (sys-display . o5177) (whereis . o5176) (register . o5175) (vm-join! . o5174) (vm-set-value! . o5173) (vm? . o5172) (main-vm? . o5171) (vm-eval . o5170) (vm-self . o516f) (vm-start! . o516e) (make-vm . o516d) (mutex-try-lock! . o516c) (mutex-unlock! . o516b) (mutex-lock! . o516a) (mutex? . o5169) (make-mutex . o5168) (condition-variable-notify-all! . o5167) (condition-variable-notify! . o5166) (condition-variable-wait! . o5165) (make-condition-variable . o5164) (mosh-executable-path . o5163) (make-file-options . o5162) (source-info . o5161) (make-compiler-instruction . o5160) (make-instruction . o515f) (set-source-info! . o515e) (bignum? . o515d) (fast-equal? . o515c) (fasl-read . o515b) (fasl-write . o515a) (time-usage . o5159) (os-constant . o5158) (time . o4ef7) (include . o4eeb)) '() values values '#f '#f '#f '#f) (o2b11@o29b0@install-library 'o520b '(system) '() '() '() '() '((write-to-file . o51d6) (file->list . o51d5) (file->string . o51d4) (call-process . o51ca) (local-tz-offset . o51c9) (microseconds . o51c8) (directory-list . o51c7) (expand-path . o51c5) (%spawn . o51c3) (%waitpid . o51c2) (pointer-ref-c-int64 . o51c1) (pointer-ref-c-int32 . o51c0) (pointer-ref-c-int16 . o51bf) (pointer-ref-c-int8 . o51be) (pointer-ref-c-uint64 . o51bd) (pointer-ref-c-uint32 . o51bc) (pointer-ref-c-uint16 . o51bb) (pointer-ref-c-uint8 . o51ba) (pointer-set-c-uint64! . o51b9) (pointer-set-c-uint32! . o51b8) (pointer-set-c-uint16! . o51b7) (pointer-set-c-uint8! . o51b6) (pointer-set-c-int64! . o51b5) (pointer-set-c-int32! . o51b4) (pointer-set-c-int16! . o51b3) (pointer-set-c-int8! . o51b2) (pointer-set-c-pointer! . o51b1) (pointer-set-c-double! . o51b0) (pointer-set-c-float! . o51af) (pointer-set-c-long-long! . o51ae) (pointer-set-c-long! . o51ad) (pointer-set-c-int! . o51ac) (pointer-set-c-short! . o51ab) (pointer-set-c-char! . o51aa) (pointer-ref-c-pointer . o51a9) (pointer-ref-c-double . o51a8) (pointer-ref-c-float . o51a7) (pointer-ref-c-unsigned-long-long . o51a6) (pointer-ref-c-signed-long-long . o51a5) (pointer-ref-c-unsigned-long . o51a4) (pointer-ref-c-signed-long . o51a3) (pointer-ref-c-unsigned-int . o51a2) (pointer-ref-c-signed-int . o51a1) (pointer-ref-c-unsigned-short . o51a0) (pointer-ref-c-signed-short . o519f) (pointer-ref-c-unsigned-char . o519e) (pointer-ref-c-signed-char . o519d) (pointer->integer . o519c) (integer->pointer . o519b) (pointer? . o519a) (shared-errno . o5199) (%ffi-supported? . o5198) (%ffi-pointer->string . o5197) (%ffi-call->string-or-zero . o5196) (%ffi-call->double . o5195) (%ffi-call->void* . o5194) (%ffi-call->void . o5193) (%ffi-call->char . o5192) (%ffi-call->int . o5191) (%ffi-lookup . o5190) (%ffi-open . o518f) (%fork . o518e) (%pipe . o518d) (open-output-string . o518b) (get-output-string . o518a) (file-stat-ctime . o5189) (file-stat-atime . o5188) (file-stat-mtime . o5187) (file-size-in-bytes . o5186) (file-writable? . o5185) (file-executable? . o5184) (file-readable? . o5183) (file-regular? . o5182) (file-symbolic-link? . o5181) (file-directory? . o5180) (create-symbolic-link . o517f) (rename-file . o517e) (delete-directory . o517d) (create-directory . o517c) (get-environment-variables . o517b) (get-environment-variable . o517a) (make-parameter . o27c2) (socket-port . o5157) (socket-shutdown . o5156) (socket-close . o5155) (socket-send . o5154) (socket-recv! . o5153) (socket-recv . o5152) (make-server-socket . o5151) (make-client-socket . o5150) (socket-accept . o514f) (socket? . o514e) (parameterize . o4ee6)) '() values values '#f '#f '#f '#f))
((lambda (o4d99@add-library-path! o4d9b@parse-and-add-library-path o4d9d@for-each-with-index o4d9f@rpad o4da1@condition-printer o4da3@record->field-alist o4da5@map-with-index o4da7@repl o4da9@trace-printer o4dab@command-line o4dad@local-library-path o4daf@load/args o4db1@load o4db3@ironscheme-build o4db5@eval-top-level o4db7@compile-system-libraries o4db9@compile o4dbb@compile->closure o4dbd@pre-compile-r6rs-file o4dbf@load-r6rs-top-level o4dc1@load-r6rs-top-level-sexp) (begin (set! o4d99@add-library-path! (lambda (o4de4@path) (o2b01@o2990@library-path (append (o2b01@o2990@library-path) (list o4de4@path))))) (set! o4d9b@parse-and-add-library-path (lambda (o4de6@paths o4de7@message) ((lambda (o4dea@t) (if o4dea@t ((lambda (o4dec@paths) (for-each (lambda (o4dee@path) (if (file-exists? o4dee@path) (o4d99@add-library-path! (expand-path o4dee@path)) (format (current-error-port) o4de7@message o4dee@path))) (string-split o4dec@paths '#\:))) o4dea@t) (void))) o4de6@paths))) (set! o4d9d@for-each-with-index (lambda (o4df0@proc o4df1@lst) (letrec ((o4df4@loop (lambda (o4df6@i o4df7@lst) (if (null? o4df7@lst) (if '#f '#f (void)) (begin (o4df0@proc o4df6@i (car o4df7@lst)) (o4df4@loop (+ o4df6@i '1) (cdr o4df7@lst))))))) (o4df4@loop '1 o4df1@lst)))) (set! o4d9f@rpad (lambda (o4dfa@str o4dfb@pad o4dfc@n) ((lambda (o4e00@rest) ((letrec ((o4e02@loop (lambda (o4e04@rest o4e05@ret) (if (<= o4e04@rest '0) o4e05@ret (o4e02@loop (- o4e04@rest '1) (string-append o4e05@ret o4dfb@pad)))))) o4e02@loop) o4e00@rest (format '"~a" o4dfa@str))) (- o4dfc@n (string-length (format '"~a" o4dfa@str)))))) (set! o4da1@condition-printer (lambda (o4e08@e o4e09@port) ((lambda (o4e0d@max-condition-len) (begin (set! o4e0d@max-condition-len (apply max (map (lambda (o4e1e@c) (string-length (symbol->string (record-type-name (record-rtd o4e1e@c))))) (simple-conditions o4e08@e)))) (begin (display '" Condition components:\n" o4e09@port) (o4d9d@for-each-with-index (lambda (o4e0e@i o4e0f@x) ((lambda (o4e12@rtd o4e13@fields-alist) (begin (format o4e09@port '" ~d. ~a" o4e0e@i (o4d9f@rpad (symbol->string (record-type-name o4e12@rtd)) '" " o4e0d@max-condition-len)) (if (null? o4e13@fields-alist) (newline o4e09@port) (void)) ((letrec ((o4e16@loop (lambda (o4e18@first o4e19@fields-alist) (if (null? o4e19@fields-alist) '() ((lambda (o4e1c@field) (begin (if (not o4e18@first) (display (o4d9f@rpad '"" '" " (+ '4 o4e0d@max-condition-len)) o4e09@port) (void)) (display '"       " o4e09@port) (display (car o4e1c@field) o4e09@port) (display '": " o4e09@port) (write (cdr o4e1c@field) o4e09@port) (newline o4e09@port) (o4e16@loop '#f (cdr o4e19@fields-alist)))) (car o4e19@fields-alist)))))) o4e16@loop) '#t o4e13@fields-alist))) (record-rtd o4e0f@x) (o4da3@record->field-alist o4e0f@x))) (simple-conditions o4e08@e))))) '#f))) (set! o4da3@record->field-alist (lambda (o4e20@r) ((lambda (o4e23@ref) (begin (set! o4e23@ref (lambda (o4e2e@rtd o4e2f@i o4e30@x) ((lambda (o4e34@val) (if (symbol? o4e34@val) (ungensym o4e34@val) o4e34@val)) ((record-accessor o4e2e@rtd o4e2f@i) o4e30@x)))) ((letrec ((o4e24@loop (lambda (o4e26@ret o4e27@rtd) (if o4e27@rtd (o4e24@loop (append o4e26@ret (o4da5@map-with-index (lambda (o4e2a@i o4e2b@field) (cons o4e2b@field (o4e23@ref o4e27@rtd o4e2a@i o4e20@r))) (vector->list (record-type-field-names o4e27@rtd)))) (record-type-parent o4e27@rtd)) o4e26@ret)))) o4e24@loop) '() (record-rtd o4e20@r)))) '#f))) (set! o4da5@map-with-index (lambda (o4e36@proc o4e37@lst) ((letrec ((o4e3a@loop (lambda (o4e3c@i o4e3d@lst o4e3e@ret) (if (null? o4e3d@lst) (reverse o4e3e@ret) (o4e3a@loop (+ o4e3c@i '1) (cdr o4e3d@lst) (cons (o4e36@proc o4e3c@i (car o4e3d@lst)) o4e3e@ret)))))) o4e3a@loop) '0 o4e37@lst '()))) (set! o4da7@repl (lambda o4e42@x ((lambda (o4e45@rec) (begin (set! o4e45@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (o4e48@o4e46) (lambda () (with-exception-handler (lambda (o4e4a@e) ((call/cc (lambda (o4e4c@o4e47) (o4e48@o4e46 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? o4e4a@e) (o4da1@condition-printer o4e4a@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" o4e4a@e))) (o4e4c@o4e47 (lambda () (raise-continuable o4e4a@e)))))))))) (lambda () ((letrec ((o4e4e@loop (lambda (o4e50@line o4e51@accum) ((lambda (o4e55@parentheses-ok? o4e57@eval-string-print) (begin (set! o4e55@parentheses-ok? (lambda (o4e5c@text) ((letrec ((o4e5e@loop (lambda (o4e60@chars o4e61@p0 o4e62@p1) (if (null? o4e60@chars) (= '0 o4e61@p0 o4e62@p1) ((lambda (o4e66@t) (if (memv o4e66@t '(#\()) (o4e5e@loop (cdr o4e60@chars) (+ o4e61@p0 '1) o4e62@p1) (if (memv o4e66@t '(#\))) (o4e5e@loop (cdr o4e60@chars) (- o4e61@p0 '1) o4e62@p1) (if (memv o4e66@t '(#\[)) (o4e5e@loop (cdr o4e60@chars) o4e61@p0 (+ o4e62@p1 '1)) (if (memv o4e66@t '(#\])) (o4e5e@loop (cdr o4e60@chars) o4e61@p0 (- o4e62@p1 '1)) (o4e5e@loop (cdr o4e60@chars) o4e61@p0 o4e62@p1)))))) (car o4e60@chars)))))) o4e5e@loop) (string->list o4e5c@text) '0 '0))) (set! o4e57@eval-string-print (lambda (o4e5a@text) (if (not (or (string=? '"\n" o4e5a@text) (= '0 (string-length o4e5a@text)))) (write (o4db5@eval-top-level (call-with-port (open-string-input-port o4e5a@text) read))) (void)))) (if (eof-object? o4e50@line) (begin (o4e57@eval-string-print o4e51@accum) (exit)) ((lambda (o4e58@current) (if (o4e55@parentheses-ok? o4e58@current) (o4e57@eval-string-print o4e58@current) (o4e4e@loop (get-line (current-input-port)) o4e58@current))) (string-append o4e51@accum o4e50@line))))) '#f '#f)))) o4e4e@loop) (get-line (current-input-port)) '""))))))) (newline) (o4e45@rec)))) (o4e45@rec))) '#f))) (set! o4da9@trace-printer (o2899@o27c3@make-parameter write)) (set! o4dab@command-line (o2899@o27c3@make-parameter (get-command-line))) (set! o4dad@local-library-path (lambda (o4e68@filename) (o2b01@o2990@library-path))) (set! o4daf@load/args (lambda (o4e6a@filename . o4e6c@args) (begin (apply o4dbf@load-r6rs-top-level o4e6a@filename 'load o4e6c@args) (void)))) (set! o4db1@load (lambda (o4e6e@filename) (begin (apply o4dbf@load-r6rs-top-level o4e6e@filename 'load (o4dab@command-line)) (void)))) (set! o4db3@ironscheme-build (lambda () (o4db1@load '"ironscheme-buildscript.ss"))) (set! o4db5@eval-top-level (lambda (o4e70@x) (o49c5@o2fc3@eval o4e70@x (o49db@o2fef@interaction-environment)))) (set! o4db7@compile-system-libraries (lambda () (o4db5@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! o4db9@compile (lambda (o4e72@filename) (o4dbf@load-r6rs-top-level o4e72@filename 'compile))) (set! o4dbb@compile->closure (lambda (o4e74@filename) (o4dbf@load-r6rs-top-level o4e74@filename 'closure))) (set! o4dbd@pre-compile-r6rs-file (lambda (o4e76@filename) (o4dbf@load-r6rs-top-level o4e76@filename 'compile))) (set! o4dbf@load-r6rs-top-level (lambda (o4e78@filename o4e79@how . o4e7c@args) ((lambda (o4e82@o4e7f o4e83@o4e81) ((lambda (o4e86@swap) (dynamic-wind o4e86@swap (lambda () ((lambda (o4e88@x*) ((lambda (o4e8a@t) (if (memv o4e8a@t '(closure)) (o49da@o2fed@pre-compile-r6rs-top-level o4e88@x*) (if (memv o4e8a@t '(load)) ((lambda (o4e90@o4e8d o4e91@o4e8f) ((lambda (o4e94@swap) (dynamic-wind o4e94@swap (lambda () ((o49d9@o2feb@compile-r6rs-top-level o4e88@x*))) o4e94@swap)) (lambda () ((lambda (o4e96@t) (begin (o4e90@o4e8d o4e91@o4e8f) (set! o4e91@o4e8f o4e96@t))) (o4e90@o4e8d))))) o4dab@command-line (cons o4e78@filename (car o4e7c@args))) (if (memv o4e8a@t '(compile)) (begin (o49d9@o2feb@compile-r6rs-top-level o4e88@x*) (o2b05@o2998@serialize-all o2894@o27b9@serialize-library o28ee@o28a7@compile-core-expr)) (if '#f '#f (void)))))) o4e79@how)) (with-input-from-file o4e78@filename (lambda () ((letrec ((o4e98@f (lambda () ((lambda (o4e9a@x) (if (eof-object? o4e9a@x) '() (cons o4e9a@x (o4e98@f)))) (o288c@o27a9@read-annotated))))) o4e98@f)))))) o4e86@swap)) (lambda () ((lambda (o4e9c@t) (begin (o4e82@o4e7f o4e83@o4e81) (set! o4e83@o4e81 o4e9c@t))) (o4e82@o4e7f))))) o2b01@o2990@library-path (o4dad@local-library-path o4e78@filename)))) (set! o4dc1@load-r6rs-top-level-sexp (lambda (o4e9e@import-spec o4e9f@thunk) ((lambda (o4ea6@o4ea3 o4ea7@o4ea5) ((lambda (o4eaa@swap) (dynamic-wind o4eaa@swap (lambda () ((lambda (o4eb0@o4ead o4eb1@o4eaf) ((lambda (o4eb4@swap) (dynamic-wind o4eb4@swap (lambda () ((o49d9@o2feb@compile-r6rs-top-level (list (cons 'import o4e9e@import-spec) (list o4e9f@thunk))))) o4eb4@swap)) (lambda () ((lambda (o4eb6@t) (begin (o4eb0@o4ead o4eb1@o4eaf) (set! o4eb1@o4eaf o4eb6@t))) (o4eb0@o4ead))))) o4dab@command-line '())) o4eaa@swap)) (lambda () ((lambda (o4eb8@t) (begin (o4ea6@o4ea3 o4ea7@o4ea5) (set! o4ea7@o4ea5 o4eb8@t))) (o4ea6@o4ea3))))) o2b01@o2990@library-path (o4dad@local-library-path '"")))) (begin (set! o4ece@o4dc1@load-r6rs-top-level-sexp o4dc1@load-r6rs-top-level-sexp) (set! o4ecd@o4dbf@load-r6rs-top-level o4dbf@load-r6rs-top-level) (set! o4ecc@o4dbd@pre-compile-r6rs-file o4dbd@pre-compile-r6rs-file) (set! o4ecb@o4dbb@compile->closure o4dbb@compile->closure) (set! o4eca@o4db9@compile o4db9@compile) (set! o4ec9@o4db7@compile-system-libraries o4db7@compile-system-libraries) (set! o4ec8@o4db5@eval-top-level o4db5@eval-top-level) (set! o4ec7@o4db3@ironscheme-build o4db3@ironscheme-build) (set! o4ec6@o4db1@load o4db1@load) (set! o4ec5@o4daf@load/args o4daf@load/args) (set! o4ec4@o4dad@local-library-path o4dad@local-library-path) (set! o4ec3@o4dab@command-line o4dab@command-line) (set! o4ec2@o4da9@trace-printer o4da9@trace-printer) (set! o4ec1@o4da7@repl o4da7@repl) (set! o4ec0@o4da5@map-with-index o4da5@map-with-index) (set! o4ebf@o4da3@record->field-alist o4da3@record->field-alist) (set! o4ebe@o4da1@condition-printer o4da1@condition-printer) (set! o4ebd@o4d9f@rpad o4d9f@rpad) (set! o4ebc@o4d9d@for-each-with-index o4d9d@for-each-with-index) (set! o4ebb@o4d9b@parse-and-add-library-path o4d9b@parse-and-add-library-path) (set! o4eba@o4d99@add-library-path! o4d99@add-library-path!) (o2b06@o299a@current-precompiled-library-loader o2895@o27bb@load-serialized-library) (set-symbol-value! 'load o4db1@load) (set-symbol-value! 'pre-compile-r6rs-file o4dbd@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs o4db5@eval-top-level) (set-symbol-value! 'int-env-syms o49bc@o2fb1@interaction-environment-symbols) (set-symbol-value! 'expanded2core o28ed@o28a5@expanded->core) (set-symbol-value! 'trace-printer o4da9@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (o4dc2@c) (condition (o4cf6@o4b00@make-non-continuable-violation) (o4cec@o4ae7@make-who-condition 'raise) (o4cb0@o4a48@make-message-condition '"returned from non-continuable exception") (o4ce2@o4acc@make-irritants-condition (list o4dc2@c))))) (o4d9b@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (o4d9b@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (o4d99@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (o4d99@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (o4d99@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) ((lambda (o4dc4@prefix) (o2b02@o2992@library-extensions (o4dc4@prefix '".mosh" (o2b02@o2992@library-extensions)))) (lambda (o4dc6@ext o4dc7@ls) (append (map (lambda (o4dca@x) (string-append o4dc6@ext o4dca@x)) o4dc7@ls) o4dc7@ls))) ((lambda (o4dcc@args o4dcd@port) ((lambda (o4dd1@ref) (begin (set! o4dd1@ref (lambda (o4ddc@rtd o4ddd@i o4dde@x) ((lambda (o4de2@val) (if (symbol? o4de2@val) (ungensym o4de2@val) o4de2@val)) ((record-accessor o4ddc@rtd o4ddd@i) o4dde@x)))) (with-exception-handler (lambda (o4dd2@c) (if (condition? o4dd2@c) (o4da1@condition-printer o4dd2@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" o4dd2@c))) (lambda () (if ((call/cc (lambda (o4dd6@o4dd4) (lambda () (with-exception-handler (lambda (o4dd8@c) ((call/cc (lambda (o4dda@o4dd5) (o4dd6@o4dd4 (lambda () (if '#t '#f (o4dda@o4dd5 (lambda () (raise-continuable o4dd8@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (o4dc1@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? o4dcc@args) (o4da7@repl) (o4dbf@load-r6rs-top-level (car o4dcc@args) 'load (cdr o4dcc@args)))))))) '#f)) (o4dab@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
