;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! f28c9@library-file-path->cache-path (unspecified)) (set! f28cb@read-annotated (unspecified)) (set! f28cd@annotation-stripped (unspecified)) (set! f28cf@annotation? (unspecified)) (set! f28d1@annotation-source (unspecified)) (set! f28d3@annotation-expression (unspecified)) (set! f28d5@scm->fasl (unspecified)) (set! f28d7@fasl-save (unspecified)) (set! f28d9@fasl-load (unspecified)) (set! f28db@serialize-library (unspecified)) (set! f28dd@load-serialized-library (unspecified)) (set! f28df@make-record-printer (unspecified)) (set! f28e1@compile-core (unspecified)) (set! f28e3@read-library-source-file (unspecified)) (set! f28e5@make-parameter (unspecified)) (set! f28e7@mosh-cache-dir (unspecified)) (set! f297d@file-options-spec (unspecified)) (set! f28c9@library-file-path->cache-path (lambda (f297e@x) (call-with-values (lambda () (open-string-output-port)) (lambda (f2984@f2981 f2985@f2983) (let ((f2988@extract f2985@f2983) (f2989@p f2984@f2981)) (let ((f298d@display-hex '#f)) (begin (set! f298d@display-hex (lambda (f2996@n) (if (<= '0 f2996@n '9) (display f2996@n f2989@p) (display (integer->char (+ (char->integer '#\a) (- f2996@n '10))) f2989@p)))) (begin (let f2990@f ((f298e@ls (string-split f297e@x '#\/))) (if (not (null? f298e@ls)) (begin (display '"_" f2989@p) (for-each (lambda (f2992@c) (if (or (char<=? '#\a f2992@c '#\z) (char<=? '#\A f2992@c '#\Z) (char<=? '#\0 f2992@c '#\9) (memv f2992@c '(#\- #\. #\_ #\~))) (display f2992@c f2989@p) (begin (display '"%" f2989@p) (let ((f2994@n (char->integer f2992@c))) (begin (f298d@display-hex (quotient f2994@n '16)) (f298d@display-hex (remainder f2994@n '16))))))) (string->list (car f298e@ls))) (f2990@f (cdr f298e@ls))) (void))) (f2988@extract))))))))) (set! f29f8@f28c9@library-file-path->cache-path f28c9@library-file-path->cache-path) (set! f28cb@read-annotated read) (set! f29f9@f28cb@read-annotated f28cb@read-annotated) (set! f28cd@annotation-stripped (lambda (f2998@x) (f28d3@annotation-expression f2998@x))) (set! f29fa@f28cd@annotation-stripped f28cd@annotation-stripped) (set! f28cf@annotation? (lambda (f299a@x) (source-info f299a@x))) (set! f29fb@f28cf@annotation? f28cf@annotation?) (set! f28d1@annotation-source (lambda (f299c@x) (source-info f299c@x))) (set! f29fc@f28d1@annotation-source f28d1@annotation-source) (set! f28d3@annotation-expression (lambda (f299e@x) (if (pair? f299e@x) (cons (car f299e@x) (cdr f299e@x)) (if (procedure? f299e@x) (set-source-info! f299e@x '#f) f299e@x)))) (set! f29fd@f28d3@annotation-expression f28d3@annotation-expression) (set! f28d5@scm->fasl (lambda (f29a0@filename) (string-append (f28e7@mosh-cache-dir) '"/" (f28c9@library-file-path->cache-path f29a0@filename) '".mosh-fasl"))) (set! f29fe@f28d5@scm->fasl f28d5@scm->fasl) (set! f28d7@fasl-save (lambda (f29a2@filename f29a3@obj) (call-with-port (open-file-output-port f29a2@filename) (lambda (f29a6@port) ((symbol-value 'fasl-write!) f29a3@obj f29a6@port))))) (set! f29ff@f28d7@fasl-save f28d7@fasl-save) (set! f28d9@fasl-load (lambda (f29a8@filename) (call-with-port (open-file-input-port f29a8@filename) (symbol-value 'fasl-read!)))) (set! f2a00@f28d9@fasl-load f28d9@fasl-load) (set! f28db@serialize-library (lambda (f29aa@filename f29ab@obj) (begin (let ((f29ae@expanded2core (symbol-value 'expanded2core))) (let ((f29b0@compile (symbol-value 'compile-w/o-halt))) (let ((f29b2@code f29ab@obj)) (let ((f29b4@pivot (cddddr (cddddr f29b2@code)))) (let ((f29b6@visit (f29b0@compile (f29ae@expanded2core (car f29b4@pivot))))) (begin (set-car! f29b4@pivot f29b6@visit) (let ((f29b8@pivot (cdr f29b4@pivot))) (let ((f29ba@invoke (f29b0@compile (f29ae@expanded2core (car f29b8@pivot))))) (set-car! f29b8@pivot f29ba@invoke))))))))) (let ((f29bc@fasl-file (f28d5@scm->fasl f29aa@filename))) (begin (if (file-exists? f29bc@fasl-file) (delete-file f29bc@fasl-file) (void)) ((call/cc (lambda (f29c0@f29be) (lambda () (with-exception-handler (lambda (f29c2@c) ((call/cc (lambda (f29c4@f29bf) (f29c0@f29be (lambda () (if '#t (begin (format (current-error-port) '"Warning:serialize-library failed " f29aa@filename) (if (file-exists? f29bc@fasl-file) (delete-file f29bc@fasl-file) (void)) '#f) (f29c4@f29bf (lambda () (raise-continuable f29c2@c)))))))))) (lambda () (f28d7@fasl-save f29bc@fasl-file f29ab@obj)))))))))))) (set! f2a01@f28db@serialize-library f28db@serialize-library) (set! f28dd@load-serialized-library (lambda (f29c6@filename f29c7@obj) (and (f28e7@mosh-cache-dir) (let ((f29ca@fasl-file (f28d5@scm->fasl f29c6@filename))) (if (and (file-exists? f29ca@fasl-file) ((symbol-value 'file-newer?) f29ca@fasl-file f29c6@filename)) (let ((f29cc@expanded2core (symbol-value 'expanded2core))) (let ((f29ce@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((f29d0@code (f28d9@fasl-load f29ca@fasl-file))) (let ((f29d2@pivot (cddddr (cddddr f29d0@code)))) (let ((f29d4@visit (car f29d2@pivot))) (let ((f29d6@visit-proc (lambda () (f29ce@eval-compiled-core f29d4@visit)))) (begin (set-car! f29d2@pivot f29d6@visit-proc) (let ((f29d8@pivot (cdr f29d2@pivot))) (let ((f29da@invoke (car f29d8@pivot))) (begin (set-car! f29d8@pivot (lambda () (f29ce@eval-compiled-core f29da@invoke))) (apply f29c7@obj f29d0@code))))))))))) '#f))))) (set! f2a02@f28dd@load-serialized-library f28dd@load-serialized-library) (set! f28df@make-record-printer (lambda (f29dc@name f29dd@printer) (lambda f29e0@x (begin (display '"record printer") (for-each display f29e0@x))))) (set! f2a03@f28df@make-record-printer f28df@make-record-printer) (set! f28e1@compile-core (lambda f29e2@x (apply error 'comile-core '"not implementated" f29e2@x))) (set! f2a04@f28e1@compile-core f28e1@compile-core) (set! f28e3@read-library-source-file (lambda (f29e4@file-name) (with-input-from-file f29e4@file-name f28cb@read-annotated))) (set! f2a05@f28e3@read-library-source-file f28e3@read-library-source-file) (set! f28e5@make-parameter (lambda f29f4 (let ((f29f5 (length f29f4))) (if (= f29f5 '1) (apply (lambda (f29e6@x) (f28e5@make-parameter f29e6@x (lambda (f29e8@x) f29e8@x))) f29f4) (if (= f29f5 '2) (apply (lambda (f29ea@x f29eb@fender) (let ((f29ee@x (f29eb@fender f29ea@x))) (lambda f29f2 (let ((f29f3 (length f29f2))) (if (= f29f3 '0) (apply (lambda () f29ee@x) f29f2) (if (= f29f3 '1) (apply (lambda (f29f0@v) (set! f29ee@x (f29eb@fender f29f0@v))) f29f2) (error 'apply '"invalid arg count"))))))) f29f4) (error 'apply '"invalid arg count")))))) (set! f2a06@f28e5@make-parameter f28e5@make-parameter) (set! f28e7@mosh-cache-dir (f28e5@make-parameter '#f)) (set! f2a07@f28e7@mosh-cache-dir f28e7@mosh-cache-dir) (set! f297d@file-options-spec (lambda (f29f6@x) f29f6@x)) (set! f2a08@f297d@file-options-spec f297d@file-options-spec) (void))
(begin (set! f2a0e@current-primitive-locations (unspecified)) (set! f2a10@mutable? (unspecified)) (set! f2a12@rewriter (unspecified)) (set! f2a14@expanded->core (unspecified)) (set! f2a16@compile-core-expr (unspecified)) (set! f2a18@pretty-print (unspecified)) (set! f2a1a@compile-core-expr-to-port (unspecified)) (set! f2a0e@current-primitive-locations (f2a06@f28e5@make-parameter (lambda (f2a1b@x) '#f) (lambda (f2a1d@p) f2a1d@p))) (set! f2a59@f2a0e@current-primitive-locations f2a0e@current-primitive-locations) (set! f2a10@mutable? (lambda (f2a1f@x) (or (pair? f2a1f@x) (vector? f2a1f@x) (hashtable? f2a1f@x)))) (set! f2a5a@f2a10@mutable? f2a10@mutable?) (set! f2a12@rewriter (lambda (f2a21@quote-hack?) (let ((f2a24@f '#f)) (begin (set! f2a24@f (lambda (f2a25@x) (if (pair? f2a25@x) (let ((f2a27@t (car f2a25@x))) (if (memv f2a27@t '(quote)) (if (and f2a21@quote-hack? (f2a10@mutable? (cadr f2a25@x))) (let ((f2a29@g (gensym))) (begin (set-symbol-value! f2a29@g (cadr f2a25@x)) f2a29@g)) f2a25@x) (if (memv f2a27@t '(case-lambda)) (cons 'case-lambda (map (lambda (f2a2b@x) (cons (car f2a2b@x) (map f2a24@f (cdr f2a2b@x)))) (cdr f2a25@x))) (if (memv f2a27@t '(lambda)) (cons* 'lambda (cadr f2a25@x) (map f2a24@f (cddr f2a25@x))) (if (memv f2a27@t '(letrec)) (let ((f2a2d@bindings (cadr f2a25@x)) (f2a2e@body* (cddr f2a25@x))) (let ((f2a31@lhs* (map car f2a2d@bindings)) (f2a32@rhs* (map cadr f2a2d@bindings))) (cons* 'letrec (map list f2a31@lhs* (map f2a24@f f2a32@rhs*)) (map f2a24@f f2a2e@body*)))) (if (memv f2a27@t '(letrec*)) (let ((f2a35@bindings (cadr f2a25@x)) (f2a36@body* (cddr f2a25@x))) (let ((f2a39@lhs* (map car f2a35@bindings)) (f2a3a@rhs* (map cadr f2a35@bindings))) (cons* 'letrec* (map list f2a39@lhs* (map f2a24@f f2a3a@rhs*)) (map f2a24@f f2a36@body*)))) (if (memv f2a27@t '(library-letrec*)) (let ((f2a3d@name (cadr f2a25@x)) (f2a3e@x (cdr f2a25@x))) (let ((f2a41@bindings (cadr f2a3e@x)) (f2a42@body* (cddr f2a3e@x))) (let ((f2a45@lhs* (map car f2a41@bindings)) (f2a46@lhs** (map cadr f2a41@bindings)) (f2a47@rhs* (map caddr f2a41@bindings))) (cons* 'library-letrec* f2a3d@name (map list f2a45@lhs* f2a46@lhs** (map f2a24@f f2a47@rhs*)) (map f2a24@f f2a42@body*))))) (if (memv f2a27@t '(begin)) (cons 'begin (map f2a24@f (cdr f2a25@x))) (if (memv f2a27@t '(set!)) (list 'set! (cadr f2a25@x) (f2a24@f (caddr f2a25@x))) (if (memv f2a27@t '(primitive)) (let ((f2a4b@op (cadr f2a25@x))) (let ((f2a4d@t ((f2a0e@current-primitive-locations) f2a4b@op))) (if f2a4d@t ((lambda (f2a4f@loc) f2a4f@loc) f2a4d@t) f2a4b@op))) (if (memv f2a27@t '(define)) f2a25@x (if (list? f2a25@x) (map f2a24@f f2a25@x) (error 'rewrite '"invalid form ~s ~s" f2a25@x (list? f2a25@x)))))))))))))) f2a25@x))) f2a24@f)))) (set! f2a5b@f2a12@rewriter f2a12@rewriter) (set! f2a14@expanded->core (lambda (f2a51@x) ((f2a12@rewriter '#f) f2a51@x))) (set! f2a5c@f2a14@expanded->core f2a14@expanded->core) (set! f2a16@compile-core-expr (lambda (f2a53@x) ((f2a12@rewriter '#f) f2a53@x))) (set! f2a5d@f2a16@compile-core-expr f2a16@compile-core-expr) (set! f2a18@pretty-print write) (set! f2a5e@f2a18@pretty-print f2a18@pretty-print) (set! f2a1a@compile-core-expr-to-port (lambda (f2a55@x f2a56@p) (f2a18@pretty-print ((f2a12@rewriter '#f) f2a55@x) f2a56@p))) (set! f2a5f@f2a1a@compile-core-expr-to-port f2a1a@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! f2aae@make-collection (unspecified)) (set! f2ab0@current-library-collection (unspecified)) (set! f2ab2@rp (unspecified)) (set! f2abc@library? (unspecified)) (set! f2abe@library-id (unspecified)) (set! f2ac0@set-library-id! (unspecified)) (set! f2ac2@library-name (unspecified)) (set! f2ac4@set-library-name! (unspecified)) (set! f2ac6@library-version (unspecified)) (set! f2ac8@set-library-version! (unspecified)) (set! f2aca@library-imp* (unspecified)) (set! f2acc@set-library-imp*! (unspecified)) (set! f2ace@library-vis* (unspecified)) (set! f2ad0@set-library-vis*! (unspecified)) (set! f2ad2@library-inv* (unspecified)) (set! f2ad4@set-library-inv*! (unspecified)) (set! f2ad6@library-subst (unspecified)) (set! f2ad8@set-library-subst! (unspecified)) (set! f2ada@library-env (unspecified)) (set! f2adc@set-library-env! (unspecified)) (set! f2ade@library-visit-state (unspecified)) (set! f2ae0@set-library-visit-state! (unspecified)) (set! f2ae2@library-invoke-state (unspecified)) (set! f2ae4@set-library-invoke-state! (unspecified)) (set! f2ae6@library-visit-code (unspecified)) (set! f2ae8@set-library-visit-code! (unspecified)) (set! f2aea@library-invoke-code (unspecified)) (set! f2aec@set-library-invoke-code! (unspecified)) (set! f2aee@library-visible? (unspecified)) (set! f2af0@set-library-visible?! (unspecified)) (set! f2af2@library-source-file-name (unspecified)) (set! f2af4@set-library-source-file-name! (unspecified)) (set! f2af6@dummy (unspecified)) (set! f2af8@find-dependencies (unspecified)) (set! f2afa@find-library-by (unspecified)) (set! f2afc@library-path (unspecified)) (set! f2afe@library-extensions (unspecified)) (set! f2b00@library-name->file-name (unspecified)) (set! f2b02@file-locator (unspecified)) (set! f2b04@serialize-all (unspecified)) (set! f2b06@current-precompiled-library-loader (unspecified)) (set! f2b08@try-load-from-file (unspecified)) (set! f2b0a@library-loader (unspecified)) (set! f2b0c@current-library-expander (unspecified)) (set! f2b0e@external-pending-libraries (unspecified)) (set! f2b10@find-external-library (unspecified)) (set! f2b12@find-library-by-name (unspecified)) (set! f2b14@library-exists? (unspecified)) (set! f2b16@find-library-by-spec/die (unspecified)) (set! f2b18@label->binding-table (unspecified)) (set! f2b1a@install-library-record (unspecified)) (set! f2b1c@install-library (unspecified)) (set! f2b1e@imported-label->binding (unspecified)) (set! f2b20@invoke-library (unspecified)) (set! f2b22@visit-library (unspecified)) (set! f2b24@invoke-library-by-spec (unspecified)) (set! f2b26@installed-libraries (unspecified)) (set! f2b28@library-spec (unspecified)) (set! f2aae@make-collection (lambda () (let ((f2b29@set '())) (let ((f2b2c@set-cons '#f)) (begin (set! f2b2c@set-cons (lambda (f2b31@x f2b32@ls) (if (memq f2b31@x f2b32@ls) f2b32@ls (cons f2b31@x f2b32@ls)))) (lambda f2b2f (let ((f2b30 (length f2b2f))) (if (= f2b30 '0) (apply (lambda () f2b29@set) f2b2f) (if (= f2b30 '1) (apply (lambda (f2b2d@x) (set! f2b29@set (f2b2c@set-cons f2b2d@x f2b29@set))) f2b2f) (error 'apply '"invalid arg count")))))))))) (set! f2c9d@f2aae@make-collection f2aae@make-collection) (set! f2ab0@current-library-collection (f2a06@f28e5@make-parameter (f2aae@make-collection) (lambda (f2b35@x) (begin (if (not (procedure? f2b35@x)) (assertion-violation 'current-library-collection '"not a procedure" f2b35@x) (void)) f2b35@x)))) (set! f2c9e@f2ab0@current-library-collection f2ab0@current-library-collection) (set! f2ab2@rp (f2a03@f28df@make-record-printer 'library (lambda (f2b37@x f2b38@p f2b39@wr) (begin (if (not (f2abc@library? f2b37@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (f2ac6@library-version f2b37@x)) (f2ac2@library-name f2b37@x) (append (f2ac2@library-name f2b37@x) (list (f2ac6@library-version f2b37@x))))) f2b38@p))))) (set! f2c9f@f2ab2@rp f2ab2@rp) (set! f2abc@library? (lambda (f2b3d@x) (and (simple-struct? f2b3d@x) (eq? (simple-struct-name f2b3d@x) 'library)))) (set! f2ca0@f2abc@library? f2abc@library?) (set! f2abe@library-id (lambda (f2b3f@x) (simple-struct-ref f2b3f@x '0))) (set! f2ca1@f2abe@library-id f2abe@library-id) (set! f2ac0@set-library-id! (lambda (f2b41@x f2b42@val) (simple-struct-set! f2b41@x '0 f2b42@val))) (set! f2ca2@f2ac0@set-library-id! f2ac0@set-library-id!) (set! f2ac2@library-name (lambda (f2b45@x) (simple-struct-ref f2b45@x '1))) (set! f2ca3@f2ac2@library-name f2ac2@library-name) (set! f2ac4@set-library-name! (lambda (f2b47@x f2b48@val) (simple-struct-set! f2b47@x '1 f2b48@val))) (set! f2ca4@f2ac4@set-library-name! f2ac4@set-library-name!) (set! f2ac6@library-version (lambda (f2b4b@x) (simple-struct-ref f2b4b@x '2))) (set! f2ca5@f2ac6@library-version f2ac6@library-version) (set! f2ac8@set-library-version! (lambda (f2b4d@x f2b4e@val) (simple-struct-set! f2b4d@x '2 f2b4e@val))) (set! f2ca6@f2ac8@set-library-version! f2ac8@set-library-version!) (set! f2aca@library-imp* (lambda (f2b51@x) (simple-struct-ref f2b51@x '3))) (set! f2ca7@f2aca@library-imp* f2aca@library-imp*) (set! f2acc@set-library-imp*! (lambda (f2b53@x f2b54@val) (simple-struct-set! f2b53@x '3 f2b54@val))) (set! f2ca8@f2acc@set-library-imp*! f2acc@set-library-imp*!) (set! f2ace@library-vis* (lambda (f2b57@x) (simple-struct-ref f2b57@x '4))) (set! f2ca9@f2ace@library-vis* f2ace@library-vis*) (set! f2ad0@set-library-vis*! (lambda (f2b59@x f2b5a@val) (simple-struct-set! f2b59@x '4 f2b5a@val))) (set! f2caa@f2ad0@set-library-vis*! f2ad0@set-library-vis*!) (set! f2ad2@library-inv* (lambda (f2b5d@x) (simple-struct-ref f2b5d@x '5))) (set! f2cab@f2ad2@library-inv* f2ad2@library-inv*) (set! f2ad4@set-library-inv*! (lambda (f2b5f@x f2b60@val) (simple-struct-set! f2b5f@x '5 f2b60@val))) (set! f2cac@f2ad4@set-library-inv*! f2ad4@set-library-inv*!) (set! f2ad6@library-subst (lambda (f2b63@x) (simple-struct-ref f2b63@x '6))) (set! f2cad@f2ad6@library-subst f2ad6@library-subst) (set! f2ad8@set-library-subst! (lambda (f2b65@x f2b66@val) (simple-struct-set! f2b65@x '6 f2b66@val))) (set! f2cae@f2ad8@set-library-subst! f2ad8@set-library-subst!) (set! f2ada@library-env (lambda (f2b69@x) (simple-struct-ref f2b69@x '7))) (set! f2caf@f2ada@library-env f2ada@library-env) (set! f2adc@set-library-env! (lambda (f2b6b@x f2b6c@val) (simple-struct-set! f2b6b@x '7 f2b6c@val))) (set! f2cb0@f2adc@set-library-env! f2adc@set-library-env!) (set! f2ade@library-visit-state (lambda (f2b6f@x) (simple-struct-ref f2b6f@x '8))) (set! f2cb1@f2ade@library-visit-state f2ade@library-visit-state) (set! f2ae0@set-library-visit-state! (lambda (f2b71@x f2b72@val) (simple-struct-set! f2b71@x '8 f2b72@val))) (set! f2cb2@f2ae0@set-library-visit-state! f2ae0@set-library-visit-state!) (set! f2ae2@library-invoke-state (lambda (f2b75@x) (simple-struct-ref f2b75@x '9))) (set! f2cb3@f2ae2@library-invoke-state f2ae2@library-invoke-state) (set! f2ae4@set-library-invoke-state! (lambda (f2b77@x f2b78@val) (simple-struct-set! f2b77@x '9 f2b78@val))) (set! f2cb4@f2ae4@set-library-invoke-state! f2ae4@set-library-invoke-state!) (set! f2ae6@library-visit-code (lambda (f2b7b@x) (simple-struct-ref f2b7b@x '10))) (set! f2cb5@f2ae6@library-visit-code f2ae6@library-visit-code) (set! f2ae8@set-library-visit-code! (lambda (f2b7d@x f2b7e@val) (simple-struct-set! f2b7d@x '10 f2b7e@val))) (set! f2cb6@f2ae8@set-library-visit-code! f2ae8@set-library-visit-code!) (set! f2aea@library-invoke-code (lambda (f2b81@x) (simple-struct-ref f2b81@x '11))) (set! f2cb7@f2aea@library-invoke-code f2aea@library-invoke-code) (set! f2aec@set-library-invoke-code! (lambda (f2b83@x f2b84@val) (simple-struct-set! f2b83@x '11 f2b84@val))) (set! f2cb8@f2aec@set-library-invoke-code! f2aec@set-library-invoke-code!) (set! f2aee@library-visible? (lambda (f2b87@x) (simple-struct-ref f2b87@x '12))) (set! f2cb9@f2aee@library-visible? f2aee@library-visible?) (set! f2af0@set-library-visible?! (lambda (f2b89@x f2b8a@val) (simple-struct-set! f2b89@x '12 f2b8a@val))) (set! f2cba@f2af0@set-library-visible?! f2af0@set-library-visible?!) (set! f2af2@library-source-file-name (lambda (f2b8d@x) (simple-struct-ref f2b8d@x '13))) (set! f2cbb@f2af2@library-source-file-name f2af2@library-source-file-name) (set! f2af4@set-library-source-file-name! (lambda (f2b8f@x f2b90@val) (simple-struct-set! f2b8f@x '13 f2b90@val))) (set! f2cbc@f2af4@set-library-source-file-name! f2af4@set-library-source-file-name!) (set! f2af6@dummy '3) (set! f2cbd@f2af6@dummy f2af6@dummy) (set! f2af8@find-dependencies (lambda (f2b93@ls) (if (null? f2b93@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! f2cbe@f2af8@find-dependencies f2af8@find-dependencies) (set! f2afa@find-library-by (lambda (f2b95@pred) (let f2b99@f ((f2b97@ls ((f2ab0@current-library-collection)))) (if (null? f2b97@ls) '#f (if (f2b95@pred (car f2b97@ls)) (car f2b97@ls) (f2b99@f (cdr f2b97@ls))))))) (set! f2cbf@f2afa@find-library-by f2afa@find-library-by) (set! f2afc@library-path (f2a06@f28e5@make-parameter '(".") (lambda (f2b9b@x) (if (and (list? f2b9b@x) (for-all string? f2b9b@x)) (map (lambda (f2b9d@x) f2b9d@x) f2b9b@x) (assertion-violation 'library-path '"not a list of strings" f2b9b@x))))) (set! f2cc0@f2afc@library-path f2afc@library-path) (set! f2afe@library-extensions (f2a06@f28e5@make-parameter '(".sls" ".ss" ".scm") (lambda (f2b9f@x) (if (and (list? f2b9f@x) (for-all string? f2b9f@x)) (map (lambda (f2ba1@x) f2ba1@x) f2b9f@x) (assertion-violation 'library-extensions '"not a list of strings" f2b9f@x))))) (set! f2cc1@f2afe@library-extensions f2afe@library-extensions) (set! f2b00@library-name->file-name (lambda (f2ba3@x) (call-with-values (lambda () (open-string-output-port)) (lambda (f2ba9@f2ba6 f2baa@f2ba8) (let ((f2bad@extract f2baa@f2ba8) (f2bae@p f2ba9@f2ba6)) (let ((f2bb2@display-hex '#f)) (begin (set! f2bb2@display-hex (lambda (f2bbb@n) (if (<= '0 f2bbb@n '9) (display f2bbb@n f2bae@p) (display (integer->char (+ (char->integer '#\a) (- f2bbb@n '10))) f2bae@p)))) (begin (let f2bb5@f ((f2bb3@ls f2ba3@x)) (if (not (null? f2bb3@ls)) (begin (display '"/" f2bae@p) (for-each (lambda (f2bb7@c) (if (or (char<=? '#\a f2bb7@c '#\z) (char<=? '#\A f2bb7@c '#\Z) (char<=? '#\0 f2bb7@c '#\9) (memv f2bb7@c '(#\- #\. #\_ #\~))) (display f2bb7@c f2bae@p) (begin (display '"%" f2bae@p) (let ((f2bb9@n (char->integer f2bb7@c))) (begin (f2bb2@display-hex (quotient f2bb9@n '16)) (f2bb2@display-hex (remainder f2bb9@n '16))))))) (string->list (symbol->string (car f2bb3@ls)))) (f2bb5@f (cdr f2bb3@ls))) (void))) (f2bad@extract))))))))) (set! f2cc2@f2b00@library-name->file-name f2b00@library-name->file-name) (set! f2b02@file-locator (f2a06@f28e5@make-parameter (lambda (f2bbd@x) (let ((f2bbf@str (f2b00@library-name->file-name f2bbd@x))) (let f2bc7@f ((f2bc1@ls (f2afc@library-path)) (f2bc2@exts (f2afe@library-extensions)) (f2bc3@failed-list '())) (if (null? f2bc1@ls) (let ((f2bd1@f2bcc '#f) (f2bd3@f2bce '#f) (f2bd5@f2bcd '#f) (f2bd8@f2bcb '#f) (f2bda@make-library-resolution-condition '#f) (f2bdc@f2bc9 '#f) (f2bde@f2bca '#f) (f2be0@library-resolution-condition? '#f) (f2be2@condition-library '#f) (f2be4@condition-files '#f)) (begin (set! f2bd1@f2bcc (make-record-type-descriptor '&library-resolution f4ed8@f4c1f@&condition-rtd 'f2bcf '#f '#f '#((immutable library) (immutable files)))) (set! f2bd3@f2bce '#f) (set! f2bd5@f2bcd (make-record-constructor-descriptor f2bd1@f2bcc f4ed9@f4c21@&condition-rcd f2bd3@f2bce)) (set! f2bd8@f2bcb (record-predicate f2bd1@f2bcc)) (set! f2bda@make-library-resolution-condition (record-constructor f2bd5@f2bcd)) (set! f2bdc@f2bc9 (record-accessor f2bd1@f2bcc '0)) (set! f2bde@f2bca (record-accessor f2bd1@f2bcc '1)) (set! f2be0@library-resolution-condition? (condition-predicate f2bd1@f2bcc)) (set! f2be2@condition-library (condition-accessor f2bd1@f2bcc f2bdc@f2bc9)) (set! f2be4@condition-files (condition-accessor f2bd1@f2bcc f2bde@f2bca)) (raise (condition (f4ef8@f4cb9@make-error) (f4f1a@f4d15@make-who-condition 'expander) (f4ede@f4c76@make-message-condition '"cannot locate library in library-path") (f2bda@make-library-resolution-condition f2bbd@x (reverse f2bc3@failed-list)))))) (if (null? f2bc2@exts) (f2bc7@f (cdr f2bc1@ls) (f2afe@library-extensions) f2bc3@failed-list) (let ((f2be5@name (string-append (car f2bc1@ls) f2bbf@str (car f2bc2@exts)))) (if (file-exists? f2be5@name) f2be5@name (f2bc7@f f2bc1@ls (cdr f2bc2@exts) (cons f2be5@name f2bc3@failed-list))))))))) (lambda (f2be7@f) (if (procedure? f2be7@f) f2be7@f (assertion-violation 'file-locator '"not a procedure" f2be7@f))))) (set! f2cc3@f2b02@file-locator f2b02@file-locator) (set! f2b04@serialize-all (lambda (f2be9@serialize f2bea@compile) (let ((f2bee@library-desc '#f)) (begin (set! f2bee@library-desc (lambda (f2bf1@x) (list (f2abe@library-id f2bf1@x) (f2ac2@library-name f2bf1@x)))) (for-each (lambda (f2bef@x) (if (f2af2@library-source-file-name f2bef@x) (f2be9@serialize (f2af2@library-source-file-name f2bef@x) (list (f2abe@library-id f2bef@x) (f2ac2@library-name f2bef@x) (f2ac6@library-version f2bef@x) (map f2bee@library-desc (f2aca@library-imp* f2bef@x)) (map f2bee@library-desc (f2ace@library-vis* f2bef@x)) (map f2bee@library-desc (f2ad2@library-inv* f2bef@x)) (f2ad6@library-subst f2bef@x) (f2ada@library-env f2bef@x) (f2bea@compile (f2ae6@library-visit-code f2bef@x)) (f2bea@compile (f2aea@library-invoke-code f2bef@x)) (f2aee@library-visible? f2bef@x))) (void))) ((f2ab0@current-library-collection))))))) (set! f2cc4@f2b04@serialize-all f2b04@serialize-all) (set! f2b06@current-precompiled-library-loader (f2a06@f28e5@make-parameter (lambda (f2bf3@filename f2bf4@sk) '#f))) (set! f2cc5@f2b06@current-precompiled-library-loader f2b06@current-precompiled-library-loader) (set! f2b08@try-load-from-file (lambda (f2bf7@filename) ((f2b06@current-precompiled-library-loader) f2bf7@filename (lambda f2c1d (let ((f2c1e (length f2c1d))) (if (= f2c1e '11) (apply (lambda (f2bf9@id f2bfa@name f2bfb@ver f2bfc@imp* f2bfd@vis* f2bfe@inv* f2bff@exp-subst f2c00@exp-env f2c01@visit-proc f2c02@invoke-proc f2c03@visible?) (let f2c11@f ((f2c0f@deps (append f2bfc@imp* f2bfd@vis* f2bfe@inv*))) (if (null? f2c0f@deps) (begin (f2b1c@install-library f2bf9@id f2bfa@name f2bfb@ver f2bfc@imp* f2bfd@vis* f2bfe@inv* f2bff@exp-subst f2c00@exp-env f2c01@visit-proc f2c02@invoke-proc '#f '#f f2c03@visible? '#f) '#t) (let ((f2c13@d (car f2c0f@deps))) (let ((f2c15@label (car f2c13@d)) (f2c16@dname (cadr f2c13@d))) (let ((f2c19@l (f2b12@find-library-by-name f2c16@dname))) (if (and (f2abc@library? f2c19@l) (eq? f2c15@label (f2abe@library-id f2c19@l))) (f2c11@f (cdr f2c0f@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" f2bfa@name f2c16@dname f2bf7@filename f2c19@l f2c15@label (f2abe@library-id f2c19@l)) '#f)))))))) f2c1d) (if (>= f2c1e '0) (apply (lambda f2c1b@others '#f) f2c1d) (error 'apply '"invalid arg count")))))))) (set! f2cc6@f2b08@try-load-from-file f2b08@try-load-from-file) (set! f2b0a@library-loader (f2a06@f28e5@make-parameter (lambda (f2c1f@x) (let ((f2c21@file-name ((f2b02@file-locator) f2c1f@x))) (if (not f2c21@file-name) (assertion-violation '#f '"cannot file library" f2c1f@x) (or (f2b08@try-load-from-file f2c21@file-name) ((f2b0c@current-library-expander) (f2a05@f28e3@read-library-source-file f2c21@file-name) f2c21@file-name (lambda (f2c23@name) (if (not (fast-equal? f2c23@name f2c1f@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (f2c29@f2c26 f2c2a@f2c28) (let ((f2c2d@e f2c2a@f2c28) (f2c2e@p f2c29@f2c26)) (begin (display '"expected to find library " f2c2e@p) (write f2c1f@x f2c2e@p) (display '" in file " f2c2e@p) (display f2c21@file-name f2c2e@p) (display '", found " f2c2e@p) (write f2c23@name f2c2e@p) (display '" instead" f2c2e@p) (f2c2d@e)))))) (void)))))))) (lambda (f2c31@f) (if (procedure? f2c31@f) f2c31@f (assertion-violation 'library-locator '"not a procedure" f2c31@f))))) (set! f2cc7@f2b0a@library-loader f2b0a@library-loader) (set! f2b0c@current-library-expander (f2a06@f28e5@make-parameter (lambda (f2c33@x) (assertion-violation 'library-expander '"not initialized")) (lambda (f2c35@f) (if (procedure? f2c35@f) f2c35@f (assertion-violation 'library-expander '"not a procedure" f2c35@f))))) (set! f2cc8@f2b0c@current-library-expander f2b0c@current-library-expander) (set! f2b0e@external-pending-libraries (f2a06@f28e5@make-parameter '())) (set! f2cc9@f2b0e@external-pending-libraries f2b0e@external-pending-libraries) (set! f2b10@find-external-library (lambda (f2c37@name) (begin (if (member f2c37@name (f2b0e@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" f2c37@name) (void)) (let ((f2c3d@f2c3a f2b0e@external-pending-libraries) (f2c3e@f2c3c (cons f2c37@name (f2b0e@external-pending-libraries)))) (let ((f2c41@swap (lambda () (let ((f2c43@t (f2c3d@f2c3a))) (begin (f2c3d@f2c3a f2c3e@f2c3c) (set! f2c3e@f2c3c f2c43@t)))))) (dynamic-wind f2c41@swap (lambda () (begin ((f2b0a@library-loader) f2c37@name) (or (f2afa@find-library-by (lambda (f2c45@x) (fast-equal? (f2ac2@library-name f2c45@x) f2c37@name))) (assertion-violation '#f '"handling external library did not yield the correct library" f2c37@name)))) f2c41@swap)))))) (set! f2cca@f2b10@find-external-library f2b10@find-external-library) (set! f2b12@find-library-by-name (lambda (f2c47@name) (or (f2afa@find-library-by (lambda (f2c49@x) (fast-equal? (f2ac2@library-name f2c49@x) f2c47@name))) (f2b10@find-external-library f2c47@name)))) (set! f2ccb@f2b12@find-library-by-name f2b12@find-library-by-name) (set! f2b14@library-exists? (lambda (f2c4b@name) (and (f2afa@find-library-by (lambda (f2c4d@x) (fast-equal? (f2ac2@library-name f2c4d@x) f2c4b@name))) '#t))) (set! f2ccc@f2b14@library-exists? f2b14@library-exists?) (set! f2b16@find-library-by-spec/die (lambda (f2c4f@spec) (let ((f2c51@id (car f2c4f@spec))) (or (f2afa@find-library-by (lambda (f2c53@x) (eq? f2c51@id (f2abe@library-id f2c53@x)))) (assertion-violation '#f '"cannot find library with required spec" f2c4f@spec))))) (set! f2ccd@f2b16@find-library-by-spec/die f2b16@find-library-by-spec/die) (set! f2b18@label->binding-table (make-eq-hashtable)) (set! f2cce@f2b18@label->binding-table f2b18@label->binding-table) (set! f2b1a@install-library-record (lambda (f2c55@lib) (begin (let ((f2c57@exp-env (f2ada@library-env f2c55@lib))) (for-each (lambda (f2c59@x) (let ((f2c5b@label (car f2c59@x)) (f2c5c@binding (cdr f2c59@x))) (let ((f2c5f@binding (let ((f2c61@t (car f2c5c@binding))) (if (memv f2c61@t '(global)) (cons 'global (cons f2c55@lib (cdr f2c5c@binding))) (if (memv f2c61@t '(global-macro)) (cons 'global-macro (cons f2c55@lib (cdr f2c5c@binding))) (if (memv f2c61@t '(global-macro!)) (cons 'global-macro! (cons f2c55@lib (cdr f2c5c@binding))) f2c5c@binding)))))) (begin (if (hashtable-ref f2b18@label->binding-table f2c5b@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" f2c5b@label (hashtable-ref f2b18@label->binding-table f2c5b@label '#f) f2c5f@binding) (exit)) (void)) (hashtable-set! f2b18@label->binding-table f2c5b@label f2c5f@binding))))) f2c57@exp-env)) ((f2ab0@current-library-collection) f2c55@lib)))) (set! f2ccf@f2b1a@install-library-record f2b1a@install-library-record) (set! f2b1c@install-library (lambda (f2c63@id f2c64@name f2c65@ver f2c66@imp* f2c67@vis* f2c68@inv* f2c69@exp-subst f2c6a@exp-env f2c6b@visit-proc f2c6c@invoke-proc f2c6d@visit-code f2c6e@invoke-code f2c6f@visible? f2c70@source-file-name) (let ((f2c7f@imp-lib* (map f2b16@find-library-by-spec/die f2c66@imp*)) (f2c80@vis-lib* (map f2b16@find-library-by-spec/die f2c67@vis*)) (f2c81@inv-lib* (map f2b16@find-library-by-spec/die f2c68@inv*))) (begin (if (not (and (symbol? f2c63@id) (list? f2c64@name) (list? f2c65@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" f2c63@id f2c64@name f2c65@ver) (void)) (if (f2b14@library-exists? f2c64@name) (assertion-violation 'install-library '"library is already installed" f2c64@name) (void)) (let ((f2c85@lib (make-simple-struct 'library '15 (list f2c63@id f2c64@name f2c65@ver f2c7f@imp-lib* f2c80@vis-lib* f2c81@inv-lib* f2c69@exp-subst f2c6a@exp-env f2c6b@visit-proc f2c6c@invoke-proc f2c6d@visit-code f2c6e@invoke-code f2c6f@visible? f2c70@source-file-name)))) (f2b1a@install-library-record f2c85@lib)))))) (set! f2cd0@f2b1c@install-library f2b1c@install-library) (set! f2b1e@imported-label->binding (lambda (f2c87@lab) (hashtable-ref f2b18@label->binding-table f2c87@lab '#f))) (set! f2cd1@f2b1e@imported-label->binding f2b1e@imported-label->binding) (set! f2b20@invoke-library (lambda (f2c89@lib) (let ((f2c8b@invoke (f2ae2@library-invoke-state f2c89@lib))) (if (procedure? f2c8b@invoke) (begin (f2ae4@set-library-invoke-state! f2c89@lib (lambda () (assertion-violation 'invoke '"circularity detected" f2c89@lib))) (for-each f2b20@invoke-library (f2ad2@library-inv* f2c89@lib)) (f2ae4@set-library-invoke-state! f2c89@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" f2c89@lib))) (f2c8b@invoke) (f2ae4@set-library-invoke-state! f2c89@lib '#t)) (void))))) (set! f2cd2@f2b20@invoke-library f2b20@invoke-library) (set! f2b22@visit-library (lambda (f2c8d@lib) (let ((f2c8f@visit (f2ade@library-visit-state f2c8d@lib))) (if (procedure? f2c8f@visit) (begin (f2ae0@set-library-visit-state! f2c8d@lib (lambda () (assertion-violation 'visit '"circularity detected" f2c8d@lib))) (for-each f2b20@invoke-library (f2ace@library-vis* f2c8d@lib)) (f2ae0@set-library-visit-state! f2c8d@lib (lambda () (assertion-violation 'invoke '"first visit did not return" f2c8d@lib))) (f2c8f@visit) (f2ae0@set-library-visit-state! f2c8d@lib '#t)) (void))))) (set! f2cd3@f2b22@visit-library f2b22@visit-library) (set! f2b24@invoke-library-by-spec (lambda (f2c91@spec) (f2b20@invoke-library (f2b16@find-library-by-spec/die f2c91@spec)))) (set! f2cd4@f2b24@invoke-library-by-spec f2b24@invoke-library-by-spec) (set! f2b26@installed-libraries (lambda f2c99 (let ((f2c9a (length f2c99))) (if (= f2c9a '1) (apply (lambda (f2c93@all?) (let f2c97@f ((f2c95@ls ((f2ab0@current-library-collection)))) (if (null? f2c95@ls) '() (if (or f2c93@all? (f2aee@library-visible? (car f2c95@ls))) (cons (car f2c95@ls) (f2c97@f (cdr f2c95@ls))) (f2c97@f (cdr f2c95@ls)))))) f2c99) (if (= f2c9a '0) (apply (lambda () (f2b26@installed-libraries '#f)) f2c99) (error 'apply '"invalid arg count")))))) (set! f2cd5@f2b26@installed-libraries f2b26@installed-libraries) (set! f2b28@library-spec (lambda (f2c9b@x) (begin (if (not (f2abc@library? f2c9b@x)) (assertion-violation 'library-spec '"not a library" f2c9b@x) (void)) (list (f2abe@library-id f2c9b@x) (f2ac2@library-name f2c9b@x) (f2ac6@library-version f2c9b@x))))) (set! f2cd6@f2b28@library-spec f2b28@library-spec) (void))
(begin (set! f2cda@build-global-define (unspecified)) (set! f2d4b@build-lambda (unspecified)) (set! f2d4d@build-case-lambda (unspecified)) (set! f2d7b@build-sequence (unspecified)) (set! f2d7d@build-void (unspecified)) (set! f2d7f@build-letrec (unspecified)) (set! f2d81@build-let (unspecified)) (set! f2d83@build-named-let (unspecified)) (set! f2d85@build-letrec* (unspecified)) (set! f2d87@build-library-letrec* (unspecified)) (set! f2d89@build-receive (unspecified)) (set! f2cda@build-global-define (lambda (f2d8a@x) (f2d7d@build-void))) (set! f2e1e@f2cda@build-global-define f2cda@build-global-define) (set! f2d4b@build-lambda (lambda (f2d8c@ae f2d8d@vars f2d8e@exp) (list 'lambda f2d8d@vars f2d8e@exp))) (set! f2e1f@f2d4b@build-lambda f2d4b@build-lambda) (set! f2d4d@build-case-lambda (lambda (f2d92@ae f2d93@vars* f2d94@exp*) (let ((f2d99@build-error '#f) (f2d9b@build-pred '#f) (f2d9d@build-apply '#f) (f2d9f@expand-case-lambda '#f)) (begin (set! f2d99@build-error (lambda (f2dd0@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! f2d9b@build-pred (lambda (f2db8@ae f2db9@n f2dba@vars) (call-with-values (lambda () (let f2dc6@f ((f2dc2@vars f2dba@vars) (f2dc3@count '0)) (if (pair? f2dc2@vars) (f2dc6@f (cdr f2dc2@vars) (+ f2dc3@count '1)) (if (null? f2dc2@vars) (values f2dc3@count '=) (values f2dc3@count '>=))))) (lambda (f2dc8@f2dbf f2dc9@f2dc1) (let ((f2dcc@pred f2dc9@f2dc1) (f2dcd@count f2dc8@f2dbf)) (list (list 'primitive f2dcc@pred) f2db9@n (list 'quote f2dcd@count))))))) (set! f2d9d@build-apply (lambda (f2db0@ae f2db1@g f2db2@vars f2db3@exp) (list '(primitive apply) (f2d4b@build-lambda f2db0@ae f2db2@vars f2db3@exp) f2db1@g))) (set! f2d9f@expand-case-lambda (lambda (f2da0@ae f2da1@vars f2da2@exp*) (let ((f2da6@g (gensym)) (f2da7@n (gensym))) (list 'lambda f2da6@g (f2d81@build-let f2da0@ae (list f2da7@n) (list (list '(primitive length) f2da6@g)) (let f2dae@f ((f2daa@vars* f2d93@vars*) (f2dab@exp* f2da2@exp*)) (if (null? f2daa@vars*) (f2d99@build-error f2da0@ae) (list 'if (f2d9b@build-pred f2da0@ae f2da7@n (car f2daa@vars*)) (f2d9d@build-apply f2da0@ae f2da6@g (car f2daa@vars*) (car f2dab@exp*)) (f2dae@f (cdr f2daa@vars*) (cdr f2dab@exp*)))))))))) (if (= (length f2d94@exp*) '1) (f2d4b@build-lambda f2d92@ae (car f2d93@vars*) (car f2d94@exp*)) (f2d9f@expand-case-lambda f2d92@ae f2d93@vars* f2d94@exp*)))))) (set! f2e20@f2d4d@build-case-lambda f2d4d@build-case-lambda) (set! f2d7b@build-sequence (lambda (f2dd2@ae f2dd3@exps) (let f2dd8@loop ((f2dd6@exps f2dd3@exps)) (if (null? (cdr f2dd6@exps)) (car f2dd6@exps) (if (equal? (car f2dd6@exps) (f2d7d@build-void)) (f2dd8@loop (cdr f2dd6@exps)) (cons 'begin f2dd6@exps)))))) (set! f2e21@f2d7b@build-sequence f2d7b@build-sequence) (set! f2d7d@build-void (lambda () '((primitive void)))) (set! f2e22@f2d7d@build-void f2d7d@build-void) (set! f2d7f@build-letrec (lambda (f2dda@ae f2ddb@vars f2ddc@val-exps f2ddd@body-exp) (if (null? f2ddb@vars) f2ddd@body-exp (list 'letrec (map list f2ddb@vars f2ddc@val-exps) f2ddd@body-exp)))) (set! f2e23@f2d7f@build-letrec f2d7f@build-letrec) (set! f2d81@build-let (lambda (f2de2@ae f2de3@vars f2de4@val-exps f2de5@body-exp) (if (null? f2de3@vars) f2de5@body-exp (list 'let (map list f2de3@vars f2de4@val-exps) f2de5@body-exp)))) (set! f2e24@f2d81@build-let f2d81@build-let) (set! f2d83@build-named-let (lambda (f2dea@ae f2deb@name f2dec@vars f2ded@val-exps f2dee@body-exp) (list 'let f2deb@name (map list f2dec@vars f2ded@val-exps) f2dee@body-exp))) (set! f2e25@f2d83@build-named-let f2d83@build-named-let) (set! f2d85@build-letrec* (lambda (f2df4@ae f2df5@vars f2df6@val-exps f2df7@body-exp) (if (null? f2df5@vars) f2df7@body-exp (f2d81@build-let f2df4@ae f2df5@vars (map (lambda (f2dfc@x) (list 'quote '#f)) f2df5@vars) (f2d7b@build-sequence f2df4@ae (append (map (lambda (f2dfe@lhs f2dff@rhs) (list 'set! f2dfe@lhs f2dff@rhs)) f2df5@vars f2df6@val-exps) (list f2df7@body-exp))))))) (set! f2e26@f2d85@build-letrec* f2d85@build-letrec*) (set! f2d87@build-library-letrec* (lambda (f2e02@ae f2e03@name f2e04@vars f2e05@locs f2e06@val-exps f2e07@body-exp) (cons 'begin (append (map (lambda (f2e0e@var) (cons 'set! (cons f2e0e@var '((unspecified))))) f2e04@vars) (append (apply append (map (lambda (f2e10@var f2e11@loc f2e12@val-exp) (list (list 'set! f2e10@var f2e12@val-exp) (list 'set! f2e11@loc f2e10@var))) f2e04@vars f2e05@locs f2e06@val-exps)) (list f2e07@body-exp)))))) (set! f2e27@f2d87@build-library-letrec* f2d87@build-library-letrec*) (set! f2d89@build-receive (lambda (f2e16@ae f2e17@vars f2e18@producer f2e19@body*) (begin (display '"************** in ") (cons 'receive (cons f2e17@vars (cons f2e18@producer f2e19@body*)))))) (set! f2e28@f2d89@build-receive f2d89@build-receive) (void))
(begin (set! f2e37@file-options-macro (unspecified)) (set! f2e39@set-cons (unspecified)) (set! f2e3b@set-union (unspecified)) (set! f2e40@top-mark* (unspecified)) (set! f2e42@top-marked? (unspecified)) (set! f2e44@gen-lexical (unspecified)) (set! f2e46@gen-global (unspecified)) (set! f2e48@gen-label (unspecified)) (set! f2e4a@gen-top-level-label (unspecified)) (set! f2e4c@gen-define-label+loc (unspecified)) (set! f2e4e@gen-define-label (unspecified)) (set! f2e58@rib? (unspecified)) (set! f2e5a@rib-sym* (unspecified)) (set! f2e5c@set-rib-sym*! (unspecified)) (set! f2e5e@rib-mark** (unspecified)) (set! f2e60@set-rib-mark**! (unspecified)) (set! f2e62@rib-label* (unspecified)) (set! f2e64@set-rib-label*! (unspecified)) (set! f2e66@rib-sealed/freq (unspecified)) (set! f2e68@set-rib-sealed/freq! (unspecified)) (set! f2e6a@rib-cache (unspecified)) (set! f2e6c@set-rib-cache! (unspecified)) (set! f2e6e@dummy (unspecified)) (set! f2e70@make-empty-rib (unspecified)) (set! f2e72@extend-rib! (unspecified)) (set! f2e74@extend-rib/nc! (unspecified)) (set! f2e76@make-rib-map (unspecified)) (set! f2e78@seal-rib! (unspecified)) (set! f2e7a@unseal-rib! (unspecified)) (set! f2e7c@make-full-rib (unspecified)) (set! f2e7e@rp (unspecified)) (set! f2e88@stx? (unspecified)) (set! f2e8a@stx-expr (unspecified)) (set! f2e8c@set-stx-expr! (unspecified)) (set! f2e8e@stx-mark* (unspecified)) (set! f2e90@set-stx-mark*! (unspecified)) (set! f2e92@stx-subst* (unspecified)) (set! f2e94@set-stx-subst*! (unspecified)) (set! f2e96@stx-ae* (unspecified)) (set! f2e98@set-stx-ae*! (unspecified)) (set! f2e9a@dummy (unspecified)) (set! f2e9c@datum->stx (unspecified)) (set! f2e9e@gen-mark (unspecified)) (set! f2ea0@anti-mark (unspecified)) (set! f2ea2@anti-mark? (unspecified)) (set! f2ea4@mkstx (unspecified)) (set! f2ea6@add-mark (unspecified)) (set! f2ea8@add-subst (unspecified)) (set! f2eaa@syntax-kind? (unspecified)) (set! f2eac@syntax-vector->list (unspecified)) (set! f2eae@syntax-pair? (unspecified)) (set! f2eb0@syntax-vector? (unspecified)) (set! f2eb2@syntax-null? (unspecified)) (set! f2eb4@syntax-list? (unspecified)) (set! f2eb6@syntax-car (unspecified)) (set! f2eb8@syntax-cdr (unspecified)) (set! f2eba@syntax->list (unspecified)) (set! f2ebc@id? (unspecified)) (set! f2ebe@id->sym (unspecified)) (set! f2ec0@bound-id=? (unspecified)) (set! f2ec2@free-id=? (unspecified)) (set! f2ec4@valid-bound-ids? (unspecified)) (set! f2ec6@distinct-bound-ids? (unspecified)) (set! f2ec8@bound-id-member? (unspecified)) (set! f2eca@self-evaluating? (unspecified)) (set! f2ecc@strip-annotations (unspecified)) (set! f2ece@strip (unspecified)) (set! f2ed0@stx->datum (unspecified)) (set! f2ed2@id->label (unspecified)) (set! f2ed4@label->binding (unspecified)) (set! f2ed6@make-binding (unspecified)) (set! f2ed8@binding-type (unspecified)) (set! f2eda@binding-value (unspecified)) (set! f2edc@raise-unbound-error (unspecified)) (set! f2ede@syntax-type (unspecified)) (set! f2eec@sanitize-binding (unspecified)) (set! f2eee@make-variable-transformer (unspecified)) (set! f2ef0@variable-transformer? (unspecified)) (set! f2ef2@variable-transformer-procedure (unspecified)) (set! f2ef4@make-eval-transformer (unspecified)) (set! f3045@parse-define (unspecified)) (set! f3047@parse-define-syntax (unspecified)) (set! f3049@scheme-stx-hashtable (unspecified)) (set! f304b@scheme-stx (unspecified)) (set! f304d@lexical-var (unspecified)) (set! f304f@lexical-mutable? (unspecified)) (set! f3051@set-lexical-mutable! (unspecified)) (set! f3053@add-lexical (unspecified)) (set! f3055@add-lexicals (unspecified)) (set! f3057@letrec-helper (unspecified)) (set! f3059@let-transformer (unspecified)) (set! f305b@letrec-transformer (unspecified)) (set! f305d@letrec*-transformer (unspecified)) (set! f305f@fluid-let-syntax-transformer (unspecified)) (set! f3061@type-descriptor-transformer (unspecified)) (set! f3063@record-type-descriptor-transformer (unspecified)) (set! f3065@record-constructor-descriptor-transformer (unspecified)) (set! f3067@when-macro (unspecified)) (set! f3069@unless-macro (unspecified)) (set! f306b@if-transformer (unspecified)) (set! f306d@and-transformer (unspecified)) (set! f306f@or-transformer (unspecified)) (set! f3071@case-macro (unspecified)) (set! f3073@quote-transformer (unspecified)) (set! f3075@case-lambda-transformer (unspecified)) (set! f3077@lambda-transformer (unspecified)) (set! f3079@bless (unspecified)) (set! f307b@with-syntax-macro (unspecified)) (set! f307d@invalid-fmls-error (unspecified)) (set! f307f@let-macro (unspecified)) (set! f3081@let-values-macro (unspecified)) (set! f3083@let*-values-macro (unspecified)) (set! f3085@trace-lambda-macro (unspecified)) (set! f3087@trace-define-macro (unspecified)) (set! f3089@trace-define-syntax-macro (unspecified)) (set! f308b@trace-let/rec-syntax (unspecified)) (set! f308d@trace-let-syntax-macro (unspecified)) (set! f308f@trace-letrec-syntax-macro (unspecified)) (set! f3091@guard-macro (unspecified)) (set! f3093@define-enumeration-macro (unspecified)) (set! f3095@time-macro (unspecified)) (set! f3097@delay-macro (unspecified)) (set! f3099@assert-macro (unspecified)) (set! f309b@endianness-macro (unspecified)) (set! f309d@identifier-syntax-macro (unspecified)) (set! f309f@do-macro (unspecified)) (set! f30a1@let*-macro (unspecified)) (set! f30a3@or-macro (unspecified)) (set! f30a5@and-macro (unspecified)) (set! f30a7@cond-macro (unspecified)) (set! f30a9@do-include (unspecified)) (set! f30ab@include-macro (unspecified)) (set! f30ad@include-into-macro (unspecified)) (set! f30af@syntax-rules-macro (unspecified)) (set! f30b1@quasiquote-macro (unspecified)) (set! f30b3@quasisyntax-macro (unspecified)) (set! f30b5@define-struct-macro (unspecified)) (set! f30b7@define-record-type-macro (unspecified)) (set! f30b9@define-condition-type-macro (unspecified)) (set! f30bb@incorrect-usage-macro (unspecified)) (set! f30bd@parameterize-macro (unspecified)) (set! f30bf@foreign-call-transformer (unspecified)) (set! f30c1@convert-pattern (unspecified)) (set! f30c3@syntax-dispatch (unspecified)) (set! f30c5@ellipsis? (unspecified)) (set! f30c7@underscore? (unspecified)) (set! f30c9@verify-literals (unspecified)) (set! f30cb@syntax-case-transformer (unspecified)) (set! f30cd@ellipsis-map (unspecified)) (set! f30cf@syntax-transformer (unspecified)) (set! f30d1@core-macro-transformer (unspecified)) (set! f30d3@symbol-macro (unspecified)) (set! f30d5@macro-transformer (unspecified)) (set! f30d7@local-macro-transformer (unspecified)) (set! f30d9@do-macro-call (unspecified)) (set! f30db@chi-macro (unspecified)) (set! f30dd@chi-local-macro (unspecified)) (set! f30df@chi-global-macro (unspecified)) (set! f30e1@chi-expr* (unspecified)) (set! f30e3@chi-application (unspecified)) (set! f30e5@chi-expr (unspecified)) (set! f30e7@chi-set! (unspecified)) (set! f30e9@verify-formals (unspecified)) (set! f30eb@chi-lambda-clause (unspecified)) (set! f30ed@chi-lambda-clause* (unspecified)) (set! f30ef@chi-defun (unspecified)) (set! f30f1@chi-rhs (unspecified)) (set! f30f3@expand-interaction-rhs*/init* (unspecified)) (set! f30f5@chi-rhs* (unspecified)) (set! f30f7@find-bound=? (unspecified)) (set! f30f9@find-dups (unspecified)) (set! f30fb@chi-internal (unspecified)) (set! f30fd@parse-module (unspecified)) (set! f3107@module-interface? (unspecified)) (set! f3109@module-interface-first-mark (unspecified)) (set! f310b@set-module-interface-first-mark! (unspecified)) (set! f310d@module-interface-exp-id-vec (unspecified)) (set! f310f@set-module-interface-exp-id-vec! (unspecified)) (set! f3111@module-interface-exp-lab-vec (unspecified)) (set! f3113@set-module-interface-exp-lab-vec! (unspecified)) (set! f3115@dummy (unspecified)) (set! f3117@module-interface-exp-id* (unspecified)) (set! f3119@chi-internal-module (unspecified)) (set! f311b@chi-body* (unspecified)) (set! f311d@expand-transformer (unspecified)) (set! f311f@parse-exports (unspecified)) (set! f3121@parse-library-name (unspecified)) (set! f3123@parse-library (unspecified)) (set! f3125@parse-import-spec* (unspecified)) (set! f3127@make-top-rib (unspecified)) (set! f3129@make-collector (unspecified)) (set! f312b@inv-collector (unspecified)) (set! f312d@vis-collector (unspecified)) (set! f312f@imp-collector (unspecified)) (set! f3131@chi-library-internal (unspecified)) (set! f3133@chi-interaction-expr (unspecified)) (set! f3135@library-body-expander (unspecified)) (set! f3137@core-library-expander (unspecified)) (set! f3139@parse-top-level-program (unspecified)) (set! f313b@top-level-expander (unspecified)) (set! f313d@rp (unspecified)) (set! f3147@env? (unspecified)) (set! f3149@env-names (unspecified)) (set! f314b@set-env-names! (unspecified)) (set! f314d@env-labels (unspecified)) (set! f314f@set-env-labels! (unspecified)) (set! f3151@env-itc (unspecified)) (set! f3153@set-env-itc! (unspecified)) (set! f3155@dummy (unspecified)) (set! f3157@rp (unspecified)) (set! f3161@interaction-env? (unspecified)) (set! f3163@interaction-env-rib (unspecified)) (set! f3165@set-interaction-env-rib! (unspecified)) (set! f3167@interaction-env-r (unspecified)) (set! f3169@set-interaction-env-r! (unspecified)) (set! f316b@interaction-env-locs (unspecified)) (set! f316d@set-interaction-env-locs! (unspecified)) (set! f316f@dummy (unspecified)) (set! f3171@interaction-environment-symbols (unspecified)) (set! f3173@environment-bindings (unspecified)) (set! f3175@parse-binding (unspecified)) (set! f3177@environment? (unspecified)) (set! f3179@environment-symbols (unspecified)) (set! f317b@environment (unspecified)) (set! f317d@null-environment (unspecified)) (set! f317f@scheme-report-environment (unspecified)) (set! f3181@expand (unspecified)) (set! f3183@eval (unspecified)) (set! f3185@library-expander (unspecified)) (set! f3187@boot-library-expand (unspecified)) (set! f3189@rev-map-append (unspecified)) (set! f318b@build-exports (unspecified)) (set! f318d@make-export-subst (unspecified)) (set! f318f@make-export-env/macros (unspecified)) (set! f3191@generate-temporaries (unspecified)) (set! f3193@free-identifier=? (unspecified)) (set! f3195@bound-identifier=? (unspecified)) (set! f3197@make-source-condition (unspecified)) (set! f3199@extract-position-condition (unspecified)) (set! f319b@expression-position (unspecified)) (set! f319d@assertion-error (unspecified)) (set! f319f@syntax-error (unspecified)) (set! f31a1@syntax-violation* (unspecified)) (set! f31a3@syntax-violation (unspecified)) (set! f31a5@identifier? (unspecified)) (set! f31a7@datum->syntax (unspecified)) (set! f31a9@syntax->datum (unspecified)) (set! f31ab@ungensym-all (unspecified)) (set! f31ad@compile-r6rs-top-level (unspecified)) (set! f31af@pre-compile-r6rs-top-level (unspecified)) (set! f31b1@interaction-environment (unspecified)) (set! f31b3@top-level-context (unspecified)) (set! f2e37@file-options-macro (lambda (f31b4@x) (let ((f31b7@valid-option? '#f)) (begin (set! f31b7@valid-option? (lambda (f31c0@x) (and (f2ebc@id? f31c0@x) (memq (f2ebe@id->sym f31c0@x) '(no-fail no-create no-truncate))))) (let ((f31b8@t f31b4@x)) (let ((f31ba@ls/false (f30c3@syntax-dispatch f31b8@t '(_ . each-any)))) (if (and f31ba@ls/false (apply (lambda (f31bc@opt*) (for-all f31b7@valid-option? f31bc@opt*)) f31ba@ls/false)) (apply (lambda (f31be@opt*) (f3079@bless (list 'make-file-options (list 'quote f31be@opt*)))) f31ba@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f31b8@t)))))))) (set! f4b0a@f2e37@file-options-macro f2e37@file-options-macro) (set! f2e39@set-cons (lambda (f31c2@x f31c3@ls) (if (memq f31c2@x f31c3@ls) f31c3@ls (cons f31c2@x f31c3@ls)))) (set! f4b0b@f2e39@set-cons f2e39@set-cons) (set! f2e3b@set-union (lambda (f31c6@ls1 f31c7@ls2) (if (null? f31c6@ls1) f31c7@ls2 (if (memq (car f31c6@ls1) f31c7@ls2) (f2e3b@set-union (cdr f31c6@ls1) f31c7@ls2) (cons (car f31c6@ls1) (f2e3b@set-union (cdr f31c6@ls1) f31c7@ls2)))))) (set! f4b0c@f2e3b@set-union f2e3b@set-union) (set! f2e40@top-mark* '(top)) (set! f4b0d@f2e40@top-mark* f2e40@top-mark*) (set! f2e42@top-marked? (lambda (f31ca@m*) (memq 'top f31ca@m*))) (set! f4b0e@f2e42@top-marked? f2e42@top-marked?) (set! f2e44@gen-lexical (lambda (f31cc@sym) (if (symbol? f31cc@sym) (gensym f31cc@sym) (if (f2e88@stx? f31cc@sym) (f2e44@gen-lexical (f2ebe@id->sym f31cc@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" f31cc@sym))))) (set! f4b0f@f2e44@gen-lexical f2e44@gen-lexical) (set! f2e46@gen-global (lambda (f31ce@x) (f2e44@gen-lexical f31ce@x))) (set! f4b10@f2e46@gen-global f2e46@gen-global) (set! f2e48@gen-label (lambda (f31d0@_) (gensym))) (set! f4b11@f2e48@gen-label f2e48@gen-label) (set! f2e4a@gen-top-level-label (lambda (f31d2@id f31d3@rib) (let ((f31d7@find '#f)) (begin (set! f31d7@find (lambda (f31e2@sym f31e3@mark* f31e4@sym* f31e5@mark** f31e6@label*) (and (pair? f31e4@sym*) (if (and (eq? f31e2@sym (car f31e4@sym*)) (same-marks? f31e3@mark* (car f31e5@mark**))) (car f31e6@label*) (f31d7@find f31e2@sym f31e3@mark* (cdr f31e4@sym*) (cdr f31e5@mark**) (cdr f31e6@label*)))))) (let ((f31d8@sym (f2ebe@id->sym f31d2@id)) (f31d9@mark* (f2e8e@stx-mark* f31d2@id))) (let ((f31dc@sym* (f2e5a@rib-sym* f31d3@rib))) (let ((f31de@t (and (memq f31d8@sym (f2e5a@rib-sym* f31d3@rib)) (f31d7@find f31d8@sym f31d9@mark* f31dc@sym* (f2e5e@rib-mark** f31d3@rib) (f2e62@rib-label* f31d3@rib))))) (if f31de@t ((lambda (f31e0@label) (if (f2cd1@f2b1e@imported-label->binding f31e0@label) (gensym) f31e0@label)) f31de@t) (gensym))))))))) (set! f4b12@f2e4a@gen-top-level-label f2e4a@gen-top-level-label) (set! f2e4c@gen-define-label+loc (lambda (f31ec@id f31ed@rib) (let ((f31f0@t (f31b3@top-level-context))) (if f31f0@t ((lambda (f31f2@env) (let ((f31f4@label (f2e4a@gen-top-level-label f31ec@id f31ed@rib)) (f31f5@locs (f316b@interaction-env-locs f31f2@env))) (values f31f4@label (let ((f31f8@t (assq f31f4@label f31f5@locs))) (if f31f8@t (cdr f31f8@t) (let ((f31fa@loc (f2e44@gen-lexical f31ec@id))) (begin (f316d@set-interaction-env-locs! f31f2@env (cons (cons f31f4@label f31fa@loc) f31f5@locs)) f31fa@loc))))))) f31f0@t) (values (gensym) (f2e44@gen-lexical f31ec@id)))))) (set! f4b13@f2e4c@gen-define-label+loc f2e4c@gen-define-label+loc) (set! f2e4e@gen-define-label (lambda (f31fc@id f31fd@rib) (if (f31b3@top-level-context) (f2e4a@gen-top-level-label f31fc@id f31fd@rib) (gensym)))) (set! f4b14@f2e4e@gen-define-label f2e4e@gen-define-label) (set! f2e58@rib? (lambda (f3200@x) (and (simple-struct? f3200@x) (eq? (simple-struct-name f3200@x) 'rib)))) (set! f4b15@f2e58@rib? f2e58@rib?) (set! f2e5a@rib-sym* (lambda (f3202@x) (simple-struct-ref f3202@x '0))) (set! f4b16@f2e5a@rib-sym* f2e5a@rib-sym*) (set! f2e5c@set-rib-sym*! (lambda (f3204@x f3205@val) (simple-struct-set! f3204@x '0 f3205@val))) (set! f4b17@f2e5c@set-rib-sym*! f2e5c@set-rib-sym*!) (set! f2e5e@rib-mark** (lambda (f3208@x) (simple-struct-ref f3208@x '1))) (set! f4b18@f2e5e@rib-mark** f2e5e@rib-mark**) (set! f2e60@set-rib-mark**! (lambda (f320a@x f320b@val) (simple-struct-set! f320a@x '1 f320b@val))) (set! f4b19@f2e60@set-rib-mark**! f2e60@set-rib-mark**!) (set! f2e62@rib-label* (lambda (f320e@x) (simple-struct-ref f320e@x '2))) (set! f4b1a@f2e62@rib-label* f2e62@rib-label*) (set! f2e64@set-rib-label*! (lambda (f3210@x f3211@val) (simple-struct-set! f3210@x '2 f3211@val))) (set! f4b1b@f2e64@set-rib-label*! f2e64@set-rib-label*!) (set! f2e66@rib-sealed/freq (lambda (f3214@x) (simple-struct-ref f3214@x '3))) (set! f4b1c@f2e66@rib-sealed/freq f2e66@rib-sealed/freq) (set! f2e68@set-rib-sealed/freq! (lambda (f3216@x f3217@val) (simple-struct-set! f3216@x '3 f3217@val))) (set! f4b1d@f2e68@set-rib-sealed/freq! f2e68@set-rib-sealed/freq!) (set! f2e6a@rib-cache (lambda (f321a@x) (simple-struct-ref f321a@x '4))) (set! f4b1e@f2e6a@rib-cache f2e6a@rib-cache) (set! f2e6c@set-rib-cache! (lambda (f321c@x f321d@val) (simple-struct-set! f321c@x '4 f321d@val))) (set! f4b1f@f2e6c@set-rib-cache! f2e6c@set-rib-cache!) (set! f2e6e@dummy '3) (set! f4b20@f2e6e@dummy f2e6e@dummy) (set! f2e70@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! f4b21@f2e70@make-empty-rib f2e70@make-empty-rib) (set! f2e72@extend-rib! (lambda (f3220@rib f3221@id f3222@label) (let ((f3227@find '#f)) (begin (set! f3227@find (lambda (f3234@sym f3235@mark* f3236@sym* f3237@mark** f3238@label*) (and (pair? f3236@sym*) (if (and (eq? f3234@sym (car f3236@sym*)) (same-marks? f3235@mark* (car f3237@mark**))) f3238@label* (f3227@find f3234@sym f3235@mark* (cdr f3236@sym*) (cdr f3237@mark**) (cdr f3238@label*)))))) (begin (if (f2e66@rib-sealed/freq f3220@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" f3220@rib) (void)) (let ((f3228@sym (f2ebe@id->sym f3221@id)) (f3229@mark* (f2e8e@stx-mark* f3221@id))) (let ((f322c@sym* (f2e5a@rib-sym* f3220@rib))) (let ((f322e@t (and (memq f3228@sym (f2e5a@rib-sym* f3220@rib)) (f3227@find f3228@sym f3229@mark* f322c@sym* (f2e5e@rib-mark** f3220@rib) (f2e62@rib-label* f3220@rib))))) (if f322e@t ((lambda (f3230@p) (if (not (eq? f3222@label (car f3230@p))) (if (f31b3@top-level-context) (set-car! f3230@p f3222@label) (f31a3@syntax-violation '#f '"multiple definitions of identifier" f3221@id)) (void))) f322e@t) (begin (if (f2e6a@rib-cache f3220@rib) (hashtable-update! (f2e6a@rib-cache f3220@rib) f3228@sym (lambda (f3232@e) (cons (cons f3229@mark* f3222@label) f3232@e)) '()) (void)) (f2e5c@set-rib-sym*! f3220@rib (cons f3228@sym f322c@sym*)) (f2e60@set-rib-mark**! f3220@rib (cons f3229@mark* (f2e5e@rib-mark** f3220@rib))) (f2e64@set-rib-label*! f3220@rib (cons f3222@label (f2e62@rib-label* f3220@rib))))))))))))) (set! f4b22@f2e72@extend-rib! f2e72@extend-rib!) (set! f2e74@extend-rib/nc! (lambda (f323e@rib f323f@id f3240@label) (let ((f3244@sym (f2ebe@id->sym f323f@id)) (f3245@mark* (f2e8e@stx-mark* f323f@id))) (let ((f3248@sym* (f2e5a@rib-sym* f323e@rib))) (begin (if (f2e6a@rib-cache f323e@rib) (hashtable-update! (f2e6a@rib-cache f323e@rib) f3244@sym (lambda (f324a@e) (cons (cons f3245@mark* f3240@label) f324a@e)) '()) (void)) (f2e5c@set-rib-sym*! f323e@rib (cons f3244@sym f3248@sym*)) (f2e60@set-rib-mark**! f323e@rib (cons f3245@mark* (f2e5e@rib-mark** f323e@rib))) (f2e64@set-rib-label*! f323e@rib (cons f3240@label (f2e62@rib-label* f323e@rib)))))))) (set! f4b23@f2e74@extend-rib/nc! f2e74@extend-rib/nc!) (set! f2e76@make-rib-map (lambda (f324c@sym*) (let ((f324e@ht (make-eq-hashtable))) (let f3254@f ((f3250@i '0) (f3251@sym* f324c@sym*)) (if (null? f3251@sym*) f324e@ht (begin (hashtable-update! f324e@ht (car f3251@sym*) (lambda (f3256@x) (cons f3250@i f3256@x)) '()) (f3254@f (+ f3250@i '1) (cdr f3251@sym*)))))))) (set! f4b24@f2e76@make-rib-map f2e76@make-rib-map) (set! f2e78@seal-rib! (lambda (f3258@rib) (let ((f325a@sym* (f2e5a@rib-sym* f3258@rib))) (if (not (null? f325a@sym*)) (begin (f2e5c@set-rib-sym*! f3258@rib (list->vector f325a@sym*)) (f2e60@set-rib-mark**! f3258@rib (list->vector (f2e5e@rib-mark** f3258@rib))) (f2e64@set-rib-label*! f3258@rib (list->vector (f2e62@rib-label* f3258@rib))) (f2e68@set-rib-sealed/freq! f3258@rib (f2e76@make-rib-map f325a@sym*))) (void))))) (set! f4b25@f2e78@seal-rib! f2e78@seal-rib!) (set! f2e7a@unseal-rib! (lambda (f325c@rib) (if (f2e66@rib-sealed/freq f325c@rib) (begin (f2e68@set-rib-sealed/freq! f325c@rib '#f) (f2e5c@set-rib-sym*! f325c@rib (vector->list (f2e5a@rib-sym* f325c@rib))) (f2e60@set-rib-mark**! f325c@rib (vector->list (f2e5e@rib-mark** f325c@rib))) (f2e64@set-rib-label*! f325c@rib (vector->list (f2e62@rib-label* f325c@rib)))) (void)))) (set! f4b26@f2e7a@unseal-rib! f2e7a@unseal-rib!) (set! f2e7c@make-full-rib (lambda (f325e@id* f325f@label*) (let ((f3262@r (make-simple-struct 'rib '6 (list (map f2ebe@id->sym f325e@id*) (map f2e8e@stx-mark* f325e@id*) f325f@label* '#f '#f)))) (begin (f2e78@seal-rib! f3262@r) f3262@r)))) (set! f4b27@f2e7c@make-full-rib f2e7c@make-full-rib) (set! f2e7e@rp (f2a03@f28df@make-record-printer 'stx (lambda (f3264@x f3265@p f3266@wr) (begin (display '"#<syntax " f3265@p) (write (f2ed0@stx->datum f3264@x) f3265@p) (let ((f326a@expr (f2e8a@stx-expr f3264@x))) (if (f29fb@f28cf@annotation? f326a@expr) (let ((f326c@src (f29fc@f28d1@annotation-source f326a@expr))) (if (pair? f326c@src) (begin (display '" [" f3265@p) (display (cdr f326c@src) f3265@p) (display '" of " f3265@p) (display (car f326c@src) f3265@p) (display '"]" f3265@p)) (void))) (void))) (display '">" f3265@p))))) (set! f4b28@f2e7e@rp f2e7e@rp) (set! f2e88@stx? (lambda (f326e@x) (and (simple-struct? f326e@x) (eq? (simple-struct-name f326e@x) 'stx)))) (set! f4b29@f2e88@stx? f2e88@stx?) (set! f2e8a@stx-expr (lambda (f3270@x) (simple-struct-ref f3270@x '0))) (set! f4b2a@f2e8a@stx-expr f2e8a@stx-expr) (set! f2e8c@set-stx-expr! (lambda (f3272@x f3273@val) (simple-struct-set! f3272@x '0 f3273@val))) (set! f4b2b@f2e8c@set-stx-expr! f2e8c@set-stx-expr!) (set! f2e8e@stx-mark* (lambda (f3276@x) (simple-struct-ref f3276@x '1))) (set! f4b2c@f2e8e@stx-mark* f2e8e@stx-mark*) (set! f2e90@set-stx-mark*! (lambda (f3278@x f3279@val) (simple-struct-set! f3278@x '1 f3279@val))) (set! f4b2d@f2e90@set-stx-mark*! f2e90@set-stx-mark*!) (set! f2e92@stx-subst* (lambda (f327c@x) (simple-struct-ref f327c@x '2))) (set! f4b2e@f2e92@stx-subst* f2e92@stx-subst*) (set! f2e94@set-stx-subst*! (lambda (f327e@x f327f@val) (simple-struct-set! f327e@x '2 f327f@val))) (set! f4b2f@f2e94@set-stx-subst*! f2e94@set-stx-subst*!) (set! f2e96@stx-ae* (lambda (f3282@x) (simple-struct-ref f3282@x '3))) (set! f4b30@f2e96@stx-ae* f2e96@stx-ae*) (set! f2e98@set-stx-ae*! (lambda (f3284@x f3285@val) (simple-struct-set! f3284@x '3 f3285@val))) (set! f4b31@f2e98@set-stx-ae*! f2e98@set-stx-ae*!) (set! f2e9a@dummy '3) (set! f4b32@f2e9a@dummy f2e9a@dummy) (set! f2e9c@datum->stx (lambda (f3288@id f3289@datum) (make-simple-struct 'stx '5 (list f3289@datum (f2e8e@stx-mark* f3288@id) (f2e92@stx-subst* f3288@id) (f2e96@stx-ae* f3288@id))))) (set! f4b33@f2e9c@datum->stx f2e9c@datum->stx) (set! f2e9e@gen-mark (lambda () (string '#\m))) (set! f4b34@f2e9e@gen-mark f2e9e@gen-mark) (set! f2ea0@anti-mark '#f) (set! f4b35@f2ea0@anti-mark f2ea0@anti-mark) (set! f2ea2@anti-mark? not) (set! f4b36@f2ea2@anti-mark? f2ea2@anti-mark?) (set! f2ea4@mkstx (lambda (f328c@e f328d@m* f328e@s* f328f@ae*) (if (and (f2e88@stx? f328c@e) (not (f2e42@top-marked? f328d@m*))) (call-with-values (lambda () (join-wraps f328d@m* f328e@s* f328f@ae* f328c@e)) (lambda (f329a@f3295 f329b@f3297 f329c@f3299) (let ((f32a0@ae* f329c@f3299) (f32a1@s* f329b@f3297) (f32a2@m* f329a@f3295)) (make-simple-struct 'stx '5 (list (f2e8a@stx-expr f328c@e) f32a2@m* f32a1@s* f32a0@ae*))))) (make-simple-struct 'stx '5 (list f328c@e f328d@m* f328e@s* f328f@ae*))))) (set! f4b37@f2ea4@mkstx f2ea4@mkstx) (set! f2ea6@add-mark (lambda (f32a6@m f32a7@e f32a8@ae) (f2ea4@mkstx f32a7@e (list f32a6@m) '(shift) (list f32a8@ae)))) (set! f4b38@f2ea6@add-mark f2ea6@add-mark) (set! f2ea8@add-subst (lambda (f32ac@subst f32ad@e) (f2ea4@mkstx f32ad@e '() (list f32ac@subst) '()))) (set! f4b39@f2ea8@add-subst f2ea8@add-subst) (set! f2eaa@syntax-kind? (lambda (f32b0@x f32b1@p?) (if (f2e88@stx? f32b0@x) (f2eaa@syntax-kind? (f2e8a@stx-expr f32b0@x) f32b1@p?) (if (f29fb@f28cf@annotation? f32b0@x) (f2eaa@syntax-kind? (f29fd@f28d3@annotation-expression f32b0@x) f32b1@p?) (f32b1@p? f32b0@x))))) (set! f4b3a@f2eaa@syntax-kind? f2eaa@syntax-kind?) (set! f2eac@syntax-vector->list (lambda (f32b4@x) (if (f2e88@stx? f32b4@x) (let ((f32b6@ls (f2eac@syntax-vector->list (f2e8a@stx-expr f32b4@x))) (f32b7@m* (f2e8e@stx-mark* f32b4@x)) (f32b8@s* (f2e92@stx-subst* f32b4@x)) (f32b9@ae* (f2e96@stx-ae* f32b4@x))) (map (lambda (f32be@x) (f2ea4@mkstx f32be@x f32b7@m* f32b8@s* f32b9@ae*)) f32b6@ls)) (if (f29fb@f28cf@annotation? f32b4@x) (f2eac@syntax-vector->list (f29fd@f28d3@annotation-expression f32b4@x)) (if (vector? f32b4@x) (vector->list f32b4@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" f32b4@x)))))) (set! f4b3b@f2eac@syntax-vector->list f2eac@syntax-vector->list) (set! f2eae@syntax-pair? (lambda (f32c0@x) (f2eaa@syntax-kind? f32c0@x pair?))) (set! f4b3c@f2eae@syntax-pair? f2eae@syntax-pair?) (set! f2eb0@syntax-vector? (lambda (f32c2@x) (f2eaa@syntax-kind? f32c2@x vector?))) (set! f4b3d@f2eb0@syntax-vector? f2eb0@syntax-vector?) (set! f2eb2@syntax-null? (lambda (f32c4@x) (f2eaa@syntax-kind? f32c4@x null?))) (set! f4b3e@f2eb2@syntax-null? f2eb2@syntax-null?) (set! f2eb4@syntax-list? (lambda (f32c6@x) (or (f2eb2@syntax-null? f32c6@x) (and (f2eae@syntax-pair? f32c6@x) (f2eb4@syntax-list? (f2eb8@syntax-cdr f32c6@x)))))) (set! f4b3f@f2eb4@syntax-list? f2eb4@syntax-list?) (set! f2eb6@syntax-car (lambda (f32c8@x) (if (f2e88@stx? f32c8@x) (f2ea4@mkstx (f2eb6@syntax-car (f2e8a@stx-expr f32c8@x)) (f2e8e@stx-mark* f32c8@x) (f2e92@stx-subst* f32c8@x) (f2e96@stx-ae* f32c8@x)) (if (f29fb@f28cf@annotation? f32c8@x) (f2eb6@syntax-car (f29fd@f28d3@annotation-expression f32c8@x)) (if (pair? f32c8@x) (car f32c8@x) (assertion-violation 'syntax-car '"BUG: not a pair" f32c8@x)))))) (set! f4b40@f2eb6@syntax-car f2eb6@syntax-car) (set! f2eb8@syntax-cdr (lambda (f32ca@x) (if (f2e88@stx? f32ca@x) (f2ea4@mkstx (f2eb8@syntax-cdr (f2e8a@stx-expr f32ca@x)) (f2e8e@stx-mark* f32ca@x) (f2e92@stx-subst* f32ca@x) (f2e96@stx-ae* f32ca@x)) (if (f29fb@f28cf@annotation? f32ca@x) (f2eb8@syntax-cdr (f29fd@f28d3@annotation-expression f32ca@x)) (if (pair? f32ca@x) (cdr f32ca@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" f32ca@x)))))) (set! f4b41@f2eb8@syntax-cdr f2eb8@syntax-cdr) (set! f2eba@syntax->list (lambda (f32cc@x) (if (f2eae@syntax-pair? f32cc@x) (cons (f2eb6@syntax-car f32cc@x) (f2eba@syntax->list (f2eb8@syntax-cdr f32cc@x))) (if (f2eb2@syntax-null? f32cc@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" f32cc@x))))) (set! f4b42@f2eba@syntax->list f2eba@syntax->list) (set! f2ebc@id? (lambda (f32ce@x) (and (f2e88@stx? f32ce@x) (symbol? (f2e8a@stx-expr f32ce@x))))) (set! f4b43@f2ebc@id? f2ebc@id?) (set! f2ebe@id->sym (lambda (f32d0@x) (f2e8a@stx-expr f32d0@x))) (set! f4b44@f2ebe@id->sym f2ebe@id->sym) (set! f2ec0@bound-id=? (lambda (f32d2@x f32d3@y) (and (eq? (f2ebe@id->sym f32d2@x) (f2ebe@id->sym f32d3@y)) (same-marks? (f2e8e@stx-mark* f32d2@x) (f2e8e@stx-mark* f32d3@y))))) (set! f4b45@f2ec0@bound-id=? f2ec0@bound-id=?) (set! f2ec2@free-id=? (lambda (f32d6@i f32d7@j) (let ((f32da@t0 (id->real-label f32d6@i)) (f32db@t1 (id->real-label f32d7@j))) (if (or f32da@t0 f32db@t1) (eq? f32da@t0 f32db@t1) (eq? (f2ebe@id->sym f32d6@i) (f2ebe@id->sym f32d7@j)))))) (set! f4b46@f2ec2@free-id=? f2ec2@free-id=?) (set! f2ec4@valid-bound-ids? (lambda (f32de@id*) (and (for-all f2ebc@id? f32de@id*) (f2ec6@distinct-bound-ids? f32de@id*)))) (set! f4b47@f2ec4@valid-bound-ids? f2ec4@valid-bound-ids?) (set! f2ec6@distinct-bound-ids? (lambda (f32e0@id*) (or (null? f32e0@id*) (and (not (f2ec8@bound-id-member? (car f32e0@id*) (cdr f32e0@id*))) (f2ec6@distinct-bound-ids? (cdr f32e0@id*)))))) (set! f4b48@f2ec6@distinct-bound-ids? f2ec6@distinct-bound-ids?) (set! f2ec8@bound-id-member? (lambda (f32e2@id f32e3@id*) (and (pair? f32e3@id*) (or (f2ec0@bound-id=? f32e2@id (car f32e3@id*)) (f2ec8@bound-id-member? f32e2@id (cdr f32e3@id*)))))) (set! f4b49@f2ec8@bound-id-member? f2ec8@bound-id-member?) (set! f2eca@self-evaluating? (lambda (f32e6@x) (or (number? f32e6@x) (string? f32e6@x) (char? f32e6@x) (boolean? f32e6@x) (regexp? f32e6@x) (bytevector? f32e6@x)))) (set! f4b4a@f2eca@self-evaluating? f2eca@self-evaluating?) (set! f2ecc@strip-annotations (lambda (f32e8@x) (if (pair? f32e8@x) (cons (f2ecc@strip-annotations (car f32e8@x)) (f2ecc@strip-annotations (cdr f32e8@x))) (if (vector? f32e8@x) (vector-map f2ecc@strip-annotations f32e8@x) (if (f29fb@f28cf@annotation? f32e8@x) (f29fa@f28cd@annotation-stripped f32e8@x) f32e8@x))))) (set! f4b4b@f2ecc@strip-annotations f2ecc@strip-annotations) (set! f2ece@strip (lambda (f32ea@x f32eb@m*) (if (f2e42@top-marked? f32eb@m*) (if (or (f29fb@f28cf@annotation? f32ea@x) (and (pair? f32ea@x) (f29fb@f28cf@annotation? (car f32ea@x))) (and (vector? f32ea@x) (> (vector-length f32ea@x) '0) (f29fb@f28cf@annotation? (vector-ref f32ea@x '0)))) (f2ecc@strip-annotations f32ea@x) f32ea@x) (let f32f0@f ((f32ee@x f32ea@x)) (if (f2e88@stx? f32ee@x) (f2ece@strip (f2e8a@stx-expr f32ee@x) (f2e8e@stx-mark* f32ee@x)) (if (f29fb@f28cf@annotation? f32ee@x) (f29fa@f28cd@annotation-stripped f32ee@x) (if (pair? f32ee@x) (let ((f32f2@a (f32f0@f (car f32ee@x))) (f32f3@d (f32f0@f (cdr f32ee@x)))) (if (and (eq? f32f2@a (car f32ee@x)) (eq? f32f3@d (cdr f32ee@x))) f32ee@x (cons f32f2@a f32f3@d))) (if (vector? f32ee@x) (let ((f32f6@old (vector->list f32ee@x))) (let ((f32f8@new (map f32f0@f f32f6@old))) (if (for-all eq? f32f6@old f32f8@new) f32ee@x (list->vector f32f8@new)))) f32ee@x)))))))) (set! f4b4c@f2ece@strip f2ece@strip) (set! f2ed0@stx->datum (lambda (f32fa@x) (f2ece@strip f32fa@x '()))) (set! f4b4d@f2ed0@stx->datum f2ed0@stx->datum) (set! f2ed2@id->label (lambda (f32fc@id) (or (id->real-label f32fc@id) (let ((f32fe@t (f31b3@top-level-context))) (if f32fe@t ((lambda (f3300@env) (let ((f3302@rib (f3163@interaction-env-rib f3300@env))) (call-with-values (lambda () (f2e4c@gen-define-label+loc f32fc@id f3302@rib)) (lambda (f3308@f3305 f3309@f3307) (let ((f330c@loc_ f3309@f3307) (f330d@lab f3308@f3305)) (begin (f2e72@extend-rib! f3302@rib f32fc@id f330d@lab) f330d@lab)))))) f32fe@t) '#f))))) (set! f4b4e@f2ed2@id->label f2ed2@id->label) (set! f2ed4@label->binding (lambda (f3310@x f3311@r) (let ((f3314@t (f2cd1@f2b1e@imported-label->binding f3310@x))) (if f3314@t ((lambda (f3316@b) (if (and (pair? f3316@b) (eq? (car f3316@b) '$core-rtd)) (cons '$rtd (map f3079@bless (cdr f3316@b))) (if (and (pair? f3316@b) (eq? (car f3316@b) 'global-rtd)) (let ((f3318@lib (cadr f3316@b)) (f3319@loc (cddr f3316@b))) (cons '$rtd (symbol-value f3319@loc))) f3316@b))) f3314@t) (let ((f331c@t (assq f3310@x f3311@r))) (if f331c@t (cdr f331c@t) (let ((f331e@t (f31b3@top-level-context))) (if f331e@t ((lambda (f3320@env) (let ((f3322@t (assq f3310@x (f316b@interaction-env-locs f3320@env)))) (if f3322@t ((lambda (f3324@p) (cons* 'lexical (cdr f3324@p) '#f)) f3322@t) '(displaced-lexical . #f)))) f331e@t) '(displaced-lexical . #f))))))))) (set! f4b4f@f2ed4@label->binding f2ed4@label->binding) (set! f2ed6@make-binding cons) (set! f4b50@f2ed6@make-binding f2ed6@make-binding) (set! f2ed8@binding-type car) (set! f4b51@f2ed8@binding-type f2ed8@binding-type) (set! f2eda@binding-value cdr) (set! f4b52@f2eda@binding-value f2eda@binding-value) (set! f2edc@raise-unbound-error (lambda (f3326@id) (f31a1@syntax-violation* '#f '"unbound identifier" f3326@id (f4f48@f4d8e@make-undefined-violation)))) (set! f4b53@f2edc@raise-unbound-error f2edc@raise-unbound-error) (set! f2ede@syntax-type (lambda (f3328@e f3329@r) (if (f2ebc@id? f3328@e) (let ((f332c@id f3328@e)) (let ((f332e@label (f2ed2@id->label f332c@id))) (let ((f3330@b (f2ed4@label->binding f332e@label f3329@r))) (let ((f3332@type (f2ed8@binding-type f3330@b))) (begin (if (not f332e@label) (f2edc@raise-unbound-error f332c@id) (void)) (let ((f3334@t f3332@type)) (if (memv f3334@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values f3332@type (f2eda@binding-value f3330@b) f332c@id) (values 'other '#f '#f)))))))) (if (f2eae@syntax-pair? f3328@e) (let ((f3336@id (f2eb6@syntax-car f3328@e))) (if (f2ebc@id? f3336@id) (let ((f3338@label (f2ed2@id->label f3336@id))) (let ((f333a@b (f2ed4@label->binding f3338@label f3329@r))) (let ((f333c@type (f2ed8@binding-type f333a@b))) (begin (if (not f3338@label) (f2edc@raise-unbound-error f3336@id) (void)) (let ((f333e@t f333c@type)) (if (memv f333e@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values f333c@type (f2eda@binding-value f333a@b) f3336@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((f3340@d (f2ed0@stx->datum f3328@e))) (if (f2eca@self-evaluating? f3340@d) (values 'constant f3340@d '#f) (values 'other '#f '#f))))))) (set! f4b54@f2ede@syntax-type f2ede@syntax-type) (set! f2eec@sanitize-binding (lambda (f3342@x f3343@src) (if (procedure? f3342@x) (cons* 'local-macro f3342@x f3343@src) (if (and (pair? f3342@x) (eq? (car f3342@x) 'macro!) (procedure? (cdr f3342@x))) (cons* 'local-macro! (cdr f3342@x) f3343@src) (if (and (pair? f3342@x) (eq? (car f3342@x) '$rtd)) f3342@x (assertion-violation 'expand '"invalid transformer" f3342@x)))))) (set! f4b55@f2eec@sanitize-binding f2eec@sanitize-binding) (set! f2eee@make-variable-transformer (lambda (f3346@x) (if (procedure? f3346@x) (cons 'macro! f3346@x) (assertion-violation 'make-variable-transformer '"not a procedure" f3346@x)))) (set! f4b56@f2eee@make-variable-transformer f2eee@make-variable-transformer) (set! f2ef0@variable-transformer? (lambda (f3348@x) (and (pair? f3348@x) (eq? (car f3348@x) 'macro!) (procedure? (cdr f3348@x))))) (set! f4b57@f2ef0@variable-transformer? f2ef0@variable-transformer?) (set! f2ef2@variable-transformer-procedure (lambda (f334a@x) (if (f2ef0@variable-transformer? f334a@x) (cdr f334a@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" f334a@x)))) (set! f4b58@f2ef2@variable-transformer-procedure f2ef2@variable-transformer-procedure) (set! f2ef4@make-eval-transformer (lambda (f334c@x) (f2eec@sanitize-binding (eval-core (f2a5c@f2a14@expanded->core f334c@x)) f334c@x))) (set! f4b59@f2ef4@make-eval-transformer f2ef4@make-eval-transformer) (set! f3045@parse-define (lambda (f334e@x) (let ((f3350@t f334e@x)) (let ((f3352@ls/false (f30c3@syntax-dispatch f3350@t '(_ (any . any) any . each-any)))) (if (and f3352@ls/false (apply (lambda (f3354@id f3355@fmls f3356@b f3357@b*) (f2ebc@id? f3354@id)) f3352@ls/false)) (apply (lambda (f335c@id f335d@fmls f335e@b f335f@b*) (begin (f30e9@verify-formals f335d@fmls f334e@x) (values f335c@id (cons 'defun (cons f335d@fmls (cons f335e@b f335f@b*)))))) f3352@ls/false) (let ((f3364@t f3350@t)) (let ((f3366@ls/false (f30c3@syntax-dispatch f3364@t '(_ any any)))) (if (and f3366@ls/false (apply (lambda (f3368@id f3369@val) (f2ebc@id? f3368@id)) f3366@ls/false)) (apply (lambda (f336c@id f336d@val) (values f336c@id (cons 'expr f336d@val))) f3366@ls/false) (let ((f3370@t f3364@t)) (let ((f3372@ls/false (f30c3@syntax-dispatch f3370@t '(_ any)))) (if (and f3372@ls/false (apply (lambda (f3374@id) (f2ebc@id? f3374@id)) f3372@ls/false)) (apply (lambda (f3376@id) (values f3376@id (cons 'expr (f3079@bless '(void))))) f3372@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3370@t)))))))))))) (set! f4b5a@f3045@parse-define f3045@parse-define) (set! f3047@parse-define-syntax (lambda (f3378@x) (let ((f337a@t f3378@x)) (let ((f337c@ls/false (f30c3@syntax-dispatch f337a@t '(_ any any)))) (if (and f337c@ls/false (apply (lambda (f337e@id f337f@val) (f2ebc@id? f337e@id)) f337c@ls/false)) (apply (lambda (f3382@id f3383@val) (values f3382@id f3383@val)) f337c@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f337a@t)))))) (set! f4b5b@f3047@parse-define-syntax f3047@parse-define-syntax) (set! f3049@scheme-stx-hashtable (make-eq-hashtable)) (set! f4b5c@f3049@scheme-stx-hashtable f3049@scheme-stx-hashtable) (set! f304b@scheme-stx (lambda (f3386@sym) (or (hashtable-ref f3049@scheme-stx-hashtable f3386@sym '#f) (let ((f3388@subst (f2cad@f2ad6@library-subst (f2ccb@f2b12@find-library-by-name '(psyntax system $all))))) (let ((f338a@stx (make-simple-struct 'stx '5 (list f3386@sym f2e40@top-mark* '() '())))) (let ((f338c@stx (let ((f338e@t (assq f3386@sym f3388@subst))) (if f338e@t ((lambda (f3390@x) (let ((f3392@name (car f3390@x)) (f3393@label (cdr f3390@x))) (f2ea8@add-subst (make-simple-struct 'rib '6 (list (list f3392@name) (list f2e40@top-mark*) (list f3393@label) '#f '#f)) f338a@stx))) f338e@t) f338a@stx)))) (begin (hashtable-set! f3049@scheme-stx-hashtable f3386@sym f338c@stx) f338c@stx))))))) (set! f4b5d@f304b@scheme-stx f304b@scheme-stx) (set! f304d@lexical-var car) (set! f4b5e@f304d@lexical-var f304d@lexical-var) (set! f304f@lexical-mutable? cdr) (set! f4b5f@f304f@lexical-mutable? f304f@lexical-mutable?) (set! f3051@set-lexical-mutable! set-cdr!) (set! f4b60@f3051@set-lexical-mutable! f3051@set-lexical-mutable!) (set! f3053@add-lexical (lambda (f3396@lab f3397@lex f3398@r) (cons (cons* f3396@lab 'lexical f3397@lex '#f) f3398@r))) (set! f4b61@f3053@add-lexical f3053@add-lexical) (set! f3055@add-lexicals (lambda (f339c@lab* f339d@lex* f339e@r) (if (null? f339c@lab*) f339e@r (f3055@add-lexicals (cdr f339c@lab*) (cdr f339d@lex*) (f3053@add-lexical (car f339c@lab*) (car f339d@lex*) f339e@r))))) (set! f4b62@f3055@add-lexicals f3055@add-lexicals) (set! f3057@letrec-helper (lambda (f33a2@e f33a3@r f33a4@mr f33a5@build) (let ((f33aa@t f33a2@e)) (let ((f33ac@ls/false (f30c3@syntax-dispatch f33aa@t '(_ #(each (any any)) any . each-any)))) (if f33ac@ls/false (apply (lambda (f33ae@lhs* f33af@rhs* f33b0@b f33b1@b*) (if (not (f2ec4@valid-bound-ids? f33ae@lhs*)) (f307d@invalid-fmls-error f33a2@e f33ae@lhs*) (let ((f33b6@lex* (map f2e44@gen-lexical f33ae@lhs*)) (f33b7@lab* (map f2e48@gen-label f33ae@lhs*))) (let ((f33ba@rib (f2e7c@make-full-rib f33ae@lhs* f33b7@lab*)) (f33bb@r (f3055@add-lexicals f33b7@lab* f33b6@lex* f33a3@r))) (let ((f33be@body (f30fb@chi-internal (f2ea8@add-subst f33ba@rib (cons f33b0@b f33b1@b*)) f33bb@r f33a4@mr)) (f33bf@rhs* (f30e1@chi-expr* (map (lambda (f33c2@x) (f2ea8@add-subst f33ba@rib f33c2@x)) f33af@rhs*) f33bb@r f33a4@mr))) (f33a5@build '#f f33b6@lex* f33bf@rhs* f33be@body)))))) f33ac@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f33aa@t)))))) (set! f4b63@f3057@letrec-helper f3057@letrec-helper) (set! f3059@let-transformer (lambda (f33c4@e f33c5@r f33c6@mr) (let ((f33ca@t f33c4@e)) (let ((f33cc@ls/false (f30c3@syntax-dispatch f33ca@t '(_ #(each (any any)) any . each-any)))) (if f33cc@ls/false (apply (lambda (f33ce@lhs* f33cf@rhs* f33d0@b f33d1@b*) (if (not (f2ec4@valid-bound-ids? f33ce@lhs*)) (f307d@invalid-fmls-error f33c4@e f33ce@lhs*) (let ((f33d6@lex* (map f2e44@gen-lexical f33ce@lhs*)) (f33d7@lab* (map f2e48@gen-label f33ce@lhs*)) (f33d8@rhs* (f30e1@chi-expr* f33cf@rhs* f33c5@r f33c6@mr))) (let ((f33dc@rib (f2e7c@make-full-rib f33ce@lhs* f33d7@lab*)) (f33dd@r (f3055@add-lexicals f33d7@lab* f33d6@lex* f33c5@r))) (let ((f33e0@body (f30fb@chi-internal (f2ea8@add-subst f33dc@rib (cons f33d0@b f33d1@b*)) f33dd@r f33c6@mr))) (f2e24@f2d81@build-let '#f f33d6@lex* f33d8@rhs* f33e0@body)))))) f33cc@ls/false) (let ((f33e2@t f33ca@t)) (let ((f33e4@ls/false (f30c3@syntax-dispatch f33e2@t '(_ any #(each (any any)) any . each-any)))) (if f33e4@ls/false (apply (lambda (f33e6@loop f33e7@lhs* f33e8@rhs* f33e9@b f33ea@b*) (if (not (f2ec4@valid-bound-ids? f33e7@lhs*)) (f307d@invalid-fmls-error f33c4@e f33e7@lhs*) (let ((f33f0@lex* (map f2e44@gen-lexical f33e7@lhs*)) (f33f1@lab* (map f2e48@gen-label f33e7@lhs*)) (f33f2@rhs* (f30e1@chi-expr* f33e8@rhs* f33c5@r f33c6@mr)) (f33f3@loop-lex (f2e44@gen-lexical f33e6@loop)) (f33f4@loop-lab (f2e48@gen-label f33e6@loop))) (let ((f33fa@loop-rib (f2e7c@make-full-rib (list f33e6@loop) (list f33f4@loop-lab))) (f33fb@rib (f2e7c@make-full-rib f33e7@lhs* f33f1@lab*)) (f33fc@r (f3055@add-lexicals (cons f33f4@loop-lab f33f1@lab*) (cons f33f3@loop-lex f33f0@lex*) f33c5@r))) (let ((f3400@body (f30fb@chi-internal (f2ea8@add-subst f33fa@loop-rib (f2ea8@add-subst f33fb@rib (cons f33e9@b f33ea@b*))) f33fc@r f33c6@mr))) (f2e25@f2d83@build-named-let '#f f33f3@loop-lex f33f0@lex* f33f2@rhs* f3400@body)))))) f33e4@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f33e2@t))))))))) (set! f4b64@f3059@let-transformer f3059@let-transformer) (set! f305b@letrec-transformer (lambda (f3402@e f3403@r f3404@mr) (f3057@letrec-helper f3402@e f3403@r f3404@mr f2e23@f2d7f@build-letrec))) (set! f4b65@f305b@letrec-transformer f305b@letrec-transformer) (set! f305d@letrec*-transformer (lambda (f3408@e f3409@r f340a@mr) (f3057@letrec-helper f3408@e f3409@r f340a@mr f2e26@f2d85@build-letrec*))) (set! f4b66@f305d@letrec*-transformer f305d@letrec*-transformer) (set! f305f@fluid-let-syntax-transformer (lambda (f340e@e f340f@r f3410@mr) (let ((f3415@lookup '#f)) (begin (set! f3415@lookup (lambda (f3428@x) (or (f2ed2@id->label f3428@x) (f31a3@syntax-violation '#f '"unbound identifier" f340e@e f3428@x)))) (let ((f3416@t f340e@e)) (let ((f3418@ls/false (f30c3@syntax-dispatch f3416@t '(_ #(each (any any)) any . each-any)))) (if f3418@ls/false (apply (lambda (f341a@lhs* f341b@rhs* f341c@b f341d@b*) (if (not (f2ec4@valid-bound-ids? f341a@lhs*)) (f307d@invalid-fmls-error f340e@e f341a@lhs*) (let ((f3422@lab* (map f3415@lookup f341a@lhs*)) (f3423@rhs* (map (lambda (f3426@x) (f2ef4@make-eval-transformer (f311d@expand-transformer f3426@x f3410@mr))) f341b@rhs*))) (f30fb@chi-internal (cons f341c@b f341d@b*) (append (map cons f3422@lab* f3423@rhs*) f340f@r) (append (map cons f3422@lab* f3423@rhs*) f3410@mr))))) f3418@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3416@t)))))))) (set! f4b67@f305f@fluid-let-syntax-transformer f305f@fluid-let-syntax-transformer) (set! f3061@type-descriptor-transformer (lambda (f342a@e f342b@r f342c@mr) (let ((f3430@t f342a@e)) (let ((f3432@ls/false (f30c3@syntax-dispatch f3430@t '(_ any)))) (if (and f3432@ls/false (apply (lambda (f3434@id) (f2ebc@id? f3434@id)) f3432@ls/false)) (apply (lambda (f3436@id) (let ((f3438@lab (f2ed2@id->label f3436@id))) (let ((f343a@b (f2ed4@label->binding f3438@lab f342b@r))) (let ((f343c@type (f2ed8@binding-type f343a@b))) (begin (if (not f3438@lab) (f2edc@raise-unbound-error f3436@id) (void)) (if (not (and (eq? f343c@type '$rtd) (not (list? (f2eda@binding-value f343a@b))))) (f31a3@syntax-violation '#f '"not a record type" f342a@e) (void)) (list 'quote (f2eda@binding-value f343a@b))))))) f3432@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3430@t)))))) (set! f4b68@f3061@type-descriptor-transformer f3061@type-descriptor-transformer) (set! f3063@record-type-descriptor-transformer (lambda (f343e@e f343f@r f3440@mr) (let ((f3444@t f343e@e)) (let ((f3446@ls/false (f30c3@syntax-dispatch f3444@t '(_ any)))) (if (and f3446@ls/false (apply (lambda (f3448@id) (f2ebc@id? f3448@id)) f3446@ls/false)) (apply (lambda (f344a@id) (let ((f344c@lab (f2ed2@id->label f344a@id))) (let ((f344e@b (f2ed4@label->binding f344c@lab f343f@r))) (let ((f3450@type (f2ed8@binding-type f344e@b))) (begin (if (not f344c@lab) (f2edc@raise-unbound-error f344a@id) (void)) (if (not (and (eq? f3450@type '$rtd) (list? (f2eda@binding-value f344e@b)))) (f31a3@syntax-violation '#f '"not a record type" f343e@e) (void)) (f30e5@chi-expr (car (f2eda@binding-value f344e@b)) f343f@r f3440@mr)))))) f3446@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3444@t)))))) (set! f4b69@f3063@record-type-descriptor-transformer f3063@record-type-descriptor-transformer) (set! f3065@record-constructor-descriptor-transformer (lambda (f3452@e f3453@r f3454@mr) (let ((f3458@t f3452@e)) (let ((f345a@ls/false (f30c3@syntax-dispatch f3458@t '(_ any)))) (if (and f345a@ls/false (apply (lambda (f345c@id) (f2ebc@id? f345c@id)) f345a@ls/false)) (apply (lambda (f345e@id) (let ((f3460@lab (f2ed2@id->label f345e@id))) (let ((f3462@b (f2ed4@label->binding f3460@lab f3453@r))) (let ((f3464@type (f2ed8@binding-type f3462@b))) (begin (if (not f3460@lab) (f2edc@raise-unbound-error f345e@id) (void)) (if (not (and (eq? f3464@type '$rtd) (list? (f2eda@binding-value f3462@b)))) (f31a3@syntax-violation '#f '"invalid type" f3452@e) (void)) (f30e5@chi-expr (cadr (f2eda@binding-value f3462@b)) f3453@r f3454@mr)))))) f345a@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3458@t)))))) (set! f4b6a@f3065@record-constructor-descriptor-transformer f3065@record-constructor-descriptor-transformer) (set! f3067@when-macro (lambda (f3466@e) (let ((f3468@t f3466@e)) (let ((f346a@ls/false (f30c3@syntax-dispatch f3468@t '(_ any any . each-any)))) (if f346a@ls/false (apply (lambda (f346c@test f346d@e f346e@e*) (f3079@bless (list 'if f346c@test (cons 'begin (cons f346d@e f346e@e*))))) f346a@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3468@t)))))) (set! f4b6b@f3067@when-macro f3067@when-macro) (set! f3069@unless-macro (lambda (f3472@e) (let ((f3474@t f3472@e)) (let ((f3476@ls/false (f30c3@syntax-dispatch f3474@t '(_ any any . each-any)))) (if f3476@ls/false (apply (lambda (f3478@test f3479@e f347a@e*) (f3079@bless (list 'if (list 'not f3478@test) (cons 'begin (cons f3479@e f347a@e*))))) f3476@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3474@t)))))) (set! f4b6c@f3069@unless-macro f3069@unless-macro) (set! f306b@if-transformer (lambda (f347e@e f347f@r f3480@mr) (let ((f3484@t f347e@e)) (let ((f3486@ls/false (f30c3@syntax-dispatch f3484@t '(_ any any any)))) (if f3486@ls/false (apply (lambda (f3488@e0 f3489@e1 f348a@e2) (list 'if (f30e5@chi-expr f3488@e0 f347f@r f3480@mr) (f30e5@chi-expr f3489@e1 f347f@r f3480@mr) (f30e5@chi-expr f348a@e2 f347f@r f3480@mr))) f3486@ls/false) (let ((f348e@t f3484@t)) (let ((f3490@ls/false (f30c3@syntax-dispatch f348e@t '(_ any any)))) (if f3490@ls/false (apply (lambda (f3492@e0 f3493@e1) (list 'if (f30e5@chi-expr f3492@e0 f347f@r f3480@mr) (f30e5@chi-expr f3493@e1 f347f@r f3480@mr) (f2e22@f2d7d@build-void))) f3490@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f348e@t))))))))) (set! f4b6d@f306b@if-transformer f306b@if-transformer) (set! f306d@and-transformer (lambda (f3496@e f3497@r f3498@mr) (let ((f349c@t f3496@e)) (let ((f349e@ls/false (f30c3@syntax-dispatch f349c@t '(_ . each-any)))) (if f349e@ls/false (apply (lambda (f34a0@e*) (cons 'and (f30e1@chi-expr* f34a0@e* f3497@r f3498@mr))) f349e@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f349c@t)))))) (set! f4b6e@f306d@and-transformer f306d@and-transformer) (set! f306f@or-transformer (lambda (f34a2@e f34a3@r f34a4@mr) (let ((f34a8@t f34a2@e)) (let ((f34aa@ls/false (f30c3@syntax-dispatch f34a8@t '(_ . each-any)))) (if f34aa@ls/false (apply (lambda (f34ac@e*) (cons 'or (f30e1@chi-expr* f34ac@e* f34a3@r f34a4@mr))) f34aa@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f34a8@t)))))) (set! f4b6f@f306f@or-transformer f306f@or-transformer) (set! f3071@case-macro (lambda (f34ae@e) (let ((f34b1@build-last '#f) (f34b3@build-one '#f)) (begin (set! f34b1@build-last (lambda (f34d8@cls) (let ((f34da@t f34d8@cls)) (let ((f34dc@ls/false (f30c3@syntax-dispatch f34da@t '(#(scheme-id else) any . each-any)))) (if f34dc@ls/false (apply (lambda (f34de@e f34df@e*) (cons 'begin (cons f34de@e f34df@e*))) f34dc@ls/false) (let ((f34e2@t f34da@t)) (let ((f34e4@ls/false (f30c3@syntax-dispatch f34e2@t '_))) (if f34e4@ls/false (apply (lambda () (f34b3@build-one f34d8@cls '(if #f #f))) f34e4@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f34e2@t))))))))) (set! f34b3@build-one (lambda (f34ca@cls f34cb@k) (let ((f34ce@t f34ca@cls)) (let ((f34d0@ls/false (f30c3@syntax-dispatch f34ce@t '(each-any any . each-any)))) (if f34d0@ls/false (apply (lambda (f34d2@d* f34d3@e f34d4@e*) (list 'if (list 'memv 't (list 'quote f34d2@d*)) (cons 'begin (cons f34d3@e f34d4@e*)) f34cb@k)) f34d0@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f34ce@t)))))) (let ((f34b4@t f34ae@e)) (let ((f34b6@ls/false (f30c3@syntax-dispatch f34b4@t '(_ any)))) (if f34b6@ls/false (apply (lambda (f34b8@expr) (f3079@bless (cons 'let (cons (list (list 't f34b8@expr)) '((if #f #f)))))) f34b6@ls/false) (let ((f34ba@t f34b4@t)) (let ((f34bc@ls/false (f30c3@syntax-dispatch f34ba@t '(_ any any . each-any)))) (if f34bc@ls/false (apply (lambda (f34be@expr f34bf@cls f34c0@cls*) (f3079@bless (list 'let (list (list 't f34be@expr)) (let f34c8@f ((f34c4@cls f34bf@cls) (f34c5@cls* f34c0@cls*)) (if (null? f34c5@cls*) (f34b1@build-last f34c4@cls) (f34b3@build-one f34c4@cls (f34c8@f (car f34c5@cls*) (cdr f34c5@cls*)))))))) f34bc@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f34ba@t))))))))))) (set! f4b70@f3071@case-macro f3071@case-macro) (set! f3073@quote-transformer (lambda (f34e6@e f34e7@r f34e8@mr) (let ((f34ec@t f34e6@e)) (let ((f34ee@ls/false (f30c3@syntax-dispatch f34ec@t '(_ any)))) (if f34ee@ls/false (apply (lambda (f34f0@datum) (list 'quote (f2ed0@stx->datum f34f0@datum))) f34ee@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f34ec@t)))))) (set! f4b71@f3073@quote-transformer f3073@quote-transformer) (set! f3075@case-lambda-transformer (lambda (f34f2@e f34f3@r f34f4@mr) (let ((f34f8@t f34f2@e)) (let ((f34fa@ls/false (f30c3@syntax-dispatch f34f8@t '(_ . #(each (any any . each-any)))))) (if f34fa@ls/false (apply (lambda (f34fc@fmls* f34fd@b* f34fe@b**) (call-with-values (lambda () (f30ed@chi-lambda-clause* f34f2@e f34fc@fmls* (map cons f34fd@b* f34fe@b**) f34f3@r f34f4@mr)) (lambda (f3506@f3503 f3507@f3505) (let ((f350a@body* f3507@f3505) (f350b@fmls* f3506@f3503)) (f2e20@f2d4d@build-case-lambda '#f f350b@fmls* f350a@body*))))) f34fa@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f34f8@t)))))) (set! f4b72@f3075@case-lambda-transformer f3075@case-lambda-transformer) (set! f3077@lambda-transformer (lambda (f350e@e f350f@r f3510@mr) (let ((f3514@t f350e@e)) (let ((f3516@ls/false (f30c3@syntax-dispatch f3514@t '(_ any any . each-any)))) (if f3516@ls/false (apply (lambda (f3518@fmls f3519@b f351a@b*) (call-with-values (lambda () (f30eb@chi-lambda-clause f350e@e f3518@fmls (cons f3519@b f351a@b*) f350f@r f3510@mr)) (lambda (f3522@f351f f3523@f3521) (let ((f3526@body f3523@f3521) (f3527@fmls f3522@f351f)) (f2e1f@f2d4b@build-lambda '#f f3527@fmls f3526@body))))) f3516@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3514@t)))))) (set! f4b73@f3077@lambda-transformer f3077@lambda-transformer) (set! f3079@bless (lambda (f352a@x) (f2ea4@mkstx (let f352e@f ((f352c@x f352a@x)) (if (f2e88@stx? f352c@x) f352c@x (if (pair? f352c@x) (cons (f352e@f (car f352c@x)) (f352e@f (cdr f352c@x))) (if (symbol? f352c@x) (f304b@scheme-stx f352c@x) (if (vector? f352c@x) (vector-map f352e@f f352c@x) f352c@x))))) '() '() '()))) (set! f4b74@f3079@bless f3079@bless) (set! f307b@with-syntax-macro (lambda (f3530@e) (let ((f3532@t f3530@e)) (let ((f3534@ls/false (f30c3@syntax-dispatch f3532@t '(_ #(each (any any)) any . each-any)))) (if f3534@ls/false (apply (lambda (f3536@pat* f3537@expr* f3538@b f3539@b*) (let ((f353e@idn* (let f3542@f ((f3540@pat* f3536@pat*)) (if (null? f3540@pat*) '() (call-with-values (lambda () (f30c1@convert-pattern (car f3540@pat*) '())) (lambda (f3548@f3545 f3549@f3547) (let ((f354c@idn* f3549@f3547) (f354d@pat f3548@f3545)) (append f354c@idn* (f3542@f (cdr f3540@pat*)))))))))) (begin (f30e9@verify-formals (map car f353e@idn*) f3530@e) (let ((f3550@t* (f3191@generate-temporaries f3537@expr*))) (f3079@bless (list 'let (map list f3550@t* f3537@expr*) (let f3556@f ((f3552@pat* f3536@pat*) (f3553@t* f3550@t*)) (if (null? f3552@pat*) (cons 'begin (cons '#f (cons f3538@b f3539@b*))) (list 'syntax-case (car f3553@t*) '() (list (car f3552@pat*) (f3556@f (cdr f3552@pat*) (cdr f3553@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car f3552@pat*)) (car f3553@t*)))))))))))) f3534@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3532@t)))))) (set! f4b75@f307b@with-syntax-macro f307b@with-syntax-macro) (set! f307d@invalid-fmls-error (lambda (f3558@stx f3559@fmls) (let ((f355c@t f3559@fmls)) (let ((f355e@ls/false (f30c3@syntax-dispatch f355c@t '#(each+ any () any)))) (if f355e@ls/false (apply (lambda (f3560@id* f3561@last) (let f3566@f ((f3564@id* (if (f2ebc@id? f3561@last) (cons f3561@last f3560@id*) (if (f2eb2@syntax-null? f3561@last) f3560@id* (f31a3@syntax-violation '#f '"not an identifier" f3558@stx f3561@last))))) (if (null? f3564@id*) (values) (if (not (f2ebc@id? (car f3564@id*))) (f31a3@syntax-violation '#f '"not an identifier" f3558@stx (car f3564@id*)) (begin (f3566@f (cdr f3564@id*)) (if (f2ec8@bound-id-member? (car f3564@id*) (cdr f3564@id*)) (f31a3@syntax-violation '#f '"duplicate binding" f3558@stx (car f3564@id*)) (void))))))) f355e@ls/false) (let ((f3568@t f355c@t)) (let ((f356a@ls/false (f30c3@syntax-dispatch f3568@t '_))) (if f356a@ls/false (apply (lambda () (f31a3@syntax-violation '#f '"malformed binding form" f3558@stx f3559@fmls)) f356a@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3568@t))))))))) (set! f4b76@f307d@invalid-fmls-error f307d@invalid-fmls-error) (set! f307f@let-macro (lambda (f356c@stx) (let ((f356e@t f356c@stx)) (let ((f3570@ls/false (f30c3@syntax-dispatch f356e@t '(_ #(each (any any)) any . each-any)))) (if f3570@ls/false (apply (lambda (f3572@lhs* f3573@rhs* f3574@b f3575@b*) (if (f2ec4@valid-bound-ids? f3572@lhs*) (f3079@bless (cons (cons 'lambda (cons f3572@lhs* (cons f3574@b f3575@b*))) f3573@rhs*)) (f307d@invalid-fmls-error f356c@stx f3572@lhs*))) f3570@ls/false) (let ((f357a@t f356e@t)) (let ((f357c@ls/false (f30c3@syntax-dispatch f357a@t '(_ any #(each (any any)) any . each-any)))) (if (and f357c@ls/false (apply (lambda (f357e@f f357f@lhs* f3580@rhs* f3581@b f3582@b*) (f2ebc@id? f357e@f)) f357c@ls/false)) (apply (lambda (f3588@f f3589@lhs* f358a@rhs* f358b@b f358c@b*) (if (f2ec4@valid-bound-ids? f3589@lhs*) (f3079@bless (cons (list 'letrec (list (list f3588@f (cons 'lambda (cons f3589@lhs* (cons f358b@b f358c@b*))))) f3588@f) f358a@rhs*)) (f307d@invalid-fmls-error f356c@stx f3589@lhs*))) f357c@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f357a@t))))))))) (set! f4b77@f307f@let-macro f307f@let-macro) (set! f3081@let-values-macro (lambda (f3592@stx) (let ((f3595@rename '#f) (f3597@rename* '#f)) (begin (set! f3595@rename (lambda (f35fa@x f35fb@old* f35fc@new*) (begin (if (not (f2ebc@id? f35fa@x)) (f31a3@syntax-violation '#f '"not an indentifier" f3592@stx f35fa@x) (void)) (if (f2ec8@bound-id-member? f35fa@x f35fb@old*) (f31a3@syntax-violation '#f '"duplicate binding" f3592@stx f35fa@x) (void)) (let ((f3600@y (gensym (f31a9@syntax->datum f35fa@x)))) (values f3600@y (cons f35fa@x f35fb@old*) (cons f3600@y f35fc@new*)))))) (set! f3597@rename* (lambda (f35e8@x* f35e9@old* f35ea@new*) (if (null? f35e8@x*) (values '() f35e9@old* f35ea@new*) (call-with-values (lambda () (f3595@rename (car f35e8@x*) f35e9@old* f35ea@new*)) (lambda (f35ee@x f35ef@old* f35f0@new*) (call-with-values (lambda () (f3597@rename* (cdr f35e8@x*) f35ef@old* f35f0@new*)) (lambda (f35f4@x* f35f5@old* f35f6@new*) (values (cons f35ee@x f35f4@x*) f35f5@old* f35f6@new*)))))))) (let ((f3598@t f3592@stx)) (let ((f359a@ls/false (f30c3@syntax-dispatch f3598@t '(_ () any . each-any)))) (if f359a@ls/false (apply (lambda (f359c@b f359d@b*) (cons* (f3079@bless 'let) '() f359c@b f359d@b*)) f359a@ls/false) (let ((f35a0@t f3598@t)) (let ((f35a2@ls/false (f30c3@syntax-dispatch f35a0@t '(_ #(each (any any)) any . each-any)))) (if f35a2@ls/false (apply (lambda (f35a4@lhs* f35a5@rhs* f35a6@b f35a7@b*) (f3079@bless (let f35b4@f ((f35ac@lhs* f35a4@lhs*) (f35ad@rhs* f35a5@rhs*) (f35ae@old* '()) (f35af@new* '())) (if (null? f35ac@lhs*) (cons 'let (cons (map list f35ae@old* f35af@new*) (cons f35a6@b f35a7@b*))) (let ((f35b6@t (car f35ac@lhs*))) (let ((f35b8@ls/false (f30c3@syntax-dispatch f35b6@t 'each-any))) (if f35b8@ls/false (apply (lambda (f35ba@x*) (call-with-values (lambda () (f3597@rename* f35ba@x* f35ae@old* f35af@new*)) (lambda (f35c2@f35bd f35c3@f35bf f35c4@f35c1) (let ((f35c8@new* f35c4@f35c1) (f35c9@old* f35c3@f35bf) (f35ca@y* f35c2@f35bd)) (list 'call-with-values (list 'lambda '() (car f35ad@rhs*)) (list 'lambda f35ca@y* (f35b4@f (cdr f35ac@lhs*) (cdr f35ad@rhs*) f35c9@old* f35c8@new*))))))) f35b8@ls/false) (let ((f35ce@t f35b6@t)) (let ((f35d0@ls/false (f30c3@syntax-dispatch f35ce@t '#(each+ any () any)))) (if f35d0@ls/false (apply (lambda (f35d2@x* f35d3@x) (call-with-values (lambda () (f3595@rename f35d3@x f35ae@old* f35af@new*)) (lambda (f35d6@y f35d7@old* f35d8@new*) (call-with-values (lambda () (f3597@rename* f35d2@x* f35d7@old* f35d8@new*)) (lambda (f35dc@y* f35dd@old* f35de@new*) (list 'call-with-values (list 'lambda '() (car f35ad@rhs*)) (list 'lambda (append f35dc@y* f35d6@y) (f35b4@f (cdr f35ac@lhs*) (cdr f35ad@rhs*) f35dd@old* f35de@new*)))))))) f35d0@ls/false) (let ((f35e2@t f35ce@t)) (let ((f35e4@ls/false (f30c3@syntax-dispatch f35e2@t 'any))) (if f35e4@ls/false (apply (lambda (f35e6@others) (f31a3@syntax-violation '#f '"malformed bindings" f3592@stx f35e6@others)) f35e4@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f35e2@t)))))))))))))) f35a2@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f35a0@t))))))))))) (set! f4b78@f3081@let-values-macro f3081@let-values-macro) (set! f3083@let*-values-macro (lambda (f3602@stx) (let ((f3605@check '#f)) (begin (set! f3605@check (lambda (f3634@x*) (if (not (null? f3634@x*)) (let ((f3636@x (car f3634@x*))) (begin (if (not (f2ebc@id? f3636@x)) (f31a3@syntax-violation '#f '"not an identifier" f3602@stx f3636@x) (void)) (f3605@check (cdr f3634@x*)) (if (f2ec8@bound-id-member? f3636@x (cdr f3634@x*)) (f31a3@syntax-violation '#f '"duplicate identifier" f3602@stx f3636@x) (void)))) (void)))) (let ((f3606@t f3602@stx)) (let ((f3608@ls/false (f30c3@syntax-dispatch f3606@t '(_ () any . each-any)))) (if f3608@ls/false (apply (lambda (f360a@b f360b@b*) (cons* (f3079@bless 'let) '() f360a@b f360b@b*)) f3608@ls/false) (let ((f360e@t f3606@t)) (let ((f3610@ls/false (f30c3@syntax-dispatch f360e@t '(_ #(each (any any)) any . each-any)))) (if f3610@ls/false (apply (lambda (f3612@lhs* f3613@rhs* f3614@b f3615@b*) (f3079@bless (let f361e@f ((f361a@lhs* f3612@lhs*) (f361b@rhs* f3613@rhs*)) (if (null? f361a@lhs*) (cons 'begin (cons f3614@b f3615@b*)) (let ((f3620@t (car f361a@lhs*))) (let ((f3622@ls/false (f30c3@syntax-dispatch f3620@t 'each-any))) (if f3622@ls/false (apply (lambda (f3624@x*) (begin (f3605@check f3624@x*) (list 'call-with-values (list 'lambda '() (car f361b@rhs*)) (list 'lambda f3624@x* (f361e@f (cdr f361a@lhs*) (cdr f361b@rhs*)))))) f3622@ls/false) (let ((f3626@t f3620@t)) (let ((f3628@ls/false (f30c3@syntax-dispatch f3626@t '#(each+ any () any)))) (if f3628@ls/false (apply (lambda (f362a@x* f362b@x) (begin (f3605@check (cons f362b@x f362a@x*)) (list 'call-with-values (list 'lambda '() (car f361b@rhs*)) (list 'lambda (append f362a@x* f362b@x) (f361e@f (cdr f361a@lhs*) (cdr f361b@rhs*)))))) f3628@ls/false) (let ((f362e@t f3626@t)) (let ((f3630@ls/false (f30c3@syntax-dispatch f362e@t 'any))) (if f3630@ls/false (apply (lambda (f3632@others) (f31a3@syntax-violation '#f '"malformed bindings" f3602@stx f3632@others)) f3630@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f362e@t)))))))))))))) f3610@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f360e@t))))))))))) (set! f4b79@f3083@let*-values-macro f3083@let*-values-macro) (set! f3085@trace-lambda-macro (lambda (f3638@stx) (let ((f363a@t f3638@stx)) (let ((f363c@ls/false (f30c3@syntax-dispatch f363a@t '(_ any each-any any . each-any)))) (if f363c@ls/false (apply (lambda (f363e@who f363f@fmls f3640@b f3641@b*) (if (f2ec4@valid-bound-ids? f363f@fmls) (f3079@bless (list 'make-traced-procedure (list 'quote f363e@who) (cons 'lambda (cons f363f@fmls (cons f3640@b f3641@b*))))) (f307d@invalid-fmls-error f3638@stx f363f@fmls))) f363c@ls/false) (let ((f3646@t f363a@t)) (let ((f3648@ls/false (f30c3@syntax-dispatch f3646@t '(_ any #(each+ any () any) any . each-any)))) (if f3648@ls/false (apply (lambda (f364a@who f364b@fmls f364c@last f364d@b f364e@b*) (if (f2ec4@valid-bound-ids? (cons f364c@last f364b@fmls)) (f3079@bless (list 'make-traced-procedure (list 'quote f364a@who) (cons 'lambda (cons (append f364b@fmls f364c@last) (cons f364d@b f364e@b*))))) (f307d@invalid-fmls-error f3638@stx (append f364b@fmls f364c@last)))) f3648@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3646@t))))))))) (set! f4b7a@f3085@trace-lambda-macro f3085@trace-lambda-macro) (set! f3087@trace-define-macro (lambda (f3654@stx) (let ((f3656@t f3654@stx)) (let ((f3658@ls/false (f30c3@syntax-dispatch f3656@t '(_ (any . each-any) any . each-any)))) (if f3658@ls/false (apply (lambda (f365a@who f365b@fmls f365c@b f365d@b*) (if (f2ec4@valid-bound-ids? f365b@fmls) (f3079@bless (list 'define f365a@who (list 'make-traced-procedure (list 'quote f365a@who) (cons 'lambda (cons f365b@fmls (cons f365c@b f365d@b*)))))) (f307d@invalid-fmls-error f3654@stx f365b@fmls))) f3658@ls/false) (let ((f3662@t f3656@t)) (let ((f3664@ls/false (f30c3@syntax-dispatch f3662@t '(_ (any . #(each+ any () any)) any . each-any)))) (if f3664@ls/false (apply (lambda (f3666@who f3667@fmls f3668@last f3669@b f366a@b*) (if (f2ec4@valid-bound-ids? (cons f3668@last f3667@fmls)) (f3079@bless (list 'define f3666@who (list 'make-traced-procedure (list 'quote f3666@who) (cons 'lambda (cons (append f3667@fmls f3668@last) (cons f3669@b f366a@b*)))))) (f307d@invalid-fmls-error f3654@stx (append f3667@fmls f3668@last)))) f3664@ls/false) (let ((f3670@t f3662@t)) (let ((f3672@ls/false (f30c3@syntax-dispatch f3670@t '(_ any any)))) (if f3672@ls/false (apply (lambda (f3674@who f3675@expr) (if (f2ebc@id? f3674@who) (f3079@bless (list 'define f3674@who (list 'let (list (list 'v f3675@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote f3674@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (f31a3@syntax-violation '#f '"invalid name" f3654@stx))) f3672@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3670@t)))))))))))) (set! f4b7b@f3087@trace-define-macro f3087@trace-define-macro) (set! f3089@trace-define-syntax-macro (lambda (f3678@stx) (let ((f367a@t f3678@stx)) (let ((f367c@ls/false (f30c3@syntax-dispatch f367a@t '(_ any any)))) (if f367c@ls/false (apply (lambda (f367e@who f367f@expr) (if (f2ebc@id? f367e@who) (f3079@bless (list 'define-syntax f367e@who (list 'make-traced-macro (list 'quote f367e@who) f367f@expr))) (f31a3@syntax-violation '#f '"invalid name" f3678@stx))) f367c@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f367a@t)))))) (set! f4b7c@f3089@trace-define-syntax-macro f3089@trace-define-syntax-macro) (set! f308b@trace-let/rec-syntax (lambda (f3682@who) (lambda (f3684@stx) (let ((f3686@t f3684@stx)) (let ((f3688@ls/false (f30c3@syntax-dispatch f3686@t '(_ #(each (any any)) any . each-any)))) (if f3688@ls/false (apply (lambda (f368a@lhs* f368b@rhs* f368c@b f368d@b*) (if (f2ec4@valid-bound-ids? f368a@lhs*) (let ((f3692@rhs* (map (lambda (f3694@lhs f3695@rhs) (list 'make-traced-macro (list 'quote f3694@lhs) f3695@rhs)) f368a@lhs* f368b@rhs*))) (f3079@bless (cons f3682@who (cons (map list f368a@lhs* f3692@rhs*) (cons f368c@b f368d@b*))))) (f307d@invalid-fmls-error f3684@stx f368a@lhs*))) f3688@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3686@t))))))) (set! f4b7d@f308b@trace-let/rec-syntax f308b@trace-let/rec-syntax) (set! f308d@trace-let-syntax-macro (f308b@trace-let/rec-syntax 'let-syntax)) (set! f4b7e@f308d@trace-let-syntax-macro f308d@trace-let-syntax-macro) (set! f308f@trace-letrec-syntax-macro (f308b@trace-let/rec-syntax 'letrec-syntax)) (set! f4b7f@f308f@trace-letrec-syntax-macro f308f@trace-letrec-syntax-macro) (set! f3091@guard-macro (lambda (f3698@x) (let ((f369b@gen-clauses '#f)) (begin (set! f369b@gen-clauses (lambda (f36b2@con f36b3@outerk f36b4@clause*) (let ((f36b9@f '#f) (f36bb@f* '#f)) (begin (set! f36b9@f (lambda (f36f2@x f36f3@k) (let ((f36f6@t f36f2@x)) (let ((f36f8@ls/false (f30c3@syntax-dispatch f36f6@t '(any #(scheme-id =>) any)))) (if f36f8@ls/false (apply (lambda (f36fa@e f36fb@p) (let ((f36fe@t (gensym))) (list 'let (list (list f36fe@t f36fa@e)) (list 'if f36fe@t (list f36fb@p f36fe@t) f36f3@k)))) f36f8@ls/false) (let ((f3700@t f36f6@t)) (let ((f3702@ls/false (f30c3@syntax-dispatch f3700@t '(any)))) (if f3702@ls/false (apply (lambda (f3704@e) (let ((f3706@t (gensym))) (list 'let (list (list f3706@t f3704@e)) (list 'if f3706@t f3706@t f36f3@k)))) f3702@ls/false) (let ((f3708@t f3700@t)) (let ((f370a@ls/false (f30c3@syntax-dispatch f3708@t '(any any . each-any)))) (if f370a@ls/false (apply (lambda (f370c@e f370d@v f370e@v*) (list 'if f370c@e (cons 'begin (cons f370d@v f370e@v*)) f36f3@k)) f370a@ls/false) (let ((f3712@t f3708@t)) (let ((f3714@ls/false (f30c3@syntax-dispatch f3712@t '_))) (if f3714@ls/false (apply (lambda () (f31a3@syntax-violation '#f '"invalid guard clause" f36f2@x)) f3714@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3712@t))))))))))))))) (set! f36bb@f* (lambda (f36c8@x*) (let ((f36ca@t f36c8@x*)) (let ((f36cc@ls/false (f30c3@syntax-dispatch f36ca@t '()))) (if f36cc@ls/false (apply (lambda () (let ((f36ce@g (gensym))) (values (list f36ce@g (list 'lambda '() (list 'raise-continuable f36b2@con))) f36ce@g))) f36cc@ls/false) (let ((f36d0@t f36ca@t)) (let ((f36d2@ls/false (f30c3@syntax-dispatch f36d0@t '((#(scheme-id else) any . each-any))))) (if f36d2@ls/false (apply (lambda (f36d4@e f36d5@e*) (values (cons 'begin (cons f36d4@e f36d5@e*)) '#f)) f36d2@ls/false) (let ((f36d8@t f36d0@t)) (let ((f36da@ls/false (f30c3@syntax-dispatch f36d8@t '(any . any)))) (if f36da@ls/false (apply (lambda (f36dc@cls f36dd@cls*) (call-with-values (lambda () (f36bb@f* f36dd@cls*)) (lambda (f36e4@f36e1 f36e5@f36e3) (let ((f36e8@g f36e5@f36e3) (f36e9@e f36e4@f36e1)) (values (f36b9@f f36dc@cls f36e9@e) f36e8@g))))) f36da@ls/false) (let ((f36ec@t f36d8@t)) (let ((f36ee@ls/false (f30c3@syntax-dispatch f36ec@t 'any))) (if f36ee@ls/false (apply (lambda (f36f0@others) (f31a3@syntax-violation '#f '"invalid guard clause" f36f0@others)) f36ee@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f36ec@t))))))))))))))) (call-with-values (lambda () (f36bb@f* f36b4@clause*)) (lambda (f36c0@f36bd f36c1@f36bf) (let ((f36c4@raisek f36c1@f36bf) (f36c5@code f36c0@f36bd)) (if f36c4@raisek (list (list 'call/cc (list 'lambda (list f36c4@raisek) (list f36b3@outerk (list 'lambda '() f36c5@code))))) (list f36b3@outerk (list 'lambda '() f36c5@code)))))))))) (let ((f369c@t f3698@x)) (let ((f369e@ls/false (f30c3@syntax-dispatch f369c@t '(_ (any . each-any) any . each-any)))) (if (and f369e@ls/false (apply (lambda (f36a0@con f36a1@clause* f36a2@b f36a3@b*) (f2ebc@id? f36a0@con)) f369e@ls/false)) (apply (lambda (f36a8@con f36a9@clause* f36aa@b f36ab@b*) (let ((f36b0@outerk (gensym))) (f3079@bless (list (list 'call/cc (list 'lambda (list f36b0@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list f36a8@con) (f369b@gen-clauses f36a8@con f36b0@outerk f36a9@clause*)) (cons 'lambda (cons '() (cons f36aa@b f36ab@b*))))))))))) f369e@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f369c@t)))))))) (set! f4b80@f3091@guard-macro f3091@guard-macro) (set! f3093@define-enumeration-macro (lambda (f3716@stx) (let ((f3719@set? '#f) (f371b@remove-dups '#f)) (begin (set! f3719@set? (lambda (f3732@x) (or (null? f3732@x) (and (not (memq (car f3732@x) (cdr f3732@x))) (f3719@set? (cdr f3732@x)))))) (set! f371b@remove-dups (lambda (f3730@ls) (if (null? f3730@ls) '() (cons (car f3730@ls) (f371b@remove-dups (remq (car f3730@ls) (cdr f3730@ls))))))) (let ((f371c@t f3716@stx)) (let ((f371e@ls/false (f30c3@syntax-dispatch f371c@t '(_ any each-any any)))) (if (and f371e@ls/false (apply (lambda (f3720@name f3721@id* f3722@maker) (and (f2ebc@id? f3720@name) (f2ebc@id? f3722@maker) (for-all f2ebc@id? f3721@id*))) f371e@ls/false)) (apply (lambda (f3726@name f3727@id* f3728@maker) (let ((f372c@name* (f371b@remove-dups (f31a9@syntax->datum f3727@id*))) (f372d@mk (gensym))) (f3079@bless (list 'begin (list 'define f372d@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote f372c@name*)))) (list 'define-syntax f3726@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote f372c@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote f3726@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax f3728@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote f3728@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote f372c@name*)) (cons 'syntax-violation (cons (list 'quote f3728@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons f372d@mk '('(n* ...))))))))))))) f371e@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f371c@t)))))))) (set! f4b81@f3093@define-enumeration-macro f3093@define-enumeration-macro) (set! f3095@time-macro (lambda (f3734@stx) (let ((f3736@t f3734@stx)) (let ((f3738@ls/false (f30c3@syntax-dispatch f3736@t '(_ any)))) (if f3738@ls/false (apply (lambda (f373a@expr) (f3079@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() f373a@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) f3738@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3736@t)))))) (set! f4b82@f3095@time-macro f3095@time-macro) (set! f3097@delay-macro (lambda (f373c@stx) (let ((f373e@t f373c@stx)) (let ((f3740@ls/false (f30c3@syntax-dispatch f373e@t '(_ any)))) (if f3740@ls/false (apply (lambda (f3742@expr) (f3079@bless (list 'make-promise (list 'lambda '() f3742@expr)))) f3740@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f373e@t)))))) (set! f4b83@f3097@delay-macro f3097@delay-macro) (set! f3099@assert-macro (lambda (f3744@stx) (let ((f3746@t f3744@stx)) (let ((f3748@ls/false (f30c3@syntax-dispatch f3746@t '(_ any)))) (if f3748@ls/false (apply (lambda (f374a@expr) (let ((f374c@pos (or (f319b@expression-position f3744@stx) (f319b@expression-position f374a@expr)))) (f3079@bless (list 'let (list (list 'x f374a@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote f374a@expr) (list 'quote f374c@pos))))))) f3748@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3746@t)))))) (set! f4b84@f3099@assert-macro f3099@assert-macro) (set! f309b@endianness-macro (lambda (f374e@stx) (let ((f3750@t f374e@stx)) (let ((f3752@ls/false (f30c3@syntax-dispatch f3750@t '(_ any)))) (if f3752@ls/false (apply (lambda (f3754@e) (let ((f3756@t (f31a9@syntax->datum f3754@e))) (if (memv f3756@t '(little)) (f3079@bless ''little) (if (memv f3756@t '(big)) (f3079@bless ''big) (f31a3@syntax-violation '#f '"endianness must be big or little" f374e@stx))))) f3752@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3750@t)))))) (set! f4b85@f309b@endianness-macro f309b@endianness-macro) (set! f309d@identifier-syntax-macro (lambda (f3758@stx) (let ((f375a@t f3758@stx)) (let ((f375c@ls/false (f30c3@syntax-dispatch f375a@t '(_ any)))) (if f375c@ls/false (apply (lambda (f375e@expr) (f3079@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax f375e@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax f375e@expr) '((syntax (e* ...)))))))))) f375c@ls/false) (let ((f3760@t f375a@t)) (let ((f3762@ls/false (f30c3@syntax-dispatch f3760@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and f3762@ls/false (apply (lambda (f3764@id1 f3765@expr1 f3766@id2 f3767@expr2 f3768@expr3) (and (f2ebc@id? f3764@id1) (f2ebc@id? f3766@id2) (f2ebc@id? f3767@expr2))) f3762@ls/false)) (apply (lambda (f376e@id1 f376f@expr1 f3770@id2 f3771@expr2 f3772@expr3) (f3079@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax f376f@expr1)) (list (list 'set! 'id f3771@expr2) (list 'syntax f3772@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons f376f@expr1 '(e* ...))))))))) f3762@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3760@t))))))))) (set! f4b86@f309d@identifier-syntax-macro f309d@identifier-syntax-macro) (set! f309f@do-macro (lambda (f3778@stx) (let ((f377b@bind '#f)) (begin (set! f377b@bind (lambda (f3792@x) (let ((f3794@t f3792@x)) (let ((f3796@ls/false (f30c3@syntax-dispatch f3794@t '(any any)))) (if f3796@ls/false (apply (lambda (f3798@x f3799@init) (list f3798@x f3799@init f3798@x)) f3796@ls/false) (let ((f379c@t f3794@t)) (let ((f379e@ls/false (f30c3@syntax-dispatch f379c@t '(any any any)))) (if f379e@ls/false (apply (lambda (f37a0@x f37a1@init f37a2@step) (list f37a0@x f37a1@init f37a2@step)) f379e@ls/false) (let ((f37a6@t f379c@t)) (let ((f37a8@ls/false (f30c3@syntax-dispatch f37a6@t '_))) (if f37a8@ls/false (apply (lambda () (f31a3@syntax-violation '#f '"invalid binding" f3778@stx)) f37a8@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f37a6@t)))))))))))) (let ((f377c@t f3778@stx)) (let ((f377e@ls/false (f30c3@syntax-dispatch f377c@t '(_ each-any (any . each-any) . each-any)))) (if f377e@ls/false (apply (lambda (f3780@binding* f3781@test f3782@expr* f3783@command*) (let ((f3788@t (map f377b@bind f3780@binding*))) (let ((f378a@ls/false (f30c3@syntax-dispatch f3788@t '#(each (any any any))))) (if f378a@ls/false (apply (lambda (f378c@x* f378d@init* f378e@step*) (if (f2ec4@valid-bound-ids? f378c@x*) (f3079@bless (list 'letrec (list (list 'loop (list 'lambda f378c@x* (list 'if f3781@test (cons 'begin (cons '(if #f #f) f3782@expr*)) (cons 'begin (append f3783@command* (list (cons 'loop f378e@step*)))))))) (cons 'loop f378d@init*))) (f31a3@syntax-violation '#f '"invalid bindings" f3778@stx))) f378a@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3788@t))))) f377e@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f377c@t)))))))) (set! f4b87@f309f@do-macro f309f@do-macro) (set! f30a1@let*-macro (lambda (f37aa@stx) (let ((f37ac@t f37aa@stx)) (let ((f37ae@ls/false (f30c3@syntax-dispatch f37ac@t '(_ #(each (any any)) any . each-any)))) (if (and f37ae@ls/false (apply (lambda (f37b0@lhs* f37b1@rhs* f37b2@b f37b3@b*) (for-all f2ebc@id? f37b0@lhs*)) f37ae@ls/false)) (apply (lambda (f37b8@lhs* f37b9@rhs* f37ba@b f37bb@b*) (f3079@bless (let f37c2@f ((f37c0@x* (map list f37b8@lhs* f37b9@rhs*))) (if (null? f37c0@x*) (cons 'let (cons '() (cons f37ba@b f37bb@b*))) (list 'let (list (car f37c0@x*)) (f37c2@f (cdr f37c0@x*))))))) f37ae@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f37ac@t)))))) (set! f4b88@f30a1@let*-macro f30a1@let*-macro) (set! f30a3@or-macro (lambda (f37c4@stx) (let ((f37c6@t f37c4@stx)) (let ((f37c8@ls/false (f30c3@syntax-dispatch f37c6@t '(_)))) (if f37c8@ls/false (apply (lambda () '#f) f37c8@ls/false) (let ((f37ca@t f37c6@t)) (let ((f37cc@ls/false (f30c3@syntax-dispatch f37ca@t '(_ any . each-any)))) (if f37cc@ls/false (apply (lambda (f37ce@e f37cf@e*) (f3079@bless (let f37d6@f ((f37d2@e f37ce@e) (f37d3@e* f37cf@e*)) (if (null? f37d3@e*) (list 'begin '#f f37d2@e) (list 'let (list (list 't f37d2@e)) (list 'if 't 't (f37d6@f (car f37d3@e*) (cdr f37d3@e*)))))))) f37cc@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f37ca@t))))))))) (set! f4b89@f30a3@or-macro f30a3@or-macro) (set! f30a5@and-macro (lambda (f37d8@stx) (let ((f37da@t f37d8@stx)) (let ((f37dc@ls/false (f30c3@syntax-dispatch f37da@t '(_)))) (if f37dc@ls/false (apply (lambda () '#t) f37dc@ls/false) (let ((f37de@t f37da@t)) (let ((f37e0@ls/false (f30c3@syntax-dispatch f37de@t '(_ any . each-any)))) (if f37e0@ls/false (apply (lambda (f37e2@e f37e3@e*) (f3079@bless (let f37ea@f ((f37e6@e f37e2@e) (f37e7@e* f37e3@e*)) (if (null? f37e7@e*) (list 'begin '#f f37e6@e) (cons 'if (cons f37e6@e (cons (f37ea@f (car f37e7@e*) (cdr f37e7@e*)) '(#f)))))))) f37e0@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f37de@t))))))))) (set! f4b8a@f30a5@and-macro f30a5@and-macro) (set! f30a7@cond-macro (lambda (f37ec@stx) (let ((f37ee@t f37ec@stx)) (let ((f37f0@ls/false (f30c3@syntax-dispatch f37ee@t '(_ any . each-any)))) (if f37f0@ls/false (apply (lambda (f37f2@cls f37f3@cls*) (f3079@bless (let f37fa@f ((f37f6@cls f37f2@cls) (f37f7@cls* f37f3@cls*)) (if (null? f37f7@cls*) (let ((f37fc@t f37f6@cls)) (let ((f37fe@ls/false (f30c3@syntax-dispatch f37fc@t '(#(scheme-id else) any . each-any)))) (if f37fe@ls/false (apply (lambda (f3800@e f3801@e*) (cons 'begin (cons f3800@e f3801@e*))) f37fe@ls/false) (let ((f3804@t f37fc@t)) (let ((f3806@ls/false (f30c3@syntax-dispatch f3804@t '(any #(scheme-id =>) any)))) (if f3806@ls/false (apply (lambda (f3808@e f3809@p) (list 'let (list (list 't f3808@e)) (list 'if 't (cons f3809@p '(t))))) f3806@ls/false) (let ((f380c@t f3804@t)) (let ((f380e@ls/false (f30c3@syntax-dispatch f380c@t '(any)))) (if f380e@ls/false (apply (lambda (f3810@e) (cons 'or (cons f3810@e '((if #f #f))))) f380e@ls/false) (let ((f3812@t f380c@t)) (let ((f3814@ls/false (f30c3@syntax-dispatch f3812@t '(any . each-any)))) (if f3814@ls/false (apply (lambda (f3816@e f3817@e*) (list 'if f3816@e (cons 'begin f3817@e*))) f3814@ls/false) (let ((f381a@t f3812@t)) (let ((f381c@ls/false (f30c3@syntax-dispatch f381a@t '_))) (if f381c@ls/false (apply (lambda () (f31a3@syntax-violation '#f '"invalid last clause" f37ec@stx)) f381c@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f381a@t)))))))))))))))) (let ((f381e@t f37f6@cls)) (let ((f3820@ls/false (f30c3@syntax-dispatch f381e@t '(#(scheme-id else) any . each-any)))) (if f3820@ls/false (apply (lambda (f3822@e f3823@e*) (f31a3@syntax-violation '#f '"incorrect position of keyword else" f37ec@stx)) f3820@ls/false) (let ((f3826@t f381e@t)) (let ((f3828@ls/false (f30c3@syntax-dispatch f3826@t '(any #(scheme-id =>) any)))) (if f3828@ls/false (apply (lambda (f382a@e f382b@p) (list 'let (list (list 't f382a@e)) (list 'if 't (cons f382b@p '(t)) (f37fa@f (car f37f7@cls*) (cdr f37f7@cls*))))) f3828@ls/false) (let ((f382e@t f3826@t)) (let ((f3830@ls/false (f30c3@syntax-dispatch f382e@t '(any)))) (if f3830@ls/false (apply (lambda (f3832@e) (list 'or f3832@e (f37fa@f (car f37f7@cls*) (cdr f37f7@cls*)))) f3830@ls/false) (let ((f3834@t f382e@t)) (let ((f3836@ls/false (f30c3@syntax-dispatch f3834@t '(any . each-any)))) (if f3836@ls/false (apply (lambda (f3838@e f3839@e*) (list 'if f3838@e (cons 'begin f3839@e*) (f37fa@f (car f37f7@cls*) (cdr f37f7@cls*)))) f3836@ls/false) (let ((f383c@t f3834@t)) (let ((f383e@ls/false (f30c3@syntax-dispatch f383c@t '_))) (if f383e@ls/false (apply (lambda () (f31a3@syntax-violation '#f '"invalid last clause" f37ec@stx)) f383e@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f383c@t)))))))))))))))))))) f37f0@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f37ee@t)))))) (set! f4b8b@f30a7@cond-macro f30a7@cond-macro) (set! f30a9@do-include (lambda (f3840@stx f3841@id f3842@filename) (let ((f3846@filename (f2ed0@stx->datum f3842@filename))) (begin (if (not (and (string? f3846@filename) (f2ebc@id? f3841@id))) (f31a3@syntax-violation '#f '"invalid syntax" f3840@stx) (void)) (cons (f3079@bless 'begin) (with-input-from-file f3846@filename (lambda () (let f384a@f ((f3848@ls '())) (let ((f384c@x (f29f9@f28cb@read-annotated))) (if (eof-object? f384c@x) (reverse f3848@ls) (f384a@f (cons (f2e9c@datum->stx f3841@id f384c@x) f3848@ls)))))))))))) (set! f4b8c@f30a9@do-include f30a9@do-include) (set! f30ab@include-macro (lambda (f384e@e) (let ((f3850@t f384e@e)) (let ((f3852@ls/false (f30c3@syntax-dispatch f3850@t '(any any)))) (if f3852@ls/false (apply (lambda (f3854@id f3855@filename) (f30a9@do-include f384e@e f3854@id f3855@filename)) f3852@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3850@t)))))) (set! f4b8d@f30ab@include-macro f30ab@include-macro) (set! f30ad@include-into-macro (lambda (f3858@e) (let ((f385a@t f3858@e)) (let ((f385c@ls/false (f30c3@syntax-dispatch f385a@t '(_ any any)))) (if f385c@ls/false (apply (lambda (f385e@id f385f@filename) (f30a9@do-include f3858@e f385e@id f385f@filename)) f385c@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f385a@t)))))) (set! f4b8e@f30ad@include-into-macro f30ad@include-into-macro) (set! f30af@syntax-rules-macro (lambda (f3862@e) (let ((f3864@t f3862@e)) (let ((f3866@ls/false (f30c3@syntax-dispatch f3864@t '(_ each-any . #(each (any any)))))) (if f3866@ls/false (apply (lambda (f3868@lits f3869@pat* f386a@tmp*) (begin (f30c9@verify-literals f3868@lits f3862@e) (f3079@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons f3868@lits (map (lambda (f386e@pat f386f@tmp) (let ((f3872@t f386e@pat)) (let ((f3874@ls/false (f30c3@syntax-dispatch f3872@t '(_ . any)))) (if f3874@ls/false (apply (lambda (f3876@rest) (list (cons 'g f3876@rest) (list 'syntax f386f@tmp))) f3874@ls/false) (let ((f3878@t f3872@t)) (let ((f387a@ls/false (f30c3@syntax-dispatch f3878@t '_))) (if f387a@ls/false (apply (lambda () (f31a3@syntax-violation '#f '"invalid syntax-rules pattern" f3862@e f386e@pat)) f387a@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3878@t)))))))) f3869@pat* f386a@tmp*)))))))) f3866@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3864@t)))))) (set! f4b8f@f30af@syntax-rules-macro f30af@syntax-rules-macro) (set! f30b1@quasiquote-macro (let ((f387d@datum '#f) (f3899@quasicons* '#f) (f389b@quasicons '#f) (f389d@quasiappend '#f) (f389f@quasivector '#f) (f38a1@vquasi '#f) (f38a3@quasi '#f)) (begin (set! f387d@datum (lambda (f397e@x) (list (f304b@scheme-stx 'quote) (f2ea4@mkstx f397e@x '() '() '())))) (set! f3899@quasicons* (lambda (f3976@x f3977@y) (let f397c@f ((f397a@x f3976@x)) (if (null? f397a@x) f3977@y (f389b@quasicons (car f397a@x) (f397c@f (cdr f397a@x))))))) (set! f389b@quasicons (lambda (f3950@x f3951@y) (let ((f3954@t f3951@y)) (let ((f3956@ls/false (f30c3@syntax-dispatch f3954@t '(#(scheme-id quote) any)))) (if f3956@ls/false (apply (lambda (f3958@dy) (let ((f395a@t f3950@x)) (let ((f395c@ls/false (f30c3@syntax-dispatch f395a@t '(#(scheme-id quote) any)))) (if f395c@ls/false (apply (lambda (f395e@dx) (list (f304b@scheme-stx 'quote) (cons f395e@dx f3958@dy))) f395c@ls/false) (let ((f3960@t f395a@t)) (let ((f3962@ls/false (f30c3@syntax-dispatch f3960@t '_))) (if f3962@ls/false (apply (lambda () (let ((f3964@t f3958@dy)) (let ((f3966@ls/false (f30c3@syntax-dispatch f3964@t '()))) (if f3966@ls/false (apply (lambda () (list (f304b@scheme-stx 'list) f3950@x)) f3966@ls/false) (let ((f3968@t f3964@t)) (let ((f396a@ls/false (f30c3@syntax-dispatch f3968@t '_))) (if f396a@ls/false (apply (lambda () (list (f304b@scheme-stx 'cons) f3950@x f3951@y)) f396a@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3968@t)))))))) f3962@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3960@t)))))))) f3956@ls/false) (let ((f396c@t f3954@t)) (let ((f396e@ls/false (f30c3@syntax-dispatch f396c@t '(#(scheme-id list) . each-any)))) (if f396e@ls/false (apply (lambda (f3970@stuff) (cons* (f304b@scheme-stx 'list) f3950@x f3970@stuff)) f396e@ls/false) (let ((f3972@t f396c@t)) (let ((f3974@ls/false (f30c3@syntax-dispatch f3972@t '_))) (if f3974@ls/false (apply (lambda () (list (f304b@scheme-stx 'cons) f3950@x f3951@y)) f3974@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3972@t)))))))))))) (set! f389d@quasiappend (lambda (f3936@x f3937@y) (let ((f393a@ls (let f393e@f ((f393c@x f3936@x)) (if (null? f393c@x) (let ((f3940@t f3937@y)) (let ((f3942@ls/false (f30c3@syntax-dispatch f3940@t '(#(scheme-id quote) ())))) (if f3942@ls/false (apply (lambda () '()) f3942@ls/false) (let ((f3944@t f3940@t)) (let ((f3946@ls/false (f30c3@syntax-dispatch f3944@t '_))) (if f3946@ls/false (apply (lambda () (list f3937@y)) f3946@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3944@t))))))) (let ((f3948@t (car f393c@x))) (let ((f394a@ls/false (f30c3@syntax-dispatch f3948@t '(#(scheme-id quote) ())))) (if f394a@ls/false (apply (lambda () (f393e@f (cdr f393c@x))) f394a@ls/false) (let ((f394c@t f3948@t)) (let ((f394e@ls/false (f30c3@syntax-dispatch f394c@t '_))) (if f394e@ls/false (apply (lambda () (cons (car f393c@x) (f393e@f (cdr f393c@x)))) f394e@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f394c@t))))))))))) (if (null? f393a@ls) (list (f304b@scheme-stx 'quote) '()) (if (null? (cdr f393a@ls)) (car f393a@ls) (cons* (f304b@scheme-stx 'append) f393a@ls)))))) (set! f389f@quasivector (lambda (f3904@x) (let ((f3906@pat-x f3904@x)) (let ((f3908@t f3906@pat-x)) (let ((f390a@ls/false (f30c3@syntax-dispatch f3908@t '(#(scheme-id quote) each-any)))) (if f390a@ls/false (apply (lambda (f390c@x*) (list (f304b@scheme-stx 'quote) (list->vector f390c@x*))) f390a@ls/false) (let ((f390e@t f3908@t)) (let ((f3910@ls/false (f30c3@syntax-dispatch f390e@t '_))) (if f3910@ls/false (apply (lambda () (let f3918@f ((f3912@x f3904@x) (f3913@k (lambda (f3916@ls) (cons* (f304b@scheme-stx 'vector) f3916@ls)))) (let ((f391a@t f3912@x)) (let ((f391c@ls/false (f30c3@syntax-dispatch f391a@t '(#(scheme-id quote) each-any)))) (if f391c@ls/false (apply (lambda (f391e@x*) (f3913@k (map (lambda (f3920@x) (list (f304b@scheme-stx 'quote) f3920@x)) f391e@x*))) f391c@ls/false) (let ((f3922@t f391a@t)) (let ((f3924@ls/false (f30c3@syntax-dispatch f3922@t '(#(scheme-id list) . each-any)))) (if f3924@ls/false (apply (lambda (f3926@x*) (f3913@k f3926@x*)) f3924@ls/false) (let ((f3928@t f3922@t)) (let ((f392a@ls/false (f30c3@syntax-dispatch f3928@t '(#(scheme-id cons) any any)))) (if f392a@ls/false (apply (lambda (f392c@x f392d@y) (f3918@f f392d@y (lambda (f3930@ls) (f3913@k (cons f392c@x f3930@ls))))) f392a@ls/false) (let ((f3932@t f3928@t)) (let ((f3934@ls/false (f30c3@syntax-dispatch f3932@t '_))) (if f3934@ls/false (apply (lambda () (list (f304b@scheme-stx 'list->vector) f3906@pat-x)) f3934@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3932@t))))))))))))))) f3910@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f390e@t)))))))))) (set! f38a1@vquasi (lambda (f38e2@p f38e3@lev) (let ((f38e6@t f38e2@p)) (let ((f38e8@ls/false (f30c3@syntax-dispatch f38e6@t '(any . any)))) (if f38e8@ls/false (apply (lambda (f38ea@p f38eb@q) (let ((f38ee@t f38ea@p)) (let ((f38f0@ls/false (f30c3@syntax-dispatch f38ee@t '(#(scheme-id unquote) . each-any)))) (if f38f0@ls/false (apply (lambda (f38f2@p) (if (= f38e3@lev '0) (f3899@quasicons* f38f2@p (f38a1@vquasi f38eb@q f38e3@lev)) (f389b@quasicons (f389b@quasicons (f387d@datum 'unquote) (f38a3@quasi f38f2@p (- f38e3@lev '1))) (f38a1@vquasi f38eb@q f38e3@lev)))) f38f0@ls/false) (let ((f38f4@t f38ee@t)) (let ((f38f6@ls/false (f30c3@syntax-dispatch f38f4@t '(#(scheme-id unquote-splicing) . each-any)))) (if f38f6@ls/false (apply (lambda (f38f8@p) (if (= f38e3@lev '0) (f389d@quasiappend f38f8@p (f38a1@vquasi f38eb@q f38e3@lev)) (f389b@quasicons (f389b@quasicons (f387d@datum 'unquote-splicing) (f38a3@quasi f38f8@p (- f38e3@lev '1))) (f38a1@vquasi f38eb@q f38e3@lev)))) f38f6@ls/false) (let ((f38fa@t f38f4@t)) (let ((f38fc@ls/false (f30c3@syntax-dispatch f38fa@t 'any))) (if f38fc@ls/false (apply (lambda (f38fe@p) (f389b@quasicons (f38a3@quasi f38fe@p f38e3@lev) (f38a1@vquasi f38eb@q f38e3@lev))) f38fc@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f38fa@t))))))))))) f38e8@ls/false) (let ((f3900@t f38e6@t)) (let ((f3902@ls/false (f30c3@syntax-dispatch f3900@t '()))) (if f3902@ls/false (apply (lambda () (list (f304b@scheme-stx 'quote) '())) f3902@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3900@t))))))))) (set! f38a3@quasi (lambda (f38ac@p f38ad@lev) (let ((f38b0@t f38ac@p)) (let ((f38b2@ls/false (f30c3@syntax-dispatch f38b0@t '(#(scheme-id unquote) any)))) (if f38b2@ls/false (apply (lambda (f38b4@p) (if (= f38ad@lev '0) f38b4@p (f389b@quasicons (f387d@datum 'unquote) (f38a3@quasi (list f38b4@p) (- f38ad@lev '1))))) f38b2@ls/false) (let ((f38b6@t f38b0@t)) (let ((f38b8@ls/false (f30c3@syntax-dispatch f38b6@t '((#(scheme-id unquote) . each-any) . any)))) (if f38b8@ls/false (apply (lambda (f38ba@p f38bb@q) (if (= f38ad@lev '0) (f3899@quasicons* f38ba@p (f38a3@quasi f38bb@q f38ad@lev)) (f389b@quasicons (f389b@quasicons (f387d@datum 'unquote) (f38a3@quasi f38ba@p (- f38ad@lev '1))) (f38a3@quasi f38bb@q f38ad@lev)))) f38b8@ls/false) (let ((f38be@t f38b6@t)) (let ((f38c0@ls/false (f30c3@syntax-dispatch f38be@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if f38c0@ls/false (apply (lambda (f38c2@p f38c3@q) (if (= f38ad@lev '0) (f389d@quasiappend f38c2@p (f38a3@quasi f38c3@q f38ad@lev)) (f389b@quasicons (f389b@quasicons (f387d@datum 'unquote-splicing) (f38a3@quasi f38c2@p (- f38ad@lev '1))) (f38a3@quasi f38c3@q f38ad@lev)))) f38c0@ls/false) (let ((f38c6@t f38be@t)) (let ((f38c8@ls/false (f30c3@syntax-dispatch f38c6@t '(#(scheme-id quasiquote) any)))) (if f38c8@ls/false (apply (lambda (f38ca@p) (f389b@quasicons (f387d@datum 'quasiquote) (f38a3@quasi (list f38ca@p) (+ f38ad@lev '1)))) f38c8@ls/false) (let ((f38cc@t f38c6@t)) (let ((f38ce@ls/false (f30c3@syntax-dispatch f38cc@t '(any . any)))) (if f38ce@ls/false (apply (lambda (f38d0@p f38d1@q) (f389b@quasicons (f38a3@quasi f38d0@p f38ad@lev) (f38a3@quasi f38d1@q f38ad@lev))) f38ce@ls/false) (let ((f38d4@t f38cc@t)) (let ((f38d6@ls/false (f30c3@syntax-dispatch f38d4@t '#(vector each-any)))) (if (and f38d6@ls/false (apply (lambda (f38d8@x) (not (f2e88@stx? f38d8@x))) f38d6@ls/false)) (apply (lambda (f38da@x) (f389f@quasivector (f38a1@vquasi f38da@x f38ad@lev))) f38d6@ls/false) (let ((f38dc@t f38d4@t)) (let ((f38de@ls/false (f30c3@syntax-dispatch f38dc@t 'any))) (if f38de@ls/false (apply (lambda (f38e0@p) (list (f304b@scheme-stx 'quote) f38e0@p)) f38de@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f38dc@t)))))))))))))))))))))))) (lambda (f38a4@x) (let ((f38a6@t f38a4@x)) (let ((f38a8@ls/false (f30c3@syntax-dispatch f38a6@t '(_ any)))) (if f38a8@ls/false (apply (lambda (f38aa@e) (f38a3@quasi f38aa@e '0)) f38a8@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f38a6@t)))))))) (set! f4b90@f30b1@quasiquote-macro f30b1@quasiquote-macro) (set! f30b3@quasisyntax-macro (let ((f3981@quasi '#f)) (begin (set! f3981@quasi (lambda (f399c@p f399d@lev) (let ((f39a0@t f399c@p)) (let ((f39a2@ls/false (f30c3@syntax-dispatch f39a0@t '(#(scheme-id unsyntax) any)))) (if f39a2@ls/false (apply (lambda (f39a4@p) (if (= f399d@lev '0) (let ((f39a6@g (gensym))) (values (list f39a6@g) (list f39a4@p) f39a6@g)) (call-with-values (lambda () (f3981@quasi f39a4@p (- f399d@lev '1))) (lambda (f39ae@f39a9 f39af@f39ab f39b0@f39ad) (let ((f39b4@p f39b0@f39ad) (f39b5@rhs* f39af@f39ab) (f39b6@lhs* f39ae@f39a9)) (values f39b6@lhs* f39b5@rhs* (list 'unsyntax f39b4@p))))))) f39a2@ls/false) (let ((f39ba@t f39a0@t)) (let ((f39bc@ls/false (f30c3@syntax-dispatch f39ba@t '#(scheme-id unsyntax)))) (if (and f39bc@ls/false (apply (lambda () (= f399d@lev '0)) f39bc@ls/false)) (apply (lambda () (f31a3@syntax-violation '#f '"incorrect use of unsyntax" f399c@p)) f39bc@ls/false) (let ((f39be@t f39ba@t)) (let ((f39c0@ls/false (f30c3@syntax-dispatch f39be@t '((#(scheme-id unsyntax) . each-any) . any)))) (if f39c0@ls/false (apply (lambda (f39c2@p* f39c3@q) (call-with-values (lambda () (f3981@quasi f39c3@q f399d@lev)) (lambda (f39cc@f39c7 f39cd@f39c9 f39ce@f39cb) (let ((f39d2@q f39ce@f39cb) (f39d3@rhs* f39cd@f39c9) (f39d4@lhs* f39cc@f39c7)) (if (= f399d@lev '0) (let ((f39d8@g* (map (lambda (f39da@x) (gensym)) f39c2@p*))) (values (append f39d8@g* f39d4@lhs*) (append f39c2@p* f39d3@rhs*) (append f39d8@g* f39d2@q))) (call-with-values (lambda () (f3981@quasi f39c2@p* (- f399d@lev '1))) (lambda (f39e2@f39dd f39e3@f39df f39e4@f39e1) (let ((f39e8@p* f39e4@f39e1) (f39e9@rhs2* f39e3@f39df) (f39ea@lhs2* f39e2@f39dd)) (values (append f39ea@lhs2* f39d4@lhs*) (append f39e9@rhs2* f39d3@rhs*) (cons (cons 'unsyntax f39e8@p*) f39d2@q)))))))))) f39c0@ls/false) (let ((f39ee@t f39be@t)) (let ((f39f0@ls/false (f30c3@syntax-dispatch f39ee@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if f39f0@ls/false (apply (lambda (f39f2@p* f39f3@q) (call-with-values (lambda () (f3981@quasi f39f3@q f399d@lev)) (lambda (f39fc@f39f7 f39fd@f39f9 f39fe@f39fb) (let ((f3a02@q f39fe@f39fb) (f3a03@rhs* f39fd@f39f9) (f3a04@lhs* f39fc@f39f7)) (if (= f399d@lev '0) (let ((f3a08@g* (map (lambda (f3a0a@x) (gensym)) f39f2@p*))) (values (append (map (lambda (f3a0c@g) (cons f3a0c@g '(...))) f3a08@g*) f3a04@lhs*) (append f39f2@p* f3a03@rhs*) (append (apply append (map (lambda (f3a0e@g) (cons f3a0e@g '(...))) f3a08@g*)) f3a02@q))) (call-with-values (lambda () (f3981@quasi f39f2@p* (- f399d@lev '1))) (lambda (f3a16@f3a11 f3a17@f3a13 f3a18@f3a15) (let ((f3a1c@p* f3a18@f3a15) (f3a1d@rhs2* f3a17@f3a13) (f3a1e@lhs2* f3a16@f3a11)) (values (append f3a1e@lhs2* f3a04@lhs*) (append f3a1d@rhs2* f3a03@rhs*) (cons (cons 'unsyntax-splicing f3a1c@p*) f3a02@q)))))))))) f39f0@ls/false) (let ((f3a22@t f39ee@t)) (let ((f3a24@ls/false (f30c3@syntax-dispatch f3a22@t '#(scheme-id unsyntax-splicing)))) (if (and f3a24@ls/false (apply (lambda () (= f399d@lev '0)) f3a24@ls/false)) (apply (lambda () (f31a3@syntax-violation '#f '"incorrect use of unsyntax-splicing" f399c@p)) f3a24@ls/false) (let ((f3a26@t f3a22@t)) (let ((f3a28@ls/false (f30c3@syntax-dispatch f3a26@t '(#(scheme-id quasisyntax) any)))) (if f3a28@ls/false (apply (lambda (f3a2a@p) (call-with-values (lambda () (f3981@quasi f3a2a@p (+ f399d@lev '1))) (lambda (f3a32@f3a2d f3a33@f3a2f f3a34@f3a31) (let ((f3a38@p f3a34@f3a31) (f3a39@rhs* f3a33@f3a2f) (f3a3a@lhs* f3a32@f3a2d)) (values f3a3a@lhs* f3a39@rhs* (list 'quasisyntax f3a38@p)))))) f3a28@ls/false) (let ((f3a3e@t f3a26@t)) (let ((f3a40@ls/false (f30c3@syntax-dispatch f3a3e@t '(any . any)))) (if f3a40@ls/false (apply (lambda (f3a42@p f3a43@q) (call-with-values (lambda () (f3981@quasi f3a42@p f399d@lev)) (lambda (f3a52@f3a47 f3a53@f3a49 f3a54@f3a4b) (call-with-values (lambda () (f3981@quasi f3a43@q f399d@lev)) (lambda (f3a58@f3a4d f3a59@f3a4f f3a5a@f3a51) (let ((f3a5e@q f3a5a@f3a51) (f3a5f@rhs2* f3a59@f3a4f) (f3a60@lhs2* f3a58@f3a4d) (f3a61@p f3a54@f3a4b) (f3a62@rhs* f3a53@f3a49) (f3a63@lhs* f3a52@f3a47)) (values (append f3a60@lhs2* f3a63@lhs*) (append f3a5f@rhs2* f3a62@rhs*) (cons f3a61@p f3a5e@q)))))))) f3a40@ls/false) (let ((f3a6a@t f3a3e@t)) (let ((f3a6c@ls/false (f30c3@syntax-dispatch f3a6a@t '#(vector each-any)))) (if f3a6c@ls/false (apply (lambda (f3a6e@x*) (call-with-values (lambda () (f3981@quasi f3a6e@x* f399d@lev)) (lambda (f3a76@f3a71 f3a77@f3a73 f3a78@f3a75) (let ((f3a7c@x* f3a78@f3a75) (f3a7d@rhs* f3a77@f3a73) (f3a7e@lhs* f3a76@f3a71)) (values f3a7e@lhs* f3a7d@rhs* (list->vector f3a7c@x*)))))) f3a6c@ls/false) (let ((f3a82@t f3a6a@t)) (let ((f3a84@ls/false (f30c3@syntax-dispatch f3a82@t '_))) (if f3a84@ls/false (apply (lambda () (values '() '() f399c@p)) f3a84@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3a82@t)))))))))))))))))))))))))))))) (lambda (f3982@x) (let ((f3984@t f3982@x)) (let ((f3986@ls/false (f30c3@syntax-dispatch f3984@t '(_ any)))) (if f3986@ls/false (apply (lambda (f3988@e) (call-with-values (lambda () (f3981@quasi f3988@e '0)) (lambda (f3990@f398b f3991@f398d f3992@f398f) (let ((f3996@v f3992@f398f) (f3997@rhs* f3991@f398d) (f3998@lhs* f3990@f398b)) (f3079@bless (list 'syntax-case (cons 'list f3997@rhs*) '() (list f3998@lhs* (list 'syntax f3996@v)))))))) f3986@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3984@t)))))))) (set! f4b91@f30b3@quasisyntax-macro f30b3@quasisyntax-macro) (set! f30b5@define-struct-macro (lambda (f3a86@stx) (f31a3@syntax-violation '#f '"define-struct not supported" f3a86@stx))) (set! f4b92@f30b5@define-struct-macro f30b5@define-struct-macro) (set! f30b7@define-record-type-macro (lambda (f3a88@x) (let ((f3a8b@id '#f) (f3a8d@get-record-name '#f) (f3a8f@get-record-constructor-name '#f) (f3a91@get-record-predicate-name '#f) (f3a93@get-clause '#f) (f3a95@foo-rtd-code '#f) (f3a97@parent-rtd-code '#f) (f3a99@parent-rcd-code '#f) (f3a9b@foo-rcd-code '#f) (f3a9d@get-protocol-code '#f) (f3a9f@get-fields '#f) (f3aa1@get-mutator-indices '#f) (f3aa3@get-mutators '#f) (f3aa5@get-accessors '#f) (f3aa7@enumerate '#f) (f3aa9@do-define-record '#f) (f3aab@verify-clauses '#f)) (begin (set! f3a8b@id (lambda (f3c7e@ctxt . f3c80@str*) (f31a7@datum->syntax f3c7e@ctxt (string->symbol (apply string-append (map (lambda (f3c82@x) (if (symbol? f3c82@x) (symbol->string f3c82@x) (if (string? f3c82@x) f3c82@x (assertion-violation 'define-record-type '"BUG")))) f3c80@str*)))))) (set! f3a8d@get-record-name (lambda (f3c6c@spec) (let ((f3c6e@t f3c6c@spec)) (let ((f3c70@ls/false (f30c3@syntax-dispatch f3c6e@t '(any any any)))) (if f3c70@ls/false (apply (lambda (f3c72@foo f3c73@make-foo f3c74@foo?) f3c72@foo) f3c70@ls/false) (let ((f3c78@t f3c6e@t)) (let ((f3c7a@ls/false (f30c3@syntax-dispatch f3c78@t 'any))) (if f3c7a@ls/false (apply (lambda (f3c7c@foo) f3c7c@foo) f3c7a@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3c78@t))))))))) (set! f3a8f@get-record-constructor-name (lambda (f3c58@spec) (let ((f3c5a@t f3c58@spec)) (let ((f3c5c@ls/false (f30c3@syntax-dispatch f3c5a@t '(any any any)))) (if f3c5c@ls/false (apply (lambda (f3c5e@foo f3c5f@make-foo f3c60@foo?) f3c5f@make-foo) f3c5c@ls/false) (let ((f3c64@t f3c5a@t)) (let ((f3c66@ls/false (f30c3@syntax-dispatch f3c64@t 'any))) (if (and f3c66@ls/false (apply (lambda (f3c68@foo) (f2ebc@id? f3c68@foo)) f3c66@ls/false)) (apply (lambda (f3c6a@foo) (f3a8b@id f3c6a@foo '"make-" (f2ed0@stx->datum f3c6a@foo))) f3c66@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3c64@t))))))))) (set! f3a91@get-record-predicate-name (lambda (f3c44@spec) (let ((f3c46@t f3c44@spec)) (let ((f3c48@ls/false (f30c3@syntax-dispatch f3c46@t '(any any any)))) (if f3c48@ls/false (apply (lambda (f3c4a@foo f3c4b@make-foo f3c4c@foo?) f3c4c@foo?) f3c48@ls/false) (let ((f3c50@t f3c46@t)) (let ((f3c52@ls/false (f30c3@syntax-dispatch f3c50@t 'any))) (if (and f3c52@ls/false (apply (lambda (f3c54@foo) (f2ebc@id? f3c54@foo)) f3c52@ls/false)) (apply (lambda (f3c56@foo) (f3a8b@id f3c56@foo (f2ed0@stx->datum f3c56@foo) '"?")) f3c52@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3c50@t))))))))) (set! f3a93@get-clause (lambda (f3c32@id f3c33@ls) (let ((f3c36@t f3c33@ls)) (let ((f3c38@ls/false (f30c3@syntax-dispatch f3c36@t '()))) (if f3c38@ls/false (apply (lambda () '#f) f3c38@ls/false) (let ((f3c3a@t f3c36@t)) (let ((f3c3c@ls/false (f30c3@syntax-dispatch f3c3a@t '((any . any) . any)))) (if f3c3c@ls/false (apply (lambda (f3c3e@x f3c3f@rest f3c40@ls) (if (f2ec2@free-id=? (f3079@bless f3c32@id) f3c3e@x) (cons f3c3e@x f3c3f@rest) (f3a93@get-clause f3c32@id f3c40@ls))) f3c3c@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3c3a@t))))))))) (set! f3a95@foo-rtd-code (lambda (f3be0@name f3be1@clause* f3be2@parent-rtd-code) (let ((f3be7@convert-field-spec* '#f)) (begin (set! f3be7@convert-field-spec* (lambda (f3c18@ls) (list->vector (map (lambda (f3c1a@x) (let ((f3c1c@t f3c1a@x)) (let ((f3c1e@ls/false (f30c3@syntax-dispatch f3c1c@t '(#(scheme-id mutable) any . any)))) (if f3c1e@ls/false (apply (lambda (f3c20@name f3c21@rest) (list 'mutable f3c20@name)) f3c1e@ls/false) (let ((f3c24@t f3c1c@t)) (let ((f3c26@ls/false (f30c3@syntax-dispatch f3c24@t '(#(scheme-id immutable) any . any)))) (if f3c26@ls/false (apply (lambda (f3c28@name f3c29@rest) (list 'immutable f3c28@name)) f3c26@ls/false) (let ((f3c2c@t f3c24@t)) (let ((f3c2e@ls/false (f30c3@syntax-dispatch f3c2c@t 'any))) (if f3c2e@ls/false (apply (lambda (f3c30@name) (list 'immutable f3c30@name)) f3c2e@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3c2c@t))))))))))) f3c18@ls)))) (let ((f3be8@uid-code (let ((f3bf0@t (f3a93@get-clause 'nongenerative f3be1@clause*))) (let ((f3bf2@ls/false (f30c3@syntax-dispatch f3bf0@t '(_)))) (if f3bf2@ls/false (apply (lambda () (list 'quote (gensym))) f3bf2@ls/false) (let ((f3bf4@t f3bf0@t)) (let ((f3bf6@ls/false (f30c3@syntax-dispatch f3bf4@t '(_ any)))) (if f3bf6@ls/false (apply (lambda (f3bf8@uid) (list 'quote f3bf8@uid)) f3bf6@ls/false) (let ((f3bfa@t f3bf4@t)) (let ((f3bfc@ls/false (f30c3@syntax-dispatch f3bfa@t '_))) (if f3bfc@ls/false (apply (lambda () '#f) f3bfc@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3bfa@t))))))))))) (f3be9@sealed? (let ((f3bfe@t (f3a93@get-clause 'sealed f3be1@clause*))) (let ((f3c00@ls/false (f30c3@syntax-dispatch f3bfe@t '(_ #(atom #t))))) (if f3c00@ls/false (apply (lambda () '#t) f3c00@ls/false) (let ((f3c02@t f3bfe@t)) (let ((f3c04@ls/false (f30c3@syntax-dispatch f3c02@t '_))) (if f3c04@ls/false (apply (lambda () '#f) f3c04@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3c02@t)))))))) (f3bea@opaque? (let ((f3c06@t (f3a93@get-clause 'opaque f3be1@clause*))) (let ((f3c08@ls/false (f30c3@syntax-dispatch f3c06@t '(_ #(atom #t))))) (if f3c08@ls/false (apply (lambda () '#t) f3c08@ls/false) (let ((f3c0a@t f3c06@t)) (let ((f3c0c@ls/false (f30c3@syntax-dispatch f3c0a@t '_))) (if f3c0c@ls/false (apply (lambda () '#f) f3c0c@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3c0a@t)))))))) (f3beb@fields (let ((f3c0e@t (f3a93@get-clause 'fields f3be1@clause*))) (let ((f3c10@ls/false (f30c3@syntax-dispatch f3c0e@t '(_ . each-any)))) (if f3c10@ls/false (apply (lambda (f3c12@field-spec*) (list 'quote (f3be7@convert-field-spec* f3c12@field-spec*))) f3c10@ls/false) (let ((f3c14@t f3c0e@t)) (let ((f3c16@ls/false (f30c3@syntax-dispatch f3c14@t '_))) (if f3c16@ls/false (apply (lambda () ''#()) f3c16@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3c14@t))))))))) (f3079@bless (list 'make-record-type-descriptor (list 'quote f3be0@name) f3be2@parent-rtd-code f3be8@uid-code f3be9@sealed? f3bea@opaque? f3beb@fields))))))) (set! f3a97@parent-rtd-code (lambda (f3bc8@clause*) (let ((f3bca@t (f3a93@get-clause 'parent f3bc8@clause*))) (let ((f3bcc@ls/false (f30c3@syntax-dispatch f3bca@t '(_ any)))) (if f3bcc@ls/false (apply (lambda (f3bce@name) (list 'record-type-descriptor f3bce@name)) f3bcc@ls/false) (let ((f3bd0@t f3bca@t)) (let ((f3bd2@ls/false (f30c3@syntax-dispatch f3bd0@t '#(atom #f)))) (if f3bd2@ls/false (apply (lambda () (let ((f3bd4@t (f3a93@get-clause 'parent-rtd f3bc8@clause*))) (let ((f3bd6@ls/false (f30c3@syntax-dispatch f3bd4@t '(_ any any)))) (if f3bd6@ls/false (apply (lambda (f3bd8@rtd f3bd9@rcd) f3bd8@rtd) f3bd6@ls/false) (let ((f3bdc@t f3bd4@t)) (let ((f3bde@ls/false (f30c3@syntax-dispatch f3bdc@t '#(atom #f)))) (if f3bde@ls/false (apply (lambda () '#f) f3bde@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3bdc@t)))))))) f3bd2@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3bd0@t))))))))) (set! f3a99@parent-rcd-code (lambda (f3bb0@clause*) (let ((f3bb2@t (f3a93@get-clause 'parent f3bb0@clause*))) (let ((f3bb4@ls/false (f30c3@syntax-dispatch f3bb2@t '(_ any)))) (if f3bb4@ls/false (apply (lambda (f3bb6@name) (list 'record-constructor-descriptor f3bb6@name)) f3bb4@ls/false) (let ((f3bb8@t f3bb2@t)) (let ((f3bba@ls/false (f30c3@syntax-dispatch f3bb8@t '#(atom #f)))) (if f3bba@ls/false (apply (lambda () (let ((f3bbc@t (f3a93@get-clause 'parent-rtd f3bb0@clause*))) (let ((f3bbe@ls/false (f30c3@syntax-dispatch f3bbc@t '(_ any any)))) (if f3bbe@ls/false (apply (lambda (f3bc0@rtd f3bc1@rcd) f3bc1@rcd) f3bbe@ls/false) (let ((f3bc4@t f3bbc@t)) (let ((f3bc6@ls/false (f30c3@syntax-dispatch f3bc4@t '#(atom #f)))) (if f3bc6@ls/false (apply (lambda () '#f) f3bc6@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3bc4@t)))))))) f3bba@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3bb8@t))))))))) (set! f3a9b@foo-rcd-code (lambda (f3ba8@clause* f3ba9@foo-rtd f3baa@protocol f3bab@parent-rcd-code) (list 'make-record-constructor-descriptor f3ba9@foo-rtd f3bab@parent-rcd-code f3baa@protocol))) (set! f3a9d@get-protocol-code (lambda (f3b9c@clause*) (let ((f3b9e@t (f3a93@get-clause 'protocol f3b9c@clause*))) (let ((f3ba0@ls/false (f30c3@syntax-dispatch f3b9e@t '(_ any)))) (if f3ba0@ls/false (apply (lambda (f3ba2@expr) f3ba2@expr) f3ba0@ls/false) (let ((f3ba4@t f3b9e@t)) (let ((f3ba6@ls/false (f30c3@syntax-dispatch f3ba4@t '_))) (if f3ba6@ls/false (apply (lambda () '#f) f3ba6@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3ba4@t))))))))) (set! f3a9f@get-fields (lambda (f3b8a@clause*) (let ((f3b8c@t f3b8a@clause*)) (let ((f3b8e@ls/false (f30c3@syntax-dispatch f3b8c@t '()))) (if f3b8e@ls/false (apply (lambda () '()) f3b8e@ls/false) (let ((f3b90@t f3b8c@t)) (let ((f3b92@ls/false (f30c3@syntax-dispatch f3b90@t '((#(scheme-id fields) . each-any) . _)))) (if f3b92@ls/false (apply (lambda (f3b94@f*) f3b94@f*) f3b92@ls/false) (let ((f3b96@t f3b90@t)) (let ((f3b98@ls/false (f30c3@syntax-dispatch f3b96@t '(_ . any)))) (if f3b98@ls/false (apply (lambda (f3b9a@rest) (f3a9f@get-fields f3b9a@rest)) f3b98@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3b96@t)))))))))))) (set! f3aa1@get-mutator-indices (lambda (f3b72@fields) (let f3b78@f ((f3b74@fields f3b72@fields) (f3b75@i '0)) (let ((f3b7a@t f3b74@fields)) (let ((f3b7c@ls/false (f30c3@syntax-dispatch f3b7a@t '()))) (if f3b7c@ls/false (apply (lambda () '()) f3b7c@ls/false) (let ((f3b7e@t f3b7a@t)) (let ((f3b80@ls/false (f30c3@syntax-dispatch f3b7e@t '((#(scheme-id mutable) . _) . any)))) (if f3b80@ls/false (apply (lambda (f3b82@rest) (cons f3b75@i (f3b78@f f3b82@rest (+ f3b75@i '1)))) f3b80@ls/false) (let ((f3b84@t f3b7e@t)) (let ((f3b86@ls/false (f30c3@syntax-dispatch f3b84@t '(_ . any)))) (if f3b86@ls/false (apply (lambda (f3b88@rest) (f3b78@f f3b88@rest (+ f3b75@i '1))) f3b86@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3b84@t))))))))))))) (set! f3aa3@get-mutators (lambda (f3b48@foo f3b49@fields) (let ((f3b4d@gen-name '#f)) (begin (set! f3b4d@gen-name (lambda (f3b70@x) (f31a7@datum->syntax f3b48@foo (string->symbol (string-append (symbol->string (f31a9@syntax->datum f3b48@foo)) '"-" (symbol->string (f31a9@syntax->datum f3b70@x)) '"-set!"))))) (let f3b50@f ((f3b4e@fields f3b49@fields)) (let ((f3b52@t f3b4e@fields)) (let ((f3b54@ls/false (f30c3@syntax-dispatch f3b52@t '()))) (if f3b54@ls/false (apply (lambda () '()) f3b54@ls/false) (let ((f3b56@t f3b52@t)) (let ((f3b58@ls/false (f30c3@syntax-dispatch f3b56@t '((#(scheme-id mutable) any any any) . any)))) (if f3b58@ls/false (apply (lambda (f3b5a@name f3b5b@accessor f3b5c@mutator f3b5d@rest) (cons f3b5c@mutator (f3b50@f f3b5d@rest))) f3b58@ls/false) (let ((f3b62@t f3b56@t)) (let ((f3b64@ls/false (f30c3@syntax-dispatch f3b62@t '((#(scheme-id mutable) any) . any)))) (if f3b64@ls/false (apply (lambda (f3b66@name f3b67@rest) (cons (f3b4d@gen-name f3b66@name) (f3b50@f f3b67@rest))) f3b64@ls/false) (let ((f3b6a@t f3b62@t)) (let ((f3b6c@ls/false (f30c3@syntax-dispatch f3b6a@t '(_ . any)))) (if f3b6c@ls/false (apply (lambda (f3b6e@rest) (f3b50@f f3b6e@rest)) f3b6c@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3b6a@t)))))))))))))))))) (set! f3aa5@get-accessors (lambda (f3b04@foo f3b05@fields) (let ((f3b09@gen-name '#f)) (begin (set! f3b09@gen-name (lambda (f3b46@x) (f31a7@datum->syntax f3b04@foo (string->symbol (string-append (symbol->string (f31a9@syntax->datum f3b04@foo)) '"-" (symbol->string (f31a9@syntax->datum f3b46@x))))))) (map (lambda (f3b0a@field) (let ((f3b0c@t f3b0a@field)) (let ((f3b0e@ls/false (f30c3@syntax-dispatch f3b0c@t '(#(scheme-id mutable) any any any)))) (if (and f3b0e@ls/false (apply (lambda (f3b10@name f3b11@accessor f3b12@mutator) (f2ebc@id? f3b11@accessor)) f3b0e@ls/false)) (apply (lambda (f3b16@name f3b17@accessor f3b18@mutator) f3b17@accessor) f3b0e@ls/false) (let ((f3b1c@t f3b0c@t)) (let ((f3b1e@ls/false (f30c3@syntax-dispatch f3b1c@t '(#(scheme-id immutable) any any)))) (if (and f3b1e@ls/false (apply (lambda (f3b20@name f3b21@accessor) (f2ebc@id? f3b21@accessor)) f3b1e@ls/false)) (apply (lambda (f3b24@name f3b25@accessor) f3b25@accessor) f3b1e@ls/false) (let ((f3b28@t f3b1c@t)) (let ((f3b2a@ls/false (f30c3@syntax-dispatch f3b28@t '(#(scheme-id mutable) any)))) (if (and f3b2a@ls/false (apply (lambda (f3b2c@name) (f2ebc@id? f3b2c@name)) f3b2a@ls/false)) (apply (lambda (f3b2e@name) (f3b09@gen-name f3b2e@name)) f3b2a@ls/false) (let ((f3b30@t f3b28@t)) (let ((f3b32@ls/false (f30c3@syntax-dispatch f3b30@t '(#(scheme-id immutable) any)))) (if (and f3b32@ls/false (apply (lambda (f3b34@name) (f2ebc@id? f3b34@name)) f3b32@ls/false)) (apply (lambda (f3b36@name) (f3b09@gen-name f3b36@name)) f3b32@ls/false) (let ((f3b38@t f3b30@t)) (let ((f3b3a@ls/false (f30c3@syntax-dispatch f3b38@t 'any))) (if (and f3b3a@ls/false (apply (lambda (f3b3c@name) (f2ebc@id? f3b3c@name)) f3b3a@ls/false)) (apply (lambda (f3b3e@name) (f3b09@gen-name f3b3e@name)) f3b3a@ls/false) (let ((f3b40@t f3b38@t)) (let ((f3b42@ls/false (f30c3@syntax-dispatch f3b40@t 'any))) (if f3b42@ls/false (apply (lambda (f3b44@others) (f31a3@syntax-violation '#f '"invalid field spec" f3b0a@field)) f3b42@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3b40@t)))))))))))))))))))) f3b05@fields))))) (set! f3aa7@enumerate (lambda (f3afc@ls) (let f3b02@f ((f3afe@ls f3afc@ls) (f3aff@i '0)) (if (null? f3afe@ls) '() (cons f3aff@i (f3b02@f (cdr f3afe@ls) (+ f3aff@i '1))))))) (set! f3aa9@do-define-record (lambda (f3ad4@namespec f3ad5@clause*) (let ((f3ad8@foo (f3a8d@get-record-name f3ad4@namespec))) (let ((f3ada@foo-rtd (gensym))) (let ((f3adc@foo-rcd (gensym))) (let ((f3ade@protocol (gensym))) (let ((f3ae0@make-foo (f3a8f@get-record-constructor-name f3ad4@namespec))) (let ((f3ae2@fields (f3a9f@get-fields f3ad5@clause*))) (let ((f3ae4@idx* (f3aa7@enumerate f3ae2@fields))) (let ((f3ae6@foo-x* (f3aa5@get-accessors f3ad8@foo f3ae2@fields))) (let ((f3ae8@set-foo-x!* (f3aa3@get-mutators f3ad8@foo f3ae2@fields))) (let ((f3aea@set-foo-idx* (f3aa1@get-mutator-indices f3ae2@fields))) (let ((f3aec@foo? (f3a91@get-record-predicate-name f3ad4@namespec))) (let ((f3aee@foo-rtd-code (f3a95@foo-rtd-code f3ad8@foo f3ad5@clause* (f3a97@parent-rtd-code f3ad5@clause*)))) (let ((f3af0@foo-rcd-code (f3a9b@foo-rcd-code f3ad5@clause* f3ada@foo-rtd f3ade@protocol (f3a99@parent-rcd-code f3ad5@clause*)))) (let ((f3af2@protocol-code (f3a9d@get-protocol-code f3ad5@clause*))) (f3079@bless (cons 'begin (cons (list 'define f3ada@foo-rtd f3aee@foo-rtd-code) (cons (list 'define f3ade@protocol f3af2@protocol-code) (cons (list 'define f3adc@foo-rcd f3af0@foo-rcd-code) (cons (list 'define-syntax f3ad8@foo (list 'list ''$rtd (list 'syntax f3ada@foo-rtd) (list 'syntax f3adc@foo-rcd))) (cons (list 'define f3aec@foo? (list 'record-predicate f3ada@foo-rtd)) (cons (list 'define f3ae0@make-foo (list 'record-constructor f3adc@foo-rcd)) (append (map (lambda (f3af4@foo-x f3af5@idx) (list 'define f3af4@foo-x (list 'record-accessor f3ada@foo-rtd f3af5@idx))) f3ae6@foo-x* f3ae4@idx*) (map (lambda (f3af8@set-foo-x! f3af9@idx) (list 'define f3af8@set-foo-x! (list 'record-mutator f3ada@foo-rtd f3af9@idx))) f3ae8@set-foo-x!* f3aea@set-foo-idx*)))))))))))))))))))))))))) (set! f3aab@verify-clauses (lambda (f3ab4@x f3ab5@cls*) (let ((f3ab9@valid-kwds '#f) (f3abb@free-id-member? '#f)) (begin (set! f3ab9@valid-kwds (map f3079@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! f3abb@free-id-member? (lambda (f3ad0@x f3ad1@ls) (and (pair? f3ad1@ls) (or (f2ec2@free-id=? f3ad0@x (car f3ad1@ls)) (f3abb@free-id-member? f3ad0@x (cdr f3ad1@ls)))))) (let f3ac0@f ((f3abc@cls* f3ab5@cls*) (f3abd@seen* '())) (if (not (null? f3abc@cls*)) (let ((f3ac2@t (car f3abc@cls*))) (let ((f3ac4@ls/false (f30c3@syntax-dispatch f3ac2@t '(any . any)))) (if f3ac4@ls/false (apply (lambda (f3ac6@kwd f3ac7@rest) (if (or (not (f2ebc@id? f3ac6@kwd)) (not (f3abb@free-id-member? f3ac6@kwd f3ab9@valid-kwds))) (f31a3@syntax-violation '#f '"not a valid define-record-type keyword" f3ac6@kwd) (if (f2ec8@bound-id-member? f3ac6@kwd f3abd@seen*) (f31a3@syntax-violation '#f '"duplicate use of keyword " f3ab4@x f3ac6@kwd) (f3ac0@f (cdr f3abc@cls*) (cons f3ac6@kwd f3abd@seen*))))) f3ac4@ls/false) (let ((f3aca@t f3ac2@t)) (let ((f3acc@ls/false (f30c3@syntax-dispatch f3aca@t 'any))) (if f3acc@ls/false (apply (lambda (f3ace@cls) (f31a3@syntax-violation '#f '"malformed define-record-type clause" f3ace@cls)) f3acc@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3aca@t))))))) (void))))))) (let ((f3aac@t f3a88@x)) (let ((f3aae@ls/false (f30c3@syntax-dispatch f3aac@t '(_ any . each-any)))) (if f3aae@ls/false (apply (lambda (f3ab0@namespec f3ab1@clause*) (begin (f3aab@verify-clauses f3a88@x f3ab1@clause*) (f3aa9@do-define-record f3ab0@namespec f3ab1@clause*))) f3aae@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3aac@t)))))))) (set! f4b93@f30b7@define-record-type-macro f30b7@define-record-type-macro) (set! f30b9@define-condition-type-macro (lambda (f3c84@x) (let ((f3c87@mkname '#f)) (begin (set! f3c87@mkname (lambda (f3cb4@name f3cb5@suffix) (f31a7@datum->syntax f3cb4@name (string->symbol (string-append (symbol->string (f31a9@syntax->datum f3cb4@name)) f3cb5@suffix))))) (let ((f3c88@t f3c84@x)) (let ((f3c8a@ls/false (f30c3@syntax-dispatch f3c88@t '(any any any any any . #(each (any any)))))) (if (and f3c8a@ls/false (apply (lambda (f3c8c@ctxt f3c8d@name f3c8e@super f3c8f@constructor f3c90@predicate f3c91@field* f3c92@accessor*) (and (f2ebc@id? f3c8d@name) (f2ebc@id? f3c8e@super) (f2ebc@id? f3c8f@constructor) (f2ebc@id? f3c90@predicate) (for-all f2ebc@id? f3c91@field*) (for-all f2ebc@id? f3c92@accessor*))) f3c8a@ls/false)) (apply (lambda (f3c9a@ctxt f3c9b@name f3c9c@super f3c9d@constructor f3c9e@predicate f3c9f@field* f3ca0@accessor*) (let ((f3ca8@aux-accessor* (map (lambda (f3caa@x) (gensym)) f3ca0@accessor*))) (f3079@bless (cons 'begin (cons (cons 'define-record-type (cons (list f3c9b@name f3c9d@constructor (gensym)) (cons (list 'parent f3c9c@super) (cons (cons 'fields (map (lambda (f3cac@field f3cad@aux) (list 'immutable f3cac@field f3cad@aux)) f3c9f@field* f3ca8@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define f3c9e@predicate (list 'condition-predicate (list 'record-type-descriptor f3c9b@name))) (map (lambda (f3cb0@accessor f3cb1@aux) (list 'define f3cb0@accessor (list 'condition-accessor (list 'record-type-descriptor f3c9b@name) f3cb1@aux))) f3ca0@accessor* f3ca8@aux-accessor*))))))) f3c8a@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3c88@t)))))))) (set! f4b94@f30b9@define-condition-type-macro f30b9@define-condition-type-macro) (set! f30bb@incorrect-usage-macro (lambda (f3cb8@e) (f31a3@syntax-violation '#f '"incorrect usage of auxiliary keyword" f3cb8@e))) (set! f4b95@f30bb@incorrect-usage-macro f30bb@incorrect-usage-macro) (set! f30bd@parameterize-macro (lambda (f3cba@e) (let ((f3cbc@t f3cba@e)) (let ((f3cbe@ls/false (f30c3@syntax-dispatch f3cbc@t '(_ () any . each-any)))) (if f3cbe@ls/false (apply (lambda (f3cc0@b f3cc1@b*) (f3079@bless (cons 'let (cons '() (cons f3cc0@b f3cc1@b*))))) f3cbe@ls/false) (let ((f3cc4@t f3cbc@t)) (let ((f3cc6@ls/false (f30c3@syntax-dispatch f3cc4@t '(_ #(each (any any)) any . each-any)))) (if f3cc6@ls/false (apply (lambda (f3cc8@olhs* f3cc9@orhs* f3cca@b f3ccb@b*) (let ((f3cd0@lhs* (f3191@generate-temporaries f3cc8@olhs*)) (f3cd1@rhs* (f3191@generate-temporaries f3cc9@orhs*))) (f3079@bless (cons (list 'lambda (append f3cd0@lhs* f3cd1@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (f3cd4@lhs f3cd5@rhs) (list 'let (list (list 't (list f3cd4@lhs))) (list f3cd4@lhs f3cd5@rhs) (cons 'set! (cons f3cd5@rhs '(t))))) f3cd0@lhs* f3cd1@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons f3cca@b f3ccb@b*))) '(swap)))))) (append f3cc8@olhs* f3cc9@orhs*))))) f3cc6@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3cc4@t))))))))) (set! f4b96@f30bd@parameterize-macro f30bd@parameterize-macro) (set! f30bf@foreign-call-transformer (lambda (f3cd8@e f3cd9@r f3cda@mr) (let ((f3cde@t f3cd8@e)) (let ((f3ce0@ls/false (f30c3@syntax-dispatch f3cde@t '(_ any . each-any)))) (if f3ce0@ls/false (apply (lambda (f3ce2@name f3ce3@arg*) (cons 'foreign-call (cons (f30e5@chi-expr f3ce2@name f3cd9@r f3cda@mr) (f30e1@chi-expr* f3ce3@arg* f3cd9@r f3cda@mr)))) f3ce0@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3cde@t)))))) (set! f4b97@f30bf@foreign-call-transformer f30bf@foreign-call-transformer) (set! f30c1@convert-pattern (lambda (f3ce6@pattern f3ce7@keys) (let ((f3ceb@cvt* '#f) (f3ced@cvt '#f)) (begin (set! f3ceb@cvt* (lambda (f3d8a@p* f3d8b@n f3d8c@ids) (if (null? f3d8a@p*) (values '() f3d8c@ids) (call-with-values (lambda () (f3ceb@cvt* (cdr f3d8a@p*) f3d8b@n f3d8c@ids)) (lambda (f3d94@f3d91 f3d95@f3d93) (let ((f3d98@ids f3d95@f3d93) (f3d99@y f3d94@f3d91)) (call-with-values (lambda () (f3ced@cvt (car f3d8a@p*) f3d8b@n f3d98@ids)) (lambda (f3da0@f3d9d f3da1@f3d9f) (let ((f3da4@ids f3da1@f3d9f) (f3da5@x f3da0@f3d9d)) (values (cons f3da5@x f3d99@y) f3da4@ids)))))))))) (set! f3ced@cvt (lambda (f3cee@p f3cef@n f3cf0@ids) (let ((f3cf4@t f3cee@p)) (let ((f3cf6@ls/false (f30c3@syntax-dispatch f3cf4@t 'any))) (if (and f3cf6@ls/false (apply (lambda (f3cf8@id) (f2ebc@id? f3cf8@id)) f3cf6@ls/false)) (apply (lambda (f3cfa@id) (if (f2ec8@bound-id-member? f3cee@p f3ce7@keys) (values (vector 'free-id f3cee@p) f3cf0@ids) (if (f2ec2@free-id=? f3cee@p (f304b@scheme-stx '_)) (values '_ f3cf0@ids) (values 'any (cons (cons f3cee@p f3cef@n) f3cf0@ids))))) f3cf6@ls/false) (let ((f3cfc@t f3cf4@t)) (let ((f3cfe@ls/false (f30c3@syntax-dispatch f3cfc@t '(any any)))) (if (and f3cfe@ls/false (apply (lambda (f3d00@p f3d01@dots) (f30c5@ellipsis? f3d01@dots)) f3cfe@ls/false)) (apply (lambda (f3d04@p f3d05@dots) (call-with-values (lambda () (f3ced@cvt f3d04@p (+ f3cef@n '1) f3cf0@ids)) (lambda (f3d0c@f3d09 f3d0d@f3d0b) (let ((f3d10@ids f3d0d@f3d0b) (f3d11@p f3d0c@f3d09)) (values (if (eq? f3d11@p 'any) 'each-any (vector 'each f3d11@p)) f3d10@ids))))) f3cfe@ls/false) (let ((f3d14@t f3cfc@t)) (let ((f3d16@ls/false (f30c3@syntax-dispatch f3d14@t '(any any . #(each+ any () any))))) (if (and f3d16@ls/false (apply (lambda (f3d18@x f3d19@dots f3d1a@ys f3d1b@z) (f30c5@ellipsis? f3d19@dots)) f3d16@ls/false)) (apply (lambda (f3d20@x f3d21@dots f3d22@ys f3d23@z) (call-with-values (lambda () (f3ced@cvt f3d23@z f3cef@n f3cf0@ids)) (lambda (f3d2c@f3d29 f3d2d@f3d2b) (let ((f3d30@ids f3d2d@f3d2b) (f3d31@z f3d2c@f3d29)) (call-with-values (lambda () (f3ceb@cvt* f3d22@ys f3cef@n f3d30@ids)) (lambda (f3d38@f3d35 f3d39@f3d37) (let ((f3d3c@ids f3d39@f3d37) (f3d3d@ys f3d38@f3d35)) (call-with-values (lambda () (f3ced@cvt f3d20@x (+ f3cef@n '1) f3d3c@ids)) (lambda (f3d44@f3d41 f3d45@f3d43) (let ((f3d48@ids f3d45@f3d43) (f3d49@x f3d44@f3d41)) (values (vector 'each+ f3d49@x (reverse f3d3d@ys) f3d31@z) f3d48@ids))))))))))) f3d16@ls/false) (let ((f3d4c@t f3d14@t)) (let ((f3d4e@ls/false (f30c3@syntax-dispatch f3d4c@t '(any . any)))) (if f3d4e@ls/false (apply (lambda (f3d50@x f3d51@y) (call-with-values (lambda () (f3ced@cvt f3d51@y f3cef@n f3cf0@ids)) (lambda (f3d58@f3d55 f3d59@f3d57) (let ((f3d5c@ids f3d59@f3d57) (f3d5d@y f3d58@f3d55)) (call-with-values (lambda () (f3ced@cvt f3d50@x f3cef@n f3d5c@ids)) (lambda (f3d64@f3d61 f3d65@f3d63) (let ((f3d68@ids f3d65@f3d63) (f3d69@x f3d64@f3d61)) (values (cons f3d69@x f3d5d@y) f3d68@ids)))))))) f3d4e@ls/false) (let ((f3d6c@t f3d4c@t)) (let ((f3d6e@ls/false (f30c3@syntax-dispatch f3d6c@t '()))) (if f3d6e@ls/false (apply (lambda () (values '() f3cf0@ids)) f3d6e@ls/false) (let ((f3d70@t f3d6c@t)) (let ((f3d72@ls/false (f30c3@syntax-dispatch f3d70@t '#(vector each-any)))) (if (and f3d72@ls/false (apply (lambda (f3d74@p) (not (f2e88@stx? f3d74@p))) f3d72@ls/false)) (apply (lambda (f3d76@p) (call-with-values (lambda () (f3ced@cvt f3d76@p f3cef@n f3cf0@ids)) (lambda (f3d7c@f3d79 f3d7d@f3d7b) (let ((f3d80@ids f3d7d@f3d7b) (f3d81@p f3d7c@f3d79)) (values (vector 'vector f3d81@p) f3d80@ids))))) f3d72@ls/false) (let ((f3d84@t f3d70@t)) (let ((f3d86@ls/false (f30c3@syntax-dispatch f3d84@t 'any))) (if f3d86@ls/false (apply (lambda (f3d88@datum) (values (vector 'atom (f2ed0@stx->datum f3d88@datum)) f3cf0@ids)) f3d86@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3d84@t)))))))))))))))))))))))) (f3ced@cvt f3ce6@pattern '0 '()))))) (set! f4b98@f30c1@convert-pattern f30c1@convert-pattern) (set! f30c3@syntax-dispatch (let ((f3da9@stx^ '#f) (f3dab@match-each '#f) (f3dad@match-each+ '#f) (f3daf@match-each-any '#f) (f3db1@match-empty '#f) (f3db3@combine '#f) (f3db5@match* '#f) (f3db7@match '#f)) (begin (set! f3da9@stx^ (lambda (f3e84@e f3e85@m* f3e86@s* f3e87@ae*) (if (and (null? f3e85@m*) (null? f3e86@s*) (null? f3e87@ae*)) f3e84@e (f2ea4@mkstx f3e84@e f3e85@m* f3e86@s* f3e87@ae*)))) (set! f3dab@match-each (lambda (f3e64@e f3e65@p f3e66@m* f3e67@s* f3e68@ae*) (if (pair? f3e64@e) (let ((f3e6e@first (f3db7@match (car f3e64@e) f3e65@p f3e66@m* f3e67@s* f3e68@ae* '()))) (and f3e6e@first (let ((f3e70@rest (f3dab@match-each (cdr f3e64@e) f3e65@p f3e66@m* f3e67@s* f3e68@ae*))) (and f3e70@rest (cons f3e6e@first f3e70@rest))))) (if (null? f3e64@e) '() (if (f2e88@stx? f3e64@e) (and (not (f2e42@top-marked? f3e66@m*)) (call-with-values (lambda () (join-wraps f3e66@m* f3e67@s* f3e68@ae* f3e64@e)) (lambda (f3e78@f3e73 f3e79@f3e75 f3e7a@f3e77) (let ((f3e7e@ae* f3e7a@f3e77) (f3e7f@s* f3e79@f3e75) (f3e80@m* f3e78@f3e73)) (f3dab@match-each (f2e8a@stx-expr f3e64@e) f3e65@p f3e80@m* f3e7f@s* f3e7e@ae*))))) (if (f29fb@f28cf@annotation? f3e64@e) (f3dab@match-each (f29fd@f28d3@annotation-expression f3e64@e) f3e65@p f3e66@m* f3e67@s* f3e68@ae*) '#f)))))) (set! f3dad@match-each+ (lambda (f3e24@e f3e25@x-pat f3e26@y-pat f3e27@z-pat f3e28@m* f3e29@s* f3e2a@ae* f3e2b@r) (let f3e3c@f ((f3e34@e f3e24@e) (f3e35@m* f3e28@m*) (f3e36@s* f3e29@s*) (f3e37@ae* f3e2a@ae*)) (if (pair? f3e34@e) (call-with-values (lambda () (f3e3c@f (cdr f3e34@e) f3e35@m* f3e36@s* f3e37@ae*)) (lambda (f3e44@f3e3f f3e45@f3e41 f3e46@f3e43) (let ((f3e4a@r f3e46@f3e43) (f3e4b@y-pat f3e45@f3e41) (f3e4c@xr* f3e44@f3e3f)) (if f3e4a@r (if (null? f3e4b@y-pat) (let ((f3e50@xr (f3db7@match (car f3e34@e) f3e25@x-pat f3e35@m* f3e36@s* f3e37@ae* '()))) (if f3e50@xr (values (cons f3e50@xr f3e4c@xr*) f3e4b@y-pat f3e4a@r) (values '#f '#f '#f))) (values '() (cdr f3e4b@y-pat) (f3db7@match (car f3e34@e) (car f3e4b@y-pat) f3e35@m* f3e36@s* f3e37@ae* f3e4a@r))) (values '#f '#f '#f))))) (if (f2e88@stx? f3e34@e) (if (f2e42@top-marked? f3e35@m*) (values '() f3e26@y-pat (f3db7@match f3e34@e f3e27@z-pat f3e35@m* f3e36@s* f3e37@ae* f3e2b@r)) (call-with-values (lambda () (join-wraps f3e35@m* f3e36@s* f3e37@ae* f3e34@e)) (lambda (f3e58@f3e53 f3e59@f3e55 f3e5a@f3e57) (let ((f3e5e@ae* f3e5a@f3e57) (f3e5f@s* f3e59@f3e55) (f3e60@m* f3e58@f3e53)) (f3e3c@f (f2e8a@stx-expr f3e34@e) f3e60@m* f3e5f@s* f3e5e@ae*))))) (if (f29fb@f28cf@annotation? f3e34@e) (f3e3c@f (f29fd@f28d3@annotation-expression f3e34@e) f3e35@m* f3e36@s* f3e37@ae*) (values '() f3e26@y-pat (f3db7@match f3e34@e f3e27@z-pat f3e35@m* f3e36@s* f3e37@ae* f3e2b@r)))))))) (set! f3daf@match-each-any (lambda (f3e08@e f3e09@m* f3e0a@s* f3e0b@ae*) (if (pair? f3e08@e) (let ((f3e10@l (f3daf@match-each-any (cdr f3e08@e) f3e09@m* f3e0a@s* f3e0b@ae*))) (and f3e10@l (cons (f3da9@stx^ (car f3e08@e) f3e09@m* f3e0a@s* f3e0b@ae*) f3e10@l))) (if (null? f3e08@e) '() (if (f2e88@stx? f3e08@e) (and (not (f2e42@top-marked? f3e09@m*)) (call-with-values (lambda () (join-wraps f3e09@m* f3e0a@s* f3e0b@ae* f3e08@e)) (lambda (f3e18@f3e13 f3e19@f3e15 f3e1a@f3e17) (let ((f3e1e@ae* f3e1a@f3e17) (f3e1f@s* f3e19@f3e15) (f3e20@m* f3e18@f3e13)) (f3daf@match-each-any (f2e8a@stx-expr f3e08@e) f3e20@m* f3e1f@s* f3e1e@ae*))))) (if (f29fb@f28cf@annotation? f3e08@e) (f3daf@match-each-any (f29fd@f28d3@annotation-expression f3e08@e) f3e09@m* f3e0a@s* f3e0b@ae*) '#f)))))) (set! f3db1@match-empty (lambda (f3e02@p f3e03@r) (if (null? f3e02@p) f3e03@r (if (eq? f3e02@p '_) f3e03@r (if (eq? f3e02@p 'any) (cons '() f3e03@r) (if (pair? f3e02@p) (f3db1@match-empty (car f3e02@p) (f3db1@match-empty (cdr f3e02@p) f3e03@r)) (if (eq? f3e02@p 'each-any) (cons '() f3e03@r) (let ((f3e06@t (vector-ref f3e02@p '0))) (if (memv f3e06@t '(each)) (f3db1@match-empty (vector-ref f3e02@p '1) f3e03@r) (if (memv f3e06@t '(each+)) (f3db1@match-empty (vector-ref f3e02@p '1) (f3db1@match-empty (reverse (vector-ref f3e02@p '2)) (f3db1@match-empty (vector-ref f3e02@p '3) f3e03@r))) (if (memv f3e06@t '(free-id atom)) f3e03@r (if (memv f3e06@t '(scheme-id atom)) f3e03@r (if (memv f3e06@t '(vector)) (f3db1@match-empty (vector-ref f3e02@p '1) f3e03@r) (assertion-violation 'syntax-dispatch '"invalid pattern" f3e02@p)))))))))))))) (set! f3db3@combine (lambda (f3dfe@r* f3dff@r) (if (null? (car f3dfe@r*)) f3dff@r (cons (map car f3dfe@r*) (f3db3@combine (map cdr f3dfe@r*) f3dff@r))))) (set! f3db5@match* (lambda (f3dda@e f3ddb@p f3ddc@m* f3ddd@s* f3dde@ae* f3ddf@r) (if (null? f3ddb@p) (and (null? f3dda@e) f3ddf@r) (if (pair? f3ddb@p) (and (pair? f3dda@e) (f3db7@match (car f3dda@e) (car f3ddb@p) f3ddc@m* f3ddd@s* f3dde@ae* (f3db7@match (cdr f3dda@e) (cdr f3ddb@p) f3ddc@m* f3ddd@s* f3dde@ae* f3ddf@r))) (if (eq? f3ddb@p 'each-any) (let ((f3de6@l (f3daf@match-each-any f3dda@e f3ddc@m* f3ddd@s* f3dde@ae*))) (and f3de6@l (cons f3de6@l f3ddf@r))) (let ((f3de8@t (vector-ref f3ddb@p '0))) (if (memv f3de8@t '(each)) (if (null? f3dda@e) (f3db1@match-empty (vector-ref f3ddb@p '1) f3ddf@r) (let ((f3dea@r* (f3dab@match-each f3dda@e (vector-ref f3ddb@p '1) f3ddc@m* f3ddd@s* f3dde@ae*))) (and f3dea@r* (f3db3@combine f3dea@r* f3ddf@r)))) (if (memv f3de8@t '(free-id)) (and (symbol? f3dda@e) (f2e42@top-marked? f3ddc@m*) (f2ec2@free-id=? (f3da9@stx^ f3dda@e f3ddc@m* f3ddd@s* f3dde@ae*) (vector-ref f3ddb@p '1)) f3ddf@r) (if (memv f3de8@t '(scheme-id)) (and (symbol? f3dda@e) (f2e42@top-marked? f3ddc@m*) (f2ec2@free-id=? (f3da9@stx^ f3dda@e f3ddc@m* f3ddd@s* f3dde@ae*) (f304b@scheme-stx (vector-ref f3ddb@p '1))) f3ddf@r) (if (memv f3de8@t '(each+)) (call-with-values (lambda () (f3dad@match-each+ f3dda@e (vector-ref f3ddb@p '1) (vector-ref f3ddb@p '2) (vector-ref f3ddb@p '3) f3ddc@m* f3ddd@s* f3dde@ae* f3ddf@r)) (lambda (f3df2@f3ded f3df3@f3def f3df4@f3df1) (let ((f3df8@r f3df4@f3df1) (f3df9@y-pat f3df3@f3def) (f3dfa@xr* f3df2@f3ded)) (and f3df8@r (null? f3df9@y-pat) (if (null? f3dfa@xr*) (f3db1@match-empty (vector-ref f3ddb@p '1) f3df8@r) (f3db3@combine f3dfa@xr* f3df8@r)))))) (if (memv f3de8@t '(atom)) (and (fast-equal? (vector-ref f3ddb@p '1) (f2ece@strip f3dda@e f3ddc@m*)) f3ddf@r) (if (memv f3de8@t '(vector)) (and (vector? f3dda@e) (f3db7@match (vector->list f3dda@e) (vector-ref f3ddb@p '1) f3ddc@m* f3ddd@s* f3dde@ae* f3ddf@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" f3ddb@p))))))))))))) (set! f3db7@match (lambda (f3dbc@e f3dbd@p f3dbe@m* f3dbf@s* f3dc0@ae* f3dc1@r) (if (not f3dc1@r) '#f (if (eq? f3dbd@p '_) f3dc1@r (if (eq? f3dbd@p 'any) (cons (f3da9@stx^ f3dbc@e f3dbe@m* f3dbf@s* f3dc0@ae*) f3dc1@r) (if (f2e88@stx? f3dbc@e) (and (not (f2e42@top-marked? f3dbe@m*)) (call-with-values (lambda () (join-wraps f3dbe@m* f3dbf@s* f3dc0@ae* f3dbc@e)) (lambda (f3dce@f3dc9 f3dcf@f3dcb f3dd0@f3dcd) (let ((f3dd4@ae* f3dd0@f3dcd) (f3dd5@s* f3dcf@f3dcb) (f3dd6@m* f3dce@f3dc9)) (f3db7@match (f2e8a@stx-expr f3dbc@e) f3dbd@p f3dd6@m* f3dd5@s* f3dd4@ae* f3dc1@r))))) (if (f29fb@f28cf@annotation? f3dbc@e) (f3db7@match (f29fd@f28d3@annotation-expression f3dbc@e) f3dbd@p f3dbe@m* f3dbf@s* f3dc0@ae* f3dc1@r) (f3db5@match* f3dbc@e f3dbd@p f3dbe@m* f3dbf@s* f3dc0@ae* f3dc1@r)))))))) (lambda (f3db8@e f3db9@p) (f3db7@match f3db8@e f3db9@p '() '() '() '()))))) (set! f4b99@f30c3@syntax-dispatch f30c3@syntax-dispatch) (set! f30c5@ellipsis? (lambda (f3e8c@x) (and (f2ebc@id? f3e8c@x) (f2ec2@free-id=? f3e8c@x (f304b@scheme-stx '...))))) (set! f4b9a@f30c5@ellipsis? f30c5@ellipsis?) (set! f30c7@underscore? (lambda (f3e8e@x) (and (f2ebc@id? f3e8e@x) (f2ec2@free-id=? f3e8e@x (f304b@scheme-stx '_))))) (set! f4b9b@f30c7@underscore? f30c7@underscore?) (set! f30c9@verify-literals (lambda (f3e90@lits f3e91@expr) (for-each (lambda (f3e94@x) (if (or (not (f2ebc@id? f3e94@x)) (f30c5@ellipsis? f3e94@x) (f30c7@underscore? f3e94@x)) (f31a3@syntax-violation '#f '"invalid literal" f3e91@expr f3e94@x) (void))) f3e90@lits))) (set! f4b9c@f30c9@verify-literals f30c9@verify-literals) (set! f30cb@syntax-case-transformer (let ((f3e97@build-dispatch-call '#f) (f3e99@invalid-ids-error '#f) (f3e9b@gen-clause '#f) (f3e9d@gen-syntax-case '#f)) (begin (set! f3e97@build-dispatch-call (lambda (f3f08@pvars f3f09@expr f3f0a@y f3f0b@r f3f0c@mr) (let ((f3f12@ids (map car f3f08@pvars)) (f3f13@levels (map cdr f3f08@pvars))) (let ((f3f16@labels (map f2e48@gen-label f3f12@ids)) (f3f17@new-vars (map f2e44@gen-lexical f3f12@ids))) (let ((f3f1a@body (f30e5@chi-expr (f2ea8@add-subst (f2e7c@make-full-rib f3f12@ids f3f16@labels) f3f09@expr) (append (map (lambda (f3f1c@label f3f1d@var f3f1e@level) (cons f3f1c@label (f2ed6@make-binding 'syntax (cons f3f1d@var f3f1e@level)))) f3f16@labels f3f17@new-vars (map cdr f3f08@pvars)) f3f0b@r) f3f0c@mr))) (list '(primitive apply) (f2e1f@f2d4b@build-lambda '#f f3f17@new-vars f3f1a@body) f3f0a@y)))))) (set! f3e99@invalid-ids-error (lambda (f3efc@id* f3efd@e f3efe@class) (let f3f06@find ((f3f02@id* f3efc@id*) (f3f03@ok* '())) (if (null? f3f02@id*) (f31a3@syntax-violation '#f '"invalid syntax" f3efd@e) (if (f2ebc@id? (car f3f02@id*)) (if (f2ec8@bound-id-member? (car f3f02@id*) f3f03@ok*) (f319f@syntax-error (car f3f02@id*) '"duplicate " f3efe@class) (f3f06@find (cdr f3f02@id*) (cons (car f3f02@id*) f3f03@ok*))) (f319f@syntax-error (car f3f02@id*) '"invalid " f3efe@class)))))) (set! f3e9b@gen-clause (lambda (f3ed4@x f3ed5@keys f3ed6@clauses f3ed7@r f3ed8@mr f3ed9@pat f3eda@fender f3edb@expr) (call-with-values (lambda () (f30c1@convert-pattern f3ed9@pat f3ed5@keys)) (lambda (f3ee8@f3ee5 f3ee9@f3ee7) (let ((f3eec@pvars f3ee9@f3ee7) (f3eed@p f3ee8@f3ee5)) (if (not (f2ec6@distinct-bound-ids? (map car f3eec@pvars))) (f3e99@invalid-ids-error (map car f3eec@pvars) f3ed9@pat '"pattern variable") (if (not (for-all (lambda (f3ef0@x) (not (f30c5@ellipsis? (car f3ef0@x)))) f3eec@pvars)) (f31a3@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" f3ed9@pat) (let ((f3ef2@y (f2e44@gen-lexical 'tmp))) (let ((f3ef4@test (if (eq? f3eda@fender '#t) f3ef2@y (let ((f3ef6@call (f3e97@build-dispatch-call f3eec@pvars f3eda@fender f3ef2@y f3ed7@r f3ed8@mr))) (list 'if f3ef2@y f3ef6@call (list 'quote '#f)))))) (let ((f3ef8@conseq (f3e97@build-dispatch-call f3eec@pvars f3edb@expr f3ef2@y f3ed7@r f3ed8@mr))) (let ((f3efa@altern (f3e9d@gen-syntax-case f3ed4@x f3ed5@keys f3ed6@clauses f3ed7@r f3ed8@mr))) (list (f2e1f@f2d4b@build-lambda '#f (list f3ef2@y) (list 'if f3ef4@test f3ef8@conseq f3efa@altern)) (list '(primitive syntax-dispatch) f3ed4@x (list 'quote f3eed@p)))))))))))))) (set! f3e9d@gen-syntax-case (lambda (f3eb2@x f3eb3@keys f3eb4@clauses f3eb5@r f3eb6@mr) (if (null? f3eb4@clauses) (list '(primitive syntax-error) f3eb2@x) (let ((f3ebc@t (car f3eb4@clauses))) (let ((f3ebe@ls/false (f30c3@syntax-dispatch f3ebc@t '(any any)))) (if f3ebe@ls/false (apply (lambda (f3ec0@pat f3ec1@expr) (if (and (f2ebc@id? f3ec0@pat) (not (f2ec8@bound-id-member? f3ec0@pat f3eb3@keys)) (not (f30c5@ellipsis? f3ec0@pat))) (if (f2ec2@free-id=? f3ec0@pat (f304b@scheme-stx '_)) (f30e5@chi-expr f3ec1@expr f3eb5@r f3eb6@mr) (let ((f3ec4@lab (f2e48@gen-label f3ec0@pat)) (f3ec5@lex (f2e44@gen-lexical f3ec0@pat))) (let ((f3ec8@body (f30e5@chi-expr (f2ea8@add-subst (f2e7c@make-full-rib (list f3ec0@pat) (list f3ec4@lab)) f3ec1@expr) (cons (cons f3ec4@lab (f2ed6@make-binding 'syntax (cons f3ec5@lex '0))) f3eb5@r) f3eb6@mr))) (list (f2e1f@f2d4b@build-lambda '#f (list f3ec5@lex) f3ec8@body) f3eb2@x)))) (f3e9b@gen-clause f3eb2@x f3eb3@keys (cdr f3eb4@clauses) f3eb5@r f3eb6@mr f3ec0@pat '#t f3ec1@expr))) f3ebe@ls/false) (let ((f3eca@t f3ebc@t)) (let ((f3ecc@ls/false (f30c3@syntax-dispatch f3eca@t '(any any any)))) (if f3ecc@ls/false (apply (lambda (f3ece@pat f3ecf@fender f3ed0@expr) (f3e9b@gen-clause f3eb2@x f3eb3@keys (cdr f3eb4@clauses) f3eb5@r f3eb6@mr f3ece@pat f3ecf@fender f3ed0@expr)) f3ecc@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3eca@t)))))))))) (lambda (f3e9e@e f3e9f@r f3ea0@mr) (let ((f3ea4@t f3e9e@e)) (let ((f3ea6@ls/false (f30c3@syntax-dispatch f3ea4@t '(_ any each-any . each-any)))) (if f3ea6@ls/false (apply (lambda (f3ea8@expr f3ea9@keys f3eaa@clauses) (begin (f30c9@verify-literals f3ea9@keys f3e9e@e) (let ((f3eae@x (f2e44@gen-lexical 'tmp))) (let ((f3eb0@body (f3e9d@gen-syntax-case f3eae@x f3ea9@keys f3eaa@clauses f3e9f@r f3ea0@mr))) (list (f2e1f@f2d4b@build-lambda '#f (list f3eae@x) f3eb0@body) (f30e5@chi-expr f3ea8@expr f3e9f@r f3ea0@mr)))))) f3ea6@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3ea4@t)))))))) (set! f4b9d@f30cb@syntax-case-transformer f30cb@syntax-case-transformer) (set! f30cd@ellipsis-map (lambda (f3f22@proc f3f23@ls . f3f26@ls*) (let ((f3f29@who '#f)) (begin (set! f3f29@who '...) (begin (if (not (list? f3f23@ls)) (assertion-violation f3f29@who '"not a list" f3f23@ls) (void)) (if (not (null? f3f26@ls*)) (let ((f3f2a@n (length f3f23@ls))) (for-each (lambda (f3f2c@x) (begin (if (not (list? f3f2c@x)) (assertion-violation f3f29@who '"not a list" f3f2c@x) (void)) (if (not (= (length f3f2c@x) f3f2a@n)) (assertion-violation f3f29@who '"length mismatch" f3f23@ls f3f2c@x) (void)))) f3f26@ls*)) (void)) (apply map f3f22@proc f3f23@ls f3f26@ls*)))))) (set! f4b9e@f30cd@ellipsis-map f30cd@ellipsis-map) (set! f30cf@syntax-transformer (let ((f3f2f@gen-syntax '#f) (f3f31@gen-ref '#f) (f3f33@gen-append '#f) (f3f35@gen-mappend '#f) (f3f37@gen-map '#f) (f3f39@gen-cons '#f) (f3f3b@gen-vector '#f) (f3f3d@regen '#f)) (begin (set! f3f2f@gen-syntax (lambda (f3fa6@src f3fa7@e f3fa8@r f3fa9@maps f3faa@ellipsis? f3fab@vec?) (let ((f3fb2@t f3fa7@e)) (let ((f3fb4@ls/false (f30c3@syntax-dispatch f3fb2@t 'any))) (if (and f3fb4@ls/false (apply (lambda (f3fb6@dots) (f3faa@ellipsis? f3fb6@dots)) f3fb4@ls/false)) (apply (lambda (f3fb8@dots) (f31a3@syntax-violation '#f '"misplaced ellipsis in syntax form" f3fa6@src)) f3fb4@ls/false) (let ((f3fba@t f3fb2@t)) (let ((f3fbc@ls/false (f30c3@syntax-dispatch f3fba@t 'any))) (if (and f3fbc@ls/false (apply (lambda (f3fbe@id) (f2ebc@id? f3fbe@id)) f3fbc@ls/false)) (apply (lambda (f3fc0@id) (let ((f3fc2@label (f2ed2@id->label f3fa7@e))) (let ((f3fc4@b (f2ed4@label->binding f3fc2@label f3fa8@r))) (if (eq? (f2ed8@binding-type f3fc4@b) 'syntax) (call-with-values (lambda () (let ((f3fca@var.lev (f2eda@binding-value f3fc4@b))) (f3f31@gen-ref f3fa6@src (car f3fca@var.lev) (cdr f3fca@var.lev) f3fa9@maps))) (lambda (f3fcc@f3fc7 f3fcd@f3fc9) (let ((f3fd0@maps f3fcd@f3fc9) (f3fd1@var f3fcc@f3fc7)) (values (list 'ref f3fd1@var) f3fd0@maps)))) (values (list 'quote f3fa7@e) f3fa9@maps))))) f3fbc@ls/false) (let ((f3fd4@t f3fba@t)) (let ((f3fd6@ls/false (f30c3@syntax-dispatch f3fd4@t '(any any)))) (if (and f3fd6@ls/false (apply (lambda (f3fd8@dots f3fd9@e) (f3faa@ellipsis? f3fd8@dots)) f3fd6@ls/false)) (apply (lambda (f3fdc@dots f3fdd@e) (if f3fab@vec? (f31a3@syntax-violation '#f '"misplaced ellipsis in syntax form" f3fa6@src) (f3f2f@gen-syntax f3fa6@src f3fdd@e f3fa8@r f3fa9@maps (lambda (f3fe0@x) '#f) '#f))) f3fd6@ls/false) (let ((f3fe2@t f3fd4@t)) (let ((f3fe4@ls/false (f30c3@syntax-dispatch f3fe2@t '(any any . any)))) (if (and f3fe4@ls/false (apply (lambda (f3fe6@x f3fe7@dots f3fe8@y) (f3faa@ellipsis? f3fe7@dots)) f3fe4@ls/false)) (apply (lambda (f3fec@x f3fed@dots f3fee@y) (let f4004@f ((f3ff2@y f3fee@y) (f3ff3@k (lambda (f3ff6@maps) (call-with-values (lambda () (f3f2f@gen-syntax f3fa6@src f3fec@x f3fa8@r (cons '() f3ff6@maps) f3faa@ellipsis? '#f)) (lambda (f3ffc@f3ff9 f3ffd@f3ffb) (let ((f4000@maps f3ffd@f3ffb) (f4001@x f3ffc@f3ff9)) (if (null? (car f4000@maps)) (f31a3@syntax-violation '#f '"extra ellipsis in syntax form" f3fa6@src) (values (f3f37@gen-map f4001@x (car f4000@maps)) (cdr f4000@maps))))))))) (let ((f4006@t f3ff2@y)) (let ((f4008@ls/false (f30c3@syntax-dispatch f4006@t '()))) (if f4008@ls/false (apply (lambda () (f3ff3@k f3fa9@maps)) f4008@ls/false) (let ((f400a@t f4006@t)) (let ((f400c@ls/false (f30c3@syntax-dispatch f400a@t '(any . any)))) (if (and f400c@ls/false (apply (lambda (f400e@dots f400f@y) (f3faa@ellipsis? f400e@dots)) f400c@ls/false)) (apply (lambda (f4012@dots f4013@y) (f4004@f f4013@y (lambda (f4016@maps) (call-with-values (lambda () (f3ff3@k (cons '() f4016@maps))) (lambda (f401c@f4019 f401d@f401b) (let ((f4020@maps f401d@f401b) (f4021@x f401c@f4019)) (if (null? (car f4020@maps)) (f31a3@syntax-violation '#f '"extra ellipsis in syntax form" f3fa6@src) (values (f3f35@gen-mappend f4021@x (car f4020@maps)) (cdr f4020@maps))))))))) f400c@ls/false) (let ((f4024@t f400a@t)) (let ((f4026@ls/false (f30c3@syntax-dispatch f4024@t '_))) (if f4026@ls/false (apply (lambda () (call-with-values (lambda () (f3f2f@gen-syntax f3fa6@src f3ff2@y f3fa8@r f3fa9@maps f3faa@ellipsis? f3fab@vec?)) (lambda (f402c@f4029 f402d@f402b) (let ((f4030@maps f402d@f402b) (f4031@y f402c@f4029)) (call-with-values (lambda () (f3ff3@k f4030@maps)) (lambda (f4038@f4035 f4039@f4037) (let ((f403c@maps f4039@f4037) (f403d@x f4038@f4035)) (values (f3f33@gen-append f403d@x f4031@y) f403c@maps)))))))) f4026@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f4024@t)))))))))))) f3fe4@ls/false) (let ((f4040@t f3fe2@t)) (let ((f4042@ls/false (f30c3@syntax-dispatch f4040@t '(any . any)))) (if f4042@ls/false (apply (lambda (f4044@x f4045@y) (call-with-values (lambda () (f3f2f@gen-syntax f3fa6@src f4044@x f3fa8@r f3fa9@maps f3faa@ellipsis? '#f)) (lambda (f404c@f4049 f404d@f404b) (let ((f4050@maps f404d@f404b) (f4051@xnew f404c@f4049)) (call-with-values (lambda () (f3f2f@gen-syntax f3fa6@src f4045@y f3fa8@r f4050@maps f3faa@ellipsis? f3fab@vec?)) (lambda (f4058@f4055 f4059@f4057) (let ((f405c@maps f4059@f4057) (f405d@ynew f4058@f4055)) (values (f3f39@gen-cons f3fa7@e f4044@x f4045@y f4051@xnew f405d@ynew) f405c@maps)))))))) f4042@ls/false) (let ((f4060@t f4040@t)) (let ((f4062@ls/false (f30c3@syntax-dispatch f4060@t '#(vector each-any)))) (if f4062@ls/false (apply (lambda (f4064@ls) (call-with-values (lambda () (f3f2f@gen-syntax f3fa6@src f4064@ls f3fa8@r f3fa9@maps f3faa@ellipsis? '#t)) (lambda (f406a@f4067 f406b@f4069) (let ((f406e@maps f406b@f4069) (f406f@lsnew f406a@f4067)) (values (f3f3b@gen-vector f3fa7@e f4064@ls f406f@lsnew) f406e@maps))))) f4062@ls/false) (let ((f4072@t f4060@t)) (let ((f4074@ls/false (f30c3@syntax-dispatch f4072@t '_))) (if f4074@ls/false (apply (lambda () (values (list 'quote f3fa7@e) f3fa9@maps)) f4074@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f4072@t)))))))))))))))))))))))) (set! f3f31@gen-ref (lambda (f3f8c@src f3f8d@var f3f8e@level f3f8f@maps) (if (= f3f8e@level '0) (values f3f8d@var f3f8f@maps) (if (null? f3f8f@maps) (f31a3@syntax-violation '#f '"missing ellipsis in syntax form" f3f8c@src) (call-with-values (lambda () (f3f31@gen-ref f3f8c@src f3f8d@var (- f3f8e@level '1) (cdr f3f8f@maps))) (lambda (f3f98@f3f95 f3f99@f3f97) (let ((f3f9c@outer-maps f3f99@f3f97) (f3f9d@outer-var f3f98@f3f95)) (let ((f3fa0@t (assq f3f9d@outer-var (car f3f8f@maps)))) (if f3fa0@t ((lambda (f3fa2@b) (values (cdr f3fa2@b) f3f8f@maps)) f3fa0@t) (let ((f3fa4@inner-var (f2e44@gen-lexical 'tmp))) (values f3fa4@inner-var (cons (cons (cons f3f9d@outer-var f3fa4@inner-var) (car f3f8f@maps)) f3f9c@outer-maps)))))))))))) (set! f3f33@gen-append (lambda (f3f88@x f3f89@y) (if (fast-equal? f3f89@y ''()) f3f88@x (list 'append f3f88@x f3f89@y)))) (set! f3f35@gen-mappend (lambda (f3f84@e f3f85@map-env) (list 'apply '(primitive append) (f3f37@gen-map f3f84@e f3f85@map-env)))) (set! f3f37@gen-map (lambda (f3f72@e f3f73@map-env) (let ((f3f76@formals (map cdr f3f73@map-env)) (f3f77@actuals (map (lambda (f3f7a@x) (list 'ref (car f3f7a@x))) f3f73@map-env))) (if (eq? (car f3f72@e) 'ref) (car f3f77@actuals) (if (for-all (lambda (f3f7c@x) (and (eq? (car f3f7c@x) 'ref) (memq (cadr f3f7c@x) f3f76@formals))) (cdr f3f72@e)) (let ((f3f7e@args (map (let ((f3f80@r (map cons f3f76@formals f3f77@actuals))) (lambda (f3f82@x) (cdr (assq (cadr f3f82@x) f3f80@r)))) (cdr f3f72@e)))) (cons 'map (cons (list 'primitive (car f3f72@e)) f3f7e@args))) (cons* 'map (list 'lambda f3f76@formals f3f72@e) f3f77@actuals)))))) (set! f3f39@gen-cons (lambda (f3f62@e f3f63@x f3f64@y f3f65@xnew f3f66@ynew) (let ((f3f6c@t (car f3f66@ynew))) (if (memv f3f6c@t '(quote)) (if (eq? (car f3f65@xnew) 'quote) (let ((f3f6e@xnew (cadr f3f65@xnew)) (f3f6f@ynew (cadr f3f66@ynew))) (if (and (eq? f3f6e@xnew f3f63@x) (eq? f3f6f@ynew f3f64@y)) (list 'quote f3f62@e) (list 'quote (cons f3f6e@xnew f3f6f@ynew)))) (if (null? (cadr f3f66@ynew)) (list 'list f3f65@xnew) (list 'cons f3f65@xnew f3f66@ynew))) (if (memv f3f6c@t '(list)) (cons 'list (cons f3f65@xnew (cdr f3f66@ynew))) (list 'cons f3f65@xnew f3f66@ynew)))))) (set! f3f3b@gen-vector (lambda (f3f5c@e f3f5d@ls f3f5e@lsnew) (if (eq? (car f3f5e@lsnew) 'quote) (if (eq? (cadr f3f5e@lsnew) f3f5d@ls) (list 'quote f3f5c@e) (list 'quote (list->vector (cadr f3f5e@lsnew)))) (if (eq? (car f3f5e@lsnew) 'list) (cons 'vector (cdr f3f5e@lsnew)) (list 'list->vector f3f5e@lsnew))))) (set! f3f3d@regen (lambda (f3f56@x) (let ((f3f58@t (car f3f56@x))) (if (memv f3f58@t '(ref)) (cadr f3f56@x) (if (memv f3f58@t '(primitive)) (list 'primitive (cadr f3f56@x)) (if (memv f3f58@t '(quote)) (list 'quote (cadr f3f56@x)) (if (memv f3f58@t '(lambda)) (f2e1f@f2d4b@build-lambda '#f (cadr f3f56@x) (f3f3d@regen (caddr f3f56@x))) (if (memv f3f58@t '(map)) (let ((f3f5a@ls (map f3f3d@regen (cdr f3f56@x)))) (cons '(primitive ellipsis-map) f3f5a@ls)) (cons (list 'primitive (car f3f56@x)) (map f3f3d@regen (cdr f3f56@x))))))))))) (lambda (f3f3e@e f3f3f@r f3f40@mr) (let ((f3f44@t f3f3e@e)) (let ((f3f46@ls/false (f30c3@syntax-dispatch f3f44@t '(_ any)))) (if f3f46@ls/false (apply (lambda (f3f48@x) (call-with-values (lambda () (f3f2f@gen-syntax f3f3e@e f3f48@x f3f3f@r '() f30c5@ellipsis? '#f)) (lambda (f3f4e@f3f4b f3f4f@f3f4d) (let ((f3f52@maps f3f4f@f3f4d) (f3f53@e f3f4e@f3f4b)) (f3f3d@regen f3f53@e))))) f3f46@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f3f44@t)))))))) (set! f4b9f@f30cf@syntax-transformer f30cf@syntax-transformer) (set! f30d1@core-macro-transformer (lambda (f4076@name) (let ((f4078@t f4076@name)) (if (memv f4078@t '(quote)) f3073@quote-transformer (if (memv f4078@t '(lambda)) f3077@lambda-transformer (if (memv f4078@t '(case-lambda)) f3075@case-lambda-transformer (if (memv f4078@t '(letrec)) f305b@letrec-transformer (if (memv f4078@t '(letrec*)) f305d@letrec*-transformer (if (memv f4078@t '(let)) f3059@let-transformer (if (memv f4078@t '(if)) f306b@if-transformer (if (memv f4078@t '(and)) f306d@and-transformer (if (memv f4078@t '(or)) f306f@or-transformer (if (memv f4078@t '(foreign-call)) f30bf@foreign-call-transformer (if (memv f4078@t '(syntax-case)) f30cb@syntax-case-transformer (if (memv f4078@t '(syntax)) f30cf@syntax-transformer (if (memv f4078@t '(type-descriptor)) f3061@type-descriptor-transformer (if (memv f4078@t '(record-type-descriptor)) f3063@record-type-descriptor-transformer (if (memv f4078@t '(record-constructor-descriptor)) f3065@record-constructor-descriptor-transformer (if (memv f4078@t '(fluid-let-syntax)) f305f@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" f4076@name)))))))))))))))))))) (set! f4ba0@f30d1@core-macro-transformer f30d1@core-macro-transformer) (set! f30d3@symbol-macro (lambda (f407a@x f407b@set) (let ((f407e@t f407a@x)) (let ((f4080@ls/false (f30c3@syntax-dispatch f407e@t '(_ any)))) (if (and f4080@ls/false (apply (lambda (f4082@name) (and (f2ebc@id? f4082@name) (memq (f2ebe@id->sym f4082@name) f407b@set))) f4080@ls/false)) (apply (lambda (f4084@name) (f3079@bless (list 'quote f4084@name))) f4080@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f407e@t)))))) (set! f4ba1@f30d3@symbol-macro f30d3@symbol-macro) (set! f30d5@macro-transformer (lambda (f4086@x) (if (procedure? f4086@x) f4086@x (if (symbol? f4086@x) (let ((f4088@t f4086@x)) (if (memv f4088@t '(define-record-type)) f30b7@define-record-type-macro (if (memv f4088@t '(define-struct)) f30b5@define-struct-macro (if (memv f4088@t '(include)) f30ab@include-macro (if (memv f4088@t '(cond)) f30a7@cond-macro (if (memv f4088@t '(let)) f307f@let-macro (if (memv f4088@t '(do)) f309f@do-macro (if (memv f4088@t '(or)) f30a3@or-macro (if (memv f4088@t '(and)) f30a5@and-macro (if (memv f4088@t '(let*)) f30a1@let*-macro (if (memv f4088@t '(let-values)) f3081@let-values-macro (if (memv f4088@t '(let*-values)) f3083@let*-values-macro (if (memv f4088@t '(syntax-rules)) f30af@syntax-rules-macro (if (memv f4088@t '(quasiquote)) f30b1@quasiquote-macro (if (memv f4088@t '(quasisyntax)) f30b3@quasisyntax-macro (if (memv f4088@t '(with-syntax)) f307b@with-syntax-macro (if (memv f4088@t '(when)) f3067@when-macro (if (memv f4088@t '(unless)) f3069@unless-macro (if (memv f4088@t '(case)) f3071@case-macro (if (memv f4088@t '(identifier-syntax)) f309d@identifier-syntax-macro (if (memv f4088@t '(time)) f3095@time-macro (if (memv f4088@t '(delay)) f3097@delay-macro (if (memv f4088@t '(assert)) f3099@assert-macro (if (memv f4088@t '(endianness)) f309b@endianness-macro (if (memv f4088@t '(guard)) f3091@guard-macro (if (memv f4088@t '(define-enumeration)) f3093@define-enumeration-macro (if (memv f4088@t '(trace-lambda)) f3085@trace-lambda-macro (if (memv f4088@t '(trace-define)) f3087@trace-define-macro (if (memv f4088@t '(trace-define-syntax)) f3089@trace-define-syntax-macro (if (memv f4088@t '(trace-let-syntax)) f308d@trace-let-syntax-macro (if (memv f4088@t '(trace-letrec-syntax)) f308f@trace-letrec-syntax-macro (if (memv f4088@t '(define-condition-type)) f30b9@define-condition-type-macro (if (memv f4088@t '(parameterize)) f30bd@parameterize-macro (if (memv f4088@t '(include-into)) f30ad@include-into-macro (if (memv f4088@t '(eol-style)) (lambda (f408a@x) (f30d3@symbol-macro f408a@x '(none lf cr crlf nel crnel ls))) (if (memv f4088@t '(error-handling-mode)) (lambda (f408c@x) (f30d3@symbol-macro f408c@x '(ignore raise replace))) (if (memv f4088@t '(buffer-mode)) (lambda (f408e@x) (f30d3@symbol-macro f408e@x '(none line block))) (if (memv f4088@t '(file-options)) f2e37@file-options-macro (if (memv f4088@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) f30bb@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" f4086@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" f4086@x))))) (set! f4ba2@f30d5@macro-transformer f30d5@macro-transformer) (set! f30d7@local-macro-transformer (lambda (f4090@x) (car f4090@x))) (set! f4ba3@f30d7@local-macro-transformer f30d7@local-macro-transformer) (set! f30d9@do-macro-call (lambda (f4092@transformer f4093@expr) (let ((f4096@out (f4092@transformer (f2ea6@add-mark f2ea0@anti-mark f4093@expr '#f)))) (begin (let f409a@f ((f4098@x f4096@out)) (if (not (f2e88@stx? f4098@x)) (if (pair? f4098@x) (begin (f409a@f (car f4098@x)) (f409a@f (cdr f4098@x))) (if (vector? f4098@x) (vector-for-each f409a@f f4098@x) (if (symbol? f4098@x) (f31a3@syntax-violation '#f '"raw symbol encountered in output of macro" f4093@expr f4098@x) (void)))) (void))) (f2ea6@add-mark (f2e9e@gen-mark) f4096@out f4093@expr))))) (set! f4ba4@f30d9@do-macro-call f30d9@do-macro-call) (set! f30db@chi-macro (lambda (f409c@p f409d@e) (f30d9@do-macro-call (f30d5@macro-transformer f409c@p) f409d@e))) (set! f4ba5@f30db@chi-macro f30db@chi-macro) (set! f30dd@chi-local-macro (lambda (f40a0@p f40a1@e) (f30d9@do-macro-call (f30d7@local-macro-transformer f40a0@p) f40a1@e))) (set! f4ba6@f30dd@chi-local-macro f30dd@chi-local-macro) (set! f30df@chi-global-macro (lambda (f40a4@p f40a5@e) (let ((f40a8@lib (car f40a4@p)) (f40a9@loc (cdr f40a4@p))) (begin (f2cd3@f2b22@visit-library f40a8@lib) (let ((f40ac@x (symbol-value f40a9@loc))) (let ((f40ae@transformer (if (procedure? f40ac@x) f40ac@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" f40ac@x)))) (f30d9@do-macro-call f40ae@transformer f40a5@e))))))) (set! f4ba7@f30df@chi-global-macro f30df@chi-global-macro) (set! f30e1@chi-expr* (lambda (f40b0@e* f40b1@r f40b2@mr) (if (null? f40b0@e*) '() (let ((f40b6@e (f30e5@chi-expr (car f40b0@e*) f40b1@r f40b2@mr))) (cons f40b6@e (f30e1@chi-expr* (cdr f40b0@e*) f40b1@r f40b2@mr)))))) (set! f4ba8@f30e1@chi-expr* f30e1@chi-expr*) (set! f30e3@chi-application (lambda (f40b8@e f40b9@r f40ba@mr) (let ((f40be@t f40b8@e)) (let ((f40c0@ls/false (f30c3@syntax-dispatch f40be@t '(any . each-any)))) (if f40c0@ls/false (apply (lambda (f40c2@rator f40c3@rands) (let ((f40c6@rator (f30e5@chi-expr f40c2@rator f40b9@r f40ba@mr))) (cons f40c6@rator (f30e1@chi-expr* f40c3@rands f40b9@r f40ba@mr)))) f40c0@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f40be@t)))))) (set! f4ba9@f30e3@chi-application f30e3@chi-application) (set! f30e5@chi-expr (lambda (f40c8@e f40c9@r f40ca@mr) (call-with-values (lambda () (f2ede@syntax-type f40c8@e f40c9@r)) (lambda (f40d4@f40cf f40d5@f40d1 f40d6@f40d3) (let ((f40da@kwd f40d6@f40d3) (f40db@value f40d5@f40d1) (f40dc@type f40d4@f40cf)) (let ((f40e0@t f40dc@type)) (if (memv f40e0@t '(core-macro)) (let ((f40e2@transformer (f30d1@core-macro-transformer f40db@value))) (f40e2@transformer f40c8@e f40c9@r f40ca@mr)) (if (memv f40e0@t '(global)) (let ((f40e4@lib (car f40db@value))) (let ((f40e6@loc (cdr f40db@value))) (begin ((f312b@inv-collector) f40e4@lib) f40e6@loc))) (if (memv f40e0@t '(core-prim)) (let ((f40e8@name f40db@value)) (list 'primitive f40e8@name)) (if (memv f40e0@t '(call)) (f30e3@chi-application f40c8@e f40c9@r f40ca@mr) (if (memv f40e0@t '(lexical)) (let ((f40ea@lex (f304d@lexical-var f40db@value))) f40ea@lex) (if (memv f40e0@t '(global-macro global-macro!)) (f30e5@chi-expr (f30df@chi-global-macro f40db@value f40c8@e) f40c9@r f40ca@mr) (if (memv f40e0@t '(local-macro local-macro!)) (f30e5@chi-expr (f30dd@chi-local-macro f40db@value f40c8@e) f40c9@r f40ca@mr) (if (memv f40e0@t '(macro macro!)) (f30e5@chi-expr (f30db@chi-macro f40db@value f40c8@e) f40c9@r f40ca@mr) (if (memv f40e0@t '(constant)) (let ((f40ec@datum f40db@value)) (list 'quote f40ec@datum)) (if (memv f40e0@t '(set!)) (f30e7@chi-set! f40c8@e f40c9@r f40ca@mr) (if (memv f40e0@t '(begin)) (let ((f40ee@t f40c8@e)) (let ((f40f0@ls/false (f30c3@syntax-dispatch f40ee@t '(_ any . each-any)))) (if f40f0@ls/false (apply (lambda (f40f2@x f40f3@x*) (f2e21@f2d7b@build-sequence '#f (f30e1@chi-expr* (cons f40f2@x f40f3@x*) f40c9@r f40ca@mr))) f40f0@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f40ee@t)))) (if (memv f40e0@t '(let-syntax letrec-syntax)) (let ((f40f6@t f40c8@e)) (let ((f40f8@ls/false (f30c3@syntax-dispatch f40f6@t '(_ #(each (any any)) any . each-any)))) (if (and f40f8@ls/false (apply (lambda (f40fa@xlhs* f40fb@xrhs* f40fc@xbody f40fd@xbody*) (if (not (f2ec4@valid-bound-ids? f40fa@xlhs*)) (f31a3@syntax-violation '#f '"invalid identifiers" f40c8@e) (void))) f40f8@ls/false)) (apply (lambda (f4102@xlhs* f4103@xrhs* f4104@xbody f4105@xbody*) (let ((f410a@xlab* (map f2e48@gen-label f4102@xlhs*))) (let ((f410c@xrib (f2e7c@make-full-rib f4102@xlhs* f410a@xlab*))) (let ((f410e@xb* (map (lambda (f4110@x) (f2ef4@make-eval-transformer (f311d@expand-transformer (if (eq? f40dc@type 'let-syntax) f4110@x (f2ea8@add-subst f410c@xrib f4110@x)) f40ca@mr))) f4103@xrhs*))) (f2e21@f2d7b@build-sequence '#f (f30e1@chi-expr* (map (lambda (f4112@x) (f2ea8@add-subst f410c@xrib f4112@x)) (cons f4104@xbody f4105@xbody*)) (append (map cons f410a@xlab* f410e@xb*) f40c9@r) (append (map cons f410a@xlab* f410e@xb*) f40ca@mr))))))) f40f8@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f40f6@t)))) (if (memv f40e0@t '(displaced-lexical)) (f31a3@syntax-violation '#f '"identifier out of context" f40c8@e) (if (memv f40e0@t '(syntax)) (f31a3@syntax-violation '#f '"reference to pattern variable outside a syntax form" f40c8@e) (if (memv f40e0@t '(define define-syntax module import library)) (f31a3@syntax-violation '#f (string-append (let ((f4114@t f40dc@type)) (if (memv f4114@t '(define)) '"a definition" (if (memv f4114@t '(define-syntax)) '"a define-syntax" (if (memv f4114@t '(module)) '"a module definition" (if (memv f4114@t '(library)) '"a library definition" (if (memv f4114@t '(import)) '"an import declaration" (if (memv f4114@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") f40c8@e) (if (memv f40e0@t '(mutable)) (f31a3@syntax-violation '#f '"attempt to reference an unexportable variable" f40c8@e) (f31a3@syntax-violation '#f '"invalid expression" f40c8@e))))))))))))))))))))))) (set! f4baa@f30e5@chi-expr f30e5@chi-expr) (set! f30e7@chi-set! (lambda (f4116@e f4117@r f4118@mr) (let ((f411c@t f4116@e)) (let ((f411e@ls/false (f30c3@syntax-dispatch f411c@t '(_ any any)))) (if (and f411e@ls/false (apply (lambda (f4120@x f4121@v) (f2ebc@id? f4120@x)) f411e@ls/false)) (apply (lambda (f4124@x f4125@v) (call-with-values (lambda () (f2ede@syntax-type f4124@x f4117@r)) (lambda (f412e@f4129 f412f@f412b f4130@f412d) (let ((f4134@kwd f4130@f412d) (f4135@value f412f@f412b) (f4136@type f412e@f4129)) (let ((f413a@t f4136@type)) (if (memv f413a@t '(lexical)) (begin (f3051@set-lexical-mutable! f4135@value '#t) (list 'set! (f304d@lexical-var f4135@value) (f30e5@chi-expr f4125@v f4117@r f4118@mr))) (if (memv f413a@t '(core-prim)) (f31a3@syntax-violation '#f '"cannot modify imported core primitive" f4116@e) (if (memv f413a@t '(global)) (f31a3@syntax-violation '#f '"attempt to modify imported binding" f4116@e) (if (memv f413a@t '(global-macro!)) (f30e5@chi-expr (f30df@chi-global-macro f4135@value f4116@e) f4117@r f4118@mr) (if (memv f413a@t '(local-macro!)) (f30e5@chi-expr (f30dd@chi-local-macro f4135@value f4116@e) f4117@r f4118@mr) (if (memv f413a@t '(mutable)) (f31a3@syntax-violation '#f '"attempt to assign to an unexportable variable" f4116@e) (f31a3@syntax-violation '#f '"invalid syntax" f4116@e)))))))))))) f411e@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f411c@t)))))) (set! f4bab@f30e7@chi-set! f30e7@chi-set!) (set! f30e9@verify-formals (lambda (f413c@fmls f413d@stx) (let ((f4140@t f413c@fmls)) (let ((f4142@ls/false (f30c3@syntax-dispatch f4140@t 'each-any))) (if f4142@ls/false (apply (lambda (f4144@x*) (if (not (f2ec4@valid-bound-ids? f4144@x*)) (f307d@invalid-fmls-error f413d@stx f413c@fmls) (void))) f4142@ls/false) (let ((f4146@t f4140@t)) (let ((f4148@ls/false (f30c3@syntax-dispatch f4146@t '#(each+ any () any)))) (if f4148@ls/false (apply (lambda (f414a@x* f414b@x) (if (not (f2ec4@valid-bound-ids? (cons f414b@x f414a@x*))) (f307d@invalid-fmls-error f413d@stx f413c@fmls) (void))) f4148@ls/false) (let ((f414e@t f4146@t)) (let ((f4150@ls/false (f30c3@syntax-dispatch f414e@t '_))) (if f4150@ls/false (apply (lambda () (f31a3@syntax-violation '#f '"invalid syntax" f413d@stx)) f4150@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f414e@t)))))))))))) (set! f4bac@f30e9@verify-formals f30e9@verify-formals) (set! f30eb@chi-lambda-clause (lambda (f4152@stx f4153@fmls f4154@body* f4155@r f4156@mr) (let ((f415c@t f4153@fmls)) (let ((f415e@ls/false (f30c3@syntax-dispatch f415c@t 'each-any))) (if f415e@ls/false (apply (lambda (f4160@x*) (begin (f30e9@verify-formals f4153@fmls f4152@stx) (let ((f4162@lex* (map f2e44@gen-lexical f4160@x*)) (f4163@lab* (map f2e48@gen-label f4160@x*))) (values f4162@lex* (f30fb@chi-internal (f2ea8@add-subst (f2e7c@make-full-rib f4160@x* f4163@lab*) f4154@body*) (f3055@add-lexicals f4163@lab* f4162@lex* f4155@r) f4156@mr))))) f415e@ls/false) (let ((f4166@t f415c@t)) (let ((f4168@ls/false (f30c3@syntax-dispatch f4166@t '#(each+ any () any)))) (if f4168@ls/false (apply (lambda (f416a@x* f416b@x) (begin (f30e9@verify-formals f4153@fmls f4152@stx) (let ((f416e@lex* (map f2e44@gen-lexical f416a@x*)) (f416f@lab* (map f2e48@gen-label f416a@x*)) (f4170@lex (f2e44@gen-lexical f416b@x)) (f4171@lab (f2e48@gen-label f416b@x))) (values (append f416e@lex* f4170@lex) (f30fb@chi-internal (f2ea8@add-subst (f2e7c@make-full-rib (cons f416b@x f416a@x*) (cons f4171@lab f416f@lab*)) f4154@body*) (f3055@add-lexicals (cons f4171@lab f416f@lab*) (cons f4170@lex f416e@lex*) f4155@r) f4156@mr))))) f4168@ls/false) (let ((f4176@t f4166@t)) (let ((f4178@ls/false (f30c3@syntax-dispatch f4176@t '_))) (if f4178@ls/false (apply (lambda () (f31a3@syntax-violation '#f '"invalid syntax" f4153@fmls)) f4178@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f4176@t)))))))))))) (set! f4bad@f30eb@chi-lambda-clause f30eb@chi-lambda-clause) (set! f30ed@chi-lambda-clause* (lambda (f417a@stx f417b@fmls* f417c@body** f417d@r f417e@mr) (if (null? f417b@fmls*) (values '() '()) (call-with-values (lambda () (f30eb@chi-lambda-clause f417a@stx (car f417b@fmls*) (car f417c@body**) f417d@r f417e@mr)) (lambda (f4188@f4185 f4189@f4187) (let ((f418c@b f4189@f4187) (f418d@a f4188@f4185)) (call-with-values (lambda () (f30ed@chi-lambda-clause* f417a@stx (cdr f417b@fmls*) (cdr f417c@body**) f417d@r f417e@mr)) (lambda (f4194@f4191 f4195@f4193) (let ((f4198@b* f4195@f4193) (f4199@a* f4194@f4191)) (values (cons f418d@a f4199@a*) (cons f418c@b f4198@b*))))))))))) (set! f4bae@f30ed@chi-lambda-clause* f30ed@chi-lambda-clause*) (set! f30ef@chi-defun (lambda (f419c@x f419d@r f419e@mr) (let ((f41a2@fmls (car f419c@x)) (f41a3@body* (cdr f419c@x))) (call-with-values (lambda () (f30eb@chi-lambda-clause f41a2@fmls f41a2@fmls f41a3@body* f419d@r f419e@mr)) (lambda (f41aa@f41a7 f41ab@f41a9) (let ((f41ae@body f41ab@f41a9) (f41af@fmls f41aa@f41a7)) (f2e1f@f2d4b@build-lambda '#f f41af@fmls f41ae@body))))))) (set! f4baf@f30ef@chi-defun f30ef@chi-defun) (set! f30f1@chi-rhs (lambda (f41b2@rhs f41b3@r f41b4@mr) (let ((f41b8@t (car f41b2@rhs))) (if (memv f41b8@t '(defun)) (f30ef@chi-defun (cdr f41b2@rhs) f41b3@r f41b4@mr) (if (memv f41b8@t '(expr)) (let ((f41ba@expr (cdr f41b2@rhs))) (f30e5@chi-expr f41ba@expr f41b3@r f41b4@mr)) (if (memv f41b8@t '(top-expr)) (let ((f41bc@expr (cdr f41b2@rhs))) (f2e21@f2d7b@build-sequence '#f (list (f30e5@chi-expr f41bc@expr f41b3@r f41b4@mr) (f2e22@f2d7d@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" f41b2@rhs))))))) (set! f4bb0@f30f1@chi-rhs f30f1@chi-rhs) (set! f30f3@expand-interaction-rhs*/init* (lambda (f41be@lhs* f41bf@rhs* f41c0@init* f41c1@r f41c2@mr) (let f41cc@f ((f41c8@lhs* f41be@lhs*) (f41c9@rhs* f41bf@rhs*)) (if (null? f41c8@lhs*) (map (lambda (f41ce@x) (f30e5@chi-expr f41ce@x f41c1@r f41c2@mr)) f41c0@init*) (let ((f41d0@lhs (car f41c8@lhs*)) (f41d1@rhs (car f41c9@rhs*))) (let ((f41d4@t (car f41d1@rhs))) (if (memv f41d4@t '(defun)) (let ((f41d6@rhs (f30ef@chi-defun (cdr f41d1@rhs) f41c1@r f41c2@mr))) (cons (list 'set! f41d0@lhs f41d6@rhs) (f41cc@f (cdr f41c8@lhs*) (cdr f41c9@rhs*)))) (if (memv f41d4@t '(expr)) (let ((f41d8@rhs (f30e5@chi-expr (cdr f41d1@rhs) f41c1@r f41c2@mr))) (cons (list 'set! f41d0@lhs f41d8@rhs) (f41cc@f (cdr f41c8@lhs*) (cdr f41c9@rhs*)))) (if (memv f41d4@t '(top-expr)) (let ((f41da@e (f30e5@chi-expr (cdr f41d1@rhs) f41c1@r f41c2@mr))) (cons f41da@e (f41cc@f (cdr f41c8@lhs*) (cdr f41c9@rhs*)))) (error 'expand-interaction '"invallid" f41d1@rhs)))))))))) (set! f4bb1@f30f3@expand-interaction-rhs*/init* f30f3@expand-interaction-rhs*/init*) (set! f30f5@chi-rhs* (lambda (f41dc@rhs* f41dd@r f41de@mr) (let f41e4@f ((f41e2@ls f41dc@rhs*)) (if (null? f41e2@ls) '() (let ((f41e6@a (f30f1@chi-rhs (car f41e2@ls) f41dd@r f41de@mr))) (cons f41e6@a (f41e4@f (cdr f41e2@ls)))))))) (set! f4bb2@f30f5@chi-rhs* f30f5@chi-rhs*) (set! f30f7@find-bound=? (lambda (f41e8@x f41e9@lhs* f41ea@rhs*) (if (null? f41e9@lhs*) '#f (if (f2ec0@bound-id=? f41e8@x (car f41e9@lhs*)) (car f41ea@rhs*) (f30f7@find-bound=? f41e8@x (cdr f41e9@lhs*) (cdr f41ea@rhs*)))))) (set! f4bb3@f30f7@find-bound=? f30f7@find-bound=?) (set! f30f9@find-dups (lambda (f41ee@ls) (let f41f4@f ((f41f0@ls f41ee@ls) (f41f1@dups '())) (if (null? f41f0@ls) f41f1@dups (let ((f41f6@t (f30f7@find-bound=? (car f41f0@ls) (cdr f41f0@ls) (cdr f41f0@ls)))) (if f41f6@t ((lambda (f41f8@x) (f41f4@f (cdr f41f0@ls) (cons (list (car f41f0@ls) f41f8@x) f41f1@dups))) f41f6@t) (f41f4@f (cdr f41f0@ls) f41f1@dups))))))) (set! f4bb4@f30f9@find-dups f30f9@find-dups) (set! f30fb@chi-internal (lambda (f41fa@e* f41fb@r f41fc@mr) (let ((f4200@rib (f2e70@make-empty-rib))) (call-with-values (lambda () (f311b@chi-body* (map (lambda (f4212@x) (f2ea8@add-subst f4200@rib f4212@x)) (f2eba@syntax->list f41fa@e*)) f41fb@r f41fc@mr '() '() '() '() '() f4200@rib '#f)) (lambda (f4214@f4203 f4215@f4205 f4216@f4207 f4217@f4209 f4218@f420b f4219@f420d f421a@f420f f421b@f4211) (let ((f4224@_exp* f421b@f4211) (f4225@kwd* f421a@f420f) (f4226@mod** f4219@f420d) (f4227@rhs* f4218@f420b) (f4228@lex* f4217@f4209) (f4229@mr f4216@f4207) (f422a@r f4215@f4205) (f422b@e* f4214@f4203)) (begin (if (null? f422b@e*) (f31a3@syntax-violation '#f '"no expression in body" f422b@e*) (void)) (let ((f4234@init* (f30e1@chi-expr* (append (apply append (reverse f4226@mod**)) f422b@e*) f422a@r f4229@mr))) (let ((f4236@rhs* (f30f5@chi-rhs* f4227@rhs* f422a@r f4229@mr))) (f2e26@f2d85@build-letrec* '#f (reverse f4228@lex*) (reverse f4236@rhs*) (f2e21@f2d7b@build-sequence '#f f4234@init*))))))))))) (set! f4bb5@f30fb@chi-internal f30fb@chi-internal) (set! f30fd@parse-module (lambda (f4238@e) (let ((f423a@t f4238@e)) (let ((f423c@ls/false (f30c3@syntax-dispatch f423a@t '(_ each-any . each-any)))) (if f423c@ls/false (apply (lambda (f423e@export* f423f@b*) (begin (if (not (for-all f2ebc@id? f423e@export*)) (f31a3@syntax-violation '#f '"module exports must be identifiers" f4238@e) (void)) (values '#f (list->vector f423e@export*) f423f@b*))) f423c@ls/false) (let ((f4242@t f423a@t)) (let ((f4244@ls/false (f30c3@syntax-dispatch f4242@t '(_ any each-any . each-any)))) (if f4244@ls/false (apply (lambda (f4246@name f4247@export* f4248@b*) (begin (if (not (f2ebc@id? f4246@name)) (f31a3@syntax-violation '#f '"module name must be an identifier" f4238@e) (void)) (if (not (for-all f2ebc@id? f4247@export*)) (f31a3@syntax-violation '#f '"module exports must be identifiers" f4238@e) (void)) (values f4246@name (list->vector f4247@export*) f4248@b*))) f4244@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f4242@t))))))))) (set! f4bb6@f30fd@parse-module f30fd@parse-module) (set! f3107@module-interface? (lambda (f424c@x) (and (simple-struct? f424c@x) (eq? (simple-struct-name f424c@x) 'module-interface)))) (set! f4bb7@f3107@module-interface? f3107@module-interface?) (set! f3109@module-interface-first-mark (lambda (f424e@x) (simple-struct-ref f424e@x '0))) (set! f4bb8@f3109@module-interface-first-mark f3109@module-interface-first-mark) (set! f310b@set-module-interface-first-mark! (lambda (f4250@x f4251@val) (simple-struct-set! f4250@x '0 f4251@val))) (set! f4bb9@f310b@set-module-interface-first-mark! f310b@set-module-interface-first-mark!) (set! f310d@module-interface-exp-id-vec (lambda (f4254@x) (simple-struct-ref f4254@x '1))) (set! f4bba@f310d@module-interface-exp-id-vec f310d@module-interface-exp-id-vec) (set! f310f@set-module-interface-exp-id-vec! (lambda (f4256@x f4257@val) (simple-struct-set! f4256@x '1 f4257@val))) (set! f4bbb@f310f@set-module-interface-exp-id-vec! f310f@set-module-interface-exp-id-vec!) (set! f3111@module-interface-exp-lab-vec (lambda (f425a@x) (simple-struct-ref f425a@x '2))) (set! f4bbc@f3111@module-interface-exp-lab-vec f3111@module-interface-exp-lab-vec) (set! f3113@set-module-interface-exp-lab-vec! (lambda (f425c@x f425d@val) (simple-struct-set! f425c@x '2 f425d@val))) (set! f4bbd@f3113@set-module-interface-exp-lab-vec! f3113@set-module-interface-exp-lab-vec!) (set! f3115@dummy '3) (set! f4bbe@f3115@dummy f3115@dummy) (set! f3117@module-interface-exp-id* (lambda (f4260@iface f4261@id) (let ((f4265@diff-marks '#f)) (begin (set! f4265@diff-marks (lambda (f426c@ls f426d@x) (begin (if (null? f426c@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((f4270@a (car f426c@ls))) (if (eq? f4270@a f426d@x) '() (cons f4270@a (f4265@diff-marks (cdr f426c@ls) f426d@x))))))) (let ((f4266@diff (f4265@diff-marks (f2e8e@stx-mark* f4261@id) (f3109@module-interface-first-mark f4260@iface))) (f4267@id-vec (f310d@module-interface-exp-id-vec f4260@iface))) (if (null? f4266@diff) f4267@id-vec (vector-map (lambda (f426a@x) (make-simple-struct 'stx '5 (list (f2e8a@stx-expr f426a@x) (append f4266@diff (f2e8e@stx-mark* f426a@x)) '() '()))) f4267@id-vec))))))) (set! f4bbf@f3117@module-interface-exp-id* f3117@module-interface-exp-id*) (set! f3119@chi-internal-module (lambda (f4272@e f4273@r f4274@mr f4275@lex* f4276@rhs* f4277@mod** f4278@kwd*) (call-with-values (lambda () (f30fd@parse-module f4272@e)) (lambda (f4286@f4281 f4287@f4283 f4288@f4285) (let ((f428c@e* f4288@f4285) (f428d@exp-id* f4287@f4283) (f428e@name f4286@f4281)) (let ((f4292@rib (f2e70@make-empty-rib))) (let ((f4294@e* (map (lambda (f4296@x) (f2ea8@add-subst f4292@rib f4296@x)) (f2eba@syntax->list f428c@e*)))) (call-with-values (lambda () (f311b@chi-body* f4294@e* f4273@r f4274@mr f4275@lex* f4276@rhs* f4277@mod** f4278@kwd* '() f4292@rib '#f)) (lambda (f42a8@f4299 f42a9@f429b f42aa@f429d f42ab@f429f f42ac@f42a1 f42ad@f42a3 f42ae@f42a5 f42af@f42a7) (let ((f42b8@_exp* f42af@f42a7) (f42b9@kwd* f42ae@f42a5) (f42ba@mod** f42ad@f42a3) (f42bb@rhs* f42ac@f42a1) (f42bc@lex* f42ab@f429f) (f42bd@mr f42aa@f429d) (f42be@r f42a9@f429b) (f42bf@e* f42a8@f4299)) (let ((f42c8@exp-lab* (vector-map (lambda (f42cc@x) (or (f2ed2@id->label (make-simple-struct 'stx '5 (list (f2ebe@id->sym f42cc@x) (f2e8e@stx-mark* f42cc@x) (list f4292@rib) '()))) (f31a3@syntax-violation '#f '"cannot find module export" f42cc@x))) f428d@exp-id*)) (f42c9@mod** (cons f42bf@e* f42ba@mod**))) (if (not f428e@name) (values f42bc@lex* f42bb@rhs* f428d@exp-id* f42c8@exp-lab* f42be@r f42bd@mr f42c9@mod** f42b9@kwd*) (let ((f42ce@lab (f2e48@gen-label 'module)) (f42cf@iface (make-simple-struct 'module-interface '4 (list (car (f2e8e@stx-mark* f428e@name)) (vector-map (lambda (f42d2@x) (make-simple-struct 'stx '5 (list (f2e8a@stx-expr f42d2@x) (f2e8e@stx-mark* f42d2@x) '() '()))) f428d@exp-id*) f42c8@exp-lab*)))) (values f42bc@lex* f42bb@rhs* (vector f428e@name) (vector f42ce@lab) (cons (cons f42ce@lab (cons '$module f42cf@iface)) f42be@r) (cons (cons f42ce@lab (cons '$module f42cf@iface)) f42bd@mr) f42c9@mod** f42b9@kwd*)))))))))))))) (set! f4bc0@f3119@chi-internal-module f3119@chi-internal-module) (set! f311b@chi-body* (lambda (f42d4@e* f42d5@r f42d6@mr f42d7@lex* f42d8@rhs* f42d9@mod** f42da@kwd* f42db@exp* f42dc@rib f42dd@top?) (if (null? f42d4@e*) (values f42d4@e* f42d5@r f42d6@mr f42d7@lex* f42d8@rhs* f42d9@mod** f42da@kwd* f42db@exp*) (let ((f42e8@e (car f42d4@e*))) (call-with-values (lambda () (f2ede@syntax-type f42e8@e f42d5@r)) (lambda (f42f0@f42eb f42f1@f42ed f42f2@f42ef) (let ((f42f6@kwd f42f2@f42ef) (f42f7@value f42f1@f42ed) (f42f8@type f42f0@f42eb)) (let ((f42fc@kwd* (if (f2ebc@id? f42f6@kwd) (cons f42f6@kwd f42da@kwd*) f42da@kwd*))) (let ((f42fe@t f42f8@type)) (if (memv f42fe@t '(define)) (call-with-values (lambda () (f3045@parse-define f42e8@e)) (lambda (f4304@f4301 f4305@f4303) (let ((f4308@rhs f4305@f4303) (f4309@id f4304@f4301)) (begin (if (f2ec8@bound-id-member? f4309@id f42fc@kwd*) (f31a3@syntax-violation '#f '"cannot redefine keyword" f42e8@e) (void)) (call-with-values (lambda () (f2e4c@gen-define-label+loc f4309@id f42dc@rib)) (lambda (f4310@f430d f4311@f430f) (let ((f4314@lex f4311@f430f) (f4315@lab f4310@f430d)) (begin (f2e72@extend-rib! f42dc@rib f4309@id f4315@lab) (f311b@chi-body* (cdr f42d4@e*) (f3053@add-lexical f4315@lab f4314@lex f42d5@r) f42d6@mr (cons f4314@lex f42d7@lex*) (cons f4308@rhs f42d8@rhs*) f42d9@mod** f42fc@kwd* f42db@exp* f42dc@rib f42dd@top?))))))))) (if (memv f42fe@t '(define-syntax)) (call-with-values (lambda () (f3047@parse-define-syntax f42e8@e)) (lambda (f431c@f4319 f431d@f431b) (let ((f4320@rhs f431d@f431b) (f4321@id f431c@f4319)) (begin (if (f2ec8@bound-id-member? f4321@id f42fc@kwd*) (f31a3@syntax-violation '#f '"cannot redefine keyword" f42e8@e) (void)) (let ((f4324@lab (f2e4e@gen-define-label f4321@id f42dc@rib)) (f4325@expanded-rhs (f311d@expand-transformer f4320@rhs f42d6@mr))) (begin (f2e72@extend-rib! f42dc@rib f4321@id f4324@lab) (let ((f4328@b (f2ef4@make-eval-transformer f4325@expanded-rhs))) (f311b@chi-body* (cdr f42d4@e*) (cons (cons f4324@lab f4328@b) f42d5@r) (cons (cons f4324@lab f4328@b) f42d6@mr) f42d7@lex* f42d8@rhs* f42d9@mod** f42fc@kwd* f42db@exp* f42dc@rib f42dd@top?)))))))) (if (memv f42fe@t '(let-syntax letrec-syntax)) (let ((f432a@t f42e8@e)) (let ((f432c@ls/false (f30c3@syntax-dispatch f432a@t '(_ #(each (any any)) . each-any)))) (if (and f432c@ls/false (apply (lambda (f432e@xlhs* f432f@xrhs* f4330@xbody*) (if (not (f2ec4@valid-bound-ids? f432e@xlhs*)) (f31a3@syntax-violation '#f '"invalid identifiers" f42e8@e) (void))) f432c@ls/false)) (apply (lambda (f4334@xlhs* f4335@xrhs* f4336@xbody*) (let ((f433a@xlab* (map f2e48@gen-label f4334@xlhs*))) (let ((f433c@xrib (f2e7c@make-full-rib f4334@xlhs* f433a@xlab*))) (let ((f433e@xb* (map (lambda (f4340@x) (f2ef4@make-eval-transformer (f311d@expand-transformer (if (eq? f42f8@type 'let-syntax) f4340@x (f2ea8@add-subst f433c@xrib f4340@x)) f42d6@mr))) f4335@xrhs*))) (f311b@chi-body* (append (map (lambda (f4342@x) (f2ea8@add-subst f433c@xrib f4342@x)) f4336@xbody*) (cdr f42d4@e*)) (append (map cons f433a@xlab* f433e@xb*) f42d5@r) (append (map cons f433a@xlab* f433e@xb*) f42d6@mr) f42d7@lex* f42d8@rhs* f42d9@mod** f42fc@kwd* f42db@exp* f42dc@rib f42dd@top?))))) f432c@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f432a@t)))) (if (memv f42fe@t '(begin)) (let ((f4344@t f42e8@e)) (let ((f4346@ls/false (f30c3@syntax-dispatch f4344@t '(_ . each-any)))) (if f4346@ls/false (apply (lambda (f4348@x*) (f311b@chi-body* (append f4348@x* (cdr f42d4@e*)) f42d5@r f42d6@mr f42d7@lex* f42d8@rhs* f42d9@mod** f42fc@kwd* f42db@exp* f42dc@rib f42dd@top?)) f4346@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f4344@t)))) (if (memv f42fe@t '(global-macro global-macro!)) (f311b@chi-body* (cons (f2ea8@add-subst f42dc@rib (f30df@chi-global-macro f42f7@value f42e8@e)) (cdr f42d4@e*)) f42d5@r f42d6@mr f42d7@lex* f42d8@rhs* f42d9@mod** f42fc@kwd* f42db@exp* f42dc@rib f42dd@top?) (if (memv f42fe@t '(local-macro local-macro!)) (f311b@chi-body* (cons (f2ea8@add-subst f42dc@rib (f30dd@chi-local-macro f42f7@value f42e8@e)) (cdr f42d4@e*)) f42d5@r f42d6@mr f42d7@lex* f42d8@rhs* f42d9@mod** f42fc@kwd* f42db@exp* f42dc@rib f42dd@top?) (if (memv f42fe@t '(macro macro!)) (f311b@chi-body* (cons (f2ea8@add-subst f42dc@rib (f30db@chi-macro f42f7@value f42e8@e)) (cdr f42d4@e*)) f42d5@r f42d6@mr f42d7@lex* f42d8@rhs* f42d9@mod** f42fc@kwd* f42db@exp* f42dc@rib f42dd@top?) (if (memv f42fe@t '(module)) (call-with-values (lambda () (f3119@chi-internal-module f42e8@e f42d5@r f42d6@mr f42d7@lex* f42d8@rhs* f42d9@mod** f42fc@kwd*)) (lambda (f435a@f434b f435b@f434d f435c@f434f f435d@f4351 f435e@f4353 f435f@f4355 f4360@f4357 f4361@f4359) (let ((f436a@kwd* f4361@f4359) (f436b@mod** f4360@f4357) (f436c@mr f435f@f4355) (f436d@r f435e@f4353) (f436e@m-exp-lab* f435d@f4351) (f436f@m-exp-id* f435c@f434f) (f4370@rhs* f435b@f434d) (f4371@lex* f435a@f434b)) (begin (vector-for-each (lambda (f437a@id f437b@lab) (f2e72@extend-rib! f42dc@rib f437a@id f437b@lab)) f436f@m-exp-id* f436e@m-exp-lab*) (f311b@chi-body* (cdr f42d4@e*) f436d@r f436c@mr f4371@lex* f4370@rhs* f436b@mod** f436a@kwd* f42db@exp* f42dc@rib f42dd@top?))))) (if (memv f42fe@t '(library)) (begin (f3185@library-expander (f2ed0@stx->datum f42e8@e)) (f311b@chi-body* (cdr f42d4@e*) f42d5@r f42d6@mr f42d7@lex* f42d8@rhs* f42d9@mod** f42fc@kwd* f42db@exp* f42dc@rib f42dd@top?)) (if (memv f42fe@t '(export)) (let ((f437e@t f42e8@e)) (let ((f4380@ls/false (f30c3@syntax-dispatch f437e@t '(_ . each-any)))) (if f4380@ls/false (apply (lambda (f4382@exp-decl*) (f311b@chi-body* (cdr f42d4@e*) f42d5@r f42d6@mr f42d7@lex* f42d8@rhs* f42d9@mod** f42fc@kwd* (append f4382@exp-decl* f42db@exp*) f42dc@rib f42dd@top?)) f4380@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f437e@t)))) (if (memv f42fe@t '(import)) (let ((f4385@module-import? '#f) (f4387@module-import '#f) (f4389@library-import '#f)) (begin (set! f4385@module-import? (lambda (f43d8@e) (let ((f43da@t f43d8@e)) (let ((f43dc@ls/false (f30c3@syntax-dispatch f43da@t '(_ any)))) (if (and f43dc@ls/false (apply (lambda (f43de@id) (f2ebc@id? f43de@id)) f43dc@ls/false)) (apply (lambda (f43e0@id) '#t) f43dc@ls/false) (let ((f43e2@t f43da@t)) (let ((f43e4@ls/false (f30c3@syntax-dispatch f43e2@t '(_ . each-any)))) (if f43e4@ls/false (apply (lambda (f43e6@imp*) '#f) f43e4@ls/false) (let ((f43e8@t f43e2@t)) (let ((f43ea@ls/false (f30c3@syntax-dispatch f43e8@t '_))) (if f43ea@ls/false (apply (lambda () (f31a3@syntax-violation '#f '"malformed import form" f43d8@e)) f43ea@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f43e8@t)))))))))))) (set! f4387@module-import (lambda (f43b6@e f43b7@r) (let ((f43ba@t f43b6@e)) (let ((f43bc@ls/false (f30c3@syntax-dispatch f43ba@t '(_ any)))) (if (and f43bc@ls/false (apply (lambda (f43be@id) (f2ebc@id? f43be@id)) f43bc@ls/false)) (apply (lambda (f43c0@id) (call-with-values (lambda () (f2ede@syntax-type f43c0@id f43b7@r)) (lambda (f43c8@f43c3 f43c9@f43c5 f43ca@f43c7) (let ((f43ce@kwd f43ca@f43c7) (f43cf@value f43c9@f43c5) (f43d0@type f43c8@f43c3)) (let ((f43d4@t f43d0@type)) (if (memv f43d4@t '($module)) (let ((f43d6@iface f43cf@value)) (values (f3117@module-interface-exp-id* f43d6@iface f43c0@id) (f3111@module-interface-exp-lab-vec f43d6@iface))) (f31a3@syntax-violation '#f '"invalid import" f43b6@e))))))) f43bc@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f43ba@t)))))) (set! f4389@library-import (lambda (f439a@e) (let ((f439c@t f439a@e)) (let ((f439e@ls/false (f30c3@syntax-dispatch f439c@t '(any . each-any)))) (if f439e@ls/false (apply (lambda (f43a0@ctxt f43a1@imp*) (call-with-values (lambda () (f3125@parse-import-spec* (f31a9@syntax->datum f43a1@imp*))) (lambda (f43a8@f43a5 f43a9@f43a7) (let ((f43ac@subst-labels f43a9@f43a7) (f43ad@subst-names f43a8@f43a5)) (values (vector-map (lambda (f43b0@name) (f2e9c@datum->stx f43a0@ctxt f43b0@name)) f43ad@subst-names) f43ac@subst-labels))))) f439e@ls/false) (let ((f43b2@t f439c@t)) (let ((f43b4@ls/false (f30c3@syntax-dispatch f43b2@t '_))) (if f43b4@ls/false (apply (lambda () (f31a3@syntax-violation '#f '"invalid import form" f439a@e)) f43b4@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f43b2@t))))))))) (begin (call-with-values (lambda () (if (f4385@module-import? f42e8@e) (f4387@module-import f42e8@e f42d5@r) (f4389@library-import f42e8@e))) (lambda (f438e@f438b f438f@f438d) (let ((f4392@lab* f438f@f438d) (f4393@id* f438e@f438b)) (vector-for-each (lambda (f4396@id f4397@lab) (f2e72@extend-rib! f42dc@rib f4396@id f4397@lab)) f4393@id* f4392@lab*)))) (f311b@chi-body* (cdr f42d4@e*) f42d5@r f42d6@mr f42d7@lex* f42d8@rhs* f42d9@mod** f42fc@kwd* f42db@exp* f42dc@rib f42dd@top?)))) (if f42dd@top? (f311b@chi-body* (cdr f42d4@e*) f42d5@r f42d6@mr (cons (f2e44@gen-lexical 'dummy) f42d7@lex*) (cons (cons 'top-expr f42e8@e) f42d8@rhs*) f42d9@mod** f42fc@kwd* f42db@exp* f42dc@rib f42dd@top?) (values f42d4@e* f42d5@r f42d6@mr f42d7@lex* f42d8@rhs* f42d9@mod** f42fc@kwd* f42db@exp*)))))))))))))))))))))) (set! f4bc1@f311b@chi-body* f311b@chi-body*) (set! f311d@expand-transformer (lambda (f43ec@expr f43ed@r) (let ((f43f0@rtc (f3129@make-collector))) (let ((f43f2@expanded-rhs (let ((f43fc@f43f5 f312b@inv-collector) (f43fd@f43f7 f312d@vis-collector) (f43fe@f43f9 f43f0@rtc) (f43ff@f43fb (lambda (f4404@x) (values)))) (let ((f4406@swap (lambda () (begin (let ((f4408@t (f43fc@f43f5))) (begin (f43fc@f43f5 f43fe@f43f9) (set! f43fe@f43f9 f4408@t))) (let ((f440a@t (f43fd@f43f7))) (begin (f43fd@f43f7 f43ff@f43fb) (set! f43ff@f43fb f440a@t))))))) (dynamic-wind f4406@swap (lambda () (f30e5@chi-expr f43ec@expr f43ed@r f43ed@r)) f4406@swap))))) (begin (for-each (let ((f440c@mark-visit (f312d@vis-collector))) (lambda (f440e@x) (begin (f2cd2@f2b20@invoke-library f440e@x) (f440c@mark-visit f440e@x)))) (f43f0@rtc)) f43f2@expanded-rhs))))) (set! f4bc2@f311d@expand-transformer f311d@expand-transformer) (set! f311f@parse-exports (lambda (f4410@exp*) (let f4418@f ((f4412@exp* f4410@exp*) (f4413@int* '()) (f4414@ext* '())) (if (null? f4412@exp*) (begin (if (not (f2ec4@valid-bound-ids? f4414@ext*)) (f31a3@syntax-violation 'export '"invalid exports" (f30f9@find-dups f4414@ext*)) (void)) (values (map f31a9@syntax->datum f4414@ext*) f4413@int*)) (let ((f441a@t (car f4412@exp*))) (let ((f441c@ls/false (f30c3@syntax-dispatch f441a@t '(any . #(each (any any)))))) (if f441c@ls/false (apply (lambda (f441e@rename f441f@i* f4420@e*) (begin (if (not (and (eq? (f31a9@syntax->datum f441e@rename) 'rename) (for-all f2ebc@id? f441f@i*) (for-all f2ebc@id? f4420@e*))) (f31a3@syntax-violation 'export '"invalid export specifier" (car f4412@exp*)) (void)) (f4418@f (cdr f4412@exp*) (append f441f@i* f4413@int*) (append f4420@e* f4414@ext*)))) f441c@ls/false) (let ((f4424@t f441a@t)) (let ((f4426@ls/false (f30c3@syntax-dispatch f4424@t 'any))) (if f4426@ls/false (apply (lambda (f4428@ie) (begin (if (not (f2ebc@id? f4428@ie)) (f31a3@syntax-violation 'export '"invalid export" f4428@ie) (void)) (f4418@f (cdr f4412@exp*) (cons f4428@ie f4413@int*) (cons f4428@ie f4414@ext*)))) f4426@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f4424@t))))))))))) (set! f4bc3@f311f@parse-exports f311f@parse-exports) (set! f3121@parse-library-name (lambda (f442a@spec) (let ((f442d@parse '#f)) (begin (set! f442d@parse (lambda (f443a@x) (let ((f443c@t f443a@x)) (let ((f443e@ls/false (f30c3@syntax-dispatch f443c@t '(each-any)))) (if (and f443e@ls/false (apply (lambda (f4440@v*) (for-all (lambda (f4442@x) (let ((f4444@x (f31a9@syntax->datum f4442@x))) (and (integer? f4444@x) (exact? f4444@x)))) f4440@v*)) f443e@ls/false)) (apply (lambda (f4446@v*) (values '() (map f31a9@syntax->datum f4446@v*))) f443e@ls/false) (let ((f4448@t f443c@t)) (let ((f444a@ls/false (f30c3@syntax-dispatch f4448@t '(any . any)))) (if (and f444a@ls/false (apply (lambda (f444c@x f444d@rest) (symbol? (f31a9@syntax->datum f444c@x))) f444a@ls/false)) (apply (lambda (f4450@x f4451@rest) (call-with-values (lambda () (f442d@parse f4451@rest)) (lambda (f4458@f4455 f4459@f4457) (let ((f445c@v* f4459@f4457) (f445d@x* f4458@f4455)) (values (cons (f31a9@syntax->datum f4450@x) f445d@x*) f445c@v*))))) f444a@ls/false) (let ((f4460@t f4448@t)) (let ((f4462@ls/false (f30c3@syntax-dispatch f4460@t '()))) (if f4462@ls/false (apply (lambda () (values '() '())) f4462@ls/false) (let ((f4464@t f4460@t)) (let ((f4466@ls/false (f30c3@syntax-dispatch f4464@t '_))) (if f4466@ls/false (apply (lambda () (f31a3@syntax-violation '#f '"invalid library name" f442a@spec)) f4466@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f4464@t))))))))))))))) (call-with-values (lambda () (f442d@parse f442a@spec)) (lambda (f4432@f442f f4433@f4431) (let ((f4436@ver* f4433@f4431) (f4437@name* f4432@f442f)) (begin (if (null? f4437@name*) (f31a3@syntax-violation '#f '"empty library name" f442a@spec) (void)) (values f4437@name* f4436@ver*))))))))) (set! f4bc4@f3121@parse-library-name f3121@parse-library-name) (set! f3123@parse-library (lambda (f4468@e) (let ((f446a@t f4468@e)) (let ((f446c@ls/false (f30c3@syntax-dispatch f446a@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and f446c@ls/false (apply (lambda (f446e@library f446f@name* f4470@export f4471@exp* f4472@import f4473@imp* f4474@b*) (and (eq? (f31a9@syntax->datum f4470@export) 'export) (eq? (f31a9@syntax->datum f4472@import) 'import) (eq? (f31a9@syntax->datum f446e@library) 'library))) f446c@ls/false)) (apply (lambda (f447c@library f447d@name* f447e@export f447f@exp* f4480@import f4481@imp* f4482@b*) (values f447d@name* f447f@exp* f4481@imp* f4482@b*)) f446c@ls/false) (let ((f448a@t f446a@t)) (let ((f448c@ls/false (f30c3@syntax-dispatch f448a@t '_))) (if f448c@ls/false (apply (lambda () (f31a3@syntax-violation '#f '"malformed library" f4468@e)) f448c@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f448a@t))))))))) (set! f4bc5@f3123@parse-library f3123@parse-library) (set! f3125@parse-import-spec* (let ((f448f@idsyn? '#f) (f4491@dup-error '#f) (f4493@merge-substs '#f) (f4495@exclude* '#f) (f4497@find* '#f) (f4499@rem* '#f) (f449b@remove-dups '#f) (f449d@parse-library-name '#f) (f449f@import-library '#f) (f44a1@get-import '#f) (f44a3@add-imports! '#f)) (begin (set! f448f@idsyn? (lambda (f4698@x) (symbol? (f31a9@syntax->datum f4698@x)))) (set! f4491@dup-error (lambda (f4696@name) (f31a3@syntax-violation 'import '"two imports with different bindings" f4696@name))) (set! f4493@merge-substs (lambda (f4684@s f4685@subst) (let ((f4689@insert-to-subst '#f)) (begin (set! f4689@insert-to-subst (lambda (f468a@a f468b@subst) (let ((f468e@name (car f468a@a)) (f468f@label (cdr f468a@a))) (let ((f4692@t (assq f468e@name f468b@subst))) (if f4692@t ((lambda (f4694@x) (if (eq? (cdr f4694@x) f468f@label) f468b@subst (f4491@dup-error f468e@name))) f4692@t) (cons f468a@a f468b@subst)))))) (if (null? f4684@s) f4685@subst (f4689@insert-to-subst (car f4684@s) (f4493@merge-substs (cdr f4684@s) f4685@subst))))))) (set! f4495@exclude* (lambda (f4654@sym* f4655@subst) (let ((f4659@exclude '#f)) (begin (set! f4659@exclude (lambda (f4672@sym f4673@subst) (if (null? f4673@subst) (f31a3@syntax-violation 'import '"cannot rename unbound identifier" f4672@sym) (if (eq? f4672@sym (caar f4673@subst)) (values (cdar f4673@subst) (cdr f4673@subst)) (let ((f4676@a (car f4673@subst))) (call-with-values (lambda () (f4659@exclude f4672@sym (cdr f4673@subst))) (lambda (f467c@f4679 f467d@f467b) (let ((f4680@subst f467d@f467b) (f4681@old f467c@f4679)) (values f4681@old (cons f4676@a f4680@subst)))))))))) (if (null? f4654@sym*) (values '() f4655@subst) (call-with-values (lambda () (f4659@exclude (car f4654@sym*) f4655@subst)) (lambda (f465e@f465b f465f@f465d) (let ((f4662@subst f465f@f465d) (f4663@old f465e@f465b)) (call-with-values (lambda () (f4495@exclude* (cdr f4654@sym*) f4662@subst)) (lambda (f466a@f4667 f466b@f4669) (let ((f466e@subst f466b@f4669) (f466f@old* f466a@f4667)) (values (cons f4663@old f466f@old*) f466e@subst)))))))))))) (set! f4497@find* (lambda (f464c@sym* f464d@subst) (map (lambda (f4650@x) (let ((f4652@t (assq f4650@x f464d@subst))) (if f4652@t (cdr f4652@t) (f31a3@syntax-violation 'import '"cannot find identifier" f4650@x)))) f464c@sym*))) (set! f4499@rem* (lambda (f4644@sym* f4645@subst) (let f464a@f ((f4648@subst f4645@subst)) (if (null? f4648@subst) '() (if (memq (caar f4648@subst) f4644@sym*) (f464a@f (cdr f4648@subst)) (cons (car f4648@subst) (f464a@f (cdr f4648@subst)))))))) (set! f449b@remove-dups (lambda (f4642@ls) (if (null? f4642@ls) '() (if (memq (car f4642@ls) (cdr f4642@ls)) (f449b@remove-dups (cdr f4642@ls)) (cons (car f4642@ls) (f449b@remove-dups (cdr f4642@ls))))))) (set! f449d@parse-library-name (lambda (f455a@spec) (let ((f455d@subversion? '#f) (f455f@subversion-pred '#f) (f4561@version-pred '#f)) (begin (set! f455d@subversion? (lambda (f463e@x) (let ((f4640@x (f31a9@syntax->datum f463e@x))) (and (integer? f4640@x) (exact? f4640@x) (>= f4640@x '0))))) (set! f455f@subversion-pred (lambda (f45de@x*) (let ((f45e0@t f45de@x*)) (let ((f45e2@ls/false (f30c3@syntax-dispatch f45e0@t 'any))) (if (and f45e2@ls/false (apply (lambda (f45e4@n) (f455d@subversion? f45e4@n)) f45e2@ls/false)) (apply (lambda (f45e6@n) (lambda (f45e8@x) (= f45e8@x (f31a9@syntax->datum f45e6@n)))) f45e2@ls/false) (let ((f45ea@t f45e0@t)) (let ((f45ec@ls/false (f30c3@syntax-dispatch f45ea@t '(any . each-any)))) (if (and f45ec@ls/false (apply (lambda (f45ee@p? f45ef@sub*) (eq? (f31a9@syntax->datum f45ee@p?) 'and)) f45ec@ls/false)) (apply (lambda (f45f2@p? f45f3@sub*) (let ((f45f6@p* (map f455f@subversion-pred f45f3@sub*))) (lambda (f45f8@x) (for-all (lambda (f45fa@p) (f45fa@p f45f8@x)) f45f6@p*)))) f45ec@ls/false) (let ((f45fc@t f45ea@t)) (let ((f45fe@ls/false (f30c3@syntax-dispatch f45fc@t '(any . each-any)))) (if (and f45fe@ls/false (apply (lambda (f4600@p? f4601@sub*) (eq? (f31a9@syntax->datum f4600@p?) 'or)) f45fe@ls/false)) (apply (lambda (f4604@p? f4605@sub*) (let ((f4608@p* (map f455f@subversion-pred f4605@sub*))) (lambda (f460a@x) (exists (lambda (f460c@p) (f460c@p f460a@x)) f4608@p*)))) f45fe@ls/false) (let ((f460e@t f45fc@t)) (let ((f4610@ls/false (f30c3@syntax-dispatch f460e@t '(any any)))) (if (and f4610@ls/false (apply (lambda (f4612@p? f4613@sub) (eq? (f31a9@syntax->datum f4612@p?) 'not)) f4610@ls/false)) (apply (lambda (f4616@p? f4617@sub) (let ((f461a@p (f455f@subversion-pred f4617@sub))) (lambda (f461c@x) (not (f461a@p f461c@x))))) f4610@ls/false) (let ((f461e@t f460e@t)) (let ((f4620@ls/false (f30c3@syntax-dispatch f461e@t '(any any)))) (if (and f4620@ls/false (apply (lambda (f4622@p? f4623@n) (and (eq? (f31a9@syntax->datum f4622@p?) '<=) (f455d@subversion? f4623@n))) f4620@ls/false)) (apply (lambda (f4626@p? f4627@n) (lambda (f462a@x) (<= f462a@x (f31a9@syntax->datum f4627@n)))) f4620@ls/false) (let ((f462c@t f461e@t)) (let ((f462e@ls/false (f30c3@syntax-dispatch f462c@t '(any any)))) (if (and f462e@ls/false (apply (lambda (f4630@p? f4631@n) (and (eq? (f31a9@syntax->datum f4630@p?) '>=) (f455d@subversion? f4631@n))) f462e@ls/false)) (apply (lambda (f4634@p? f4635@n) (lambda (f4638@x) (>= f4638@x (f31a9@syntax->datum f4635@n)))) f462e@ls/false) (let ((f463a@t f462c@t)) (let ((f463c@ls/false (f30c3@syntax-dispatch f463a@t '_))) (if f463c@ls/false (apply (lambda () (f31a3@syntax-violation 'import '"invalid sub-version spec" f455a@spec f45de@x*)) f463c@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f463a@t)))))))))))))))))))))))) (set! f4561@version-pred (lambda (f458e@x*) (let ((f4590@t f458e@x*)) (let ((f4592@ls/false (f30c3@syntax-dispatch f4590@t '()))) (if f4592@ls/false (apply (lambda () (lambda (f4594@x) '#t)) f4592@ls/false) (let ((f4596@t f4590@t)) (let ((f4598@ls/false (f30c3@syntax-dispatch f4596@t '(any . each-any)))) (if (and f4598@ls/false (apply (lambda (f459a@c f459b@ver*) (eq? (f31a9@syntax->datum f459a@c) 'and)) f4598@ls/false)) (apply (lambda (f459e@c f459f@ver*) (let ((f45a2@p* (map f4561@version-pred f459f@ver*))) (lambda (f45a4@x) (for-all (lambda (f45a6@p) (f45a6@p f45a4@x)) f45a2@p*)))) f4598@ls/false) (let ((f45a8@t f4596@t)) (let ((f45aa@ls/false (f30c3@syntax-dispatch f45a8@t '(any . each-any)))) (if (and f45aa@ls/false (apply (lambda (f45ac@c f45ad@ver*) (eq? (f31a9@syntax->datum f45ac@c) 'or)) f45aa@ls/false)) (apply (lambda (f45b0@c f45b1@ver*) (let ((f45b4@p* (map f4561@version-pred f45b1@ver*))) (lambda (f45b6@x) (exists (lambda (f45b8@p) (f45b8@p f45b6@x)) f45b4@p*)))) f45aa@ls/false) (let ((f45ba@t f45a8@t)) (let ((f45bc@ls/false (f30c3@syntax-dispatch f45ba@t '(any any)))) (if (and f45bc@ls/false (apply (lambda (f45be@c f45bf@ver) (eq? (f31a9@syntax->datum f45be@c) 'not)) f45bc@ls/false)) (apply (lambda (f45c2@c f45c3@ver) (let ((f45c6@p (f4561@version-pred f45c3@ver))) (lambda (f45c8@x) (not (f45c6@p f45c8@x))))) f45bc@ls/false) (let ((f45ca@t f45ba@t)) (let ((f45cc@ls/false (f30c3@syntax-dispatch f45ca@t 'each-any))) (if f45cc@ls/false (apply (lambda (f45ce@sub*) (let ((f45d0@p* (map f455f@subversion-pred f45ce@sub*))) (lambda (f45d2@x) (let f45d8@f ((f45d4@p* f45d0@p*) (f45d5@x f45d2@x)) (if (null? f45d4@p*) '#t (if (null? f45d5@x) '#f (and ((car f45d4@p*) (car f45d5@x)) (f45d8@f (cdr f45d4@p*) (cdr f45d5@x))))))))) f45cc@ls/false) (let ((f45da@t f45ca@t)) (let ((f45dc@ls/false (f30c3@syntax-dispatch f45da@t '_))) (if f45dc@ls/false (apply (lambda () (f31a3@syntax-violation 'import '"invalid version spec" f455a@spec f458e@x*)) f45dc@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f45da@t))))))))))))))))))))) (let f4564@f ((f4562@x f455a@spec)) (let ((f4566@t f4562@x)) (let ((f4568@ls/false (f30c3@syntax-dispatch f4566@t '(each-any)))) (if f4568@ls/false (apply (lambda (f456a@version-spec*) (values '() (f4561@version-pred f456a@version-spec*))) f4568@ls/false) (let ((f456c@t f4566@t)) (let ((f456e@ls/false (f30c3@syntax-dispatch f456c@t '(any . any)))) (if (and f456e@ls/false (apply (lambda (f4570@x f4571@x*) (f448f@idsyn? f4570@x)) f456e@ls/false)) (apply (lambda (f4574@x f4575@x*) (call-with-values (lambda () (f4564@f f4575@x*)) (lambda (f457c@f4579 f457d@f457b) (let ((f4580@pred f457d@f457b) (f4581@name f457c@f4579)) (values (cons (f31a9@syntax->datum f4574@x) f4581@name) f4580@pred))))) f456e@ls/false) (let ((f4584@t f456c@t)) (let ((f4586@ls/false (f30c3@syntax-dispatch f4584@t '()))) (if f4586@ls/false (apply (lambda () (values '() (lambda (f4588@x) '#t))) f4586@ls/false) (let ((f458a@t f4584@t)) (let ((f458c@ls/false (f30c3@syntax-dispatch f458a@t '_))) (if f458c@ls/false (apply (lambda () (f31a3@syntax-violation '#f '"invalid import spec" f455a@spec)) f458c@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f458a@t)))))))))))))))))) (set! f449f@import-library (lambda (f454a@spec*) (call-with-values (lambda () (f449d@parse-library-name f454a@spec*)) (lambda (f4550@f454d f4551@f454f) (let ((f4554@pred f4551@f454f) (f4555@name f4550@f454d)) (begin (if (null? f4555@name) (f31a3@syntax-violation 'import '"empty library name" f454a@spec*) (void)) (let ((f4558@lib (f2ccb@f2b12@find-library-by-name f4555@name))) (begin (if (not f4558@lib) (f31a3@syntax-violation 'import '"cannot find library with required name" f4555@name) (void)) (if (not (f4554@pred (f2ca5@f2ac6@library-version f4558@lib))) (f31a3@syntax-violation 'import '"library does not satisfy version specification" f454a@spec* f4558@lib) (void)) ((f312f@imp-collector) f4558@lib) (f2cad@f2ad6@library-subst f4558@lib))))))))) (set! f44a1@get-import (lambda (f44bc@spec) (let ((f44be@t f44bc@spec)) (let ((f44c0@ls/false (f30c3@syntax-dispatch f44be@t '(any . each-any)))) (if (and f44c0@ls/false (apply (lambda (f44c2@x f44c3@x*) (not (memq (f31a9@syntax->datum f44c2@x) '(for rename except only prefix library)))) f44c0@ls/false)) (apply (lambda (f44c6@x f44c7@x*) (f449f@import-library (cons f44c6@x f44c7@x*))) f44c0@ls/false) (let ((f44ca@t f44be@t)) (let ((f44cc@ls/false (f30c3@syntax-dispatch f44ca@t '(any any . #(each (any any)))))) (if (and f44cc@ls/false (apply (lambda (f44ce@rename f44cf@isp f44d0@old* f44d1@new*) (and (eq? (f31a9@syntax->datum f44ce@rename) 'rename) (for-all f448f@idsyn? f44d0@old*) (for-all f448f@idsyn? f44d1@new*))) f44cc@ls/false)) (apply (lambda (f44d6@rename f44d7@isp f44d8@old* f44d9@new*) (let ((f44de@subst (f44a1@get-import f44d7@isp)) (f44df@old* (map f31a9@syntax->datum f44d8@old*)) (f44e0@new* (map f31a9@syntax->datum f44d9@new*))) (let ((f44e4@old-label* (f4497@find* f44df@old* f44de@subst))) (let ((f44e6@subst (f4499@rem* f44df@old* f44de@subst))) (f4493@merge-substs (map cons f44e0@new* f44e4@old-label*) f44e6@subst))))) f44cc@ls/false) (let ((f44e8@t f44ca@t)) (let ((f44ea@ls/false (f30c3@syntax-dispatch f44e8@t '(any any . each-any)))) (if (and f44ea@ls/false (apply (lambda (f44ec@except f44ed@isp f44ee@sym*) (and (eq? (f31a9@syntax->datum f44ec@except) 'except) (for-all f448f@idsyn? f44ee@sym*))) f44ea@ls/false)) (apply (lambda (f44f2@except f44f3@isp f44f4@sym*) (let ((f44f8@subst (f44a1@get-import f44f3@isp))) (f4499@rem* (map f31a9@syntax->datum f44f4@sym*) f44f8@subst))) f44ea@ls/false) (let ((f44fa@t f44e8@t)) (let ((f44fc@ls/false (f30c3@syntax-dispatch f44fa@t '(any any . each-any)))) (if (and f44fc@ls/false (apply (lambda (f44fe@only f44ff@isp f4500@sym*) (and (eq? (f31a9@syntax->datum f44fe@only) 'only) (for-all f448f@idsyn? f4500@sym*))) f44fc@ls/false)) (apply (lambda (f4504@only f4505@isp f4506@sym*) (let ((f450a@subst (f44a1@get-import f4505@isp)) (f450b@sym* (map f31a9@syntax->datum f4506@sym*))) (let ((f450e@sym* (f449b@remove-dups f450b@sym*))) (let ((f4510@lab* (f4497@find* f450e@sym* f450a@subst))) (map cons f450e@sym* f4510@lab*))))) f44fc@ls/false) (let ((f4512@t f44fa@t)) (let ((f4514@ls/false (f30c3@syntax-dispatch f4512@t '(any any any)))) (if (and f4514@ls/false (apply (lambda (f4516@prefix f4517@isp f4518@p) (and (eq? (f31a9@syntax->datum f4516@prefix) 'prefix) (f448f@idsyn? f4518@p))) f4514@ls/false)) (apply (lambda (f451c@prefix f451d@isp f451e@p) (let ((f4522@subst (f44a1@get-import f451d@isp)) (f4523@prefix (symbol->string (f31a9@syntax->datum f451e@p)))) (map (lambda (f4526@x) (cons (string->symbol (string-append f4523@prefix (symbol->string (car f4526@x)))) (cdr f4526@x))) f4522@subst))) f4514@ls/false) (let ((f4528@t f4512@t)) (let ((f452a@ls/false (f30c3@syntax-dispatch f4528@t '(any each-any)))) (if (and f452a@ls/false (apply (lambda (f452c@library f452d@spec*) (eq? (f31a9@syntax->datum f452c@library) 'library)) f452a@ls/false)) (apply (lambda (f4530@library f4531@spec*) (f449f@import-library f4531@spec*)) f452a@ls/false) (let ((f4534@t f4528@t)) (let ((f4536@ls/false (f30c3@syntax-dispatch f4534@t '(any any . any)))) (if (and f4536@ls/false (apply (lambda (f4538@for f4539@isp f453a@rest) (eq? (f31a9@syntax->datum f4538@for) 'for)) f4536@ls/false)) (apply (lambda (f453e@for f453f@isp f4540@rest) (f44a1@get-import f453f@isp)) f4536@ls/false) (let ((f4544@t f4534@t)) (let ((f4546@ls/false (f30c3@syntax-dispatch f4544@t 'any))) (if f4546@ls/false (apply (lambda (f4548@spec) (f31a3@syntax-violation 'import '"invalid import spec" f4548@spec)) f4546@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f4544@t))))))))))))))))))))))))))) (set! f44a3@add-imports! (lambda (f44ac@imp f44ad@h) (let ((f44b0@subst (f44a1@get-import f44ac@imp))) (for-each (lambda (f44b2@x) (let ((f44b4@name (car f44b2@x)) (f44b5@label (cdr f44b2@x))) (let ((f44b8@t (hashtable-ref f44ad@h f44b4@name '#f))) (if f44b8@t ((lambda (f44ba@l) (if (not (eq? f44ba@l f44b5@label)) (f4491@dup-error f44b4@name) (void))) f44b8@t) (hashtable-set! f44ad@h f44b4@name f44b5@label))))) f44b0@subst)))) (lambda (f44a4@imp*) (let f44aa@f ((f44a6@imp* f44a4@imp*) (f44a7@h (make-eq-hashtable))) (if (null? f44a6@imp*) (hashtable-entries f44a7@h) (begin (f44a3@add-imports! (car f44a6@imp*) f44a7@h) (f44aa@f (cdr f44a6@imp*) f44a7@h)))))))) (set! f4bc6@f3125@parse-import-spec* f3125@parse-import-spec*) (set! f3127@make-top-rib (lambda (f469a@names f469b@labels) (let ((f469e@rib (f2e70@make-empty-rib))) (begin (vector-for-each (lambda (f46a0@name f46a1@label) (begin (if (not (symbol? f46a0@name)) (error 'make-top-rib '"BUG: not a symbol" f46a0@name) (void)) (f2e74@extend-rib/nc! f469e@rib (make-simple-struct 'stx '5 (list f46a0@name f2e40@top-mark* '() '())) f46a1@label))) f469a@names f469b@labels) f469e@rib)))) (set! f4bc7@f3127@make-top-rib f3127@make-top-rib) (set! f3129@make-collector (lambda () (let ((f46a4@ls '())) (lambda f46a8 (let ((f46a9 (length f46a8))) (if (= f46a9 '0) (apply (lambda () f46a4@ls) f46a8) (if (= f46a9 '1) (apply (lambda (f46a6@x) (set! f46a4@ls (f2e39@set-cons f46a6@x f46a4@ls))) f46a8) (error 'apply '"invalid arg count")))))))) (set! f4bc8@f3129@make-collector f3129@make-collector) (set! f312b@inv-collector (f2a06@f28e5@make-parameter (lambda f46aa@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (f46ac@x) (begin (if (not (procedure? f46ac@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" f46ac@x) (void)) f46ac@x)))) (set! f4bc9@f312b@inv-collector f312b@inv-collector) (set! f312d@vis-collector (f2a06@f28e5@make-parameter (lambda f46ae@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (f46b0@x) (begin (if (not (procedure? f46b0@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" f46b0@x) (void)) f46b0@x)))) (set! f4bca@f312d@vis-collector f312d@vis-collector) (set! f312f@imp-collector (f2a06@f28e5@make-parameter (lambda f46b2@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (f46b4@x) (begin (if (not (procedure? f46b4@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" f46b4@x) (void)) f46b4@x)))) (set! f4bcb@f312f@imp-collector f312f@imp-collector) (set! f3131@chi-library-internal (lambda (f46b6@e* f46b7@rib f46b8@top?) (call-with-values (lambda () (f311b@chi-body* f46b6@e* '() '() '() '() '() '() '() f46b7@rib f46b8@top?)) (lambda (f46cc@f46bd f46cd@f46bf f46ce@f46c1 f46cf@f46c3 f46d0@f46c5 f46d1@f46c7 f46d2@f46c9 f46d3@f46cb) (let ((f46dc@exp* f46d3@f46cb) (f46dd@_kwd* f46d2@f46c9) (f46de@mod** f46d1@f46c7) (f46df@rhs* f46d0@f46c5) (f46e0@lex* f46cf@f46c3) (f46e1@mr f46ce@f46c1) (f46e2@r f46cd@f46bf) (f46e3@e* f46cc@f46bd)) (values (append (apply append (reverse f46de@mod**)) f46e3@e*) f46e2@r f46e1@mr (reverse f46e0@lex*) (reverse f46df@rhs*) f46dc@exp*)))))) (set! f4bcc@f3131@chi-library-internal f3131@chi-library-internal) (set! f3133@chi-interaction-expr (lambda (f46ec@e f46ed@rib f46ee@r) (call-with-values (lambda () (f311b@chi-body* (list f46ec@e) f46ee@r f46ee@r '() '() '() '() '() f46ed@rib '#t)) (lambda (f4702@f46f3 f4703@f46f5 f4704@f46f7 f4705@f46f9 f4706@f46fb f4707@f46fd f4708@f46ff f4709@f4701) (let ((f4712@_exp* f4709@f4701) (f4713@_kwd* f4708@f46ff) (f4714@mod** f4707@f46fd) (f4715@rhs* f4706@f46fb) (f4716@lex* f4705@f46f9) (f4717@mr f4704@f46f7) (f4718@r f4703@f46f5) (f4719@e* f4702@f46f3)) (let ((f4722@e* (f30f3@expand-interaction-rhs*/init* (reverse f4716@lex*) (reverse f4715@rhs*) (append (apply append (reverse f4714@mod**)) f4719@e*) f4718@r f4717@mr))) (let ((f4724@e (if (null? f4722@e*) (f2e22@f2d7d@build-void) (if (null? (cdr f4722@e*)) (car f4722@e*) (f2e21@f2d7b@build-sequence '#f f4722@e*))))) (values f4724@e f4718@r)))))))) (set! f4bcd@f3133@chi-interaction-expr f3133@chi-interaction-expr) (set! f3135@library-body-expander (lambda (f4726@name f4727@main-exp* f4728@imp* f4729@b* f472a@top?) (let ((f4731@itc '#f)) (begin (set! f4731@itc (f3129@make-collector)) (let ((f473a@f4733 f312f@imp-collector) (f473b@f4735 f31b3@top-level-context) (f473c@f4737 f4731@itc) (f473d@f4739 '#f)) (let ((f4742@swap (lambda () (begin (let ((f4744@t (f473a@f4733))) (begin (f473a@f4733 f473c@f4737) (set! f473c@f4737 f4744@t))) (let ((f4746@t (f473b@f4735))) (begin (f473b@f4735 f473d@f4739) (set! f473d@f4739 f4746@t))))))) (dynamic-wind f4742@swap (lambda () (call-with-values (lambda () (f3125@parse-import-spec* f4728@imp*)) (lambda (f474c@f4749 f474d@f474b) (let ((f4750@subst-labels f474d@f474b) (f4751@subst-names f474c@f4749)) (let ((f4754@rib (f3127@make-top-rib f4751@subst-names f4750@subst-labels))) (let ((f4757@wrap '#f)) (begin (set! f4757@wrap (lambda (f47d2@x) (make-simple-struct 'stx '5 (list f47d2@x f2e40@top-mark* (list f4754@rib) '())))) (let ((f4758@b* (map f4757@wrap f4729@b*)) (f4759@main-exp* (map f4757@wrap f4727@main-exp*)) (f475a@rtc (f3129@make-collector)) (f475b@vtc (f3129@make-collector))) (let ((f4768@f4761 f312b@inv-collector) (f4769@f4763 f312d@vis-collector) (f476a@f4765 f475a@rtc) (f476b@f4767 f475b@vtc)) (let ((f4770@swap (lambda () (begin (let ((f4772@t (f4768@f4761))) (begin (f4768@f4761 f476a@f4765) (set! f476a@f4765 f4772@t))) (let ((f4774@t (f4769@f4763))) (begin (f4769@f4763 f476b@f4767) (set! f476b@f4767 f4774@t))))))) (dynamic-wind f4770@swap (lambda () (call-with-values (lambda () (f3131@chi-library-internal f4758@b* f4754@rib f472a@top?)) (lambda (f4782@f4777 f4783@f4779 f4784@f477b f4785@f477d f4786@f477f f4787@f4781) (let ((f478e@internal-exp* f4787@f4781) (f478f@rhs* f4786@f477f) (f4790@lex* f4785@f477d) (f4791@mr f4784@f477b) (f4792@r f4783@f4779) (f4793@init* f4782@f4777)) (call-with-values (lambda () (f311f@parse-exports (append f4759@main-exp* f478e@internal-exp*))) (lambda (f479e@f479b f479f@f479d) (let ((f47a2@exp-id* f479f@f479d) (f47a3@exp-name* f479e@f479b)) (begin (f2e78@seal-rib! f4754@rib) (let ((f47a6@init* (f30e1@chi-expr* f4793@init* f4792@r f4791@mr))) (let ((f47a8@rhs* (f30f5@chi-rhs* f478f@rhs* f4792@r f4791@mr))) (begin (f2e7a@unseal-rib! f4754@rib) (let ((f47aa@loc* (map f2e46@gen-global f4790@lex*)) (f47ab@export-subst (f318d@make-export-subst f47a3@exp-name* f47a2@exp-id*))) (let ((f47af@errstr '#f)) (begin (set! f47af@errstr '"attempt to export mutated variable") (call-with-values (lambda () (f318f@make-export-env/macros f4790@lex* f47aa@loc* f4792@r)) (lambda (f47b6@f47b1 f47b7@f47b3 f47b8@f47b5) (let ((f47bc@macro* f47b8@f47b5) (f47bd@global* f47b7@f47b3) (f47be@export-env f47b6@f47b1)) (begin (for-each (lambda (f47c2@s) (let ((f47c4@name (car f47c2@s)) (f47c5@label (cdr f47c2@s))) (let ((f47c8@p (assq f47c5@label f47be@export-env))) (if f47c8@p (let ((f47ca@b (cdr f47c8@p))) (let ((f47cc@type (car f47ca@b))) (if (eq? f47cc@type 'mutable) (f31a3@syntax-violation 'export f47af@errstr f47c4@name) (void)))) (void))))) f47ab@export-subst) (let ((f47ce@invoke-body (f2e27@f2d87@build-library-letrec* '#f f4726@name f4790@lex* f47aa@loc* f47a8@rhs* (if (null? f47a6@init*) (f2e22@f2d7d@build-void) (f2e21@f2d7b@build-sequence '#f f47a6@init*)))) (f47cf@invoke-definitions (map f2e1e@f2cda@build-global-define (map cdr f47bd@global*)))) (values (f4731@itc) (f475a@rtc) (f475b@vtc) (f2e21@f2d7b@build-sequence '#f (append f47cf@invoke-definitions (list f47ce@invoke-body))) f47bc@macro* f47ab@export-subst f47be@export-env)))))))))))))))))))) f4770@swap))))))))))) f4742@swap))))))) (set! f4bce@f3135@library-body-expander f3135@library-body-expander) (set! f3137@core-library-expander (lambda (f47d4@e f47d5@verify-name) (call-with-values (lambda () (f3123@parse-library f47d4@e)) (lambda (f47e0@f47d9 f47e1@f47db f47e2@f47dd f47e3@f47df) (let ((f47e8@b* f47e3@f47df) (f47e9@imp* f47e2@f47dd) (f47ea@exp* f47e1@f47db) (f47eb@name* f47e0@f47d9)) (call-with-values (lambda () (f3121@parse-library-name f47eb@name*)) (lambda (f47f4@f47f1 f47f5@f47f3) (let ((f47f8@ver f47f5@f47f3) (f47f9@name f47f4@f47f1)) (begin (f47d5@verify-name f47f9@name) (call-with-values (lambda () (f3135@library-body-expander f47f9@name f47ea@exp* f47e9@imp* f47e8@b* '#f)) (lambda (f480a@f47fd f480b@f47ff f480c@f4801 f480d@f4803 f480e@f4805 f480f@f4807 f4810@f4809) (let ((f4818@export-env f4810@f4809) (f4819@export-subst f480f@f4807) (f481a@visit-code f480e@f4805) (f481b@invoke-code f480d@f4803) (f481c@visit-req* f480c@f4801) (f481d@invoke-req* f480b@f47ff) (f481e@imp* f480a@f47fd)) (values f47f9@name f47f8@ver f481e@imp* f481d@invoke-req* f481c@visit-req* f481b@invoke-code f481a@visit-code f4819@export-subst f4818@export-env))))))))))))) (set! f4bcf@f3137@core-library-expander f3137@core-library-expander) (set! f3139@parse-top-level-program (lambda (f4826@e*) (let ((f4828@t f4826@e*)) (let ((f482a@ls/false (f30c3@syntax-dispatch f4828@t '((any . each-any) . each-any)))) (if (and f482a@ls/false (apply (lambda (f482c@import f482d@imp* f482e@b*) (eq? (f31a9@syntax->datum f482c@import) 'import)) f482a@ls/false)) (apply (lambda (f4832@import f4833@imp* f4834@b*) (values f4833@imp* f4834@b*)) f482a@ls/false) (let ((f4838@t f4828@t)) (let ((f483a@ls/false (f30c3@syntax-dispatch f4838@t '((any . any) . any)))) (if (and f483a@ls/false (apply (lambda (f483c@import f483d@x f483e@y) (eq? (f31a9@syntax->datum f483c@import) 'import)) f483a@ls/false)) (apply (lambda (f4842@import f4843@x f4844@y) (f31a3@syntax-violation 'expander '"invalid syntax of top-level program" (f2eb6@syntax-car f4826@e*))) f483a@ls/false) (let ((f4848@t f4838@t)) (let ((f484a@ls/false (f30c3@syntax-dispatch f4848@t '_))) (if f484a@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) f484a@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f4848@t)))))))))))) (set! f4bd0@f3139@parse-top-level-program f3139@parse-top-level-program) (set! f313b@top-level-expander (lambda (f484c@e*) (call-with-values (lambda () (f3139@parse-top-level-program f484c@e*)) (lambda (f4852@f484f f4853@f4851) (let ((f4856@b* f4853@f4851) (f4857@imp* f4852@f484f)) (call-with-values (lambda () (f3135@library-body-expander '() '() f4857@imp* f4856@b* '#t)) (lambda (f4868@f485b f4869@f485d f486a@f485f f486b@f4861 f486c@f4863 f486d@f4865 f486e@f4867) (let ((f4876@export-env f486e@f4867) (f4877@export-subst f486d@f4865) (f4878@visit-code f486c@f4863) (f4879@invoke-code f486b@f4861) (f487a@visit-req* f486a@f485f) (f487b@invoke-req* f4869@f485d) (f487c@imp* f4868@f485b)) (values f487b@invoke-req* f4879@invoke-code))))))))) (set! f4bd1@f313b@top-level-expander f313b@top-level-expander) (set! f313d@rp (f2a03@f28df@make-record-printer 'env (lambda (f4884@x f4885@p f4886@wr) (display '"#<environment>" f4885@p)))) (set! f4bd2@f313d@rp f313d@rp) (set! f3147@env? (lambda (f488a@x) (and (simple-struct? f488a@x) (eq? (simple-struct-name f488a@x) 'env)))) (set! f4bd3@f3147@env? f3147@env?) (set! f3149@env-names (lambda (f488c@x) (simple-struct-ref f488c@x '0))) (set! f4bd4@f3149@env-names f3149@env-names) (set! f314b@set-env-names! (lambda (f488e@x f488f@val) (simple-struct-set! f488e@x '0 f488f@val))) (set! f4bd5@f314b@set-env-names! f314b@set-env-names!) (set! f314d@env-labels (lambda (f4892@x) (simple-struct-ref f4892@x '1))) (set! f4bd6@f314d@env-labels f314d@env-labels) (set! f314f@set-env-labels! (lambda (f4894@x f4895@val) (simple-struct-set! f4894@x '1 f4895@val))) (set! f4bd7@f314f@set-env-labels! f314f@set-env-labels!) (set! f3151@env-itc (lambda (f4898@x) (simple-struct-ref f4898@x '2))) (set! f4bd8@f3151@env-itc f3151@env-itc) (set! f3153@set-env-itc! (lambda (f489a@x f489b@val) (simple-struct-set! f489a@x '2 f489b@val))) (set! f4bd9@f3153@set-env-itc! f3153@set-env-itc!) (set! f3155@dummy '3) (set! f4bda@f3155@dummy f3155@dummy) (set! f3157@rp (f2a03@f28df@make-record-printer 'interaction-env (lambda (f489e@x f489f@p f48a0@wr) (display '"#<environment>" f489f@p)))) (set! f4bdb@f3157@rp f3157@rp) (set! f3161@interaction-env? (lambda (f48a4@x) (and (simple-struct? f48a4@x) (eq? (simple-struct-name f48a4@x) 'interaction-env)))) (set! f4bdc@f3161@interaction-env? f3161@interaction-env?) (set! f3163@interaction-env-rib (lambda (f48a6@x) (simple-struct-ref f48a6@x '0))) (set! f4bdd@f3163@interaction-env-rib f3163@interaction-env-rib) (set! f3165@set-interaction-env-rib! (lambda (f48a8@x f48a9@val) (simple-struct-set! f48a8@x '0 f48a9@val))) (set! f4bde@f3165@set-interaction-env-rib! f3165@set-interaction-env-rib!) (set! f3167@interaction-env-r (lambda (f48ac@x) (simple-struct-ref f48ac@x '1))) (set! f4bdf@f3167@interaction-env-r f3167@interaction-env-r) (set! f3169@set-interaction-env-r! (lambda (f48ae@x f48af@val) (simple-struct-set! f48ae@x '1 f48af@val))) (set! f4be0@f3169@set-interaction-env-r! f3169@set-interaction-env-r!) (set! f316b@interaction-env-locs (lambda (f48b2@x) (simple-struct-ref f48b2@x '2))) (set! f4be1@f316b@interaction-env-locs f316b@interaction-env-locs) (set! f316d@set-interaction-env-locs! (lambda (f48b4@x f48b5@val) (simple-struct-set! f48b4@x '2 f48b5@val))) (set! f4be2@f316d@set-interaction-env-locs! f316d@set-interaction-env-locs!) (set! f316f@dummy '3) (set! f4be3@f316f@dummy f316f@dummy) (set! f3171@interaction-environment-symbols (lambda () (f3179@environment-symbols (f31b1@interaction-environment)))) (set! f4be4@f3171@interaction-environment-symbols f3171@interaction-environment-symbols) (set! f3173@environment-bindings (lambda (f48b8@e) (vector->list (vector-map (lambda (f48ba@name f48bb@label) (f3175@parse-binding (cons f48ba@name (f2cd1@f2b1e@imported-label->binding f48bb@label)))) (f3149@env-names f48b8@e) (f314d@env-labels f48b8@e))))) (set! f4be5@f3173@environment-bindings f3173@environment-bindings) (set! f3175@parse-binding (lambda (f48be@b) (cons (car f48be@b) (let ((f48c0@t (cadr f48be@b))) (if (memv f48c0@t '(core-prim global)) 'procedure (if (memv f48c0@t '(core-macro macro global-macro)) 'syntax (if (memv f48c0@t '($core-rtd)) 'record (if (eq? (car f48be@b) (cadr f48be@b)) 'syntax 'unknown)))))))) (set! f4be6@f3175@parse-binding f3175@parse-binding) (set! f3177@environment? (lambda (f48c2@x) (or (f3147@env? f48c2@x) (f3161@interaction-env? f48c2@x)))) (set! f4be7@f3177@environment? f3177@environment?) (set! f3179@environment-symbols (lambda (f48c4@x) (if (f3147@env? f48c4@x) (vector->list (f3149@env-names f48c4@x)) (if (f3161@interaction-env? f48c4@x) (map values (f2e5a@rib-sym* (f3163@interaction-env-rib f48c4@x))) (assertion-violation 'environment-symbols '"not an environment" f48c4@x))))) (set! f4be8@f3179@environment-symbols f3179@environment-symbols) (set! f317b@environment (lambda f48c6@imp* (let ((f48c8@itc (f3129@make-collector))) (let ((f48ce@f48cb f312f@imp-collector) (f48cf@f48cd f48c8@itc)) (let ((f48d2@swap (lambda () (let ((f48d4@t (f48ce@f48cb))) (begin (f48ce@f48cb f48cf@f48cd) (set! f48cf@f48cd f48d4@t)))))) (dynamic-wind f48d2@swap (lambda () (call-with-values (lambda () (f3125@parse-import-spec* f48c6@imp*)) (lambda (f48da@f48d7 f48db@f48d9) (let ((f48de@subst-labels f48db@f48d9) (f48df@subst-names f48da@f48d7)) (make-simple-struct 'env '4 (list f48df@subst-names f48de@subst-labels f48c8@itc)))))) f48d2@swap)))))) (set! f4be9@f317b@environment f317b@environment) (set! f317d@null-environment (lambda (f48e2@n) (begin (if (not (eqv? f48e2@n '5)) (assertion-violation 'null-environment '"not 5" f48e2@n) (void)) (f317b@environment '(psyntax null-environment-5))))) (set! f4bea@f317d@null-environment f317d@null-environment) (set! f317f@scheme-report-environment (lambda (f48e4@n) (begin (if (not (eqv? f48e4@n '5)) (assertion-violation 'scheme-report-environment '"not 5" f48e4@n) (void)) (f317b@environment '(psyntax scheme-report-environment-5))))) (set! f4beb@f317f@scheme-report-environment f317f@scheme-report-environment) (set! f3181@expand (lambda (f48e6@x f48e7@env) (if (f3147@env? f48e7@env) (let ((f48ea@rib (f3127@make-top-rib (f3149@env-names f48e7@env) (f314d@env-labels f48e7@env)))) (let ((f48ec@x (make-simple-struct 'stx '5 (list f48e6@x f2e40@top-mark* (list f48ea@rib) '()))) (f48ed@itc (f3151@env-itc f48e7@env)) (f48ee@rtc (f3129@make-collector)) (f48ef@vtc (f3129@make-collector))) (let ((f48f4@x (let ((f4906@f48f7 f31b3@top-level-context) (f4907@f48f9 f312b@inv-collector) (f4908@f48fb f312d@vis-collector) (f4909@f48fd f312f@imp-collector) (f490a@f48ff '#f) (f490b@f4901 f48ee@rtc) (f490c@f4903 f48ef@vtc) (f490d@f4905 f48ed@itc)) (let ((f4916@swap (lambda () (begin (let ((f4918@t (f4906@f48f7))) (begin (f4906@f48f7 f490a@f48ff) (set! f490a@f48ff f4918@t))) (let ((f491a@t (f4907@f48f9))) (begin (f4907@f48f9 f490b@f4901) (set! f490b@f4901 f491a@t))) (let ((f491c@t (f4908@f48fb))) (begin (f4908@f48fb f490c@f4903) (set! f490c@f4903 f491c@t))) (let ((f491e@t (f4909@f48fd))) (begin (f4909@f48fd f490d@f4905) (set! f490d@f4905 f491e@t))))))) (dynamic-wind f4916@swap (lambda () (f30e5@chi-expr f48ec@x '() '())) f4916@swap))))) (begin (f2e78@seal-rib! f48ea@rib) (values f48f4@x (f48ee@rtc)))))) (if (f3161@interaction-env? f48e7@env) (let ((f4920@rib (f3163@interaction-env-rib f48e7@env)) (f4921@r (f3167@interaction-env-r f48e7@env)) (f4922@rtc (f3129@make-collector))) (let ((f4926@x (make-simple-struct 'stx '5 (list f48e6@x f2e40@top-mark* (list f4920@rib) '())))) (call-with-values (lambda () (let ((f493c@f492d f31b3@top-level-context) (f493d@f492f f312b@inv-collector) (f493e@f4931 f312d@vis-collector) (f493f@f4933 f312f@imp-collector) (f4940@f4935 f48e7@env) (f4941@f4937 f4922@rtc) (f4942@f4939 (f3129@make-collector)) (f4943@f493b (f3129@make-collector))) (let ((f494c@swap (lambda () (begin (let ((f494e@t (f493c@f492d))) (begin (f493c@f492d f4940@f4935) (set! f4940@f4935 f494e@t))) (let ((f4950@t (f493d@f492f))) (begin (f493d@f492f f4941@f4937) (set! f4941@f4937 f4950@t))) (let ((f4952@t (f493e@f4931))) (begin (f493e@f4931 f4942@f4939) (set! f4942@f4939 f4952@t))) (let ((f4954@t (f493f@f4933))) (begin (f493f@f4933 f4943@f493b) (set! f4943@f493b f4954@t))))))) (dynamic-wind f494c@swap (lambda () (f3133@chi-interaction-expr f4926@x f4920@rib f4921@r)) f494c@swap)))) (lambda (f4956@f4929 f4957@f492b) (let ((f495a@r^ f4957@f492b) (f495b@e f4956@f4929)) (begin (f3169@set-interaction-env-r! f48e7@env f495a@r^) (values f495b@e (f4922@rtc)))))))) (assertion-violation 'expand '"not an environment" f48e7@env))))) (set! f4bec@f3181@expand f3181@expand) (set! f3183@eval (lambda (f495e@x f495f@env) (begin (if (not (f3177@environment? f495f@env)) (error 'eval '"not an environment" f495f@env) (void)) (call-with-values (lambda () (f3181@expand f495e@x f495f@env)) (lambda (f4966@f4963 f4967@f4965) (let ((f496a@invoke-req* f4967@f4965) (f496b@x f4966@f4963)) (begin (for-each f2cd2@f2b20@invoke-library f496a@invoke-req*) (eval-core (f2a5c@f2a14@expanded->core f496b@x))))))))) (set! f4bed@f3183@eval f3183@eval) (set! f3185@library-expander (lambda f49dc (let ((f49dd (length f49dc))) (if (= f49dd '3) (apply (lambda (f496e@x f496f@filename f4970@verify-name) (let ((f4975@build-visit-code '#f) (f4977@visit! '#f)) (begin (set! f4975@build-visit-code (lambda (f49ca@macro*) (if (null? f49ca@macro*) (f2e22@f2d7d@build-void) (f2e21@f2d7b@build-sequence '#f (map (lambda (f49cc@x) (let ((f49ce@loc (car f49cc@x)) (f49cf@src (cddr f49cc@x))) (list 'set! f49ce@loc f49cf@src))) f49ca@macro*))))) (set! f4977@visit! (lambda (f49c2@macro*) (for-each (lambda (f49c4@x) (let ((f49c6@loc (car f49c4@x)) (f49c7@proc (cadr f49c4@x))) (set-symbol-value! f49c6@loc f49c7@proc))) f49c2@macro*))) (call-with-values (lambda () (f3137@core-library-expander f496e@x f4970@verify-name)) (lambda (f498a@f4979 f498b@f497b f498c@f497d f498d@f497f f498e@f4981 f498f@f4983 f4990@f4985 f4991@f4987 f4992@f4989) (let ((f499c@export-env f4992@f4989) (f499d@export-subst f4991@f4987) (f499e@macro* f4990@f4985) (f499f@invoke-code f498f@f4983) (f49a0@vis* f498e@f4981) (f49a1@inv* f498d@f497f) (f49a2@imp* f498c@f497d) (f49a3@ver f498b@f497b) (f49a4@name f498a@f4979)) (let ((f49ae@id (gensym)) (f49af@name f49a4@name) (f49b0@ver f49a3@ver) (f49b1@imp* (map f2cd6@f2b28@library-spec f49a2@imp*)) (f49b2@vis* (map f2cd6@f2b28@library-spec f49a0@vis*)) (f49b3@inv* (map f2cd6@f2b28@library-spec f49a1@inv*)) (f49b4@visit-proc (lambda () (f4977@visit! f499e@macro*))) (f49b5@invoke-proc (lambda () (eval-core (f2a5c@f2a14@expanded->core f499f@invoke-code)))) (f49b6@visit-code (f4975@build-visit-code f499e@macro*)) (f49b7@invoke-code f499f@invoke-code)) (begin (f2cd0@f2b1c@install-library f49ae@id f49af@name f49b0@ver f49b1@imp* f49b2@vis* f49b3@inv* f499d@export-subst f499c@export-env f49b4@visit-proc f49b5@invoke-proc f49b6@visit-code f49b7@invoke-code '#t f496f@filename) (values f49ae@id f49af@name f49b0@ver f49b1@imp* f49b2@vis* f49b3@inv* f49b7@invoke-code f49b6@visit-code f499d@export-subst f499c@export-env))))))))) f49dc) (if (= f49dd '2) (apply (lambda (f49d2@x f49d3@filename) (f3185@library-expander f49d2@x f49d3@filename (lambda (f49d6@x) (values)))) f49dc) (if (= f49dd '1) (apply (lambda (f49d8@x) (f3185@library-expander f49d8@x '#f (lambda (f49da@x) (values)))) f49dc) (error 'apply '"invalid arg count"))))))) (set! f4bee@f3185@library-expander f3185@library-expander) (set! f3187@boot-library-expand (lambda (f49de@x) (call-with-values (lambda () (f3185@library-expander f49de@x)) (lambda (f49f4@f49e1 f49f5@f49e3 f49f6@f49e5 f49f7@f49e7 f49f8@f49e9 f49f9@f49eb f49fa@f49ed f49fb@f49ef f49fc@f49f1 f49fd@f49f3) (let ((f4a08@export-env f49fd@f49f3) (f4a09@export-subst f49fc@f49f1) (f4a0a@visit-code f49fb@f49ef) (f4a0b@invoke-code f49fa@f49ed) (f4a0c@inv* f49f9@f49eb) (f4a0d@vis* f49f8@f49e9) (f4a0e@imp* f49f7@f49e7) (f4a0f@ver f49f6@f49e5) (f4a10@name f49f5@f49e3) (f4a11@id f49f4@f49e1)) (values f4a10@name f4a0b@invoke-code f4a09@export-subst f4a08@export-env)))))) (set! f4bef@f3187@boot-library-expand f3187@boot-library-expand) (set! f3189@rev-map-append (lambda (f4a1c@f f4a1d@ls f4a1e@ac) (if (null? f4a1d@ls) f4a1e@ac (f3189@rev-map-append f4a1c@f (cdr f4a1d@ls) (cons (f4a1c@f (car f4a1d@ls)) f4a1e@ac))))) (set! f4bf0@f3189@rev-map-append f3189@rev-map-append) (set! f318b@build-exports (lambda (f4a22@lex*+loc* f4a23@init*) (f2e21@f2d7b@build-sequence '#f (cons (f2e22@f2d7d@build-void) (f3189@rev-map-append (lambda (f4a26@x) (list 'set! (cdr f4a26@x) (car f4a26@x))) f4a22@lex*+loc* f4a23@init*))))) (set! f4bf1@f318b@build-exports f318b@build-exports) (set! f318d@make-export-subst (lambda (f4a28@name* f4a29@id*) (map (lambda (f4a2c@name f4a2d@id) (let ((f4a30@label (f2ed2@id->label f4a2d@id))) (begin (if (not f4a30@label) (f31a3@syntax-violation '#f '"cannot export unbound identifier" f4a2d@id) (void)) (cons f4a2c@name f4a30@label)))) f4a28@name* f4a29@id*))) (set! f4bf2@f318d@make-export-subst f318d@make-export-subst) (set! f318f@make-export-env/macros (lambda (f4a32@lex* f4a33@loc* f4a34@r) (let ((f4a39@lookup '#f)) (begin (set! f4a39@lookup (lambda (f4a56@x) (let f4a5e@f ((f4a58@x f4a56@x) (f4a59@lex* f4a32@lex*) (f4a5a@loc* f4a33@loc*)) (if (pair? f4a59@lex*) (if (eq? f4a58@x (car f4a59@lex*)) (car f4a5a@loc*) (f4a5e@f f4a58@x (cdr f4a59@lex*) (cdr f4a5a@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let f4a42@f ((f4a3a@r f4a34@r) (f4a3b@env '()) (f4a3c@global* '()) (f4a3d@macro* '())) (if (null? f4a3a@r) (values f4a3b@env f4a3c@global* f4a3d@macro*) (let ((f4a44@x (car f4a3a@r))) (let ((f4a46@label (car f4a44@x)) (f4a47@b (cdr f4a44@x))) (let ((f4a4a@t (f2ed8@binding-type f4a47@b))) (if (memv f4a4a@t '(lexical)) (let ((f4a4c@v (f2eda@binding-value f4a47@b))) (let ((f4a4e@loc (f4a39@lookup (f304d@lexical-var f4a4c@v))) (f4a4f@type (if (f304f@lexical-mutable? f4a4c@v) 'mutable 'global))) (f4a42@f (cdr f4a3a@r) (cons (cons* f4a46@label f4a4f@type f4a4e@loc) f4a3b@env) (cons (cons (f304d@lexical-var f4a4c@v) f4a4e@loc) f4a3c@global*) f4a3d@macro*))) (if (memv f4a4a@t '(local-macro)) (let ((f4a52@loc (gensym))) (f4a42@f (cdr f4a3a@r) (cons (cons* f4a46@label 'global-macro f4a52@loc) f4a3b@env) f4a3c@global* (cons (cons f4a52@loc (f2eda@binding-value f4a47@b)) f4a3d@macro*))) (if (memv f4a4a@t '(local-macro!)) (let ((f4a54@loc (gensym))) (f4a42@f (cdr f4a3a@r) (cons (cons* f4a46@label 'global-macro! f4a54@loc) f4a3b@env) f4a3c@global* (cons (cons f4a54@loc (f2eda@binding-value f4a47@b)) f4a3d@macro*))) (if (memv f4a4a@t '($rtd $module)) (f4a42@f (cdr f4a3a@r) (cons f4a44@x f4a3b@env) f4a3c@global* f4a3d@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (f2ed8@binding-type f4a47@b) (f2eda@binding-value f4a47@b))))))))))))))) (set! f4bf3@f318f@make-export-env/macros f318f@make-export-env/macros) (set! f3191@generate-temporaries (lambda (f4a60@ls) (let ((f4a62@t f4a60@ls)) (let ((f4a64@ls/false (f30c3@syntax-dispatch f4a62@t 'each-any))) (if f4a64@ls/false (apply (lambda (f4a66@ls) (map (lambda (f4a68@x) (make-simple-struct 'stx '5 (list (let ((f4a6a@x (f31a9@syntax->datum f4a68@x))) (if (or (symbol? f4a6a@x) (string? f4a6a@x)) (gensym f4a6a@x) (gensym 't))) f2e40@top-mark* '() '()))) f4a66@ls)) f4a64@ls/false) (let ((f4a6c@t f4a62@t)) (let ((f4a6e@ls/false (f30c3@syntax-dispatch f4a6c@t '_))) (if f4a6e@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) f4a6e@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f4a6c@t))))))))) (set! f4bf4@f3191@generate-temporaries f3191@generate-temporaries) (set! f3193@free-identifier=? (lambda (f4a70@x f4a71@y) (if (f2ebc@id? f4a70@x) (if (f2ebc@id? f4a71@y) (f2ec2@free-id=? f4a70@x f4a71@y) (assertion-violation 'free-identifier=? '"not an identifier" f4a71@y)) (assertion-violation 'free-identifier=? '"not an identifier" f4a70@x)))) (set! f4bf5@f3193@free-identifier=? f3193@free-identifier=?) (set! f3195@bound-identifier=? (lambda (f4a74@x f4a75@y) (if (f2ebc@id? f4a74@x) (if (f2ebc@id? f4a75@y) (f2ec0@bound-id=? f4a74@x f4a75@y) (assertion-violation 'bound-identifier=? '"not an identifier" f4a75@y)) (assertion-violation 'bound-identifier=? '"not an identifier" f4a74@x)))) (set! f4bf6@f3195@bound-identifier=? f3195@bound-identifier=?) (set! f3197@make-source-condition (lambda (f4a78@x) (let ((f4a82@f4a7d '#f) (f4a84@f4a7f '#f) (f4a86@f4a7e '#f) (f4a89@f4a7c '#f) (f4a8b@make-source-condition '#f) (f4a8d@f4a7a '#f) (f4a8f@f4a7b '#f) (f4a91@source-condition? '#f) (f4a93@source-filename '#f) (f4a95@source-character '#f)) (begin (set! f4a82@f4a7d (make-record-type-descriptor '&source-information f4ed8@f4c1f@&condition-rtd 'f4a80 '#f '#f '#((immutable file-name) (immutable character)))) (set! f4a84@f4a7f '#f) (set! f4a86@f4a7e (make-record-constructor-descriptor f4a82@f4a7d f4ed9@f4c21@&condition-rcd f4a84@f4a7f)) (set! f4a89@f4a7c (record-predicate f4a82@f4a7d)) (set! f4a8b@make-source-condition (record-constructor f4a86@f4a7e)) (set! f4a8d@f4a7a (record-accessor f4a82@f4a7d '0)) (set! f4a8f@f4a7b (record-accessor f4a82@f4a7d '1)) (set! f4a91@source-condition? (condition-predicate f4a82@f4a7d)) (set! f4a93@source-filename (condition-accessor f4a82@f4a7d f4a8d@f4a7a)) (set! f4a95@source-character (condition-accessor f4a82@f4a7d f4a8f@f4a7b)) (if (pair? f4a78@x) (f4a8b@make-source-condition (car f4a78@x) (cdr f4a78@x)) (condition)))))) (set! f4bf7@f3197@make-source-condition f3197@make-source-condition) (set! f3199@extract-position-condition (lambda (f4a96@x) (f3197@make-source-condition (f319b@expression-position f4a96@x)))) (set! f4bf8@f3199@extract-position-condition f3199@extract-position-condition) (set! f319b@expression-position (lambda (f4a98@x) (and (f2e88@stx? f4a98@x) (let ((f4a9a@x (f2e8a@stx-expr f4a98@x))) (and (f29fb@f28cf@annotation? f4a9a@x) (f29fc@f28d1@annotation-source f4a9a@x)))))) (set! f4bf9@f319b@expression-position f319b@expression-position) (set! f319d@assertion-error (lambda (f4a9c@expr f4a9d@pos) (raise (condition (f4f08@f4ce3@make-assertion-violation) (f4f1a@f4d15@make-who-condition 'assert) (f4ede@f4c76@make-message-condition '"assertion failed") (f4f10@f4cfa@make-irritants-condition (list f4a9c@expr)) (f3197@make-source-condition f4a9d@pos))))) (set! f4bfa@f319d@assertion-error f319d@assertion-error) (set! f319f@syntax-error (lambda (f4aa0@x . f4aa2@args) (begin (if (not (for-all string? f4aa2@args)) (assertion-violation 'syntax-error '"invalid argument" f4aa2@args) (void)) (raise (condition (f4ede@f4c76@make-message-condition (if (null? f4aa2@args) '"invalid syntax" (apply string-append f4aa2@args))) (f4f3c@f4d71@make-syntax-violation (f31a9@syntax->datum f4aa0@x) '#f) (f3199@extract-position-condition f4aa0@x)))))) (set! f4bfb@f319f@syntax-error f319f@syntax-error) (set! f31a1@syntax-violation* (lambda (f4aa4@who f4aa5@msg f4aa6@form f4aa7@condition-object) (begin (if (not (string? f4aa5@msg)) (assertion-violation 'syntax-violation '"message is not a string" f4aa5@msg) (void)) (let ((f4aac@who (if (or (string? f4aa4@who) (symbol? f4aa4@who)) f4aa4@who (if (not f4aa4@who) (let ((f4aae@t f4aa6@form)) (let ((f4ab0@ls/false (f30c3@syntax-dispatch f4aae@t 'any))) (if (and f4ab0@ls/false (apply (lambda (f4ab2@id) (f2ebc@id? f4ab2@id)) f4ab0@ls/false)) (apply (lambda (f4ab4@id) (f31a9@syntax->datum f4ab4@id)) f4ab0@ls/false) (let ((f4ab6@t f4aae@t)) (let ((f4ab8@ls/false (f30c3@syntax-dispatch f4ab6@t '(any . any)))) (if (and f4ab8@ls/false (apply (lambda (f4aba@id f4abb@rest) (f2ebc@id? f4aba@id)) f4ab8@ls/false)) (apply (lambda (f4abe@id f4abf@rest) (f31a9@syntax->datum f4abe@id)) f4ab8@ls/false) (let ((f4ac2@t f4ab6@t)) (let ((f4ac4@ls/false (f30c3@syntax-dispatch f4ac2@t '_))) (if f4ac4@ls/false (apply (lambda () '#f) f4ac4@ls/false) (f31a3@syntax-violation '#f '"invalid syntax" f4ac2@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" f4aa4@who))))) (raise (condition (if f4aac@who (f4f1a@f4d15@make-who-condition f4aac@who) (condition)) (f4ede@f4c76@make-message-condition f4aa5@msg) f4aa7@condition-object (f3199@extract-position-condition f4aa6@form))))))) (set! f4bfc@f31a1@syntax-violation* f31a1@syntax-violation*) (set! f31a3@syntax-violation (lambda f4ad4 (let ((f4ad5 (length f4ad4))) (if (= f4ad5 '3) (apply (lambda (f4ac6@who f4ac7@msg f4ac8@form) (f31a3@syntax-violation f4ac6@who f4ac7@msg f4ac8@form '#f)) f4ad4) (if (= f4ad5 '4) (apply (lambda (f4acc@who f4acd@msg f4ace@form f4acf@subform) (f31a1@syntax-violation* f4acc@who f4acd@msg f4ace@form (f4f3c@f4d71@make-syntax-violation (f31a9@syntax->datum f4ace@form) (f31a9@syntax->datum f4acf@subform)))) f4ad4) (error 'apply '"invalid arg count")))))) (set! f4bfd@f31a3@syntax-violation f31a3@syntax-violation) (set! f31a5@identifier? (lambda (f4ad6@x) (f2ebc@id? f4ad6@x))) (set! f4bfe@f31a5@identifier? f31a5@identifier?) (set! f31a7@datum->syntax (lambda (f4ad8@id f4ad9@datum) (if (f2ebc@id? f4ad8@id) (f2e9c@datum->stx f4ad8@id f4ad9@datum) (assertion-violation 'datum->syntax '"not an identifier" f4ad8@id)))) (set! f4bff@f31a7@datum->syntax f31a7@datum->syntax) (set! f31a9@syntax->datum (lambda (f4adc@x) (f2ed0@stx->datum f4adc@x))) (set! f4c00@f31a9@syntax->datum f31a9@syntax->datum) (set! f31ab@ungensym-all (lambda (f4ade@code) (if (pair? f4ade@code) (cons (f31ab@ungensym-all (car f4ade@code)) (f31ab@ungensym-all (cdr f4ade@code))) (if (symbol? f4ade@code) (ungensym f4ade@code) f4ade@code)))) (set! f4c01@f31ab@ungensym-all f31ab@ungensym-all) (set! f31ad@compile-r6rs-top-level (lambda (f4ae0@x*) (call-with-values (lambda () (f313b@top-level-expander f4ae0@x*)) (lambda (f4ae6@f4ae3 f4ae7@f4ae5) (let ((f4aea@invoke-code f4ae7@f4ae5) (f4aeb@lib* f4ae6@f4ae3)) (lambda () (begin (for-each f2cd2@f2b20@invoke-library f4aeb@lib*) (let ((f4aee@expanded (f2a5c@f2a14@expanded->core f4aea@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (f31ab@ungensym-all f4aee@expanded)) (void)) (eval-core f4aee@expanded)))))))))) (set! f4c02@f31ad@compile-r6rs-top-level f31ad@compile-r6rs-top-level) (set! f31af@pre-compile-r6rs-top-level (lambda (f4af0@x*) (call-with-values (lambda () (f313b@top-level-expander f4af0@x*)) (lambda (f4af6@f4af3 f4af7@f4af5) (let ((f4afa@invoke-code f4af7@f4af5) (f4afb@lib* f4af6@f4af3)) (begin (for-each f2cd2@f2b20@invoke-library f4afb@lib*) (f2a04@f28e1@compile-core (f2a5c@f2a14@expanded->core f4afa@invoke-code)))))))) (set! f4c03@f31af@pre-compile-r6rs-top-level f31af@pre-compile-r6rs-top-level) (set! f31b1@interaction-environment (let ((f4afe@the-env '#f)) (lambda () (or f4afe@the-env (let ((f4b00@lib (f2ccb@f2b12@find-library-by-name '(mosh interaction))) (f4b01@rib (f2e70@make-empty-rib))) (begin (let ((f4b04@subst (f2cad@f2ad6@library-subst f4b00@lib))) (begin (f2e5c@set-rib-sym*! f4b01@rib (map car f4b04@subst)) (f2e60@set-rib-mark**! f4b01@rib (map (lambda (f4b06@x) f2e40@top-mark*) f4b04@subst)) (f2e64@set-rib-label*! f4b01@rib (map cdr f4b04@subst)))) (let ((f4b08@env (make-simple-struct 'interaction-env '4 (list f4b01@rib '() '())))) (begin (set! f4afe@the-env f4b08@env) f4b08@env)))))))) (set! f4c04@f31b1@interaction-environment f31b1@interaction-environment) (set! f31b3@top-level-context (f2a06@f28e5@make-parameter '#f)) (set! f4c05@f31b3@top-level-context f31b3@top-level-context) (f2cc8@f2b0c@current-library-expander f3185@library-expander))
(begin (set! f4c14@f4c0f (unspecified)) (set! f4c16@f4c11 (unspecified)) (set! f4c18@f4c10 (unspecified)) (set! f4c1b@&condition? (unspecified)) (set! f4c1d@make-&condition (unspecified)) (set! f4c1f@&condition-rtd (unspecified)) (set! f4c21@&condition-rcd (unspecified)) (set! f4c6d@f4c68 (unspecified)) (set! f4c6f@f4c6a (unspecified)) (set! f4c71@f4c69 (unspecified)) (set! f4c74@p? (unspecified)) (set! f4c76@make-message-condition (unspecified)) (set! f4c78@f4c67 (unspecified)) (set! f4c7a@message-condition? (unspecified)) (set! f4c7c@condition-message (unspecified)) (set! f4c7e@&message-rtd (unspecified)) (set! f4c80@&message-rcd (unspecified)) (set! f4c86@f4c81 (unspecified)) (set! f4c88@f4c83 (unspecified)) (set! f4c8a@f4c82 (unspecified)) (set! f4c8d@p? (unspecified)) (set! f4c8f@make-warning (unspecified)) (set! f4c91@warning? (unspecified)) (set! f4c93@&warning-rtd (unspecified)) (set! f4c95@&warning-rcd (unspecified)) (set! f4c9b@f4c96 (unspecified)) (set! f4c9d@f4c98 (unspecified)) (set! f4c9f@f4c97 (unspecified)) (set! f4ca2@p? (unspecified)) (set! f4ca4@make-serious-condition (unspecified)) (set! f4ca6@serious-condition? (unspecified)) (set! f4ca8@&serious-rtd (unspecified)) (set! f4caa@&serious-rcd (unspecified)) (set! f4cb0@f4cab (unspecified)) (set! f4cb2@f4cad (unspecified)) (set! f4cb4@f4cac (unspecified)) (set! f4cb7@p? (unspecified)) (set! f4cb9@make-error (unspecified)) (set! f4cbb@error? (unspecified)) (set! f4cbd@&error-rtd (unspecified)) (set! f4cbf@&error-rcd (unspecified)) (set! f4cc5@f4cc0 (unspecified)) (set! f4cc7@f4cc2 (unspecified)) (set! f4cc9@f4cc1 (unspecified)) (set! f4ccc@p? (unspecified)) (set! f4cce@make-violation (unspecified)) (set! f4cd0@violation? (unspecified)) (set! f4cd2@&violation-rtd (unspecified)) (set! f4cd4@&violation-rcd (unspecified)) (set! f4cda@f4cd5 (unspecified)) (set! f4cdc@f4cd7 (unspecified)) (set! f4cde@f4cd6 (unspecified)) (set! f4ce1@p? (unspecified)) (set! f4ce3@make-assertion-violation (unspecified)) (set! f4ce5@assertion-violation? (unspecified)) (set! f4ce7@&assertion-rtd (unspecified)) (set! f4ce9@&assertion-rcd (unspecified)) (set! f4cf1@f4cec (unspecified)) (set! f4cf3@f4cee (unspecified)) (set! f4cf5@f4ced (unspecified)) (set! f4cf8@p? (unspecified)) (set! f4cfa@make-irritants-condition (unspecified)) (set! f4cfc@f4ceb (unspecified)) (set! f4cfe@irritants-condition? (unspecified)) (set! f4d00@condition-irritants (unspecified)) (set! f4d02@&irritants-rtd (unspecified)) (set! f4d04@&irritants-rcd (unspecified)) (set! f4d0c@f4d07 (unspecified)) (set! f4d0e@f4d09 (unspecified)) (set! f4d10@f4d08 (unspecified)) (set! f4d13@p? (unspecified)) (set! f4d15@make-who-condition (unspecified)) (set! f4d17@f4d06 (unspecified)) (set! f4d19@who-condition? (unspecified)) (set! f4d1b@condition-who (unspecified)) (set! f4d1d@&who-rtd (unspecified)) (set! f4d1f@&who-rcd (unspecified)) (set! f4d25@f4d20 (unspecified)) (set! f4d27@f4d22 (unspecified)) (set! f4d29@f4d21 (unspecified)) (set! f4d2c@p? (unspecified)) (set! f4d2e@make-non-continuable-violation (unspecified)) (set! f4d30@non-continuable-violation? (unspecified)) (set! f4d32@&non-continuable-rtd (unspecified)) (set! f4d34@&non-continuable-rcd (unspecified)) (set! f4d3a@f4d35 (unspecified)) (set! f4d3c@f4d37 (unspecified)) (set! f4d3e@f4d36 (unspecified)) (set! f4d41@p? (unspecified)) (set! f4d43@make-implementation-restriction-violation (unspecified)) (set! f4d45@implementation-restriction-violation? (unspecified)) (set! f4d47@&implementation-restriction-rtd (unspecified)) (set! f4d49@&implementation-restriction-rcd (unspecified)) (set! f4d4f@f4d4a (unspecified)) (set! f4d51@f4d4c (unspecified)) (set! f4d53@f4d4b (unspecified)) (set! f4d56@p? (unspecified)) (set! f4d58@make-lexical-violation (unspecified)) (set! f4d5a@lexical-violation? (unspecified)) (set! f4d5c@&lexical-rtd (unspecified)) (set! f4d5e@&lexical-rcd (unspecified)) (set! f4d68@f4d63 (unspecified)) (set! f4d6a@f4d65 (unspecified)) (set! f4d6c@f4d64 (unspecified)) (set! f4d6f@p? (unspecified)) (set! f4d71@make-syntax-violation (unspecified)) (set! f4d73@f4d60 (unspecified)) (set! f4d75@f4d62 (unspecified)) (set! f4d77@syntax-violation? (unspecified)) (set! f4d79@syntax-violation-form (unspecified)) (set! f4d7b@syntax-violation-subform (unspecified)) (set! f4d7d@&syntax-rtd (unspecified)) (set! f4d7f@&syntax-rcd (unspecified)) (set! f4d85@f4d80 (unspecified)) (set! f4d87@f4d82 (unspecified)) (set! f4d89@f4d81 (unspecified)) (set! f4d8c@p? (unspecified)) (set! f4d8e@make-undefined-violation (unspecified)) (set! f4d90@undefined-violation? (unspecified)) (set! f4d92@&undefined-rtd (unspecified)) (set! f4d94@&undefined-rcd (unspecified)) (set! f4d9a@f4d95 (unspecified)) (set! f4d9c@f4d97 (unspecified)) (set! f4d9e@f4d96 (unspecified)) (set! f4da1@p? (unspecified)) (set! f4da3@make-i/o-error (unspecified)) (set! f4da5@i/o-error? (unspecified)) (set! f4da7@&i/o-rtd (unspecified)) (set! f4da9@&i/o-rcd (unspecified)) (set! f4daf@f4daa (unspecified)) (set! f4db1@f4dac (unspecified)) (set! f4db3@f4dab (unspecified)) (set! f4db6@p? (unspecified)) (set! f4db8@make-i/o-read-error (unspecified)) (set! f4dba@i/o-read-error? (unspecified)) (set! f4dbc@&i/o-read-rtd (unspecified)) (set! f4dbe@&i/o-read-rcd (unspecified)) (set! f4dc4@f4dbf (unspecified)) (set! f4dc6@f4dc1 (unspecified)) (set! f4dc8@f4dc0 (unspecified)) (set! f4dcb@p? (unspecified)) (set! f4dcd@make-i/o-write-error (unspecified)) (set! f4dcf@i/o-write-error? (unspecified)) (set! f4dd1@&i/o-write-rtd (unspecified)) (set! f4dd3@&i/o-write-rcd (unspecified)) (set! f4ddb@f4dd6 (unspecified)) (set! f4ddd@f4dd8 (unspecified)) (set! f4ddf@f4dd7 (unspecified)) (set! f4de2@p? (unspecified)) (set! f4de4@make-i/o-invalid-position-error (unspecified)) (set! f4de6@f4dd5 (unspecified)) (set! f4de8@i/o-invalid-position-error? (unspecified)) (set! f4dea@i/o-error-position (unspecified)) (set! f4dec@&i/o-invalid-position-rtd (unspecified)) (set! f4dee@&i/o-invalid-position-rcd (unspecified)) (set! f4df6@f4df1 (unspecified)) (set! f4df8@f4df3 (unspecified)) (set! f4dfa@f4df2 (unspecified)) (set! f4dfd@p? (unspecified)) (set! f4dff@make-i/o-filename-error (unspecified)) (set! f4e01@f4df0 (unspecified)) (set! f4e03@i/o-filename-error? (unspecified)) (set! f4e05@i/o-error-filename (unspecified)) (set! f4e07@&i/o-filename-rtd (unspecified)) (set! f4e09@&i/o-filename-rcd (unspecified)) (set! f4e0f@f4e0a (unspecified)) (set! f4e11@f4e0c (unspecified)) (set! f4e13@f4e0b (unspecified)) (set! f4e16@p? (unspecified)) (set! f4e18@make-i/o-file-protection-error (unspecified)) (set! f4e1a@i/o-file-protection-error? (unspecified)) (set! f4e1c@&i/o-file-protection-rtd (unspecified)) (set! f4e1e@&i/o-file-protection-rcd (unspecified)) (set! f4e24@f4e1f (unspecified)) (set! f4e26@f4e21 (unspecified)) (set! f4e28@f4e20 (unspecified)) (set! f4e2b@p? (unspecified)) (set! f4e2d@make-i/o-file-is-read-only-error (unspecified)) (set! f4e2f@i/o-file-is-read-only-error? (unspecified)) (set! f4e31@&i/o-file-is-read-only-rtd (unspecified)) (set! f4e33@&i/o-file-is-read-only-rcd (unspecified)) (set! f4e39@f4e34 (unspecified)) (set! f4e3b@f4e36 (unspecified)) (set! f4e3d@f4e35 (unspecified)) (set! f4e40@p? (unspecified)) (set! f4e42@make-i/o-file-already-exists-error (unspecified)) (set! f4e44@i/o-file-already-exists-error? (unspecified)) (set! f4e46@&i/o-file-already-exists-rtd (unspecified)) (set! f4e48@&i/o-file-already-exists-rcd (unspecified)) (set! f4e4e@f4e49 (unspecified)) (set! f4e50@f4e4b (unspecified)) (set! f4e52@f4e4a (unspecified)) (set! f4e55@p? (unspecified)) (set! f4e57@make-i/o-file-does-not-exist-error (unspecified)) (set! f4e59@i/o-file-does-not-exist-error? (unspecified)) (set! f4e5b@&i/o-file-does-not-exist-rtd (unspecified)) (set! f4e5d@&i/o-file-does-not-exist-rcd (unspecified)) (set! f4e65@f4e60 (unspecified)) (set! f4e67@f4e62 (unspecified)) (set! f4e69@f4e61 (unspecified)) (set! f4e6c@p? (unspecified)) (set! f4e6e@make-i/o-port-error (unspecified)) (set! f4e70@f4e5f (unspecified)) (set! f4e72@i/o-port-error? (unspecified)) (set! f4e74@i/o-error-port (unspecified)) (set! f4e76@&i/o-port-rtd (unspecified)) (set! f4e78@&i/o-port-rcd (unspecified)) (set! f4e7e@f4e79 (unspecified)) (set! f4e80@f4e7b (unspecified)) (set! f4e82@f4e7a (unspecified)) (set! f4e85@p? (unspecified)) (set! f4e87@make-i/o-decoding-error (unspecified)) (set! f4e89@i/o-decoding-error? (unspecified)) (set! f4e8b@&i/o-decoding-rtd (unspecified)) (set! f4e8d@&i/o-decoding-rcd (unspecified)) (set! f4e95@f4e90 (unspecified)) (set! f4e97@f4e92 (unspecified)) (set! f4e99@f4e91 (unspecified)) (set! f4e9c@p? (unspecified)) (set! f4e9e@make-i/o-encoding-error (unspecified)) (set! f4ea0@f4e8f (unspecified)) (set! f4ea2@i/o-encoding-error? (unspecified)) (set! f4ea4@i/o-encoding-error-char (unspecified)) (set! f4ea6@&i/o-encoding-rtd (unspecified)) (set! f4ea8@&i/o-encoding-rcd (unspecified)) (set! f4eae@f4ea9 (unspecified)) (set! f4eb0@f4eab (unspecified)) (set! f4eb2@f4eaa (unspecified)) (set! f4eb5@p? (unspecified)) (set! f4eb7@make-no-infinities-violation (unspecified)) (set! f4eb9@no-infinities-violation? (unspecified)) (set! f4ebb@&no-infinities-rtd (unspecified)) (set! f4ebd@&no-infinities-rcd (unspecified)) (set! f4ec3@f4ebe (unspecified)) (set! f4ec5@f4ec0 (unspecified)) (set! f4ec7@f4ebf (unspecified)) (set! f4eca@p? (unspecified)) (set! f4ecc@make-no-nans-violation (unspecified)) (set! f4ece@no-nans-violation? (unspecified)) (set! f4ed0@&no-nans-rtd (unspecified)) (set! f4ed2@&no-nans-rcd (unspecified)) (set! f4c14@f4c0f (make-record-type-descriptor '&condition '#f 'f4c12 '#f '#f '#())) (set! f4ed3@f4c14@f4c0f f4c14@f4c0f) (set! f4c16@f4c11 '#f) (set! f4ed4@f4c16@f4c11 f4c16@f4c11) (set! f4c18@f4c10 (make-record-constructor-descriptor f4c14@f4c0f '#f f4c16@f4c11)) (set! f4ed5@f4c18@f4c10 f4c18@f4c10) (set! f4c1b@&condition? (record-predicate f4c14@f4c0f)) (set! f4ed6@f4c1b@&condition? f4c1b@&condition?) (set! f4c1d@make-&condition (record-constructor f4c18@f4c10)) (set! f4ed7@f4c1d@make-&condition f4c1d@make-&condition) (set! f4c1f@&condition-rtd f4c14@f4c0f) (set! f4ed8@f4c1f@&condition-rtd f4c1f@&condition-rtd) (set! f4c21@&condition-rcd f4c18@f4c10) (set! f4ed9@f4c21@&condition-rcd f4c21@&condition-rcd) (set! f4c6d@f4c68 (make-record-type-descriptor '&message f4c14@f4c0f 'f4c6b '#f '#f '#((immutable message)))) (set! f4eda@f4c6d@f4c68 f4c6d@f4c68) (set! f4c6f@f4c6a '#f) (set! f4edb@f4c6f@f4c6a f4c6f@f4c6a) (set! f4c71@f4c69 (make-record-constructor-descriptor f4c6d@f4c68 f4c18@f4c10 f4c6f@f4c6a)) (set! f4edc@f4c71@f4c69 f4c71@f4c69) (set! f4c74@p? (record-predicate f4c6d@f4c68)) (set! f4edd@f4c74@p? f4c74@p?) (set! f4c76@make-message-condition (record-constructor f4c71@f4c69)) (set! f4ede@f4c76@make-message-condition f4c76@make-message-condition) (set! f4c78@f4c67 (record-accessor f4c6d@f4c68 '0)) (set! f4edf@f4c78@f4c67 f4c78@f4c67) (set! f4c7a@message-condition? (condition-predicate f4c6d@f4c68)) (set! f4ee0@f4c7a@message-condition? f4c7a@message-condition?) (set! f4c7c@condition-message (condition-accessor f4c6d@f4c68 f4c78@f4c67)) (set! f4ee1@f4c7c@condition-message f4c7c@condition-message) (set! f4c7e@&message-rtd f4c6d@f4c68) (set! f4ee2@f4c7e@&message-rtd f4c7e@&message-rtd) (set! f4c80@&message-rcd f4c71@f4c69) (set! f4ee3@f4c80@&message-rcd f4c80@&message-rcd) (set! f4c86@f4c81 (make-record-type-descriptor '&warning f4c14@f4c0f 'f4c84 '#f '#f '#())) (set! f4ee4@f4c86@f4c81 f4c86@f4c81) (set! f4c88@f4c83 '#f) (set! f4ee5@f4c88@f4c83 f4c88@f4c83) (set! f4c8a@f4c82 (make-record-constructor-descriptor f4c86@f4c81 f4c18@f4c10 f4c88@f4c83)) (set! f4ee6@f4c8a@f4c82 f4c8a@f4c82) (set! f4c8d@p? (record-predicate f4c86@f4c81)) (set! f4ee7@f4c8d@p? f4c8d@p?) (set! f4c8f@make-warning (record-constructor f4c8a@f4c82)) (set! f4ee8@f4c8f@make-warning f4c8f@make-warning) (set! f4c91@warning? (condition-predicate f4c86@f4c81)) (set! f4ee9@f4c91@warning? f4c91@warning?) (set! f4c93@&warning-rtd f4c86@f4c81) (set! f4eea@f4c93@&warning-rtd f4c93@&warning-rtd) (set! f4c95@&warning-rcd f4c8a@f4c82) (set! f4eeb@f4c95@&warning-rcd f4c95@&warning-rcd) (set! f4c9b@f4c96 (make-record-type-descriptor '&serious f4c14@f4c0f 'f4c99 '#f '#f '#())) (set! f4eec@f4c9b@f4c96 f4c9b@f4c96) (set! f4c9d@f4c98 '#f) (set! f4eed@f4c9d@f4c98 f4c9d@f4c98) (set! f4c9f@f4c97 (make-record-constructor-descriptor f4c9b@f4c96 f4c18@f4c10 f4c9d@f4c98)) (set! f4eee@f4c9f@f4c97 f4c9f@f4c97) (set! f4ca2@p? (record-predicate f4c9b@f4c96)) (set! f4eef@f4ca2@p? f4ca2@p?) (set! f4ca4@make-serious-condition (record-constructor f4c9f@f4c97)) (set! f4ef0@f4ca4@make-serious-condition f4ca4@make-serious-condition) (set! f4ca6@serious-condition? (condition-predicate f4c9b@f4c96)) (set! f4ef1@f4ca6@serious-condition? f4ca6@serious-condition?) (set! f4ca8@&serious-rtd f4c9b@f4c96) (set! f4ef2@f4ca8@&serious-rtd f4ca8@&serious-rtd) (set! f4caa@&serious-rcd f4c9f@f4c97) (set! f4ef3@f4caa@&serious-rcd f4caa@&serious-rcd) (set! f4cb0@f4cab (make-record-type-descriptor '&error f4c9b@f4c96 'f4cae '#f '#f '#())) (set! f4ef4@f4cb0@f4cab f4cb0@f4cab) (set! f4cb2@f4cad '#f) (set! f4ef5@f4cb2@f4cad f4cb2@f4cad) (set! f4cb4@f4cac (make-record-constructor-descriptor f4cb0@f4cab f4c9f@f4c97 f4cb2@f4cad)) (set! f4ef6@f4cb4@f4cac f4cb4@f4cac) (set! f4cb7@p? (record-predicate f4cb0@f4cab)) (set! f4ef7@f4cb7@p? f4cb7@p?) (set! f4cb9@make-error (record-constructor f4cb4@f4cac)) (set! f4ef8@f4cb9@make-error f4cb9@make-error) (set! f4cbb@error? (condition-predicate f4cb0@f4cab)) (set! f4ef9@f4cbb@error? f4cbb@error?) (set! f4cbd@&error-rtd f4cb0@f4cab) (set! f4efa@f4cbd@&error-rtd f4cbd@&error-rtd) (set! f4cbf@&error-rcd f4cb4@f4cac) (set! f4efb@f4cbf@&error-rcd f4cbf@&error-rcd) (set! f4cc5@f4cc0 (make-record-type-descriptor '&violation f4c9b@f4c96 'f4cc3 '#f '#f '#())) (set! f4efc@f4cc5@f4cc0 f4cc5@f4cc0) (set! f4cc7@f4cc2 '#f) (set! f4efd@f4cc7@f4cc2 f4cc7@f4cc2) (set! f4cc9@f4cc1 (make-record-constructor-descriptor f4cc5@f4cc0 f4c9f@f4c97 f4cc7@f4cc2)) (set! f4efe@f4cc9@f4cc1 f4cc9@f4cc1) (set! f4ccc@p? (record-predicate f4cc5@f4cc0)) (set! f4eff@f4ccc@p? f4ccc@p?) (set! f4cce@make-violation (record-constructor f4cc9@f4cc1)) (set! f4f00@f4cce@make-violation f4cce@make-violation) (set! f4cd0@violation? (condition-predicate f4cc5@f4cc0)) (set! f4f01@f4cd0@violation? f4cd0@violation?) (set! f4cd2@&violation-rtd f4cc5@f4cc0) (set! f4f02@f4cd2@&violation-rtd f4cd2@&violation-rtd) (set! f4cd4@&violation-rcd f4cc9@f4cc1) (set! f4f03@f4cd4@&violation-rcd f4cd4@&violation-rcd) (set! f4cda@f4cd5 (make-record-type-descriptor '&assertion f4cc5@f4cc0 'f4cd8 '#f '#f '#())) (set! f4f04@f4cda@f4cd5 f4cda@f4cd5) (set! f4cdc@f4cd7 '#f) (set! f4f05@f4cdc@f4cd7 f4cdc@f4cd7) (set! f4cde@f4cd6 (make-record-constructor-descriptor f4cda@f4cd5 f4cc9@f4cc1 f4cdc@f4cd7)) (set! f4f06@f4cde@f4cd6 f4cde@f4cd6) (set! f4ce1@p? (record-predicate f4cda@f4cd5)) (set! f4f07@f4ce1@p? f4ce1@p?) (set! f4ce3@make-assertion-violation (record-constructor f4cde@f4cd6)) (set! f4f08@f4ce3@make-assertion-violation f4ce3@make-assertion-violation) (set! f4ce5@assertion-violation? (condition-predicate f4cda@f4cd5)) (set! f4f09@f4ce5@assertion-violation? f4ce5@assertion-violation?) (set! f4ce7@&assertion-rtd f4cda@f4cd5) (set! f4f0a@f4ce7@&assertion-rtd f4ce7@&assertion-rtd) (set! f4ce9@&assertion-rcd f4cde@f4cd6) (set! f4f0b@f4ce9@&assertion-rcd f4ce9@&assertion-rcd) (set! f4cf1@f4cec (make-record-type-descriptor '&irritants f4c14@f4c0f 'f4cef '#f '#f '#((immutable irritants)))) (set! f4f0c@f4cf1@f4cec f4cf1@f4cec) (set! f4cf3@f4cee '#f) (set! f4f0d@f4cf3@f4cee f4cf3@f4cee) (set! f4cf5@f4ced (make-record-constructor-descriptor f4cf1@f4cec f4c18@f4c10 f4cf3@f4cee)) (set! f4f0e@f4cf5@f4ced f4cf5@f4ced) (set! f4cf8@p? (record-predicate f4cf1@f4cec)) (set! f4f0f@f4cf8@p? f4cf8@p?) (set! f4cfa@make-irritants-condition (record-constructor f4cf5@f4ced)) (set! f4f10@f4cfa@make-irritants-condition f4cfa@make-irritants-condition) (set! f4cfc@f4ceb (record-accessor f4cf1@f4cec '0)) (set! f4f11@f4cfc@f4ceb f4cfc@f4ceb) (set! f4cfe@irritants-condition? (condition-predicate f4cf1@f4cec)) (set! f4f12@f4cfe@irritants-condition? f4cfe@irritants-condition?) (set! f4d00@condition-irritants (condition-accessor f4cf1@f4cec f4cfc@f4ceb)) (set! f4f13@f4d00@condition-irritants f4d00@condition-irritants) (set! f4d02@&irritants-rtd f4cf1@f4cec) (set! f4f14@f4d02@&irritants-rtd f4d02@&irritants-rtd) (set! f4d04@&irritants-rcd f4cf5@f4ced) (set! f4f15@f4d04@&irritants-rcd f4d04@&irritants-rcd) (set! f4d0c@f4d07 (make-record-type-descriptor '&who f4c14@f4c0f 'f4d0a '#f '#f '#((immutable who)))) (set! f4f16@f4d0c@f4d07 f4d0c@f4d07) (set! f4d0e@f4d09 '#f) (set! f4f17@f4d0e@f4d09 f4d0e@f4d09) (set! f4d10@f4d08 (make-record-constructor-descriptor f4d0c@f4d07 f4c18@f4c10 f4d0e@f4d09)) (set! f4f18@f4d10@f4d08 f4d10@f4d08) (set! f4d13@p? (record-predicate f4d0c@f4d07)) (set! f4f19@f4d13@p? f4d13@p?) (set! f4d15@make-who-condition (record-constructor f4d10@f4d08)) (set! f4f1a@f4d15@make-who-condition f4d15@make-who-condition) (set! f4d17@f4d06 (record-accessor f4d0c@f4d07 '0)) (set! f4f1b@f4d17@f4d06 f4d17@f4d06) (set! f4d19@who-condition? (condition-predicate f4d0c@f4d07)) (set! f4f1c@f4d19@who-condition? f4d19@who-condition?) (set! f4d1b@condition-who (condition-accessor f4d0c@f4d07 f4d17@f4d06)) (set! f4f1d@f4d1b@condition-who f4d1b@condition-who) (set! f4d1d@&who-rtd f4d0c@f4d07) (set! f4f1e@f4d1d@&who-rtd f4d1d@&who-rtd) (set! f4d1f@&who-rcd f4d10@f4d08) (set! f4f1f@f4d1f@&who-rcd f4d1f@&who-rcd) (set! f4d25@f4d20 (make-record-type-descriptor '&non-continuable f4cc5@f4cc0 'f4d23 '#f '#f '#())) (set! f4f20@f4d25@f4d20 f4d25@f4d20) (set! f4d27@f4d22 '#f) (set! f4f21@f4d27@f4d22 f4d27@f4d22) (set! f4d29@f4d21 (make-record-constructor-descriptor f4d25@f4d20 f4cc9@f4cc1 f4d27@f4d22)) (set! f4f22@f4d29@f4d21 f4d29@f4d21) (set! f4d2c@p? (record-predicate f4d25@f4d20)) (set! f4f23@f4d2c@p? f4d2c@p?) (set! f4d2e@make-non-continuable-violation (record-constructor f4d29@f4d21)) (set! f4f24@f4d2e@make-non-continuable-violation f4d2e@make-non-continuable-violation) (set! f4d30@non-continuable-violation? (condition-predicate f4d25@f4d20)) (set! f4f25@f4d30@non-continuable-violation? f4d30@non-continuable-violation?) (set! f4d32@&non-continuable-rtd f4d25@f4d20) (set! f4f26@f4d32@&non-continuable-rtd f4d32@&non-continuable-rtd) (set! f4d34@&non-continuable-rcd f4d29@f4d21) (set! f4f27@f4d34@&non-continuable-rcd f4d34@&non-continuable-rcd) (set! f4d3a@f4d35 (make-record-type-descriptor '&implementation-restriction f4cc5@f4cc0 'f4d38 '#f '#f '#())) (set! f4f28@f4d3a@f4d35 f4d3a@f4d35) (set! f4d3c@f4d37 '#f) (set! f4f29@f4d3c@f4d37 f4d3c@f4d37) (set! f4d3e@f4d36 (make-record-constructor-descriptor f4d3a@f4d35 f4cc9@f4cc1 f4d3c@f4d37)) (set! f4f2a@f4d3e@f4d36 f4d3e@f4d36) (set! f4d41@p? (record-predicate f4d3a@f4d35)) (set! f4f2b@f4d41@p? f4d41@p?) (set! f4d43@make-implementation-restriction-violation (record-constructor f4d3e@f4d36)) (set! f4f2c@f4d43@make-implementation-restriction-violation f4d43@make-implementation-restriction-violation) (set! f4d45@implementation-restriction-violation? (condition-predicate f4d3a@f4d35)) (set! f4f2d@f4d45@implementation-restriction-violation? f4d45@implementation-restriction-violation?) (set! f4d47@&implementation-restriction-rtd f4d3a@f4d35) (set! f4f2e@f4d47@&implementation-restriction-rtd f4d47@&implementation-restriction-rtd) (set! f4d49@&implementation-restriction-rcd f4d3e@f4d36) (set! f4f2f@f4d49@&implementation-restriction-rcd f4d49@&implementation-restriction-rcd) (set! f4d4f@f4d4a (make-record-type-descriptor '&lexical f4cc5@f4cc0 'f4d4d '#f '#f '#())) (set! f4f30@f4d4f@f4d4a f4d4f@f4d4a) (set! f4d51@f4d4c '#f) (set! f4f31@f4d51@f4d4c f4d51@f4d4c) (set! f4d53@f4d4b (make-record-constructor-descriptor f4d4f@f4d4a f4cc9@f4cc1 f4d51@f4d4c)) (set! f4f32@f4d53@f4d4b f4d53@f4d4b) (set! f4d56@p? (record-predicate f4d4f@f4d4a)) (set! f4f33@f4d56@p? f4d56@p?) (set! f4d58@make-lexical-violation (record-constructor f4d53@f4d4b)) (set! f4f34@f4d58@make-lexical-violation f4d58@make-lexical-violation) (set! f4d5a@lexical-violation? (condition-predicate f4d4f@f4d4a)) (set! f4f35@f4d5a@lexical-violation? f4d5a@lexical-violation?) (set! f4d5c@&lexical-rtd f4d4f@f4d4a) (set! f4f36@f4d5c@&lexical-rtd f4d5c@&lexical-rtd) (set! f4d5e@&lexical-rcd f4d53@f4d4b) (set! f4f37@f4d5e@&lexical-rcd f4d5e@&lexical-rcd) (set! f4d68@f4d63 (make-record-type-descriptor '&syntax f4cc5@f4cc0 'f4d66 '#f '#f '#((immutable form) (immutable subform)))) (set! f4f38@f4d68@f4d63 f4d68@f4d63) (set! f4d6a@f4d65 '#f) (set! f4f39@f4d6a@f4d65 f4d6a@f4d65) (set! f4d6c@f4d64 (make-record-constructor-descriptor f4d68@f4d63 f4cc9@f4cc1 f4d6a@f4d65)) (set! f4f3a@f4d6c@f4d64 f4d6c@f4d64) (set! f4d6f@p? (record-predicate f4d68@f4d63)) (set! f4f3b@f4d6f@p? f4d6f@p?) (set! f4d71@make-syntax-violation (record-constructor f4d6c@f4d64)) (set! f4f3c@f4d71@make-syntax-violation f4d71@make-syntax-violation) (set! f4d73@f4d60 (record-accessor f4d68@f4d63 '0)) (set! f4f3d@f4d73@f4d60 f4d73@f4d60) (set! f4d75@f4d62 (record-accessor f4d68@f4d63 '1)) (set! f4f3e@f4d75@f4d62 f4d75@f4d62) (set! f4d77@syntax-violation? (condition-predicate f4d68@f4d63)) (set! f4f3f@f4d77@syntax-violation? f4d77@syntax-violation?) (set! f4d79@syntax-violation-form (condition-accessor f4d68@f4d63 f4d73@f4d60)) (set! f4f40@f4d79@syntax-violation-form f4d79@syntax-violation-form) (set! f4d7b@syntax-violation-subform (condition-accessor f4d68@f4d63 f4d75@f4d62)) (set! f4f41@f4d7b@syntax-violation-subform f4d7b@syntax-violation-subform) (set! f4d7d@&syntax-rtd f4d68@f4d63) (set! f4f42@f4d7d@&syntax-rtd f4d7d@&syntax-rtd) (set! f4d7f@&syntax-rcd f4d6c@f4d64) (set! f4f43@f4d7f@&syntax-rcd f4d7f@&syntax-rcd) (set! f4d85@f4d80 (make-record-type-descriptor '&undefined f4cc5@f4cc0 'f4d83 '#f '#f '#())) (set! f4f44@f4d85@f4d80 f4d85@f4d80) (set! f4d87@f4d82 '#f) (set! f4f45@f4d87@f4d82 f4d87@f4d82) (set! f4d89@f4d81 (make-record-constructor-descriptor f4d85@f4d80 f4cc9@f4cc1 f4d87@f4d82)) (set! f4f46@f4d89@f4d81 f4d89@f4d81) (set! f4d8c@p? (record-predicate f4d85@f4d80)) (set! f4f47@f4d8c@p? f4d8c@p?) (set! f4d8e@make-undefined-violation (record-constructor f4d89@f4d81)) (set! f4f48@f4d8e@make-undefined-violation f4d8e@make-undefined-violation) (set! f4d90@undefined-violation? (condition-predicate f4d85@f4d80)) (set! f4f49@f4d90@undefined-violation? f4d90@undefined-violation?) (set! f4d92@&undefined-rtd f4d85@f4d80) (set! f4f4a@f4d92@&undefined-rtd f4d92@&undefined-rtd) (set! f4d94@&undefined-rcd f4d89@f4d81) (set! f4f4b@f4d94@&undefined-rcd f4d94@&undefined-rcd) (set! f4d9a@f4d95 (make-record-type-descriptor '&i/o f4cb0@f4cab 'f4d98 '#f '#f '#())) (set! f4f4c@f4d9a@f4d95 f4d9a@f4d95) (set! f4d9c@f4d97 '#f) (set! f4f4d@f4d9c@f4d97 f4d9c@f4d97) (set! f4d9e@f4d96 (make-record-constructor-descriptor f4d9a@f4d95 f4cb4@f4cac f4d9c@f4d97)) (set! f4f4e@f4d9e@f4d96 f4d9e@f4d96) (set! f4da1@p? (record-predicate f4d9a@f4d95)) (set! f4f4f@f4da1@p? f4da1@p?) (set! f4da3@make-i/o-error (record-constructor f4d9e@f4d96)) (set! f4f50@f4da3@make-i/o-error f4da3@make-i/o-error) (set! f4da5@i/o-error? (condition-predicate f4d9a@f4d95)) (set! f4f51@f4da5@i/o-error? f4da5@i/o-error?) (set! f4da7@&i/o-rtd f4d9a@f4d95) (set! f4f52@f4da7@&i/o-rtd f4da7@&i/o-rtd) (set! f4da9@&i/o-rcd f4d9e@f4d96) (set! f4f53@f4da9@&i/o-rcd f4da9@&i/o-rcd) (set! f4daf@f4daa (make-record-type-descriptor '&i/o-read f4d9a@f4d95 'f4dad '#f '#f '#())) (set! f4f54@f4daf@f4daa f4daf@f4daa) (set! f4db1@f4dac '#f) (set! f4f55@f4db1@f4dac f4db1@f4dac) (set! f4db3@f4dab (make-record-constructor-descriptor f4daf@f4daa f4d9e@f4d96 f4db1@f4dac)) (set! f4f56@f4db3@f4dab f4db3@f4dab) (set! f4db6@p? (record-predicate f4daf@f4daa)) (set! f4f57@f4db6@p? f4db6@p?) (set! f4db8@make-i/o-read-error (record-constructor f4db3@f4dab)) (set! f4f58@f4db8@make-i/o-read-error f4db8@make-i/o-read-error) (set! f4dba@i/o-read-error? (condition-predicate f4daf@f4daa)) (set! f4f59@f4dba@i/o-read-error? f4dba@i/o-read-error?) (set! f4dbc@&i/o-read-rtd f4daf@f4daa) (set! f4f5a@f4dbc@&i/o-read-rtd f4dbc@&i/o-read-rtd) (set! f4dbe@&i/o-read-rcd f4db3@f4dab) (set! f4f5b@f4dbe@&i/o-read-rcd f4dbe@&i/o-read-rcd) (set! f4dc4@f4dbf (make-record-type-descriptor '&i/o-write f4d9a@f4d95 'f4dc2 '#f '#f '#())) (set! f4f5c@f4dc4@f4dbf f4dc4@f4dbf) (set! f4dc6@f4dc1 '#f) (set! f4f5d@f4dc6@f4dc1 f4dc6@f4dc1) (set! f4dc8@f4dc0 (make-record-constructor-descriptor f4dc4@f4dbf f4d9e@f4d96 f4dc6@f4dc1)) (set! f4f5e@f4dc8@f4dc0 f4dc8@f4dc0) (set! f4dcb@p? (record-predicate f4dc4@f4dbf)) (set! f4f5f@f4dcb@p? f4dcb@p?) (set! f4dcd@make-i/o-write-error (record-constructor f4dc8@f4dc0)) (set! f4f60@f4dcd@make-i/o-write-error f4dcd@make-i/o-write-error) (set! f4dcf@i/o-write-error? (condition-predicate f4dc4@f4dbf)) (set! f4f61@f4dcf@i/o-write-error? f4dcf@i/o-write-error?) (set! f4dd1@&i/o-write-rtd f4dc4@f4dbf) (set! f4f62@f4dd1@&i/o-write-rtd f4dd1@&i/o-write-rtd) (set! f4dd3@&i/o-write-rcd f4dc8@f4dc0) (set! f4f63@f4dd3@&i/o-write-rcd f4dd3@&i/o-write-rcd) (set! f4ddb@f4dd6 (make-record-type-descriptor '&i/o-invalid-position f4d9a@f4d95 'f4dd9 '#f '#f '#((immutable position)))) (set! f4f64@f4ddb@f4dd6 f4ddb@f4dd6) (set! f4ddd@f4dd8 '#f) (set! f4f65@f4ddd@f4dd8 f4ddd@f4dd8) (set! f4ddf@f4dd7 (make-record-constructor-descriptor f4ddb@f4dd6 f4d9e@f4d96 f4ddd@f4dd8)) (set! f4f66@f4ddf@f4dd7 f4ddf@f4dd7) (set! f4de2@p? (record-predicate f4ddb@f4dd6)) (set! f4f67@f4de2@p? f4de2@p?) (set! f4de4@make-i/o-invalid-position-error (record-constructor f4ddf@f4dd7)) (set! f4f68@f4de4@make-i/o-invalid-position-error f4de4@make-i/o-invalid-position-error) (set! f4de6@f4dd5 (record-accessor f4ddb@f4dd6 '0)) (set! f4f69@f4de6@f4dd5 f4de6@f4dd5) (set! f4de8@i/o-invalid-position-error? (condition-predicate f4ddb@f4dd6)) (set! f4f6a@f4de8@i/o-invalid-position-error? f4de8@i/o-invalid-position-error?) (set! f4dea@i/o-error-position (condition-accessor f4ddb@f4dd6 f4de6@f4dd5)) (set! f4f6b@f4dea@i/o-error-position f4dea@i/o-error-position) (set! f4dec@&i/o-invalid-position-rtd f4ddb@f4dd6) (set! f4f6c@f4dec@&i/o-invalid-position-rtd f4dec@&i/o-invalid-position-rtd) (set! f4dee@&i/o-invalid-position-rcd f4ddf@f4dd7) (set! f4f6d@f4dee@&i/o-invalid-position-rcd f4dee@&i/o-invalid-position-rcd) (set! f4df6@f4df1 (make-record-type-descriptor '&i/o-filename f4d9a@f4d95 'f4df4 '#f '#f '#((immutable filename)))) (set! f4f6e@f4df6@f4df1 f4df6@f4df1) (set! f4df8@f4df3 '#f) (set! f4f6f@f4df8@f4df3 f4df8@f4df3) (set! f4dfa@f4df2 (make-record-constructor-descriptor f4df6@f4df1 f4d9e@f4d96 f4df8@f4df3)) (set! f4f70@f4dfa@f4df2 f4dfa@f4df2) (set! f4dfd@p? (record-predicate f4df6@f4df1)) (set! f4f71@f4dfd@p? f4dfd@p?) (set! f4dff@make-i/o-filename-error (record-constructor f4dfa@f4df2)) (set! f4f72@f4dff@make-i/o-filename-error f4dff@make-i/o-filename-error) (set! f4e01@f4df0 (record-accessor f4df6@f4df1 '0)) (set! f4f73@f4e01@f4df0 f4e01@f4df0) (set! f4e03@i/o-filename-error? (condition-predicate f4df6@f4df1)) (set! f4f74@f4e03@i/o-filename-error? f4e03@i/o-filename-error?) (set! f4e05@i/o-error-filename (condition-accessor f4df6@f4df1 f4e01@f4df0)) (set! f4f75@f4e05@i/o-error-filename f4e05@i/o-error-filename) (set! f4e07@&i/o-filename-rtd f4df6@f4df1) (set! f4f76@f4e07@&i/o-filename-rtd f4e07@&i/o-filename-rtd) (set! f4e09@&i/o-filename-rcd f4dfa@f4df2) (set! f4f77@f4e09@&i/o-filename-rcd f4e09@&i/o-filename-rcd) (set! f4e0f@f4e0a (make-record-type-descriptor '&i/o-file-protection f4df6@f4df1 'f4e0d '#f '#f '#())) (set! f4f78@f4e0f@f4e0a f4e0f@f4e0a) (set! f4e11@f4e0c '#f) (set! f4f79@f4e11@f4e0c f4e11@f4e0c) (set! f4e13@f4e0b (make-record-constructor-descriptor f4e0f@f4e0a f4dfa@f4df2 f4e11@f4e0c)) (set! f4f7a@f4e13@f4e0b f4e13@f4e0b) (set! f4e16@p? (record-predicate f4e0f@f4e0a)) (set! f4f7b@f4e16@p? f4e16@p?) (set! f4e18@make-i/o-file-protection-error (record-constructor f4e13@f4e0b)) (set! f4f7c@f4e18@make-i/o-file-protection-error f4e18@make-i/o-file-protection-error) (set! f4e1a@i/o-file-protection-error? (condition-predicate f4e0f@f4e0a)) (set! f4f7d@f4e1a@i/o-file-protection-error? f4e1a@i/o-file-protection-error?) (set! f4e1c@&i/o-file-protection-rtd f4e0f@f4e0a) (set! f4f7e@f4e1c@&i/o-file-protection-rtd f4e1c@&i/o-file-protection-rtd) (set! f4e1e@&i/o-file-protection-rcd f4e13@f4e0b) (set! f4f7f@f4e1e@&i/o-file-protection-rcd f4e1e@&i/o-file-protection-rcd) (set! f4e24@f4e1f (make-record-type-descriptor '&i/o-file-is-read-only f4e0f@f4e0a 'f4e22 '#f '#f '#())) (set! f4f80@f4e24@f4e1f f4e24@f4e1f) (set! f4e26@f4e21 '#f) (set! f4f81@f4e26@f4e21 f4e26@f4e21) (set! f4e28@f4e20 (make-record-constructor-descriptor f4e24@f4e1f f4e13@f4e0b f4e26@f4e21)) (set! f4f82@f4e28@f4e20 f4e28@f4e20) (set! f4e2b@p? (record-predicate f4e24@f4e1f)) (set! f4f83@f4e2b@p? f4e2b@p?) (set! f4e2d@make-i/o-file-is-read-only-error (record-constructor f4e28@f4e20)) (set! f4f84@f4e2d@make-i/o-file-is-read-only-error f4e2d@make-i/o-file-is-read-only-error) (set! f4e2f@i/o-file-is-read-only-error? (condition-predicate f4e24@f4e1f)) (set! f4f85@f4e2f@i/o-file-is-read-only-error? f4e2f@i/o-file-is-read-only-error?) (set! f4e31@&i/o-file-is-read-only-rtd f4e24@f4e1f) (set! f4f86@f4e31@&i/o-file-is-read-only-rtd f4e31@&i/o-file-is-read-only-rtd) (set! f4e33@&i/o-file-is-read-only-rcd f4e28@f4e20) (set! f4f87@f4e33@&i/o-file-is-read-only-rcd f4e33@&i/o-file-is-read-only-rcd) (set! f4e39@f4e34 (make-record-type-descriptor '&i/o-file-already-exists f4df6@f4df1 'f4e37 '#f '#f '#())) (set! f4f88@f4e39@f4e34 f4e39@f4e34) (set! f4e3b@f4e36 '#f) (set! f4f89@f4e3b@f4e36 f4e3b@f4e36) (set! f4e3d@f4e35 (make-record-constructor-descriptor f4e39@f4e34 f4dfa@f4df2 f4e3b@f4e36)) (set! f4f8a@f4e3d@f4e35 f4e3d@f4e35) (set! f4e40@p? (record-predicate f4e39@f4e34)) (set! f4f8b@f4e40@p? f4e40@p?) (set! f4e42@make-i/o-file-already-exists-error (record-constructor f4e3d@f4e35)) (set! f4f8c@f4e42@make-i/o-file-already-exists-error f4e42@make-i/o-file-already-exists-error) (set! f4e44@i/o-file-already-exists-error? (condition-predicate f4e39@f4e34)) (set! f4f8d@f4e44@i/o-file-already-exists-error? f4e44@i/o-file-already-exists-error?) (set! f4e46@&i/o-file-already-exists-rtd f4e39@f4e34) (set! f4f8e@f4e46@&i/o-file-already-exists-rtd f4e46@&i/o-file-already-exists-rtd) (set! f4e48@&i/o-file-already-exists-rcd f4e3d@f4e35) (set! f4f8f@f4e48@&i/o-file-already-exists-rcd f4e48@&i/o-file-already-exists-rcd) (set! f4e4e@f4e49 (make-record-type-descriptor '&i/o-file-does-not-exist f4df6@f4df1 'f4e4c '#f '#f '#())) (set! f4f90@f4e4e@f4e49 f4e4e@f4e49) (set! f4e50@f4e4b '#f) (set! f4f91@f4e50@f4e4b f4e50@f4e4b) (set! f4e52@f4e4a (make-record-constructor-descriptor f4e4e@f4e49 f4dfa@f4df2 f4e50@f4e4b)) (set! f4f92@f4e52@f4e4a f4e52@f4e4a) (set! f4e55@p? (record-predicate f4e4e@f4e49)) (set! f4f93@f4e55@p? f4e55@p?) (set! f4e57@make-i/o-file-does-not-exist-error (record-constructor f4e52@f4e4a)) (set! f4f94@f4e57@make-i/o-file-does-not-exist-error f4e57@make-i/o-file-does-not-exist-error) (set! f4e59@i/o-file-does-not-exist-error? (condition-predicate f4e4e@f4e49)) (set! f4f95@f4e59@i/o-file-does-not-exist-error? f4e59@i/o-file-does-not-exist-error?) (set! f4e5b@&i/o-file-does-not-exist-rtd f4e4e@f4e49) (set! f4f96@f4e5b@&i/o-file-does-not-exist-rtd f4e5b@&i/o-file-does-not-exist-rtd) (set! f4e5d@&i/o-file-does-not-exist-rcd f4e52@f4e4a) (set! f4f97@f4e5d@&i/o-file-does-not-exist-rcd f4e5d@&i/o-file-does-not-exist-rcd) (set! f4e65@f4e60 (make-record-type-descriptor '&i/o-port f4d9a@f4d95 'f4e63 '#f '#f '#((immutable port)))) (set! f4f98@f4e65@f4e60 f4e65@f4e60) (set! f4e67@f4e62 '#f) (set! f4f99@f4e67@f4e62 f4e67@f4e62) (set! f4e69@f4e61 (make-record-constructor-descriptor f4e65@f4e60 f4d9e@f4d96 f4e67@f4e62)) (set! f4f9a@f4e69@f4e61 f4e69@f4e61) (set! f4e6c@p? (record-predicate f4e65@f4e60)) (set! f4f9b@f4e6c@p? f4e6c@p?) (set! f4e6e@make-i/o-port-error (record-constructor f4e69@f4e61)) (set! f4f9c@f4e6e@make-i/o-port-error f4e6e@make-i/o-port-error) (set! f4e70@f4e5f (record-accessor f4e65@f4e60 '0)) (set! f4f9d@f4e70@f4e5f f4e70@f4e5f) (set! f4e72@i/o-port-error? (condition-predicate f4e65@f4e60)) (set! f4f9e@f4e72@i/o-port-error? f4e72@i/o-port-error?) (set! f4e74@i/o-error-port (condition-accessor f4e65@f4e60 f4e70@f4e5f)) (set! f4f9f@f4e74@i/o-error-port f4e74@i/o-error-port) (set! f4e76@&i/o-port-rtd f4e65@f4e60) (set! f4fa0@f4e76@&i/o-port-rtd f4e76@&i/o-port-rtd) (set! f4e78@&i/o-port-rcd f4e69@f4e61) (set! f4fa1@f4e78@&i/o-port-rcd f4e78@&i/o-port-rcd) (set! f4e7e@f4e79 (make-record-type-descriptor '&i/o-decoding f4e65@f4e60 'f4e7c '#f '#f '#())) (set! f4fa2@f4e7e@f4e79 f4e7e@f4e79) (set! f4e80@f4e7b '#f) (set! f4fa3@f4e80@f4e7b f4e80@f4e7b) (set! f4e82@f4e7a (make-record-constructor-descriptor f4e7e@f4e79 f4e69@f4e61 f4e80@f4e7b)) (set! f4fa4@f4e82@f4e7a f4e82@f4e7a) (set! f4e85@p? (record-predicate f4e7e@f4e79)) (set! f4fa5@f4e85@p? f4e85@p?) (set! f4e87@make-i/o-decoding-error (record-constructor f4e82@f4e7a)) (set! f4fa6@f4e87@make-i/o-decoding-error f4e87@make-i/o-decoding-error) (set! f4e89@i/o-decoding-error? (condition-predicate f4e7e@f4e79)) (set! f4fa7@f4e89@i/o-decoding-error? f4e89@i/o-decoding-error?) (set! f4e8b@&i/o-decoding-rtd f4e7e@f4e79) (set! f4fa8@f4e8b@&i/o-decoding-rtd f4e8b@&i/o-decoding-rtd) (set! f4e8d@&i/o-decoding-rcd f4e82@f4e7a) (set! f4fa9@f4e8d@&i/o-decoding-rcd f4e8d@&i/o-decoding-rcd) (set! f4e95@f4e90 (make-record-type-descriptor '&i/o-encoding f4e65@f4e60 'f4e93 '#f '#f '#((immutable char)))) (set! f4faa@f4e95@f4e90 f4e95@f4e90) (set! f4e97@f4e92 '#f) (set! f4fab@f4e97@f4e92 f4e97@f4e92) (set! f4e99@f4e91 (make-record-constructor-descriptor f4e95@f4e90 f4e69@f4e61 f4e97@f4e92)) (set! f4fac@f4e99@f4e91 f4e99@f4e91) (set! f4e9c@p? (record-predicate f4e95@f4e90)) (set! f4fad@f4e9c@p? f4e9c@p?) (set! f4e9e@make-i/o-encoding-error (record-constructor f4e99@f4e91)) (set! f4fae@f4e9e@make-i/o-encoding-error f4e9e@make-i/o-encoding-error) (set! f4ea0@f4e8f (record-accessor f4e95@f4e90 '0)) (set! f4faf@f4ea0@f4e8f f4ea0@f4e8f) (set! f4ea2@i/o-encoding-error? (condition-predicate f4e95@f4e90)) (set! f4fb0@f4ea2@i/o-encoding-error? f4ea2@i/o-encoding-error?) (set! f4ea4@i/o-encoding-error-char (condition-accessor f4e95@f4e90 f4ea0@f4e8f)) (set! f4fb1@f4ea4@i/o-encoding-error-char f4ea4@i/o-encoding-error-char) (set! f4ea6@&i/o-encoding-rtd f4e95@f4e90) (set! f4fb2@f4ea6@&i/o-encoding-rtd f4ea6@&i/o-encoding-rtd) (set! f4ea8@&i/o-encoding-rcd f4e99@f4e91) (set! f4fb3@f4ea8@&i/o-encoding-rcd f4ea8@&i/o-encoding-rcd) (set! f4eae@f4ea9 (make-record-type-descriptor '&no-infinities f4d3a@f4d35 'f4eac '#f '#f '#())) (set! f4fb4@f4eae@f4ea9 f4eae@f4ea9) (set! f4eb0@f4eab '#f) (set! f4fb5@f4eb0@f4eab f4eb0@f4eab) (set! f4eb2@f4eaa (make-record-constructor-descriptor f4eae@f4ea9 f4d3e@f4d36 f4eb0@f4eab)) (set! f4fb6@f4eb2@f4eaa f4eb2@f4eaa) (set! f4eb5@p? (record-predicate f4eae@f4ea9)) (set! f4fb7@f4eb5@p? f4eb5@p?) (set! f4eb7@make-no-infinities-violation (record-constructor f4eb2@f4eaa)) (set! f4fb8@f4eb7@make-no-infinities-violation f4eb7@make-no-infinities-violation) (set! f4eb9@no-infinities-violation? (condition-predicate f4eae@f4ea9)) (set! f4fb9@f4eb9@no-infinities-violation? f4eb9@no-infinities-violation?) (set! f4ebb@&no-infinities-rtd f4eae@f4ea9) (set! f4fba@f4ebb@&no-infinities-rtd f4ebb@&no-infinities-rtd) (set! f4ebd@&no-infinities-rcd f4eb2@f4eaa) (set! f4fbb@f4ebd@&no-infinities-rcd f4ebd@&no-infinities-rcd) (set! f4ec3@f4ebe (make-record-type-descriptor '&no-nans f4d3a@f4d35 'f4ec1 '#f '#f '#())) (set! f4fbc@f4ec3@f4ebe f4ec3@f4ebe) (set! f4ec5@f4ec0 '#f) (set! f4fbd@f4ec5@f4ec0 f4ec5@f4ec0) (set! f4ec7@f4ebf (make-record-constructor-descriptor f4ec3@f4ebe f4d3e@f4d36 f4ec5@f4ec0)) (set! f4fbe@f4ec7@f4ebf f4ec7@f4ebf) (set! f4eca@p? (record-predicate f4ec3@f4ebe)) (set! f4fbf@f4eca@p? f4eca@p?) (set! f4ecc@make-no-nans-violation (record-constructor f4ec7@f4ebf)) (set! f4fc0@f4ecc@make-no-nans-violation f4ecc@make-no-nans-violation) (set! f4ece@no-nans-violation? (condition-predicate f4ec3@f4ebe)) (set! f4fc1@f4ece@no-nans-violation? f4ece@no-nans-violation?) (set! f4ed0@&no-nans-rtd f4ec3@f4ebe) (set! f4fc2@f4ed0@&no-nans-rtd f4ed0@&no-nans-rtd) (set! f4ed2@&no-nans-rcd f4ec7@f4ebf) (set! f4fc3@f4ed2@&no-nans-rcd f4ed2@&no-nans-rcd) (void))
(begin (begin (f2a59@f2a0e@current-primitive-locations (lambda (f5491@x) (let ((f5493@t (assq f5491@x '((&no-nans-rcd . f4fc3@f4ed2@&no-nans-rcd) (&no-nans-rtd . f4fc2@f4ed0@&no-nans-rtd) (&no-infinities-rcd . f4fbb@f4ebd@&no-infinities-rcd) (&no-infinities-rtd . f4fba@f4ebb@&no-infinities-rtd) (&i/o-encoding-rcd . f4fb3@f4ea8@&i/o-encoding-rcd) (&i/o-encoding-rtd . f4fb2@f4ea6@&i/o-encoding-rtd) (&i/o-decoding-rcd . f4fa9@f4e8d@&i/o-decoding-rcd) (&i/o-decoding-rtd . f4fa8@f4e8b@&i/o-decoding-rtd) (&i/o-port-rcd . f4fa1@f4e78@&i/o-port-rcd) (&i/o-port-rtd . f4fa0@f4e76@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . f4f97@f4e5d@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . f4f96@f4e5b@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . f4f8f@f4e48@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . f4f8e@f4e46@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . f4f87@f4e33@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . f4f86@f4e31@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . f4f7f@f4e1e@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . f4f7e@f4e1c@&i/o-file-protection-rtd) (&i/o-filename-rcd . f4f77@f4e09@&i/o-filename-rcd) (&i/o-filename-rtd . f4f76@f4e07@&i/o-filename-rtd) (&i/o-invalid-position-rcd . f4f6d@f4dee@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . f4f6c@f4dec@&i/o-invalid-position-rtd) (&i/o-write-rcd . f4f63@f4dd3@&i/o-write-rcd) (&i/o-write-rtd . f4f62@f4dd1@&i/o-write-rtd) (&i/o-read-rcd . f4f5b@f4dbe@&i/o-read-rcd) (&i/o-read-rtd . f4f5a@f4dbc@&i/o-read-rtd) (&i/o-rcd . f4f53@f4da9@&i/o-rcd) (&i/o-rtd . f4f52@f4da7@&i/o-rtd) (&undefined-rcd . f4f4b@f4d94@&undefined-rcd) (&undefined-rtd . f4f4a@f4d92@&undefined-rtd) (&syntax-rcd . f4f43@f4d7f@&syntax-rcd) (&syntax-rtd . f4f42@f4d7d@&syntax-rtd) (&lexical-rcd . f4f37@f4d5e@&lexical-rcd) (&lexical-rtd . f4f36@f4d5c@&lexical-rtd) (&implementation-restriction-rcd . f4f2f@f4d49@&implementation-restriction-rcd) (&implementation-restriction-rtd . f4f2e@f4d47@&implementation-restriction-rtd) (&non-continuable-rcd . f4f27@f4d34@&non-continuable-rcd) (&non-continuable-rtd . f4f26@f4d32@&non-continuable-rtd) (&who-rcd . f4f1f@f4d1f@&who-rcd) (&who-rtd . f4f1e@f4d1d@&who-rtd) (&irritants-rcd . f4f15@f4d04@&irritants-rcd) (&irritants-rtd . f4f14@f4d02@&irritants-rtd) (&assertion-rcd . f4f0b@f4ce9@&assertion-rcd) (&assertion-rtd . f4f0a@f4ce7@&assertion-rtd) (&violation-rcd . f4f03@f4cd4@&violation-rcd) (&violation-rtd . f4f02@f4cd2@&violation-rtd) (&error-rcd . f4efb@f4cbf@&error-rcd) (&error-rtd . f4efa@f4cbd@&error-rtd) (&serious-rcd . f4ef3@f4caa@&serious-rcd) (&serious-rtd . f4ef2@f4ca8@&serious-rtd) (&warning-rcd . f4eeb@f4c95@&warning-rcd) (&warning-rtd . f4eea@f4c93@&warning-rtd) (&message-rcd . f4ee3@f4c80@&message-rcd) (&message-rtd . f4ee2@f4c7e@&message-rtd) (&condition-rcd . f4ed9@f4c21@&condition-rcd) (&condition-rtd . f4ed8@f4c1f@&condition-rtd) (syntax-error . f4bfb@f319f@syntax-error) (syntax-dispatch . f4b99@f30c3@syntax-dispatch) (load . f5138@f4fe3@load) (interaction-environment . f4c04@f31b1@interaction-environment) (library-path . f2cc0@f2afc@library-path) (mosh-cache-dir . f2a07@f28e7@mosh-cache-dir) (make-parameter . f2a06@f28e5@make-parameter) (make-variable-transformer . f4b56@f2eee@make-variable-transformer) (identifier? . f4bfe@f31a5@identifier?) (generate-temporaries . f4bf4@f3191@generate-temporaries) (free-identifier=? . f4bf5@f3193@free-identifier=?) (syntax->datum . f4c00@f31a9@syntax->datum) (datum->syntax . f4bff@f31a7@datum->syntax) (bound-identifier=? . f4bf6@f3195@bound-identifier=?) (make-i/o-write-error . f4f60@f4dcd@make-i/o-write-error) (make-i/o-read-error . f4f58@f4db8@make-i/o-read-error) (make-i/o-port-error . f4f9c@f4e6e@make-i/o-port-error) (make-i/o-invalid-position-error . f4f68@f4de4@make-i/o-invalid-position-error) (make-i/o-filename-error . f4f72@f4dff@make-i/o-filename-error) (make-i/o-file-protection-error . f4f7c@f4e18@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . f4f84@f4e2d@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . f4f94@f4e57@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . f4f8c@f4e42@make-i/o-file-already-exists-error) (make-i/o-error . f4f50@f4da3@make-i/o-error) (make-i/o-encoding-error . f4fae@f4e9e@make-i/o-encoding-error) (make-i/o-decoding-error . f4fa6@f4e87@make-i/o-decoding-error) (i/o-write-error? . f4f61@f4dcf@i/o-write-error?) (i/o-read-error? . f4f59@f4dba@i/o-read-error?) (i/o-port-error? . f4f9e@f4e72@i/o-port-error?) (i/o-invalid-position-error? . f4f6a@f4de8@i/o-invalid-position-error?) (i/o-filename-error? . f4f74@f4e03@i/o-filename-error?) (i/o-file-protection-error? . f4f7d@f4e1a@i/o-file-protection-error?) (i/o-file-is-read-only-error? . f4f85@f4e2f@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . f4f95@f4e59@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . f4f8d@f4e44@i/o-file-already-exists-error?) (i/o-error? . f4f51@f4da5@i/o-error?) (i/o-error-position . f4f6b@f4dea@i/o-error-position) (i/o-error-port . f4f9f@f4e74@i/o-error-port) (i/o-error-filename . f4f75@f4e05@i/o-error-filename) (i/o-encoding-error? . f4fb0@f4ea2@i/o-encoding-error?) (i/o-encoding-error-char . f4fb1@f4ea4@i/o-encoding-error-char) (i/o-decoding-error? . f4fa7@f4e89@i/o-decoding-error?) (scheme-report-environment . f4beb@f317f@scheme-report-environment) (null-environment . f4bea@f317d@null-environment) (command-line . f5135@f4fdd@command-line) (eval . f4bed@f3183@eval) (environment . f4be9@f317b@environment) (who-condition? . f4f1c@f4d19@who-condition?) (warning? . f4ee9@f4c91@warning?) (violation? . f4f01@f4cd0@violation?) (undefined-violation? . f4f49@f4d90@undefined-violation?) (syntax-violation? . f4f3f@f4d77@syntax-violation?) (syntax-violation-subform . f4f41@f4d7b@syntax-violation-subform) (syntax-violation-form . f4f40@f4d79@syntax-violation-form) (syntax-violation . f4bfd@f31a3@syntax-violation) (serious-condition? . f4ef1@f4ca6@serious-condition?) (non-continuable-violation? . f4f25@f4d30@non-continuable-violation?) (message-condition? . f4ee0@f4c7a@message-condition?) (make-who-condition . f4f1a@f4d15@make-who-condition) (make-warning . f4ee8@f4c8f@make-warning) (make-violation . f4f00@f4cce@make-violation) (make-undefined-violation . f4f48@f4d8e@make-undefined-violation) (make-syntax-violation . f4f3c@f4d71@make-syntax-violation) (make-serious-condition . f4ef0@f4ca4@make-serious-condition) (make-non-continuable-violation . f4f24@f4d2e@make-non-continuable-violation) (make-message-condition . f4ede@f4c76@make-message-condition) (make-lexical-violation . f4f34@f4d58@make-lexical-violation) (make-irritants-condition . f4f10@f4cfa@make-irritants-condition) (make-implementation-restriction-violation . f4f2c@f4d43@make-implementation-restriction-violation) (make-error . f4ef8@f4cb9@make-error) (make-assertion-violation . f4f08@f4ce3@make-assertion-violation) (lexical-violation? . f4f35@f4d5a@lexical-violation?) (irritants-condition? . f4f12@f4cfe@irritants-condition?) (implementation-restriction-violation? . f4f2d@f4d45@implementation-restriction-violation?) (error? . f4ef9@f4cbb@error?) (condition-who . f4f1d@f4d1b@condition-who) (condition-message . f4ee1@f4c7c@condition-message) (condition-irritants . f4f13@f4d00@condition-irritants) (assertion-violation? . f4f09@f4ce5@assertion-violation?) (no-nans-violation? . f4fc1@f4ece@no-nans-violation?) (no-infinities-violation? . f4fb9@f4eb9@no-infinities-violation?) (make-no-nans-violation . f4fc0@f4ecc@make-no-nans-violation) (make-no-infinities-violation . f4fb8@f4eb7@make-no-infinities-violation) (assertion-error . f4bfa@f319d@assertion-error))))) (if f5493@t (cdr f5493@t) '#f)))) (f2cd0@f2b1c@install-library 'f546e '(mosh interaction) '() '() '() '() '((regexp? . f5466) (alist->eq-hash-table . f5462) (format . f545f) (string-split . f5454) (call-process . f544e) (set-current-directory! . f544a) (expand-path . f5449) (current-directory . f5448) (%spawn . f5447) (%waitpid . f5446) (simple-struct-name . f5445) (simple-struct-set! . f5444) (simple-struct-ref . f5443) (make-simple-struct . f5442) (simple-struct? . f5441) (pointer-ref-c-int64 . f5440) (pointer-ref-c-int32 . f543f) (pointer-ref-c-int16 . f543e) (pointer-ref-c-int8 . f543d) (pointer-ref-c-uint64 . f543c) (pointer-ref-c-uint32 . f543b) (pointer-ref-c-uint16 . f543a) (pointer-ref-c-uint8 . f5439) (pointer-set-c-uint64! . f5438) (pointer-set-c-uint32! . f5437) (pointer-set-c-uint16! . f5436) (pointer-set-c-uint8! . f5435) (pointer-set-c-int64! . f5434) (pointer-set-c-int32! . f5433) (pointer-set-c-int16! . f5432) (pointer-set-c-int8! . f5431) (pointer-set-c-pointer! . f5430) (pointer-set-c-double! . f542f) (pointer-set-c-float! . f542e) (pointer-set-c-long-long! . f542d) (pointer-set-c-long! . f542c) (pointer-set-c-int! . f542b) (pointer-set-c-short! . f542a) (pointer-set-c-char! . f5429) (pointer-ref-c-pointer . f5428) (pointer-ref-c-double . f5427) (pointer-ref-c-float . f5426) (pointer-ref-c-unsigned-long-long . f5425) (pointer-ref-c-signed-long-long . f5424) (pointer-ref-c-unsigned-long . f5423) (pointer-ref-c-signed-long . f5422) (pointer-ref-c-unsigned-int . f5421) (pointer-ref-c-signed-int . f5420) (pointer-ref-c-unsigned-short . f541f) (pointer-ref-c-signed-short . f541e) (pointer-ref-c-unsigned-char . f541d) (pointer-ref-c-signed-char . f541c) (pointer->integer . f541b) (integer->pointer . f541a) (pointer? . f5419) (shared-errno . f5418) (%ffi-supported? . f5413) (%ffi-pointer->string . f5412) (%ffi-call->string-or-zero . f5411) (%ffi-call->double . f5410) (%ffi-call->void* . f540f) (%ffi-call->void . f540e) (%ffi-call->char . f540d) (%ffi-call->int . f540c) (%ffi-lookup . f540b) (%ffi-open . f540a) (%fork . f5409) (%pipe . f5408) (p . f5407) (whereis . f53eb) (register . f53ea) (vm-join! . f53e9) (vm-set-value! . f53e8) (vm? . f53e7) (main-vm? . f53e6) (vm-eval . f53e5) (vm-self . f53e4) (vm-start! . f53e3) (make-vm . f53e2) (mutex-try-lock! . f53e1) (mutex-unlock! . f53e0) (mutex-lock! . f53df) (mutex? . f53de) (make-mutex . f53dd) (condition-variable-notify-all! . f53dc) (condition-variable-notify! . f53db) (condition-variable-wait! . f53da) (make-condition-variable . f53d9) (string-upcase . f53c1) (string-titlecase . f53c0) (string-normalize-nfkd . f53bf) (string-normalize-nfkc . f53be) (string-normalize-nfd . f53bd) (string-normalize-nfc . f53bc) (string-foldcase . f53bb) (string-downcase . f53ba) (string-ci>? . f53b9) (string-ci>=? . f53b8) (string-ci=? . f53b7) (string-ci<? . f53b6) (string-ci<=? . f53b5) (char-whitespace? . f53b4) (char-upper-case? . f53b3) (char-title-case? . f53b2) (char-numeric? . f53b1) (char-lower-case? . f53b0) (char-general-category . f53af) (char-upcase . f53ae) (char-titlecase . f53ad) (char-foldcase . f53ac) (char-downcase . f53ab) (char-ci>? . f53aa) (char-ci>=? . f53a9) (char-ci=? . f53a8) (char-ci<? . f53a7) (char-ci<=? . f53a6) (char-alphabetic? . f53a5) (make-variable-transformer . f2eed) (identifier? . f31a4) (generate-temporaries . f3190) (free-identifier=? . f3192) (syntax->datum . f31a8) (datum->syntax . f31a6) (bound-identifier=? . f3194) (record-type-descriptor? . f53a4) (record-predicate . f53a3) (record-mutator . f53a2) (record-constructor . f53a1) (record-accessor . f53a0) (make-record-type-descriptor . f539f) (make-record-constructor-descriptor . f539e) (record? . f539d) (record-type-uid . f539c) (record-type-sealed? . f539b) (record-type-parent . f539a) (record-type-opaque? . f5399) (record-type-name . f5398) (record-type-generative? . f5397) (record-type-field-names . f5396) (record-rtd . f5395) (record-field-mutable? . f5394) (delete-file . f5393) (file-exists? . f5392) (vector-sort! . f5391) (vector-sort . f5390) (list-sort . f538f) (symbol-hash . f538e) (string-ci-hash . f538d) (string-hash . f538c) (equal-hash . f538b) (hashtable-equivalence-function . f538a) (make-hashtable . f5389) (hashtable-hash-function . f5388) (make-eqv-hashtable . f5387) (make-eq-hashtable . f5386) (hashtable? . f5385) (hashtable-update! . f5384) (hashtable-size . f5383) (hashtable-set! . f5382) (hashtable-ref . f5381) (hashtable-mutable? . f5380) (hashtable-keys . f537f) (hashtable-entries . f537e) (hashtable-delete! . f537d) (hashtable-copy . f537c) (hashtable-contains? . f537b) (hashtable-clear! . f537a) (call-with-output-file . f5379) (call-with-input-file . f5378) (write-char . f5377) (write . f5376) (with-output-to-file . f5375) (with-input-from-file . f5374) (read-char . f5373) (read . f5372) (peek-char . f5371) (open-output-file . f5370) (open-input-file . f536f) (newline . f536e) (display . f536d) (close-output-port . f536c) (close-input-port . f536b) (eof-object? . f536a) (eof-object . f5369) (current-error-port . f5368) (current-output-port . f5367) (current-input-port . f5366) (output-port? . f5365) (input-port? . f5364) (utf-8-codec . f5363) (utf-16-codec . f5362) (transcoder-error-handling-mode . f5361) (transcoder-eol-style . f5360) (transcoder-codec . f535f) (transcoded-port . f535e) (textual-port? . f535d) (string->bytevector . f535c) (standard-output-port . f535b) (standard-input-port . f535a) (standard-error-port . f5359) (set-port-position! . f5358) (put-u8 . f5357) (put-string . f5356) (put-datum . f5355) (put-char . f5354) (put-bytevector . f5353) (port? . f5352) (port-transcoder . f5351) (port-position . f5350) (port-has-set-port-position!? . f534f) (port-has-port-position? . f534e) (port-eof? . f534d) (output-port-buffer-mode . f534c) (open-string-output-port . f534b) (open-string-input-port . f534a) (open-file-output-port . f5349) (open-file-input/output-port . f5348) (open-file-input-port . f5347) (open-bytevector-output-port . f5346) (open-bytevector-input-port . f5345) (native-transcoder . f5344) (native-eol-style . f5343) (make-transcoder . f5342) (latin-1-codec . f5341) (make-i/o-write-error . f4dcc) (make-i/o-read-error . f4db7) (make-i/o-port-error . f4e6d) (make-i/o-invalid-position-error . f4de3) (make-i/o-filename-error . f4dfe) (make-i/o-file-protection-error . f4e17) (make-i/o-file-is-read-only-error . f4e2c) (make-i/o-file-does-not-exist-error . f4e56) (make-i/o-file-already-exists-error . f4e41) (make-i/o-error . f4da2) (make-i/o-encoding-error . f4e9d) (make-i/o-decoding-error . f4e86) (make-custom-textual-output-port . f5340) (make-custom-textual-input/output-port . f533f) (make-custom-textual-input-port . f533e) (make-custom-binary-output-port . f533d) (make-custom-binary-input/output-port . f533c) (make-custom-binary-input-port . f533b) (make-bytevector . f533a) (lookahead-u8 . f5339) (lookahead-char . f5338) (i/o-write-error? . f4dce) (i/o-read-error? . f4db9) (i/o-port-error? . f4e71) (i/o-invalid-position-error? . f4de7) (i/o-filename-error? . f4e02) (i/o-file-protection-error? . f4e19) (i/o-file-is-read-only-error? . f4e2e) (i/o-file-does-not-exist-error? . f4e58) (i/o-file-already-exists-error? . f4e43) (i/o-error? . f4da4) (i/o-error-position . f4de9) (i/o-error-port . f4e73) (i/o-error-filename . f4e04) (i/o-encoding-error? . f4ea1) (i/o-encoding-error-char . f4ea3) (i/o-decoding-error? . f4e88) (get-u8 . f5337) (get-string-n! . f5336) (get-string-n . f5335) (get-string-all . f5334) (get-line . f5333) (get-datum . f5332) (get-char . f5331) (get-bytevector-some . f5330) (get-bytevector-n! . f532f) (get-bytevector-n . f532e) (get-bytevector-all . f532d) (flush-output-port . f532c) (close-port . f532b) (exit . f5323) (command-line . f4fdc) (string-fill! . f5322) (string-set! . f5321) (set-cdr! . f5320) (set-car! . f531f) (remove . f531e) (remv . f531d) (remp . f531c) (remq . f531b) (partition . f531a) (memv . f5319) (memq . f5318) (memp . f5317) (member . f5316) (exists . f5315) (for-all . f5314) (fold-right . f5313) (fold-left . f5312) (find . f5311) (filter . f5310) (cons* . f530f) (assv . f530e) (assq . f530d) (assp . f530c) (assoc . f530b) (call-with-string-output-port . f530a) (call-with-port . f5309) (call-with-bytevector-output-port . f5308) (bytevector->string . f5307) (buffer-mode? . f5306) (binary-port? . f5305) (with-exception-handler . f5304) (raise-continuable . f5303) (raise . f5302) (eval . f3182) (environment . f317a) (make-enumeration . f5301) (enum-set=? . f5300) (enum-set-universe . f52ff) (enum-set-union . f52fe) (enum-set-subset? . f52fd) (enum-set-projection . f52fc) (enum-set-member? . f52fb) (enum-set-intersection . f52fa) (enum-set-indexer . f52f9) (enum-set-difference . f52f8) (enum-set-constructor . f52f7) (enum-set-complement . f52f6) (enum-set->list . f52f5) (who-condition? . f4d18) (warning? . f4c90) (violation? . f4ccf) (undefined-violation? . f4d8f) (syntax-violation? . f4d76) (syntax-violation-subform . f4d7a) (syntax-violation-form . f4d78) (syntax-violation . f31a2) (simple-conditions . f52f4) (serious-condition? . f4ca5) (non-continuable-violation? . f4d2f) (message-condition? . f4c79) (make-who-condition . f4d14) (make-warning . f4c8e) (make-violation . f4ccd) (make-undefined-violation . f4d8d) (make-syntax-violation . f4d70) (make-serious-condition . f4ca3) (make-non-continuable-violation . f4d2d) (make-message-condition . f4c75) (make-lexical-violation . f4d57) (make-irritants-condition . f4cf9) (make-implementation-restriction-violation . f4d42) (make-error . f4cb8) (make-assertion-violation . f4ce2) (lexical-violation? . f4d59) (irritants-condition? . f4cfd) (implementation-restriction-violation? . f4d44) (error? . f4cba) (condition-who . f4d1a) (condition-predicate . f52f3) (condition-message . f4c7b) (condition-irritants . f4cff) (condition-accessor . f52f2) (condition . f52f1) (assertion-violation? . f4ce4) (condition? . f52f0) (utf32->string . f52ef) (utf16->string . f52ee) (utf8->string . f52ed) (uint-list->bytevector . f52ec) (u8-list->bytevector . f52eb) (string->utf8 . f52ea) (string->utf32 . f52e9) (string->utf16 . f52e8) (sint-list->bytevector . f52e7) (native-endianness . f52e6) (bytevector? . f52e5) (bytevector=? . f52e4) (bytevector-uint-set! . f52e3) (bytevector-uint-ref . f52e2) (bytevector-u8-set! . f52e1) (bytevector-u8-ref . f52e0) (bytevector-u64-set! . f52df) (bytevector-u64-ref . f52de) (bytevector-u64-native-set! . f52dd) (bytevector-u64-native-ref . f52dc) (bytevector-u32-set! . f52db) (bytevector-u32-ref . f52da) (bytevector-u32-native-set! . f52d9) (bytevector-u32-native-ref . f52d8) (bytevector-u16-set! . f52d7) (bytevector-u16-ref . f52d6) (bytevector-u16-native-set! . f52d5) (bytevector-u16-native-ref . f52d4) (bytevector-sint-set! . f52d3) (bytevector-sint-ref . f52d2) (bytevector-s8-set! . f52d1) (bytevector-s8-ref . f52d0) (bytevector-s64-set! . f52cf) (bytevector-s64-ref . f52ce) (bytevector-s64-native-set! . f52cd) (bytevector-s64-native-ref . f52cc) (bytevector-s32-set! . f52cb) (bytevector-s32-ref . f52ca) (bytevector-s32-native-set! . f52c9) (bytevector-s32-native-ref . f52c8) (bytevector-s16-set! . f52c7) (bytevector-s16-ref . f52c6) (bytevector-s16-native-set! . f52c5) (bytevector-s16-native-ref . f52c4) (bytevector-length . f52c3) (bytevector-ieee-single-ref . f52c2) (bytevector-ieee-single-set! . f52c1) (bytevector-ieee-single-native-set! . f52c0) (bytevector-ieee-single-native-ref . f52bf) (bytevector-ieee-double-set! . f52be) (bytevector-ieee-double-ref . f52bd) (bytevector-ieee-double-native-set! . f52bc) (bytevector-ieee-double-native-ref . f52bb) (bytevector-fill! . f52ba) (bytevector-copy! . f52b9) (bytevector-copy . f52b8) (bytevector->uint-list . f52b7) (bytevector->u8-list . f52b6) (bytevector->sint-list . f52b5) (no-nans-violation? . f4ecd) (no-infinities-violation? . f4eb8) (make-no-nans-violation . f4ecb) (make-no-infinities-violation . f4eb6) (real->flonum . f52b4) (flzero? . f52b3) (fltruncate . f52b2) (fltan . f52b1) (flsqrt . f52b0) (flsin . f52af) (flround . f52ae) (flpositive? . f52ad) (flonum? . f52ac) (flodd? . f52ab) (flnumerator . f52aa) (flnegative? . f52a9) (flnan? . f52a8) (flmod0 . f52a7) (flmod . f52a6) (flmin . f52a5) (flmax . f52a4) (fllog . f52a3) (flinteger? . f52a2) (flinfinite? . f52a1) (flfloor . f52a0) (flfinite? . f529f) (flexpt . f529e) (flexp . f529d) (fleven? . f529c) (fldiv0-and-mod0 . f529b) (fldiv0 . f529a) (fldiv-and-mod . f5299) (fldiv . f5298) (fldenominator . f5297) (flcos . f5296) (flceiling . f5295) (flatan . f5294) (flasin . f5293) (flacos . f5292) (flabs . f5291) (fl>? . f5290) (fl>=? . f528f) (fl=? . f528e) (fl<? . f528d) (fl<=? . f528c) (fl/ . f528b) (fl- . f528a) (fl+ . f5289) (fl* . f5288) (fixnum->flonum . f5287) (fxzero? . f5286) (fxxor . f5285) (fxrotate-bit-field . f5284) (fxreverse-bit-field . f5283) (fxpositive? . f5282) (fxodd? . f5281) (fxnot . f5280) (fxnegative? . f527f) (fxmod0 . f527e) (fxmod . f527d) (fxmin . f527c) (fxmax . f527b) (fxlength . f527a) (fxior . f5279) (fxif . f5278) (fxfirst-bit-set . f5277) (fxeven? . f5276) (fxdiv0-and-mod0 . f5275) (fxdiv0 . f5274) (fxdiv-and-mod . f5273) (fxdiv . f5272) (fxcopy-bit-field . f5271) (fxcopy-bit . f5270) (fxbit-set? . f526f) (fxbit-field . f526e) (fxbit-count . f526d) (fxarithmetic-shift-right . f526c) (fxarithmetic-shift-left . f526b) (fxarithmetic-shift . f526a) (fxand . f5269) (fx>? . f5268) (fx>=? . f5267) (fx=? . f5266) (fx<? . f5265) (fx<=? . f5264) (fx-/carry . f5263) (fx- . f5262) (fx+/carry . f5261) (fx+ . f5260) (fx*/carry . f525f) (fx* . f525e) (greatest-fixnum . f525d) (least-fixnum . f525c) (fixnum-width . f525b) (fixnum? . f525a) (bitwise-rotate-bit-field . f5259) (bitwise-reverse-bit-field . f5258) (bitwise-length . f5257) (bitwise-if . f5256) (bitwise-first-bit-set . f5255) (bitwise-copy-bit-field . f5254) (bitwise-copy-bit . f5253) (bitwise-bit-set? . f5252) (bitwise-bit-field . f5251) (bitwise-bit-count . f5250) (bitwise-xor . f524f) (bitwise-ior . f524e) (bitwise-and . f524d) (bitwise-not . f524c) (bitwise-arithmetic-shift-right . f524b) (bitwise-arithmetic-shift-left . f524a) (bitwise-arithmetic-shift . f5249) (zero? . f5248) (vector? . f5247) (vector-set! . f5246) (vector-ref . f5245) (vector-map . f5244) (vector-length . f5243) (vector-for-each . f5242) (vector-fill! . f5241) (vector->list . f5240) (vector . f523f) (values . f523e) (truncate . f523d) (tan . f523c) (symbol? . f523b) (symbol=? . f523a) (symbol->string . f5239) (substring . f5238) (string? . f5237) (string>? . f5236) (string>=? . f5235) (string=? . f5234) (string<? . f5233) (string<=? . f5232) (string-ref . f5231) (string-length . f5230) (string-for-each . f522f) (string-copy . f522e) (string-append . f522d) (string->symbol . f522c) (string->number . f522b) (string->list . f522a) (string . f5229) (sqrt . f5228) (sin . f5227) (round . f5226) (reverse . f5225) (real? . f5224) (real-valued? . f5223) (real-part . f5222) (rationalize . f5221) (rational? . f5220) (rational-valued? . f521f) (procedure? . f521e) (positive? . f521d) (pair? . f521c) (odd? . f521b) (numerator . f521a) (number? . f5219) (number->string . f5218) (null? . f5217) (not . f5216) (negative? . f5215) (nan? . f5214) (min . f5213) (max . f5212) (map . f5211) (make-vector . f5210) (make-string . f520f) (make-rectangular . f520e) (make-polar . f520d) (magnitude . f520c) (log . f520b) (list? . f520a) (list-tail . f5209) (list-ref . f5208) (list->vector . f5207) (list->string . f5206) (list . f5205) (length . f5204) (lcm . f5203) (integer? . f5202) (integer-valued? . f5201) (integer->char . f5200) (infinite? . f51ff) (inexact? . f51fe) (inexact . f51fd) (imag-part . f51fc) (gcd . f51fb) (for-each . f51fa) (floor . f51f9) (finite? . f51f8) (expt . f51f7) (exp . f51f6) (exact? . f51f5) (exact-integer-sqrt . f51f4) (exact . f51f3) (even? . f51f2) (error . f51f1) (eqv? . f51f0) (equal? . f51ef) (eq? . f51ee) (dynamic-wind . f51ed) (div0-and-mod0 . f51ec) (mod0 . f51eb) (div0 . f51ea) (div-and-mod . f51e9) (mod . f51e8) (div . f51e7) (denominator . f51e6) (cos . f51e5) (cons . f51e4) (complex? . f51e3) (char? . f51e2) (char>? . f51e1) (char>=? . f51e0) (char=? . f51df) (char<? . f51de) (char<=? . f51dd) (char->integer . f51dc) (ceiling . f51db) (call-with-values . f51da) (call/cc . f51d9) (call-with-current-continuation . f51d8) (cddddr . f51d7) (cdddar . f51d6) (cddadr . f51d5) (cddaar . f51d4) (cdaddr . f51d3) (cdadar . f51d2) (cdaadr . f51d1) (cdaaar . f51d0) (cadddr . f51cf) (caddar . f51ce) (cadadr . f51cd) (cadaar . f51cc) (caaddr . f51cb) (caadar . f51ca) (caaadr . f51c9) (caaaar . f51c8) (cdddr . f51c7) (cddar . f51c6) (cdadr . f51c5) (cdaar . f51c4) (caddr . f51c3) (cadar . f51c2) (caadr . f51c1) (caaar . f51c0) (cddr . f51bf) (cdar . f51be) (cadr . f51bd) (caar . f51bc) (cdr . f51bb) (car . f51ba) (boolean? . f51b9) (boolean=? . f51b8) (atan . f51b7) (assertion-violation . f51b6) (asin . f51b5) (apply . f51b4) (append . f51b3) (angle . f51b2) (acos . f51b1) (abs . f51b0) (/ . f51af) (* . f51ae) (- . f51ad) (+ . f51ac) (>= . f51ab) (> . f51aa) (= . f51a9) (<= . f51a8) (< . f51a7) (library . f51a6) (&no-nans . f51a5) (&no-infinities . f51a4) (&i/o-encoding . f51a3) (&i/o-decoding . f51a2) (&i/o-port . f51a1) (&i/o-file-does-not-exist . f51a0) (&i/o-file-already-exists . f519f) (&i/o-file-is-read-only . f519e) (&i/o-file-protection . f519d) (&i/o-filename . f519c) (&i/o-invalid-position . f519b) (&i/o-write . f519a) (&i/o-read . f5199) (&i/o . f5198) (&undefined . f5197) (&syntax . f5196) (&lexical . f5195) (&implementation-restriction . f5194) (&non-continuable . f5193) (&who . f5192) (&irritants . f5191) (&assertion . f5190) (&violation . f518f) (&error . f518e) (&serious . f518d) (&warning . f518c) (&message . f518b) (&condition . f518a) (define-condition-type . f5189) (define-enumeration . f5188) (define-record-type . f5187) (parent-rtd . f5186) (nongenerative . f5185) (opaque . f5184) (sealed . f5183) (protocol . f5182) (parent . f5181) (immutable . f5180) (mutable . f517f) (fields . f517e) (error-handling-mode . f517d) (file-options . f517c) (buffer-mode . f517b) (eol-style . f517a) (guard . f5179) (unsyntax-splicing . f5176) (unsyntax . f5175) (unquote-splicing . f5174) (unquote . f5173) (_ . f5172) (else . f5171) (=> . f5170) (... . f516f) (assert . f516e) (endianness . f516d) (time . f516b) (do . f516a) (cond . f5169) (let* . f5168) (let*-values . f5167) (let-values . f5166) (identifier-syntax . f5165) (with-syntax . f5164) (quasisyntax . f5163) (quasiquote . f5162) (syntax-rules . f5161) (include . f5160) (record-constructor-descriptor . f515e) (record-type-descriptor . f515d) (case . f515c) (unless . f515a) (when . f5159) (or . f5158) (and . f5157) (if . f5156) (let . f5155) (letrec* . f5154) (letrec . f5153) (case-lambda . f5151) (lambda . f5150) (syntax . f514f) (syntax-case . f514e) (quote . f514d) (letrec-syntax . f514b) (let-syntax . f514a) (set! . f5149) (import . f5148) (begin . f5147) (define-syntax . f5145) (define . f5144)) '() values values '#f '#f '#t '#f) (f2cd0@f2b1c@install-library 'f546f '(psyntax null-environment-5) '() '() '() '() '((make-promise . f5324) (unquote-splicing . f5174) (unquote . f5173) (_ . f5172) (else . f5171) (=> . f5170) (... . f516f) (delay . f516c) (do . f516a) (cond . f5169) (let* . f5168) (quasiquote . f5162) (syntax-rules . f5161) (case . f515c) (or . f5158) (and . f5157) (if . f5156) (let . f5155) (letrec . f5153) (lambda . f5150) (quote . f514d) (letrec-syntax . f514b) (let-syntax . f514a) (set! . f5149) (begin . f5147) (define-syntax . f5145) (define . f5144)) '() values values '#f '#f '#t '#f) (f2cd0@f2b1c@install-library 'f5470 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . f53b9) (string-ci>=? . f53b8) (string-ci=? . f53b7) (string-ci<? . f53b6) (string-ci<=? . f53b5) (char-whitespace? . f53b4) (char-upper-case? . f53b3) (char-numeric? . f53b1) (char-lower-case? . f53b0) (char-upcase . f53ae) (char-downcase . f53ab) (char-ci>? . f53aa) (char-ci>=? . f53a9) (char-ci=? . f53a8) (char-ci<? . f53a7) (char-ci<=? . f53a6) (char-alphabetic? . f53a5) (call-with-output-file . f5379) (call-with-input-file . f5378) (write-char . f5377) (write . f5376) (with-output-to-file . f5375) (with-input-from-file . f5374) (read-char . f5373) (read . f5372) (peek-char . f5371) (open-output-file . f5370) (open-input-file . f536f) (newline . f536e) (display . f536d) (close-output-port . f536c) (close-input-port . f536b) (eof-object . f5369) (current-output-port . f5367) (current-input-port . f5366) (output-port? . f5365) (input-port? . f5364) (scheme-report-environment . f317e) (quotient . f532a) (null-environment . f317c) (remainder . f5329) (modulo . f5328) (inexact->exact . f5327) (force . f5326) (exact->inexact . f5325) (make-promise . f5324) (string-fill! . f5322) (string-set! . f5321) (set-cdr! . f5320) (set-car! . f531f) (memv . f5319) (memq . f5318) (member . f5316) (assv . f530e) (assq . f530d) (assoc . f530b) (eval . f3182) (zero? . f5248) (vector? . f5247) (vector-set! . f5246) (vector-ref . f5245) (vector-length . f5243) (vector-fill! . f5241) (vector->list . f5240) (vector . f523f) (values . f523e) (truncate . f523d) (tan . f523c) (symbol? . f523b) (symbol->string . f5239) (substring . f5238) (string? . f5237) (string>? . f5236) (string>=? . f5235) (string=? . f5234) (string<? . f5233) (string<=? . f5232) (string-ref . f5231) (string-length . f5230) (string-copy . f522e) (string-append . f522d) (string->symbol . f522c) (string->number . f522b) (string->list . f522a) (string . f5229) (sqrt . f5228) (sin . f5227) (round . f5226) (reverse . f5225) (real? . f5224) (real-part . f5222) (rationalize . f5221) (rational? . f5220) (procedure? . f521e) (positive? . f521d) (pair? . f521c) (odd? . f521b) (numerator . f521a) (number? . f5219) (number->string . f5218) (not . f5216) (negative? . f5215) (min . f5213) (max . f5212) (map . f5211) (make-vector . f5210) (make-string . f520f) (make-rectangular . f520e) (make-polar . f520d) (magnitude . f520c) (log . f520b) (list? . f520a) (list-tail . f5209) (list-ref . f5208) (list->vector . f5207) (list->string . f5206) (list . f5205) (length . f5204) (lcm . f5203) (integer? . f5202) (integer->char . f5200) (inexact? . f51fe) (imag-part . f51fc) (gcd . f51fb) (for-each . f51fa) (floor . f51f9) (expt . f51f7) (exp . f51f6) (exact? . f51f5) (even? . f51f2) (eqv? . f51f0) (equal? . f51ef) (eq? . f51ee) (dynamic-wind . f51ed) (denominator . f51e6) (cos . f51e5) (cons . f51e4) (complex? . f51e3) (char? . f51e2) (char>? . f51e1) (char>=? . f51e0) (char=? . f51df) (char<? . f51de) (char<=? . f51dd) (char->integer . f51dc) (ceiling . f51db) (call-with-values . f51da) (call-with-current-continuation . f51d8) (cddddr . f51d7) (cdddar . f51d6) (cddadr . f51d5) (cddaar . f51d4) (cdaddr . f51d3) (cdadar . f51d2) (cdaadr . f51d1) (cdaaar . f51d0) (cadddr . f51cf) (caddar . f51ce) (cadadr . f51cd) (cadaar . f51cc) (caaddr . f51cb) (caadar . f51ca) (caaadr . f51c9) (caaaar . f51c8) (cdddr . f51c7) (cddar . f51c6) (cdadr . f51c5) (cdaar . f51c4) (caddr . f51c3) (cadar . f51c2) (caadr . f51c1) (caaar . f51c0) (cddr . f51bf) (cdar . f51be) (cadr . f51bd) (caar . f51bc) (cdr . f51bb) (car . f51ba) (boolean? . f51b9) (atan . f51b7) (asin . f51b5) (apply . f51b4) (append . f51b3) (angle . f51b2) (acos . f51b1) (abs . f51b0) (/ . f51af) (* . f51ae) (- . f51ad) (+ . f51ac) (>= . f51ab) (> . f51aa) (= . f51a9) (<= . f51a8) (< . f51a7) (unquote-splicing . f5174) (unquote . f5173) (else . f5171) (=> . f5170) (... . f516f) (delay . f516c) (do . f516a) (cond . f5169) (let* . f5168) (quasiquote . f5162) (syntax-rules . f5161) (case . f515c) (or . f5158) (and . f5157) (if . f5156) (let . f5155) (letrec . f5153) (lambda . f5150) (quote . f514d) (letrec-syntax . f514b) (let-syntax . f514a) (set! . f5149) (begin . f5147) (define-syntax . f5145) (define . f5144)) '() values values '#f '#f '#t '#f) (f2cd0@f2b1c@install-library 'f5471 '(psyntax modules) '() '() '() '() '((module . f5146)) '() values values '#f '#f '#t '#f) (f2cd0@f2b1c@install-library 'f5472 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (f2cd0@f2b1c@install-library 'f5473 '(rnrs) '(6) '() '() '() '((regexp? . f5466) (string-upcase . f53c1) (string-titlecase . f53c0) (string-normalize-nfkd . f53bf) (string-normalize-nfkc . f53be) (string-normalize-nfd . f53bd) (string-normalize-nfc . f53bc) (string-foldcase . f53bb) (string-downcase . f53ba) (string-ci>? . f53b9) (string-ci>=? . f53b8) (string-ci=? . f53b7) (string-ci<? . f53b6) (string-ci<=? . f53b5) (char-whitespace? . f53b4) (char-upper-case? . f53b3) (char-title-case? . f53b2) (char-numeric? . f53b1) (char-lower-case? . f53b0) (char-general-category . f53af) (char-upcase . f53ae) (char-titlecase . f53ad) (char-foldcase . f53ac) (char-downcase . f53ab) (char-ci>? . f53aa) (char-ci>=? . f53a9) (char-ci=? . f53a8) (char-ci<? . f53a7) (char-ci<=? . f53a6) (char-alphabetic? . f53a5) (make-variable-transformer . f2eed) (identifier? . f31a4) (generate-temporaries . f3190) (free-identifier=? . f3192) (syntax->datum . f31a8) (datum->syntax . f31a6) (bound-identifier=? . f3194) (record-type-descriptor? . f53a4) (record-predicate . f53a3) (record-mutator . f53a2) (record-constructor . f53a1) (record-accessor . f53a0) (make-record-type-descriptor . f539f) (make-record-constructor-descriptor . f539e) (record? . f539d) (record-type-uid . f539c) (record-type-sealed? . f539b) (record-type-parent . f539a) (record-type-opaque? . f5399) (record-type-name . f5398) (record-type-generative? . f5397) (record-type-field-names . f5396) (record-rtd . f5395) (record-field-mutable? . f5394) (delete-file . f5393) (file-exists? . f5392) (vector-sort! . f5391) (vector-sort . f5390) (list-sort . f538f) (symbol-hash . f538e) (string-ci-hash . f538d) (string-hash . f538c) (equal-hash . f538b) (hashtable-equivalence-function . f538a) (make-hashtable . f5389) (hashtable-hash-function . f5388) (make-eqv-hashtable . f5387) (make-eq-hashtable . f5386) (hashtable? . f5385) (hashtable-update! . f5384) (hashtable-size . f5383) (hashtable-set! . f5382) (hashtable-ref . f5381) (hashtable-mutable? . f5380) (hashtable-keys . f537f) (hashtable-entries . f537e) (hashtable-delete! . f537d) (hashtable-copy . f537c) (hashtable-contains? . f537b) (hashtable-clear! . f537a) (call-with-output-file . f5379) (call-with-input-file . f5378) (write-char . f5377) (write . f5376) (with-output-to-file . f5375) (with-input-from-file . f5374) (read-char . f5373) (read . f5372) (peek-char . f5371) (open-output-file . f5370) (open-input-file . f536f) (newline . f536e) (display . f536d) (close-output-port . f536c) (close-input-port . f536b) (eof-object? . f536a) (eof-object . f5369) (current-error-port . f5368) (current-output-port . f5367) (current-input-port . f5366) (output-port? . f5365) (input-port? . f5364) (utf-8-codec . f5363) (utf-16-codec . f5362) (transcoder-error-handling-mode . f5361) (transcoder-eol-style . f5360) (transcoder-codec . f535f) (transcoded-port . f535e) (textual-port? . f535d) (string->bytevector . f535c) (standard-output-port . f535b) (standard-input-port . f535a) (standard-error-port . f5359) (set-port-position! . f5358) (put-u8 . f5357) (put-string . f5356) (put-datum . f5355) (put-char . f5354) (put-bytevector . f5353) (port? . f5352) (port-transcoder . f5351) (port-position . f5350) (port-has-set-port-position!? . f534f) (port-has-port-position? . f534e) (port-eof? . f534d) (output-port-buffer-mode . f534c) (open-string-output-port . f534b) (open-string-input-port . f534a) (open-file-output-port . f5349) (open-file-input/output-port . f5348) (open-file-input-port . f5347) (open-bytevector-output-port . f5346) (open-bytevector-input-port . f5345) (native-transcoder . f5344) (native-eol-style . f5343) (make-transcoder . f5342) (latin-1-codec . f5341) (make-i/o-write-error . f4dcc) (make-i/o-read-error . f4db7) (make-i/o-port-error . f4e6d) (make-i/o-invalid-position-error . f4de3) (make-i/o-filename-error . f4dfe) (make-i/o-file-protection-error . f4e17) (make-i/o-file-is-read-only-error . f4e2c) (make-i/o-file-does-not-exist-error . f4e56) (make-i/o-file-already-exists-error . f4e41) (make-i/o-error . f4da2) (make-i/o-encoding-error . f4e9d) (make-i/o-decoding-error . f4e86) (make-custom-textual-output-port . f5340) (make-custom-textual-input/output-port . f533f) (make-custom-textual-input-port . f533e) (make-custom-binary-output-port . f533d) (make-custom-binary-input/output-port . f533c) (make-custom-binary-input-port . f533b) (make-bytevector . f533a) (lookahead-u8 . f5339) (lookahead-char . f5338) (i/o-write-error? . f4dce) (i/o-read-error? . f4db9) (i/o-port-error? . f4e71) (i/o-invalid-position-error? . f4de7) (i/o-filename-error? . f4e02) (i/o-file-protection-error? . f4e19) (i/o-file-is-read-only-error? . f4e2e) (i/o-file-does-not-exist-error? . f4e58) (i/o-file-already-exists-error? . f4e43) (i/o-error? . f4da4) (i/o-error-position . f4de9) (i/o-error-port . f4e73) (i/o-error-filename . f4e04) (i/o-encoding-error? . f4ea1) (i/o-encoding-error-char . f4ea3) (i/o-decoding-error? . f4e88) (get-u8 . f5337) (get-string-n! . f5336) (get-string-n . f5335) (get-string-all . f5334) (get-line . f5333) (get-datum . f5332) (get-char . f5331) (get-bytevector-some . f5330) (get-bytevector-n! . f532f) (get-bytevector-n . f532e) (get-bytevector-all . f532d) (flush-output-port . f532c) (close-port . f532b) (exit . f5323) (command-line . f4fdc) (remove . f531e) (remv . f531d) (remp . f531c) (remq . f531b) (partition . f531a) (memv . f5319) (memq . f5318) (memp . f5317) (member . f5316) (exists . f5315) (for-all . f5314) (fold-right . f5313) (fold-left . f5312) (find . f5311) (filter . f5310) (cons* . f530f) (assv . f530e) (assq . f530d) (assp . f530c) (assoc . f530b) (call-with-string-output-port . f530a) (call-with-port . f5309) (call-with-bytevector-output-port . f5308) (bytevector->string . f5307) (buffer-mode? . f5306) (binary-port? . f5305) (with-exception-handler . f5304) (raise-continuable . f5303) (raise . f5302) (make-enumeration . f5301) (enum-set=? . f5300) (enum-set-universe . f52ff) (enum-set-union . f52fe) (enum-set-subset? . f52fd) (enum-set-projection . f52fc) (enum-set-member? . f52fb) (enum-set-intersection . f52fa) (enum-set-indexer . f52f9) (enum-set-difference . f52f8) (enum-set-constructor . f52f7) (enum-set-complement . f52f6) (enum-set->list . f52f5) (who-condition? . f4d18) (warning? . f4c90) (violation? . f4ccf) (undefined-violation? . f4d8f) (syntax-violation? . f4d76) (syntax-violation-subform . f4d7a) (syntax-violation-form . f4d78) (syntax-violation . f31a2) (simple-conditions . f52f4) (serious-condition? . f4ca5) (non-continuable-violation? . f4d2f) (message-condition? . f4c79) (make-who-condition . f4d14) (make-warning . f4c8e) (make-violation . f4ccd) (make-undefined-violation . f4d8d) (make-syntax-violation . f4d70) (make-serious-condition . f4ca3) (make-non-continuable-violation . f4d2d) (make-message-condition . f4c75) (make-lexical-violation . f4d57) (make-irritants-condition . f4cf9) (make-implementation-restriction-violation . f4d42) (make-error . f4cb8) (make-assertion-violation . f4ce2) (lexical-violation? . f4d59) (irritants-condition? . f4cfd) (implementation-restriction-violation? . f4d44) (error? . f4cba) (condition-who . f4d1a) (condition-predicate . f52f3) (condition-message . f4c7b) (condition-irritants . f4cff) (condition-accessor . f52f2) (condition . f52f1) (assertion-violation? . f4ce4) (condition? . f52f0) (utf32->string . f52ef) (utf16->string . f52ee) (utf8->string . f52ed) (uint-list->bytevector . f52ec) (u8-list->bytevector . f52eb) (string->utf8 . f52ea) (string->utf32 . f52e9) (string->utf16 . f52e8) (sint-list->bytevector . f52e7) (native-endianness . f52e6) (bytevector? . f52e5) (bytevector=? . f52e4) (bytevector-uint-set! . f52e3) (bytevector-uint-ref . f52e2) (bytevector-u8-set! . f52e1) (bytevector-u8-ref . f52e0) (bytevector-u64-set! . f52df) (bytevector-u64-ref . f52de) (bytevector-u64-native-set! . f52dd) (bytevector-u64-native-ref . f52dc) (bytevector-u32-set! . f52db) (bytevector-u32-ref . f52da) (bytevector-u32-native-set! . f52d9) (bytevector-u32-native-ref . f52d8) (bytevector-u16-set! . f52d7) (bytevector-u16-ref . f52d6) (bytevector-u16-native-set! . f52d5) (bytevector-u16-native-ref . f52d4) (bytevector-sint-set! . f52d3) (bytevector-sint-ref . f52d2) (bytevector-s8-set! . f52d1) (bytevector-s8-ref . f52d0) (bytevector-s64-set! . f52cf) (bytevector-s64-ref . f52ce) (bytevector-s64-native-set! . f52cd) (bytevector-s64-native-ref . f52cc) (bytevector-s32-set! . f52cb) (bytevector-s32-ref . f52ca) (bytevector-s32-native-set! . f52c9) (bytevector-s32-native-ref . f52c8) (bytevector-s16-set! . f52c7) (bytevector-s16-ref . f52c6) (bytevector-s16-native-set! . f52c5) (bytevector-s16-native-ref . f52c4) (bytevector-length . f52c3) (bytevector-ieee-single-ref . f52c2) (bytevector-ieee-single-set! . f52c1) (bytevector-ieee-single-native-set! . f52c0) (bytevector-ieee-single-native-ref . f52bf) (bytevector-ieee-double-set! . f52be) (bytevector-ieee-double-ref . f52bd) (bytevector-ieee-double-native-set! . f52bc) (bytevector-ieee-double-native-ref . f52bb) (bytevector-fill! . f52ba) (bytevector-copy! . f52b9) (bytevector-copy . f52b8) (bytevector->uint-list . f52b7) (bytevector->u8-list . f52b6) (bytevector->sint-list . f52b5) (no-nans-violation? . f4ecd) (no-infinities-violation? . f4eb8) (make-no-nans-violation . f4ecb) (make-no-infinities-violation . f4eb6) (real->flonum . f52b4) (flzero? . f52b3) (fltruncate . f52b2) (fltan . f52b1) (flsqrt . f52b0) (flsin . f52af) (flround . f52ae) (flpositive? . f52ad) (flonum? . f52ac) (flodd? . f52ab) (flnumerator . f52aa) (flnegative? . f52a9) (flnan? . f52a8) (flmod0 . f52a7) (flmod . f52a6) (flmin . f52a5) (flmax . f52a4) (fllog . f52a3) (flinteger? . f52a2) (flinfinite? . f52a1) (flfloor . f52a0) (flfinite? . f529f) (flexpt . f529e) (flexp . f529d) (fleven? . f529c) (fldiv0-and-mod0 . f529b) (fldiv0 . f529a) (fldiv-and-mod . f5299) (fldiv . f5298) (fldenominator . f5297) (flcos . f5296) (flceiling . f5295) (flatan . f5294) (flasin . f5293) (flacos . f5292) (flabs . f5291) (fl>? . f5290) (fl>=? . f528f) (fl=? . f528e) (fl<? . f528d) (fl<=? . f528c) (fl/ . f528b) (fl- . f528a) (fl+ . f5289) (fl* . f5288) (fixnum->flonum . f5287) (fxzero? . f5286) (fxxor . f5285) (fxrotate-bit-field . f5284) (fxreverse-bit-field . f5283) (fxpositive? . f5282) (fxodd? . f5281) (fxnot . f5280) (fxnegative? . f527f) (fxmod0 . f527e) (fxmod . f527d) (fxmin . f527c) (fxmax . f527b) (fxlength . f527a) (fxior . f5279) (fxif . f5278) (fxfirst-bit-set . f5277) (fxeven? . f5276) (fxdiv0-and-mod0 . f5275) (fxdiv0 . f5274) (fxdiv-and-mod . f5273) (fxdiv . f5272) (fxcopy-bit-field . f5271) (fxcopy-bit . f5270) (fxbit-set? . f526f) (fxbit-field . f526e) (fxbit-count . f526d) (fxarithmetic-shift-right . f526c) (fxarithmetic-shift-left . f526b) (fxarithmetic-shift . f526a) (fxand . f5269) (fx>? . f5268) (fx>=? . f5267) (fx=? . f5266) (fx<? . f5265) (fx<=? . f5264) (fx-/carry . f5263) (fx- . f5262) (fx+/carry . f5261) (fx+ . f5260) (fx*/carry . f525f) (fx* . f525e) (greatest-fixnum . f525d) (least-fixnum . f525c) (fixnum-width . f525b) (fixnum? . f525a) (bitwise-rotate-bit-field . f5259) (bitwise-reverse-bit-field . f5258) (bitwise-length . f5257) (bitwise-if . f5256) (bitwise-first-bit-set . f5255) (bitwise-copy-bit-field . f5254) (bitwise-copy-bit . f5253) (bitwise-bit-set? . f5252) (bitwise-bit-field . f5251) (bitwise-bit-count . f5250) (bitwise-xor . f524f) (bitwise-ior . f524e) (bitwise-and . f524d) (bitwise-not . f524c) (bitwise-arithmetic-shift-right . f524b) (bitwise-arithmetic-shift-left . f524a) (bitwise-arithmetic-shift . f5249) (zero? . f5248) (vector? . f5247) (vector-set! . f5246) (vector-ref . f5245) (vector-map . f5244) (vector-length . f5243) (vector-for-each . f5242) (vector-fill! . f5241) (vector->list . f5240) (vector . f523f) (values . f523e) (truncate . f523d) (tan . f523c) (symbol? . f523b) (symbol=? . f523a) (symbol->string . f5239) (substring . f5238) (string? . f5237) (string>? . f5236) (string>=? . f5235) (string=? . f5234) (string<? . f5233) (string<=? . f5232) (string-ref . f5231) (string-length . f5230) (string-for-each . f522f) (string-copy . f522e) (string-append . f522d) (string->symbol . f522c) (string->number . f522b) (string->list . f522a) (string . f5229) (sqrt . f5228) (sin . f5227) (round . f5226) (reverse . f5225) (real? . f5224) (real-valued? . f5223) (real-part . f5222) (rationalize . f5221) (rational? . f5220) (rational-valued? . f521f) (procedure? . f521e) (positive? . f521d) (pair? . f521c) (odd? . f521b) (numerator . f521a) (number? . f5219) (number->string . f5218) (null? . f5217) (not . f5216) (negative? . f5215) (nan? . f5214) (min . f5213) (max . f5212) (map . f5211) (make-vector . f5210) (make-string . f520f) (make-rectangular . f520e) (make-polar . f520d) (magnitude . f520c) (log . f520b) (list? . f520a) (list-tail . f5209) (list-ref . f5208) (list->vector . f5207) (list->string . f5206) (list . f5205) (length . f5204) (lcm . f5203) (integer? . f5202) (integer-valued? . f5201) (integer->char . f5200) (infinite? . f51ff) (inexact? . f51fe) (inexact . f51fd) (imag-part . f51fc) (gcd . f51fb) (for-each . f51fa) (floor . f51f9) (finite? . f51f8) (expt . f51f7) (exp . f51f6) (exact? . f51f5) (exact-integer-sqrt . f51f4) (exact . f51f3) (even? . f51f2) (error . f51f1) (eqv? . f51f0) (equal? . f51ef) (eq? . f51ee) (dynamic-wind . f51ed) (div0-and-mod0 . f51ec) (mod0 . f51eb) (div0 . f51ea) (div-and-mod . f51e9) (mod . f51e8) (div . f51e7) (denominator . f51e6) (cos . f51e5) (cons . f51e4) (complex? . f51e3) (char? . f51e2) (char>? . f51e1) (char>=? . f51e0) (char=? . f51df) (char<? . f51de) (char<=? . f51dd) (char->integer . f51dc) (ceiling . f51db) (call-with-values . f51da) (call/cc . f51d9) (call-with-current-continuation . f51d8) (cddddr . f51d7) (cdddar . f51d6) (cddadr . f51d5) (cddaar . f51d4) (cdaddr . f51d3) (cdadar . f51d2) (cdaadr . f51d1) (cdaaar . f51d0) (cadddr . f51cf) (caddar . f51ce) (cadadr . f51cd) (cadaar . f51cc) (caaddr . f51cb) (caadar . f51ca) (caaadr . f51c9) (caaaar . f51c8) (cdddr . f51c7) (cddar . f51c6) (cdadr . f51c5) (cdaar . f51c4) (caddr . f51c3) (cadar . f51c2) (caadr . f51c1) (caaar . f51c0) (cddr . f51bf) (cdar . f51be) (cadr . f51bd) (caar . f51bc) (cdr . f51bb) (car . f51ba) (boolean? . f51b9) (boolean=? . f51b8) (atan . f51b7) (assertion-violation . f51b6) (asin . f51b5) (apply . f51b4) (append . f51b3) (angle . f51b2) (acos . f51b1) (abs . f51b0) (/ . f51af) (* . f51ae) (- . f51ad) (+ . f51ac) (>= . f51ab) (> . f51aa) (= . f51a9) (<= . f51a8) (< . f51a7) (&no-nans . f51a5) (&no-infinities . f51a4) (&i/o-encoding . f51a3) (&i/o-decoding . f51a2) (&i/o-port . f51a1) (&i/o-file-does-not-exist . f51a0) (&i/o-file-already-exists . f519f) (&i/o-file-is-read-only . f519e) (&i/o-file-protection . f519d) (&i/o-filename . f519c) (&i/o-invalid-position . f519b) (&i/o-write . f519a) (&i/o-read . f5199) (&i/o . f5198) (&undefined . f5197) (&syntax . f5196) (&lexical . f5195) (&implementation-restriction . f5194) (&non-continuable . f5193) (&who . f5192) (&irritants . f5191) (&assertion . f5190) (&violation . f518f) (&error . f518e) (&serious . f518d) (&warning . f518c) (&message . f518b) (&condition . f518a) (define-condition-type . f5189) (define-enumeration . f5188) (define-record-type . f5187) (parent-rtd . f5186) (nongenerative . f5185) (opaque . f5184) (sealed . f5183) (protocol . f5182) (parent . f5181) (immutable . f5180) (mutable . f517f) (fields . f517e) (error-handling-mode . f517d) (file-options . f517c) (buffer-mode . f517b) (eol-style . f517a) (guard . f5179) (unsyntax-splicing . f5176) (unsyntax . f5175) (unquote-splicing . f5174) (unquote . f5173) (_ . f5172) (else . f5171) (=> . f5170) (... . f516f) (assert . f516e) (endianness . f516d) (do . f516a) (cond . f5169) (let* . f5168) (let*-values . f5167) (let-values . f5166) (identifier-syntax . f5165) (with-syntax . f5164) (quasisyntax . f5163) (quasiquote . f5162) (syntax-rules . f5161) (record-constructor-descriptor . f515e) (record-type-descriptor . f515d) (case . f515c) (unless . f515a) (when . f5159) (or . f5158) (and . f5157) (if . f5156) (let . f5155) (letrec* . f5154) (letrec . f5153) (case-lambda . f5151) (lambda . f5150) (syntax . f514f) (syntax-case . f514e) (quote . f514d) (letrec-syntax . f514b) (let-syntax . f514a) (set! . f5149) (begin . f5147) (define-syntax . f5145) (define . f5144)) '() values values '#f '#f '#t '#f) (f2cd0@f2b1c@install-library 'f5474 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . f317e) (quotient . f532a) (null-environment . f317c) (remainder . f5329) (modulo . f5328) (inexact->exact . f5327) (force . f5326) (exact->inexact . f5325) (make-promise . f5324) (delay . f516c)) '() values values '#f '#f '#t '#f) (f2cd0@f2b1c@install-library 'f5475 '(rnrs control) '(6) '() '() '() '((do . f516a) (unless . f515a) (when . f5159) (case-lambda . f5151)) '() values values '#f '#f '#t '#f) (f2cd0@f2b1c@install-library 'f5476 '(rnrs eval) '(6) '() '() '() '((eval . f3182) (environment . f317a)) '() values values '#f '#f '#t '#f) (f2cd0@f2b1c@install-library 'f5477 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . f5320) (set-car! . f531f)) '() values values '#f '#f '#t '#f) (f2cd0@f2b1c@install-library 'f5478 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . f5322) (string-set! . f5321)) '() values values '#f '#f '#t '#f) (f2cd0@f2b1c@install-library 'f5479 '(rnrs programs) '(6) '() '() '() '((exit . f5323) (command-line . f4fdc)) '() values values '#f '#f '#t '#f) (f2cd0@f2b1c@install-library 'f547a '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . f2eed) (identifier? . f31a4) (generate-temporaries . f3190) (free-identifier=? . f3192) (syntax->datum . f31a8) (datum->syntax . f31a6) (bound-identifier=? . f3194) (syntax-violation . f31a2) (unsyntax-splicing . f5176) (unsyntax . f5175) (_ . f5172) (... . f516f) (with-syntax . f5164) (quasisyntax . f5163) (syntax . f514f) (syntax-case . f514e)) '() values values '#f '#f '#t '#f) (f2cd0@f2b1c@install-library 'f547b '(rnrs files) '(6) '() '() '() '((delete-file . f5393) (file-exists? . f5392) (make-i/o-write-error . f4dcc) (make-i/o-read-error . f4db7) (make-i/o-port-error . f4e6d) (make-i/o-invalid-position-error . f4de3) (make-i/o-filename-error . f4dfe) (make-i/o-file-protection-error . f4e17) (make-i/o-file-is-read-only-error . f4e2c) (make-i/o-file-does-not-exist-error . f4e56) (make-i/o-file-already-exists-error . f4e41) (make-i/o-error . f4da2) (i/o-write-error? . f4dce) (i/o-read-error? . f4db9) (i/o-port-error? . f4e71) (i/o-invalid-position-error? . f4de7) (i/o-filename-error? . f4e02) (i/o-file-protection-error? . f4e19) (i/o-file-is-read-only-error? . f4e2e) (i/o-file-does-not-exist-error? . f4e58) (i/o-file-already-exists-error? . f4e43) (i/o-error? . f4da4) (i/o-error-position . f4de9) (i/o-error-port . f4e73) (i/o-error-filename . f4e04) (&i/o-port . f51a1) (&i/o-file-does-not-exist . f51a0) (&i/o-file-already-exists . f519f) (&i/o-file-is-read-only . f519e) (&i/o-file-protection . f519d) (&i/o-filename . f519c) (&i/o-invalid-position . f519b) (&i/o-write . f519a) (&i/o-read . f5199) (&i/o . f5198)) '() values values '#f '#f '#t '#f) (f2cd0@f2b1c@install-library 'f547c '(rnrs sorting) '(6) '() '() '() '((vector-sort! . f5391) (vector-sort . f5390) (list-sort . f538f)) '() values values '#f '#f '#t '#f) (f2cd0@f2b1c@install-library 'f547d '(rnrs base) '(6) '() '() '() '((zero? . f5248) (vector? . f5247) (vector-set! . f5246) (vector-ref . f5245) (vector-map . f5244) (vector-length . f5243) (vector-for-each . f5242) (vector-fill! . f5241) (vector->list . f5240) (vector . f523f) (values . f523e) (truncate . f523d) (tan . f523c) (symbol? . f523b) (symbol=? . f523a) (symbol->string . f5239) (substring . f5238) (string? . f5237) (string>? . f5236) (string>=? . f5235) (string=? . f5234) (string<? . f5233) (string<=? . f5232) (string-ref . f5231) (string-length . f5230) (string-for-each . f522f) (string-copy . f522e) (string-append . f522d) (string->symbol . f522c) (string->number . f522b) (string->list . f522a) (string . f5229) (sqrt . f5228) (sin . f5227) (round . f5226) (reverse . f5225) (real? . f5224) (real-valued? . f5223) (real-part . f5222) (rationalize . f5221) (rational? . f5220) (rational-valued? . f521f) (procedure? . f521e) (positive? . f521d) (pair? . f521c) (odd? . f521b) (numerator . f521a) (number? . f5219) (number->string . f5218) (null? . f5217) (not . f5216) (negative? . f5215) (nan? . f5214) (min . f5213) (max . f5212) (map . f5211) (make-vector . f5210) (make-string . f520f) (make-rectangular . f520e) (make-polar . f520d) (magnitude . f520c) (log . f520b) (list? . f520a) (list-tail . f5209) (list-ref . f5208) (list->vector . f5207) (list->string . f5206) (list . f5205) (length . f5204) (lcm . f5203) (integer? . f5202) (integer-valued? . f5201) (integer->char . f5200) (infinite? . f51ff) (inexact? . f51fe) (inexact . f51fd) (imag-part . f51fc) (gcd . f51fb) (for-each . f51fa) (floor . f51f9) (finite? . f51f8) (expt . f51f7) (exp . f51f6) (exact? . f51f5) (exact-integer-sqrt . f51f4) (exact . f51f3) (even? . f51f2) (error . f51f1) (eqv? . f51f0) (equal? . f51ef) (eq? . f51ee) (dynamic-wind . f51ed) (div0-and-mod0 . f51ec) (mod0 . f51eb) (div0 . f51ea) (div-and-mod . f51e9) (mod . f51e8) (div . f51e7) (denominator . f51e6) (cos . f51e5) (cons . f51e4) (complex? . f51e3) (char? . f51e2) (char>? . f51e1) (char>=? . f51e0) (char=? . f51df) (char<? . f51de) (char<=? . f51dd) (char->integer . f51dc) (ceiling . f51db) (call-with-values . f51da) (call/cc . f51d9) (call-with-current-continuation . f51d8) (cddddr . f51d7) (cdddar . f51d6) (cddadr . f51d5) (cddaar . f51d4) (cdaddr . f51d3) (cdadar . f51d2) (cdaadr . f51d1) (cdaaar . f51d0) (cadddr . f51cf) (caddar . f51ce) (cadadr . f51cd) (cadaar . f51cc) (caaddr . f51cb) (caadar . f51ca) (caaadr . f51c9) (caaaar . f51c8) (cdddr . f51c7) (cddar . f51c6) (cdadr . f51c5) (cdaar . f51c4) (caddr . f51c3) (cadar . f51c2) (caadr . f51c1) (caaar . f51c0) (cddr . f51bf) (cdar . f51be) (cadr . f51bd) (caar . f51bc) (cdr . f51bb) (car . f51ba) (boolean? . f51b9) (boolean=? . f51b8) (atan . f51b7) (assertion-violation . f51b6) (asin . f51b5) (apply . f51b4) (append . f51b3) (angle . f51b2) (acos . f51b1) (abs . f51b0) (/ . f51af) (* . f51ae) (- . f51ad) (+ . f51ac) (>= . f51ab) (> . f51aa) (= . f51a9) (<= . f51a8) (< . f51a7) (unquote-splicing . f5174) (unquote . f5173) (_ . f5172) (else . f5171) (=> . f5170) (... . f516f) (assert . f516e) (cond . f5169) (let* . f5168) (let*-values . f5167) (let-values . f5166) (identifier-syntax . f5165) (quasiquote . f5162) (syntax-rules . f5161) (case . f515c) (or . f5158) (and . f5157) (if . f5156) (let . f5155) (letrec* . f5154) (letrec . f5153) (lambda . f5150) (quote . f514d) (letrec-syntax . f514b) (let-syntax . f514a) (set! . f5149) (begin . f5147) (define-syntax . f5145) (define . f5144)) '() values values '#f '#f '#t '#f) (f2cd0@f2b1c@install-library 'f547e '(rnrs lists) '(6) '() '() '() '((remove . f531e) (remv . f531d) (remp . f531c) (remq . f531b) (partition . f531a) (memv . f5319) (memq . f5318) (memp . f5317) (member . f5316) (exists . f5315) (for-all . f5314) (fold-right . f5313) (fold-left . f5312) (find . f5311) (filter . f5310) (cons* . f530f) (assv . f530e) (assq . f530d) (assp . f530c) (assoc . f530b)) '() values values '#f '#f '#t '#f) (f2cd0@f2b1c@install-library 'f547f '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . f5379) (call-with-input-file . f5378) (write-char . f5377) (write . f5376) (with-output-to-file . f5375) (with-input-from-file . f5374) (read-char . f5373) (read . f5372) (peek-char . f5371) (open-output-file . f5370) (open-input-file . f536f) (newline . f536e) (display . f536d) (close-output-port . f536c) (close-input-port . f536b) (eof-object? . f536a) (eof-object . f5369) (current-error-port . f5368) (current-output-port . f5367) (current-input-port . f5366) (output-port? . f5365) (input-port? . f5364) (make-i/o-write-error . f4dcc) (make-i/o-read-error . f4db7) (make-i/o-port-error . f4e6d) (make-i/o-invalid-position-error . f4de3) (make-i/o-filename-error . f4dfe) (make-i/o-file-protection-error . f4e17) (make-i/o-file-is-read-only-error . f4e2c) (make-i/o-file-does-not-exist-error . f4e56) (make-i/o-file-already-exists-error . f4e41) (make-i/o-error . f4da2) (i/o-write-error? . f4dce) (i/o-read-error? . f4db9) (i/o-port-error? . f4e71) (i/o-invalid-position-error? . f4de7) (i/o-filename-error? . f4e02) (i/o-file-protection-error? . f4e19) (i/o-file-is-read-only-error? . f4e2e) (i/o-file-does-not-exist-error? . f4e58) (i/o-file-already-exists-error? . f4e43) (i/o-error? . f4da4) (i/o-error-position . f4de9) (i/o-error-port . f4e73) (i/o-error-filename . f4e04) (&i/o-port . f51a1) (&i/o-file-does-not-exist . f51a0) (&i/o-file-already-exists . f519f) (&i/o-file-is-read-only . f519e) (&i/o-file-protection . f519d) (&i/o-filename . f519c) (&i/o-invalid-position . f519b) (&i/o-write . f519a) (&i/o-read . f5199) (&i/o . f5198)) '() values values '#f '#f '#t '#f) (f2cd0@f2b1c@install-library 'f5480 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . f533a) (utf32->string . f52ef) (utf16->string . f52ee) (utf8->string . f52ed) (uint-list->bytevector . f52ec) (u8-list->bytevector . f52eb) (string->utf8 . f52ea) (string->utf32 . f52e9) (string->utf16 . f52e8) (sint-list->bytevector . f52e7) (native-endianness . f52e6) (bytevector? . f52e5) (bytevector=? . f52e4) (bytevector-uint-set! . f52e3) (bytevector-uint-ref . f52e2) (bytevector-u8-set! . f52e1) (bytevector-u8-ref . f52e0) (bytevector-u64-set! . f52df) (bytevector-u64-ref . f52de) (bytevector-u64-native-set! . f52dd) (bytevector-u64-native-ref . f52dc) (bytevector-u32-set! . f52db) (bytevector-u32-ref . f52da) (bytevector-u32-native-set! . f52d9) (bytevector-u32-native-ref . f52d8) (bytevector-u16-set! . f52d7) (bytevector-u16-ref . f52d6) (bytevector-u16-native-set! . f52d5) (bytevector-u16-native-ref . f52d4) (bytevector-sint-set! . f52d3) (bytevector-sint-ref . f52d2) (bytevector-s8-set! . f52d1) (bytevector-s8-ref . f52d0) (bytevector-s64-set! . f52cf) (bytevector-s64-ref . f52ce) (bytevector-s64-native-set! . f52cd) (bytevector-s64-native-ref . f52cc) (bytevector-s32-set! . f52cb) (bytevector-s32-ref . f52ca) (bytevector-s32-native-set! . f52c9) (bytevector-s32-native-ref . f52c8) (bytevector-s16-set! . f52c7) (bytevector-s16-ref . f52c6) (bytevector-s16-native-set! . f52c5) (bytevector-s16-native-ref . f52c4) (bytevector-length . f52c3) (bytevector-ieee-single-ref . f52c2) (bytevector-ieee-single-set! . f52c1) (bytevector-ieee-single-native-set! . f52c0) (bytevector-ieee-single-native-ref . f52bf) (bytevector-ieee-double-set! . f52be) (bytevector-ieee-double-ref . f52bd) (bytevector-ieee-double-native-set! . f52bc) (bytevector-ieee-double-native-ref . f52bb) (bytevector-fill! . f52ba) (bytevector-copy! . f52b9) (bytevector-copy . f52b8) (bytevector->uint-list . f52b7) (bytevector->u8-list . f52b6) (bytevector->sint-list . f52b5) (endianness . f516d)) '() values values '#f '#f '#t '#f) (f2cd0@f2b1c@install-library 'f5481 '(rnrs unicode) '(6) '() '() '() '((string-upcase . f53c1) (string-titlecase . f53c0) (string-normalize-nfkd . f53bf) (string-normalize-nfkc . f53be) (string-normalize-nfd . f53bd) (string-normalize-nfc . f53bc) (string-foldcase . f53bb) (string-downcase . f53ba) (string-ci>? . f53b9) (string-ci>=? . f53b8) (string-ci=? . f53b7) (string-ci<? . f53b6) (string-ci<=? . f53b5) (char-whitespace? . f53b4) (char-upper-case? . f53b3) (char-title-case? . f53b2) (char-numeric? . f53b1) (char-lower-case? . f53b0) (char-general-category . f53af) (char-upcase . f53ae) (char-titlecase . f53ad) (char-foldcase . f53ac) (char-downcase . f53ab) (char-ci>? . f53aa) (char-ci>=? . f53a9) (char-ci=? . f53a8) (char-ci<? . f53a7) (char-ci<=? . f53a6) (char-alphabetic? . f53a5)) '() values values '#f '#f '#t '#f) (f2cd0@f2b1c@install-library 'f5482 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . f5304) (raise-continuable . f5303) (raise . f5302) (guard . f5179) (else . f5171) (=> . f5170)) '() values values '#f '#f '#t '#f) (f2cd0@f2b1c@install-library 'f5483 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . f5259) (bitwise-reverse-bit-field . f5258) (bitwise-length . f5257) (bitwise-if . f5256) (bitwise-first-bit-set . f5255) (bitwise-copy-bit-field . f5254) (bitwise-copy-bit . f5253) (bitwise-bit-set? . f5252) (bitwise-bit-field . f5251) (bitwise-bit-count . f5250) (bitwise-xor . f524f) (bitwise-ior . f524e) (bitwise-and . f524d) (bitwise-not . f524c) (bitwise-arithmetic-shift-right . f524b) (bitwise-arithmetic-shift-left . f524a) (bitwise-arithmetic-shift . f5249)) '() values values '#f '#f '#t '#f) (f2cd0@f2b1c@install-library 'f5484 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . f5286) (fxxor . f5285) (fxrotate-bit-field . f5284) (fxreverse-bit-field . f5283) (fxpositive? . f5282) (fxodd? . f5281) (fxnot . f5280) (fxnegative? . f527f) (fxmod0 . f527e) (fxmod . f527d) (fxmin . f527c) (fxmax . f527b) (fxlength . f527a) (fxior . f5279) (fxif . f5278) (fxfirst-bit-set . f5277) (fxeven? . f5276) (fxdiv0-and-mod0 . f5275) (fxdiv0 . f5274) (fxdiv-and-mod . f5273) (fxdiv . f5272) (fxcopy-bit-field . f5271) (fxcopy-bit . f5270) (fxbit-set? . f526f) (fxbit-field . f526e) (fxbit-count . f526d) (fxarithmetic-shift-right . f526c) (fxarithmetic-shift-left . f526b) (fxarithmetic-shift . f526a) (fxand . f5269) (fx>? . f5268) (fx>=? . f5267) (fx=? . f5266) (fx<? . f5265) (fx<=? . f5264) (fx-/carry . f5263) (fx- . f5262) (fx+/carry . f5261) (fx+ . f5260) (fx*/carry . f525f) (fx* . f525e) (greatest-fixnum . f525d) (least-fixnum . f525c) (fixnum-width . f525b) (fixnum? . f525a)) '() values values '#f '#f '#t '#f) (f2cd0@f2b1c@install-library 'f5485 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . f4ecd) (no-infinities-violation? . f4eb8) (make-no-nans-violation . f4ecb) (make-no-infinities-violation . f4eb6) (real->flonum . f52b4) (flzero? . f52b3) (fltruncate . f52b2) (fltan . f52b1) (flsqrt . f52b0) (flsin . f52af) (flround . f52ae) (flpositive? . f52ad) (flonum? . f52ac) (flodd? . f52ab) (flnumerator . f52aa) (flnegative? . f52a9) (flnan? . f52a8) (flmod0 . f52a7) (flmod . f52a6) (flmin . f52a5) (flmax . f52a4) (fllog . f52a3) (flinteger? . f52a2) (flinfinite? . f52a1) (flfloor . f52a0) (flfinite? . f529f) (flexpt . f529e) (flexp . f529d) (fleven? . f529c) (fldiv0-and-mod0 . f529b) (fldiv0 . f529a) (fldiv-and-mod . f5299) (fldiv . f5298) (fldenominator . f5297) (flcos . f5296) (flceiling . f5295) (flatan . f5294) (flasin . f5293) (flacos . f5292) (flabs . f5291) (fl>? . f5290) (fl>=? . f528f) (fl=? . f528e) (fl<? . f528d) (fl<=? . f528c) (fl/ . f528b) (fl- . f528a) (fl+ . f5289) (fl* . f5288) (fixnum->flonum . f5287) (&no-nans . f51a5) (&no-infinities . f51a4)) '() values values '#f '#f '#t '#f) (f2cd0@f2b1c@install-library 'f5486 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . f538e) (string-ci-hash . f538d) (string-hash . f538c) (equal-hash . f538b) (hashtable-equivalence-function . f538a) (make-hashtable . f5389) (hashtable-hash-function . f5388) (make-eqv-hashtable . f5387) (make-eq-hashtable . f5386) (hashtable? . f5385) (hashtable-update! . f5384) (hashtable-size . f5383) (hashtable-set! . f5382) (hashtable-ref . f5381) (hashtable-mutable? . f5380) (hashtable-keys . f537f) (hashtable-entries . f537e) (hashtable-delete! . f537d) (hashtable-copy . f537c) (hashtable-contains? . f537b) (hashtable-clear! . f537a)) '() values values '#f '#f '#t '#f) (f2cd0@f2b1c@install-library 'f5487 '(rnrs io ports) '(6) '() '() '() '((eof-object? . f536a) (eof-object . f5369) (current-error-port . f5368) (current-output-port . f5367) (current-input-port . f5366) (output-port? . f5365) (input-port? . f5364) (utf-8-codec . f5363) (utf-16-codec . f5362) (transcoder-error-handling-mode . f5361) (transcoder-eol-style . f5360) (transcoder-codec . f535f) (transcoded-port . f535e) (textual-port? . f535d) (string->bytevector . f535c) (standard-output-port . f535b) (standard-input-port . f535a) (standard-error-port . f5359) (set-port-position! . f5358) (put-u8 . f5357) (put-string . f5356) (put-datum . f5355) (put-char . f5354) (put-bytevector . f5353) (port? . f5352) (port-transcoder . f5351) (port-position . f5350) (port-has-set-port-position!? . f534f) (port-has-port-position? . f534e) (port-eof? . f534d) (output-port-buffer-mode . f534c) (open-string-output-port . f534b) (open-string-input-port . f534a) (open-file-output-port . f5349) (open-file-input/output-port . f5348) (open-file-input-port . f5347) (open-bytevector-output-port . f5346) (open-bytevector-input-port . f5345) (native-transcoder . f5344) (native-eol-style . f5343) (make-transcoder . f5342) (latin-1-codec . f5341) (make-i/o-write-error . f4dcc) (make-i/o-read-error . f4db7) (make-i/o-port-error . f4e6d) (make-i/o-invalid-position-error . f4de3) (make-i/o-filename-error . f4dfe) (make-i/o-file-protection-error . f4e17) (make-i/o-file-is-read-only-error . f4e2c) (make-i/o-file-does-not-exist-error . f4e56) (make-i/o-file-already-exists-error . f4e41) (make-i/o-error . f4da2) (make-i/o-encoding-error . f4e9d) (make-i/o-decoding-error . f4e86) (make-custom-textual-output-port . f5340) (make-custom-textual-input/output-port . f533f) (make-custom-textual-input-port . f533e) (make-custom-binary-output-port . f533d) (make-custom-binary-input/output-port . f533c) (make-custom-binary-input-port . f533b) (lookahead-u8 . f5339) (lookahead-char . f5338) (i/o-write-error? . f4dce) (i/o-read-error? . f4db9) (i/o-port-error? . f4e71) (i/o-invalid-position-error? . f4de7) (i/o-filename-error? . f4e02) (i/o-file-protection-error? . f4e19) (i/o-file-is-read-only-error? . f4e2e) (i/o-file-does-not-exist-error? . f4e58) (i/o-file-already-exists-error? . f4e43) (i/o-error? . f4da4) (i/o-error-position . f4de9) (i/o-error-port . f4e73) (i/o-error-filename . f4e04) (i/o-encoding-error? . f4ea1) (i/o-encoding-error-char . f4ea3) (i/o-decoding-error? . f4e88) (get-u8 . f5337) (get-string-n! . f5336) (get-string-n . f5335) (get-string-all . f5334) (get-line . f5333) (get-datum . f5332) (get-char . f5331) (get-bytevector-some . f5330) (get-bytevector-n! . f532f) (get-bytevector-n . f532e) (get-bytevector-all . f532d) (flush-output-port . f532c) (close-port . f532b) (call-with-string-output-port . f530a) (call-with-port . f5309) (call-with-bytevector-output-port . f5308) (bytevector->string . f5307) (buffer-mode? . f5306) (binary-port? . f5305) (&i/o-encoding . f51a3) (&i/o-decoding . f51a2) (&i/o-port . f51a1) (&i/o-file-does-not-exist . f51a0) (&i/o-file-already-exists . f519f) (&i/o-file-is-read-only . f519e) (&i/o-file-protection . f519d) (&i/o-filename . f519c) (&i/o-invalid-position . f519b) (&i/o-write . f519a) (&i/o-read . f5199) (&i/o . f5198) (error-handling-mode . f517d) (file-options . f517c) (buffer-mode . f517b) (eol-style . f517a)) '() values values '#f '#f '#t '#f) (f2cd0@f2b1c@install-library 'f5488 '(rnrs enums) '(6) '() '() '() '((make-enumeration . f5301) (enum-set=? . f5300) (enum-set-universe . f52ff) (enum-set-union . f52fe) (enum-set-subset? . f52fd) (enum-set-projection . f52fc) (enum-set-member? . f52fb) (enum-set-intersection . f52fa) (enum-set-indexer . f52f9) (enum-set-difference . f52f8) (enum-set-constructor . f52f7) (enum-set-complement . f52f6) (enum-set->list . f52f5) (define-enumeration . f5188)) '() values values '#f '#f '#t '#f) (f2cd0@f2b1c@install-library 'f5489 '(rnrs conditions) '(6) '() '() '() '((who-condition? . f4d18) (warning? . f4c90) (violation? . f4ccf) (undefined-violation? . f4d8f) (syntax-violation? . f4d76) (syntax-violation-subform . f4d7a) (syntax-violation-form . f4d78) (syntax-violation . f31a2) (simple-conditions . f52f4) (serious-condition? . f4ca5) (non-continuable-violation? . f4d2f) (message-condition? . f4c79) (make-who-condition . f4d14) (make-warning . f4c8e) (make-violation . f4ccd) (make-undefined-violation . f4d8d) (make-syntax-violation . f4d70) (make-serious-condition . f4ca3) (make-non-continuable-violation . f4d2d) (make-message-condition . f4c75) (make-lexical-violation . f4d57) (make-irritants-condition . f4cf9) (make-implementation-restriction-violation . f4d42) (make-error . f4cb8) (make-assertion-violation . f4ce2) (lexical-violation? . f4d59) (irritants-condition? . f4cfd) (implementation-restriction-violation? . f4d44) (error? . f4cba) (condition-who . f4d1a) (condition-predicate . f52f3) (condition-message . f4c7b) (condition-irritants . f4cff) (condition-accessor . f52f2) (condition . f52f1) (assertion-violation? . f4ce4) (condition? . f52f0) (&undefined . f5197) (&syntax . f5196) (&lexical . f5195) (&implementation-restriction . f5194) (&non-continuable . f5193) (&who . f5192) (&irritants . f5191) (&assertion . f5190) (&violation . f518f) (&error . f518e) (&serious . f518d) (&warning . f518c) (&message . f518b) (&condition . f518a) (define-condition-type . f5189)) '() values values '#f '#f '#t '#f) (f2cd0@f2b1c@install-library 'f548a '(rnrs records inspection) '(6) '() '() '() '((record? . f539d) (record-type-uid . f539c) (record-type-sealed? . f539b) (record-type-parent . f539a) (record-type-opaque? . f5399) (record-type-name . f5398) (record-type-generative? . f5397) (record-type-field-names . f5396) (record-rtd . f5395) (record-field-mutable? . f5394)) '() values values '#f '#f '#t '#f) (f2cd0@f2b1c@install-library 'f548b '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . f53a4) (record-predicate . f53a3) (record-mutator . f53a2) (record-constructor . f53a1) (record-accessor . f53a0) (make-record-type-descriptor . f539f) (make-record-constructor-descriptor . f539e)) '() values values '#f '#f '#t '#f) (f2cd0@f2b1c@install-library 'f548c '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . f5187) (parent-rtd . f5186) (nongenerative . f5185) (opaque . f5184) (sealed . f5183) (protocol . f5182) (parent . f5181) (immutable . f5180) (mutable . f517f) (fields . f517e) (record-constructor-descriptor . f515e) (record-type-descriptor . f515d)) '() values values '#f '#f '#t '#f) (f2cd0@f2b1c@install-library 'f548d '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . f4ed1) (&no-nans-rtd . f4ecf) (&no-infinities-rcd . f4ebc) (&no-infinities-rtd . f4eba) (&i/o-encoding-rcd . f4ea7) (&i/o-encoding-rtd . f4ea5) (&i/o-decoding-rcd . f4e8c) (&i/o-decoding-rtd . f4e8a) (&i/o-port-rcd . f4e77) (&i/o-port-rtd . f4e75) (&i/o-file-does-not-exist-rcd . f4e5c) (&i/o-file-does-not-exist-rtd . f4e5a) (&i/o-file-already-exists-rcd . f4e47) (&i/o-file-already-exists-rtd . f4e45) (&i/o-file-is-read-only-rcd . f4e32) (&i/o-file-is-read-only-rtd . f4e30) (&i/o-file-protection-rcd . f4e1d) (&i/o-file-protection-rtd . f4e1b) (&i/o-filename-rcd . f4e08) (&i/o-filename-rtd . f4e06) (&i/o-invalid-position-rcd . f4ded) (&i/o-invalid-position-rtd . f4deb) (&i/o-write-rcd . f4dd2) (&i/o-write-rtd . f4dd0) (&i/o-read-rcd . f4dbd) (&i/o-read-rtd . f4dbb) (&i/o-rcd . f4da8) (&i/o-rtd . f4da6) (&undefined-rcd . f4d93) (&undefined-rtd . f4d91) (&syntax-rcd . f4d7e) (&syntax-rtd . f4d7c) (&lexical-rcd . f4d5d) (&lexical-rtd . f4d5b) (&implementation-restriction-rcd . f4d48) (&implementation-restriction-rtd . f4d46) (&non-continuable-rcd . f4d33) (&non-continuable-rtd . f4d31) (&who-rcd . f4d1e) (&who-rtd . f4d1c) (&irritants-rcd . f4d03) (&irritants-rtd . f4d01) (&assertion-rcd . f4ce8) (&assertion-rtd . f4ce6) (&violation-rcd . f4cd3) (&violation-rtd . f4cd1) (&error-rcd . f4cbe) (&error-rtd . f4cbc) (&serious-rcd . f4ca9) (&serious-rtd . f4ca7) (&warning-rcd . f4c94) (&warning-rtd . f4c92) (&message-rcd . f4c7f) (&message-rtd . f4c7d) (&condition-rcd . f4c20) (&condition-rtd . f4c1e) (syntax-error . f319e) (syntax-dispatch . f30c2) (pretty-print . f546d) (eval-core . f546c) (set-symbol-value! . f546b) (symbol-value . f546a) (gensym . f5469) (void . f5468) (load . f4fe2) (interaction-environment . f31b0) (char-ready? . f5467) (regexp? . f5466) (read-line . f5465) (gensym-prefix-set! . f5464) (ungensym . f5463) (alist->eq-hash-table . f5462) (assoc-ref . f5461) (print . f5460) (format . f545f) (host-os . f545e) (library-path . f2afb) (standard-library-path . f545d) (file-newer? . f545c) (stat-mtime . f545b) (write-to-file . f545a) (file->list . f5459) (file->string . f5458) (digit->integer . f5457) (call-with-string-input-port . f5456) (call-with-string-io . f5455) (string-split . f5454) (bytevector-for-each . f5453) (string->regexp . f5452) (rxmatch . f5451) (regexp-replace-all . f5450) (hashtable-for-each . f544f) (mosh-cache-dir . f28e6) (call-process . f544e) (local-tz-offset . f544d) (microseconds . f544c) (directory-list . f544b) (set-current-directory! . f544a) (expand-path . f5449) (current-directory . f5448) (%spawn . f5447) (%waitpid . f5446) (simple-struct-name . f5445) (simple-struct-set! . f5444) (simple-struct-ref . f5443) (make-simple-struct . f5442) (simple-struct? . f5441) (pointer-ref-c-int64 . f5440) (pointer-ref-c-int32 . f543f) (pointer-ref-c-int16 . f543e) (pointer-ref-c-int8 . f543d) (pointer-ref-c-uint64 . f543c) (pointer-ref-c-uint32 . f543b) (pointer-ref-c-uint16 . f543a) (pointer-ref-c-uint8 . f5439) (pointer-set-c-uint64! . f5438) (pointer-set-c-uint32! . f5437) (pointer-set-c-uint16! . f5436) (pointer-set-c-uint8! . f5435) (pointer-set-c-int64! . f5434) (pointer-set-c-int32! . f5433) (pointer-set-c-int16! . f5432) (pointer-set-c-int8! . f5431) (pointer-set-c-pointer! . f5430) (pointer-set-c-double! . f542f) (pointer-set-c-float! . f542e) (pointer-set-c-long-long! . f542d) (pointer-set-c-long! . f542c) (pointer-set-c-int! . f542b) (pointer-set-c-short! . f542a) (pointer-set-c-char! . f5429) (pointer-ref-c-pointer . f5428) (pointer-ref-c-double . f5427) (pointer-ref-c-float . f5426) (pointer-ref-c-unsigned-long-long . f5425) (pointer-ref-c-signed-long-long . f5424) (pointer-ref-c-unsigned-long . f5423) (pointer-ref-c-signed-long . f5422) (pointer-ref-c-unsigned-int . f5421) (pointer-ref-c-signed-int . f5420) (pointer-ref-c-unsigned-short . f541f) (pointer-ref-c-signed-short . f541e) (pointer-ref-c-unsigned-char . f541d) (pointer-ref-c-signed-char . f541c) (pointer->integer . f541b) (integer->pointer . f541a) (pointer? . f5419) (shared-errno . f5418) (%ffi-free-c-callback-trampoline . f5417) (%ffi-make-c-callback-trampoline . f5416) (%ffi-free . f5415) (%ffi-malloc . f5414) (%ffi-supported? . f5413) (%ffi-pointer->string . f5412) (%ffi-call->string-or-zero . f5411) (%ffi-call->double . f5410) (%ffi-call->void* . f540f) (%ffi-call->void . f540e) (%ffi-call->char . f540d) (%ffi-call->int . f540c) (%ffi-lookup . f540b) (%ffi-open . f540a) (%fork . f5409) (%pipe . f5408) (p . f5407) (open-output-string . f5406) (get-output-string . f5405) (file-stat-ctime . f5404) (file-stat-atime . f5403) (file-stat-mtime . f5402) (file-size-in-bytes . f5401) (file-writable? . f5400) (file-executable? . f53ff) (file-readable? . f53fe) (file-regular? . f53fd) (file-symbolic-link? . f53fc) (file-directory? . f53fb) (create-symbolic-link . f53fa) (rename-file . f53f9) (delete-directory . f53f8) (create-directory . f53f7) (create-mosh-cache-dir . f53f6) (get-environment-variables . f53f5) (current-exception-handler . f53f4) (get-environment-variable . f53f3) (join-wraps . f53f2) (id->real-label . f53f1) (same-marks? . f53f0) (same-marks*? . f53ef) (get-timeofday . f53ee) (get-command-line . f53ed) (sys-display . f53ec) (whereis . f53eb) (register . f53ea) (vm-join! . f53e9) (vm-set-value! . f53e8) (vm? . f53e7) (main-vm? . f53e6) (vm-eval . f53e5) (vm-self . f53e4) (vm-start! . f53e3) (make-vm . f53e2) (mutex-try-lock! . f53e1) (mutex-unlock! . f53e0) (mutex-lock! . f53df) (mutex? . f53de) (make-mutex . f53dd) (condition-variable-notify-all! . f53dc) (condition-variable-notify! . f53db) (condition-variable-wait! . f53da) (make-condition-variable . f53d9) (mosh-executable-path . f53d8) (make-file-options . f53d7) (source-info . f53d6) (make-compiler-instruction . f53d5) (make-instruction . f53d4) (set-source-info! . f53d3) (bignum? . f53d2) (fast-equal? . f53d1) (fasl-read . f53d0) (fasl-write . f53cf) (time-usage . f53ce) (os-constant . f53cd) (disasm . f53cc) (make-parameter . f28e4) (socket-port . f53cb) (socket-shutdown . f53ca) (socket-close . f53c9) (socket-send . f53c8) (socket-recv! . f53c7) (socket-recv . f53c6) (make-server-socket . f53c5) (make-client-socket . f53c4) (socket-accept . f53c3) (socket? . f53c2) (string-upcase . f53c1) (string-titlecase . f53c0) (string-normalize-nfkd . f53bf) (string-normalize-nfkc . f53be) (string-normalize-nfd . f53bd) (string-normalize-nfc . f53bc) (string-foldcase . f53bb) (string-downcase . f53ba) (string-ci>? . f53b9) (string-ci>=? . f53b8) (string-ci=? . f53b7) (string-ci<? . f53b6) (string-ci<=? . f53b5) (char-whitespace? . f53b4) (char-upper-case? . f53b3) (char-title-case? . f53b2) (char-numeric? . f53b1) (char-lower-case? . f53b0) (char-general-category . f53af) (char-upcase . f53ae) (char-titlecase . f53ad) (char-foldcase . f53ac) (char-downcase . f53ab) (char-ci>? . f53aa) (char-ci>=? . f53a9) (char-ci=? . f53a8) (char-ci<? . f53a7) (char-ci<=? . f53a6) (char-alphabetic? . f53a5) (make-variable-transformer . f2eed) (identifier? . f31a4) (generate-temporaries . f3190) (free-identifier=? . f3192) (syntax->datum . f31a8) (datum->syntax . f31a6) (bound-identifier=? . f3194) (record-type-descriptor? . f53a4) (record-predicate . f53a3) (record-mutator . f53a2) (record-constructor . f53a1) (record-accessor . f53a0) (make-record-type-descriptor . f539f) (make-record-constructor-descriptor . f539e) (record? . f539d) (record-type-uid . f539c) (record-type-sealed? . f539b) (record-type-parent . f539a) (record-type-opaque? . f5399) (record-type-name . f5398) (record-type-generative? . f5397) (record-type-field-names . f5396) (record-rtd . f5395) (record-field-mutable? . f5394) (delete-file . f5393) (file-exists? . f5392) (vector-sort! . f5391) (vector-sort . f5390) (list-sort . f538f) (symbol-hash . f538e) (string-ci-hash . f538d) (string-hash . f538c) (equal-hash . f538b) (hashtable-equivalence-function . f538a) (make-hashtable . f5389) (hashtable-hash-function . f5388) (make-eqv-hashtable . f5387) (make-eq-hashtable . f5386) (hashtable? . f5385) (hashtable-update! . f5384) (hashtable-size . f5383) (hashtable-set! . f5382) (hashtable-ref . f5381) (hashtable-mutable? . f5380) (hashtable-keys . f537f) (hashtable-entries . f537e) (hashtable-delete! . f537d) (hashtable-copy . f537c) (hashtable-contains? . f537b) (hashtable-clear! . f537a) (call-with-output-file . f5379) (call-with-input-file . f5378) (write-char . f5377) (write . f5376) (with-output-to-file . f5375) (with-input-from-file . f5374) (read-char . f5373) (read . f5372) (peek-char . f5371) (open-output-file . f5370) (open-input-file . f536f) (newline . f536e) (display . f536d) (close-output-port . f536c) (close-input-port . f536b) (eof-object? . f536a) (eof-object . f5369) (current-error-port . f5368) (current-output-port . f5367) (current-input-port . f5366) (output-port? . f5365) (input-port? . f5364) (utf-8-codec . f5363) (utf-16-codec . f5362) (transcoder-error-handling-mode . f5361) (transcoder-eol-style . f5360) (transcoder-codec . f535f) (transcoded-port . f535e) (textual-port? . f535d) (string->bytevector . f535c) (standard-output-port . f535b) (standard-input-port . f535a) (standard-error-port . f5359) (set-port-position! . f5358) (put-u8 . f5357) (put-string . f5356) (put-datum . f5355) (put-char . f5354) (put-bytevector . f5353) (port? . f5352) (port-transcoder . f5351) (port-position . f5350) (port-has-set-port-position!? . f534f) (port-has-port-position? . f534e) (port-eof? . f534d) (output-port-buffer-mode . f534c) (open-string-output-port . f534b) (open-string-input-port . f534a) (open-file-output-port . f5349) (open-file-input/output-port . f5348) (open-file-input-port . f5347) (open-bytevector-output-port . f5346) (open-bytevector-input-port . f5345) (native-transcoder . f5344) (native-eol-style . f5343) (make-transcoder . f5342) (latin-1-codec . f5341) (make-i/o-write-error . f4dcc) (make-i/o-read-error . f4db7) (make-i/o-port-error . f4e6d) (make-i/o-invalid-position-error . f4de3) (make-i/o-filename-error . f4dfe) (make-i/o-file-protection-error . f4e17) (make-i/o-file-is-read-only-error . f4e2c) (make-i/o-file-does-not-exist-error . f4e56) (make-i/o-file-already-exists-error . f4e41) (make-i/o-error . f4da2) (make-i/o-encoding-error . f4e9d) (make-i/o-decoding-error . f4e86) (make-custom-textual-output-port . f5340) (make-custom-textual-input/output-port . f533f) (make-custom-textual-input-port . f533e) (make-custom-binary-output-port . f533d) (make-custom-binary-input/output-port . f533c) (make-custom-binary-input-port . f533b) (make-bytevector . f533a) (lookahead-u8 . f5339) (lookahead-char . f5338) (i/o-write-error? . f4dce) (i/o-read-error? . f4db9) (i/o-port-error? . f4e71) (i/o-invalid-position-error? . f4de7) (i/o-filename-error? . f4e02) (i/o-file-protection-error? . f4e19) (i/o-file-is-read-only-error? . f4e2e) (i/o-file-does-not-exist-error? . f4e58) (i/o-file-already-exists-error? . f4e43) (i/o-error? . f4da4) (i/o-error-position . f4de9) (i/o-error-port . f4e73) (i/o-error-filename . f4e04) (i/o-encoding-error? . f4ea1) (i/o-encoding-error-char . f4ea3) (i/o-decoding-error? . f4e88) (get-u8 . f5337) (get-string-n! . f5336) (get-string-n . f5335) (get-string-all . f5334) (get-line . f5333) (get-datum . f5332) (get-char . f5331) (get-bytevector-some . f5330) (get-bytevector-n! . f532f) (get-bytevector-n . f532e) (get-bytevector-all . f532d) (flush-output-port . f532c) (close-port . f532b) (scheme-report-environment . f317e) (quotient . f532a) (null-environment . f317c) (remainder . f5329) (modulo . f5328) (inexact->exact . f5327) (force . f5326) (exact->inexact . f5325) (make-promise . f5324) (exit . f5323) (command-line . f4fdc) (string-fill! . f5322) (string-set! . f5321) (set-cdr! . f5320) (set-car! . f531f) (remove . f531e) (remv . f531d) (remp . f531c) (remq . f531b) (partition . f531a) (memv . f5319) (memq . f5318) (memp . f5317) (member . f5316) (exists . f5315) (for-all . f5314) (fold-right . f5313) (fold-left . f5312) (find . f5311) (filter . f5310) (cons* . f530f) (assv . f530e) (assq . f530d) (assp . f530c) (assoc . f530b) (call-with-string-output-port . f530a) (call-with-port . f5309) (call-with-bytevector-output-port . f5308) (bytevector->string . f5307) (buffer-mode? . f5306) (binary-port? . f5305) (with-exception-handler . f5304) (raise-continuable . f5303) (raise . f5302) (eval . f3182) (environment . f317a) (make-enumeration . f5301) (enum-set=? . f5300) (enum-set-universe . f52ff) (enum-set-union . f52fe) (enum-set-subset? . f52fd) (enum-set-projection . f52fc) (enum-set-member? . f52fb) (enum-set-intersection . f52fa) (enum-set-indexer . f52f9) (enum-set-difference . f52f8) (enum-set-constructor . f52f7) (enum-set-complement . f52f6) (enum-set->list . f52f5) (who-condition? . f4d18) (warning? . f4c90) (violation? . f4ccf) (undefined-violation? . f4d8f) (syntax-violation? . f4d76) (syntax-violation-subform . f4d7a) (syntax-violation-form . f4d78) (syntax-violation . f31a2) (simple-conditions . f52f4) (serious-condition? . f4ca5) (non-continuable-violation? . f4d2f) (message-condition? . f4c79) (make-who-condition . f4d14) (make-warning . f4c8e) (make-violation . f4ccd) (make-undefined-violation . f4d8d) (make-syntax-violation . f4d70) (make-serious-condition . f4ca3) (make-non-continuable-violation . f4d2d) (make-message-condition . f4c75) (make-lexical-violation . f4d57) (make-irritants-condition . f4cf9) (make-implementation-restriction-violation . f4d42) (make-error . f4cb8) (make-assertion-violation . f4ce2) (lexical-violation? . f4d59) (irritants-condition? . f4cfd) (implementation-restriction-violation? . f4d44) (error? . f4cba) (condition-who . f4d1a) (condition-predicate . f52f3) (condition-message . f4c7b) (condition-irritants . f4cff) (condition-accessor . f52f2) (condition . f52f1) (assertion-violation? . f4ce4) (condition? . f52f0) (utf32->string . f52ef) (utf16->string . f52ee) (utf8->string . f52ed) (uint-list->bytevector . f52ec) (u8-list->bytevector . f52eb) (string->utf8 . f52ea) (string->utf32 . f52e9) (string->utf16 . f52e8) (sint-list->bytevector . f52e7) (native-endianness . f52e6) (bytevector? . f52e5) (bytevector=? . f52e4) (bytevector-uint-set! . f52e3) (bytevector-uint-ref . f52e2) (bytevector-u8-set! . f52e1) (bytevector-u8-ref . f52e0) (bytevector-u64-set! . f52df) (bytevector-u64-ref . f52de) (bytevector-u64-native-set! . f52dd) (bytevector-u64-native-ref . f52dc) (bytevector-u32-set! . f52db) (bytevector-u32-ref . f52da) (bytevector-u32-native-set! . f52d9) (bytevector-u32-native-ref . f52d8) (bytevector-u16-set! . f52d7) (bytevector-u16-ref . f52d6) (bytevector-u16-native-set! . f52d5) (bytevector-u16-native-ref . f52d4) (bytevector-sint-set! . f52d3) (bytevector-sint-ref . f52d2) (bytevector-s8-set! . f52d1) (bytevector-s8-ref . f52d0) (bytevector-s64-set! . f52cf) (bytevector-s64-ref . f52ce) (bytevector-s64-native-set! . f52cd) (bytevector-s64-native-ref . f52cc) (bytevector-s32-set! . f52cb) (bytevector-s32-ref . f52ca) (bytevector-s32-native-set! . f52c9) (bytevector-s32-native-ref . f52c8) (bytevector-s16-set! . f52c7) (bytevector-s16-ref . f52c6) (bytevector-s16-native-set! . f52c5) (bytevector-s16-native-ref . f52c4) (bytevector-length . f52c3) (bytevector-ieee-single-ref . f52c2) (bytevector-ieee-single-set! . f52c1) (bytevector-ieee-single-native-set! . f52c0) (bytevector-ieee-single-native-ref . f52bf) (bytevector-ieee-double-set! . f52be) (bytevector-ieee-double-ref . f52bd) (bytevector-ieee-double-native-set! . f52bc) (bytevector-ieee-double-native-ref . f52bb) (bytevector-fill! . f52ba) (bytevector-copy! . f52b9) (bytevector-copy . f52b8) (bytevector->uint-list . f52b7) (bytevector->u8-list . f52b6) (bytevector->sint-list . f52b5) (no-nans-violation? . f4ecd) (no-infinities-violation? . f4eb8) (make-no-nans-violation . f4ecb) (make-no-infinities-violation . f4eb6) (real->flonum . f52b4) (flzero? . f52b3) (fltruncate . f52b2) (fltan . f52b1) (flsqrt . f52b0) (flsin . f52af) (flround . f52ae) (flpositive? . f52ad) (flonum? . f52ac) (flodd? . f52ab) (flnumerator . f52aa) (flnegative? . f52a9) (flnan? . f52a8) (flmod0 . f52a7) (flmod . f52a6) (flmin . f52a5) (flmax . f52a4) (fllog . f52a3) (flinteger? . f52a2) (flinfinite? . f52a1) (flfloor . f52a0) (flfinite? . f529f) (flexpt . f529e) (flexp . f529d) (fleven? . f529c) (fldiv0-and-mod0 . f529b) (fldiv0 . f529a) (fldiv-and-mod . f5299) (fldiv . f5298) (fldenominator . f5297) (flcos . f5296) (flceiling . f5295) (flatan . f5294) (flasin . f5293) (flacos . f5292) (flabs . f5291) (fl>? . f5290) (fl>=? . f528f) (fl=? . f528e) (fl<? . f528d) (fl<=? . f528c) (fl/ . f528b) (fl- . f528a) (fl+ . f5289) (fl* . f5288) (fixnum->flonum . f5287) (fxzero? . f5286) (fxxor . f5285) (fxrotate-bit-field . f5284) (fxreverse-bit-field . f5283) (fxpositive? . f5282) (fxodd? . f5281) (fxnot . f5280) (fxnegative? . f527f) (fxmod0 . f527e) (fxmod . f527d) (fxmin . f527c) (fxmax . f527b) (fxlength . f527a) (fxior . f5279) (fxif . f5278) (fxfirst-bit-set . f5277) (fxeven? . f5276) (fxdiv0-and-mod0 . f5275) (fxdiv0 . f5274) (fxdiv-and-mod . f5273) (fxdiv . f5272) (fxcopy-bit-field . f5271) (fxcopy-bit . f5270) (fxbit-set? . f526f) (fxbit-field . f526e) (fxbit-count . f526d) (fxarithmetic-shift-right . f526c) (fxarithmetic-shift-left . f526b) (fxarithmetic-shift . f526a) (fxand . f5269) (fx>? . f5268) (fx>=? . f5267) (fx=? . f5266) (fx<? . f5265) (fx<=? . f5264) (fx-/carry . f5263) (fx- . f5262) (fx+/carry . f5261) (fx+ . f5260) (fx*/carry . f525f) (fx* . f525e) (greatest-fixnum . f525d) (least-fixnum . f525c) (fixnum-width . f525b) (fixnum? . f525a) (bitwise-rotate-bit-field . f5259) (bitwise-reverse-bit-field . f5258) (bitwise-length . f5257) (bitwise-if . f5256) (bitwise-first-bit-set . f5255) (bitwise-copy-bit-field . f5254) (bitwise-copy-bit . f5253) (bitwise-bit-set? . f5252) (bitwise-bit-field . f5251) (bitwise-bit-count . f5250) (bitwise-xor . f524f) (bitwise-ior . f524e) (bitwise-and . f524d) (bitwise-not . f524c) (bitwise-arithmetic-shift-right . f524b) (bitwise-arithmetic-shift-left . f524a) (bitwise-arithmetic-shift . f5249) (zero? . f5248) (vector? . f5247) (vector-set! . f5246) (vector-ref . f5245) (vector-map . f5244) (vector-length . f5243) (vector-for-each . f5242) (vector-fill! . f5241) (vector->list . f5240) (vector . f523f) (values . f523e) (truncate . f523d) (tan . f523c) (symbol? . f523b) (symbol=? . f523a) (symbol->string . f5239) (substring . f5238) (string? . f5237) (string>? . f5236) (string>=? . f5235) (string=? . f5234) (string<? . f5233) (string<=? . f5232) (string-ref . f5231) (string-length . f5230) (string-for-each . f522f) (string-copy . f522e) (string-append . f522d) (string->symbol . f522c) (string->number . f522b) (string->list . f522a) (string . f5229) (sqrt . f5228) (sin . f5227) (round . f5226) (reverse . f5225) (real? . f5224) (real-valued? . f5223) (real-part . f5222) (rationalize . f5221) (rational? . f5220) (rational-valued? . f521f) (procedure? . f521e) (positive? . f521d) (pair? . f521c) (odd? . f521b) (numerator . f521a) (number? . f5219) (number->string . f5218) (null? . f5217) (not . f5216) (negative? . f5215) (nan? . f5214) (min . f5213) (max . f5212) (map . f5211) (make-vector . f5210) (make-string . f520f) (make-rectangular . f520e) (make-polar . f520d) (magnitude . f520c) (log . f520b) (list? . f520a) (list-tail . f5209) (list-ref . f5208) (list->vector . f5207) (list->string . f5206) (list . f5205) (length . f5204) (lcm . f5203) (integer? . f5202) (integer-valued? . f5201) (integer->char . f5200) (infinite? . f51ff) (inexact? . f51fe) (inexact . f51fd) (imag-part . f51fc) (gcd . f51fb) (for-each . f51fa) (floor . f51f9) (finite? . f51f8) (expt . f51f7) (exp . f51f6) (exact? . f51f5) (exact-integer-sqrt . f51f4) (exact . f51f3) (even? . f51f2) (error . f51f1) (eqv? . f51f0) (equal? . f51ef) (eq? . f51ee) (dynamic-wind . f51ed) (div0-and-mod0 . f51ec) (mod0 . f51eb) (div0 . f51ea) (div-and-mod . f51e9) (mod . f51e8) (div . f51e7) (denominator . f51e6) (cos . f51e5) (cons . f51e4) (complex? . f51e3) (char? . f51e2) (char>? . f51e1) (char>=? . f51e0) (char=? . f51df) (char<? . f51de) (char<=? . f51dd) (char->integer . f51dc) (ceiling . f51db) (call-with-values . f51da) (call/cc . f51d9) (call-with-current-continuation . f51d8) (cddddr . f51d7) (cdddar . f51d6) (cddadr . f51d5) (cddaar . f51d4) (cdaddr . f51d3) (cdadar . f51d2) (cdaadr . f51d1) (cdaaar . f51d0) (cadddr . f51cf) (caddar . f51ce) (cadadr . f51cd) (cadaar . f51cc) (caaddr . f51cb) (caadar . f51ca) (caaadr . f51c9) (caaaar . f51c8) (cdddr . f51c7) (cddar . f51c6) (cdadr . f51c5) (cdaar . f51c4) (caddr . f51c3) (cadar . f51c2) (caadr . f51c1) (caaar . f51c0) (cddr . f51bf) (cdar . f51be) (cadr . f51bd) (caar . f51bc) (cdr . f51bb) (car . f51ba) (boolean? . f51b9) (boolean=? . f51b8) (atan . f51b7) (assertion-violation . f51b6) (assertion-error . f319c) (asin . f51b5) (apply . f51b4) (append . f51b3) (angle . f51b2) (acos . f51b1) (abs . f51b0) (/ . f51af) (* . f51ae) (- . f51ad) (+ . f51ac) (>= . f51ab) (> . f51aa) (= . f51a9) (<= . f51a8) (< . f51a7) (library . f51a6) (&no-nans . f51a5) (&no-infinities . f51a4) (&i/o-encoding . f51a3) (&i/o-decoding . f51a2) (&i/o-port . f51a1) (&i/o-file-does-not-exist . f51a0) (&i/o-file-already-exists . f519f) (&i/o-file-is-read-only . f519e) (&i/o-file-protection . f519d) (&i/o-filename . f519c) (&i/o-invalid-position . f519b) (&i/o-write . f519a) (&i/o-read . f5199) (&i/o . f5198) (&undefined . f5197) (&syntax . f5196) (&lexical . f5195) (&implementation-restriction . f5194) (&non-continuable . f5193) (&who . f5192) (&irritants . f5191) (&assertion . f5190) (&violation . f518f) (&error . f518e) (&serious . f518d) (&warning . f518c) (&message . f518b) (&condition . f518a) (define-condition-type . f5189) (define-enumeration . f5188) (define-record-type . f5187) (parent-rtd . f5186) (nongenerative . f5185) (opaque . f5184) (sealed . f5183) (protocol . f5182) (parent . f5181) (immutable . f5180) (mutable . f517f) (fields . f517e) (error-handling-mode . f517d) (file-options . f517c) (buffer-mode . f517b) (eol-style . f517a) (guard . f5179) (trace-define . f5178) (trace-lambda . f5177) (unsyntax-splicing . f5176) (unsyntax . f5175) (unquote-splicing . f5174) (unquote . f5173) (_ . f5172) (else . f5171) (=> . f5170) (... . f516f) (assert . f516e) (endianness . f516d) (delay . f516c) (time . f516b) (do . f516a) (cond . f5169) (let* . f5168) (let*-values . f5167) (let-values . f5166) (identifier-syntax . f5165) (with-syntax . f5164) (quasisyntax . f5163) (quasiquote . f5162) (syntax-rules . f5161) (include . f5160) (define-struct . f515f) (record-constructor-descriptor . f515e) (record-type-descriptor . f515d) (case . f515c) (parameterize . f515b) (unless . f515a) (when . f5159) (or . f5158) (and . f5157) (if . f5156) (let . f5155) (letrec* . f5154) (letrec . f5153) (type-descriptor . f5152) (case-lambda . f5151) (lambda . f5150) (syntax . f514f) (syntax-case . f514e) (quote . f514d) (foreign-call . f514c) (letrec-syntax . f514b) (let-syntax . f514a) (set! . f5149) (import . f5148) (begin . f5147) (module . f5146) (define-syntax . f5145) (define . f5144)) '((f4ed1 core-prim . &no-nans-rcd) (f4ecf core-prim . &no-nans-rtd) (f4ebc core-prim . &no-infinities-rcd) (f4eba core-prim . &no-infinities-rtd) (f4ea7 core-prim . &i/o-encoding-rcd) (f4ea5 core-prim . &i/o-encoding-rtd) (f4e8c core-prim . &i/o-decoding-rcd) (f4e8a core-prim . &i/o-decoding-rtd) (f4e77 core-prim . &i/o-port-rcd) (f4e75 core-prim . &i/o-port-rtd) (f4e5c core-prim . &i/o-file-does-not-exist-rcd) (f4e5a core-prim . &i/o-file-does-not-exist-rtd) (f4e47 core-prim . &i/o-file-already-exists-rcd) (f4e45 core-prim . &i/o-file-already-exists-rtd) (f4e32 core-prim . &i/o-file-is-read-only-rcd) (f4e30 core-prim . &i/o-file-is-read-only-rtd) (f4e1d core-prim . &i/o-file-protection-rcd) (f4e1b core-prim . &i/o-file-protection-rtd) (f4e08 core-prim . &i/o-filename-rcd) (f4e06 core-prim . &i/o-filename-rtd) (f4ded core-prim . &i/o-invalid-position-rcd) (f4deb core-prim . &i/o-invalid-position-rtd) (f4dd2 core-prim . &i/o-write-rcd) (f4dd0 core-prim . &i/o-write-rtd) (f4dbd core-prim . &i/o-read-rcd) (f4dbb core-prim . &i/o-read-rtd) (f4da8 core-prim . &i/o-rcd) (f4da6 core-prim . &i/o-rtd) (f4d93 core-prim . &undefined-rcd) (f4d91 core-prim . &undefined-rtd) (f4d7e core-prim . &syntax-rcd) (f4d7c core-prim . &syntax-rtd) (f4d5d core-prim . &lexical-rcd) (f4d5b core-prim . &lexical-rtd) (f4d48 core-prim . &implementation-restriction-rcd) (f4d46 core-prim . &implementation-restriction-rtd) (f4d33 core-prim . &non-continuable-rcd) (f4d31 core-prim . &non-continuable-rtd) (f4d1e core-prim . &who-rcd) (f4d1c core-prim . &who-rtd) (f4d03 core-prim . &irritants-rcd) (f4d01 core-prim . &irritants-rtd) (f4ce8 core-prim . &assertion-rcd) (f4ce6 core-prim . &assertion-rtd) (f4cd3 core-prim . &violation-rcd) (f4cd1 core-prim . &violation-rtd) (f4cbe core-prim . &error-rcd) (f4cbc core-prim . &error-rtd) (f4ca9 core-prim . &serious-rcd) (f4ca7 core-prim . &serious-rtd) (f4c94 core-prim . &warning-rcd) (f4c92 core-prim . &warning-rtd) (f4c7f core-prim . &message-rcd) (f4c7d core-prim . &message-rtd) (f4c20 core-prim . &condition-rcd) (f4c1e core-prim . &condition-rtd) (f319e core-prim . syntax-error) (f30c2 core-prim . syntax-dispatch) (f546d core-prim . pretty-print) (f546c core-prim . eval-core) (f546b core-prim . set-symbol-value!) (f546a core-prim . symbol-value) (f5469 core-prim . gensym) (f5468 core-prim . void) (f4fe2 core-prim . load) (f31b0 core-prim . interaction-environment) (f5467 core-prim . char-ready?) (f5466 core-prim . regexp?) (f5465 core-prim . read-line) (f5464 core-prim . gensym-prefix-set!) (f5463 core-prim . ungensym) (f5462 core-prim . alist->eq-hash-table) (f5461 core-prim . assoc-ref) (f5460 core-prim . print) (f545f core-prim . format) (f545e core-prim . host-os) (f2afb core-prim . library-path) (f545d core-prim . standard-library-path) (f545c core-prim . file-newer?) (f545b core-prim . stat-mtime) (f545a core-prim . write-to-file) (f5459 core-prim . file->list) (f5458 core-prim . file->string) (f5457 core-prim . digit->integer) (f5456 core-prim . call-with-string-input-port) (f5455 core-prim . call-with-string-io) (f5454 core-prim . string-split) (f5453 core-prim . bytevector-for-each) (f5452 core-prim . string->regexp) (f5451 core-prim . rxmatch) (f5450 core-prim . regexp-replace-all) (f544f core-prim . hashtable-for-each) (f28e6 core-prim . mosh-cache-dir) (f544e core-prim . call-process) (f544d core-prim . local-tz-offset) (f544c core-prim . microseconds) (f544b core-prim . directory-list) (f544a core-prim . set-current-directory!) (f5449 core-prim . expand-path) (f5448 core-prim . current-directory) (f5447 core-prim . %spawn) (f5446 core-prim . %waitpid) (f5445 core-prim . simple-struct-name) (f5444 core-prim . simple-struct-set!) (f5443 core-prim . simple-struct-ref) (f5442 core-prim . make-simple-struct) (f5441 core-prim . simple-struct?) (f5440 core-prim . pointer-ref-c-int64) (f543f core-prim . pointer-ref-c-int32) (f543e core-prim . pointer-ref-c-int16) (f543d core-prim . pointer-ref-c-int8) (f543c core-prim . pointer-ref-c-uint64) (f543b core-prim . pointer-ref-c-uint32) (f543a core-prim . pointer-ref-c-uint16) (f5439 core-prim . pointer-ref-c-uint8) (f5438 core-prim . pointer-set-c-uint64!) (f5437 core-prim . pointer-set-c-uint32!) (f5436 core-prim . pointer-set-c-uint16!) (f5435 core-prim . pointer-set-c-uint8!) (f5434 core-prim . pointer-set-c-int64!) (f5433 core-prim . pointer-set-c-int32!) (f5432 core-prim . pointer-set-c-int16!) (f5431 core-prim . pointer-set-c-int8!) (f5430 core-prim . pointer-set-c-pointer!) (f542f core-prim . pointer-set-c-double!) (f542e core-prim . pointer-set-c-float!) (f542d core-prim . pointer-set-c-long-long!) (f542c core-prim . pointer-set-c-long!) (f542b core-prim . pointer-set-c-int!) (f542a core-prim . pointer-set-c-short!) (f5429 core-prim . pointer-set-c-char!) (f5428 core-prim . pointer-ref-c-pointer) (f5427 core-prim . pointer-ref-c-double) (f5426 core-prim . pointer-ref-c-float) (f5425 core-prim . pointer-ref-c-unsigned-long-long) (f5424 core-prim . pointer-ref-c-signed-long-long) (f5423 core-prim . pointer-ref-c-unsigned-long) (f5422 core-prim . pointer-ref-c-signed-long) (f5421 core-prim . pointer-ref-c-unsigned-int) (f5420 core-prim . pointer-ref-c-signed-int) (f541f core-prim . pointer-ref-c-unsigned-short) (f541e core-prim . pointer-ref-c-signed-short) (f541d core-prim . pointer-ref-c-unsigned-char) (f541c core-prim . pointer-ref-c-signed-char) (f541b core-prim . pointer->integer) (f541a core-prim . integer->pointer) (f5419 core-prim . pointer?) (f5418 core-prim . shared-errno) (f5417 core-prim . %ffi-free-c-callback-trampoline) (f5416 core-prim . %ffi-make-c-callback-trampoline) (f5415 core-prim . %ffi-free) (f5414 core-prim . %ffi-malloc) (f5413 core-prim . %ffi-supported?) (f5412 core-prim . %ffi-pointer->string) (f5411 core-prim . %ffi-call->string-or-zero) (f5410 core-prim . %ffi-call->double) (f540f core-prim . %ffi-call->void*) (f540e core-prim . %ffi-call->void) (f540d core-prim . %ffi-call->char) (f540c core-prim . %ffi-call->int) (f540b core-prim . %ffi-lookup) (f540a core-prim . %ffi-open) (f5409 core-prim . %fork) (f5408 core-prim . %pipe) (f5407 core-prim . p) (f5406 core-prim . open-output-string) (f5405 core-prim . get-output-string) (f5404 core-prim . file-stat-ctime) (f5403 core-prim . file-stat-atime) (f5402 core-prim . file-stat-mtime) (f5401 core-prim . file-size-in-bytes) (f5400 core-prim . file-writable?) (f53ff core-prim . file-executable?) (f53fe core-prim . file-readable?) (f53fd core-prim . file-regular?) (f53fc core-prim . file-symbolic-link?) (f53fb core-prim . file-directory?) (f53fa core-prim . create-symbolic-link) (f53f9 core-prim . rename-file) (f53f8 core-prim . delete-directory) (f53f7 core-prim . create-directory) (f53f6 core-prim . create-mosh-cache-dir) (f53f5 core-prim . get-environment-variables) (f53f4 core-prim . current-exception-handler) (f53f3 core-prim . get-environment-variable) (f53f2 core-prim . join-wraps) (f53f1 core-prim . id->real-label) (f53f0 core-prim . same-marks?) (f53ef core-prim . same-marks*?) (f53ee core-prim . get-timeofday) (f53ed core-prim . get-command-line) (f53ec core-prim . sys-display) (f53eb core-prim . whereis) (f53ea core-prim . register) (f53e9 core-prim . vm-join!) (f53e8 core-prim . vm-set-value!) (f53e7 core-prim . vm?) (f53e6 core-prim . main-vm?) (f53e5 core-prim . vm-eval) (f53e4 core-prim . vm-self) (f53e3 core-prim . vm-start!) (f53e2 core-prim . make-vm) (f53e1 core-prim . mutex-try-lock!) (f53e0 core-prim . mutex-unlock!) (f53df core-prim . mutex-lock!) (f53de core-prim . mutex?) (f53dd core-prim . make-mutex) (f53dc core-prim . condition-variable-notify-all!) (f53db core-prim . condition-variable-notify!) (f53da core-prim . condition-variable-wait!) (f53d9 core-prim . make-condition-variable) (f53d8 core-prim . mosh-executable-path) (f53d7 core-prim . make-file-options) (f53d6 core-prim . source-info) (f53d5 core-prim . make-compiler-instruction) (f53d4 core-prim . make-instruction) (f53d3 core-prim . set-source-info!) (f53d2 core-prim . bignum?) (f53d1 core-prim . fast-equal?) (f53d0 core-prim . fasl-read) (f53cf core-prim . fasl-write) (f53ce core-prim . time-usage) (f53cd core-prim . os-constant) (f53cc core-prim . disasm) (f28e4 core-prim . make-parameter) (f53cb core-prim . socket-port) (f53ca core-prim . socket-shutdown) (f53c9 core-prim . socket-close) (f53c8 core-prim . socket-send) (f53c7 core-prim . socket-recv!) (f53c6 core-prim . socket-recv) (f53c5 core-prim . make-server-socket) (f53c4 core-prim . make-client-socket) (f53c3 core-prim . socket-accept) (f53c2 core-prim . socket?) (f53c1 core-prim . string-upcase) (f53c0 core-prim . string-titlecase) (f53bf core-prim . string-normalize-nfkd) (f53be core-prim . string-normalize-nfkc) (f53bd core-prim . string-normalize-nfd) (f53bc core-prim . string-normalize-nfc) (f53bb core-prim . string-foldcase) (f53ba core-prim . string-downcase) (f53b9 core-prim . string-ci>?) (f53b8 core-prim . string-ci>=?) (f53b7 core-prim . string-ci=?) (f53b6 core-prim . string-ci<?) (f53b5 core-prim . string-ci<=?) (f53b4 core-prim . char-whitespace?) (f53b3 core-prim . char-upper-case?) (f53b2 core-prim . char-title-case?) (f53b1 core-prim . char-numeric?) (f53b0 core-prim . char-lower-case?) (f53af core-prim . char-general-category) (f53ae core-prim . char-upcase) (f53ad core-prim . char-titlecase) (f53ac core-prim . char-foldcase) (f53ab core-prim . char-downcase) (f53aa core-prim . char-ci>?) (f53a9 core-prim . char-ci>=?) (f53a8 core-prim . char-ci=?) (f53a7 core-prim . char-ci<?) (f53a6 core-prim . char-ci<=?) (f53a5 core-prim . char-alphabetic?) (f2eed core-prim . make-variable-transformer) (f31a4 core-prim . identifier?) (f3190 core-prim . generate-temporaries) (f3192 core-prim . free-identifier=?) (f31a8 core-prim . syntax->datum) (f31a6 core-prim . datum->syntax) (f3194 core-prim . bound-identifier=?) (f53a4 core-prim . record-type-descriptor?) (f53a3 core-prim . record-predicate) (f53a2 core-prim . record-mutator) (f53a1 core-prim . record-constructor) (f53a0 core-prim . record-accessor) (f539f core-prim . make-record-type-descriptor) (f539e core-prim . make-record-constructor-descriptor) (f539d core-prim . record?) (f539c core-prim . record-type-uid) (f539b core-prim . record-type-sealed?) (f539a core-prim . record-type-parent) (f5399 core-prim . record-type-opaque?) (f5398 core-prim . record-type-name) (f5397 core-prim . record-type-generative?) (f5396 core-prim . record-type-field-names) (f5395 core-prim . record-rtd) (f5394 core-prim . record-field-mutable?) (f5393 core-prim . delete-file) (f5392 core-prim . file-exists?) (f5391 core-prim . vector-sort!) (f5390 core-prim . vector-sort) (f538f core-prim . list-sort) (f538e core-prim . symbol-hash) (f538d core-prim . string-ci-hash) (f538c core-prim . string-hash) (f538b core-prim . equal-hash) (f538a core-prim . hashtable-equivalence-function) (f5389 core-prim . make-hashtable) (f5388 core-prim . hashtable-hash-function) (f5387 core-prim . make-eqv-hashtable) (f5386 core-prim . make-eq-hashtable) (f5385 core-prim . hashtable?) (f5384 core-prim . hashtable-update!) (f5383 core-prim . hashtable-size) (f5382 core-prim . hashtable-set!) (f5381 core-prim . hashtable-ref) (f5380 core-prim . hashtable-mutable?) (f537f core-prim . hashtable-keys) (f537e core-prim . hashtable-entries) (f537d core-prim . hashtable-delete!) (f537c core-prim . hashtable-copy) (f537b core-prim . hashtable-contains?) (f537a core-prim . hashtable-clear!) (f5379 core-prim . call-with-output-file) (f5378 core-prim . call-with-input-file) (f5377 core-prim . write-char) (f5376 core-prim . write) (f5375 core-prim . with-output-to-file) (f5374 core-prim . with-input-from-file) (f5373 core-prim . read-char) (f5372 core-prim . read) (f5371 core-prim . peek-char) (f5370 core-prim . open-output-file) (f536f core-prim . open-input-file) (f536e core-prim . newline) (f536d core-prim . display) (f536c core-prim . close-output-port) (f536b core-prim . close-input-port) (f536a core-prim . eof-object?) (f5369 core-prim . eof-object) (f5368 core-prim . current-error-port) (f5367 core-prim . current-output-port) (f5366 core-prim . current-input-port) (f5365 core-prim . output-port?) (f5364 core-prim . input-port?) (f5363 core-prim . utf-8-codec) (f5362 core-prim . utf-16-codec) (f5361 core-prim . transcoder-error-handling-mode) (f5360 core-prim . transcoder-eol-style) (f535f core-prim . transcoder-codec) (f535e core-prim . transcoded-port) (f535d core-prim . textual-port?) (f535c core-prim . string->bytevector) (f535b core-prim . standard-output-port) (f535a core-prim . standard-input-port) (f5359 core-prim . standard-error-port) (f5358 core-prim . set-port-position!) (f5357 core-prim . put-u8) (f5356 core-prim . put-string) (f5355 core-prim . put-datum) (f5354 core-prim . put-char) (f5353 core-prim . put-bytevector) (f5352 core-prim . port?) (f5351 core-prim . port-transcoder) (f5350 core-prim . port-position) (f534f core-prim . port-has-set-port-position!?) (f534e core-prim . port-has-port-position?) (f534d core-prim . port-eof?) (f534c core-prim . output-port-buffer-mode) (f534b core-prim . open-string-output-port) (f534a core-prim . open-string-input-port) (f5349 core-prim . open-file-output-port) (f5348 core-prim . open-file-input/output-port) (f5347 core-prim . open-file-input-port) (f5346 core-prim . open-bytevector-output-port) (f5345 core-prim . open-bytevector-input-port) (f5344 core-prim . native-transcoder) (f5343 core-prim . native-eol-style) (f5342 core-prim . make-transcoder) (f5341 core-prim . latin-1-codec) (f4dcc core-prim . make-i/o-write-error) (f4db7 core-prim . make-i/o-read-error) (f4e6d core-prim . make-i/o-port-error) (f4de3 core-prim . make-i/o-invalid-position-error) (f4dfe core-prim . make-i/o-filename-error) (f4e17 core-prim . make-i/o-file-protection-error) (f4e2c core-prim . make-i/o-file-is-read-only-error) (f4e56 core-prim . make-i/o-file-does-not-exist-error) (f4e41 core-prim . make-i/o-file-already-exists-error) (f4da2 core-prim . make-i/o-error) (f4e9d core-prim . make-i/o-encoding-error) (f4e86 core-prim . make-i/o-decoding-error) (f5340 core-prim . make-custom-textual-output-port) (f533f core-prim . make-custom-textual-input/output-port) (f533e core-prim . make-custom-textual-input-port) (f533d core-prim . make-custom-binary-output-port) (f533c core-prim . make-custom-binary-input/output-port) (f533b core-prim . make-custom-binary-input-port) (f533a core-prim . make-bytevector) (f5339 core-prim . lookahead-u8) (f5338 core-prim . lookahead-char) (f4dce core-prim . i/o-write-error?) (f4db9 core-prim . i/o-read-error?) (f4e71 core-prim . i/o-port-error?) (f4de7 core-prim . i/o-invalid-position-error?) (f4e02 core-prim . i/o-filename-error?) (f4e19 core-prim . i/o-file-protection-error?) (f4e2e core-prim . i/o-file-is-read-only-error?) (f4e58 core-prim . i/o-file-does-not-exist-error?) (f4e43 core-prim . i/o-file-already-exists-error?) (f4da4 core-prim . i/o-error?) (f4de9 core-prim . i/o-error-position) (f4e73 core-prim . i/o-error-port) (f4e04 core-prim . i/o-error-filename) (f4ea1 core-prim . i/o-encoding-error?) (f4ea3 core-prim . i/o-encoding-error-char) (f4e88 core-prim . i/o-decoding-error?) (f5337 core-prim . get-u8) (f5336 core-prim . get-string-n!) (f5335 core-prim . get-string-n) (f5334 core-prim . get-string-all) (f5333 core-prim . get-line) (f5332 core-prim . get-datum) (f5331 core-prim . get-char) (f5330 core-prim . get-bytevector-some) (f532f core-prim . get-bytevector-n!) (f532e core-prim . get-bytevector-n) (f532d core-prim . get-bytevector-all) (f532c core-prim . flush-output-port) (f532b core-prim . close-port) (f317e core-prim . scheme-report-environment) (f532a core-prim . quotient) (f317c core-prim . null-environment) (f5329 core-prim . remainder) (f5328 core-prim . modulo) (f5327 core-prim . inexact->exact) (f5326 core-prim . force) (f5325 core-prim . exact->inexact) (f5324 core-prim . make-promise) (f5323 core-prim . exit) (f4fdc core-prim . command-line) (f5322 core-prim . string-fill!) (f5321 core-prim . string-set!) (f5320 core-prim . set-cdr!) (f531f core-prim . set-car!) (f531e core-prim . remove) (f531d core-prim . remv) (f531c core-prim . remp) (f531b core-prim . remq) (f531a core-prim . partition) (f5319 core-prim . memv) (f5318 core-prim . memq) (f5317 core-prim . memp) (f5316 core-prim . member) (f5315 core-prim . exists) (f5314 core-prim . for-all) (f5313 core-prim . fold-right) (f5312 core-prim . fold-left) (f5311 core-prim . find) (f5310 core-prim . filter) (f530f core-prim . cons*) (f530e core-prim . assv) (f530d core-prim . assq) (f530c core-prim . assp) (f530b core-prim . assoc) (f530a core-prim . call-with-string-output-port) (f5309 core-prim . call-with-port) (f5308 core-prim . call-with-bytevector-output-port) (f5307 core-prim . bytevector->string) (f5306 core-prim . buffer-mode?) (f5305 core-prim . binary-port?) (f5304 core-prim . with-exception-handler) (f5303 core-prim . raise-continuable) (f5302 core-prim . raise) (f3182 core-prim . eval) (f317a core-prim . environment) (f5301 core-prim . make-enumeration) (f5300 core-prim . enum-set=?) (f52ff core-prim . enum-set-universe) (f52fe core-prim . enum-set-union) (f52fd core-prim . enum-set-subset?) (f52fc core-prim . enum-set-projection) (f52fb core-prim . enum-set-member?) (f52fa core-prim . enum-set-intersection) (f52f9 core-prim . enum-set-indexer) (f52f8 core-prim . enum-set-difference) (f52f7 core-prim . enum-set-constructor) (f52f6 core-prim . enum-set-complement) (f52f5 core-prim . enum-set->list) (f4d18 core-prim . who-condition?) (f4c90 core-prim . warning?) (f4ccf core-prim . violation?) (f4d8f core-prim . undefined-violation?) (f4d76 core-prim . syntax-violation?) (f4d7a core-prim . syntax-violation-subform) (f4d78 core-prim . syntax-violation-form) (f31a2 core-prim . syntax-violation) (f52f4 core-prim . simple-conditions) (f4ca5 core-prim . serious-condition?) (f4d2f core-prim . non-continuable-violation?) (f4c79 core-prim . message-condition?) (f4d14 core-prim . make-who-condition) (f4c8e core-prim . make-warning) (f4ccd core-prim . make-violation) (f4d8d core-prim . make-undefined-violation) (f4d70 core-prim . make-syntax-violation) (f4ca3 core-prim . make-serious-condition) (f4d2d core-prim . make-non-continuable-violation) (f4c75 core-prim . make-message-condition) (f4d57 core-prim . make-lexical-violation) (f4cf9 core-prim . make-irritants-condition) (f4d42 core-prim . make-implementation-restriction-violation) (f4cb8 core-prim . make-error) (f4ce2 core-prim . make-assertion-violation) (f4d59 core-prim . lexical-violation?) (f4cfd core-prim . irritants-condition?) (f4d44 core-prim . implementation-restriction-violation?) (f4cba core-prim . error?) (f4d1a core-prim . condition-who) (f52f3 core-prim . condition-predicate) (f4c7b core-prim . condition-message) (f4cff core-prim . condition-irritants) (f52f2 core-prim . condition-accessor) (f52f1 core-prim . condition) (f4ce4 core-prim . assertion-violation?) (f52f0 core-prim . condition?) (f52ef core-prim . utf32->string) (f52ee core-prim . utf16->string) (f52ed core-prim . utf8->string) (f52ec core-prim . uint-list->bytevector) (f52eb core-prim . u8-list->bytevector) (f52ea core-prim . string->utf8) (f52e9 core-prim . string->utf32) (f52e8 core-prim . string->utf16) (f52e7 core-prim . sint-list->bytevector) (f52e6 core-prim . native-endianness) (f52e5 core-prim . bytevector?) (f52e4 core-prim . bytevector=?) (f52e3 core-prim . bytevector-uint-set!) (f52e2 core-prim . bytevector-uint-ref) (f52e1 core-prim . bytevector-u8-set!) (f52e0 core-prim . bytevector-u8-ref) (f52df core-prim . bytevector-u64-set!) (f52de core-prim . bytevector-u64-ref) (f52dd core-prim . bytevector-u64-native-set!) (f52dc core-prim . bytevector-u64-native-ref) (f52db core-prim . bytevector-u32-set!) (f52da core-prim . bytevector-u32-ref) (f52d9 core-prim . bytevector-u32-native-set!) (f52d8 core-prim . bytevector-u32-native-ref) (f52d7 core-prim . bytevector-u16-set!) (f52d6 core-prim . bytevector-u16-ref) (f52d5 core-prim . bytevector-u16-native-set!) (f52d4 core-prim . bytevector-u16-native-ref) (f52d3 core-prim . bytevector-sint-set!) (f52d2 core-prim . bytevector-sint-ref) (f52d1 core-prim . bytevector-s8-set!) (f52d0 core-prim . bytevector-s8-ref) (f52cf core-prim . bytevector-s64-set!) (f52ce core-prim . bytevector-s64-ref) (f52cd core-prim . bytevector-s64-native-set!) (f52cc core-prim . bytevector-s64-native-ref) (f52cb core-prim . bytevector-s32-set!) (f52ca core-prim . bytevector-s32-ref) (f52c9 core-prim . bytevector-s32-native-set!) (f52c8 core-prim . bytevector-s32-native-ref) (f52c7 core-prim . bytevector-s16-set!) (f52c6 core-prim . bytevector-s16-ref) (f52c5 core-prim . bytevector-s16-native-set!) (f52c4 core-prim . bytevector-s16-native-ref) (f52c3 core-prim . bytevector-length) (f52c2 core-prim . bytevector-ieee-single-ref) (f52c1 core-prim . bytevector-ieee-single-set!) (f52c0 core-prim . bytevector-ieee-single-native-set!) (f52bf core-prim . bytevector-ieee-single-native-ref) (f52be core-prim . bytevector-ieee-double-set!) (f52bd core-prim . bytevector-ieee-double-ref) (f52bc core-prim . bytevector-ieee-double-native-set!) (f52bb core-prim . bytevector-ieee-double-native-ref) (f52ba core-prim . bytevector-fill!) (f52b9 core-prim . bytevector-copy!) (f52b8 core-prim . bytevector-copy) (f52b7 core-prim . bytevector->uint-list) (f52b6 core-prim . bytevector->u8-list) (f52b5 core-prim . bytevector->sint-list) (f4ecd core-prim . no-nans-violation?) (f4eb8 core-prim . no-infinities-violation?) (f4ecb core-prim . make-no-nans-violation) (f4eb6 core-prim . make-no-infinities-violation) (f52b4 core-prim . real->flonum) (f52b3 core-prim . flzero?) (f52b2 core-prim . fltruncate) (f52b1 core-prim . fltan) (f52b0 core-prim . flsqrt) (f52af core-prim . flsin) (f52ae core-prim . flround) (f52ad core-prim . flpositive?) (f52ac core-prim . flonum?) (f52ab core-prim . flodd?) (f52aa core-prim . flnumerator) (f52a9 core-prim . flnegative?) (f52a8 core-prim . flnan?) (f52a7 core-prim . flmod0) (f52a6 core-prim . flmod) (f52a5 core-prim . flmin) (f52a4 core-prim . flmax) (f52a3 core-prim . fllog) (f52a2 core-prim . flinteger?) (f52a1 core-prim . flinfinite?) (f52a0 core-prim . flfloor) (f529f core-prim . flfinite?) (f529e core-prim . flexpt) (f529d core-prim . flexp) (f529c core-prim . fleven?) (f529b core-prim . fldiv0-and-mod0) (f529a core-prim . fldiv0) (f5299 core-prim . fldiv-and-mod) (f5298 core-prim . fldiv) (f5297 core-prim . fldenominator) (f5296 core-prim . flcos) (f5295 core-prim . flceiling) (f5294 core-prim . flatan) (f5293 core-prim . flasin) (f5292 core-prim . flacos) (f5291 core-prim . flabs) (f5290 core-prim . fl>?) (f528f core-prim . fl>=?) (f528e core-prim . fl=?) (f528d core-prim . fl<?) (f528c core-prim . fl<=?) (f528b core-prim . fl/) (f528a core-prim . fl-) (f5289 core-prim . fl+) (f5288 core-prim . fl*) (f5287 core-prim . fixnum->flonum) (f5286 core-prim . fxzero?) (f5285 core-prim . fxxor) (f5284 core-prim . fxrotate-bit-field) (f5283 core-prim . fxreverse-bit-field) (f5282 core-prim . fxpositive?) (f5281 core-prim . fxodd?) (f5280 core-prim . fxnot) (f527f core-prim . fxnegative?) (f527e core-prim . fxmod0) (f527d core-prim . fxmod) (f527c core-prim . fxmin) (f527b core-prim . fxmax) (f527a core-prim . fxlength) (f5279 core-prim . fxior) (f5278 core-prim . fxif) (f5277 core-prim . fxfirst-bit-set) (f5276 core-prim . fxeven?) (f5275 core-prim . fxdiv0-and-mod0) (f5274 core-prim . fxdiv0) (f5273 core-prim . fxdiv-and-mod) (f5272 core-prim . fxdiv) (f5271 core-prim . fxcopy-bit-field) (f5270 core-prim . fxcopy-bit) (f526f core-prim . fxbit-set?) (f526e core-prim . fxbit-field) (f526d core-prim . fxbit-count) (f526c core-prim . fxarithmetic-shift-right) (f526b core-prim . fxarithmetic-shift-left) (f526a core-prim . fxarithmetic-shift) (f5269 core-prim . fxand) (f5268 core-prim . fx>?) (f5267 core-prim . fx>=?) (f5266 core-prim . fx=?) (f5265 core-prim . fx<?) (f5264 core-prim . fx<=?) (f5263 core-prim . fx-/carry) (f5262 core-prim . fx-) (f5261 core-prim . fx+/carry) (f5260 core-prim . fx+) (f525f core-prim . fx*/carry) (f525e core-prim . fx*) (f525d core-prim . greatest-fixnum) (f525c core-prim . least-fixnum) (f525b core-prim . fixnum-width) (f525a core-prim . fixnum?) (f5259 core-prim . bitwise-rotate-bit-field) (f5258 core-prim . bitwise-reverse-bit-field) (f5257 core-prim . bitwise-length) (f5256 core-prim . bitwise-if) (f5255 core-prim . bitwise-first-bit-set) (f5254 core-prim . bitwise-copy-bit-field) (f5253 core-prim . bitwise-copy-bit) (f5252 core-prim . bitwise-bit-set?) (f5251 core-prim . bitwise-bit-field) (f5250 core-prim . bitwise-bit-count) (f524f core-prim . bitwise-xor) (f524e core-prim . bitwise-ior) (f524d core-prim . bitwise-and) (f524c core-prim . bitwise-not) (f524b core-prim . bitwise-arithmetic-shift-right) (f524a core-prim . bitwise-arithmetic-shift-left) (f5249 core-prim . bitwise-arithmetic-shift) (f5248 core-prim . zero?) (f5247 core-prim . vector?) (f5246 core-prim . vector-set!) (f5245 core-prim . vector-ref) (f5244 core-prim . vector-map) (f5243 core-prim . vector-length) (f5242 core-prim . vector-for-each) (f5241 core-prim . vector-fill!) (f5240 core-prim . vector->list) (f523f core-prim . vector) (f523e core-prim . values) (f523d core-prim . truncate) (f523c core-prim . tan) (f523b core-prim . symbol?) (f523a core-prim . symbol=?) (f5239 core-prim . symbol->string) (f5238 core-prim . substring) (f5237 core-prim . string?) (f5236 core-prim . string>?) (f5235 core-prim . string>=?) (f5234 core-prim . string=?) (f5233 core-prim . string<?) (f5232 core-prim . string<=?) (f5231 core-prim . string-ref) (f5230 core-prim . string-length) (f522f core-prim . string-for-each) (f522e core-prim . string-copy) (f522d core-prim . string-append) (f522c core-prim . string->symbol) (f522b core-prim . string->number) (f522a core-prim . string->list) (f5229 core-prim . string) (f5228 core-prim . sqrt) (f5227 core-prim . sin) (f5226 core-prim . round) (f5225 core-prim . reverse) (f5224 core-prim . real?) (f5223 core-prim . real-valued?) (f5222 core-prim . real-part) (f5221 core-prim . rationalize) (f5220 core-prim . rational?) (f521f core-prim . rational-valued?) (f521e core-prim . procedure?) (f521d core-prim . positive?) (f521c core-prim . pair?) (f521b core-prim . odd?) (f521a core-prim . numerator) (f5219 core-prim . number?) (f5218 core-prim . number->string) (f5217 core-prim . null?) (f5216 core-prim . not) (f5215 core-prim . negative?) (f5214 core-prim . nan?) (f5213 core-prim . min) (f5212 core-prim . max) (f5211 core-prim . map) (f5210 core-prim . make-vector) (f520f core-prim . make-string) (f520e core-prim . make-rectangular) (f520d core-prim . make-polar) (f520c core-prim . magnitude) (f520b core-prim . log) (f520a core-prim . list?) (f5209 core-prim . list-tail) (f5208 core-prim . list-ref) (f5207 core-prim . list->vector) (f5206 core-prim . list->string) (f5205 core-prim . list) (f5204 core-prim . length) (f5203 core-prim . lcm) (f5202 core-prim . integer?) (f5201 core-prim . integer-valued?) (f5200 core-prim . integer->char) (f51ff core-prim . infinite?) (f51fe core-prim . inexact?) (f51fd core-prim . inexact) (f51fc core-prim . imag-part) (f51fb core-prim . gcd) (f51fa core-prim . for-each) (f51f9 core-prim . floor) (f51f8 core-prim . finite?) (f51f7 core-prim . expt) (f51f6 core-prim . exp) (f51f5 core-prim . exact?) (f51f4 core-prim . exact-integer-sqrt) (f51f3 core-prim . exact) (f51f2 core-prim . even?) (f51f1 core-prim . error) (f51f0 core-prim . eqv?) (f51ef core-prim . equal?) (f51ee core-prim . eq?) (f51ed core-prim . dynamic-wind) (f51ec core-prim . div0-and-mod0) (f51eb core-prim . mod0) (f51ea core-prim . div0) (f51e9 core-prim . div-and-mod) (f51e8 core-prim . mod) (f51e7 core-prim . div) (f51e6 core-prim . denominator) (f51e5 core-prim . cos) (f51e4 core-prim . cons) (f51e3 core-prim . complex?) (f51e2 core-prim . char?) (f51e1 core-prim . char>?) (f51e0 core-prim . char>=?) (f51df core-prim . char=?) (f51de core-prim . char<?) (f51dd core-prim . char<=?) (f51dc core-prim . char->integer) (f51db core-prim . ceiling) (f51da core-prim . call-with-values) (f51d9 core-prim . call/cc) (f51d8 core-prim . call-with-current-continuation) (f51d7 core-prim . cddddr) (f51d6 core-prim . cdddar) (f51d5 core-prim . cddadr) (f51d4 core-prim . cddaar) (f51d3 core-prim . cdaddr) (f51d2 core-prim . cdadar) (f51d1 core-prim . cdaadr) (f51d0 core-prim . cdaaar) (f51cf core-prim . cadddr) (f51ce core-prim . caddar) (f51cd core-prim . cadadr) (f51cc core-prim . cadaar) (f51cb core-prim . caaddr) (f51ca core-prim . caadar) (f51c9 core-prim . caaadr) (f51c8 core-prim . caaaar) (f51c7 core-prim . cdddr) (f51c6 core-prim . cddar) (f51c5 core-prim . cdadr) (f51c4 core-prim . cdaar) (f51c3 core-prim . caddr) (f51c2 core-prim . cadar) (f51c1 core-prim . caadr) (f51c0 core-prim . caaar) (f51bf core-prim . cddr) (f51be core-prim . cdar) (f51bd core-prim . cadr) (f51bc core-prim . caar) (f51bb core-prim . cdr) (f51ba core-prim . car) (f51b9 core-prim . boolean?) (f51b8 core-prim . boolean=?) (f51b7 core-prim . atan) (f51b6 core-prim . assertion-violation) (f319c core-prim . assertion-error) (f51b5 core-prim . asin) (f51b4 core-prim . apply) (f51b3 core-prim . append) (f51b2 core-prim . angle) (f51b1 core-prim . acos) (f51b0 core-prim . abs) (f51af core-prim . /) (f51ae core-prim . *) (f51ad core-prim . -) (f51ac core-prim . +) (f51ab core-prim . >=) (f51aa core-prim . >) (f51a9 core-prim . =) (f51a8 core-prim . <=) (f51a7 core-prim . <) (f51a6 core-prim . library) (f51a5 $core-rtd &no-nans-rtd &no-nans-rcd) (f51a4 $core-rtd &no-infinities-rtd &no-infinities-rcd) (f51a3 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (f51a2 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (f51a1 $core-rtd &i/o-port-rtd &i/o-port-rcd) (f51a0 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (f519f $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (f519e $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (f519d $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (f519c $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (f519b $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (f519a $core-rtd &i/o-write-rtd &i/o-write-rcd) (f5199 $core-rtd &i/o-read-rtd &i/o-read-rcd) (f5198 $core-rtd &i/o-rtd &i/o-rcd) (f5197 $core-rtd &undefined-rtd &undefined-rcd) (f5196 $core-rtd &syntax-rtd &syntax-rcd) (f5195 $core-rtd &lexical-rtd &lexical-rcd) (f5194 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (f5193 $core-rtd &non-continuable-rtd &non-continuable-rcd) (f5192 $core-rtd &who-rtd &who-rcd) (f5191 $core-rtd &irritants-rtd &irritants-rcd) (f5190 $core-rtd &assertion-rtd &assertion-rcd) (f518f $core-rtd &violation-rtd &violation-rcd) (f518e $core-rtd &error-rtd &error-rcd) (f518d $core-rtd &serious-rtd &serious-rcd) (f518c $core-rtd &warning-rtd &warning-rcd) (f518b $core-rtd &message-rtd &message-rcd) (f518a $core-rtd &condition-rtd &condition-rcd) (f5189 macro . define-condition-type) (f5188 macro . define-enumeration) (f5187 macro . define-record-type) (f5186 macro . parent-rtd) (f5185 macro . nongenerative) (f5184 macro . opaque) (f5183 macro . sealed) (f5182 macro . protocol) (f5181 macro . parent) (f5180 macro . immutable) (f517f macro . mutable) (f517e macro . fields) (f517d macro . error-handling-mode) (f517c macro . file-options) (f517b macro . buffer-mode) (f517a macro . eol-style) (f5179 macro . guard) (f5178 macro . trace-define) (f5177 macro . trace-lambda) (f5176 macro . unsyntax-splicing) (f5175 macro . unsyntax) (f5174 macro . unquote-splicing) (f5173 macro . unquote) (f5172 macro . _) (f5171 macro . else) (f5170 macro . =>) (f516f macro . ...) (f516e macro . assert) (f516d macro . endianness) (f516c macro . delay) (f516b macro . time) (f516a macro . do) (f5169 macro . cond) (f5168 macro . let*) (f5167 macro . let*-values) (f5166 macro . let-values) (f5165 macro . identifier-syntax) (f5164 macro . with-syntax) (f5163 macro . quasisyntax) (f5162 macro . quasiquote) (f5161 macro . syntax-rules) (f5160 macro . include) (f515f macro . define-struct) (f515e core-macro . record-constructor-descriptor) (f515d core-macro . record-type-descriptor) (f515c macro . case) (f515b macro . parameterize) (f515a macro . unless) (f5159 macro . when) (f5158 core-macro . or) (f5157 core-macro . and) (f5156 core-macro . if) (f5155 core-macro . let) (f5154 core-macro . letrec*) (f5153 core-macro . letrec) (f5152 core-macro . type-descriptor) (f5151 core-macro . case-lambda) (f5150 core-macro . lambda) (f514f core-macro . syntax) (f514e core-macro . syntax-case) (f514d core-macro . quote) (f514c core-macro . foreign-call) (f514b letrec-syntax) (f514a let-syntax) (f5149 set!) (f5148 import) (f5147 begin) (f5146 module) (f5145 define-syntax) (f5144 define)) values values '#f '#f '#f '#f) (f2cd0@f2b1c@install-library 'f548e '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . f546d) (eval-core . f546c) (set-symbol-value! . f546b) (symbol-value . f546a) (gensym . f5469) (void . f5468)) '() values values '#f '#f '#f '#f) (f2cd0@f2b1c@install-library 'f548f '(mosh) '() '() '() '() '((set-symbol-value! . f546b) (symbol-value . f546a) (regexp? . f5466) (read-line . f5465) (ungensym . f5463) (alist->eq-hash-table . f5462) (assoc-ref . f5461) (print . f5460) (format . f545f) (host-os . f545e) (library-path . f2afb) (standard-library-path . f545d) (file-newer? . f545c) (stat-mtime . f545b) (digit->integer . f5457) (call-with-string-input-port . f5456) (call-with-string-io . f5455) (string-split . f5454) (bytevector-for-each . f5453) (string->regexp . f5452) (rxmatch . f5451) (regexp-replace-all . f5450) (hashtable-for-each . f544f) (set-current-directory! . f544a) (expand-path . f5449) (current-directory . f5448) (p . f5407) (get-timeofday . f53ee) (get-command-line . f53ed) (sys-display . f53ec) (whereis . f53eb) (register . f53ea) (vm-join! . f53e9) (vm-set-value! . f53e8) (vm? . f53e7) (main-vm? . f53e6) (vm-eval . f53e5) (vm-self . f53e4) (vm-start! . f53e3) (make-vm . f53e2) (mutex-try-lock! . f53e1) (mutex-unlock! . f53e0) (mutex-lock! . f53df) (mutex? . f53de) (make-mutex . f53dd) (condition-variable-notify-all! . f53dc) (condition-variable-notify! . f53db) (condition-variable-wait! . f53da) (make-condition-variable . f53d9) (mosh-executable-path . f53d8) (make-file-options . f53d7) (source-info . f53d6) (make-compiler-instruction . f53d5) (make-instruction . f53d4) (set-source-info! . f53d3) (bignum? . f53d2) (fast-equal? . f53d1) (fasl-read . f53d0) (fasl-write . f53cf) (time-usage . f53ce) (os-constant . f53cd) (time . f516b) (include . f5160)) '() values values '#f '#f '#f '#f) (f2cd0@f2b1c@install-library 'f5490 '(system) '() '() '() '() '((gensym-prefix-set! . f5464) (write-to-file . f545a) (file->list . f5459) (file->string . f5458) (mosh-cache-dir . f28e6) (call-process . f544e) (local-tz-offset . f544d) (microseconds . f544c) (directory-list . f544b) (expand-path . f5449) (%spawn . f5447) (%waitpid . f5446) (simple-struct-name . f5445) (simple-struct-set! . f5444) (simple-struct-ref . f5443) (make-simple-struct . f5442) (simple-struct? . f5441) (pointer-ref-c-int64 . f5440) (pointer-ref-c-int32 . f543f) (pointer-ref-c-int16 . f543e) (pointer-ref-c-int8 . f543d) (pointer-ref-c-uint64 . f543c) (pointer-ref-c-uint32 . f543b) (pointer-ref-c-uint16 . f543a) (pointer-ref-c-uint8 . f5439) (pointer-set-c-uint64! . f5438) (pointer-set-c-uint32! . f5437) (pointer-set-c-uint16! . f5436) (pointer-set-c-uint8! . f5435) (pointer-set-c-int64! . f5434) (pointer-set-c-int32! . f5433) (pointer-set-c-int16! . f5432) (pointer-set-c-int8! . f5431) (pointer-set-c-pointer! . f5430) (pointer-set-c-double! . f542f) (pointer-set-c-float! . f542e) (pointer-set-c-long-long! . f542d) (pointer-set-c-long! . f542c) (pointer-set-c-int! . f542b) (pointer-set-c-short! . f542a) (pointer-set-c-char! . f5429) (pointer-ref-c-pointer . f5428) (pointer-ref-c-double . f5427) (pointer-ref-c-float . f5426) (pointer-ref-c-unsigned-long-long . f5425) (pointer-ref-c-signed-long-long . f5424) (pointer-ref-c-unsigned-long . f5423) (pointer-ref-c-signed-long . f5422) (pointer-ref-c-unsigned-int . f5421) (pointer-ref-c-signed-int . f5420) (pointer-ref-c-unsigned-short . f541f) (pointer-ref-c-signed-short . f541e) (pointer-ref-c-unsigned-char . f541d) (pointer-ref-c-signed-char . f541c) (pointer->integer . f541b) (integer->pointer . f541a) (pointer? . f5419) (shared-errno . f5418) (%ffi-free-c-callback-trampoline . f5417) (%ffi-make-c-callback-trampoline . f5416) (%ffi-free . f5415) (%ffi-malloc . f5414) (%ffi-supported? . f5413) (%ffi-pointer->string . f5412) (%ffi-call->string-or-zero . f5411) (%ffi-call->double . f5410) (%ffi-call->void* . f540f) (%ffi-call->void . f540e) (%ffi-call->char . f540d) (%ffi-call->int . f540c) (%ffi-lookup . f540b) (%ffi-open . f540a) (%fork . f5409) (%pipe . f5408) (open-output-string . f5406) (get-output-string . f5405) (file-stat-ctime . f5404) (file-stat-atime . f5403) (file-stat-mtime . f5402) (file-size-in-bytes . f5401) (file-writable? . f5400) (file-executable? . f53ff) (file-readable? . f53fe) (file-regular? . f53fd) (file-symbolic-link? . f53fc) (file-directory? . f53fb) (create-symbolic-link . f53fa) (rename-file . f53f9) (delete-directory . f53f8) (create-directory . f53f7) (create-mosh-cache-dir . f53f6) (get-environment-variables . f53f5) (current-exception-handler . f53f4) (get-environment-variable . f53f3) (join-wraps . f53f2) (id->real-label . f53f1) (same-marks? . f53f0) (same-marks*? . f53ef) (disasm . f53cc) (make-parameter . f28e4) (socket-port . f53cb) (socket-shutdown . f53ca) (socket-close . f53c9) (socket-send . f53c8) (socket-recv! . f53c7) (socket-recv . f53c6) (make-server-socket . f53c5) (make-client-socket . f53c4) (socket-accept . f53c3) (socket? . f53c2) (parameterize . f515b)) '() values values '#f '#f '#f '#f)))
(begin (set! f4fc7@ref (unspecified)) (set! f4fc9@x* (unspecified)) (set! f4fcb@add-library-path! (unspecified)) (set! f4fcd@parse-and-add-library-path (unspecified)) (set! f4fcf@for-each-with-index (unspecified)) (set! f4fd1@rpad (unspecified)) (set! f4fd3@condition-printer (unspecified)) (set! f4fd5@record->field-alist (unspecified)) (set! f4fd7@map-with-index (unspecified)) (set! f4fd9@repl (unspecified)) (set! f4fdb@trace-printer (unspecified)) (set! f4fdd@command-line (unspecified)) (set! f4fdf@local-library-path (unspecified)) (set! f4fe1@load/args (unspecified)) (set! f4fe3@load (unspecified)) (set! f4fe5@ironscheme-build (unspecified)) (set! f4fe7@eval-top-level (unspecified)) (set! f4fe9@compile-system-libraries (unspecified)) (set! f4feb@compile (unspecified)) (set! f4fed@compile->closure (unspecified)) (set! f4fef@pre-compile-r6rs-file (unspecified)) (set! f4ff1@load-r6rs-top-level (unspecified)) (set! f4ff3@load-r6rs-top-level-sexp (unspecified)) (set! f4ff5@prefix-inc (unspecified)) (set! f4ff7@prefix-inc! (unspecified)) (set! f4fc7@ref (lambda (f5032@rtd f5033@i f5034@x) (let ((f5038@val ((record-accessor f5032@rtd f5033@i) f5034@x))) (if (symbol? f5038@val) (ungensym f5038@val) f5038@val)))) (set! f512a@f4fc7@ref f4fc7@ref) (set! f4fc9@x* '()) (set! f512b@f4fc9@x* f4fc9@x*) (set! f4fcb@add-library-path! (lambda (f503a@path) (f2cc0@f2afc@library-path (append (f2cc0@f2afc@library-path) (list f503a@path))))) (set! f512c@f4fcb@add-library-path! f4fcb@add-library-path!) (set! f4fcd@parse-and-add-library-path (lambda (f503c@paths f503d@message) (let ((f5041@separator '#f)) (begin (set! f5041@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((f5042@t f503c@paths)) (if f5042@t ((lambda (f5044@paths) (for-each (lambda (f5046@path) (if (file-exists? f5046@path) (f4fcb@add-library-path! (expand-path f5046@path)) (format (current-error-port) f503d@message f5046@path))) (string-split f5044@paths f5041@separator))) f5042@t) (void))))))) (set! f512d@f4fcd@parse-and-add-library-path f4fcd@parse-and-add-library-path) (set! f4fcf@for-each-with-index (lambda (f5048@proc f5049@lst) (letrec ((f504c@loop (lambda (f504e@i f504f@lst) (if (null? f504f@lst) (if '#f '#f (void)) (begin (f5048@proc f504e@i (car f504f@lst)) (f504c@loop (+ f504e@i '1) (cdr f504f@lst))))))) (f504c@loop '1 f5049@lst)))) (set! f512e@f4fcf@for-each-with-index f4fcf@for-each-with-index) (set! f4fd1@rpad (lambda (f5052@str f5053@pad f5054@n) (let ((f5058@rest (- f5054@n (string-length (format '"~a" f5052@str))))) (let f505e@loop ((f505a@rest f5058@rest) (f505b@ret (format '"~a" f5052@str))) (if (<= f505a@rest '0) f505b@ret (f505e@loop (- f505a@rest '1) (string-append f505b@ret f5053@pad))))))) (set! f512f@f4fd1@rpad f4fd1@rpad) (set! f4fd3@condition-printer (lambda (f5060@e f5061@port) (let ((f5065@max-condition-len '#f)) (begin (set! f5065@max-condition-len (apply max (map (lambda (f5076@c) (string-length (symbol->string (record-type-name (record-rtd f5076@c))))) (simple-conditions f5060@e)))) (begin (display '" Condition components:\n" f5061@port) (f4fcf@for-each-with-index (lambda (f5066@i f5067@x) (let ((f506a@rtd (record-rtd f5067@x)) (f506b@fields-alist (f4fd5@record->field-alist f5067@x))) (begin (format f5061@port '" ~d. ~a" f5066@i (f4fd1@rpad (symbol->string (record-type-name f506a@rtd)) '" " f5065@max-condition-len)) (if (null? f506b@fields-alist) (newline f5061@port) (void)) (let f5072@loop ((f506e@first '#t) (f506f@fields-alist f506b@fields-alist)) (if (null? f506f@fields-alist) '() (let ((f5074@field (car f506f@fields-alist))) (begin (if (not f506e@first) (display (f4fd1@rpad '"" '" " (+ '4 f5065@max-condition-len)) f5061@port) (void)) (display '"       " f5061@port) (display (car f5074@field) f5061@port) (display '": " f5061@port) (write (cdr f5074@field) f5061@port) (newline f5061@port) (f5072@loop '#f (cdr f506f@fields-alist))))))))) (simple-conditions f5060@e))))))) (set! f5130@f4fd3@condition-printer f4fd3@condition-printer) (set! f4fd5@record->field-alist (lambda (f5078@r) (let ((f507b@ref '#f)) (begin (set! f507b@ref (lambda (f5086@rtd f5087@i f5088@x) (let ((f508c@val ((record-accessor f5086@rtd f5087@i) f5088@x))) (if (symbol? f508c@val) (ungensym f508c@val) f508c@val)))) (let f5080@loop ((f507c@ret '()) (f507d@rtd (record-rtd f5078@r))) (if f507d@rtd (f5080@loop (append f507c@ret (f4fd7@map-with-index (lambda (f5082@i f5083@field) (cons f5083@field (f507b@ref f507d@rtd f5082@i f5078@r))) (vector->list (record-type-field-names f507d@rtd)))) (record-type-parent f507d@rtd)) f507c@ret)))))) (set! f5131@f4fd5@record->field-alist f4fd5@record->field-alist) (set! f4fd7@map-with-index (lambda (f508e@proc f508f@lst) (let f5098@loop ((f5092@i '0) (f5093@lst f508f@lst) (f5094@ret '())) (if (null? f5093@lst) (reverse f5094@ret) (f5098@loop (+ f5092@i '1) (cdr f5093@lst) (cons (f508e@proc f5092@i (car f5093@lst)) f5094@ret)))))) (set! f5132@f4fd7@map-with-index f4fd7@map-with-index) (set! f4fd9@repl (lambda f509a@x (let ((f509d@rec '#f)) (begin (set! f509d@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (f50a0@f509e) (lambda () (with-exception-handler (lambda (f50a2@e) ((call/cc (lambda (f50a4@f509f) (f50a0@f509e (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? f50a2@e) (f4fd3@condition-printer f50a2@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" f50a2@e))) (f50a4@f509f (lambda () (raise-continuable f50a2@e)))))))))) (lambda () (let f50aa@loop ((f50a6@line (get-line (current-input-port))) (f50a7@accum '"")) (let ((f50ad@parentheses-ok? '#f) (f50af@eval-string-print '#f)) (begin (set! f50ad@parentheses-ok? (lambda (f50b4@text) (let f50bc@loop ((f50b6@chars (string->list f50b4@text)) (f50b7@p0 '0) (f50b8@p1 '0)) (if (null? f50b6@chars) (= '0 f50b7@p0 f50b8@p1) (let ((f50be@t (car f50b6@chars))) (if (memv f50be@t '(#\()) (f50bc@loop (cdr f50b6@chars) (+ f50b7@p0 '1) f50b8@p1) (if (memv f50be@t '(#\))) (f50bc@loop (cdr f50b6@chars) (- f50b7@p0 '1) f50b8@p1) (if (memv f50be@t '(#\[)) (f50bc@loop (cdr f50b6@chars) f50b7@p0 (+ f50b8@p1 '1)) (if (memv f50be@t '(#\])) (f50bc@loop (cdr f50b6@chars) f50b7@p0 (- f50b8@p1 '1)) (f50bc@loop (cdr f50b6@chars) f50b7@p0 f50b8@p1)))))))))) (set! f50af@eval-string-print (lambda (f50b2@text) (if (not (or (string=? '"\n" f50b2@text) (= '0 (string-length f50b2@text)))) (write (f4fe7@eval-top-level (call-with-port (open-string-input-port f50b2@text) read))) (void)))) (if (eof-object? f50a6@line) (begin (f50af@eval-string-print f50a7@accum) (exit)) (let ((f50b0@current (string-append f50a7@accum f50a6@line))) (if (f50ad@parentheses-ok? f50b0@current) (f50af@eval-string-print f50b0@current) (f50aa@loop (get-line (current-input-port)) f50b0@current))))))))))))) (newline) (f509d@rec)))) (f509d@rec))))) (set! f5133@f4fd9@repl f4fd9@repl) (set! f4fdb@trace-printer (f2a06@f28e5@make-parameter write)) (set! f5134@f4fdb@trace-printer f4fdb@trace-printer) (set! f4fdd@command-line (f2a06@f28e5@make-parameter (get-command-line))) (set! f5135@f4fdd@command-line f4fdd@command-line) (set! f4fdf@local-library-path (lambda (f50c0@filename) (f2cc0@f2afc@library-path))) (set! f5136@f4fdf@local-library-path f4fdf@local-library-path) (set! f4fe1@load/args (lambda (f50c2@filename . f50c4@args) (begin (apply f4ff1@load-r6rs-top-level f50c2@filename 'load f50c4@args) (void)))) (set! f5137@f4fe1@load/args f4fe1@load/args) (set! f4fe3@load (lambda (f50c6@filename) (begin (apply f4ff1@load-r6rs-top-level f50c6@filename 'load (f4fdd@command-line)) (void)))) (set! f5138@f4fe3@load f4fe3@load) (set! f4fe5@ironscheme-build (lambda () (f4fe3@load '"ironscheme-buildscript.ss"))) (set! f5139@f4fe5@ironscheme-build f4fe5@ironscheme-build) (set! f4fe7@eval-top-level (lambda (f50c8@x) (f4bed@f3183@eval f50c8@x (f4c04@f31b1@interaction-environment)))) (set! f513a@f4fe7@eval-top-level f4fe7@eval-top-level) (set! f4fe9@compile-system-libraries (lambda () (f4fe7@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! f513b@f4fe9@compile-system-libraries f4fe9@compile-system-libraries) (set! f4feb@compile (lambda (f50ca@filename) (f4ff1@load-r6rs-top-level f50ca@filename 'compile))) (set! f513c@f4feb@compile f4feb@compile) (set! f4fed@compile->closure (lambda (f50cc@filename) (f4ff1@load-r6rs-top-level f50cc@filename 'closure))) (set! f513d@f4fed@compile->closure f4fed@compile->closure) (set! f4fef@pre-compile-r6rs-file (lambda (f50ce@filename) (f4ff1@load-r6rs-top-level f50ce@filename 'compile))) (set! f513e@f4fef@pre-compile-r6rs-file f4fef@pre-compile-r6rs-file) (set! f4ff1@load-r6rs-top-level (lambda (f50d0@filename f50d1@how . f50d4@args) (begin (f2cc0@f2afc@library-path (f4fdf@local-library-path f50d0@filename)) (let ((f50d6@x* (with-input-from-file f50d0@filename (lambda () (let f50d8@f () (let ((f50da@x (f29f9@f28cb@read-annotated))) (if (eof-object? f50da@x) '() (cons f50da@x (f50d8@f))))))))) (let ((f50dc@t f50d1@how)) (if (memv f50dc@t '(closure)) (f4c03@f31af@pre-compile-r6rs-top-level f50d6@x*) (if (memv f50dc@t '(load)) (begin (f4fdd@command-line (cons f50d0@filename (car f50d4@args))) (f2a07@f28e7@mosh-cache-dir (create-mosh-cache-dir)) (if (f2a07@f28e7@mosh-cache-dir) (gensym-prefix-set! (f4ff7@prefix-inc! (string-append (f2a07@f28e7@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (f50de@file) ((call/cc (lambda (f50e2@f50e0) (lambda () (with-exception-handler (lambda (f50e4@c) ((call/cc (lambda (f50e6@f50e1) (f50e2@f50e0 (lambda () (if '#t '#t (f50e6@f50e1 (lambda () (raise-continuable f50e4@c)))))))))) (lambda () (delete-file (string-append (f2a07@f28e7@mosh-cache-dir) '"/" f50de@file))))))))) (directory-list (f2a07@f28e7@mosh-cache-dir))) (void)) (let ((f50e8@compiled (f4c02@f31ad@compile-r6rs-top-level f50d6@x*))) (begin (if (and (f2a07@f28e7@mosh-cache-dir) (not (symbol-value '%disable-acc))) (f2cc4@f2b04@serialize-all f2a01@f28db@serialize-library f2a5d@f2a16@compile-core-expr) (void)) (f50e8@compiled)))) (if (memv f50dc@t '(compile)) (begin (f4c02@f31ad@compile-r6rs-top-level f50d6@x*) (f2cc4@f2b04@serialize-all f2a01@f28db@serialize-library f2a5d@f2a16@compile-core-expr)) (if '#f '#f (void)))))))))) (set! f513f@f4ff1@load-r6rs-top-level f4ff1@load-r6rs-top-level) (set! f4ff3@load-r6rs-top-level-sexp (lambda (f50ea@import-spec f50eb@thunk) (let ((f50f6@f50ef f2cc0@f2afc@library-path) (f50f7@f50f1 f2a07@f28e7@mosh-cache-dir) (f50f8@f50f3 (f4fdf@local-library-path '"")) (f50f9@f50f5 (create-mosh-cache-dir))) (let ((f50fe@swap (lambda () (begin (let ((f5100@t (f50f6@f50ef))) (begin (f50f6@f50ef f50f8@f50f3) (set! f50f8@f50f3 f5100@t))) (let ((f5102@t (f50f7@f50f1))) (begin (f50f7@f50f1 f50f9@f50f5) (set! f50f9@f50f5 f5102@t))))))) (dynamic-wind f50fe@swap (lambda () (begin (if (f2a07@f28e7@mosh-cache-dir) (gensym-prefix-set! (f4ff7@prefix-inc! (string-append (f2a07@f28e7@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((f5108@f5105 f4fdd@command-line) (f5109@f5107 '())) (let ((f510c@swap (lambda () (let ((f510e@t (f5108@f5105))) (begin (f5108@f5105 f5109@f5107) (set! f5109@f5107 f510e@t)))))) (dynamic-wind f510c@swap (lambda () ((f4c02@f31ad@compile-r6rs-top-level (list (cons 'import f50ea@import-spec) (list f50eb@thunk))))) f510c@swap))))) f50fe@swap))))) (set! f5140@f4ff3@load-r6rs-top-level-sexp f4ff3@load-r6rs-top-level-sexp) (set! f4ff5@prefix-inc (lambda (f5110@prefix-string) (let ((f5112@prefix (symbol->string f5110@prefix-string))) (let ((f5114@len (string-length f5112@prefix))) (let f511c@loop ((f5116@i (- f5114@len '1)) (f5117@carry? '#t) (f5118@accum '())) (if (< f5116@i '0) (string->symbol (list->string (if f5117@carry? (cons '#\a f5118@accum) f5118@accum))) (if f5117@carry? (let ((f511e@next-integer (+ '1 (char->integer (string-ref f5112@prefix f5116@i))))) (if (= f511e@next-integer '123) (f511c@loop (- f5116@i '1) '#f (cons '#\A f5118@accum)) (if (= f511e@next-integer '91) (f511c@loop (- f5116@i '1) '#t (cons '#\a f5118@accum)) (f511c@loop (- f5116@i '1) '#f (cons (integer->char f511e@next-integer) f5118@accum))))) (f511c@loop (- f5116@i '1) '#f (cons (string-ref f5112@prefix f5116@i) f5118@accum))))))))) (set! f5141@f4ff5@prefix-inc f4ff5@prefix-inc) (set! f4ff7@prefix-inc! (lambda (f5120@file) (begin (if (not (file-exists? f5120@file)) (call-with-output-file f5120@file (lambda (f5122@port) (write 'd f5122@port))) (void)) (let ((f5124@prefix (call-with-input-file f5120@file read))) (let ((f5126@next-prefix (f4ff5@prefix-inc f5124@prefix))) (begin (call-with-port (open-file-output-port f5120@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (f5128@port) (write f5126@next-prefix f5128@port))) f5124@prefix)))))) (set! f5142@f4ff7@prefix-inc! f4ff7@prefix-inc!) (begin (f2cc5@f2b06@current-precompiled-library-loader f2a02@f28dd@load-serialized-library) (set-symbol-value! 'load f4fe3@load) (set-symbol-value! 'pre-compile-r6rs-file f4fef@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs f4fe7@eval-top-level) (set-symbol-value! 'int-env-syms f4be4@f3171@interaction-environment-symbols) (set-symbol-value! 'expanded2core f2a5c@f2a14@expanded->core) (set-symbol-value! 'trace-printer f4fdb@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (f4ff8@c) (condition (f4f24@f4d2e@make-non-continuable-violation) (f4f1a@f4d15@make-who-condition 'raise) (f4ede@f4c76@make-message-condition '"returned from non-continuable exception") (f4f10@f4cfa@make-irritants-condition (list f4ff8@c))))) (f4fcd@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (f4fcd@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (f4fcb@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (f4fcb@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (f4fcb@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((f4ffa@prefix (lambda (f4ffc@ext f4ffd@ls) (append (map (lambda (f5000@x) (string-append f4ffc@ext f5000@x)) f4ffd@ls) f4ffd@ls)))) (f2cc1@f2afe@library-extensions (f4ffa@prefix '".mosh" (f2cc1@f2afe@library-extensions)))) (current-exception-handler (lambda (f5002@c) (if (condition? f5002@c) (f4fd3@condition-printer f5002@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" f5002@c)))) (if ((call/cc (lambda (f5006@f5004) (lambda () (with-exception-handler (lambda (f5008@c) ((call/cc (lambda (f500a@f5005) (f5006@f5004 (lambda () (if '#t '#f (f500a@f5005 (lambda () (raise-continuable f5008@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (f4ff3@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (f4fdd@command-line)) (let ((f5014@f500d f4fdd@command-line) (f5015@f500f f2a07@f28e7@mosh-cache-dir) (f5016@f5011 '()) (f5017@f5013 (create-mosh-cache-dir))) (let ((f501c@swap (lambda () (begin (let ((f501e@t (f5014@f500d))) (begin (f5014@f500d f5016@f5011) (set! f5016@f5011 f501e@t))) (let ((f5020@t (f5015@f500f))) (begin (f5015@f500f f5017@f5013) (set! f5017@f5013 f5020@t))))))) (dynamic-wind f501c@swap (lambda () (begin (if (f2a07@f28e7@mosh-cache-dir) (gensym-prefix-set! (f4ff7@prefix-inc! (string-append (f2a07@f28e7@mosh-cache-dir) '"/prefix.txt"))) (void)) (f4fd9@repl))) f501c@swap))) (begin (f2cc0@f2afc@library-path (f4fdf@local-library-path (car (f4fdd@command-line)))) (set! f4fc9@x* (with-input-from-file (car (f4fdd@command-line)) (lambda () (let f5022@f () (let ((f5024@x (f29f9@f28cb@read-annotated))) (if (eof-object? f5024@x) '() (cons f5024@x (f5022@f)))))))) (f4fdd@command-line (cons (car (f4fdd@command-line)) (cdr (f4fdd@command-line)))) (f2a07@f28e7@mosh-cache-dir (create-mosh-cache-dir)) (if (f2a07@f28e7@mosh-cache-dir) (gensym-prefix-set! (f4ff7@prefix-inc! (string-append (f2a07@f28e7@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (f5026@file) ((call/cc (lambda (f502a@f5028) (lambda () (with-exception-handler (lambda (f502c@c) ((call/cc (lambda (f502e@f5029) (f502a@f5028 (lambda () (if '#t '#t (f502e@f5029 (lambda () (raise-continuable f502c@c)))))))))) (lambda () (delete-file (string-append (f2a07@f28e7@mosh-cache-dir) '"/" f5026@file))))))))) (directory-list (f2a07@f28e7@mosh-cache-dir))) (void)) (let ((f5030@compiled (f4c02@f31ad@compile-r6rs-top-level f4fc9@x*))) (begin (if (and (f2a07@f28e7@mosh-cache-dir) (not (symbol-value '%disable-acc))) (f2cc4@f2b04@serialize-all f2a01@f28db@serialize-library f2a5d@f2a16@compile-core-expr) (void)) (f5030@compiled))))))))
