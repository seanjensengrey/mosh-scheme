;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! kM287d@library-file-path->cache-path (unspecified)) (set! kM287f@read-annotated (unspecified)) (set! kM2881@annotation-stripped (unspecified)) (set! kM2883@annotation? (unspecified)) (set! kM2885@annotation-source (unspecified)) (set! kM2887@annotation-expression (unspecified)) (set! kM2889@scm->fasl (unspecified)) (set! kM288b@fasl-save (unspecified)) (set! kM288d@fasl-load (unspecified)) (set! kM288f@serialize-library (unspecified)) (set! kM2891@load-serialized-library (unspecified)) (set! kM2893@make-record-printer (unspecified)) (set! kM2895@compile-core (unspecified)) (set! kM2897@read-library-source-file (unspecified)) (set! kM2899@make-parameter (unspecified)) (set! kM289b@mosh-cache-dir (unspecified)) (set! kM2931@file-options-spec (unspecified)) (set! kM287d@library-file-path->cache-path (lambda (kM2932@x) (call-with-values (lambda () (open-string-output-port)) (lambda (kM2938@kM2935 kM2939@kM2937) (let ((kM293c@extract kM2939@kM2937) (kM293d@p kM2938@kM2935)) (let ((kM2941@display-hex '#f)) (begin (set! kM2941@display-hex (lambda (kM294a@n) (if (<= '0 kM294a@n '9) (display kM294a@n kM293d@p) (display (integer->char (+ (char->integer '#\a) (- kM294a@n '10))) kM293d@p)))) (begin (let kM2944@f ((kM2942@ls (string-split kM2932@x '#\/))) (if (not (null? kM2942@ls)) (begin (display '"_" kM293d@p) (for-each (lambda (kM2946@c) (if (or (char<=? '#\a kM2946@c '#\z) (char<=? '#\A kM2946@c '#\Z) (char<=? '#\0 kM2946@c '#\9) (memv kM2946@c '(#\- #\. #\_ #\~))) (display kM2946@c kM293d@p) (begin (display '"%" kM293d@p) (let ((kM2948@n (char->integer kM2946@c))) (begin (kM2941@display-hex (quotient kM2948@n '16)) (kM2941@display-hex (remainder kM2948@n '16))))))) (string->list (car kM2942@ls))) (kM2944@f (cdr kM2942@ls))) (void))) (kM293c@extract))))))))) (set! kM29ac@kM287d@library-file-path->cache-path kM287d@library-file-path->cache-path) (set! kM287f@read-annotated read) (set! kM29ad@kM287f@read-annotated kM287f@read-annotated) (set! kM2881@annotation-stripped (lambda (kM294c@x) (kM2887@annotation-expression kM294c@x))) (set! kM29ae@kM2881@annotation-stripped kM2881@annotation-stripped) (set! kM2883@annotation? (lambda (kM294e@x) (source-info kM294e@x))) (set! kM29af@kM2883@annotation? kM2883@annotation?) (set! kM2885@annotation-source (lambda (kM2950@x) (source-info kM2950@x))) (set! kM29b0@kM2885@annotation-source kM2885@annotation-source) (set! kM2887@annotation-expression (lambda (kM2952@x) (if (pair? kM2952@x) (cons (car kM2952@x) (cdr kM2952@x)) '()))) (set! kM29b1@kM2887@annotation-expression kM2887@annotation-expression) (set! kM2889@scm->fasl (lambda (kM2954@filename) (string-append (kM289b@mosh-cache-dir) '"/" (kM287d@library-file-path->cache-path kM2954@filename) '".mosh-fasl"))) (set! kM29b2@kM2889@scm->fasl kM2889@scm->fasl) (set! kM288b@fasl-save (lambda (kM2956@filename kM2957@obj) (call-with-port (open-file-output-port kM2956@filename) (lambda (kM295a@port) ((symbol-value 'fasl-write!) kM2957@obj kM295a@port))))) (set! kM29b3@kM288b@fasl-save kM288b@fasl-save) (set! kM288d@fasl-load (lambda (kM295c@filename) (call-with-port (open-file-input-port kM295c@filename) (symbol-value 'fasl-read!)))) (set! kM29b4@kM288d@fasl-load kM288d@fasl-load) (set! kM288f@serialize-library (lambda (kM295e@filename kM295f@obj) (begin (let ((kM2962@expanded2core (symbol-value 'expanded2core))) (let ((kM2964@compile (symbol-value 'compile-w/o-halt))) (let ((kM2966@code kM295f@obj)) (let ((kM2968@pivot (cddddr (cddddr kM2966@code)))) (let ((kM296a@visit (kM2964@compile (kM2962@expanded2core (car kM2968@pivot))))) (begin (set-car! kM2968@pivot kM296a@visit) (let ((kM296c@pivot (cdr kM2968@pivot))) (let ((kM296e@invoke (kM2964@compile (kM2962@expanded2core (car kM296c@pivot))))) (set-car! kM296c@pivot kM296e@invoke))))))))) (let ((kM2970@fasl-file (kM2889@scm->fasl kM295e@filename))) (begin (if (file-exists? kM2970@fasl-file) (delete-file kM2970@fasl-file) (void)) ((call/cc (lambda (kM2974@kM2972) (lambda () (with-exception-handler (lambda (kM2976@c) ((call/cc (lambda (kM2978@kM2973) (kM2974@kM2972 (lambda () (if '#t (begin (format (current-error-port) '"Warning:serialize-library failed " kM295e@filename) (if (file-exists? kM2970@fasl-file) (delete-file kM2970@fasl-file) (void)) '#f) (kM2978@kM2973 (lambda () (raise-continuable kM2976@c)))))))))) (lambda () (kM288b@fasl-save kM2970@fasl-file kM295f@obj)))))))))))) (set! kM29b5@kM288f@serialize-library kM288f@serialize-library) (set! kM2891@load-serialized-library (lambda (kM297a@filename kM297b@obj) (and (kM289b@mosh-cache-dir) (let ((kM297e@fasl-file (kM2889@scm->fasl kM297a@filename))) (if (and (file-exists? kM297e@fasl-file) ((symbol-value 'file-newer?) kM297e@fasl-file kM297a@filename)) (let ((kM2980@expanded2core (symbol-value 'expanded2core))) (let ((kM2982@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((kM2984@code (kM288d@fasl-load kM297e@fasl-file))) (let ((kM2986@pivot (cddddr (cddddr kM2984@code)))) (let ((kM2988@visit (car kM2986@pivot))) (let ((kM298a@visit-proc (lambda () (kM2982@eval-compiled-core kM2988@visit)))) (begin (set-car! kM2986@pivot kM298a@visit-proc) (let ((kM298c@pivot (cdr kM2986@pivot))) (let ((kM298e@invoke (car kM298c@pivot))) (begin (set-car! kM298c@pivot (lambda () (kM2982@eval-compiled-core kM298e@invoke))) (apply kM297b@obj kM2984@code))))))))))) '#f))))) (set! kM29b6@kM2891@load-serialized-library kM2891@load-serialized-library) (set! kM2893@make-record-printer (lambda (kM2990@name kM2991@printer) (lambda kM2994@x (begin (display '"record printer") (for-each display kM2994@x))))) (set! kM29b7@kM2893@make-record-printer kM2893@make-record-printer) (set! kM2895@compile-core (lambda kM2996@x (apply error 'comile-core '"not implementated" kM2996@x))) (set! kM29b8@kM2895@compile-core kM2895@compile-core) (set! kM2897@read-library-source-file (lambda (kM2998@file-name) (with-input-from-file kM2998@file-name kM287f@read-annotated))) (set! kM29b9@kM2897@read-library-source-file kM2897@read-library-source-file) (set! kM2899@make-parameter (lambda kM29a8 (let ((kM29a9 (length kM29a8))) (if (= kM29a9 '1) (apply (lambda (kM299a@x) (kM2899@make-parameter kM299a@x (lambda (kM299c@x) kM299c@x))) kM29a8) (if (= kM29a9 '2) (apply (lambda (kM299e@x kM299f@fender) (let ((kM29a2@x (kM299f@fender kM299e@x))) (lambda kM29a6 (let ((kM29a7 (length kM29a6))) (if (= kM29a7 '0) (apply (lambda () kM29a2@x) kM29a6) (if (= kM29a7 '1) (apply (lambda (kM29a4@v) (set! kM29a2@x (kM299f@fender kM29a4@v))) kM29a6) (error 'apply '"invalid arg count"))))))) kM29a8) (error 'apply '"invalid arg count")))))) (set! kM29ba@kM2899@make-parameter kM2899@make-parameter) (set! kM289b@mosh-cache-dir (kM2899@make-parameter '#f)) (set! kM29bb@kM289b@mosh-cache-dir kM289b@mosh-cache-dir) (set! kM2931@file-options-spec (lambda (kM29aa@x) kM29aa@x)) (set! kM29bc@kM2931@file-options-spec kM2931@file-options-spec) (void))
(begin (set! kM29c2@current-primitive-locations (unspecified)) (set! kM29c4@mutable? (unspecified)) (set! kM29c6@rewriter (unspecified)) (set! kM29c8@expanded->core (unspecified)) (set! kM29ca@compile-core-expr (unspecified)) (set! kM29cc@pretty-print (unspecified)) (set! kM29ce@compile-core-expr-to-port (unspecified)) (set! kM29c2@current-primitive-locations (kM29ba@kM2899@make-parameter (lambda (kM29cf@x) '#f) (lambda (kM29d1@p) kM29d1@p))) (set! kM2a0d@kM29c2@current-primitive-locations kM29c2@current-primitive-locations) (set! kM29c4@mutable? (lambda (kM29d3@x) (or (pair? kM29d3@x) (vector? kM29d3@x) (hashtable? kM29d3@x)))) (set! kM2a0e@kM29c4@mutable? kM29c4@mutable?) (set! kM29c6@rewriter (lambda (kM29d5@quote-hack?) (let ((kM29d8@f '#f)) (begin (set! kM29d8@f (lambda (kM29d9@x) (if (pair? kM29d9@x) (let ((kM29db@t (car kM29d9@x))) (if (memv kM29db@t '(quote)) (if (and kM29d5@quote-hack? (kM29c4@mutable? (cadr kM29d9@x))) (let ((kM29dd@g (gensym))) (begin (set-symbol-value! kM29dd@g (cadr kM29d9@x)) kM29dd@g)) kM29d9@x) (if (memv kM29db@t '(case-lambda)) (cons 'case-lambda (map (lambda (kM29df@x) (cons (car kM29df@x) (map kM29d8@f (cdr kM29df@x)))) (cdr kM29d9@x))) (if (memv kM29db@t '(lambda)) (cons* 'lambda (cadr kM29d9@x) (map kM29d8@f (cddr kM29d9@x))) (if (memv kM29db@t '(letrec)) (let ((kM29e1@bindings (cadr kM29d9@x)) (kM29e2@body* (cddr kM29d9@x))) (let ((kM29e5@lhs* (map car kM29e1@bindings)) (kM29e6@rhs* (map cadr kM29e1@bindings))) (cons* 'letrec (map list kM29e5@lhs* (map kM29d8@f kM29e6@rhs*)) (map kM29d8@f kM29e2@body*)))) (if (memv kM29db@t '(letrec*)) (let ((kM29e9@bindings (cadr kM29d9@x)) (kM29ea@body* (cddr kM29d9@x))) (let ((kM29ed@lhs* (map car kM29e9@bindings)) (kM29ee@rhs* (map cadr kM29e9@bindings))) (cons* 'letrec* (map list kM29ed@lhs* (map kM29d8@f kM29ee@rhs*)) (map kM29d8@f kM29ea@body*)))) (if (memv kM29db@t '(library-letrec*)) (let ((kM29f1@name (cadr kM29d9@x)) (kM29f2@x (cdr kM29d9@x))) (let ((kM29f5@bindings (cadr kM29f2@x)) (kM29f6@body* (cddr kM29f2@x))) (let ((kM29f9@lhs* (map car kM29f5@bindings)) (kM29fa@lhs** (map cadr kM29f5@bindings)) (kM29fb@rhs* (map caddr kM29f5@bindings))) (cons* 'library-letrec* kM29f1@name (map list kM29f9@lhs* kM29fa@lhs** (map kM29d8@f kM29fb@rhs*)) (map kM29d8@f kM29f6@body*))))) (if (memv kM29db@t '(begin)) (cons 'begin (map kM29d8@f (cdr kM29d9@x))) (if (memv kM29db@t '(set!)) (list 'set! (cadr kM29d9@x) (kM29d8@f (caddr kM29d9@x))) (if (memv kM29db@t '(primitive)) (let ((kM29ff@op (cadr kM29d9@x))) (let ((kM2a01@t ((kM29c2@current-primitive-locations) kM29ff@op))) (if kM2a01@t ((lambda (kM2a03@loc) kM2a03@loc) kM2a01@t) kM29ff@op))) (if (memv kM29db@t '(define)) kM29d9@x (if (list? kM29d9@x) (map kM29d8@f kM29d9@x) (error 'rewrite '"invalid form ~s ~s" kM29d9@x (list? kM29d9@x)))))))))))))) kM29d9@x))) kM29d8@f)))) (set! kM2a0f@kM29c6@rewriter kM29c6@rewriter) (set! kM29c8@expanded->core (lambda (kM2a05@x) ((kM29c6@rewriter '#f) kM2a05@x))) (set! kM2a10@kM29c8@expanded->core kM29c8@expanded->core) (set! kM29ca@compile-core-expr (lambda (kM2a07@x) ((kM29c6@rewriter '#f) kM2a07@x))) (set! kM2a11@kM29ca@compile-core-expr kM29ca@compile-core-expr) (set! kM29cc@pretty-print write) (set! kM2a12@kM29cc@pretty-print kM29cc@pretty-print) (set! kM29ce@compile-core-expr-to-port (lambda (kM2a09@x kM2a0a@p) (kM29cc@pretty-print ((kM29c6@rewriter '#f) kM2a09@x) kM2a0a@p))) (set! kM2a13@kM29ce@compile-core-expr-to-port kM29ce@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! kM2a62@make-collection (unspecified)) (set! kM2a64@current-library-collection (unspecified)) (set! kM2a66@rp (unspecified)) (set! kM2a70@library? (unspecified)) (set! kM2a72@library-id (unspecified)) (set! kM2a74@set-library-id! (unspecified)) (set! kM2a76@library-name (unspecified)) (set! kM2a78@set-library-name! (unspecified)) (set! kM2a7a@library-version (unspecified)) (set! kM2a7c@set-library-version! (unspecified)) (set! kM2a7e@library-imp* (unspecified)) (set! kM2a80@set-library-imp*! (unspecified)) (set! kM2a82@library-vis* (unspecified)) (set! kM2a84@set-library-vis*! (unspecified)) (set! kM2a86@library-inv* (unspecified)) (set! kM2a88@set-library-inv*! (unspecified)) (set! kM2a8a@library-subst (unspecified)) (set! kM2a8c@set-library-subst! (unspecified)) (set! kM2a8e@library-env (unspecified)) (set! kM2a90@set-library-env! (unspecified)) (set! kM2a92@library-visit-state (unspecified)) (set! kM2a94@set-library-visit-state! (unspecified)) (set! kM2a96@library-invoke-state (unspecified)) (set! kM2a98@set-library-invoke-state! (unspecified)) (set! kM2a9a@library-visit-code (unspecified)) (set! kM2a9c@set-library-visit-code! (unspecified)) (set! kM2a9e@library-invoke-code (unspecified)) (set! kM2aa0@set-library-invoke-code! (unspecified)) (set! kM2aa2@library-visible? (unspecified)) (set! kM2aa4@set-library-visible?! (unspecified)) (set! kM2aa6@library-source-file-name (unspecified)) (set! kM2aa8@set-library-source-file-name! (unspecified)) (set! kM2aaa@dummy (unspecified)) (set! kM2aac@find-dependencies (unspecified)) (set! kM2aae@find-library-by (unspecified)) (set! kM2ab0@library-path (unspecified)) (set! kM2ab2@library-extensions (unspecified)) (set! kM2ab4@library-name->file-name (unspecified)) (set! kM2ab6@file-locator (unspecified)) (set! kM2ab8@serialize-all (unspecified)) (set! kM2aba@current-precompiled-library-loader (unspecified)) (set! kM2abc@try-load-from-file (unspecified)) (set! kM2abe@library-loader (unspecified)) (set! kM2ac0@current-library-expander (unspecified)) (set! kM2ac2@external-pending-libraries (unspecified)) (set! kM2ac4@find-external-library (unspecified)) (set! kM2ac6@find-library-by-name (unspecified)) (set! kM2ac8@library-exists? (unspecified)) (set! kM2aca@find-library-by-spec/die (unspecified)) (set! kM2acc@label->binding-table (unspecified)) (set! kM2ace@install-library-record (unspecified)) (set! kM2ad0@install-library (unspecified)) (set! kM2ad2@imported-label->binding (unspecified)) (set! kM2ad4@invoke-library (unspecified)) (set! kM2ad6@visit-library (unspecified)) (set! kM2ad8@invoke-library-by-spec (unspecified)) (set! kM2ada@installed-libraries (unspecified)) (set! kM2adc@library-spec (unspecified)) (set! kM2a62@make-collection (lambda () (let ((kM2add@set '())) (let ((kM2ae0@set-cons '#f)) (begin (set! kM2ae0@set-cons (lambda (kM2ae5@x kM2ae6@ls) (if (memq kM2ae5@x kM2ae6@ls) kM2ae6@ls (cons kM2ae5@x kM2ae6@ls)))) (lambda kM2ae3 (let ((kM2ae4 (length kM2ae3))) (if (= kM2ae4 '0) (apply (lambda () kM2add@set) kM2ae3) (if (= kM2ae4 '1) (apply (lambda (kM2ae1@x) (set! kM2add@set (kM2ae0@set-cons kM2ae1@x kM2add@set))) kM2ae3) (error 'apply '"invalid arg count")))))))))) (set! kM2c51@kM2a62@make-collection kM2a62@make-collection) (set! kM2a64@current-library-collection (kM29ba@kM2899@make-parameter (kM2a62@make-collection) (lambda (kM2ae9@x) (begin (if (not (procedure? kM2ae9@x)) (assertion-violation 'current-library-collection '"not a procedure" kM2ae9@x) (void)) kM2ae9@x)))) (set! kM2c52@kM2a64@current-library-collection kM2a64@current-library-collection) (set! kM2a66@rp (kM29b7@kM2893@make-record-printer 'library (lambda (kM2aeb@x kM2aec@p kM2aed@wr) (begin (if (not (kM2a70@library? kM2aeb@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (kM2a7a@library-version kM2aeb@x)) (kM2a76@library-name kM2aeb@x) (append (kM2a76@library-name kM2aeb@x) (list (kM2a7a@library-version kM2aeb@x))))) kM2aec@p))))) (set! kM2c53@kM2a66@rp kM2a66@rp) (set! kM2a70@library? (lambda (kM2af1@x) (and (simple-struct? kM2af1@x) (eq? (simple-struct-name kM2af1@x) 'library)))) (set! kM2c54@kM2a70@library? kM2a70@library?) (set! kM2a72@library-id (lambda (kM2af3@x) (simple-struct-ref kM2af3@x '0))) (set! kM2c55@kM2a72@library-id kM2a72@library-id) (set! kM2a74@set-library-id! (lambda (kM2af5@x kM2af6@val) (simple-struct-set! kM2af5@x '0 kM2af6@val))) (set! kM2c56@kM2a74@set-library-id! kM2a74@set-library-id!) (set! kM2a76@library-name (lambda (kM2af9@x) (simple-struct-ref kM2af9@x '1))) (set! kM2c57@kM2a76@library-name kM2a76@library-name) (set! kM2a78@set-library-name! (lambda (kM2afb@x kM2afc@val) (simple-struct-set! kM2afb@x '1 kM2afc@val))) (set! kM2c58@kM2a78@set-library-name! kM2a78@set-library-name!) (set! kM2a7a@library-version (lambda (kM2aff@x) (simple-struct-ref kM2aff@x '2))) (set! kM2c59@kM2a7a@library-version kM2a7a@library-version) (set! kM2a7c@set-library-version! (lambda (kM2b01@x kM2b02@val) (simple-struct-set! kM2b01@x '2 kM2b02@val))) (set! kM2c5a@kM2a7c@set-library-version! kM2a7c@set-library-version!) (set! kM2a7e@library-imp* (lambda (kM2b05@x) (simple-struct-ref kM2b05@x '3))) (set! kM2c5b@kM2a7e@library-imp* kM2a7e@library-imp*) (set! kM2a80@set-library-imp*! (lambda (kM2b07@x kM2b08@val) (simple-struct-set! kM2b07@x '3 kM2b08@val))) (set! kM2c5c@kM2a80@set-library-imp*! kM2a80@set-library-imp*!) (set! kM2a82@library-vis* (lambda (kM2b0b@x) (simple-struct-ref kM2b0b@x '4))) (set! kM2c5d@kM2a82@library-vis* kM2a82@library-vis*) (set! kM2a84@set-library-vis*! (lambda (kM2b0d@x kM2b0e@val) (simple-struct-set! kM2b0d@x '4 kM2b0e@val))) (set! kM2c5e@kM2a84@set-library-vis*! kM2a84@set-library-vis*!) (set! kM2a86@library-inv* (lambda (kM2b11@x) (simple-struct-ref kM2b11@x '5))) (set! kM2c5f@kM2a86@library-inv* kM2a86@library-inv*) (set! kM2a88@set-library-inv*! (lambda (kM2b13@x kM2b14@val) (simple-struct-set! kM2b13@x '5 kM2b14@val))) (set! kM2c60@kM2a88@set-library-inv*! kM2a88@set-library-inv*!) (set! kM2a8a@library-subst (lambda (kM2b17@x) (simple-struct-ref kM2b17@x '6))) (set! kM2c61@kM2a8a@library-subst kM2a8a@library-subst) (set! kM2a8c@set-library-subst! (lambda (kM2b19@x kM2b1a@val) (simple-struct-set! kM2b19@x '6 kM2b1a@val))) (set! kM2c62@kM2a8c@set-library-subst! kM2a8c@set-library-subst!) (set! kM2a8e@library-env (lambda (kM2b1d@x) (simple-struct-ref kM2b1d@x '7))) (set! kM2c63@kM2a8e@library-env kM2a8e@library-env) (set! kM2a90@set-library-env! (lambda (kM2b1f@x kM2b20@val) (simple-struct-set! kM2b1f@x '7 kM2b20@val))) (set! kM2c64@kM2a90@set-library-env! kM2a90@set-library-env!) (set! kM2a92@library-visit-state (lambda (kM2b23@x) (simple-struct-ref kM2b23@x '8))) (set! kM2c65@kM2a92@library-visit-state kM2a92@library-visit-state) (set! kM2a94@set-library-visit-state! (lambda (kM2b25@x kM2b26@val) (simple-struct-set! kM2b25@x '8 kM2b26@val))) (set! kM2c66@kM2a94@set-library-visit-state! kM2a94@set-library-visit-state!) (set! kM2a96@library-invoke-state (lambda (kM2b29@x) (simple-struct-ref kM2b29@x '9))) (set! kM2c67@kM2a96@library-invoke-state kM2a96@library-invoke-state) (set! kM2a98@set-library-invoke-state! (lambda (kM2b2b@x kM2b2c@val) (simple-struct-set! kM2b2b@x '9 kM2b2c@val))) (set! kM2c68@kM2a98@set-library-invoke-state! kM2a98@set-library-invoke-state!) (set! kM2a9a@library-visit-code (lambda (kM2b2f@x) (simple-struct-ref kM2b2f@x '10))) (set! kM2c69@kM2a9a@library-visit-code kM2a9a@library-visit-code) (set! kM2a9c@set-library-visit-code! (lambda (kM2b31@x kM2b32@val) (simple-struct-set! kM2b31@x '10 kM2b32@val))) (set! kM2c6a@kM2a9c@set-library-visit-code! kM2a9c@set-library-visit-code!) (set! kM2a9e@library-invoke-code (lambda (kM2b35@x) (simple-struct-ref kM2b35@x '11))) (set! kM2c6b@kM2a9e@library-invoke-code kM2a9e@library-invoke-code) (set! kM2aa0@set-library-invoke-code! (lambda (kM2b37@x kM2b38@val) (simple-struct-set! kM2b37@x '11 kM2b38@val))) (set! kM2c6c@kM2aa0@set-library-invoke-code! kM2aa0@set-library-invoke-code!) (set! kM2aa2@library-visible? (lambda (kM2b3b@x) (simple-struct-ref kM2b3b@x '12))) (set! kM2c6d@kM2aa2@library-visible? kM2aa2@library-visible?) (set! kM2aa4@set-library-visible?! (lambda (kM2b3d@x kM2b3e@val) (simple-struct-set! kM2b3d@x '12 kM2b3e@val))) (set! kM2c6e@kM2aa4@set-library-visible?! kM2aa4@set-library-visible?!) (set! kM2aa6@library-source-file-name (lambda (kM2b41@x) (simple-struct-ref kM2b41@x '13))) (set! kM2c6f@kM2aa6@library-source-file-name kM2aa6@library-source-file-name) (set! kM2aa8@set-library-source-file-name! (lambda (kM2b43@x kM2b44@val) (simple-struct-set! kM2b43@x '13 kM2b44@val))) (set! kM2c70@kM2aa8@set-library-source-file-name! kM2aa8@set-library-source-file-name!) (set! kM2aaa@dummy '3) (set! kM2c71@kM2aaa@dummy kM2aaa@dummy) (set! kM2aac@find-dependencies (lambda (kM2b47@ls) (if (null? kM2b47@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! kM2c72@kM2aac@find-dependencies kM2aac@find-dependencies) (set! kM2aae@find-library-by (lambda (kM2b49@pred) (let kM2b4d@f ((kM2b4b@ls ((kM2a64@current-library-collection)))) (if (null? kM2b4b@ls) '#f (if (kM2b49@pred (car kM2b4b@ls)) (car kM2b4b@ls) (kM2b4d@f (cdr kM2b4b@ls))))))) (set! kM2c73@kM2aae@find-library-by kM2aae@find-library-by) (set! kM2ab0@library-path (kM29ba@kM2899@make-parameter '(".") (lambda (kM2b4f@x) (if (and (list? kM2b4f@x) (for-all string? kM2b4f@x)) (map (lambda (kM2b51@x) kM2b51@x) kM2b4f@x) (assertion-violation 'library-path '"not a list of strings" kM2b4f@x))))) (set! kM2c74@kM2ab0@library-path kM2ab0@library-path) (set! kM2ab2@library-extensions (kM29ba@kM2899@make-parameter '(".sls" ".ss" ".scm") (lambda (kM2b53@x) (if (and (list? kM2b53@x) (for-all string? kM2b53@x)) (map (lambda (kM2b55@x) kM2b55@x) kM2b53@x) (assertion-violation 'library-extensions '"not a list of strings" kM2b53@x))))) (set! kM2c75@kM2ab2@library-extensions kM2ab2@library-extensions) (set! kM2ab4@library-name->file-name (lambda (kM2b57@x) (call-with-values (lambda () (open-string-output-port)) (lambda (kM2b5d@kM2b5a kM2b5e@kM2b5c) (let ((kM2b61@extract kM2b5e@kM2b5c) (kM2b62@p kM2b5d@kM2b5a)) (let ((kM2b66@display-hex '#f)) (begin (set! kM2b66@display-hex (lambda (kM2b6f@n) (if (<= '0 kM2b6f@n '9) (display kM2b6f@n kM2b62@p) (display (integer->char (+ (char->integer '#\a) (- kM2b6f@n '10))) kM2b62@p)))) (begin (let kM2b69@f ((kM2b67@ls kM2b57@x)) (if (not (null? kM2b67@ls)) (begin (display '"/" kM2b62@p) (for-each (lambda (kM2b6b@c) (if (or (char<=? '#\a kM2b6b@c '#\z) (char<=? '#\A kM2b6b@c '#\Z) (char<=? '#\0 kM2b6b@c '#\9) (memv kM2b6b@c '(#\- #\. #\_ #\~))) (display kM2b6b@c kM2b62@p) (begin (display '"%" kM2b62@p) (let ((kM2b6d@n (char->integer kM2b6b@c))) (begin (kM2b66@display-hex (quotient kM2b6d@n '16)) (kM2b66@display-hex (remainder kM2b6d@n '16))))))) (string->list (symbol->string (car kM2b67@ls)))) (kM2b69@f (cdr kM2b67@ls))) (void))) (kM2b61@extract))))))))) (set! kM2c76@kM2ab4@library-name->file-name kM2ab4@library-name->file-name) (set! kM2ab6@file-locator (kM29ba@kM2899@make-parameter (lambda (kM2b71@x) (let ((kM2b73@str (kM2ab4@library-name->file-name kM2b71@x))) (let kM2b7b@f ((kM2b75@ls (kM2ab0@library-path)) (kM2b76@exts (kM2ab2@library-extensions)) (kM2b77@failed-list '())) (if (null? kM2b75@ls) (let ((kM2b85@kM2b80 '#f) (kM2b87@kM2b82 '#f) (kM2b89@kM2b81 '#f) (kM2b8c@kM2b7f '#f) (kM2b8e@make-library-resolution-condition '#f) (kM2b90@kM2b7d '#f) (kM2b92@kM2b7e '#f) (kM2b94@library-resolution-condition? '#f) (kM2b96@condition-library '#f) (kM2b98@condition-files '#f)) (begin (set! kM2b85@kM2b80 (make-record-type-descriptor '&library-resolution kM4e8c@kM4bd3@&condition-rtd 'kM2b83 '#f '#f '#((immutable library) (immutable files)))) (set! kM2b87@kM2b82 '#f) (set! kM2b89@kM2b81 (make-record-constructor-descriptor kM2b85@kM2b80 kM4e8d@kM4bd5@&condition-rcd kM2b87@kM2b82)) (set! kM2b8c@kM2b7f (record-predicate kM2b85@kM2b80)) (set! kM2b8e@make-library-resolution-condition (record-constructor kM2b89@kM2b81)) (set! kM2b90@kM2b7d (record-accessor kM2b85@kM2b80 '0)) (set! kM2b92@kM2b7e (record-accessor kM2b85@kM2b80 '1)) (set! kM2b94@library-resolution-condition? (condition-predicate kM2b85@kM2b80)) (set! kM2b96@condition-library (condition-accessor kM2b85@kM2b80 kM2b90@kM2b7d)) (set! kM2b98@condition-files (condition-accessor kM2b85@kM2b80 kM2b92@kM2b7e)) (raise (condition (kM4eac@kM4c6d@make-error) (kM4ece@kM4cc9@make-who-condition 'expander) (kM4e92@kM4c2a@make-message-condition '"cannot locate library in library-path") (kM2b8e@make-library-resolution-condition kM2b71@x (reverse kM2b77@failed-list)))))) (if (null? kM2b76@exts) (kM2b7b@f (cdr kM2b75@ls) (kM2ab2@library-extensions) kM2b77@failed-list) (let ((kM2b99@name (string-append (car kM2b75@ls) kM2b73@str (car kM2b76@exts)))) (if (file-exists? kM2b99@name) kM2b99@name (kM2b7b@f kM2b75@ls (cdr kM2b76@exts) (cons kM2b99@name kM2b77@failed-list))))))))) (lambda (kM2b9b@f) (if (procedure? kM2b9b@f) kM2b9b@f (assertion-violation 'file-locator '"not a procedure" kM2b9b@f))))) (set! kM2c77@kM2ab6@file-locator kM2ab6@file-locator) (set! kM2ab8@serialize-all (lambda (kM2b9d@serialize kM2b9e@compile) (let ((kM2ba2@library-desc '#f)) (begin (set! kM2ba2@library-desc (lambda (kM2ba5@x) (list (kM2a72@library-id kM2ba5@x) (kM2a76@library-name kM2ba5@x)))) (for-each (lambda (kM2ba3@x) (if (kM2aa6@library-source-file-name kM2ba3@x) (kM2b9d@serialize (kM2aa6@library-source-file-name kM2ba3@x) (list (kM2a72@library-id kM2ba3@x) (kM2a76@library-name kM2ba3@x) (kM2a7a@library-version kM2ba3@x) (map kM2ba2@library-desc (kM2a7e@library-imp* kM2ba3@x)) (map kM2ba2@library-desc (kM2a82@library-vis* kM2ba3@x)) (map kM2ba2@library-desc (kM2a86@library-inv* kM2ba3@x)) (kM2a8a@library-subst kM2ba3@x) (kM2a8e@library-env kM2ba3@x) (kM2b9e@compile (kM2a9a@library-visit-code kM2ba3@x)) (kM2b9e@compile (kM2a9e@library-invoke-code kM2ba3@x)) (kM2aa2@library-visible? kM2ba3@x))) (void))) ((kM2a64@current-library-collection))))))) (set! kM2c78@kM2ab8@serialize-all kM2ab8@serialize-all) (set! kM2aba@current-precompiled-library-loader (kM29ba@kM2899@make-parameter (lambda (kM2ba7@filename kM2ba8@sk) '#f))) (set! kM2c79@kM2aba@current-precompiled-library-loader kM2aba@current-precompiled-library-loader) (set! kM2abc@try-load-from-file (lambda (kM2bab@filename) ((kM2aba@current-precompiled-library-loader) kM2bab@filename (lambda kM2bd1 (let ((kM2bd2 (length kM2bd1))) (if (= kM2bd2 '11) (apply (lambda (kM2bad@id kM2bae@name kM2baf@ver kM2bb0@imp* kM2bb1@vis* kM2bb2@inv* kM2bb3@exp-subst kM2bb4@exp-env kM2bb5@visit-proc kM2bb6@invoke-proc kM2bb7@visible?) (let kM2bc5@f ((kM2bc3@deps (append kM2bb0@imp* kM2bb1@vis* kM2bb2@inv*))) (if (null? kM2bc3@deps) (begin (kM2ad0@install-library kM2bad@id kM2bae@name kM2baf@ver kM2bb0@imp* kM2bb1@vis* kM2bb2@inv* kM2bb3@exp-subst kM2bb4@exp-env kM2bb5@visit-proc kM2bb6@invoke-proc '#f '#f kM2bb7@visible? '#f) '#t) (let ((kM2bc7@d (car kM2bc3@deps))) (let ((kM2bc9@label (car kM2bc7@d)) (kM2bca@dname (cadr kM2bc7@d))) (let ((kM2bcd@l (kM2ac6@find-library-by-name kM2bca@dname))) (if (and (kM2a70@library? kM2bcd@l) (eq? kM2bc9@label (kM2a72@library-id kM2bcd@l))) (kM2bc5@f (cdr kM2bc3@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" kM2bae@name kM2bca@dname kM2bab@filename kM2bcd@l kM2bc9@label (kM2a72@library-id kM2bcd@l)) '#f)))))))) kM2bd1) (if (>= kM2bd2 '0) (apply (lambda kM2bcf@others '#f) kM2bd1) (error 'apply '"invalid arg count")))))))) (set! kM2c7a@kM2abc@try-load-from-file kM2abc@try-load-from-file) (set! kM2abe@library-loader (kM29ba@kM2899@make-parameter (lambda (kM2bd3@x) (let ((kM2bd5@file-name ((kM2ab6@file-locator) kM2bd3@x))) (if (not kM2bd5@file-name) (assertion-violation '#f '"cannot file library" kM2bd3@x) (or (kM2abc@try-load-from-file kM2bd5@file-name) ((kM2ac0@current-library-expander) (kM29b9@kM2897@read-library-source-file kM2bd5@file-name) kM2bd5@file-name (lambda (kM2bd7@name) (if (not (fast-equal? kM2bd7@name kM2bd3@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (kM2bdd@kM2bda kM2bde@kM2bdc) (let ((kM2be1@e kM2bde@kM2bdc) (kM2be2@p kM2bdd@kM2bda)) (begin (display '"expected to find library " kM2be2@p) (write kM2bd3@x kM2be2@p) (display '" in file " kM2be2@p) (display kM2bd5@file-name kM2be2@p) (display '", found " kM2be2@p) (write kM2bd7@name kM2be2@p) (display '" instead" kM2be2@p) (kM2be1@e)))))) (void)))))))) (lambda (kM2be5@f) (if (procedure? kM2be5@f) kM2be5@f (assertion-violation 'library-locator '"not a procedure" kM2be5@f))))) (set! kM2c7b@kM2abe@library-loader kM2abe@library-loader) (set! kM2ac0@current-library-expander (kM29ba@kM2899@make-parameter (lambda (kM2be7@x) (assertion-violation 'library-expander '"not initialized")) (lambda (kM2be9@f) (if (procedure? kM2be9@f) kM2be9@f (assertion-violation 'library-expander '"not a procedure" kM2be9@f))))) (set! kM2c7c@kM2ac0@current-library-expander kM2ac0@current-library-expander) (set! kM2ac2@external-pending-libraries (kM29ba@kM2899@make-parameter '())) (set! kM2c7d@kM2ac2@external-pending-libraries kM2ac2@external-pending-libraries) (set! kM2ac4@find-external-library (lambda (kM2beb@name) (begin (if (member kM2beb@name (kM2ac2@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" kM2beb@name) (void)) (let ((kM2bf1@kM2bee kM2ac2@external-pending-libraries) (kM2bf2@kM2bf0 (cons kM2beb@name (kM2ac2@external-pending-libraries)))) (let ((kM2bf5@swap (lambda () (let ((kM2bf7@t (kM2bf1@kM2bee))) (begin (kM2bf1@kM2bee kM2bf2@kM2bf0) (set! kM2bf2@kM2bf0 kM2bf7@t)))))) (dynamic-wind kM2bf5@swap (lambda () (begin ((kM2abe@library-loader) kM2beb@name) (or (kM2aae@find-library-by (lambda (kM2bf9@x) (fast-equal? (kM2a76@library-name kM2bf9@x) kM2beb@name))) (assertion-violation '#f '"handling external library did not yield the correct library" kM2beb@name)))) kM2bf5@swap)))))) (set! kM2c7e@kM2ac4@find-external-library kM2ac4@find-external-library) (set! kM2ac6@find-library-by-name (lambda (kM2bfb@name) (or (kM2aae@find-library-by (lambda (kM2bfd@x) (fast-equal? (kM2a76@library-name kM2bfd@x) kM2bfb@name))) (kM2ac4@find-external-library kM2bfb@name)))) (set! kM2c7f@kM2ac6@find-library-by-name kM2ac6@find-library-by-name) (set! kM2ac8@library-exists? (lambda (kM2bff@name) (and (kM2aae@find-library-by (lambda (kM2c01@x) (fast-equal? (kM2a76@library-name kM2c01@x) kM2bff@name))) '#t))) (set! kM2c80@kM2ac8@library-exists? kM2ac8@library-exists?) (set! kM2aca@find-library-by-spec/die (lambda (kM2c03@spec) (let ((kM2c05@id (car kM2c03@spec))) (or (kM2aae@find-library-by (lambda (kM2c07@x) (eq? kM2c05@id (kM2a72@library-id kM2c07@x)))) (assertion-violation '#f '"cannot find library with required spec" kM2c03@spec))))) (set! kM2c81@kM2aca@find-library-by-spec/die kM2aca@find-library-by-spec/die) (set! kM2acc@label->binding-table (make-eq-hashtable)) (set! kM2c82@kM2acc@label->binding-table kM2acc@label->binding-table) (set! kM2ace@install-library-record (lambda (kM2c09@lib) (begin (let ((kM2c0b@exp-env (kM2a8e@library-env kM2c09@lib))) (for-each (lambda (kM2c0d@x) (let ((kM2c0f@label (car kM2c0d@x)) (kM2c10@binding (cdr kM2c0d@x))) (let ((kM2c13@binding (let ((kM2c15@t (car kM2c10@binding))) (if (memv kM2c15@t '(global)) (cons 'global (cons kM2c09@lib (cdr kM2c10@binding))) (if (memv kM2c15@t '(global-macro)) (cons 'global-macro (cons kM2c09@lib (cdr kM2c10@binding))) (if (memv kM2c15@t '(global-macro!)) (cons 'global-macro! (cons kM2c09@lib (cdr kM2c10@binding))) kM2c10@binding)))))) (begin (if (hashtable-ref kM2acc@label->binding-table kM2c0f@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" kM2c0f@label (hashtable-ref kM2acc@label->binding-table kM2c0f@label '#f) kM2c13@binding) (exit)) (void)) (hashtable-set! kM2acc@label->binding-table kM2c0f@label kM2c13@binding))))) kM2c0b@exp-env)) ((kM2a64@current-library-collection) kM2c09@lib)))) (set! kM2c83@kM2ace@install-library-record kM2ace@install-library-record) (set! kM2ad0@install-library (lambda (kM2c17@id kM2c18@name kM2c19@ver kM2c1a@imp* kM2c1b@vis* kM2c1c@inv* kM2c1d@exp-subst kM2c1e@exp-env kM2c1f@visit-proc kM2c20@invoke-proc kM2c21@visit-code kM2c22@invoke-code kM2c23@visible? kM2c24@source-file-name) (let ((kM2c33@imp-lib* (map kM2aca@find-library-by-spec/die kM2c1a@imp*)) (kM2c34@vis-lib* (map kM2aca@find-library-by-spec/die kM2c1b@vis*)) (kM2c35@inv-lib* (map kM2aca@find-library-by-spec/die kM2c1c@inv*))) (begin (if (not (and (symbol? kM2c17@id) (list? kM2c18@name) (list? kM2c19@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" kM2c17@id kM2c18@name kM2c19@ver) (void)) (if (kM2ac8@library-exists? kM2c18@name) (assertion-violation 'install-library '"library is already installed" kM2c18@name) (void)) (let ((kM2c39@lib (make-simple-struct 'library '15 (list kM2c17@id kM2c18@name kM2c19@ver kM2c33@imp-lib* kM2c34@vis-lib* kM2c35@inv-lib* kM2c1d@exp-subst kM2c1e@exp-env kM2c1f@visit-proc kM2c20@invoke-proc kM2c21@visit-code kM2c22@invoke-code kM2c23@visible? kM2c24@source-file-name)))) (kM2ace@install-library-record kM2c39@lib)))))) (set! kM2c84@kM2ad0@install-library kM2ad0@install-library) (set! kM2ad2@imported-label->binding (lambda (kM2c3b@lab) (hashtable-ref kM2acc@label->binding-table kM2c3b@lab '#f))) (set! kM2c85@kM2ad2@imported-label->binding kM2ad2@imported-label->binding) (set! kM2ad4@invoke-library (lambda (kM2c3d@lib) (let ((kM2c3f@invoke (kM2a96@library-invoke-state kM2c3d@lib))) (if (procedure? kM2c3f@invoke) (begin (kM2a98@set-library-invoke-state! kM2c3d@lib (lambda () (assertion-violation 'invoke '"circularity detected" kM2c3d@lib))) (for-each kM2ad4@invoke-library (kM2a86@library-inv* kM2c3d@lib)) (kM2a98@set-library-invoke-state! kM2c3d@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" kM2c3d@lib))) (kM2c3f@invoke) (kM2a98@set-library-invoke-state! kM2c3d@lib '#t)) (void))))) (set! kM2c86@kM2ad4@invoke-library kM2ad4@invoke-library) (set! kM2ad6@visit-library (lambda (kM2c41@lib) (let ((kM2c43@visit (kM2a92@library-visit-state kM2c41@lib))) (if (procedure? kM2c43@visit) (begin (kM2a94@set-library-visit-state! kM2c41@lib (lambda () (assertion-violation 'visit '"circularity detected" kM2c41@lib))) (for-each kM2ad4@invoke-library (kM2a82@library-vis* kM2c41@lib)) (kM2a94@set-library-visit-state! kM2c41@lib (lambda () (assertion-violation 'invoke '"first visit did not return" kM2c41@lib))) (kM2c43@visit) (kM2a94@set-library-visit-state! kM2c41@lib '#t)) (void))))) (set! kM2c87@kM2ad6@visit-library kM2ad6@visit-library) (set! kM2ad8@invoke-library-by-spec (lambda (kM2c45@spec) (kM2ad4@invoke-library (kM2aca@find-library-by-spec/die kM2c45@spec)))) (set! kM2c88@kM2ad8@invoke-library-by-spec kM2ad8@invoke-library-by-spec) (set! kM2ada@installed-libraries (lambda kM2c4d (let ((kM2c4e (length kM2c4d))) (if (= kM2c4e '1) (apply (lambda (kM2c47@all?) (let kM2c4b@f ((kM2c49@ls ((kM2a64@current-library-collection)))) (if (null? kM2c49@ls) '() (if (or kM2c47@all? (kM2aa2@library-visible? (car kM2c49@ls))) (cons (car kM2c49@ls) (kM2c4b@f (cdr kM2c49@ls))) (kM2c4b@f (cdr kM2c49@ls)))))) kM2c4d) (if (= kM2c4e '0) (apply (lambda () (kM2ada@installed-libraries '#f)) kM2c4d) (error 'apply '"invalid arg count")))))) (set! kM2c89@kM2ada@installed-libraries kM2ada@installed-libraries) (set! kM2adc@library-spec (lambda (kM2c4f@x) (begin (if (not (kM2a70@library? kM2c4f@x)) (assertion-violation 'library-spec '"not a library" kM2c4f@x) (void)) (list (kM2a72@library-id kM2c4f@x) (kM2a76@library-name kM2c4f@x) (kM2a7a@library-version kM2c4f@x))))) (set! kM2c8a@kM2adc@library-spec kM2adc@library-spec) (void))
(begin (set! kM2c8e@build-global-define (unspecified)) (set! kM2cff@build-lambda (unspecified)) (set! kM2d01@build-case-lambda (unspecified)) (set! kM2d2f@build-sequence (unspecified)) (set! kM2d31@build-void (unspecified)) (set! kM2d33@build-letrec (unspecified)) (set! kM2d35@build-let (unspecified)) (set! kM2d37@build-named-let (unspecified)) (set! kM2d39@build-letrec* (unspecified)) (set! kM2d3b@build-library-letrec* (unspecified)) (set! kM2d3d@build-receive (unspecified)) (set! kM2c8e@build-global-define (lambda (kM2d3e@x) (kM2d31@build-void))) (set! kM2dd2@kM2c8e@build-global-define kM2c8e@build-global-define) (set! kM2cff@build-lambda (lambda (kM2d40@ae kM2d41@vars kM2d42@exp) (list 'lambda kM2d41@vars kM2d42@exp))) (set! kM2dd3@kM2cff@build-lambda kM2cff@build-lambda) (set! kM2d01@build-case-lambda (lambda (kM2d46@ae kM2d47@vars* kM2d48@exp*) (let ((kM2d4d@build-error '#f) (kM2d4f@build-pred '#f) (kM2d51@build-apply '#f) (kM2d53@expand-case-lambda '#f)) (begin (set! kM2d4d@build-error (lambda (kM2d84@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! kM2d4f@build-pred (lambda (kM2d6c@ae kM2d6d@n kM2d6e@vars) (call-with-values (lambda () (let kM2d7a@f ((kM2d76@vars kM2d6e@vars) (kM2d77@count '0)) (if (pair? kM2d76@vars) (kM2d7a@f (cdr kM2d76@vars) (+ kM2d77@count '1)) (if (null? kM2d76@vars) (values kM2d77@count '=) (values kM2d77@count '>=))))) (lambda (kM2d7c@kM2d73 kM2d7d@kM2d75) (let ((kM2d80@pred kM2d7d@kM2d75) (kM2d81@count kM2d7c@kM2d73)) (list (list 'primitive kM2d80@pred) kM2d6d@n (list 'quote kM2d81@count))))))) (set! kM2d51@build-apply (lambda (kM2d64@ae kM2d65@g kM2d66@vars kM2d67@exp) (list '(primitive apply) (kM2cff@build-lambda kM2d64@ae kM2d66@vars kM2d67@exp) kM2d65@g))) (set! kM2d53@expand-case-lambda (lambda (kM2d54@ae kM2d55@vars kM2d56@exp*) (let ((kM2d5a@g (gensym)) (kM2d5b@n (gensym))) (list 'lambda kM2d5a@g (kM2d35@build-let kM2d54@ae (list kM2d5b@n) (list (list '(primitive length) kM2d5a@g)) (let kM2d62@f ((kM2d5e@vars* kM2d47@vars*) (kM2d5f@exp* kM2d56@exp*)) (if (null? kM2d5e@vars*) (kM2d4d@build-error kM2d54@ae) (list 'if (kM2d4f@build-pred kM2d54@ae kM2d5b@n (car kM2d5e@vars*)) (kM2d51@build-apply kM2d54@ae kM2d5a@g (car kM2d5e@vars*) (car kM2d5f@exp*)) (kM2d62@f (cdr kM2d5e@vars*) (cdr kM2d5f@exp*)))))))))) (if (= (length kM2d48@exp*) '1) (kM2cff@build-lambda kM2d46@ae (car kM2d47@vars*) (car kM2d48@exp*)) (kM2d53@expand-case-lambda kM2d46@ae kM2d47@vars* kM2d48@exp*)))))) (set! kM2dd4@kM2d01@build-case-lambda kM2d01@build-case-lambda) (set! kM2d2f@build-sequence (lambda (kM2d86@ae kM2d87@exps) (let kM2d8c@loop ((kM2d8a@exps kM2d87@exps)) (if (null? (cdr kM2d8a@exps)) (car kM2d8a@exps) (if (equal? (car kM2d8a@exps) (kM2d31@build-void)) (kM2d8c@loop (cdr kM2d8a@exps)) (cons 'begin kM2d8a@exps)))))) (set! kM2dd5@kM2d2f@build-sequence kM2d2f@build-sequence) (set! kM2d31@build-void (lambda () '((primitive void)))) (set! kM2dd6@kM2d31@build-void kM2d31@build-void) (set! kM2d33@build-letrec (lambda (kM2d8e@ae kM2d8f@vars kM2d90@val-exps kM2d91@body-exp) (if (null? kM2d8f@vars) kM2d91@body-exp (list 'letrec (map list kM2d8f@vars kM2d90@val-exps) kM2d91@body-exp)))) (set! kM2dd7@kM2d33@build-letrec kM2d33@build-letrec) (set! kM2d35@build-let (lambda (kM2d96@ae kM2d97@vars kM2d98@val-exps kM2d99@body-exp) (if (null? kM2d97@vars) kM2d99@body-exp (list 'let (map list kM2d97@vars kM2d98@val-exps) kM2d99@body-exp)))) (set! kM2dd8@kM2d35@build-let kM2d35@build-let) (set! kM2d37@build-named-let (lambda (kM2d9e@ae kM2d9f@name kM2da0@vars kM2da1@val-exps kM2da2@body-exp) (list 'let kM2d9f@name (map list kM2da0@vars kM2da1@val-exps) kM2da2@body-exp))) (set! kM2dd9@kM2d37@build-named-let kM2d37@build-named-let) (set! kM2d39@build-letrec* (lambda (kM2da8@ae kM2da9@vars kM2daa@val-exps kM2dab@body-exp) (if (null? kM2da9@vars) kM2dab@body-exp (kM2d35@build-let kM2da8@ae kM2da9@vars (map (lambda (kM2db0@x) (list 'quote '#f)) kM2da9@vars) (kM2d2f@build-sequence kM2da8@ae (append (map (lambda (kM2db2@lhs kM2db3@rhs) (list 'set! kM2db2@lhs kM2db3@rhs)) kM2da9@vars kM2daa@val-exps) (list kM2dab@body-exp))))))) (set! kM2dda@kM2d39@build-letrec* kM2d39@build-letrec*) (set! kM2d3b@build-library-letrec* (lambda (kM2db6@ae kM2db7@name kM2db8@vars kM2db9@locs kM2dba@val-exps kM2dbb@body-exp) (cons 'begin (append (map (lambda (kM2dc2@var) (cons 'set! (cons kM2dc2@var '((unspecified))))) kM2db8@vars) (append (apply append (map (lambda (kM2dc4@var kM2dc5@loc kM2dc6@val-exp) (list (list 'set! kM2dc4@var kM2dc6@val-exp) (list 'set! kM2dc5@loc kM2dc4@var))) kM2db8@vars kM2db9@locs kM2dba@val-exps)) (list kM2dbb@body-exp)))))) (set! kM2ddb@kM2d3b@build-library-letrec* kM2d3b@build-library-letrec*) (set! kM2d3d@build-receive (lambda (kM2dca@ae kM2dcb@vars kM2dcc@producer kM2dcd@body*) (begin (display '"************** in ") (cons 'receive (cons kM2dcb@vars (cons kM2dcc@producer kM2dcd@body*)))))) (set! kM2ddc@kM2d3d@build-receive kM2d3d@build-receive) (void))
(begin (set! kM2deb@file-options-macro (unspecified)) (set! kM2ded@set-cons (unspecified)) (set! kM2def@set-union (unspecified)) (set! kM2df4@top-mark* (unspecified)) (set! kM2df6@top-marked? (unspecified)) (set! kM2df8@gen-lexical (unspecified)) (set! kM2dfa@gen-global (unspecified)) (set! kM2dfc@gen-label (unspecified)) (set! kM2dfe@gen-top-level-label (unspecified)) (set! kM2e00@gen-define-label+loc (unspecified)) (set! kM2e02@gen-define-label (unspecified)) (set! kM2e0c@rib? (unspecified)) (set! kM2e0e@rib-sym* (unspecified)) (set! kM2e10@set-rib-sym*! (unspecified)) (set! kM2e12@rib-mark** (unspecified)) (set! kM2e14@set-rib-mark**! (unspecified)) (set! kM2e16@rib-label* (unspecified)) (set! kM2e18@set-rib-label*! (unspecified)) (set! kM2e1a@rib-sealed/freq (unspecified)) (set! kM2e1c@set-rib-sealed/freq! (unspecified)) (set! kM2e1e@rib-cache (unspecified)) (set! kM2e20@set-rib-cache! (unspecified)) (set! kM2e22@dummy (unspecified)) (set! kM2e24@make-empty-rib (unspecified)) (set! kM2e26@extend-rib! (unspecified)) (set! kM2e28@extend-rib/nc! (unspecified)) (set! kM2e2a@make-rib-map (unspecified)) (set! kM2e2c@seal-rib! (unspecified)) (set! kM2e2e@unseal-rib! (unspecified)) (set! kM2e30@make-full-rib (unspecified)) (set! kM2e32@rp (unspecified)) (set! kM2e3c@stx? (unspecified)) (set! kM2e3e@stx-expr (unspecified)) (set! kM2e40@set-stx-expr! (unspecified)) (set! kM2e42@stx-mark* (unspecified)) (set! kM2e44@set-stx-mark*! (unspecified)) (set! kM2e46@stx-subst* (unspecified)) (set! kM2e48@set-stx-subst*! (unspecified)) (set! kM2e4a@stx-ae* (unspecified)) (set! kM2e4c@set-stx-ae*! (unspecified)) (set! kM2e4e@dummy (unspecified)) (set! kM2e50@datum->stx (unspecified)) (set! kM2e52@gen-mark (unspecified)) (set! kM2e54@anti-mark (unspecified)) (set! kM2e56@anti-mark? (unspecified)) (set! kM2e58@mkstx (unspecified)) (set! kM2e5a@add-mark (unspecified)) (set! kM2e5c@add-subst (unspecified)) (set! kM2e5e@syntax-kind? (unspecified)) (set! kM2e60@syntax-vector->list (unspecified)) (set! kM2e62@syntax-pair? (unspecified)) (set! kM2e64@syntax-vector? (unspecified)) (set! kM2e66@syntax-null? (unspecified)) (set! kM2e68@syntax-list? (unspecified)) (set! kM2e6a@syntax-car (unspecified)) (set! kM2e6c@syntax-cdr (unspecified)) (set! kM2e6e@syntax->list (unspecified)) (set! kM2e70@id? (unspecified)) (set! kM2e72@id->sym (unspecified)) (set! kM2e74@bound-id=? (unspecified)) (set! kM2e76@free-id=? (unspecified)) (set! kM2e78@valid-bound-ids? (unspecified)) (set! kM2e7a@distinct-bound-ids? (unspecified)) (set! kM2e7c@bound-id-member? (unspecified)) (set! kM2e7e@self-evaluating? (unspecified)) (set! kM2e80@strip-annotations (unspecified)) (set! kM2e82@strip (unspecified)) (set! kM2e84@stx->datum (unspecified)) (set! kM2e86@id->label (unspecified)) (set! kM2e88@label->binding (unspecified)) (set! kM2e8a@make-binding (unspecified)) (set! kM2e8c@binding-type (unspecified)) (set! kM2e8e@binding-value (unspecified)) (set! kM2e90@raise-unbound-error (unspecified)) (set! kM2e92@syntax-type (unspecified)) (set! kM2ea0@sanitize-binding (unspecified)) (set! kM2ea2@make-variable-transformer (unspecified)) (set! kM2ea4@variable-transformer? (unspecified)) (set! kM2ea6@variable-transformer-procedure (unspecified)) (set! kM2ea8@make-eval-transformer (unspecified)) (set! kM2ff9@parse-define (unspecified)) (set! kM2ffb@parse-define-syntax (unspecified)) (set! kM2ffd@scheme-stx-hashtable (unspecified)) (set! kM2fff@scheme-stx (unspecified)) (set! kM3001@lexical-var (unspecified)) (set! kM3003@lexical-mutable? (unspecified)) (set! kM3005@set-lexical-mutable! (unspecified)) (set! kM3007@add-lexical (unspecified)) (set! kM3009@add-lexicals (unspecified)) (set! kM300b@letrec-helper (unspecified)) (set! kM300d@let-transformer (unspecified)) (set! kM300f@letrec-transformer (unspecified)) (set! kM3011@letrec*-transformer (unspecified)) (set! kM3013@fluid-let-syntax-transformer (unspecified)) (set! kM3015@type-descriptor-transformer (unspecified)) (set! kM3017@record-type-descriptor-transformer (unspecified)) (set! kM3019@record-constructor-descriptor-transformer (unspecified)) (set! kM301b@when-macro (unspecified)) (set! kM301d@unless-macro (unspecified)) (set! kM301f@if-transformer (unspecified)) (set! kM3021@and-transformer (unspecified)) (set! kM3023@or-transformer (unspecified)) (set! kM3025@case-macro (unspecified)) (set! kM3027@quote-transformer (unspecified)) (set! kM3029@case-lambda-transformer (unspecified)) (set! kM302b@lambda-transformer (unspecified)) (set! kM302d@bless (unspecified)) (set! kM302f@with-syntax-macro (unspecified)) (set! kM3031@invalid-fmls-error (unspecified)) (set! kM3033@let-macro (unspecified)) (set! kM3035@let-values-macro (unspecified)) (set! kM3037@let*-values-macro (unspecified)) (set! kM3039@trace-lambda-macro (unspecified)) (set! kM303b@trace-define-macro (unspecified)) (set! kM303d@trace-define-syntax-macro (unspecified)) (set! kM303f@trace-let/rec-syntax (unspecified)) (set! kM3041@trace-let-syntax-macro (unspecified)) (set! kM3043@trace-letrec-syntax-macro (unspecified)) (set! kM3045@guard-macro (unspecified)) (set! kM3047@define-enumeration-macro (unspecified)) (set! kM3049@time-macro (unspecified)) (set! kM304b@delay-macro (unspecified)) (set! kM304d@assert-macro (unspecified)) (set! kM304f@endianness-macro (unspecified)) (set! kM3051@identifier-syntax-macro (unspecified)) (set! kM3053@do-macro (unspecified)) (set! kM3055@let*-macro (unspecified)) (set! kM3057@or-macro (unspecified)) (set! kM3059@and-macro (unspecified)) (set! kM305b@cond-macro (unspecified)) (set! kM305d@do-include (unspecified)) (set! kM305f@include-macro (unspecified)) (set! kM3061@include-into-macro (unspecified)) (set! kM3063@syntax-rules-macro (unspecified)) (set! kM3065@quasiquote-macro (unspecified)) (set! kM3067@quasisyntax-macro (unspecified)) (set! kM3069@define-struct-macro (unspecified)) (set! kM306b@define-record-type-macro (unspecified)) (set! kM306d@define-condition-type-macro (unspecified)) (set! kM306f@incorrect-usage-macro (unspecified)) (set! kM3071@parameterize-macro (unspecified)) (set! kM3073@foreign-call-transformer (unspecified)) (set! kM3075@convert-pattern (unspecified)) (set! kM3077@syntax-dispatch (unspecified)) (set! kM3079@ellipsis? (unspecified)) (set! kM307b@underscore? (unspecified)) (set! kM307d@verify-literals (unspecified)) (set! kM307f@syntax-case-transformer (unspecified)) (set! kM3081@ellipsis-map (unspecified)) (set! kM3083@syntax-transformer (unspecified)) (set! kM3085@core-macro-transformer (unspecified)) (set! kM3087@symbol-macro (unspecified)) (set! kM3089@macro-transformer (unspecified)) (set! kM308b@local-macro-transformer (unspecified)) (set! kM308d@do-macro-call (unspecified)) (set! kM308f@chi-macro (unspecified)) (set! kM3091@chi-local-macro (unspecified)) (set! kM3093@chi-global-macro (unspecified)) (set! kM3095@chi-expr* (unspecified)) (set! kM3097@chi-application (unspecified)) (set! kM3099@chi-expr (unspecified)) (set! kM309b@chi-set! (unspecified)) (set! kM309d@verify-formals (unspecified)) (set! kM309f@chi-lambda-clause (unspecified)) (set! kM30a1@chi-lambda-clause* (unspecified)) (set! kM30a3@chi-defun (unspecified)) (set! kM30a5@chi-rhs (unspecified)) (set! kM30a7@expand-interaction-rhs*/init* (unspecified)) (set! kM30a9@chi-rhs* (unspecified)) (set! kM30ab@find-bound=? (unspecified)) (set! kM30ad@find-dups (unspecified)) (set! kM30af@chi-internal (unspecified)) (set! kM30b1@parse-module (unspecified)) (set! kM30bb@module-interface? (unspecified)) (set! kM30bd@module-interface-first-mark (unspecified)) (set! kM30bf@set-module-interface-first-mark! (unspecified)) (set! kM30c1@module-interface-exp-id-vec (unspecified)) (set! kM30c3@set-module-interface-exp-id-vec! (unspecified)) (set! kM30c5@module-interface-exp-lab-vec (unspecified)) (set! kM30c7@set-module-interface-exp-lab-vec! (unspecified)) (set! kM30c9@dummy (unspecified)) (set! kM30cb@module-interface-exp-id* (unspecified)) (set! kM30cd@chi-internal-module (unspecified)) (set! kM30cf@chi-body* (unspecified)) (set! kM30d1@expand-transformer (unspecified)) (set! kM30d3@parse-exports (unspecified)) (set! kM30d5@parse-library-name (unspecified)) (set! kM30d7@parse-library (unspecified)) (set! kM30d9@parse-import-spec* (unspecified)) (set! kM30db@make-top-rib (unspecified)) (set! kM30dd@make-collector (unspecified)) (set! kM30df@inv-collector (unspecified)) (set! kM30e1@vis-collector (unspecified)) (set! kM30e3@imp-collector (unspecified)) (set! kM30e5@chi-library-internal (unspecified)) (set! kM30e7@chi-interaction-expr (unspecified)) (set! kM30e9@library-body-expander (unspecified)) (set! kM30eb@core-library-expander (unspecified)) (set! kM30ed@parse-top-level-program (unspecified)) (set! kM30ef@top-level-expander (unspecified)) (set! kM30f1@rp (unspecified)) (set! kM30fb@env? (unspecified)) (set! kM30fd@env-names (unspecified)) (set! kM30ff@set-env-names! (unspecified)) (set! kM3101@env-labels (unspecified)) (set! kM3103@set-env-labels! (unspecified)) (set! kM3105@env-itc (unspecified)) (set! kM3107@set-env-itc! (unspecified)) (set! kM3109@dummy (unspecified)) (set! kM310b@rp (unspecified)) (set! kM3115@interaction-env? (unspecified)) (set! kM3117@interaction-env-rib (unspecified)) (set! kM3119@set-interaction-env-rib! (unspecified)) (set! kM311b@interaction-env-r (unspecified)) (set! kM311d@set-interaction-env-r! (unspecified)) (set! kM311f@interaction-env-locs (unspecified)) (set! kM3121@set-interaction-env-locs! (unspecified)) (set! kM3123@dummy (unspecified)) (set! kM3125@interaction-environment-symbols (unspecified)) (set! kM3127@environment-bindings (unspecified)) (set! kM3129@parse-binding (unspecified)) (set! kM312b@environment? (unspecified)) (set! kM312d@environment-symbols (unspecified)) (set! kM312f@environment (unspecified)) (set! kM3131@null-environment (unspecified)) (set! kM3133@scheme-report-environment (unspecified)) (set! kM3135@expand (unspecified)) (set! kM3137@eval (unspecified)) (set! kM3139@library-expander (unspecified)) (set! kM313b@boot-library-expand (unspecified)) (set! kM313d@rev-map-append (unspecified)) (set! kM313f@build-exports (unspecified)) (set! kM3141@make-export-subst (unspecified)) (set! kM3143@make-export-env/macros (unspecified)) (set! kM3145@generate-temporaries (unspecified)) (set! kM3147@free-identifier=? (unspecified)) (set! kM3149@bound-identifier=? (unspecified)) (set! kM314b@make-source-condition (unspecified)) (set! kM314d@extract-position-condition (unspecified)) (set! kM314f@expression-position (unspecified)) (set! kM3151@assertion-error (unspecified)) (set! kM3153@syntax-error (unspecified)) (set! kM3155@syntax-violation* (unspecified)) (set! kM3157@syntax-violation (unspecified)) (set! kM3159@identifier? (unspecified)) (set! kM315b@datum->syntax (unspecified)) (set! kM315d@syntax->datum (unspecified)) (set! kM315f@ungensym-all (unspecified)) (set! kM3161@compile-r6rs-top-level (unspecified)) (set! kM3163@pre-compile-r6rs-top-level (unspecified)) (set! kM3165@interaction-environment (unspecified)) (set! kM3167@top-level-context (unspecified)) (set! kM2deb@file-options-macro (lambda (kM3168@x) (let ((kM316b@valid-option? '#f)) (begin (set! kM316b@valid-option? (lambda (kM3174@x) (and (kM2e70@id? kM3174@x) (memq (kM2e72@id->sym kM3174@x) '(no-fail no-create no-truncate))))) (let ((kM316c@t kM3168@x)) (let ((kM316e@ls/false (kM3077@syntax-dispatch kM316c@t '(_ . each-any)))) (if (and kM316e@ls/false (apply (lambda (kM3170@opt*) (for-all kM316b@valid-option? kM3170@opt*)) kM316e@ls/false)) (apply (lambda (kM3172@opt*) (kM302d@bless (list 'make-file-options (list 'quote kM3172@opt*)))) kM316e@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM316c@t)))))))) (set! kM4abe@kM2deb@file-options-macro kM2deb@file-options-macro) (set! kM2ded@set-cons (lambda (kM3176@x kM3177@ls) (if (memq kM3176@x kM3177@ls) kM3177@ls (cons kM3176@x kM3177@ls)))) (set! kM4abf@kM2ded@set-cons kM2ded@set-cons) (set! kM2def@set-union (lambda (kM317a@ls1 kM317b@ls2) (if (null? kM317a@ls1) kM317b@ls2 (if (memq (car kM317a@ls1) kM317b@ls2) (kM2def@set-union (cdr kM317a@ls1) kM317b@ls2) (cons (car kM317a@ls1) (kM2def@set-union (cdr kM317a@ls1) kM317b@ls2)))))) (set! kM4ac0@kM2def@set-union kM2def@set-union) (set! kM2df4@top-mark* '(top)) (set! kM4ac1@kM2df4@top-mark* kM2df4@top-mark*) (set! kM2df6@top-marked? (lambda (kM317e@m*) (memq 'top kM317e@m*))) (set! kM4ac2@kM2df6@top-marked? kM2df6@top-marked?) (set! kM2df8@gen-lexical (lambda (kM3180@sym) (if (symbol? kM3180@sym) (gensym kM3180@sym) (if (kM2e3c@stx? kM3180@sym) (kM2df8@gen-lexical (kM2e72@id->sym kM3180@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" kM3180@sym))))) (set! kM4ac3@kM2df8@gen-lexical kM2df8@gen-lexical) (set! kM2dfa@gen-global (lambda (kM3182@x) (kM2df8@gen-lexical kM3182@x))) (set! kM4ac4@kM2dfa@gen-global kM2dfa@gen-global) (set! kM2dfc@gen-label (lambda (kM3184@_) (gensym))) (set! kM4ac5@kM2dfc@gen-label kM2dfc@gen-label) (set! kM2dfe@gen-top-level-label (lambda (kM3186@id kM3187@rib) (let ((kM318b@find '#f)) (begin (set! kM318b@find (lambda (kM3196@sym kM3197@mark* kM3198@sym* kM3199@mark** kM319a@label*) (and (pair? kM3198@sym*) (if (and (eq? kM3196@sym (car kM3198@sym*)) (same-marks? kM3197@mark* (car kM3199@mark**))) (car kM319a@label*) (kM318b@find kM3196@sym kM3197@mark* (cdr kM3198@sym*) (cdr kM3199@mark**) (cdr kM319a@label*)))))) (let ((kM318c@sym (kM2e72@id->sym kM3186@id)) (kM318d@mark* (kM2e42@stx-mark* kM3186@id))) (let ((kM3190@sym* (kM2e0e@rib-sym* kM3187@rib))) (let ((kM3192@t (and (memq kM318c@sym (kM2e0e@rib-sym* kM3187@rib)) (kM318b@find kM318c@sym kM318d@mark* kM3190@sym* (kM2e12@rib-mark** kM3187@rib) (kM2e16@rib-label* kM3187@rib))))) (if kM3192@t ((lambda (kM3194@label) (if (kM2c85@kM2ad2@imported-label->binding kM3194@label) (gensym) kM3194@label)) kM3192@t) (gensym))))))))) (set! kM4ac6@kM2dfe@gen-top-level-label kM2dfe@gen-top-level-label) (set! kM2e00@gen-define-label+loc (lambda (kM31a0@id kM31a1@rib) (let ((kM31a4@t (kM3167@top-level-context))) (if kM31a4@t ((lambda (kM31a6@env) (let ((kM31a8@label (kM2dfe@gen-top-level-label kM31a0@id kM31a1@rib)) (kM31a9@locs (kM311f@interaction-env-locs kM31a6@env))) (values kM31a8@label (let ((kM31ac@t (assq kM31a8@label kM31a9@locs))) (if kM31ac@t (cdr kM31ac@t) (let ((kM31ae@loc (kM2df8@gen-lexical kM31a0@id))) (begin (kM3121@set-interaction-env-locs! kM31a6@env (cons (cons kM31a8@label kM31ae@loc) kM31a9@locs)) kM31ae@loc))))))) kM31a4@t) (values (gensym) (kM2df8@gen-lexical kM31a0@id)))))) (set! kM4ac7@kM2e00@gen-define-label+loc kM2e00@gen-define-label+loc) (set! kM2e02@gen-define-label (lambda (kM31b0@id kM31b1@rib) (if (kM3167@top-level-context) (kM2dfe@gen-top-level-label kM31b0@id kM31b1@rib) (gensym)))) (set! kM4ac8@kM2e02@gen-define-label kM2e02@gen-define-label) (set! kM2e0c@rib? (lambda (kM31b4@x) (and (simple-struct? kM31b4@x) (eq? (simple-struct-name kM31b4@x) 'rib)))) (set! kM4ac9@kM2e0c@rib? kM2e0c@rib?) (set! kM2e0e@rib-sym* (lambda (kM31b6@x) (simple-struct-ref kM31b6@x '0))) (set! kM4aca@kM2e0e@rib-sym* kM2e0e@rib-sym*) (set! kM2e10@set-rib-sym*! (lambda (kM31b8@x kM31b9@val) (simple-struct-set! kM31b8@x '0 kM31b9@val))) (set! kM4acb@kM2e10@set-rib-sym*! kM2e10@set-rib-sym*!) (set! kM2e12@rib-mark** (lambda (kM31bc@x) (simple-struct-ref kM31bc@x '1))) (set! kM4acc@kM2e12@rib-mark** kM2e12@rib-mark**) (set! kM2e14@set-rib-mark**! (lambda (kM31be@x kM31bf@val) (simple-struct-set! kM31be@x '1 kM31bf@val))) (set! kM4acd@kM2e14@set-rib-mark**! kM2e14@set-rib-mark**!) (set! kM2e16@rib-label* (lambda (kM31c2@x) (simple-struct-ref kM31c2@x '2))) (set! kM4ace@kM2e16@rib-label* kM2e16@rib-label*) (set! kM2e18@set-rib-label*! (lambda (kM31c4@x kM31c5@val) (simple-struct-set! kM31c4@x '2 kM31c5@val))) (set! kM4acf@kM2e18@set-rib-label*! kM2e18@set-rib-label*!) (set! kM2e1a@rib-sealed/freq (lambda (kM31c8@x) (simple-struct-ref kM31c8@x '3))) (set! kM4ad0@kM2e1a@rib-sealed/freq kM2e1a@rib-sealed/freq) (set! kM2e1c@set-rib-sealed/freq! (lambda (kM31ca@x kM31cb@val) (simple-struct-set! kM31ca@x '3 kM31cb@val))) (set! kM4ad1@kM2e1c@set-rib-sealed/freq! kM2e1c@set-rib-sealed/freq!) (set! kM2e1e@rib-cache (lambda (kM31ce@x) (simple-struct-ref kM31ce@x '4))) (set! kM4ad2@kM2e1e@rib-cache kM2e1e@rib-cache) (set! kM2e20@set-rib-cache! (lambda (kM31d0@x kM31d1@val) (simple-struct-set! kM31d0@x '4 kM31d1@val))) (set! kM4ad3@kM2e20@set-rib-cache! kM2e20@set-rib-cache!) (set! kM2e22@dummy '3) (set! kM4ad4@kM2e22@dummy kM2e22@dummy) (set! kM2e24@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! kM4ad5@kM2e24@make-empty-rib kM2e24@make-empty-rib) (set! kM2e26@extend-rib! (lambda (kM31d4@rib kM31d5@id kM31d6@label) (let ((kM31db@find '#f)) (begin (set! kM31db@find (lambda (kM31e8@sym kM31e9@mark* kM31ea@sym* kM31eb@mark** kM31ec@label*) (and (pair? kM31ea@sym*) (if (and (eq? kM31e8@sym (car kM31ea@sym*)) (same-marks? kM31e9@mark* (car kM31eb@mark**))) kM31ec@label* (kM31db@find kM31e8@sym kM31e9@mark* (cdr kM31ea@sym*) (cdr kM31eb@mark**) (cdr kM31ec@label*)))))) (begin (if (kM2e1a@rib-sealed/freq kM31d4@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" kM31d4@rib) (void)) (let ((kM31dc@sym (kM2e72@id->sym kM31d5@id)) (kM31dd@mark* (kM2e42@stx-mark* kM31d5@id))) (let ((kM31e0@sym* (kM2e0e@rib-sym* kM31d4@rib))) (let ((kM31e2@t (and (memq kM31dc@sym (kM2e0e@rib-sym* kM31d4@rib)) (kM31db@find kM31dc@sym kM31dd@mark* kM31e0@sym* (kM2e12@rib-mark** kM31d4@rib) (kM2e16@rib-label* kM31d4@rib))))) (if kM31e2@t ((lambda (kM31e4@p) (if (not (eq? kM31d6@label (car kM31e4@p))) (if (kM3167@top-level-context) (set-car! kM31e4@p kM31d6@label) (kM3157@syntax-violation '#f '"multiple definitions of identifier" kM31d5@id)) (void))) kM31e2@t) (begin (if (kM2e1e@rib-cache kM31d4@rib) (hashtable-update! (kM2e1e@rib-cache kM31d4@rib) kM31dc@sym (lambda (kM31e6@e) (cons (cons kM31dd@mark* kM31d6@label) kM31e6@e)) '()) (void)) (kM2e10@set-rib-sym*! kM31d4@rib (cons kM31dc@sym kM31e0@sym*)) (kM2e14@set-rib-mark**! kM31d4@rib (cons kM31dd@mark* (kM2e12@rib-mark** kM31d4@rib))) (kM2e18@set-rib-label*! kM31d4@rib (cons kM31d6@label (kM2e16@rib-label* kM31d4@rib))))))))))))) (set! kM4ad6@kM2e26@extend-rib! kM2e26@extend-rib!) (set! kM2e28@extend-rib/nc! (lambda (kM31f2@rib kM31f3@id kM31f4@label) (let ((kM31f8@sym (kM2e72@id->sym kM31f3@id)) (kM31f9@mark* (kM2e42@stx-mark* kM31f3@id))) (let ((kM31fc@sym* (kM2e0e@rib-sym* kM31f2@rib))) (begin (if (kM2e1e@rib-cache kM31f2@rib) (hashtable-update! (kM2e1e@rib-cache kM31f2@rib) kM31f8@sym (lambda (kM31fe@e) (cons (cons kM31f9@mark* kM31f4@label) kM31fe@e)) '()) (void)) (kM2e10@set-rib-sym*! kM31f2@rib (cons kM31f8@sym kM31fc@sym*)) (kM2e14@set-rib-mark**! kM31f2@rib (cons kM31f9@mark* (kM2e12@rib-mark** kM31f2@rib))) (kM2e18@set-rib-label*! kM31f2@rib (cons kM31f4@label (kM2e16@rib-label* kM31f2@rib)))))))) (set! kM4ad7@kM2e28@extend-rib/nc! kM2e28@extend-rib/nc!) (set! kM2e2a@make-rib-map (lambda (kM3200@sym*) (let ((kM3202@ht (make-eq-hashtable))) (let kM3208@f ((kM3204@i '0) (kM3205@sym* kM3200@sym*)) (if (null? kM3205@sym*) kM3202@ht (begin (hashtable-update! kM3202@ht (car kM3205@sym*) (lambda (kM320a@x) (cons kM3204@i kM320a@x)) '()) (kM3208@f (+ kM3204@i '1) (cdr kM3205@sym*)))))))) (set! kM4ad8@kM2e2a@make-rib-map kM2e2a@make-rib-map) (set! kM2e2c@seal-rib! (lambda (kM320c@rib) (let ((kM320e@sym* (kM2e0e@rib-sym* kM320c@rib))) (if (not (null? kM320e@sym*)) (begin (kM2e10@set-rib-sym*! kM320c@rib (list->vector kM320e@sym*)) (kM2e14@set-rib-mark**! kM320c@rib (list->vector (kM2e12@rib-mark** kM320c@rib))) (kM2e18@set-rib-label*! kM320c@rib (list->vector (kM2e16@rib-label* kM320c@rib))) (kM2e1c@set-rib-sealed/freq! kM320c@rib (kM2e2a@make-rib-map kM320e@sym*))) (void))))) (set! kM4ad9@kM2e2c@seal-rib! kM2e2c@seal-rib!) (set! kM2e2e@unseal-rib! (lambda (kM3210@rib) (if (kM2e1a@rib-sealed/freq kM3210@rib) (begin (kM2e1c@set-rib-sealed/freq! kM3210@rib '#f) (kM2e10@set-rib-sym*! kM3210@rib (vector->list (kM2e0e@rib-sym* kM3210@rib))) (kM2e14@set-rib-mark**! kM3210@rib (vector->list (kM2e12@rib-mark** kM3210@rib))) (kM2e18@set-rib-label*! kM3210@rib (vector->list (kM2e16@rib-label* kM3210@rib)))) (void)))) (set! kM4ada@kM2e2e@unseal-rib! kM2e2e@unseal-rib!) (set! kM2e30@make-full-rib (lambda (kM3212@id* kM3213@label*) (let ((kM3216@r (make-simple-struct 'rib '6 (list (map kM2e72@id->sym kM3212@id*) (map kM2e42@stx-mark* kM3212@id*) kM3213@label* '#f '#f)))) (begin (kM2e2c@seal-rib! kM3216@r) kM3216@r)))) (set! kM4adb@kM2e30@make-full-rib kM2e30@make-full-rib) (set! kM2e32@rp (kM29b7@kM2893@make-record-printer 'stx (lambda (kM3218@x kM3219@p kM321a@wr) (begin (display '"#<syntax " kM3219@p) (write (kM2e84@stx->datum kM3218@x) kM3219@p) (let ((kM321e@expr (kM2e3e@stx-expr kM3218@x))) (if (kM29af@kM2883@annotation? kM321e@expr) (let ((kM3220@src (kM29b0@kM2885@annotation-source kM321e@expr))) (if (pair? kM3220@src) (begin (display '" [" kM3219@p) (display (cdr kM3220@src) kM3219@p) (display '" of " kM3219@p) (display (car kM3220@src) kM3219@p) (display '"]" kM3219@p)) (void))) (void))) (display '">" kM3219@p))))) (set! kM4adc@kM2e32@rp kM2e32@rp) (set! kM2e3c@stx? (lambda (kM3222@x) (and (simple-struct? kM3222@x) (eq? (simple-struct-name kM3222@x) 'stx)))) (set! kM4add@kM2e3c@stx? kM2e3c@stx?) (set! kM2e3e@stx-expr (lambda (kM3224@x) (simple-struct-ref kM3224@x '0))) (set! kM4ade@kM2e3e@stx-expr kM2e3e@stx-expr) (set! kM2e40@set-stx-expr! (lambda (kM3226@x kM3227@val) (simple-struct-set! kM3226@x '0 kM3227@val))) (set! kM4adf@kM2e40@set-stx-expr! kM2e40@set-stx-expr!) (set! kM2e42@stx-mark* (lambda (kM322a@x) (simple-struct-ref kM322a@x '1))) (set! kM4ae0@kM2e42@stx-mark* kM2e42@stx-mark*) (set! kM2e44@set-stx-mark*! (lambda (kM322c@x kM322d@val) (simple-struct-set! kM322c@x '1 kM322d@val))) (set! kM4ae1@kM2e44@set-stx-mark*! kM2e44@set-stx-mark*!) (set! kM2e46@stx-subst* (lambda (kM3230@x) (simple-struct-ref kM3230@x '2))) (set! kM4ae2@kM2e46@stx-subst* kM2e46@stx-subst*) (set! kM2e48@set-stx-subst*! (lambda (kM3232@x kM3233@val) (simple-struct-set! kM3232@x '2 kM3233@val))) (set! kM4ae3@kM2e48@set-stx-subst*! kM2e48@set-stx-subst*!) (set! kM2e4a@stx-ae* (lambda (kM3236@x) (simple-struct-ref kM3236@x '3))) (set! kM4ae4@kM2e4a@stx-ae* kM2e4a@stx-ae*) (set! kM2e4c@set-stx-ae*! (lambda (kM3238@x kM3239@val) (simple-struct-set! kM3238@x '3 kM3239@val))) (set! kM4ae5@kM2e4c@set-stx-ae*! kM2e4c@set-stx-ae*!) (set! kM2e4e@dummy '3) (set! kM4ae6@kM2e4e@dummy kM2e4e@dummy) (set! kM2e50@datum->stx (lambda (kM323c@id kM323d@datum) (make-simple-struct 'stx '5 (list kM323d@datum (kM2e42@stx-mark* kM323c@id) (kM2e46@stx-subst* kM323c@id) (kM2e4a@stx-ae* kM323c@id))))) (set! kM4ae7@kM2e50@datum->stx kM2e50@datum->stx) (set! kM2e52@gen-mark (lambda () (string '#\m))) (set! kM4ae8@kM2e52@gen-mark kM2e52@gen-mark) (set! kM2e54@anti-mark '#f) (set! kM4ae9@kM2e54@anti-mark kM2e54@anti-mark) (set! kM2e56@anti-mark? not) (set! kM4aea@kM2e56@anti-mark? kM2e56@anti-mark?) (set! kM2e58@mkstx (lambda (kM3240@e kM3241@m* kM3242@s* kM3243@ae*) (if (and (kM2e3c@stx? kM3240@e) (not (kM2df6@top-marked? kM3241@m*))) (call-with-values (lambda () (join-wraps kM3241@m* kM3242@s* kM3243@ae* kM3240@e)) (lambda (kM324e@kM3249 kM324f@kM324b kM3250@kM324d) (let ((kM3254@ae* kM3250@kM324d) (kM3255@s* kM324f@kM324b) (kM3256@m* kM324e@kM3249)) (make-simple-struct 'stx '5 (list (kM2e3e@stx-expr kM3240@e) kM3256@m* kM3255@s* kM3254@ae*))))) (make-simple-struct 'stx '5 (list kM3240@e kM3241@m* kM3242@s* kM3243@ae*))))) (set! kM4aeb@kM2e58@mkstx kM2e58@mkstx) (set! kM2e5a@add-mark (lambda (kM325a@m kM325b@e kM325c@ae) (kM2e58@mkstx kM325b@e (list kM325a@m) '(shift) (list kM325c@ae)))) (set! kM4aec@kM2e5a@add-mark kM2e5a@add-mark) (set! kM2e5c@add-subst (lambda (kM3260@subst kM3261@e) (kM2e58@mkstx kM3261@e '() (list kM3260@subst) '()))) (set! kM4aed@kM2e5c@add-subst kM2e5c@add-subst) (set! kM2e5e@syntax-kind? (lambda (kM3264@x kM3265@p?) (if (kM2e3c@stx? kM3264@x) (kM2e5e@syntax-kind? (kM2e3e@stx-expr kM3264@x) kM3265@p?) (if (kM29af@kM2883@annotation? kM3264@x) (kM2e5e@syntax-kind? (kM29b1@kM2887@annotation-expression kM3264@x) kM3265@p?) (kM3265@p? kM3264@x))))) (set! kM4aee@kM2e5e@syntax-kind? kM2e5e@syntax-kind?) (set! kM2e60@syntax-vector->list (lambda (kM3268@x) (if (kM2e3c@stx? kM3268@x) (let ((kM326a@ls (kM2e60@syntax-vector->list (kM2e3e@stx-expr kM3268@x))) (kM326b@m* (kM2e42@stx-mark* kM3268@x)) (kM326c@s* (kM2e46@stx-subst* kM3268@x)) (kM326d@ae* (kM2e4a@stx-ae* kM3268@x))) (map (lambda (kM3272@x) (kM2e58@mkstx kM3272@x kM326b@m* kM326c@s* kM326d@ae*)) kM326a@ls)) (if (kM29af@kM2883@annotation? kM3268@x) (kM2e60@syntax-vector->list (kM29b1@kM2887@annotation-expression kM3268@x)) (if (vector? kM3268@x) (vector->list kM3268@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" kM3268@x)))))) (set! kM4aef@kM2e60@syntax-vector->list kM2e60@syntax-vector->list) (set! kM2e62@syntax-pair? (lambda (kM3274@x) (kM2e5e@syntax-kind? kM3274@x pair?))) (set! kM4af0@kM2e62@syntax-pair? kM2e62@syntax-pair?) (set! kM2e64@syntax-vector? (lambda (kM3276@x) (kM2e5e@syntax-kind? kM3276@x vector?))) (set! kM4af1@kM2e64@syntax-vector? kM2e64@syntax-vector?) (set! kM2e66@syntax-null? (lambda (kM3278@x) (kM2e5e@syntax-kind? kM3278@x null?))) (set! kM4af2@kM2e66@syntax-null? kM2e66@syntax-null?) (set! kM2e68@syntax-list? (lambda (kM327a@x) (or (kM2e66@syntax-null? kM327a@x) (and (kM2e62@syntax-pair? kM327a@x) (kM2e68@syntax-list? (kM2e6c@syntax-cdr kM327a@x)))))) (set! kM4af3@kM2e68@syntax-list? kM2e68@syntax-list?) (set! kM2e6a@syntax-car (lambda (kM327c@x) (if (kM2e3c@stx? kM327c@x) (kM2e58@mkstx (kM2e6a@syntax-car (kM2e3e@stx-expr kM327c@x)) (kM2e42@stx-mark* kM327c@x) (kM2e46@stx-subst* kM327c@x) (kM2e4a@stx-ae* kM327c@x)) (if (kM29af@kM2883@annotation? kM327c@x) (kM2e6a@syntax-car (kM29b1@kM2887@annotation-expression kM327c@x)) (if (pair? kM327c@x) (car kM327c@x) (assertion-violation 'syntax-car '"BUG: not a pair" kM327c@x)))))) (set! kM4af4@kM2e6a@syntax-car kM2e6a@syntax-car) (set! kM2e6c@syntax-cdr (lambda (kM327e@x) (if (kM2e3c@stx? kM327e@x) (kM2e58@mkstx (kM2e6c@syntax-cdr (kM2e3e@stx-expr kM327e@x)) (kM2e42@stx-mark* kM327e@x) (kM2e46@stx-subst* kM327e@x) (kM2e4a@stx-ae* kM327e@x)) (if (kM29af@kM2883@annotation? kM327e@x) (kM2e6c@syntax-cdr (kM29b1@kM2887@annotation-expression kM327e@x)) (if (pair? kM327e@x) (cdr kM327e@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" kM327e@x)))))) (set! kM4af5@kM2e6c@syntax-cdr kM2e6c@syntax-cdr) (set! kM2e6e@syntax->list (lambda (kM3280@x) (if (kM2e62@syntax-pair? kM3280@x) (cons (kM2e6a@syntax-car kM3280@x) (kM2e6e@syntax->list (kM2e6c@syntax-cdr kM3280@x))) (if (kM2e66@syntax-null? kM3280@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" kM3280@x))))) (set! kM4af6@kM2e6e@syntax->list kM2e6e@syntax->list) (set! kM2e70@id? (lambda (kM3282@x) (and (kM2e3c@stx? kM3282@x) (symbol? (kM2e3e@stx-expr kM3282@x))))) (set! kM4af7@kM2e70@id? kM2e70@id?) (set! kM2e72@id->sym (lambda (kM3284@x) (kM2e3e@stx-expr kM3284@x))) (set! kM4af8@kM2e72@id->sym kM2e72@id->sym) (set! kM2e74@bound-id=? (lambda (kM3286@x kM3287@y) (and (eq? (kM2e72@id->sym kM3286@x) (kM2e72@id->sym kM3287@y)) (same-marks? (kM2e42@stx-mark* kM3286@x) (kM2e42@stx-mark* kM3287@y))))) (set! kM4af9@kM2e74@bound-id=? kM2e74@bound-id=?) (set! kM2e76@free-id=? (lambda (kM328a@i kM328b@j) (let ((kM328e@t0 (id->real-label kM328a@i)) (kM328f@t1 (id->real-label kM328b@j))) (if (or kM328e@t0 kM328f@t1) (eq? kM328e@t0 kM328f@t1) (eq? (kM2e72@id->sym kM328a@i) (kM2e72@id->sym kM328b@j)))))) (set! kM4afa@kM2e76@free-id=? kM2e76@free-id=?) (set! kM2e78@valid-bound-ids? (lambda (kM3292@id*) (and (for-all kM2e70@id? kM3292@id*) (kM2e7a@distinct-bound-ids? kM3292@id*)))) (set! kM4afb@kM2e78@valid-bound-ids? kM2e78@valid-bound-ids?) (set! kM2e7a@distinct-bound-ids? (lambda (kM3294@id*) (or (null? kM3294@id*) (and (not (kM2e7c@bound-id-member? (car kM3294@id*) (cdr kM3294@id*))) (kM2e7a@distinct-bound-ids? (cdr kM3294@id*)))))) (set! kM4afc@kM2e7a@distinct-bound-ids? kM2e7a@distinct-bound-ids?) (set! kM2e7c@bound-id-member? (lambda (kM3296@id kM3297@id*) (and (pair? kM3297@id*) (or (kM2e74@bound-id=? kM3296@id (car kM3297@id*)) (kM2e7c@bound-id-member? kM3296@id (cdr kM3297@id*)))))) (set! kM4afd@kM2e7c@bound-id-member? kM2e7c@bound-id-member?) (set! kM2e7e@self-evaluating? (lambda (kM329a@x) (or (number? kM329a@x) (string? kM329a@x) (char? kM329a@x) (boolean? kM329a@x) (regexp? kM329a@x) (bytevector? kM329a@x)))) (set! kM4afe@kM2e7e@self-evaluating? kM2e7e@self-evaluating?) (set! kM2e80@strip-annotations (lambda (kM329c@x) (if (pair? kM329c@x) (cons (kM2e80@strip-annotations (car kM329c@x)) (kM2e80@strip-annotations (cdr kM329c@x))) (if (vector? kM329c@x) (vector-map kM2e80@strip-annotations kM329c@x) (if (kM29af@kM2883@annotation? kM329c@x) (kM29ae@kM2881@annotation-stripped kM329c@x) kM329c@x))))) (set! kM4aff@kM2e80@strip-annotations kM2e80@strip-annotations) (set! kM2e82@strip (lambda (kM329e@x kM329f@m*) (if (kM2df6@top-marked? kM329f@m*) (if (or (kM29af@kM2883@annotation? kM329e@x) (and (pair? kM329e@x) (kM29af@kM2883@annotation? (car kM329e@x))) (and (vector? kM329e@x) (> (vector-length kM329e@x) '0) (kM29af@kM2883@annotation? (vector-ref kM329e@x '0)))) (kM2e80@strip-annotations kM329e@x) kM329e@x) (let kM32a4@f ((kM32a2@x kM329e@x)) (if (kM2e3c@stx? kM32a2@x) (kM2e82@strip (kM2e3e@stx-expr kM32a2@x) (kM2e42@stx-mark* kM32a2@x)) (if (kM29af@kM2883@annotation? kM32a2@x) (kM29ae@kM2881@annotation-stripped kM32a2@x) (if (pair? kM32a2@x) (let ((kM32a6@a (kM32a4@f (car kM32a2@x))) (kM32a7@d (kM32a4@f (cdr kM32a2@x)))) (if (and (eq? kM32a6@a (car kM32a2@x)) (eq? kM32a7@d (cdr kM32a2@x))) kM32a2@x (cons kM32a6@a kM32a7@d))) (if (vector? kM32a2@x) (let ((kM32aa@old (vector->list kM32a2@x))) (let ((kM32ac@new (map kM32a4@f kM32aa@old))) (if (for-all eq? kM32aa@old kM32ac@new) kM32a2@x (list->vector kM32ac@new)))) kM32a2@x)))))))) (set! kM4b00@kM2e82@strip kM2e82@strip) (set! kM2e84@stx->datum (lambda (kM32ae@x) (kM2e82@strip kM32ae@x '()))) (set! kM4b01@kM2e84@stx->datum kM2e84@stx->datum) (set! kM2e86@id->label (lambda (kM32b0@id) (or (id->real-label kM32b0@id) (let ((kM32b2@t (kM3167@top-level-context))) (if kM32b2@t ((lambda (kM32b4@env) (let ((kM32b6@rib (kM3117@interaction-env-rib kM32b4@env))) (call-with-values (lambda () (kM2e00@gen-define-label+loc kM32b0@id kM32b6@rib)) (lambda (kM32bc@kM32b9 kM32bd@kM32bb) (let ((kM32c0@loc_ kM32bd@kM32bb) (kM32c1@lab kM32bc@kM32b9)) (begin (kM2e26@extend-rib! kM32b6@rib kM32b0@id kM32c1@lab) kM32c1@lab)))))) kM32b2@t) '#f))))) (set! kM4b02@kM2e86@id->label kM2e86@id->label) (set! kM2e88@label->binding (lambda (kM32c4@x kM32c5@r) (let ((kM32c8@t (kM2c85@kM2ad2@imported-label->binding kM32c4@x))) (if kM32c8@t ((lambda (kM32ca@b) (if (and (pair? kM32ca@b) (eq? (car kM32ca@b) '$core-rtd)) (cons '$rtd (map kM302d@bless (cdr kM32ca@b))) (if (and (pair? kM32ca@b) (eq? (car kM32ca@b) 'global-rtd)) (let ((kM32cc@lib (cadr kM32ca@b)) (kM32cd@loc (cddr kM32ca@b))) (cons '$rtd (symbol-value kM32cd@loc))) kM32ca@b))) kM32c8@t) (let ((kM32d0@t (assq kM32c4@x kM32c5@r))) (if kM32d0@t (cdr kM32d0@t) (let ((kM32d2@t (kM3167@top-level-context))) (if kM32d2@t ((lambda (kM32d4@env) (let ((kM32d6@t (assq kM32c4@x (kM311f@interaction-env-locs kM32d4@env)))) (if kM32d6@t ((lambda (kM32d8@p) (cons* 'lexical (cdr kM32d8@p) '#f)) kM32d6@t) '(displaced-lexical . #f)))) kM32d2@t) '(displaced-lexical . #f))))))))) (set! kM4b03@kM2e88@label->binding kM2e88@label->binding) (set! kM2e8a@make-binding cons) (set! kM4b04@kM2e8a@make-binding kM2e8a@make-binding) (set! kM2e8c@binding-type car) (set! kM4b05@kM2e8c@binding-type kM2e8c@binding-type) (set! kM2e8e@binding-value cdr) (set! kM4b06@kM2e8e@binding-value kM2e8e@binding-value) (set! kM2e90@raise-unbound-error (lambda (kM32da@id) (kM3155@syntax-violation* '#f '"unbound identifier" kM32da@id (kM4efc@kM4d42@make-undefined-violation)))) (set! kM4b07@kM2e90@raise-unbound-error kM2e90@raise-unbound-error) (set! kM2e92@syntax-type (lambda (kM32dc@e kM32dd@r) (if (kM2e70@id? kM32dc@e) (let ((kM32e0@id kM32dc@e)) (let ((kM32e2@label (kM2e86@id->label kM32e0@id))) (let ((kM32e4@b (kM2e88@label->binding kM32e2@label kM32dd@r))) (let ((kM32e6@type (kM2e8c@binding-type kM32e4@b))) (begin (if (not kM32e2@label) (kM2e90@raise-unbound-error kM32e0@id) (void)) (let ((kM32e8@t kM32e6@type)) (if (memv kM32e8@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values kM32e6@type (kM2e8e@binding-value kM32e4@b) kM32e0@id) (values 'other '#f '#f)))))))) (if (kM2e62@syntax-pair? kM32dc@e) (let ((kM32ea@id (kM2e6a@syntax-car kM32dc@e))) (if (kM2e70@id? kM32ea@id) (let ((kM32ec@label (kM2e86@id->label kM32ea@id))) (let ((kM32ee@b (kM2e88@label->binding kM32ec@label kM32dd@r))) (let ((kM32f0@type (kM2e8c@binding-type kM32ee@b))) (begin (if (not kM32ec@label) (kM2e90@raise-unbound-error kM32ea@id) (void)) (let ((kM32f2@t kM32f0@type)) (if (memv kM32f2@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values kM32f0@type (kM2e8e@binding-value kM32ee@b) kM32ea@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((kM32f4@d (kM2e84@stx->datum kM32dc@e))) (if (kM2e7e@self-evaluating? kM32f4@d) (values 'constant kM32f4@d '#f) (values 'other '#f '#f))))))) (set! kM4b08@kM2e92@syntax-type kM2e92@syntax-type) (set! kM2ea0@sanitize-binding (lambda (kM32f6@x kM32f7@src) (if (procedure? kM32f6@x) (cons* 'local-macro kM32f6@x kM32f7@src) (if (and (pair? kM32f6@x) (eq? (car kM32f6@x) 'macro!) (procedure? (cdr kM32f6@x))) (cons* 'local-macro! (cdr kM32f6@x) kM32f7@src) (if (and (pair? kM32f6@x) (eq? (car kM32f6@x) '$rtd)) kM32f6@x (assertion-violation 'expand '"invalid transformer" kM32f6@x)))))) (set! kM4b09@kM2ea0@sanitize-binding kM2ea0@sanitize-binding) (set! kM2ea2@make-variable-transformer (lambda (kM32fa@x) (if (procedure? kM32fa@x) (cons 'macro! kM32fa@x) (assertion-violation 'make-variable-transformer '"not a procedure" kM32fa@x)))) (set! kM4b0a@kM2ea2@make-variable-transformer kM2ea2@make-variable-transformer) (set! kM2ea4@variable-transformer? (lambda (kM32fc@x) (and (pair? kM32fc@x) (eq? (car kM32fc@x) 'macro!) (procedure? (cdr kM32fc@x))))) (set! kM4b0b@kM2ea4@variable-transformer? kM2ea4@variable-transformer?) (set! kM2ea6@variable-transformer-procedure (lambda (kM32fe@x) (if (kM2ea4@variable-transformer? kM32fe@x) (cdr kM32fe@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" kM32fe@x)))) (set! kM4b0c@kM2ea6@variable-transformer-procedure kM2ea6@variable-transformer-procedure) (set! kM2ea8@make-eval-transformer (lambda (kM3300@x) (kM2ea0@sanitize-binding (eval-core (kM2a10@kM29c8@expanded->core kM3300@x)) kM3300@x))) (set! kM4b0d@kM2ea8@make-eval-transformer kM2ea8@make-eval-transformer) (set! kM2ff9@parse-define (lambda (kM3302@x) (let ((kM3304@t kM3302@x)) (let ((kM3306@ls/false (kM3077@syntax-dispatch kM3304@t '(_ (any . any) any . each-any)))) (if (and kM3306@ls/false (apply (lambda (kM3308@id kM3309@fmls kM330a@b kM330b@b*) (kM2e70@id? kM3308@id)) kM3306@ls/false)) (apply (lambda (kM3310@id kM3311@fmls kM3312@b kM3313@b*) (begin (kM309d@verify-formals kM3311@fmls kM3302@x) (values kM3310@id (cons 'defun (cons kM3311@fmls (cons kM3312@b kM3313@b*)))))) kM3306@ls/false) (let ((kM3318@t kM3304@t)) (let ((kM331a@ls/false (kM3077@syntax-dispatch kM3318@t '(_ any any)))) (if (and kM331a@ls/false (apply (lambda (kM331c@id kM331d@val) (kM2e70@id? kM331c@id)) kM331a@ls/false)) (apply (lambda (kM3320@id kM3321@val) (values kM3320@id (cons 'expr kM3321@val))) kM331a@ls/false) (let ((kM3324@t kM3318@t)) (let ((kM3326@ls/false (kM3077@syntax-dispatch kM3324@t '(_ any)))) (if (and kM3326@ls/false (apply (lambda (kM3328@id) (kM2e70@id? kM3328@id)) kM3326@ls/false)) (apply (lambda (kM332a@id) (values kM332a@id (cons 'expr (kM302d@bless '(void))))) kM3326@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3324@t)))))))))))) (set! kM4b0e@kM2ff9@parse-define kM2ff9@parse-define) (set! kM2ffb@parse-define-syntax (lambda (kM332c@x) (let ((kM332e@t kM332c@x)) (let ((kM3330@ls/false (kM3077@syntax-dispatch kM332e@t '(_ any any)))) (if (and kM3330@ls/false (apply (lambda (kM3332@id kM3333@val) (kM2e70@id? kM3332@id)) kM3330@ls/false)) (apply (lambda (kM3336@id kM3337@val) (values kM3336@id kM3337@val)) kM3330@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM332e@t)))))) (set! kM4b0f@kM2ffb@parse-define-syntax kM2ffb@parse-define-syntax) (set! kM2ffd@scheme-stx-hashtable (make-eq-hashtable)) (set! kM4b10@kM2ffd@scheme-stx-hashtable kM2ffd@scheme-stx-hashtable) (set! kM2fff@scheme-stx (lambda (kM333a@sym) (or (hashtable-ref kM2ffd@scheme-stx-hashtable kM333a@sym '#f) (let ((kM333c@subst (kM2c61@kM2a8a@library-subst (kM2c7f@kM2ac6@find-library-by-name '(psyntax system $all))))) (let ((kM333e@stx (make-simple-struct 'stx '5 (list kM333a@sym kM2df4@top-mark* '() '())))) (let ((kM3340@stx (let ((kM3342@t (assq kM333a@sym kM333c@subst))) (if kM3342@t ((lambda (kM3344@x) (let ((kM3346@name (car kM3344@x)) (kM3347@label (cdr kM3344@x))) (kM2e5c@add-subst (make-simple-struct 'rib '6 (list (list kM3346@name) (list kM2df4@top-mark*) (list kM3347@label) '#f '#f)) kM333e@stx))) kM3342@t) kM333e@stx)))) (begin (hashtable-set! kM2ffd@scheme-stx-hashtable kM333a@sym kM3340@stx) kM3340@stx))))))) (set! kM4b11@kM2fff@scheme-stx kM2fff@scheme-stx) (set! kM3001@lexical-var car) (set! kM4b12@kM3001@lexical-var kM3001@lexical-var) (set! kM3003@lexical-mutable? cdr) (set! kM4b13@kM3003@lexical-mutable? kM3003@lexical-mutable?) (set! kM3005@set-lexical-mutable! set-cdr!) (set! kM4b14@kM3005@set-lexical-mutable! kM3005@set-lexical-mutable!) (set! kM3007@add-lexical (lambda (kM334a@lab kM334b@lex kM334c@r) (cons (cons* kM334a@lab 'lexical kM334b@lex '#f) kM334c@r))) (set! kM4b15@kM3007@add-lexical kM3007@add-lexical) (set! kM3009@add-lexicals (lambda (kM3350@lab* kM3351@lex* kM3352@r) (if (null? kM3350@lab*) kM3352@r (kM3009@add-lexicals (cdr kM3350@lab*) (cdr kM3351@lex*) (kM3007@add-lexical (car kM3350@lab*) (car kM3351@lex*) kM3352@r))))) (set! kM4b16@kM3009@add-lexicals kM3009@add-lexicals) (set! kM300b@letrec-helper (lambda (kM3356@e kM3357@r kM3358@mr kM3359@build) (let ((kM335e@t kM3356@e)) (let ((kM3360@ls/false (kM3077@syntax-dispatch kM335e@t '(_ #(each (any any)) any . each-any)))) (if kM3360@ls/false (apply (lambda (kM3362@lhs* kM3363@rhs* kM3364@b kM3365@b*) (if (not (kM2e78@valid-bound-ids? kM3362@lhs*)) (kM3031@invalid-fmls-error kM3356@e kM3362@lhs*) (let ((kM336a@lex* (map kM2df8@gen-lexical kM3362@lhs*)) (kM336b@lab* (map kM2dfc@gen-label kM3362@lhs*))) (let ((kM336e@rib (kM2e30@make-full-rib kM3362@lhs* kM336b@lab*)) (kM336f@r (kM3009@add-lexicals kM336b@lab* kM336a@lex* kM3357@r))) (let ((kM3372@body (kM30af@chi-internal (kM2e5c@add-subst kM336e@rib (cons kM3364@b kM3365@b*)) kM336f@r kM3358@mr)) (kM3373@rhs* (kM3095@chi-expr* (map (lambda (kM3376@x) (kM2e5c@add-subst kM336e@rib kM3376@x)) kM3363@rhs*) kM336f@r kM3358@mr))) (kM3359@build '#f kM336a@lex* kM3373@rhs* kM3372@body)))))) kM3360@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM335e@t)))))) (set! kM4b17@kM300b@letrec-helper kM300b@letrec-helper) (set! kM300d@let-transformer (lambda (kM3378@e kM3379@r kM337a@mr) (let ((kM337e@t kM3378@e)) (let ((kM3380@ls/false (kM3077@syntax-dispatch kM337e@t '(_ #(each (any any)) any . each-any)))) (if kM3380@ls/false (apply (lambda (kM3382@lhs* kM3383@rhs* kM3384@b kM3385@b*) (if (not (kM2e78@valid-bound-ids? kM3382@lhs*)) (kM3031@invalid-fmls-error kM3378@e kM3382@lhs*) (let ((kM338a@lex* (map kM2df8@gen-lexical kM3382@lhs*)) (kM338b@lab* (map kM2dfc@gen-label kM3382@lhs*)) (kM338c@rhs* (kM3095@chi-expr* kM3383@rhs* kM3379@r kM337a@mr))) (let ((kM3390@rib (kM2e30@make-full-rib kM3382@lhs* kM338b@lab*)) (kM3391@r (kM3009@add-lexicals kM338b@lab* kM338a@lex* kM3379@r))) (let ((kM3394@body (kM30af@chi-internal (kM2e5c@add-subst kM3390@rib (cons kM3384@b kM3385@b*)) kM3391@r kM337a@mr))) (kM2dd8@kM2d35@build-let '#f kM338a@lex* kM338c@rhs* kM3394@body)))))) kM3380@ls/false) (let ((kM3396@t kM337e@t)) (let ((kM3398@ls/false (kM3077@syntax-dispatch kM3396@t '(_ any #(each (any any)) any . each-any)))) (if kM3398@ls/false (apply (lambda (kM339a@loop kM339b@lhs* kM339c@rhs* kM339d@b kM339e@b*) (if (not (kM2e78@valid-bound-ids? kM339b@lhs*)) (kM3031@invalid-fmls-error kM3378@e kM339b@lhs*) (let ((kM33a4@lex* (map kM2df8@gen-lexical kM339b@lhs*)) (kM33a5@lab* (map kM2dfc@gen-label kM339b@lhs*)) (kM33a6@rhs* (kM3095@chi-expr* kM339c@rhs* kM3379@r kM337a@mr)) (kM33a7@loop-lex (kM2df8@gen-lexical kM339a@loop)) (kM33a8@loop-lab (kM2dfc@gen-label kM339a@loop))) (let ((kM33ae@loop-rib (kM2e30@make-full-rib (list kM339a@loop) (list kM33a8@loop-lab))) (kM33af@rib (kM2e30@make-full-rib kM339b@lhs* kM33a5@lab*)) (kM33b0@r (kM3009@add-lexicals (cons kM33a8@loop-lab kM33a5@lab*) (cons kM33a7@loop-lex kM33a4@lex*) kM3379@r))) (let ((kM33b4@body (kM30af@chi-internal (kM2e5c@add-subst kM33ae@loop-rib (kM2e5c@add-subst kM33af@rib (cons kM339d@b kM339e@b*))) kM33b0@r kM337a@mr))) (kM2dd9@kM2d37@build-named-let '#f kM33a7@loop-lex kM33a4@lex* kM33a6@rhs* kM33b4@body)))))) kM3398@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3396@t))))))))) (set! kM4b18@kM300d@let-transformer kM300d@let-transformer) (set! kM300f@letrec-transformer (lambda (kM33b6@e kM33b7@r kM33b8@mr) (kM300b@letrec-helper kM33b6@e kM33b7@r kM33b8@mr kM2dd7@kM2d33@build-letrec))) (set! kM4b19@kM300f@letrec-transformer kM300f@letrec-transformer) (set! kM3011@letrec*-transformer (lambda (kM33bc@e kM33bd@r kM33be@mr) (kM300b@letrec-helper kM33bc@e kM33bd@r kM33be@mr kM2dda@kM2d39@build-letrec*))) (set! kM4b1a@kM3011@letrec*-transformer kM3011@letrec*-transformer) (set! kM3013@fluid-let-syntax-transformer (lambda (kM33c2@e kM33c3@r kM33c4@mr) (let ((kM33c9@lookup '#f)) (begin (set! kM33c9@lookup (lambda (kM33dc@x) (or (kM2e86@id->label kM33dc@x) (kM3157@syntax-violation '#f '"unbound identifier" kM33c2@e kM33dc@x)))) (let ((kM33ca@t kM33c2@e)) (let ((kM33cc@ls/false (kM3077@syntax-dispatch kM33ca@t '(_ #(each (any any)) any . each-any)))) (if kM33cc@ls/false (apply (lambda (kM33ce@lhs* kM33cf@rhs* kM33d0@b kM33d1@b*) (if (not (kM2e78@valid-bound-ids? kM33ce@lhs*)) (kM3031@invalid-fmls-error kM33c2@e kM33ce@lhs*) (let ((kM33d6@lab* (map kM33c9@lookup kM33ce@lhs*)) (kM33d7@rhs* (map (lambda (kM33da@x) (kM2ea8@make-eval-transformer (kM30d1@expand-transformer kM33da@x kM33c4@mr))) kM33cf@rhs*))) (kM30af@chi-internal (cons kM33d0@b kM33d1@b*) (append (map cons kM33d6@lab* kM33d7@rhs*) kM33c3@r) (append (map cons kM33d6@lab* kM33d7@rhs*) kM33c4@mr))))) kM33cc@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM33ca@t)))))))) (set! kM4b1b@kM3013@fluid-let-syntax-transformer kM3013@fluid-let-syntax-transformer) (set! kM3015@type-descriptor-transformer (lambda (kM33de@e kM33df@r kM33e0@mr) (let ((kM33e4@t kM33de@e)) (let ((kM33e6@ls/false (kM3077@syntax-dispatch kM33e4@t '(_ any)))) (if (and kM33e6@ls/false (apply (lambda (kM33e8@id) (kM2e70@id? kM33e8@id)) kM33e6@ls/false)) (apply (lambda (kM33ea@id) (let ((kM33ec@lab (kM2e86@id->label kM33ea@id))) (let ((kM33ee@b (kM2e88@label->binding kM33ec@lab kM33df@r))) (let ((kM33f0@type (kM2e8c@binding-type kM33ee@b))) (begin (if (not kM33ec@lab) (kM2e90@raise-unbound-error kM33ea@id) (void)) (if (not (and (eq? kM33f0@type '$rtd) (not (list? (kM2e8e@binding-value kM33ee@b))))) (kM3157@syntax-violation '#f '"not a record type" kM33de@e) (void)) (list 'quote (kM2e8e@binding-value kM33ee@b))))))) kM33e6@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM33e4@t)))))) (set! kM4b1c@kM3015@type-descriptor-transformer kM3015@type-descriptor-transformer) (set! kM3017@record-type-descriptor-transformer (lambda (kM33f2@e kM33f3@r kM33f4@mr) (let ((kM33f8@t kM33f2@e)) (let ((kM33fa@ls/false (kM3077@syntax-dispatch kM33f8@t '(_ any)))) (if (and kM33fa@ls/false (apply (lambda (kM33fc@id) (kM2e70@id? kM33fc@id)) kM33fa@ls/false)) (apply (lambda (kM33fe@id) (let ((kM3400@lab (kM2e86@id->label kM33fe@id))) (let ((kM3402@b (kM2e88@label->binding kM3400@lab kM33f3@r))) (let ((kM3404@type (kM2e8c@binding-type kM3402@b))) (begin (if (not kM3400@lab) (kM2e90@raise-unbound-error kM33fe@id) (void)) (if (not (and (eq? kM3404@type '$rtd) (list? (kM2e8e@binding-value kM3402@b)))) (kM3157@syntax-violation '#f '"not a record type" kM33f2@e) (void)) (kM3099@chi-expr (car (kM2e8e@binding-value kM3402@b)) kM33f3@r kM33f4@mr)))))) kM33fa@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM33f8@t)))))) (set! kM4b1d@kM3017@record-type-descriptor-transformer kM3017@record-type-descriptor-transformer) (set! kM3019@record-constructor-descriptor-transformer (lambda (kM3406@e kM3407@r kM3408@mr) (let ((kM340c@t kM3406@e)) (let ((kM340e@ls/false (kM3077@syntax-dispatch kM340c@t '(_ any)))) (if (and kM340e@ls/false (apply (lambda (kM3410@id) (kM2e70@id? kM3410@id)) kM340e@ls/false)) (apply (lambda (kM3412@id) (let ((kM3414@lab (kM2e86@id->label kM3412@id))) (let ((kM3416@b (kM2e88@label->binding kM3414@lab kM3407@r))) (let ((kM3418@type (kM2e8c@binding-type kM3416@b))) (begin (if (not kM3414@lab) (kM2e90@raise-unbound-error kM3412@id) (void)) (if (not (and (eq? kM3418@type '$rtd) (list? (kM2e8e@binding-value kM3416@b)))) (kM3157@syntax-violation '#f '"invalid type" kM3406@e) (void)) (kM3099@chi-expr (cadr (kM2e8e@binding-value kM3416@b)) kM3407@r kM3408@mr)))))) kM340e@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM340c@t)))))) (set! kM4b1e@kM3019@record-constructor-descriptor-transformer kM3019@record-constructor-descriptor-transformer) (set! kM301b@when-macro (lambda (kM341a@e) (let ((kM341c@t kM341a@e)) (let ((kM341e@ls/false (kM3077@syntax-dispatch kM341c@t '(_ any any . each-any)))) (if kM341e@ls/false (apply (lambda (kM3420@test kM3421@e kM3422@e*) (kM302d@bless (list 'if kM3420@test (cons 'begin (cons kM3421@e kM3422@e*))))) kM341e@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM341c@t)))))) (set! kM4b1f@kM301b@when-macro kM301b@when-macro) (set! kM301d@unless-macro (lambda (kM3426@e) (let ((kM3428@t kM3426@e)) (let ((kM342a@ls/false (kM3077@syntax-dispatch kM3428@t '(_ any any . each-any)))) (if kM342a@ls/false (apply (lambda (kM342c@test kM342d@e kM342e@e*) (kM302d@bless (list 'if (list 'not kM342c@test) (cons 'begin (cons kM342d@e kM342e@e*))))) kM342a@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3428@t)))))) (set! kM4b20@kM301d@unless-macro kM301d@unless-macro) (set! kM301f@if-transformer (lambda (kM3432@e kM3433@r kM3434@mr) (let ((kM3438@t kM3432@e)) (let ((kM343a@ls/false (kM3077@syntax-dispatch kM3438@t '(_ any any any)))) (if kM343a@ls/false (apply (lambda (kM343c@e0 kM343d@e1 kM343e@e2) (list 'if (kM3099@chi-expr kM343c@e0 kM3433@r kM3434@mr) (kM3099@chi-expr kM343d@e1 kM3433@r kM3434@mr) (kM3099@chi-expr kM343e@e2 kM3433@r kM3434@mr))) kM343a@ls/false) (let ((kM3442@t kM3438@t)) (let ((kM3444@ls/false (kM3077@syntax-dispatch kM3442@t '(_ any any)))) (if kM3444@ls/false (apply (lambda (kM3446@e0 kM3447@e1) (list 'if (kM3099@chi-expr kM3446@e0 kM3433@r kM3434@mr) (kM3099@chi-expr kM3447@e1 kM3433@r kM3434@mr) (kM2dd6@kM2d31@build-void))) kM3444@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3442@t))))))))) (set! kM4b21@kM301f@if-transformer kM301f@if-transformer) (set! kM3021@and-transformer (lambda (kM344a@e kM344b@r kM344c@mr) (let ((kM3450@t kM344a@e)) (let ((kM3452@ls/false (kM3077@syntax-dispatch kM3450@t '(_ . each-any)))) (if kM3452@ls/false (apply (lambda (kM3454@e*) (cons 'and (kM3095@chi-expr* kM3454@e* kM344b@r kM344c@mr))) kM3452@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3450@t)))))) (set! kM4b22@kM3021@and-transformer kM3021@and-transformer) (set! kM3023@or-transformer (lambda (kM3456@e kM3457@r kM3458@mr) (let ((kM345c@t kM3456@e)) (let ((kM345e@ls/false (kM3077@syntax-dispatch kM345c@t '(_ . each-any)))) (if kM345e@ls/false (apply (lambda (kM3460@e*) (cons 'or (kM3095@chi-expr* kM3460@e* kM3457@r kM3458@mr))) kM345e@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM345c@t)))))) (set! kM4b23@kM3023@or-transformer kM3023@or-transformer) (set! kM3025@case-macro (lambda (kM3462@e) (let ((kM3465@build-last '#f) (kM3467@build-one '#f)) (begin (set! kM3465@build-last (lambda (kM348c@cls) (let ((kM348e@t kM348c@cls)) (let ((kM3490@ls/false (kM3077@syntax-dispatch kM348e@t '(#(scheme-id else) any . each-any)))) (if kM3490@ls/false (apply (lambda (kM3492@e kM3493@e*) (cons 'begin (cons kM3492@e kM3493@e*))) kM3490@ls/false) (let ((kM3496@t kM348e@t)) (let ((kM3498@ls/false (kM3077@syntax-dispatch kM3496@t '_))) (if kM3498@ls/false (apply (lambda () (kM3467@build-one kM348c@cls '(if #f #f))) kM3498@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3496@t))))))))) (set! kM3467@build-one (lambda (kM347e@cls kM347f@k) (let ((kM3482@t kM347e@cls)) (let ((kM3484@ls/false (kM3077@syntax-dispatch kM3482@t '(each-any any . each-any)))) (if kM3484@ls/false (apply (lambda (kM3486@d* kM3487@e kM3488@e*) (list 'if (list 'memv 't (list 'quote kM3486@d*)) (cons 'begin (cons kM3487@e kM3488@e*)) kM347f@k)) kM3484@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3482@t)))))) (let ((kM3468@t kM3462@e)) (let ((kM346a@ls/false (kM3077@syntax-dispatch kM3468@t '(_ any)))) (if kM346a@ls/false (apply (lambda (kM346c@expr) (kM302d@bless (cons 'let (cons (list (list 't kM346c@expr)) '((if #f #f)))))) kM346a@ls/false) (let ((kM346e@t kM3468@t)) (let ((kM3470@ls/false (kM3077@syntax-dispatch kM346e@t '(_ any any . each-any)))) (if kM3470@ls/false (apply (lambda (kM3472@expr kM3473@cls kM3474@cls*) (kM302d@bless (list 'let (list (list 't kM3472@expr)) (let kM347c@f ((kM3478@cls kM3473@cls) (kM3479@cls* kM3474@cls*)) (if (null? kM3479@cls*) (kM3465@build-last kM3478@cls) (kM3467@build-one kM3478@cls (kM347c@f (car kM3479@cls*) (cdr kM3479@cls*)))))))) kM3470@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM346e@t))))))))))) (set! kM4b24@kM3025@case-macro kM3025@case-macro) (set! kM3027@quote-transformer (lambda (kM349a@e kM349b@r kM349c@mr) (let ((kM34a0@t kM349a@e)) (let ((kM34a2@ls/false (kM3077@syntax-dispatch kM34a0@t '(_ any)))) (if kM34a2@ls/false (apply (lambda (kM34a4@datum) (list 'quote (kM2e84@stx->datum kM34a4@datum))) kM34a2@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM34a0@t)))))) (set! kM4b25@kM3027@quote-transformer kM3027@quote-transformer) (set! kM3029@case-lambda-transformer (lambda (kM34a6@e kM34a7@r kM34a8@mr) (let ((kM34ac@t kM34a6@e)) (let ((kM34ae@ls/false (kM3077@syntax-dispatch kM34ac@t '(_ . #(each (any any . each-any)))))) (if kM34ae@ls/false (apply (lambda (kM34b0@fmls* kM34b1@b* kM34b2@b**) (call-with-values (lambda () (kM30a1@chi-lambda-clause* kM34a6@e kM34b0@fmls* (map cons kM34b1@b* kM34b2@b**) kM34a7@r kM34a8@mr)) (lambda (kM34ba@kM34b7 kM34bb@kM34b9) (let ((kM34be@body* kM34bb@kM34b9) (kM34bf@fmls* kM34ba@kM34b7)) (kM2dd4@kM2d01@build-case-lambda '#f kM34bf@fmls* kM34be@body*))))) kM34ae@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM34ac@t)))))) (set! kM4b26@kM3029@case-lambda-transformer kM3029@case-lambda-transformer) (set! kM302b@lambda-transformer (lambda (kM34c2@e kM34c3@r kM34c4@mr) (let ((kM34c8@t kM34c2@e)) (let ((kM34ca@ls/false (kM3077@syntax-dispatch kM34c8@t '(_ any any . each-any)))) (if kM34ca@ls/false (apply (lambda (kM34cc@fmls kM34cd@b kM34ce@b*) (call-with-values (lambda () (kM309f@chi-lambda-clause kM34c2@e kM34cc@fmls (cons kM34cd@b kM34ce@b*) kM34c3@r kM34c4@mr)) (lambda (kM34d6@kM34d3 kM34d7@kM34d5) (let ((kM34da@body kM34d7@kM34d5) (kM34db@fmls kM34d6@kM34d3)) (kM2dd3@kM2cff@build-lambda '#f kM34db@fmls kM34da@body))))) kM34ca@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM34c8@t)))))) (set! kM4b27@kM302b@lambda-transformer kM302b@lambda-transformer) (set! kM302d@bless (lambda (kM34de@x) (kM2e58@mkstx (let kM34e2@f ((kM34e0@x kM34de@x)) (if (kM2e3c@stx? kM34e0@x) kM34e0@x (if (pair? kM34e0@x) (cons (kM34e2@f (car kM34e0@x)) (kM34e2@f (cdr kM34e0@x))) (if (symbol? kM34e0@x) (kM2fff@scheme-stx kM34e0@x) (if (vector? kM34e0@x) (vector-map kM34e2@f kM34e0@x) kM34e0@x))))) '() '() '()))) (set! kM4b28@kM302d@bless kM302d@bless) (set! kM302f@with-syntax-macro (lambda (kM34e4@e) (let ((kM34e6@t kM34e4@e)) (let ((kM34e8@ls/false (kM3077@syntax-dispatch kM34e6@t '(_ #(each (any any)) any . each-any)))) (if kM34e8@ls/false (apply (lambda (kM34ea@pat* kM34eb@expr* kM34ec@b kM34ed@b*) (let ((kM34f2@idn* (let kM34f6@f ((kM34f4@pat* kM34ea@pat*)) (if (null? kM34f4@pat*) '() (call-with-values (lambda () (kM3075@convert-pattern (car kM34f4@pat*) '())) (lambda (kM34fc@kM34f9 kM34fd@kM34fb) (let ((kM3500@idn* kM34fd@kM34fb) (kM3501@pat kM34fc@kM34f9)) (append kM3500@idn* (kM34f6@f (cdr kM34f4@pat*)))))))))) (begin (kM309d@verify-formals (map car kM34f2@idn*) kM34e4@e) (let ((kM3504@t* (kM3145@generate-temporaries kM34eb@expr*))) (kM302d@bless (list 'let (map list kM3504@t* kM34eb@expr*) (let kM350a@f ((kM3506@pat* kM34ea@pat*) (kM3507@t* kM3504@t*)) (if (null? kM3506@pat*) (cons 'begin (cons '#f (cons kM34ec@b kM34ed@b*))) (list 'syntax-case (car kM3507@t*) '() (list (car kM3506@pat*) (kM350a@f (cdr kM3506@pat*) (cdr kM3507@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car kM3506@pat*)) (car kM3507@t*)))))))))))) kM34e8@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM34e6@t)))))) (set! kM4b29@kM302f@with-syntax-macro kM302f@with-syntax-macro) (set! kM3031@invalid-fmls-error (lambda (kM350c@stx kM350d@fmls) (let ((kM3510@t kM350d@fmls)) (let ((kM3512@ls/false (kM3077@syntax-dispatch kM3510@t '#(each+ any () any)))) (if kM3512@ls/false (apply (lambda (kM3514@id* kM3515@last) (let kM351a@f ((kM3518@id* (if (kM2e70@id? kM3515@last) (cons kM3515@last kM3514@id*) (if (kM2e66@syntax-null? kM3515@last) kM3514@id* (kM3157@syntax-violation '#f '"not an identifier" kM350c@stx kM3515@last))))) (if (null? kM3518@id*) (values) (if (not (kM2e70@id? (car kM3518@id*))) (kM3157@syntax-violation '#f '"not an identifier" kM350c@stx (car kM3518@id*)) (begin (kM351a@f (cdr kM3518@id*)) (if (kM2e7c@bound-id-member? (car kM3518@id*) (cdr kM3518@id*)) (kM3157@syntax-violation '#f '"duplicate binding" kM350c@stx (car kM3518@id*)) (void))))))) kM3512@ls/false) (let ((kM351c@t kM3510@t)) (let ((kM351e@ls/false (kM3077@syntax-dispatch kM351c@t '_))) (if kM351e@ls/false (apply (lambda () (kM3157@syntax-violation '#f '"malformed binding form" kM350c@stx kM350d@fmls)) kM351e@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM351c@t))))))))) (set! kM4b2a@kM3031@invalid-fmls-error kM3031@invalid-fmls-error) (set! kM3033@let-macro (lambda (kM3520@stx) (let ((kM3522@t kM3520@stx)) (let ((kM3524@ls/false (kM3077@syntax-dispatch kM3522@t '(_ #(each (any any)) any . each-any)))) (if kM3524@ls/false (apply (lambda (kM3526@lhs* kM3527@rhs* kM3528@b kM3529@b*) (if (kM2e78@valid-bound-ids? kM3526@lhs*) (kM302d@bless (cons (cons 'lambda (cons kM3526@lhs* (cons kM3528@b kM3529@b*))) kM3527@rhs*)) (kM3031@invalid-fmls-error kM3520@stx kM3526@lhs*))) kM3524@ls/false) (let ((kM352e@t kM3522@t)) (let ((kM3530@ls/false (kM3077@syntax-dispatch kM352e@t '(_ any #(each (any any)) any . each-any)))) (if (and kM3530@ls/false (apply (lambda (kM3532@f kM3533@lhs* kM3534@rhs* kM3535@b kM3536@b*) (kM2e70@id? kM3532@f)) kM3530@ls/false)) (apply (lambda (kM353c@f kM353d@lhs* kM353e@rhs* kM353f@b kM3540@b*) (if (kM2e78@valid-bound-ids? kM353d@lhs*) (kM302d@bless (cons (list 'letrec (list (list kM353c@f (cons 'lambda (cons kM353d@lhs* (cons kM353f@b kM3540@b*))))) kM353c@f) kM353e@rhs*)) (kM3031@invalid-fmls-error kM3520@stx kM353d@lhs*))) kM3530@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM352e@t))))))))) (set! kM4b2b@kM3033@let-macro kM3033@let-macro) (set! kM3035@let-values-macro (lambda (kM3546@stx) (let ((kM3549@rename '#f) (kM354b@rename* '#f)) (begin (set! kM3549@rename (lambda (kM35ae@x kM35af@old* kM35b0@new*) (begin (if (not (kM2e70@id? kM35ae@x)) (kM3157@syntax-violation '#f '"not an indentifier" kM3546@stx kM35ae@x) (void)) (if (kM2e7c@bound-id-member? kM35ae@x kM35af@old*) (kM3157@syntax-violation '#f '"duplicate binding" kM3546@stx kM35ae@x) (void)) (let ((kM35b4@y (gensym (kM315d@syntax->datum kM35ae@x)))) (values kM35b4@y (cons kM35ae@x kM35af@old*) (cons kM35b4@y kM35b0@new*)))))) (set! kM354b@rename* (lambda (kM359c@x* kM359d@old* kM359e@new*) (if (null? kM359c@x*) (values '() kM359d@old* kM359e@new*) (call-with-values (lambda () (kM3549@rename (car kM359c@x*) kM359d@old* kM359e@new*)) (lambda (kM35a2@x kM35a3@old* kM35a4@new*) (call-with-values (lambda () (kM354b@rename* (cdr kM359c@x*) kM35a3@old* kM35a4@new*)) (lambda (kM35a8@x* kM35a9@old* kM35aa@new*) (values (cons kM35a2@x kM35a8@x*) kM35a9@old* kM35aa@new*)))))))) (let ((kM354c@t kM3546@stx)) (let ((kM354e@ls/false (kM3077@syntax-dispatch kM354c@t '(_ () any . each-any)))) (if kM354e@ls/false (apply (lambda (kM3550@b kM3551@b*) (cons* (kM302d@bless 'let) '() kM3550@b kM3551@b*)) kM354e@ls/false) (let ((kM3554@t kM354c@t)) (let ((kM3556@ls/false (kM3077@syntax-dispatch kM3554@t '(_ #(each (any any)) any . each-any)))) (if kM3556@ls/false (apply (lambda (kM3558@lhs* kM3559@rhs* kM355a@b kM355b@b*) (kM302d@bless (let kM3568@f ((kM3560@lhs* kM3558@lhs*) (kM3561@rhs* kM3559@rhs*) (kM3562@old* '()) (kM3563@new* '())) (if (null? kM3560@lhs*) (cons 'let (cons (map list kM3562@old* kM3563@new*) (cons kM355a@b kM355b@b*))) (let ((kM356a@t (car kM3560@lhs*))) (let ((kM356c@ls/false (kM3077@syntax-dispatch kM356a@t 'each-any))) (if kM356c@ls/false (apply (lambda (kM356e@x*) (call-with-values (lambda () (kM354b@rename* kM356e@x* kM3562@old* kM3563@new*)) (lambda (kM3576@kM3571 kM3577@kM3573 kM3578@kM3575) (let ((kM357c@new* kM3578@kM3575) (kM357d@old* kM3577@kM3573) (kM357e@y* kM3576@kM3571)) (list 'call-with-values (list 'lambda '() (car kM3561@rhs*)) (list 'lambda kM357e@y* (kM3568@f (cdr kM3560@lhs*) (cdr kM3561@rhs*) kM357d@old* kM357c@new*))))))) kM356c@ls/false) (let ((kM3582@t kM356a@t)) (let ((kM3584@ls/false (kM3077@syntax-dispatch kM3582@t '#(each+ any () any)))) (if kM3584@ls/false (apply (lambda (kM3586@x* kM3587@x) (call-with-values (lambda () (kM3549@rename kM3587@x kM3562@old* kM3563@new*)) (lambda (kM358a@y kM358b@old* kM358c@new*) (call-with-values (lambda () (kM354b@rename* kM3586@x* kM358b@old* kM358c@new*)) (lambda (kM3590@y* kM3591@old* kM3592@new*) (list 'call-with-values (list 'lambda '() (car kM3561@rhs*)) (list 'lambda (append kM3590@y* kM358a@y) (kM3568@f (cdr kM3560@lhs*) (cdr kM3561@rhs*) kM3591@old* kM3592@new*)))))))) kM3584@ls/false) (let ((kM3596@t kM3582@t)) (let ((kM3598@ls/false (kM3077@syntax-dispatch kM3596@t 'any))) (if kM3598@ls/false (apply (lambda (kM359a@others) (kM3157@syntax-violation '#f '"malformed bindings" kM3546@stx kM359a@others)) kM3598@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3596@t)))))))))))))) kM3556@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3554@t))))))))))) (set! kM4b2c@kM3035@let-values-macro kM3035@let-values-macro) (set! kM3037@let*-values-macro (lambda (kM35b6@stx) (let ((kM35b9@check '#f)) (begin (set! kM35b9@check (lambda (kM35e8@x*) (if (not (null? kM35e8@x*)) (let ((kM35ea@x (car kM35e8@x*))) (begin (if (not (kM2e70@id? kM35ea@x)) (kM3157@syntax-violation '#f '"not an identifier" kM35b6@stx kM35ea@x) (void)) (kM35b9@check (cdr kM35e8@x*)) (if (kM2e7c@bound-id-member? kM35ea@x (cdr kM35e8@x*)) (kM3157@syntax-violation '#f '"duplicate identifier" kM35b6@stx kM35ea@x) (void)))) (void)))) (let ((kM35ba@t kM35b6@stx)) (let ((kM35bc@ls/false (kM3077@syntax-dispatch kM35ba@t '(_ () any . each-any)))) (if kM35bc@ls/false (apply (lambda (kM35be@b kM35bf@b*) (cons* (kM302d@bless 'let) '() kM35be@b kM35bf@b*)) kM35bc@ls/false) (let ((kM35c2@t kM35ba@t)) (let ((kM35c4@ls/false (kM3077@syntax-dispatch kM35c2@t '(_ #(each (any any)) any . each-any)))) (if kM35c4@ls/false (apply (lambda (kM35c6@lhs* kM35c7@rhs* kM35c8@b kM35c9@b*) (kM302d@bless (let kM35d2@f ((kM35ce@lhs* kM35c6@lhs*) (kM35cf@rhs* kM35c7@rhs*)) (if (null? kM35ce@lhs*) (cons 'begin (cons kM35c8@b kM35c9@b*)) (let ((kM35d4@t (car kM35ce@lhs*))) (let ((kM35d6@ls/false (kM3077@syntax-dispatch kM35d4@t 'each-any))) (if kM35d6@ls/false (apply (lambda (kM35d8@x*) (begin (kM35b9@check kM35d8@x*) (list 'call-with-values (list 'lambda '() (car kM35cf@rhs*)) (list 'lambda kM35d8@x* (kM35d2@f (cdr kM35ce@lhs*) (cdr kM35cf@rhs*)))))) kM35d6@ls/false) (let ((kM35da@t kM35d4@t)) (let ((kM35dc@ls/false (kM3077@syntax-dispatch kM35da@t '#(each+ any () any)))) (if kM35dc@ls/false (apply (lambda (kM35de@x* kM35df@x) (begin (kM35b9@check (cons kM35df@x kM35de@x*)) (list 'call-with-values (list 'lambda '() (car kM35cf@rhs*)) (list 'lambda (append kM35de@x* kM35df@x) (kM35d2@f (cdr kM35ce@lhs*) (cdr kM35cf@rhs*)))))) kM35dc@ls/false) (let ((kM35e2@t kM35da@t)) (let ((kM35e4@ls/false (kM3077@syntax-dispatch kM35e2@t 'any))) (if kM35e4@ls/false (apply (lambda (kM35e6@others) (kM3157@syntax-violation '#f '"malformed bindings" kM35b6@stx kM35e6@others)) kM35e4@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM35e2@t)))))))))))))) kM35c4@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM35c2@t))))))))))) (set! kM4b2d@kM3037@let*-values-macro kM3037@let*-values-macro) (set! kM3039@trace-lambda-macro (lambda (kM35ec@stx) (let ((kM35ee@t kM35ec@stx)) (let ((kM35f0@ls/false (kM3077@syntax-dispatch kM35ee@t '(_ any each-any any . each-any)))) (if kM35f0@ls/false (apply (lambda (kM35f2@who kM35f3@fmls kM35f4@b kM35f5@b*) (if (kM2e78@valid-bound-ids? kM35f3@fmls) (kM302d@bless (list 'make-traced-procedure (list 'quote kM35f2@who) (cons 'lambda (cons kM35f3@fmls (cons kM35f4@b kM35f5@b*))))) (kM3031@invalid-fmls-error kM35ec@stx kM35f3@fmls))) kM35f0@ls/false) (let ((kM35fa@t kM35ee@t)) (let ((kM35fc@ls/false (kM3077@syntax-dispatch kM35fa@t '(_ any #(each+ any () any) any . each-any)))) (if kM35fc@ls/false (apply (lambda (kM35fe@who kM35ff@fmls kM3600@last kM3601@b kM3602@b*) (if (kM2e78@valid-bound-ids? (cons kM3600@last kM35ff@fmls)) (kM302d@bless (list 'make-traced-procedure (list 'quote kM35fe@who) (cons 'lambda (cons (append kM35ff@fmls kM3600@last) (cons kM3601@b kM3602@b*))))) (kM3031@invalid-fmls-error kM35ec@stx (append kM35ff@fmls kM3600@last)))) kM35fc@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM35fa@t))))))))) (set! kM4b2e@kM3039@trace-lambda-macro kM3039@trace-lambda-macro) (set! kM303b@trace-define-macro (lambda (kM3608@stx) (let ((kM360a@t kM3608@stx)) (let ((kM360c@ls/false (kM3077@syntax-dispatch kM360a@t '(_ (any . each-any) any . each-any)))) (if kM360c@ls/false (apply (lambda (kM360e@who kM360f@fmls kM3610@b kM3611@b*) (if (kM2e78@valid-bound-ids? kM360f@fmls) (kM302d@bless (list 'define kM360e@who (list 'make-traced-procedure (list 'quote kM360e@who) (cons 'lambda (cons kM360f@fmls (cons kM3610@b kM3611@b*)))))) (kM3031@invalid-fmls-error kM3608@stx kM360f@fmls))) kM360c@ls/false) (let ((kM3616@t kM360a@t)) (let ((kM3618@ls/false (kM3077@syntax-dispatch kM3616@t '(_ (any . #(each+ any () any)) any . each-any)))) (if kM3618@ls/false (apply (lambda (kM361a@who kM361b@fmls kM361c@last kM361d@b kM361e@b*) (if (kM2e78@valid-bound-ids? (cons kM361c@last kM361b@fmls)) (kM302d@bless (list 'define kM361a@who (list 'make-traced-procedure (list 'quote kM361a@who) (cons 'lambda (cons (append kM361b@fmls kM361c@last) (cons kM361d@b kM361e@b*)))))) (kM3031@invalid-fmls-error kM3608@stx (append kM361b@fmls kM361c@last)))) kM3618@ls/false) (let ((kM3624@t kM3616@t)) (let ((kM3626@ls/false (kM3077@syntax-dispatch kM3624@t '(_ any any)))) (if kM3626@ls/false (apply (lambda (kM3628@who kM3629@expr) (if (kM2e70@id? kM3628@who) (kM302d@bless (list 'define kM3628@who (list 'let (list (list 'v kM3629@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote kM3628@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (kM3157@syntax-violation '#f '"invalid name" kM3608@stx))) kM3626@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3624@t)))))))))))) (set! kM4b2f@kM303b@trace-define-macro kM303b@trace-define-macro) (set! kM303d@trace-define-syntax-macro (lambda (kM362c@stx) (let ((kM362e@t kM362c@stx)) (let ((kM3630@ls/false (kM3077@syntax-dispatch kM362e@t '(_ any any)))) (if kM3630@ls/false (apply (lambda (kM3632@who kM3633@expr) (if (kM2e70@id? kM3632@who) (kM302d@bless (list 'define-syntax kM3632@who (list 'make-traced-macro (list 'quote kM3632@who) kM3633@expr))) (kM3157@syntax-violation '#f '"invalid name" kM362c@stx))) kM3630@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM362e@t)))))) (set! kM4b30@kM303d@trace-define-syntax-macro kM303d@trace-define-syntax-macro) (set! kM303f@trace-let/rec-syntax (lambda (kM3636@who) (lambda (kM3638@stx) (let ((kM363a@t kM3638@stx)) (let ((kM363c@ls/false (kM3077@syntax-dispatch kM363a@t '(_ #(each (any any)) any . each-any)))) (if kM363c@ls/false (apply (lambda (kM363e@lhs* kM363f@rhs* kM3640@b kM3641@b*) (if (kM2e78@valid-bound-ids? kM363e@lhs*) (let ((kM3646@rhs* (map (lambda (kM3648@lhs kM3649@rhs) (list 'make-traced-macro (list 'quote kM3648@lhs) kM3649@rhs)) kM363e@lhs* kM363f@rhs*))) (kM302d@bless (cons kM3636@who (cons (map list kM363e@lhs* kM3646@rhs*) (cons kM3640@b kM3641@b*))))) (kM3031@invalid-fmls-error kM3638@stx kM363e@lhs*))) kM363c@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM363a@t))))))) (set! kM4b31@kM303f@trace-let/rec-syntax kM303f@trace-let/rec-syntax) (set! kM3041@trace-let-syntax-macro (kM303f@trace-let/rec-syntax 'let-syntax)) (set! kM4b32@kM3041@trace-let-syntax-macro kM3041@trace-let-syntax-macro) (set! kM3043@trace-letrec-syntax-macro (kM303f@trace-let/rec-syntax 'letrec-syntax)) (set! kM4b33@kM3043@trace-letrec-syntax-macro kM3043@trace-letrec-syntax-macro) (set! kM3045@guard-macro (lambda (kM364c@x) (let ((kM364f@gen-clauses '#f)) (begin (set! kM364f@gen-clauses (lambda (kM3666@con kM3667@outerk kM3668@clause*) (let ((kM366d@f '#f) (kM366f@f* '#f)) (begin (set! kM366d@f (lambda (kM36a6@x kM36a7@k) (let ((kM36aa@t kM36a6@x)) (let ((kM36ac@ls/false (kM3077@syntax-dispatch kM36aa@t '(any #(scheme-id =>) any)))) (if kM36ac@ls/false (apply (lambda (kM36ae@e kM36af@p) (let ((kM36b2@t (gensym))) (list 'let (list (list kM36b2@t kM36ae@e)) (list 'if kM36b2@t (list kM36af@p kM36b2@t) kM36a7@k)))) kM36ac@ls/false) (let ((kM36b4@t kM36aa@t)) (let ((kM36b6@ls/false (kM3077@syntax-dispatch kM36b4@t '(any)))) (if kM36b6@ls/false (apply (lambda (kM36b8@e) (let ((kM36ba@t (gensym))) (list 'let (list (list kM36ba@t kM36b8@e)) (list 'if kM36ba@t kM36ba@t kM36a7@k)))) kM36b6@ls/false) (let ((kM36bc@t kM36b4@t)) (let ((kM36be@ls/false (kM3077@syntax-dispatch kM36bc@t '(any any . each-any)))) (if kM36be@ls/false (apply (lambda (kM36c0@e kM36c1@v kM36c2@v*) (list 'if kM36c0@e (cons 'begin (cons kM36c1@v kM36c2@v*)) kM36a7@k)) kM36be@ls/false) (let ((kM36c6@t kM36bc@t)) (let ((kM36c8@ls/false (kM3077@syntax-dispatch kM36c6@t '_))) (if kM36c8@ls/false (apply (lambda () (kM3157@syntax-violation '#f '"invalid guard clause" kM36a6@x)) kM36c8@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM36c6@t))))))))))))))) (set! kM366f@f* (lambda (kM367c@x*) (let ((kM367e@t kM367c@x*)) (let ((kM3680@ls/false (kM3077@syntax-dispatch kM367e@t '()))) (if kM3680@ls/false (apply (lambda () (let ((kM3682@g (gensym))) (values (list kM3682@g (list 'lambda '() (list 'raise-continuable kM3666@con))) kM3682@g))) kM3680@ls/false) (let ((kM3684@t kM367e@t)) (let ((kM3686@ls/false (kM3077@syntax-dispatch kM3684@t '((#(scheme-id else) any . each-any))))) (if kM3686@ls/false (apply (lambda (kM3688@e kM3689@e*) (values (cons 'begin (cons kM3688@e kM3689@e*)) '#f)) kM3686@ls/false) (let ((kM368c@t kM3684@t)) (let ((kM368e@ls/false (kM3077@syntax-dispatch kM368c@t '(any . any)))) (if kM368e@ls/false (apply (lambda (kM3690@cls kM3691@cls*) (call-with-values (lambda () (kM366f@f* kM3691@cls*)) (lambda (kM3698@kM3695 kM3699@kM3697) (let ((kM369c@g kM3699@kM3697) (kM369d@e kM3698@kM3695)) (values (kM366d@f kM3690@cls kM369d@e) kM369c@g))))) kM368e@ls/false) (let ((kM36a0@t kM368c@t)) (let ((kM36a2@ls/false (kM3077@syntax-dispatch kM36a0@t 'any))) (if kM36a2@ls/false (apply (lambda (kM36a4@others) (kM3157@syntax-violation '#f '"invalid guard clause" kM36a4@others)) kM36a2@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM36a0@t))))))))))))))) (call-with-values (lambda () (kM366f@f* kM3668@clause*)) (lambda (kM3674@kM3671 kM3675@kM3673) (let ((kM3678@raisek kM3675@kM3673) (kM3679@code kM3674@kM3671)) (if kM3678@raisek (list (list 'call/cc (list 'lambda (list kM3678@raisek) (list kM3667@outerk (list 'lambda '() kM3679@code))))) (list kM3667@outerk (list 'lambda '() kM3679@code)))))))))) (let ((kM3650@t kM364c@x)) (let ((kM3652@ls/false (kM3077@syntax-dispatch kM3650@t '(_ (any . each-any) any . each-any)))) (if (and kM3652@ls/false (apply (lambda (kM3654@con kM3655@clause* kM3656@b kM3657@b*) (kM2e70@id? kM3654@con)) kM3652@ls/false)) (apply (lambda (kM365c@con kM365d@clause* kM365e@b kM365f@b*) (let ((kM3664@outerk (gensym))) (kM302d@bless (list (list 'call/cc (list 'lambda (list kM3664@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list kM365c@con) (kM364f@gen-clauses kM365c@con kM3664@outerk kM365d@clause*)) (cons 'lambda (cons '() (cons kM365e@b kM365f@b*))))))))))) kM3652@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3650@t)))))))) (set! kM4b34@kM3045@guard-macro kM3045@guard-macro) (set! kM3047@define-enumeration-macro (lambda (kM36ca@stx) (let ((kM36cd@set? '#f) (kM36cf@remove-dups '#f)) (begin (set! kM36cd@set? (lambda (kM36e6@x) (or (null? kM36e6@x) (and (not (memq (car kM36e6@x) (cdr kM36e6@x))) (kM36cd@set? (cdr kM36e6@x)))))) (set! kM36cf@remove-dups (lambda (kM36e4@ls) (if (null? kM36e4@ls) '() (cons (car kM36e4@ls) (kM36cf@remove-dups (remq (car kM36e4@ls) (cdr kM36e4@ls))))))) (let ((kM36d0@t kM36ca@stx)) (let ((kM36d2@ls/false (kM3077@syntax-dispatch kM36d0@t '(_ any each-any any)))) (if (and kM36d2@ls/false (apply (lambda (kM36d4@name kM36d5@id* kM36d6@maker) (and (kM2e70@id? kM36d4@name) (kM2e70@id? kM36d6@maker) (for-all kM2e70@id? kM36d5@id*))) kM36d2@ls/false)) (apply (lambda (kM36da@name kM36db@id* kM36dc@maker) (let ((kM36e0@name* (kM36cf@remove-dups (kM315d@syntax->datum kM36db@id*))) (kM36e1@mk (gensym))) (kM302d@bless (list 'begin (list 'define kM36e1@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote kM36e0@name*)))) (list 'define-syntax kM36da@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote kM36e0@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote kM36da@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax kM36dc@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote kM36dc@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote kM36e0@name*)) (cons 'syntax-violation (cons (list 'quote kM36dc@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons kM36e1@mk '('(n* ...))))))))))))) kM36d2@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM36d0@t)))))))) (set! kM4b35@kM3047@define-enumeration-macro kM3047@define-enumeration-macro) (set! kM3049@time-macro (lambda (kM36e8@stx) (let ((kM36ea@t kM36e8@stx)) (let ((kM36ec@ls/false (kM3077@syntax-dispatch kM36ea@t '(_ any)))) (if kM36ec@ls/false (apply (lambda (kM36ee@expr) (kM302d@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() kM36ee@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) kM36ec@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM36ea@t)))))) (set! kM4b36@kM3049@time-macro kM3049@time-macro) (set! kM304b@delay-macro (lambda (kM36f0@stx) (let ((kM36f2@t kM36f0@stx)) (let ((kM36f4@ls/false (kM3077@syntax-dispatch kM36f2@t '(_ any)))) (if kM36f4@ls/false (apply (lambda (kM36f6@expr) (kM302d@bless (list 'make-promise (list 'lambda '() kM36f6@expr)))) kM36f4@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM36f2@t)))))) (set! kM4b37@kM304b@delay-macro kM304b@delay-macro) (set! kM304d@assert-macro (lambda (kM36f8@stx) (let ((kM36fa@t kM36f8@stx)) (let ((kM36fc@ls/false (kM3077@syntax-dispatch kM36fa@t '(_ any)))) (if kM36fc@ls/false (apply (lambda (kM36fe@expr) (let ((kM3700@pos (or (kM314f@expression-position kM36f8@stx) (kM314f@expression-position kM36fe@expr)))) (kM302d@bless (list 'unless kM36fe@expr (list 'assertion-error (list 'quote kM36fe@expr) (list 'quote kM3700@pos)))))) kM36fc@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM36fa@t)))))) (set! kM4b38@kM304d@assert-macro kM304d@assert-macro) (set! kM304f@endianness-macro (lambda (kM3702@stx) (let ((kM3704@t kM3702@stx)) (let ((kM3706@ls/false (kM3077@syntax-dispatch kM3704@t '(_ any)))) (if kM3706@ls/false (apply (lambda (kM3708@e) (let ((kM370a@t (kM315d@syntax->datum kM3708@e))) (if (memv kM370a@t '(little)) (kM302d@bless ''little) (if (memv kM370a@t '(big)) (kM302d@bless ''big) (kM3157@syntax-violation '#f '"endianness must be big or little" kM3702@stx))))) kM3706@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3704@t)))))) (set! kM4b39@kM304f@endianness-macro kM304f@endianness-macro) (set! kM3051@identifier-syntax-macro (lambda (kM370c@stx) (let ((kM370e@t kM370c@stx)) (let ((kM3710@ls/false (kM3077@syntax-dispatch kM370e@t '(_ any)))) (if kM3710@ls/false (apply (lambda (kM3712@expr) (kM302d@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax kM3712@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax kM3712@expr) '((syntax (e* ...)))))))))) kM3710@ls/false) (let ((kM3714@t kM370e@t)) (let ((kM3716@ls/false (kM3077@syntax-dispatch kM3714@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and kM3716@ls/false (apply (lambda (kM3718@id1 kM3719@expr1 kM371a@id2 kM371b@expr2 kM371c@expr3) (and (kM2e70@id? kM3718@id1) (kM2e70@id? kM371a@id2) (kM2e70@id? kM371b@expr2))) kM3716@ls/false)) (apply (lambda (kM3722@id1 kM3723@expr1 kM3724@id2 kM3725@expr2 kM3726@expr3) (kM302d@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax kM3723@expr1)) (list (list 'set! 'id kM3725@expr2) (list 'syntax kM3726@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons kM3723@expr1 '(e* ...))))))))) kM3716@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3714@t))))))))) (set! kM4b3a@kM3051@identifier-syntax-macro kM3051@identifier-syntax-macro) (set! kM3053@do-macro (lambda (kM372c@stx) (let ((kM372f@bind '#f)) (begin (set! kM372f@bind (lambda (kM3746@x) (let ((kM3748@t kM3746@x)) (let ((kM374a@ls/false (kM3077@syntax-dispatch kM3748@t '(any any)))) (if kM374a@ls/false (apply (lambda (kM374c@x kM374d@init) (list kM374c@x kM374d@init kM374c@x)) kM374a@ls/false) (let ((kM3750@t kM3748@t)) (let ((kM3752@ls/false (kM3077@syntax-dispatch kM3750@t '(any any any)))) (if kM3752@ls/false (apply (lambda (kM3754@x kM3755@init kM3756@step) (list kM3754@x kM3755@init kM3756@step)) kM3752@ls/false) (let ((kM375a@t kM3750@t)) (let ((kM375c@ls/false (kM3077@syntax-dispatch kM375a@t '_))) (if kM375c@ls/false (apply (lambda () (kM3157@syntax-violation '#f '"invalid binding" kM372c@stx)) kM375c@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM375a@t)))))))))))) (let ((kM3730@t kM372c@stx)) (let ((kM3732@ls/false (kM3077@syntax-dispatch kM3730@t '(_ each-any (any . each-any) . each-any)))) (if kM3732@ls/false (apply (lambda (kM3734@binding* kM3735@test kM3736@expr* kM3737@command*) (let ((kM373c@t (map kM372f@bind kM3734@binding*))) (let ((kM373e@ls/false (kM3077@syntax-dispatch kM373c@t '#(each (any any any))))) (if kM373e@ls/false (apply (lambda (kM3740@x* kM3741@init* kM3742@step*) (if (kM2e78@valid-bound-ids? kM3740@x*) (kM302d@bless (list 'letrec (list (list 'loop (list 'lambda kM3740@x* (list 'if kM3735@test (cons 'begin (cons '(if #f #f) kM3736@expr*)) (cons 'begin (append kM3737@command* (list (cons 'loop kM3742@step*)))))))) (cons 'loop kM3741@init*))) (kM3157@syntax-violation '#f '"invalid bindings" kM372c@stx))) kM373e@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM373c@t))))) kM3732@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3730@t)))))))) (set! kM4b3b@kM3053@do-macro kM3053@do-macro) (set! kM3055@let*-macro (lambda (kM375e@stx) (let ((kM3760@t kM375e@stx)) (let ((kM3762@ls/false (kM3077@syntax-dispatch kM3760@t '(_ #(each (any any)) any . each-any)))) (if (and kM3762@ls/false (apply (lambda (kM3764@lhs* kM3765@rhs* kM3766@b kM3767@b*) (for-all kM2e70@id? kM3764@lhs*)) kM3762@ls/false)) (apply (lambda (kM376c@lhs* kM376d@rhs* kM376e@b kM376f@b*) (kM302d@bless (let kM3776@f ((kM3774@x* (map list kM376c@lhs* kM376d@rhs*))) (if (null? kM3774@x*) (cons 'let (cons '() (cons kM376e@b kM376f@b*))) (list 'let (list (car kM3774@x*)) (kM3776@f (cdr kM3774@x*))))))) kM3762@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3760@t)))))) (set! kM4b3c@kM3055@let*-macro kM3055@let*-macro) (set! kM3057@or-macro (lambda (kM3778@stx) (let ((kM377a@t kM3778@stx)) (let ((kM377c@ls/false (kM3077@syntax-dispatch kM377a@t '(_)))) (if kM377c@ls/false (apply (lambda () '#f) kM377c@ls/false) (let ((kM377e@t kM377a@t)) (let ((kM3780@ls/false (kM3077@syntax-dispatch kM377e@t '(_ any . each-any)))) (if kM3780@ls/false (apply (lambda (kM3782@e kM3783@e*) (kM302d@bless (let kM378a@f ((kM3786@e kM3782@e) (kM3787@e* kM3783@e*)) (if (null? kM3787@e*) (list 'begin '#f kM3786@e) (list 'let (list (list 't kM3786@e)) (list 'if 't 't (kM378a@f (car kM3787@e*) (cdr kM3787@e*)))))))) kM3780@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM377e@t))))))))) (set! kM4b3d@kM3057@or-macro kM3057@or-macro) (set! kM3059@and-macro (lambda (kM378c@stx) (let ((kM378e@t kM378c@stx)) (let ((kM3790@ls/false (kM3077@syntax-dispatch kM378e@t '(_)))) (if kM3790@ls/false (apply (lambda () '#t) kM3790@ls/false) (let ((kM3792@t kM378e@t)) (let ((kM3794@ls/false (kM3077@syntax-dispatch kM3792@t '(_ any . each-any)))) (if kM3794@ls/false (apply (lambda (kM3796@e kM3797@e*) (kM302d@bless (let kM379e@f ((kM379a@e kM3796@e) (kM379b@e* kM3797@e*)) (if (null? kM379b@e*) (list 'begin '#f kM379a@e) (cons 'if (cons kM379a@e (cons (kM379e@f (car kM379b@e*) (cdr kM379b@e*)) '(#f)))))))) kM3794@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3792@t))))))))) (set! kM4b3e@kM3059@and-macro kM3059@and-macro) (set! kM305b@cond-macro (lambda (kM37a0@stx) (let ((kM37a2@t kM37a0@stx)) (let ((kM37a4@ls/false (kM3077@syntax-dispatch kM37a2@t '(_ any . each-any)))) (if kM37a4@ls/false (apply (lambda (kM37a6@cls kM37a7@cls*) (kM302d@bless (let kM37ae@f ((kM37aa@cls kM37a6@cls) (kM37ab@cls* kM37a7@cls*)) (if (null? kM37ab@cls*) (let ((kM37b0@t kM37aa@cls)) (let ((kM37b2@ls/false (kM3077@syntax-dispatch kM37b0@t '(#(scheme-id else) any . each-any)))) (if kM37b2@ls/false (apply (lambda (kM37b4@e kM37b5@e*) (cons 'begin (cons kM37b4@e kM37b5@e*))) kM37b2@ls/false) (let ((kM37b8@t kM37b0@t)) (let ((kM37ba@ls/false (kM3077@syntax-dispatch kM37b8@t '(any #(scheme-id =>) any)))) (if kM37ba@ls/false (apply (lambda (kM37bc@e kM37bd@p) (list 'let (list (list 't kM37bc@e)) (list 'if 't (cons kM37bd@p '(t))))) kM37ba@ls/false) (let ((kM37c0@t kM37b8@t)) (let ((kM37c2@ls/false (kM3077@syntax-dispatch kM37c0@t '(any)))) (if kM37c2@ls/false (apply (lambda (kM37c4@e) (cons 'or (cons kM37c4@e '((if #f #f))))) kM37c2@ls/false) (let ((kM37c6@t kM37c0@t)) (let ((kM37c8@ls/false (kM3077@syntax-dispatch kM37c6@t '(any . each-any)))) (if kM37c8@ls/false (apply (lambda (kM37ca@e kM37cb@e*) (list 'if kM37ca@e (cons 'begin kM37cb@e*))) kM37c8@ls/false) (let ((kM37ce@t kM37c6@t)) (let ((kM37d0@ls/false (kM3077@syntax-dispatch kM37ce@t '_))) (if kM37d0@ls/false (apply (lambda () (kM3157@syntax-violation '#f '"invalid last clause" kM37a0@stx)) kM37d0@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM37ce@t)))))))))))))))) (let ((kM37d2@t kM37aa@cls)) (let ((kM37d4@ls/false (kM3077@syntax-dispatch kM37d2@t '(#(scheme-id else) any . each-any)))) (if kM37d4@ls/false (apply (lambda (kM37d6@e kM37d7@e*) (kM3157@syntax-violation '#f '"incorrect position of keyword else" kM37a0@stx)) kM37d4@ls/false) (let ((kM37da@t kM37d2@t)) (let ((kM37dc@ls/false (kM3077@syntax-dispatch kM37da@t '(any #(scheme-id =>) any)))) (if kM37dc@ls/false (apply (lambda (kM37de@e kM37df@p) (list 'let (list (list 't kM37de@e)) (list 'if 't (cons kM37df@p '(t)) (kM37ae@f (car kM37ab@cls*) (cdr kM37ab@cls*))))) kM37dc@ls/false) (let ((kM37e2@t kM37da@t)) (let ((kM37e4@ls/false (kM3077@syntax-dispatch kM37e2@t '(any)))) (if kM37e4@ls/false (apply (lambda (kM37e6@e) (list 'or kM37e6@e (kM37ae@f (car kM37ab@cls*) (cdr kM37ab@cls*)))) kM37e4@ls/false) (let ((kM37e8@t kM37e2@t)) (let ((kM37ea@ls/false (kM3077@syntax-dispatch kM37e8@t '(any . each-any)))) (if kM37ea@ls/false (apply (lambda (kM37ec@e kM37ed@e*) (list 'if kM37ec@e (cons 'begin kM37ed@e*) (kM37ae@f (car kM37ab@cls*) (cdr kM37ab@cls*)))) kM37ea@ls/false) (let ((kM37f0@t kM37e8@t)) (let ((kM37f2@ls/false (kM3077@syntax-dispatch kM37f0@t '_))) (if kM37f2@ls/false (apply (lambda () (kM3157@syntax-violation '#f '"invalid last clause" kM37a0@stx)) kM37f2@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM37f0@t)))))))))))))))))))) kM37a4@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM37a2@t)))))) (set! kM4b3f@kM305b@cond-macro kM305b@cond-macro) (set! kM305d@do-include (lambda (kM37f4@stx kM37f5@id kM37f6@filename) (let ((kM37fa@filename (kM2e84@stx->datum kM37f6@filename))) (begin (if (not (and (string? kM37fa@filename) (kM2e70@id? kM37f5@id))) (kM3157@syntax-violation '#f '"invalid syntax" kM37f4@stx) (void)) (cons (kM302d@bless 'begin) (with-input-from-file kM37fa@filename (lambda () (let kM37fe@f ((kM37fc@ls '())) (let ((kM3800@x (kM29ad@kM287f@read-annotated))) (if (eof-object? kM3800@x) (reverse kM37fc@ls) (kM37fe@f (cons (kM2e50@datum->stx kM37f5@id kM3800@x) kM37fc@ls)))))))))))) (set! kM4b40@kM305d@do-include kM305d@do-include) (set! kM305f@include-macro (lambda (kM3802@e) (let ((kM3804@t kM3802@e)) (let ((kM3806@ls/false (kM3077@syntax-dispatch kM3804@t '(any any)))) (if kM3806@ls/false (apply (lambda (kM3808@id kM3809@filename) (kM305d@do-include kM3802@e kM3808@id kM3809@filename)) kM3806@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3804@t)))))) (set! kM4b41@kM305f@include-macro kM305f@include-macro) (set! kM3061@include-into-macro (lambda (kM380c@e) (let ((kM380e@t kM380c@e)) (let ((kM3810@ls/false (kM3077@syntax-dispatch kM380e@t '(_ any any)))) (if kM3810@ls/false (apply (lambda (kM3812@id kM3813@filename) (kM305d@do-include kM380c@e kM3812@id kM3813@filename)) kM3810@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM380e@t)))))) (set! kM4b42@kM3061@include-into-macro kM3061@include-into-macro) (set! kM3063@syntax-rules-macro (lambda (kM3816@e) (let ((kM3818@t kM3816@e)) (let ((kM381a@ls/false (kM3077@syntax-dispatch kM3818@t '(_ each-any . #(each (any any)))))) (if kM381a@ls/false (apply (lambda (kM381c@lits kM381d@pat* kM381e@tmp*) (begin (kM307d@verify-literals kM381c@lits kM3816@e) (kM302d@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons kM381c@lits (map (lambda (kM3822@pat kM3823@tmp) (let ((kM3826@t kM3822@pat)) (let ((kM3828@ls/false (kM3077@syntax-dispatch kM3826@t '(_ . any)))) (if kM3828@ls/false (apply (lambda (kM382a@rest) (list (cons 'g kM382a@rest) (list 'syntax kM3823@tmp))) kM3828@ls/false) (let ((kM382c@t kM3826@t)) (let ((kM382e@ls/false (kM3077@syntax-dispatch kM382c@t '_))) (if kM382e@ls/false (apply (lambda () (kM3157@syntax-violation '#f '"invalid syntax-rules pattern" kM3816@e kM3822@pat)) kM382e@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM382c@t)))))))) kM381d@pat* kM381e@tmp*)))))))) kM381a@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3818@t)))))) (set! kM4b43@kM3063@syntax-rules-macro kM3063@syntax-rules-macro) (set! kM3065@quasiquote-macro (let ((kM3831@datum '#f) (kM384d@quasicons* '#f) (kM384f@quasicons '#f) (kM3851@quasiappend '#f) (kM3853@quasivector '#f) (kM3855@vquasi '#f) (kM3857@quasi '#f)) (begin (set! kM3831@datum (lambda (kM3932@x) (list (kM2fff@scheme-stx 'quote) (kM2e58@mkstx kM3932@x '() '() '())))) (set! kM384d@quasicons* (lambda (kM392a@x kM392b@y) (let kM3930@f ((kM392e@x kM392a@x)) (if (null? kM392e@x) kM392b@y (kM384f@quasicons (car kM392e@x) (kM3930@f (cdr kM392e@x))))))) (set! kM384f@quasicons (lambda (kM3904@x kM3905@y) (let ((kM3908@t kM3905@y)) (let ((kM390a@ls/false (kM3077@syntax-dispatch kM3908@t '(#(scheme-id quote) any)))) (if kM390a@ls/false (apply (lambda (kM390c@dy) (let ((kM390e@t kM3904@x)) (let ((kM3910@ls/false (kM3077@syntax-dispatch kM390e@t '(#(scheme-id quote) any)))) (if kM3910@ls/false (apply (lambda (kM3912@dx) (list (kM2fff@scheme-stx 'quote) (cons kM3912@dx kM390c@dy))) kM3910@ls/false) (let ((kM3914@t kM390e@t)) (let ((kM3916@ls/false (kM3077@syntax-dispatch kM3914@t '_))) (if kM3916@ls/false (apply (lambda () (let ((kM3918@t kM390c@dy)) (let ((kM391a@ls/false (kM3077@syntax-dispatch kM3918@t '()))) (if kM391a@ls/false (apply (lambda () (list (kM2fff@scheme-stx 'list) kM3904@x)) kM391a@ls/false) (let ((kM391c@t kM3918@t)) (let ((kM391e@ls/false (kM3077@syntax-dispatch kM391c@t '_))) (if kM391e@ls/false (apply (lambda () (list (kM2fff@scheme-stx 'cons) kM3904@x kM3905@y)) kM391e@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM391c@t)))))))) kM3916@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3914@t)))))))) kM390a@ls/false) (let ((kM3920@t kM3908@t)) (let ((kM3922@ls/false (kM3077@syntax-dispatch kM3920@t '(#(scheme-id list) . each-any)))) (if kM3922@ls/false (apply (lambda (kM3924@stuff) (cons* (kM2fff@scheme-stx 'list) kM3904@x kM3924@stuff)) kM3922@ls/false) (let ((kM3926@t kM3920@t)) (let ((kM3928@ls/false (kM3077@syntax-dispatch kM3926@t '_))) (if kM3928@ls/false (apply (lambda () (list (kM2fff@scheme-stx 'cons) kM3904@x kM3905@y)) kM3928@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3926@t)))))))))))) (set! kM3851@quasiappend (lambda (kM38ea@x kM38eb@y) (let ((kM38ee@ls (let kM38f2@f ((kM38f0@x kM38ea@x)) (if (null? kM38f0@x) (let ((kM38f4@t kM38eb@y)) (let ((kM38f6@ls/false (kM3077@syntax-dispatch kM38f4@t '(#(scheme-id quote) ())))) (if kM38f6@ls/false (apply (lambda () '()) kM38f6@ls/false) (let ((kM38f8@t kM38f4@t)) (let ((kM38fa@ls/false (kM3077@syntax-dispatch kM38f8@t '_))) (if kM38fa@ls/false (apply (lambda () (list kM38eb@y)) kM38fa@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM38f8@t))))))) (let ((kM38fc@t (car kM38f0@x))) (let ((kM38fe@ls/false (kM3077@syntax-dispatch kM38fc@t '(#(scheme-id quote) ())))) (if kM38fe@ls/false (apply (lambda () (kM38f2@f (cdr kM38f0@x))) kM38fe@ls/false) (let ((kM3900@t kM38fc@t)) (let ((kM3902@ls/false (kM3077@syntax-dispatch kM3900@t '_))) (if kM3902@ls/false (apply (lambda () (cons (car kM38f0@x) (kM38f2@f (cdr kM38f0@x)))) kM3902@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3900@t))))))))))) (if (null? kM38ee@ls) (list (kM2fff@scheme-stx 'quote) '()) (if (null? (cdr kM38ee@ls)) (car kM38ee@ls) (cons* (kM2fff@scheme-stx 'append) kM38ee@ls)))))) (set! kM3853@quasivector (lambda (kM38b8@x) (let ((kM38ba@pat-x kM38b8@x)) (let ((kM38bc@t kM38ba@pat-x)) (let ((kM38be@ls/false (kM3077@syntax-dispatch kM38bc@t '(#(scheme-id quote) each-any)))) (if kM38be@ls/false (apply (lambda (kM38c0@x*) (list (kM2fff@scheme-stx 'quote) (list->vector kM38c0@x*))) kM38be@ls/false) (let ((kM38c2@t kM38bc@t)) (let ((kM38c4@ls/false (kM3077@syntax-dispatch kM38c2@t '_))) (if kM38c4@ls/false (apply (lambda () (let kM38cc@f ((kM38c6@x kM38b8@x) (kM38c7@k (lambda (kM38ca@ls) (cons* (kM2fff@scheme-stx 'vector) kM38ca@ls)))) (let ((kM38ce@t kM38c6@x)) (let ((kM38d0@ls/false (kM3077@syntax-dispatch kM38ce@t '(#(scheme-id quote) each-any)))) (if kM38d0@ls/false (apply (lambda (kM38d2@x*) (kM38c7@k (map (lambda (kM38d4@x) (list (kM2fff@scheme-stx 'quote) kM38d4@x)) kM38d2@x*))) kM38d0@ls/false) (let ((kM38d6@t kM38ce@t)) (let ((kM38d8@ls/false (kM3077@syntax-dispatch kM38d6@t '(#(scheme-id list) . each-any)))) (if kM38d8@ls/false (apply (lambda (kM38da@x*) (kM38c7@k kM38da@x*)) kM38d8@ls/false) (let ((kM38dc@t kM38d6@t)) (let ((kM38de@ls/false (kM3077@syntax-dispatch kM38dc@t '(#(scheme-id cons) any any)))) (if kM38de@ls/false (apply (lambda (kM38e0@x kM38e1@y) (kM38cc@f kM38e1@y (lambda (kM38e4@ls) (kM38c7@k (cons kM38e0@x kM38e4@ls))))) kM38de@ls/false) (let ((kM38e6@t kM38dc@t)) (let ((kM38e8@ls/false (kM3077@syntax-dispatch kM38e6@t '_))) (if kM38e8@ls/false (apply (lambda () (list (kM2fff@scheme-stx 'list->vector) kM38ba@pat-x)) kM38e8@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM38e6@t))))))))))))))) kM38c4@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM38c2@t)))))))))) (set! kM3855@vquasi (lambda (kM3896@p kM3897@lev) (let ((kM389a@t kM3896@p)) (let ((kM389c@ls/false (kM3077@syntax-dispatch kM389a@t '(any . any)))) (if kM389c@ls/false (apply (lambda (kM389e@p kM389f@q) (let ((kM38a2@t kM389e@p)) (let ((kM38a4@ls/false (kM3077@syntax-dispatch kM38a2@t '(#(scheme-id unquote) . each-any)))) (if kM38a4@ls/false (apply (lambda (kM38a6@p) (if (= kM3897@lev '0) (kM384d@quasicons* kM38a6@p (kM3855@vquasi kM389f@q kM3897@lev)) (kM384f@quasicons (kM384f@quasicons (kM3831@datum 'unquote) (kM3857@quasi kM38a6@p (- kM3897@lev '1))) (kM3855@vquasi kM389f@q kM3897@lev)))) kM38a4@ls/false) (let ((kM38a8@t kM38a2@t)) (let ((kM38aa@ls/false (kM3077@syntax-dispatch kM38a8@t '(#(scheme-id unquote-splicing) . each-any)))) (if kM38aa@ls/false (apply (lambda (kM38ac@p) (if (= kM3897@lev '0) (kM3851@quasiappend kM38ac@p (kM3855@vquasi kM389f@q kM3897@lev)) (kM384f@quasicons (kM384f@quasicons (kM3831@datum 'unquote-splicing) (kM3857@quasi kM38ac@p (- kM3897@lev '1))) (kM3855@vquasi kM389f@q kM3897@lev)))) kM38aa@ls/false) (let ((kM38ae@t kM38a8@t)) (let ((kM38b0@ls/false (kM3077@syntax-dispatch kM38ae@t 'any))) (if kM38b0@ls/false (apply (lambda (kM38b2@p) (kM384f@quasicons (kM3857@quasi kM38b2@p kM3897@lev) (kM3855@vquasi kM389f@q kM3897@lev))) kM38b0@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM38ae@t))))))))))) kM389c@ls/false) (let ((kM38b4@t kM389a@t)) (let ((kM38b6@ls/false (kM3077@syntax-dispatch kM38b4@t '()))) (if kM38b6@ls/false (apply (lambda () (list (kM2fff@scheme-stx 'quote) '())) kM38b6@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM38b4@t))))))))) (set! kM3857@quasi (lambda (kM3860@p kM3861@lev) (let ((kM3864@t kM3860@p)) (let ((kM3866@ls/false (kM3077@syntax-dispatch kM3864@t '(#(scheme-id unquote) any)))) (if kM3866@ls/false (apply (lambda (kM3868@p) (if (= kM3861@lev '0) kM3868@p (kM384f@quasicons (kM3831@datum 'unquote) (kM3857@quasi (list kM3868@p) (- kM3861@lev '1))))) kM3866@ls/false) (let ((kM386a@t kM3864@t)) (let ((kM386c@ls/false (kM3077@syntax-dispatch kM386a@t '((#(scheme-id unquote) . each-any) . any)))) (if kM386c@ls/false (apply (lambda (kM386e@p kM386f@q) (if (= kM3861@lev '0) (kM384d@quasicons* kM386e@p (kM3857@quasi kM386f@q kM3861@lev)) (kM384f@quasicons (kM384f@quasicons (kM3831@datum 'unquote) (kM3857@quasi kM386e@p (- kM3861@lev '1))) (kM3857@quasi kM386f@q kM3861@lev)))) kM386c@ls/false) (let ((kM3872@t kM386a@t)) (let ((kM3874@ls/false (kM3077@syntax-dispatch kM3872@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if kM3874@ls/false (apply (lambda (kM3876@p kM3877@q) (if (= kM3861@lev '0) (kM3851@quasiappend kM3876@p (kM3857@quasi kM3877@q kM3861@lev)) (kM384f@quasicons (kM384f@quasicons (kM3831@datum 'unquote-splicing) (kM3857@quasi kM3876@p (- kM3861@lev '1))) (kM3857@quasi kM3877@q kM3861@lev)))) kM3874@ls/false) (let ((kM387a@t kM3872@t)) (let ((kM387c@ls/false (kM3077@syntax-dispatch kM387a@t '(#(scheme-id quasiquote) any)))) (if kM387c@ls/false (apply (lambda (kM387e@p) (kM384f@quasicons (kM3831@datum 'quasiquote) (kM3857@quasi (list kM387e@p) (+ kM3861@lev '1)))) kM387c@ls/false) (let ((kM3880@t kM387a@t)) (let ((kM3882@ls/false (kM3077@syntax-dispatch kM3880@t '(any . any)))) (if kM3882@ls/false (apply (lambda (kM3884@p kM3885@q) (kM384f@quasicons (kM3857@quasi kM3884@p kM3861@lev) (kM3857@quasi kM3885@q kM3861@lev))) kM3882@ls/false) (let ((kM3888@t kM3880@t)) (let ((kM388a@ls/false (kM3077@syntax-dispatch kM3888@t '#(vector each-any)))) (if (and kM388a@ls/false (apply (lambda (kM388c@x) (not (kM2e3c@stx? kM388c@x))) kM388a@ls/false)) (apply (lambda (kM388e@x) (kM3853@quasivector (kM3855@vquasi kM388e@x kM3861@lev))) kM388a@ls/false) (let ((kM3890@t kM3888@t)) (let ((kM3892@ls/false (kM3077@syntax-dispatch kM3890@t 'any))) (if kM3892@ls/false (apply (lambda (kM3894@p) (list (kM2fff@scheme-stx 'quote) kM3894@p)) kM3892@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3890@t)))))))))))))))))))))))) (lambda (kM3858@x) (let ((kM385a@t kM3858@x)) (let ((kM385c@ls/false (kM3077@syntax-dispatch kM385a@t '(_ any)))) (if kM385c@ls/false (apply (lambda (kM385e@e) (kM3857@quasi kM385e@e '0)) kM385c@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM385a@t)))))))) (set! kM4b44@kM3065@quasiquote-macro kM3065@quasiquote-macro) (set! kM3067@quasisyntax-macro (let ((kM3935@quasi '#f)) (begin (set! kM3935@quasi (lambda (kM3950@p kM3951@lev) (let ((kM3954@t kM3950@p)) (let ((kM3956@ls/false (kM3077@syntax-dispatch kM3954@t '(#(scheme-id unsyntax) any)))) (if kM3956@ls/false (apply (lambda (kM3958@p) (if (= kM3951@lev '0) (let ((kM395a@g (gensym))) (values (list kM395a@g) (list kM3958@p) kM395a@g)) (call-with-values (lambda () (kM3935@quasi kM3958@p (- kM3951@lev '1))) (lambda (kM3962@kM395d kM3963@kM395f kM3964@kM3961) (let ((kM3968@p kM3964@kM3961) (kM3969@rhs* kM3963@kM395f) (kM396a@lhs* kM3962@kM395d)) (values kM396a@lhs* kM3969@rhs* (list 'unsyntax kM3968@p))))))) kM3956@ls/false) (let ((kM396e@t kM3954@t)) (let ((kM3970@ls/false (kM3077@syntax-dispatch kM396e@t '#(scheme-id unsyntax)))) (if (and kM3970@ls/false (apply (lambda () (= kM3951@lev '0)) kM3970@ls/false)) (apply (lambda () (kM3157@syntax-violation '#f '"incorrect use of unsyntax" kM3950@p)) kM3970@ls/false) (let ((kM3972@t kM396e@t)) (let ((kM3974@ls/false (kM3077@syntax-dispatch kM3972@t '((#(scheme-id unsyntax) . each-any) . any)))) (if kM3974@ls/false (apply (lambda (kM3976@p* kM3977@q) (call-with-values (lambda () (kM3935@quasi kM3977@q kM3951@lev)) (lambda (kM3980@kM397b kM3981@kM397d kM3982@kM397f) (let ((kM3986@q kM3982@kM397f) (kM3987@rhs* kM3981@kM397d) (kM3988@lhs* kM3980@kM397b)) (if (= kM3951@lev '0) (let ((kM398c@g* (map (lambda (kM398e@x) (gensym)) kM3976@p*))) (values (append kM398c@g* kM3988@lhs*) (append kM3976@p* kM3987@rhs*) (append kM398c@g* kM3986@q))) (call-with-values (lambda () (kM3935@quasi kM3976@p* (- kM3951@lev '1))) (lambda (kM3996@kM3991 kM3997@kM3993 kM3998@kM3995) (let ((kM399c@p* kM3998@kM3995) (kM399d@rhs2* kM3997@kM3993) (kM399e@lhs2* kM3996@kM3991)) (values (append kM399e@lhs2* kM3988@lhs*) (append kM399d@rhs2* kM3987@rhs*) (cons (cons 'unsyntax kM399c@p*) kM3986@q)))))))))) kM3974@ls/false) (let ((kM39a2@t kM3972@t)) (let ((kM39a4@ls/false (kM3077@syntax-dispatch kM39a2@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if kM39a4@ls/false (apply (lambda (kM39a6@p* kM39a7@q) (call-with-values (lambda () (kM3935@quasi kM39a7@q kM3951@lev)) (lambda (kM39b0@kM39ab kM39b1@kM39ad kM39b2@kM39af) (let ((kM39b6@q kM39b2@kM39af) (kM39b7@rhs* kM39b1@kM39ad) (kM39b8@lhs* kM39b0@kM39ab)) (if (= kM3951@lev '0) (let ((kM39bc@g* (map (lambda (kM39be@x) (gensym)) kM39a6@p*))) (values (append (map (lambda (kM39c0@g) (cons kM39c0@g '(...))) kM39bc@g*) kM39b8@lhs*) (append kM39a6@p* kM39b7@rhs*) (append (apply append (map (lambda (kM39c2@g) (cons kM39c2@g '(...))) kM39bc@g*)) kM39b6@q))) (call-with-values (lambda () (kM3935@quasi kM39a6@p* (- kM3951@lev '1))) (lambda (kM39ca@kM39c5 kM39cb@kM39c7 kM39cc@kM39c9) (let ((kM39d0@p* kM39cc@kM39c9) (kM39d1@rhs2* kM39cb@kM39c7) (kM39d2@lhs2* kM39ca@kM39c5)) (values (append kM39d2@lhs2* kM39b8@lhs*) (append kM39d1@rhs2* kM39b7@rhs*) (cons (cons 'unsyntax-splicing kM39d0@p*) kM39b6@q)))))))))) kM39a4@ls/false) (let ((kM39d6@t kM39a2@t)) (let ((kM39d8@ls/false (kM3077@syntax-dispatch kM39d6@t '#(scheme-id unsyntax-splicing)))) (if (and kM39d8@ls/false (apply (lambda () (= kM3951@lev '0)) kM39d8@ls/false)) (apply (lambda () (kM3157@syntax-violation '#f '"incorrect use of unsyntax-splicing" kM3950@p)) kM39d8@ls/false) (let ((kM39da@t kM39d6@t)) (let ((kM39dc@ls/false (kM3077@syntax-dispatch kM39da@t '(#(scheme-id quasisyntax) any)))) (if kM39dc@ls/false (apply (lambda (kM39de@p) (call-with-values (lambda () (kM3935@quasi kM39de@p (+ kM3951@lev '1))) (lambda (kM39e6@kM39e1 kM39e7@kM39e3 kM39e8@kM39e5) (let ((kM39ec@p kM39e8@kM39e5) (kM39ed@rhs* kM39e7@kM39e3) (kM39ee@lhs* kM39e6@kM39e1)) (values kM39ee@lhs* kM39ed@rhs* (list 'quasisyntax kM39ec@p)))))) kM39dc@ls/false) (let ((kM39f2@t kM39da@t)) (let ((kM39f4@ls/false (kM3077@syntax-dispatch kM39f2@t '(any . any)))) (if kM39f4@ls/false (apply (lambda (kM39f6@p kM39f7@q) (call-with-values (lambda () (kM3935@quasi kM39f6@p kM3951@lev)) (lambda (kM3a06@kM39fb kM3a07@kM39fd kM3a08@kM39ff) (call-with-values (lambda () (kM3935@quasi kM39f7@q kM3951@lev)) (lambda (kM3a0c@kM3a01 kM3a0d@kM3a03 kM3a0e@kM3a05) (let ((kM3a12@q kM3a0e@kM3a05) (kM3a13@rhs2* kM3a0d@kM3a03) (kM3a14@lhs2* kM3a0c@kM3a01) (kM3a15@p kM3a08@kM39ff) (kM3a16@rhs* kM3a07@kM39fd) (kM3a17@lhs* kM3a06@kM39fb)) (values (append kM3a14@lhs2* kM3a17@lhs*) (append kM3a13@rhs2* kM3a16@rhs*) (cons kM3a15@p kM3a12@q)))))))) kM39f4@ls/false) (let ((kM3a1e@t kM39f2@t)) (let ((kM3a20@ls/false (kM3077@syntax-dispatch kM3a1e@t '#(vector each-any)))) (if kM3a20@ls/false (apply (lambda (kM3a22@x*) (call-with-values (lambda () (kM3935@quasi kM3a22@x* kM3951@lev)) (lambda (kM3a2a@kM3a25 kM3a2b@kM3a27 kM3a2c@kM3a29) (let ((kM3a30@x* kM3a2c@kM3a29) (kM3a31@rhs* kM3a2b@kM3a27) (kM3a32@lhs* kM3a2a@kM3a25)) (values kM3a32@lhs* kM3a31@rhs* (list->vector kM3a30@x*)))))) kM3a20@ls/false) (let ((kM3a36@t kM3a1e@t)) (let ((kM3a38@ls/false (kM3077@syntax-dispatch kM3a36@t '_))) (if kM3a38@ls/false (apply (lambda () (values '() '() kM3950@p)) kM3a38@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3a36@t)))))))))))))))))))))))))))))) (lambda (kM3936@x) (let ((kM3938@t kM3936@x)) (let ((kM393a@ls/false (kM3077@syntax-dispatch kM3938@t '(_ any)))) (if kM393a@ls/false (apply (lambda (kM393c@e) (call-with-values (lambda () (kM3935@quasi kM393c@e '0)) (lambda (kM3944@kM393f kM3945@kM3941 kM3946@kM3943) (let ((kM394a@v kM3946@kM3943) (kM394b@rhs* kM3945@kM3941) (kM394c@lhs* kM3944@kM393f)) (kM302d@bless (list 'syntax-case (cons 'list kM394b@rhs*) '() (list kM394c@lhs* (list 'syntax kM394a@v)))))))) kM393a@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3938@t)))))))) (set! kM4b45@kM3067@quasisyntax-macro kM3067@quasisyntax-macro) (set! kM3069@define-struct-macro (lambda (kM3a3a@stx) (kM3157@syntax-violation '#f '"define-struct not supported" kM3a3a@stx))) (set! kM4b46@kM3069@define-struct-macro kM3069@define-struct-macro) (set! kM306b@define-record-type-macro (lambda (kM3a3c@x) (let ((kM3a3f@id '#f) (kM3a41@get-record-name '#f) (kM3a43@get-record-constructor-name '#f) (kM3a45@get-record-predicate-name '#f) (kM3a47@get-clause '#f) (kM3a49@foo-rtd-code '#f) (kM3a4b@parent-rtd-code '#f) (kM3a4d@parent-rcd-code '#f) (kM3a4f@foo-rcd-code '#f) (kM3a51@get-protocol-code '#f) (kM3a53@get-fields '#f) (kM3a55@get-mutator-indices '#f) (kM3a57@get-mutators '#f) (kM3a59@get-accessors '#f) (kM3a5b@enumerate '#f) (kM3a5d@do-define-record '#f) (kM3a5f@verify-clauses '#f)) (begin (set! kM3a3f@id (lambda (kM3c32@ctxt . kM3c34@str*) (kM315b@datum->syntax kM3c32@ctxt (string->symbol (apply string-append (map (lambda (kM3c36@x) (if (symbol? kM3c36@x) (symbol->string kM3c36@x) (if (string? kM3c36@x) kM3c36@x (assertion-violation 'define-record-type '"BUG")))) kM3c34@str*)))))) (set! kM3a41@get-record-name (lambda (kM3c20@spec) (let ((kM3c22@t kM3c20@spec)) (let ((kM3c24@ls/false (kM3077@syntax-dispatch kM3c22@t '(any any any)))) (if kM3c24@ls/false (apply (lambda (kM3c26@foo kM3c27@make-foo kM3c28@foo?) kM3c26@foo) kM3c24@ls/false) (let ((kM3c2c@t kM3c22@t)) (let ((kM3c2e@ls/false (kM3077@syntax-dispatch kM3c2c@t 'any))) (if kM3c2e@ls/false (apply (lambda (kM3c30@foo) kM3c30@foo) kM3c2e@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3c2c@t))))))))) (set! kM3a43@get-record-constructor-name (lambda (kM3c0c@spec) (let ((kM3c0e@t kM3c0c@spec)) (let ((kM3c10@ls/false (kM3077@syntax-dispatch kM3c0e@t '(any any any)))) (if kM3c10@ls/false (apply (lambda (kM3c12@foo kM3c13@make-foo kM3c14@foo?) kM3c13@make-foo) kM3c10@ls/false) (let ((kM3c18@t kM3c0e@t)) (let ((kM3c1a@ls/false (kM3077@syntax-dispatch kM3c18@t 'any))) (if (and kM3c1a@ls/false (apply (lambda (kM3c1c@foo) (kM2e70@id? kM3c1c@foo)) kM3c1a@ls/false)) (apply (lambda (kM3c1e@foo) (kM3a3f@id kM3c1e@foo '"make-" (kM2e84@stx->datum kM3c1e@foo))) kM3c1a@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3c18@t))))))))) (set! kM3a45@get-record-predicate-name (lambda (kM3bf8@spec) (let ((kM3bfa@t kM3bf8@spec)) (let ((kM3bfc@ls/false (kM3077@syntax-dispatch kM3bfa@t '(any any any)))) (if kM3bfc@ls/false (apply (lambda (kM3bfe@foo kM3bff@make-foo kM3c00@foo?) kM3c00@foo?) kM3bfc@ls/false) (let ((kM3c04@t kM3bfa@t)) (let ((kM3c06@ls/false (kM3077@syntax-dispatch kM3c04@t 'any))) (if (and kM3c06@ls/false (apply (lambda (kM3c08@foo) (kM2e70@id? kM3c08@foo)) kM3c06@ls/false)) (apply (lambda (kM3c0a@foo) (kM3a3f@id kM3c0a@foo (kM2e84@stx->datum kM3c0a@foo) '"?")) kM3c06@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3c04@t))))))))) (set! kM3a47@get-clause (lambda (kM3be6@id kM3be7@ls) (let ((kM3bea@t kM3be7@ls)) (let ((kM3bec@ls/false (kM3077@syntax-dispatch kM3bea@t '()))) (if kM3bec@ls/false (apply (lambda () '#f) kM3bec@ls/false) (let ((kM3bee@t kM3bea@t)) (let ((kM3bf0@ls/false (kM3077@syntax-dispatch kM3bee@t '((any . any) . any)))) (if kM3bf0@ls/false (apply (lambda (kM3bf2@x kM3bf3@rest kM3bf4@ls) (if (kM2e76@free-id=? (kM302d@bless kM3be6@id) kM3bf2@x) (cons kM3bf2@x kM3bf3@rest) (kM3a47@get-clause kM3be6@id kM3bf4@ls))) kM3bf0@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3bee@t))))))))) (set! kM3a49@foo-rtd-code (lambda (kM3b94@name kM3b95@clause* kM3b96@parent-rtd-code) (let ((kM3b9b@convert-field-spec* '#f)) (begin (set! kM3b9b@convert-field-spec* (lambda (kM3bcc@ls) (list->vector (map (lambda (kM3bce@x) (let ((kM3bd0@t kM3bce@x)) (let ((kM3bd2@ls/false (kM3077@syntax-dispatch kM3bd0@t '(#(scheme-id mutable) any . any)))) (if kM3bd2@ls/false (apply (lambda (kM3bd4@name kM3bd5@rest) (list 'mutable kM3bd4@name)) kM3bd2@ls/false) (let ((kM3bd8@t kM3bd0@t)) (let ((kM3bda@ls/false (kM3077@syntax-dispatch kM3bd8@t '(#(scheme-id immutable) any . any)))) (if kM3bda@ls/false (apply (lambda (kM3bdc@name kM3bdd@rest) (list 'immutable kM3bdc@name)) kM3bda@ls/false) (let ((kM3be0@t kM3bd8@t)) (let ((kM3be2@ls/false (kM3077@syntax-dispatch kM3be0@t 'any))) (if kM3be2@ls/false (apply (lambda (kM3be4@name) (list 'immutable kM3be4@name)) kM3be2@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3be0@t))))))))))) kM3bcc@ls)))) (let ((kM3b9c@uid-code (let ((kM3ba4@t (kM3a47@get-clause 'nongenerative kM3b95@clause*))) (let ((kM3ba6@ls/false (kM3077@syntax-dispatch kM3ba4@t '(_)))) (if kM3ba6@ls/false (apply (lambda () (list 'quote (gensym))) kM3ba6@ls/false) (let ((kM3ba8@t kM3ba4@t)) (let ((kM3baa@ls/false (kM3077@syntax-dispatch kM3ba8@t '(_ any)))) (if kM3baa@ls/false (apply (lambda (kM3bac@uid) (list 'quote kM3bac@uid)) kM3baa@ls/false) (let ((kM3bae@t kM3ba8@t)) (let ((kM3bb0@ls/false (kM3077@syntax-dispatch kM3bae@t '_))) (if kM3bb0@ls/false (apply (lambda () '#f) kM3bb0@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3bae@t))))))))))) (kM3b9d@sealed? (let ((kM3bb2@t (kM3a47@get-clause 'sealed kM3b95@clause*))) (let ((kM3bb4@ls/false (kM3077@syntax-dispatch kM3bb2@t '(_ #(atom #t))))) (if kM3bb4@ls/false (apply (lambda () '#t) kM3bb4@ls/false) (let ((kM3bb6@t kM3bb2@t)) (let ((kM3bb8@ls/false (kM3077@syntax-dispatch kM3bb6@t '_))) (if kM3bb8@ls/false (apply (lambda () '#f) kM3bb8@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3bb6@t)))))))) (kM3b9e@opaque? (let ((kM3bba@t (kM3a47@get-clause 'opaque kM3b95@clause*))) (let ((kM3bbc@ls/false (kM3077@syntax-dispatch kM3bba@t '(_ #(atom #t))))) (if kM3bbc@ls/false (apply (lambda () '#t) kM3bbc@ls/false) (let ((kM3bbe@t kM3bba@t)) (let ((kM3bc0@ls/false (kM3077@syntax-dispatch kM3bbe@t '_))) (if kM3bc0@ls/false (apply (lambda () '#f) kM3bc0@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3bbe@t)))))))) (kM3b9f@fields (let ((kM3bc2@t (kM3a47@get-clause 'fields kM3b95@clause*))) (let ((kM3bc4@ls/false (kM3077@syntax-dispatch kM3bc2@t '(_ . each-any)))) (if kM3bc4@ls/false (apply (lambda (kM3bc6@field-spec*) (list 'quote (kM3b9b@convert-field-spec* kM3bc6@field-spec*))) kM3bc4@ls/false) (let ((kM3bc8@t kM3bc2@t)) (let ((kM3bca@ls/false (kM3077@syntax-dispatch kM3bc8@t '_))) (if kM3bca@ls/false (apply (lambda () ''#()) kM3bca@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3bc8@t))))))))) (kM302d@bless (list 'make-record-type-descriptor (list 'quote kM3b94@name) kM3b96@parent-rtd-code kM3b9c@uid-code kM3b9d@sealed? kM3b9e@opaque? kM3b9f@fields))))))) (set! kM3a4b@parent-rtd-code (lambda (kM3b7c@clause*) (let ((kM3b7e@t (kM3a47@get-clause 'parent kM3b7c@clause*))) (let ((kM3b80@ls/false (kM3077@syntax-dispatch kM3b7e@t '(_ any)))) (if kM3b80@ls/false (apply (lambda (kM3b82@name) (list 'record-type-descriptor kM3b82@name)) kM3b80@ls/false) (let ((kM3b84@t kM3b7e@t)) (let ((kM3b86@ls/false (kM3077@syntax-dispatch kM3b84@t '#(atom #f)))) (if kM3b86@ls/false (apply (lambda () (let ((kM3b88@t (kM3a47@get-clause 'parent-rtd kM3b7c@clause*))) (let ((kM3b8a@ls/false (kM3077@syntax-dispatch kM3b88@t '(_ any any)))) (if kM3b8a@ls/false (apply (lambda (kM3b8c@rtd kM3b8d@rcd) kM3b8c@rtd) kM3b8a@ls/false) (let ((kM3b90@t kM3b88@t)) (let ((kM3b92@ls/false (kM3077@syntax-dispatch kM3b90@t '#(atom #f)))) (if kM3b92@ls/false (apply (lambda () '#f) kM3b92@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3b90@t)))))))) kM3b86@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3b84@t))))))))) (set! kM3a4d@parent-rcd-code (lambda (kM3b64@clause*) (let ((kM3b66@t (kM3a47@get-clause 'parent kM3b64@clause*))) (let ((kM3b68@ls/false (kM3077@syntax-dispatch kM3b66@t '(_ any)))) (if kM3b68@ls/false (apply (lambda (kM3b6a@name) (list 'record-constructor-descriptor kM3b6a@name)) kM3b68@ls/false) (let ((kM3b6c@t kM3b66@t)) (let ((kM3b6e@ls/false (kM3077@syntax-dispatch kM3b6c@t '#(atom #f)))) (if kM3b6e@ls/false (apply (lambda () (let ((kM3b70@t (kM3a47@get-clause 'parent-rtd kM3b64@clause*))) (let ((kM3b72@ls/false (kM3077@syntax-dispatch kM3b70@t '(_ any any)))) (if kM3b72@ls/false (apply (lambda (kM3b74@rtd kM3b75@rcd) kM3b75@rcd) kM3b72@ls/false) (let ((kM3b78@t kM3b70@t)) (let ((kM3b7a@ls/false (kM3077@syntax-dispatch kM3b78@t '#(atom #f)))) (if kM3b7a@ls/false (apply (lambda () '#f) kM3b7a@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3b78@t)))))))) kM3b6e@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3b6c@t))))))))) (set! kM3a4f@foo-rcd-code (lambda (kM3b5c@clause* kM3b5d@foo-rtd kM3b5e@protocol kM3b5f@parent-rcd-code) (list 'make-record-constructor-descriptor kM3b5d@foo-rtd kM3b5f@parent-rcd-code kM3b5e@protocol))) (set! kM3a51@get-protocol-code (lambda (kM3b50@clause*) (let ((kM3b52@t (kM3a47@get-clause 'protocol kM3b50@clause*))) (let ((kM3b54@ls/false (kM3077@syntax-dispatch kM3b52@t '(_ any)))) (if kM3b54@ls/false (apply (lambda (kM3b56@expr) kM3b56@expr) kM3b54@ls/false) (let ((kM3b58@t kM3b52@t)) (let ((kM3b5a@ls/false (kM3077@syntax-dispatch kM3b58@t '_))) (if kM3b5a@ls/false (apply (lambda () '#f) kM3b5a@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3b58@t))))))))) (set! kM3a53@get-fields (lambda (kM3b3e@clause*) (let ((kM3b40@t kM3b3e@clause*)) (let ((kM3b42@ls/false (kM3077@syntax-dispatch kM3b40@t '()))) (if kM3b42@ls/false (apply (lambda () '()) kM3b42@ls/false) (let ((kM3b44@t kM3b40@t)) (let ((kM3b46@ls/false (kM3077@syntax-dispatch kM3b44@t '((#(scheme-id fields) . each-any) . _)))) (if kM3b46@ls/false (apply (lambda (kM3b48@f*) kM3b48@f*) kM3b46@ls/false) (let ((kM3b4a@t kM3b44@t)) (let ((kM3b4c@ls/false (kM3077@syntax-dispatch kM3b4a@t '(_ . any)))) (if kM3b4c@ls/false (apply (lambda (kM3b4e@rest) (kM3a53@get-fields kM3b4e@rest)) kM3b4c@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3b4a@t)))))))))))) (set! kM3a55@get-mutator-indices (lambda (kM3b26@fields) (let kM3b2c@f ((kM3b28@fields kM3b26@fields) (kM3b29@i '0)) (let ((kM3b2e@t kM3b28@fields)) (let ((kM3b30@ls/false (kM3077@syntax-dispatch kM3b2e@t '()))) (if kM3b30@ls/false (apply (lambda () '()) kM3b30@ls/false) (let ((kM3b32@t kM3b2e@t)) (let ((kM3b34@ls/false (kM3077@syntax-dispatch kM3b32@t '((#(scheme-id mutable) . _) . any)))) (if kM3b34@ls/false (apply (lambda (kM3b36@rest) (cons kM3b29@i (kM3b2c@f kM3b36@rest (+ kM3b29@i '1)))) kM3b34@ls/false) (let ((kM3b38@t kM3b32@t)) (let ((kM3b3a@ls/false (kM3077@syntax-dispatch kM3b38@t '(_ . any)))) (if kM3b3a@ls/false (apply (lambda (kM3b3c@rest) (kM3b2c@f kM3b3c@rest (+ kM3b29@i '1))) kM3b3a@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3b38@t))))))))))))) (set! kM3a57@get-mutators (lambda (kM3afc@foo kM3afd@fields) (let ((kM3b01@gen-name '#f)) (begin (set! kM3b01@gen-name (lambda (kM3b24@x) (kM315b@datum->syntax kM3afc@foo (string->symbol (string-append (symbol->string (kM315d@syntax->datum kM3afc@foo)) '"-" (symbol->string (kM315d@syntax->datum kM3b24@x)) '"-set!"))))) (let kM3b04@f ((kM3b02@fields kM3afd@fields)) (let ((kM3b06@t kM3b02@fields)) (let ((kM3b08@ls/false (kM3077@syntax-dispatch kM3b06@t '()))) (if kM3b08@ls/false (apply (lambda () '()) kM3b08@ls/false) (let ((kM3b0a@t kM3b06@t)) (let ((kM3b0c@ls/false (kM3077@syntax-dispatch kM3b0a@t '((#(scheme-id mutable) any any any) . any)))) (if kM3b0c@ls/false (apply (lambda (kM3b0e@name kM3b0f@accessor kM3b10@mutator kM3b11@rest) (cons kM3b10@mutator (kM3b04@f kM3b11@rest))) kM3b0c@ls/false) (let ((kM3b16@t kM3b0a@t)) (let ((kM3b18@ls/false (kM3077@syntax-dispatch kM3b16@t '((#(scheme-id mutable) any) . any)))) (if kM3b18@ls/false (apply (lambda (kM3b1a@name kM3b1b@rest) (cons (kM3b01@gen-name kM3b1a@name) (kM3b04@f kM3b1b@rest))) kM3b18@ls/false) (let ((kM3b1e@t kM3b16@t)) (let ((kM3b20@ls/false (kM3077@syntax-dispatch kM3b1e@t '(_ . any)))) (if kM3b20@ls/false (apply (lambda (kM3b22@rest) (kM3b04@f kM3b22@rest)) kM3b20@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3b1e@t)))))))))))))))))) (set! kM3a59@get-accessors (lambda (kM3ab8@foo kM3ab9@fields) (let ((kM3abd@gen-name '#f)) (begin (set! kM3abd@gen-name (lambda (kM3afa@x) (kM315b@datum->syntax kM3ab8@foo (string->symbol (string-append (symbol->string (kM315d@syntax->datum kM3ab8@foo)) '"-" (symbol->string (kM315d@syntax->datum kM3afa@x))))))) (map (lambda (kM3abe@field) (let ((kM3ac0@t kM3abe@field)) (let ((kM3ac2@ls/false (kM3077@syntax-dispatch kM3ac0@t '(#(scheme-id mutable) any any any)))) (if (and kM3ac2@ls/false (apply (lambda (kM3ac4@name kM3ac5@accessor kM3ac6@mutator) (kM2e70@id? kM3ac5@accessor)) kM3ac2@ls/false)) (apply (lambda (kM3aca@name kM3acb@accessor kM3acc@mutator) kM3acb@accessor) kM3ac2@ls/false) (let ((kM3ad0@t kM3ac0@t)) (let ((kM3ad2@ls/false (kM3077@syntax-dispatch kM3ad0@t '(#(scheme-id immutable) any any)))) (if (and kM3ad2@ls/false (apply (lambda (kM3ad4@name kM3ad5@accessor) (kM2e70@id? kM3ad5@accessor)) kM3ad2@ls/false)) (apply (lambda (kM3ad8@name kM3ad9@accessor) kM3ad9@accessor) kM3ad2@ls/false) (let ((kM3adc@t kM3ad0@t)) (let ((kM3ade@ls/false (kM3077@syntax-dispatch kM3adc@t '(#(scheme-id mutable) any)))) (if (and kM3ade@ls/false (apply (lambda (kM3ae0@name) (kM2e70@id? kM3ae0@name)) kM3ade@ls/false)) (apply (lambda (kM3ae2@name) (kM3abd@gen-name kM3ae2@name)) kM3ade@ls/false) (let ((kM3ae4@t kM3adc@t)) (let ((kM3ae6@ls/false (kM3077@syntax-dispatch kM3ae4@t '(#(scheme-id immutable) any)))) (if (and kM3ae6@ls/false (apply (lambda (kM3ae8@name) (kM2e70@id? kM3ae8@name)) kM3ae6@ls/false)) (apply (lambda (kM3aea@name) (kM3abd@gen-name kM3aea@name)) kM3ae6@ls/false) (let ((kM3aec@t kM3ae4@t)) (let ((kM3aee@ls/false (kM3077@syntax-dispatch kM3aec@t 'any))) (if (and kM3aee@ls/false (apply (lambda (kM3af0@name) (kM2e70@id? kM3af0@name)) kM3aee@ls/false)) (apply (lambda (kM3af2@name) (kM3abd@gen-name kM3af2@name)) kM3aee@ls/false) (let ((kM3af4@t kM3aec@t)) (let ((kM3af6@ls/false (kM3077@syntax-dispatch kM3af4@t 'any))) (if kM3af6@ls/false (apply (lambda (kM3af8@others) (kM3157@syntax-violation '#f '"invalid field spec" kM3abe@field)) kM3af6@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3af4@t)))))))))))))))))))) kM3ab9@fields))))) (set! kM3a5b@enumerate (lambda (kM3ab0@ls) (let kM3ab6@f ((kM3ab2@ls kM3ab0@ls) (kM3ab3@i '0)) (if (null? kM3ab2@ls) '() (cons kM3ab3@i (kM3ab6@f (cdr kM3ab2@ls) (+ kM3ab3@i '1))))))) (set! kM3a5d@do-define-record (lambda (kM3a88@namespec kM3a89@clause*) (let ((kM3a8c@foo (kM3a41@get-record-name kM3a88@namespec))) (let ((kM3a8e@foo-rtd (gensym))) (let ((kM3a90@foo-rcd (gensym))) (let ((kM3a92@protocol (gensym))) (let ((kM3a94@make-foo (kM3a43@get-record-constructor-name kM3a88@namespec))) (let ((kM3a96@fields (kM3a53@get-fields kM3a89@clause*))) (let ((kM3a98@idx* (kM3a5b@enumerate kM3a96@fields))) (let ((kM3a9a@foo-x* (kM3a59@get-accessors kM3a8c@foo kM3a96@fields))) (let ((kM3a9c@set-foo-x!* (kM3a57@get-mutators kM3a8c@foo kM3a96@fields))) (let ((kM3a9e@set-foo-idx* (kM3a55@get-mutator-indices kM3a96@fields))) (let ((kM3aa0@foo? (kM3a45@get-record-predicate-name kM3a88@namespec))) (let ((kM3aa2@foo-rtd-code (kM3a49@foo-rtd-code kM3a8c@foo kM3a89@clause* (kM3a4b@parent-rtd-code kM3a89@clause*)))) (let ((kM3aa4@foo-rcd-code (kM3a4f@foo-rcd-code kM3a89@clause* kM3a8e@foo-rtd kM3a92@protocol (kM3a4d@parent-rcd-code kM3a89@clause*)))) (let ((kM3aa6@protocol-code (kM3a51@get-protocol-code kM3a89@clause*))) (kM302d@bless (cons 'begin (cons (list 'define kM3a8e@foo-rtd kM3aa2@foo-rtd-code) (cons (list 'define kM3a92@protocol kM3aa6@protocol-code) (cons (list 'define kM3a90@foo-rcd kM3aa4@foo-rcd-code) (cons (list 'define-syntax kM3a8c@foo (list 'list ''$rtd (list 'syntax kM3a8e@foo-rtd) (list 'syntax kM3a90@foo-rcd))) (cons (list 'define kM3aa0@foo? (list 'record-predicate kM3a8e@foo-rtd)) (cons (list 'define kM3a94@make-foo (list 'record-constructor kM3a90@foo-rcd)) (append (map (lambda (kM3aa8@foo-x kM3aa9@idx) (list 'define kM3aa8@foo-x (list 'record-accessor kM3a8e@foo-rtd kM3aa9@idx))) kM3a9a@foo-x* kM3a98@idx*) (map (lambda (kM3aac@set-foo-x! kM3aad@idx) (list 'define kM3aac@set-foo-x! (list 'record-mutator kM3a8e@foo-rtd kM3aad@idx))) kM3a9c@set-foo-x!* kM3a9e@set-foo-idx*)))))))))))))))))))))))))) (set! kM3a5f@verify-clauses (lambda (kM3a68@x kM3a69@cls*) (let ((kM3a6d@valid-kwds '#f) (kM3a6f@free-id-member? '#f)) (begin (set! kM3a6d@valid-kwds (map kM302d@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! kM3a6f@free-id-member? (lambda (kM3a84@x kM3a85@ls) (and (pair? kM3a85@ls) (or (kM2e76@free-id=? kM3a84@x (car kM3a85@ls)) (kM3a6f@free-id-member? kM3a84@x (cdr kM3a85@ls)))))) (let kM3a74@f ((kM3a70@cls* kM3a69@cls*) (kM3a71@seen* '())) (if (not (null? kM3a70@cls*)) (let ((kM3a76@t (car kM3a70@cls*))) (let ((kM3a78@ls/false (kM3077@syntax-dispatch kM3a76@t '(any . any)))) (if kM3a78@ls/false (apply (lambda (kM3a7a@kwd kM3a7b@rest) (if (or (not (kM2e70@id? kM3a7a@kwd)) (not (kM3a6f@free-id-member? kM3a7a@kwd kM3a6d@valid-kwds))) (kM3157@syntax-violation '#f '"not a valid define-record-type keyword" kM3a7a@kwd) (if (kM2e7c@bound-id-member? kM3a7a@kwd kM3a71@seen*) (kM3157@syntax-violation '#f '"duplicate use of keyword " kM3a68@x kM3a7a@kwd) (kM3a74@f (cdr kM3a70@cls*) (cons kM3a7a@kwd kM3a71@seen*))))) kM3a78@ls/false) (let ((kM3a7e@t kM3a76@t)) (let ((kM3a80@ls/false (kM3077@syntax-dispatch kM3a7e@t 'any))) (if kM3a80@ls/false (apply (lambda (kM3a82@cls) (kM3157@syntax-violation '#f '"malformed define-record-type clause" kM3a82@cls)) kM3a80@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3a7e@t))))))) (void))))))) (let ((kM3a60@t kM3a3c@x)) (let ((kM3a62@ls/false (kM3077@syntax-dispatch kM3a60@t '(_ any . each-any)))) (if kM3a62@ls/false (apply (lambda (kM3a64@namespec kM3a65@clause*) (begin (kM3a5f@verify-clauses kM3a3c@x kM3a65@clause*) (kM3a5d@do-define-record kM3a64@namespec kM3a65@clause*))) kM3a62@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3a60@t)))))))) (set! kM4b47@kM306b@define-record-type-macro kM306b@define-record-type-macro) (set! kM306d@define-condition-type-macro (lambda (kM3c38@x) (let ((kM3c3b@mkname '#f)) (begin (set! kM3c3b@mkname (lambda (kM3c68@name kM3c69@suffix) (kM315b@datum->syntax kM3c68@name (string->symbol (string-append (symbol->string (kM315d@syntax->datum kM3c68@name)) kM3c69@suffix))))) (let ((kM3c3c@t kM3c38@x)) (let ((kM3c3e@ls/false (kM3077@syntax-dispatch kM3c3c@t '(any any any any any . #(each (any any)))))) (if (and kM3c3e@ls/false (apply (lambda (kM3c40@ctxt kM3c41@name kM3c42@super kM3c43@constructor kM3c44@predicate kM3c45@field* kM3c46@accessor*) (and (kM2e70@id? kM3c41@name) (kM2e70@id? kM3c42@super) (kM2e70@id? kM3c43@constructor) (kM2e70@id? kM3c44@predicate) (for-all kM2e70@id? kM3c45@field*) (for-all kM2e70@id? kM3c46@accessor*))) kM3c3e@ls/false)) (apply (lambda (kM3c4e@ctxt kM3c4f@name kM3c50@super kM3c51@constructor kM3c52@predicate kM3c53@field* kM3c54@accessor*) (let ((kM3c5c@aux-accessor* (map (lambda (kM3c5e@x) (gensym)) kM3c54@accessor*))) (kM302d@bless (cons 'begin (cons (cons 'define-record-type (cons (list kM3c4f@name kM3c51@constructor (gensym)) (cons (list 'parent kM3c50@super) (cons (cons 'fields (map (lambda (kM3c60@field kM3c61@aux) (list 'immutable kM3c60@field kM3c61@aux)) kM3c53@field* kM3c5c@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define kM3c52@predicate (list 'condition-predicate (list 'record-type-descriptor kM3c4f@name))) (map (lambda (kM3c64@accessor kM3c65@aux) (list 'define kM3c64@accessor (list 'condition-accessor (list 'record-type-descriptor kM3c4f@name) kM3c65@aux))) kM3c54@accessor* kM3c5c@aux-accessor*))))))) kM3c3e@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3c3c@t)))))))) (set! kM4b48@kM306d@define-condition-type-macro kM306d@define-condition-type-macro) (set! kM306f@incorrect-usage-macro (lambda (kM3c6c@e) (kM3157@syntax-violation '#f '"incorrect usage of auxiliary keyword" kM3c6c@e))) (set! kM4b49@kM306f@incorrect-usage-macro kM306f@incorrect-usage-macro) (set! kM3071@parameterize-macro (lambda (kM3c6e@e) (let ((kM3c70@t kM3c6e@e)) (let ((kM3c72@ls/false (kM3077@syntax-dispatch kM3c70@t '(_ () any . each-any)))) (if kM3c72@ls/false (apply (lambda (kM3c74@b kM3c75@b*) (kM302d@bless (cons 'let (cons '() (cons kM3c74@b kM3c75@b*))))) kM3c72@ls/false) (let ((kM3c78@t kM3c70@t)) (let ((kM3c7a@ls/false (kM3077@syntax-dispatch kM3c78@t '(_ #(each (any any)) any . each-any)))) (if kM3c7a@ls/false (apply (lambda (kM3c7c@olhs* kM3c7d@orhs* kM3c7e@b kM3c7f@b*) (let ((kM3c84@lhs* (kM3145@generate-temporaries kM3c7c@olhs*)) (kM3c85@rhs* (kM3145@generate-temporaries kM3c7d@orhs*))) (kM302d@bless (cons (list 'lambda (append kM3c84@lhs* kM3c85@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (kM3c88@lhs kM3c89@rhs) (list 'let (list (list 't (list kM3c88@lhs))) (list kM3c88@lhs kM3c89@rhs) (cons 'set! (cons kM3c89@rhs '(t))))) kM3c84@lhs* kM3c85@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons kM3c7e@b kM3c7f@b*))) '(swap)))))) (append kM3c7c@olhs* kM3c7d@orhs*))))) kM3c7a@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3c78@t))))))))) (set! kM4b4a@kM3071@parameterize-macro kM3071@parameterize-macro) (set! kM3073@foreign-call-transformer (lambda (kM3c8c@e kM3c8d@r kM3c8e@mr) (let ((kM3c92@t kM3c8c@e)) (let ((kM3c94@ls/false (kM3077@syntax-dispatch kM3c92@t '(_ any . each-any)))) (if kM3c94@ls/false (apply (lambda (kM3c96@name kM3c97@arg*) (cons 'foreign-call (cons (kM3099@chi-expr kM3c96@name kM3c8d@r kM3c8e@mr) (kM3095@chi-expr* kM3c97@arg* kM3c8d@r kM3c8e@mr)))) kM3c94@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3c92@t)))))) (set! kM4b4b@kM3073@foreign-call-transformer kM3073@foreign-call-transformer) (set! kM3075@convert-pattern (lambda (kM3c9a@pattern kM3c9b@keys) (let ((kM3c9f@cvt* '#f) (kM3ca1@cvt '#f)) (begin (set! kM3c9f@cvt* (lambda (kM3d3e@p* kM3d3f@n kM3d40@ids) (if (null? kM3d3e@p*) (values '() kM3d40@ids) (call-with-values (lambda () (kM3c9f@cvt* (cdr kM3d3e@p*) kM3d3f@n kM3d40@ids)) (lambda (kM3d48@kM3d45 kM3d49@kM3d47) (let ((kM3d4c@ids kM3d49@kM3d47) (kM3d4d@y kM3d48@kM3d45)) (call-with-values (lambda () (kM3ca1@cvt (car kM3d3e@p*) kM3d3f@n kM3d4c@ids)) (lambda (kM3d54@kM3d51 kM3d55@kM3d53) (let ((kM3d58@ids kM3d55@kM3d53) (kM3d59@x kM3d54@kM3d51)) (values (cons kM3d59@x kM3d4d@y) kM3d58@ids)))))))))) (set! kM3ca1@cvt (lambda (kM3ca2@p kM3ca3@n kM3ca4@ids) (let ((kM3ca8@t kM3ca2@p)) (let ((kM3caa@ls/false (kM3077@syntax-dispatch kM3ca8@t 'any))) (if (and kM3caa@ls/false (apply (lambda (kM3cac@id) (kM2e70@id? kM3cac@id)) kM3caa@ls/false)) (apply (lambda (kM3cae@id) (if (kM2e7c@bound-id-member? kM3ca2@p kM3c9b@keys) (values (vector 'free-id kM3ca2@p) kM3ca4@ids) (if (kM2e76@free-id=? kM3ca2@p (kM2fff@scheme-stx '_)) (values '_ kM3ca4@ids) (values 'any (cons (cons kM3ca2@p kM3ca3@n) kM3ca4@ids))))) kM3caa@ls/false) (let ((kM3cb0@t kM3ca8@t)) (let ((kM3cb2@ls/false (kM3077@syntax-dispatch kM3cb0@t '(any any)))) (if (and kM3cb2@ls/false (apply (lambda (kM3cb4@p kM3cb5@dots) (kM3079@ellipsis? kM3cb5@dots)) kM3cb2@ls/false)) (apply (lambda (kM3cb8@p kM3cb9@dots) (call-with-values (lambda () (kM3ca1@cvt kM3cb8@p (+ kM3ca3@n '1) kM3ca4@ids)) (lambda (kM3cc0@kM3cbd kM3cc1@kM3cbf) (let ((kM3cc4@ids kM3cc1@kM3cbf) (kM3cc5@p kM3cc0@kM3cbd)) (values (if (eq? kM3cc5@p 'any) 'each-any (vector 'each kM3cc5@p)) kM3cc4@ids))))) kM3cb2@ls/false) (let ((kM3cc8@t kM3cb0@t)) (let ((kM3cca@ls/false (kM3077@syntax-dispatch kM3cc8@t '(any any . #(each+ any () any))))) (if (and kM3cca@ls/false (apply (lambda (kM3ccc@x kM3ccd@dots kM3cce@ys kM3ccf@z) (kM3079@ellipsis? kM3ccd@dots)) kM3cca@ls/false)) (apply (lambda (kM3cd4@x kM3cd5@dots kM3cd6@ys kM3cd7@z) (call-with-values (lambda () (kM3ca1@cvt kM3cd7@z kM3ca3@n kM3ca4@ids)) (lambda (kM3ce0@kM3cdd kM3ce1@kM3cdf) (let ((kM3ce4@ids kM3ce1@kM3cdf) (kM3ce5@z kM3ce0@kM3cdd)) (call-with-values (lambda () (kM3c9f@cvt* kM3cd6@ys kM3ca3@n kM3ce4@ids)) (lambda (kM3cec@kM3ce9 kM3ced@kM3ceb) (let ((kM3cf0@ids kM3ced@kM3ceb) (kM3cf1@ys kM3cec@kM3ce9)) (call-with-values (lambda () (kM3ca1@cvt kM3cd4@x (+ kM3ca3@n '1) kM3cf0@ids)) (lambda (kM3cf8@kM3cf5 kM3cf9@kM3cf7) (let ((kM3cfc@ids kM3cf9@kM3cf7) (kM3cfd@x kM3cf8@kM3cf5)) (values (vector 'each+ kM3cfd@x (reverse kM3cf1@ys) kM3ce5@z) kM3cfc@ids))))))))))) kM3cca@ls/false) (let ((kM3d00@t kM3cc8@t)) (let ((kM3d02@ls/false (kM3077@syntax-dispatch kM3d00@t '(any . any)))) (if kM3d02@ls/false (apply (lambda (kM3d04@x kM3d05@y) (call-with-values (lambda () (kM3ca1@cvt kM3d05@y kM3ca3@n kM3ca4@ids)) (lambda (kM3d0c@kM3d09 kM3d0d@kM3d0b) (let ((kM3d10@ids kM3d0d@kM3d0b) (kM3d11@y kM3d0c@kM3d09)) (call-with-values (lambda () (kM3ca1@cvt kM3d04@x kM3ca3@n kM3d10@ids)) (lambda (kM3d18@kM3d15 kM3d19@kM3d17) (let ((kM3d1c@ids kM3d19@kM3d17) (kM3d1d@x kM3d18@kM3d15)) (values (cons kM3d1d@x kM3d11@y) kM3d1c@ids)))))))) kM3d02@ls/false) (let ((kM3d20@t kM3d00@t)) (let ((kM3d22@ls/false (kM3077@syntax-dispatch kM3d20@t '()))) (if kM3d22@ls/false (apply (lambda () (values '() kM3ca4@ids)) kM3d22@ls/false) (let ((kM3d24@t kM3d20@t)) (let ((kM3d26@ls/false (kM3077@syntax-dispatch kM3d24@t '#(vector each-any)))) (if (and kM3d26@ls/false (apply (lambda (kM3d28@p) (not (kM2e3c@stx? kM3d28@p))) kM3d26@ls/false)) (apply (lambda (kM3d2a@p) (call-with-values (lambda () (kM3ca1@cvt kM3d2a@p kM3ca3@n kM3ca4@ids)) (lambda (kM3d30@kM3d2d kM3d31@kM3d2f) (let ((kM3d34@ids kM3d31@kM3d2f) (kM3d35@p kM3d30@kM3d2d)) (values (vector 'vector kM3d35@p) kM3d34@ids))))) kM3d26@ls/false) (let ((kM3d38@t kM3d24@t)) (let ((kM3d3a@ls/false (kM3077@syntax-dispatch kM3d38@t 'any))) (if kM3d3a@ls/false (apply (lambda (kM3d3c@datum) (values (vector 'atom (kM2e84@stx->datum kM3d3c@datum)) kM3ca4@ids)) kM3d3a@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3d38@t)))))))))))))))))))))))) (kM3ca1@cvt kM3c9a@pattern '0 '()))))) (set! kM4b4c@kM3075@convert-pattern kM3075@convert-pattern) (set! kM3077@syntax-dispatch (let ((kM3d5d@stx^ '#f) (kM3d5f@match-each '#f) (kM3d61@match-each+ '#f) (kM3d63@match-each-any '#f) (kM3d65@match-empty '#f) (kM3d67@combine '#f) (kM3d69@match* '#f) (kM3d6b@match '#f)) (begin (set! kM3d5d@stx^ (lambda (kM3e38@e kM3e39@m* kM3e3a@s* kM3e3b@ae*) (if (and (null? kM3e39@m*) (null? kM3e3a@s*) (null? kM3e3b@ae*)) kM3e38@e (kM2e58@mkstx kM3e38@e kM3e39@m* kM3e3a@s* kM3e3b@ae*)))) (set! kM3d5f@match-each (lambda (kM3e18@e kM3e19@p kM3e1a@m* kM3e1b@s* kM3e1c@ae*) (if (pair? kM3e18@e) (let ((kM3e22@first (kM3d6b@match (car kM3e18@e) kM3e19@p kM3e1a@m* kM3e1b@s* kM3e1c@ae* '()))) (and kM3e22@first (let ((kM3e24@rest (kM3d5f@match-each (cdr kM3e18@e) kM3e19@p kM3e1a@m* kM3e1b@s* kM3e1c@ae*))) (and kM3e24@rest (cons kM3e22@first kM3e24@rest))))) (if (null? kM3e18@e) '() (if (kM2e3c@stx? kM3e18@e) (and (not (kM2df6@top-marked? kM3e1a@m*)) (call-with-values (lambda () (join-wraps kM3e1a@m* kM3e1b@s* kM3e1c@ae* kM3e18@e)) (lambda (kM3e2c@kM3e27 kM3e2d@kM3e29 kM3e2e@kM3e2b) (let ((kM3e32@ae* kM3e2e@kM3e2b) (kM3e33@s* kM3e2d@kM3e29) (kM3e34@m* kM3e2c@kM3e27)) (kM3d5f@match-each (kM2e3e@stx-expr kM3e18@e) kM3e19@p kM3e34@m* kM3e33@s* kM3e32@ae*))))) (if (kM29af@kM2883@annotation? kM3e18@e) (kM3d5f@match-each (kM29b1@kM2887@annotation-expression kM3e18@e) kM3e19@p kM3e1a@m* kM3e1b@s* kM3e1c@ae*) '#f)))))) (set! kM3d61@match-each+ (lambda (kM3dd8@e kM3dd9@x-pat kM3dda@y-pat kM3ddb@z-pat kM3ddc@m* kM3ddd@s* kM3dde@ae* kM3ddf@r) (let kM3df0@f ((kM3de8@e kM3dd8@e) (kM3de9@m* kM3ddc@m*) (kM3dea@s* kM3ddd@s*) (kM3deb@ae* kM3dde@ae*)) (if (pair? kM3de8@e) (call-with-values (lambda () (kM3df0@f (cdr kM3de8@e) kM3de9@m* kM3dea@s* kM3deb@ae*)) (lambda (kM3df8@kM3df3 kM3df9@kM3df5 kM3dfa@kM3df7) (let ((kM3dfe@r kM3dfa@kM3df7) (kM3dff@y-pat kM3df9@kM3df5) (kM3e00@xr* kM3df8@kM3df3)) (if kM3dfe@r (if (null? kM3dff@y-pat) (let ((kM3e04@xr (kM3d6b@match (car kM3de8@e) kM3dd9@x-pat kM3de9@m* kM3dea@s* kM3deb@ae* '()))) (if kM3e04@xr (values (cons kM3e04@xr kM3e00@xr*) kM3dff@y-pat kM3dfe@r) (values '#f '#f '#f))) (values '() (cdr kM3dff@y-pat) (kM3d6b@match (car kM3de8@e) (car kM3dff@y-pat) kM3de9@m* kM3dea@s* kM3deb@ae* kM3dfe@r))) (values '#f '#f '#f))))) (if (kM2e3c@stx? kM3de8@e) (if (kM2df6@top-marked? kM3de9@m*) (values '() kM3dda@y-pat (kM3d6b@match kM3de8@e kM3ddb@z-pat kM3de9@m* kM3dea@s* kM3deb@ae* kM3ddf@r)) (call-with-values (lambda () (join-wraps kM3de9@m* kM3dea@s* kM3deb@ae* kM3de8@e)) (lambda (kM3e0c@kM3e07 kM3e0d@kM3e09 kM3e0e@kM3e0b) (let ((kM3e12@ae* kM3e0e@kM3e0b) (kM3e13@s* kM3e0d@kM3e09) (kM3e14@m* kM3e0c@kM3e07)) (kM3df0@f (kM2e3e@stx-expr kM3de8@e) kM3e14@m* kM3e13@s* kM3e12@ae*))))) (if (kM29af@kM2883@annotation? kM3de8@e) (kM3df0@f (kM29b1@kM2887@annotation-expression kM3de8@e) kM3de9@m* kM3dea@s* kM3deb@ae*) (values '() kM3dda@y-pat (kM3d6b@match kM3de8@e kM3ddb@z-pat kM3de9@m* kM3dea@s* kM3deb@ae* kM3ddf@r)))))))) (set! kM3d63@match-each-any (lambda (kM3dbc@e kM3dbd@m* kM3dbe@s* kM3dbf@ae*) (if (pair? kM3dbc@e) (let ((kM3dc4@l (kM3d63@match-each-any (cdr kM3dbc@e) kM3dbd@m* kM3dbe@s* kM3dbf@ae*))) (and kM3dc4@l (cons (kM3d5d@stx^ (car kM3dbc@e) kM3dbd@m* kM3dbe@s* kM3dbf@ae*) kM3dc4@l))) (if (null? kM3dbc@e) '() (if (kM2e3c@stx? kM3dbc@e) (and (not (kM2df6@top-marked? kM3dbd@m*)) (call-with-values (lambda () (join-wraps kM3dbd@m* kM3dbe@s* kM3dbf@ae* kM3dbc@e)) (lambda (kM3dcc@kM3dc7 kM3dcd@kM3dc9 kM3dce@kM3dcb) (let ((kM3dd2@ae* kM3dce@kM3dcb) (kM3dd3@s* kM3dcd@kM3dc9) (kM3dd4@m* kM3dcc@kM3dc7)) (kM3d63@match-each-any (kM2e3e@stx-expr kM3dbc@e) kM3dd4@m* kM3dd3@s* kM3dd2@ae*))))) (if (kM29af@kM2883@annotation? kM3dbc@e) (kM3d63@match-each-any (kM29b1@kM2887@annotation-expression kM3dbc@e) kM3dbd@m* kM3dbe@s* kM3dbf@ae*) '#f)))))) (set! kM3d65@match-empty (lambda (kM3db6@p kM3db7@r) (if (null? kM3db6@p) kM3db7@r (if (eq? kM3db6@p '_) kM3db7@r (if (eq? kM3db6@p 'any) (cons '() kM3db7@r) (if (pair? kM3db6@p) (kM3d65@match-empty (car kM3db6@p) (kM3d65@match-empty (cdr kM3db6@p) kM3db7@r)) (if (eq? kM3db6@p 'each-any) (cons '() kM3db7@r) (let ((kM3dba@t (vector-ref kM3db6@p '0))) (if (memv kM3dba@t '(each)) (kM3d65@match-empty (vector-ref kM3db6@p '1) kM3db7@r) (if (memv kM3dba@t '(each+)) (kM3d65@match-empty (vector-ref kM3db6@p '1) (kM3d65@match-empty (reverse (vector-ref kM3db6@p '2)) (kM3d65@match-empty (vector-ref kM3db6@p '3) kM3db7@r))) (if (memv kM3dba@t '(free-id atom)) kM3db7@r (if (memv kM3dba@t '(scheme-id atom)) kM3db7@r (if (memv kM3dba@t '(vector)) (kM3d65@match-empty (vector-ref kM3db6@p '1) kM3db7@r) (assertion-violation 'syntax-dispatch '"invalid pattern" kM3db6@p)))))))))))))) (set! kM3d67@combine (lambda (kM3db2@r* kM3db3@r) (if (null? (car kM3db2@r*)) kM3db3@r (cons (map car kM3db2@r*) (kM3d67@combine (map cdr kM3db2@r*) kM3db3@r))))) (set! kM3d69@match* (lambda (kM3d8e@e kM3d8f@p kM3d90@m* kM3d91@s* kM3d92@ae* kM3d93@r) (if (null? kM3d8f@p) (and (null? kM3d8e@e) kM3d93@r) (if (pair? kM3d8f@p) (and (pair? kM3d8e@e) (kM3d6b@match (car kM3d8e@e) (car kM3d8f@p) kM3d90@m* kM3d91@s* kM3d92@ae* (kM3d6b@match (cdr kM3d8e@e) (cdr kM3d8f@p) kM3d90@m* kM3d91@s* kM3d92@ae* kM3d93@r))) (if (eq? kM3d8f@p 'each-any) (let ((kM3d9a@l (kM3d63@match-each-any kM3d8e@e kM3d90@m* kM3d91@s* kM3d92@ae*))) (and kM3d9a@l (cons kM3d9a@l kM3d93@r))) (let ((kM3d9c@t (vector-ref kM3d8f@p '0))) (if (memv kM3d9c@t '(each)) (if (null? kM3d8e@e) (kM3d65@match-empty (vector-ref kM3d8f@p '1) kM3d93@r) (let ((kM3d9e@r* (kM3d5f@match-each kM3d8e@e (vector-ref kM3d8f@p '1) kM3d90@m* kM3d91@s* kM3d92@ae*))) (and kM3d9e@r* (kM3d67@combine kM3d9e@r* kM3d93@r)))) (if (memv kM3d9c@t '(free-id)) (and (symbol? kM3d8e@e) (kM2df6@top-marked? kM3d90@m*) (kM2e76@free-id=? (kM3d5d@stx^ kM3d8e@e kM3d90@m* kM3d91@s* kM3d92@ae*) (vector-ref kM3d8f@p '1)) kM3d93@r) (if (memv kM3d9c@t '(scheme-id)) (and (symbol? kM3d8e@e) (kM2df6@top-marked? kM3d90@m*) (kM2e76@free-id=? (kM3d5d@stx^ kM3d8e@e kM3d90@m* kM3d91@s* kM3d92@ae*) (kM2fff@scheme-stx (vector-ref kM3d8f@p '1))) kM3d93@r) (if (memv kM3d9c@t '(each+)) (call-with-values (lambda () (kM3d61@match-each+ kM3d8e@e (vector-ref kM3d8f@p '1) (vector-ref kM3d8f@p '2) (vector-ref kM3d8f@p '3) kM3d90@m* kM3d91@s* kM3d92@ae* kM3d93@r)) (lambda (kM3da6@kM3da1 kM3da7@kM3da3 kM3da8@kM3da5) (let ((kM3dac@r kM3da8@kM3da5) (kM3dad@y-pat kM3da7@kM3da3) (kM3dae@xr* kM3da6@kM3da1)) (and kM3dac@r (null? kM3dad@y-pat) (if (null? kM3dae@xr*) (kM3d65@match-empty (vector-ref kM3d8f@p '1) kM3dac@r) (kM3d67@combine kM3dae@xr* kM3dac@r)))))) (if (memv kM3d9c@t '(atom)) (and (fast-equal? (vector-ref kM3d8f@p '1) (kM2e82@strip kM3d8e@e kM3d90@m*)) kM3d93@r) (if (memv kM3d9c@t '(vector)) (and (vector? kM3d8e@e) (kM3d6b@match (vector->list kM3d8e@e) (vector-ref kM3d8f@p '1) kM3d90@m* kM3d91@s* kM3d92@ae* kM3d93@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" kM3d8f@p))))))))))))) (set! kM3d6b@match (lambda (kM3d70@e kM3d71@p kM3d72@m* kM3d73@s* kM3d74@ae* kM3d75@r) (if (not kM3d75@r) '#f (if (eq? kM3d71@p '_) kM3d75@r (if (eq? kM3d71@p 'any) (cons (kM3d5d@stx^ kM3d70@e kM3d72@m* kM3d73@s* kM3d74@ae*) kM3d75@r) (if (kM2e3c@stx? kM3d70@e) (and (not (kM2df6@top-marked? kM3d72@m*)) (call-with-values (lambda () (join-wraps kM3d72@m* kM3d73@s* kM3d74@ae* kM3d70@e)) (lambda (kM3d82@kM3d7d kM3d83@kM3d7f kM3d84@kM3d81) (let ((kM3d88@ae* kM3d84@kM3d81) (kM3d89@s* kM3d83@kM3d7f) (kM3d8a@m* kM3d82@kM3d7d)) (kM3d6b@match (kM2e3e@stx-expr kM3d70@e) kM3d71@p kM3d8a@m* kM3d89@s* kM3d88@ae* kM3d75@r))))) (if (kM29af@kM2883@annotation? kM3d70@e) (kM3d6b@match (kM29b1@kM2887@annotation-expression kM3d70@e) kM3d71@p kM3d72@m* kM3d73@s* kM3d74@ae* kM3d75@r) (kM3d69@match* kM3d70@e kM3d71@p kM3d72@m* kM3d73@s* kM3d74@ae* kM3d75@r)))))))) (lambda (kM3d6c@e kM3d6d@p) (kM3d6b@match kM3d6c@e kM3d6d@p '() '() '() '()))))) (set! kM4b4d@kM3077@syntax-dispatch kM3077@syntax-dispatch) (set! kM3079@ellipsis? (lambda (kM3e40@x) (and (kM2e70@id? kM3e40@x) (kM2e76@free-id=? kM3e40@x (kM2fff@scheme-stx '...))))) (set! kM4b4e@kM3079@ellipsis? kM3079@ellipsis?) (set! kM307b@underscore? (lambda (kM3e42@x) (and (kM2e70@id? kM3e42@x) (kM2e76@free-id=? kM3e42@x (kM2fff@scheme-stx '_))))) (set! kM4b4f@kM307b@underscore? kM307b@underscore?) (set! kM307d@verify-literals (lambda (kM3e44@lits kM3e45@expr) (for-each (lambda (kM3e48@x) (if (or (not (kM2e70@id? kM3e48@x)) (kM3079@ellipsis? kM3e48@x) (kM307b@underscore? kM3e48@x)) (kM3157@syntax-violation '#f '"invalid literal" kM3e45@expr kM3e48@x) (void))) kM3e44@lits))) (set! kM4b50@kM307d@verify-literals kM307d@verify-literals) (set! kM307f@syntax-case-transformer (let ((kM3e4b@build-dispatch-call '#f) (kM3e4d@invalid-ids-error '#f) (kM3e4f@gen-clause '#f) (kM3e51@gen-syntax-case '#f)) (begin (set! kM3e4b@build-dispatch-call (lambda (kM3ebc@pvars kM3ebd@expr kM3ebe@y kM3ebf@r kM3ec0@mr) (let ((kM3ec6@ids (map car kM3ebc@pvars)) (kM3ec7@levels (map cdr kM3ebc@pvars))) (let ((kM3eca@labels (map kM2dfc@gen-label kM3ec6@ids)) (kM3ecb@new-vars (map kM2df8@gen-lexical kM3ec6@ids))) (let ((kM3ece@body (kM3099@chi-expr (kM2e5c@add-subst (kM2e30@make-full-rib kM3ec6@ids kM3eca@labels) kM3ebd@expr) (append (map (lambda (kM3ed0@label kM3ed1@var kM3ed2@level) (cons kM3ed0@label (kM2e8a@make-binding 'syntax (cons kM3ed1@var kM3ed2@level)))) kM3eca@labels kM3ecb@new-vars (map cdr kM3ebc@pvars)) kM3ebf@r) kM3ec0@mr))) (list '(primitive apply) (kM2dd3@kM2cff@build-lambda '#f kM3ecb@new-vars kM3ece@body) kM3ebe@y)))))) (set! kM3e4d@invalid-ids-error (lambda (kM3eb0@id* kM3eb1@e kM3eb2@class) (let kM3eba@find ((kM3eb6@id* kM3eb0@id*) (kM3eb7@ok* '())) (if (null? kM3eb6@id*) (kM3157@syntax-violation '#f '"invalid syntax" kM3eb1@e) (if (kM2e70@id? (car kM3eb6@id*)) (if (kM2e7c@bound-id-member? (car kM3eb6@id*) kM3eb7@ok*) (kM3153@syntax-error (car kM3eb6@id*) '"duplicate " kM3eb2@class) (kM3eba@find (cdr kM3eb6@id*) (cons (car kM3eb6@id*) kM3eb7@ok*))) (kM3153@syntax-error (car kM3eb6@id*) '"invalid " kM3eb2@class)))))) (set! kM3e4f@gen-clause (lambda (kM3e88@x kM3e89@keys kM3e8a@clauses kM3e8b@r kM3e8c@mr kM3e8d@pat kM3e8e@fender kM3e8f@expr) (call-with-values (lambda () (kM3075@convert-pattern kM3e8d@pat kM3e89@keys)) (lambda (kM3e9c@kM3e99 kM3e9d@kM3e9b) (let ((kM3ea0@pvars kM3e9d@kM3e9b) (kM3ea1@p kM3e9c@kM3e99)) (if (not (kM2e7a@distinct-bound-ids? (map car kM3ea0@pvars))) (kM3e4d@invalid-ids-error (map car kM3ea0@pvars) kM3e8d@pat '"pattern variable") (if (not (for-all (lambda (kM3ea4@x) (not (kM3079@ellipsis? (car kM3ea4@x)))) kM3ea0@pvars)) (kM3157@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" kM3e8d@pat) (let ((kM3ea6@y (kM2df8@gen-lexical 'tmp))) (let ((kM3ea8@test (if (eq? kM3e8e@fender '#t) kM3ea6@y (let ((kM3eaa@call (kM3e4b@build-dispatch-call kM3ea0@pvars kM3e8e@fender kM3ea6@y kM3e8b@r kM3e8c@mr))) (list 'if kM3ea6@y kM3eaa@call (list 'quote '#f)))))) (let ((kM3eac@conseq (kM3e4b@build-dispatch-call kM3ea0@pvars kM3e8f@expr kM3ea6@y kM3e8b@r kM3e8c@mr))) (let ((kM3eae@altern (kM3e51@gen-syntax-case kM3e88@x kM3e89@keys kM3e8a@clauses kM3e8b@r kM3e8c@mr))) (list (kM2dd3@kM2cff@build-lambda '#f (list kM3ea6@y) (list 'if kM3ea8@test kM3eac@conseq kM3eae@altern)) (list '(primitive syntax-dispatch) kM3e88@x (list 'quote kM3ea1@p)))))))))))))) (set! kM3e51@gen-syntax-case (lambda (kM3e66@x kM3e67@keys kM3e68@clauses kM3e69@r kM3e6a@mr) (if (null? kM3e68@clauses) (list '(primitive syntax-error) kM3e66@x) (let ((kM3e70@t (car kM3e68@clauses))) (let ((kM3e72@ls/false (kM3077@syntax-dispatch kM3e70@t '(any any)))) (if kM3e72@ls/false (apply (lambda (kM3e74@pat kM3e75@expr) (if (and (kM2e70@id? kM3e74@pat) (not (kM2e7c@bound-id-member? kM3e74@pat kM3e67@keys)) (not (kM3079@ellipsis? kM3e74@pat))) (if (kM2e76@free-id=? kM3e74@pat (kM2fff@scheme-stx '_)) (kM3099@chi-expr kM3e75@expr kM3e69@r kM3e6a@mr) (let ((kM3e78@lab (kM2dfc@gen-label kM3e74@pat)) (kM3e79@lex (kM2df8@gen-lexical kM3e74@pat))) (let ((kM3e7c@body (kM3099@chi-expr (kM2e5c@add-subst (kM2e30@make-full-rib (list kM3e74@pat) (list kM3e78@lab)) kM3e75@expr) (cons (cons kM3e78@lab (kM2e8a@make-binding 'syntax (cons kM3e79@lex '0))) kM3e69@r) kM3e6a@mr))) (list (kM2dd3@kM2cff@build-lambda '#f (list kM3e79@lex) kM3e7c@body) kM3e66@x)))) (kM3e4f@gen-clause kM3e66@x kM3e67@keys (cdr kM3e68@clauses) kM3e69@r kM3e6a@mr kM3e74@pat '#t kM3e75@expr))) kM3e72@ls/false) (let ((kM3e7e@t kM3e70@t)) (let ((kM3e80@ls/false (kM3077@syntax-dispatch kM3e7e@t '(any any any)))) (if kM3e80@ls/false (apply (lambda (kM3e82@pat kM3e83@fender kM3e84@expr) (kM3e4f@gen-clause kM3e66@x kM3e67@keys (cdr kM3e68@clauses) kM3e69@r kM3e6a@mr kM3e82@pat kM3e83@fender kM3e84@expr)) kM3e80@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3e7e@t)))))))))) (lambda (kM3e52@e kM3e53@r kM3e54@mr) (let ((kM3e58@t kM3e52@e)) (let ((kM3e5a@ls/false (kM3077@syntax-dispatch kM3e58@t '(_ any each-any . each-any)))) (if kM3e5a@ls/false (apply (lambda (kM3e5c@expr kM3e5d@keys kM3e5e@clauses) (begin (kM307d@verify-literals kM3e5d@keys kM3e52@e) (let ((kM3e62@x (kM2df8@gen-lexical 'tmp))) (let ((kM3e64@body (kM3e51@gen-syntax-case kM3e62@x kM3e5d@keys kM3e5e@clauses kM3e53@r kM3e54@mr))) (list (kM2dd3@kM2cff@build-lambda '#f (list kM3e62@x) kM3e64@body) (kM3099@chi-expr kM3e5c@expr kM3e53@r kM3e54@mr)))))) kM3e5a@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3e58@t)))))))) (set! kM4b51@kM307f@syntax-case-transformer kM307f@syntax-case-transformer) (set! kM3081@ellipsis-map (lambda (kM3ed6@proc kM3ed7@ls . kM3eda@ls*) (let ((kM3edd@who '#f)) (begin (set! kM3edd@who '...) (begin (if (not (list? kM3ed7@ls)) (assertion-violation kM3edd@who '"not a list" kM3ed7@ls) (void)) (if (not (null? kM3eda@ls*)) (let ((kM3ede@n (length kM3ed7@ls))) (for-each (lambda (kM3ee0@x) (begin (if (not (list? kM3ee0@x)) (assertion-violation kM3edd@who '"not a list" kM3ee0@x) (void)) (if (not (= (length kM3ee0@x) kM3ede@n)) (assertion-violation kM3edd@who '"length mismatch" kM3ed7@ls kM3ee0@x) (void)))) kM3eda@ls*)) (void)) (apply map kM3ed6@proc kM3ed7@ls kM3eda@ls*)))))) (set! kM4b52@kM3081@ellipsis-map kM3081@ellipsis-map) (set! kM3083@syntax-transformer (let ((kM3ee3@gen-syntax '#f) (kM3ee5@gen-ref '#f) (kM3ee7@gen-append '#f) (kM3ee9@gen-mappend '#f) (kM3eeb@gen-map '#f) (kM3eed@gen-cons '#f) (kM3eef@gen-vector '#f) (kM3ef1@regen '#f)) (begin (set! kM3ee3@gen-syntax (lambda (kM3f5a@src kM3f5b@e kM3f5c@r kM3f5d@maps kM3f5e@ellipsis? kM3f5f@vec?) (let ((kM3f66@t kM3f5b@e)) (let ((kM3f68@ls/false (kM3077@syntax-dispatch kM3f66@t 'any))) (if (and kM3f68@ls/false (apply (lambda (kM3f6a@dots) (kM3f5e@ellipsis? kM3f6a@dots)) kM3f68@ls/false)) (apply (lambda (kM3f6c@dots) (kM3157@syntax-violation '#f '"misplaced ellipsis in syntax form" kM3f5a@src)) kM3f68@ls/false) (let ((kM3f6e@t kM3f66@t)) (let ((kM3f70@ls/false (kM3077@syntax-dispatch kM3f6e@t 'any))) (if (and kM3f70@ls/false (apply (lambda (kM3f72@id) (kM2e70@id? kM3f72@id)) kM3f70@ls/false)) (apply (lambda (kM3f74@id) (let ((kM3f76@label (kM2e86@id->label kM3f5b@e))) (let ((kM3f78@b (kM2e88@label->binding kM3f76@label kM3f5c@r))) (if (eq? (kM2e8c@binding-type kM3f78@b) 'syntax) (call-with-values (lambda () (let ((kM3f7e@var.lev (kM2e8e@binding-value kM3f78@b))) (kM3ee5@gen-ref kM3f5a@src (car kM3f7e@var.lev) (cdr kM3f7e@var.lev) kM3f5d@maps))) (lambda (kM3f80@kM3f7b kM3f81@kM3f7d) (let ((kM3f84@maps kM3f81@kM3f7d) (kM3f85@var kM3f80@kM3f7b)) (values (list 'ref kM3f85@var) kM3f84@maps)))) (values (list 'quote kM3f5b@e) kM3f5d@maps))))) kM3f70@ls/false) (let ((kM3f88@t kM3f6e@t)) (let ((kM3f8a@ls/false (kM3077@syntax-dispatch kM3f88@t '(any any)))) (if (and kM3f8a@ls/false (apply (lambda (kM3f8c@dots kM3f8d@e) (kM3f5e@ellipsis? kM3f8c@dots)) kM3f8a@ls/false)) (apply (lambda (kM3f90@dots kM3f91@e) (if kM3f5f@vec? (kM3157@syntax-violation '#f '"misplaced ellipsis in syntax form" kM3f5a@src) (kM3ee3@gen-syntax kM3f5a@src kM3f91@e kM3f5c@r kM3f5d@maps (lambda (kM3f94@x) '#f) '#f))) kM3f8a@ls/false) (let ((kM3f96@t kM3f88@t)) (let ((kM3f98@ls/false (kM3077@syntax-dispatch kM3f96@t '(any any . any)))) (if (and kM3f98@ls/false (apply (lambda (kM3f9a@x kM3f9b@dots kM3f9c@y) (kM3f5e@ellipsis? kM3f9b@dots)) kM3f98@ls/false)) (apply (lambda (kM3fa0@x kM3fa1@dots kM3fa2@y) (let kM3fb8@f ((kM3fa6@y kM3fa2@y) (kM3fa7@k (lambda (kM3faa@maps) (call-with-values (lambda () (kM3ee3@gen-syntax kM3f5a@src kM3fa0@x kM3f5c@r (cons '() kM3faa@maps) kM3f5e@ellipsis? '#f)) (lambda (kM3fb0@kM3fad kM3fb1@kM3faf) (let ((kM3fb4@maps kM3fb1@kM3faf) (kM3fb5@x kM3fb0@kM3fad)) (if (null? (car kM3fb4@maps)) (kM3157@syntax-violation '#f '"extra ellipsis in syntax form" kM3f5a@src) (values (kM3eeb@gen-map kM3fb5@x (car kM3fb4@maps)) (cdr kM3fb4@maps))))))))) (let ((kM3fba@t kM3fa6@y)) (let ((kM3fbc@ls/false (kM3077@syntax-dispatch kM3fba@t '()))) (if kM3fbc@ls/false (apply (lambda () (kM3fa7@k kM3f5d@maps)) kM3fbc@ls/false) (let ((kM3fbe@t kM3fba@t)) (let ((kM3fc0@ls/false (kM3077@syntax-dispatch kM3fbe@t '(any . any)))) (if (and kM3fc0@ls/false (apply (lambda (kM3fc2@dots kM3fc3@y) (kM3f5e@ellipsis? kM3fc2@dots)) kM3fc0@ls/false)) (apply (lambda (kM3fc6@dots kM3fc7@y) (kM3fb8@f kM3fc7@y (lambda (kM3fca@maps) (call-with-values (lambda () (kM3fa7@k (cons '() kM3fca@maps))) (lambda (kM3fd0@kM3fcd kM3fd1@kM3fcf) (let ((kM3fd4@maps kM3fd1@kM3fcf) (kM3fd5@x kM3fd0@kM3fcd)) (if (null? (car kM3fd4@maps)) (kM3157@syntax-violation '#f '"extra ellipsis in syntax form" kM3f5a@src) (values (kM3ee9@gen-mappend kM3fd5@x (car kM3fd4@maps)) (cdr kM3fd4@maps))))))))) kM3fc0@ls/false) (let ((kM3fd8@t kM3fbe@t)) (let ((kM3fda@ls/false (kM3077@syntax-dispatch kM3fd8@t '_))) (if kM3fda@ls/false (apply (lambda () (call-with-values (lambda () (kM3ee3@gen-syntax kM3f5a@src kM3fa6@y kM3f5c@r kM3f5d@maps kM3f5e@ellipsis? kM3f5f@vec?)) (lambda (kM3fe0@kM3fdd kM3fe1@kM3fdf) (let ((kM3fe4@maps kM3fe1@kM3fdf) (kM3fe5@y kM3fe0@kM3fdd)) (call-with-values (lambda () (kM3fa7@k kM3fe4@maps)) (lambda (kM3fec@kM3fe9 kM3fed@kM3feb) (let ((kM3ff0@maps kM3fed@kM3feb) (kM3ff1@x kM3fec@kM3fe9)) (values (kM3ee7@gen-append kM3ff1@x kM3fe5@y) kM3ff0@maps)))))))) kM3fda@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3fd8@t)))))))))))) kM3f98@ls/false) (let ((kM3ff4@t kM3f96@t)) (let ((kM3ff6@ls/false (kM3077@syntax-dispatch kM3ff4@t '(any . any)))) (if kM3ff6@ls/false (apply (lambda (kM3ff8@x kM3ff9@y) (call-with-values (lambda () (kM3ee3@gen-syntax kM3f5a@src kM3ff8@x kM3f5c@r kM3f5d@maps kM3f5e@ellipsis? '#f)) (lambda (kM4000@kM3ffd kM4001@kM3fff) (let ((kM4004@maps kM4001@kM3fff) (kM4005@xnew kM4000@kM3ffd)) (call-with-values (lambda () (kM3ee3@gen-syntax kM3f5a@src kM3ff9@y kM3f5c@r kM4004@maps kM3f5e@ellipsis? kM3f5f@vec?)) (lambda (kM400c@kM4009 kM400d@kM400b) (let ((kM4010@maps kM400d@kM400b) (kM4011@ynew kM400c@kM4009)) (values (kM3eed@gen-cons kM3f5b@e kM3ff8@x kM3ff9@y kM4005@xnew kM4011@ynew) kM4010@maps)))))))) kM3ff6@ls/false) (let ((kM4014@t kM3ff4@t)) (let ((kM4016@ls/false (kM3077@syntax-dispatch kM4014@t '#(vector each-any)))) (if kM4016@ls/false (apply (lambda (kM4018@ls) (call-with-values (lambda () (kM3ee3@gen-syntax kM3f5a@src kM4018@ls kM3f5c@r kM3f5d@maps kM3f5e@ellipsis? '#t)) (lambda (kM401e@kM401b kM401f@kM401d) (let ((kM4022@maps kM401f@kM401d) (kM4023@lsnew kM401e@kM401b)) (values (kM3eef@gen-vector kM3f5b@e kM4018@ls kM4023@lsnew) kM4022@maps))))) kM4016@ls/false) (let ((kM4026@t kM4014@t)) (let ((kM4028@ls/false (kM3077@syntax-dispatch kM4026@t '_))) (if kM4028@ls/false (apply (lambda () (values (list 'quote kM3f5b@e) kM3f5d@maps)) kM4028@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM4026@t)))))))))))))))))))))))) (set! kM3ee5@gen-ref (lambda (kM3f40@src kM3f41@var kM3f42@level kM3f43@maps) (if (= kM3f42@level '0) (values kM3f41@var kM3f43@maps) (if (null? kM3f43@maps) (kM3157@syntax-violation '#f '"missing ellipsis in syntax form" kM3f40@src) (call-with-values (lambda () (kM3ee5@gen-ref kM3f40@src kM3f41@var (- kM3f42@level '1) (cdr kM3f43@maps))) (lambda (kM3f4c@kM3f49 kM3f4d@kM3f4b) (let ((kM3f50@outer-maps kM3f4d@kM3f4b) (kM3f51@outer-var kM3f4c@kM3f49)) (let ((kM3f54@t (assq kM3f51@outer-var (car kM3f43@maps)))) (if kM3f54@t ((lambda (kM3f56@b) (values (cdr kM3f56@b) kM3f43@maps)) kM3f54@t) (let ((kM3f58@inner-var (kM2df8@gen-lexical 'tmp))) (values kM3f58@inner-var (cons (cons (cons kM3f51@outer-var kM3f58@inner-var) (car kM3f43@maps)) kM3f50@outer-maps)))))))))))) (set! kM3ee7@gen-append (lambda (kM3f3c@x kM3f3d@y) (if (fast-equal? kM3f3d@y ''()) kM3f3c@x (list 'append kM3f3c@x kM3f3d@y)))) (set! kM3ee9@gen-mappend (lambda (kM3f38@e kM3f39@map-env) (list 'apply '(primitive append) (kM3eeb@gen-map kM3f38@e kM3f39@map-env)))) (set! kM3eeb@gen-map (lambda (kM3f26@e kM3f27@map-env) (let ((kM3f2a@formals (map cdr kM3f27@map-env)) (kM3f2b@actuals (map (lambda (kM3f2e@x) (list 'ref (car kM3f2e@x))) kM3f27@map-env))) (if (eq? (car kM3f26@e) 'ref) (car kM3f2b@actuals) (if (for-all (lambda (kM3f30@x) (and (eq? (car kM3f30@x) 'ref) (memq (cadr kM3f30@x) kM3f2a@formals))) (cdr kM3f26@e)) (let ((kM3f32@args (map (let ((kM3f34@r (map cons kM3f2a@formals kM3f2b@actuals))) (lambda (kM3f36@x) (cdr (assq (cadr kM3f36@x) kM3f34@r)))) (cdr kM3f26@e)))) (cons 'map (cons (list 'primitive (car kM3f26@e)) kM3f32@args))) (cons* 'map (list 'lambda kM3f2a@formals kM3f26@e) kM3f2b@actuals)))))) (set! kM3eed@gen-cons (lambda (kM3f16@e kM3f17@x kM3f18@y kM3f19@xnew kM3f1a@ynew) (let ((kM3f20@t (car kM3f1a@ynew))) (if (memv kM3f20@t '(quote)) (if (eq? (car kM3f19@xnew) 'quote) (let ((kM3f22@xnew (cadr kM3f19@xnew)) (kM3f23@ynew (cadr kM3f1a@ynew))) (if (and (eq? kM3f22@xnew kM3f17@x) (eq? kM3f23@ynew kM3f18@y)) (list 'quote kM3f16@e) (list 'quote (cons kM3f22@xnew kM3f23@ynew)))) (if (null? (cadr kM3f1a@ynew)) (list 'list kM3f19@xnew) (list 'cons kM3f19@xnew kM3f1a@ynew))) (if (memv kM3f20@t '(list)) (cons 'list (cons kM3f19@xnew (cdr kM3f1a@ynew))) (list 'cons kM3f19@xnew kM3f1a@ynew)))))) (set! kM3eef@gen-vector (lambda (kM3f10@e kM3f11@ls kM3f12@lsnew) (if (eq? (car kM3f12@lsnew) 'quote) (if (eq? (cadr kM3f12@lsnew) kM3f11@ls) (list 'quote kM3f10@e) (list 'quote (list->vector (cadr kM3f12@lsnew)))) (if (eq? (car kM3f12@lsnew) 'list) (cons 'vector (cdr kM3f12@lsnew)) (list 'list->vector kM3f12@lsnew))))) (set! kM3ef1@regen (lambda (kM3f0a@x) (let ((kM3f0c@t (car kM3f0a@x))) (if (memv kM3f0c@t '(ref)) (cadr kM3f0a@x) (if (memv kM3f0c@t '(primitive)) (list 'primitive (cadr kM3f0a@x)) (if (memv kM3f0c@t '(quote)) (list 'quote (cadr kM3f0a@x)) (if (memv kM3f0c@t '(lambda)) (kM2dd3@kM2cff@build-lambda '#f (cadr kM3f0a@x) (kM3ef1@regen (caddr kM3f0a@x))) (if (memv kM3f0c@t '(map)) (let ((kM3f0e@ls (map kM3ef1@regen (cdr kM3f0a@x)))) (cons '(primitive ellipsis-map) kM3f0e@ls)) (cons (list 'primitive (car kM3f0a@x)) (map kM3ef1@regen (cdr kM3f0a@x))))))))))) (lambda (kM3ef2@e kM3ef3@r kM3ef4@mr) (let ((kM3ef8@t kM3ef2@e)) (let ((kM3efa@ls/false (kM3077@syntax-dispatch kM3ef8@t '(_ any)))) (if kM3efa@ls/false (apply (lambda (kM3efc@x) (call-with-values (lambda () (kM3ee3@gen-syntax kM3ef2@e kM3efc@x kM3ef3@r '() kM3079@ellipsis? '#f)) (lambda (kM3f02@kM3eff kM3f03@kM3f01) (let ((kM3f06@maps kM3f03@kM3f01) (kM3f07@e kM3f02@kM3eff)) (kM3ef1@regen kM3f07@e))))) kM3efa@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM3ef8@t)))))))) (set! kM4b53@kM3083@syntax-transformer kM3083@syntax-transformer) (set! kM3085@core-macro-transformer (lambda (kM402a@name) (let ((kM402c@t kM402a@name)) (if (memv kM402c@t '(quote)) kM3027@quote-transformer (if (memv kM402c@t '(lambda)) kM302b@lambda-transformer (if (memv kM402c@t '(case-lambda)) kM3029@case-lambda-transformer (if (memv kM402c@t '(letrec)) kM300f@letrec-transformer (if (memv kM402c@t '(letrec*)) kM3011@letrec*-transformer (if (memv kM402c@t '(let)) kM300d@let-transformer (if (memv kM402c@t '(if)) kM301f@if-transformer (if (memv kM402c@t '(and)) kM3021@and-transformer (if (memv kM402c@t '(or)) kM3023@or-transformer (if (memv kM402c@t '(foreign-call)) kM3073@foreign-call-transformer (if (memv kM402c@t '(syntax-case)) kM307f@syntax-case-transformer (if (memv kM402c@t '(syntax)) kM3083@syntax-transformer (if (memv kM402c@t '(type-descriptor)) kM3015@type-descriptor-transformer (if (memv kM402c@t '(record-type-descriptor)) kM3017@record-type-descriptor-transformer (if (memv kM402c@t '(record-constructor-descriptor)) kM3019@record-constructor-descriptor-transformer (if (memv kM402c@t '(fluid-let-syntax)) kM3013@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" kM402a@name)))))))))))))))))))) (set! kM4b54@kM3085@core-macro-transformer kM3085@core-macro-transformer) (set! kM3087@symbol-macro (lambda (kM402e@x kM402f@set) (let ((kM4032@t kM402e@x)) (let ((kM4034@ls/false (kM3077@syntax-dispatch kM4032@t '(_ any)))) (if (and kM4034@ls/false (apply (lambda (kM4036@name) (and (kM2e70@id? kM4036@name) (memq (kM2e72@id->sym kM4036@name) kM402f@set))) kM4034@ls/false)) (apply (lambda (kM4038@name) (kM302d@bless (list 'quote kM4038@name))) kM4034@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM4032@t)))))) (set! kM4b55@kM3087@symbol-macro kM3087@symbol-macro) (set! kM3089@macro-transformer (lambda (kM403a@x) (if (procedure? kM403a@x) kM403a@x (if (symbol? kM403a@x) (let ((kM403c@t kM403a@x)) (if (memv kM403c@t '(define-record-type)) kM306b@define-record-type-macro (if (memv kM403c@t '(define-struct)) kM3069@define-struct-macro (if (memv kM403c@t '(include)) kM305f@include-macro (if (memv kM403c@t '(cond)) kM305b@cond-macro (if (memv kM403c@t '(let)) kM3033@let-macro (if (memv kM403c@t '(do)) kM3053@do-macro (if (memv kM403c@t '(or)) kM3057@or-macro (if (memv kM403c@t '(and)) kM3059@and-macro (if (memv kM403c@t '(let*)) kM3055@let*-macro (if (memv kM403c@t '(let-values)) kM3035@let-values-macro (if (memv kM403c@t '(let*-values)) kM3037@let*-values-macro (if (memv kM403c@t '(syntax-rules)) kM3063@syntax-rules-macro (if (memv kM403c@t '(quasiquote)) kM3065@quasiquote-macro (if (memv kM403c@t '(quasisyntax)) kM3067@quasisyntax-macro (if (memv kM403c@t '(with-syntax)) kM302f@with-syntax-macro (if (memv kM403c@t '(when)) kM301b@when-macro (if (memv kM403c@t '(unless)) kM301d@unless-macro (if (memv kM403c@t '(case)) kM3025@case-macro (if (memv kM403c@t '(identifier-syntax)) kM3051@identifier-syntax-macro (if (memv kM403c@t '(time)) kM3049@time-macro (if (memv kM403c@t '(delay)) kM304b@delay-macro (if (memv kM403c@t '(assert)) kM304d@assert-macro (if (memv kM403c@t '(endianness)) kM304f@endianness-macro (if (memv kM403c@t '(guard)) kM3045@guard-macro (if (memv kM403c@t '(define-enumeration)) kM3047@define-enumeration-macro (if (memv kM403c@t '(trace-lambda)) kM3039@trace-lambda-macro (if (memv kM403c@t '(trace-define)) kM303b@trace-define-macro (if (memv kM403c@t '(trace-define-syntax)) kM303d@trace-define-syntax-macro (if (memv kM403c@t '(trace-let-syntax)) kM3041@trace-let-syntax-macro (if (memv kM403c@t '(trace-letrec-syntax)) kM3043@trace-letrec-syntax-macro (if (memv kM403c@t '(define-condition-type)) kM306d@define-condition-type-macro (if (memv kM403c@t '(parameterize)) kM3071@parameterize-macro (if (memv kM403c@t '(include-into)) kM3061@include-into-macro (if (memv kM403c@t '(eol-style)) (lambda (kM403e@x) (kM3087@symbol-macro kM403e@x '(none lf cr crlf nel crnel ls))) (if (memv kM403c@t '(error-handling-mode)) (lambda (kM4040@x) (kM3087@symbol-macro kM4040@x '(ignore raise replace))) (if (memv kM403c@t '(buffer-mode)) (lambda (kM4042@x) (kM3087@symbol-macro kM4042@x '(none line block))) (if (memv kM403c@t '(file-options)) kM2deb@file-options-macro (if (memv kM403c@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) kM306f@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" kM403a@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" kM403a@x))))) (set! kM4b56@kM3089@macro-transformer kM3089@macro-transformer) (set! kM308b@local-macro-transformer (lambda (kM4044@x) (car kM4044@x))) (set! kM4b57@kM308b@local-macro-transformer kM308b@local-macro-transformer) (set! kM308d@do-macro-call (lambda (kM4046@transformer kM4047@expr) (let ((kM404a@out (kM4046@transformer (kM2e5a@add-mark kM2e54@anti-mark kM4047@expr '#f)))) (begin (let kM404e@f ((kM404c@x kM404a@out)) (if (not (kM2e3c@stx? kM404c@x)) (if (pair? kM404c@x) (begin (kM404e@f (car kM404c@x)) (kM404e@f (cdr kM404c@x))) (if (vector? kM404c@x) (vector-for-each kM404e@f kM404c@x) (if (symbol? kM404c@x) (kM3157@syntax-violation '#f '"raw symbol encountered in output of macro" kM4047@expr kM404c@x) (void)))) (void))) (kM2e5a@add-mark (kM2e52@gen-mark) kM404a@out kM4047@expr))))) (set! kM4b58@kM308d@do-macro-call kM308d@do-macro-call) (set! kM308f@chi-macro (lambda (kM4050@p kM4051@e) (kM308d@do-macro-call (kM3089@macro-transformer kM4050@p) kM4051@e))) (set! kM4b59@kM308f@chi-macro kM308f@chi-macro) (set! kM3091@chi-local-macro (lambda (kM4054@p kM4055@e) (kM308d@do-macro-call (kM308b@local-macro-transformer kM4054@p) kM4055@e))) (set! kM4b5a@kM3091@chi-local-macro kM3091@chi-local-macro) (set! kM3093@chi-global-macro (lambda (kM4058@p kM4059@e) (let ((kM405c@lib (car kM4058@p)) (kM405d@loc (cdr kM4058@p))) (begin (kM2c87@kM2ad6@visit-library kM405c@lib) (let ((kM4060@x (symbol-value kM405d@loc))) (let ((kM4062@transformer (if (procedure? kM4060@x) kM4060@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" kM4060@x)))) (kM308d@do-macro-call kM4062@transformer kM4059@e))))))) (set! kM4b5b@kM3093@chi-global-macro kM3093@chi-global-macro) (set! kM3095@chi-expr* (lambda (kM4064@e* kM4065@r kM4066@mr) (if (null? kM4064@e*) '() (let ((kM406a@e (kM3099@chi-expr (car kM4064@e*) kM4065@r kM4066@mr))) (cons kM406a@e (kM3095@chi-expr* (cdr kM4064@e*) kM4065@r kM4066@mr)))))) (set! kM4b5c@kM3095@chi-expr* kM3095@chi-expr*) (set! kM3097@chi-application (lambda (kM406c@e kM406d@r kM406e@mr) (let ((kM4072@t kM406c@e)) (let ((kM4074@ls/false (kM3077@syntax-dispatch kM4072@t '(any . each-any)))) (if kM4074@ls/false (apply (lambda (kM4076@rator kM4077@rands) (let ((kM407a@rator (kM3099@chi-expr kM4076@rator kM406d@r kM406e@mr))) (cons kM407a@rator (kM3095@chi-expr* kM4077@rands kM406d@r kM406e@mr)))) kM4074@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM4072@t)))))) (set! kM4b5d@kM3097@chi-application kM3097@chi-application) (set! kM3099@chi-expr (lambda (kM407c@e kM407d@r kM407e@mr) (call-with-values (lambda () (kM2e92@syntax-type kM407c@e kM407d@r)) (lambda (kM4088@kM4083 kM4089@kM4085 kM408a@kM4087) (let ((kM408e@kwd kM408a@kM4087) (kM408f@value kM4089@kM4085) (kM4090@type kM4088@kM4083)) (let ((kM4094@t kM4090@type)) (if (memv kM4094@t '(core-macro)) (let ((kM4096@transformer (kM3085@core-macro-transformer kM408f@value))) (kM4096@transformer kM407c@e kM407d@r kM407e@mr)) (if (memv kM4094@t '(global)) (let ((kM4098@lib (car kM408f@value))) (let ((kM409a@loc (cdr kM408f@value))) (begin ((kM30df@inv-collector) kM4098@lib) kM409a@loc))) (if (memv kM4094@t '(core-prim)) (let ((kM409c@name kM408f@value)) (list 'primitive kM409c@name)) (if (memv kM4094@t '(call)) (kM3097@chi-application kM407c@e kM407d@r kM407e@mr) (if (memv kM4094@t '(lexical)) (let ((kM409e@lex (kM3001@lexical-var kM408f@value))) kM409e@lex) (if (memv kM4094@t '(global-macro global-macro!)) (kM3099@chi-expr (kM3093@chi-global-macro kM408f@value kM407c@e) kM407d@r kM407e@mr) (if (memv kM4094@t '(local-macro local-macro!)) (kM3099@chi-expr (kM3091@chi-local-macro kM408f@value kM407c@e) kM407d@r kM407e@mr) (if (memv kM4094@t '(macro macro!)) (kM3099@chi-expr (kM308f@chi-macro kM408f@value kM407c@e) kM407d@r kM407e@mr) (if (memv kM4094@t '(constant)) (let ((kM40a0@datum kM408f@value)) (list 'quote kM40a0@datum)) (if (memv kM4094@t '(set!)) (kM309b@chi-set! kM407c@e kM407d@r kM407e@mr) (if (memv kM4094@t '(begin)) (let ((kM40a2@t kM407c@e)) (let ((kM40a4@ls/false (kM3077@syntax-dispatch kM40a2@t '(_ any . each-any)))) (if kM40a4@ls/false (apply (lambda (kM40a6@x kM40a7@x*) (kM2dd5@kM2d2f@build-sequence '#f (kM3095@chi-expr* (cons kM40a6@x kM40a7@x*) kM407d@r kM407e@mr))) kM40a4@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM40a2@t)))) (if (memv kM4094@t '(let-syntax letrec-syntax)) (let ((kM40aa@t kM407c@e)) (let ((kM40ac@ls/false (kM3077@syntax-dispatch kM40aa@t '(_ #(each (any any)) any . each-any)))) (if (and kM40ac@ls/false (apply (lambda (kM40ae@xlhs* kM40af@xrhs* kM40b0@xbody kM40b1@xbody*) (if (not (kM2e78@valid-bound-ids? kM40ae@xlhs*)) (kM3157@syntax-violation '#f '"invalid identifiers" kM407c@e) (void))) kM40ac@ls/false)) (apply (lambda (kM40b6@xlhs* kM40b7@xrhs* kM40b8@xbody kM40b9@xbody*) (let ((kM40be@xlab* (map kM2dfc@gen-label kM40b6@xlhs*))) (let ((kM40c0@xrib (kM2e30@make-full-rib kM40b6@xlhs* kM40be@xlab*))) (let ((kM40c2@xb* (map (lambda (kM40c4@x) (kM2ea8@make-eval-transformer (kM30d1@expand-transformer (if (eq? kM4090@type 'let-syntax) kM40c4@x (kM2e5c@add-subst kM40c0@xrib kM40c4@x)) kM407e@mr))) kM40b7@xrhs*))) (kM2dd5@kM2d2f@build-sequence '#f (kM3095@chi-expr* (map (lambda (kM40c6@x) (kM2e5c@add-subst kM40c0@xrib kM40c6@x)) (cons kM40b8@xbody kM40b9@xbody*)) (append (map cons kM40be@xlab* kM40c2@xb*) kM407d@r) (append (map cons kM40be@xlab* kM40c2@xb*) kM407e@mr))))))) kM40ac@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM40aa@t)))) (if (memv kM4094@t '(displaced-lexical)) (kM3157@syntax-violation '#f '"identifier out of context" kM407c@e) (if (memv kM4094@t '(syntax)) (kM3157@syntax-violation '#f '"reference to pattern variable outside a syntax form" kM407c@e) (if (memv kM4094@t '(define define-syntax module import library)) (kM3157@syntax-violation '#f (string-append (let ((kM40c8@t kM4090@type)) (if (memv kM40c8@t '(define)) '"a definition" (if (memv kM40c8@t '(define-syntax)) '"a define-syntax" (if (memv kM40c8@t '(module)) '"a module definition" (if (memv kM40c8@t '(library)) '"a library definition" (if (memv kM40c8@t '(import)) '"an import declaration" (if (memv kM40c8@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") kM407c@e) (if (memv kM4094@t '(mutable)) (kM3157@syntax-violation '#f '"attempt to reference an unexportable variable" kM407c@e) (kM3157@syntax-violation '#f '"invalid expression" kM407c@e))))))))))))))))))))))) (set! kM4b5e@kM3099@chi-expr kM3099@chi-expr) (set! kM309b@chi-set! (lambda (kM40ca@e kM40cb@r kM40cc@mr) (let ((kM40d0@t kM40ca@e)) (let ((kM40d2@ls/false (kM3077@syntax-dispatch kM40d0@t '(_ any any)))) (if (and kM40d2@ls/false (apply (lambda (kM40d4@x kM40d5@v) (kM2e70@id? kM40d4@x)) kM40d2@ls/false)) (apply (lambda (kM40d8@x kM40d9@v) (call-with-values (lambda () (kM2e92@syntax-type kM40d8@x kM40cb@r)) (lambda (kM40e2@kM40dd kM40e3@kM40df kM40e4@kM40e1) (let ((kM40e8@kwd kM40e4@kM40e1) (kM40e9@value kM40e3@kM40df) (kM40ea@type kM40e2@kM40dd)) (let ((kM40ee@t kM40ea@type)) (if (memv kM40ee@t '(lexical)) (begin (kM3005@set-lexical-mutable! kM40e9@value '#t) (list 'set! (kM3001@lexical-var kM40e9@value) (kM3099@chi-expr kM40d9@v kM40cb@r kM40cc@mr))) (if (memv kM40ee@t '(core-prim)) (kM3157@syntax-violation '#f '"cannot modify imported core primitive" kM40ca@e) (if (memv kM40ee@t '(global)) (kM3157@syntax-violation '#f '"attempt to modify imported binding" kM40ca@e) (if (memv kM40ee@t '(global-macro!)) (kM3099@chi-expr (kM3093@chi-global-macro kM40e9@value kM40ca@e) kM40cb@r kM40cc@mr) (if (memv kM40ee@t '(local-macro!)) (kM3099@chi-expr (kM3091@chi-local-macro kM40e9@value kM40ca@e) kM40cb@r kM40cc@mr) (if (memv kM40ee@t '(mutable)) (kM3157@syntax-violation '#f '"attempt to assign to an unexportable variable" kM40ca@e) (kM3157@syntax-violation '#f '"invalid syntax" kM40ca@e)))))))))))) kM40d2@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM40d0@t)))))) (set! kM4b5f@kM309b@chi-set! kM309b@chi-set!) (set! kM309d@verify-formals (lambda (kM40f0@fmls kM40f1@stx) (let ((kM40f4@t kM40f0@fmls)) (let ((kM40f6@ls/false (kM3077@syntax-dispatch kM40f4@t 'each-any))) (if kM40f6@ls/false (apply (lambda (kM40f8@x*) (if (not (kM2e78@valid-bound-ids? kM40f8@x*)) (kM3031@invalid-fmls-error kM40f1@stx kM40f0@fmls) (void))) kM40f6@ls/false) (let ((kM40fa@t kM40f4@t)) (let ((kM40fc@ls/false (kM3077@syntax-dispatch kM40fa@t '#(each+ any () any)))) (if kM40fc@ls/false (apply (lambda (kM40fe@x* kM40ff@x) (if (not (kM2e78@valid-bound-ids? (cons kM40ff@x kM40fe@x*))) (kM3031@invalid-fmls-error kM40f1@stx kM40f0@fmls) (void))) kM40fc@ls/false) (let ((kM4102@t kM40fa@t)) (let ((kM4104@ls/false (kM3077@syntax-dispatch kM4102@t '_))) (if kM4104@ls/false (apply (lambda () (kM3157@syntax-violation '#f '"invalid syntax" kM40f1@stx)) kM4104@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM4102@t)))))))))))) (set! kM4b60@kM309d@verify-formals kM309d@verify-formals) (set! kM309f@chi-lambda-clause (lambda (kM4106@stx kM4107@fmls kM4108@body* kM4109@r kM410a@mr) (let ((kM4110@t kM4107@fmls)) (let ((kM4112@ls/false (kM3077@syntax-dispatch kM4110@t 'each-any))) (if kM4112@ls/false (apply (lambda (kM4114@x*) (begin (kM309d@verify-formals kM4107@fmls kM4106@stx) (let ((kM4116@lex* (map kM2df8@gen-lexical kM4114@x*)) (kM4117@lab* (map kM2dfc@gen-label kM4114@x*))) (values kM4116@lex* (kM30af@chi-internal (kM2e5c@add-subst (kM2e30@make-full-rib kM4114@x* kM4117@lab*) kM4108@body*) (kM3009@add-lexicals kM4117@lab* kM4116@lex* kM4109@r) kM410a@mr))))) kM4112@ls/false) (let ((kM411a@t kM4110@t)) (let ((kM411c@ls/false (kM3077@syntax-dispatch kM411a@t '#(each+ any () any)))) (if kM411c@ls/false (apply (lambda (kM411e@x* kM411f@x) (begin (kM309d@verify-formals kM4107@fmls kM4106@stx) (let ((kM4122@lex* (map kM2df8@gen-lexical kM411e@x*)) (kM4123@lab* (map kM2dfc@gen-label kM411e@x*)) (kM4124@lex (kM2df8@gen-lexical kM411f@x)) (kM4125@lab (kM2dfc@gen-label kM411f@x))) (values (append kM4122@lex* kM4124@lex) (kM30af@chi-internal (kM2e5c@add-subst (kM2e30@make-full-rib (cons kM411f@x kM411e@x*) (cons kM4125@lab kM4123@lab*)) kM4108@body*) (kM3009@add-lexicals (cons kM4125@lab kM4123@lab*) (cons kM4124@lex kM4122@lex*) kM4109@r) kM410a@mr))))) kM411c@ls/false) (let ((kM412a@t kM411a@t)) (let ((kM412c@ls/false (kM3077@syntax-dispatch kM412a@t '_))) (if kM412c@ls/false (apply (lambda () (kM3157@syntax-violation '#f '"invalid syntax" kM4107@fmls)) kM412c@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM412a@t)))))))))))) (set! kM4b61@kM309f@chi-lambda-clause kM309f@chi-lambda-clause) (set! kM30a1@chi-lambda-clause* (lambda (kM412e@stx kM412f@fmls* kM4130@body** kM4131@r kM4132@mr) (if (null? kM412f@fmls*) (values '() '()) (call-with-values (lambda () (kM309f@chi-lambda-clause kM412e@stx (car kM412f@fmls*) (car kM4130@body**) kM4131@r kM4132@mr)) (lambda (kM413c@kM4139 kM413d@kM413b) (let ((kM4140@b kM413d@kM413b) (kM4141@a kM413c@kM4139)) (call-with-values (lambda () (kM30a1@chi-lambda-clause* kM412e@stx (cdr kM412f@fmls*) (cdr kM4130@body**) kM4131@r kM4132@mr)) (lambda (kM4148@kM4145 kM4149@kM4147) (let ((kM414c@b* kM4149@kM4147) (kM414d@a* kM4148@kM4145)) (values (cons kM4141@a kM414d@a*) (cons kM4140@b kM414c@b*))))))))))) (set! kM4b62@kM30a1@chi-lambda-clause* kM30a1@chi-lambda-clause*) (set! kM30a3@chi-defun (lambda (kM4150@x kM4151@r kM4152@mr) (let ((kM4156@fmls (car kM4150@x)) (kM4157@body* (cdr kM4150@x))) (call-with-values (lambda () (kM309f@chi-lambda-clause kM4156@fmls kM4156@fmls kM4157@body* kM4151@r kM4152@mr)) (lambda (kM415e@kM415b kM415f@kM415d) (let ((kM4162@body kM415f@kM415d) (kM4163@fmls kM415e@kM415b)) (kM2dd3@kM2cff@build-lambda '#f kM4163@fmls kM4162@body))))))) (set! kM4b63@kM30a3@chi-defun kM30a3@chi-defun) (set! kM30a5@chi-rhs (lambda (kM4166@rhs kM4167@r kM4168@mr) (let ((kM416c@t (car kM4166@rhs))) (if (memv kM416c@t '(defun)) (kM30a3@chi-defun (cdr kM4166@rhs) kM4167@r kM4168@mr) (if (memv kM416c@t '(expr)) (let ((kM416e@expr (cdr kM4166@rhs))) (kM3099@chi-expr kM416e@expr kM4167@r kM4168@mr)) (if (memv kM416c@t '(top-expr)) (let ((kM4170@expr (cdr kM4166@rhs))) (kM2dd5@kM2d2f@build-sequence '#f (list (kM3099@chi-expr kM4170@expr kM4167@r kM4168@mr) (kM2dd6@kM2d31@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" kM4166@rhs))))))) (set! kM4b64@kM30a5@chi-rhs kM30a5@chi-rhs) (set! kM30a7@expand-interaction-rhs*/init* (lambda (kM4172@lhs* kM4173@rhs* kM4174@init* kM4175@r kM4176@mr) (let kM4180@f ((kM417c@lhs* kM4172@lhs*) (kM417d@rhs* kM4173@rhs*)) (if (null? kM417c@lhs*) (map (lambda (kM4182@x) (kM3099@chi-expr kM4182@x kM4175@r kM4176@mr)) kM4174@init*) (let ((kM4184@lhs (car kM417c@lhs*)) (kM4185@rhs (car kM417d@rhs*))) (let ((kM4188@t (car kM4185@rhs))) (if (memv kM4188@t '(defun)) (let ((kM418a@rhs (kM30a3@chi-defun (cdr kM4185@rhs) kM4175@r kM4176@mr))) (cons (list 'set! kM4184@lhs kM418a@rhs) (kM4180@f (cdr kM417c@lhs*) (cdr kM417d@rhs*)))) (if (memv kM4188@t '(expr)) (let ((kM418c@rhs (kM3099@chi-expr (cdr kM4185@rhs) kM4175@r kM4176@mr))) (cons (list 'set! kM4184@lhs kM418c@rhs) (kM4180@f (cdr kM417c@lhs*) (cdr kM417d@rhs*)))) (if (memv kM4188@t '(top-expr)) (let ((kM418e@e (kM3099@chi-expr (cdr kM4185@rhs) kM4175@r kM4176@mr))) (cons kM418e@e (kM4180@f (cdr kM417c@lhs*) (cdr kM417d@rhs*)))) (error 'expand-interaction '"invallid" kM4185@rhs)))))))))) (set! kM4b65@kM30a7@expand-interaction-rhs*/init* kM30a7@expand-interaction-rhs*/init*) (set! kM30a9@chi-rhs* (lambda (kM4190@rhs* kM4191@r kM4192@mr) (let kM4198@f ((kM4196@ls kM4190@rhs*)) (if (null? kM4196@ls) '() (let ((kM419a@a (kM30a5@chi-rhs (car kM4196@ls) kM4191@r kM4192@mr))) (cons kM419a@a (kM4198@f (cdr kM4196@ls)))))))) (set! kM4b66@kM30a9@chi-rhs* kM30a9@chi-rhs*) (set! kM30ab@find-bound=? (lambda (kM419c@x kM419d@lhs* kM419e@rhs*) (if (null? kM419d@lhs*) '#f (if (kM2e74@bound-id=? kM419c@x (car kM419d@lhs*)) (car kM419e@rhs*) (kM30ab@find-bound=? kM419c@x (cdr kM419d@lhs*) (cdr kM419e@rhs*)))))) (set! kM4b67@kM30ab@find-bound=? kM30ab@find-bound=?) (set! kM30ad@find-dups (lambda (kM41a2@ls) (let kM41a8@f ((kM41a4@ls kM41a2@ls) (kM41a5@dups '())) (if (null? kM41a4@ls) kM41a5@dups (let ((kM41aa@t (kM30ab@find-bound=? (car kM41a4@ls) (cdr kM41a4@ls) (cdr kM41a4@ls)))) (if kM41aa@t ((lambda (kM41ac@x) (kM41a8@f (cdr kM41a4@ls) (cons (list (car kM41a4@ls) kM41ac@x) kM41a5@dups))) kM41aa@t) (kM41a8@f (cdr kM41a4@ls) kM41a5@dups))))))) (set! kM4b68@kM30ad@find-dups kM30ad@find-dups) (set! kM30af@chi-internal (lambda (kM41ae@e* kM41af@r kM41b0@mr) (let ((kM41b4@rib (kM2e24@make-empty-rib))) (call-with-values (lambda () (kM30cf@chi-body* (map (lambda (kM41c6@x) (kM2e5c@add-subst kM41b4@rib kM41c6@x)) (kM2e6e@syntax->list kM41ae@e*)) kM41af@r kM41b0@mr '() '() '() '() '() kM41b4@rib '#f)) (lambda (kM41c8@kM41b7 kM41c9@kM41b9 kM41ca@kM41bb kM41cb@kM41bd kM41cc@kM41bf kM41cd@kM41c1 kM41ce@kM41c3 kM41cf@kM41c5) (let ((kM41d8@_exp* kM41cf@kM41c5) (kM41d9@kwd* kM41ce@kM41c3) (kM41da@mod** kM41cd@kM41c1) (kM41db@rhs* kM41cc@kM41bf) (kM41dc@lex* kM41cb@kM41bd) (kM41dd@mr kM41ca@kM41bb) (kM41de@r kM41c9@kM41b9) (kM41df@e* kM41c8@kM41b7)) (begin (if (null? kM41df@e*) (kM3157@syntax-violation '#f '"no expression in body" kM41df@e*) (void)) (let ((kM41e8@init* (kM3095@chi-expr* (append (apply append (reverse kM41da@mod**)) kM41df@e*) kM41de@r kM41dd@mr))) (let ((kM41ea@rhs* (kM30a9@chi-rhs* kM41db@rhs* kM41de@r kM41dd@mr))) (kM2dda@kM2d39@build-letrec* '#f (reverse kM41dc@lex*) (reverse kM41ea@rhs*) (kM2dd5@kM2d2f@build-sequence '#f kM41e8@init*))))))))))) (set! kM4b69@kM30af@chi-internal kM30af@chi-internal) (set! kM30b1@parse-module (lambda (kM41ec@e) (let ((kM41ee@t kM41ec@e)) (let ((kM41f0@ls/false (kM3077@syntax-dispatch kM41ee@t '(_ each-any . each-any)))) (if kM41f0@ls/false (apply (lambda (kM41f2@export* kM41f3@b*) (begin (if (not (for-all kM2e70@id? kM41f2@export*)) (kM3157@syntax-violation '#f '"module exports must be identifiers" kM41ec@e) (void)) (values '#f (list->vector kM41f2@export*) kM41f3@b*))) kM41f0@ls/false) (let ((kM41f6@t kM41ee@t)) (let ((kM41f8@ls/false (kM3077@syntax-dispatch kM41f6@t '(_ any each-any . each-any)))) (if kM41f8@ls/false (apply (lambda (kM41fa@name kM41fb@export* kM41fc@b*) (begin (if (not (kM2e70@id? kM41fa@name)) (kM3157@syntax-violation '#f '"module name must be an identifier" kM41ec@e) (void)) (if (not (for-all kM2e70@id? kM41fb@export*)) (kM3157@syntax-violation '#f '"module exports must be identifiers" kM41ec@e) (void)) (values kM41fa@name (list->vector kM41fb@export*) kM41fc@b*))) kM41f8@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM41f6@t))))))))) (set! kM4b6a@kM30b1@parse-module kM30b1@parse-module) (set! kM30bb@module-interface? (lambda (kM4200@x) (and (simple-struct? kM4200@x) (eq? (simple-struct-name kM4200@x) 'module-interface)))) (set! kM4b6b@kM30bb@module-interface? kM30bb@module-interface?) (set! kM30bd@module-interface-first-mark (lambda (kM4202@x) (simple-struct-ref kM4202@x '0))) (set! kM4b6c@kM30bd@module-interface-first-mark kM30bd@module-interface-first-mark) (set! kM30bf@set-module-interface-first-mark! (lambda (kM4204@x kM4205@val) (simple-struct-set! kM4204@x '0 kM4205@val))) (set! kM4b6d@kM30bf@set-module-interface-first-mark! kM30bf@set-module-interface-first-mark!) (set! kM30c1@module-interface-exp-id-vec (lambda (kM4208@x) (simple-struct-ref kM4208@x '1))) (set! kM4b6e@kM30c1@module-interface-exp-id-vec kM30c1@module-interface-exp-id-vec) (set! kM30c3@set-module-interface-exp-id-vec! (lambda (kM420a@x kM420b@val) (simple-struct-set! kM420a@x '1 kM420b@val))) (set! kM4b6f@kM30c3@set-module-interface-exp-id-vec! kM30c3@set-module-interface-exp-id-vec!) (set! kM30c5@module-interface-exp-lab-vec (lambda (kM420e@x) (simple-struct-ref kM420e@x '2))) (set! kM4b70@kM30c5@module-interface-exp-lab-vec kM30c5@module-interface-exp-lab-vec) (set! kM30c7@set-module-interface-exp-lab-vec! (lambda (kM4210@x kM4211@val) (simple-struct-set! kM4210@x '2 kM4211@val))) (set! kM4b71@kM30c7@set-module-interface-exp-lab-vec! kM30c7@set-module-interface-exp-lab-vec!) (set! kM30c9@dummy '3) (set! kM4b72@kM30c9@dummy kM30c9@dummy) (set! kM30cb@module-interface-exp-id* (lambda (kM4214@iface kM4215@id) (let ((kM4219@diff-marks '#f)) (begin (set! kM4219@diff-marks (lambda (kM4220@ls kM4221@x) (begin (if (null? kM4220@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((kM4224@a (car kM4220@ls))) (if (eq? kM4224@a kM4221@x) '() (cons kM4224@a (kM4219@diff-marks (cdr kM4220@ls) kM4221@x))))))) (let ((kM421a@diff (kM4219@diff-marks (kM2e42@stx-mark* kM4215@id) (kM30bd@module-interface-first-mark kM4214@iface))) (kM421b@id-vec (kM30c1@module-interface-exp-id-vec kM4214@iface))) (if (null? kM421a@diff) kM421b@id-vec (vector-map (lambda (kM421e@x) (make-simple-struct 'stx '5 (list (kM2e3e@stx-expr kM421e@x) (append kM421a@diff (kM2e42@stx-mark* kM421e@x)) '() '()))) kM421b@id-vec))))))) (set! kM4b73@kM30cb@module-interface-exp-id* kM30cb@module-interface-exp-id*) (set! kM30cd@chi-internal-module (lambda (kM4226@e kM4227@r kM4228@mr kM4229@lex* kM422a@rhs* kM422b@mod** kM422c@kwd*) (call-with-values (lambda () (kM30b1@parse-module kM4226@e)) (lambda (kM423a@kM4235 kM423b@kM4237 kM423c@kM4239) (let ((kM4240@e* kM423c@kM4239) (kM4241@exp-id* kM423b@kM4237) (kM4242@name kM423a@kM4235)) (let ((kM4246@rib (kM2e24@make-empty-rib))) (let ((kM4248@e* (map (lambda (kM424a@x) (kM2e5c@add-subst kM4246@rib kM424a@x)) (kM2e6e@syntax->list kM4240@e*)))) (call-with-values (lambda () (kM30cf@chi-body* kM4248@e* kM4227@r kM4228@mr kM4229@lex* kM422a@rhs* kM422b@mod** kM422c@kwd* '() kM4246@rib '#f)) (lambda (kM425c@kM424d kM425d@kM424f kM425e@kM4251 kM425f@kM4253 kM4260@kM4255 kM4261@kM4257 kM4262@kM4259 kM4263@kM425b) (let ((kM426c@_exp* kM4263@kM425b) (kM426d@kwd* kM4262@kM4259) (kM426e@mod** kM4261@kM4257) (kM426f@rhs* kM4260@kM4255) (kM4270@lex* kM425f@kM4253) (kM4271@mr kM425e@kM4251) (kM4272@r kM425d@kM424f) (kM4273@e* kM425c@kM424d)) (let ((kM427c@exp-lab* (vector-map (lambda (kM4280@x) (or (kM2e86@id->label (make-simple-struct 'stx '5 (list (kM2e72@id->sym kM4280@x) (kM2e42@stx-mark* kM4280@x) (list kM4246@rib) '()))) (kM3157@syntax-violation '#f '"cannot find module export" kM4280@x))) kM4241@exp-id*)) (kM427d@mod** (cons kM4273@e* kM426e@mod**))) (if (not kM4242@name) (values kM4270@lex* kM426f@rhs* kM4241@exp-id* kM427c@exp-lab* kM4272@r kM4271@mr kM427d@mod** kM426d@kwd*) (let ((kM4282@lab (kM2dfc@gen-label 'module)) (kM4283@iface (make-simple-struct 'module-interface '4 (list (car (kM2e42@stx-mark* kM4242@name)) (vector-map (lambda (kM4286@x) (make-simple-struct 'stx '5 (list (kM2e3e@stx-expr kM4286@x) (kM2e42@stx-mark* kM4286@x) '() '()))) kM4241@exp-id*) kM427c@exp-lab*)))) (values kM4270@lex* kM426f@rhs* (vector kM4242@name) (vector kM4282@lab) (cons (cons kM4282@lab (cons '$module kM4283@iface)) kM4272@r) (cons (cons kM4282@lab (cons '$module kM4283@iface)) kM4271@mr) kM427d@mod** kM426d@kwd*)))))))))))))) (set! kM4b74@kM30cd@chi-internal-module kM30cd@chi-internal-module) (set! kM30cf@chi-body* (lambda (kM4288@e* kM4289@r kM428a@mr kM428b@lex* kM428c@rhs* kM428d@mod** kM428e@kwd* kM428f@exp* kM4290@rib kM4291@top?) (if (null? kM4288@e*) (values kM4288@e* kM4289@r kM428a@mr kM428b@lex* kM428c@rhs* kM428d@mod** kM428e@kwd* kM428f@exp*) (let ((kM429c@e (car kM4288@e*))) (call-with-values (lambda () (kM2e92@syntax-type kM429c@e kM4289@r)) (lambda (kM42a4@kM429f kM42a5@kM42a1 kM42a6@kM42a3) (let ((kM42aa@kwd kM42a6@kM42a3) (kM42ab@value kM42a5@kM42a1) (kM42ac@type kM42a4@kM429f)) (let ((kM42b0@kwd* (if (kM2e70@id? kM42aa@kwd) (cons kM42aa@kwd kM428e@kwd*) kM428e@kwd*))) (let ((kM42b2@t kM42ac@type)) (if (memv kM42b2@t '(define)) (call-with-values (lambda () (kM2ff9@parse-define kM429c@e)) (lambda (kM42b8@kM42b5 kM42b9@kM42b7) (let ((kM42bc@rhs kM42b9@kM42b7) (kM42bd@id kM42b8@kM42b5)) (begin (if (kM2e7c@bound-id-member? kM42bd@id kM42b0@kwd*) (kM3157@syntax-violation '#f '"cannot redefine keyword" kM429c@e) (void)) (call-with-values (lambda () (kM2e00@gen-define-label+loc kM42bd@id kM4290@rib)) (lambda (kM42c4@kM42c1 kM42c5@kM42c3) (let ((kM42c8@lex kM42c5@kM42c3) (kM42c9@lab kM42c4@kM42c1)) (begin (kM2e26@extend-rib! kM4290@rib kM42bd@id kM42c9@lab) (kM30cf@chi-body* (cdr kM4288@e*) (kM3007@add-lexical kM42c9@lab kM42c8@lex kM4289@r) kM428a@mr (cons kM42c8@lex kM428b@lex*) (cons kM42bc@rhs kM428c@rhs*) kM428d@mod** kM42b0@kwd* kM428f@exp* kM4290@rib kM4291@top?))))))))) (if (memv kM42b2@t '(define-syntax)) (call-with-values (lambda () (kM2ffb@parse-define-syntax kM429c@e)) (lambda (kM42d0@kM42cd kM42d1@kM42cf) (let ((kM42d4@rhs kM42d1@kM42cf) (kM42d5@id kM42d0@kM42cd)) (begin (if (kM2e7c@bound-id-member? kM42d5@id kM42b0@kwd*) (kM3157@syntax-violation '#f '"cannot redefine keyword" kM429c@e) (void)) (let ((kM42d8@lab (kM2e02@gen-define-label kM42d5@id kM4290@rib)) (kM42d9@expanded-rhs (kM30d1@expand-transformer kM42d4@rhs kM428a@mr))) (begin (kM2e26@extend-rib! kM4290@rib kM42d5@id kM42d8@lab) (let ((kM42dc@b (kM2ea8@make-eval-transformer kM42d9@expanded-rhs))) (kM30cf@chi-body* (cdr kM4288@e*) (cons (cons kM42d8@lab kM42dc@b) kM4289@r) (cons (cons kM42d8@lab kM42dc@b) kM428a@mr) kM428b@lex* kM428c@rhs* kM428d@mod** kM42b0@kwd* kM428f@exp* kM4290@rib kM4291@top?)))))))) (if (memv kM42b2@t '(let-syntax letrec-syntax)) (let ((kM42de@t kM429c@e)) (let ((kM42e0@ls/false (kM3077@syntax-dispatch kM42de@t '(_ #(each (any any)) . each-any)))) (if (and kM42e0@ls/false (apply (lambda (kM42e2@xlhs* kM42e3@xrhs* kM42e4@xbody*) (if (not (kM2e78@valid-bound-ids? kM42e2@xlhs*)) (kM3157@syntax-violation '#f '"invalid identifiers" kM429c@e) (void))) kM42e0@ls/false)) (apply (lambda (kM42e8@xlhs* kM42e9@xrhs* kM42ea@xbody*) (let ((kM42ee@xlab* (map kM2dfc@gen-label kM42e8@xlhs*))) (let ((kM42f0@xrib (kM2e30@make-full-rib kM42e8@xlhs* kM42ee@xlab*))) (let ((kM42f2@xb* (map (lambda (kM42f4@x) (kM2ea8@make-eval-transformer (kM30d1@expand-transformer (if (eq? kM42ac@type 'let-syntax) kM42f4@x (kM2e5c@add-subst kM42f0@xrib kM42f4@x)) kM428a@mr))) kM42e9@xrhs*))) (kM30cf@chi-body* (append (map (lambda (kM42f6@x) (kM2e5c@add-subst kM42f0@xrib kM42f6@x)) kM42ea@xbody*) (cdr kM4288@e*)) (append (map cons kM42ee@xlab* kM42f2@xb*) kM4289@r) (append (map cons kM42ee@xlab* kM42f2@xb*) kM428a@mr) kM428b@lex* kM428c@rhs* kM428d@mod** kM42b0@kwd* kM428f@exp* kM4290@rib kM4291@top?))))) kM42e0@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM42de@t)))) (if (memv kM42b2@t '(begin)) (let ((kM42f8@t kM429c@e)) (let ((kM42fa@ls/false (kM3077@syntax-dispatch kM42f8@t '(_ . each-any)))) (if kM42fa@ls/false (apply (lambda (kM42fc@x*) (kM30cf@chi-body* (append kM42fc@x* (cdr kM4288@e*)) kM4289@r kM428a@mr kM428b@lex* kM428c@rhs* kM428d@mod** kM42b0@kwd* kM428f@exp* kM4290@rib kM4291@top?)) kM42fa@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM42f8@t)))) (if (memv kM42b2@t '(global-macro global-macro!)) (kM30cf@chi-body* (cons (kM2e5c@add-subst kM4290@rib (kM3093@chi-global-macro kM42ab@value kM429c@e)) (cdr kM4288@e*)) kM4289@r kM428a@mr kM428b@lex* kM428c@rhs* kM428d@mod** kM42b0@kwd* kM428f@exp* kM4290@rib kM4291@top?) (if (memv kM42b2@t '(local-macro local-macro!)) (kM30cf@chi-body* (cons (kM2e5c@add-subst kM4290@rib (kM3091@chi-local-macro kM42ab@value kM429c@e)) (cdr kM4288@e*)) kM4289@r kM428a@mr kM428b@lex* kM428c@rhs* kM428d@mod** kM42b0@kwd* kM428f@exp* kM4290@rib kM4291@top?) (if (memv kM42b2@t '(macro macro!)) (kM30cf@chi-body* (cons (kM2e5c@add-subst kM4290@rib (kM308f@chi-macro kM42ab@value kM429c@e)) (cdr kM4288@e*)) kM4289@r kM428a@mr kM428b@lex* kM428c@rhs* kM428d@mod** kM42b0@kwd* kM428f@exp* kM4290@rib kM4291@top?) (if (memv kM42b2@t '(module)) (call-with-values (lambda () (kM30cd@chi-internal-module kM429c@e kM4289@r kM428a@mr kM428b@lex* kM428c@rhs* kM428d@mod** kM42b0@kwd*)) (lambda (kM430e@kM42ff kM430f@kM4301 kM4310@kM4303 kM4311@kM4305 kM4312@kM4307 kM4313@kM4309 kM4314@kM430b kM4315@kM430d) (let ((kM431e@kwd* kM4315@kM430d) (kM431f@mod** kM4314@kM430b) (kM4320@mr kM4313@kM4309) (kM4321@r kM4312@kM4307) (kM4322@m-exp-lab* kM4311@kM4305) (kM4323@m-exp-id* kM4310@kM4303) (kM4324@rhs* kM430f@kM4301) (kM4325@lex* kM430e@kM42ff)) (begin (vector-for-each (lambda (kM432e@id kM432f@lab) (kM2e26@extend-rib! kM4290@rib kM432e@id kM432f@lab)) kM4323@m-exp-id* kM4322@m-exp-lab*) (kM30cf@chi-body* (cdr kM4288@e*) kM4321@r kM4320@mr kM4325@lex* kM4324@rhs* kM431f@mod** kM431e@kwd* kM428f@exp* kM4290@rib kM4291@top?))))) (if (memv kM42b2@t '(library)) (begin (kM3139@library-expander (kM2e84@stx->datum kM429c@e)) (kM30cf@chi-body* (cdr kM4288@e*) kM4289@r kM428a@mr kM428b@lex* kM428c@rhs* kM428d@mod** kM42b0@kwd* kM428f@exp* kM4290@rib kM4291@top?)) (if (memv kM42b2@t '(export)) (let ((kM4332@t kM429c@e)) (let ((kM4334@ls/false (kM3077@syntax-dispatch kM4332@t '(_ . each-any)))) (if kM4334@ls/false (apply (lambda (kM4336@exp-decl*) (kM30cf@chi-body* (cdr kM4288@e*) kM4289@r kM428a@mr kM428b@lex* kM428c@rhs* kM428d@mod** kM42b0@kwd* (append kM4336@exp-decl* kM428f@exp*) kM4290@rib kM4291@top?)) kM4334@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM4332@t)))) (if (memv kM42b2@t '(import)) (let ((kM4339@module-import? '#f) (kM433b@module-import '#f) (kM433d@library-import '#f)) (begin (set! kM4339@module-import? (lambda (kM438c@e) (let ((kM438e@t kM438c@e)) (let ((kM4390@ls/false (kM3077@syntax-dispatch kM438e@t '(_ any)))) (if (and kM4390@ls/false (apply (lambda (kM4392@id) (kM2e70@id? kM4392@id)) kM4390@ls/false)) (apply (lambda (kM4394@id) '#t) kM4390@ls/false) (let ((kM4396@t kM438e@t)) (let ((kM4398@ls/false (kM3077@syntax-dispatch kM4396@t '(_ . each-any)))) (if kM4398@ls/false (apply (lambda (kM439a@imp*) '#f) kM4398@ls/false) (let ((kM439c@t kM4396@t)) (let ((kM439e@ls/false (kM3077@syntax-dispatch kM439c@t '_))) (if kM439e@ls/false (apply (lambda () (kM3157@syntax-violation '#f '"malformed import form" kM438c@e)) kM439e@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM439c@t)))))))))))) (set! kM433b@module-import (lambda (kM436a@e kM436b@r) (let ((kM436e@t kM436a@e)) (let ((kM4370@ls/false (kM3077@syntax-dispatch kM436e@t '(_ any)))) (if (and kM4370@ls/false (apply (lambda (kM4372@id) (kM2e70@id? kM4372@id)) kM4370@ls/false)) (apply (lambda (kM4374@id) (call-with-values (lambda () (kM2e92@syntax-type kM4374@id kM436b@r)) (lambda (kM437c@kM4377 kM437d@kM4379 kM437e@kM437b) (let ((kM4382@kwd kM437e@kM437b) (kM4383@value kM437d@kM4379) (kM4384@type kM437c@kM4377)) (let ((kM4388@t kM4384@type)) (if (memv kM4388@t '($module)) (let ((kM438a@iface kM4383@value)) (values (kM30cb@module-interface-exp-id* kM438a@iface kM4374@id) (kM30c5@module-interface-exp-lab-vec kM438a@iface))) (kM3157@syntax-violation '#f '"invalid import" kM436a@e))))))) kM4370@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM436e@t)))))) (set! kM433d@library-import (lambda (kM434e@e) (let ((kM4350@t kM434e@e)) (let ((kM4352@ls/false (kM3077@syntax-dispatch kM4350@t '(any . each-any)))) (if kM4352@ls/false (apply (lambda (kM4354@ctxt kM4355@imp*) (call-with-values (lambda () (kM30d9@parse-import-spec* (kM315d@syntax->datum kM4355@imp*))) (lambda (kM435c@kM4359 kM435d@kM435b) (let ((kM4360@subst-labels kM435d@kM435b) (kM4361@subst-names kM435c@kM4359)) (values (vector-map (lambda (kM4364@name) (kM2e50@datum->stx kM4354@ctxt kM4364@name)) kM4361@subst-names) kM4360@subst-labels))))) kM4352@ls/false) (let ((kM4366@t kM4350@t)) (let ((kM4368@ls/false (kM3077@syntax-dispatch kM4366@t '_))) (if kM4368@ls/false (apply (lambda () (kM3157@syntax-violation '#f '"invalid import form" kM434e@e)) kM4368@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM4366@t))))))))) (begin (call-with-values (lambda () (if (kM4339@module-import? kM429c@e) (kM433b@module-import kM429c@e kM4289@r) (kM433d@library-import kM429c@e))) (lambda (kM4342@kM433f kM4343@kM4341) (let ((kM4346@lab* kM4343@kM4341) (kM4347@id* kM4342@kM433f)) (vector-for-each (lambda (kM434a@id kM434b@lab) (kM2e26@extend-rib! kM4290@rib kM434a@id kM434b@lab)) kM4347@id* kM4346@lab*)))) (kM30cf@chi-body* (cdr kM4288@e*) kM4289@r kM428a@mr kM428b@lex* kM428c@rhs* kM428d@mod** kM42b0@kwd* kM428f@exp* kM4290@rib kM4291@top?)))) (if kM4291@top? (kM30cf@chi-body* (cdr kM4288@e*) kM4289@r kM428a@mr (cons (kM2df8@gen-lexical 'dummy) kM428b@lex*) (cons (cons 'top-expr kM429c@e) kM428c@rhs*) kM428d@mod** kM42b0@kwd* kM428f@exp* kM4290@rib kM4291@top?) (values kM4288@e* kM4289@r kM428a@mr kM428b@lex* kM428c@rhs* kM428d@mod** kM42b0@kwd* kM428f@exp*)))))))))))))))))))))) (set! kM4b75@kM30cf@chi-body* kM30cf@chi-body*) (set! kM30d1@expand-transformer (lambda (kM43a0@expr kM43a1@r) (let ((kM43a4@rtc (kM30dd@make-collector))) (let ((kM43a6@expanded-rhs (let ((kM43b0@kM43a9 kM30df@inv-collector) (kM43b1@kM43ab kM30e1@vis-collector) (kM43b2@kM43ad kM43a4@rtc) (kM43b3@kM43af (lambda (kM43b8@x) (values)))) (let ((kM43ba@swap (lambda () (begin (let ((kM43bc@t (kM43b0@kM43a9))) (begin (kM43b0@kM43a9 kM43b2@kM43ad) (set! kM43b2@kM43ad kM43bc@t))) (let ((kM43be@t (kM43b1@kM43ab))) (begin (kM43b1@kM43ab kM43b3@kM43af) (set! kM43b3@kM43af kM43be@t))))))) (dynamic-wind kM43ba@swap (lambda () (kM3099@chi-expr kM43a0@expr kM43a1@r kM43a1@r)) kM43ba@swap))))) (begin (for-each (let ((kM43c0@mark-visit (kM30e1@vis-collector))) (lambda (kM43c2@x) (begin (kM2c86@kM2ad4@invoke-library kM43c2@x) (kM43c0@mark-visit kM43c2@x)))) (kM43a4@rtc)) kM43a6@expanded-rhs))))) (set! kM4b76@kM30d1@expand-transformer kM30d1@expand-transformer) (set! kM30d3@parse-exports (lambda (kM43c4@exp*) (let kM43cc@f ((kM43c6@exp* kM43c4@exp*) (kM43c7@int* '()) (kM43c8@ext* '())) (if (null? kM43c6@exp*) (begin (if (not (kM2e78@valid-bound-ids? kM43c8@ext*)) (kM3157@syntax-violation 'export '"invalid exports" (kM30ad@find-dups kM43c8@ext*)) (void)) (values (map kM315d@syntax->datum kM43c8@ext*) kM43c7@int*)) (let ((kM43ce@t (car kM43c6@exp*))) (let ((kM43d0@ls/false (kM3077@syntax-dispatch kM43ce@t '(any . #(each (any any)))))) (if kM43d0@ls/false (apply (lambda (kM43d2@rename kM43d3@i* kM43d4@e*) (begin (if (not (and (eq? (kM315d@syntax->datum kM43d2@rename) 'rename) (for-all kM2e70@id? kM43d3@i*) (for-all kM2e70@id? kM43d4@e*))) (kM3157@syntax-violation 'export '"invalid export specifier" (car kM43c6@exp*)) (void)) (kM43cc@f (cdr kM43c6@exp*) (append kM43d3@i* kM43c7@int*) (append kM43d4@e* kM43c8@ext*)))) kM43d0@ls/false) (let ((kM43d8@t kM43ce@t)) (let ((kM43da@ls/false (kM3077@syntax-dispatch kM43d8@t 'any))) (if kM43da@ls/false (apply (lambda (kM43dc@ie) (begin (if (not (kM2e70@id? kM43dc@ie)) (kM3157@syntax-violation 'export '"invalid export" kM43dc@ie) (void)) (kM43cc@f (cdr kM43c6@exp*) (cons kM43dc@ie kM43c7@int*) (cons kM43dc@ie kM43c8@ext*)))) kM43da@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM43d8@t))))))))))) (set! kM4b77@kM30d3@parse-exports kM30d3@parse-exports) (set! kM30d5@parse-library-name (lambda (kM43de@spec) (let ((kM43e1@parse '#f)) (begin (set! kM43e1@parse (lambda (kM43ee@x) (let ((kM43f0@t kM43ee@x)) (let ((kM43f2@ls/false (kM3077@syntax-dispatch kM43f0@t '(each-any)))) (if (and kM43f2@ls/false (apply (lambda (kM43f4@v*) (for-all (lambda (kM43f6@x) (let ((kM43f8@x (kM315d@syntax->datum kM43f6@x))) (and (integer? kM43f8@x) (exact? kM43f8@x)))) kM43f4@v*)) kM43f2@ls/false)) (apply (lambda (kM43fa@v*) (values '() (map kM315d@syntax->datum kM43fa@v*))) kM43f2@ls/false) (let ((kM43fc@t kM43f0@t)) (let ((kM43fe@ls/false (kM3077@syntax-dispatch kM43fc@t '(any . any)))) (if (and kM43fe@ls/false (apply (lambda (kM4400@x kM4401@rest) (symbol? (kM315d@syntax->datum kM4400@x))) kM43fe@ls/false)) (apply (lambda (kM4404@x kM4405@rest) (call-with-values (lambda () (kM43e1@parse kM4405@rest)) (lambda (kM440c@kM4409 kM440d@kM440b) (let ((kM4410@v* kM440d@kM440b) (kM4411@x* kM440c@kM4409)) (values (cons (kM315d@syntax->datum kM4404@x) kM4411@x*) kM4410@v*))))) kM43fe@ls/false) (let ((kM4414@t kM43fc@t)) (let ((kM4416@ls/false (kM3077@syntax-dispatch kM4414@t '()))) (if kM4416@ls/false (apply (lambda () (values '() '())) kM4416@ls/false) (let ((kM4418@t kM4414@t)) (let ((kM441a@ls/false (kM3077@syntax-dispatch kM4418@t '_))) (if kM441a@ls/false (apply (lambda () (kM3157@syntax-violation '#f '"invalid library name" kM43de@spec)) kM441a@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM4418@t))))))))))))))) (call-with-values (lambda () (kM43e1@parse kM43de@spec)) (lambda (kM43e6@kM43e3 kM43e7@kM43e5) (let ((kM43ea@ver* kM43e7@kM43e5) (kM43eb@name* kM43e6@kM43e3)) (begin (if (null? kM43eb@name*) (kM3157@syntax-violation '#f '"empty library name" kM43de@spec) (void)) (values kM43eb@name* kM43ea@ver*))))))))) (set! kM4b78@kM30d5@parse-library-name kM30d5@parse-library-name) (set! kM30d7@parse-library (lambda (kM441c@e) (let ((kM441e@t kM441c@e)) (let ((kM4420@ls/false (kM3077@syntax-dispatch kM441e@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and kM4420@ls/false (apply (lambda (kM4422@library kM4423@name* kM4424@export kM4425@exp* kM4426@import kM4427@imp* kM4428@b*) (and (eq? (kM315d@syntax->datum kM4424@export) 'export) (eq? (kM315d@syntax->datum kM4426@import) 'import) (eq? (kM315d@syntax->datum kM4422@library) 'library))) kM4420@ls/false)) (apply (lambda (kM4430@library kM4431@name* kM4432@export kM4433@exp* kM4434@import kM4435@imp* kM4436@b*) (values kM4431@name* kM4433@exp* kM4435@imp* kM4436@b*)) kM4420@ls/false) (let ((kM443e@t kM441e@t)) (let ((kM4440@ls/false (kM3077@syntax-dispatch kM443e@t '_))) (if kM4440@ls/false (apply (lambda () (kM3157@syntax-violation '#f '"malformed library" kM441c@e)) kM4440@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM443e@t))))))))) (set! kM4b79@kM30d7@parse-library kM30d7@parse-library) (set! kM30d9@parse-import-spec* (let ((kM4443@idsyn? '#f) (kM4445@dup-error '#f) (kM4447@merge-substs '#f) (kM4449@exclude* '#f) (kM444b@find* '#f) (kM444d@rem* '#f) (kM444f@remove-dups '#f) (kM4451@parse-library-name '#f) (kM4453@import-library '#f) (kM4455@get-import '#f) (kM4457@add-imports! '#f)) (begin (set! kM4443@idsyn? (lambda (kM464c@x) (symbol? (kM315d@syntax->datum kM464c@x)))) (set! kM4445@dup-error (lambda (kM464a@name) (kM3157@syntax-violation 'import '"two imports with different bindings" kM464a@name))) (set! kM4447@merge-substs (lambda (kM4638@s kM4639@subst) (let ((kM463d@insert-to-subst '#f)) (begin (set! kM463d@insert-to-subst (lambda (kM463e@a kM463f@subst) (let ((kM4642@name (car kM463e@a)) (kM4643@label (cdr kM463e@a))) (let ((kM4646@t (assq kM4642@name kM463f@subst))) (if kM4646@t ((lambda (kM4648@x) (if (eq? (cdr kM4648@x) kM4643@label) kM463f@subst (kM4445@dup-error kM4642@name))) kM4646@t) (cons kM463e@a kM463f@subst)))))) (if (null? kM4638@s) kM4639@subst (kM463d@insert-to-subst (car kM4638@s) (kM4447@merge-substs (cdr kM4638@s) kM4639@subst))))))) (set! kM4449@exclude* (lambda (kM4608@sym* kM4609@subst) (let ((kM460d@exclude '#f)) (begin (set! kM460d@exclude (lambda (kM4626@sym kM4627@subst) (if (null? kM4627@subst) (kM3157@syntax-violation 'import '"cannot rename unbound identifier" kM4626@sym) (if (eq? kM4626@sym (caar kM4627@subst)) (values (cdar kM4627@subst) (cdr kM4627@subst)) (let ((kM462a@a (car kM4627@subst))) (call-with-values (lambda () (kM460d@exclude kM4626@sym (cdr kM4627@subst))) (lambda (kM4630@kM462d kM4631@kM462f) (let ((kM4634@subst kM4631@kM462f) (kM4635@old kM4630@kM462d)) (values kM4635@old (cons kM462a@a kM4634@subst)))))))))) (if (null? kM4608@sym*) (values '() kM4609@subst) (call-with-values (lambda () (kM460d@exclude (car kM4608@sym*) kM4609@subst)) (lambda (kM4612@kM460f kM4613@kM4611) (let ((kM4616@subst kM4613@kM4611) (kM4617@old kM4612@kM460f)) (call-with-values (lambda () (kM4449@exclude* (cdr kM4608@sym*) kM4616@subst)) (lambda (kM461e@kM461b kM461f@kM461d) (let ((kM4622@subst kM461f@kM461d) (kM4623@old* kM461e@kM461b)) (values (cons kM4617@old kM4623@old*) kM4622@subst)))))))))))) (set! kM444b@find* (lambda (kM4600@sym* kM4601@subst) (map (lambda (kM4604@x) (let ((kM4606@t (assq kM4604@x kM4601@subst))) (if kM4606@t (cdr kM4606@t) (kM3157@syntax-violation 'import '"cannot find identifier" kM4604@x)))) kM4600@sym*))) (set! kM444d@rem* (lambda (kM45f8@sym* kM45f9@subst) (let kM45fe@f ((kM45fc@subst kM45f9@subst)) (if (null? kM45fc@subst) '() (if (memq (caar kM45fc@subst) kM45f8@sym*) (kM45fe@f (cdr kM45fc@subst)) (cons (car kM45fc@subst) (kM45fe@f (cdr kM45fc@subst)))))))) (set! kM444f@remove-dups (lambda (kM45f6@ls) (if (null? kM45f6@ls) '() (if (memq (car kM45f6@ls) (cdr kM45f6@ls)) (kM444f@remove-dups (cdr kM45f6@ls)) (cons (car kM45f6@ls) (kM444f@remove-dups (cdr kM45f6@ls))))))) (set! kM4451@parse-library-name (lambda (kM450e@spec) (let ((kM4511@subversion? '#f) (kM4513@subversion-pred '#f) (kM4515@version-pred '#f)) (begin (set! kM4511@subversion? (lambda (kM45f2@x) (let ((kM45f4@x (kM315d@syntax->datum kM45f2@x))) (and (integer? kM45f4@x) (exact? kM45f4@x) (>= kM45f4@x '0))))) (set! kM4513@subversion-pred (lambda (kM4592@x*) (let ((kM4594@t kM4592@x*)) (let ((kM4596@ls/false (kM3077@syntax-dispatch kM4594@t 'any))) (if (and kM4596@ls/false (apply (lambda (kM4598@n) (kM4511@subversion? kM4598@n)) kM4596@ls/false)) (apply (lambda (kM459a@n) (lambda (kM459c@x) (= kM459c@x (kM315d@syntax->datum kM459a@n)))) kM4596@ls/false) (let ((kM459e@t kM4594@t)) (let ((kM45a0@ls/false (kM3077@syntax-dispatch kM459e@t '(any . each-any)))) (if (and kM45a0@ls/false (apply (lambda (kM45a2@p? kM45a3@sub*) (eq? (kM315d@syntax->datum kM45a2@p?) 'and)) kM45a0@ls/false)) (apply (lambda (kM45a6@p? kM45a7@sub*) (let ((kM45aa@p* (map kM4513@subversion-pred kM45a7@sub*))) (lambda (kM45ac@x) (for-all (lambda (kM45ae@p) (kM45ae@p kM45ac@x)) kM45aa@p*)))) kM45a0@ls/false) (let ((kM45b0@t kM459e@t)) (let ((kM45b2@ls/false (kM3077@syntax-dispatch kM45b0@t '(any . each-any)))) (if (and kM45b2@ls/false (apply (lambda (kM45b4@p? kM45b5@sub*) (eq? (kM315d@syntax->datum kM45b4@p?) 'or)) kM45b2@ls/false)) (apply (lambda (kM45b8@p? kM45b9@sub*) (let ((kM45bc@p* (map kM4513@subversion-pred kM45b9@sub*))) (lambda (kM45be@x) (exists (lambda (kM45c0@p) (kM45c0@p kM45be@x)) kM45bc@p*)))) kM45b2@ls/false) (let ((kM45c2@t kM45b0@t)) (let ((kM45c4@ls/false (kM3077@syntax-dispatch kM45c2@t '(any any)))) (if (and kM45c4@ls/false (apply (lambda (kM45c6@p? kM45c7@sub) (eq? (kM315d@syntax->datum kM45c6@p?) 'not)) kM45c4@ls/false)) (apply (lambda (kM45ca@p? kM45cb@sub) (let ((kM45ce@p (kM4513@subversion-pred kM45cb@sub))) (lambda (kM45d0@x) (not (kM45ce@p kM45d0@x))))) kM45c4@ls/false) (let ((kM45d2@t kM45c2@t)) (let ((kM45d4@ls/false (kM3077@syntax-dispatch kM45d2@t '(any any)))) (if (and kM45d4@ls/false (apply (lambda (kM45d6@p? kM45d7@n) (and (eq? (kM315d@syntax->datum kM45d6@p?) '<=) (kM4511@subversion? kM45d7@n))) kM45d4@ls/false)) (apply (lambda (kM45da@p? kM45db@n) (lambda (kM45de@x) (<= kM45de@x (kM315d@syntax->datum kM45db@n)))) kM45d4@ls/false) (let ((kM45e0@t kM45d2@t)) (let ((kM45e2@ls/false (kM3077@syntax-dispatch kM45e0@t '(any any)))) (if (and kM45e2@ls/false (apply (lambda (kM45e4@p? kM45e5@n) (and (eq? (kM315d@syntax->datum kM45e4@p?) '>=) (kM4511@subversion? kM45e5@n))) kM45e2@ls/false)) (apply (lambda (kM45e8@p? kM45e9@n) (lambda (kM45ec@x) (>= kM45ec@x (kM315d@syntax->datum kM45e9@n)))) kM45e2@ls/false) (let ((kM45ee@t kM45e0@t)) (let ((kM45f0@ls/false (kM3077@syntax-dispatch kM45ee@t '_))) (if kM45f0@ls/false (apply (lambda () (kM3157@syntax-violation 'import '"invalid sub-version spec" kM450e@spec kM4592@x*)) kM45f0@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM45ee@t)))))))))))))))))))))))) (set! kM4515@version-pred (lambda (kM4542@x*) (let ((kM4544@t kM4542@x*)) (let ((kM4546@ls/false (kM3077@syntax-dispatch kM4544@t '()))) (if kM4546@ls/false (apply (lambda () (lambda (kM4548@x) '#t)) kM4546@ls/false) (let ((kM454a@t kM4544@t)) (let ((kM454c@ls/false (kM3077@syntax-dispatch kM454a@t '(any . each-any)))) (if (and kM454c@ls/false (apply (lambda (kM454e@c kM454f@ver*) (eq? (kM315d@syntax->datum kM454e@c) 'and)) kM454c@ls/false)) (apply (lambda (kM4552@c kM4553@ver*) (let ((kM4556@p* (map kM4515@version-pred kM4553@ver*))) (lambda (kM4558@x) (for-all (lambda (kM455a@p) (kM455a@p kM4558@x)) kM4556@p*)))) kM454c@ls/false) (let ((kM455c@t kM454a@t)) (let ((kM455e@ls/false (kM3077@syntax-dispatch kM455c@t '(any . each-any)))) (if (and kM455e@ls/false (apply (lambda (kM4560@c kM4561@ver*) (eq? (kM315d@syntax->datum kM4560@c) 'or)) kM455e@ls/false)) (apply (lambda (kM4564@c kM4565@ver*) (let ((kM4568@p* (map kM4515@version-pred kM4565@ver*))) (lambda (kM456a@x) (exists (lambda (kM456c@p) (kM456c@p kM456a@x)) kM4568@p*)))) kM455e@ls/false) (let ((kM456e@t kM455c@t)) (let ((kM4570@ls/false (kM3077@syntax-dispatch kM456e@t '(any any)))) (if (and kM4570@ls/false (apply (lambda (kM4572@c kM4573@ver) (eq? (kM315d@syntax->datum kM4572@c) 'not)) kM4570@ls/false)) (apply (lambda (kM4576@c kM4577@ver) (let ((kM457a@p (kM4515@version-pred kM4577@ver))) (lambda (kM457c@x) (not (kM457a@p kM457c@x))))) kM4570@ls/false) (let ((kM457e@t kM456e@t)) (let ((kM4580@ls/false (kM3077@syntax-dispatch kM457e@t 'each-any))) (if kM4580@ls/false (apply (lambda (kM4582@sub*) (let ((kM4584@p* (map kM4513@subversion-pred kM4582@sub*))) (lambda (kM4586@x) (let kM458c@f ((kM4588@p* kM4584@p*) (kM4589@x kM4586@x)) (if (null? kM4588@p*) '#t (if (null? kM4589@x) '#f (and ((car kM4588@p*) (car kM4589@x)) (kM458c@f (cdr kM4588@p*) (cdr kM4589@x))))))))) kM4580@ls/false) (let ((kM458e@t kM457e@t)) (let ((kM4590@ls/false (kM3077@syntax-dispatch kM458e@t '_))) (if kM4590@ls/false (apply (lambda () (kM3157@syntax-violation 'import '"invalid version spec" kM450e@spec kM4542@x*)) kM4590@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM458e@t))))))))))))))))))))) (let kM4518@f ((kM4516@x kM450e@spec)) (let ((kM451a@t kM4516@x)) (let ((kM451c@ls/false (kM3077@syntax-dispatch kM451a@t '(each-any)))) (if kM451c@ls/false (apply (lambda (kM451e@version-spec*) (values '() (kM4515@version-pred kM451e@version-spec*))) kM451c@ls/false) (let ((kM4520@t kM451a@t)) (let ((kM4522@ls/false (kM3077@syntax-dispatch kM4520@t '(any . any)))) (if (and kM4522@ls/false (apply (lambda (kM4524@x kM4525@x*) (kM4443@idsyn? kM4524@x)) kM4522@ls/false)) (apply (lambda (kM4528@x kM4529@x*) (call-with-values (lambda () (kM4518@f kM4529@x*)) (lambda (kM4530@kM452d kM4531@kM452f) (let ((kM4534@pred kM4531@kM452f) (kM4535@name kM4530@kM452d)) (values (cons (kM315d@syntax->datum kM4528@x) kM4535@name) kM4534@pred))))) kM4522@ls/false) (let ((kM4538@t kM4520@t)) (let ((kM453a@ls/false (kM3077@syntax-dispatch kM4538@t '()))) (if kM453a@ls/false (apply (lambda () (values '() (lambda (kM453c@x) '#t))) kM453a@ls/false) (let ((kM453e@t kM4538@t)) (let ((kM4540@ls/false (kM3077@syntax-dispatch kM453e@t '_))) (if kM4540@ls/false (apply (lambda () (kM3157@syntax-violation '#f '"invalid import spec" kM450e@spec)) kM4540@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM453e@t)))))))))))))))))) (set! kM4453@import-library (lambda (kM44fe@spec*) (call-with-values (lambda () (kM4451@parse-library-name kM44fe@spec*)) (lambda (kM4504@kM4501 kM4505@kM4503) (let ((kM4508@pred kM4505@kM4503) (kM4509@name kM4504@kM4501)) (begin (if (null? kM4509@name) (kM3157@syntax-violation 'import '"empty library name" kM44fe@spec*) (void)) (let ((kM450c@lib (kM2c7f@kM2ac6@find-library-by-name kM4509@name))) (begin (if (not kM450c@lib) (kM3157@syntax-violation 'import '"cannot find library with required name" kM4509@name) (void)) (if (not (kM4508@pred (kM2c59@kM2a7a@library-version kM450c@lib))) (kM3157@syntax-violation 'import '"library does not satisfy version specification" kM44fe@spec* kM450c@lib) (void)) ((kM30e3@imp-collector) kM450c@lib) (kM2c61@kM2a8a@library-subst kM450c@lib))))))))) (set! kM4455@get-import (lambda (kM4470@spec) (let ((kM4472@t kM4470@spec)) (let ((kM4474@ls/false (kM3077@syntax-dispatch kM4472@t '(any . each-any)))) (if (and kM4474@ls/false (apply (lambda (kM4476@x kM4477@x*) (not (memq (kM315d@syntax->datum kM4476@x) '(for rename except only prefix library)))) kM4474@ls/false)) (apply (lambda (kM447a@x kM447b@x*) (kM4453@import-library (cons kM447a@x kM447b@x*))) kM4474@ls/false) (let ((kM447e@t kM4472@t)) (let ((kM4480@ls/false (kM3077@syntax-dispatch kM447e@t '(any any . #(each (any any)))))) (if (and kM4480@ls/false (apply (lambda (kM4482@rename kM4483@isp kM4484@old* kM4485@new*) (and (eq? (kM315d@syntax->datum kM4482@rename) 'rename) (for-all kM4443@idsyn? kM4484@old*) (for-all kM4443@idsyn? kM4485@new*))) kM4480@ls/false)) (apply (lambda (kM448a@rename kM448b@isp kM448c@old* kM448d@new*) (let ((kM4492@subst (kM4455@get-import kM448b@isp)) (kM4493@old* (map kM315d@syntax->datum kM448c@old*)) (kM4494@new* (map kM315d@syntax->datum kM448d@new*))) (let ((kM4498@old-label* (kM444b@find* kM4493@old* kM4492@subst))) (let ((kM449a@subst (kM444d@rem* kM4493@old* kM4492@subst))) (kM4447@merge-substs (map cons kM4494@new* kM4498@old-label*) kM449a@subst))))) kM4480@ls/false) (let ((kM449c@t kM447e@t)) (let ((kM449e@ls/false (kM3077@syntax-dispatch kM449c@t '(any any . each-any)))) (if (and kM449e@ls/false (apply (lambda (kM44a0@except kM44a1@isp kM44a2@sym*) (and (eq? (kM315d@syntax->datum kM44a0@except) 'except) (for-all kM4443@idsyn? kM44a2@sym*))) kM449e@ls/false)) (apply (lambda (kM44a6@except kM44a7@isp kM44a8@sym*) (let ((kM44ac@subst (kM4455@get-import kM44a7@isp))) (kM444d@rem* (map kM315d@syntax->datum kM44a8@sym*) kM44ac@subst))) kM449e@ls/false) (let ((kM44ae@t kM449c@t)) (let ((kM44b0@ls/false (kM3077@syntax-dispatch kM44ae@t '(any any . each-any)))) (if (and kM44b0@ls/false (apply (lambda (kM44b2@only kM44b3@isp kM44b4@sym*) (and (eq? (kM315d@syntax->datum kM44b2@only) 'only) (for-all kM4443@idsyn? kM44b4@sym*))) kM44b0@ls/false)) (apply (lambda (kM44b8@only kM44b9@isp kM44ba@sym*) (let ((kM44be@subst (kM4455@get-import kM44b9@isp)) (kM44bf@sym* (map kM315d@syntax->datum kM44ba@sym*))) (let ((kM44c2@sym* (kM444f@remove-dups kM44bf@sym*))) (let ((kM44c4@lab* (kM444b@find* kM44c2@sym* kM44be@subst))) (map cons kM44c2@sym* kM44c4@lab*))))) kM44b0@ls/false) (let ((kM44c6@t kM44ae@t)) (let ((kM44c8@ls/false (kM3077@syntax-dispatch kM44c6@t '(any any any)))) (if (and kM44c8@ls/false (apply (lambda (kM44ca@prefix kM44cb@isp kM44cc@p) (and (eq? (kM315d@syntax->datum kM44ca@prefix) 'prefix) (kM4443@idsyn? kM44cc@p))) kM44c8@ls/false)) (apply (lambda (kM44d0@prefix kM44d1@isp kM44d2@p) (let ((kM44d6@subst (kM4455@get-import kM44d1@isp)) (kM44d7@prefix (symbol->string (kM315d@syntax->datum kM44d2@p)))) (map (lambda (kM44da@x) (cons (string->symbol (string-append kM44d7@prefix (symbol->string (car kM44da@x)))) (cdr kM44da@x))) kM44d6@subst))) kM44c8@ls/false) (let ((kM44dc@t kM44c6@t)) (let ((kM44de@ls/false (kM3077@syntax-dispatch kM44dc@t '(any each-any)))) (if (and kM44de@ls/false (apply (lambda (kM44e0@library kM44e1@spec*) (eq? (kM315d@syntax->datum kM44e0@library) 'library)) kM44de@ls/false)) (apply (lambda (kM44e4@library kM44e5@spec*) (kM4453@import-library kM44e5@spec*)) kM44de@ls/false) (let ((kM44e8@t kM44dc@t)) (let ((kM44ea@ls/false (kM3077@syntax-dispatch kM44e8@t '(any any . any)))) (if (and kM44ea@ls/false (apply (lambda (kM44ec@for kM44ed@isp kM44ee@rest) (eq? (kM315d@syntax->datum kM44ec@for) 'for)) kM44ea@ls/false)) (apply (lambda (kM44f2@for kM44f3@isp kM44f4@rest) (kM4455@get-import kM44f3@isp)) kM44ea@ls/false) (let ((kM44f8@t kM44e8@t)) (let ((kM44fa@ls/false (kM3077@syntax-dispatch kM44f8@t 'any))) (if kM44fa@ls/false (apply (lambda (kM44fc@spec) (kM3157@syntax-violation 'import '"invalid import spec" kM44fc@spec)) kM44fa@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM44f8@t))))))))))))))))))))))))))) (set! kM4457@add-imports! (lambda (kM4460@imp kM4461@h) (let ((kM4464@subst (kM4455@get-import kM4460@imp))) (for-each (lambda (kM4466@x) (let ((kM4468@name (car kM4466@x)) (kM4469@label (cdr kM4466@x))) (let ((kM446c@t (hashtable-ref kM4461@h kM4468@name '#f))) (if kM446c@t ((lambda (kM446e@l) (if (not (eq? kM446e@l kM4469@label)) (kM4445@dup-error kM4468@name) (void))) kM446c@t) (hashtable-set! kM4461@h kM4468@name kM4469@label))))) kM4464@subst)))) (lambda (kM4458@imp*) (let kM445e@f ((kM445a@imp* kM4458@imp*) (kM445b@h (make-eq-hashtable))) (if (null? kM445a@imp*) (hashtable-entries kM445b@h) (begin (kM4457@add-imports! (car kM445a@imp*) kM445b@h) (kM445e@f (cdr kM445a@imp*) kM445b@h)))))))) (set! kM4b7a@kM30d9@parse-import-spec* kM30d9@parse-import-spec*) (set! kM30db@make-top-rib (lambda (kM464e@names kM464f@labels) (let ((kM4652@rib (kM2e24@make-empty-rib))) (begin (vector-for-each (lambda (kM4654@name kM4655@label) (begin (if (not (symbol? kM4654@name)) (error 'make-top-rib '"BUG: not a symbol" kM4654@name) (void)) (kM2e28@extend-rib/nc! kM4652@rib (make-simple-struct 'stx '5 (list kM4654@name kM2df4@top-mark* '() '())) kM4655@label))) kM464e@names kM464f@labels) kM4652@rib)))) (set! kM4b7b@kM30db@make-top-rib kM30db@make-top-rib) (set! kM30dd@make-collector (lambda () (let ((kM4658@ls '())) (lambda kM465c (let ((kM465d (length kM465c))) (if (= kM465d '0) (apply (lambda () kM4658@ls) kM465c) (if (= kM465d '1) (apply (lambda (kM465a@x) (set! kM4658@ls (kM2ded@set-cons kM465a@x kM4658@ls))) kM465c) (error 'apply '"invalid arg count")))))))) (set! kM4b7c@kM30dd@make-collector kM30dd@make-collector) (set! kM30df@inv-collector (kM29ba@kM2899@make-parameter (lambda kM465e@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (kM4660@x) (begin (if (not (procedure? kM4660@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" kM4660@x) (void)) kM4660@x)))) (set! kM4b7d@kM30df@inv-collector kM30df@inv-collector) (set! kM30e1@vis-collector (kM29ba@kM2899@make-parameter (lambda kM4662@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (kM4664@x) (begin (if (not (procedure? kM4664@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" kM4664@x) (void)) kM4664@x)))) (set! kM4b7e@kM30e1@vis-collector kM30e1@vis-collector) (set! kM30e3@imp-collector (kM29ba@kM2899@make-parameter (lambda kM4666@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (kM4668@x) (begin (if (not (procedure? kM4668@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" kM4668@x) (void)) kM4668@x)))) (set! kM4b7f@kM30e3@imp-collector kM30e3@imp-collector) (set! kM30e5@chi-library-internal (lambda (kM466a@e* kM466b@rib kM466c@top?) (call-with-values (lambda () (kM30cf@chi-body* kM466a@e* '() '() '() '() '() '() '() kM466b@rib kM466c@top?)) (lambda (kM4680@kM4671 kM4681@kM4673 kM4682@kM4675 kM4683@kM4677 kM4684@kM4679 kM4685@kM467b kM4686@kM467d kM4687@kM467f) (let ((kM4690@exp* kM4687@kM467f) (kM4691@_kwd* kM4686@kM467d) (kM4692@mod** kM4685@kM467b) (kM4693@rhs* kM4684@kM4679) (kM4694@lex* kM4683@kM4677) (kM4695@mr kM4682@kM4675) (kM4696@r kM4681@kM4673) (kM4697@e* kM4680@kM4671)) (values (append (apply append (reverse kM4692@mod**)) kM4697@e*) kM4696@r kM4695@mr (reverse kM4694@lex*) (reverse kM4693@rhs*) kM4690@exp*)))))) (set! kM4b80@kM30e5@chi-library-internal kM30e5@chi-library-internal) (set! kM30e7@chi-interaction-expr (lambda (kM46a0@e kM46a1@rib kM46a2@r) (call-with-values (lambda () (kM30cf@chi-body* (list kM46a0@e) kM46a2@r kM46a2@r '() '() '() '() '() kM46a1@rib '#t)) (lambda (kM46b6@kM46a7 kM46b7@kM46a9 kM46b8@kM46ab kM46b9@kM46ad kM46ba@kM46af kM46bb@kM46b1 kM46bc@kM46b3 kM46bd@kM46b5) (let ((kM46c6@_exp* kM46bd@kM46b5) (kM46c7@_kwd* kM46bc@kM46b3) (kM46c8@mod** kM46bb@kM46b1) (kM46c9@rhs* kM46ba@kM46af) (kM46ca@lex* kM46b9@kM46ad) (kM46cb@mr kM46b8@kM46ab) (kM46cc@r kM46b7@kM46a9) (kM46cd@e* kM46b6@kM46a7)) (let ((kM46d6@e* (kM30a7@expand-interaction-rhs*/init* (reverse kM46ca@lex*) (reverse kM46c9@rhs*) (append (apply append (reverse kM46c8@mod**)) kM46cd@e*) kM46cc@r kM46cb@mr))) (let ((kM46d8@e (if (null? kM46d6@e*) (kM2dd6@kM2d31@build-void) (if (null? (cdr kM46d6@e*)) (car kM46d6@e*) (kM2dd5@kM2d2f@build-sequence '#f kM46d6@e*))))) (values kM46d8@e kM46cc@r)))))))) (set! kM4b81@kM30e7@chi-interaction-expr kM30e7@chi-interaction-expr) (set! kM30e9@library-body-expander (lambda (kM46da@name kM46db@main-exp* kM46dc@imp* kM46dd@b* kM46de@top?) (let ((kM46e5@itc '#f)) (begin (set! kM46e5@itc (kM30dd@make-collector)) (let ((kM46ee@kM46e7 kM30e3@imp-collector) (kM46ef@kM46e9 kM3167@top-level-context) (kM46f0@kM46eb kM46e5@itc) (kM46f1@kM46ed '#f)) (let ((kM46f6@swap (lambda () (begin (let ((kM46f8@t (kM46ee@kM46e7))) (begin (kM46ee@kM46e7 kM46f0@kM46eb) (set! kM46f0@kM46eb kM46f8@t))) (let ((kM46fa@t (kM46ef@kM46e9))) (begin (kM46ef@kM46e9 kM46f1@kM46ed) (set! kM46f1@kM46ed kM46fa@t))))))) (dynamic-wind kM46f6@swap (lambda () (call-with-values (lambda () (kM30d9@parse-import-spec* kM46dc@imp*)) (lambda (kM4700@kM46fd kM4701@kM46ff) (let ((kM4704@subst-labels kM4701@kM46ff) (kM4705@subst-names kM4700@kM46fd)) (let ((kM4708@rib (kM30db@make-top-rib kM4705@subst-names kM4704@subst-labels))) (let ((kM470b@wrap '#f)) (begin (set! kM470b@wrap (lambda (kM4786@x) (make-simple-struct 'stx '5 (list kM4786@x kM2df4@top-mark* (list kM4708@rib) '())))) (let ((kM470c@b* (map kM470b@wrap kM46dd@b*)) (kM470d@main-exp* (map kM470b@wrap kM46db@main-exp*)) (kM470e@rtc (kM30dd@make-collector)) (kM470f@vtc (kM30dd@make-collector))) (let ((kM471c@kM4715 kM30df@inv-collector) (kM471d@kM4717 kM30e1@vis-collector) (kM471e@kM4719 kM470e@rtc) (kM471f@kM471b kM470f@vtc)) (let ((kM4724@swap (lambda () (begin (let ((kM4726@t (kM471c@kM4715))) (begin (kM471c@kM4715 kM471e@kM4719) (set! kM471e@kM4719 kM4726@t))) (let ((kM4728@t (kM471d@kM4717))) (begin (kM471d@kM4717 kM471f@kM471b) (set! kM471f@kM471b kM4728@t))))))) (dynamic-wind kM4724@swap (lambda () (call-with-values (lambda () (kM30e5@chi-library-internal kM470c@b* kM4708@rib kM46de@top?)) (lambda (kM4736@kM472b kM4737@kM472d kM4738@kM472f kM4739@kM4731 kM473a@kM4733 kM473b@kM4735) (let ((kM4742@internal-exp* kM473b@kM4735) (kM4743@rhs* kM473a@kM4733) (kM4744@lex* kM4739@kM4731) (kM4745@mr kM4738@kM472f) (kM4746@r kM4737@kM472d) (kM4747@init* kM4736@kM472b)) (call-with-values (lambda () (kM30d3@parse-exports (append kM470d@main-exp* kM4742@internal-exp*))) (lambda (kM4752@kM474f kM4753@kM4751) (let ((kM4756@exp-id* kM4753@kM4751) (kM4757@exp-name* kM4752@kM474f)) (begin (kM2e2c@seal-rib! kM4708@rib) (let ((kM475a@init* (kM3095@chi-expr* kM4747@init* kM4746@r kM4745@mr))) (let ((kM475c@rhs* (kM30a9@chi-rhs* kM4743@rhs* kM4746@r kM4745@mr))) (begin (kM2e2e@unseal-rib! kM4708@rib) (let ((kM475e@loc* (map kM2dfa@gen-global kM4744@lex*)) (kM475f@export-subst (kM3141@make-export-subst kM4757@exp-name* kM4756@exp-id*))) (let ((kM4763@errstr '#f)) (begin (set! kM4763@errstr '"attempt to export mutated variable") (call-with-values (lambda () (kM3143@make-export-env/macros kM4744@lex* kM475e@loc* kM4746@r)) (lambda (kM476a@kM4765 kM476b@kM4767 kM476c@kM4769) (let ((kM4770@macro* kM476c@kM4769) (kM4771@global* kM476b@kM4767) (kM4772@export-env kM476a@kM4765)) (begin (for-each (lambda (kM4776@s) (let ((kM4778@name (car kM4776@s)) (kM4779@label (cdr kM4776@s))) (let ((kM477c@p (assq kM4779@label kM4772@export-env))) (if kM477c@p (let ((kM477e@b (cdr kM477c@p))) (let ((kM4780@type (car kM477e@b))) (if (eq? kM4780@type 'mutable) (kM3157@syntax-violation 'export kM4763@errstr kM4778@name) (void)))) (void))))) kM475f@export-subst) (let ((kM4782@invoke-body (kM2ddb@kM2d3b@build-library-letrec* '#f kM46da@name kM4744@lex* kM475e@loc* kM475c@rhs* (if (null? kM475a@init*) (kM2dd6@kM2d31@build-void) (kM2dd5@kM2d2f@build-sequence '#f kM475a@init*)))) (kM4783@invoke-definitions (map kM2dd2@kM2c8e@build-global-define (map cdr kM4771@global*)))) (values (kM46e5@itc) (kM470e@rtc) (kM470f@vtc) (kM2dd5@kM2d2f@build-sequence '#f (append kM4783@invoke-definitions (list kM4782@invoke-body))) kM4770@macro* kM475f@export-subst kM4772@export-env)))))))))))))))))))) kM4724@swap))))))))))) kM46f6@swap))))))) (set! kM4b82@kM30e9@library-body-expander kM30e9@library-body-expander) (set! kM30eb@core-library-expander (lambda (kM4788@e kM4789@verify-name) (call-with-values (lambda () (kM30d7@parse-library kM4788@e)) (lambda (kM4794@kM478d kM4795@kM478f kM4796@kM4791 kM4797@kM4793) (let ((kM479c@b* kM4797@kM4793) (kM479d@imp* kM4796@kM4791) (kM479e@exp* kM4795@kM478f) (kM479f@name* kM4794@kM478d)) (call-with-values (lambda () (kM30d5@parse-library-name kM479f@name*)) (lambda (kM47a8@kM47a5 kM47a9@kM47a7) (let ((kM47ac@ver kM47a9@kM47a7) (kM47ad@name kM47a8@kM47a5)) (begin (kM4789@verify-name kM47ad@name) (call-with-values (lambda () (kM30e9@library-body-expander kM47ad@name kM479e@exp* kM479d@imp* kM479c@b* '#f)) (lambda (kM47be@kM47b1 kM47bf@kM47b3 kM47c0@kM47b5 kM47c1@kM47b7 kM47c2@kM47b9 kM47c3@kM47bb kM47c4@kM47bd) (let ((kM47cc@export-env kM47c4@kM47bd) (kM47cd@export-subst kM47c3@kM47bb) (kM47ce@visit-code kM47c2@kM47b9) (kM47cf@invoke-code kM47c1@kM47b7) (kM47d0@visit-req* kM47c0@kM47b5) (kM47d1@invoke-req* kM47bf@kM47b3) (kM47d2@imp* kM47be@kM47b1)) (values kM47ad@name kM47ac@ver kM47d2@imp* kM47d1@invoke-req* kM47d0@visit-req* kM47cf@invoke-code kM47ce@visit-code kM47cd@export-subst kM47cc@export-env))))))))))))) (set! kM4b83@kM30eb@core-library-expander kM30eb@core-library-expander) (set! kM30ed@parse-top-level-program (lambda (kM47da@e*) (let ((kM47dc@t kM47da@e*)) (let ((kM47de@ls/false (kM3077@syntax-dispatch kM47dc@t '((any . each-any) . each-any)))) (if (and kM47de@ls/false (apply (lambda (kM47e0@import kM47e1@imp* kM47e2@b*) (eq? (kM315d@syntax->datum kM47e0@import) 'import)) kM47de@ls/false)) (apply (lambda (kM47e6@import kM47e7@imp* kM47e8@b*) (values kM47e7@imp* kM47e8@b*)) kM47de@ls/false) (let ((kM47ec@t kM47dc@t)) (let ((kM47ee@ls/false (kM3077@syntax-dispatch kM47ec@t '((any . any) . any)))) (if (and kM47ee@ls/false (apply (lambda (kM47f0@import kM47f1@x kM47f2@y) (eq? (kM315d@syntax->datum kM47f0@import) 'import)) kM47ee@ls/false)) (apply (lambda (kM47f6@import kM47f7@x kM47f8@y) (kM3157@syntax-violation 'expander '"invalid syntax of top-level program" (kM2e6a@syntax-car kM47da@e*))) kM47ee@ls/false) (let ((kM47fc@t kM47ec@t)) (let ((kM47fe@ls/false (kM3077@syntax-dispatch kM47fc@t '_))) (if kM47fe@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) kM47fe@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM47fc@t)))))))))))) (set! kM4b84@kM30ed@parse-top-level-program kM30ed@parse-top-level-program) (set! kM30ef@top-level-expander (lambda (kM4800@e*) (call-with-values (lambda () (kM30ed@parse-top-level-program kM4800@e*)) (lambda (kM4806@kM4803 kM4807@kM4805) (let ((kM480a@b* kM4807@kM4805) (kM480b@imp* kM4806@kM4803)) (call-with-values (lambda () (kM30e9@library-body-expander '() '() kM480b@imp* kM480a@b* '#t)) (lambda (kM481c@kM480f kM481d@kM4811 kM481e@kM4813 kM481f@kM4815 kM4820@kM4817 kM4821@kM4819 kM4822@kM481b) (let ((kM482a@export-env kM4822@kM481b) (kM482b@export-subst kM4821@kM4819) (kM482c@visit-code kM4820@kM4817) (kM482d@invoke-code kM481f@kM4815) (kM482e@visit-req* kM481e@kM4813) (kM482f@invoke-req* kM481d@kM4811) (kM4830@imp* kM481c@kM480f)) (values kM482f@invoke-req* kM482d@invoke-code))))))))) (set! kM4b85@kM30ef@top-level-expander kM30ef@top-level-expander) (set! kM30f1@rp (kM29b7@kM2893@make-record-printer 'env (lambda (kM4838@x kM4839@p kM483a@wr) (display '"#<environment>" kM4839@p)))) (set! kM4b86@kM30f1@rp kM30f1@rp) (set! kM30fb@env? (lambda (kM483e@x) (and (simple-struct? kM483e@x) (eq? (simple-struct-name kM483e@x) 'env)))) (set! kM4b87@kM30fb@env? kM30fb@env?) (set! kM30fd@env-names (lambda (kM4840@x) (simple-struct-ref kM4840@x '0))) (set! kM4b88@kM30fd@env-names kM30fd@env-names) (set! kM30ff@set-env-names! (lambda (kM4842@x kM4843@val) (simple-struct-set! kM4842@x '0 kM4843@val))) (set! kM4b89@kM30ff@set-env-names! kM30ff@set-env-names!) (set! kM3101@env-labels (lambda (kM4846@x) (simple-struct-ref kM4846@x '1))) (set! kM4b8a@kM3101@env-labels kM3101@env-labels) (set! kM3103@set-env-labels! (lambda (kM4848@x kM4849@val) (simple-struct-set! kM4848@x '1 kM4849@val))) (set! kM4b8b@kM3103@set-env-labels! kM3103@set-env-labels!) (set! kM3105@env-itc (lambda (kM484c@x) (simple-struct-ref kM484c@x '2))) (set! kM4b8c@kM3105@env-itc kM3105@env-itc) (set! kM3107@set-env-itc! (lambda (kM484e@x kM484f@val) (simple-struct-set! kM484e@x '2 kM484f@val))) (set! kM4b8d@kM3107@set-env-itc! kM3107@set-env-itc!) (set! kM3109@dummy '3) (set! kM4b8e@kM3109@dummy kM3109@dummy) (set! kM310b@rp (kM29b7@kM2893@make-record-printer 'interaction-env (lambda (kM4852@x kM4853@p kM4854@wr) (display '"#<environment>" kM4853@p)))) (set! kM4b8f@kM310b@rp kM310b@rp) (set! kM3115@interaction-env? (lambda (kM4858@x) (and (simple-struct? kM4858@x) (eq? (simple-struct-name kM4858@x) 'interaction-env)))) (set! kM4b90@kM3115@interaction-env? kM3115@interaction-env?) (set! kM3117@interaction-env-rib (lambda (kM485a@x) (simple-struct-ref kM485a@x '0))) (set! kM4b91@kM3117@interaction-env-rib kM3117@interaction-env-rib) (set! kM3119@set-interaction-env-rib! (lambda (kM485c@x kM485d@val) (simple-struct-set! kM485c@x '0 kM485d@val))) (set! kM4b92@kM3119@set-interaction-env-rib! kM3119@set-interaction-env-rib!) (set! kM311b@interaction-env-r (lambda (kM4860@x) (simple-struct-ref kM4860@x '1))) (set! kM4b93@kM311b@interaction-env-r kM311b@interaction-env-r) (set! kM311d@set-interaction-env-r! (lambda (kM4862@x kM4863@val) (simple-struct-set! kM4862@x '1 kM4863@val))) (set! kM4b94@kM311d@set-interaction-env-r! kM311d@set-interaction-env-r!) (set! kM311f@interaction-env-locs (lambda (kM4866@x) (simple-struct-ref kM4866@x '2))) (set! kM4b95@kM311f@interaction-env-locs kM311f@interaction-env-locs) (set! kM3121@set-interaction-env-locs! (lambda (kM4868@x kM4869@val) (simple-struct-set! kM4868@x '2 kM4869@val))) (set! kM4b96@kM3121@set-interaction-env-locs! kM3121@set-interaction-env-locs!) (set! kM3123@dummy '3) (set! kM4b97@kM3123@dummy kM3123@dummy) (set! kM3125@interaction-environment-symbols (lambda () (kM312d@environment-symbols (kM3165@interaction-environment)))) (set! kM4b98@kM3125@interaction-environment-symbols kM3125@interaction-environment-symbols) (set! kM3127@environment-bindings (lambda (kM486c@e) (vector->list (vector-map (lambda (kM486e@name kM486f@label) (kM3129@parse-binding (cons kM486e@name (kM2c85@kM2ad2@imported-label->binding kM486f@label)))) (kM30fd@env-names kM486c@e) (kM3101@env-labels kM486c@e))))) (set! kM4b99@kM3127@environment-bindings kM3127@environment-bindings) (set! kM3129@parse-binding (lambda (kM4872@b) (cons (car kM4872@b) (let ((kM4874@t (cadr kM4872@b))) (if (memv kM4874@t '(core-prim global)) 'procedure (if (memv kM4874@t '(core-macro macro global-macro)) 'syntax (if (memv kM4874@t '($core-rtd)) 'record (if (eq? (car kM4872@b) (cadr kM4872@b)) 'syntax 'unknown)))))))) (set! kM4b9a@kM3129@parse-binding kM3129@parse-binding) (set! kM312b@environment? (lambda (kM4876@x) (or (kM30fb@env? kM4876@x) (kM3115@interaction-env? kM4876@x)))) (set! kM4b9b@kM312b@environment? kM312b@environment?) (set! kM312d@environment-symbols (lambda (kM4878@x) (if (kM30fb@env? kM4878@x) (vector->list (kM30fd@env-names kM4878@x)) (if (kM3115@interaction-env? kM4878@x) (map values (kM2e0e@rib-sym* (kM3117@interaction-env-rib kM4878@x))) (assertion-violation 'environment-symbols '"not an environment" kM4878@x))))) (set! kM4b9c@kM312d@environment-symbols kM312d@environment-symbols) (set! kM312f@environment (lambda kM487a@imp* (let ((kM487c@itc (kM30dd@make-collector))) (let ((kM4882@kM487f kM30e3@imp-collector) (kM4883@kM4881 kM487c@itc)) (let ((kM4886@swap (lambda () (let ((kM4888@t (kM4882@kM487f))) (begin (kM4882@kM487f kM4883@kM4881) (set! kM4883@kM4881 kM4888@t)))))) (dynamic-wind kM4886@swap (lambda () (call-with-values (lambda () (kM30d9@parse-import-spec* kM487a@imp*)) (lambda (kM488e@kM488b kM488f@kM488d) (let ((kM4892@subst-labels kM488f@kM488d) (kM4893@subst-names kM488e@kM488b)) (make-simple-struct 'env '4 (list kM4893@subst-names kM4892@subst-labels kM487c@itc)))))) kM4886@swap)))))) (set! kM4b9d@kM312f@environment kM312f@environment) (set! kM3131@null-environment (lambda (kM4896@n) (begin (if (not (eqv? kM4896@n '5)) (assertion-violation 'null-environment '"not 5" kM4896@n) (void)) (kM312f@environment '(psyntax null-environment-5))))) (set! kM4b9e@kM3131@null-environment kM3131@null-environment) (set! kM3133@scheme-report-environment (lambda (kM4898@n) (begin (if (not (eqv? kM4898@n '5)) (assertion-violation 'scheme-report-environment '"not 5" kM4898@n) (void)) (kM312f@environment '(psyntax scheme-report-environment-5))))) (set! kM4b9f@kM3133@scheme-report-environment kM3133@scheme-report-environment) (set! kM3135@expand (lambda (kM489a@x kM489b@env) (if (kM30fb@env? kM489b@env) (let ((kM489e@rib (kM30db@make-top-rib (kM30fd@env-names kM489b@env) (kM3101@env-labels kM489b@env)))) (let ((kM48a0@x (make-simple-struct 'stx '5 (list kM489a@x kM2df4@top-mark* (list kM489e@rib) '()))) (kM48a1@itc (kM3105@env-itc kM489b@env)) (kM48a2@rtc (kM30dd@make-collector)) (kM48a3@vtc (kM30dd@make-collector))) (let ((kM48a8@x (let ((kM48ba@kM48ab kM3167@top-level-context) (kM48bb@kM48ad kM30df@inv-collector) (kM48bc@kM48af kM30e1@vis-collector) (kM48bd@kM48b1 kM30e3@imp-collector) (kM48be@kM48b3 '#f) (kM48bf@kM48b5 kM48a2@rtc) (kM48c0@kM48b7 kM48a3@vtc) (kM48c1@kM48b9 kM48a1@itc)) (let ((kM48ca@swap (lambda () (begin (let ((kM48cc@t (kM48ba@kM48ab))) (begin (kM48ba@kM48ab kM48be@kM48b3) (set! kM48be@kM48b3 kM48cc@t))) (let ((kM48ce@t (kM48bb@kM48ad))) (begin (kM48bb@kM48ad kM48bf@kM48b5) (set! kM48bf@kM48b5 kM48ce@t))) (let ((kM48d0@t (kM48bc@kM48af))) (begin (kM48bc@kM48af kM48c0@kM48b7) (set! kM48c0@kM48b7 kM48d0@t))) (let ((kM48d2@t (kM48bd@kM48b1))) (begin (kM48bd@kM48b1 kM48c1@kM48b9) (set! kM48c1@kM48b9 kM48d2@t))))))) (dynamic-wind kM48ca@swap (lambda () (kM3099@chi-expr kM48a0@x '() '())) kM48ca@swap))))) (begin (kM2e2c@seal-rib! kM489e@rib) (values kM48a8@x (kM48a2@rtc)))))) (if (kM3115@interaction-env? kM489b@env) (let ((kM48d4@rib (kM3117@interaction-env-rib kM489b@env)) (kM48d5@r (kM311b@interaction-env-r kM489b@env)) (kM48d6@rtc (kM30dd@make-collector))) (let ((kM48da@x (make-simple-struct 'stx '5 (list kM489a@x kM2df4@top-mark* (list kM48d4@rib) '())))) (call-with-values (lambda () (let ((kM48f0@kM48e1 kM3167@top-level-context) (kM48f1@kM48e3 kM30df@inv-collector) (kM48f2@kM48e5 kM30e1@vis-collector) (kM48f3@kM48e7 kM30e3@imp-collector) (kM48f4@kM48e9 kM489b@env) (kM48f5@kM48eb kM48d6@rtc) (kM48f6@kM48ed (kM30dd@make-collector)) (kM48f7@kM48ef (kM30dd@make-collector))) (let ((kM4900@swap (lambda () (begin (let ((kM4902@t (kM48f0@kM48e1))) (begin (kM48f0@kM48e1 kM48f4@kM48e9) (set! kM48f4@kM48e9 kM4902@t))) (let ((kM4904@t (kM48f1@kM48e3))) (begin (kM48f1@kM48e3 kM48f5@kM48eb) (set! kM48f5@kM48eb kM4904@t))) (let ((kM4906@t (kM48f2@kM48e5))) (begin (kM48f2@kM48e5 kM48f6@kM48ed) (set! kM48f6@kM48ed kM4906@t))) (let ((kM4908@t (kM48f3@kM48e7))) (begin (kM48f3@kM48e7 kM48f7@kM48ef) (set! kM48f7@kM48ef kM4908@t))))))) (dynamic-wind kM4900@swap (lambda () (kM30e7@chi-interaction-expr kM48da@x kM48d4@rib kM48d5@r)) kM4900@swap)))) (lambda (kM490a@kM48dd kM490b@kM48df) (let ((kM490e@r^ kM490b@kM48df) (kM490f@e kM490a@kM48dd)) (begin (kM311d@set-interaction-env-r! kM489b@env kM490e@r^) (values kM490f@e (kM48d6@rtc)))))))) (assertion-violation 'expand '"not an environment" kM489b@env))))) (set! kM4ba0@kM3135@expand kM3135@expand) (set! kM3137@eval (lambda (kM4912@x kM4913@env) (begin (if (not (kM312b@environment? kM4913@env)) (error 'eval '"not an environment" kM4913@env) (void)) (call-with-values (lambda () (kM3135@expand kM4912@x kM4913@env)) (lambda (kM491a@kM4917 kM491b@kM4919) (let ((kM491e@invoke-req* kM491b@kM4919) (kM491f@x kM491a@kM4917)) (begin (for-each kM2c86@kM2ad4@invoke-library kM491e@invoke-req*) (eval-core (kM2a10@kM29c8@expanded->core kM491f@x))))))))) (set! kM4ba1@kM3137@eval kM3137@eval) (set! kM3139@library-expander (lambda kM4990 (let ((kM4991 (length kM4990))) (if (= kM4991 '3) (apply (lambda (kM4922@x kM4923@filename kM4924@verify-name) (let ((kM4929@build-visit-code '#f) (kM492b@visit! '#f)) (begin (set! kM4929@build-visit-code (lambda (kM497e@macro*) (if (null? kM497e@macro*) (kM2dd6@kM2d31@build-void) (kM2dd5@kM2d2f@build-sequence '#f (map (lambda (kM4980@x) (let ((kM4982@loc (car kM4980@x)) (kM4983@src (cddr kM4980@x))) (list 'set! kM4982@loc kM4983@src))) kM497e@macro*))))) (set! kM492b@visit! (lambda (kM4976@macro*) (for-each (lambda (kM4978@x) (let ((kM497a@loc (car kM4978@x)) (kM497b@proc (cadr kM4978@x))) (set-symbol-value! kM497a@loc kM497b@proc))) kM4976@macro*))) (call-with-values (lambda () (kM30eb@core-library-expander kM4922@x kM4924@verify-name)) (lambda (kM493e@kM492d kM493f@kM492f kM4940@kM4931 kM4941@kM4933 kM4942@kM4935 kM4943@kM4937 kM4944@kM4939 kM4945@kM493b kM4946@kM493d) (let ((kM4950@export-env kM4946@kM493d) (kM4951@export-subst kM4945@kM493b) (kM4952@macro* kM4944@kM4939) (kM4953@invoke-code kM4943@kM4937) (kM4954@vis* kM4942@kM4935) (kM4955@inv* kM4941@kM4933) (kM4956@imp* kM4940@kM4931) (kM4957@ver kM493f@kM492f) (kM4958@name kM493e@kM492d)) (let ((kM4962@id (gensym)) (kM4963@name kM4958@name) (kM4964@ver kM4957@ver) (kM4965@imp* (map kM2c8a@kM2adc@library-spec kM4956@imp*)) (kM4966@vis* (map kM2c8a@kM2adc@library-spec kM4954@vis*)) (kM4967@inv* (map kM2c8a@kM2adc@library-spec kM4955@inv*)) (kM4968@visit-proc (lambda () (kM492b@visit! kM4952@macro*))) (kM4969@invoke-proc (lambda () (eval-core (kM2a10@kM29c8@expanded->core kM4953@invoke-code)))) (kM496a@visit-code (kM4929@build-visit-code kM4952@macro*)) (kM496b@invoke-code kM4953@invoke-code)) (begin (kM2c84@kM2ad0@install-library kM4962@id kM4963@name kM4964@ver kM4965@imp* kM4966@vis* kM4967@inv* kM4951@export-subst kM4950@export-env kM4968@visit-proc kM4969@invoke-proc kM496a@visit-code kM496b@invoke-code '#t kM4923@filename) (values kM4962@id kM4963@name kM4964@ver kM4965@imp* kM4966@vis* kM4967@inv* kM496b@invoke-code kM496a@visit-code kM4951@export-subst kM4950@export-env))))))))) kM4990) (if (= kM4991 '2) (apply (lambda (kM4986@x kM4987@filename) (kM3139@library-expander kM4986@x kM4987@filename (lambda (kM498a@x) (values)))) kM4990) (if (= kM4991 '1) (apply (lambda (kM498c@x) (kM3139@library-expander kM498c@x '#f (lambda (kM498e@x) (values)))) kM4990) (error 'apply '"invalid arg count"))))))) (set! kM4ba2@kM3139@library-expander kM3139@library-expander) (set! kM313b@boot-library-expand (lambda (kM4992@x) (call-with-values (lambda () (kM3139@library-expander kM4992@x)) (lambda (kM49a8@kM4995 kM49a9@kM4997 kM49aa@kM4999 kM49ab@kM499b kM49ac@kM499d kM49ad@kM499f kM49ae@kM49a1 kM49af@kM49a3 kM49b0@kM49a5 kM49b1@kM49a7) (let ((kM49bc@export-env kM49b1@kM49a7) (kM49bd@export-subst kM49b0@kM49a5) (kM49be@visit-code kM49af@kM49a3) (kM49bf@invoke-code kM49ae@kM49a1) (kM49c0@inv* kM49ad@kM499f) (kM49c1@vis* kM49ac@kM499d) (kM49c2@imp* kM49ab@kM499b) (kM49c3@ver kM49aa@kM4999) (kM49c4@name kM49a9@kM4997) (kM49c5@id kM49a8@kM4995)) (values kM49c4@name kM49bf@invoke-code kM49bd@export-subst kM49bc@export-env)))))) (set! kM4ba3@kM313b@boot-library-expand kM313b@boot-library-expand) (set! kM313d@rev-map-append (lambda (kM49d0@f kM49d1@ls kM49d2@ac) (if (null? kM49d1@ls) kM49d2@ac (kM313d@rev-map-append kM49d0@f (cdr kM49d1@ls) (cons (kM49d0@f (car kM49d1@ls)) kM49d2@ac))))) (set! kM4ba4@kM313d@rev-map-append kM313d@rev-map-append) (set! kM313f@build-exports (lambda (kM49d6@lex*+loc* kM49d7@init*) (kM2dd5@kM2d2f@build-sequence '#f (cons (kM2dd6@kM2d31@build-void) (kM313d@rev-map-append (lambda (kM49da@x) (list 'set! (cdr kM49da@x) (car kM49da@x))) kM49d6@lex*+loc* kM49d7@init*))))) (set! kM4ba5@kM313f@build-exports kM313f@build-exports) (set! kM3141@make-export-subst (lambda (kM49dc@name* kM49dd@id*) (map (lambda (kM49e0@name kM49e1@id) (let ((kM49e4@label (kM2e86@id->label kM49e1@id))) (begin (if (not kM49e4@label) (kM3157@syntax-violation '#f '"cannot export unbound identifier" kM49e1@id) (void)) (cons kM49e0@name kM49e4@label)))) kM49dc@name* kM49dd@id*))) (set! kM4ba6@kM3141@make-export-subst kM3141@make-export-subst) (set! kM3143@make-export-env/macros (lambda (kM49e6@lex* kM49e7@loc* kM49e8@r) (let ((kM49ed@lookup '#f)) (begin (set! kM49ed@lookup (lambda (kM4a0a@x) (let kM4a12@f ((kM4a0c@x kM4a0a@x) (kM4a0d@lex* kM49e6@lex*) (kM4a0e@loc* kM49e7@loc*)) (if (pair? kM4a0d@lex*) (if (eq? kM4a0c@x (car kM4a0d@lex*)) (car kM4a0e@loc*) (kM4a12@f kM4a0c@x (cdr kM4a0d@lex*) (cdr kM4a0e@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let kM49f6@f ((kM49ee@r kM49e8@r) (kM49ef@env '()) (kM49f0@global* '()) (kM49f1@macro* '())) (if (null? kM49ee@r) (values kM49ef@env kM49f0@global* kM49f1@macro*) (let ((kM49f8@x (car kM49ee@r))) (let ((kM49fa@label (car kM49f8@x)) (kM49fb@b (cdr kM49f8@x))) (let ((kM49fe@t (kM2e8c@binding-type kM49fb@b))) (if (memv kM49fe@t '(lexical)) (let ((kM4a00@v (kM2e8e@binding-value kM49fb@b))) (let ((kM4a02@loc (kM49ed@lookup (kM3001@lexical-var kM4a00@v))) (kM4a03@type (if (kM3003@lexical-mutable? kM4a00@v) 'mutable 'global))) (kM49f6@f (cdr kM49ee@r) (cons (cons* kM49fa@label kM4a03@type kM4a02@loc) kM49ef@env) (cons (cons (kM3001@lexical-var kM4a00@v) kM4a02@loc) kM49f0@global*) kM49f1@macro*))) (if (memv kM49fe@t '(local-macro)) (let ((kM4a06@loc (gensym))) (kM49f6@f (cdr kM49ee@r) (cons (cons* kM49fa@label 'global-macro kM4a06@loc) kM49ef@env) kM49f0@global* (cons (cons kM4a06@loc (kM2e8e@binding-value kM49fb@b)) kM49f1@macro*))) (if (memv kM49fe@t '(local-macro!)) (let ((kM4a08@loc (gensym))) (kM49f6@f (cdr kM49ee@r) (cons (cons* kM49fa@label 'global-macro! kM4a08@loc) kM49ef@env) kM49f0@global* (cons (cons kM4a08@loc (kM2e8e@binding-value kM49fb@b)) kM49f1@macro*))) (if (memv kM49fe@t '($rtd $module)) (kM49f6@f (cdr kM49ee@r) (cons kM49f8@x kM49ef@env) kM49f0@global* kM49f1@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (kM2e8c@binding-type kM49fb@b) (kM2e8e@binding-value kM49fb@b))))))))))))))) (set! kM4ba7@kM3143@make-export-env/macros kM3143@make-export-env/macros) (set! kM3145@generate-temporaries (lambda (kM4a14@ls) (let ((kM4a16@t kM4a14@ls)) (let ((kM4a18@ls/false (kM3077@syntax-dispatch kM4a16@t 'each-any))) (if kM4a18@ls/false (apply (lambda (kM4a1a@ls) (map (lambda (kM4a1c@x) (make-simple-struct 'stx '5 (list (let ((kM4a1e@x (kM315d@syntax->datum kM4a1c@x))) (if (or (symbol? kM4a1e@x) (string? kM4a1e@x)) (gensym kM4a1e@x) (gensym 't))) kM2df4@top-mark* '() '()))) kM4a1a@ls)) kM4a18@ls/false) (let ((kM4a20@t kM4a16@t)) (let ((kM4a22@ls/false (kM3077@syntax-dispatch kM4a20@t '_))) (if kM4a22@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) kM4a22@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM4a20@t))))))))) (set! kM4ba8@kM3145@generate-temporaries kM3145@generate-temporaries) (set! kM3147@free-identifier=? (lambda (kM4a24@x kM4a25@y) (if (kM2e70@id? kM4a24@x) (if (kM2e70@id? kM4a25@y) (kM2e76@free-id=? kM4a24@x kM4a25@y) (assertion-violation 'free-identifier=? '"not an identifier" kM4a25@y)) (assertion-violation 'free-identifier=? '"not an identifier" kM4a24@x)))) (set! kM4ba9@kM3147@free-identifier=? kM3147@free-identifier=?) (set! kM3149@bound-identifier=? (lambda (kM4a28@x kM4a29@y) (if (kM2e70@id? kM4a28@x) (if (kM2e70@id? kM4a29@y) (kM2e74@bound-id=? kM4a28@x kM4a29@y) (assertion-violation 'bound-identifier=? '"not an identifier" kM4a29@y)) (assertion-violation 'bound-identifier=? '"not an identifier" kM4a28@x)))) (set! kM4baa@kM3149@bound-identifier=? kM3149@bound-identifier=?) (set! kM314b@make-source-condition (lambda (kM4a2c@x) (let ((kM4a36@kM4a31 '#f) (kM4a38@kM4a33 '#f) (kM4a3a@kM4a32 '#f) (kM4a3d@kM4a30 '#f) (kM4a3f@make-source-condition '#f) (kM4a41@kM4a2e '#f) (kM4a43@kM4a2f '#f) (kM4a45@source-condition? '#f) (kM4a47@source-filename '#f) (kM4a49@source-character '#f)) (begin (set! kM4a36@kM4a31 (make-record-type-descriptor '&source-information kM4e8c@kM4bd3@&condition-rtd 'kM4a34 '#f '#f '#((immutable file-name) (immutable character)))) (set! kM4a38@kM4a33 '#f) (set! kM4a3a@kM4a32 (make-record-constructor-descriptor kM4a36@kM4a31 kM4e8d@kM4bd5@&condition-rcd kM4a38@kM4a33)) (set! kM4a3d@kM4a30 (record-predicate kM4a36@kM4a31)) (set! kM4a3f@make-source-condition (record-constructor kM4a3a@kM4a32)) (set! kM4a41@kM4a2e (record-accessor kM4a36@kM4a31 '0)) (set! kM4a43@kM4a2f (record-accessor kM4a36@kM4a31 '1)) (set! kM4a45@source-condition? (condition-predicate kM4a36@kM4a31)) (set! kM4a47@source-filename (condition-accessor kM4a36@kM4a31 kM4a41@kM4a2e)) (set! kM4a49@source-character (condition-accessor kM4a36@kM4a31 kM4a43@kM4a2f)) (if (pair? kM4a2c@x) (kM4a3f@make-source-condition (car kM4a2c@x) (cdr kM4a2c@x)) (condition)))))) (set! kM4bab@kM314b@make-source-condition kM314b@make-source-condition) (set! kM314d@extract-position-condition (lambda (kM4a4a@x) (kM314b@make-source-condition (kM314f@expression-position kM4a4a@x)))) (set! kM4bac@kM314d@extract-position-condition kM314d@extract-position-condition) (set! kM314f@expression-position (lambda (kM4a4c@x) (and (kM2e3c@stx? kM4a4c@x) (let ((kM4a4e@x (kM2e3e@stx-expr kM4a4c@x))) (and (kM29af@kM2883@annotation? kM4a4e@x) (kM29b0@kM2885@annotation-source kM4a4e@x)))))) (set! kM4bad@kM314f@expression-position kM314f@expression-position) (set! kM3151@assertion-error (lambda (kM4a50@expr kM4a51@pos) (raise (condition (kM4ebc@kM4c97@make-assertion-violation) (kM4ece@kM4cc9@make-who-condition 'assert) (kM4e92@kM4c2a@make-message-condition '"assertion failed") (kM4ec4@kM4cae@make-irritants-condition (list kM4a50@expr)) (kM314b@make-source-condition kM4a51@pos))))) (set! kM4bae@kM3151@assertion-error kM3151@assertion-error) (set! kM3153@syntax-error (lambda (kM4a54@x . kM4a56@args) (begin (if (not (for-all string? kM4a56@args)) (assertion-violation 'syntax-error '"invalid argument" kM4a56@args) (void)) (raise (condition (kM4e92@kM4c2a@make-message-condition (if (null? kM4a56@args) '"invalid syntax" (apply string-append kM4a56@args))) (kM4ef0@kM4d25@make-syntax-violation (kM315d@syntax->datum kM4a54@x) '#f) (kM314d@extract-position-condition kM4a54@x)))))) (set! kM4baf@kM3153@syntax-error kM3153@syntax-error) (set! kM3155@syntax-violation* (lambda (kM4a58@who kM4a59@msg kM4a5a@form kM4a5b@condition-object) (begin (if (not (string? kM4a59@msg)) (assertion-violation 'syntax-violation '"message is not a string" kM4a59@msg) (void)) (let ((kM4a60@who (if (or (string? kM4a58@who) (symbol? kM4a58@who)) kM4a58@who (if (not kM4a58@who) (let ((kM4a62@t kM4a5a@form)) (let ((kM4a64@ls/false (kM3077@syntax-dispatch kM4a62@t 'any))) (if (and kM4a64@ls/false (apply (lambda (kM4a66@id) (kM2e70@id? kM4a66@id)) kM4a64@ls/false)) (apply (lambda (kM4a68@id) (kM315d@syntax->datum kM4a68@id)) kM4a64@ls/false) (let ((kM4a6a@t kM4a62@t)) (let ((kM4a6c@ls/false (kM3077@syntax-dispatch kM4a6a@t '(any . any)))) (if (and kM4a6c@ls/false (apply (lambda (kM4a6e@id kM4a6f@rest) (kM2e70@id? kM4a6e@id)) kM4a6c@ls/false)) (apply (lambda (kM4a72@id kM4a73@rest) (kM315d@syntax->datum kM4a72@id)) kM4a6c@ls/false) (let ((kM4a76@t kM4a6a@t)) (let ((kM4a78@ls/false (kM3077@syntax-dispatch kM4a76@t '_))) (if kM4a78@ls/false (apply (lambda () '#f) kM4a78@ls/false) (kM3157@syntax-violation '#f '"invalid syntax" kM4a76@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" kM4a58@who))))) (raise (condition (if kM4a60@who (kM4ece@kM4cc9@make-who-condition kM4a60@who) (condition)) (kM4e92@kM4c2a@make-message-condition kM4a59@msg) kM4a5b@condition-object (kM314d@extract-position-condition kM4a5a@form))))))) (set! kM4bb0@kM3155@syntax-violation* kM3155@syntax-violation*) (set! kM3157@syntax-violation (lambda kM4a88 (let ((kM4a89 (length kM4a88))) (if (= kM4a89 '3) (apply (lambda (kM4a7a@who kM4a7b@msg kM4a7c@form) (kM3157@syntax-violation kM4a7a@who kM4a7b@msg kM4a7c@form '#f)) kM4a88) (if (= kM4a89 '4) (apply (lambda (kM4a80@who kM4a81@msg kM4a82@form kM4a83@subform) (kM3155@syntax-violation* kM4a80@who kM4a81@msg kM4a82@form (kM4ef0@kM4d25@make-syntax-violation (kM315d@syntax->datum kM4a82@form) (kM315d@syntax->datum kM4a83@subform)))) kM4a88) (error 'apply '"invalid arg count")))))) (set! kM4bb1@kM3157@syntax-violation kM3157@syntax-violation) (set! kM3159@identifier? (lambda (kM4a8a@x) (kM2e70@id? kM4a8a@x))) (set! kM4bb2@kM3159@identifier? kM3159@identifier?) (set! kM315b@datum->syntax (lambda (kM4a8c@id kM4a8d@datum) (if (kM2e70@id? kM4a8c@id) (kM2e50@datum->stx kM4a8c@id kM4a8d@datum) (assertion-violation 'datum->syntax '"not an identifier" kM4a8c@id)))) (set! kM4bb3@kM315b@datum->syntax kM315b@datum->syntax) (set! kM315d@syntax->datum (lambda (kM4a90@x) (kM2e84@stx->datum kM4a90@x))) (set! kM4bb4@kM315d@syntax->datum kM315d@syntax->datum) (set! kM315f@ungensym-all (lambda (kM4a92@code) (if (pair? kM4a92@code) (cons (kM315f@ungensym-all (car kM4a92@code)) (kM315f@ungensym-all (cdr kM4a92@code))) (if (symbol? kM4a92@code) (ungensym kM4a92@code) kM4a92@code)))) (set! kM4bb5@kM315f@ungensym-all kM315f@ungensym-all) (set! kM3161@compile-r6rs-top-level (lambda (kM4a94@x*) (call-with-values (lambda () (kM30ef@top-level-expander kM4a94@x*)) (lambda (kM4a9a@kM4a97 kM4a9b@kM4a99) (let ((kM4a9e@invoke-code kM4a9b@kM4a99) (kM4a9f@lib* kM4a9a@kM4a97)) (lambda () (begin (for-each kM2c86@kM2ad4@invoke-library kM4a9f@lib*) (let ((kM4aa2@expanded (kM2a10@kM29c8@expanded->core kM4a9e@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (kM315f@ungensym-all kM4aa2@expanded)) (void)) (eval-core kM4aa2@expanded)))))))))) (set! kM4bb6@kM3161@compile-r6rs-top-level kM3161@compile-r6rs-top-level) (set! kM3163@pre-compile-r6rs-top-level (lambda (kM4aa4@x*) (call-with-values (lambda () (kM30ef@top-level-expander kM4aa4@x*)) (lambda (kM4aaa@kM4aa7 kM4aab@kM4aa9) (let ((kM4aae@invoke-code kM4aab@kM4aa9) (kM4aaf@lib* kM4aaa@kM4aa7)) (begin (for-each kM2c86@kM2ad4@invoke-library kM4aaf@lib*) (kM29b8@kM2895@compile-core (kM2a10@kM29c8@expanded->core kM4aae@invoke-code)))))))) (set! kM4bb7@kM3163@pre-compile-r6rs-top-level kM3163@pre-compile-r6rs-top-level) (set! kM3165@interaction-environment (let ((kM4ab2@the-env '#f)) (lambda () (or kM4ab2@the-env (let ((kM4ab4@lib (kM2c7f@kM2ac6@find-library-by-name '(mosh interaction))) (kM4ab5@rib (kM2e24@make-empty-rib))) (begin (let ((kM4ab8@subst (kM2c61@kM2a8a@library-subst kM4ab4@lib))) (begin (kM2e10@set-rib-sym*! kM4ab5@rib (map car kM4ab8@subst)) (kM2e14@set-rib-mark**! kM4ab5@rib (map (lambda (kM4aba@x) kM2df4@top-mark*) kM4ab8@subst)) (kM2e18@set-rib-label*! kM4ab5@rib (map cdr kM4ab8@subst)))) (let ((kM4abc@env (make-simple-struct 'interaction-env '4 (list kM4ab5@rib '() '())))) (begin (set! kM4ab2@the-env kM4abc@env) kM4abc@env)))))))) (set! kM4bb8@kM3165@interaction-environment kM3165@interaction-environment) (set! kM3167@top-level-context (kM29ba@kM2899@make-parameter '#f)) (set! kM4bb9@kM3167@top-level-context kM3167@top-level-context) (kM2c7c@kM2ac0@current-library-expander kM3139@library-expander))
(begin (set! kM4bc8@kM4bc3 (unspecified)) (set! kM4bca@kM4bc5 (unspecified)) (set! kM4bcc@kM4bc4 (unspecified)) (set! kM4bcf@&condition? (unspecified)) (set! kM4bd1@make-&condition (unspecified)) (set! kM4bd3@&condition-rtd (unspecified)) (set! kM4bd5@&condition-rcd (unspecified)) (set! kM4c21@kM4c1c (unspecified)) (set! kM4c23@kM4c1e (unspecified)) (set! kM4c25@kM4c1d (unspecified)) (set! kM4c28@p? (unspecified)) (set! kM4c2a@make-message-condition (unspecified)) (set! kM4c2c@kM4c1b (unspecified)) (set! kM4c2e@message-condition? (unspecified)) (set! kM4c30@condition-message (unspecified)) (set! kM4c32@&message-rtd (unspecified)) (set! kM4c34@&message-rcd (unspecified)) (set! kM4c3a@kM4c35 (unspecified)) (set! kM4c3c@kM4c37 (unspecified)) (set! kM4c3e@kM4c36 (unspecified)) (set! kM4c41@p? (unspecified)) (set! kM4c43@make-warning (unspecified)) (set! kM4c45@warning? (unspecified)) (set! kM4c47@&warning-rtd (unspecified)) (set! kM4c49@&warning-rcd (unspecified)) (set! kM4c4f@kM4c4a (unspecified)) (set! kM4c51@kM4c4c (unspecified)) (set! kM4c53@kM4c4b (unspecified)) (set! kM4c56@p? (unspecified)) (set! kM4c58@make-serious-condition (unspecified)) (set! kM4c5a@serious-condition? (unspecified)) (set! kM4c5c@&serious-rtd (unspecified)) (set! kM4c5e@&serious-rcd (unspecified)) (set! kM4c64@kM4c5f (unspecified)) (set! kM4c66@kM4c61 (unspecified)) (set! kM4c68@kM4c60 (unspecified)) (set! kM4c6b@p? (unspecified)) (set! kM4c6d@make-error (unspecified)) (set! kM4c6f@error? (unspecified)) (set! kM4c71@&error-rtd (unspecified)) (set! kM4c73@&error-rcd (unspecified)) (set! kM4c79@kM4c74 (unspecified)) (set! kM4c7b@kM4c76 (unspecified)) (set! kM4c7d@kM4c75 (unspecified)) (set! kM4c80@p? (unspecified)) (set! kM4c82@make-violation (unspecified)) (set! kM4c84@violation? (unspecified)) (set! kM4c86@&violation-rtd (unspecified)) (set! kM4c88@&violation-rcd (unspecified)) (set! kM4c8e@kM4c89 (unspecified)) (set! kM4c90@kM4c8b (unspecified)) (set! kM4c92@kM4c8a (unspecified)) (set! kM4c95@p? (unspecified)) (set! kM4c97@make-assertion-violation (unspecified)) (set! kM4c99@assertion-violation? (unspecified)) (set! kM4c9b@&assertion-rtd (unspecified)) (set! kM4c9d@&assertion-rcd (unspecified)) (set! kM4ca5@kM4ca0 (unspecified)) (set! kM4ca7@kM4ca2 (unspecified)) (set! kM4ca9@kM4ca1 (unspecified)) (set! kM4cac@p? (unspecified)) (set! kM4cae@make-irritants-condition (unspecified)) (set! kM4cb0@kM4c9f (unspecified)) (set! kM4cb2@irritants-condition? (unspecified)) (set! kM4cb4@condition-irritants (unspecified)) (set! kM4cb6@&irritants-rtd (unspecified)) (set! kM4cb8@&irritants-rcd (unspecified)) (set! kM4cc0@kM4cbb (unspecified)) (set! kM4cc2@kM4cbd (unspecified)) (set! kM4cc4@kM4cbc (unspecified)) (set! kM4cc7@p? (unspecified)) (set! kM4cc9@make-who-condition (unspecified)) (set! kM4ccb@kM4cba (unspecified)) (set! kM4ccd@who-condition? (unspecified)) (set! kM4ccf@condition-who (unspecified)) (set! kM4cd1@&who-rtd (unspecified)) (set! kM4cd3@&who-rcd (unspecified)) (set! kM4cd9@kM4cd4 (unspecified)) (set! kM4cdb@kM4cd6 (unspecified)) (set! kM4cdd@kM4cd5 (unspecified)) (set! kM4ce0@p? (unspecified)) (set! kM4ce2@make-non-continuable-violation (unspecified)) (set! kM4ce4@non-continuable-violation? (unspecified)) (set! kM4ce6@&non-continuable-rtd (unspecified)) (set! kM4ce8@&non-continuable-rcd (unspecified)) (set! kM4cee@kM4ce9 (unspecified)) (set! kM4cf0@kM4ceb (unspecified)) (set! kM4cf2@kM4cea (unspecified)) (set! kM4cf5@p? (unspecified)) (set! kM4cf7@make-implementation-restriction-violation (unspecified)) (set! kM4cf9@implementation-restriction-violation? (unspecified)) (set! kM4cfb@&implementation-restriction-rtd (unspecified)) (set! kM4cfd@&implementation-restriction-rcd (unspecified)) (set! kM4d03@kM4cfe (unspecified)) (set! kM4d05@kM4d00 (unspecified)) (set! kM4d07@kM4cff (unspecified)) (set! kM4d0a@p? (unspecified)) (set! kM4d0c@make-lexical-violation (unspecified)) (set! kM4d0e@lexical-violation? (unspecified)) (set! kM4d10@&lexical-rtd (unspecified)) (set! kM4d12@&lexical-rcd (unspecified)) (set! kM4d1c@kM4d17 (unspecified)) (set! kM4d1e@kM4d19 (unspecified)) (set! kM4d20@kM4d18 (unspecified)) (set! kM4d23@p? (unspecified)) (set! kM4d25@make-syntax-violation (unspecified)) (set! kM4d27@kM4d14 (unspecified)) (set! kM4d29@kM4d16 (unspecified)) (set! kM4d2b@syntax-violation? (unspecified)) (set! kM4d2d@syntax-violation-form (unspecified)) (set! kM4d2f@syntax-violation-subform (unspecified)) (set! kM4d31@&syntax-rtd (unspecified)) (set! kM4d33@&syntax-rcd (unspecified)) (set! kM4d39@kM4d34 (unspecified)) (set! kM4d3b@kM4d36 (unspecified)) (set! kM4d3d@kM4d35 (unspecified)) (set! kM4d40@p? (unspecified)) (set! kM4d42@make-undefined-violation (unspecified)) (set! kM4d44@undefined-violation? (unspecified)) (set! kM4d46@&undefined-rtd (unspecified)) (set! kM4d48@&undefined-rcd (unspecified)) (set! kM4d4e@kM4d49 (unspecified)) (set! kM4d50@kM4d4b (unspecified)) (set! kM4d52@kM4d4a (unspecified)) (set! kM4d55@p? (unspecified)) (set! kM4d57@make-i/o-error (unspecified)) (set! kM4d59@i/o-error? (unspecified)) (set! kM4d5b@&i/o-rtd (unspecified)) (set! kM4d5d@&i/o-rcd (unspecified)) (set! kM4d63@kM4d5e (unspecified)) (set! kM4d65@kM4d60 (unspecified)) (set! kM4d67@kM4d5f (unspecified)) (set! kM4d6a@p? (unspecified)) (set! kM4d6c@make-i/o-read-error (unspecified)) (set! kM4d6e@i/o-read-error? (unspecified)) (set! kM4d70@&i/o-read-rtd (unspecified)) (set! kM4d72@&i/o-read-rcd (unspecified)) (set! kM4d78@kM4d73 (unspecified)) (set! kM4d7a@kM4d75 (unspecified)) (set! kM4d7c@kM4d74 (unspecified)) (set! kM4d7f@p? (unspecified)) (set! kM4d81@make-i/o-write-error (unspecified)) (set! kM4d83@i/o-write-error? (unspecified)) (set! kM4d85@&i/o-write-rtd (unspecified)) (set! kM4d87@&i/o-write-rcd (unspecified)) (set! kM4d8f@kM4d8a (unspecified)) (set! kM4d91@kM4d8c (unspecified)) (set! kM4d93@kM4d8b (unspecified)) (set! kM4d96@p? (unspecified)) (set! kM4d98@make-i/o-invalid-position-error (unspecified)) (set! kM4d9a@kM4d89 (unspecified)) (set! kM4d9c@i/o-invalid-position-error? (unspecified)) (set! kM4d9e@i/o-error-position (unspecified)) (set! kM4da0@&i/o-invalid-position-rtd (unspecified)) (set! kM4da2@&i/o-invalid-position-rcd (unspecified)) (set! kM4daa@kM4da5 (unspecified)) (set! kM4dac@kM4da7 (unspecified)) (set! kM4dae@kM4da6 (unspecified)) (set! kM4db1@p? (unspecified)) (set! kM4db3@make-i/o-filename-error (unspecified)) (set! kM4db5@kM4da4 (unspecified)) (set! kM4db7@i/o-filename-error? (unspecified)) (set! kM4db9@i/o-error-filename (unspecified)) (set! kM4dbb@&i/o-filename-rtd (unspecified)) (set! kM4dbd@&i/o-filename-rcd (unspecified)) (set! kM4dc3@kM4dbe (unspecified)) (set! kM4dc5@kM4dc0 (unspecified)) (set! kM4dc7@kM4dbf (unspecified)) (set! kM4dca@p? (unspecified)) (set! kM4dcc@make-i/o-file-protection-error (unspecified)) (set! kM4dce@i/o-file-protection-error? (unspecified)) (set! kM4dd0@&i/o-file-protection-rtd (unspecified)) (set! kM4dd2@&i/o-file-protection-rcd (unspecified)) (set! kM4dd8@kM4dd3 (unspecified)) (set! kM4dda@kM4dd5 (unspecified)) (set! kM4ddc@kM4dd4 (unspecified)) (set! kM4ddf@p? (unspecified)) (set! kM4de1@make-i/o-file-is-read-only-error (unspecified)) (set! kM4de3@i/o-file-is-read-only-error? (unspecified)) (set! kM4de5@&i/o-file-is-read-only-rtd (unspecified)) (set! kM4de7@&i/o-file-is-read-only-rcd (unspecified)) (set! kM4ded@kM4de8 (unspecified)) (set! kM4def@kM4dea (unspecified)) (set! kM4df1@kM4de9 (unspecified)) (set! kM4df4@p? (unspecified)) (set! kM4df6@make-i/o-file-already-exists-error (unspecified)) (set! kM4df8@i/o-file-already-exists-error? (unspecified)) (set! kM4dfa@&i/o-file-already-exists-rtd (unspecified)) (set! kM4dfc@&i/o-file-already-exists-rcd (unspecified)) (set! kM4e02@kM4dfd (unspecified)) (set! kM4e04@kM4dff (unspecified)) (set! kM4e06@kM4dfe (unspecified)) (set! kM4e09@p? (unspecified)) (set! kM4e0b@make-i/o-file-does-not-exist-error (unspecified)) (set! kM4e0d@i/o-file-does-not-exist-error? (unspecified)) (set! kM4e0f@&i/o-file-does-not-exist-rtd (unspecified)) (set! kM4e11@&i/o-file-does-not-exist-rcd (unspecified)) (set! kM4e19@kM4e14 (unspecified)) (set! kM4e1b@kM4e16 (unspecified)) (set! kM4e1d@kM4e15 (unspecified)) (set! kM4e20@p? (unspecified)) (set! kM4e22@make-i/o-port-error (unspecified)) (set! kM4e24@kM4e13 (unspecified)) (set! kM4e26@i/o-port-error? (unspecified)) (set! kM4e28@i/o-error-port (unspecified)) (set! kM4e2a@&i/o-port-rtd (unspecified)) (set! kM4e2c@&i/o-port-rcd (unspecified)) (set! kM4e32@kM4e2d (unspecified)) (set! kM4e34@kM4e2f (unspecified)) (set! kM4e36@kM4e2e (unspecified)) (set! kM4e39@p? (unspecified)) (set! kM4e3b@make-i/o-decoding-error (unspecified)) (set! kM4e3d@i/o-decoding-error? (unspecified)) (set! kM4e3f@&i/o-decoding-rtd (unspecified)) (set! kM4e41@&i/o-decoding-rcd (unspecified)) (set! kM4e49@kM4e44 (unspecified)) (set! kM4e4b@kM4e46 (unspecified)) (set! kM4e4d@kM4e45 (unspecified)) (set! kM4e50@p? (unspecified)) (set! kM4e52@make-i/o-encoding-error (unspecified)) (set! kM4e54@kM4e43 (unspecified)) (set! kM4e56@i/o-encoding-error? (unspecified)) (set! kM4e58@i/o-encoding-error-char (unspecified)) (set! kM4e5a@&i/o-encoding-rtd (unspecified)) (set! kM4e5c@&i/o-encoding-rcd (unspecified)) (set! kM4e62@kM4e5d (unspecified)) (set! kM4e64@kM4e5f (unspecified)) (set! kM4e66@kM4e5e (unspecified)) (set! kM4e69@p? (unspecified)) (set! kM4e6b@make-no-infinities-violation (unspecified)) (set! kM4e6d@no-infinities-violation? (unspecified)) (set! kM4e6f@&no-infinities-rtd (unspecified)) (set! kM4e71@&no-infinities-rcd (unspecified)) (set! kM4e77@kM4e72 (unspecified)) (set! kM4e79@kM4e74 (unspecified)) (set! kM4e7b@kM4e73 (unspecified)) (set! kM4e7e@p? (unspecified)) (set! kM4e80@make-no-nans-violation (unspecified)) (set! kM4e82@no-nans-violation? (unspecified)) (set! kM4e84@&no-nans-rtd (unspecified)) (set! kM4e86@&no-nans-rcd (unspecified)) (set! kM4bc8@kM4bc3 (make-record-type-descriptor '&condition '#f 'kM4bc6 '#f '#f '#())) (set! kM4e87@kM4bc8@kM4bc3 kM4bc8@kM4bc3) (set! kM4bca@kM4bc5 '#f) (set! kM4e88@kM4bca@kM4bc5 kM4bca@kM4bc5) (set! kM4bcc@kM4bc4 (make-record-constructor-descriptor kM4bc8@kM4bc3 '#f kM4bca@kM4bc5)) (set! kM4e89@kM4bcc@kM4bc4 kM4bcc@kM4bc4) (set! kM4bcf@&condition? (record-predicate kM4bc8@kM4bc3)) (set! kM4e8a@kM4bcf@&condition? kM4bcf@&condition?) (set! kM4bd1@make-&condition (record-constructor kM4bcc@kM4bc4)) (set! kM4e8b@kM4bd1@make-&condition kM4bd1@make-&condition) (set! kM4bd3@&condition-rtd kM4bc8@kM4bc3) (set! kM4e8c@kM4bd3@&condition-rtd kM4bd3@&condition-rtd) (set! kM4bd5@&condition-rcd kM4bcc@kM4bc4) (set! kM4e8d@kM4bd5@&condition-rcd kM4bd5@&condition-rcd) (set! kM4c21@kM4c1c (make-record-type-descriptor '&message kM4bc8@kM4bc3 'kM4c1f '#f '#f '#((immutable message)))) (set! kM4e8e@kM4c21@kM4c1c kM4c21@kM4c1c) (set! kM4c23@kM4c1e '#f) (set! kM4e8f@kM4c23@kM4c1e kM4c23@kM4c1e) (set! kM4c25@kM4c1d (make-record-constructor-descriptor kM4c21@kM4c1c kM4bcc@kM4bc4 kM4c23@kM4c1e)) (set! kM4e90@kM4c25@kM4c1d kM4c25@kM4c1d) (set! kM4c28@p? (record-predicate kM4c21@kM4c1c)) (set! kM4e91@kM4c28@p? kM4c28@p?) (set! kM4c2a@make-message-condition (record-constructor kM4c25@kM4c1d)) (set! kM4e92@kM4c2a@make-message-condition kM4c2a@make-message-condition) (set! kM4c2c@kM4c1b (record-accessor kM4c21@kM4c1c '0)) (set! kM4e93@kM4c2c@kM4c1b kM4c2c@kM4c1b) (set! kM4c2e@message-condition? (condition-predicate kM4c21@kM4c1c)) (set! kM4e94@kM4c2e@message-condition? kM4c2e@message-condition?) (set! kM4c30@condition-message (condition-accessor kM4c21@kM4c1c kM4c2c@kM4c1b)) (set! kM4e95@kM4c30@condition-message kM4c30@condition-message) (set! kM4c32@&message-rtd kM4c21@kM4c1c) (set! kM4e96@kM4c32@&message-rtd kM4c32@&message-rtd) (set! kM4c34@&message-rcd kM4c25@kM4c1d) (set! kM4e97@kM4c34@&message-rcd kM4c34@&message-rcd) (set! kM4c3a@kM4c35 (make-record-type-descriptor '&warning kM4bc8@kM4bc3 'kM4c38 '#f '#f '#())) (set! kM4e98@kM4c3a@kM4c35 kM4c3a@kM4c35) (set! kM4c3c@kM4c37 '#f) (set! kM4e99@kM4c3c@kM4c37 kM4c3c@kM4c37) (set! kM4c3e@kM4c36 (make-record-constructor-descriptor kM4c3a@kM4c35 kM4bcc@kM4bc4 kM4c3c@kM4c37)) (set! kM4e9a@kM4c3e@kM4c36 kM4c3e@kM4c36) (set! kM4c41@p? (record-predicate kM4c3a@kM4c35)) (set! kM4e9b@kM4c41@p? kM4c41@p?) (set! kM4c43@make-warning (record-constructor kM4c3e@kM4c36)) (set! kM4e9c@kM4c43@make-warning kM4c43@make-warning) (set! kM4c45@warning? (condition-predicate kM4c3a@kM4c35)) (set! kM4e9d@kM4c45@warning? kM4c45@warning?) (set! kM4c47@&warning-rtd kM4c3a@kM4c35) (set! kM4e9e@kM4c47@&warning-rtd kM4c47@&warning-rtd) (set! kM4c49@&warning-rcd kM4c3e@kM4c36) (set! kM4e9f@kM4c49@&warning-rcd kM4c49@&warning-rcd) (set! kM4c4f@kM4c4a (make-record-type-descriptor '&serious kM4bc8@kM4bc3 'kM4c4d '#f '#f '#())) (set! kM4ea0@kM4c4f@kM4c4a kM4c4f@kM4c4a) (set! kM4c51@kM4c4c '#f) (set! kM4ea1@kM4c51@kM4c4c kM4c51@kM4c4c) (set! kM4c53@kM4c4b (make-record-constructor-descriptor kM4c4f@kM4c4a kM4bcc@kM4bc4 kM4c51@kM4c4c)) (set! kM4ea2@kM4c53@kM4c4b kM4c53@kM4c4b) (set! kM4c56@p? (record-predicate kM4c4f@kM4c4a)) (set! kM4ea3@kM4c56@p? kM4c56@p?) (set! kM4c58@make-serious-condition (record-constructor kM4c53@kM4c4b)) (set! kM4ea4@kM4c58@make-serious-condition kM4c58@make-serious-condition) (set! kM4c5a@serious-condition? (condition-predicate kM4c4f@kM4c4a)) (set! kM4ea5@kM4c5a@serious-condition? kM4c5a@serious-condition?) (set! kM4c5c@&serious-rtd kM4c4f@kM4c4a) (set! kM4ea6@kM4c5c@&serious-rtd kM4c5c@&serious-rtd) (set! kM4c5e@&serious-rcd kM4c53@kM4c4b) (set! kM4ea7@kM4c5e@&serious-rcd kM4c5e@&serious-rcd) (set! kM4c64@kM4c5f (make-record-type-descriptor '&error kM4c4f@kM4c4a 'kM4c62 '#f '#f '#())) (set! kM4ea8@kM4c64@kM4c5f kM4c64@kM4c5f) (set! kM4c66@kM4c61 '#f) (set! kM4ea9@kM4c66@kM4c61 kM4c66@kM4c61) (set! kM4c68@kM4c60 (make-record-constructor-descriptor kM4c64@kM4c5f kM4c53@kM4c4b kM4c66@kM4c61)) (set! kM4eaa@kM4c68@kM4c60 kM4c68@kM4c60) (set! kM4c6b@p? (record-predicate kM4c64@kM4c5f)) (set! kM4eab@kM4c6b@p? kM4c6b@p?) (set! kM4c6d@make-error (record-constructor kM4c68@kM4c60)) (set! kM4eac@kM4c6d@make-error kM4c6d@make-error) (set! kM4c6f@error? (condition-predicate kM4c64@kM4c5f)) (set! kM4ead@kM4c6f@error? kM4c6f@error?) (set! kM4c71@&error-rtd kM4c64@kM4c5f) (set! kM4eae@kM4c71@&error-rtd kM4c71@&error-rtd) (set! kM4c73@&error-rcd kM4c68@kM4c60) (set! kM4eaf@kM4c73@&error-rcd kM4c73@&error-rcd) (set! kM4c79@kM4c74 (make-record-type-descriptor '&violation kM4c4f@kM4c4a 'kM4c77 '#f '#f '#())) (set! kM4eb0@kM4c79@kM4c74 kM4c79@kM4c74) (set! kM4c7b@kM4c76 '#f) (set! kM4eb1@kM4c7b@kM4c76 kM4c7b@kM4c76) (set! kM4c7d@kM4c75 (make-record-constructor-descriptor kM4c79@kM4c74 kM4c53@kM4c4b kM4c7b@kM4c76)) (set! kM4eb2@kM4c7d@kM4c75 kM4c7d@kM4c75) (set! kM4c80@p? (record-predicate kM4c79@kM4c74)) (set! kM4eb3@kM4c80@p? kM4c80@p?) (set! kM4c82@make-violation (record-constructor kM4c7d@kM4c75)) (set! kM4eb4@kM4c82@make-violation kM4c82@make-violation) (set! kM4c84@violation? (condition-predicate kM4c79@kM4c74)) (set! kM4eb5@kM4c84@violation? kM4c84@violation?) (set! kM4c86@&violation-rtd kM4c79@kM4c74) (set! kM4eb6@kM4c86@&violation-rtd kM4c86@&violation-rtd) (set! kM4c88@&violation-rcd kM4c7d@kM4c75) (set! kM4eb7@kM4c88@&violation-rcd kM4c88@&violation-rcd) (set! kM4c8e@kM4c89 (make-record-type-descriptor '&assertion kM4c79@kM4c74 'kM4c8c '#f '#f '#())) (set! kM4eb8@kM4c8e@kM4c89 kM4c8e@kM4c89) (set! kM4c90@kM4c8b '#f) (set! kM4eb9@kM4c90@kM4c8b kM4c90@kM4c8b) (set! kM4c92@kM4c8a (make-record-constructor-descriptor kM4c8e@kM4c89 kM4c7d@kM4c75 kM4c90@kM4c8b)) (set! kM4eba@kM4c92@kM4c8a kM4c92@kM4c8a) (set! kM4c95@p? (record-predicate kM4c8e@kM4c89)) (set! kM4ebb@kM4c95@p? kM4c95@p?) (set! kM4c97@make-assertion-violation (record-constructor kM4c92@kM4c8a)) (set! kM4ebc@kM4c97@make-assertion-violation kM4c97@make-assertion-violation) (set! kM4c99@assertion-violation? (condition-predicate kM4c8e@kM4c89)) (set! kM4ebd@kM4c99@assertion-violation? kM4c99@assertion-violation?) (set! kM4c9b@&assertion-rtd kM4c8e@kM4c89) (set! kM4ebe@kM4c9b@&assertion-rtd kM4c9b@&assertion-rtd) (set! kM4c9d@&assertion-rcd kM4c92@kM4c8a) (set! kM4ebf@kM4c9d@&assertion-rcd kM4c9d@&assertion-rcd) (set! kM4ca5@kM4ca0 (make-record-type-descriptor '&irritants kM4bc8@kM4bc3 'kM4ca3 '#f '#f '#((immutable irritants)))) (set! kM4ec0@kM4ca5@kM4ca0 kM4ca5@kM4ca0) (set! kM4ca7@kM4ca2 '#f) (set! kM4ec1@kM4ca7@kM4ca2 kM4ca7@kM4ca2) (set! kM4ca9@kM4ca1 (make-record-constructor-descriptor kM4ca5@kM4ca0 kM4bcc@kM4bc4 kM4ca7@kM4ca2)) (set! kM4ec2@kM4ca9@kM4ca1 kM4ca9@kM4ca1) (set! kM4cac@p? (record-predicate kM4ca5@kM4ca0)) (set! kM4ec3@kM4cac@p? kM4cac@p?) (set! kM4cae@make-irritants-condition (record-constructor kM4ca9@kM4ca1)) (set! kM4ec4@kM4cae@make-irritants-condition kM4cae@make-irritants-condition) (set! kM4cb0@kM4c9f (record-accessor kM4ca5@kM4ca0 '0)) (set! kM4ec5@kM4cb0@kM4c9f kM4cb0@kM4c9f) (set! kM4cb2@irritants-condition? (condition-predicate kM4ca5@kM4ca0)) (set! kM4ec6@kM4cb2@irritants-condition? kM4cb2@irritants-condition?) (set! kM4cb4@condition-irritants (condition-accessor kM4ca5@kM4ca0 kM4cb0@kM4c9f)) (set! kM4ec7@kM4cb4@condition-irritants kM4cb4@condition-irritants) (set! kM4cb6@&irritants-rtd kM4ca5@kM4ca0) (set! kM4ec8@kM4cb6@&irritants-rtd kM4cb6@&irritants-rtd) (set! kM4cb8@&irritants-rcd kM4ca9@kM4ca1) (set! kM4ec9@kM4cb8@&irritants-rcd kM4cb8@&irritants-rcd) (set! kM4cc0@kM4cbb (make-record-type-descriptor '&who kM4bc8@kM4bc3 'kM4cbe '#f '#f '#((immutable who)))) (set! kM4eca@kM4cc0@kM4cbb kM4cc0@kM4cbb) (set! kM4cc2@kM4cbd '#f) (set! kM4ecb@kM4cc2@kM4cbd kM4cc2@kM4cbd) (set! kM4cc4@kM4cbc (make-record-constructor-descriptor kM4cc0@kM4cbb kM4bcc@kM4bc4 kM4cc2@kM4cbd)) (set! kM4ecc@kM4cc4@kM4cbc kM4cc4@kM4cbc) (set! kM4cc7@p? (record-predicate kM4cc0@kM4cbb)) (set! kM4ecd@kM4cc7@p? kM4cc7@p?) (set! kM4cc9@make-who-condition (record-constructor kM4cc4@kM4cbc)) (set! kM4ece@kM4cc9@make-who-condition kM4cc9@make-who-condition) (set! kM4ccb@kM4cba (record-accessor kM4cc0@kM4cbb '0)) (set! kM4ecf@kM4ccb@kM4cba kM4ccb@kM4cba) (set! kM4ccd@who-condition? (condition-predicate kM4cc0@kM4cbb)) (set! kM4ed0@kM4ccd@who-condition? kM4ccd@who-condition?) (set! kM4ccf@condition-who (condition-accessor kM4cc0@kM4cbb kM4ccb@kM4cba)) (set! kM4ed1@kM4ccf@condition-who kM4ccf@condition-who) (set! kM4cd1@&who-rtd kM4cc0@kM4cbb) (set! kM4ed2@kM4cd1@&who-rtd kM4cd1@&who-rtd) (set! kM4cd3@&who-rcd kM4cc4@kM4cbc) (set! kM4ed3@kM4cd3@&who-rcd kM4cd3@&who-rcd) (set! kM4cd9@kM4cd4 (make-record-type-descriptor '&non-continuable kM4c79@kM4c74 'kM4cd7 '#f '#f '#())) (set! kM4ed4@kM4cd9@kM4cd4 kM4cd9@kM4cd4) (set! kM4cdb@kM4cd6 '#f) (set! kM4ed5@kM4cdb@kM4cd6 kM4cdb@kM4cd6) (set! kM4cdd@kM4cd5 (make-record-constructor-descriptor kM4cd9@kM4cd4 kM4c7d@kM4c75 kM4cdb@kM4cd6)) (set! kM4ed6@kM4cdd@kM4cd5 kM4cdd@kM4cd5) (set! kM4ce0@p? (record-predicate kM4cd9@kM4cd4)) (set! kM4ed7@kM4ce0@p? kM4ce0@p?) (set! kM4ce2@make-non-continuable-violation (record-constructor kM4cdd@kM4cd5)) (set! kM4ed8@kM4ce2@make-non-continuable-violation kM4ce2@make-non-continuable-violation) (set! kM4ce4@non-continuable-violation? (condition-predicate kM4cd9@kM4cd4)) (set! kM4ed9@kM4ce4@non-continuable-violation? kM4ce4@non-continuable-violation?) (set! kM4ce6@&non-continuable-rtd kM4cd9@kM4cd4) (set! kM4eda@kM4ce6@&non-continuable-rtd kM4ce6@&non-continuable-rtd) (set! kM4ce8@&non-continuable-rcd kM4cdd@kM4cd5) (set! kM4edb@kM4ce8@&non-continuable-rcd kM4ce8@&non-continuable-rcd) (set! kM4cee@kM4ce9 (make-record-type-descriptor '&implementation-restriction kM4c79@kM4c74 'kM4cec '#f '#f '#())) (set! kM4edc@kM4cee@kM4ce9 kM4cee@kM4ce9) (set! kM4cf0@kM4ceb '#f) (set! kM4edd@kM4cf0@kM4ceb kM4cf0@kM4ceb) (set! kM4cf2@kM4cea (make-record-constructor-descriptor kM4cee@kM4ce9 kM4c7d@kM4c75 kM4cf0@kM4ceb)) (set! kM4ede@kM4cf2@kM4cea kM4cf2@kM4cea) (set! kM4cf5@p? (record-predicate kM4cee@kM4ce9)) (set! kM4edf@kM4cf5@p? kM4cf5@p?) (set! kM4cf7@make-implementation-restriction-violation (record-constructor kM4cf2@kM4cea)) (set! kM4ee0@kM4cf7@make-implementation-restriction-violation kM4cf7@make-implementation-restriction-violation) (set! kM4cf9@implementation-restriction-violation? (condition-predicate kM4cee@kM4ce9)) (set! kM4ee1@kM4cf9@implementation-restriction-violation? kM4cf9@implementation-restriction-violation?) (set! kM4cfb@&implementation-restriction-rtd kM4cee@kM4ce9) (set! kM4ee2@kM4cfb@&implementation-restriction-rtd kM4cfb@&implementation-restriction-rtd) (set! kM4cfd@&implementation-restriction-rcd kM4cf2@kM4cea) (set! kM4ee3@kM4cfd@&implementation-restriction-rcd kM4cfd@&implementation-restriction-rcd) (set! kM4d03@kM4cfe (make-record-type-descriptor '&lexical kM4c79@kM4c74 'kM4d01 '#f '#f '#())) (set! kM4ee4@kM4d03@kM4cfe kM4d03@kM4cfe) (set! kM4d05@kM4d00 '#f) (set! kM4ee5@kM4d05@kM4d00 kM4d05@kM4d00) (set! kM4d07@kM4cff (make-record-constructor-descriptor kM4d03@kM4cfe kM4c7d@kM4c75 kM4d05@kM4d00)) (set! kM4ee6@kM4d07@kM4cff kM4d07@kM4cff) (set! kM4d0a@p? (record-predicate kM4d03@kM4cfe)) (set! kM4ee7@kM4d0a@p? kM4d0a@p?) (set! kM4d0c@make-lexical-violation (record-constructor kM4d07@kM4cff)) (set! kM4ee8@kM4d0c@make-lexical-violation kM4d0c@make-lexical-violation) (set! kM4d0e@lexical-violation? (condition-predicate kM4d03@kM4cfe)) (set! kM4ee9@kM4d0e@lexical-violation? kM4d0e@lexical-violation?) (set! kM4d10@&lexical-rtd kM4d03@kM4cfe) (set! kM4eea@kM4d10@&lexical-rtd kM4d10@&lexical-rtd) (set! kM4d12@&lexical-rcd kM4d07@kM4cff) (set! kM4eeb@kM4d12@&lexical-rcd kM4d12@&lexical-rcd) (set! kM4d1c@kM4d17 (make-record-type-descriptor '&syntax kM4c79@kM4c74 'kM4d1a '#f '#f '#((immutable form) (immutable subform)))) (set! kM4eec@kM4d1c@kM4d17 kM4d1c@kM4d17) (set! kM4d1e@kM4d19 '#f) (set! kM4eed@kM4d1e@kM4d19 kM4d1e@kM4d19) (set! kM4d20@kM4d18 (make-record-constructor-descriptor kM4d1c@kM4d17 kM4c7d@kM4c75 kM4d1e@kM4d19)) (set! kM4eee@kM4d20@kM4d18 kM4d20@kM4d18) (set! kM4d23@p? (record-predicate kM4d1c@kM4d17)) (set! kM4eef@kM4d23@p? kM4d23@p?) (set! kM4d25@make-syntax-violation (record-constructor kM4d20@kM4d18)) (set! kM4ef0@kM4d25@make-syntax-violation kM4d25@make-syntax-violation) (set! kM4d27@kM4d14 (record-accessor kM4d1c@kM4d17 '0)) (set! kM4ef1@kM4d27@kM4d14 kM4d27@kM4d14) (set! kM4d29@kM4d16 (record-accessor kM4d1c@kM4d17 '1)) (set! kM4ef2@kM4d29@kM4d16 kM4d29@kM4d16) (set! kM4d2b@syntax-violation? (condition-predicate kM4d1c@kM4d17)) (set! kM4ef3@kM4d2b@syntax-violation? kM4d2b@syntax-violation?) (set! kM4d2d@syntax-violation-form (condition-accessor kM4d1c@kM4d17 kM4d27@kM4d14)) (set! kM4ef4@kM4d2d@syntax-violation-form kM4d2d@syntax-violation-form) (set! kM4d2f@syntax-violation-subform (condition-accessor kM4d1c@kM4d17 kM4d29@kM4d16)) (set! kM4ef5@kM4d2f@syntax-violation-subform kM4d2f@syntax-violation-subform) (set! kM4d31@&syntax-rtd kM4d1c@kM4d17) (set! kM4ef6@kM4d31@&syntax-rtd kM4d31@&syntax-rtd) (set! kM4d33@&syntax-rcd kM4d20@kM4d18) (set! kM4ef7@kM4d33@&syntax-rcd kM4d33@&syntax-rcd) (set! kM4d39@kM4d34 (make-record-type-descriptor '&undefined kM4c79@kM4c74 'kM4d37 '#f '#f '#())) (set! kM4ef8@kM4d39@kM4d34 kM4d39@kM4d34) (set! kM4d3b@kM4d36 '#f) (set! kM4ef9@kM4d3b@kM4d36 kM4d3b@kM4d36) (set! kM4d3d@kM4d35 (make-record-constructor-descriptor kM4d39@kM4d34 kM4c7d@kM4c75 kM4d3b@kM4d36)) (set! kM4efa@kM4d3d@kM4d35 kM4d3d@kM4d35) (set! kM4d40@p? (record-predicate kM4d39@kM4d34)) (set! kM4efb@kM4d40@p? kM4d40@p?) (set! kM4d42@make-undefined-violation (record-constructor kM4d3d@kM4d35)) (set! kM4efc@kM4d42@make-undefined-violation kM4d42@make-undefined-violation) (set! kM4d44@undefined-violation? (condition-predicate kM4d39@kM4d34)) (set! kM4efd@kM4d44@undefined-violation? kM4d44@undefined-violation?) (set! kM4d46@&undefined-rtd kM4d39@kM4d34) (set! kM4efe@kM4d46@&undefined-rtd kM4d46@&undefined-rtd) (set! kM4d48@&undefined-rcd kM4d3d@kM4d35) (set! kM4eff@kM4d48@&undefined-rcd kM4d48@&undefined-rcd) (set! kM4d4e@kM4d49 (make-record-type-descriptor '&i/o kM4c64@kM4c5f 'kM4d4c '#f '#f '#())) (set! kM4f00@kM4d4e@kM4d49 kM4d4e@kM4d49) (set! kM4d50@kM4d4b '#f) (set! kM4f01@kM4d50@kM4d4b kM4d50@kM4d4b) (set! kM4d52@kM4d4a (make-record-constructor-descriptor kM4d4e@kM4d49 kM4c68@kM4c60 kM4d50@kM4d4b)) (set! kM4f02@kM4d52@kM4d4a kM4d52@kM4d4a) (set! kM4d55@p? (record-predicate kM4d4e@kM4d49)) (set! kM4f03@kM4d55@p? kM4d55@p?) (set! kM4d57@make-i/o-error (record-constructor kM4d52@kM4d4a)) (set! kM4f04@kM4d57@make-i/o-error kM4d57@make-i/o-error) (set! kM4d59@i/o-error? (condition-predicate kM4d4e@kM4d49)) (set! kM4f05@kM4d59@i/o-error? kM4d59@i/o-error?) (set! kM4d5b@&i/o-rtd kM4d4e@kM4d49) (set! kM4f06@kM4d5b@&i/o-rtd kM4d5b@&i/o-rtd) (set! kM4d5d@&i/o-rcd kM4d52@kM4d4a) (set! kM4f07@kM4d5d@&i/o-rcd kM4d5d@&i/o-rcd) (set! kM4d63@kM4d5e (make-record-type-descriptor '&i/o-read kM4d4e@kM4d49 'kM4d61 '#f '#f '#())) (set! kM4f08@kM4d63@kM4d5e kM4d63@kM4d5e) (set! kM4d65@kM4d60 '#f) (set! kM4f09@kM4d65@kM4d60 kM4d65@kM4d60) (set! kM4d67@kM4d5f (make-record-constructor-descriptor kM4d63@kM4d5e kM4d52@kM4d4a kM4d65@kM4d60)) (set! kM4f0a@kM4d67@kM4d5f kM4d67@kM4d5f) (set! kM4d6a@p? (record-predicate kM4d63@kM4d5e)) (set! kM4f0b@kM4d6a@p? kM4d6a@p?) (set! kM4d6c@make-i/o-read-error (record-constructor kM4d67@kM4d5f)) (set! kM4f0c@kM4d6c@make-i/o-read-error kM4d6c@make-i/o-read-error) (set! kM4d6e@i/o-read-error? (condition-predicate kM4d63@kM4d5e)) (set! kM4f0d@kM4d6e@i/o-read-error? kM4d6e@i/o-read-error?) (set! kM4d70@&i/o-read-rtd kM4d63@kM4d5e) (set! kM4f0e@kM4d70@&i/o-read-rtd kM4d70@&i/o-read-rtd) (set! kM4d72@&i/o-read-rcd kM4d67@kM4d5f) (set! kM4f0f@kM4d72@&i/o-read-rcd kM4d72@&i/o-read-rcd) (set! kM4d78@kM4d73 (make-record-type-descriptor '&i/o-write kM4d4e@kM4d49 'kM4d76 '#f '#f '#())) (set! kM4f10@kM4d78@kM4d73 kM4d78@kM4d73) (set! kM4d7a@kM4d75 '#f) (set! kM4f11@kM4d7a@kM4d75 kM4d7a@kM4d75) (set! kM4d7c@kM4d74 (make-record-constructor-descriptor kM4d78@kM4d73 kM4d52@kM4d4a kM4d7a@kM4d75)) (set! kM4f12@kM4d7c@kM4d74 kM4d7c@kM4d74) (set! kM4d7f@p? (record-predicate kM4d78@kM4d73)) (set! kM4f13@kM4d7f@p? kM4d7f@p?) (set! kM4d81@make-i/o-write-error (record-constructor kM4d7c@kM4d74)) (set! kM4f14@kM4d81@make-i/o-write-error kM4d81@make-i/o-write-error) (set! kM4d83@i/o-write-error? (condition-predicate kM4d78@kM4d73)) (set! kM4f15@kM4d83@i/o-write-error? kM4d83@i/o-write-error?) (set! kM4d85@&i/o-write-rtd kM4d78@kM4d73) (set! kM4f16@kM4d85@&i/o-write-rtd kM4d85@&i/o-write-rtd) (set! kM4d87@&i/o-write-rcd kM4d7c@kM4d74) (set! kM4f17@kM4d87@&i/o-write-rcd kM4d87@&i/o-write-rcd) (set! kM4d8f@kM4d8a (make-record-type-descriptor '&i/o-invalid-position kM4d4e@kM4d49 'kM4d8d '#f '#f '#((immutable position)))) (set! kM4f18@kM4d8f@kM4d8a kM4d8f@kM4d8a) (set! kM4d91@kM4d8c '#f) (set! kM4f19@kM4d91@kM4d8c kM4d91@kM4d8c) (set! kM4d93@kM4d8b (make-record-constructor-descriptor kM4d8f@kM4d8a kM4d52@kM4d4a kM4d91@kM4d8c)) (set! kM4f1a@kM4d93@kM4d8b kM4d93@kM4d8b) (set! kM4d96@p? (record-predicate kM4d8f@kM4d8a)) (set! kM4f1b@kM4d96@p? kM4d96@p?) (set! kM4d98@make-i/o-invalid-position-error (record-constructor kM4d93@kM4d8b)) (set! kM4f1c@kM4d98@make-i/o-invalid-position-error kM4d98@make-i/o-invalid-position-error) (set! kM4d9a@kM4d89 (record-accessor kM4d8f@kM4d8a '0)) (set! kM4f1d@kM4d9a@kM4d89 kM4d9a@kM4d89) (set! kM4d9c@i/o-invalid-position-error? (condition-predicate kM4d8f@kM4d8a)) (set! kM4f1e@kM4d9c@i/o-invalid-position-error? kM4d9c@i/o-invalid-position-error?) (set! kM4d9e@i/o-error-position (condition-accessor kM4d8f@kM4d8a kM4d9a@kM4d89)) (set! kM4f1f@kM4d9e@i/o-error-position kM4d9e@i/o-error-position) (set! kM4da0@&i/o-invalid-position-rtd kM4d8f@kM4d8a) (set! kM4f20@kM4da0@&i/o-invalid-position-rtd kM4da0@&i/o-invalid-position-rtd) (set! kM4da2@&i/o-invalid-position-rcd kM4d93@kM4d8b) (set! kM4f21@kM4da2@&i/o-invalid-position-rcd kM4da2@&i/o-invalid-position-rcd) (set! kM4daa@kM4da5 (make-record-type-descriptor '&i/o-filename kM4d4e@kM4d49 'kM4da8 '#f '#f '#((immutable filename)))) (set! kM4f22@kM4daa@kM4da5 kM4daa@kM4da5) (set! kM4dac@kM4da7 '#f) (set! kM4f23@kM4dac@kM4da7 kM4dac@kM4da7) (set! kM4dae@kM4da6 (make-record-constructor-descriptor kM4daa@kM4da5 kM4d52@kM4d4a kM4dac@kM4da7)) (set! kM4f24@kM4dae@kM4da6 kM4dae@kM4da6) (set! kM4db1@p? (record-predicate kM4daa@kM4da5)) (set! kM4f25@kM4db1@p? kM4db1@p?) (set! kM4db3@make-i/o-filename-error (record-constructor kM4dae@kM4da6)) (set! kM4f26@kM4db3@make-i/o-filename-error kM4db3@make-i/o-filename-error) (set! kM4db5@kM4da4 (record-accessor kM4daa@kM4da5 '0)) (set! kM4f27@kM4db5@kM4da4 kM4db5@kM4da4) (set! kM4db7@i/o-filename-error? (condition-predicate kM4daa@kM4da5)) (set! kM4f28@kM4db7@i/o-filename-error? kM4db7@i/o-filename-error?) (set! kM4db9@i/o-error-filename (condition-accessor kM4daa@kM4da5 kM4db5@kM4da4)) (set! kM4f29@kM4db9@i/o-error-filename kM4db9@i/o-error-filename) (set! kM4dbb@&i/o-filename-rtd kM4daa@kM4da5) (set! kM4f2a@kM4dbb@&i/o-filename-rtd kM4dbb@&i/o-filename-rtd) (set! kM4dbd@&i/o-filename-rcd kM4dae@kM4da6) (set! kM4f2b@kM4dbd@&i/o-filename-rcd kM4dbd@&i/o-filename-rcd) (set! kM4dc3@kM4dbe (make-record-type-descriptor '&i/o-file-protection kM4daa@kM4da5 'kM4dc1 '#f '#f '#())) (set! kM4f2c@kM4dc3@kM4dbe kM4dc3@kM4dbe) (set! kM4dc5@kM4dc0 '#f) (set! kM4f2d@kM4dc5@kM4dc0 kM4dc5@kM4dc0) (set! kM4dc7@kM4dbf (make-record-constructor-descriptor kM4dc3@kM4dbe kM4dae@kM4da6 kM4dc5@kM4dc0)) (set! kM4f2e@kM4dc7@kM4dbf kM4dc7@kM4dbf) (set! kM4dca@p? (record-predicate kM4dc3@kM4dbe)) (set! kM4f2f@kM4dca@p? kM4dca@p?) (set! kM4dcc@make-i/o-file-protection-error (record-constructor kM4dc7@kM4dbf)) (set! kM4f30@kM4dcc@make-i/o-file-protection-error kM4dcc@make-i/o-file-protection-error) (set! kM4dce@i/o-file-protection-error? (condition-predicate kM4dc3@kM4dbe)) (set! kM4f31@kM4dce@i/o-file-protection-error? kM4dce@i/o-file-protection-error?) (set! kM4dd0@&i/o-file-protection-rtd kM4dc3@kM4dbe) (set! kM4f32@kM4dd0@&i/o-file-protection-rtd kM4dd0@&i/o-file-protection-rtd) (set! kM4dd2@&i/o-file-protection-rcd kM4dc7@kM4dbf) (set! kM4f33@kM4dd2@&i/o-file-protection-rcd kM4dd2@&i/o-file-protection-rcd) (set! kM4dd8@kM4dd3 (make-record-type-descriptor '&i/o-file-is-read-only kM4dc3@kM4dbe 'kM4dd6 '#f '#f '#())) (set! kM4f34@kM4dd8@kM4dd3 kM4dd8@kM4dd3) (set! kM4dda@kM4dd5 '#f) (set! kM4f35@kM4dda@kM4dd5 kM4dda@kM4dd5) (set! kM4ddc@kM4dd4 (make-record-constructor-descriptor kM4dd8@kM4dd3 kM4dc7@kM4dbf kM4dda@kM4dd5)) (set! kM4f36@kM4ddc@kM4dd4 kM4ddc@kM4dd4) (set! kM4ddf@p? (record-predicate kM4dd8@kM4dd3)) (set! kM4f37@kM4ddf@p? kM4ddf@p?) (set! kM4de1@make-i/o-file-is-read-only-error (record-constructor kM4ddc@kM4dd4)) (set! kM4f38@kM4de1@make-i/o-file-is-read-only-error kM4de1@make-i/o-file-is-read-only-error) (set! kM4de3@i/o-file-is-read-only-error? (condition-predicate kM4dd8@kM4dd3)) (set! kM4f39@kM4de3@i/o-file-is-read-only-error? kM4de3@i/o-file-is-read-only-error?) (set! kM4de5@&i/o-file-is-read-only-rtd kM4dd8@kM4dd3) (set! kM4f3a@kM4de5@&i/o-file-is-read-only-rtd kM4de5@&i/o-file-is-read-only-rtd) (set! kM4de7@&i/o-file-is-read-only-rcd kM4ddc@kM4dd4) (set! kM4f3b@kM4de7@&i/o-file-is-read-only-rcd kM4de7@&i/o-file-is-read-only-rcd) (set! kM4ded@kM4de8 (make-record-type-descriptor '&i/o-file-already-exists kM4daa@kM4da5 'kM4deb '#f '#f '#())) (set! kM4f3c@kM4ded@kM4de8 kM4ded@kM4de8) (set! kM4def@kM4dea '#f) (set! kM4f3d@kM4def@kM4dea kM4def@kM4dea) (set! kM4df1@kM4de9 (make-record-constructor-descriptor kM4ded@kM4de8 kM4dae@kM4da6 kM4def@kM4dea)) (set! kM4f3e@kM4df1@kM4de9 kM4df1@kM4de9) (set! kM4df4@p? (record-predicate kM4ded@kM4de8)) (set! kM4f3f@kM4df4@p? kM4df4@p?) (set! kM4df6@make-i/o-file-already-exists-error (record-constructor kM4df1@kM4de9)) (set! kM4f40@kM4df6@make-i/o-file-already-exists-error kM4df6@make-i/o-file-already-exists-error) (set! kM4df8@i/o-file-already-exists-error? (condition-predicate kM4ded@kM4de8)) (set! kM4f41@kM4df8@i/o-file-already-exists-error? kM4df8@i/o-file-already-exists-error?) (set! kM4dfa@&i/o-file-already-exists-rtd kM4ded@kM4de8) (set! kM4f42@kM4dfa@&i/o-file-already-exists-rtd kM4dfa@&i/o-file-already-exists-rtd) (set! kM4dfc@&i/o-file-already-exists-rcd kM4df1@kM4de9) (set! kM4f43@kM4dfc@&i/o-file-already-exists-rcd kM4dfc@&i/o-file-already-exists-rcd) (set! kM4e02@kM4dfd (make-record-type-descriptor '&i/o-file-does-not-exist kM4daa@kM4da5 'kM4e00 '#f '#f '#())) (set! kM4f44@kM4e02@kM4dfd kM4e02@kM4dfd) (set! kM4e04@kM4dff '#f) (set! kM4f45@kM4e04@kM4dff kM4e04@kM4dff) (set! kM4e06@kM4dfe (make-record-constructor-descriptor kM4e02@kM4dfd kM4dae@kM4da6 kM4e04@kM4dff)) (set! kM4f46@kM4e06@kM4dfe kM4e06@kM4dfe) (set! kM4e09@p? (record-predicate kM4e02@kM4dfd)) (set! kM4f47@kM4e09@p? kM4e09@p?) (set! kM4e0b@make-i/o-file-does-not-exist-error (record-constructor kM4e06@kM4dfe)) (set! kM4f48@kM4e0b@make-i/o-file-does-not-exist-error kM4e0b@make-i/o-file-does-not-exist-error) (set! kM4e0d@i/o-file-does-not-exist-error? (condition-predicate kM4e02@kM4dfd)) (set! kM4f49@kM4e0d@i/o-file-does-not-exist-error? kM4e0d@i/o-file-does-not-exist-error?) (set! kM4e0f@&i/o-file-does-not-exist-rtd kM4e02@kM4dfd) (set! kM4f4a@kM4e0f@&i/o-file-does-not-exist-rtd kM4e0f@&i/o-file-does-not-exist-rtd) (set! kM4e11@&i/o-file-does-not-exist-rcd kM4e06@kM4dfe) (set! kM4f4b@kM4e11@&i/o-file-does-not-exist-rcd kM4e11@&i/o-file-does-not-exist-rcd) (set! kM4e19@kM4e14 (make-record-type-descriptor '&i/o-port kM4d4e@kM4d49 'kM4e17 '#f '#f '#((immutable port)))) (set! kM4f4c@kM4e19@kM4e14 kM4e19@kM4e14) (set! kM4e1b@kM4e16 '#f) (set! kM4f4d@kM4e1b@kM4e16 kM4e1b@kM4e16) (set! kM4e1d@kM4e15 (make-record-constructor-descriptor kM4e19@kM4e14 kM4d52@kM4d4a kM4e1b@kM4e16)) (set! kM4f4e@kM4e1d@kM4e15 kM4e1d@kM4e15) (set! kM4e20@p? (record-predicate kM4e19@kM4e14)) (set! kM4f4f@kM4e20@p? kM4e20@p?) (set! kM4e22@make-i/o-port-error (record-constructor kM4e1d@kM4e15)) (set! kM4f50@kM4e22@make-i/o-port-error kM4e22@make-i/o-port-error) (set! kM4e24@kM4e13 (record-accessor kM4e19@kM4e14 '0)) (set! kM4f51@kM4e24@kM4e13 kM4e24@kM4e13) (set! kM4e26@i/o-port-error? (condition-predicate kM4e19@kM4e14)) (set! kM4f52@kM4e26@i/o-port-error? kM4e26@i/o-port-error?) (set! kM4e28@i/o-error-port (condition-accessor kM4e19@kM4e14 kM4e24@kM4e13)) (set! kM4f53@kM4e28@i/o-error-port kM4e28@i/o-error-port) (set! kM4e2a@&i/o-port-rtd kM4e19@kM4e14) (set! kM4f54@kM4e2a@&i/o-port-rtd kM4e2a@&i/o-port-rtd) (set! kM4e2c@&i/o-port-rcd kM4e1d@kM4e15) (set! kM4f55@kM4e2c@&i/o-port-rcd kM4e2c@&i/o-port-rcd) (set! kM4e32@kM4e2d (make-record-type-descriptor '&i/o-decoding kM4e19@kM4e14 'kM4e30 '#f '#f '#())) (set! kM4f56@kM4e32@kM4e2d kM4e32@kM4e2d) (set! kM4e34@kM4e2f '#f) (set! kM4f57@kM4e34@kM4e2f kM4e34@kM4e2f) (set! kM4e36@kM4e2e (make-record-constructor-descriptor kM4e32@kM4e2d kM4e1d@kM4e15 kM4e34@kM4e2f)) (set! kM4f58@kM4e36@kM4e2e kM4e36@kM4e2e) (set! kM4e39@p? (record-predicate kM4e32@kM4e2d)) (set! kM4f59@kM4e39@p? kM4e39@p?) (set! kM4e3b@make-i/o-decoding-error (record-constructor kM4e36@kM4e2e)) (set! kM4f5a@kM4e3b@make-i/o-decoding-error kM4e3b@make-i/o-decoding-error) (set! kM4e3d@i/o-decoding-error? (condition-predicate kM4e32@kM4e2d)) (set! kM4f5b@kM4e3d@i/o-decoding-error? kM4e3d@i/o-decoding-error?) (set! kM4e3f@&i/o-decoding-rtd kM4e32@kM4e2d) (set! kM4f5c@kM4e3f@&i/o-decoding-rtd kM4e3f@&i/o-decoding-rtd) (set! kM4e41@&i/o-decoding-rcd kM4e36@kM4e2e) (set! kM4f5d@kM4e41@&i/o-decoding-rcd kM4e41@&i/o-decoding-rcd) (set! kM4e49@kM4e44 (make-record-type-descriptor '&i/o-encoding kM4e19@kM4e14 'kM4e47 '#f '#f '#((immutable char)))) (set! kM4f5e@kM4e49@kM4e44 kM4e49@kM4e44) (set! kM4e4b@kM4e46 '#f) (set! kM4f5f@kM4e4b@kM4e46 kM4e4b@kM4e46) (set! kM4e4d@kM4e45 (make-record-constructor-descriptor kM4e49@kM4e44 kM4e1d@kM4e15 kM4e4b@kM4e46)) (set! kM4f60@kM4e4d@kM4e45 kM4e4d@kM4e45) (set! kM4e50@p? (record-predicate kM4e49@kM4e44)) (set! kM4f61@kM4e50@p? kM4e50@p?) (set! kM4e52@make-i/o-encoding-error (record-constructor kM4e4d@kM4e45)) (set! kM4f62@kM4e52@make-i/o-encoding-error kM4e52@make-i/o-encoding-error) (set! kM4e54@kM4e43 (record-accessor kM4e49@kM4e44 '0)) (set! kM4f63@kM4e54@kM4e43 kM4e54@kM4e43) (set! kM4e56@i/o-encoding-error? (condition-predicate kM4e49@kM4e44)) (set! kM4f64@kM4e56@i/o-encoding-error? kM4e56@i/o-encoding-error?) (set! kM4e58@i/o-encoding-error-char (condition-accessor kM4e49@kM4e44 kM4e54@kM4e43)) (set! kM4f65@kM4e58@i/o-encoding-error-char kM4e58@i/o-encoding-error-char) (set! kM4e5a@&i/o-encoding-rtd kM4e49@kM4e44) (set! kM4f66@kM4e5a@&i/o-encoding-rtd kM4e5a@&i/o-encoding-rtd) (set! kM4e5c@&i/o-encoding-rcd kM4e4d@kM4e45) (set! kM4f67@kM4e5c@&i/o-encoding-rcd kM4e5c@&i/o-encoding-rcd) (set! kM4e62@kM4e5d (make-record-type-descriptor '&no-infinities kM4cee@kM4ce9 'kM4e60 '#f '#f '#())) (set! kM4f68@kM4e62@kM4e5d kM4e62@kM4e5d) (set! kM4e64@kM4e5f '#f) (set! kM4f69@kM4e64@kM4e5f kM4e64@kM4e5f) (set! kM4e66@kM4e5e (make-record-constructor-descriptor kM4e62@kM4e5d kM4cf2@kM4cea kM4e64@kM4e5f)) (set! kM4f6a@kM4e66@kM4e5e kM4e66@kM4e5e) (set! kM4e69@p? (record-predicate kM4e62@kM4e5d)) (set! kM4f6b@kM4e69@p? kM4e69@p?) (set! kM4e6b@make-no-infinities-violation (record-constructor kM4e66@kM4e5e)) (set! kM4f6c@kM4e6b@make-no-infinities-violation kM4e6b@make-no-infinities-violation) (set! kM4e6d@no-infinities-violation? (condition-predicate kM4e62@kM4e5d)) (set! kM4f6d@kM4e6d@no-infinities-violation? kM4e6d@no-infinities-violation?) (set! kM4e6f@&no-infinities-rtd kM4e62@kM4e5d) (set! kM4f6e@kM4e6f@&no-infinities-rtd kM4e6f@&no-infinities-rtd) (set! kM4e71@&no-infinities-rcd kM4e66@kM4e5e) (set! kM4f6f@kM4e71@&no-infinities-rcd kM4e71@&no-infinities-rcd) (set! kM4e77@kM4e72 (make-record-type-descriptor '&no-nans kM4cee@kM4ce9 'kM4e75 '#f '#f '#())) (set! kM4f70@kM4e77@kM4e72 kM4e77@kM4e72) (set! kM4e79@kM4e74 '#f) (set! kM4f71@kM4e79@kM4e74 kM4e79@kM4e74) (set! kM4e7b@kM4e73 (make-record-constructor-descriptor kM4e77@kM4e72 kM4cf2@kM4cea kM4e79@kM4e74)) (set! kM4f72@kM4e7b@kM4e73 kM4e7b@kM4e73) (set! kM4e7e@p? (record-predicate kM4e77@kM4e72)) (set! kM4f73@kM4e7e@p? kM4e7e@p?) (set! kM4e80@make-no-nans-violation (record-constructor kM4e7b@kM4e73)) (set! kM4f74@kM4e80@make-no-nans-violation kM4e80@make-no-nans-violation) (set! kM4e82@no-nans-violation? (condition-predicate kM4e77@kM4e72)) (set! kM4f75@kM4e82@no-nans-violation? kM4e82@no-nans-violation?) (set! kM4e84@&no-nans-rtd kM4e77@kM4e72) (set! kM4f76@kM4e84@&no-nans-rtd kM4e84@&no-nans-rtd) (set! kM4e86@&no-nans-rcd kM4e7b@kM4e73) (set! kM4f77@kM4e86@&no-nans-rcd kM4e86@&no-nans-rcd) (void))
(begin (begin (kM2a0d@kM29c2@current-primitive-locations (lambda (kM5445@x) (let ((kM5447@t (assq kM5445@x '((&no-nans-rcd . kM4f77@kM4e86@&no-nans-rcd) (&no-nans-rtd . kM4f76@kM4e84@&no-nans-rtd) (&no-infinities-rcd . kM4f6f@kM4e71@&no-infinities-rcd) (&no-infinities-rtd . kM4f6e@kM4e6f@&no-infinities-rtd) (&i/o-encoding-rcd . kM4f67@kM4e5c@&i/o-encoding-rcd) (&i/o-encoding-rtd . kM4f66@kM4e5a@&i/o-encoding-rtd) (&i/o-decoding-rcd . kM4f5d@kM4e41@&i/o-decoding-rcd) (&i/o-decoding-rtd . kM4f5c@kM4e3f@&i/o-decoding-rtd) (&i/o-port-rcd . kM4f55@kM4e2c@&i/o-port-rcd) (&i/o-port-rtd . kM4f54@kM4e2a@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . kM4f4b@kM4e11@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . kM4f4a@kM4e0f@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . kM4f43@kM4dfc@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . kM4f42@kM4dfa@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . kM4f3b@kM4de7@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . kM4f3a@kM4de5@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . kM4f33@kM4dd2@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . kM4f32@kM4dd0@&i/o-file-protection-rtd) (&i/o-filename-rcd . kM4f2b@kM4dbd@&i/o-filename-rcd) (&i/o-filename-rtd . kM4f2a@kM4dbb@&i/o-filename-rtd) (&i/o-invalid-position-rcd . kM4f21@kM4da2@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . kM4f20@kM4da0@&i/o-invalid-position-rtd) (&i/o-write-rcd . kM4f17@kM4d87@&i/o-write-rcd) (&i/o-write-rtd . kM4f16@kM4d85@&i/o-write-rtd) (&i/o-read-rcd . kM4f0f@kM4d72@&i/o-read-rcd) (&i/o-read-rtd . kM4f0e@kM4d70@&i/o-read-rtd) (&i/o-rcd . kM4f07@kM4d5d@&i/o-rcd) (&i/o-rtd . kM4f06@kM4d5b@&i/o-rtd) (&undefined-rcd . kM4eff@kM4d48@&undefined-rcd) (&undefined-rtd . kM4efe@kM4d46@&undefined-rtd) (&syntax-rcd . kM4ef7@kM4d33@&syntax-rcd) (&syntax-rtd . kM4ef6@kM4d31@&syntax-rtd) (&lexical-rcd . kM4eeb@kM4d12@&lexical-rcd) (&lexical-rtd . kM4eea@kM4d10@&lexical-rtd) (&implementation-restriction-rcd . kM4ee3@kM4cfd@&implementation-restriction-rcd) (&implementation-restriction-rtd . kM4ee2@kM4cfb@&implementation-restriction-rtd) (&non-continuable-rcd . kM4edb@kM4ce8@&non-continuable-rcd) (&non-continuable-rtd . kM4eda@kM4ce6@&non-continuable-rtd) (&who-rcd . kM4ed3@kM4cd3@&who-rcd) (&who-rtd . kM4ed2@kM4cd1@&who-rtd) (&irritants-rcd . kM4ec9@kM4cb8@&irritants-rcd) (&irritants-rtd . kM4ec8@kM4cb6@&irritants-rtd) (&assertion-rcd . kM4ebf@kM4c9d@&assertion-rcd) (&assertion-rtd . kM4ebe@kM4c9b@&assertion-rtd) (&violation-rcd . kM4eb7@kM4c88@&violation-rcd) (&violation-rtd . kM4eb6@kM4c86@&violation-rtd) (&error-rcd . kM4eaf@kM4c73@&error-rcd) (&error-rtd . kM4eae@kM4c71@&error-rtd) (&serious-rcd . kM4ea7@kM4c5e@&serious-rcd) (&serious-rtd . kM4ea6@kM4c5c@&serious-rtd) (&warning-rcd . kM4e9f@kM4c49@&warning-rcd) (&warning-rtd . kM4e9e@kM4c47@&warning-rtd) (&message-rcd . kM4e97@kM4c34@&message-rcd) (&message-rtd . kM4e96@kM4c32@&message-rtd) (&condition-rcd . kM4e8d@kM4bd5@&condition-rcd) (&condition-rtd . kM4e8c@kM4bd3@&condition-rtd) (syntax-error . kM4baf@kM3153@syntax-error) (syntax-dispatch . kM4b4d@kM3077@syntax-dispatch) (load . kM50ec@kM4f97@load) (interaction-environment . kM4bb8@kM3165@interaction-environment) (library-path . kM2c74@kM2ab0@library-path) (mosh-cache-dir . kM29bb@kM289b@mosh-cache-dir) (make-parameter . kM29ba@kM2899@make-parameter) (make-variable-transformer . kM4b0a@kM2ea2@make-variable-transformer) (identifier? . kM4bb2@kM3159@identifier?) (generate-temporaries . kM4ba8@kM3145@generate-temporaries) (free-identifier=? . kM4ba9@kM3147@free-identifier=?) (syntax->datum . kM4bb4@kM315d@syntax->datum) (datum->syntax . kM4bb3@kM315b@datum->syntax) (bound-identifier=? . kM4baa@kM3149@bound-identifier=?) (make-i/o-write-error . kM4f14@kM4d81@make-i/o-write-error) (make-i/o-read-error . kM4f0c@kM4d6c@make-i/o-read-error) (make-i/o-port-error . kM4f50@kM4e22@make-i/o-port-error) (make-i/o-invalid-position-error . kM4f1c@kM4d98@make-i/o-invalid-position-error) (make-i/o-filename-error . kM4f26@kM4db3@make-i/o-filename-error) (make-i/o-file-protection-error . kM4f30@kM4dcc@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . kM4f38@kM4de1@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . kM4f48@kM4e0b@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . kM4f40@kM4df6@make-i/o-file-already-exists-error) (make-i/o-error . kM4f04@kM4d57@make-i/o-error) (make-i/o-encoding-error . kM4f62@kM4e52@make-i/o-encoding-error) (make-i/o-decoding-error . kM4f5a@kM4e3b@make-i/o-decoding-error) (i/o-write-error? . kM4f15@kM4d83@i/o-write-error?) (i/o-read-error? . kM4f0d@kM4d6e@i/o-read-error?) (i/o-port-error? . kM4f52@kM4e26@i/o-port-error?) (i/o-invalid-position-error? . kM4f1e@kM4d9c@i/o-invalid-position-error?) (i/o-filename-error? . kM4f28@kM4db7@i/o-filename-error?) (i/o-file-protection-error? . kM4f31@kM4dce@i/o-file-protection-error?) (i/o-file-is-read-only-error? . kM4f39@kM4de3@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . kM4f49@kM4e0d@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . kM4f41@kM4df8@i/o-file-already-exists-error?) (i/o-error? . kM4f05@kM4d59@i/o-error?) (i/o-error-position . kM4f1f@kM4d9e@i/o-error-position) (i/o-error-port . kM4f53@kM4e28@i/o-error-port) (i/o-error-filename . kM4f29@kM4db9@i/o-error-filename) (i/o-encoding-error? . kM4f64@kM4e56@i/o-encoding-error?) (i/o-encoding-error-char . kM4f65@kM4e58@i/o-encoding-error-char) (i/o-decoding-error? . kM4f5b@kM4e3d@i/o-decoding-error?) (scheme-report-environment . kM4b9f@kM3133@scheme-report-environment) (null-environment . kM4b9e@kM3131@null-environment) (command-line . kM50e9@kM4f91@command-line) (eval . kM4ba1@kM3137@eval) (environment . kM4b9d@kM312f@environment) (who-condition? . kM4ed0@kM4ccd@who-condition?) (warning? . kM4e9d@kM4c45@warning?) (violation? . kM4eb5@kM4c84@violation?) (undefined-violation? . kM4efd@kM4d44@undefined-violation?) (syntax-violation? . kM4ef3@kM4d2b@syntax-violation?) (syntax-violation-subform . kM4ef5@kM4d2f@syntax-violation-subform) (syntax-violation-form . kM4ef4@kM4d2d@syntax-violation-form) (syntax-violation . kM4bb1@kM3157@syntax-violation) (serious-condition? . kM4ea5@kM4c5a@serious-condition?) (non-continuable-violation? . kM4ed9@kM4ce4@non-continuable-violation?) (message-condition? . kM4e94@kM4c2e@message-condition?) (make-who-condition . kM4ece@kM4cc9@make-who-condition) (make-warning . kM4e9c@kM4c43@make-warning) (make-violation . kM4eb4@kM4c82@make-violation) (make-undefined-violation . kM4efc@kM4d42@make-undefined-violation) (make-syntax-violation . kM4ef0@kM4d25@make-syntax-violation) (make-serious-condition . kM4ea4@kM4c58@make-serious-condition) (make-non-continuable-violation . kM4ed8@kM4ce2@make-non-continuable-violation) (make-message-condition . kM4e92@kM4c2a@make-message-condition) (make-lexical-violation . kM4ee8@kM4d0c@make-lexical-violation) (make-irritants-condition . kM4ec4@kM4cae@make-irritants-condition) (make-implementation-restriction-violation . kM4ee0@kM4cf7@make-implementation-restriction-violation) (make-error . kM4eac@kM4c6d@make-error) (make-assertion-violation . kM4ebc@kM4c97@make-assertion-violation) (lexical-violation? . kM4ee9@kM4d0e@lexical-violation?) (irritants-condition? . kM4ec6@kM4cb2@irritants-condition?) (implementation-restriction-violation? . kM4ee1@kM4cf9@implementation-restriction-violation?) (error? . kM4ead@kM4c6f@error?) (condition-who . kM4ed1@kM4ccf@condition-who) (condition-message . kM4e95@kM4c30@condition-message) (condition-irritants . kM4ec7@kM4cb4@condition-irritants) (assertion-violation? . kM4ebd@kM4c99@assertion-violation?) (no-nans-violation? . kM4f75@kM4e82@no-nans-violation?) (no-infinities-violation? . kM4f6d@kM4e6d@no-infinities-violation?) (make-no-nans-violation . kM4f74@kM4e80@make-no-nans-violation) (make-no-infinities-violation . kM4f6c@kM4e6b@make-no-infinities-violation) (assertion-error . kM4bae@kM3151@assertion-error))))) (if kM5447@t (cdr kM5447@t) '#f)))) (kM2c84@kM2ad0@install-library 'kM5422 '(mosh interaction) '() '() '() '() '((regexp? . kM541a) (alist->eq-hash-table . kM5416) (format . kM5413) (string-split . kM5408) (call-process . kM5402) (set-current-directory! . kM53fe) (expand-path . kM53fd) (current-directory . kM53fc) (%spawn . kM53fb) (%waitpid . kM53fa) (simple-struct-name . kM53f9) (simple-struct-set! . kM53f8) (simple-struct-ref . kM53f7) (make-simple-struct . kM53f6) (simple-struct? . kM53f5) (pointer-ref-c-int64 . kM53f4) (pointer-ref-c-int32 . kM53f3) (pointer-ref-c-int16 . kM53f2) (pointer-ref-c-int8 . kM53f1) (pointer-ref-c-uint64 . kM53f0) (pointer-ref-c-uint32 . kM53ef) (pointer-ref-c-uint16 . kM53ee) (pointer-ref-c-uint8 . kM53ed) (pointer-set-c-uint64! . kM53ec) (pointer-set-c-uint32! . kM53eb) (pointer-set-c-uint16! . kM53ea) (pointer-set-c-uint8! . kM53e9) (pointer-set-c-int64! . kM53e8) (pointer-set-c-int32! . kM53e7) (pointer-set-c-int16! . kM53e6) (pointer-set-c-int8! . kM53e5) (pointer-set-c-pointer! . kM53e4) (pointer-set-c-double! . kM53e3) (pointer-set-c-float! . kM53e2) (pointer-set-c-long-long! . kM53e1) (pointer-set-c-long! . kM53e0) (pointer-set-c-int! . kM53df) (pointer-set-c-short! . kM53de) (pointer-set-c-char! . kM53dd) (pointer-ref-c-pointer . kM53dc) (pointer-ref-c-double . kM53db) (pointer-ref-c-float . kM53da) (pointer-ref-c-unsigned-long-long . kM53d9) (pointer-ref-c-signed-long-long . kM53d8) (pointer-ref-c-unsigned-long . kM53d7) (pointer-ref-c-signed-long . kM53d6) (pointer-ref-c-unsigned-int . kM53d5) (pointer-ref-c-signed-int . kM53d4) (pointer-ref-c-unsigned-short . kM53d3) (pointer-ref-c-signed-short . kM53d2) (pointer-ref-c-unsigned-char . kM53d1) (pointer-ref-c-signed-char . kM53d0) (pointer->integer . kM53cf) (integer->pointer . kM53ce) (pointer? . kM53cd) (shared-errno . kM53cc) (%ffi-supported? . kM53c7) (%ffi-pointer->string . kM53c6) (%ffi-call->string-or-zero . kM53c5) (%ffi-call->double . kM53c4) (%ffi-call->void* . kM53c3) (%ffi-call->void . kM53c2) (%ffi-call->char . kM53c1) (%ffi-call->int . kM53c0) (%ffi-lookup . kM53bf) (%ffi-open . kM53be) (%fork . kM53bd) (%pipe . kM53bc) (p . kM53bb) (whereis . kM539f) (register . kM539e) (vm-join! . kM539d) (vm-set-value! . kM539c) (vm? . kM539b) (main-vm? . kM539a) (vm-eval . kM5399) (vm-self . kM5398) (vm-start! . kM5397) (make-vm . kM5396) (mutex-try-lock! . kM5395) (mutex-unlock! . kM5394) (mutex-lock! . kM5393) (mutex? . kM5392) (make-mutex . kM5391) (condition-variable-notify-all! . kM5390) (condition-variable-notify! . kM538f) (condition-variable-wait! . kM538e) (make-condition-variable . kM538d) (string-upcase . kM5375) (string-titlecase . kM5374) (string-normalize-nfkd . kM5373) (string-normalize-nfkc . kM5372) (string-normalize-nfd . kM5371) (string-normalize-nfc . kM5370) (string-foldcase . kM536f) (string-downcase . kM536e) (string-ci>? . kM536d) (string-ci>=? . kM536c) (string-ci=? . kM536b) (string-ci<? . kM536a) (string-ci<=? . kM5369) (char-whitespace? . kM5368) (char-upper-case? . kM5367) (char-title-case? . kM5366) (char-numeric? . kM5365) (char-lower-case? . kM5364) (char-general-category . kM5363) (char-upcase . kM5362) (char-titlecase . kM5361) (char-foldcase . kM5360) (char-downcase . kM535f) (char-ci>? . kM535e) (char-ci>=? . kM535d) (char-ci=? . kM535c) (char-ci<? . kM535b) (char-ci<=? . kM535a) (char-alphabetic? . kM5359) (make-variable-transformer . kM2ea1) (identifier? . kM3158) (generate-temporaries . kM3144) (free-identifier=? . kM3146) (syntax->datum . kM315c) (datum->syntax . kM315a) (bound-identifier=? . kM3148) (record-type-descriptor? . kM5358) (record-predicate . kM5357) (record-mutator . kM5356) (record-constructor . kM5355) (record-accessor . kM5354) (make-record-type-descriptor . kM5353) (make-record-constructor-descriptor . kM5352) (record? . kM5351) (record-type-uid . kM5350) (record-type-sealed? . kM534f) (record-type-parent . kM534e) (record-type-opaque? . kM534d) (record-type-name . kM534c) (record-type-generative? . kM534b) (record-type-field-names . kM534a) (record-rtd . kM5349) (record-field-mutable? . kM5348) (delete-file . kM5347) (file-exists? . kM5346) (vector-sort! . kM5345) (vector-sort . kM5344) (list-sort . kM5343) (symbol-hash . kM5342) (string-ci-hash . kM5341) (string-hash . kM5340) (equal-hash . kM533f) (hashtable-equivalence-function . kM533e) (make-hashtable . kM533d) (hashtable-hash-function . kM533c) (make-eqv-hashtable . kM533b) (make-eq-hashtable . kM533a) (hashtable? . kM5339) (hashtable-update! . kM5338) (hashtable-size . kM5337) (hashtable-set! . kM5336) (hashtable-ref . kM5335) (hashtable-mutable? . kM5334) (hashtable-keys . kM5333) (hashtable-entries . kM5332) (hashtable-delete! . kM5331) (hashtable-copy . kM5330) (hashtable-contains? . kM532f) (hashtable-clear! . kM532e) (call-with-output-file . kM532d) (call-with-input-file . kM532c) (write-char . kM532b) (write . kM532a) (with-output-to-file . kM5329) (with-input-from-file . kM5328) (read-char . kM5327) (read . kM5326) (peek-char . kM5325) (open-output-file . kM5324) (open-input-file . kM5323) (newline . kM5322) (display . kM5321) (close-output-port . kM5320) (close-input-port . kM531f) (eof-object? . kM531e) (eof-object . kM531d) (current-error-port . kM531c) (current-output-port . kM531b) (current-input-port . kM531a) (output-port? . kM5319) (input-port? . kM5318) (utf-8-codec . kM5317) (utf-16-codec . kM5316) (transcoder-error-handling-mode . kM5315) (transcoder-eol-style . kM5314) (transcoder-codec . kM5313) (transcoded-port . kM5312) (textual-port? . kM5311) (string->bytevector . kM5310) (standard-output-port . kM530f) (standard-input-port . kM530e) (standard-error-port . kM530d) (set-port-position! . kM530c) (put-u8 . kM530b) (put-string . kM530a) (put-datum . kM5309) (put-char . kM5308) (put-bytevector . kM5307) (port? . kM5306) (port-transcoder . kM5305) (port-position . kM5304) (port-has-set-port-position!? . kM5303) (port-has-port-position? . kM5302) (port-eof? . kM5301) (output-port-buffer-mode . kM5300) (open-string-output-port . kM52ff) (open-string-input-port . kM52fe) (open-file-output-port . kM52fd) (open-file-input/output-port . kM52fc) (open-file-input-port . kM52fb) (open-bytevector-output-port . kM52fa) (open-bytevector-input-port . kM52f9) (native-transcoder . kM52f8) (native-eol-style . kM52f7) (make-transcoder . kM52f6) (latin-1-codec . kM52f5) (make-i/o-write-error . kM4d80) (make-i/o-read-error . kM4d6b) (make-i/o-port-error . kM4e21) (make-i/o-invalid-position-error . kM4d97) (make-i/o-filename-error . kM4db2) (make-i/o-file-protection-error . kM4dcb) (make-i/o-file-is-read-only-error . kM4de0) (make-i/o-file-does-not-exist-error . kM4e0a) (make-i/o-file-already-exists-error . kM4df5) (make-i/o-error . kM4d56) (make-i/o-encoding-error . kM4e51) (make-i/o-decoding-error . kM4e3a) (make-custom-textual-output-port . kM52f4) (make-custom-textual-input/output-port . kM52f3) (make-custom-textual-input-port . kM52f2) (make-custom-binary-output-port . kM52f1) (make-custom-binary-input/output-port . kM52f0) (make-custom-binary-input-port . kM52ef) (make-bytevector . kM52ee) (lookahead-u8 . kM52ed) (lookahead-char . kM52ec) (i/o-write-error? . kM4d82) (i/o-read-error? . kM4d6d) (i/o-port-error? . kM4e25) (i/o-invalid-position-error? . kM4d9b) (i/o-filename-error? . kM4db6) (i/o-file-protection-error? . kM4dcd) (i/o-file-is-read-only-error? . kM4de2) (i/o-file-does-not-exist-error? . kM4e0c) (i/o-file-already-exists-error? . kM4df7) (i/o-error? . kM4d58) (i/o-error-position . kM4d9d) (i/o-error-port . kM4e27) (i/o-error-filename . kM4db8) (i/o-encoding-error? . kM4e55) (i/o-encoding-error-char . kM4e57) (i/o-decoding-error? . kM4e3c) (get-u8 . kM52eb) (get-string-n! . kM52ea) (get-string-n . kM52e9) (get-string-all . kM52e8) (get-line . kM52e7) (get-datum . kM52e6) (get-char . kM52e5) (get-bytevector-some . kM52e4) (get-bytevector-n! . kM52e3) (get-bytevector-n . kM52e2) (get-bytevector-all . kM52e1) (flush-output-port . kM52e0) (close-port . kM52df) (exit . kM52d7) (command-line . kM4f90) (string-fill! . kM52d6) (string-set! . kM52d5) (set-cdr! . kM52d4) (set-car! . kM52d3) (remove . kM52d2) (remv . kM52d1) (remp . kM52d0) (remq . kM52cf) (partition . kM52ce) (memv . kM52cd) (memq . kM52cc) (memp . kM52cb) (member . kM52ca) (exists . kM52c9) (for-all . kM52c8) (fold-right . kM52c7) (fold-left . kM52c6) (find . kM52c5) (filter . kM52c4) (cons* . kM52c3) (assv . kM52c2) (assq . kM52c1) (assp . kM52c0) (assoc . kM52bf) (call-with-string-output-port . kM52be) (call-with-port . kM52bd) (call-with-bytevector-output-port . kM52bc) (bytevector->string . kM52bb) (buffer-mode? . kM52ba) (binary-port? . kM52b9) (with-exception-handler . kM52b8) (raise-continuable . kM52b7) (raise . kM52b6) (eval . kM3136) (environment . kM312e) (make-enumeration . kM52b5) (enum-set=? . kM52b4) (enum-set-universe . kM52b3) (enum-set-union . kM52b2) (enum-set-subset? . kM52b1) (enum-set-projection . kM52b0) (enum-set-member? . kM52af) (enum-set-intersection . kM52ae) (enum-set-indexer . kM52ad) (enum-set-difference . kM52ac) (enum-set-constructor . kM52ab) (enum-set-complement . kM52aa) (enum-set->list . kM52a9) (who-condition? . kM4ccc) (warning? . kM4c44) (violation? . kM4c83) (undefined-violation? . kM4d43) (syntax-violation? . kM4d2a) (syntax-violation-subform . kM4d2e) (syntax-violation-form . kM4d2c) (syntax-violation . kM3156) (simple-conditions . kM52a8) (serious-condition? . kM4c59) (non-continuable-violation? . kM4ce3) (message-condition? . kM4c2d) (make-who-condition . kM4cc8) (make-warning . kM4c42) (make-violation . kM4c81) (make-undefined-violation . kM4d41) (make-syntax-violation . kM4d24) (make-serious-condition . kM4c57) (make-non-continuable-violation . kM4ce1) (make-message-condition . kM4c29) (make-lexical-violation . kM4d0b) (make-irritants-condition . kM4cad) (make-implementation-restriction-violation . kM4cf6) (make-error . kM4c6c) (make-assertion-violation . kM4c96) (lexical-violation? . kM4d0d) (irritants-condition? . kM4cb1) (implementation-restriction-violation? . kM4cf8) (error? . kM4c6e) (condition-who . kM4cce) (condition-predicate . kM52a7) (condition-message . kM4c2f) (condition-irritants . kM4cb3) (condition-accessor . kM52a6) (condition . kM52a5) (assertion-violation? . kM4c98) (condition? . kM52a4) (utf32->string . kM52a3) (utf16->string . kM52a2) (utf8->string . kM52a1) (uint-list->bytevector . kM52a0) (u8-list->bytevector . kM529f) (string->utf8 . kM529e) (string->utf32 . kM529d) (string->utf16 . kM529c) (sint-list->bytevector . kM529b) (native-endianness . kM529a) (bytevector? . kM5299) (bytevector=? . kM5298) (bytevector-uint-set! . kM5297) (bytevector-uint-ref . kM5296) (bytevector-u8-set! . kM5295) (bytevector-u8-ref . kM5294) (bytevector-u64-set! . kM5293) (bytevector-u64-ref . kM5292) (bytevector-u64-native-set! . kM5291) (bytevector-u64-native-ref . kM5290) (bytevector-u32-set! . kM528f) (bytevector-u32-ref . kM528e) (bytevector-u32-native-set! . kM528d) (bytevector-u32-native-ref . kM528c) (bytevector-u16-set! . kM528b) (bytevector-u16-ref . kM528a) (bytevector-u16-native-set! . kM5289) (bytevector-u16-native-ref . kM5288) (bytevector-sint-set! . kM5287) (bytevector-sint-ref . kM5286) (bytevector-s8-set! . kM5285) (bytevector-s8-ref . kM5284) (bytevector-s64-set! . kM5283) (bytevector-s64-ref . kM5282) (bytevector-s64-native-set! . kM5281) (bytevector-s64-native-ref . kM5280) (bytevector-s32-set! . kM527f) (bytevector-s32-ref . kM527e) (bytevector-s32-native-set! . kM527d) (bytevector-s32-native-ref . kM527c) (bytevector-s16-set! . kM527b) (bytevector-s16-ref . kM527a) (bytevector-s16-native-set! . kM5279) (bytevector-s16-native-ref . kM5278) (bytevector-length . kM5277) (bytevector-ieee-single-ref . kM5276) (bytevector-ieee-single-set! . kM5275) (bytevector-ieee-single-native-set! . kM5274) (bytevector-ieee-single-native-ref . kM5273) (bytevector-ieee-double-set! . kM5272) (bytevector-ieee-double-ref . kM5271) (bytevector-ieee-double-native-set! . kM5270) (bytevector-ieee-double-native-ref . kM526f) (bytevector-fill! . kM526e) (bytevector-copy! . kM526d) (bytevector-copy . kM526c) (bytevector->uint-list . kM526b) (bytevector->u8-list . kM526a) (bytevector->sint-list . kM5269) (no-nans-violation? . kM4e81) (no-infinities-violation? . kM4e6c) (make-no-nans-violation . kM4e7f) (make-no-infinities-violation . kM4e6a) (real->flonum . kM5268) (flzero? . kM5267) (fltruncate . kM5266) (fltan . kM5265) (flsqrt . kM5264) (flsin . kM5263) (flround . kM5262) (flpositive? . kM5261) (flonum? . kM5260) (flodd? . kM525f) (flnumerator . kM525e) (flnegative? . kM525d) (flnan? . kM525c) (flmod0 . kM525b) (flmod . kM525a) (flmin . kM5259) (flmax . kM5258) (fllog . kM5257) (flinteger? . kM5256) (flinfinite? . kM5255) (flfloor . kM5254) (flfinite? . kM5253) (flexpt . kM5252) (flexp . kM5251) (fleven? . kM5250) (fldiv0-and-mod0 . kM524f) (fldiv0 . kM524e) (fldiv-and-mod . kM524d) (fldiv . kM524c) (fldenominator . kM524b) (flcos . kM524a) (flceiling . kM5249) (flatan . kM5248) (flasin . kM5247) (flacos . kM5246) (flabs . kM5245) (fl>? . kM5244) (fl>=? . kM5243) (fl=? . kM5242) (fl<? . kM5241) (fl<=? . kM5240) (fl/ . kM523f) (fl- . kM523e) (fl+ . kM523d) (fl* . kM523c) (fixnum->flonum . kM523b) (fxzero? . kM523a) (fxxor . kM5239) (fxrotate-bit-field . kM5238) (fxreverse-bit-field . kM5237) (fxpositive? . kM5236) (fxodd? . kM5235) (fxnot . kM5234) (fxnegative? . kM5233) (fxmod0 . kM5232) (fxmod . kM5231) (fxmin . kM5230) (fxmax . kM522f) (fxlength . kM522e) (fxior . kM522d) (fxif . kM522c) (fxfirst-bit-set . kM522b) (fxeven? . kM522a) (fxdiv0-and-mod0 . kM5229) (fxdiv0 . kM5228) (fxdiv-and-mod . kM5227) (fxdiv . kM5226) (fxcopy-bit-field . kM5225) (fxcopy-bit . kM5224) (fxbit-set? . kM5223) (fxbit-field . kM5222) (fxbit-count . kM5221) (fxarithmetic-shift-right . kM5220) (fxarithmetic-shift-left . kM521f) (fxarithmetic-shift . kM521e) (fxand . kM521d) (fx>? . kM521c) (fx>=? . kM521b) (fx=? . kM521a) (fx<? . kM5219) (fx<=? . kM5218) (fx-/carry . kM5217) (fx- . kM5216) (fx+/carry . kM5215) (fx+ . kM5214) (fx*/carry . kM5213) (fx* . kM5212) (greatest-fixnum . kM5211) (least-fixnum . kM5210) (fixnum-width . kM520f) (fixnum? . kM520e) (bitwise-rotate-bit-field . kM520d) (bitwise-reverse-bit-field . kM520c) (bitwise-length . kM520b) (bitwise-if . kM520a) (bitwise-first-bit-set . kM5209) (bitwise-copy-bit-field . kM5208) (bitwise-copy-bit . kM5207) (bitwise-bit-set? . kM5206) (bitwise-bit-field . kM5205) (bitwise-bit-count . kM5204) (bitwise-xor . kM5203) (bitwise-ior . kM5202) (bitwise-and . kM5201) (bitwise-not . kM5200) (bitwise-arithmetic-shift-right . kM51ff) (bitwise-arithmetic-shift-left . kM51fe) (bitwise-arithmetic-shift . kM51fd) (zero? . kM51fc) (vector? . kM51fb) (vector-set! . kM51fa) (vector-ref . kM51f9) (vector-map . kM51f8) (vector-length . kM51f7) (vector-for-each . kM51f6) (vector-fill! . kM51f5) (vector->list . kM51f4) (vector . kM51f3) (values . kM51f2) (truncate . kM51f1) (tan . kM51f0) (symbol? . kM51ef) (symbol=? . kM51ee) (symbol->string . kM51ed) (substring . kM51ec) (string? . kM51eb) (string>? . kM51ea) (string>=? . kM51e9) (string=? . kM51e8) (string<? . kM51e7) (string<=? . kM51e6) (string-ref . kM51e5) (string-length . kM51e4) (string-for-each . kM51e3) (string-copy . kM51e2) (string-append . kM51e1) (string->symbol . kM51e0) (string->number . kM51df) (string->list . kM51de) (string . kM51dd) (sqrt . kM51dc) (sin . kM51db) (round . kM51da) (reverse . kM51d9) (real? . kM51d8) (real-valued? . kM51d7) (real-part . kM51d6) (rationalize . kM51d5) (rational? . kM51d4) (rational-valued? . kM51d3) (procedure? . kM51d2) (positive? . kM51d1) (pair? . kM51d0) (odd? . kM51cf) (numerator . kM51ce) (number? . kM51cd) (number->string . kM51cc) (null? . kM51cb) (not . kM51ca) (negative? . kM51c9) (nan? . kM51c8) (min . kM51c7) (max . kM51c6) (map . kM51c5) (make-vector . kM51c4) (make-string . kM51c3) (make-rectangular . kM51c2) (make-polar . kM51c1) (magnitude . kM51c0) (log . kM51bf) (list? . kM51be) (list-tail . kM51bd) (list-ref . kM51bc) (list->vector . kM51bb) (list->string . kM51ba) (list . kM51b9) (length . kM51b8) (lcm . kM51b7) (integer? . kM51b6) (integer-valued? . kM51b5) (integer->char . kM51b4) (infinite? . kM51b3) (inexact? . kM51b2) (inexact . kM51b1) (imag-part . kM51b0) (gcd . kM51af) (for-each . kM51ae) (floor . kM51ad) (finite? . kM51ac) (expt . kM51ab) (exp . kM51aa) (exact? . kM51a9) (exact-integer-sqrt . kM51a8) (exact . kM51a7) (even? . kM51a6) (error . kM51a5) (eqv? . kM51a4) (equal? . kM51a3) (eq? . kM51a2) (dynamic-wind . kM51a1) (div0-and-mod0 . kM51a0) (mod0 . kM519f) (div0 . kM519e) (div-and-mod . kM519d) (mod . kM519c) (div . kM519b) (denominator . kM519a) (cos . kM5199) (cons . kM5198) (complex? . kM5197) (char? . kM5196) (char>? . kM5195) (char>=? . kM5194) (char=? . kM5193) (char<? . kM5192) (char<=? . kM5191) (char->integer . kM5190) (ceiling . kM518f) (call-with-values . kM518e) (call/cc . kM518d) (call-with-current-continuation . kM518c) (cddddr . kM518b) (cdddar . kM518a) (cddadr . kM5189) (cddaar . kM5188) (cdaddr . kM5187) (cdadar . kM5186) (cdaadr . kM5185) (cdaaar . kM5184) (cadddr . kM5183) (caddar . kM5182) (cadadr . kM5181) (cadaar . kM5180) (caaddr . kM517f) (caadar . kM517e) (caaadr . kM517d) (caaaar . kM517c) (cdddr . kM517b) (cddar . kM517a) (cdadr . kM5179) (cdaar . kM5178) (caddr . kM5177) (cadar . kM5176) (caadr . kM5175) (caaar . kM5174) (cddr . kM5173) (cdar . kM5172) (cadr . kM5171) (caar . kM5170) (cdr . kM516f) (car . kM516e) (boolean? . kM516d) (boolean=? . kM516c) (atan . kM516b) (assertion-violation . kM516a) (asin . kM5169) (apply . kM5168) (append . kM5167) (angle . kM5166) (acos . kM5165) (abs . kM5164) (/ . kM5163) (* . kM5162) (- . kM5161) (+ . kM5160) (>= . kM515f) (> . kM515e) (= . kM515d) (<= . kM515c) (< . kM515b) (library . kM515a) (&no-nans . kM5159) (&no-infinities . kM5158) (&i/o-encoding . kM5157) (&i/o-decoding . kM5156) (&i/o-port . kM5155) (&i/o-file-does-not-exist . kM5154) (&i/o-file-already-exists . kM5153) (&i/o-file-is-read-only . kM5152) (&i/o-file-protection . kM5151) (&i/o-filename . kM5150) (&i/o-invalid-position . kM514f) (&i/o-write . kM514e) (&i/o-read . kM514d) (&i/o . kM514c) (&undefined . kM514b) (&syntax . kM514a) (&lexical . kM5149) (&implementation-restriction . kM5148) (&non-continuable . kM5147) (&who . kM5146) (&irritants . kM5145) (&assertion . kM5144) (&violation . kM5143) (&error . kM5142) (&serious . kM5141) (&warning . kM5140) (&message . kM513f) (&condition . kM513e) (define-condition-type . kM513d) (define-enumeration . kM513c) (define-record-type . kM513b) (parent-rtd . kM513a) (nongenerative . kM5139) (opaque . kM5138) (sealed . kM5137) (protocol . kM5136) (parent . kM5135) (immutable . kM5134) (mutable . kM5133) (fields . kM5132) (error-handling-mode . kM5131) (file-options . kM5130) (buffer-mode . kM512f) (eol-style . kM512e) (guard . kM512d) (unsyntax-splicing . kM512a) (unsyntax . kM5129) (unquote-splicing . kM5128) (unquote . kM5127) (_ . kM5126) (else . kM5125) (=> . kM5124) (... . kM5123) (assert . kM5122) (endianness . kM5121) (time . kM511f) (do . kM511e) (cond . kM511d) (let* . kM511c) (let*-values . kM511b) (let-values . kM511a) (identifier-syntax . kM5119) (with-syntax . kM5118) (quasisyntax . kM5117) (quasiquote . kM5116) (syntax-rules . kM5115) (include . kM5114) (record-constructor-descriptor . kM5112) (record-type-descriptor . kM5111) (case . kM5110) (unless . kM510e) (when . kM510d) (or . kM510c) (and . kM510b) (if . kM510a) (let . kM5109) (letrec* . kM5108) (letrec . kM5107) (case-lambda . kM5105) (lambda . kM5104) (syntax . kM5103) (syntax-case . kM5102) (quote . kM5101) (letrec-syntax . kM50ff) (let-syntax . kM50fe) (set! . kM50fd) (import . kM50fc) (begin . kM50fb) (define-syntax . kM50f9) (define . kM50f8)) '() values values '#f '#f '#t '#f) (kM2c84@kM2ad0@install-library 'kM5423 '(psyntax null-environment-5) '() '() '() '() '((make-promise . kM52d8) (unquote-splicing . kM5128) (unquote . kM5127) (_ . kM5126) (else . kM5125) (=> . kM5124) (... . kM5123) (delay . kM5120) (do . kM511e) (cond . kM511d) (let* . kM511c) (quasiquote . kM5116) (syntax-rules . kM5115) (case . kM5110) (or . kM510c) (and . kM510b) (if . kM510a) (let . kM5109) (letrec . kM5107) (lambda . kM5104) (quote . kM5101) (letrec-syntax . kM50ff) (let-syntax . kM50fe) (set! . kM50fd) (begin . kM50fb) (define-syntax . kM50f9) (define . kM50f8)) '() values values '#f '#f '#t '#f) (kM2c84@kM2ad0@install-library 'kM5424 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . kM536d) (string-ci>=? . kM536c) (string-ci=? . kM536b) (string-ci<? . kM536a) (string-ci<=? . kM5369) (char-whitespace? . kM5368) (char-upper-case? . kM5367) (char-numeric? . kM5365) (char-lower-case? . kM5364) (char-upcase . kM5362) (char-downcase . kM535f) (char-ci>? . kM535e) (char-ci>=? . kM535d) (char-ci=? . kM535c) (char-ci<? . kM535b) (char-ci<=? . kM535a) (char-alphabetic? . kM5359) (call-with-output-file . kM532d) (call-with-input-file . kM532c) (write-char . kM532b) (write . kM532a) (with-output-to-file . kM5329) (with-input-from-file . kM5328) (read-char . kM5327) (read . kM5326) (peek-char . kM5325) (open-output-file . kM5324) (open-input-file . kM5323) (newline . kM5322) (display . kM5321) (close-output-port . kM5320) (close-input-port . kM531f) (eof-object . kM531d) (current-output-port . kM531b) (current-input-port . kM531a) (output-port? . kM5319) (input-port? . kM5318) (scheme-report-environment . kM3132) (quotient . kM52de) (null-environment . kM3130) (remainder . kM52dd) (modulo . kM52dc) (inexact->exact . kM52db) (force . kM52da) (exact->inexact . kM52d9) (make-promise . kM52d8) (string-fill! . kM52d6) (string-set! . kM52d5) (set-cdr! . kM52d4) (set-car! . kM52d3) (memv . kM52cd) (memq . kM52cc) (member . kM52ca) (assv . kM52c2) (assq . kM52c1) (assoc . kM52bf) (eval . kM3136) (zero? . kM51fc) (vector? . kM51fb) (vector-set! . kM51fa) (vector-ref . kM51f9) (vector-length . kM51f7) (vector-fill! . kM51f5) (vector->list . kM51f4) (vector . kM51f3) (values . kM51f2) (truncate . kM51f1) (tan . kM51f0) (symbol? . kM51ef) (symbol->string . kM51ed) (substring . kM51ec) (string? . kM51eb) (string>? . kM51ea) (string>=? . kM51e9) (string=? . kM51e8) (string<? . kM51e7) (string<=? . kM51e6) (string-ref . kM51e5) (string-length . kM51e4) (string-copy . kM51e2) (string-append . kM51e1) (string->symbol . kM51e0) (string->number . kM51df) (string->list . kM51de) (string . kM51dd) (sqrt . kM51dc) (sin . kM51db) (round . kM51da) (reverse . kM51d9) (real? . kM51d8) (real-part . kM51d6) (rationalize . kM51d5) (rational? . kM51d4) (procedure? . kM51d2) (positive? . kM51d1) (pair? . kM51d0) (odd? . kM51cf) (numerator . kM51ce) (number? . kM51cd) (number->string . kM51cc) (not . kM51ca) (negative? . kM51c9) (min . kM51c7) (max . kM51c6) (map . kM51c5) (make-vector . kM51c4) (make-string . kM51c3) (make-rectangular . kM51c2) (make-polar . kM51c1) (magnitude . kM51c0) (log . kM51bf) (list? . kM51be) (list-tail . kM51bd) (list-ref . kM51bc) (list->vector . kM51bb) (list->string . kM51ba) (list . kM51b9) (length . kM51b8) (lcm . kM51b7) (integer? . kM51b6) (integer->char . kM51b4) (inexact? . kM51b2) (imag-part . kM51b0) (gcd . kM51af) (for-each . kM51ae) (floor . kM51ad) (expt . kM51ab) (exp . kM51aa) (exact? . kM51a9) (even? . kM51a6) (eqv? . kM51a4) (equal? . kM51a3) (eq? . kM51a2) (dynamic-wind . kM51a1) (denominator . kM519a) (cos . kM5199) (cons . kM5198) (complex? . kM5197) (char? . kM5196) (char>? . kM5195) (char>=? . kM5194) (char=? . kM5193) (char<? . kM5192) (char<=? . kM5191) (char->integer . kM5190) (ceiling . kM518f) (call-with-values . kM518e) (call-with-current-continuation . kM518c) (cddddr . kM518b) (cdddar . kM518a) (cddadr . kM5189) (cddaar . kM5188) (cdaddr . kM5187) (cdadar . kM5186) (cdaadr . kM5185) (cdaaar . kM5184) (cadddr . kM5183) (caddar . kM5182) (cadadr . kM5181) (cadaar . kM5180) (caaddr . kM517f) (caadar . kM517e) (caaadr . kM517d) (caaaar . kM517c) (cdddr . kM517b) (cddar . kM517a) (cdadr . kM5179) (cdaar . kM5178) (caddr . kM5177) (cadar . kM5176) (caadr . kM5175) (caaar . kM5174) (cddr . kM5173) (cdar . kM5172) (cadr . kM5171) (caar . kM5170) (cdr . kM516f) (car . kM516e) (boolean? . kM516d) (atan . kM516b) (asin . kM5169) (apply . kM5168) (append . kM5167) (angle . kM5166) (acos . kM5165) (abs . kM5164) (/ . kM5163) (* . kM5162) (- . kM5161) (+ . kM5160) (>= . kM515f) (> . kM515e) (= . kM515d) (<= . kM515c) (< . kM515b) (unquote-splicing . kM5128) (unquote . kM5127) (else . kM5125) (=> . kM5124) (... . kM5123) (delay . kM5120) (do . kM511e) (cond . kM511d) (let* . kM511c) (quasiquote . kM5116) (syntax-rules . kM5115) (case . kM5110) (or . kM510c) (and . kM510b) (if . kM510a) (let . kM5109) (letrec . kM5107) (lambda . kM5104) (quote . kM5101) (letrec-syntax . kM50ff) (let-syntax . kM50fe) (set! . kM50fd) (begin . kM50fb) (define-syntax . kM50f9) (define . kM50f8)) '() values values '#f '#f '#t '#f) (kM2c84@kM2ad0@install-library 'kM5425 '(psyntax modules) '() '() '() '() '((module . kM50fa)) '() values values '#f '#f '#t '#f) (kM2c84@kM2ad0@install-library 'kM5426 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (kM2c84@kM2ad0@install-library 'kM5427 '(rnrs) '(6) '() '() '() '((regexp? . kM541a) (string-upcase . kM5375) (string-titlecase . kM5374) (string-normalize-nfkd . kM5373) (string-normalize-nfkc . kM5372) (string-normalize-nfd . kM5371) (string-normalize-nfc . kM5370) (string-foldcase . kM536f) (string-downcase . kM536e) (string-ci>? . kM536d) (string-ci>=? . kM536c) (string-ci=? . kM536b) (string-ci<? . kM536a) (string-ci<=? . kM5369) (char-whitespace? . kM5368) (char-upper-case? . kM5367) (char-title-case? . kM5366) (char-numeric? . kM5365) (char-lower-case? . kM5364) (char-general-category . kM5363) (char-upcase . kM5362) (char-titlecase . kM5361) (char-foldcase . kM5360) (char-downcase . kM535f) (char-ci>? . kM535e) (char-ci>=? . kM535d) (char-ci=? . kM535c) (char-ci<? . kM535b) (char-ci<=? . kM535a) (char-alphabetic? . kM5359) (make-variable-transformer . kM2ea1) (identifier? . kM3158) (generate-temporaries . kM3144) (free-identifier=? . kM3146) (syntax->datum . kM315c) (datum->syntax . kM315a) (bound-identifier=? . kM3148) (record-type-descriptor? . kM5358) (record-predicate . kM5357) (record-mutator . kM5356) (record-constructor . kM5355) (record-accessor . kM5354) (make-record-type-descriptor . kM5353) (make-record-constructor-descriptor . kM5352) (record? . kM5351) (record-type-uid . kM5350) (record-type-sealed? . kM534f) (record-type-parent . kM534e) (record-type-opaque? . kM534d) (record-type-name . kM534c) (record-type-generative? . kM534b) (record-type-field-names . kM534a) (record-rtd . kM5349) (record-field-mutable? . kM5348) (delete-file . kM5347) (file-exists? . kM5346) (vector-sort! . kM5345) (vector-sort . kM5344) (list-sort . kM5343) (symbol-hash . kM5342) (string-ci-hash . kM5341) (string-hash . kM5340) (equal-hash . kM533f) (hashtable-equivalence-function . kM533e) (make-hashtable . kM533d) (hashtable-hash-function . kM533c) (make-eqv-hashtable . kM533b) (make-eq-hashtable . kM533a) (hashtable? . kM5339) (hashtable-update! . kM5338) (hashtable-size . kM5337) (hashtable-set! . kM5336) (hashtable-ref . kM5335) (hashtable-mutable? . kM5334) (hashtable-keys . kM5333) (hashtable-entries . kM5332) (hashtable-delete! . kM5331) (hashtable-copy . kM5330) (hashtable-contains? . kM532f) (hashtable-clear! . kM532e) (call-with-output-file . kM532d) (call-with-input-file . kM532c) (write-char . kM532b) (write . kM532a) (with-output-to-file . kM5329) (with-input-from-file . kM5328) (read-char . kM5327) (read . kM5326) (peek-char . kM5325) (open-output-file . kM5324) (open-input-file . kM5323) (newline . kM5322) (display . kM5321) (close-output-port . kM5320) (close-input-port . kM531f) (eof-object? . kM531e) (eof-object . kM531d) (current-error-port . kM531c) (current-output-port . kM531b) (current-input-port . kM531a) (output-port? . kM5319) (input-port? . kM5318) (utf-8-codec . kM5317) (utf-16-codec . kM5316) (transcoder-error-handling-mode . kM5315) (transcoder-eol-style . kM5314) (transcoder-codec . kM5313) (transcoded-port . kM5312) (textual-port? . kM5311) (string->bytevector . kM5310) (standard-output-port . kM530f) (standard-input-port . kM530e) (standard-error-port . kM530d) (set-port-position! . kM530c) (put-u8 . kM530b) (put-string . kM530a) (put-datum . kM5309) (put-char . kM5308) (put-bytevector . kM5307) (port? . kM5306) (port-transcoder . kM5305) (port-position . kM5304) (port-has-set-port-position!? . kM5303) (port-has-port-position? . kM5302) (port-eof? . kM5301) (output-port-buffer-mode . kM5300) (open-string-output-port . kM52ff) (open-string-input-port . kM52fe) (open-file-output-port . kM52fd) (open-file-input/output-port . kM52fc) (open-file-input-port . kM52fb) (open-bytevector-output-port . kM52fa) (open-bytevector-input-port . kM52f9) (native-transcoder . kM52f8) (native-eol-style . kM52f7) (make-transcoder . kM52f6) (latin-1-codec . kM52f5) (make-i/o-write-error . kM4d80) (make-i/o-read-error . kM4d6b) (make-i/o-port-error . kM4e21) (make-i/o-invalid-position-error . kM4d97) (make-i/o-filename-error . kM4db2) (make-i/o-file-protection-error . kM4dcb) (make-i/o-file-is-read-only-error . kM4de0) (make-i/o-file-does-not-exist-error . kM4e0a) (make-i/o-file-already-exists-error . kM4df5) (make-i/o-error . kM4d56) (make-i/o-encoding-error . kM4e51) (make-i/o-decoding-error . kM4e3a) (make-custom-textual-output-port . kM52f4) (make-custom-textual-input/output-port . kM52f3) (make-custom-textual-input-port . kM52f2) (make-custom-binary-output-port . kM52f1) (make-custom-binary-input/output-port . kM52f0) (make-custom-binary-input-port . kM52ef) (make-bytevector . kM52ee) (lookahead-u8 . kM52ed) (lookahead-char . kM52ec) (i/o-write-error? . kM4d82) (i/o-read-error? . kM4d6d) (i/o-port-error? . kM4e25) (i/o-invalid-position-error? . kM4d9b) (i/o-filename-error? . kM4db6) (i/o-file-protection-error? . kM4dcd) (i/o-file-is-read-only-error? . kM4de2) (i/o-file-does-not-exist-error? . kM4e0c) (i/o-file-already-exists-error? . kM4df7) (i/o-error? . kM4d58) (i/o-error-position . kM4d9d) (i/o-error-port . kM4e27) (i/o-error-filename . kM4db8) (i/o-encoding-error? . kM4e55) (i/o-encoding-error-char . kM4e57) (i/o-decoding-error? . kM4e3c) (get-u8 . kM52eb) (get-string-n! . kM52ea) (get-string-n . kM52e9) (get-string-all . kM52e8) (get-line . kM52e7) (get-datum . kM52e6) (get-char . kM52e5) (get-bytevector-some . kM52e4) (get-bytevector-n! . kM52e3) (get-bytevector-n . kM52e2) (get-bytevector-all . kM52e1) (flush-output-port . kM52e0) (close-port . kM52df) (exit . kM52d7) (command-line . kM4f90) (remove . kM52d2) (remv . kM52d1) (remp . kM52d0) (remq . kM52cf) (partition . kM52ce) (memv . kM52cd) (memq . kM52cc) (memp . kM52cb) (member . kM52ca) (exists . kM52c9) (for-all . kM52c8) (fold-right . kM52c7) (fold-left . kM52c6) (find . kM52c5) (filter . kM52c4) (cons* . kM52c3) (assv . kM52c2) (assq . kM52c1) (assp . kM52c0) (assoc . kM52bf) (call-with-string-output-port . kM52be) (call-with-port . kM52bd) (call-with-bytevector-output-port . kM52bc) (bytevector->string . kM52bb) (buffer-mode? . kM52ba) (binary-port? . kM52b9) (with-exception-handler . kM52b8) (raise-continuable . kM52b7) (raise . kM52b6) (make-enumeration . kM52b5) (enum-set=? . kM52b4) (enum-set-universe . kM52b3) (enum-set-union . kM52b2) (enum-set-subset? . kM52b1) (enum-set-projection . kM52b0) (enum-set-member? . kM52af) (enum-set-intersection . kM52ae) (enum-set-indexer . kM52ad) (enum-set-difference . kM52ac) (enum-set-constructor . kM52ab) (enum-set-complement . kM52aa) (enum-set->list . kM52a9) (who-condition? . kM4ccc) (warning? . kM4c44) (violation? . kM4c83) (undefined-violation? . kM4d43) (syntax-violation? . kM4d2a) (syntax-violation-subform . kM4d2e) (syntax-violation-form . kM4d2c) (syntax-violation . kM3156) (simple-conditions . kM52a8) (serious-condition? . kM4c59) (non-continuable-violation? . kM4ce3) (message-condition? . kM4c2d) (make-who-condition . kM4cc8) (make-warning . kM4c42) (make-violation . kM4c81) (make-undefined-violation . kM4d41) (make-syntax-violation . kM4d24) (make-serious-condition . kM4c57) (make-non-continuable-violation . kM4ce1) (make-message-condition . kM4c29) (make-lexical-violation . kM4d0b) (make-irritants-condition . kM4cad) (make-implementation-restriction-violation . kM4cf6) (make-error . kM4c6c) (make-assertion-violation . kM4c96) (lexical-violation? . kM4d0d) (irritants-condition? . kM4cb1) (implementation-restriction-violation? . kM4cf8) (error? . kM4c6e) (condition-who . kM4cce) (condition-predicate . kM52a7) (condition-message . kM4c2f) (condition-irritants . kM4cb3) (condition-accessor . kM52a6) (condition . kM52a5) (assertion-violation? . kM4c98) (condition? . kM52a4) (utf32->string . kM52a3) (utf16->string . kM52a2) (utf8->string . kM52a1) (uint-list->bytevector . kM52a0) (u8-list->bytevector . kM529f) (string->utf8 . kM529e) (string->utf32 . kM529d) (string->utf16 . kM529c) (sint-list->bytevector . kM529b) (native-endianness . kM529a) (bytevector? . kM5299) (bytevector=? . kM5298) (bytevector-uint-set! . kM5297) (bytevector-uint-ref . kM5296) (bytevector-u8-set! . kM5295) (bytevector-u8-ref . kM5294) (bytevector-u64-set! . kM5293) (bytevector-u64-ref . kM5292) (bytevector-u64-native-set! . kM5291) (bytevector-u64-native-ref . kM5290) (bytevector-u32-set! . kM528f) (bytevector-u32-ref . kM528e) (bytevector-u32-native-set! . kM528d) (bytevector-u32-native-ref . kM528c) (bytevector-u16-set! . kM528b) (bytevector-u16-ref . kM528a) (bytevector-u16-native-set! . kM5289) (bytevector-u16-native-ref . kM5288) (bytevector-sint-set! . kM5287) (bytevector-sint-ref . kM5286) (bytevector-s8-set! . kM5285) (bytevector-s8-ref . kM5284) (bytevector-s64-set! . kM5283) (bytevector-s64-ref . kM5282) (bytevector-s64-native-set! . kM5281) (bytevector-s64-native-ref . kM5280) (bytevector-s32-set! . kM527f) (bytevector-s32-ref . kM527e) (bytevector-s32-native-set! . kM527d) (bytevector-s32-native-ref . kM527c) (bytevector-s16-set! . kM527b) (bytevector-s16-ref . kM527a) (bytevector-s16-native-set! . kM5279) (bytevector-s16-native-ref . kM5278) (bytevector-length . kM5277) (bytevector-ieee-single-ref . kM5276) (bytevector-ieee-single-set! . kM5275) (bytevector-ieee-single-native-set! . kM5274) (bytevector-ieee-single-native-ref . kM5273) (bytevector-ieee-double-set! . kM5272) (bytevector-ieee-double-ref . kM5271) (bytevector-ieee-double-native-set! . kM5270) (bytevector-ieee-double-native-ref . kM526f) (bytevector-fill! . kM526e) (bytevector-copy! . kM526d) (bytevector-copy . kM526c) (bytevector->uint-list . kM526b) (bytevector->u8-list . kM526a) (bytevector->sint-list . kM5269) (no-nans-violation? . kM4e81) (no-infinities-violation? . kM4e6c) (make-no-nans-violation . kM4e7f) (make-no-infinities-violation . kM4e6a) (real->flonum . kM5268) (flzero? . kM5267) (fltruncate . kM5266) (fltan . kM5265) (flsqrt . kM5264) (flsin . kM5263) (flround . kM5262) (flpositive? . kM5261) (flonum? . kM5260) (flodd? . kM525f) (flnumerator . kM525e) (flnegative? . kM525d) (flnan? . kM525c) (flmod0 . kM525b) (flmod . kM525a) (flmin . kM5259) (flmax . kM5258) (fllog . kM5257) (flinteger? . kM5256) (flinfinite? . kM5255) (flfloor . kM5254) (flfinite? . kM5253) (flexpt . kM5252) (flexp . kM5251) (fleven? . kM5250) (fldiv0-and-mod0 . kM524f) (fldiv0 . kM524e) (fldiv-and-mod . kM524d) (fldiv . kM524c) (fldenominator . kM524b) (flcos . kM524a) (flceiling . kM5249) (flatan . kM5248) (flasin . kM5247) (flacos . kM5246) (flabs . kM5245) (fl>? . kM5244) (fl>=? . kM5243) (fl=? . kM5242) (fl<? . kM5241) (fl<=? . kM5240) (fl/ . kM523f) (fl- . kM523e) (fl+ . kM523d) (fl* . kM523c) (fixnum->flonum . kM523b) (fxzero? . kM523a) (fxxor . kM5239) (fxrotate-bit-field . kM5238) (fxreverse-bit-field . kM5237) (fxpositive? . kM5236) (fxodd? . kM5235) (fxnot . kM5234) (fxnegative? . kM5233) (fxmod0 . kM5232) (fxmod . kM5231) (fxmin . kM5230) (fxmax . kM522f) (fxlength . kM522e) (fxior . kM522d) (fxif . kM522c) (fxfirst-bit-set . kM522b) (fxeven? . kM522a) (fxdiv0-and-mod0 . kM5229) (fxdiv0 . kM5228) (fxdiv-and-mod . kM5227) (fxdiv . kM5226) (fxcopy-bit-field . kM5225) (fxcopy-bit . kM5224) (fxbit-set? . kM5223) (fxbit-field . kM5222) (fxbit-count . kM5221) (fxarithmetic-shift-right . kM5220) (fxarithmetic-shift-left . kM521f) (fxarithmetic-shift . kM521e) (fxand . kM521d) (fx>? . kM521c) (fx>=? . kM521b) (fx=? . kM521a) (fx<? . kM5219) (fx<=? . kM5218) (fx-/carry . kM5217) (fx- . kM5216) (fx+/carry . kM5215) (fx+ . kM5214) (fx*/carry . kM5213) (fx* . kM5212) (greatest-fixnum . kM5211) (least-fixnum . kM5210) (fixnum-width . kM520f) (fixnum? . kM520e) (bitwise-rotate-bit-field . kM520d) (bitwise-reverse-bit-field . kM520c) (bitwise-length . kM520b) (bitwise-if . kM520a) (bitwise-first-bit-set . kM5209) (bitwise-copy-bit-field . kM5208) (bitwise-copy-bit . kM5207) (bitwise-bit-set? . kM5206) (bitwise-bit-field . kM5205) (bitwise-bit-count . kM5204) (bitwise-xor . kM5203) (bitwise-ior . kM5202) (bitwise-and . kM5201) (bitwise-not . kM5200) (bitwise-arithmetic-shift-right . kM51ff) (bitwise-arithmetic-shift-left . kM51fe) (bitwise-arithmetic-shift . kM51fd) (zero? . kM51fc) (vector? . kM51fb) (vector-set! . kM51fa) (vector-ref . kM51f9) (vector-map . kM51f8) (vector-length . kM51f7) (vector-for-each . kM51f6) (vector-fill! . kM51f5) (vector->list . kM51f4) (vector . kM51f3) (values . kM51f2) (truncate . kM51f1) (tan . kM51f0) (symbol? . kM51ef) (symbol=? . kM51ee) (symbol->string . kM51ed) (substring . kM51ec) (string? . kM51eb) (string>? . kM51ea) (string>=? . kM51e9) (string=? . kM51e8) (string<? . kM51e7) (string<=? . kM51e6) (string-ref . kM51e5) (string-length . kM51e4) (string-for-each . kM51e3) (string-copy . kM51e2) (string-append . kM51e1) (string->symbol . kM51e0) (string->number . kM51df) (string->list . kM51de) (string . kM51dd) (sqrt . kM51dc) (sin . kM51db) (round . kM51da) (reverse . kM51d9) (real? . kM51d8) (real-valued? . kM51d7) (real-part . kM51d6) (rationalize . kM51d5) (rational? . kM51d4) (rational-valued? . kM51d3) (procedure? . kM51d2) (positive? . kM51d1) (pair? . kM51d0) (odd? . kM51cf) (numerator . kM51ce) (number? . kM51cd) (number->string . kM51cc) (null? . kM51cb) (not . kM51ca) (negative? . kM51c9) (nan? . kM51c8) (min . kM51c7) (max . kM51c6) (map . kM51c5) (make-vector . kM51c4) (make-string . kM51c3) (make-rectangular . kM51c2) (make-polar . kM51c1) (magnitude . kM51c0) (log . kM51bf) (list? . kM51be) (list-tail . kM51bd) (list-ref . kM51bc) (list->vector . kM51bb) (list->string . kM51ba) (list . kM51b9) (length . kM51b8) (lcm . kM51b7) (integer? . kM51b6) (integer-valued? . kM51b5) (integer->char . kM51b4) (infinite? . kM51b3) (inexact? . kM51b2) (inexact . kM51b1) (imag-part . kM51b0) (gcd . kM51af) (for-each . kM51ae) (floor . kM51ad) (finite? . kM51ac) (expt . kM51ab) (exp . kM51aa) (exact? . kM51a9) (exact-integer-sqrt . kM51a8) (exact . kM51a7) (even? . kM51a6) (error . kM51a5) (eqv? . kM51a4) (equal? . kM51a3) (eq? . kM51a2) (dynamic-wind . kM51a1) (div0-and-mod0 . kM51a0) (mod0 . kM519f) (div0 . kM519e) (div-and-mod . kM519d) (mod . kM519c) (div . kM519b) (denominator . kM519a) (cos . kM5199) (cons . kM5198) (complex? . kM5197) (char? . kM5196) (char>? . kM5195) (char>=? . kM5194) (char=? . kM5193) (char<? . kM5192) (char<=? . kM5191) (char->integer . kM5190) (ceiling . kM518f) (call-with-values . kM518e) (call/cc . kM518d) (call-with-current-continuation . kM518c) (cddddr . kM518b) (cdddar . kM518a) (cddadr . kM5189) (cddaar . kM5188) (cdaddr . kM5187) (cdadar . kM5186) (cdaadr . kM5185) (cdaaar . kM5184) (cadddr . kM5183) (caddar . kM5182) (cadadr . kM5181) (cadaar . kM5180) (caaddr . kM517f) (caadar . kM517e) (caaadr . kM517d) (caaaar . kM517c) (cdddr . kM517b) (cddar . kM517a) (cdadr . kM5179) (cdaar . kM5178) (caddr . kM5177) (cadar . kM5176) (caadr . kM5175) (caaar . kM5174) (cddr . kM5173) (cdar . kM5172) (cadr . kM5171) (caar . kM5170) (cdr . kM516f) (car . kM516e) (boolean? . kM516d) (boolean=? . kM516c) (atan . kM516b) (assertion-violation . kM516a) (asin . kM5169) (apply . kM5168) (append . kM5167) (angle . kM5166) (acos . kM5165) (abs . kM5164) (/ . kM5163) (* . kM5162) (- . kM5161) (+ . kM5160) (>= . kM515f) (> . kM515e) (= . kM515d) (<= . kM515c) (< . kM515b) (&no-nans . kM5159) (&no-infinities . kM5158) (&i/o-encoding . kM5157) (&i/o-decoding . kM5156) (&i/o-port . kM5155) (&i/o-file-does-not-exist . kM5154) (&i/o-file-already-exists . kM5153) (&i/o-file-is-read-only . kM5152) (&i/o-file-protection . kM5151) (&i/o-filename . kM5150) (&i/o-invalid-position . kM514f) (&i/o-write . kM514e) (&i/o-read . kM514d) (&i/o . kM514c) (&undefined . kM514b) (&syntax . kM514a) (&lexical . kM5149) (&implementation-restriction . kM5148) (&non-continuable . kM5147) (&who . kM5146) (&irritants . kM5145) (&assertion . kM5144) (&violation . kM5143) (&error . kM5142) (&serious . kM5141) (&warning . kM5140) (&message . kM513f) (&condition . kM513e) (define-condition-type . kM513d) (define-enumeration . kM513c) (define-record-type . kM513b) (parent-rtd . kM513a) (nongenerative . kM5139) (opaque . kM5138) (sealed . kM5137) (protocol . kM5136) (parent . kM5135) (immutable . kM5134) (mutable . kM5133) (fields . kM5132) (error-handling-mode . kM5131) (file-options . kM5130) (buffer-mode . kM512f) (eol-style . kM512e) (guard . kM512d) (unsyntax-splicing . kM512a) (unsyntax . kM5129) (unquote-splicing . kM5128) (unquote . kM5127) (_ . kM5126) (else . kM5125) (=> . kM5124) (... . kM5123) (assert . kM5122) (endianness . kM5121) (do . kM511e) (cond . kM511d) (let* . kM511c) (let*-values . kM511b) (let-values . kM511a) (identifier-syntax . kM5119) (with-syntax . kM5118) (quasisyntax . kM5117) (quasiquote . kM5116) (syntax-rules . kM5115) (record-constructor-descriptor . kM5112) (record-type-descriptor . kM5111) (case . kM5110) (unless . kM510e) (when . kM510d) (or . kM510c) (and . kM510b) (if . kM510a) (let . kM5109) (letrec* . kM5108) (letrec . kM5107) (case-lambda . kM5105) (lambda . kM5104) (syntax . kM5103) (syntax-case . kM5102) (quote . kM5101) (letrec-syntax . kM50ff) (let-syntax . kM50fe) (set! . kM50fd) (begin . kM50fb) (define-syntax . kM50f9) (define . kM50f8)) '() values values '#f '#f '#t '#f) (kM2c84@kM2ad0@install-library 'kM5428 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . kM3132) (quotient . kM52de) (null-environment . kM3130) (remainder . kM52dd) (modulo . kM52dc) (inexact->exact . kM52db) (force . kM52da) (exact->inexact . kM52d9) (make-promise . kM52d8) (delay . kM5120)) '() values values '#f '#f '#t '#f) (kM2c84@kM2ad0@install-library 'kM5429 '(rnrs control) '(6) '() '() '() '((do . kM511e) (unless . kM510e) (when . kM510d) (case-lambda . kM5105)) '() values values '#f '#f '#t '#f) (kM2c84@kM2ad0@install-library 'kM542a '(rnrs eval) '(6) '() '() '() '((eval . kM3136) (environment . kM312e)) '() values values '#f '#f '#t '#f) (kM2c84@kM2ad0@install-library 'kM542b '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . kM52d4) (set-car! . kM52d3)) '() values values '#f '#f '#t '#f) (kM2c84@kM2ad0@install-library 'kM542c '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . kM52d6) (string-set! . kM52d5)) '() values values '#f '#f '#t '#f) (kM2c84@kM2ad0@install-library 'kM542d '(rnrs programs) '(6) '() '() '() '((exit . kM52d7) (command-line . kM4f90)) '() values values '#f '#f '#t '#f) (kM2c84@kM2ad0@install-library 'kM542e '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . kM2ea1) (identifier? . kM3158) (generate-temporaries . kM3144) (free-identifier=? . kM3146) (syntax->datum . kM315c) (datum->syntax . kM315a) (bound-identifier=? . kM3148) (syntax-violation . kM3156) (unsyntax-splicing . kM512a) (unsyntax . kM5129) (_ . kM5126) (... . kM5123) (with-syntax . kM5118) (quasisyntax . kM5117) (syntax . kM5103) (syntax-case . kM5102)) '() values values '#f '#f '#t '#f) (kM2c84@kM2ad0@install-library 'kM542f '(rnrs files) '(6) '() '() '() '((delete-file . kM5347) (file-exists? . kM5346) (make-i/o-write-error . kM4d80) (make-i/o-read-error . kM4d6b) (make-i/o-port-error . kM4e21) (make-i/o-invalid-position-error . kM4d97) (make-i/o-filename-error . kM4db2) (make-i/o-file-protection-error . kM4dcb) (make-i/o-file-is-read-only-error . kM4de0) (make-i/o-file-does-not-exist-error . kM4e0a) (make-i/o-file-already-exists-error . kM4df5) (make-i/o-error . kM4d56) (i/o-write-error? . kM4d82) (i/o-read-error? . kM4d6d) (i/o-port-error? . kM4e25) (i/o-invalid-position-error? . kM4d9b) (i/o-filename-error? . kM4db6) (i/o-file-protection-error? . kM4dcd) (i/o-file-is-read-only-error? . kM4de2) (i/o-file-does-not-exist-error? . kM4e0c) (i/o-file-already-exists-error? . kM4df7) (i/o-error? . kM4d58) (i/o-error-position . kM4d9d) (i/o-error-port . kM4e27) (i/o-error-filename . kM4db8) (&i/o-port . kM5155) (&i/o-file-does-not-exist . kM5154) (&i/o-file-already-exists . kM5153) (&i/o-file-is-read-only . kM5152) (&i/o-file-protection . kM5151) (&i/o-filename . kM5150) (&i/o-invalid-position . kM514f) (&i/o-write . kM514e) (&i/o-read . kM514d) (&i/o . kM514c)) '() values values '#f '#f '#t '#f) (kM2c84@kM2ad0@install-library 'kM5430 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . kM5345) (vector-sort . kM5344) (list-sort . kM5343)) '() values values '#f '#f '#t '#f) (kM2c84@kM2ad0@install-library 'kM5431 '(rnrs base) '(6) '() '() '() '((zero? . kM51fc) (vector? . kM51fb) (vector-set! . kM51fa) (vector-ref . kM51f9) (vector-map . kM51f8) (vector-length . kM51f7) (vector-for-each . kM51f6) (vector-fill! . kM51f5) (vector->list . kM51f4) (vector . kM51f3) (values . kM51f2) (truncate . kM51f1) (tan . kM51f0) (symbol? . kM51ef) (symbol=? . kM51ee) (symbol->string . kM51ed) (substring . kM51ec) (string? . kM51eb) (string>? . kM51ea) (string>=? . kM51e9) (string=? . kM51e8) (string<? . kM51e7) (string<=? . kM51e6) (string-ref . kM51e5) (string-length . kM51e4) (string-for-each . kM51e3) (string-copy . kM51e2) (string-append . kM51e1) (string->symbol . kM51e0) (string->number . kM51df) (string->list . kM51de) (string . kM51dd) (sqrt . kM51dc) (sin . kM51db) (round . kM51da) (reverse . kM51d9) (real? . kM51d8) (real-valued? . kM51d7) (real-part . kM51d6) (rationalize . kM51d5) (rational? . kM51d4) (rational-valued? . kM51d3) (procedure? . kM51d2) (positive? . kM51d1) (pair? . kM51d0) (odd? . kM51cf) (numerator . kM51ce) (number? . kM51cd) (number->string . kM51cc) (null? . kM51cb) (not . kM51ca) (negative? . kM51c9) (nan? . kM51c8) (min . kM51c7) (max . kM51c6) (map . kM51c5) (make-vector . kM51c4) (make-string . kM51c3) (make-rectangular . kM51c2) (make-polar . kM51c1) (magnitude . kM51c0) (log . kM51bf) (list? . kM51be) (list-tail . kM51bd) (list-ref . kM51bc) (list->vector . kM51bb) (list->string . kM51ba) (list . kM51b9) (length . kM51b8) (lcm . kM51b7) (integer? . kM51b6) (integer-valued? . kM51b5) (integer->char . kM51b4) (infinite? . kM51b3) (inexact? . kM51b2) (inexact . kM51b1) (imag-part . kM51b0) (gcd . kM51af) (for-each . kM51ae) (floor . kM51ad) (finite? . kM51ac) (expt . kM51ab) (exp . kM51aa) (exact? . kM51a9) (exact-integer-sqrt . kM51a8) (exact . kM51a7) (even? . kM51a6) (error . kM51a5) (eqv? . kM51a4) (equal? . kM51a3) (eq? . kM51a2) (dynamic-wind . kM51a1) (div0-and-mod0 . kM51a0) (mod0 . kM519f) (div0 . kM519e) (div-and-mod . kM519d) (mod . kM519c) (div . kM519b) (denominator . kM519a) (cos . kM5199) (cons . kM5198) (complex? . kM5197) (char? . kM5196) (char>? . kM5195) (char>=? . kM5194) (char=? . kM5193) (char<? . kM5192) (char<=? . kM5191) (char->integer . kM5190) (ceiling . kM518f) (call-with-values . kM518e) (call/cc . kM518d) (call-with-current-continuation . kM518c) (cddddr . kM518b) (cdddar . kM518a) (cddadr . kM5189) (cddaar . kM5188) (cdaddr . kM5187) (cdadar . kM5186) (cdaadr . kM5185) (cdaaar . kM5184) (cadddr . kM5183) (caddar . kM5182) (cadadr . kM5181) (cadaar . kM5180) (caaddr . kM517f) (caadar . kM517e) (caaadr . kM517d) (caaaar . kM517c) (cdddr . kM517b) (cddar . kM517a) (cdadr . kM5179) (cdaar . kM5178) (caddr . kM5177) (cadar . kM5176) (caadr . kM5175) (caaar . kM5174) (cddr . kM5173) (cdar . kM5172) (cadr . kM5171) (caar . kM5170) (cdr . kM516f) (car . kM516e) (boolean? . kM516d) (boolean=? . kM516c) (atan . kM516b) (assertion-violation . kM516a) (asin . kM5169) (apply . kM5168) (append . kM5167) (angle . kM5166) (acos . kM5165) (abs . kM5164) (/ . kM5163) (* . kM5162) (- . kM5161) (+ . kM5160) (>= . kM515f) (> . kM515e) (= . kM515d) (<= . kM515c) (< . kM515b) (unquote-splicing . kM5128) (unquote . kM5127) (_ . kM5126) (else . kM5125) (=> . kM5124) (... . kM5123) (assert . kM5122) (cond . kM511d) (let* . kM511c) (let*-values . kM511b) (let-values . kM511a) (identifier-syntax . kM5119) (quasiquote . kM5116) (syntax-rules . kM5115) (case . kM5110) (or . kM510c) (and . kM510b) (if . kM510a) (let . kM5109) (letrec* . kM5108) (letrec . kM5107) (lambda . kM5104) (quote . kM5101) (letrec-syntax . kM50ff) (let-syntax . kM50fe) (set! . kM50fd) (begin . kM50fb) (define-syntax . kM50f9) (define . kM50f8)) '() values values '#f '#f '#t '#f) (kM2c84@kM2ad0@install-library 'kM5432 '(rnrs lists) '(6) '() '() '() '((remove . kM52d2) (remv . kM52d1) (remp . kM52d0) (remq . kM52cf) (partition . kM52ce) (memv . kM52cd) (memq . kM52cc) (memp . kM52cb) (member . kM52ca) (exists . kM52c9) (for-all . kM52c8) (fold-right . kM52c7) (fold-left . kM52c6) (find . kM52c5) (filter . kM52c4) (cons* . kM52c3) (assv . kM52c2) (assq . kM52c1) (assp . kM52c0) (assoc . kM52bf)) '() values values '#f '#f '#t '#f) (kM2c84@kM2ad0@install-library 'kM5433 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . kM532d) (call-with-input-file . kM532c) (write-char . kM532b) (write . kM532a) (with-output-to-file . kM5329) (with-input-from-file . kM5328) (read-char . kM5327) (read . kM5326) (peek-char . kM5325) (open-output-file . kM5324) (open-input-file . kM5323) (newline . kM5322) (display . kM5321) (close-output-port . kM5320) (close-input-port . kM531f) (eof-object? . kM531e) (eof-object . kM531d) (current-error-port . kM531c) (current-output-port . kM531b) (current-input-port . kM531a) (output-port? . kM5319) (input-port? . kM5318) (make-i/o-write-error . kM4d80) (make-i/o-read-error . kM4d6b) (make-i/o-port-error . kM4e21) (make-i/o-invalid-position-error . kM4d97) (make-i/o-filename-error . kM4db2) (make-i/o-file-protection-error . kM4dcb) (make-i/o-file-is-read-only-error . kM4de0) (make-i/o-file-does-not-exist-error . kM4e0a) (make-i/o-file-already-exists-error . kM4df5) (make-i/o-error . kM4d56) (i/o-write-error? . kM4d82) (i/o-read-error? . kM4d6d) (i/o-port-error? . kM4e25) (i/o-invalid-position-error? . kM4d9b) (i/o-filename-error? . kM4db6) (i/o-file-protection-error? . kM4dcd) (i/o-file-is-read-only-error? . kM4de2) (i/o-file-does-not-exist-error? . kM4e0c) (i/o-file-already-exists-error? . kM4df7) (i/o-error? . kM4d58) (i/o-error-position . kM4d9d) (i/o-error-port . kM4e27) (i/o-error-filename . kM4db8) (&i/o-port . kM5155) (&i/o-file-does-not-exist . kM5154) (&i/o-file-already-exists . kM5153) (&i/o-file-is-read-only . kM5152) (&i/o-file-protection . kM5151) (&i/o-filename . kM5150) (&i/o-invalid-position . kM514f) (&i/o-write . kM514e) (&i/o-read . kM514d) (&i/o . kM514c)) '() values values '#f '#f '#t '#f) (kM2c84@kM2ad0@install-library 'kM5434 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . kM52ee) (utf32->string . kM52a3) (utf16->string . kM52a2) (utf8->string . kM52a1) (uint-list->bytevector . kM52a0) (u8-list->bytevector . kM529f) (string->utf8 . kM529e) (string->utf32 . kM529d) (string->utf16 . kM529c) (sint-list->bytevector . kM529b) (native-endianness . kM529a) (bytevector? . kM5299) (bytevector=? . kM5298) (bytevector-uint-set! . kM5297) (bytevector-uint-ref . kM5296) (bytevector-u8-set! . kM5295) (bytevector-u8-ref . kM5294) (bytevector-u64-set! . kM5293) (bytevector-u64-ref . kM5292) (bytevector-u64-native-set! . kM5291) (bytevector-u64-native-ref . kM5290) (bytevector-u32-set! . kM528f) (bytevector-u32-ref . kM528e) (bytevector-u32-native-set! . kM528d) (bytevector-u32-native-ref . kM528c) (bytevector-u16-set! . kM528b) (bytevector-u16-ref . kM528a) (bytevector-u16-native-set! . kM5289) (bytevector-u16-native-ref . kM5288) (bytevector-sint-set! . kM5287) (bytevector-sint-ref . kM5286) (bytevector-s8-set! . kM5285) (bytevector-s8-ref . kM5284) (bytevector-s64-set! . kM5283) (bytevector-s64-ref . kM5282) (bytevector-s64-native-set! . kM5281) (bytevector-s64-native-ref . kM5280) (bytevector-s32-set! . kM527f) (bytevector-s32-ref . kM527e) (bytevector-s32-native-set! . kM527d) (bytevector-s32-native-ref . kM527c) (bytevector-s16-set! . kM527b) (bytevector-s16-ref . kM527a) (bytevector-s16-native-set! . kM5279) (bytevector-s16-native-ref . kM5278) (bytevector-length . kM5277) (bytevector-ieee-single-ref . kM5276) (bytevector-ieee-single-set! . kM5275) (bytevector-ieee-single-native-set! . kM5274) (bytevector-ieee-single-native-ref . kM5273) (bytevector-ieee-double-set! . kM5272) (bytevector-ieee-double-ref . kM5271) (bytevector-ieee-double-native-set! . kM5270) (bytevector-ieee-double-native-ref . kM526f) (bytevector-fill! . kM526e) (bytevector-copy! . kM526d) (bytevector-copy . kM526c) (bytevector->uint-list . kM526b) (bytevector->u8-list . kM526a) (bytevector->sint-list . kM5269) (endianness . kM5121)) '() values values '#f '#f '#t '#f) (kM2c84@kM2ad0@install-library 'kM5435 '(rnrs unicode) '(6) '() '() '() '((string-upcase . kM5375) (string-titlecase . kM5374) (string-normalize-nfkd . kM5373) (string-normalize-nfkc . kM5372) (string-normalize-nfd . kM5371) (string-normalize-nfc . kM5370) (string-foldcase . kM536f) (string-downcase . kM536e) (string-ci>? . kM536d) (string-ci>=? . kM536c) (string-ci=? . kM536b) (string-ci<? . kM536a) (string-ci<=? . kM5369) (char-whitespace? . kM5368) (char-upper-case? . kM5367) (char-title-case? . kM5366) (char-numeric? . kM5365) (char-lower-case? . kM5364) (char-general-category . kM5363) (char-upcase . kM5362) (char-titlecase . kM5361) (char-foldcase . kM5360) (char-downcase . kM535f) (char-ci>? . kM535e) (char-ci>=? . kM535d) (char-ci=? . kM535c) (char-ci<? . kM535b) (char-ci<=? . kM535a) (char-alphabetic? . kM5359)) '() values values '#f '#f '#t '#f) (kM2c84@kM2ad0@install-library 'kM5436 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . kM52b8) (raise-continuable . kM52b7) (raise . kM52b6) (guard . kM512d) (else . kM5125) (=> . kM5124)) '() values values '#f '#f '#t '#f) (kM2c84@kM2ad0@install-library 'kM5437 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . kM520d) (bitwise-reverse-bit-field . kM520c) (bitwise-length . kM520b) (bitwise-if . kM520a) (bitwise-first-bit-set . kM5209) (bitwise-copy-bit-field . kM5208) (bitwise-copy-bit . kM5207) (bitwise-bit-set? . kM5206) (bitwise-bit-field . kM5205) (bitwise-bit-count . kM5204) (bitwise-xor . kM5203) (bitwise-ior . kM5202) (bitwise-and . kM5201) (bitwise-not . kM5200) (bitwise-arithmetic-shift-right . kM51ff) (bitwise-arithmetic-shift-left . kM51fe) (bitwise-arithmetic-shift . kM51fd)) '() values values '#f '#f '#t '#f) (kM2c84@kM2ad0@install-library 'kM5438 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . kM523a) (fxxor . kM5239) (fxrotate-bit-field . kM5238) (fxreverse-bit-field . kM5237) (fxpositive? . kM5236) (fxodd? . kM5235) (fxnot . kM5234) (fxnegative? . kM5233) (fxmod0 . kM5232) (fxmod . kM5231) (fxmin . kM5230) (fxmax . kM522f) (fxlength . kM522e) (fxior . kM522d) (fxif . kM522c) (fxfirst-bit-set . kM522b) (fxeven? . kM522a) (fxdiv0-and-mod0 . kM5229) (fxdiv0 . kM5228) (fxdiv-and-mod . kM5227) (fxdiv . kM5226) (fxcopy-bit-field . kM5225) (fxcopy-bit . kM5224) (fxbit-set? . kM5223) (fxbit-field . kM5222) (fxbit-count . kM5221) (fxarithmetic-shift-right . kM5220) (fxarithmetic-shift-left . kM521f) (fxarithmetic-shift . kM521e) (fxand . kM521d) (fx>? . kM521c) (fx>=? . kM521b) (fx=? . kM521a) (fx<? . kM5219) (fx<=? . kM5218) (fx-/carry . kM5217) (fx- . kM5216) (fx+/carry . kM5215) (fx+ . kM5214) (fx*/carry . kM5213) (fx* . kM5212) (greatest-fixnum . kM5211) (least-fixnum . kM5210) (fixnum-width . kM520f) (fixnum? . kM520e)) '() values values '#f '#f '#t '#f) (kM2c84@kM2ad0@install-library 'kM5439 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . kM4e81) (no-infinities-violation? . kM4e6c) (make-no-nans-violation . kM4e7f) (make-no-infinities-violation . kM4e6a) (real->flonum . kM5268) (flzero? . kM5267) (fltruncate . kM5266) (fltan . kM5265) (flsqrt . kM5264) (flsin . kM5263) (flround . kM5262) (flpositive? . kM5261) (flonum? . kM5260) (flodd? . kM525f) (flnumerator . kM525e) (flnegative? . kM525d) (flnan? . kM525c) (flmod0 . kM525b) (flmod . kM525a) (flmin . kM5259) (flmax . kM5258) (fllog . kM5257) (flinteger? . kM5256) (flinfinite? . kM5255) (flfloor . kM5254) (flfinite? . kM5253) (flexpt . kM5252) (flexp . kM5251) (fleven? . kM5250) (fldiv0-and-mod0 . kM524f) (fldiv0 . kM524e) (fldiv-and-mod . kM524d) (fldiv . kM524c) (fldenominator . kM524b) (flcos . kM524a) (flceiling . kM5249) (flatan . kM5248) (flasin . kM5247) (flacos . kM5246) (flabs . kM5245) (fl>? . kM5244) (fl>=? . kM5243) (fl=? . kM5242) (fl<? . kM5241) (fl<=? . kM5240) (fl/ . kM523f) (fl- . kM523e) (fl+ . kM523d) (fl* . kM523c) (fixnum->flonum . kM523b) (&no-nans . kM5159) (&no-infinities . kM5158)) '() values values '#f '#f '#t '#f) (kM2c84@kM2ad0@install-library 'kM543a '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . kM5342) (string-ci-hash . kM5341) (string-hash . kM5340) (equal-hash . kM533f) (hashtable-equivalence-function . kM533e) (make-hashtable . kM533d) (hashtable-hash-function . kM533c) (make-eqv-hashtable . kM533b) (make-eq-hashtable . kM533a) (hashtable? . kM5339) (hashtable-update! . kM5338) (hashtable-size . kM5337) (hashtable-set! . kM5336) (hashtable-ref . kM5335) (hashtable-mutable? . kM5334) (hashtable-keys . kM5333) (hashtable-entries . kM5332) (hashtable-delete! . kM5331) (hashtable-copy . kM5330) (hashtable-contains? . kM532f) (hashtable-clear! . kM532e)) '() values values '#f '#f '#t '#f) (kM2c84@kM2ad0@install-library 'kM543b '(rnrs io ports) '(6) '() '() '() '((eof-object? . kM531e) (eof-object . kM531d) (current-error-port . kM531c) (current-output-port . kM531b) (current-input-port . kM531a) (output-port? . kM5319) (input-port? . kM5318) (utf-8-codec . kM5317) (utf-16-codec . kM5316) (transcoder-error-handling-mode . kM5315) (transcoder-eol-style . kM5314) (transcoder-codec . kM5313) (transcoded-port . kM5312) (textual-port? . kM5311) (string->bytevector . kM5310) (standard-output-port . kM530f) (standard-input-port . kM530e) (standard-error-port . kM530d) (set-port-position! . kM530c) (put-u8 . kM530b) (put-string . kM530a) (put-datum . kM5309) (put-char . kM5308) (put-bytevector . kM5307) (port? . kM5306) (port-transcoder . kM5305) (port-position . kM5304) (port-has-set-port-position!? . kM5303) (port-has-port-position? . kM5302) (port-eof? . kM5301) (output-port-buffer-mode . kM5300) (open-string-output-port . kM52ff) (open-string-input-port . kM52fe) (open-file-output-port . kM52fd) (open-file-input/output-port . kM52fc) (open-file-input-port . kM52fb) (open-bytevector-output-port . kM52fa) (open-bytevector-input-port . kM52f9) (native-transcoder . kM52f8) (native-eol-style . kM52f7) (make-transcoder . kM52f6) (latin-1-codec . kM52f5) (make-i/o-write-error . kM4d80) (make-i/o-read-error . kM4d6b) (make-i/o-port-error . kM4e21) (make-i/o-invalid-position-error . kM4d97) (make-i/o-filename-error . kM4db2) (make-i/o-file-protection-error . kM4dcb) (make-i/o-file-is-read-only-error . kM4de0) (make-i/o-file-does-not-exist-error . kM4e0a) (make-i/o-file-already-exists-error . kM4df5) (make-i/o-error . kM4d56) (make-i/o-encoding-error . kM4e51) (make-i/o-decoding-error . kM4e3a) (make-custom-textual-output-port . kM52f4) (make-custom-textual-input/output-port . kM52f3) (make-custom-textual-input-port . kM52f2) (make-custom-binary-output-port . kM52f1) (make-custom-binary-input/output-port . kM52f0) (make-custom-binary-input-port . kM52ef) (lookahead-u8 . kM52ed) (lookahead-char . kM52ec) (i/o-write-error? . kM4d82) (i/o-read-error? . kM4d6d) (i/o-port-error? . kM4e25) (i/o-invalid-position-error? . kM4d9b) (i/o-filename-error? . kM4db6) (i/o-file-protection-error? . kM4dcd) (i/o-file-is-read-only-error? . kM4de2) (i/o-file-does-not-exist-error? . kM4e0c) (i/o-file-already-exists-error? . kM4df7) (i/o-error? . kM4d58) (i/o-error-position . kM4d9d) (i/o-error-port . kM4e27) (i/o-error-filename . kM4db8) (i/o-encoding-error? . kM4e55) (i/o-encoding-error-char . kM4e57) (i/o-decoding-error? . kM4e3c) (get-u8 . kM52eb) (get-string-n! . kM52ea) (get-string-n . kM52e9) (get-string-all . kM52e8) (get-line . kM52e7) (get-datum . kM52e6) (get-char . kM52e5) (get-bytevector-some . kM52e4) (get-bytevector-n! . kM52e3) (get-bytevector-n . kM52e2) (get-bytevector-all . kM52e1) (flush-output-port . kM52e0) (close-port . kM52df) (call-with-string-output-port . kM52be) (call-with-port . kM52bd) (call-with-bytevector-output-port . kM52bc) (bytevector->string . kM52bb) (buffer-mode? . kM52ba) (binary-port? . kM52b9) (&i/o-encoding . kM5157) (&i/o-decoding . kM5156) (&i/o-port . kM5155) (&i/o-file-does-not-exist . kM5154) (&i/o-file-already-exists . kM5153) (&i/o-file-is-read-only . kM5152) (&i/o-file-protection . kM5151) (&i/o-filename . kM5150) (&i/o-invalid-position . kM514f) (&i/o-write . kM514e) (&i/o-read . kM514d) (&i/o . kM514c) (error-handling-mode . kM5131) (file-options . kM5130) (buffer-mode . kM512f) (eol-style . kM512e)) '() values values '#f '#f '#t '#f) (kM2c84@kM2ad0@install-library 'kM543c '(rnrs enums) '(6) '() '() '() '((make-enumeration . kM52b5) (enum-set=? . kM52b4) (enum-set-universe . kM52b3) (enum-set-union . kM52b2) (enum-set-subset? . kM52b1) (enum-set-projection . kM52b0) (enum-set-member? . kM52af) (enum-set-intersection . kM52ae) (enum-set-indexer . kM52ad) (enum-set-difference . kM52ac) (enum-set-constructor . kM52ab) (enum-set-complement . kM52aa) (enum-set->list . kM52a9) (define-enumeration . kM513c)) '() values values '#f '#f '#t '#f) (kM2c84@kM2ad0@install-library 'kM543d '(rnrs conditions) '(6) '() '() '() '((who-condition? . kM4ccc) (warning? . kM4c44) (violation? . kM4c83) (undefined-violation? . kM4d43) (syntax-violation? . kM4d2a) (syntax-violation-subform . kM4d2e) (syntax-violation-form . kM4d2c) (syntax-violation . kM3156) (simple-conditions . kM52a8) (serious-condition? . kM4c59) (non-continuable-violation? . kM4ce3) (message-condition? . kM4c2d) (make-who-condition . kM4cc8) (make-warning . kM4c42) (make-violation . kM4c81) (make-undefined-violation . kM4d41) (make-syntax-violation . kM4d24) (make-serious-condition . kM4c57) (make-non-continuable-violation . kM4ce1) (make-message-condition . kM4c29) (make-lexical-violation . kM4d0b) (make-irritants-condition . kM4cad) (make-implementation-restriction-violation . kM4cf6) (make-error . kM4c6c) (make-assertion-violation . kM4c96) (lexical-violation? . kM4d0d) (irritants-condition? . kM4cb1) (implementation-restriction-violation? . kM4cf8) (error? . kM4c6e) (condition-who . kM4cce) (condition-predicate . kM52a7) (condition-message . kM4c2f) (condition-irritants . kM4cb3) (condition-accessor . kM52a6) (condition . kM52a5) (assertion-violation? . kM4c98) (condition? . kM52a4) (&undefined . kM514b) (&syntax . kM514a) (&lexical . kM5149) (&implementation-restriction . kM5148) (&non-continuable . kM5147) (&who . kM5146) (&irritants . kM5145) (&assertion . kM5144) (&violation . kM5143) (&error . kM5142) (&serious . kM5141) (&warning . kM5140) (&message . kM513f) (&condition . kM513e) (define-condition-type . kM513d)) '() values values '#f '#f '#t '#f) (kM2c84@kM2ad0@install-library 'kM543e '(rnrs records inspection) '(6) '() '() '() '((record? . kM5351) (record-type-uid . kM5350) (record-type-sealed? . kM534f) (record-type-parent . kM534e) (record-type-opaque? . kM534d) (record-type-name . kM534c) (record-type-generative? . kM534b) (record-type-field-names . kM534a) (record-rtd . kM5349) (record-field-mutable? . kM5348)) '() values values '#f '#f '#t '#f) (kM2c84@kM2ad0@install-library 'kM543f '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . kM5358) (record-predicate . kM5357) (record-mutator . kM5356) (record-constructor . kM5355) (record-accessor . kM5354) (make-record-type-descriptor . kM5353) (make-record-constructor-descriptor . kM5352)) '() values values '#f '#f '#t '#f) (kM2c84@kM2ad0@install-library 'kM5440 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . kM513b) (parent-rtd . kM513a) (nongenerative . kM5139) (opaque . kM5138) (sealed . kM5137) (protocol . kM5136) (parent . kM5135) (immutable . kM5134) (mutable . kM5133) (fields . kM5132) (record-constructor-descriptor . kM5112) (record-type-descriptor . kM5111)) '() values values '#f '#f '#t '#f) (kM2c84@kM2ad0@install-library 'kM5441 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . kM4e85) (&no-nans-rtd . kM4e83) (&no-infinities-rcd . kM4e70) (&no-infinities-rtd . kM4e6e) (&i/o-encoding-rcd . kM4e5b) (&i/o-encoding-rtd . kM4e59) (&i/o-decoding-rcd . kM4e40) (&i/o-decoding-rtd . kM4e3e) (&i/o-port-rcd . kM4e2b) (&i/o-port-rtd . kM4e29) (&i/o-file-does-not-exist-rcd . kM4e10) (&i/o-file-does-not-exist-rtd . kM4e0e) (&i/o-file-already-exists-rcd . kM4dfb) (&i/o-file-already-exists-rtd . kM4df9) (&i/o-file-is-read-only-rcd . kM4de6) (&i/o-file-is-read-only-rtd . kM4de4) (&i/o-file-protection-rcd . kM4dd1) (&i/o-file-protection-rtd . kM4dcf) (&i/o-filename-rcd . kM4dbc) (&i/o-filename-rtd . kM4dba) (&i/o-invalid-position-rcd . kM4da1) (&i/o-invalid-position-rtd . kM4d9f) (&i/o-write-rcd . kM4d86) (&i/o-write-rtd . kM4d84) (&i/o-read-rcd . kM4d71) (&i/o-read-rtd . kM4d6f) (&i/o-rcd . kM4d5c) (&i/o-rtd . kM4d5a) (&undefined-rcd . kM4d47) (&undefined-rtd . kM4d45) (&syntax-rcd . kM4d32) (&syntax-rtd . kM4d30) (&lexical-rcd . kM4d11) (&lexical-rtd . kM4d0f) (&implementation-restriction-rcd . kM4cfc) (&implementation-restriction-rtd . kM4cfa) (&non-continuable-rcd . kM4ce7) (&non-continuable-rtd . kM4ce5) (&who-rcd . kM4cd2) (&who-rtd . kM4cd0) (&irritants-rcd . kM4cb7) (&irritants-rtd . kM4cb5) (&assertion-rcd . kM4c9c) (&assertion-rtd . kM4c9a) (&violation-rcd . kM4c87) (&violation-rtd . kM4c85) (&error-rcd . kM4c72) (&error-rtd . kM4c70) (&serious-rcd . kM4c5d) (&serious-rtd . kM4c5b) (&warning-rcd . kM4c48) (&warning-rtd . kM4c46) (&message-rcd . kM4c33) (&message-rtd . kM4c31) (&condition-rcd . kM4bd4) (&condition-rtd . kM4bd2) (syntax-error . kM3152) (syntax-dispatch . kM3076) (pretty-print . kM5421) (eval-core . kM5420) (set-symbol-value! . kM541f) (symbol-value . kM541e) (gensym . kM541d) (void . kM541c) (load . kM4f96) (interaction-environment . kM3164) (char-ready? . kM541b) (regexp? . kM541a) (read-line . kM5419) (gensym-prefix-set! . kM5418) (ungensym . kM5417) (alist->eq-hash-table . kM5416) (assoc-ref . kM5415) (print . kM5414) (format . kM5413) (host-os . kM5412) (library-path . kM2aaf) (standard-library-path . kM5411) (file-newer? . kM5410) (stat-mtime . kM540f) (write-to-file . kM540e) (file->list . kM540d) (file->string . kM540c) (digit->integer . kM540b) (call-with-string-input-port . kM540a) (call-with-string-io . kM5409) (string-split . kM5408) (bytevector-for-each . kM5407) (string->regexp . kM5406) (rxmatch . kM5405) (regexp-replace-all . kM5404) (hashtable-for-each . kM5403) (mosh-cache-dir . kM289a) (call-process . kM5402) (local-tz-offset . kM5401) (microseconds . kM5400) (directory-list . kM53ff) (set-current-directory! . kM53fe) (expand-path . kM53fd) (current-directory . kM53fc) (%spawn . kM53fb) (%waitpid . kM53fa) (simple-struct-name . kM53f9) (simple-struct-set! . kM53f8) (simple-struct-ref . kM53f7) (make-simple-struct . kM53f6) (simple-struct? . kM53f5) (pointer-ref-c-int64 . kM53f4) (pointer-ref-c-int32 . kM53f3) (pointer-ref-c-int16 . kM53f2) (pointer-ref-c-int8 . kM53f1) (pointer-ref-c-uint64 . kM53f0) (pointer-ref-c-uint32 . kM53ef) (pointer-ref-c-uint16 . kM53ee) (pointer-ref-c-uint8 . kM53ed) (pointer-set-c-uint64! . kM53ec) (pointer-set-c-uint32! . kM53eb) (pointer-set-c-uint16! . kM53ea) (pointer-set-c-uint8! . kM53e9) (pointer-set-c-int64! . kM53e8) (pointer-set-c-int32! . kM53e7) (pointer-set-c-int16! . kM53e6) (pointer-set-c-int8! . kM53e5) (pointer-set-c-pointer! . kM53e4) (pointer-set-c-double! . kM53e3) (pointer-set-c-float! . kM53e2) (pointer-set-c-long-long! . kM53e1) (pointer-set-c-long! . kM53e0) (pointer-set-c-int! . kM53df) (pointer-set-c-short! . kM53de) (pointer-set-c-char! . kM53dd) (pointer-ref-c-pointer . kM53dc) (pointer-ref-c-double . kM53db) (pointer-ref-c-float . kM53da) (pointer-ref-c-unsigned-long-long . kM53d9) (pointer-ref-c-signed-long-long . kM53d8) (pointer-ref-c-unsigned-long . kM53d7) (pointer-ref-c-signed-long . kM53d6) (pointer-ref-c-unsigned-int . kM53d5) (pointer-ref-c-signed-int . kM53d4) (pointer-ref-c-unsigned-short . kM53d3) (pointer-ref-c-signed-short . kM53d2) (pointer-ref-c-unsigned-char . kM53d1) (pointer-ref-c-signed-char . kM53d0) (pointer->integer . kM53cf) (integer->pointer . kM53ce) (pointer? . kM53cd) (shared-errno . kM53cc) (%ffi-free-c-callback-trampoline . kM53cb) (%ffi-make-c-callback-trampoline . kM53ca) (%ffi-free . kM53c9) (%ffi-malloc . kM53c8) (%ffi-supported? . kM53c7) (%ffi-pointer->string . kM53c6) (%ffi-call->string-or-zero . kM53c5) (%ffi-call->double . kM53c4) (%ffi-call->void* . kM53c3) (%ffi-call->void . kM53c2) (%ffi-call->char . kM53c1) (%ffi-call->int . kM53c0) (%ffi-lookup . kM53bf) (%ffi-open . kM53be) (%fork . kM53bd) (%pipe . kM53bc) (p . kM53bb) (open-output-string . kM53ba) (get-output-string . kM53b9) (file-stat-ctime . kM53b8) (file-stat-atime . kM53b7) (file-stat-mtime . kM53b6) (file-size-in-bytes . kM53b5) (file-writable? . kM53b4) (file-executable? . kM53b3) (file-readable? . kM53b2) (file-regular? . kM53b1) (file-symbolic-link? . kM53b0) (file-directory? . kM53af) (create-symbolic-link . kM53ae) (rename-file . kM53ad) (delete-directory . kM53ac) (create-directory . kM53ab) (create-mosh-cache-dir . kM53aa) (get-environment-variables . kM53a9) (current-exception-handler . kM53a8) (get-environment-variable . kM53a7) (join-wraps . kM53a6) (id->real-label . kM53a5) (same-marks? . kM53a4) (same-marks*? . kM53a3) (get-timeofday . kM53a2) (get-command-line . kM53a1) (sys-display . kM53a0) (whereis . kM539f) (register . kM539e) (vm-join! . kM539d) (vm-set-value! . kM539c) (vm? . kM539b) (main-vm? . kM539a) (vm-eval . kM5399) (vm-self . kM5398) (vm-start! . kM5397) (make-vm . kM5396) (mutex-try-lock! . kM5395) (mutex-unlock! . kM5394) (mutex-lock! . kM5393) (mutex? . kM5392) (make-mutex . kM5391) (condition-variable-notify-all! . kM5390) (condition-variable-notify! . kM538f) (condition-variable-wait! . kM538e) (make-condition-variable . kM538d) (mosh-executable-path . kM538c) (make-file-options . kM538b) (source-info . kM538a) (make-compiler-instruction . kM5389) (make-instruction . kM5388) (set-source-info! . kM5387) (bignum? . kM5386) (fast-equal? . kM5385) (fasl-read . kM5384) (fasl-write . kM5383) (time-usage . kM5382) (os-constant . kM5381) (disasm . kM5380) (make-parameter . kM2898) (socket-port . kM537f) (socket-shutdown . kM537e) (socket-close . kM537d) (socket-send . kM537c) (socket-recv! . kM537b) (socket-recv . kM537a) (make-server-socket . kM5379) (make-client-socket . kM5378) (socket-accept . kM5377) (socket? . kM5376) (string-upcase . kM5375) (string-titlecase . kM5374) (string-normalize-nfkd . kM5373) (string-normalize-nfkc . kM5372) (string-normalize-nfd . kM5371) (string-normalize-nfc . kM5370) (string-foldcase . kM536f) (string-downcase . kM536e) (string-ci>? . kM536d) (string-ci>=? . kM536c) (string-ci=? . kM536b) (string-ci<? . kM536a) (string-ci<=? . kM5369) (char-whitespace? . kM5368) (char-upper-case? . kM5367) (char-title-case? . kM5366) (char-numeric? . kM5365) (char-lower-case? . kM5364) (char-general-category . kM5363) (char-upcase . kM5362) (char-titlecase . kM5361) (char-foldcase . kM5360) (char-downcase . kM535f) (char-ci>? . kM535e) (char-ci>=? . kM535d) (char-ci=? . kM535c) (char-ci<? . kM535b) (char-ci<=? . kM535a) (char-alphabetic? . kM5359) (make-variable-transformer . kM2ea1) (identifier? . kM3158) (generate-temporaries . kM3144) (free-identifier=? . kM3146) (syntax->datum . kM315c) (datum->syntax . kM315a) (bound-identifier=? . kM3148) (record-type-descriptor? . kM5358) (record-predicate . kM5357) (record-mutator . kM5356) (record-constructor . kM5355) (record-accessor . kM5354) (make-record-type-descriptor . kM5353) (make-record-constructor-descriptor . kM5352) (record? . kM5351) (record-type-uid . kM5350) (record-type-sealed? . kM534f) (record-type-parent . kM534e) (record-type-opaque? . kM534d) (record-type-name . kM534c) (record-type-generative? . kM534b) (record-type-field-names . kM534a) (record-rtd . kM5349) (record-field-mutable? . kM5348) (delete-file . kM5347) (file-exists? . kM5346) (vector-sort! . kM5345) (vector-sort . kM5344) (list-sort . kM5343) (symbol-hash . kM5342) (string-ci-hash . kM5341) (string-hash . kM5340) (equal-hash . kM533f) (hashtable-equivalence-function . kM533e) (make-hashtable . kM533d) (hashtable-hash-function . kM533c) (make-eqv-hashtable . kM533b) (make-eq-hashtable . kM533a) (hashtable? . kM5339) (hashtable-update! . kM5338) (hashtable-size . kM5337) (hashtable-set! . kM5336) (hashtable-ref . kM5335) (hashtable-mutable? . kM5334) (hashtable-keys . kM5333) (hashtable-entries . kM5332) (hashtable-delete! . kM5331) (hashtable-copy . kM5330) (hashtable-contains? . kM532f) (hashtable-clear! . kM532e) (call-with-output-file . kM532d) (call-with-input-file . kM532c) (write-char . kM532b) (write . kM532a) (with-output-to-file . kM5329) (with-input-from-file . kM5328) (read-char . kM5327) (read . kM5326) (peek-char . kM5325) (open-output-file . kM5324) (open-input-file . kM5323) (newline . kM5322) (display . kM5321) (close-output-port . kM5320) (close-input-port . kM531f) (eof-object? . kM531e) (eof-object . kM531d) (current-error-port . kM531c) (current-output-port . kM531b) (current-input-port . kM531a) (output-port? . kM5319) (input-port? . kM5318) (utf-8-codec . kM5317) (utf-16-codec . kM5316) (transcoder-error-handling-mode . kM5315) (transcoder-eol-style . kM5314) (transcoder-codec . kM5313) (transcoded-port . kM5312) (textual-port? . kM5311) (string->bytevector . kM5310) (standard-output-port . kM530f) (standard-input-port . kM530e) (standard-error-port . kM530d) (set-port-position! . kM530c) (put-u8 . kM530b) (put-string . kM530a) (put-datum . kM5309) (put-char . kM5308) (put-bytevector . kM5307) (port? . kM5306) (port-transcoder . kM5305) (port-position . kM5304) (port-has-set-port-position!? . kM5303) (port-has-port-position? . kM5302) (port-eof? . kM5301) (output-port-buffer-mode . kM5300) (open-string-output-port . kM52ff) (open-string-input-port . kM52fe) (open-file-output-port . kM52fd) (open-file-input/output-port . kM52fc) (open-file-input-port . kM52fb) (open-bytevector-output-port . kM52fa) (open-bytevector-input-port . kM52f9) (native-transcoder . kM52f8) (native-eol-style . kM52f7) (make-transcoder . kM52f6) (latin-1-codec . kM52f5) (make-i/o-write-error . kM4d80) (make-i/o-read-error . kM4d6b) (make-i/o-port-error . kM4e21) (make-i/o-invalid-position-error . kM4d97) (make-i/o-filename-error . kM4db2) (make-i/o-file-protection-error . kM4dcb) (make-i/o-file-is-read-only-error . kM4de0) (make-i/o-file-does-not-exist-error . kM4e0a) (make-i/o-file-already-exists-error . kM4df5) (make-i/o-error . kM4d56) (make-i/o-encoding-error . kM4e51) (make-i/o-decoding-error . kM4e3a) (make-custom-textual-output-port . kM52f4) (make-custom-textual-input/output-port . kM52f3) (make-custom-textual-input-port . kM52f2) (make-custom-binary-output-port . kM52f1) (make-custom-binary-input/output-port . kM52f0) (make-custom-binary-input-port . kM52ef) (make-bytevector . kM52ee) (lookahead-u8 . kM52ed) (lookahead-char . kM52ec) (i/o-write-error? . kM4d82) (i/o-read-error? . kM4d6d) (i/o-port-error? . kM4e25) (i/o-invalid-position-error? . kM4d9b) (i/o-filename-error? . kM4db6) (i/o-file-protection-error? . kM4dcd) (i/o-file-is-read-only-error? . kM4de2) (i/o-file-does-not-exist-error? . kM4e0c) (i/o-file-already-exists-error? . kM4df7) (i/o-error? . kM4d58) (i/o-error-position . kM4d9d) (i/o-error-port . kM4e27) (i/o-error-filename . kM4db8) (i/o-encoding-error? . kM4e55) (i/o-encoding-error-char . kM4e57) (i/o-decoding-error? . kM4e3c) (get-u8 . kM52eb) (get-string-n! . kM52ea) (get-string-n . kM52e9) (get-string-all . kM52e8) (get-line . kM52e7) (get-datum . kM52e6) (get-char . kM52e5) (get-bytevector-some . kM52e4) (get-bytevector-n! . kM52e3) (get-bytevector-n . kM52e2) (get-bytevector-all . kM52e1) (flush-output-port . kM52e0) (close-port . kM52df) (scheme-report-environment . kM3132) (quotient . kM52de) (null-environment . kM3130) (remainder . kM52dd) (modulo . kM52dc) (inexact->exact . kM52db) (force . kM52da) (exact->inexact . kM52d9) (make-promise . kM52d8) (exit . kM52d7) (command-line . kM4f90) (string-fill! . kM52d6) (string-set! . kM52d5) (set-cdr! . kM52d4) (set-car! . kM52d3) (remove . kM52d2) (remv . kM52d1) (remp . kM52d0) (remq . kM52cf) (partition . kM52ce) (memv . kM52cd) (memq . kM52cc) (memp . kM52cb) (member . kM52ca) (exists . kM52c9) (for-all . kM52c8) (fold-right . kM52c7) (fold-left . kM52c6) (find . kM52c5) (filter . kM52c4) (cons* . kM52c3) (assv . kM52c2) (assq . kM52c1) (assp . kM52c0) (assoc . kM52bf) (call-with-string-output-port . kM52be) (call-with-port . kM52bd) (call-with-bytevector-output-port . kM52bc) (bytevector->string . kM52bb) (buffer-mode? . kM52ba) (binary-port? . kM52b9) (with-exception-handler . kM52b8) (raise-continuable . kM52b7) (raise . kM52b6) (eval . kM3136) (environment . kM312e) (make-enumeration . kM52b5) (enum-set=? . kM52b4) (enum-set-universe . kM52b3) (enum-set-union . kM52b2) (enum-set-subset? . kM52b1) (enum-set-projection . kM52b0) (enum-set-member? . kM52af) (enum-set-intersection . kM52ae) (enum-set-indexer . kM52ad) (enum-set-difference . kM52ac) (enum-set-constructor . kM52ab) (enum-set-complement . kM52aa) (enum-set->list . kM52a9) (who-condition? . kM4ccc) (warning? . kM4c44) (violation? . kM4c83) (undefined-violation? . kM4d43) (syntax-violation? . kM4d2a) (syntax-violation-subform . kM4d2e) (syntax-violation-form . kM4d2c) (syntax-violation . kM3156) (simple-conditions . kM52a8) (serious-condition? . kM4c59) (non-continuable-violation? . kM4ce3) (message-condition? . kM4c2d) (make-who-condition . kM4cc8) (make-warning . kM4c42) (make-violation . kM4c81) (make-undefined-violation . kM4d41) (make-syntax-violation . kM4d24) (make-serious-condition . kM4c57) (make-non-continuable-violation . kM4ce1) (make-message-condition . kM4c29) (make-lexical-violation . kM4d0b) (make-irritants-condition . kM4cad) (make-implementation-restriction-violation . kM4cf6) (make-error . kM4c6c) (make-assertion-violation . kM4c96) (lexical-violation? . kM4d0d) (irritants-condition? . kM4cb1) (implementation-restriction-violation? . kM4cf8) (error? . kM4c6e) (condition-who . kM4cce) (condition-predicate . kM52a7) (condition-message . kM4c2f) (condition-irritants . kM4cb3) (condition-accessor . kM52a6) (condition . kM52a5) (assertion-violation? . kM4c98) (condition? . kM52a4) (utf32->string . kM52a3) (utf16->string . kM52a2) (utf8->string . kM52a1) (uint-list->bytevector . kM52a0) (u8-list->bytevector . kM529f) (string->utf8 . kM529e) (string->utf32 . kM529d) (string->utf16 . kM529c) (sint-list->bytevector . kM529b) (native-endianness . kM529a) (bytevector? . kM5299) (bytevector=? . kM5298) (bytevector-uint-set! . kM5297) (bytevector-uint-ref . kM5296) (bytevector-u8-set! . kM5295) (bytevector-u8-ref . kM5294) (bytevector-u64-set! . kM5293) (bytevector-u64-ref . kM5292) (bytevector-u64-native-set! . kM5291) (bytevector-u64-native-ref . kM5290) (bytevector-u32-set! . kM528f) (bytevector-u32-ref . kM528e) (bytevector-u32-native-set! . kM528d) (bytevector-u32-native-ref . kM528c) (bytevector-u16-set! . kM528b) (bytevector-u16-ref . kM528a) (bytevector-u16-native-set! . kM5289) (bytevector-u16-native-ref . kM5288) (bytevector-sint-set! . kM5287) (bytevector-sint-ref . kM5286) (bytevector-s8-set! . kM5285) (bytevector-s8-ref . kM5284) (bytevector-s64-set! . kM5283) (bytevector-s64-ref . kM5282) (bytevector-s64-native-set! . kM5281) (bytevector-s64-native-ref . kM5280) (bytevector-s32-set! . kM527f) (bytevector-s32-ref . kM527e) (bytevector-s32-native-set! . kM527d) (bytevector-s32-native-ref . kM527c) (bytevector-s16-set! . kM527b) (bytevector-s16-ref . kM527a) (bytevector-s16-native-set! . kM5279) (bytevector-s16-native-ref . kM5278) (bytevector-length . kM5277) (bytevector-ieee-single-ref . kM5276) (bytevector-ieee-single-set! . kM5275) (bytevector-ieee-single-native-set! . kM5274) (bytevector-ieee-single-native-ref . kM5273) (bytevector-ieee-double-set! . kM5272) (bytevector-ieee-double-ref . kM5271) (bytevector-ieee-double-native-set! . kM5270) (bytevector-ieee-double-native-ref . kM526f) (bytevector-fill! . kM526e) (bytevector-copy! . kM526d) (bytevector-copy . kM526c) (bytevector->uint-list . kM526b) (bytevector->u8-list . kM526a) (bytevector->sint-list . kM5269) (no-nans-violation? . kM4e81) (no-infinities-violation? . kM4e6c) (make-no-nans-violation . kM4e7f) (make-no-infinities-violation . kM4e6a) (real->flonum . kM5268) (flzero? . kM5267) (fltruncate . kM5266) (fltan . kM5265) (flsqrt . kM5264) (flsin . kM5263) (flround . kM5262) (flpositive? . kM5261) (flonum? . kM5260) (flodd? . kM525f) (flnumerator . kM525e) (flnegative? . kM525d) (flnan? . kM525c) (flmod0 . kM525b) (flmod . kM525a) (flmin . kM5259) (flmax . kM5258) (fllog . kM5257) (flinteger? . kM5256) (flinfinite? . kM5255) (flfloor . kM5254) (flfinite? . kM5253) (flexpt . kM5252) (flexp . kM5251) (fleven? . kM5250) (fldiv0-and-mod0 . kM524f) (fldiv0 . kM524e) (fldiv-and-mod . kM524d) (fldiv . kM524c) (fldenominator . kM524b) (flcos . kM524a) (flceiling . kM5249) (flatan . kM5248) (flasin . kM5247) (flacos . kM5246) (flabs . kM5245) (fl>? . kM5244) (fl>=? . kM5243) (fl=? . kM5242) (fl<? . kM5241) (fl<=? . kM5240) (fl/ . kM523f) (fl- . kM523e) (fl+ . kM523d) (fl* . kM523c) (fixnum->flonum . kM523b) (fxzero? . kM523a) (fxxor . kM5239) (fxrotate-bit-field . kM5238) (fxreverse-bit-field . kM5237) (fxpositive? . kM5236) (fxodd? . kM5235) (fxnot . kM5234) (fxnegative? . kM5233) (fxmod0 . kM5232) (fxmod . kM5231) (fxmin . kM5230) (fxmax . kM522f) (fxlength . kM522e) (fxior . kM522d) (fxif . kM522c) (fxfirst-bit-set . kM522b) (fxeven? . kM522a) (fxdiv0-and-mod0 . kM5229) (fxdiv0 . kM5228) (fxdiv-and-mod . kM5227) (fxdiv . kM5226) (fxcopy-bit-field . kM5225) (fxcopy-bit . kM5224) (fxbit-set? . kM5223) (fxbit-field . kM5222) (fxbit-count . kM5221) (fxarithmetic-shift-right . kM5220) (fxarithmetic-shift-left . kM521f) (fxarithmetic-shift . kM521e) (fxand . kM521d) (fx>? . kM521c) (fx>=? . kM521b) (fx=? . kM521a) (fx<? . kM5219) (fx<=? . kM5218) (fx-/carry . kM5217) (fx- . kM5216) (fx+/carry . kM5215) (fx+ . kM5214) (fx*/carry . kM5213) (fx* . kM5212) (greatest-fixnum . kM5211) (least-fixnum . kM5210) (fixnum-width . kM520f) (fixnum? . kM520e) (bitwise-rotate-bit-field . kM520d) (bitwise-reverse-bit-field . kM520c) (bitwise-length . kM520b) (bitwise-if . kM520a) (bitwise-first-bit-set . kM5209) (bitwise-copy-bit-field . kM5208) (bitwise-copy-bit . kM5207) (bitwise-bit-set? . kM5206) (bitwise-bit-field . kM5205) (bitwise-bit-count . kM5204) (bitwise-xor . kM5203) (bitwise-ior . kM5202) (bitwise-and . kM5201) (bitwise-not . kM5200) (bitwise-arithmetic-shift-right . kM51ff) (bitwise-arithmetic-shift-left . kM51fe) (bitwise-arithmetic-shift . kM51fd) (zero? . kM51fc) (vector? . kM51fb) (vector-set! . kM51fa) (vector-ref . kM51f9) (vector-map . kM51f8) (vector-length . kM51f7) (vector-for-each . kM51f6) (vector-fill! . kM51f5) (vector->list . kM51f4) (vector . kM51f3) (values . kM51f2) (truncate . kM51f1) (tan . kM51f0) (symbol? . kM51ef) (symbol=? . kM51ee) (symbol->string . kM51ed) (substring . kM51ec) (string? . kM51eb) (string>? . kM51ea) (string>=? . kM51e9) (string=? . kM51e8) (string<? . kM51e7) (string<=? . kM51e6) (string-ref . kM51e5) (string-length . kM51e4) (string-for-each . kM51e3) (string-copy . kM51e2) (string-append . kM51e1) (string->symbol . kM51e0) (string->number . kM51df) (string->list . kM51de) (string . kM51dd) (sqrt . kM51dc) (sin . kM51db) (round . kM51da) (reverse . kM51d9) (real? . kM51d8) (real-valued? . kM51d7) (real-part . kM51d6) (rationalize . kM51d5) (rational? . kM51d4) (rational-valued? . kM51d3) (procedure? . kM51d2) (positive? . kM51d1) (pair? . kM51d0) (odd? . kM51cf) (numerator . kM51ce) (number? . kM51cd) (number->string . kM51cc) (null? . kM51cb) (not . kM51ca) (negative? . kM51c9) (nan? . kM51c8) (min . kM51c7) (max . kM51c6) (map . kM51c5) (make-vector . kM51c4) (make-string . kM51c3) (make-rectangular . kM51c2) (make-polar . kM51c1) (magnitude . kM51c0) (log . kM51bf) (list? . kM51be) (list-tail . kM51bd) (list-ref . kM51bc) (list->vector . kM51bb) (list->string . kM51ba) (list . kM51b9) (length . kM51b8) (lcm . kM51b7) (integer? . kM51b6) (integer-valued? . kM51b5) (integer->char . kM51b4) (infinite? . kM51b3) (inexact? . kM51b2) (inexact . kM51b1) (imag-part . kM51b0) (gcd . kM51af) (for-each . kM51ae) (floor . kM51ad) (finite? . kM51ac) (expt . kM51ab) (exp . kM51aa) (exact? . kM51a9) (exact-integer-sqrt . kM51a8) (exact . kM51a7) (even? . kM51a6) (error . kM51a5) (eqv? . kM51a4) (equal? . kM51a3) (eq? . kM51a2) (dynamic-wind . kM51a1) (div0-and-mod0 . kM51a0) (mod0 . kM519f) (div0 . kM519e) (div-and-mod . kM519d) (mod . kM519c) (div . kM519b) (denominator . kM519a) (cos . kM5199) (cons . kM5198) (complex? . kM5197) (char? . kM5196) (char>? . kM5195) (char>=? . kM5194) (char=? . kM5193) (char<? . kM5192) (char<=? . kM5191) (char->integer . kM5190) (ceiling . kM518f) (call-with-values . kM518e) (call/cc . kM518d) (call-with-current-continuation . kM518c) (cddddr . kM518b) (cdddar . kM518a) (cddadr . kM5189) (cddaar . kM5188) (cdaddr . kM5187) (cdadar . kM5186) (cdaadr . kM5185) (cdaaar . kM5184) (cadddr . kM5183) (caddar . kM5182) (cadadr . kM5181) (cadaar . kM5180) (caaddr . kM517f) (caadar . kM517e) (caaadr . kM517d) (caaaar . kM517c) (cdddr . kM517b) (cddar . kM517a) (cdadr . kM5179) (cdaar . kM5178) (caddr . kM5177) (cadar . kM5176) (caadr . kM5175) (caaar . kM5174) (cddr . kM5173) (cdar . kM5172) (cadr . kM5171) (caar . kM5170) (cdr . kM516f) (car . kM516e) (boolean? . kM516d) (boolean=? . kM516c) (atan . kM516b) (assertion-violation . kM516a) (assertion-error . kM3150) (asin . kM5169) (apply . kM5168) (append . kM5167) (angle . kM5166) (acos . kM5165) (abs . kM5164) (/ . kM5163) (* . kM5162) (- . kM5161) (+ . kM5160) (>= . kM515f) (> . kM515e) (= . kM515d) (<= . kM515c) (< . kM515b) (library . kM515a) (&no-nans . kM5159) (&no-infinities . kM5158) (&i/o-encoding . kM5157) (&i/o-decoding . kM5156) (&i/o-port . kM5155) (&i/o-file-does-not-exist . kM5154) (&i/o-file-already-exists . kM5153) (&i/o-file-is-read-only . kM5152) (&i/o-file-protection . kM5151) (&i/o-filename . kM5150) (&i/o-invalid-position . kM514f) (&i/o-write . kM514e) (&i/o-read . kM514d) (&i/o . kM514c) (&undefined . kM514b) (&syntax . kM514a) (&lexical . kM5149) (&implementation-restriction . kM5148) (&non-continuable . kM5147) (&who . kM5146) (&irritants . kM5145) (&assertion . kM5144) (&violation . kM5143) (&error . kM5142) (&serious . kM5141) (&warning . kM5140) (&message . kM513f) (&condition . kM513e) (define-condition-type . kM513d) (define-enumeration . kM513c) (define-record-type . kM513b) (parent-rtd . kM513a) (nongenerative . kM5139) (opaque . kM5138) (sealed . kM5137) (protocol . kM5136) (parent . kM5135) (immutable . kM5134) (mutable . kM5133) (fields . kM5132) (error-handling-mode . kM5131) (file-options . kM5130) (buffer-mode . kM512f) (eol-style . kM512e) (guard . kM512d) (trace-define . kM512c) (trace-lambda . kM512b) (unsyntax-splicing . kM512a) (unsyntax . kM5129) (unquote-splicing . kM5128) (unquote . kM5127) (_ . kM5126) (else . kM5125) (=> . kM5124) (... . kM5123) (assert . kM5122) (endianness . kM5121) (delay . kM5120) (time . kM511f) (do . kM511e) (cond . kM511d) (let* . kM511c) (let*-values . kM511b) (let-values . kM511a) (identifier-syntax . kM5119) (with-syntax . kM5118) (quasisyntax . kM5117) (quasiquote . kM5116) (syntax-rules . kM5115) (include . kM5114) (define-struct . kM5113) (record-constructor-descriptor . kM5112) (record-type-descriptor . kM5111) (case . kM5110) (parameterize . kM510f) (unless . kM510e) (when . kM510d) (or . kM510c) (and . kM510b) (if . kM510a) (let . kM5109) (letrec* . kM5108) (letrec . kM5107) (type-descriptor . kM5106) (case-lambda . kM5105) (lambda . kM5104) (syntax . kM5103) (syntax-case . kM5102) (quote . kM5101) (foreign-call . kM5100) (letrec-syntax . kM50ff) (let-syntax . kM50fe) (set! . kM50fd) (import . kM50fc) (begin . kM50fb) (module . kM50fa) (define-syntax . kM50f9) (define . kM50f8)) '((kM4e85 core-prim . &no-nans-rcd) (kM4e83 core-prim . &no-nans-rtd) (kM4e70 core-prim . &no-infinities-rcd) (kM4e6e core-prim . &no-infinities-rtd) (kM4e5b core-prim . &i/o-encoding-rcd) (kM4e59 core-prim . &i/o-encoding-rtd) (kM4e40 core-prim . &i/o-decoding-rcd) (kM4e3e core-prim . &i/o-decoding-rtd) (kM4e2b core-prim . &i/o-port-rcd) (kM4e29 core-prim . &i/o-port-rtd) (kM4e10 core-prim . &i/o-file-does-not-exist-rcd) (kM4e0e core-prim . &i/o-file-does-not-exist-rtd) (kM4dfb core-prim . &i/o-file-already-exists-rcd) (kM4df9 core-prim . &i/o-file-already-exists-rtd) (kM4de6 core-prim . &i/o-file-is-read-only-rcd) (kM4de4 core-prim . &i/o-file-is-read-only-rtd) (kM4dd1 core-prim . &i/o-file-protection-rcd) (kM4dcf core-prim . &i/o-file-protection-rtd) (kM4dbc core-prim . &i/o-filename-rcd) (kM4dba core-prim . &i/o-filename-rtd) (kM4da1 core-prim . &i/o-invalid-position-rcd) (kM4d9f core-prim . &i/o-invalid-position-rtd) (kM4d86 core-prim . &i/o-write-rcd) (kM4d84 core-prim . &i/o-write-rtd) (kM4d71 core-prim . &i/o-read-rcd) (kM4d6f core-prim . &i/o-read-rtd) (kM4d5c core-prim . &i/o-rcd) (kM4d5a core-prim . &i/o-rtd) (kM4d47 core-prim . &undefined-rcd) (kM4d45 core-prim . &undefined-rtd) (kM4d32 core-prim . &syntax-rcd) (kM4d30 core-prim . &syntax-rtd) (kM4d11 core-prim . &lexical-rcd) (kM4d0f core-prim . &lexical-rtd) (kM4cfc core-prim . &implementation-restriction-rcd) (kM4cfa core-prim . &implementation-restriction-rtd) (kM4ce7 core-prim . &non-continuable-rcd) (kM4ce5 core-prim . &non-continuable-rtd) (kM4cd2 core-prim . &who-rcd) (kM4cd0 core-prim . &who-rtd) (kM4cb7 core-prim . &irritants-rcd) (kM4cb5 core-prim . &irritants-rtd) (kM4c9c core-prim . &assertion-rcd) (kM4c9a core-prim . &assertion-rtd) (kM4c87 core-prim . &violation-rcd) (kM4c85 core-prim . &violation-rtd) (kM4c72 core-prim . &error-rcd) (kM4c70 core-prim . &error-rtd) (kM4c5d core-prim . &serious-rcd) (kM4c5b core-prim . &serious-rtd) (kM4c48 core-prim . &warning-rcd) (kM4c46 core-prim . &warning-rtd) (kM4c33 core-prim . &message-rcd) (kM4c31 core-prim . &message-rtd) (kM4bd4 core-prim . &condition-rcd) (kM4bd2 core-prim . &condition-rtd) (kM3152 core-prim . syntax-error) (kM3076 core-prim . syntax-dispatch) (kM5421 core-prim . pretty-print) (kM5420 core-prim . eval-core) (kM541f core-prim . set-symbol-value!) (kM541e core-prim . symbol-value) (kM541d core-prim . gensym) (kM541c core-prim . void) (kM4f96 core-prim . load) (kM3164 core-prim . interaction-environment) (kM541b core-prim . char-ready?) (kM541a core-prim . regexp?) (kM5419 core-prim . read-line) (kM5418 core-prim . gensym-prefix-set!) (kM5417 core-prim . ungensym) (kM5416 core-prim . alist->eq-hash-table) (kM5415 core-prim . assoc-ref) (kM5414 core-prim . print) (kM5413 core-prim . format) (kM5412 core-prim . host-os) (kM2aaf core-prim . library-path) (kM5411 core-prim . standard-library-path) (kM5410 core-prim . file-newer?) (kM540f core-prim . stat-mtime) (kM540e core-prim . write-to-file) (kM540d core-prim . file->list) (kM540c core-prim . file->string) (kM540b core-prim . digit->integer) (kM540a core-prim . call-with-string-input-port) (kM5409 core-prim . call-with-string-io) (kM5408 core-prim . string-split) (kM5407 core-prim . bytevector-for-each) (kM5406 core-prim . string->regexp) (kM5405 core-prim . rxmatch) (kM5404 core-prim . regexp-replace-all) (kM5403 core-prim . hashtable-for-each) (kM289a core-prim . mosh-cache-dir) (kM5402 core-prim . call-process) (kM5401 core-prim . local-tz-offset) (kM5400 core-prim . microseconds) (kM53ff core-prim . directory-list) (kM53fe core-prim . set-current-directory!) (kM53fd core-prim . expand-path) (kM53fc core-prim . current-directory) (kM53fb core-prim . %spawn) (kM53fa core-prim . %waitpid) (kM53f9 core-prim . simple-struct-name) (kM53f8 core-prim . simple-struct-set!) (kM53f7 core-prim . simple-struct-ref) (kM53f6 core-prim . make-simple-struct) (kM53f5 core-prim . simple-struct?) (kM53f4 core-prim . pointer-ref-c-int64) (kM53f3 core-prim . pointer-ref-c-int32) (kM53f2 core-prim . pointer-ref-c-int16) (kM53f1 core-prim . pointer-ref-c-int8) (kM53f0 core-prim . pointer-ref-c-uint64) (kM53ef core-prim . pointer-ref-c-uint32) (kM53ee core-prim . pointer-ref-c-uint16) (kM53ed core-prim . pointer-ref-c-uint8) (kM53ec core-prim . pointer-set-c-uint64!) (kM53eb core-prim . pointer-set-c-uint32!) (kM53ea core-prim . pointer-set-c-uint16!) (kM53e9 core-prim . pointer-set-c-uint8!) (kM53e8 core-prim . pointer-set-c-int64!) (kM53e7 core-prim . pointer-set-c-int32!) (kM53e6 core-prim . pointer-set-c-int16!) (kM53e5 core-prim . pointer-set-c-int8!) (kM53e4 core-prim . pointer-set-c-pointer!) (kM53e3 core-prim . pointer-set-c-double!) (kM53e2 core-prim . pointer-set-c-float!) (kM53e1 core-prim . pointer-set-c-long-long!) (kM53e0 core-prim . pointer-set-c-long!) (kM53df core-prim . pointer-set-c-int!) (kM53de core-prim . pointer-set-c-short!) (kM53dd core-prim . pointer-set-c-char!) (kM53dc core-prim . pointer-ref-c-pointer) (kM53db core-prim . pointer-ref-c-double) (kM53da core-prim . pointer-ref-c-float) (kM53d9 core-prim . pointer-ref-c-unsigned-long-long) (kM53d8 core-prim . pointer-ref-c-signed-long-long) (kM53d7 core-prim . pointer-ref-c-unsigned-long) (kM53d6 core-prim . pointer-ref-c-signed-long) (kM53d5 core-prim . pointer-ref-c-unsigned-int) (kM53d4 core-prim . pointer-ref-c-signed-int) (kM53d3 core-prim . pointer-ref-c-unsigned-short) (kM53d2 core-prim . pointer-ref-c-signed-short) (kM53d1 core-prim . pointer-ref-c-unsigned-char) (kM53d0 core-prim . pointer-ref-c-signed-char) (kM53cf core-prim . pointer->integer) (kM53ce core-prim . integer->pointer) (kM53cd core-prim . pointer?) (kM53cc core-prim . shared-errno) (kM53cb core-prim . %ffi-free-c-callback-trampoline) (kM53ca core-prim . %ffi-make-c-callback-trampoline) (kM53c9 core-prim . %ffi-free) (kM53c8 core-prim . %ffi-malloc) (kM53c7 core-prim . %ffi-supported?) (kM53c6 core-prim . %ffi-pointer->string) (kM53c5 core-prim . %ffi-call->string-or-zero) (kM53c4 core-prim . %ffi-call->double) (kM53c3 core-prim . %ffi-call->void*) (kM53c2 core-prim . %ffi-call->void) (kM53c1 core-prim . %ffi-call->char) (kM53c0 core-prim . %ffi-call->int) (kM53bf core-prim . %ffi-lookup) (kM53be core-prim . %ffi-open) (kM53bd core-prim . %fork) (kM53bc core-prim . %pipe) (kM53bb core-prim . p) (kM53ba core-prim . open-output-string) (kM53b9 core-prim . get-output-string) (kM53b8 core-prim . file-stat-ctime) (kM53b7 core-prim . file-stat-atime) (kM53b6 core-prim . file-stat-mtime) (kM53b5 core-prim . file-size-in-bytes) (kM53b4 core-prim . file-writable?) (kM53b3 core-prim . file-executable?) (kM53b2 core-prim . file-readable?) (kM53b1 core-prim . file-regular?) (kM53b0 core-prim . file-symbolic-link?) (kM53af core-prim . file-directory?) (kM53ae core-prim . create-symbolic-link) (kM53ad core-prim . rename-file) (kM53ac core-prim . delete-directory) (kM53ab core-prim . create-directory) (kM53aa core-prim . create-mosh-cache-dir) (kM53a9 core-prim . get-environment-variables) (kM53a8 core-prim . current-exception-handler) (kM53a7 core-prim . get-environment-variable) (kM53a6 core-prim . join-wraps) (kM53a5 core-prim . id->real-label) (kM53a4 core-prim . same-marks?) (kM53a3 core-prim . same-marks*?) (kM53a2 core-prim . get-timeofday) (kM53a1 core-prim . get-command-line) (kM53a0 core-prim . sys-display) (kM539f core-prim . whereis) (kM539e core-prim . register) (kM539d core-prim . vm-join!) (kM539c core-prim . vm-set-value!) (kM539b core-prim . vm?) (kM539a core-prim . main-vm?) (kM5399 core-prim . vm-eval) (kM5398 core-prim . vm-self) (kM5397 core-prim . vm-start!) (kM5396 core-prim . make-vm) (kM5395 core-prim . mutex-try-lock!) (kM5394 core-prim . mutex-unlock!) (kM5393 core-prim . mutex-lock!) (kM5392 core-prim . mutex?) (kM5391 core-prim . make-mutex) (kM5390 core-prim . condition-variable-notify-all!) (kM538f core-prim . condition-variable-notify!) (kM538e core-prim . condition-variable-wait!) (kM538d core-prim . make-condition-variable) (kM538c core-prim . mosh-executable-path) (kM538b core-prim . make-file-options) (kM538a core-prim . source-info) (kM5389 core-prim . make-compiler-instruction) (kM5388 core-prim . make-instruction) (kM5387 core-prim . set-source-info!) (kM5386 core-prim . bignum?) (kM5385 core-prim . fast-equal?) (kM5384 core-prim . fasl-read) (kM5383 core-prim . fasl-write) (kM5382 core-prim . time-usage) (kM5381 core-prim . os-constant) (kM5380 core-prim . disasm) (kM2898 core-prim . make-parameter) (kM537f core-prim . socket-port) (kM537e core-prim . socket-shutdown) (kM537d core-prim . socket-close) (kM537c core-prim . socket-send) (kM537b core-prim . socket-recv!) (kM537a core-prim . socket-recv) (kM5379 core-prim . make-server-socket) (kM5378 core-prim . make-client-socket) (kM5377 core-prim . socket-accept) (kM5376 core-prim . socket?) (kM5375 core-prim . string-upcase) (kM5374 core-prim . string-titlecase) (kM5373 core-prim . string-normalize-nfkd) (kM5372 core-prim . string-normalize-nfkc) (kM5371 core-prim . string-normalize-nfd) (kM5370 core-prim . string-normalize-nfc) (kM536f core-prim . string-foldcase) (kM536e core-prim . string-downcase) (kM536d core-prim . string-ci>?) (kM536c core-prim . string-ci>=?) (kM536b core-prim . string-ci=?) (kM536a core-prim . string-ci<?) (kM5369 core-prim . string-ci<=?) (kM5368 core-prim . char-whitespace?) (kM5367 core-prim . char-upper-case?) (kM5366 core-prim . char-title-case?) (kM5365 core-prim . char-numeric?) (kM5364 core-prim . char-lower-case?) (kM5363 core-prim . char-general-category) (kM5362 core-prim . char-upcase) (kM5361 core-prim . char-titlecase) (kM5360 core-prim . char-foldcase) (kM535f core-prim . char-downcase) (kM535e core-prim . char-ci>?) (kM535d core-prim . char-ci>=?) (kM535c core-prim . char-ci=?) (kM535b core-prim . char-ci<?) (kM535a core-prim . char-ci<=?) (kM5359 core-prim . char-alphabetic?) (kM2ea1 core-prim . make-variable-transformer) (kM3158 core-prim . identifier?) (kM3144 core-prim . generate-temporaries) (kM3146 core-prim . free-identifier=?) (kM315c core-prim . syntax->datum) (kM315a core-prim . datum->syntax) (kM3148 core-prim . bound-identifier=?) (kM5358 core-prim . record-type-descriptor?) (kM5357 core-prim . record-predicate) (kM5356 core-prim . record-mutator) (kM5355 core-prim . record-constructor) (kM5354 core-prim . record-accessor) (kM5353 core-prim . make-record-type-descriptor) (kM5352 core-prim . make-record-constructor-descriptor) (kM5351 core-prim . record?) (kM5350 core-prim . record-type-uid) (kM534f core-prim . record-type-sealed?) (kM534e core-prim . record-type-parent) (kM534d core-prim . record-type-opaque?) (kM534c core-prim . record-type-name) (kM534b core-prim . record-type-generative?) (kM534a core-prim . record-type-field-names) (kM5349 core-prim . record-rtd) (kM5348 core-prim . record-field-mutable?) (kM5347 core-prim . delete-file) (kM5346 core-prim . file-exists?) (kM5345 core-prim . vector-sort!) (kM5344 core-prim . vector-sort) (kM5343 core-prim . list-sort) (kM5342 core-prim . symbol-hash) (kM5341 core-prim . string-ci-hash) (kM5340 core-prim . string-hash) (kM533f core-prim . equal-hash) (kM533e core-prim . hashtable-equivalence-function) (kM533d core-prim . make-hashtable) (kM533c core-prim . hashtable-hash-function) (kM533b core-prim . make-eqv-hashtable) (kM533a core-prim . make-eq-hashtable) (kM5339 core-prim . hashtable?) (kM5338 core-prim . hashtable-update!) (kM5337 core-prim . hashtable-size) (kM5336 core-prim . hashtable-set!) (kM5335 core-prim . hashtable-ref) (kM5334 core-prim . hashtable-mutable?) (kM5333 core-prim . hashtable-keys) (kM5332 core-prim . hashtable-entries) (kM5331 core-prim . hashtable-delete!) (kM5330 core-prim . hashtable-copy) (kM532f core-prim . hashtable-contains?) (kM532e core-prim . hashtable-clear!) (kM532d core-prim . call-with-output-file) (kM532c core-prim . call-with-input-file) (kM532b core-prim . write-char) (kM532a core-prim . write) (kM5329 core-prim . with-output-to-file) (kM5328 core-prim . with-input-from-file) (kM5327 core-prim . read-char) (kM5326 core-prim . read) (kM5325 core-prim . peek-char) (kM5324 core-prim . open-output-file) (kM5323 core-prim . open-input-file) (kM5322 core-prim . newline) (kM5321 core-prim . display) (kM5320 core-prim . close-output-port) (kM531f core-prim . close-input-port) (kM531e core-prim . eof-object?) (kM531d core-prim . eof-object) (kM531c core-prim . current-error-port) (kM531b core-prim . current-output-port) (kM531a core-prim . current-input-port) (kM5319 core-prim . output-port?) (kM5318 core-prim . input-port?) (kM5317 core-prim . utf-8-codec) (kM5316 core-prim . utf-16-codec) (kM5315 core-prim . transcoder-error-handling-mode) (kM5314 core-prim . transcoder-eol-style) (kM5313 core-prim . transcoder-codec) (kM5312 core-prim . transcoded-port) (kM5311 core-prim . textual-port?) (kM5310 core-prim . string->bytevector) (kM530f core-prim . standard-output-port) (kM530e core-prim . standard-input-port) (kM530d core-prim . standard-error-port) (kM530c core-prim . set-port-position!) (kM530b core-prim . put-u8) (kM530a core-prim . put-string) (kM5309 core-prim . put-datum) (kM5308 core-prim . put-char) (kM5307 core-prim . put-bytevector) (kM5306 core-prim . port?) (kM5305 core-prim . port-transcoder) (kM5304 core-prim . port-position) (kM5303 core-prim . port-has-set-port-position!?) (kM5302 core-prim . port-has-port-position?) (kM5301 core-prim . port-eof?) (kM5300 core-prim . output-port-buffer-mode) (kM52ff core-prim . open-string-output-port) (kM52fe core-prim . open-string-input-port) (kM52fd core-prim . open-file-output-port) (kM52fc core-prim . open-file-input/output-port) (kM52fb core-prim . open-file-input-port) (kM52fa core-prim . open-bytevector-output-port) (kM52f9 core-prim . open-bytevector-input-port) (kM52f8 core-prim . native-transcoder) (kM52f7 core-prim . native-eol-style) (kM52f6 core-prim . make-transcoder) (kM52f5 core-prim . latin-1-codec) (kM4d80 core-prim . make-i/o-write-error) (kM4d6b core-prim . make-i/o-read-error) (kM4e21 core-prim . make-i/o-port-error) (kM4d97 core-prim . make-i/o-invalid-position-error) (kM4db2 core-prim . make-i/o-filename-error) (kM4dcb core-prim . make-i/o-file-protection-error) (kM4de0 core-prim . make-i/o-file-is-read-only-error) (kM4e0a core-prim . make-i/o-file-does-not-exist-error) (kM4df5 core-prim . make-i/o-file-already-exists-error) (kM4d56 core-prim . make-i/o-error) (kM4e51 core-prim . make-i/o-encoding-error) (kM4e3a core-prim . make-i/o-decoding-error) (kM52f4 core-prim . make-custom-textual-output-port) (kM52f3 core-prim . make-custom-textual-input/output-port) (kM52f2 core-prim . make-custom-textual-input-port) (kM52f1 core-prim . make-custom-binary-output-port) (kM52f0 core-prim . make-custom-binary-input/output-port) (kM52ef core-prim . make-custom-binary-input-port) (kM52ee core-prim . make-bytevector) (kM52ed core-prim . lookahead-u8) (kM52ec core-prim . lookahead-char) (kM4d82 core-prim . i/o-write-error?) (kM4d6d core-prim . i/o-read-error?) (kM4e25 core-prim . i/o-port-error?) (kM4d9b core-prim . i/o-invalid-position-error?) (kM4db6 core-prim . i/o-filename-error?) (kM4dcd core-prim . i/o-file-protection-error?) (kM4de2 core-prim . i/o-file-is-read-only-error?) (kM4e0c core-prim . i/o-file-does-not-exist-error?) (kM4df7 core-prim . i/o-file-already-exists-error?) (kM4d58 core-prim . i/o-error?) (kM4d9d core-prim . i/o-error-position) (kM4e27 core-prim . i/o-error-port) (kM4db8 core-prim . i/o-error-filename) (kM4e55 core-prim . i/o-encoding-error?) (kM4e57 core-prim . i/o-encoding-error-char) (kM4e3c core-prim . i/o-decoding-error?) (kM52eb core-prim . get-u8) (kM52ea core-prim . get-string-n!) (kM52e9 core-prim . get-string-n) (kM52e8 core-prim . get-string-all) (kM52e7 core-prim . get-line) (kM52e6 core-prim . get-datum) (kM52e5 core-prim . get-char) (kM52e4 core-prim . get-bytevector-some) (kM52e3 core-prim . get-bytevector-n!) (kM52e2 core-prim . get-bytevector-n) (kM52e1 core-prim . get-bytevector-all) (kM52e0 core-prim . flush-output-port) (kM52df core-prim . close-port) (kM3132 core-prim . scheme-report-environment) (kM52de core-prim . quotient) (kM3130 core-prim . null-environment) (kM52dd core-prim . remainder) (kM52dc core-prim . modulo) (kM52db core-prim . inexact->exact) (kM52da core-prim . force) (kM52d9 core-prim . exact->inexact) (kM52d8 core-prim . make-promise) (kM52d7 core-prim . exit) (kM4f90 core-prim . command-line) (kM52d6 core-prim . string-fill!) (kM52d5 core-prim . string-set!) (kM52d4 core-prim . set-cdr!) (kM52d3 core-prim . set-car!) (kM52d2 core-prim . remove) (kM52d1 core-prim . remv) (kM52d0 core-prim . remp) (kM52cf core-prim . remq) (kM52ce core-prim . partition) (kM52cd core-prim . memv) (kM52cc core-prim . memq) (kM52cb core-prim . memp) (kM52ca core-prim . member) (kM52c9 core-prim . exists) (kM52c8 core-prim . for-all) (kM52c7 core-prim . fold-right) (kM52c6 core-prim . fold-left) (kM52c5 core-prim . find) (kM52c4 core-prim . filter) (kM52c3 core-prim . cons*) (kM52c2 core-prim . assv) (kM52c1 core-prim . assq) (kM52c0 core-prim . assp) (kM52bf core-prim . assoc) (kM52be core-prim . call-with-string-output-port) (kM52bd core-prim . call-with-port) (kM52bc core-prim . call-with-bytevector-output-port) (kM52bb core-prim . bytevector->string) (kM52ba core-prim . buffer-mode?) (kM52b9 core-prim . binary-port?) (kM52b8 core-prim . with-exception-handler) (kM52b7 core-prim . raise-continuable) (kM52b6 core-prim . raise) (kM3136 core-prim . eval) (kM312e core-prim . environment) (kM52b5 core-prim . make-enumeration) (kM52b4 core-prim . enum-set=?) (kM52b3 core-prim . enum-set-universe) (kM52b2 core-prim . enum-set-union) (kM52b1 core-prim . enum-set-subset?) (kM52b0 core-prim . enum-set-projection) (kM52af core-prim . enum-set-member?) (kM52ae core-prim . enum-set-intersection) (kM52ad core-prim . enum-set-indexer) (kM52ac core-prim . enum-set-difference) (kM52ab core-prim . enum-set-constructor) (kM52aa core-prim . enum-set-complement) (kM52a9 core-prim . enum-set->list) (kM4ccc core-prim . who-condition?) (kM4c44 core-prim . warning?) (kM4c83 core-prim . violation?) (kM4d43 core-prim . undefined-violation?) (kM4d2a core-prim . syntax-violation?) (kM4d2e core-prim . syntax-violation-subform) (kM4d2c core-prim . syntax-violation-form) (kM3156 core-prim . syntax-violation) (kM52a8 core-prim . simple-conditions) (kM4c59 core-prim . serious-condition?) (kM4ce3 core-prim . non-continuable-violation?) (kM4c2d core-prim . message-condition?) (kM4cc8 core-prim . make-who-condition) (kM4c42 core-prim . make-warning) (kM4c81 core-prim . make-violation) (kM4d41 core-prim . make-undefined-violation) (kM4d24 core-prim . make-syntax-violation) (kM4c57 core-prim . make-serious-condition) (kM4ce1 core-prim . make-non-continuable-violation) (kM4c29 core-prim . make-message-condition) (kM4d0b core-prim . make-lexical-violation) (kM4cad core-prim . make-irritants-condition) (kM4cf6 core-prim . make-implementation-restriction-violation) (kM4c6c core-prim . make-error) (kM4c96 core-prim . make-assertion-violation) (kM4d0d core-prim . lexical-violation?) (kM4cb1 core-prim . irritants-condition?) (kM4cf8 core-prim . implementation-restriction-violation?) (kM4c6e core-prim . error?) (kM4cce core-prim . condition-who) (kM52a7 core-prim . condition-predicate) (kM4c2f core-prim . condition-message) (kM4cb3 core-prim . condition-irritants) (kM52a6 core-prim . condition-accessor) (kM52a5 core-prim . condition) (kM4c98 core-prim . assertion-violation?) (kM52a4 core-prim . condition?) (kM52a3 core-prim . utf32->string) (kM52a2 core-prim . utf16->string) (kM52a1 core-prim . utf8->string) (kM52a0 core-prim . uint-list->bytevector) (kM529f core-prim . u8-list->bytevector) (kM529e core-prim . string->utf8) (kM529d core-prim . string->utf32) (kM529c core-prim . string->utf16) (kM529b core-prim . sint-list->bytevector) (kM529a core-prim . native-endianness) (kM5299 core-prim . bytevector?) (kM5298 core-prim . bytevector=?) (kM5297 core-prim . bytevector-uint-set!) (kM5296 core-prim . bytevector-uint-ref) (kM5295 core-prim . bytevector-u8-set!) (kM5294 core-prim . bytevector-u8-ref) (kM5293 core-prim . bytevector-u64-set!) (kM5292 core-prim . bytevector-u64-ref) (kM5291 core-prim . bytevector-u64-native-set!) (kM5290 core-prim . bytevector-u64-native-ref) (kM528f core-prim . bytevector-u32-set!) (kM528e core-prim . bytevector-u32-ref) (kM528d core-prim . bytevector-u32-native-set!) (kM528c core-prim . bytevector-u32-native-ref) (kM528b core-prim . bytevector-u16-set!) (kM528a core-prim . bytevector-u16-ref) (kM5289 core-prim . bytevector-u16-native-set!) (kM5288 core-prim . bytevector-u16-native-ref) (kM5287 core-prim . bytevector-sint-set!) (kM5286 core-prim . bytevector-sint-ref) (kM5285 core-prim . bytevector-s8-set!) (kM5284 core-prim . bytevector-s8-ref) (kM5283 core-prim . bytevector-s64-set!) (kM5282 core-prim . bytevector-s64-ref) (kM5281 core-prim . bytevector-s64-native-set!) (kM5280 core-prim . bytevector-s64-native-ref) (kM527f core-prim . bytevector-s32-set!) (kM527e core-prim . bytevector-s32-ref) (kM527d core-prim . bytevector-s32-native-set!) (kM527c core-prim . bytevector-s32-native-ref) (kM527b core-prim . bytevector-s16-set!) (kM527a core-prim . bytevector-s16-ref) (kM5279 core-prim . bytevector-s16-native-set!) (kM5278 core-prim . bytevector-s16-native-ref) (kM5277 core-prim . bytevector-length) (kM5276 core-prim . bytevector-ieee-single-ref) (kM5275 core-prim . bytevector-ieee-single-set!) (kM5274 core-prim . bytevector-ieee-single-native-set!) (kM5273 core-prim . bytevector-ieee-single-native-ref) (kM5272 core-prim . bytevector-ieee-double-set!) (kM5271 core-prim . bytevector-ieee-double-ref) (kM5270 core-prim . bytevector-ieee-double-native-set!) (kM526f core-prim . bytevector-ieee-double-native-ref) (kM526e core-prim . bytevector-fill!) (kM526d core-prim . bytevector-copy!) (kM526c core-prim . bytevector-copy) (kM526b core-prim . bytevector->uint-list) (kM526a core-prim . bytevector->u8-list) (kM5269 core-prim . bytevector->sint-list) (kM4e81 core-prim . no-nans-violation?) (kM4e6c core-prim . no-infinities-violation?) (kM4e7f core-prim . make-no-nans-violation) (kM4e6a core-prim . make-no-infinities-violation) (kM5268 core-prim . real->flonum) (kM5267 core-prim . flzero?) (kM5266 core-prim . fltruncate) (kM5265 core-prim . fltan) (kM5264 core-prim . flsqrt) (kM5263 core-prim . flsin) (kM5262 core-prim . flround) (kM5261 core-prim . flpositive?) (kM5260 core-prim . flonum?) (kM525f core-prim . flodd?) (kM525e core-prim . flnumerator) (kM525d core-prim . flnegative?) (kM525c core-prim . flnan?) (kM525b core-prim . flmod0) (kM525a core-prim . flmod) (kM5259 core-prim . flmin) (kM5258 core-prim . flmax) (kM5257 core-prim . fllog) (kM5256 core-prim . flinteger?) (kM5255 core-prim . flinfinite?) (kM5254 core-prim . flfloor) (kM5253 core-prim . flfinite?) (kM5252 core-prim . flexpt) (kM5251 core-prim . flexp) (kM5250 core-prim . fleven?) (kM524f core-prim . fldiv0-and-mod0) (kM524e core-prim . fldiv0) (kM524d core-prim . fldiv-and-mod) (kM524c core-prim . fldiv) (kM524b core-prim . fldenominator) (kM524a core-prim . flcos) (kM5249 core-prim . flceiling) (kM5248 core-prim . flatan) (kM5247 core-prim . flasin) (kM5246 core-prim . flacos) (kM5245 core-prim . flabs) (kM5244 core-prim . fl>?) (kM5243 core-prim . fl>=?) (kM5242 core-prim . fl=?) (kM5241 core-prim . fl<?) (kM5240 core-prim . fl<=?) (kM523f core-prim . fl/) (kM523e core-prim . fl-) (kM523d core-prim . fl+) (kM523c core-prim . fl*) (kM523b core-prim . fixnum->flonum) (kM523a core-prim . fxzero?) (kM5239 core-prim . fxxor) (kM5238 core-prim . fxrotate-bit-field) (kM5237 core-prim . fxreverse-bit-field) (kM5236 core-prim . fxpositive?) (kM5235 core-prim . fxodd?) (kM5234 core-prim . fxnot) (kM5233 core-prim . fxnegative?) (kM5232 core-prim . fxmod0) (kM5231 core-prim . fxmod) (kM5230 core-prim . fxmin) (kM522f core-prim . fxmax) (kM522e core-prim . fxlength) (kM522d core-prim . fxior) (kM522c core-prim . fxif) (kM522b core-prim . fxfirst-bit-set) (kM522a core-prim . fxeven?) (kM5229 core-prim . fxdiv0-and-mod0) (kM5228 core-prim . fxdiv0) (kM5227 core-prim . fxdiv-and-mod) (kM5226 core-prim . fxdiv) (kM5225 core-prim . fxcopy-bit-field) (kM5224 core-prim . fxcopy-bit) (kM5223 core-prim . fxbit-set?) (kM5222 core-prim . fxbit-field) (kM5221 core-prim . fxbit-count) (kM5220 core-prim . fxarithmetic-shift-right) (kM521f core-prim . fxarithmetic-shift-left) (kM521e core-prim . fxarithmetic-shift) (kM521d core-prim . fxand) (kM521c core-prim . fx>?) (kM521b core-prim . fx>=?) (kM521a core-prim . fx=?) (kM5219 core-prim . fx<?) (kM5218 core-prim . fx<=?) (kM5217 core-prim . fx-/carry) (kM5216 core-prim . fx-) (kM5215 core-prim . fx+/carry) (kM5214 core-prim . fx+) (kM5213 core-prim . fx*/carry) (kM5212 core-prim . fx*) (kM5211 core-prim . greatest-fixnum) (kM5210 core-prim . least-fixnum) (kM520f core-prim . fixnum-width) (kM520e core-prim . fixnum?) (kM520d core-prim . bitwise-rotate-bit-field) (kM520c core-prim . bitwise-reverse-bit-field) (kM520b core-prim . bitwise-length) (kM520a core-prim . bitwise-if) (kM5209 core-prim . bitwise-first-bit-set) (kM5208 core-prim . bitwise-copy-bit-field) (kM5207 core-prim . bitwise-copy-bit) (kM5206 core-prim . bitwise-bit-set?) (kM5205 core-prim . bitwise-bit-field) (kM5204 core-prim . bitwise-bit-count) (kM5203 core-prim . bitwise-xor) (kM5202 core-prim . bitwise-ior) (kM5201 core-prim . bitwise-and) (kM5200 core-prim . bitwise-not) (kM51ff core-prim . bitwise-arithmetic-shift-right) (kM51fe core-prim . bitwise-arithmetic-shift-left) (kM51fd core-prim . bitwise-arithmetic-shift) (kM51fc core-prim . zero?) (kM51fb core-prim . vector?) (kM51fa core-prim . vector-set!) (kM51f9 core-prim . vector-ref) (kM51f8 core-prim . vector-map) (kM51f7 core-prim . vector-length) (kM51f6 core-prim . vector-for-each) (kM51f5 core-prim . vector-fill!) (kM51f4 core-prim . vector->list) (kM51f3 core-prim . vector) (kM51f2 core-prim . values) (kM51f1 core-prim . truncate) (kM51f0 core-prim . tan) (kM51ef core-prim . symbol?) (kM51ee core-prim . symbol=?) (kM51ed core-prim . symbol->string) (kM51ec core-prim . substring) (kM51eb core-prim . string?) (kM51ea core-prim . string>?) (kM51e9 core-prim . string>=?) (kM51e8 core-prim . string=?) (kM51e7 core-prim . string<?) (kM51e6 core-prim . string<=?) (kM51e5 core-prim . string-ref) (kM51e4 core-prim . string-length) (kM51e3 core-prim . string-for-each) (kM51e2 core-prim . string-copy) (kM51e1 core-prim . string-append) (kM51e0 core-prim . string->symbol) (kM51df core-prim . string->number) (kM51de core-prim . string->list) (kM51dd core-prim . string) (kM51dc core-prim . sqrt) (kM51db core-prim . sin) (kM51da core-prim . round) (kM51d9 core-prim . reverse) (kM51d8 core-prim . real?) (kM51d7 core-prim . real-valued?) (kM51d6 core-prim . real-part) (kM51d5 core-prim . rationalize) (kM51d4 core-prim . rational?) (kM51d3 core-prim . rational-valued?) (kM51d2 core-prim . procedure?) (kM51d1 core-prim . positive?) (kM51d0 core-prim . pair?) (kM51cf core-prim . odd?) (kM51ce core-prim . numerator) (kM51cd core-prim . number?) (kM51cc core-prim . number->string) (kM51cb core-prim . null?) (kM51ca core-prim . not) (kM51c9 core-prim . negative?) (kM51c8 core-prim . nan?) (kM51c7 core-prim . min) (kM51c6 core-prim . max) (kM51c5 core-prim . map) (kM51c4 core-prim . make-vector) (kM51c3 core-prim . make-string) (kM51c2 core-prim . make-rectangular) (kM51c1 core-prim . make-polar) (kM51c0 core-prim . magnitude) (kM51bf core-prim . log) (kM51be core-prim . list?) (kM51bd core-prim . list-tail) (kM51bc core-prim . list-ref) (kM51bb core-prim . list->vector) (kM51ba core-prim . list->string) (kM51b9 core-prim . list) (kM51b8 core-prim . length) (kM51b7 core-prim . lcm) (kM51b6 core-prim . integer?) (kM51b5 core-prim . integer-valued?) (kM51b4 core-prim . integer->char) (kM51b3 core-prim . infinite?) (kM51b2 core-prim . inexact?) (kM51b1 core-prim . inexact) (kM51b0 core-prim . imag-part) (kM51af core-prim . gcd) (kM51ae core-prim . for-each) (kM51ad core-prim . floor) (kM51ac core-prim . finite?) (kM51ab core-prim . expt) (kM51aa core-prim . exp) (kM51a9 core-prim . exact?) (kM51a8 core-prim . exact-integer-sqrt) (kM51a7 core-prim . exact) (kM51a6 core-prim . even?) (kM51a5 core-prim . error) (kM51a4 core-prim . eqv?) (kM51a3 core-prim . equal?) (kM51a2 core-prim . eq?) (kM51a1 core-prim . dynamic-wind) (kM51a0 core-prim . div0-and-mod0) (kM519f core-prim . mod0) (kM519e core-prim . div0) (kM519d core-prim . div-and-mod) (kM519c core-prim . mod) (kM519b core-prim . div) (kM519a core-prim . denominator) (kM5199 core-prim . cos) (kM5198 core-prim . cons) (kM5197 core-prim . complex?) (kM5196 core-prim . char?) (kM5195 core-prim . char>?) (kM5194 core-prim . char>=?) (kM5193 core-prim . char=?) (kM5192 core-prim . char<?) (kM5191 core-prim . char<=?) (kM5190 core-prim . char->integer) (kM518f core-prim . ceiling) (kM518e core-prim . call-with-values) (kM518d core-prim . call/cc) (kM518c core-prim . call-with-current-continuation) (kM518b core-prim . cddddr) (kM518a core-prim . cdddar) (kM5189 core-prim . cddadr) (kM5188 core-prim . cddaar) (kM5187 core-prim . cdaddr) (kM5186 core-prim . cdadar) (kM5185 core-prim . cdaadr) (kM5184 core-prim . cdaaar) (kM5183 core-prim . cadddr) (kM5182 core-prim . caddar) (kM5181 core-prim . cadadr) (kM5180 core-prim . cadaar) (kM517f core-prim . caaddr) (kM517e core-prim . caadar) (kM517d core-prim . caaadr) (kM517c core-prim . caaaar) (kM517b core-prim . cdddr) (kM517a core-prim . cddar) (kM5179 core-prim . cdadr) (kM5178 core-prim . cdaar) (kM5177 core-prim . caddr) (kM5176 core-prim . cadar) (kM5175 core-prim . caadr) (kM5174 core-prim . caaar) (kM5173 core-prim . cddr) (kM5172 core-prim . cdar) (kM5171 core-prim . cadr) (kM5170 core-prim . caar) (kM516f core-prim . cdr) (kM516e core-prim . car) (kM516d core-prim . boolean?) (kM516c core-prim . boolean=?) (kM516b core-prim . atan) (kM516a core-prim . assertion-violation) (kM3150 core-prim . assertion-error) (kM5169 core-prim . asin) (kM5168 core-prim . apply) (kM5167 core-prim . append) (kM5166 core-prim . angle) (kM5165 core-prim . acos) (kM5164 core-prim . abs) (kM5163 core-prim . /) (kM5162 core-prim . *) (kM5161 core-prim . -) (kM5160 core-prim . +) (kM515f core-prim . >=) (kM515e core-prim . >) (kM515d core-prim . =) (kM515c core-prim . <=) (kM515b core-prim . <) (kM515a core-prim . library) (kM5159 $core-rtd &no-nans-rtd &no-nans-rcd) (kM5158 $core-rtd &no-infinities-rtd &no-infinities-rcd) (kM5157 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (kM5156 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (kM5155 $core-rtd &i/o-port-rtd &i/o-port-rcd) (kM5154 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (kM5153 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (kM5152 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (kM5151 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (kM5150 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (kM514f $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (kM514e $core-rtd &i/o-write-rtd &i/o-write-rcd) (kM514d $core-rtd &i/o-read-rtd &i/o-read-rcd) (kM514c $core-rtd &i/o-rtd &i/o-rcd) (kM514b $core-rtd &undefined-rtd &undefined-rcd) (kM514a $core-rtd &syntax-rtd &syntax-rcd) (kM5149 $core-rtd &lexical-rtd &lexical-rcd) (kM5148 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (kM5147 $core-rtd &non-continuable-rtd &non-continuable-rcd) (kM5146 $core-rtd &who-rtd &who-rcd) (kM5145 $core-rtd &irritants-rtd &irritants-rcd) (kM5144 $core-rtd &assertion-rtd &assertion-rcd) (kM5143 $core-rtd &violation-rtd &violation-rcd) (kM5142 $core-rtd &error-rtd &error-rcd) (kM5141 $core-rtd &serious-rtd &serious-rcd) (kM5140 $core-rtd &warning-rtd &warning-rcd) (kM513f $core-rtd &message-rtd &message-rcd) (kM513e $core-rtd &condition-rtd &condition-rcd) (kM513d macro . define-condition-type) (kM513c macro . define-enumeration) (kM513b macro . define-record-type) (kM513a macro . parent-rtd) (kM5139 macro . nongenerative) (kM5138 macro . opaque) (kM5137 macro . sealed) (kM5136 macro . protocol) (kM5135 macro . parent) (kM5134 macro . immutable) (kM5133 macro . mutable) (kM5132 macro . fields) (kM5131 macro . error-handling-mode) (kM5130 macro . file-options) (kM512f macro . buffer-mode) (kM512e macro . eol-style) (kM512d macro . guard) (kM512c macro . trace-define) (kM512b macro . trace-lambda) (kM512a macro . unsyntax-splicing) (kM5129 macro . unsyntax) (kM5128 macro . unquote-splicing) (kM5127 macro . unquote) (kM5126 macro . _) (kM5125 macro . else) (kM5124 macro . =>) (kM5123 macro . ...) (kM5122 macro . assert) (kM5121 macro . endianness) (kM5120 macro . delay) (kM511f macro . time) (kM511e macro . do) (kM511d macro . cond) (kM511c macro . let*) (kM511b macro . let*-values) (kM511a macro . let-values) (kM5119 macro . identifier-syntax) (kM5118 macro . with-syntax) (kM5117 macro . quasisyntax) (kM5116 macro . quasiquote) (kM5115 macro . syntax-rules) (kM5114 macro . include) (kM5113 macro . define-struct) (kM5112 core-macro . record-constructor-descriptor) (kM5111 core-macro . record-type-descriptor) (kM5110 macro . case) (kM510f macro . parameterize) (kM510e macro . unless) (kM510d macro . when) (kM510c core-macro . or) (kM510b core-macro . and) (kM510a core-macro . if) (kM5109 core-macro . let) (kM5108 core-macro . letrec*) (kM5107 core-macro . letrec) (kM5106 core-macro . type-descriptor) (kM5105 core-macro . case-lambda) (kM5104 core-macro . lambda) (kM5103 core-macro . syntax) (kM5102 core-macro . syntax-case) (kM5101 core-macro . quote) (kM5100 core-macro . foreign-call) (kM50ff letrec-syntax) (kM50fe let-syntax) (kM50fd set!) (kM50fc import) (kM50fb begin) (kM50fa module) (kM50f9 define-syntax) (kM50f8 define)) values values '#f '#f '#f '#f) (kM2c84@kM2ad0@install-library 'kM5442 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . kM5421) (eval-core . kM5420) (set-symbol-value! . kM541f) (symbol-value . kM541e) (gensym . kM541d) (void . kM541c)) '() values values '#f '#f '#f '#f) (kM2c84@kM2ad0@install-library 'kM5443 '(mosh) '() '() '() '() '((set-symbol-value! . kM541f) (symbol-value . kM541e) (regexp? . kM541a) (read-line . kM5419) (ungensym . kM5417) (alist->eq-hash-table . kM5416) (assoc-ref . kM5415) (print . kM5414) (format . kM5413) (host-os . kM5412) (library-path . kM2aaf) (standard-library-path . kM5411) (file-newer? . kM5410) (stat-mtime . kM540f) (digit->integer . kM540b) (call-with-string-input-port . kM540a) (call-with-string-io . kM5409) (string-split . kM5408) (bytevector-for-each . kM5407) (string->regexp . kM5406) (rxmatch . kM5405) (regexp-replace-all . kM5404) (hashtable-for-each . kM5403) (set-current-directory! . kM53fe) (expand-path . kM53fd) (current-directory . kM53fc) (p . kM53bb) (get-timeofday . kM53a2) (get-command-line . kM53a1) (sys-display . kM53a0) (whereis . kM539f) (register . kM539e) (vm-join! . kM539d) (vm-set-value! . kM539c) (vm? . kM539b) (main-vm? . kM539a) (vm-eval . kM5399) (vm-self . kM5398) (vm-start! . kM5397) (make-vm . kM5396) (mutex-try-lock! . kM5395) (mutex-unlock! . kM5394) (mutex-lock! . kM5393) (mutex? . kM5392) (make-mutex . kM5391) (condition-variable-notify-all! . kM5390) (condition-variable-notify! . kM538f) (condition-variable-wait! . kM538e) (make-condition-variable . kM538d) (mosh-executable-path . kM538c) (make-file-options . kM538b) (source-info . kM538a) (make-compiler-instruction . kM5389) (make-instruction . kM5388) (set-source-info! . kM5387) (bignum? . kM5386) (fast-equal? . kM5385) (fasl-read . kM5384) (fasl-write . kM5383) (time-usage . kM5382) (os-constant . kM5381) (time . kM511f) (include . kM5114)) '() values values '#f '#f '#f '#f) (kM2c84@kM2ad0@install-library 'kM5444 '(system) '() '() '() '() '((gensym-prefix-set! . kM5418) (write-to-file . kM540e) (file->list . kM540d) (file->string . kM540c) (mosh-cache-dir . kM289a) (call-process . kM5402) (local-tz-offset . kM5401) (microseconds . kM5400) (directory-list . kM53ff) (expand-path . kM53fd) (%spawn . kM53fb) (%waitpid . kM53fa) (simple-struct-name . kM53f9) (simple-struct-set! . kM53f8) (simple-struct-ref . kM53f7) (make-simple-struct . kM53f6) (simple-struct? . kM53f5) (pointer-ref-c-int64 . kM53f4) (pointer-ref-c-int32 . kM53f3) (pointer-ref-c-int16 . kM53f2) (pointer-ref-c-int8 . kM53f1) (pointer-ref-c-uint64 . kM53f0) (pointer-ref-c-uint32 . kM53ef) (pointer-ref-c-uint16 . kM53ee) (pointer-ref-c-uint8 . kM53ed) (pointer-set-c-uint64! . kM53ec) (pointer-set-c-uint32! . kM53eb) (pointer-set-c-uint16! . kM53ea) (pointer-set-c-uint8! . kM53e9) (pointer-set-c-int64! . kM53e8) (pointer-set-c-int32! . kM53e7) (pointer-set-c-int16! . kM53e6) (pointer-set-c-int8! . kM53e5) (pointer-set-c-pointer! . kM53e4) (pointer-set-c-double! . kM53e3) (pointer-set-c-float! . kM53e2) (pointer-set-c-long-long! . kM53e1) (pointer-set-c-long! . kM53e0) (pointer-set-c-int! . kM53df) (pointer-set-c-short! . kM53de) (pointer-set-c-char! . kM53dd) (pointer-ref-c-pointer . kM53dc) (pointer-ref-c-double . kM53db) (pointer-ref-c-float . kM53da) (pointer-ref-c-unsigned-long-long . kM53d9) (pointer-ref-c-signed-long-long . kM53d8) (pointer-ref-c-unsigned-long . kM53d7) (pointer-ref-c-signed-long . kM53d6) (pointer-ref-c-unsigned-int . kM53d5) (pointer-ref-c-signed-int . kM53d4) (pointer-ref-c-unsigned-short . kM53d3) (pointer-ref-c-signed-short . kM53d2) (pointer-ref-c-unsigned-char . kM53d1) (pointer-ref-c-signed-char . kM53d0) (pointer->integer . kM53cf) (integer->pointer . kM53ce) (pointer? . kM53cd) (shared-errno . kM53cc) (%ffi-free-c-callback-trampoline . kM53cb) (%ffi-make-c-callback-trampoline . kM53ca) (%ffi-free . kM53c9) (%ffi-malloc . kM53c8) (%ffi-supported? . kM53c7) (%ffi-pointer->string . kM53c6) (%ffi-call->string-or-zero . kM53c5) (%ffi-call->double . kM53c4) (%ffi-call->void* . kM53c3) (%ffi-call->void . kM53c2) (%ffi-call->char . kM53c1) (%ffi-call->int . kM53c0) (%ffi-lookup . kM53bf) (%ffi-open . kM53be) (%fork . kM53bd) (%pipe . kM53bc) (open-output-string . kM53ba) (get-output-string . kM53b9) (file-stat-ctime . kM53b8) (file-stat-atime . kM53b7) (file-stat-mtime . kM53b6) (file-size-in-bytes . kM53b5) (file-writable? . kM53b4) (file-executable? . kM53b3) (file-readable? . kM53b2) (file-regular? . kM53b1) (file-symbolic-link? . kM53b0) (file-directory? . kM53af) (create-symbolic-link . kM53ae) (rename-file . kM53ad) (delete-directory . kM53ac) (create-directory . kM53ab) (create-mosh-cache-dir . kM53aa) (get-environment-variables . kM53a9) (current-exception-handler . kM53a8) (get-environment-variable . kM53a7) (join-wraps . kM53a6) (id->real-label . kM53a5) (same-marks? . kM53a4) (same-marks*? . kM53a3) (disasm . kM5380) (make-parameter . kM2898) (socket-port . kM537f) (socket-shutdown . kM537e) (socket-close . kM537d) (socket-send . kM537c) (socket-recv! . kM537b) (socket-recv . kM537a) (make-server-socket . kM5379) (make-client-socket . kM5378) (socket-accept . kM5377) (socket? . kM5376) (parameterize . kM510f)) '() values values '#f '#f '#f '#f)))
(begin (set! kM4f7b@ref (unspecified)) (set! kM4f7d@x* (unspecified)) (set! kM4f7f@add-library-path! (unspecified)) (set! kM4f81@parse-and-add-library-path (unspecified)) (set! kM4f83@for-each-with-index (unspecified)) (set! kM4f85@rpad (unspecified)) (set! kM4f87@condition-printer (unspecified)) (set! kM4f89@record->field-alist (unspecified)) (set! kM4f8b@map-with-index (unspecified)) (set! kM4f8d@repl (unspecified)) (set! kM4f8f@trace-printer (unspecified)) (set! kM4f91@command-line (unspecified)) (set! kM4f93@local-library-path (unspecified)) (set! kM4f95@load/args (unspecified)) (set! kM4f97@load (unspecified)) (set! kM4f99@ironscheme-build (unspecified)) (set! kM4f9b@eval-top-level (unspecified)) (set! kM4f9d@compile-system-libraries (unspecified)) (set! kM4f9f@compile (unspecified)) (set! kM4fa1@compile->closure (unspecified)) (set! kM4fa3@pre-compile-r6rs-file (unspecified)) (set! kM4fa5@load-r6rs-top-level (unspecified)) (set! kM4fa7@load-r6rs-top-level-sexp (unspecified)) (set! kM4fa9@prefix-inc (unspecified)) (set! kM4fab@prefix-inc! (unspecified)) (set! kM4f7b@ref (lambda (kM4fe6@rtd kM4fe7@i kM4fe8@x) (let ((kM4fec@val ((record-accessor kM4fe6@rtd kM4fe7@i) kM4fe8@x))) (if (symbol? kM4fec@val) (ungensym kM4fec@val) kM4fec@val)))) (set! kM50de@kM4f7b@ref kM4f7b@ref) (set! kM4f7d@x* '()) (set! kM50df@kM4f7d@x* kM4f7d@x*) (set! kM4f7f@add-library-path! (lambda (kM4fee@path) (kM2c74@kM2ab0@library-path (append (kM2c74@kM2ab0@library-path) (list kM4fee@path))))) (set! kM50e0@kM4f7f@add-library-path! kM4f7f@add-library-path!) (set! kM4f81@parse-and-add-library-path (lambda (kM4ff0@paths kM4ff1@message) (let ((kM4ff5@separator '#f)) (begin (set! kM4ff5@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((kM4ff6@t kM4ff0@paths)) (if kM4ff6@t ((lambda (kM4ff8@paths) (for-each (lambda (kM4ffa@path) (if (file-exists? kM4ffa@path) (kM4f7f@add-library-path! (expand-path kM4ffa@path)) (format (current-error-port) kM4ff1@message kM4ffa@path))) (string-split kM4ff8@paths kM4ff5@separator))) kM4ff6@t) (void))))))) (set! kM50e1@kM4f81@parse-and-add-library-path kM4f81@parse-and-add-library-path) (set! kM4f83@for-each-with-index (lambda (kM4ffc@proc kM4ffd@lst) (letrec ((kM5000@loop (lambda (kM5002@i kM5003@lst) (if (null? kM5003@lst) (if '#f '#f (void)) (begin (kM4ffc@proc kM5002@i (car kM5003@lst)) (kM5000@loop (+ kM5002@i '1) (cdr kM5003@lst))))))) (kM5000@loop '1 kM4ffd@lst)))) (set! kM50e2@kM4f83@for-each-with-index kM4f83@for-each-with-index) (set! kM4f85@rpad (lambda (kM5006@str kM5007@pad kM5008@n) (let ((kM500c@rest (- kM5008@n (string-length (format '"~a" kM5006@str))))) (let kM5012@loop ((kM500e@rest kM500c@rest) (kM500f@ret (format '"~a" kM5006@str))) (if (<= kM500e@rest '0) kM500f@ret (kM5012@loop (- kM500e@rest '1) (string-append kM500f@ret kM5007@pad))))))) (set! kM50e3@kM4f85@rpad kM4f85@rpad) (set! kM4f87@condition-printer (lambda (kM5014@e kM5015@port) (let ((kM5019@max-condition-len '#f)) (begin (set! kM5019@max-condition-len (apply max (map (lambda (kM502a@c) (string-length (symbol->string (record-type-name (record-rtd kM502a@c))))) (simple-conditions kM5014@e)))) (begin (display '" Condition components:\n" kM5015@port) (kM4f83@for-each-with-index (lambda (kM501a@i kM501b@x) (let ((kM501e@rtd (record-rtd kM501b@x)) (kM501f@fields-alist (kM4f89@record->field-alist kM501b@x))) (begin (format kM5015@port '" ~d. ~a" kM501a@i (kM4f85@rpad (symbol->string (record-type-name kM501e@rtd)) '" " kM5019@max-condition-len)) (if (null? kM501f@fields-alist) (newline kM5015@port) (void)) (let kM5026@loop ((kM5022@first '#t) (kM5023@fields-alist kM501f@fields-alist)) (if (null? kM5023@fields-alist) '() (let ((kM5028@field (car kM5023@fields-alist))) (begin (if (not kM5022@first) (display (kM4f85@rpad '"" '" " (+ '4 kM5019@max-condition-len)) kM5015@port) (void)) (display '"       " kM5015@port) (display (car kM5028@field) kM5015@port) (display '": " kM5015@port) (write (cdr kM5028@field) kM5015@port) (newline kM5015@port) (kM5026@loop '#f (cdr kM5023@fields-alist))))))))) (simple-conditions kM5014@e))))))) (set! kM50e4@kM4f87@condition-printer kM4f87@condition-printer) (set! kM4f89@record->field-alist (lambda (kM502c@r) (let ((kM502f@ref '#f)) (begin (set! kM502f@ref (lambda (kM503a@rtd kM503b@i kM503c@x) (let ((kM5040@val ((record-accessor kM503a@rtd kM503b@i) kM503c@x))) (if (symbol? kM5040@val) (ungensym kM5040@val) kM5040@val)))) (let kM5034@loop ((kM5030@ret '()) (kM5031@rtd (record-rtd kM502c@r))) (if kM5031@rtd (kM5034@loop (append kM5030@ret (kM4f8b@map-with-index (lambda (kM5036@i kM5037@field) (cons kM5037@field (kM502f@ref kM5031@rtd kM5036@i kM502c@r))) (vector->list (record-type-field-names kM5031@rtd)))) (record-type-parent kM5031@rtd)) kM5030@ret)))))) (set! kM50e5@kM4f89@record->field-alist kM4f89@record->field-alist) (set! kM4f8b@map-with-index (lambda (kM5042@proc kM5043@lst) (let kM504c@loop ((kM5046@i '0) (kM5047@lst kM5043@lst) (kM5048@ret '())) (if (null? kM5047@lst) (reverse kM5048@ret) (kM504c@loop (+ kM5046@i '1) (cdr kM5047@lst) (cons (kM5042@proc kM5046@i (car kM5047@lst)) kM5048@ret)))))) (set! kM50e6@kM4f8b@map-with-index kM4f8b@map-with-index) (set! kM4f8d@repl (lambda kM504e@x (let ((kM5051@rec '#f)) (begin (set! kM5051@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (kM5054@kM5052) (lambda () (with-exception-handler (lambda (kM5056@e) ((call/cc (lambda (kM5058@kM5053) (kM5054@kM5052 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? kM5056@e) (kM4f87@condition-printer kM5056@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" kM5056@e))) (kM5058@kM5053 (lambda () (raise-continuable kM5056@e)))))))))) (lambda () (let kM505e@loop ((kM505a@line (get-line (current-input-port))) (kM505b@accum '"")) (let ((kM5061@parentheses-ok? '#f) (kM5063@eval-string-print '#f)) (begin (set! kM5061@parentheses-ok? (lambda (kM5068@text) (let kM5070@loop ((kM506a@chars (string->list kM5068@text)) (kM506b@p0 '0) (kM506c@p1 '0)) (if (null? kM506a@chars) (= '0 kM506b@p0 kM506c@p1) (let ((kM5072@t (car kM506a@chars))) (if (memv kM5072@t '(#\()) (kM5070@loop (cdr kM506a@chars) (+ kM506b@p0 '1) kM506c@p1) (if (memv kM5072@t '(#\))) (kM5070@loop (cdr kM506a@chars) (- kM506b@p0 '1) kM506c@p1) (if (memv kM5072@t '(#\[)) (kM5070@loop (cdr kM506a@chars) kM506b@p0 (+ kM506c@p1 '1)) (if (memv kM5072@t '(#\])) (kM5070@loop (cdr kM506a@chars) kM506b@p0 (- kM506c@p1 '1)) (kM5070@loop (cdr kM506a@chars) kM506b@p0 kM506c@p1)))))))))) (set! kM5063@eval-string-print (lambda (kM5066@text) (if (not (or (string=? '"\n" kM5066@text) (= '0 (string-length kM5066@text)))) (write (kM4f9b@eval-top-level (call-with-port (open-string-input-port kM5066@text) read))) (void)))) (if (eof-object? kM505a@line) (begin (kM5063@eval-string-print kM505b@accum) (exit)) (let ((kM5064@current (string-append kM505b@accum kM505a@line))) (if (kM5061@parentheses-ok? kM5064@current) (kM5063@eval-string-print kM5064@current) (kM505e@loop (get-line (current-input-port)) kM5064@current))))))))))))) (newline) (kM5051@rec)))) (kM5051@rec))))) (set! kM50e7@kM4f8d@repl kM4f8d@repl) (set! kM4f8f@trace-printer (kM29ba@kM2899@make-parameter write)) (set! kM50e8@kM4f8f@trace-printer kM4f8f@trace-printer) (set! kM4f91@command-line (kM29ba@kM2899@make-parameter (get-command-line))) (set! kM50e9@kM4f91@command-line kM4f91@command-line) (set! kM4f93@local-library-path (lambda (kM5074@filename) (kM2c74@kM2ab0@library-path))) (set! kM50ea@kM4f93@local-library-path kM4f93@local-library-path) (set! kM4f95@load/args (lambda (kM5076@filename . kM5078@args) (begin (apply kM4fa5@load-r6rs-top-level kM5076@filename 'load kM5078@args) (void)))) (set! kM50eb@kM4f95@load/args kM4f95@load/args) (set! kM4f97@load (lambda (kM507a@filename) (begin (apply kM4fa5@load-r6rs-top-level kM507a@filename 'load (kM4f91@command-line)) (void)))) (set! kM50ec@kM4f97@load kM4f97@load) (set! kM4f99@ironscheme-build (lambda () (kM4f97@load '"ironscheme-buildscript.ss"))) (set! kM50ed@kM4f99@ironscheme-build kM4f99@ironscheme-build) (set! kM4f9b@eval-top-level (lambda (kM507c@x) (kM4ba1@kM3137@eval kM507c@x (kM4bb8@kM3165@interaction-environment)))) (set! kM50ee@kM4f9b@eval-top-level kM4f9b@eval-top-level) (set! kM4f9d@compile-system-libraries (lambda () (kM4f9b@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! kM50ef@kM4f9d@compile-system-libraries kM4f9d@compile-system-libraries) (set! kM4f9f@compile (lambda (kM507e@filename) (kM4fa5@load-r6rs-top-level kM507e@filename 'compile))) (set! kM50f0@kM4f9f@compile kM4f9f@compile) (set! kM4fa1@compile->closure (lambda (kM5080@filename) (kM4fa5@load-r6rs-top-level kM5080@filename 'closure))) (set! kM50f1@kM4fa1@compile->closure kM4fa1@compile->closure) (set! kM4fa3@pre-compile-r6rs-file (lambda (kM5082@filename) (kM4fa5@load-r6rs-top-level kM5082@filename 'compile))) (set! kM50f2@kM4fa3@pre-compile-r6rs-file kM4fa3@pre-compile-r6rs-file) (set! kM4fa5@load-r6rs-top-level (lambda (kM5084@filename kM5085@how . kM5088@args) (begin (kM2c74@kM2ab0@library-path (kM4f93@local-library-path kM5084@filename)) (let ((kM508a@x* (with-input-from-file kM5084@filename (lambda () (let kM508c@f () (let ((kM508e@x (kM29ad@kM287f@read-annotated))) (if (eof-object? kM508e@x) '() (cons kM508e@x (kM508c@f))))))))) (let ((kM5090@t kM5085@how)) (if (memv kM5090@t '(closure)) (kM4bb7@kM3163@pre-compile-r6rs-top-level kM508a@x*) (if (memv kM5090@t '(load)) (begin (kM4f91@command-line (cons kM5084@filename (car kM5088@args))) (kM29bb@kM289b@mosh-cache-dir (create-mosh-cache-dir)) (if (kM29bb@kM289b@mosh-cache-dir) (gensym-prefix-set! (kM4fab@prefix-inc! (string-append (kM29bb@kM289b@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (kM5092@file) ((call/cc (lambda (kM5096@kM5094) (lambda () (with-exception-handler (lambda (kM5098@c) ((call/cc (lambda (kM509a@kM5095) (kM5096@kM5094 (lambda () (if '#t '#t (kM509a@kM5095 (lambda () (raise-continuable kM5098@c)))))))))) (lambda () (delete-file (string-append (kM29bb@kM289b@mosh-cache-dir) '"/" kM5092@file))))))))) (directory-list (kM29bb@kM289b@mosh-cache-dir))) (void)) (let ((kM509c@compiled (kM4bb6@kM3161@compile-r6rs-top-level kM508a@x*))) (begin (if (and (kM29bb@kM289b@mosh-cache-dir) (not (symbol-value '%disable-acc))) (kM2c78@kM2ab8@serialize-all kM29b5@kM288f@serialize-library kM2a11@kM29ca@compile-core-expr) (void)) (kM509c@compiled)))) (if (memv kM5090@t '(compile)) (begin (kM4bb6@kM3161@compile-r6rs-top-level kM508a@x*) (kM2c78@kM2ab8@serialize-all kM29b5@kM288f@serialize-library kM2a11@kM29ca@compile-core-expr)) (if '#f '#f (void)))))))))) (set! kM50f3@kM4fa5@load-r6rs-top-level kM4fa5@load-r6rs-top-level) (set! kM4fa7@load-r6rs-top-level-sexp (lambda (kM509e@import-spec kM509f@thunk) (let ((kM50aa@kM50a3 kM2c74@kM2ab0@library-path) (kM50ab@kM50a5 kM29bb@kM289b@mosh-cache-dir) (kM50ac@kM50a7 (kM4f93@local-library-path '"")) (kM50ad@kM50a9 (create-mosh-cache-dir))) (let ((kM50b2@swap (lambda () (begin (let ((kM50b4@t (kM50aa@kM50a3))) (begin (kM50aa@kM50a3 kM50ac@kM50a7) (set! kM50ac@kM50a7 kM50b4@t))) (let ((kM50b6@t (kM50ab@kM50a5))) (begin (kM50ab@kM50a5 kM50ad@kM50a9) (set! kM50ad@kM50a9 kM50b6@t))))))) (dynamic-wind kM50b2@swap (lambda () (begin (if (kM29bb@kM289b@mosh-cache-dir) (gensym-prefix-set! (kM4fab@prefix-inc! (string-append (kM29bb@kM289b@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((kM50bc@kM50b9 kM4f91@command-line) (kM50bd@kM50bb '())) (let ((kM50c0@swap (lambda () (let ((kM50c2@t (kM50bc@kM50b9))) (begin (kM50bc@kM50b9 kM50bd@kM50bb) (set! kM50bd@kM50bb kM50c2@t)))))) (dynamic-wind kM50c0@swap (lambda () ((kM4bb6@kM3161@compile-r6rs-top-level (list (cons 'import kM509e@import-spec) (list kM509f@thunk))))) kM50c0@swap))))) kM50b2@swap))))) (set! kM50f4@kM4fa7@load-r6rs-top-level-sexp kM4fa7@load-r6rs-top-level-sexp) (set! kM4fa9@prefix-inc (lambda (kM50c4@prefix-string) (let ((kM50c6@prefix (symbol->string kM50c4@prefix-string))) (let ((kM50c8@len (string-length kM50c6@prefix))) (let kM50d0@loop ((kM50ca@i (- kM50c8@len '1)) (kM50cb@carry? '#t) (kM50cc@accum '())) (if (< kM50ca@i '0) (string->symbol (list->string (if kM50cb@carry? (cons '#\a kM50cc@accum) kM50cc@accum))) (if kM50cb@carry? (let ((kM50d2@next-integer (+ '1 (char->integer (string-ref kM50c6@prefix kM50ca@i))))) (if (= kM50d2@next-integer '123) (kM50d0@loop (- kM50ca@i '1) '#f (cons '#\A kM50cc@accum)) (if (= kM50d2@next-integer '91) (kM50d0@loop (- kM50ca@i '1) '#t (cons '#\a kM50cc@accum)) (kM50d0@loop (- kM50ca@i '1) '#f (cons (integer->char kM50d2@next-integer) kM50cc@accum))))) (kM50d0@loop (- kM50ca@i '1) '#f (cons (string-ref kM50c6@prefix kM50ca@i) kM50cc@accum))))))))) (set! kM50f5@kM4fa9@prefix-inc kM4fa9@prefix-inc) (set! kM4fab@prefix-inc! (lambda (kM50d4@file) (begin (if (not (file-exists? kM50d4@file)) (call-with-output-file kM50d4@file (lambda (kM50d6@port) (write 'd kM50d6@port))) (void)) (let ((kM50d8@prefix (call-with-input-file kM50d4@file read))) (let ((kM50da@next-prefix (kM4fa9@prefix-inc kM50d8@prefix))) (begin (call-with-port (open-file-output-port kM50d4@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (kM50dc@port) (write kM50da@next-prefix kM50dc@port))) kM50d8@prefix)))))) (set! kM50f6@kM4fab@prefix-inc! kM4fab@prefix-inc!) (begin (kM2c79@kM2aba@current-precompiled-library-loader kM29b6@kM2891@load-serialized-library) (set-symbol-value! 'load kM4f97@load) (set-symbol-value! 'pre-compile-r6rs-file kM4fa3@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs kM4f9b@eval-top-level) (set-symbol-value! 'int-env-syms kM4b98@kM3125@interaction-environment-symbols) (set-symbol-value! 'expanded2core kM2a10@kM29c8@expanded->core) (set-symbol-value! 'trace-printer kM4f8f@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (kM4fac@c) (condition (kM4ed8@kM4ce2@make-non-continuable-violation) (kM4ece@kM4cc9@make-who-condition 'raise) (kM4e92@kM4c2a@make-message-condition '"returned from non-continuable exception") (kM4ec4@kM4cae@make-irritants-condition (list kM4fac@c))))) (kM4f81@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (kM4f81@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (kM4f7f@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (kM4f7f@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (kM4f7f@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((kM4fae@prefix (lambda (kM4fb0@ext kM4fb1@ls) (append (map (lambda (kM4fb4@x) (string-append kM4fb0@ext kM4fb4@x)) kM4fb1@ls) kM4fb1@ls)))) (kM2c75@kM2ab2@library-extensions (kM4fae@prefix '".mosh" (kM2c75@kM2ab2@library-extensions)))) (current-exception-handler (lambda (kM4fb6@c) (if (condition? kM4fb6@c) (kM4f87@condition-printer kM4fb6@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" kM4fb6@c)))) (if ((call/cc (lambda (kM4fba@kM4fb8) (lambda () (with-exception-handler (lambda (kM4fbc@c) ((call/cc (lambda (kM4fbe@kM4fb9) (kM4fba@kM4fb8 (lambda () (if '#t '#f (kM4fbe@kM4fb9 (lambda () (raise-continuable kM4fbc@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (kM4fa7@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (kM4f91@command-line)) (let ((kM4fc8@kM4fc1 kM4f91@command-line) (kM4fc9@kM4fc3 kM29bb@kM289b@mosh-cache-dir) (kM4fca@kM4fc5 '()) (kM4fcb@kM4fc7 (create-mosh-cache-dir))) (let ((kM4fd0@swap (lambda () (begin (let ((kM4fd2@t (kM4fc8@kM4fc1))) (begin (kM4fc8@kM4fc1 kM4fca@kM4fc5) (set! kM4fca@kM4fc5 kM4fd2@t))) (let ((kM4fd4@t (kM4fc9@kM4fc3))) (begin (kM4fc9@kM4fc3 kM4fcb@kM4fc7) (set! kM4fcb@kM4fc7 kM4fd4@t))))))) (dynamic-wind kM4fd0@swap (lambda () (begin (if (kM29bb@kM289b@mosh-cache-dir) (gensym-prefix-set! (kM4fab@prefix-inc! (string-append (kM29bb@kM289b@mosh-cache-dir) '"/prefix.txt"))) (void)) (kM4f8d@repl))) kM4fd0@swap))) (begin (kM2c74@kM2ab0@library-path (kM4f93@local-library-path (car (kM4f91@command-line)))) (set! kM4f7d@x* (with-input-from-file (car (kM4f91@command-line)) (lambda () (let kM4fd6@f () (let ((kM4fd8@x (kM29ad@kM287f@read-annotated))) (if (eof-object? kM4fd8@x) '() (cons kM4fd8@x (kM4fd6@f)))))))) (kM4f91@command-line (cons (car (kM4f91@command-line)) (cdr (kM4f91@command-line)))) (kM29bb@kM289b@mosh-cache-dir (create-mosh-cache-dir)) (if (kM29bb@kM289b@mosh-cache-dir) (gensym-prefix-set! (kM4fab@prefix-inc! (string-append (kM29bb@kM289b@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (kM4fda@file) ((call/cc (lambda (kM4fde@kM4fdc) (lambda () (with-exception-handler (lambda (kM4fe0@c) ((call/cc (lambda (kM4fe2@kM4fdd) (kM4fde@kM4fdc (lambda () (if '#t '#t (kM4fe2@kM4fdd (lambda () (raise-continuable kM4fe0@c)))))))))) (lambda () (delete-file (string-append (kM29bb@kM289b@mosh-cache-dir) '"/" kM4fda@file))))))))) (directory-list (kM29bb@kM289b@mosh-cache-dir))) (void)) (let ((kM4fe4@compiled (kM4bb6@kM3161@compile-r6rs-top-level kM4f7d@x*))) (begin (if (and (kM29bb@kM289b@mosh-cache-dir) (not (symbol-value '%disable-acc))) (kM2c78@kM2ab8@serialize-all kM29b5@kM288f@serialize-library kM2a11@kM29ca@compile-core-expr) (void)) (kM4fe4@compiled))))))))
