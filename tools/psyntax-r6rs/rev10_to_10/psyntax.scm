;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (j907@make-gensym-counter j909@gen-sym-prefix j911@gen-sym-counter j913@gensym j915@read-annotated j917@annotation-stripped j919@annotation? j921@annotation-source j923@annotation-expression j925@scm->fasl j927@fasl-save j929@fasl-load j931@serialize-library j933@load-serialized-library j935@make-record-printer j937@compile-core j939@read-library-source-file j941@make-parameter j1041@file-options-spec) (begin (set! j907@make-gensym-counter (lambda (j1042@i) ((lambda (j1045@inc) (begin (set! j1045@inc (lambda () (begin (set! j1042@i (+ j1042@i '1)) j1042@i))) j1045@inc)) '#f))) (set! j909@gen-sym-prefix ((lambda (j1046@v) (if j1046@v (string->symbol j1046@v) 'A)) (get-environment-variable '"MOSH_GENSYM_PREFIX"))) (set! j911@gen-sym-counter (j907@make-gensym-counter '0)) (set! j913@gensym (lambda j1048@x (string->symbol (if (null? j1048@x) (format '"~a~a" j909@gen-sym-prefix (j911@gen-sym-counter)) (format '"~a~a@~a" j909@gen-sym-prefix (j911@gen-sym-counter) (car j1048@x)))))) (set! j915@read-annotated read) (set! j917@annotation-stripped (lambda (j1050@x) (j923@annotation-expression j1050@x))) (set! j919@annotation? (lambda (j1052@x) (source-info j1052@x))) (set! j921@annotation-source (lambda (j1054@x) (source-info j1054@x))) (set! j923@annotation-expression (lambda (j1056@x) (if (pair? j1056@x) (cons (car j1056@x) (cdr j1056@x)) (display '"line:46\n")))) (set! j925@scm->fasl (lambda (j1058@filename) (string-append j1058@filename '".fasl"))) (set! j927@fasl-save (lambda (j1060@filename j1061@obj) (call-with-port (open-file-output-port j1060@filename) (lambda (j1064@port) ((symbol-value 'fasl-write!) j1061@obj j1064@port))))) (set! j929@fasl-load (lambda (j1066@filename) (call-with-port (open-file-input-port j1066@filename) (symbol-value 'fasl-read!)))) (set! j931@serialize-library (lambda (j1068@filename j1069@obj) (begin (format '#t '"serialize-library ~a\n..." j1068@filename) ((lambda (j1072@expanded2core) ((lambda (j1074@compile) ((lambda (j1076@code) ((lambda (j1078@pivot) ((lambda (j1080@visit) ((lambda () (begin (set-car! j1078@pivot j1080@visit) ((lambda (j1082@pivot) ((lambda (j1084@invoke) ((lambda () (set-car! j1082@pivot j1084@invoke)))) (j1074@compile (j1072@expanded2core (car j1082@pivot))))) (cdr j1078@pivot)))))) (j1074@compile (j1072@expanded2core (car j1078@pivot))))) (cddddr (cddddr j1076@code)))) j1069@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (j1086@fasl-file) (begin (if (file-exists? j1086@fasl-file) (delete-file j1086@fasl-file) (void)) ((call/cc (lambda (j1090@j1088) (lambda () (with-exception-handler (lambda (j1092@c) ((call/cc (lambda (j1094@j1089) (j1090@j1088 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " j1068@filename) (if (file-exists? j1086@fasl-file) (delete-file j1086@fasl-file) (void)) '#f) (j1094@j1089 (lambda () (raise-continuable j1092@c)))))))))) (lambda () (begin (j927@fasl-save j1086@fasl-file j1069@obj) (display '"OK\n")))))))))) (j925@scm->fasl j1068@filename))))) (set! j933@load-serialized-library (lambda (j1096@filename j1097@obj) ((lambda (j1100@fasl-file) (if (and (file-exists? j1100@fasl-file) ((symbol-value 'file-newer?) j1100@fasl-file j1096@filename)) ((lambda (j1102@expanded2core) ((lambda (j1104@eval-compiled-core) ((lambda (j1106@code) ((lambda (j1108@pivot) ((lambda (j1110@visit) ((lambda (j1112@visit-proc) ((lambda () (begin (set-car! j1108@pivot j1112@visit-proc) ((lambda (j1114@pivot) ((lambda (j1116@invoke) ((lambda () (begin (set-car! j1114@pivot (lambda () (j1104@eval-compiled-core j1116@invoke))) (apply j1097@obj j1106@code))))) (car j1114@pivot))) (cdr j1108@pivot)) '#t)))) (lambda () (j1104@eval-compiled-core j1110@visit)))) (car j1108@pivot))) (cddddr (cddddr j1106@code)))) (j929@fasl-load j1100@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (j925@scm->fasl j1096@filename)))) (set! j935@make-record-printer (lambda (j1118@name j1119@printer) (lambda j1122@x (begin (display '"record printer") (for-each display j1122@x))))) (set! j937@compile-core (lambda j1124@x (apply error 'comile-core '"not implementated" j1124@x))) (set! j939@read-library-source-file (lambda (j1126@file-name) (with-input-from-file j1126@file-name j915@read-annotated))) (set! j941@make-parameter (lambda j1142 ((lambda (j1143) (if (= j1143 '1) (apply (lambda (j1128@x) (j941@make-parameter j1128@x (lambda (j1130@x) j1130@x))) j1142) (if (= j1143 '2) (apply (lambda (j1132@x j1133@fender) ((lambda (j1136@x) (lambda j1140 ((lambda (j1141) (if (= j1141 '0) (apply (lambda () j1136@x) j1140) (if (= j1141 '1) (apply (lambda (j1138@v) (set! j1136@x (j1133@fender j1138@v))) j1140) (error 'apply '"invalid arg count")))) (length j1140)))) (j1133@fender j1132@x))) j1142) (error 'apply '"invalid arg count")))) (length j1142)))) (set! j1041@file-options-spec (lambda (j1144@x) j1144@x)) (begin (set! j1164@j1041@file-options-spec j1041@file-options-spec) (set! j1163@j941@make-parameter j941@make-parameter) (set! j1162@j939@read-library-source-file j939@read-library-source-file) (set! j1161@j937@compile-core j937@compile-core) (set! j1160@j935@make-record-printer j935@make-record-printer) (set! j1159@j933@load-serialized-library j933@load-serialized-library) (set! j1158@j931@serialize-library j931@serialize-library) (set! j1157@j929@fasl-load j929@fasl-load) (set! j1156@j927@fasl-save j927@fasl-save) (set! j1155@j925@scm->fasl j925@scm->fasl) (set! j1154@j923@annotation-expression j923@annotation-expression) (set! j1153@j921@annotation-source j921@annotation-source) (set! j1152@j919@annotation? j919@annotation?) (set! j1151@j917@annotation-stripped j917@annotation-stripped) (set! j1150@j915@read-annotated j915@read-annotated) (set! j1149@j913@gensym j913@gensym) (set! j1148@j911@gen-sym-counter j911@gen-sym-counter) (set! j1147@j909@gen-sym-prefix j909@gen-sym-prefix) (set! j1146@j907@make-gensym-counter j907@make-gensym-counter)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (j1169@current-primitive-locations j1171@mutable? j1173@rewriter j1175@expanded->core j1177@compile-core-expr j1179@pretty-print j1181@compile-core-expr-to-port) (begin (set! j1169@current-primitive-locations (j1163@j941@make-parameter (lambda (j1182@x) '#f) (lambda (j1184@p) j1184@p))) (set! j1171@mutable? (lambda (j1186@x) (or (pair? j1186@x) (vector? j1186@x) (hashtable? j1186@x)))) (set! j1173@rewriter (lambda (j1188@quote-hack?) ((lambda (j1191@f) (begin (set! j1191@f (lambda (j1192@x) (if (pair? j1192@x) ((lambda (j1194@t) (if (memv j1194@t '(quote)) (if (and j1188@quote-hack? (j1171@mutable? (cadr j1192@x))) ((lambda (j1196@g) (begin (set-symbol-value! j1196@g (cadr j1192@x)) j1196@g)) (j1149@j913@gensym)) j1192@x) (if (memv j1194@t '(case-lambda)) (cons 'case-lambda (map (lambda (j1198@x) (cons (car j1198@x) (map j1191@f (cdr j1198@x)))) (cdr j1192@x))) (if (memv j1194@t '(lambda)) (cons* 'lambda (cadr j1192@x) (map j1191@f (cddr j1192@x))) (if (memv j1194@t '(letrec)) ((lambda (j1200@bindings j1201@body*) ((lambda (j1204@lhs* j1205@rhs*) (cons* 'letrec (map list j1204@lhs* (map j1191@f j1205@rhs*)) (map j1191@f j1201@body*))) (map car j1200@bindings) (map cadr j1200@bindings))) (cadr j1192@x) (cddr j1192@x)) (if (memv j1194@t '(letrec*)) ((lambda (j1208@bindings j1209@body*) ((lambda (j1212@lhs* j1213@rhs*) (cons* 'letrec* (map list j1212@lhs* (map j1191@f j1213@rhs*)) (map j1191@f j1209@body*))) (map car j1208@bindings) (map cadr j1208@bindings))) (cadr j1192@x) (cddr j1192@x)) (if (memv j1194@t '(library-letrec*)) ((lambda (j1216@name j1217@x) ((lambda (j1220@bindings j1221@body*) ((lambda (j1224@lhs* j1225@lhs** j1226@rhs*) (cons* 'library-letrec* j1216@name (map list j1224@lhs* j1225@lhs** (map j1191@f j1226@rhs*)) (map j1191@f j1221@body*))) (map car j1220@bindings) (map cadr j1220@bindings) (map caddr j1220@bindings))) (cadr j1217@x) (cddr j1217@x))) (cadr j1192@x) (cdr j1192@x)) (if (memv j1194@t '(begin)) (cons 'begin (map j1191@f (cdr j1192@x))) (if (memv j1194@t '(set!)) (list 'set! (cadr j1192@x) (j1191@f (caddr j1192@x))) (if (memv j1194@t '(primitive)) ((lambda (j1230@op) ((lambda (j1232@t) (if j1232@t ((lambda (j1234@loc) j1234@loc) j1232@t) j1230@op)) ((j1169@current-primitive-locations) j1230@op))) (cadr j1192@x)) (if (memv j1194@t '(define)) j1192@x (if (list? j1192@x) (map j1191@f j1192@x) (error 'rewrite '"invalid form ~s ~s" j1192@x (list? j1192@x)))))))))))))) (car j1192@x)) j1192@x))) j1191@f)) '#f))) (set! j1175@expanded->core (lambda (j1236@x) ((j1173@rewriter '#f) j1236@x))) (set! j1177@compile-core-expr (lambda (j1238@x) ((j1173@rewriter '#f) j1238@x))) (set! j1179@pretty-print write) (set! j1181@compile-core-expr-to-port (lambda (j1240@x j1241@p) (j1179@pretty-print ((j1173@rewriter '#f) j1240@x) j1241@p))) (begin (set! j1250@j1181@compile-core-expr-to-port j1181@compile-core-expr-to-port) (set! j1249@j1179@pretty-print j1179@pretty-print) (set! j1248@j1177@compile-core-expr j1177@compile-core-expr) (set! j1247@j1175@expanded->core j1175@expanded->core) (set! j1246@j1173@rewriter j1173@rewriter) (set! j1245@j1171@mutable? j1171@mutable?) (set! j1244@j1169@current-primitive-locations j1169@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (j1329@make-collection j1331@current-library-collection j1337@j1332 j1339@j1334 j1341@j1333 j1344@library? j1346@make-library j1348@library-id j1350@library-name j1352@library-version j1354@library-imp* j1356@library-vis* j1358@library-inv* j1360@library-subst j1362@library-env j1364@library-visit-state j1366@library-invoke-state j1368@library-visit-code j1370@library-invoke-code j1372@library-visible? j1374@library-source-file-name j1376@set-library-id! j1378@set-library-name! j1380@set-library-version! j1382@set-library-imp*! j1384@set-library-vis*! j1386@set-library-inv*! j1388@set-library-subst! j1390@set-library-env! j1392@set-library-visit-state! j1394@set-library-invoke-state! j1396@set-library-visit-code! j1398@set-library-invoke-code! j1400@set-library-visible?! j1402@set-library-source-file-name! j1404@rp j1406@find-dependencies j1408@find-library-by j1410@library-path j1412@library-extensions j1414@library-name->file-name j1416@file-locator j1418@serialize-all j1420@current-precompiled-library-loader j1422@try-load-from-file j1424@library-loader j1426@current-library-expander j1428@external-pending-libraries j1430@find-external-library j1432@find-library-by-name j1434@library-exists? j1436@find-library-by-spec/die j1438@label->binding-table j1440@install-library-record j1442@install-library j1444@imported-label->binding j1446@invoke-library j1448@visit-library j1450@invoke-library-by-spec j1452@installed-libraries j1454@library-spec) (begin (set! j1329@make-collection (lambda () ((lambda (j1455@set) ((lambda (j1458@set-cons) (begin (set! j1458@set-cons (lambda (j1463@x j1464@ls) (if (memq j1463@x j1464@ls) j1464@ls (cons j1463@x j1464@ls)))) (lambda j1461 ((lambda (j1462) (if (= j1462 '0) (apply (lambda () j1455@set) j1461) (if (= j1462 '1) (apply (lambda (j1459@x) (set! j1455@set (j1458@set-cons j1459@x j1455@set))) j1461) (error 'apply '"invalid arg count")))) (length j1461))))) '#f)) '()))) (set! j1331@current-library-collection (j1163@j941@make-parameter (j1329@make-collection) (lambda (j1467@x) (begin (if (not (procedure? j1467@x)) (assertion-violation 'current-library-collection '"not a procedure" j1467@x) (void)) j1467@x)))) (set! j1337@j1332 (make-record-type-descriptor 'library '#f 'j1335 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! j1339@j1334 '#f) (set! j1341@j1333 (make-record-constructor-descriptor j1337@j1332 '#f j1339@j1334)) (set! j1344@library? (record-predicate j1337@j1332)) (set! j1346@make-library (record-constructor j1341@j1333)) (set! j1348@library-id (record-accessor j1337@j1332 '0)) (set! j1350@library-name (record-accessor j1337@j1332 '1)) (set! j1352@library-version (record-accessor j1337@j1332 '2)) (set! j1354@library-imp* (record-accessor j1337@j1332 '3)) (set! j1356@library-vis* (record-accessor j1337@j1332 '4)) (set! j1358@library-inv* (record-accessor j1337@j1332 '5)) (set! j1360@library-subst (record-accessor j1337@j1332 '6)) (set! j1362@library-env (record-accessor j1337@j1332 '7)) (set! j1364@library-visit-state (record-accessor j1337@j1332 '8)) (set! j1366@library-invoke-state (record-accessor j1337@j1332 '9)) (set! j1368@library-visit-code (record-accessor j1337@j1332 '10)) (set! j1370@library-invoke-code (record-accessor j1337@j1332 '11)) (set! j1372@library-visible? (record-accessor j1337@j1332 '12)) (set! j1374@library-source-file-name (record-accessor j1337@j1332 '13)) (set! j1376@set-library-id! (record-mutator j1337@j1332 '0)) (set! j1378@set-library-name! (record-mutator j1337@j1332 '1)) (set! j1380@set-library-version! (record-mutator j1337@j1332 '2)) (set! j1382@set-library-imp*! (record-mutator j1337@j1332 '3)) (set! j1384@set-library-vis*! (record-mutator j1337@j1332 '4)) (set! j1386@set-library-inv*! (record-mutator j1337@j1332 '5)) (set! j1388@set-library-subst! (record-mutator j1337@j1332 '6)) (set! j1390@set-library-env! (record-mutator j1337@j1332 '7)) (set! j1392@set-library-visit-state! (record-mutator j1337@j1332 '8)) (set! j1394@set-library-invoke-state! (record-mutator j1337@j1332 '9)) (set! j1396@set-library-visit-code! (record-mutator j1337@j1332 '10)) (set! j1398@set-library-invoke-code! (record-mutator j1337@j1332 '11)) (set! j1400@set-library-visible?! (record-mutator j1337@j1332 '12)) (set! j1402@set-library-source-file-name! (record-mutator j1337@j1332 '13)) (set! j1404@rp (j1160@j935@make-record-printer 'library (lambda (j1469@x j1470@p j1471@wr) (begin (if (not (j1344@library? j1469@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (j1352@library-version j1469@x)) (j1350@library-name j1469@x) (append (j1350@library-name j1469@x) (list (j1352@library-version j1469@x))))) j1470@p))))) (set! j1406@find-dependencies (lambda (j1475@ls) (if (null? j1475@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! j1408@find-library-by (lambda (j1477@pred) ((letrec ((j1479@f (lambda (j1481@ls) (if (null? j1481@ls) '#f (if (j1477@pred (car j1481@ls)) (car j1481@ls) (j1479@f (cdr j1481@ls))))))) j1479@f) ((j1331@current-library-collection))))) (set! j1410@library-path (j1163@j941@make-parameter '(".") (lambda (j1483@x) (if (and (list? j1483@x) (for-all string? j1483@x)) (map (lambda (j1485@x) j1485@x) j1483@x) (assertion-violation 'library-path '"not a list of strings" j1483@x))))) (set! j1412@library-extensions (j1163@j941@make-parameter '(".sls" ".ss" ".scm") (lambda (j1487@x) (if (and (list? j1487@x) (for-all string? j1487@x)) (map (lambda (j1489@x) j1489@x) j1487@x) (assertion-violation 'library-extensions '"not a list of strings" j1487@x))))) (set! j1414@library-name->file-name (lambda (j1491@x) (call-with-values (lambda () (open-string-output-port)) (lambda (j1495@j1493@p j1496@j1494@extract) ((lambda (j1499@extract j1500@p) ((lambda (j1504@display-hex) (begin (set! j1504@display-hex (lambda (j1513@n) (if (<= '0 j1513@n '9) (display j1513@n j1500@p) (display (integer->char (+ (char->integer '#\a) (- j1513@n '10))) j1500@p)))) (begin ((letrec ((j1505@f (lambda (j1507@ls) (if (not (null? j1507@ls)) (begin (display '"/" j1500@p) (for-each (lambda (j1509@c) (if (or (char<=? '#\a j1509@c '#\z) (char<=? '#\A j1509@c '#\Z) (char<=? '#\0 j1509@c '#\9) (memv j1509@c '(#\- #\. #\_ #\~))) (display j1509@c j1500@p) (begin (display '"%" j1500@p) ((lambda (j1511@n) (begin (j1504@display-hex (quotient j1511@n '16)) (j1504@display-hex (remainder j1511@n '16)))) (char->integer j1509@c))))) (string->list (symbol->string (car j1507@ls)))) (j1505@f (cdr j1507@ls))) (void))))) j1505@f) j1491@x) (j1499@extract)))) '#f)) j1496@j1494@extract j1495@j1493@p))))) (set! j1416@file-locator (j1163@j941@make-parameter (lambda (j1515@x) ((lambda (j1517@str) ((letrec ((j1519@f (lambda (j1521@ls j1522@exts j1523@failed-list) (if (null? j1521@ls) ((lambda () ((lambda (j1535@j1530 j1537@j1532 j1539@j1531 j1542@j1529 j1544@make-library-resolution-condition j1546@j1527 j1548@j1528 j1550@library-resolution-condition? j1552@condition-library j1554@condition-files) (begin (set! j1535@j1530 (make-record-type-descriptor '&library-resolution j10071@j9386@&condition-rtd 'j1533 '#f '#f '#((immutable library) (immutable files)))) (set! j1537@j1532 '#f) (set! j1539@j1531 (make-record-constructor-descriptor j1535@j1530 j10072@j9388@&condition-rcd j1537@j1532)) (set! j1542@j1529 (record-predicate j1535@j1530)) (set! j1544@make-library-resolution-condition (record-constructor j1539@j1531)) (set! j1546@j1527 (record-accessor j1535@j1530 '0)) (set! j1548@j1528 (record-accessor j1535@j1530 '1)) (set! j1550@library-resolution-condition? (condition-predicate j1535@j1530)) (set! j1552@condition-library (condition-accessor j1535@j1530 j1546@j1527)) (set! j1554@condition-files (condition-accessor j1535@j1530 j1548@j1528)) (raise (condition (j10103@j9536@make-error) (j10137@j9626@make-who-condition 'expander) (j10077@j9469@make-message-condition '"cannot locate library in library-path") (j1544@make-library-resolution-condition j1515@x (reverse j1523@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? j1522@exts) (j1519@f (cdr j1521@ls) (j1412@library-extensions) j1523@failed-list) ((lambda (j1555@name) (if (file-exists? j1555@name) j1555@name (j1519@f j1521@ls (cdr j1522@exts) (cons j1555@name j1523@failed-list)))) (string-append (car j1521@ls) j1517@str (car j1522@exts)))))))) j1519@f) (j1410@library-path) (j1412@library-extensions) '())) (j1414@library-name->file-name j1515@x))) (lambda (j1557@f) (if (procedure? j1557@f) j1557@f (assertion-violation 'file-locator '"not a procedure" j1557@f))))) (set! j1418@serialize-all (lambda (j1559@serialize j1560@compile) ((lambda (j1564@library-desc) (begin (set! j1564@library-desc (lambda (j1567@x) (list (j1348@library-id j1567@x) (j1350@library-name j1567@x)))) (for-each (lambda (j1565@x) (if (j1374@library-source-file-name j1565@x) (j1559@serialize (j1374@library-source-file-name j1565@x) (list (j1348@library-id j1565@x) (j1350@library-name j1565@x) (j1352@library-version j1565@x) (map j1564@library-desc (j1354@library-imp* j1565@x)) (map j1564@library-desc (j1356@library-vis* j1565@x)) (map j1564@library-desc (j1358@library-inv* j1565@x)) (j1360@library-subst j1565@x) (j1362@library-env j1565@x) (j1560@compile (j1368@library-visit-code j1565@x)) (j1560@compile (j1370@library-invoke-code j1565@x)) (j1372@library-visible? j1565@x))) (void))) ((j1331@current-library-collection))))) '#f))) (set! j1420@current-precompiled-library-loader (j1163@j941@make-parameter (lambda (j1569@filename j1570@sk) '#f))) (set! j1422@try-load-from-file (lambda (j1573@filename) ((j1420@current-precompiled-library-loader) j1573@filename (lambda j1611 ((lambda (j1612) (if (= j1612 '11) (apply (lambda (j1575@id j1576@name j1577@ver j1578@imp* j1579@vis* j1580@inv* j1581@exp-subst j1582@exp-env j1583@visit-proc j1584@invoke-proc j1585@visible?) ((letrec ((j1597@f (lambda (j1599@deps) (if (null? j1599@deps) (begin (j1442@install-library j1575@id j1576@name j1577@ver j1578@imp* j1579@vis* j1580@inv* j1581@exp-subst j1582@exp-env j1583@visit-proc j1584@invoke-proc '#f '#f j1585@visible? '#f) '#t) ((lambda (j1601@d) ((lambda (j1603@label j1604@dname) ((lambda (j1607@l) (if (and (j1344@library? j1607@l) (eq? j1603@label (j1348@library-id j1607@l))) (j1597@f (cdr j1599@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" j1576@name j1604@dname j1573@filename j1607@l j1603@label (j1348@library-id j1607@l)) '#f))) (j1432@find-library-by-name j1604@dname))) (car j1601@d) (cadr j1601@d))) (car j1599@deps)))))) j1597@f) (append j1578@imp* j1579@vis* j1580@inv*))) j1611) (if (>= j1612 '0) (apply (lambda j1609@others '#f) j1611) (error 'apply '"invalid arg count")))) (length j1611)))))) (set! j1424@library-loader (j1163@j941@make-parameter (lambda (j1613@x) ((lambda (j1615@file-name) (if (not j1615@file-name) (assertion-violation '#f '"cannot file library" j1613@x) (or (j1422@try-load-from-file j1615@file-name) ((j1426@current-library-expander) (j1162@j939@read-library-source-file j1615@file-name) j1615@file-name (lambda (j1617@name) (if (not (fast-equal? j1617@name j1613@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (j1621@j1619@p j1622@j1620@e) ((lambda (j1625@e j1626@p) (begin (display '"expected to find library " j1626@p) (write j1613@x j1626@p) (display '" in file " j1626@p) (display j1615@file-name j1626@p) (display '", found " j1626@p) (write j1617@name j1626@p) (display '" instead" j1626@p) (j1625@e))) j1622@j1620@e j1621@j1619@p)))) (void))))))) ((j1416@file-locator) j1613@x))) (lambda (j1629@f) (if (procedure? j1629@f) j1629@f (assertion-violation 'library-locator '"not a procedure" j1629@f))))) (set! j1426@current-library-expander (j1163@j941@make-parameter (lambda (j1631@x) (assertion-violation 'library-expander '"not initialized")) (lambda (j1633@f) (if (procedure? j1633@f) j1633@f (assertion-violation 'library-expander '"not a procedure" j1633@f))))) (set! j1428@external-pending-libraries (j1163@j941@make-parameter '())) (set! j1430@find-external-library (lambda (j1635@name) (begin (if (member j1635@name (j1428@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" j1635@name) (void)) ((lambda (j1639@j1637@external-pending-libraries j1640@j1638@external-pending-libraries) ((lambda (j1643@swap) (dynamic-wind j1643@swap (lambda () (begin ((j1424@library-loader) j1635@name) (or (j1408@find-library-by (lambda (j1645@x) (fast-equal? (j1350@library-name j1645@x) j1635@name))) (assertion-violation '#f '"handling external library did not yield the correct library" j1635@name)))) j1643@swap)) (lambda () ((lambda (j1647@t) (begin (j1639@j1637@external-pending-libraries j1640@j1638@external-pending-libraries) (set! j1640@j1638@external-pending-libraries j1647@t))) (j1639@j1637@external-pending-libraries))))) j1428@external-pending-libraries (cons j1635@name (j1428@external-pending-libraries)))))) (set! j1432@find-library-by-name (lambda (j1649@name) (or (j1408@find-library-by (lambda (j1651@x) (fast-equal? (j1350@library-name j1651@x) j1649@name))) (j1430@find-external-library j1649@name)))) (set! j1434@library-exists? (lambda (j1653@name) (and (j1408@find-library-by (lambda (j1655@x) (fast-equal? (j1350@library-name j1655@x) j1653@name))) '#t))) (set! j1436@find-library-by-spec/die (lambda (j1657@spec) ((lambda (j1659@id) (or (j1408@find-library-by (lambda (j1661@x) (eq? j1659@id (j1348@library-id j1661@x)))) (assertion-violation '#f '"cannot find library with required spec" j1657@spec))) (car j1657@spec)))) (set! j1438@label->binding-table (make-eq-hashtable)) (set! j1440@install-library-record (lambda (j1663@lib) (begin ((lambda (j1665@exp-env) (for-each (lambda (j1667@x) ((lambda (j1669@label j1670@binding) ((lambda (j1673@binding) (begin (if (hashtable-ref j1438@label->binding-table j1669@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" j1669@label (hashtable-ref j1438@label->binding-table j1669@label '#f) j1673@binding) (exit)) (void)) (hashtable-set! j1438@label->binding-table j1669@label j1673@binding))) ((lambda (j1675@t) (if (memv j1675@t '(global)) (cons 'global (cons j1663@lib (cdr j1670@binding))) (if (memv j1675@t '(global-macro)) (cons 'global-macro (cons j1663@lib (cdr j1670@binding))) (if (memv j1675@t '(global-macro!)) (cons 'global-macro! (cons j1663@lib (cdr j1670@binding))) j1670@binding)))) (car j1670@binding)))) (car j1667@x) (cdr j1667@x))) j1665@exp-env)) (j1362@library-env j1663@lib)) ((j1331@current-library-collection) j1663@lib)))) (set! j1442@install-library (lambda (j1677@id j1678@name j1679@ver j1680@imp* j1681@vis* j1682@inv* j1683@exp-subst j1684@exp-env j1685@visit-proc j1686@invoke-proc j1687@visit-code j1688@invoke-code j1689@visible? j1690@source-file-name) ((lambda (j1705@imp-lib* j1706@vis-lib* j1707@inv-lib*) (begin (if (not (and (symbol? j1677@id) (list? j1678@name) (list? j1679@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" j1677@id j1678@name j1679@ver) (void)) (if (j1434@library-exists? j1678@name) (assertion-violation 'install-library '"library is already installed" j1678@name) (void)) ((lambda (j1711@lib) (j1440@install-library-record j1711@lib)) (j1346@make-library j1677@id j1678@name j1679@ver j1705@imp-lib* j1706@vis-lib* j1707@inv-lib* j1683@exp-subst j1684@exp-env j1685@visit-proc j1686@invoke-proc j1687@visit-code j1688@invoke-code j1689@visible? j1690@source-file-name)))) (map j1436@find-library-by-spec/die j1680@imp*) (map j1436@find-library-by-spec/die j1681@vis*) (map j1436@find-library-by-spec/die j1682@inv*)))) (set! j1444@imported-label->binding (lambda (j1713@lab) (hashtable-ref j1438@label->binding-table j1713@lab '#f))) (set! j1446@invoke-library (lambda (j1715@lib) ((lambda (j1717@invoke) (if (procedure? j1717@invoke) (begin (j1394@set-library-invoke-state! j1715@lib (lambda () (assertion-violation 'invoke '"circularity detected" j1715@lib))) (for-each j1446@invoke-library (j1358@library-inv* j1715@lib)) (j1394@set-library-invoke-state! j1715@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" j1715@lib))) (j1717@invoke) (j1394@set-library-invoke-state! j1715@lib '#t)) (void))) (j1366@library-invoke-state j1715@lib)))) (set! j1448@visit-library (lambda (j1719@lib) ((lambda (j1721@visit) (if (procedure? j1721@visit) (begin (j1392@set-library-visit-state! j1719@lib (lambda () (assertion-violation 'visit '"circularity detected" j1719@lib))) (for-each j1446@invoke-library (j1356@library-vis* j1719@lib)) (j1392@set-library-visit-state! j1719@lib (lambda () (assertion-violation 'invoke '"first visit did not return" j1719@lib))) (j1721@visit) (j1392@set-library-visit-state! j1719@lib '#t)) (void))) (j1364@library-visit-state j1719@lib)))) (set! j1450@invoke-library-by-spec (lambda (j1723@spec) (j1446@invoke-library (j1436@find-library-by-spec/die j1723@spec)))) (set! j1452@installed-libraries (lambda j1731 ((lambda (j1732) (if (= j1732 '1) (apply (lambda (j1725@all?) ((letrec ((j1727@f (lambda (j1729@ls) (if (null? j1729@ls) '() (if (or j1725@all? (j1372@library-visible? (car j1729@ls))) (cons (car j1729@ls) (j1727@f (cdr j1729@ls))) (j1727@f (cdr j1729@ls))))))) j1727@f) ((j1331@current-library-collection)))) j1731) (if (= j1732 '0) (apply (lambda () (j1452@installed-libraries '#f)) j1731) (error 'apply '"invalid arg count")))) (length j1731)))) (set! j1454@library-spec (lambda (j1733@x) (begin (if (not (j1344@library? j1733@x)) (assertion-violation 'library-spec '"not a library" j1733@x) (void)) (list (j1348@library-id j1733@x) (j1350@library-name j1733@x) (j1352@library-version j1733@x))))) (begin (set! j1795@j1454@library-spec j1454@library-spec) (set! j1794@j1452@installed-libraries j1452@installed-libraries) (set! j1793@j1450@invoke-library-by-spec j1450@invoke-library-by-spec) (set! j1792@j1448@visit-library j1448@visit-library) (set! j1791@j1446@invoke-library j1446@invoke-library) (set! j1790@j1444@imported-label->binding j1444@imported-label->binding) (set! j1789@j1442@install-library j1442@install-library) (set! j1788@j1440@install-library-record j1440@install-library-record) (set! j1787@j1438@label->binding-table j1438@label->binding-table) (set! j1786@j1436@find-library-by-spec/die j1436@find-library-by-spec/die) (set! j1785@j1434@library-exists? j1434@library-exists?) (set! j1784@j1432@find-library-by-name j1432@find-library-by-name) (set! j1783@j1430@find-external-library j1430@find-external-library) (set! j1782@j1428@external-pending-libraries j1428@external-pending-libraries) (set! j1781@j1426@current-library-expander j1426@current-library-expander) (set! j1780@j1424@library-loader j1424@library-loader) (set! j1779@j1422@try-load-from-file j1422@try-load-from-file) (set! j1778@j1420@current-precompiled-library-loader j1420@current-precompiled-library-loader) (set! j1777@j1418@serialize-all j1418@serialize-all) (set! j1776@j1416@file-locator j1416@file-locator) (set! j1775@j1414@library-name->file-name j1414@library-name->file-name) (set! j1774@j1412@library-extensions j1412@library-extensions) (set! j1773@j1410@library-path j1410@library-path) (set! j1772@j1408@find-library-by j1408@find-library-by) (set! j1771@j1406@find-dependencies j1406@find-dependencies) (set! j1770@j1404@rp j1404@rp) (set! j1769@j1402@set-library-source-file-name! j1402@set-library-source-file-name!) (set! j1768@j1400@set-library-visible?! j1400@set-library-visible?!) (set! j1767@j1398@set-library-invoke-code! j1398@set-library-invoke-code!) (set! j1766@j1396@set-library-visit-code! j1396@set-library-visit-code!) (set! j1765@j1394@set-library-invoke-state! j1394@set-library-invoke-state!) (set! j1764@j1392@set-library-visit-state! j1392@set-library-visit-state!) (set! j1763@j1390@set-library-env! j1390@set-library-env!) (set! j1762@j1388@set-library-subst! j1388@set-library-subst!) (set! j1761@j1386@set-library-inv*! j1386@set-library-inv*!) (set! j1760@j1384@set-library-vis*! j1384@set-library-vis*!) (set! j1759@j1382@set-library-imp*! j1382@set-library-imp*!) (set! j1758@j1380@set-library-version! j1380@set-library-version!) (set! j1757@j1378@set-library-name! j1378@set-library-name!) (set! j1756@j1376@set-library-id! j1376@set-library-id!) (set! j1755@j1374@library-source-file-name j1374@library-source-file-name) (set! j1754@j1372@library-visible? j1372@library-visible?) (set! j1753@j1370@library-invoke-code j1370@library-invoke-code) (set! j1752@j1368@library-visit-code j1368@library-visit-code) (set! j1751@j1366@library-invoke-state j1366@library-invoke-state) (set! j1750@j1364@library-visit-state j1364@library-visit-state) (set! j1749@j1362@library-env j1362@library-env) (set! j1748@j1360@library-subst j1360@library-subst) (set! j1747@j1358@library-inv* j1358@library-inv*) (set! j1746@j1356@library-vis* j1356@library-vis*) (set! j1745@j1354@library-imp* j1354@library-imp*) (set! j1744@j1352@library-version j1352@library-version) (set! j1743@j1350@library-name j1350@library-name) (set! j1742@j1348@library-id j1348@library-id) (set! j1741@j1346@make-library j1346@make-library) (set! j1740@j1344@library? j1344@library?) (set! j1739@j1341@j1333 j1341@j1333) (set! j1738@j1339@j1334 j1339@j1334) (set! j1737@j1337@j1332 j1337@j1332) (set! j1736@j1331@current-library-collection j1331@current-library-collection) (set! j1735@j1329@make-collection j1329@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (j1798@build-global-define j1911@build-lambda j1913@build-case-lambda j1915@build-let j1961@build-sequence j1963@build-void j1965@build-letrec j1967@build-letrec* j1969@build-library-letrec* j1971@build-receive) (begin (set! j1798@build-global-define (lambda (j1972@x) (j1963@build-void))) (set! j1911@build-lambda (lambda (j1974@ae j1975@vars j1976@exp) (list 'lambda j1975@vars j1976@exp))) (set! j1913@build-case-lambda (lambda (j1980@ae j1981@vars* j1982@exp*) ((lambda (j1987@build-error j1989@build-pred j1991@build-apply j1993@expand-case-lambda) (begin (set! j1987@build-error (lambda (j2040@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! j1989@build-pred (lambda (j2018@ae j2019@n j2020@vars) (call-with-values (lambda () ((letrec ((j2026@f (lambda (j2028@vars j2029@count) (if (pair? j2028@vars) (j2026@f (cdr j2028@vars) (+ j2029@count '1)) (if (null? j2028@vars) (values j2029@count '=) (values j2029@count '>=)))))) j2026@f) j2020@vars '0)) (lambda (j2032@j2024@count j2033@j2025@pred) ((lambda (j2036@pred j2037@count) (list (list 'primitive j2036@pred) j2019@n (list 'quote j2037@count))) j2033@j2025@pred j2032@j2024@count))))) (set! j1991@build-apply (lambda (j2010@ae j2011@g j2012@vars j2013@exp) (list '(primitive apply) (j1911@build-lambda j2010@ae j2012@vars j2013@exp) j2011@g))) (set! j1993@expand-case-lambda (lambda (j1994@ae j1995@vars j1996@exp*) ((lambda (j2000@g j2001@n) (list 'lambda j2000@g (j1915@build-let j1994@ae (list j2001@n) (list (list '(primitive length) j2000@g)) ((letrec ((j2004@f (lambda (j2006@vars* j2007@exp*) (if (null? j2006@vars*) (j1987@build-error j1994@ae) (list 'if (j1989@build-pred j1994@ae j2001@n (car j2006@vars*)) (j1991@build-apply j1994@ae j2000@g (car j2006@vars*) (car j2007@exp*)) (j2004@f (cdr j2006@vars*) (cdr j2007@exp*))))))) j2004@f) j1981@vars* j1996@exp*)))) (j1149@j913@gensym) (j1149@j913@gensym)))) (if (= (length j1982@exp*) '1) (j1911@build-lambda j1980@ae (car j1981@vars*) (car j1982@exp*)) (j1993@expand-case-lambda j1980@ae j1981@vars* j1982@exp*)))) '#f '#f '#f '#f))) (set! j1915@build-let (lambda (j2042@ae j2043@lhs* j2044@rhs* j2045@body) (cons (j1911@build-lambda j2042@ae j2043@lhs* j2045@body) j2044@rhs*))) (set! j1961@build-sequence (lambda (j2050@ae j2051@exps) ((letrec ((j2054@loop (lambda (j2056@exps) (if (null? (cdr j2056@exps)) (car j2056@exps) (if (equal? (car j2056@exps) (j1963@build-void)) (j2054@loop (cdr j2056@exps)) (cons 'begin j2056@exps)))))) j2054@loop) j2051@exps))) (set! j1963@build-void (lambda () '((primitive void)))) (set! j1965@build-letrec (lambda (j2058@ae j2059@vars j2060@val-exps j2061@body-exp) (if (null? j2059@vars) j2061@body-exp (list 'letrec (map list j2059@vars j2060@val-exps) j2061@body-exp)))) (set! j1967@build-letrec* (lambda (j2066@ae j2067@vars j2068@val-exps j2069@body-exp) (if (null? j2067@vars) j2069@body-exp (j1915@build-let j2066@ae j2067@vars (map (lambda (j2074@x) (list 'quote '#f)) j2067@vars) (j1961@build-sequence j2066@ae (append (map (lambda (j2076@lhs j2077@rhs) (list 'set! j2076@lhs j2077@rhs)) j2067@vars j2068@val-exps) (list j2069@body-exp))))))) (set! j1969@build-library-letrec* (lambda (j2080@ae j2081@name j2082@vars j2083@locs j2084@val-exps j2085@body-exp) (list 'library-letrec* j2081@name (map list j2082@vars j2083@locs j2084@val-exps) j2085@body-exp))) (set! j1971@build-receive (lambda (j2092@ae j2093@vars j2094@producer j2095@body*) (begin (display '"************** in ") (cons 'receive (cons j2093@vars (cons j2094@producer j2095@body*)))))) (begin (set! j2109@j1971@build-receive j1971@build-receive) (set! j2108@j1969@build-library-letrec* j1969@build-library-letrec*) (set! j2107@j1967@build-letrec* j1967@build-letrec*) (set! j2106@j1965@build-letrec j1965@build-letrec) (set! j2105@j1963@build-void j1963@build-void) (set! j2104@j1961@build-sequence j1961@build-sequence) (set! j2103@j1915@build-let j1915@build-let) (set! j2102@j1913@build-case-lambda j1913@build-case-lambda) (set! j2101@j1911@build-lambda j1911@build-lambda) (set! j2100@j1798@build-global-define j1798@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (j2124@file-options-macro j2126@set-cons j2128@set-union j2133@top-mark* j2135@top-marked? j2137@gen-lexical j2139@gen-global j2141@gen-label j2143@gen-top-level-label j2145@gen-define-label+loc j2147@gen-define-label j2153@j2148 j2155@j2150 j2157@j2149 j2160@rib? j2162@make-rib j2164@rib-sym* j2166@rib-mark** j2168@rib-label* j2170@rib-sealed/freq j2172@rib-cache j2174@set-rib-sym*! j2176@set-rib-mark**! j2178@set-rib-label*! j2180@set-rib-sealed/freq! j2182@set-rib-cache! j2184@make-empty-rib j2186@extend-rib! j2188@extend-rib/nc! j2190@make-rib-map j2192@seal-rib! j2194@unseal-rib! j2196@make-full-rib j2202@j2197 j2204@j2199 j2206@j2198 j2209@stx? j2211@make-stx j2213@stx-expr j2215@stx-mark* j2217@stx-subst* j2219@stx-ae* j2221@set-stx-expr! j2223@set-stx-mark*! j2225@set-stx-subst*! j2227@set-stx-ae*! j2229@rp j2231@datum->stx j2233@gen-mark j2235@anti-mark j2237@anti-mark? j2239@join-wraps j2241@mkstx j2243@add-mark j2245@add-subst j2247@syntax-kind? j2249@syntax-vector->list j2251@syntax-pair? j2253@syntax-vector? j2255@syntax-null? j2257@syntax-list? j2259@syntax-car j2261@syntax-cdr j2263@syntax->list j2265@id? j2267@id->sym j2269@same-marks? j2271@bound-id=? j2273@free-id=? j2275@valid-bound-ids? j2277@distinct-bound-ids? j2279@bound-id-member? j2281@self-evaluating? j2283@strip-annotations j2285@strip j2287@stx->datum j2289@same-marks*? j2291@id->label j2293@id->real-label j2295@label->binding j2297@make-binding j2299@binding-type j2301@binding-value j2303@raise-unbound-error j2305@syntax-type j2319@sanitize-binding j2321@make-variable-transformer j2323@variable-transformer? j2325@variable-transformer-procedure j2327@make-eval-transformer j2638@parse-define j2640@parse-define-syntax j2642@scheme-stx-hashtable j2644@scheme-stx j2646@lexical-var j2648@lexical-mutable? j2650@set-lexical-mutable! j2652@add-lexical j2654@add-lexicals j2656@letrec-helper j2658@letrec-transformer j2660@letrec*-transformer j2662@fluid-let-syntax-transformer j2664@type-descriptor-transformer j2666@record-type-descriptor-transformer j2668@record-constructor-descriptor-transformer j2670@when-macro j2672@unless-macro j2674@if-transformer j2676@and-transformer j2678@or-transformer j2680@case-macro j2682@quote-transformer j2684@case-lambda-transformer j2686@lambda-transformer j2688@bless j2690@with-syntax-macro j2692@invalid-fmls-error j2694@let-macro j2696@let-values-macro j2698@let*-values-macro j2700@trace-lambda-macro j2702@trace-define-macro j2704@trace-define-syntax-macro j2706@trace-let/rec-syntax j2708@trace-let-syntax-macro j2710@trace-letrec-syntax-macro j2712@guard-macro j2714@define-enumeration-macro j2716@time-macro j2718@delay-macro j2720@assert-macro j2722@endianness-macro j2724@identifier-syntax-macro j2726@do-macro j2728@let*-macro j2730@or-macro j2732@and-macro j2734@cond-macro j2736@do-include j2738@include-macro j2740@include-into-macro j2742@syntax-rules-macro j2744@quasiquote-macro j2746@quasisyntax-macro j2748@define-struct-macro j2750@define-record-type-macro j2752@define-condition-type-macro j2754@incorrect-usage-macro j2756@parameterize-macro j2758@foreign-call-transformer j2760@convert-pattern j2762@syntax-dispatch j2764@ellipsis? j2766@underscore? j2768@verify-literals j2770@syntax-case-transformer j2772@ellipsis-map j2774@syntax-transformer j2776@core-macro-transformer j2778@symbol-macro j2780@macro-transformer j2782@local-macro-transformer j2784@do-macro-call j2786@chi-macro j2788@chi-local-macro j2790@chi-global-macro j2792@chi-expr* j2794@chi-application j2796@chi-expr j2798@chi-set! j2800@verify-formals j2802@chi-lambda-clause j2804@chi-lambda-clause* j2806@chi-defun j2808@chi-rhs j2810@expand-interaction-rhs*/init* j2812@chi-rhs* j2814@find-bound=? j2816@find-dups j2818@chi-internal j2820@parse-module j2826@j2821 j2828@j2823 j2830@j2822 j2833@module-interface? j2835@make-module-interface j2837@module-interface-first-mark j2839@module-interface-exp-id-vec j2841@module-interface-exp-lab-vec j2843@set-module-interface-first-mark! j2845@set-module-interface-exp-id-vec! j2847@set-module-interface-exp-lab-vec! j2849@module-interface-exp-id* j2851@chi-internal-module j2853@chi-body* j2855@expand-transformer j2857@parse-exports j2859@parse-library-name j2861@parse-library j2863@parse-import-spec* j2865@make-top-rib j2867@make-collector j2869@inv-collector j2871@vis-collector j2873@imp-collector j2875@chi-library-internal j2877@chi-interaction-expr j2879@library-body-expander j2881@core-library-expander j2883@parse-top-level-program j2885@top-level-expander j2891@j2886 j2893@j2888 j2895@j2887 j2898@env? j2900@make-env j2902@env-names j2904@env-labels j2906@env-itc j2908@set-env-names! j2910@set-env-labels! j2912@set-env-itc! j2914@rp j2920@j2915 j2922@j2917 j2924@j2916 j2927@interaction-env? j2929@make-interaction-env j2931@interaction-env-rib j2933@interaction-env-r j2935@interaction-env-locs j2937@set-interaction-env-rib! j2939@set-interaction-env-r! j2941@set-interaction-env-locs! j2943@rp j2945@interaction-environment-symbols j2947@environment-bindings j2949@parse-binding j2951@environment? j2953@environment-symbols j2955@environment j2957@null-environment j2959@scheme-report-environment j2961@expand j2963@eval j2965@library-expander j2967@boot-library-expand j2969@rev-map-append j2971@build-exports j2973@make-export-subst j2975@make-export-env/macros j2977@generate-temporaries j2979@free-identifier=? j2981@bound-identifier=? j2983@make-source-condition j2985@extract-position-condition j2987@expression-position j2989@assertion-error j2991@syntax-error j2993@syntax-violation* j2995@syntax-violation j2997@identifier? j2999@datum->syntax j3001@syntax->datum j3003@compile-r6rs-top-level j3005@pre-compile-r6rs-top-level j3007@interaction-environment j3009@top-level-context) (begin (set! j2124@file-options-macro (lambda (j3010@x) ((lambda (j3013@valid-option?) (begin (set! j3013@valid-option? (lambda (j3022@x) (and (j2265@id? j3022@x) (memq (j2267@id->sym j3022@x) '(no-fail no-create no-truncate))))) ((lambda (j3014@t) ((lambda (j3016@ls/false) (if (and j3016@ls/false (apply (lambda (j3018@opt*) (for-all j3013@valid-option? j3018@opt*)) j3016@ls/false)) (apply (lambda (j3020@opt*) (j2688@bless (list 'make-file-options (list 'quote j3020@opt*)))) j3016@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j3014@t))) (j2762@syntax-dispatch j3014@t '(_ . each-any)))) j3010@x))) '#f))) (set! j2126@set-cons (lambda (j3024@x j3025@ls) (if (memq j3024@x j3025@ls) j3025@ls (cons j3024@x j3025@ls)))) (set! j2128@set-union (lambda (j3028@ls1 j3029@ls2) (if (null? j3028@ls1) j3029@ls2 (if (memq (car j3028@ls1) j3029@ls2) (j2128@set-union (cdr j3028@ls1) j3029@ls2) (cons (car j3028@ls1) (j2128@set-union (cdr j3028@ls1) j3029@ls2)))))) (set! j2133@top-mark* '(top)) (set! j2135@top-marked? (lambda (j3032@m*) (memq 'top j3032@m*))) (set! j2137@gen-lexical (lambda (j3034@sym) (if (symbol? j3034@sym) (j1149@j913@gensym j3034@sym) (if (j2209@stx? j3034@sym) (j2137@gen-lexical (j2267@id->sym j3034@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" j3034@sym))))) (set! j2139@gen-global (lambda (j3036@x) (j2137@gen-lexical j3036@x))) (set! j2141@gen-label (lambda (j3038@_) (j1149@j913@gensym))) (set! j2143@gen-top-level-label (lambda (j3040@id j3041@rib) ((lambda (j3045@find) (begin (set! j3045@find (lambda (j3056@sym j3057@mark* j3058@sym* j3059@mark** j3060@label*) (and (pair? j3058@sym*) (if (and (eq? j3056@sym (car j3058@sym*)) (j2269@same-marks? j3057@mark* (car j3059@mark**))) (car j3060@label*) (j3045@find j3056@sym j3057@mark* (cdr j3058@sym*) (cdr j3059@mark**) (cdr j3060@label*)))))) ((lambda (j3046@sym j3047@mark*) ((lambda (j3050@sym*) ((lambda (j3052@t) (if j3052@t ((lambda (j3054@label) (if (j1790@j1444@imported-label->binding j3054@label) (j1149@j913@gensym) j3054@label)) j3052@t) (j1149@j913@gensym))) (and (memq j3046@sym (j2164@rib-sym* j3041@rib)) (j3045@find j3046@sym j3047@mark* j3050@sym* (j2166@rib-mark** j3041@rib) (j2168@rib-label* j3041@rib))))) (j2164@rib-sym* j3041@rib))) (j2267@id->sym j3040@id) (j2215@stx-mark* j3040@id)))) '#f))) (set! j2145@gen-define-label+loc (lambda (j3066@id j3067@rib) ((lambda (j3070@t) (if j3070@t ((lambda (j3072@env) ((lambda (j3074@label j3075@locs) (values j3074@label ((lambda (j3078@t) (if j3078@t (cdr j3078@t) ((lambda (j3080@loc) (begin (j2941@set-interaction-env-locs! j3072@env (cons (cons j3074@label j3080@loc) j3075@locs)) j3080@loc)) (j2137@gen-lexical j3066@id)))) (assq j3074@label j3075@locs)))) (j2143@gen-top-level-label j3066@id j3067@rib) (j2935@interaction-env-locs j3072@env))) j3070@t) (values (j1149@j913@gensym) (j2137@gen-lexical j3066@id)))) (j3009@top-level-context)))) (set! j2147@gen-define-label (lambda (j3082@id j3083@rib) (if (j3009@top-level-context) (j2143@gen-top-level-label j3082@id j3083@rib) (j1149@j913@gensym)))) (set! j2153@j2148 (make-record-type-descriptor 'rib '#f 'j2151 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! j2155@j2150 '#f) (set! j2157@j2149 (make-record-constructor-descriptor j2153@j2148 '#f j2155@j2150)) (set! j2160@rib? (record-predicate j2153@j2148)) (set! j2162@make-rib (record-constructor j2157@j2149)) (set! j2164@rib-sym* (record-accessor j2153@j2148 '0)) (set! j2166@rib-mark** (record-accessor j2153@j2148 '1)) (set! j2168@rib-label* (record-accessor j2153@j2148 '2)) (set! j2170@rib-sealed/freq (record-accessor j2153@j2148 '3)) (set! j2172@rib-cache (record-accessor j2153@j2148 '4)) (set! j2174@set-rib-sym*! (record-mutator j2153@j2148 '0)) (set! j2176@set-rib-mark**! (record-mutator j2153@j2148 '1)) (set! j2178@set-rib-label*! (record-mutator j2153@j2148 '2)) (set! j2180@set-rib-sealed/freq! (record-mutator j2153@j2148 '3)) (set! j2182@set-rib-cache! (record-mutator j2153@j2148 '4)) (set! j2184@make-empty-rib (lambda () (j2162@make-rib '() '() '() '#f '#f))) (set! j2186@extend-rib! (lambda (j3086@rib j3087@id j3088@label) ((lambda (j3093@find) (begin (set! j3093@find (lambda (j3106@sym j3107@mark* j3108@sym* j3109@mark** j3110@label*) (and (pair? j3108@sym*) (if (and (eq? j3106@sym (car j3108@sym*)) (j2269@same-marks? j3107@mark* (car j3109@mark**))) j3110@label* (j3093@find j3106@sym j3107@mark* (cdr j3108@sym*) (cdr j3109@mark**) (cdr j3110@label*)))))) (begin (if (j2170@rib-sealed/freq j3086@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" j3086@rib) (void)) ((lambda (j3094@sym j3095@mark*) ((lambda (j3098@sym*) ((lambda (j3100@t) (if j3100@t ((lambda (j3102@p) (if (not (eq? j3088@label (car j3102@p))) (if (j3009@top-level-context) (set-car! j3102@p j3088@label) (j2995@syntax-violation '#f '"multiple definitions of identifier" j3087@id)) (void))) j3100@t) (begin (if (j2172@rib-cache j3086@rib) (hashtable-update! (j2172@rib-cache j3086@rib) j3094@sym (lambda (j3104@e) (cons (cons j3095@mark* j3088@label) j3104@e)) '()) (void)) (j2174@set-rib-sym*! j3086@rib (cons j3094@sym j3098@sym*)) (j2176@set-rib-mark**! j3086@rib (cons j3095@mark* (j2166@rib-mark** j3086@rib))) (j2178@set-rib-label*! j3086@rib (cons j3088@label (j2168@rib-label* j3086@rib)))))) (and (memq j3094@sym (j2164@rib-sym* j3086@rib)) (j3093@find j3094@sym j3095@mark* j3098@sym* (j2166@rib-mark** j3086@rib) (j2168@rib-label* j3086@rib))))) (j2164@rib-sym* j3086@rib))) (j2267@id->sym j3087@id) (j2215@stx-mark* j3087@id))))) '#f))) (set! j2188@extend-rib/nc! (lambda (j3116@rib j3117@id j3118@label) ((lambda (j3122@sym j3123@mark*) ((lambda (j3126@sym*) (begin (if (j2172@rib-cache j3116@rib) (hashtable-update! (j2172@rib-cache j3116@rib) j3122@sym (lambda (j3128@e) (cons (cons j3123@mark* j3118@label) j3128@e)) '()) (void)) (j2174@set-rib-sym*! j3116@rib (cons j3122@sym j3126@sym*)) (j2176@set-rib-mark**! j3116@rib (cons j3123@mark* (j2166@rib-mark** j3116@rib))) (j2178@set-rib-label*! j3116@rib (cons j3118@label (j2168@rib-label* j3116@rib))))) (j2164@rib-sym* j3116@rib))) (j2267@id->sym j3117@id) (j2215@stx-mark* j3117@id)))) (set! j2190@make-rib-map (lambda (j3130@sym*) ((lambda (j3132@ht) ((letrec ((j3134@f (lambda (j3136@i j3137@sym*) (if (null? j3137@sym*) j3132@ht (begin (hashtable-update! j3132@ht (car j3137@sym*) (lambda (j3140@x) (cons j3136@i j3140@x)) '()) (j3134@f (+ j3136@i '1) (cdr j3137@sym*))))))) j3134@f) '0 j3130@sym*)) (make-eq-hashtable)))) (set! j2192@seal-rib! (lambda (j3142@rib) ((lambda (j3144@sym*) (if (not (null? j3144@sym*)) (begin (j2174@set-rib-sym*! j3142@rib (list->vector j3144@sym*)) (j2176@set-rib-mark**! j3142@rib (list->vector (j2166@rib-mark** j3142@rib))) (j2178@set-rib-label*! j3142@rib (list->vector (j2168@rib-label* j3142@rib))) (j2180@set-rib-sealed/freq! j3142@rib (j2190@make-rib-map j3144@sym*))) (void))) (j2164@rib-sym* j3142@rib)))) (set! j2194@unseal-rib! (lambda (j3146@rib) (if (j2170@rib-sealed/freq j3146@rib) (begin (j2180@set-rib-sealed/freq! j3146@rib '#f) (j2174@set-rib-sym*! j3146@rib (vector->list (j2164@rib-sym* j3146@rib))) (j2176@set-rib-mark**! j3146@rib (vector->list (j2166@rib-mark** j3146@rib))) (j2178@set-rib-label*! j3146@rib (vector->list (j2168@rib-label* j3146@rib)))) (void)))) (set! j2196@make-full-rib (lambda (j3148@id* j3149@label*) ((lambda (j3152@r) (begin (j2192@seal-rib! j3152@r) j3152@r)) (j2162@make-rib (map j2267@id->sym j3148@id*) (map j2215@stx-mark* j3148@id*) j3149@label* '#f '#f)))) (set! j2202@j2197 (make-record-type-descriptor 'stx '#f 'j2200 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! j2204@j2199 '#f) (set! j2206@j2198 (make-record-constructor-descriptor j2202@j2197 '#f j2204@j2199)) (set! j2209@stx? (record-predicate j2202@j2197)) (set! j2211@make-stx (record-constructor j2206@j2198)) (set! j2213@stx-expr (record-accessor j2202@j2197 '0)) (set! j2215@stx-mark* (record-accessor j2202@j2197 '1)) (set! j2217@stx-subst* (record-accessor j2202@j2197 '2)) (set! j2219@stx-ae* (record-accessor j2202@j2197 '3)) (set! j2221@set-stx-expr! (record-mutator j2202@j2197 '0)) (set! j2223@set-stx-mark*! (record-mutator j2202@j2197 '1)) (set! j2225@set-stx-subst*! (record-mutator j2202@j2197 '2)) (set! j2227@set-stx-ae*! (record-mutator j2202@j2197 '3)) (set! j2229@rp (j1160@j935@make-record-printer 'stx (lambda (j3154@x j3155@p j3156@wr) (begin (display '"#<syntax " j3155@p) (write (j2287@stx->datum j3154@x) j3155@p) ((lambda (j3160@expr) (if (j1152@j919@annotation? j3160@expr) ((lambda (j3162@src) (if (pair? j3162@src) (begin (display '" [" j3155@p) (display (cdr j3162@src) j3155@p) (display '" of " j3155@p) (display (car j3162@src) j3155@p) (display '"]" j3155@p)) (void))) (j1153@j921@annotation-source j3160@expr)) (void))) (j2213@stx-expr j3154@x)) (display '">" j3155@p))))) (set! j2231@datum->stx (lambda (j3164@id j3165@datum) (j2211@make-stx j3165@datum (j2215@stx-mark* j3164@id) (j2217@stx-subst* j3164@id) (j2219@stx-ae* j3164@id)))) (set! j2233@gen-mark (lambda () (string '#\m))) (set! j2235@anti-mark '#f) (set! j2237@anti-mark? not) (set! j2239@join-wraps (lambda (j3168@m1* j3169@s1* j3170@ae1* j3171@e) ((lambda (j3177@cancel) (begin (set! j3177@cancel (lambda (j3184@ls1 j3185@ls2) ((letrec ((j3188@f (lambda (j3190@x j3191@ls1) (if (null? j3191@ls1) (cdr j3185@ls2) (cons j3190@x (j3188@f (car j3191@ls1) (cdr j3191@ls1))))))) j3188@f) (car j3184@ls1) (cdr j3184@ls1)))) ((lambda (j3178@m2* j3179@s2* j3180@ae2*) (if (and (not (null? j3168@m1*)) (not (null? j3178@m2*)) (j2237@anti-mark? (car j3178@m2*))) (values (j3177@cancel j3168@m1* j3178@m2*) (j3177@cancel j3169@s1* j3179@s2*) (j3177@cancel j3170@ae1* j3180@ae2*)) (values (append j3168@m1* j3178@m2*) (append j3169@s1* j3179@s2*) (append j3170@ae1* j3180@ae2*)))) (j2215@stx-mark* j3171@e) (j2217@stx-subst* j3171@e) (j2219@stx-ae* j3171@e)))) '#f))) (set! j2241@mkstx (lambda (j3194@e j3195@m* j3196@s* j3197@ae*) (if (and (j2209@stx? j3194@e) (not (j2135@top-marked? j3195@m*))) (call-with-values (lambda () (j2239@join-wraps j3195@m* j3196@s* j3197@ae* j3194@e)) (lambda (j3205@j3202@m* j3206@j3203@s* j3207@j3204@ae*) ((lambda (j3211@ae* j3212@s* j3213@m*) (j2211@make-stx (j2213@stx-expr j3194@e) j3213@m* j3212@s* j3211@ae*)) j3207@j3204@ae* j3206@j3203@s* j3205@j3202@m*))) (j2211@make-stx j3194@e j3195@m* j3196@s* j3197@ae*)))) (set! j2243@add-mark (lambda (j3217@m j3218@e j3219@ae) (j2241@mkstx j3218@e (list j3217@m) '(shift) (list j3219@ae)))) (set! j2245@add-subst (lambda (j3223@subst j3224@e) (j2241@mkstx j3224@e '() (list j3223@subst) '()))) (set! j2247@syntax-kind? (lambda (j3227@x j3228@p?) (if (j2209@stx? j3227@x) (j2247@syntax-kind? (j2213@stx-expr j3227@x) j3228@p?) (if (j1152@j919@annotation? j3227@x) (j2247@syntax-kind? (j1154@j923@annotation-expression j3227@x) j3228@p?) (j3228@p? j3227@x))))) (set! j2249@syntax-vector->list (lambda (j3231@x) (if (j2209@stx? j3231@x) ((lambda (j3233@ls j3234@m* j3235@s* j3236@ae*) (map (lambda (j3241@x) (j2241@mkstx j3241@x j3234@m* j3235@s* j3236@ae*)) j3233@ls)) (j2249@syntax-vector->list (j2213@stx-expr j3231@x)) (j2215@stx-mark* j3231@x) (j2217@stx-subst* j3231@x) (j2219@stx-ae* j3231@x)) (if (j1152@j919@annotation? j3231@x) (j2249@syntax-vector->list (j1154@j923@annotation-expression j3231@x)) (if (vector? j3231@x) (vector->list j3231@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" j3231@x)))))) (set! j2251@syntax-pair? (lambda (j3243@x) (j2247@syntax-kind? j3243@x pair?))) (set! j2253@syntax-vector? (lambda (j3245@x) (j2247@syntax-kind? j3245@x vector?))) (set! j2255@syntax-null? (lambda (j3247@x) (j2247@syntax-kind? j3247@x null?))) (set! j2257@syntax-list? (lambda (j3249@x) (or (j2255@syntax-null? j3249@x) (and (j2251@syntax-pair? j3249@x) (j2257@syntax-list? (j2261@syntax-cdr j3249@x)))))) (set! j2259@syntax-car (lambda (j3251@x) (if (j2209@stx? j3251@x) (j2241@mkstx (j2259@syntax-car (j2213@stx-expr j3251@x)) (j2215@stx-mark* j3251@x) (j2217@stx-subst* j3251@x) (j2219@stx-ae* j3251@x)) (if (j1152@j919@annotation? j3251@x) (j2259@syntax-car (j1154@j923@annotation-expression j3251@x)) (if (pair? j3251@x) (car j3251@x) (assertion-violation 'syntax-car '"BUG: not a pair" j3251@x)))))) (set! j2261@syntax-cdr (lambda (j3253@x) (if (j2209@stx? j3253@x) (j2241@mkstx (j2261@syntax-cdr (j2213@stx-expr j3253@x)) (j2215@stx-mark* j3253@x) (j2217@stx-subst* j3253@x) (j2219@stx-ae* j3253@x)) (if (j1152@j919@annotation? j3253@x) (j2261@syntax-cdr (j1154@j923@annotation-expression j3253@x)) (if (pair? j3253@x) (cdr j3253@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" j3253@x)))))) (set! j2263@syntax->list (lambda (j3255@x) (if (j2251@syntax-pair? j3255@x) (cons (j2259@syntax-car j3255@x) (j2263@syntax->list (j2261@syntax-cdr j3255@x))) (if (j2255@syntax-null? j3255@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" j3255@x))))) (set! j2265@id? (lambda (j3257@x) (and (j2209@stx? j3257@x) ((lambda (j3259@expr) (symbol? (if (j1152@j919@annotation? j3259@expr) (j1151@j917@annotation-stripped j3259@expr) j3259@expr))) (j2213@stx-expr j3257@x))))) (set! j2267@id->sym (lambda (j3261@x) (begin (if (not (j2209@stx? j3261@x)) (error 'id->sym '"BUG in ikarus: not an id" j3261@x) (void)) ((lambda (j3263@expr) ((lambda (j3265@sym) (if (symbol? j3265@sym) j3265@sym (error 'id->sym '"BUG in ikarus: not an id" j3261@x))) (if (j1152@j919@annotation? j3263@expr) (j1151@j917@annotation-stripped j3263@expr) j3263@expr))) (j2213@stx-expr j3261@x))))) (set! j2269@same-marks? (lambda (j3267@x j3268@y) (or (and (null? j3267@x) (null? j3268@y)) (and (pair? j3267@x) (pair? j3268@y) (eq? (car j3267@x) (car j3268@y)) (j2269@same-marks? (cdr j3267@x) (cdr j3268@y)))))) (set! j2271@bound-id=? (lambda (j3271@x j3272@y) (and (eq? (j2267@id->sym j3271@x) (j2267@id->sym j3272@y)) (j2269@same-marks? (j2215@stx-mark* j3271@x) (j2215@stx-mark* j3272@y))))) (set! j2273@free-id=? (lambda (j3275@i j3276@j) ((lambda (j3279@t0 j3280@t1) (if (or j3279@t0 j3280@t1) (eq? j3279@t0 j3280@t1) (eq? (j2267@id->sym j3275@i) (j2267@id->sym j3276@j)))) (j2293@id->real-label j3275@i) (j2293@id->real-label j3276@j)))) (set! j2275@valid-bound-ids? (lambda (j3283@id*) (and (for-all j2265@id? j3283@id*) (j2277@distinct-bound-ids? j3283@id*)))) (set! j2277@distinct-bound-ids? (lambda (j3285@id*) (or (null? j3285@id*) (and (not (j2279@bound-id-member? (car j3285@id*) (cdr j3285@id*))) (j2277@distinct-bound-ids? (cdr j3285@id*)))))) (set! j2279@bound-id-member? (lambda (j3287@id j3288@id*) (and (pair? j3288@id*) (or (j2271@bound-id=? j3287@id (car j3288@id*)) (j2279@bound-id-member? j3287@id (cdr j3288@id*)))))) (set! j2281@self-evaluating? (lambda (j3291@x) (or (number? j3291@x) (string? j3291@x) (char? j3291@x) (boolean? j3291@x) (regexp? j3291@x) (bytevector? j3291@x)))) (set! j2283@strip-annotations (lambda (j3293@x) (if (pair? j3293@x) (cons (j2283@strip-annotations (car j3293@x)) (j2283@strip-annotations (cdr j3293@x))) (if (vector? j3293@x) (vector-map j2283@strip-annotations j3293@x) (if (j1152@j919@annotation? j3293@x) (j1151@j917@annotation-stripped j3293@x) j3293@x))))) (set! j2285@strip (lambda (j3295@x j3296@m*) (if (j2135@top-marked? j3296@m*) (if (or (j1152@j919@annotation? j3295@x) (and (pair? j3295@x) (j1152@j919@annotation? (car j3295@x))) (and (vector? j3295@x) (> (vector-length j3295@x) '0) (j1152@j919@annotation? (vector-ref j3295@x '0)))) (j2283@strip-annotations j3295@x) j3295@x) ((letrec ((j3299@f (lambda (j3301@x) (if (j2209@stx? j3301@x) (j2285@strip (j2213@stx-expr j3301@x) (j2215@stx-mark* j3301@x)) (if (j1152@j919@annotation? j3301@x) (j1151@j917@annotation-stripped j3301@x) (if (pair? j3301@x) ((lambda (j3303@a j3304@d) (if (and (eq? j3303@a (car j3301@x)) (eq? j3304@d (cdr j3301@x))) j3301@x (cons j3303@a j3304@d))) (j3299@f (car j3301@x)) (j3299@f (cdr j3301@x))) (if (vector? j3301@x) ((lambda (j3307@old) ((lambda (j3309@new) (if (for-all eq? j3307@old j3309@new) j3301@x (list->vector j3309@new))) (map j3299@f j3307@old))) (vector->list j3301@x)) j3301@x))))))) j3299@f) j3295@x)))) (set! j2287@stx->datum (lambda (j3311@x) (j2285@strip j3311@x '()))) (set! j2289@same-marks*? (lambda (j3313@mark* j3314@mark** j3315@si) (if (null? j3315@si) '#f (if (j2269@same-marks? j3313@mark* (vector-ref j3314@mark** (car j3315@si))) (car j3315@si) (j2289@same-marks*? j3313@mark* j3314@mark** (cdr j3315@si)))))) (set! j2291@id->label (lambda (j3319@id) (or (j2293@id->real-label j3319@id) ((lambda (j3321@t) (if j3321@t ((lambda (j3323@env) ((lambda (j3325@rib) (call-with-values (lambda () (j2145@gen-define-label+loc j3319@id j3325@rib)) (lambda (j3329@j3327@lab j3330@j3328@loc_) ((lambda (j3333@loc_ j3334@lab) (begin (j2186@extend-rib! j3325@rib j3319@id j3334@lab) j3334@lab)) j3330@j3328@loc_ j3329@j3327@lab)))) (j2931@interaction-env-rib j3323@env))) j3321@t) '#f)) (j3009@top-level-context))))) (set! j2293@id->real-label (lambda (j3337@id) ((lambda (j3339@sym) ((letrec ((j3341@search (lambda (j3343@subst* j3344@mark*) (if (null? j3343@subst*) '#f (if (eq? (car j3343@subst*) 'shift) (j3341@search (cdr j3343@subst*) (cdr j3344@mark*)) ((lambda (j3347@rib) ((lambda (j3349@t) (if j3349@t ((lambda (j3351@ht) ((lambda (j3353@si) ((lambda (j3355@i) (if j3355@i (vector-ref (j2168@rib-label* j3347@rib) j3355@i) (j3341@search (cdr j3343@subst*) j3344@mark*))) (and j3353@si (j2289@same-marks*? j3344@mark* (j2166@rib-mark** j3347@rib) (reverse j3353@si))))) (hashtable-ref j3351@ht j3339@sym '#f))) j3349@t) ((letrec ((j3357@f (lambda (j3359@sym* j3360@mark** j3361@label*) (if (null? j3359@sym*) (j3341@search (cdr j3343@subst*) j3344@mark*) (if (and (eq? (car j3359@sym*) j3339@sym) (j2269@same-marks? (car j3360@mark**) j3344@mark*)) (car j3361@label*) (j3357@f (cdr j3359@sym*) (cdr j3360@mark**) (cdr j3361@label*))))))) j3357@f) (j2164@rib-sym* j3347@rib) (j2166@rib-mark** j3347@rib) (j2168@rib-label* j3347@rib)))) (j2170@rib-sealed/freq j3347@rib))) (car j3343@subst*))))))) j3341@search) (j2217@stx-subst* j3337@id) (j2215@stx-mark* j3337@id))) (j2267@id->sym j3337@id)))) (set! j2295@label->binding (lambda (j3365@x j3366@r) ((lambda (j3369@t) (if j3369@t ((lambda (j3371@b) (if (and (pair? j3371@b) (eq? (car j3371@b) '$core-rtd)) (cons '$rtd (map j2688@bless (cdr j3371@b))) (if (and (pair? j3371@b) (eq? (car j3371@b) 'global-rtd)) ((lambda (j3373@lib j3374@loc) (cons '$rtd (symbol-value j3374@loc))) (cadr j3371@b) (cddr j3371@b)) j3371@b))) j3369@t) ((lambda (j3377@t) (if j3377@t (cdr j3377@t) ((lambda (j3379@t) (if j3379@t ((lambda (j3381@env) ((lambda (j3383@t) (if j3383@t ((lambda (j3385@p) (cons* 'lexical (cdr j3385@p) '#f)) j3383@t) '(displaced-lexical . #f))) (assq j3365@x (j2935@interaction-env-locs j3381@env)))) j3379@t) '(displaced-lexical . #f))) (j3009@top-level-context)))) (assq j3365@x j3366@r)))) (j1790@j1444@imported-label->binding j3365@x)))) (set! j2297@make-binding cons) (set! j2299@binding-type car) (set! j2301@binding-value cdr) (set! j2303@raise-unbound-error (lambda (j3387@id) (j2993@syntax-violation* '#f '"unbound identifier" j3387@id (j10183@j9745@make-undefined-violation)))) (set! j2305@syntax-type (lambda (j3389@e j3390@r) (if (j2265@id? j3389@e) ((lambda (j3393@id) ((lambda (j3395@label) ((lambda (j3397@b) ((lambda (j3399@type) ((lambda () (begin (if (not j3395@label) (j2303@raise-unbound-error j3393@id) (void)) ((lambda (j3401@t) (if (memv j3401@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values j3399@type (j2301@binding-value j3397@b) j3393@id) (values 'other '#f '#f))) j3399@type))))) (j2299@binding-type j3397@b))) (j2295@label->binding j3395@label j3390@r))) (j2291@id->label j3393@id))) j3389@e) (if (j2251@syntax-pair? j3389@e) ((lambda (j3403@id) (if (j2265@id? j3403@id) ((lambda (j3405@label) ((lambda (j3407@b) ((lambda (j3409@type) ((lambda () (begin (if (not j3405@label) (j2303@raise-unbound-error j3403@id) (void)) ((lambda (j3411@t) (if (memv j3411@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values j3409@type (j2301@binding-value j3407@b) j3403@id) (values 'call '#f '#f))) j3409@type))))) (j2299@binding-type j3407@b))) (j2295@label->binding j3405@label j3390@r))) (j2291@id->label j3403@id)) (values 'call '#f '#f))) (j2259@syntax-car j3389@e)) ((lambda (j3413@d) (if (j2281@self-evaluating? j3413@d) (values 'constant j3413@d '#f) (values 'other '#f '#f))) (j2287@stx->datum j3389@e)))))) (set! j2319@sanitize-binding (lambda (j3415@x j3416@src) (if (procedure? j3415@x) (cons* 'local-macro j3415@x j3416@src) (if (and (pair? j3415@x) (eq? (car j3415@x) 'macro!) (procedure? (cdr j3415@x))) (cons* 'local-macro! (cdr j3415@x) j3416@src) (if (and (pair? j3415@x) (eq? (car j3415@x) '$rtd)) j3415@x (assertion-violation 'expand '"invalid transformer" j3415@x)))))) (set! j2321@make-variable-transformer (lambda (j3419@x) (if (procedure? j3419@x) (cons 'macro! j3419@x) (assertion-violation 'make-variable-transformer '"not a procedure" j3419@x)))) (set! j2323@variable-transformer? (lambda (j3421@x) (and (pair? j3421@x) (eq? (car j3421@x) 'macro!) (procedure? (cdr j3421@x))))) (set! j2325@variable-transformer-procedure (lambda (j3423@x) (if (j2323@variable-transformer? j3423@x) (cdr j3423@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" j3423@x)))) (set! j2327@make-eval-transformer (lambda (j3425@x) (j2319@sanitize-binding (eval-core (j1247@j1175@expanded->core j3425@x)) j3425@x))) (set! j2638@parse-define (lambda (j3427@x) ((lambda (j3429@t) ((lambda (j3431@ls/false) (if (and j3431@ls/false (apply (lambda (j3433@id j3434@fmls j3435@b j3436@b*) (j2265@id? j3433@id)) j3431@ls/false)) (apply (lambda (j3441@id j3442@fmls j3443@b j3444@b*) (begin (j2800@verify-formals j3442@fmls j3427@x) (values j3441@id (cons 'defun (cons j3442@fmls (cons j3443@b j3444@b*)))))) j3431@ls/false) ((lambda (j3449@t) ((lambda (j3451@ls/false) (if (and j3451@ls/false (apply (lambda (j3453@id j3454@val) (j2265@id? j3453@id)) j3451@ls/false)) (apply (lambda (j3457@id j3458@val) (values j3457@id (cons 'expr j3458@val))) j3451@ls/false) ((lambda (j3461@t) ((lambda (j3463@ls/false) (if (and j3463@ls/false (apply (lambda (j3465@id) (j2265@id? j3465@id)) j3463@ls/false)) (apply (lambda (j3467@id) (values j3467@id (cons 'expr (j2688@bless '(void))))) j3463@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j3461@t))) (j2762@syntax-dispatch j3461@t '(_ any)))) j3449@t))) (j2762@syntax-dispatch j3449@t '(_ any any)))) j3429@t))) (j2762@syntax-dispatch j3429@t '(_ (any . any) any . each-any)))) j3427@x))) (set! j2640@parse-define-syntax (lambda (j3469@x) ((lambda (j3471@t) ((lambda (j3473@ls/false) (if (and j3473@ls/false (apply (lambda (j3475@id j3476@val) (j2265@id? j3475@id)) j3473@ls/false)) (apply (lambda (j3479@id j3480@val) (values j3479@id j3480@val)) j3473@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j3471@t))) (j2762@syntax-dispatch j3471@t '(_ any any)))) j3469@x))) (set! j2642@scheme-stx-hashtable (make-eq-hashtable)) (set! j2644@scheme-stx (lambda (j3483@sym) (or (hashtable-ref j2642@scheme-stx-hashtable j3483@sym '#f) ((lambda (j3485@subst) ((lambda (j3487@stx) ((lambda (j3489@stx) ((lambda () (begin (hashtable-set! j2642@scheme-stx-hashtable j3483@sym j3489@stx) j3489@stx)))) ((lambda (j3491@t) (if j3491@t ((lambda (j3493@x) ((lambda (j3495@name j3496@label) (j2245@add-subst (j2162@make-rib (list j3495@name) (list j2133@top-mark*) (list j3496@label) '#f '#f) j3487@stx)) (car j3493@x) (cdr j3493@x))) j3491@t) j3487@stx)) (assq j3483@sym j3485@subst)))) (j2211@make-stx j3483@sym j2133@top-mark* '() '()))) (j1748@j1360@library-subst (j1784@j1432@find-library-by-name '(psyntax system $all))))))) (set! j2646@lexical-var car) (set! j2648@lexical-mutable? cdr) (set! j2650@set-lexical-mutable! set-cdr!) (set! j2652@add-lexical (lambda (j3499@lab j3500@lex j3501@r) (cons (cons* j3499@lab 'lexical j3500@lex '#f) j3501@r))) (set! j2654@add-lexicals (lambda (j3505@lab* j3506@lex* j3507@r) (if (null? j3505@lab*) j3507@r (j2654@add-lexicals (cdr j3505@lab*) (cdr j3506@lex*) (j2652@add-lexical (car j3505@lab*) (car j3506@lex*) j3507@r))))) (set! j2656@letrec-helper (lambda (j3511@e j3512@r j3513@mr j3514@build) ((lambda (j3519@t) ((lambda (j3521@ls/false) (if j3521@ls/false (apply (lambda (j3523@lhs* j3524@rhs* j3525@b j3526@b*) (if (not (j2275@valid-bound-ids? j3523@lhs*)) (j2692@invalid-fmls-error j3511@e j3523@lhs*) ((lambda (j3531@lex* j3532@lab*) ((lambda (j3535@rib j3536@r) ((lambda (j3539@body j3540@rhs*) (j3514@build '#f j3531@lex* j3540@rhs* j3539@body)) (j2818@chi-internal (j2245@add-subst j3535@rib (cons j3525@b j3526@b*)) j3536@r j3513@mr) (j2792@chi-expr* (map (lambda (j3543@x) (j2245@add-subst j3535@rib j3543@x)) j3524@rhs*) j3536@r j3513@mr))) (j2196@make-full-rib j3523@lhs* j3532@lab*) (j2654@add-lexicals j3532@lab* j3531@lex* j3512@r))) (map j2137@gen-lexical j3523@lhs*) (map j2141@gen-label j3523@lhs*)))) j3521@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j3519@t))) (j2762@syntax-dispatch j3519@t '(_ #(each (any any)) any . each-any)))) j3511@e))) (set! j2658@letrec-transformer (lambda (j3545@e j3546@r j3547@mr) (j2656@letrec-helper j3545@e j3546@r j3547@mr j2106@j1965@build-letrec))) (set! j2660@letrec*-transformer (lambda (j3551@e j3552@r j3553@mr) (j2656@letrec-helper j3551@e j3552@r j3553@mr j2107@j1967@build-letrec*))) (set! j2662@fluid-let-syntax-transformer (lambda (j3557@e j3558@r j3559@mr) ((lambda (j3564@lookup) (begin (set! j3564@lookup (lambda (j3583@x) (or (j2291@id->label j3583@x) (j2995@syntax-violation '#f '"unbound identifier" j3557@e j3583@x)))) ((lambda (j3565@t) ((lambda (j3567@ls/false) (if j3567@ls/false (apply (lambda (j3569@lhs* j3570@rhs* j3571@b j3572@b*) (if (not (j2275@valid-bound-ids? j3569@lhs*)) (j2692@invalid-fmls-error j3557@e j3569@lhs*) ((lambda (j3577@lab* j3578@rhs*) (j2818@chi-internal (cons j3571@b j3572@b*) (append (map cons j3577@lab* j3578@rhs*) j3558@r) (append (map cons j3577@lab* j3578@rhs*) j3559@mr))) (map j3564@lookup j3569@lhs*) (map (lambda (j3581@x) (j2327@make-eval-transformer (j2855@expand-transformer j3581@x j3559@mr))) j3570@rhs*)))) j3567@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j3565@t))) (j2762@syntax-dispatch j3565@t '(_ #(each (any any)) any . each-any)))) j3557@e))) '#f))) (set! j2664@type-descriptor-transformer (lambda (j3585@e j3586@r j3587@mr) ((lambda (j3591@t) ((lambda (j3593@ls/false) (if (and j3593@ls/false (apply (lambda (j3595@id) (j2265@id? j3595@id)) j3593@ls/false)) (apply (lambda (j3597@id) ((lambda (j3599@lab) ((lambda (j3601@b) ((lambda (j3603@type) ((lambda () (begin (if (not j3599@lab) (j2303@raise-unbound-error j3597@id) (void)) (if (not (and (eq? j3603@type '$rtd) (not (list? (j2301@binding-value j3601@b))))) (j2995@syntax-violation '#f '"not a record type" j3585@e) (void)) (list 'quote (j2301@binding-value j3601@b)))))) (j2299@binding-type j3601@b))) (j2295@label->binding j3599@lab j3586@r))) (j2291@id->label j3597@id))) j3593@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j3591@t))) (j2762@syntax-dispatch j3591@t '(_ any)))) j3585@e))) (set! j2666@record-type-descriptor-transformer (lambda (j3605@e j3606@r j3607@mr) ((lambda (j3611@t) ((lambda (j3613@ls/false) (if (and j3613@ls/false (apply (lambda (j3615@id) (j2265@id? j3615@id)) j3613@ls/false)) (apply (lambda (j3617@id) ((lambda (j3619@lab) ((lambda (j3621@b) ((lambda (j3623@type) ((lambda () (begin (if (not j3619@lab) (j2303@raise-unbound-error j3617@id) (void)) (if (not (and (eq? j3623@type '$rtd) (list? (j2301@binding-value j3621@b)))) (j2995@syntax-violation '#f '"not a record type" j3605@e) (void)) (j2796@chi-expr (car (j2301@binding-value j3621@b)) j3606@r j3607@mr))))) (j2299@binding-type j3621@b))) (j2295@label->binding j3619@lab j3606@r))) (j2291@id->label j3617@id))) j3613@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j3611@t))) (j2762@syntax-dispatch j3611@t '(_ any)))) j3605@e))) (set! j2668@record-constructor-descriptor-transformer (lambda (j3625@e j3626@r j3627@mr) ((lambda (j3631@t) ((lambda (j3633@ls/false) (if (and j3633@ls/false (apply (lambda (j3635@id) (j2265@id? j3635@id)) j3633@ls/false)) (apply (lambda (j3637@id) ((lambda (j3639@lab) ((lambda (j3641@b) ((lambda (j3643@type) ((lambda () (begin (if (not j3639@lab) (j2303@raise-unbound-error j3637@id) (void)) (if (not (and (eq? j3643@type '$rtd) (list? (j2301@binding-value j3641@b)))) (j2995@syntax-violation '#f '"invalid type" j3625@e) (void)) (j2796@chi-expr (cadr (j2301@binding-value j3641@b)) j3626@r j3627@mr))))) (j2299@binding-type j3641@b))) (j2295@label->binding j3639@lab j3626@r))) (j2291@id->label j3637@id))) j3633@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j3631@t))) (j2762@syntax-dispatch j3631@t '(_ any)))) j3625@e))) (set! j2670@when-macro (lambda (j3645@e) ((lambda (j3647@t) ((lambda (j3649@ls/false) (if j3649@ls/false (apply (lambda (j3651@test j3652@e j3653@e*) (j2688@bless (list 'if j3651@test (cons 'begin (cons j3652@e j3653@e*))))) j3649@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j3647@t))) (j2762@syntax-dispatch j3647@t '(_ any any . each-any)))) j3645@e))) (set! j2672@unless-macro (lambda (j3657@e) ((lambda (j3659@t) ((lambda (j3661@ls/false) (if j3661@ls/false (apply (lambda (j3663@test j3664@e j3665@e*) (j2688@bless (list 'if (list 'not j3663@test) (cons 'begin (cons j3664@e j3665@e*))))) j3661@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j3659@t))) (j2762@syntax-dispatch j3659@t '(_ any any . each-any)))) j3657@e))) (set! j2674@if-transformer (lambda (j3669@e j3670@r j3671@mr) ((lambda (j3675@t) ((lambda (j3677@ls/false) (if j3677@ls/false (apply (lambda (j3679@e0 j3680@e1 j3681@e2) (list 'if (j2796@chi-expr j3679@e0 j3670@r j3671@mr) (j2796@chi-expr j3680@e1 j3670@r j3671@mr) (j2796@chi-expr j3681@e2 j3670@r j3671@mr))) j3677@ls/false) ((lambda (j3685@t) ((lambda (j3687@ls/false) (if j3687@ls/false (apply (lambda (j3689@e0 j3690@e1) (list 'if (j2796@chi-expr j3689@e0 j3670@r j3671@mr) (j2796@chi-expr j3690@e1 j3670@r j3671@mr) (j2105@j1963@build-void))) j3687@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j3685@t))) (j2762@syntax-dispatch j3685@t '(_ any any)))) j3675@t))) (j2762@syntax-dispatch j3675@t '(_ any any any)))) j3669@e))) (set! j2676@and-transformer (lambda (j3693@e j3694@r j3695@mr) ((lambda (j3699@t) ((lambda (j3701@ls/false) (if j3701@ls/false (apply (lambda (j3703@e*) (cons 'and (j2792@chi-expr* j3703@e* j3694@r j3695@mr))) j3701@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j3699@t))) (j2762@syntax-dispatch j3699@t '(_ . each-any)))) j3693@e))) (set! j2678@or-transformer (lambda (j3705@e j3706@r j3707@mr) ((lambda (j3711@t) ((lambda (j3713@ls/false) (if j3713@ls/false (apply (lambda (j3715@e*) (cons 'or (j2792@chi-expr* j3715@e* j3706@r j3707@mr))) j3713@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j3711@t))) (j2762@syntax-dispatch j3711@t '(_ . each-any)))) j3705@e))) (set! j2680@case-macro (lambda (j3717@e) ((lambda (j3720@build-last j3722@build-one) (begin (set! j3720@build-last (lambda (j3759@cls) ((lambda (j3761@t) ((lambda (j3763@ls/false) (if j3763@ls/false (apply (lambda (j3765@e j3766@e*) (cons 'begin (cons j3765@e j3766@e*))) j3763@ls/false) ((lambda (j3769@t) ((lambda (j3771@ls/false) (if j3771@ls/false (apply (lambda () (j3722@build-one j3759@cls '(if #f #f))) j3771@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j3769@t))) (j2762@syntax-dispatch j3769@t '_))) j3761@t))) (j2762@syntax-dispatch j3761@t '(#(scheme-id else) any . each-any)))) j3759@cls))) (set! j3722@build-one (lambda (j3745@cls j3746@k) ((lambda (j3749@t) ((lambda (j3751@ls/false) (if j3751@ls/false (apply (lambda (j3753@d* j3754@e j3755@e*) (list 'if (list 'memv 't (list 'quote j3753@d*)) (cons 'begin (cons j3754@e j3755@e*)) j3746@k)) j3751@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j3749@t))) (j2762@syntax-dispatch j3749@t '(each-any any . each-any)))) j3745@cls))) ((lambda (j3723@t) ((lambda (j3725@ls/false) (if j3725@ls/false (apply (lambda (j3727@expr) (j2688@bless (cons 'let (cons (list (list 't j3727@expr)) '((if #f #f)))))) j3725@ls/false) ((lambda (j3729@t) ((lambda (j3731@ls/false) (if j3731@ls/false (apply (lambda (j3733@expr j3734@cls j3735@cls*) (j2688@bless (list 'let (list (list 't j3733@expr)) ((letrec ((j3739@f (lambda (j3741@cls j3742@cls*) (if (null? j3742@cls*) (j3720@build-last j3741@cls) (j3722@build-one j3741@cls (j3739@f (car j3742@cls*) (cdr j3742@cls*))))))) j3739@f) j3734@cls j3735@cls*)))) j3731@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j3729@t))) (j2762@syntax-dispatch j3729@t '(_ any any . each-any)))) j3723@t))) (j2762@syntax-dispatch j3723@t '(_ any)))) j3717@e))) '#f '#f))) (set! j2682@quote-transformer (lambda (j3773@e j3774@r j3775@mr) ((lambda (j3779@t) ((lambda (j3781@ls/false) (if j3781@ls/false (apply (lambda (j3783@datum) (list 'quote (j2287@stx->datum j3783@datum))) j3781@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j3779@t))) (j2762@syntax-dispatch j3779@t '(_ any)))) j3773@e))) (set! j2684@case-lambda-transformer (lambda (j3785@e j3786@r j3787@mr) ((lambda (j3791@t) ((lambda (j3793@ls/false) (if j3793@ls/false (apply (lambda (j3795@fmls* j3796@b* j3797@b**) (call-with-values (lambda () (j2804@chi-lambda-clause* j3785@e j3795@fmls* (map cons j3796@b* j3797@b**) j3786@r j3787@mr)) (lambda (j3803@j3801@fmls* j3804@j3802@body*) ((lambda (j3807@body* j3808@fmls*) (j2102@j1913@build-case-lambda '#f j3808@fmls* j3807@body*)) j3804@j3802@body* j3803@j3801@fmls*)))) j3793@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j3791@t))) (j2762@syntax-dispatch j3791@t '(_ . #(each (any any . each-any)))))) j3785@e))) (set! j2686@lambda-transformer (lambda (j3811@e j3812@r j3813@mr) ((lambda (j3817@t) ((lambda (j3819@ls/false) (if j3819@ls/false (apply (lambda (j3821@fmls j3822@b j3823@b*) (call-with-values (lambda () (j2802@chi-lambda-clause j3811@e j3821@fmls (cons j3822@b j3823@b*) j3812@r j3813@mr)) (lambda (j3829@j3827@fmls j3830@j3828@body) ((lambda (j3833@body j3834@fmls) (j2101@j1911@build-lambda '#f j3834@fmls j3833@body)) j3830@j3828@body j3829@j3827@fmls)))) j3819@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j3817@t))) (j2762@syntax-dispatch j3817@t '(_ any any . each-any)))) j3811@e))) (set! j2688@bless (lambda (j3837@x) (j2241@mkstx ((letrec ((j3839@f (lambda (j3841@x) (if (j2209@stx? j3841@x) j3841@x (if (pair? j3841@x) (cons (j3839@f (car j3841@x)) (j3839@f (cdr j3841@x))) (if (symbol? j3841@x) (j2644@scheme-stx j3841@x) (if (vector? j3841@x) (vector-map j3839@f j3841@x) j3841@x))))))) j3839@f) j3837@x) '() '() '()))) (set! j2690@with-syntax-macro (lambda (j3843@e) ((lambda (j3845@t) ((lambda (j3847@ls/false) (if j3847@ls/false (apply (lambda (j3849@pat* j3850@expr* j3851@b j3852@b*) ((lambda (j3857@idn*) (begin (j2800@verify-formals (map car j3857@idn*) j3843@e) ((lambda (j3859@t*) (j2688@bless (list 'let (map list j3859@t* j3850@expr*) ((letrec ((j3861@f (lambda (j3863@pat* j3864@t*) (if (null? j3863@pat*) (cons 'begin (cons '#f (cons j3851@b j3852@b*))) (list 'syntax-case (car j3864@t*) '() (list (car j3863@pat*) (j3861@f (cdr j3863@pat*) (cdr j3864@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car j3863@pat*)) (car j3864@t*)))))))) j3861@f) j3849@pat* j3859@t*)))) (j2977@generate-temporaries j3850@expr*)))) ((letrec ((j3867@f (lambda (j3869@pat*) (if (null? j3869@pat*) '() (call-with-values (lambda () (j2760@convert-pattern (car j3869@pat*) '())) (lambda (j3873@j3871@pat j3874@j3872@idn*) ((lambda (j3877@idn* j3878@pat) (append j3877@idn* (j3867@f (cdr j3869@pat*)))) j3874@j3872@idn* j3873@j3871@pat))))))) j3867@f) j3849@pat*))) j3847@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j3845@t))) (j2762@syntax-dispatch j3845@t '(_ #(each (any any)) any . each-any)))) j3843@e))) (set! j2692@invalid-fmls-error (lambda (j3881@stx j3882@fmls) ((lambda (j3885@t) ((lambda (j3887@ls/false) (if j3887@ls/false (apply (lambda (j3889@id* j3890@last) ((letrec ((j3893@f (lambda (j3895@id*) (if (null? j3895@id*) (values) (if (not (j2265@id? (car j3895@id*))) (j2995@syntax-violation '#f '"not an identifier" j3881@stx (car j3895@id*)) (begin (j3893@f (cdr j3895@id*)) (if (j2279@bound-id-member? (car j3895@id*) (cdr j3895@id*)) (j2995@syntax-violation '#f '"duplicate binding" j3881@stx (car j3895@id*)) (void)))))))) j3893@f) (if (j2265@id? j3890@last) (cons j3890@last j3889@id*) (if (j2255@syntax-null? j3890@last) j3889@id* (j2995@syntax-violation '#f '"not an identifier" j3881@stx j3890@last))))) j3887@ls/false) ((lambda (j3897@t) ((lambda (j3899@ls/false) (if j3899@ls/false (apply (lambda () (j2995@syntax-violation '#f '"malformed binding form" j3881@stx j3882@fmls)) j3899@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j3897@t))) (j2762@syntax-dispatch j3897@t '_))) j3885@t))) (j2762@syntax-dispatch j3885@t '#(each+ any () any)))) j3882@fmls))) (set! j2694@let-macro (lambda (j3901@stx) ((lambda (j3903@t) ((lambda (j3905@ls/false) (if j3905@ls/false (apply (lambda (j3907@lhs* j3908@rhs* j3909@b j3910@b*) (if (j2275@valid-bound-ids? j3907@lhs*) (j2688@bless (cons (cons 'lambda (cons j3907@lhs* (cons j3909@b j3910@b*))) j3908@rhs*)) (j2692@invalid-fmls-error j3901@stx j3907@lhs*))) j3905@ls/false) ((lambda (j3915@t) ((lambda (j3917@ls/false) (if (and j3917@ls/false (apply (lambda (j3919@f j3920@lhs* j3921@rhs* j3922@b j3923@b*) (j2265@id? j3919@f)) j3917@ls/false)) (apply (lambda (j3929@f j3930@lhs* j3931@rhs* j3932@b j3933@b*) (if (j2275@valid-bound-ids? j3930@lhs*) (j2688@bless (cons (list 'letrec (list (list j3929@f (cons 'lambda (cons j3930@lhs* (cons j3932@b j3933@b*))))) j3929@f) j3931@rhs*)) (j2692@invalid-fmls-error j3901@stx j3930@lhs*))) j3917@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j3915@t))) (j2762@syntax-dispatch j3915@t '(_ any #(each (any any)) any . each-any)))) j3903@t))) (j2762@syntax-dispatch j3903@t '(_ #(each (any any)) any . each-any)))) j3901@stx))) (set! j2696@let-values-macro (lambda (j3939@stx) ((lambda (j3942@rename j3944@rename*) (begin (set! j3942@rename (lambda (j4040@x j4041@old* j4042@new*) (begin (if (not (j2265@id? j4040@x)) (j2995@syntax-violation '#f '"not an indentifier" j3939@stx j4040@x) (void)) (if (j2279@bound-id-member? j4040@x j4041@old*) (j2995@syntax-violation '#f '"duplicate binding" j3939@stx j4040@x) (void)) ((lambda (j4046@y) (values j4046@y (cons j4040@x j4041@old*) (cons j4046@y j4042@new*))) (j1149@j913@gensym (j3001@syntax->datum j4040@x)))))) (set! j3944@rename* (lambda (j4022@x* j4023@old* j4024@new*) (if (null? j4022@x*) (values '() j4023@old* j4024@new*) (call-with-values (lambda () (j3942@rename (car j4022@x*) j4023@old* j4024@new*)) (lambda (j4028@x j4029@old* j4030@new*) (call-with-values (lambda () (j3944@rename* (cdr j4022@x*) j4029@old* j4030@new*)) (lambda (j4034@x* j4035@old* j4036@new*) (values (cons j4028@x j4034@x*) j4035@old* j4036@new*)))))))) ((lambda (j3945@t) ((lambda (j3947@ls/false) (if j3947@ls/false (apply (lambda (j3949@b j3950@b*) (cons* (j2688@bless 'let) '() j3949@b j3950@b*)) j3947@ls/false) ((lambda (j3953@t) ((lambda (j3955@ls/false) (if j3955@ls/false (apply (lambda (j3957@lhs* j3958@rhs* j3959@b j3960@b*) (j2688@bless ((letrec ((j3965@f (lambda (j3967@lhs* j3968@rhs* j3969@old* j3970@new*) (if (null? j3967@lhs*) (cons 'let (cons (map list j3969@old* j3970@new*) (cons j3959@b j3960@b*))) ((lambda (j3975@t) ((lambda (j3977@ls/false) (if j3977@ls/false (apply (lambda (j3979@x*) (call-with-values (lambda () (j3944@rename* j3979@x* j3969@old* j3970@new*)) (lambda (j3984@j3981@y* j3985@j3982@old* j3986@j3983@new*) ((lambda (j3990@new* j3991@old* j3992@y*) (list 'call-with-values (list 'lambda '() (car j3968@rhs*)) (list 'lambda j3992@y* (j3965@f (cdr j3967@lhs*) (cdr j3968@rhs*) j3991@old* j3990@new*)))) j3986@j3983@new* j3985@j3982@old* j3984@j3981@y*)))) j3977@ls/false) ((lambda (j3996@t) ((lambda (j3998@ls/false) (if j3998@ls/false (apply (lambda (j4000@x* j4001@x) (call-with-values (lambda () (j3942@rename j4001@x j3969@old* j3970@new*)) (lambda (j4004@y j4005@old* j4006@new*) (call-with-values (lambda () (j3944@rename* j4000@x* j4005@old* j4006@new*)) (lambda (j4010@y* j4011@old* j4012@new*) (list 'call-with-values (list 'lambda '() (car j3968@rhs*)) (list 'lambda (append j4010@y* j4004@y) (j3965@f (cdr j3967@lhs*) (cdr j3968@rhs*) j4011@old* j4012@new*)))))))) j3998@ls/false) ((lambda (j4016@t) ((lambda (j4018@ls/false) (if j4018@ls/false (apply (lambda (j4020@others) (j2995@syntax-violation '#f '"malformed bindings" j3939@stx j4020@others)) j4018@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4016@t))) (j2762@syntax-dispatch j4016@t 'any))) j3996@t))) (j2762@syntax-dispatch j3996@t '#(each+ any () any)))) j3975@t))) (j2762@syntax-dispatch j3975@t 'each-any))) (car j3967@lhs*)))))) j3965@f) j3957@lhs* j3958@rhs* '() '()))) j3955@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j3953@t))) (j2762@syntax-dispatch j3953@t '(_ #(each (any any)) any . each-any)))) j3945@t))) (j2762@syntax-dispatch j3945@t '(_ () any . each-any)))) j3939@stx))) '#f '#f))) (set! j2698@let*-values-macro (lambda (j4048@stx) ((lambda (j4051@check) (begin (set! j4051@check (lambda (j4098@x*) (if (not (null? j4098@x*)) ((lambda (j4100@x) (begin (if (not (j2265@id? j4100@x)) (j2995@syntax-violation '#f '"not an identifier" j4048@stx j4100@x) (void)) (j4051@check (cdr j4098@x*)) (if (j2279@bound-id-member? j4100@x (cdr j4098@x*)) (j2995@syntax-violation '#f '"duplicate identifier" j4048@stx j4100@x) (void)))) (car j4098@x*)) (void)))) ((lambda (j4052@t) ((lambda (j4054@ls/false) (if j4054@ls/false (apply (lambda (j4056@b j4057@b*) (cons* (j2688@bless 'let) '() j4056@b j4057@b*)) j4054@ls/false) ((lambda (j4060@t) ((lambda (j4062@ls/false) (if j4062@ls/false (apply (lambda (j4064@lhs* j4065@rhs* j4066@b j4067@b*) (j2688@bless ((letrec ((j4072@f (lambda (j4074@lhs* j4075@rhs*) (if (null? j4074@lhs*) (cons 'begin (cons j4066@b j4067@b*)) ((lambda (j4078@t) ((lambda (j4080@ls/false) (if j4080@ls/false (apply (lambda (j4082@x*) (begin (j4051@check j4082@x*) (list 'call-with-values (list 'lambda '() (car j4075@rhs*)) (list 'lambda j4082@x* (j4072@f (cdr j4074@lhs*) (cdr j4075@rhs*)))))) j4080@ls/false) ((lambda (j4084@t) ((lambda (j4086@ls/false) (if j4086@ls/false (apply (lambda (j4088@x* j4089@x) (begin (j4051@check (cons j4089@x j4088@x*)) (list 'call-with-values (list 'lambda '() (car j4075@rhs*)) (list 'lambda (append j4088@x* j4089@x) (j4072@f (cdr j4074@lhs*) (cdr j4075@rhs*)))))) j4086@ls/false) ((lambda (j4092@t) ((lambda (j4094@ls/false) (if j4094@ls/false (apply (lambda (j4096@others) (j2995@syntax-violation '#f '"malformed bindings" j4048@stx j4096@others)) j4094@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4092@t))) (j2762@syntax-dispatch j4092@t 'any))) j4084@t))) (j2762@syntax-dispatch j4084@t '#(each+ any () any)))) j4078@t))) (j2762@syntax-dispatch j4078@t 'each-any))) (car j4074@lhs*)))))) j4072@f) j4064@lhs* j4065@rhs*))) j4062@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4060@t))) (j2762@syntax-dispatch j4060@t '(_ #(each (any any)) any . each-any)))) j4052@t))) (j2762@syntax-dispatch j4052@t '(_ () any . each-any)))) j4048@stx))) '#f))) (set! j2700@trace-lambda-macro (lambda (j4102@stx) ((lambda (j4104@t) ((lambda (j4106@ls/false) (if j4106@ls/false (apply (lambda (j4108@who j4109@fmls j4110@b j4111@b*) (if (j2275@valid-bound-ids? j4109@fmls) (j2688@bless (list 'make-traced-procedure (list 'quote j4108@who) (cons 'lambda (cons j4109@fmls (cons j4110@b j4111@b*))))) (j2692@invalid-fmls-error j4102@stx j4109@fmls))) j4106@ls/false) ((lambda (j4116@t) ((lambda (j4118@ls/false) (if j4118@ls/false (apply (lambda (j4120@who j4121@fmls j4122@last j4123@b j4124@b*) (if (j2275@valid-bound-ids? (cons j4122@last j4121@fmls)) (j2688@bless (list 'make-traced-procedure (list 'quote j4120@who) (cons 'lambda (cons (append j4121@fmls j4122@last) (cons j4123@b j4124@b*))))) (j2692@invalid-fmls-error j4102@stx (append j4121@fmls j4122@last)))) j4118@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4116@t))) (j2762@syntax-dispatch j4116@t '(_ any #(each+ any () any) any . each-any)))) j4104@t))) (j2762@syntax-dispatch j4104@t '(_ any each-any any . each-any)))) j4102@stx))) (set! j2702@trace-define-macro (lambda (j4130@stx) ((lambda (j4132@t) ((lambda (j4134@ls/false) (if j4134@ls/false (apply (lambda (j4136@who j4137@fmls j4138@b j4139@b*) (if (j2275@valid-bound-ids? j4137@fmls) (j2688@bless (list 'define j4136@who (list 'make-traced-procedure (list 'quote j4136@who) (cons 'lambda (cons j4137@fmls (cons j4138@b j4139@b*)))))) (j2692@invalid-fmls-error j4130@stx j4137@fmls))) j4134@ls/false) ((lambda (j4144@t) ((lambda (j4146@ls/false) (if j4146@ls/false (apply (lambda (j4148@who j4149@fmls j4150@last j4151@b j4152@b*) (if (j2275@valid-bound-ids? (cons j4150@last j4149@fmls)) (j2688@bless (list 'define j4148@who (list 'make-traced-procedure (list 'quote j4148@who) (cons 'lambda (cons (append j4149@fmls j4150@last) (cons j4151@b j4152@b*)))))) (j2692@invalid-fmls-error j4130@stx (append j4149@fmls j4150@last)))) j4146@ls/false) ((lambda (j4158@t) ((lambda (j4160@ls/false) (if j4160@ls/false (apply (lambda (j4162@who j4163@expr) (if (j2265@id? j4162@who) (j2688@bless (list 'define j4162@who (list 'let (list (list 'v j4163@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote j4162@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (j2995@syntax-violation '#f '"invalid name" j4130@stx))) j4160@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4158@t))) (j2762@syntax-dispatch j4158@t '(_ any any)))) j4144@t))) (j2762@syntax-dispatch j4144@t '(_ (any . #(each+ any () any)) any . each-any)))) j4132@t))) (j2762@syntax-dispatch j4132@t '(_ (any . each-any) any . each-any)))) j4130@stx))) (set! j2704@trace-define-syntax-macro (lambda (j4166@stx) ((lambda (j4168@t) ((lambda (j4170@ls/false) (if j4170@ls/false (apply (lambda (j4172@who j4173@expr) (if (j2265@id? j4172@who) (j2688@bless (list 'define-syntax j4172@who (list 'make-traced-macro (list 'quote j4172@who) j4173@expr))) (j2995@syntax-violation '#f '"invalid name" j4166@stx))) j4170@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4168@t))) (j2762@syntax-dispatch j4168@t '(_ any any)))) j4166@stx))) (set! j2706@trace-let/rec-syntax (lambda (j4176@who) (lambda (j4178@stx) ((lambda (j4180@t) ((lambda (j4182@ls/false) (if j4182@ls/false (apply (lambda (j4184@lhs* j4185@rhs* j4186@b j4187@b*) (if (j2275@valid-bound-ids? j4184@lhs*) ((lambda (j4192@rhs*) (j2688@bless (cons j4176@who (cons (map list j4184@lhs* j4192@rhs*) (cons j4186@b j4187@b*))))) (map (lambda (j4194@lhs j4195@rhs) (list 'make-traced-macro (list 'quote j4194@lhs) j4195@rhs)) j4184@lhs* j4185@rhs*)) (j2692@invalid-fmls-error j4178@stx j4184@lhs*))) j4182@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4180@t))) (j2762@syntax-dispatch j4180@t '(_ #(each (any any)) any . each-any)))) j4178@stx)))) (set! j2708@trace-let-syntax-macro (j2706@trace-let/rec-syntax 'let-syntax)) (set! j2710@trace-letrec-syntax-macro (j2706@trace-let/rec-syntax 'letrec-syntax)) (set! j2712@guard-macro (lambda (j4198@x) ((lambda (j4201@gen-clauses) (begin (set! j4201@gen-clauses (lambda (j4224@con j4225@outerk j4226@clause*) ((lambda (j4231@f j4233@f*) (begin (set! j4231@f (lambda (j4284@x j4285@k) ((lambda (j4288@t) ((lambda (j4290@ls/false) (if j4290@ls/false (apply (lambda (j4292@e j4293@p) ((lambda (j4296@t) (list 'let (list (list j4296@t j4292@e)) (list 'if j4296@t (list j4293@p j4296@t) j4285@k))) (j1149@j913@gensym))) j4290@ls/false) ((lambda (j4298@t) ((lambda (j4300@ls/false) (if j4300@ls/false (apply (lambda (j4302@e) ((lambda (j4304@t) (list 'let (list (list j4304@t j4302@e)) (list 'if j4304@t j4304@t j4285@k))) (j1149@j913@gensym))) j4300@ls/false) ((lambda (j4306@t) ((lambda (j4308@ls/false) (if j4308@ls/false (apply (lambda (j4310@e j4311@v j4312@v*) (list 'if j4310@e (cons 'begin (cons j4311@v j4312@v*)) j4285@k)) j4308@ls/false) ((lambda (j4316@t) ((lambda (j4318@ls/false) (if j4318@ls/false (apply (lambda () (j2995@syntax-violation '#f '"invalid guard clause" j4284@x)) j4318@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4316@t))) (j2762@syntax-dispatch j4316@t '_))) j4306@t))) (j2762@syntax-dispatch j4306@t '(any any . each-any)))) j4298@t))) (j2762@syntax-dispatch j4298@t '(any)))) j4288@t))) (j2762@syntax-dispatch j4288@t '(any #(scheme-id =>) any)))) j4284@x))) (set! j4233@f* (lambda (j4244@x*) ((lambda (j4246@t) ((lambda (j4248@ls/false) (if j4248@ls/false (apply (lambda () ((lambda (j4250@g) (values (list j4250@g (list 'lambda '() (list 'raise-continuable j4224@con))) j4250@g)) (j1149@j913@gensym))) j4248@ls/false) ((lambda (j4252@t) ((lambda (j4254@ls/false) (if j4254@ls/false (apply (lambda (j4256@e j4257@e*) (values (cons 'begin (cons j4256@e j4257@e*)) '#f)) j4254@ls/false) ((lambda (j4260@t) ((lambda (j4262@ls/false) (if j4262@ls/false (apply (lambda (j4264@cls j4265@cls*) (call-with-values (lambda () (j4233@f* j4265@cls*)) (lambda (j4270@j4268@e j4271@j4269@g) ((lambda (j4274@g j4275@e) (values (j4231@f j4264@cls j4275@e) j4274@g)) j4271@j4269@g j4270@j4268@e)))) j4262@ls/false) ((lambda (j4278@t) ((lambda (j4280@ls/false) (if j4280@ls/false (apply (lambda (j4282@others) (j2995@syntax-violation '#f '"invalid guard clause" j4282@others)) j4280@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4278@t))) (j2762@syntax-dispatch j4278@t 'any))) j4260@t))) (j2762@syntax-dispatch j4260@t '(any . any)))) j4252@t))) (j2762@syntax-dispatch j4252@t '((#(scheme-id else) any . each-any))))) j4246@t))) (j2762@syntax-dispatch j4246@t '()))) j4244@x*))) (call-with-values (lambda () (j4233@f* j4226@clause*)) (lambda (j4236@j4234@code j4237@j4235@raisek) ((lambda (j4240@raisek j4241@code) (if j4240@raisek (list (list 'call/cc (list 'lambda (list j4240@raisek) (list j4225@outerk (list 'lambda '() j4241@code))))) (list j4225@outerk (list 'lambda '() j4241@code)))) j4237@j4235@raisek j4236@j4234@code))))) '#f '#f))) ((lambda (j4202@t) ((lambda (j4204@ls/false) (if (and j4204@ls/false (apply (lambda (j4206@con j4207@clause* j4208@b j4209@b*) (j2265@id? j4206@con)) j4204@ls/false)) (apply (lambda (j4214@con j4215@clause* j4216@b j4217@b*) ((lambda (j4222@outerk) (j2688@bless (list (list 'call/cc (list 'lambda (list j4222@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list j4214@con) (j4201@gen-clauses j4214@con j4222@outerk j4215@clause*)) (cons 'lambda (cons '() (cons j4216@b j4217@b*)))))))))) (j1149@j913@gensym))) j4204@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4202@t))) (j2762@syntax-dispatch j4202@t '(_ (any . each-any) any . each-any)))) j4198@x))) '#f))) (set! j2714@define-enumeration-macro (lambda (j4320@stx) ((lambda (j4323@set? j4325@remove-dups) (begin (set! j4323@set? (lambda (j4348@x) (or (null? j4348@x) (and (not (memq (car j4348@x) (cdr j4348@x))) (j4323@set? (cdr j4348@x)))))) (set! j4325@remove-dups (lambda (j4346@ls) (if (null? j4346@ls) '() (cons (car j4346@ls) (j4325@remove-dups (remq (car j4346@ls) (cdr j4346@ls))))))) ((lambda (j4326@t) ((lambda (j4328@ls/false) (if (and j4328@ls/false (apply (lambda (j4330@name j4331@id* j4332@maker) (and (j2265@id? j4330@name) (j2265@id? j4332@maker) (for-all j2265@id? j4331@id*))) j4328@ls/false)) (apply (lambda (j4336@name j4337@id* j4338@maker) ((lambda (j4342@name* j4343@mk) (j2688@bless (list 'begin (list 'define j4343@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote j4342@name*)))) (list 'define-syntax j4336@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote j4342@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote j4336@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax j4338@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote j4338@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote j4342@name*)) (cons 'syntax-violation (cons (list 'quote j4338@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons j4343@mk '('(n* ...)))))))))))) (j4325@remove-dups (j3001@syntax->datum j4337@id*)) (j1149@j913@gensym))) j4328@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4326@t))) (j2762@syntax-dispatch j4326@t '(_ any each-any any)))) j4320@stx))) '#f '#f))) (set! j2716@time-macro (lambda (j4350@stx) ((lambda (j4352@t) ((lambda (j4354@ls/false) (if j4354@ls/false (apply (lambda (j4356@expr) (j2688@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() j4356@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) j4354@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4352@t))) (j2762@syntax-dispatch j4352@t '(_ any)))) j4350@stx))) (set! j2718@delay-macro (lambda (j4358@stx) ((lambda (j4360@t) ((lambda (j4362@ls/false) (if j4362@ls/false (apply (lambda (j4364@expr) (j2688@bless (list 'make-promise (list 'lambda '() j4364@expr)))) j4362@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4360@t))) (j2762@syntax-dispatch j4360@t '(_ any)))) j4358@stx))) (set! j2720@assert-macro (lambda (j4366@stx) ((lambda (j4368@t) ((lambda (j4370@ls/false) (if j4370@ls/false (apply (lambda (j4372@expr) ((lambda (j4374@pos) (j2688@bless (list 'unless j4372@expr (list 'assertion-error (list 'quote j4372@expr) (list 'quote j4374@pos))))) (or (j2987@expression-position j4366@stx) (j2987@expression-position j4372@expr)))) j4370@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4368@t))) (j2762@syntax-dispatch j4368@t '(_ any)))) j4366@stx))) (set! j2722@endianness-macro (lambda (j4376@stx) ((lambda (j4378@t) ((lambda (j4380@ls/false) (if j4380@ls/false (apply (lambda (j4382@e) ((lambda (j4384@t) (if (memv j4384@t '(little)) (j2688@bless ''little) (if (memv j4384@t '(big)) (j2688@bless ''big) (j2995@syntax-violation '#f '"endianness must be big or little" j4376@stx)))) (j3001@syntax->datum j4382@e))) j4380@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4378@t))) (j2762@syntax-dispatch j4378@t '(_ any)))) j4376@stx))) (set! j2724@identifier-syntax-macro (lambda (j4386@stx) ((lambda (j4388@t) ((lambda (j4390@ls/false) (if j4390@ls/false (apply (lambda (j4392@expr) (j2688@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax j4392@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax j4392@expr) '((syntax (e* ...)))))))))) j4390@ls/false) ((lambda (j4394@t) ((lambda (j4396@ls/false) (if (and j4396@ls/false (apply (lambda (j4398@id1 j4399@expr1 j4400@id2 j4401@expr2 j4402@expr3) (and (j2265@id? j4398@id1) (j2265@id? j4400@id2) (j2265@id? j4401@expr2))) j4396@ls/false)) (apply (lambda (j4408@id1 j4409@expr1 j4410@id2 j4411@expr2 j4412@expr3) (j2688@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax j4409@expr1)) (list (list 'set! 'id j4411@expr2) (list 'syntax j4412@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons j4409@expr1 '(e* ...))))))))) j4396@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4394@t))) (j2762@syntax-dispatch j4394@t '(_ (any any) ((#(scheme-id set!) any any) any))))) j4388@t))) (j2762@syntax-dispatch j4388@t '(_ any)))) j4386@stx))) (set! j2726@do-macro (lambda (j4418@stx) ((lambda (j4421@bind) (begin (set! j4421@bind (lambda (j4444@x) ((lambda (j4446@t) ((lambda (j4448@ls/false) (if j4448@ls/false (apply (lambda (j4450@x j4451@init) (list j4450@x j4451@init j4450@x)) j4448@ls/false) ((lambda (j4454@t) ((lambda (j4456@ls/false) (if j4456@ls/false (apply (lambda (j4458@x j4459@init j4460@step) (list j4458@x j4459@init j4460@step)) j4456@ls/false) ((lambda (j4464@t) ((lambda (j4466@ls/false) (if j4466@ls/false (apply (lambda () (j2995@syntax-violation '#f '"invalid binding" j4418@stx)) j4466@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4464@t))) (j2762@syntax-dispatch j4464@t '_))) j4454@t))) (j2762@syntax-dispatch j4454@t '(any any any)))) j4446@t))) (j2762@syntax-dispatch j4446@t '(any any)))) j4444@x))) ((lambda (j4422@t) ((lambda (j4424@ls/false) (if j4424@ls/false (apply (lambda (j4426@binding* j4427@test j4428@expr* j4429@command*) ((lambda (j4434@t) ((lambda (j4436@ls/false) (if j4436@ls/false (apply (lambda (j4438@x* j4439@init* j4440@step*) (if (j2275@valid-bound-ids? j4438@x*) (j2688@bless (list 'letrec (list (list 'loop (list 'lambda j4438@x* (list 'if j4427@test (cons 'begin (cons '(if #f #f) j4428@expr*)) (cons 'begin (append j4429@command* (list (cons 'loop j4440@step*)))))))) (cons 'loop j4439@init*))) (j2995@syntax-violation '#f '"invalid bindings" j4418@stx))) j4436@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4434@t))) (j2762@syntax-dispatch j4434@t '#(each (any any any))))) (map j4421@bind j4426@binding*))) j4424@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4422@t))) (j2762@syntax-dispatch j4422@t '(_ each-any (any . each-any) . each-any)))) j4418@stx))) '#f))) (set! j2728@let*-macro (lambda (j4468@stx) ((lambda (j4470@t) ((lambda (j4472@ls/false) (if (and j4472@ls/false (apply (lambda (j4474@lhs* j4475@rhs* j4476@b j4477@b*) (for-all j2265@id? j4474@lhs*)) j4472@ls/false)) (apply (lambda (j4482@lhs* j4483@rhs* j4484@b j4485@b*) (j2688@bless ((letrec ((j4490@f (lambda (j4492@x*) (if (null? j4492@x*) (cons 'let (cons '() (cons j4484@b j4485@b*))) (list 'let (list (car j4492@x*)) (j4490@f (cdr j4492@x*))))))) j4490@f) (map list j4482@lhs* j4483@rhs*)))) j4472@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4470@t))) (j2762@syntax-dispatch j4470@t '(_ #(each (any any)) any . each-any)))) j4468@stx))) (set! j2730@or-macro (lambda (j4494@stx) ((lambda (j4496@t) ((lambda (j4498@ls/false) (if j4498@ls/false (apply (lambda () '#f) j4498@ls/false) ((lambda (j4500@t) ((lambda (j4502@ls/false) (if j4502@ls/false (apply (lambda (j4504@e j4505@e*) (j2688@bless ((letrec ((j4508@f (lambda (j4510@e j4511@e*) (if (null? j4511@e*) (list 'begin '#f j4510@e) (list 'let (list (list 't j4510@e)) (list 'if 't 't (j4508@f (car j4511@e*) (cdr j4511@e*)))))))) j4508@f) j4504@e j4505@e*))) j4502@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4500@t))) (j2762@syntax-dispatch j4500@t '(_ any . each-any)))) j4496@t))) (j2762@syntax-dispatch j4496@t '(_)))) j4494@stx))) (set! j2732@and-macro (lambda (j4514@stx) ((lambda (j4516@t) ((lambda (j4518@ls/false) (if j4518@ls/false (apply (lambda () '#t) j4518@ls/false) ((lambda (j4520@t) ((lambda (j4522@ls/false) (if j4522@ls/false (apply (lambda (j4524@e j4525@e*) (j2688@bless ((letrec ((j4528@f (lambda (j4530@e j4531@e*) (if (null? j4531@e*) (list 'begin '#f j4530@e) (cons 'if (cons j4530@e (cons (j4528@f (car j4531@e*) (cdr j4531@e*)) '(#f)))))))) j4528@f) j4524@e j4525@e*))) j4522@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4520@t))) (j2762@syntax-dispatch j4520@t '(_ any . each-any)))) j4516@t))) (j2762@syntax-dispatch j4516@t '(_)))) j4514@stx))) (set! j2734@cond-macro (lambda (j4534@stx) ((lambda (j4536@t) ((lambda (j4538@ls/false) (if j4538@ls/false (apply (lambda (j4540@cls j4541@cls*) (j2688@bless ((letrec ((j4544@f (lambda (j4546@cls j4547@cls*) (if (null? j4547@cls*) ((lambda (j4550@t) ((lambda (j4552@ls/false) (if j4552@ls/false (apply (lambda (j4554@e j4555@e*) (cons 'begin (cons j4554@e j4555@e*))) j4552@ls/false) ((lambda (j4558@t) ((lambda (j4560@ls/false) (if j4560@ls/false (apply (lambda (j4562@e j4563@p) (list 'let (list (list 't j4562@e)) (list 'if 't (cons j4563@p '(t))))) j4560@ls/false) ((lambda (j4566@t) ((lambda (j4568@ls/false) (if j4568@ls/false (apply (lambda (j4570@e) (cons 'or (cons j4570@e '((if #f #f))))) j4568@ls/false) ((lambda (j4572@t) ((lambda (j4574@ls/false) (if j4574@ls/false (apply (lambda (j4576@e j4577@e*) (list 'if j4576@e (cons 'begin j4577@e*))) j4574@ls/false) ((lambda (j4580@t) ((lambda (j4582@ls/false) (if j4582@ls/false (apply (lambda () (j2995@syntax-violation '#f '"invalid last clause" j4534@stx)) j4582@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4580@t))) (j2762@syntax-dispatch j4580@t '_))) j4572@t))) (j2762@syntax-dispatch j4572@t '(any . each-any)))) j4566@t))) (j2762@syntax-dispatch j4566@t '(any)))) j4558@t))) (j2762@syntax-dispatch j4558@t '(any #(scheme-id =>) any)))) j4550@t))) (j2762@syntax-dispatch j4550@t '(#(scheme-id else) any . each-any)))) j4546@cls) ((lambda (j4584@t) ((lambda (j4586@ls/false) (if j4586@ls/false (apply (lambda (j4588@e j4589@e*) (j2995@syntax-violation '#f '"incorrect position of keyword else" j4534@stx)) j4586@ls/false) ((lambda (j4592@t) ((lambda (j4594@ls/false) (if j4594@ls/false (apply (lambda (j4596@e j4597@p) (list 'let (list (list 't j4596@e)) (list 'if 't (cons j4597@p '(t)) (j4544@f (car j4547@cls*) (cdr j4547@cls*))))) j4594@ls/false) ((lambda (j4600@t) ((lambda (j4602@ls/false) (if j4602@ls/false (apply (lambda (j4604@e) (list 'or j4604@e (j4544@f (car j4547@cls*) (cdr j4547@cls*)))) j4602@ls/false) ((lambda (j4606@t) ((lambda (j4608@ls/false) (if j4608@ls/false (apply (lambda (j4610@e j4611@e*) (list 'if j4610@e (cons 'begin j4611@e*) (j4544@f (car j4547@cls*) (cdr j4547@cls*)))) j4608@ls/false) ((lambda (j4614@t) ((lambda (j4616@ls/false) (if j4616@ls/false (apply (lambda () (j2995@syntax-violation '#f '"invalid last clause" j4534@stx)) j4616@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4614@t))) (j2762@syntax-dispatch j4614@t '_))) j4606@t))) (j2762@syntax-dispatch j4606@t '(any . each-any)))) j4600@t))) (j2762@syntax-dispatch j4600@t '(any)))) j4592@t))) (j2762@syntax-dispatch j4592@t '(any #(scheme-id =>) any)))) j4584@t))) (j2762@syntax-dispatch j4584@t '(#(scheme-id else) any . each-any)))) j4546@cls))))) j4544@f) j4540@cls j4541@cls*))) j4538@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4536@t))) (j2762@syntax-dispatch j4536@t '(_ any . each-any)))) j4534@stx))) (set! j2736@do-include (lambda (j4618@stx j4619@id j4620@filename) ((lambda (j4624@filename) (begin (if (not (and (string? j4624@filename) (j2265@id? j4619@id))) (j2995@syntax-violation '#f '"invalid syntax" j4618@stx) (void)) (cons (j2688@bless 'begin) (with-input-from-file j4624@filename (lambda () ((letrec ((j4626@f (lambda (j4628@ls) ((lambda (j4630@x) (if (eof-object? j4630@x) (reverse j4628@ls) (j4626@f (cons (j2231@datum->stx j4619@id j4630@x) j4628@ls)))) (j1150@j915@read-annotated))))) j4626@f) '())))))) (j2287@stx->datum j4620@filename)))) (set! j2738@include-macro (lambda (j4632@e) ((lambda (j4634@t) ((lambda (j4636@ls/false) (if j4636@ls/false (apply (lambda (j4638@id j4639@filename) (j2736@do-include j4632@e j4638@id j4639@filename)) j4636@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4634@t))) (j2762@syntax-dispatch j4634@t '(any any)))) j4632@e))) (set! j2740@include-into-macro (lambda (j4642@e) ((lambda (j4644@t) ((lambda (j4646@ls/false) (if j4646@ls/false (apply (lambda (j4648@id j4649@filename) (j2736@do-include j4642@e j4648@id j4649@filename)) j4646@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4644@t))) (j2762@syntax-dispatch j4644@t '(_ any any)))) j4642@e))) (set! j2742@syntax-rules-macro (lambda (j4652@e) ((lambda (j4654@t) ((lambda (j4656@ls/false) (if j4656@ls/false (apply (lambda (j4658@lits j4659@pat* j4660@tmp*) (begin (j2768@verify-literals j4658@lits j4652@e) (j2688@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons j4658@lits (map (lambda (j4664@pat j4665@tmp) ((lambda (j4668@t) ((lambda (j4670@ls/false) (if j4670@ls/false (apply (lambda (j4672@rest) (list (cons 'g j4672@rest) (list 'syntax j4665@tmp))) j4670@ls/false) ((lambda (j4674@t) ((lambda (j4676@ls/false) (if j4676@ls/false (apply (lambda () (j2995@syntax-violation '#f '"invalid syntax-rules pattern" j4652@e j4664@pat)) j4676@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4674@t))) (j2762@syntax-dispatch j4674@t '_))) j4668@t))) (j2762@syntax-dispatch j4668@t '(_ . any)))) j4664@pat)) j4659@pat* j4660@tmp*)))))))) j4656@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4654@t))) (j2762@syntax-dispatch j4654@t '(_ each-any . #(each (any any)))))) j4652@e))) (set! j2744@quasiquote-macro ((lambda () ((lambda (j4679@datum j4707@quasicons* j4709@quasicons j4711@quasiappend j4713@quasivector j4715@vquasi j4717@quasi) (begin (set! j4679@datum (lambda (j4936@x) (list (j2644@scheme-stx 'quote) (j2241@mkstx j4936@x '() '() '())))) (set! j4707@quasicons* (lambda (j4928@x j4929@y) ((letrec ((j4932@f (lambda (j4934@x) (if (null? j4934@x) j4929@y (j4709@quasicons (car j4934@x) (j4932@f (cdr j4934@x))))))) j4932@f) j4928@x))) (set! j4709@quasicons (lambda (j4890@x j4891@y) ((lambda (j4894@t) ((lambda (j4896@ls/false) (if j4896@ls/false (apply (lambda (j4898@dy) ((lambda (j4900@t) ((lambda (j4902@ls/false) (if j4902@ls/false (apply (lambda (j4904@dx) (list (j2644@scheme-stx 'quote) (cons j4904@dx j4898@dy))) j4902@ls/false) ((lambda (j4906@t) ((lambda (j4908@ls/false) (if j4908@ls/false (apply (lambda () ((lambda (j4910@t) ((lambda (j4912@ls/false) (if j4912@ls/false (apply (lambda () (list (j2644@scheme-stx 'list) j4890@x)) j4912@ls/false) ((lambda (j4914@t) ((lambda (j4916@ls/false) (if j4916@ls/false (apply (lambda () (list (j2644@scheme-stx 'cons) j4890@x j4891@y)) j4916@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4914@t))) (j2762@syntax-dispatch j4914@t '_))) j4910@t))) (j2762@syntax-dispatch j4910@t '()))) j4898@dy)) j4908@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4906@t))) (j2762@syntax-dispatch j4906@t '_))) j4900@t))) (j2762@syntax-dispatch j4900@t '(#(scheme-id quote) any)))) j4890@x)) j4896@ls/false) ((lambda (j4918@t) ((lambda (j4920@ls/false) (if j4920@ls/false (apply (lambda (j4922@stuff) (cons* (j2644@scheme-stx 'list) j4890@x j4922@stuff)) j4920@ls/false) ((lambda (j4924@t) ((lambda (j4926@ls/false) (if j4926@ls/false (apply (lambda () (list (j2644@scheme-stx 'cons) j4890@x j4891@y)) j4926@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4924@t))) (j2762@syntax-dispatch j4924@t '_))) j4918@t))) (j2762@syntax-dispatch j4918@t '(#(scheme-id list) . each-any)))) j4894@t))) (j2762@syntax-dispatch j4894@t '(#(scheme-id quote) any)))) j4891@y))) (set! j4711@quasiappend (lambda (j4864@x j4865@y) ((lambda (j4868@ls) (if (null? j4868@ls) (list (j2644@scheme-stx 'quote) '()) (if (null? (cdr j4868@ls)) (car j4868@ls) (cons* (j2644@scheme-stx 'append) j4868@ls)))) ((letrec ((j4870@f (lambda (j4872@x) (if (null? j4872@x) ((lambda (j4874@t) ((lambda (j4876@ls/false) (if j4876@ls/false (apply (lambda () '()) j4876@ls/false) ((lambda (j4878@t) ((lambda (j4880@ls/false) (if j4880@ls/false (apply (lambda () (list j4865@y)) j4880@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4878@t))) (j2762@syntax-dispatch j4878@t '_))) j4874@t))) (j2762@syntax-dispatch j4874@t '(#(scheme-id quote) ())))) j4865@y) ((lambda (j4882@t) ((lambda (j4884@ls/false) (if j4884@ls/false (apply (lambda () (j4870@f (cdr j4872@x))) j4884@ls/false) ((lambda (j4886@t) ((lambda (j4888@ls/false) (if j4888@ls/false (apply (lambda () (cons (car j4872@x) (j4870@f (cdr j4872@x)))) j4888@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4886@t))) (j2762@syntax-dispatch j4886@t '_))) j4882@t))) (j2762@syntax-dispatch j4882@t '(#(scheme-id quote) ())))) (car j4872@x)))))) j4870@f) j4864@x)))) (set! j4713@quasivector (lambda (j4814@x) ((lambda (j4816@pat-x) ((lambda (j4818@t) ((lambda (j4820@ls/false) (if j4820@ls/false (apply (lambda (j4822@x*) (list (j2644@scheme-stx 'quote) (list->vector j4822@x*))) j4820@ls/false) ((lambda (j4824@t) ((lambda (j4826@ls/false) (if j4826@ls/false (apply (lambda () ((letrec ((j4828@f (lambda (j4830@x j4831@k) ((lambda (j4834@t) ((lambda (j4836@ls/false) (if j4836@ls/false (apply (lambda (j4838@x*) (j4831@k (map (lambda (j4840@x) (list (j2644@scheme-stx 'quote) j4840@x)) j4838@x*))) j4836@ls/false) ((lambda (j4842@t) ((lambda (j4844@ls/false) (if j4844@ls/false (apply (lambda (j4846@x*) (j4831@k j4846@x*)) j4844@ls/false) ((lambda (j4848@t) ((lambda (j4850@ls/false) (if j4850@ls/false (apply (lambda (j4852@x j4853@y) (j4828@f j4853@y (lambda (j4856@ls) (j4831@k (cons j4852@x j4856@ls))))) j4850@ls/false) ((lambda (j4858@t) ((lambda (j4860@ls/false) (if j4860@ls/false (apply (lambda () (list (j2644@scheme-stx 'list->vector) j4816@pat-x)) j4860@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4858@t))) (j2762@syntax-dispatch j4858@t '_))) j4848@t))) (j2762@syntax-dispatch j4848@t '(#(scheme-id cons) any any)))) j4842@t))) (j2762@syntax-dispatch j4842@t '(#(scheme-id list) . each-any)))) j4834@t))) (j2762@syntax-dispatch j4834@t '(#(scheme-id quote) each-any)))) j4830@x)))) j4828@f) j4814@x (lambda (j4862@ls) (cons* (j2644@scheme-stx 'vector) j4862@ls)))) j4826@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4824@t))) (j2762@syntax-dispatch j4824@t '_))) j4818@t))) (j2762@syntax-dispatch j4818@t '(#(scheme-id quote) each-any)))) j4816@pat-x)) j4814@x))) (set! j4715@vquasi (lambda (j4780@p j4781@lev) ((lambda (j4784@t) ((lambda (j4786@ls/false) (if j4786@ls/false (apply (lambda (j4788@p j4789@q) ((lambda (j4792@t) ((lambda (j4794@ls/false) (if j4794@ls/false (apply (lambda (j4796@p) (if (= j4781@lev '0) (j4707@quasicons* j4796@p (j4715@vquasi j4789@q j4781@lev)) (j4709@quasicons (j4709@quasicons (j4679@datum 'unquote) (j4717@quasi j4796@p (- j4781@lev '1))) (j4715@vquasi j4789@q j4781@lev)))) j4794@ls/false) ((lambda (j4798@t) ((lambda (j4800@ls/false) (if j4800@ls/false (apply (lambda (j4802@p) (if (= j4781@lev '0) (j4711@quasiappend j4802@p (j4715@vquasi j4789@q j4781@lev)) (j4709@quasicons (j4709@quasicons (j4679@datum 'unquote-splicing) (j4717@quasi j4802@p (- j4781@lev '1))) (j4715@vquasi j4789@q j4781@lev)))) j4800@ls/false) ((lambda (j4804@t) ((lambda (j4806@ls/false) (if j4806@ls/false (apply (lambda (j4808@p) (j4709@quasicons (j4717@quasi j4808@p j4781@lev) (j4715@vquasi j4789@q j4781@lev))) j4806@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4804@t))) (j2762@syntax-dispatch j4804@t 'any))) j4798@t))) (j2762@syntax-dispatch j4798@t '(#(scheme-id unquote-splicing) . each-any)))) j4792@t))) (j2762@syntax-dispatch j4792@t '(#(scheme-id unquote) . each-any)))) j4788@p)) j4786@ls/false) ((lambda (j4810@t) ((lambda (j4812@ls/false) (if j4812@ls/false (apply (lambda () (list (j2644@scheme-stx 'quote) '())) j4812@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4810@t))) (j2762@syntax-dispatch j4810@t '()))) j4784@t))) (j2762@syntax-dispatch j4784@t '(any . any)))) j4780@p))) (set! j4717@quasi (lambda (j4726@p j4727@lev) ((lambda (j4730@t) ((lambda (j4732@ls/false) (if j4732@ls/false (apply (lambda (j4734@p) (if (= j4727@lev '0) j4734@p (j4709@quasicons (j4679@datum 'unquote) (j4717@quasi (list j4734@p) (- j4727@lev '1))))) j4732@ls/false) ((lambda (j4736@t) ((lambda (j4738@ls/false) (if j4738@ls/false (apply (lambda (j4740@p j4741@q) (if (= j4727@lev '0) (j4707@quasicons* j4740@p (j4717@quasi j4741@q j4727@lev)) (j4709@quasicons (j4709@quasicons (j4679@datum 'unquote) (j4717@quasi j4740@p (- j4727@lev '1))) (j4717@quasi j4741@q j4727@lev)))) j4738@ls/false) ((lambda (j4744@t) ((lambda (j4746@ls/false) (if j4746@ls/false (apply (lambda (j4748@p j4749@q) (if (= j4727@lev '0) (j4711@quasiappend j4748@p (j4717@quasi j4749@q j4727@lev)) (j4709@quasicons (j4709@quasicons (j4679@datum 'unquote-splicing) (j4717@quasi j4748@p (- j4727@lev '1))) (j4717@quasi j4749@q j4727@lev)))) j4746@ls/false) ((lambda (j4752@t) ((lambda (j4754@ls/false) (if j4754@ls/false (apply (lambda (j4756@p) (j4709@quasicons (j4679@datum 'quasiquote) (j4717@quasi (list j4756@p) (+ j4727@lev '1)))) j4754@ls/false) ((lambda (j4758@t) ((lambda (j4760@ls/false) (if j4760@ls/false (apply (lambda (j4762@p j4763@q) (j4709@quasicons (j4717@quasi j4762@p j4727@lev) (j4717@quasi j4763@q j4727@lev))) j4760@ls/false) ((lambda (j4766@t) ((lambda (j4768@ls/false) (if (and j4768@ls/false (apply (lambda (j4770@x) (not (j2209@stx? j4770@x))) j4768@ls/false)) (apply (lambda (j4772@x) (j4713@quasivector (j4715@vquasi j4772@x j4727@lev))) j4768@ls/false) ((lambda (j4774@t) ((lambda (j4776@ls/false) (if j4776@ls/false (apply (lambda (j4778@p) (list (j2644@scheme-stx 'quote) j4778@p)) j4776@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4774@t))) (j2762@syntax-dispatch j4774@t 'any))) j4766@t))) (j2762@syntax-dispatch j4766@t '#(vector each-any)))) j4758@t))) (j2762@syntax-dispatch j4758@t '(any . any)))) j4752@t))) (j2762@syntax-dispatch j4752@t '(#(scheme-id quasiquote) any)))) j4744@t))) (j2762@syntax-dispatch j4744@t '((#(scheme-id unquote-splicing) . each-any) . any)))) j4736@t))) (j2762@syntax-dispatch j4736@t '((#(scheme-id unquote) . each-any) . any)))) j4730@t))) (j2762@syntax-dispatch j4730@t '(#(scheme-id unquote) any)))) j4726@p))) (lambda (j4718@x) ((lambda (j4720@t) ((lambda (j4722@ls/false) (if j4722@ls/false (apply (lambda (j4724@e) (j4717@quasi j4724@e '0)) j4722@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4720@t))) (j2762@syntax-dispatch j4720@t '(_ any)))) j4718@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! j2746@quasisyntax-macro ((lambda () ((lambda (j4939@quasi) (begin (set! j4939@quasi (lambda (j4963@p j4964@lev) ((lambda (j4967@t) ((lambda (j4969@ls/false) (if j4969@ls/false (apply (lambda (j4971@p) (if (= j4964@lev '0) ((lambda (j4973@g) (values (list j4973@g) (list j4971@p) j4973@g)) (j1149@j913@gensym)) (call-with-values (lambda () (j4939@quasi j4971@p (- j4964@lev '1))) (lambda (j4978@j4975@lhs* j4979@j4976@rhs* j4980@j4977@p) ((lambda (j4984@p j4985@rhs* j4986@lhs*) (values j4986@lhs* j4985@rhs* (list 'unsyntax j4984@p))) j4980@j4977@p j4979@j4976@rhs* j4978@j4975@lhs*))))) j4969@ls/false) ((lambda (j4990@t) ((lambda (j4992@ls/false) (if (and j4992@ls/false (apply (lambda () (= j4964@lev '0)) j4992@ls/false)) (apply (lambda () (j2995@syntax-violation '#f '"incorrect use of unsyntax" j4963@p)) j4992@ls/false) ((lambda (j4994@t) ((lambda (j4996@ls/false) (if j4996@ls/false (apply (lambda (j4998@p* j4999@q) (call-with-values (lambda () (j4939@quasi j4999@q j4964@lev)) (lambda (j5005@j5002@lhs* j5006@j5003@rhs* j5007@j5004@q) ((lambda (j5011@q j5012@rhs* j5013@lhs*) (if (= j4964@lev '0) ((lambda (j5017@g*) (values (append j5017@g* j5013@lhs*) (append j4998@p* j5012@rhs*) (append j5017@g* j5011@q))) (map (lambda (j5019@x) (j1149@j913@gensym)) j4998@p*)) (call-with-values (lambda () (j4939@quasi j4998@p* (- j4964@lev '1))) (lambda (j5024@j5021@lhs2* j5025@j5022@rhs2* j5026@j5023@p*) ((lambda (j5030@p* j5031@rhs2* j5032@lhs2*) (values (append j5032@lhs2* j5013@lhs*) (append j5031@rhs2* j5012@rhs*) (cons (cons 'unsyntax j5030@p*) j5011@q))) j5026@j5023@p* j5025@j5022@rhs2* j5024@j5021@lhs2*))))) j5007@j5004@q j5006@j5003@rhs* j5005@j5002@lhs*)))) j4996@ls/false) ((lambda (j5036@t) ((lambda (j5038@ls/false) (if j5038@ls/false (apply (lambda (j5040@p* j5041@q) (call-with-values (lambda () (j4939@quasi j5041@q j4964@lev)) (lambda (j5047@j5044@lhs* j5048@j5045@rhs* j5049@j5046@q) ((lambda (j5053@q j5054@rhs* j5055@lhs*) (if (= j4964@lev '0) ((lambda (j5059@g*) (values (append (map (lambda (j5061@g) (cons j5061@g '(...))) j5059@g*) j5055@lhs*) (append j5040@p* j5054@rhs*) (append (apply append (map (lambda (j5063@g) (cons j5063@g '(...))) j5059@g*)) j5053@q))) (map (lambda (j5065@x) (j1149@j913@gensym)) j5040@p*)) (call-with-values (lambda () (j4939@quasi j5040@p* (- j4964@lev '1))) (lambda (j5070@j5067@lhs2* j5071@j5068@rhs2* j5072@j5069@p*) ((lambda (j5076@p* j5077@rhs2* j5078@lhs2*) (values (append j5078@lhs2* j5055@lhs*) (append j5077@rhs2* j5054@rhs*) (cons (cons 'unsyntax-splicing j5076@p*) j5053@q))) j5072@j5069@p* j5071@j5068@rhs2* j5070@j5067@lhs2*))))) j5049@j5046@q j5048@j5045@rhs* j5047@j5044@lhs*)))) j5038@ls/false) ((lambda (j5082@t) ((lambda (j5084@ls/false) (if (and j5084@ls/false (apply (lambda () (= j4964@lev '0)) j5084@ls/false)) (apply (lambda () (j2995@syntax-violation '#f '"incorrect use of unsyntax-splicing" j4963@p)) j5084@ls/false) ((lambda (j5086@t) ((lambda (j5088@ls/false) (if j5088@ls/false (apply (lambda (j5090@p) (call-with-values (lambda () (j4939@quasi j5090@p (+ j4964@lev '1))) (lambda (j5095@j5092@lhs* j5096@j5093@rhs* j5097@j5094@p) ((lambda (j5101@p j5102@rhs* j5103@lhs*) (values j5103@lhs* j5102@rhs* (list 'quasisyntax j5101@p))) j5097@j5094@p j5096@j5093@rhs* j5095@j5092@lhs*)))) j5088@ls/false) ((lambda (j5107@t) ((lambda (j5109@ls/false) (if j5109@ls/false (apply (lambda (j5111@p j5112@q) (call-with-values (lambda () (j4939@quasi j5111@p j4964@lev)) (lambda (j5121@j5115@lhs* j5122@j5116@rhs* j5123@j5117@p) (call-with-values (lambda () (j4939@quasi j5112@q j4964@lev)) (lambda (j5127@j5118@lhs2* j5128@j5119@rhs2* j5129@j5120@q) ((lambda (j5133@q j5134@rhs2* j5135@lhs2* j5136@p j5137@rhs* j5138@lhs*) (values (append j5135@lhs2* j5138@lhs*) (append j5134@rhs2* j5137@rhs*) (cons j5136@p j5133@q))) j5129@j5120@q j5128@j5119@rhs2* j5127@j5118@lhs2* j5123@j5117@p j5122@j5116@rhs* j5121@j5115@lhs*)))))) j5109@ls/false) ((lambda (j5145@t) ((lambda (j5147@ls/false) (if j5147@ls/false (apply (lambda (j5149@x*) (call-with-values (lambda () (j4939@quasi j5149@x* j4964@lev)) (lambda (j5154@j5151@lhs* j5155@j5152@rhs* j5156@j5153@x*) ((lambda (j5160@x* j5161@rhs* j5162@lhs*) (values j5162@lhs* j5161@rhs* (list->vector j5160@x*))) j5156@j5153@x* j5155@j5152@rhs* j5154@j5151@lhs*)))) j5147@ls/false) ((lambda (j5166@t) ((lambda (j5168@ls/false) (if j5168@ls/false (apply (lambda () (values '() '() j4963@p)) j5168@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j5166@t))) (j2762@syntax-dispatch j5166@t '_))) j5145@t))) (j2762@syntax-dispatch j5145@t '#(vector each-any)))) j5107@t))) (j2762@syntax-dispatch j5107@t '(any . any)))) j5086@t))) (j2762@syntax-dispatch j5086@t '(#(scheme-id quasisyntax) any)))) j5082@t))) (j2762@syntax-dispatch j5082@t '#(scheme-id unsyntax-splicing)))) j5036@t))) (j2762@syntax-dispatch j5036@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) j4994@t))) (j2762@syntax-dispatch j4994@t '((#(scheme-id unsyntax) . each-any) . any)))) j4990@t))) (j2762@syntax-dispatch j4990@t '#(scheme-id unsyntax)))) j4967@t))) (j2762@syntax-dispatch j4967@t '(#(scheme-id unsyntax) any)))) j4963@p))) (lambda (j4940@x) ((lambda (j4942@t) ((lambda (j4944@ls/false) (if j4944@ls/false (apply (lambda (j4946@e) (call-with-values (lambda () (j4939@quasi j4946@e '0)) (lambda (j4951@j4948@lhs* j4952@j4949@rhs* j4953@j4950@v) ((lambda (j4957@v j4958@rhs* j4959@lhs*) (j2688@bless (list 'syntax-case (cons 'list j4958@rhs*) '() (list j4959@lhs* (list 'syntax j4957@v))))) j4953@j4950@v j4952@j4949@rhs* j4951@j4948@lhs*)))) j4944@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j4942@t))) (j2762@syntax-dispatch j4942@t '(_ any)))) j4940@x)))) '#f)))) (set! j2748@define-struct-macro (lambda (j5170@stx) (j2995@syntax-violation '#f '"define-struct not supported" j5170@stx))) (set! j2750@define-record-type-macro (lambda (j5172@x) ((lambda (j5175@id j5177@get-record-name j5179@get-record-constructor-name j5181@get-record-predicate-name j5183@get-clause j5185@foo-rtd-code j5187@parent-rtd-code j5189@parent-rcd-code j5191@foo-rcd-code j5193@get-protocol-code j5195@get-fields j5197@get-mutator-indices j5199@get-mutators j5201@get-accessors j5203@enumerate j5205@do-define-record j5207@verify-clauses) (begin (set! j5175@id (lambda (j5674@ctxt . j5676@str*) (j2999@datum->syntax j5674@ctxt (string->symbol (apply string-append (map (lambda (j5678@x) (if (symbol? j5678@x) (symbol->string j5678@x) (if (string? j5678@x) j5678@x (assertion-violation 'define-record-type '"BUG")))) j5676@str*)))))) (set! j5177@get-record-name (lambda (j5656@spec) ((lambda (j5658@t) ((lambda (j5660@ls/false) (if j5660@ls/false (apply (lambda (j5662@foo j5663@make-foo j5664@foo?) j5662@foo) j5660@ls/false) ((lambda (j5668@t) ((lambda (j5670@ls/false) (if j5670@ls/false (apply (lambda (j5672@foo) j5672@foo) j5670@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j5668@t))) (j2762@syntax-dispatch j5668@t 'any))) j5658@t))) (j2762@syntax-dispatch j5658@t '(any any any)))) j5656@spec))) (set! j5179@get-record-constructor-name (lambda (j5636@spec) ((lambda (j5638@t) ((lambda (j5640@ls/false) (if j5640@ls/false (apply (lambda (j5642@foo j5643@make-foo j5644@foo?) j5643@make-foo) j5640@ls/false) ((lambda (j5648@t) ((lambda (j5650@ls/false) (if (and j5650@ls/false (apply (lambda (j5652@foo) (j2265@id? j5652@foo)) j5650@ls/false)) (apply (lambda (j5654@foo) (j5175@id j5654@foo '"make-" (j2287@stx->datum j5654@foo))) j5650@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j5648@t))) (j2762@syntax-dispatch j5648@t 'any))) j5638@t))) (j2762@syntax-dispatch j5638@t '(any any any)))) j5636@spec))) (set! j5181@get-record-predicate-name (lambda (j5616@spec) ((lambda (j5618@t) ((lambda (j5620@ls/false) (if j5620@ls/false (apply (lambda (j5622@foo j5623@make-foo j5624@foo?) j5624@foo?) j5620@ls/false) ((lambda (j5628@t) ((lambda (j5630@ls/false) (if (and j5630@ls/false (apply (lambda (j5632@foo) (j2265@id? j5632@foo)) j5630@ls/false)) (apply (lambda (j5634@foo) (j5175@id j5634@foo (j2287@stx->datum j5634@foo) '"?")) j5630@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j5628@t))) (j2762@syntax-dispatch j5628@t 'any))) j5618@t))) (j2762@syntax-dispatch j5618@t '(any any any)))) j5616@spec))) (set! j5183@get-clause (lambda (j5598@id j5599@ls) ((lambda (j5602@t) ((lambda (j5604@ls/false) (if j5604@ls/false (apply (lambda () '#f) j5604@ls/false) ((lambda (j5606@t) ((lambda (j5608@ls/false) (if j5608@ls/false (apply (lambda (j5610@x j5611@rest j5612@ls) (if (j2273@free-id=? (j2688@bless j5598@id) j5610@x) (cons j5610@x j5611@rest) (j5183@get-clause j5598@id j5612@ls))) j5608@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j5606@t))) (j2762@syntax-dispatch j5606@t '((any . any) . any)))) j5602@t))) (j2762@syntax-dispatch j5602@t '()))) j5599@ls))) (set! j5185@foo-rtd-code (lambda (j5516@name j5517@clause* j5518@parent-rtd-code) ((lambda (j5523@convert-field-spec*) (begin (set! j5523@convert-field-spec* (lambda (j5572@ls) (list->vector (map (lambda (j5574@x) ((lambda (j5576@t) ((lambda (j5578@ls/false) (if j5578@ls/false (apply (lambda (j5580@name j5581@rest) (list 'mutable j5580@name)) j5578@ls/false) ((lambda (j5584@t) ((lambda (j5586@ls/false) (if j5586@ls/false (apply (lambda (j5588@name j5589@rest) (list 'immutable j5588@name)) j5586@ls/false) ((lambda (j5592@t) ((lambda (j5594@ls/false) (if j5594@ls/false (apply (lambda (j5596@name) (list 'immutable j5596@name)) j5594@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j5592@t))) (j2762@syntax-dispatch j5592@t 'any))) j5584@t))) (j2762@syntax-dispatch j5584@t '(#(scheme-id immutable) any . any)))) j5576@t))) (j2762@syntax-dispatch j5576@t '(#(scheme-id mutable) any . any)))) j5574@x)) j5572@ls)))) ((lambda (j5524@uid-code j5525@sealed? j5526@opaque? j5527@fields) (j2688@bless (list 'make-record-type-descriptor (list 'quote j5516@name) j5518@parent-rtd-code j5524@uid-code j5525@sealed? j5526@opaque? j5527@fields))) ((lambda (j5532@t) ((lambda (j5534@ls/false) (if j5534@ls/false (apply (lambda () (list 'quote (j1149@j913@gensym))) j5534@ls/false) ((lambda (j5536@t) ((lambda (j5538@ls/false) (if j5538@ls/false (apply (lambda (j5540@uid) (list 'quote j5540@uid)) j5538@ls/false) ((lambda (j5542@t) ((lambda (j5544@ls/false) (if j5544@ls/false (apply (lambda () '#f) j5544@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j5542@t))) (j2762@syntax-dispatch j5542@t '_))) j5536@t))) (j2762@syntax-dispatch j5536@t '(_ any)))) j5532@t))) (j2762@syntax-dispatch j5532@t '(_)))) (j5183@get-clause 'nongenerative j5517@clause*)) ((lambda (j5546@t) ((lambda (j5548@ls/false) (if j5548@ls/false (apply (lambda () '#t) j5548@ls/false) ((lambda (j5550@t) ((lambda (j5552@ls/false) (if j5552@ls/false (apply (lambda () '#f) j5552@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j5550@t))) (j2762@syntax-dispatch j5550@t '_))) j5546@t))) (j2762@syntax-dispatch j5546@t '(_ #(atom #t))))) (j5183@get-clause 'sealed j5517@clause*)) ((lambda (j5554@t) ((lambda (j5556@ls/false) (if j5556@ls/false (apply (lambda () '#t) j5556@ls/false) ((lambda (j5558@t) ((lambda (j5560@ls/false) (if j5560@ls/false (apply (lambda () '#f) j5560@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j5558@t))) (j2762@syntax-dispatch j5558@t '_))) j5554@t))) (j2762@syntax-dispatch j5554@t '(_ #(atom #t))))) (j5183@get-clause 'opaque j5517@clause*)) ((lambda (j5562@t) ((lambda (j5564@ls/false) (if j5564@ls/false (apply (lambda (j5566@field-spec*) (list 'quote (j5523@convert-field-spec* j5566@field-spec*))) j5564@ls/false) ((lambda (j5568@t) ((lambda (j5570@ls/false) (if j5570@ls/false (apply (lambda () ''#()) j5570@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j5568@t))) (j2762@syntax-dispatch j5568@t '_))) j5562@t))) (j2762@syntax-dispatch j5562@t '(_ . each-any)))) (j5183@get-clause 'fields j5517@clause*))))) '#f))) (set! j5187@parent-rtd-code (lambda (j5492@clause*) ((lambda (j5494@t) ((lambda (j5496@ls/false) (if j5496@ls/false (apply (lambda (j5498@name) (list 'record-type-descriptor j5498@name)) j5496@ls/false) ((lambda (j5500@t) ((lambda (j5502@ls/false) (if j5502@ls/false (apply (lambda () ((lambda (j5504@t) ((lambda (j5506@ls/false) (if j5506@ls/false (apply (lambda (j5508@rtd j5509@rcd) j5508@rtd) j5506@ls/false) ((lambda (j5512@t) ((lambda (j5514@ls/false) (if j5514@ls/false (apply (lambda () '#f) j5514@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j5512@t))) (j2762@syntax-dispatch j5512@t '#(atom #f)))) j5504@t))) (j2762@syntax-dispatch j5504@t '(_ any any)))) (j5183@get-clause 'parent-rtd j5492@clause*))) j5502@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j5500@t))) (j2762@syntax-dispatch j5500@t '#(atom #f)))) j5494@t))) (j2762@syntax-dispatch j5494@t '(_ any)))) (j5183@get-clause 'parent j5492@clause*)))) (set! j5189@parent-rcd-code (lambda (j5468@clause*) ((lambda (j5470@t) ((lambda (j5472@ls/false) (if j5472@ls/false (apply (lambda (j5474@name) (list 'record-constructor-descriptor j5474@name)) j5472@ls/false) ((lambda (j5476@t) ((lambda (j5478@ls/false) (if j5478@ls/false (apply (lambda () ((lambda (j5480@t) ((lambda (j5482@ls/false) (if j5482@ls/false (apply (lambda (j5484@rtd j5485@rcd) j5485@rcd) j5482@ls/false) ((lambda (j5488@t) ((lambda (j5490@ls/false) (if j5490@ls/false (apply (lambda () '#f) j5490@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j5488@t))) (j2762@syntax-dispatch j5488@t '#(atom #f)))) j5480@t))) (j2762@syntax-dispatch j5480@t '(_ any any)))) (j5183@get-clause 'parent-rtd j5468@clause*))) j5478@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j5476@t))) (j2762@syntax-dispatch j5476@t '#(atom #f)))) j5470@t))) (j2762@syntax-dispatch j5470@t '(_ any)))) (j5183@get-clause 'parent j5468@clause*)))) (set! j5191@foo-rcd-code (lambda (j5460@clause* j5461@foo-rtd j5462@protocol j5463@parent-rcd-code) (list 'make-record-constructor-descriptor j5461@foo-rtd j5463@parent-rcd-code j5462@protocol))) (set! j5193@get-protocol-code (lambda (j5448@clause*) ((lambda (j5450@t) ((lambda (j5452@ls/false) (if j5452@ls/false (apply (lambda (j5454@expr) j5454@expr) j5452@ls/false) ((lambda (j5456@t) ((lambda (j5458@ls/false) (if j5458@ls/false (apply (lambda () '#f) j5458@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j5456@t))) (j2762@syntax-dispatch j5456@t '_))) j5450@t))) (j2762@syntax-dispatch j5450@t '(_ any)))) (j5183@get-clause 'protocol j5448@clause*)))) (set! j5195@get-fields (lambda (j5430@clause*) ((lambda (j5432@t) ((lambda (j5434@ls/false) (if j5434@ls/false (apply (lambda () '()) j5434@ls/false) ((lambda (j5436@t) ((lambda (j5438@ls/false) (if j5438@ls/false (apply (lambda (j5440@f*) j5440@f*) j5438@ls/false) ((lambda (j5442@t) ((lambda (j5444@ls/false) (if j5444@ls/false (apply (lambda (j5446@rest) (j5195@get-fields j5446@rest)) j5444@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j5442@t))) (j2762@syntax-dispatch j5442@t '(_ . any)))) j5436@t))) (j2762@syntax-dispatch j5436@t '((#(scheme-id fields) . each-any) . _)))) j5432@t))) (j2762@syntax-dispatch j5432@t '()))) j5430@clause*))) (set! j5197@get-mutator-indices (lambda (j5406@fields) ((letrec ((j5408@f (lambda (j5410@fields j5411@i) ((lambda (j5414@t) ((lambda (j5416@ls/false) (if j5416@ls/false (apply (lambda () '()) j5416@ls/false) ((lambda (j5418@t) ((lambda (j5420@ls/false) (if j5420@ls/false (apply (lambda (j5422@rest) (cons j5411@i (j5408@f j5422@rest (+ j5411@i '1)))) j5420@ls/false) ((lambda (j5424@t) ((lambda (j5426@ls/false) (if j5426@ls/false (apply (lambda (j5428@rest) (j5408@f j5428@rest (+ j5411@i '1))) j5426@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j5424@t))) (j2762@syntax-dispatch j5424@t '(_ . any)))) j5418@t))) (j2762@syntax-dispatch j5418@t '((#(scheme-id mutable) . _) . any)))) j5414@t))) (j2762@syntax-dispatch j5414@t '()))) j5410@fields)))) j5408@f) j5406@fields '0))) (set! j5199@get-mutators (lambda (j5364@foo j5365@fields) ((lambda (j5369@gen-name) (begin (set! j5369@gen-name (lambda (j5404@x) (j2999@datum->syntax j5364@foo (string->symbol (string-append (symbol->string (j3001@syntax->datum j5364@foo)) '"-" (symbol->string (j3001@syntax->datum j5404@x)) '"-set!"))))) ((letrec ((j5370@f (lambda (j5372@fields) ((lambda (j5374@t) ((lambda (j5376@ls/false) (if j5376@ls/false (apply (lambda () '()) j5376@ls/false) ((lambda (j5378@t) ((lambda (j5380@ls/false) (if j5380@ls/false (apply (lambda (j5382@name j5383@accessor j5384@mutator j5385@rest) (cons j5384@mutator (j5370@f j5385@rest))) j5380@ls/false) ((lambda (j5390@t) ((lambda (j5392@ls/false) (if j5392@ls/false (apply (lambda (j5394@name j5395@rest) (cons (j5369@gen-name j5394@name) (j5370@f j5395@rest))) j5392@ls/false) ((lambda (j5398@t) ((lambda (j5400@ls/false) (if j5400@ls/false (apply (lambda (j5402@rest) (j5370@f j5402@rest)) j5400@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j5398@t))) (j2762@syntax-dispatch j5398@t '(_ . any)))) j5390@t))) (j2762@syntax-dispatch j5390@t '((#(scheme-id mutable) any) . any)))) j5378@t))) (j2762@syntax-dispatch j5378@t '((#(scheme-id mutable) any any any) . any)))) j5374@t))) (j2762@syntax-dispatch j5374@t '()))) j5372@fields)))) j5370@f) j5365@fields))) '#f))) (set! j5201@get-accessors (lambda (j5296@foo j5297@fields) ((lambda (j5301@gen-name) (begin (set! j5301@gen-name (lambda (j5362@x) (j2999@datum->syntax j5296@foo (string->symbol (string-append (symbol->string (j3001@syntax->datum j5296@foo)) '"-" (symbol->string (j3001@syntax->datum j5362@x))))))) (map (lambda (j5302@field) ((lambda (j5304@t) ((lambda (j5306@ls/false) (if (and j5306@ls/false (apply (lambda (j5308@name j5309@accessor j5310@mutator) (j2265@id? j5309@accessor)) j5306@ls/false)) (apply (lambda (j5314@name j5315@accessor j5316@mutator) j5315@accessor) j5306@ls/false) ((lambda (j5320@t) ((lambda (j5322@ls/false) (if (and j5322@ls/false (apply (lambda (j5324@name j5325@accessor) (j2265@id? j5325@accessor)) j5322@ls/false)) (apply (lambda (j5328@name j5329@accessor) j5329@accessor) j5322@ls/false) ((lambda (j5332@t) ((lambda (j5334@ls/false) (if (and j5334@ls/false (apply (lambda (j5336@name) (j2265@id? j5336@name)) j5334@ls/false)) (apply (lambda (j5338@name) (j5301@gen-name j5338@name)) j5334@ls/false) ((lambda (j5340@t) ((lambda (j5342@ls/false) (if (and j5342@ls/false (apply (lambda (j5344@name) (j2265@id? j5344@name)) j5342@ls/false)) (apply (lambda (j5346@name) (j5301@gen-name j5346@name)) j5342@ls/false) ((lambda (j5348@t) ((lambda (j5350@ls/false) (if (and j5350@ls/false (apply (lambda (j5352@name) (j2265@id? j5352@name)) j5350@ls/false)) (apply (lambda (j5354@name) (j5301@gen-name j5354@name)) j5350@ls/false) ((lambda (j5356@t) ((lambda (j5358@ls/false) (if j5358@ls/false (apply (lambda (j5360@others) (j2995@syntax-violation '#f '"invalid field spec" j5302@field)) j5358@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j5356@t))) (j2762@syntax-dispatch j5356@t 'any))) j5348@t))) (j2762@syntax-dispatch j5348@t 'any))) j5340@t))) (j2762@syntax-dispatch j5340@t '(#(scheme-id immutable) any)))) j5332@t))) (j2762@syntax-dispatch j5332@t '(#(scheme-id mutable) any)))) j5320@t))) (j2762@syntax-dispatch j5320@t '(#(scheme-id immutable) any any)))) j5304@t))) (j2762@syntax-dispatch j5304@t '(#(scheme-id mutable) any any any)))) j5302@field)) j5297@fields))) '#f))) (set! j5203@enumerate (lambda (j5288@ls) ((letrec ((j5290@f (lambda (j5292@ls j5293@i) (if (null? j5292@ls) '() (cons j5293@i (j5290@f (cdr j5292@ls) (+ j5293@i '1))))))) j5290@f) j5288@ls '0))) (set! j5205@do-define-record (lambda (j5248@namespec j5249@clause*) ((lambda (j5252@foo) ((lambda (j5254@foo-rtd) ((lambda (j5256@foo-rcd) ((lambda (j5258@protocol) ((lambda (j5260@make-foo) ((lambda (j5262@fields) ((lambda (j5264@idx*) ((lambda (j5266@foo-x*) ((lambda (j5268@set-foo-x!*) ((lambda (j5270@set-foo-idx*) ((lambda (j5272@foo?) ((lambda (j5274@foo-rtd-code) ((lambda (j5276@foo-rcd-code) ((lambda (j5278@protocol-code) ((lambda () (j2688@bless (cons 'begin (cons (list 'define j5254@foo-rtd j5274@foo-rtd-code) (cons (list 'define j5258@protocol j5278@protocol-code) (cons (list 'define j5256@foo-rcd j5276@foo-rcd-code) (cons (list 'define-syntax j5252@foo (list 'list ''$rtd (list 'syntax j5254@foo-rtd) (list 'syntax j5256@foo-rcd))) (cons (list 'define j5272@foo? (list 'record-predicate j5254@foo-rtd)) (cons (list 'define j5260@make-foo (list 'record-constructor j5256@foo-rcd)) (append (map (lambda (j5280@foo-x j5281@idx) (list 'define j5280@foo-x (list 'record-accessor j5254@foo-rtd j5281@idx))) j5266@foo-x* j5264@idx*) (map (lambda (j5284@set-foo-x! j5285@idx) (list 'define j5284@set-foo-x! (list 'record-mutator j5254@foo-rtd j5285@idx))) j5268@set-foo-x!* j5270@set-foo-idx*))))))))))))) (j5193@get-protocol-code j5249@clause*))) (j5191@foo-rcd-code j5249@clause* j5254@foo-rtd j5258@protocol (j5189@parent-rcd-code j5249@clause*)))) (j5185@foo-rtd-code j5252@foo j5249@clause* (j5187@parent-rtd-code j5249@clause*)))) (j5181@get-record-predicate-name j5248@namespec))) (j5197@get-mutator-indices j5262@fields))) (j5199@get-mutators j5252@foo j5262@fields))) (j5201@get-accessors j5252@foo j5262@fields))) (j5203@enumerate j5262@fields))) (j5195@get-fields j5249@clause*))) (j5179@get-record-constructor-name j5248@namespec))) (j1149@j913@gensym))) (j1149@j913@gensym))) (j1149@j913@gensym))) (j5177@get-record-name j5248@namespec)))) (set! j5207@verify-clauses (lambda (j5216@x j5217@cls*) ((lambda (j5221@valid-kwds j5223@free-id-member?) (begin (set! j5221@valid-kwds (map j2688@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! j5223@free-id-member? (lambda (j5244@x j5245@ls) (and (pair? j5245@ls) (or (j2273@free-id=? j5244@x (car j5245@ls)) (j5223@free-id-member? j5244@x (cdr j5245@ls)))))) ((letrec ((j5224@f (lambda (j5226@cls* j5227@seen*) (if (not (null? j5226@cls*)) ((lambda (j5230@t) ((lambda (j5232@ls/false) (if j5232@ls/false (apply (lambda (j5234@kwd j5235@rest) (if (or (not (j2265@id? j5234@kwd)) (not (j5223@free-id-member? j5234@kwd j5221@valid-kwds))) (j2995@syntax-violation '#f '"not a valid define-record-type keyword" j5234@kwd) (if (j2279@bound-id-member? j5234@kwd j5227@seen*) (j2995@syntax-violation '#f '"duplicate use of keyword " j5216@x j5234@kwd) (j5224@f (cdr j5226@cls*) (cons j5234@kwd j5227@seen*))))) j5232@ls/false) ((lambda (j5238@t) ((lambda (j5240@ls/false) (if j5240@ls/false (apply (lambda (j5242@cls) (j2995@syntax-violation '#f '"malformed define-record-type clause" j5242@cls)) j5240@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j5238@t))) (j2762@syntax-dispatch j5238@t 'any))) j5230@t))) (j2762@syntax-dispatch j5230@t '(any . any)))) (car j5226@cls*)) (void))))) j5224@f) j5217@cls* '()))) '#f '#f))) ((lambda (j5208@t) ((lambda (j5210@ls/false) (if j5210@ls/false (apply (lambda (j5212@namespec j5213@clause*) (begin (j5207@verify-clauses j5172@x j5213@clause*) (j5205@do-define-record j5212@namespec j5213@clause*))) j5210@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j5208@t))) (j2762@syntax-dispatch j5208@t '(_ any . each-any)))) j5172@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! j2752@define-condition-type-macro (lambda (j5680@x) ((lambda (j5683@mkname) (begin (set! j5683@mkname (lambda (j5728@name j5729@suffix) (j2999@datum->syntax j5728@name (string->symbol (string-append (symbol->string (j3001@syntax->datum j5728@name)) j5729@suffix))))) ((lambda (j5684@t) ((lambda (j5686@ls/false) (if (and j5686@ls/false (apply (lambda (j5688@ctxt j5689@name j5690@super j5691@constructor j5692@predicate j5693@field* j5694@accessor*) (and (j2265@id? j5689@name) (j2265@id? j5690@super) (j2265@id? j5691@constructor) (j2265@id? j5692@predicate) (for-all j2265@id? j5693@field*) (for-all j2265@id? j5694@accessor*))) j5686@ls/false)) (apply (lambda (j5702@ctxt j5703@name j5704@super j5705@constructor j5706@predicate j5707@field* j5708@accessor*) ((lambda (j5716@aux-accessor*) (j2688@bless (cons 'begin (cons (cons 'define-record-type (cons (list j5703@name j5705@constructor (j1149@j913@gensym)) (cons (list 'parent j5704@super) (cons (cons 'fields (map (lambda (j5718@field j5719@aux) (list 'immutable j5718@field j5719@aux)) j5707@field* j5716@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define j5706@predicate (list 'condition-predicate (list 'record-type-descriptor j5703@name))) (map (lambda (j5722@accessor j5723@aux) (list 'define j5722@accessor (list 'condition-accessor (list 'record-type-descriptor j5703@name) j5723@aux))) j5708@accessor* j5716@aux-accessor*)))))) (map (lambda (j5726@x) (j1149@j913@gensym)) j5708@accessor*))) j5686@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j5684@t))) (j2762@syntax-dispatch j5684@t '(any any any any any . #(each (any any)))))) j5680@x))) '#f))) (set! j2754@incorrect-usage-macro (lambda (j5732@e) (j2995@syntax-violation '#f '"incorrect usage of auxiliary keyword" j5732@e))) (set! j2756@parameterize-macro (lambda (j5734@e) ((lambda (j5736@t) ((lambda (j5738@ls/false) (if j5738@ls/false (apply (lambda (j5740@b j5741@b*) (j2688@bless (cons 'let (cons '() (cons j5740@b j5741@b*))))) j5738@ls/false) ((lambda (j5744@t) ((lambda (j5746@ls/false) (if j5746@ls/false (apply (lambda (j5748@olhs* j5749@orhs* j5750@b j5751@b*) ((lambda (j5756@lhs* j5757@rhs*) (j2688@bless (cons (list 'lambda (append j5756@lhs* j5757@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (j5760@lhs j5761@rhs) (list 'let (list (list 't (list j5760@lhs))) (list j5760@lhs j5761@rhs) (cons 'set! (cons j5761@rhs '(t))))) j5756@lhs* j5757@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons j5750@b j5751@b*))) '(swap)))))) (append j5748@olhs* j5749@orhs*)))) (j2977@generate-temporaries j5748@olhs*) (j2977@generate-temporaries j5749@orhs*))) j5746@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j5744@t))) (j2762@syntax-dispatch j5744@t '(_ #(each (any any)) any . each-any)))) j5736@t))) (j2762@syntax-dispatch j5736@t '(_ () any . each-any)))) j5734@e))) (set! j2758@foreign-call-transformer (lambda (j5764@e j5765@r j5766@mr) ((lambda (j5770@t) ((lambda (j5772@ls/false) (if j5772@ls/false (apply (lambda (j5774@name j5775@arg*) (cons 'foreign-call (cons (j2796@chi-expr j5774@name j5765@r j5766@mr) (j2792@chi-expr* j5775@arg* j5765@r j5766@mr)))) j5772@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j5770@t))) (j2762@syntax-dispatch j5770@t '(_ any . each-any)))) j5764@e))) (set! j2760@convert-pattern (lambda (j5778@pattern j5779@keys) ((lambda (j5783@cvt* j5785@cvt) (begin (set! j5783@cvt* (lambda (j5928@p* j5929@n j5930@ids) (if (null? j5928@p*) (values '() j5930@ids) (call-with-values (lambda () (j5783@cvt* (cdr j5928@p*) j5929@n j5930@ids)) (lambda (j5936@j5934@y j5937@j5935@ids) ((lambda (j5940@ids j5941@y) (call-with-values (lambda () (j5785@cvt (car j5928@p*) j5929@n j5940@ids)) (lambda (j5946@j5944@x j5947@j5945@ids) ((lambda (j5950@ids j5951@x) (values (cons j5951@x j5941@y) j5950@ids)) j5947@j5945@ids j5946@j5944@x)))) j5937@j5935@ids j5936@j5934@y)))))) (set! j5785@cvt (lambda (j5786@p j5787@n j5788@ids) ((lambda (j5792@t) ((lambda (j5794@ls/false) (if (and j5794@ls/false (apply (lambda (j5796@id) (j2265@id? j5796@id)) j5794@ls/false)) (apply (lambda (j5798@id) (if (j2279@bound-id-member? j5786@p j5779@keys) (values (vector 'free-id j5786@p) j5788@ids) (if (j2273@free-id=? j5786@p (j2644@scheme-stx '_)) (values '_ j5788@ids) (values 'any (cons (cons j5786@p j5787@n) j5788@ids))))) j5794@ls/false) ((lambda (j5800@t) ((lambda (j5802@ls/false) (if (and j5802@ls/false (apply (lambda (j5804@p j5805@dots) (j2764@ellipsis? j5805@dots)) j5802@ls/false)) (apply (lambda (j5808@p j5809@dots) (call-with-values (lambda () (j5785@cvt j5808@p (+ j5787@n '1) j5788@ids)) (lambda (j5814@j5812@p j5815@j5813@ids) ((lambda (j5818@ids j5819@p) (values (if (eq? j5819@p 'any) 'each-any (vector 'each j5819@p)) j5818@ids)) j5815@j5813@ids j5814@j5812@p)))) j5802@ls/false) ((lambda (j5822@t) ((lambda (j5824@ls/false) (if (and j5824@ls/false (apply (lambda (j5826@x j5827@dots j5828@ys j5829@z) (j2764@ellipsis? j5827@dots)) j5824@ls/false)) (apply (lambda (j5834@x j5835@dots j5836@ys j5837@z) (call-with-values (lambda () (j5785@cvt j5837@z j5787@n j5788@ids)) (lambda (j5844@j5842@z j5845@j5843@ids) ((lambda (j5848@ids j5849@z) (call-with-values (lambda () (j5783@cvt* j5836@ys j5787@n j5848@ids)) (lambda (j5854@j5852@ys j5855@j5853@ids) ((lambda (j5858@ids j5859@ys) (call-with-values (lambda () (j5785@cvt j5834@x (+ j5787@n '1) j5858@ids)) (lambda (j5864@j5862@x j5865@j5863@ids) ((lambda (j5868@ids j5869@x) (values (vector 'each+ j5869@x (reverse j5859@ys) j5849@z) j5868@ids)) j5865@j5863@ids j5864@j5862@x)))) j5855@j5853@ids j5854@j5852@ys)))) j5845@j5843@ids j5844@j5842@z)))) j5824@ls/false) ((lambda (j5872@t) ((lambda (j5874@ls/false) (if j5874@ls/false (apply (lambda (j5876@x j5877@y) (call-with-values (lambda () (j5785@cvt j5877@y j5787@n j5788@ids)) (lambda (j5882@j5880@y j5883@j5881@ids) ((lambda (j5886@ids j5887@y) (call-with-values (lambda () (j5785@cvt j5876@x j5787@n j5886@ids)) (lambda (j5892@j5890@x j5893@j5891@ids) ((lambda (j5896@ids j5897@x) (values (cons j5897@x j5887@y) j5896@ids)) j5893@j5891@ids j5892@j5890@x)))) j5883@j5881@ids j5882@j5880@y)))) j5874@ls/false) ((lambda (j5900@t) ((lambda (j5902@ls/false) (if j5902@ls/false (apply (lambda () (values '() j5788@ids)) j5902@ls/false) ((lambda (j5904@t) ((lambda (j5906@ls/false) (if (and j5906@ls/false (apply (lambda (j5908@p) (not (j2209@stx? j5908@p))) j5906@ls/false)) (apply (lambda (j5910@p) (call-with-values (lambda () (j5785@cvt j5910@p j5787@n j5788@ids)) (lambda (j5914@j5912@p j5915@j5913@ids) ((lambda (j5918@ids j5919@p) (values (vector 'vector j5919@p) j5918@ids)) j5915@j5913@ids j5914@j5912@p)))) j5906@ls/false) ((lambda (j5922@t) ((lambda (j5924@ls/false) (if j5924@ls/false (apply (lambda (j5926@datum) (values (vector 'atom (j2287@stx->datum j5926@datum)) j5788@ids)) j5924@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j5922@t))) (j2762@syntax-dispatch j5922@t 'any))) j5904@t))) (j2762@syntax-dispatch j5904@t '#(vector each-any)))) j5900@t))) (j2762@syntax-dispatch j5900@t '()))) j5872@t))) (j2762@syntax-dispatch j5872@t '(any . any)))) j5822@t))) (j2762@syntax-dispatch j5822@t '(any any . #(each+ any () any))))) j5800@t))) (j2762@syntax-dispatch j5800@t '(any any)))) j5792@t))) (j2762@syntax-dispatch j5792@t 'any))) j5786@p))) (j5785@cvt j5778@pattern '0 '()))) '#f '#f))) (set! j2762@syntax-dispatch ((lambda () ((lambda (j5955@stx^ j5957@match-each j5959@match-each+ j5961@match-each-any j5963@match-empty j5965@combine j5967@match* j5969@match) (begin (set! j5955@stx^ (lambda (j6156@e j6157@m* j6158@s* j6159@ae*) (if (and (null? j6157@m*) (null? j6158@s*) (null? j6159@ae*)) j6156@e (j2241@mkstx j6156@e j6157@m* j6158@s* j6159@ae*)))) (set! j5957@match-each (lambda (j6127@e j6128@p j6129@m* j6130@s* j6131@ae*) (if (pair? j6127@e) ((lambda (j6137@first) (and j6137@first ((lambda (j6139@rest) (and j6139@rest (cons j6137@first j6139@rest))) (j5957@match-each (cdr j6127@e) j6128@p j6129@m* j6130@s* j6131@ae*)))) (j5969@match (car j6127@e) j6128@p j6129@m* j6130@s* j6131@ae* '())) (if (null? j6127@e) '() (if (j2209@stx? j6127@e) (and (not (j2135@top-marked? j6129@m*)) (call-with-values (lambda () (j2239@join-wraps j6129@m* j6130@s* j6131@ae* j6127@e)) (lambda (j6144@j6141@m* j6145@j6142@s* j6146@j6143@ae*) ((lambda (j6150@ae* j6151@s* j6152@m*) (j5957@match-each (j2213@stx-expr j6127@e) j6128@p j6152@m* j6151@s* j6150@ae*)) j6146@j6143@ae* j6145@j6142@s* j6144@j6141@m*)))) (if (j1152@j919@annotation? j6127@e) (j5957@match-each (j1154@j923@annotation-expression j6127@e) j6128@p j6129@m* j6130@s* j6131@ae*) '#f)))))) (set! j5959@match-each+ (lambda (j6069@e j6070@x-pat j6071@y-pat j6072@z-pat j6073@m* j6074@s* j6075@ae* j6076@r) ((letrec ((j6085@f (lambda (j6087@e j6088@m* j6089@s* j6090@ae*) (if (pair? j6087@e) (call-with-values (lambda () (j6085@f (cdr j6087@e) j6088@m* j6089@s* j6090@ae*)) (lambda (j6098@j6095@xr* j6099@j6096@y-pat j6100@j6097@r) ((lambda (j6104@r j6105@y-pat j6106@xr*) (if j6104@r (if (null? j6105@y-pat) ((lambda (j6110@xr) (if j6110@xr (values (cons j6110@xr j6106@xr*) j6105@y-pat j6104@r) (values '#f '#f '#f))) (j5969@match (car j6087@e) j6070@x-pat j6088@m* j6089@s* j6090@ae* '())) (values '() (cdr j6105@y-pat) (j5969@match (car j6087@e) (car j6105@y-pat) j6088@m* j6089@s* j6090@ae* j6104@r))) (values '#f '#f '#f))) j6100@j6097@r j6099@j6096@y-pat j6098@j6095@xr*))) (if (j2209@stx? j6087@e) (if (j2135@top-marked? j6088@m*) (values '() j6071@y-pat (j5969@match j6087@e j6072@z-pat j6088@m* j6089@s* j6090@ae* j6076@r)) (call-with-values (lambda () (j2239@join-wraps j6088@m* j6089@s* j6090@ae* j6087@e)) (lambda (j6115@j6112@m* j6116@j6113@s* j6117@j6114@ae*) ((lambda (j6121@ae* j6122@s* j6123@m*) (j6085@f (j2213@stx-expr j6087@e) j6123@m* j6122@s* j6121@ae*)) j6117@j6114@ae* j6116@j6113@s* j6115@j6112@m*)))) (if (j1152@j919@annotation? j6087@e) (j6085@f (j1154@j923@annotation-expression j6087@e) j6088@m* j6089@s* j6090@ae*) (values '() j6071@y-pat (j5969@match j6087@e j6072@z-pat j6088@m* j6089@s* j6090@ae* j6076@r)))))))) j6085@f) j6069@e j6073@m* j6074@s* j6075@ae*))) (set! j5961@match-each-any (lambda (j6044@e j6045@m* j6046@s* j6047@ae*) (if (pair? j6044@e) ((lambda (j6052@l) (and j6052@l (cons (j5955@stx^ (car j6044@e) j6045@m* j6046@s* j6047@ae*) j6052@l))) (j5961@match-each-any (cdr j6044@e) j6045@m* j6046@s* j6047@ae*)) (if (null? j6044@e) '() (if (j2209@stx? j6044@e) (and (not (j2135@top-marked? j6045@m*)) (call-with-values (lambda () (j2239@join-wraps j6045@m* j6046@s* j6047@ae* j6044@e)) (lambda (j6057@j6054@m* j6058@j6055@s* j6059@j6056@ae*) ((lambda (j6063@ae* j6064@s* j6065@m*) (j5961@match-each-any (j2213@stx-expr j6044@e) j6065@m* j6064@s* j6063@ae*)) j6059@j6056@ae* j6058@j6055@s* j6057@j6054@m*)))) (if (j1152@j919@annotation? j6044@e) (j5961@match-each-any (j1154@j923@annotation-expression j6044@e) j6045@m* j6046@s* j6047@ae*) '#f)))))) (set! j5963@match-empty (lambda (j6038@p j6039@r) (if (null? j6038@p) j6039@r (if (eq? j6038@p '_) j6039@r (if (eq? j6038@p 'any) (cons '() j6039@r) (if (pair? j6038@p) (j5963@match-empty (car j6038@p) (j5963@match-empty (cdr j6038@p) j6039@r)) (if (eq? j6038@p 'each-any) (cons '() j6039@r) ((lambda (j6042@t) (if (memv j6042@t '(each)) (j5963@match-empty (vector-ref j6038@p '1) j6039@r) (if (memv j6042@t '(each+)) (j5963@match-empty (vector-ref j6038@p '1) (j5963@match-empty (reverse (vector-ref j6038@p '2)) (j5963@match-empty (vector-ref j6038@p '3) j6039@r))) (if (memv j6042@t '(free-id atom)) j6039@r (if (memv j6042@t '(scheme-id atom)) j6039@r (if (memv j6042@t '(vector)) (j5963@match-empty (vector-ref j6038@p '1) j6039@r) (assertion-violation 'syntax-dispatch '"invalid pattern" j6038@p))))))) (vector-ref j6038@p '0))))))))) (set! j5965@combine (lambda (j6034@r* j6035@r) (if (null? (car j6034@r*)) j6035@r (cons (map car j6034@r*) (j5965@combine (map cdr j6034@r*) j6035@r))))) (set! j5967@match* (lambda (j6001@e j6002@p j6003@m* j6004@s* j6005@ae* j6006@r) (if (null? j6002@p) (and (null? j6001@e) j6006@r) (if (pair? j6002@p) (and (pair? j6001@e) (j5969@match (car j6001@e) (car j6002@p) j6003@m* j6004@s* j6005@ae* (j5969@match (cdr j6001@e) (cdr j6002@p) j6003@m* j6004@s* j6005@ae* j6006@r))) (if (eq? j6002@p 'each-any) ((lambda (j6013@l) (and j6013@l (cons j6013@l j6006@r))) (j5961@match-each-any j6001@e j6003@m* j6004@s* j6005@ae*)) ((lambda (j6015@t) (if (memv j6015@t '(each)) (if (null? j6001@e) (j5963@match-empty (vector-ref j6002@p '1) j6006@r) ((lambda (j6017@r*) (and j6017@r* (j5965@combine j6017@r* j6006@r))) (j5957@match-each j6001@e (vector-ref j6002@p '1) j6003@m* j6004@s* j6005@ae*))) (if (memv j6015@t '(free-id)) (and (symbol? j6001@e) (j2135@top-marked? j6003@m*) (j2273@free-id=? (j5955@stx^ j6001@e j6003@m* j6004@s* j6005@ae*) (vector-ref j6002@p '1)) j6006@r) (if (memv j6015@t '(scheme-id)) (and (symbol? j6001@e) (j2135@top-marked? j6003@m*) (j2273@free-id=? (j5955@stx^ j6001@e j6003@m* j6004@s* j6005@ae*) (j2644@scheme-stx (vector-ref j6002@p '1))) j6006@r) (if (memv j6015@t '(each+)) (call-with-values (lambda () (j5959@match-each+ j6001@e (vector-ref j6002@p '1) (vector-ref j6002@p '2) (vector-ref j6002@p '3) j6003@m* j6004@s* j6005@ae* j6006@r)) (lambda (j6022@j6019@xr* j6023@j6020@y-pat j6024@j6021@r) ((lambda (j6028@r j6029@y-pat j6030@xr*) (and j6028@r (null? j6029@y-pat) (if (null? j6030@xr*) (j5963@match-empty (vector-ref j6002@p '1) j6028@r) (j5965@combine j6030@xr* j6028@r)))) j6024@j6021@r j6023@j6020@y-pat j6022@j6019@xr*))) (if (memv j6015@t '(atom)) (and (fast-equal? (vector-ref j6002@p '1) (j2285@strip j6001@e j6003@m*)) j6006@r) (if (memv j6015@t '(vector)) (and (vector? j6001@e) (j5969@match (vector->list j6001@e) (vector-ref j6002@p '1) j6003@m* j6004@s* j6005@ae* j6006@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" j6002@p)))))))) (vector-ref j6002@p '0))))))) (set! j5969@match (lambda (j5974@e j5975@p j5976@m* j5977@s* j5978@ae* j5979@r) (if (not j5979@r) '#f (if (eq? j5975@p '_) j5979@r (if (eq? j5975@p 'any) (cons (j5955@stx^ j5974@e j5976@m* j5977@s* j5978@ae*) j5979@r) (if (j2209@stx? j5974@e) (and (not (j2135@top-marked? j5976@m*)) (call-with-values (lambda () (j2239@join-wraps j5976@m* j5977@s* j5978@ae* j5974@e)) (lambda (j5989@j5986@m* j5990@j5987@s* j5991@j5988@ae*) ((lambda (j5995@ae* j5996@s* j5997@m*) (j5969@match (j2213@stx-expr j5974@e) j5975@p j5997@m* j5996@s* j5995@ae* j5979@r)) j5991@j5988@ae* j5990@j5987@s* j5989@j5986@m*)))) (if (j1152@j919@annotation? j5974@e) (j5969@match (j1154@j923@annotation-expression j5974@e) j5975@p j5976@m* j5977@s* j5978@ae* j5979@r) (j5967@match* j5974@e j5975@p j5976@m* j5977@s* j5978@ae* j5979@r)))))))) (lambda (j5970@e j5971@p) (j5969@match j5970@e j5971@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! j2764@ellipsis? (lambda (j6164@x) (and (j2265@id? j6164@x) (j2273@free-id=? j6164@x (j2644@scheme-stx '...))))) (set! j2766@underscore? (lambda (j6166@x) (and (j2265@id? j6166@x) (j2273@free-id=? j6166@x (j2644@scheme-stx '_))))) (set! j2768@verify-literals (lambda (j6168@lits j6169@expr) (for-each (lambda (j6172@x) (if (or (not (j2265@id? j6172@x)) (j2764@ellipsis? j6172@x) (j2766@underscore? j6172@x)) (j2995@syntax-violation '#f '"invalid literal" j6169@expr j6172@x) (void))) j6168@lits))) (set! j2770@syntax-case-transformer ((lambda () ((lambda (j6175@build-dispatch-call j6177@invalid-ids-error j6179@gen-clause j6181@gen-syntax-case) (begin (set! j6175@build-dispatch-call (lambda (j6286@pvars j6287@expr j6288@y j6289@r j6290@mr) ((lambda (j6296@ids j6297@levels) ((lambda (j6300@labels j6301@new-vars) ((lambda (j6304@body) (list '(primitive apply) (j2101@j1911@build-lambda '#f j6301@new-vars j6304@body) j6288@y)) (j2796@chi-expr (j2245@add-subst (j2196@make-full-rib j6296@ids j6300@labels) j6287@expr) (append (map (lambda (j6306@label j6307@var j6308@level) (cons j6306@label (j2297@make-binding 'syntax (cons j6307@var j6308@level)))) j6300@labels j6301@new-vars (map cdr j6286@pvars)) j6289@r) j6290@mr))) (map j2141@gen-label j6296@ids) (map j2137@gen-lexical j6296@ids))) (map car j6286@pvars) (map cdr j6286@pvars)))) (set! j6177@invalid-ids-error (lambda (j6274@id* j6275@e j6276@class) ((letrec ((j6280@find (lambda (j6282@id* j6283@ok*) (if (null? j6282@id*) (j2995@syntax-violation '#f '"invalid syntax" j6275@e) (if (j2265@id? (car j6282@id*)) (if (j2279@bound-id-member? (car j6282@id*) j6283@ok*) (j2991@syntax-error (car j6282@id*) '"duplicate " j6276@class) (j6280@find (cdr j6282@id*) (cons (car j6282@id*) j6283@ok*))) (j2991@syntax-error (car j6282@id*) '"invalid " j6276@class)))))) j6280@find) j6274@id* '()))) (set! j6179@gen-clause (lambda (j6236@x j6237@keys j6238@clauses j6239@r j6240@mr j6241@pat j6242@fender j6243@expr) (call-with-values (lambda () (j2760@convert-pattern j6241@pat j6237@keys)) (lambda (j6254@j6252@p j6255@j6253@pvars) ((lambda (j6258@pvars j6259@p) (if (not (j2277@distinct-bound-ids? (map car j6258@pvars))) (j6177@invalid-ids-error (map car j6258@pvars) j6241@pat '"pattern variable") (if (not (for-all (lambda (j6262@x) (not (j2764@ellipsis? (car j6262@x)))) j6258@pvars)) (j2995@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" j6241@pat) ((lambda (j6264@y) ((lambda (j6266@test) ((lambda (j6268@conseq) ((lambda (j6270@altern) (list (j2101@j1911@build-lambda '#f (list j6264@y) (list 'if j6266@test j6268@conseq j6270@altern)) (list '(primitive syntax-dispatch) j6236@x (list 'quote j6259@p)))) (j6181@gen-syntax-case j6236@x j6237@keys j6238@clauses j6239@r j6240@mr))) (j6175@build-dispatch-call j6258@pvars j6243@expr j6264@y j6239@r j6240@mr))) (if (eq? j6242@fender '#t) j6264@y ((lambda (j6272@call) (list 'if j6264@y j6272@call (list 'quote '#f))) (j6175@build-dispatch-call j6258@pvars j6242@fender j6264@y j6239@r j6240@mr))))) (j2137@gen-lexical 'tmp))))) j6255@j6253@pvars j6254@j6252@p))))) (set! j6181@gen-syntax-case (lambda (j6202@x j6203@keys j6204@clauses j6205@r j6206@mr) (if (null? j6204@clauses) (list '(primitive syntax-error) j6202@x) ((lambda (j6212@t) ((lambda (j6214@ls/false) (if j6214@ls/false (apply (lambda (j6216@pat j6217@expr) (if (and (j2265@id? j6216@pat) (not (j2279@bound-id-member? j6216@pat j6203@keys)) (not (j2764@ellipsis? j6216@pat))) (if (j2273@free-id=? j6216@pat (j2644@scheme-stx '_)) (j2796@chi-expr j6217@expr j6205@r j6206@mr) ((lambda (j6220@lab j6221@lex) ((lambda (j6224@body) (list (j2101@j1911@build-lambda '#f (list j6221@lex) j6224@body) j6202@x)) (j2796@chi-expr (j2245@add-subst (j2196@make-full-rib (list j6216@pat) (list j6220@lab)) j6217@expr) (cons (cons j6220@lab (j2297@make-binding 'syntax (cons j6221@lex '0))) j6205@r) j6206@mr))) (j2141@gen-label j6216@pat) (j2137@gen-lexical j6216@pat))) (j6179@gen-clause j6202@x j6203@keys (cdr j6204@clauses) j6205@r j6206@mr j6216@pat '#t j6217@expr))) j6214@ls/false) ((lambda (j6226@t) ((lambda (j6228@ls/false) (if j6228@ls/false (apply (lambda (j6230@pat j6231@fender j6232@expr) (j6179@gen-clause j6202@x j6203@keys (cdr j6204@clauses) j6205@r j6206@mr j6230@pat j6231@fender j6232@expr)) j6228@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j6226@t))) (j2762@syntax-dispatch j6226@t '(any any any)))) j6212@t))) (j2762@syntax-dispatch j6212@t '(any any)))) (car j6204@clauses))))) (lambda (j6182@e j6183@r j6184@mr) ((lambda (j6188@t) ((lambda (j6190@ls/false) (if j6190@ls/false (apply (lambda (j6192@expr j6193@keys j6194@clauses) (begin (j2768@verify-literals j6193@keys j6182@e) ((lambda (j6198@x) ((lambda (j6200@body) (list (j2101@j1911@build-lambda '#f (list j6198@x) j6200@body) (j2796@chi-expr j6192@expr j6183@r j6184@mr))) (j6181@gen-syntax-case j6198@x j6193@keys j6194@clauses j6183@r j6184@mr))) (j2137@gen-lexical 'tmp)))) j6190@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j6188@t))) (j2762@syntax-dispatch j6188@t '(_ any each-any . each-any)))) j6182@e)))) '#f '#f '#f '#f)))) (set! j2772@ellipsis-map (lambda (j6312@proc j6313@ls . j6316@ls*) ((lambda (j6319@who) (begin (set! j6319@who '...) (begin (if (not (list? j6313@ls)) (assertion-violation j6319@who '"not a list" j6313@ls) (void)) (if (not (null? j6316@ls*)) ((lambda (j6320@n) (for-each (lambda (j6322@x) (begin (if (not (list? j6322@x)) (assertion-violation j6319@who '"not a list" j6322@x) (void)) (if (not (= (length j6322@x) j6320@n)) (assertion-violation j6319@who '"length mismatch" j6313@ls j6322@x) (void)))) j6316@ls*)) (length j6313@ls)) (void)) (apply map j6312@proc j6313@ls j6316@ls*)))) '#f))) (set! j2774@syntax-transformer ((lambda () ((lambda (j6325@gen-syntax j6327@gen-ref j6329@gen-append j6331@gen-mappend j6333@gen-map j6335@gen-cons j6337@gen-vector j6339@regen) (begin (set! j6325@gen-syntax (lambda (j6440@src j6441@e j6442@r j6443@maps j6444@ellipsis? j6445@vec?) ((lambda (j6452@t) ((lambda (j6454@ls/false) (if (and j6454@ls/false (apply (lambda (j6456@dots) (j6444@ellipsis? j6456@dots)) j6454@ls/false)) (apply (lambda (j6458@dots) (j2995@syntax-violation '#f '"misplaced ellipsis in syntax form" j6440@src)) j6454@ls/false) ((lambda (j6460@t) ((lambda (j6462@ls/false) (if (and j6462@ls/false (apply (lambda (j6464@id) (j2265@id? j6464@id)) j6462@ls/false)) (apply (lambda (j6466@id) ((lambda (j6468@label) ((lambda (j6470@b) ((lambda () (if (eq? (j2299@binding-type j6470@b) 'syntax) (call-with-values (lambda () ((lambda (j6474@var.lev) (j6327@gen-ref j6440@src (car j6474@var.lev) (cdr j6474@var.lev) j6443@maps)) (j2301@binding-value j6470@b))) (lambda (j6476@j6472@var j6477@j6473@maps) ((lambda (j6480@maps j6481@var) (values (list 'ref j6481@var) j6480@maps)) j6477@j6473@maps j6476@j6472@var))) (values (list 'quote j6441@e) j6443@maps))))) (j2295@label->binding j6468@label j6442@r))) (j2291@id->label j6441@e))) j6462@ls/false) ((lambda (j6484@t) ((lambda (j6486@ls/false) (if (and j6486@ls/false (apply (lambda (j6488@dots j6489@e) (j6444@ellipsis? j6488@dots)) j6486@ls/false)) (apply (lambda (j6492@dots j6493@e) (if j6445@vec? (j2995@syntax-violation '#f '"misplaced ellipsis in syntax form" j6440@src) (j6325@gen-syntax j6440@src j6493@e j6442@r j6443@maps (lambda (j6496@x) '#f) '#f))) j6486@ls/false) ((lambda (j6498@t) ((lambda (j6500@ls/false) (if (and j6500@ls/false (apply (lambda (j6502@x j6503@dots j6504@y) (j6444@ellipsis? j6503@dots)) j6500@ls/false)) (apply (lambda (j6508@x j6509@dots j6510@y) ((letrec ((j6514@f (lambda (j6516@y j6517@k) ((lambda (j6520@t) ((lambda (j6522@ls/false) (if j6522@ls/false (apply (lambda () (j6517@k j6443@maps)) j6522@ls/false) ((lambda (j6524@t) ((lambda (j6526@ls/false) (if (and j6526@ls/false (apply (lambda (j6528@dots j6529@y) (j6444@ellipsis? j6528@dots)) j6526@ls/false)) (apply (lambda (j6532@dots j6533@y) (j6514@f j6533@y (lambda (j6536@maps) (call-with-values (lambda () (j6517@k (cons '() j6536@maps))) (lambda (j6540@j6538@x j6541@j6539@maps) ((lambda (j6544@maps j6545@x) (if (null? (car j6544@maps)) (j2995@syntax-violation '#f '"extra ellipsis in syntax form" j6440@src) (values (j6331@gen-mappend j6545@x (car j6544@maps)) (cdr j6544@maps)))) j6541@j6539@maps j6540@j6538@x)))))) j6526@ls/false) ((lambda (j6548@t) ((lambda (j6550@ls/false) (if j6550@ls/false (apply (lambda () (call-with-values (lambda () (j6325@gen-syntax j6440@src j6516@y j6442@r j6443@maps j6444@ellipsis? j6445@vec?)) (lambda (j6554@j6552@y j6555@j6553@maps) ((lambda (j6558@maps j6559@y) (call-with-values (lambda () (j6517@k j6558@maps)) (lambda (j6564@j6562@x j6565@j6563@maps) ((lambda (j6568@maps j6569@x) (values (j6329@gen-append j6569@x j6559@y) j6568@maps)) j6565@j6563@maps j6564@j6562@x)))) j6555@j6553@maps j6554@j6552@y)))) j6550@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j6548@t))) (j2762@syntax-dispatch j6548@t '_))) j6524@t))) (j2762@syntax-dispatch j6524@t '(any . any)))) j6520@t))) (j2762@syntax-dispatch j6520@t '()))) j6516@y)))) j6514@f) j6510@y (lambda (j6572@maps) (call-with-values (lambda () (j6325@gen-syntax j6440@src j6508@x j6442@r (cons '() j6572@maps) j6444@ellipsis? '#f)) (lambda (j6576@j6574@x j6577@j6575@maps) ((lambda (j6580@maps j6581@x) (if (null? (car j6580@maps)) (j2995@syntax-violation '#f '"extra ellipsis in syntax form" j6440@src) (values (j6333@gen-map j6581@x (car j6580@maps)) (cdr j6580@maps)))) j6577@j6575@maps j6576@j6574@x)))))) j6500@ls/false) ((lambda (j6584@t) ((lambda (j6586@ls/false) (if j6586@ls/false (apply (lambda (j6588@x j6589@y) (call-with-values (lambda () (j6325@gen-syntax j6440@src j6588@x j6442@r j6443@maps j6444@ellipsis? '#f)) (lambda (j6594@j6592@xnew j6595@j6593@maps) ((lambda (j6598@maps j6599@xnew) (call-with-values (lambda () (j6325@gen-syntax j6440@src j6589@y j6442@r j6598@maps j6444@ellipsis? j6445@vec?)) (lambda (j6604@j6602@ynew j6605@j6603@maps) ((lambda (j6608@maps j6609@ynew) (values (j6335@gen-cons j6441@e j6588@x j6589@y j6599@xnew j6609@ynew) j6608@maps)) j6605@j6603@maps j6604@j6602@ynew)))) j6595@j6593@maps j6594@j6592@xnew)))) j6586@ls/false) ((lambda (j6612@t) ((lambda (j6614@ls/false) (if j6614@ls/false (apply (lambda (j6616@ls) (call-with-values (lambda () (j6325@gen-syntax j6440@src j6616@ls j6442@r j6443@maps j6444@ellipsis? '#t)) (lambda (j6620@j6618@lsnew j6621@j6619@maps) ((lambda (j6624@maps j6625@lsnew) (values (j6337@gen-vector j6441@e j6616@ls j6625@lsnew) j6624@maps)) j6621@j6619@maps j6620@j6618@lsnew)))) j6614@ls/false) ((lambda (j6628@t) ((lambda (j6630@ls/false) (if j6630@ls/false (apply (lambda () (values (list 'quote j6441@e) j6443@maps)) j6630@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j6628@t))) (j2762@syntax-dispatch j6628@t '_))) j6612@t))) (j2762@syntax-dispatch j6612@t '#(vector each-any)))) j6584@t))) (j2762@syntax-dispatch j6584@t '(any . any)))) j6498@t))) (j2762@syntax-dispatch j6498@t '(any any . any)))) j6484@t))) (j2762@syntax-dispatch j6484@t '(any any)))) j6460@t))) (j2762@syntax-dispatch j6460@t 'any))) j6452@t))) (j2762@syntax-dispatch j6452@t 'any))) j6441@e))) (set! j6327@gen-ref (lambda (j6416@src j6417@var j6418@level j6419@maps) (if (= j6418@level '0) (values j6417@var j6419@maps) (if (null? j6419@maps) (j2995@syntax-violation '#f '"missing ellipsis in syntax form" j6416@src) (call-with-values (lambda () (j6327@gen-ref j6416@src j6417@var (- j6418@level '1) (cdr j6419@maps))) (lambda (j6426@j6424@outer-var j6427@j6425@outer-maps) ((lambda (j6430@outer-maps j6431@outer-var) ((lambda (j6434@t) (if j6434@t ((lambda (j6436@b) (values (cdr j6436@b) j6419@maps)) j6434@t) ((lambda (j6438@inner-var) (values j6438@inner-var (cons (cons (cons j6431@outer-var j6438@inner-var) (car j6419@maps)) j6430@outer-maps))) (j2137@gen-lexical 'tmp)))) (assq j6431@outer-var (car j6419@maps)))) j6427@j6425@outer-maps j6426@j6424@outer-var))))))) (set! j6329@gen-append (lambda (j6412@x j6413@y) (if (fast-equal? j6413@y ''()) j6412@x (list 'append j6412@x j6413@y)))) (set! j6331@gen-mappend (lambda (j6408@e j6409@map-env) (list 'apply '(primitive append) (j6333@gen-map j6408@e j6409@map-env)))) (set! j6333@gen-map (lambda (j6390@e j6391@map-env) ((lambda (j6394@formals j6395@actuals) (if (eq? (car j6390@e) 'ref) (car j6395@actuals) (if (for-all (lambda (j6398@x) (and (eq? (car j6398@x) 'ref) (memq (cadr j6398@x) j6394@formals))) (cdr j6390@e)) ((lambda (j6400@args) (cons 'map (cons (list 'primitive (car j6390@e)) j6400@args))) (map ((lambda (j6402@r) (lambda (j6404@x) (cdr (assq (cadr j6404@x) j6402@r)))) (map cons j6394@formals j6395@actuals)) (cdr j6390@e))) (cons* 'map (list 'lambda j6394@formals j6390@e) j6395@actuals)))) (map cdr j6391@map-env) (map (lambda (j6406@x) (list 'ref (car j6406@x))) j6391@map-env)))) (set! j6335@gen-cons (lambda (j6374@e j6375@x j6376@y j6377@xnew j6378@ynew) ((lambda (j6384@t) (if (memv j6384@t '(quote)) (if (eq? (car j6377@xnew) 'quote) ((lambda (j6386@xnew j6387@ynew) (if (and (eq? j6386@xnew j6375@x) (eq? j6387@ynew j6376@y)) (list 'quote j6374@e) (list 'quote (cons j6386@xnew j6387@ynew)))) (cadr j6377@xnew) (cadr j6378@ynew)) (if (null? (cadr j6378@ynew)) (list 'list j6377@xnew) (list 'cons j6377@xnew j6378@ynew))) (if (memv j6384@t '(list)) (cons 'list (cons j6377@xnew (cdr j6378@ynew))) (list 'cons j6377@xnew j6378@ynew)))) (car j6378@ynew)))) (set! j6337@gen-vector (lambda (j6368@e j6369@ls j6370@lsnew) (if (eq? (car j6370@lsnew) 'quote) (if (eq? (cadr j6370@lsnew) j6369@ls) (list 'quote j6368@e) (list 'quote (list->vector (cadr j6370@lsnew)))) (if (eq? (car j6370@lsnew) 'list) (cons 'vector (cdr j6370@lsnew)) (list 'list->vector j6370@lsnew))))) (set! j6339@regen (lambda (j6362@x) ((lambda (j6364@t) (if (memv j6364@t '(ref)) (cadr j6362@x) (if (memv j6364@t '(primitive)) (list 'primitive (cadr j6362@x)) (if (memv j6364@t '(quote)) (list 'quote (cadr j6362@x)) (if (memv j6364@t '(lambda)) (j2101@j1911@build-lambda '#f (cadr j6362@x) (j6339@regen (caddr j6362@x))) (if (memv j6364@t '(map)) ((lambda (j6366@ls) (cons '(primitive ellipsis-map) j6366@ls)) (map j6339@regen (cdr j6362@x))) (cons (list 'primitive (car j6362@x)) (map j6339@regen (cdr j6362@x))))))))) (car j6362@x)))) (lambda (j6340@e j6341@r j6342@mr) ((lambda (j6346@t) ((lambda (j6348@ls/false) (if j6348@ls/false (apply (lambda (j6350@x) (call-with-values (lambda () (j6325@gen-syntax j6340@e j6350@x j6341@r '() j2764@ellipsis? '#f)) (lambda (j6354@j6352@e j6355@j6353@maps) ((lambda (j6358@maps j6359@e) (j6339@regen j6359@e)) j6355@j6353@maps j6354@j6352@e)))) j6348@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j6346@t))) (j2762@syntax-dispatch j6346@t '(_ any)))) j6340@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! j2776@core-macro-transformer (lambda (j6632@name) ((lambda (j6634@t) (if (memv j6634@t '(quote)) j2682@quote-transformer (if (memv j6634@t '(lambda)) j2686@lambda-transformer (if (memv j6634@t '(case-lambda)) j2684@case-lambda-transformer (if (memv j6634@t '(letrec)) j2658@letrec-transformer (if (memv j6634@t '(letrec*)) j2660@letrec*-transformer (if (memv j6634@t '(if)) j2674@if-transformer (if (memv j6634@t '(and)) j2676@and-transformer (if (memv j6634@t '(or)) j2678@or-transformer (if (memv j6634@t '(foreign-call)) j2758@foreign-call-transformer (if (memv j6634@t '(syntax-case)) j2770@syntax-case-transformer (if (memv j6634@t '(syntax)) j2774@syntax-transformer (if (memv j6634@t '(type-descriptor)) j2664@type-descriptor-transformer (if (memv j6634@t '(record-type-descriptor)) j2666@record-type-descriptor-transformer (if (memv j6634@t '(record-constructor-descriptor)) j2668@record-constructor-descriptor-transformer (if (memv j6634@t '(fluid-let-syntax)) j2662@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" j6632@name))))))))))))))))) j6632@name))) (set! j2778@symbol-macro (lambda (j6636@x j6637@set) ((lambda (j6640@t) ((lambda (j6642@ls/false) (if (and j6642@ls/false (apply (lambda (j6644@name) (and (j2265@id? j6644@name) (memq (j2267@id->sym j6644@name) j6637@set))) j6642@ls/false)) (apply (lambda (j6646@name) (j2688@bless (list 'quote j6646@name))) j6642@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j6640@t))) (j2762@syntax-dispatch j6640@t '(_ any)))) j6636@x))) (set! j2780@macro-transformer (lambda (j6648@x) (if (procedure? j6648@x) j6648@x (if (symbol? j6648@x) ((lambda (j6650@t) (if (memv j6650@t '(define-record-type)) j2750@define-record-type-macro (if (memv j6650@t '(define-struct)) j2748@define-struct-macro (if (memv j6650@t '(include)) j2738@include-macro (if (memv j6650@t '(cond)) j2734@cond-macro (if (memv j6650@t '(let)) j2694@let-macro (if (memv j6650@t '(do)) j2726@do-macro (if (memv j6650@t '(or)) j2730@or-macro (if (memv j6650@t '(and)) j2732@and-macro (if (memv j6650@t '(let*)) j2728@let*-macro (if (memv j6650@t '(let-values)) j2696@let-values-macro (if (memv j6650@t '(let*-values)) j2698@let*-values-macro (if (memv j6650@t '(syntax-rules)) j2742@syntax-rules-macro (if (memv j6650@t '(quasiquote)) j2744@quasiquote-macro (if (memv j6650@t '(quasisyntax)) j2746@quasisyntax-macro (if (memv j6650@t '(with-syntax)) j2690@with-syntax-macro (if (memv j6650@t '(when)) j2670@when-macro (if (memv j6650@t '(unless)) j2672@unless-macro (if (memv j6650@t '(case)) j2680@case-macro (if (memv j6650@t '(identifier-syntax)) j2724@identifier-syntax-macro (if (memv j6650@t '(time)) j2716@time-macro (if (memv j6650@t '(delay)) j2718@delay-macro (if (memv j6650@t '(assert)) j2720@assert-macro (if (memv j6650@t '(endianness)) j2722@endianness-macro (if (memv j6650@t '(guard)) j2712@guard-macro (if (memv j6650@t '(define-enumeration)) j2714@define-enumeration-macro (if (memv j6650@t '(trace-lambda)) j2700@trace-lambda-macro (if (memv j6650@t '(trace-define)) j2702@trace-define-macro (if (memv j6650@t '(trace-define-syntax)) j2704@trace-define-syntax-macro (if (memv j6650@t '(trace-let-syntax)) j2708@trace-let-syntax-macro (if (memv j6650@t '(trace-letrec-syntax)) j2710@trace-letrec-syntax-macro (if (memv j6650@t '(define-condition-type)) j2752@define-condition-type-macro (if (memv j6650@t '(parameterize)) j2756@parameterize-macro (if (memv j6650@t '(include-into)) j2740@include-into-macro (if (memv j6650@t '(eol-style)) (lambda (j6652@x) (j2778@symbol-macro j6652@x '(none lf cr crlf nel crnel ls))) (if (memv j6650@t '(error-handling-mode)) (lambda (j6654@x) (j2778@symbol-macro j6654@x '(ignore raise replace))) (if (memv j6650@t '(buffer-mode)) (lambda (j6656@x) (j2778@symbol-macro j6656@x '(none line block))) (if (memv j6650@t '(file-options)) j2124@file-options-macro (if (memv j6650@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) j2754@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" j6648@x)))))))))))))))))))))))))))))))))))))))) j6648@x) (error 'core-macro-transformer '"BUG: invalid macro" j6648@x))))) (set! j2782@local-macro-transformer (lambda (j6658@x) (car j6658@x))) (set! j2784@do-macro-call (lambda (j6660@transformer j6661@expr) ((lambda (j6664@out) (begin ((letrec ((j6666@f (lambda (j6668@x) (if (not (j2209@stx? j6668@x)) (if (pair? j6668@x) (begin (j6666@f (car j6668@x)) (j6666@f (cdr j6668@x))) (if (vector? j6668@x) (vector-for-each j6666@f j6668@x) (if (symbol? j6668@x) (j2995@syntax-violation '#f '"raw symbol encountered in output of macro" j6661@expr j6668@x) (void)))) (void))))) j6666@f) j6664@out) (j2243@add-mark (j2233@gen-mark) j6664@out j6661@expr))) (j6660@transformer (j2243@add-mark j2235@anti-mark j6661@expr '#f))))) (set! j2786@chi-macro (lambda (j6670@p j6671@e) (j2784@do-macro-call (j2780@macro-transformer j6670@p) j6671@e))) (set! j2788@chi-local-macro (lambda (j6674@p j6675@e) (j2784@do-macro-call (j2782@local-macro-transformer j6674@p) j6675@e))) (set! j2790@chi-global-macro (lambda (j6678@p j6679@e) ((lambda (j6682@lib j6683@loc) (begin (j1792@j1448@visit-library j6682@lib) ((lambda (j6686@x) ((lambda (j6688@transformer) (j2784@do-macro-call j6688@transformer j6679@e)) (if (procedure? j6686@x) j6686@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" j6686@x)))) (symbol-value j6683@loc)))) (car j6678@p) (cdr j6678@p)))) (set! j2792@chi-expr* (lambda (j6690@e* j6691@r j6692@mr) (if (null? j6690@e*) '() ((lambda (j6696@e) (cons j6696@e (j2792@chi-expr* (cdr j6690@e*) j6691@r j6692@mr))) (j2796@chi-expr (car j6690@e*) j6691@r j6692@mr))))) (set! j2794@chi-application (lambda (j6698@e j6699@r j6700@mr) ((lambda (j6704@t) ((lambda (j6706@ls/false) (if j6706@ls/false (apply (lambda (j6708@rator j6709@rands) ((lambda (j6712@rator) (cons j6712@rator (j2792@chi-expr* j6709@rands j6699@r j6700@mr))) (j2796@chi-expr j6708@rator j6699@r j6700@mr))) j6706@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j6704@t))) (j2762@syntax-dispatch j6704@t '(any . each-any)))) j6698@e))) (set! j2796@chi-expr (lambda (j6714@e j6715@r j6716@mr) (call-with-values (lambda () (j2305@syntax-type j6714@e j6715@r)) (lambda (j6723@j6720@type j6724@j6721@value j6725@j6722@kwd) ((lambda (j6729@kwd j6730@value j6731@type) ((lambda (j6735@t) (if (memv j6735@t '(core-macro)) ((lambda (j6737@transformer) (j6737@transformer j6714@e j6715@r j6716@mr)) (j2776@core-macro-transformer j6730@value)) (if (memv j6735@t '(global)) ((lambda (j6739@lib) ((lambda (j6741@loc) ((lambda () (begin ((j2869@inv-collector) j6739@lib) j6741@loc)))) (cdr j6730@value))) (car j6730@value)) (if (memv j6735@t '(core-prim)) ((lambda (j6743@name) (list 'primitive j6743@name)) j6730@value) (if (memv j6735@t '(call)) (j2794@chi-application j6714@e j6715@r j6716@mr) (if (memv j6735@t '(lexical)) ((lambda (j6745@lex) j6745@lex) (j2646@lexical-var j6730@value)) (if (memv j6735@t '(global-macro global-macro!)) (j2796@chi-expr (j2790@chi-global-macro j6730@value j6714@e) j6715@r j6716@mr) (if (memv j6735@t '(local-macro local-macro!)) (j2796@chi-expr (j2788@chi-local-macro j6730@value j6714@e) j6715@r j6716@mr) (if (memv j6735@t '(macro macro!)) (j2796@chi-expr (j2786@chi-macro j6730@value j6714@e) j6715@r j6716@mr) (if (memv j6735@t '(constant)) ((lambda (j6747@datum) (list 'quote j6747@datum)) j6730@value) (if (memv j6735@t '(set!)) (j2798@chi-set! j6714@e j6715@r j6716@mr) (if (memv j6735@t '(begin)) ((lambda (j6749@t) ((lambda (j6751@ls/false) (if j6751@ls/false (apply (lambda (j6753@x j6754@x*) (j2104@j1961@build-sequence '#f (j2792@chi-expr* (cons j6753@x j6754@x*) j6715@r j6716@mr))) j6751@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j6749@t))) (j2762@syntax-dispatch j6749@t '(_ any . each-any)))) j6714@e) (if (memv j6735@t '(let-syntax letrec-syntax)) ((lambda (j6757@t) ((lambda (j6759@ls/false) (if (and j6759@ls/false (apply (lambda (j6761@xlhs* j6762@xrhs* j6763@xbody j6764@xbody*) (if (not (j2275@valid-bound-ids? j6761@xlhs*)) (j2995@syntax-violation '#f '"invalid identifiers" j6714@e) (void))) j6759@ls/false)) (apply (lambda (j6769@xlhs* j6770@xrhs* j6771@xbody j6772@xbody*) ((lambda (j6777@xlab*) ((lambda (j6779@xrib) ((lambda (j6781@xb*) ((lambda () (j2104@j1961@build-sequence '#f (j2792@chi-expr* (map (lambda (j6783@x) (j2245@add-subst j6779@xrib j6783@x)) (cons j6771@xbody j6772@xbody*)) (append (map cons j6777@xlab* j6781@xb*) j6715@r) (append (map cons j6777@xlab* j6781@xb*) j6716@mr)))))) (map (lambda (j6785@x) (j2327@make-eval-transformer (j2855@expand-transformer (if (eq? j6731@type 'let-syntax) j6785@x (j2245@add-subst j6779@xrib j6785@x)) j6716@mr))) j6770@xrhs*))) (j2196@make-full-rib j6769@xlhs* j6777@xlab*))) (map j2141@gen-label j6769@xlhs*))) j6759@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j6757@t))) (j2762@syntax-dispatch j6757@t '(_ #(each (any any)) any . each-any)))) j6714@e) (if (memv j6735@t '(displaced-lexical)) (j2995@syntax-violation '#f '"identifier out of context" j6714@e) (if (memv j6735@t '(syntax)) (j2995@syntax-violation '#f '"reference to pattern variable outside a syntax form" j6714@e) (if (memv j6735@t '(define define-syntax module import library)) (j2995@syntax-violation '#f (string-append ((lambda (j6787@t) (if (memv j6787@t '(define)) '"a definition" (if (memv j6787@t '(define-syntax)) '"a define-syntax" (if (memv j6787@t '(module)) '"a module definition" (if (memv j6787@t '(library)) '"a library definition" (if (memv j6787@t '(import)) '"an import declaration" (if (memv j6787@t '(export)) '"an export declaration" '"a non-expression"))))))) j6731@type) '" was found where an expression was expected") j6714@e) (if (memv j6735@t '(mutable)) (j2995@syntax-violation '#f '"attempt to reference an unexportable variable" j6714@e) (j2995@syntax-violation '#f '"invalid expression" j6714@e)))))))))))))))))) j6731@type)) j6725@j6722@kwd j6724@j6721@value j6723@j6720@type))))) (set! j2798@chi-set! (lambda (j6789@e j6790@r j6791@mr) ((lambda (j6795@t) ((lambda (j6797@ls/false) (if (and j6797@ls/false (apply (lambda (j6799@x j6800@v) (j2265@id? j6799@x)) j6797@ls/false)) (apply (lambda (j6803@x j6804@v) (call-with-values (lambda () (j2305@syntax-type j6803@x j6790@r)) (lambda (j6810@j6807@type j6811@j6808@value j6812@j6809@kwd) ((lambda (j6816@kwd j6817@value j6818@type) ((lambda (j6822@t) (if (memv j6822@t '(lexical)) (begin (j2650@set-lexical-mutable! j6817@value '#t) (list 'set! (j2646@lexical-var j6817@value) (j2796@chi-expr j6804@v j6790@r j6791@mr))) (if (memv j6822@t '(core-prim)) (j2995@syntax-violation '#f '"cannot modify imported core primitive" j6789@e) (if (memv j6822@t '(global)) (j2995@syntax-violation '#f '"attempt to modify imported binding" j6789@e) (if (memv j6822@t '(global-macro!)) (j2796@chi-expr (j2790@chi-global-macro j6817@value j6789@e) j6790@r j6791@mr) (if (memv j6822@t '(local-macro!)) (j2796@chi-expr (j2788@chi-local-macro j6817@value j6789@e) j6790@r j6791@mr) (if (memv j6822@t '(mutable)) (j2995@syntax-violation '#f '"attempt to assign to an unexportable variable" j6789@e) (j2995@syntax-violation '#f '"invalid syntax" j6789@e)))))))) j6818@type)) j6812@j6809@kwd j6811@j6808@value j6810@j6807@type)))) j6797@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j6795@t))) (j2762@syntax-dispatch j6795@t '(_ any any)))) j6789@e))) (set! j2800@verify-formals (lambda (j6824@fmls j6825@stx) ((lambda (j6828@t) ((lambda (j6830@ls/false) (if j6830@ls/false (apply (lambda (j6832@x*) (if (not (j2275@valid-bound-ids? j6832@x*)) (j2692@invalid-fmls-error j6825@stx j6824@fmls) (void))) j6830@ls/false) ((lambda (j6834@t) ((lambda (j6836@ls/false) (if j6836@ls/false (apply (lambda (j6838@x* j6839@x) (if (not (j2275@valid-bound-ids? (cons j6839@x j6838@x*))) (j2692@invalid-fmls-error j6825@stx j6824@fmls) (void))) j6836@ls/false) ((lambda (j6842@t) ((lambda (j6844@ls/false) (if j6844@ls/false (apply (lambda () (j2995@syntax-violation '#f '"invalid syntax" j6825@stx)) j6844@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j6842@t))) (j2762@syntax-dispatch j6842@t '_))) j6834@t))) (j2762@syntax-dispatch j6834@t '#(each+ any () any)))) j6828@t))) (j2762@syntax-dispatch j6828@t 'each-any))) j6824@fmls))) (set! j2802@chi-lambda-clause (lambda (j6846@stx j6847@fmls j6848@body* j6849@r j6850@mr) ((lambda (j6856@t) ((lambda (j6858@ls/false) (if j6858@ls/false (apply (lambda (j6860@x*) (begin (j2800@verify-formals j6847@fmls j6846@stx) ((lambda (j6862@lex* j6863@lab*) (values j6862@lex* (j2818@chi-internal (j2245@add-subst (j2196@make-full-rib j6860@x* j6863@lab*) j6848@body*) (j2654@add-lexicals j6863@lab* j6862@lex* j6849@r) j6850@mr))) (map j2137@gen-lexical j6860@x*) (map j2141@gen-label j6860@x*)))) j6858@ls/false) ((lambda (j6866@t) ((lambda (j6868@ls/false) (if j6868@ls/false (apply (lambda (j6870@x* j6871@x) (begin (j2800@verify-formals j6847@fmls j6846@stx) ((lambda (j6874@lex* j6875@lab* j6876@lex j6877@lab) (values (append j6874@lex* j6876@lex) (j2818@chi-internal (j2245@add-subst (j2196@make-full-rib (cons j6871@x j6870@x*) (cons j6877@lab j6875@lab*)) j6848@body*) (j2654@add-lexicals (cons j6877@lab j6875@lab*) (cons j6876@lex j6874@lex*) j6849@r) j6850@mr))) (map j2137@gen-lexical j6870@x*) (map j2141@gen-label j6870@x*) (j2137@gen-lexical j6871@x) (j2141@gen-label j6871@x)))) j6868@ls/false) ((lambda (j6882@t) ((lambda (j6884@ls/false) (if j6884@ls/false (apply (lambda () (j2995@syntax-violation '#f '"invalid syntax" j6847@fmls)) j6884@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j6882@t))) (j2762@syntax-dispatch j6882@t '_))) j6866@t))) (j2762@syntax-dispatch j6866@t '#(each+ any () any)))) j6856@t))) (j2762@syntax-dispatch j6856@t 'each-any))) j6847@fmls))) (set! j2804@chi-lambda-clause* (lambda (j6886@stx j6887@fmls* j6888@body** j6889@r j6890@mr) (if (null? j6887@fmls*) (values '() '()) (call-with-values (lambda () (j2802@chi-lambda-clause j6886@stx (car j6887@fmls*) (car j6888@body**) j6889@r j6890@mr)) (lambda (j6898@j6896@a j6899@j6897@b) ((lambda (j6902@b j6903@a) (call-with-values (lambda () (j2804@chi-lambda-clause* j6886@stx (cdr j6887@fmls*) (cdr j6888@body**) j6889@r j6890@mr)) (lambda (j6908@j6906@a* j6909@j6907@b*) ((lambda (j6912@b* j6913@a*) (values (cons j6903@a j6913@a*) (cons j6902@b j6912@b*))) j6909@j6907@b* j6908@j6906@a*)))) j6899@j6897@b j6898@j6896@a)))))) (set! j2806@chi-defun (lambda (j6916@x j6917@r j6918@mr) ((lambda (j6922@fmls j6923@body*) (call-with-values (lambda () (j2802@chi-lambda-clause j6922@fmls j6922@fmls j6923@body* j6917@r j6918@mr)) (lambda (j6928@j6926@fmls j6929@j6927@body) ((lambda (j6932@body j6933@fmls) (j2101@j1911@build-lambda '#f j6933@fmls j6932@body)) j6929@j6927@body j6928@j6926@fmls)))) (car j6916@x) (cdr j6916@x)))) (set! j2808@chi-rhs (lambda (j6936@rhs j6937@r j6938@mr) ((lambda (j6942@t) (if (memv j6942@t '(defun)) (j2806@chi-defun (cdr j6936@rhs) j6937@r j6938@mr) (if (memv j6942@t '(expr)) ((lambda (j6944@expr) (j2796@chi-expr j6944@expr j6937@r j6938@mr)) (cdr j6936@rhs)) (if (memv j6942@t '(top-expr)) ((lambda (j6946@expr) (j2104@j1961@build-sequence '#f (list (j2796@chi-expr j6946@expr j6937@r j6938@mr) (j2105@j1963@build-void)))) (cdr j6936@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" j6936@rhs))))) (car j6936@rhs)))) (set! j2810@expand-interaction-rhs*/init* (lambda (j6948@lhs* j6949@rhs* j6950@init* j6951@r j6952@mr) ((letrec ((j6958@f (lambda (j6960@lhs* j6961@rhs*) (if (null? j6960@lhs*) (map (lambda (j6964@x) (j2796@chi-expr j6964@x j6951@r j6952@mr)) j6950@init*) ((lambda (j6966@lhs j6967@rhs) ((lambda (j6970@t) (if (memv j6970@t '(defun)) ((lambda (j6972@rhs) (cons (list 'set! j6966@lhs j6972@rhs) (j6958@f (cdr j6960@lhs*) (cdr j6961@rhs*)))) (j2806@chi-defun (cdr j6967@rhs) j6951@r j6952@mr)) (if (memv j6970@t '(expr)) ((lambda (j6974@rhs) (cons (list 'set! j6966@lhs j6974@rhs) (j6958@f (cdr j6960@lhs*) (cdr j6961@rhs*)))) (j2796@chi-expr (cdr j6967@rhs) j6951@r j6952@mr)) (if (memv j6970@t '(top-expr)) ((lambda (j6976@e) (cons j6976@e (j6958@f (cdr j6960@lhs*) (cdr j6961@rhs*)))) (j2796@chi-expr (cdr j6967@rhs) j6951@r j6952@mr)) (error 'expand-interaction '"invallid" j6967@rhs))))) (car j6967@rhs))) (car j6960@lhs*) (car j6961@rhs*)))))) j6958@f) j6948@lhs* j6949@rhs*))) (set! j2812@chi-rhs* (lambda (j6978@rhs* j6979@r j6980@mr) ((letrec ((j6984@f (lambda (j6986@ls) (if (null? j6986@ls) '() ((lambda (j6988@a) (cons j6988@a (j6984@f (cdr j6986@ls)))) (j2808@chi-rhs (car j6986@ls) j6979@r j6980@mr)))))) j6984@f) j6978@rhs*))) (set! j2814@find-bound=? (lambda (j6990@x j6991@lhs* j6992@rhs*) (if (null? j6991@lhs*) '#f (if (j2271@bound-id=? j6990@x (car j6991@lhs*)) (car j6992@rhs*) (j2814@find-bound=? j6990@x (cdr j6991@lhs*) (cdr j6992@rhs*)))))) (set! j2816@find-dups (lambda (j6996@ls) ((letrec ((j6998@f (lambda (j7000@ls j7001@dups) (if (null? j7000@ls) j7001@dups ((lambda (j7004@t) (if j7004@t ((lambda (j7006@x) (j6998@f (cdr j7000@ls) (cons (list (car j7000@ls) j7006@x) j7001@dups))) j7004@t) (j6998@f (cdr j7000@ls) j7001@dups))) (j2814@find-bound=? (car j7000@ls) (cdr j7000@ls) (cdr j7000@ls))))))) j6998@f) j6996@ls '()))) (set! j2818@chi-internal (lambda (j7008@e* j7009@r j7010@mr) ((lambda (j7014@rib) (call-with-values (lambda () (j2853@chi-body* (map (lambda (j7024@x) (j2245@add-subst j7014@rib j7024@x)) (j2263@syntax->list j7008@e*)) j7009@r j7010@mr '() '() '() '() '() j7014@rib '#f)) (lambda (j7026@j7016@e* j7027@j7017@r j7028@j7018@mr j7029@j7019@lex* j7030@j7020@rhs* j7031@j7021@mod** j7032@j7022@kwd* j7033@j7023@_exp*) ((lambda (j7042@_exp* j7043@kwd* j7044@mod** j7045@rhs* j7046@lex* j7047@mr j7048@r j7049@e*) (begin (if (null? j7049@e*) (j2995@syntax-violation '#f '"no expression in body" j7049@e*) (void)) ((lambda (j7058@init*) ((lambda (j7060@rhs*) ((lambda () (j2107@j1967@build-letrec* '#f (reverse j7046@lex*) (reverse j7060@rhs*) (j2104@j1961@build-sequence '#f j7058@init*))))) (j2812@chi-rhs* j7045@rhs* j7048@r j7047@mr))) (j2792@chi-expr* (append (apply append (reverse j7044@mod**)) j7049@e*) j7048@r j7047@mr)))) j7033@j7023@_exp* j7032@j7022@kwd* j7031@j7021@mod** j7030@j7020@rhs* j7029@j7019@lex* j7028@j7018@mr j7027@j7017@r j7026@j7016@e*)))) (j2184@make-empty-rib)))) (set! j2820@parse-module (lambda (j7062@e) ((lambda (j7064@t) ((lambda (j7066@ls/false) (if j7066@ls/false (apply (lambda (j7068@export* j7069@b*) (begin (if (not (for-all j2265@id? j7068@export*)) (j2995@syntax-violation '#f '"module exports must be identifiers" j7062@e) (void)) (values '#f (list->vector j7068@export*) j7069@b*))) j7066@ls/false) ((lambda (j7072@t) ((lambda (j7074@ls/false) (if j7074@ls/false (apply (lambda (j7076@name j7077@export* j7078@b*) (begin (if (not (j2265@id? j7076@name)) (j2995@syntax-violation '#f '"module name must be an identifier" j7062@e) (void)) (if (not (for-all j2265@id? j7077@export*)) (j2995@syntax-violation '#f '"module exports must be identifiers" j7062@e) (void)) (values j7076@name (list->vector j7077@export*) j7078@b*))) j7074@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j7072@t))) (j2762@syntax-dispatch j7072@t '(_ any each-any . each-any)))) j7064@t))) (j2762@syntax-dispatch j7064@t '(_ each-any . each-any)))) j7062@e))) (set! j2826@j2821 (make-record-type-descriptor 'module-interface '#f 'j2824 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! j2828@j2823 '#f) (set! j2830@j2822 (make-record-constructor-descriptor j2826@j2821 '#f j2828@j2823)) (set! j2833@module-interface? (record-predicate j2826@j2821)) (set! j2835@make-module-interface (record-constructor j2830@j2822)) (set! j2837@module-interface-first-mark (record-accessor j2826@j2821 '0)) (set! j2839@module-interface-exp-id-vec (record-accessor j2826@j2821 '1)) (set! j2841@module-interface-exp-lab-vec (record-accessor j2826@j2821 '2)) (set! j2843@set-module-interface-first-mark! (record-mutator j2826@j2821 '0)) (set! j2845@set-module-interface-exp-id-vec! (record-mutator j2826@j2821 '1)) (set! j2847@set-module-interface-exp-lab-vec! (record-mutator j2826@j2821 '2)) (set! j2849@module-interface-exp-id* (lambda (j7082@iface j7083@id) ((lambda (j7087@diff-marks) (begin (set! j7087@diff-marks (lambda (j7094@ls j7095@x) (begin (if (null? j7094@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (j7098@a) (if (eq? j7098@a j7095@x) '() (cons j7098@a (j7087@diff-marks (cdr j7094@ls) j7095@x)))) (car j7094@ls))))) ((lambda (j7088@diff j7089@id-vec) (if (null? j7088@diff) j7089@id-vec (vector-map (lambda (j7092@x) (j2211@make-stx (j2213@stx-expr j7092@x) (append j7088@diff (j2215@stx-mark* j7092@x)) '() '())) j7089@id-vec))) (j7087@diff-marks (j2215@stx-mark* j7083@id) (j2837@module-interface-first-mark j7082@iface)) (j2839@module-interface-exp-id-vec j7082@iface)))) '#f))) (set! j2851@chi-internal-module (lambda (j7100@e j7101@r j7102@mr j7103@lex* j7104@rhs* j7105@mod** j7106@kwd*) (call-with-values (lambda () (j2820@parse-module j7100@e)) (lambda (j7117@j7114@name j7118@j7115@exp-id* j7119@j7116@e*) ((lambda (j7123@e* j7124@exp-id* j7125@name) ((lambda (j7129@rib) ((lambda (j7131@e*) ((lambda () (call-with-values (lambda () (j2853@chi-body* j7131@e* j7101@r j7102@mr j7103@lex* j7104@rhs* j7105@mod** j7106@kwd* '() j7129@rib '#f)) (lambda (j7141@j7133@e* j7142@j7134@r j7143@j7135@mr j7144@j7136@lex* j7145@j7137@rhs* j7146@j7138@mod** j7147@j7139@kwd* j7148@j7140@_exp*) ((lambda (j7157@_exp* j7158@kwd* j7159@mod** j7160@rhs* j7161@lex* j7162@mr j7163@r j7164@e*) ((lambda (j7173@exp-lab* j7174@mod**) (if (not j7125@name) (values j7161@lex* j7160@rhs* j7124@exp-id* j7173@exp-lab* j7163@r j7162@mr j7174@mod** j7158@kwd*) ((lambda (j7177@lab j7178@iface) (values j7161@lex* j7160@rhs* (vector j7125@name) (vector j7177@lab) (cons (cons j7177@lab (cons '$module j7178@iface)) j7163@r) (cons (cons j7177@lab (cons '$module j7178@iface)) j7162@mr) j7174@mod** j7158@kwd*)) (j2141@gen-label 'module) (j2835@make-module-interface (car (j2215@stx-mark* j7125@name)) (vector-map (lambda (j7181@x) (j2211@make-stx (j2213@stx-expr j7181@x) (j2215@stx-mark* j7181@x) '() '())) j7124@exp-id*) j7173@exp-lab*)))) (vector-map (lambda (j7183@x) (or (j2291@id->label (j2211@make-stx (j2267@id->sym j7183@x) (j2215@stx-mark* j7183@x) (list j7129@rib) '())) (j2995@syntax-violation '#f '"cannot find module export" j7183@x))) j7124@exp-id*) (cons j7164@e* j7159@mod**))) j7148@j7140@_exp* j7147@j7139@kwd* j7146@j7138@mod** j7145@j7137@rhs* j7144@j7136@lex* j7143@j7135@mr j7142@j7134@r j7141@j7133@e*)))))) (map (lambda (j7185@x) (j2245@add-subst j7129@rib j7185@x)) (j2263@syntax->list j7123@e*)))) (j2184@make-empty-rib))) j7119@j7116@e* j7118@j7115@exp-id* j7117@j7114@name))))) (set! j2853@chi-body* (lambda (j7187@e* j7188@r j7189@mr j7190@lex* j7191@rhs* j7192@mod** j7193@kwd* j7194@exp* j7195@rib j7196@top?) (if (null? j7187@e*) (values j7187@e* j7188@r j7189@mr j7190@lex* j7191@rhs* j7192@mod** j7193@kwd* j7194@exp*) ((lambda (j7207@e) (call-with-values (lambda () (j2305@syntax-type j7207@e j7188@r)) (lambda (j7212@j7209@type j7213@j7210@value j7214@j7211@kwd) ((lambda (j7218@kwd j7219@value j7220@type) ((lambda (j7224@kwd*) ((lambda (j7226@t) (if (memv j7226@t '(define)) (call-with-values (lambda () (j2638@parse-define j7207@e)) (lambda (j7230@j7228@id j7231@j7229@rhs) ((lambda (j7234@rhs j7235@id) (begin (if (j2279@bound-id-member? j7235@id j7224@kwd*) (j2995@syntax-violation '#f '"cannot redefine keyword" j7207@e) (void)) (call-with-values (lambda () (j2145@gen-define-label+loc j7235@id j7195@rib)) (lambda (j7240@j7238@lab j7241@j7239@lex) ((lambda (j7244@lex j7245@lab) (begin (j2186@extend-rib! j7195@rib j7235@id j7245@lab) (j2853@chi-body* (cdr j7187@e*) (j2652@add-lexical j7245@lab j7244@lex j7188@r) j7189@mr (cons j7244@lex j7190@lex*) (cons j7234@rhs j7191@rhs*) j7192@mod** j7224@kwd* j7194@exp* j7195@rib j7196@top?))) j7241@j7239@lex j7240@j7238@lab))))) j7231@j7229@rhs j7230@j7228@id))) (if (memv j7226@t '(define-syntax)) (call-with-values (lambda () (j2640@parse-define-syntax j7207@e)) (lambda (j7250@j7248@id j7251@j7249@rhs) ((lambda (j7254@rhs j7255@id) (begin (if (j2279@bound-id-member? j7255@id j7224@kwd*) (j2995@syntax-violation '#f '"cannot redefine keyword" j7207@e) (void)) ((lambda (j7258@lab j7259@expanded-rhs) (begin (j2186@extend-rib! j7195@rib j7255@id j7258@lab) ((lambda (j7262@b) (j2853@chi-body* (cdr j7187@e*) (cons (cons j7258@lab j7262@b) j7188@r) (cons (cons j7258@lab j7262@b) j7189@mr) j7190@lex* j7191@rhs* j7192@mod** j7224@kwd* j7194@exp* j7195@rib j7196@top?)) (j2327@make-eval-transformer j7259@expanded-rhs)))) (j2147@gen-define-label j7255@id j7195@rib) (j2855@expand-transformer j7254@rhs j7189@mr)))) j7251@j7249@rhs j7250@j7248@id))) (if (memv j7226@t '(let-syntax letrec-syntax)) ((lambda (j7264@t) ((lambda (j7266@ls/false) (if (and j7266@ls/false (apply (lambda (j7268@xlhs* j7269@xrhs* j7270@xbody*) (if (not (j2275@valid-bound-ids? j7268@xlhs*)) (j2995@syntax-violation '#f '"invalid identifiers" j7207@e) (void))) j7266@ls/false)) (apply (lambda (j7274@xlhs* j7275@xrhs* j7276@xbody*) ((lambda (j7280@xlab*) ((lambda (j7282@xrib) ((lambda (j7284@xb*) ((lambda () (j2853@chi-body* (append (map (lambda (j7286@x) (j2245@add-subst j7282@xrib j7286@x)) j7276@xbody*) (cdr j7187@e*)) (append (map cons j7280@xlab* j7284@xb*) j7188@r) (append (map cons j7280@xlab* j7284@xb*) j7189@mr) j7190@lex* j7191@rhs* j7192@mod** j7224@kwd* j7194@exp* j7195@rib j7196@top?)))) (map (lambda (j7288@x) (j2327@make-eval-transformer (j2855@expand-transformer (if (eq? j7220@type 'let-syntax) j7288@x (j2245@add-subst j7282@xrib j7288@x)) j7189@mr))) j7275@xrhs*))) (j2196@make-full-rib j7274@xlhs* j7280@xlab*))) (map j2141@gen-label j7274@xlhs*))) j7266@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j7264@t))) (j2762@syntax-dispatch j7264@t '(_ #(each (any any)) . each-any)))) j7207@e) (if (memv j7226@t '(begin)) ((lambda (j7290@t) ((lambda (j7292@ls/false) (if j7292@ls/false (apply (lambda (j7294@x*) (j2853@chi-body* (append j7294@x* (cdr j7187@e*)) j7188@r j7189@mr j7190@lex* j7191@rhs* j7192@mod** j7224@kwd* j7194@exp* j7195@rib j7196@top?)) j7292@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j7290@t))) (j2762@syntax-dispatch j7290@t '(_ . each-any)))) j7207@e) (if (memv j7226@t '(global-macro global-macro!)) (j2853@chi-body* (cons (j2245@add-subst j7195@rib (j2790@chi-global-macro j7219@value j7207@e)) (cdr j7187@e*)) j7188@r j7189@mr j7190@lex* j7191@rhs* j7192@mod** j7224@kwd* j7194@exp* j7195@rib j7196@top?) (if (memv j7226@t '(local-macro local-macro!)) (j2853@chi-body* (cons (j2245@add-subst j7195@rib (j2788@chi-local-macro j7219@value j7207@e)) (cdr j7187@e*)) j7188@r j7189@mr j7190@lex* j7191@rhs* j7192@mod** j7224@kwd* j7194@exp* j7195@rib j7196@top?) (if (memv j7226@t '(macro macro!)) (j2853@chi-body* (cons (j2245@add-subst j7195@rib (j2786@chi-macro j7219@value j7207@e)) (cdr j7187@e*)) j7188@r j7189@mr j7190@lex* j7191@rhs* j7192@mod** j7224@kwd* j7194@exp* j7195@rib j7196@top?) (if (memv j7226@t '(module)) (call-with-values (lambda () (j2851@chi-internal-module j7207@e j7188@r j7189@mr j7190@lex* j7191@rhs* j7192@mod** j7224@kwd*)) (lambda (j7304@j7296@lex* j7305@j7297@rhs* j7306@j7298@m-exp-id* j7307@j7299@m-exp-lab* j7308@j7300@r j7309@j7301@mr j7310@j7302@mod** j7311@j7303@kwd*) ((lambda (j7320@kwd* j7321@mod** j7322@mr j7323@r j7324@m-exp-lab* j7325@m-exp-id* j7326@rhs* j7327@lex*) (begin (vector-for-each (lambda (j7336@id j7337@lab) (j2186@extend-rib! j7195@rib j7336@id j7337@lab)) j7325@m-exp-id* j7324@m-exp-lab*) (j2853@chi-body* (cdr j7187@e*) j7323@r j7322@mr j7327@lex* j7326@rhs* j7321@mod** j7320@kwd* j7194@exp* j7195@rib j7196@top?))) j7311@j7303@kwd* j7310@j7302@mod** j7309@j7301@mr j7308@j7300@r j7307@j7299@m-exp-lab* j7306@j7298@m-exp-id* j7305@j7297@rhs* j7304@j7296@lex*))) (if (memv j7226@t '(library)) (begin (j2965@library-expander (j2287@stx->datum j7207@e)) (j2853@chi-body* (cdr j7187@e*) j7188@r j7189@mr j7190@lex* j7191@rhs* j7192@mod** j7224@kwd* j7194@exp* j7195@rib j7196@top?)) (if (memv j7226@t '(export)) ((lambda (j7340@t) ((lambda (j7342@ls/false) (if j7342@ls/false (apply (lambda (j7344@exp-decl*) (j2853@chi-body* (cdr j7187@e*) j7188@r j7189@mr j7190@lex* j7191@rhs* j7192@mod** j7224@kwd* (append j7344@exp-decl* j7194@exp*) j7195@rib j7196@top?)) j7342@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j7340@t))) (j2762@syntax-dispatch j7340@t '(_ . each-any)))) j7207@e) (if (memv j7226@t '(import)) ((lambda () ((lambda (j7347@module-import? j7349@module-import j7351@library-import) (begin (set! j7347@module-import? (lambda (j7423@e) ((lambda (j7425@t) ((lambda (j7427@ls/false) (if (and j7427@ls/false (apply (lambda (j7429@id) (j2265@id? j7429@id)) j7427@ls/false)) (apply (lambda (j7431@id) '#t) j7427@ls/false) ((lambda (j7433@t) ((lambda (j7435@ls/false) (if j7435@ls/false (apply (lambda (j7437@imp*) '#f) j7435@ls/false) ((lambda (j7439@t) ((lambda (j7441@ls/false) (if j7441@ls/false (apply (lambda () (j2995@syntax-violation '#f '"malformed import form" j7423@e)) j7441@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j7439@t))) (j2762@syntax-dispatch j7439@t '_))) j7433@t))) (j2762@syntax-dispatch j7433@t '(_ . each-any)))) j7425@t))) (j2762@syntax-dispatch j7425@t '(_ any)))) j7423@e))) (set! j7349@module-import (lambda (j7392@e j7393@r) ((lambda (j7396@t) ((lambda (j7398@ls/false) (if (and j7398@ls/false (apply (lambda (j7400@id) (j2265@id? j7400@id)) j7398@ls/false)) (apply (lambda (j7402@id) (call-with-values (lambda () (j2305@syntax-type j7402@id j7393@r)) (lambda (j7407@j7404@type j7408@j7405@value j7409@j7406@kwd) ((lambda (j7413@kwd j7414@value j7415@type) ((lambda (j7419@t) (if (memv j7419@t '($module)) ((lambda (j7421@iface) (values (j2849@module-interface-exp-id* j7421@iface j7402@id) (j2841@module-interface-exp-lab-vec j7421@iface))) j7414@value) (j2995@syntax-violation '#f '"invalid import" j7392@e))) j7415@type)) j7409@j7406@kwd j7408@j7405@value j7407@j7404@type)))) j7398@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j7396@t))) (j2762@syntax-dispatch j7396@t '(_ any)))) j7392@e))) (set! j7351@library-import (lambda (j7366@e) ((lambda (j7368@t) ((lambda (j7370@ls/false) (if j7370@ls/false (apply (lambda (j7372@ctxt j7373@imp*) (call-with-values (lambda () (j2863@parse-import-spec* (j3001@syntax->datum j7373@imp*))) (lambda (j7378@j7376@subst-names j7379@j7377@subst-labels) ((lambda (j7382@subst-labels j7383@subst-names) (values (vector-map (lambda (j7386@name) (j2231@datum->stx j7372@ctxt j7386@name)) j7383@subst-names) j7382@subst-labels)) j7379@j7377@subst-labels j7378@j7376@subst-names)))) j7370@ls/false) ((lambda (j7388@t) ((lambda (j7390@ls/false) (if j7390@ls/false (apply (lambda () (j2995@syntax-violation '#f '"invalid import form" j7366@e)) j7390@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j7388@t))) (j2762@syntax-dispatch j7388@t '_))) j7368@t))) (j2762@syntax-dispatch j7368@t '(any . each-any)))) j7366@e))) (begin (call-with-values (lambda () (if (j7347@module-import? j7207@e) (j7349@module-import j7207@e j7188@r) (j7351@library-import j7207@e))) (lambda (j7354@j7352@id* j7355@j7353@lab*) ((lambda (j7358@lab* j7359@id*) (vector-for-each (lambda (j7362@id j7363@lab) (j2186@extend-rib! j7195@rib j7362@id j7363@lab)) j7359@id* j7358@lab*)) j7355@j7353@lab* j7354@j7352@id*))) (j2853@chi-body* (cdr j7187@e*) j7188@r j7189@mr j7190@lex* j7191@rhs* j7192@mod** j7224@kwd* j7194@exp* j7195@rib j7196@top?)))) '#f '#f '#f))) (if j7196@top? (j2853@chi-body* (cdr j7187@e*) j7188@r j7189@mr (cons (j2137@gen-lexical 'dummy) j7190@lex*) (cons (cons 'top-expr j7207@e) j7191@rhs*) j7192@mod** j7224@kwd* j7194@exp* j7195@rib j7196@top?) (values j7187@e* j7188@r j7189@mr j7190@lex* j7191@rhs* j7192@mod** j7224@kwd* j7194@exp*)))))))))))))) j7220@type)) (if (j2265@id? j7218@kwd) (cons j7218@kwd j7193@kwd*) j7193@kwd*))) j7214@j7211@kwd j7213@j7210@value j7212@j7209@type)))) (car j7187@e*))))) (set! j2855@expand-transformer (lambda (j7443@expr j7444@r) ((lambda (j7447@rtc) ((lambda (j7449@expanded-rhs) (begin (for-each ((lambda (j7451@mark-visit) (lambda (j7453@x) (begin (j1791@j1446@invoke-library j7453@x) (j7451@mark-visit j7453@x)))) (j2871@vis-collector)) (j7447@rtc)) j7449@expanded-rhs)) ((lambda (j7459@j7455@inv-collector j7460@j7456@vis-collector j7461@j7457@inv-collector j7462@j7458@vis-collector) ((lambda (j7467@swap) (dynamic-wind j7467@swap (lambda () (j2796@chi-expr j7443@expr j7444@r j7444@r)) j7467@swap)) (lambda () (begin ((lambda (j7469@t) (begin (j7459@j7455@inv-collector j7461@j7457@inv-collector) (set! j7461@j7457@inv-collector j7469@t))) (j7459@j7455@inv-collector)) ((lambda (j7471@t) (begin (j7460@j7456@vis-collector j7462@j7458@vis-collector) (set! j7462@j7458@vis-collector j7471@t))) (j7460@j7456@vis-collector)))))) j2869@inv-collector j2871@vis-collector j7447@rtc (lambda (j7473@x) (values))))) (j2867@make-collector)))) (set! j2857@parse-exports (lambda (j7475@exp*) ((letrec ((j7477@f (lambda (j7479@exp* j7480@int* j7481@ext*) (if (null? j7479@exp*) (begin (if (not (j2275@valid-bound-ids? j7481@ext*)) (j2995@syntax-violation 'export '"invalid exports" (j2816@find-dups j7481@ext*)) (void)) (values (map j3001@syntax->datum j7481@ext*) j7480@int*)) ((lambda (j7485@t) ((lambda (j7487@ls/false) (if j7487@ls/false (apply (lambda (j7489@rename j7490@i* j7491@e*) (begin (if (not (and (eq? (j3001@syntax->datum j7489@rename) 'rename) (for-all j2265@id? j7490@i*) (for-all j2265@id? j7491@e*))) (j2995@syntax-violation 'export '"invalid export specifier" (car j7479@exp*)) (void)) (j7477@f (cdr j7479@exp*) (append j7490@i* j7480@int*) (append j7491@e* j7481@ext*)))) j7487@ls/false) ((lambda (j7495@t) ((lambda (j7497@ls/false) (if j7497@ls/false (apply (lambda (j7499@ie) (begin (if (not (j2265@id? j7499@ie)) (j2995@syntax-violation 'export '"invalid export" j7499@ie) (void)) (j7477@f (cdr j7479@exp*) (cons j7499@ie j7480@int*) (cons j7499@ie j7481@ext*)))) j7497@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j7495@t))) (j2762@syntax-dispatch j7495@t 'any))) j7485@t))) (j2762@syntax-dispatch j7485@t '(any . #(each (any any)))))) (car j7479@exp*)))))) j7477@f) j7475@exp* '() '()))) (set! j2859@parse-library-name (lambda (j7501@spec) ((lambda (j7504@parse) (begin (set! j7504@parse (lambda (j7515@x) ((lambda (j7517@t) ((lambda (j7519@ls/false) (if (and j7519@ls/false (apply (lambda (j7521@v*) (for-all (lambda (j7523@x) ((lambda (j7525@x) (and (integer? j7525@x) (exact? j7525@x))) (j3001@syntax->datum j7523@x))) j7521@v*)) j7519@ls/false)) (apply (lambda (j7527@v*) (values '() (map j3001@syntax->datum j7527@v*))) j7519@ls/false) ((lambda (j7529@t) ((lambda (j7531@ls/false) (if (and j7531@ls/false (apply (lambda (j7533@x j7534@rest) (symbol? (j3001@syntax->datum j7533@x))) j7531@ls/false)) (apply (lambda (j7537@x j7538@rest) (call-with-values (lambda () (j7504@parse j7538@rest)) (lambda (j7543@j7541@x* j7544@j7542@v*) ((lambda (j7547@v* j7548@x*) (values (cons (j3001@syntax->datum j7537@x) j7548@x*) j7547@v*)) j7544@j7542@v* j7543@j7541@x*)))) j7531@ls/false) ((lambda (j7551@t) ((lambda (j7553@ls/false) (if j7553@ls/false (apply (lambda () (values '() '())) j7553@ls/false) ((lambda (j7555@t) ((lambda (j7557@ls/false) (if j7557@ls/false (apply (lambda () (j2995@syntax-violation '#f '"invalid library name" j7501@spec)) j7557@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j7555@t))) (j2762@syntax-dispatch j7555@t '_))) j7551@t))) (j2762@syntax-dispatch j7551@t '()))) j7529@t))) (j2762@syntax-dispatch j7529@t '(any . any)))) j7517@t))) (j2762@syntax-dispatch j7517@t '(each-any)))) j7515@x))) (call-with-values (lambda () (j7504@parse j7501@spec)) (lambda (j7507@j7505@name* j7508@j7506@ver*) ((lambda (j7511@ver* j7512@name*) (begin (if (null? j7512@name*) (j2995@syntax-violation '#f '"empty library name" j7501@spec) (void)) (values j7512@name* j7511@ver*))) j7508@j7506@ver* j7507@j7505@name*))))) '#f))) (set! j2861@parse-library (lambda (j7559@e) ((lambda (j7561@t) ((lambda (j7563@ls/false) (if (and j7563@ls/false (apply (lambda (j7565@library j7566@name* j7567@export j7568@exp* j7569@import j7570@imp* j7571@b*) (and (eq? (j3001@syntax->datum j7567@export) 'export) (eq? (j3001@syntax->datum j7569@import) 'import) (eq? (j3001@syntax->datum j7565@library) 'library))) j7563@ls/false)) (apply (lambda (j7579@library j7580@name* j7581@export j7582@exp* j7583@import j7584@imp* j7585@b*) (values j7580@name* j7582@exp* j7584@imp* j7585@b*)) j7563@ls/false) ((lambda (j7593@t) ((lambda (j7595@ls/false) (if j7595@ls/false (apply (lambda () (j2995@syntax-violation '#f '"malformed library" j7559@e)) j7595@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j7593@t))) (j2762@syntax-dispatch j7593@t '_))) j7561@t))) (j2762@syntax-dispatch j7561@t '(any each-any (any . each-any) (any . each-any) . each-any)))) j7559@e))) (set! j2863@parse-import-spec* ((lambda () ((lambda (j7598@idsyn? j7600@dup-error j7602@merge-substs j7604@exclude* j7606@find* j7608@rem* j7610@remove-dups j7612@parse-library-name j7614@import-library j7616@get-import j7618@add-imports!) (begin (set! j7598@idsyn? (lambda (j8109@x) (symbol? (j3001@syntax->datum j8109@x)))) (set! j7600@dup-error (lambda (j8107@name) (j2995@syntax-violation 'import '"two imports with different bindings" j8107@name))) (set! j7602@merge-substs (lambda (j8089@s j8090@subst) ((lambda (j8094@insert-to-subst) (begin (set! j8094@insert-to-subst (lambda (j8095@a j8096@subst) ((lambda (j8099@name j8100@label) ((lambda (j8103@t) (if j8103@t ((lambda (j8105@x) (if (eq? (cdr j8105@x) j8100@label) j8096@subst (j7600@dup-error j8099@name))) j8103@t) (cons j8095@a j8096@subst))) (assq j8099@name j8096@subst))) (car j8095@a) (cdr j8095@a)))) (if (null? j8089@s) j8090@subst (j8094@insert-to-subst (car j8089@s) (j7602@merge-substs (cdr j8089@s) j8090@subst))))) '#f))) (set! j7604@exclude* (lambda (j8047@sym* j8048@subst) ((lambda (j8052@exclude) (begin (set! j8052@exclude (lambda (j8073@sym j8074@subst) (if (null? j8074@subst) (j2995@syntax-violation 'import '"cannot rename unbound identifier" j8073@sym) (if (eq? j8073@sym (caar j8074@subst)) (values (cdar j8074@subst) (cdr j8074@subst)) ((lambda (j8077@a) (call-with-values (lambda () (j8052@exclude j8073@sym (cdr j8074@subst))) (lambda (j8081@j8079@old j8082@j8080@subst) ((lambda (j8085@subst j8086@old) (values j8086@old (cons j8077@a j8085@subst))) j8082@j8080@subst j8081@j8079@old)))) (car j8074@subst)))))) (if (null? j8047@sym*) (values '() j8048@subst) (call-with-values (lambda () (j8052@exclude (car j8047@sym*) j8048@subst)) (lambda (j8055@j8053@old j8056@j8054@subst) ((lambda (j8059@subst j8060@old) (call-with-values (lambda () (j7604@exclude* (cdr j8047@sym*) j8059@subst)) (lambda (j8065@j8063@old* j8066@j8064@subst) ((lambda (j8069@subst j8070@old*) (values (cons j8060@old j8070@old*) j8069@subst)) j8066@j8064@subst j8065@j8063@old*)))) j8056@j8054@subst j8055@j8053@old)))))) '#f))) (set! j7606@find* (lambda (j8039@sym* j8040@subst) (map (lambda (j8043@x) ((lambda (j8045@t) (if j8045@t (cdr j8045@t) (j2995@syntax-violation 'import '"cannot find identifier" j8043@x))) (assq j8043@x j8040@subst))) j8039@sym*))) (set! j7608@rem* (lambda (j8031@sym* j8032@subst) ((letrec ((j8035@f (lambda (j8037@subst) (if (null? j8037@subst) '() (if (memq (caar j8037@subst) j8031@sym*) (j8035@f (cdr j8037@subst)) (cons (car j8037@subst) (j8035@f (cdr j8037@subst)))))))) j8035@f) j8032@subst))) (set! j7610@remove-dups (lambda (j8029@ls) (if (null? j8029@ls) '() (if (memq (car j8029@ls) (cdr j8029@ls)) (j7610@remove-dups (cdr j8029@ls)) (cons (car j8029@ls) (j7610@remove-dups (cdr j8029@ls))))))) (set! j7612@parse-library-name (lambda (j7799@spec) ((lambda (j7802@subversion? j7804@subversion-pred j7806@version-pred) (begin (set! j7802@subversion? (lambda (j8025@x) ((lambda (j8027@x) (and (integer? j8027@x) (exact? j8027@x) (>= j8027@x '0))) (j3001@syntax->datum j8025@x)))) (set! j7804@subversion-pred (lambda (j7929@x*) ((lambda (j7931@t) ((lambda (j7933@ls/false) (if (and j7933@ls/false (apply (lambda (j7935@n) (j7802@subversion? j7935@n)) j7933@ls/false)) (apply (lambda (j7937@n) (lambda (j7939@x) (= j7939@x (j3001@syntax->datum j7937@n)))) j7933@ls/false) ((lambda (j7941@t) ((lambda (j7943@ls/false) (if (and j7943@ls/false (apply (lambda (j7945@p? j7946@sub*) (eq? (j3001@syntax->datum j7945@p?) 'and)) j7943@ls/false)) (apply (lambda (j7949@p? j7950@sub*) ((lambda (j7953@p*) (lambda (j7955@x) (for-all (lambda (j7957@p) (j7957@p j7955@x)) j7953@p*))) (map j7804@subversion-pred j7950@sub*))) j7943@ls/false) ((lambda (j7959@t) ((lambda (j7961@ls/false) (if (and j7961@ls/false (apply (lambda (j7963@p? j7964@sub*) (eq? (j3001@syntax->datum j7963@p?) 'or)) j7961@ls/false)) (apply (lambda (j7967@p? j7968@sub*) ((lambda (j7971@p*) (lambda (j7973@x) (exists (lambda (j7975@p) (j7975@p j7973@x)) j7971@p*))) (map j7804@subversion-pred j7968@sub*))) j7961@ls/false) ((lambda (j7977@t) ((lambda (j7979@ls/false) (if (and j7979@ls/false (apply (lambda (j7981@p? j7982@sub) (eq? (j3001@syntax->datum j7981@p?) 'not)) j7979@ls/false)) (apply (lambda (j7985@p? j7986@sub) ((lambda (j7989@p) (lambda (j7991@x) (not (j7989@p j7991@x)))) (j7804@subversion-pred j7986@sub))) j7979@ls/false) ((lambda (j7993@t) ((lambda (j7995@ls/false) (if (and j7995@ls/false (apply (lambda (j7997@p? j7998@n) (and (eq? (j3001@syntax->datum j7997@p?) '<=) (j7802@subversion? j7998@n))) j7995@ls/false)) (apply (lambda (j8001@p? j8002@n) (lambda (j8005@x) (<= j8005@x (j3001@syntax->datum j8002@n)))) j7995@ls/false) ((lambda (j8007@t) ((lambda (j8009@ls/false) (if (and j8009@ls/false (apply (lambda (j8011@p? j8012@n) (and (eq? (j3001@syntax->datum j8011@p?) '>=) (j7802@subversion? j8012@n))) j8009@ls/false)) (apply (lambda (j8015@p? j8016@n) (lambda (j8019@x) (>= j8019@x (j3001@syntax->datum j8016@n)))) j8009@ls/false) ((lambda (j8021@t) ((lambda (j8023@ls/false) (if j8023@ls/false (apply (lambda () (j2995@syntax-violation 'import '"invalid sub-version spec" j7799@spec j7929@x*)) j8023@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j8021@t))) (j2762@syntax-dispatch j8021@t '_))) j8007@t))) (j2762@syntax-dispatch j8007@t '(any any)))) j7993@t))) (j2762@syntax-dispatch j7993@t '(any any)))) j7977@t))) (j2762@syntax-dispatch j7977@t '(any any)))) j7959@t))) (j2762@syntax-dispatch j7959@t '(any . each-any)))) j7941@t))) (j2762@syntax-dispatch j7941@t '(any . each-any)))) j7931@t))) (j2762@syntax-dispatch j7931@t 'any))) j7929@x*))) (set! j7806@version-pred (lambda (j7849@x*) ((lambda (j7851@t) ((lambda (j7853@ls/false) (if j7853@ls/false (apply (lambda () (lambda (j7855@x) '#t)) j7853@ls/false) ((lambda (j7857@t) ((lambda (j7859@ls/false) (if (and j7859@ls/false (apply (lambda (j7861@c j7862@ver*) (eq? (j3001@syntax->datum j7861@c) 'and)) j7859@ls/false)) (apply (lambda (j7865@c j7866@ver*) ((lambda (j7869@p*) (lambda (j7871@x) (for-all (lambda (j7873@p) (j7873@p j7871@x)) j7869@p*))) (map j7806@version-pred j7866@ver*))) j7859@ls/false) ((lambda (j7875@t) ((lambda (j7877@ls/false) (if (and j7877@ls/false (apply (lambda (j7879@c j7880@ver*) (eq? (j3001@syntax->datum j7879@c) 'or)) j7877@ls/false)) (apply (lambda (j7883@c j7884@ver*) ((lambda (j7887@p*) (lambda (j7889@x) (exists (lambda (j7891@p) (j7891@p j7889@x)) j7887@p*))) (map j7806@version-pred j7884@ver*))) j7877@ls/false) ((lambda (j7893@t) ((lambda (j7895@ls/false) (if (and j7895@ls/false (apply (lambda (j7897@c j7898@ver) (eq? (j3001@syntax->datum j7897@c) 'not)) j7895@ls/false)) (apply (lambda (j7901@c j7902@ver) ((lambda (j7905@p) (lambda (j7907@x) (not (j7905@p j7907@x)))) (j7806@version-pred j7902@ver))) j7895@ls/false) ((lambda (j7909@t) ((lambda (j7911@ls/false) (if j7911@ls/false (apply (lambda (j7913@sub*) ((lambda (j7915@p*) (lambda (j7917@x) ((letrec ((j7919@f (lambda (j7921@p* j7922@x) (if (null? j7921@p*) '#t (if (null? j7922@x) '#f (and ((car j7921@p*) (car j7922@x)) (j7919@f (cdr j7921@p*) (cdr j7922@x)))))))) j7919@f) j7915@p* j7917@x))) (map j7804@subversion-pred j7913@sub*))) j7911@ls/false) ((lambda (j7925@t) ((lambda (j7927@ls/false) (if j7927@ls/false (apply (lambda () (j2995@syntax-violation 'import '"invalid version spec" j7799@spec j7849@x*)) j7927@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j7925@t))) (j2762@syntax-dispatch j7925@t '_))) j7909@t))) (j2762@syntax-dispatch j7909@t 'each-any))) j7893@t))) (j2762@syntax-dispatch j7893@t '(any any)))) j7875@t))) (j2762@syntax-dispatch j7875@t '(any . each-any)))) j7857@t))) (j2762@syntax-dispatch j7857@t '(any . each-any)))) j7851@t))) (j2762@syntax-dispatch j7851@t '()))) j7849@x*))) ((letrec ((j7807@f (lambda (j7809@x) ((lambda (j7811@t) ((lambda (j7813@ls/false) (if j7813@ls/false (apply (lambda (j7815@version-spec*) (values '() (j7806@version-pred j7815@version-spec*))) j7813@ls/false) ((lambda (j7817@t) ((lambda (j7819@ls/false) (if (and j7819@ls/false (apply (lambda (j7821@x j7822@x*) (j7598@idsyn? j7821@x)) j7819@ls/false)) (apply (lambda (j7825@x j7826@x*) (call-with-values (lambda () (j7807@f j7826@x*)) (lambda (j7831@j7829@name j7832@j7830@pred) ((lambda (j7835@pred j7836@name) (values (cons (j3001@syntax->datum j7825@x) j7836@name) j7835@pred)) j7832@j7830@pred j7831@j7829@name)))) j7819@ls/false) ((lambda (j7839@t) ((lambda (j7841@ls/false) (if j7841@ls/false (apply (lambda () (values '() (lambda (j7843@x) '#t))) j7841@ls/false) ((lambda (j7845@t) ((lambda (j7847@ls/false) (if j7847@ls/false (apply (lambda () (j2995@syntax-violation '#f '"invalid import spec" j7799@spec)) j7847@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j7845@t))) (j2762@syntax-dispatch j7845@t '_))) j7839@t))) (j2762@syntax-dispatch j7839@t '()))) j7817@t))) (j2762@syntax-dispatch j7817@t '(any . any)))) j7811@t))) (j2762@syntax-dispatch j7811@t '(each-any)))) j7809@x)))) j7807@f) j7799@spec))) '#f '#f '#f))) (set! j7614@import-library (lambda (j7785@spec*) (call-with-values (lambda () (j7612@parse-library-name j7785@spec*)) (lambda (j7789@j7787@name j7790@j7788@pred) ((lambda (j7793@pred j7794@name) (begin (if (null? j7794@name) (j2995@syntax-violation 'import '"empty library name" j7785@spec*) (void)) ((lambda (j7797@lib) (begin (if (not j7797@lib) (j2995@syntax-violation 'import '"cannot find library with required name" j7794@name) (void)) (if (not (j7793@pred (j1744@j1352@library-version j7797@lib))) (j2995@syntax-violation 'import '"library does not satisfy version specification" j7785@spec* j7797@lib) (void)) ((j2873@imp-collector) j7797@lib) (j1748@j1360@library-subst j7797@lib))) (j1784@j1432@find-library-by-name j7794@name)))) j7790@j7788@pred j7789@j7787@name))))) (set! j7616@get-import (lambda (j7643@spec) ((lambda (j7645@t) ((lambda (j7647@ls/false) (if (and j7647@ls/false (apply (lambda (j7649@x j7650@x*) (not (memq (j3001@syntax->datum j7649@x) '(for rename except only prefix library)))) j7647@ls/false)) (apply (lambda (j7653@x j7654@x*) (j7614@import-library (cons j7653@x j7654@x*))) j7647@ls/false) ((lambda (j7657@t) ((lambda (j7659@ls/false) (if (and j7659@ls/false (apply (lambda (j7661@rename j7662@isp j7663@old* j7664@new*) (and (eq? (j3001@syntax->datum j7661@rename) 'rename) (for-all j7598@idsyn? j7663@old*) (for-all j7598@idsyn? j7664@new*))) j7659@ls/false)) (apply (lambda (j7669@rename j7670@isp j7671@old* j7672@new*) ((lambda (j7677@subst j7678@old* j7679@new*) ((lambda (j7683@old-label*) ((lambda (j7685@subst) (j7602@merge-substs (map cons j7679@new* j7683@old-label*) j7685@subst)) (j7608@rem* j7678@old* j7677@subst))) (j7606@find* j7678@old* j7677@subst))) (j7616@get-import j7670@isp) (map j3001@syntax->datum j7671@old*) (map j3001@syntax->datum j7672@new*))) j7659@ls/false) ((lambda (j7687@t) ((lambda (j7689@ls/false) (if (and j7689@ls/false (apply (lambda (j7691@except j7692@isp j7693@sym*) (and (eq? (j3001@syntax->datum j7691@except) 'except) (for-all j7598@idsyn? j7693@sym*))) j7689@ls/false)) (apply (lambda (j7697@except j7698@isp j7699@sym*) ((lambda (j7703@subst) (j7608@rem* (map j3001@syntax->datum j7699@sym*) j7703@subst)) (j7616@get-import j7698@isp))) j7689@ls/false) ((lambda (j7705@t) ((lambda (j7707@ls/false) (if (and j7707@ls/false (apply (lambda (j7709@only j7710@isp j7711@sym*) (and (eq? (j3001@syntax->datum j7709@only) 'only) (for-all j7598@idsyn? j7711@sym*))) j7707@ls/false)) (apply (lambda (j7715@only j7716@isp j7717@sym*) ((lambda (j7721@subst j7722@sym*) ((lambda (j7725@sym*) ((lambda (j7727@lab*) (map cons j7725@sym* j7727@lab*)) (j7606@find* j7725@sym* j7721@subst))) (j7610@remove-dups j7722@sym*))) (j7616@get-import j7716@isp) (map j3001@syntax->datum j7717@sym*))) j7707@ls/false) ((lambda (j7729@t) ((lambda (j7731@ls/false) (if (and j7731@ls/false (apply (lambda (j7733@prefix j7734@isp j7735@p) (and (eq? (j3001@syntax->datum j7733@prefix) 'prefix) (j7598@idsyn? j7735@p))) j7731@ls/false)) (apply (lambda (j7739@prefix j7740@isp j7741@p) ((lambda (j7745@subst j7746@prefix) (map (lambda (j7749@x) (cons (string->symbol (string-append j7746@prefix (symbol->string (car j7749@x)))) (cdr j7749@x))) j7745@subst)) (j7616@get-import j7740@isp) (symbol->string (j3001@syntax->datum j7741@p)))) j7731@ls/false) ((lambda (j7751@t) ((lambda (j7753@ls/false) (if (and j7753@ls/false (apply (lambda (j7755@library j7756@spec*) (eq? (j3001@syntax->datum j7755@library) 'library)) j7753@ls/false)) (apply (lambda (j7759@library j7760@spec*) (j7614@import-library j7760@spec*)) j7753@ls/false) ((lambda (j7763@t) ((lambda (j7765@ls/false) (if (and j7765@ls/false (apply (lambda (j7767@for j7768@isp j7769@rest) (eq? (j3001@syntax->datum j7767@for) 'for)) j7765@ls/false)) (apply (lambda (j7773@for j7774@isp j7775@rest) (j7616@get-import j7774@isp)) j7765@ls/false) ((lambda (j7779@t) ((lambda (j7781@ls/false) (if j7781@ls/false (apply (lambda (j7783@spec) (j2995@syntax-violation 'import '"invalid import spec" j7783@spec)) j7781@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j7779@t))) (j2762@syntax-dispatch j7779@t 'any))) j7763@t))) (j2762@syntax-dispatch j7763@t '(any any . any)))) j7751@t))) (j2762@syntax-dispatch j7751@t '(any each-any)))) j7729@t))) (j2762@syntax-dispatch j7729@t '(any any any)))) j7705@t))) (j2762@syntax-dispatch j7705@t '(any any . each-any)))) j7687@t))) (j2762@syntax-dispatch j7687@t '(any any . each-any)))) j7657@t))) (j2762@syntax-dispatch j7657@t '(any any . #(each (any any)))))) j7645@t))) (j2762@syntax-dispatch j7645@t '(any . each-any)))) j7643@spec))) (set! j7618@add-imports! (lambda (j7627@imp j7628@h) ((lambda (j7631@subst) (for-each (lambda (j7633@x) ((lambda (j7635@name j7636@label) ((lambda (j7639@t) (if j7639@t ((lambda (j7641@l) (if (not (eq? j7641@l j7636@label)) (j7600@dup-error j7635@name) (void))) j7639@t) (hashtable-set! j7628@h j7635@name j7636@label))) (hashtable-ref j7628@h j7635@name '#f))) (car j7633@x) (cdr j7633@x))) j7631@subst)) (j7616@get-import j7627@imp)))) (lambda (j7619@imp*) ((letrec ((j7621@f (lambda (j7623@imp* j7624@h) (if (null? j7623@imp*) (hashtable-entries j7624@h) (begin (j7618@add-imports! (car j7623@imp*) j7624@h) (j7621@f (cdr j7623@imp*) j7624@h)))))) j7621@f) j7619@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! j2865@make-top-rib (lambda (j8111@names j8112@labels) ((lambda (j8115@rib) (begin (vector-for-each (lambda (j8117@name j8118@label) (begin (if (not (symbol? j8117@name)) (error 'make-top-rib '"BUG: not a symbol" j8117@name) (void)) (j2188@extend-rib/nc! j8115@rib (j2211@make-stx j8117@name j2133@top-mark* '() '()) j8118@label))) j8111@names j8112@labels) j8115@rib)) (j2184@make-empty-rib)))) (set! j2867@make-collector (lambda () ((lambda (j8121@ls) (lambda j8125 ((lambda (j8126) (if (= j8126 '0) (apply (lambda () j8121@ls) j8125) (if (= j8126 '1) (apply (lambda (j8123@x) (set! j8121@ls (j2126@set-cons j8123@x j8121@ls))) j8125) (error 'apply '"invalid arg count")))) (length j8125)))) '()))) (set! j2869@inv-collector (j1163@j941@make-parameter (lambda j8127@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (j8129@x) (begin (if (not (procedure? j8129@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" j8129@x) (void)) j8129@x)))) (set! j2871@vis-collector (j1163@j941@make-parameter (lambda j8131@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (j8133@x) (begin (if (not (procedure? j8133@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" j8133@x) (void)) j8133@x)))) (set! j2873@imp-collector (j1163@j941@make-parameter (lambda j8135@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (j8137@x) (begin (if (not (procedure? j8137@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" j8137@x) (void)) j8137@x)))) (set! j2875@chi-library-internal (lambda (j8139@e* j8140@rib j8141@top?) (call-with-values (lambda () (j2853@chi-body* j8139@e* '() '() '() '() '() '() '() j8140@rib j8141@top?)) (lambda (j8153@j8145@e* j8154@j8146@r j8155@j8147@mr j8156@j8148@lex* j8157@j8149@rhs* j8158@j8150@mod** j8159@j8151@_kwd* j8160@j8152@exp*) ((lambda (j8169@exp* j8170@_kwd* j8171@mod** j8172@rhs* j8173@lex* j8174@mr j8175@r j8176@e*) (values (append (apply append (reverse j8171@mod**)) j8176@e*) j8175@r j8174@mr (reverse j8173@lex*) (reverse j8172@rhs*) j8169@exp*)) j8160@j8152@exp* j8159@j8151@_kwd* j8158@j8150@mod** j8157@j8149@rhs* j8156@j8148@lex* j8155@j8147@mr j8154@j8146@r j8153@j8145@e*))))) (set! j2877@chi-interaction-expr (lambda (j8185@e j8186@rib j8187@r) (call-with-values (lambda () (j2853@chi-body* (list j8185@e) j8187@r j8187@r '() '() '() '() '() j8186@rib '#t)) (lambda (j8199@j8191@e* j8200@j8192@r j8201@j8193@mr j8202@j8194@lex* j8203@j8195@rhs* j8204@j8196@mod** j8205@j8197@_kwd* j8206@j8198@_exp*) ((lambda (j8215@_exp* j8216@_kwd* j8217@mod** j8218@rhs* j8219@lex* j8220@mr j8221@r j8222@e*) ((lambda (j8231@e*) ((lambda (j8233@e) (values j8233@e j8221@r)) (if (null? j8231@e*) (j2105@j1963@build-void) (if (null? (cdr j8231@e*)) (car j8231@e*) (j2104@j1961@build-sequence '#f j8231@e*))))) (j2810@expand-interaction-rhs*/init* (reverse j8219@lex*) (reverse j8218@rhs*) (append (apply append (reverse j8217@mod**)) j8222@e*) j8221@r j8220@mr))) j8206@j8198@_exp* j8205@j8197@_kwd* j8204@j8196@mod** j8203@j8195@rhs* j8202@j8194@lex* j8201@j8193@mr j8200@j8192@r j8199@j8191@e*))))) (set! j2879@library-body-expander (lambda (j8235@name j8236@main-exp* j8237@imp* j8238@b* j8239@top?) ((lambda (j8246@itc) (begin (set! j8246@itc (j2867@make-collector)) ((lambda (j8251@j8247@imp-collector j8252@j8248@top-level-context j8253@j8249@imp-collector j8254@j8250@top-level-context) ((lambda (j8259@swap) (dynamic-wind j8259@swap (lambda () (call-with-values (lambda () (j2863@parse-import-spec* j8237@imp*)) (lambda (j8263@j8261@subst-names j8264@j8262@subst-labels) ((lambda (j8267@subst-labels j8268@subst-names) ((lambda (j8271@rib) ((lambda (j8274@wrap) (begin (set! j8274@wrap (lambda (j8382@x) (j2211@make-stx j8382@x j2133@top-mark* (list j8271@rib) '()))) ((lambda (j8275@b* j8276@main-exp* j8277@rtc j8278@vtc) ((lambda (j8287@j8283@inv-collector j8288@j8284@vis-collector j8289@j8285@inv-collector j8290@j8286@vis-collector) ((lambda (j8295@swap) (dynamic-wind j8295@swap (lambda () (call-with-values (lambda () (j2875@chi-library-internal j8275@b* j8271@rib j8239@top?)) (lambda (j8303@j8297@init* j8304@j8298@r j8305@j8299@mr j8306@j8300@lex* j8307@j8301@rhs* j8308@j8302@internal-exp*) ((lambda (j8315@internal-exp* j8316@rhs* j8317@lex* j8318@mr j8319@r j8320@init*) (call-with-values (lambda () (j2857@parse-exports (append j8276@main-exp* j8315@internal-exp*))) (lambda (j8329@j8327@exp-name* j8330@j8328@exp-id*) ((lambda (j8333@exp-id* j8334@exp-name*) (begin (j2192@seal-rib! j8271@rib) ((lambda (j8337@init*) ((lambda (j8339@rhs*) ((lambda () (begin (j2194@unseal-rib! j8271@rib) ((lambda (j8341@loc* j8342@export-subst) ((lambda (j8346@errstr) (begin (set! j8346@errstr '"attempt to export mutated variable") (call-with-values (lambda () (j2975@make-export-env/macros j8317@lex* j8341@loc* j8319@r)) (lambda (j8350@j8347@export-env j8351@j8348@global* j8352@j8349@macro*) ((lambda (j8356@macro* j8357@global* j8358@export-env) (begin (for-each (lambda (j8362@s) ((lambda (j8364@name j8365@label) ((lambda (j8368@p) (if j8368@p ((lambda (j8370@b) ((lambda (j8372@type) (if (eq? j8372@type 'mutable) (j2995@syntax-violation 'export j8346@errstr j8364@name) (void))) (car j8370@b))) (cdr j8368@p)) (void))) (assq j8365@label j8358@export-env))) (car j8362@s) (cdr j8362@s))) j8342@export-subst) ((lambda (j8374@invoke-body j8375@invoke-definitions) (values (j8246@itc) (j8277@rtc) (j8278@vtc) (j2104@j1961@build-sequence '#f (append j8375@invoke-definitions (list j8374@invoke-body))) j8356@macro* j8342@export-subst j8358@export-env)) (j2107@j1967@build-letrec* '#f j8317@lex* j8339@rhs* (j2971@build-exports j8357@global* j8337@init*)) (map j2100@j1798@build-global-define (map cdr j8357@global*))))) j8352@j8349@macro* j8351@j8348@global* j8350@j8347@export-env))))) '#f)) (map j2139@gen-global j8317@lex*) (j2973@make-export-subst j8334@exp-name* j8333@exp-id*)))))) (j2812@chi-rhs* j8316@rhs* j8319@r j8318@mr))) (j2792@chi-expr* j8320@init* j8319@r j8318@mr)))) j8330@j8328@exp-id* j8329@j8327@exp-name*)))) j8308@j8302@internal-exp* j8307@j8301@rhs* j8306@j8300@lex* j8305@j8299@mr j8304@j8298@r j8303@j8297@init*)))) j8295@swap)) (lambda () (begin ((lambda (j8378@t) (begin (j8287@j8283@inv-collector j8289@j8285@inv-collector) (set! j8289@j8285@inv-collector j8378@t))) (j8287@j8283@inv-collector)) ((lambda (j8380@t) (begin (j8288@j8284@vis-collector j8290@j8286@vis-collector) (set! j8290@j8286@vis-collector j8380@t))) (j8288@j8284@vis-collector)))))) j2869@inv-collector j2871@vis-collector j8277@rtc j8278@vtc)) (map j8274@wrap j8238@b*) (map j8274@wrap j8236@main-exp*) (j2867@make-collector) (j2867@make-collector)))) '#f)) (j2865@make-top-rib j8268@subst-names j8267@subst-labels))) j8264@j8262@subst-labels j8263@j8261@subst-names)))) j8259@swap)) (lambda () (begin ((lambda (j8384@t) (begin (j8251@j8247@imp-collector j8253@j8249@imp-collector) (set! j8253@j8249@imp-collector j8384@t))) (j8251@j8247@imp-collector)) ((lambda (j8386@t) (begin (j8252@j8248@top-level-context j8254@j8250@top-level-context) (set! j8254@j8250@top-level-context j8386@t))) (j8252@j8248@top-level-context)))))) j2873@imp-collector j3009@top-level-context j8246@itc '#f))) '#f))) (set! j2881@core-library-expander (lambda (j8388@e j8389@verify-name) (call-with-values (lambda () (j2861@parse-library j8388@e)) (lambda (j8396@j8392@name* j8397@j8393@exp* j8398@j8394@imp* j8399@j8395@b*) ((lambda (j8404@b* j8405@imp* j8406@exp* j8407@name*) (call-with-values (lambda () (j2859@parse-library-name j8407@name*)) (lambda (j8414@j8412@name j8415@j8413@ver) ((lambda (j8418@ver j8419@name) (begin (j8389@verify-name j8419@name) (call-with-values (lambda () (j2879@library-body-expander j8419@name j8406@exp* j8405@imp* j8404@b* '#f)) (lambda (j8429@j8422@imp* j8430@j8423@invoke-req* j8431@j8424@visit-req* j8432@j8425@invoke-code j8433@j8426@visit-code j8434@j8427@export-subst j8435@j8428@export-env) ((lambda (j8443@export-env j8444@export-subst j8445@visit-code j8446@invoke-code j8447@visit-req* j8448@invoke-req* j8449@imp*) (values j8419@name j8418@ver j8449@imp* j8448@invoke-req* j8447@visit-req* j8446@invoke-code j8445@visit-code j8444@export-subst j8443@export-env)) j8435@j8428@export-env j8434@j8427@export-subst j8433@j8426@visit-code j8432@j8425@invoke-code j8431@j8424@visit-req* j8430@j8423@invoke-req* j8429@j8422@imp*))))) j8415@j8413@ver j8414@j8412@name)))) j8399@j8395@b* j8398@j8394@imp* j8397@j8393@exp* j8396@j8392@name*))))) (set! j2883@parse-top-level-program (lambda (j8457@e*) ((lambda (j8459@t) ((lambda (j8461@ls/false) (if (and j8461@ls/false (apply (lambda (j8463@import j8464@imp* j8465@b*) (eq? (j3001@syntax->datum j8463@import) 'import)) j8461@ls/false)) (apply (lambda (j8469@import j8470@imp* j8471@b*) (values j8470@imp* j8471@b*)) j8461@ls/false) ((lambda (j8475@t) ((lambda (j8477@ls/false) (if (and j8477@ls/false (apply (lambda (j8479@import j8480@x j8481@y) (eq? (j3001@syntax->datum j8479@import) 'import)) j8477@ls/false)) (apply (lambda (j8485@import j8486@x j8487@y) (j2995@syntax-violation 'expander '"invalid syntax of top-level program" (j2259@syntax-car j8457@e*))) j8477@ls/false) ((lambda (j8491@t) ((lambda (j8493@ls/false) (if j8493@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) j8493@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j8491@t))) (j2762@syntax-dispatch j8491@t '_))) j8475@t))) (j2762@syntax-dispatch j8475@t '((any . any) . any)))) j8459@t))) (j2762@syntax-dispatch j8459@t '((any . each-any) . each-any)))) j8457@e*))) (set! j2885@top-level-expander (lambda (j8495@e*) (call-with-values (lambda () (j2883@parse-top-level-program j8495@e*)) (lambda (j8499@j8497@imp* j8500@j8498@b*) ((lambda (j8503@b* j8504@imp*) (call-with-values (lambda () (j2879@library-body-expander '() '() j8504@imp* j8503@b* '#t)) (lambda (j8514@j8507@imp* j8515@j8508@invoke-req* j8516@j8509@visit-req* j8517@j8510@invoke-code j8518@j8511@visit-code j8519@j8512@export-subst j8520@j8513@export-env) ((lambda (j8528@export-env j8529@export-subst j8530@visit-code j8531@invoke-code j8532@visit-req* j8533@invoke-req* j8534@imp*) (values j8533@invoke-req* j8531@invoke-code)) j8520@j8513@export-env j8519@j8512@export-subst j8518@j8511@visit-code j8517@j8510@invoke-code j8516@j8509@visit-req* j8515@j8508@invoke-req* j8514@j8507@imp*)))) j8500@j8498@b* j8499@j8497@imp*))))) (set! j2891@j2886 (make-record-type-descriptor 'env '#f 'j2889 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! j2893@j2888 '#f) (set! j2895@j2887 (make-record-constructor-descriptor j2891@j2886 '#f j2893@j2888)) (set! j2898@env? (record-predicate j2891@j2886)) (set! j2900@make-env (record-constructor j2895@j2887)) (set! j2902@env-names (record-accessor j2891@j2886 '0)) (set! j2904@env-labels (record-accessor j2891@j2886 '1)) (set! j2906@env-itc (record-accessor j2891@j2886 '2)) (set! j2908@set-env-names! (record-mutator j2891@j2886 '0)) (set! j2910@set-env-labels! (record-mutator j2891@j2886 '1)) (set! j2912@set-env-itc! (record-mutator j2891@j2886 '2)) (set! j2914@rp (j1160@j935@make-record-printer 'env (lambda (j8542@x j8543@p j8544@wr) (display '"#<environment>" j8543@p)))) (set! j2920@j2915 (make-record-type-descriptor 'interaction-env '#f 'j2918 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! j2922@j2917 '#f) (set! j2924@j2916 (make-record-constructor-descriptor j2920@j2915 '#f j2922@j2917)) (set! j2927@interaction-env? (record-predicate j2920@j2915)) (set! j2929@make-interaction-env (record-constructor j2924@j2916)) (set! j2931@interaction-env-rib (record-accessor j2920@j2915 '0)) (set! j2933@interaction-env-r (record-accessor j2920@j2915 '1)) (set! j2935@interaction-env-locs (record-accessor j2920@j2915 '2)) (set! j2937@set-interaction-env-rib! (record-mutator j2920@j2915 '0)) (set! j2939@set-interaction-env-r! (record-mutator j2920@j2915 '1)) (set! j2941@set-interaction-env-locs! (record-mutator j2920@j2915 '2)) (set! j2943@rp (j1160@j935@make-record-printer 'interaction-env (lambda (j8548@x j8549@p j8550@wr) (display '"#<environment>" j8549@p)))) (set! j2945@interaction-environment-symbols (lambda () (j2953@environment-symbols (j3007@interaction-environment)))) (set! j2947@environment-bindings (lambda (j8554@e) (vector->list (vector-map (lambda (j8556@name j8557@label) (j2949@parse-binding (cons j8556@name (j1790@j1444@imported-label->binding j8557@label)))) (j2902@env-names j8554@e) (j2904@env-labels j8554@e))))) (set! j2949@parse-binding (lambda (j8560@b) (cons (car j8560@b) ((lambda (j8562@t) (if (memv j8562@t '(core-prim global)) 'procedure (if (memv j8562@t '(core-macro macro global-macro)) 'syntax (if (memv j8562@t '($core-rtd)) 'record (if (eq? (car j8560@b) (cadr j8560@b)) 'syntax 'unknown))))) (cadr j8560@b))))) (set! j2951@environment? (lambda (j8564@x) (or (j2898@env? j8564@x) (j2927@interaction-env? j8564@x)))) (set! j2953@environment-symbols (lambda (j8566@x) (if (j2898@env? j8566@x) (vector->list (j2902@env-names j8566@x)) (if (j2927@interaction-env? j8566@x) (map values (j2164@rib-sym* (j2931@interaction-env-rib j8566@x))) (assertion-violation 'environment-symbols '"not an environment" j8566@x))))) (set! j2955@environment (lambda j8568@imp* ((lambda (j8570@itc) ((lambda (j8574@j8572@imp-collector j8575@j8573@imp-collector) ((lambda (j8578@swap) (dynamic-wind j8578@swap (lambda () (call-with-values (lambda () (j2863@parse-import-spec* j8568@imp*)) (lambda (j8582@j8580@subst-names j8583@j8581@subst-labels) ((lambda (j8586@subst-labels j8587@subst-names) (j2900@make-env j8587@subst-names j8586@subst-labels j8570@itc)) j8583@j8581@subst-labels j8582@j8580@subst-names)))) j8578@swap)) (lambda () ((lambda (j8590@t) (begin (j8574@j8572@imp-collector j8575@j8573@imp-collector) (set! j8575@j8573@imp-collector j8590@t))) (j8574@j8572@imp-collector))))) j2873@imp-collector j8570@itc)) (j2867@make-collector)))) (set! j2957@null-environment (lambda (j8592@n) (begin (if (not (eqv? j8592@n '5)) (assertion-violation 'null-environment '"not 5" j8592@n) (void)) (j2955@environment '(psyntax null-environment-5))))) (set! j2959@scheme-report-environment (lambda (j8594@n) (begin (if (not (eqv? j8594@n '5)) (assertion-violation 'scheme-report-environment '"not 5" j8594@n) (void)) (j2955@environment '(psyntax scheme-report-environment-5))))) (set! j2961@expand (lambda (j8596@x j8597@env) (if (j2898@env? j8597@env) ((lambda (j8600@rib) ((lambda (j8602@x j8603@itc j8604@rtc j8605@vtc) ((lambda (j8610@x) (begin (j2192@seal-rib! j8600@rib) (values j8610@x (j8604@rtc)))) ((lambda (j8620@j8612@top-level-context j8621@j8613@inv-collector j8622@j8614@vis-collector j8623@j8615@imp-collector j8624@j8616@top-level-context j8625@j8617@inv-collector j8626@j8618@vis-collector j8627@j8619@imp-collector) ((lambda (j8636@swap) (dynamic-wind j8636@swap (lambda () (j2796@chi-expr j8602@x '() '())) j8636@swap)) (lambda () (begin ((lambda (j8638@t) (begin (j8620@j8612@top-level-context j8624@j8616@top-level-context) (set! j8624@j8616@top-level-context j8638@t))) (j8620@j8612@top-level-context)) ((lambda (j8640@t) (begin (j8621@j8613@inv-collector j8625@j8617@inv-collector) (set! j8625@j8617@inv-collector j8640@t))) (j8621@j8613@inv-collector)) ((lambda (j8642@t) (begin (j8622@j8614@vis-collector j8626@j8618@vis-collector) (set! j8626@j8618@vis-collector j8642@t))) (j8622@j8614@vis-collector)) ((lambda (j8644@t) (begin (j8623@j8615@imp-collector j8627@j8619@imp-collector) (set! j8627@j8619@imp-collector j8644@t))) (j8623@j8615@imp-collector)))))) j3009@top-level-context j2869@inv-collector j2871@vis-collector j2873@imp-collector '#f j8604@rtc j8605@vtc j8603@itc))) (j2211@make-stx j8596@x j2133@top-mark* (list j8600@rib) '()) (j2906@env-itc j8597@env) (j2867@make-collector) (j2867@make-collector))) (j2865@make-top-rib (j2902@env-names j8597@env) (j2904@env-labels j8597@env))) (if (j2927@interaction-env? j8597@env) ((lambda (j8646@rib j8647@r j8648@rtc) ((lambda (j8652@x) (call-with-values (lambda () ((lambda (j8664@j8656@top-level-context j8665@j8657@inv-collector j8666@j8658@vis-collector j8667@j8659@imp-collector j8668@j8660@top-level-context j8669@j8661@inv-collector j8670@j8662@vis-collector j8671@j8663@imp-collector) ((lambda (j8680@swap) (dynamic-wind j8680@swap (lambda () (j2877@chi-interaction-expr j8652@x j8646@rib j8647@r)) j8680@swap)) (lambda () (begin ((lambda (j8682@t) (begin (j8664@j8656@top-level-context j8668@j8660@top-level-context) (set! j8668@j8660@top-level-context j8682@t))) (j8664@j8656@top-level-context)) ((lambda (j8684@t) (begin (j8665@j8657@inv-collector j8669@j8661@inv-collector) (set! j8669@j8661@inv-collector j8684@t))) (j8665@j8657@inv-collector)) ((lambda (j8686@t) (begin (j8666@j8658@vis-collector j8670@j8662@vis-collector) (set! j8670@j8662@vis-collector j8686@t))) (j8666@j8658@vis-collector)) ((lambda (j8688@t) (begin (j8667@j8659@imp-collector j8671@j8663@imp-collector) (set! j8671@j8663@imp-collector j8688@t))) (j8667@j8659@imp-collector)))))) j3009@top-level-context j2869@inv-collector j2871@vis-collector j2873@imp-collector j8597@env j8648@rtc (j2867@make-collector) (j2867@make-collector))) (lambda (j8690@j8654@e j8691@j8655@r^) ((lambda (j8694@r^ j8695@e) (begin (j2939@set-interaction-env-r! j8597@env j8694@r^) (values j8695@e (j8648@rtc)))) j8691@j8655@r^ j8690@j8654@e)))) (j2211@make-stx j8596@x j2133@top-mark* (list j8646@rib) '()))) (j2931@interaction-env-rib j8597@env) (j2933@interaction-env-r j8597@env) (j2867@make-collector)) (assertion-violation 'expand '"not an environment" j8597@env))))) (set! j2963@eval (lambda (j8698@x j8699@env) (begin (if (not (j2951@environment? j8699@env)) (error 'eval '"not an environment" j8699@env) (void)) (call-with-values (lambda () (j2961@expand j8698@x j8699@env)) (lambda (j8704@j8702@x j8705@j8703@invoke-req*) ((lambda (j8708@invoke-req* j8709@x) (begin (for-each j1791@j1446@invoke-library j8708@invoke-req*) (eval-core (j1247@j1175@expanded->core j8709@x)))) j8705@j8703@invoke-req* j8704@j8702@x)))))) (set! j2965@library-expander (lambda j8813 ((lambda (j8814) (if (= j8814 '3) (apply (lambda (j8712@x j8713@filename j8714@verify-name) ((lambda (j8719@build-visit-code j8721@visit!) (begin (set! j8719@build-visit-code (lambda (j8795@macro*) (if (null? j8795@macro*) (j2105@j1963@build-void) (j2104@j1961@build-sequence '#f (map (lambda (j8797@x) ((lambda (j8799@loc j8800@src) (list 'set! j8799@loc j8800@src)) (car j8797@x) (cddr j8797@x))) j8795@macro*))))) (set! j8721@visit! (lambda (j8787@macro*) (for-each (lambda (j8789@x) ((lambda (j8791@loc j8792@proc) (set-symbol-value! j8791@loc j8792@proc)) (car j8789@x) (cadr j8789@x))) j8787@macro*))) (call-with-values (lambda () (j2881@core-library-expander j8712@x j8714@verify-name)) (lambda (j8731@j8722@name j8732@j8723@ver j8733@j8724@imp* j8734@j8725@inv* j8735@j8726@vis* j8736@j8727@invoke-code j8737@j8728@macro* j8738@j8729@export-subst j8739@j8730@export-env) ((lambda (j8749@export-env j8750@export-subst j8751@macro* j8752@invoke-code j8753@vis* j8754@inv* j8755@imp* j8756@ver j8757@name) ((lambda (j8767@id j8768@name j8769@ver j8770@imp* j8771@vis* j8772@inv* j8773@visit-proc j8774@invoke-proc j8775@visit-code j8776@invoke-code) (begin (j1789@j1442@install-library j8767@id j8768@name j8769@ver j8770@imp* j8771@vis* j8772@inv* j8750@export-subst j8749@export-env j8773@visit-proc j8774@invoke-proc j8775@visit-code j8776@invoke-code '#t j8713@filename) (values j8767@id j8768@name j8769@ver j8770@imp* j8771@vis* j8772@inv* j8776@invoke-code j8775@visit-code j8750@export-subst j8749@export-env))) (j1149@j913@gensym) j8757@name j8756@ver (map j1795@j1454@library-spec j8755@imp*) (map j1795@j1454@library-spec j8753@vis*) (map j1795@j1454@library-spec j8754@inv*) (lambda () (j8721@visit! j8751@macro*)) (lambda () (eval-core (j1247@j1175@expanded->core j8752@invoke-code))) (j8719@build-visit-code j8751@macro*) j8752@invoke-code)) j8739@j8730@export-env j8738@j8729@export-subst j8737@j8728@macro* j8736@j8727@invoke-code j8735@j8726@vis* j8734@j8725@inv* j8733@j8724@imp* j8732@j8723@ver j8731@j8722@name))))) '#f '#f)) j8813) (if (= j8814 '2) (apply (lambda (j8803@x j8804@filename) (j2965@library-expander j8803@x j8804@filename (lambda (j8807@x) (values)))) j8813) (if (= j8814 '1) (apply (lambda (j8809@x) (j2965@library-expander j8809@x '#f (lambda (j8811@x) (values)))) j8813) (error 'apply '"invalid arg count"))))) (length j8813)))) (set! j2967@boot-library-expand (lambda (j8815@x) (call-with-values (lambda () (j2965@library-expander j8815@x)) (lambda (j8827@j8817@id j8828@j8818@name j8829@j8819@ver j8830@j8820@imp* j8831@j8821@vis* j8832@j8822@inv* j8833@j8823@invoke-code j8834@j8824@visit-code j8835@j8825@export-subst j8836@j8826@export-env) ((lambda (j8847@export-env j8848@export-subst j8849@visit-code j8850@invoke-code j8851@inv* j8852@vis* j8853@imp* j8854@ver j8855@name j8856@id) (values j8855@name j8850@invoke-code j8848@export-subst j8847@export-env)) j8836@j8826@export-env j8835@j8825@export-subst j8834@j8824@visit-code j8833@j8823@invoke-code j8832@j8822@inv* j8831@j8821@vis* j8830@j8820@imp* j8829@j8819@ver j8828@j8818@name j8827@j8817@id))))) (set! j2969@rev-map-append (lambda (j8867@f j8868@ls j8869@ac) (if (null? j8868@ls) j8869@ac (j2969@rev-map-append j8867@f (cdr j8868@ls) (cons (j8867@f (car j8868@ls)) j8869@ac))))) (set! j2971@build-exports (lambda (j8873@lex*+loc* j8874@init*) (j2104@j1961@build-sequence '#f (cons (j2105@j1963@build-void) (j2969@rev-map-append (lambda (j8877@x) (list 'set! (cdr j8877@x) (car j8877@x))) j8873@lex*+loc* j8874@init*))))) (set! j2973@make-export-subst (lambda (j8879@name* j8880@id*) (map (lambda (j8883@name j8884@id) ((lambda (j8887@label) (begin (if (not j8887@label) (j2995@syntax-violation '#f '"cannot export unbound identifier" j8884@id) (void)) (cons j8883@name j8887@label))) (j2291@id->label j8884@id))) j8879@name* j8880@id*))) (set! j2975@make-export-env/macros (lambda (j8889@lex* j8890@loc* j8891@r) ((lambda (j8896@lookup) (begin (set! j8896@lookup (lambda (j8925@x) ((letrec ((j8927@f (lambda (j8929@x j8930@lex* j8931@loc*) (if (pair? j8930@lex*) (if (eq? j8929@x (car j8930@lex*)) (car j8931@loc*) (j8927@f j8929@x (cdr j8930@lex*) (cdr j8931@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) j8927@f) j8925@x j8889@lex* j8890@loc*))) ((letrec ((j8897@f (lambda (j8899@r j8900@env j8901@global* j8902@macro*) (if (null? j8899@r) (values j8900@env j8901@global* j8902@macro*) ((lambda (j8907@x) ((lambda (j8909@label j8910@b) ((lambda (j8913@t) (if (memv j8913@t '(lexical)) ((lambda (j8915@v) ((lambda (j8917@loc j8918@type) (j8897@f (cdr j8899@r) (cons (cons* j8909@label j8918@type j8917@loc) j8900@env) (cons (cons (j2646@lexical-var j8915@v) j8917@loc) j8901@global*) j8902@macro*)) (j8896@lookup (j2646@lexical-var j8915@v)) (if (j2648@lexical-mutable? j8915@v) 'mutable 'global))) (j2301@binding-value j8910@b)) (if (memv j8913@t '(local-macro)) ((lambda (j8921@loc) (j8897@f (cdr j8899@r) (cons (cons* j8909@label 'global-macro j8921@loc) j8900@env) j8901@global* (cons (cons j8921@loc (j2301@binding-value j8910@b)) j8902@macro*))) (j1149@j913@gensym)) (if (memv j8913@t '(local-macro!)) ((lambda (j8923@loc) (j8897@f (cdr j8899@r) (cons (cons* j8909@label 'global-macro! j8923@loc) j8900@env) j8901@global* (cons (cons j8923@loc (j2301@binding-value j8910@b)) j8902@macro*))) (j1149@j913@gensym)) (if (memv j8913@t '($rtd $module)) (j8897@f (cdr j8899@r) (cons j8907@x j8900@env) j8901@global* j8902@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (j2299@binding-type j8910@b) (j2301@binding-value j8910@b))))))) (j2299@binding-type j8910@b))) (car j8907@x) (cdr j8907@x))) (car j8899@r)))))) j8897@f) j8891@r '() '() '()))) '#f))) (set! j2977@generate-temporaries (lambda (j8935@ls) ((lambda (j8937@t) ((lambda (j8939@ls/false) (if j8939@ls/false (apply (lambda (j8941@ls) (map (lambda (j8943@x) (j2211@make-stx ((lambda (j8945@x) (if (or (symbol? j8945@x) (string? j8945@x)) (j1149@j913@gensym j8945@x) (j1149@j913@gensym 't))) (j3001@syntax->datum j8943@x)) j2133@top-mark* '() '())) j8941@ls)) j8939@ls/false) ((lambda (j8947@t) ((lambda (j8949@ls/false) (if j8949@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) j8949@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j8947@t))) (j2762@syntax-dispatch j8947@t '_))) j8937@t))) (j2762@syntax-dispatch j8937@t 'each-any))) j8935@ls))) (set! j2979@free-identifier=? (lambda (j8951@x j8952@y) (if (j2265@id? j8951@x) (if (j2265@id? j8952@y) (j2273@free-id=? j8951@x j8952@y) (assertion-violation 'free-identifier=? '"not an identifier" j8952@y)) (assertion-violation 'free-identifier=? '"not an identifier" j8951@x)))) (set! j2981@bound-identifier=? (lambda (j8955@x j8956@y) (if (j2265@id? j8955@x) (if (j2265@id? j8956@y) (j2271@bound-id=? j8955@x j8956@y) (assertion-violation 'bound-identifier=? '"not an identifier" j8956@y)) (assertion-violation 'bound-identifier=? '"not an identifier" j8955@x)))) (set! j2983@make-source-condition (lambda (j8959@x) ((lambda (j8969@j8964 j8971@j8966 j8973@j8965 j8976@j8963 j8978@make-source-condition j8980@j8961 j8982@j8962 j8984@source-condition? j8986@source-filename j8988@source-character) (begin (set! j8969@j8964 (make-record-type-descriptor '&source-information j10071@j9386@&condition-rtd 'j8967 '#f '#f '#((immutable file-name) (immutable character)))) (set! j8971@j8966 '#f) (set! j8973@j8965 (make-record-constructor-descriptor j8969@j8964 j10072@j9388@&condition-rcd j8971@j8966)) (set! j8976@j8963 (record-predicate j8969@j8964)) (set! j8978@make-source-condition (record-constructor j8973@j8965)) (set! j8980@j8961 (record-accessor j8969@j8964 '0)) (set! j8982@j8962 (record-accessor j8969@j8964 '1)) (set! j8984@source-condition? (condition-predicate j8969@j8964)) (set! j8986@source-filename (condition-accessor j8969@j8964 j8980@j8961)) (set! j8988@source-character (condition-accessor j8969@j8964 j8982@j8962)) (if (pair? j8959@x) (j8978@make-source-condition (car j8959@x) (cdr j8959@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! j2985@extract-position-condition (lambda (j8989@x) (j2983@make-source-condition (j2987@expression-position j8989@x)))) (set! j2987@expression-position (lambda (j8991@x) (and (j2209@stx? j8991@x) ((lambda (j8993@x) (and (j1152@j919@annotation? j8993@x) (j1153@j921@annotation-source j8993@x))) (j2213@stx-expr j8991@x))))) (set! j2989@assertion-error (lambda (j8995@expr j8996@pos) (raise (condition (j10119@j9578@make-assertion-violation) (j10137@j9626@make-who-condition 'assert) (j10077@j9469@make-message-condition '"assertion failed") (j10127@j9600@make-irritants-condition (list j8995@expr)) (j2983@make-source-condition j8996@pos))))) (set! j2991@syntax-error (lambda (j8999@x . j9001@args) (begin (if (not (for-all string? j9001@args)) (assertion-violation 'syntax-error '"invalid argument" j9001@args) (void)) (raise (condition (j10077@j9469@make-message-condition (if (null? j9001@args) '"invalid syntax" (apply string-append j9001@args))) (j10171@j9716@make-syntax-violation (j3001@syntax->datum j8999@x) '#f) (j2985@extract-position-condition j8999@x)))))) (set! j2993@syntax-violation* (lambda (j9003@who j9004@msg j9005@form j9006@condition-object) (begin (if (not (string? j9004@msg)) (assertion-violation 'syntax-violation '"message is not a string" j9004@msg) (void)) ((lambda (j9011@who) (raise (condition (if j9011@who (j10137@j9626@make-who-condition j9011@who) (condition)) (j10077@j9469@make-message-condition j9004@msg) j9006@condition-object (j2985@extract-position-condition j9005@form)))) (if (or (string? j9003@who) (symbol? j9003@who)) j9003@who (if (not j9003@who) ((lambda (j9013@t) ((lambda (j9015@ls/false) (if (and j9015@ls/false (apply (lambda (j9017@id) (j2265@id? j9017@id)) j9015@ls/false)) (apply (lambda (j9019@id) (j3001@syntax->datum j9019@id)) j9015@ls/false) ((lambda (j9021@t) ((lambda (j9023@ls/false) (if (and j9023@ls/false (apply (lambda (j9025@id j9026@rest) (j2265@id? j9025@id)) j9023@ls/false)) (apply (lambda (j9029@id j9030@rest) (j3001@syntax->datum j9029@id)) j9023@ls/false) ((lambda (j9033@t) ((lambda (j9035@ls/false) (if j9035@ls/false (apply (lambda () '#f) j9035@ls/false) (j2995@syntax-violation '#f '"invalid syntax" j9033@t))) (j2762@syntax-dispatch j9033@t '_))) j9021@t))) (j2762@syntax-dispatch j9021@t '(any . any)))) j9013@t))) (j2762@syntax-dispatch j9013@t 'any))) j9005@form) (assertion-violation 'syntax-violation '"invalid who argument" j9003@who))))))) (set! j2995@syntax-violation (lambda j9051 ((lambda (j9052) (if (= j9052 '3) (apply (lambda (j9037@who j9038@msg j9039@form) (j2995@syntax-violation j9037@who j9038@msg j9039@form '#f)) j9051) (if (= j9052 '4) (apply (lambda (j9043@who j9044@msg j9045@form j9046@subform) (j2993@syntax-violation* j9043@who j9044@msg j9045@form (j10171@j9716@make-syntax-violation (j3001@syntax->datum j9045@form) (j3001@syntax->datum j9046@subform)))) j9051) (error 'apply '"invalid arg count")))) (length j9051)))) (set! j2997@identifier? (lambda (j9053@x) (j2265@id? j9053@x))) (set! j2999@datum->syntax (lambda (j9055@id j9056@datum) (if (j2265@id? j9055@id) (j2231@datum->stx j9055@id j9056@datum) (assertion-violation 'datum->syntax '"not an identifier" j9055@id)))) (set! j3001@syntax->datum (lambda (j9059@x) (j2287@stx->datum j9059@x))) (set! j3003@compile-r6rs-top-level (lambda (j9061@x*) (call-with-values (lambda () (j2885@top-level-expander j9061@x*)) (lambda (j9065@j9063@lib* j9066@j9064@invoke-code) ((lambda (j9069@invoke-code j9070@lib*) (lambda () (begin (for-each j1791@j1446@invoke-library j9070@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (j1247@j1175@expanded->core j9069@invoke-code)) (void)) (eval-core (j1247@j1175@expanded->core j9069@invoke-code))))) j9066@j9064@invoke-code j9065@j9063@lib*))))) (set! j3005@pre-compile-r6rs-top-level (lambda (j9073@x*) (call-with-values (lambda () (j2885@top-level-expander j9073@x*)) (lambda (j9077@j9075@lib* j9078@j9076@invoke-code) ((lambda (j9081@invoke-code j9082@lib*) (begin (for-each j1791@j1446@invoke-library j9082@lib*) (j1161@j937@compile-core (j1247@j1175@expanded->core j9081@invoke-code)))) j9078@j9076@invoke-code j9077@j9075@lib*))))) (set! j3007@interaction-environment ((lambda (j9085@the-env) (lambda () (or j9085@the-env ((lambda (j9087@lib j9088@rib) (begin ((lambda (j9091@subst) (begin (j2174@set-rib-sym*! j9088@rib (map car j9091@subst)) (j2176@set-rib-mark**! j9088@rib (map (lambda (j9093@x) j2133@top-mark*) j9091@subst)) (j2178@set-rib-label*! j9088@rib (map cdr j9091@subst)))) (j1748@j1360@library-subst j9087@lib)) ((lambda (j9095@env) (begin (set! j9085@the-env j9095@env) j9095@env)) (j2929@make-interaction-env j9088@rib '() '())))) (j1784@j1432@find-library-by-name '(mosh interaction)) (j2184@make-empty-rib))))) '#f)) (set! j3009@top-level-context (j1163@j941@make-parameter '#f)) (begin (set! j9365@j3009@top-level-context j3009@top-level-context) (set! j9364@j3007@interaction-environment j3007@interaction-environment) (set! j9363@j3005@pre-compile-r6rs-top-level j3005@pre-compile-r6rs-top-level) (set! j9362@j3003@compile-r6rs-top-level j3003@compile-r6rs-top-level) (set! j9361@j3001@syntax->datum j3001@syntax->datum) (set! j9360@j2999@datum->syntax j2999@datum->syntax) (set! j9359@j2997@identifier? j2997@identifier?) (set! j9358@j2995@syntax-violation j2995@syntax-violation) (set! j9357@j2993@syntax-violation* j2993@syntax-violation*) (set! j9356@j2991@syntax-error j2991@syntax-error) (set! j9355@j2989@assertion-error j2989@assertion-error) (set! j9354@j2987@expression-position j2987@expression-position) (set! j9353@j2985@extract-position-condition j2985@extract-position-condition) (set! j9352@j2983@make-source-condition j2983@make-source-condition) (set! j9351@j2981@bound-identifier=? j2981@bound-identifier=?) (set! j9350@j2979@free-identifier=? j2979@free-identifier=?) (set! j9349@j2977@generate-temporaries j2977@generate-temporaries) (set! j9348@j2975@make-export-env/macros j2975@make-export-env/macros) (set! j9347@j2973@make-export-subst j2973@make-export-subst) (set! j9346@j2971@build-exports j2971@build-exports) (set! j9345@j2969@rev-map-append j2969@rev-map-append) (set! j9344@j2967@boot-library-expand j2967@boot-library-expand) (set! j9343@j2965@library-expander j2965@library-expander) (set! j9342@j2963@eval j2963@eval) (set! j9341@j2961@expand j2961@expand) (set! j9340@j2959@scheme-report-environment j2959@scheme-report-environment) (set! j9339@j2957@null-environment j2957@null-environment) (set! j9338@j2955@environment j2955@environment) (set! j9337@j2953@environment-symbols j2953@environment-symbols) (set! j9336@j2951@environment? j2951@environment?) (set! j9335@j2949@parse-binding j2949@parse-binding) (set! j9334@j2947@environment-bindings j2947@environment-bindings) (set! j9333@j2945@interaction-environment-symbols j2945@interaction-environment-symbols) (set! j9332@j2943@rp j2943@rp) (set! j9331@j2941@set-interaction-env-locs! j2941@set-interaction-env-locs!) (set! j9330@j2939@set-interaction-env-r! j2939@set-interaction-env-r!) (set! j9329@j2937@set-interaction-env-rib! j2937@set-interaction-env-rib!) (set! j9328@j2935@interaction-env-locs j2935@interaction-env-locs) (set! j9327@j2933@interaction-env-r j2933@interaction-env-r) (set! j9326@j2931@interaction-env-rib j2931@interaction-env-rib) (set! j9325@j2929@make-interaction-env j2929@make-interaction-env) (set! j9324@j2927@interaction-env? j2927@interaction-env?) (set! j9323@j2924@j2916 j2924@j2916) (set! j9322@j2922@j2917 j2922@j2917) (set! j9321@j2920@j2915 j2920@j2915) (set! j9320@j2914@rp j2914@rp) (set! j9319@j2912@set-env-itc! j2912@set-env-itc!) (set! j9318@j2910@set-env-labels! j2910@set-env-labels!) (set! j9317@j2908@set-env-names! j2908@set-env-names!) (set! j9316@j2906@env-itc j2906@env-itc) (set! j9315@j2904@env-labels j2904@env-labels) (set! j9314@j2902@env-names j2902@env-names) (set! j9313@j2900@make-env j2900@make-env) (set! j9312@j2898@env? j2898@env?) (set! j9311@j2895@j2887 j2895@j2887) (set! j9310@j2893@j2888 j2893@j2888) (set! j9309@j2891@j2886 j2891@j2886) (set! j9308@j2885@top-level-expander j2885@top-level-expander) (set! j9307@j2883@parse-top-level-program j2883@parse-top-level-program) (set! j9306@j2881@core-library-expander j2881@core-library-expander) (set! j9305@j2879@library-body-expander j2879@library-body-expander) (set! j9304@j2877@chi-interaction-expr j2877@chi-interaction-expr) (set! j9303@j2875@chi-library-internal j2875@chi-library-internal) (set! j9302@j2873@imp-collector j2873@imp-collector) (set! j9301@j2871@vis-collector j2871@vis-collector) (set! j9300@j2869@inv-collector j2869@inv-collector) (set! j9299@j2867@make-collector j2867@make-collector) (set! j9298@j2865@make-top-rib j2865@make-top-rib) (set! j9297@j2863@parse-import-spec* j2863@parse-import-spec*) (set! j9296@j2861@parse-library j2861@parse-library) (set! j9295@j2859@parse-library-name j2859@parse-library-name) (set! j9294@j2857@parse-exports j2857@parse-exports) (set! j9293@j2855@expand-transformer j2855@expand-transformer) (set! j9292@j2853@chi-body* j2853@chi-body*) (set! j9291@j2851@chi-internal-module j2851@chi-internal-module) (set! j9290@j2849@module-interface-exp-id* j2849@module-interface-exp-id*) (set! j9289@j2847@set-module-interface-exp-lab-vec! j2847@set-module-interface-exp-lab-vec!) (set! j9288@j2845@set-module-interface-exp-id-vec! j2845@set-module-interface-exp-id-vec!) (set! j9287@j2843@set-module-interface-first-mark! j2843@set-module-interface-first-mark!) (set! j9286@j2841@module-interface-exp-lab-vec j2841@module-interface-exp-lab-vec) (set! j9285@j2839@module-interface-exp-id-vec j2839@module-interface-exp-id-vec) (set! j9284@j2837@module-interface-first-mark j2837@module-interface-first-mark) (set! j9283@j2835@make-module-interface j2835@make-module-interface) (set! j9282@j2833@module-interface? j2833@module-interface?) (set! j9281@j2830@j2822 j2830@j2822) (set! j9280@j2828@j2823 j2828@j2823) (set! j9279@j2826@j2821 j2826@j2821) (set! j9278@j2820@parse-module j2820@parse-module) (set! j9277@j2818@chi-internal j2818@chi-internal) (set! j9276@j2816@find-dups j2816@find-dups) (set! j9275@j2814@find-bound=? j2814@find-bound=?) (set! j9274@j2812@chi-rhs* j2812@chi-rhs*) (set! j9273@j2810@expand-interaction-rhs*/init* j2810@expand-interaction-rhs*/init*) (set! j9272@j2808@chi-rhs j2808@chi-rhs) (set! j9271@j2806@chi-defun j2806@chi-defun) (set! j9270@j2804@chi-lambda-clause* j2804@chi-lambda-clause*) (set! j9269@j2802@chi-lambda-clause j2802@chi-lambda-clause) (set! j9268@j2800@verify-formals j2800@verify-formals) (set! j9267@j2798@chi-set! j2798@chi-set!) (set! j9266@j2796@chi-expr j2796@chi-expr) (set! j9265@j2794@chi-application j2794@chi-application) (set! j9264@j2792@chi-expr* j2792@chi-expr*) (set! j9263@j2790@chi-global-macro j2790@chi-global-macro) (set! j9262@j2788@chi-local-macro j2788@chi-local-macro) (set! j9261@j2786@chi-macro j2786@chi-macro) (set! j9260@j2784@do-macro-call j2784@do-macro-call) (set! j9259@j2782@local-macro-transformer j2782@local-macro-transformer) (set! j9258@j2780@macro-transformer j2780@macro-transformer) (set! j9257@j2778@symbol-macro j2778@symbol-macro) (set! j9256@j2776@core-macro-transformer j2776@core-macro-transformer) (set! j9255@j2774@syntax-transformer j2774@syntax-transformer) (set! j9254@j2772@ellipsis-map j2772@ellipsis-map) (set! j9253@j2770@syntax-case-transformer j2770@syntax-case-transformer) (set! j9252@j2768@verify-literals j2768@verify-literals) (set! j9251@j2766@underscore? j2766@underscore?) (set! j9250@j2764@ellipsis? j2764@ellipsis?) (set! j9249@j2762@syntax-dispatch j2762@syntax-dispatch) (set! j9248@j2760@convert-pattern j2760@convert-pattern) (set! j9247@j2758@foreign-call-transformer j2758@foreign-call-transformer) (set! j9246@j2756@parameterize-macro j2756@parameterize-macro) (set! j9245@j2754@incorrect-usage-macro j2754@incorrect-usage-macro) (set! j9244@j2752@define-condition-type-macro j2752@define-condition-type-macro) (set! j9243@j2750@define-record-type-macro j2750@define-record-type-macro) (set! j9242@j2748@define-struct-macro j2748@define-struct-macro) (set! j9241@j2746@quasisyntax-macro j2746@quasisyntax-macro) (set! j9240@j2744@quasiquote-macro j2744@quasiquote-macro) (set! j9239@j2742@syntax-rules-macro j2742@syntax-rules-macro) (set! j9238@j2740@include-into-macro j2740@include-into-macro) (set! j9237@j2738@include-macro j2738@include-macro) (set! j9236@j2736@do-include j2736@do-include) (set! j9235@j2734@cond-macro j2734@cond-macro) (set! j9234@j2732@and-macro j2732@and-macro) (set! j9233@j2730@or-macro j2730@or-macro) (set! j9232@j2728@let*-macro j2728@let*-macro) (set! j9231@j2726@do-macro j2726@do-macro) (set! j9230@j2724@identifier-syntax-macro j2724@identifier-syntax-macro) (set! j9229@j2722@endianness-macro j2722@endianness-macro) (set! j9228@j2720@assert-macro j2720@assert-macro) (set! j9227@j2718@delay-macro j2718@delay-macro) (set! j9226@j2716@time-macro j2716@time-macro) (set! j9225@j2714@define-enumeration-macro j2714@define-enumeration-macro) (set! j9224@j2712@guard-macro j2712@guard-macro) (set! j9223@j2710@trace-letrec-syntax-macro j2710@trace-letrec-syntax-macro) (set! j9222@j2708@trace-let-syntax-macro j2708@trace-let-syntax-macro) (set! j9221@j2706@trace-let/rec-syntax j2706@trace-let/rec-syntax) (set! j9220@j2704@trace-define-syntax-macro j2704@trace-define-syntax-macro) (set! j9219@j2702@trace-define-macro j2702@trace-define-macro) (set! j9218@j2700@trace-lambda-macro j2700@trace-lambda-macro) (set! j9217@j2698@let*-values-macro j2698@let*-values-macro) (set! j9216@j2696@let-values-macro j2696@let-values-macro) (set! j9215@j2694@let-macro j2694@let-macro) (set! j9214@j2692@invalid-fmls-error j2692@invalid-fmls-error) (set! j9213@j2690@with-syntax-macro j2690@with-syntax-macro) (set! j9212@j2688@bless j2688@bless) (set! j9211@j2686@lambda-transformer j2686@lambda-transformer) (set! j9210@j2684@case-lambda-transformer j2684@case-lambda-transformer) (set! j9209@j2682@quote-transformer j2682@quote-transformer) (set! j9208@j2680@case-macro j2680@case-macro) (set! j9207@j2678@or-transformer j2678@or-transformer) (set! j9206@j2676@and-transformer j2676@and-transformer) (set! j9205@j2674@if-transformer j2674@if-transformer) (set! j9204@j2672@unless-macro j2672@unless-macro) (set! j9203@j2670@when-macro j2670@when-macro) (set! j9202@j2668@record-constructor-descriptor-transformer j2668@record-constructor-descriptor-transformer) (set! j9201@j2666@record-type-descriptor-transformer j2666@record-type-descriptor-transformer) (set! j9200@j2664@type-descriptor-transformer j2664@type-descriptor-transformer) (set! j9199@j2662@fluid-let-syntax-transformer j2662@fluid-let-syntax-transformer) (set! j9198@j2660@letrec*-transformer j2660@letrec*-transformer) (set! j9197@j2658@letrec-transformer j2658@letrec-transformer) (set! j9196@j2656@letrec-helper j2656@letrec-helper) (set! j9195@j2654@add-lexicals j2654@add-lexicals) (set! j9194@j2652@add-lexical j2652@add-lexical) (set! j9193@j2650@set-lexical-mutable! j2650@set-lexical-mutable!) (set! j9192@j2648@lexical-mutable? j2648@lexical-mutable?) (set! j9191@j2646@lexical-var j2646@lexical-var) (set! j9190@j2644@scheme-stx j2644@scheme-stx) (set! j9189@j2642@scheme-stx-hashtable j2642@scheme-stx-hashtable) (set! j9188@j2640@parse-define-syntax j2640@parse-define-syntax) (set! j9187@j2638@parse-define j2638@parse-define) (set! j9186@j2327@make-eval-transformer j2327@make-eval-transformer) (set! j9185@j2325@variable-transformer-procedure j2325@variable-transformer-procedure) (set! j9184@j2323@variable-transformer? j2323@variable-transformer?) (set! j9183@j2321@make-variable-transformer j2321@make-variable-transformer) (set! j9182@j2319@sanitize-binding j2319@sanitize-binding) (set! j9181@j2305@syntax-type j2305@syntax-type) (set! j9180@j2303@raise-unbound-error j2303@raise-unbound-error) (set! j9179@j2301@binding-value j2301@binding-value) (set! j9178@j2299@binding-type j2299@binding-type) (set! j9177@j2297@make-binding j2297@make-binding) (set! j9176@j2295@label->binding j2295@label->binding) (set! j9175@j2293@id->real-label j2293@id->real-label) (set! j9174@j2291@id->label j2291@id->label) (set! j9173@j2289@same-marks*? j2289@same-marks*?) (set! j9172@j2287@stx->datum j2287@stx->datum) (set! j9171@j2285@strip j2285@strip) (set! j9170@j2283@strip-annotations j2283@strip-annotations) (set! j9169@j2281@self-evaluating? j2281@self-evaluating?) (set! j9168@j2279@bound-id-member? j2279@bound-id-member?) (set! j9167@j2277@distinct-bound-ids? j2277@distinct-bound-ids?) (set! j9166@j2275@valid-bound-ids? j2275@valid-bound-ids?) (set! j9165@j2273@free-id=? j2273@free-id=?) (set! j9164@j2271@bound-id=? j2271@bound-id=?) (set! j9163@j2269@same-marks? j2269@same-marks?) (set! j9162@j2267@id->sym j2267@id->sym) (set! j9161@j2265@id? j2265@id?) (set! j9160@j2263@syntax->list j2263@syntax->list) (set! j9159@j2261@syntax-cdr j2261@syntax-cdr) (set! j9158@j2259@syntax-car j2259@syntax-car) (set! j9157@j2257@syntax-list? j2257@syntax-list?) (set! j9156@j2255@syntax-null? j2255@syntax-null?) (set! j9155@j2253@syntax-vector? j2253@syntax-vector?) (set! j9154@j2251@syntax-pair? j2251@syntax-pair?) (set! j9153@j2249@syntax-vector->list j2249@syntax-vector->list) (set! j9152@j2247@syntax-kind? j2247@syntax-kind?) (set! j9151@j2245@add-subst j2245@add-subst) (set! j9150@j2243@add-mark j2243@add-mark) (set! j9149@j2241@mkstx j2241@mkstx) (set! j9148@j2239@join-wraps j2239@join-wraps) (set! j9147@j2237@anti-mark? j2237@anti-mark?) (set! j9146@j2235@anti-mark j2235@anti-mark) (set! j9145@j2233@gen-mark j2233@gen-mark) (set! j9144@j2231@datum->stx j2231@datum->stx) (set! j9143@j2229@rp j2229@rp) (set! j9142@j2227@set-stx-ae*! j2227@set-stx-ae*!) (set! j9141@j2225@set-stx-subst*! j2225@set-stx-subst*!) (set! j9140@j2223@set-stx-mark*! j2223@set-stx-mark*!) (set! j9139@j2221@set-stx-expr! j2221@set-stx-expr!) (set! j9138@j2219@stx-ae* j2219@stx-ae*) (set! j9137@j2217@stx-subst* j2217@stx-subst*) (set! j9136@j2215@stx-mark* j2215@stx-mark*) (set! j9135@j2213@stx-expr j2213@stx-expr) (set! j9134@j2211@make-stx j2211@make-stx) (set! j9133@j2209@stx? j2209@stx?) (set! j9132@j2206@j2198 j2206@j2198) (set! j9131@j2204@j2199 j2204@j2199) (set! j9130@j2202@j2197 j2202@j2197) (set! j9129@j2196@make-full-rib j2196@make-full-rib) (set! j9128@j2194@unseal-rib! j2194@unseal-rib!) (set! j9127@j2192@seal-rib! j2192@seal-rib!) (set! j9126@j2190@make-rib-map j2190@make-rib-map) (set! j9125@j2188@extend-rib/nc! j2188@extend-rib/nc!) (set! j9124@j2186@extend-rib! j2186@extend-rib!) (set! j9123@j2184@make-empty-rib j2184@make-empty-rib) (set! j9122@j2182@set-rib-cache! j2182@set-rib-cache!) (set! j9121@j2180@set-rib-sealed/freq! j2180@set-rib-sealed/freq!) (set! j9120@j2178@set-rib-label*! j2178@set-rib-label*!) (set! j9119@j2176@set-rib-mark**! j2176@set-rib-mark**!) (set! j9118@j2174@set-rib-sym*! j2174@set-rib-sym*!) (set! j9117@j2172@rib-cache j2172@rib-cache) (set! j9116@j2170@rib-sealed/freq j2170@rib-sealed/freq) (set! j9115@j2168@rib-label* j2168@rib-label*) (set! j9114@j2166@rib-mark** j2166@rib-mark**) (set! j9113@j2164@rib-sym* j2164@rib-sym*) (set! j9112@j2162@make-rib j2162@make-rib) (set! j9111@j2160@rib? j2160@rib?) (set! j9110@j2157@j2149 j2157@j2149) (set! j9109@j2155@j2150 j2155@j2150) (set! j9108@j2153@j2148 j2153@j2148) (set! j9107@j2147@gen-define-label j2147@gen-define-label) (set! j9106@j2145@gen-define-label+loc j2145@gen-define-label+loc) (set! j9105@j2143@gen-top-level-label j2143@gen-top-level-label) (set! j9104@j2141@gen-label j2141@gen-label) (set! j9103@j2139@gen-global j2139@gen-global) (set! j9102@j2137@gen-lexical j2137@gen-lexical) (set! j9101@j2135@top-marked? j2135@top-marked?) (set! j9100@j2133@top-mark* j2133@top-mark*) (set! j9099@j2128@set-union j2128@set-union) (set! j9098@j2126@set-cons j2126@set-cons) (set! j9097@j2124@file-options-macro j2124@file-options-macro) (j1781@j1426@current-library-expander j2965@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (j9375@j9370 j9377@j9372 j9379@j9371 j9382@&condition? j9384@make-&condition j9386@&condition-rtd j9388@&condition-rcd j9460@j9455 j9462@j9457 j9464@j9456 j9467@p? j9469@make-message-condition j9471@j9454@condition-message j9473@message-condition? j9475@condition-message j9477@&message-rtd j9479@&message-rcd j9485@j9480 j9487@j9482 j9489@j9481 j9492@p? j9494@make-warning j9496@warning? j9498@&warning-rtd j9500@&warning-rcd j9506@j9501 j9508@j9503 j9510@j9502 j9513@p? j9515@make-serious-condition j9517@serious-condition? j9519@&serious-rtd j9521@&serious-rcd j9527@j9522 j9529@j9524 j9531@j9523 j9534@p? j9536@make-error j9538@error? j9540@&error-rtd j9542@&error-rcd j9548@j9543 j9550@j9545 j9552@j9544 j9555@p? j9557@make-violation j9559@violation? j9561@&violation-rtd j9563@&violation-rcd j9569@j9564 j9571@j9566 j9573@j9565 j9576@p? j9578@make-assertion-violation j9580@assertion-violation? j9582@&assertion-rtd j9584@&assertion-rcd j9591@j9586 j9593@j9588 j9595@j9587 j9598@p? j9600@make-irritants-condition j9602@j9585@condition-irritants j9604@irritants-condition? j9606@condition-irritants j9608@&irritants-rtd j9610@&irritants-rcd j9617@j9612 j9619@j9614 j9621@j9613 j9624@p? j9626@make-who-condition j9628@j9611@condition-who j9630@who-condition? j9632@condition-who j9634@&who-rtd j9636@&who-rcd j9642@j9637 j9644@j9639 j9646@j9638 j9649@p? j9651@make-non-continuable-violation j9653@non-continuable-violation? j9655@&non-continuable-rtd j9657@&non-continuable-rcd j9663@j9658 j9665@j9660 j9667@j9659 j9670@p? j9672@make-implementation-restriction-violation j9674@implementation-restriction-violation? j9676@&implementation-restriction-rtd j9678@&implementation-restriction-rcd j9684@j9679 j9686@j9681 j9688@j9680 j9691@p? j9693@make-lexical-violation j9695@lexical-violation? j9697@&lexical-rtd j9699@&lexical-rcd j9707@j9702 j9709@j9704 j9711@j9703 j9714@p? j9716@make-syntax-violation j9718@j9700@syntax-violation-form j9720@j9701@syntax-violation-subform j9722@syntax-violation? j9724@syntax-violation-form j9726@syntax-violation-subform j9728@&syntax-rtd j9730@&syntax-rcd j9736@j9731 j9738@j9733 j9740@j9732 j9743@p? j9745@make-undefined-violation j9747@undefined-violation? j9749@&undefined-rtd j9751@&undefined-rcd j9757@j9752 j9759@j9754 j9761@j9753 j9764@p? j9766@make-i/o-error j9768@i/o-error? j9770@&i/o-rtd j9772@&i/o-rcd j9778@j9773 j9780@j9775 j9782@j9774 j9785@p? j9787@make-i/o-read-error j9789@i/o-read-error? j9791@&i/o-read-rtd j9793@&i/o-read-rcd j9799@j9794 j9801@j9796 j9803@j9795 j9806@p? j9808@make-i/o-write-error j9810@i/o-write-error? j9812@&i/o-write-rtd j9814@&i/o-write-rcd j9821@j9816 j9823@j9818 j9825@j9817 j9828@p? j9830@make-i/o-invalid-position-error j9832@j9815@i/o-error-position j9834@i/o-invalid-position-error? j9836@i/o-error-position j9838@&i/o-invalid-position-rtd j9840@&i/o-invalid-position-rcd j9847@j9842 j9849@j9844 j9851@j9843 j9854@p? j9856@make-i/o-filename-error j9858@j9841@i/o-error-filename j9860@i/o-filename-error? j9862@i/o-error-filename j9864@&i/o-filename-rtd j9866@&i/o-filename-rcd j9872@j9867 j9874@j9869 j9876@j9868 j9879@p? j9881@make-i/o-file-protection-error j9883@i/o-file-protection-error? j9885@&i/o-file-protection-rtd j9887@&i/o-file-protection-rcd j9893@j9888 j9895@j9890 j9897@j9889 j9900@p? j9902@make-i/o-file-is-read-only-error j9904@i/o-file-is-read-only-error? j9906@&i/o-file-is-read-only-rtd j9908@&i/o-file-is-read-only-rcd j9914@j9909 j9916@j9911 j9918@j9910 j9921@p? j9923@make-i/o-file-already-exists-error j9925@i/o-file-already-exists-error? j9927@&i/o-file-already-exists-rtd j9929@&i/o-file-already-exists-rcd j9935@j9930 j9937@j9932 j9939@j9931 j9942@p? j9944@make-i/o-file-does-not-exist-error j9946@i/o-file-does-not-exist-error? j9948@&i/o-file-does-not-exist-rtd j9950@&i/o-file-does-not-exist-rcd j9957@j9952 j9959@j9954 j9961@j9953 j9964@p? j9966@make-i/o-port-error j9968@j9951@i/o-error-port j9970@i/o-port-error? j9972@i/o-error-port j9974@&i/o-port-rtd j9976@&i/o-port-rcd j9982@j9977 j9984@j9979 j9986@j9978 j9989@p? j9991@make-i/o-decoding-error j9993@i/o-decoding-error? j9995@&i/o-decoding-rtd j9997@&i/o-decoding-rcd j10004@j9999 j10006@j10001 j10008@j10000 j10011@p? j10013@make-i/o-encoding-error j10015@j9998@i/o-encoding-error-char j10017@i/o-encoding-error? j10019@i/o-encoding-error-char j10021@&i/o-encoding-rtd j10023@&i/o-encoding-rcd j10029@j10024 j10031@j10026 j10033@j10025 j10036@p? j10038@make-no-infinities-violation j10040@no-infinities-violation? j10042@&no-infinities-rtd j10044@&no-infinities-rcd j10050@j10045 j10052@j10047 j10054@j10046 j10057@p? j10059@make-no-nans-violation j10061@no-nans-violation? j10063@&no-nans-rtd j10065@&no-nans-rcd) (begin (set! j9375@j9370 (make-record-type-descriptor '&condition '#f 'j9373 '#f '#f '#())) (set! j9377@j9372 '#f) (set! j9379@j9371 (make-record-constructor-descriptor j9375@j9370 '#f j9377@j9372)) (set! j9382@&condition? (record-predicate j9375@j9370)) (set! j9384@make-&condition (record-constructor j9379@j9371)) (set! j9386@&condition-rtd j9375@j9370) (set! j9388@&condition-rcd j9379@j9371) (set! j9460@j9455 (make-record-type-descriptor '&message j9375@j9370 'j9458 '#f '#f '#((immutable message)))) (set! j9462@j9457 '#f) (set! j9464@j9456 (make-record-constructor-descriptor j9460@j9455 j9379@j9371 j9462@j9457)) (set! j9467@p? (record-predicate j9460@j9455)) (set! j9469@make-message-condition (record-constructor j9464@j9456)) (set! j9471@j9454@condition-message (record-accessor j9460@j9455 '0)) (set! j9473@message-condition? (condition-predicate j9460@j9455)) (set! j9475@condition-message (condition-accessor j9460@j9455 j9471@j9454@condition-message)) (set! j9477@&message-rtd j9460@j9455) (set! j9479@&message-rcd j9464@j9456) (set! j9485@j9480 (make-record-type-descriptor '&warning j9375@j9370 'j9483 '#f '#f '#())) (set! j9487@j9482 '#f) (set! j9489@j9481 (make-record-constructor-descriptor j9485@j9480 j9379@j9371 j9487@j9482)) (set! j9492@p? (record-predicate j9485@j9480)) (set! j9494@make-warning (record-constructor j9489@j9481)) (set! j9496@warning? (condition-predicate j9485@j9480)) (set! j9498@&warning-rtd j9485@j9480) (set! j9500@&warning-rcd j9489@j9481) (set! j9506@j9501 (make-record-type-descriptor '&serious j9375@j9370 'j9504 '#f '#f '#())) (set! j9508@j9503 '#f) (set! j9510@j9502 (make-record-constructor-descriptor j9506@j9501 j9379@j9371 j9508@j9503)) (set! j9513@p? (record-predicate j9506@j9501)) (set! j9515@make-serious-condition (record-constructor j9510@j9502)) (set! j9517@serious-condition? (condition-predicate j9506@j9501)) (set! j9519@&serious-rtd j9506@j9501) (set! j9521@&serious-rcd j9510@j9502) (set! j9527@j9522 (make-record-type-descriptor '&error j9506@j9501 'j9525 '#f '#f '#())) (set! j9529@j9524 '#f) (set! j9531@j9523 (make-record-constructor-descriptor j9527@j9522 j9510@j9502 j9529@j9524)) (set! j9534@p? (record-predicate j9527@j9522)) (set! j9536@make-error (record-constructor j9531@j9523)) (set! j9538@error? (condition-predicate j9527@j9522)) (set! j9540@&error-rtd j9527@j9522) (set! j9542@&error-rcd j9531@j9523) (set! j9548@j9543 (make-record-type-descriptor '&violation j9506@j9501 'j9546 '#f '#f '#())) (set! j9550@j9545 '#f) (set! j9552@j9544 (make-record-constructor-descriptor j9548@j9543 j9510@j9502 j9550@j9545)) (set! j9555@p? (record-predicate j9548@j9543)) (set! j9557@make-violation (record-constructor j9552@j9544)) (set! j9559@violation? (condition-predicate j9548@j9543)) (set! j9561@&violation-rtd j9548@j9543) (set! j9563@&violation-rcd j9552@j9544) (set! j9569@j9564 (make-record-type-descriptor '&assertion j9548@j9543 'j9567 '#f '#f '#())) (set! j9571@j9566 '#f) (set! j9573@j9565 (make-record-constructor-descriptor j9569@j9564 j9552@j9544 j9571@j9566)) (set! j9576@p? (record-predicate j9569@j9564)) (set! j9578@make-assertion-violation (record-constructor j9573@j9565)) (set! j9580@assertion-violation? (condition-predicate j9569@j9564)) (set! j9582@&assertion-rtd j9569@j9564) (set! j9584@&assertion-rcd j9573@j9565) (set! j9591@j9586 (make-record-type-descriptor '&irritants j9375@j9370 'j9589 '#f '#f '#((immutable irritants)))) (set! j9593@j9588 '#f) (set! j9595@j9587 (make-record-constructor-descriptor j9591@j9586 j9379@j9371 j9593@j9588)) (set! j9598@p? (record-predicate j9591@j9586)) (set! j9600@make-irritants-condition (record-constructor j9595@j9587)) (set! j9602@j9585@condition-irritants (record-accessor j9591@j9586 '0)) (set! j9604@irritants-condition? (condition-predicate j9591@j9586)) (set! j9606@condition-irritants (condition-accessor j9591@j9586 j9602@j9585@condition-irritants)) (set! j9608@&irritants-rtd j9591@j9586) (set! j9610@&irritants-rcd j9595@j9587) (set! j9617@j9612 (make-record-type-descriptor '&who j9375@j9370 'j9615 '#f '#f '#((immutable who)))) (set! j9619@j9614 '#f) (set! j9621@j9613 (make-record-constructor-descriptor j9617@j9612 j9379@j9371 j9619@j9614)) (set! j9624@p? (record-predicate j9617@j9612)) (set! j9626@make-who-condition (record-constructor j9621@j9613)) (set! j9628@j9611@condition-who (record-accessor j9617@j9612 '0)) (set! j9630@who-condition? (condition-predicate j9617@j9612)) (set! j9632@condition-who (condition-accessor j9617@j9612 j9628@j9611@condition-who)) (set! j9634@&who-rtd j9617@j9612) (set! j9636@&who-rcd j9621@j9613) (set! j9642@j9637 (make-record-type-descriptor '&non-continuable j9548@j9543 'j9640 '#f '#f '#())) (set! j9644@j9639 '#f) (set! j9646@j9638 (make-record-constructor-descriptor j9642@j9637 j9552@j9544 j9644@j9639)) (set! j9649@p? (record-predicate j9642@j9637)) (set! j9651@make-non-continuable-violation (record-constructor j9646@j9638)) (set! j9653@non-continuable-violation? (condition-predicate j9642@j9637)) (set! j9655@&non-continuable-rtd j9642@j9637) (set! j9657@&non-continuable-rcd j9646@j9638) (set! j9663@j9658 (make-record-type-descriptor '&implementation-restriction j9548@j9543 'j9661 '#f '#f '#())) (set! j9665@j9660 '#f) (set! j9667@j9659 (make-record-constructor-descriptor j9663@j9658 j9552@j9544 j9665@j9660)) (set! j9670@p? (record-predicate j9663@j9658)) (set! j9672@make-implementation-restriction-violation (record-constructor j9667@j9659)) (set! j9674@implementation-restriction-violation? (condition-predicate j9663@j9658)) (set! j9676@&implementation-restriction-rtd j9663@j9658) (set! j9678@&implementation-restriction-rcd j9667@j9659) (set! j9684@j9679 (make-record-type-descriptor '&lexical j9548@j9543 'j9682 '#f '#f '#())) (set! j9686@j9681 '#f) (set! j9688@j9680 (make-record-constructor-descriptor j9684@j9679 j9552@j9544 j9686@j9681)) (set! j9691@p? (record-predicate j9684@j9679)) (set! j9693@make-lexical-violation (record-constructor j9688@j9680)) (set! j9695@lexical-violation? (condition-predicate j9684@j9679)) (set! j9697@&lexical-rtd j9684@j9679) (set! j9699@&lexical-rcd j9688@j9680) (set! j9707@j9702 (make-record-type-descriptor '&syntax j9548@j9543 'j9705 '#f '#f '#((immutable form) (immutable subform)))) (set! j9709@j9704 '#f) (set! j9711@j9703 (make-record-constructor-descriptor j9707@j9702 j9552@j9544 j9709@j9704)) (set! j9714@p? (record-predicate j9707@j9702)) (set! j9716@make-syntax-violation (record-constructor j9711@j9703)) (set! j9718@j9700@syntax-violation-form (record-accessor j9707@j9702 '0)) (set! j9720@j9701@syntax-violation-subform (record-accessor j9707@j9702 '1)) (set! j9722@syntax-violation? (condition-predicate j9707@j9702)) (set! j9724@syntax-violation-form (condition-accessor j9707@j9702 j9718@j9700@syntax-violation-form)) (set! j9726@syntax-violation-subform (condition-accessor j9707@j9702 j9720@j9701@syntax-violation-subform)) (set! j9728@&syntax-rtd j9707@j9702) (set! j9730@&syntax-rcd j9711@j9703) (set! j9736@j9731 (make-record-type-descriptor '&undefined j9548@j9543 'j9734 '#f '#f '#())) (set! j9738@j9733 '#f) (set! j9740@j9732 (make-record-constructor-descriptor j9736@j9731 j9552@j9544 j9738@j9733)) (set! j9743@p? (record-predicate j9736@j9731)) (set! j9745@make-undefined-violation (record-constructor j9740@j9732)) (set! j9747@undefined-violation? (condition-predicate j9736@j9731)) (set! j9749@&undefined-rtd j9736@j9731) (set! j9751@&undefined-rcd j9740@j9732) (set! j9757@j9752 (make-record-type-descriptor '&i/o j9527@j9522 'j9755 '#f '#f '#())) (set! j9759@j9754 '#f) (set! j9761@j9753 (make-record-constructor-descriptor j9757@j9752 j9531@j9523 j9759@j9754)) (set! j9764@p? (record-predicate j9757@j9752)) (set! j9766@make-i/o-error (record-constructor j9761@j9753)) (set! j9768@i/o-error? (condition-predicate j9757@j9752)) (set! j9770@&i/o-rtd j9757@j9752) (set! j9772@&i/o-rcd j9761@j9753) (set! j9778@j9773 (make-record-type-descriptor '&i/o-read j9757@j9752 'j9776 '#f '#f '#())) (set! j9780@j9775 '#f) (set! j9782@j9774 (make-record-constructor-descriptor j9778@j9773 j9761@j9753 j9780@j9775)) (set! j9785@p? (record-predicate j9778@j9773)) (set! j9787@make-i/o-read-error (record-constructor j9782@j9774)) (set! j9789@i/o-read-error? (condition-predicate j9778@j9773)) (set! j9791@&i/o-read-rtd j9778@j9773) (set! j9793@&i/o-read-rcd j9782@j9774) (set! j9799@j9794 (make-record-type-descriptor '&i/o-write j9757@j9752 'j9797 '#f '#f '#())) (set! j9801@j9796 '#f) (set! j9803@j9795 (make-record-constructor-descriptor j9799@j9794 j9761@j9753 j9801@j9796)) (set! j9806@p? (record-predicate j9799@j9794)) (set! j9808@make-i/o-write-error (record-constructor j9803@j9795)) (set! j9810@i/o-write-error? (condition-predicate j9799@j9794)) (set! j9812@&i/o-write-rtd j9799@j9794) (set! j9814@&i/o-write-rcd j9803@j9795) (set! j9821@j9816 (make-record-type-descriptor '&i/o-invalid-position j9757@j9752 'j9819 '#f '#f '#((immutable position)))) (set! j9823@j9818 '#f) (set! j9825@j9817 (make-record-constructor-descriptor j9821@j9816 j9761@j9753 j9823@j9818)) (set! j9828@p? (record-predicate j9821@j9816)) (set! j9830@make-i/o-invalid-position-error (record-constructor j9825@j9817)) (set! j9832@j9815@i/o-error-position (record-accessor j9821@j9816 '0)) (set! j9834@i/o-invalid-position-error? (condition-predicate j9821@j9816)) (set! j9836@i/o-error-position (condition-accessor j9821@j9816 j9832@j9815@i/o-error-position)) (set! j9838@&i/o-invalid-position-rtd j9821@j9816) (set! j9840@&i/o-invalid-position-rcd j9825@j9817) (set! j9847@j9842 (make-record-type-descriptor '&i/o-filename j9757@j9752 'j9845 '#f '#f '#((immutable filename)))) (set! j9849@j9844 '#f) (set! j9851@j9843 (make-record-constructor-descriptor j9847@j9842 j9761@j9753 j9849@j9844)) (set! j9854@p? (record-predicate j9847@j9842)) (set! j9856@make-i/o-filename-error (record-constructor j9851@j9843)) (set! j9858@j9841@i/o-error-filename (record-accessor j9847@j9842 '0)) (set! j9860@i/o-filename-error? (condition-predicate j9847@j9842)) (set! j9862@i/o-error-filename (condition-accessor j9847@j9842 j9858@j9841@i/o-error-filename)) (set! j9864@&i/o-filename-rtd j9847@j9842) (set! j9866@&i/o-filename-rcd j9851@j9843) (set! j9872@j9867 (make-record-type-descriptor '&i/o-file-protection j9847@j9842 'j9870 '#f '#f '#())) (set! j9874@j9869 '#f) (set! j9876@j9868 (make-record-constructor-descriptor j9872@j9867 j9851@j9843 j9874@j9869)) (set! j9879@p? (record-predicate j9872@j9867)) (set! j9881@make-i/o-file-protection-error (record-constructor j9876@j9868)) (set! j9883@i/o-file-protection-error? (condition-predicate j9872@j9867)) (set! j9885@&i/o-file-protection-rtd j9872@j9867) (set! j9887@&i/o-file-protection-rcd j9876@j9868) (set! j9893@j9888 (make-record-type-descriptor '&i/o-file-is-read-only j9872@j9867 'j9891 '#f '#f '#())) (set! j9895@j9890 '#f) (set! j9897@j9889 (make-record-constructor-descriptor j9893@j9888 j9876@j9868 j9895@j9890)) (set! j9900@p? (record-predicate j9893@j9888)) (set! j9902@make-i/o-file-is-read-only-error (record-constructor j9897@j9889)) (set! j9904@i/o-file-is-read-only-error? (condition-predicate j9893@j9888)) (set! j9906@&i/o-file-is-read-only-rtd j9893@j9888) (set! j9908@&i/o-file-is-read-only-rcd j9897@j9889) (set! j9914@j9909 (make-record-type-descriptor '&i/o-file-already-exists j9847@j9842 'j9912 '#f '#f '#())) (set! j9916@j9911 '#f) (set! j9918@j9910 (make-record-constructor-descriptor j9914@j9909 j9851@j9843 j9916@j9911)) (set! j9921@p? (record-predicate j9914@j9909)) (set! j9923@make-i/o-file-already-exists-error (record-constructor j9918@j9910)) (set! j9925@i/o-file-already-exists-error? (condition-predicate j9914@j9909)) (set! j9927@&i/o-file-already-exists-rtd j9914@j9909) (set! j9929@&i/o-file-already-exists-rcd j9918@j9910) (set! j9935@j9930 (make-record-type-descriptor '&i/o-file-does-not-exist j9847@j9842 'j9933 '#f '#f '#())) (set! j9937@j9932 '#f) (set! j9939@j9931 (make-record-constructor-descriptor j9935@j9930 j9851@j9843 j9937@j9932)) (set! j9942@p? (record-predicate j9935@j9930)) (set! j9944@make-i/o-file-does-not-exist-error (record-constructor j9939@j9931)) (set! j9946@i/o-file-does-not-exist-error? (condition-predicate j9935@j9930)) (set! j9948@&i/o-file-does-not-exist-rtd j9935@j9930) (set! j9950@&i/o-file-does-not-exist-rcd j9939@j9931) (set! j9957@j9952 (make-record-type-descriptor '&i/o-port j9757@j9752 'j9955 '#f '#f '#((immutable port)))) (set! j9959@j9954 '#f) (set! j9961@j9953 (make-record-constructor-descriptor j9957@j9952 j9761@j9753 j9959@j9954)) (set! j9964@p? (record-predicate j9957@j9952)) (set! j9966@make-i/o-port-error (record-constructor j9961@j9953)) (set! j9968@j9951@i/o-error-port (record-accessor j9957@j9952 '0)) (set! j9970@i/o-port-error? (condition-predicate j9957@j9952)) (set! j9972@i/o-error-port (condition-accessor j9957@j9952 j9968@j9951@i/o-error-port)) (set! j9974@&i/o-port-rtd j9957@j9952) (set! j9976@&i/o-port-rcd j9961@j9953) (set! j9982@j9977 (make-record-type-descriptor '&i/o-decoding j9957@j9952 'j9980 '#f '#f '#())) (set! j9984@j9979 '#f) (set! j9986@j9978 (make-record-constructor-descriptor j9982@j9977 j9961@j9953 j9984@j9979)) (set! j9989@p? (record-predicate j9982@j9977)) (set! j9991@make-i/o-decoding-error (record-constructor j9986@j9978)) (set! j9993@i/o-decoding-error? (condition-predicate j9982@j9977)) (set! j9995@&i/o-decoding-rtd j9982@j9977) (set! j9997@&i/o-decoding-rcd j9986@j9978) (set! j10004@j9999 (make-record-type-descriptor '&i/o-encoding j9957@j9952 'j10002 '#f '#f '#((immutable char)))) (set! j10006@j10001 '#f) (set! j10008@j10000 (make-record-constructor-descriptor j10004@j9999 j9961@j9953 j10006@j10001)) (set! j10011@p? (record-predicate j10004@j9999)) (set! j10013@make-i/o-encoding-error (record-constructor j10008@j10000)) (set! j10015@j9998@i/o-encoding-error-char (record-accessor j10004@j9999 '0)) (set! j10017@i/o-encoding-error? (condition-predicate j10004@j9999)) (set! j10019@i/o-encoding-error-char (condition-accessor j10004@j9999 j10015@j9998@i/o-encoding-error-char)) (set! j10021@&i/o-encoding-rtd j10004@j9999) (set! j10023@&i/o-encoding-rcd j10008@j10000) (set! j10029@j10024 (make-record-type-descriptor '&no-infinities j9663@j9658 'j10027 '#f '#f '#())) (set! j10031@j10026 '#f) (set! j10033@j10025 (make-record-constructor-descriptor j10029@j10024 j9667@j9659 j10031@j10026)) (set! j10036@p? (record-predicate j10029@j10024)) (set! j10038@make-no-infinities-violation (record-constructor j10033@j10025)) (set! j10040@no-infinities-violation? (condition-predicate j10029@j10024)) (set! j10042@&no-infinities-rtd j10029@j10024) (set! j10044@&no-infinities-rcd j10033@j10025) (set! j10050@j10045 (make-record-type-descriptor '&no-nans j9663@j9658 'j10048 '#f '#f '#())) (set! j10052@j10047 '#f) (set! j10054@j10046 (make-record-constructor-descriptor j10050@j10045 j9667@j9659 j10052@j10047)) (set! j10057@p? (record-predicate j10050@j10045)) (set! j10059@make-no-nans-violation (record-constructor j10054@j10046)) (set! j10061@no-nans-violation? (condition-predicate j10050@j10045)) (set! j10063@&no-nans-rtd j10050@j10045) (set! j10065@&no-nans-rcd j10054@j10046) (begin (set! j10306@j10065@&no-nans-rcd j10065@&no-nans-rcd) (set! j10305@j10063@&no-nans-rtd j10063@&no-nans-rtd) (set! j10304@j10061@no-nans-violation? j10061@no-nans-violation?) (set! j10303@j10059@make-no-nans-violation j10059@make-no-nans-violation) (set! j10302@j10057@p? j10057@p?) (set! j10301@j10054@j10046 j10054@j10046) (set! j10300@j10052@j10047 j10052@j10047) (set! j10299@j10050@j10045 j10050@j10045) (set! j10298@j10044@&no-infinities-rcd j10044@&no-infinities-rcd) (set! j10297@j10042@&no-infinities-rtd j10042@&no-infinities-rtd) (set! j10296@j10040@no-infinities-violation? j10040@no-infinities-violation?) (set! j10295@j10038@make-no-infinities-violation j10038@make-no-infinities-violation) (set! j10294@j10036@p? j10036@p?) (set! j10293@j10033@j10025 j10033@j10025) (set! j10292@j10031@j10026 j10031@j10026) (set! j10291@j10029@j10024 j10029@j10024) (set! j10290@j10023@&i/o-encoding-rcd j10023@&i/o-encoding-rcd) (set! j10289@j10021@&i/o-encoding-rtd j10021@&i/o-encoding-rtd) (set! j10288@j10019@i/o-encoding-error-char j10019@i/o-encoding-error-char) (set! j10287@j10017@i/o-encoding-error? j10017@i/o-encoding-error?) (set! j10286@j10015@j9998@i/o-encoding-error-char j10015@j9998@i/o-encoding-error-char) (set! j10285@j10013@make-i/o-encoding-error j10013@make-i/o-encoding-error) (set! j10284@j10011@p? j10011@p?) (set! j10283@j10008@j10000 j10008@j10000) (set! j10282@j10006@j10001 j10006@j10001) (set! j10281@j10004@j9999 j10004@j9999) (set! j10280@j9997@&i/o-decoding-rcd j9997@&i/o-decoding-rcd) (set! j10279@j9995@&i/o-decoding-rtd j9995@&i/o-decoding-rtd) (set! j10278@j9993@i/o-decoding-error? j9993@i/o-decoding-error?) (set! j10277@j9991@make-i/o-decoding-error j9991@make-i/o-decoding-error) (set! j10276@j9989@p? j9989@p?) (set! j10275@j9986@j9978 j9986@j9978) (set! j10274@j9984@j9979 j9984@j9979) (set! j10273@j9982@j9977 j9982@j9977) (set! j10272@j9976@&i/o-port-rcd j9976@&i/o-port-rcd) (set! j10271@j9974@&i/o-port-rtd j9974@&i/o-port-rtd) (set! j10270@j9972@i/o-error-port j9972@i/o-error-port) (set! j10269@j9970@i/o-port-error? j9970@i/o-port-error?) (set! j10268@j9968@j9951@i/o-error-port j9968@j9951@i/o-error-port) (set! j10267@j9966@make-i/o-port-error j9966@make-i/o-port-error) (set! j10266@j9964@p? j9964@p?) (set! j10265@j9961@j9953 j9961@j9953) (set! j10264@j9959@j9954 j9959@j9954) (set! j10263@j9957@j9952 j9957@j9952) (set! j10262@j9950@&i/o-file-does-not-exist-rcd j9950@&i/o-file-does-not-exist-rcd) (set! j10261@j9948@&i/o-file-does-not-exist-rtd j9948@&i/o-file-does-not-exist-rtd) (set! j10260@j9946@i/o-file-does-not-exist-error? j9946@i/o-file-does-not-exist-error?) (set! j10259@j9944@make-i/o-file-does-not-exist-error j9944@make-i/o-file-does-not-exist-error) (set! j10258@j9942@p? j9942@p?) (set! j10257@j9939@j9931 j9939@j9931) (set! j10256@j9937@j9932 j9937@j9932) (set! j10255@j9935@j9930 j9935@j9930) (set! j10254@j9929@&i/o-file-already-exists-rcd j9929@&i/o-file-already-exists-rcd) (set! j10253@j9927@&i/o-file-already-exists-rtd j9927@&i/o-file-already-exists-rtd) (set! j10252@j9925@i/o-file-already-exists-error? j9925@i/o-file-already-exists-error?) (set! j10251@j9923@make-i/o-file-already-exists-error j9923@make-i/o-file-already-exists-error) (set! j10250@j9921@p? j9921@p?) (set! j10249@j9918@j9910 j9918@j9910) (set! j10248@j9916@j9911 j9916@j9911) (set! j10247@j9914@j9909 j9914@j9909) (set! j10246@j9908@&i/o-file-is-read-only-rcd j9908@&i/o-file-is-read-only-rcd) (set! j10245@j9906@&i/o-file-is-read-only-rtd j9906@&i/o-file-is-read-only-rtd) (set! j10244@j9904@i/o-file-is-read-only-error? j9904@i/o-file-is-read-only-error?) (set! j10243@j9902@make-i/o-file-is-read-only-error j9902@make-i/o-file-is-read-only-error) (set! j10242@j9900@p? j9900@p?) (set! j10241@j9897@j9889 j9897@j9889) (set! j10240@j9895@j9890 j9895@j9890) (set! j10239@j9893@j9888 j9893@j9888) (set! j10238@j9887@&i/o-file-protection-rcd j9887@&i/o-file-protection-rcd) (set! j10237@j9885@&i/o-file-protection-rtd j9885@&i/o-file-protection-rtd) (set! j10236@j9883@i/o-file-protection-error? j9883@i/o-file-protection-error?) (set! j10235@j9881@make-i/o-file-protection-error j9881@make-i/o-file-protection-error) (set! j10234@j9879@p? j9879@p?) (set! j10233@j9876@j9868 j9876@j9868) (set! j10232@j9874@j9869 j9874@j9869) (set! j10231@j9872@j9867 j9872@j9867) (set! j10230@j9866@&i/o-filename-rcd j9866@&i/o-filename-rcd) (set! j10229@j9864@&i/o-filename-rtd j9864@&i/o-filename-rtd) (set! j10228@j9862@i/o-error-filename j9862@i/o-error-filename) (set! j10227@j9860@i/o-filename-error? j9860@i/o-filename-error?) (set! j10226@j9858@j9841@i/o-error-filename j9858@j9841@i/o-error-filename) (set! j10225@j9856@make-i/o-filename-error j9856@make-i/o-filename-error) (set! j10224@j9854@p? j9854@p?) (set! j10223@j9851@j9843 j9851@j9843) (set! j10222@j9849@j9844 j9849@j9844) (set! j10221@j9847@j9842 j9847@j9842) (set! j10220@j9840@&i/o-invalid-position-rcd j9840@&i/o-invalid-position-rcd) (set! j10219@j9838@&i/o-invalid-position-rtd j9838@&i/o-invalid-position-rtd) (set! j10218@j9836@i/o-error-position j9836@i/o-error-position) (set! j10217@j9834@i/o-invalid-position-error? j9834@i/o-invalid-position-error?) (set! j10216@j9832@j9815@i/o-error-position j9832@j9815@i/o-error-position) (set! j10215@j9830@make-i/o-invalid-position-error j9830@make-i/o-invalid-position-error) (set! j10214@j9828@p? j9828@p?) (set! j10213@j9825@j9817 j9825@j9817) (set! j10212@j9823@j9818 j9823@j9818) (set! j10211@j9821@j9816 j9821@j9816) (set! j10210@j9814@&i/o-write-rcd j9814@&i/o-write-rcd) (set! j10209@j9812@&i/o-write-rtd j9812@&i/o-write-rtd) (set! j10208@j9810@i/o-write-error? j9810@i/o-write-error?) (set! j10207@j9808@make-i/o-write-error j9808@make-i/o-write-error) (set! j10206@j9806@p? j9806@p?) (set! j10205@j9803@j9795 j9803@j9795) (set! j10204@j9801@j9796 j9801@j9796) (set! j10203@j9799@j9794 j9799@j9794) (set! j10202@j9793@&i/o-read-rcd j9793@&i/o-read-rcd) (set! j10201@j9791@&i/o-read-rtd j9791@&i/o-read-rtd) (set! j10200@j9789@i/o-read-error? j9789@i/o-read-error?) (set! j10199@j9787@make-i/o-read-error j9787@make-i/o-read-error) (set! j10198@j9785@p? j9785@p?) (set! j10197@j9782@j9774 j9782@j9774) (set! j10196@j9780@j9775 j9780@j9775) (set! j10195@j9778@j9773 j9778@j9773) (set! j10194@j9772@&i/o-rcd j9772@&i/o-rcd) (set! j10193@j9770@&i/o-rtd j9770@&i/o-rtd) (set! j10192@j9768@i/o-error? j9768@i/o-error?) (set! j10191@j9766@make-i/o-error j9766@make-i/o-error) (set! j10190@j9764@p? j9764@p?) (set! j10189@j9761@j9753 j9761@j9753) (set! j10188@j9759@j9754 j9759@j9754) (set! j10187@j9757@j9752 j9757@j9752) (set! j10186@j9751@&undefined-rcd j9751@&undefined-rcd) (set! j10185@j9749@&undefined-rtd j9749@&undefined-rtd) (set! j10184@j9747@undefined-violation? j9747@undefined-violation?) (set! j10183@j9745@make-undefined-violation j9745@make-undefined-violation) (set! j10182@j9743@p? j9743@p?) (set! j10181@j9740@j9732 j9740@j9732) (set! j10180@j9738@j9733 j9738@j9733) (set! j10179@j9736@j9731 j9736@j9731) (set! j10178@j9730@&syntax-rcd j9730@&syntax-rcd) (set! j10177@j9728@&syntax-rtd j9728@&syntax-rtd) (set! j10176@j9726@syntax-violation-subform j9726@syntax-violation-subform) (set! j10175@j9724@syntax-violation-form j9724@syntax-violation-form) (set! j10174@j9722@syntax-violation? j9722@syntax-violation?) (set! j10173@j9720@j9701@syntax-violation-subform j9720@j9701@syntax-violation-subform) (set! j10172@j9718@j9700@syntax-violation-form j9718@j9700@syntax-violation-form) (set! j10171@j9716@make-syntax-violation j9716@make-syntax-violation) (set! j10170@j9714@p? j9714@p?) (set! j10169@j9711@j9703 j9711@j9703) (set! j10168@j9709@j9704 j9709@j9704) (set! j10167@j9707@j9702 j9707@j9702) (set! j10166@j9699@&lexical-rcd j9699@&lexical-rcd) (set! j10165@j9697@&lexical-rtd j9697@&lexical-rtd) (set! j10164@j9695@lexical-violation? j9695@lexical-violation?) (set! j10163@j9693@make-lexical-violation j9693@make-lexical-violation) (set! j10162@j9691@p? j9691@p?) (set! j10161@j9688@j9680 j9688@j9680) (set! j10160@j9686@j9681 j9686@j9681) (set! j10159@j9684@j9679 j9684@j9679) (set! j10158@j9678@&implementation-restriction-rcd j9678@&implementation-restriction-rcd) (set! j10157@j9676@&implementation-restriction-rtd j9676@&implementation-restriction-rtd) (set! j10156@j9674@implementation-restriction-violation? j9674@implementation-restriction-violation?) (set! j10155@j9672@make-implementation-restriction-violation j9672@make-implementation-restriction-violation) (set! j10154@j9670@p? j9670@p?) (set! j10153@j9667@j9659 j9667@j9659) (set! j10152@j9665@j9660 j9665@j9660) (set! j10151@j9663@j9658 j9663@j9658) (set! j10150@j9657@&non-continuable-rcd j9657@&non-continuable-rcd) (set! j10149@j9655@&non-continuable-rtd j9655@&non-continuable-rtd) (set! j10148@j9653@non-continuable-violation? j9653@non-continuable-violation?) (set! j10147@j9651@make-non-continuable-violation j9651@make-non-continuable-violation) (set! j10146@j9649@p? j9649@p?) (set! j10145@j9646@j9638 j9646@j9638) (set! j10144@j9644@j9639 j9644@j9639) (set! j10143@j9642@j9637 j9642@j9637) (set! j10142@j9636@&who-rcd j9636@&who-rcd) (set! j10141@j9634@&who-rtd j9634@&who-rtd) (set! j10140@j9632@condition-who j9632@condition-who) (set! j10139@j9630@who-condition? j9630@who-condition?) (set! j10138@j9628@j9611@condition-who j9628@j9611@condition-who) (set! j10137@j9626@make-who-condition j9626@make-who-condition) (set! j10136@j9624@p? j9624@p?) (set! j10135@j9621@j9613 j9621@j9613) (set! j10134@j9619@j9614 j9619@j9614) (set! j10133@j9617@j9612 j9617@j9612) (set! j10132@j9610@&irritants-rcd j9610@&irritants-rcd) (set! j10131@j9608@&irritants-rtd j9608@&irritants-rtd) (set! j10130@j9606@condition-irritants j9606@condition-irritants) (set! j10129@j9604@irritants-condition? j9604@irritants-condition?) (set! j10128@j9602@j9585@condition-irritants j9602@j9585@condition-irritants) (set! j10127@j9600@make-irritants-condition j9600@make-irritants-condition) (set! j10126@j9598@p? j9598@p?) (set! j10125@j9595@j9587 j9595@j9587) (set! j10124@j9593@j9588 j9593@j9588) (set! j10123@j9591@j9586 j9591@j9586) (set! j10122@j9584@&assertion-rcd j9584@&assertion-rcd) (set! j10121@j9582@&assertion-rtd j9582@&assertion-rtd) (set! j10120@j9580@assertion-violation? j9580@assertion-violation?) (set! j10119@j9578@make-assertion-violation j9578@make-assertion-violation) (set! j10118@j9576@p? j9576@p?) (set! j10117@j9573@j9565 j9573@j9565) (set! j10116@j9571@j9566 j9571@j9566) (set! j10115@j9569@j9564 j9569@j9564) (set! j10114@j9563@&violation-rcd j9563@&violation-rcd) (set! j10113@j9561@&violation-rtd j9561@&violation-rtd) (set! j10112@j9559@violation? j9559@violation?) (set! j10111@j9557@make-violation j9557@make-violation) (set! j10110@j9555@p? j9555@p?) (set! j10109@j9552@j9544 j9552@j9544) (set! j10108@j9550@j9545 j9550@j9545) (set! j10107@j9548@j9543 j9548@j9543) (set! j10106@j9542@&error-rcd j9542@&error-rcd) (set! j10105@j9540@&error-rtd j9540@&error-rtd) (set! j10104@j9538@error? j9538@error?) (set! j10103@j9536@make-error j9536@make-error) (set! j10102@j9534@p? j9534@p?) (set! j10101@j9531@j9523 j9531@j9523) (set! j10100@j9529@j9524 j9529@j9524) (set! j10099@j9527@j9522 j9527@j9522) (set! j10098@j9521@&serious-rcd j9521@&serious-rcd) (set! j10097@j9519@&serious-rtd j9519@&serious-rtd) (set! j10096@j9517@serious-condition? j9517@serious-condition?) (set! j10095@j9515@make-serious-condition j9515@make-serious-condition) (set! j10094@j9513@p? j9513@p?) (set! j10093@j9510@j9502 j9510@j9502) (set! j10092@j9508@j9503 j9508@j9503) (set! j10091@j9506@j9501 j9506@j9501) (set! j10090@j9500@&warning-rcd j9500@&warning-rcd) (set! j10089@j9498@&warning-rtd j9498@&warning-rtd) (set! j10088@j9496@warning? j9496@warning?) (set! j10087@j9494@make-warning j9494@make-warning) (set! j10086@j9492@p? j9492@p?) (set! j10085@j9489@j9481 j9489@j9481) (set! j10084@j9487@j9482 j9487@j9482) (set! j10083@j9485@j9480 j9485@j9480) (set! j10082@j9479@&message-rcd j9479@&message-rcd) (set! j10081@j9477@&message-rtd j9477@&message-rtd) (set! j10080@j9475@condition-message j9475@condition-message) (set! j10079@j9473@message-condition? j9473@message-condition?) (set! j10078@j9471@j9454@condition-message j9471@j9454@condition-message) (set! j10077@j9469@make-message-condition j9469@make-message-condition) (set! j10076@j9467@p? j9467@p?) (set! j10075@j9464@j9456 j9464@j9456) (set! j10074@j9462@j9457 j9462@j9457) (set! j10073@j9460@j9455 j9460@j9455) (set! j10072@j9388@&condition-rcd j9388@&condition-rcd) (set! j10071@j9386@&condition-rtd j9386@&condition-rtd) (set! j10070@j9384@make-&condition j9384@make-&condition) (set! j10069@j9382@&condition? j9382@&condition?) (set! j10068@j9379@j9371 j9379@j9371) (set! j10067@j9377@j9372 j9377@j9372) (set! j10066@j9375@j9370 j9375@j9370)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (j1244@j1169@current-primitive-locations (lambda (j11320@x) ((lambda (j11322@t) (if j11322@t (cdr j11322@t) '#f)) (assq j11320@x '((&no-nans-rcd . j10306@j10065@&no-nans-rcd) (&no-nans-rtd . j10305@j10063@&no-nans-rtd) (&no-infinities-rcd . j10298@j10044@&no-infinities-rcd) (&no-infinities-rtd . j10297@j10042@&no-infinities-rtd) (&i/o-encoding-rcd . j10290@j10023@&i/o-encoding-rcd) (&i/o-encoding-rtd . j10289@j10021@&i/o-encoding-rtd) (&i/o-decoding-rcd . j10280@j9997@&i/o-decoding-rcd) (&i/o-decoding-rtd . j10279@j9995@&i/o-decoding-rtd) (&i/o-port-rcd . j10272@j9976@&i/o-port-rcd) (&i/o-port-rtd . j10271@j9974@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . j10262@j9950@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . j10261@j9948@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . j10254@j9929@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . j10253@j9927@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . j10246@j9908@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . j10245@j9906@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . j10238@j9887@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . j10237@j9885@&i/o-file-protection-rtd) (&i/o-filename-rcd . j10230@j9866@&i/o-filename-rcd) (&i/o-filename-rtd . j10229@j9864@&i/o-filename-rtd) (&i/o-invalid-position-rcd . j10220@j9840@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . j10219@j9838@&i/o-invalid-position-rtd) (&i/o-write-rcd . j10210@j9814@&i/o-write-rcd) (&i/o-write-rtd . j10209@j9812@&i/o-write-rtd) (&i/o-read-rcd . j10202@j9793@&i/o-read-rcd) (&i/o-read-rtd . j10201@j9791@&i/o-read-rtd) (&i/o-rcd . j10194@j9772@&i/o-rcd) (&i/o-rtd . j10193@j9770@&i/o-rtd) (&undefined-rcd . j10186@j9751@&undefined-rcd) (&undefined-rtd . j10185@j9749@&undefined-rtd) (&syntax-rcd . j10178@j9730@&syntax-rcd) (&syntax-rtd . j10177@j9728@&syntax-rtd) (&lexical-rcd . j10166@j9699@&lexical-rcd) (&lexical-rtd . j10165@j9697@&lexical-rtd) (&implementation-restriction-rcd . j10158@j9678@&implementation-restriction-rcd) (&implementation-restriction-rtd . j10157@j9676@&implementation-restriction-rtd) (&non-continuable-rcd . j10150@j9657@&non-continuable-rcd) (&non-continuable-rtd . j10149@j9655@&non-continuable-rtd) (&who-rcd . j10142@j9636@&who-rcd) (&who-rtd . j10141@j9634@&who-rtd) (&irritants-rcd . j10132@j9610@&irritants-rcd) (&irritants-rtd . j10131@j9608@&irritants-rtd) (&assertion-rcd . j10122@j9584@&assertion-rcd) (&assertion-rtd . j10121@j9582@&assertion-rtd) (&violation-rcd . j10114@j9563@&violation-rcd) (&violation-rtd . j10113@j9561@&violation-rtd) (&error-rcd . j10106@j9542@&error-rcd) (&error-rtd . j10105@j9540@&error-rtd) (&serious-rcd . j10098@j9521@&serious-rcd) (&serious-rtd . j10097@j9519@&serious-rtd) (&warning-rcd . j10090@j9500@&warning-rcd) (&warning-rtd . j10089@j9498@&warning-rtd) (&message-rcd . j10082@j9479@&message-rcd) (&message-rtd . j10081@j9477@&message-rtd) (&condition-rcd . j10072@j9388@&condition-rcd) (&condition-rtd . j10071@j9386@&condition-rtd) (syntax-error . j9356@j2991@syntax-error) (syntax-dispatch . j9249@j2762@syntax-dispatch) (gensym . j1149@j913@gensym) (load . j10569@j10334@load) (interaction-environment . j9364@j3007@interaction-environment) (library-path . j1773@j1410@library-path) (make-parameter . j1163@j941@make-parameter) (make-variable-transformer . j9183@j2321@make-variable-transformer) (identifier? . j9359@j2997@identifier?) (generate-temporaries . j9349@j2977@generate-temporaries) (free-identifier=? . j9350@j2979@free-identifier=?) (syntax->datum . j9361@j3001@syntax->datum) (datum->syntax . j9360@j2999@datum->syntax) (bound-identifier=? . j9351@j2981@bound-identifier=?) (make-i/o-write-error . j10207@j9808@make-i/o-write-error) (make-i/o-read-error . j10199@j9787@make-i/o-read-error) (make-i/o-port-error . j10267@j9966@make-i/o-port-error) (make-i/o-invalid-position-error . j10215@j9830@make-i/o-invalid-position-error) (make-i/o-filename-error . j10225@j9856@make-i/o-filename-error) (make-i/o-file-protection-error . j10235@j9881@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . j10243@j9902@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . j10259@j9944@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . j10251@j9923@make-i/o-file-already-exists-error) (make-i/o-error . j10191@j9766@make-i/o-error) (make-i/o-encoding-error . j10285@j10013@make-i/o-encoding-error) (make-i/o-decoding-error . j10277@j9991@make-i/o-decoding-error) (i/o-write-error? . j10208@j9810@i/o-write-error?) (i/o-read-error? . j10200@j9789@i/o-read-error?) (i/o-port-error? . j10269@j9970@i/o-port-error?) (i/o-invalid-position-error? . j10217@j9834@i/o-invalid-position-error?) (i/o-filename-error? . j10227@j9860@i/o-filename-error?) (i/o-file-protection-error? . j10236@j9883@i/o-file-protection-error?) (i/o-file-is-read-only-error? . j10244@j9904@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . j10260@j9946@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . j10252@j9925@i/o-file-already-exists-error?) (i/o-error? . j10192@j9768@i/o-error?) (i/o-error-position . j10218@j9836@i/o-error-position) (i/o-error-port . j10270@j9972@i/o-error-port) (i/o-error-filename . j10228@j9862@i/o-error-filename) (i/o-encoding-error? . j10287@j10017@i/o-encoding-error?) (i/o-encoding-error-char . j10288@j10019@i/o-encoding-error-char) (i/o-decoding-error? . j10278@j9993@i/o-decoding-error?) (scheme-report-environment . j9340@j2959@scheme-report-environment) (null-environment . j9339@j2957@null-environment) (command-line . j10566@j10328@command-line) (eval . j9342@j2963@eval) (environment . j9338@j2955@environment) (who-condition? . j10139@j9630@who-condition?) (warning? . j10088@j9496@warning?) (violation? . j10112@j9559@violation?) (undefined-violation? . j10184@j9747@undefined-violation?) (syntax-violation? . j10174@j9722@syntax-violation?) (syntax-violation-subform . j10176@j9726@syntax-violation-subform) (syntax-violation-form . j10175@j9724@syntax-violation-form) (syntax-violation . j9358@j2995@syntax-violation) (serious-condition? . j10096@j9517@serious-condition?) (non-continuable-violation? . j10148@j9653@non-continuable-violation?) (message-condition? . j10079@j9473@message-condition?) (make-who-condition . j10137@j9626@make-who-condition) (make-warning . j10087@j9494@make-warning) (make-violation . j10111@j9557@make-violation) (make-undefined-violation . j10183@j9745@make-undefined-violation) (make-syntax-violation . j10171@j9716@make-syntax-violation) (make-serious-condition . j10095@j9515@make-serious-condition) (make-non-continuable-violation . j10147@j9651@make-non-continuable-violation) (make-message-condition . j10077@j9469@make-message-condition) (make-lexical-violation . j10163@j9693@make-lexical-violation) (make-irritants-condition . j10127@j9600@make-irritants-condition) (make-implementation-restriction-violation . j10155@j9672@make-implementation-restriction-violation) (make-error . j10103@j9536@make-error) (make-assertion-violation . j10119@j9578@make-assertion-violation) (lexical-violation? . j10164@j9695@lexical-violation?) (irritants-condition? . j10129@j9604@irritants-condition?) (implementation-restriction-violation? . j10156@j9674@implementation-restriction-violation?) (error? . j10104@j9538@error?) (condition-who . j10140@j9632@condition-who) (condition-message . j10080@j9475@condition-message) (condition-irritants . j10130@j9606@condition-irritants) (assertion-violation? . j10120@j9580@assertion-violation?) (no-nans-violation? . j10304@j10061@no-nans-violation?) (no-infinities-violation? . j10296@j10040@no-infinities-violation?) (make-no-nans-violation . j10303@j10059@make-no-nans-violation) (make-no-infinities-violation . j10295@j10038@make-no-infinities-violation)))))) (j1789@j1442@install-library 'j11285 '(mosh interaction) '() '() '() '() '((alist->eq-hash-table . j11275) (format . j11272) (string-split . j11261) (call-process . j11255) (set-current-directory! . j11251) (expand-path . j11250) (current-directory . j11249) (%spawn . j11248) (%waitpid . j11247) (%ffi-supported? . j11246) (%ffi-pointer-ref . j11245) (%ffi-pointer->string . j11244) (%ffi-call->string-or-zero . j11243) (%ffi-call->double . j11242) (%ffi-call->void* . j11241) (%ffi-call->void . j11240) (%ffi-call->int . j11239) (%ffi-lookup . j11238) (%ffi-open . j11237) (%fork . j11236) (%pipe . j11235) (p . j11234) (string-upcase . j11215) (string-titlecase . j11214) (string-normalize-nfkd . j11213) (string-normalize-nfkc . j11212) (string-normalize-nfd . j11211) (string-normalize-nfc . j11210) (string-foldcase . j11209) (string-downcase . j11208) (string-ci>? . j11207) (string-ci>=? . j11206) (string-ci=? . j11205) (string-ci<? . j11204) (string-ci<=? . j11203) (char-whitespace? . j11202) (char-upper-case? . j11201) (char-title-case? . j11200) (char-numeric? . j11199) (char-lower-case? . j11198) (char-general-category . j11197) (char-upcase . j11196) (char-titlecase . j11195) (char-foldcase . j11194) (char-downcase . j11193) (char-ci>? . j11192) (char-ci>=? . j11191) (char-ci=? . j11190) (char-ci<? . j11189) (char-ci<=? . j11188) (char-alphabetic? . j11187) (make-variable-transformer . j2320) (identifier? . j2996) (generate-temporaries . j2976) (free-identifier=? . j2978) (syntax->datum . j3000) (datum->syntax . j2998) (bound-identifier=? . j2980) (record-type-descriptor? . j11186) (record-predicate . j11185) (record-mutator . j11184) (record-constructor . j11183) (record-accessor . j11182) (make-record-type-descriptor . j11181) (make-record-constructor-descriptor . j11180) (record? . j11179) (record-type-uid . j11178) (record-type-sealed? . j11177) (record-type-parent . j11176) (record-type-opaque? . j11175) (record-type-name . j11174) (record-type-generative? . j11173) (record-type-field-names . j11172) (record-rtd . j11171) (record-field-mutable? . j11170) (delete-file . j11169) (file-exists? . j11168) (vector-sort! . j11167) (vector-sort . j11166) (list-sort . j11165) (symbol-hash . j11164) (string-ci-hash . j11163) (string-hash . j11162) (equal-hash . j11161) (hashtable-equivalence-function . j11160) (make-hashtable . j11159) (hashtable-hash-function . j11158) (make-eqv-hashtable . j11157) (make-eq-hashtable . j11156) (hashtable? . j11155) (hashtable-update! . j11154) (hashtable-size . j11153) (hashtable-set! . j11152) (hashtable-ref . j11151) (hashtable-mutable? . j11150) (hashtable-keys . j11149) (hashtable-entries . j11148) (hashtable-delete! . j11147) (hashtable-copy . j11146) (hashtable-contains? . j11145) (hashtable-clear! . j11144) (call-with-output-file . j11143) (call-with-input-file . j11142) (write-char . j11141) (write . j11140) (with-output-to-file . j11139) (with-input-from-file . j11138) (read-char . j11137) (read . j11136) (peek-char . j11135) (open-output-file . j11134) (open-input-file . j11133) (newline . j11132) (display . j11131) (close-output-port . j11130) (close-input-port . j11129) (eof-object? . j11128) (eof-object . j11127) (current-error-port . j11126) (current-output-port . j11125) (current-input-port . j11124) (output-port? . j11123) (input-port? . j11122) (utf-8-codec . j11121) (utf-16-codec . j11120) (transcoder-error-handling-mode . j11119) (transcoder-eol-style . j11118) (transcoder-codec . j11117) (transcoded-port . j11116) (textual-port? . j11115) (string->bytevector . j11114) (standard-output-port . j11113) (standard-input-port . j11112) (standard-error-port . j11111) (set-port-position! . j11110) (put-u8 . j11109) (put-string . j11108) (put-datum . j11107) (put-char . j11106) (put-bytevector . j11105) (port? . j11104) (port-transcoder . j11103) (port-position . j11102) (port-has-set-port-position!? . j11101) (port-has-port-position? . j11100) (port-eof? . j11099) (output-port-buffer-mode . j11098) (open-string-output-port . j11097) (open-string-input-port . j11096) (open-file-output-port . j11095) (open-file-input/output-port . j11094) (open-file-input-port . j11093) (open-bytevector-output-port . j11092) (open-bytevector-input-port . j11091) (native-transcoder . j11090) (native-eol-style . j11089) (make-transcoder . j11088) (latin-1-codec . j11087) (make-i/o-write-error . j9807) (make-i/o-read-error . j9786) (make-i/o-port-error . j9965) (make-i/o-invalid-position-error . j9829) (make-i/o-filename-error . j9855) (make-i/o-file-protection-error . j9880) (make-i/o-file-is-read-only-error . j9901) (make-i/o-file-does-not-exist-error . j9943) (make-i/o-file-already-exists-error . j9922) (make-i/o-error . j9765) (make-i/o-encoding-error . j10012) (make-i/o-decoding-error . j9990) (make-custom-textual-output-port . j11086) (make-custom-textual-input/output-port . j11085) (make-custom-textual-input-port . j11084) (make-custom-binary-output-port . j11083) (make-custom-binary-input/output-port . j11082) (make-custom-binary-input-port . j11081) (make-bytevector . j11080) (lookahead-u8 . j11079) (lookahead-char . j11078) (i/o-write-error? . j9809) (i/o-read-error? . j9788) (i/o-port-error? . j9969) (i/o-invalid-position-error? . j9833) (i/o-filename-error? . j9859) (i/o-file-protection-error? . j9882) (i/o-file-is-read-only-error? . j9903) (i/o-file-does-not-exist-error? . j9945) (i/o-file-already-exists-error? . j9924) (i/o-error? . j9767) (i/o-error-position . j9835) (i/o-error-port . j9971) (i/o-error-filename . j9861) (i/o-encoding-error? . j10016) (i/o-encoding-error-char . j10018) (i/o-decoding-error? . j9992) (get-u8 . j11077) (get-string-n! . j11076) (get-string-n . j11075) (get-string-all . j11074) (get-line . j11073) (get-datum . j11072) (get-char . j11071) (get-bytevector-some . j11070) (get-bytevector-n! . j11069) (get-bytevector-n . j11068) (get-bytevector-all . j11067) (flush-output-port . j11066) (close-port . j11065) (exit . j11057) (command-line . j10327) (string-fill! . j11056) (string-set! . j11055) (set-cdr! . j11054) (set-car! . j11053) (remove . j11052) (remv . j11051) (remp . j11050) (remq . j11049) (partition . j11048) (memv . j11047) (memq . j11046) (memp . j11045) (member . j11044) (exists . j11043) (for-all . j11042) (fold-right . j11041) (fold-left . j11040) (find . j11039) (filter . j11038) (cons* . j11037) (assv . j11036) (assq . j11035) (assp . j11034) (assoc . j11033) (call-with-string-output-port . j11032) (call-with-port . j11031) (call-with-bytevector-output-port . j11030) (bytevector->string . j11029) (buffer-mode? . j11028) (binary-port? . j11027) (with-exception-handler . j11026) (raise-continuable . j11025) (raise . j11024) (eval . j2962) (environment . j2954) (make-enumeration . j11023) (enum-set=? . j11022) (enum-set-universe . j11021) (enum-set-union . j11020) (enum-set-subset? . j11019) (enum-set-projection . j11018) (enum-set-member? . j11017) (enum-set-intersection . j11016) (enum-set-indexer . j11015) (enum-set-difference . j11014) (enum-set-constructor . j11013) (enum-set-complement . j11012) (enum-set->list . j11011) (who-condition? . j9629) (warning? . j9495) (violation? . j9558) (undefined-violation? . j9746) (syntax-violation? . j9721) (syntax-violation-subform . j9725) (syntax-violation-form . j9723) (syntax-violation . j2994) (simple-conditions . j11010) (serious-condition? . j9516) (non-continuable-violation? . j9652) (message-condition? . j9472) (make-who-condition . j9625) (make-warning . j9493) (make-violation . j9556) (make-undefined-violation . j9744) (make-syntax-violation . j9715) (make-serious-condition . j9514) (make-non-continuable-violation . j9650) (make-message-condition . j9468) (make-lexical-violation . j9692) (make-irritants-condition . j9599) (make-implementation-restriction-violation . j9671) (make-error . j9535) (make-assertion-violation . j9577) (lexical-violation? . j9694) (irritants-condition? . j9603) (implementation-restriction-violation? . j9673) (error? . j9537) (condition-who . j9631) (condition-predicate . j11009) (condition-message . j9474) (condition-irritants . j9605) (condition-accessor . j11008) (condition . j11007) (assertion-violation? . j9579) (condition? . j11006) (utf32->string . j11005) (utf16->string . j11004) (utf8->string . j11003) (uint-list->bytevector . j11002) (u8-list->bytevector . j11001) (string->utf8 . j11000) (string->utf32 . j10999) (string->utf16 . j10998) (sint-list->bytevector . j10997) (native-endianness . j10996) (bytevector? . j10995) (bytevector=? . j10994) (bytevector-uint-set! . j10993) (bytevector-uint-ref . j10992) (bytevector-u8-set! . j10991) (bytevector-u8-ref . j10990) (bytevector-u64-set! . j10989) (bytevector-u64-ref . j10988) (bytevector-u64-native-set! . j10987) (bytevector-u64-native-ref . j10986) (bytevector-u32-set! . j10985) (bytevector-u32-ref . j10984) (bytevector-u32-native-set! . j10983) (bytevector-u32-native-ref . j10982) (bytevector-u16-set! . j10981) (bytevector-u16-ref . j10980) (bytevector-u16-native-set! . j10979) (bytevector-u16-native-ref . j10978) (bytevector-sint-set! . j10977) (bytevector-sint-ref . j10976) (bytevector-s8-set! . j10975) (bytevector-s8-ref . j10974) (bytevector-s64-set! . j10973) (bytevector-s64-ref . j10972) (bytevector-s64-native-set! . j10971) (bytevector-s64-native-ref . j10970) (bytevector-s32-set! . j10969) (bytevector-s32-ref . j10968) (bytevector-s32-native-set! . j10967) (bytevector-s32-native-ref . j10966) (bytevector-s16-set! . j10965) (bytevector-s16-ref . j10964) (bytevector-s16-native-set! . j10963) (bytevector-s16-native-ref . j10962) (bytevector-length . j10961) (bytevector-ieee-single-ref . j10960) (bytevector-ieee-single-set! . j10959) (bytevector-ieee-single-native-set! . j10958) (bytevector-ieee-single-native-ref . j10957) (bytevector-ieee-double-set! . j10956) (bytevector-ieee-double-ref . j10955) (bytevector-ieee-double-native-set! . j10954) (bytevector-ieee-double-native-ref . j10953) (bytevector-fill! . j10952) (bytevector-copy! . j10951) (bytevector-copy . j10950) (bytevector->uint-list . j10949) (bytevector->u8-list . j10948) (bytevector->sint-list . j10947) (no-nans-violation? . j10060) (no-infinities-violation? . j10039) (make-no-nans-violation . j10058) (make-no-infinities-violation . j10037) (real->flonum . j10946) (flzero? . j10945) (fltruncate . j10944) (fltan . j10943) (flsqrt . j10942) (flsin . j10941) (flround . j10940) (flpositive? . j10939) (flonum? . j10938) (flodd? . j10937) (flnumerator . j10936) (flnegative? . j10935) (flnan? . j10934) (flmod0 . j10933) (flmod . j10932) (flmin . j10931) (flmax . j10930) (fllog . j10929) (flinteger? . j10928) (flinfinite? . j10927) (flfloor . j10926) (flfinite? . j10925) (flexpt . j10924) (flexp . j10923) (fleven? . j10922) (fldiv0-and-mod0 . j10921) (fldiv0 . j10920) (fldiv-and-mod . j10919) (fldiv . j10918) (fldenominator . j10917) (flcos . j10916) (flceiling . j10915) (flatan . j10914) (flasin . j10913) (flacos . j10912) (flabs . j10911) (fl>? . j10910) (fl>=? . j10909) (fl=? . j10908) (fl<? . j10907) (fl<=? . j10906) (fl/ . j10905) (fl- . j10904) (fl+ . j10903) (fl* . j10902) (fixnum->flonum . j10901) (fxzero? . j10900) (fxxor . j10899) (fxrotate-bit-field . j10898) (fxreverse-bit-field . j10897) (fxpositive? . j10896) (fxodd? . j10895) (fxnot . j10894) (fxnegative? . j10893) (fxmod0 . j10892) (fxmod . j10891) (fxmin . j10890) (fxmax . j10889) (fxlength . j10888) (fxior . j10887) (fxif . j10886) (fxfirst-bit-set . j10885) (fxeven? . j10884) (fxdiv0-and-mod0 . j10883) (fxdiv0 . j10882) (fxdiv-and-mod . j10881) (fxdiv . j10880) (fxcopy-bit-field . j10879) (fxcopy-bit . j10878) (fxbit-set? . j10877) (fxbit-field . j10876) (fxbit-count . j10875) (fxarithmetic-shift-right . j10874) (fxarithmetic-shift-left . j10873) (fxarithmetic-shift . j10872) (fxand . j10871) (fx>? . j10870) (fx>=? . j10869) (fx=? . j10868) (fx<? . j10867) (fx<=? . j10866) (fx-/carry . j10865) (fx- . j10864) (fx+/carry . j10863) (fx+ . j10862) (fx*/carry . j10861) (fx* . j10860) (greatest-fixnum . j10859) (least-fixnum . j10858) (fixnum-width . j10857) (fixnum? . j10856) (bitwise-rotate-bit-field . j10855) (bitwise-reverse-bit-field . j10854) (bitwise-length . j10853) (bitwise-if . j10852) (bitwise-first-bit-set . j10851) (bitwise-copy-bit-field . j10850) (bitwise-copy-bit . j10849) (bitwise-bit-set? . j10848) (bitwise-bit-field . j10847) (bitwise-bit-count . j10846) (bitwise-xor . j10845) (bitwise-ior . j10844) (bitwise-and . j10843) (bitwise-not . j10842) (bitwise-arithmetic-shift-right . j10841) (bitwise-arithmetic-shift-left . j10840) (bitwise-arithmetic-shift . j10839) (zero? . j10838) (vector? . j10837) (vector-set! . j10836) (vector-ref . j10835) (vector-map . j10834) (vector-length . j10833) (vector-for-each . j10832) (vector-fill! . j10831) (vector->list . j10830) (vector . j10829) (values . j10828) (truncate . j10827) (tan . j10826) (symbol? . j10825) (symbol=? . j10824) (symbol->string . j10823) (substring . j10822) (string? . j10821) (string>? . j10820) (string>=? . j10819) (string=? . j10818) (string<? . j10817) (string<=? . j10816) (string-ref . j10815) (string-length . j10814) (string-for-each . j10813) (string-copy . j10812) (string-append . j10811) (string->symbol . j10810) (string->number . j10809) (string->list . j10808) (string . j10807) (sqrt . j10806) (sin . j10805) (round . j10804) (reverse . j10803) (real? . j10802) (real-valued? . j10801) (real-part . j10800) (rationalize . j10799) (rational? . j10798) (rational-valued? . j10797) (procedure? . j10796) (positive? . j10795) (pair? . j10794) (odd? . j10793) (numerator . j10792) (number? . j10791) (number->string . j10790) (null? . j10789) (not . j10788) (negative? . j10787) (nan? . j10786) (min . j10785) (max . j10784) (map . j10783) (make-vector . j10782) (make-string . j10781) (make-rectangular . j10780) (make-polar . j10779) (magnitude . j10778) (log . j10777) (list? . j10776) (list-tail . j10775) (list-ref . j10774) (list->vector . j10773) (list->string . j10772) (list . j10771) (length . j10770) (lcm . j10769) (integer? . j10768) (integer-valued? . j10767) (integer->char . j10766) (infinite? . j10765) (inexact? . j10764) (inexact . j10763) (imag-part . j10762) (gcd . j10761) (for-each . j10760) (floor . j10759) (finite? . j10758) (expt . j10757) (exp . j10756) (exact? . j10755) (exact-integer-sqrt . j10754) (exact . j10753) (even? . j10752) (error . j10751) (eqv? . j10750) (equal? . j10749) (eq? . j10748) (dynamic-wind . j10747) (div0-and-mod0 . j10746) (mod0 . j10745) (div0 . j10744) (div-and-mod . j10743) (mod . j10742) (div . j10741) (denominator . j10740) (cos . j10739) (cons . j10738) (complex? . j10737) (char? . j10736) (char>? . j10735) (char>=? . j10734) (char=? . j10733) (char<? . j10732) (char<=? . j10731) (char->integer . j10730) (ceiling . j10729) (call-with-values . j10728) (call/cc . j10727) (call-with-current-continuation . j10726) (cddddr . j10725) (cdddar . j10724) (cddadr . j10723) (cddaar . j10722) (cdaddr . j10721) (cdadar . j10720) (cdaadr . j10719) (cdaaar . j10718) (cadddr . j10717) (caddar . j10716) (cadadr . j10715) (cadaar . j10714) (caaddr . j10713) (caadar . j10712) (caaadr . j10711) (caaaar . j10710) (cdddr . j10709) (cddar . j10708) (cdadr . j10707) (cdaar . j10706) (caddr . j10705) (cadar . j10704) (caadr . j10703) (caaar . j10702) (cddr . j10701) (cdar . j10700) (cadr . j10699) (caar . j10698) (cdr . j10697) (car . j10696) (boolean? . j10695) (boolean=? . j10694) (atan . j10693) (assertion-violation . j10692) (asin . j10691) (apply . j10690) (append . j10689) (angle . j10688) (acos . j10687) (abs . j10686) (/ . j10685) (* . j10684) (- . j10683) (+ . j10682) (>= . j10681) (> . j10680) (= . j10679) (<= . j10678) (< . j10677) (library . j10676) (&no-nans . j10675) (&no-infinities . j10674) (&i/o-encoding . j10673) (&i/o-decoding . j10672) (&i/o-port . j10671) (&i/o-file-does-not-exist . j10670) (&i/o-file-already-exists . j10669) (&i/o-file-is-read-only . j10668) (&i/o-file-protection . j10667) (&i/o-filename . j10666) (&i/o-invalid-position . j10665) (&i/o-write . j10664) (&i/o-read . j10663) (&i/o . j10662) (&undefined . j10661) (&syntax . j10660) (&lexical . j10659) (&implementation-restriction . j10658) (&non-continuable . j10657) (&who . j10656) (&irritants . j10655) (&assertion . j10654) (&violation . j10653) (&error . j10652) (&serious . j10651) (&warning . j10650) (&message . j10649) (&condition . j10648) (define-condition-type . j10647) (define-enumeration . j10646) (define-record-type . j10645) (parent-rtd . j10644) (nongenerative . j10643) (opaque . j10642) (sealed . j10641) (protocol . j10640) (parent . j10639) (immutable . j10638) (mutable . j10637) (fields . j10636) (error-handling-mode . j10635) (file-options . j10634) (buffer-mode . j10633) (eol-style . j10632) (guard . j10631) (unsyntax-splicing . j10628) (unsyntax . j10627) (unquote-splicing . j10626) (unquote . j10625) (_ . j10624) (else . j10623) (=> . j10622) (... . j10621) (assert . j10620) (endianness . j10619) (do . j10616) (cond . j10615) (let* . j10614) (let . j10613) (let*-values . j10612) (let-values . j10611) (identifier-syntax . j10610) (with-syntax . j10609) (quasisyntax . j10608) (quasiquote . j10607) (syntax-rules . j10606) (include . j10605) (record-constructor-descriptor . j10603) (record-type-descriptor . j10602) (case . j10601) (unless . j10599) (when . j10598) (or . j10597) (and . j10596) (if . j10595) (letrec* . j10594) (letrec . j10593) (case-lambda . j10591) (lambda . j10590) (syntax . j10589) (syntax-case . j10588) (quote . j10587) (letrec-syntax . j10585) (let-syntax . j10584) (set! . j10583) (import . j10582) (begin . j10581) (define-syntax . j10579) (define . j10578)) '() values values '#f '#f '#t '#f) (j1789@j1442@install-library 'j11286 '(psyntax null-environment-5) '() '() '() '() '((make-promise . j11058) (unquote-splicing . j10626) (unquote . j10625) (_ . j10624) (else . j10623) (=> . j10622) (... . j10621) (delay . j10618) (do . j10616) (cond . j10615) (let* . j10614) (let . j10613) (quasiquote . j10607) (syntax-rules . j10606) (case . j10601) (or . j10597) (and . j10596) (if . j10595) (letrec . j10593) (lambda . j10590) (quote . j10587) (letrec-syntax . j10585) (let-syntax . j10584) (set! . j10583) (begin . j10581) (define-syntax . j10579) (define . j10578)) '() values values '#f '#f '#t '#f) (j1789@j1442@install-library 'j11287 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . j11207) (string-ci>=? . j11206) (string-ci=? . j11205) (string-ci<? . j11204) (string-ci<=? . j11203) (char-whitespace? . j11202) (char-upper-case? . j11201) (char-numeric? . j11199) (char-lower-case? . j11198) (char-upcase . j11196) (char-downcase . j11193) (char-ci>? . j11192) (char-ci>=? . j11191) (char-ci=? . j11190) (char-ci<? . j11189) (char-ci<=? . j11188) (char-alphabetic? . j11187) (call-with-output-file . j11143) (call-with-input-file . j11142) (write-char . j11141) (write . j11140) (with-output-to-file . j11139) (with-input-from-file . j11138) (read-char . j11137) (read . j11136) (peek-char . j11135) (open-output-file . j11134) (open-input-file . j11133) (newline . j11132) (display . j11131) (close-output-port . j11130) (close-input-port . j11129) (eof-object . j11127) (current-output-port . j11125) (current-input-port . j11124) (output-port? . j11123) (input-port? . j11122) (scheme-report-environment . j2958) (quotient . j11064) (null-environment . j2956) (remainder . j11063) (modulo . j11062) (inexact->exact . j11061) (force . j11060) (exact->inexact . j11059) (make-promise . j11058) (string-fill! . j11056) (string-set! . j11055) (set-cdr! . j11054) (set-car! . j11053) (memv . j11047) (memq . j11046) (member . j11044) (assv . j11036) (assq . j11035) (assoc . j11033) (eval . j2962) (zero? . j10838) (vector? . j10837) (vector-set! . j10836) (vector-ref . j10835) (vector-length . j10833) (vector-fill! . j10831) (vector->list . j10830) (vector . j10829) (values . j10828) (truncate . j10827) (tan . j10826) (symbol? . j10825) (symbol->string . j10823) (substring . j10822) (string? . j10821) (string>? . j10820) (string>=? . j10819) (string=? . j10818) (string<? . j10817) (string<=? . j10816) (string-ref . j10815) (string-length . j10814) (string-copy . j10812) (string-append . j10811) (string->symbol . j10810) (string->number . j10809) (string->list . j10808) (string . j10807) (sqrt . j10806) (sin . j10805) (round . j10804) (reverse . j10803) (real? . j10802) (real-part . j10800) (rationalize . j10799) (rational? . j10798) (procedure? . j10796) (positive? . j10795) (pair? . j10794) (odd? . j10793) (numerator . j10792) (number? . j10791) (number->string . j10790) (not . j10788) (negative? . j10787) (min . j10785) (max . j10784) (map . j10783) (make-vector . j10782) (make-string . j10781) (make-rectangular . j10780) (make-polar . j10779) (magnitude . j10778) (log . j10777) (list? . j10776) (list-tail . j10775) (list-ref . j10774) (list->vector . j10773) (list->string . j10772) (list . j10771) (length . j10770) (lcm . j10769) (integer? . j10768) (integer->char . j10766) (inexact? . j10764) (imag-part . j10762) (gcd . j10761) (for-each . j10760) (floor . j10759) (expt . j10757) (exp . j10756) (exact? . j10755) (even? . j10752) (eqv? . j10750) (equal? . j10749) (eq? . j10748) (dynamic-wind . j10747) (denominator . j10740) (cos . j10739) (cons . j10738) (complex? . j10737) (char? . j10736) (char>? . j10735) (char>=? . j10734) (char=? . j10733) (char<? . j10732) (char<=? . j10731) (char->integer . j10730) (ceiling . j10729) (call-with-values . j10728) (call-with-current-continuation . j10726) (cddddr . j10725) (cdddar . j10724) (cddadr . j10723) (cddaar . j10722) (cdaddr . j10721) (cdadar . j10720) (cdaadr . j10719) (cdaaar . j10718) (cadddr . j10717) (caddar . j10716) (cadadr . j10715) (cadaar . j10714) (caaddr . j10713) (caadar . j10712) (caaadr . j10711) (caaaar . j10710) (cdddr . j10709) (cddar . j10708) (cdadr . j10707) (cdaar . j10706) (caddr . j10705) (cadar . j10704) (caadr . j10703) (caaar . j10702) (cddr . j10701) (cdar . j10700) (cadr . j10699) (caar . j10698) (cdr . j10697) (car . j10696) (boolean? . j10695) (atan . j10693) (asin . j10691) (apply . j10690) (append . j10689) (angle . j10688) (acos . j10687) (abs . j10686) (/ . j10685) (* . j10684) (- . j10683) (+ . j10682) (>= . j10681) (> . j10680) (= . j10679) (<= . j10678) (< . j10677) (unquote-splicing . j10626) (unquote . j10625) (else . j10623) (=> . j10622) (... . j10621) (delay . j10618) (do . j10616) (cond . j10615) (let* . j10614) (let . j10613) (quasiquote . j10607) (syntax-rules . j10606) (case . j10601) (or . j10597) (and . j10596) (if . j10595) (letrec . j10593) (lambda . j10590) (quote . j10587) (letrec-syntax . j10585) (let-syntax . j10584) (set! . j10583) (begin . j10581) (define-syntax . j10579) (define . j10578)) '() values values '#f '#f '#t '#f) (j1789@j1442@install-library 'j11288 '(psyntax modules) '() '() '() '() '((module . j10580)) '() values values '#f '#f '#t '#f) (j1789@j1442@install-library 'j11289 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (j1789@j1442@install-library 'j11290 '(rnrs) '(6) '() '() '() '((regexp? . j11278) (string-upcase . j11215) (string-titlecase . j11214) (string-normalize-nfkd . j11213) (string-normalize-nfkc . j11212) (string-normalize-nfd . j11211) (string-normalize-nfc . j11210) (string-foldcase . j11209) (string-downcase . j11208) (string-ci>? . j11207) (string-ci>=? . j11206) (string-ci=? . j11205) (string-ci<? . j11204) (string-ci<=? . j11203) (char-whitespace? . j11202) (char-upper-case? . j11201) (char-title-case? . j11200) (char-numeric? . j11199) (char-lower-case? . j11198) (char-general-category . j11197) (char-upcase . j11196) (char-titlecase . j11195) (char-foldcase . j11194) (char-downcase . j11193) (char-ci>? . j11192) (char-ci>=? . j11191) (char-ci=? . j11190) (char-ci<? . j11189) (char-ci<=? . j11188) (char-alphabetic? . j11187) (make-variable-transformer . j2320) (identifier? . j2996) (generate-temporaries . j2976) (free-identifier=? . j2978) (syntax->datum . j3000) (datum->syntax . j2998) (bound-identifier=? . j2980) (record-type-descriptor? . j11186) (record-predicate . j11185) (record-mutator . j11184) (record-constructor . j11183) (record-accessor . j11182) (make-record-type-descriptor . j11181) (make-record-constructor-descriptor . j11180) (record? . j11179) (record-type-uid . j11178) (record-type-sealed? . j11177) (record-type-parent . j11176) (record-type-opaque? . j11175) (record-type-name . j11174) (record-type-generative? . j11173) (record-type-field-names . j11172) (record-rtd . j11171) (record-field-mutable? . j11170) (delete-file . j11169) (file-exists? . j11168) (vector-sort! . j11167) (vector-sort . j11166) (list-sort . j11165) (symbol-hash . j11164) (string-ci-hash . j11163) (string-hash . j11162) (equal-hash . j11161) (hashtable-equivalence-function . j11160) (make-hashtable . j11159) (hashtable-hash-function . j11158) (make-eqv-hashtable . j11157) (make-eq-hashtable . j11156) (hashtable? . j11155) (hashtable-update! . j11154) (hashtable-size . j11153) (hashtable-set! . j11152) (hashtable-ref . j11151) (hashtable-mutable? . j11150) (hashtable-keys . j11149) (hashtable-entries . j11148) (hashtable-delete! . j11147) (hashtable-copy . j11146) (hashtable-contains? . j11145) (hashtable-clear! . j11144) (call-with-output-file . j11143) (call-with-input-file . j11142) (write-char . j11141) (write . j11140) (with-output-to-file . j11139) (with-input-from-file . j11138) (read-char . j11137) (read . j11136) (peek-char . j11135) (open-output-file . j11134) (open-input-file . j11133) (newline . j11132) (display . j11131) (close-output-port . j11130) (close-input-port . j11129) (eof-object? . j11128) (eof-object . j11127) (current-error-port . j11126) (current-output-port . j11125) (current-input-port . j11124) (output-port? . j11123) (input-port? . j11122) (utf-8-codec . j11121) (utf-16-codec . j11120) (transcoder-error-handling-mode . j11119) (transcoder-eol-style . j11118) (transcoder-codec . j11117) (transcoded-port . j11116) (textual-port? . j11115) (string->bytevector . j11114) (standard-output-port . j11113) (standard-input-port . j11112) (standard-error-port . j11111) (set-port-position! . j11110) (put-u8 . j11109) (put-string . j11108) (put-datum . j11107) (put-char . j11106) (put-bytevector . j11105) (port? . j11104) (port-transcoder . j11103) (port-position . j11102) (port-has-set-port-position!? . j11101) (port-has-port-position? . j11100) (port-eof? . j11099) (output-port-buffer-mode . j11098) (open-string-output-port . j11097) (open-string-input-port . j11096) (open-file-output-port . j11095) (open-file-input/output-port . j11094) (open-file-input-port . j11093) (open-bytevector-output-port . j11092) (open-bytevector-input-port . j11091) (native-transcoder . j11090) (native-eol-style . j11089) (make-transcoder . j11088) (latin-1-codec . j11087) (make-i/o-write-error . j9807) (make-i/o-read-error . j9786) (make-i/o-port-error . j9965) (make-i/o-invalid-position-error . j9829) (make-i/o-filename-error . j9855) (make-i/o-file-protection-error . j9880) (make-i/o-file-is-read-only-error . j9901) (make-i/o-file-does-not-exist-error . j9943) (make-i/o-file-already-exists-error . j9922) (make-i/o-error . j9765) (make-i/o-encoding-error . j10012) (make-i/o-decoding-error . j9990) (make-custom-textual-output-port . j11086) (make-custom-textual-input/output-port . j11085) (make-custom-textual-input-port . j11084) (make-custom-binary-output-port . j11083) (make-custom-binary-input/output-port . j11082) (make-custom-binary-input-port . j11081) (make-bytevector . j11080) (lookahead-u8 . j11079) (lookahead-char . j11078) (i/o-write-error? . j9809) (i/o-read-error? . j9788) (i/o-port-error? . j9969) (i/o-invalid-position-error? . j9833) (i/o-filename-error? . j9859) (i/o-file-protection-error? . j9882) (i/o-file-is-read-only-error? . j9903) (i/o-file-does-not-exist-error? . j9945) (i/o-file-already-exists-error? . j9924) (i/o-error? . j9767) (i/o-error-position . j9835) (i/o-error-port . j9971) (i/o-error-filename . j9861) (i/o-encoding-error? . j10016) (i/o-encoding-error-char . j10018) (i/o-decoding-error? . j9992) (get-u8 . j11077) (get-string-n! . j11076) (get-string-n . j11075) (get-string-all . j11074) (get-line . j11073) (get-datum . j11072) (get-char . j11071) (get-bytevector-some . j11070) (get-bytevector-n! . j11069) (get-bytevector-n . j11068) (get-bytevector-all . j11067) (flush-output-port . j11066) (close-port . j11065) (exit . j11057) (command-line . j10327) (remove . j11052) (remv . j11051) (remp . j11050) (remq . j11049) (partition . j11048) (memv . j11047) (memq . j11046) (memp . j11045) (member . j11044) (exists . j11043) (for-all . j11042) (fold-right . j11041) (fold-left . j11040) (find . j11039) (filter . j11038) (cons* . j11037) (assv . j11036) (assq . j11035) (assp . j11034) (assoc . j11033) (call-with-string-output-port . j11032) (call-with-port . j11031) (call-with-bytevector-output-port . j11030) (bytevector->string . j11029) (buffer-mode? . j11028) (binary-port? . j11027) (with-exception-handler . j11026) (raise-continuable . j11025) (raise . j11024) (make-enumeration . j11023) (enum-set=? . j11022) (enum-set-universe . j11021) (enum-set-union . j11020) (enum-set-subset? . j11019) (enum-set-projection . j11018) (enum-set-member? . j11017) (enum-set-intersection . j11016) (enum-set-indexer . j11015) (enum-set-difference . j11014) (enum-set-constructor . j11013) (enum-set-complement . j11012) (enum-set->list . j11011) (who-condition? . j9629) (warning? . j9495) (violation? . j9558) (undefined-violation? . j9746) (syntax-violation? . j9721) (syntax-violation-subform . j9725) (syntax-violation-form . j9723) (syntax-violation . j2994) (simple-conditions . j11010) (serious-condition? . j9516) (non-continuable-violation? . j9652) (message-condition? . j9472) (make-who-condition . j9625) (make-warning . j9493) (make-violation . j9556) (make-undefined-violation . j9744) (make-syntax-violation . j9715) (make-serious-condition . j9514) (make-non-continuable-violation . j9650) (make-message-condition . j9468) (make-lexical-violation . j9692) (make-irritants-condition . j9599) (make-implementation-restriction-violation . j9671) (make-error . j9535) (make-assertion-violation . j9577) (lexical-violation? . j9694) (irritants-condition? . j9603) (implementation-restriction-violation? . j9673) (error? . j9537) (condition-who . j9631) (condition-predicate . j11009) (condition-message . j9474) (condition-irritants . j9605) (condition-accessor . j11008) (condition . j11007) (assertion-violation? . j9579) (condition? . j11006) (utf32->string . j11005) (utf16->string . j11004) (utf8->string . j11003) (uint-list->bytevector . j11002) (u8-list->bytevector . j11001) (string->utf8 . j11000) (string->utf32 . j10999) (string->utf16 . j10998) (sint-list->bytevector . j10997) (native-endianness . j10996) (bytevector? . j10995) (bytevector=? . j10994) (bytevector-uint-set! . j10993) (bytevector-uint-ref . j10992) (bytevector-u8-set! . j10991) (bytevector-u8-ref . j10990) (bytevector-u64-set! . j10989) (bytevector-u64-ref . j10988) (bytevector-u64-native-set! . j10987) (bytevector-u64-native-ref . j10986) (bytevector-u32-set! . j10985) (bytevector-u32-ref . j10984) (bytevector-u32-native-set! . j10983) (bytevector-u32-native-ref . j10982) (bytevector-u16-set! . j10981) (bytevector-u16-ref . j10980) (bytevector-u16-native-set! . j10979) (bytevector-u16-native-ref . j10978) (bytevector-sint-set! . j10977) (bytevector-sint-ref . j10976) (bytevector-s8-set! . j10975) (bytevector-s8-ref . j10974) (bytevector-s64-set! . j10973) (bytevector-s64-ref . j10972) (bytevector-s64-native-set! . j10971) (bytevector-s64-native-ref . j10970) (bytevector-s32-set! . j10969) (bytevector-s32-ref . j10968) (bytevector-s32-native-set! . j10967) (bytevector-s32-native-ref . j10966) (bytevector-s16-set! . j10965) (bytevector-s16-ref . j10964) (bytevector-s16-native-set! . j10963) (bytevector-s16-native-ref . j10962) (bytevector-length . j10961) (bytevector-ieee-single-ref . j10960) (bytevector-ieee-single-set! . j10959) (bytevector-ieee-single-native-set! . j10958) (bytevector-ieee-single-native-ref . j10957) (bytevector-ieee-double-set! . j10956) (bytevector-ieee-double-ref . j10955) (bytevector-ieee-double-native-set! . j10954) (bytevector-ieee-double-native-ref . j10953) (bytevector-fill! . j10952) (bytevector-copy! . j10951) (bytevector-copy . j10950) (bytevector->uint-list . j10949) (bytevector->u8-list . j10948) (bytevector->sint-list . j10947) (no-nans-violation? . j10060) (no-infinities-violation? . j10039) (make-no-nans-violation . j10058) (make-no-infinities-violation . j10037) (real->flonum . j10946) (flzero? . j10945) (fltruncate . j10944) (fltan . j10943) (flsqrt . j10942) (flsin . j10941) (flround . j10940) (flpositive? . j10939) (flonum? . j10938) (flodd? . j10937) (flnumerator . j10936) (flnegative? . j10935) (flnan? . j10934) (flmod0 . j10933) (flmod . j10932) (flmin . j10931) (flmax . j10930) (fllog . j10929) (flinteger? . j10928) (flinfinite? . j10927) (flfloor . j10926) (flfinite? . j10925) (flexpt . j10924) (flexp . j10923) (fleven? . j10922) (fldiv0-and-mod0 . j10921) (fldiv0 . j10920) (fldiv-and-mod . j10919) (fldiv . j10918) (fldenominator . j10917) (flcos . j10916) (flceiling . j10915) (flatan . j10914) (flasin . j10913) (flacos . j10912) (flabs . j10911) (fl>? . j10910) (fl>=? . j10909) (fl=? . j10908) (fl<? . j10907) (fl<=? . j10906) (fl/ . j10905) (fl- . j10904) (fl+ . j10903) (fl* . j10902) (fixnum->flonum . j10901) (fxzero? . j10900) (fxxor . j10899) (fxrotate-bit-field . j10898) (fxreverse-bit-field . j10897) (fxpositive? . j10896) (fxodd? . j10895) (fxnot . j10894) (fxnegative? . j10893) (fxmod0 . j10892) (fxmod . j10891) (fxmin . j10890) (fxmax . j10889) (fxlength . j10888) (fxior . j10887) (fxif . j10886) (fxfirst-bit-set . j10885) (fxeven? . j10884) (fxdiv0-and-mod0 . j10883) (fxdiv0 . j10882) (fxdiv-and-mod . j10881) (fxdiv . j10880) (fxcopy-bit-field . j10879) (fxcopy-bit . j10878) (fxbit-set? . j10877) (fxbit-field . j10876) (fxbit-count . j10875) (fxarithmetic-shift-right . j10874) (fxarithmetic-shift-left . j10873) (fxarithmetic-shift . j10872) (fxand . j10871) (fx>? . j10870) (fx>=? . j10869) (fx=? . j10868) (fx<? . j10867) (fx<=? . j10866) (fx-/carry . j10865) (fx- . j10864) (fx+/carry . j10863) (fx+ . j10862) (fx*/carry . j10861) (fx* . j10860) (greatest-fixnum . j10859) (least-fixnum . j10858) (fixnum-width . j10857) (fixnum? . j10856) (bitwise-rotate-bit-field . j10855) (bitwise-reverse-bit-field . j10854) (bitwise-length . j10853) (bitwise-if . j10852) (bitwise-first-bit-set . j10851) (bitwise-copy-bit-field . j10850) (bitwise-copy-bit . j10849) (bitwise-bit-set? . j10848) (bitwise-bit-field . j10847) (bitwise-bit-count . j10846) (bitwise-xor . j10845) (bitwise-ior . j10844) (bitwise-and . j10843) (bitwise-not . j10842) (bitwise-arithmetic-shift-right . j10841) (bitwise-arithmetic-shift-left . j10840) (bitwise-arithmetic-shift . j10839) (zero? . j10838) (vector? . j10837) (vector-set! . j10836) (vector-ref . j10835) (vector-map . j10834) (vector-length . j10833) (vector-for-each . j10832) (vector-fill! . j10831) (vector->list . j10830) (vector . j10829) (values . j10828) (truncate . j10827) (tan . j10826) (symbol? . j10825) (symbol=? . j10824) (symbol->string . j10823) (substring . j10822) (string? . j10821) (string>? . j10820) (string>=? . j10819) (string=? . j10818) (string<? . j10817) (string<=? . j10816) (string-ref . j10815) (string-length . j10814) (string-for-each . j10813) (string-copy . j10812) (string-append . j10811) (string->symbol . j10810) (string->number . j10809) (string->list . j10808) (string . j10807) (sqrt . j10806) (sin . j10805) (round . j10804) (reverse . j10803) (real? . j10802) (real-valued? . j10801) (real-part . j10800) (rationalize . j10799) (rational? . j10798) (rational-valued? . j10797) (procedure? . j10796) (positive? . j10795) (pair? . j10794) (odd? . j10793) (numerator . j10792) (number? . j10791) (number->string . j10790) (null? . j10789) (not . j10788) (negative? . j10787) (nan? . j10786) (min . j10785) (max . j10784) (map . j10783) (make-vector . j10782) (make-string . j10781) (make-rectangular . j10780) (make-polar . j10779) (magnitude . j10778) (log . j10777) (list? . j10776) (list-tail . j10775) (list-ref . j10774) (list->vector . j10773) (list->string . j10772) (list . j10771) (length . j10770) (lcm . j10769) (integer? . j10768) (integer-valued? . j10767) (integer->char . j10766) (infinite? . j10765) (inexact? . j10764) (inexact . j10763) (imag-part . j10762) (gcd . j10761) (for-each . j10760) (floor . j10759) (finite? . j10758) (expt . j10757) (exp . j10756) (exact? . j10755) (exact-integer-sqrt . j10754) (exact . j10753) (even? . j10752) (error . j10751) (eqv? . j10750) (equal? . j10749) (eq? . j10748) (dynamic-wind . j10747) (div0-and-mod0 . j10746) (mod0 . j10745) (div0 . j10744) (div-and-mod . j10743) (mod . j10742) (div . j10741) (denominator . j10740) (cos . j10739) (cons . j10738) (complex? . j10737) (char? . j10736) (char>? . j10735) (char>=? . j10734) (char=? . j10733) (char<? . j10732) (char<=? . j10731) (char->integer . j10730) (ceiling . j10729) (call-with-values . j10728) (call/cc . j10727) (call-with-current-continuation . j10726) (cddddr . j10725) (cdddar . j10724) (cddadr . j10723) (cddaar . j10722) (cdaddr . j10721) (cdadar . j10720) (cdaadr . j10719) (cdaaar . j10718) (cadddr . j10717) (caddar . j10716) (cadadr . j10715) (cadaar . j10714) (caaddr . j10713) (caadar . j10712) (caaadr . j10711) (caaaar . j10710) (cdddr . j10709) (cddar . j10708) (cdadr . j10707) (cdaar . j10706) (caddr . j10705) (cadar . j10704) (caadr . j10703) (caaar . j10702) (cddr . j10701) (cdar . j10700) (cadr . j10699) (caar . j10698) (cdr . j10697) (car . j10696) (boolean? . j10695) (boolean=? . j10694) (atan . j10693) (assertion-violation . j10692) (asin . j10691) (apply . j10690) (append . j10689) (angle . j10688) (acos . j10687) (abs . j10686) (/ . j10685) (* . j10684) (- . j10683) (+ . j10682) (>= . j10681) (> . j10680) (= . j10679) (<= . j10678) (< . j10677) (&no-nans . j10675) (&no-infinities . j10674) (&i/o-encoding . j10673) (&i/o-decoding . j10672) (&i/o-port . j10671) (&i/o-file-does-not-exist . j10670) (&i/o-file-already-exists . j10669) (&i/o-file-is-read-only . j10668) (&i/o-file-protection . j10667) (&i/o-filename . j10666) (&i/o-invalid-position . j10665) (&i/o-write . j10664) (&i/o-read . j10663) (&i/o . j10662) (&undefined . j10661) (&syntax . j10660) (&lexical . j10659) (&implementation-restriction . j10658) (&non-continuable . j10657) (&who . j10656) (&irritants . j10655) (&assertion . j10654) (&violation . j10653) (&error . j10652) (&serious . j10651) (&warning . j10650) (&message . j10649) (&condition . j10648) (define-condition-type . j10647) (define-enumeration . j10646) (define-record-type . j10645) (parent-rtd . j10644) (nongenerative . j10643) (opaque . j10642) (sealed . j10641) (protocol . j10640) (parent . j10639) (immutable . j10638) (mutable . j10637) (fields . j10636) (error-handling-mode . j10635) (file-options . j10634) (buffer-mode . j10633) (eol-style . j10632) (guard . j10631) (unsyntax-splicing . j10628) (unsyntax . j10627) (unquote-splicing . j10626) (unquote . j10625) (_ . j10624) (else . j10623) (=> . j10622) (... . j10621) (assert . j10620) (endianness . j10619) (do . j10616) (cond . j10615) (let* . j10614) (let . j10613) (let*-values . j10612) (let-values . j10611) (identifier-syntax . j10610) (with-syntax . j10609) (quasisyntax . j10608) (quasiquote . j10607) (syntax-rules . j10606) (record-constructor-descriptor . j10603) (record-type-descriptor . j10602) (case . j10601) (unless . j10599) (when . j10598) (or . j10597) (and . j10596) (if . j10595) (letrec* . j10594) (letrec . j10593) (case-lambda . j10591) (lambda . j10590) (syntax . j10589) (syntax-case . j10588) (quote . j10587) (letrec-syntax . j10585) (let-syntax . j10584) (set! . j10583) (begin . j10581) (define-syntax . j10579) (define . j10578)) '() values values '#f '#f '#t '#f) (j1789@j1442@install-library 'j11291 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . j2958) (quotient . j11064) (null-environment . j2956) (remainder . j11063) (modulo . j11062) (inexact->exact . j11061) (force . j11060) (exact->inexact . j11059) (make-promise . j11058) (delay . j10618)) '() values values '#f '#f '#t '#f) (j1789@j1442@install-library 'j11292 '(rnrs control) '(6) '() '() '() '((do . j10616) (unless . j10599) (when . j10598) (case-lambda . j10591)) '() values values '#f '#f '#t '#f) (j1789@j1442@install-library 'j11293 '(rnrs eval) '(6) '() '() '() '((eval . j2962) (environment . j2954)) '() values values '#f '#f '#t '#f) (j1789@j1442@install-library 'j11294 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . j11054) (set-car! . j11053)) '() values values '#f '#f '#t '#f) (j1789@j1442@install-library 'j11295 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . j11056) (string-set! . j11055)) '() values values '#f '#f '#t '#f) (j1789@j1442@install-library 'j11296 '(rnrs programs) '(6) '() '() '() '((exit . j11057) (command-line . j10327)) '() values values '#f '#f '#t '#f) (j1789@j1442@install-library 'j11297 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . j2320) (identifier? . j2996) (generate-temporaries . j2976) (free-identifier=? . j2978) (syntax->datum . j3000) (datum->syntax . j2998) (bound-identifier=? . j2980) (syntax-violation . j2994) (unsyntax-splicing . j10628) (unsyntax . j10627) (_ . j10624) (... . j10621) (with-syntax . j10609) (quasisyntax . j10608) (syntax . j10589) (syntax-case . j10588)) '() values values '#f '#f '#t '#f) (j1789@j1442@install-library 'j11298 '(rnrs files) '(6) '() '() '() '((delete-file . j11169) (file-exists? . j11168) (make-i/o-write-error . j9807) (make-i/o-read-error . j9786) (make-i/o-port-error . j9965) (make-i/o-invalid-position-error . j9829) (make-i/o-filename-error . j9855) (make-i/o-file-protection-error . j9880) (make-i/o-file-is-read-only-error . j9901) (make-i/o-file-does-not-exist-error . j9943) (make-i/o-file-already-exists-error . j9922) (make-i/o-error . j9765) (i/o-write-error? . j9809) (i/o-read-error? . j9788) (i/o-port-error? . j9969) (i/o-invalid-position-error? . j9833) (i/o-filename-error? . j9859) (i/o-file-protection-error? . j9882) (i/o-file-is-read-only-error? . j9903) (i/o-file-does-not-exist-error? . j9945) (i/o-file-already-exists-error? . j9924) (i/o-error? . j9767) (i/o-error-position . j9835) (i/o-error-port . j9971) (i/o-error-filename . j9861) (&i/o-port . j10671) (&i/o-file-does-not-exist . j10670) (&i/o-file-already-exists . j10669) (&i/o-file-is-read-only . j10668) (&i/o-file-protection . j10667) (&i/o-filename . j10666) (&i/o-invalid-position . j10665) (&i/o-write . j10664) (&i/o-read . j10663) (&i/o . j10662)) '() values values '#f '#f '#t '#f) (j1789@j1442@install-library 'j11299 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . j11167) (vector-sort . j11166) (list-sort . j11165)) '() values values '#f '#f '#t '#f) (j1789@j1442@install-library 'j11300 '(rnrs base) '(6) '() '() '() '((zero? . j10838) (vector? . j10837) (vector-set! . j10836) (vector-ref . j10835) (vector-map . j10834) (vector-length . j10833) (vector-for-each . j10832) (vector-fill! . j10831) (vector->list . j10830) (vector . j10829) (values . j10828) (truncate . j10827) (tan . j10826) (symbol? . j10825) (symbol=? . j10824) (symbol->string . j10823) (substring . j10822) (string? . j10821) (string>? . j10820) (string>=? . j10819) (string=? . j10818) (string<? . j10817) (string<=? . j10816) (string-ref . j10815) (string-length . j10814) (string-for-each . j10813) (string-copy . j10812) (string-append . j10811) (string->symbol . j10810) (string->number . j10809) (string->list . j10808) (string . j10807) (sqrt . j10806) (sin . j10805) (round . j10804) (reverse . j10803) (real? . j10802) (real-valued? . j10801) (real-part . j10800) (rationalize . j10799) (rational? . j10798) (rational-valued? . j10797) (procedure? . j10796) (positive? . j10795) (pair? . j10794) (odd? . j10793) (numerator . j10792) (number? . j10791) (number->string . j10790) (null? . j10789) (not . j10788) (negative? . j10787) (nan? . j10786) (min . j10785) (max . j10784) (map . j10783) (make-vector . j10782) (make-string . j10781) (make-rectangular . j10780) (make-polar . j10779) (magnitude . j10778) (log . j10777) (list? . j10776) (list-tail . j10775) (list-ref . j10774) (list->vector . j10773) (list->string . j10772) (list . j10771) (length . j10770) (lcm . j10769) (integer? . j10768) (integer-valued? . j10767) (integer->char . j10766) (infinite? . j10765) (inexact? . j10764) (inexact . j10763) (imag-part . j10762) (gcd . j10761) (for-each . j10760) (floor . j10759) (finite? . j10758) (expt . j10757) (exp . j10756) (exact? . j10755) (exact-integer-sqrt . j10754) (exact . j10753) (even? . j10752) (error . j10751) (eqv? . j10750) (equal? . j10749) (eq? . j10748) (dynamic-wind . j10747) (div0-and-mod0 . j10746) (mod0 . j10745) (div0 . j10744) (div-and-mod . j10743) (mod . j10742) (div . j10741) (denominator . j10740) (cos . j10739) (cons . j10738) (complex? . j10737) (char? . j10736) (char>? . j10735) (char>=? . j10734) (char=? . j10733) (char<? . j10732) (char<=? . j10731) (char->integer . j10730) (ceiling . j10729) (call-with-values . j10728) (call/cc . j10727) (call-with-current-continuation . j10726) (cddddr . j10725) (cdddar . j10724) (cddadr . j10723) (cddaar . j10722) (cdaddr . j10721) (cdadar . j10720) (cdaadr . j10719) (cdaaar . j10718) (cadddr . j10717) (caddar . j10716) (cadadr . j10715) (cadaar . j10714) (caaddr . j10713) (caadar . j10712) (caaadr . j10711) (caaaar . j10710) (cdddr . j10709) (cddar . j10708) (cdadr . j10707) (cdaar . j10706) (caddr . j10705) (cadar . j10704) (caadr . j10703) (caaar . j10702) (cddr . j10701) (cdar . j10700) (cadr . j10699) (caar . j10698) (cdr . j10697) (car . j10696) (boolean? . j10695) (boolean=? . j10694) (atan . j10693) (assertion-violation . j10692) (asin . j10691) (apply . j10690) (append . j10689) (angle . j10688) (acos . j10687) (abs . j10686) (/ . j10685) (* . j10684) (- . j10683) (+ . j10682) (>= . j10681) (> . j10680) (= . j10679) (<= . j10678) (< . j10677) (unquote-splicing . j10626) (unquote . j10625) (_ . j10624) (else . j10623) (=> . j10622) (... . j10621) (assert . j10620) (cond . j10615) (let* . j10614) (let . j10613) (let*-values . j10612) (let-values . j10611) (identifier-syntax . j10610) (quasiquote . j10607) (syntax-rules . j10606) (case . j10601) (or . j10597) (and . j10596) (if . j10595) (letrec* . j10594) (letrec . j10593) (lambda . j10590) (quote . j10587) (letrec-syntax . j10585) (let-syntax . j10584) (set! . j10583) (begin . j10581) (define-syntax . j10579) (define . j10578)) '() values values '#f '#f '#t '#f) (j1789@j1442@install-library 'j11301 '(rnrs lists) '(6) '() '() '() '((remove . j11052) (remv . j11051) (remp . j11050) (remq . j11049) (partition . j11048) (memv . j11047) (memq . j11046) (memp . j11045) (member . j11044) (exists . j11043) (for-all . j11042) (fold-right . j11041) (fold-left . j11040) (find . j11039) (filter . j11038) (cons* . j11037) (assv . j11036) (assq . j11035) (assp . j11034) (assoc . j11033)) '() values values '#f '#f '#t '#f) (j1789@j1442@install-library 'j11302 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . j11143) (call-with-input-file . j11142) (write-char . j11141) (write . j11140) (with-output-to-file . j11139) (with-input-from-file . j11138) (read-char . j11137) (read . j11136) (peek-char . j11135) (open-output-file . j11134) (open-input-file . j11133) (newline . j11132) (display . j11131) (close-output-port . j11130) (close-input-port . j11129) (eof-object? . j11128) (eof-object . j11127) (current-error-port . j11126) (current-output-port . j11125) (current-input-port . j11124) (output-port? . j11123) (input-port? . j11122) (make-i/o-write-error . j9807) (make-i/o-read-error . j9786) (make-i/o-port-error . j9965) (make-i/o-invalid-position-error . j9829) (make-i/o-filename-error . j9855) (make-i/o-file-protection-error . j9880) (make-i/o-file-is-read-only-error . j9901) (make-i/o-file-does-not-exist-error . j9943) (make-i/o-file-already-exists-error . j9922) (make-i/o-error . j9765) (i/o-write-error? . j9809) (i/o-read-error? . j9788) (i/o-port-error? . j9969) (i/o-invalid-position-error? . j9833) (i/o-filename-error? . j9859) (i/o-file-protection-error? . j9882) (i/o-file-is-read-only-error? . j9903) (i/o-file-does-not-exist-error? . j9945) (i/o-file-already-exists-error? . j9924) (i/o-error? . j9767) (i/o-error-position . j9835) (i/o-error-port . j9971) (i/o-error-filename . j9861) (&i/o-port . j10671) (&i/o-file-does-not-exist . j10670) (&i/o-file-already-exists . j10669) (&i/o-file-is-read-only . j10668) (&i/o-file-protection . j10667) (&i/o-filename . j10666) (&i/o-invalid-position . j10665) (&i/o-write . j10664) (&i/o-read . j10663) (&i/o . j10662)) '() values values '#f '#f '#t '#f) (j1789@j1442@install-library 'j11303 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . j11080) (utf32->string . j11005) (utf16->string . j11004) (utf8->string . j11003) (uint-list->bytevector . j11002) (u8-list->bytevector . j11001) (string->utf8 . j11000) (string->utf32 . j10999) (string->utf16 . j10998) (sint-list->bytevector . j10997) (native-endianness . j10996) (bytevector? . j10995) (bytevector=? . j10994) (bytevector-uint-set! . j10993) (bytevector-uint-ref . j10992) (bytevector-u8-set! . j10991) (bytevector-u8-ref . j10990) (bytevector-u64-set! . j10989) (bytevector-u64-ref . j10988) (bytevector-u64-native-set! . j10987) (bytevector-u64-native-ref . j10986) (bytevector-u32-set! . j10985) (bytevector-u32-ref . j10984) (bytevector-u32-native-set! . j10983) (bytevector-u32-native-ref . j10982) (bytevector-u16-set! . j10981) (bytevector-u16-ref . j10980) (bytevector-u16-native-set! . j10979) (bytevector-u16-native-ref . j10978) (bytevector-sint-set! . j10977) (bytevector-sint-ref . j10976) (bytevector-s8-set! . j10975) (bytevector-s8-ref . j10974) (bytevector-s64-set! . j10973) (bytevector-s64-ref . j10972) (bytevector-s64-native-set! . j10971) (bytevector-s64-native-ref . j10970) (bytevector-s32-set! . j10969) (bytevector-s32-ref . j10968) (bytevector-s32-native-set! . j10967) (bytevector-s32-native-ref . j10966) (bytevector-s16-set! . j10965) (bytevector-s16-ref . j10964) (bytevector-s16-native-set! . j10963) (bytevector-s16-native-ref . j10962) (bytevector-length . j10961) (bytevector-ieee-single-ref . j10960) (bytevector-ieee-single-set! . j10959) (bytevector-ieee-single-native-set! . j10958) (bytevector-ieee-single-native-ref . j10957) (bytevector-ieee-double-set! . j10956) (bytevector-ieee-double-ref . j10955) (bytevector-ieee-double-native-set! . j10954) (bytevector-ieee-double-native-ref . j10953) (bytevector-fill! . j10952) (bytevector-copy! . j10951) (bytevector-copy . j10950) (bytevector->uint-list . j10949) (bytevector->u8-list . j10948) (bytevector->sint-list . j10947) (endianness . j10619)) '() values values '#f '#f '#t '#f) (j1789@j1442@install-library 'j11304 '(rnrs unicode) '(6) '() '() '() '((string-upcase . j11215) (string-titlecase . j11214) (string-normalize-nfkd . j11213) (string-normalize-nfkc . j11212) (string-normalize-nfd . j11211) (string-normalize-nfc . j11210) (string-foldcase . j11209) (string-downcase . j11208) (string-ci>? . j11207) (string-ci>=? . j11206) (string-ci=? . j11205) (string-ci<? . j11204) (string-ci<=? . j11203) (char-whitespace? . j11202) (char-upper-case? . j11201) (char-title-case? . j11200) (char-numeric? . j11199) (char-lower-case? . j11198) (char-general-category . j11197) (char-upcase . j11196) (char-titlecase . j11195) (char-foldcase . j11194) (char-downcase . j11193) (char-ci>? . j11192) (char-ci>=? . j11191) (char-ci=? . j11190) (char-ci<? . j11189) (char-ci<=? . j11188) (char-alphabetic? . j11187)) '() values values '#f '#f '#t '#f) (j1789@j1442@install-library 'j11305 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . j11026) (raise-continuable . j11025) (raise . j11024) (guard . j10631) (else . j10623) (=> . j10622)) '() values values '#f '#f '#t '#f) (j1789@j1442@install-library 'j11306 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . j10855) (bitwise-reverse-bit-field . j10854) (bitwise-length . j10853) (bitwise-if . j10852) (bitwise-first-bit-set . j10851) (bitwise-copy-bit-field . j10850) (bitwise-copy-bit . j10849) (bitwise-bit-set? . j10848) (bitwise-bit-field . j10847) (bitwise-bit-count . j10846) (bitwise-xor . j10845) (bitwise-ior . j10844) (bitwise-and . j10843) (bitwise-not . j10842) (bitwise-arithmetic-shift-right . j10841) (bitwise-arithmetic-shift-left . j10840) (bitwise-arithmetic-shift . j10839)) '() values values '#f '#f '#t '#f) (j1789@j1442@install-library 'j11307 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . j10900) (fxxor . j10899) (fxrotate-bit-field . j10898) (fxreverse-bit-field . j10897) (fxpositive? . j10896) (fxodd? . j10895) (fxnot . j10894) (fxnegative? . j10893) (fxmod0 . j10892) (fxmod . j10891) (fxmin . j10890) (fxmax . j10889) (fxlength . j10888) (fxior . j10887) (fxif . j10886) (fxfirst-bit-set . j10885) (fxeven? . j10884) (fxdiv0-and-mod0 . j10883) (fxdiv0 . j10882) (fxdiv-and-mod . j10881) (fxdiv . j10880) (fxcopy-bit-field . j10879) (fxcopy-bit . j10878) (fxbit-set? . j10877) (fxbit-field . j10876) (fxbit-count . j10875) (fxarithmetic-shift-right . j10874) (fxarithmetic-shift-left . j10873) (fxarithmetic-shift . j10872) (fxand . j10871) (fx>? . j10870) (fx>=? . j10869) (fx=? . j10868) (fx<? . j10867) (fx<=? . j10866) (fx-/carry . j10865) (fx- . j10864) (fx+/carry . j10863) (fx+ . j10862) (fx*/carry . j10861) (fx* . j10860) (greatest-fixnum . j10859) (least-fixnum . j10858) (fixnum-width . j10857) (fixnum? . j10856)) '() values values '#f '#f '#t '#f) (j1789@j1442@install-library 'j11308 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . j10060) (no-infinities-violation? . j10039) (make-no-nans-violation . j10058) (make-no-infinities-violation . j10037) (real->flonum . j10946) (flzero? . j10945) (fltruncate . j10944) (fltan . j10943) (flsqrt . j10942) (flsin . j10941) (flround . j10940) (flpositive? . j10939) (flonum? . j10938) (flodd? . j10937) (flnumerator . j10936) (flnegative? . j10935) (flnan? . j10934) (flmod0 . j10933) (flmod . j10932) (flmin . j10931) (flmax . j10930) (fllog . j10929) (flinteger? . j10928) (flinfinite? . j10927) (flfloor . j10926) (flfinite? . j10925) (flexpt . j10924) (flexp . j10923) (fleven? . j10922) (fldiv0-and-mod0 . j10921) (fldiv0 . j10920) (fldiv-and-mod . j10919) (fldiv . j10918) (fldenominator . j10917) (flcos . j10916) (flceiling . j10915) (flatan . j10914) (flasin . j10913) (flacos . j10912) (flabs . j10911) (fl>? . j10910) (fl>=? . j10909) (fl=? . j10908) (fl<? . j10907) (fl<=? . j10906) (fl/ . j10905) (fl- . j10904) (fl+ . j10903) (fl* . j10902) (fixnum->flonum . j10901) (&no-nans . j10675) (&no-infinities . j10674)) '() values values '#f '#f '#t '#f) (j1789@j1442@install-library 'j11309 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . j11164) (string-ci-hash . j11163) (string-hash . j11162) (equal-hash . j11161) (hashtable-equivalence-function . j11160) (make-hashtable . j11159) (hashtable-hash-function . j11158) (make-eqv-hashtable . j11157) (make-eq-hashtable . j11156) (hashtable? . j11155) (hashtable-update! . j11154) (hashtable-size . j11153) (hashtable-set! . j11152) (hashtable-ref . j11151) (hashtable-mutable? . j11150) (hashtable-keys . j11149) (hashtable-entries . j11148) (hashtable-delete! . j11147) (hashtable-copy . j11146) (hashtable-contains? . j11145) (hashtable-clear! . j11144)) '() values values '#f '#f '#t '#f) (j1789@j1442@install-library 'j11310 '(rnrs io ports) '(6) '() '() '() '((eof-object? . j11128) (eof-object . j11127) (current-error-port . j11126) (current-output-port . j11125) (current-input-port . j11124) (output-port? . j11123) (input-port? . j11122) (utf-8-codec . j11121) (utf-16-codec . j11120) (transcoder-error-handling-mode . j11119) (transcoder-eol-style . j11118) (transcoder-codec . j11117) (transcoded-port . j11116) (textual-port? . j11115) (string->bytevector . j11114) (standard-output-port . j11113) (standard-input-port . j11112) (standard-error-port . j11111) (set-port-position! . j11110) (put-u8 . j11109) (put-string . j11108) (put-datum . j11107) (put-char . j11106) (put-bytevector . j11105) (port? . j11104) (port-transcoder . j11103) (port-position . j11102) (port-has-set-port-position!? . j11101) (port-has-port-position? . j11100) (port-eof? . j11099) (output-port-buffer-mode . j11098) (open-string-output-port . j11097) (open-string-input-port . j11096) (open-file-output-port . j11095) (open-file-input/output-port . j11094) (open-file-input-port . j11093) (open-bytevector-output-port . j11092) (open-bytevector-input-port . j11091) (native-transcoder . j11090) (native-eol-style . j11089) (make-transcoder . j11088) (latin-1-codec . j11087) (make-i/o-write-error . j9807) (make-i/o-read-error . j9786) (make-i/o-port-error . j9965) (make-i/o-invalid-position-error . j9829) (make-i/o-filename-error . j9855) (make-i/o-file-protection-error . j9880) (make-i/o-file-is-read-only-error . j9901) (make-i/o-file-does-not-exist-error . j9943) (make-i/o-file-already-exists-error . j9922) (make-i/o-error . j9765) (make-i/o-encoding-error . j10012) (make-i/o-decoding-error . j9990) (make-custom-textual-output-port . j11086) (make-custom-textual-input/output-port . j11085) (make-custom-textual-input-port . j11084) (make-custom-binary-output-port . j11083) (make-custom-binary-input/output-port . j11082) (make-custom-binary-input-port . j11081) (lookahead-u8 . j11079) (lookahead-char . j11078) (i/o-write-error? . j9809) (i/o-read-error? . j9788) (i/o-port-error? . j9969) (i/o-invalid-position-error? . j9833) (i/o-filename-error? . j9859) (i/o-file-protection-error? . j9882) (i/o-file-is-read-only-error? . j9903) (i/o-file-does-not-exist-error? . j9945) (i/o-file-already-exists-error? . j9924) (i/o-error? . j9767) (i/o-error-position . j9835) (i/o-error-port . j9971) (i/o-error-filename . j9861) (i/o-encoding-error? . j10016) (i/o-encoding-error-char . j10018) (i/o-decoding-error? . j9992) (get-u8 . j11077) (get-string-n! . j11076) (get-string-n . j11075) (get-string-all . j11074) (get-line . j11073) (get-datum . j11072) (get-char . j11071) (get-bytevector-some . j11070) (get-bytevector-n! . j11069) (get-bytevector-n . j11068) (get-bytevector-all . j11067) (flush-output-port . j11066) (close-port . j11065) (call-with-string-output-port . j11032) (call-with-port . j11031) (call-with-bytevector-output-port . j11030) (bytevector->string . j11029) (buffer-mode? . j11028) (binary-port? . j11027) (&i/o-encoding . j10673) (&i/o-decoding . j10672) (&i/o-port . j10671) (&i/o-file-does-not-exist . j10670) (&i/o-file-already-exists . j10669) (&i/o-file-is-read-only . j10668) (&i/o-file-protection . j10667) (&i/o-filename . j10666) (&i/o-invalid-position . j10665) (&i/o-write . j10664) (&i/o-read . j10663) (&i/o . j10662) (error-handling-mode . j10635) (file-options . j10634) (buffer-mode . j10633) (eol-style . j10632)) '() values values '#f '#f '#t '#f) (j1789@j1442@install-library 'j11311 '(rnrs enums) '(6) '() '() '() '((make-enumeration . j11023) (enum-set=? . j11022) (enum-set-universe . j11021) (enum-set-union . j11020) (enum-set-subset? . j11019) (enum-set-projection . j11018) (enum-set-member? . j11017) (enum-set-intersection . j11016) (enum-set-indexer . j11015) (enum-set-difference . j11014) (enum-set-constructor . j11013) (enum-set-complement . j11012) (enum-set->list . j11011) (define-enumeration . j10646)) '() values values '#f '#f '#t '#f) (j1789@j1442@install-library 'j11312 '(rnrs conditions) '(6) '() '() '() '((who-condition? . j9629) (warning? . j9495) (violation? . j9558) (undefined-violation? . j9746) (syntax-violation? . j9721) (syntax-violation-subform . j9725) (syntax-violation-form . j9723) (syntax-violation . j2994) (simple-conditions . j11010) (serious-condition? . j9516) (non-continuable-violation? . j9652) (message-condition? . j9472) (make-who-condition . j9625) (make-warning . j9493) (make-violation . j9556) (make-undefined-violation . j9744) (make-syntax-violation . j9715) (make-serious-condition . j9514) (make-non-continuable-violation . j9650) (make-message-condition . j9468) (make-lexical-violation . j9692) (make-irritants-condition . j9599) (make-implementation-restriction-violation . j9671) (make-error . j9535) (make-assertion-violation . j9577) (lexical-violation? . j9694) (irritants-condition? . j9603) (implementation-restriction-violation? . j9673) (error? . j9537) (condition-who . j9631) (condition-predicate . j11009) (condition-message . j9474) (condition-irritants . j9605) (condition-accessor . j11008) (condition . j11007) (assertion-violation? . j9579) (condition? . j11006) (&undefined . j10661) (&syntax . j10660) (&lexical . j10659) (&implementation-restriction . j10658) (&non-continuable . j10657) (&who . j10656) (&irritants . j10655) (&assertion . j10654) (&violation . j10653) (&error . j10652) (&serious . j10651) (&warning . j10650) (&message . j10649) (&condition . j10648) (define-condition-type . j10647)) '() values values '#f '#f '#t '#f) (j1789@j1442@install-library 'j11313 '(rnrs records inspection) '(6) '() '() '() '((record? . j11179) (record-type-uid . j11178) (record-type-sealed? . j11177) (record-type-parent . j11176) (record-type-opaque? . j11175) (record-type-name . j11174) (record-type-generative? . j11173) (record-type-field-names . j11172) (record-rtd . j11171) (record-field-mutable? . j11170)) '() values values '#f '#f '#t '#f) (j1789@j1442@install-library 'j11314 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . j11186) (record-predicate . j11185) (record-mutator . j11184) (record-constructor . j11183) (record-accessor . j11182) (make-record-type-descriptor . j11181) (make-record-constructor-descriptor . j11180)) '() values values '#f '#f '#t '#f) (j1789@j1442@install-library 'j11315 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . j10645) (parent-rtd . j10644) (nongenerative . j10643) (opaque . j10642) (sealed . j10641) (protocol . j10640) (parent . j10639) (immutable . j10638) (mutable . j10637) (fields . j10636) (record-constructor-descriptor . j10603) (record-type-descriptor . j10602)) '() values values '#f '#f '#t '#f) (j1789@j1442@install-library 'j11316 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . j10064) (&no-nans-rtd . j10062) (&no-infinities-rcd . j10043) (&no-infinities-rtd . j10041) (&i/o-encoding-rcd . j10022) (&i/o-encoding-rtd . j10020) (&i/o-decoding-rcd . j9996) (&i/o-decoding-rtd . j9994) (&i/o-port-rcd . j9975) (&i/o-port-rtd . j9973) (&i/o-file-does-not-exist-rcd . j9949) (&i/o-file-does-not-exist-rtd . j9947) (&i/o-file-already-exists-rcd . j9928) (&i/o-file-already-exists-rtd . j9926) (&i/o-file-is-read-only-rcd . j9907) (&i/o-file-is-read-only-rtd . j9905) (&i/o-file-protection-rcd . j9886) (&i/o-file-protection-rtd . j9884) (&i/o-filename-rcd . j9865) (&i/o-filename-rtd . j9863) (&i/o-invalid-position-rcd . j9839) (&i/o-invalid-position-rtd . j9837) (&i/o-write-rcd . j9813) (&i/o-write-rtd . j9811) (&i/o-read-rcd . j9792) (&i/o-read-rtd . j9790) (&i/o-rcd . j9771) (&i/o-rtd . j9769) (&undefined-rcd . j9750) (&undefined-rtd . j9748) (&syntax-rcd . j9729) (&syntax-rtd . j9727) (&lexical-rcd . j9698) (&lexical-rtd . j9696) (&implementation-restriction-rcd . j9677) (&implementation-restriction-rtd . j9675) (&non-continuable-rcd . j9656) (&non-continuable-rtd . j9654) (&who-rcd . j9635) (&who-rtd . j9633) (&irritants-rcd . j9609) (&irritants-rtd . j9607) (&assertion-rcd . j9583) (&assertion-rtd . j9581) (&violation-rcd . j9562) (&violation-rtd . j9560) (&error-rcd . j9541) (&error-rtd . j9539) (&serious-rcd . j9520) (&serious-rtd . j9518) (&warning-rcd . j9499) (&warning-rtd . j9497) (&message-rcd . j9478) (&message-rtd . j9476) (&condition-rcd . j9387) (&condition-rtd . j9385) (syntax-error . j2990) (syntax-dispatch . j2761) (pretty-print . j11284) (eval-core . j11283) (set-symbol-value! . j11282) (symbol-value . j11281) (gensym . j912) (void . j11280) (load . j10333) (interaction-environment . j3006) (char-ready? . j11279) (regexp? . j11278) (read-line . j11277) (ungensym . j11276) (alist->eq-hash-table . j11275) (assoc-ref . j11274) (print . j11273) (format . j11272) (host-os . j11271) (library-path . j1409) (standard-library-path . j11270) (file-newer? . j11269) (stat-mtime . j11268) (write-to-file . j11267) (file->list . j11266) (file->string . j11265) (digit->integer . j11264) (call-with-string-input-port . j11263) (call-with-string-io . j11262) (string-split . j11261) (bytevector-for-each . j11260) (string->regexp . j11259) (rxmatch . j11258) (regexp-replace-all . j11257) (hashtable-for-each . j11256) (call-process . j11255) (local-tz-offset . j11254) (microseconds . j11253) (readdir . j11252) (set-current-directory! . j11251) (expand-path . j11250) (current-directory . j11249) (%spawn . j11248) (%waitpid . j11247) (%ffi-supported? . j11246) (%ffi-pointer-ref . j11245) (%ffi-pointer->string . j11244) (%ffi-call->string-or-zero . j11243) (%ffi-call->double . j11242) (%ffi-call->void* . j11241) (%ffi-call->void . j11240) (%ffi-call->int . j11239) (%ffi-lookup . j11238) (%ffi-open . j11237) (%fork . j11236) (%pipe . j11235) (p . j11234) (open-output-string . j11233) (get-output-string . j11232) (get-environment-variables . j11231) (get-environment-variable . j11230) (get-timeofday . j11229) (get-command-line . j11228) (sys-display . j11227) (mosh-executable-path . j11226) (make-file-options . j11225) (source-info . j11224) (make-compiler-instruction . j11223) (make-instruction . j11222) (set-source-info! . j11221) (bignum? . j11220) (fast-equal? . j11219) (fasl-read . j11218) (fasl-write . j11217) (time-usage . j11216) (make-parameter . j940) (string-upcase . j11215) (string-titlecase . j11214) (string-normalize-nfkd . j11213) (string-normalize-nfkc . j11212) (string-normalize-nfd . j11211) (string-normalize-nfc . j11210) (string-foldcase . j11209) (string-downcase . j11208) (string-ci>? . j11207) (string-ci>=? . j11206) (string-ci=? . j11205) (string-ci<? . j11204) (string-ci<=? . j11203) (char-whitespace? . j11202) (char-upper-case? . j11201) (char-title-case? . j11200) (char-numeric? . j11199) (char-lower-case? . j11198) (char-general-category . j11197) (char-upcase . j11196) (char-titlecase . j11195) (char-foldcase . j11194) (char-downcase . j11193) (char-ci>? . j11192) (char-ci>=? . j11191) (char-ci=? . j11190) (char-ci<? . j11189) (char-ci<=? . j11188) (char-alphabetic? . j11187) (make-variable-transformer . j2320) (identifier? . j2996) (generate-temporaries . j2976) (free-identifier=? . j2978) (syntax->datum . j3000) (datum->syntax . j2998) (bound-identifier=? . j2980) (record-type-descriptor? . j11186) (record-predicate . j11185) (record-mutator . j11184) (record-constructor . j11183) (record-accessor . j11182) (make-record-type-descriptor . j11181) (make-record-constructor-descriptor . j11180) (record? . j11179) (record-type-uid . j11178) (record-type-sealed? . j11177) (record-type-parent . j11176) (record-type-opaque? . j11175) (record-type-name . j11174) (record-type-generative? . j11173) (record-type-field-names . j11172) (record-rtd . j11171) (record-field-mutable? . j11170) (delete-file . j11169) (file-exists? . j11168) (vector-sort! . j11167) (vector-sort . j11166) (list-sort . j11165) (symbol-hash . j11164) (string-ci-hash . j11163) (string-hash . j11162) (equal-hash . j11161) (hashtable-equivalence-function . j11160) (make-hashtable . j11159) (hashtable-hash-function . j11158) (make-eqv-hashtable . j11157) (make-eq-hashtable . j11156) (hashtable? . j11155) (hashtable-update! . j11154) (hashtable-size . j11153) (hashtable-set! . j11152) (hashtable-ref . j11151) (hashtable-mutable? . j11150) (hashtable-keys . j11149) (hashtable-entries . j11148) (hashtable-delete! . j11147) (hashtable-copy . j11146) (hashtable-contains? . j11145) (hashtable-clear! . j11144) (call-with-output-file . j11143) (call-with-input-file . j11142) (write-char . j11141) (write . j11140) (with-output-to-file . j11139) (with-input-from-file . j11138) (read-char . j11137) (read . j11136) (peek-char . j11135) (open-output-file . j11134) (open-input-file . j11133) (newline . j11132) (display . j11131) (close-output-port . j11130) (close-input-port . j11129) (eof-object? . j11128) (eof-object . j11127) (current-error-port . j11126) (current-output-port . j11125) (current-input-port . j11124) (output-port? . j11123) (input-port? . j11122) (utf-8-codec . j11121) (utf-16-codec . j11120) (transcoder-error-handling-mode . j11119) (transcoder-eol-style . j11118) (transcoder-codec . j11117) (transcoded-port . j11116) (textual-port? . j11115) (string->bytevector . j11114) (standard-output-port . j11113) (standard-input-port . j11112) (standard-error-port . j11111) (set-port-position! . j11110) (put-u8 . j11109) (put-string . j11108) (put-datum . j11107) (put-char . j11106) (put-bytevector . j11105) (port? . j11104) (port-transcoder . j11103) (port-position . j11102) (port-has-set-port-position!? . j11101) (port-has-port-position? . j11100) (port-eof? . j11099) (output-port-buffer-mode . j11098) (open-string-output-port . j11097) (open-string-input-port . j11096) (open-file-output-port . j11095) (open-file-input/output-port . j11094) (open-file-input-port . j11093) (open-bytevector-output-port . j11092) (open-bytevector-input-port . j11091) (native-transcoder . j11090) (native-eol-style . j11089) (make-transcoder . j11088) (latin-1-codec . j11087) (make-i/o-write-error . j9807) (make-i/o-read-error . j9786) (make-i/o-port-error . j9965) (make-i/o-invalid-position-error . j9829) (make-i/o-filename-error . j9855) (make-i/o-file-protection-error . j9880) (make-i/o-file-is-read-only-error . j9901) (make-i/o-file-does-not-exist-error . j9943) (make-i/o-file-already-exists-error . j9922) (make-i/o-error . j9765) (make-i/o-encoding-error . j10012) (make-i/o-decoding-error . j9990) (make-custom-textual-output-port . j11086) (make-custom-textual-input/output-port . j11085) (make-custom-textual-input-port . j11084) (make-custom-binary-output-port . j11083) (make-custom-binary-input/output-port . j11082) (make-custom-binary-input-port . j11081) (make-bytevector . j11080) (lookahead-u8 . j11079) (lookahead-char . j11078) (i/o-write-error? . j9809) (i/o-read-error? . j9788) (i/o-port-error? . j9969) (i/o-invalid-position-error? . j9833) (i/o-filename-error? . j9859) (i/o-file-protection-error? . j9882) (i/o-file-is-read-only-error? . j9903) (i/o-file-does-not-exist-error? . j9945) (i/o-file-already-exists-error? . j9924) (i/o-error? . j9767) (i/o-error-position . j9835) (i/o-error-port . j9971) (i/o-error-filename . j9861) (i/o-encoding-error? . j10016) (i/o-encoding-error-char . j10018) (i/o-decoding-error? . j9992) (get-u8 . j11077) (get-string-n! . j11076) (get-string-n . j11075) (get-string-all . j11074) (get-line . j11073) (get-datum . j11072) (get-char . j11071) (get-bytevector-some . j11070) (get-bytevector-n! . j11069) (get-bytevector-n . j11068) (get-bytevector-all . j11067) (flush-output-port . j11066) (close-port . j11065) (scheme-report-environment . j2958) (quotient . j11064) (null-environment . j2956) (remainder . j11063) (modulo . j11062) (inexact->exact . j11061) (force . j11060) (exact->inexact . j11059) (make-promise . j11058) (exit . j11057) (command-line . j10327) (string-fill! . j11056) (string-set! . j11055) (set-cdr! . j11054) (set-car! . j11053) (remove . j11052) (remv . j11051) (remp . j11050) (remq . j11049) (partition . j11048) (memv . j11047) (memq . j11046) (memp . j11045) (member . j11044) (exists . j11043) (for-all . j11042) (fold-right . j11041) (fold-left . j11040) (find . j11039) (filter . j11038) (cons* . j11037) (assv . j11036) (assq . j11035) (assp . j11034) (assoc . j11033) (call-with-string-output-port . j11032) (call-with-port . j11031) (call-with-bytevector-output-port . j11030) (bytevector->string . j11029) (buffer-mode? . j11028) (binary-port? . j11027) (with-exception-handler . j11026) (raise-continuable . j11025) (raise . j11024) (eval . j2962) (environment . j2954) (make-enumeration . j11023) (enum-set=? . j11022) (enum-set-universe . j11021) (enum-set-union . j11020) (enum-set-subset? . j11019) (enum-set-projection . j11018) (enum-set-member? . j11017) (enum-set-intersection . j11016) (enum-set-indexer . j11015) (enum-set-difference . j11014) (enum-set-constructor . j11013) (enum-set-complement . j11012) (enum-set->list . j11011) (who-condition? . j9629) (warning? . j9495) (violation? . j9558) (undefined-violation? . j9746) (syntax-violation? . j9721) (syntax-violation-subform . j9725) (syntax-violation-form . j9723) (syntax-violation . j2994) (simple-conditions . j11010) (serious-condition? . j9516) (non-continuable-violation? . j9652) (message-condition? . j9472) (make-who-condition . j9625) (make-warning . j9493) (make-violation . j9556) (make-undefined-violation . j9744) (make-syntax-violation . j9715) (make-serious-condition . j9514) (make-non-continuable-violation . j9650) (make-message-condition . j9468) (make-lexical-violation . j9692) (make-irritants-condition . j9599) (make-implementation-restriction-violation . j9671) (make-error . j9535) (make-assertion-violation . j9577) (lexical-violation? . j9694) (irritants-condition? . j9603) (implementation-restriction-violation? . j9673) (error? . j9537) (condition-who . j9631) (condition-predicate . j11009) (condition-message . j9474) (condition-irritants . j9605) (condition-accessor . j11008) (condition . j11007) (assertion-violation? . j9579) (condition? . j11006) (utf32->string . j11005) (utf16->string . j11004) (utf8->string . j11003) (uint-list->bytevector . j11002) (u8-list->bytevector . j11001) (string->utf8 . j11000) (string->utf32 . j10999) (string->utf16 . j10998) (sint-list->bytevector . j10997) (native-endianness . j10996) (bytevector? . j10995) (bytevector=? . j10994) (bytevector-uint-set! . j10993) (bytevector-uint-ref . j10992) (bytevector-u8-set! . j10991) (bytevector-u8-ref . j10990) (bytevector-u64-set! . j10989) (bytevector-u64-ref . j10988) (bytevector-u64-native-set! . j10987) (bytevector-u64-native-ref . j10986) (bytevector-u32-set! . j10985) (bytevector-u32-ref . j10984) (bytevector-u32-native-set! . j10983) (bytevector-u32-native-ref . j10982) (bytevector-u16-set! . j10981) (bytevector-u16-ref . j10980) (bytevector-u16-native-set! . j10979) (bytevector-u16-native-ref . j10978) (bytevector-sint-set! . j10977) (bytevector-sint-ref . j10976) (bytevector-s8-set! . j10975) (bytevector-s8-ref . j10974) (bytevector-s64-set! . j10973) (bytevector-s64-ref . j10972) (bytevector-s64-native-set! . j10971) (bytevector-s64-native-ref . j10970) (bytevector-s32-set! . j10969) (bytevector-s32-ref . j10968) (bytevector-s32-native-set! . j10967) (bytevector-s32-native-ref . j10966) (bytevector-s16-set! . j10965) (bytevector-s16-ref . j10964) (bytevector-s16-native-set! . j10963) (bytevector-s16-native-ref . j10962) (bytevector-length . j10961) (bytevector-ieee-single-ref . j10960) (bytevector-ieee-single-set! . j10959) (bytevector-ieee-single-native-set! . j10958) (bytevector-ieee-single-native-ref . j10957) (bytevector-ieee-double-set! . j10956) (bytevector-ieee-double-ref . j10955) (bytevector-ieee-double-native-set! . j10954) (bytevector-ieee-double-native-ref . j10953) (bytevector-fill! . j10952) (bytevector-copy! . j10951) (bytevector-copy . j10950) (bytevector->uint-list . j10949) (bytevector->u8-list . j10948) (bytevector->sint-list . j10947) (no-nans-violation? . j10060) (no-infinities-violation? . j10039) (make-no-nans-violation . j10058) (make-no-infinities-violation . j10037) (real->flonum . j10946) (flzero? . j10945) (fltruncate . j10944) (fltan . j10943) (flsqrt . j10942) (flsin . j10941) (flround . j10940) (flpositive? . j10939) (flonum? . j10938) (flodd? . j10937) (flnumerator . j10936) (flnegative? . j10935) (flnan? . j10934) (flmod0 . j10933) (flmod . j10932) (flmin . j10931) (flmax . j10930) (fllog . j10929) (flinteger? . j10928) (flinfinite? . j10927) (flfloor . j10926) (flfinite? . j10925) (flexpt . j10924) (flexp . j10923) (fleven? . j10922) (fldiv0-and-mod0 . j10921) (fldiv0 . j10920) (fldiv-and-mod . j10919) (fldiv . j10918) (fldenominator . j10917) (flcos . j10916) (flceiling . j10915) (flatan . j10914) (flasin . j10913) (flacos . j10912) (flabs . j10911) (fl>? . j10910) (fl>=? . j10909) (fl=? . j10908) (fl<? . j10907) (fl<=? . j10906) (fl/ . j10905) (fl- . j10904) (fl+ . j10903) (fl* . j10902) (fixnum->flonum . j10901) (fxzero? . j10900) (fxxor . j10899) (fxrotate-bit-field . j10898) (fxreverse-bit-field . j10897) (fxpositive? . j10896) (fxodd? . j10895) (fxnot . j10894) (fxnegative? . j10893) (fxmod0 . j10892) (fxmod . j10891) (fxmin . j10890) (fxmax . j10889) (fxlength . j10888) (fxior . j10887) (fxif . j10886) (fxfirst-bit-set . j10885) (fxeven? . j10884) (fxdiv0-and-mod0 . j10883) (fxdiv0 . j10882) (fxdiv-and-mod . j10881) (fxdiv . j10880) (fxcopy-bit-field . j10879) (fxcopy-bit . j10878) (fxbit-set? . j10877) (fxbit-field . j10876) (fxbit-count . j10875) (fxarithmetic-shift-right . j10874) (fxarithmetic-shift-left . j10873) (fxarithmetic-shift . j10872) (fxand . j10871) (fx>? . j10870) (fx>=? . j10869) (fx=? . j10868) (fx<? . j10867) (fx<=? . j10866) (fx-/carry . j10865) (fx- . j10864) (fx+/carry . j10863) (fx+ . j10862) (fx*/carry . j10861) (fx* . j10860) (greatest-fixnum . j10859) (least-fixnum . j10858) (fixnum-width . j10857) (fixnum? . j10856) (bitwise-rotate-bit-field . j10855) (bitwise-reverse-bit-field . j10854) (bitwise-length . j10853) (bitwise-if . j10852) (bitwise-first-bit-set . j10851) (bitwise-copy-bit-field . j10850) (bitwise-copy-bit . j10849) (bitwise-bit-set? . j10848) (bitwise-bit-field . j10847) (bitwise-bit-count . j10846) (bitwise-xor . j10845) (bitwise-ior . j10844) (bitwise-and . j10843) (bitwise-not . j10842) (bitwise-arithmetic-shift-right . j10841) (bitwise-arithmetic-shift-left . j10840) (bitwise-arithmetic-shift . j10839) (zero? . j10838) (vector? . j10837) (vector-set! . j10836) (vector-ref . j10835) (vector-map . j10834) (vector-length . j10833) (vector-for-each . j10832) (vector-fill! . j10831) (vector->list . j10830) (vector . j10829) (values . j10828) (truncate . j10827) (tan . j10826) (symbol? . j10825) (symbol=? . j10824) (symbol->string . j10823) (substring . j10822) (string? . j10821) (string>? . j10820) (string>=? . j10819) (string=? . j10818) (string<? . j10817) (string<=? . j10816) (string-ref . j10815) (string-length . j10814) (string-for-each . j10813) (string-copy . j10812) (string-append . j10811) (string->symbol . j10810) (string->number . j10809) (string->list . j10808) (string . j10807) (sqrt . j10806) (sin . j10805) (round . j10804) (reverse . j10803) (real? . j10802) (real-valued? . j10801) (real-part . j10800) (rationalize . j10799) (rational? . j10798) (rational-valued? . j10797) (procedure? . j10796) (positive? . j10795) (pair? . j10794) (odd? . j10793) (numerator . j10792) (number? . j10791) (number->string . j10790) (null? . j10789) (not . j10788) (negative? . j10787) (nan? . j10786) (min . j10785) (max . j10784) (map . j10783) (make-vector . j10782) (make-string . j10781) (make-rectangular . j10780) (make-polar . j10779) (magnitude . j10778) (log . j10777) (list? . j10776) (list-tail . j10775) (list-ref . j10774) (list->vector . j10773) (list->string . j10772) (list . j10771) (length . j10770) (lcm . j10769) (integer? . j10768) (integer-valued? . j10767) (integer->char . j10766) (infinite? . j10765) (inexact? . j10764) (inexact . j10763) (imag-part . j10762) (gcd . j10761) (for-each . j10760) (floor . j10759) (finite? . j10758) (expt . j10757) (exp . j10756) (exact? . j10755) (exact-integer-sqrt . j10754) (exact . j10753) (even? . j10752) (error . j10751) (eqv? . j10750) (equal? . j10749) (eq? . j10748) (dynamic-wind . j10747) (div0-and-mod0 . j10746) (mod0 . j10745) (div0 . j10744) (div-and-mod . j10743) (mod . j10742) (div . j10741) (denominator . j10740) (cos . j10739) (cons . j10738) (complex? . j10737) (char? . j10736) (char>? . j10735) (char>=? . j10734) (char=? . j10733) (char<? . j10732) (char<=? . j10731) (char->integer . j10730) (ceiling . j10729) (call-with-values . j10728) (call/cc . j10727) (call-with-current-continuation . j10726) (cddddr . j10725) (cdddar . j10724) (cddadr . j10723) (cddaar . j10722) (cdaddr . j10721) (cdadar . j10720) (cdaadr . j10719) (cdaaar . j10718) (cadddr . j10717) (caddar . j10716) (cadadr . j10715) (cadaar . j10714) (caaddr . j10713) (caadar . j10712) (caaadr . j10711) (caaaar . j10710) (cdddr . j10709) (cddar . j10708) (cdadr . j10707) (cdaar . j10706) (caddr . j10705) (cadar . j10704) (caadr . j10703) (caaar . j10702) (cddr . j10701) (cdar . j10700) (cadr . j10699) (caar . j10698) (cdr . j10697) (car . j10696) (boolean? . j10695) (boolean=? . j10694) (atan . j10693) (assertion-violation . j10692) (asin . j10691) (apply . j10690) (append . j10689) (angle . j10688) (acos . j10687) (abs . j10686) (/ . j10685) (* . j10684) (- . j10683) (+ . j10682) (>= . j10681) (> . j10680) (= . j10679) (<= . j10678) (< . j10677) (library . j10676) (&no-nans . j10675) (&no-infinities . j10674) (&i/o-encoding . j10673) (&i/o-decoding . j10672) (&i/o-port . j10671) (&i/o-file-does-not-exist . j10670) (&i/o-file-already-exists . j10669) (&i/o-file-is-read-only . j10668) (&i/o-file-protection . j10667) (&i/o-filename . j10666) (&i/o-invalid-position . j10665) (&i/o-write . j10664) (&i/o-read . j10663) (&i/o . j10662) (&undefined . j10661) (&syntax . j10660) (&lexical . j10659) (&implementation-restriction . j10658) (&non-continuable . j10657) (&who . j10656) (&irritants . j10655) (&assertion . j10654) (&violation . j10653) (&error . j10652) (&serious . j10651) (&warning . j10650) (&message . j10649) (&condition . j10648) (define-condition-type . j10647) (define-enumeration . j10646) (define-record-type . j10645) (parent-rtd . j10644) (nongenerative . j10643) (opaque . j10642) (sealed . j10641) (protocol . j10640) (parent . j10639) (immutable . j10638) (mutable . j10637) (fields . j10636) (error-handling-mode . j10635) (file-options . j10634) (buffer-mode . j10633) (eol-style . j10632) (guard . j10631) (trace-define . j10630) (trace-lambda . j10629) (unsyntax-splicing . j10628) (unsyntax . j10627) (unquote-splicing . j10626) (unquote . j10625) (_ . j10624) (else . j10623) (=> . j10622) (... . j10621) (assert . j10620) (endianness . j10619) (delay . j10618) (time . j10617) (do . j10616) (cond . j10615) (let* . j10614) (let . j10613) (let*-values . j10612) (let-values . j10611) (identifier-syntax . j10610) (with-syntax . j10609) (quasisyntax . j10608) (quasiquote . j10607) (syntax-rules . j10606) (include . j10605) (define-struct . j10604) (record-constructor-descriptor . j10603) (record-type-descriptor . j10602) (case . j10601) (parameterize . j10600) (unless . j10599) (when . j10598) (or . j10597) (and . j10596) (if . j10595) (letrec* . j10594) (letrec . j10593) (type-descriptor . j10592) (case-lambda . j10591) (lambda . j10590) (syntax . j10589) (syntax-case . j10588) (quote . j10587) (foreign-call . j10586) (letrec-syntax . j10585) (let-syntax . j10584) (set! . j10583) (import . j10582) (begin . j10581) (module . j10580) (define-syntax . j10579) (define . j10578)) '((j10064 core-prim . &no-nans-rcd) (j10062 core-prim . &no-nans-rtd) (j10043 core-prim . &no-infinities-rcd) (j10041 core-prim . &no-infinities-rtd) (j10022 core-prim . &i/o-encoding-rcd) (j10020 core-prim . &i/o-encoding-rtd) (j9996 core-prim . &i/o-decoding-rcd) (j9994 core-prim . &i/o-decoding-rtd) (j9975 core-prim . &i/o-port-rcd) (j9973 core-prim . &i/o-port-rtd) (j9949 core-prim . &i/o-file-does-not-exist-rcd) (j9947 core-prim . &i/o-file-does-not-exist-rtd) (j9928 core-prim . &i/o-file-already-exists-rcd) (j9926 core-prim . &i/o-file-already-exists-rtd) (j9907 core-prim . &i/o-file-is-read-only-rcd) (j9905 core-prim . &i/o-file-is-read-only-rtd) (j9886 core-prim . &i/o-file-protection-rcd) (j9884 core-prim . &i/o-file-protection-rtd) (j9865 core-prim . &i/o-filename-rcd) (j9863 core-prim . &i/o-filename-rtd) (j9839 core-prim . &i/o-invalid-position-rcd) (j9837 core-prim . &i/o-invalid-position-rtd) (j9813 core-prim . &i/o-write-rcd) (j9811 core-prim . &i/o-write-rtd) (j9792 core-prim . &i/o-read-rcd) (j9790 core-prim . &i/o-read-rtd) (j9771 core-prim . &i/o-rcd) (j9769 core-prim . &i/o-rtd) (j9750 core-prim . &undefined-rcd) (j9748 core-prim . &undefined-rtd) (j9729 core-prim . &syntax-rcd) (j9727 core-prim . &syntax-rtd) (j9698 core-prim . &lexical-rcd) (j9696 core-prim . &lexical-rtd) (j9677 core-prim . &implementation-restriction-rcd) (j9675 core-prim . &implementation-restriction-rtd) (j9656 core-prim . &non-continuable-rcd) (j9654 core-prim . &non-continuable-rtd) (j9635 core-prim . &who-rcd) (j9633 core-prim . &who-rtd) (j9609 core-prim . &irritants-rcd) (j9607 core-prim . &irritants-rtd) (j9583 core-prim . &assertion-rcd) (j9581 core-prim . &assertion-rtd) (j9562 core-prim . &violation-rcd) (j9560 core-prim . &violation-rtd) (j9541 core-prim . &error-rcd) (j9539 core-prim . &error-rtd) (j9520 core-prim . &serious-rcd) (j9518 core-prim . &serious-rtd) (j9499 core-prim . &warning-rcd) (j9497 core-prim . &warning-rtd) (j9478 core-prim . &message-rcd) (j9476 core-prim . &message-rtd) (j9387 core-prim . &condition-rcd) (j9385 core-prim . &condition-rtd) (j2990 core-prim . syntax-error) (j2761 core-prim . syntax-dispatch) (j11284 core-prim . pretty-print) (j11283 core-prim . eval-core) (j11282 core-prim . set-symbol-value!) (j11281 core-prim . symbol-value) (j912 core-prim . gensym) (j11280 core-prim . void) (j10333 core-prim . load) (j3006 core-prim . interaction-environment) (j11279 core-prim . char-ready?) (j11278 core-prim . regexp?) (j11277 core-prim . read-line) (j11276 core-prim . ungensym) (j11275 core-prim . alist->eq-hash-table) (j11274 core-prim . assoc-ref) (j11273 core-prim . print) (j11272 core-prim . format) (j11271 core-prim . host-os) (j1409 core-prim . library-path) (j11270 core-prim . standard-library-path) (j11269 core-prim . file-newer?) (j11268 core-prim . stat-mtime) (j11267 core-prim . write-to-file) (j11266 core-prim . file->list) (j11265 core-prim . file->string) (j11264 core-prim . digit->integer) (j11263 core-prim . call-with-string-input-port) (j11262 core-prim . call-with-string-io) (j11261 core-prim . string-split) (j11260 core-prim . bytevector-for-each) (j11259 core-prim . string->regexp) (j11258 core-prim . rxmatch) (j11257 core-prim . regexp-replace-all) (j11256 core-prim . hashtable-for-each) (j11255 core-prim . call-process) (j11254 core-prim . local-tz-offset) (j11253 core-prim . microseconds) (j11252 core-prim . readdir) (j11251 core-prim . set-current-directory!) (j11250 core-prim . expand-path) (j11249 core-prim . current-directory) (j11248 core-prim . %spawn) (j11247 core-prim . %waitpid) (j11246 core-prim . %ffi-supported?) (j11245 core-prim . %ffi-pointer-ref) (j11244 core-prim . %ffi-pointer->string) (j11243 core-prim . %ffi-call->string-or-zero) (j11242 core-prim . %ffi-call->double) (j11241 core-prim . %ffi-call->void*) (j11240 core-prim . %ffi-call->void) (j11239 core-prim . %ffi-call->int) (j11238 core-prim . %ffi-lookup) (j11237 core-prim . %ffi-open) (j11236 core-prim . %fork) (j11235 core-prim . %pipe) (j11234 core-prim . p) (j11233 core-prim . open-output-string) (j11232 core-prim . get-output-string) (j11231 core-prim . get-environment-variables) (j11230 core-prim . get-environment-variable) (j11229 core-prim . get-timeofday) (j11228 core-prim . get-command-line) (j11227 core-prim . sys-display) (j11226 core-prim . mosh-executable-path) (j11225 core-prim . make-file-options) (j11224 core-prim . source-info) (j11223 core-prim . make-compiler-instruction) (j11222 core-prim . make-instruction) (j11221 core-prim . set-source-info!) (j11220 core-prim . bignum?) (j11219 core-prim . fast-equal?) (j11218 core-prim . fasl-read) (j11217 core-prim . fasl-write) (j11216 core-prim . time-usage) (j940 core-prim . make-parameter) (j11215 core-prim . string-upcase) (j11214 core-prim . string-titlecase) (j11213 core-prim . string-normalize-nfkd) (j11212 core-prim . string-normalize-nfkc) (j11211 core-prim . string-normalize-nfd) (j11210 core-prim . string-normalize-nfc) (j11209 core-prim . string-foldcase) (j11208 core-prim . string-downcase) (j11207 core-prim . string-ci>?) (j11206 core-prim . string-ci>=?) (j11205 core-prim . string-ci=?) (j11204 core-prim . string-ci<?) (j11203 core-prim . string-ci<=?) (j11202 core-prim . char-whitespace?) (j11201 core-prim . char-upper-case?) (j11200 core-prim . char-title-case?) (j11199 core-prim . char-numeric?) (j11198 core-prim . char-lower-case?) (j11197 core-prim . char-general-category) (j11196 core-prim . char-upcase) (j11195 core-prim . char-titlecase) (j11194 core-prim . char-foldcase) (j11193 core-prim . char-downcase) (j11192 core-prim . char-ci>?) (j11191 core-prim . char-ci>=?) (j11190 core-prim . char-ci=?) (j11189 core-prim . char-ci<?) (j11188 core-prim . char-ci<=?) (j11187 core-prim . char-alphabetic?) (j2320 core-prim . make-variable-transformer) (j2996 core-prim . identifier?) (j2976 core-prim . generate-temporaries) (j2978 core-prim . free-identifier=?) (j3000 core-prim . syntax->datum) (j2998 core-prim . datum->syntax) (j2980 core-prim . bound-identifier=?) (j11186 core-prim . record-type-descriptor?) (j11185 core-prim . record-predicate) (j11184 core-prim . record-mutator) (j11183 core-prim . record-constructor) (j11182 core-prim . record-accessor) (j11181 core-prim . make-record-type-descriptor) (j11180 core-prim . make-record-constructor-descriptor) (j11179 core-prim . record?) (j11178 core-prim . record-type-uid) (j11177 core-prim . record-type-sealed?) (j11176 core-prim . record-type-parent) (j11175 core-prim . record-type-opaque?) (j11174 core-prim . record-type-name) (j11173 core-prim . record-type-generative?) (j11172 core-prim . record-type-field-names) (j11171 core-prim . record-rtd) (j11170 core-prim . record-field-mutable?) (j11169 core-prim . delete-file) (j11168 core-prim . file-exists?) (j11167 core-prim . vector-sort!) (j11166 core-prim . vector-sort) (j11165 core-prim . list-sort) (j11164 core-prim . symbol-hash) (j11163 core-prim . string-ci-hash) (j11162 core-prim . string-hash) (j11161 core-prim . equal-hash) (j11160 core-prim . hashtable-equivalence-function) (j11159 core-prim . make-hashtable) (j11158 core-prim . hashtable-hash-function) (j11157 core-prim . make-eqv-hashtable) (j11156 core-prim . make-eq-hashtable) (j11155 core-prim . hashtable?) (j11154 core-prim . hashtable-update!) (j11153 core-prim . hashtable-size) (j11152 core-prim . hashtable-set!) (j11151 core-prim . hashtable-ref) (j11150 core-prim . hashtable-mutable?) (j11149 core-prim . hashtable-keys) (j11148 core-prim . hashtable-entries) (j11147 core-prim . hashtable-delete!) (j11146 core-prim . hashtable-copy) (j11145 core-prim . hashtable-contains?) (j11144 core-prim . hashtable-clear!) (j11143 core-prim . call-with-output-file) (j11142 core-prim . call-with-input-file) (j11141 core-prim . write-char) (j11140 core-prim . write) (j11139 core-prim . with-output-to-file) (j11138 core-prim . with-input-from-file) (j11137 core-prim . read-char) (j11136 core-prim . read) (j11135 core-prim . peek-char) (j11134 core-prim . open-output-file) (j11133 core-prim . open-input-file) (j11132 core-prim . newline) (j11131 core-prim . display) (j11130 core-prim . close-output-port) (j11129 core-prim . close-input-port) (j11128 core-prim . eof-object?) (j11127 core-prim . eof-object) (j11126 core-prim . current-error-port) (j11125 core-prim . current-output-port) (j11124 core-prim . current-input-port) (j11123 core-prim . output-port?) (j11122 core-prim . input-port?) (j11121 core-prim . utf-8-codec) (j11120 core-prim . utf-16-codec) (j11119 core-prim . transcoder-error-handling-mode) (j11118 core-prim . transcoder-eol-style) (j11117 core-prim . transcoder-codec) (j11116 core-prim . transcoded-port) (j11115 core-prim . textual-port?) (j11114 core-prim . string->bytevector) (j11113 core-prim . standard-output-port) (j11112 core-prim . standard-input-port) (j11111 core-prim . standard-error-port) (j11110 core-prim . set-port-position!) (j11109 core-prim . put-u8) (j11108 core-prim . put-string) (j11107 core-prim . put-datum) (j11106 core-prim . put-char) (j11105 core-prim . put-bytevector) (j11104 core-prim . port?) (j11103 core-prim . port-transcoder) (j11102 core-prim . port-position) (j11101 core-prim . port-has-set-port-position!?) (j11100 core-prim . port-has-port-position?) (j11099 core-prim . port-eof?) (j11098 core-prim . output-port-buffer-mode) (j11097 core-prim . open-string-output-port) (j11096 core-prim . open-string-input-port) (j11095 core-prim . open-file-output-port) (j11094 core-prim . open-file-input/output-port) (j11093 core-prim . open-file-input-port) (j11092 core-prim . open-bytevector-output-port) (j11091 core-prim . open-bytevector-input-port) (j11090 core-prim . native-transcoder) (j11089 core-prim . native-eol-style) (j11088 core-prim . make-transcoder) (j11087 core-prim . latin-1-codec) (j9807 core-prim . make-i/o-write-error) (j9786 core-prim . make-i/o-read-error) (j9965 core-prim . make-i/o-port-error) (j9829 core-prim . make-i/o-invalid-position-error) (j9855 core-prim . make-i/o-filename-error) (j9880 core-prim . make-i/o-file-protection-error) (j9901 core-prim . make-i/o-file-is-read-only-error) (j9943 core-prim . make-i/o-file-does-not-exist-error) (j9922 core-prim . make-i/o-file-already-exists-error) (j9765 core-prim . make-i/o-error) (j10012 core-prim . make-i/o-encoding-error) (j9990 core-prim . make-i/o-decoding-error) (j11086 core-prim . make-custom-textual-output-port) (j11085 core-prim . make-custom-textual-input/output-port) (j11084 core-prim . make-custom-textual-input-port) (j11083 core-prim . make-custom-binary-output-port) (j11082 core-prim . make-custom-binary-input/output-port) (j11081 core-prim . make-custom-binary-input-port) (j11080 core-prim . make-bytevector) (j11079 core-prim . lookahead-u8) (j11078 core-prim . lookahead-char) (j9809 core-prim . i/o-write-error?) (j9788 core-prim . i/o-read-error?) (j9969 core-prim . i/o-port-error?) (j9833 core-prim . i/o-invalid-position-error?) (j9859 core-prim . i/o-filename-error?) (j9882 core-prim . i/o-file-protection-error?) (j9903 core-prim . i/o-file-is-read-only-error?) (j9945 core-prim . i/o-file-does-not-exist-error?) (j9924 core-prim . i/o-file-already-exists-error?) (j9767 core-prim . i/o-error?) (j9835 core-prim . i/o-error-position) (j9971 core-prim . i/o-error-port) (j9861 core-prim . i/o-error-filename) (j10016 core-prim . i/o-encoding-error?) (j10018 core-prim . i/o-encoding-error-char) (j9992 core-prim . i/o-decoding-error?) (j11077 core-prim . get-u8) (j11076 core-prim . get-string-n!) (j11075 core-prim . get-string-n) (j11074 core-prim . get-string-all) (j11073 core-prim . get-line) (j11072 core-prim . get-datum) (j11071 core-prim . get-char) (j11070 core-prim . get-bytevector-some) (j11069 core-prim . get-bytevector-n!) (j11068 core-prim . get-bytevector-n) (j11067 core-prim . get-bytevector-all) (j11066 core-prim . flush-output-port) (j11065 core-prim . close-port) (j2958 core-prim . scheme-report-environment) (j11064 core-prim . quotient) (j2956 core-prim . null-environment) (j11063 core-prim . remainder) (j11062 core-prim . modulo) (j11061 core-prim . inexact->exact) (j11060 core-prim . force) (j11059 core-prim . exact->inexact) (j11058 core-prim . make-promise) (j11057 core-prim . exit) (j10327 core-prim . command-line) (j11056 core-prim . string-fill!) (j11055 core-prim . string-set!) (j11054 core-prim . set-cdr!) (j11053 core-prim . set-car!) (j11052 core-prim . remove) (j11051 core-prim . remv) (j11050 core-prim . remp) (j11049 core-prim . remq) (j11048 core-prim . partition) (j11047 core-prim . memv) (j11046 core-prim . memq) (j11045 core-prim . memp) (j11044 core-prim . member) (j11043 core-prim . exists) (j11042 core-prim . for-all) (j11041 core-prim . fold-right) (j11040 core-prim . fold-left) (j11039 core-prim . find) (j11038 core-prim . filter) (j11037 core-prim . cons*) (j11036 core-prim . assv) (j11035 core-prim . assq) (j11034 core-prim . assp) (j11033 core-prim . assoc) (j11032 core-prim . call-with-string-output-port) (j11031 core-prim . call-with-port) (j11030 core-prim . call-with-bytevector-output-port) (j11029 core-prim . bytevector->string) (j11028 core-prim . buffer-mode?) (j11027 core-prim . binary-port?) (j11026 core-prim . with-exception-handler) (j11025 core-prim . raise-continuable) (j11024 core-prim . raise) (j2962 core-prim . eval) (j2954 core-prim . environment) (j11023 core-prim . make-enumeration) (j11022 core-prim . enum-set=?) (j11021 core-prim . enum-set-universe) (j11020 core-prim . enum-set-union) (j11019 core-prim . enum-set-subset?) (j11018 core-prim . enum-set-projection) (j11017 core-prim . enum-set-member?) (j11016 core-prim . enum-set-intersection) (j11015 core-prim . enum-set-indexer) (j11014 core-prim . enum-set-difference) (j11013 core-prim . enum-set-constructor) (j11012 core-prim . enum-set-complement) (j11011 core-prim . enum-set->list) (j9629 core-prim . who-condition?) (j9495 core-prim . warning?) (j9558 core-prim . violation?) (j9746 core-prim . undefined-violation?) (j9721 core-prim . syntax-violation?) (j9725 core-prim . syntax-violation-subform) (j9723 core-prim . syntax-violation-form) (j2994 core-prim . syntax-violation) (j11010 core-prim . simple-conditions) (j9516 core-prim . serious-condition?) (j9652 core-prim . non-continuable-violation?) (j9472 core-prim . message-condition?) (j9625 core-prim . make-who-condition) (j9493 core-prim . make-warning) (j9556 core-prim . make-violation) (j9744 core-prim . make-undefined-violation) (j9715 core-prim . make-syntax-violation) (j9514 core-prim . make-serious-condition) (j9650 core-prim . make-non-continuable-violation) (j9468 core-prim . make-message-condition) (j9692 core-prim . make-lexical-violation) (j9599 core-prim . make-irritants-condition) (j9671 core-prim . make-implementation-restriction-violation) (j9535 core-prim . make-error) (j9577 core-prim . make-assertion-violation) (j9694 core-prim . lexical-violation?) (j9603 core-prim . irritants-condition?) (j9673 core-prim . implementation-restriction-violation?) (j9537 core-prim . error?) (j9631 core-prim . condition-who) (j11009 core-prim . condition-predicate) (j9474 core-prim . condition-message) (j9605 core-prim . condition-irritants) (j11008 core-prim . condition-accessor) (j11007 core-prim . condition) (j9579 core-prim . assertion-violation?) (j11006 core-prim . condition?) (j11005 core-prim . utf32->string) (j11004 core-prim . utf16->string) (j11003 core-prim . utf8->string) (j11002 core-prim . uint-list->bytevector) (j11001 core-prim . u8-list->bytevector) (j11000 core-prim . string->utf8) (j10999 core-prim . string->utf32) (j10998 core-prim . string->utf16) (j10997 core-prim . sint-list->bytevector) (j10996 core-prim . native-endianness) (j10995 core-prim . bytevector?) (j10994 core-prim . bytevector=?) (j10993 core-prim . bytevector-uint-set!) (j10992 core-prim . bytevector-uint-ref) (j10991 core-prim . bytevector-u8-set!) (j10990 core-prim . bytevector-u8-ref) (j10989 core-prim . bytevector-u64-set!) (j10988 core-prim . bytevector-u64-ref) (j10987 core-prim . bytevector-u64-native-set!) (j10986 core-prim . bytevector-u64-native-ref) (j10985 core-prim . bytevector-u32-set!) (j10984 core-prim . bytevector-u32-ref) (j10983 core-prim . bytevector-u32-native-set!) (j10982 core-prim . bytevector-u32-native-ref) (j10981 core-prim . bytevector-u16-set!) (j10980 core-prim . bytevector-u16-ref) (j10979 core-prim . bytevector-u16-native-set!) (j10978 core-prim . bytevector-u16-native-ref) (j10977 core-prim . bytevector-sint-set!) (j10976 core-prim . bytevector-sint-ref) (j10975 core-prim . bytevector-s8-set!) (j10974 core-prim . bytevector-s8-ref) (j10973 core-prim . bytevector-s64-set!) (j10972 core-prim . bytevector-s64-ref) (j10971 core-prim . bytevector-s64-native-set!) (j10970 core-prim . bytevector-s64-native-ref) (j10969 core-prim . bytevector-s32-set!) (j10968 core-prim . bytevector-s32-ref) (j10967 core-prim . bytevector-s32-native-set!) (j10966 core-prim . bytevector-s32-native-ref) (j10965 core-prim . bytevector-s16-set!) (j10964 core-prim . bytevector-s16-ref) (j10963 core-prim . bytevector-s16-native-set!) (j10962 core-prim . bytevector-s16-native-ref) (j10961 core-prim . bytevector-length) (j10960 core-prim . bytevector-ieee-single-ref) (j10959 core-prim . bytevector-ieee-single-set!) (j10958 core-prim . bytevector-ieee-single-native-set!) (j10957 core-prim . bytevector-ieee-single-native-ref) (j10956 core-prim . bytevector-ieee-double-set!) (j10955 core-prim . bytevector-ieee-double-ref) (j10954 core-prim . bytevector-ieee-double-native-set!) (j10953 core-prim . bytevector-ieee-double-native-ref) (j10952 core-prim . bytevector-fill!) (j10951 core-prim . bytevector-copy!) (j10950 core-prim . bytevector-copy) (j10949 core-prim . bytevector->uint-list) (j10948 core-prim . bytevector->u8-list) (j10947 core-prim . bytevector->sint-list) (j10060 core-prim . no-nans-violation?) (j10039 core-prim . no-infinities-violation?) (j10058 core-prim . make-no-nans-violation) (j10037 core-prim . make-no-infinities-violation) (j10946 core-prim . real->flonum) (j10945 core-prim . flzero?) (j10944 core-prim . fltruncate) (j10943 core-prim . fltan) (j10942 core-prim . flsqrt) (j10941 core-prim . flsin) (j10940 core-prim . flround) (j10939 core-prim . flpositive?) (j10938 core-prim . flonum?) (j10937 core-prim . flodd?) (j10936 core-prim . flnumerator) (j10935 core-prim . flnegative?) (j10934 core-prim . flnan?) (j10933 core-prim . flmod0) (j10932 core-prim . flmod) (j10931 core-prim . flmin) (j10930 core-prim . flmax) (j10929 core-prim . fllog) (j10928 core-prim . flinteger?) (j10927 core-prim . flinfinite?) (j10926 core-prim . flfloor) (j10925 core-prim . flfinite?) (j10924 core-prim . flexpt) (j10923 core-prim . flexp) (j10922 core-prim . fleven?) (j10921 core-prim . fldiv0-and-mod0) (j10920 core-prim . fldiv0) (j10919 core-prim . fldiv-and-mod) (j10918 core-prim . fldiv) (j10917 core-prim . fldenominator) (j10916 core-prim . flcos) (j10915 core-prim . flceiling) (j10914 core-prim . flatan) (j10913 core-prim . flasin) (j10912 core-prim . flacos) (j10911 core-prim . flabs) (j10910 core-prim . fl>?) (j10909 core-prim . fl>=?) (j10908 core-prim . fl=?) (j10907 core-prim . fl<?) (j10906 core-prim . fl<=?) (j10905 core-prim . fl/) (j10904 core-prim . fl-) (j10903 core-prim . fl+) (j10902 core-prim . fl*) (j10901 core-prim . fixnum->flonum) (j10900 core-prim . fxzero?) (j10899 core-prim . fxxor) (j10898 core-prim . fxrotate-bit-field) (j10897 core-prim . fxreverse-bit-field) (j10896 core-prim . fxpositive?) (j10895 core-prim . fxodd?) (j10894 core-prim . fxnot) (j10893 core-prim . fxnegative?) (j10892 core-prim . fxmod0) (j10891 core-prim . fxmod) (j10890 core-prim . fxmin) (j10889 core-prim . fxmax) (j10888 core-prim . fxlength) (j10887 core-prim . fxior) (j10886 core-prim . fxif) (j10885 core-prim . fxfirst-bit-set) (j10884 core-prim . fxeven?) (j10883 core-prim . fxdiv0-and-mod0) (j10882 core-prim . fxdiv0) (j10881 core-prim . fxdiv-and-mod) (j10880 core-prim . fxdiv) (j10879 core-prim . fxcopy-bit-field) (j10878 core-prim . fxcopy-bit) (j10877 core-prim . fxbit-set?) (j10876 core-prim . fxbit-field) (j10875 core-prim . fxbit-count) (j10874 core-prim . fxarithmetic-shift-right) (j10873 core-prim . fxarithmetic-shift-left) (j10872 core-prim . fxarithmetic-shift) (j10871 core-prim . fxand) (j10870 core-prim . fx>?) (j10869 core-prim . fx>=?) (j10868 core-prim . fx=?) (j10867 core-prim . fx<?) (j10866 core-prim . fx<=?) (j10865 core-prim . fx-/carry) (j10864 core-prim . fx-) (j10863 core-prim . fx+/carry) (j10862 core-prim . fx+) (j10861 core-prim . fx*/carry) (j10860 core-prim . fx*) (j10859 core-prim . greatest-fixnum) (j10858 core-prim . least-fixnum) (j10857 core-prim . fixnum-width) (j10856 core-prim . fixnum?) (j10855 core-prim . bitwise-rotate-bit-field) (j10854 core-prim . bitwise-reverse-bit-field) (j10853 core-prim . bitwise-length) (j10852 core-prim . bitwise-if) (j10851 core-prim . bitwise-first-bit-set) (j10850 core-prim . bitwise-copy-bit-field) (j10849 core-prim . bitwise-copy-bit) (j10848 core-prim . bitwise-bit-set?) (j10847 core-prim . bitwise-bit-field) (j10846 core-prim . bitwise-bit-count) (j10845 core-prim . bitwise-xor) (j10844 core-prim . bitwise-ior) (j10843 core-prim . bitwise-and) (j10842 core-prim . bitwise-not) (j10841 core-prim . bitwise-arithmetic-shift-right) (j10840 core-prim . bitwise-arithmetic-shift-left) (j10839 core-prim . bitwise-arithmetic-shift) (j10838 core-prim . zero?) (j10837 core-prim . vector?) (j10836 core-prim . vector-set!) (j10835 core-prim . vector-ref) (j10834 core-prim . vector-map) (j10833 core-prim . vector-length) (j10832 core-prim . vector-for-each) (j10831 core-prim . vector-fill!) (j10830 core-prim . vector->list) (j10829 core-prim . vector) (j10828 core-prim . values) (j10827 core-prim . truncate) (j10826 core-prim . tan) (j10825 core-prim . symbol?) (j10824 core-prim . symbol=?) (j10823 core-prim . symbol->string) (j10822 core-prim . substring) (j10821 core-prim . string?) (j10820 core-prim . string>?) (j10819 core-prim . string>=?) (j10818 core-prim . string=?) (j10817 core-prim . string<?) (j10816 core-prim . string<=?) (j10815 core-prim . string-ref) (j10814 core-prim . string-length) (j10813 core-prim . string-for-each) (j10812 core-prim . string-copy) (j10811 core-prim . string-append) (j10810 core-prim . string->symbol) (j10809 core-prim . string->number) (j10808 core-prim . string->list) (j10807 core-prim . string) (j10806 core-prim . sqrt) (j10805 core-prim . sin) (j10804 core-prim . round) (j10803 core-prim . reverse) (j10802 core-prim . real?) (j10801 core-prim . real-valued?) (j10800 core-prim . real-part) (j10799 core-prim . rationalize) (j10798 core-prim . rational?) (j10797 core-prim . rational-valued?) (j10796 core-prim . procedure?) (j10795 core-prim . positive?) (j10794 core-prim . pair?) (j10793 core-prim . odd?) (j10792 core-prim . numerator) (j10791 core-prim . number?) (j10790 core-prim . number->string) (j10789 core-prim . null?) (j10788 core-prim . not) (j10787 core-prim . negative?) (j10786 core-prim . nan?) (j10785 core-prim . min) (j10784 core-prim . max) (j10783 core-prim . map) (j10782 core-prim . make-vector) (j10781 core-prim . make-string) (j10780 core-prim . make-rectangular) (j10779 core-prim . make-polar) (j10778 core-prim . magnitude) (j10777 core-prim . log) (j10776 core-prim . list?) (j10775 core-prim . list-tail) (j10774 core-prim . list-ref) (j10773 core-prim . list->vector) (j10772 core-prim . list->string) (j10771 core-prim . list) (j10770 core-prim . length) (j10769 core-prim . lcm) (j10768 core-prim . integer?) (j10767 core-prim . integer-valued?) (j10766 core-prim . integer->char) (j10765 core-prim . infinite?) (j10764 core-prim . inexact?) (j10763 core-prim . inexact) (j10762 core-prim . imag-part) (j10761 core-prim . gcd) (j10760 core-prim . for-each) (j10759 core-prim . floor) (j10758 core-prim . finite?) (j10757 core-prim . expt) (j10756 core-prim . exp) (j10755 core-prim . exact?) (j10754 core-prim . exact-integer-sqrt) (j10753 core-prim . exact) (j10752 core-prim . even?) (j10751 core-prim . error) (j10750 core-prim . eqv?) (j10749 core-prim . equal?) (j10748 core-prim . eq?) (j10747 core-prim . dynamic-wind) (j10746 core-prim . div0-and-mod0) (j10745 core-prim . mod0) (j10744 core-prim . div0) (j10743 core-prim . div-and-mod) (j10742 core-prim . mod) (j10741 core-prim . div) (j10740 core-prim . denominator) (j10739 core-prim . cos) (j10738 core-prim . cons) (j10737 core-prim . complex?) (j10736 core-prim . char?) (j10735 core-prim . char>?) (j10734 core-prim . char>=?) (j10733 core-prim . char=?) (j10732 core-prim . char<?) (j10731 core-prim . char<=?) (j10730 core-prim . char->integer) (j10729 core-prim . ceiling) (j10728 core-prim . call-with-values) (j10727 core-prim . call/cc) (j10726 core-prim . call-with-current-continuation) (j10725 core-prim . cddddr) (j10724 core-prim . cdddar) (j10723 core-prim . cddadr) (j10722 core-prim . cddaar) (j10721 core-prim . cdaddr) (j10720 core-prim . cdadar) (j10719 core-prim . cdaadr) (j10718 core-prim . cdaaar) (j10717 core-prim . cadddr) (j10716 core-prim . caddar) (j10715 core-prim . cadadr) (j10714 core-prim . cadaar) (j10713 core-prim . caaddr) (j10712 core-prim . caadar) (j10711 core-prim . caaadr) (j10710 core-prim . caaaar) (j10709 core-prim . cdddr) (j10708 core-prim . cddar) (j10707 core-prim . cdadr) (j10706 core-prim . cdaar) (j10705 core-prim . caddr) (j10704 core-prim . cadar) (j10703 core-prim . caadr) (j10702 core-prim . caaar) (j10701 core-prim . cddr) (j10700 core-prim . cdar) (j10699 core-prim . cadr) (j10698 core-prim . caar) (j10697 core-prim . cdr) (j10696 core-prim . car) (j10695 core-prim . boolean?) (j10694 core-prim . boolean=?) (j10693 core-prim . atan) (j10692 core-prim . assertion-violation) (j10691 core-prim . asin) (j10690 core-prim . apply) (j10689 core-prim . append) (j10688 core-prim . angle) (j10687 core-prim . acos) (j10686 core-prim . abs) (j10685 core-prim . /) (j10684 core-prim . *) (j10683 core-prim . -) (j10682 core-prim . +) (j10681 core-prim . >=) (j10680 core-prim . >) (j10679 core-prim . =) (j10678 core-prim . <=) (j10677 core-prim . <) (j10676 core-prim . library) (j10675 $core-rtd &no-nans-rtd &no-nans-rcd) (j10674 $core-rtd &no-infinities-rtd &no-infinities-rcd) (j10673 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (j10672 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (j10671 $core-rtd &i/o-port-rtd &i/o-port-rcd) (j10670 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (j10669 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (j10668 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (j10667 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (j10666 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (j10665 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (j10664 $core-rtd &i/o-write-rtd &i/o-write-rcd) (j10663 $core-rtd &i/o-read-rtd &i/o-read-rcd) (j10662 $core-rtd &i/o-rtd &i/o-rcd) (j10661 $core-rtd &undefined-rtd &undefined-rcd) (j10660 $core-rtd &syntax-rtd &syntax-rcd) (j10659 $core-rtd &lexical-rtd &lexical-rcd) (j10658 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (j10657 $core-rtd &non-continuable-rtd &non-continuable-rcd) (j10656 $core-rtd &who-rtd &who-rcd) (j10655 $core-rtd &irritants-rtd &irritants-rcd) (j10654 $core-rtd &assertion-rtd &assertion-rcd) (j10653 $core-rtd &violation-rtd &violation-rcd) (j10652 $core-rtd &error-rtd &error-rcd) (j10651 $core-rtd &serious-rtd &serious-rcd) (j10650 $core-rtd &warning-rtd &warning-rcd) (j10649 $core-rtd &message-rtd &message-rcd) (j10648 $core-rtd &condition-rtd &condition-rcd) (j10647 macro . define-condition-type) (j10646 macro . define-enumeration) (j10645 macro . define-record-type) (j10644 macro . parent-rtd) (j10643 macro . nongenerative) (j10642 macro . opaque) (j10641 macro . sealed) (j10640 macro . protocol) (j10639 macro . parent) (j10638 macro . immutable) (j10637 macro . mutable) (j10636 macro . fields) (j10635 macro . error-handling-mode) (j10634 macro . file-options) (j10633 macro . buffer-mode) (j10632 macro . eol-style) (j10631 macro . guard) (j10630 macro . trace-define) (j10629 macro . trace-lambda) (j10628 macro . unsyntax-splicing) (j10627 macro . unsyntax) (j10626 macro . unquote-splicing) (j10625 macro . unquote) (j10624 macro . _) (j10623 macro . else) (j10622 macro . =>) (j10621 macro . ...) (j10620 macro . assert) (j10619 macro . endianness) (j10618 macro . delay) (j10617 macro . time) (j10616 macro . do) (j10615 macro . cond) (j10614 macro . let*) (j10613 macro . let) (j10612 macro . let*-values) (j10611 macro . let-values) (j10610 macro . identifier-syntax) (j10609 macro . with-syntax) (j10608 macro . quasisyntax) (j10607 macro . quasiquote) (j10606 macro . syntax-rules) (j10605 macro . include) (j10604 macro . define-struct) (j10603 core-macro . record-constructor-descriptor) (j10602 core-macro . record-type-descriptor) (j10601 macro . case) (j10600 macro . parameterize) (j10599 macro . unless) (j10598 macro . when) (j10597 core-macro . or) (j10596 core-macro . and) (j10595 core-macro . if) (j10594 core-macro . letrec*) (j10593 core-macro . letrec) (j10592 core-macro . type-descriptor) (j10591 core-macro . case-lambda) (j10590 core-macro . lambda) (j10589 core-macro . syntax) (j10588 core-macro . syntax-case) (j10587 core-macro . quote) (j10586 core-macro . foreign-call) (j10585 letrec-syntax) (j10584 let-syntax) (j10583 set!) (j10582 import) (j10581 begin) (j10580 module) (j10579 define-syntax) (j10578 define)) values values '#f '#f '#f '#f) (j1789@j1442@install-library 'j11317 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . j11284) (eval-core . j11283) (set-symbol-value! . j11282) (symbol-value . j11281) (gensym . j912) (void . j11280)) '() values values '#f '#f '#f '#f) (j1789@j1442@install-library 'j11318 '(mosh) '() '() '() '() '((set-symbol-value! . j11282) (symbol-value . j11281) (read-line . j11277) (ungensym . j11276) (alist->eq-hash-table . j11275) (assoc-ref . j11274) (print . j11273) (format . j11272) (host-os . j11271) (library-path . j1409) (standard-library-path . j11270) (file-newer? . j11269) (stat-mtime . j11268) (write-to-file . j11267) (file->list . j11266) (file->string . j11265) (digit->integer . j11264) (call-with-string-input-port . j11263) (call-with-string-io . j11262) (string-split . j11261) (bytevector-for-each . j11260) (string->regexp . j11259) (rxmatch . j11258) (regexp-replace-all . j11257) (hashtable-for-each . j11256) (readdir . j11252) (set-current-directory! . j11251) (expand-path . j11250) (current-directory . j11249) (p . j11234) (get-timeofday . j11229) (get-command-line . j11228) (sys-display . j11227) (mosh-executable-path . j11226) (make-file-options . j11225) (source-info . j11224) (make-compiler-instruction . j11223) (make-instruction . j11222) (set-source-info! . j11221) (bignum? . j11220) (fast-equal? . j11219) (fasl-read . j11218) (fasl-write . j11217) (time-usage . j11216) (time . j10617) (include . j10605)) '() values values '#f '#f '#f '#f) (j1789@j1442@install-library 'j11319 '(system) '() '() '() '() '((call-process . j11255) (local-tz-offset . j11254) (microseconds . j11253) (expand-path . j11250) (%spawn . j11248) (%waitpid . j11247) (%ffi-supported? . j11246) (%ffi-pointer-ref . j11245) (%ffi-pointer->string . j11244) (%ffi-call->string-or-zero . j11243) (%ffi-call->double . j11242) (%ffi-call->void* . j11241) (%ffi-call->void . j11240) (%ffi-call->int . j11239) (%ffi-lookup . j11238) (%ffi-open . j11237) (%fork . j11236) (%pipe . j11235) (open-output-string . j11233) (get-output-string . j11232) (get-environment-variables . j11231) (get-environment-variable . j11230) (make-parameter . j940) (parameterize . j10600)) '() values values '#f '#f '#f '#f))
((lambda (j10310@add-library-path! j10312@parse-and-add-library-path j10314@for-each-with-index j10316@rpad j10318@condition-printer j10320@record->field-alist j10322@map-with-index j10324@repl j10326@trace-printer j10328@command-line j10330@local-library-path j10332@load/args j10334@load j10336@ironscheme-build j10338@eval-top-level j10340@compile-system-libraries j10342@compile j10344@compile->closure j10346@pre-compile-r6rs-file j10348@load-r6rs-top-level) (begin (set! j10310@add-library-path! (lambda (j10375@path) (j1773@j1410@library-path (append (j1773@j1410@library-path) (list j10375@path))))) (set! j10312@parse-and-add-library-path (lambda (j10377@paths j10378@message) ((lambda (j10381@t) (if j10381@t ((lambda (j10383@paths) (for-each (lambda (j10385@path) (if (file-exists? j10385@path) (j10310@add-library-path! (expand-path j10385@path)) (format (current-error-port) j10378@message j10385@path))) (reverse (string-split j10383@paths '#\:)))) j10381@t) (void))) j10377@paths))) (set! j10314@for-each-with-index (lambda (j10387@proc j10388@lst) (letrec ((j10391@loop (lambda (j10393@i j10394@lst) (if (null? j10394@lst) (if '#f '#f (void)) (begin (j10387@proc j10393@i (car j10394@lst)) (j10391@loop (+ j10393@i '1) (cdr j10394@lst))))))) (j10391@loop '1 j10388@lst)))) (set! j10316@rpad (lambda (j10397@str j10398@pad j10399@n) ((lambda (j10403@rest) ((letrec ((j10405@loop (lambda (j10407@rest j10408@ret) (if (<= j10407@rest '0) j10408@ret (j10405@loop (- j10407@rest '1) (string-append j10408@ret j10398@pad)))))) j10405@loop) j10403@rest (format '"~a" j10397@str))) (- j10399@n (string-length (format '"~a" j10397@str)))))) (set! j10318@condition-printer (lambda (j10411@e j10412@port) ((lambda (j10416@max-condition-len) (begin (set! j10416@max-condition-len (apply max (map (lambda (j10433@c) (string-length (symbol->string (record-type-name (record-rtd j10433@c))))) (simple-conditions j10411@e)))) (begin (display '" Condition components:\n" j10412@port) (j10314@for-each-with-index (lambda (j10417@i j10418@x) ((lambda (j10421@rtd j10422@fields-alist) (begin (format j10412@port '" ~d. ~a" j10417@i (j10316@rpad (symbol->string (record-type-name j10421@rtd)) '" " j10416@max-condition-len)) (if (null? j10422@fields-alist) (newline j10412@port) (void)) ((letrec ((j10425@loop (lambda (j10427@first j10428@fields-alist) (if (null? j10428@fields-alist) '() ((lambda (j10431@field) (begin (if (not j10427@first) (display (j10316@rpad '"" '" " (+ '4 j10416@max-condition-len)) j10412@port) (void)) (display '"       " j10412@port) (display (car j10431@field) j10412@port) (display '": " j10412@port) (write (cdr j10431@field) j10412@port) (newline j10412@port) (j10425@loop '#f (cdr j10428@fields-alist)))) (car j10428@fields-alist)))))) j10425@loop) '#t j10422@fields-alist))) (record-rtd j10418@x) (j10320@record->field-alist j10418@x))) (simple-conditions j10411@e))))) '#f))) (set! j10320@record->field-alist (lambda (j10435@r) ((lambda (j10438@ref) (begin (set! j10438@ref (lambda (j10449@rtd j10450@i j10451@x) ((lambda (j10455@val) (if (symbol? j10455@val) (ungensym j10455@val) j10455@val)) ((record-accessor j10449@rtd j10450@i) j10451@x)))) ((letrec ((j10439@loop (lambda (j10441@ret j10442@rtd) (if j10442@rtd (j10439@loop (append j10441@ret (j10322@map-with-index (lambda (j10445@i j10446@field) (cons j10446@field (j10438@ref j10442@rtd j10445@i j10435@r))) (vector->list (record-type-field-names j10442@rtd)))) (record-type-parent j10442@rtd)) j10441@ret)))) j10439@loop) '() (record-rtd j10435@r)))) '#f))) (set! j10322@map-with-index (lambda (j10457@proc j10458@lst) ((letrec ((j10461@loop (lambda (j10463@i j10464@lst j10465@ret) (if (null? j10464@lst) (reverse j10465@ret) (j10461@loop (+ j10463@i '1) (cdr j10464@lst) (cons (j10457@proc j10463@i (car j10464@lst)) j10465@ret)))))) j10461@loop) '0 j10458@lst '()))) (set! j10324@repl (lambda j10469@x ((lambda (j10472@rec) (begin (set! j10472@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (j10475@j10473) (lambda () (with-exception-handler (lambda (j10477@e) ((call/cc (lambda (j10479@j10474) (j10475@j10473 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? j10477@e) (j10318@condition-printer j10477@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" j10477@e))) (j10479@j10474 (lambda () (raise-continuable j10477@e)))))))))) (lambda () ((letrec ((j10481@loop (lambda (j10483@line j10484@accum) ((lambda (j10488@parentheses-ok? j10490@eval-string-print) (begin (set! j10488@parentheses-ok? (lambda (j10495@text) ((letrec ((j10497@loop (lambda (j10499@chars j10500@p0 j10501@p1) (if (null? j10499@chars) (= '0 j10500@p0 j10501@p1) ((lambda (j10505@t) (if (memv j10505@t '(#\()) (j10497@loop (cdr j10499@chars) (+ j10500@p0 '1) j10501@p1) (if (memv j10505@t '(#\))) (j10497@loop (cdr j10499@chars) (- j10500@p0 '1) j10501@p1) (if (memv j10505@t '(#\[)) (j10497@loop (cdr j10499@chars) j10500@p0 (+ j10501@p1 '1)) (if (memv j10505@t '(#\])) (j10497@loop (cdr j10499@chars) j10500@p0 (- j10501@p1 '1)) (j10497@loop (cdr j10499@chars) j10500@p0 j10501@p1)))))) (car j10499@chars)))))) j10497@loop) (string->list j10495@text) '0 '0))) (set! j10490@eval-string-print (lambda (j10493@text) (if (not (or (string=? '"\n" j10493@text) (= '0 (string-length j10493@text)))) (write (j10338@eval-top-level (call-with-port (open-string-input-port j10493@text) read))) (void)))) (if (eof-object? j10483@line) (begin (j10490@eval-string-print j10484@accum) (exit)) ((lambda (j10491@current) (if (j10488@parentheses-ok? j10491@current) (j10490@eval-string-print j10491@current) (j10481@loop (get-line (current-input-port)) j10491@current))) (string-append j10484@accum j10483@line))))) '#f '#f)))) j10481@loop) (get-line (current-input-port)) '""))))))) (newline) (j10472@rec)))) (j10472@rec))) '#f))) (set! j10326@trace-printer (j1163@j941@make-parameter write)) (set! j10328@command-line (j1163@j941@make-parameter (get-command-line))) (set! j10330@local-library-path (lambda (j10507@filename) (cons (expand-path '".") (j1773@j1410@library-path)))) (set! j10332@load/args (lambda (j10509@filename . j10511@args) (begin (apply j10348@load-r6rs-top-level j10509@filename 'load j10511@args) (void)))) (set! j10334@load (lambda (j10513@filename) (begin (apply j10348@load-r6rs-top-level j10513@filename 'load (j10328@command-line)) (void)))) (set! j10336@ironscheme-build (lambda () (j10334@load '"ironscheme-buildscript.ss"))) (set! j10338@eval-top-level (lambda (j10515@x) (j9342@j2963@eval j10515@x (j9364@j3007@interaction-environment)))) (set! j10340@compile-system-libraries (lambda () (j10338@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! j10342@compile (lambda (j10517@filename) (j10348@load-r6rs-top-level j10517@filename 'compile))) (set! j10344@compile->closure (lambda (j10519@filename) (j10348@load-r6rs-top-level j10519@filename 'closure))) (set! j10346@pre-compile-r6rs-file (lambda (j10521@filename) (j10348@load-r6rs-top-level j10521@filename 'compile))) (set! j10348@load-r6rs-top-level (lambda (j10523@filename j10524@how . j10527@args) ((lambda (j10531@j10529@library-path j10532@j10530@library-path) ((lambda (j10535@swap) (dynamic-wind j10535@swap (lambda () ((lambda (j10537@x*) ((lambda (j10539@t) (if (memv j10539@t '(closure)) (j9363@j3005@pre-compile-r6rs-top-level j10537@x*) (if (memv j10539@t '(load)) ((lambda (j10543@j10541@command-line j10544@j10542@command-line) ((lambda (j10547@swap) (dynamic-wind j10547@swap (lambda () ((j9362@j3003@compile-r6rs-top-level j10537@x*))) j10547@swap)) (lambda () ((lambda (j10549@t) (begin (j10543@j10541@command-line j10544@j10542@command-line) (set! j10544@j10542@command-line j10549@t))) (j10543@j10541@command-line))))) j10328@command-line (cons j10523@filename (car j10527@args))) (if (memv j10539@t '(compile)) (begin (j9362@j3003@compile-r6rs-top-level j10537@x*) (j1777@j1418@serialize-all j1158@j931@serialize-library j1248@j1177@compile-core-expr)) (if '#f '#f (void)))))) j10524@how)) (with-input-from-file j10523@filename (lambda () ((letrec ((j10551@f (lambda () ((lambda (j10553@x) (if (eof-object? j10553@x) '() (cons j10553@x (j10551@f)))) (j1150@j915@read-annotated))))) j10551@f)))))) j10535@swap)) (lambda () ((lambda (j10555@t) (begin (j10531@j10529@library-path j10532@j10530@library-path) (set! j10532@j10530@library-path j10555@t))) (j10531@j10529@library-path))))) j1773@j1410@library-path (j10330@local-library-path j10523@filename)))) (begin (set! j10576@j10348@load-r6rs-top-level j10348@load-r6rs-top-level) (set! j10575@j10346@pre-compile-r6rs-file j10346@pre-compile-r6rs-file) (set! j10574@j10344@compile->closure j10344@compile->closure) (set! j10573@j10342@compile j10342@compile) (set! j10572@j10340@compile-system-libraries j10340@compile-system-libraries) (set! j10571@j10338@eval-top-level j10338@eval-top-level) (set! j10570@j10336@ironscheme-build j10336@ironscheme-build) (set! j10569@j10334@load j10334@load) (set! j10568@j10332@load/args j10332@load/args) (set! j10567@j10330@local-library-path j10330@local-library-path) (set! j10566@j10328@command-line j10328@command-line) (set! j10565@j10326@trace-printer j10326@trace-printer) (set! j10564@j10324@repl j10324@repl) (set! j10563@j10322@map-with-index j10322@map-with-index) (set! j10562@j10320@record->field-alist j10320@record->field-alist) (set! j10561@j10318@condition-printer j10318@condition-printer) (set! j10560@j10316@rpad j10316@rpad) (set! j10559@j10314@for-each-with-index j10314@for-each-with-index) (set! j10558@j10312@parse-and-add-library-path j10312@parse-and-add-library-path) (set! j10557@j10310@add-library-path! j10310@add-library-path!) (j1778@j1420@current-precompiled-library-loader j1159@j933@load-serialized-library) (set-symbol-value! 'load j10334@load) (set-symbol-value! 'pre-compile-r6rs-file j10346@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs j10338@eval-top-level) (set-symbol-value! 'int-env-syms j9333@j2945@interaction-environment-symbols) (set-symbol-value! 'expanded2core j1247@j1175@expanded->core) (set-symbol-value! 'trace-printer j10326@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (j10349@c) (condition (j10147@j9651@make-non-continuable-violation) (j10137@j9626@make-who-condition 'raise) (j10077@j9469@make-message-condition '"returned from non-continuable exception") (j10127@j9600@make-irritants-condition (list j10349@c))))) (j10312@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (j10312@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (j10310@add-library-path! (string-append (mosh-executable-path) '"/lib")) (j10310@add-library-path! (string-append (current-directory) '"/lib"))) (j10310@add-library-path! (string-append (standard-library-path) '"/lib")) ((lambda (j10351@prefix) (j1774@j1412@library-extensions (j10351@prefix '".mosh" (j1774@j1412@library-extensions)))) (lambda (j10353@ext j10354@ls) (append (map (lambda (j10357@x) (string-append j10353@ext j10357@x)) j10354@ls) j10354@ls))) ((lambda (j10359@args j10360@port) ((lambda (j10364@ref) (begin (set! j10364@ref (lambda (j10367@rtd j10368@i j10369@x) ((lambda (j10373@val) (if (symbol? j10373@val) (ungensym j10373@val) j10373@val)) ((record-accessor j10367@rtd j10368@i) j10369@x)))) (with-exception-handler (lambda (j10365@c) (if (condition? j10365@c) (j10318@condition-printer j10365@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" j10365@c))) (lambda () (if (null? j10359@args) (j10324@repl) (j10348@load-r6rs-top-level (car j10359@args) 'load (cdr j10359@args))))))) '#f)) (j10328@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
