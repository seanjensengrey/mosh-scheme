;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! ys2880@library-file-path->cache-path (unspecified)) (set! ys2882@read-annotated (unspecified)) (set! ys2884@annotation-stripped (unspecified)) (set! ys2886@annotation? (unspecified)) (set! ys2888@annotation-source (unspecified)) (set! ys288a@annotation-expression (unspecified)) (set! ys288c@scm->fasl (unspecified)) (set! ys288e@fasl-save (unspecified)) (set! ys2890@fasl-load (unspecified)) (set! ys2892@serialize-library (unspecified)) (set! ys2894@load-serialized-library (unspecified)) (set! ys2896@make-record-printer (unspecified)) (set! ys2898@compile-core (unspecified)) (set! ys289a@read-library-source-file (unspecified)) (set! ys289c@make-parameter (unspecified)) (set! ys289e@mosh-cache-dir (unspecified)) (set! ys2934@file-options-spec (unspecified)) (set! ys2880@library-file-path->cache-path (lambda (ys2935@x) (call-with-values (lambda () (open-string-output-port)) (lambda (ys293b@ys2938 ys293c@ys293a) (let ((ys293f@extract ys293c@ys293a) (ys2940@p ys293b@ys2938)) (let ((ys2944@display-hex '#f)) (begin (set! ys2944@display-hex (lambda (ys294d@n) (if (<= '0 ys294d@n '9) (display ys294d@n ys2940@p) (display (integer->char (+ (char->integer '#\a) (- ys294d@n '10))) ys2940@p)))) (begin (let ys2947@f ((ys2945@ls (string-split ys2935@x '#\/))) (if (not (null? ys2945@ls)) (begin (display '"_" ys2940@p) (for-each (lambda (ys2949@c) (if (or (char<=? '#\a ys2949@c '#\z) (char<=? '#\A ys2949@c '#\Z) (char<=? '#\0 ys2949@c '#\9) (memv ys2949@c '(#\- #\. #\_ #\~))) (display ys2949@c ys2940@p) (begin (display '"%" ys2940@p) (let ((ys294b@n (char->integer ys2949@c))) (begin (ys2944@display-hex (quotient ys294b@n '16)) (ys2944@display-hex (remainder ys294b@n '16))))))) (string->list (car ys2945@ls))) (ys2947@f (cdr ys2945@ls))) (void))) (ys293f@extract))))))))) (set! ys29af@ys2880@library-file-path->cache-path ys2880@library-file-path->cache-path) (set! ys2882@read-annotated read) (set! ys29b0@ys2882@read-annotated ys2882@read-annotated) (set! ys2884@annotation-stripped (lambda (ys294f@x) (ys288a@annotation-expression ys294f@x))) (set! ys29b1@ys2884@annotation-stripped ys2884@annotation-stripped) (set! ys2886@annotation? (lambda (ys2951@x) (source-info ys2951@x))) (set! ys29b2@ys2886@annotation? ys2886@annotation?) (set! ys2888@annotation-source (lambda (ys2953@x) (source-info ys2953@x))) (set! ys29b3@ys2888@annotation-source ys2888@annotation-source) (set! ys288a@annotation-expression (lambda (ys2955@x) (if (pair? ys2955@x) (cons (car ys2955@x) (cdr ys2955@x)) (if (procedure? ys2955@x) (set-source-info! ys2955@x '#f) ys2955@x)))) (set! ys29b4@ys288a@annotation-expression ys288a@annotation-expression) (set! ys288c@scm->fasl (lambda (ys2957@filename) (string-append (ys289e@mosh-cache-dir) '"/" (ys2880@library-file-path->cache-path ys2957@filename) '".mosh-fasl"))) (set! ys29b5@ys288c@scm->fasl ys288c@scm->fasl) (set! ys288e@fasl-save (lambda (ys2959@filename ys295a@obj) (call-with-port (open-file-output-port ys2959@filename) (lambda (ys295d@port) ((symbol-value 'fasl-write!) ys295a@obj ys295d@port))))) (set! ys29b6@ys288e@fasl-save ys288e@fasl-save) (set! ys2890@fasl-load (lambda (ys295f@filename) (call-with-port (open-file-input-port ys295f@filename) (symbol-value 'fasl-read!)))) (set! ys29b7@ys2890@fasl-load ys2890@fasl-load) (set! ys2892@serialize-library (lambda (ys2961@filename ys2962@obj) (begin (let ((ys2965@expanded2core (symbol-value 'expanded2core))) (let ((ys2967@compile (symbol-value 'compile-w/o-halt))) (let ((ys2969@code ys2962@obj)) (let ((ys296b@pivot (cddddr (cddddr ys2969@code)))) (let ((ys296d@visit (ys2967@compile (ys2965@expanded2core (car ys296b@pivot))))) (begin (set-car! ys296b@pivot ys296d@visit) (let ((ys296f@pivot (cdr ys296b@pivot))) (let ((ys2971@invoke (ys2967@compile (ys2965@expanded2core (car ys296f@pivot))))) (set-car! ys296f@pivot ys2971@invoke))))))))) (let ((ys2973@fasl-file (ys288c@scm->fasl ys2961@filename))) (begin (if (file-exists? ys2973@fasl-file) (delete-file ys2973@fasl-file) (void)) ((call/cc (lambda (ys2977@ys2975) (lambda () (with-exception-handler (lambda (ys2979@c) ((call/cc (lambda (ys297b@ys2976) (ys2977@ys2975 (lambda () (if '#t (begin (format (current-error-port) '"Warning:serialize-library failed " ys2961@filename) (if (file-exists? ys2973@fasl-file) (delete-file ys2973@fasl-file) (void)) '#f) (ys297b@ys2976 (lambda () (raise-continuable ys2979@c)))))))))) (lambda () (ys288e@fasl-save ys2973@fasl-file ys2962@obj)))))))))))) (set! ys29b8@ys2892@serialize-library ys2892@serialize-library) (set! ys2894@load-serialized-library (lambda (ys297d@filename ys297e@obj) (and (ys289e@mosh-cache-dir) (let ((ys2981@fasl-file (ys288c@scm->fasl ys297d@filename))) (if (and (file-exists? ys2981@fasl-file) ((symbol-value 'file-newer?) ys2981@fasl-file ys297d@filename)) (let ((ys2983@expanded2core (symbol-value 'expanded2core))) (let ((ys2985@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((ys2987@code (ys2890@fasl-load ys2981@fasl-file))) (let ((ys2989@pivot (cddddr (cddddr ys2987@code)))) (let ((ys298b@visit (car ys2989@pivot))) (let ((ys298d@visit-proc (lambda () (ys2985@eval-compiled-core ys298b@visit)))) (begin (set-car! ys2989@pivot ys298d@visit-proc) (let ((ys298f@pivot (cdr ys2989@pivot))) (let ((ys2991@invoke (car ys298f@pivot))) (begin (set-car! ys298f@pivot (lambda () (ys2985@eval-compiled-core ys2991@invoke))) (apply ys297e@obj ys2987@code))))))))))) '#f))))) (set! ys29b9@ys2894@load-serialized-library ys2894@load-serialized-library) (set! ys2896@make-record-printer (lambda (ys2993@name ys2994@printer) (lambda ys2997@x (begin (display '"record printer") (for-each display ys2997@x))))) (set! ys29ba@ys2896@make-record-printer ys2896@make-record-printer) (set! ys2898@compile-core (lambda ys2999@x (apply error 'comile-core '"not implementated" ys2999@x))) (set! ys29bb@ys2898@compile-core ys2898@compile-core) (set! ys289a@read-library-source-file (lambda (ys299b@file-name) (with-input-from-file ys299b@file-name ys2882@read-annotated))) (set! ys29bc@ys289a@read-library-source-file ys289a@read-library-source-file) (set! ys289c@make-parameter (lambda ys29ab (let ((ys29ac (length ys29ab))) (if (= ys29ac '1) (apply (lambda (ys299d@x) (ys289c@make-parameter ys299d@x (lambda (ys299f@x) ys299f@x))) ys29ab) (if (= ys29ac '2) (apply (lambda (ys29a1@x ys29a2@fender) (let ((ys29a5@x (ys29a2@fender ys29a1@x))) (lambda ys29a9 (let ((ys29aa (length ys29a9))) (if (= ys29aa '0) (apply (lambda () ys29a5@x) ys29a9) (if (= ys29aa '1) (apply (lambda (ys29a7@v) (set! ys29a5@x (ys29a2@fender ys29a7@v))) ys29a9) (error 'apply '"invalid arg count"))))))) ys29ab) (error 'apply '"invalid arg count")))))) (set! ys29bd@ys289c@make-parameter ys289c@make-parameter) (set! ys289e@mosh-cache-dir (ys289c@make-parameter '#f)) (set! ys29be@ys289e@mosh-cache-dir ys289e@mosh-cache-dir) (set! ys2934@file-options-spec (lambda (ys29ad@x) ys29ad@x)) (set! ys29bf@ys2934@file-options-spec ys2934@file-options-spec) (void))
(begin (set! ys29c5@current-primitive-locations (unspecified)) (set! ys29c7@mutable? (unspecified)) (set! ys29c9@rewriter (unspecified)) (set! ys29cb@expanded->core (unspecified)) (set! ys29cd@compile-core-expr (unspecified)) (set! ys29cf@pretty-print (unspecified)) (set! ys29d1@compile-core-expr-to-port (unspecified)) (set! ys29c5@current-primitive-locations (ys29bd@ys289c@make-parameter (lambda (ys29d2@x) '#f) (lambda (ys29d4@p) ys29d4@p))) (set! ys2a10@ys29c5@current-primitive-locations ys29c5@current-primitive-locations) (set! ys29c7@mutable? (lambda (ys29d6@x) (or (pair? ys29d6@x) (vector? ys29d6@x) (hashtable? ys29d6@x)))) (set! ys2a11@ys29c7@mutable? ys29c7@mutable?) (set! ys29c9@rewriter (lambda (ys29d8@quote-hack?) (let ((ys29db@f '#f)) (begin (set! ys29db@f (lambda (ys29dc@x) (if (pair? ys29dc@x) (let ((ys29de@t (car ys29dc@x))) (if (memv ys29de@t '(quote)) (if (and ys29d8@quote-hack? (ys29c7@mutable? (cadr ys29dc@x))) (let ((ys29e0@g (gensym))) (begin (set-symbol-value! ys29e0@g (cadr ys29dc@x)) ys29e0@g)) ys29dc@x) (if (memv ys29de@t '(case-lambda)) (cons 'case-lambda (map (lambda (ys29e2@x) (cons (car ys29e2@x) (map ys29db@f (cdr ys29e2@x)))) (cdr ys29dc@x))) (if (memv ys29de@t '(lambda)) (cons* 'lambda (cadr ys29dc@x) (map ys29db@f (cddr ys29dc@x))) (if (memv ys29de@t '(letrec)) (let ((ys29e4@bindings (cadr ys29dc@x)) (ys29e5@body* (cddr ys29dc@x))) (let ((ys29e8@lhs* (map car ys29e4@bindings)) (ys29e9@rhs* (map cadr ys29e4@bindings))) (cons* 'letrec (map list ys29e8@lhs* (map ys29db@f ys29e9@rhs*)) (map ys29db@f ys29e5@body*)))) (if (memv ys29de@t '(letrec*)) (let ((ys29ec@bindings (cadr ys29dc@x)) (ys29ed@body* (cddr ys29dc@x))) (let ((ys29f0@lhs* (map car ys29ec@bindings)) (ys29f1@rhs* (map cadr ys29ec@bindings))) (cons* 'letrec* (map list ys29f0@lhs* (map ys29db@f ys29f1@rhs*)) (map ys29db@f ys29ed@body*)))) (if (memv ys29de@t '(library-letrec*)) (let ((ys29f4@name (cadr ys29dc@x)) (ys29f5@x (cdr ys29dc@x))) (let ((ys29f8@bindings (cadr ys29f5@x)) (ys29f9@body* (cddr ys29f5@x))) (let ((ys29fc@lhs* (map car ys29f8@bindings)) (ys29fd@lhs** (map cadr ys29f8@bindings)) (ys29fe@rhs* (map caddr ys29f8@bindings))) (cons* 'library-letrec* ys29f4@name (map list ys29fc@lhs* ys29fd@lhs** (map ys29db@f ys29fe@rhs*)) (map ys29db@f ys29f9@body*))))) (if (memv ys29de@t '(begin)) (cons 'begin (map ys29db@f (cdr ys29dc@x))) (if (memv ys29de@t '(set!)) (list 'set! (cadr ys29dc@x) (ys29db@f (caddr ys29dc@x))) (if (memv ys29de@t '(primitive)) (let ((ys2a02@op (cadr ys29dc@x))) (let ((ys2a04@t ((ys29c5@current-primitive-locations) ys2a02@op))) (if ys2a04@t ((lambda (ys2a06@loc) ys2a06@loc) ys2a04@t) ys2a02@op))) (if (memv ys29de@t '(define)) ys29dc@x (if (list? ys29dc@x) (map ys29db@f ys29dc@x) (error 'rewrite '"invalid form ~s ~s" ys29dc@x (list? ys29dc@x)))))))))))))) ys29dc@x))) ys29db@f)))) (set! ys2a12@ys29c9@rewriter ys29c9@rewriter) (set! ys29cb@expanded->core (lambda (ys2a08@x) ((ys29c9@rewriter '#f) ys2a08@x))) (set! ys2a13@ys29cb@expanded->core ys29cb@expanded->core) (set! ys29cd@compile-core-expr (lambda (ys2a0a@x) ((ys29c9@rewriter '#f) ys2a0a@x))) (set! ys2a14@ys29cd@compile-core-expr ys29cd@compile-core-expr) (set! ys29cf@pretty-print write) (set! ys2a15@ys29cf@pretty-print ys29cf@pretty-print) (set! ys29d1@compile-core-expr-to-port (lambda (ys2a0c@x ys2a0d@p) (ys29cf@pretty-print ((ys29c9@rewriter '#f) ys2a0c@x) ys2a0d@p))) (set! ys2a16@ys29d1@compile-core-expr-to-port ys29d1@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! ys2a65@make-collection (unspecified)) (set! ys2a67@current-library-collection (unspecified)) (set! ys2a69@rp (unspecified)) (set! ys2a73@library? (unspecified)) (set! ys2a75@library-id (unspecified)) (set! ys2a77@set-library-id! (unspecified)) (set! ys2a79@library-name (unspecified)) (set! ys2a7b@set-library-name! (unspecified)) (set! ys2a7d@library-version (unspecified)) (set! ys2a7f@set-library-version! (unspecified)) (set! ys2a81@library-imp* (unspecified)) (set! ys2a83@set-library-imp*! (unspecified)) (set! ys2a85@library-vis* (unspecified)) (set! ys2a87@set-library-vis*! (unspecified)) (set! ys2a89@library-inv* (unspecified)) (set! ys2a8b@set-library-inv*! (unspecified)) (set! ys2a8d@library-subst (unspecified)) (set! ys2a8f@set-library-subst! (unspecified)) (set! ys2a91@library-env (unspecified)) (set! ys2a93@set-library-env! (unspecified)) (set! ys2a95@library-visit-state (unspecified)) (set! ys2a97@set-library-visit-state! (unspecified)) (set! ys2a99@library-invoke-state (unspecified)) (set! ys2a9b@set-library-invoke-state! (unspecified)) (set! ys2a9d@library-visit-code (unspecified)) (set! ys2a9f@set-library-visit-code! (unspecified)) (set! ys2aa1@library-invoke-code (unspecified)) (set! ys2aa3@set-library-invoke-code! (unspecified)) (set! ys2aa5@library-visible? (unspecified)) (set! ys2aa7@set-library-visible?! (unspecified)) (set! ys2aa9@library-source-file-name (unspecified)) (set! ys2aab@set-library-source-file-name! (unspecified)) (set! ys2aad@dummy (unspecified)) (set! ys2aaf@find-dependencies (unspecified)) (set! ys2ab1@find-library-by (unspecified)) (set! ys2ab3@library-path (unspecified)) (set! ys2ab5@library-extensions (unspecified)) (set! ys2ab7@library-name->file-name (unspecified)) (set! ys2ab9@file-locator (unspecified)) (set! ys2abb@serialize-all (unspecified)) (set! ys2abd@current-precompiled-library-loader (unspecified)) (set! ys2abf@try-load-from-file (unspecified)) (set! ys2ac1@library-loader (unspecified)) (set! ys2ac3@current-library-expander (unspecified)) (set! ys2ac5@external-pending-libraries (unspecified)) (set! ys2ac7@find-external-library (unspecified)) (set! ys2ac9@find-library-by-name (unspecified)) (set! ys2acb@library-exists? (unspecified)) (set! ys2acd@find-library-by-spec/die (unspecified)) (set! ys2acf@label->binding-table (unspecified)) (set! ys2ad1@install-library-record (unspecified)) (set! ys2ad3@install-library (unspecified)) (set! ys2ad5@imported-label->binding (unspecified)) (set! ys2ad7@invoke-library (unspecified)) (set! ys2ad9@visit-library (unspecified)) (set! ys2adb@invoke-library-by-spec (unspecified)) (set! ys2add@installed-libraries (unspecified)) (set! ys2adf@library-spec (unspecified)) (set! ys2a65@make-collection (lambda () (let ((ys2ae0@set '())) (let ((ys2ae3@set-cons '#f)) (begin (set! ys2ae3@set-cons (lambda (ys2ae8@x ys2ae9@ls) (if (memq ys2ae8@x ys2ae9@ls) ys2ae9@ls (cons ys2ae8@x ys2ae9@ls)))) (lambda ys2ae6 (let ((ys2ae7 (length ys2ae6))) (if (= ys2ae7 '0) (apply (lambda () ys2ae0@set) ys2ae6) (if (= ys2ae7 '1) (apply (lambda (ys2ae4@x) (set! ys2ae0@set (ys2ae3@set-cons ys2ae4@x ys2ae0@set))) ys2ae6) (error 'apply '"invalid arg count")))))))))) (set! ys2c54@ys2a65@make-collection ys2a65@make-collection) (set! ys2a67@current-library-collection (ys29bd@ys289c@make-parameter (ys2a65@make-collection) (lambda (ys2aec@x) (begin (if (not (procedure? ys2aec@x)) (assertion-violation 'current-library-collection '"not a procedure" ys2aec@x) (void)) ys2aec@x)))) (set! ys2c55@ys2a67@current-library-collection ys2a67@current-library-collection) (set! ys2a69@rp (ys29ba@ys2896@make-record-printer 'library (lambda (ys2aee@x ys2aef@p ys2af0@wr) (begin (if (not (ys2a73@library? ys2aee@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (ys2a7d@library-version ys2aee@x)) (ys2a79@library-name ys2aee@x) (append (ys2a79@library-name ys2aee@x) (list (ys2a7d@library-version ys2aee@x))))) ys2aef@p))))) (set! ys2c56@ys2a69@rp ys2a69@rp) (set! ys2a73@library? (lambda (ys2af4@x) (and (simple-struct? ys2af4@x) (eq? (simple-struct-name ys2af4@x) 'library)))) (set! ys2c57@ys2a73@library? ys2a73@library?) (set! ys2a75@library-id (lambda (ys2af6@x) (simple-struct-ref ys2af6@x '0))) (set! ys2c58@ys2a75@library-id ys2a75@library-id) (set! ys2a77@set-library-id! (lambda (ys2af8@x ys2af9@val) (simple-struct-set! ys2af8@x '0 ys2af9@val))) (set! ys2c59@ys2a77@set-library-id! ys2a77@set-library-id!) (set! ys2a79@library-name (lambda (ys2afc@x) (simple-struct-ref ys2afc@x '1))) (set! ys2c5a@ys2a79@library-name ys2a79@library-name) (set! ys2a7b@set-library-name! (lambda (ys2afe@x ys2aff@val) (simple-struct-set! ys2afe@x '1 ys2aff@val))) (set! ys2c5b@ys2a7b@set-library-name! ys2a7b@set-library-name!) (set! ys2a7d@library-version (lambda (ys2b02@x) (simple-struct-ref ys2b02@x '2))) (set! ys2c5c@ys2a7d@library-version ys2a7d@library-version) (set! ys2a7f@set-library-version! (lambda (ys2b04@x ys2b05@val) (simple-struct-set! ys2b04@x '2 ys2b05@val))) (set! ys2c5d@ys2a7f@set-library-version! ys2a7f@set-library-version!) (set! ys2a81@library-imp* (lambda (ys2b08@x) (simple-struct-ref ys2b08@x '3))) (set! ys2c5e@ys2a81@library-imp* ys2a81@library-imp*) (set! ys2a83@set-library-imp*! (lambda (ys2b0a@x ys2b0b@val) (simple-struct-set! ys2b0a@x '3 ys2b0b@val))) (set! ys2c5f@ys2a83@set-library-imp*! ys2a83@set-library-imp*!) (set! ys2a85@library-vis* (lambda (ys2b0e@x) (simple-struct-ref ys2b0e@x '4))) (set! ys2c60@ys2a85@library-vis* ys2a85@library-vis*) (set! ys2a87@set-library-vis*! (lambda (ys2b10@x ys2b11@val) (simple-struct-set! ys2b10@x '4 ys2b11@val))) (set! ys2c61@ys2a87@set-library-vis*! ys2a87@set-library-vis*!) (set! ys2a89@library-inv* (lambda (ys2b14@x) (simple-struct-ref ys2b14@x '5))) (set! ys2c62@ys2a89@library-inv* ys2a89@library-inv*) (set! ys2a8b@set-library-inv*! (lambda (ys2b16@x ys2b17@val) (simple-struct-set! ys2b16@x '5 ys2b17@val))) (set! ys2c63@ys2a8b@set-library-inv*! ys2a8b@set-library-inv*!) (set! ys2a8d@library-subst (lambda (ys2b1a@x) (simple-struct-ref ys2b1a@x '6))) (set! ys2c64@ys2a8d@library-subst ys2a8d@library-subst) (set! ys2a8f@set-library-subst! (lambda (ys2b1c@x ys2b1d@val) (simple-struct-set! ys2b1c@x '6 ys2b1d@val))) (set! ys2c65@ys2a8f@set-library-subst! ys2a8f@set-library-subst!) (set! ys2a91@library-env (lambda (ys2b20@x) (simple-struct-ref ys2b20@x '7))) (set! ys2c66@ys2a91@library-env ys2a91@library-env) (set! ys2a93@set-library-env! (lambda (ys2b22@x ys2b23@val) (simple-struct-set! ys2b22@x '7 ys2b23@val))) (set! ys2c67@ys2a93@set-library-env! ys2a93@set-library-env!) (set! ys2a95@library-visit-state (lambda (ys2b26@x) (simple-struct-ref ys2b26@x '8))) (set! ys2c68@ys2a95@library-visit-state ys2a95@library-visit-state) (set! ys2a97@set-library-visit-state! (lambda (ys2b28@x ys2b29@val) (simple-struct-set! ys2b28@x '8 ys2b29@val))) (set! ys2c69@ys2a97@set-library-visit-state! ys2a97@set-library-visit-state!) (set! ys2a99@library-invoke-state (lambda (ys2b2c@x) (simple-struct-ref ys2b2c@x '9))) (set! ys2c6a@ys2a99@library-invoke-state ys2a99@library-invoke-state) (set! ys2a9b@set-library-invoke-state! (lambda (ys2b2e@x ys2b2f@val) (simple-struct-set! ys2b2e@x '9 ys2b2f@val))) (set! ys2c6b@ys2a9b@set-library-invoke-state! ys2a9b@set-library-invoke-state!) (set! ys2a9d@library-visit-code (lambda (ys2b32@x) (simple-struct-ref ys2b32@x '10))) (set! ys2c6c@ys2a9d@library-visit-code ys2a9d@library-visit-code) (set! ys2a9f@set-library-visit-code! (lambda (ys2b34@x ys2b35@val) (simple-struct-set! ys2b34@x '10 ys2b35@val))) (set! ys2c6d@ys2a9f@set-library-visit-code! ys2a9f@set-library-visit-code!) (set! ys2aa1@library-invoke-code (lambda (ys2b38@x) (simple-struct-ref ys2b38@x '11))) (set! ys2c6e@ys2aa1@library-invoke-code ys2aa1@library-invoke-code) (set! ys2aa3@set-library-invoke-code! (lambda (ys2b3a@x ys2b3b@val) (simple-struct-set! ys2b3a@x '11 ys2b3b@val))) (set! ys2c6f@ys2aa3@set-library-invoke-code! ys2aa3@set-library-invoke-code!) (set! ys2aa5@library-visible? (lambda (ys2b3e@x) (simple-struct-ref ys2b3e@x '12))) (set! ys2c70@ys2aa5@library-visible? ys2aa5@library-visible?) (set! ys2aa7@set-library-visible?! (lambda (ys2b40@x ys2b41@val) (simple-struct-set! ys2b40@x '12 ys2b41@val))) (set! ys2c71@ys2aa7@set-library-visible?! ys2aa7@set-library-visible?!) (set! ys2aa9@library-source-file-name (lambda (ys2b44@x) (simple-struct-ref ys2b44@x '13))) (set! ys2c72@ys2aa9@library-source-file-name ys2aa9@library-source-file-name) (set! ys2aab@set-library-source-file-name! (lambda (ys2b46@x ys2b47@val) (simple-struct-set! ys2b46@x '13 ys2b47@val))) (set! ys2c73@ys2aab@set-library-source-file-name! ys2aab@set-library-source-file-name!) (set! ys2aad@dummy '3) (set! ys2c74@ys2aad@dummy ys2aad@dummy) (set! ys2aaf@find-dependencies (lambda (ys2b4a@ls) (if (null? ys2b4a@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! ys2c75@ys2aaf@find-dependencies ys2aaf@find-dependencies) (set! ys2ab1@find-library-by (lambda (ys2b4c@pred) (let ys2b50@f ((ys2b4e@ls ((ys2a67@current-library-collection)))) (if (null? ys2b4e@ls) '#f (if (ys2b4c@pred (car ys2b4e@ls)) (car ys2b4e@ls) (ys2b50@f (cdr ys2b4e@ls))))))) (set! ys2c76@ys2ab1@find-library-by ys2ab1@find-library-by) (set! ys2ab3@library-path (ys29bd@ys289c@make-parameter '(".") (lambda (ys2b52@x) (if (and (list? ys2b52@x) (for-all string? ys2b52@x)) (map (lambda (ys2b54@x) ys2b54@x) ys2b52@x) (assertion-violation 'library-path '"not a list of strings" ys2b52@x))))) (set! ys2c77@ys2ab3@library-path ys2ab3@library-path) (set! ys2ab5@library-extensions (ys29bd@ys289c@make-parameter '(".sls" ".ss" ".scm") (lambda (ys2b56@x) (if (and (list? ys2b56@x) (for-all string? ys2b56@x)) (map (lambda (ys2b58@x) ys2b58@x) ys2b56@x) (assertion-violation 'library-extensions '"not a list of strings" ys2b56@x))))) (set! ys2c78@ys2ab5@library-extensions ys2ab5@library-extensions) (set! ys2ab7@library-name->file-name (lambda (ys2b5a@x) (call-with-values (lambda () (open-string-output-port)) (lambda (ys2b60@ys2b5d ys2b61@ys2b5f) (let ((ys2b64@extract ys2b61@ys2b5f) (ys2b65@p ys2b60@ys2b5d)) (let ((ys2b69@display-hex '#f)) (begin (set! ys2b69@display-hex (lambda (ys2b72@n) (if (<= '0 ys2b72@n '9) (display ys2b72@n ys2b65@p) (display (integer->char (+ (char->integer '#\a) (- ys2b72@n '10))) ys2b65@p)))) (begin (let ys2b6c@f ((ys2b6a@ls ys2b5a@x)) (if (not (null? ys2b6a@ls)) (begin (display '"/" ys2b65@p) (for-each (lambda (ys2b6e@c) (if (or (char<=? '#\a ys2b6e@c '#\z) (char<=? '#\A ys2b6e@c '#\Z) (char<=? '#\0 ys2b6e@c '#\9) (memv ys2b6e@c '(#\- #\. #\_ #\~))) (display ys2b6e@c ys2b65@p) (begin (display '"%" ys2b65@p) (let ((ys2b70@n (char->integer ys2b6e@c))) (begin (ys2b69@display-hex (quotient ys2b70@n '16)) (ys2b69@display-hex (remainder ys2b70@n '16))))))) (string->list (symbol->string (car ys2b6a@ls)))) (ys2b6c@f (cdr ys2b6a@ls))) (void))) (ys2b64@extract))))))))) (set! ys2c79@ys2ab7@library-name->file-name ys2ab7@library-name->file-name) (set! ys2ab9@file-locator (ys29bd@ys289c@make-parameter (lambda (ys2b74@x) (let ((ys2b76@str (ys2ab7@library-name->file-name ys2b74@x))) (let ys2b7e@f ((ys2b78@ls (ys2ab3@library-path)) (ys2b79@exts (ys2ab5@library-extensions)) (ys2b7a@failed-list '())) (if (null? ys2b78@ls) (let ((ys2b88@ys2b83 '#f) (ys2b8a@ys2b85 '#f) (ys2b8c@ys2b84 '#f) (ys2b8f@ys2b82 '#f) (ys2b91@make-library-resolution-condition '#f) (ys2b93@ys2b80 '#f) (ys2b95@ys2b81 '#f) (ys2b97@library-resolution-condition? '#f) (ys2b99@condition-library '#f) (ys2b9b@condition-files '#f)) (begin (set! ys2b88@ys2b83 (make-record-type-descriptor '&library-resolution ys4e8f@ys4bd6@&condition-rtd 'ys2b86 '#f '#f '#((immutable library) (immutable files)))) (set! ys2b8a@ys2b85 '#f) (set! ys2b8c@ys2b84 (make-record-constructor-descriptor ys2b88@ys2b83 ys4e90@ys4bd8@&condition-rcd ys2b8a@ys2b85)) (set! ys2b8f@ys2b82 (record-predicate ys2b88@ys2b83)) (set! ys2b91@make-library-resolution-condition (record-constructor ys2b8c@ys2b84)) (set! ys2b93@ys2b80 (record-accessor ys2b88@ys2b83 '0)) (set! ys2b95@ys2b81 (record-accessor ys2b88@ys2b83 '1)) (set! ys2b97@library-resolution-condition? (condition-predicate ys2b88@ys2b83)) (set! ys2b99@condition-library (condition-accessor ys2b88@ys2b83 ys2b93@ys2b80)) (set! ys2b9b@condition-files (condition-accessor ys2b88@ys2b83 ys2b95@ys2b81)) (raise (condition (ys4eaf@ys4c70@make-error) (ys4ed1@ys4ccc@make-who-condition 'expander) (ys4e95@ys4c2d@make-message-condition '"cannot locate library in library-path") (ys2b91@make-library-resolution-condition ys2b74@x (reverse ys2b7a@failed-list)))))) (if (null? ys2b79@exts) (ys2b7e@f (cdr ys2b78@ls) (ys2ab5@library-extensions) ys2b7a@failed-list) (let ((ys2b9c@name (string-append (car ys2b78@ls) ys2b76@str (car ys2b79@exts)))) (if (file-exists? ys2b9c@name) ys2b9c@name (ys2b7e@f ys2b78@ls (cdr ys2b79@exts) (cons ys2b9c@name ys2b7a@failed-list))))))))) (lambda (ys2b9e@f) (if (procedure? ys2b9e@f) ys2b9e@f (assertion-violation 'file-locator '"not a procedure" ys2b9e@f))))) (set! ys2c7a@ys2ab9@file-locator ys2ab9@file-locator) (set! ys2abb@serialize-all (lambda (ys2ba0@serialize ys2ba1@compile) (let ((ys2ba5@library-desc '#f)) (begin (set! ys2ba5@library-desc (lambda (ys2ba8@x) (list (ys2a75@library-id ys2ba8@x) (ys2a79@library-name ys2ba8@x)))) (for-each (lambda (ys2ba6@x) (if (ys2aa9@library-source-file-name ys2ba6@x) (ys2ba0@serialize (ys2aa9@library-source-file-name ys2ba6@x) (list (ys2a75@library-id ys2ba6@x) (ys2a79@library-name ys2ba6@x) (ys2a7d@library-version ys2ba6@x) (map ys2ba5@library-desc (ys2a81@library-imp* ys2ba6@x)) (map ys2ba5@library-desc (ys2a85@library-vis* ys2ba6@x)) (map ys2ba5@library-desc (ys2a89@library-inv* ys2ba6@x)) (ys2a8d@library-subst ys2ba6@x) (ys2a91@library-env ys2ba6@x) (ys2ba1@compile (ys2a9d@library-visit-code ys2ba6@x)) (ys2ba1@compile (ys2aa1@library-invoke-code ys2ba6@x)) (ys2aa5@library-visible? ys2ba6@x))) (void))) ((ys2a67@current-library-collection))))))) (set! ys2c7b@ys2abb@serialize-all ys2abb@serialize-all) (set! ys2abd@current-precompiled-library-loader (ys29bd@ys289c@make-parameter (lambda (ys2baa@filename ys2bab@sk) '#f))) (set! ys2c7c@ys2abd@current-precompiled-library-loader ys2abd@current-precompiled-library-loader) (set! ys2abf@try-load-from-file (lambda (ys2bae@filename) ((ys2abd@current-precompiled-library-loader) ys2bae@filename (lambda ys2bd4 (let ((ys2bd5 (length ys2bd4))) (if (= ys2bd5 '11) (apply (lambda (ys2bb0@id ys2bb1@name ys2bb2@ver ys2bb3@imp* ys2bb4@vis* ys2bb5@inv* ys2bb6@exp-subst ys2bb7@exp-env ys2bb8@visit-proc ys2bb9@invoke-proc ys2bba@visible?) (let ys2bc8@f ((ys2bc6@deps (append ys2bb3@imp* ys2bb4@vis* ys2bb5@inv*))) (if (null? ys2bc6@deps) (begin (ys2ad3@install-library ys2bb0@id ys2bb1@name ys2bb2@ver ys2bb3@imp* ys2bb4@vis* ys2bb5@inv* ys2bb6@exp-subst ys2bb7@exp-env ys2bb8@visit-proc ys2bb9@invoke-proc '#f '#f ys2bba@visible? '#f) '#t) (let ((ys2bca@d (car ys2bc6@deps))) (let ((ys2bcc@label (car ys2bca@d)) (ys2bcd@dname (cadr ys2bca@d))) (let ((ys2bd0@l (ys2ac9@find-library-by-name ys2bcd@dname))) (if (and (ys2a73@library? ys2bd0@l) (eq? ys2bcc@label (ys2a75@library-id ys2bd0@l))) (ys2bc8@f (cdr ys2bc6@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" ys2bb1@name ys2bcd@dname ys2bae@filename ys2bd0@l ys2bcc@label (ys2a75@library-id ys2bd0@l)) '#f)))))))) ys2bd4) (if (>= ys2bd5 '0) (apply (lambda ys2bd2@others '#f) ys2bd4) (error 'apply '"invalid arg count")))))))) (set! ys2c7d@ys2abf@try-load-from-file ys2abf@try-load-from-file) (set! ys2ac1@library-loader (ys29bd@ys289c@make-parameter (lambda (ys2bd6@x) (let ((ys2bd8@file-name ((ys2ab9@file-locator) ys2bd6@x))) (if (not ys2bd8@file-name) (assertion-violation '#f '"cannot file library" ys2bd6@x) (or (ys2abf@try-load-from-file ys2bd8@file-name) ((ys2ac3@current-library-expander) (ys29bc@ys289a@read-library-source-file ys2bd8@file-name) ys2bd8@file-name (lambda (ys2bda@name) (if (not (fast-equal? ys2bda@name ys2bd6@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (ys2be0@ys2bdd ys2be1@ys2bdf) (let ((ys2be4@e ys2be1@ys2bdf) (ys2be5@p ys2be0@ys2bdd)) (begin (display '"expected to find library " ys2be5@p) (write ys2bd6@x ys2be5@p) (display '" in file " ys2be5@p) (display ys2bd8@file-name ys2be5@p) (display '", found " ys2be5@p) (write ys2bda@name ys2be5@p) (display '" instead" ys2be5@p) (ys2be4@e)))))) (void)))))))) (lambda (ys2be8@f) (if (procedure? ys2be8@f) ys2be8@f (assertion-violation 'library-locator '"not a procedure" ys2be8@f))))) (set! ys2c7e@ys2ac1@library-loader ys2ac1@library-loader) (set! ys2ac3@current-library-expander (ys29bd@ys289c@make-parameter (lambda (ys2bea@x) (assertion-violation 'library-expander '"not initialized")) (lambda (ys2bec@f) (if (procedure? ys2bec@f) ys2bec@f (assertion-violation 'library-expander '"not a procedure" ys2bec@f))))) (set! ys2c7f@ys2ac3@current-library-expander ys2ac3@current-library-expander) (set! ys2ac5@external-pending-libraries (ys29bd@ys289c@make-parameter '())) (set! ys2c80@ys2ac5@external-pending-libraries ys2ac5@external-pending-libraries) (set! ys2ac7@find-external-library (lambda (ys2bee@name) (begin (if (member ys2bee@name (ys2ac5@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" ys2bee@name) (void)) (let ((ys2bf4@ys2bf1 ys2ac5@external-pending-libraries) (ys2bf5@ys2bf3 (cons ys2bee@name (ys2ac5@external-pending-libraries)))) (let ((ys2bf8@swap (lambda () (let ((ys2bfa@t (ys2bf4@ys2bf1))) (begin (ys2bf4@ys2bf1 ys2bf5@ys2bf3) (set! ys2bf5@ys2bf3 ys2bfa@t)))))) (dynamic-wind ys2bf8@swap (lambda () (begin ((ys2ac1@library-loader) ys2bee@name) (or (ys2ab1@find-library-by (lambda (ys2bfc@x) (fast-equal? (ys2a79@library-name ys2bfc@x) ys2bee@name))) (assertion-violation '#f '"handling external library did not yield the correct library" ys2bee@name)))) ys2bf8@swap)))))) (set! ys2c81@ys2ac7@find-external-library ys2ac7@find-external-library) (set! ys2ac9@find-library-by-name (lambda (ys2bfe@name) (or (ys2ab1@find-library-by (lambda (ys2c00@x) (fast-equal? (ys2a79@library-name ys2c00@x) ys2bfe@name))) (ys2ac7@find-external-library ys2bfe@name)))) (set! ys2c82@ys2ac9@find-library-by-name ys2ac9@find-library-by-name) (set! ys2acb@library-exists? (lambda (ys2c02@name) (and (ys2ab1@find-library-by (lambda (ys2c04@x) (fast-equal? (ys2a79@library-name ys2c04@x) ys2c02@name))) '#t))) (set! ys2c83@ys2acb@library-exists? ys2acb@library-exists?) (set! ys2acd@find-library-by-spec/die (lambda (ys2c06@spec) (let ((ys2c08@id (car ys2c06@spec))) (or (ys2ab1@find-library-by (lambda (ys2c0a@x) (eq? ys2c08@id (ys2a75@library-id ys2c0a@x)))) (assertion-violation '#f '"cannot find library with required spec" ys2c06@spec))))) (set! ys2c84@ys2acd@find-library-by-spec/die ys2acd@find-library-by-spec/die) (set! ys2acf@label->binding-table (make-eq-hashtable)) (set! ys2c85@ys2acf@label->binding-table ys2acf@label->binding-table) (set! ys2ad1@install-library-record (lambda (ys2c0c@lib) (begin (let ((ys2c0e@exp-env (ys2a91@library-env ys2c0c@lib))) (for-each (lambda (ys2c10@x) (let ((ys2c12@label (car ys2c10@x)) (ys2c13@binding (cdr ys2c10@x))) (let ((ys2c16@binding (let ((ys2c18@t (car ys2c13@binding))) (if (memv ys2c18@t '(global)) (cons 'global (cons ys2c0c@lib (cdr ys2c13@binding))) (if (memv ys2c18@t '(global-macro)) (cons 'global-macro (cons ys2c0c@lib (cdr ys2c13@binding))) (if (memv ys2c18@t '(global-macro!)) (cons 'global-macro! (cons ys2c0c@lib (cdr ys2c13@binding))) ys2c13@binding)))))) (begin (if (hashtable-ref ys2acf@label->binding-table ys2c12@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" ys2c12@label (hashtable-ref ys2acf@label->binding-table ys2c12@label '#f) ys2c16@binding) (exit)) (void)) (hashtable-set! ys2acf@label->binding-table ys2c12@label ys2c16@binding))))) ys2c0e@exp-env)) ((ys2a67@current-library-collection) ys2c0c@lib)))) (set! ys2c86@ys2ad1@install-library-record ys2ad1@install-library-record) (set! ys2ad3@install-library (lambda (ys2c1a@id ys2c1b@name ys2c1c@ver ys2c1d@imp* ys2c1e@vis* ys2c1f@inv* ys2c20@exp-subst ys2c21@exp-env ys2c22@visit-proc ys2c23@invoke-proc ys2c24@visit-code ys2c25@invoke-code ys2c26@visible? ys2c27@source-file-name) (let ((ys2c36@imp-lib* (map ys2acd@find-library-by-spec/die ys2c1d@imp*)) (ys2c37@vis-lib* (map ys2acd@find-library-by-spec/die ys2c1e@vis*)) (ys2c38@inv-lib* (map ys2acd@find-library-by-spec/die ys2c1f@inv*))) (begin (if (not (and (symbol? ys2c1a@id) (list? ys2c1b@name) (list? ys2c1c@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" ys2c1a@id ys2c1b@name ys2c1c@ver) (void)) (if (ys2acb@library-exists? ys2c1b@name) (assertion-violation 'install-library '"library is already installed" ys2c1b@name) (void)) (let ((ys2c3c@lib (make-simple-struct 'library '15 (list ys2c1a@id ys2c1b@name ys2c1c@ver ys2c36@imp-lib* ys2c37@vis-lib* ys2c38@inv-lib* ys2c20@exp-subst ys2c21@exp-env ys2c22@visit-proc ys2c23@invoke-proc ys2c24@visit-code ys2c25@invoke-code ys2c26@visible? ys2c27@source-file-name)))) (ys2ad1@install-library-record ys2c3c@lib)))))) (set! ys2c87@ys2ad3@install-library ys2ad3@install-library) (set! ys2ad5@imported-label->binding (lambda (ys2c3e@lab) (hashtable-ref ys2acf@label->binding-table ys2c3e@lab '#f))) (set! ys2c88@ys2ad5@imported-label->binding ys2ad5@imported-label->binding) (set! ys2ad7@invoke-library (lambda (ys2c40@lib) (let ((ys2c42@invoke (ys2a99@library-invoke-state ys2c40@lib))) (if (procedure? ys2c42@invoke) (begin (ys2a9b@set-library-invoke-state! ys2c40@lib (lambda () (assertion-violation 'invoke '"circularity detected" ys2c40@lib))) (for-each ys2ad7@invoke-library (ys2a89@library-inv* ys2c40@lib)) (ys2a9b@set-library-invoke-state! ys2c40@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" ys2c40@lib))) (ys2c42@invoke) (ys2a9b@set-library-invoke-state! ys2c40@lib '#t)) (void))))) (set! ys2c89@ys2ad7@invoke-library ys2ad7@invoke-library) (set! ys2ad9@visit-library (lambda (ys2c44@lib) (let ((ys2c46@visit (ys2a95@library-visit-state ys2c44@lib))) (if (procedure? ys2c46@visit) (begin (ys2a97@set-library-visit-state! ys2c44@lib (lambda () (assertion-violation 'visit '"circularity detected" ys2c44@lib))) (for-each ys2ad7@invoke-library (ys2a85@library-vis* ys2c44@lib)) (ys2a97@set-library-visit-state! ys2c44@lib (lambda () (assertion-violation 'invoke '"first visit did not return" ys2c44@lib))) (ys2c46@visit) (ys2a97@set-library-visit-state! ys2c44@lib '#t)) (void))))) (set! ys2c8a@ys2ad9@visit-library ys2ad9@visit-library) (set! ys2adb@invoke-library-by-spec (lambda (ys2c48@spec) (ys2ad7@invoke-library (ys2acd@find-library-by-spec/die ys2c48@spec)))) (set! ys2c8b@ys2adb@invoke-library-by-spec ys2adb@invoke-library-by-spec) (set! ys2add@installed-libraries (lambda ys2c50 (let ((ys2c51 (length ys2c50))) (if (= ys2c51 '1) (apply (lambda (ys2c4a@all?) (let ys2c4e@f ((ys2c4c@ls ((ys2a67@current-library-collection)))) (if (null? ys2c4c@ls) '() (if (or ys2c4a@all? (ys2aa5@library-visible? (car ys2c4c@ls))) (cons (car ys2c4c@ls) (ys2c4e@f (cdr ys2c4c@ls))) (ys2c4e@f (cdr ys2c4c@ls)))))) ys2c50) (if (= ys2c51 '0) (apply (lambda () (ys2add@installed-libraries '#f)) ys2c50) (error 'apply '"invalid arg count")))))) (set! ys2c8c@ys2add@installed-libraries ys2add@installed-libraries) (set! ys2adf@library-spec (lambda (ys2c52@x) (begin (if (not (ys2a73@library? ys2c52@x)) (assertion-violation 'library-spec '"not a library" ys2c52@x) (void)) (list (ys2a75@library-id ys2c52@x) (ys2a79@library-name ys2c52@x) (ys2a7d@library-version ys2c52@x))))) (set! ys2c8d@ys2adf@library-spec ys2adf@library-spec) (void))
(begin (set! ys2c91@build-global-define (unspecified)) (set! ys2d02@build-lambda (unspecified)) (set! ys2d04@build-case-lambda (unspecified)) (set! ys2d32@build-sequence (unspecified)) (set! ys2d34@build-void (unspecified)) (set! ys2d36@build-letrec (unspecified)) (set! ys2d38@build-let (unspecified)) (set! ys2d3a@build-named-let (unspecified)) (set! ys2d3c@build-letrec* (unspecified)) (set! ys2d3e@build-library-letrec* (unspecified)) (set! ys2d40@build-receive (unspecified)) (set! ys2c91@build-global-define (lambda (ys2d41@x) (ys2d34@build-void))) (set! ys2dd5@ys2c91@build-global-define ys2c91@build-global-define) (set! ys2d02@build-lambda (lambda (ys2d43@ae ys2d44@vars ys2d45@exp) (list 'lambda ys2d44@vars ys2d45@exp))) (set! ys2dd6@ys2d02@build-lambda ys2d02@build-lambda) (set! ys2d04@build-case-lambda (lambda (ys2d49@ae ys2d4a@vars* ys2d4b@exp*) (let ((ys2d50@build-error '#f) (ys2d52@build-pred '#f) (ys2d54@build-apply '#f) (ys2d56@expand-case-lambda '#f)) (begin (set! ys2d50@build-error (lambda (ys2d87@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! ys2d52@build-pred (lambda (ys2d6f@ae ys2d70@n ys2d71@vars) (call-with-values (lambda () (let ys2d7d@f ((ys2d79@vars ys2d71@vars) (ys2d7a@count '0)) (if (pair? ys2d79@vars) (ys2d7d@f (cdr ys2d79@vars) (+ ys2d7a@count '1)) (if (null? ys2d79@vars) (values ys2d7a@count '=) (values ys2d7a@count '>=))))) (lambda (ys2d7f@ys2d76 ys2d80@ys2d78) (let ((ys2d83@pred ys2d80@ys2d78) (ys2d84@count ys2d7f@ys2d76)) (list (list 'primitive ys2d83@pred) ys2d70@n (list 'quote ys2d84@count))))))) (set! ys2d54@build-apply (lambda (ys2d67@ae ys2d68@g ys2d69@vars ys2d6a@exp) (list '(primitive apply) (ys2d02@build-lambda ys2d67@ae ys2d69@vars ys2d6a@exp) ys2d68@g))) (set! ys2d56@expand-case-lambda (lambda (ys2d57@ae ys2d58@vars ys2d59@exp*) (let ((ys2d5d@g (gensym)) (ys2d5e@n (gensym))) (list 'lambda ys2d5d@g (ys2d38@build-let ys2d57@ae (list ys2d5e@n) (list (list '(primitive length) ys2d5d@g)) (let ys2d65@f ((ys2d61@vars* ys2d4a@vars*) (ys2d62@exp* ys2d59@exp*)) (if (null? ys2d61@vars*) (ys2d50@build-error ys2d57@ae) (list 'if (ys2d52@build-pred ys2d57@ae ys2d5e@n (car ys2d61@vars*)) (ys2d54@build-apply ys2d57@ae ys2d5d@g (car ys2d61@vars*) (car ys2d62@exp*)) (ys2d65@f (cdr ys2d61@vars*) (cdr ys2d62@exp*)))))))))) (if (= (length ys2d4b@exp*) '1) (ys2d02@build-lambda ys2d49@ae (car ys2d4a@vars*) (car ys2d4b@exp*)) (ys2d56@expand-case-lambda ys2d49@ae ys2d4a@vars* ys2d4b@exp*)))))) (set! ys2dd7@ys2d04@build-case-lambda ys2d04@build-case-lambda) (set! ys2d32@build-sequence (lambda (ys2d89@ae ys2d8a@exps) (let ys2d8f@loop ((ys2d8d@exps ys2d8a@exps)) (if (null? (cdr ys2d8d@exps)) (car ys2d8d@exps) (if (equal? (car ys2d8d@exps) (ys2d34@build-void)) (ys2d8f@loop (cdr ys2d8d@exps)) (cons 'begin ys2d8d@exps)))))) (set! ys2dd8@ys2d32@build-sequence ys2d32@build-sequence) (set! ys2d34@build-void (lambda () '((primitive void)))) (set! ys2dd9@ys2d34@build-void ys2d34@build-void) (set! ys2d36@build-letrec (lambda (ys2d91@ae ys2d92@vars ys2d93@val-exps ys2d94@body-exp) (if (null? ys2d92@vars) ys2d94@body-exp (list 'letrec (map list ys2d92@vars ys2d93@val-exps) ys2d94@body-exp)))) (set! ys2dda@ys2d36@build-letrec ys2d36@build-letrec) (set! ys2d38@build-let (lambda (ys2d99@ae ys2d9a@vars ys2d9b@val-exps ys2d9c@body-exp) (if (null? ys2d9a@vars) ys2d9c@body-exp (list 'let (map list ys2d9a@vars ys2d9b@val-exps) ys2d9c@body-exp)))) (set! ys2ddb@ys2d38@build-let ys2d38@build-let) (set! ys2d3a@build-named-let (lambda (ys2da1@ae ys2da2@name ys2da3@vars ys2da4@val-exps ys2da5@body-exp) (list 'let ys2da2@name (map list ys2da3@vars ys2da4@val-exps) ys2da5@body-exp))) (set! ys2ddc@ys2d3a@build-named-let ys2d3a@build-named-let) (set! ys2d3c@build-letrec* (lambda (ys2dab@ae ys2dac@vars ys2dad@val-exps ys2dae@body-exp) (if (null? ys2dac@vars) ys2dae@body-exp (ys2d38@build-let ys2dab@ae ys2dac@vars (map (lambda (ys2db3@x) (list 'quote '#f)) ys2dac@vars) (ys2d32@build-sequence ys2dab@ae (append (map (lambda (ys2db5@lhs ys2db6@rhs) (list 'set! ys2db5@lhs ys2db6@rhs)) ys2dac@vars ys2dad@val-exps) (list ys2dae@body-exp))))))) (set! ys2ddd@ys2d3c@build-letrec* ys2d3c@build-letrec*) (set! ys2d3e@build-library-letrec* (lambda (ys2db9@ae ys2dba@name ys2dbb@vars ys2dbc@locs ys2dbd@val-exps ys2dbe@body-exp) (cons 'begin (append (map (lambda (ys2dc5@var) (cons 'set! (cons ys2dc5@var '((unspecified))))) ys2dbb@vars) (append (apply append (map (lambda (ys2dc7@var ys2dc8@loc ys2dc9@val-exp) (list (list 'set! ys2dc7@var ys2dc9@val-exp) (list 'set! ys2dc8@loc ys2dc7@var))) ys2dbb@vars ys2dbc@locs ys2dbd@val-exps)) (list ys2dbe@body-exp)))))) (set! ys2dde@ys2d3e@build-library-letrec* ys2d3e@build-library-letrec*) (set! ys2d40@build-receive (lambda (ys2dcd@ae ys2dce@vars ys2dcf@producer ys2dd0@body*) (begin (display '"************** in ") (cons 'receive (cons ys2dce@vars (cons ys2dcf@producer ys2dd0@body*)))))) (set! ys2ddf@ys2d40@build-receive ys2d40@build-receive) (void))
(begin (set! ys2dee@file-options-macro (unspecified)) (set! ys2df0@set-cons (unspecified)) (set! ys2df2@set-union (unspecified)) (set! ys2df7@top-mark* (unspecified)) (set! ys2df9@top-marked? (unspecified)) (set! ys2dfb@gen-lexical (unspecified)) (set! ys2dfd@gen-global (unspecified)) (set! ys2dff@gen-label (unspecified)) (set! ys2e01@gen-top-level-label (unspecified)) (set! ys2e03@gen-define-label+loc (unspecified)) (set! ys2e05@gen-define-label (unspecified)) (set! ys2e0f@rib? (unspecified)) (set! ys2e11@rib-sym* (unspecified)) (set! ys2e13@set-rib-sym*! (unspecified)) (set! ys2e15@rib-mark** (unspecified)) (set! ys2e17@set-rib-mark**! (unspecified)) (set! ys2e19@rib-label* (unspecified)) (set! ys2e1b@set-rib-label*! (unspecified)) (set! ys2e1d@rib-sealed/freq (unspecified)) (set! ys2e1f@set-rib-sealed/freq! (unspecified)) (set! ys2e21@rib-cache (unspecified)) (set! ys2e23@set-rib-cache! (unspecified)) (set! ys2e25@dummy (unspecified)) (set! ys2e27@make-empty-rib (unspecified)) (set! ys2e29@extend-rib! (unspecified)) (set! ys2e2b@extend-rib/nc! (unspecified)) (set! ys2e2d@make-rib-map (unspecified)) (set! ys2e2f@seal-rib! (unspecified)) (set! ys2e31@unseal-rib! (unspecified)) (set! ys2e33@make-full-rib (unspecified)) (set! ys2e35@rp (unspecified)) (set! ys2e3f@stx? (unspecified)) (set! ys2e41@stx-expr (unspecified)) (set! ys2e43@set-stx-expr! (unspecified)) (set! ys2e45@stx-mark* (unspecified)) (set! ys2e47@set-stx-mark*! (unspecified)) (set! ys2e49@stx-subst* (unspecified)) (set! ys2e4b@set-stx-subst*! (unspecified)) (set! ys2e4d@stx-ae* (unspecified)) (set! ys2e4f@set-stx-ae*! (unspecified)) (set! ys2e51@dummy (unspecified)) (set! ys2e53@datum->stx (unspecified)) (set! ys2e55@gen-mark (unspecified)) (set! ys2e57@anti-mark (unspecified)) (set! ys2e59@anti-mark? (unspecified)) (set! ys2e5b@mkstx (unspecified)) (set! ys2e5d@add-mark (unspecified)) (set! ys2e5f@add-subst (unspecified)) (set! ys2e61@syntax-kind? (unspecified)) (set! ys2e63@syntax-vector->list (unspecified)) (set! ys2e65@syntax-pair? (unspecified)) (set! ys2e67@syntax-vector? (unspecified)) (set! ys2e69@syntax-null? (unspecified)) (set! ys2e6b@syntax-list? (unspecified)) (set! ys2e6d@syntax-car (unspecified)) (set! ys2e6f@syntax-cdr (unspecified)) (set! ys2e71@syntax->list (unspecified)) (set! ys2e73@id? (unspecified)) (set! ys2e75@id->sym (unspecified)) (set! ys2e77@bound-id=? (unspecified)) (set! ys2e79@free-id=? (unspecified)) (set! ys2e7b@valid-bound-ids? (unspecified)) (set! ys2e7d@distinct-bound-ids? (unspecified)) (set! ys2e7f@bound-id-member? (unspecified)) (set! ys2e81@self-evaluating? (unspecified)) (set! ys2e83@strip-annotations (unspecified)) (set! ys2e85@strip (unspecified)) (set! ys2e87@stx->datum (unspecified)) (set! ys2e89@id->label (unspecified)) (set! ys2e8b@label->binding (unspecified)) (set! ys2e8d@make-binding (unspecified)) (set! ys2e8f@binding-type (unspecified)) (set! ys2e91@binding-value (unspecified)) (set! ys2e93@raise-unbound-error (unspecified)) (set! ys2e95@syntax-type (unspecified)) (set! ys2ea3@sanitize-binding (unspecified)) (set! ys2ea5@make-variable-transformer (unspecified)) (set! ys2ea7@variable-transformer? (unspecified)) (set! ys2ea9@variable-transformer-procedure (unspecified)) (set! ys2eab@make-eval-transformer (unspecified)) (set! ys2ffc@parse-define (unspecified)) (set! ys2ffe@parse-define-syntax (unspecified)) (set! ys3000@scheme-stx-hashtable (unspecified)) (set! ys3002@scheme-stx (unspecified)) (set! ys3004@lexical-var (unspecified)) (set! ys3006@lexical-mutable? (unspecified)) (set! ys3008@set-lexical-mutable! (unspecified)) (set! ys300a@add-lexical (unspecified)) (set! ys300c@add-lexicals (unspecified)) (set! ys300e@letrec-helper (unspecified)) (set! ys3010@let-transformer (unspecified)) (set! ys3012@letrec-transformer (unspecified)) (set! ys3014@letrec*-transformer (unspecified)) (set! ys3016@fluid-let-syntax-transformer (unspecified)) (set! ys3018@type-descriptor-transformer (unspecified)) (set! ys301a@record-type-descriptor-transformer (unspecified)) (set! ys301c@record-constructor-descriptor-transformer (unspecified)) (set! ys301e@when-macro (unspecified)) (set! ys3020@unless-macro (unspecified)) (set! ys3022@if-transformer (unspecified)) (set! ys3024@and-transformer (unspecified)) (set! ys3026@or-transformer (unspecified)) (set! ys3028@case-macro (unspecified)) (set! ys302a@quote-transformer (unspecified)) (set! ys302c@case-lambda-transformer (unspecified)) (set! ys302e@lambda-transformer (unspecified)) (set! ys3030@bless (unspecified)) (set! ys3032@with-syntax-macro (unspecified)) (set! ys3034@invalid-fmls-error (unspecified)) (set! ys3036@let-macro (unspecified)) (set! ys3038@let-values-macro (unspecified)) (set! ys303a@let*-values-macro (unspecified)) (set! ys303c@trace-lambda-macro (unspecified)) (set! ys303e@trace-define-macro (unspecified)) (set! ys3040@trace-define-syntax-macro (unspecified)) (set! ys3042@trace-let/rec-syntax (unspecified)) (set! ys3044@trace-let-syntax-macro (unspecified)) (set! ys3046@trace-letrec-syntax-macro (unspecified)) (set! ys3048@guard-macro (unspecified)) (set! ys304a@define-enumeration-macro (unspecified)) (set! ys304c@time-macro (unspecified)) (set! ys304e@delay-macro (unspecified)) (set! ys3050@assert-macro (unspecified)) (set! ys3052@endianness-macro (unspecified)) (set! ys3054@identifier-syntax-macro (unspecified)) (set! ys3056@do-macro (unspecified)) (set! ys3058@let*-macro (unspecified)) (set! ys305a@or-macro (unspecified)) (set! ys305c@and-macro (unspecified)) (set! ys305e@cond-macro (unspecified)) (set! ys3060@do-include (unspecified)) (set! ys3062@include-macro (unspecified)) (set! ys3064@include-into-macro (unspecified)) (set! ys3066@syntax-rules-macro (unspecified)) (set! ys3068@quasiquote-macro (unspecified)) (set! ys306a@quasisyntax-macro (unspecified)) (set! ys306c@define-struct-macro (unspecified)) (set! ys306e@define-record-type-macro (unspecified)) (set! ys3070@define-condition-type-macro (unspecified)) (set! ys3072@incorrect-usage-macro (unspecified)) (set! ys3074@parameterize-macro (unspecified)) (set! ys3076@foreign-call-transformer (unspecified)) (set! ys3078@convert-pattern (unspecified)) (set! ys307a@syntax-dispatch (unspecified)) (set! ys307c@ellipsis? (unspecified)) (set! ys307e@underscore? (unspecified)) (set! ys3080@verify-literals (unspecified)) (set! ys3082@syntax-case-transformer (unspecified)) (set! ys3084@ellipsis-map (unspecified)) (set! ys3086@syntax-transformer (unspecified)) (set! ys3088@core-macro-transformer (unspecified)) (set! ys308a@symbol-macro (unspecified)) (set! ys308c@macro-transformer (unspecified)) (set! ys308e@local-macro-transformer (unspecified)) (set! ys3090@do-macro-call (unspecified)) (set! ys3092@chi-macro (unspecified)) (set! ys3094@chi-local-macro (unspecified)) (set! ys3096@chi-global-macro (unspecified)) (set! ys3098@chi-expr* (unspecified)) (set! ys309a@chi-application (unspecified)) (set! ys309c@chi-expr (unspecified)) (set! ys309e@chi-set! (unspecified)) (set! ys30a0@verify-formals (unspecified)) (set! ys30a2@chi-lambda-clause (unspecified)) (set! ys30a4@chi-lambda-clause* (unspecified)) (set! ys30a6@chi-defun (unspecified)) (set! ys30a8@chi-rhs (unspecified)) (set! ys30aa@expand-interaction-rhs*/init* (unspecified)) (set! ys30ac@chi-rhs* (unspecified)) (set! ys30ae@find-bound=? (unspecified)) (set! ys30b0@find-dups (unspecified)) (set! ys30b2@chi-internal (unspecified)) (set! ys30b4@parse-module (unspecified)) (set! ys30be@module-interface? (unspecified)) (set! ys30c0@module-interface-first-mark (unspecified)) (set! ys30c2@set-module-interface-first-mark! (unspecified)) (set! ys30c4@module-interface-exp-id-vec (unspecified)) (set! ys30c6@set-module-interface-exp-id-vec! (unspecified)) (set! ys30c8@module-interface-exp-lab-vec (unspecified)) (set! ys30ca@set-module-interface-exp-lab-vec! (unspecified)) (set! ys30cc@dummy (unspecified)) (set! ys30ce@module-interface-exp-id* (unspecified)) (set! ys30d0@chi-internal-module (unspecified)) (set! ys30d2@chi-body* (unspecified)) (set! ys30d4@expand-transformer (unspecified)) (set! ys30d6@parse-exports (unspecified)) (set! ys30d8@parse-library-name (unspecified)) (set! ys30da@parse-library (unspecified)) (set! ys30dc@parse-import-spec* (unspecified)) (set! ys30de@make-top-rib (unspecified)) (set! ys30e0@make-collector (unspecified)) (set! ys30e2@inv-collector (unspecified)) (set! ys30e4@vis-collector (unspecified)) (set! ys30e6@imp-collector (unspecified)) (set! ys30e8@chi-library-internal (unspecified)) (set! ys30ea@chi-interaction-expr (unspecified)) (set! ys30ec@library-body-expander (unspecified)) (set! ys30ee@core-library-expander (unspecified)) (set! ys30f0@parse-top-level-program (unspecified)) (set! ys30f2@top-level-expander (unspecified)) (set! ys30f4@rp (unspecified)) (set! ys30fe@env? (unspecified)) (set! ys3100@env-names (unspecified)) (set! ys3102@set-env-names! (unspecified)) (set! ys3104@env-labels (unspecified)) (set! ys3106@set-env-labels! (unspecified)) (set! ys3108@env-itc (unspecified)) (set! ys310a@set-env-itc! (unspecified)) (set! ys310c@dummy (unspecified)) (set! ys310e@rp (unspecified)) (set! ys3118@interaction-env? (unspecified)) (set! ys311a@interaction-env-rib (unspecified)) (set! ys311c@set-interaction-env-rib! (unspecified)) (set! ys311e@interaction-env-r (unspecified)) (set! ys3120@set-interaction-env-r! (unspecified)) (set! ys3122@interaction-env-locs (unspecified)) (set! ys3124@set-interaction-env-locs! (unspecified)) (set! ys3126@dummy (unspecified)) (set! ys3128@interaction-environment-symbols (unspecified)) (set! ys312a@environment-bindings (unspecified)) (set! ys312c@parse-binding (unspecified)) (set! ys312e@environment? (unspecified)) (set! ys3130@environment-symbols (unspecified)) (set! ys3132@environment (unspecified)) (set! ys3134@null-environment (unspecified)) (set! ys3136@scheme-report-environment (unspecified)) (set! ys3138@expand (unspecified)) (set! ys313a@eval (unspecified)) (set! ys313c@library-expander (unspecified)) (set! ys313e@boot-library-expand (unspecified)) (set! ys3140@rev-map-append (unspecified)) (set! ys3142@build-exports (unspecified)) (set! ys3144@make-export-subst (unspecified)) (set! ys3146@make-export-env/macros (unspecified)) (set! ys3148@generate-temporaries (unspecified)) (set! ys314a@free-identifier=? (unspecified)) (set! ys314c@bound-identifier=? (unspecified)) (set! ys314e@make-source-condition (unspecified)) (set! ys3150@extract-position-condition (unspecified)) (set! ys3152@expression-position (unspecified)) (set! ys3154@assertion-error (unspecified)) (set! ys3156@syntax-error (unspecified)) (set! ys3158@syntax-violation* (unspecified)) (set! ys315a@syntax-violation (unspecified)) (set! ys315c@identifier? (unspecified)) (set! ys315e@datum->syntax (unspecified)) (set! ys3160@syntax->datum (unspecified)) (set! ys3162@ungensym-all (unspecified)) (set! ys3164@compile-r6rs-top-level (unspecified)) (set! ys3166@pre-compile-r6rs-top-level (unspecified)) (set! ys3168@interaction-environment (unspecified)) (set! ys316a@top-level-context (unspecified)) (set! ys2dee@file-options-macro (lambda (ys316b@x) (let ((ys316e@valid-option? '#f)) (begin (set! ys316e@valid-option? (lambda (ys3177@x) (and (ys2e73@id? ys3177@x) (memq (ys2e75@id->sym ys3177@x) '(no-fail no-create no-truncate))))) (let ((ys316f@t ys316b@x)) (let ((ys3171@ls/false (ys307a@syntax-dispatch ys316f@t '(_ . each-any)))) (if (and ys3171@ls/false (apply (lambda (ys3173@opt*) (for-all ys316e@valid-option? ys3173@opt*)) ys3171@ls/false)) (apply (lambda (ys3175@opt*) (ys3030@bless (list 'make-file-options (list 'quote ys3175@opt*)))) ys3171@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys316f@t)))))))) (set! ys4ac1@ys2dee@file-options-macro ys2dee@file-options-macro) (set! ys2df0@set-cons (lambda (ys3179@x ys317a@ls) (if (memq ys3179@x ys317a@ls) ys317a@ls (cons ys3179@x ys317a@ls)))) (set! ys4ac2@ys2df0@set-cons ys2df0@set-cons) (set! ys2df2@set-union (lambda (ys317d@ls1 ys317e@ls2) (if (null? ys317d@ls1) ys317e@ls2 (if (memq (car ys317d@ls1) ys317e@ls2) (ys2df2@set-union (cdr ys317d@ls1) ys317e@ls2) (cons (car ys317d@ls1) (ys2df2@set-union (cdr ys317d@ls1) ys317e@ls2)))))) (set! ys4ac3@ys2df2@set-union ys2df2@set-union) (set! ys2df7@top-mark* '(top)) (set! ys4ac4@ys2df7@top-mark* ys2df7@top-mark*) (set! ys2df9@top-marked? (lambda (ys3181@m*) (memq 'top ys3181@m*))) (set! ys4ac5@ys2df9@top-marked? ys2df9@top-marked?) (set! ys2dfb@gen-lexical (lambda (ys3183@sym) (if (symbol? ys3183@sym) (gensym ys3183@sym) (if (ys2e3f@stx? ys3183@sym) (ys2dfb@gen-lexical (ys2e75@id->sym ys3183@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" ys3183@sym))))) (set! ys4ac6@ys2dfb@gen-lexical ys2dfb@gen-lexical) (set! ys2dfd@gen-global (lambda (ys3185@x) (ys2dfb@gen-lexical ys3185@x))) (set! ys4ac7@ys2dfd@gen-global ys2dfd@gen-global) (set! ys2dff@gen-label (lambda (ys3187@_) (gensym))) (set! ys4ac8@ys2dff@gen-label ys2dff@gen-label) (set! ys2e01@gen-top-level-label (lambda (ys3189@id ys318a@rib) (let ((ys318e@find '#f)) (begin (set! ys318e@find (lambda (ys3199@sym ys319a@mark* ys319b@sym* ys319c@mark** ys319d@label*) (and (pair? ys319b@sym*) (if (and (eq? ys3199@sym (car ys319b@sym*)) (same-marks? ys319a@mark* (car ys319c@mark**))) (car ys319d@label*) (ys318e@find ys3199@sym ys319a@mark* (cdr ys319b@sym*) (cdr ys319c@mark**) (cdr ys319d@label*)))))) (let ((ys318f@sym (ys2e75@id->sym ys3189@id)) (ys3190@mark* (ys2e45@stx-mark* ys3189@id))) (let ((ys3193@sym* (ys2e11@rib-sym* ys318a@rib))) (let ((ys3195@t (and (memq ys318f@sym (ys2e11@rib-sym* ys318a@rib)) (ys318e@find ys318f@sym ys3190@mark* ys3193@sym* (ys2e15@rib-mark** ys318a@rib) (ys2e19@rib-label* ys318a@rib))))) (if ys3195@t ((lambda (ys3197@label) (if (ys2c88@ys2ad5@imported-label->binding ys3197@label) (gensym) ys3197@label)) ys3195@t) (gensym))))))))) (set! ys4ac9@ys2e01@gen-top-level-label ys2e01@gen-top-level-label) (set! ys2e03@gen-define-label+loc (lambda (ys31a3@id ys31a4@rib) (let ((ys31a7@t (ys316a@top-level-context))) (if ys31a7@t ((lambda (ys31a9@env) (let ((ys31ab@label (ys2e01@gen-top-level-label ys31a3@id ys31a4@rib)) (ys31ac@locs (ys3122@interaction-env-locs ys31a9@env))) (values ys31ab@label (let ((ys31af@t (assq ys31ab@label ys31ac@locs))) (if ys31af@t (cdr ys31af@t) (let ((ys31b1@loc (ys2dfb@gen-lexical ys31a3@id))) (begin (ys3124@set-interaction-env-locs! ys31a9@env (cons (cons ys31ab@label ys31b1@loc) ys31ac@locs)) ys31b1@loc))))))) ys31a7@t) (values (gensym) (ys2dfb@gen-lexical ys31a3@id)))))) (set! ys4aca@ys2e03@gen-define-label+loc ys2e03@gen-define-label+loc) (set! ys2e05@gen-define-label (lambda (ys31b3@id ys31b4@rib) (if (ys316a@top-level-context) (ys2e01@gen-top-level-label ys31b3@id ys31b4@rib) (gensym)))) (set! ys4acb@ys2e05@gen-define-label ys2e05@gen-define-label) (set! ys2e0f@rib? (lambda (ys31b7@x) (and (simple-struct? ys31b7@x) (eq? (simple-struct-name ys31b7@x) 'rib)))) (set! ys4acc@ys2e0f@rib? ys2e0f@rib?) (set! ys2e11@rib-sym* (lambda (ys31b9@x) (simple-struct-ref ys31b9@x '0))) (set! ys4acd@ys2e11@rib-sym* ys2e11@rib-sym*) (set! ys2e13@set-rib-sym*! (lambda (ys31bb@x ys31bc@val) (simple-struct-set! ys31bb@x '0 ys31bc@val))) (set! ys4ace@ys2e13@set-rib-sym*! ys2e13@set-rib-sym*!) (set! ys2e15@rib-mark** (lambda (ys31bf@x) (simple-struct-ref ys31bf@x '1))) (set! ys4acf@ys2e15@rib-mark** ys2e15@rib-mark**) (set! ys2e17@set-rib-mark**! (lambda (ys31c1@x ys31c2@val) (simple-struct-set! ys31c1@x '1 ys31c2@val))) (set! ys4ad0@ys2e17@set-rib-mark**! ys2e17@set-rib-mark**!) (set! ys2e19@rib-label* (lambda (ys31c5@x) (simple-struct-ref ys31c5@x '2))) (set! ys4ad1@ys2e19@rib-label* ys2e19@rib-label*) (set! ys2e1b@set-rib-label*! (lambda (ys31c7@x ys31c8@val) (simple-struct-set! ys31c7@x '2 ys31c8@val))) (set! ys4ad2@ys2e1b@set-rib-label*! ys2e1b@set-rib-label*!) (set! ys2e1d@rib-sealed/freq (lambda (ys31cb@x) (simple-struct-ref ys31cb@x '3))) (set! ys4ad3@ys2e1d@rib-sealed/freq ys2e1d@rib-sealed/freq) (set! ys2e1f@set-rib-sealed/freq! (lambda (ys31cd@x ys31ce@val) (simple-struct-set! ys31cd@x '3 ys31ce@val))) (set! ys4ad4@ys2e1f@set-rib-sealed/freq! ys2e1f@set-rib-sealed/freq!) (set! ys2e21@rib-cache (lambda (ys31d1@x) (simple-struct-ref ys31d1@x '4))) (set! ys4ad5@ys2e21@rib-cache ys2e21@rib-cache) (set! ys2e23@set-rib-cache! (lambda (ys31d3@x ys31d4@val) (simple-struct-set! ys31d3@x '4 ys31d4@val))) (set! ys4ad6@ys2e23@set-rib-cache! ys2e23@set-rib-cache!) (set! ys2e25@dummy '3) (set! ys4ad7@ys2e25@dummy ys2e25@dummy) (set! ys2e27@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! ys4ad8@ys2e27@make-empty-rib ys2e27@make-empty-rib) (set! ys2e29@extend-rib! (lambda (ys31d7@rib ys31d8@id ys31d9@label) (let ((ys31de@find '#f)) (begin (set! ys31de@find (lambda (ys31eb@sym ys31ec@mark* ys31ed@sym* ys31ee@mark** ys31ef@label*) (and (pair? ys31ed@sym*) (if (and (eq? ys31eb@sym (car ys31ed@sym*)) (same-marks? ys31ec@mark* (car ys31ee@mark**))) ys31ef@label* (ys31de@find ys31eb@sym ys31ec@mark* (cdr ys31ed@sym*) (cdr ys31ee@mark**) (cdr ys31ef@label*)))))) (begin (if (ys2e1d@rib-sealed/freq ys31d7@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" ys31d7@rib) (void)) (let ((ys31df@sym (ys2e75@id->sym ys31d8@id)) (ys31e0@mark* (ys2e45@stx-mark* ys31d8@id))) (let ((ys31e3@sym* (ys2e11@rib-sym* ys31d7@rib))) (let ((ys31e5@t (and (memq ys31df@sym (ys2e11@rib-sym* ys31d7@rib)) (ys31de@find ys31df@sym ys31e0@mark* ys31e3@sym* (ys2e15@rib-mark** ys31d7@rib) (ys2e19@rib-label* ys31d7@rib))))) (if ys31e5@t ((lambda (ys31e7@p) (if (not (eq? ys31d9@label (car ys31e7@p))) (if (ys316a@top-level-context) (set-car! ys31e7@p ys31d9@label) (ys315a@syntax-violation '#f '"multiple definitions of identifier" ys31d8@id)) (void))) ys31e5@t) (begin (if (ys2e21@rib-cache ys31d7@rib) (hashtable-update! (ys2e21@rib-cache ys31d7@rib) ys31df@sym (lambda (ys31e9@e) (cons (cons ys31e0@mark* ys31d9@label) ys31e9@e)) '()) (void)) (ys2e13@set-rib-sym*! ys31d7@rib (cons ys31df@sym ys31e3@sym*)) (ys2e17@set-rib-mark**! ys31d7@rib (cons ys31e0@mark* (ys2e15@rib-mark** ys31d7@rib))) (ys2e1b@set-rib-label*! ys31d7@rib (cons ys31d9@label (ys2e19@rib-label* ys31d7@rib))))))))))))) (set! ys4ad9@ys2e29@extend-rib! ys2e29@extend-rib!) (set! ys2e2b@extend-rib/nc! (lambda (ys31f5@rib ys31f6@id ys31f7@label) (let ((ys31fb@sym (ys2e75@id->sym ys31f6@id)) (ys31fc@mark* (ys2e45@stx-mark* ys31f6@id))) (let ((ys31ff@sym* (ys2e11@rib-sym* ys31f5@rib))) (begin (if (ys2e21@rib-cache ys31f5@rib) (hashtable-update! (ys2e21@rib-cache ys31f5@rib) ys31fb@sym (lambda (ys3201@e) (cons (cons ys31fc@mark* ys31f7@label) ys3201@e)) '()) (void)) (ys2e13@set-rib-sym*! ys31f5@rib (cons ys31fb@sym ys31ff@sym*)) (ys2e17@set-rib-mark**! ys31f5@rib (cons ys31fc@mark* (ys2e15@rib-mark** ys31f5@rib))) (ys2e1b@set-rib-label*! ys31f5@rib (cons ys31f7@label (ys2e19@rib-label* ys31f5@rib)))))))) (set! ys4ada@ys2e2b@extend-rib/nc! ys2e2b@extend-rib/nc!) (set! ys2e2d@make-rib-map (lambda (ys3203@sym*) (let ((ys3205@ht (make-eq-hashtable))) (let ys320b@f ((ys3207@i '0) (ys3208@sym* ys3203@sym*)) (if (null? ys3208@sym*) ys3205@ht (begin (hashtable-update! ys3205@ht (car ys3208@sym*) (lambda (ys320d@x) (cons ys3207@i ys320d@x)) '()) (ys320b@f (+ ys3207@i '1) (cdr ys3208@sym*)))))))) (set! ys4adb@ys2e2d@make-rib-map ys2e2d@make-rib-map) (set! ys2e2f@seal-rib! (lambda (ys320f@rib) (let ((ys3211@sym* (ys2e11@rib-sym* ys320f@rib))) (if (not (null? ys3211@sym*)) (begin (ys2e13@set-rib-sym*! ys320f@rib (list->vector ys3211@sym*)) (ys2e17@set-rib-mark**! ys320f@rib (list->vector (ys2e15@rib-mark** ys320f@rib))) (ys2e1b@set-rib-label*! ys320f@rib (list->vector (ys2e19@rib-label* ys320f@rib))) (ys2e1f@set-rib-sealed/freq! ys320f@rib (ys2e2d@make-rib-map ys3211@sym*))) (void))))) (set! ys4adc@ys2e2f@seal-rib! ys2e2f@seal-rib!) (set! ys2e31@unseal-rib! (lambda (ys3213@rib) (if (ys2e1d@rib-sealed/freq ys3213@rib) (begin (ys2e1f@set-rib-sealed/freq! ys3213@rib '#f) (ys2e13@set-rib-sym*! ys3213@rib (vector->list (ys2e11@rib-sym* ys3213@rib))) (ys2e17@set-rib-mark**! ys3213@rib (vector->list (ys2e15@rib-mark** ys3213@rib))) (ys2e1b@set-rib-label*! ys3213@rib (vector->list (ys2e19@rib-label* ys3213@rib)))) (void)))) (set! ys4add@ys2e31@unseal-rib! ys2e31@unseal-rib!) (set! ys2e33@make-full-rib (lambda (ys3215@id* ys3216@label*) (let ((ys3219@r (make-simple-struct 'rib '6 (list (map ys2e75@id->sym ys3215@id*) (map ys2e45@stx-mark* ys3215@id*) ys3216@label* '#f '#f)))) (begin (ys2e2f@seal-rib! ys3219@r) ys3219@r)))) (set! ys4ade@ys2e33@make-full-rib ys2e33@make-full-rib) (set! ys2e35@rp (ys29ba@ys2896@make-record-printer 'stx (lambda (ys321b@x ys321c@p ys321d@wr) (begin (display '"#<syntax " ys321c@p) (write (ys2e87@stx->datum ys321b@x) ys321c@p) (let ((ys3221@expr (ys2e41@stx-expr ys321b@x))) (if (ys29b2@ys2886@annotation? ys3221@expr) (let ((ys3223@src (ys29b3@ys2888@annotation-source ys3221@expr))) (if (pair? ys3223@src) (begin (display '" [" ys321c@p) (display (cdr ys3223@src) ys321c@p) (display '" of " ys321c@p) (display (car ys3223@src) ys321c@p) (display '"]" ys321c@p)) (void))) (void))) (display '">" ys321c@p))))) (set! ys4adf@ys2e35@rp ys2e35@rp) (set! ys2e3f@stx? (lambda (ys3225@x) (and (simple-struct? ys3225@x) (eq? (simple-struct-name ys3225@x) 'stx)))) (set! ys4ae0@ys2e3f@stx? ys2e3f@stx?) (set! ys2e41@stx-expr (lambda (ys3227@x) (simple-struct-ref ys3227@x '0))) (set! ys4ae1@ys2e41@stx-expr ys2e41@stx-expr) (set! ys2e43@set-stx-expr! (lambda (ys3229@x ys322a@val) (simple-struct-set! ys3229@x '0 ys322a@val))) (set! ys4ae2@ys2e43@set-stx-expr! ys2e43@set-stx-expr!) (set! ys2e45@stx-mark* (lambda (ys322d@x) (simple-struct-ref ys322d@x '1))) (set! ys4ae3@ys2e45@stx-mark* ys2e45@stx-mark*) (set! ys2e47@set-stx-mark*! (lambda (ys322f@x ys3230@val) (simple-struct-set! ys322f@x '1 ys3230@val))) (set! ys4ae4@ys2e47@set-stx-mark*! ys2e47@set-stx-mark*!) (set! ys2e49@stx-subst* (lambda (ys3233@x) (simple-struct-ref ys3233@x '2))) (set! ys4ae5@ys2e49@stx-subst* ys2e49@stx-subst*) (set! ys2e4b@set-stx-subst*! (lambda (ys3235@x ys3236@val) (simple-struct-set! ys3235@x '2 ys3236@val))) (set! ys4ae6@ys2e4b@set-stx-subst*! ys2e4b@set-stx-subst*!) (set! ys2e4d@stx-ae* (lambda (ys3239@x) (simple-struct-ref ys3239@x '3))) (set! ys4ae7@ys2e4d@stx-ae* ys2e4d@stx-ae*) (set! ys2e4f@set-stx-ae*! (lambda (ys323b@x ys323c@val) (simple-struct-set! ys323b@x '3 ys323c@val))) (set! ys4ae8@ys2e4f@set-stx-ae*! ys2e4f@set-stx-ae*!) (set! ys2e51@dummy '3) (set! ys4ae9@ys2e51@dummy ys2e51@dummy) (set! ys2e53@datum->stx (lambda (ys323f@id ys3240@datum) (make-simple-struct 'stx '5 (list ys3240@datum (ys2e45@stx-mark* ys323f@id) (ys2e49@stx-subst* ys323f@id) (ys2e4d@stx-ae* ys323f@id))))) (set! ys4aea@ys2e53@datum->stx ys2e53@datum->stx) (set! ys2e55@gen-mark (lambda () (string '#\m))) (set! ys4aeb@ys2e55@gen-mark ys2e55@gen-mark) (set! ys2e57@anti-mark '#f) (set! ys4aec@ys2e57@anti-mark ys2e57@anti-mark) (set! ys2e59@anti-mark? not) (set! ys4aed@ys2e59@anti-mark? ys2e59@anti-mark?) (set! ys2e5b@mkstx (lambda (ys3243@e ys3244@m* ys3245@s* ys3246@ae*) (if (and (ys2e3f@stx? ys3243@e) (not (ys2df9@top-marked? ys3244@m*))) (call-with-values (lambda () (join-wraps ys3244@m* ys3245@s* ys3246@ae* ys3243@e)) (lambda (ys3251@ys324c ys3252@ys324e ys3253@ys3250) (let ((ys3257@ae* ys3253@ys3250) (ys3258@s* ys3252@ys324e) (ys3259@m* ys3251@ys324c)) (make-simple-struct 'stx '5 (list (ys2e41@stx-expr ys3243@e) ys3259@m* ys3258@s* ys3257@ae*))))) (make-simple-struct 'stx '5 (list ys3243@e ys3244@m* ys3245@s* ys3246@ae*))))) (set! ys4aee@ys2e5b@mkstx ys2e5b@mkstx) (set! ys2e5d@add-mark (lambda (ys325d@m ys325e@e ys325f@ae) (ys2e5b@mkstx ys325e@e (list ys325d@m) '(shift) (list ys325f@ae)))) (set! ys4aef@ys2e5d@add-mark ys2e5d@add-mark) (set! ys2e5f@add-subst (lambda (ys3263@subst ys3264@e) (ys2e5b@mkstx ys3264@e '() (list ys3263@subst) '()))) (set! ys4af0@ys2e5f@add-subst ys2e5f@add-subst) (set! ys2e61@syntax-kind? (lambda (ys3267@x ys3268@p?) (if (ys2e3f@stx? ys3267@x) (ys2e61@syntax-kind? (ys2e41@stx-expr ys3267@x) ys3268@p?) (if (ys29b2@ys2886@annotation? ys3267@x) (ys2e61@syntax-kind? (ys29b4@ys288a@annotation-expression ys3267@x) ys3268@p?) (ys3268@p? ys3267@x))))) (set! ys4af1@ys2e61@syntax-kind? ys2e61@syntax-kind?) (set! ys2e63@syntax-vector->list (lambda (ys326b@x) (if (ys2e3f@stx? ys326b@x) (let ((ys326d@ls (ys2e63@syntax-vector->list (ys2e41@stx-expr ys326b@x))) (ys326e@m* (ys2e45@stx-mark* ys326b@x)) (ys326f@s* (ys2e49@stx-subst* ys326b@x)) (ys3270@ae* (ys2e4d@stx-ae* ys326b@x))) (map (lambda (ys3275@x) (ys2e5b@mkstx ys3275@x ys326e@m* ys326f@s* ys3270@ae*)) ys326d@ls)) (if (ys29b2@ys2886@annotation? ys326b@x) (ys2e63@syntax-vector->list (ys29b4@ys288a@annotation-expression ys326b@x)) (if (vector? ys326b@x) (vector->list ys326b@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" ys326b@x)))))) (set! ys4af2@ys2e63@syntax-vector->list ys2e63@syntax-vector->list) (set! ys2e65@syntax-pair? (lambda (ys3277@x) (ys2e61@syntax-kind? ys3277@x pair?))) (set! ys4af3@ys2e65@syntax-pair? ys2e65@syntax-pair?) (set! ys2e67@syntax-vector? (lambda (ys3279@x) (ys2e61@syntax-kind? ys3279@x vector?))) (set! ys4af4@ys2e67@syntax-vector? ys2e67@syntax-vector?) (set! ys2e69@syntax-null? (lambda (ys327b@x) (ys2e61@syntax-kind? ys327b@x null?))) (set! ys4af5@ys2e69@syntax-null? ys2e69@syntax-null?) (set! ys2e6b@syntax-list? (lambda (ys327d@x) (or (ys2e69@syntax-null? ys327d@x) (and (ys2e65@syntax-pair? ys327d@x) (ys2e6b@syntax-list? (ys2e6f@syntax-cdr ys327d@x)))))) (set! ys4af6@ys2e6b@syntax-list? ys2e6b@syntax-list?) (set! ys2e6d@syntax-car (lambda (ys327f@x) (if (ys2e3f@stx? ys327f@x) (ys2e5b@mkstx (ys2e6d@syntax-car (ys2e41@stx-expr ys327f@x)) (ys2e45@stx-mark* ys327f@x) (ys2e49@stx-subst* ys327f@x) (ys2e4d@stx-ae* ys327f@x)) (if (ys29b2@ys2886@annotation? ys327f@x) (ys2e6d@syntax-car (ys29b4@ys288a@annotation-expression ys327f@x)) (if (pair? ys327f@x) (car ys327f@x) (assertion-violation 'syntax-car '"BUG: not a pair" ys327f@x)))))) (set! ys4af7@ys2e6d@syntax-car ys2e6d@syntax-car) (set! ys2e6f@syntax-cdr (lambda (ys3281@x) (if (ys2e3f@stx? ys3281@x) (ys2e5b@mkstx (ys2e6f@syntax-cdr (ys2e41@stx-expr ys3281@x)) (ys2e45@stx-mark* ys3281@x) (ys2e49@stx-subst* ys3281@x) (ys2e4d@stx-ae* ys3281@x)) (if (ys29b2@ys2886@annotation? ys3281@x) (ys2e6f@syntax-cdr (ys29b4@ys288a@annotation-expression ys3281@x)) (if (pair? ys3281@x) (cdr ys3281@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" ys3281@x)))))) (set! ys4af8@ys2e6f@syntax-cdr ys2e6f@syntax-cdr) (set! ys2e71@syntax->list (lambda (ys3283@x) (if (ys2e65@syntax-pair? ys3283@x) (cons (ys2e6d@syntax-car ys3283@x) (ys2e71@syntax->list (ys2e6f@syntax-cdr ys3283@x))) (if (ys2e69@syntax-null? ys3283@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" ys3283@x))))) (set! ys4af9@ys2e71@syntax->list ys2e71@syntax->list) (set! ys2e73@id? (lambda (ys3285@x) (and (ys2e3f@stx? ys3285@x) (symbol? (ys2e41@stx-expr ys3285@x))))) (set! ys4afa@ys2e73@id? ys2e73@id?) (set! ys2e75@id->sym (lambda (ys3287@x) (ys2e41@stx-expr ys3287@x))) (set! ys4afb@ys2e75@id->sym ys2e75@id->sym) (set! ys2e77@bound-id=? (lambda (ys3289@x ys328a@y) (and (eq? (ys2e75@id->sym ys3289@x) (ys2e75@id->sym ys328a@y)) (same-marks? (ys2e45@stx-mark* ys3289@x) (ys2e45@stx-mark* ys328a@y))))) (set! ys4afc@ys2e77@bound-id=? ys2e77@bound-id=?) (set! ys2e79@free-id=? (lambda (ys328d@i ys328e@j) (let ((ys3291@t0 (id->real-label ys328d@i)) (ys3292@t1 (id->real-label ys328e@j))) (if (or ys3291@t0 ys3292@t1) (eq? ys3291@t0 ys3292@t1) (eq? (ys2e75@id->sym ys328d@i) (ys2e75@id->sym ys328e@j)))))) (set! ys4afd@ys2e79@free-id=? ys2e79@free-id=?) (set! ys2e7b@valid-bound-ids? (lambda (ys3295@id*) (and (for-all ys2e73@id? ys3295@id*) (ys2e7d@distinct-bound-ids? ys3295@id*)))) (set! ys4afe@ys2e7b@valid-bound-ids? ys2e7b@valid-bound-ids?) (set! ys2e7d@distinct-bound-ids? (lambda (ys3297@id*) (or (null? ys3297@id*) (and (not (ys2e7f@bound-id-member? (car ys3297@id*) (cdr ys3297@id*))) (ys2e7d@distinct-bound-ids? (cdr ys3297@id*)))))) (set! ys4aff@ys2e7d@distinct-bound-ids? ys2e7d@distinct-bound-ids?) (set! ys2e7f@bound-id-member? (lambda (ys3299@id ys329a@id*) (and (pair? ys329a@id*) (or (ys2e77@bound-id=? ys3299@id (car ys329a@id*)) (ys2e7f@bound-id-member? ys3299@id (cdr ys329a@id*)))))) (set! ys4b00@ys2e7f@bound-id-member? ys2e7f@bound-id-member?) (set! ys2e81@self-evaluating? (lambda (ys329d@x) (or (number? ys329d@x) (string? ys329d@x) (char? ys329d@x) (boolean? ys329d@x) (regexp? ys329d@x) (bytevector? ys329d@x)))) (set! ys4b01@ys2e81@self-evaluating? ys2e81@self-evaluating?) (set! ys2e83@strip-annotations (lambda (ys329f@x) (if (pair? ys329f@x) (cons (ys2e83@strip-annotations (car ys329f@x)) (ys2e83@strip-annotations (cdr ys329f@x))) (if (vector? ys329f@x) (vector-map ys2e83@strip-annotations ys329f@x) (if (ys29b2@ys2886@annotation? ys329f@x) (ys29b1@ys2884@annotation-stripped ys329f@x) ys329f@x))))) (set! ys4b02@ys2e83@strip-annotations ys2e83@strip-annotations) (set! ys2e85@strip (lambda (ys32a1@x ys32a2@m*) (if (ys2df9@top-marked? ys32a2@m*) (if (or (ys29b2@ys2886@annotation? ys32a1@x) (and (pair? ys32a1@x) (ys29b2@ys2886@annotation? (car ys32a1@x))) (and (vector? ys32a1@x) (> (vector-length ys32a1@x) '0) (ys29b2@ys2886@annotation? (vector-ref ys32a1@x '0)))) (ys2e83@strip-annotations ys32a1@x) ys32a1@x) (let ys32a7@f ((ys32a5@x ys32a1@x)) (if (ys2e3f@stx? ys32a5@x) (ys2e85@strip (ys2e41@stx-expr ys32a5@x) (ys2e45@stx-mark* ys32a5@x)) (if (ys29b2@ys2886@annotation? ys32a5@x) (ys29b1@ys2884@annotation-stripped ys32a5@x) (if (pair? ys32a5@x) (let ((ys32a9@a (ys32a7@f (car ys32a5@x))) (ys32aa@d (ys32a7@f (cdr ys32a5@x)))) (if (and (eq? ys32a9@a (car ys32a5@x)) (eq? ys32aa@d (cdr ys32a5@x))) ys32a5@x (cons ys32a9@a ys32aa@d))) (if (vector? ys32a5@x) (let ((ys32ad@old (vector->list ys32a5@x))) (let ((ys32af@new (map ys32a7@f ys32ad@old))) (if (for-all eq? ys32ad@old ys32af@new) ys32a5@x (list->vector ys32af@new)))) ys32a5@x)))))))) (set! ys4b03@ys2e85@strip ys2e85@strip) (set! ys2e87@stx->datum (lambda (ys32b1@x) (ys2e85@strip ys32b1@x '()))) (set! ys4b04@ys2e87@stx->datum ys2e87@stx->datum) (set! ys2e89@id->label (lambda (ys32b3@id) (or (id->real-label ys32b3@id) (let ((ys32b5@t (ys316a@top-level-context))) (if ys32b5@t ((lambda (ys32b7@env) (let ((ys32b9@rib (ys311a@interaction-env-rib ys32b7@env))) (call-with-values (lambda () (ys2e03@gen-define-label+loc ys32b3@id ys32b9@rib)) (lambda (ys32bf@ys32bc ys32c0@ys32be) (let ((ys32c3@loc_ ys32c0@ys32be) (ys32c4@lab ys32bf@ys32bc)) (begin (ys2e29@extend-rib! ys32b9@rib ys32b3@id ys32c4@lab) ys32c4@lab)))))) ys32b5@t) '#f))))) (set! ys4b05@ys2e89@id->label ys2e89@id->label) (set! ys2e8b@label->binding (lambda (ys32c7@x ys32c8@r) (let ((ys32cb@t (ys2c88@ys2ad5@imported-label->binding ys32c7@x))) (if ys32cb@t ((lambda (ys32cd@b) (if (and (pair? ys32cd@b) (eq? (car ys32cd@b) '$core-rtd)) (cons '$rtd (map ys3030@bless (cdr ys32cd@b))) (if (and (pair? ys32cd@b) (eq? (car ys32cd@b) 'global-rtd)) (let ((ys32cf@lib (cadr ys32cd@b)) (ys32d0@loc (cddr ys32cd@b))) (cons '$rtd (symbol-value ys32d0@loc))) ys32cd@b))) ys32cb@t) (let ((ys32d3@t (assq ys32c7@x ys32c8@r))) (if ys32d3@t (cdr ys32d3@t) (let ((ys32d5@t (ys316a@top-level-context))) (if ys32d5@t ((lambda (ys32d7@env) (let ((ys32d9@t (assq ys32c7@x (ys3122@interaction-env-locs ys32d7@env)))) (if ys32d9@t ((lambda (ys32db@p) (cons* 'lexical (cdr ys32db@p) '#f)) ys32d9@t) '(displaced-lexical . #f)))) ys32d5@t) '(displaced-lexical . #f))))))))) (set! ys4b06@ys2e8b@label->binding ys2e8b@label->binding) (set! ys2e8d@make-binding cons) (set! ys4b07@ys2e8d@make-binding ys2e8d@make-binding) (set! ys2e8f@binding-type car) (set! ys4b08@ys2e8f@binding-type ys2e8f@binding-type) (set! ys2e91@binding-value cdr) (set! ys4b09@ys2e91@binding-value ys2e91@binding-value) (set! ys2e93@raise-unbound-error (lambda (ys32dd@id) (ys3158@syntax-violation* '#f '"unbound identifier" ys32dd@id (ys4eff@ys4d45@make-undefined-violation)))) (set! ys4b0a@ys2e93@raise-unbound-error ys2e93@raise-unbound-error) (set! ys2e95@syntax-type (lambda (ys32df@e ys32e0@r) (if (ys2e73@id? ys32df@e) (let ((ys32e3@id ys32df@e)) (let ((ys32e5@label (ys2e89@id->label ys32e3@id))) (let ((ys32e7@b (ys2e8b@label->binding ys32e5@label ys32e0@r))) (let ((ys32e9@type (ys2e8f@binding-type ys32e7@b))) (begin (if (not ys32e5@label) (ys2e93@raise-unbound-error ys32e3@id) (void)) (let ((ys32eb@t ys32e9@type)) (if (memv ys32eb@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values ys32e9@type (ys2e91@binding-value ys32e7@b) ys32e3@id) (values 'other '#f '#f)))))))) (if (ys2e65@syntax-pair? ys32df@e) (let ((ys32ed@id (ys2e6d@syntax-car ys32df@e))) (if (ys2e73@id? ys32ed@id) (let ((ys32ef@label (ys2e89@id->label ys32ed@id))) (let ((ys32f1@b (ys2e8b@label->binding ys32ef@label ys32e0@r))) (let ((ys32f3@type (ys2e8f@binding-type ys32f1@b))) (begin (if (not ys32ef@label) (ys2e93@raise-unbound-error ys32ed@id) (void)) (let ((ys32f5@t ys32f3@type)) (if (memv ys32f5@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values ys32f3@type (ys2e91@binding-value ys32f1@b) ys32ed@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((ys32f7@d (ys2e87@stx->datum ys32df@e))) (if (ys2e81@self-evaluating? ys32f7@d) (values 'constant ys32f7@d '#f) (values 'other '#f '#f))))))) (set! ys4b0b@ys2e95@syntax-type ys2e95@syntax-type) (set! ys2ea3@sanitize-binding (lambda (ys32f9@x ys32fa@src) (if (procedure? ys32f9@x) (cons* 'local-macro ys32f9@x ys32fa@src) (if (and (pair? ys32f9@x) (eq? (car ys32f9@x) 'macro!) (procedure? (cdr ys32f9@x))) (cons* 'local-macro! (cdr ys32f9@x) ys32fa@src) (if (and (pair? ys32f9@x) (eq? (car ys32f9@x) '$rtd)) ys32f9@x (assertion-violation 'expand '"invalid transformer" ys32f9@x)))))) (set! ys4b0c@ys2ea3@sanitize-binding ys2ea3@sanitize-binding) (set! ys2ea5@make-variable-transformer (lambda (ys32fd@x) (if (procedure? ys32fd@x) (cons 'macro! ys32fd@x) (assertion-violation 'make-variable-transformer '"not a procedure" ys32fd@x)))) (set! ys4b0d@ys2ea5@make-variable-transformer ys2ea5@make-variable-transformer) (set! ys2ea7@variable-transformer? (lambda (ys32ff@x) (and (pair? ys32ff@x) (eq? (car ys32ff@x) 'macro!) (procedure? (cdr ys32ff@x))))) (set! ys4b0e@ys2ea7@variable-transformer? ys2ea7@variable-transformer?) (set! ys2ea9@variable-transformer-procedure (lambda (ys3301@x) (if (ys2ea7@variable-transformer? ys3301@x) (cdr ys3301@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" ys3301@x)))) (set! ys4b0f@ys2ea9@variable-transformer-procedure ys2ea9@variable-transformer-procedure) (set! ys2eab@make-eval-transformer (lambda (ys3303@x) (ys2ea3@sanitize-binding (eval-core (ys2a13@ys29cb@expanded->core ys3303@x)) ys3303@x))) (set! ys4b10@ys2eab@make-eval-transformer ys2eab@make-eval-transformer) (set! ys2ffc@parse-define (lambda (ys3305@x) (let ((ys3307@t ys3305@x)) (let ((ys3309@ls/false (ys307a@syntax-dispatch ys3307@t '(_ (any . any) any . each-any)))) (if (and ys3309@ls/false (apply (lambda (ys330b@id ys330c@fmls ys330d@b ys330e@b*) (ys2e73@id? ys330b@id)) ys3309@ls/false)) (apply (lambda (ys3313@id ys3314@fmls ys3315@b ys3316@b*) (begin (ys30a0@verify-formals ys3314@fmls ys3305@x) (values ys3313@id (cons 'defun (cons ys3314@fmls (cons ys3315@b ys3316@b*)))))) ys3309@ls/false) (let ((ys331b@t ys3307@t)) (let ((ys331d@ls/false (ys307a@syntax-dispatch ys331b@t '(_ any any)))) (if (and ys331d@ls/false (apply (lambda (ys331f@id ys3320@val) (ys2e73@id? ys331f@id)) ys331d@ls/false)) (apply (lambda (ys3323@id ys3324@val) (values ys3323@id (cons 'expr ys3324@val))) ys331d@ls/false) (let ((ys3327@t ys331b@t)) (let ((ys3329@ls/false (ys307a@syntax-dispatch ys3327@t '(_ any)))) (if (and ys3329@ls/false (apply (lambda (ys332b@id) (ys2e73@id? ys332b@id)) ys3329@ls/false)) (apply (lambda (ys332d@id) (values ys332d@id (cons 'expr (ys3030@bless '(void))))) ys3329@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3327@t)))))))))))) (set! ys4b11@ys2ffc@parse-define ys2ffc@parse-define) (set! ys2ffe@parse-define-syntax (lambda (ys332f@x) (let ((ys3331@t ys332f@x)) (let ((ys3333@ls/false (ys307a@syntax-dispatch ys3331@t '(_ any any)))) (if (and ys3333@ls/false (apply (lambda (ys3335@id ys3336@val) (ys2e73@id? ys3335@id)) ys3333@ls/false)) (apply (lambda (ys3339@id ys333a@val) (values ys3339@id ys333a@val)) ys3333@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3331@t)))))) (set! ys4b12@ys2ffe@parse-define-syntax ys2ffe@parse-define-syntax) (set! ys3000@scheme-stx-hashtable (make-eq-hashtable)) (set! ys4b13@ys3000@scheme-stx-hashtable ys3000@scheme-stx-hashtable) (set! ys3002@scheme-stx (lambda (ys333d@sym) (or (hashtable-ref ys3000@scheme-stx-hashtable ys333d@sym '#f) (let ((ys333f@subst (ys2c64@ys2a8d@library-subst (ys2c82@ys2ac9@find-library-by-name '(psyntax system $all))))) (let ((ys3341@stx (make-simple-struct 'stx '5 (list ys333d@sym ys2df7@top-mark* '() '())))) (let ((ys3343@stx (let ((ys3345@t (assq ys333d@sym ys333f@subst))) (if ys3345@t ((lambda (ys3347@x) (let ((ys3349@name (car ys3347@x)) (ys334a@label (cdr ys3347@x))) (ys2e5f@add-subst (make-simple-struct 'rib '6 (list (list ys3349@name) (list ys2df7@top-mark*) (list ys334a@label) '#f '#f)) ys3341@stx))) ys3345@t) ys3341@stx)))) (begin (hashtable-set! ys3000@scheme-stx-hashtable ys333d@sym ys3343@stx) ys3343@stx))))))) (set! ys4b14@ys3002@scheme-stx ys3002@scheme-stx) (set! ys3004@lexical-var car) (set! ys4b15@ys3004@lexical-var ys3004@lexical-var) (set! ys3006@lexical-mutable? cdr) (set! ys4b16@ys3006@lexical-mutable? ys3006@lexical-mutable?) (set! ys3008@set-lexical-mutable! set-cdr!) (set! ys4b17@ys3008@set-lexical-mutable! ys3008@set-lexical-mutable!) (set! ys300a@add-lexical (lambda (ys334d@lab ys334e@lex ys334f@r) (cons (cons* ys334d@lab 'lexical ys334e@lex '#f) ys334f@r))) (set! ys4b18@ys300a@add-lexical ys300a@add-lexical) (set! ys300c@add-lexicals (lambda (ys3353@lab* ys3354@lex* ys3355@r) (if (null? ys3353@lab*) ys3355@r (ys300c@add-lexicals (cdr ys3353@lab*) (cdr ys3354@lex*) (ys300a@add-lexical (car ys3353@lab*) (car ys3354@lex*) ys3355@r))))) (set! ys4b19@ys300c@add-lexicals ys300c@add-lexicals) (set! ys300e@letrec-helper (lambda (ys3359@e ys335a@r ys335b@mr ys335c@build) (let ((ys3361@t ys3359@e)) (let ((ys3363@ls/false (ys307a@syntax-dispatch ys3361@t '(_ #(each (any any)) any . each-any)))) (if ys3363@ls/false (apply (lambda (ys3365@lhs* ys3366@rhs* ys3367@b ys3368@b*) (if (not (ys2e7b@valid-bound-ids? ys3365@lhs*)) (ys3034@invalid-fmls-error ys3359@e ys3365@lhs*) (let ((ys336d@lex* (map ys2dfb@gen-lexical ys3365@lhs*)) (ys336e@lab* (map ys2dff@gen-label ys3365@lhs*))) (let ((ys3371@rib (ys2e33@make-full-rib ys3365@lhs* ys336e@lab*)) (ys3372@r (ys300c@add-lexicals ys336e@lab* ys336d@lex* ys335a@r))) (let ((ys3375@body (ys30b2@chi-internal (ys2e5f@add-subst ys3371@rib (cons ys3367@b ys3368@b*)) ys3372@r ys335b@mr)) (ys3376@rhs* (ys3098@chi-expr* (map (lambda (ys3379@x) (ys2e5f@add-subst ys3371@rib ys3379@x)) ys3366@rhs*) ys3372@r ys335b@mr))) (ys335c@build '#f ys336d@lex* ys3376@rhs* ys3375@body)))))) ys3363@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3361@t)))))) (set! ys4b1a@ys300e@letrec-helper ys300e@letrec-helper) (set! ys3010@let-transformer (lambda (ys337b@e ys337c@r ys337d@mr) (let ((ys3381@t ys337b@e)) (let ((ys3383@ls/false (ys307a@syntax-dispatch ys3381@t '(_ #(each (any any)) any . each-any)))) (if ys3383@ls/false (apply (lambda (ys3385@lhs* ys3386@rhs* ys3387@b ys3388@b*) (if (not (ys2e7b@valid-bound-ids? ys3385@lhs*)) (ys3034@invalid-fmls-error ys337b@e ys3385@lhs*) (let ((ys338d@lex* (map ys2dfb@gen-lexical ys3385@lhs*)) (ys338e@lab* (map ys2dff@gen-label ys3385@lhs*)) (ys338f@rhs* (ys3098@chi-expr* ys3386@rhs* ys337c@r ys337d@mr))) (let ((ys3393@rib (ys2e33@make-full-rib ys3385@lhs* ys338e@lab*)) (ys3394@r (ys300c@add-lexicals ys338e@lab* ys338d@lex* ys337c@r))) (let ((ys3397@body (ys30b2@chi-internal (ys2e5f@add-subst ys3393@rib (cons ys3387@b ys3388@b*)) ys3394@r ys337d@mr))) (ys2ddb@ys2d38@build-let '#f ys338d@lex* ys338f@rhs* ys3397@body)))))) ys3383@ls/false) (let ((ys3399@t ys3381@t)) (let ((ys339b@ls/false (ys307a@syntax-dispatch ys3399@t '(_ any #(each (any any)) any . each-any)))) (if ys339b@ls/false (apply (lambda (ys339d@loop ys339e@lhs* ys339f@rhs* ys33a0@b ys33a1@b*) (if (not (ys2e7b@valid-bound-ids? ys339e@lhs*)) (ys3034@invalid-fmls-error ys337b@e ys339e@lhs*) (let ((ys33a7@lex* (map ys2dfb@gen-lexical ys339e@lhs*)) (ys33a8@lab* (map ys2dff@gen-label ys339e@lhs*)) (ys33a9@rhs* (ys3098@chi-expr* ys339f@rhs* ys337c@r ys337d@mr)) (ys33aa@loop-lex (ys2dfb@gen-lexical ys339d@loop)) (ys33ab@loop-lab (ys2dff@gen-label ys339d@loop))) (let ((ys33b1@loop-rib (ys2e33@make-full-rib (list ys339d@loop) (list ys33ab@loop-lab))) (ys33b2@rib (ys2e33@make-full-rib ys339e@lhs* ys33a8@lab*)) (ys33b3@r (ys300c@add-lexicals (cons ys33ab@loop-lab ys33a8@lab*) (cons ys33aa@loop-lex ys33a7@lex*) ys337c@r))) (let ((ys33b7@body (ys30b2@chi-internal (ys2e5f@add-subst ys33b1@loop-rib (ys2e5f@add-subst ys33b2@rib (cons ys33a0@b ys33a1@b*))) ys33b3@r ys337d@mr))) (ys2ddc@ys2d3a@build-named-let '#f ys33aa@loop-lex ys33a7@lex* ys33a9@rhs* ys33b7@body)))))) ys339b@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3399@t))))))))) (set! ys4b1b@ys3010@let-transformer ys3010@let-transformer) (set! ys3012@letrec-transformer (lambda (ys33b9@e ys33ba@r ys33bb@mr) (ys300e@letrec-helper ys33b9@e ys33ba@r ys33bb@mr ys2dda@ys2d36@build-letrec))) (set! ys4b1c@ys3012@letrec-transformer ys3012@letrec-transformer) (set! ys3014@letrec*-transformer (lambda (ys33bf@e ys33c0@r ys33c1@mr) (ys300e@letrec-helper ys33bf@e ys33c0@r ys33c1@mr ys2ddd@ys2d3c@build-letrec*))) (set! ys4b1d@ys3014@letrec*-transformer ys3014@letrec*-transformer) (set! ys3016@fluid-let-syntax-transformer (lambda (ys33c5@e ys33c6@r ys33c7@mr) (let ((ys33cc@lookup '#f)) (begin (set! ys33cc@lookup (lambda (ys33df@x) (or (ys2e89@id->label ys33df@x) (ys315a@syntax-violation '#f '"unbound identifier" ys33c5@e ys33df@x)))) (let ((ys33cd@t ys33c5@e)) (let ((ys33cf@ls/false (ys307a@syntax-dispatch ys33cd@t '(_ #(each (any any)) any . each-any)))) (if ys33cf@ls/false (apply (lambda (ys33d1@lhs* ys33d2@rhs* ys33d3@b ys33d4@b*) (if (not (ys2e7b@valid-bound-ids? ys33d1@lhs*)) (ys3034@invalid-fmls-error ys33c5@e ys33d1@lhs*) (let ((ys33d9@lab* (map ys33cc@lookup ys33d1@lhs*)) (ys33da@rhs* (map (lambda (ys33dd@x) (ys2eab@make-eval-transformer (ys30d4@expand-transformer ys33dd@x ys33c7@mr))) ys33d2@rhs*))) (ys30b2@chi-internal (cons ys33d3@b ys33d4@b*) (append (map cons ys33d9@lab* ys33da@rhs*) ys33c6@r) (append (map cons ys33d9@lab* ys33da@rhs*) ys33c7@mr))))) ys33cf@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys33cd@t)))))))) (set! ys4b1e@ys3016@fluid-let-syntax-transformer ys3016@fluid-let-syntax-transformer) (set! ys3018@type-descriptor-transformer (lambda (ys33e1@e ys33e2@r ys33e3@mr) (let ((ys33e7@t ys33e1@e)) (let ((ys33e9@ls/false (ys307a@syntax-dispatch ys33e7@t '(_ any)))) (if (and ys33e9@ls/false (apply (lambda (ys33eb@id) (ys2e73@id? ys33eb@id)) ys33e9@ls/false)) (apply (lambda (ys33ed@id) (let ((ys33ef@lab (ys2e89@id->label ys33ed@id))) (let ((ys33f1@b (ys2e8b@label->binding ys33ef@lab ys33e2@r))) (let ((ys33f3@type (ys2e8f@binding-type ys33f1@b))) (begin (if (not ys33ef@lab) (ys2e93@raise-unbound-error ys33ed@id) (void)) (if (not (and (eq? ys33f3@type '$rtd) (not (list? (ys2e91@binding-value ys33f1@b))))) (ys315a@syntax-violation '#f '"not a record type" ys33e1@e) (void)) (list 'quote (ys2e91@binding-value ys33f1@b))))))) ys33e9@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys33e7@t)))))) (set! ys4b1f@ys3018@type-descriptor-transformer ys3018@type-descriptor-transformer) (set! ys301a@record-type-descriptor-transformer (lambda (ys33f5@e ys33f6@r ys33f7@mr) (let ((ys33fb@t ys33f5@e)) (let ((ys33fd@ls/false (ys307a@syntax-dispatch ys33fb@t '(_ any)))) (if (and ys33fd@ls/false (apply (lambda (ys33ff@id) (ys2e73@id? ys33ff@id)) ys33fd@ls/false)) (apply (lambda (ys3401@id) (let ((ys3403@lab (ys2e89@id->label ys3401@id))) (let ((ys3405@b (ys2e8b@label->binding ys3403@lab ys33f6@r))) (let ((ys3407@type (ys2e8f@binding-type ys3405@b))) (begin (if (not ys3403@lab) (ys2e93@raise-unbound-error ys3401@id) (void)) (if (not (and (eq? ys3407@type '$rtd) (list? (ys2e91@binding-value ys3405@b)))) (ys315a@syntax-violation '#f '"not a record type" ys33f5@e) (void)) (ys309c@chi-expr (car (ys2e91@binding-value ys3405@b)) ys33f6@r ys33f7@mr)))))) ys33fd@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys33fb@t)))))) (set! ys4b20@ys301a@record-type-descriptor-transformer ys301a@record-type-descriptor-transformer) (set! ys301c@record-constructor-descriptor-transformer (lambda (ys3409@e ys340a@r ys340b@mr) (let ((ys340f@t ys3409@e)) (let ((ys3411@ls/false (ys307a@syntax-dispatch ys340f@t '(_ any)))) (if (and ys3411@ls/false (apply (lambda (ys3413@id) (ys2e73@id? ys3413@id)) ys3411@ls/false)) (apply (lambda (ys3415@id) (let ((ys3417@lab (ys2e89@id->label ys3415@id))) (let ((ys3419@b (ys2e8b@label->binding ys3417@lab ys340a@r))) (let ((ys341b@type (ys2e8f@binding-type ys3419@b))) (begin (if (not ys3417@lab) (ys2e93@raise-unbound-error ys3415@id) (void)) (if (not (and (eq? ys341b@type '$rtd) (list? (ys2e91@binding-value ys3419@b)))) (ys315a@syntax-violation '#f '"invalid type" ys3409@e) (void)) (ys309c@chi-expr (cadr (ys2e91@binding-value ys3419@b)) ys340a@r ys340b@mr)))))) ys3411@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys340f@t)))))) (set! ys4b21@ys301c@record-constructor-descriptor-transformer ys301c@record-constructor-descriptor-transformer) (set! ys301e@when-macro (lambda (ys341d@e) (let ((ys341f@t ys341d@e)) (let ((ys3421@ls/false (ys307a@syntax-dispatch ys341f@t '(_ any any . each-any)))) (if ys3421@ls/false (apply (lambda (ys3423@test ys3424@e ys3425@e*) (ys3030@bless (list 'if ys3423@test (cons 'begin (cons ys3424@e ys3425@e*))))) ys3421@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys341f@t)))))) (set! ys4b22@ys301e@when-macro ys301e@when-macro) (set! ys3020@unless-macro (lambda (ys3429@e) (let ((ys342b@t ys3429@e)) (let ((ys342d@ls/false (ys307a@syntax-dispatch ys342b@t '(_ any any . each-any)))) (if ys342d@ls/false (apply (lambda (ys342f@test ys3430@e ys3431@e*) (ys3030@bless (list 'if (list 'not ys342f@test) (cons 'begin (cons ys3430@e ys3431@e*))))) ys342d@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys342b@t)))))) (set! ys4b23@ys3020@unless-macro ys3020@unless-macro) (set! ys3022@if-transformer (lambda (ys3435@e ys3436@r ys3437@mr) (let ((ys343b@t ys3435@e)) (let ((ys343d@ls/false (ys307a@syntax-dispatch ys343b@t '(_ any any any)))) (if ys343d@ls/false (apply (lambda (ys343f@e0 ys3440@e1 ys3441@e2) (list 'if (ys309c@chi-expr ys343f@e0 ys3436@r ys3437@mr) (ys309c@chi-expr ys3440@e1 ys3436@r ys3437@mr) (ys309c@chi-expr ys3441@e2 ys3436@r ys3437@mr))) ys343d@ls/false) (let ((ys3445@t ys343b@t)) (let ((ys3447@ls/false (ys307a@syntax-dispatch ys3445@t '(_ any any)))) (if ys3447@ls/false (apply (lambda (ys3449@e0 ys344a@e1) (list 'if (ys309c@chi-expr ys3449@e0 ys3436@r ys3437@mr) (ys309c@chi-expr ys344a@e1 ys3436@r ys3437@mr) (ys2dd9@ys2d34@build-void))) ys3447@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3445@t))))))))) (set! ys4b24@ys3022@if-transformer ys3022@if-transformer) (set! ys3024@and-transformer (lambda (ys344d@e ys344e@r ys344f@mr) (let ((ys3453@t ys344d@e)) (let ((ys3455@ls/false (ys307a@syntax-dispatch ys3453@t '(_ . each-any)))) (if ys3455@ls/false (apply (lambda (ys3457@e*) (cons 'and (ys3098@chi-expr* ys3457@e* ys344e@r ys344f@mr))) ys3455@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3453@t)))))) (set! ys4b25@ys3024@and-transformer ys3024@and-transformer) (set! ys3026@or-transformer (lambda (ys3459@e ys345a@r ys345b@mr) (let ((ys345f@t ys3459@e)) (let ((ys3461@ls/false (ys307a@syntax-dispatch ys345f@t '(_ . each-any)))) (if ys3461@ls/false (apply (lambda (ys3463@e*) (cons 'or (ys3098@chi-expr* ys3463@e* ys345a@r ys345b@mr))) ys3461@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys345f@t)))))) (set! ys4b26@ys3026@or-transformer ys3026@or-transformer) (set! ys3028@case-macro (lambda (ys3465@e) (let ((ys3468@build-last '#f) (ys346a@build-one '#f)) (begin (set! ys3468@build-last (lambda (ys348f@cls) (let ((ys3491@t ys348f@cls)) (let ((ys3493@ls/false (ys307a@syntax-dispatch ys3491@t '(#(scheme-id else) any . each-any)))) (if ys3493@ls/false (apply (lambda (ys3495@e ys3496@e*) (cons 'begin (cons ys3495@e ys3496@e*))) ys3493@ls/false) (let ((ys3499@t ys3491@t)) (let ((ys349b@ls/false (ys307a@syntax-dispatch ys3499@t '_))) (if ys349b@ls/false (apply (lambda () (ys346a@build-one ys348f@cls '(if #f #f))) ys349b@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3499@t))))))))) (set! ys346a@build-one (lambda (ys3481@cls ys3482@k) (let ((ys3485@t ys3481@cls)) (let ((ys3487@ls/false (ys307a@syntax-dispatch ys3485@t '(each-any any . each-any)))) (if ys3487@ls/false (apply (lambda (ys3489@d* ys348a@e ys348b@e*) (list 'if (list 'memv 't (list 'quote ys3489@d*)) (cons 'begin (cons ys348a@e ys348b@e*)) ys3482@k)) ys3487@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3485@t)))))) (let ((ys346b@t ys3465@e)) (let ((ys346d@ls/false (ys307a@syntax-dispatch ys346b@t '(_ any)))) (if ys346d@ls/false (apply (lambda (ys346f@expr) (ys3030@bless (cons 'let (cons (list (list 't ys346f@expr)) '((if #f #f)))))) ys346d@ls/false) (let ((ys3471@t ys346b@t)) (let ((ys3473@ls/false (ys307a@syntax-dispatch ys3471@t '(_ any any . each-any)))) (if ys3473@ls/false (apply (lambda (ys3475@expr ys3476@cls ys3477@cls*) (ys3030@bless (list 'let (list (list 't ys3475@expr)) (let ys347f@f ((ys347b@cls ys3476@cls) (ys347c@cls* ys3477@cls*)) (if (null? ys347c@cls*) (ys3468@build-last ys347b@cls) (ys346a@build-one ys347b@cls (ys347f@f (car ys347c@cls*) (cdr ys347c@cls*)))))))) ys3473@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3471@t))))))))))) (set! ys4b27@ys3028@case-macro ys3028@case-macro) (set! ys302a@quote-transformer (lambda (ys349d@e ys349e@r ys349f@mr) (let ((ys34a3@t ys349d@e)) (let ((ys34a5@ls/false (ys307a@syntax-dispatch ys34a3@t '(_ any)))) (if ys34a5@ls/false (apply (lambda (ys34a7@datum) (list 'quote (ys2e87@stx->datum ys34a7@datum))) ys34a5@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys34a3@t)))))) (set! ys4b28@ys302a@quote-transformer ys302a@quote-transformer) (set! ys302c@case-lambda-transformer (lambda (ys34a9@e ys34aa@r ys34ab@mr) (let ((ys34af@t ys34a9@e)) (let ((ys34b1@ls/false (ys307a@syntax-dispatch ys34af@t '(_ . #(each (any any . each-any)))))) (if ys34b1@ls/false (apply (lambda (ys34b3@fmls* ys34b4@b* ys34b5@b**) (call-with-values (lambda () (ys30a4@chi-lambda-clause* ys34a9@e ys34b3@fmls* (map cons ys34b4@b* ys34b5@b**) ys34aa@r ys34ab@mr)) (lambda (ys34bd@ys34ba ys34be@ys34bc) (let ((ys34c1@body* ys34be@ys34bc) (ys34c2@fmls* ys34bd@ys34ba)) (ys2dd7@ys2d04@build-case-lambda '#f ys34c2@fmls* ys34c1@body*))))) ys34b1@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys34af@t)))))) (set! ys4b29@ys302c@case-lambda-transformer ys302c@case-lambda-transformer) (set! ys302e@lambda-transformer (lambda (ys34c5@e ys34c6@r ys34c7@mr) (let ((ys34cb@t ys34c5@e)) (let ((ys34cd@ls/false (ys307a@syntax-dispatch ys34cb@t '(_ any any . each-any)))) (if ys34cd@ls/false (apply (lambda (ys34cf@fmls ys34d0@b ys34d1@b*) (call-with-values (lambda () (ys30a2@chi-lambda-clause ys34c5@e ys34cf@fmls (cons ys34d0@b ys34d1@b*) ys34c6@r ys34c7@mr)) (lambda (ys34d9@ys34d6 ys34da@ys34d8) (let ((ys34dd@body ys34da@ys34d8) (ys34de@fmls ys34d9@ys34d6)) (ys2dd6@ys2d02@build-lambda '#f ys34de@fmls ys34dd@body))))) ys34cd@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys34cb@t)))))) (set! ys4b2a@ys302e@lambda-transformer ys302e@lambda-transformer) (set! ys3030@bless (lambda (ys34e1@x) (ys2e5b@mkstx (let ys34e5@f ((ys34e3@x ys34e1@x)) (if (ys2e3f@stx? ys34e3@x) ys34e3@x (if (pair? ys34e3@x) (cons (ys34e5@f (car ys34e3@x)) (ys34e5@f (cdr ys34e3@x))) (if (symbol? ys34e3@x) (ys3002@scheme-stx ys34e3@x) (if (vector? ys34e3@x) (vector-map ys34e5@f ys34e3@x) ys34e3@x))))) '() '() '()))) (set! ys4b2b@ys3030@bless ys3030@bless) (set! ys3032@with-syntax-macro (lambda (ys34e7@e) (let ((ys34e9@t ys34e7@e)) (let ((ys34eb@ls/false (ys307a@syntax-dispatch ys34e9@t '(_ #(each (any any)) any . each-any)))) (if ys34eb@ls/false (apply (lambda (ys34ed@pat* ys34ee@expr* ys34ef@b ys34f0@b*) (let ((ys34f5@idn* (let ys34f9@f ((ys34f7@pat* ys34ed@pat*)) (if (null? ys34f7@pat*) '() (call-with-values (lambda () (ys3078@convert-pattern (car ys34f7@pat*) '())) (lambda (ys34ff@ys34fc ys3500@ys34fe) (let ((ys3503@idn* ys3500@ys34fe) (ys3504@pat ys34ff@ys34fc)) (append ys3503@idn* (ys34f9@f (cdr ys34f7@pat*)))))))))) (begin (ys30a0@verify-formals (map car ys34f5@idn*) ys34e7@e) (let ((ys3507@t* (ys3148@generate-temporaries ys34ee@expr*))) (ys3030@bless (list 'let (map list ys3507@t* ys34ee@expr*) (let ys350d@f ((ys3509@pat* ys34ed@pat*) (ys350a@t* ys3507@t*)) (if (null? ys3509@pat*) (cons 'begin (cons '#f (cons ys34ef@b ys34f0@b*))) (list 'syntax-case (car ys350a@t*) '() (list (car ys3509@pat*) (ys350d@f (cdr ys3509@pat*) (cdr ys350a@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car ys3509@pat*)) (car ys350a@t*)))))))))))) ys34eb@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys34e9@t)))))) (set! ys4b2c@ys3032@with-syntax-macro ys3032@with-syntax-macro) (set! ys3034@invalid-fmls-error (lambda (ys350f@stx ys3510@fmls) (let ((ys3513@t ys3510@fmls)) (let ((ys3515@ls/false (ys307a@syntax-dispatch ys3513@t '#(each+ any () any)))) (if ys3515@ls/false (apply (lambda (ys3517@id* ys3518@last) (let ys351d@f ((ys351b@id* (if (ys2e73@id? ys3518@last) (cons ys3518@last ys3517@id*) (if (ys2e69@syntax-null? ys3518@last) ys3517@id* (ys315a@syntax-violation '#f '"not an identifier" ys350f@stx ys3518@last))))) (if (null? ys351b@id*) (values) (if (not (ys2e73@id? (car ys351b@id*))) (ys315a@syntax-violation '#f '"not an identifier" ys350f@stx (car ys351b@id*)) (begin (ys351d@f (cdr ys351b@id*)) (if (ys2e7f@bound-id-member? (car ys351b@id*) (cdr ys351b@id*)) (ys315a@syntax-violation '#f '"duplicate binding" ys350f@stx (car ys351b@id*)) (void))))))) ys3515@ls/false) (let ((ys351f@t ys3513@t)) (let ((ys3521@ls/false (ys307a@syntax-dispatch ys351f@t '_))) (if ys3521@ls/false (apply (lambda () (ys315a@syntax-violation '#f '"malformed binding form" ys350f@stx ys3510@fmls)) ys3521@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys351f@t))))))))) (set! ys4b2d@ys3034@invalid-fmls-error ys3034@invalid-fmls-error) (set! ys3036@let-macro (lambda (ys3523@stx) (let ((ys3525@t ys3523@stx)) (let ((ys3527@ls/false (ys307a@syntax-dispatch ys3525@t '(_ #(each (any any)) any . each-any)))) (if ys3527@ls/false (apply (lambda (ys3529@lhs* ys352a@rhs* ys352b@b ys352c@b*) (if (ys2e7b@valid-bound-ids? ys3529@lhs*) (ys3030@bless (cons (cons 'lambda (cons ys3529@lhs* (cons ys352b@b ys352c@b*))) ys352a@rhs*)) (ys3034@invalid-fmls-error ys3523@stx ys3529@lhs*))) ys3527@ls/false) (let ((ys3531@t ys3525@t)) (let ((ys3533@ls/false (ys307a@syntax-dispatch ys3531@t '(_ any #(each (any any)) any . each-any)))) (if (and ys3533@ls/false (apply (lambda (ys3535@f ys3536@lhs* ys3537@rhs* ys3538@b ys3539@b*) (ys2e73@id? ys3535@f)) ys3533@ls/false)) (apply (lambda (ys353f@f ys3540@lhs* ys3541@rhs* ys3542@b ys3543@b*) (if (ys2e7b@valid-bound-ids? ys3540@lhs*) (ys3030@bless (cons (list 'letrec (list (list ys353f@f (cons 'lambda (cons ys3540@lhs* (cons ys3542@b ys3543@b*))))) ys353f@f) ys3541@rhs*)) (ys3034@invalid-fmls-error ys3523@stx ys3540@lhs*))) ys3533@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3531@t))))))))) (set! ys4b2e@ys3036@let-macro ys3036@let-macro) (set! ys3038@let-values-macro (lambda (ys3549@stx) (let ((ys354c@rename '#f) (ys354e@rename* '#f)) (begin (set! ys354c@rename (lambda (ys35b1@x ys35b2@old* ys35b3@new*) (begin (if (not (ys2e73@id? ys35b1@x)) (ys315a@syntax-violation '#f '"not an indentifier" ys3549@stx ys35b1@x) (void)) (if (ys2e7f@bound-id-member? ys35b1@x ys35b2@old*) (ys315a@syntax-violation '#f '"duplicate binding" ys3549@stx ys35b1@x) (void)) (let ((ys35b7@y (gensym (ys3160@syntax->datum ys35b1@x)))) (values ys35b7@y (cons ys35b1@x ys35b2@old*) (cons ys35b7@y ys35b3@new*)))))) (set! ys354e@rename* (lambda (ys359f@x* ys35a0@old* ys35a1@new*) (if (null? ys359f@x*) (values '() ys35a0@old* ys35a1@new*) (call-with-values (lambda () (ys354c@rename (car ys359f@x*) ys35a0@old* ys35a1@new*)) (lambda (ys35a5@x ys35a6@old* ys35a7@new*) (call-with-values (lambda () (ys354e@rename* (cdr ys359f@x*) ys35a6@old* ys35a7@new*)) (lambda (ys35ab@x* ys35ac@old* ys35ad@new*) (values (cons ys35a5@x ys35ab@x*) ys35ac@old* ys35ad@new*)))))))) (let ((ys354f@t ys3549@stx)) (let ((ys3551@ls/false (ys307a@syntax-dispatch ys354f@t '(_ () any . each-any)))) (if ys3551@ls/false (apply (lambda (ys3553@b ys3554@b*) (cons* (ys3030@bless 'let) '() ys3553@b ys3554@b*)) ys3551@ls/false) (let ((ys3557@t ys354f@t)) (let ((ys3559@ls/false (ys307a@syntax-dispatch ys3557@t '(_ #(each (any any)) any . each-any)))) (if ys3559@ls/false (apply (lambda (ys355b@lhs* ys355c@rhs* ys355d@b ys355e@b*) (ys3030@bless (let ys356b@f ((ys3563@lhs* ys355b@lhs*) (ys3564@rhs* ys355c@rhs*) (ys3565@old* '()) (ys3566@new* '())) (if (null? ys3563@lhs*) (cons 'let (cons (map list ys3565@old* ys3566@new*) (cons ys355d@b ys355e@b*))) (let ((ys356d@t (car ys3563@lhs*))) (let ((ys356f@ls/false (ys307a@syntax-dispatch ys356d@t 'each-any))) (if ys356f@ls/false (apply (lambda (ys3571@x*) (call-with-values (lambda () (ys354e@rename* ys3571@x* ys3565@old* ys3566@new*)) (lambda (ys3579@ys3574 ys357a@ys3576 ys357b@ys3578) (let ((ys357f@new* ys357b@ys3578) (ys3580@old* ys357a@ys3576) (ys3581@y* ys3579@ys3574)) (list 'call-with-values (list 'lambda '() (car ys3564@rhs*)) (list 'lambda ys3581@y* (ys356b@f (cdr ys3563@lhs*) (cdr ys3564@rhs*) ys3580@old* ys357f@new*))))))) ys356f@ls/false) (let ((ys3585@t ys356d@t)) (let ((ys3587@ls/false (ys307a@syntax-dispatch ys3585@t '#(each+ any () any)))) (if ys3587@ls/false (apply (lambda (ys3589@x* ys358a@x) (call-with-values (lambda () (ys354c@rename ys358a@x ys3565@old* ys3566@new*)) (lambda (ys358d@y ys358e@old* ys358f@new*) (call-with-values (lambda () (ys354e@rename* ys3589@x* ys358e@old* ys358f@new*)) (lambda (ys3593@y* ys3594@old* ys3595@new*) (list 'call-with-values (list 'lambda '() (car ys3564@rhs*)) (list 'lambda (append ys3593@y* ys358d@y) (ys356b@f (cdr ys3563@lhs*) (cdr ys3564@rhs*) ys3594@old* ys3595@new*)))))))) ys3587@ls/false) (let ((ys3599@t ys3585@t)) (let ((ys359b@ls/false (ys307a@syntax-dispatch ys3599@t 'any))) (if ys359b@ls/false (apply (lambda (ys359d@others) (ys315a@syntax-violation '#f '"malformed bindings" ys3549@stx ys359d@others)) ys359b@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3599@t)))))))))))))) ys3559@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3557@t))))))))))) (set! ys4b2f@ys3038@let-values-macro ys3038@let-values-macro) (set! ys303a@let*-values-macro (lambda (ys35b9@stx) (let ((ys35bc@check '#f)) (begin (set! ys35bc@check (lambda (ys35eb@x*) (if (not (null? ys35eb@x*)) (let ((ys35ed@x (car ys35eb@x*))) (begin (if (not (ys2e73@id? ys35ed@x)) (ys315a@syntax-violation '#f '"not an identifier" ys35b9@stx ys35ed@x) (void)) (ys35bc@check (cdr ys35eb@x*)) (if (ys2e7f@bound-id-member? ys35ed@x (cdr ys35eb@x*)) (ys315a@syntax-violation '#f '"duplicate identifier" ys35b9@stx ys35ed@x) (void)))) (void)))) (let ((ys35bd@t ys35b9@stx)) (let ((ys35bf@ls/false (ys307a@syntax-dispatch ys35bd@t '(_ () any . each-any)))) (if ys35bf@ls/false (apply (lambda (ys35c1@b ys35c2@b*) (cons* (ys3030@bless 'let) '() ys35c1@b ys35c2@b*)) ys35bf@ls/false) (let ((ys35c5@t ys35bd@t)) (let ((ys35c7@ls/false (ys307a@syntax-dispatch ys35c5@t '(_ #(each (any any)) any . each-any)))) (if ys35c7@ls/false (apply (lambda (ys35c9@lhs* ys35ca@rhs* ys35cb@b ys35cc@b*) (ys3030@bless (let ys35d5@f ((ys35d1@lhs* ys35c9@lhs*) (ys35d2@rhs* ys35ca@rhs*)) (if (null? ys35d1@lhs*) (cons 'begin (cons ys35cb@b ys35cc@b*)) (let ((ys35d7@t (car ys35d1@lhs*))) (let ((ys35d9@ls/false (ys307a@syntax-dispatch ys35d7@t 'each-any))) (if ys35d9@ls/false (apply (lambda (ys35db@x*) (begin (ys35bc@check ys35db@x*) (list 'call-with-values (list 'lambda '() (car ys35d2@rhs*)) (list 'lambda ys35db@x* (ys35d5@f (cdr ys35d1@lhs*) (cdr ys35d2@rhs*)))))) ys35d9@ls/false) (let ((ys35dd@t ys35d7@t)) (let ((ys35df@ls/false (ys307a@syntax-dispatch ys35dd@t '#(each+ any () any)))) (if ys35df@ls/false (apply (lambda (ys35e1@x* ys35e2@x) (begin (ys35bc@check (cons ys35e2@x ys35e1@x*)) (list 'call-with-values (list 'lambda '() (car ys35d2@rhs*)) (list 'lambda (append ys35e1@x* ys35e2@x) (ys35d5@f (cdr ys35d1@lhs*) (cdr ys35d2@rhs*)))))) ys35df@ls/false) (let ((ys35e5@t ys35dd@t)) (let ((ys35e7@ls/false (ys307a@syntax-dispatch ys35e5@t 'any))) (if ys35e7@ls/false (apply (lambda (ys35e9@others) (ys315a@syntax-violation '#f '"malformed bindings" ys35b9@stx ys35e9@others)) ys35e7@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys35e5@t)))))))))))))) ys35c7@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys35c5@t))))))))))) (set! ys4b30@ys303a@let*-values-macro ys303a@let*-values-macro) (set! ys303c@trace-lambda-macro (lambda (ys35ef@stx) (let ((ys35f1@t ys35ef@stx)) (let ((ys35f3@ls/false (ys307a@syntax-dispatch ys35f1@t '(_ any each-any any . each-any)))) (if ys35f3@ls/false (apply (lambda (ys35f5@who ys35f6@fmls ys35f7@b ys35f8@b*) (if (ys2e7b@valid-bound-ids? ys35f6@fmls) (ys3030@bless (list 'make-traced-procedure (list 'quote ys35f5@who) (cons 'lambda (cons ys35f6@fmls (cons ys35f7@b ys35f8@b*))))) (ys3034@invalid-fmls-error ys35ef@stx ys35f6@fmls))) ys35f3@ls/false) (let ((ys35fd@t ys35f1@t)) (let ((ys35ff@ls/false (ys307a@syntax-dispatch ys35fd@t '(_ any #(each+ any () any) any . each-any)))) (if ys35ff@ls/false (apply (lambda (ys3601@who ys3602@fmls ys3603@last ys3604@b ys3605@b*) (if (ys2e7b@valid-bound-ids? (cons ys3603@last ys3602@fmls)) (ys3030@bless (list 'make-traced-procedure (list 'quote ys3601@who) (cons 'lambda (cons (append ys3602@fmls ys3603@last) (cons ys3604@b ys3605@b*))))) (ys3034@invalid-fmls-error ys35ef@stx (append ys3602@fmls ys3603@last)))) ys35ff@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys35fd@t))))))))) (set! ys4b31@ys303c@trace-lambda-macro ys303c@trace-lambda-macro) (set! ys303e@trace-define-macro (lambda (ys360b@stx) (let ((ys360d@t ys360b@stx)) (let ((ys360f@ls/false (ys307a@syntax-dispatch ys360d@t '(_ (any . each-any) any . each-any)))) (if ys360f@ls/false (apply (lambda (ys3611@who ys3612@fmls ys3613@b ys3614@b*) (if (ys2e7b@valid-bound-ids? ys3612@fmls) (ys3030@bless (list 'define ys3611@who (list 'make-traced-procedure (list 'quote ys3611@who) (cons 'lambda (cons ys3612@fmls (cons ys3613@b ys3614@b*)))))) (ys3034@invalid-fmls-error ys360b@stx ys3612@fmls))) ys360f@ls/false) (let ((ys3619@t ys360d@t)) (let ((ys361b@ls/false (ys307a@syntax-dispatch ys3619@t '(_ (any . #(each+ any () any)) any . each-any)))) (if ys361b@ls/false (apply (lambda (ys361d@who ys361e@fmls ys361f@last ys3620@b ys3621@b*) (if (ys2e7b@valid-bound-ids? (cons ys361f@last ys361e@fmls)) (ys3030@bless (list 'define ys361d@who (list 'make-traced-procedure (list 'quote ys361d@who) (cons 'lambda (cons (append ys361e@fmls ys361f@last) (cons ys3620@b ys3621@b*)))))) (ys3034@invalid-fmls-error ys360b@stx (append ys361e@fmls ys361f@last)))) ys361b@ls/false) (let ((ys3627@t ys3619@t)) (let ((ys3629@ls/false (ys307a@syntax-dispatch ys3627@t '(_ any any)))) (if ys3629@ls/false (apply (lambda (ys362b@who ys362c@expr) (if (ys2e73@id? ys362b@who) (ys3030@bless (list 'define ys362b@who (list 'let (list (list 'v ys362c@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote ys362b@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (ys315a@syntax-violation '#f '"invalid name" ys360b@stx))) ys3629@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3627@t)))))))))))) (set! ys4b32@ys303e@trace-define-macro ys303e@trace-define-macro) (set! ys3040@trace-define-syntax-macro (lambda (ys362f@stx) (let ((ys3631@t ys362f@stx)) (let ((ys3633@ls/false (ys307a@syntax-dispatch ys3631@t '(_ any any)))) (if ys3633@ls/false (apply (lambda (ys3635@who ys3636@expr) (if (ys2e73@id? ys3635@who) (ys3030@bless (list 'define-syntax ys3635@who (list 'make-traced-macro (list 'quote ys3635@who) ys3636@expr))) (ys315a@syntax-violation '#f '"invalid name" ys362f@stx))) ys3633@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3631@t)))))) (set! ys4b33@ys3040@trace-define-syntax-macro ys3040@trace-define-syntax-macro) (set! ys3042@trace-let/rec-syntax (lambda (ys3639@who) (lambda (ys363b@stx) (let ((ys363d@t ys363b@stx)) (let ((ys363f@ls/false (ys307a@syntax-dispatch ys363d@t '(_ #(each (any any)) any . each-any)))) (if ys363f@ls/false (apply (lambda (ys3641@lhs* ys3642@rhs* ys3643@b ys3644@b*) (if (ys2e7b@valid-bound-ids? ys3641@lhs*) (let ((ys3649@rhs* (map (lambda (ys364b@lhs ys364c@rhs) (list 'make-traced-macro (list 'quote ys364b@lhs) ys364c@rhs)) ys3641@lhs* ys3642@rhs*))) (ys3030@bless (cons ys3639@who (cons (map list ys3641@lhs* ys3649@rhs*) (cons ys3643@b ys3644@b*))))) (ys3034@invalid-fmls-error ys363b@stx ys3641@lhs*))) ys363f@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys363d@t))))))) (set! ys4b34@ys3042@trace-let/rec-syntax ys3042@trace-let/rec-syntax) (set! ys3044@trace-let-syntax-macro (ys3042@trace-let/rec-syntax 'let-syntax)) (set! ys4b35@ys3044@trace-let-syntax-macro ys3044@trace-let-syntax-macro) (set! ys3046@trace-letrec-syntax-macro (ys3042@trace-let/rec-syntax 'letrec-syntax)) (set! ys4b36@ys3046@trace-letrec-syntax-macro ys3046@trace-letrec-syntax-macro) (set! ys3048@guard-macro (lambda (ys364f@x) (let ((ys3652@gen-clauses '#f)) (begin (set! ys3652@gen-clauses (lambda (ys3669@con ys366a@outerk ys366b@clause*) (let ((ys3670@f '#f) (ys3672@f* '#f)) (begin (set! ys3670@f (lambda (ys36a9@x ys36aa@k) (let ((ys36ad@t ys36a9@x)) (let ((ys36af@ls/false (ys307a@syntax-dispatch ys36ad@t '(any #(scheme-id =>) any)))) (if ys36af@ls/false (apply (lambda (ys36b1@e ys36b2@p) (let ((ys36b5@t (gensym))) (list 'let (list (list ys36b5@t ys36b1@e)) (list 'if ys36b5@t (list ys36b2@p ys36b5@t) ys36aa@k)))) ys36af@ls/false) (let ((ys36b7@t ys36ad@t)) (let ((ys36b9@ls/false (ys307a@syntax-dispatch ys36b7@t '(any)))) (if ys36b9@ls/false (apply (lambda (ys36bb@e) (let ((ys36bd@t (gensym))) (list 'let (list (list ys36bd@t ys36bb@e)) (list 'if ys36bd@t ys36bd@t ys36aa@k)))) ys36b9@ls/false) (let ((ys36bf@t ys36b7@t)) (let ((ys36c1@ls/false (ys307a@syntax-dispatch ys36bf@t '(any any . each-any)))) (if ys36c1@ls/false (apply (lambda (ys36c3@e ys36c4@v ys36c5@v*) (list 'if ys36c3@e (cons 'begin (cons ys36c4@v ys36c5@v*)) ys36aa@k)) ys36c1@ls/false) (let ((ys36c9@t ys36bf@t)) (let ((ys36cb@ls/false (ys307a@syntax-dispatch ys36c9@t '_))) (if ys36cb@ls/false (apply (lambda () (ys315a@syntax-violation '#f '"invalid guard clause" ys36a9@x)) ys36cb@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys36c9@t))))))))))))))) (set! ys3672@f* (lambda (ys367f@x*) (let ((ys3681@t ys367f@x*)) (let ((ys3683@ls/false (ys307a@syntax-dispatch ys3681@t '()))) (if ys3683@ls/false (apply (lambda () (let ((ys3685@g (gensym))) (values (list ys3685@g (list 'lambda '() (list 'raise-continuable ys3669@con))) ys3685@g))) ys3683@ls/false) (let ((ys3687@t ys3681@t)) (let ((ys3689@ls/false (ys307a@syntax-dispatch ys3687@t '((#(scheme-id else) any . each-any))))) (if ys3689@ls/false (apply (lambda (ys368b@e ys368c@e*) (values (cons 'begin (cons ys368b@e ys368c@e*)) '#f)) ys3689@ls/false) (let ((ys368f@t ys3687@t)) (let ((ys3691@ls/false (ys307a@syntax-dispatch ys368f@t '(any . any)))) (if ys3691@ls/false (apply (lambda (ys3693@cls ys3694@cls*) (call-with-values (lambda () (ys3672@f* ys3694@cls*)) (lambda (ys369b@ys3698 ys369c@ys369a) (let ((ys369f@g ys369c@ys369a) (ys36a0@e ys369b@ys3698)) (values (ys3670@f ys3693@cls ys36a0@e) ys369f@g))))) ys3691@ls/false) (let ((ys36a3@t ys368f@t)) (let ((ys36a5@ls/false (ys307a@syntax-dispatch ys36a3@t 'any))) (if ys36a5@ls/false (apply (lambda (ys36a7@others) (ys315a@syntax-violation '#f '"invalid guard clause" ys36a7@others)) ys36a5@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys36a3@t))))))))))))))) (call-with-values (lambda () (ys3672@f* ys366b@clause*)) (lambda (ys3677@ys3674 ys3678@ys3676) (let ((ys367b@raisek ys3678@ys3676) (ys367c@code ys3677@ys3674)) (if ys367b@raisek (list (list 'call/cc (list 'lambda (list ys367b@raisek) (list ys366a@outerk (list 'lambda '() ys367c@code))))) (list ys366a@outerk (list 'lambda '() ys367c@code)))))))))) (let ((ys3653@t ys364f@x)) (let ((ys3655@ls/false (ys307a@syntax-dispatch ys3653@t '(_ (any . each-any) any . each-any)))) (if (and ys3655@ls/false (apply (lambda (ys3657@con ys3658@clause* ys3659@b ys365a@b*) (ys2e73@id? ys3657@con)) ys3655@ls/false)) (apply (lambda (ys365f@con ys3660@clause* ys3661@b ys3662@b*) (let ((ys3667@outerk (gensym))) (ys3030@bless (list (list 'call/cc (list 'lambda (list ys3667@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list ys365f@con) (ys3652@gen-clauses ys365f@con ys3667@outerk ys3660@clause*)) (cons 'lambda (cons '() (cons ys3661@b ys3662@b*))))))))))) ys3655@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3653@t)))))))) (set! ys4b37@ys3048@guard-macro ys3048@guard-macro) (set! ys304a@define-enumeration-macro (lambda (ys36cd@stx) (let ((ys36d0@set? '#f) (ys36d2@remove-dups '#f)) (begin (set! ys36d0@set? (lambda (ys36e9@x) (or (null? ys36e9@x) (and (not (memq (car ys36e9@x) (cdr ys36e9@x))) (ys36d0@set? (cdr ys36e9@x)))))) (set! ys36d2@remove-dups (lambda (ys36e7@ls) (if (null? ys36e7@ls) '() (cons (car ys36e7@ls) (ys36d2@remove-dups (remq (car ys36e7@ls) (cdr ys36e7@ls))))))) (let ((ys36d3@t ys36cd@stx)) (let ((ys36d5@ls/false (ys307a@syntax-dispatch ys36d3@t '(_ any each-any any)))) (if (and ys36d5@ls/false (apply (lambda (ys36d7@name ys36d8@id* ys36d9@maker) (and (ys2e73@id? ys36d7@name) (ys2e73@id? ys36d9@maker) (for-all ys2e73@id? ys36d8@id*))) ys36d5@ls/false)) (apply (lambda (ys36dd@name ys36de@id* ys36df@maker) (let ((ys36e3@name* (ys36d2@remove-dups (ys3160@syntax->datum ys36de@id*))) (ys36e4@mk (gensym))) (ys3030@bless (list 'begin (list 'define ys36e4@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote ys36e3@name*)))) (list 'define-syntax ys36dd@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote ys36e3@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote ys36dd@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax ys36df@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote ys36df@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote ys36e3@name*)) (cons 'syntax-violation (cons (list 'quote ys36df@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons ys36e4@mk '('(n* ...))))))))))))) ys36d5@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys36d3@t)))))))) (set! ys4b38@ys304a@define-enumeration-macro ys304a@define-enumeration-macro) (set! ys304c@time-macro (lambda (ys36eb@stx) (let ((ys36ed@t ys36eb@stx)) (let ((ys36ef@ls/false (ys307a@syntax-dispatch ys36ed@t '(_ any)))) (if ys36ef@ls/false (apply (lambda (ys36f1@expr) (ys3030@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() ys36f1@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) ys36ef@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys36ed@t)))))) (set! ys4b39@ys304c@time-macro ys304c@time-macro) (set! ys304e@delay-macro (lambda (ys36f3@stx) (let ((ys36f5@t ys36f3@stx)) (let ((ys36f7@ls/false (ys307a@syntax-dispatch ys36f5@t '(_ any)))) (if ys36f7@ls/false (apply (lambda (ys36f9@expr) (ys3030@bless (list 'make-promise (list 'lambda '() ys36f9@expr)))) ys36f7@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys36f5@t)))))) (set! ys4b3a@ys304e@delay-macro ys304e@delay-macro) (set! ys3050@assert-macro (lambda (ys36fb@stx) (let ((ys36fd@t ys36fb@stx)) (let ((ys36ff@ls/false (ys307a@syntax-dispatch ys36fd@t '(_ any)))) (if ys36ff@ls/false (apply (lambda (ys3701@expr) (let ((ys3703@pos (or (ys3152@expression-position ys36fb@stx) (ys3152@expression-position ys3701@expr)))) (ys3030@bless (list 'let (list (list 'x ys3701@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote ys3701@expr) (list 'quote ys3703@pos))))))) ys36ff@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys36fd@t)))))) (set! ys4b3b@ys3050@assert-macro ys3050@assert-macro) (set! ys3052@endianness-macro (lambda (ys3705@stx) (let ((ys3707@t ys3705@stx)) (let ((ys3709@ls/false (ys307a@syntax-dispatch ys3707@t '(_ any)))) (if ys3709@ls/false (apply (lambda (ys370b@e) (let ((ys370d@t (ys3160@syntax->datum ys370b@e))) (if (memv ys370d@t '(little)) (ys3030@bless ''little) (if (memv ys370d@t '(big)) (ys3030@bless ''big) (ys315a@syntax-violation '#f '"endianness must be big or little" ys3705@stx))))) ys3709@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3707@t)))))) (set! ys4b3c@ys3052@endianness-macro ys3052@endianness-macro) (set! ys3054@identifier-syntax-macro (lambda (ys370f@stx) (let ((ys3711@t ys370f@stx)) (let ((ys3713@ls/false (ys307a@syntax-dispatch ys3711@t '(_ any)))) (if ys3713@ls/false (apply (lambda (ys3715@expr) (ys3030@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax ys3715@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax ys3715@expr) '((syntax (e* ...)))))))))) ys3713@ls/false) (let ((ys3717@t ys3711@t)) (let ((ys3719@ls/false (ys307a@syntax-dispatch ys3717@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and ys3719@ls/false (apply (lambda (ys371b@id1 ys371c@expr1 ys371d@id2 ys371e@expr2 ys371f@expr3) (and (ys2e73@id? ys371b@id1) (ys2e73@id? ys371d@id2) (ys2e73@id? ys371e@expr2))) ys3719@ls/false)) (apply (lambda (ys3725@id1 ys3726@expr1 ys3727@id2 ys3728@expr2 ys3729@expr3) (ys3030@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax ys3726@expr1)) (list (list 'set! 'id ys3728@expr2) (list 'syntax ys3729@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons ys3726@expr1 '(e* ...))))))))) ys3719@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3717@t))))))))) (set! ys4b3d@ys3054@identifier-syntax-macro ys3054@identifier-syntax-macro) (set! ys3056@do-macro (lambda (ys372f@stx) (let ((ys3732@bind '#f)) (begin (set! ys3732@bind (lambda (ys3749@x) (let ((ys374b@t ys3749@x)) (let ((ys374d@ls/false (ys307a@syntax-dispatch ys374b@t '(any any)))) (if ys374d@ls/false (apply (lambda (ys374f@x ys3750@init) (list ys374f@x ys3750@init ys374f@x)) ys374d@ls/false) (let ((ys3753@t ys374b@t)) (let ((ys3755@ls/false (ys307a@syntax-dispatch ys3753@t '(any any any)))) (if ys3755@ls/false (apply (lambda (ys3757@x ys3758@init ys3759@step) (list ys3757@x ys3758@init ys3759@step)) ys3755@ls/false) (let ((ys375d@t ys3753@t)) (let ((ys375f@ls/false (ys307a@syntax-dispatch ys375d@t '_))) (if ys375f@ls/false (apply (lambda () (ys315a@syntax-violation '#f '"invalid binding" ys372f@stx)) ys375f@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys375d@t)))))))))))) (let ((ys3733@t ys372f@stx)) (let ((ys3735@ls/false (ys307a@syntax-dispatch ys3733@t '(_ each-any (any . each-any) . each-any)))) (if ys3735@ls/false (apply (lambda (ys3737@binding* ys3738@test ys3739@expr* ys373a@command*) (let ((ys373f@t (map ys3732@bind ys3737@binding*))) (let ((ys3741@ls/false (ys307a@syntax-dispatch ys373f@t '#(each (any any any))))) (if ys3741@ls/false (apply (lambda (ys3743@x* ys3744@init* ys3745@step*) (if (ys2e7b@valid-bound-ids? ys3743@x*) (ys3030@bless (list 'letrec (list (list 'loop (list 'lambda ys3743@x* (list 'if ys3738@test (cons 'begin (cons '(if #f #f) ys3739@expr*)) (cons 'begin (append ys373a@command* (list (cons 'loop ys3745@step*)))))))) (cons 'loop ys3744@init*))) (ys315a@syntax-violation '#f '"invalid bindings" ys372f@stx))) ys3741@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys373f@t))))) ys3735@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3733@t)))))))) (set! ys4b3e@ys3056@do-macro ys3056@do-macro) (set! ys3058@let*-macro (lambda (ys3761@stx) (let ((ys3763@t ys3761@stx)) (let ((ys3765@ls/false (ys307a@syntax-dispatch ys3763@t '(_ #(each (any any)) any . each-any)))) (if (and ys3765@ls/false (apply (lambda (ys3767@lhs* ys3768@rhs* ys3769@b ys376a@b*) (for-all ys2e73@id? ys3767@lhs*)) ys3765@ls/false)) (apply (lambda (ys376f@lhs* ys3770@rhs* ys3771@b ys3772@b*) (ys3030@bless (let ys3779@f ((ys3777@x* (map list ys376f@lhs* ys3770@rhs*))) (if (null? ys3777@x*) (cons 'let (cons '() (cons ys3771@b ys3772@b*))) (list 'let (list (car ys3777@x*)) (ys3779@f (cdr ys3777@x*))))))) ys3765@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3763@t)))))) (set! ys4b3f@ys3058@let*-macro ys3058@let*-macro) (set! ys305a@or-macro (lambda (ys377b@stx) (let ((ys377d@t ys377b@stx)) (let ((ys377f@ls/false (ys307a@syntax-dispatch ys377d@t '(_)))) (if ys377f@ls/false (apply (lambda () '#f) ys377f@ls/false) (let ((ys3781@t ys377d@t)) (let ((ys3783@ls/false (ys307a@syntax-dispatch ys3781@t '(_ any . each-any)))) (if ys3783@ls/false (apply (lambda (ys3785@e ys3786@e*) (ys3030@bless (let ys378d@f ((ys3789@e ys3785@e) (ys378a@e* ys3786@e*)) (if (null? ys378a@e*) (list 'begin '#f ys3789@e) (list 'let (list (list 't ys3789@e)) (list 'if 't 't (ys378d@f (car ys378a@e*) (cdr ys378a@e*)))))))) ys3783@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3781@t))))))))) (set! ys4b40@ys305a@or-macro ys305a@or-macro) (set! ys305c@and-macro (lambda (ys378f@stx) (let ((ys3791@t ys378f@stx)) (let ((ys3793@ls/false (ys307a@syntax-dispatch ys3791@t '(_)))) (if ys3793@ls/false (apply (lambda () '#t) ys3793@ls/false) (let ((ys3795@t ys3791@t)) (let ((ys3797@ls/false (ys307a@syntax-dispatch ys3795@t '(_ any . each-any)))) (if ys3797@ls/false (apply (lambda (ys3799@e ys379a@e*) (ys3030@bless (let ys37a1@f ((ys379d@e ys3799@e) (ys379e@e* ys379a@e*)) (if (null? ys379e@e*) (list 'begin '#f ys379d@e) (cons 'if (cons ys379d@e (cons (ys37a1@f (car ys379e@e*) (cdr ys379e@e*)) '(#f)))))))) ys3797@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3795@t))))))))) (set! ys4b41@ys305c@and-macro ys305c@and-macro) (set! ys305e@cond-macro (lambda (ys37a3@stx) (let ((ys37a5@t ys37a3@stx)) (let ((ys37a7@ls/false (ys307a@syntax-dispatch ys37a5@t '(_ any . each-any)))) (if ys37a7@ls/false (apply (lambda (ys37a9@cls ys37aa@cls*) (ys3030@bless (let ys37b1@f ((ys37ad@cls ys37a9@cls) (ys37ae@cls* ys37aa@cls*)) (if (null? ys37ae@cls*) (let ((ys37b3@t ys37ad@cls)) (let ((ys37b5@ls/false (ys307a@syntax-dispatch ys37b3@t '(#(scheme-id else) any . each-any)))) (if ys37b5@ls/false (apply (lambda (ys37b7@e ys37b8@e*) (cons 'begin (cons ys37b7@e ys37b8@e*))) ys37b5@ls/false) (let ((ys37bb@t ys37b3@t)) (let ((ys37bd@ls/false (ys307a@syntax-dispatch ys37bb@t '(any #(scheme-id =>) any)))) (if ys37bd@ls/false (apply (lambda (ys37bf@e ys37c0@p) (list 'let (list (list 't ys37bf@e)) (list 'if 't (cons ys37c0@p '(t))))) ys37bd@ls/false) (let ((ys37c3@t ys37bb@t)) (let ((ys37c5@ls/false (ys307a@syntax-dispatch ys37c3@t '(any)))) (if ys37c5@ls/false (apply (lambda (ys37c7@e) (cons 'or (cons ys37c7@e '((if #f #f))))) ys37c5@ls/false) (let ((ys37c9@t ys37c3@t)) (let ((ys37cb@ls/false (ys307a@syntax-dispatch ys37c9@t '(any . each-any)))) (if ys37cb@ls/false (apply (lambda (ys37cd@e ys37ce@e*) (list 'if ys37cd@e (cons 'begin ys37ce@e*))) ys37cb@ls/false) (let ((ys37d1@t ys37c9@t)) (let ((ys37d3@ls/false (ys307a@syntax-dispatch ys37d1@t '_))) (if ys37d3@ls/false (apply (lambda () (ys315a@syntax-violation '#f '"invalid last clause" ys37a3@stx)) ys37d3@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys37d1@t)))))))))))))))) (let ((ys37d5@t ys37ad@cls)) (let ((ys37d7@ls/false (ys307a@syntax-dispatch ys37d5@t '(#(scheme-id else) any . each-any)))) (if ys37d7@ls/false (apply (lambda (ys37d9@e ys37da@e*) (ys315a@syntax-violation '#f '"incorrect position of keyword else" ys37a3@stx)) ys37d7@ls/false) (let ((ys37dd@t ys37d5@t)) (let ((ys37df@ls/false (ys307a@syntax-dispatch ys37dd@t '(any #(scheme-id =>) any)))) (if ys37df@ls/false (apply (lambda (ys37e1@e ys37e2@p) (list 'let (list (list 't ys37e1@e)) (list 'if 't (cons ys37e2@p '(t)) (ys37b1@f (car ys37ae@cls*) (cdr ys37ae@cls*))))) ys37df@ls/false) (let ((ys37e5@t ys37dd@t)) (let ((ys37e7@ls/false (ys307a@syntax-dispatch ys37e5@t '(any)))) (if ys37e7@ls/false (apply (lambda (ys37e9@e) (list 'or ys37e9@e (ys37b1@f (car ys37ae@cls*) (cdr ys37ae@cls*)))) ys37e7@ls/false) (let ((ys37eb@t ys37e5@t)) (let ((ys37ed@ls/false (ys307a@syntax-dispatch ys37eb@t '(any . each-any)))) (if ys37ed@ls/false (apply (lambda (ys37ef@e ys37f0@e*) (list 'if ys37ef@e (cons 'begin ys37f0@e*) (ys37b1@f (car ys37ae@cls*) (cdr ys37ae@cls*)))) ys37ed@ls/false) (let ((ys37f3@t ys37eb@t)) (let ((ys37f5@ls/false (ys307a@syntax-dispatch ys37f3@t '_))) (if ys37f5@ls/false (apply (lambda () (ys315a@syntax-violation '#f '"invalid last clause" ys37a3@stx)) ys37f5@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys37f3@t)))))))))))))))))))) ys37a7@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys37a5@t)))))) (set! ys4b42@ys305e@cond-macro ys305e@cond-macro) (set! ys3060@do-include (lambda (ys37f7@stx ys37f8@id ys37f9@filename) (let ((ys37fd@filename (ys2e87@stx->datum ys37f9@filename))) (begin (if (not (and (string? ys37fd@filename) (ys2e73@id? ys37f8@id))) (ys315a@syntax-violation '#f '"invalid syntax" ys37f7@stx) (void)) (cons (ys3030@bless 'begin) (with-input-from-file ys37fd@filename (lambda () (let ys3801@f ((ys37ff@ls '())) (let ((ys3803@x (ys29b0@ys2882@read-annotated))) (if (eof-object? ys3803@x) (reverse ys37ff@ls) (ys3801@f (cons (ys2e53@datum->stx ys37f8@id ys3803@x) ys37ff@ls)))))))))))) (set! ys4b43@ys3060@do-include ys3060@do-include) (set! ys3062@include-macro (lambda (ys3805@e) (let ((ys3807@t ys3805@e)) (let ((ys3809@ls/false (ys307a@syntax-dispatch ys3807@t '(any any)))) (if ys3809@ls/false (apply (lambda (ys380b@id ys380c@filename) (ys3060@do-include ys3805@e ys380b@id ys380c@filename)) ys3809@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3807@t)))))) (set! ys4b44@ys3062@include-macro ys3062@include-macro) (set! ys3064@include-into-macro (lambda (ys380f@e) (let ((ys3811@t ys380f@e)) (let ((ys3813@ls/false (ys307a@syntax-dispatch ys3811@t '(_ any any)))) (if ys3813@ls/false (apply (lambda (ys3815@id ys3816@filename) (ys3060@do-include ys380f@e ys3815@id ys3816@filename)) ys3813@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3811@t)))))) (set! ys4b45@ys3064@include-into-macro ys3064@include-into-macro) (set! ys3066@syntax-rules-macro (lambda (ys3819@e) (let ((ys381b@t ys3819@e)) (let ((ys381d@ls/false (ys307a@syntax-dispatch ys381b@t '(_ each-any . #(each (any any)))))) (if ys381d@ls/false (apply (lambda (ys381f@lits ys3820@pat* ys3821@tmp*) (begin (ys3080@verify-literals ys381f@lits ys3819@e) (ys3030@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons ys381f@lits (map (lambda (ys3825@pat ys3826@tmp) (let ((ys3829@t ys3825@pat)) (let ((ys382b@ls/false (ys307a@syntax-dispatch ys3829@t '(_ . any)))) (if ys382b@ls/false (apply (lambda (ys382d@rest) (list (cons 'g ys382d@rest) (list 'syntax ys3826@tmp))) ys382b@ls/false) (let ((ys382f@t ys3829@t)) (let ((ys3831@ls/false (ys307a@syntax-dispatch ys382f@t '_))) (if ys3831@ls/false (apply (lambda () (ys315a@syntax-violation '#f '"invalid syntax-rules pattern" ys3819@e ys3825@pat)) ys3831@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys382f@t)))))))) ys3820@pat* ys3821@tmp*)))))))) ys381d@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys381b@t)))))) (set! ys4b46@ys3066@syntax-rules-macro ys3066@syntax-rules-macro) (set! ys3068@quasiquote-macro (let ((ys3834@datum '#f) (ys3850@quasicons* '#f) (ys3852@quasicons '#f) (ys3854@quasiappend '#f) (ys3856@quasivector '#f) (ys3858@vquasi '#f) (ys385a@quasi '#f)) (begin (set! ys3834@datum (lambda (ys3935@x) (list (ys3002@scheme-stx 'quote) (ys2e5b@mkstx ys3935@x '() '() '())))) (set! ys3850@quasicons* (lambda (ys392d@x ys392e@y) (let ys3933@f ((ys3931@x ys392d@x)) (if (null? ys3931@x) ys392e@y (ys3852@quasicons (car ys3931@x) (ys3933@f (cdr ys3931@x))))))) (set! ys3852@quasicons (lambda (ys3907@x ys3908@y) (let ((ys390b@t ys3908@y)) (let ((ys390d@ls/false (ys307a@syntax-dispatch ys390b@t '(#(scheme-id quote) any)))) (if ys390d@ls/false (apply (lambda (ys390f@dy) (let ((ys3911@t ys3907@x)) (let ((ys3913@ls/false (ys307a@syntax-dispatch ys3911@t '(#(scheme-id quote) any)))) (if ys3913@ls/false (apply (lambda (ys3915@dx) (list (ys3002@scheme-stx 'quote) (cons ys3915@dx ys390f@dy))) ys3913@ls/false) (let ((ys3917@t ys3911@t)) (let ((ys3919@ls/false (ys307a@syntax-dispatch ys3917@t '_))) (if ys3919@ls/false (apply (lambda () (let ((ys391b@t ys390f@dy)) (let ((ys391d@ls/false (ys307a@syntax-dispatch ys391b@t '()))) (if ys391d@ls/false (apply (lambda () (list (ys3002@scheme-stx 'list) ys3907@x)) ys391d@ls/false) (let ((ys391f@t ys391b@t)) (let ((ys3921@ls/false (ys307a@syntax-dispatch ys391f@t '_))) (if ys3921@ls/false (apply (lambda () (list (ys3002@scheme-stx 'cons) ys3907@x ys3908@y)) ys3921@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys391f@t)))))))) ys3919@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3917@t)))))))) ys390d@ls/false) (let ((ys3923@t ys390b@t)) (let ((ys3925@ls/false (ys307a@syntax-dispatch ys3923@t '(#(scheme-id list) . each-any)))) (if ys3925@ls/false (apply (lambda (ys3927@stuff) (cons* (ys3002@scheme-stx 'list) ys3907@x ys3927@stuff)) ys3925@ls/false) (let ((ys3929@t ys3923@t)) (let ((ys392b@ls/false (ys307a@syntax-dispatch ys3929@t '_))) (if ys392b@ls/false (apply (lambda () (list (ys3002@scheme-stx 'cons) ys3907@x ys3908@y)) ys392b@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3929@t)))))))))))) (set! ys3854@quasiappend (lambda (ys38ed@x ys38ee@y) (let ((ys38f1@ls (let ys38f5@f ((ys38f3@x ys38ed@x)) (if (null? ys38f3@x) (let ((ys38f7@t ys38ee@y)) (let ((ys38f9@ls/false (ys307a@syntax-dispatch ys38f7@t '(#(scheme-id quote) ())))) (if ys38f9@ls/false (apply (lambda () '()) ys38f9@ls/false) (let ((ys38fb@t ys38f7@t)) (let ((ys38fd@ls/false (ys307a@syntax-dispatch ys38fb@t '_))) (if ys38fd@ls/false (apply (lambda () (list ys38ee@y)) ys38fd@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys38fb@t))))))) (let ((ys38ff@t (car ys38f3@x))) (let ((ys3901@ls/false (ys307a@syntax-dispatch ys38ff@t '(#(scheme-id quote) ())))) (if ys3901@ls/false (apply (lambda () (ys38f5@f (cdr ys38f3@x))) ys3901@ls/false) (let ((ys3903@t ys38ff@t)) (let ((ys3905@ls/false (ys307a@syntax-dispatch ys3903@t '_))) (if ys3905@ls/false (apply (lambda () (cons (car ys38f3@x) (ys38f5@f (cdr ys38f3@x)))) ys3905@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3903@t))))))))))) (if (null? ys38f1@ls) (list (ys3002@scheme-stx 'quote) '()) (if (null? (cdr ys38f1@ls)) (car ys38f1@ls) (cons* (ys3002@scheme-stx 'append) ys38f1@ls)))))) (set! ys3856@quasivector (lambda (ys38bb@x) (let ((ys38bd@pat-x ys38bb@x)) (let ((ys38bf@t ys38bd@pat-x)) (let ((ys38c1@ls/false (ys307a@syntax-dispatch ys38bf@t '(#(scheme-id quote) each-any)))) (if ys38c1@ls/false (apply (lambda (ys38c3@x*) (list (ys3002@scheme-stx 'quote) (list->vector ys38c3@x*))) ys38c1@ls/false) (let ((ys38c5@t ys38bf@t)) (let ((ys38c7@ls/false (ys307a@syntax-dispatch ys38c5@t '_))) (if ys38c7@ls/false (apply (lambda () (let ys38cf@f ((ys38c9@x ys38bb@x) (ys38ca@k (lambda (ys38cd@ls) (cons* (ys3002@scheme-stx 'vector) ys38cd@ls)))) (let ((ys38d1@t ys38c9@x)) (let ((ys38d3@ls/false (ys307a@syntax-dispatch ys38d1@t '(#(scheme-id quote) each-any)))) (if ys38d3@ls/false (apply (lambda (ys38d5@x*) (ys38ca@k (map (lambda (ys38d7@x) (list (ys3002@scheme-stx 'quote) ys38d7@x)) ys38d5@x*))) ys38d3@ls/false) (let ((ys38d9@t ys38d1@t)) (let ((ys38db@ls/false (ys307a@syntax-dispatch ys38d9@t '(#(scheme-id list) . each-any)))) (if ys38db@ls/false (apply (lambda (ys38dd@x*) (ys38ca@k ys38dd@x*)) ys38db@ls/false) (let ((ys38df@t ys38d9@t)) (let ((ys38e1@ls/false (ys307a@syntax-dispatch ys38df@t '(#(scheme-id cons) any any)))) (if ys38e1@ls/false (apply (lambda (ys38e3@x ys38e4@y) (ys38cf@f ys38e4@y (lambda (ys38e7@ls) (ys38ca@k (cons ys38e3@x ys38e7@ls))))) ys38e1@ls/false) (let ((ys38e9@t ys38df@t)) (let ((ys38eb@ls/false (ys307a@syntax-dispatch ys38e9@t '_))) (if ys38eb@ls/false (apply (lambda () (list (ys3002@scheme-stx 'list->vector) ys38bd@pat-x)) ys38eb@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys38e9@t))))))))))))))) ys38c7@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys38c5@t)))))))))) (set! ys3858@vquasi (lambda (ys3899@p ys389a@lev) (let ((ys389d@t ys3899@p)) (let ((ys389f@ls/false (ys307a@syntax-dispatch ys389d@t '(any . any)))) (if ys389f@ls/false (apply (lambda (ys38a1@p ys38a2@q) (let ((ys38a5@t ys38a1@p)) (let ((ys38a7@ls/false (ys307a@syntax-dispatch ys38a5@t '(#(scheme-id unquote) . each-any)))) (if ys38a7@ls/false (apply (lambda (ys38a9@p) (if (= ys389a@lev '0) (ys3850@quasicons* ys38a9@p (ys3858@vquasi ys38a2@q ys389a@lev)) (ys3852@quasicons (ys3852@quasicons (ys3834@datum 'unquote) (ys385a@quasi ys38a9@p (- ys389a@lev '1))) (ys3858@vquasi ys38a2@q ys389a@lev)))) ys38a7@ls/false) (let ((ys38ab@t ys38a5@t)) (let ((ys38ad@ls/false (ys307a@syntax-dispatch ys38ab@t '(#(scheme-id unquote-splicing) . each-any)))) (if ys38ad@ls/false (apply (lambda (ys38af@p) (if (= ys389a@lev '0) (ys3854@quasiappend ys38af@p (ys3858@vquasi ys38a2@q ys389a@lev)) (ys3852@quasicons (ys3852@quasicons (ys3834@datum 'unquote-splicing) (ys385a@quasi ys38af@p (- ys389a@lev '1))) (ys3858@vquasi ys38a2@q ys389a@lev)))) ys38ad@ls/false) (let ((ys38b1@t ys38ab@t)) (let ((ys38b3@ls/false (ys307a@syntax-dispatch ys38b1@t 'any))) (if ys38b3@ls/false (apply (lambda (ys38b5@p) (ys3852@quasicons (ys385a@quasi ys38b5@p ys389a@lev) (ys3858@vquasi ys38a2@q ys389a@lev))) ys38b3@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys38b1@t))))))))))) ys389f@ls/false) (let ((ys38b7@t ys389d@t)) (let ((ys38b9@ls/false (ys307a@syntax-dispatch ys38b7@t '()))) (if ys38b9@ls/false (apply (lambda () (list (ys3002@scheme-stx 'quote) '())) ys38b9@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys38b7@t))))))))) (set! ys385a@quasi (lambda (ys3863@p ys3864@lev) (let ((ys3867@t ys3863@p)) (let ((ys3869@ls/false (ys307a@syntax-dispatch ys3867@t '(#(scheme-id unquote) any)))) (if ys3869@ls/false (apply (lambda (ys386b@p) (if (= ys3864@lev '0) ys386b@p (ys3852@quasicons (ys3834@datum 'unquote) (ys385a@quasi (list ys386b@p) (- ys3864@lev '1))))) ys3869@ls/false) (let ((ys386d@t ys3867@t)) (let ((ys386f@ls/false (ys307a@syntax-dispatch ys386d@t '((#(scheme-id unquote) . each-any) . any)))) (if ys386f@ls/false (apply (lambda (ys3871@p ys3872@q) (if (= ys3864@lev '0) (ys3850@quasicons* ys3871@p (ys385a@quasi ys3872@q ys3864@lev)) (ys3852@quasicons (ys3852@quasicons (ys3834@datum 'unquote) (ys385a@quasi ys3871@p (- ys3864@lev '1))) (ys385a@quasi ys3872@q ys3864@lev)))) ys386f@ls/false) (let ((ys3875@t ys386d@t)) (let ((ys3877@ls/false (ys307a@syntax-dispatch ys3875@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if ys3877@ls/false (apply (lambda (ys3879@p ys387a@q) (if (= ys3864@lev '0) (ys3854@quasiappend ys3879@p (ys385a@quasi ys387a@q ys3864@lev)) (ys3852@quasicons (ys3852@quasicons (ys3834@datum 'unquote-splicing) (ys385a@quasi ys3879@p (- ys3864@lev '1))) (ys385a@quasi ys387a@q ys3864@lev)))) ys3877@ls/false) (let ((ys387d@t ys3875@t)) (let ((ys387f@ls/false (ys307a@syntax-dispatch ys387d@t '(#(scheme-id quasiquote) any)))) (if ys387f@ls/false (apply (lambda (ys3881@p) (ys3852@quasicons (ys3834@datum 'quasiquote) (ys385a@quasi (list ys3881@p) (+ ys3864@lev '1)))) ys387f@ls/false) (let ((ys3883@t ys387d@t)) (let ((ys3885@ls/false (ys307a@syntax-dispatch ys3883@t '(any . any)))) (if ys3885@ls/false (apply (lambda (ys3887@p ys3888@q) (ys3852@quasicons (ys385a@quasi ys3887@p ys3864@lev) (ys385a@quasi ys3888@q ys3864@lev))) ys3885@ls/false) (let ((ys388b@t ys3883@t)) (let ((ys388d@ls/false (ys307a@syntax-dispatch ys388b@t '#(vector each-any)))) (if (and ys388d@ls/false (apply (lambda (ys388f@x) (not (ys2e3f@stx? ys388f@x))) ys388d@ls/false)) (apply (lambda (ys3891@x) (ys3856@quasivector (ys3858@vquasi ys3891@x ys3864@lev))) ys388d@ls/false) (let ((ys3893@t ys388b@t)) (let ((ys3895@ls/false (ys307a@syntax-dispatch ys3893@t 'any))) (if ys3895@ls/false (apply (lambda (ys3897@p) (list (ys3002@scheme-stx 'quote) ys3897@p)) ys3895@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3893@t)))))))))))))))))))))))) (lambda (ys385b@x) (let ((ys385d@t ys385b@x)) (let ((ys385f@ls/false (ys307a@syntax-dispatch ys385d@t '(_ any)))) (if ys385f@ls/false (apply (lambda (ys3861@e) (ys385a@quasi ys3861@e '0)) ys385f@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys385d@t)))))))) (set! ys4b47@ys3068@quasiquote-macro ys3068@quasiquote-macro) (set! ys306a@quasisyntax-macro (let ((ys3938@quasi '#f)) (begin (set! ys3938@quasi (lambda (ys3953@p ys3954@lev) (let ((ys3957@t ys3953@p)) (let ((ys3959@ls/false (ys307a@syntax-dispatch ys3957@t '(#(scheme-id unsyntax) any)))) (if ys3959@ls/false (apply (lambda (ys395b@p) (if (= ys3954@lev '0) (let ((ys395d@g (gensym))) (values (list ys395d@g) (list ys395b@p) ys395d@g)) (call-with-values (lambda () (ys3938@quasi ys395b@p (- ys3954@lev '1))) (lambda (ys3965@ys3960 ys3966@ys3962 ys3967@ys3964) (let ((ys396b@p ys3967@ys3964) (ys396c@rhs* ys3966@ys3962) (ys396d@lhs* ys3965@ys3960)) (values ys396d@lhs* ys396c@rhs* (list 'unsyntax ys396b@p))))))) ys3959@ls/false) (let ((ys3971@t ys3957@t)) (let ((ys3973@ls/false (ys307a@syntax-dispatch ys3971@t '#(scheme-id unsyntax)))) (if (and ys3973@ls/false (apply (lambda () (= ys3954@lev '0)) ys3973@ls/false)) (apply (lambda () (ys315a@syntax-violation '#f '"incorrect use of unsyntax" ys3953@p)) ys3973@ls/false) (let ((ys3975@t ys3971@t)) (let ((ys3977@ls/false (ys307a@syntax-dispatch ys3975@t '((#(scheme-id unsyntax) . each-any) . any)))) (if ys3977@ls/false (apply (lambda (ys3979@p* ys397a@q) (call-with-values (lambda () (ys3938@quasi ys397a@q ys3954@lev)) (lambda (ys3983@ys397e ys3984@ys3980 ys3985@ys3982) (let ((ys3989@q ys3985@ys3982) (ys398a@rhs* ys3984@ys3980) (ys398b@lhs* ys3983@ys397e)) (if (= ys3954@lev '0) (let ((ys398f@g* (map (lambda (ys3991@x) (gensym)) ys3979@p*))) (values (append ys398f@g* ys398b@lhs*) (append ys3979@p* ys398a@rhs*) (append ys398f@g* ys3989@q))) (call-with-values (lambda () (ys3938@quasi ys3979@p* (- ys3954@lev '1))) (lambda (ys3999@ys3994 ys399a@ys3996 ys399b@ys3998) (let ((ys399f@p* ys399b@ys3998) (ys39a0@rhs2* ys399a@ys3996) (ys39a1@lhs2* ys3999@ys3994)) (values (append ys39a1@lhs2* ys398b@lhs*) (append ys39a0@rhs2* ys398a@rhs*) (cons (cons 'unsyntax ys399f@p*) ys3989@q)))))))))) ys3977@ls/false) (let ((ys39a5@t ys3975@t)) (let ((ys39a7@ls/false (ys307a@syntax-dispatch ys39a5@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if ys39a7@ls/false (apply (lambda (ys39a9@p* ys39aa@q) (call-with-values (lambda () (ys3938@quasi ys39aa@q ys3954@lev)) (lambda (ys39b3@ys39ae ys39b4@ys39b0 ys39b5@ys39b2) (let ((ys39b9@q ys39b5@ys39b2) (ys39ba@rhs* ys39b4@ys39b0) (ys39bb@lhs* ys39b3@ys39ae)) (if (= ys3954@lev '0) (let ((ys39bf@g* (map (lambda (ys39c1@x) (gensym)) ys39a9@p*))) (values (append (map (lambda (ys39c3@g) (cons ys39c3@g '(...))) ys39bf@g*) ys39bb@lhs*) (append ys39a9@p* ys39ba@rhs*) (append (apply append (map (lambda (ys39c5@g) (cons ys39c5@g '(...))) ys39bf@g*)) ys39b9@q))) (call-with-values (lambda () (ys3938@quasi ys39a9@p* (- ys3954@lev '1))) (lambda (ys39cd@ys39c8 ys39ce@ys39ca ys39cf@ys39cc) (let ((ys39d3@p* ys39cf@ys39cc) (ys39d4@rhs2* ys39ce@ys39ca) (ys39d5@lhs2* ys39cd@ys39c8)) (values (append ys39d5@lhs2* ys39bb@lhs*) (append ys39d4@rhs2* ys39ba@rhs*) (cons (cons 'unsyntax-splicing ys39d3@p*) ys39b9@q)))))))))) ys39a7@ls/false) (let ((ys39d9@t ys39a5@t)) (let ((ys39db@ls/false (ys307a@syntax-dispatch ys39d9@t '#(scheme-id unsyntax-splicing)))) (if (and ys39db@ls/false (apply (lambda () (= ys3954@lev '0)) ys39db@ls/false)) (apply (lambda () (ys315a@syntax-violation '#f '"incorrect use of unsyntax-splicing" ys3953@p)) ys39db@ls/false) (let ((ys39dd@t ys39d9@t)) (let ((ys39df@ls/false (ys307a@syntax-dispatch ys39dd@t '(#(scheme-id quasisyntax) any)))) (if ys39df@ls/false (apply (lambda (ys39e1@p) (call-with-values (lambda () (ys3938@quasi ys39e1@p (+ ys3954@lev '1))) (lambda (ys39e9@ys39e4 ys39ea@ys39e6 ys39eb@ys39e8) (let ((ys39ef@p ys39eb@ys39e8) (ys39f0@rhs* ys39ea@ys39e6) (ys39f1@lhs* ys39e9@ys39e4)) (values ys39f1@lhs* ys39f0@rhs* (list 'quasisyntax ys39ef@p)))))) ys39df@ls/false) (let ((ys39f5@t ys39dd@t)) (let ((ys39f7@ls/false (ys307a@syntax-dispatch ys39f5@t '(any . any)))) (if ys39f7@ls/false (apply (lambda (ys39f9@p ys39fa@q) (call-with-values (lambda () (ys3938@quasi ys39f9@p ys3954@lev)) (lambda (ys3a09@ys39fe ys3a0a@ys3a00 ys3a0b@ys3a02) (call-with-values (lambda () (ys3938@quasi ys39fa@q ys3954@lev)) (lambda (ys3a0f@ys3a04 ys3a10@ys3a06 ys3a11@ys3a08) (let ((ys3a15@q ys3a11@ys3a08) (ys3a16@rhs2* ys3a10@ys3a06) (ys3a17@lhs2* ys3a0f@ys3a04) (ys3a18@p ys3a0b@ys3a02) (ys3a19@rhs* ys3a0a@ys3a00) (ys3a1a@lhs* ys3a09@ys39fe)) (values (append ys3a17@lhs2* ys3a1a@lhs*) (append ys3a16@rhs2* ys3a19@rhs*) (cons ys3a18@p ys3a15@q)))))))) ys39f7@ls/false) (let ((ys3a21@t ys39f5@t)) (let ((ys3a23@ls/false (ys307a@syntax-dispatch ys3a21@t '#(vector each-any)))) (if ys3a23@ls/false (apply (lambda (ys3a25@x*) (call-with-values (lambda () (ys3938@quasi ys3a25@x* ys3954@lev)) (lambda (ys3a2d@ys3a28 ys3a2e@ys3a2a ys3a2f@ys3a2c) (let ((ys3a33@x* ys3a2f@ys3a2c) (ys3a34@rhs* ys3a2e@ys3a2a) (ys3a35@lhs* ys3a2d@ys3a28)) (values ys3a35@lhs* ys3a34@rhs* (list->vector ys3a33@x*)))))) ys3a23@ls/false) (let ((ys3a39@t ys3a21@t)) (let ((ys3a3b@ls/false (ys307a@syntax-dispatch ys3a39@t '_))) (if ys3a3b@ls/false (apply (lambda () (values '() '() ys3953@p)) ys3a3b@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3a39@t)))))))))))))))))))))))))))))) (lambda (ys3939@x) (let ((ys393b@t ys3939@x)) (let ((ys393d@ls/false (ys307a@syntax-dispatch ys393b@t '(_ any)))) (if ys393d@ls/false (apply (lambda (ys393f@e) (call-with-values (lambda () (ys3938@quasi ys393f@e '0)) (lambda (ys3947@ys3942 ys3948@ys3944 ys3949@ys3946) (let ((ys394d@v ys3949@ys3946) (ys394e@rhs* ys3948@ys3944) (ys394f@lhs* ys3947@ys3942)) (ys3030@bless (list 'syntax-case (cons 'list ys394e@rhs*) '() (list ys394f@lhs* (list 'syntax ys394d@v)))))))) ys393d@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys393b@t)))))))) (set! ys4b48@ys306a@quasisyntax-macro ys306a@quasisyntax-macro) (set! ys306c@define-struct-macro (lambda (ys3a3d@stx) (ys315a@syntax-violation '#f '"define-struct not supported" ys3a3d@stx))) (set! ys4b49@ys306c@define-struct-macro ys306c@define-struct-macro) (set! ys306e@define-record-type-macro (lambda (ys3a3f@x) (let ((ys3a42@id '#f) (ys3a44@get-record-name '#f) (ys3a46@get-record-constructor-name '#f) (ys3a48@get-record-predicate-name '#f) (ys3a4a@get-clause '#f) (ys3a4c@foo-rtd-code '#f) (ys3a4e@parent-rtd-code '#f) (ys3a50@parent-rcd-code '#f) (ys3a52@foo-rcd-code '#f) (ys3a54@get-protocol-code '#f) (ys3a56@get-fields '#f) (ys3a58@get-mutator-indices '#f) (ys3a5a@get-mutators '#f) (ys3a5c@get-accessors '#f) (ys3a5e@enumerate '#f) (ys3a60@do-define-record '#f) (ys3a62@verify-clauses '#f)) (begin (set! ys3a42@id (lambda (ys3c35@ctxt . ys3c37@str*) (ys315e@datum->syntax ys3c35@ctxt (string->symbol (apply string-append (map (lambda (ys3c39@x) (if (symbol? ys3c39@x) (symbol->string ys3c39@x) (if (string? ys3c39@x) ys3c39@x (assertion-violation 'define-record-type '"BUG")))) ys3c37@str*)))))) (set! ys3a44@get-record-name (lambda (ys3c23@spec) (let ((ys3c25@t ys3c23@spec)) (let ((ys3c27@ls/false (ys307a@syntax-dispatch ys3c25@t '(any any any)))) (if ys3c27@ls/false (apply (lambda (ys3c29@foo ys3c2a@make-foo ys3c2b@foo?) ys3c29@foo) ys3c27@ls/false) (let ((ys3c2f@t ys3c25@t)) (let ((ys3c31@ls/false (ys307a@syntax-dispatch ys3c2f@t 'any))) (if ys3c31@ls/false (apply (lambda (ys3c33@foo) ys3c33@foo) ys3c31@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3c2f@t))))))))) (set! ys3a46@get-record-constructor-name (lambda (ys3c0f@spec) (let ((ys3c11@t ys3c0f@spec)) (let ((ys3c13@ls/false (ys307a@syntax-dispatch ys3c11@t '(any any any)))) (if ys3c13@ls/false (apply (lambda (ys3c15@foo ys3c16@make-foo ys3c17@foo?) ys3c16@make-foo) ys3c13@ls/false) (let ((ys3c1b@t ys3c11@t)) (let ((ys3c1d@ls/false (ys307a@syntax-dispatch ys3c1b@t 'any))) (if (and ys3c1d@ls/false (apply (lambda (ys3c1f@foo) (ys2e73@id? ys3c1f@foo)) ys3c1d@ls/false)) (apply (lambda (ys3c21@foo) (ys3a42@id ys3c21@foo '"make-" (ys2e87@stx->datum ys3c21@foo))) ys3c1d@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3c1b@t))))))))) (set! ys3a48@get-record-predicate-name (lambda (ys3bfb@spec) (let ((ys3bfd@t ys3bfb@spec)) (let ((ys3bff@ls/false (ys307a@syntax-dispatch ys3bfd@t '(any any any)))) (if ys3bff@ls/false (apply (lambda (ys3c01@foo ys3c02@make-foo ys3c03@foo?) ys3c03@foo?) ys3bff@ls/false) (let ((ys3c07@t ys3bfd@t)) (let ((ys3c09@ls/false (ys307a@syntax-dispatch ys3c07@t 'any))) (if (and ys3c09@ls/false (apply (lambda (ys3c0b@foo) (ys2e73@id? ys3c0b@foo)) ys3c09@ls/false)) (apply (lambda (ys3c0d@foo) (ys3a42@id ys3c0d@foo (ys2e87@stx->datum ys3c0d@foo) '"?")) ys3c09@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3c07@t))))))))) (set! ys3a4a@get-clause (lambda (ys3be9@id ys3bea@ls) (let ((ys3bed@t ys3bea@ls)) (let ((ys3bef@ls/false (ys307a@syntax-dispatch ys3bed@t '()))) (if ys3bef@ls/false (apply (lambda () '#f) ys3bef@ls/false) (let ((ys3bf1@t ys3bed@t)) (let ((ys3bf3@ls/false (ys307a@syntax-dispatch ys3bf1@t '((any . any) . any)))) (if ys3bf3@ls/false (apply (lambda (ys3bf5@x ys3bf6@rest ys3bf7@ls) (if (ys2e79@free-id=? (ys3030@bless ys3be9@id) ys3bf5@x) (cons ys3bf5@x ys3bf6@rest) (ys3a4a@get-clause ys3be9@id ys3bf7@ls))) ys3bf3@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3bf1@t))))))))) (set! ys3a4c@foo-rtd-code (lambda (ys3b97@name ys3b98@clause* ys3b99@parent-rtd-code) (let ((ys3b9e@convert-field-spec* '#f)) (begin (set! ys3b9e@convert-field-spec* (lambda (ys3bcf@ls) (list->vector (map (lambda (ys3bd1@x) (let ((ys3bd3@t ys3bd1@x)) (let ((ys3bd5@ls/false (ys307a@syntax-dispatch ys3bd3@t '(#(scheme-id mutable) any . any)))) (if ys3bd5@ls/false (apply (lambda (ys3bd7@name ys3bd8@rest) (list 'mutable ys3bd7@name)) ys3bd5@ls/false) (let ((ys3bdb@t ys3bd3@t)) (let ((ys3bdd@ls/false (ys307a@syntax-dispatch ys3bdb@t '(#(scheme-id immutable) any . any)))) (if ys3bdd@ls/false (apply (lambda (ys3bdf@name ys3be0@rest) (list 'immutable ys3bdf@name)) ys3bdd@ls/false) (let ((ys3be3@t ys3bdb@t)) (let ((ys3be5@ls/false (ys307a@syntax-dispatch ys3be3@t 'any))) (if ys3be5@ls/false (apply (lambda (ys3be7@name) (list 'immutable ys3be7@name)) ys3be5@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3be3@t))))))))))) ys3bcf@ls)))) (let ((ys3b9f@uid-code (let ((ys3ba7@t (ys3a4a@get-clause 'nongenerative ys3b98@clause*))) (let ((ys3ba9@ls/false (ys307a@syntax-dispatch ys3ba7@t '(_)))) (if ys3ba9@ls/false (apply (lambda () (list 'quote (gensym))) ys3ba9@ls/false) (let ((ys3bab@t ys3ba7@t)) (let ((ys3bad@ls/false (ys307a@syntax-dispatch ys3bab@t '(_ any)))) (if ys3bad@ls/false (apply (lambda (ys3baf@uid) (list 'quote ys3baf@uid)) ys3bad@ls/false) (let ((ys3bb1@t ys3bab@t)) (let ((ys3bb3@ls/false (ys307a@syntax-dispatch ys3bb1@t '_))) (if ys3bb3@ls/false (apply (lambda () '#f) ys3bb3@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3bb1@t))))))))))) (ys3ba0@sealed? (let ((ys3bb5@t (ys3a4a@get-clause 'sealed ys3b98@clause*))) (let ((ys3bb7@ls/false (ys307a@syntax-dispatch ys3bb5@t '(_ #(atom #t))))) (if ys3bb7@ls/false (apply (lambda () '#t) ys3bb7@ls/false) (let ((ys3bb9@t ys3bb5@t)) (let ((ys3bbb@ls/false (ys307a@syntax-dispatch ys3bb9@t '_))) (if ys3bbb@ls/false (apply (lambda () '#f) ys3bbb@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3bb9@t)))))))) (ys3ba1@opaque? (let ((ys3bbd@t (ys3a4a@get-clause 'opaque ys3b98@clause*))) (let ((ys3bbf@ls/false (ys307a@syntax-dispatch ys3bbd@t '(_ #(atom #t))))) (if ys3bbf@ls/false (apply (lambda () '#t) ys3bbf@ls/false) (let ((ys3bc1@t ys3bbd@t)) (let ((ys3bc3@ls/false (ys307a@syntax-dispatch ys3bc1@t '_))) (if ys3bc3@ls/false (apply (lambda () '#f) ys3bc3@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3bc1@t)))))))) (ys3ba2@fields (let ((ys3bc5@t (ys3a4a@get-clause 'fields ys3b98@clause*))) (let ((ys3bc7@ls/false (ys307a@syntax-dispatch ys3bc5@t '(_ . each-any)))) (if ys3bc7@ls/false (apply (lambda (ys3bc9@field-spec*) (list 'quote (ys3b9e@convert-field-spec* ys3bc9@field-spec*))) ys3bc7@ls/false) (let ((ys3bcb@t ys3bc5@t)) (let ((ys3bcd@ls/false (ys307a@syntax-dispatch ys3bcb@t '_))) (if ys3bcd@ls/false (apply (lambda () ''#()) ys3bcd@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3bcb@t))))))))) (ys3030@bless (list 'make-record-type-descriptor (list 'quote ys3b97@name) ys3b99@parent-rtd-code ys3b9f@uid-code ys3ba0@sealed? ys3ba1@opaque? ys3ba2@fields))))))) (set! ys3a4e@parent-rtd-code (lambda (ys3b7f@clause*) (let ((ys3b81@t (ys3a4a@get-clause 'parent ys3b7f@clause*))) (let ((ys3b83@ls/false (ys307a@syntax-dispatch ys3b81@t '(_ any)))) (if ys3b83@ls/false (apply (lambda (ys3b85@name) (list 'record-type-descriptor ys3b85@name)) ys3b83@ls/false) (let ((ys3b87@t ys3b81@t)) (let ((ys3b89@ls/false (ys307a@syntax-dispatch ys3b87@t '#(atom #f)))) (if ys3b89@ls/false (apply (lambda () (let ((ys3b8b@t (ys3a4a@get-clause 'parent-rtd ys3b7f@clause*))) (let ((ys3b8d@ls/false (ys307a@syntax-dispatch ys3b8b@t '(_ any any)))) (if ys3b8d@ls/false (apply (lambda (ys3b8f@rtd ys3b90@rcd) ys3b8f@rtd) ys3b8d@ls/false) (let ((ys3b93@t ys3b8b@t)) (let ((ys3b95@ls/false (ys307a@syntax-dispatch ys3b93@t '#(atom #f)))) (if ys3b95@ls/false (apply (lambda () '#f) ys3b95@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3b93@t)))))))) ys3b89@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3b87@t))))))))) (set! ys3a50@parent-rcd-code (lambda (ys3b67@clause*) (let ((ys3b69@t (ys3a4a@get-clause 'parent ys3b67@clause*))) (let ((ys3b6b@ls/false (ys307a@syntax-dispatch ys3b69@t '(_ any)))) (if ys3b6b@ls/false (apply (lambda (ys3b6d@name) (list 'record-constructor-descriptor ys3b6d@name)) ys3b6b@ls/false) (let ((ys3b6f@t ys3b69@t)) (let ((ys3b71@ls/false (ys307a@syntax-dispatch ys3b6f@t '#(atom #f)))) (if ys3b71@ls/false (apply (lambda () (let ((ys3b73@t (ys3a4a@get-clause 'parent-rtd ys3b67@clause*))) (let ((ys3b75@ls/false (ys307a@syntax-dispatch ys3b73@t '(_ any any)))) (if ys3b75@ls/false (apply (lambda (ys3b77@rtd ys3b78@rcd) ys3b78@rcd) ys3b75@ls/false) (let ((ys3b7b@t ys3b73@t)) (let ((ys3b7d@ls/false (ys307a@syntax-dispatch ys3b7b@t '#(atom #f)))) (if ys3b7d@ls/false (apply (lambda () '#f) ys3b7d@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3b7b@t)))))))) ys3b71@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3b6f@t))))))))) (set! ys3a52@foo-rcd-code (lambda (ys3b5f@clause* ys3b60@foo-rtd ys3b61@protocol ys3b62@parent-rcd-code) (list 'make-record-constructor-descriptor ys3b60@foo-rtd ys3b62@parent-rcd-code ys3b61@protocol))) (set! ys3a54@get-protocol-code (lambda (ys3b53@clause*) (let ((ys3b55@t (ys3a4a@get-clause 'protocol ys3b53@clause*))) (let ((ys3b57@ls/false (ys307a@syntax-dispatch ys3b55@t '(_ any)))) (if ys3b57@ls/false (apply (lambda (ys3b59@expr) ys3b59@expr) ys3b57@ls/false) (let ((ys3b5b@t ys3b55@t)) (let ((ys3b5d@ls/false (ys307a@syntax-dispatch ys3b5b@t '_))) (if ys3b5d@ls/false (apply (lambda () '#f) ys3b5d@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3b5b@t))))))))) (set! ys3a56@get-fields (lambda (ys3b41@clause*) (let ((ys3b43@t ys3b41@clause*)) (let ((ys3b45@ls/false (ys307a@syntax-dispatch ys3b43@t '()))) (if ys3b45@ls/false (apply (lambda () '()) ys3b45@ls/false) (let ((ys3b47@t ys3b43@t)) (let ((ys3b49@ls/false (ys307a@syntax-dispatch ys3b47@t '((#(scheme-id fields) . each-any) . _)))) (if ys3b49@ls/false (apply (lambda (ys3b4b@f*) ys3b4b@f*) ys3b49@ls/false) (let ((ys3b4d@t ys3b47@t)) (let ((ys3b4f@ls/false (ys307a@syntax-dispatch ys3b4d@t '(_ . any)))) (if ys3b4f@ls/false (apply (lambda (ys3b51@rest) (ys3a56@get-fields ys3b51@rest)) ys3b4f@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3b4d@t)))))))))))) (set! ys3a58@get-mutator-indices (lambda (ys3b29@fields) (let ys3b2f@f ((ys3b2b@fields ys3b29@fields) (ys3b2c@i '0)) (let ((ys3b31@t ys3b2b@fields)) (let ((ys3b33@ls/false (ys307a@syntax-dispatch ys3b31@t '()))) (if ys3b33@ls/false (apply (lambda () '()) ys3b33@ls/false) (let ((ys3b35@t ys3b31@t)) (let ((ys3b37@ls/false (ys307a@syntax-dispatch ys3b35@t '((#(scheme-id mutable) . _) . any)))) (if ys3b37@ls/false (apply (lambda (ys3b39@rest) (cons ys3b2c@i (ys3b2f@f ys3b39@rest (+ ys3b2c@i '1)))) ys3b37@ls/false) (let ((ys3b3b@t ys3b35@t)) (let ((ys3b3d@ls/false (ys307a@syntax-dispatch ys3b3b@t '(_ . any)))) (if ys3b3d@ls/false (apply (lambda (ys3b3f@rest) (ys3b2f@f ys3b3f@rest (+ ys3b2c@i '1))) ys3b3d@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3b3b@t))))))))))))) (set! ys3a5a@get-mutators (lambda (ys3aff@foo ys3b00@fields) (let ((ys3b04@gen-name '#f)) (begin (set! ys3b04@gen-name (lambda (ys3b27@x) (ys315e@datum->syntax ys3aff@foo (string->symbol (string-append (symbol->string (ys3160@syntax->datum ys3aff@foo)) '"-" (symbol->string (ys3160@syntax->datum ys3b27@x)) '"-set!"))))) (let ys3b07@f ((ys3b05@fields ys3b00@fields)) (let ((ys3b09@t ys3b05@fields)) (let ((ys3b0b@ls/false (ys307a@syntax-dispatch ys3b09@t '()))) (if ys3b0b@ls/false (apply (lambda () '()) ys3b0b@ls/false) (let ((ys3b0d@t ys3b09@t)) (let ((ys3b0f@ls/false (ys307a@syntax-dispatch ys3b0d@t '((#(scheme-id mutable) any any any) . any)))) (if ys3b0f@ls/false (apply (lambda (ys3b11@name ys3b12@accessor ys3b13@mutator ys3b14@rest) (cons ys3b13@mutator (ys3b07@f ys3b14@rest))) ys3b0f@ls/false) (let ((ys3b19@t ys3b0d@t)) (let ((ys3b1b@ls/false (ys307a@syntax-dispatch ys3b19@t '((#(scheme-id mutable) any) . any)))) (if ys3b1b@ls/false (apply (lambda (ys3b1d@name ys3b1e@rest) (cons (ys3b04@gen-name ys3b1d@name) (ys3b07@f ys3b1e@rest))) ys3b1b@ls/false) (let ((ys3b21@t ys3b19@t)) (let ((ys3b23@ls/false (ys307a@syntax-dispatch ys3b21@t '(_ . any)))) (if ys3b23@ls/false (apply (lambda (ys3b25@rest) (ys3b07@f ys3b25@rest)) ys3b23@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3b21@t)))))))))))))))))) (set! ys3a5c@get-accessors (lambda (ys3abb@foo ys3abc@fields) (let ((ys3ac0@gen-name '#f)) (begin (set! ys3ac0@gen-name (lambda (ys3afd@x) (ys315e@datum->syntax ys3abb@foo (string->symbol (string-append (symbol->string (ys3160@syntax->datum ys3abb@foo)) '"-" (symbol->string (ys3160@syntax->datum ys3afd@x))))))) (map (lambda (ys3ac1@field) (let ((ys3ac3@t ys3ac1@field)) (let ((ys3ac5@ls/false (ys307a@syntax-dispatch ys3ac3@t '(#(scheme-id mutable) any any any)))) (if (and ys3ac5@ls/false (apply (lambda (ys3ac7@name ys3ac8@accessor ys3ac9@mutator) (ys2e73@id? ys3ac8@accessor)) ys3ac5@ls/false)) (apply (lambda (ys3acd@name ys3ace@accessor ys3acf@mutator) ys3ace@accessor) ys3ac5@ls/false) (let ((ys3ad3@t ys3ac3@t)) (let ((ys3ad5@ls/false (ys307a@syntax-dispatch ys3ad3@t '(#(scheme-id immutable) any any)))) (if (and ys3ad5@ls/false (apply (lambda (ys3ad7@name ys3ad8@accessor) (ys2e73@id? ys3ad8@accessor)) ys3ad5@ls/false)) (apply (lambda (ys3adb@name ys3adc@accessor) ys3adc@accessor) ys3ad5@ls/false) (let ((ys3adf@t ys3ad3@t)) (let ((ys3ae1@ls/false (ys307a@syntax-dispatch ys3adf@t '(#(scheme-id mutable) any)))) (if (and ys3ae1@ls/false (apply (lambda (ys3ae3@name) (ys2e73@id? ys3ae3@name)) ys3ae1@ls/false)) (apply (lambda (ys3ae5@name) (ys3ac0@gen-name ys3ae5@name)) ys3ae1@ls/false) (let ((ys3ae7@t ys3adf@t)) (let ((ys3ae9@ls/false (ys307a@syntax-dispatch ys3ae7@t '(#(scheme-id immutable) any)))) (if (and ys3ae9@ls/false (apply (lambda (ys3aeb@name) (ys2e73@id? ys3aeb@name)) ys3ae9@ls/false)) (apply (lambda (ys3aed@name) (ys3ac0@gen-name ys3aed@name)) ys3ae9@ls/false) (let ((ys3aef@t ys3ae7@t)) (let ((ys3af1@ls/false (ys307a@syntax-dispatch ys3aef@t 'any))) (if (and ys3af1@ls/false (apply (lambda (ys3af3@name) (ys2e73@id? ys3af3@name)) ys3af1@ls/false)) (apply (lambda (ys3af5@name) (ys3ac0@gen-name ys3af5@name)) ys3af1@ls/false) (let ((ys3af7@t ys3aef@t)) (let ((ys3af9@ls/false (ys307a@syntax-dispatch ys3af7@t 'any))) (if ys3af9@ls/false (apply (lambda (ys3afb@others) (ys315a@syntax-violation '#f '"invalid field spec" ys3ac1@field)) ys3af9@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3af7@t)))))))))))))))))))) ys3abc@fields))))) (set! ys3a5e@enumerate (lambda (ys3ab3@ls) (let ys3ab9@f ((ys3ab5@ls ys3ab3@ls) (ys3ab6@i '0)) (if (null? ys3ab5@ls) '() (cons ys3ab6@i (ys3ab9@f (cdr ys3ab5@ls) (+ ys3ab6@i '1))))))) (set! ys3a60@do-define-record (lambda (ys3a8b@namespec ys3a8c@clause*) (let ((ys3a8f@foo (ys3a44@get-record-name ys3a8b@namespec))) (let ((ys3a91@foo-rtd (gensym))) (let ((ys3a93@foo-rcd (gensym))) (let ((ys3a95@protocol (gensym))) (let ((ys3a97@make-foo (ys3a46@get-record-constructor-name ys3a8b@namespec))) (let ((ys3a99@fields (ys3a56@get-fields ys3a8c@clause*))) (let ((ys3a9b@idx* (ys3a5e@enumerate ys3a99@fields))) (let ((ys3a9d@foo-x* (ys3a5c@get-accessors ys3a8f@foo ys3a99@fields))) (let ((ys3a9f@set-foo-x!* (ys3a5a@get-mutators ys3a8f@foo ys3a99@fields))) (let ((ys3aa1@set-foo-idx* (ys3a58@get-mutator-indices ys3a99@fields))) (let ((ys3aa3@foo? (ys3a48@get-record-predicate-name ys3a8b@namespec))) (let ((ys3aa5@foo-rtd-code (ys3a4c@foo-rtd-code ys3a8f@foo ys3a8c@clause* (ys3a4e@parent-rtd-code ys3a8c@clause*)))) (let ((ys3aa7@foo-rcd-code (ys3a52@foo-rcd-code ys3a8c@clause* ys3a91@foo-rtd ys3a95@protocol (ys3a50@parent-rcd-code ys3a8c@clause*)))) (let ((ys3aa9@protocol-code (ys3a54@get-protocol-code ys3a8c@clause*))) (ys3030@bless (cons 'begin (cons (list 'define ys3a91@foo-rtd ys3aa5@foo-rtd-code) (cons (list 'define ys3a95@protocol ys3aa9@protocol-code) (cons (list 'define ys3a93@foo-rcd ys3aa7@foo-rcd-code) (cons (list 'define-syntax ys3a8f@foo (list 'list ''$rtd (list 'syntax ys3a91@foo-rtd) (list 'syntax ys3a93@foo-rcd))) (cons (list 'define ys3aa3@foo? (list 'record-predicate ys3a91@foo-rtd)) (cons (list 'define ys3a97@make-foo (list 'record-constructor ys3a93@foo-rcd)) (append (map (lambda (ys3aab@foo-x ys3aac@idx) (list 'define ys3aab@foo-x (list 'record-accessor ys3a91@foo-rtd ys3aac@idx))) ys3a9d@foo-x* ys3a9b@idx*) (map (lambda (ys3aaf@set-foo-x! ys3ab0@idx) (list 'define ys3aaf@set-foo-x! (list 'record-mutator ys3a91@foo-rtd ys3ab0@idx))) ys3a9f@set-foo-x!* ys3aa1@set-foo-idx*)))))))))))))))))))))))))) (set! ys3a62@verify-clauses (lambda (ys3a6b@x ys3a6c@cls*) (let ((ys3a70@valid-kwds '#f) (ys3a72@free-id-member? '#f)) (begin (set! ys3a70@valid-kwds (map ys3030@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! ys3a72@free-id-member? (lambda (ys3a87@x ys3a88@ls) (and (pair? ys3a88@ls) (or (ys2e79@free-id=? ys3a87@x (car ys3a88@ls)) (ys3a72@free-id-member? ys3a87@x (cdr ys3a88@ls)))))) (let ys3a77@f ((ys3a73@cls* ys3a6c@cls*) (ys3a74@seen* '())) (if (not (null? ys3a73@cls*)) (let ((ys3a79@t (car ys3a73@cls*))) (let ((ys3a7b@ls/false (ys307a@syntax-dispatch ys3a79@t '(any . any)))) (if ys3a7b@ls/false (apply (lambda (ys3a7d@kwd ys3a7e@rest) (if (or (not (ys2e73@id? ys3a7d@kwd)) (not (ys3a72@free-id-member? ys3a7d@kwd ys3a70@valid-kwds))) (ys315a@syntax-violation '#f '"not a valid define-record-type keyword" ys3a7d@kwd) (if (ys2e7f@bound-id-member? ys3a7d@kwd ys3a74@seen*) (ys315a@syntax-violation '#f '"duplicate use of keyword " ys3a6b@x ys3a7d@kwd) (ys3a77@f (cdr ys3a73@cls*) (cons ys3a7d@kwd ys3a74@seen*))))) ys3a7b@ls/false) (let ((ys3a81@t ys3a79@t)) (let ((ys3a83@ls/false (ys307a@syntax-dispatch ys3a81@t 'any))) (if ys3a83@ls/false (apply (lambda (ys3a85@cls) (ys315a@syntax-violation '#f '"malformed define-record-type clause" ys3a85@cls)) ys3a83@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3a81@t))))))) (void))))))) (let ((ys3a63@t ys3a3f@x)) (let ((ys3a65@ls/false (ys307a@syntax-dispatch ys3a63@t '(_ any . each-any)))) (if ys3a65@ls/false (apply (lambda (ys3a67@namespec ys3a68@clause*) (begin (ys3a62@verify-clauses ys3a3f@x ys3a68@clause*) (ys3a60@do-define-record ys3a67@namespec ys3a68@clause*))) ys3a65@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3a63@t)))))))) (set! ys4b4a@ys306e@define-record-type-macro ys306e@define-record-type-macro) (set! ys3070@define-condition-type-macro (lambda (ys3c3b@x) (let ((ys3c3e@mkname '#f)) (begin (set! ys3c3e@mkname (lambda (ys3c6b@name ys3c6c@suffix) (ys315e@datum->syntax ys3c6b@name (string->symbol (string-append (symbol->string (ys3160@syntax->datum ys3c6b@name)) ys3c6c@suffix))))) (let ((ys3c3f@t ys3c3b@x)) (let ((ys3c41@ls/false (ys307a@syntax-dispatch ys3c3f@t '(any any any any any . #(each (any any)))))) (if (and ys3c41@ls/false (apply (lambda (ys3c43@ctxt ys3c44@name ys3c45@super ys3c46@constructor ys3c47@predicate ys3c48@field* ys3c49@accessor*) (and (ys2e73@id? ys3c44@name) (ys2e73@id? ys3c45@super) (ys2e73@id? ys3c46@constructor) (ys2e73@id? ys3c47@predicate) (for-all ys2e73@id? ys3c48@field*) (for-all ys2e73@id? ys3c49@accessor*))) ys3c41@ls/false)) (apply (lambda (ys3c51@ctxt ys3c52@name ys3c53@super ys3c54@constructor ys3c55@predicate ys3c56@field* ys3c57@accessor*) (let ((ys3c5f@aux-accessor* (map (lambda (ys3c61@x) (gensym)) ys3c57@accessor*))) (ys3030@bless (cons 'begin (cons (cons 'define-record-type (cons (list ys3c52@name ys3c54@constructor (gensym)) (cons (list 'parent ys3c53@super) (cons (cons 'fields (map (lambda (ys3c63@field ys3c64@aux) (list 'immutable ys3c63@field ys3c64@aux)) ys3c56@field* ys3c5f@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define ys3c55@predicate (list 'condition-predicate (list 'record-type-descriptor ys3c52@name))) (map (lambda (ys3c67@accessor ys3c68@aux) (list 'define ys3c67@accessor (list 'condition-accessor (list 'record-type-descriptor ys3c52@name) ys3c68@aux))) ys3c57@accessor* ys3c5f@aux-accessor*))))))) ys3c41@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3c3f@t)))))))) (set! ys4b4b@ys3070@define-condition-type-macro ys3070@define-condition-type-macro) (set! ys3072@incorrect-usage-macro (lambda (ys3c6f@e) (ys315a@syntax-violation '#f '"incorrect usage of auxiliary keyword" ys3c6f@e))) (set! ys4b4c@ys3072@incorrect-usage-macro ys3072@incorrect-usage-macro) (set! ys3074@parameterize-macro (lambda (ys3c71@e) (let ((ys3c73@t ys3c71@e)) (let ((ys3c75@ls/false (ys307a@syntax-dispatch ys3c73@t '(_ () any . each-any)))) (if ys3c75@ls/false (apply (lambda (ys3c77@b ys3c78@b*) (ys3030@bless (cons 'let (cons '() (cons ys3c77@b ys3c78@b*))))) ys3c75@ls/false) (let ((ys3c7b@t ys3c73@t)) (let ((ys3c7d@ls/false (ys307a@syntax-dispatch ys3c7b@t '(_ #(each (any any)) any . each-any)))) (if ys3c7d@ls/false (apply (lambda (ys3c7f@olhs* ys3c80@orhs* ys3c81@b ys3c82@b*) (let ((ys3c87@lhs* (ys3148@generate-temporaries ys3c7f@olhs*)) (ys3c88@rhs* (ys3148@generate-temporaries ys3c80@orhs*))) (ys3030@bless (cons (list 'lambda (append ys3c87@lhs* ys3c88@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (ys3c8b@lhs ys3c8c@rhs) (list 'let (list (list 't (list ys3c8b@lhs))) (list ys3c8b@lhs ys3c8c@rhs) (cons 'set! (cons ys3c8c@rhs '(t))))) ys3c87@lhs* ys3c88@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons ys3c81@b ys3c82@b*))) '(swap)))))) (append ys3c7f@olhs* ys3c80@orhs*))))) ys3c7d@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3c7b@t))))))))) (set! ys4b4d@ys3074@parameterize-macro ys3074@parameterize-macro) (set! ys3076@foreign-call-transformer (lambda (ys3c8f@e ys3c90@r ys3c91@mr) (let ((ys3c95@t ys3c8f@e)) (let ((ys3c97@ls/false (ys307a@syntax-dispatch ys3c95@t '(_ any . each-any)))) (if ys3c97@ls/false (apply (lambda (ys3c99@name ys3c9a@arg*) (cons 'foreign-call (cons (ys309c@chi-expr ys3c99@name ys3c90@r ys3c91@mr) (ys3098@chi-expr* ys3c9a@arg* ys3c90@r ys3c91@mr)))) ys3c97@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3c95@t)))))) (set! ys4b4e@ys3076@foreign-call-transformer ys3076@foreign-call-transformer) (set! ys3078@convert-pattern (lambda (ys3c9d@pattern ys3c9e@keys) (let ((ys3ca2@cvt* '#f) (ys3ca4@cvt '#f)) (begin (set! ys3ca2@cvt* (lambda (ys3d41@p* ys3d42@n ys3d43@ids) (if (null? ys3d41@p*) (values '() ys3d43@ids) (call-with-values (lambda () (ys3ca2@cvt* (cdr ys3d41@p*) ys3d42@n ys3d43@ids)) (lambda (ys3d4b@ys3d48 ys3d4c@ys3d4a) (let ((ys3d4f@ids ys3d4c@ys3d4a) (ys3d50@y ys3d4b@ys3d48)) (call-with-values (lambda () (ys3ca4@cvt (car ys3d41@p*) ys3d42@n ys3d4f@ids)) (lambda (ys3d57@ys3d54 ys3d58@ys3d56) (let ((ys3d5b@ids ys3d58@ys3d56) (ys3d5c@x ys3d57@ys3d54)) (values (cons ys3d5c@x ys3d50@y) ys3d5b@ids)))))))))) (set! ys3ca4@cvt (lambda (ys3ca5@p ys3ca6@n ys3ca7@ids) (let ((ys3cab@t ys3ca5@p)) (let ((ys3cad@ls/false (ys307a@syntax-dispatch ys3cab@t 'any))) (if (and ys3cad@ls/false (apply (lambda (ys3caf@id) (ys2e73@id? ys3caf@id)) ys3cad@ls/false)) (apply (lambda (ys3cb1@id) (if (ys2e7f@bound-id-member? ys3ca5@p ys3c9e@keys) (values (vector 'free-id ys3ca5@p) ys3ca7@ids) (if (ys2e79@free-id=? ys3ca5@p (ys3002@scheme-stx '_)) (values '_ ys3ca7@ids) (values 'any (cons (cons ys3ca5@p ys3ca6@n) ys3ca7@ids))))) ys3cad@ls/false) (let ((ys3cb3@t ys3cab@t)) (let ((ys3cb5@ls/false (ys307a@syntax-dispatch ys3cb3@t '(any any)))) (if (and ys3cb5@ls/false (apply (lambda (ys3cb7@p ys3cb8@dots) (ys307c@ellipsis? ys3cb8@dots)) ys3cb5@ls/false)) (apply (lambda (ys3cbb@p ys3cbc@dots) (call-with-values (lambda () (ys3ca4@cvt ys3cbb@p (+ ys3ca6@n '1) ys3ca7@ids)) (lambda (ys3cc3@ys3cc0 ys3cc4@ys3cc2) (let ((ys3cc7@ids ys3cc4@ys3cc2) (ys3cc8@p ys3cc3@ys3cc0)) (values (if (eq? ys3cc8@p 'any) 'each-any (vector 'each ys3cc8@p)) ys3cc7@ids))))) ys3cb5@ls/false) (let ((ys3ccb@t ys3cb3@t)) (let ((ys3ccd@ls/false (ys307a@syntax-dispatch ys3ccb@t '(any any . #(each+ any () any))))) (if (and ys3ccd@ls/false (apply (lambda (ys3ccf@x ys3cd0@dots ys3cd1@ys ys3cd2@z) (ys307c@ellipsis? ys3cd0@dots)) ys3ccd@ls/false)) (apply (lambda (ys3cd7@x ys3cd8@dots ys3cd9@ys ys3cda@z) (call-with-values (lambda () (ys3ca4@cvt ys3cda@z ys3ca6@n ys3ca7@ids)) (lambda (ys3ce3@ys3ce0 ys3ce4@ys3ce2) (let ((ys3ce7@ids ys3ce4@ys3ce2) (ys3ce8@z ys3ce3@ys3ce0)) (call-with-values (lambda () (ys3ca2@cvt* ys3cd9@ys ys3ca6@n ys3ce7@ids)) (lambda (ys3cef@ys3cec ys3cf0@ys3cee) (let ((ys3cf3@ids ys3cf0@ys3cee) (ys3cf4@ys ys3cef@ys3cec)) (call-with-values (lambda () (ys3ca4@cvt ys3cd7@x (+ ys3ca6@n '1) ys3cf3@ids)) (lambda (ys3cfb@ys3cf8 ys3cfc@ys3cfa) (let ((ys3cff@ids ys3cfc@ys3cfa) (ys3d00@x ys3cfb@ys3cf8)) (values (vector 'each+ ys3d00@x (reverse ys3cf4@ys) ys3ce8@z) ys3cff@ids))))))))))) ys3ccd@ls/false) (let ((ys3d03@t ys3ccb@t)) (let ((ys3d05@ls/false (ys307a@syntax-dispatch ys3d03@t '(any . any)))) (if ys3d05@ls/false (apply (lambda (ys3d07@x ys3d08@y) (call-with-values (lambda () (ys3ca4@cvt ys3d08@y ys3ca6@n ys3ca7@ids)) (lambda (ys3d0f@ys3d0c ys3d10@ys3d0e) (let ((ys3d13@ids ys3d10@ys3d0e) (ys3d14@y ys3d0f@ys3d0c)) (call-with-values (lambda () (ys3ca4@cvt ys3d07@x ys3ca6@n ys3d13@ids)) (lambda (ys3d1b@ys3d18 ys3d1c@ys3d1a) (let ((ys3d1f@ids ys3d1c@ys3d1a) (ys3d20@x ys3d1b@ys3d18)) (values (cons ys3d20@x ys3d14@y) ys3d1f@ids)))))))) ys3d05@ls/false) (let ((ys3d23@t ys3d03@t)) (let ((ys3d25@ls/false (ys307a@syntax-dispatch ys3d23@t '()))) (if ys3d25@ls/false (apply (lambda () (values '() ys3ca7@ids)) ys3d25@ls/false) (let ((ys3d27@t ys3d23@t)) (let ((ys3d29@ls/false (ys307a@syntax-dispatch ys3d27@t '#(vector each-any)))) (if (and ys3d29@ls/false (apply (lambda (ys3d2b@p) (not (ys2e3f@stx? ys3d2b@p))) ys3d29@ls/false)) (apply (lambda (ys3d2d@p) (call-with-values (lambda () (ys3ca4@cvt ys3d2d@p ys3ca6@n ys3ca7@ids)) (lambda (ys3d33@ys3d30 ys3d34@ys3d32) (let ((ys3d37@ids ys3d34@ys3d32) (ys3d38@p ys3d33@ys3d30)) (values (vector 'vector ys3d38@p) ys3d37@ids))))) ys3d29@ls/false) (let ((ys3d3b@t ys3d27@t)) (let ((ys3d3d@ls/false (ys307a@syntax-dispatch ys3d3b@t 'any))) (if ys3d3d@ls/false (apply (lambda (ys3d3f@datum) (values (vector 'atom (ys2e87@stx->datum ys3d3f@datum)) ys3ca7@ids)) ys3d3d@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3d3b@t)))))))))))))))))))))))) (ys3ca4@cvt ys3c9d@pattern '0 '()))))) (set! ys4b4f@ys3078@convert-pattern ys3078@convert-pattern) (set! ys307a@syntax-dispatch (let ((ys3d60@stx^ '#f) (ys3d62@match-each '#f) (ys3d64@match-each+ '#f) (ys3d66@match-each-any '#f) (ys3d68@match-empty '#f) (ys3d6a@combine '#f) (ys3d6c@match* '#f) (ys3d6e@match '#f)) (begin (set! ys3d60@stx^ (lambda (ys3e3b@e ys3e3c@m* ys3e3d@s* ys3e3e@ae*) (if (and (null? ys3e3c@m*) (null? ys3e3d@s*) (null? ys3e3e@ae*)) ys3e3b@e (ys2e5b@mkstx ys3e3b@e ys3e3c@m* ys3e3d@s* ys3e3e@ae*)))) (set! ys3d62@match-each (lambda (ys3e1b@e ys3e1c@p ys3e1d@m* ys3e1e@s* ys3e1f@ae*) (if (pair? ys3e1b@e) (let ((ys3e25@first (ys3d6e@match (car ys3e1b@e) ys3e1c@p ys3e1d@m* ys3e1e@s* ys3e1f@ae* '()))) (and ys3e25@first (let ((ys3e27@rest (ys3d62@match-each (cdr ys3e1b@e) ys3e1c@p ys3e1d@m* ys3e1e@s* ys3e1f@ae*))) (and ys3e27@rest (cons ys3e25@first ys3e27@rest))))) (if (null? ys3e1b@e) '() (if (ys2e3f@stx? ys3e1b@e) (and (not (ys2df9@top-marked? ys3e1d@m*)) (call-with-values (lambda () (join-wraps ys3e1d@m* ys3e1e@s* ys3e1f@ae* ys3e1b@e)) (lambda (ys3e2f@ys3e2a ys3e30@ys3e2c ys3e31@ys3e2e) (let ((ys3e35@ae* ys3e31@ys3e2e) (ys3e36@s* ys3e30@ys3e2c) (ys3e37@m* ys3e2f@ys3e2a)) (ys3d62@match-each (ys2e41@stx-expr ys3e1b@e) ys3e1c@p ys3e37@m* ys3e36@s* ys3e35@ae*))))) (if (ys29b2@ys2886@annotation? ys3e1b@e) (ys3d62@match-each (ys29b4@ys288a@annotation-expression ys3e1b@e) ys3e1c@p ys3e1d@m* ys3e1e@s* ys3e1f@ae*) '#f)))))) (set! ys3d64@match-each+ (lambda (ys3ddb@e ys3ddc@x-pat ys3ddd@y-pat ys3dde@z-pat ys3ddf@m* ys3de0@s* ys3de1@ae* ys3de2@r) (let ys3df3@f ((ys3deb@e ys3ddb@e) (ys3dec@m* ys3ddf@m*) (ys3ded@s* ys3de0@s*) (ys3dee@ae* ys3de1@ae*)) (if (pair? ys3deb@e) (call-with-values (lambda () (ys3df3@f (cdr ys3deb@e) ys3dec@m* ys3ded@s* ys3dee@ae*)) (lambda (ys3dfb@ys3df6 ys3dfc@ys3df8 ys3dfd@ys3dfa) (let ((ys3e01@r ys3dfd@ys3dfa) (ys3e02@y-pat ys3dfc@ys3df8) (ys3e03@xr* ys3dfb@ys3df6)) (if ys3e01@r (if (null? ys3e02@y-pat) (let ((ys3e07@xr (ys3d6e@match (car ys3deb@e) ys3ddc@x-pat ys3dec@m* ys3ded@s* ys3dee@ae* '()))) (if ys3e07@xr (values (cons ys3e07@xr ys3e03@xr*) ys3e02@y-pat ys3e01@r) (values '#f '#f '#f))) (values '() (cdr ys3e02@y-pat) (ys3d6e@match (car ys3deb@e) (car ys3e02@y-pat) ys3dec@m* ys3ded@s* ys3dee@ae* ys3e01@r))) (values '#f '#f '#f))))) (if (ys2e3f@stx? ys3deb@e) (if (ys2df9@top-marked? ys3dec@m*) (values '() ys3ddd@y-pat (ys3d6e@match ys3deb@e ys3dde@z-pat ys3dec@m* ys3ded@s* ys3dee@ae* ys3de2@r)) (call-with-values (lambda () (join-wraps ys3dec@m* ys3ded@s* ys3dee@ae* ys3deb@e)) (lambda (ys3e0f@ys3e0a ys3e10@ys3e0c ys3e11@ys3e0e) (let ((ys3e15@ae* ys3e11@ys3e0e) (ys3e16@s* ys3e10@ys3e0c) (ys3e17@m* ys3e0f@ys3e0a)) (ys3df3@f (ys2e41@stx-expr ys3deb@e) ys3e17@m* ys3e16@s* ys3e15@ae*))))) (if (ys29b2@ys2886@annotation? ys3deb@e) (ys3df3@f (ys29b4@ys288a@annotation-expression ys3deb@e) ys3dec@m* ys3ded@s* ys3dee@ae*) (values '() ys3ddd@y-pat (ys3d6e@match ys3deb@e ys3dde@z-pat ys3dec@m* ys3ded@s* ys3dee@ae* ys3de2@r)))))))) (set! ys3d66@match-each-any (lambda (ys3dbf@e ys3dc0@m* ys3dc1@s* ys3dc2@ae*) (if (pair? ys3dbf@e) (let ((ys3dc7@l (ys3d66@match-each-any (cdr ys3dbf@e) ys3dc0@m* ys3dc1@s* ys3dc2@ae*))) (and ys3dc7@l (cons (ys3d60@stx^ (car ys3dbf@e) ys3dc0@m* ys3dc1@s* ys3dc2@ae*) ys3dc7@l))) (if (null? ys3dbf@e) '() (if (ys2e3f@stx? ys3dbf@e) (and (not (ys2df9@top-marked? ys3dc0@m*)) (call-with-values (lambda () (join-wraps ys3dc0@m* ys3dc1@s* ys3dc2@ae* ys3dbf@e)) (lambda (ys3dcf@ys3dca ys3dd0@ys3dcc ys3dd1@ys3dce) (let ((ys3dd5@ae* ys3dd1@ys3dce) (ys3dd6@s* ys3dd0@ys3dcc) (ys3dd7@m* ys3dcf@ys3dca)) (ys3d66@match-each-any (ys2e41@stx-expr ys3dbf@e) ys3dd7@m* ys3dd6@s* ys3dd5@ae*))))) (if (ys29b2@ys2886@annotation? ys3dbf@e) (ys3d66@match-each-any (ys29b4@ys288a@annotation-expression ys3dbf@e) ys3dc0@m* ys3dc1@s* ys3dc2@ae*) '#f)))))) (set! ys3d68@match-empty (lambda (ys3db9@p ys3dba@r) (if (null? ys3db9@p) ys3dba@r (if (eq? ys3db9@p '_) ys3dba@r (if (eq? ys3db9@p 'any) (cons '() ys3dba@r) (if (pair? ys3db9@p) (ys3d68@match-empty (car ys3db9@p) (ys3d68@match-empty (cdr ys3db9@p) ys3dba@r)) (if (eq? ys3db9@p 'each-any) (cons '() ys3dba@r) (let ((ys3dbd@t (vector-ref ys3db9@p '0))) (if (memv ys3dbd@t '(each)) (ys3d68@match-empty (vector-ref ys3db9@p '1) ys3dba@r) (if (memv ys3dbd@t '(each+)) (ys3d68@match-empty (vector-ref ys3db9@p '1) (ys3d68@match-empty (reverse (vector-ref ys3db9@p '2)) (ys3d68@match-empty (vector-ref ys3db9@p '3) ys3dba@r))) (if (memv ys3dbd@t '(free-id atom)) ys3dba@r (if (memv ys3dbd@t '(scheme-id atom)) ys3dba@r (if (memv ys3dbd@t '(vector)) (ys3d68@match-empty (vector-ref ys3db9@p '1) ys3dba@r) (assertion-violation 'syntax-dispatch '"invalid pattern" ys3db9@p)))))))))))))) (set! ys3d6a@combine (lambda (ys3db5@r* ys3db6@r) (if (null? (car ys3db5@r*)) ys3db6@r (cons (map car ys3db5@r*) (ys3d6a@combine (map cdr ys3db5@r*) ys3db6@r))))) (set! ys3d6c@match* (lambda (ys3d91@e ys3d92@p ys3d93@m* ys3d94@s* ys3d95@ae* ys3d96@r) (if (null? ys3d92@p) (and (null? ys3d91@e) ys3d96@r) (if (pair? ys3d92@p) (and (pair? ys3d91@e) (ys3d6e@match (car ys3d91@e) (car ys3d92@p) ys3d93@m* ys3d94@s* ys3d95@ae* (ys3d6e@match (cdr ys3d91@e) (cdr ys3d92@p) ys3d93@m* ys3d94@s* ys3d95@ae* ys3d96@r))) (if (eq? ys3d92@p 'each-any) (let ((ys3d9d@l (ys3d66@match-each-any ys3d91@e ys3d93@m* ys3d94@s* ys3d95@ae*))) (and ys3d9d@l (cons ys3d9d@l ys3d96@r))) (let ((ys3d9f@t (vector-ref ys3d92@p '0))) (if (memv ys3d9f@t '(each)) (if (null? ys3d91@e) (ys3d68@match-empty (vector-ref ys3d92@p '1) ys3d96@r) (let ((ys3da1@r* (ys3d62@match-each ys3d91@e (vector-ref ys3d92@p '1) ys3d93@m* ys3d94@s* ys3d95@ae*))) (and ys3da1@r* (ys3d6a@combine ys3da1@r* ys3d96@r)))) (if (memv ys3d9f@t '(free-id)) (and (symbol? ys3d91@e) (ys2df9@top-marked? ys3d93@m*) (ys2e79@free-id=? (ys3d60@stx^ ys3d91@e ys3d93@m* ys3d94@s* ys3d95@ae*) (vector-ref ys3d92@p '1)) ys3d96@r) (if (memv ys3d9f@t '(scheme-id)) (and (symbol? ys3d91@e) (ys2df9@top-marked? ys3d93@m*) (ys2e79@free-id=? (ys3d60@stx^ ys3d91@e ys3d93@m* ys3d94@s* ys3d95@ae*) (ys3002@scheme-stx (vector-ref ys3d92@p '1))) ys3d96@r) (if (memv ys3d9f@t '(each+)) (call-with-values (lambda () (ys3d64@match-each+ ys3d91@e (vector-ref ys3d92@p '1) (vector-ref ys3d92@p '2) (vector-ref ys3d92@p '3) ys3d93@m* ys3d94@s* ys3d95@ae* ys3d96@r)) (lambda (ys3da9@ys3da4 ys3daa@ys3da6 ys3dab@ys3da8) (let ((ys3daf@r ys3dab@ys3da8) (ys3db0@y-pat ys3daa@ys3da6) (ys3db1@xr* ys3da9@ys3da4)) (and ys3daf@r (null? ys3db0@y-pat) (if (null? ys3db1@xr*) (ys3d68@match-empty (vector-ref ys3d92@p '1) ys3daf@r) (ys3d6a@combine ys3db1@xr* ys3daf@r)))))) (if (memv ys3d9f@t '(atom)) (and (fast-equal? (vector-ref ys3d92@p '1) (ys2e85@strip ys3d91@e ys3d93@m*)) ys3d96@r) (if (memv ys3d9f@t '(vector)) (and (vector? ys3d91@e) (ys3d6e@match (vector->list ys3d91@e) (vector-ref ys3d92@p '1) ys3d93@m* ys3d94@s* ys3d95@ae* ys3d96@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" ys3d92@p))))))))))))) (set! ys3d6e@match (lambda (ys3d73@e ys3d74@p ys3d75@m* ys3d76@s* ys3d77@ae* ys3d78@r) (if (not ys3d78@r) '#f (if (eq? ys3d74@p '_) ys3d78@r (if (eq? ys3d74@p 'any) (cons (ys3d60@stx^ ys3d73@e ys3d75@m* ys3d76@s* ys3d77@ae*) ys3d78@r) (if (ys2e3f@stx? ys3d73@e) (and (not (ys2df9@top-marked? ys3d75@m*)) (call-with-values (lambda () (join-wraps ys3d75@m* ys3d76@s* ys3d77@ae* ys3d73@e)) (lambda (ys3d85@ys3d80 ys3d86@ys3d82 ys3d87@ys3d84) (let ((ys3d8b@ae* ys3d87@ys3d84) (ys3d8c@s* ys3d86@ys3d82) (ys3d8d@m* ys3d85@ys3d80)) (ys3d6e@match (ys2e41@stx-expr ys3d73@e) ys3d74@p ys3d8d@m* ys3d8c@s* ys3d8b@ae* ys3d78@r))))) (if (ys29b2@ys2886@annotation? ys3d73@e) (ys3d6e@match (ys29b4@ys288a@annotation-expression ys3d73@e) ys3d74@p ys3d75@m* ys3d76@s* ys3d77@ae* ys3d78@r) (ys3d6c@match* ys3d73@e ys3d74@p ys3d75@m* ys3d76@s* ys3d77@ae* ys3d78@r)))))))) (lambda (ys3d6f@e ys3d70@p) (ys3d6e@match ys3d6f@e ys3d70@p '() '() '() '()))))) (set! ys4b50@ys307a@syntax-dispatch ys307a@syntax-dispatch) (set! ys307c@ellipsis? (lambda (ys3e43@x) (and (ys2e73@id? ys3e43@x) (ys2e79@free-id=? ys3e43@x (ys3002@scheme-stx '...))))) (set! ys4b51@ys307c@ellipsis? ys307c@ellipsis?) (set! ys307e@underscore? (lambda (ys3e45@x) (and (ys2e73@id? ys3e45@x) (ys2e79@free-id=? ys3e45@x (ys3002@scheme-stx '_))))) (set! ys4b52@ys307e@underscore? ys307e@underscore?) (set! ys3080@verify-literals (lambda (ys3e47@lits ys3e48@expr) (for-each (lambda (ys3e4b@x) (if (or (not (ys2e73@id? ys3e4b@x)) (ys307c@ellipsis? ys3e4b@x) (ys307e@underscore? ys3e4b@x)) (ys315a@syntax-violation '#f '"invalid literal" ys3e48@expr ys3e4b@x) (void))) ys3e47@lits))) (set! ys4b53@ys3080@verify-literals ys3080@verify-literals) (set! ys3082@syntax-case-transformer (let ((ys3e4e@build-dispatch-call '#f) (ys3e50@invalid-ids-error '#f) (ys3e52@gen-clause '#f) (ys3e54@gen-syntax-case '#f)) (begin (set! ys3e4e@build-dispatch-call (lambda (ys3ebf@pvars ys3ec0@expr ys3ec1@y ys3ec2@r ys3ec3@mr) (let ((ys3ec9@ids (map car ys3ebf@pvars)) (ys3eca@levels (map cdr ys3ebf@pvars))) (let ((ys3ecd@labels (map ys2dff@gen-label ys3ec9@ids)) (ys3ece@new-vars (map ys2dfb@gen-lexical ys3ec9@ids))) (let ((ys3ed1@body (ys309c@chi-expr (ys2e5f@add-subst (ys2e33@make-full-rib ys3ec9@ids ys3ecd@labels) ys3ec0@expr) (append (map (lambda (ys3ed3@label ys3ed4@var ys3ed5@level) (cons ys3ed3@label (ys2e8d@make-binding 'syntax (cons ys3ed4@var ys3ed5@level)))) ys3ecd@labels ys3ece@new-vars (map cdr ys3ebf@pvars)) ys3ec2@r) ys3ec3@mr))) (list '(primitive apply) (ys2dd6@ys2d02@build-lambda '#f ys3ece@new-vars ys3ed1@body) ys3ec1@y)))))) (set! ys3e50@invalid-ids-error (lambda (ys3eb3@id* ys3eb4@e ys3eb5@class) (let ys3ebd@find ((ys3eb9@id* ys3eb3@id*) (ys3eba@ok* '())) (if (null? ys3eb9@id*) (ys315a@syntax-violation '#f '"invalid syntax" ys3eb4@e) (if (ys2e73@id? (car ys3eb9@id*)) (if (ys2e7f@bound-id-member? (car ys3eb9@id*) ys3eba@ok*) (ys3156@syntax-error (car ys3eb9@id*) '"duplicate " ys3eb5@class) (ys3ebd@find (cdr ys3eb9@id*) (cons (car ys3eb9@id*) ys3eba@ok*))) (ys3156@syntax-error (car ys3eb9@id*) '"invalid " ys3eb5@class)))))) (set! ys3e52@gen-clause (lambda (ys3e8b@x ys3e8c@keys ys3e8d@clauses ys3e8e@r ys3e8f@mr ys3e90@pat ys3e91@fender ys3e92@expr) (call-with-values (lambda () (ys3078@convert-pattern ys3e90@pat ys3e8c@keys)) (lambda (ys3e9f@ys3e9c ys3ea0@ys3e9e) (let ((ys3ea3@pvars ys3ea0@ys3e9e) (ys3ea4@p ys3e9f@ys3e9c)) (if (not (ys2e7d@distinct-bound-ids? (map car ys3ea3@pvars))) (ys3e50@invalid-ids-error (map car ys3ea3@pvars) ys3e90@pat '"pattern variable") (if (not (for-all (lambda (ys3ea7@x) (not (ys307c@ellipsis? (car ys3ea7@x)))) ys3ea3@pvars)) (ys315a@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" ys3e90@pat) (let ((ys3ea9@y (ys2dfb@gen-lexical 'tmp))) (let ((ys3eab@test (if (eq? ys3e91@fender '#t) ys3ea9@y (let ((ys3ead@call (ys3e4e@build-dispatch-call ys3ea3@pvars ys3e91@fender ys3ea9@y ys3e8e@r ys3e8f@mr))) (list 'if ys3ea9@y ys3ead@call (list 'quote '#f)))))) (let ((ys3eaf@conseq (ys3e4e@build-dispatch-call ys3ea3@pvars ys3e92@expr ys3ea9@y ys3e8e@r ys3e8f@mr))) (let ((ys3eb1@altern (ys3e54@gen-syntax-case ys3e8b@x ys3e8c@keys ys3e8d@clauses ys3e8e@r ys3e8f@mr))) (list (ys2dd6@ys2d02@build-lambda '#f (list ys3ea9@y) (list 'if ys3eab@test ys3eaf@conseq ys3eb1@altern)) (list '(primitive syntax-dispatch) ys3e8b@x (list 'quote ys3ea4@p)))))))))))))) (set! ys3e54@gen-syntax-case (lambda (ys3e69@x ys3e6a@keys ys3e6b@clauses ys3e6c@r ys3e6d@mr) (if (null? ys3e6b@clauses) (list '(primitive syntax-error) ys3e69@x) (let ((ys3e73@t (car ys3e6b@clauses))) (let ((ys3e75@ls/false (ys307a@syntax-dispatch ys3e73@t '(any any)))) (if ys3e75@ls/false (apply (lambda (ys3e77@pat ys3e78@expr) (if (and (ys2e73@id? ys3e77@pat) (not (ys2e7f@bound-id-member? ys3e77@pat ys3e6a@keys)) (not (ys307c@ellipsis? ys3e77@pat))) (if (ys2e79@free-id=? ys3e77@pat (ys3002@scheme-stx '_)) (ys309c@chi-expr ys3e78@expr ys3e6c@r ys3e6d@mr) (let ((ys3e7b@lab (ys2dff@gen-label ys3e77@pat)) (ys3e7c@lex (ys2dfb@gen-lexical ys3e77@pat))) (let ((ys3e7f@body (ys309c@chi-expr (ys2e5f@add-subst (ys2e33@make-full-rib (list ys3e77@pat) (list ys3e7b@lab)) ys3e78@expr) (cons (cons ys3e7b@lab (ys2e8d@make-binding 'syntax (cons ys3e7c@lex '0))) ys3e6c@r) ys3e6d@mr))) (list (ys2dd6@ys2d02@build-lambda '#f (list ys3e7c@lex) ys3e7f@body) ys3e69@x)))) (ys3e52@gen-clause ys3e69@x ys3e6a@keys (cdr ys3e6b@clauses) ys3e6c@r ys3e6d@mr ys3e77@pat '#t ys3e78@expr))) ys3e75@ls/false) (let ((ys3e81@t ys3e73@t)) (let ((ys3e83@ls/false (ys307a@syntax-dispatch ys3e81@t '(any any any)))) (if ys3e83@ls/false (apply (lambda (ys3e85@pat ys3e86@fender ys3e87@expr) (ys3e52@gen-clause ys3e69@x ys3e6a@keys (cdr ys3e6b@clauses) ys3e6c@r ys3e6d@mr ys3e85@pat ys3e86@fender ys3e87@expr)) ys3e83@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3e81@t)))))))))) (lambda (ys3e55@e ys3e56@r ys3e57@mr) (let ((ys3e5b@t ys3e55@e)) (let ((ys3e5d@ls/false (ys307a@syntax-dispatch ys3e5b@t '(_ any each-any . each-any)))) (if ys3e5d@ls/false (apply (lambda (ys3e5f@expr ys3e60@keys ys3e61@clauses) (begin (ys3080@verify-literals ys3e60@keys ys3e55@e) (let ((ys3e65@x (ys2dfb@gen-lexical 'tmp))) (let ((ys3e67@body (ys3e54@gen-syntax-case ys3e65@x ys3e60@keys ys3e61@clauses ys3e56@r ys3e57@mr))) (list (ys2dd6@ys2d02@build-lambda '#f (list ys3e65@x) ys3e67@body) (ys309c@chi-expr ys3e5f@expr ys3e56@r ys3e57@mr)))))) ys3e5d@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3e5b@t)))))))) (set! ys4b54@ys3082@syntax-case-transformer ys3082@syntax-case-transformer) (set! ys3084@ellipsis-map (lambda (ys3ed9@proc ys3eda@ls . ys3edd@ls*) (let ((ys3ee0@who '#f)) (begin (set! ys3ee0@who '...) (begin (if (not (list? ys3eda@ls)) (assertion-violation ys3ee0@who '"not a list" ys3eda@ls) (void)) (if (not (null? ys3edd@ls*)) (let ((ys3ee1@n (length ys3eda@ls))) (for-each (lambda (ys3ee3@x) (begin (if (not (list? ys3ee3@x)) (assertion-violation ys3ee0@who '"not a list" ys3ee3@x) (void)) (if (not (= (length ys3ee3@x) ys3ee1@n)) (assertion-violation ys3ee0@who '"length mismatch" ys3eda@ls ys3ee3@x) (void)))) ys3edd@ls*)) (void)) (apply map ys3ed9@proc ys3eda@ls ys3edd@ls*)))))) (set! ys4b55@ys3084@ellipsis-map ys3084@ellipsis-map) (set! ys3086@syntax-transformer (let ((ys3ee6@gen-syntax '#f) (ys3ee8@gen-ref '#f) (ys3eea@gen-append '#f) (ys3eec@gen-mappend '#f) (ys3eee@gen-map '#f) (ys3ef0@gen-cons '#f) (ys3ef2@gen-vector '#f) (ys3ef4@regen '#f)) (begin (set! ys3ee6@gen-syntax (lambda (ys3f5d@src ys3f5e@e ys3f5f@r ys3f60@maps ys3f61@ellipsis? ys3f62@vec?) (let ((ys3f69@t ys3f5e@e)) (let ((ys3f6b@ls/false (ys307a@syntax-dispatch ys3f69@t 'any))) (if (and ys3f6b@ls/false (apply (lambda (ys3f6d@dots) (ys3f61@ellipsis? ys3f6d@dots)) ys3f6b@ls/false)) (apply (lambda (ys3f6f@dots) (ys315a@syntax-violation '#f '"misplaced ellipsis in syntax form" ys3f5d@src)) ys3f6b@ls/false) (let ((ys3f71@t ys3f69@t)) (let ((ys3f73@ls/false (ys307a@syntax-dispatch ys3f71@t 'any))) (if (and ys3f73@ls/false (apply (lambda (ys3f75@id) (ys2e73@id? ys3f75@id)) ys3f73@ls/false)) (apply (lambda (ys3f77@id) (let ((ys3f79@label (ys2e89@id->label ys3f5e@e))) (let ((ys3f7b@b (ys2e8b@label->binding ys3f79@label ys3f5f@r))) (if (eq? (ys2e8f@binding-type ys3f7b@b) 'syntax) (call-with-values (lambda () (let ((ys3f81@var.lev (ys2e91@binding-value ys3f7b@b))) (ys3ee8@gen-ref ys3f5d@src (car ys3f81@var.lev) (cdr ys3f81@var.lev) ys3f60@maps))) (lambda (ys3f83@ys3f7e ys3f84@ys3f80) (let ((ys3f87@maps ys3f84@ys3f80) (ys3f88@var ys3f83@ys3f7e)) (values (list 'ref ys3f88@var) ys3f87@maps)))) (values (list 'quote ys3f5e@e) ys3f60@maps))))) ys3f73@ls/false) (let ((ys3f8b@t ys3f71@t)) (let ((ys3f8d@ls/false (ys307a@syntax-dispatch ys3f8b@t '(any any)))) (if (and ys3f8d@ls/false (apply (lambda (ys3f8f@dots ys3f90@e) (ys3f61@ellipsis? ys3f8f@dots)) ys3f8d@ls/false)) (apply (lambda (ys3f93@dots ys3f94@e) (if ys3f62@vec? (ys315a@syntax-violation '#f '"misplaced ellipsis in syntax form" ys3f5d@src) (ys3ee6@gen-syntax ys3f5d@src ys3f94@e ys3f5f@r ys3f60@maps (lambda (ys3f97@x) '#f) '#f))) ys3f8d@ls/false) (let ((ys3f99@t ys3f8b@t)) (let ((ys3f9b@ls/false (ys307a@syntax-dispatch ys3f99@t '(any any . any)))) (if (and ys3f9b@ls/false (apply (lambda (ys3f9d@x ys3f9e@dots ys3f9f@y) (ys3f61@ellipsis? ys3f9e@dots)) ys3f9b@ls/false)) (apply (lambda (ys3fa3@x ys3fa4@dots ys3fa5@y) (let ys3fbb@f ((ys3fa9@y ys3fa5@y) (ys3faa@k (lambda (ys3fad@maps) (call-with-values (lambda () (ys3ee6@gen-syntax ys3f5d@src ys3fa3@x ys3f5f@r (cons '() ys3fad@maps) ys3f61@ellipsis? '#f)) (lambda (ys3fb3@ys3fb0 ys3fb4@ys3fb2) (let ((ys3fb7@maps ys3fb4@ys3fb2) (ys3fb8@x ys3fb3@ys3fb0)) (if (null? (car ys3fb7@maps)) (ys315a@syntax-violation '#f '"extra ellipsis in syntax form" ys3f5d@src) (values (ys3eee@gen-map ys3fb8@x (car ys3fb7@maps)) (cdr ys3fb7@maps))))))))) (let ((ys3fbd@t ys3fa9@y)) (let ((ys3fbf@ls/false (ys307a@syntax-dispatch ys3fbd@t '()))) (if ys3fbf@ls/false (apply (lambda () (ys3faa@k ys3f60@maps)) ys3fbf@ls/false) (let ((ys3fc1@t ys3fbd@t)) (let ((ys3fc3@ls/false (ys307a@syntax-dispatch ys3fc1@t '(any . any)))) (if (and ys3fc3@ls/false (apply (lambda (ys3fc5@dots ys3fc6@y) (ys3f61@ellipsis? ys3fc5@dots)) ys3fc3@ls/false)) (apply (lambda (ys3fc9@dots ys3fca@y) (ys3fbb@f ys3fca@y (lambda (ys3fcd@maps) (call-with-values (lambda () (ys3faa@k (cons '() ys3fcd@maps))) (lambda (ys3fd3@ys3fd0 ys3fd4@ys3fd2) (let ((ys3fd7@maps ys3fd4@ys3fd2) (ys3fd8@x ys3fd3@ys3fd0)) (if (null? (car ys3fd7@maps)) (ys315a@syntax-violation '#f '"extra ellipsis in syntax form" ys3f5d@src) (values (ys3eec@gen-mappend ys3fd8@x (car ys3fd7@maps)) (cdr ys3fd7@maps))))))))) ys3fc3@ls/false) (let ((ys3fdb@t ys3fc1@t)) (let ((ys3fdd@ls/false (ys307a@syntax-dispatch ys3fdb@t '_))) (if ys3fdd@ls/false (apply (lambda () (call-with-values (lambda () (ys3ee6@gen-syntax ys3f5d@src ys3fa9@y ys3f5f@r ys3f60@maps ys3f61@ellipsis? ys3f62@vec?)) (lambda (ys3fe3@ys3fe0 ys3fe4@ys3fe2) (let ((ys3fe7@maps ys3fe4@ys3fe2) (ys3fe8@y ys3fe3@ys3fe0)) (call-with-values (lambda () (ys3faa@k ys3fe7@maps)) (lambda (ys3fef@ys3fec ys3ff0@ys3fee) (let ((ys3ff3@maps ys3ff0@ys3fee) (ys3ff4@x ys3fef@ys3fec)) (values (ys3eea@gen-append ys3ff4@x ys3fe8@y) ys3ff3@maps)))))))) ys3fdd@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3fdb@t)))))))))))) ys3f9b@ls/false) (let ((ys3ff7@t ys3f99@t)) (let ((ys3ff9@ls/false (ys307a@syntax-dispatch ys3ff7@t '(any . any)))) (if ys3ff9@ls/false (apply (lambda (ys3ffb@x ys3ffc@y) (call-with-values (lambda () (ys3ee6@gen-syntax ys3f5d@src ys3ffb@x ys3f5f@r ys3f60@maps ys3f61@ellipsis? '#f)) (lambda (ys4003@ys4000 ys4004@ys4002) (let ((ys4007@maps ys4004@ys4002) (ys4008@xnew ys4003@ys4000)) (call-with-values (lambda () (ys3ee6@gen-syntax ys3f5d@src ys3ffc@y ys3f5f@r ys4007@maps ys3f61@ellipsis? ys3f62@vec?)) (lambda (ys400f@ys400c ys4010@ys400e) (let ((ys4013@maps ys4010@ys400e) (ys4014@ynew ys400f@ys400c)) (values (ys3ef0@gen-cons ys3f5e@e ys3ffb@x ys3ffc@y ys4008@xnew ys4014@ynew) ys4013@maps)))))))) ys3ff9@ls/false) (let ((ys4017@t ys3ff7@t)) (let ((ys4019@ls/false (ys307a@syntax-dispatch ys4017@t '#(vector each-any)))) (if ys4019@ls/false (apply (lambda (ys401b@ls) (call-with-values (lambda () (ys3ee6@gen-syntax ys3f5d@src ys401b@ls ys3f5f@r ys3f60@maps ys3f61@ellipsis? '#t)) (lambda (ys4021@ys401e ys4022@ys4020) (let ((ys4025@maps ys4022@ys4020) (ys4026@lsnew ys4021@ys401e)) (values (ys3ef2@gen-vector ys3f5e@e ys401b@ls ys4026@lsnew) ys4025@maps))))) ys4019@ls/false) (let ((ys4029@t ys4017@t)) (let ((ys402b@ls/false (ys307a@syntax-dispatch ys4029@t '_))) (if ys402b@ls/false (apply (lambda () (values (list 'quote ys3f5e@e) ys3f60@maps)) ys402b@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys4029@t)))))))))))))))))))))))) (set! ys3ee8@gen-ref (lambda (ys3f43@src ys3f44@var ys3f45@level ys3f46@maps) (if (= ys3f45@level '0) (values ys3f44@var ys3f46@maps) (if (null? ys3f46@maps) (ys315a@syntax-violation '#f '"missing ellipsis in syntax form" ys3f43@src) (call-with-values (lambda () (ys3ee8@gen-ref ys3f43@src ys3f44@var (- ys3f45@level '1) (cdr ys3f46@maps))) (lambda (ys3f4f@ys3f4c ys3f50@ys3f4e) (let ((ys3f53@outer-maps ys3f50@ys3f4e) (ys3f54@outer-var ys3f4f@ys3f4c)) (let ((ys3f57@t (assq ys3f54@outer-var (car ys3f46@maps)))) (if ys3f57@t ((lambda (ys3f59@b) (values (cdr ys3f59@b) ys3f46@maps)) ys3f57@t) (let ((ys3f5b@inner-var (ys2dfb@gen-lexical 'tmp))) (values ys3f5b@inner-var (cons (cons (cons ys3f54@outer-var ys3f5b@inner-var) (car ys3f46@maps)) ys3f53@outer-maps)))))))))))) (set! ys3eea@gen-append (lambda (ys3f3f@x ys3f40@y) (if (fast-equal? ys3f40@y ''()) ys3f3f@x (list 'append ys3f3f@x ys3f40@y)))) (set! ys3eec@gen-mappend (lambda (ys3f3b@e ys3f3c@map-env) (list 'apply '(primitive append) (ys3eee@gen-map ys3f3b@e ys3f3c@map-env)))) (set! ys3eee@gen-map (lambda (ys3f29@e ys3f2a@map-env) (let ((ys3f2d@formals (map cdr ys3f2a@map-env)) (ys3f2e@actuals (map (lambda (ys3f31@x) (list 'ref (car ys3f31@x))) ys3f2a@map-env))) (if (eq? (car ys3f29@e) 'ref) (car ys3f2e@actuals) (if (for-all (lambda (ys3f33@x) (and (eq? (car ys3f33@x) 'ref) (memq (cadr ys3f33@x) ys3f2d@formals))) (cdr ys3f29@e)) (let ((ys3f35@args (map (let ((ys3f37@r (map cons ys3f2d@formals ys3f2e@actuals))) (lambda (ys3f39@x) (cdr (assq (cadr ys3f39@x) ys3f37@r)))) (cdr ys3f29@e)))) (cons 'map (cons (list 'primitive (car ys3f29@e)) ys3f35@args))) (cons* 'map (list 'lambda ys3f2d@formals ys3f29@e) ys3f2e@actuals)))))) (set! ys3ef0@gen-cons (lambda (ys3f19@e ys3f1a@x ys3f1b@y ys3f1c@xnew ys3f1d@ynew) (let ((ys3f23@t (car ys3f1d@ynew))) (if (memv ys3f23@t '(quote)) (if (eq? (car ys3f1c@xnew) 'quote) (let ((ys3f25@xnew (cadr ys3f1c@xnew)) (ys3f26@ynew (cadr ys3f1d@ynew))) (if (and (eq? ys3f25@xnew ys3f1a@x) (eq? ys3f26@ynew ys3f1b@y)) (list 'quote ys3f19@e) (list 'quote (cons ys3f25@xnew ys3f26@ynew)))) (if (null? (cadr ys3f1d@ynew)) (list 'list ys3f1c@xnew) (list 'cons ys3f1c@xnew ys3f1d@ynew))) (if (memv ys3f23@t '(list)) (cons 'list (cons ys3f1c@xnew (cdr ys3f1d@ynew))) (list 'cons ys3f1c@xnew ys3f1d@ynew)))))) (set! ys3ef2@gen-vector (lambda (ys3f13@e ys3f14@ls ys3f15@lsnew) (if (eq? (car ys3f15@lsnew) 'quote) (if (eq? (cadr ys3f15@lsnew) ys3f14@ls) (list 'quote ys3f13@e) (list 'quote (list->vector (cadr ys3f15@lsnew)))) (if (eq? (car ys3f15@lsnew) 'list) (cons 'vector (cdr ys3f15@lsnew)) (list 'list->vector ys3f15@lsnew))))) (set! ys3ef4@regen (lambda (ys3f0d@x) (let ((ys3f0f@t (car ys3f0d@x))) (if (memv ys3f0f@t '(ref)) (cadr ys3f0d@x) (if (memv ys3f0f@t '(primitive)) (list 'primitive (cadr ys3f0d@x)) (if (memv ys3f0f@t '(quote)) (list 'quote (cadr ys3f0d@x)) (if (memv ys3f0f@t '(lambda)) (ys2dd6@ys2d02@build-lambda '#f (cadr ys3f0d@x) (ys3ef4@regen (caddr ys3f0d@x))) (if (memv ys3f0f@t '(map)) (let ((ys3f11@ls (map ys3ef4@regen (cdr ys3f0d@x)))) (cons '(primitive ellipsis-map) ys3f11@ls)) (cons (list 'primitive (car ys3f0d@x)) (map ys3ef4@regen (cdr ys3f0d@x))))))))))) (lambda (ys3ef5@e ys3ef6@r ys3ef7@mr) (let ((ys3efb@t ys3ef5@e)) (let ((ys3efd@ls/false (ys307a@syntax-dispatch ys3efb@t '(_ any)))) (if ys3efd@ls/false (apply (lambda (ys3eff@x) (call-with-values (lambda () (ys3ee6@gen-syntax ys3ef5@e ys3eff@x ys3ef6@r '() ys307c@ellipsis? '#f)) (lambda (ys3f05@ys3f02 ys3f06@ys3f04) (let ((ys3f09@maps ys3f06@ys3f04) (ys3f0a@e ys3f05@ys3f02)) (ys3ef4@regen ys3f0a@e))))) ys3efd@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys3efb@t)))))))) (set! ys4b56@ys3086@syntax-transformer ys3086@syntax-transformer) (set! ys3088@core-macro-transformer (lambda (ys402d@name) (let ((ys402f@t ys402d@name)) (if (memv ys402f@t '(quote)) ys302a@quote-transformer (if (memv ys402f@t '(lambda)) ys302e@lambda-transformer (if (memv ys402f@t '(case-lambda)) ys302c@case-lambda-transformer (if (memv ys402f@t '(letrec)) ys3012@letrec-transformer (if (memv ys402f@t '(letrec*)) ys3014@letrec*-transformer (if (memv ys402f@t '(let)) ys3010@let-transformer (if (memv ys402f@t '(if)) ys3022@if-transformer (if (memv ys402f@t '(and)) ys3024@and-transformer (if (memv ys402f@t '(or)) ys3026@or-transformer (if (memv ys402f@t '(foreign-call)) ys3076@foreign-call-transformer (if (memv ys402f@t '(syntax-case)) ys3082@syntax-case-transformer (if (memv ys402f@t '(syntax)) ys3086@syntax-transformer (if (memv ys402f@t '(type-descriptor)) ys3018@type-descriptor-transformer (if (memv ys402f@t '(record-type-descriptor)) ys301a@record-type-descriptor-transformer (if (memv ys402f@t '(record-constructor-descriptor)) ys301c@record-constructor-descriptor-transformer (if (memv ys402f@t '(fluid-let-syntax)) ys3016@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" ys402d@name)))))))))))))))))))) (set! ys4b57@ys3088@core-macro-transformer ys3088@core-macro-transformer) (set! ys308a@symbol-macro (lambda (ys4031@x ys4032@set) (let ((ys4035@t ys4031@x)) (let ((ys4037@ls/false (ys307a@syntax-dispatch ys4035@t '(_ any)))) (if (and ys4037@ls/false (apply (lambda (ys4039@name) (and (ys2e73@id? ys4039@name) (memq (ys2e75@id->sym ys4039@name) ys4032@set))) ys4037@ls/false)) (apply (lambda (ys403b@name) (ys3030@bless (list 'quote ys403b@name))) ys4037@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys4035@t)))))) (set! ys4b58@ys308a@symbol-macro ys308a@symbol-macro) (set! ys308c@macro-transformer (lambda (ys403d@x) (if (procedure? ys403d@x) ys403d@x (if (symbol? ys403d@x) (let ((ys403f@t ys403d@x)) (if (memv ys403f@t '(define-record-type)) ys306e@define-record-type-macro (if (memv ys403f@t '(define-struct)) ys306c@define-struct-macro (if (memv ys403f@t '(include)) ys3062@include-macro (if (memv ys403f@t '(cond)) ys305e@cond-macro (if (memv ys403f@t '(let)) ys3036@let-macro (if (memv ys403f@t '(do)) ys3056@do-macro (if (memv ys403f@t '(or)) ys305a@or-macro (if (memv ys403f@t '(and)) ys305c@and-macro (if (memv ys403f@t '(let*)) ys3058@let*-macro (if (memv ys403f@t '(let-values)) ys3038@let-values-macro (if (memv ys403f@t '(let*-values)) ys303a@let*-values-macro (if (memv ys403f@t '(syntax-rules)) ys3066@syntax-rules-macro (if (memv ys403f@t '(quasiquote)) ys3068@quasiquote-macro (if (memv ys403f@t '(quasisyntax)) ys306a@quasisyntax-macro (if (memv ys403f@t '(with-syntax)) ys3032@with-syntax-macro (if (memv ys403f@t '(when)) ys301e@when-macro (if (memv ys403f@t '(unless)) ys3020@unless-macro (if (memv ys403f@t '(case)) ys3028@case-macro (if (memv ys403f@t '(identifier-syntax)) ys3054@identifier-syntax-macro (if (memv ys403f@t '(time)) ys304c@time-macro (if (memv ys403f@t '(delay)) ys304e@delay-macro (if (memv ys403f@t '(assert)) ys3050@assert-macro (if (memv ys403f@t '(endianness)) ys3052@endianness-macro (if (memv ys403f@t '(guard)) ys3048@guard-macro (if (memv ys403f@t '(define-enumeration)) ys304a@define-enumeration-macro (if (memv ys403f@t '(trace-lambda)) ys303c@trace-lambda-macro (if (memv ys403f@t '(trace-define)) ys303e@trace-define-macro (if (memv ys403f@t '(trace-define-syntax)) ys3040@trace-define-syntax-macro (if (memv ys403f@t '(trace-let-syntax)) ys3044@trace-let-syntax-macro (if (memv ys403f@t '(trace-letrec-syntax)) ys3046@trace-letrec-syntax-macro (if (memv ys403f@t '(define-condition-type)) ys3070@define-condition-type-macro (if (memv ys403f@t '(parameterize)) ys3074@parameterize-macro (if (memv ys403f@t '(include-into)) ys3064@include-into-macro (if (memv ys403f@t '(eol-style)) (lambda (ys4041@x) (ys308a@symbol-macro ys4041@x '(none lf cr crlf nel crnel ls))) (if (memv ys403f@t '(error-handling-mode)) (lambda (ys4043@x) (ys308a@symbol-macro ys4043@x '(ignore raise replace))) (if (memv ys403f@t '(buffer-mode)) (lambda (ys4045@x) (ys308a@symbol-macro ys4045@x '(none line block))) (if (memv ys403f@t '(file-options)) ys2dee@file-options-macro (if (memv ys403f@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) ys3072@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" ys403d@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" ys403d@x))))) (set! ys4b59@ys308c@macro-transformer ys308c@macro-transformer) (set! ys308e@local-macro-transformer (lambda (ys4047@x) (car ys4047@x))) (set! ys4b5a@ys308e@local-macro-transformer ys308e@local-macro-transformer) (set! ys3090@do-macro-call (lambda (ys4049@transformer ys404a@expr) (let ((ys404d@out (ys4049@transformer (ys2e5d@add-mark ys2e57@anti-mark ys404a@expr '#f)))) (begin (let ys4051@f ((ys404f@x ys404d@out)) (if (not (ys2e3f@stx? ys404f@x)) (if (pair? ys404f@x) (begin (ys4051@f (car ys404f@x)) (ys4051@f (cdr ys404f@x))) (if (vector? ys404f@x) (vector-for-each ys4051@f ys404f@x) (if (symbol? ys404f@x) (ys315a@syntax-violation '#f '"raw symbol encountered in output of macro" ys404a@expr ys404f@x) (void)))) (void))) (ys2e5d@add-mark (ys2e55@gen-mark) ys404d@out ys404a@expr))))) (set! ys4b5b@ys3090@do-macro-call ys3090@do-macro-call) (set! ys3092@chi-macro (lambda (ys4053@p ys4054@e) (ys3090@do-macro-call (ys308c@macro-transformer ys4053@p) ys4054@e))) (set! ys4b5c@ys3092@chi-macro ys3092@chi-macro) (set! ys3094@chi-local-macro (lambda (ys4057@p ys4058@e) (ys3090@do-macro-call (ys308e@local-macro-transformer ys4057@p) ys4058@e))) (set! ys4b5d@ys3094@chi-local-macro ys3094@chi-local-macro) (set! ys3096@chi-global-macro (lambda (ys405b@p ys405c@e) (let ((ys405f@lib (car ys405b@p)) (ys4060@loc (cdr ys405b@p))) (begin (ys2c8a@ys2ad9@visit-library ys405f@lib) (let ((ys4063@x (symbol-value ys4060@loc))) (let ((ys4065@transformer (if (procedure? ys4063@x) ys4063@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" ys4063@x)))) (ys3090@do-macro-call ys4065@transformer ys405c@e))))))) (set! ys4b5e@ys3096@chi-global-macro ys3096@chi-global-macro) (set! ys3098@chi-expr* (lambda (ys4067@e* ys4068@r ys4069@mr) (if (null? ys4067@e*) '() (let ((ys406d@e (ys309c@chi-expr (car ys4067@e*) ys4068@r ys4069@mr))) (cons ys406d@e (ys3098@chi-expr* (cdr ys4067@e*) ys4068@r ys4069@mr)))))) (set! ys4b5f@ys3098@chi-expr* ys3098@chi-expr*) (set! ys309a@chi-application (lambda (ys406f@e ys4070@r ys4071@mr) (let ((ys4075@t ys406f@e)) (let ((ys4077@ls/false (ys307a@syntax-dispatch ys4075@t '(any . each-any)))) (if ys4077@ls/false (apply (lambda (ys4079@rator ys407a@rands) (let ((ys407d@rator (ys309c@chi-expr ys4079@rator ys4070@r ys4071@mr))) (cons ys407d@rator (ys3098@chi-expr* ys407a@rands ys4070@r ys4071@mr)))) ys4077@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys4075@t)))))) (set! ys4b60@ys309a@chi-application ys309a@chi-application) (set! ys309c@chi-expr (lambda (ys407f@e ys4080@r ys4081@mr) (call-with-values (lambda () (ys2e95@syntax-type ys407f@e ys4080@r)) (lambda (ys408b@ys4086 ys408c@ys4088 ys408d@ys408a) (let ((ys4091@kwd ys408d@ys408a) (ys4092@value ys408c@ys4088) (ys4093@type ys408b@ys4086)) (let ((ys4097@t ys4093@type)) (if (memv ys4097@t '(core-macro)) (let ((ys4099@transformer (ys3088@core-macro-transformer ys4092@value))) (ys4099@transformer ys407f@e ys4080@r ys4081@mr)) (if (memv ys4097@t '(global)) (let ((ys409b@lib (car ys4092@value))) (let ((ys409d@loc (cdr ys4092@value))) (begin ((ys30e2@inv-collector) ys409b@lib) ys409d@loc))) (if (memv ys4097@t '(core-prim)) (let ((ys409f@name ys4092@value)) (list 'primitive ys409f@name)) (if (memv ys4097@t '(call)) (ys309a@chi-application ys407f@e ys4080@r ys4081@mr) (if (memv ys4097@t '(lexical)) (let ((ys40a1@lex (ys3004@lexical-var ys4092@value))) ys40a1@lex) (if (memv ys4097@t '(global-macro global-macro!)) (ys309c@chi-expr (ys3096@chi-global-macro ys4092@value ys407f@e) ys4080@r ys4081@mr) (if (memv ys4097@t '(local-macro local-macro!)) (ys309c@chi-expr (ys3094@chi-local-macro ys4092@value ys407f@e) ys4080@r ys4081@mr) (if (memv ys4097@t '(macro macro!)) (ys309c@chi-expr (ys3092@chi-macro ys4092@value ys407f@e) ys4080@r ys4081@mr) (if (memv ys4097@t '(constant)) (let ((ys40a3@datum ys4092@value)) (list 'quote ys40a3@datum)) (if (memv ys4097@t '(set!)) (ys309e@chi-set! ys407f@e ys4080@r ys4081@mr) (if (memv ys4097@t '(begin)) (let ((ys40a5@t ys407f@e)) (let ((ys40a7@ls/false (ys307a@syntax-dispatch ys40a5@t '(_ any . each-any)))) (if ys40a7@ls/false (apply (lambda (ys40a9@x ys40aa@x*) (ys2dd8@ys2d32@build-sequence '#f (ys3098@chi-expr* (cons ys40a9@x ys40aa@x*) ys4080@r ys4081@mr))) ys40a7@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys40a5@t)))) (if (memv ys4097@t '(let-syntax letrec-syntax)) (let ((ys40ad@t ys407f@e)) (let ((ys40af@ls/false (ys307a@syntax-dispatch ys40ad@t '(_ #(each (any any)) any . each-any)))) (if (and ys40af@ls/false (apply (lambda (ys40b1@xlhs* ys40b2@xrhs* ys40b3@xbody ys40b4@xbody*) (if (not (ys2e7b@valid-bound-ids? ys40b1@xlhs*)) (ys315a@syntax-violation '#f '"invalid identifiers" ys407f@e) (void))) ys40af@ls/false)) (apply (lambda (ys40b9@xlhs* ys40ba@xrhs* ys40bb@xbody ys40bc@xbody*) (let ((ys40c1@xlab* (map ys2dff@gen-label ys40b9@xlhs*))) (let ((ys40c3@xrib (ys2e33@make-full-rib ys40b9@xlhs* ys40c1@xlab*))) (let ((ys40c5@xb* (map (lambda (ys40c7@x) (ys2eab@make-eval-transformer (ys30d4@expand-transformer (if (eq? ys4093@type 'let-syntax) ys40c7@x (ys2e5f@add-subst ys40c3@xrib ys40c7@x)) ys4081@mr))) ys40ba@xrhs*))) (ys2dd8@ys2d32@build-sequence '#f (ys3098@chi-expr* (map (lambda (ys40c9@x) (ys2e5f@add-subst ys40c3@xrib ys40c9@x)) (cons ys40bb@xbody ys40bc@xbody*)) (append (map cons ys40c1@xlab* ys40c5@xb*) ys4080@r) (append (map cons ys40c1@xlab* ys40c5@xb*) ys4081@mr))))))) ys40af@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys40ad@t)))) (if (memv ys4097@t '(displaced-lexical)) (ys315a@syntax-violation '#f '"identifier out of context" ys407f@e) (if (memv ys4097@t '(syntax)) (ys315a@syntax-violation '#f '"reference to pattern variable outside a syntax form" ys407f@e) (if (memv ys4097@t '(define define-syntax module import library)) (ys315a@syntax-violation '#f (string-append (let ((ys40cb@t ys4093@type)) (if (memv ys40cb@t '(define)) '"a definition" (if (memv ys40cb@t '(define-syntax)) '"a define-syntax" (if (memv ys40cb@t '(module)) '"a module definition" (if (memv ys40cb@t '(library)) '"a library definition" (if (memv ys40cb@t '(import)) '"an import declaration" (if (memv ys40cb@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") ys407f@e) (if (memv ys4097@t '(mutable)) (ys315a@syntax-violation '#f '"attempt to reference an unexportable variable" ys407f@e) (ys315a@syntax-violation '#f '"invalid expression" ys407f@e))))))))))))))))))))))) (set! ys4b61@ys309c@chi-expr ys309c@chi-expr) (set! ys309e@chi-set! (lambda (ys40cd@e ys40ce@r ys40cf@mr) (let ((ys40d3@t ys40cd@e)) (let ((ys40d5@ls/false (ys307a@syntax-dispatch ys40d3@t '(_ any any)))) (if (and ys40d5@ls/false (apply (lambda (ys40d7@x ys40d8@v) (ys2e73@id? ys40d7@x)) ys40d5@ls/false)) (apply (lambda (ys40db@x ys40dc@v) (call-with-values (lambda () (ys2e95@syntax-type ys40db@x ys40ce@r)) (lambda (ys40e5@ys40e0 ys40e6@ys40e2 ys40e7@ys40e4) (let ((ys40eb@kwd ys40e7@ys40e4) (ys40ec@value ys40e6@ys40e2) (ys40ed@type ys40e5@ys40e0)) (let ((ys40f1@t ys40ed@type)) (if (memv ys40f1@t '(lexical)) (begin (ys3008@set-lexical-mutable! ys40ec@value '#t) (list 'set! (ys3004@lexical-var ys40ec@value) (ys309c@chi-expr ys40dc@v ys40ce@r ys40cf@mr))) (if (memv ys40f1@t '(core-prim)) (ys315a@syntax-violation '#f '"cannot modify imported core primitive" ys40cd@e) (if (memv ys40f1@t '(global)) (ys315a@syntax-violation '#f '"attempt to modify imported binding" ys40cd@e) (if (memv ys40f1@t '(global-macro!)) (ys309c@chi-expr (ys3096@chi-global-macro ys40ec@value ys40cd@e) ys40ce@r ys40cf@mr) (if (memv ys40f1@t '(local-macro!)) (ys309c@chi-expr (ys3094@chi-local-macro ys40ec@value ys40cd@e) ys40ce@r ys40cf@mr) (if (memv ys40f1@t '(mutable)) (ys315a@syntax-violation '#f '"attempt to assign to an unexportable variable" ys40cd@e) (ys315a@syntax-violation '#f '"invalid syntax" ys40cd@e)))))))))))) ys40d5@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys40d3@t)))))) (set! ys4b62@ys309e@chi-set! ys309e@chi-set!) (set! ys30a0@verify-formals (lambda (ys40f3@fmls ys40f4@stx) (let ((ys40f7@t ys40f3@fmls)) (let ((ys40f9@ls/false (ys307a@syntax-dispatch ys40f7@t 'each-any))) (if ys40f9@ls/false (apply (lambda (ys40fb@x*) (if (not (ys2e7b@valid-bound-ids? ys40fb@x*)) (ys3034@invalid-fmls-error ys40f4@stx ys40f3@fmls) (void))) ys40f9@ls/false) (let ((ys40fd@t ys40f7@t)) (let ((ys40ff@ls/false (ys307a@syntax-dispatch ys40fd@t '#(each+ any () any)))) (if ys40ff@ls/false (apply (lambda (ys4101@x* ys4102@x) (if (not (ys2e7b@valid-bound-ids? (cons ys4102@x ys4101@x*))) (ys3034@invalid-fmls-error ys40f4@stx ys40f3@fmls) (void))) ys40ff@ls/false) (let ((ys4105@t ys40fd@t)) (let ((ys4107@ls/false (ys307a@syntax-dispatch ys4105@t '_))) (if ys4107@ls/false (apply (lambda () (ys315a@syntax-violation '#f '"invalid syntax" ys40f4@stx)) ys4107@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys4105@t)))))))))))) (set! ys4b63@ys30a0@verify-formals ys30a0@verify-formals) (set! ys30a2@chi-lambda-clause (lambda (ys4109@stx ys410a@fmls ys410b@body* ys410c@r ys410d@mr) (let ((ys4113@t ys410a@fmls)) (let ((ys4115@ls/false (ys307a@syntax-dispatch ys4113@t 'each-any))) (if ys4115@ls/false (apply (lambda (ys4117@x*) (begin (ys30a0@verify-formals ys410a@fmls ys4109@stx) (let ((ys4119@lex* (map ys2dfb@gen-lexical ys4117@x*)) (ys411a@lab* (map ys2dff@gen-label ys4117@x*))) (values ys4119@lex* (ys30b2@chi-internal (ys2e5f@add-subst (ys2e33@make-full-rib ys4117@x* ys411a@lab*) ys410b@body*) (ys300c@add-lexicals ys411a@lab* ys4119@lex* ys410c@r) ys410d@mr))))) ys4115@ls/false) (let ((ys411d@t ys4113@t)) (let ((ys411f@ls/false (ys307a@syntax-dispatch ys411d@t '#(each+ any () any)))) (if ys411f@ls/false (apply (lambda (ys4121@x* ys4122@x) (begin (ys30a0@verify-formals ys410a@fmls ys4109@stx) (let ((ys4125@lex* (map ys2dfb@gen-lexical ys4121@x*)) (ys4126@lab* (map ys2dff@gen-label ys4121@x*)) (ys4127@lex (ys2dfb@gen-lexical ys4122@x)) (ys4128@lab (ys2dff@gen-label ys4122@x))) (values (append ys4125@lex* ys4127@lex) (ys30b2@chi-internal (ys2e5f@add-subst (ys2e33@make-full-rib (cons ys4122@x ys4121@x*) (cons ys4128@lab ys4126@lab*)) ys410b@body*) (ys300c@add-lexicals (cons ys4128@lab ys4126@lab*) (cons ys4127@lex ys4125@lex*) ys410c@r) ys410d@mr))))) ys411f@ls/false) (let ((ys412d@t ys411d@t)) (let ((ys412f@ls/false (ys307a@syntax-dispatch ys412d@t '_))) (if ys412f@ls/false (apply (lambda () (ys315a@syntax-violation '#f '"invalid syntax" ys410a@fmls)) ys412f@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys412d@t)))))))))))) (set! ys4b64@ys30a2@chi-lambda-clause ys30a2@chi-lambda-clause) (set! ys30a4@chi-lambda-clause* (lambda (ys4131@stx ys4132@fmls* ys4133@body** ys4134@r ys4135@mr) (if (null? ys4132@fmls*) (values '() '()) (call-with-values (lambda () (ys30a2@chi-lambda-clause ys4131@stx (car ys4132@fmls*) (car ys4133@body**) ys4134@r ys4135@mr)) (lambda (ys413f@ys413c ys4140@ys413e) (let ((ys4143@b ys4140@ys413e) (ys4144@a ys413f@ys413c)) (call-with-values (lambda () (ys30a4@chi-lambda-clause* ys4131@stx (cdr ys4132@fmls*) (cdr ys4133@body**) ys4134@r ys4135@mr)) (lambda (ys414b@ys4148 ys414c@ys414a) (let ((ys414f@b* ys414c@ys414a) (ys4150@a* ys414b@ys4148)) (values (cons ys4144@a ys4150@a*) (cons ys4143@b ys414f@b*))))))))))) (set! ys4b65@ys30a4@chi-lambda-clause* ys30a4@chi-lambda-clause*) (set! ys30a6@chi-defun (lambda (ys4153@x ys4154@r ys4155@mr) (let ((ys4159@fmls (car ys4153@x)) (ys415a@body* (cdr ys4153@x))) (call-with-values (lambda () (ys30a2@chi-lambda-clause ys4159@fmls ys4159@fmls ys415a@body* ys4154@r ys4155@mr)) (lambda (ys4161@ys415e ys4162@ys4160) (let ((ys4165@body ys4162@ys4160) (ys4166@fmls ys4161@ys415e)) (ys2dd6@ys2d02@build-lambda '#f ys4166@fmls ys4165@body))))))) (set! ys4b66@ys30a6@chi-defun ys30a6@chi-defun) (set! ys30a8@chi-rhs (lambda (ys4169@rhs ys416a@r ys416b@mr) (let ((ys416f@t (car ys4169@rhs))) (if (memv ys416f@t '(defun)) (ys30a6@chi-defun (cdr ys4169@rhs) ys416a@r ys416b@mr) (if (memv ys416f@t '(expr)) (let ((ys4171@expr (cdr ys4169@rhs))) (ys309c@chi-expr ys4171@expr ys416a@r ys416b@mr)) (if (memv ys416f@t '(top-expr)) (let ((ys4173@expr (cdr ys4169@rhs))) (ys2dd8@ys2d32@build-sequence '#f (list (ys309c@chi-expr ys4173@expr ys416a@r ys416b@mr) (ys2dd9@ys2d34@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" ys4169@rhs))))))) (set! ys4b67@ys30a8@chi-rhs ys30a8@chi-rhs) (set! ys30aa@expand-interaction-rhs*/init* (lambda (ys4175@lhs* ys4176@rhs* ys4177@init* ys4178@r ys4179@mr) (let ys4183@f ((ys417f@lhs* ys4175@lhs*) (ys4180@rhs* ys4176@rhs*)) (if (null? ys417f@lhs*) (map (lambda (ys4185@x) (ys309c@chi-expr ys4185@x ys4178@r ys4179@mr)) ys4177@init*) (let ((ys4187@lhs (car ys417f@lhs*)) (ys4188@rhs (car ys4180@rhs*))) (let ((ys418b@t (car ys4188@rhs))) (if (memv ys418b@t '(defun)) (let ((ys418d@rhs (ys30a6@chi-defun (cdr ys4188@rhs) ys4178@r ys4179@mr))) (cons (list 'set! ys4187@lhs ys418d@rhs) (ys4183@f (cdr ys417f@lhs*) (cdr ys4180@rhs*)))) (if (memv ys418b@t '(expr)) (let ((ys418f@rhs (ys309c@chi-expr (cdr ys4188@rhs) ys4178@r ys4179@mr))) (cons (list 'set! ys4187@lhs ys418f@rhs) (ys4183@f (cdr ys417f@lhs*) (cdr ys4180@rhs*)))) (if (memv ys418b@t '(top-expr)) (let ((ys4191@e (ys309c@chi-expr (cdr ys4188@rhs) ys4178@r ys4179@mr))) (cons ys4191@e (ys4183@f (cdr ys417f@lhs*) (cdr ys4180@rhs*)))) (error 'expand-interaction '"invallid" ys4188@rhs)))))))))) (set! ys4b68@ys30aa@expand-interaction-rhs*/init* ys30aa@expand-interaction-rhs*/init*) (set! ys30ac@chi-rhs* (lambda (ys4193@rhs* ys4194@r ys4195@mr) (let ys419b@f ((ys4199@ls ys4193@rhs*)) (if (null? ys4199@ls) '() (let ((ys419d@a (ys30a8@chi-rhs (car ys4199@ls) ys4194@r ys4195@mr))) (cons ys419d@a (ys419b@f (cdr ys4199@ls)))))))) (set! ys4b69@ys30ac@chi-rhs* ys30ac@chi-rhs*) (set! ys30ae@find-bound=? (lambda (ys419f@x ys41a0@lhs* ys41a1@rhs*) (if (null? ys41a0@lhs*) '#f (if (ys2e77@bound-id=? ys419f@x (car ys41a0@lhs*)) (car ys41a1@rhs*) (ys30ae@find-bound=? ys419f@x (cdr ys41a0@lhs*) (cdr ys41a1@rhs*)))))) (set! ys4b6a@ys30ae@find-bound=? ys30ae@find-bound=?) (set! ys30b0@find-dups (lambda (ys41a5@ls) (let ys41ab@f ((ys41a7@ls ys41a5@ls) (ys41a8@dups '())) (if (null? ys41a7@ls) ys41a8@dups (let ((ys41ad@t (ys30ae@find-bound=? (car ys41a7@ls) (cdr ys41a7@ls) (cdr ys41a7@ls)))) (if ys41ad@t ((lambda (ys41af@x) (ys41ab@f (cdr ys41a7@ls) (cons (list (car ys41a7@ls) ys41af@x) ys41a8@dups))) ys41ad@t) (ys41ab@f (cdr ys41a7@ls) ys41a8@dups))))))) (set! ys4b6b@ys30b0@find-dups ys30b0@find-dups) (set! ys30b2@chi-internal (lambda (ys41b1@e* ys41b2@r ys41b3@mr) (let ((ys41b7@rib (ys2e27@make-empty-rib))) (call-with-values (lambda () (ys30d2@chi-body* (map (lambda (ys41c9@x) (ys2e5f@add-subst ys41b7@rib ys41c9@x)) (ys2e71@syntax->list ys41b1@e*)) ys41b2@r ys41b3@mr '() '() '() '() '() ys41b7@rib '#f)) (lambda (ys41cb@ys41ba ys41cc@ys41bc ys41cd@ys41be ys41ce@ys41c0 ys41cf@ys41c2 ys41d0@ys41c4 ys41d1@ys41c6 ys41d2@ys41c8) (let ((ys41db@_exp* ys41d2@ys41c8) (ys41dc@kwd* ys41d1@ys41c6) (ys41dd@mod** ys41d0@ys41c4) (ys41de@rhs* ys41cf@ys41c2) (ys41df@lex* ys41ce@ys41c0) (ys41e0@mr ys41cd@ys41be) (ys41e1@r ys41cc@ys41bc) (ys41e2@e* ys41cb@ys41ba)) (begin (if (null? ys41e2@e*) (ys315a@syntax-violation '#f '"no expression in body" ys41e2@e*) (void)) (let ((ys41eb@init* (ys3098@chi-expr* (append (apply append (reverse ys41dd@mod**)) ys41e2@e*) ys41e1@r ys41e0@mr))) (let ((ys41ed@rhs* (ys30ac@chi-rhs* ys41de@rhs* ys41e1@r ys41e0@mr))) (ys2ddd@ys2d3c@build-letrec* '#f (reverse ys41df@lex*) (reverse ys41ed@rhs*) (ys2dd8@ys2d32@build-sequence '#f ys41eb@init*))))))))))) (set! ys4b6c@ys30b2@chi-internal ys30b2@chi-internal) (set! ys30b4@parse-module (lambda (ys41ef@e) (let ((ys41f1@t ys41ef@e)) (let ((ys41f3@ls/false (ys307a@syntax-dispatch ys41f1@t '(_ each-any . each-any)))) (if ys41f3@ls/false (apply (lambda (ys41f5@export* ys41f6@b*) (begin (if (not (for-all ys2e73@id? ys41f5@export*)) (ys315a@syntax-violation '#f '"module exports must be identifiers" ys41ef@e) (void)) (values '#f (list->vector ys41f5@export*) ys41f6@b*))) ys41f3@ls/false) (let ((ys41f9@t ys41f1@t)) (let ((ys41fb@ls/false (ys307a@syntax-dispatch ys41f9@t '(_ any each-any . each-any)))) (if ys41fb@ls/false (apply (lambda (ys41fd@name ys41fe@export* ys41ff@b*) (begin (if (not (ys2e73@id? ys41fd@name)) (ys315a@syntax-violation '#f '"module name must be an identifier" ys41ef@e) (void)) (if (not (for-all ys2e73@id? ys41fe@export*)) (ys315a@syntax-violation '#f '"module exports must be identifiers" ys41ef@e) (void)) (values ys41fd@name (list->vector ys41fe@export*) ys41ff@b*))) ys41fb@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys41f9@t))))))))) (set! ys4b6d@ys30b4@parse-module ys30b4@parse-module) (set! ys30be@module-interface? (lambda (ys4203@x) (and (simple-struct? ys4203@x) (eq? (simple-struct-name ys4203@x) 'module-interface)))) (set! ys4b6e@ys30be@module-interface? ys30be@module-interface?) (set! ys30c0@module-interface-first-mark (lambda (ys4205@x) (simple-struct-ref ys4205@x '0))) (set! ys4b6f@ys30c0@module-interface-first-mark ys30c0@module-interface-first-mark) (set! ys30c2@set-module-interface-first-mark! (lambda (ys4207@x ys4208@val) (simple-struct-set! ys4207@x '0 ys4208@val))) (set! ys4b70@ys30c2@set-module-interface-first-mark! ys30c2@set-module-interface-first-mark!) (set! ys30c4@module-interface-exp-id-vec (lambda (ys420b@x) (simple-struct-ref ys420b@x '1))) (set! ys4b71@ys30c4@module-interface-exp-id-vec ys30c4@module-interface-exp-id-vec) (set! ys30c6@set-module-interface-exp-id-vec! (lambda (ys420d@x ys420e@val) (simple-struct-set! ys420d@x '1 ys420e@val))) (set! ys4b72@ys30c6@set-module-interface-exp-id-vec! ys30c6@set-module-interface-exp-id-vec!) (set! ys30c8@module-interface-exp-lab-vec (lambda (ys4211@x) (simple-struct-ref ys4211@x '2))) (set! ys4b73@ys30c8@module-interface-exp-lab-vec ys30c8@module-interface-exp-lab-vec) (set! ys30ca@set-module-interface-exp-lab-vec! (lambda (ys4213@x ys4214@val) (simple-struct-set! ys4213@x '2 ys4214@val))) (set! ys4b74@ys30ca@set-module-interface-exp-lab-vec! ys30ca@set-module-interface-exp-lab-vec!) (set! ys30cc@dummy '3) (set! ys4b75@ys30cc@dummy ys30cc@dummy) (set! ys30ce@module-interface-exp-id* (lambda (ys4217@iface ys4218@id) (let ((ys421c@diff-marks '#f)) (begin (set! ys421c@diff-marks (lambda (ys4223@ls ys4224@x) (begin (if (null? ys4223@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((ys4227@a (car ys4223@ls))) (if (eq? ys4227@a ys4224@x) '() (cons ys4227@a (ys421c@diff-marks (cdr ys4223@ls) ys4224@x))))))) (let ((ys421d@diff (ys421c@diff-marks (ys2e45@stx-mark* ys4218@id) (ys30c0@module-interface-first-mark ys4217@iface))) (ys421e@id-vec (ys30c4@module-interface-exp-id-vec ys4217@iface))) (if (null? ys421d@diff) ys421e@id-vec (vector-map (lambda (ys4221@x) (make-simple-struct 'stx '5 (list (ys2e41@stx-expr ys4221@x) (append ys421d@diff (ys2e45@stx-mark* ys4221@x)) '() '()))) ys421e@id-vec))))))) (set! ys4b76@ys30ce@module-interface-exp-id* ys30ce@module-interface-exp-id*) (set! ys30d0@chi-internal-module (lambda (ys4229@e ys422a@r ys422b@mr ys422c@lex* ys422d@rhs* ys422e@mod** ys422f@kwd*) (call-with-values (lambda () (ys30b4@parse-module ys4229@e)) (lambda (ys423d@ys4238 ys423e@ys423a ys423f@ys423c) (let ((ys4243@e* ys423f@ys423c) (ys4244@exp-id* ys423e@ys423a) (ys4245@name ys423d@ys4238)) (let ((ys4249@rib (ys2e27@make-empty-rib))) (let ((ys424b@e* (map (lambda (ys424d@x) (ys2e5f@add-subst ys4249@rib ys424d@x)) (ys2e71@syntax->list ys4243@e*)))) (call-with-values (lambda () (ys30d2@chi-body* ys424b@e* ys422a@r ys422b@mr ys422c@lex* ys422d@rhs* ys422e@mod** ys422f@kwd* '() ys4249@rib '#f)) (lambda (ys425f@ys4250 ys4260@ys4252 ys4261@ys4254 ys4262@ys4256 ys4263@ys4258 ys4264@ys425a ys4265@ys425c ys4266@ys425e) (let ((ys426f@_exp* ys4266@ys425e) (ys4270@kwd* ys4265@ys425c) (ys4271@mod** ys4264@ys425a) (ys4272@rhs* ys4263@ys4258) (ys4273@lex* ys4262@ys4256) (ys4274@mr ys4261@ys4254) (ys4275@r ys4260@ys4252) (ys4276@e* ys425f@ys4250)) (let ((ys427f@exp-lab* (vector-map (lambda (ys4283@x) (or (ys2e89@id->label (make-simple-struct 'stx '5 (list (ys2e75@id->sym ys4283@x) (ys2e45@stx-mark* ys4283@x) (list ys4249@rib) '()))) (ys315a@syntax-violation '#f '"cannot find module export" ys4283@x))) ys4244@exp-id*)) (ys4280@mod** (cons ys4276@e* ys4271@mod**))) (if (not ys4245@name) (values ys4273@lex* ys4272@rhs* ys4244@exp-id* ys427f@exp-lab* ys4275@r ys4274@mr ys4280@mod** ys4270@kwd*) (let ((ys4285@lab (ys2dff@gen-label 'module)) (ys4286@iface (make-simple-struct 'module-interface '4 (list (car (ys2e45@stx-mark* ys4245@name)) (vector-map (lambda (ys4289@x) (make-simple-struct 'stx '5 (list (ys2e41@stx-expr ys4289@x) (ys2e45@stx-mark* ys4289@x) '() '()))) ys4244@exp-id*) ys427f@exp-lab*)))) (values ys4273@lex* ys4272@rhs* (vector ys4245@name) (vector ys4285@lab) (cons (cons ys4285@lab (cons '$module ys4286@iface)) ys4275@r) (cons (cons ys4285@lab (cons '$module ys4286@iface)) ys4274@mr) ys4280@mod** ys4270@kwd*)))))))))))))) (set! ys4b77@ys30d0@chi-internal-module ys30d0@chi-internal-module) (set! ys30d2@chi-body* (lambda (ys428b@e* ys428c@r ys428d@mr ys428e@lex* ys428f@rhs* ys4290@mod** ys4291@kwd* ys4292@exp* ys4293@rib ys4294@top?) (if (null? ys428b@e*) (values ys428b@e* ys428c@r ys428d@mr ys428e@lex* ys428f@rhs* ys4290@mod** ys4291@kwd* ys4292@exp*) (let ((ys429f@e (car ys428b@e*))) (call-with-values (lambda () (ys2e95@syntax-type ys429f@e ys428c@r)) (lambda (ys42a7@ys42a2 ys42a8@ys42a4 ys42a9@ys42a6) (let ((ys42ad@kwd ys42a9@ys42a6) (ys42ae@value ys42a8@ys42a4) (ys42af@type ys42a7@ys42a2)) (let ((ys42b3@kwd* (if (ys2e73@id? ys42ad@kwd) (cons ys42ad@kwd ys4291@kwd*) ys4291@kwd*))) (let ((ys42b5@t ys42af@type)) (if (memv ys42b5@t '(define)) (call-with-values (lambda () (ys2ffc@parse-define ys429f@e)) (lambda (ys42bb@ys42b8 ys42bc@ys42ba) (let ((ys42bf@rhs ys42bc@ys42ba) (ys42c0@id ys42bb@ys42b8)) (begin (if (ys2e7f@bound-id-member? ys42c0@id ys42b3@kwd*) (ys315a@syntax-violation '#f '"cannot redefine keyword" ys429f@e) (void)) (call-with-values (lambda () (ys2e03@gen-define-label+loc ys42c0@id ys4293@rib)) (lambda (ys42c7@ys42c4 ys42c8@ys42c6) (let ((ys42cb@lex ys42c8@ys42c6) (ys42cc@lab ys42c7@ys42c4)) (begin (ys2e29@extend-rib! ys4293@rib ys42c0@id ys42cc@lab) (ys30d2@chi-body* (cdr ys428b@e*) (ys300a@add-lexical ys42cc@lab ys42cb@lex ys428c@r) ys428d@mr (cons ys42cb@lex ys428e@lex*) (cons ys42bf@rhs ys428f@rhs*) ys4290@mod** ys42b3@kwd* ys4292@exp* ys4293@rib ys4294@top?))))))))) (if (memv ys42b5@t '(define-syntax)) (call-with-values (lambda () (ys2ffe@parse-define-syntax ys429f@e)) (lambda (ys42d3@ys42d0 ys42d4@ys42d2) (let ((ys42d7@rhs ys42d4@ys42d2) (ys42d8@id ys42d3@ys42d0)) (begin (if (ys2e7f@bound-id-member? ys42d8@id ys42b3@kwd*) (ys315a@syntax-violation '#f '"cannot redefine keyword" ys429f@e) (void)) (let ((ys42db@lab (ys2e05@gen-define-label ys42d8@id ys4293@rib)) (ys42dc@expanded-rhs (ys30d4@expand-transformer ys42d7@rhs ys428d@mr))) (begin (ys2e29@extend-rib! ys4293@rib ys42d8@id ys42db@lab) (let ((ys42df@b (ys2eab@make-eval-transformer ys42dc@expanded-rhs))) (ys30d2@chi-body* (cdr ys428b@e*) (cons (cons ys42db@lab ys42df@b) ys428c@r) (cons (cons ys42db@lab ys42df@b) ys428d@mr) ys428e@lex* ys428f@rhs* ys4290@mod** ys42b3@kwd* ys4292@exp* ys4293@rib ys4294@top?)))))))) (if (memv ys42b5@t '(let-syntax letrec-syntax)) (let ((ys42e1@t ys429f@e)) (let ((ys42e3@ls/false (ys307a@syntax-dispatch ys42e1@t '(_ #(each (any any)) . each-any)))) (if (and ys42e3@ls/false (apply (lambda (ys42e5@xlhs* ys42e6@xrhs* ys42e7@xbody*) (if (not (ys2e7b@valid-bound-ids? ys42e5@xlhs*)) (ys315a@syntax-violation '#f '"invalid identifiers" ys429f@e) (void))) ys42e3@ls/false)) (apply (lambda (ys42eb@xlhs* ys42ec@xrhs* ys42ed@xbody*) (let ((ys42f1@xlab* (map ys2dff@gen-label ys42eb@xlhs*))) (let ((ys42f3@xrib (ys2e33@make-full-rib ys42eb@xlhs* ys42f1@xlab*))) (let ((ys42f5@xb* (map (lambda (ys42f7@x) (ys2eab@make-eval-transformer (ys30d4@expand-transformer (if (eq? ys42af@type 'let-syntax) ys42f7@x (ys2e5f@add-subst ys42f3@xrib ys42f7@x)) ys428d@mr))) ys42ec@xrhs*))) (ys30d2@chi-body* (append (map (lambda (ys42f9@x) (ys2e5f@add-subst ys42f3@xrib ys42f9@x)) ys42ed@xbody*) (cdr ys428b@e*)) (append (map cons ys42f1@xlab* ys42f5@xb*) ys428c@r) (append (map cons ys42f1@xlab* ys42f5@xb*) ys428d@mr) ys428e@lex* ys428f@rhs* ys4290@mod** ys42b3@kwd* ys4292@exp* ys4293@rib ys4294@top?))))) ys42e3@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys42e1@t)))) (if (memv ys42b5@t '(begin)) (let ((ys42fb@t ys429f@e)) (let ((ys42fd@ls/false (ys307a@syntax-dispatch ys42fb@t '(_ . each-any)))) (if ys42fd@ls/false (apply (lambda (ys42ff@x*) (ys30d2@chi-body* (append ys42ff@x* (cdr ys428b@e*)) ys428c@r ys428d@mr ys428e@lex* ys428f@rhs* ys4290@mod** ys42b3@kwd* ys4292@exp* ys4293@rib ys4294@top?)) ys42fd@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys42fb@t)))) (if (memv ys42b5@t '(global-macro global-macro!)) (ys30d2@chi-body* (cons (ys2e5f@add-subst ys4293@rib (ys3096@chi-global-macro ys42ae@value ys429f@e)) (cdr ys428b@e*)) ys428c@r ys428d@mr ys428e@lex* ys428f@rhs* ys4290@mod** ys42b3@kwd* ys4292@exp* ys4293@rib ys4294@top?) (if (memv ys42b5@t '(local-macro local-macro!)) (ys30d2@chi-body* (cons (ys2e5f@add-subst ys4293@rib (ys3094@chi-local-macro ys42ae@value ys429f@e)) (cdr ys428b@e*)) ys428c@r ys428d@mr ys428e@lex* ys428f@rhs* ys4290@mod** ys42b3@kwd* ys4292@exp* ys4293@rib ys4294@top?) (if (memv ys42b5@t '(macro macro!)) (ys30d2@chi-body* (cons (ys2e5f@add-subst ys4293@rib (ys3092@chi-macro ys42ae@value ys429f@e)) (cdr ys428b@e*)) ys428c@r ys428d@mr ys428e@lex* ys428f@rhs* ys4290@mod** ys42b3@kwd* ys4292@exp* ys4293@rib ys4294@top?) (if (memv ys42b5@t '(module)) (call-with-values (lambda () (ys30d0@chi-internal-module ys429f@e ys428c@r ys428d@mr ys428e@lex* ys428f@rhs* ys4290@mod** ys42b3@kwd*)) (lambda (ys4311@ys4302 ys4312@ys4304 ys4313@ys4306 ys4314@ys4308 ys4315@ys430a ys4316@ys430c ys4317@ys430e ys4318@ys4310) (let ((ys4321@kwd* ys4318@ys4310) (ys4322@mod** ys4317@ys430e) (ys4323@mr ys4316@ys430c) (ys4324@r ys4315@ys430a) (ys4325@m-exp-lab* ys4314@ys4308) (ys4326@m-exp-id* ys4313@ys4306) (ys4327@rhs* ys4312@ys4304) (ys4328@lex* ys4311@ys4302)) (begin (vector-for-each (lambda (ys4331@id ys4332@lab) (ys2e29@extend-rib! ys4293@rib ys4331@id ys4332@lab)) ys4326@m-exp-id* ys4325@m-exp-lab*) (ys30d2@chi-body* (cdr ys428b@e*) ys4324@r ys4323@mr ys4328@lex* ys4327@rhs* ys4322@mod** ys4321@kwd* ys4292@exp* ys4293@rib ys4294@top?))))) (if (memv ys42b5@t '(library)) (begin (ys313c@library-expander (ys2e87@stx->datum ys429f@e)) (ys30d2@chi-body* (cdr ys428b@e*) ys428c@r ys428d@mr ys428e@lex* ys428f@rhs* ys4290@mod** ys42b3@kwd* ys4292@exp* ys4293@rib ys4294@top?)) (if (memv ys42b5@t '(export)) (let ((ys4335@t ys429f@e)) (let ((ys4337@ls/false (ys307a@syntax-dispatch ys4335@t '(_ . each-any)))) (if ys4337@ls/false (apply (lambda (ys4339@exp-decl*) (ys30d2@chi-body* (cdr ys428b@e*) ys428c@r ys428d@mr ys428e@lex* ys428f@rhs* ys4290@mod** ys42b3@kwd* (append ys4339@exp-decl* ys4292@exp*) ys4293@rib ys4294@top?)) ys4337@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys4335@t)))) (if (memv ys42b5@t '(import)) (let ((ys433c@module-import? '#f) (ys433e@module-import '#f) (ys4340@library-import '#f)) (begin (set! ys433c@module-import? (lambda (ys438f@e) (let ((ys4391@t ys438f@e)) (let ((ys4393@ls/false (ys307a@syntax-dispatch ys4391@t '(_ any)))) (if (and ys4393@ls/false (apply (lambda (ys4395@id) (ys2e73@id? ys4395@id)) ys4393@ls/false)) (apply (lambda (ys4397@id) '#t) ys4393@ls/false) (let ((ys4399@t ys4391@t)) (let ((ys439b@ls/false (ys307a@syntax-dispatch ys4399@t '(_ . each-any)))) (if ys439b@ls/false (apply (lambda (ys439d@imp*) '#f) ys439b@ls/false) (let ((ys439f@t ys4399@t)) (let ((ys43a1@ls/false (ys307a@syntax-dispatch ys439f@t '_))) (if ys43a1@ls/false (apply (lambda () (ys315a@syntax-violation '#f '"malformed import form" ys438f@e)) ys43a1@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys439f@t)))))))))))) (set! ys433e@module-import (lambda (ys436d@e ys436e@r) (let ((ys4371@t ys436d@e)) (let ((ys4373@ls/false (ys307a@syntax-dispatch ys4371@t '(_ any)))) (if (and ys4373@ls/false (apply (lambda (ys4375@id) (ys2e73@id? ys4375@id)) ys4373@ls/false)) (apply (lambda (ys4377@id) (call-with-values (lambda () (ys2e95@syntax-type ys4377@id ys436e@r)) (lambda (ys437f@ys437a ys4380@ys437c ys4381@ys437e) (let ((ys4385@kwd ys4381@ys437e) (ys4386@value ys4380@ys437c) (ys4387@type ys437f@ys437a)) (let ((ys438b@t ys4387@type)) (if (memv ys438b@t '($module)) (let ((ys438d@iface ys4386@value)) (values (ys30ce@module-interface-exp-id* ys438d@iface ys4377@id) (ys30c8@module-interface-exp-lab-vec ys438d@iface))) (ys315a@syntax-violation '#f '"invalid import" ys436d@e))))))) ys4373@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys4371@t)))))) (set! ys4340@library-import (lambda (ys4351@e) (let ((ys4353@t ys4351@e)) (let ((ys4355@ls/false (ys307a@syntax-dispatch ys4353@t '(any . each-any)))) (if ys4355@ls/false (apply (lambda (ys4357@ctxt ys4358@imp*) (call-with-values (lambda () (ys30dc@parse-import-spec* (ys3160@syntax->datum ys4358@imp*))) (lambda (ys435f@ys435c ys4360@ys435e) (let ((ys4363@subst-labels ys4360@ys435e) (ys4364@subst-names ys435f@ys435c)) (values (vector-map (lambda (ys4367@name) (ys2e53@datum->stx ys4357@ctxt ys4367@name)) ys4364@subst-names) ys4363@subst-labels))))) ys4355@ls/false) (let ((ys4369@t ys4353@t)) (let ((ys436b@ls/false (ys307a@syntax-dispatch ys4369@t '_))) (if ys436b@ls/false (apply (lambda () (ys315a@syntax-violation '#f '"invalid import form" ys4351@e)) ys436b@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys4369@t))))))))) (begin (call-with-values (lambda () (if (ys433c@module-import? ys429f@e) (ys433e@module-import ys429f@e ys428c@r) (ys4340@library-import ys429f@e))) (lambda (ys4345@ys4342 ys4346@ys4344) (let ((ys4349@lab* ys4346@ys4344) (ys434a@id* ys4345@ys4342)) (vector-for-each (lambda (ys434d@id ys434e@lab) (ys2e29@extend-rib! ys4293@rib ys434d@id ys434e@lab)) ys434a@id* ys4349@lab*)))) (ys30d2@chi-body* (cdr ys428b@e*) ys428c@r ys428d@mr ys428e@lex* ys428f@rhs* ys4290@mod** ys42b3@kwd* ys4292@exp* ys4293@rib ys4294@top?)))) (if ys4294@top? (ys30d2@chi-body* (cdr ys428b@e*) ys428c@r ys428d@mr (cons (ys2dfb@gen-lexical 'dummy) ys428e@lex*) (cons (cons 'top-expr ys429f@e) ys428f@rhs*) ys4290@mod** ys42b3@kwd* ys4292@exp* ys4293@rib ys4294@top?) (values ys428b@e* ys428c@r ys428d@mr ys428e@lex* ys428f@rhs* ys4290@mod** ys42b3@kwd* ys4292@exp*)))))))))))))))))))))) (set! ys4b78@ys30d2@chi-body* ys30d2@chi-body*) (set! ys30d4@expand-transformer (lambda (ys43a3@expr ys43a4@r) (let ((ys43a7@rtc (ys30e0@make-collector))) (let ((ys43a9@expanded-rhs (let ((ys43b3@ys43ac ys30e2@inv-collector) (ys43b4@ys43ae ys30e4@vis-collector) (ys43b5@ys43b0 ys43a7@rtc) (ys43b6@ys43b2 (lambda (ys43bb@x) (values)))) (let ((ys43bd@swap (lambda () (begin (let ((ys43bf@t (ys43b3@ys43ac))) (begin (ys43b3@ys43ac ys43b5@ys43b0) (set! ys43b5@ys43b0 ys43bf@t))) (let ((ys43c1@t (ys43b4@ys43ae))) (begin (ys43b4@ys43ae ys43b6@ys43b2) (set! ys43b6@ys43b2 ys43c1@t))))))) (dynamic-wind ys43bd@swap (lambda () (ys309c@chi-expr ys43a3@expr ys43a4@r ys43a4@r)) ys43bd@swap))))) (begin (for-each (let ((ys43c3@mark-visit (ys30e4@vis-collector))) (lambda (ys43c5@x) (begin (ys2c89@ys2ad7@invoke-library ys43c5@x) (ys43c3@mark-visit ys43c5@x)))) (ys43a7@rtc)) ys43a9@expanded-rhs))))) (set! ys4b79@ys30d4@expand-transformer ys30d4@expand-transformer) (set! ys30d6@parse-exports (lambda (ys43c7@exp*) (let ys43cf@f ((ys43c9@exp* ys43c7@exp*) (ys43ca@int* '()) (ys43cb@ext* '())) (if (null? ys43c9@exp*) (begin (if (not (ys2e7b@valid-bound-ids? ys43cb@ext*)) (ys315a@syntax-violation 'export '"invalid exports" (ys30b0@find-dups ys43cb@ext*)) (void)) (values (map ys3160@syntax->datum ys43cb@ext*) ys43ca@int*)) (let ((ys43d1@t (car ys43c9@exp*))) (let ((ys43d3@ls/false (ys307a@syntax-dispatch ys43d1@t '(any . #(each (any any)))))) (if ys43d3@ls/false (apply (lambda (ys43d5@rename ys43d6@i* ys43d7@e*) (begin (if (not (and (eq? (ys3160@syntax->datum ys43d5@rename) 'rename) (for-all ys2e73@id? ys43d6@i*) (for-all ys2e73@id? ys43d7@e*))) (ys315a@syntax-violation 'export '"invalid export specifier" (car ys43c9@exp*)) (void)) (ys43cf@f (cdr ys43c9@exp*) (append ys43d6@i* ys43ca@int*) (append ys43d7@e* ys43cb@ext*)))) ys43d3@ls/false) (let ((ys43db@t ys43d1@t)) (let ((ys43dd@ls/false (ys307a@syntax-dispatch ys43db@t 'any))) (if ys43dd@ls/false (apply (lambda (ys43df@ie) (begin (if (not (ys2e73@id? ys43df@ie)) (ys315a@syntax-violation 'export '"invalid export" ys43df@ie) (void)) (ys43cf@f (cdr ys43c9@exp*) (cons ys43df@ie ys43ca@int*) (cons ys43df@ie ys43cb@ext*)))) ys43dd@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys43db@t))))))))))) (set! ys4b7a@ys30d6@parse-exports ys30d6@parse-exports) (set! ys30d8@parse-library-name (lambda (ys43e1@spec) (let ((ys43e4@parse '#f)) (begin (set! ys43e4@parse (lambda (ys43f1@x) (let ((ys43f3@t ys43f1@x)) (let ((ys43f5@ls/false (ys307a@syntax-dispatch ys43f3@t '(each-any)))) (if (and ys43f5@ls/false (apply (lambda (ys43f7@v*) (for-all (lambda (ys43f9@x) (let ((ys43fb@x (ys3160@syntax->datum ys43f9@x))) (and (integer? ys43fb@x) (exact? ys43fb@x)))) ys43f7@v*)) ys43f5@ls/false)) (apply (lambda (ys43fd@v*) (values '() (map ys3160@syntax->datum ys43fd@v*))) ys43f5@ls/false) (let ((ys43ff@t ys43f3@t)) (let ((ys4401@ls/false (ys307a@syntax-dispatch ys43ff@t '(any . any)))) (if (and ys4401@ls/false (apply (lambda (ys4403@x ys4404@rest) (symbol? (ys3160@syntax->datum ys4403@x))) ys4401@ls/false)) (apply (lambda (ys4407@x ys4408@rest) (call-with-values (lambda () (ys43e4@parse ys4408@rest)) (lambda (ys440f@ys440c ys4410@ys440e) (let ((ys4413@v* ys4410@ys440e) (ys4414@x* ys440f@ys440c)) (values (cons (ys3160@syntax->datum ys4407@x) ys4414@x*) ys4413@v*))))) ys4401@ls/false) (let ((ys4417@t ys43ff@t)) (let ((ys4419@ls/false (ys307a@syntax-dispatch ys4417@t '()))) (if ys4419@ls/false (apply (lambda () (values '() '())) ys4419@ls/false) (let ((ys441b@t ys4417@t)) (let ((ys441d@ls/false (ys307a@syntax-dispatch ys441b@t '_))) (if ys441d@ls/false (apply (lambda () (ys315a@syntax-violation '#f '"invalid library name" ys43e1@spec)) ys441d@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys441b@t))))))))))))))) (call-with-values (lambda () (ys43e4@parse ys43e1@spec)) (lambda (ys43e9@ys43e6 ys43ea@ys43e8) (let ((ys43ed@ver* ys43ea@ys43e8) (ys43ee@name* ys43e9@ys43e6)) (begin (if (null? ys43ee@name*) (ys315a@syntax-violation '#f '"empty library name" ys43e1@spec) (void)) (values ys43ee@name* ys43ed@ver*))))))))) (set! ys4b7b@ys30d8@parse-library-name ys30d8@parse-library-name) (set! ys30da@parse-library (lambda (ys441f@e) (let ((ys4421@t ys441f@e)) (let ((ys4423@ls/false (ys307a@syntax-dispatch ys4421@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and ys4423@ls/false (apply (lambda (ys4425@library ys4426@name* ys4427@export ys4428@exp* ys4429@import ys442a@imp* ys442b@b*) (and (eq? (ys3160@syntax->datum ys4427@export) 'export) (eq? (ys3160@syntax->datum ys4429@import) 'import) (eq? (ys3160@syntax->datum ys4425@library) 'library))) ys4423@ls/false)) (apply (lambda (ys4433@library ys4434@name* ys4435@export ys4436@exp* ys4437@import ys4438@imp* ys4439@b*) (values ys4434@name* ys4436@exp* ys4438@imp* ys4439@b*)) ys4423@ls/false) (let ((ys4441@t ys4421@t)) (let ((ys4443@ls/false (ys307a@syntax-dispatch ys4441@t '_))) (if ys4443@ls/false (apply (lambda () (ys315a@syntax-violation '#f '"malformed library" ys441f@e)) ys4443@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys4441@t))))))))) (set! ys4b7c@ys30da@parse-library ys30da@parse-library) (set! ys30dc@parse-import-spec* (let ((ys4446@idsyn? '#f) (ys4448@dup-error '#f) (ys444a@merge-substs '#f) (ys444c@exclude* '#f) (ys444e@find* '#f) (ys4450@rem* '#f) (ys4452@remove-dups '#f) (ys4454@parse-library-name '#f) (ys4456@import-library '#f) (ys4458@get-import '#f) (ys445a@add-imports! '#f)) (begin (set! ys4446@idsyn? (lambda (ys464f@x) (symbol? (ys3160@syntax->datum ys464f@x)))) (set! ys4448@dup-error (lambda (ys464d@name) (ys315a@syntax-violation 'import '"two imports with different bindings" ys464d@name))) (set! ys444a@merge-substs (lambda (ys463b@s ys463c@subst) (let ((ys4640@insert-to-subst '#f)) (begin (set! ys4640@insert-to-subst (lambda (ys4641@a ys4642@subst) (let ((ys4645@name (car ys4641@a)) (ys4646@label (cdr ys4641@a))) (let ((ys4649@t (assq ys4645@name ys4642@subst))) (if ys4649@t ((lambda (ys464b@x) (if (eq? (cdr ys464b@x) ys4646@label) ys4642@subst (ys4448@dup-error ys4645@name))) ys4649@t) (cons ys4641@a ys4642@subst)))))) (if (null? ys463b@s) ys463c@subst (ys4640@insert-to-subst (car ys463b@s) (ys444a@merge-substs (cdr ys463b@s) ys463c@subst))))))) (set! ys444c@exclude* (lambda (ys460b@sym* ys460c@subst) (let ((ys4610@exclude '#f)) (begin (set! ys4610@exclude (lambda (ys4629@sym ys462a@subst) (if (null? ys462a@subst) (ys315a@syntax-violation 'import '"cannot rename unbound identifier" ys4629@sym) (if (eq? ys4629@sym (caar ys462a@subst)) (values (cdar ys462a@subst) (cdr ys462a@subst)) (let ((ys462d@a (car ys462a@subst))) (call-with-values (lambda () (ys4610@exclude ys4629@sym (cdr ys462a@subst))) (lambda (ys4633@ys4630 ys4634@ys4632) (let ((ys4637@subst ys4634@ys4632) (ys4638@old ys4633@ys4630)) (values ys4638@old (cons ys462d@a ys4637@subst)))))))))) (if (null? ys460b@sym*) (values '() ys460c@subst) (call-with-values (lambda () (ys4610@exclude (car ys460b@sym*) ys460c@subst)) (lambda (ys4615@ys4612 ys4616@ys4614) (let ((ys4619@subst ys4616@ys4614) (ys461a@old ys4615@ys4612)) (call-with-values (lambda () (ys444c@exclude* (cdr ys460b@sym*) ys4619@subst)) (lambda (ys4621@ys461e ys4622@ys4620) (let ((ys4625@subst ys4622@ys4620) (ys4626@old* ys4621@ys461e)) (values (cons ys461a@old ys4626@old*) ys4625@subst)))))))))))) (set! ys444e@find* (lambda (ys4603@sym* ys4604@subst) (map (lambda (ys4607@x) (let ((ys4609@t (assq ys4607@x ys4604@subst))) (if ys4609@t (cdr ys4609@t) (ys315a@syntax-violation 'import '"cannot find identifier" ys4607@x)))) ys4603@sym*))) (set! ys4450@rem* (lambda (ys45fb@sym* ys45fc@subst) (let ys4601@f ((ys45ff@subst ys45fc@subst)) (if (null? ys45ff@subst) '() (if (memq (caar ys45ff@subst) ys45fb@sym*) (ys4601@f (cdr ys45ff@subst)) (cons (car ys45ff@subst) (ys4601@f (cdr ys45ff@subst)))))))) (set! ys4452@remove-dups (lambda (ys45f9@ls) (if (null? ys45f9@ls) '() (if (memq (car ys45f9@ls) (cdr ys45f9@ls)) (ys4452@remove-dups (cdr ys45f9@ls)) (cons (car ys45f9@ls) (ys4452@remove-dups (cdr ys45f9@ls))))))) (set! ys4454@parse-library-name (lambda (ys4511@spec) (let ((ys4514@subversion? '#f) (ys4516@subversion-pred '#f) (ys4518@version-pred '#f)) (begin (set! ys4514@subversion? (lambda (ys45f5@x) (let ((ys45f7@x (ys3160@syntax->datum ys45f5@x))) (and (integer? ys45f7@x) (exact? ys45f7@x) (>= ys45f7@x '0))))) (set! ys4516@subversion-pred (lambda (ys4595@x*) (let ((ys4597@t ys4595@x*)) (let ((ys4599@ls/false (ys307a@syntax-dispatch ys4597@t 'any))) (if (and ys4599@ls/false (apply (lambda (ys459b@n) (ys4514@subversion? ys459b@n)) ys4599@ls/false)) (apply (lambda (ys459d@n) (lambda (ys459f@x) (= ys459f@x (ys3160@syntax->datum ys459d@n)))) ys4599@ls/false) (let ((ys45a1@t ys4597@t)) (let ((ys45a3@ls/false (ys307a@syntax-dispatch ys45a1@t '(any . each-any)))) (if (and ys45a3@ls/false (apply (lambda (ys45a5@p? ys45a6@sub*) (eq? (ys3160@syntax->datum ys45a5@p?) 'and)) ys45a3@ls/false)) (apply (lambda (ys45a9@p? ys45aa@sub*) (let ((ys45ad@p* (map ys4516@subversion-pred ys45aa@sub*))) (lambda (ys45af@x) (for-all (lambda (ys45b1@p) (ys45b1@p ys45af@x)) ys45ad@p*)))) ys45a3@ls/false) (let ((ys45b3@t ys45a1@t)) (let ((ys45b5@ls/false (ys307a@syntax-dispatch ys45b3@t '(any . each-any)))) (if (and ys45b5@ls/false (apply (lambda (ys45b7@p? ys45b8@sub*) (eq? (ys3160@syntax->datum ys45b7@p?) 'or)) ys45b5@ls/false)) (apply (lambda (ys45bb@p? ys45bc@sub*) (let ((ys45bf@p* (map ys4516@subversion-pred ys45bc@sub*))) (lambda (ys45c1@x) (exists (lambda (ys45c3@p) (ys45c3@p ys45c1@x)) ys45bf@p*)))) ys45b5@ls/false) (let ((ys45c5@t ys45b3@t)) (let ((ys45c7@ls/false (ys307a@syntax-dispatch ys45c5@t '(any any)))) (if (and ys45c7@ls/false (apply (lambda (ys45c9@p? ys45ca@sub) (eq? (ys3160@syntax->datum ys45c9@p?) 'not)) ys45c7@ls/false)) (apply (lambda (ys45cd@p? ys45ce@sub) (let ((ys45d1@p (ys4516@subversion-pred ys45ce@sub))) (lambda (ys45d3@x) (not (ys45d1@p ys45d3@x))))) ys45c7@ls/false) (let ((ys45d5@t ys45c5@t)) (let ((ys45d7@ls/false (ys307a@syntax-dispatch ys45d5@t '(any any)))) (if (and ys45d7@ls/false (apply (lambda (ys45d9@p? ys45da@n) (and (eq? (ys3160@syntax->datum ys45d9@p?) '<=) (ys4514@subversion? ys45da@n))) ys45d7@ls/false)) (apply (lambda (ys45dd@p? ys45de@n) (lambda (ys45e1@x) (<= ys45e1@x (ys3160@syntax->datum ys45de@n)))) ys45d7@ls/false) (let ((ys45e3@t ys45d5@t)) (let ((ys45e5@ls/false (ys307a@syntax-dispatch ys45e3@t '(any any)))) (if (and ys45e5@ls/false (apply (lambda (ys45e7@p? ys45e8@n) (and (eq? (ys3160@syntax->datum ys45e7@p?) '>=) (ys4514@subversion? ys45e8@n))) ys45e5@ls/false)) (apply (lambda (ys45eb@p? ys45ec@n) (lambda (ys45ef@x) (>= ys45ef@x (ys3160@syntax->datum ys45ec@n)))) ys45e5@ls/false) (let ((ys45f1@t ys45e3@t)) (let ((ys45f3@ls/false (ys307a@syntax-dispatch ys45f1@t '_))) (if ys45f3@ls/false (apply (lambda () (ys315a@syntax-violation 'import '"invalid sub-version spec" ys4511@spec ys4595@x*)) ys45f3@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys45f1@t)))))))))))))))))))))))) (set! ys4518@version-pred (lambda (ys4545@x*) (let ((ys4547@t ys4545@x*)) (let ((ys4549@ls/false (ys307a@syntax-dispatch ys4547@t '()))) (if ys4549@ls/false (apply (lambda () (lambda (ys454b@x) '#t)) ys4549@ls/false) (let ((ys454d@t ys4547@t)) (let ((ys454f@ls/false (ys307a@syntax-dispatch ys454d@t '(any . each-any)))) (if (and ys454f@ls/false (apply (lambda (ys4551@c ys4552@ver*) (eq? (ys3160@syntax->datum ys4551@c) 'and)) ys454f@ls/false)) (apply (lambda (ys4555@c ys4556@ver*) (let ((ys4559@p* (map ys4518@version-pred ys4556@ver*))) (lambda (ys455b@x) (for-all (lambda (ys455d@p) (ys455d@p ys455b@x)) ys4559@p*)))) ys454f@ls/false) (let ((ys455f@t ys454d@t)) (let ((ys4561@ls/false (ys307a@syntax-dispatch ys455f@t '(any . each-any)))) (if (and ys4561@ls/false (apply (lambda (ys4563@c ys4564@ver*) (eq? (ys3160@syntax->datum ys4563@c) 'or)) ys4561@ls/false)) (apply (lambda (ys4567@c ys4568@ver*) (let ((ys456b@p* (map ys4518@version-pred ys4568@ver*))) (lambda (ys456d@x) (exists (lambda (ys456f@p) (ys456f@p ys456d@x)) ys456b@p*)))) ys4561@ls/false) (let ((ys4571@t ys455f@t)) (let ((ys4573@ls/false (ys307a@syntax-dispatch ys4571@t '(any any)))) (if (and ys4573@ls/false (apply (lambda (ys4575@c ys4576@ver) (eq? (ys3160@syntax->datum ys4575@c) 'not)) ys4573@ls/false)) (apply (lambda (ys4579@c ys457a@ver) (let ((ys457d@p (ys4518@version-pred ys457a@ver))) (lambda (ys457f@x) (not (ys457d@p ys457f@x))))) ys4573@ls/false) (let ((ys4581@t ys4571@t)) (let ((ys4583@ls/false (ys307a@syntax-dispatch ys4581@t 'each-any))) (if ys4583@ls/false (apply (lambda (ys4585@sub*) (let ((ys4587@p* (map ys4516@subversion-pred ys4585@sub*))) (lambda (ys4589@x) (let ys458f@f ((ys458b@p* ys4587@p*) (ys458c@x ys4589@x)) (if (null? ys458b@p*) '#t (if (null? ys458c@x) '#f (and ((car ys458b@p*) (car ys458c@x)) (ys458f@f (cdr ys458b@p*) (cdr ys458c@x))))))))) ys4583@ls/false) (let ((ys4591@t ys4581@t)) (let ((ys4593@ls/false (ys307a@syntax-dispatch ys4591@t '_))) (if ys4593@ls/false (apply (lambda () (ys315a@syntax-violation 'import '"invalid version spec" ys4511@spec ys4545@x*)) ys4593@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys4591@t))))))))))))))))))))) (let ys451b@f ((ys4519@x ys4511@spec)) (let ((ys451d@t ys4519@x)) (let ((ys451f@ls/false (ys307a@syntax-dispatch ys451d@t '(each-any)))) (if ys451f@ls/false (apply (lambda (ys4521@version-spec*) (values '() (ys4518@version-pred ys4521@version-spec*))) ys451f@ls/false) (let ((ys4523@t ys451d@t)) (let ((ys4525@ls/false (ys307a@syntax-dispatch ys4523@t '(any . any)))) (if (and ys4525@ls/false (apply (lambda (ys4527@x ys4528@x*) (ys4446@idsyn? ys4527@x)) ys4525@ls/false)) (apply (lambda (ys452b@x ys452c@x*) (call-with-values (lambda () (ys451b@f ys452c@x*)) (lambda (ys4533@ys4530 ys4534@ys4532) (let ((ys4537@pred ys4534@ys4532) (ys4538@name ys4533@ys4530)) (values (cons (ys3160@syntax->datum ys452b@x) ys4538@name) ys4537@pred))))) ys4525@ls/false) (let ((ys453b@t ys4523@t)) (let ((ys453d@ls/false (ys307a@syntax-dispatch ys453b@t '()))) (if ys453d@ls/false (apply (lambda () (values '() (lambda (ys453f@x) '#t))) ys453d@ls/false) (let ((ys4541@t ys453b@t)) (let ((ys4543@ls/false (ys307a@syntax-dispatch ys4541@t '_))) (if ys4543@ls/false (apply (lambda () (ys315a@syntax-violation '#f '"invalid import spec" ys4511@spec)) ys4543@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys4541@t)))))))))))))))))) (set! ys4456@import-library (lambda (ys4501@spec*) (call-with-values (lambda () (ys4454@parse-library-name ys4501@spec*)) (lambda (ys4507@ys4504 ys4508@ys4506) (let ((ys450b@pred ys4508@ys4506) (ys450c@name ys4507@ys4504)) (begin (if (null? ys450c@name) (ys315a@syntax-violation 'import '"empty library name" ys4501@spec*) (void)) (let ((ys450f@lib (ys2c82@ys2ac9@find-library-by-name ys450c@name))) (begin (if (not ys450f@lib) (ys315a@syntax-violation 'import '"cannot find library with required name" ys450c@name) (void)) (if (not (ys450b@pred (ys2c5c@ys2a7d@library-version ys450f@lib))) (ys315a@syntax-violation 'import '"library does not satisfy version specification" ys4501@spec* ys450f@lib) (void)) ((ys30e6@imp-collector) ys450f@lib) (ys2c64@ys2a8d@library-subst ys450f@lib))))))))) (set! ys4458@get-import (lambda (ys4473@spec) (let ((ys4475@t ys4473@spec)) (let ((ys4477@ls/false (ys307a@syntax-dispatch ys4475@t '(any . each-any)))) (if (and ys4477@ls/false (apply (lambda (ys4479@x ys447a@x*) (not (memq (ys3160@syntax->datum ys4479@x) '(for rename except only prefix library)))) ys4477@ls/false)) (apply (lambda (ys447d@x ys447e@x*) (ys4456@import-library (cons ys447d@x ys447e@x*))) ys4477@ls/false) (let ((ys4481@t ys4475@t)) (let ((ys4483@ls/false (ys307a@syntax-dispatch ys4481@t '(any any . #(each (any any)))))) (if (and ys4483@ls/false (apply (lambda (ys4485@rename ys4486@isp ys4487@old* ys4488@new*) (and (eq? (ys3160@syntax->datum ys4485@rename) 'rename) (for-all ys4446@idsyn? ys4487@old*) (for-all ys4446@idsyn? ys4488@new*))) ys4483@ls/false)) (apply (lambda (ys448d@rename ys448e@isp ys448f@old* ys4490@new*) (let ((ys4495@subst (ys4458@get-import ys448e@isp)) (ys4496@old* (map ys3160@syntax->datum ys448f@old*)) (ys4497@new* (map ys3160@syntax->datum ys4490@new*))) (let ((ys449b@old-label* (ys444e@find* ys4496@old* ys4495@subst))) (let ((ys449d@subst (ys4450@rem* ys4496@old* ys4495@subst))) (ys444a@merge-substs (map cons ys4497@new* ys449b@old-label*) ys449d@subst))))) ys4483@ls/false) (let ((ys449f@t ys4481@t)) (let ((ys44a1@ls/false (ys307a@syntax-dispatch ys449f@t '(any any . each-any)))) (if (and ys44a1@ls/false (apply (lambda (ys44a3@except ys44a4@isp ys44a5@sym*) (and (eq? (ys3160@syntax->datum ys44a3@except) 'except) (for-all ys4446@idsyn? ys44a5@sym*))) ys44a1@ls/false)) (apply (lambda (ys44a9@except ys44aa@isp ys44ab@sym*) (let ((ys44af@subst (ys4458@get-import ys44aa@isp))) (ys4450@rem* (map ys3160@syntax->datum ys44ab@sym*) ys44af@subst))) ys44a1@ls/false) (let ((ys44b1@t ys449f@t)) (let ((ys44b3@ls/false (ys307a@syntax-dispatch ys44b1@t '(any any . each-any)))) (if (and ys44b3@ls/false (apply (lambda (ys44b5@only ys44b6@isp ys44b7@sym*) (and (eq? (ys3160@syntax->datum ys44b5@only) 'only) (for-all ys4446@idsyn? ys44b7@sym*))) ys44b3@ls/false)) (apply (lambda (ys44bb@only ys44bc@isp ys44bd@sym*) (let ((ys44c1@subst (ys4458@get-import ys44bc@isp)) (ys44c2@sym* (map ys3160@syntax->datum ys44bd@sym*))) (let ((ys44c5@sym* (ys4452@remove-dups ys44c2@sym*))) (let ((ys44c7@lab* (ys444e@find* ys44c5@sym* ys44c1@subst))) (map cons ys44c5@sym* ys44c7@lab*))))) ys44b3@ls/false) (let ((ys44c9@t ys44b1@t)) (let ((ys44cb@ls/false (ys307a@syntax-dispatch ys44c9@t '(any any any)))) (if (and ys44cb@ls/false (apply (lambda (ys44cd@prefix ys44ce@isp ys44cf@p) (and (eq? (ys3160@syntax->datum ys44cd@prefix) 'prefix) (ys4446@idsyn? ys44cf@p))) ys44cb@ls/false)) (apply (lambda (ys44d3@prefix ys44d4@isp ys44d5@p) (let ((ys44d9@subst (ys4458@get-import ys44d4@isp)) (ys44da@prefix (symbol->string (ys3160@syntax->datum ys44d5@p)))) (map (lambda (ys44dd@x) (cons (string->symbol (string-append ys44da@prefix (symbol->string (car ys44dd@x)))) (cdr ys44dd@x))) ys44d9@subst))) ys44cb@ls/false) (let ((ys44df@t ys44c9@t)) (let ((ys44e1@ls/false (ys307a@syntax-dispatch ys44df@t '(any each-any)))) (if (and ys44e1@ls/false (apply (lambda (ys44e3@library ys44e4@spec*) (eq? (ys3160@syntax->datum ys44e3@library) 'library)) ys44e1@ls/false)) (apply (lambda (ys44e7@library ys44e8@spec*) (ys4456@import-library ys44e8@spec*)) ys44e1@ls/false) (let ((ys44eb@t ys44df@t)) (let ((ys44ed@ls/false (ys307a@syntax-dispatch ys44eb@t '(any any . any)))) (if (and ys44ed@ls/false (apply (lambda (ys44ef@for ys44f0@isp ys44f1@rest) (eq? (ys3160@syntax->datum ys44ef@for) 'for)) ys44ed@ls/false)) (apply (lambda (ys44f5@for ys44f6@isp ys44f7@rest) (ys4458@get-import ys44f6@isp)) ys44ed@ls/false) (let ((ys44fb@t ys44eb@t)) (let ((ys44fd@ls/false (ys307a@syntax-dispatch ys44fb@t 'any))) (if ys44fd@ls/false (apply (lambda (ys44ff@spec) (ys315a@syntax-violation 'import '"invalid import spec" ys44ff@spec)) ys44fd@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys44fb@t))))))))))))))))))))))))))) (set! ys445a@add-imports! (lambda (ys4463@imp ys4464@h) (let ((ys4467@subst (ys4458@get-import ys4463@imp))) (for-each (lambda (ys4469@x) (let ((ys446b@name (car ys4469@x)) (ys446c@label (cdr ys4469@x))) (let ((ys446f@t (hashtable-ref ys4464@h ys446b@name '#f))) (if ys446f@t ((lambda (ys4471@l) (if (not (eq? ys4471@l ys446c@label)) (ys4448@dup-error ys446b@name) (void))) ys446f@t) (hashtable-set! ys4464@h ys446b@name ys446c@label))))) ys4467@subst)))) (lambda (ys445b@imp*) (let ys4461@f ((ys445d@imp* ys445b@imp*) (ys445e@h (make-eq-hashtable))) (if (null? ys445d@imp*) (hashtable-entries ys445e@h) (begin (ys445a@add-imports! (car ys445d@imp*) ys445e@h) (ys4461@f (cdr ys445d@imp*) ys445e@h)))))))) (set! ys4b7d@ys30dc@parse-import-spec* ys30dc@parse-import-spec*) (set! ys30de@make-top-rib (lambda (ys4651@names ys4652@labels) (let ((ys4655@rib (ys2e27@make-empty-rib))) (begin (vector-for-each (lambda (ys4657@name ys4658@label) (begin (if (not (symbol? ys4657@name)) (error 'make-top-rib '"BUG: not a symbol" ys4657@name) (void)) (ys2e2b@extend-rib/nc! ys4655@rib (make-simple-struct 'stx '5 (list ys4657@name ys2df7@top-mark* '() '())) ys4658@label))) ys4651@names ys4652@labels) ys4655@rib)))) (set! ys4b7e@ys30de@make-top-rib ys30de@make-top-rib) (set! ys30e0@make-collector (lambda () (let ((ys465b@ls '())) (lambda ys465f (let ((ys4660 (length ys465f))) (if (= ys4660 '0) (apply (lambda () ys465b@ls) ys465f) (if (= ys4660 '1) (apply (lambda (ys465d@x) (set! ys465b@ls (ys2df0@set-cons ys465d@x ys465b@ls))) ys465f) (error 'apply '"invalid arg count")))))))) (set! ys4b7f@ys30e0@make-collector ys30e0@make-collector) (set! ys30e2@inv-collector (ys29bd@ys289c@make-parameter (lambda ys4661@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (ys4663@x) (begin (if (not (procedure? ys4663@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" ys4663@x) (void)) ys4663@x)))) (set! ys4b80@ys30e2@inv-collector ys30e2@inv-collector) (set! ys30e4@vis-collector (ys29bd@ys289c@make-parameter (lambda ys4665@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (ys4667@x) (begin (if (not (procedure? ys4667@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" ys4667@x) (void)) ys4667@x)))) (set! ys4b81@ys30e4@vis-collector ys30e4@vis-collector) (set! ys30e6@imp-collector (ys29bd@ys289c@make-parameter (lambda ys4669@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (ys466b@x) (begin (if (not (procedure? ys466b@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" ys466b@x) (void)) ys466b@x)))) (set! ys4b82@ys30e6@imp-collector ys30e6@imp-collector) (set! ys30e8@chi-library-internal (lambda (ys466d@e* ys466e@rib ys466f@top?) (call-with-values (lambda () (ys30d2@chi-body* ys466d@e* '() '() '() '() '() '() '() ys466e@rib ys466f@top?)) (lambda (ys4683@ys4674 ys4684@ys4676 ys4685@ys4678 ys4686@ys467a ys4687@ys467c ys4688@ys467e ys4689@ys4680 ys468a@ys4682) (let ((ys4693@exp* ys468a@ys4682) (ys4694@_kwd* ys4689@ys4680) (ys4695@mod** ys4688@ys467e) (ys4696@rhs* ys4687@ys467c) (ys4697@lex* ys4686@ys467a) (ys4698@mr ys4685@ys4678) (ys4699@r ys4684@ys4676) (ys469a@e* ys4683@ys4674)) (values (append (apply append (reverse ys4695@mod**)) ys469a@e*) ys4699@r ys4698@mr (reverse ys4697@lex*) (reverse ys4696@rhs*) ys4693@exp*)))))) (set! ys4b83@ys30e8@chi-library-internal ys30e8@chi-library-internal) (set! ys30ea@chi-interaction-expr (lambda (ys46a3@e ys46a4@rib ys46a5@r) (call-with-values (lambda () (ys30d2@chi-body* (list ys46a3@e) ys46a5@r ys46a5@r '() '() '() '() '() ys46a4@rib '#t)) (lambda (ys46b9@ys46aa ys46ba@ys46ac ys46bb@ys46ae ys46bc@ys46b0 ys46bd@ys46b2 ys46be@ys46b4 ys46bf@ys46b6 ys46c0@ys46b8) (let ((ys46c9@_exp* ys46c0@ys46b8) (ys46ca@_kwd* ys46bf@ys46b6) (ys46cb@mod** ys46be@ys46b4) (ys46cc@rhs* ys46bd@ys46b2) (ys46cd@lex* ys46bc@ys46b0) (ys46ce@mr ys46bb@ys46ae) (ys46cf@r ys46ba@ys46ac) (ys46d0@e* ys46b9@ys46aa)) (let ((ys46d9@e* (ys30aa@expand-interaction-rhs*/init* (reverse ys46cd@lex*) (reverse ys46cc@rhs*) (append (apply append (reverse ys46cb@mod**)) ys46d0@e*) ys46cf@r ys46ce@mr))) (let ((ys46db@e (if (null? ys46d9@e*) (ys2dd9@ys2d34@build-void) (if (null? (cdr ys46d9@e*)) (car ys46d9@e*) (ys2dd8@ys2d32@build-sequence '#f ys46d9@e*))))) (values ys46db@e ys46cf@r)))))))) (set! ys4b84@ys30ea@chi-interaction-expr ys30ea@chi-interaction-expr) (set! ys30ec@library-body-expander (lambda (ys46dd@name ys46de@main-exp* ys46df@imp* ys46e0@b* ys46e1@top?) (let ((ys46e8@itc '#f)) (begin (set! ys46e8@itc (ys30e0@make-collector)) (let ((ys46f1@ys46ea ys30e6@imp-collector) (ys46f2@ys46ec ys316a@top-level-context) (ys46f3@ys46ee ys46e8@itc) (ys46f4@ys46f0 '#f)) (let ((ys46f9@swap (lambda () (begin (let ((ys46fb@t (ys46f1@ys46ea))) (begin (ys46f1@ys46ea ys46f3@ys46ee) (set! ys46f3@ys46ee ys46fb@t))) (let ((ys46fd@t (ys46f2@ys46ec))) (begin (ys46f2@ys46ec ys46f4@ys46f0) (set! ys46f4@ys46f0 ys46fd@t))))))) (dynamic-wind ys46f9@swap (lambda () (call-with-values (lambda () (ys30dc@parse-import-spec* ys46df@imp*)) (lambda (ys4703@ys4700 ys4704@ys4702) (let ((ys4707@subst-labels ys4704@ys4702) (ys4708@subst-names ys4703@ys4700)) (let ((ys470b@rib (ys30de@make-top-rib ys4708@subst-names ys4707@subst-labels))) (let ((ys470e@wrap '#f)) (begin (set! ys470e@wrap (lambda (ys4789@x) (make-simple-struct 'stx '5 (list ys4789@x ys2df7@top-mark* (list ys470b@rib) '())))) (let ((ys470f@b* (map ys470e@wrap ys46e0@b*)) (ys4710@main-exp* (map ys470e@wrap ys46de@main-exp*)) (ys4711@rtc (ys30e0@make-collector)) (ys4712@vtc (ys30e0@make-collector))) (let ((ys471f@ys4718 ys30e2@inv-collector) (ys4720@ys471a ys30e4@vis-collector) (ys4721@ys471c ys4711@rtc) (ys4722@ys471e ys4712@vtc)) (let ((ys4727@swap (lambda () (begin (let ((ys4729@t (ys471f@ys4718))) (begin (ys471f@ys4718 ys4721@ys471c) (set! ys4721@ys471c ys4729@t))) (let ((ys472b@t (ys4720@ys471a))) (begin (ys4720@ys471a ys4722@ys471e) (set! ys4722@ys471e ys472b@t))))))) (dynamic-wind ys4727@swap (lambda () (call-with-values (lambda () (ys30e8@chi-library-internal ys470f@b* ys470b@rib ys46e1@top?)) (lambda (ys4739@ys472e ys473a@ys4730 ys473b@ys4732 ys473c@ys4734 ys473d@ys4736 ys473e@ys4738) (let ((ys4745@internal-exp* ys473e@ys4738) (ys4746@rhs* ys473d@ys4736) (ys4747@lex* ys473c@ys4734) (ys4748@mr ys473b@ys4732) (ys4749@r ys473a@ys4730) (ys474a@init* ys4739@ys472e)) (call-with-values (lambda () (ys30d6@parse-exports (append ys4710@main-exp* ys4745@internal-exp*))) (lambda (ys4755@ys4752 ys4756@ys4754) (let ((ys4759@exp-id* ys4756@ys4754) (ys475a@exp-name* ys4755@ys4752)) (begin (ys2e2f@seal-rib! ys470b@rib) (let ((ys475d@init* (ys3098@chi-expr* ys474a@init* ys4749@r ys4748@mr))) (let ((ys475f@rhs* (ys30ac@chi-rhs* ys4746@rhs* ys4749@r ys4748@mr))) (begin (ys2e31@unseal-rib! ys470b@rib) (let ((ys4761@loc* (map ys2dfd@gen-global ys4747@lex*)) (ys4762@export-subst (ys3144@make-export-subst ys475a@exp-name* ys4759@exp-id*))) (let ((ys4766@errstr '#f)) (begin (set! ys4766@errstr '"attempt to export mutated variable") (call-with-values (lambda () (ys3146@make-export-env/macros ys4747@lex* ys4761@loc* ys4749@r)) (lambda (ys476d@ys4768 ys476e@ys476a ys476f@ys476c) (let ((ys4773@macro* ys476f@ys476c) (ys4774@global* ys476e@ys476a) (ys4775@export-env ys476d@ys4768)) (begin (for-each (lambda (ys4779@s) (let ((ys477b@name (car ys4779@s)) (ys477c@label (cdr ys4779@s))) (let ((ys477f@p (assq ys477c@label ys4775@export-env))) (if ys477f@p (let ((ys4781@b (cdr ys477f@p))) (let ((ys4783@type (car ys4781@b))) (if (eq? ys4783@type 'mutable) (ys315a@syntax-violation 'export ys4766@errstr ys477b@name) (void)))) (void))))) ys4762@export-subst) (let ((ys4785@invoke-body (ys2dde@ys2d3e@build-library-letrec* '#f ys46dd@name ys4747@lex* ys4761@loc* ys475f@rhs* (if (null? ys475d@init*) (ys2dd9@ys2d34@build-void) (ys2dd8@ys2d32@build-sequence '#f ys475d@init*)))) (ys4786@invoke-definitions (map ys2dd5@ys2c91@build-global-define (map cdr ys4774@global*)))) (values (ys46e8@itc) (ys4711@rtc) (ys4712@vtc) (ys2dd8@ys2d32@build-sequence '#f (append ys4786@invoke-definitions (list ys4785@invoke-body))) ys4773@macro* ys4762@export-subst ys4775@export-env)))))))))))))))))))) ys4727@swap))))))))))) ys46f9@swap))))))) (set! ys4b85@ys30ec@library-body-expander ys30ec@library-body-expander) (set! ys30ee@core-library-expander (lambda (ys478b@e ys478c@verify-name) (call-with-values (lambda () (ys30da@parse-library ys478b@e)) (lambda (ys4797@ys4790 ys4798@ys4792 ys4799@ys4794 ys479a@ys4796) (let ((ys479f@b* ys479a@ys4796) (ys47a0@imp* ys4799@ys4794) (ys47a1@exp* ys4798@ys4792) (ys47a2@name* ys4797@ys4790)) (call-with-values (lambda () (ys30d8@parse-library-name ys47a2@name*)) (lambda (ys47ab@ys47a8 ys47ac@ys47aa) (let ((ys47af@ver ys47ac@ys47aa) (ys47b0@name ys47ab@ys47a8)) (begin (ys478c@verify-name ys47b0@name) (call-with-values (lambda () (ys30ec@library-body-expander ys47b0@name ys47a1@exp* ys47a0@imp* ys479f@b* '#f)) (lambda (ys47c1@ys47b4 ys47c2@ys47b6 ys47c3@ys47b8 ys47c4@ys47ba ys47c5@ys47bc ys47c6@ys47be ys47c7@ys47c0) (let ((ys47cf@export-env ys47c7@ys47c0) (ys47d0@export-subst ys47c6@ys47be) (ys47d1@visit-code ys47c5@ys47bc) (ys47d2@invoke-code ys47c4@ys47ba) (ys47d3@visit-req* ys47c3@ys47b8) (ys47d4@invoke-req* ys47c2@ys47b6) (ys47d5@imp* ys47c1@ys47b4)) (values ys47b0@name ys47af@ver ys47d5@imp* ys47d4@invoke-req* ys47d3@visit-req* ys47d2@invoke-code ys47d1@visit-code ys47d0@export-subst ys47cf@export-env))))))))))))) (set! ys4b86@ys30ee@core-library-expander ys30ee@core-library-expander) (set! ys30f0@parse-top-level-program (lambda (ys47dd@e*) (let ((ys47df@t ys47dd@e*)) (let ((ys47e1@ls/false (ys307a@syntax-dispatch ys47df@t '((any . each-any) . each-any)))) (if (and ys47e1@ls/false (apply (lambda (ys47e3@import ys47e4@imp* ys47e5@b*) (eq? (ys3160@syntax->datum ys47e3@import) 'import)) ys47e1@ls/false)) (apply (lambda (ys47e9@import ys47ea@imp* ys47eb@b*) (values ys47ea@imp* ys47eb@b*)) ys47e1@ls/false) (let ((ys47ef@t ys47df@t)) (let ((ys47f1@ls/false (ys307a@syntax-dispatch ys47ef@t '((any . any) . any)))) (if (and ys47f1@ls/false (apply (lambda (ys47f3@import ys47f4@x ys47f5@y) (eq? (ys3160@syntax->datum ys47f3@import) 'import)) ys47f1@ls/false)) (apply (lambda (ys47f9@import ys47fa@x ys47fb@y) (ys315a@syntax-violation 'expander '"invalid syntax of top-level program" (ys2e6d@syntax-car ys47dd@e*))) ys47f1@ls/false) (let ((ys47ff@t ys47ef@t)) (let ((ys4801@ls/false (ys307a@syntax-dispatch ys47ff@t '_))) (if ys4801@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) ys4801@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys47ff@t)))))))))))) (set! ys4b87@ys30f0@parse-top-level-program ys30f0@parse-top-level-program) (set! ys30f2@top-level-expander (lambda (ys4803@e*) (call-with-values (lambda () (ys30f0@parse-top-level-program ys4803@e*)) (lambda (ys4809@ys4806 ys480a@ys4808) (let ((ys480d@b* ys480a@ys4808) (ys480e@imp* ys4809@ys4806)) (call-with-values (lambda () (ys30ec@library-body-expander '() '() ys480e@imp* ys480d@b* '#t)) (lambda (ys481f@ys4812 ys4820@ys4814 ys4821@ys4816 ys4822@ys4818 ys4823@ys481a ys4824@ys481c ys4825@ys481e) (let ((ys482d@export-env ys4825@ys481e) (ys482e@export-subst ys4824@ys481c) (ys482f@visit-code ys4823@ys481a) (ys4830@invoke-code ys4822@ys4818) (ys4831@visit-req* ys4821@ys4816) (ys4832@invoke-req* ys4820@ys4814) (ys4833@imp* ys481f@ys4812)) (values ys4832@invoke-req* ys4830@invoke-code))))))))) (set! ys4b88@ys30f2@top-level-expander ys30f2@top-level-expander) (set! ys30f4@rp (ys29ba@ys2896@make-record-printer 'env (lambda (ys483b@x ys483c@p ys483d@wr) (display '"#<environment>" ys483c@p)))) (set! ys4b89@ys30f4@rp ys30f4@rp) (set! ys30fe@env? (lambda (ys4841@x) (and (simple-struct? ys4841@x) (eq? (simple-struct-name ys4841@x) 'env)))) (set! ys4b8a@ys30fe@env? ys30fe@env?) (set! ys3100@env-names (lambda (ys4843@x) (simple-struct-ref ys4843@x '0))) (set! ys4b8b@ys3100@env-names ys3100@env-names) (set! ys3102@set-env-names! (lambda (ys4845@x ys4846@val) (simple-struct-set! ys4845@x '0 ys4846@val))) (set! ys4b8c@ys3102@set-env-names! ys3102@set-env-names!) (set! ys3104@env-labels (lambda (ys4849@x) (simple-struct-ref ys4849@x '1))) (set! ys4b8d@ys3104@env-labels ys3104@env-labels) (set! ys3106@set-env-labels! (lambda (ys484b@x ys484c@val) (simple-struct-set! ys484b@x '1 ys484c@val))) (set! ys4b8e@ys3106@set-env-labels! ys3106@set-env-labels!) (set! ys3108@env-itc (lambda (ys484f@x) (simple-struct-ref ys484f@x '2))) (set! ys4b8f@ys3108@env-itc ys3108@env-itc) (set! ys310a@set-env-itc! (lambda (ys4851@x ys4852@val) (simple-struct-set! ys4851@x '2 ys4852@val))) (set! ys4b90@ys310a@set-env-itc! ys310a@set-env-itc!) (set! ys310c@dummy '3) (set! ys4b91@ys310c@dummy ys310c@dummy) (set! ys310e@rp (ys29ba@ys2896@make-record-printer 'interaction-env (lambda (ys4855@x ys4856@p ys4857@wr) (display '"#<environment>" ys4856@p)))) (set! ys4b92@ys310e@rp ys310e@rp) (set! ys3118@interaction-env? (lambda (ys485b@x) (and (simple-struct? ys485b@x) (eq? (simple-struct-name ys485b@x) 'interaction-env)))) (set! ys4b93@ys3118@interaction-env? ys3118@interaction-env?) (set! ys311a@interaction-env-rib (lambda (ys485d@x) (simple-struct-ref ys485d@x '0))) (set! ys4b94@ys311a@interaction-env-rib ys311a@interaction-env-rib) (set! ys311c@set-interaction-env-rib! (lambda (ys485f@x ys4860@val) (simple-struct-set! ys485f@x '0 ys4860@val))) (set! ys4b95@ys311c@set-interaction-env-rib! ys311c@set-interaction-env-rib!) (set! ys311e@interaction-env-r (lambda (ys4863@x) (simple-struct-ref ys4863@x '1))) (set! ys4b96@ys311e@interaction-env-r ys311e@interaction-env-r) (set! ys3120@set-interaction-env-r! (lambda (ys4865@x ys4866@val) (simple-struct-set! ys4865@x '1 ys4866@val))) (set! ys4b97@ys3120@set-interaction-env-r! ys3120@set-interaction-env-r!) (set! ys3122@interaction-env-locs (lambda (ys4869@x) (simple-struct-ref ys4869@x '2))) (set! ys4b98@ys3122@interaction-env-locs ys3122@interaction-env-locs) (set! ys3124@set-interaction-env-locs! (lambda (ys486b@x ys486c@val) (simple-struct-set! ys486b@x '2 ys486c@val))) (set! ys4b99@ys3124@set-interaction-env-locs! ys3124@set-interaction-env-locs!) (set! ys3126@dummy '3) (set! ys4b9a@ys3126@dummy ys3126@dummy) (set! ys3128@interaction-environment-symbols (lambda () (ys3130@environment-symbols (ys3168@interaction-environment)))) (set! ys4b9b@ys3128@interaction-environment-symbols ys3128@interaction-environment-symbols) (set! ys312a@environment-bindings (lambda (ys486f@e) (vector->list (vector-map (lambda (ys4871@name ys4872@label) (ys312c@parse-binding (cons ys4871@name (ys2c88@ys2ad5@imported-label->binding ys4872@label)))) (ys3100@env-names ys486f@e) (ys3104@env-labels ys486f@e))))) (set! ys4b9c@ys312a@environment-bindings ys312a@environment-bindings) (set! ys312c@parse-binding (lambda (ys4875@b) (cons (car ys4875@b) (let ((ys4877@t (cadr ys4875@b))) (if (memv ys4877@t '(core-prim global)) 'procedure (if (memv ys4877@t '(core-macro macro global-macro)) 'syntax (if (memv ys4877@t '($core-rtd)) 'record (if (eq? (car ys4875@b) (cadr ys4875@b)) 'syntax 'unknown)))))))) (set! ys4b9d@ys312c@parse-binding ys312c@parse-binding) (set! ys312e@environment? (lambda (ys4879@x) (or (ys30fe@env? ys4879@x) (ys3118@interaction-env? ys4879@x)))) (set! ys4b9e@ys312e@environment? ys312e@environment?) (set! ys3130@environment-symbols (lambda (ys487b@x) (if (ys30fe@env? ys487b@x) (vector->list (ys3100@env-names ys487b@x)) (if (ys3118@interaction-env? ys487b@x) (map values (ys2e11@rib-sym* (ys311a@interaction-env-rib ys487b@x))) (assertion-violation 'environment-symbols '"not an environment" ys487b@x))))) (set! ys4b9f@ys3130@environment-symbols ys3130@environment-symbols) (set! ys3132@environment (lambda ys487d@imp* (let ((ys487f@itc (ys30e0@make-collector))) (let ((ys4885@ys4882 ys30e6@imp-collector) (ys4886@ys4884 ys487f@itc)) (let ((ys4889@swap (lambda () (let ((ys488b@t (ys4885@ys4882))) (begin (ys4885@ys4882 ys4886@ys4884) (set! ys4886@ys4884 ys488b@t)))))) (dynamic-wind ys4889@swap (lambda () (call-with-values (lambda () (ys30dc@parse-import-spec* ys487d@imp*)) (lambda (ys4891@ys488e ys4892@ys4890) (let ((ys4895@subst-labels ys4892@ys4890) (ys4896@subst-names ys4891@ys488e)) (make-simple-struct 'env '4 (list ys4896@subst-names ys4895@subst-labels ys487f@itc)))))) ys4889@swap)))))) (set! ys4ba0@ys3132@environment ys3132@environment) (set! ys3134@null-environment (lambda (ys4899@n) (begin (if (not (eqv? ys4899@n '5)) (assertion-violation 'null-environment '"not 5" ys4899@n) (void)) (ys3132@environment '(psyntax null-environment-5))))) (set! ys4ba1@ys3134@null-environment ys3134@null-environment) (set! ys3136@scheme-report-environment (lambda (ys489b@n) (begin (if (not (eqv? ys489b@n '5)) (assertion-violation 'scheme-report-environment '"not 5" ys489b@n) (void)) (ys3132@environment '(psyntax scheme-report-environment-5))))) (set! ys4ba2@ys3136@scheme-report-environment ys3136@scheme-report-environment) (set! ys3138@expand (lambda (ys489d@x ys489e@env) (if (ys30fe@env? ys489e@env) (let ((ys48a1@rib (ys30de@make-top-rib (ys3100@env-names ys489e@env) (ys3104@env-labels ys489e@env)))) (let ((ys48a3@x (make-simple-struct 'stx '5 (list ys489d@x ys2df7@top-mark* (list ys48a1@rib) '()))) (ys48a4@itc (ys3108@env-itc ys489e@env)) (ys48a5@rtc (ys30e0@make-collector)) (ys48a6@vtc (ys30e0@make-collector))) (let ((ys48ab@x (let ((ys48bd@ys48ae ys316a@top-level-context) (ys48be@ys48b0 ys30e2@inv-collector) (ys48bf@ys48b2 ys30e4@vis-collector) (ys48c0@ys48b4 ys30e6@imp-collector) (ys48c1@ys48b6 '#f) (ys48c2@ys48b8 ys48a5@rtc) (ys48c3@ys48ba ys48a6@vtc) (ys48c4@ys48bc ys48a4@itc)) (let ((ys48cd@swap (lambda () (begin (let ((ys48cf@t (ys48bd@ys48ae))) (begin (ys48bd@ys48ae ys48c1@ys48b6) (set! ys48c1@ys48b6 ys48cf@t))) (let ((ys48d1@t (ys48be@ys48b0))) (begin (ys48be@ys48b0 ys48c2@ys48b8) (set! ys48c2@ys48b8 ys48d1@t))) (let ((ys48d3@t (ys48bf@ys48b2))) (begin (ys48bf@ys48b2 ys48c3@ys48ba) (set! ys48c3@ys48ba ys48d3@t))) (let ((ys48d5@t (ys48c0@ys48b4))) (begin (ys48c0@ys48b4 ys48c4@ys48bc) (set! ys48c4@ys48bc ys48d5@t))))))) (dynamic-wind ys48cd@swap (lambda () (ys309c@chi-expr ys48a3@x '() '())) ys48cd@swap))))) (begin (ys2e2f@seal-rib! ys48a1@rib) (values ys48ab@x (ys48a5@rtc)))))) (if (ys3118@interaction-env? ys489e@env) (let ((ys48d7@rib (ys311a@interaction-env-rib ys489e@env)) (ys48d8@r (ys311e@interaction-env-r ys489e@env)) (ys48d9@rtc (ys30e0@make-collector))) (let ((ys48dd@x (make-simple-struct 'stx '5 (list ys489d@x ys2df7@top-mark* (list ys48d7@rib) '())))) (call-with-values (lambda () (let ((ys48f3@ys48e4 ys316a@top-level-context) (ys48f4@ys48e6 ys30e2@inv-collector) (ys48f5@ys48e8 ys30e4@vis-collector) (ys48f6@ys48ea ys30e6@imp-collector) (ys48f7@ys48ec ys489e@env) (ys48f8@ys48ee ys48d9@rtc) (ys48f9@ys48f0 (ys30e0@make-collector)) (ys48fa@ys48f2 (ys30e0@make-collector))) (let ((ys4903@swap (lambda () (begin (let ((ys4905@t (ys48f3@ys48e4))) (begin (ys48f3@ys48e4 ys48f7@ys48ec) (set! ys48f7@ys48ec ys4905@t))) (let ((ys4907@t (ys48f4@ys48e6))) (begin (ys48f4@ys48e6 ys48f8@ys48ee) (set! ys48f8@ys48ee ys4907@t))) (let ((ys4909@t (ys48f5@ys48e8))) (begin (ys48f5@ys48e8 ys48f9@ys48f0) (set! ys48f9@ys48f0 ys4909@t))) (let ((ys490b@t (ys48f6@ys48ea))) (begin (ys48f6@ys48ea ys48fa@ys48f2) (set! ys48fa@ys48f2 ys490b@t))))))) (dynamic-wind ys4903@swap (lambda () (ys30ea@chi-interaction-expr ys48dd@x ys48d7@rib ys48d8@r)) ys4903@swap)))) (lambda (ys490d@ys48e0 ys490e@ys48e2) (let ((ys4911@r^ ys490e@ys48e2) (ys4912@e ys490d@ys48e0)) (begin (ys3120@set-interaction-env-r! ys489e@env ys4911@r^) (values ys4912@e (ys48d9@rtc)))))))) (assertion-violation 'expand '"not an environment" ys489e@env))))) (set! ys4ba3@ys3138@expand ys3138@expand) (set! ys313a@eval (lambda (ys4915@x ys4916@env) (begin (if (not (ys312e@environment? ys4916@env)) (error 'eval '"not an environment" ys4916@env) (void)) (call-with-values (lambda () (ys3138@expand ys4915@x ys4916@env)) (lambda (ys491d@ys491a ys491e@ys491c) (let ((ys4921@invoke-req* ys491e@ys491c) (ys4922@x ys491d@ys491a)) (begin (for-each ys2c89@ys2ad7@invoke-library ys4921@invoke-req*) (eval-core (ys2a13@ys29cb@expanded->core ys4922@x))))))))) (set! ys4ba4@ys313a@eval ys313a@eval) (set! ys313c@library-expander (lambda ys4993 (let ((ys4994 (length ys4993))) (if (= ys4994 '3) (apply (lambda (ys4925@x ys4926@filename ys4927@verify-name) (let ((ys492c@build-visit-code '#f) (ys492e@visit! '#f)) (begin (set! ys492c@build-visit-code (lambda (ys4981@macro*) (if (null? ys4981@macro*) (ys2dd9@ys2d34@build-void) (ys2dd8@ys2d32@build-sequence '#f (map (lambda (ys4983@x) (let ((ys4985@loc (car ys4983@x)) (ys4986@src (cddr ys4983@x))) (list 'set! ys4985@loc ys4986@src))) ys4981@macro*))))) (set! ys492e@visit! (lambda (ys4979@macro*) (for-each (lambda (ys497b@x) (let ((ys497d@loc (car ys497b@x)) (ys497e@proc (cadr ys497b@x))) (set-symbol-value! ys497d@loc ys497e@proc))) ys4979@macro*))) (call-with-values (lambda () (ys30ee@core-library-expander ys4925@x ys4927@verify-name)) (lambda (ys4941@ys4930 ys4942@ys4932 ys4943@ys4934 ys4944@ys4936 ys4945@ys4938 ys4946@ys493a ys4947@ys493c ys4948@ys493e ys4949@ys4940) (let ((ys4953@export-env ys4949@ys4940) (ys4954@export-subst ys4948@ys493e) (ys4955@macro* ys4947@ys493c) (ys4956@invoke-code ys4946@ys493a) (ys4957@vis* ys4945@ys4938) (ys4958@inv* ys4944@ys4936) (ys4959@imp* ys4943@ys4934) (ys495a@ver ys4942@ys4932) (ys495b@name ys4941@ys4930)) (let ((ys4965@id (gensym)) (ys4966@name ys495b@name) (ys4967@ver ys495a@ver) (ys4968@imp* (map ys2c8d@ys2adf@library-spec ys4959@imp*)) (ys4969@vis* (map ys2c8d@ys2adf@library-spec ys4957@vis*)) (ys496a@inv* (map ys2c8d@ys2adf@library-spec ys4958@inv*)) (ys496b@visit-proc (lambda () (ys492e@visit! ys4955@macro*))) (ys496c@invoke-proc (lambda () (eval-core (ys2a13@ys29cb@expanded->core ys4956@invoke-code)))) (ys496d@visit-code (ys492c@build-visit-code ys4955@macro*)) (ys496e@invoke-code ys4956@invoke-code)) (begin (ys2c87@ys2ad3@install-library ys4965@id ys4966@name ys4967@ver ys4968@imp* ys4969@vis* ys496a@inv* ys4954@export-subst ys4953@export-env ys496b@visit-proc ys496c@invoke-proc ys496d@visit-code ys496e@invoke-code '#t ys4926@filename) (values ys4965@id ys4966@name ys4967@ver ys4968@imp* ys4969@vis* ys496a@inv* ys496e@invoke-code ys496d@visit-code ys4954@export-subst ys4953@export-env))))))))) ys4993) (if (= ys4994 '2) (apply (lambda (ys4989@x ys498a@filename) (ys313c@library-expander ys4989@x ys498a@filename (lambda (ys498d@x) (values)))) ys4993) (if (= ys4994 '1) (apply (lambda (ys498f@x) (ys313c@library-expander ys498f@x '#f (lambda (ys4991@x) (values)))) ys4993) (error 'apply '"invalid arg count"))))))) (set! ys4ba5@ys313c@library-expander ys313c@library-expander) (set! ys313e@boot-library-expand (lambda (ys4995@x) (call-with-values (lambda () (ys313c@library-expander ys4995@x)) (lambda (ys49ab@ys4998 ys49ac@ys499a ys49ad@ys499c ys49ae@ys499e ys49af@ys49a0 ys49b0@ys49a2 ys49b1@ys49a4 ys49b2@ys49a6 ys49b3@ys49a8 ys49b4@ys49aa) (let ((ys49bf@export-env ys49b4@ys49aa) (ys49c0@export-subst ys49b3@ys49a8) (ys49c1@visit-code ys49b2@ys49a6) (ys49c2@invoke-code ys49b1@ys49a4) (ys49c3@inv* ys49b0@ys49a2) (ys49c4@vis* ys49af@ys49a0) (ys49c5@imp* ys49ae@ys499e) (ys49c6@ver ys49ad@ys499c) (ys49c7@name ys49ac@ys499a) (ys49c8@id ys49ab@ys4998)) (values ys49c7@name ys49c2@invoke-code ys49c0@export-subst ys49bf@export-env)))))) (set! ys4ba6@ys313e@boot-library-expand ys313e@boot-library-expand) (set! ys3140@rev-map-append (lambda (ys49d3@f ys49d4@ls ys49d5@ac) (if (null? ys49d4@ls) ys49d5@ac (ys3140@rev-map-append ys49d3@f (cdr ys49d4@ls) (cons (ys49d3@f (car ys49d4@ls)) ys49d5@ac))))) (set! ys4ba7@ys3140@rev-map-append ys3140@rev-map-append) (set! ys3142@build-exports (lambda (ys49d9@lex*+loc* ys49da@init*) (ys2dd8@ys2d32@build-sequence '#f (cons (ys2dd9@ys2d34@build-void) (ys3140@rev-map-append (lambda (ys49dd@x) (list 'set! (cdr ys49dd@x) (car ys49dd@x))) ys49d9@lex*+loc* ys49da@init*))))) (set! ys4ba8@ys3142@build-exports ys3142@build-exports) (set! ys3144@make-export-subst (lambda (ys49df@name* ys49e0@id*) (map (lambda (ys49e3@name ys49e4@id) (let ((ys49e7@label (ys2e89@id->label ys49e4@id))) (begin (if (not ys49e7@label) (ys315a@syntax-violation '#f '"cannot export unbound identifier" ys49e4@id) (void)) (cons ys49e3@name ys49e7@label)))) ys49df@name* ys49e0@id*))) (set! ys4ba9@ys3144@make-export-subst ys3144@make-export-subst) (set! ys3146@make-export-env/macros (lambda (ys49e9@lex* ys49ea@loc* ys49eb@r) (let ((ys49f0@lookup '#f)) (begin (set! ys49f0@lookup (lambda (ys4a0d@x) (let ys4a15@f ((ys4a0f@x ys4a0d@x) (ys4a10@lex* ys49e9@lex*) (ys4a11@loc* ys49ea@loc*)) (if (pair? ys4a10@lex*) (if (eq? ys4a0f@x (car ys4a10@lex*)) (car ys4a11@loc*) (ys4a15@f ys4a0f@x (cdr ys4a10@lex*) (cdr ys4a11@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let ys49f9@f ((ys49f1@r ys49eb@r) (ys49f2@env '()) (ys49f3@global* '()) (ys49f4@macro* '())) (if (null? ys49f1@r) (values ys49f2@env ys49f3@global* ys49f4@macro*) (let ((ys49fb@x (car ys49f1@r))) (let ((ys49fd@label (car ys49fb@x)) (ys49fe@b (cdr ys49fb@x))) (let ((ys4a01@t (ys2e8f@binding-type ys49fe@b))) (if (memv ys4a01@t '(lexical)) (let ((ys4a03@v (ys2e91@binding-value ys49fe@b))) (let ((ys4a05@loc (ys49f0@lookup (ys3004@lexical-var ys4a03@v))) (ys4a06@type (if (ys3006@lexical-mutable? ys4a03@v) 'mutable 'global))) (ys49f9@f (cdr ys49f1@r) (cons (cons* ys49fd@label ys4a06@type ys4a05@loc) ys49f2@env) (cons (cons (ys3004@lexical-var ys4a03@v) ys4a05@loc) ys49f3@global*) ys49f4@macro*))) (if (memv ys4a01@t '(local-macro)) (let ((ys4a09@loc (gensym))) (ys49f9@f (cdr ys49f1@r) (cons (cons* ys49fd@label 'global-macro ys4a09@loc) ys49f2@env) ys49f3@global* (cons (cons ys4a09@loc (ys2e91@binding-value ys49fe@b)) ys49f4@macro*))) (if (memv ys4a01@t '(local-macro!)) (let ((ys4a0b@loc (gensym))) (ys49f9@f (cdr ys49f1@r) (cons (cons* ys49fd@label 'global-macro! ys4a0b@loc) ys49f2@env) ys49f3@global* (cons (cons ys4a0b@loc (ys2e91@binding-value ys49fe@b)) ys49f4@macro*))) (if (memv ys4a01@t '($rtd $module)) (ys49f9@f (cdr ys49f1@r) (cons ys49fb@x ys49f2@env) ys49f3@global* ys49f4@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (ys2e8f@binding-type ys49fe@b) (ys2e91@binding-value ys49fe@b))))))))))))))) (set! ys4baa@ys3146@make-export-env/macros ys3146@make-export-env/macros) (set! ys3148@generate-temporaries (lambda (ys4a17@ls) (let ((ys4a19@t ys4a17@ls)) (let ((ys4a1b@ls/false (ys307a@syntax-dispatch ys4a19@t 'each-any))) (if ys4a1b@ls/false (apply (lambda (ys4a1d@ls) (map (lambda (ys4a1f@x) (make-simple-struct 'stx '5 (list (let ((ys4a21@x (ys3160@syntax->datum ys4a1f@x))) (if (or (symbol? ys4a21@x) (string? ys4a21@x)) (gensym ys4a21@x) (gensym 't))) ys2df7@top-mark* '() '()))) ys4a1d@ls)) ys4a1b@ls/false) (let ((ys4a23@t ys4a19@t)) (let ((ys4a25@ls/false (ys307a@syntax-dispatch ys4a23@t '_))) (if ys4a25@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) ys4a25@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys4a23@t))))))))) (set! ys4bab@ys3148@generate-temporaries ys3148@generate-temporaries) (set! ys314a@free-identifier=? (lambda (ys4a27@x ys4a28@y) (if (ys2e73@id? ys4a27@x) (if (ys2e73@id? ys4a28@y) (ys2e79@free-id=? ys4a27@x ys4a28@y) (assertion-violation 'free-identifier=? '"not an identifier" ys4a28@y)) (assertion-violation 'free-identifier=? '"not an identifier" ys4a27@x)))) (set! ys4bac@ys314a@free-identifier=? ys314a@free-identifier=?) (set! ys314c@bound-identifier=? (lambda (ys4a2b@x ys4a2c@y) (if (ys2e73@id? ys4a2b@x) (if (ys2e73@id? ys4a2c@y) (ys2e77@bound-id=? ys4a2b@x ys4a2c@y) (assertion-violation 'bound-identifier=? '"not an identifier" ys4a2c@y)) (assertion-violation 'bound-identifier=? '"not an identifier" ys4a2b@x)))) (set! ys4bad@ys314c@bound-identifier=? ys314c@bound-identifier=?) (set! ys314e@make-source-condition (lambda (ys4a2f@x) (let ((ys4a39@ys4a34 '#f) (ys4a3b@ys4a36 '#f) (ys4a3d@ys4a35 '#f) (ys4a40@ys4a33 '#f) (ys4a42@make-source-condition '#f) (ys4a44@ys4a31 '#f) (ys4a46@ys4a32 '#f) (ys4a48@source-condition? '#f) (ys4a4a@source-filename '#f) (ys4a4c@source-character '#f)) (begin (set! ys4a39@ys4a34 (make-record-type-descriptor '&source-information ys4e8f@ys4bd6@&condition-rtd 'ys4a37 '#f '#f '#((immutable file-name) (immutable character)))) (set! ys4a3b@ys4a36 '#f) (set! ys4a3d@ys4a35 (make-record-constructor-descriptor ys4a39@ys4a34 ys4e90@ys4bd8@&condition-rcd ys4a3b@ys4a36)) (set! ys4a40@ys4a33 (record-predicate ys4a39@ys4a34)) (set! ys4a42@make-source-condition (record-constructor ys4a3d@ys4a35)) (set! ys4a44@ys4a31 (record-accessor ys4a39@ys4a34 '0)) (set! ys4a46@ys4a32 (record-accessor ys4a39@ys4a34 '1)) (set! ys4a48@source-condition? (condition-predicate ys4a39@ys4a34)) (set! ys4a4a@source-filename (condition-accessor ys4a39@ys4a34 ys4a44@ys4a31)) (set! ys4a4c@source-character (condition-accessor ys4a39@ys4a34 ys4a46@ys4a32)) (if (pair? ys4a2f@x) (ys4a42@make-source-condition (car ys4a2f@x) (cdr ys4a2f@x)) (condition)))))) (set! ys4bae@ys314e@make-source-condition ys314e@make-source-condition) (set! ys3150@extract-position-condition (lambda (ys4a4d@x) (ys314e@make-source-condition (ys3152@expression-position ys4a4d@x)))) (set! ys4baf@ys3150@extract-position-condition ys3150@extract-position-condition) (set! ys3152@expression-position (lambda (ys4a4f@x) (and (ys2e3f@stx? ys4a4f@x) (let ((ys4a51@x (ys2e41@stx-expr ys4a4f@x))) (and (ys29b2@ys2886@annotation? ys4a51@x) (ys29b3@ys2888@annotation-source ys4a51@x)))))) (set! ys4bb0@ys3152@expression-position ys3152@expression-position) (set! ys3154@assertion-error (lambda (ys4a53@expr ys4a54@pos) (raise (condition (ys4ebf@ys4c9a@make-assertion-violation) (ys4ed1@ys4ccc@make-who-condition 'assert) (ys4e95@ys4c2d@make-message-condition '"assertion failed") (ys4ec7@ys4cb1@make-irritants-condition (list ys4a53@expr)) (ys314e@make-source-condition ys4a54@pos))))) (set! ys4bb1@ys3154@assertion-error ys3154@assertion-error) (set! ys3156@syntax-error (lambda (ys4a57@x . ys4a59@args) (begin (if (not (for-all string? ys4a59@args)) (assertion-violation 'syntax-error '"invalid argument" ys4a59@args) (void)) (raise (condition (ys4e95@ys4c2d@make-message-condition (if (null? ys4a59@args) '"invalid syntax" (apply string-append ys4a59@args))) (ys4ef3@ys4d28@make-syntax-violation (ys3160@syntax->datum ys4a57@x) '#f) (ys3150@extract-position-condition ys4a57@x)))))) (set! ys4bb2@ys3156@syntax-error ys3156@syntax-error) (set! ys3158@syntax-violation* (lambda (ys4a5b@who ys4a5c@msg ys4a5d@form ys4a5e@condition-object) (begin (if (not (string? ys4a5c@msg)) (assertion-violation 'syntax-violation '"message is not a string" ys4a5c@msg) (void)) (let ((ys4a63@who (if (or (string? ys4a5b@who) (symbol? ys4a5b@who)) ys4a5b@who (if (not ys4a5b@who) (let ((ys4a65@t ys4a5d@form)) (let ((ys4a67@ls/false (ys307a@syntax-dispatch ys4a65@t 'any))) (if (and ys4a67@ls/false (apply (lambda (ys4a69@id) (ys2e73@id? ys4a69@id)) ys4a67@ls/false)) (apply (lambda (ys4a6b@id) (ys3160@syntax->datum ys4a6b@id)) ys4a67@ls/false) (let ((ys4a6d@t ys4a65@t)) (let ((ys4a6f@ls/false (ys307a@syntax-dispatch ys4a6d@t '(any . any)))) (if (and ys4a6f@ls/false (apply (lambda (ys4a71@id ys4a72@rest) (ys2e73@id? ys4a71@id)) ys4a6f@ls/false)) (apply (lambda (ys4a75@id ys4a76@rest) (ys3160@syntax->datum ys4a75@id)) ys4a6f@ls/false) (let ((ys4a79@t ys4a6d@t)) (let ((ys4a7b@ls/false (ys307a@syntax-dispatch ys4a79@t '_))) (if ys4a7b@ls/false (apply (lambda () '#f) ys4a7b@ls/false) (ys315a@syntax-violation '#f '"invalid syntax" ys4a79@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" ys4a5b@who))))) (raise (condition (if ys4a63@who (ys4ed1@ys4ccc@make-who-condition ys4a63@who) (condition)) (ys4e95@ys4c2d@make-message-condition ys4a5c@msg) ys4a5e@condition-object (ys3150@extract-position-condition ys4a5d@form))))))) (set! ys4bb3@ys3158@syntax-violation* ys3158@syntax-violation*) (set! ys315a@syntax-violation (lambda ys4a8b (let ((ys4a8c (length ys4a8b))) (if (= ys4a8c '3) (apply (lambda (ys4a7d@who ys4a7e@msg ys4a7f@form) (ys315a@syntax-violation ys4a7d@who ys4a7e@msg ys4a7f@form '#f)) ys4a8b) (if (= ys4a8c '4) (apply (lambda (ys4a83@who ys4a84@msg ys4a85@form ys4a86@subform) (ys3158@syntax-violation* ys4a83@who ys4a84@msg ys4a85@form (ys4ef3@ys4d28@make-syntax-violation (ys3160@syntax->datum ys4a85@form) (ys3160@syntax->datum ys4a86@subform)))) ys4a8b) (error 'apply '"invalid arg count")))))) (set! ys4bb4@ys315a@syntax-violation ys315a@syntax-violation) (set! ys315c@identifier? (lambda (ys4a8d@x) (ys2e73@id? ys4a8d@x))) (set! ys4bb5@ys315c@identifier? ys315c@identifier?) (set! ys315e@datum->syntax (lambda (ys4a8f@id ys4a90@datum) (if (ys2e73@id? ys4a8f@id) (ys2e53@datum->stx ys4a8f@id ys4a90@datum) (assertion-violation 'datum->syntax '"not an identifier" ys4a8f@id)))) (set! ys4bb6@ys315e@datum->syntax ys315e@datum->syntax) (set! ys3160@syntax->datum (lambda (ys4a93@x) (ys2e87@stx->datum ys4a93@x))) (set! ys4bb7@ys3160@syntax->datum ys3160@syntax->datum) (set! ys3162@ungensym-all (lambda (ys4a95@code) (if (pair? ys4a95@code) (cons (ys3162@ungensym-all (car ys4a95@code)) (ys3162@ungensym-all (cdr ys4a95@code))) (if (symbol? ys4a95@code) (ungensym ys4a95@code) ys4a95@code)))) (set! ys4bb8@ys3162@ungensym-all ys3162@ungensym-all) (set! ys3164@compile-r6rs-top-level (lambda (ys4a97@x*) (call-with-values (lambda () (ys30f2@top-level-expander ys4a97@x*)) (lambda (ys4a9d@ys4a9a ys4a9e@ys4a9c) (let ((ys4aa1@invoke-code ys4a9e@ys4a9c) (ys4aa2@lib* ys4a9d@ys4a9a)) (lambda () (begin (for-each ys2c89@ys2ad7@invoke-library ys4aa2@lib*) (let ((ys4aa5@expanded (ys2a13@ys29cb@expanded->core ys4aa1@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (ys3162@ungensym-all ys4aa5@expanded)) (void)) (eval-core ys4aa5@expanded)))))))))) (set! ys4bb9@ys3164@compile-r6rs-top-level ys3164@compile-r6rs-top-level) (set! ys3166@pre-compile-r6rs-top-level (lambda (ys4aa7@x*) (call-with-values (lambda () (ys30f2@top-level-expander ys4aa7@x*)) (lambda (ys4aad@ys4aaa ys4aae@ys4aac) (let ((ys4ab1@invoke-code ys4aae@ys4aac) (ys4ab2@lib* ys4aad@ys4aaa)) (begin (for-each ys2c89@ys2ad7@invoke-library ys4ab2@lib*) (ys29bb@ys2898@compile-core (ys2a13@ys29cb@expanded->core ys4ab1@invoke-code)))))))) (set! ys4bba@ys3166@pre-compile-r6rs-top-level ys3166@pre-compile-r6rs-top-level) (set! ys3168@interaction-environment (let ((ys4ab5@the-env '#f)) (lambda () (or ys4ab5@the-env (let ((ys4ab7@lib (ys2c82@ys2ac9@find-library-by-name '(mosh interaction))) (ys4ab8@rib (ys2e27@make-empty-rib))) (begin (let ((ys4abb@subst (ys2c64@ys2a8d@library-subst ys4ab7@lib))) (begin (ys2e13@set-rib-sym*! ys4ab8@rib (map car ys4abb@subst)) (ys2e17@set-rib-mark**! ys4ab8@rib (map (lambda (ys4abd@x) ys2df7@top-mark*) ys4abb@subst)) (ys2e1b@set-rib-label*! ys4ab8@rib (map cdr ys4abb@subst)))) (let ((ys4abf@env (make-simple-struct 'interaction-env '4 (list ys4ab8@rib '() '())))) (begin (set! ys4ab5@the-env ys4abf@env) ys4abf@env)))))))) (set! ys4bbb@ys3168@interaction-environment ys3168@interaction-environment) (set! ys316a@top-level-context (ys29bd@ys289c@make-parameter '#f)) (set! ys4bbc@ys316a@top-level-context ys316a@top-level-context) (ys2c7f@ys2ac3@current-library-expander ys313c@library-expander))
(begin (set! ys4bcb@ys4bc6 (unspecified)) (set! ys4bcd@ys4bc8 (unspecified)) (set! ys4bcf@ys4bc7 (unspecified)) (set! ys4bd2@&condition? (unspecified)) (set! ys4bd4@make-&condition (unspecified)) (set! ys4bd6@&condition-rtd (unspecified)) (set! ys4bd8@&condition-rcd (unspecified)) (set! ys4c24@ys4c1f (unspecified)) (set! ys4c26@ys4c21 (unspecified)) (set! ys4c28@ys4c20 (unspecified)) (set! ys4c2b@p? (unspecified)) (set! ys4c2d@make-message-condition (unspecified)) (set! ys4c2f@ys4c1e (unspecified)) (set! ys4c31@message-condition? (unspecified)) (set! ys4c33@condition-message (unspecified)) (set! ys4c35@&message-rtd (unspecified)) (set! ys4c37@&message-rcd (unspecified)) (set! ys4c3d@ys4c38 (unspecified)) (set! ys4c3f@ys4c3a (unspecified)) (set! ys4c41@ys4c39 (unspecified)) (set! ys4c44@p? (unspecified)) (set! ys4c46@make-warning (unspecified)) (set! ys4c48@warning? (unspecified)) (set! ys4c4a@&warning-rtd (unspecified)) (set! ys4c4c@&warning-rcd (unspecified)) (set! ys4c52@ys4c4d (unspecified)) (set! ys4c54@ys4c4f (unspecified)) (set! ys4c56@ys4c4e (unspecified)) (set! ys4c59@p? (unspecified)) (set! ys4c5b@make-serious-condition (unspecified)) (set! ys4c5d@serious-condition? (unspecified)) (set! ys4c5f@&serious-rtd (unspecified)) (set! ys4c61@&serious-rcd (unspecified)) (set! ys4c67@ys4c62 (unspecified)) (set! ys4c69@ys4c64 (unspecified)) (set! ys4c6b@ys4c63 (unspecified)) (set! ys4c6e@p? (unspecified)) (set! ys4c70@make-error (unspecified)) (set! ys4c72@error? (unspecified)) (set! ys4c74@&error-rtd (unspecified)) (set! ys4c76@&error-rcd (unspecified)) (set! ys4c7c@ys4c77 (unspecified)) (set! ys4c7e@ys4c79 (unspecified)) (set! ys4c80@ys4c78 (unspecified)) (set! ys4c83@p? (unspecified)) (set! ys4c85@make-violation (unspecified)) (set! ys4c87@violation? (unspecified)) (set! ys4c89@&violation-rtd (unspecified)) (set! ys4c8b@&violation-rcd (unspecified)) (set! ys4c91@ys4c8c (unspecified)) (set! ys4c93@ys4c8e (unspecified)) (set! ys4c95@ys4c8d (unspecified)) (set! ys4c98@p? (unspecified)) (set! ys4c9a@make-assertion-violation (unspecified)) (set! ys4c9c@assertion-violation? (unspecified)) (set! ys4c9e@&assertion-rtd (unspecified)) (set! ys4ca0@&assertion-rcd (unspecified)) (set! ys4ca8@ys4ca3 (unspecified)) (set! ys4caa@ys4ca5 (unspecified)) (set! ys4cac@ys4ca4 (unspecified)) (set! ys4caf@p? (unspecified)) (set! ys4cb1@make-irritants-condition (unspecified)) (set! ys4cb3@ys4ca2 (unspecified)) (set! ys4cb5@irritants-condition? (unspecified)) (set! ys4cb7@condition-irritants (unspecified)) (set! ys4cb9@&irritants-rtd (unspecified)) (set! ys4cbb@&irritants-rcd (unspecified)) (set! ys4cc3@ys4cbe (unspecified)) (set! ys4cc5@ys4cc0 (unspecified)) (set! ys4cc7@ys4cbf (unspecified)) (set! ys4cca@p? (unspecified)) (set! ys4ccc@make-who-condition (unspecified)) (set! ys4cce@ys4cbd (unspecified)) (set! ys4cd0@who-condition? (unspecified)) (set! ys4cd2@condition-who (unspecified)) (set! ys4cd4@&who-rtd (unspecified)) (set! ys4cd6@&who-rcd (unspecified)) (set! ys4cdc@ys4cd7 (unspecified)) (set! ys4cde@ys4cd9 (unspecified)) (set! ys4ce0@ys4cd8 (unspecified)) (set! ys4ce3@p? (unspecified)) (set! ys4ce5@make-non-continuable-violation (unspecified)) (set! ys4ce7@non-continuable-violation? (unspecified)) (set! ys4ce9@&non-continuable-rtd (unspecified)) (set! ys4ceb@&non-continuable-rcd (unspecified)) (set! ys4cf1@ys4cec (unspecified)) (set! ys4cf3@ys4cee (unspecified)) (set! ys4cf5@ys4ced (unspecified)) (set! ys4cf8@p? (unspecified)) (set! ys4cfa@make-implementation-restriction-violation (unspecified)) (set! ys4cfc@implementation-restriction-violation? (unspecified)) (set! ys4cfe@&implementation-restriction-rtd (unspecified)) (set! ys4d00@&implementation-restriction-rcd (unspecified)) (set! ys4d06@ys4d01 (unspecified)) (set! ys4d08@ys4d03 (unspecified)) (set! ys4d0a@ys4d02 (unspecified)) (set! ys4d0d@p? (unspecified)) (set! ys4d0f@make-lexical-violation (unspecified)) (set! ys4d11@lexical-violation? (unspecified)) (set! ys4d13@&lexical-rtd (unspecified)) (set! ys4d15@&lexical-rcd (unspecified)) (set! ys4d1f@ys4d1a (unspecified)) (set! ys4d21@ys4d1c (unspecified)) (set! ys4d23@ys4d1b (unspecified)) (set! ys4d26@p? (unspecified)) (set! ys4d28@make-syntax-violation (unspecified)) (set! ys4d2a@ys4d17 (unspecified)) (set! ys4d2c@ys4d19 (unspecified)) (set! ys4d2e@syntax-violation? (unspecified)) (set! ys4d30@syntax-violation-form (unspecified)) (set! ys4d32@syntax-violation-subform (unspecified)) (set! ys4d34@&syntax-rtd (unspecified)) (set! ys4d36@&syntax-rcd (unspecified)) (set! ys4d3c@ys4d37 (unspecified)) (set! ys4d3e@ys4d39 (unspecified)) (set! ys4d40@ys4d38 (unspecified)) (set! ys4d43@p? (unspecified)) (set! ys4d45@make-undefined-violation (unspecified)) (set! ys4d47@undefined-violation? (unspecified)) (set! ys4d49@&undefined-rtd (unspecified)) (set! ys4d4b@&undefined-rcd (unspecified)) (set! ys4d51@ys4d4c (unspecified)) (set! ys4d53@ys4d4e (unspecified)) (set! ys4d55@ys4d4d (unspecified)) (set! ys4d58@p? (unspecified)) (set! ys4d5a@make-i/o-error (unspecified)) (set! ys4d5c@i/o-error? (unspecified)) (set! ys4d5e@&i/o-rtd (unspecified)) (set! ys4d60@&i/o-rcd (unspecified)) (set! ys4d66@ys4d61 (unspecified)) (set! ys4d68@ys4d63 (unspecified)) (set! ys4d6a@ys4d62 (unspecified)) (set! ys4d6d@p? (unspecified)) (set! ys4d6f@make-i/o-read-error (unspecified)) (set! ys4d71@i/o-read-error? (unspecified)) (set! ys4d73@&i/o-read-rtd (unspecified)) (set! ys4d75@&i/o-read-rcd (unspecified)) (set! ys4d7b@ys4d76 (unspecified)) (set! ys4d7d@ys4d78 (unspecified)) (set! ys4d7f@ys4d77 (unspecified)) (set! ys4d82@p? (unspecified)) (set! ys4d84@make-i/o-write-error (unspecified)) (set! ys4d86@i/o-write-error? (unspecified)) (set! ys4d88@&i/o-write-rtd (unspecified)) (set! ys4d8a@&i/o-write-rcd (unspecified)) (set! ys4d92@ys4d8d (unspecified)) (set! ys4d94@ys4d8f (unspecified)) (set! ys4d96@ys4d8e (unspecified)) (set! ys4d99@p? (unspecified)) (set! ys4d9b@make-i/o-invalid-position-error (unspecified)) (set! ys4d9d@ys4d8c (unspecified)) (set! ys4d9f@i/o-invalid-position-error? (unspecified)) (set! ys4da1@i/o-error-position (unspecified)) (set! ys4da3@&i/o-invalid-position-rtd (unspecified)) (set! ys4da5@&i/o-invalid-position-rcd (unspecified)) (set! ys4dad@ys4da8 (unspecified)) (set! ys4daf@ys4daa (unspecified)) (set! ys4db1@ys4da9 (unspecified)) (set! ys4db4@p? (unspecified)) (set! ys4db6@make-i/o-filename-error (unspecified)) (set! ys4db8@ys4da7 (unspecified)) (set! ys4dba@i/o-filename-error? (unspecified)) (set! ys4dbc@i/o-error-filename (unspecified)) (set! ys4dbe@&i/o-filename-rtd (unspecified)) (set! ys4dc0@&i/o-filename-rcd (unspecified)) (set! ys4dc6@ys4dc1 (unspecified)) (set! ys4dc8@ys4dc3 (unspecified)) (set! ys4dca@ys4dc2 (unspecified)) (set! ys4dcd@p? (unspecified)) (set! ys4dcf@make-i/o-file-protection-error (unspecified)) (set! ys4dd1@i/o-file-protection-error? (unspecified)) (set! ys4dd3@&i/o-file-protection-rtd (unspecified)) (set! ys4dd5@&i/o-file-protection-rcd (unspecified)) (set! ys4ddb@ys4dd6 (unspecified)) (set! ys4ddd@ys4dd8 (unspecified)) (set! ys4ddf@ys4dd7 (unspecified)) (set! ys4de2@p? (unspecified)) (set! ys4de4@make-i/o-file-is-read-only-error (unspecified)) (set! ys4de6@i/o-file-is-read-only-error? (unspecified)) (set! ys4de8@&i/o-file-is-read-only-rtd (unspecified)) (set! ys4dea@&i/o-file-is-read-only-rcd (unspecified)) (set! ys4df0@ys4deb (unspecified)) (set! ys4df2@ys4ded (unspecified)) (set! ys4df4@ys4dec (unspecified)) (set! ys4df7@p? (unspecified)) (set! ys4df9@make-i/o-file-already-exists-error (unspecified)) (set! ys4dfb@i/o-file-already-exists-error? (unspecified)) (set! ys4dfd@&i/o-file-already-exists-rtd (unspecified)) (set! ys4dff@&i/o-file-already-exists-rcd (unspecified)) (set! ys4e05@ys4e00 (unspecified)) (set! ys4e07@ys4e02 (unspecified)) (set! ys4e09@ys4e01 (unspecified)) (set! ys4e0c@p? (unspecified)) (set! ys4e0e@make-i/o-file-does-not-exist-error (unspecified)) (set! ys4e10@i/o-file-does-not-exist-error? (unspecified)) (set! ys4e12@&i/o-file-does-not-exist-rtd (unspecified)) (set! ys4e14@&i/o-file-does-not-exist-rcd (unspecified)) (set! ys4e1c@ys4e17 (unspecified)) (set! ys4e1e@ys4e19 (unspecified)) (set! ys4e20@ys4e18 (unspecified)) (set! ys4e23@p? (unspecified)) (set! ys4e25@make-i/o-port-error (unspecified)) (set! ys4e27@ys4e16 (unspecified)) (set! ys4e29@i/o-port-error? (unspecified)) (set! ys4e2b@i/o-error-port (unspecified)) (set! ys4e2d@&i/o-port-rtd (unspecified)) (set! ys4e2f@&i/o-port-rcd (unspecified)) (set! ys4e35@ys4e30 (unspecified)) (set! ys4e37@ys4e32 (unspecified)) (set! ys4e39@ys4e31 (unspecified)) (set! ys4e3c@p? (unspecified)) (set! ys4e3e@make-i/o-decoding-error (unspecified)) (set! ys4e40@i/o-decoding-error? (unspecified)) (set! ys4e42@&i/o-decoding-rtd (unspecified)) (set! ys4e44@&i/o-decoding-rcd (unspecified)) (set! ys4e4c@ys4e47 (unspecified)) (set! ys4e4e@ys4e49 (unspecified)) (set! ys4e50@ys4e48 (unspecified)) (set! ys4e53@p? (unspecified)) (set! ys4e55@make-i/o-encoding-error (unspecified)) (set! ys4e57@ys4e46 (unspecified)) (set! ys4e59@i/o-encoding-error? (unspecified)) (set! ys4e5b@i/o-encoding-error-char (unspecified)) (set! ys4e5d@&i/o-encoding-rtd (unspecified)) (set! ys4e5f@&i/o-encoding-rcd (unspecified)) (set! ys4e65@ys4e60 (unspecified)) (set! ys4e67@ys4e62 (unspecified)) (set! ys4e69@ys4e61 (unspecified)) (set! ys4e6c@p? (unspecified)) (set! ys4e6e@make-no-infinities-violation (unspecified)) (set! ys4e70@no-infinities-violation? (unspecified)) (set! ys4e72@&no-infinities-rtd (unspecified)) (set! ys4e74@&no-infinities-rcd (unspecified)) (set! ys4e7a@ys4e75 (unspecified)) (set! ys4e7c@ys4e77 (unspecified)) (set! ys4e7e@ys4e76 (unspecified)) (set! ys4e81@p? (unspecified)) (set! ys4e83@make-no-nans-violation (unspecified)) (set! ys4e85@no-nans-violation? (unspecified)) (set! ys4e87@&no-nans-rtd (unspecified)) (set! ys4e89@&no-nans-rcd (unspecified)) (set! ys4bcb@ys4bc6 (make-record-type-descriptor '&condition '#f 'ys4bc9 '#f '#f '#())) (set! ys4e8a@ys4bcb@ys4bc6 ys4bcb@ys4bc6) (set! ys4bcd@ys4bc8 '#f) (set! ys4e8b@ys4bcd@ys4bc8 ys4bcd@ys4bc8) (set! ys4bcf@ys4bc7 (make-record-constructor-descriptor ys4bcb@ys4bc6 '#f ys4bcd@ys4bc8)) (set! ys4e8c@ys4bcf@ys4bc7 ys4bcf@ys4bc7) (set! ys4bd2@&condition? (record-predicate ys4bcb@ys4bc6)) (set! ys4e8d@ys4bd2@&condition? ys4bd2@&condition?) (set! ys4bd4@make-&condition (record-constructor ys4bcf@ys4bc7)) (set! ys4e8e@ys4bd4@make-&condition ys4bd4@make-&condition) (set! ys4bd6@&condition-rtd ys4bcb@ys4bc6) (set! ys4e8f@ys4bd6@&condition-rtd ys4bd6@&condition-rtd) (set! ys4bd8@&condition-rcd ys4bcf@ys4bc7) (set! ys4e90@ys4bd8@&condition-rcd ys4bd8@&condition-rcd) (set! ys4c24@ys4c1f (make-record-type-descriptor '&message ys4bcb@ys4bc6 'ys4c22 '#f '#f '#((immutable message)))) (set! ys4e91@ys4c24@ys4c1f ys4c24@ys4c1f) (set! ys4c26@ys4c21 '#f) (set! ys4e92@ys4c26@ys4c21 ys4c26@ys4c21) (set! ys4c28@ys4c20 (make-record-constructor-descriptor ys4c24@ys4c1f ys4bcf@ys4bc7 ys4c26@ys4c21)) (set! ys4e93@ys4c28@ys4c20 ys4c28@ys4c20) (set! ys4c2b@p? (record-predicate ys4c24@ys4c1f)) (set! ys4e94@ys4c2b@p? ys4c2b@p?) (set! ys4c2d@make-message-condition (record-constructor ys4c28@ys4c20)) (set! ys4e95@ys4c2d@make-message-condition ys4c2d@make-message-condition) (set! ys4c2f@ys4c1e (record-accessor ys4c24@ys4c1f '0)) (set! ys4e96@ys4c2f@ys4c1e ys4c2f@ys4c1e) (set! ys4c31@message-condition? (condition-predicate ys4c24@ys4c1f)) (set! ys4e97@ys4c31@message-condition? ys4c31@message-condition?) (set! ys4c33@condition-message (condition-accessor ys4c24@ys4c1f ys4c2f@ys4c1e)) (set! ys4e98@ys4c33@condition-message ys4c33@condition-message) (set! ys4c35@&message-rtd ys4c24@ys4c1f) (set! ys4e99@ys4c35@&message-rtd ys4c35@&message-rtd) (set! ys4c37@&message-rcd ys4c28@ys4c20) (set! ys4e9a@ys4c37@&message-rcd ys4c37@&message-rcd) (set! ys4c3d@ys4c38 (make-record-type-descriptor '&warning ys4bcb@ys4bc6 'ys4c3b '#f '#f '#())) (set! ys4e9b@ys4c3d@ys4c38 ys4c3d@ys4c38) (set! ys4c3f@ys4c3a '#f) (set! ys4e9c@ys4c3f@ys4c3a ys4c3f@ys4c3a) (set! ys4c41@ys4c39 (make-record-constructor-descriptor ys4c3d@ys4c38 ys4bcf@ys4bc7 ys4c3f@ys4c3a)) (set! ys4e9d@ys4c41@ys4c39 ys4c41@ys4c39) (set! ys4c44@p? (record-predicate ys4c3d@ys4c38)) (set! ys4e9e@ys4c44@p? ys4c44@p?) (set! ys4c46@make-warning (record-constructor ys4c41@ys4c39)) (set! ys4e9f@ys4c46@make-warning ys4c46@make-warning) (set! ys4c48@warning? (condition-predicate ys4c3d@ys4c38)) (set! ys4ea0@ys4c48@warning? ys4c48@warning?) (set! ys4c4a@&warning-rtd ys4c3d@ys4c38) (set! ys4ea1@ys4c4a@&warning-rtd ys4c4a@&warning-rtd) (set! ys4c4c@&warning-rcd ys4c41@ys4c39) (set! ys4ea2@ys4c4c@&warning-rcd ys4c4c@&warning-rcd) (set! ys4c52@ys4c4d (make-record-type-descriptor '&serious ys4bcb@ys4bc6 'ys4c50 '#f '#f '#())) (set! ys4ea3@ys4c52@ys4c4d ys4c52@ys4c4d) (set! ys4c54@ys4c4f '#f) (set! ys4ea4@ys4c54@ys4c4f ys4c54@ys4c4f) (set! ys4c56@ys4c4e (make-record-constructor-descriptor ys4c52@ys4c4d ys4bcf@ys4bc7 ys4c54@ys4c4f)) (set! ys4ea5@ys4c56@ys4c4e ys4c56@ys4c4e) (set! ys4c59@p? (record-predicate ys4c52@ys4c4d)) (set! ys4ea6@ys4c59@p? ys4c59@p?) (set! ys4c5b@make-serious-condition (record-constructor ys4c56@ys4c4e)) (set! ys4ea7@ys4c5b@make-serious-condition ys4c5b@make-serious-condition) (set! ys4c5d@serious-condition? (condition-predicate ys4c52@ys4c4d)) (set! ys4ea8@ys4c5d@serious-condition? ys4c5d@serious-condition?) (set! ys4c5f@&serious-rtd ys4c52@ys4c4d) (set! ys4ea9@ys4c5f@&serious-rtd ys4c5f@&serious-rtd) (set! ys4c61@&serious-rcd ys4c56@ys4c4e) (set! ys4eaa@ys4c61@&serious-rcd ys4c61@&serious-rcd) (set! ys4c67@ys4c62 (make-record-type-descriptor '&error ys4c52@ys4c4d 'ys4c65 '#f '#f '#())) (set! ys4eab@ys4c67@ys4c62 ys4c67@ys4c62) (set! ys4c69@ys4c64 '#f) (set! ys4eac@ys4c69@ys4c64 ys4c69@ys4c64) (set! ys4c6b@ys4c63 (make-record-constructor-descriptor ys4c67@ys4c62 ys4c56@ys4c4e ys4c69@ys4c64)) (set! ys4ead@ys4c6b@ys4c63 ys4c6b@ys4c63) (set! ys4c6e@p? (record-predicate ys4c67@ys4c62)) (set! ys4eae@ys4c6e@p? ys4c6e@p?) (set! ys4c70@make-error (record-constructor ys4c6b@ys4c63)) (set! ys4eaf@ys4c70@make-error ys4c70@make-error) (set! ys4c72@error? (condition-predicate ys4c67@ys4c62)) (set! ys4eb0@ys4c72@error? ys4c72@error?) (set! ys4c74@&error-rtd ys4c67@ys4c62) (set! ys4eb1@ys4c74@&error-rtd ys4c74@&error-rtd) (set! ys4c76@&error-rcd ys4c6b@ys4c63) (set! ys4eb2@ys4c76@&error-rcd ys4c76@&error-rcd) (set! ys4c7c@ys4c77 (make-record-type-descriptor '&violation ys4c52@ys4c4d 'ys4c7a '#f '#f '#())) (set! ys4eb3@ys4c7c@ys4c77 ys4c7c@ys4c77) (set! ys4c7e@ys4c79 '#f) (set! ys4eb4@ys4c7e@ys4c79 ys4c7e@ys4c79) (set! ys4c80@ys4c78 (make-record-constructor-descriptor ys4c7c@ys4c77 ys4c56@ys4c4e ys4c7e@ys4c79)) (set! ys4eb5@ys4c80@ys4c78 ys4c80@ys4c78) (set! ys4c83@p? (record-predicate ys4c7c@ys4c77)) (set! ys4eb6@ys4c83@p? ys4c83@p?) (set! ys4c85@make-violation (record-constructor ys4c80@ys4c78)) (set! ys4eb7@ys4c85@make-violation ys4c85@make-violation) (set! ys4c87@violation? (condition-predicate ys4c7c@ys4c77)) (set! ys4eb8@ys4c87@violation? ys4c87@violation?) (set! ys4c89@&violation-rtd ys4c7c@ys4c77) (set! ys4eb9@ys4c89@&violation-rtd ys4c89@&violation-rtd) (set! ys4c8b@&violation-rcd ys4c80@ys4c78) (set! ys4eba@ys4c8b@&violation-rcd ys4c8b@&violation-rcd) (set! ys4c91@ys4c8c (make-record-type-descriptor '&assertion ys4c7c@ys4c77 'ys4c8f '#f '#f '#())) (set! ys4ebb@ys4c91@ys4c8c ys4c91@ys4c8c) (set! ys4c93@ys4c8e '#f) (set! ys4ebc@ys4c93@ys4c8e ys4c93@ys4c8e) (set! ys4c95@ys4c8d (make-record-constructor-descriptor ys4c91@ys4c8c ys4c80@ys4c78 ys4c93@ys4c8e)) (set! ys4ebd@ys4c95@ys4c8d ys4c95@ys4c8d) (set! ys4c98@p? (record-predicate ys4c91@ys4c8c)) (set! ys4ebe@ys4c98@p? ys4c98@p?) (set! ys4c9a@make-assertion-violation (record-constructor ys4c95@ys4c8d)) (set! ys4ebf@ys4c9a@make-assertion-violation ys4c9a@make-assertion-violation) (set! ys4c9c@assertion-violation? (condition-predicate ys4c91@ys4c8c)) (set! ys4ec0@ys4c9c@assertion-violation? ys4c9c@assertion-violation?) (set! ys4c9e@&assertion-rtd ys4c91@ys4c8c) (set! ys4ec1@ys4c9e@&assertion-rtd ys4c9e@&assertion-rtd) (set! ys4ca0@&assertion-rcd ys4c95@ys4c8d) (set! ys4ec2@ys4ca0@&assertion-rcd ys4ca0@&assertion-rcd) (set! ys4ca8@ys4ca3 (make-record-type-descriptor '&irritants ys4bcb@ys4bc6 'ys4ca6 '#f '#f '#((immutable irritants)))) (set! ys4ec3@ys4ca8@ys4ca3 ys4ca8@ys4ca3) (set! ys4caa@ys4ca5 '#f) (set! ys4ec4@ys4caa@ys4ca5 ys4caa@ys4ca5) (set! ys4cac@ys4ca4 (make-record-constructor-descriptor ys4ca8@ys4ca3 ys4bcf@ys4bc7 ys4caa@ys4ca5)) (set! ys4ec5@ys4cac@ys4ca4 ys4cac@ys4ca4) (set! ys4caf@p? (record-predicate ys4ca8@ys4ca3)) (set! ys4ec6@ys4caf@p? ys4caf@p?) (set! ys4cb1@make-irritants-condition (record-constructor ys4cac@ys4ca4)) (set! ys4ec7@ys4cb1@make-irritants-condition ys4cb1@make-irritants-condition) (set! ys4cb3@ys4ca2 (record-accessor ys4ca8@ys4ca3 '0)) (set! ys4ec8@ys4cb3@ys4ca2 ys4cb3@ys4ca2) (set! ys4cb5@irritants-condition? (condition-predicate ys4ca8@ys4ca3)) (set! ys4ec9@ys4cb5@irritants-condition? ys4cb5@irritants-condition?) (set! ys4cb7@condition-irritants (condition-accessor ys4ca8@ys4ca3 ys4cb3@ys4ca2)) (set! ys4eca@ys4cb7@condition-irritants ys4cb7@condition-irritants) (set! ys4cb9@&irritants-rtd ys4ca8@ys4ca3) (set! ys4ecb@ys4cb9@&irritants-rtd ys4cb9@&irritants-rtd) (set! ys4cbb@&irritants-rcd ys4cac@ys4ca4) (set! ys4ecc@ys4cbb@&irritants-rcd ys4cbb@&irritants-rcd) (set! ys4cc3@ys4cbe (make-record-type-descriptor '&who ys4bcb@ys4bc6 'ys4cc1 '#f '#f '#((immutable who)))) (set! ys4ecd@ys4cc3@ys4cbe ys4cc3@ys4cbe) (set! ys4cc5@ys4cc0 '#f) (set! ys4ece@ys4cc5@ys4cc0 ys4cc5@ys4cc0) (set! ys4cc7@ys4cbf (make-record-constructor-descriptor ys4cc3@ys4cbe ys4bcf@ys4bc7 ys4cc5@ys4cc0)) (set! ys4ecf@ys4cc7@ys4cbf ys4cc7@ys4cbf) (set! ys4cca@p? (record-predicate ys4cc3@ys4cbe)) (set! ys4ed0@ys4cca@p? ys4cca@p?) (set! ys4ccc@make-who-condition (record-constructor ys4cc7@ys4cbf)) (set! ys4ed1@ys4ccc@make-who-condition ys4ccc@make-who-condition) (set! ys4cce@ys4cbd (record-accessor ys4cc3@ys4cbe '0)) (set! ys4ed2@ys4cce@ys4cbd ys4cce@ys4cbd) (set! ys4cd0@who-condition? (condition-predicate ys4cc3@ys4cbe)) (set! ys4ed3@ys4cd0@who-condition? ys4cd0@who-condition?) (set! ys4cd2@condition-who (condition-accessor ys4cc3@ys4cbe ys4cce@ys4cbd)) (set! ys4ed4@ys4cd2@condition-who ys4cd2@condition-who) (set! ys4cd4@&who-rtd ys4cc3@ys4cbe) (set! ys4ed5@ys4cd4@&who-rtd ys4cd4@&who-rtd) (set! ys4cd6@&who-rcd ys4cc7@ys4cbf) (set! ys4ed6@ys4cd6@&who-rcd ys4cd6@&who-rcd) (set! ys4cdc@ys4cd7 (make-record-type-descriptor '&non-continuable ys4c7c@ys4c77 'ys4cda '#f '#f '#())) (set! ys4ed7@ys4cdc@ys4cd7 ys4cdc@ys4cd7) (set! ys4cde@ys4cd9 '#f) (set! ys4ed8@ys4cde@ys4cd9 ys4cde@ys4cd9) (set! ys4ce0@ys4cd8 (make-record-constructor-descriptor ys4cdc@ys4cd7 ys4c80@ys4c78 ys4cde@ys4cd9)) (set! ys4ed9@ys4ce0@ys4cd8 ys4ce0@ys4cd8) (set! ys4ce3@p? (record-predicate ys4cdc@ys4cd7)) (set! ys4eda@ys4ce3@p? ys4ce3@p?) (set! ys4ce5@make-non-continuable-violation (record-constructor ys4ce0@ys4cd8)) (set! ys4edb@ys4ce5@make-non-continuable-violation ys4ce5@make-non-continuable-violation) (set! ys4ce7@non-continuable-violation? (condition-predicate ys4cdc@ys4cd7)) (set! ys4edc@ys4ce7@non-continuable-violation? ys4ce7@non-continuable-violation?) (set! ys4ce9@&non-continuable-rtd ys4cdc@ys4cd7) (set! ys4edd@ys4ce9@&non-continuable-rtd ys4ce9@&non-continuable-rtd) (set! ys4ceb@&non-continuable-rcd ys4ce0@ys4cd8) (set! ys4ede@ys4ceb@&non-continuable-rcd ys4ceb@&non-continuable-rcd) (set! ys4cf1@ys4cec (make-record-type-descriptor '&implementation-restriction ys4c7c@ys4c77 'ys4cef '#f '#f '#())) (set! ys4edf@ys4cf1@ys4cec ys4cf1@ys4cec) (set! ys4cf3@ys4cee '#f) (set! ys4ee0@ys4cf3@ys4cee ys4cf3@ys4cee) (set! ys4cf5@ys4ced (make-record-constructor-descriptor ys4cf1@ys4cec ys4c80@ys4c78 ys4cf3@ys4cee)) (set! ys4ee1@ys4cf5@ys4ced ys4cf5@ys4ced) (set! ys4cf8@p? (record-predicate ys4cf1@ys4cec)) (set! ys4ee2@ys4cf8@p? ys4cf8@p?) (set! ys4cfa@make-implementation-restriction-violation (record-constructor ys4cf5@ys4ced)) (set! ys4ee3@ys4cfa@make-implementation-restriction-violation ys4cfa@make-implementation-restriction-violation) (set! ys4cfc@implementation-restriction-violation? (condition-predicate ys4cf1@ys4cec)) (set! ys4ee4@ys4cfc@implementation-restriction-violation? ys4cfc@implementation-restriction-violation?) (set! ys4cfe@&implementation-restriction-rtd ys4cf1@ys4cec) (set! ys4ee5@ys4cfe@&implementation-restriction-rtd ys4cfe@&implementation-restriction-rtd) (set! ys4d00@&implementation-restriction-rcd ys4cf5@ys4ced) (set! ys4ee6@ys4d00@&implementation-restriction-rcd ys4d00@&implementation-restriction-rcd) (set! ys4d06@ys4d01 (make-record-type-descriptor '&lexical ys4c7c@ys4c77 'ys4d04 '#f '#f '#())) (set! ys4ee7@ys4d06@ys4d01 ys4d06@ys4d01) (set! ys4d08@ys4d03 '#f) (set! ys4ee8@ys4d08@ys4d03 ys4d08@ys4d03) (set! ys4d0a@ys4d02 (make-record-constructor-descriptor ys4d06@ys4d01 ys4c80@ys4c78 ys4d08@ys4d03)) (set! ys4ee9@ys4d0a@ys4d02 ys4d0a@ys4d02) (set! ys4d0d@p? (record-predicate ys4d06@ys4d01)) (set! ys4eea@ys4d0d@p? ys4d0d@p?) (set! ys4d0f@make-lexical-violation (record-constructor ys4d0a@ys4d02)) (set! ys4eeb@ys4d0f@make-lexical-violation ys4d0f@make-lexical-violation) (set! ys4d11@lexical-violation? (condition-predicate ys4d06@ys4d01)) (set! ys4eec@ys4d11@lexical-violation? ys4d11@lexical-violation?) (set! ys4d13@&lexical-rtd ys4d06@ys4d01) (set! ys4eed@ys4d13@&lexical-rtd ys4d13@&lexical-rtd) (set! ys4d15@&lexical-rcd ys4d0a@ys4d02) (set! ys4eee@ys4d15@&lexical-rcd ys4d15@&lexical-rcd) (set! ys4d1f@ys4d1a (make-record-type-descriptor '&syntax ys4c7c@ys4c77 'ys4d1d '#f '#f '#((immutable form) (immutable subform)))) (set! ys4eef@ys4d1f@ys4d1a ys4d1f@ys4d1a) (set! ys4d21@ys4d1c '#f) (set! ys4ef0@ys4d21@ys4d1c ys4d21@ys4d1c) (set! ys4d23@ys4d1b (make-record-constructor-descriptor ys4d1f@ys4d1a ys4c80@ys4c78 ys4d21@ys4d1c)) (set! ys4ef1@ys4d23@ys4d1b ys4d23@ys4d1b) (set! ys4d26@p? (record-predicate ys4d1f@ys4d1a)) (set! ys4ef2@ys4d26@p? ys4d26@p?) (set! ys4d28@make-syntax-violation (record-constructor ys4d23@ys4d1b)) (set! ys4ef3@ys4d28@make-syntax-violation ys4d28@make-syntax-violation) (set! ys4d2a@ys4d17 (record-accessor ys4d1f@ys4d1a '0)) (set! ys4ef4@ys4d2a@ys4d17 ys4d2a@ys4d17) (set! ys4d2c@ys4d19 (record-accessor ys4d1f@ys4d1a '1)) (set! ys4ef5@ys4d2c@ys4d19 ys4d2c@ys4d19) (set! ys4d2e@syntax-violation? (condition-predicate ys4d1f@ys4d1a)) (set! ys4ef6@ys4d2e@syntax-violation? ys4d2e@syntax-violation?) (set! ys4d30@syntax-violation-form (condition-accessor ys4d1f@ys4d1a ys4d2a@ys4d17)) (set! ys4ef7@ys4d30@syntax-violation-form ys4d30@syntax-violation-form) (set! ys4d32@syntax-violation-subform (condition-accessor ys4d1f@ys4d1a ys4d2c@ys4d19)) (set! ys4ef8@ys4d32@syntax-violation-subform ys4d32@syntax-violation-subform) (set! ys4d34@&syntax-rtd ys4d1f@ys4d1a) (set! ys4ef9@ys4d34@&syntax-rtd ys4d34@&syntax-rtd) (set! ys4d36@&syntax-rcd ys4d23@ys4d1b) (set! ys4efa@ys4d36@&syntax-rcd ys4d36@&syntax-rcd) (set! ys4d3c@ys4d37 (make-record-type-descriptor '&undefined ys4c7c@ys4c77 'ys4d3a '#f '#f '#())) (set! ys4efb@ys4d3c@ys4d37 ys4d3c@ys4d37) (set! ys4d3e@ys4d39 '#f) (set! ys4efc@ys4d3e@ys4d39 ys4d3e@ys4d39) (set! ys4d40@ys4d38 (make-record-constructor-descriptor ys4d3c@ys4d37 ys4c80@ys4c78 ys4d3e@ys4d39)) (set! ys4efd@ys4d40@ys4d38 ys4d40@ys4d38) (set! ys4d43@p? (record-predicate ys4d3c@ys4d37)) (set! ys4efe@ys4d43@p? ys4d43@p?) (set! ys4d45@make-undefined-violation (record-constructor ys4d40@ys4d38)) (set! ys4eff@ys4d45@make-undefined-violation ys4d45@make-undefined-violation) (set! ys4d47@undefined-violation? (condition-predicate ys4d3c@ys4d37)) (set! ys4f00@ys4d47@undefined-violation? ys4d47@undefined-violation?) (set! ys4d49@&undefined-rtd ys4d3c@ys4d37) (set! ys4f01@ys4d49@&undefined-rtd ys4d49@&undefined-rtd) (set! ys4d4b@&undefined-rcd ys4d40@ys4d38) (set! ys4f02@ys4d4b@&undefined-rcd ys4d4b@&undefined-rcd) (set! ys4d51@ys4d4c (make-record-type-descriptor '&i/o ys4c67@ys4c62 'ys4d4f '#f '#f '#())) (set! ys4f03@ys4d51@ys4d4c ys4d51@ys4d4c) (set! ys4d53@ys4d4e '#f) (set! ys4f04@ys4d53@ys4d4e ys4d53@ys4d4e) (set! ys4d55@ys4d4d (make-record-constructor-descriptor ys4d51@ys4d4c ys4c6b@ys4c63 ys4d53@ys4d4e)) (set! ys4f05@ys4d55@ys4d4d ys4d55@ys4d4d) (set! ys4d58@p? (record-predicate ys4d51@ys4d4c)) (set! ys4f06@ys4d58@p? ys4d58@p?) (set! ys4d5a@make-i/o-error (record-constructor ys4d55@ys4d4d)) (set! ys4f07@ys4d5a@make-i/o-error ys4d5a@make-i/o-error) (set! ys4d5c@i/o-error? (condition-predicate ys4d51@ys4d4c)) (set! ys4f08@ys4d5c@i/o-error? ys4d5c@i/o-error?) (set! ys4d5e@&i/o-rtd ys4d51@ys4d4c) (set! ys4f09@ys4d5e@&i/o-rtd ys4d5e@&i/o-rtd) (set! ys4d60@&i/o-rcd ys4d55@ys4d4d) (set! ys4f0a@ys4d60@&i/o-rcd ys4d60@&i/o-rcd) (set! ys4d66@ys4d61 (make-record-type-descriptor '&i/o-read ys4d51@ys4d4c 'ys4d64 '#f '#f '#())) (set! ys4f0b@ys4d66@ys4d61 ys4d66@ys4d61) (set! ys4d68@ys4d63 '#f) (set! ys4f0c@ys4d68@ys4d63 ys4d68@ys4d63) (set! ys4d6a@ys4d62 (make-record-constructor-descriptor ys4d66@ys4d61 ys4d55@ys4d4d ys4d68@ys4d63)) (set! ys4f0d@ys4d6a@ys4d62 ys4d6a@ys4d62) (set! ys4d6d@p? (record-predicate ys4d66@ys4d61)) (set! ys4f0e@ys4d6d@p? ys4d6d@p?) (set! ys4d6f@make-i/o-read-error (record-constructor ys4d6a@ys4d62)) (set! ys4f0f@ys4d6f@make-i/o-read-error ys4d6f@make-i/o-read-error) (set! ys4d71@i/o-read-error? (condition-predicate ys4d66@ys4d61)) (set! ys4f10@ys4d71@i/o-read-error? ys4d71@i/o-read-error?) (set! ys4d73@&i/o-read-rtd ys4d66@ys4d61) (set! ys4f11@ys4d73@&i/o-read-rtd ys4d73@&i/o-read-rtd) (set! ys4d75@&i/o-read-rcd ys4d6a@ys4d62) (set! ys4f12@ys4d75@&i/o-read-rcd ys4d75@&i/o-read-rcd) (set! ys4d7b@ys4d76 (make-record-type-descriptor '&i/o-write ys4d51@ys4d4c 'ys4d79 '#f '#f '#())) (set! ys4f13@ys4d7b@ys4d76 ys4d7b@ys4d76) (set! ys4d7d@ys4d78 '#f) (set! ys4f14@ys4d7d@ys4d78 ys4d7d@ys4d78) (set! ys4d7f@ys4d77 (make-record-constructor-descriptor ys4d7b@ys4d76 ys4d55@ys4d4d ys4d7d@ys4d78)) (set! ys4f15@ys4d7f@ys4d77 ys4d7f@ys4d77) (set! ys4d82@p? (record-predicate ys4d7b@ys4d76)) (set! ys4f16@ys4d82@p? ys4d82@p?) (set! ys4d84@make-i/o-write-error (record-constructor ys4d7f@ys4d77)) (set! ys4f17@ys4d84@make-i/o-write-error ys4d84@make-i/o-write-error) (set! ys4d86@i/o-write-error? (condition-predicate ys4d7b@ys4d76)) (set! ys4f18@ys4d86@i/o-write-error? ys4d86@i/o-write-error?) (set! ys4d88@&i/o-write-rtd ys4d7b@ys4d76) (set! ys4f19@ys4d88@&i/o-write-rtd ys4d88@&i/o-write-rtd) (set! ys4d8a@&i/o-write-rcd ys4d7f@ys4d77) (set! ys4f1a@ys4d8a@&i/o-write-rcd ys4d8a@&i/o-write-rcd) (set! ys4d92@ys4d8d (make-record-type-descriptor '&i/o-invalid-position ys4d51@ys4d4c 'ys4d90 '#f '#f '#((immutable position)))) (set! ys4f1b@ys4d92@ys4d8d ys4d92@ys4d8d) (set! ys4d94@ys4d8f '#f) (set! ys4f1c@ys4d94@ys4d8f ys4d94@ys4d8f) (set! ys4d96@ys4d8e (make-record-constructor-descriptor ys4d92@ys4d8d ys4d55@ys4d4d ys4d94@ys4d8f)) (set! ys4f1d@ys4d96@ys4d8e ys4d96@ys4d8e) (set! ys4d99@p? (record-predicate ys4d92@ys4d8d)) (set! ys4f1e@ys4d99@p? ys4d99@p?) (set! ys4d9b@make-i/o-invalid-position-error (record-constructor ys4d96@ys4d8e)) (set! ys4f1f@ys4d9b@make-i/o-invalid-position-error ys4d9b@make-i/o-invalid-position-error) (set! ys4d9d@ys4d8c (record-accessor ys4d92@ys4d8d '0)) (set! ys4f20@ys4d9d@ys4d8c ys4d9d@ys4d8c) (set! ys4d9f@i/o-invalid-position-error? (condition-predicate ys4d92@ys4d8d)) (set! ys4f21@ys4d9f@i/o-invalid-position-error? ys4d9f@i/o-invalid-position-error?) (set! ys4da1@i/o-error-position (condition-accessor ys4d92@ys4d8d ys4d9d@ys4d8c)) (set! ys4f22@ys4da1@i/o-error-position ys4da1@i/o-error-position) (set! ys4da3@&i/o-invalid-position-rtd ys4d92@ys4d8d) (set! ys4f23@ys4da3@&i/o-invalid-position-rtd ys4da3@&i/o-invalid-position-rtd) (set! ys4da5@&i/o-invalid-position-rcd ys4d96@ys4d8e) (set! ys4f24@ys4da5@&i/o-invalid-position-rcd ys4da5@&i/o-invalid-position-rcd) (set! ys4dad@ys4da8 (make-record-type-descriptor '&i/o-filename ys4d51@ys4d4c 'ys4dab '#f '#f '#((immutable filename)))) (set! ys4f25@ys4dad@ys4da8 ys4dad@ys4da8) (set! ys4daf@ys4daa '#f) (set! ys4f26@ys4daf@ys4daa ys4daf@ys4daa) (set! ys4db1@ys4da9 (make-record-constructor-descriptor ys4dad@ys4da8 ys4d55@ys4d4d ys4daf@ys4daa)) (set! ys4f27@ys4db1@ys4da9 ys4db1@ys4da9) (set! ys4db4@p? (record-predicate ys4dad@ys4da8)) (set! ys4f28@ys4db4@p? ys4db4@p?) (set! ys4db6@make-i/o-filename-error (record-constructor ys4db1@ys4da9)) (set! ys4f29@ys4db6@make-i/o-filename-error ys4db6@make-i/o-filename-error) (set! ys4db8@ys4da7 (record-accessor ys4dad@ys4da8 '0)) (set! ys4f2a@ys4db8@ys4da7 ys4db8@ys4da7) (set! ys4dba@i/o-filename-error? (condition-predicate ys4dad@ys4da8)) (set! ys4f2b@ys4dba@i/o-filename-error? ys4dba@i/o-filename-error?) (set! ys4dbc@i/o-error-filename (condition-accessor ys4dad@ys4da8 ys4db8@ys4da7)) (set! ys4f2c@ys4dbc@i/o-error-filename ys4dbc@i/o-error-filename) (set! ys4dbe@&i/o-filename-rtd ys4dad@ys4da8) (set! ys4f2d@ys4dbe@&i/o-filename-rtd ys4dbe@&i/o-filename-rtd) (set! ys4dc0@&i/o-filename-rcd ys4db1@ys4da9) (set! ys4f2e@ys4dc0@&i/o-filename-rcd ys4dc0@&i/o-filename-rcd) (set! ys4dc6@ys4dc1 (make-record-type-descriptor '&i/o-file-protection ys4dad@ys4da8 'ys4dc4 '#f '#f '#())) (set! ys4f2f@ys4dc6@ys4dc1 ys4dc6@ys4dc1) (set! ys4dc8@ys4dc3 '#f) (set! ys4f30@ys4dc8@ys4dc3 ys4dc8@ys4dc3) (set! ys4dca@ys4dc2 (make-record-constructor-descriptor ys4dc6@ys4dc1 ys4db1@ys4da9 ys4dc8@ys4dc3)) (set! ys4f31@ys4dca@ys4dc2 ys4dca@ys4dc2) (set! ys4dcd@p? (record-predicate ys4dc6@ys4dc1)) (set! ys4f32@ys4dcd@p? ys4dcd@p?) (set! ys4dcf@make-i/o-file-protection-error (record-constructor ys4dca@ys4dc2)) (set! ys4f33@ys4dcf@make-i/o-file-protection-error ys4dcf@make-i/o-file-protection-error) (set! ys4dd1@i/o-file-protection-error? (condition-predicate ys4dc6@ys4dc1)) (set! ys4f34@ys4dd1@i/o-file-protection-error? ys4dd1@i/o-file-protection-error?) (set! ys4dd3@&i/o-file-protection-rtd ys4dc6@ys4dc1) (set! ys4f35@ys4dd3@&i/o-file-protection-rtd ys4dd3@&i/o-file-protection-rtd) (set! ys4dd5@&i/o-file-protection-rcd ys4dca@ys4dc2) (set! ys4f36@ys4dd5@&i/o-file-protection-rcd ys4dd5@&i/o-file-protection-rcd) (set! ys4ddb@ys4dd6 (make-record-type-descriptor '&i/o-file-is-read-only ys4dc6@ys4dc1 'ys4dd9 '#f '#f '#())) (set! ys4f37@ys4ddb@ys4dd6 ys4ddb@ys4dd6) (set! ys4ddd@ys4dd8 '#f) (set! ys4f38@ys4ddd@ys4dd8 ys4ddd@ys4dd8) (set! ys4ddf@ys4dd7 (make-record-constructor-descriptor ys4ddb@ys4dd6 ys4dca@ys4dc2 ys4ddd@ys4dd8)) (set! ys4f39@ys4ddf@ys4dd7 ys4ddf@ys4dd7) (set! ys4de2@p? (record-predicate ys4ddb@ys4dd6)) (set! ys4f3a@ys4de2@p? ys4de2@p?) (set! ys4de4@make-i/o-file-is-read-only-error (record-constructor ys4ddf@ys4dd7)) (set! ys4f3b@ys4de4@make-i/o-file-is-read-only-error ys4de4@make-i/o-file-is-read-only-error) (set! ys4de6@i/o-file-is-read-only-error? (condition-predicate ys4ddb@ys4dd6)) (set! ys4f3c@ys4de6@i/o-file-is-read-only-error? ys4de6@i/o-file-is-read-only-error?) (set! ys4de8@&i/o-file-is-read-only-rtd ys4ddb@ys4dd6) (set! ys4f3d@ys4de8@&i/o-file-is-read-only-rtd ys4de8@&i/o-file-is-read-only-rtd) (set! ys4dea@&i/o-file-is-read-only-rcd ys4ddf@ys4dd7) (set! ys4f3e@ys4dea@&i/o-file-is-read-only-rcd ys4dea@&i/o-file-is-read-only-rcd) (set! ys4df0@ys4deb (make-record-type-descriptor '&i/o-file-already-exists ys4dad@ys4da8 'ys4dee '#f '#f '#())) (set! ys4f3f@ys4df0@ys4deb ys4df0@ys4deb) (set! ys4df2@ys4ded '#f) (set! ys4f40@ys4df2@ys4ded ys4df2@ys4ded) (set! ys4df4@ys4dec (make-record-constructor-descriptor ys4df0@ys4deb ys4db1@ys4da9 ys4df2@ys4ded)) (set! ys4f41@ys4df4@ys4dec ys4df4@ys4dec) (set! ys4df7@p? (record-predicate ys4df0@ys4deb)) (set! ys4f42@ys4df7@p? ys4df7@p?) (set! ys4df9@make-i/o-file-already-exists-error (record-constructor ys4df4@ys4dec)) (set! ys4f43@ys4df9@make-i/o-file-already-exists-error ys4df9@make-i/o-file-already-exists-error) (set! ys4dfb@i/o-file-already-exists-error? (condition-predicate ys4df0@ys4deb)) (set! ys4f44@ys4dfb@i/o-file-already-exists-error? ys4dfb@i/o-file-already-exists-error?) (set! ys4dfd@&i/o-file-already-exists-rtd ys4df0@ys4deb) (set! ys4f45@ys4dfd@&i/o-file-already-exists-rtd ys4dfd@&i/o-file-already-exists-rtd) (set! ys4dff@&i/o-file-already-exists-rcd ys4df4@ys4dec) (set! ys4f46@ys4dff@&i/o-file-already-exists-rcd ys4dff@&i/o-file-already-exists-rcd) (set! ys4e05@ys4e00 (make-record-type-descriptor '&i/o-file-does-not-exist ys4dad@ys4da8 'ys4e03 '#f '#f '#())) (set! ys4f47@ys4e05@ys4e00 ys4e05@ys4e00) (set! ys4e07@ys4e02 '#f) (set! ys4f48@ys4e07@ys4e02 ys4e07@ys4e02) (set! ys4e09@ys4e01 (make-record-constructor-descriptor ys4e05@ys4e00 ys4db1@ys4da9 ys4e07@ys4e02)) (set! ys4f49@ys4e09@ys4e01 ys4e09@ys4e01) (set! ys4e0c@p? (record-predicate ys4e05@ys4e00)) (set! ys4f4a@ys4e0c@p? ys4e0c@p?) (set! ys4e0e@make-i/o-file-does-not-exist-error (record-constructor ys4e09@ys4e01)) (set! ys4f4b@ys4e0e@make-i/o-file-does-not-exist-error ys4e0e@make-i/o-file-does-not-exist-error) (set! ys4e10@i/o-file-does-not-exist-error? (condition-predicate ys4e05@ys4e00)) (set! ys4f4c@ys4e10@i/o-file-does-not-exist-error? ys4e10@i/o-file-does-not-exist-error?) (set! ys4e12@&i/o-file-does-not-exist-rtd ys4e05@ys4e00) (set! ys4f4d@ys4e12@&i/o-file-does-not-exist-rtd ys4e12@&i/o-file-does-not-exist-rtd) (set! ys4e14@&i/o-file-does-not-exist-rcd ys4e09@ys4e01) (set! ys4f4e@ys4e14@&i/o-file-does-not-exist-rcd ys4e14@&i/o-file-does-not-exist-rcd) (set! ys4e1c@ys4e17 (make-record-type-descriptor '&i/o-port ys4d51@ys4d4c 'ys4e1a '#f '#f '#((immutable port)))) (set! ys4f4f@ys4e1c@ys4e17 ys4e1c@ys4e17) (set! ys4e1e@ys4e19 '#f) (set! ys4f50@ys4e1e@ys4e19 ys4e1e@ys4e19) (set! ys4e20@ys4e18 (make-record-constructor-descriptor ys4e1c@ys4e17 ys4d55@ys4d4d ys4e1e@ys4e19)) (set! ys4f51@ys4e20@ys4e18 ys4e20@ys4e18) (set! ys4e23@p? (record-predicate ys4e1c@ys4e17)) (set! ys4f52@ys4e23@p? ys4e23@p?) (set! ys4e25@make-i/o-port-error (record-constructor ys4e20@ys4e18)) (set! ys4f53@ys4e25@make-i/o-port-error ys4e25@make-i/o-port-error) (set! ys4e27@ys4e16 (record-accessor ys4e1c@ys4e17 '0)) (set! ys4f54@ys4e27@ys4e16 ys4e27@ys4e16) (set! ys4e29@i/o-port-error? (condition-predicate ys4e1c@ys4e17)) (set! ys4f55@ys4e29@i/o-port-error? ys4e29@i/o-port-error?) (set! ys4e2b@i/o-error-port (condition-accessor ys4e1c@ys4e17 ys4e27@ys4e16)) (set! ys4f56@ys4e2b@i/o-error-port ys4e2b@i/o-error-port) (set! ys4e2d@&i/o-port-rtd ys4e1c@ys4e17) (set! ys4f57@ys4e2d@&i/o-port-rtd ys4e2d@&i/o-port-rtd) (set! ys4e2f@&i/o-port-rcd ys4e20@ys4e18) (set! ys4f58@ys4e2f@&i/o-port-rcd ys4e2f@&i/o-port-rcd) (set! ys4e35@ys4e30 (make-record-type-descriptor '&i/o-decoding ys4e1c@ys4e17 'ys4e33 '#f '#f '#())) (set! ys4f59@ys4e35@ys4e30 ys4e35@ys4e30) (set! ys4e37@ys4e32 '#f) (set! ys4f5a@ys4e37@ys4e32 ys4e37@ys4e32) (set! ys4e39@ys4e31 (make-record-constructor-descriptor ys4e35@ys4e30 ys4e20@ys4e18 ys4e37@ys4e32)) (set! ys4f5b@ys4e39@ys4e31 ys4e39@ys4e31) (set! ys4e3c@p? (record-predicate ys4e35@ys4e30)) (set! ys4f5c@ys4e3c@p? ys4e3c@p?) (set! ys4e3e@make-i/o-decoding-error (record-constructor ys4e39@ys4e31)) (set! ys4f5d@ys4e3e@make-i/o-decoding-error ys4e3e@make-i/o-decoding-error) (set! ys4e40@i/o-decoding-error? (condition-predicate ys4e35@ys4e30)) (set! ys4f5e@ys4e40@i/o-decoding-error? ys4e40@i/o-decoding-error?) (set! ys4e42@&i/o-decoding-rtd ys4e35@ys4e30) (set! ys4f5f@ys4e42@&i/o-decoding-rtd ys4e42@&i/o-decoding-rtd) (set! ys4e44@&i/o-decoding-rcd ys4e39@ys4e31) (set! ys4f60@ys4e44@&i/o-decoding-rcd ys4e44@&i/o-decoding-rcd) (set! ys4e4c@ys4e47 (make-record-type-descriptor '&i/o-encoding ys4e1c@ys4e17 'ys4e4a '#f '#f '#((immutable char)))) (set! ys4f61@ys4e4c@ys4e47 ys4e4c@ys4e47) (set! ys4e4e@ys4e49 '#f) (set! ys4f62@ys4e4e@ys4e49 ys4e4e@ys4e49) (set! ys4e50@ys4e48 (make-record-constructor-descriptor ys4e4c@ys4e47 ys4e20@ys4e18 ys4e4e@ys4e49)) (set! ys4f63@ys4e50@ys4e48 ys4e50@ys4e48) (set! ys4e53@p? (record-predicate ys4e4c@ys4e47)) (set! ys4f64@ys4e53@p? ys4e53@p?) (set! ys4e55@make-i/o-encoding-error (record-constructor ys4e50@ys4e48)) (set! ys4f65@ys4e55@make-i/o-encoding-error ys4e55@make-i/o-encoding-error) (set! ys4e57@ys4e46 (record-accessor ys4e4c@ys4e47 '0)) (set! ys4f66@ys4e57@ys4e46 ys4e57@ys4e46) (set! ys4e59@i/o-encoding-error? (condition-predicate ys4e4c@ys4e47)) (set! ys4f67@ys4e59@i/o-encoding-error? ys4e59@i/o-encoding-error?) (set! ys4e5b@i/o-encoding-error-char (condition-accessor ys4e4c@ys4e47 ys4e57@ys4e46)) (set! ys4f68@ys4e5b@i/o-encoding-error-char ys4e5b@i/o-encoding-error-char) (set! ys4e5d@&i/o-encoding-rtd ys4e4c@ys4e47) (set! ys4f69@ys4e5d@&i/o-encoding-rtd ys4e5d@&i/o-encoding-rtd) (set! ys4e5f@&i/o-encoding-rcd ys4e50@ys4e48) (set! ys4f6a@ys4e5f@&i/o-encoding-rcd ys4e5f@&i/o-encoding-rcd) (set! ys4e65@ys4e60 (make-record-type-descriptor '&no-infinities ys4cf1@ys4cec 'ys4e63 '#f '#f '#())) (set! ys4f6b@ys4e65@ys4e60 ys4e65@ys4e60) (set! ys4e67@ys4e62 '#f) (set! ys4f6c@ys4e67@ys4e62 ys4e67@ys4e62) (set! ys4e69@ys4e61 (make-record-constructor-descriptor ys4e65@ys4e60 ys4cf5@ys4ced ys4e67@ys4e62)) (set! ys4f6d@ys4e69@ys4e61 ys4e69@ys4e61) (set! ys4e6c@p? (record-predicate ys4e65@ys4e60)) (set! ys4f6e@ys4e6c@p? ys4e6c@p?) (set! ys4e6e@make-no-infinities-violation (record-constructor ys4e69@ys4e61)) (set! ys4f6f@ys4e6e@make-no-infinities-violation ys4e6e@make-no-infinities-violation) (set! ys4e70@no-infinities-violation? (condition-predicate ys4e65@ys4e60)) (set! ys4f70@ys4e70@no-infinities-violation? ys4e70@no-infinities-violation?) (set! ys4e72@&no-infinities-rtd ys4e65@ys4e60) (set! ys4f71@ys4e72@&no-infinities-rtd ys4e72@&no-infinities-rtd) (set! ys4e74@&no-infinities-rcd ys4e69@ys4e61) (set! ys4f72@ys4e74@&no-infinities-rcd ys4e74@&no-infinities-rcd) (set! ys4e7a@ys4e75 (make-record-type-descriptor '&no-nans ys4cf1@ys4cec 'ys4e78 '#f '#f '#())) (set! ys4f73@ys4e7a@ys4e75 ys4e7a@ys4e75) (set! ys4e7c@ys4e77 '#f) (set! ys4f74@ys4e7c@ys4e77 ys4e7c@ys4e77) (set! ys4e7e@ys4e76 (make-record-constructor-descriptor ys4e7a@ys4e75 ys4cf5@ys4ced ys4e7c@ys4e77)) (set! ys4f75@ys4e7e@ys4e76 ys4e7e@ys4e76) (set! ys4e81@p? (record-predicate ys4e7a@ys4e75)) (set! ys4f76@ys4e81@p? ys4e81@p?) (set! ys4e83@make-no-nans-violation (record-constructor ys4e7e@ys4e76)) (set! ys4f77@ys4e83@make-no-nans-violation ys4e83@make-no-nans-violation) (set! ys4e85@no-nans-violation? (condition-predicate ys4e7a@ys4e75)) (set! ys4f78@ys4e85@no-nans-violation? ys4e85@no-nans-violation?) (set! ys4e87@&no-nans-rtd ys4e7a@ys4e75) (set! ys4f79@ys4e87@&no-nans-rtd ys4e87@&no-nans-rtd) (set! ys4e89@&no-nans-rcd ys4e7e@ys4e76) (set! ys4f7a@ys4e89@&no-nans-rcd ys4e89@&no-nans-rcd) (void))
(begin (begin (ys2a10@ys29c5@current-primitive-locations (lambda (ys544b@x) (let ((ys544d@t (assq ys544b@x '((&no-nans-rcd . ys4f7a@ys4e89@&no-nans-rcd) (&no-nans-rtd . ys4f79@ys4e87@&no-nans-rtd) (&no-infinities-rcd . ys4f72@ys4e74@&no-infinities-rcd) (&no-infinities-rtd . ys4f71@ys4e72@&no-infinities-rtd) (&i/o-encoding-rcd . ys4f6a@ys4e5f@&i/o-encoding-rcd) (&i/o-encoding-rtd . ys4f69@ys4e5d@&i/o-encoding-rtd) (&i/o-decoding-rcd . ys4f60@ys4e44@&i/o-decoding-rcd) (&i/o-decoding-rtd . ys4f5f@ys4e42@&i/o-decoding-rtd) (&i/o-port-rcd . ys4f58@ys4e2f@&i/o-port-rcd) (&i/o-port-rtd . ys4f57@ys4e2d@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . ys4f4e@ys4e14@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . ys4f4d@ys4e12@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . ys4f46@ys4dff@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . ys4f45@ys4dfd@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . ys4f3e@ys4dea@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . ys4f3d@ys4de8@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . ys4f36@ys4dd5@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . ys4f35@ys4dd3@&i/o-file-protection-rtd) (&i/o-filename-rcd . ys4f2e@ys4dc0@&i/o-filename-rcd) (&i/o-filename-rtd . ys4f2d@ys4dbe@&i/o-filename-rtd) (&i/o-invalid-position-rcd . ys4f24@ys4da5@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . ys4f23@ys4da3@&i/o-invalid-position-rtd) (&i/o-write-rcd . ys4f1a@ys4d8a@&i/o-write-rcd) (&i/o-write-rtd . ys4f19@ys4d88@&i/o-write-rtd) (&i/o-read-rcd . ys4f12@ys4d75@&i/o-read-rcd) (&i/o-read-rtd . ys4f11@ys4d73@&i/o-read-rtd) (&i/o-rcd . ys4f0a@ys4d60@&i/o-rcd) (&i/o-rtd . ys4f09@ys4d5e@&i/o-rtd) (&undefined-rcd . ys4f02@ys4d4b@&undefined-rcd) (&undefined-rtd . ys4f01@ys4d49@&undefined-rtd) (&syntax-rcd . ys4efa@ys4d36@&syntax-rcd) (&syntax-rtd . ys4ef9@ys4d34@&syntax-rtd) (&lexical-rcd . ys4eee@ys4d15@&lexical-rcd) (&lexical-rtd . ys4eed@ys4d13@&lexical-rtd) (&implementation-restriction-rcd . ys4ee6@ys4d00@&implementation-restriction-rcd) (&implementation-restriction-rtd . ys4ee5@ys4cfe@&implementation-restriction-rtd) (&non-continuable-rcd . ys4ede@ys4ceb@&non-continuable-rcd) (&non-continuable-rtd . ys4edd@ys4ce9@&non-continuable-rtd) (&who-rcd . ys4ed6@ys4cd6@&who-rcd) (&who-rtd . ys4ed5@ys4cd4@&who-rtd) (&irritants-rcd . ys4ecc@ys4cbb@&irritants-rcd) (&irritants-rtd . ys4ecb@ys4cb9@&irritants-rtd) (&assertion-rcd . ys4ec2@ys4ca0@&assertion-rcd) (&assertion-rtd . ys4ec1@ys4c9e@&assertion-rtd) (&violation-rcd . ys4eba@ys4c8b@&violation-rcd) (&violation-rtd . ys4eb9@ys4c89@&violation-rtd) (&error-rcd . ys4eb2@ys4c76@&error-rcd) (&error-rtd . ys4eb1@ys4c74@&error-rtd) (&serious-rcd . ys4eaa@ys4c61@&serious-rcd) (&serious-rtd . ys4ea9@ys4c5f@&serious-rtd) (&warning-rcd . ys4ea2@ys4c4c@&warning-rcd) (&warning-rtd . ys4ea1@ys4c4a@&warning-rtd) (&message-rcd . ys4e9a@ys4c37@&message-rcd) (&message-rtd . ys4e99@ys4c35@&message-rtd) (&condition-rcd . ys4e90@ys4bd8@&condition-rcd) (&condition-rtd . ys4e8f@ys4bd6@&condition-rtd) (syntax-error . ys4bb2@ys3156@syntax-error) (syntax-dispatch . ys4b50@ys307a@syntax-dispatch) (load . ys50ef@ys4f9a@load) (interaction-environment . ys4bbb@ys3168@interaction-environment) (library-path . ys2c77@ys2ab3@library-path) (mosh-cache-dir . ys29be@ys289e@mosh-cache-dir) (make-parameter . ys29bd@ys289c@make-parameter) (make-variable-transformer . ys4b0d@ys2ea5@make-variable-transformer) (identifier? . ys4bb5@ys315c@identifier?) (generate-temporaries . ys4bab@ys3148@generate-temporaries) (free-identifier=? . ys4bac@ys314a@free-identifier=?) (syntax->datum . ys4bb7@ys3160@syntax->datum) (datum->syntax . ys4bb6@ys315e@datum->syntax) (bound-identifier=? . ys4bad@ys314c@bound-identifier=?) (make-i/o-write-error . ys4f17@ys4d84@make-i/o-write-error) (make-i/o-read-error . ys4f0f@ys4d6f@make-i/o-read-error) (make-i/o-port-error . ys4f53@ys4e25@make-i/o-port-error) (make-i/o-invalid-position-error . ys4f1f@ys4d9b@make-i/o-invalid-position-error) (make-i/o-filename-error . ys4f29@ys4db6@make-i/o-filename-error) (make-i/o-file-protection-error . ys4f33@ys4dcf@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . ys4f3b@ys4de4@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . ys4f4b@ys4e0e@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . ys4f43@ys4df9@make-i/o-file-already-exists-error) (make-i/o-error . ys4f07@ys4d5a@make-i/o-error) (make-i/o-encoding-error . ys4f65@ys4e55@make-i/o-encoding-error) (make-i/o-decoding-error . ys4f5d@ys4e3e@make-i/o-decoding-error) (i/o-write-error? . ys4f18@ys4d86@i/o-write-error?) (i/o-read-error? . ys4f10@ys4d71@i/o-read-error?) (i/o-port-error? . ys4f55@ys4e29@i/o-port-error?) (i/o-invalid-position-error? . ys4f21@ys4d9f@i/o-invalid-position-error?) (i/o-filename-error? . ys4f2b@ys4dba@i/o-filename-error?) (i/o-file-protection-error? . ys4f34@ys4dd1@i/o-file-protection-error?) (i/o-file-is-read-only-error? . ys4f3c@ys4de6@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . ys4f4c@ys4e10@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . ys4f44@ys4dfb@i/o-file-already-exists-error?) (i/o-error? . ys4f08@ys4d5c@i/o-error?) (i/o-error-position . ys4f22@ys4da1@i/o-error-position) (i/o-error-port . ys4f56@ys4e2b@i/o-error-port) (i/o-error-filename . ys4f2c@ys4dbc@i/o-error-filename) (i/o-encoding-error? . ys4f67@ys4e59@i/o-encoding-error?) (i/o-encoding-error-char . ys4f68@ys4e5b@i/o-encoding-error-char) (i/o-decoding-error? . ys4f5e@ys4e40@i/o-decoding-error?) (scheme-report-environment . ys4ba2@ys3136@scheme-report-environment) (null-environment . ys4ba1@ys3134@null-environment) (command-line . ys50ec@ys4f94@command-line) (eval . ys4ba4@ys313a@eval) (environment . ys4ba0@ys3132@environment) (who-condition? . ys4ed3@ys4cd0@who-condition?) (warning? . ys4ea0@ys4c48@warning?) (violation? . ys4eb8@ys4c87@violation?) (undefined-violation? . ys4f00@ys4d47@undefined-violation?) (syntax-violation? . ys4ef6@ys4d2e@syntax-violation?) (syntax-violation-subform . ys4ef8@ys4d32@syntax-violation-subform) (syntax-violation-form . ys4ef7@ys4d30@syntax-violation-form) (syntax-violation . ys4bb4@ys315a@syntax-violation) (serious-condition? . ys4ea8@ys4c5d@serious-condition?) (non-continuable-violation? . ys4edc@ys4ce7@non-continuable-violation?) (message-condition? . ys4e97@ys4c31@message-condition?) (make-who-condition . ys4ed1@ys4ccc@make-who-condition) (make-warning . ys4e9f@ys4c46@make-warning) (make-violation . ys4eb7@ys4c85@make-violation) (make-undefined-violation . ys4eff@ys4d45@make-undefined-violation) (make-syntax-violation . ys4ef3@ys4d28@make-syntax-violation) (make-serious-condition . ys4ea7@ys4c5b@make-serious-condition) (make-non-continuable-violation . ys4edb@ys4ce5@make-non-continuable-violation) (make-message-condition . ys4e95@ys4c2d@make-message-condition) (make-lexical-violation . ys4eeb@ys4d0f@make-lexical-violation) (make-irritants-condition . ys4ec7@ys4cb1@make-irritants-condition) (make-implementation-restriction-violation . ys4ee3@ys4cfa@make-implementation-restriction-violation) (make-error . ys4eaf@ys4c70@make-error) (make-assertion-violation . ys4ebf@ys4c9a@make-assertion-violation) (lexical-violation? . ys4eec@ys4d11@lexical-violation?) (irritants-condition? . ys4ec9@ys4cb5@irritants-condition?) (implementation-restriction-violation? . ys4ee4@ys4cfc@implementation-restriction-violation?) (error? . ys4eb0@ys4c72@error?) (condition-who . ys4ed4@ys4cd2@condition-who) (condition-message . ys4e98@ys4c33@condition-message) (condition-irritants . ys4eca@ys4cb7@condition-irritants) (assertion-violation? . ys4ec0@ys4c9c@assertion-violation?) (no-nans-violation? . ys4f78@ys4e85@no-nans-violation?) (no-infinities-violation? . ys4f70@ys4e70@no-infinities-violation?) (make-no-nans-violation . ys4f77@ys4e83@make-no-nans-violation) (make-no-infinities-violation . ys4f6f@ys4e6e@make-no-infinities-violation) (assertion-error . ys4bb1@ys3154@assertion-error))))) (if ys544d@t (cdr ys544d@t) '#f)))) (ys2c87@ys2ad3@install-library 'ys5428 '(mosh interaction) '() '() '() '() '((regexp? . ys5420) (alist->eq-hash-table . ys541c) (format . ys5419) (string-split . ys540e) (call-process . ys5408) (set-current-directory! . ys5404) (expand-path . ys5403) (current-directory . ys5402) (%spawn . ys5401) (%waitpid . ys5400) (simple-struct-name . ys53ff) (simple-struct-set! . ys53fe) (simple-struct-ref . ys53fd) (make-simple-struct . ys53fc) (simple-struct? . ys53fb) (pointer-ref-c-int64 . ys53fa) (pointer-ref-c-int32 . ys53f9) (pointer-ref-c-int16 . ys53f8) (pointer-ref-c-int8 . ys53f7) (pointer-ref-c-uint64 . ys53f6) (pointer-ref-c-uint32 . ys53f5) (pointer-ref-c-uint16 . ys53f4) (pointer-ref-c-uint8 . ys53f3) (pointer-set-c-uint64! . ys53f2) (pointer-set-c-uint32! . ys53f1) (pointer-set-c-uint16! . ys53f0) (pointer-set-c-uint8! . ys53ef) (pointer-set-c-int64! . ys53ee) (pointer-set-c-int32! . ys53ed) (pointer-set-c-int16! . ys53ec) (pointer-set-c-int8! . ys53eb) (pointer-set-c-pointer! . ys53ea) (pointer-set-c-double! . ys53e9) (pointer-set-c-float! . ys53e8) (pointer-set-c-long-long! . ys53e7) (pointer-set-c-long! . ys53e6) (pointer-set-c-int! . ys53e5) (pointer-set-c-short! . ys53e4) (pointer-set-c-char! . ys53e3) (pointer-ref-c-pointer . ys53e2) (pointer-ref-c-double . ys53e1) (pointer-ref-c-float . ys53e0) (pointer-ref-c-unsigned-long-long . ys53df) (pointer-ref-c-signed-long-long . ys53de) (pointer-ref-c-unsigned-long . ys53dd) (pointer-ref-c-signed-long . ys53dc) (pointer-ref-c-unsigned-int . ys53db) (pointer-ref-c-signed-int . ys53da) (pointer-ref-c-unsigned-short . ys53d9) (pointer-ref-c-signed-short . ys53d8) (pointer-ref-c-unsigned-char . ys53d7) (pointer-ref-c-signed-char . ys53d6) (pointer->integer . ys53d5) (integer->pointer . ys53d4) (pointer? . ys53d3) (shared-errno . ys53d2) (%ffi-supported? . ys53cd) (%ffi-pointer->string . ys53cc) (%ffi-call->string-or-zero . ys53cb) (%ffi-call->double . ys53ca) (%ffi-call->void* . ys53c9) (%ffi-call->void . ys53c8) (%ffi-call->char . ys53c7) (%ffi-call->uint . ys53c6) (%ffi-call->int . ys53c5) (%ffi-lookup . ys53c4) (%ffi-open . ys53c3) (null-terminated-utf8->string . ys53c2) (null-terminated-bytevector->string . ys53c1) (%fork . ys53c0) (%pipe . ys53bf) (p . ys53be) (whereis . ys53a2) (register . ys53a1) (vm-join! . ys53a0) (vm-set-value! . ys539f) (vm? . ys539e) (main-vm? . ys539d) (vm-eval . ys539c) (vm-self . ys539b) (vm-start! . ys539a) (make-vm . ys5399) (mutex-try-lock! . ys5398) (mutex-unlock! . ys5397) (mutex-lock! . ys5396) (mutex? . ys5395) (make-mutex . ys5394) (condition-variable-notify-all! . ys5393) (condition-variable-notify! . ys5392) (condition-variable-wait! . ys5391) (make-condition-variable . ys5390) (string-upcase . ys5378) (string-titlecase . ys5377) (string-normalize-nfkd . ys5376) (string-normalize-nfkc . ys5375) (string-normalize-nfd . ys5374) (string-normalize-nfc . ys5373) (string-foldcase . ys5372) (string-downcase . ys5371) (string-ci>? . ys5370) (string-ci>=? . ys536f) (string-ci=? . ys536e) (string-ci<? . ys536d) (string-ci<=? . ys536c) (char-whitespace? . ys536b) (char-upper-case? . ys536a) (char-title-case? . ys5369) (char-numeric? . ys5368) (char-lower-case? . ys5367) (char-general-category . ys5366) (char-upcase . ys5365) (char-titlecase . ys5364) (char-foldcase . ys5363) (char-downcase . ys5362) (char-ci>? . ys5361) (char-ci>=? . ys5360) (char-ci=? . ys535f) (char-ci<? . ys535e) (char-ci<=? . ys535d) (char-alphabetic? . ys535c) (make-variable-transformer . ys2ea4) (identifier? . ys315b) (generate-temporaries . ys3147) (free-identifier=? . ys3149) (syntax->datum . ys315f) (datum->syntax . ys315d) (bound-identifier=? . ys314b) (record-type-descriptor? . ys535b) (record-predicate . ys535a) (record-mutator . ys5359) (record-constructor . ys5358) (record-accessor . ys5357) (make-record-type-descriptor . ys5356) (make-record-constructor-descriptor . ys5355) (record? . ys5354) (record-type-uid . ys5353) (record-type-sealed? . ys5352) (record-type-parent . ys5351) (record-type-opaque? . ys5350) (record-type-name . ys534f) (record-type-generative? . ys534e) (record-type-field-names . ys534d) (record-rtd . ys534c) (record-field-mutable? . ys534b) (delete-file . ys534a) (file-exists? . ys5349) (vector-sort! . ys5348) (vector-sort . ys5347) (list-sort . ys5346) (symbol-hash . ys5345) (string-ci-hash . ys5344) (string-hash . ys5343) (equal-hash . ys5342) (hashtable-equivalence-function . ys5341) (make-hashtable . ys5340) (hashtable-hash-function . ys533f) (make-eqv-hashtable . ys533e) (make-eq-hashtable . ys533d) (hashtable? . ys533c) (hashtable-update! . ys533b) (hashtable-size . ys533a) (hashtable-set! . ys5339) (hashtable-ref . ys5338) (hashtable-mutable? . ys5337) (hashtable-keys . ys5336) (hashtable-entries . ys5335) (hashtable-delete! . ys5334) (hashtable-copy . ys5333) (hashtable-contains? . ys5332) (hashtable-clear! . ys5331) (call-with-output-file . ys5330) (call-with-input-file . ys532f) (write-char . ys532e) (write . ys532d) (with-output-to-file . ys532c) (with-input-from-file . ys532b) (read-char . ys532a) (read . ys5329) (peek-char . ys5328) (open-output-file . ys5327) (open-input-file . ys5326) (newline . ys5325) (display . ys5324) (close-output-port . ys5323) (close-input-port . ys5322) (eof-object? . ys5321) (eof-object . ys5320) (current-error-port . ys531f) (current-output-port . ys531e) (current-input-port . ys531d) (output-port? . ys531c) (input-port? . ys531b) (utf-8-codec . ys531a) (utf-16-codec . ys5319) (transcoder-error-handling-mode . ys5318) (transcoder-eol-style . ys5317) (transcoder-codec . ys5316) (transcoded-port . ys5315) (textual-port? . ys5314) (string->bytevector . ys5313) (standard-output-port . ys5312) (standard-input-port . ys5311) (standard-error-port . ys5310) (set-port-position! . ys530f) (put-u8 . ys530e) (put-string . ys530d) (put-datum . ys530c) (put-char . ys530b) (put-bytevector . ys530a) (port? . ys5309) (port-transcoder . ys5308) (port-position . ys5307) (port-has-set-port-position!? . ys5306) (port-has-port-position? . ys5305) (port-eof? . ys5304) (output-port-buffer-mode . ys5303) (open-string-output-port . ys5302) (open-string-input-port . ys5301) (open-file-output-port . ys5300) (open-file-input/output-port . ys52ff) (open-file-input-port . ys52fe) (open-bytevector-output-port . ys52fd) (open-bytevector-input-port . ys52fc) (native-transcoder . ys52fb) (native-eol-style . ys52fa) (make-transcoder . ys52f9) (latin-1-codec . ys52f8) (make-i/o-write-error . ys4d83) (make-i/o-read-error . ys4d6e) (make-i/o-port-error . ys4e24) (make-i/o-invalid-position-error . ys4d9a) (make-i/o-filename-error . ys4db5) (make-i/o-file-protection-error . ys4dce) (make-i/o-file-is-read-only-error . ys4de3) (make-i/o-file-does-not-exist-error . ys4e0d) (make-i/o-file-already-exists-error . ys4df8) (make-i/o-error . ys4d59) (make-i/o-encoding-error . ys4e54) (make-i/o-decoding-error . ys4e3d) (make-custom-textual-output-port . ys52f7) (make-custom-textual-input/output-port . ys52f6) (make-custom-textual-input-port . ys52f5) (make-custom-binary-output-port . ys52f4) (make-custom-binary-input/output-port . ys52f3) (make-custom-binary-input-port . ys52f2) (make-bytevector . ys52f1) (lookahead-u8 . ys52f0) (lookahead-char . ys52ef) (i/o-write-error? . ys4d85) (i/o-read-error? . ys4d70) (i/o-port-error? . ys4e28) (i/o-invalid-position-error? . ys4d9e) (i/o-filename-error? . ys4db9) (i/o-file-protection-error? . ys4dd0) (i/o-file-is-read-only-error? . ys4de5) (i/o-file-does-not-exist-error? . ys4e0f) (i/o-file-already-exists-error? . ys4dfa) (i/o-error? . ys4d5b) (i/o-error-position . ys4da0) (i/o-error-port . ys4e2a) (i/o-error-filename . ys4dbb) (i/o-encoding-error? . ys4e58) (i/o-encoding-error-char . ys4e5a) (i/o-decoding-error? . ys4e3f) (get-u8 . ys52ee) (get-string-n! . ys52ed) (get-string-n . ys52ec) (get-string-all . ys52eb) (get-line . ys52ea) (get-datum . ys52e9) (get-char . ys52e8) (get-bytevector-some . ys52e7) (get-bytevector-n! . ys52e6) (get-bytevector-n . ys52e5) (get-bytevector-all . ys52e4) (flush-output-port . ys52e3) (close-port . ys52e2) (exit . ys52da) (command-line . ys4f93) (string-fill! . ys52d9) (string-set! . ys52d8) (set-cdr! . ys52d7) (set-car! . ys52d6) (remove . ys52d5) (remv . ys52d4) (remp . ys52d3) (remq . ys52d2) (partition . ys52d1) (memv . ys52d0) (memq . ys52cf) (memp . ys52ce) (member . ys52cd) (exists . ys52cc) (for-all . ys52cb) (fold-right . ys52ca) (fold-left . ys52c9) (find . ys52c8) (filter . ys52c7) (cons* . ys52c6) (assv . ys52c5) (assq . ys52c4) (assp . ys52c3) (assoc . ys52c2) (call-with-string-output-port . ys52c1) (call-with-port . ys52c0) (call-with-bytevector-output-port . ys52bf) (bytevector->string . ys52be) (buffer-mode? . ys52bd) (binary-port? . ys52bc) (with-exception-handler . ys52bb) (raise-continuable . ys52ba) (raise . ys52b9) (eval . ys3139) (environment . ys3131) (make-enumeration . ys52b8) (enum-set=? . ys52b7) (enum-set-universe . ys52b6) (enum-set-union . ys52b5) (enum-set-subset? . ys52b4) (enum-set-projection . ys52b3) (enum-set-member? . ys52b2) (enum-set-intersection . ys52b1) (enum-set-indexer . ys52b0) (enum-set-difference . ys52af) (enum-set-constructor . ys52ae) (enum-set-complement . ys52ad) (enum-set->list . ys52ac) (who-condition? . ys4ccf) (warning? . ys4c47) (violation? . ys4c86) (undefined-violation? . ys4d46) (syntax-violation? . ys4d2d) (syntax-violation-subform . ys4d31) (syntax-violation-form . ys4d2f) (syntax-violation . ys3159) (simple-conditions . ys52ab) (serious-condition? . ys4c5c) (non-continuable-violation? . ys4ce6) (message-condition? . ys4c30) (make-who-condition . ys4ccb) (make-warning . ys4c45) (make-violation . ys4c84) (make-undefined-violation . ys4d44) (make-syntax-violation . ys4d27) (make-serious-condition . ys4c5a) (make-non-continuable-violation . ys4ce4) (make-message-condition . ys4c2c) (make-lexical-violation . ys4d0e) (make-irritants-condition . ys4cb0) (make-implementation-restriction-violation . ys4cf9) (make-error . ys4c6f) (make-assertion-violation . ys4c99) (lexical-violation? . ys4d10) (irritants-condition? . ys4cb4) (implementation-restriction-violation? . ys4cfb) (error? . ys4c71) (condition-who . ys4cd1) (condition-predicate . ys52aa) (condition-message . ys4c32) (condition-irritants . ys4cb6) (condition-accessor . ys52a9) (condition . ys52a8) (assertion-violation? . ys4c9b) (condition? . ys52a7) (utf32->string . ys52a6) (utf16->string . ys52a5) (utf8->string . ys52a4) (uint-list->bytevector . ys52a3) (u8-list->bytevector . ys52a2) (string->utf8 . ys52a1) (string->utf32 . ys52a0) (string->utf16 . ys529f) (sint-list->bytevector . ys529e) (native-endianness . ys529d) (bytevector? . ys529c) (bytevector=? . ys529b) (bytevector-uint-set! . ys529a) (bytevector-uint-ref . ys5299) (bytevector-u8-set! . ys5298) (bytevector-u8-ref . ys5297) (bytevector-u64-set! . ys5296) (bytevector-u64-ref . ys5295) (bytevector-u64-native-set! . ys5294) (bytevector-u64-native-ref . ys5293) (bytevector-u32-set! . ys5292) (bytevector-u32-ref . ys5291) (bytevector-u32-native-set! . ys5290) (bytevector-u32-native-ref . ys528f) (bytevector-u16-set! . ys528e) (bytevector-u16-ref . ys528d) (bytevector-u16-native-set! . ys528c) (bytevector-u16-native-ref . ys528b) (bytevector-sint-set! . ys528a) (bytevector-sint-ref . ys5289) (bytevector-s8-set! . ys5288) (bytevector-s8-ref . ys5287) (bytevector-s64-set! . ys5286) (bytevector-s64-ref . ys5285) (bytevector-s64-native-set! . ys5284) (bytevector-s64-native-ref . ys5283) (bytevector-s32-set! . ys5282) (bytevector-s32-ref . ys5281) (bytevector-s32-native-set! . ys5280) (bytevector-s32-native-ref . ys527f) (bytevector-s16-set! . ys527e) (bytevector-s16-ref . ys527d) (bytevector-s16-native-set! . ys527c) (bytevector-s16-native-ref . ys527b) (bytevector-length . ys527a) (bytevector-ieee-single-ref . ys5279) (bytevector-ieee-single-set! . ys5278) (bytevector-ieee-single-native-set! . ys5277) (bytevector-ieee-single-native-ref . ys5276) (bytevector-ieee-double-set! . ys5275) (bytevector-ieee-double-ref . ys5274) (bytevector-ieee-double-native-set! . ys5273) (bytevector-ieee-double-native-ref . ys5272) (bytevector-fill! . ys5271) (bytevector-copy! . ys5270) (bytevector-copy . ys526f) (bytevector->uint-list . ys526e) (bytevector->u8-list . ys526d) (bytevector->sint-list . ys526c) (no-nans-violation? . ys4e84) (no-infinities-violation? . ys4e6f) (make-no-nans-violation . ys4e82) (make-no-infinities-violation . ys4e6d) (real->flonum . ys526b) (flzero? . ys526a) (fltruncate . ys5269) (fltan . ys5268) (flsqrt . ys5267) (flsin . ys5266) (flround . ys5265) (flpositive? . ys5264) (flonum? . ys5263) (flodd? . ys5262) (flnumerator . ys5261) (flnegative? . ys5260) (flnan? . ys525f) (flmod0 . ys525e) (flmod . ys525d) (flmin . ys525c) (flmax . ys525b) (fllog . ys525a) (flinteger? . ys5259) (flinfinite? . ys5258) (flfloor . ys5257) (flfinite? . ys5256) (flexpt . ys5255) (flexp . ys5254) (fleven? . ys5253) (fldiv0-and-mod0 . ys5252) (fldiv0 . ys5251) (fldiv-and-mod . ys5250) (fldiv . ys524f) (fldenominator . ys524e) (flcos . ys524d) (flceiling . ys524c) (flatan . ys524b) (flasin . ys524a) (flacos . ys5249) (flabs . ys5248) (fl>? . ys5247) (fl>=? . ys5246) (fl=? . ys5245) (fl<? . ys5244) (fl<=? . ys5243) (fl/ . ys5242) (fl- . ys5241) (fl+ . ys5240) (fl* . ys523f) (fixnum->flonum . ys523e) (fxzero? . ys523d) (fxxor . ys523c) (fxrotate-bit-field . ys523b) (fxreverse-bit-field . ys523a) (fxpositive? . ys5239) (fxodd? . ys5238) (fxnot . ys5237) (fxnegative? . ys5236) (fxmod0 . ys5235) (fxmod . ys5234) (fxmin . ys5233) (fxmax . ys5232) (fxlength . ys5231) (fxior . ys5230) (fxif . ys522f) (fxfirst-bit-set . ys522e) (fxeven? . ys522d) (fxdiv0-and-mod0 . ys522c) (fxdiv0 . ys522b) (fxdiv-and-mod . ys522a) (fxdiv . ys5229) (fxcopy-bit-field . ys5228) (fxcopy-bit . ys5227) (fxbit-set? . ys5226) (fxbit-field . ys5225) (fxbit-count . ys5224) (fxarithmetic-shift-right . ys5223) (fxarithmetic-shift-left . ys5222) (fxarithmetic-shift . ys5221) (fxand . ys5220) (fx>? . ys521f) (fx>=? . ys521e) (fx=? . ys521d) (fx<? . ys521c) (fx<=? . ys521b) (fx-/carry . ys521a) (fx- . ys5219) (fx+/carry . ys5218) (fx+ . ys5217) (fx*/carry . ys5216) (fx* . ys5215) (greatest-fixnum . ys5214) (least-fixnum . ys5213) (fixnum-width . ys5212) (fixnum? . ys5211) (bitwise-rotate-bit-field . ys5210) (bitwise-reverse-bit-field . ys520f) (bitwise-length . ys520e) (bitwise-if . ys520d) (bitwise-first-bit-set . ys520c) (bitwise-copy-bit-field . ys520b) (bitwise-copy-bit . ys520a) (bitwise-bit-set? . ys5209) (bitwise-bit-field . ys5208) (bitwise-bit-count . ys5207) (bitwise-xor . ys5206) (bitwise-ior . ys5205) (bitwise-and . ys5204) (bitwise-not . ys5203) (bitwise-arithmetic-shift-right . ys5202) (bitwise-arithmetic-shift-left . ys5201) (bitwise-arithmetic-shift . ys5200) (zero? . ys51ff) (vector? . ys51fe) (vector-set! . ys51fd) (vector-ref . ys51fc) (vector-map . ys51fb) (vector-length . ys51fa) (vector-for-each . ys51f9) (vector-fill! . ys51f8) (vector->list . ys51f7) (vector . ys51f6) (values . ys51f5) (truncate . ys51f4) (tan . ys51f3) (symbol? . ys51f2) (symbol=? . ys51f1) (symbol->string . ys51f0) (substring . ys51ef) (string? . ys51ee) (string>? . ys51ed) (string>=? . ys51ec) (string=? . ys51eb) (string<? . ys51ea) (string<=? . ys51e9) (string-ref . ys51e8) (string-length . ys51e7) (string-for-each . ys51e6) (string-copy . ys51e5) (string-append . ys51e4) (string->symbol . ys51e3) (string->number . ys51e2) (string->list . ys51e1) (string . ys51e0) (sqrt . ys51df) (sin . ys51de) (round . ys51dd) (reverse . ys51dc) (real? . ys51db) (real-valued? . ys51da) (real-part . ys51d9) (rationalize . ys51d8) (rational? . ys51d7) (rational-valued? . ys51d6) (procedure? . ys51d5) (positive? . ys51d4) (pair? . ys51d3) (odd? . ys51d2) (numerator . ys51d1) (number? . ys51d0) (number->string . ys51cf) (null? . ys51ce) (not . ys51cd) (negative? . ys51cc) (nan? . ys51cb) (min . ys51ca) (max . ys51c9) (map . ys51c8) (make-vector . ys51c7) (make-string . ys51c6) (make-rectangular . ys51c5) (make-polar . ys51c4) (magnitude . ys51c3) (log . ys51c2) (list? . ys51c1) (list-tail . ys51c0) (list-ref . ys51bf) (list->vector . ys51be) (list->string . ys51bd) (list . ys51bc) (length . ys51bb) (lcm . ys51ba) (integer? . ys51b9) (integer-valued? . ys51b8) (integer->char . ys51b7) (infinite? . ys51b6) (inexact? . ys51b5) (inexact . ys51b4) (imag-part . ys51b3) (gcd . ys51b2) (for-each . ys51b1) (floor . ys51b0) (finite? . ys51af) (expt . ys51ae) (exp . ys51ad) (exact? . ys51ac) (exact-integer-sqrt . ys51ab) (exact . ys51aa) (even? . ys51a9) (error . ys51a8) (eqv? . ys51a7) (equal? . ys51a6) (eq? . ys51a5) (dynamic-wind . ys51a4) (div0-and-mod0 . ys51a3) (mod0 . ys51a2) (div0 . ys51a1) (div-and-mod . ys51a0) (mod . ys519f) (div . ys519e) (denominator . ys519d) (cos . ys519c) (cons . ys519b) (complex? . ys519a) (char? . ys5199) (char>? . ys5198) (char>=? . ys5197) (char=? . ys5196) (char<? . ys5195) (char<=? . ys5194) (char->integer . ys5193) (ceiling . ys5192) (call-with-values . ys5191) (call/cc . ys5190) (call-with-current-continuation . ys518f) (cddddr . ys518e) (cdddar . ys518d) (cddadr . ys518c) (cddaar . ys518b) (cdaddr . ys518a) (cdadar . ys5189) (cdaadr . ys5188) (cdaaar . ys5187) (cadddr . ys5186) (caddar . ys5185) (cadadr . ys5184) (cadaar . ys5183) (caaddr . ys5182) (caadar . ys5181) (caaadr . ys5180) (caaaar . ys517f) (cdddr . ys517e) (cddar . ys517d) (cdadr . ys517c) (cdaar . ys517b) (caddr . ys517a) (cadar . ys5179) (caadr . ys5178) (caaar . ys5177) (cddr . ys5176) (cdar . ys5175) (cadr . ys5174) (caar . ys5173) (cdr . ys5172) (car . ys5171) (boolean? . ys5170) (boolean=? . ys516f) (atan . ys516e) (assertion-violation . ys516d) (asin . ys516c) (apply . ys516b) (append . ys516a) (angle . ys5169) (acos . ys5168) (abs . ys5167) (/ . ys5166) (* . ys5165) (- . ys5164) (+ . ys5163) (>= . ys5162) (> . ys5161) (= . ys5160) (<= . ys515f) (< . ys515e) (library . ys515d) (&no-nans . ys515c) (&no-infinities . ys515b) (&i/o-encoding . ys515a) (&i/o-decoding . ys5159) (&i/o-port . ys5158) (&i/o-file-does-not-exist . ys5157) (&i/o-file-already-exists . ys5156) (&i/o-file-is-read-only . ys5155) (&i/o-file-protection . ys5154) (&i/o-filename . ys5153) (&i/o-invalid-position . ys5152) (&i/o-write . ys5151) (&i/o-read . ys5150) (&i/o . ys514f) (&undefined . ys514e) (&syntax . ys514d) (&lexical . ys514c) (&implementation-restriction . ys514b) (&non-continuable . ys514a) (&who . ys5149) (&irritants . ys5148) (&assertion . ys5147) (&violation . ys5146) (&error . ys5145) (&serious . ys5144) (&warning . ys5143) (&message . ys5142) (&condition . ys5141) (define-condition-type . ys5140) (define-enumeration . ys513f) (define-record-type . ys513e) (parent-rtd . ys513d) (nongenerative . ys513c) (opaque . ys513b) (sealed . ys513a) (protocol . ys5139) (parent . ys5138) (immutable . ys5137) (mutable . ys5136) (fields . ys5135) (error-handling-mode . ys5134) (file-options . ys5133) (buffer-mode . ys5132) (eol-style . ys5131) (guard . ys5130) (unsyntax-splicing . ys512d) (unsyntax . ys512c) (unquote-splicing . ys512b) (unquote . ys512a) (_ . ys5129) (else . ys5128) (=> . ys5127) (... . ys5126) (assert . ys5125) (endianness . ys5124) (time . ys5122) (do . ys5121) (cond . ys5120) (let* . ys511f) (let*-values . ys511e) (let-values . ys511d) (identifier-syntax . ys511c) (with-syntax . ys511b) (quasisyntax . ys511a) (quasiquote . ys5119) (syntax-rules . ys5118) (include . ys5117) (record-constructor-descriptor . ys5115) (record-type-descriptor . ys5114) (case . ys5113) (unless . ys5111) (when . ys5110) (or . ys510f) (and . ys510e) (if . ys510d) (let . ys510c) (letrec* . ys510b) (letrec . ys510a) (case-lambda . ys5108) (lambda . ys5107) (syntax . ys5106) (syntax-case . ys5105) (quote . ys5104) (letrec-syntax . ys5102) (let-syntax . ys5101) (set! . ys5100) (import . ys50ff) (begin . ys50fe) (define-syntax . ys50fc) (define . ys50fb)) '() values values '#f '#f '#t '#f) (ys2c87@ys2ad3@install-library 'ys5429 '(psyntax null-environment-5) '() '() '() '() '((make-promise . ys52db) (unquote-splicing . ys512b) (unquote . ys512a) (_ . ys5129) (else . ys5128) (=> . ys5127) (... . ys5126) (delay . ys5123) (do . ys5121) (cond . ys5120) (let* . ys511f) (quasiquote . ys5119) (syntax-rules . ys5118) (case . ys5113) (or . ys510f) (and . ys510e) (if . ys510d) (let . ys510c) (letrec . ys510a) (lambda . ys5107) (quote . ys5104) (letrec-syntax . ys5102) (let-syntax . ys5101) (set! . ys5100) (begin . ys50fe) (define-syntax . ys50fc) (define . ys50fb)) '() values values '#f '#f '#t '#f) (ys2c87@ys2ad3@install-library 'ys542a '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . ys5370) (string-ci>=? . ys536f) (string-ci=? . ys536e) (string-ci<? . ys536d) (string-ci<=? . ys536c) (char-whitespace? . ys536b) (char-upper-case? . ys536a) (char-numeric? . ys5368) (char-lower-case? . ys5367) (char-upcase . ys5365) (char-downcase . ys5362) (char-ci>? . ys5361) (char-ci>=? . ys5360) (char-ci=? . ys535f) (char-ci<? . ys535e) (char-ci<=? . ys535d) (char-alphabetic? . ys535c) (call-with-output-file . ys5330) (call-with-input-file . ys532f) (write-char . ys532e) (write . ys532d) (with-output-to-file . ys532c) (with-input-from-file . ys532b) (read-char . ys532a) (read . ys5329) (peek-char . ys5328) (open-output-file . ys5327) (open-input-file . ys5326) (newline . ys5325) (display . ys5324) (close-output-port . ys5323) (close-input-port . ys5322) (eof-object . ys5320) (current-output-port . ys531e) (current-input-port . ys531d) (output-port? . ys531c) (input-port? . ys531b) (scheme-report-environment . ys3135) (quotient . ys52e1) (null-environment . ys3133) (remainder . ys52e0) (modulo . ys52df) (inexact->exact . ys52de) (force . ys52dd) (exact->inexact . ys52dc) (make-promise . ys52db) (string-fill! . ys52d9) (string-set! . ys52d8) (set-cdr! . ys52d7) (set-car! . ys52d6) (memv . ys52d0) (memq . ys52cf) (member . ys52cd) (assv . ys52c5) (assq . ys52c4) (assoc . ys52c2) (eval . ys3139) (zero? . ys51ff) (vector? . ys51fe) (vector-set! . ys51fd) (vector-ref . ys51fc) (vector-length . ys51fa) (vector-fill! . ys51f8) (vector->list . ys51f7) (vector . ys51f6) (values . ys51f5) (truncate . ys51f4) (tan . ys51f3) (symbol? . ys51f2) (symbol->string . ys51f0) (substring . ys51ef) (string? . ys51ee) (string>? . ys51ed) (string>=? . ys51ec) (string=? . ys51eb) (string<? . ys51ea) (string<=? . ys51e9) (string-ref . ys51e8) (string-length . ys51e7) (string-copy . ys51e5) (string-append . ys51e4) (string->symbol . ys51e3) (string->number . ys51e2) (string->list . ys51e1) (string . ys51e0) (sqrt . ys51df) (sin . ys51de) (round . ys51dd) (reverse . ys51dc) (real? . ys51db) (real-part . ys51d9) (rationalize . ys51d8) (rational? . ys51d7) (procedure? . ys51d5) (positive? . ys51d4) (pair? . ys51d3) (odd? . ys51d2) (numerator . ys51d1) (number? . ys51d0) (number->string . ys51cf) (not . ys51cd) (negative? . ys51cc) (min . ys51ca) (max . ys51c9) (map . ys51c8) (make-vector . ys51c7) (make-string . ys51c6) (make-rectangular . ys51c5) (make-polar . ys51c4) (magnitude . ys51c3) (log . ys51c2) (list? . ys51c1) (list-tail . ys51c0) (list-ref . ys51bf) (list->vector . ys51be) (list->string . ys51bd) (list . ys51bc) (length . ys51bb) (lcm . ys51ba) (integer? . ys51b9) (integer->char . ys51b7) (inexact? . ys51b5) (imag-part . ys51b3) (gcd . ys51b2) (for-each . ys51b1) (floor . ys51b0) (expt . ys51ae) (exp . ys51ad) (exact? . ys51ac) (even? . ys51a9) (eqv? . ys51a7) (equal? . ys51a6) (eq? . ys51a5) (dynamic-wind . ys51a4) (denominator . ys519d) (cos . ys519c) (cons . ys519b) (complex? . ys519a) (char? . ys5199) (char>? . ys5198) (char>=? . ys5197) (char=? . ys5196) (char<? . ys5195) (char<=? . ys5194) (char->integer . ys5193) (ceiling . ys5192) (call-with-values . ys5191) (call-with-current-continuation . ys518f) (cddddr . ys518e) (cdddar . ys518d) (cddadr . ys518c) (cddaar . ys518b) (cdaddr . ys518a) (cdadar . ys5189) (cdaadr . ys5188) (cdaaar . ys5187) (cadddr . ys5186) (caddar . ys5185) (cadadr . ys5184) (cadaar . ys5183) (caaddr . ys5182) (caadar . ys5181) (caaadr . ys5180) (caaaar . ys517f) (cdddr . ys517e) (cddar . ys517d) (cdadr . ys517c) (cdaar . ys517b) (caddr . ys517a) (cadar . ys5179) (caadr . ys5178) (caaar . ys5177) (cddr . ys5176) (cdar . ys5175) (cadr . ys5174) (caar . ys5173) (cdr . ys5172) (car . ys5171) (boolean? . ys5170) (atan . ys516e) (asin . ys516c) (apply . ys516b) (append . ys516a) (angle . ys5169) (acos . ys5168) (abs . ys5167) (/ . ys5166) (* . ys5165) (- . ys5164) (+ . ys5163) (>= . ys5162) (> . ys5161) (= . ys5160) (<= . ys515f) (< . ys515e) (unquote-splicing . ys512b) (unquote . ys512a) (else . ys5128) (=> . ys5127) (... . ys5126) (delay . ys5123) (do . ys5121) (cond . ys5120) (let* . ys511f) (quasiquote . ys5119) (syntax-rules . ys5118) (case . ys5113) (or . ys510f) (and . ys510e) (if . ys510d) (let . ys510c) (letrec . ys510a) (lambda . ys5107) (quote . ys5104) (letrec-syntax . ys5102) (let-syntax . ys5101) (set! . ys5100) (begin . ys50fe) (define-syntax . ys50fc) (define . ys50fb)) '() values values '#f '#f '#t '#f) (ys2c87@ys2ad3@install-library 'ys542b '(psyntax modules) '() '() '() '() '((module . ys50fd)) '() values values '#f '#f '#t '#f) (ys2c87@ys2ad3@install-library 'ys542c '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (ys2c87@ys2ad3@install-library 'ys542d '(rnrs) '(6) '() '() '() '((regexp? . ys5420) (string-upcase . ys5378) (string-titlecase . ys5377) (string-normalize-nfkd . ys5376) (string-normalize-nfkc . ys5375) (string-normalize-nfd . ys5374) (string-normalize-nfc . ys5373) (string-foldcase . ys5372) (string-downcase . ys5371) (string-ci>? . ys5370) (string-ci>=? . ys536f) (string-ci=? . ys536e) (string-ci<? . ys536d) (string-ci<=? . ys536c) (char-whitespace? . ys536b) (char-upper-case? . ys536a) (char-title-case? . ys5369) (char-numeric? . ys5368) (char-lower-case? . ys5367) (char-general-category . ys5366) (char-upcase . ys5365) (char-titlecase . ys5364) (char-foldcase . ys5363) (char-downcase . ys5362) (char-ci>? . ys5361) (char-ci>=? . ys5360) (char-ci=? . ys535f) (char-ci<? . ys535e) (char-ci<=? . ys535d) (char-alphabetic? . ys535c) (make-variable-transformer . ys2ea4) (identifier? . ys315b) (generate-temporaries . ys3147) (free-identifier=? . ys3149) (syntax->datum . ys315f) (datum->syntax . ys315d) (bound-identifier=? . ys314b) (record-type-descriptor? . ys535b) (record-predicate . ys535a) (record-mutator . ys5359) (record-constructor . ys5358) (record-accessor . ys5357) (make-record-type-descriptor . ys5356) (make-record-constructor-descriptor . ys5355) (record? . ys5354) (record-type-uid . ys5353) (record-type-sealed? . ys5352) (record-type-parent . ys5351) (record-type-opaque? . ys5350) (record-type-name . ys534f) (record-type-generative? . ys534e) (record-type-field-names . ys534d) (record-rtd . ys534c) (record-field-mutable? . ys534b) (delete-file . ys534a) (file-exists? . ys5349) (vector-sort! . ys5348) (vector-sort . ys5347) (list-sort . ys5346) (symbol-hash . ys5345) (string-ci-hash . ys5344) (string-hash . ys5343) (equal-hash . ys5342) (hashtable-equivalence-function . ys5341) (make-hashtable . ys5340) (hashtable-hash-function . ys533f) (make-eqv-hashtable . ys533e) (make-eq-hashtable . ys533d) (hashtable? . ys533c) (hashtable-update! . ys533b) (hashtable-size . ys533a) (hashtable-set! . ys5339) (hashtable-ref . ys5338) (hashtable-mutable? . ys5337) (hashtable-keys . ys5336) (hashtable-entries . ys5335) (hashtable-delete! . ys5334) (hashtable-copy . ys5333) (hashtable-contains? . ys5332) (hashtable-clear! . ys5331) (call-with-output-file . ys5330) (call-with-input-file . ys532f) (write-char . ys532e) (write . ys532d) (with-output-to-file . ys532c) (with-input-from-file . ys532b) (read-char . ys532a) (read . ys5329) (peek-char . ys5328) (open-output-file . ys5327) (open-input-file . ys5326) (newline . ys5325) (display . ys5324) (close-output-port . ys5323) (close-input-port . ys5322) (eof-object? . ys5321) (eof-object . ys5320) (current-error-port . ys531f) (current-output-port . ys531e) (current-input-port . ys531d) (output-port? . ys531c) (input-port? . ys531b) (utf-8-codec . ys531a) (utf-16-codec . ys5319) (transcoder-error-handling-mode . ys5318) (transcoder-eol-style . ys5317) (transcoder-codec . ys5316) (transcoded-port . ys5315) (textual-port? . ys5314) (string->bytevector . ys5313) (standard-output-port . ys5312) (standard-input-port . ys5311) (standard-error-port . ys5310) (set-port-position! . ys530f) (put-u8 . ys530e) (put-string . ys530d) (put-datum . ys530c) (put-char . ys530b) (put-bytevector . ys530a) (port? . ys5309) (port-transcoder . ys5308) (port-position . ys5307) (port-has-set-port-position!? . ys5306) (port-has-port-position? . ys5305) (port-eof? . ys5304) (output-port-buffer-mode . ys5303) (open-string-output-port . ys5302) (open-string-input-port . ys5301) (open-file-output-port . ys5300) (open-file-input/output-port . ys52ff) (open-file-input-port . ys52fe) (open-bytevector-output-port . ys52fd) (open-bytevector-input-port . ys52fc) (native-transcoder . ys52fb) (native-eol-style . ys52fa) (make-transcoder . ys52f9) (latin-1-codec . ys52f8) (make-i/o-write-error . ys4d83) (make-i/o-read-error . ys4d6e) (make-i/o-port-error . ys4e24) (make-i/o-invalid-position-error . ys4d9a) (make-i/o-filename-error . ys4db5) (make-i/o-file-protection-error . ys4dce) (make-i/o-file-is-read-only-error . ys4de3) (make-i/o-file-does-not-exist-error . ys4e0d) (make-i/o-file-already-exists-error . ys4df8) (make-i/o-error . ys4d59) (make-i/o-encoding-error . ys4e54) (make-i/o-decoding-error . ys4e3d) (make-custom-textual-output-port . ys52f7) (make-custom-textual-input/output-port . ys52f6) (make-custom-textual-input-port . ys52f5) (make-custom-binary-output-port . ys52f4) (make-custom-binary-input/output-port . ys52f3) (make-custom-binary-input-port . ys52f2) (make-bytevector . ys52f1) (lookahead-u8 . ys52f0) (lookahead-char . ys52ef) (i/o-write-error? . ys4d85) (i/o-read-error? . ys4d70) (i/o-port-error? . ys4e28) (i/o-invalid-position-error? . ys4d9e) (i/o-filename-error? . ys4db9) (i/o-file-protection-error? . ys4dd0) (i/o-file-is-read-only-error? . ys4de5) (i/o-file-does-not-exist-error? . ys4e0f) (i/o-file-already-exists-error? . ys4dfa) (i/o-error? . ys4d5b) (i/o-error-position . ys4da0) (i/o-error-port . ys4e2a) (i/o-error-filename . ys4dbb) (i/o-encoding-error? . ys4e58) (i/o-encoding-error-char . ys4e5a) (i/o-decoding-error? . ys4e3f) (get-u8 . ys52ee) (get-string-n! . ys52ed) (get-string-n . ys52ec) (get-string-all . ys52eb) (get-line . ys52ea) (get-datum . ys52e9) (get-char . ys52e8) (get-bytevector-some . ys52e7) (get-bytevector-n! . ys52e6) (get-bytevector-n . ys52e5) (get-bytevector-all . ys52e4) (flush-output-port . ys52e3) (close-port . ys52e2) (exit . ys52da) (command-line . ys4f93) (remove . ys52d5) (remv . ys52d4) (remp . ys52d3) (remq . ys52d2) (partition . ys52d1) (memv . ys52d0) (memq . ys52cf) (memp . ys52ce) (member . ys52cd) (exists . ys52cc) (for-all . ys52cb) (fold-right . ys52ca) (fold-left . ys52c9) (find . ys52c8) (filter . ys52c7) (cons* . ys52c6) (assv . ys52c5) (assq . ys52c4) (assp . ys52c3) (assoc . ys52c2) (call-with-string-output-port . ys52c1) (call-with-port . ys52c0) (call-with-bytevector-output-port . ys52bf) (bytevector->string . ys52be) (buffer-mode? . ys52bd) (binary-port? . ys52bc) (with-exception-handler . ys52bb) (raise-continuable . ys52ba) (raise . ys52b9) (make-enumeration . ys52b8) (enum-set=? . ys52b7) (enum-set-universe . ys52b6) (enum-set-union . ys52b5) (enum-set-subset? . ys52b4) (enum-set-projection . ys52b3) (enum-set-member? . ys52b2) (enum-set-intersection . ys52b1) (enum-set-indexer . ys52b0) (enum-set-difference . ys52af) (enum-set-constructor . ys52ae) (enum-set-complement . ys52ad) (enum-set->list . ys52ac) (who-condition? . ys4ccf) (warning? . ys4c47) (violation? . ys4c86) (undefined-violation? . ys4d46) (syntax-violation? . ys4d2d) (syntax-violation-subform . ys4d31) (syntax-violation-form . ys4d2f) (syntax-violation . ys3159) (simple-conditions . ys52ab) (serious-condition? . ys4c5c) (non-continuable-violation? . ys4ce6) (message-condition? . ys4c30) (make-who-condition . ys4ccb) (make-warning . ys4c45) (make-violation . ys4c84) (make-undefined-violation . ys4d44) (make-syntax-violation . ys4d27) (make-serious-condition . ys4c5a) (make-non-continuable-violation . ys4ce4) (make-message-condition . ys4c2c) (make-lexical-violation . ys4d0e) (make-irritants-condition . ys4cb0) (make-implementation-restriction-violation . ys4cf9) (make-error . ys4c6f) (make-assertion-violation . ys4c99) (lexical-violation? . ys4d10) (irritants-condition? . ys4cb4) (implementation-restriction-violation? . ys4cfb) (error? . ys4c71) (condition-who . ys4cd1) (condition-predicate . ys52aa) (condition-message . ys4c32) (condition-irritants . ys4cb6) (condition-accessor . ys52a9) (condition . ys52a8) (assertion-violation? . ys4c9b) (condition? . ys52a7) (utf32->string . ys52a6) (utf16->string . ys52a5) (utf8->string . ys52a4) (uint-list->bytevector . ys52a3) (u8-list->bytevector . ys52a2) (string->utf8 . ys52a1) (string->utf32 . ys52a0) (string->utf16 . ys529f) (sint-list->bytevector . ys529e) (native-endianness . ys529d) (bytevector? . ys529c) (bytevector=? . ys529b) (bytevector-uint-set! . ys529a) (bytevector-uint-ref . ys5299) (bytevector-u8-set! . ys5298) (bytevector-u8-ref . ys5297) (bytevector-u64-set! . ys5296) (bytevector-u64-ref . ys5295) (bytevector-u64-native-set! . ys5294) (bytevector-u64-native-ref . ys5293) (bytevector-u32-set! . ys5292) (bytevector-u32-ref . ys5291) (bytevector-u32-native-set! . ys5290) (bytevector-u32-native-ref . ys528f) (bytevector-u16-set! . ys528e) (bytevector-u16-ref . ys528d) (bytevector-u16-native-set! . ys528c) (bytevector-u16-native-ref . ys528b) (bytevector-sint-set! . ys528a) (bytevector-sint-ref . ys5289) (bytevector-s8-set! . ys5288) (bytevector-s8-ref . ys5287) (bytevector-s64-set! . ys5286) (bytevector-s64-ref . ys5285) (bytevector-s64-native-set! . ys5284) (bytevector-s64-native-ref . ys5283) (bytevector-s32-set! . ys5282) (bytevector-s32-ref . ys5281) (bytevector-s32-native-set! . ys5280) (bytevector-s32-native-ref . ys527f) (bytevector-s16-set! . ys527e) (bytevector-s16-ref . ys527d) (bytevector-s16-native-set! . ys527c) (bytevector-s16-native-ref . ys527b) (bytevector-length . ys527a) (bytevector-ieee-single-ref . ys5279) (bytevector-ieee-single-set! . ys5278) (bytevector-ieee-single-native-set! . ys5277) (bytevector-ieee-single-native-ref . ys5276) (bytevector-ieee-double-set! . ys5275) (bytevector-ieee-double-ref . ys5274) (bytevector-ieee-double-native-set! . ys5273) (bytevector-ieee-double-native-ref . ys5272) (bytevector-fill! . ys5271) (bytevector-copy! . ys5270) (bytevector-copy . ys526f) (bytevector->uint-list . ys526e) (bytevector->u8-list . ys526d) (bytevector->sint-list . ys526c) (no-nans-violation? . ys4e84) (no-infinities-violation? . ys4e6f) (make-no-nans-violation . ys4e82) (make-no-infinities-violation . ys4e6d) (real->flonum . ys526b) (flzero? . ys526a) (fltruncate . ys5269) (fltan . ys5268) (flsqrt . ys5267) (flsin . ys5266) (flround . ys5265) (flpositive? . ys5264) (flonum? . ys5263) (flodd? . ys5262) (flnumerator . ys5261) (flnegative? . ys5260) (flnan? . ys525f) (flmod0 . ys525e) (flmod . ys525d) (flmin . ys525c) (flmax . ys525b) (fllog . ys525a) (flinteger? . ys5259) (flinfinite? . ys5258) (flfloor . ys5257) (flfinite? . ys5256) (flexpt . ys5255) (flexp . ys5254) (fleven? . ys5253) (fldiv0-and-mod0 . ys5252) (fldiv0 . ys5251) (fldiv-and-mod . ys5250) (fldiv . ys524f) (fldenominator . ys524e) (flcos . ys524d) (flceiling . ys524c) (flatan . ys524b) (flasin . ys524a) (flacos . ys5249) (flabs . ys5248) (fl>? . ys5247) (fl>=? . ys5246) (fl=? . ys5245) (fl<? . ys5244) (fl<=? . ys5243) (fl/ . ys5242) (fl- . ys5241) (fl+ . ys5240) (fl* . ys523f) (fixnum->flonum . ys523e) (fxzero? . ys523d) (fxxor . ys523c) (fxrotate-bit-field . ys523b) (fxreverse-bit-field . ys523a) (fxpositive? . ys5239) (fxodd? . ys5238) (fxnot . ys5237) (fxnegative? . ys5236) (fxmod0 . ys5235) (fxmod . ys5234) (fxmin . ys5233) (fxmax . ys5232) (fxlength . ys5231) (fxior . ys5230) (fxif . ys522f) (fxfirst-bit-set . ys522e) (fxeven? . ys522d) (fxdiv0-and-mod0 . ys522c) (fxdiv0 . ys522b) (fxdiv-and-mod . ys522a) (fxdiv . ys5229) (fxcopy-bit-field . ys5228) (fxcopy-bit . ys5227) (fxbit-set? . ys5226) (fxbit-field . ys5225) (fxbit-count . ys5224) (fxarithmetic-shift-right . ys5223) (fxarithmetic-shift-left . ys5222) (fxarithmetic-shift . ys5221) (fxand . ys5220) (fx>? . ys521f) (fx>=? . ys521e) (fx=? . ys521d) (fx<? . ys521c) (fx<=? . ys521b) (fx-/carry . ys521a) (fx- . ys5219) (fx+/carry . ys5218) (fx+ . ys5217) (fx*/carry . ys5216) (fx* . ys5215) (greatest-fixnum . ys5214) (least-fixnum . ys5213) (fixnum-width . ys5212) (fixnum? . ys5211) (bitwise-rotate-bit-field . ys5210) (bitwise-reverse-bit-field . ys520f) (bitwise-length . ys520e) (bitwise-if . ys520d) (bitwise-first-bit-set . ys520c) (bitwise-copy-bit-field . ys520b) (bitwise-copy-bit . ys520a) (bitwise-bit-set? . ys5209) (bitwise-bit-field . ys5208) (bitwise-bit-count . ys5207) (bitwise-xor . ys5206) (bitwise-ior . ys5205) (bitwise-and . ys5204) (bitwise-not . ys5203) (bitwise-arithmetic-shift-right . ys5202) (bitwise-arithmetic-shift-left . ys5201) (bitwise-arithmetic-shift . ys5200) (zero? . ys51ff) (vector? . ys51fe) (vector-set! . ys51fd) (vector-ref . ys51fc) (vector-map . ys51fb) (vector-length . ys51fa) (vector-for-each . ys51f9) (vector-fill! . ys51f8) (vector->list . ys51f7) (vector . ys51f6) (values . ys51f5) (truncate . ys51f4) (tan . ys51f3) (symbol? . ys51f2) (symbol=? . ys51f1) (symbol->string . ys51f0) (substring . ys51ef) (string? . ys51ee) (string>? . ys51ed) (string>=? . ys51ec) (string=? . ys51eb) (string<? . ys51ea) (string<=? . ys51e9) (string-ref . ys51e8) (string-length . ys51e7) (string-for-each . ys51e6) (string-copy . ys51e5) (string-append . ys51e4) (string->symbol . ys51e3) (string->number . ys51e2) (string->list . ys51e1) (string . ys51e0) (sqrt . ys51df) (sin . ys51de) (round . ys51dd) (reverse . ys51dc) (real? . ys51db) (real-valued? . ys51da) (real-part . ys51d9) (rationalize . ys51d8) (rational? . ys51d7) (rational-valued? . ys51d6) (procedure? . ys51d5) (positive? . ys51d4) (pair? . ys51d3) (odd? . ys51d2) (numerator . ys51d1) (number? . ys51d0) (number->string . ys51cf) (null? . ys51ce) (not . ys51cd) (negative? . ys51cc) (nan? . ys51cb) (min . ys51ca) (max . ys51c9) (map . ys51c8) (make-vector . ys51c7) (make-string . ys51c6) (make-rectangular . ys51c5) (make-polar . ys51c4) (magnitude . ys51c3) (log . ys51c2) (list? . ys51c1) (list-tail . ys51c0) (list-ref . ys51bf) (list->vector . ys51be) (list->string . ys51bd) (list . ys51bc) (length . ys51bb) (lcm . ys51ba) (integer? . ys51b9) (integer-valued? . ys51b8) (integer->char . ys51b7) (infinite? . ys51b6) (inexact? . ys51b5) (inexact . ys51b4) (imag-part . ys51b3) (gcd . ys51b2) (for-each . ys51b1) (floor . ys51b0) (finite? . ys51af) (expt . ys51ae) (exp . ys51ad) (exact? . ys51ac) (exact-integer-sqrt . ys51ab) (exact . ys51aa) (even? . ys51a9) (error . ys51a8) (eqv? . ys51a7) (equal? . ys51a6) (eq? . ys51a5) (dynamic-wind . ys51a4) (div0-and-mod0 . ys51a3) (mod0 . ys51a2) (div0 . ys51a1) (div-and-mod . ys51a0) (mod . ys519f) (div . ys519e) (denominator . ys519d) (cos . ys519c) (cons . ys519b) (complex? . ys519a) (char? . ys5199) (char>? . ys5198) (char>=? . ys5197) (char=? . ys5196) (char<? . ys5195) (char<=? . ys5194) (char->integer . ys5193) (ceiling . ys5192) (call-with-values . ys5191) (call/cc . ys5190) (call-with-current-continuation . ys518f) (cddddr . ys518e) (cdddar . ys518d) (cddadr . ys518c) (cddaar . ys518b) (cdaddr . ys518a) (cdadar . ys5189) (cdaadr . ys5188) (cdaaar . ys5187) (cadddr . ys5186) (caddar . ys5185) (cadadr . ys5184) (cadaar . ys5183) (caaddr . ys5182) (caadar . ys5181) (caaadr . ys5180) (caaaar . ys517f) (cdddr . ys517e) (cddar . ys517d) (cdadr . ys517c) (cdaar . ys517b) (caddr . ys517a) (cadar . ys5179) (caadr . ys5178) (caaar . ys5177) (cddr . ys5176) (cdar . ys5175) (cadr . ys5174) (caar . ys5173) (cdr . ys5172) (car . ys5171) (boolean? . ys5170) (boolean=? . ys516f) (atan . ys516e) (assertion-violation . ys516d) (asin . ys516c) (apply . ys516b) (append . ys516a) (angle . ys5169) (acos . ys5168) (abs . ys5167) (/ . ys5166) (* . ys5165) (- . ys5164) (+ . ys5163) (>= . ys5162) (> . ys5161) (= . ys5160) (<= . ys515f) (< . ys515e) (&no-nans . ys515c) (&no-infinities . ys515b) (&i/o-encoding . ys515a) (&i/o-decoding . ys5159) (&i/o-port . ys5158) (&i/o-file-does-not-exist . ys5157) (&i/o-file-already-exists . ys5156) (&i/o-file-is-read-only . ys5155) (&i/o-file-protection . ys5154) (&i/o-filename . ys5153) (&i/o-invalid-position . ys5152) (&i/o-write . ys5151) (&i/o-read . ys5150) (&i/o . ys514f) (&undefined . ys514e) (&syntax . ys514d) (&lexical . ys514c) (&implementation-restriction . ys514b) (&non-continuable . ys514a) (&who . ys5149) (&irritants . ys5148) (&assertion . ys5147) (&violation . ys5146) (&error . ys5145) (&serious . ys5144) (&warning . ys5143) (&message . ys5142) (&condition . ys5141) (define-condition-type . ys5140) (define-enumeration . ys513f) (define-record-type . ys513e) (parent-rtd . ys513d) (nongenerative . ys513c) (opaque . ys513b) (sealed . ys513a) (protocol . ys5139) (parent . ys5138) (immutable . ys5137) (mutable . ys5136) (fields . ys5135) (error-handling-mode . ys5134) (file-options . ys5133) (buffer-mode . ys5132) (eol-style . ys5131) (guard . ys5130) (unsyntax-splicing . ys512d) (unsyntax . ys512c) (unquote-splicing . ys512b) (unquote . ys512a) (_ . ys5129) (else . ys5128) (=> . ys5127) (... . ys5126) (assert . ys5125) (endianness . ys5124) (do . ys5121) (cond . ys5120) (let* . ys511f) (let*-values . ys511e) (let-values . ys511d) (identifier-syntax . ys511c) (with-syntax . ys511b) (quasisyntax . ys511a) (quasiquote . ys5119) (syntax-rules . ys5118) (record-constructor-descriptor . ys5115) (record-type-descriptor . ys5114) (case . ys5113) (unless . ys5111) (when . ys5110) (or . ys510f) (and . ys510e) (if . ys510d) (let . ys510c) (letrec* . ys510b) (letrec . ys510a) (case-lambda . ys5108) (lambda . ys5107) (syntax . ys5106) (syntax-case . ys5105) (quote . ys5104) (letrec-syntax . ys5102) (let-syntax . ys5101) (set! . ys5100) (begin . ys50fe) (define-syntax . ys50fc) (define . ys50fb)) '() values values '#f '#f '#t '#f) (ys2c87@ys2ad3@install-library 'ys542e '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . ys3135) (quotient . ys52e1) (null-environment . ys3133) (remainder . ys52e0) (modulo . ys52df) (inexact->exact . ys52de) (force . ys52dd) (exact->inexact . ys52dc) (make-promise . ys52db) (delay . ys5123)) '() values values '#f '#f '#t '#f) (ys2c87@ys2ad3@install-library 'ys542f '(rnrs control) '(6) '() '() '() '((do . ys5121) (unless . ys5111) (when . ys5110) (case-lambda . ys5108)) '() values values '#f '#f '#t '#f) (ys2c87@ys2ad3@install-library 'ys5430 '(rnrs eval) '(6) '() '() '() '((eval . ys3139) (environment . ys3131)) '() values values '#f '#f '#t '#f) (ys2c87@ys2ad3@install-library 'ys5431 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . ys52d7) (set-car! . ys52d6)) '() values values '#f '#f '#t '#f) (ys2c87@ys2ad3@install-library 'ys5432 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . ys52d9) (string-set! . ys52d8)) '() values values '#f '#f '#t '#f) (ys2c87@ys2ad3@install-library 'ys5433 '(rnrs programs) '(6) '() '() '() '((exit . ys52da) (command-line . ys4f93)) '() values values '#f '#f '#t '#f) (ys2c87@ys2ad3@install-library 'ys5434 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . ys2ea4) (identifier? . ys315b) (generate-temporaries . ys3147) (free-identifier=? . ys3149) (syntax->datum . ys315f) (datum->syntax . ys315d) (bound-identifier=? . ys314b) (syntax-violation . ys3159) (unsyntax-splicing . ys512d) (unsyntax . ys512c) (_ . ys5129) (... . ys5126) (with-syntax . ys511b) (quasisyntax . ys511a) (syntax . ys5106) (syntax-case . ys5105)) '() values values '#f '#f '#t '#f) (ys2c87@ys2ad3@install-library 'ys5435 '(rnrs files) '(6) '() '() '() '((delete-file . ys534a) (file-exists? . ys5349) (make-i/o-write-error . ys4d83) (make-i/o-read-error . ys4d6e) (make-i/o-port-error . ys4e24) (make-i/o-invalid-position-error . ys4d9a) (make-i/o-filename-error . ys4db5) (make-i/o-file-protection-error . ys4dce) (make-i/o-file-is-read-only-error . ys4de3) (make-i/o-file-does-not-exist-error . ys4e0d) (make-i/o-file-already-exists-error . ys4df8) (make-i/o-error . ys4d59) (i/o-write-error? . ys4d85) (i/o-read-error? . ys4d70) (i/o-port-error? . ys4e28) (i/o-invalid-position-error? . ys4d9e) (i/o-filename-error? . ys4db9) (i/o-file-protection-error? . ys4dd0) (i/o-file-is-read-only-error? . ys4de5) (i/o-file-does-not-exist-error? . ys4e0f) (i/o-file-already-exists-error? . ys4dfa) (i/o-error? . ys4d5b) (i/o-error-position . ys4da0) (i/o-error-port . ys4e2a) (i/o-error-filename . ys4dbb) (&i/o-port . ys5158) (&i/o-file-does-not-exist . ys5157) (&i/o-file-already-exists . ys5156) (&i/o-file-is-read-only . ys5155) (&i/o-file-protection . ys5154) (&i/o-filename . ys5153) (&i/o-invalid-position . ys5152) (&i/o-write . ys5151) (&i/o-read . ys5150) (&i/o . ys514f)) '() values values '#f '#f '#t '#f) (ys2c87@ys2ad3@install-library 'ys5436 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . ys5348) (vector-sort . ys5347) (list-sort . ys5346)) '() values values '#f '#f '#t '#f) (ys2c87@ys2ad3@install-library 'ys5437 '(rnrs base) '(6) '() '() '() '((zero? . ys51ff) (vector? . ys51fe) (vector-set! . ys51fd) (vector-ref . ys51fc) (vector-map . ys51fb) (vector-length . ys51fa) (vector-for-each . ys51f9) (vector-fill! . ys51f8) (vector->list . ys51f7) (vector . ys51f6) (values . ys51f5) (truncate . ys51f4) (tan . ys51f3) (symbol? . ys51f2) (symbol=? . ys51f1) (symbol->string . ys51f0) (substring . ys51ef) (string? . ys51ee) (string>? . ys51ed) (string>=? . ys51ec) (string=? . ys51eb) (string<? . ys51ea) (string<=? . ys51e9) (string-ref . ys51e8) (string-length . ys51e7) (string-for-each . ys51e6) (string-copy . ys51e5) (string-append . ys51e4) (string->symbol . ys51e3) (string->number . ys51e2) (string->list . ys51e1) (string . ys51e0) (sqrt . ys51df) (sin . ys51de) (round . ys51dd) (reverse . ys51dc) (real? . ys51db) (real-valued? . ys51da) (real-part . ys51d9) (rationalize . ys51d8) (rational? . ys51d7) (rational-valued? . ys51d6) (procedure? . ys51d5) (positive? . ys51d4) (pair? . ys51d3) (odd? . ys51d2) (numerator . ys51d1) (number? . ys51d0) (number->string . ys51cf) (null? . ys51ce) (not . ys51cd) (negative? . ys51cc) (nan? . ys51cb) (min . ys51ca) (max . ys51c9) (map . ys51c8) (make-vector . ys51c7) (make-string . ys51c6) (make-rectangular . ys51c5) (make-polar . ys51c4) (magnitude . ys51c3) (log . ys51c2) (list? . ys51c1) (list-tail . ys51c0) (list-ref . ys51bf) (list->vector . ys51be) (list->string . ys51bd) (list . ys51bc) (length . ys51bb) (lcm . ys51ba) (integer? . ys51b9) (integer-valued? . ys51b8) (integer->char . ys51b7) (infinite? . ys51b6) (inexact? . ys51b5) (inexact . ys51b4) (imag-part . ys51b3) (gcd . ys51b2) (for-each . ys51b1) (floor . ys51b0) (finite? . ys51af) (expt . ys51ae) (exp . ys51ad) (exact? . ys51ac) (exact-integer-sqrt . ys51ab) (exact . ys51aa) (even? . ys51a9) (error . ys51a8) (eqv? . ys51a7) (equal? . ys51a6) (eq? . ys51a5) (dynamic-wind . ys51a4) (div0-and-mod0 . ys51a3) (mod0 . ys51a2) (div0 . ys51a1) (div-and-mod . ys51a0) (mod . ys519f) (div . ys519e) (denominator . ys519d) (cos . ys519c) (cons . ys519b) (complex? . ys519a) (char? . ys5199) (char>? . ys5198) (char>=? . ys5197) (char=? . ys5196) (char<? . ys5195) (char<=? . ys5194) (char->integer . ys5193) (ceiling . ys5192) (call-with-values . ys5191) (call/cc . ys5190) (call-with-current-continuation . ys518f) (cddddr . ys518e) (cdddar . ys518d) (cddadr . ys518c) (cddaar . ys518b) (cdaddr . ys518a) (cdadar . ys5189) (cdaadr . ys5188) (cdaaar . ys5187) (cadddr . ys5186) (caddar . ys5185) (cadadr . ys5184) (cadaar . ys5183) (caaddr . ys5182) (caadar . ys5181) (caaadr . ys5180) (caaaar . ys517f) (cdddr . ys517e) (cddar . ys517d) (cdadr . ys517c) (cdaar . ys517b) (caddr . ys517a) (cadar . ys5179) (caadr . ys5178) (caaar . ys5177) (cddr . ys5176) (cdar . ys5175) (cadr . ys5174) (caar . ys5173) (cdr . ys5172) (car . ys5171) (boolean? . ys5170) (boolean=? . ys516f) (atan . ys516e) (assertion-violation . ys516d) (asin . ys516c) (apply . ys516b) (append . ys516a) (angle . ys5169) (acos . ys5168) (abs . ys5167) (/ . ys5166) (* . ys5165) (- . ys5164) (+ . ys5163) (>= . ys5162) (> . ys5161) (= . ys5160) (<= . ys515f) (< . ys515e) (unquote-splicing . ys512b) (unquote . ys512a) (_ . ys5129) (else . ys5128) (=> . ys5127) (... . ys5126) (assert . ys5125) (cond . ys5120) (let* . ys511f) (let*-values . ys511e) (let-values . ys511d) (identifier-syntax . ys511c) (quasiquote . ys5119) (syntax-rules . ys5118) (case . ys5113) (or . ys510f) (and . ys510e) (if . ys510d) (let . ys510c) (letrec* . ys510b) (letrec . ys510a) (lambda . ys5107) (quote . ys5104) (letrec-syntax . ys5102) (let-syntax . ys5101) (set! . ys5100) (begin . ys50fe) (define-syntax . ys50fc) (define . ys50fb)) '() values values '#f '#f '#t '#f) (ys2c87@ys2ad3@install-library 'ys5438 '(rnrs lists) '(6) '() '() '() '((remove . ys52d5) (remv . ys52d4) (remp . ys52d3) (remq . ys52d2) (partition . ys52d1) (memv . ys52d0) (memq . ys52cf) (memp . ys52ce) (member . ys52cd) (exists . ys52cc) (for-all . ys52cb) (fold-right . ys52ca) (fold-left . ys52c9) (find . ys52c8) (filter . ys52c7) (cons* . ys52c6) (assv . ys52c5) (assq . ys52c4) (assp . ys52c3) (assoc . ys52c2)) '() values values '#f '#f '#t '#f) (ys2c87@ys2ad3@install-library 'ys5439 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . ys5330) (call-with-input-file . ys532f) (write-char . ys532e) (write . ys532d) (with-output-to-file . ys532c) (with-input-from-file . ys532b) (read-char . ys532a) (read . ys5329) (peek-char . ys5328) (open-output-file . ys5327) (open-input-file . ys5326) (newline . ys5325) (display . ys5324) (close-output-port . ys5323) (close-input-port . ys5322) (eof-object? . ys5321) (eof-object . ys5320) (current-error-port . ys531f) (current-output-port . ys531e) (current-input-port . ys531d) (output-port? . ys531c) (input-port? . ys531b) (make-i/o-write-error . ys4d83) (make-i/o-read-error . ys4d6e) (make-i/o-port-error . ys4e24) (make-i/o-invalid-position-error . ys4d9a) (make-i/o-filename-error . ys4db5) (make-i/o-file-protection-error . ys4dce) (make-i/o-file-is-read-only-error . ys4de3) (make-i/o-file-does-not-exist-error . ys4e0d) (make-i/o-file-already-exists-error . ys4df8) (make-i/o-error . ys4d59) (i/o-write-error? . ys4d85) (i/o-read-error? . ys4d70) (i/o-port-error? . ys4e28) (i/o-invalid-position-error? . ys4d9e) (i/o-filename-error? . ys4db9) (i/o-file-protection-error? . ys4dd0) (i/o-file-is-read-only-error? . ys4de5) (i/o-file-does-not-exist-error? . ys4e0f) (i/o-file-already-exists-error? . ys4dfa) (i/o-error? . ys4d5b) (i/o-error-position . ys4da0) (i/o-error-port . ys4e2a) (i/o-error-filename . ys4dbb) (&i/o-port . ys5158) (&i/o-file-does-not-exist . ys5157) (&i/o-file-already-exists . ys5156) (&i/o-file-is-read-only . ys5155) (&i/o-file-protection . ys5154) (&i/o-filename . ys5153) (&i/o-invalid-position . ys5152) (&i/o-write . ys5151) (&i/o-read . ys5150) (&i/o . ys514f)) '() values values '#f '#f '#t '#f) (ys2c87@ys2ad3@install-library 'ys543a '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . ys52f1) (utf32->string . ys52a6) (utf16->string . ys52a5) (utf8->string . ys52a4) (uint-list->bytevector . ys52a3) (u8-list->bytevector . ys52a2) (string->utf8 . ys52a1) (string->utf32 . ys52a0) (string->utf16 . ys529f) (sint-list->bytevector . ys529e) (native-endianness . ys529d) (bytevector? . ys529c) (bytevector=? . ys529b) (bytevector-uint-set! . ys529a) (bytevector-uint-ref . ys5299) (bytevector-u8-set! . ys5298) (bytevector-u8-ref . ys5297) (bytevector-u64-set! . ys5296) (bytevector-u64-ref . ys5295) (bytevector-u64-native-set! . ys5294) (bytevector-u64-native-ref . ys5293) (bytevector-u32-set! . ys5292) (bytevector-u32-ref . ys5291) (bytevector-u32-native-set! . ys5290) (bytevector-u32-native-ref . ys528f) (bytevector-u16-set! . ys528e) (bytevector-u16-ref . ys528d) (bytevector-u16-native-set! . ys528c) (bytevector-u16-native-ref . ys528b) (bytevector-sint-set! . ys528a) (bytevector-sint-ref . ys5289) (bytevector-s8-set! . ys5288) (bytevector-s8-ref . ys5287) (bytevector-s64-set! . ys5286) (bytevector-s64-ref . ys5285) (bytevector-s64-native-set! . ys5284) (bytevector-s64-native-ref . ys5283) (bytevector-s32-set! . ys5282) (bytevector-s32-ref . ys5281) (bytevector-s32-native-set! . ys5280) (bytevector-s32-native-ref . ys527f) (bytevector-s16-set! . ys527e) (bytevector-s16-ref . ys527d) (bytevector-s16-native-set! . ys527c) (bytevector-s16-native-ref . ys527b) (bytevector-length . ys527a) (bytevector-ieee-single-ref . ys5279) (bytevector-ieee-single-set! . ys5278) (bytevector-ieee-single-native-set! . ys5277) (bytevector-ieee-single-native-ref . ys5276) (bytevector-ieee-double-set! . ys5275) (bytevector-ieee-double-ref . ys5274) (bytevector-ieee-double-native-set! . ys5273) (bytevector-ieee-double-native-ref . ys5272) (bytevector-fill! . ys5271) (bytevector-copy! . ys5270) (bytevector-copy . ys526f) (bytevector->uint-list . ys526e) (bytevector->u8-list . ys526d) (bytevector->sint-list . ys526c) (endianness . ys5124)) '() values values '#f '#f '#t '#f) (ys2c87@ys2ad3@install-library 'ys543b '(rnrs unicode) '(6) '() '() '() '((string-upcase . ys5378) (string-titlecase . ys5377) (string-normalize-nfkd . ys5376) (string-normalize-nfkc . ys5375) (string-normalize-nfd . ys5374) (string-normalize-nfc . ys5373) (string-foldcase . ys5372) (string-downcase . ys5371) (string-ci>? . ys5370) (string-ci>=? . ys536f) (string-ci=? . ys536e) (string-ci<? . ys536d) (string-ci<=? . ys536c) (char-whitespace? . ys536b) (char-upper-case? . ys536a) (char-title-case? . ys5369) (char-numeric? . ys5368) (char-lower-case? . ys5367) (char-general-category . ys5366) (char-upcase . ys5365) (char-titlecase . ys5364) (char-foldcase . ys5363) (char-downcase . ys5362) (char-ci>? . ys5361) (char-ci>=? . ys5360) (char-ci=? . ys535f) (char-ci<? . ys535e) (char-ci<=? . ys535d) (char-alphabetic? . ys535c)) '() values values '#f '#f '#t '#f) (ys2c87@ys2ad3@install-library 'ys543c '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . ys52bb) (raise-continuable . ys52ba) (raise . ys52b9) (guard . ys5130) (else . ys5128) (=> . ys5127)) '() values values '#f '#f '#t '#f) (ys2c87@ys2ad3@install-library 'ys543d '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . ys5210) (bitwise-reverse-bit-field . ys520f) (bitwise-length . ys520e) (bitwise-if . ys520d) (bitwise-first-bit-set . ys520c) (bitwise-copy-bit-field . ys520b) (bitwise-copy-bit . ys520a) (bitwise-bit-set? . ys5209) (bitwise-bit-field . ys5208) (bitwise-bit-count . ys5207) (bitwise-xor . ys5206) (bitwise-ior . ys5205) (bitwise-and . ys5204) (bitwise-not . ys5203) (bitwise-arithmetic-shift-right . ys5202) (bitwise-arithmetic-shift-left . ys5201) (bitwise-arithmetic-shift . ys5200)) '() values values '#f '#f '#t '#f) (ys2c87@ys2ad3@install-library 'ys543e '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . ys523d) (fxxor . ys523c) (fxrotate-bit-field . ys523b) (fxreverse-bit-field . ys523a) (fxpositive? . ys5239) (fxodd? . ys5238) (fxnot . ys5237) (fxnegative? . ys5236) (fxmod0 . ys5235) (fxmod . ys5234) (fxmin . ys5233) (fxmax . ys5232) (fxlength . ys5231) (fxior . ys5230) (fxif . ys522f) (fxfirst-bit-set . ys522e) (fxeven? . ys522d) (fxdiv0-and-mod0 . ys522c) (fxdiv0 . ys522b) (fxdiv-and-mod . ys522a) (fxdiv . ys5229) (fxcopy-bit-field . ys5228) (fxcopy-bit . ys5227) (fxbit-set? . ys5226) (fxbit-field . ys5225) (fxbit-count . ys5224) (fxarithmetic-shift-right . ys5223) (fxarithmetic-shift-left . ys5222) (fxarithmetic-shift . ys5221) (fxand . ys5220) (fx>? . ys521f) (fx>=? . ys521e) (fx=? . ys521d) (fx<? . ys521c) (fx<=? . ys521b) (fx-/carry . ys521a) (fx- . ys5219) (fx+/carry . ys5218) (fx+ . ys5217) (fx*/carry . ys5216) (fx* . ys5215) (greatest-fixnum . ys5214) (least-fixnum . ys5213) (fixnum-width . ys5212) (fixnum? . ys5211)) '() values values '#f '#f '#t '#f) (ys2c87@ys2ad3@install-library 'ys543f '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . ys4e84) (no-infinities-violation? . ys4e6f) (make-no-nans-violation . ys4e82) (make-no-infinities-violation . ys4e6d) (real->flonum . ys526b) (flzero? . ys526a) (fltruncate . ys5269) (fltan . ys5268) (flsqrt . ys5267) (flsin . ys5266) (flround . ys5265) (flpositive? . ys5264) (flonum? . ys5263) (flodd? . ys5262) (flnumerator . ys5261) (flnegative? . ys5260) (flnan? . ys525f) (flmod0 . ys525e) (flmod . ys525d) (flmin . ys525c) (flmax . ys525b) (fllog . ys525a) (flinteger? . ys5259) (flinfinite? . ys5258) (flfloor . ys5257) (flfinite? . ys5256) (flexpt . ys5255) (flexp . ys5254) (fleven? . ys5253) (fldiv0-and-mod0 . ys5252) (fldiv0 . ys5251) (fldiv-and-mod . ys5250) (fldiv . ys524f) (fldenominator . ys524e) (flcos . ys524d) (flceiling . ys524c) (flatan . ys524b) (flasin . ys524a) (flacos . ys5249) (flabs . ys5248) (fl>? . ys5247) (fl>=? . ys5246) (fl=? . ys5245) (fl<? . ys5244) (fl<=? . ys5243) (fl/ . ys5242) (fl- . ys5241) (fl+ . ys5240) (fl* . ys523f) (fixnum->flonum . ys523e) (&no-nans . ys515c) (&no-infinities . ys515b)) '() values values '#f '#f '#t '#f) (ys2c87@ys2ad3@install-library 'ys5440 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . ys5345) (string-ci-hash . ys5344) (string-hash . ys5343) (equal-hash . ys5342) (hashtable-equivalence-function . ys5341) (make-hashtable . ys5340) (hashtable-hash-function . ys533f) (make-eqv-hashtable . ys533e) (make-eq-hashtable . ys533d) (hashtable? . ys533c) (hashtable-update! . ys533b) (hashtable-size . ys533a) (hashtable-set! . ys5339) (hashtable-ref . ys5338) (hashtable-mutable? . ys5337) (hashtable-keys . ys5336) (hashtable-entries . ys5335) (hashtable-delete! . ys5334) (hashtable-copy . ys5333) (hashtable-contains? . ys5332) (hashtable-clear! . ys5331)) '() values values '#f '#f '#t '#f) (ys2c87@ys2ad3@install-library 'ys5441 '(rnrs io ports) '(6) '() '() '() '((eof-object? . ys5321) (eof-object . ys5320) (current-error-port . ys531f) (current-output-port . ys531e) (current-input-port . ys531d) (output-port? . ys531c) (input-port? . ys531b) (utf-8-codec . ys531a) (utf-16-codec . ys5319) (transcoder-error-handling-mode . ys5318) (transcoder-eol-style . ys5317) (transcoder-codec . ys5316) (transcoded-port . ys5315) (textual-port? . ys5314) (string->bytevector . ys5313) (standard-output-port . ys5312) (standard-input-port . ys5311) (standard-error-port . ys5310) (set-port-position! . ys530f) (put-u8 . ys530e) (put-string . ys530d) (put-datum . ys530c) (put-char . ys530b) (put-bytevector . ys530a) (port? . ys5309) (port-transcoder . ys5308) (port-position . ys5307) (port-has-set-port-position!? . ys5306) (port-has-port-position? . ys5305) (port-eof? . ys5304) (output-port-buffer-mode . ys5303) (open-string-output-port . ys5302) (open-string-input-port . ys5301) (open-file-output-port . ys5300) (open-file-input/output-port . ys52ff) (open-file-input-port . ys52fe) (open-bytevector-output-port . ys52fd) (open-bytevector-input-port . ys52fc) (native-transcoder . ys52fb) (native-eol-style . ys52fa) (make-transcoder . ys52f9) (latin-1-codec . ys52f8) (make-i/o-write-error . ys4d83) (make-i/o-read-error . ys4d6e) (make-i/o-port-error . ys4e24) (make-i/o-invalid-position-error . ys4d9a) (make-i/o-filename-error . ys4db5) (make-i/o-file-protection-error . ys4dce) (make-i/o-file-is-read-only-error . ys4de3) (make-i/o-file-does-not-exist-error . ys4e0d) (make-i/o-file-already-exists-error . ys4df8) (make-i/o-error . ys4d59) (make-i/o-encoding-error . ys4e54) (make-i/o-decoding-error . ys4e3d) (make-custom-textual-output-port . ys52f7) (make-custom-textual-input/output-port . ys52f6) (make-custom-textual-input-port . ys52f5) (make-custom-binary-output-port . ys52f4) (make-custom-binary-input/output-port . ys52f3) (make-custom-binary-input-port . ys52f2) (lookahead-u8 . ys52f0) (lookahead-char . ys52ef) (i/o-write-error? . ys4d85) (i/o-read-error? . ys4d70) (i/o-port-error? . ys4e28) (i/o-invalid-position-error? . ys4d9e) (i/o-filename-error? . ys4db9) (i/o-file-protection-error? . ys4dd0) (i/o-file-is-read-only-error? . ys4de5) (i/o-file-does-not-exist-error? . ys4e0f) (i/o-file-already-exists-error? . ys4dfa) (i/o-error? . ys4d5b) (i/o-error-position . ys4da0) (i/o-error-port . ys4e2a) (i/o-error-filename . ys4dbb) (i/o-encoding-error? . ys4e58) (i/o-encoding-error-char . ys4e5a) (i/o-decoding-error? . ys4e3f) (get-u8 . ys52ee) (get-string-n! . ys52ed) (get-string-n . ys52ec) (get-string-all . ys52eb) (get-line . ys52ea) (get-datum . ys52e9) (get-char . ys52e8) (get-bytevector-some . ys52e7) (get-bytevector-n! . ys52e6) (get-bytevector-n . ys52e5) (get-bytevector-all . ys52e4) (flush-output-port . ys52e3) (close-port . ys52e2) (call-with-string-output-port . ys52c1) (call-with-port . ys52c0) (call-with-bytevector-output-port . ys52bf) (bytevector->string . ys52be) (buffer-mode? . ys52bd) (binary-port? . ys52bc) (&i/o-encoding . ys515a) (&i/o-decoding . ys5159) (&i/o-port . ys5158) (&i/o-file-does-not-exist . ys5157) (&i/o-file-already-exists . ys5156) (&i/o-file-is-read-only . ys5155) (&i/o-file-protection . ys5154) (&i/o-filename . ys5153) (&i/o-invalid-position . ys5152) (&i/o-write . ys5151) (&i/o-read . ys5150) (&i/o . ys514f) (error-handling-mode . ys5134) (file-options . ys5133) (buffer-mode . ys5132) (eol-style . ys5131)) '() values values '#f '#f '#t '#f) (ys2c87@ys2ad3@install-library 'ys5442 '(rnrs enums) '(6) '() '() '() '((make-enumeration . ys52b8) (enum-set=? . ys52b7) (enum-set-universe . ys52b6) (enum-set-union . ys52b5) (enum-set-subset? . ys52b4) (enum-set-projection . ys52b3) (enum-set-member? . ys52b2) (enum-set-intersection . ys52b1) (enum-set-indexer . ys52b0) (enum-set-difference . ys52af) (enum-set-constructor . ys52ae) (enum-set-complement . ys52ad) (enum-set->list . ys52ac) (define-enumeration . ys513f)) '() values values '#f '#f '#t '#f) (ys2c87@ys2ad3@install-library 'ys5443 '(rnrs conditions) '(6) '() '() '() '((who-condition? . ys4ccf) (warning? . ys4c47) (violation? . ys4c86) (undefined-violation? . ys4d46) (syntax-violation? . ys4d2d) (syntax-violation-subform . ys4d31) (syntax-violation-form . ys4d2f) (syntax-violation . ys3159) (simple-conditions . ys52ab) (serious-condition? . ys4c5c) (non-continuable-violation? . ys4ce6) (message-condition? . ys4c30) (make-who-condition . ys4ccb) (make-warning . ys4c45) (make-violation . ys4c84) (make-undefined-violation . ys4d44) (make-syntax-violation . ys4d27) (make-serious-condition . ys4c5a) (make-non-continuable-violation . ys4ce4) (make-message-condition . ys4c2c) (make-lexical-violation . ys4d0e) (make-irritants-condition . ys4cb0) (make-implementation-restriction-violation . ys4cf9) (make-error . ys4c6f) (make-assertion-violation . ys4c99) (lexical-violation? . ys4d10) (irritants-condition? . ys4cb4) (implementation-restriction-violation? . ys4cfb) (error? . ys4c71) (condition-who . ys4cd1) (condition-predicate . ys52aa) (condition-message . ys4c32) (condition-irritants . ys4cb6) (condition-accessor . ys52a9) (condition . ys52a8) (assertion-violation? . ys4c9b) (condition? . ys52a7) (&undefined . ys514e) (&syntax . ys514d) (&lexical . ys514c) (&implementation-restriction . ys514b) (&non-continuable . ys514a) (&who . ys5149) (&irritants . ys5148) (&assertion . ys5147) (&violation . ys5146) (&error . ys5145) (&serious . ys5144) (&warning . ys5143) (&message . ys5142) (&condition . ys5141) (define-condition-type . ys5140)) '() values values '#f '#f '#t '#f) (ys2c87@ys2ad3@install-library 'ys5444 '(rnrs records inspection) '(6) '() '() '() '((record? . ys5354) (record-type-uid . ys5353) (record-type-sealed? . ys5352) (record-type-parent . ys5351) (record-type-opaque? . ys5350) (record-type-name . ys534f) (record-type-generative? . ys534e) (record-type-field-names . ys534d) (record-rtd . ys534c) (record-field-mutable? . ys534b)) '() values values '#f '#f '#t '#f) (ys2c87@ys2ad3@install-library 'ys5445 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . ys535b) (record-predicate . ys535a) (record-mutator . ys5359) (record-constructor . ys5358) (record-accessor . ys5357) (make-record-type-descriptor . ys5356) (make-record-constructor-descriptor . ys5355)) '() values values '#f '#f '#t '#f) (ys2c87@ys2ad3@install-library 'ys5446 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . ys513e) (parent-rtd . ys513d) (nongenerative . ys513c) (opaque . ys513b) (sealed . ys513a) (protocol . ys5139) (parent . ys5138) (immutable . ys5137) (mutable . ys5136) (fields . ys5135) (record-constructor-descriptor . ys5115) (record-type-descriptor . ys5114)) '() values values '#f '#f '#t '#f) (ys2c87@ys2ad3@install-library 'ys5447 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . ys4e88) (&no-nans-rtd . ys4e86) (&no-infinities-rcd . ys4e73) (&no-infinities-rtd . ys4e71) (&i/o-encoding-rcd . ys4e5e) (&i/o-encoding-rtd . ys4e5c) (&i/o-decoding-rcd . ys4e43) (&i/o-decoding-rtd . ys4e41) (&i/o-port-rcd . ys4e2e) (&i/o-port-rtd . ys4e2c) (&i/o-file-does-not-exist-rcd . ys4e13) (&i/o-file-does-not-exist-rtd . ys4e11) (&i/o-file-already-exists-rcd . ys4dfe) (&i/o-file-already-exists-rtd . ys4dfc) (&i/o-file-is-read-only-rcd . ys4de9) (&i/o-file-is-read-only-rtd . ys4de7) (&i/o-file-protection-rcd . ys4dd4) (&i/o-file-protection-rtd . ys4dd2) (&i/o-filename-rcd . ys4dbf) (&i/o-filename-rtd . ys4dbd) (&i/o-invalid-position-rcd . ys4da4) (&i/o-invalid-position-rtd . ys4da2) (&i/o-write-rcd . ys4d89) (&i/o-write-rtd . ys4d87) (&i/o-read-rcd . ys4d74) (&i/o-read-rtd . ys4d72) (&i/o-rcd . ys4d5f) (&i/o-rtd . ys4d5d) (&undefined-rcd . ys4d4a) (&undefined-rtd . ys4d48) (&syntax-rcd . ys4d35) (&syntax-rtd . ys4d33) (&lexical-rcd . ys4d14) (&lexical-rtd . ys4d12) (&implementation-restriction-rcd . ys4cff) (&implementation-restriction-rtd . ys4cfd) (&non-continuable-rcd . ys4cea) (&non-continuable-rtd . ys4ce8) (&who-rcd . ys4cd5) (&who-rtd . ys4cd3) (&irritants-rcd . ys4cba) (&irritants-rtd . ys4cb8) (&assertion-rcd . ys4c9f) (&assertion-rtd . ys4c9d) (&violation-rcd . ys4c8a) (&violation-rtd . ys4c88) (&error-rcd . ys4c75) (&error-rtd . ys4c73) (&serious-rcd . ys4c60) (&serious-rtd . ys4c5e) (&warning-rcd . ys4c4b) (&warning-rtd . ys4c49) (&message-rcd . ys4c36) (&message-rtd . ys4c34) (&condition-rcd . ys4bd7) (&condition-rtd . ys4bd5) (syntax-error . ys3155) (syntax-dispatch . ys3079) (pretty-print . ys5427) (eval-core . ys5426) (set-symbol-value! . ys5425) (symbol-value . ys5424) (gensym . ys5423) (void . ys5422) (load . ys4f99) (interaction-environment . ys3167) (char-ready? . ys5421) (regexp? . ys5420) (read-line . ys541f) (gensym-prefix-set! . ys541e) (ungensym . ys541d) (alist->eq-hash-table . ys541c) (assoc-ref . ys541b) (print . ys541a) (format . ys5419) (host-os . ys5418) (library-path . ys2ab2) (standard-library-path . ys5417) (file-newer? . ys5416) (stat-mtime . ys5415) (write-to-file . ys5414) (file->list . ys5413) (file->string . ys5412) (digit->integer . ys5411) (call-with-string-input-port . ys5410) (call-with-string-io . ys540f) (string-split . ys540e) (bytevector-for-each . ys540d) (string->regexp . ys540c) (rxmatch . ys540b) (regexp-replace-all . ys540a) (hashtable-for-each . ys5409) (mosh-cache-dir . ys289d) (call-process . ys5408) (local-tz-offset . ys5407) (microseconds . ys5406) (directory-list . ys5405) (set-current-directory! . ys5404) (expand-path . ys5403) (current-directory . ys5402) (%spawn . ys5401) (%waitpid . ys5400) (simple-struct-name . ys53ff) (simple-struct-set! . ys53fe) (simple-struct-ref . ys53fd) (make-simple-struct . ys53fc) (simple-struct? . ys53fb) (pointer-ref-c-int64 . ys53fa) (pointer-ref-c-int32 . ys53f9) (pointer-ref-c-int16 . ys53f8) (pointer-ref-c-int8 . ys53f7) (pointer-ref-c-uint64 . ys53f6) (pointer-ref-c-uint32 . ys53f5) (pointer-ref-c-uint16 . ys53f4) (pointer-ref-c-uint8 . ys53f3) (pointer-set-c-uint64! . ys53f2) (pointer-set-c-uint32! . ys53f1) (pointer-set-c-uint16! . ys53f0) (pointer-set-c-uint8! . ys53ef) (pointer-set-c-int64! . ys53ee) (pointer-set-c-int32! . ys53ed) (pointer-set-c-int16! . ys53ec) (pointer-set-c-int8! . ys53eb) (pointer-set-c-pointer! . ys53ea) (pointer-set-c-double! . ys53e9) (pointer-set-c-float! . ys53e8) (pointer-set-c-long-long! . ys53e7) (pointer-set-c-long! . ys53e6) (pointer-set-c-int! . ys53e5) (pointer-set-c-short! . ys53e4) (pointer-set-c-char! . ys53e3) (pointer-ref-c-pointer . ys53e2) (pointer-ref-c-double . ys53e1) (pointer-ref-c-float . ys53e0) (pointer-ref-c-unsigned-long-long . ys53df) (pointer-ref-c-signed-long-long . ys53de) (pointer-ref-c-unsigned-long . ys53dd) (pointer-ref-c-signed-long . ys53dc) (pointer-ref-c-unsigned-int . ys53db) (pointer-ref-c-signed-int . ys53da) (pointer-ref-c-unsigned-short . ys53d9) (pointer-ref-c-signed-short . ys53d8) (pointer-ref-c-unsigned-char . ys53d7) (pointer-ref-c-signed-char . ys53d6) (pointer->integer . ys53d5) (integer->pointer . ys53d4) (pointer? . ys53d3) (shared-errno . ys53d2) (%ffi-free-c-callback-trampoline . ys53d1) (%ffi-make-c-callback-trampoline . ys53d0) (%ffi-free . ys53cf) (%ffi-malloc . ys53ce) (%ffi-supported? . ys53cd) (%ffi-pointer->string . ys53cc) (%ffi-call->string-or-zero . ys53cb) (%ffi-call->double . ys53ca) (%ffi-call->void* . ys53c9) (%ffi-call->void . ys53c8) (%ffi-call->char . ys53c7) (%ffi-call->uint . ys53c6) (%ffi-call->int . ys53c5) (%ffi-lookup . ys53c4) (%ffi-open . ys53c3) (null-terminated-utf8->string . ys53c2) (null-terminated-bytevector->string . ys53c1) (%fork . ys53c0) (%pipe . ys53bf) (p . ys53be) (open-output-string . ys53bd) (get-output-string . ys53bc) (file-stat-ctime . ys53bb) (file-stat-atime . ys53ba) (file-stat-mtime . ys53b9) (file-size-in-bytes . ys53b8) (file-writable? . ys53b7) (file-executable? . ys53b6) (file-readable? . ys53b5) (file-regular? . ys53b4) (file-symbolic-link? . ys53b3) (file-directory? . ys53b2) (create-symbolic-link . ys53b1) (rename-file . ys53b0) (delete-directory . ys53af) (create-directory . ys53ae) (create-mosh-cache-dir . ys53ad) (get-environment-variables . ys53ac) (current-exception-handler . ys53ab) (get-environment-variable . ys53aa) (join-wraps . ys53a9) (id->real-label . ys53a8) (same-marks? . ys53a7) (same-marks*? . ys53a6) (get-timeofday . ys53a5) (get-command-line . ys53a4) (sys-display . ys53a3) (whereis . ys53a2) (register . ys53a1) (vm-join! . ys53a0) (vm-set-value! . ys539f) (vm? . ys539e) (main-vm? . ys539d) (vm-eval . ys539c) (vm-self . ys539b) (vm-start! . ys539a) (make-vm . ys5399) (mutex-try-lock! . ys5398) (mutex-unlock! . ys5397) (mutex-lock! . ys5396) (mutex? . ys5395) (make-mutex . ys5394) (condition-variable-notify-all! . ys5393) (condition-variable-notify! . ys5392) (condition-variable-wait! . ys5391) (make-condition-variable . ys5390) (mosh-executable-path . ys538f) (make-file-options . ys538e) (source-info . ys538d) (make-compiler-instruction . ys538c) (make-instruction . ys538b) (set-source-info! . ys538a) (bignum? . ys5389) (fast-equal? . ys5388) (fasl-read . ys5387) (fasl-write . ys5386) (time-usage . ys5385) (os-constant . ys5384) (disasm . ys5383) (make-parameter . ys289b) (socket-port . ys5382) (socket-shutdown . ys5381) (socket-close . ys5380) (socket-send . ys537f) (socket-recv! . ys537e) (socket-recv . ys537d) (make-server-socket . ys537c) (make-client-socket . ys537b) (socket-accept . ys537a) (socket? . ys5379) (string-upcase . ys5378) (string-titlecase . ys5377) (string-normalize-nfkd . ys5376) (string-normalize-nfkc . ys5375) (string-normalize-nfd . ys5374) (string-normalize-nfc . ys5373) (string-foldcase . ys5372) (string-downcase . ys5371) (string-ci>? . ys5370) (string-ci>=? . ys536f) (string-ci=? . ys536e) (string-ci<? . ys536d) (string-ci<=? . ys536c) (char-whitespace? . ys536b) (char-upper-case? . ys536a) (char-title-case? . ys5369) (char-numeric? . ys5368) (char-lower-case? . ys5367) (char-general-category . ys5366) (char-upcase . ys5365) (char-titlecase . ys5364) (char-foldcase . ys5363) (char-downcase . ys5362) (char-ci>? . ys5361) (char-ci>=? . ys5360) (char-ci=? . ys535f) (char-ci<? . ys535e) (char-ci<=? . ys535d) (char-alphabetic? . ys535c) (make-variable-transformer . ys2ea4) (identifier? . ys315b) (generate-temporaries . ys3147) (free-identifier=? . ys3149) (syntax->datum . ys315f) (datum->syntax . ys315d) (bound-identifier=? . ys314b) (record-type-descriptor? . ys535b) (record-predicate . ys535a) (record-mutator . ys5359) (record-constructor . ys5358) (record-accessor . ys5357) (make-record-type-descriptor . ys5356) (make-record-constructor-descriptor . ys5355) (record? . ys5354) (record-type-uid . ys5353) (record-type-sealed? . ys5352) (record-type-parent . ys5351) (record-type-opaque? . ys5350) (record-type-name . ys534f) (record-type-generative? . ys534e) (record-type-field-names . ys534d) (record-rtd . ys534c) (record-field-mutable? . ys534b) (delete-file . ys534a) (file-exists? . ys5349) (vector-sort! . ys5348) (vector-sort . ys5347) (list-sort . ys5346) (symbol-hash . ys5345) (string-ci-hash . ys5344) (string-hash . ys5343) (equal-hash . ys5342) (hashtable-equivalence-function . ys5341) (make-hashtable . ys5340) (hashtable-hash-function . ys533f) (make-eqv-hashtable . ys533e) (make-eq-hashtable . ys533d) (hashtable? . ys533c) (hashtable-update! . ys533b) (hashtable-size . ys533a) (hashtable-set! . ys5339) (hashtable-ref . ys5338) (hashtable-mutable? . ys5337) (hashtable-keys . ys5336) (hashtable-entries . ys5335) (hashtable-delete! . ys5334) (hashtable-copy . ys5333) (hashtable-contains? . ys5332) (hashtable-clear! . ys5331) (call-with-output-file . ys5330) (call-with-input-file . ys532f) (write-char . ys532e) (write . ys532d) (with-output-to-file . ys532c) (with-input-from-file . ys532b) (read-char . ys532a) (read . ys5329) (peek-char . ys5328) (open-output-file . ys5327) (open-input-file . ys5326) (newline . ys5325) (display . ys5324) (close-output-port . ys5323) (close-input-port . ys5322) (eof-object? . ys5321) (eof-object . ys5320) (current-error-port . ys531f) (current-output-port . ys531e) (current-input-port . ys531d) (output-port? . ys531c) (input-port? . ys531b) (utf-8-codec . ys531a) (utf-16-codec . ys5319) (transcoder-error-handling-mode . ys5318) (transcoder-eol-style . ys5317) (transcoder-codec . ys5316) (transcoded-port . ys5315) (textual-port? . ys5314) (string->bytevector . ys5313) (standard-output-port . ys5312) (standard-input-port . ys5311) (standard-error-port . ys5310) (set-port-position! . ys530f) (put-u8 . ys530e) (put-string . ys530d) (put-datum . ys530c) (put-char . ys530b) (put-bytevector . ys530a) (port? . ys5309) (port-transcoder . ys5308) (port-position . ys5307) (port-has-set-port-position!? . ys5306) (port-has-port-position? . ys5305) (port-eof? . ys5304) (output-port-buffer-mode . ys5303) (open-string-output-port . ys5302) (open-string-input-port . ys5301) (open-file-output-port . ys5300) (open-file-input/output-port . ys52ff) (open-file-input-port . ys52fe) (open-bytevector-output-port . ys52fd) (open-bytevector-input-port . ys52fc) (native-transcoder . ys52fb) (native-eol-style . ys52fa) (make-transcoder . ys52f9) (latin-1-codec . ys52f8) (make-i/o-write-error . ys4d83) (make-i/o-read-error . ys4d6e) (make-i/o-port-error . ys4e24) (make-i/o-invalid-position-error . ys4d9a) (make-i/o-filename-error . ys4db5) (make-i/o-file-protection-error . ys4dce) (make-i/o-file-is-read-only-error . ys4de3) (make-i/o-file-does-not-exist-error . ys4e0d) (make-i/o-file-already-exists-error . ys4df8) (make-i/o-error . ys4d59) (make-i/o-encoding-error . ys4e54) (make-i/o-decoding-error . ys4e3d) (make-custom-textual-output-port . ys52f7) (make-custom-textual-input/output-port . ys52f6) (make-custom-textual-input-port . ys52f5) (make-custom-binary-output-port . ys52f4) (make-custom-binary-input/output-port . ys52f3) (make-custom-binary-input-port . ys52f2) (make-bytevector . ys52f1) (lookahead-u8 . ys52f0) (lookahead-char . ys52ef) (i/o-write-error? . ys4d85) (i/o-read-error? . ys4d70) (i/o-port-error? . ys4e28) (i/o-invalid-position-error? . ys4d9e) (i/o-filename-error? . ys4db9) (i/o-file-protection-error? . ys4dd0) (i/o-file-is-read-only-error? . ys4de5) (i/o-file-does-not-exist-error? . ys4e0f) (i/o-file-already-exists-error? . ys4dfa) (i/o-error? . ys4d5b) (i/o-error-position . ys4da0) (i/o-error-port . ys4e2a) (i/o-error-filename . ys4dbb) (i/o-encoding-error? . ys4e58) (i/o-encoding-error-char . ys4e5a) (i/o-decoding-error? . ys4e3f) (get-u8 . ys52ee) (get-string-n! . ys52ed) (get-string-n . ys52ec) (get-string-all . ys52eb) (get-line . ys52ea) (get-datum . ys52e9) (get-char . ys52e8) (get-bytevector-some . ys52e7) (get-bytevector-n! . ys52e6) (get-bytevector-n . ys52e5) (get-bytevector-all . ys52e4) (flush-output-port . ys52e3) (close-port . ys52e2) (scheme-report-environment . ys3135) (quotient . ys52e1) (null-environment . ys3133) (remainder . ys52e0) (modulo . ys52df) (inexact->exact . ys52de) (force . ys52dd) (exact->inexact . ys52dc) (make-promise . ys52db) (exit . ys52da) (command-line . ys4f93) (string-fill! . ys52d9) (string-set! . ys52d8) (set-cdr! . ys52d7) (set-car! . ys52d6) (remove . ys52d5) (remv . ys52d4) (remp . ys52d3) (remq . ys52d2) (partition . ys52d1) (memv . ys52d0) (memq . ys52cf) (memp . ys52ce) (member . ys52cd) (exists . ys52cc) (for-all . ys52cb) (fold-right . ys52ca) (fold-left . ys52c9) (find . ys52c8) (filter . ys52c7) (cons* . ys52c6) (assv . ys52c5) (assq . ys52c4) (assp . ys52c3) (assoc . ys52c2) (call-with-string-output-port . ys52c1) (call-with-port . ys52c0) (call-with-bytevector-output-port . ys52bf) (bytevector->string . ys52be) (buffer-mode? . ys52bd) (binary-port? . ys52bc) (with-exception-handler . ys52bb) (raise-continuable . ys52ba) (raise . ys52b9) (eval . ys3139) (environment . ys3131) (make-enumeration . ys52b8) (enum-set=? . ys52b7) (enum-set-universe . ys52b6) (enum-set-union . ys52b5) (enum-set-subset? . ys52b4) (enum-set-projection . ys52b3) (enum-set-member? . ys52b2) (enum-set-intersection . ys52b1) (enum-set-indexer . ys52b0) (enum-set-difference . ys52af) (enum-set-constructor . ys52ae) (enum-set-complement . ys52ad) (enum-set->list . ys52ac) (who-condition? . ys4ccf) (warning? . ys4c47) (violation? . ys4c86) (undefined-violation? . ys4d46) (syntax-violation? . ys4d2d) (syntax-violation-subform . ys4d31) (syntax-violation-form . ys4d2f) (syntax-violation . ys3159) (simple-conditions . ys52ab) (serious-condition? . ys4c5c) (non-continuable-violation? . ys4ce6) (message-condition? . ys4c30) (make-who-condition . ys4ccb) (make-warning . ys4c45) (make-violation . ys4c84) (make-undefined-violation . ys4d44) (make-syntax-violation . ys4d27) (make-serious-condition . ys4c5a) (make-non-continuable-violation . ys4ce4) (make-message-condition . ys4c2c) (make-lexical-violation . ys4d0e) (make-irritants-condition . ys4cb0) (make-implementation-restriction-violation . ys4cf9) (make-error . ys4c6f) (make-assertion-violation . ys4c99) (lexical-violation? . ys4d10) (irritants-condition? . ys4cb4) (implementation-restriction-violation? . ys4cfb) (error? . ys4c71) (condition-who . ys4cd1) (condition-predicate . ys52aa) (condition-message . ys4c32) (condition-irritants . ys4cb6) (condition-accessor . ys52a9) (condition . ys52a8) (assertion-violation? . ys4c9b) (condition? . ys52a7) (utf32->string . ys52a6) (utf16->string . ys52a5) (utf8->string . ys52a4) (uint-list->bytevector . ys52a3) (u8-list->bytevector . ys52a2) (string->utf8 . ys52a1) (string->utf32 . ys52a0) (string->utf16 . ys529f) (sint-list->bytevector . ys529e) (native-endianness . ys529d) (bytevector? . ys529c) (bytevector=? . ys529b) (bytevector-uint-set! . ys529a) (bytevector-uint-ref . ys5299) (bytevector-u8-set! . ys5298) (bytevector-u8-ref . ys5297) (bytevector-u64-set! . ys5296) (bytevector-u64-ref . ys5295) (bytevector-u64-native-set! . ys5294) (bytevector-u64-native-ref . ys5293) (bytevector-u32-set! . ys5292) (bytevector-u32-ref . ys5291) (bytevector-u32-native-set! . ys5290) (bytevector-u32-native-ref . ys528f) (bytevector-u16-set! . ys528e) (bytevector-u16-ref . ys528d) (bytevector-u16-native-set! . ys528c) (bytevector-u16-native-ref . ys528b) (bytevector-sint-set! . ys528a) (bytevector-sint-ref . ys5289) (bytevector-s8-set! . ys5288) (bytevector-s8-ref . ys5287) (bytevector-s64-set! . ys5286) (bytevector-s64-ref . ys5285) (bytevector-s64-native-set! . ys5284) (bytevector-s64-native-ref . ys5283) (bytevector-s32-set! . ys5282) (bytevector-s32-ref . ys5281) (bytevector-s32-native-set! . ys5280) (bytevector-s32-native-ref . ys527f) (bytevector-s16-set! . ys527e) (bytevector-s16-ref . ys527d) (bytevector-s16-native-set! . ys527c) (bytevector-s16-native-ref . ys527b) (bytevector-length . ys527a) (bytevector-ieee-single-ref . ys5279) (bytevector-ieee-single-set! . ys5278) (bytevector-ieee-single-native-set! . ys5277) (bytevector-ieee-single-native-ref . ys5276) (bytevector-ieee-double-set! . ys5275) (bytevector-ieee-double-ref . ys5274) (bytevector-ieee-double-native-set! . ys5273) (bytevector-ieee-double-native-ref . ys5272) (bytevector-fill! . ys5271) (bytevector-copy! . ys5270) (bytevector-copy . ys526f) (bytevector->uint-list . ys526e) (bytevector->u8-list . ys526d) (bytevector->sint-list . ys526c) (no-nans-violation? . ys4e84) (no-infinities-violation? . ys4e6f) (make-no-nans-violation . ys4e82) (make-no-infinities-violation . ys4e6d) (real->flonum . ys526b) (flzero? . ys526a) (fltruncate . ys5269) (fltan . ys5268) (flsqrt . ys5267) (flsin . ys5266) (flround . ys5265) (flpositive? . ys5264) (flonum? . ys5263) (flodd? . ys5262) (flnumerator . ys5261) (flnegative? . ys5260) (flnan? . ys525f) (flmod0 . ys525e) (flmod . ys525d) (flmin . ys525c) (flmax . ys525b) (fllog . ys525a) (flinteger? . ys5259) (flinfinite? . ys5258) (flfloor . ys5257) (flfinite? . ys5256) (flexpt . ys5255) (flexp . ys5254) (fleven? . ys5253) (fldiv0-and-mod0 . ys5252) (fldiv0 . ys5251) (fldiv-and-mod . ys5250) (fldiv . ys524f) (fldenominator . ys524e) (flcos . ys524d) (flceiling . ys524c) (flatan . ys524b) (flasin . ys524a) (flacos . ys5249) (flabs . ys5248) (fl>? . ys5247) (fl>=? . ys5246) (fl=? . ys5245) (fl<? . ys5244) (fl<=? . ys5243) (fl/ . ys5242) (fl- . ys5241) (fl+ . ys5240) (fl* . ys523f) (fixnum->flonum . ys523e) (fxzero? . ys523d) (fxxor . ys523c) (fxrotate-bit-field . ys523b) (fxreverse-bit-field . ys523a) (fxpositive? . ys5239) (fxodd? . ys5238) (fxnot . ys5237) (fxnegative? . ys5236) (fxmod0 . ys5235) (fxmod . ys5234) (fxmin . ys5233) (fxmax . ys5232) (fxlength . ys5231) (fxior . ys5230) (fxif . ys522f) (fxfirst-bit-set . ys522e) (fxeven? . ys522d) (fxdiv0-and-mod0 . ys522c) (fxdiv0 . ys522b) (fxdiv-and-mod . ys522a) (fxdiv . ys5229) (fxcopy-bit-field . ys5228) (fxcopy-bit . ys5227) (fxbit-set? . ys5226) (fxbit-field . ys5225) (fxbit-count . ys5224) (fxarithmetic-shift-right . ys5223) (fxarithmetic-shift-left . ys5222) (fxarithmetic-shift . ys5221) (fxand . ys5220) (fx>? . ys521f) (fx>=? . ys521e) (fx=? . ys521d) (fx<? . ys521c) (fx<=? . ys521b) (fx-/carry . ys521a) (fx- . ys5219) (fx+/carry . ys5218) (fx+ . ys5217) (fx*/carry . ys5216) (fx* . ys5215) (greatest-fixnum . ys5214) (least-fixnum . ys5213) (fixnum-width . ys5212) (fixnum? . ys5211) (bitwise-rotate-bit-field . ys5210) (bitwise-reverse-bit-field . ys520f) (bitwise-length . ys520e) (bitwise-if . ys520d) (bitwise-first-bit-set . ys520c) (bitwise-copy-bit-field . ys520b) (bitwise-copy-bit . ys520a) (bitwise-bit-set? . ys5209) (bitwise-bit-field . ys5208) (bitwise-bit-count . ys5207) (bitwise-xor . ys5206) (bitwise-ior . ys5205) (bitwise-and . ys5204) (bitwise-not . ys5203) (bitwise-arithmetic-shift-right . ys5202) (bitwise-arithmetic-shift-left . ys5201) (bitwise-arithmetic-shift . ys5200) (zero? . ys51ff) (vector? . ys51fe) (vector-set! . ys51fd) (vector-ref . ys51fc) (vector-map . ys51fb) (vector-length . ys51fa) (vector-for-each . ys51f9) (vector-fill! . ys51f8) (vector->list . ys51f7) (vector . ys51f6) (values . ys51f5) (truncate . ys51f4) (tan . ys51f3) (symbol? . ys51f2) (symbol=? . ys51f1) (symbol->string . ys51f0) (substring . ys51ef) (string? . ys51ee) (string>? . ys51ed) (string>=? . ys51ec) (string=? . ys51eb) (string<? . ys51ea) (string<=? . ys51e9) (string-ref . ys51e8) (string-length . ys51e7) (string-for-each . ys51e6) (string-copy . ys51e5) (string-append . ys51e4) (string->symbol . ys51e3) (string->number . ys51e2) (string->list . ys51e1) (string . ys51e0) (sqrt . ys51df) (sin . ys51de) (round . ys51dd) (reverse . ys51dc) (real? . ys51db) (real-valued? . ys51da) (real-part . ys51d9) (rationalize . ys51d8) (rational? . ys51d7) (rational-valued? . ys51d6) (procedure? . ys51d5) (positive? . ys51d4) (pair? . ys51d3) (odd? . ys51d2) (numerator . ys51d1) (number? . ys51d0) (number->string . ys51cf) (null? . ys51ce) (not . ys51cd) (negative? . ys51cc) (nan? . ys51cb) (min . ys51ca) (max . ys51c9) (map . ys51c8) (make-vector . ys51c7) (make-string . ys51c6) (make-rectangular . ys51c5) (make-polar . ys51c4) (magnitude . ys51c3) (log . ys51c2) (list? . ys51c1) (list-tail . ys51c0) (list-ref . ys51bf) (list->vector . ys51be) (list->string . ys51bd) (list . ys51bc) (length . ys51bb) (lcm . ys51ba) (integer? . ys51b9) (integer-valued? . ys51b8) (integer->char . ys51b7) (infinite? . ys51b6) (inexact? . ys51b5) (inexact . ys51b4) (imag-part . ys51b3) (gcd . ys51b2) (for-each . ys51b1) (floor . ys51b0) (finite? . ys51af) (expt . ys51ae) (exp . ys51ad) (exact? . ys51ac) (exact-integer-sqrt . ys51ab) (exact . ys51aa) (even? . ys51a9) (error . ys51a8) (eqv? . ys51a7) (equal? . ys51a6) (eq? . ys51a5) (dynamic-wind . ys51a4) (div0-and-mod0 . ys51a3) (mod0 . ys51a2) (div0 . ys51a1) (div-and-mod . ys51a0) (mod . ys519f) (div . ys519e) (denominator . ys519d) (cos . ys519c) (cons . ys519b) (complex? . ys519a) (char? . ys5199) (char>? . ys5198) (char>=? . ys5197) (char=? . ys5196) (char<? . ys5195) (char<=? . ys5194) (char->integer . ys5193) (ceiling . ys5192) (call-with-values . ys5191) (call/cc . ys5190) (call-with-current-continuation . ys518f) (cddddr . ys518e) (cdddar . ys518d) (cddadr . ys518c) (cddaar . ys518b) (cdaddr . ys518a) (cdadar . ys5189) (cdaadr . ys5188) (cdaaar . ys5187) (cadddr . ys5186) (caddar . ys5185) (cadadr . ys5184) (cadaar . ys5183) (caaddr . ys5182) (caadar . ys5181) (caaadr . ys5180) (caaaar . ys517f) (cdddr . ys517e) (cddar . ys517d) (cdadr . ys517c) (cdaar . ys517b) (caddr . ys517a) (cadar . ys5179) (caadr . ys5178) (caaar . ys5177) (cddr . ys5176) (cdar . ys5175) (cadr . ys5174) (caar . ys5173) (cdr . ys5172) (car . ys5171) (boolean? . ys5170) (boolean=? . ys516f) (atan . ys516e) (assertion-violation . ys516d) (assertion-error . ys3153) (asin . ys516c) (apply . ys516b) (append . ys516a) (angle . ys5169) (acos . ys5168) (abs . ys5167) (/ . ys5166) (* . ys5165) (- . ys5164) (+ . ys5163) (>= . ys5162) (> . ys5161) (= . ys5160) (<= . ys515f) (< . ys515e) (library . ys515d) (&no-nans . ys515c) (&no-infinities . ys515b) (&i/o-encoding . ys515a) (&i/o-decoding . ys5159) (&i/o-port . ys5158) (&i/o-file-does-not-exist . ys5157) (&i/o-file-already-exists . ys5156) (&i/o-file-is-read-only . ys5155) (&i/o-file-protection . ys5154) (&i/o-filename . ys5153) (&i/o-invalid-position . ys5152) (&i/o-write . ys5151) (&i/o-read . ys5150) (&i/o . ys514f) (&undefined . ys514e) (&syntax . ys514d) (&lexical . ys514c) (&implementation-restriction . ys514b) (&non-continuable . ys514a) (&who . ys5149) (&irritants . ys5148) (&assertion . ys5147) (&violation . ys5146) (&error . ys5145) (&serious . ys5144) (&warning . ys5143) (&message . ys5142) (&condition . ys5141) (define-condition-type . ys5140) (define-enumeration . ys513f) (define-record-type . ys513e) (parent-rtd . ys513d) (nongenerative . ys513c) (opaque . ys513b) (sealed . ys513a) (protocol . ys5139) (parent . ys5138) (immutable . ys5137) (mutable . ys5136) (fields . ys5135) (error-handling-mode . ys5134) (file-options . ys5133) (buffer-mode . ys5132) (eol-style . ys5131) (guard . ys5130) (trace-define . ys512f) (trace-lambda . ys512e) (unsyntax-splicing . ys512d) (unsyntax . ys512c) (unquote-splicing . ys512b) (unquote . ys512a) (_ . ys5129) (else . ys5128) (=> . ys5127) (... . ys5126) (assert . ys5125) (endianness . ys5124) (delay . ys5123) (time . ys5122) (do . ys5121) (cond . ys5120) (let* . ys511f) (let*-values . ys511e) (let-values . ys511d) (identifier-syntax . ys511c) (with-syntax . ys511b) (quasisyntax . ys511a) (quasiquote . ys5119) (syntax-rules . ys5118) (include . ys5117) (define-struct . ys5116) (record-constructor-descriptor . ys5115) (record-type-descriptor . ys5114) (case . ys5113) (parameterize . ys5112) (unless . ys5111) (when . ys5110) (or . ys510f) (and . ys510e) (if . ys510d) (let . ys510c) (letrec* . ys510b) (letrec . ys510a) (type-descriptor . ys5109) (case-lambda . ys5108) (lambda . ys5107) (syntax . ys5106) (syntax-case . ys5105) (quote . ys5104) (foreign-call . ys5103) (letrec-syntax . ys5102) (let-syntax . ys5101) (set! . ys5100) (import . ys50ff) (begin . ys50fe) (module . ys50fd) (define-syntax . ys50fc) (define . ys50fb)) '((ys4e88 core-prim . &no-nans-rcd) (ys4e86 core-prim . &no-nans-rtd) (ys4e73 core-prim . &no-infinities-rcd) (ys4e71 core-prim . &no-infinities-rtd) (ys4e5e core-prim . &i/o-encoding-rcd) (ys4e5c core-prim . &i/o-encoding-rtd) (ys4e43 core-prim . &i/o-decoding-rcd) (ys4e41 core-prim . &i/o-decoding-rtd) (ys4e2e core-prim . &i/o-port-rcd) (ys4e2c core-prim . &i/o-port-rtd) (ys4e13 core-prim . &i/o-file-does-not-exist-rcd) (ys4e11 core-prim . &i/o-file-does-not-exist-rtd) (ys4dfe core-prim . &i/o-file-already-exists-rcd) (ys4dfc core-prim . &i/o-file-already-exists-rtd) (ys4de9 core-prim . &i/o-file-is-read-only-rcd) (ys4de7 core-prim . &i/o-file-is-read-only-rtd) (ys4dd4 core-prim . &i/o-file-protection-rcd) (ys4dd2 core-prim . &i/o-file-protection-rtd) (ys4dbf core-prim . &i/o-filename-rcd) (ys4dbd core-prim . &i/o-filename-rtd) (ys4da4 core-prim . &i/o-invalid-position-rcd) (ys4da2 core-prim . &i/o-invalid-position-rtd) (ys4d89 core-prim . &i/o-write-rcd) (ys4d87 core-prim . &i/o-write-rtd) (ys4d74 core-prim . &i/o-read-rcd) (ys4d72 core-prim . &i/o-read-rtd) (ys4d5f core-prim . &i/o-rcd) (ys4d5d core-prim . &i/o-rtd) (ys4d4a core-prim . &undefined-rcd) (ys4d48 core-prim . &undefined-rtd) (ys4d35 core-prim . &syntax-rcd) (ys4d33 core-prim . &syntax-rtd) (ys4d14 core-prim . &lexical-rcd) (ys4d12 core-prim . &lexical-rtd) (ys4cff core-prim . &implementation-restriction-rcd) (ys4cfd core-prim . &implementation-restriction-rtd) (ys4cea core-prim . &non-continuable-rcd) (ys4ce8 core-prim . &non-continuable-rtd) (ys4cd5 core-prim . &who-rcd) (ys4cd3 core-prim . &who-rtd) (ys4cba core-prim . &irritants-rcd) (ys4cb8 core-prim . &irritants-rtd) (ys4c9f core-prim . &assertion-rcd) (ys4c9d core-prim . &assertion-rtd) (ys4c8a core-prim . &violation-rcd) (ys4c88 core-prim . &violation-rtd) (ys4c75 core-prim . &error-rcd) (ys4c73 core-prim . &error-rtd) (ys4c60 core-prim . &serious-rcd) (ys4c5e core-prim . &serious-rtd) (ys4c4b core-prim . &warning-rcd) (ys4c49 core-prim . &warning-rtd) (ys4c36 core-prim . &message-rcd) (ys4c34 core-prim . &message-rtd) (ys4bd7 core-prim . &condition-rcd) (ys4bd5 core-prim . &condition-rtd) (ys3155 core-prim . syntax-error) (ys3079 core-prim . syntax-dispatch) (ys5427 core-prim . pretty-print) (ys5426 core-prim . eval-core) (ys5425 core-prim . set-symbol-value!) (ys5424 core-prim . symbol-value) (ys5423 core-prim . gensym) (ys5422 core-prim . void) (ys4f99 core-prim . load) (ys3167 core-prim . interaction-environment) (ys5421 core-prim . char-ready?) (ys5420 core-prim . regexp?) (ys541f core-prim . read-line) (ys541e core-prim . gensym-prefix-set!) (ys541d core-prim . ungensym) (ys541c core-prim . alist->eq-hash-table) (ys541b core-prim . assoc-ref) (ys541a core-prim . print) (ys5419 core-prim . format) (ys5418 core-prim . host-os) (ys2ab2 core-prim . library-path) (ys5417 core-prim . standard-library-path) (ys5416 core-prim . file-newer?) (ys5415 core-prim . stat-mtime) (ys5414 core-prim . write-to-file) (ys5413 core-prim . file->list) (ys5412 core-prim . file->string) (ys5411 core-prim . digit->integer) (ys5410 core-prim . call-with-string-input-port) (ys540f core-prim . call-with-string-io) (ys540e core-prim . string-split) (ys540d core-prim . bytevector-for-each) (ys540c core-prim . string->regexp) (ys540b core-prim . rxmatch) (ys540a core-prim . regexp-replace-all) (ys5409 core-prim . hashtable-for-each) (ys289d core-prim . mosh-cache-dir) (ys5408 core-prim . call-process) (ys5407 core-prim . local-tz-offset) (ys5406 core-prim . microseconds) (ys5405 core-prim . directory-list) (ys5404 core-prim . set-current-directory!) (ys5403 core-prim . expand-path) (ys5402 core-prim . current-directory) (ys5401 core-prim . %spawn) (ys5400 core-prim . %waitpid) (ys53ff core-prim . simple-struct-name) (ys53fe core-prim . simple-struct-set!) (ys53fd core-prim . simple-struct-ref) (ys53fc core-prim . make-simple-struct) (ys53fb core-prim . simple-struct?) (ys53fa core-prim . pointer-ref-c-int64) (ys53f9 core-prim . pointer-ref-c-int32) (ys53f8 core-prim . pointer-ref-c-int16) (ys53f7 core-prim . pointer-ref-c-int8) (ys53f6 core-prim . pointer-ref-c-uint64) (ys53f5 core-prim . pointer-ref-c-uint32) (ys53f4 core-prim . pointer-ref-c-uint16) (ys53f3 core-prim . pointer-ref-c-uint8) (ys53f2 core-prim . pointer-set-c-uint64!) (ys53f1 core-prim . pointer-set-c-uint32!) (ys53f0 core-prim . pointer-set-c-uint16!) (ys53ef core-prim . pointer-set-c-uint8!) (ys53ee core-prim . pointer-set-c-int64!) (ys53ed core-prim . pointer-set-c-int32!) (ys53ec core-prim . pointer-set-c-int16!) (ys53eb core-prim . pointer-set-c-int8!) (ys53ea core-prim . pointer-set-c-pointer!) (ys53e9 core-prim . pointer-set-c-double!) (ys53e8 core-prim . pointer-set-c-float!) (ys53e7 core-prim . pointer-set-c-long-long!) (ys53e6 core-prim . pointer-set-c-long!) (ys53e5 core-prim . pointer-set-c-int!) (ys53e4 core-prim . pointer-set-c-short!) (ys53e3 core-prim . pointer-set-c-char!) (ys53e2 core-prim . pointer-ref-c-pointer) (ys53e1 core-prim . pointer-ref-c-double) (ys53e0 core-prim . pointer-ref-c-float) (ys53df core-prim . pointer-ref-c-unsigned-long-long) (ys53de core-prim . pointer-ref-c-signed-long-long) (ys53dd core-prim . pointer-ref-c-unsigned-long) (ys53dc core-prim . pointer-ref-c-signed-long) (ys53db core-prim . pointer-ref-c-unsigned-int) (ys53da core-prim . pointer-ref-c-signed-int) (ys53d9 core-prim . pointer-ref-c-unsigned-short) (ys53d8 core-prim . pointer-ref-c-signed-short) (ys53d7 core-prim . pointer-ref-c-unsigned-char) (ys53d6 core-prim . pointer-ref-c-signed-char) (ys53d5 core-prim . pointer->integer) (ys53d4 core-prim . integer->pointer) (ys53d3 core-prim . pointer?) (ys53d2 core-prim . shared-errno) (ys53d1 core-prim . %ffi-free-c-callback-trampoline) (ys53d0 core-prim . %ffi-make-c-callback-trampoline) (ys53cf core-prim . %ffi-free) (ys53ce core-prim . %ffi-malloc) (ys53cd core-prim . %ffi-supported?) (ys53cc core-prim . %ffi-pointer->string) (ys53cb core-prim . %ffi-call->string-or-zero) (ys53ca core-prim . %ffi-call->double) (ys53c9 core-prim . %ffi-call->void*) (ys53c8 core-prim . %ffi-call->void) (ys53c7 core-prim . %ffi-call->char) (ys53c6 core-prim . %ffi-call->uint) (ys53c5 core-prim . %ffi-call->int) (ys53c4 core-prim . %ffi-lookup) (ys53c3 core-prim . %ffi-open) (ys53c2 core-prim . null-terminated-utf8->string) (ys53c1 core-prim . null-terminated-bytevector->string) (ys53c0 core-prim . %fork) (ys53bf core-prim . %pipe) (ys53be core-prim . p) (ys53bd core-prim . open-output-string) (ys53bc core-prim . get-output-string) (ys53bb core-prim . file-stat-ctime) (ys53ba core-prim . file-stat-atime) (ys53b9 core-prim . file-stat-mtime) (ys53b8 core-prim . file-size-in-bytes) (ys53b7 core-prim . file-writable?) (ys53b6 core-prim . file-executable?) (ys53b5 core-prim . file-readable?) (ys53b4 core-prim . file-regular?) (ys53b3 core-prim . file-symbolic-link?) (ys53b2 core-prim . file-directory?) (ys53b1 core-prim . create-symbolic-link) (ys53b0 core-prim . rename-file) (ys53af core-prim . delete-directory) (ys53ae core-prim . create-directory) (ys53ad core-prim . create-mosh-cache-dir) (ys53ac core-prim . get-environment-variables) (ys53ab core-prim . current-exception-handler) (ys53aa core-prim . get-environment-variable) (ys53a9 core-prim . join-wraps) (ys53a8 core-prim . id->real-label) (ys53a7 core-prim . same-marks?) (ys53a6 core-prim . same-marks*?) (ys53a5 core-prim . get-timeofday) (ys53a4 core-prim . get-command-line) (ys53a3 core-prim . sys-display) (ys53a2 core-prim . whereis) (ys53a1 core-prim . register) (ys53a0 core-prim . vm-join!) (ys539f core-prim . vm-set-value!) (ys539e core-prim . vm?) (ys539d core-prim . main-vm?) (ys539c core-prim . vm-eval) (ys539b core-prim . vm-self) (ys539a core-prim . vm-start!) (ys5399 core-prim . make-vm) (ys5398 core-prim . mutex-try-lock!) (ys5397 core-prim . mutex-unlock!) (ys5396 core-prim . mutex-lock!) (ys5395 core-prim . mutex?) (ys5394 core-prim . make-mutex) (ys5393 core-prim . condition-variable-notify-all!) (ys5392 core-prim . condition-variable-notify!) (ys5391 core-prim . condition-variable-wait!) (ys5390 core-prim . make-condition-variable) (ys538f core-prim . mosh-executable-path) (ys538e core-prim . make-file-options) (ys538d core-prim . source-info) (ys538c core-prim . make-compiler-instruction) (ys538b core-prim . make-instruction) (ys538a core-prim . set-source-info!) (ys5389 core-prim . bignum?) (ys5388 core-prim . fast-equal?) (ys5387 core-prim . fasl-read) (ys5386 core-prim . fasl-write) (ys5385 core-prim . time-usage) (ys5384 core-prim . os-constant) (ys5383 core-prim . disasm) (ys289b core-prim . make-parameter) (ys5382 core-prim . socket-port) (ys5381 core-prim . socket-shutdown) (ys5380 core-prim . socket-close) (ys537f core-prim . socket-send) (ys537e core-prim . socket-recv!) (ys537d core-prim . socket-recv) (ys537c core-prim . make-server-socket) (ys537b core-prim . make-client-socket) (ys537a core-prim . socket-accept) (ys5379 core-prim . socket?) (ys5378 core-prim . string-upcase) (ys5377 core-prim . string-titlecase) (ys5376 core-prim . string-normalize-nfkd) (ys5375 core-prim . string-normalize-nfkc) (ys5374 core-prim . string-normalize-nfd) (ys5373 core-prim . string-normalize-nfc) (ys5372 core-prim . string-foldcase) (ys5371 core-prim . string-downcase) (ys5370 core-prim . string-ci>?) (ys536f core-prim . string-ci>=?) (ys536e core-prim . string-ci=?) (ys536d core-prim . string-ci<?) (ys536c core-prim . string-ci<=?) (ys536b core-prim . char-whitespace?) (ys536a core-prim . char-upper-case?) (ys5369 core-prim . char-title-case?) (ys5368 core-prim . char-numeric?) (ys5367 core-prim . char-lower-case?) (ys5366 core-prim . char-general-category) (ys5365 core-prim . char-upcase) (ys5364 core-prim . char-titlecase) (ys5363 core-prim . char-foldcase) (ys5362 core-prim . char-downcase) (ys5361 core-prim . char-ci>?) (ys5360 core-prim . char-ci>=?) (ys535f core-prim . char-ci=?) (ys535e core-prim . char-ci<?) (ys535d core-prim . char-ci<=?) (ys535c core-prim . char-alphabetic?) (ys2ea4 core-prim . make-variable-transformer) (ys315b core-prim . identifier?) (ys3147 core-prim . generate-temporaries) (ys3149 core-prim . free-identifier=?) (ys315f core-prim . syntax->datum) (ys315d core-prim . datum->syntax) (ys314b core-prim . bound-identifier=?) (ys535b core-prim . record-type-descriptor?) (ys535a core-prim . record-predicate) (ys5359 core-prim . record-mutator) (ys5358 core-prim . record-constructor) (ys5357 core-prim . record-accessor) (ys5356 core-prim . make-record-type-descriptor) (ys5355 core-prim . make-record-constructor-descriptor) (ys5354 core-prim . record?) (ys5353 core-prim . record-type-uid) (ys5352 core-prim . record-type-sealed?) (ys5351 core-prim . record-type-parent) (ys5350 core-prim . record-type-opaque?) (ys534f core-prim . record-type-name) (ys534e core-prim . record-type-generative?) (ys534d core-prim . record-type-field-names) (ys534c core-prim . record-rtd) (ys534b core-prim . record-field-mutable?) (ys534a core-prim . delete-file) (ys5349 core-prim . file-exists?) (ys5348 core-prim . vector-sort!) (ys5347 core-prim . vector-sort) (ys5346 core-prim . list-sort) (ys5345 core-prim . symbol-hash) (ys5344 core-prim . string-ci-hash) (ys5343 core-prim . string-hash) (ys5342 core-prim . equal-hash) (ys5341 core-prim . hashtable-equivalence-function) (ys5340 core-prim . make-hashtable) (ys533f core-prim . hashtable-hash-function) (ys533e core-prim . make-eqv-hashtable) (ys533d core-prim . make-eq-hashtable) (ys533c core-prim . hashtable?) (ys533b core-prim . hashtable-update!) (ys533a core-prim . hashtable-size) (ys5339 core-prim . hashtable-set!) (ys5338 core-prim . hashtable-ref) (ys5337 core-prim . hashtable-mutable?) (ys5336 core-prim . hashtable-keys) (ys5335 core-prim . hashtable-entries) (ys5334 core-prim . hashtable-delete!) (ys5333 core-prim . hashtable-copy) (ys5332 core-prim . hashtable-contains?) (ys5331 core-prim . hashtable-clear!) (ys5330 core-prim . call-with-output-file) (ys532f core-prim . call-with-input-file) (ys532e core-prim . write-char) (ys532d core-prim . write) (ys532c core-prim . with-output-to-file) (ys532b core-prim . with-input-from-file) (ys532a core-prim . read-char) (ys5329 core-prim . read) (ys5328 core-prim . peek-char) (ys5327 core-prim . open-output-file) (ys5326 core-prim . open-input-file) (ys5325 core-prim . newline) (ys5324 core-prim . display) (ys5323 core-prim . close-output-port) (ys5322 core-prim . close-input-port) (ys5321 core-prim . eof-object?) (ys5320 core-prim . eof-object) (ys531f core-prim . current-error-port) (ys531e core-prim . current-output-port) (ys531d core-prim . current-input-port) (ys531c core-prim . output-port?) (ys531b core-prim . input-port?) (ys531a core-prim . utf-8-codec) (ys5319 core-prim . utf-16-codec) (ys5318 core-prim . transcoder-error-handling-mode) (ys5317 core-prim . transcoder-eol-style) (ys5316 core-prim . transcoder-codec) (ys5315 core-prim . transcoded-port) (ys5314 core-prim . textual-port?) (ys5313 core-prim . string->bytevector) (ys5312 core-prim . standard-output-port) (ys5311 core-prim . standard-input-port) (ys5310 core-prim . standard-error-port) (ys530f core-prim . set-port-position!) (ys530e core-prim . put-u8) (ys530d core-prim . put-string) (ys530c core-prim . put-datum) (ys530b core-prim . put-char) (ys530a core-prim . put-bytevector) (ys5309 core-prim . port?) (ys5308 core-prim . port-transcoder) (ys5307 core-prim . port-position) (ys5306 core-prim . port-has-set-port-position!?) (ys5305 core-prim . port-has-port-position?) (ys5304 core-prim . port-eof?) (ys5303 core-prim . output-port-buffer-mode) (ys5302 core-prim . open-string-output-port) (ys5301 core-prim . open-string-input-port) (ys5300 core-prim . open-file-output-port) (ys52ff core-prim . open-file-input/output-port) (ys52fe core-prim . open-file-input-port) (ys52fd core-prim . open-bytevector-output-port) (ys52fc core-prim . open-bytevector-input-port) (ys52fb core-prim . native-transcoder) (ys52fa core-prim . native-eol-style) (ys52f9 core-prim . make-transcoder) (ys52f8 core-prim . latin-1-codec) (ys4d83 core-prim . make-i/o-write-error) (ys4d6e core-prim . make-i/o-read-error) (ys4e24 core-prim . make-i/o-port-error) (ys4d9a core-prim . make-i/o-invalid-position-error) (ys4db5 core-prim . make-i/o-filename-error) (ys4dce core-prim . make-i/o-file-protection-error) (ys4de3 core-prim . make-i/o-file-is-read-only-error) (ys4e0d core-prim . make-i/o-file-does-not-exist-error) (ys4df8 core-prim . make-i/o-file-already-exists-error) (ys4d59 core-prim . make-i/o-error) (ys4e54 core-prim . make-i/o-encoding-error) (ys4e3d core-prim . make-i/o-decoding-error) (ys52f7 core-prim . make-custom-textual-output-port) (ys52f6 core-prim . make-custom-textual-input/output-port) (ys52f5 core-prim . make-custom-textual-input-port) (ys52f4 core-prim . make-custom-binary-output-port) (ys52f3 core-prim . make-custom-binary-input/output-port) (ys52f2 core-prim . make-custom-binary-input-port) (ys52f1 core-prim . make-bytevector) (ys52f0 core-prim . lookahead-u8) (ys52ef core-prim . lookahead-char) (ys4d85 core-prim . i/o-write-error?) (ys4d70 core-prim . i/o-read-error?) (ys4e28 core-prim . i/o-port-error?) (ys4d9e core-prim . i/o-invalid-position-error?) (ys4db9 core-prim . i/o-filename-error?) (ys4dd0 core-prim . i/o-file-protection-error?) (ys4de5 core-prim . i/o-file-is-read-only-error?) (ys4e0f core-prim . i/o-file-does-not-exist-error?) (ys4dfa core-prim . i/o-file-already-exists-error?) (ys4d5b core-prim . i/o-error?) (ys4da0 core-prim . i/o-error-position) (ys4e2a core-prim . i/o-error-port) (ys4dbb core-prim . i/o-error-filename) (ys4e58 core-prim . i/o-encoding-error?) (ys4e5a core-prim . i/o-encoding-error-char) (ys4e3f core-prim . i/o-decoding-error?) (ys52ee core-prim . get-u8) (ys52ed core-prim . get-string-n!) (ys52ec core-prim . get-string-n) (ys52eb core-prim . get-string-all) (ys52ea core-prim . get-line) (ys52e9 core-prim . get-datum) (ys52e8 core-prim . get-char) (ys52e7 core-prim . get-bytevector-some) (ys52e6 core-prim . get-bytevector-n!) (ys52e5 core-prim . get-bytevector-n) (ys52e4 core-prim . get-bytevector-all) (ys52e3 core-prim . flush-output-port) (ys52e2 core-prim . close-port) (ys3135 core-prim . scheme-report-environment) (ys52e1 core-prim . quotient) (ys3133 core-prim . null-environment) (ys52e0 core-prim . remainder) (ys52df core-prim . modulo) (ys52de core-prim . inexact->exact) (ys52dd core-prim . force) (ys52dc core-prim . exact->inexact) (ys52db core-prim . make-promise) (ys52da core-prim . exit) (ys4f93 core-prim . command-line) (ys52d9 core-prim . string-fill!) (ys52d8 core-prim . string-set!) (ys52d7 core-prim . set-cdr!) (ys52d6 core-prim . set-car!) (ys52d5 core-prim . remove) (ys52d4 core-prim . remv) (ys52d3 core-prim . remp) (ys52d2 core-prim . remq) (ys52d1 core-prim . partition) (ys52d0 core-prim . memv) (ys52cf core-prim . memq) (ys52ce core-prim . memp) (ys52cd core-prim . member) (ys52cc core-prim . exists) (ys52cb core-prim . for-all) (ys52ca core-prim . fold-right) (ys52c9 core-prim . fold-left) (ys52c8 core-prim . find) (ys52c7 core-prim . filter) (ys52c6 core-prim . cons*) (ys52c5 core-prim . assv) (ys52c4 core-prim . assq) (ys52c3 core-prim . assp) (ys52c2 core-prim . assoc) (ys52c1 core-prim . call-with-string-output-port) (ys52c0 core-prim . call-with-port) (ys52bf core-prim . call-with-bytevector-output-port) (ys52be core-prim . bytevector->string) (ys52bd core-prim . buffer-mode?) (ys52bc core-prim . binary-port?) (ys52bb core-prim . with-exception-handler) (ys52ba core-prim . raise-continuable) (ys52b9 core-prim . raise) (ys3139 core-prim . eval) (ys3131 core-prim . environment) (ys52b8 core-prim . make-enumeration) (ys52b7 core-prim . enum-set=?) (ys52b6 core-prim . enum-set-universe) (ys52b5 core-prim . enum-set-union) (ys52b4 core-prim . enum-set-subset?) (ys52b3 core-prim . enum-set-projection) (ys52b2 core-prim . enum-set-member?) (ys52b1 core-prim . enum-set-intersection) (ys52b0 core-prim . enum-set-indexer) (ys52af core-prim . enum-set-difference) (ys52ae core-prim . enum-set-constructor) (ys52ad core-prim . enum-set-complement) (ys52ac core-prim . enum-set->list) (ys4ccf core-prim . who-condition?) (ys4c47 core-prim . warning?) (ys4c86 core-prim . violation?) (ys4d46 core-prim . undefined-violation?) (ys4d2d core-prim . syntax-violation?) (ys4d31 core-prim . syntax-violation-subform) (ys4d2f core-prim . syntax-violation-form) (ys3159 core-prim . syntax-violation) (ys52ab core-prim . simple-conditions) (ys4c5c core-prim . serious-condition?) (ys4ce6 core-prim . non-continuable-violation?) (ys4c30 core-prim . message-condition?) (ys4ccb core-prim . make-who-condition) (ys4c45 core-prim . make-warning) (ys4c84 core-prim . make-violation) (ys4d44 core-prim . make-undefined-violation) (ys4d27 core-prim . make-syntax-violation) (ys4c5a core-prim . make-serious-condition) (ys4ce4 core-prim . make-non-continuable-violation) (ys4c2c core-prim . make-message-condition) (ys4d0e core-prim . make-lexical-violation) (ys4cb0 core-prim . make-irritants-condition) (ys4cf9 core-prim . make-implementation-restriction-violation) (ys4c6f core-prim . make-error) (ys4c99 core-prim . make-assertion-violation) (ys4d10 core-prim . lexical-violation?) (ys4cb4 core-prim . irritants-condition?) (ys4cfb core-prim . implementation-restriction-violation?) (ys4c71 core-prim . error?) (ys4cd1 core-prim . condition-who) (ys52aa core-prim . condition-predicate) (ys4c32 core-prim . condition-message) (ys4cb6 core-prim . condition-irritants) (ys52a9 core-prim . condition-accessor) (ys52a8 core-prim . condition) (ys4c9b core-prim . assertion-violation?) (ys52a7 core-prim . condition?) (ys52a6 core-prim . utf32->string) (ys52a5 core-prim . utf16->string) (ys52a4 core-prim . utf8->string) (ys52a3 core-prim . uint-list->bytevector) (ys52a2 core-prim . u8-list->bytevector) (ys52a1 core-prim . string->utf8) (ys52a0 core-prim . string->utf32) (ys529f core-prim . string->utf16) (ys529e core-prim . sint-list->bytevector) (ys529d core-prim . native-endianness) (ys529c core-prim . bytevector?) (ys529b core-prim . bytevector=?) (ys529a core-prim . bytevector-uint-set!) (ys5299 core-prim . bytevector-uint-ref) (ys5298 core-prim . bytevector-u8-set!) (ys5297 core-prim . bytevector-u8-ref) (ys5296 core-prim . bytevector-u64-set!) (ys5295 core-prim . bytevector-u64-ref) (ys5294 core-prim . bytevector-u64-native-set!) (ys5293 core-prim . bytevector-u64-native-ref) (ys5292 core-prim . bytevector-u32-set!) (ys5291 core-prim . bytevector-u32-ref) (ys5290 core-prim . bytevector-u32-native-set!) (ys528f core-prim . bytevector-u32-native-ref) (ys528e core-prim . bytevector-u16-set!) (ys528d core-prim . bytevector-u16-ref) (ys528c core-prim . bytevector-u16-native-set!) (ys528b core-prim . bytevector-u16-native-ref) (ys528a core-prim . bytevector-sint-set!) (ys5289 core-prim . bytevector-sint-ref) (ys5288 core-prim . bytevector-s8-set!) (ys5287 core-prim . bytevector-s8-ref) (ys5286 core-prim . bytevector-s64-set!) (ys5285 core-prim . bytevector-s64-ref) (ys5284 core-prim . bytevector-s64-native-set!) (ys5283 core-prim . bytevector-s64-native-ref) (ys5282 core-prim . bytevector-s32-set!) (ys5281 core-prim . bytevector-s32-ref) (ys5280 core-prim . bytevector-s32-native-set!) (ys527f core-prim . bytevector-s32-native-ref) (ys527e core-prim . bytevector-s16-set!) (ys527d core-prim . bytevector-s16-ref) (ys527c core-prim . bytevector-s16-native-set!) (ys527b core-prim . bytevector-s16-native-ref) (ys527a core-prim . bytevector-length) (ys5279 core-prim . bytevector-ieee-single-ref) (ys5278 core-prim . bytevector-ieee-single-set!) (ys5277 core-prim . bytevector-ieee-single-native-set!) (ys5276 core-prim . bytevector-ieee-single-native-ref) (ys5275 core-prim . bytevector-ieee-double-set!) (ys5274 core-prim . bytevector-ieee-double-ref) (ys5273 core-prim . bytevector-ieee-double-native-set!) (ys5272 core-prim . bytevector-ieee-double-native-ref) (ys5271 core-prim . bytevector-fill!) (ys5270 core-prim . bytevector-copy!) (ys526f core-prim . bytevector-copy) (ys526e core-prim . bytevector->uint-list) (ys526d core-prim . bytevector->u8-list) (ys526c core-prim . bytevector->sint-list) (ys4e84 core-prim . no-nans-violation?) (ys4e6f core-prim . no-infinities-violation?) (ys4e82 core-prim . make-no-nans-violation) (ys4e6d core-prim . make-no-infinities-violation) (ys526b core-prim . real->flonum) (ys526a core-prim . flzero?) (ys5269 core-prim . fltruncate) (ys5268 core-prim . fltan) (ys5267 core-prim . flsqrt) (ys5266 core-prim . flsin) (ys5265 core-prim . flround) (ys5264 core-prim . flpositive?) (ys5263 core-prim . flonum?) (ys5262 core-prim . flodd?) (ys5261 core-prim . flnumerator) (ys5260 core-prim . flnegative?) (ys525f core-prim . flnan?) (ys525e core-prim . flmod0) (ys525d core-prim . flmod) (ys525c core-prim . flmin) (ys525b core-prim . flmax) (ys525a core-prim . fllog) (ys5259 core-prim . flinteger?) (ys5258 core-prim . flinfinite?) (ys5257 core-prim . flfloor) (ys5256 core-prim . flfinite?) (ys5255 core-prim . flexpt) (ys5254 core-prim . flexp) (ys5253 core-prim . fleven?) (ys5252 core-prim . fldiv0-and-mod0) (ys5251 core-prim . fldiv0) (ys5250 core-prim . fldiv-and-mod) (ys524f core-prim . fldiv) (ys524e core-prim . fldenominator) (ys524d core-prim . flcos) (ys524c core-prim . flceiling) (ys524b core-prim . flatan) (ys524a core-prim . flasin) (ys5249 core-prim . flacos) (ys5248 core-prim . flabs) (ys5247 core-prim . fl>?) (ys5246 core-prim . fl>=?) (ys5245 core-prim . fl=?) (ys5244 core-prim . fl<?) (ys5243 core-prim . fl<=?) (ys5242 core-prim . fl/) (ys5241 core-prim . fl-) (ys5240 core-prim . fl+) (ys523f core-prim . fl*) (ys523e core-prim . fixnum->flonum) (ys523d core-prim . fxzero?) (ys523c core-prim . fxxor) (ys523b core-prim . fxrotate-bit-field) (ys523a core-prim . fxreverse-bit-field) (ys5239 core-prim . fxpositive?) (ys5238 core-prim . fxodd?) (ys5237 core-prim . fxnot) (ys5236 core-prim . fxnegative?) (ys5235 core-prim . fxmod0) (ys5234 core-prim . fxmod) (ys5233 core-prim . fxmin) (ys5232 core-prim . fxmax) (ys5231 core-prim . fxlength) (ys5230 core-prim . fxior) (ys522f core-prim . fxif) (ys522e core-prim . fxfirst-bit-set) (ys522d core-prim . fxeven?) (ys522c core-prim . fxdiv0-and-mod0) (ys522b core-prim . fxdiv0) (ys522a core-prim . fxdiv-and-mod) (ys5229 core-prim . fxdiv) (ys5228 core-prim . fxcopy-bit-field) (ys5227 core-prim . fxcopy-bit) (ys5226 core-prim . fxbit-set?) (ys5225 core-prim . fxbit-field) (ys5224 core-prim . fxbit-count) (ys5223 core-prim . fxarithmetic-shift-right) (ys5222 core-prim . fxarithmetic-shift-left) (ys5221 core-prim . fxarithmetic-shift) (ys5220 core-prim . fxand) (ys521f core-prim . fx>?) (ys521e core-prim . fx>=?) (ys521d core-prim . fx=?) (ys521c core-prim . fx<?) (ys521b core-prim . fx<=?) (ys521a core-prim . fx-/carry) (ys5219 core-prim . fx-) (ys5218 core-prim . fx+/carry) (ys5217 core-prim . fx+) (ys5216 core-prim . fx*/carry) (ys5215 core-prim . fx*) (ys5214 core-prim . greatest-fixnum) (ys5213 core-prim . least-fixnum) (ys5212 core-prim . fixnum-width) (ys5211 core-prim . fixnum?) (ys5210 core-prim . bitwise-rotate-bit-field) (ys520f core-prim . bitwise-reverse-bit-field) (ys520e core-prim . bitwise-length) (ys520d core-prim . bitwise-if) (ys520c core-prim . bitwise-first-bit-set) (ys520b core-prim . bitwise-copy-bit-field) (ys520a core-prim . bitwise-copy-bit) (ys5209 core-prim . bitwise-bit-set?) (ys5208 core-prim . bitwise-bit-field) (ys5207 core-prim . bitwise-bit-count) (ys5206 core-prim . bitwise-xor) (ys5205 core-prim . bitwise-ior) (ys5204 core-prim . bitwise-and) (ys5203 core-prim . bitwise-not) (ys5202 core-prim . bitwise-arithmetic-shift-right) (ys5201 core-prim . bitwise-arithmetic-shift-left) (ys5200 core-prim . bitwise-arithmetic-shift) (ys51ff core-prim . zero?) (ys51fe core-prim . vector?) (ys51fd core-prim . vector-set!) (ys51fc core-prim . vector-ref) (ys51fb core-prim . vector-map) (ys51fa core-prim . vector-length) (ys51f9 core-prim . vector-for-each) (ys51f8 core-prim . vector-fill!) (ys51f7 core-prim . vector->list) (ys51f6 core-prim . vector) (ys51f5 core-prim . values) (ys51f4 core-prim . truncate) (ys51f3 core-prim . tan) (ys51f2 core-prim . symbol?) (ys51f1 core-prim . symbol=?) (ys51f0 core-prim . symbol->string) (ys51ef core-prim . substring) (ys51ee core-prim . string?) (ys51ed core-prim . string>?) (ys51ec core-prim . string>=?) (ys51eb core-prim . string=?) (ys51ea core-prim . string<?) (ys51e9 core-prim . string<=?) (ys51e8 core-prim . string-ref) (ys51e7 core-prim . string-length) (ys51e6 core-prim . string-for-each) (ys51e5 core-prim . string-copy) (ys51e4 core-prim . string-append) (ys51e3 core-prim . string->symbol) (ys51e2 core-prim . string->number) (ys51e1 core-prim . string->list) (ys51e0 core-prim . string) (ys51df core-prim . sqrt) (ys51de core-prim . sin) (ys51dd core-prim . round) (ys51dc core-prim . reverse) (ys51db core-prim . real?) (ys51da core-prim . real-valued?) (ys51d9 core-prim . real-part) (ys51d8 core-prim . rationalize) (ys51d7 core-prim . rational?) (ys51d6 core-prim . rational-valued?) (ys51d5 core-prim . procedure?) (ys51d4 core-prim . positive?) (ys51d3 core-prim . pair?) (ys51d2 core-prim . odd?) (ys51d1 core-prim . numerator) (ys51d0 core-prim . number?) (ys51cf core-prim . number->string) (ys51ce core-prim . null?) (ys51cd core-prim . not) (ys51cc core-prim . negative?) (ys51cb core-prim . nan?) (ys51ca core-prim . min) (ys51c9 core-prim . max) (ys51c8 core-prim . map) (ys51c7 core-prim . make-vector) (ys51c6 core-prim . make-string) (ys51c5 core-prim . make-rectangular) (ys51c4 core-prim . make-polar) (ys51c3 core-prim . magnitude) (ys51c2 core-prim . log) (ys51c1 core-prim . list?) (ys51c0 core-prim . list-tail) (ys51bf core-prim . list-ref) (ys51be core-prim . list->vector) (ys51bd core-prim . list->string) (ys51bc core-prim . list) (ys51bb core-prim . length) (ys51ba core-prim . lcm) (ys51b9 core-prim . integer?) (ys51b8 core-prim . integer-valued?) (ys51b7 core-prim . integer->char) (ys51b6 core-prim . infinite?) (ys51b5 core-prim . inexact?) (ys51b4 core-prim . inexact) (ys51b3 core-prim . imag-part) (ys51b2 core-prim . gcd) (ys51b1 core-prim . for-each) (ys51b0 core-prim . floor) (ys51af core-prim . finite?) (ys51ae core-prim . expt) (ys51ad core-prim . exp) (ys51ac core-prim . exact?) (ys51ab core-prim . exact-integer-sqrt) (ys51aa core-prim . exact) (ys51a9 core-prim . even?) (ys51a8 core-prim . error) (ys51a7 core-prim . eqv?) (ys51a6 core-prim . equal?) (ys51a5 core-prim . eq?) (ys51a4 core-prim . dynamic-wind) (ys51a3 core-prim . div0-and-mod0) (ys51a2 core-prim . mod0) (ys51a1 core-prim . div0) (ys51a0 core-prim . div-and-mod) (ys519f core-prim . mod) (ys519e core-prim . div) (ys519d core-prim . denominator) (ys519c core-prim . cos) (ys519b core-prim . cons) (ys519a core-prim . complex?) (ys5199 core-prim . char?) (ys5198 core-prim . char>?) (ys5197 core-prim . char>=?) (ys5196 core-prim . char=?) (ys5195 core-prim . char<?) (ys5194 core-prim . char<=?) (ys5193 core-prim . char->integer) (ys5192 core-prim . ceiling) (ys5191 core-prim . call-with-values) (ys5190 core-prim . call/cc) (ys518f core-prim . call-with-current-continuation) (ys518e core-prim . cddddr) (ys518d core-prim . cdddar) (ys518c core-prim . cddadr) (ys518b core-prim . cddaar) (ys518a core-prim . cdaddr) (ys5189 core-prim . cdadar) (ys5188 core-prim . cdaadr) (ys5187 core-prim . cdaaar) (ys5186 core-prim . cadddr) (ys5185 core-prim . caddar) (ys5184 core-prim . cadadr) (ys5183 core-prim . cadaar) (ys5182 core-prim . caaddr) (ys5181 core-prim . caadar) (ys5180 core-prim . caaadr) (ys517f core-prim . caaaar) (ys517e core-prim . cdddr) (ys517d core-prim . cddar) (ys517c core-prim . cdadr) (ys517b core-prim . cdaar) (ys517a core-prim . caddr) (ys5179 core-prim . cadar) (ys5178 core-prim . caadr) (ys5177 core-prim . caaar) (ys5176 core-prim . cddr) (ys5175 core-prim . cdar) (ys5174 core-prim . cadr) (ys5173 core-prim . caar) (ys5172 core-prim . cdr) (ys5171 core-prim . car) (ys5170 core-prim . boolean?) (ys516f core-prim . boolean=?) (ys516e core-prim . atan) (ys516d core-prim . assertion-violation) (ys3153 core-prim . assertion-error) (ys516c core-prim . asin) (ys516b core-prim . apply) (ys516a core-prim . append) (ys5169 core-prim . angle) (ys5168 core-prim . acos) (ys5167 core-prim . abs) (ys5166 core-prim . /) (ys5165 core-prim . *) (ys5164 core-prim . -) (ys5163 core-prim . +) (ys5162 core-prim . >=) (ys5161 core-prim . >) (ys5160 core-prim . =) (ys515f core-prim . <=) (ys515e core-prim . <) (ys515d core-prim . library) (ys515c $core-rtd &no-nans-rtd &no-nans-rcd) (ys515b $core-rtd &no-infinities-rtd &no-infinities-rcd) (ys515a $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (ys5159 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (ys5158 $core-rtd &i/o-port-rtd &i/o-port-rcd) (ys5157 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (ys5156 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (ys5155 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (ys5154 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (ys5153 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (ys5152 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (ys5151 $core-rtd &i/o-write-rtd &i/o-write-rcd) (ys5150 $core-rtd &i/o-read-rtd &i/o-read-rcd) (ys514f $core-rtd &i/o-rtd &i/o-rcd) (ys514e $core-rtd &undefined-rtd &undefined-rcd) (ys514d $core-rtd &syntax-rtd &syntax-rcd) (ys514c $core-rtd &lexical-rtd &lexical-rcd) (ys514b $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (ys514a $core-rtd &non-continuable-rtd &non-continuable-rcd) (ys5149 $core-rtd &who-rtd &who-rcd) (ys5148 $core-rtd &irritants-rtd &irritants-rcd) (ys5147 $core-rtd &assertion-rtd &assertion-rcd) (ys5146 $core-rtd &violation-rtd &violation-rcd) (ys5145 $core-rtd &error-rtd &error-rcd) (ys5144 $core-rtd &serious-rtd &serious-rcd) (ys5143 $core-rtd &warning-rtd &warning-rcd) (ys5142 $core-rtd &message-rtd &message-rcd) (ys5141 $core-rtd &condition-rtd &condition-rcd) (ys5140 macro . define-condition-type) (ys513f macro . define-enumeration) (ys513e macro . define-record-type) (ys513d macro . parent-rtd) (ys513c macro . nongenerative) (ys513b macro . opaque) (ys513a macro . sealed) (ys5139 macro . protocol) (ys5138 macro . parent) (ys5137 macro . immutable) (ys5136 macro . mutable) (ys5135 macro . fields) (ys5134 macro . error-handling-mode) (ys5133 macro . file-options) (ys5132 macro . buffer-mode) (ys5131 macro . eol-style) (ys5130 macro . guard) (ys512f macro . trace-define) (ys512e macro . trace-lambda) (ys512d macro . unsyntax-splicing) (ys512c macro . unsyntax) (ys512b macro . unquote-splicing) (ys512a macro . unquote) (ys5129 macro . _) (ys5128 macro . else) (ys5127 macro . =>) (ys5126 macro . ...) (ys5125 macro . assert) (ys5124 macro . endianness) (ys5123 macro . delay) (ys5122 macro . time) (ys5121 macro . do) (ys5120 macro . cond) (ys511f macro . let*) (ys511e macro . let*-values) (ys511d macro . let-values) (ys511c macro . identifier-syntax) (ys511b macro . with-syntax) (ys511a macro . quasisyntax) (ys5119 macro . quasiquote) (ys5118 macro . syntax-rules) (ys5117 macro . include) (ys5116 macro . define-struct) (ys5115 core-macro . record-constructor-descriptor) (ys5114 core-macro . record-type-descriptor) (ys5113 macro . case) (ys5112 macro . parameterize) (ys5111 macro . unless) (ys5110 macro . when) (ys510f core-macro . or) (ys510e core-macro . and) (ys510d core-macro . if) (ys510c core-macro . let) (ys510b core-macro . letrec*) (ys510a core-macro . letrec) (ys5109 core-macro . type-descriptor) (ys5108 core-macro . case-lambda) (ys5107 core-macro . lambda) (ys5106 core-macro . syntax) (ys5105 core-macro . syntax-case) (ys5104 core-macro . quote) (ys5103 core-macro . foreign-call) (ys5102 letrec-syntax) (ys5101 let-syntax) (ys5100 set!) (ys50ff import) (ys50fe begin) (ys50fd module) (ys50fc define-syntax) (ys50fb define)) values values '#f '#f '#f '#f) (ys2c87@ys2ad3@install-library 'ys5448 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . ys5427) (eval-core . ys5426) (set-symbol-value! . ys5425) (symbol-value . ys5424) (gensym . ys5423) (void . ys5422)) '() values values '#f '#f '#f '#f) (ys2c87@ys2ad3@install-library 'ys5449 '(mosh) '() '() '() '() '((set-symbol-value! . ys5425) (symbol-value . ys5424) (regexp? . ys5420) (read-line . ys541f) (ungensym . ys541d) (alist->eq-hash-table . ys541c) (assoc-ref . ys541b) (print . ys541a) (format . ys5419) (host-os . ys5418) (library-path . ys2ab2) (standard-library-path . ys5417) (file-newer? . ys5416) (stat-mtime . ys5415) (digit->integer . ys5411) (call-with-string-input-port . ys5410) (call-with-string-io . ys540f) (string-split . ys540e) (bytevector-for-each . ys540d) (string->regexp . ys540c) (rxmatch . ys540b) (regexp-replace-all . ys540a) (hashtable-for-each . ys5409) (set-current-directory! . ys5404) (expand-path . ys5403) (current-directory . ys5402) (p . ys53be) (get-timeofday . ys53a5) (get-command-line . ys53a4) (sys-display . ys53a3) (whereis . ys53a2) (register . ys53a1) (vm-join! . ys53a0) (vm-set-value! . ys539f) (vm? . ys539e) (main-vm? . ys539d) (vm-eval . ys539c) (vm-self . ys539b) (vm-start! . ys539a) (make-vm . ys5399) (mutex-try-lock! . ys5398) (mutex-unlock! . ys5397) (mutex-lock! . ys5396) (mutex? . ys5395) (make-mutex . ys5394) (condition-variable-notify-all! . ys5393) (condition-variable-notify! . ys5392) (condition-variable-wait! . ys5391) (make-condition-variable . ys5390) (mosh-executable-path . ys538f) (make-file-options . ys538e) (source-info . ys538d) (make-compiler-instruction . ys538c) (make-instruction . ys538b) (set-source-info! . ys538a) (bignum? . ys5389) (fast-equal? . ys5388) (fasl-read . ys5387) (fasl-write . ys5386) (time-usage . ys5385) (os-constant . ys5384) (time . ys5122) (include . ys5117)) '() values values '#f '#f '#f '#f) (ys2c87@ys2ad3@install-library 'ys544a '(system) '() '() '() '() '((gensym-prefix-set! . ys541e) (write-to-file . ys5414) (file->list . ys5413) (file->string . ys5412) (mosh-cache-dir . ys289d) (call-process . ys5408) (local-tz-offset . ys5407) (microseconds . ys5406) (directory-list . ys5405) (expand-path . ys5403) (%spawn . ys5401) (%waitpid . ys5400) (simple-struct-name . ys53ff) (simple-struct-set! . ys53fe) (simple-struct-ref . ys53fd) (make-simple-struct . ys53fc) (simple-struct? . ys53fb) (pointer-ref-c-int64 . ys53fa) (pointer-ref-c-int32 . ys53f9) (pointer-ref-c-int16 . ys53f8) (pointer-ref-c-int8 . ys53f7) (pointer-ref-c-uint64 . ys53f6) (pointer-ref-c-uint32 . ys53f5) (pointer-ref-c-uint16 . ys53f4) (pointer-ref-c-uint8 . ys53f3) (pointer-set-c-uint64! . ys53f2) (pointer-set-c-uint32! . ys53f1) (pointer-set-c-uint16! . ys53f0) (pointer-set-c-uint8! . ys53ef) (pointer-set-c-int64! . ys53ee) (pointer-set-c-int32! . ys53ed) (pointer-set-c-int16! . ys53ec) (pointer-set-c-int8! . ys53eb) (pointer-set-c-pointer! . ys53ea) (pointer-set-c-double! . ys53e9) (pointer-set-c-float! . ys53e8) (pointer-set-c-long-long! . ys53e7) (pointer-set-c-long! . ys53e6) (pointer-set-c-int! . ys53e5) (pointer-set-c-short! . ys53e4) (pointer-set-c-char! . ys53e3) (pointer-ref-c-pointer . ys53e2) (pointer-ref-c-double . ys53e1) (pointer-ref-c-float . ys53e0) (pointer-ref-c-unsigned-long-long . ys53df) (pointer-ref-c-signed-long-long . ys53de) (pointer-ref-c-unsigned-long . ys53dd) (pointer-ref-c-signed-long . ys53dc) (pointer-ref-c-unsigned-int . ys53db) (pointer-ref-c-signed-int . ys53da) (pointer-ref-c-unsigned-short . ys53d9) (pointer-ref-c-signed-short . ys53d8) (pointer-ref-c-unsigned-char . ys53d7) (pointer-ref-c-signed-char . ys53d6) (pointer->integer . ys53d5) (integer->pointer . ys53d4) (pointer? . ys53d3) (shared-errno . ys53d2) (%ffi-free-c-callback-trampoline . ys53d1) (%ffi-make-c-callback-trampoline . ys53d0) (%ffi-free . ys53cf) (%ffi-malloc . ys53ce) (%ffi-supported? . ys53cd) (%ffi-pointer->string . ys53cc) (%ffi-call->string-or-zero . ys53cb) (%ffi-call->double . ys53ca) (%ffi-call->void* . ys53c9) (%ffi-call->void . ys53c8) (%ffi-call->char . ys53c7) (%ffi-call->uint . ys53c6) (%ffi-call->int . ys53c5) (%ffi-lookup . ys53c4) (%ffi-open . ys53c3) (null-terminated-utf8->string . ys53c2) (null-terminated-bytevector->string . ys53c1) (%fork . ys53c0) (%pipe . ys53bf) (open-output-string . ys53bd) (get-output-string . ys53bc) (file-stat-ctime . ys53bb) (file-stat-atime . ys53ba) (file-stat-mtime . ys53b9) (file-size-in-bytes . ys53b8) (file-writable? . ys53b7) (file-executable? . ys53b6) (file-readable? . ys53b5) (file-regular? . ys53b4) (file-symbolic-link? . ys53b3) (file-directory? . ys53b2) (create-symbolic-link . ys53b1) (rename-file . ys53b0) (delete-directory . ys53af) (create-directory . ys53ae) (create-mosh-cache-dir . ys53ad) (get-environment-variables . ys53ac) (current-exception-handler . ys53ab) (get-environment-variable . ys53aa) (join-wraps . ys53a9) (id->real-label . ys53a8) (same-marks? . ys53a7) (same-marks*? . ys53a6) (disasm . ys5383) (make-parameter . ys289b) (socket-port . ys5382) (socket-shutdown . ys5381) (socket-close . ys5380) (socket-send . ys537f) (socket-recv! . ys537e) (socket-recv . ys537d) (make-server-socket . ys537c) (make-client-socket . ys537b) (socket-accept . ys537a) (socket? . ys5379) (parameterize . ys5112)) '() values values '#f '#f '#f '#f)))
(begin (set! ys4f7e@ref (unspecified)) (set! ys4f80@x* (unspecified)) (set! ys4f82@add-library-path! (unspecified)) (set! ys4f84@parse-and-add-library-path (unspecified)) (set! ys4f86@for-each-with-index (unspecified)) (set! ys4f88@rpad (unspecified)) (set! ys4f8a@condition-printer (unspecified)) (set! ys4f8c@record->field-alist (unspecified)) (set! ys4f8e@map-with-index (unspecified)) (set! ys4f90@repl (unspecified)) (set! ys4f92@trace-printer (unspecified)) (set! ys4f94@command-line (unspecified)) (set! ys4f96@local-library-path (unspecified)) (set! ys4f98@load/args (unspecified)) (set! ys4f9a@load (unspecified)) (set! ys4f9c@ironscheme-build (unspecified)) (set! ys4f9e@eval-top-level (unspecified)) (set! ys4fa0@compile-system-libraries (unspecified)) (set! ys4fa2@compile (unspecified)) (set! ys4fa4@compile->closure (unspecified)) (set! ys4fa6@pre-compile-r6rs-file (unspecified)) (set! ys4fa8@load-r6rs-top-level (unspecified)) (set! ys4faa@load-r6rs-top-level-sexp (unspecified)) (set! ys4fac@prefix-inc (unspecified)) (set! ys4fae@prefix-inc! (unspecified)) (set! ys4f7e@ref (lambda (ys4fe9@rtd ys4fea@i ys4feb@x) (let ((ys4fef@val ((record-accessor ys4fe9@rtd ys4fea@i) ys4feb@x))) (if (symbol? ys4fef@val) (ungensym ys4fef@val) ys4fef@val)))) (set! ys50e1@ys4f7e@ref ys4f7e@ref) (set! ys4f80@x* '()) (set! ys50e2@ys4f80@x* ys4f80@x*) (set! ys4f82@add-library-path! (lambda (ys4ff1@path) (ys2c77@ys2ab3@library-path (append (ys2c77@ys2ab3@library-path) (list ys4ff1@path))))) (set! ys50e3@ys4f82@add-library-path! ys4f82@add-library-path!) (set! ys4f84@parse-and-add-library-path (lambda (ys4ff3@paths ys4ff4@message) (let ((ys4ff8@separator '#f)) (begin (set! ys4ff8@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((ys4ff9@t ys4ff3@paths)) (if ys4ff9@t ((lambda (ys4ffb@paths) (for-each (lambda (ys4ffd@path) (if (file-exists? ys4ffd@path) (ys4f82@add-library-path! (expand-path ys4ffd@path)) (format (current-error-port) ys4ff4@message ys4ffd@path))) (string-split ys4ffb@paths ys4ff8@separator))) ys4ff9@t) (void))))))) (set! ys50e4@ys4f84@parse-and-add-library-path ys4f84@parse-and-add-library-path) (set! ys4f86@for-each-with-index (lambda (ys4fff@proc ys5000@lst) (letrec ((ys5003@loop (lambda (ys5005@i ys5006@lst) (if (null? ys5006@lst) (if '#f '#f (void)) (begin (ys4fff@proc ys5005@i (car ys5006@lst)) (ys5003@loop (+ ys5005@i '1) (cdr ys5006@lst))))))) (ys5003@loop '1 ys5000@lst)))) (set! ys50e5@ys4f86@for-each-with-index ys4f86@for-each-with-index) (set! ys4f88@rpad (lambda (ys5009@str ys500a@pad ys500b@n) (let ((ys500f@rest (- ys500b@n (string-length (format '"~a" ys5009@str))))) (let ys5015@loop ((ys5011@rest ys500f@rest) (ys5012@ret (format '"~a" ys5009@str))) (if (<= ys5011@rest '0) ys5012@ret (ys5015@loop (- ys5011@rest '1) (string-append ys5012@ret ys500a@pad))))))) (set! ys50e6@ys4f88@rpad ys4f88@rpad) (set! ys4f8a@condition-printer (lambda (ys5017@e ys5018@port) (let ((ys501c@max-condition-len '#f)) (begin (set! ys501c@max-condition-len (apply max (map (lambda (ys502d@c) (string-length (symbol->string (record-type-name (record-rtd ys502d@c))))) (simple-conditions ys5017@e)))) (begin (display '" Condition components:\n" ys5018@port) (ys4f86@for-each-with-index (lambda (ys501d@i ys501e@x) (let ((ys5021@rtd (record-rtd ys501e@x)) (ys5022@fields-alist (ys4f8c@record->field-alist ys501e@x))) (begin (format ys5018@port '" ~d. ~a" ys501d@i (ys4f88@rpad (symbol->string (record-type-name ys5021@rtd)) '" " ys501c@max-condition-len)) (if (null? ys5022@fields-alist) (newline ys5018@port) (void)) (let ys5029@loop ((ys5025@first '#t) (ys5026@fields-alist ys5022@fields-alist)) (if (null? ys5026@fields-alist) '() (let ((ys502b@field (car ys5026@fields-alist))) (begin (if (not ys5025@first) (display (ys4f88@rpad '"" '" " (+ '4 ys501c@max-condition-len)) ys5018@port) (void)) (display '"       " ys5018@port) (display (car ys502b@field) ys5018@port) (display '": " ys5018@port) (write (cdr ys502b@field) ys5018@port) (newline ys5018@port) (ys5029@loop '#f (cdr ys5026@fields-alist))))))))) (simple-conditions ys5017@e))))))) (set! ys50e7@ys4f8a@condition-printer ys4f8a@condition-printer) (set! ys4f8c@record->field-alist (lambda (ys502f@r) (let ((ys5032@ref '#f)) (begin (set! ys5032@ref (lambda (ys503d@rtd ys503e@i ys503f@x) (let ((ys5043@val ((record-accessor ys503d@rtd ys503e@i) ys503f@x))) (if (symbol? ys5043@val) (ungensym ys5043@val) ys5043@val)))) (let ys5037@loop ((ys5033@ret '()) (ys5034@rtd (record-rtd ys502f@r))) (if ys5034@rtd (ys5037@loop (append ys5033@ret (ys4f8e@map-with-index (lambda (ys5039@i ys503a@field) (cons ys503a@field (ys5032@ref ys5034@rtd ys5039@i ys502f@r))) (vector->list (record-type-field-names ys5034@rtd)))) (record-type-parent ys5034@rtd)) ys5033@ret)))))) (set! ys50e8@ys4f8c@record->field-alist ys4f8c@record->field-alist) (set! ys4f8e@map-with-index (lambda (ys5045@proc ys5046@lst) (let ys504f@loop ((ys5049@i '0) (ys504a@lst ys5046@lst) (ys504b@ret '())) (if (null? ys504a@lst) (reverse ys504b@ret) (ys504f@loop (+ ys5049@i '1) (cdr ys504a@lst) (cons (ys5045@proc ys5049@i (car ys504a@lst)) ys504b@ret)))))) (set! ys50e9@ys4f8e@map-with-index ys4f8e@map-with-index) (set! ys4f90@repl (lambda ys5051@x (let ((ys5054@rec '#f)) (begin (set! ys5054@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (ys5057@ys5055) (lambda () (with-exception-handler (lambda (ys5059@e) ((call/cc (lambda (ys505b@ys5056) (ys5057@ys5055 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? ys5059@e) (ys4f8a@condition-printer ys5059@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" ys5059@e))) (ys505b@ys5056 (lambda () (raise-continuable ys5059@e)))))))))) (lambda () (let ys5061@loop ((ys505d@line (get-line (current-input-port))) (ys505e@accum '"")) (let ((ys5064@parentheses-ok? '#f) (ys5066@eval-string-print '#f)) (begin (set! ys5064@parentheses-ok? (lambda (ys506b@text) (let ys5073@loop ((ys506d@chars (string->list ys506b@text)) (ys506e@p0 '0) (ys506f@p1 '0)) (if (null? ys506d@chars) (= '0 ys506e@p0 ys506f@p1) (let ((ys5075@t (car ys506d@chars))) (if (memv ys5075@t '(#\()) (ys5073@loop (cdr ys506d@chars) (+ ys506e@p0 '1) ys506f@p1) (if (memv ys5075@t '(#\))) (ys5073@loop (cdr ys506d@chars) (- ys506e@p0 '1) ys506f@p1) (if (memv ys5075@t '(#\[)) (ys5073@loop (cdr ys506d@chars) ys506e@p0 (+ ys506f@p1 '1)) (if (memv ys5075@t '(#\])) (ys5073@loop (cdr ys506d@chars) ys506e@p0 (- ys506f@p1 '1)) (ys5073@loop (cdr ys506d@chars) ys506e@p0 ys506f@p1)))))))))) (set! ys5066@eval-string-print (lambda (ys5069@text) (if (not (or (string=? '"\n" ys5069@text) (= '0 (string-length ys5069@text)))) (write (ys4f9e@eval-top-level (call-with-port (open-string-input-port ys5069@text) read))) (void)))) (if (eof-object? ys505d@line) (begin (ys5066@eval-string-print ys505e@accum) (exit)) (let ((ys5067@current (string-append ys505e@accum ys505d@line))) (if (ys5064@parentheses-ok? ys5067@current) (ys5066@eval-string-print ys5067@current) (ys5061@loop (get-line (current-input-port)) ys5067@current))))))))))))) (newline) (ys5054@rec)))) (ys5054@rec))))) (set! ys50ea@ys4f90@repl ys4f90@repl) (set! ys4f92@trace-printer (ys29bd@ys289c@make-parameter write)) (set! ys50eb@ys4f92@trace-printer ys4f92@trace-printer) (set! ys4f94@command-line (ys29bd@ys289c@make-parameter (get-command-line))) (set! ys50ec@ys4f94@command-line ys4f94@command-line) (set! ys4f96@local-library-path (lambda (ys5077@filename) (ys2c77@ys2ab3@library-path))) (set! ys50ed@ys4f96@local-library-path ys4f96@local-library-path) (set! ys4f98@load/args (lambda (ys5079@filename . ys507b@args) (begin (apply ys4fa8@load-r6rs-top-level ys5079@filename 'load ys507b@args) (void)))) (set! ys50ee@ys4f98@load/args ys4f98@load/args) (set! ys4f9a@load (lambda (ys507d@filename) (begin (apply ys4fa8@load-r6rs-top-level ys507d@filename 'load (ys4f94@command-line)) (void)))) (set! ys50ef@ys4f9a@load ys4f9a@load) (set! ys4f9c@ironscheme-build (lambda () (ys4f9a@load '"ironscheme-buildscript.ss"))) (set! ys50f0@ys4f9c@ironscheme-build ys4f9c@ironscheme-build) (set! ys4f9e@eval-top-level (lambda (ys507f@x) (ys4ba4@ys313a@eval ys507f@x (ys4bbb@ys3168@interaction-environment)))) (set! ys50f1@ys4f9e@eval-top-level ys4f9e@eval-top-level) (set! ys4fa0@compile-system-libraries (lambda () (ys4f9e@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! ys50f2@ys4fa0@compile-system-libraries ys4fa0@compile-system-libraries) (set! ys4fa2@compile (lambda (ys5081@filename) (ys4fa8@load-r6rs-top-level ys5081@filename 'compile))) (set! ys50f3@ys4fa2@compile ys4fa2@compile) (set! ys4fa4@compile->closure (lambda (ys5083@filename) (ys4fa8@load-r6rs-top-level ys5083@filename 'closure))) (set! ys50f4@ys4fa4@compile->closure ys4fa4@compile->closure) (set! ys4fa6@pre-compile-r6rs-file (lambda (ys5085@filename) (ys4fa8@load-r6rs-top-level ys5085@filename 'compile))) (set! ys50f5@ys4fa6@pre-compile-r6rs-file ys4fa6@pre-compile-r6rs-file) (set! ys4fa8@load-r6rs-top-level (lambda (ys5087@filename ys5088@how . ys508b@args) (begin (ys2c77@ys2ab3@library-path (ys4f96@local-library-path ys5087@filename)) (let ((ys508d@x* (with-input-from-file ys5087@filename (lambda () (let ys508f@f () (let ((ys5091@x (ys29b0@ys2882@read-annotated))) (if (eof-object? ys5091@x) '() (cons ys5091@x (ys508f@f))))))))) (let ((ys5093@t ys5088@how)) (if (memv ys5093@t '(closure)) (ys4bba@ys3166@pre-compile-r6rs-top-level ys508d@x*) (if (memv ys5093@t '(load)) (begin (ys4f94@command-line (cons ys5087@filename (car ys508b@args))) (ys29be@ys289e@mosh-cache-dir (create-mosh-cache-dir)) (if (ys29be@ys289e@mosh-cache-dir) (gensym-prefix-set! (ys4fae@prefix-inc! (string-append (ys29be@ys289e@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (ys5095@file) ((call/cc (lambda (ys5099@ys5097) (lambda () (with-exception-handler (lambda (ys509b@c) ((call/cc (lambda (ys509d@ys5098) (ys5099@ys5097 (lambda () (if '#t '#t (ys509d@ys5098 (lambda () (raise-continuable ys509b@c)))))))))) (lambda () (delete-file (string-append (ys29be@ys289e@mosh-cache-dir) '"/" ys5095@file))))))))) (directory-list (ys29be@ys289e@mosh-cache-dir))) (void)) (let ((ys509f@compiled (ys4bb9@ys3164@compile-r6rs-top-level ys508d@x*))) (begin (if (and (ys29be@ys289e@mosh-cache-dir) (not (symbol-value '%disable-acc))) (ys2c7b@ys2abb@serialize-all ys29b8@ys2892@serialize-library ys2a14@ys29cd@compile-core-expr) (void)) (ys509f@compiled)))) (if (memv ys5093@t '(compile)) (begin (ys4bb9@ys3164@compile-r6rs-top-level ys508d@x*) (ys2c7b@ys2abb@serialize-all ys29b8@ys2892@serialize-library ys2a14@ys29cd@compile-core-expr)) (if '#f '#f (void)))))))))) (set! ys50f6@ys4fa8@load-r6rs-top-level ys4fa8@load-r6rs-top-level) (set! ys4faa@load-r6rs-top-level-sexp (lambda (ys50a1@import-spec ys50a2@thunk) (let ((ys50ad@ys50a6 ys2c77@ys2ab3@library-path) (ys50ae@ys50a8 ys29be@ys289e@mosh-cache-dir) (ys50af@ys50aa (ys4f96@local-library-path '"")) (ys50b0@ys50ac (create-mosh-cache-dir))) (let ((ys50b5@swap (lambda () (begin (let ((ys50b7@t (ys50ad@ys50a6))) (begin (ys50ad@ys50a6 ys50af@ys50aa) (set! ys50af@ys50aa ys50b7@t))) (let ((ys50b9@t (ys50ae@ys50a8))) (begin (ys50ae@ys50a8 ys50b0@ys50ac) (set! ys50b0@ys50ac ys50b9@t))))))) (dynamic-wind ys50b5@swap (lambda () (begin (if (ys29be@ys289e@mosh-cache-dir) (gensym-prefix-set! (ys4fae@prefix-inc! (string-append (ys29be@ys289e@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((ys50bf@ys50bc ys4f94@command-line) (ys50c0@ys50be '())) (let ((ys50c3@swap (lambda () (let ((ys50c5@t (ys50bf@ys50bc))) (begin (ys50bf@ys50bc ys50c0@ys50be) (set! ys50c0@ys50be ys50c5@t)))))) (dynamic-wind ys50c3@swap (lambda () ((ys4bb9@ys3164@compile-r6rs-top-level (list (cons 'import ys50a1@import-spec) (list ys50a2@thunk))))) ys50c3@swap))))) ys50b5@swap))))) (set! ys50f7@ys4faa@load-r6rs-top-level-sexp ys4faa@load-r6rs-top-level-sexp) (set! ys4fac@prefix-inc (lambda (ys50c7@prefix-string) (let ((ys50c9@prefix (symbol->string ys50c7@prefix-string))) (let ((ys50cb@len (string-length ys50c9@prefix))) (let ys50d3@loop ((ys50cd@i (- ys50cb@len '1)) (ys50ce@carry? '#t) (ys50cf@accum '())) (if (< ys50cd@i '0) (string->symbol (list->string (if ys50ce@carry? (cons '#\a ys50cf@accum) ys50cf@accum))) (if ys50ce@carry? (let ((ys50d5@next-integer (+ '1 (char->integer (string-ref ys50c9@prefix ys50cd@i))))) (if (= ys50d5@next-integer '123) (ys50d3@loop (- ys50cd@i '1) '#f (cons '#\A ys50cf@accum)) (if (= ys50d5@next-integer '91) (ys50d3@loop (- ys50cd@i '1) '#t (cons '#\a ys50cf@accum)) (ys50d3@loop (- ys50cd@i '1) '#f (cons (integer->char ys50d5@next-integer) ys50cf@accum))))) (ys50d3@loop (- ys50cd@i '1) '#f (cons (string-ref ys50c9@prefix ys50cd@i) ys50cf@accum))))))))) (set! ys50f8@ys4fac@prefix-inc ys4fac@prefix-inc) (set! ys4fae@prefix-inc! (lambda (ys50d7@file) (begin (if (not (file-exists? ys50d7@file)) (call-with-output-file ys50d7@file (lambda (ys50d9@port) (write 'd ys50d9@port))) (void)) (let ((ys50db@prefix (call-with-input-file ys50d7@file read))) (let ((ys50dd@next-prefix (ys4fac@prefix-inc ys50db@prefix))) (begin (call-with-port (open-file-output-port ys50d7@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (ys50df@port) (write ys50dd@next-prefix ys50df@port))) ys50db@prefix)))))) (set! ys50f9@ys4fae@prefix-inc! ys4fae@prefix-inc!) (begin (ys2c7c@ys2abd@current-precompiled-library-loader ys29b9@ys2894@load-serialized-library) (set-symbol-value! 'load ys4f9a@load) (set-symbol-value! 'pre-compile-r6rs-file ys4fa6@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs ys4f9e@eval-top-level) (set-symbol-value! 'int-env-syms ys4b9b@ys3128@interaction-environment-symbols) (set-symbol-value! 'expanded2core ys2a13@ys29cb@expanded->core) (set-symbol-value! 'trace-printer ys4f92@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (ys4faf@c) (condition (ys4edb@ys4ce5@make-non-continuable-violation) (ys4ed1@ys4ccc@make-who-condition 'raise) (ys4e95@ys4c2d@make-message-condition '"returned from non-continuable exception") (ys4ec7@ys4cb1@make-irritants-condition (list ys4faf@c))))) (ys4f84@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (ys4f84@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (ys4f82@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (ys4f82@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (ys4f82@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((ys4fb1@prefix (lambda (ys4fb3@ext ys4fb4@ls) (append (map (lambda (ys4fb7@x) (string-append ys4fb3@ext ys4fb7@x)) ys4fb4@ls) ys4fb4@ls)))) (ys2c78@ys2ab5@library-extensions (ys4fb1@prefix '".mosh" (ys2c78@ys2ab5@library-extensions)))) (current-exception-handler (lambda (ys4fb9@c) (if (condition? ys4fb9@c) (ys4f8a@condition-printer ys4fb9@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" ys4fb9@c)))) (if ((call/cc (lambda (ys4fbd@ys4fbb) (lambda () (with-exception-handler (lambda (ys4fbf@c) ((call/cc (lambda (ys4fc1@ys4fbc) (ys4fbd@ys4fbb (lambda () (if '#t '#f (ys4fc1@ys4fbc (lambda () (raise-continuable ys4fbf@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (ys4faa@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (ys4f94@command-line)) (let ((ys4fcb@ys4fc4 ys4f94@command-line) (ys4fcc@ys4fc6 ys29be@ys289e@mosh-cache-dir) (ys4fcd@ys4fc8 '()) (ys4fce@ys4fca (create-mosh-cache-dir))) (let ((ys4fd3@swap (lambda () (begin (let ((ys4fd5@t (ys4fcb@ys4fc4))) (begin (ys4fcb@ys4fc4 ys4fcd@ys4fc8) (set! ys4fcd@ys4fc8 ys4fd5@t))) (let ((ys4fd7@t (ys4fcc@ys4fc6))) (begin (ys4fcc@ys4fc6 ys4fce@ys4fca) (set! ys4fce@ys4fca ys4fd7@t))))))) (dynamic-wind ys4fd3@swap (lambda () (begin (if (ys29be@ys289e@mosh-cache-dir) (gensym-prefix-set! (ys4fae@prefix-inc! (string-append (ys29be@ys289e@mosh-cache-dir) '"/prefix.txt"))) (void)) (ys4f90@repl))) ys4fd3@swap))) (begin (ys2c77@ys2ab3@library-path (ys4f96@local-library-path (car (ys4f94@command-line)))) (set! ys4f80@x* (with-input-from-file (car (ys4f94@command-line)) (lambda () (let ys4fd9@f () (let ((ys4fdb@x (ys29b0@ys2882@read-annotated))) (if (eof-object? ys4fdb@x) '() (cons ys4fdb@x (ys4fd9@f)))))))) (ys4f94@command-line (cons (car (ys4f94@command-line)) (cdr (ys4f94@command-line)))) (ys29be@ys289e@mosh-cache-dir (create-mosh-cache-dir)) (if (ys29be@ys289e@mosh-cache-dir) (gensym-prefix-set! (ys4fae@prefix-inc! (string-append (ys29be@ys289e@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (ys4fdd@file) ((call/cc (lambda (ys4fe1@ys4fdf) (lambda () (with-exception-handler (lambda (ys4fe3@c) ((call/cc (lambda (ys4fe5@ys4fe0) (ys4fe1@ys4fdf (lambda () (if '#t '#t (ys4fe5@ys4fe0 (lambda () (raise-continuable ys4fe3@c)))))))))) (lambda () (delete-file (string-append (ys29be@ys289e@mosh-cache-dir) '"/" ys4fdd@file))))))))) (directory-list (ys29be@ys289e@mosh-cache-dir))) (void)) (let ((ys4fe7@compiled (ys4bb9@ys3164@compile-r6rs-top-level ys4f80@x*))) (begin (if (and (ys29be@ys289e@mosh-cache-dir) (not (symbol-value '%disable-acc))) (ys2c7b@ys2abb@serialize-all ys29b8@ys2892@serialize-library ys2a14@ys29cd@compile-core-expr) (void)) (ys4fe7@compiled))))))))
