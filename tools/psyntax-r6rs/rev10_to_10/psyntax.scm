;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! aK580@library-file-path->cache-path (unspecified)) (set! aK582@read-annotated (unspecified)) (set! aK584@annotation-stripped (unspecified)) (set! aK586@annotation? (unspecified)) (set! aK588@annotation-source (unspecified)) (set! aK58a@annotation-expression (unspecified)) (set! aK58c@scm->fasl (unspecified)) (set! aK58e@fasl-save (unspecified)) (set! aK590@fasl-load (unspecified)) (set! aK592@serialize-library (unspecified)) (set! aK594@load-serialized-library (unspecified)) (set! aK596@make-record-printer (unspecified)) (set! aK598@compile-core (unspecified)) (set! aK59a@read-library-source-file (unspecified)) (set! aK59c@make-parameter (unspecified)) (set! aK59e@mosh-cache-dir (unspecified)) (set! aK634@file-options-spec (unspecified)) (set! aK580@library-file-path->cache-path (lambda (aK635@x) (call-with-values (lambda () (open-string-output-port)) (lambda (aK63b@aK638 aK63c@aK63a) (let ((aK63f@extract aK63c@aK63a) (aK640@p aK63b@aK638)) (let ((aK644@display-hex '#f)) (begin (set! aK644@display-hex (lambda (aK64d@n) (if (<= '0 aK64d@n '9) (display aK64d@n aK640@p) (display (integer->char (+ (char->integer '#\a) (- aK64d@n '10))) aK640@p)))) (begin (let aK647@f ((aK645@ls (string-split aK635@x '#\/))) (if (not (null? aK645@ls)) (begin (display '"_" aK640@p) (for-each (lambda (aK649@c) (if (or (char<=? '#\a aK649@c '#\z) (char<=? '#\A aK649@c '#\Z) (char<=? '#\0 aK649@c '#\9) (memv aK649@c '(#\- #\. #\_ #\~))) (display aK649@c aK640@p) (begin (display '"%" aK640@p) (let ((aK64b@n (char->integer aK649@c))) (begin (aK644@display-hex (quotient aK64b@n '16)) (aK644@display-hex (remainder aK64b@n '16))))))) (string->list (car aK645@ls))) (aK647@f (cdr aK645@ls))) (void))) (aK63f@extract))))))))) (set! aK6af@aK580@library-file-path->cache-path aK580@library-file-path->cache-path) (set! aK582@read-annotated read) (set! aK6b0@aK582@read-annotated aK582@read-annotated) (set! aK584@annotation-stripped (lambda (aK64f@x) (aK58a@annotation-expression aK64f@x))) (set! aK6b1@aK584@annotation-stripped aK584@annotation-stripped) (set! aK586@annotation? (lambda (aK651@x) (source-info aK651@x))) (set! aK6b2@aK586@annotation? aK586@annotation?) (set! aK588@annotation-source (lambda (aK653@x) (source-info aK653@x))) (set! aK6b3@aK588@annotation-source aK588@annotation-source) (set! aK58a@annotation-expression (lambda (aK655@x) (if (pair? aK655@x) (cons (car aK655@x) (cdr aK655@x)) (display '"line:46\n")))) (set! aK6b4@aK58a@annotation-expression aK58a@annotation-expression) (set! aK58c@scm->fasl (lambda (aK657@filename) (string-append (aK59e@mosh-cache-dir) '"/" (aK580@library-file-path->cache-path aK657@filename) '".mosh-fasl"))) (set! aK6b5@aK58c@scm->fasl aK58c@scm->fasl) (set! aK58e@fasl-save (lambda (aK659@filename aK65a@obj) (call-with-port (open-file-output-port aK659@filename) (lambda (aK65d@port) ((symbol-value 'fasl-write!) aK65a@obj aK65d@port))))) (set! aK6b6@aK58e@fasl-save aK58e@fasl-save) (set! aK590@fasl-load (lambda (aK65f@filename) (call-with-port (open-file-input-port aK65f@filename) (symbol-value 'fasl-read!)))) (set! aK6b7@aK590@fasl-load aK590@fasl-load) (set! aK592@serialize-library (lambda (aK661@filename aK662@obj) (begin (let ((aK665@expanded2core (symbol-value 'expanded2core))) (let ((aK667@compile (symbol-value 'compile-w/o-halt))) (let ((aK669@code aK662@obj)) (let ((aK66b@pivot (cddddr (cddddr aK669@code)))) (let ((aK66d@visit (aK667@compile (aK665@expanded2core (car aK66b@pivot))))) (begin (set-car! aK66b@pivot aK66d@visit) (let ((aK66f@pivot (cdr aK66b@pivot))) (let ((aK671@invoke (aK667@compile (aK665@expanded2core (car aK66f@pivot))))) (set-car! aK66f@pivot aK671@invoke))))))))) (let ((aK673@fasl-file (aK58c@scm->fasl aK661@filename))) (begin (if (file-exists? aK673@fasl-file) (delete-file aK673@fasl-file) (void)) ((call/cc (lambda (aK677@aK675) (lambda () (with-exception-handler (lambda (aK679@c) ((call/cc (lambda (aK67b@aK676) (aK677@aK675 (lambda () (if '#t (begin (format (current-error-port) '"Warning:serialize-library failed " aK661@filename) (if (file-exists? aK673@fasl-file) (delete-file aK673@fasl-file) (void)) '#f) (aK67b@aK676 (lambda () (raise-continuable aK679@c)))))))))) (lambda () (aK58e@fasl-save aK673@fasl-file aK662@obj)))))))))))) (set! aK6b8@aK592@serialize-library aK592@serialize-library) (set! aK594@load-serialized-library (lambda (aK67d@filename aK67e@obj) (and (aK59e@mosh-cache-dir) (let ((aK681@fasl-file (aK58c@scm->fasl aK67d@filename))) (if (and (file-exists? aK681@fasl-file) ((symbol-value 'file-newer?) aK681@fasl-file aK67d@filename)) (let ((aK683@expanded2core (symbol-value 'expanded2core))) (let ((aK685@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((aK687@code (aK590@fasl-load aK681@fasl-file))) (let ((aK689@pivot (cddddr (cddddr aK687@code)))) (let ((aK68b@visit (car aK689@pivot))) (let ((aK68d@visit-proc (lambda () (aK685@eval-compiled-core aK68b@visit)))) (begin (set-car! aK689@pivot aK68d@visit-proc) (let ((aK68f@pivot (cdr aK689@pivot))) (let ((aK691@invoke (car aK68f@pivot))) (begin (set-car! aK68f@pivot (lambda () (aK685@eval-compiled-core aK691@invoke))) (apply aK67e@obj aK687@code))))))))))) '#f))))) (set! aK6b9@aK594@load-serialized-library aK594@load-serialized-library) (set! aK596@make-record-printer (lambda (aK693@name aK694@printer) (lambda aK697@x (begin (display '"record printer") (for-each display aK697@x))))) (set! aK6ba@aK596@make-record-printer aK596@make-record-printer) (set! aK598@compile-core (lambda aK699@x (apply error 'comile-core '"not implementated" aK699@x))) (set! aK6bb@aK598@compile-core aK598@compile-core) (set! aK59a@read-library-source-file (lambda (aK69b@file-name) (with-input-from-file aK69b@file-name aK582@read-annotated))) (set! aK6bc@aK59a@read-library-source-file aK59a@read-library-source-file) (set! aK59c@make-parameter (lambda aK6ab (let ((aK6ac (length aK6ab))) (if (= aK6ac '1) (apply (lambda (aK69d@x) (aK59c@make-parameter aK69d@x (lambda (aK69f@x) aK69f@x))) aK6ab) (if (= aK6ac '2) (apply (lambda (aK6a1@x aK6a2@fender) (let ((aK6a5@x (aK6a2@fender aK6a1@x))) (lambda aK6a9 (let ((aK6aa (length aK6a9))) (if (= aK6aa '0) (apply (lambda () aK6a5@x) aK6a9) (if (= aK6aa '1) (apply (lambda (aK6a7@v) (set! aK6a5@x (aK6a2@fender aK6a7@v))) aK6a9) (error 'apply '"invalid arg count"))))))) aK6ab) (error 'apply '"invalid arg count")))))) (set! aK6bd@aK59c@make-parameter aK59c@make-parameter) (set! aK59e@mosh-cache-dir (aK59c@make-parameter '#f)) (set! aK6be@aK59e@mosh-cache-dir aK59e@mosh-cache-dir) (set! aK634@file-options-spec (lambda (aK6ad@x) aK6ad@x)) (set! aK6bf@aK634@file-options-spec aK634@file-options-spec) (void))
(begin (set! aK6c5@current-primitive-locations (unspecified)) (set! aK6c7@mutable? (unspecified)) (set! aK6c9@rewriter (unspecified)) (set! aK6cb@expanded->core (unspecified)) (set! aK6cd@compile-core-expr (unspecified)) (set! aK6cf@pretty-print (unspecified)) (set! aK6d1@compile-core-expr-to-port (unspecified)) (set! aK6c5@current-primitive-locations (aK6bd@aK59c@make-parameter (lambda (aK6d2@x) '#f) (lambda (aK6d4@p) aK6d4@p))) (set! aK710@aK6c5@current-primitive-locations aK6c5@current-primitive-locations) (set! aK6c7@mutable? (lambda (aK6d6@x) (or (pair? aK6d6@x) (vector? aK6d6@x) (hashtable? aK6d6@x)))) (set! aK711@aK6c7@mutable? aK6c7@mutable?) (set! aK6c9@rewriter (lambda (aK6d8@quote-hack?) (let ((aK6db@f '#f)) (begin (set! aK6db@f (lambda (aK6dc@x) (if (pair? aK6dc@x) (let ((aK6de@t (car aK6dc@x))) (if (memv aK6de@t '(quote)) (if (and aK6d8@quote-hack? (aK6c7@mutable? (cadr aK6dc@x))) (let ((aK6e0@g (gensym))) (begin (set-symbol-value! aK6e0@g (cadr aK6dc@x)) aK6e0@g)) aK6dc@x) (if (memv aK6de@t '(case-lambda)) (cons 'case-lambda (map (lambda (aK6e2@x) (cons (car aK6e2@x) (map aK6db@f (cdr aK6e2@x)))) (cdr aK6dc@x))) (if (memv aK6de@t '(lambda)) (cons* 'lambda (cadr aK6dc@x) (map aK6db@f (cddr aK6dc@x))) (if (memv aK6de@t '(letrec)) (let ((aK6e4@bindings (cadr aK6dc@x)) (aK6e5@body* (cddr aK6dc@x))) (let ((aK6e8@lhs* (map car aK6e4@bindings)) (aK6e9@rhs* (map cadr aK6e4@bindings))) (cons* 'letrec (map list aK6e8@lhs* (map aK6db@f aK6e9@rhs*)) (map aK6db@f aK6e5@body*)))) (if (memv aK6de@t '(letrec*)) (let ((aK6ec@bindings (cadr aK6dc@x)) (aK6ed@body* (cddr aK6dc@x))) (let ((aK6f0@lhs* (map car aK6ec@bindings)) (aK6f1@rhs* (map cadr aK6ec@bindings))) (cons* 'letrec* (map list aK6f0@lhs* (map aK6db@f aK6f1@rhs*)) (map aK6db@f aK6ed@body*)))) (if (memv aK6de@t '(library-letrec*)) (let ((aK6f4@name (cadr aK6dc@x)) (aK6f5@x (cdr aK6dc@x))) (let ((aK6f8@bindings (cadr aK6f5@x)) (aK6f9@body* (cddr aK6f5@x))) (let ((aK6fc@lhs* (map car aK6f8@bindings)) (aK6fd@lhs** (map cadr aK6f8@bindings)) (aK6fe@rhs* (map caddr aK6f8@bindings))) (cons* 'library-letrec* aK6f4@name (map list aK6fc@lhs* aK6fd@lhs** (map aK6db@f aK6fe@rhs*)) (map aK6db@f aK6f9@body*))))) (if (memv aK6de@t '(begin)) (cons 'begin (map aK6db@f (cdr aK6dc@x))) (if (memv aK6de@t '(set!)) (list 'set! (cadr aK6dc@x) (aK6db@f (caddr aK6dc@x))) (if (memv aK6de@t '(primitive)) (let ((aK702@op (cadr aK6dc@x))) (let ((aK704@t ((aK6c5@current-primitive-locations) aK702@op))) (if aK704@t ((lambda (aK706@loc) aK706@loc) aK704@t) aK702@op))) (if (memv aK6de@t '(define)) aK6dc@x (if (list? aK6dc@x) (map aK6db@f aK6dc@x) (error 'rewrite '"invalid form ~s ~s" aK6dc@x (list? aK6dc@x)))))))))))))) aK6dc@x))) aK6db@f)))) (set! aK712@aK6c9@rewriter aK6c9@rewriter) (set! aK6cb@expanded->core (lambda (aK708@x) ((aK6c9@rewriter '#f) aK708@x))) (set! aK713@aK6cb@expanded->core aK6cb@expanded->core) (set! aK6cd@compile-core-expr (lambda (aK70a@x) ((aK6c9@rewriter '#f) aK70a@x))) (set! aK714@aK6cd@compile-core-expr aK6cd@compile-core-expr) (set! aK6cf@pretty-print write) (set! aK715@aK6cf@pretty-print aK6cf@pretty-print) (set! aK6d1@compile-core-expr-to-port (lambda (aK70c@x aK70d@p) (aK6cf@pretty-print ((aK6c9@rewriter '#f) aK70c@x) aK70d@p))) (set! aK716@aK6d1@compile-core-expr-to-port aK6d1@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! aK765@make-collection (unspecified)) (set! aK767@current-library-collection (unspecified)) (set! aK769@rp (unspecified)) (set! aK773@library? (unspecified)) (set! aK775@library-id (unspecified)) (set! aK777@set-library-id! (unspecified)) (set! aK779@library-name (unspecified)) (set! aK77b@set-library-name! (unspecified)) (set! aK77d@library-version (unspecified)) (set! aK77f@set-library-version! (unspecified)) (set! aK781@library-imp* (unspecified)) (set! aK783@set-library-imp*! (unspecified)) (set! aK785@library-vis* (unspecified)) (set! aK787@set-library-vis*! (unspecified)) (set! aK789@library-inv* (unspecified)) (set! aK78b@set-library-inv*! (unspecified)) (set! aK78d@library-subst (unspecified)) (set! aK78f@set-library-subst! (unspecified)) (set! aK791@library-env (unspecified)) (set! aK793@set-library-env! (unspecified)) (set! aK795@library-visit-state (unspecified)) (set! aK797@set-library-visit-state! (unspecified)) (set! aK799@library-invoke-state (unspecified)) (set! aK79b@set-library-invoke-state! (unspecified)) (set! aK79d@library-visit-code (unspecified)) (set! aK79f@set-library-visit-code! (unspecified)) (set! aK7a1@library-invoke-code (unspecified)) (set! aK7a3@set-library-invoke-code! (unspecified)) (set! aK7a5@library-visible? (unspecified)) (set! aK7a7@set-library-visible?! (unspecified)) (set! aK7a9@library-source-file-name (unspecified)) (set! aK7ab@set-library-source-file-name! (unspecified)) (set! aK7ad@dummy (unspecified)) (set! aK7af@find-dependencies (unspecified)) (set! aK7b1@find-library-by (unspecified)) (set! aK7b3@library-path (unspecified)) (set! aK7b5@library-extensions (unspecified)) (set! aK7b7@library-name->file-name (unspecified)) (set! aK7b9@file-locator (unspecified)) (set! aK7bb@serialize-all (unspecified)) (set! aK7bd@current-precompiled-library-loader (unspecified)) (set! aK7bf@try-load-from-file (unspecified)) (set! aK7c1@library-loader (unspecified)) (set! aK7c3@current-library-expander (unspecified)) (set! aK7c5@external-pending-libraries (unspecified)) (set! aK7c7@find-external-library (unspecified)) (set! aK7c9@find-library-by-name (unspecified)) (set! aK7cb@library-exists? (unspecified)) (set! aK7cd@find-library-by-spec/die (unspecified)) (set! aK7cf@label->binding-table (unspecified)) (set! aK7d1@install-library-record (unspecified)) (set! aK7d3@install-library (unspecified)) (set! aK7d5@imported-label->binding (unspecified)) (set! aK7d7@invoke-library (unspecified)) (set! aK7d9@visit-library (unspecified)) (set! aK7db@invoke-library-by-spec (unspecified)) (set! aK7dd@installed-libraries (unspecified)) (set! aK7df@library-spec (unspecified)) (set! aK765@make-collection (lambda () (let ((aK7e0@set '())) (let ((aK7e3@set-cons '#f)) (begin (set! aK7e3@set-cons (lambda (aK7e8@x aK7e9@ls) (if (memq aK7e8@x aK7e9@ls) aK7e9@ls (cons aK7e8@x aK7e9@ls)))) (lambda aK7e6 (let ((aK7e7 (length aK7e6))) (if (= aK7e7 '0) (apply (lambda () aK7e0@set) aK7e6) (if (= aK7e7 '1) (apply (lambda (aK7e4@x) (set! aK7e0@set (aK7e3@set-cons aK7e4@x aK7e0@set))) aK7e6) (error 'apply '"invalid arg count")))))))))) (set! aK954@aK765@make-collection aK765@make-collection) (set! aK767@current-library-collection (aK6bd@aK59c@make-parameter (aK765@make-collection) (lambda (aK7ec@x) (begin (if (not (procedure? aK7ec@x)) (assertion-violation 'current-library-collection '"not a procedure" aK7ec@x) (void)) aK7ec@x)))) (set! aK955@aK767@current-library-collection aK767@current-library-collection) (set! aK769@rp (aK6ba@aK596@make-record-printer 'library (lambda (aK7ee@x aK7ef@p aK7f0@wr) (begin (if (not (aK773@library? aK7ee@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (aK77d@library-version aK7ee@x)) (aK779@library-name aK7ee@x) (append (aK779@library-name aK7ee@x) (list (aK77d@library-version aK7ee@x))))) aK7ef@p))))) (set! aK956@aK769@rp aK769@rp) (set! aK773@library? (lambda (aK7f4@x) (and (simple-struct? aK7f4@x) (eq? (simple-struct-name aK7f4@x) 'library)))) (set! aK957@aK773@library? aK773@library?) (set! aK775@library-id (lambda (aK7f6@x) (simple-struct-ref aK7f6@x '0))) (set! aK958@aK775@library-id aK775@library-id) (set! aK777@set-library-id! (lambda (aK7f8@x aK7f9@val) (simple-struct-set! aK7f8@x '0 aK7f9@val))) (set! aK959@aK777@set-library-id! aK777@set-library-id!) (set! aK779@library-name (lambda (aK7fc@x) (simple-struct-ref aK7fc@x '1))) (set! aK95a@aK779@library-name aK779@library-name) (set! aK77b@set-library-name! (lambda (aK7fe@x aK7ff@val) (simple-struct-set! aK7fe@x '1 aK7ff@val))) (set! aK95b@aK77b@set-library-name! aK77b@set-library-name!) (set! aK77d@library-version (lambda (aK802@x) (simple-struct-ref aK802@x '2))) (set! aK95c@aK77d@library-version aK77d@library-version) (set! aK77f@set-library-version! (lambda (aK804@x aK805@val) (simple-struct-set! aK804@x '2 aK805@val))) (set! aK95d@aK77f@set-library-version! aK77f@set-library-version!) (set! aK781@library-imp* (lambda (aK808@x) (simple-struct-ref aK808@x '3))) (set! aK95e@aK781@library-imp* aK781@library-imp*) (set! aK783@set-library-imp*! (lambda (aK80a@x aK80b@val) (simple-struct-set! aK80a@x '3 aK80b@val))) (set! aK95f@aK783@set-library-imp*! aK783@set-library-imp*!) (set! aK785@library-vis* (lambda (aK80e@x) (simple-struct-ref aK80e@x '4))) (set! aK960@aK785@library-vis* aK785@library-vis*) (set! aK787@set-library-vis*! (lambda (aK810@x aK811@val) (simple-struct-set! aK810@x '4 aK811@val))) (set! aK961@aK787@set-library-vis*! aK787@set-library-vis*!) (set! aK789@library-inv* (lambda (aK814@x) (simple-struct-ref aK814@x '5))) (set! aK962@aK789@library-inv* aK789@library-inv*) (set! aK78b@set-library-inv*! (lambda (aK816@x aK817@val) (simple-struct-set! aK816@x '5 aK817@val))) (set! aK963@aK78b@set-library-inv*! aK78b@set-library-inv*!) (set! aK78d@library-subst (lambda (aK81a@x) (simple-struct-ref aK81a@x '6))) (set! aK964@aK78d@library-subst aK78d@library-subst) (set! aK78f@set-library-subst! (lambda (aK81c@x aK81d@val) (simple-struct-set! aK81c@x '6 aK81d@val))) (set! aK965@aK78f@set-library-subst! aK78f@set-library-subst!) (set! aK791@library-env (lambda (aK820@x) (simple-struct-ref aK820@x '7))) (set! aK966@aK791@library-env aK791@library-env) (set! aK793@set-library-env! (lambda (aK822@x aK823@val) (simple-struct-set! aK822@x '7 aK823@val))) (set! aK967@aK793@set-library-env! aK793@set-library-env!) (set! aK795@library-visit-state (lambda (aK826@x) (simple-struct-ref aK826@x '8))) (set! aK968@aK795@library-visit-state aK795@library-visit-state) (set! aK797@set-library-visit-state! (lambda (aK828@x aK829@val) (simple-struct-set! aK828@x '8 aK829@val))) (set! aK969@aK797@set-library-visit-state! aK797@set-library-visit-state!) (set! aK799@library-invoke-state (lambda (aK82c@x) (simple-struct-ref aK82c@x '9))) (set! aK96a@aK799@library-invoke-state aK799@library-invoke-state) (set! aK79b@set-library-invoke-state! (lambda (aK82e@x aK82f@val) (simple-struct-set! aK82e@x '9 aK82f@val))) (set! aK96b@aK79b@set-library-invoke-state! aK79b@set-library-invoke-state!) (set! aK79d@library-visit-code (lambda (aK832@x) (simple-struct-ref aK832@x '10))) (set! aK96c@aK79d@library-visit-code aK79d@library-visit-code) (set! aK79f@set-library-visit-code! (lambda (aK834@x aK835@val) (simple-struct-set! aK834@x '10 aK835@val))) (set! aK96d@aK79f@set-library-visit-code! aK79f@set-library-visit-code!) (set! aK7a1@library-invoke-code (lambda (aK838@x) (simple-struct-ref aK838@x '11))) (set! aK96e@aK7a1@library-invoke-code aK7a1@library-invoke-code) (set! aK7a3@set-library-invoke-code! (lambda (aK83a@x aK83b@val) (simple-struct-set! aK83a@x '11 aK83b@val))) (set! aK96f@aK7a3@set-library-invoke-code! aK7a3@set-library-invoke-code!) (set! aK7a5@library-visible? (lambda (aK83e@x) (simple-struct-ref aK83e@x '12))) (set! aK970@aK7a5@library-visible? aK7a5@library-visible?) (set! aK7a7@set-library-visible?! (lambda (aK840@x aK841@val) (simple-struct-set! aK840@x '12 aK841@val))) (set! aK971@aK7a7@set-library-visible?! aK7a7@set-library-visible?!) (set! aK7a9@library-source-file-name (lambda (aK844@x) (simple-struct-ref aK844@x '13))) (set! aK972@aK7a9@library-source-file-name aK7a9@library-source-file-name) (set! aK7ab@set-library-source-file-name! (lambda (aK846@x aK847@val) (simple-struct-set! aK846@x '13 aK847@val))) (set! aK973@aK7ab@set-library-source-file-name! aK7ab@set-library-source-file-name!) (set! aK7ad@dummy '3) (set! aK974@aK7ad@dummy aK7ad@dummy) (set! aK7af@find-dependencies (lambda (aK84a@ls) (if (null? aK84a@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! aK975@aK7af@find-dependencies aK7af@find-dependencies) (set! aK7b1@find-library-by (lambda (aK84c@pred) (let aK850@f ((aK84e@ls ((aK767@current-library-collection)))) (if (null? aK84e@ls) '#f (if (aK84c@pred (car aK84e@ls)) (car aK84e@ls) (aK850@f (cdr aK84e@ls))))))) (set! aK976@aK7b1@find-library-by aK7b1@find-library-by) (set! aK7b3@library-path (aK6bd@aK59c@make-parameter '(".") (lambda (aK852@x) (if (and (list? aK852@x) (for-all string? aK852@x)) (map (lambda (aK854@x) aK854@x) aK852@x) (assertion-violation 'library-path '"not a list of strings" aK852@x))))) (set! aK977@aK7b3@library-path aK7b3@library-path) (set! aK7b5@library-extensions (aK6bd@aK59c@make-parameter '(".sls" ".ss" ".scm") (lambda (aK856@x) (if (and (list? aK856@x) (for-all string? aK856@x)) (map (lambda (aK858@x) aK858@x) aK856@x) (assertion-violation 'library-extensions '"not a list of strings" aK856@x))))) (set! aK978@aK7b5@library-extensions aK7b5@library-extensions) (set! aK7b7@library-name->file-name (lambda (aK85a@x) (call-with-values (lambda () (open-string-output-port)) (lambda (aK860@aK85d aK861@aK85f) (let ((aK864@extract aK861@aK85f) (aK865@p aK860@aK85d)) (let ((aK869@display-hex '#f)) (begin (set! aK869@display-hex (lambda (aK872@n) (if (<= '0 aK872@n '9) (display aK872@n aK865@p) (display (integer->char (+ (char->integer '#\a) (- aK872@n '10))) aK865@p)))) (begin (let aK86c@f ((aK86a@ls aK85a@x)) (if (not (null? aK86a@ls)) (begin (display '"/" aK865@p) (for-each (lambda (aK86e@c) (if (or (char<=? '#\a aK86e@c '#\z) (char<=? '#\A aK86e@c '#\Z) (char<=? '#\0 aK86e@c '#\9) (memv aK86e@c '(#\- #\. #\_ #\~))) (display aK86e@c aK865@p) (begin (display '"%" aK865@p) (let ((aK870@n (char->integer aK86e@c))) (begin (aK869@display-hex (quotient aK870@n '16)) (aK869@display-hex (remainder aK870@n '16))))))) (string->list (symbol->string (car aK86a@ls)))) (aK86c@f (cdr aK86a@ls))) (void))) (aK864@extract))))))))) (set! aK979@aK7b7@library-name->file-name aK7b7@library-name->file-name) (set! aK7b9@file-locator (aK6bd@aK59c@make-parameter (lambda (aK874@x) (let ((aK876@str (aK7b7@library-name->file-name aK874@x))) (let aK87e@f ((aK878@ls (aK7b3@library-path)) (aK879@exts (aK7b5@library-extensions)) (aK87a@failed-list '())) (if (null? aK878@ls) (let ((aK888@aK883 '#f) (aK88a@aK885 '#f) (aK88c@aK884 '#f) (aK88f@aK882 '#f) (aK891@make-library-resolution-condition '#f) (aK893@aK880 '#f) (aK895@aK881 '#f) (aK897@library-resolution-condition? '#f) (aK899@condition-library '#f) (aK89b@condition-files '#f)) (begin (set! aK888@aK883 (make-record-type-descriptor '&library-resolution aK2b8d@aK28d4@&condition-rtd 'aK886 '#f '#f '#((immutable library) (immutable files)))) (set! aK88a@aK885 '#f) (set! aK88c@aK884 (make-record-constructor-descriptor aK888@aK883 aK2b8e@aK28d6@&condition-rcd aK88a@aK885)) (set! aK88f@aK882 (record-predicate aK888@aK883)) (set! aK891@make-library-resolution-condition (record-constructor aK88c@aK884)) (set! aK893@aK880 (record-accessor aK888@aK883 '0)) (set! aK895@aK881 (record-accessor aK888@aK883 '1)) (set! aK897@library-resolution-condition? (condition-predicate aK888@aK883)) (set! aK899@condition-library (condition-accessor aK888@aK883 aK893@aK880)) (set! aK89b@condition-files (condition-accessor aK888@aK883 aK895@aK881)) (raise (condition (aK2bad@aK296e@make-error) (aK2bcf@aK29ca@make-who-condition 'expander) (aK2b93@aK292b@make-message-condition '"cannot locate library in library-path") (aK891@make-library-resolution-condition aK874@x (reverse aK87a@failed-list)))))) (if (null? aK879@exts) (aK87e@f (cdr aK878@ls) (aK7b5@library-extensions) aK87a@failed-list) (let ((aK89c@name (string-append (car aK878@ls) aK876@str (car aK879@exts)))) (if (file-exists? aK89c@name) aK89c@name (aK87e@f aK878@ls (cdr aK879@exts) (cons aK89c@name aK87a@failed-list))))))))) (lambda (aK89e@f) (if (procedure? aK89e@f) aK89e@f (assertion-violation 'file-locator '"not a procedure" aK89e@f))))) (set! aK97a@aK7b9@file-locator aK7b9@file-locator) (set! aK7bb@serialize-all (lambda (aK8a0@serialize aK8a1@compile) (let ((aK8a5@library-desc '#f)) (begin (set! aK8a5@library-desc (lambda (aK8a8@x) (list (aK775@library-id aK8a8@x) (aK779@library-name aK8a8@x)))) (for-each (lambda (aK8a6@x) (if (aK7a9@library-source-file-name aK8a6@x) (aK8a0@serialize (aK7a9@library-source-file-name aK8a6@x) (list (aK775@library-id aK8a6@x) (aK779@library-name aK8a6@x) (aK77d@library-version aK8a6@x) (map aK8a5@library-desc (aK781@library-imp* aK8a6@x)) (map aK8a5@library-desc (aK785@library-vis* aK8a6@x)) (map aK8a5@library-desc (aK789@library-inv* aK8a6@x)) (aK78d@library-subst aK8a6@x) (aK791@library-env aK8a6@x) (aK8a1@compile (aK79d@library-visit-code aK8a6@x)) (aK8a1@compile (aK7a1@library-invoke-code aK8a6@x)) (aK7a5@library-visible? aK8a6@x))) (void))) ((aK767@current-library-collection))))))) (set! aK97b@aK7bb@serialize-all aK7bb@serialize-all) (set! aK7bd@current-precompiled-library-loader (aK6bd@aK59c@make-parameter (lambda (aK8aa@filename aK8ab@sk) '#f))) (set! aK97c@aK7bd@current-precompiled-library-loader aK7bd@current-precompiled-library-loader) (set! aK7bf@try-load-from-file (lambda (aK8ae@filename) ((aK7bd@current-precompiled-library-loader) aK8ae@filename (lambda aK8d4 (let ((aK8d5 (length aK8d4))) (if (= aK8d5 '11) (apply (lambda (aK8b0@id aK8b1@name aK8b2@ver aK8b3@imp* aK8b4@vis* aK8b5@inv* aK8b6@exp-subst aK8b7@exp-env aK8b8@visit-proc aK8b9@invoke-proc aK8ba@visible?) (let aK8c8@f ((aK8c6@deps (append aK8b3@imp* aK8b4@vis* aK8b5@inv*))) (if (null? aK8c6@deps) (begin (aK7d3@install-library aK8b0@id aK8b1@name aK8b2@ver aK8b3@imp* aK8b4@vis* aK8b5@inv* aK8b6@exp-subst aK8b7@exp-env aK8b8@visit-proc aK8b9@invoke-proc '#f '#f aK8ba@visible? '#f) '#t) (let ((aK8ca@d (car aK8c6@deps))) (let ((aK8cc@label (car aK8ca@d)) (aK8cd@dname (cadr aK8ca@d))) (let ((aK8d0@l (aK7c9@find-library-by-name aK8cd@dname))) (if (and (aK773@library? aK8d0@l) (eq? aK8cc@label (aK775@library-id aK8d0@l))) (aK8c8@f (cdr aK8c6@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" aK8b1@name aK8cd@dname aK8ae@filename aK8d0@l aK8cc@label (aK775@library-id aK8d0@l)) '#f)))))))) aK8d4) (if (>= aK8d5 '0) (apply (lambda aK8d2@others '#f) aK8d4) (error 'apply '"invalid arg count")))))))) (set! aK97d@aK7bf@try-load-from-file aK7bf@try-load-from-file) (set! aK7c1@library-loader (aK6bd@aK59c@make-parameter (lambda (aK8d6@x) (let ((aK8d8@file-name ((aK7b9@file-locator) aK8d6@x))) (if (not aK8d8@file-name) (assertion-violation '#f '"cannot file library" aK8d6@x) (or (aK7bf@try-load-from-file aK8d8@file-name) ((aK7c3@current-library-expander) (aK6bc@aK59a@read-library-source-file aK8d8@file-name) aK8d8@file-name (lambda (aK8da@name) (if (not (fast-equal? aK8da@name aK8d6@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (aK8e0@aK8dd aK8e1@aK8df) (let ((aK8e4@e aK8e1@aK8df) (aK8e5@p aK8e0@aK8dd)) (begin (display '"expected to find library " aK8e5@p) (write aK8d6@x aK8e5@p) (display '" in file " aK8e5@p) (display aK8d8@file-name aK8e5@p) (display '", found " aK8e5@p) (write aK8da@name aK8e5@p) (display '" instead" aK8e5@p) (aK8e4@e)))))) (void)))))))) (lambda (aK8e8@f) (if (procedure? aK8e8@f) aK8e8@f (assertion-violation 'library-locator '"not a procedure" aK8e8@f))))) (set! aK97e@aK7c1@library-loader aK7c1@library-loader) (set! aK7c3@current-library-expander (aK6bd@aK59c@make-parameter (lambda (aK8ea@x) (assertion-violation 'library-expander '"not initialized")) (lambda (aK8ec@f) (if (procedure? aK8ec@f) aK8ec@f (assertion-violation 'library-expander '"not a procedure" aK8ec@f))))) (set! aK97f@aK7c3@current-library-expander aK7c3@current-library-expander) (set! aK7c5@external-pending-libraries (aK6bd@aK59c@make-parameter '())) (set! aK980@aK7c5@external-pending-libraries aK7c5@external-pending-libraries) (set! aK7c7@find-external-library (lambda (aK8ee@name) (begin (if (member aK8ee@name (aK7c5@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" aK8ee@name) (void)) (let ((aK8f4@aK8f1 aK7c5@external-pending-libraries) (aK8f5@aK8f3 (cons aK8ee@name (aK7c5@external-pending-libraries)))) (let ((aK8f8@swap (lambda () (let ((aK8fa@t (aK8f4@aK8f1))) (begin (aK8f4@aK8f1 aK8f5@aK8f3) (set! aK8f5@aK8f3 aK8fa@t)))))) (dynamic-wind aK8f8@swap (lambda () (begin ((aK7c1@library-loader) aK8ee@name) (or (aK7b1@find-library-by (lambda (aK8fc@x) (fast-equal? (aK779@library-name aK8fc@x) aK8ee@name))) (assertion-violation '#f '"handling external library did not yield the correct library" aK8ee@name)))) aK8f8@swap)))))) (set! aK981@aK7c7@find-external-library aK7c7@find-external-library) (set! aK7c9@find-library-by-name (lambda (aK8fe@name) (or (aK7b1@find-library-by (lambda (aK900@x) (fast-equal? (aK779@library-name aK900@x) aK8fe@name))) (aK7c7@find-external-library aK8fe@name)))) (set! aK982@aK7c9@find-library-by-name aK7c9@find-library-by-name) (set! aK7cb@library-exists? (lambda (aK902@name) (and (aK7b1@find-library-by (lambda (aK904@x) (fast-equal? (aK779@library-name aK904@x) aK902@name))) '#t))) (set! aK983@aK7cb@library-exists? aK7cb@library-exists?) (set! aK7cd@find-library-by-spec/die (lambda (aK906@spec) (let ((aK908@id (car aK906@spec))) (or (aK7b1@find-library-by (lambda (aK90a@x) (eq? aK908@id (aK775@library-id aK90a@x)))) (assertion-violation '#f '"cannot find library with required spec" aK906@spec))))) (set! aK984@aK7cd@find-library-by-spec/die aK7cd@find-library-by-spec/die) (set! aK7cf@label->binding-table (make-eq-hashtable)) (set! aK985@aK7cf@label->binding-table aK7cf@label->binding-table) (set! aK7d1@install-library-record (lambda (aK90c@lib) (begin (let ((aK90e@exp-env (aK791@library-env aK90c@lib))) (for-each (lambda (aK910@x) (let ((aK912@label (car aK910@x)) (aK913@binding (cdr aK910@x))) (let ((aK916@binding (let ((aK918@t (car aK913@binding))) (if (memv aK918@t '(global)) (cons 'global (cons aK90c@lib (cdr aK913@binding))) (if (memv aK918@t '(global-macro)) (cons 'global-macro (cons aK90c@lib (cdr aK913@binding))) (if (memv aK918@t '(global-macro!)) (cons 'global-macro! (cons aK90c@lib (cdr aK913@binding))) aK913@binding)))))) (begin (if (hashtable-ref aK7cf@label->binding-table aK912@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" aK912@label (hashtable-ref aK7cf@label->binding-table aK912@label '#f) aK916@binding) (exit)) (void)) (hashtable-set! aK7cf@label->binding-table aK912@label aK916@binding))))) aK90e@exp-env)) ((aK767@current-library-collection) aK90c@lib)))) (set! aK986@aK7d1@install-library-record aK7d1@install-library-record) (set! aK7d3@install-library (lambda (aK91a@id aK91b@name aK91c@ver aK91d@imp* aK91e@vis* aK91f@inv* aK920@exp-subst aK921@exp-env aK922@visit-proc aK923@invoke-proc aK924@visit-code aK925@invoke-code aK926@visible? aK927@source-file-name) (let ((aK936@imp-lib* (map aK7cd@find-library-by-spec/die aK91d@imp*)) (aK937@vis-lib* (map aK7cd@find-library-by-spec/die aK91e@vis*)) (aK938@inv-lib* (map aK7cd@find-library-by-spec/die aK91f@inv*))) (begin (if (not (and (symbol? aK91a@id) (list? aK91b@name) (list? aK91c@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" aK91a@id aK91b@name aK91c@ver) (void)) (if (aK7cb@library-exists? aK91b@name) (assertion-violation 'install-library '"library is already installed" aK91b@name) (void)) (let ((aK93c@lib (make-simple-struct 'library '15 (list aK91a@id aK91b@name aK91c@ver aK936@imp-lib* aK937@vis-lib* aK938@inv-lib* aK920@exp-subst aK921@exp-env aK922@visit-proc aK923@invoke-proc aK924@visit-code aK925@invoke-code aK926@visible? aK927@source-file-name)))) (aK7d1@install-library-record aK93c@lib)))))) (set! aK987@aK7d3@install-library aK7d3@install-library) (set! aK7d5@imported-label->binding (lambda (aK93e@lab) (hashtable-ref aK7cf@label->binding-table aK93e@lab '#f))) (set! aK988@aK7d5@imported-label->binding aK7d5@imported-label->binding) (set! aK7d7@invoke-library (lambda (aK940@lib) (let ((aK942@invoke (aK799@library-invoke-state aK940@lib))) (if (procedure? aK942@invoke) (begin (aK79b@set-library-invoke-state! aK940@lib (lambda () (assertion-violation 'invoke '"circularity detected" aK940@lib))) (for-each aK7d7@invoke-library (aK789@library-inv* aK940@lib)) (aK79b@set-library-invoke-state! aK940@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" aK940@lib))) (aK942@invoke) (aK79b@set-library-invoke-state! aK940@lib '#t)) (void))))) (set! aK989@aK7d7@invoke-library aK7d7@invoke-library) (set! aK7d9@visit-library (lambda (aK944@lib) (let ((aK946@visit (aK795@library-visit-state aK944@lib))) (if (procedure? aK946@visit) (begin (aK797@set-library-visit-state! aK944@lib (lambda () (assertion-violation 'visit '"circularity detected" aK944@lib))) (for-each aK7d7@invoke-library (aK785@library-vis* aK944@lib)) (aK797@set-library-visit-state! aK944@lib (lambda () (assertion-violation 'invoke '"first visit did not return" aK944@lib))) (aK946@visit) (aK797@set-library-visit-state! aK944@lib '#t)) (void))))) (set! aK98a@aK7d9@visit-library aK7d9@visit-library) (set! aK7db@invoke-library-by-spec (lambda (aK948@spec) (aK7d7@invoke-library (aK7cd@find-library-by-spec/die aK948@spec)))) (set! aK98b@aK7db@invoke-library-by-spec aK7db@invoke-library-by-spec) (set! aK7dd@installed-libraries (lambda aK950 (let ((aK951 (length aK950))) (if (= aK951 '1) (apply (lambda (aK94a@all?) (let aK94e@f ((aK94c@ls ((aK767@current-library-collection)))) (if (null? aK94c@ls) '() (if (or aK94a@all? (aK7a5@library-visible? (car aK94c@ls))) (cons (car aK94c@ls) (aK94e@f (cdr aK94c@ls))) (aK94e@f (cdr aK94c@ls)))))) aK950) (if (= aK951 '0) (apply (lambda () (aK7dd@installed-libraries '#f)) aK950) (error 'apply '"invalid arg count")))))) (set! aK98c@aK7dd@installed-libraries aK7dd@installed-libraries) (set! aK7df@library-spec (lambda (aK952@x) (begin (if (not (aK773@library? aK952@x)) (assertion-violation 'library-spec '"not a library" aK952@x) (void)) (list (aK775@library-id aK952@x) (aK779@library-name aK952@x) (aK77d@library-version aK952@x))))) (set! aK98d@aK7df@library-spec aK7df@library-spec) (void))
(begin (set! aK991@build-global-define (unspecified)) (set! aKa02@build-lambda (unspecified)) (set! aKa04@build-case-lambda (unspecified)) (set! aKa32@build-sequence (unspecified)) (set! aKa34@build-void (unspecified)) (set! aKa36@build-letrec (unspecified)) (set! aKa38@build-let (unspecified)) (set! aKa3a@build-named-let (unspecified)) (set! aKa3c@build-letrec* (unspecified)) (set! aKa3e@build-library-letrec* (unspecified)) (set! aKa40@build-receive (unspecified)) (set! aK991@build-global-define (lambda (aKa41@x) (aKa34@build-void))) (set! aKad5@aK991@build-global-define aK991@build-global-define) (set! aKa02@build-lambda (lambda (aKa43@ae aKa44@vars aKa45@exp) (list 'lambda aKa44@vars aKa45@exp))) (set! aKad6@aKa02@build-lambda aKa02@build-lambda) (set! aKa04@build-case-lambda (lambda (aKa49@ae aKa4a@vars* aKa4b@exp*) (let ((aKa50@build-error '#f) (aKa52@build-pred '#f) (aKa54@build-apply '#f) (aKa56@expand-case-lambda '#f)) (begin (set! aKa50@build-error (lambda (aKa87@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! aKa52@build-pred (lambda (aKa6f@ae aKa70@n aKa71@vars) (call-with-values (lambda () (let aKa7d@f ((aKa79@vars aKa71@vars) (aKa7a@count '0)) (if (pair? aKa79@vars) (aKa7d@f (cdr aKa79@vars) (+ aKa7a@count '1)) (if (null? aKa79@vars) (values aKa7a@count '=) (values aKa7a@count '>=))))) (lambda (aKa7f@aKa76 aKa80@aKa78) (let ((aKa83@pred aKa80@aKa78) (aKa84@count aKa7f@aKa76)) (list (list 'primitive aKa83@pred) aKa70@n (list 'quote aKa84@count))))))) (set! aKa54@build-apply (lambda (aKa67@ae aKa68@g aKa69@vars aKa6a@exp) (list '(primitive apply) (aKa02@build-lambda aKa67@ae aKa69@vars aKa6a@exp) aKa68@g))) (set! aKa56@expand-case-lambda (lambda (aKa57@ae aKa58@vars aKa59@exp*) (let ((aKa5d@g (gensym)) (aKa5e@n (gensym))) (list 'lambda aKa5d@g (aKa38@build-let aKa57@ae (list aKa5e@n) (list (list '(primitive length) aKa5d@g)) (let aKa65@f ((aKa61@vars* aKa4a@vars*) (aKa62@exp* aKa59@exp*)) (if (null? aKa61@vars*) (aKa50@build-error aKa57@ae) (list 'if (aKa52@build-pred aKa57@ae aKa5e@n (car aKa61@vars*)) (aKa54@build-apply aKa57@ae aKa5d@g (car aKa61@vars*) (car aKa62@exp*)) (aKa65@f (cdr aKa61@vars*) (cdr aKa62@exp*)))))))))) (if (= (length aKa4b@exp*) '1) (aKa02@build-lambda aKa49@ae (car aKa4a@vars*) (car aKa4b@exp*)) (aKa56@expand-case-lambda aKa49@ae aKa4a@vars* aKa4b@exp*)))))) (set! aKad7@aKa04@build-case-lambda aKa04@build-case-lambda) (set! aKa32@build-sequence (lambda (aKa89@ae aKa8a@exps) (let aKa8f@loop ((aKa8d@exps aKa8a@exps)) (if (null? (cdr aKa8d@exps)) (car aKa8d@exps) (if (equal? (car aKa8d@exps) (aKa34@build-void)) (aKa8f@loop (cdr aKa8d@exps)) (cons 'begin aKa8d@exps)))))) (set! aKad8@aKa32@build-sequence aKa32@build-sequence) (set! aKa34@build-void (lambda () '((primitive void)))) (set! aKad9@aKa34@build-void aKa34@build-void) (set! aKa36@build-letrec (lambda (aKa91@ae aKa92@vars aKa93@val-exps aKa94@body-exp) (if (null? aKa92@vars) aKa94@body-exp (list 'letrec (map list aKa92@vars aKa93@val-exps) aKa94@body-exp)))) (set! aKada@aKa36@build-letrec aKa36@build-letrec) (set! aKa38@build-let (lambda (aKa99@ae aKa9a@vars aKa9b@val-exps aKa9c@body-exp) (if (null? aKa9a@vars) aKa9c@body-exp (list 'let (map list aKa9a@vars aKa9b@val-exps) aKa9c@body-exp)))) (set! aKadb@aKa38@build-let aKa38@build-let) (set! aKa3a@build-named-let (lambda (aKaa1@ae aKaa2@name aKaa3@vars aKaa4@val-exps aKaa5@body-exp) (list 'let aKaa2@name (map list aKaa3@vars aKaa4@val-exps) aKaa5@body-exp))) (set! aKadc@aKa3a@build-named-let aKa3a@build-named-let) (set! aKa3c@build-letrec* (lambda (aKaab@ae aKaac@vars aKaad@val-exps aKaae@body-exp) (if (null? aKaac@vars) aKaae@body-exp (aKa38@build-let aKaab@ae aKaac@vars (map (lambda (aKab3@x) (list 'quote '#f)) aKaac@vars) (aKa32@build-sequence aKaab@ae (append (map (lambda (aKab5@lhs aKab6@rhs) (list 'set! aKab5@lhs aKab6@rhs)) aKaac@vars aKaad@val-exps) (list aKaae@body-exp))))))) (set! aKadd@aKa3c@build-letrec* aKa3c@build-letrec*) (set! aKa3e@build-library-letrec* (lambda (aKab9@ae aKaba@name aKabb@vars aKabc@locs aKabd@val-exps aKabe@body-exp) (cons 'begin (append (map (lambda (aKac5@var) (cons 'set! (cons aKac5@var '((unspecified))))) aKabb@vars) (append (apply append (map (lambda (aKac7@var aKac8@loc aKac9@val-exp) (list (list 'set! aKac7@var aKac9@val-exp) (list 'set! aKac8@loc aKac7@var))) aKabb@vars aKabc@locs aKabd@val-exps)) (list aKabe@body-exp)))))) (set! aKade@aKa3e@build-library-letrec* aKa3e@build-library-letrec*) (set! aKa40@build-receive (lambda (aKacd@ae aKace@vars aKacf@producer aKad0@body*) (begin (display '"************** in ") (cons 'receive (cons aKace@vars (cons aKacf@producer aKad0@body*)))))) (set! aKadf@aKa40@build-receive aKa40@build-receive) (void))
(begin (set! aKaee@file-options-macro (unspecified)) (set! aKaf0@set-cons (unspecified)) (set! aKaf2@set-union (unspecified)) (set! aKaf7@top-mark* (unspecified)) (set! aKaf9@top-marked? (unspecified)) (set! aKafb@gen-lexical (unspecified)) (set! aKafd@gen-global (unspecified)) (set! aKaff@gen-label (unspecified)) (set! aKb01@gen-top-level-label (unspecified)) (set! aKb03@gen-define-label+loc (unspecified)) (set! aKb05@gen-define-label (unspecified)) (set! aKb0f@rib? (unspecified)) (set! aKb11@rib-sym* (unspecified)) (set! aKb13@set-rib-sym*! (unspecified)) (set! aKb15@rib-mark** (unspecified)) (set! aKb17@set-rib-mark**! (unspecified)) (set! aKb19@rib-label* (unspecified)) (set! aKb1b@set-rib-label*! (unspecified)) (set! aKb1d@rib-sealed/freq (unspecified)) (set! aKb1f@set-rib-sealed/freq! (unspecified)) (set! aKb21@rib-cache (unspecified)) (set! aKb23@set-rib-cache! (unspecified)) (set! aKb25@dummy (unspecified)) (set! aKb27@make-empty-rib (unspecified)) (set! aKb29@extend-rib! (unspecified)) (set! aKb2b@extend-rib/nc! (unspecified)) (set! aKb2d@make-rib-map (unspecified)) (set! aKb2f@seal-rib! (unspecified)) (set! aKb31@unseal-rib! (unspecified)) (set! aKb33@make-full-rib (unspecified)) (set! aKb35@rp (unspecified)) (set! aKb3f@stx? (unspecified)) (set! aKb41@stx-expr (unspecified)) (set! aKb43@set-stx-expr! (unspecified)) (set! aKb45@stx-mark* (unspecified)) (set! aKb47@set-stx-mark*! (unspecified)) (set! aKb49@stx-subst* (unspecified)) (set! aKb4b@set-stx-subst*! (unspecified)) (set! aKb4d@stx-ae* (unspecified)) (set! aKb4f@set-stx-ae*! (unspecified)) (set! aKb51@dummy (unspecified)) (set! aKb53@datum->stx (unspecified)) (set! aKb55@gen-mark (unspecified)) (set! aKb57@anti-mark (unspecified)) (set! aKb59@anti-mark? (unspecified)) (set! aKb5b@mkstx (unspecified)) (set! aKb5d@add-mark (unspecified)) (set! aKb5f@add-subst (unspecified)) (set! aKb61@syntax-kind? (unspecified)) (set! aKb63@syntax-vector->list (unspecified)) (set! aKb65@syntax-pair? (unspecified)) (set! aKb67@syntax-vector? (unspecified)) (set! aKb69@syntax-null? (unspecified)) (set! aKb6b@syntax-list? (unspecified)) (set! aKb6d@syntax-car (unspecified)) (set! aKb6f@syntax-cdr (unspecified)) (set! aKb71@syntax->list (unspecified)) (set! aKb73@id? (unspecified)) (set! aKb75@id->sym (unspecified)) (set! aKb77@bound-id=? (unspecified)) (set! aKb79@free-id=? (unspecified)) (set! aKb7b@valid-bound-ids? (unspecified)) (set! aKb7d@distinct-bound-ids? (unspecified)) (set! aKb7f@bound-id-member? (unspecified)) (set! aKb81@self-evaluating? (unspecified)) (set! aKb83@strip-annotations (unspecified)) (set! aKb85@strip (unspecified)) (set! aKb87@stx->datum (unspecified)) (set! aKb89@id->label (unspecified)) (set! aKb8b@label->binding (unspecified)) (set! aKb8d@make-binding (unspecified)) (set! aKb8f@binding-type (unspecified)) (set! aKb91@binding-value (unspecified)) (set! aKb93@raise-unbound-error (unspecified)) (set! aKb95@syntax-type (unspecified)) (set! aKba3@sanitize-binding (unspecified)) (set! aKba5@make-variable-transformer (unspecified)) (set! aKba7@variable-transformer? (unspecified)) (set! aKba9@variable-transformer-procedure (unspecified)) (set! aKbab@make-eval-transformer (unspecified)) (set! aKcfc@parse-define (unspecified)) (set! aKcfe@parse-define-syntax (unspecified)) (set! aKd00@scheme-stx-hashtable (unspecified)) (set! aKd02@scheme-stx (unspecified)) (set! aKd04@lexical-var (unspecified)) (set! aKd06@lexical-mutable? (unspecified)) (set! aKd08@set-lexical-mutable! (unspecified)) (set! aKd0a@add-lexical (unspecified)) (set! aKd0c@add-lexicals (unspecified)) (set! aKd0e@letrec-helper (unspecified)) (set! aKd10@let-transformer (unspecified)) (set! aKd12@letrec-transformer (unspecified)) (set! aKd14@letrec*-transformer (unspecified)) (set! aKd16@fluid-let-syntax-transformer (unspecified)) (set! aKd18@type-descriptor-transformer (unspecified)) (set! aKd1a@record-type-descriptor-transformer (unspecified)) (set! aKd1c@record-constructor-descriptor-transformer (unspecified)) (set! aKd1e@when-macro (unspecified)) (set! aKd20@unless-macro (unspecified)) (set! aKd22@if-transformer (unspecified)) (set! aKd24@and-transformer (unspecified)) (set! aKd26@or-transformer (unspecified)) (set! aKd28@case-macro (unspecified)) (set! aKd2a@quote-transformer (unspecified)) (set! aKd2c@case-lambda-transformer (unspecified)) (set! aKd2e@lambda-transformer (unspecified)) (set! aKd30@bless (unspecified)) (set! aKd32@with-syntax-macro (unspecified)) (set! aKd34@invalid-fmls-error (unspecified)) (set! aKd36@let-macro (unspecified)) (set! aKd38@let-values-macro (unspecified)) (set! aKd3a@let*-values-macro (unspecified)) (set! aKd3c@trace-lambda-macro (unspecified)) (set! aKd3e@trace-define-macro (unspecified)) (set! aKd40@trace-define-syntax-macro (unspecified)) (set! aKd42@trace-let/rec-syntax (unspecified)) (set! aKd44@trace-let-syntax-macro (unspecified)) (set! aKd46@trace-letrec-syntax-macro (unspecified)) (set! aKd48@guard-macro (unspecified)) (set! aKd4a@define-enumeration-macro (unspecified)) (set! aKd4c@time-macro (unspecified)) (set! aKd4e@delay-macro (unspecified)) (set! aKd50@assert-macro (unspecified)) (set! aKd52@endianness-macro (unspecified)) (set! aKd54@identifier-syntax-macro (unspecified)) (set! aKd56@do-macro (unspecified)) (set! aKd58@let*-macro (unspecified)) (set! aKd5a@or-macro (unspecified)) (set! aKd5c@and-macro (unspecified)) (set! aKd5e@cond-macro (unspecified)) (set! aKd60@do-include (unspecified)) (set! aKd62@include-macro (unspecified)) (set! aKd64@include-into-macro (unspecified)) (set! aKd66@syntax-rules-macro (unspecified)) (set! aKd68@quasiquote-macro (unspecified)) (set! aKd6a@quasisyntax-macro (unspecified)) (set! aKd6c@define-struct-macro (unspecified)) (set! aKd6e@define-record-type-macro (unspecified)) (set! aKd70@define-condition-type-macro (unspecified)) (set! aKd72@incorrect-usage-macro (unspecified)) (set! aKd74@parameterize-macro (unspecified)) (set! aKd76@foreign-call-transformer (unspecified)) (set! aKd78@convert-pattern (unspecified)) (set! aKd7a@syntax-dispatch (unspecified)) (set! aKd7c@ellipsis? (unspecified)) (set! aKd7e@underscore? (unspecified)) (set! aKd80@verify-literals (unspecified)) (set! aKd82@syntax-case-transformer (unspecified)) (set! aKd84@ellipsis-map (unspecified)) (set! aKd86@syntax-transformer (unspecified)) (set! aKd88@core-macro-transformer (unspecified)) (set! aKd8a@symbol-macro (unspecified)) (set! aKd8c@macro-transformer (unspecified)) (set! aKd8e@local-macro-transformer (unspecified)) (set! aKd90@do-macro-call (unspecified)) (set! aKd92@chi-macro (unspecified)) (set! aKd94@chi-local-macro (unspecified)) (set! aKd96@chi-global-macro (unspecified)) (set! aKd98@chi-expr* (unspecified)) (set! aKd9a@chi-application (unspecified)) (set! aKd9c@chi-expr (unspecified)) (set! aKd9e@chi-set! (unspecified)) (set! aKda0@verify-formals (unspecified)) (set! aKda2@chi-lambda-clause (unspecified)) (set! aKda4@chi-lambda-clause* (unspecified)) (set! aKda6@chi-defun (unspecified)) (set! aKda8@chi-rhs (unspecified)) (set! aKdaa@expand-interaction-rhs*/init* (unspecified)) (set! aKdac@chi-rhs* (unspecified)) (set! aKdae@find-bound=? (unspecified)) (set! aKdb0@find-dups (unspecified)) (set! aKdb2@chi-internal (unspecified)) (set! aKdb4@parse-module (unspecified)) (set! aKdbe@module-interface? (unspecified)) (set! aKdc0@module-interface-first-mark (unspecified)) (set! aKdc2@set-module-interface-first-mark! (unspecified)) (set! aKdc4@module-interface-exp-id-vec (unspecified)) (set! aKdc6@set-module-interface-exp-id-vec! (unspecified)) (set! aKdc8@module-interface-exp-lab-vec (unspecified)) (set! aKdca@set-module-interface-exp-lab-vec! (unspecified)) (set! aKdcc@dummy (unspecified)) (set! aKdce@module-interface-exp-id* (unspecified)) (set! aKdd0@chi-internal-module (unspecified)) (set! aKdd2@chi-body* (unspecified)) (set! aKdd4@expand-transformer (unspecified)) (set! aKdd6@parse-exports (unspecified)) (set! aKdd8@parse-library-name (unspecified)) (set! aKdda@parse-library (unspecified)) (set! aKddc@parse-import-spec* (unspecified)) (set! aKdde@make-top-rib (unspecified)) (set! aKde0@make-collector (unspecified)) (set! aKde2@inv-collector (unspecified)) (set! aKde4@vis-collector (unspecified)) (set! aKde6@imp-collector (unspecified)) (set! aKde8@chi-library-internal (unspecified)) (set! aKdea@chi-interaction-expr (unspecified)) (set! aKdec@library-body-expander (unspecified)) (set! aKdee@core-library-expander (unspecified)) (set! aKdf0@parse-top-level-program (unspecified)) (set! aKdf2@top-level-expander (unspecified)) (set! aKdf4@rp (unspecified)) (set! aKdfe@env? (unspecified)) (set! aKe00@env-names (unspecified)) (set! aKe02@set-env-names! (unspecified)) (set! aKe04@env-labels (unspecified)) (set! aKe06@set-env-labels! (unspecified)) (set! aKe08@env-itc (unspecified)) (set! aKe0a@set-env-itc! (unspecified)) (set! aKe0c@dummy (unspecified)) (set! aKe0e@rp (unspecified)) (set! aKe18@interaction-env? (unspecified)) (set! aKe1a@interaction-env-rib (unspecified)) (set! aKe1c@set-interaction-env-rib! (unspecified)) (set! aKe1e@interaction-env-r (unspecified)) (set! aKe20@set-interaction-env-r! (unspecified)) (set! aKe22@interaction-env-locs (unspecified)) (set! aKe24@set-interaction-env-locs! (unspecified)) (set! aKe26@dummy (unspecified)) (set! aKe28@interaction-environment-symbols (unspecified)) (set! aKe2a@environment-bindings (unspecified)) (set! aKe2c@parse-binding (unspecified)) (set! aKe2e@environment? (unspecified)) (set! aKe30@environment-symbols (unspecified)) (set! aKe32@environment (unspecified)) (set! aKe34@null-environment (unspecified)) (set! aKe36@scheme-report-environment (unspecified)) (set! aKe38@expand (unspecified)) (set! aKe3a@eval (unspecified)) (set! aKe3c@library-expander (unspecified)) (set! aKe3e@boot-library-expand (unspecified)) (set! aKe40@rev-map-append (unspecified)) (set! aKe42@build-exports (unspecified)) (set! aKe44@make-export-subst (unspecified)) (set! aKe46@make-export-env/macros (unspecified)) (set! aKe48@generate-temporaries (unspecified)) (set! aKe4a@free-identifier=? (unspecified)) (set! aKe4c@bound-identifier=? (unspecified)) (set! aKe4e@make-source-condition (unspecified)) (set! aKe50@extract-position-condition (unspecified)) (set! aKe52@expression-position (unspecified)) (set! aKe54@assertion-error (unspecified)) (set! aKe56@syntax-error (unspecified)) (set! aKe58@syntax-violation* (unspecified)) (set! aKe5a@syntax-violation (unspecified)) (set! aKe5c@identifier? (unspecified)) (set! aKe5e@datum->syntax (unspecified)) (set! aKe60@syntax->datum (unspecified)) (set! aKe62@ungensym-all (unspecified)) (set! aKe64@compile-r6rs-top-level (unspecified)) (set! aKe66@pre-compile-r6rs-top-level (unspecified)) (set! aKe68@interaction-environment (unspecified)) (set! aKe6a@top-level-context (unspecified)) (set! aKaee@file-options-macro (lambda (aKe6b@x) (let ((aKe6e@valid-option? '#f)) (begin (set! aKe6e@valid-option? (lambda (aKe77@x) (and (aKb73@id? aKe77@x) (memq (aKb75@id->sym aKe77@x) '(no-fail no-create no-truncate))))) (let ((aKe6f@t aKe6b@x)) (let ((aKe71@ls/false (aKd7a@syntax-dispatch aKe6f@t '(_ . each-any)))) (if (and aKe71@ls/false (apply (lambda (aKe73@opt*) (for-all aKe6e@valid-option? aKe73@opt*)) aKe71@ls/false)) (apply (lambda (aKe75@opt*) (aKd30@bless (list 'make-file-options (list 'quote aKe75@opt*)))) aKe71@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aKe6f@t)))))))) (set! aK27bf@aKaee@file-options-macro aKaee@file-options-macro) (set! aKaf0@set-cons (lambda (aKe79@x aKe7a@ls) (if (memq aKe79@x aKe7a@ls) aKe7a@ls (cons aKe79@x aKe7a@ls)))) (set! aK27c0@aKaf0@set-cons aKaf0@set-cons) (set! aKaf2@set-union (lambda (aKe7d@ls1 aKe7e@ls2) (if (null? aKe7d@ls1) aKe7e@ls2 (if (memq (car aKe7d@ls1) aKe7e@ls2) (aKaf2@set-union (cdr aKe7d@ls1) aKe7e@ls2) (cons (car aKe7d@ls1) (aKaf2@set-union (cdr aKe7d@ls1) aKe7e@ls2)))))) (set! aK27c1@aKaf2@set-union aKaf2@set-union) (set! aKaf7@top-mark* '(top)) (set! aK27c2@aKaf7@top-mark* aKaf7@top-mark*) (set! aKaf9@top-marked? (lambda (aKe81@m*) (memq 'top aKe81@m*))) (set! aK27c3@aKaf9@top-marked? aKaf9@top-marked?) (set! aKafb@gen-lexical (lambda (aKe83@sym) (if (symbol? aKe83@sym) (gensym aKe83@sym) (if (aKb3f@stx? aKe83@sym) (aKafb@gen-lexical (aKb75@id->sym aKe83@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" aKe83@sym))))) (set! aK27c4@aKafb@gen-lexical aKafb@gen-lexical) (set! aKafd@gen-global (lambda (aKe85@x) (aKafb@gen-lexical aKe85@x))) (set! aK27c5@aKafd@gen-global aKafd@gen-global) (set! aKaff@gen-label (lambda (aKe87@_) (gensym))) (set! aK27c6@aKaff@gen-label aKaff@gen-label) (set! aKb01@gen-top-level-label (lambda (aKe89@id aKe8a@rib) (let ((aKe8e@find '#f)) (begin (set! aKe8e@find (lambda (aKe99@sym aKe9a@mark* aKe9b@sym* aKe9c@mark** aKe9d@label*) (and (pair? aKe9b@sym*) (if (and (eq? aKe99@sym (car aKe9b@sym*)) (same-marks? aKe9a@mark* (car aKe9c@mark**))) (car aKe9d@label*) (aKe8e@find aKe99@sym aKe9a@mark* (cdr aKe9b@sym*) (cdr aKe9c@mark**) (cdr aKe9d@label*)))))) (let ((aKe8f@sym (aKb75@id->sym aKe89@id)) (aKe90@mark* (aKb45@stx-mark* aKe89@id))) (let ((aKe93@sym* (aKb11@rib-sym* aKe8a@rib))) (let ((aKe95@t (and (memq aKe8f@sym (aKb11@rib-sym* aKe8a@rib)) (aKe8e@find aKe8f@sym aKe90@mark* aKe93@sym* (aKb15@rib-mark** aKe8a@rib) (aKb19@rib-label* aKe8a@rib))))) (if aKe95@t ((lambda (aKe97@label) (if (aK988@aK7d5@imported-label->binding aKe97@label) (gensym) aKe97@label)) aKe95@t) (gensym))))))))) (set! aK27c7@aKb01@gen-top-level-label aKb01@gen-top-level-label) (set! aKb03@gen-define-label+loc (lambda (aKea3@id aKea4@rib) (let ((aKea7@t (aKe6a@top-level-context))) (if aKea7@t ((lambda (aKea9@env) (let ((aKeab@label (aKb01@gen-top-level-label aKea3@id aKea4@rib)) (aKeac@locs (aKe22@interaction-env-locs aKea9@env))) (values aKeab@label (let ((aKeaf@t (assq aKeab@label aKeac@locs))) (if aKeaf@t (cdr aKeaf@t) (let ((aKeb1@loc (aKafb@gen-lexical aKea3@id))) (begin (aKe24@set-interaction-env-locs! aKea9@env (cons (cons aKeab@label aKeb1@loc) aKeac@locs)) aKeb1@loc))))))) aKea7@t) (values (gensym) (aKafb@gen-lexical aKea3@id)))))) (set! aK27c8@aKb03@gen-define-label+loc aKb03@gen-define-label+loc) (set! aKb05@gen-define-label (lambda (aKeb3@id aKeb4@rib) (if (aKe6a@top-level-context) (aKb01@gen-top-level-label aKeb3@id aKeb4@rib) (gensym)))) (set! aK27c9@aKb05@gen-define-label aKb05@gen-define-label) (set! aKb0f@rib? (lambda (aKeb7@x) (and (simple-struct? aKeb7@x) (eq? (simple-struct-name aKeb7@x) 'rib)))) (set! aK27ca@aKb0f@rib? aKb0f@rib?) (set! aKb11@rib-sym* (lambda (aKeb9@x) (simple-struct-ref aKeb9@x '0))) (set! aK27cb@aKb11@rib-sym* aKb11@rib-sym*) (set! aKb13@set-rib-sym*! (lambda (aKebb@x aKebc@val) (simple-struct-set! aKebb@x '0 aKebc@val))) (set! aK27cc@aKb13@set-rib-sym*! aKb13@set-rib-sym*!) (set! aKb15@rib-mark** (lambda (aKebf@x) (simple-struct-ref aKebf@x '1))) (set! aK27cd@aKb15@rib-mark** aKb15@rib-mark**) (set! aKb17@set-rib-mark**! (lambda (aKec1@x aKec2@val) (simple-struct-set! aKec1@x '1 aKec2@val))) (set! aK27ce@aKb17@set-rib-mark**! aKb17@set-rib-mark**!) (set! aKb19@rib-label* (lambda (aKec5@x) (simple-struct-ref aKec5@x '2))) (set! aK27cf@aKb19@rib-label* aKb19@rib-label*) (set! aKb1b@set-rib-label*! (lambda (aKec7@x aKec8@val) (simple-struct-set! aKec7@x '2 aKec8@val))) (set! aK27d0@aKb1b@set-rib-label*! aKb1b@set-rib-label*!) (set! aKb1d@rib-sealed/freq (lambda (aKecb@x) (simple-struct-ref aKecb@x '3))) (set! aK27d1@aKb1d@rib-sealed/freq aKb1d@rib-sealed/freq) (set! aKb1f@set-rib-sealed/freq! (lambda (aKecd@x aKece@val) (simple-struct-set! aKecd@x '3 aKece@val))) (set! aK27d2@aKb1f@set-rib-sealed/freq! aKb1f@set-rib-sealed/freq!) (set! aKb21@rib-cache (lambda (aKed1@x) (simple-struct-ref aKed1@x '4))) (set! aK27d3@aKb21@rib-cache aKb21@rib-cache) (set! aKb23@set-rib-cache! (lambda (aKed3@x aKed4@val) (simple-struct-set! aKed3@x '4 aKed4@val))) (set! aK27d4@aKb23@set-rib-cache! aKb23@set-rib-cache!) (set! aKb25@dummy '3) (set! aK27d5@aKb25@dummy aKb25@dummy) (set! aKb27@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! aK27d6@aKb27@make-empty-rib aKb27@make-empty-rib) (set! aKb29@extend-rib! (lambda (aKed7@rib aKed8@id aKed9@label) (let ((aKede@find '#f)) (begin (set! aKede@find (lambda (aKeeb@sym aKeec@mark* aKeed@sym* aKeee@mark** aKeef@label*) (and (pair? aKeed@sym*) (if (and (eq? aKeeb@sym (car aKeed@sym*)) (same-marks? aKeec@mark* (car aKeee@mark**))) aKeef@label* (aKede@find aKeeb@sym aKeec@mark* (cdr aKeed@sym*) (cdr aKeee@mark**) (cdr aKeef@label*)))))) (begin (if (aKb1d@rib-sealed/freq aKed7@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" aKed7@rib) (void)) (let ((aKedf@sym (aKb75@id->sym aKed8@id)) (aKee0@mark* (aKb45@stx-mark* aKed8@id))) (let ((aKee3@sym* (aKb11@rib-sym* aKed7@rib))) (let ((aKee5@t (and (memq aKedf@sym (aKb11@rib-sym* aKed7@rib)) (aKede@find aKedf@sym aKee0@mark* aKee3@sym* (aKb15@rib-mark** aKed7@rib) (aKb19@rib-label* aKed7@rib))))) (if aKee5@t ((lambda (aKee7@p) (if (not (eq? aKed9@label (car aKee7@p))) (if (aKe6a@top-level-context) (set-car! aKee7@p aKed9@label) (aKe5a@syntax-violation '#f '"multiple definitions of identifier" aKed8@id)) (void))) aKee5@t) (begin (if (aKb21@rib-cache aKed7@rib) (hashtable-update! (aKb21@rib-cache aKed7@rib) aKedf@sym (lambda (aKee9@e) (cons (cons aKee0@mark* aKed9@label) aKee9@e)) '()) (void)) (aKb13@set-rib-sym*! aKed7@rib (cons aKedf@sym aKee3@sym*)) (aKb17@set-rib-mark**! aKed7@rib (cons aKee0@mark* (aKb15@rib-mark** aKed7@rib))) (aKb1b@set-rib-label*! aKed7@rib (cons aKed9@label (aKb19@rib-label* aKed7@rib))))))))))))) (set! aK27d7@aKb29@extend-rib! aKb29@extend-rib!) (set! aKb2b@extend-rib/nc! (lambda (aKef5@rib aKef6@id aKef7@label) (let ((aKefb@sym (aKb75@id->sym aKef6@id)) (aKefc@mark* (aKb45@stx-mark* aKef6@id))) (let ((aKeff@sym* (aKb11@rib-sym* aKef5@rib))) (begin (if (aKb21@rib-cache aKef5@rib) (hashtable-update! (aKb21@rib-cache aKef5@rib) aKefb@sym (lambda (aKf01@e) (cons (cons aKefc@mark* aKef7@label) aKf01@e)) '()) (void)) (aKb13@set-rib-sym*! aKef5@rib (cons aKefb@sym aKeff@sym*)) (aKb17@set-rib-mark**! aKef5@rib (cons aKefc@mark* (aKb15@rib-mark** aKef5@rib))) (aKb1b@set-rib-label*! aKef5@rib (cons aKef7@label (aKb19@rib-label* aKef5@rib)))))))) (set! aK27d8@aKb2b@extend-rib/nc! aKb2b@extend-rib/nc!) (set! aKb2d@make-rib-map (lambda (aKf03@sym*) (let ((aKf05@ht (make-eq-hashtable))) (let aKf0b@f ((aKf07@i '0) (aKf08@sym* aKf03@sym*)) (if (null? aKf08@sym*) aKf05@ht (begin (hashtable-update! aKf05@ht (car aKf08@sym*) (lambda (aKf0d@x) (cons aKf07@i aKf0d@x)) '()) (aKf0b@f (+ aKf07@i '1) (cdr aKf08@sym*)))))))) (set! aK27d9@aKb2d@make-rib-map aKb2d@make-rib-map) (set! aKb2f@seal-rib! (lambda (aKf0f@rib) (let ((aKf11@sym* (aKb11@rib-sym* aKf0f@rib))) (if (not (null? aKf11@sym*)) (begin (aKb13@set-rib-sym*! aKf0f@rib (list->vector aKf11@sym*)) (aKb17@set-rib-mark**! aKf0f@rib (list->vector (aKb15@rib-mark** aKf0f@rib))) (aKb1b@set-rib-label*! aKf0f@rib (list->vector (aKb19@rib-label* aKf0f@rib))) (aKb1f@set-rib-sealed/freq! aKf0f@rib (aKb2d@make-rib-map aKf11@sym*))) (void))))) (set! aK27da@aKb2f@seal-rib! aKb2f@seal-rib!) (set! aKb31@unseal-rib! (lambda (aKf13@rib) (if (aKb1d@rib-sealed/freq aKf13@rib) (begin (aKb1f@set-rib-sealed/freq! aKf13@rib '#f) (aKb13@set-rib-sym*! aKf13@rib (vector->list (aKb11@rib-sym* aKf13@rib))) (aKb17@set-rib-mark**! aKf13@rib (vector->list (aKb15@rib-mark** aKf13@rib))) (aKb1b@set-rib-label*! aKf13@rib (vector->list (aKb19@rib-label* aKf13@rib)))) (void)))) (set! aK27db@aKb31@unseal-rib! aKb31@unseal-rib!) (set! aKb33@make-full-rib (lambda (aKf15@id* aKf16@label*) (let ((aKf19@r (make-simple-struct 'rib '6 (list (map aKb75@id->sym aKf15@id*) (map aKb45@stx-mark* aKf15@id*) aKf16@label* '#f '#f)))) (begin (aKb2f@seal-rib! aKf19@r) aKf19@r)))) (set! aK27dc@aKb33@make-full-rib aKb33@make-full-rib) (set! aKb35@rp (aK6ba@aK596@make-record-printer 'stx (lambda (aKf1b@x aKf1c@p aKf1d@wr) (begin (display '"#<syntax " aKf1c@p) (write (aKb87@stx->datum aKf1b@x) aKf1c@p) (let ((aKf21@expr (aKb41@stx-expr aKf1b@x))) (if (aK6b2@aK586@annotation? aKf21@expr) (let ((aKf23@src (aK6b3@aK588@annotation-source aKf21@expr))) (if (pair? aKf23@src) (begin (display '" [" aKf1c@p) (display (cdr aKf23@src) aKf1c@p) (display '" of " aKf1c@p) (display (car aKf23@src) aKf1c@p) (display '"]" aKf1c@p)) (void))) (void))) (display '">" aKf1c@p))))) (set! aK27dd@aKb35@rp aKb35@rp) (set! aKb3f@stx? (lambda (aKf25@x) (and (simple-struct? aKf25@x) (eq? (simple-struct-name aKf25@x) 'stx)))) (set! aK27de@aKb3f@stx? aKb3f@stx?) (set! aKb41@stx-expr (lambda (aKf27@x) (simple-struct-ref aKf27@x '0))) (set! aK27df@aKb41@stx-expr aKb41@stx-expr) (set! aKb43@set-stx-expr! (lambda (aKf29@x aKf2a@val) (simple-struct-set! aKf29@x '0 aKf2a@val))) (set! aK27e0@aKb43@set-stx-expr! aKb43@set-stx-expr!) (set! aKb45@stx-mark* (lambda (aKf2d@x) (simple-struct-ref aKf2d@x '1))) (set! aK27e1@aKb45@stx-mark* aKb45@stx-mark*) (set! aKb47@set-stx-mark*! (lambda (aKf2f@x aKf30@val) (simple-struct-set! aKf2f@x '1 aKf30@val))) (set! aK27e2@aKb47@set-stx-mark*! aKb47@set-stx-mark*!) (set! aKb49@stx-subst* (lambda (aKf33@x) (simple-struct-ref aKf33@x '2))) (set! aK27e3@aKb49@stx-subst* aKb49@stx-subst*) (set! aKb4b@set-stx-subst*! (lambda (aKf35@x aKf36@val) (simple-struct-set! aKf35@x '2 aKf36@val))) (set! aK27e4@aKb4b@set-stx-subst*! aKb4b@set-stx-subst*!) (set! aKb4d@stx-ae* (lambda (aKf39@x) (simple-struct-ref aKf39@x '3))) (set! aK27e5@aKb4d@stx-ae* aKb4d@stx-ae*) (set! aKb4f@set-stx-ae*! (lambda (aKf3b@x aKf3c@val) (simple-struct-set! aKf3b@x '3 aKf3c@val))) (set! aK27e6@aKb4f@set-stx-ae*! aKb4f@set-stx-ae*!) (set! aKb51@dummy '3) (set! aK27e7@aKb51@dummy aKb51@dummy) (set! aKb53@datum->stx (lambda (aKf3f@id aKf40@datum) (make-simple-struct 'stx '5 (list aKf40@datum (aKb45@stx-mark* aKf3f@id) (aKb49@stx-subst* aKf3f@id) (aKb4d@stx-ae* aKf3f@id))))) (set! aK27e8@aKb53@datum->stx aKb53@datum->stx) (set! aKb55@gen-mark (lambda () (string '#\m))) (set! aK27e9@aKb55@gen-mark aKb55@gen-mark) (set! aKb57@anti-mark '#f) (set! aK27ea@aKb57@anti-mark aKb57@anti-mark) (set! aKb59@anti-mark? not) (set! aK27eb@aKb59@anti-mark? aKb59@anti-mark?) (set! aKb5b@mkstx (lambda (aKf43@e aKf44@m* aKf45@s* aKf46@ae*) (if (and (aKb3f@stx? aKf43@e) (not (aKaf9@top-marked? aKf44@m*))) (call-with-values (lambda () (join-wraps aKf44@m* aKf45@s* aKf46@ae* aKf43@e)) (lambda (aKf51@aKf4c aKf52@aKf4e aKf53@aKf50) (let ((aKf57@ae* aKf53@aKf50) (aKf58@s* aKf52@aKf4e) (aKf59@m* aKf51@aKf4c)) (make-simple-struct 'stx '5 (list (aKb41@stx-expr aKf43@e) aKf59@m* aKf58@s* aKf57@ae*))))) (make-simple-struct 'stx '5 (list aKf43@e aKf44@m* aKf45@s* aKf46@ae*))))) (set! aK27ec@aKb5b@mkstx aKb5b@mkstx) (set! aKb5d@add-mark (lambda (aKf5d@m aKf5e@e aKf5f@ae) (aKb5b@mkstx aKf5e@e (list aKf5d@m) '(shift) (list aKf5f@ae)))) (set! aK27ed@aKb5d@add-mark aKb5d@add-mark) (set! aKb5f@add-subst (lambda (aKf63@subst aKf64@e) (aKb5b@mkstx aKf64@e '() (list aKf63@subst) '()))) (set! aK27ee@aKb5f@add-subst aKb5f@add-subst) (set! aKb61@syntax-kind? (lambda (aKf67@x aKf68@p?) (if (aKb3f@stx? aKf67@x) (aKb61@syntax-kind? (aKb41@stx-expr aKf67@x) aKf68@p?) (if (aK6b2@aK586@annotation? aKf67@x) (aKb61@syntax-kind? (aK6b4@aK58a@annotation-expression aKf67@x) aKf68@p?) (aKf68@p? aKf67@x))))) (set! aK27ef@aKb61@syntax-kind? aKb61@syntax-kind?) (set! aKb63@syntax-vector->list (lambda (aKf6b@x) (if (aKb3f@stx? aKf6b@x) (let ((aKf6d@ls (aKb63@syntax-vector->list (aKb41@stx-expr aKf6b@x))) (aKf6e@m* (aKb45@stx-mark* aKf6b@x)) (aKf6f@s* (aKb49@stx-subst* aKf6b@x)) (aKf70@ae* (aKb4d@stx-ae* aKf6b@x))) (map (lambda (aKf75@x) (aKb5b@mkstx aKf75@x aKf6e@m* aKf6f@s* aKf70@ae*)) aKf6d@ls)) (if (aK6b2@aK586@annotation? aKf6b@x) (aKb63@syntax-vector->list (aK6b4@aK58a@annotation-expression aKf6b@x)) (if (vector? aKf6b@x) (vector->list aKf6b@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" aKf6b@x)))))) (set! aK27f0@aKb63@syntax-vector->list aKb63@syntax-vector->list) (set! aKb65@syntax-pair? (lambda (aKf77@x) (aKb61@syntax-kind? aKf77@x pair?))) (set! aK27f1@aKb65@syntax-pair? aKb65@syntax-pair?) (set! aKb67@syntax-vector? (lambda (aKf79@x) (aKb61@syntax-kind? aKf79@x vector?))) (set! aK27f2@aKb67@syntax-vector? aKb67@syntax-vector?) (set! aKb69@syntax-null? (lambda (aKf7b@x) (aKb61@syntax-kind? aKf7b@x null?))) (set! aK27f3@aKb69@syntax-null? aKb69@syntax-null?) (set! aKb6b@syntax-list? (lambda (aKf7d@x) (or (aKb69@syntax-null? aKf7d@x) (and (aKb65@syntax-pair? aKf7d@x) (aKb6b@syntax-list? (aKb6f@syntax-cdr aKf7d@x)))))) (set! aK27f4@aKb6b@syntax-list? aKb6b@syntax-list?) (set! aKb6d@syntax-car (lambda (aKf7f@x) (if (aKb3f@stx? aKf7f@x) (aKb5b@mkstx (aKb6d@syntax-car (aKb41@stx-expr aKf7f@x)) (aKb45@stx-mark* aKf7f@x) (aKb49@stx-subst* aKf7f@x) (aKb4d@stx-ae* aKf7f@x)) (if (aK6b2@aK586@annotation? aKf7f@x) (aKb6d@syntax-car (aK6b4@aK58a@annotation-expression aKf7f@x)) (if (pair? aKf7f@x) (car aKf7f@x) (assertion-violation 'syntax-car '"BUG: not a pair" aKf7f@x)))))) (set! aK27f5@aKb6d@syntax-car aKb6d@syntax-car) (set! aKb6f@syntax-cdr (lambda (aKf81@x) (if (aKb3f@stx? aKf81@x) (aKb5b@mkstx (aKb6f@syntax-cdr (aKb41@stx-expr aKf81@x)) (aKb45@stx-mark* aKf81@x) (aKb49@stx-subst* aKf81@x) (aKb4d@stx-ae* aKf81@x)) (if (aK6b2@aK586@annotation? aKf81@x) (aKb6f@syntax-cdr (aK6b4@aK58a@annotation-expression aKf81@x)) (if (pair? aKf81@x) (cdr aKf81@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" aKf81@x)))))) (set! aK27f6@aKb6f@syntax-cdr aKb6f@syntax-cdr) (set! aKb71@syntax->list (lambda (aKf83@x) (if (aKb65@syntax-pair? aKf83@x) (cons (aKb6d@syntax-car aKf83@x) (aKb71@syntax->list (aKb6f@syntax-cdr aKf83@x))) (if (aKb69@syntax-null? aKf83@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" aKf83@x))))) (set! aK27f7@aKb71@syntax->list aKb71@syntax->list) (set! aKb73@id? (lambda (aKf85@x) (and (aKb3f@stx? aKf85@x) (symbol? (aKb41@stx-expr aKf85@x))))) (set! aK27f8@aKb73@id? aKb73@id?) (set! aKb75@id->sym (lambda (aKf87@x) (aKb41@stx-expr aKf87@x))) (set! aK27f9@aKb75@id->sym aKb75@id->sym) (set! aKb77@bound-id=? (lambda (aKf89@x aKf8a@y) (and (eq? (aKb75@id->sym aKf89@x) (aKb75@id->sym aKf8a@y)) (same-marks? (aKb45@stx-mark* aKf89@x) (aKb45@stx-mark* aKf8a@y))))) (set! aK27fa@aKb77@bound-id=? aKb77@bound-id=?) (set! aKb79@free-id=? (lambda (aKf8d@i aKf8e@j) (let ((aKf91@t0 (id->real-label aKf8d@i)) (aKf92@t1 (id->real-label aKf8e@j))) (if (or aKf91@t0 aKf92@t1) (eq? aKf91@t0 aKf92@t1) (eq? (aKb75@id->sym aKf8d@i) (aKb75@id->sym aKf8e@j)))))) (set! aK27fb@aKb79@free-id=? aKb79@free-id=?) (set! aKb7b@valid-bound-ids? (lambda (aKf95@id*) (and (for-all aKb73@id? aKf95@id*) (aKb7d@distinct-bound-ids? aKf95@id*)))) (set! aK27fc@aKb7b@valid-bound-ids? aKb7b@valid-bound-ids?) (set! aKb7d@distinct-bound-ids? (lambda (aKf97@id*) (or (null? aKf97@id*) (and (not (aKb7f@bound-id-member? (car aKf97@id*) (cdr aKf97@id*))) (aKb7d@distinct-bound-ids? (cdr aKf97@id*)))))) (set! aK27fd@aKb7d@distinct-bound-ids? aKb7d@distinct-bound-ids?) (set! aKb7f@bound-id-member? (lambda (aKf99@id aKf9a@id*) (and (pair? aKf9a@id*) (or (aKb77@bound-id=? aKf99@id (car aKf9a@id*)) (aKb7f@bound-id-member? aKf99@id (cdr aKf9a@id*)))))) (set! aK27fe@aKb7f@bound-id-member? aKb7f@bound-id-member?) (set! aKb81@self-evaluating? (lambda (aKf9d@x) (or (number? aKf9d@x) (string? aKf9d@x) (char? aKf9d@x) (boolean? aKf9d@x) (regexp? aKf9d@x) (bytevector? aKf9d@x)))) (set! aK27ff@aKb81@self-evaluating? aKb81@self-evaluating?) (set! aKb83@strip-annotations (lambda (aKf9f@x) (if (pair? aKf9f@x) (cons (aKb83@strip-annotations (car aKf9f@x)) (aKb83@strip-annotations (cdr aKf9f@x))) (if (vector? aKf9f@x) (vector-map aKb83@strip-annotations aKf9f@x) (if (aK6b2@aK586@annotation? aKf9f@x) (aK6b1@aK584@annotation-stripped aKf9f@x) aKf9f@x))))) (set! aK2800@aKb83@strip-annotations aKb83@strip-annotations) (set! aKb85@strip (lambda (aKfa1@x aKfa2@m*) (if (aKaf9@top-marked? aKfa2@m*) (if (or (aK6b2@aK586@annotation? aKfa1@x) (and (pair? aKfa1@x) (aK6b2@aK586@annotation? (car aKfa1@x))) (and (vector? aKfa1@x) (> (vector-length aKfa1@x) '0) (aK6b2@aK586@annotation? (vector-ref aKfa1@x '0)))) (aKb83@strip-annotations aKfa1@x) aKfa1@x) (let aKfa7@f ((aKfa5@x aKfa1@x)) (if (aKb3f@stx? aKfa5@x) (aKb85@strip (aKb41@stx-expr aKfa5@x) (aKb45@stx-mark* aKfa5@x)) (if (aK6b2@aK586@annotation? aKfa5@x) (aK6b1@aK584@annotation-stripped aKfa5@x) (if (pair? aKfa5@x) (let ((aKfa9@a (aKfa7@f (car aKfa5@x))) (aKfaa@d (aKfa7@f (cdr aKfa5@x)))) (if (and (eq? aKfa9@a (car aKfa5@x)) (eq? aKfaa@d (cdr aKfa5@x))) aKfa5@x (cons aKfa9@a aKfaa@d))) (if (vector? aKfa5@x) (let ((aKfad@old (vector->list aKfa5@x))) (let ((aKfaf@new (map aKfa7@f aKfad@old))) (if (for-all eq? aKfad@old aKfaf@new) aKfa5@x (list->vector aKfaf@new)))) aKfa5@x)))))))) (set! aK2801@aKb85@strip aKb85@strip) (set! aKb87@stx->datum (lambda (aKfb1@x) (aKb85@strip aKfb1@x '()))) (set! aK2802@aKb87@stx->datum aKb87@stx->datum) (set! aKb89@id->label (lambda (aKfb3@id) (or (id->real-label aKfb3@id) (let ((aKfb5@t (aKe6a@top-level-context))) (if aKfb5@t ((lambda (aKfb7@env) (let ((aKfb9@rib (aKe1a@interaction-env-rib aKfb7@env))) (call-with-values (lambda () (aKb03@gen-define-label+loc aKfb3@id aKfb9@rib)) (lambda (aKfbf@aKfbc aKfc0@aKfbe) (let ((aKfc3@loc_ aKfc0@aKfbe) (aKfc4@lab aKfbf@aKfbc)) (begin (aKb29@extend-rib! aKfb9@rib aKfb3@id aKfc4@lab) aKfc4@lab)))))) aKfb5@t) '#f))))) (set! aK2803@aKb89@id->label aKb89@id->label) (set! aKb8b@label->binding (lambda (aKfc7@x aKfc8@r) (let ((aKfcb@t (aK988@aK7d5@imported-label->binding aKfc7@x))) (if aKfcb@t ((lambda (aKfcd@b) (if (and (pair? aKfcd@b) (eq? (car aKfcd@b) '$core-rtd)) (cons '$rtd (map aKd30@bless (cdr aKfcd@b))) (if (and (pair? aKfcd@b) (eq? (car aKfcd@b) 'global-rtd)) (let ((aKfcf@lib (cadr aKfcd@b)) (aKfd0@loc (cddr aKfcd@b))) (cons '$rtd (symbol-value aKfd0@loc))) aKfcd@b))) aKfcb@t) (let ((aKfd3@t (assq aKfc7@x aKfc8@r))) (if aKfd3@t (cdr aKfd3@t) (let ((aKfd5@t (aKe6a@top-level-context))) (if aKfd5@t ((lambda (aKfd7@env) (let ((aKfd9@t (assq aKfc7@x (aKe22@interaction-env-locs aKfd7@env)))) (if aKfd9@t ((lambda (aKfdb@p) (cons* 'lexical (cdr aKfdb@p) '#f)) aKfd9@t) '(displaced-lexical . #f)))) aKfd5@t) '(displaced-lexical . #f))))))))) (set! aK2804@aKb8b@label->binding aKb8b@label->binding) (set! aKb8d@make-binding cons) (set! aK2805@aKb8d@make-binding aKb8d@make-binding) (set! aKb8f@binding-type car) (set! aK2806@aKb8f@binding-type aKb8f@binding-type) (set! aKb91@binding-value cdr) (set! aK2807@aKb91@binding-value aKb91@binding-value) (set! aKb93@raise-unbound-error (lambda (aKfdd@id) (aKe58@syntax-violation* '#f '"unbound identifier" aKfdd@id (aK2bfd@aK2a43@make-undefined-violation)))) (set! aK2808@aKb93@raise-unbound-error aKb93@raise-unbound-error) (set! aKb95@syntax-type (lambda (aKfdf@e aKfe0@r) (if (aKb73@id? aKfdf@e) (let ((aKfe3@id aKfdf@e)) (let ((aKfe5@label (aKb89@id->label aKfe3@id))) (let ((aKfe7@b (aKb8b@label->binding aKfe5@label aKfe0@r))) (let ((aKfe9@type (aKb8f@binding-type aKfe7@b))) (begin (if (not aKfe5@label) (aKb93@raise-unbound-error aKfe3@id) (void)) (let ((aKfeb@t aKfe9@type)) (if (memv aKfeb@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values aKfe9@type (aKb91@binding-value aKfe7@b) aKfe3@id) (values 'other '#f '#f)))))))) (if (aKb65@syntax-pair? aKfdf@e) (let ((aKfed@id (aKb6d@syntax-car aKfdf@e))) (if (aKb73@id? aKfed@id) (let ((aKfef@label (aKb89@id->label aKfed@id))) (let ((aKff1@b (aKb8b@label->binding aKfef@label aKfe0@r))) (let ((aKff3@type (aKb8f@binding-type aKff1@b))) (begin (if (not aKfef@label) (aKb93@raise-unbound-error aKfed@id) (void)) (let ((aKff5@t aKff3@type)) (if (memv aKff5@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values aKff3@type (aKb91@binding-value aKff1@b) aKfed@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((aKff7@d (aKb87@stx->datum aKfdf@e))) (if (aKb81@self-evaluating? aKff7@d) (values 'constant aKff7@d '#f) (values 'other '#f '#f))))))) (set! aK2809@aKb95@syntax-type aKb95@syntax-type) (set! aKba3@sanitize-binding (lambda (aKff9@x aKffa@src) (if (procedure? aKff9@x) (cons* 'local-macro aKff9@x aKffa@src) (if (and (pair? aKff9@x) (eq? (car aKff9@x) 'macro!) (procedure? (cdr aKff9@x))) (cons* 'local-macro! (cdr aKff9@x) aKffa@src) (if (and (pair? aKff9@x) (eq? (car aKff9@x) '$rtd)) aKff9@x (assertion-violation 'expand '"invalid transformer" aKff9@x)))))) (set! aK280a@aKba3@sanitize-binding aKba3@sanitize-binding) (set! aKba5@make-variable-transformer (lambda (aKffd@x) (if (procedure? aKffd@x) (cons 'macro! aKffd@x) (assertion-violation 'make-variable-transformer '"not a procedure" aKffd@x)))) (set! aK280b@aKba5@make-variable-transformer aKba5@make-variable-transformer) (set! aKba7@variable-transformer? (lambda (aKfff@x) (and (pair? aKfff@x) (eq? (car aKfff@x) 'macro!) (procedure? (cdr aKfff@x))))) (set! aK280c@aKba7@variable-transformer? aKba7@variable-transformer?) (set! aKba9@variable-transformer-procedure (lambda (aK1001@x) (if (aKba7@variable-transformer? aK1001@x) (cdr aK1001@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" aK1001@x)))) (set! aK280d@aKba9@variable-transformer-procedure aKba9@variable-transformer-procedure) (set! aKbab@make-eval-transformer (lambda (aK1003@x) (aKba3@sanitize-binding (eval-core (aK713@aK6cb@expanded->core aK1003@x)) aK1003@x))) (set! aK280e@aKbab@make-eval-transformer aKbab@make-eval-transformer) (set! aKcfc@parse-define (lambda (aK1005@x) (let ((aK1007@t aK1005@x)) (let ((aK1009@ls/false (aKd7a@syntax-dispatch aK1007@t '(_ (any . any) any . each-any)))) (if (and aK1009@ls/false (apply (lambda (aK100b@id aK100c@fmls aK100d@b aK100e@b*) (aKb73@id? aK100b@id)) aK1009@ls/false)) (apply (lambda (aK1013@id aK1014@fmls aK1015@b aK1016@b*) (begin (aKda0@verify-formals aK1014@fmls aK1005@x) (values aK1013@id (cons 'defun (cons aK1014@fmls (cons aK1015@b aK1016@b*)))))) aK1009@ls/false) (let ((aK101b@t aK1007@t)) (let ((aK101d@ls/false (aKd7a@syntax-dispatch aK101b@t '(_ any any)))) (if (and aK101d@ls/false (apply (lambda (aK101f@id aK1020@val) (aKb73@id? aK101f@id)) aK101d@ls/false)) (apply (lambda (aK1023@id aK1024@val) (values aK1023@id (cons 'expr aK1024@val))) aK101d@ls/false) (let ((aK1027@t aK101b@t)) (let ((aK1029@ls/false (aKd7a@syntax-dispatch aK1027@t '(_ any)))) (if (and aK1029@ls/false (apply (lambda (aK102b@id) (aKb73@id? aK102b@id)) aK1029@ls/false)) (apply (lambda (aK102d@id) (values aK102d@id (cons 'expr (aKd30@bless '(void))))) aK1029@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1027@t)))))))))))) (set! aK280f@aKcfc@parse-define aKcfc@parse-define) (set! aKcfe@parse-define-syntax (lambda (aK102f@x) (let ((aK1031@t aK102f@x)) (let ((aK1033@ls/false (aKd7a@syntax-dispatch aK1031@t '(_ any any)))) (if (and aK1033@ls/false (apply (lambda (aK1035@id aK1036@val) (aKb73@id? aK1035@id)) aK1033@ls/false)) (apply (lambda (aK1039@id aK103a@val) (values aK1039@id aK103a@val)) aK1033@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1031@t)))))) (set! aK2810@aKcfe@parse-define-syntax aKcfe@parse-define-syntax) (set! aKd00@scheme-stx-hashtable (make-eq-hashtable)) (set! aK2811@aKd00@scheme-stx-hashtable aKd00@scheme-stx-hashtable) (set! aKd02@scheme-stx (lambda (aK103d@sym) (or (hashtable-ref aKd00@scheme-stx-hashtable aK103d@sym '#f) (let ((aK103f@subst (aK964@aK78d@library-subst (aK982@aK7c9@find-library-by-name '(psyntax system $all))))) (let ((aK1041@stx (make-simple-struct 'stx '5 (list aK103d@sym aKaf7@top-mark* '() '())))) (let ((aK1043@stx (let ((aK1045@t (assq aK103d@sym aK103f@subst))) (if aK1045@t ((lambda (aK1047@x) (let ((aK1049@name (car aK1047@x)) (aK104a@label (cdr aK1047@x))) (aKb5f@add-subst (make-simple-struct 'rib '6 (list (list aK1049@name) (list aKaf7@top-mark*) (list aK104a@label) '#f '#f)) aK1041@stx))) aK1045@t) aK1041@stx)))) (begin (hashtable-set! aKd00@scheme-stx-hashtable aK103d@sym aK1043@stx) aK1043@stx))))))) (set! aK2812@aKd02@scheme-stx aKd02@scheme-stx) (set! aKd04@lexical-var car) (set! aK2813@aKd04@lexical-var aKd04@lexical-var) (set! aKd06@lexical-mutable? cdr) (set! aK2814@aKd06@lexical-mutable? aKd06@lexical-mutable?) (set! aKd08@set-lexical-mutable! set-cdr!) (set! aK2815@aKd08@set-lexical-mutable! aKd08@set-lexical-mutable!) (set! aKd0a@add-lexical (lambda (aK104d@lab aK104e@lex aK104f@r) (cons (cons* aK104d@lab 'lexical aK104e@lex '#f) aK104f@r))) (set! aK2816@aKd0a@add-lexical aKd0a@add-lexical) (set! aKd0c@add-lexicals (lambda (aK1053@lab* aK1054@lex* aK1055@r) (if (null? aK1053@lab*) aK1055@r (aKd0c@add-lexicals (cdr aK1053@lab*) (cdr aK1054@lex*) (aKd0a@add-lexical (car aK1053@lab*) (car aK1054@lex*) aK1055@r))))) (set! aK2817@aKd0c@add-lexicals aKd0c@add-lexicals) (set! aKd0e@letrec-helper (lambda (aK1059@e aK105a@r aK105b@mr aK105c@build) (let ((aK1061@t aK1059@e)) (let ((aK1063@ls/false (aKd7a@syntax-dispatch aK1061@t '(_ #(each (any any)) any . each-any)))) (if aK1063@ls/false (apply (lambda (aK1065@lhs* aK1066@rhs* aK1067@b aK1068@b*) (if (not (aKb7b@valid-bound-ids? aK1065@lhs*)) (aKd34@invalid-fmls-error aK1059@e aK1065@lhs*) (let ((aK106d@lex* (map aKafb@gen-lexical aK1065@lhs*)) (aK106e@lab* (map aKaff@gen-label aK1065@lhs*))) (let ((aK1071@rib (aKb33@make-full-rib aK1065@lhs* aK106e@lab*)) (aK1072@r (aKd0c@add-lexicals aK106e@lab* aK106d@lex* aK105a@r))) (let ((aK1075@body (aKdb2@chi-internal (aKb5f@add-subst aK1071@rib (cons aK1067@b aK1068@b*)) aK1072@r aK105b@mr)) (aK1076@rhs* (aKd98@chi-expr* (map (lambda (aK1079@x) (aKb5f@add-subst aK1071@rib aK1079@x)) aK1066@rhs*) aK1072@r aK105b@mr))) (aK105c@build '#f aK106d@lex* aK1076@rhs* aK1075@body)))))) aK1063@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1061@t)))))) (set! aK2818@aKd0e@letrec-helper aKd0e@letrec-helper) (set! aKd10@let-transformer (lambda (aK107b@e aK107c@r aK107d@mr) (let ((aK1081@t aK107b@e)) (let ((aK1083@ls/false (aKd7a@syntax-dispatch aK1081@t '(_ #(each (any any)) any . each-any)))) (if aK1083@ls/false (apply (lambda (aK1085@lhs* aK1086@rhs* aK1087@b aK1088@b*) (if (not (aKb7b@valid-bound-ids? aK1085@lhs*)) (aKd34@invalid-fmls-error aK107b@e aK1085@lhs*) (let ((aK108d@lex* (map aKafb@gen-lexical aK1085@lhs*)) (aK108e@lab* (map aKaff@gen-label aK1085@lhs*)) (aK108f@rhs* (aKd98@chi-expr* aK1086@rhs* aK107c@r aK107d@mr))) (let ((aK1093@rib (aKb33@make-full-rib aK1085@lhs* aK108e@lab*)) (aK1094@r (aKd0c@add-lexicals aK108e@lab* aK108d@lex* aK107c@r))) (let ((aK1097@body (aKdb2@chi-internal (aKb5f@add-subst aK1093@rib (cons aK1087@b aK1088@b*)) aK1094@r aK107d@mr))) (aKadb@aKa38@build-let '#f aK108d@lex* aK108f@rhs* aK1097@body)))))) aK1083@ls/false) (let ((aK1099@t aK1081@t)) (let ((aK109b@ls/false (aKd7a@syntax-dispatch aK1099@t '(_ any #(each (any any)) any . each-any)))) (if aK109b@ls/false (apply (lambda (aK109d@loop aK109e@lhs* aK109f@rhs* aK10a0@b aK10a1@b*) (if (not (aKb7b@valid-bound-ids? aK109e@lhs*)) (aKd34@invalid-fmls-error aK107b@e aK109e@lhs*) (let ((aK10a7@lex* (map aKafb@gen-lexical aK109e@lhs*)) (aK10a8@lab* (map aKaff@gen-label aK109e@lhs*)) (aK10a9@rhs* (aKd98@chi-expr* aK109f@rhs* aK107c@r aK107d@mr)) (aK10aa@loop-lex (aKafb@gen-lexical aK109d@loop)) (aK10ab@loop-lab (aKaff@gen-label aK109d@loop))) (let ((aK10b1@rib (aKb33@make-full-rib (cons aK109d@loop aK109e@lhs*) (cons aK10ab@loop-lab aK10a8@lab*))) (aK10b2@r (aKd0c@add-lexicals (cons aK10ab@loop-lab aK10a8@lab*) (cons aK10aa@loop-lex aK10a7@lex*) aK107c@r))) (let ((aK10b5@body (aKdb2@chi-internal (aKb5f@add-subst aK10b1@rib (cons aK10a0@b aK10a1@b*)) aK10b2@r aK107d@mr))) (aKadc@aKa3a@build-named-let '#f aK10aa@loop-lex aK10a7@lex* aK10a9@rhs* aK10b5@body)))))) aK109b@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1099@t))))))))) (set! aK2819@aKd10@let-transformer aKd10@let-transformer) (set! aKd12@letrec-transformer (lambda (aK10b7@e aK10b8@r aK10b9@mr) (aKd0e@letrec-helper aK10b7@e aK10b8@r aK10b9@mr aKada@aKa36@build-letrec))) (set! aK281a@aKd12@letrec-transformer aKd12@letrec-transformer) (set! aKd14@letrec*-transformer (lambda (aK10bd@e aK10be@r aK10bf@mr) (aKd0e@letrec-helper aK10bd@e aK10be@r aK10bf@mr aKadd@aKa3c@build-letrec*))) (set! aK281b@aKd14@letrec*-transformer aKd14@letrec*-transformer) (set! aKd16@fluid-let-syntax-transformer (lambda (aK10c3@e aK10c4@r aK10c5@mr) (let ((aK10ca@lookup '#f)) (begin (set! aK10ca@lookup (lambda (aK10dd@x) (or (aKb89@id->label aK10dd@x) (aKe5a@syntax-violation '#f '"unbound identifier" aK10c3@e aK10dd@x)))) (let ((aK10cb@t aK10c3@e)) (let ((aK10cd@ls/false (aKd7a@syntax-dispatch aK10cb@t '(_ #(each (any any)) any . each-any)))) (if aK10cd@ls/false (apply (lambda (aK10cf@lhs* aK10d0@rhs* aK10d1@b aK10d2@b*) (if (not (aKb7b@valid-bound-ids? aK10cf@lhs*)) (aKd34@invalid-fmls-error aK10c3@e aK10cf@lhs*) (let ((aK10d7@lab* (map aK10ca@lookup aK10cf@lhs*)) (aK10d8@rhs* (map (lambda (aK10db@x) (aKbab@make-eval-transformer (aKdd4@expand-transformer aK10db@x aK10c5@mr))) aK10d0@rhs*))) (aKdb2@chi-internal (cons aK10d1@b aK10d2@b*) (append (map cons aK10d7@lab* aK10d8@rhs*) aK10c4@r) (append (map cons aK10d7@lab* aK10d8@rhs*) aK10c5@mr))))) aK10cd@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK10cb@t)))))))) (set! aK281c@aKd16@fluid-let-syntax-transformer aKd16@fluid-let-syntax-transformer) (set! aKd18@type-descriptor-transformer (lambda (aK10df@e aK10e0@r aK10e1@mr) (let ((aK10e5@t aK10df@e)) (let ((aK10e7@ls/false (aKd7a@syntax-dispatch aK10e5@t '(_ any)))) (if (and aK10e7@ls/false (apply (lambda (aK10e9@id) (aKb73@id? aK10e9@id)) aK10e7@ls/false)) (apply (lambda (aK10eb@id) (let ((aK10ed@lab (aKb89@id->label aK10eb@id))) (let ((aK10ef@b (aKb8b@label->binding aK10ed@lab aK10e0@r))) (let ((aK10f1@type (aKb8f@binding-type aK10ef@b))) (begin (if (not aK10ed@lab) (aKb93@raise-unbound-error aK10eb@id) (void)) (if (not (and (eq? aK10f1@type '$rtd) (not (list? (aKb91@binding-value aK10ef@b))))) (aKe5a@syntax-violation '#f '"not a record type" aK10df@e) (void)) (list 'quote (aKb91@binding-value aK10ef@b))))))) aK10e7@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK10e5@t)))))) (set! aK281d@aKd18@type-descriptor-transformer aKd18@type-descriptor-transformer) (set! aKd1a@record-type-descriptor-transformer (lambda (aK10f3@e aK10f4@r aK10f5@mr) (let ((aK10f9@t aK10f3@e)) (let ((aK10fb@ls/false (aKd7a@syntax-dispatch aK10f9@t '(_ any)))) (if (and aK10fb@ls/false (apply (lambda (aK10fd@id) (aKb73@id? aK10fd@id)) aK10fb@ls/false)) (apply (lambda (aK10ff@id) (let ((aK1101@lab (aKb89@id->label aK10ff@id))) (let ((aK1103@b (aKb8b@label->binding aK1101@lab aK10f4@r))) (let ((aK1105@type (aKb8f@binding-type aK1103@b))) (begin (if (not aK1101@lab) (aKb93@raise-unbound-error aK10ff@id) (void)) (if (not (and (eq? aK1105@type '$rtd) (list? (aKb91@binding-value aK1103@b)))) (aKe5a@syntax-violation '#f '"not a record type" aK10f3@e) (void)) (aKd9c@chi-expr (car (aKb91@binding-value aK1103@b)) aK10f4@r aK10f5@mr)))))) aK10fb@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK10f9@t)))))) (set! aK281e@aKd1a@record-type-descriptor-transformer aKd1a@record-type-descriptor-transformer) (set! aKd1c@record-constructor-descriptor-transformer (lambda (aK1107@e aK1108@r aK1109@mr) (let ((aK110d@t aK1107@e)) (let ((aK110f@ls/false (aKd7a@syntax-dispatch aK110d@t '(_ any)))) (if (and aK110f@ls/false (apply (lambda (aK1111@id) (aKb73@id? aK1111@id)) aK110f@ls/false)) (apply (lambda (aK1113@id) (let ((aK1115@lab (aKb89@id->label aK1113@id))) (let ((aK1117@b (aKb8b@label->binding aK1115@lab aK1108@r))) (let ((aK1119@type (aKb8f@binding-type aK1117@b))) (begin (if (not aK1115@lab) (aKb93@raise-unbound-error aK1113@id) (void)) (if (not (and (eq? aK1119@type '$rtd) (list? (aKb91@binding-value aK1117@b)))) (aKe5a@syntax-violation '#f '"invalid type" aK1107@e) (void)) (aKd9c@chi-expr (cadr (aKb91@binding-value aK1117@b)) aK1108@r aK1109@mr)))))) aK110f@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK110d@t)))))) (set! aK281f@aKd1c@record-constructor-descriptor-transformer aKd1c@record-constructor-descriptor-transformer) (set! aKd1e@when-macro (lambda (aK111b@e) (let ((aK111d@t aK111b@e)) (let ((aK111f@ls/false (aKd7a@syntax-dispatch aK111d@t '(_ any any . each-any)))) (if aK111f@ls/false (apply (lambda (aK1121@test aK1122@e aK1123@e*) (aKd30@bless (list 'if aK1121@test (cons 'begin (cons aK1122@e aK1123@e*))))) aK111f@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK111d@t)))))) (set! aK2820@aKd1e@when-macro aKd1e@when-macro) (set! aKd20@unless-macro (lambda (aK1127@e) (let ((aK1129@t aK1127@e)) (let ((aK112b@ls/false (aKd7a@syntax-dispatch aK1129@t '(_ any any . each-any)))) (if aK112b@ls/false (apply (lambda (aK112d@test aK112e@e aK112f@e*) (aKd30@bless (list 'if (list 'not aK112d@test) (cons 'begin (cons aK112e@e aK112f@e*))))) aK112b@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1129@t)))))) (set! aK2821@aKd20@unless-macro aKd20@unless-macro) (set! aKd22@if-transformer (lambda (aK1133@e aK1134@r aK1135@mr) (let ((aK1139@t aK1133@e)) (let ((aK113b@ls/false (aKd7a@syntax-dispatch aK1139@t '(_ any any any)))) (if aK113b@ls/false (apply (lambda (aK113d@e0 aK113e@e1 aK113f@e2) (list 'if (aKd9c@chi-expr aK113d@e0 aK1134@r aK1135@mr) (aKd9c@chi-expr aK113e@e1 aK1134@r aK1135@mr) (aKd9c@chi-expr aK113f@e2 aK1134@r aK1135@mr))) aK113b@ls/false) (let ((aK1143@t aK1139@t)) (let ((aK1145@ls/false (aKd7a@syntax-dispatch aK1143@t '(_ any any)))) (if aK1145@ls/false (apply (lambda (aK1147@e0 aK1148@e1) (list 'if (aKd9c@chi-expr aK1147@e0 aK1134@r aK1135@mr) (aKd9c@chi-expr aK1148@e1 aK1134@r aK1135@mr) (aKad9@aKa34@build-void))) aK1145@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1143@t))))))))) (set! aK2822@aKd22@if-transformer aKd22@if-transformer) (set! aKd24@and-transformer (lambda (aK114b@e aK114c@r aK114d@mr) (let ((aK1151@t aK114b@e)) (let ((aK1153@ls/false (aKd7a@syntax-dispatch aK1151@t '(_ . each-any)))) (if aK1153@ls/false (apply (lambda (aK1155@e*) (cons 'and (aKd98@chi-expr* aK1155@e* aK114c@r aK114d@mr))) aK1153@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1151@t)))))) (set! aK2823@aKd24@and-transformer aKd24@and-transformer) (set! aKd26@or-transformer (lambda (aK1157@e aK1158@r aK1159@mr) (let ((aK115d@t aK1157@e)) (let ((aK115f@ls/false (aKd7a@syntax-dispatch aK115d@t '(_ . each-any)))) (if aK115f@ls/false (apply (lambda (aK1161@e*) (cons 'or (aKd98@chi-expr* aK1161@e* aK1158@r aK1159@mr))) aK115f@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK115d@t)))))) (set! aK2824@aKd26@or-transformer aKd26@or-transformer) (set! aKd28@case-macro (lambda (aK1163@e) (let ((aK1166@build-last '#f) (aK1168@build-one '#f)) (begin (set! aK1166@build-last (lambda (aK118d@cls) (let ((aK118f@t aK118d@cls)) (let ((aK1191@ls/false (aKd7a@syntax-dispatch aK118f@t '(#(scheme-id else) any . each-any)))) (if aK1191@ls/false (apply (lambda (aK1193@e aK1194@e*) (cons 'begin (cons aK1193@e aK1194@e*))) aK1191@ls/false) (let ((aK1197@t aK118f@t)) (let ((aK1199@ls/false (aKd7a@syntax-dispatch aK1197@t '_))) (if aK1199@ls/false (apply (lambda () (aK1168@build-one aK118d@cls '(if #f #f))) aK1199@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1197@t))))))))) (set! aK1168@build-one (lambda (aK117f@cls aK1180@k) (let ((aK1183@t aK117f@cls)) (let ((aK1185@ls/false (aKd7a@syntax-dispatch aK1183@t '(each-any any . each-any)))) (if aK1185@ls/false (apply (lambda (aK1187@d* aK1188@e aK1189@e*) (list 'if (list 'memv 't (list 'quote aK1187@d*)) (cons 'begin (cons aK1188@e aK1189@e*)) aK1180@k)) aK1185@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1183@t)))))) (let ((aK1169@t aK1163@e)) (let ((aK116b@ls/false (aKd7a@syntax-dispatch aK1169@t '(_ any)))) (if aK116b@ls/false (apply (lambda (aK116d@expr) (aKd30@bless (cons 'let (cons (list (list 't aK116d@expr)) '((if #f #f)))))) aK116b@ls/false) (let ((aK116f@t aK1169@t)) (let ((aK1171@ls/false (aKd7a@syntax-dispatch aK116f@t '(_ any any . each-any)))) (if aK1171@ls/false (apply (lambda (aK1173@expr aK1174@cls aK1175@cls*) (aKd30@bless (list 'let (list (list 't aK1173@expr)) (let aK117d@f ((aK1179@cls aK1174@cls) (aK117a@cls* aK1175@cls*)) (if (null? aK117a@cls*) (aK1166@build-last aK1179@cls) (aK1168@build-one aK1179@cls (aK117d@f (car aK117a@cls*) (cdr aK117a@cls*)))))))) aK1171@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK116f@t))))))))))) (set! aK2825@aKd28@case-macro aKd28@case-macro) (set! aKd2a@quote-transformer (lambda (aK119b@e aK119c@r aK119d@mr) (let ((aK11a1@t aK119b@e)) (let ((aK11a3@ls/false (aKd7a@syntax-dispatch aK11a1@t '(_ any)))) (if aK11a3@ls/false (apply (lambda (aK11a5@datum) (list 'quote (aKb87@stx->datum aK11a5@datum))) aK11a3@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK11a1@t)))))) (set! aK2826@aKd2a@quote-transformer aKd2a@quote-transformer) (set! aKd2c@case-lambda-transformer (lambda (aK11a7@e aK11a8@r aK11a9@mr) (let ((aK11ad@t aK11a7@e)) (let ((aK11af@ls/false (aKd7a@syntax-dispatch aK11ad@t '(_ . #(each (any any . each-any)))))) (if aK11af@ls/false (apply (lambda (aK11b1@fmls* aK11b2@b* aK11b3@b**) (call-with-values (lambda () (aKda4@chi-lambda-clause* aK11a7@e aK11b1@fmls* (map cons aK11b2@b* aK11b3@b**) aK11a8@r aK11a9@mr)) (lambda (aK11bb@aK11b8 aK11bc@aK11ba) (let ((aK11bf@body* aK11bc@aK11ba) (aK11c0@fmls* aK11bb@aK11b8)) (aKad7@aKa04@build-case-lambda '#f aK11c0@fmls* aK11bf@body*))))) aK11af@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK11ad@t)))))) (set! aK2827@aKd2c@case-lambda-transformer aKd2c@case-lambda-transformer) (set! aKd2e@lambda-transformer (lambda (aK11c3@e aK11c4@r aK11c5@mr) (let ((aK11c9@t aK11c3@e)) (let ((aK11cb@ls/false (aKd7a@syntax-dispatch aK11c9@t '(_ any any . each-any)))) (if aK11cb@ls/false (apply (lambda (aK11cd@fmls aK11ce@b aK11cf@b*) (call-with-values (lambda () (aKda2@chi-lambda-clause aK11c3@e aK11cd@fmls (cons aK11ce@b aK11cf@b*) aK11c4@r aK11c5@mr)) (lambda (aK11d7@aK11d4 aK11d8@aK11d6) (let ((aK11db@body aK11d8@aK11d6) (aK11dc@fmls aK11d7@aK11d4)) (aKad6@aKa02@build-lambda '#f aK11dc@fmls aK11db@body))))) aK11cb@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK11c9@t)))))) (set! aK2828@aKd2e@lambda-transformer aKd2e@lambda-transformer) (set! aKd30@bless (lambda (aK11df@x) (aKb5b@mkstx (let aK11e3@f ((aK11e1@x aK11df@x)) (if (aKb3f@stx? aK11e1@x) aK11e1@x (if (pair? aK11e1@x) (cons (aK11e3@f (car aK11e1@x)) (aK11e3@f (cdr aK11e1@x))) (if (symbol? aK11e1@x) (aKd02@scheme-stx aK11e1@x) (if (vector? aK11e1@x) (vector-map aK11e3@f aK11e1@x) aK11e1@x))))) '() '() '()))) (set! aK2829@aKd30@bless aKd30@bless) (set! aKd32@with-syntax-macro (lambda (aK11e5@e) (let ((aK11e7@t aK11e5@e)) (let ((aK11e9@ls/false (aKd7a@syntax-dispatch aK11e7@t '(_ #(each (any any)) any . each-any)))) (if aK11e9@ls/false (apply (lambda (aK11eb@pat* aK11ec@expr* aK11ed@b aK11ee@b*) (let ((aK11f3@idn* (let aK11f7@f ((aK11f5@pat* aK11eb@pat*)) (if (null? aK11f5@pat*) '() (call-with-values (lambda () (aKd78@convert-pattern (car aK11f5@pat*) '())) (lambda (aK11fd@aK11fa aK11fe@aK11fc) (let ((aK1201@idn* aK11fe@aK11fc) (aK1202@pat aK11fd@aK11fa)) (append aK1201@idn* (aK11f7@f (cdr aK11f5@pat*)))))))))) (begin (aKda0@verify-formals (map car aK11f3@idn*) aK11e5@e) (let ((aK1205@t* (aKe48@generate-temporaries aK11ec@expr*))) (aKd30@bless (list 'let (map list aK1205@t* aK11ec@expr*) (let aK120b@f ((aK1207@pat* aK11eb@pat*) (aK1208@t* aK1205@t*)) (if (null? aK1207@pat*) (cons 'begin (cons '#f (cons aK11ed@b aK11ee@b*))) (list 'syntax-case (car aK1208@t*) '() (list (car aK1207@pat*) (aK120b@f (cdr aK1207@pat*) (cdr aK1208@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car aK1207@pat*)) (car aK1208@t*)))))))))))) aK11e9@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK11e7@t)))))) (set! aK282a@aKd32@with-syntax-macro aKd32@with-syntax-macro) (set! aKd34@invalid-fmls-error (lambda (aK120d@stx aK120e@fmls) (let ((aK1211@t aK120e@fmls)) (let ((aK1213@ls/false (aKd7a@syntax-dispatch aK1211@t '#(each+ any () any)))) (if aK1213@ls/false (apply (lambda (aK1215@id* aK1216@last) (let aK121b@f ((aK1219@id* (if (aKb73@id? aK1216@last) (cons aK1216@last aK1215@id*) (if (aKb69@syntax-null? aK1216@last) aK1215@id* (aKe5a@syntax-violation '#f '"not an identifier" aK120d@stx aK1216@last))))) (if (null? aK1219@id*) (values) (if (not (aKb73@id? (car aK1219@id*))) (aKe5a@syntax-violation '#f '"not an identifier" aK120d@stx (car aK1219@id*)) (begin (aK121b@f (cdr aK1219@id*)) (if (aKb7f@bound-id-member? (car aK1219@id*) (cdr aK1219@id*)) (aKe5a@syntax-violation '#f '"duplicate binding" aK120d@stx (car aK1219@id*)) (void))))))) aK1213@ls/false) (let ((aK121d@t aK1211@t)) (let ((aK121f@ls/false (aKd7a@syntax-dispatch aK121d@t '_))) (if aK121f@ls/false (apply (lambda () (aKe5a@syntax-violation '#f '"malformed binding form" aK120d@stx aK120e@fmls)) aK121f@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK121d@t))))))))) (set! aK282b@aKd34@invalid-fmls-error aKd34@invalid-fmls-error) (set! aKd36@let-macro (lambda (aK1221@stx) (let ((aK1223@t aK1221@stx)) (let ((aK1225@ls/false (aKd7a@syntax-dispatch aK1223@t '(_ #(each (any any)) any . each-any)))) (if aK1225@ls/false (apply (lambda (aK1227@lhs* aK1228@rhs* aK1229@b aK122a@b*) (if (aKb7b@valid-bound-ids? aK1227@lhs*) (aKd30@bless (cons (cons 'lambda (cons aK1227@lhs* (cons aK1229@b aK122a@b*))) aK1228@rhs*)) (aKd34@invalid-fmls-error aK1221@stx aK1227@lhs*))) aK1225@ls/false) (let ((aK122f@t aK1223@t)) (let ((aK1231@ls/false (aKd7a@syntax-dispatch aK122f@t '(_ any #(each (any any)) any . each-any)))) (if (and aK1231@ls/false (apply (lambda (aK1233@f aK1234@lhs* aK1235@rhs* aK1236@b aK1237@b*) (aKb73@id? aK1233@f)) aK1231@ls/false)) (apply (lambda (aK123d@f aK123e@lhs* aK123f@rhs* aK1240@b aK1241@b*) (if (aKb7b@valid-bound-ids? aK123e@lhs*) (aKd30@bless (cons (list 'letrec (list (list aK123d@f (cons 'lambda (cons aK123e@lhs* (cons aK1240@b aK1241@b*))))) aK123d@f) aK123f@rhs*)) (aKd34@invalid-fmls-error aK1221@stx aK123e@lhs*))) aK1231@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK122f@t))))))))) (set! aK282c@aKd36@let-macro aKd36@let-macro) (set! aKd38@let-values-macro (lambda (aK1247@stx) (let ((aK124a@rename '#f) (aK124c@rename* '#f)) (begin (set! aK124a@rename (lambda (aK12af@x aK12b0@old* aK12b1@new*) (begin (if (not (aKb73@id? aK12af@x)) (aKe5a@syntax-violation '#f '"not an indentifier" aK1247@stx aK12af@x) (void)) (if (aKb7f@bound-id-member? aK12af@x aK12b0@old*) (aKe5a@syntax-violation '#f '"duplicate binding" aK1247@stx aK12af@x) (void)) (let ((aK12b5@y (gensym (aKe60@syntax->datum aK12af@x)))) (values aK12b5@y (cons aK12af@x aK12b0@old*) (cons aK12b5@y aK12b1@new*)))))) (set! aK124c@rename* (lambda (aK129d@x* aK129e@old* aK129f@new*) (if (null? aK129d@x*) (values '() aK129e@old* aK129f@new*) (call-with-values (lambda () (aK124a@rename (car aK129d@x*) aK129e@old* aK129f@new*)) (lambda (aK12a3@x aK12a4@old* aK12a5@new*) (call-with-values (lambda () (aK124c@rename* (cdr aK129d@x*) aK12a4@old* aK12a5@new*)) (lambda (aK12a9@x* aK12aa@old* aK12ab@new*) (values (cons aK12a3@x aK12a9@x*) aK12aa@old* aK12ab@new*)))))))) (let ((aK124d@t aK1247@stx)) (let ((aK124f@ls/false (aKd7a@syntax-dispatch aK124d@t '(_ () any . each-any)))) (if aK124f@ls/false (apply (lambda (aK1251@b aK1252@b*) (cons* (aKd30@bless 'let) '() aK1251@b aK1252@b*)) aK124f@ls/false) (let ((aK1255@t aK124d@t)) (let ((aK1257@ls/false (aKd7a@syntax-dispatch aK1255@t '(_ #(each (any any)) any . each-any)))) (if aK1257@ls/false (apply (lambda (aK1259@lhs* aK125a@rhs* aK125b@b aK125c@b*) (aKd30@bless (let aK1269@f ((aK1261@lhs* aK1259@lhs*) (aK1262@rhs* aK125a@rhs*) (aK1263@old* '()) (aK1264@new* '())) (if (null? aK1261@lhs*) (cons 'let (cons (map list aK1263@old* aK1264@new*) (cons aK125b@b aK125c@b*))) (let ((aK126b@t (car aK1261@lhs*))) (let ((aK126d@ls/false (aKd7a@syntax-dispatch aK126b@t 'each-any))) (if aK126d@ls/false (apply (lambda (aK126f@x*) (call-with-values (lambda () (aK124c@rename* aK126f@x* aK1263@old* aK1264@new*)) (lambda (aK1277@aK1272 aK1278@aK1274 aK1279@aK1276) (let ((aK127d@new* aK1279@aK1276) (aK127e@old* aK1278@aK1274) (aK127f@y* aK1277@aK1272)) (list 'call-with-values (list 'lambda '() (car aK1262@rhs*)) (list 'lambda aK127f@y* (aK1269@f (cdr aK1261@lhs*) (cdr aK1262@rhs*) aK127e@old* aK127d@new*))))))) aK126d@ls/false) (let ((aK1283@t aK126b@t)) (let ((aK1285@ls/false (aKd7a@syntax-dispatch aK1283@t '#(each+ any () any)))) (if aK1285@ls/false (apply (lambda (aK1287@x* aK1288@x) (call-with-values (lambda () (aK124a@rename aK1288@x aK1263@old* aK1264@new*)) (lambda (aK128b@y aK128c@old* aK128d@new*) (call-with-values (lambda () (aK124c@rename* aK1287@x* aK128c@old* aK128d@new*)) (lambda (aK1291@y* aK1292@old* aK1293@new*) (list 'call-with-values (list 'lambda '() (car aK1262@rhs*)) (list 'lambda (append aK1291@y* aK128b@y) (aK1269@f (cdr aK1261@lhs*) (cdr aK1262@rhs*) aK1292@old* aK1293@new*)))))))) aK1285@ls/false) (let ((aK1297@t aK1283@t)) (let ((aK1299@ls/false (aKd7a@syntax-dispatch aK1297@t 'any))) (if aK1299@ls/false (apply (lambda (aK129b@others) (aKe5a@syntax-violation '#f '"malformed bindings" aK1247@stx aK129b@others)) aK1299@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1297@t)))))))))))))) aK1257@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1255@t))))))))))) (set! aK282d@aKd38@let-values-macro aKd38@let-values-macro) (set! aKd3a@let*-values-macro (lambda (aK12b7@stx) (let ((aK12ba@check '#f)) (begin (set! aK12ba@check (lambda (aK12e9@x*) (if (not (null? aK12e9@x*)) (let ((aK12eb@x (car aK12e9@x*))) (begin (if (not (aKb73@id? aK12eb@x)) (aKe5a@syntax-violation '#f '"not an identifier" aK12b7@stx aK12eb@x) (void)) (aK12ba@check (cdr aK12e9@x*)) (if (aKb7f@bound-id-member? aK12eb@x (cdr aK12e9@x*)) (aKe5a@syntax-violation '#f '"duplicate identifier" aK12b7@stx aK12eb@x) (void)))) (void)))) (let ((aK12bb@t aK12b7@stx)) (let ((aK12bd@ls/false (aKd7a@syntax-dispatch aK12bb@t '(_ () any . each-any)))) (if aK12bd@ls/false (apply (lambda (aK12bf@b aK12c0@b*) (cons* (aKd30@bless 'let) '() aK12bf@b aK12c0@b*)) aK12bd@ls/false) (let ((aK12c3@t aK12bb@t)) (let ((aK12c5@ls/false (aKd7a@syntax-dispatch aK12c3@t '(_ #(each (any any)) any . each-any)))) (if aK12c5@ls/false (apply (lambda (aK12c7@lhs* aK12c8@rhs* aK12c9@b aK12ca@b*) (aKd30@bless (let aK12d3@f ((aK12cf@lhs* aK12c7@lhs*) (aK12d0@rhs* aK12c8@rhs*)) (if (null? aK12cf@lhs*) (cons 'begin (cons aK12c9@b aK12ca@b*)) (let ((aK12d5@t (car aK12cf@lhs*))) (let ((aK12d7@ls/false (aKd7a@syntax-dispatch aK12d5@t 'each-any))) (if aK12d7@ls/false (apply (lambda (aK12d9@x*) (begin (aK12ba@check aK12d9@x*) (list 'call-with-values (list 'lambda '() (car aK12d0@rhs*)) (list 'lambda aK12d9@x* (aK12d3@f (cdr aK12cf@lhs*) (cdr aK12d0@rhs*)))))) aK12d7@ls/false) (let ((aK12db@t aK12d5@t)) (let ((aK12dd@ls/false (aKd7a@syntax-dispatch aK12db@t '#(each+ any () any)))) (if aK12dd@ls/false (apply (lambda (aK12df@x* aK12e0@x) (begin (aK12ba@check (cons aK12e0@x aK12df@x*)) (list 'call-with-values (list 'lambda '() (car aK12d0@rhs*)) (list 'lambda (append aK12df@x* aK12e0@x) (aK12d3@f (cdr aK12cf@lhs*) (cdr aK12d0@rhs*)))))) aK12dd@ls/false) (let ((aK12e3@t aK12db@t)) (let ((aK12e5@ls/false (aKd7a@syntax-dispatch aK12e3@t 'any))) (if aK12e5@ls/false (apply (lambda (aK12e7@others) (aKe5a@syntax-violation '#f '"malformed bindings" aK12b7@stx aK12e7@others)) aK12e5@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK12e3@t)))))))))))))) aK12c5@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK12c3@t))))))))))) (set! aK282e@aKd3a@let*-values-macro aKd3a@let*-values-macro) (set! aKd3c@trace-lambda-macro (lambda (aK12ed@stx) (let ((aK12ef@t aK12ed@stx)) (let ((aK12f1@ls/false (aKd7a@syntax-dispatch aK12ef@t '(_ any each-any any . each-any)))) (if aK12f1@ls/false (apply (lambda (aK12f3@who aK12f4@fmls aK12f5@b aK12f6@b*) (if (aKb7b@valid-bound-ids? aK12f4@fmls) (aKd30@bless (list 'make-traced-procedure (list 'quote aK12f3@who) (cons 'lambda (cons aK12f4@fmls (cons aK12f5@b aK12f6@b*))))) (aKd34@invalid-fmls-error aK12ed@stx aK12f4@fmls))) aK12f1@ls/false) (let ((aK12fb@t aK12ef@t)) (let ((aK12fd@ls/false (aKd7a@syntax-dispatch aK12fb@t '(_ any #(each+ any () any) any . each-any)))) (if aK12fd@ls/false (apply (lambda (aK12ff@who aK1300@fmls aK1301@last aK1302@b aK1303@b*) (if (aKb7b@valid-bound-ids? (cons aK1301@last aK1300@fmls)) (aKd30@bless (list 'make-traced-procedure (list 'quote aK12ff@who) (cons 'lambda (cons (append aK1300@fmls aK1301@last) (cons aK1302@b aK1303@b*))))) (aKd34@invalid-fmls-error aK12ed@stx (append aK1300@fmls aK1301@last)))) aK12fd@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK12fb@t))))))))) (set! aK282f@aKd3c@trace-lambda-macro aKd3c@trace-lambda-macro) (set! aKd3e@trace-define-macro (lambda (aK1309@stx) (let ((aK130b@t aK1309@stx)) (let ((aK130d@ls/false (aKd7a@syntax-dispatch aK130b@t '(_ (any . each-any) any . each-any)))) (if aK130d@ls/false (apply (lambda (aK130f@who aK1310@fmls aK1311@b aK1312@b*) (if (aKb7b@valid-bound-ids? aK1310@fmls) (aKd30@bless (list 'define aK130f@who (list 'make-traced-procedure (list 'quote aK130f@who) (cons 'lambda (cons aK1310@fmls (cons aK1311@b aK1312@b*)))))) (aKd34@invalid-fmls-error aK1309@stx aK1310@fmls))) aK130d@ls/false) (let ((aK1317@t aK130b@t)) (let ((aK1319@ls/false (aKd7a@syntax-dispatch aK1317@t '(_ (any . #(each+ any () any)) any . each-any)))) (if aK1319@ls/false (apply (lambda (aK131b@who aK131c@fmls aK131d@last aK131e@b aK131f@b*) (if (aKb7b@valid-bound-ids? (cons aK131d@last aK131c@fmls)) (aKd30@bless (list 'define aK131b@who (list 'make-traced-procedure (list 'quote aK131b@who) (cons 'lambda (cons (append aK131c@fmls aK131d@last) (cons aK131e@b aK131f@b*)))))) (aKd34@invalid-fmls-error aK1309@stx (append aK131c@fmls aK131d@last)))) aK1319@ls/false) (let ((aK1325@t aK1317@t)) (let ((aK1327@ls/false (aKd7a@syntax-dispatch aK1325@t '(_ any any)))) (if aK1327@ls/false (apply (lambda (aK1329@who aK132a@expr) (if (aKb73@id? aK1329@who) (aKd30@bless (list 'define aK1329@who (list 'let (list (list 'v aK132a@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote aK1329@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (aKe5a@syntax-violation '#f '"invalid name" aK1309@stx))) aK1327@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1325@t)))))))))))) (set! aK2830@aKd3e@trace-define-macro aKd3e@trace-define-macro) (set! aKd40@trace-define-syntax-macro (lambda (aK132d@stx) (let ((aK132f@t aK132d@stx)) (let ((aK1331@ls/false (aKd7a@syntax-dispatch aK132f@t '(_ any any)))) (if aK1331@ls/false (apply (lambda (aK1333@who aK1334@expr) (if (aKb73@id? aK1333@who) (aKd30@bless (list 'define-syntax aK1333@who (list 'make-traced-macro (list 'quote aK1333@who) aK1334@expr))) (aKe5a@syntax-violation '#f '"invalid name" aK132d@stx))) aK1331@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK132f@t)))))) (set! aK2831@aKd40@trace-define-syntax-macro aKd40@trace-define-syntax-macro) (set! aKd42@trace-let/rec-syntax (lambda (aK1337@who) (lambda (aK1339@stx) (let ((aK133b@t aK1339@stx)) (let ((aK133d@ls/false (aKd7a@syntax-dispatch aK133b@t '(_ #(each (any any)) any . each-any)))) (if aK133d@ls/false (apply (lambda (aK133f@lhs* aK1340@rhs* aK1341@b aK1342@b*) (if (aKb7b@valid-bound-ids? aK133f@lhs*) (let ((aK1347@rhs* (map (lambda (aK1349@lhs aK134a@rhs) (list 'make-traced-macro (list 'quote aK1349@lhs) aK134a@rhs)) aK133f@lhs* aK1340@rhs*))) (aKd30@bless (cons aK1337@who (cons (map list aK133f@lhs* aK1347@rhs*) (cons aK1341@b aK1342@b*))))) (aKd34@invalid-fmls-error aK1339@stx aK133f@lhs*))) aK133d@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK133b@t))))))) (set! aK2832@aKd42@trace-let/rec-syntax aKd42@trace-let/rec-syntax) (set! aKd44@trace-let-syntax-macro (aKd42@trace-let/rec-syntax 'let-syntax)) (set! aK2833@aKd44@trace-let-syntax-macro aKd44@trace-let-syntax-macro) (set! aKd46@trace-letrec-syntax-macro (aKd42@trace-let/rec-syntax 'letrec-syntax)) (set! aK2834@aKd46@trace-letrec-syntax-macro aKd46@trace-letrec-syntax-macro) (set! aKd48@guard-macro (lambda (aK134d@x) (let ((aK1350@gen-clauses '#f)) (begin (set! aK1350@gen-clauses (lambda (aK1367@con aK1368@outerk aK1369@clause*) (let ((aK136e@f '#f) (aK1370@f* '#f)) (begin (set! aK136e@f (lambda (aK13a7@x aK13a8@k) (let ((aK13ab@t aK13a7@x)) (let ((aK13ad@ls/false (aKd7a@syntax-dispatch aK13ab@t '(any #(scheme-id =>) any)))) (if aK13ad@ls/false (apply (lambda (aK13af@e aK13b0@p) (let ((aK13b3@t (gensym))) (list 'let (list (list aK13b3@t aK13af@e)) (list 'if aK13b3@t (list aK13b0@p aK13b3@t) aK13a8@k)))) aK13ad@ls/false) (let ((aK13b5@t aK13ab@t)) (let ((aK13b7@ls/false (aKd7a@syntax-dispatch aK13b5@t '(any)))) (if aK13b7@ls/false (apply (lambda (aK13b9@e) (let ((aK13bb@t (gensym))) (list 'let (list (list aK13bb@t aK13b9@e)) (list 'if aK13bb@t aK13bb@t aK13a8@k)))) aK13b7@ls/false) (let ((aK13bd@t aK13b5@t)) (let ((aK13bf@ls/false (aKd7a@syntax-dispatch aK13bd@t '(any any . each-any)))) (if aK13bf@ls/false (apply (lambda (aK13c1@e aK13c2@v aK13c3@v*) (list 'if aK13c1@e (cons 'begin (cons aK13c2@v aK13c3@v*)) aK13a8@k)) aK13bf@ls/false) (let ((aK13c7@t aK13bd@t)) (let ((aK13c9@ls/false (aKd7a@syntax-dispatch aK13c7@t '_))) (if aK13c9@ls/false (apply (lambda () (aKe5a@syntax-violation '#f '"invalid guard clause" aK13a7@x)) aK13c9@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK13c7@t))))))))))))))) (set! aK1370@f* (lambda (aK137d@x*) (let ((aK137f@t aK137d@x*)) (let ((aK1381@ls/false (aKd7a@syntax-dispatch aK137f@t '()))) (if aK1381@ls/false (apply (lambda () (let ((aK1383@g (gensym))) (values (list aK1383@g (list 'lambda '() (list 'raise-continuable aK1367@con))) aK1383@g))) aK1381@ls/false) (let ((aK1385@t aK137f@t)) (let ((aK1387@ls/false (aKd7a@syntax-dispatch aK1385@t '((#(scheme-id else) any . each-any))))) (if aK1387@ls/false (apply (lambda (aK1389@e aK138a@e*) (values (cons 'begin (cons aK1389@e aK138a@e*)) '#f)) aK1387@ls/false) (let ((aK138d@t aK1385@t)) (let ((aK138f@ls/false (aKd7a@syntax-dispatch aK138d@t '(any . any)))) (if aK138f@ls/false (apply (lambda (aK1391@cls aK1392@cls*) (call-with-values (lambda () (aK1370@f* aK1392@cls*)) (lambda (aK1399@aK1396 aK139a@aK1398) (let ((aK139d@g aK139a@aK1398) (aK139e@e aK1399@aK1396)) (values (aK136e@f aK1391@cls aK139e@e) aK139d@g))))) aK138f@ls/false) (let ((aK13a1@t aK138d@t)) (let ((aK13a3@ls/false (aKd7a@syntax-dispatch aK13a1@t 'any))) (if aK13a3@ls/false (apply (lambda (aK13a5@others) (aKe5a@syntax-violation '#f '"invalid guard clause" aK13a5@others)) aK13a3@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK13a1@t))))))))))))))) (call-with-values (lambda () (aK1370@f* aK1369@clause*)) (lambda (aK1375@aK1372 aK1376@aK1374) (let ((aK1379@raisek aK1376@aK1374) (aK137a@code aK1375@aK1372)) (if aK1379@raisek (list (list 'call/cc (list 'lambda (list aK1379@raisek) (list aK1368@outerk (list 'lambda '() aK137a@code))))) (list aK1368@outerk (list 'lambda '() aK137a@code)))))))))) (let ((aK1351@t aK134d@x)) (let ((aK1353@ls/false (aKd7a@syntax-dispatch aK1351@t '(_ (any . each-any) any . each-any)))) (if (and aK1353@ls/false (apply (lambda (aK1355@con aK1356@clause* aK1357@b aK1358@b*) (aKb73@id? aK1355@con)) aK1353@ls/false)) (apply (lambda (aK135d@con aK135e@clause* aK135f@b aK1360@b*) (let ((aK1365@outerk (gensym))) (aKd30@bless (list (list 'call/cc (list 'lambda (list aK1365@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list aK135d@con) (aK1350@gen-clauses aK135d@con aK1365@outerk aK135e@clause*)) (cons 'lambda (cons '() (cons aK135f@b aK1360@b*))))))))))) aK1353@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1351@t)))))))) (set! aK2835@aKd48@guard-macro aKd48@guard-macro) (set! aKd4a@define-enumeration-macro (lambda (aK13cb@stx) (let ((aK13ce@set? '#f) (aK13d0@remove-dups '#f)) (begin (set! aK13ce@set? (lambda (aK13e7@x) (or (null? aK13e7@x) (and (not (memq (car aK13e7@x) (cdr aK13e7@x))) (aK13ce@set? (cdr aK13e7@x)))))) (set! aK13d0@remove-dups (lambda (aK13e5@ls) (if (null? aK13e5@ls) '() (cons (car aK13e5@ls) (aK13d0@remove-dups (remq (car aK13e5@ls) (cdr aK13e5@ls))))))) (let ((aK13d1@t aK13cb@stx)) (let ((aK13d3@ls/false (aKd7a@syntax-dispatch aK13d1@t '(_ any each-any any)))) (if (and aK13d3@ls/false (apply (lambda (aK13d5@name aK13d6@id* aK13d7@maker) (and (aKb73@id? aK13d5@name) (aKb73@id? aK13d7@maker) (for-all aKb73@id? aK13d6@id*))) aK13d3@ls/false)) (apply (lambda (aK13db@name aK13dc@id* aK13dd@maker) (let ((aK13e1@name* (aK13d0@remove-dups (aKe60@syntax->datum aK13dc@id*))) (aK13e2@mk (gensym))) (aKd30@bless (list 'begin (list 'define aK13e2@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote aK13e1@name*)))) (list 'define-syntax aK13db@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote aK13e1@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote aK13db@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax aK13dd@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote aK13dd@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote aK13e1@name*)) (cons 'syntax-violation (cons (list 'quote aK13dd@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons aK13e2@mk '('(n* ...))))))))))))) aK13d3@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK13d1@t)))))))) (set! aK2836@aKd4a@define-enumeration-macro aKd4a@define-enumeration-macro) (set! aKd4c@time-macro (lambda (aK13e9@stx) (let ((aK13eb@t aK13e9@stx)) (let ((aK13ed@ls/false (aKd7a@syntax-dispatch aK13eb@t '(_ any)))) (if aK13ed@ls/false (apply (lambda (aK13ef@expr) (aKd30@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() aK13ef@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) aK13ed@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK13eb@t)))))) (set! aK2837@aKd4c@time-macro aKd4c@time-macro) (set! aKd4e@delay-macro (lambda (aK13f1@stx) (let ((aK13f3@t aK13f1@stx)) (let ((aK13f5@ls/false (aKd7a@syntax-dispatch aK13f3@t '(_ any)))) (if aK13f5@ls/false (apply (lambda (aK13f7@expr) (aKd30@bless (list 'make-promise (list 'lambda '() aK13f7@expr)))) aK13f5@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK13f3@t)))))) (set! aK2838@aKd4e@delay-macro aKd4e@delay-macro) (set! aKd50@assert-macro (lambda (aK13f9@stx) (let ((aK13fb@t aK13f9@stx)) (let ((aK13fd@ls/false (aKd7a@syntax-dispatch aK13fb@t '(_ any)))) (if aK13fd@ls/false (apply (lambda (aK13ff@expr) (let ((aK1401@pos (or (aKe52@expression-position aK13f9@stx) (aKe52@expression-position aK13ff@expr)))) (aKd30@bless (list 'unless aK13ff@expr (list 'assertion-error (list 'quote aK13ff@expr) (list 'quote aK1401@pos)))))) aK13fd@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK13fb@t)))))) (set! aK2839@aKd50@assert-macro aKd50@assert-macro) (set! aKd52@endianness-macro (lambda (aK1403@stx) (let ((aK1405@t aK1403@stx)) (let ((aK1407@ls/false (aKd7a@syntax-dispatch aK1405@t '(_ any)))) (if aK1407@ls/false (apply (lambda (aK1409@e) (let ((aK140b@t (aKe60@syntax->datum aK1409@e))) (if (memv aK140b@t '(little)) (aKd30@bless ''little) (if (memv aK140b@t '(big)) (aKd30@bless ''big) (aKe5a@syntax-violation '#f '"endianness must be big or little" aK1403@stx))))) aK1407@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1405@t)))))) (set! aK283a@aKd52@endianness-macro aKd52@endianness-macro) (set! aKd54@identifier-syntax-macro (lambda (aK140d@stx) (let ((aK140f@t aK140d@stx)) (let ((aK1411@ls/false (aKd7a@syntax-dispatch aK140f@t '(_ any)))) (if aK1411@ls/false (apply (lambda (aK1413@expr) (aKd30@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax aK1413@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax aK1413@expr) '((syntax (e* ...)))))))))) aK1411@ls/false) (let ((aK1415@t aK140f@t)) (let ((aK1417@ls/false (aKd7a@syntax-dispatch aK1415@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and aK1417@ls/false (apply (lambda (aK1419@id1 aK141a@expr1 aK141b@id2 aK141c@expr2 aK141d@expr3) (and (aKb73@id? aK1419@id1) (aKb73@id? aK141b@id2) (aKb73@id? aK141c@expr2))) aK1417@ls/false)) (apply (lambda (aK1423@id1 aK1424@expr1 aK1425@id2 aK1426@expr2 aK1427@expr3) (aKd30@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax aK1424@expr1)) (list (list 'set! 'id aK1426@expr2) (list 'syntax aK1427@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons aK1424@expr1 '(e* ...))))))))) aK1417@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1415@t))))))))) (set! aK283b@aKd54@identifier-syntax-macro aKd54@identifier-syntax-macro) (set! aKd56@do-macro (lambda (aK142d@stx) (let ((aK1430@bind '#f)) (begin (set! aK1430@bind (lambda (aK1447@x) (let ((aK1449@t aK1447@x)) (let ((aK144b@ls/false (aKd7a@syntax-dispatch aK1449@t '(any any)))) (if aK144b@ls/false (apply (lambda (aK144d@x aK144e@init) (list aK144d@x aK144e@init aK144d@x)) aK144b@ls/false) (let ((aK1451@t aK1449@t)) (let ((aK1453@ls/false (aKd7a@syntax-dispatch aK1451@t '(any any any)))) (if aK1453@ls/false (apply (lambda (aK1455@x aK1456@init aK1457@step) (list aK1455@x aK1456@init aK1457@step)) aK1453@ls/false) (let ((aK145b@t aK1451@t)) (let ((aK145d@ls/false (aKd7a@syntax-dispatch aK145b@t '_))) (if aK145d@ls/false (apply (lambda () (aKe5a@syntax-violation '#f '"invalid binding" aK142d@stx)) aK145d@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK145b@t)))))))))))) (let ((aK1431@t aK142d@stx)) (let ((aK1433@ls/false (aKd7a@syntax-dispatch aK1431@t '(_ each-any (any . each-any) . each-any)))) (if aK1433@ls/false (apply (lambda (aK1435@binding* aK1436@test aK1437@expr* aK1438@command*) (let ((aK143d@t (map aK1430@bind aK1435@binding*))) (let ((aK143f@ls/false (aKd7a@syntax-dispatch aK143d@t '#(each (any any any))))) (if aK143f@ls/false (apply (lambda (aK1441@x* aK1442@init* aK1443@step*) (if (aKb7b@valid-bound-ids? aK1441@x*) (aKd30@bless (list 'letrec (list (list 'loop (list 'lambda aK1441@x* (list 'if aK1436@test (cons 'begin (cons '(if #f #f) aK1437@expr*)) (cons 'begin (append aK1438@command* (list (cons 'loop aK1443@step*)))))))) (cons 'loop aK1442@init*))) (aKe5a@syntax-violation '#f '"invalid bindings" aK142d@stx))) aK143f@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK143d@t))))) aK1433@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1431@t)))))))) (set! aK283c@aKd56@do-macro aKd56@do-macro) (set! aKd58@let*-macro (lambda (aK145f@stx) (let ((aK1461@t aK145f@stx)) (let ((aK1463@ls/false (aKd7a@syntax-dispatch aK1461@t '(_ #(each (any any)) any . each-any)))) (if (and aK1463@ls/false (apply (lambda (aK1465@lhs* aK1466@rhs* aK1467@b aK1468@b*) (for-all aKb73@id? aK1465@lhs*)) aK1463@ls/false)) (apply (lambda (aK146d@lhs* aK146e@rhs* aK146f@b aK1470@b*) (aKd30@bless (let aK1477@f ((aK1475@x* (map list aK146d@lhs* aK146e@rhs*))) (if (null? aK1475@x*) (cons 'let (cons '() (cons aK146f@b aK1470@b*))) (list 'let (list (car aK1475@x*)) (aK1477@f (cdr aK1475@x*))))))) aK1463@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1461@t)))))) (set! aK283d@aKd58@let*-macro aKd58@let*-macro) (set! aKd5a@or-macro (lambda (aK1479@stx) (let ((aK147b@t aK1479@stx)) (let ((aK147d@ls/false (aKd7a@syntax-dispatch aK147b@t '(_)))) (if aK147d@ls/false (apply (lambda () '#f) aK147d@ls/false) (let ((aK147f@t aK147b@t)) (let ((aK1481@ls/false (aKd7a@syntax-dispatch aK147f@t '(_ any . each-any)))) (if aK1481@ls/false (apply (lambda (aK1483@e aK1484@e*) (aKd30@bless (let aK148b@f ((aK1487@e aK1483@e) (aK1488@e* aK1484@e*)) (if (null? aK1488@e*) (list 'begin '#f aK1487@e) (list 'let (list (list 't aK1487@e)) (list 'if 't 't (aK148b@f (car aK1488@e*) (cdr aK1488@e*)))))))) aK1481@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK147f@t))))))))) (set! aK283e@aKd5a@or-macro aKd5a@or-macro) (set! aKd5c@and-macro (lambda (aK148d@stx) (let ((aK148f@t aK148d@stx)) (let ((aK1491@ls/false (aKd7a@syntax-dispatch aK148f@t '(_)))) (if aK1491@ls/false (apply (lambda () '#t) aK1491@ls/false) (let ((aK1493@t aK148f@t)) (let ((aK1495@ls/false (aKd7a@syntax-dispatch aK1493@t '(_ any . each-any)))) (if aK1495@ls/false (apply (lambda (aK1497@e aK1498@e*) (aKd30@bless (let aK149f@f ((aK149b@e aK1497@e) (aK149c@e* aK1498@e*)) (if (null? aK149c@e*) (list 'begin '#f aK149b@e) (cons 'if (cons aK149b@e (cons (aK149f@f (car aK149c@e*) (cdr aK149c@e*)) '(#f)))))))) aK1495@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1493@t))))))))) (set! aK283f@aKd5c@and-macro aKd5c@and-macro) (set! aKd5e@cond-macro (lambda (aK14a1@stx) (let ((aK14a3@t aK14a1@stx)) (let ((aK14a5@ls/false (aKd7a@syntax-dispatch aK14a3@t '(_ any . each-any)))) (if aK14a5@ls/false (apply (lambda (aK14a7@cls aK14a8@cls*) (aKd30@bless (let aK14af@f ((aK14ab@cls aK14a7@cls) (aK14ac@cls* aK14a8@cls*)) (if (null? aK14ac@cls*) (let ((aK14b1@t aK14ab@cls)) (let ((aK14b3@ls/false (aKd7a@syntax-dispatch aK14b1@t '(#(scheme-id else) any . each-any)))) (if aK14b3@ls/false (apply (lambda (aK14b5@e aK14b6@e*) (cons 'begin (cons aK14b5@e aK14b6@e*))) aK14b3@ls/false) (let ((aK14b9@t aK14b1@t)) (let ((aK14bb@ls/false (aKd7a@syntax-dispatch aK14b9@t '(any #(scheme-id =>) any)))) (if aK14bb@ls/false (apply (lambda (aK14bd@e aK14be@p) (list 'let (list (list 't aK14bd@e)) (list 'if 't (cons aK14be@p '(t))))) aK14bb@ls/false) (let ((aK14c1@t aK14b9@t)) (let ((aK14c3@ls/false (aKd7a@syntax-dispatch aK14c1@t '(any)))) (if aK14c3@ls/false (apply (lambda (aK14c5@e) (cons 'or (cons aK14c5@e '((if #f #f))))) aK14c3@ls/false) (let ((aK14c7@t aK14c1@t)) (let ((aK14c9@ls/false (aKd7a@syntax-dispatch aK14c7@t '(any . each-any)))) (if aK14c9@ls/false (apply (lambda (aK14cb@e aK14cc@e*) (list 'if aK14cb@e (cons 'begin aK14cc@e*))) aK14c9@ls/false) (let ((aK14cf@t aK14c7@t)) (let ((aK14d1@ls/false (aKd7a@syntax-dispatch aK14cf@t '_))) (if aK14d1@ls/false (apply (lambda () (aKe5a@syntax-violation '#f '"invalid last clause" aK14a1@stx)) aK14d1@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK14cf@t)))))))))))))))) (let ((aK14d3@t aK14ab@cls)) (let ((aK14d5@ls/false (aKd7a@syntax-dispatch aK14d3@t '(#(scheme-id else) any . each-any)))) (if aK14d5@ls/false (apply (lambda (aK14d7@e aK14d8@e*) (aKe5a@syntax-violation '#f '"incorrect position of keyword else" aK14a1@stx)) aK14d5@ls/false) (let ((aK14db@t aK14d3@t)) (let ((aK14dd@ls/false (aKd7a@syntax-dispatch aK14db@t '(any #(scheme-id =>) any)))) (if aK14dd@ls/false (apply (lambda (aK14df@e aK14e0@p) (list 'let (list (list 't aK14df@e)) (list 'if 't (cons aK14e0@p '(t)) (aK14af@f (car aK14ac@cls*) (cdr aK14ac@cls*))))) aK14dd@ls/false) (let ((aK14e3@t aK14db@t)) (let ((aK14e5@ls/false (aKd7a@syntax-dispatch aK14e3@t '(any)))) (if aK14e5@ls/false (apply (lambda (aK14e7@e) (list 'or aK14e7@e (aK14af@f (car aK14ac@cls*) (cdr aK14ac@cls*)))) aK14e5@ls/false) (let ((aK14e9@t aK14e3@t)) (let ((aK14eb@ls/false (aKd7a@syntax-dispatch aK14e9@t '(any . each-any)))) (if aK14eb@ls/false (apply (lambda (aK14ed@e aK14ee@e*) (list 'if aK14ed@e (cons 'begin aK14ee@e*) (aK14af@f (car aK14ac@cls*) (cdr aK14ac@cls*)))) aK14eb@ls/false) (let ((aK14f1@t aK14e9@t)) (let ((aK14f3@ls/false (aKd7a@syntax-dispatch aK14f1@t '_))) (if aK14f3@ls/false (apply (lambda () (aKe5a@syntax-violation '#f '"invalid last clause" aK14a1@stx)) aK14f3@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK14f1@t)))))))))))))))))))) aK14a5@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK14a3@t)))))) (set! aK2840@aKd5e@cond-macro aKd5e@cond-macro) (set! aKd60@do-include (lambda (aK14f5@stx aK14f6@id aK14f7@filename) (let ((aK14fb@filename (aKb87@stx->datum aK14f7@filename))) (begin (if (not (and (string? aK14fb@filename) (aKb73@id? aK14f6@id))) (aKe5a@syntax-violation '#f '"invalid syntax" aK14f5@stx) (void)) (cons (aKd30@bless 'begin) (with-input-from-file aK14fb@filename (lambda () (let aK14ff@f ((aK14fd@ls '())) (let ((aK1501@x (aK6b0@aK582@read-annotated))) (if (eof-object? aK1501@x) (reverse aK14fd@ls) (aK14ff@f (cons (aKb53@datum->stx aK14f6@id aK1501@x) aK14fd@ls)))))))))))) (set! aK2841@aKd60@do-include aKd60@do-include) (set! aKd62@include-macro (lambda (aK1503@e) (let ((aK1505@t aK1503@e)) (let ((aK1507@ls/false (aKd7a@syntax-dispatch aK1505@t '(any any)))) (if aK1507@ls/false (apply (lambda (aK1509@id aK150a@filename) (aKd60@do-include aK1503@e aK1509@id aK150a@filename)) aK1507@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1505@t)))))) (set! aK2842@aKd62@include-macro aKd62@include-macro) (set! aKd64@include-into-macro (lambda (aK150d@e) (let ((aK150f@t aK150d@e)) (let ((aK1511@ls/false (aKd7a@syntax-dispatch aK150f@t '(_ any any)))) (if aK1511@ls/false (apply (lambda (aK1513@id aK1514@filename) (aKd60@do-include aK150d@e aK1513@id aK1514@filename)) aK1511@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK150f@t)))))) (set! aK2843@aKd64@include-into-macro aKd64@include-into-macro) (set! aKd66@syntax-rules-macro (lambda (aK1517@e) (let ((aK1519@t aK1517@e)) (let ((aK151b@ls/false (aKd7a@syntax-dispatch aK1519@t '(_ each-any . #(each (any any)))))) (if aK151b@ls/false (apply (lambda (aK151d@lits aK151e@pat* aK151f@tmp*) (begin (aKd80@verify-literals aK151d@lits aK1517@e) (aKd30@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons aK151d@lits (map (lambda (aK1523@pat aK1524@tmp) (let ((aK1527@t aK1523@pat)) (let ((aK1529@ls/false (aKd7a@syntax-dispatch aK1527@t '(_ . any)))) (if aK1529@ls/false (apply (lambda (aK152b@rest) (list (cons 'g aK152b@rest) (list 'syntax aK1524@tmp))) aK1529@ls/false) (let ((aK152d@t aK1527@t)) (let ((aK152f@ls/false (aKd7a@syntax-dispatch aK152d@t '_))) (if aK152f@ls/false (apply (lambda () (aKe5a@syntax-violation '#f '"invalid syntax-rules pattern" aK1517@e aK1523@pat)) aK152f@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK152d@t)))))))) aK151e@pat* aK151f@tmp*)))))))) aK151b@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1519@t)))))) (set! aK2844@aKd66@syntax-rules-macro aKd66@syntax-rules-macro) (set! aKd68@quasiquote-macro (let ((aK1532@datum '#f) (aK154e@quasicons* '#f) (aK1550@quasicons '#f) (aK1552@quasiappend '#f) (aK1554@quasivector '#f) (aK1556@vquasi '#f) (aK1558@quasi '#f)) (begin (set! aK1532@datum (lambda (aK1633@x) (list (aKd02@scheme-stx 'quote) (aKb5b@mkstx aK1633@x '() '() '())))) (set! aK154e@quasicons* (lambda (aK162b@x aK162c@y) (let aK1631@f ((aK162f@x aK162b@x)) (if (null? aK162f@x) aK162c@y (aK1550@quasicons (car aK162f@x) (aK1631@f (cdr aK162f@x))))))) (set! aK1550@quasicons (lambda (aK1605@x aK1606@y) (let ((aK1609@t aK1606@y)) (let ((aK160b@ls/false (aKd7a@syntax-dispatch aK1609@t '(#(scheme-id quote) any)))) (if aK160b@ls/false (apply (lambda (aK160d@dy) (let ((aK160f@t aK1605@x)) (let ((aK1611@ls/false (aKd7a@syntax-dispatch aK160f@t '(#(scheme-id quote) any)))) (if aK1611@ls/false (apply (lambda (aK1613@dx) (list (aKd02@scheme-stx 'quote) (cons aK1613@dx aK160d@dy))) aK1611@ls/false) (let ((aK1615@t aK160f@t)) (let ((aK1617@ls/false (aKd7a@syntax-dispatch aK1615@t '_))) (if aK1617@ls/false (apply (lambda () (let ((aK1619@t aK160d@dy)) (let ((aK161b@ls/false (aKd7a@syntax-dispatch aK1619@t '()))) (if aK161b@ls/false (apply (lambda () (list (aKd02@scheme-stx 'list) aK1605@x)) aK161b@ls/false) (let ((aK161d@t aK1619@t)) (let ((aK161f@ls/false (aKd7a@syntax-dispatch aK161d@t '_))) (if aK161f@ls/false (apply (lambda () (list (aKd02@scheme-stx 'cons) aK1605@x aK1606@y)) aK161f@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK161d@t)))))))) aK1617@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1615@t)))))))) aK160b@ls/false) (let ((aK1621@t aK1609@t)) (let ((aK1623@ls/false (aKd7a@syntax-dispatch aK1621@t '(#(scheme-id list) . each-any)))) (if aK1623@ls/false (apply (lambda (aK1625@stuff) (cons* (aKd02@scheme-stx 'list) aK1605@x aK1625@stuff)) aK1623@ls/false) (let ((aK1627@t aK1621@t)) (let ((aK1629@ls/false (aKd7a@syntax-dispatch aK1627@t '_))) (if aK1629@ls/false (apply (lambda () (list (aKd02@scheme-stx 'cons) aK1605@x aK1606@y)) aK1629@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1627@t)))))))))))) (set! aK1552@quasiappend (lambda (aK15eb@x aK15ec@y) (let ((aK15ef@ls (let aK15f3@f ((aK15f1@x aK15eb@x)) (if (null? aK15f1@x) (let ((aK15f5@t aK15ec@y)) (let ((aK15f7@ls/false (aKd7a@syntax-dispatch aK15f5@t '(#(scheme-id quote) ())))) (if aK15f7@ls/false (apply (lambda () '()) aK15f7@ls/false) (let ((aK15f9@t aK15f5@t)) (let ((aK15fb@ls/false (aKd7a@syntax-dispatch aK15f9@t '_))) (if aK15fb@ls/false (apply (lambda () (list aK15ec@y)) aK15fb@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK15f9@t))))))) (let ((aK15fd@t (car aK15f1@x))) (let ((aK15ff@ls/false (aKd7a@syntax-dispatch aK15fd@t '(#(scheme-id quote) ())))) (if aK15ff@ls/false (apply (lambda () (aK15f3@f (cdr aK15f1@x))) aK15ff@ls/false) (let ((aK1601@t aK15fd@t)) (let ((aK1603@ls/false (aKd7a@syntax-dispatch aK1601@t '_))) (if aK1603@ls/false (apply (lambda () (cons (car aK15f1@x) (aK15f3@f (cdr aK15f1@x)))) aK1603@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1601@t))))))))))) (if (null? aK15ef@ls) (list (aKd02@scheme-stx 'quote) '()) (if (null? (cdr aK15ef@ls)) (car aK15ef@ls) (cons* (aKd02@scheme-stx 'append) aK15ef@ls)))))) (set! aK1554@quasivector (lambda (aK15b9@x) (let ((aK15bb@pat-x aK15b9@x)) (let ((aK15bd@t aK15bb@pat-x)) (let ((aK15bf@ls/false (aKd7a@syntax-dispatch aK15bd@t '(#(scheme-id quote) each-any)))) (if aK15bf@ls/false (apply (lambda (aK15c1@x*) (list (aKd02@scheme-stx 'quote) (list->vector aK15c1@x*))) aK15bf@ls/false) (let ((aK15c3@t aK15bd@t)) (let ((aK15c5@ls/false (aKd7a@syntax-dispatch aK15c3@t '_))) (if aK15c5@ls/false (apply (lambda () (let aK15cd@f ((aK15c7@x aK15b9@x) (aK15c8@k (lambda (aK15cb@ls) (cons* (aKd02@scheme-stx 'vector) aK15cb@ls)))) (let ((aK15cf@t aK15c7@x)) (let ((aK15d1@ls/false (aKd7a@syntax-dispatch aK15cf@t '(#(scheme-id quote) each-any)))) (if aK15d1@ls/false (apply (lambda (aK15d3@x*) (aK15c8@k (map (lambda (aK15d5@x) (list (aKd02@scheme-stx 'quote) aK15d5@x)) aK15d3@x*))) aK15d1@ls/false) (let ((aK15d7@t aK15cf@t)) (let ((aK15d9@ls/false (aKd7a@syntax-dispatch aK15d7@t '(#(scheme-id list) . each-any)))) (if aK15d9@ls/false (apply (lambda (aK15db@x*) (aK15c8@k aK15db@x*)) aK15d9@ls/false) (let ((aK15dd@t aK15d7@t)) (let ((aK15df@ls/false (aKd7a@syntax-dispatch aK15dd@t '(#(scheme-id cons) any any)))) (if aK15df@ls/false (apply (lambda (aK15e1@x aK15e2@y) (aK15cd@f aK15e2@y (lambda (aK15e5@ls) (aK15c8@k (cons aK15e1@x aK15e5@ls))))) aK15df@ls/false) (let ((aK15e7@t aK15dd@t)) (let ((aK15e9@ls/false (aKd7a@syntax-dispatch aK15e7@t '_))) (if aK15e9@ls/false (apply (lambda () (list (aKd02@scheme-stx 'list->vector) aK15bb@pat-x)) aK15e9@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK15e7@t))))))))))))))) aK15c5@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK15c3@t)))))))))) (set! aK1556@vquasi (lambda (aK1597@p aK1598@lev) (let ((aK159b@t aK1597@p)) (let ((aK159d@ls/false (aKd7a@syntax-dispatch aK159b@t '(any . any)))) (if aK159d@ls/false (apply (lambda (aK159f@p aK15a0@q) (let ((aK15a3@t aK159f@p)) (let ((aK15a5@ls/false (aKd7a@syntax-dispatch aK15a3@t '(#(scheme-id unquote) . each-any)))) (if aK15a5@ls/false (apply (lambda (aK15a7@p) (if (= aK1598@lev '0) (aK154e@quasicons* aK15a7@p (aK1556@vquasi aK15a0@q aK1598@lev)) (aK1550@quasicons (aK1550@quasicons (aK1532@datum 'unquote) (aK1558@quasi aK15a7@p (- aK1598@lev '1))) (aK1556@vquasi aK15a0@q aK1598@lev)))) aK15a5@ls/false) (let ((aK15a9@t aK15a3@t)) (let ((aK15ab@ls/false (aKd7a@syntax-dispatch aK15a9@t '(#(scheme-id unquote-splicing) . each-any)))) (if aK15ab@ls/false (apply (lambda (aK15ad@p) (if (= aK1598@lev '0) (aK1552@quasiappend aK15ad@p (aK1556@vquasi aK15a0@q aK1598@lev)) (aK1550@quasicons (aK1550@quasicons (aK1532@datum 'unquote-splicing) (aK1558@quasi aK15ad@p (- aK1598@lev '1))) (aK1556@vquasi aK15a0@q aK1598@lev)))) aK15ab@ls/false) (let ((aK15af@t aK15a9@t)) (let ((aK15b1@ls/false (aKd7a@syntax-dispatch aK15af@t 'any))) (if aK15b1@ls/false (apply (lambda (aK15b3@p) (aK1550@quasicons (aK1558@quasi aK15b3@p aK1598@lev) (aK1556@vquasi aK15a0@q aK1598@lev))) aK15b1@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK15af@t))))))))))) aK159d@ls/false) (let ((aK15b5@t aK159b@t)) (let ((aK15b7@ls/false (aKd7a@syntax-dispatch aK15b5@t '()))) (if aK15b7@ls/false (apply (lambda () (list (aKd02@scheme-stx 'quote) '())) aK15b7@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK15b5@t))))))))) (set! aK1558@quasi (lambda (aK1561@p aK1562@lev) (let ((aK1565@t aK1561@p)) (let ((aK1567@ls/false (aKd7a@syntax-dispatch aK1565@t '(#(scheme-id unquote) any)))) (if aK1567@ls/false (apply (lambda (aK1569@p) (if (= aK1562@lev '0) aK1569@p (aK1550@quasicons (aK1532@datum 'unquote) (aK1558@quasi (list aK1569@p) (- aK1562@lev '1))))) aK1567@ls/false) (let ((aK156b@t aK1565@t)) (let ((aK156d@ls/false (aKd7a@syntax-dispatch aK156b@t '((#(scheme-id unquote) . each-any) . any)))) (if aK156d@ls/false (apply (lambda (aK156f@p aK1570@q) (if (= aK1562@lev '0) (aK154e@quasicons* aK156f@p (aK1558@quasi aK1570@q aK1562@lev)) (aK1550@quasicons (aK1550@quasicons (aK1532@datum 'unquote) (aK1558@quasi aK156f@p (- aK1562@lev '1))) (aK1558@quasi aK1570@q aK1562@lev)))) aK156d@ls/false) (let ((aK1573@t aK156b@t)) (let ((aK1575@ls/false (aKd7a@syntax-dispatch aK1573@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if aK1575@ls/false (apply (lambda (aK1577@p aK1578@q) (if (= aK1562@lev '0) (aK1552@quasiappend aK1577@p (aK1558@quasi aK1578@q aK1562@lev)) (aK1550@quasicons (aK1550@quasicons (aK1532@datum 'unquote-splicing) (aK1558@quasi aK1577@p (- aK1562@lev '1))) (aK1558@quasi aK1578@q aK1562@lev)))) aK1575@ls/false) (let ((aK157b@t aK1573@t)) (let ((aK157d@ls/false (aKd7a@syntax-dispatch aK157b@t '(#(scheme-id quasiquote) any)))) (if aK157d@ls/false (apply (lambda (aK157f@p) (aK1550@quasicons (aK1532@datum 'quasiquote) (aK1558@quasi (list aK157f@p) (+ aK1562@lev '1)))) aK157d@ls/false) (let ((aK1581@t aK157b@t)) (let ((aK1583@ls/false (aKd7a@syntax-dispatch aK1581@t '(any . any)))) (if aK1583@ls/false (apply (lambda (aK1585@p aK1586@q) (aK1550@quasicons (aK1558@quasi aK1585@p aK1562@lev) (aK1558@quasi aK1586@q aK1562@lev))) aK1583@ls/false) (let ((aK1589@t aK1581@t)) (let ((aK158b@ls/false (aKd7a@syntax-dispatch aK1589@t '#(vector each-any)))) (if (and aK158b@ls/false (apply (lambda (aK158d@x) (not (aKb3f@stx? aK158d@x))) aK158b@ls/false)) (apply (lambda (aK158f@x) (aK1554@quasivector (aK1556@vquasi aK158f@x aK1562@lev))) aK158b@ls/false) (let ((aK1591@t aK1589@t)) (let ((aK1593@ls/false (aKd7a@syntax-dispatch aK1591@t 'any))) (if aK1593@ls/false (apply (lambda (aK1595@p) (list (aKd02@scheme-stx 'quote) aK1595@p)) aK1593@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1591@t)))))))))))))))))))))))) (lambda (aK1559@x) (let ((aK155b@t aK1559@x)) (let ((aK155d@ls/false (aKd7a@syntax-dispatch aK155b@t '(_ any)))) (if aK155d@ls/false (apply (lambda (aK155f@e) (aK1558@quasi aK155f@e '0)) aK155d@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK155b@t)))))))) (set! aK2845@aKd68@quasiquote-macro aKd68@quasiquote-macro) (set! aKd6a@quasisyntax-macro (let ((aK1636@quasi '#f)) (begin (set! aK1636@quasi (lambda (aK1651@p aK1652@lev) (let ((aK1655@t aK1651@p)) (let ((aK1657@ls/false (aKd7a@syntax-dispatch aK1655@t '(#(scheme-id unsyntax) any)))) (if aK1657@ls/false (apply (lambda (aK1659@p) (if (= aK1652@lev '0) (let ((aK165b@g (gensym))) (values (list aK165b@g) (list aK1659@p) aK165b@g)) (call-with-values (lambda () (aK1636@quasi aK1659@p (- aK1652@lev '1))) (lambda (aK1663@aK165e aK1664@aK1660 aK1665@aK1662) (let ((aK1669@p aK1665@aK1662) (aK166a@rhs* aK1664@aK1660) (aK166b@lhs* aK1663@aK165e)) (values aK166b@lhs* aK166a@rhs* (list 'unsyntax aK1669@p))))))) aK1657@ls/false) (let ((aK166f@t aK1655@t)) (let ((aK1671@ls/false (aKd7a@syntax-dispatch aK166f@t '#(scheme-id unsyntax)))) (if (and aK1671@ls/false (apply (lambda () (= aK1652@lev '0)) aK1671@ls/false)) (apply (lambda () (aKe5a@syntax-violation '#f '"incorrect use of unsyntax" aK1651@p)) aK1671@ls/false) (let ((aK1673@t aK166f@t)) (let ((aK1675@ls/false (aKd7a@syntax-dispatch aK1673@t '((#(scheme-id unsyntax) . each-any) . any)))) (if aK1675@ls/false (apply (lambda (aK1677@p* aK1678@q) (call-with-values (lambda () (aK1636@quasi aK1678@q aK1652@lev)) (lambda (aK1681@aK167c aK1682@aK167e aK1683@aK1680) (let ((aK1687@q aK1683@aK1680) (aK1688@rhs* aK1682@aK167e) (aK1689@lhs* aK1681@aK167c)) (if (= aK1652@lev '0) (let ((aK168d@g* (map (lambda (aK168f@x) (gensym)) aK1677@p*))) (values (append aK168d@g* aK1689@lhs*) (append aK1677@p* aK1688@rhs*) (append aK168d@g* aK1687@q))) (call-with-values (lambda () (aK1636@quasi aK1677@p* (- aK1652@lev '1))) (lambda (aK1697@aK1692 aK1698@aK1694 aK1699@aK1696) (let ((aK169d@p* aK1699@aK1696) (aK169e@rhs2* aK1698@aK1694) (aK169f@lhs2* aK1697@aK1692)) (values (append aK169f@lhs2* aK1689@lhs*) (append aK169e@rhs2* aK1688@rhs*) (cons (cons 'unsyntax aK169d@p*) aK1687@q)))))))))) aK1675@ls/false) (let ((aK16a3@t aK1673@t)) (let ((aK16a5@ls/false (aKd7a@syntax-dispatch aK16a3@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if aK16a5@ls/false (apply (lambda (aK16a7@p* aK16a8@q) (call-with-values (lambda () (aK1636@quasi aK16a8@q aK1652@lev)) (lambda (aK16b1@aK16ac aK16b2@aK16ae aK16b3@aK16b0) (let ((aK16b7@q aK16b3@aK16b0) (aK16b8@rhs* aK16b2@aK16ae) (aK16b9@lhs* aK16b1@aK16ac)) (if (= aK1652@lev '0) (let ((aK16bd@g* (map (lambda (aK16bf@x) (gensym)) aK16a7@p*))) (values (append (map (lambda (aK16c1@g) (cons aK16c1@g '(...))) aK16bd@g*) aK16b9@lhs*) (append aK16a7@p* aK16b8@rhs*) (append (apply append (map (lambda (aK16c3@g) (cons aK16c3@g '(...))) aK16bd@g*)) aK16b7@q))) (call-with-values (lambda () (aK1636@quasi aK16a7@p* (- aK1652@lev '1))) (lambda (aK16cb@aK16c6 aK16cc@aK16c8 aK16cd@aK16ca) (let ((aK16d1@p* aK16cd@aK16ca) (aK16d2@rhs2* aK16cc@aK16c8) (aK16d3@lhs2* aK16cb@aK16c6)) (values (append aK16d3@lhs2* aK16b9@lhs*) (append aK16d2@rhs2* aK16b8@rhs*) (cons (cons 'unsyntax-splicing aK16d1@p*) aK16b7@q)))))))))) aK16a5@ls/false) (let ((aK16d7@t aK16a3@t)) (let ((aK16d9@ls/false (aKd7a@syntax-dispatch aK16d7@t '#(scheme-id unsyntax-splicing)))) (if (and aK16d9@ls/false (apply (lambda () (= aK1652@lev '0)) aK16d9@ls/false)) (apply (lambda () (aKe5a@syntax-violation '#f '"incorrect use of unsyntax-splicing" aK1651@p)) aK16d9@ls/false) (let ((aK16db@t aK16d7@t)) (let ((aK16dd@ls/false (aKd7a@syntax-dispatch aK16db@t '(#(scheme-id quasisyntax) any)))) (if aK16dd@ls/false (apply (lambda (aK16df@p) (call-with-values (lambda () (aK1636@quasi aK16df@p (+ aK1652@lev '1))) (lambda (aK16e7@aK16e2 aK16e8@aK16e4 aK16e9@aK16e6) (let ((aK16ed@p aK16e9@aK16e6) (aK16ee@rhs* aK16e8@aK16e4) (aK16ef@lhs* aK16e7@aK16e2)) (values aK16ef@lhs* aK16ee@rhs* (list 'quasisyntax aK16ed@p)))))) aK16dd@ls/false) (let ((aK16f3@t aK16db@t)) (let ((aK16f5@ls/false (aKd7a@syntax-dispatch aK16f3@t '(any . any)))) (if aK16f5@ls/false (apply (lambda (aK16f7@p aK16f8@q) (call-with-values (lambda () (aK1636@quasi aK16f7@p aK1652@lev)) (lambda (aK1707@aK16fc aK1708@aK16fe aK1709@aK1700) (call-with-values (lambda () (aK1636@quasi aK16f8@q aK1652@lev)) (lambda (aK170d@aK1702 aK170e@aK1704 aK170f@aK1706) (let ((aK1713@q aK170f@aK1706) (aK1714@rhs2* aK170e@aK1704) (aK1715@lhs2* aK170d@aK1702) (aK1716@p aK1709@aK1700) (aK1717@rhs* aK1708@aK16fe) (aK1718@lhs* aK1707@aK16fc)) (values (append aK1715@lhs2* aK1718@lhs*) (append aK1714@rhs2* aK1717@rhs*) (cons aK1716@p aK1713@q)))))))) aK16f5@ls/false) (let ((aK171f@t aK16f3@t)) (let ((aK1721@ls/false (aKd7a@syntax-dispatch aK171f@t '#(vector each-any)))) (if aK1721@ls/false (apply (lambda (aK1723@x*) (call-with-values (lambda () (aK1636@quasi aK1723@x* aK1652@lev)) (lambda (aK172b@aK1726 aK172c@aK1728 aK172d@aK172a) (let ((aK1731@x* aK172d@aK172a) (aK1732@rhs* aK172c@aK1728) (aK1733@lhs* aK172b@aK1726)) (values aK1733@lhs* aK1732@rhs* (list->vector aK1731@x*)))))) aK1721@ls/false) (let ((aK1737@t aK171f@t)) (let ((aK1739@ls/false (aKd7a@syntax-dispatch aK1737@t '_))) (if aK1739@ls/false (apply (lambda () (values '() '() aK1651@p)) aK1739@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1737@t)))))))))))))))))))))))))))))) (lambda (aK1637@x) (let ((aK1639@t aK1637@x)) (let ((aK163b@ls/false (aKd7a@syntax-dispatch aK1639@t '(_ any)))) (if aK163b@ls/false (apply (lambda (aK163d@e) (call-with-values (lambda () (aK1636@quasi aK163d@e '0)) (lambda (aK1645@aK1640 aK1646@aK1642 aK1647@aK1644) (let ((aK164b@v aK1647@aK1644) (aK164c@rhs* aK1646@aK1642) (aK164d@lhs* aK1645@aK1640)) (aKd30@bless (list 'syntax-case (cons 'list aK164c@rhs*) '() (list aK164d@lhs* (list 'syntax aK164b@v)))))))) aK163b@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1639@t)))))))) (set! aK2846@aKd6a@quasisyntax-macro aKd6a@quasisyntax-macro) (set! aKd6c@define-struct-macro (lambda (aK173b@stx) (aKe5a@syntax-violation '#f '"define-struct not supported" aK173b@stx))) (set! aK2847@aKd6c@define-struct-macro aKd6c@define-struct-macro) (set! aKd6e@define-record-type-macro (lambda (aK173d@x) (let ((aK1740@id '#f) (aK1742@get-record-name '#f) (aK1744@get-record-constructor-name '#f) (aK1746@get-record-predicate-name '#f) (aK1748@get-clause '#f) (aK174a@foo-rtd-code '#f) (aK174c@parent-rtd-code '#f) (aK174e@parent-rcd-code '#f) (aK1750@foo-rcd-code '#f) (aK1752@get-protocol-code '#f) (aK1754@get-fields '#f) (aK1756@get-mutator-indices '#f) (aK1758@get-mutators '#f) (aK175a@get-accessors '#f) (aK175c@enumerate '#f) (aK175e@do-define-record '#f) (aK1760@verify-clauses '#f)) (begin (set! aK1740@id (lambda (aK1933@ctxt . aK1935@str*) (aKe5e@datum->syntax aK1933@ctxt (string->symbol (apply string-append (map (lambda (aK1937@x) (if (symbol? aK1937@x) (symbol->string aK1937@x) (if (string? aK1937@x) aK1937@x (assertion-violation 'define-record-type '"BUG")))) aK1935@str*)))))) (set! aK1742@get-record-name (lambda (aK1921@spec) (let ((aK1923@t aK1921@spec)) (let ((aK1925@ls/false (aKd7a@syntax-dispatch aK1923@t '(any any any)))) (if aK1925@ls/false (apply (lambda (aK1927@foo aK1928@make-foo aK1929@foo?) aK1927@foo) aK1925@ls/false) (let ((aK192d@t aK1923@t)) (let ((aK192f@ls/false (aKd7a@syntax-dispatch aK192d@t 'any))) (if aK192f@ls/false (apply (lambda (aK1931@foo) aK1931@foo) aK192f@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK192d@t))))))))) (set! aK1744@get-record-constructor-name (lambda (aK190d@spec) (let ((aK190f@t aK190d@spec)) (let ((aK1911@ls/false (aKd7a@syntax-dispatch aK190f@t '(any any any)))) (if aK1911@ls/false (apply (lambda (aK1913@foo aK1914@make-foo aK1915@foo?) aK1914@make-foo) aK1911@ls/false) (let ((aK1919@t aK190f@t)) (let ((aK191b@ls/false (aKd7a@syntax-dispatch aK1919@t 'any))) (if (and aK191b@ls/false (apply (lambda (aK191d@foo) (aKb73@id? aK191d@foo)) aK191b@ls/false)) (apply (lambda (aK191f@foo) (aK1740@id aK191f@foo '"make-" (aKb87@stx->datum aK191f@foo))) aK191b@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1919@t))))))))) (set! aK1746@get-record-predicate-name (lambda (aK18f9@spec) (let ((aK18fb@t aK18f9@spec)) (let ((aK18fd@ls/false (aKd7a@syntax-dispatch aK18fb@t '(any any any)))) (if aK18fd@ls/false (apply (lambda (aK18ff@foo aK1900@make-foo aK1901@foo?) aK1901@foo?) aK18fd@ls/false) (let ((aK1905@t aK18fb@t)) (let ((aK1907@ls/false (aKd7a@syntax-dispatch aK1905@t 'any))) (if (and aK1907@ls/false (apply (lambda (aK1909@foo) (aKb73@id? aK1909@foo)) aK1907@ls/false)) (apply (lambda (aK190b@foo) (aK1740@id aK190b@foo (aKb87@stx->datum aK190b@foo) '"?")) aK1907@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1905@t))))))))) (set! aK1748@get-clause (lambda (aK18e7@id aK18e8@ls) (let ((aK18eb@t aK18e8@ls)) (let ((aK18ed@ls/false (aKd7a@syntax-dispatch aK18eb@t '()))) (if aK18ed@ls/false (apply (lambda () '#f) aK18ed@ls/false) (let ((aK18ef@t aK18eb@t)) (let ((aK18f1@ls/false (aKd7a@syntax-dispatch aK18ef@t '((any . any) . any)))) (if aK18f1@ls/false (apply (lambda (aK18f3@x aK18f4@rest aK18f5@ls) (if (aKb79@free-id=? (aKd30@bless aK18e7@id) aK18f3@x) (cons aK18f3@x aK18f4@rest) (aK1748@get-clause aK18e7@id aK18f5@ls))) aK18f1@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK18ef@t))))))))) (set! aK174a@foo-rtd-code (lambda (aK1895@name aK1896@clause* aK1897@parent-rtd-code) (let ((aK189c@convert-field-spec* '#f)) (begin (set! aK189c@convert-field-spec* (lambda (aK18cd@ls) (list->vector (map (lambda (aK18cf@x) (let ((aK18d1@t aK18cf@x)) (let ((aK18d3@ls/false (aKd7a@syntax-dispatch aK18d1@t '(#(scheme-id mutable) any . any)))) (if aK18d3@ls/false (apply (lambda (aK18d5@name aK18d6@rest) (list 'mutable aK18d5@name)) aK18d3@ls/false) (let ((aK18d9@t aK18d1@t)) (let ((aK18db@ls/false (aKd7a@syntax-dispatch aK18d9@t '(#(scheme-id immutable) any . any)))) (if aK18db@ls/false (apply (lambda (aK18dd@name aK18de@rest) (list 'immutable aK18dd@name)) aK18db@ls/false) (let ((aK18e1@t aK18d9@t)) (let ((aK18e3@ls/false (aKd7a@syntax-dispatch aK18e1@t 'any))) (if aK18e3@ls/false (apply (lambda (aK18e5@name) (list 'immutable aK18e5@name)) aK18e3@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK18e1@t))))))))))) aK18cd@ls)))) (let ((aK189d@uid-code (let ((aK18a5@t (aK1748@get-clause 'nongenerative aK1896@clause*))) (let ((aK18a7@ls/false (aKd7a@syntax-dispatch aK18a5@t '(_)))) (if aK18a7@ls/false (apply (lambda () (list 'quote (gensym))) aK18a7@ls/false) (let ((aK18a9@t aK18a5@t)) (let ((aK18ab@ls/false (aKd7a@syntax-dispatch aK18a9@t '(_ any)))) (if aK18ab@ls/false (apply (lambda (aK18ad@uid) (list 'quote aK18ad@uid)) aK18ab@ls/false) (let ((aK18af@t aK18a9@t)) (let ((aK18b1@ls/false (aKd7a@syntax-dispatch aK18af@t '_))) (if aK18b1@ls/false (apply (lambda () '#f) aK18b1@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK18af@t))))))))))) (aK189e@sealed? (let ((aK18b3@t (aK1748@get-clause 'sealed aK1896@clause*))) (let ((aK18b5@ls/false (aKd7a@syntax-dispatch aK18b3@t '(_ #(atom #t))))) (if aK18b5@ls/false (apply (lambda () '#t) aK18b5@ls/false) (let ((aK18b7@t aK18b3@t)) (let ((aK18b9@ls/false (aKd7a@syntax-dispatch aK18b7@t '_))) (if aK18b9@ls/false (apply (lambda () '#f) aK18b9@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK18b7@t)))))))) (aK189f@opaque? (let ((aK18bb@t (aK1748@get-clause 'opaque aK1896@clause*))) (let ((aK18bd@ls/false (aKd7a@syntax-dispatch aK18bb@t '(_ #(atom #t))))) (if aK18bd@ls/false (apply (lambda () '#t) aK18bd@ls/false) (let ((aK18bf@t aK18bb@t)) (let ((aK18c1@ls/false (aKd7a@syntax-dispatch aK18bf@t '_))) (if aK18c1@ls/false (apply (lambda () '#f) aK18c1@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK18bf@t)))))))) (aK18a0@fields (let ((aK18c3@t (aK1748@get-clause 'fields aK1896@clause*))) (let ((aK18c5@ls/false (aKd7a@syntax-dispatch aK18c3@t '(_ . each-any)))) (if aK18c5@ls/false (apply (lambda (aK18c7@field-spec*) (list 'quote (aK189c@convert-field-spec* aK18c7@field-spec*))) aK18c5@ls/false) (let ((aK18c9@t aK18c3@t)) (let ((aK18cb@ls/false (aKd7a@syntax-dispatch aK18c9@t '_))) (if aK18cb@ls/false (apply (lambda () ''#()) aK18cb@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK18c9@t))))))))) (aKd30@bless (list 'make-record-type-descriptor (list 'quote aK1895@name) aK1897@parent-rtd-code aK189d@uid-code aK189e@sealed? aK189f@opaque? aK18a0@fields))))))) (set! aK174c@parent-rtd-code (lambda (aK187d@clause*) (let ((aK187f@t (aK1748@get-clause 'parent aK187d@clause*))) (let ((aK1881@ls/false (aKd7a@syntax-dispatch aK187f@t '(_ any)))) (if aK1881@ls/false (apply (lambda (aK1883@name) (list 'record-type-descriptor aK1883@name)) aK1881@ls/false) (let ((aK1885@t aK187f@t)) (let ((aK1887@ls/false (aKd7a@syntax-dispatch aK1885@t '#(atom #f)))) (if aK1887@ls/false (apply (lambda () (let ((aK1889@t (aK1748@get-clause 'parent-rtd aK187d@clause*))) (let ((aK188b@ls/false (aKd7a@syntax-dispatch aK1889@t '(_ any any)))) (if aK188b@ls/false (apply (lambda (aK188d@rtd aK188e@rcd) aK188d@rtd) aK188b@ls/false) (let ((aK1891@t aK1889@t)) (let ((aK1893@ls/false (aKd7a@syntax-dispatch aK1891@t '#(atom #f)))) (if aK1893@ls/false (apply (lambda () '#f) aK1893@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1891@t)))))))) aK1887@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1885@t))))))))) (set! aK174e@parent-rcd-code (lambda (aK1865@clause*) (let ((aK1867@t (aK1748@get-clause 'parent aK1865@clause*))) (let ((aK1869@ls/false (aKd7a@syntax-dispatch aK1867@t '(_ any)))) (if aK1869@ls/false (apply (lambda (aK186b@name) (list 'record-constructor-descriptor aK186b@name)) aK1869@ls/false) (let ((aK186d@t aK1867@t)) (let ((aK186f@ls/false (aKd7a@syntax-dispatch aK186d@t '#(atom #f)))) (if aK186f@ls/false (apply (lambda () (let ((aK1871@t (aK1748@get-clause 'parent-rtd aK1865@clause*))) (let ((aK1873@ls/false (aKd7a@syntax-dispatch aK1871@t '(_ any any)))) (if aK1873@ls/false (apply (lambda (aK1875@rtd aK1876@rcd) aK1876@rcd) aK1873@ls/false) (let ((aK1879@t aK1871@t)) (let ((aK187b@ls/false (aKd7a@syntax-dispatch aK1879@t '#(atom #f)))) (if aK187b@ls/false (apply (lambda () '#f) aK187b@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1879@t)))))))) aK186f@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK186d@t))))))))) (set! aK1750@foo-rcd-code (lambda (aK185d@clause* aK185e@foo-rtd aK185f@protocol aK1860@parent-rcd-code) (list 'make-record-constructor-descriptor aK185e@foo-rtd aK1860@parent-rcd-code aK185f@protocol))) (set! aK1752@get-protocol-code (lambda (aK1851@clause*) (let ((aK1853@t (aK1748@get-clause 'protocol aK1851@clause*))) (let ((aK1855@ls/false (aKd7a@syntax-dispatch aK1853@t '(_ any)))) (if aK1855@ls/false (apply (lambda (aK1857@expr) aK1857@expr) aK1855@ls/false) (let ((aK1859@t aK1853@t)) (let ((aK185b@ls/false (aKd7a@syntax-dispatch aK1859@t '_))) (if aK185b@ls/false (apply (lambda () '#f) aK185b@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1859@t))))))))) (set! aK1754@get-fields (lambda (aK183f@clause*) (let ((aK1841@t aK183f@clause*)) (let ((aK1843@ls/false (aKd7a@syntax-dispatch aK1841@t '()))) (if aK1843@ls/false (apply (lambda () '()) aK1843@ls/false) (let ((aK1845@t aK1841@t)) (let ((aK1847@ls/false (aKd7a@syntax-dispatch aK1845@t '((#(scheme-id fields) . each-any) . _)))) (if aK1847@ls/false (apply (lambda (aK1849@f*) aK1849@f*) aK1847@ls/false) (let ((aK184b@t aK1845@t)) (let ((aK184d@ls/false (aKd7a@syntax-dispatch aK184b@t '(_ . any)))) (if aK184d@ls/false (apply (lambda (aK184f@rest) (aK1754@get-fields aK184f@rest)) aK184d@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK184b@t)))))))))))) (set! aK1756@get-mutator-indices (lambda (aK1827@fields) (let aK182d@f ((aK1829@fields aK1827@fields) (aK182a@i '0)) (let ((aK182f@t aK1829@fields)) (let ((aK1831@ls/false (aKd7a@syntax-dispatch aK182f@t '()))) (if aK1831@ls/false (apply (lambda () '()) aK1831@ls/false) (let ((aK1833@t aK182f@t)) (let ((aK1835@ls/false (aKd7a@syntax-dispatch aK1833@t '((#(scheme-id mutable) . _) . any)))) (if aK1835@ls/false (apply (lambda (aK1837@rest) (cons aK182a@i (aK182d@f aK1837@rest (+ aK182a@i '1)))) aK1835@ls/false) (let ((aK1839@t aK1833@t)) (let ((aK183b@ls/false (aKd7a@syntax-dispatch aK1839@t '(_ . any)))) (if aK183b@ls/false (apply (lambda (aK183d@rest) (aK182d@f aK183d@rest (+ aK182a@i '1))) aK183b@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1839@t))))))))))))) (set! aK1758@get-mutators (lambda (aK17fd@foo aK17fe@fields) (let ((aK1802@gen-name '#f)) (begin (set! aK1802@gen-name (lambda (aK1825@x) (aKe5e@datum->syntax aK17fd@foo (string->symbol (string-append (symbol->string (aKe60@syntax->datum aK17fd@foo)) '"-" (symbol->string (aKe60@syntax->datum aK1825@x)) '"-set!"))))) (let aK1805@f ((aK1803@fields aK17fe@fields)) (let ((aK1807@t aK1803@fields)) (let ((aK1809@ls/false (aKd7a@syntax-dispatch aK1807@t '()))) (if aK1809@ls/false (apply (lambda () '()) aK1809@ls/false) (let ((aK180b@t aK1807@t)) (let ((aK180d@ls/false (aKd7a@syntax-dispatch aK180b@t '((#(scheme-id mutable) any any any) . any)))) (if aK180d@ls/false (apply (lambda (aK180f@name aK1810@accessor aK1811@mutator aK1812@rest) (cons aK1811@mutator (aK1805@f aK1812@rest))) aK180d@ls/false) (let ((aK1817@t aK180b@t)) (let ((aK1819@ls/false (aKd7a@syntax-dispatch aK1817@t '((#(scheme-id mutable) any) . any)))) (if aK1819@ls/false (apply (lambda (aK181b@name aK181c@rest) (cons (aK1802@gen-name aK181b@name) (aK1805@f aK181c@rest))) aK1819@ls/false) (let ((aK181f@t aK1817@t)) (let ((aK1821@ls/false (aKd7a@syntax-dispatch aK181f@t '(_ . any)))) (if aK1821@ls/false (apply (lambda (aK1823@rest) (aK1805@f aK1823@rest)) aK1821@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK181f@t)))))))))))))))))) (set! aK175a@get-accessors (lambda (aK17b9@foo aK17ba@fields) (let ((aK17be@gen-name '#f)) (begin (set! aK17be@gen-name (lambda (aK17fb@x) (aKe5e@datum->syntax aK17b9@foo (string->symbol (string-append (symbol->string (aKe60@syntax->datum aK17b9@foo)) '"-" (symbol->string (aKe60@syntax->datum aK17fb@x))))))) (map (lambda (aK17bf@field) (let ((aK17c1@t aK17bf@field)) (let ((aK17c3@ls/false (aKd7a@syntax-dispatch aK17c1@t '(#(scheme-id mutable) any any any)))) (if (and aK17c3@ls/false (apply (lambda (aK17c5@name aK17c6@accessor aK17c7@mutator) (aKb73@id? aK17c6@accessor)) aK17c3@ls/false)) (apply (lambda (aK17cb@name aK17cc@accessor aK17cd@mutator) aK17cc@accessor) aK17c3@ls/false) (let ((aK17d1@t aK17c1@t)) (let ((aK17d3@ls/false (aKd7a@syntax-dispatch aK17d1@t '(#(scheme-id immutable) any any)))) (if (and aK17d3@ls/false (apply (lambda (aK17d5@name aK17d6@accessor) (aKb73@id? aK17d6@accessor)) aK17d3@ls/false)) (apply (lambda (aK17d9@name aK17da@accessor) aK17da@accessor) aK17d3@ls/false) (let ((aK17dd@t aK17d1@t)) (let ((aK17df@ls/false (aKd7a@syntax-dispatch aK17dd@t '(#(scheme-id mutable) any)))) (if (and aK17df@ls/false (apply (lambda (aK17e1@name) (aKb73@id? aK17e1@name)) aK17df@ls/false)) (apply (lambda (aK17e3@name) (aK17be@gen-name aK17e3@name)) aK17df@ls/false) (let ((aK17e5@t aK17dd@t)) (let ((aK17e7@ls/false (aKd7a@syntax-dispatch aK17e5@t '(#(scheme-id immutable) any)))) (if (and aK17e7@ls/false (apply (lambda (aK17e9@name) (aKb73@id? aK17e9@name)) aK17e7@ls/false)) (apply (lambda (aK17eb@name) (aK17be@gen-name aK17eb@name)) aK17e7@ls/false) (let ((aK17ed@t aK17e5@t)) (let ((aK17ef@ls/false (aKd7a@syntax-dispatch aK17ed@t 'any))) (if (and aK17ef@ls/false (apply (lambda (aK17f1@name) (aKb73@id? aK17f1@name)) aK17ef@ls/false)) (apply (lambda (aK17f3@name) (aK17be@gen-name aK17f3@name)) aK17ef@ls/false) (let ((aK17f5@t aK17ed@t)) (let ((aK17f7@ls/false (aKd7a@syntax-dispatch aK17f5@t 'any))) (if aK17f7@ls/false (apply (lambda (aK17f9@others) (aKe5a@syntax-violation '#f '"invalid field spec" aK17bf@field)) aK17f7@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK17f5@t)))))))))))))))))))) aK17ba@fields))))) (set! aK175c@enumerate (lambda (aK17b1@ls) (let aK17b7@f ((aK17b3@ls aK17b1@ls) (aK17b4@i '0)) (if (null? aK17b3@ls) '() (cons aK17b4@i (aK17b7@f (cdr aK17b3@ls) (+ aK17b4@i '1))))))) (set! aK175e@do-define-record (lambda (aK1789@namespec aK178a@clause*) (let ((aK178d@foo (aK1742@get-record-name aK1789@namespec))) (let ((aK178f@foo-rtd (gensym))) (let ((aK1791@foo-rcd (gensym))) (let ((aK1793@protocol (gensym))) (let ((aK1795@make-foo (aK1744@get-record-constructor-name aK1789@namespec))) (let ((aK1797@fields (aK1754@get-fields aK178a@clause*))) (let ((aK1799@idx* (aK175c@enumerate aK1797@fields))) (let ((aK179b@foo-x* (aK175a@get-accessors aK178d@foo aK1797@fields))) (let ((aK179d@set-foo-x!* (aK1758@get-mutators aK178d@foo aK1797@fields))) (let ((aK179f@set-foo-idx* (aK1756@get-mutator-indices aK1797@fields))) (let ((aK17a1@foo? (aK1746@get-record-predicate-name aK1789@namespec))) (let ((aK17a3@foo-rtd-code (aK174a@foo-rtd-code aK178d@foo aK178a@clause* (aK174c@parent-rtd-code aK178a@clause*)))) (let ((aK17a5@foo-rcd-code (aK1750@foo-rcd-code aK178a@clause* aK178f@foo-rtd aK1793@protocol (aK174e@parent-rcd-code aK178a@clause*)))) (let ((aK17a7@protocol-code (aK1752@get-protocol-code aK178a@clause*))) (aKd30@bless (cons 'begin (cons (list 'define aK178f@foo-rtd aK17a3@foo-rtd-code) (cons (list 'define aK1793@protocol aK17a7@protocol-code) (cons (list 'define aK1791@foo-rcd aK17a5@foo-rcd-code) (cons (list 'define-syntax aK178d@foo (list 'list ''$rtd (list 'syntax aK178f@foo-rtd) (list 'syntax aK1791@foo-rcd))) (cons (list 'define aK17a1@foo? (list 'record-predicate aK178f@foo-rtd)) (cons (list 'define aK1795@make-foo (list 'record-constructor aK1791@foo-rcd)) (append (map (lambda (aK17a9@foo-x aK17aa@idx) (list 'define aK17a9@foo-x (list 'record-accessor aK178f@foo-rtd aK17aa@idx))) aK179b@foo-x* aK1799@idx*) (map (lambda (aK17ad@set-foo-x! aK17ae@idx) (list 'define aK17ad@set-foo-x! (list 'record-mutator aK178f@foo-rtd aK17ae@idx))) aK179d@set-foo-x!* aK179f@set-foo-idx*)))))))))))))))))))))))))) (set! aK1760@verify-clauses (lambda (aK1769@x aK176a@cls*) (let ((aK176e@valid-kwds '#f) (aK1770@free-id-member? '#f)) (begin (set! aK176e@valid-kwds (map aKd30@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! aK1770@free-id-member? (lambda (aK1785@x aK1786@ls) (and (pair? aK1786@ls) (or (aKb79@free-id=? aK1785@x (car aK1786@ls)) (aK1770@free-id-member? aK1785@x (cdr aK1786@ls)))))) (let aK1775@f ((aK1771@cls* aK176a@cls*) (aK1772@seen* '())) (if (not (null? aK1771@cls*)) (let ((aK1777@t (car aK1771@cls*))) (let ((aK1779@ls/false (aKd7a@syntax-dispatch aK1777@t '(any . any)))) (if aK1779@ls/false (apply (lambda (aK177b@kwd aK177c@rest) (if (or (not (aKb73@id? aK177b@kwd)) (not (aK1770@free-id-member? aK177b@kwd aK176e@valid-kwds))) (aKe5a@syntax-violation '#f '"not a valid define-record-type keyword" aK177b@kwd) (if (aKb7f@bound-id-member? aK177b@kwd aK1772@seen*) (aKe5a@syntax-violation '#f '"duplicate use of keyword " aK1769@x aK177b@kwd) (aK1775@f (cdr aK1771@cls*) (cons aK177b@kwd aK1772@seen*))))) aK1779@ls/false) (let ((aK177f@t aK1777@t)) (let ((aK1781@ls/false (aKd7a@syntax-dispatch aK177f@t 'any))) (if aK1781@ls/false (apply (lambda (aK1783@cls) (aKe5a@syntax-violation '#f '"malformed define-record-type clause" aK1783@cls)) aK1781@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK177f@t))))))) (void))))))) (let ((aK1761@t aK173d@x)) (let ((aK1763@ls/false (aKd7a@syntax-dispatch aK1761@t '(_ any . each-any)))) (if aK1763@ls/false (apply (lambda (aK1765@namespec aK1766@clause*) (begin (aK1760@verify-clauses aK173d@x aK1766@clause*) (aK175e@do-define-record aK1765@namespec aK1766@clause*))) aK1763@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1761@t)))))))) (set! aK2848@aKd6e@define-record-type-macro aKd6e@define-record-type-macro) (set! aKd70@define-condition-type-macro (lambda (aK1939@x) (let ((aK193c@mkname '#f)) (begin (set! aK193c@mkname (lambda (aK1969@name aK196a@suffix) (aKe5e@datum->syntax aK1969@name (string->symbol (string-append (symbol->string (aKe60@syntax->datum aK1969@name)) aK196a@suffix))))) (let ((aK193d@t aK1939@x)) (let ((aK193f@ls/false (aKd7a@syntax-dispatch aK193d@t '(any any any any any . #(each (any any)))))) (if (and aK193f@ls/false (apply (lambda (aK1941@ctxt aK1942@name aK1943@super aK1944@constructor aK1945@predicate aK1946@field* aK1947@accessor*) (and (aKb73@id? aK1942@name) (aKb73@id? aK1943@super) (aKb73@id? aK1944@constructor) (aKb73@id? aK1945@predicate) (for-all aKb73@id? aK1946@field*) (for-all aKb73@id? aK1947@accessor*))) aK193f@ls/false)) (apply (lambda (aK194f@ctxt aK1950@name aK1951@super aK1952@constructor aK1953@predicate aK1954@field* aK1955@accessor*) (let ((aK195d@aux-accessor* (map (lambda (aK195f@x) (gensym)) aK1955@accessor*))) (aKd30@bless (cons 'begin (cons (cons 'define-record-type (cons (list aK1950@name aK1952@constructor (gensym)) (cons (list 'parent aK1951@super) (cons (cons 'fields (map (lambda (aK1961@field aK1962@aux) (list 'immutable aK1961@field aK1962@aux)) aK1954@field* aK195d@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define aK1953@predicate (list 'condition-predicate (list 'record-type-descriptor aK1950@name))) (map (lambda (aK1965@accessor aK1966@aux) (list 'define aK1965@accessor (list 'condition-accessor (list 'record-type-descriptor aK1950@name) aK1966@aux))) aK1955@accessor* aK195d@aux-accessor*))))))) aK193f@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK193d@t)))))))) (set! aK2849@aKd70@define-condition-type-macro aKd70@define-condition-type-macro) (set! aKd72@incorrect-usage-macro (lambda (aK196d@e) (aKe5a@syntax-violation '#f '"incorrect usage of auxiliary keyword" aK196d@e))) (set! aK284a@aKd72@incorrect-usage-macro aKd72@incorrect-usage-macro) (set! aKd74@parameterize-macro (lambda (aK196f@e) (let ((aK1971@t aK196f@e)) (let ((aK1973@ls/false (aKd7a@syntax-dispatch aK1971@t '(_ () any . each-any)))) (if aK1973@ls/false (apply (lambda (aK1975@b aK1976@b*) (aKd30@bless (cons 'let (cons '() (cons aK1975@b aK1976@b*))))) aK1973@ls/false) (let ((aK1979@t aK1971@t)) (let ((aK197b@ls/false (aKd7a@syntax-dispatch aK1979@t '(_ #(each (any any)) any . each-any)))) (if aK197b@ls/false (apply (lambda (aK197d@olhs* aK197e@orhs* aK197f@b aK1980@b*) (let ((aK1985@lhs* (aKe48@generate-temporaries aK197d@olhs*)) (aK1986@rhs* (aKe48@generate-temporaries aK197e@orhs*))) (aKd30@bless (cons (list 'lambda (append aK1985@lhs* aK1986@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (aK1989@lhs aK198a@rhs) (list 'let (list (list 't (list aK1989@lhs))) (list aK1989@lhs aK198a@rhs) (cons 'set! (cons aK198a@rhs '(t))))) aK1985@lhs* aK1986@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons aK197f@b aK1980@b*))) '(swap)))))) (append aK197d@olhs* aK197e@orhs*))))) aK197b@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1979@t))))))))) (set! aK284b@aKd74@parameterize-macro aKd74@parameterize-macro) (set! aKd76@foreign-call-transformer (lambda (aK198d@e aK198e@r aK198f@mr) (let ((aK1993@t aK198d@e)) (let ((aK1995@ls/false (aKd7a@syntax-dispatch aK1993@t '(_ any . each-any)))) (if aK1995@ls/false (apply (lambda (aK1997@name aK1998@arg*) (cons 'foreign-call (cons (aKd9c@chi-expr aK1997@name aK198e@r aK198f@mr) (aKd98@chi-expr* aK1998@arg* aK198e@r aK198f@mr)))) aK1995@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1993@t)))))) (set! aK284c@aKd76@foreign-call-transformer aKd76@foreign-call-transformer) (set! aKd78@convert-pattern (lambda (aK199b@pattern aK199c@keys) (let ((aK19a0@cvt* '#f) (aK19a2@cvt '#f)) (begin (set! aK19a0@cvt* (lambda (aK1a3f@p* aK1a40@n aK1a41@ids) (if (null? aK1a3f@p*) (values '() aK1a41@ids) (call-with-values (lambda () (aK19a0@cvt* (cdr aK1a3f@p*) aK1a40@n aK1a41@ids)) (lambda (aK1a49@aK1a46 aK1a4a@aK1a48) (let ((aK1a4d@ids aK1a4a@aK1a48) (aK1a4e@y aK1a49@aK1a46)) (call-with-values (lambda () (aK19a2@cvt (car aK1a3f@p*) aK1a40@n aK1a4d@ids)) (lambda (aK1a55@aK1a52 aK1a56@aK1a54) (let ((aK1a59@ids aK1a56@aK1a54) (aK1a5a@x aK1a55@aK1a52)) (values (cons aK1a5a@x aK1a4e@y) aK1a59@ids)))))))))) (set! aK19a2@cvt (lambda (aK19a3@p aK19a4@n aK19a5@ids) (let ((aK19a9@t aK19a3@p)) (let ((aK19ab@ls/false (aKd7a@syntax-dispatch aK19a9@t 'any))) (if (and aK19ab@ls/false (apply (lambda (aK19ad@id) (aKb73@id? aK19ad@id)) aK19ab@ls/false)) (apply (lambda (aK19af@id) (if (aKb7f@bound-id-member? aK19a3@p aK199c@keys) (values (vector 'free-id aK19a3@p) aK19a5@ids) (if (aKb79@free-id=? aK19a3@p (aKd02@scheme-stx '_)) (values '_ aK19a5@ids) (values 'any (cons (cons aK19a3@p aK19a4@n) aK19a5@ids))))) aK19ab@ls/false) (let ((aK19b1@t aK19a9@t)) (let ((aK19b3@ls/false (aKd7a@syntax-dispatch aK19b1@t '(any any)))) (if (and aK19b3@ls/false (apply (lambda (aK19b5@p aK19b6@dots) (aKd7c@ellipsis? aK19b6@dots)) aK19b3@ls/false)) (apply (lambda (aK19b9@p aK19ba@dots) (call-with-values (lambda () (aK19a2@cvt aK19b9@p (+ aK19a4@n '1) aK19a5@ids)) (lambda (aK19c1@aK19be aK19c2@aK19c0) (let ((aK19c5@ids aK19c2@aK19c0) (aK19c6@p aK19c1@aK19be)) (values (if (eq? aK19c6@p 'any) 'each-any (vector 'each aK19c6@p)) aK19c5@ids))))) aK19b3@ls/false) (let ((aK19c9@t aK19b1@t)) (let ((aK19cb@ls/false (aKd7a@syntax-dispatch aK19c9@t '(any any . #(each+ any () any))))) (if (and aK19cb@ls/false (apply (lambda (aK19cd@x aK19ce@dots aK19cf@ys aK19d0@z) (aKd7c@ellipsis? aK19ce@dots)) aK19cb@ls/false)) (apply (lambda (aK19d5@x aK19d6@dots aK19d7@ys aK19d8@z) (call-with-values (lambda () (aK19a2@cvt aK19d8@z aK19a4@n aK19a5@ids)) (lambda (aK19e1@aK19de aK19e2@aK19e0) (let ((aK19e5@ids aK19e2@aK19e0) (aK19e6@z aK19e1@aK19de)) (call-with-values (lambda () (aK19a0@cvt* aK19d7@ys aK19a4@n aK19e5@ids)) (lambda (aK19ed@aK19ea aK19ee@aK19ec) (let ((aK19f1@ids aK19ee@aK19ec) (aK19f2@ys aK19ed@aK19ea)) (call-with-values (lambda () (aK19a2@cvt aK19d5@x (+ aK19a4@n '1) aK19f1@ids)) (lambda (aK19f9@aK19f6 aK19fa@aK19f8) (let ((aK19fd@ids aK19fa@aK19f8) (aK19fe@x aK19f9@aK19f6)) (values (vector 'each+ aK19fe@x (reverse aK19f2@ys) aK19e6@z) aK19fd@ids))))))))))) aK19cb@ls/false) (let ((aK1a01@t aK19c9@t)) (let ((aK1a03@ls/false (aKd7a@syntax-dispatch aK1a01@t '(any . any)))) (if aK1a03@ls/false (apply (lambda (aK1a05@x aK1a06@y) (call-with-values (lambda () (aK19a2@cvt aK1a06@y aK19a4@n aK19a5@ids)) (lambda (aK1a0d@aK1a0a aK1a0e@aK1a0c) (let ((aK1a11@ids aK1a0e@aK1a0c) (aK1a12@y aK1a0d@aK1a0a)) (call-with-values (lambda () (aK19a2@cvt aK1a05@x aK19a4@n aK1a11@ids)) (lambda (aK1a19@aK1a16 aK1a1a@aK1a18) (let ((aK1a1d@ids aK1a1a@aK1a18) (aK1a1e@x aK1a19@aK1a16)) (values (cons aK1a1e@x aK1a12@y) aK1a1d@ids)))))))) aK1a03@ls/false) (let ((aK1a21@t aK1a01@t)) (let ((aK1a23@ls/false (aKd7a@syntax-dispatch aK1a21@t '()))) (if aK1a23@ls/false (apply (lambda () (values '() aK19a5@ids)) aK1a23@ls/false) (let ((aK1a25@t aK1a21@t)) (let ((aK1a27@ls/false (aKd7a@syntax-dispatch aK1a25@t '#(vector each-any)))) (if (and aK1a27@ls/false (apply (lambda (aK1a29@p) (not (aKb3f@stx? aK1a29@p))) aK1a27@ls/false)) (apply (lambda (aK1a2b@p) (call-with-values (lambda () (aK19a2@cvt aK1a2b@p aK19a4@n aK19a5@ids)) (lambda (aK1a31@aK1a2e aK1a32@aK1a30) (let ((aK1a35@ids aK1a32@aK1a30) (aK1a36@p aK1a31@aK1a2e)) (values (vector 'vector aK1a36@p) aK1a35@ids))))) aK1a27@ls/false) (let ((aK1a39@t aK1a25@t)) (let ((aK1a3b@ls/false (aKd7a@syntax-dispatch aK1a39@t 'any))) (if aK1a3b@ls/false (apply (lambda (aK1a3d@datum) (values (vector 'atom (aKb87@stx->datum aK1a3d@datum)) aK19a5@ids)) aK1a3b@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1a39@t)))))))))))))))))))))))) (aK19a2@cvt aK199b@pattern '0 '()))))) (set! aK284d@aKd78@convert-pattern aKd78@convert-pattern) (set! aKd7a@syntax-dispatch (let ((aK1a5e@stx^ '#f) (aK1a60@match-each '#f) (aK1a62@match-each+ '#f) (aK1a64@match-each-any '#f) (aK1a66@match-empty '#f) (aK1a68@combine '#f) (aK1a6a@match* '#f) (aK1a6c@match '#f)) (begin (set! aK1a5e@stx^ (lambda (aK1b39@e aK1b3a@m* aK1b3b@s* aK1b3c@ae*) (if (and (null? aK1b3a@m*) (null? aK1b3b@s*) (null? aK1b3c@ae*)) aK1b39@e (aKb5b@mkstx aK1b39@e aK1b3a@m* aK1b3b@s* aK1b3c@ae*)))) (set! aK1a60@match-each (lambda (aK1b19@e aK1b1a@p aK1b1b@m* aK1b1c@s* aK1b1d@ae*) (if (pair? aK1b19@e) (let ((aK1b23@first (aK1a6c@match (car aK1b19@e) aK1b1a@p aK1b1b@m* aK1b1c@s* aK1b1d@ae* '()))) (and aK1b23@first (let ((aK1b25@rest (aK1a60@match-each (cdr aK1b19@e) aK1b1a@p aK1b1b@m* aK1b1c@s* aK1b1d@ae*))) (and aK1b25@rest (cons aK1b23@first aK1b25@rest))))) (if (null? aK1b19@e) '() (if (aKb3f@stx? aK1b19@e) (and (not (aKaf9@top-marked? aK1b1b@m*)) (call-with-values (lambda () (join-wraps aK1b1b@m* aK1b1c@s* aK1b1d@ae* aK1b19@e)) (lambda (aK1b2d@aK1b28 aK1b2e@aK1b2a aK1b2f@aK1b2c) (let ((aK1b33@ae* aK1b2f@aK1b2c) (aK1b34@s* aK1b2e@aK1b2a) (aK1b35@m* aK1b2d@aK1b28)) (aK1a60@match-each (aKb41@stx-expr aK1b19@e) aK1b1a@p aK1b35@m* aK1b34@s* aK1b33@ae*))))) (if (aK6b2@aK586@annotation? aK1b19@e) (aK1a60@match-each (aK6b4@aK58a@annotation-expression aK1b19@e) aK1b1a@p aK1b1b@m* aK1b1c@s* aK1b1d@ae*) '#f)))))) (set! aK1a62@match-each+ (lambda (aK1ad9@e aK1ada@x-pat aK1adb@y-pat aK1adc@z-pat aK1add@m* aK1ade@s* aK1adf@ae* aK1ae0@r) (let aK1af1@f ((aK1ae9@e aK1ad9@e) (aK1aea@m* aK1add@m*) (aK1aeb@s* aK1ade@s*) (aK1aec@ae* aK1adf@ae*)) (if (pair? aK1ae9@e) (call-with-values (lambda () (aK1af1@f (cdr aK1ae9@e) aK1aea@m* aK1aeb@s* aK1aec@ae*)) (lambda (aK1af9@aK1af4 aK1afa@aK1af6 aK1afb@aK1af8) (let ((aK1aff@r aK1afb@aK1af8) (aK1b00@y-pat aK1afa@aK1af6) (aK1b01@xr* aK1af9@aK1af4)) (if aK1aff@r (if (null? aK1b00@y-pat) (let ((aK1b05@xr (aK1a6c@match (car aK1ae9@e) aK1ada@x-pat aK1aea@m* aK1aeb@s* aK1aec@ae* '()))) (if aK1b05@xr (values (cons aK1b05@xr aK1b01@xr*) aK1b00@y-pat aK1aff@r) (values '#f '#f '#f))) (values '() (cdr aK1b00@y-pat) (aK1a6c@match (car aK1ae9@e) (car aK1b00@y-pat) aK1aea@m* aK1aeb@s* aK1aec@ae* aK1aff@r))) (values '#f '#f '#f))))) (if (aKb3f@stx? aK1ae9@e) (if (aKaf9@top-marked? aK1aea@m*) (values '() aK1adb@y-pat (aK1a6c@match aK1ae9@e aK1adc@z-pat aK1aea@m* aK1aeb@s* aK1aec@ae* aK1ae0@r)) (call-with-values (lambda () (join-wraps aK1aea@m* aK1aeb@s* aK1aec@ae* aK1ae9@e)) (lambda (aK1b0d@aK1b08 aK1b0e@aK1b0a aK1b0f@aK1b0c) (let ((aK1b13@ae* aK1b0f@aK1b0c) (aK1b14@s* aK1b0e@aK1b0a) (aK1b15@m* aK1b0d@aK1b08)) (aK1af1@f (aKb41@stx-expr aK1ae9@e) aK1b15@m* aK1b14@s* aK1b13@ae*))))) (if (aK6b2@aK586@annotation? aK1ae9@e) (aK1af1@f (aK6b4@aK58a@annotation-expression aK1ae9@e) aK1aea@m* aK1aeb@s* aK1aec@ae*) (values '() aK1adb@y-pat (aK1a6c@match aK1ae9@e aK1adc@z-pat aK1aea@m* aK1aeb@s* aK1aec@ae* aK1ae0@r)))))))) (set! aK1a64@match-each-any (lambda (aK1abd@e aK1abe@m* aK1abf@s* aK1ac0@ae*) (if (pair? aK1abd@e) (let ((aK1ac5@l (aK1a64@match-each-any (cdr aK1abd@e) aK1abe@m* aK1abf@s* aK1ac0@ae*))) (and aK1ac5@l (cons (aK1a5e@stx^ (car aK1abd@e) aK1abe@m* aK1abf@s* aK1ac0@ae*) aK1ac5@l))) (if (null? aK1abd@e) '() (if (aKb3f@stx? aK1abd@e) (and (not (aKaf9@top-marked? aK1abe@m*)) (call-with-values (lambda () (join-wraps aK1abe@m* aK1abf@s* aK1ac0@ae* aK1abd@e)) (lambda (aK1acd@aK1ac8 aK1ace@aK1aca aK1acf@aK1acc) (let ((aK1ad3@ae* aK1acf@aK1acc) (aK1ad4@s* aK1ace@aK1aca) (aK1ad5@m* aK1acd@aK1ac8)) (aK1a64@match-each-any (aKb41@stx-expr aK1abd@e) aK1ad5@m* aK1ad4@s* aK1ad3@ae*))))) (if (aK6b2@aK586@annotation? aK1abd@e) (aK1a64@match-each-any (aK6b4@aK58a@annotation-expression aK1abd@e) aK1abe@m* aK1abf@s* aK1ac0@ae*) '#f)))))) (set! aK1a66@match-empty (lambda (aK1ab7@p aK1ab8@r) (if (null? aK1ab7@p) aK1ab8@r (if (eq? aK1ab7@p '_) aK1ab8@r (if (eq? aK1ab7@p 'any) (cons '() aK1ab8@r) (if (pair? aK1ab7@p) (aK1a66@match-empty (car aK1ab7@p) (aK1a66@match-empty (cdr aK1ab7@p) aK1ab8@r)) (if (eq? aK1ab7@p 'each-any) (cons '() aK1ab8@r) (let ((aK1abb@t (vector-ref aK1ab7@p '0))) (if (memv aK1abb@t '(each)) (aK1a66@match-empty (vector-ref aK1ab7@p '1) aK1ab8@r) (if (memv aK1abb@t '(each+)) (aK1a66@match-empty (vector-ref aK1ab7@p '1) (aK1a66@match-empty (reverse (vector-ref aK1ab7@p '2)) (aK1a66@match-empty (vector-ref aK1ab7@p '3) aK1ab8@r))) (if (memv aK1abb@t '(free-id atom)) aK1ab8@r (if (memv aK1abb@t '(scheme-id atom)) aK1ab8@r (if (memv aK1abb@t '(vector)) (aK1a66@match-empty (vector-ref aK1ab7@p '1) aK1ab8@r) (assertion-violation 'syntax-dispatch '"invalid pattern" aK1ab7@p)))))))))))))) (set! aK1a68@combine (lambda (aK1ab3@r* aK1ab4@r) (if (null? (car aK1ab3@r*)) aK1ab4@r (cons (map car aK1ab3@r*) (aK1a68@combine (map cdr aK1ab3@r*) aK1ab4@r))))) (set! aK1a6a@match* (lambda (aK1a8f@e aK1a90@p aK1a91@m* aK1a92@s* aK1a93@ae* aK1a94@r) (if (null? aK1a90@p) (and (null? aK1a8f@e) aK1a94@r) (if (pair? aK1a90@p) (and (pair? aK1a8f@e) (aK1a6c@match (car aK1a8f@e) (car aK1a90@p) aK1a91@m* aK1a92@s* aK1a93@ae* (aK1a6c@match (cdr aK1a8f@e) (cdr aK1a90@p) aK1a91@m* aK1a92@s* aK1a93@ae* aK1a94@r))) (if (eq? aK1a90@p 'each-any) (let ((aK1a9b@l (aK1a64@match-each-any aK1a8f@e aK1a91@m* aK1a92@s* aK1a93@ae*))) (and aK1a9b@l (cons aK1a9b@l aK1a94@r))) (let ((aK1a9d@t (vector-ref aK1a90@p '0))) (if (memv aK1a9d@t '(each)) (if (null? aK1a8f@e) (aK1a66@match-empty (vector-ref aK1a90@p '1) aK1a94@r) (let ((aK1a9f@r* (aK1a60@match-each aK1a8f@e (vector-ref aK1a90@p '1) aK1a91@m* aK1a92@s* aK1a93@ae*))) (and aK1a9f@r* (aK1a68@combine aK1a9f@r* aK1a94@r)))) (if (memv aK1a9d@t '(free-id)) (and (symbol? aK1a8f@e) (aKaf9@top-marked? aK1a91@m*) (aKb79@free-id=? (aK1a5e@stx^ aK1a8f@e aK1a91@m* aK1a92@s* aK1a93@ae*) (vector-ref aK1a90@p '1)) aK1a94@r) (if (memv aK1a9d@t '(scheme-id)) (and (symbol? aK1a8f@e) (aKaf9@top-marked? aK1a91@m*) (aKb79@free-id=? (aK1a5e@stx^ aK1a8f@e aK1a91@m* aK1a92@s* aK1a93@ae*) (aKd02@scheme-stx (vector-ref aK1a90@p '1))) aK1a94@r) (if (memv aK1a9d@t '(each+)) (call-with-values (lambda () (aK1a62@match-each+ aK1a8f@e (vector-ref aK1a90@p '1) (vector-ref aK1a90@p '2) (vector-ref aK1a90@p '3) aK1a91@m* aK1a92@s* aK1a93@ae* aK1a94@r)) (lambda (aK1aa7@aK1aa2 aK1aa8@aK1aa4 aK1aa9@aK1aa6) (let ((aK1aad@r aK1aa9@aK1aa6) (aK1aae@y-pat aK1aa8@aK1aa4) (aK1aaf@xr* aK1aa7@aK1aa2)) (and aK1aad@r (null? aK1aae@y-pat) (if (null? aK1aaf@xr*) (aK1a66@match-empty (vector-ref aK1a90@p '1) aK1aad@r) (aK1a68@combine aK1aaf@xr* aK1aad@r)))))) (if (memv aK1a9d@t '(atom)) (and (fast-equal? (vector-ref aK1a90@p '1) (aKb85@strip aK1a8f@e aK1a91@m*)) aK1a94@r) (if (memv aK1a9d@t '(vector)) (and (vector? aK1a8f@e) (aK1a6c@match (vector->list aK1a8f@e) (vector-ref aK1a90@p '1) aK1a91@m* aK1a92@s* aK1a93@ae* aK1a94@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" aK1a90@p))))))))))))) (set! aK1a6c@match (lambda (aK1a71@e aK1a72@p aK1a73@m* aK1a74@s* aK1a75@ae* aK1a76@r) (if (not aK1a76@r) '#f (if (eq? aK1a72@p '_) aK1a76@r (if (eq? aK1a72@p 'any) (cons (aK1a5e@stx^ aK1a71@e aK1a73@m* aK1a74@s* aK1a75@ae*) aK1a76@r) (if (aKb3f@stx? aK1a71@e) (and (not (aKaf9@top-marked? aK1a73@m*)) (call-with-values (lambda () (join-wraps aK1a73@m* aK1a74@s* aK1a75@ae* aK1a71@e)) (lambda (aK1a83@aK1a7e aK1a84@aK1a80 aK1a85@aK1a82) (let ((aK1a89@ae* aK1a85@aK1a82) (aK1a8a@s* aK1a84@aK1a80) (aK1a8b@m* aK1a83@aK1a7e)) (aK1a6c@match (aKb41@stx-expr aK1a71@e) aK1a72@p aK1a8b@m* aK1a8a@s* aK1a89@ae* aK1a76@r))))) (if (aK6b2@aK586@annotation? aK1a71@e) (aK1a6c@match (aK6b4@aK58a@annotation-expression aK1a71@e) aK1a72@p aK1a73@m* aK1a74@s* aK1a75@ae* aK1a76@r) (aK1a6a@match* aK1a71@e aK1a72@p aK1a73@m* aK1a74@s* aK1a75@ae* aK1a76@r)))))))) (lambda (aK1a6d@e aK1a6e@p) (aK1a6c@match aK1a6d@e aK1a6e@p '() '() '() '()))))) (set! aK284e@aKd7a@syntax-dispatch aKd7a@syntax-dispatch) (set! aKd7c@ellipsis? (lambda (aK1b41@x) (and (aKb73@id? aK1b41@x) (aKb79@free-id=? aK1b41@x (aKd02@scheme-stx '...))))) (set! aK284f@aKd7c@ellipsis? aKd7c@ellipsis?) (set! aKd7e@underscore? (lambda (aK1b43@x) (and (aKb73@id? aK1b43@x) (aKb79@free-id=? aK1b43@x (aKd02@scheme-stx '_))))) (set! aK2850@aKd7e@underscore? aKd7e@underscore?) (set! aKd80@verify-literals (lambda (aK1b45@lits aK1b46@expr) (for-each (lambda (aK1b49@x) (if (or (not (aKb73@id? aK1b49@x)) (aKd7c@ellipsis? aK1b49@x) (aKd7e@underscore? aK1b49@x)) (aKe5a@syntax-violation '#f '"invalid literal" aK1b46@expr aK1b49@x) (void))) aK1b45@lits))) (set! aK2851@aKd80@verify-literals aKd80@verify-literals) (set! aKd82@syntax-case-transformer (let ((aK1b4c@build-dispatch-call '#f) (aK1b4e@invalid-ids-error '#f) (aK1b50@gen-clause '#f) (aK1b52@gen-syntax-case '#f)) (begin (set! aK1b4c@build-dispatch-call (lambda (aK1bbd@pvars aK1bbe@expr aK1bbf@y aK1bc0@r aK1bc1@mr) (let ((aK1bc7@ids (map car aK1bbd@pvars)) (aK1bc8@levels (map cdr aK1bbd@pvars))) (let ((aK1bcb@labels (map aKaff@gen-label aK1bc7@ids)) (aK1bcc@new-vars (map aKafb@gen-lexical aK1bc7@ids))) (let ((aK1bcf@body (aKd9c@chi-expr (aKb5f@add-subst (aKb33@make-full-rib aK1bc7@ids aK1bcb@labels) aK1bbe@expr) (append (map (lambda (aK1bd1@label aK1bd2@var aK1bd3@level) (cons aK1bd1@label (aKb8d@make-binding 'syntax (cons aK1bd2@var aK1bd3@level)))) aK1bcb@labels aK1bcc@new-vars (map cdr aK1bbd@pvars)) aK1bc0@r) aK1bc1@mr))) (list '(primitive apply) (aKad6@aKa02@build-lambda '#f aK1bcc@new-vars aK1bcf@body) aK1bbf@y)))))) (set! aK1b4e@invalid-ids-error (lambda (aK1bb1@id* aK1bb2@e aK1bb3@class) (let aK1bbb@find ((aK1bb7@id* aK1bb1@id*) (aK1bb8@ok* '())) (if (null? aK1bb7@id*) (aKe5a@syntax-violation '#f '"invalid syntax" aK1bb2@e) (if (aKb73@id? (car aK1bb7@id*)) (if (aKb7f@bound-id-member? (car aK1bb7@id*) aK1bb8@ok*) (aKe56@syntax-error (car aK1bb7@id*) '"duplicate " aK1bb3@class) (aK1bbb@find (cdr aK1bb7@id*) (cons (car aK1bb7@id*) aK1bb8@ok*))) (aKe56@syntax-error (car aK1bb7@id*) '"invalid " aK1bb3@class)))))) (set! aK1b50@gen-clause (lambda (aK1b89@x aK1b8a@keys aK1b8b@clauses aK1b8c@r aK1b8d@mr aK1b8e@pat aK1b8f@fender aK1b90@expr) (call-with-values (lambda () (aKd78@convert-pattern aK1b8e@pat aK1b8a@keys)) (lambda (aK1b9d@aK1b9a aK1b9e@aK1b9c) (let ((aK1ba1@pvars aK1b9e@aK1b9c) (aK1ba2@p aK1b9d@aK1b9a)) (if (not (aKb7d@distinct-bound-ids? (map car aK1ba1@pvars))) (aK1b4e@invalid-ids-error (map car aK1ba1@pvars) aK1b8e@pat '"pattern variable") (if (not (for-all (lambda (aK1ba5@x) (not (aKd7c@ellipsis? (car aK1ba5@x)))) aK1ba1@pvars)) (aKe5a@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" aK1b8e@pat) (let ((aK1ba7@y (aKafb@gen-lexical 'tmp))) (let ((aK1ba9@test (if (eq? aK1b8f@fender '#t) aK1ba7@y (let ((aK1bab@call (aK1b4c@build-dispatch-call aK1ba1@pvars aK1b8f@fender aK1ba7@y aK1b8c@r aK1b8d@mr))) (list 'if aK1ba7@y aK1bab@call (list 'quote '#f)))))) (let ((aK1bad@conseq (aK1b4c@build-dispatch-call aK1ba1@pvars aK1b90@expr aK1ba7@y aK1b8c@r aK1b8d@mr))) (let ((aK1baf@altern (aK1b52@gen-syntax-case aK1b89@x aK1b8a@keys aK1b8b@clauses aK1b8c@r aK1b8d@mr))) (list (aKad6@aKa02@build-lambda '#f (list aK1ba7@y) (list 'if aK1ba9@test aK1bad@conseq aK1baf@altern)) (list '(primitive syntax-dispatch) aK1b89@x (list 'quote aK1ba2@p)))))))))))))) (set! aK1b52@gen-syntax-case (lambda (aK1b67@x aK1b68@keys aK1b69@clauses aK1b6a@r aK1b6b@mr) (if (null? aK1b69@clauses) (list '(primitive syntax-error) aK1b67@x) (let ((aK1b71@t (car aK1b69@clauses))) (let ((aK1b73@ls/false (aKd7a@syntax-dispatch aK1b71@t '(any any)))) (if aK1b73@ls/false (apply (lambda (aK1b75@pat aK1b76@expr) (if (and (aKb73@id? aK1b75@pat) (not (aKb7f@bound-id-member? aK1b75@pat aK1b68@keys)) (not (aKd7c@ellipsis? aK1b75@pat))) (if (aKb79@free-id=? aK1b75@pat (aKd02@scheme-stx '_)) (aKd9c@chi-expr aK1b76@expr aK1b6a@r aK1b6b@mr) (let ((aK1b79@lab (aKaff@gen-label aK1b75@pat)) (aK1b7a@lex (aKafb@gen-lexical aK1b75@pat))) (let ((aK1b7d@body (aKd9c@chi-expr (aKb5f@add-subst (aKb33@make-full-rib (list aK1b75@pat) (list aK1b79@lab)) aK1b76@expr) (cons (cons aK1b79@lab (aKb8d@make-binding 'syntax (cons aK1b7a@lex '0))) aK1b6a@r) aK1b6b@mr))) (list (aKad6@aKa02@build-lambda '#f (list aK1b7a@lex) aK1b7d@body) aK1b67@x)))) (aK1b50@gen-clause aK1b67@x aK1b68@keys (cdr aK1b69@clauses) aK1b6a@r aK1b6b@mr aK1b75@pat '#t aK1b76@expr))) aK1b73@ls/false) (let ((aK1b7f@t aK1b71@t)) (let ((aK1b81@ls/false (aKd7a@syntax-dispatch aK1b7f@t '(any any any)))) (if aK1b81@ls/false (apply (lambda (aK1b83@pat aK1b84@fender aK1b85@expr) (aK1b50@gen-clause aK1b67@x aK1b68@keys (cdr aK1b69@clauses) aK1b6a@r aK1b6b@mr aK1b83@pat aK1b84@fender aK1b85@expr)) aK1b81@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1b7f@t)))))))))) (lambda (aK1b53@e aK1b54@r aK1b55@mr) (let ((aK1b59@t aK1b53@e)) (let ((aK1b5b@ls/false (aKd7a@syntax-dispatch aK1b59@t '(_ any each-any . each-any)))) (if aK1b5b@ls/false (apply (lambda (aK1b5d@expr aK1b5e@keys aK1b5f@clauses) (begin (aKd80@verify-literals aK1b5e@keys aK1b53@e) (let ((aK1b63@x (aKafb@gen-lexical 'tmp))) (let ((aK1b65@body (aK1b52@gen-syntax-case aK1b63@x aK1b5e@keys aK1b5f@clauses aK1b54@r aK1b55@mr))) (list (aKad6@aKa02@build-lambda '#f (list aK1b63@x) aK1b65@body) (aKd9c@chi-expr aK1b5d@expr aK1b54@r aK1b55@mr)))))) aK1b5b@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1b59@t)))))))) (set! aK2852@aKd82@syntax-case-transformer aKd82@syntax-case-transformer) (set! aKd84@ellipsis-map (lambda (aK1bd7@proc aK1bd8@ls . aK1bdb@ls*) (let ((aK1bde@who '#f)) (begin (set! aK1bde@who '...) (begin (if (not (list? aK1bd8@ls)) (assertion-violation aK1bde@who '"not a list" aK1bd8@ls) (void)) (if (not (null? aK1bdb@ls*)) (let ((aK1bdf@n (length aK1bd8@ls))) (for-each (lambda (aK1be1@x) (begin (if (not (list? aK1be1@x)) (assertion-violation aK1bde@who '"not a list" aK1be1@x) (void)) (if (not (= (length aK1be1@x) aK1bdf@n)) (assertion-violation aK1bde@who '"length mismatch" aK1bd8@ls aK1be1@x) (void)))) aK1bdb@ls*)) (void)) (apply map aK1bd7@proc aK1bd8@ls aK1bdb@ls*)))))) (set! aK2853@aKd84@ellipsis-map aKd84@ellipsis-map) (set! aKd86@syntax-transformer (let ((aK1be4@gen-syntax '#f) (aK1be6@gen-ref '#f) (aK1be8@gen-append '#f) (aK1bea@gen-mappend '#f) (aK1bec@gen-map '#f) (aK1bee@gen-cons '#f) (aK1bf0@gen-vector '#f) (aK1bf2@regen '#f)) (begin (set! aK1be4@gen-syntax (lambda (aK1c5b@src aK1c5c@e aK1c5d@r aK1c5e@maps aK1c5f@ellipsis? aK1c60@vec?) (let ((aK1c67@t aK1c5c@e)) (let ((aK1c69@ls/false (aKd7a@syntax-dispatch aK1c67@t 'any))) (if (and aK1c69@ls/false (apply (lambda (aK1c6b@dots) (aK1c5f@ellipsis? aK1c6b@dots)) aK1c69@ls/false)) (apply (lambda (aK1c6d@dots) (aKe5a@syntax-violation '#f '"misplaced ellipsis in syntax form" aK1c5b@src)) aK1c69@ls/false) (let ((aK1c6f@t aK1c67@t)) (let ((aK1c71@ls/false (aKd7a@syntax-dispatch aK1c6f@t 'any))) (if (and aK1c71@ls/false (apply (lambda (aK1c73@id) (aKb73@id? aK1c73@id)) aK1c71@ls/false)) (apply (lambda (aK1c75@id) (let ((aK1c77@label (aKb89@id->label aK1c5c@e))) (let ((aK1c79@b (aKb8b@label->binding aK1c77@label aK1c5d@r))) (if (eq? (aKb8f@binding-type aK1c79@b) 'syntax) (call-with-values (lambda () (let ((aK1c7f@var.lev (aKb91@binding-value aK1c79@b))) (aK1be6@gen-ref aK1c5b@src (car aK1c7f@var.lev) (cdr aK1c7f@var.lev) aK1c5e@maps))) (lambda (aK1c81@aK1c7c aK1c82@aK1c7e) (let ((aK1c85@maps aK1c82@aK1c7e) (aK1c86@var aK1c81@aK1c7c)) (values (list 'ref aK1c86@var) aK1c85@maps)))) (values (list 'quote aK1c5c@e) aK1c5e@maps))))) aK1c71@ls/false) (let ((aK1c89@t aK1c6f@t)) (let ((aK1c8b@ls/false (aKd7a@syntax-dispatch aK1c89@t '(any any)))) (if (and aK1c8b@ls/false (apply (lambda (aK1c8d@dots aK1c8e@e) (aK1c5f@ellipsis? aK1c8d@dots)) aK1c8b@ls/false)) (apply (lambda (aK1c91@dots aK1c92@e) (if aK1c60@vec? (aKe5a@syntax-violation '#f '"misplaced ellipsis in syntax form" aK1c5b@src) (aK1be4@gen-syntax aK1c5b@src aK1c92@e aK1c5d@r aK1c5e@maps (lambda (aK1c95@x) '#f) '#f))) aK1c8b@ls/false) (let ((aK1c97@t aK1c89@t)) (let ((aK1c99@ls/false (aKd7a@syntax-dispatch aK1c97@t '(any any . any)))) (if (and aK1c99@ls/false (apply (lambda (aK1c9b@x aK1c9c@dots aK1c9d@y) (aK1c5f@ellipsis? aK1c9c@dots)) aK1c99@ls/false)) (apply (lambda (aK1ca1@x aK1ca2@dots aK1ca3@y) (let aK1cb9@f ((aK1ca7@y aK1ca3@y) (aK1ca8@k (lambda (aK1cab@maps) (call-with-values (lambda () (aK1be4@gen-syntax aK1c5b@src aK1ca1@x aK1c5d@r (cons '() aK1cab@maps) aK1c5f@ellipsis? '#f)) (lambda (aK1cb1@aK1cae aK1cb2@aK1cb0) (let ((aK1cb5@maps aK1cb2@aK1cb0) (aK1cb6@x aK1cb1@aK1cae)) (if (null? (car aK1cb5@maps)) (aKe5a@syntax-violation '#f '"extra ellipsis in syntax form" aK1c5b@src) (values (aK1bec@gen-map aK1cb6@x (car aK1cb5@maps)) (cdr aK1cb5@maps))))))))) (let ((aK1cbb@t aK1ca7@y)) (let ((aK1cbd@ls/false (aKd7a@syntax-dispatch aK1cbb@t '()))) (if aK1cbd@ls/false (apply (lambda () (aK1ca8@k aK1c5e@maps)) aK1cbd@ls/false) (let ((aK1cbf@t aK1cbb@t)) (let ((aK1cc1@ls/false (aKd7a@syntax-dispatch aK1cbf@t '(any . any)))) (if (and aK1cc1@ls/false (apply (lambda (aK1cc3@dots aK1cc4@y) (aK1c5f@ellipsis? aK1cc3@dots)) aK1cc1@ls/false)) (apply (lambda (aK1cc7@dots aK1cc8@y) (aK1cb9@f aK1cc8@y (lambda (aK1ccb@maps) (call-with-values (lambda () (aK1ca8@k (cons '() aK1ccb@maps))) (lambda (aK1cd1@aK1cce aK1cd2@aK1cd0) (let ((aK1cd5@maps aK1cd2@aK1cd0) (aK1cd6@x aK1cd1@aK1cce)) (if (null? (car aK1cd5@maps)) (aKe5a@syntax-violation '#f '"extra ellipsis in syntax form" aK1c5b@src) (values (aK1bea@gen-mappend aK1cd6@x (car aK1cd5@maps)) (cdr aK1cd5@maps))))))))) aK1cc1@ls/false) (let ((aK1cd9@t aK1cbf@t)) (let ((aK1cdb@ls/false (aKd7a@syntax-dispatch aK1cd9@t '_))) (if aK1cdb@ls/false (apply (lambda () (call-with-values (lambda () (aK1be4@gen-syntax aK1c5b@src aK1ca7@y aK1c5d@r aK1c5e@maps aK1c5f@ellipsis? aK1c60@vec?)) (lambda (aK1ce1@aK1cde aK1ce2@aK1ce0) (let ((aK1ce5@maps aK1ce2@aK1ce0) (aK1ce6@y aK1ce1@aK1cde)) (call-with-values (lambda () (aK1ca8@k aK1ce5@maps)) (lambda (aK1ced@aK1cea aK1cee@aK1cec) (let ((aK1cf1@maps aK1cee@aK1cec) (aK1cf2@x aK1ced@aK1cea)) (values (aK1be8@gen-append aK1cf2@x aK1ce6@y) aK1cf1@maps)))))))) aK1cdb@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1cd9@t)))))))))))) aK1c99@ls/false) (let ((aK1cf5@t aK1c97@t)) (let ((aK1cf7@ls/false (aKd7a@syntax-dispatch aK1cf5@t '(any . any)))) (if aK1cf7@ls/false (apply (lambda (aK1cf9@x aK1cfa@y) (call-with-values (lambda () (aK1be4@gen-syntax aK1c5b@src aK1cf9@x aK1c5d@r aK1c5e@maps aK1c5f@ellipsis? '#f)) (lambda (aK1d01@aK1cfe aK1d02@aK1d00) (let ((aK1d05@maps aK1d02@aK1d00) (aK1d06@xnew aK1d01@aK1cfe)) (call-with-values (lambda () (aK1be4@gen-syntax aK1c5b@src aK1cfa@y aK1c5d@r aK1d05@maps aK1c5f@ellipsis? aK1c60@vec?)) (lambda (aK1d0d@aK1d0a aK1d0e@aK1d0c) (let ((aK1d11@maps aK1d0e@aK1d0c) (aK1d12@ynew aK1d0d@aK1d0a)) (values (aK1bee@gen-cons aK1c5c@e aK1cf9@x aK1cfa@y aK1d06@xnew aK1d12@ynew) aK1d11@maps)))))))) aK1cf7@ls/false) (let ((aK1d15@t aK1cf5@t)) (let ((aK1d17@ls/false (aKd7a@syntax-dispatch aK1d15@t '#(vector each-any)))) (if aK1d17@ls/false (apply (lambda (aK1d19@ls) (call-with-values (lambda () (aK1be4@gen-syntax aK1c5b@src aK1d19@ls aK1c5d@r aK1c5e@maps aK1c5f@ellipsis? '#t)) (lambda (aK1d1f@aK1d1c aK1d20@aK1d1e) (let ((aK1d23@maps aK1d20@aK1d1e) (aK1d24@lsnew aK1d1f@aK1d1c)) (values (aK1bf0@gen-vector aK1c5c@e aK1d19@ls aK1d24@lsnew) aK1d23@maps))))) aK1d17@ls/false) (let ((aK1d27@t aK1d15@t)) (let ((aK1d29@ls/false (aKd7a@syntax-dispatch aK1d27@t '_))) (if aK1d29@ls/false (apply (lambda () (values (list 'quote aK1c5c@e) aK1c5e@maps)) aK1d29@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1d27@t)))))))))))))))))))))))) (set! aK1be6@gen-ref (lambda (aK1c41@src aK1c42@var aK1c43@level aK1c44@maps) (if (= aK1c43@level '0) (values aK1c42@var aK1c44@maps) (if (null? aK1c44@maps) (aKe5a@syntax-violation '#f '"missing ellipsis in syntax form" aK1c41@src) (call-with-values (lambda () (aK1be6@gen-ref aK1c41@src aK1c42@var (- aK1c43@level '1) (cdr aK1c44@maps))) (lambda (aK1c4d@aK1c4a aK1c4e@aK1c4c) (let ((aK1c51@outer-maps aK1c4e@aK1c4c) (aK1c52@outer-var aK1c4d@aK1c4a)) (let ((aK1c55@t (assq aK1c52@outer-var (car aK1c44@maps)))) (if aK1c55@t ((lambda (aK1c57@b) (values (cdr aK1c57@b) aK1c44@maps)) aK1c55@t) (let ((aK1c59@inner-var (aKafb@gen-lexical 'tmp))) (values aK1c59@inner-var (cons (cons (cons aK1c52@outer-var aK1c59@inner-var) (car aK1c44@maps)) aK1c51@outer-maps)))))))))))) (set! aK1be8@gen-append (lambda (aK1c3d@x aK1c3e@y) (if (fast-equal? aK1c3e@y ''()) aK1c3d@x (list 'append aK1c3d@x aK1c3e@y)))) (set! aK1bea@gen-mappend (lambda (aK1c39@e aK1c3a@map-env) (list 'apply '(primitive append) (aK1bec@gen-map aK1c39@e aK1c3a@map-env)))) (set! aK1bec@gen-map (lambda (aK1c27@e aK1c28@map-env) (let ((aK1c2b@formals (map cdr aK1c28@map-env)) (aK1c2c@actuals (map (lambda (aK1c2f@x) (list 'ref (car aK1c2f@x))) aK1c28@map-env))) (if (eq? (car aK1c27@e) 'ref) (car aK1c2c@actuals) (if (for-all (lambda (aK1c31@x) (and (eq? (car aK1c31@x) 'ref) (memq (cadr aK1c31@x) aK1c2b@formals))) (cdr aK1c27@e)) (let ((aK1c33@args (map (let ((aK1c35@r (map cons aK1c2b@formals aK1c2c@actuals))) (lambda (aK1c37@x) (cdr (assq (cadr aK1c37@x) aK1c35@r)))) (cdr aK1c27@e)))) (cons 'map (cons (list 'primitive (car aK1c27@e)) aK1c33@args))) (cons* 'map (list 'lambda aK1c2b@formals aK1c27@e) aK1c2c@actuals)))))) (set! aK1bee@gen-cons (lambda (aK1c17@e aK1c18@x aK1c19@y aK1c1a@xnew aK1c1b@ynew) (let ((aK1c21@t (car aK1c1b@ynew))) (if (memv aK1c21@t '(quote)) (if (eq? (car aK1c1a@xnew) 'quote) (let ((aK1c23@xnew (cadr aK1c1a@xnew)) (aK1c24@ynew (cadr aK1c1b@ynew))) (if (and (eq? aK1c23@xnew aK1c18@x) (eq? aK1c24@ynew aK1c19@y)) (list 'quote aK1c17@e) (list 'quote (cons aK1c23@xnew aK1c24@ynew)))) (if (null? (cadr aK1c1b@ynew)) (list 'list aK1c1a@xnew) (list 'cons aK1c1a@xnew aK1c1b@ynew))) (if (memv aK1c21@t '(list)) (cons 'list (cons aK1c1a@xnew (cdr aK1c1b@ynew))) (list 'cons aK1c1a@xnew aK1c1b@ynew)))))) (set! aK1bf0@gen-vector (lambda (aK1c11@e aK1c12@ls aK1c13@lsnew) (if (eq? (car aK1c13@lsnew) 'quote) (if (eq? (cadr aK1c13@lsnew) aK1c12@ls) (list 'quote aK1c11@e) (list 'quote (list->vector (cadr aK1c13@lsnew)))) (if (eq? (car aK1c13@lsnew) 'list) (cons 'vector (cdr aK1c13@lsnew)) (list 'list->vector aK1c13@lsnew))))) (set! aK1bf2@regen (lambda (aK1c0b@x) (let ((aK1c0d@t (car aK1c0b@x))) (if (memv aK1c0d@t '(ref)) (cadr aK1c0b@x) (if (memv aK1c0d@t '(primitive)) (list 'primitive (cadr aK1c0b@x)) (if (memv aK1c0d@t '(quote)) (list 'quote (cadr aK1c0b@x)) (if (memv aK1c0d@t '(lambda)) (aKad6@aKa02@build-lambda '#f (cadr aK1c0b@x) (aK1bf2@regen (caddr aK1c0b@x))) (if (memv aK1c0d@t '(map)) (let ((aK1c0f@ls (map aK1bf2@regen (cdr aK1c0b@x)))) (cons '(primitive ellipsis-map) aK1c0f@ls)) (cons (list 'primitive (car aK1c0b@x)) (map aK1bf2@regen (cdr aK1c0b@x))))))))))) (lambda (aK1bf3@e aK1bf4@r aK1bf5@mr) (let ((aK1bf9@t aK1bf3@e)) (let ((aK1bfb@ls/false (aKd7a@syntax-dispatch aK1bf9@t '(_ any)))) (if aK1bfb@ls/false (apply (lambda (aK1bfd@x) (call-with-values (lambda () (aK1be4@gen-syntax aK1bf3@e aK1bfd@x aK1bf4@r '() aKd7c@ellipsis? '#f)) (lambda (aK1c03@aK1c00 aK1c04@aK1c02) (let ((aK1c07@maps aK1c04@aK1c02) (aK1c08@e aK1c03@aK1c00)) (aK1bf2@regen aK1c08@e))))) aK1bfb@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1bf9@t)))))))) (set! aK2854@aKd86@syntax-transformer aKd86@syntax-transformer) (set! aKd88@core-macro-transformer (lambda (aK1d2b@name) (let ((aK1d2d@t aK1d2b@name)) (if (memv aK1d2d@t '(quote)) aKd2a@quote-transformer (if (memv aK1d2d@t '(lambda)) aKd2e@lambda-transformer (if (memv aK1d2d@t '(case-lambda)) aKd2c@case-lambda-transformer (if (memv aK1d2d@t '(letrec)) aKd12@letrec-transformer (if (memv aK1d2d@t '(letrec*)) aKd14@letrec*-transformer (if (memv aK1d2d@t '(let)) aKd10@let-transformer (if (memv aK1d2d@t '(if)) aKd22@if-transformer (if (memv aK1d2d@t '(and)) aKd24@and-transformer (if (memv aK1d2d@t '(or)) aKd26@or-transformer (if (memv aK1d2d@t '(foreign-call)) aKd76@foreign-call-transformer (if (memv aK1d2d@t '(syntax-case)) aKd82@syntax-case-transformer (if (memv aK1d2d@t '(syntax)) aKd86@syntax-transformer (if (memv aK1d2d@t '(type-descriptor)) aKd18@type-descriptor-transformer (if (memv aK1d2d@t '(record-type-descriptor)) aKd1a@record-type-descriptor-transformer (if (memv aK1d2d@t '(record-constructor-descriptor)) aKd1c@record-constructor-descriptor-transformer (if (memv aK1d2d@t '(fluid-let-syntax)) aKd16@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" aK1d2b@name)))))))))))))))))))) (set! aK2855@aKd88@core-macro-transformer aKd88@core-macro-transformer) (set! aKd8a@symbol-macro (lambda (aK1d2f@x aK1d30@set) (let ((aK1d33@t aK1d2f@x)) (let ((aK1d35@ls/false (aKd7a@syntax-dispatch aK1d33@t '(_ any)))) (if (and aK1d35@ls/false (apply (lambda (aK1d37@name) (and (aKb73@id? aK1d37@name) (memq (aKb75@id->sym aK1d37@name) aK1d30@set))) aK1d35@ls/false)) (apply (lambda (aK1d39@name) (aKd30@bless (list 'quote aK1d39@name))) aK1d35@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1d33@t)))))) (set! aK2856@aKd8a@symbol-macro aKd8a@symbol-macro) (set! aKd8c@macro-transformer (lambda (aK1d3b@x) (if (procedure? aK1d3b@x) aK1d3b@x (if (symbol? aK1d3b@x) (let ((aK1d3d@t aK1d3b@x)) (if (memv aK1d3d@t '(define-record-type)) aKd6e@define-record-type-macro (if (memv aK1d3d@t '(define-struct)) aKd6c@define-struct-macro (if (memv aK1d3d@t '(include)) aKd62@include-macro (if (memv aK1d3d@t '(cond)) aKd5e@cond-macro (if (memv aK1d3d@t '(let)) aKd36@let-macro (if (memv aK1d3d@t '(do)) aKd56@do-macro (if (memv aK1d3d@t '(or)) aKd5a@or-macro (if (memv aK1d3d@t '(and)) aKd5c@and-macro (if (memv aK1d3d@t '(let*)) aKd58@let*-macro (if (memv aK1d3d@t '(let-values)) aKd38@let-values-macro (if (memv aK1d3d@t '(let*-values)) aKd3a@let*-values-macro (if (memv aK1d3d@t '(syntax-rules)) aKd66@syntax-rules-macro (if (memv aK1d3d@t '(quasiquote)) aKd68@quasiquote-macro (if (memv aK1d3d@t '(quasisyntax)) aKd6a@quasisyntax-macro (if (memv aK1d3d@t '(with-syntax)) aKd32@with-syntax-macro (if (memv aK1d3d@t '(when)) aKd1e@when-macro (if (memv aK1d3d@t '(unless)) aKd20@unless-macro (if (memv aK1d3d@t '(case)) aKd28@case-macro (if (memv aK1d3d@t '(identifier-syntax)) aKd54@identifier-syntax-macro (if (memv aK1d3d@t '(time)) aKd4c@time-macro (if (memv aK1d3d@t '(delay)) aKd4e@delay-macro (if (memv aK1d3d@t '(assert)) aKd50@assert-macro (if (memv aK1d3d@t '(endianness)) aKd52@endianness-macro (if (memv aK1d3d@t '(guard)) aKd48@guard-macro (if (memv aK1d3d@t '(define-enumeration)) aKd4a@define-enumeration-macro (if (memv aK1d3d@t '(trace-lambda)) aKd3c@trace-lambda-macro (if (memv aK1d3d@t '(trace-define)) aKd3e@trace-define-macro (if (memv aK1d3d@t '(trace-define-syntax)) aKd40@trace-define-syntax-macro (if (memv aK1d3d@t '(trace-let-syntax)) aKd44@trace-let-syntax-macro (if (memv aK1d3d@t '(trace-letrec-syntax)) aKd46@trace-letrec-syntax-macro (if (memv aK1d3d@t '(define-condition-type)) aKd70@define-condition-type-macro (if (memv aK1d3d@t '(parameterize)) aKd74@parameterize-macro (if (memv aK1d3d@t '(include-into)) aKd64@include-into-macro (if (memv aK1d3d@t '(eol-style)) (lambda (aK1d3f@x) (aKd8a@symbol-macro aK1d3f@x '(none lf cr crlf nel crnel ls))) (if (memv aK1d3d@t '(error-handling-mode)) (lambda (aK1d41@x) (aKd8a@symbol-macro aK1d41@x '(ignore raise replace))) (if (memv aK1d3d@t '(buffer-mode)) (lambda (aK1d43@x) (aKd8a@symbol-macro aK1d43@x '(none line block))) (if (memv aK1d3d@t '(file-options)) aKaee@file-options-macro (if (memv aK1d3d@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) aKd72@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" aK1d3b@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" aK1d3b@x))))) (set! aK2857@aKd8c@macro-transformer aKd8c@macro-transformer) (set! aKd8e@local-macro-transformer (lambda (aK1d45@x) (car aK1d45@x))) (set! aK2858@aKd8e@local-macro-transformer aKd8e@local-macro-transformer) (set! aKd90@do-macro-call (lambda (aK1d47@transformer aK1d48@expr) (let ((aK1d4b@out (aK1d47@transformer (aKb5d@add-mark aKb57@anti-mark aK1d48@expr '#f)))) (begin (let aK1d4f@f ((aK1d4d@x aK1d4b@out)) (if (not (aKb3f@stx? aK1d4d@x)) (if (pair? aK1d4d@x) (begin (aK1d4f@f (car aK1d4d@x)) (aK1d4f@f (cdr aK1d4d@x))) (if (vector? aK1d4d@x) (vector-for-each aK1d4f@f aK1d4d@x) (if (symbol? aK1d4d@x) (aKe5a@syntax-violation '#f '"raw symbol encountered in output of macro" aK1d48@expr aK1d4d@x) (void)))) (void))) (aKb5d@add-mark (aKb55@gen-mark) aK1d4b@out aK1d48@expr))))) (set! aK2859@aKd90@do-macro-call aKd90@do-macro-call) (set! aKd92@chi-macro (lambda (aK1d51@p aK1d52@e) (aKd90@do-macro-call (aKd8c@macro-transformer aK1d51@p) aK1d52@e))) (set! aK285a@aKd92@chi-macro aKd92@chi-macro) (set! aKd94@chi-local-macro (lambda (aK1d55@p aK1d56@e) (aKd90@do-macro-call (aKd8e@local-macro-transformer aK1d55@p) aK1d56@e))) (set! aK285b@aKd94@chi-local-macro aKd94@chi-local-macro) (set! aKd96@chi-global-macro (lambda (aK1d59@p aK1d5a@e) (let ((aK1d5d@lib (car aK1d59@p)) (aK1d5e@loc (cdr aK1d59@p))) (begin (aK98a@aK7d9@visit-library aK1d5d@lib) (let ((aK1d61@x (symbol-value aK1d5e@loc))) (let ((aK1d63@transformer (if (procedure? aK1d61@x) aK1d61@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" aK1d61@x)))) (aKd90@do-macro-call aK1d63@transformer aK1d5a@e))))))) (set! aK285c@aKd96@chi-global-macro aKd96@chi-global-macro) (set! aKd98@chi-expr* (lambda (aK1d65@e* aK1d66@r aK1d67@mr) (if (null? aK1d65@e*) '() (let ((aK1d6b@e (aKd9c@chi-expr (car aK1d65@e*) aK1d66@r aK1d67@mr))) (cons aK1d6b@e (aKd98@chi-expr* (cdr aK1d65@e*) aK1d66@r aK1d67@mr)))))) (set! aK285d@aKd98@chi-expr* aKd98@chi-expr*) (set! aKd9a@chi-application (lambda (aK1d6d@e aK1d6e@r aK1d6f@mr) (let ((aK1d73@t aK1d6d@e)) (let ((aK1d75@ls/false (aKd7a@syntax-dispatch aK1d73@t '(any . each-any)))) (if aK1d75@ls/false (apply (lambda (aK1d77@rator aK1d78@rands) (let ((aK1d7b@rator (aKd9c@chi-expr aK1d77@rator aK1d6e@r aK1d6f@mr))) (cons aK1d7b@rator (aKd98@chi-expr* aK1d78@rands aK1d6e@r aK1d6f@mr)))) aK1d75@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1d73@t)))))) (set! aK285e@aKd9a@chi-application aKd9a@chi-application) (set! aKd9c@chi-expr (lambda (aK1d7d@e aK1d7e@r aK1d7f@mr) (call-with-values (lambda () (aKb95@syntax-type aK1d7d@e aK1d7e@r)) (lambda (aK1d89@aK1d84 aK1d8a@aK1d86 aK1d8b@aK1d88) (let ((aK1d8f@kwd aK1d8b@aK1d88) (aK1d90@value aK1d8a@aK1d86) (aK1d91@type aK1d89@aK1d84)) (let ((aK1d95@t aK1d91@type)) (if (memv aK1d95@t '(core-macro)) (let ((aK1d97@transformer (aKd88@core-macro-transformer aK1d90@value))) (aK1d97@transformer aK1d7d@e aK1d7e@r aK1d7f@mr)) (if (memv aK1d95@t '(global)) (let ((aK1d99@lib (car aK1d90@value))) (let ((aK1d9b@loc (cdr aK1d90@value))) (begin ((aKde2@inv-collector) aK1d99@lib) aK1d9b@loc))) (if (memv aK1d95@t '(core-prim)) (let ((aK1d9d@name aK1d90@value)) (list 'primitive aK1d9d@name)) (if (memv aK1d95@t '(call)) (aKd9a@chi-application aK1d7d@e aK1d7e@r aK1d7f@mr) (if (memv aK1d95@t '(lexical)) (let ((aK1d9f@lex (aKd04@lexical-var aK1d90@value))) aK1d9f@lex) (if (memv aK1d95@t '(global-macro global-macro!)) (aKd9c@chi-expr (aKd96@chi-global-macro aK1d90@value aK1d7d@e) aK1d7e@r aK1d7f@mr) (if (memv aK1d95@t '(local-macro local-macro!)) (aKd9c@chi-expr (aKd94@chi-local-macro aK1d90@value aK1d7d@e) aK1d7e@r aK1d7f@mr) (if (memv aK1d95@t '(macro macro!)) (aKd9c@chi-expr (aKd92@chi-macro aK1d90@value aK1d7d@e) aK1d7e@r aK1d7f@mr) (if (memv aK1d95@t '(constant)) (let ((aK1da1@datum aK1d90@value)) (list 'quote aK1da1@datum)) (if (memv aK1d95@t '(set!)) (aKd9e@chi-set! aK1d7d@e aK1d7e@r aK1d7f@mr) (if (memv aK1d95@t '(begin)) (let ((aK1da3@t aK1d7d@e)) (let ((aK1da5@ls/false (aKd7a@syntax-dispatch aK1da3@t '(_ any . each-any)))) (if aK1da5@ls/false (apply (lambda (aK1da7@x aK1da8@x*) (aKad8@aKa32@build-sequence '#f (aKd98@chi-expr* (cons aK1da7@x aK1da8@x*) aK1d7e@r aK1d7f@mr))) aK1da5@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1da3@t)))) (if (memv aK1d95@t '(let-syntax letrec-syntax)) (let ((aK1dab@t aK1d7d@e)) (let ((aK1dad@ls/false (aKd7a@syntax-dispatch aK1dab@t '(_ #(each (any any)) any . each-any)))) (if (and aK1dad@ls/false (apply (lambda (aK1daf@xlhs* aK1db0@xrhs* aK1db1@xbody aK1db2@xbody*) (if (not (aKb7b@valid-bound-ids? aK1daf@xlhs*)) (aKe5a@syntax-violation '#f '"invalid identifiers" aK1d7d@e) (void))) aK1dad@ls/false)) (apply (lambda (aK1db7@xlhs* aK1db8@xrhs* aK1db9@xbody aK1dba@xbody*) (let ((aK1dbf@xlab* (map aKaff@gen-label aK1db7@xlhs*))) (let ((aK1dc1@xrib (aKb33@make-full-rib aK1db7@xlhs* aK1dbf@xlab*))) (let ((aK1dc3@xb* (map (lambda (aK1dc5@x) (aKbab@make-eval-transformer (aKdd4@expand-transformer (if (eq? aK1d91@type 'let-syntax) aK1dc5@x (aKb5f@add-subst aK1dc1@xrib aK1dc5@x)) aK1d7f@mr))) aK1db8@xrhs*))) (aKad8@aKa32@build-sequence '#f (aKd98@chi-expr* (map (lambda (aK1dc7@x) (aKb5f@add-subst aK1dc1@xrib aK1dc7@x)) (cons aK1db9@xbody aK1dba@xbody*)) (append (map cons aK1dbf@xlab* aK1dc3@xb*) aK1d7e@r) (append (map cons aK1dbf@xlab* aK1dc3@xb*) aK1d7f@mr))))))) aK1dad@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1dab@t)))) (if (memv aK1d95@t '(displaced-lexical)) (aKe5a@syntax-violation '#f '"identifier out of context" aK1d7d@e) (if (memv aK1d95@t '(syntax)) (aKe5a@syntax-violation '#f '"reference to pattern variable outside a syntax form" aK1d7d@e) (if (memv aK1d95@t '(define define-syntax module import library)) (aKe5a@syntax-violation '#f (string-append (let ((aK1dc9@t aK1d91@type)) (if (memv aK1dc9@t '(define)) '"a definition" (if (memv aK1dc9@t '(define-syntax)) '"a define-syntax" (if (memv aK1dc9@t '(module)) '"a module definition" (if (memv aK1dc9@t '(library)) '"a library definition" (if (memv aK1dc9@t '(import)) '"an import declaration" (if (memv aK1dc9@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") aK1d7d@e) (if (memv aK1d95@t '(mutable)) (aKe5a@syntax-violation '#f '"attempt to reference an unexportable variable" aK1d7d@e) (aKe5a@syntax-violation '#f '"invalid expression" aK1d7d@e))))))))))))))))))))))) (set! aK285f@aKd9c@chi-expr aKd9c@chi-expr) (set! aKd9e@chi-set! (lambda (aK1dcb@e aK1dcc@r aK1dcd@mr) (let ((aK1dd1@t aK1dcb@e)) (let ((aK1dd3@ls/false (aKd7a@syntax-dispatch aK1dd1@t '(_ any any)))) (if (and aK1dd3@ls/false (apply (lambda (aK1dd5@x aK1dd6@v) (aKb73@id? aK1dd5@x)) aK1dd3@ls/false)) (apply (lambda (aK1dd9@x aK1dda@v) (call-with-values (lambda () (aKb95@syntax-type aK1dd9@x aK1dcc@r)) (lambda (aK1de3@aK1dde aK1de4@aK1de0 aK1de5@aK1de2) (let ((aK1de9@kwd aK1de5@aK1de2) (aK1dea@value aK1de4@aK1de0) (aK1deb@type aK1de3@aK1dde)) (let ((aK1def@t aK1deb@type)) (if (memv aK1def@t '(lexical)) (begin (aKd08@set-lexical-mutable! aK1dea@value '#t) (list 'set! (aKd04@lexical-var aK1dea@value) (aKd9c@chi-expr aK1dda@v aK1dcc@r aK1dcd@mr))) (if (memv aK1def@t '(core-prim)) (aKe5a@syntax-violation '#f '"cannot modify imported core primitive" aK1dcb@e) (if (memv aK1def@t '(global)) (aKe5a@syntax-violation '#f '"attempt to modify imported binding" aK1dcb@e) (if (memv aK1def@t '(global-macro!)) (aKd9c@chi-expr (aKd96@chi-global-macro aK1dea@value aK1dcb@e) aK1dcc@r aK1dcd@mr) (if (memv aK1def@t '(local-macro!)) (aKd9c@chi-expr (aKd94@chi-local-macro aK1dea@value aK1dcb@e) aK1dcc@r aK1dcd@mr) (if (memv aK1def@t '(mutable)) (aKe5a@syntax-violation '#f '"attempt to assign to an unexportable variable" aK1dcb@e) (aKe5a@syntax-violation '#f '"invalid syntax" aK1dcb@e)))))))))))) aK1dd3@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1dd1@t)))))) (set! aK2860@aKd9e@chi-set! aKd9e@chi-set!) (set! aKda0@verify-formals (lambda (aK1df1@fmls aK1df2@stx) (let ((aK1df5@t aK1df1@fmls)) (let ((aK1df7@ls/false (aKd7a@syntax-dispatch aK1df5@t 'each-any))) (if aK1df7@ls/false (apply (lambda (aK1df9@x*) (if (not (aKb7b@valid-bound-ids? aK1df9@x*)) (aKd34@invalid-fmls-error aK1df2@stx aK1df1@fmls) (void))) aK1df7@ls/false) (let ((aK1dfb@t aK1df5@t)) (let ((aK1dfd@ls/false (aKd7a@syntax-dispatch aK1dfb@t '#(each+ any () any)))) (if aK1dfd@ls/false (apply (lambda (aK1dff@x* aK1e00@x) (if (not (aKb7b@valid-bound-ids? (cons aK1e00@x aK1dff@x*))) (aKd34@invalid-fmls-error aK1df2@stx aK1df1@fmls) (void))) aK1dfd@ls/false) (let ((aK1e03@t aK1dfb@t)) (let ((aK1e05@ls/false (aKd7a@syntax-dispatch aK1e03@t '_))) (if aK1e05@ls/false (apply (lambda () (aKe5a@syntax-violation '#f '"invalid syntax" aK1df2@stx)) aK1e05@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1e03@t)))))))))))) (set! aK2861@aKda0@verify-formals aKda0@verify-formals) (set! aKda2@chi-lambda-clause (lambda (aK1e07@stx aK1e08@fmls aK1e09@body* aK1e0a@r aK1e0b@mr) (let ((aK1e11@t aK1e08@fmls)) (let ((aK1e13@ls/false (aKd7a@syntax-dispatch aK1e11@t 'each-any))) (if aK1e13@ls/false (apply (lambda (aK1e15@x*) (begin (aKda0@verify-formals aK1e08@fmls aK1e07@stx) (let ((aK1e17@lex* (map aKafb@gen-lexical aK1e15@x*)) (aK1e18@lab* (map aKaff@gen-label aK1e15@x*))) (values aK1e17@lex* (aKdb2@chi-internal (aKb5f@add-subst (aKb33@make-full-rib aK1e15@x* aK1e18@lab*) aK1e09@body*) (aKd0c@add-lexicals aK1e18@lab* aK1e17@lex* aK1e0a@r) aK1e0b@mr))))) aK1e13@ls/false) (let ((aK1e1b@t aK1e11@t)) (let ((aK1e1d@ls/false (aKd7a@syntax-dispatch aK1e1b@t '#(each+ any () any)))) (if aK1e1d@ls/false (apply (lambda (aK1e1f@x* aK1e20@x) (begin (aKda0@verify-formals aK1e08@fmls aK1e07@stx) (let ((aK1e23@lex* (map aKafb@gen-lexical aK1e1f@x*)) (aK1e24@lab* (map aKaff@gen-label aK1e1f@x*)) (aK1e25@lex (aKafb@gen-lexical aK1e20@x)) (aK1e26@lab (aKaff@gen-label aK1e20@x))) (values (append aK1e23@lex* aK1e25@lex) (aKdb2@chi-internal (aKb5f@add-subst (aKb33@make-full-rib (cons aK1e20@x aK1e1f@x*) (cons aK1e26@lab aK1e24@lab*)) aK1e09@body*) (aKd0c@add-lexicals (cons aK1e26@lab aK1e24@lab*) (cons aK1e25@lex aK1e23@lex*) aK1e0a@r) aK1e0b@mr))))) aK1e1d@ls/false) (let ((aK1e2b@t aK1e1b@t)) (let ((aK1e2d@ls/false (aKd7a@syntax-dispatch aK1e2b@t '_))) (if aK1e2d@ls/false (apply (lambda () (aKe5a@syntax-violation '#f '"invalid syntax" aK1e08@fmls)) aK1e2d@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1e2b@t)))))))))))) (set! aK2862@aKda2@chi-lambda-clause aKda2@chi-lambda-clause) (set! aKda4@chi-lambda-clause* (lambda (aK1e2f@stx aK1e30@fmls* aK1e31@body** aK1e32@r aK1e33@mr) (if (null? aK1e30@fmls*) (values '() '()) (call-with-values (lambda () (aKda2@chi-lambda-clause aK1e2f@stx (car aK1e30@fmls*) (car aK1e31@body**) aK1e32@r aK1e33@mr)) (lambda (aK1e3d@aK1e3a aK1e3e@aK1e3c) (let ((aK1e41@b aK1e3e@aK1e3c) (aK1e42@a aK1e3d@aK1e3a)) (call-with-values (lambda () (aKda4@chi-lambda-clause* aK1e2f@stx (cdr aK1e30@fmls*) (cdr aK1e31@body**) aK1e32@r aK1e33@mr)) (lambda (aK1e49@aK1e46 aK1e4a@aK1e48) (let ((aK1e4d@b* aK1e4a@aK1e48) (aK1e4e@a* aK1e49@aK1e46)) (values (cons aK1e42@a aK1e4e@a*) (cons aK1e41@b aK1e4d@b*))))))))))) (set! aK2863@aKda4@chi-lambda-clause* aKda4@chi-lambda-clause*) (set! aKda6@chi-defun (lambda (aK1e51@x aK1e52@r aK1e53@mr) (let ((aK1e57@fmls (car aK1e51@x)) (aK1e58@body* (cdr aK1e51@x))) (call-with-values (lambda () (aKda2@chi-lambda-clause aK1e57@fmls aK1e57@fmls aK1e58@body* aK1e52@r aK1e53@mr)) (lambda (aK1e5f@aK1e5c aK1e60@aK1e5e) (let ((aK1e63@body aK1e60@aK1e5e) (aK1e64@fmls aK1e5f@aK1e5c)) (aKad6@aKa02@build-lambda '#f aK1e64@fmls aK1e63@body))))))) (set! aK2864@aKda6@chi-defun aKda6@chi-defun) (set! aKda8@chi-rhs (lambda (aK1e67@rhs aK1e68@r aK1e69@mr) (let ((aK1e6d@t (car aK1e67@rhs))) (if (memv aK1e6d@t '(defun)) (aKda6@chi-defun (cdr aK1e67@rhs) aK1e68@r aK1e69@mr) (if (memv aK1e6d@t '(expr)) (let ((aK1e6f@expr (cdr aK1e67@rhs))) (aKd9c@chi-expr aK1e6f@expr aK1e68@r aK1e69@mr)) (if (memv aK1e6d@t '(top-expr)) (let ((aK1e71@expr (cdr aK1e67@rhs))) (aKad8@aKa32@build-sequence '#f (list (aKd9c@chi-expr aK1e71@expr aK1e68@r aK1e69@mr) (aKad9@aKa34@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" aK1e67@rhs))))))) (set! aK2865@aKda8@chi-rhs aKda8@chi-rhs) (set! aKdaa@expand-interaction-rhs*/init* (lambda (aK1e73@lhs* aK1e74@rhs* aK1e75@init* aK1e76@r aK1e77@mr) (let aK1e81@f ((aK1e7d@lhs* aK1e73@lhs*) (aK1e7e@rhs* aK1e74@rhs*)) (if (null? aK1e7d@lhs*) (map (lambda (aK1e83@x) (aKd9c@chi-expr aK1e83@x aK1e76@r aK1e77@mr)) aK1e75@init*) (let ((aK1e85@lhs (car aK1e7d@lhs*)) (aK1e86@rhs (car aK1e7e@rhs*))) (let ((aK1e89@t (car aK1e86@rhs))) (if (memv aK1e89@t '(defun)) (let ((aK1e8b@rhs (aKda6@chi-defun (cdr aK1e86@rhs) aK1e76@r aK1e77@mr))) (cons (list 'set! aK1e85@lhs aK1e8b@rhs) (aK1e81@f (cdr aK1e7d@lhs*) (cdr aK1e7e@rhs*)))) (if (memv aK1e89@t '(expr)) (let ((aK1e8d@rhs (aKd9c@chi-expr (cdr aK1e86@rhs) aK1e76@r aK1e77@mr))) (cons (list 'set! aK1e85@lhs aK1e8d@rhs) (aK1e81@f (cdr aK1e7d@lhs*) (cdr aK1e7e@rhs*)))) (if (memv aK1e89@t '(top-expr)) (let ((aK1e8f@e (aKd9c@chi-expr (cdr aK1e86@rhs) aK1e76@r aK1e77@mr))) (cons aK1e8f@e (aK1e81@f (cdr aK1e7d@lhs*) (cdr aK1e7e@rhs*)))) (error 'expand-interaction '"invallid" aK1e86@rhs)))))))))) (set! aK2866@aKdaa@expand-interaction-rhs*/init* aKdaa@expand-interaction-rhs*/init*) (set! aKdac@chi-rhs* (lambda (aK1e91@rhs* aK1e92@r aK1e93@mr) (let aK1e99@f ((aK1e97@ls aK1e91@rhs*)) (if (null? aK1e97@ls) '() (let ((aK1e9b@a (aKda8@chi-rhs (car aK1e97@ls) aK1e92@r aK1e93@mr))) (cons aK1e9b@a (aK1e99@f (cdr aK1e97@ls)))))))) (set! aK2867@aKdac@chi-rhs* aKdac@chi-rhs*) (set! aKdae@find-bound=? (lambda (aK1e9d@x aK1e9e@lhs* aK1e9f@rhs*) (if (null? aK1e9e@lhs*) '#f (if (aKb77@bound-id=? aK1e9d@x (car aK1e9e@lhs*)) (car aK1e9f@rhs*) (aKdae@find-bound=? aK1e9d@x (cdr aK1e9e@lhs*) (cdr aK1e9f@rhs*)))))) (set! aK2868@aKdae@find-bound=? aKdae@find-bound=?) (set! aKdb0@find-dups (lambda (aK1ea3@ls) (let aK1ea9@f ((aK1ea5@ls aK1ea3@ls) (aK1ea6@dups '())) (if (null? aK1ea5@ls) aK1ea6@dups (let ((aK1eab@t (aKdae@find-bound=? (car aK1ea5@ls) (cdr aK1ea5@ls) (cdr aK1ea5@ls)))) (if aK1eab@t ((lambda (aK1ead@x) (aK1ea9@f (cdr aK1ea5@ls) (cons (list (car aK1ea5@ls) aK1ead@x) aK1ea6@dups))) aK1eab@t) (aK1ea9@f (cdr aK1ea5@ls) aK1ea6@dups))))))) (set! aK2869@aKdb0@find-dups aKdb0@find-dups) (set! aKdb2@chi-internal (lambda (aK1eaf@e* aK1eb0@r aK1eb1@mr) (let ((aK1eb5@rib (aKb27@make-empty-rib))) (call-with-values (lambda () (aKdd2@chi-body* (map (lambda (aK1ec7@x) (aKb5f@add-subst aK1eb5@rib aK1ec7@x)) (aKb71@syntax->list aK1eaf@e*)) aK1eb0@r aK1eb1@mr '() '() '() '() '() aK1eb5@rib '#f)) (lambda (aK1ec9@aK1eb8 aK1eca@aK1eba aK1ecb@aK1ebc aK1ecc@aK1ebe aK1ecd@aK1ec0 aK1ece@aK1ec2 aK1ecf@aK1ec4 aK1ed0@aK1ec6) (let ((aK1ed9@_exp* aK1ed0@aK1ec6) (aK1eda@kwd* aK1ecf@aK1ec4) (aK1edb@mod** aK1ece@aK1ec2) (aK1edc@rhs* aK1ecd@aK1ec0) (aK1edd@lex* aK1ecc@aK1ebe) (aK1ede@mr aK1ecb@aK1ebc) (aK1edf@r aK1eca@aK1eba) (aK1ee0@e* aK1ec9@aK1eb8)) (begin (if (null? aK1ee0@e*) (aKe5a@syntax-violation '#f '"no expression in body" aK1ee0@e*) (void)) (let ((aK1ee9@init* (aKd98@chi-expr* (append (apply append (reverse aK1edb@mod**)) aK1ee0@e*) aK1edf@r aK1ede@mr))) (let ((aK1eeb@rhs* (aKdac@chi-rhs* aK1edc@rhs* aK1edf@r aK1ede@mr))) (aKadd@aKa3c@build-letrec* '#f (reverse aK1edd@lex*) (reverse aK1eeb@rhs*) (aKad8@aKa32@build-sequence '#f aK1ee9@init*))))))))))) (set! aK286a@aKdb2@chi-internal aKdb2@chi-internal) (set! aKdb4@parse-module (lambda (aK1eed@e) (let ((aK1eef@t aK1eed@e)) (let ((aK1ef1@ls/false (aKd7a@syntax-dispatch aK1eef@t '(_ each-any . each-any)))) (if aK1ef1@ls/false (apply (lambda (aK1ef3@export* aK1ef4@b*) (begin (if (not (for-all aKb73@id? aK1ef3@export*)) (aKe5a@syntax-violation '#f '"module exports must be identifiers" aK1eed@e) (void)) (values '#f (list->vector aK1ef3@export*) aK1ef4@b*))) aK1ef1@ls/false) (let ((aK1ef7@t aK1eef@t)) (let ((aK1ef9@ls/false (aKd7a@syntax-dispatch aK1ef7@t '(_ any each-any . each-any)))) (if aK1ef9@ls/false (apply (lambda (aK1efb@name aK1efc@export* aK1efd@b*) (begin (if (not (aKb73@id? aK1efb@name)) (aKe5a@syntax-violation '#f '"module name must be an identifier" aK1eed@e) (void)) (if (not (for-all aKb73@id? aK1efc@export*)) (aKe5a@syntax-violation '#f '"module exports must be identifiers" aK1eed@e) (void)) (values aK1efb@name (list->vector aK1efc@export*) aK1efd@b*))) aK1ef9@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1ef7@t))))))))) (set! aK286b@aKdb4@parse-module aKdb4@parse-module) (set! aKdbe@module-interface? (lambda (aK1f01@x) (and (simple-struct? aK1f01@x) (eq? (simple-struct-name aK1f01@x) 'module-interface)))) (set! aK286c@aKdbe@module-interface? aKdbe@module-interface?) (set! aKdc0@module-interface-first-mark (lambda (aK1f03@x) (simple-struct-ref aK1f03@x '0))) (set! aK286d@aKdc0@module-interface-first-mark aKdc0@module-interface-first-mark) (set! aKdc2@set-module-interface-first-mark! (lambda (aK1f05@x aK1f06@val) (simple-struct-set! aK1f05@x '0 aK1f06@val))) (set! aK286e@aKdc2@set-module-interface-first-mark! aKdc2@set-module-interface-first-mark!) (set! aKdc4@module-interface-exp-id-vec (lambda (aK1f09@x) (simple-struct-ref aK1f09@x '1))) (set! aK286f@aKdc4@module-interface-exp-id-vec aKdc4@module-interface-exp-id-vec) (set! aKdc6@set-module-interface-exp-id-vec! (lambda (aK1f0b@x aK1f0c@val) (simple-struct-set! aK1f0b@x '1 aK1f0c@val))) (set! aK2870@aKdc6@set-module-interface-exp-id-vec! aKdc6@set-module-interface-exp-id-vec!) (set! aKdc8@module-interface-exp-lab-vec (lambda (aK1f0f@x) (simple-struct-ref aK1f0f@x '2))) (set! aK2871@aKdc8@module-interface-exp-lab-vec aKdc8@module-interface-exp-lab-vec) (set! aKdca@set-module-interface-exp-lab-vec! (lambda (aK1f11@x aK1f12@val) (simple-struct-set! aK1f11@x '2 aK1f12@val))) (set! aK2872@aKdca@set-module-interface-exp-lab-vec! aKdca@set-module-interface-exp-lab-vec!) (set! aKdcc@dummy '3) (set! aK2873@aKdcc@dummy aKdcc@dummy) (set! aKdce@module-interface-exp-id* (lambda (aK1f15@iface aK1f16@id) (let ((aK1f1a@diff-marks '#f)) (begin (set! aK1f1a@diff-marks (lambda (aK1f21@ls aK1f22@x) (begin (if (null? aK1f21@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((aK1f25@a (car aK1f21@ls))) (if (eq? aK1f25@a aK1f22@x) '() (cons aK1f25@a (aK1f1a@diff-marks (cdr aK1f21@ls) aK1f22@x))))))) (let ((aK1f1b@diff (aK1f1a@diff-marks (aKb45@stx-mark* aK1f16@id) (aKdc0@module-interface-first-mark aK1f15@iface))) (aK1f1c@id-vec (aKdc4@module-interface-exp-id-vec aK1f15@iface))) (if (null? aK1f1b@diff) aK1f1c@id-vec (vector-map (lambda (aK1f1f@x) (make-simple-struct 'stx '5 (list (aKb41@stx-expr aK1f1f@x) (append aK1f1b@diff (aKb45@stx-mark* aK1f1f@x)) '() '()))) aK1f1c@id-vec))))))) (set! aK2874@aKdce@module-interface-exp-id* aKdce@module-interface-exp-id*) (set! aKdd0@chi-internal-module (lambda (aK1f27@e aK1f28@r aK1f29@mr aK1f2a@lex* aK1f2b@rhs* aK1f2c@mod** aK1f2d@kwd*) (call-with-values (lambda () (aKdb4@parse-module aK1f27@e)) (lambda (aK1f3b@aK1f36 aK1f3c@aK1f38 aK1f3d@aK1f3a) (let ((aK1f41@e* aK1f3d@aK1f3a) (aK1f42@exp-id* aK1f3c@aK1f38) (aK1f43@name aK1f3b@aK1f36)) (let ((aK1f47@rib (aKb27@make-empty-rib))) (let ((aK1f49@e* (map (lambda (aK1f4b@x) (aKb5f@add-subst aK1f47@rib aK1f4b@x)) (aKb71@syntax->list aK1f41@e*)))) (call-with-values (lambda () (aKdd2@chi-body* aK1f49@e* aK1f28@r aK1f29@mr aK1f2a@lex* aK1f2b@rhs* aK1f2c@mod** aK1f2d@kwd* '() aK1f47@rib '#f)) (lambda (aK1f5d@aK1f4e aK1f5e@aK1f50 aK1f5f@aK1f52 aK1f60@aK1f54 aK1f61@aK1f56 aK1f62@aK1f58 aK1f63@aK1f5a aK1f64@aK1f5c) (let ((aK1f6d@_exp* aK1f64@aK1f5c) (aK1f6e@kwd* aK1f63@aK1f5a) (aK1f6f@mod** aK1f62@aK1f58) (aK1f70@rhs* aK1f61@aK1f56) (aK1f71@lex* aK1f60@aK1f54) (aK1f72@mr aK1f5f@aK1f52) (aK1f73@r aK1f5e@aK1f50) (aK1f74@e* aK1f5d@aK1f4e)) (let ((aK1f7d@exp-lab* (vector-map (lambda (aK1f81@x) (or (aKb89@id->label (make-simple-struct 'stx '5 (list (aKb75@id->sym aK1f81@x) (aKb45@stx-mark* aK1f81@x) (list aK1f47@rib) '()))) (aKe5a@syntax-violation '#f '"cannot find module export" aK1f81@x))) aK1f42@exp-id*)) (aK1f7e@mod** (cons aK1f74@e* aK1f6f@mod**))) (if (not aK1f43@name) (values aK1f71@lex* aK1f70@rhs* aK1f42@exp-id* aK1f7d@exp-lab* aK1f73@r aK1f72@mr aK1f7e@mod** aK1f6e@kwd*) (let ((aK1f83@lab (aKaff@gen-label 'module)) (aK1f84@iface (make-simple-struct 'module-interface '4 (list (car (aKb45@stx-mark* aK1f43@name)) (vector-map (lambda (aK1f87@x) (make-simple-struct 'stx '5 (list (aKb41@stx-expr aK1f87@x) (aKb45@stx-mark* aK1f87@x) '() '()))) aK1f42@exp-id*) aK1f7d@exp-lab*)))) (values aK1f71@lex* aK1f70@rhs* (vector aK1f43@name) (vector aK1f83@lab) (cons (cons aK1f83@lab (cons '$module aK1f84@iface)) aK1f73@r) (cons (cons aK1f83@lab (cons '$module aK1f84@iface)) aK1f72@mr) aK1f7e@mod** aK1f6e@kwd*)))))))))))))) (set! aK2875@aKdd0@chi-internal-module aKdd0@chi-internal-module) (set! aKdd2@chi-body* (lambda (aK1f89@e* aK1f8a@r aK1f8b@mr aK1f8c@lex* aK1f8d@rhs* aK1f8e@mod** aK1f8f@kwd* aK1f90@exp* aK1f91@rib aK1f92@top?) (if (null? aK1f89@e*) (values aK1f89@e* aK1f8a@r aK1f8b@mr aK1f8c@lex* aK1f8d@rhs* aK1f8e@mod** aK1f8f@kwd* aK1f90@exp*) (let ((aK1f9d@e (car aK1f89@e*))) (call-with-values (lambda () (aKb95@syntax-type aK1f9d@e aK1f8a@r)) (lambda (aK1fa5@aK1fa0 aK1fa6@aK1fa2 aK1fa7@aK1fa4) (let ((aK1fab@kwd aK1fa7@aK1fa4) (aK1fac@value aK1fa6@aK1fa2) (aK1fad@type aK1fa5@aK1fa0)) (let ((aK1fb1@kwd* (if (aKb73@id? aK1fab@kwd) (cons aK1fab@kwd aK1f8f@kwd*) aK1f8f@kwd*))) (let ((aK1fb3@t aK1fad@type)) (if (memv aK1fb3@t '(define)) (call-with-values (lambda () (aKcfc@parse-define aK1f9d@e)) (lambda (aK1fb9@aK1fb6 aK1fba@aK1fb8) (let ((aK1fbd@rhs aK1fba@aK1fb8) (aK1fbe@id aK1fb9@aK1fb6)) (begin (if (aKb7f@bound-id-member? aK1fbe@id aK1fb1@kwd*) (aKe5a@syntax-violation '#f '"cannot redefine keyword" aK1f9d@e) (void)) (call-with-values (lambda () (aKb03@gen-define-label+loc aK1fbe@id aK1f91@rib)) (lambda (aK1fc5@aK1fc2 aK1fc6@aK1fc4) (let ((aK1fc9@lex aK1fc6@aK1fc4) (aK1fca@lab aK1fc5@aK1fc2)) (begin (aKb29@extend-rib! aK1f91@rib aK1fbe@id aK1fca@lab) (aKdd2@chi-body* (cdr aK1f89@e*) (aKd0a@add-lexical aK1fca@lab aK1fc9@lex aK1f8a@r) aK1f8b@mr (cons aK1fc9@lex aK1f8c@lex*) (cons aK1fbd@rhs aK1f8d@rhs*) aK1f8e@mod** aK1fb1@kwd* aK1f90@exp* aK1f91@rib aK1f92@top?))))))))) (if (memv aK1fb3@t '(define-syntax)) (call-with-values (lambda () (aKcfe@parse-define-syntax aK1f9d@e)) (lambda (aK1fd1@aK1fce aK1fd2@aK1fd0) (let ((aK1fd5@rhs aK1fd2@aK1fd0) (aK1fd6@id aK1fd1@aK1fce)) (begin (if (aKb7f@bound-id-member? aK1fd6@id aK1fb1@kwd*) (aKe5a@syntax-violation '#f '"cannot redefine keyword" aK1f9d@e) (void)) (let ((aK1fd9@lab (aKb05@gen-define-label aK1fd6@id aK1f91@rib)) (aK1fda@expanded-rhs (aKdd4@expand-transformer aK1fd5@rhs aK1f8b@mr))) (begin (aKb29@extend-rib! aK1f91@rib aK1fd6@id aK1fd9@lab) (let ((aK1fdd@b (aKbab@make-eval-transformer aK1fda@expanded-rhs))) (aKdd2@chi-body* (cdr aK1f89@e*) (cons (cons aK1fd9@lab aK1fdd@b) aK1f8a@r) (cons (cons aK1fd9@lab aK1fdd@b) aK1f8b@mr) aK1f8c@lex* aK1f8d@rhs* aK1f8e@mod** aK1fb1@kwd* aK1f90@exp* aK1f91@rib aK1f92@top?)))))))) (if (memv aK1fb3@t '(let-syntax letrec-syntax)) (let ((aK1fdf@t aK1f9d@e)) (let ((aK1fe1@ls/false (aKd7a@syntax-dispatch aK1fdf@t '(_ #(each (any any)) . each-any)))) (if (and aK1fe1@ls/false (apply (lambda (aK1fe3@xlhs* aK1fe4@xrhs* aK1fe5@xbody*) (if (not (aKb7b@valid-bound-ids? aK1fe3@xlhs*)) (aKe5a@syntax-violation '#f '"invalid identifiers" aK1f9d@e) (void))) aK1fe1@ls/false)) (apply (lambda (aK1fe9@xlhs* aK1fea@xrhs* aK1feb@xbody*) (let ((aK1fef@xlab* (map aKaff@gen-label aK1fe9@xlhs*))) (let ((aK1ff1@xrib (aKb33@make-full-rib aK1fe9@xlhs* aK1fef@xlab*))) (let ((aK1ff3@xb* (map (lambda (aK1ff5@x) (aKbab@make-eval-transformer (aKdd4@expand-transformer (if (eq? aK1fad@type 'let-syntax) aK1ff5@x (aKb5f@add-subst aK1ff1@xrib aK1ff5@x)) aK1f8b@mr))) aK1fea@xrhs*))) (aKdd2@chi-body* (append (map (lambda (aK1ff7@x) (aKb5f@add-subst aK1ff1@xrib aK1ff7@x)) aK1feb@xbody*) (cdr aK1f89@e*)) (append (map cons aK1fef@xlab* aK1ff3@xb*) aK1f8a@r) (append (map cons aK1fef@xlab* aK1ff3@xb*) aK1f8b@mr) aK1f8c@lex* aK1f8d@rhs* aK1f8e@mod** aK1fb1@kwd* aK1f90@exp* aK1f91@rib aK1f92@top?))))) aK1fe1@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1fdf@t)))) (if (memv aK1fb3@t '(begin)) (let ((aK1ff9@t aK1f9d@e)) (let ((aK1ffb@ls/false (aKd7a@syntax-dispatch aK1ff9@t '(_ . each-any)))) (if aK1ffb@ls/false (apply (lambda (aK1ffd@x*) (aKdd2@chi-body* (append aK1ffd@x* (cdr aK1f89@e*)) aK1f8a@r aK1f8b@mr aK1f8c@lex* aK1f8d@rhs* aK1f8e@mod** aK1fb1@kwd* aK1f90@exp* aK1f91@rib aK1f92@top?)) aK1ffb@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK1ff9@t)))) (if (memv aK1fb3@t '(global-macro global-macro!)) (aKdd2@chi-body* (cons (aKb5f@add-subst aK1f91@rib (aKd96@chi-global-macro aK1fac@value aK1f9d@e)) (cdr aK1f89@e*)) aK1f8a@r aK1f8b@mr aK1f8c@lex* aK1f8d@rhs* aK1f8e@mod** aK1fb1@kwd* aK1f90@exp* aK1f91@rib aK1f92@top?) (if (memv aK1fb3@t '(local-macro local-macro!)) (aKdd2@chi-body* (cons (aKb5f@add-subst aK1f91@rib (aKd94@chi-local-macro aK1fac@value aK1f9d@e)) (cdr aK1f89@e*)) aK1f8a@r aK1f8b@mr aK1f8c@lex* aK1f8d@rhs* aK1f8e@mod** aK1fb1@kwd* aK1f90@exp* aK1f91@rib aK1f92@top?) (if (memv aK1fb3@t '(macro macro!)) (aKdd2@chi-body* (cons (aKb5f@add-subst aK1f91@rib (aKd92@chi-macro aK1fac@value aK1f9d@e)) (cdr aK1f89@e*)) aK1f8a@r aK1f8b@mr aK1f8c@lex* aK1f8d@rhs* aK1f8e@mod** aK1fb1@kwd* aK1f90@exp* aK1f91@rib aK1f92@top?) (if (memv aK1fb3@t '(module)) (call-with-values (lambda () (aKdd0@chi-internal-module aK1f9d@e aK1f8a@r aK1f8b@mr aK1f8c@lex* aK1f8d@rhs* aK1f8e@mod** aK1fb1@kwd*)) (lambda (aK200f@aK2000 aK2010@aK2002 aK2011@aK2004 aK2012@aK2006 aK2013@aK2008 aK2014@aK200a aK2015@aK200c aK2016@aK200e) (let ((aK201f@kwd* aK2016@aK200e) (aK2020@mod** aK2015@aK200c) (aK2021@mr aK2014@aK200a) (aK2022@r aK2013@aK2008) (aK2023@m-exp-lab* aK2012@aK2006) (aK2024@m-exp-id* aK2011@aK2004) (aK2025@rhs* aK2010@aK2002) (aK2026@lex* aK200f@aK2000)) (begin (vector-for-each (lambda (aK202f@id aK2030@lab) (aKb29@extend-rib! aK1f91@rib aK202f@id aK2030@lab)) aK2024@m-exp-id* aK2023@m-exp-lab*) (aKdd2@chi-body* (cdr aK1f89@e*) aK2022@r aK2021@mr aK2026@lex* aK2025@rhs* aK2020@mod** aK201f@kwd* aK1f90@exp* aK1f91@rib aK1f92@top?))))) (if (memv aK1fb3@t '(library)) (begin (aKe3c@library-expander (aKb87@stx->datum aK1f9d@e)) (aKdd2@chi-body* (cdr aK1f89@e*) aK1f8a@r aK1f8b@mr aK1f8c@lex* aK1f8d@rhs* aK1f8e@mod** aK1fb1@kwd* aK1f90@exp* aK1f91@rib aK1f92@top?)) (if (memv aK1fb3@t '(export)) (let ((aK2033@t aK1f9d@e)) (let ((aK2035@ls/false (aKd7a@syntax-dispatch aK2033@t '(_ . each-any)))) (if aK2035@ls/false (apply (lambda (aK2037@exp-decl*) (aKdd2@chi-body* (cdr aK1f89@e*) aK1f8a@r aK1f8b@mr aK1f8c@lex* aK1f8d@rhs* aK1f8e@mod** aK1fb1@kwd* (append aK2037@exp-decl* aK1f90@exp*) aK1f91@rib aK1f92@top?)) aK2035@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK2033@t)))) (if (memv aK1fb3@t '(import)) (let ((aK203a@module-import? '#f) (aK203c@module-import '#f) (aK203e@library-import '#f)) (begin (set! aK203a@module-import? (lambda (aK208d@e) (let ((aK208f@t aK208d@e)) (let ((aK2091@ls/false (aKd7a@syntax-dispatch aK208f@t '(_ any)))) (if (and aK2091@ls/false (apply (lambda (aK2093@id) (aKb73@id? aK2093@id)) aK2091@ls/false)) (apply (lambda (aK2095@id) '#t) aK2091@ls/false) (let ((aK2097@t aK208f@t)) (let ((aK2099@ls/false (aKd7a@syntax-dispatch aK2097@t '(_ . each-any)))) (if aK2099@ls/false (apply (lambda (aK209b@imp*) '#f) aK2099@ls/false) (let ((aK209d@t aK2097@t)) (let ((aK209f@ls/false (aKd7a@syntax-dispatch aK209d@t '_))) (if aK209f@ls/false (apply (lambda () (aKe5a@syntax-violation '#f '"malformed import form" aK208d@e)) aK209f@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK209d@t)))))))))))) (set! aK203c@module-import (lambda (aK206b@e aK206c@r) (let ((aK206f@t aK206b@e)) (let ((aK2071@ls/false (aKd7a@syntax-dispatch aK206f@t '(_ any)))) (if (and aK2071@ls/false (apply (lambda (aK2073@id) (aKb73@id? aK2073@id)) aK2071@ls/false)) (apply (lambda (aK2075@id) (call-with-values (lambda () (aKb95@syntax-type aK2075@id aK206c@r)) (lambda (aK207d@aK2078 aK207e@aK207a aK207f@aK207c) (let ((aK2083@kwd aK207f@aK207c) (aK2084@value aK207e@aK207a) (aK2085@type aK207d@aK2078)) (let ((aK2089@t aK2085@type)) (if (memv aK2089@t '($module)) (let ((aK208b@iface aK2084@value)) (values (aKdce@module-interface-exp-id* aK208b@iface aK2075@id) (aKdc8@module-interface-exp-lab-vec aK208b@iface))) (aKe5a@syntax-violation '#f '"invalid import" aK206b@e))))))) aK2071@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK206f@t)))))) (set! aK203e@library-import (lambda (aK204f@e) (let ((aK2051@t aK204f@e)) (let ((aK2053@ls/false (aKd7a@syntax-dispatch aK2051@t '(any . each-any)))) (if aK2053@ls/false (apply (lambda (aK2055@ctxt aK2056@imp*) (call-with-values (lambda () (aKddc@parse-import-spec* (aKe60@syntax->datum aK2056@imp*))) (lambda (aK205d@aK205a aK205e@aK205c) (let ((aK2061@subst-labels aK205e@aK205c) (aK2062@subst-names aK205d@aK205a)) (values (vector-map (lambda (aK2065@name) (aKb53@datum->stx aK2055@ctxt aK2065@name)) aK2062@subst-names) aK2061@subst-labels))))) aK2053@ls/false) (let ((aK2067@t aK2051@t)) (let ((aK2069@ls/false (aKd7a@syntax-dispatch aK2067@t '_))) (if aK2069@ls/false (apply (lambda () (aKe5a@syntax-violation '#f '"invalid import form" aK204f@e)) aK2069@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK2067@t))))))))) (begin (call-with-values (lambda () (if (aK203a@module-import? aK1f9d@e) (aK203c@module-import aK1f9d@e aK1f8a@r) (aK203e@library-import aK1f9d@e))) (lambda (aK2043@aK2040 aK2044@aK2042) (let ((aK2047@lab* aK2044@aK2042) (aK2048@id* aK2043@aK2040)) (vector-for-each (lambda (aK204b@id aK204c@lab) (aKb29@extend-rib! aK1f91@rib aK204b@id aK204c@lab)) aK2048@id* aK2047@lab*)))) (aKdd2@chi-body* (cdr aK1f89@e*) aK1f8a@r aK1f8b@mr aK1f8c@lex* aK1f8d@rhs* aK1f8e@mod** aK1fb1@kwd* aK1f90@exp* aK1f91@rib aK1f92@top?)))) (if aK1f92@top? (aKdd2@chi-body* (cdr aK1f89@e*) aK1f8a@r aK1f8b@mr (cons (aKafb@gen-lexical 'dummy) aK1f8c@lex*) (cons (cons 'top-expr aK1f9d@e) aK1f8d@rhs*) aK1f8e@mod** aK1fb1@kwd* aK1f90@exp* aK1f91@rib aK1f92@top?) (values aK1f89@e* aK1f8a@r aK1f8b@mr aK1f8c@lex* aK1f8d@rhs* aK1f8e@mod** aK1fb1@kwd* aK1f90@exp*)))))))))))))))))))))) (set! aK2876@aKdd2@chi-body* aKdd2@chi-body*) (set! aKdd4@expand-transformer (lambda (aK20a1@expr aK20a2@r) (let ((aK20a5@rtc (aKde0@make-collector))) (let ((aK20a7@expanded-rhs (let ((aK20b1@aK20aa aKde2@inv-collector) (aK20b2@aK20ac aKde4@vis-collector) (aK20b3@aK20ae aK20a5@rtc) (aK20b4@aK20b0 (lambda (aK20b9@x) (values)))) (let ((aK20bb@swap (lambda () (begin (let ((aK20bd@t (aK20b1@aK20aa))) (begin (aK20b1@aK20aa aK20b3@aK20ae) (set! aK20b3@aK20ae aK20bd@t))) (let ((aK20bf@t (aK20b2@aK20ac))) (begin (aK20b2@aK20ac aK20b4@aK20b0) (set! aK20b4@aK20b0 aK20bf@t))))))) (dynamic-wind aK20bb@swap (lambda () (aKd9c@chi-expr aK20a1@expr aK20a2@r aK20a2@r)) aK20bb@swap))))) (begin (for-each (let ((aK20c1@mark-visit (aKde4@vis-collector))) (lambda (aK20c3@x) (begin (aK989@aK7d7@invoke-library aK20c3@x) (aK20c1@mark-visit aK20c3@x)))) (aK20a5@rtc)) aK20a7@expanded-rhs))))) (set! aK2877@aKdd4@expand-transformer aKdd4@expand-transformer) (set! aKdd6@parse-exports (lambda (aK20c5@exp*) (let aK20cd@f ((aK20c7@exp* aK20c5@exp*) (aK20c8@int* '()) (aK20c9@ext* '())) (if (null? aK20c7@exp*) (begin (if (not (aKb7b@valid-bound-ids? aK20c9@ext*)) (aKe5a@syntax-violation 'export '"invalid exports" (aKdb0@find-dups aK20c9@ext*)) (void)) (values (map aKe60@syntax->datum aK20c9@ext*) aK20c8@int*)) (let ((aK20cf@t (car aK20c7@exp*))) (let ((aK20d1@ls/false (aKd7a@syntax-dispatch aK20cf@t '(any . #(each (any any)))))) (if aK20d1@ls/false (apply (lambda (aK20d3@rename aK20d4@i* aK20d5@e*) (begin (if (not (and (eq? (aKe60@syntax->datum aK20d3@rename) 'rename) (for-all aKb73@id? aK20d4@i*) (for-all aKb73@id? aK20d5@e*))) (aKe5a@syntax-violation 'export '"invalid export specifier" (car aK20c7@exp*)) (void)) (aK20cd@f (cdr aK20c7@exp*) (append aK20d4@i* aK20c8@int*) (append aK20d5@e* aK20c9@ext*)))) aK20d1@ls/false) (let ((aK20d9@t aK20cf@t)) (let ((aK20db@ls/false (aKd7a@syntax-dispatch aK20d9@t 'any))) (if aK20db@ls/false (apply (lambda (aK20dd@ie) (begin (if (not (aKb73@id? aK20dd@ie)) (aKe5a@syntax-violation 'export '"invalid export" aK20dd@ie) (void)) (aK20cd@f (cdr aK20c7@exp*) (cons aK20dd@ie aK20c8@int*) (cons aK20dd@ie aK20c9@ext*)))) aK20db@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK20d9@t))))))))))) (set! aK2878@aKdd6@parse-exports aKdd6@parse-exports) (set! aKdd8@parse-library-name (lambda (aK20df@spec) (let ((aK20e2@parse '#f)) (begin (set! aK20e2@parse (lambda (aK20ef@x) (let ((aK20f1@t aK20ef@x)) (let ((aK20f3@ls/false (aKd7a@syntax-dispatch aK20f1@t '(each-any)))) (if (and aK20f3@ls/false (apply (lambda (aK20f5@v*) (for-all (lambda (aK20f7@x) (let ((aK20f9@x (aKe60@syntax->datum aK20f7@x))) (and (integer? aK20f9@x) (exact? aK20f9@x)))) aK20f5@v*)) aK20f3@ls/false)) (apply (lambda (aK20fb@v*) (values '() (map aKe60@syntax->datum aK20fb@v*))) aK20f3@ls/false) (let ((aK20fd@t aK20f1@t)) (let ((aK20ff@ls/false (aKd7a@syntax-dispatch aK20fd@t '(any . any)))) (if (and aK20ff@ls/false (apply (lambda (aK2101@x aK2102@rest) (symbol? (aKe60@syntax->datum aK2101@x))) aK20ff@ls/false)) (apply (lambda (aK2105@x aK2106@rest) (call-with-values (lambda () (aK20e2@parse aK2106@rest)) (lambda (aK210d@aK210a aK210e@aK210c) (let ((aK2111@v* aK210e@aK210c) (aK2112@x* aK210d@aK210a)) (values (cons (aKe60@syntax->datum aK2105@x) aK2112@x*) aK2111@v*))))) aK20ff@ls/false) (let ((aK2115@t aK20fd@t)) (let ((aK2117@ls/false (aKd7a@syntax-dispatch aK2115@t '()))) (if aK2117@ls/false (apply (lambda () (values '() '())) aK2117@ls/false) (let ((aK2119@t aK2115@t)) (let ((aK211b@ls/false (aKd7a@syntax-dispatch aK2119@t '_))) (if aK211b@ls/false (apply (lambda () (aKe5a@syntax-violation '#f '"invalid library name" aK20df@spec)) aK211b@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK2119@t))))))))))))))) (call-with-values (lambda () (aK20e2@parse aK20df@spec)) (lambda (aK20e7@aK20e4 aK20e8@aK20e6) (let ((aK20eb@ver* aK20e8@aK20e6) (aK20ec@name* aK20e7@aK20e4)) (begin (if (null? aK20ec@name*) (aKe5a@syntax-violation '#f '"empty library name" aK20df@spec) (void)) (values aK20ec@name* aK20eb@ver*))))))))) (set! aK2879@aKdd8@parse-library-name aKdd8@parse-library-name) (set! aKdda@parse-library (lambda (aK211d@e) (let ((aK211f@t aK211d@e)) (let ((aK2121@ls/false (aKd7a@syntax-dispatch aK211f@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and aK2121@ls/false (apply (lambda (aK2123@library aK2124@name* aK2125@export aK2126@exp* aK2127@import aK2128@imp* aK2129@b*) (and (eq? (aKe60@syntax->datum aK2125@export) 'export) (eq? (aKe60@syntax->datum aK2127@import) 'import) (eq? (aKe60@syntax->datum aK2123@library) 'library))) aK2121@ls/false)) (apply (lambda (aK2131@library aK2132@name* aK2133@export aK2134@exp* aK2135@import aK2136@imp* aK2137@b*) (values aK2132@name* aK2134@exp* aK2136@imp* aK2137@b*)) aK2121@ls/false) (let ((aK213f@t aK211f@t)) (let ((aK2141@ls/false (aKd7a@syntax-dispatch aK213f@t '_))) (if aK2141@ls/false (apply (lambda () (aKe5a@syntax-violation '#f '"malformed library" aK211d@e)) aK2141@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK213f@t))))))))) (set! aK287a@aKdda@parse-library aKdda@parse-library) (set! aKddc@parse-import-spec* (let ((aK2144@idsyn? '#f) (aK2146@dup-error '#f) (aK2148@merge-substs '#f) (aK214a@exclude* '#f) (aK214c@find* '#f) (aK214e@rem* '#f) (aK2150@remove-dups '#f) (aK2152@parse-library-name '#f) (aK2154@import-library '#f) (aK2156@get-import '#f) (aK2158@add-imports! '#f)) (begin (set! aK2144@idsyn? (lambda (aK234d@x) (symbol? (aKe60@syntax->datum aK234d@x)))) (set! aK2146@dup-error (lambda (aK234b@name) (aKe5a@syntax-violation 'import '"two imports with different bindings" aK234b@name))) (set! aK2148@merge-substs (lambda (aK2339@s aK233a@subst) (let ((aK233e@insert-to-subst '#f)) (begin (set! aK233e@insert-to-subst (lambda (aK233f@a aK2340@subst) (let ((aK2343@name (car aK233f@a)) (aK2344@label (cdr aK233f@a))) (let ((aK2347@t (assq aK2343@name aK2340@subst))) (if aK2347@t ((lambda (aK2349@x) (if (eq? (cdr aK2349@x) aK2344@label) aK2340@subst (aK2146@dup-error aK2343@name))) aK2347@t) (cons aK233f@a aK2340@subst)))))) (if (null? aK2339@s) aK233a@subst (aK233e@insert-to-subst (car aK2339@s) (aK2148@merge-substs (cdr aK2339@s) aK233a@subst))))))) (set! aK214a@exclude* (lambda (aK2309@sym* aK230a@subst) (let ((aK230e@exclude '#f)) (begin (set! aK230e@exclude (lambda (aK2327@sym aK2328@subst) (if (null? aK2328@subst) (aKe5a@syntax-violation 'import '"cannot rename unbound identifier" aK2327@sym) (if (eq? aK2327@sym (caar aK2328@subst)) (values (cdar aK2328@subst) (cdr aK2328@subst)) (let ((aK232b@a (car aK2328@subst))) (call-with-values (lambda () (aK230e@exclude aK2327@sym (cdr aK2328@subst))) (lambda (aK2331@aK232e aK2332@aK2330) (let ((aK2335@subst aK2332@aK2330) (aK2336@old aK2331@aK232e)) (values aK2336@old (cons aK232b@a aK2335@subst)))))))))) (if (null? aK2309@sym*) (values '() aK230a@subst) (call-with-values (lambda () (aK230e@exclude (car aK2309@sym*) aK230a@subst)) (lambda (aK2313@aK2310 aK2314@aK2312) (let ((aK2317@subst aK2314@aK2312) (aK2318@old aK2313@aK2310)) (call-with-values (lambda () (aK214a@exclude* (cdr aK2309@sym*) aK2317@subst)) (lambda (aK231f@aK231c aK2320@aK231e) (let ((aK2323@subst aK2320@aK231e) (aK2324@old* aK231f@aK231c)) (values (cons aK2318@old aK2324@old*) aK2323@subst)))))))))))) (set! aK214c@find* (lambda (aK2301@sym* aK2302@subst) (map (lambda (aK2305@x) (let ((aK2307@t (assq aK2305@x aK2302@subst))) (if aK2307@t (cdr aK2307@t) (aKe5a@syntax-violation 'import '"cannot find identifier" aK2305@x)))) aK2301@sym*))) (set! aK214e@rem* (lambda (aK22f9@sym* aK22fa@subst) (let aK22ff@f ((aK22fd@subst aK22fa@subst)) (if (null? aK22fd@subst) '() (if (memq (caar aK22fd@subst) aK22f9@sym*) (aK22ff@f (cdr aK22fd@subst)) (cons (car aK22fd@subst) (aK22ff@f (cdr aK22fd@subst)))))))) (set! aK2150@remove-dups (lambda (aK22f7@ls) (if (null? aK22f7@ls) '() (if (memq (car aK22f7@ls) (cdr aK22f7@ls)) (aK2150@remove-dups (cdr aK22f7@ls)) (cons (car aK22f7@ls) (aK2150@remove-dups (cdr aK22f7@ls))))))) (set! aK2152@parse-library-name (lambda (aK220f@spec) (let ((aK2212@subversion? '#f) (aK2214@subversion-pred '#f) (aK2216@version-pred '#f)) (begin (set! aK2212@subversion? (lambda (aK22f3@x) (let ((aK22f5@x (aKe60@syntax->datum aK22f3@x))) (and (integer? aK22f5@x) (exact? aK22f5@x) (>= aK22f5@x '0))))) (set! aK2214@subversion-pred (lambda (aK2293@x*) (let ((aK2295@t aK2293@x*)) (let ((aK2297@ls/false (aKd7a@syntax-dispatch aK2295@t 'any))) (if (and aK2297@ls/false (apply (lambda (aK2299@n) (aK2212@subversion? aK2299@n)) aK2297@ls/false)) (apply (lambda (aK229b@n) (lambda (aK229d@x) (= aK229d@x (aKe60@syntax->datum aK229b@n)))) aK2297@ls/false) (let ((aK229f@t aK2295@t)) (let ((aK22a1@ls/false (aKd7a@syntax-dispatch aK229f@t '(any . each-any)))) (if (and aK22a1@ls/false (apply (lambda (aK22a3@p? aK22a4@sub*) (eq? (aKe60@syntax->datum aK22a3@p?) 'and)) aK22a1@ls/false)) (apply (lambda (aK22a7@p? aK22a8@sub*) (let ((aK22ab@p* (map aK2214@subversion-pred aK22a8@sub*))) (lambda (aK22ad@x) (for-all (lambda (aK22af@p) (aK22af@p aK22ad@x)) aK22ab@p*)))) aK22a1@ls/false) (let ((aK22b1@t aK229f@t)) (let ((aK22b3@ls/false (aKd7a@syntax-dispatch aK22b1@t '(any . each-any)))) (if (and aK22b3@ls/false (apply (lambda (aK22b5@p? aK22b6@sub*) (eq? (aKe60@syntax->datum aK22b5@p?) 'or)) aK22b3@ls/false)) (apply (lambda (aK22b9@p? aK22ba@sub*) (let ((aK22bd@p* (map aK2214@subversion-pred aK22ba@sub*))) (lambda (aK22bf@x) (exists (lambda (aK22c1@p) (aK22c1@p aK22bf@x)) aK22bd@p*)))) aK22b3@ls/false) (let ((aK22c3@t aK22b1@t)) (let ((aK22c5@ls/false (aKd7a@syntax-dispatch aK22c3@t '(any any)))) (if (and aK22c5@ls/false (apply (lambda (aK22c7@p? aK22c8@sub) (eq? (aKe60@syntax->datum aK22c7@p?) 'not)) aK22c5@ls/false)) (apply (lambda (aK22cb@p? aK22cc@sub) (let ((aK22cf@p (aK2214@subversion-pred aK22cc@sub))) (lambda (aK22d1@x) (not (aK22cf@p aK22d1@x))))) aK22c5@ls/false) (let ((aK22d3@t aK22c3@t)) (let ((aK22d5@ls/false (aKd7a@syntax-dispatch aK22d3@t '(any any)))) (if (and aK22d5@ls/false (apply (lambda (aK22d7@p? aK22d8@n) (and (eq? (aKe60@syntax->datum aK22d7@p?) '<=) (aK2212@subversion? aK22d8@n))) aK22d5@ls/false)) (apply (lambda (aK22db@p? aK22dc@n) (lambda (aK22df@x) (<= aK22df@x (aKe60@syntax->datum aK22dc@n)))) aK22d5@ls/false) (let ((aK22e1@t aK22d3@t)) (let ((aK22e3@ls/false (aKd7a@syntax-dispatch aK22e1@t '(any any)))) (if (and aK22e3@ls/false (apply (lambda (aK22e5@p? aK22e6@n) (and (eq? (aKe60@syntax->datum aK22e5@p?) '>=) (aK2212@subversion? aK22e6@n))) aK22e3@ls/false)) (apply (lambda (aK22e9@p? aK22ea@n) (lambda (aK22ed@x) (>= aK22ed@x (aKe60@syntax->datum aK22ea@n)))) aK22e3@ls/false) (let ((aK22ef@t aK22e1@t)) (let ((aK22f1@ls/false (aKd7a@syntax-dispatch aK22ef@t '_))) (if aK22f1@ls/false (apply (lambda () (aKe5a@syntax-violation 'import '"invalid sub-version spec" aK220f@spec aK2293@x*)) aK22f1@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK22ef@t)))))))))))))))))))))))) (set! aK2216@version-pred (lambda (aK2243@x*) (let ((aK2245@t aK2243@x*)) (let ((aK2247@ls/false (aKd7a@syntax-dispatch aK2245@t '()))) (if aK2247@ls/false (apply (lambda () (lambda (aK2249@x) '#t)) aK2247@ls/false) (let ((aK224b@t aK2245@t)) (let ((aK224d@ls/false (aKd7a@syntax-dispatch aK224b@t '(any . each-any)))) (if (and aK224d@ls/false (apply (lambda (aK224f@c aK2250@ver*) (eq? (aKe60@syntax->datum aK224f@c) 'and)) aK224d@ls/false)) (apply (lambda (aK2253@c aK2254@ver*) (let ((aK2257@p* (map aK2216@version-pred aK2254@ver*))) (lambda (aK2259@x) (for-all (lambda (aK225b@p) (aK225b@p aK2259@x)) aK2257@p*)))) aK224d@ls/false) (let ((aK225d@t aK224b@t)) (let ((aK225f@ls/false (aKd7a@syntax-dispatch aK225d@t '(any . each-any)))) (if (and aK225f@ls/false (apply (lambda (aK2261@c aK2262@ver*) (eq? (aKe60@syntax->datum aK2261@c) 'or)) aK225f@ls/false)) (apply (lambda (aK2265@c aK2266@ver*) (let ((aK2269@p* (map aK2216@version-pred aK2266@ver*))) (lambda (aK226b@x) (exists (lambda (aK226d@p) (aK226d@p aK226b@x)) aK2269@p*)))) aK225f@ls/false) (let ((aK226f@t aK225d@t)) (let ((aK2271@ls/false (aKd7a@syntax-dispatch aK226f@t '(any any)))) (if (and aK2271@ls/false (apply (lambda (aK2273@c aK2274@ver) (eq? (aKe60@syntax->datum aK2273@c) 'not)) aK2271@ls/false)) (apply (lambda (aK2277@c aK2278@ver) (let ((aK227b@p (aK2216@version-pred aK2278@ver))) (lambda (aK227d@x) (not (aK227b@p aK227d@x))))) aK2271@ls/false) (let ((aK227f@t aK226f@t)) (let ((aK2281@ls/false (aKd7a@syntax-dispatch aK227f@t 'each-any))) (if aK2281@ls/false (apply (lambda (aK2283@sub*) (let ((aK2285@p* (map aK2214@subversion-pred aK2283@sub*))) (lambda (aK2287@x) (let aK228d@f ((aK2289@p* aK2285@p*) (aK228a@x aK2287@x)) (if (null? aK2289@p*) '#t (if (null? aK228a@x) '#f (and ((car aK2289@p*) (car aK228a@x)) (aK228d@f (cdr aK2289@p*) (cdr aK228a@x))))))))) aK2281@ls/false) (let ((aK228f@t aK227f@t)) (let ((aK2291@ls/false (aKd7a@syntax-dispatch aK228f@t '_))) (if aK2291@ls/false (apply (lambda () (aKe5a@syntax-violation 'import '"invalid version spec" aK220f@spec aK2243@x*)) aK2291@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK228f@t))))))))))))))))))))) (let aK2219@f ((aK2217@x aK220f@spec)) (let ((aK221b@t aK2217@x)) (let ((aK221d@ls/false (aKd7a@syntax-dispatch aK221b@t '(each-any)))) (if aK221d@ls/false (apply (lambda (aK221f@version-spec*) (values '() (aK2216@version-pred aK221f@version-spec*))) aK221d@ls/false) (let ((aK2221@t aK221b@t)) (let ((aK2223@ls/false (aKd7a@syntax-dispatch aK2221@t '(any . any)))) (if (and aK2223@ls/false (apply (lambda (aK2225@x aK2226@x*) (aK2144@idsyn? aK2225@x)) aK2223@ls/false)) (apply (lambda (aK2229@x aK222a@x*) (call-with-values (lambda () (aK2219@f aK222a@x*)) (lambda (aK2231@aK222e aK2232@aK2230) (let ((aK2235@pred aK2232@aK2230) (aK2236@name aK2231@aK222e)) (values (cons (aKe60@syntax->datum aK2229@x) aK2236@name) aK2235@pred))))) aK2223@ls/false) (let ((aK2239@t aK2221@t)) (let ((aK223b@ls/false (aKd7a@syntax-dispatch aK2239@t '()))) (if aK223b@ls/false (apply (lambda () (values '() (lambda (aK223d@x) '#t))) aK223b@ls/false) (let ((aK223f@t aK2239@t)) (let ((aK2241@ls/false (aKd7a@syntax-dispatch aK223f@t '_))) (if aK2241@ls/false (apply (lambda () (aKe5a@syntax-violation '#f '"invalid import spec" aK220f@spec)) aK2241@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK223f@t)))))))))))))))))) (set! aK2154@import-library (lambda (aK21ff@spec*) (call-with-values (lambda () (aK2152@parse-library-name aK21ff@spec*)) (lambda (aK2205@aK2202 aK2206@aK2204) (let ((aK2209@pred aK2206@aK2204) (aK220a@name aK2205@aK2202)) (begin (if (null? aK220a@name) (aKe5a@syntax-violation 'import '"empty library name" aK21ff@spec*) (void)) (let ((aK220d@lib (aK982@aK7c9@find-library-by-name aK220a@name))) (begin (if (not aK220d@lib) (aKe5a@syntax-violation 'import '"cannot find library with required name" aK220a@name) (void)) (if (not (aK2209@pred (aK95c@aK77d@library-version aK220d@lib))) (aKe5a@syntax-violation 'import '"library does not satisfy version specification" aK21ff@spec* aK220d@lib) (void)) ((aKde6@imp-collector) aK220d@lib) (aK964@aK78d@library-subst aK220d@lib))))))))) (set! aK2156@get-import (lambda (aK2171@spec) (let ((aK2173@t aK2171@spec)) (let ((aK2175@ls/false (aKd7a@syntax-dispatch aK2173@t '(any . each-any)))) (if (and aK2175@ls/false (apply (lambda (aK2177@x aK2178@x*) (not (memq (aKe60@syntax->datum aK2177@x) '(for rename except only prefix library)))) aK2175@ls/false)) (apply (lambda (aK217b@x aK217c@x*) (aK2154@import-library (cons aK217b@x aK217c@x*))) aK2175@ls/false) (let ((aK217f@t aK2173@t)) (let ((aK2181@ls/false (aKd7a@syntax-dispatch aK217f@t '(any any . #(each (any any)))))) (if (and aK2181@ls/false (apply (lambda (aK2183@rename aK2184@isp aK2185@old* aK2186@new*) (and (eq? (aKe60@syntax->datum aK2183@rename) 'rename) (for-all aK2144@idsyn? aK2185@old*) (for-all aK2144@idsyn? aK2186@new*))) aK2181@ls/false)) (apply (lambda (aK218b@rename aK218c@isp aK218d@old* aK218e@new*) (let ((aK2193@subst (aK2156@get-import aK218c@isp)) (aK2194@old* (map aKe60@syntax->datum aK218d@old*)) (aK2195@new* (map aKe60@syntax->datum aK218e@new*))) (let ((aK2199@old-label* (aK214c@find* aK2194@old* aK2193@subst))) (let ((aK219b@subst (aK214e@rem* aK2194@old* aK2193@subst))) (aK2148@merge-substs (map cons aK2195@new* aK2199@old-label*) aK219b@subst))))) aK2181@ls/false) (let ((aK219d@t aK217f@t)) (let ((aK219f@ls/false (aKd7a@syntax-dispatch aK219d@t '(any any . each-any)))) (if (and aK219f@ls/false (apply (lambda (aK21a1@except aK21a2@isp aK21a3@sym*) (and (eq? (aKe60@syntax->datum aK21a1@except) 'except) (for-all aK2144@idsyn? aK21a3@sym*))) aK219f@ls/false)) (apply (lambda (aK21a7@except aK21a8@isp aK21a9@sym*) (let ((aK21ad@subst (aK2156@get-import aK21a8@isp))) (aK214e@rem* (map aKe60@syntax->datum aK21a9@sym*) aK21ad@subst))) aK219f@ls/false) (let ((aK21af@t aK219d@t)) (let ((aK21b1@ls/false (aKd7a@syntax-dispatch aK21af@t '(any any . each-any)))) (if (and aK21b1@ls/false (apply (lambda (aK21b3@only aK21b4@isp aK21b5@sym*) (and (eq? (aKe60@syntax->datum aK21b3@only) 'only) (for-all aK2144@idsyn? aK21b5@sym*))) aK21b1@ls/false)) (apply (lambda (aK21b9@only aK21ba@isp aK21bb@sym*) (let ((aK21bf@subst (aK2156@get-import aK21ba@isp)) (aK21c0@sym* (map aKe60@syntax->datum aK21bb@sym*))) (let ((aK21c3@sym* (aK2150@remove-dups aK21c0@sym*))) (let ((aK21c5@lab* (aK214c@find* aK21c3@sym* aK21bf@subst))) (map cons aK21c3@sym* aK21c5@lab*))))) aK21b1@ls/false) (let ((aK21c7@t aK21af@t)) (let ((aK21c9@ls/false (aKd7a@syntax-dispatch aK21c7@t '(any any any)))) (if (and aK21c9@ls/false (apply (lambda (aK21cb@prefix aK21cc@isp aK21cd@p) (and (eq? (aKe60@syntax->datum aK21cb@prefix) 'prefix) (aK2144@idsyn? aK21cd@p))) aK21c9@ls/false)) (apply (lambda (aK21d1@prefix aK21d2@isp aK21d3@p) (let ((aK21d7@subst (aK2156@get-import aK21d2@isp)) (aK21d8@prefix (symbol->string (aKe60@syntax->datum aK21d3@p)))) (map (lambda (aK21db@x) (cons (string->symbol (string-append aK21d8@prefix (symbol->string (car aK21db@x)))) (cdr aK21db@x))) aK21d7@subst))) aK21c9@ls/false) (let ((aK21dd@t aK21c7@t)) (let ((aK21df@ls/false (aKd7a@syntax-dispatch aK21dd@t '(any each-any)))) (if (and aK21df@ls/false (apply (lambda (aK21e1@library aK21e2@spec*) (eq? (aKe60@syntax->datum aK21e1@library) 'library)) aK21df@ls/false)) (apply (lambda (aK21e5@library aK21e6@spec*) (aK2154@import-library aK21e6@spec*)) aK21df@ls/false) (let ((aK21e9@t aK21dd@t)) (let ((aK21eb@ls/false (aKd7a@syntax-dispatch aK21e9@t '(any any . any)))) (if (and aK21eb@ls/false (apply (lambda (aK21ed@for aK21ee@isp aK21ef@rest) (eq? (aKe60@syntax->datum aK21ed@for) 'for)) aK21eb@ls/false)) (apply (lambda (aK21f3@for aK21f4@isp aK21f5@rest) (aK2156@get-import aK21f4@isp)) aK21eb@ls/false) (let ((aK21f9@t aK21e9@t)) (let ((aK21fb@ls/false (aKd7a@syntax-dispatch aK21f9@t 'any))) (if aK21fb@ls/false (apply (lambda (aK21fd@spec) (aKe5a@syntax-violation 'import '"invalid import spec" aK21fd@spec)) aK21fb@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK21f9@t))))))))))))))))))))))))))) (set! aK2158@add-imports! (lambda (aK2161@imp aK2162@h) (let ((aK2165@subst (aK2156@get-import aK2161@imp))) (for-each (lambda (aK2167@x) (let ((aK2169@name (car aK2167@x)) (aK216a@label (cdr aK2167@x))) (let ((aK216d@t (hashtable-ref aK2162@h aK2169@name '#f))) (if aK216d@t ((lambda (aK216f@l) (if (not (eq? aK216f@l aK216a@label)) (aK2146@dup-error aK2169@name) (void))) aK216d@t) (hashtable-set! aK2162@h aK2169@name aK216a@label))))) aK2165@subst)))) (lambda (aK2159@imp*) (let aK215f@f ((aK215b@imp* aK2159@imp*) (aK215c@h (make-eq-hashtable))) (if (null? aK215b@imp*) (hashtable-entries aK215c@h) (begin (aK2158@add-imports! (car aK215b@imp*) aK215c@h) (aK215f@f (cdr aK215b@imp*) aK215c@h)))))))) (set! aK287b@aKddc@parse-import-spec* aKddc@parse-import-spec*) (set! aKdde@make-top-rib (lambda (aK234f@names aK2350@labels) (let ((aK2353@rib (aKb27@make-empty-rib))) (begin (vector-for-each (lambda (aK2355@name aK2356@label) (begin (if (not (symbol? aK2355@name)) (error 'make-top-rib '"BUG: not a symbol" aK2355@name) (void)) (aKb2b@extend-rib/nc! aK2353@rib (make-simple-struct 'stx '5 (list aK2355@name aKaf7@top-mark* '() '())) aK2356@label))) aK234f@names aK2350@labels) aK2353@rib)))) (set! aK287c@aKdde@make-top-rib aKdde@make-top-rib) (set! aKde0@make-collector (lambda () (let ((aK2359@ls '())) (lambda aK235d (let ((aK235e (length aK235d))) (if (= aK235e '0) (apply (lambda () aK2359@ls) aK235d) (if (= aK235e '1) (apply (lambda (aK235b@x) (set! aK2359@ls (aKaf0@set-cons aK235b@x aK2359@ls))) aK235d) (error 'apply '"invalid arg count")))))))) (set! aK287d@aKde0@make-collector aKde0@make-collector) (set! aKde2@inv-collector (aK6bd@aK59c@make-parameter (lambda aK235f@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (aK2361@x) (begin (if (not (procedure? aK2361@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" aK2361@x) (void)) aK2361@x)))) (set! aK287e@aKde2@inv-collector aKde2@inv-collector) (set! aKde4@vis-collector (aK6bd@aK59c@make-parameter (lambda aK2363@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (aK2365@x) (begin (if (not (procedure? aK2365@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" aK2365@x) (void)) aK2365@x)))) (set! aK287f@aKde4@vis-collector aKde4@vis-collector) (set! aKde6@imp-collector (aK6bd@aK59c@make-parameter (lambda aK2367@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (aK2369@x) (begin (if (not (procedure? aK2369@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" aK2369@x) (void)) aK2369@x)))) (set! aK2880@aKde6@imp-collector aKde6@imp-collector) (set! aKde8@chi-library-internal (lambda (aK236b@e* aK236c@rib aK236d@top?) (call-with-values (lambda () (aKdd2@chi-body* aK236b@e* '() '() '() '() '() '() '() aK236c@rib aK236d@top?)) (lambda (aK2381@aK2372 aK2382@aK2374 aK2383@aK2376 aK2384@aK2378 aK2385@aK237a aK2386@aK237c aK2387@aK237e aK2388@aK2380) (let ((aK2391@exp* aK2388@aK2380) (aK2392@_kwd* aK2387@aK237e) (aK2393@mod** aK2386@aK237c) (aK2394@rhs* aK2385@aK237a) (aK2395@lex* aK2384@aK2378) (aK2396@mr aK2383@aK2376) (aK2397@r aK2382@aK2374) (aK2398@e* aK2381@aK2372)) (values (append (apply append (reverse aK2393@mod**)) aK2398@e*) aK2397@r aK2396@mr (reverse aK2395@lex*) (reverse aK2394@rhs*) aK2391@exp*)))))) (set! aK2881@aKde8@chi-library-internal aKde8@chi-library-internal) (set! aKdea@chi-interaction-expr (lambda (aK23a1@e aK23a2@rib aK23a3@r) (call-with-values (lambda () (aKdd2@chi-body* (list aK23a1@e) aK23a3@r aK23a3@r '() '() '() '() '() aK23a2@rib '#t)) (lambda (aK23b7@aK23a8 aK23b8@aK23aa aK23b9@aK23ac aK23ba@aK23ae aK23bb@aK23b0 aK23bc@aK23b2 aK23bd@aK23b4 aK23be@aK23b6) (let ((aK23c7@_exp* aK23be@aK23b6) (aK23c8@_kwd* aK23bd@aK23b4) (aK23c9@mod** aK23bc@aK23b2) (aK23ca@rhs* aK23bb@aK23b0) (aK23cb@lex* aK23ba@aK23ae) (aK23cc@mr aK23b9@aK23ac) (aK23cd@r aK23b8@aK23aa) (aK23ce@e* aK23b7@aK23a8)) (let ((aK23d7@e* (aKdaa@expand-interaction-rhs*/init* (reverse aK23cb@lex*) (reverse aK23ca@rhs*) (append (apply append (reverse aK23c9@mod**)) aK23ce@e*) aK23cd@r aK23cc@mr))) (let ((aK23d9@e (if (null? aK23d7@e*) (aKad9@aKa34@build-void) (if (null? (cdr aK23d7@e*)) (car aK23d7@e*) (aKad8@aKa32@build-sequence '#f aK23d7@e*))))) (values aK23d9@e aK23cd@r)))))))) (set! aK2882@aKdea@chi-interaction-expr aKdea@chi-interaction-expr) (set! aKdec@library-body-expander (lambda (aK23db@name aK23dc@main-exp* aK23dd@imp* aK23de@b* aK23df@top?) (let ((aK23e6@itc '#f)) (begin (set! aK23e6@itc (aKde0@make-collector)) (let ((aK23ef@aK23e8 aKde6@imp-collector) (aK23f0@aK23ea aKe6a@top-level-context) (aK23f1@aK23ec aK23e6@itc) (aK23f2@aK23ee '#f)) (let ((aK23f7@swap (lambda () (begin (let ((aK23f9@t (aK23ef@aK23e8))) (begin (aK23ef@aK23e8 aK23f1@aK23ec) (set! aK23f1@aK23ec aK23f9@t))) (let ((aK23fb@t (aK23f0@aK23ea))) (begin (aK23f0@aK23ea aK23f2@aK23ee) (set! aK23f2@aK23ee aK23fb@t))))))) (dynamic-wind aK23f7@swap (lambda () (call-with-values (lambda () (aKddc@parse-import-spec* aK23dd@imp*)) (lambda (aK2401@aK23fe aK2402@aK2400) (let ((aK2405@subst-labels aK2402@aK2400) (aK2406@subst-names aK2401@aK23fe)) (let ((aK2409@rib (aKdde@make-top-rib aK2406@subst-names aK2405@subst-labels))) (let ((aK240c@wrap '#f)) (begin (set! aK240c@wrap (lambda (aK2487@x) (make-simple-struct 'stx '5 (list aK2487@x aKaf7@top-mark* (list aK2409@rib) '())))) (let ((aK240d@b* (map aK240c@wrap aK23de@b*)) (aK240e@main-exp* (map aK240c@wrap aK23dc@main-exp*)) (aK240f@rtc (aKde0@make-collector)) (aK2410@vtc (aKde0@make-collector))) (let ((aK241d@aK2416 aKde2@inv-collector) (aK241e@aK2418 aKde4@vis-collector) (aK241f@aK241a aK240f@rtc) (aK2420@aK241c aK2410@vtc)) (let ((aK2425@swap (lambda () (begin (let ((aK2427@t (aK241d@aK2416))) (begin (aK241d@aK2416 aK241f@aK241a) (set! aK241f@aK241a aK2427@t))) (let ((aK2429@t (aK241e@aK2418))) (begin (aK241e@aK2418 aK2420@aK241c) (set! aK2420@aK241c aK2429@t))))))) (dynamic-wind aK2425@swap (lambda () (call-with-values (lambda () (aKde8@chi-library-internal aK240d@b* aK2409@rib aK23df@top?)) (lambda (aK2437@aK242c aK2438@aK242e aK2439@aK2430 aK243a@aK2432 aK243b@aK2434 aK243c@aK2436) (let ((aK2443@internal-exp* aK243c@aK2436) (aK2444@rhs* aK243b@aK2434) (aK2445@lex* aK243a@aK2432) (aK2446@mr aK2439@aK2430) (aK2447@r aK2438@aK242e) (aK2448@init* aK2437@aK242c)) (call-with-values (lambda () (aKdd6@parse-exports (append aK240e@main-exp* aK2443@internal-exp*))) (lambda (aK2453@aK2450 aK2454@aK2452) (let ((aK2457@exp-id* aK2454@aK2452) (aK2458@exp-name* aK2453@aK2450)) (begin (aKb2f@seal-rib! aK2409@rib) (let ((aK245b@init* (aKd98@chi-expr* aK2448@init* aK2447@r aK2446@mr))) (let ((aK245d@rhs* (aKdac@chi-rhs* aK2444@rhs* aK2447@r aK2446@mr))) (begin (aKb31@unseal-rib! aK2409@rib) (let ((aK245f@loc* (map aKafd@gen-global aK2445@lex*)) (aK2460@export-subst (aKe44@make-export-subst aK2458@exp-name* aK2457@exp-id*))) (let ((aK2464@errstr '#f)) (begin (set! aK2464@errstr '"attempt to export mutated variable") (call-with-values (lambda () (aKe46@make-export-env/macros aK2445@lex* aK245f@loc* aK2447@r)) (lambda (aK246b@aK2466 aK246c@aK2468 aK246d@aK246a) (let ((aK2471@macro* aK246d@aK246a) (aK2472@global* aK246c@aK2468) (aK2473@export-env aK246b@aK2466)) (begin (for-each (lambda (aK2477@s) (let ((aK2479@name (car aK2477@s)) (aK247a@label (cdr aK2477@s))) (let ((aK247d@p (assq aK247a@label aK2473@export-env))) (if aK247d@p (let ((aK247f@b (cdr aK247d@p))) (let ((aK2481@type (car aK247f@b))) (if (eq? aK2481@type 'mutable) (aKe5a@syntax-violation 'export aK2464@errstr aK2479@name) (void)))) (void))))) aK2460@export-subst) (let ((aK2483@invoke-body (aKade@aKa3e@build-library-letrec* '#f aK23db@name aK2445@lex* aK245f@loc* aK245d@rhs* (if (null? aK245b@init*) (aKad9@aKa34@build-void) (aKad8@aKa32@build-sequence '#f aK245b@init*)))) (aK2484@invoke-definitions (map aKad5@aK991@build-global-define (map cdr aK2472@global*)))) (values (aK23e6@itc) (aK240f@rtc) (aK2410@vtc) (aKad8@aKa32@build-sequence '#f (append aK2484@invoke-definitions (list aK2483@invoke-body))) aK2471@macro* aK2460@export-subst aK2473@export-env)))))))))))))))))))) aK2425@swap))))))))))) aK23f7@swap))))))) (set! aK2883@aKdec@library-body-expander aKdec@library-body-expander) (set! aKdee@core-library-expander (lambda (aK2489@e aK248a@verify-name) (call-with-values (lambda () (aKdda@parse-library aK2489@e)) (lambda (aK2495@aK248e aK2496@aK2490 aK2497@aK2492 aK2498@aK2494) (let ((aK249d@b* aK2498@aK2494) (aK249e@imp* aK2497@aK2492) (aK249f@exp* aK2496@aK2490) (aK24a0@name* aK2495@aK248e)) (call-with-values (lambda () (aKdd8@parse-library-name aK24a0@name*)) (lambda (aK24a9@aK24a6 aK24aa@aK24a8) (let ((aK24ad@ver aK24aa@aK24a8) (aK24ae@name aK24a9@aK24a6)) (begin (aK248a@verify-name aK24ae@name) (call-with-values (lambda () (aKdec@library-body-expander aK24ae@name aK249f@exp* aK249e@imp* aK249d@b* '#f)) (lambda (aK24bf@aK24b2 aK24c0@aK24b4 aK24c1@aK24b6 aK24c2@aK24b8 aK24c3@aK24ba aK24c4@aK24bc aK24c5@aK24be) (let ((aK24cd@export-env aK24c5@aK24be) (aK24ce@export-subst aK24c4@aK24bc) (aK24cf@visit-code aK24c3@aK24ba) (aK24d0@invoke-code aK24c2@aK24b8) (aK24d1@visit-req* aK24c1@aK24b6) (aK24d2@invoke-req* aK24c0@aK24b4) (aK24d3@imp* aK24bf@aK24b2)) (values aK24ae@name aK24ad@ver aK24d3@imp* aK24d2@invoke-req* aK24d1@visit-req* aK24d0@invoke-code aK24cf@visit-code aK24ce@export-subst aK24cd@export-env))))))))))))) (set! aK2884@aKdee@core-library-expander aKdee@core-library-expander) (set! aKdf0@parse-top-level-program (lambda (aK24db@e*) (let ((aK24dd@t aK24db@e*)) (let ((aK24df@ls/false (aKd7a@syntax-dispatch aK24dd@t '((any . each-any) . each-any)))) (if (and aK24df@ls/false (apply (lambda (aK24e1@import aK24e2@imp* aK24e3@b*) (eq? (aKe60@syntax->datum aK24e1@import) 'import)) aK24df@ls/false)) (apply (lambda (aK24e7@import aK24e8@imp* aK24e9@b*) (values aK24e8@imp* aK24e9@b*)) aK24df@ls/false) (let ((aK24ed@t aK24dd@t)) (let ((aK24ef@ls/false (aKd7a@syntax-dispatch aK24ed@t '((any . any) . any)))) (if (and aK24ef@ls/false (apply (lambda (aK24f1@import aK24f2@x aK24f3@y) (eq? (aKe60@syntax->datum aK24f1@import) 'import)) aK24ef@ls/false)) (apply (lambda (aK24f7@import aK24f8@x aK24f9@y) (aKe5a@syntax-violation 'expander '"invalid syntax of top-level program" (aKb6d@syntax-car aK24db@e*))) aK24ef@ls/false) (let ((aK24fd@t aK24ed@t)) (let ((aK24ff@ls/false (aKd7a@syntax-dispatch aK24fd@t '_))) (if aK24ff@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) aK24ff@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK24fd@t)))))))))))) (set! aK2885@aKdf0@parse-top-level-program aKdf0@parse-top-level-program) (set! aKdf2@top-level-expander (lambda (aK2501@e*) (call-with-values (lambda () (aKdf0@parse-top-level-program aK2501@e*)) (lambda (aK2507@aK2504 aK2508@aK2506) (let ((aK250b@b* aK2508@aK2506) (aK250c@imp* aK2507@aK2504)) (call-with-values (lambda () (aKdec@library-body-expander '() '() aK250c@imp* aK250b@b* '#t)) (lambda (aK251d@aK2510 aK251e@aK2512 aK251f@aK2514 aK2520@aK2516 aK2521@aK2518 aK2522@aK251a aK2523@aK251c) (let ((aK252b@export-env aK2523@aK251c) (aK252c@export-subst aK2522@aK251a) (aK252d@visit-code aK2521@aK2518) (aK252e@invoke-code aK2520@aK2516) (aK252f@visit-req* aK251f@aK2514) (aK2530@invoke-req* aK251e@aK2512) (aK2531@imp* aK251d@aK2510)) (values aK2530@invoke-req* aK252e@invoke-code))))))))) (set! aK2886@aKdf2@top-level-expander aKdf2@top-level-expander) (set! aKdf4@rp (aK6ba@aK596@make-record-printer 'env (lambda (aK2539@x aK253a@p aK253b@wr) (display '"#<environment>" aK253a@p)))) (set! aK2887@aKdf4@rp aKdf4@rp) (set! aKdfe@env? (lambda (aK253f@x) (and (simple-struct? aK253f@x) (eq? (simple-struct-name aK253f@x) 'env)))) (set! aK2888@aKdfe@env? aKdfe@env?) (set! aKe00@env-names (lambda (aK2541@x) (simple-struct-ref aK2541@x '0))) (set! aK2889@aKe00@env-names aKe00@env-names) (set! aKe02@set-env-names! (lambda (aK2543@x aK2544@val) (simple-struct-set! aK2543@x '0 aK2544@val))) (set! aK288a@aKe02@set-env-names! aKe02@set-env-names!) (set! aKe04@env-labels (lambda (aK2547@x) (simple-struct-ref aK2547@x '1))) (set! aK288b@aKe04@env-labels aKe04@env-labels) (set! aKe06@set-env-labels! (lambda (aK2549@x aK254a@val) (simple-struct-set! aK2549@x '1 aK254a@val))) (set! aK288c@aKe06@set-env-labels! aKe06@set-env-labels!) (set! aKe08@env-itc (lambda (aK254d@x) (simple-struct-ref aK254d@x '2))) (set! aK288d@aKe08@env-itc aKe08@env-itc) (set! aKe0a@set-env-itc! (lambda (aK254f@x aK2550@val) (simple-struct-set! aK254f@x '2 aK2550@val))) (set! aK288e@aKe0a@set-env-itc! aKe0a@set-env-itc!) (set! aKe0c@dummy '3) (set! aK288f@aKe0c@dummy aKe0c@dummy) (set! aKe0e@rp (aK6ba@aK596@make-record-printer 'interaction-env (lambda (aK2553@x aK2554@p aK2555@wr) (display '"#<environment>" aK2554@p)))) (set! aK2890@aKe0e@rp aKe0e@rp) (set! aKe18@interaction-env? (lambda (aK2559@x) (and (simple-struct? aK2559@x) (eq? (simple-struct-name aK2559@x) 'interaction-env)))) (set! aK2891@aKe18@interaction-env? aKe18@interaction-env?) (set! aKe1a@interaction-env-rib (lambda (aK255b@x) (simple-struct-ref aK255b@x '0))) (set! aK2892@aKe1a@interaction-env-rib aKe1a@interaction-env-rib) (set! aKe1c@set-interaction-env-rib! (lambda (aK255d@x aK255e@val) (simple-struct-set! aK255d@x '0 aK255e@val))) (set! aK2893@aKe1c@set-interaction-env-rib! aKe1c@set-interaction-env-rib!) (set! aKe1e@interaction-env-r (lambda (aK2561@x) (simple-struct-ref aK2561@x '1))) (set! aK2894@aKe1e@interaction-env-r aKe1e@interaction-env-r) (set! aKe20@set-interaction-env-r! (lambda (aK2563@x aK2564@val) (simple-struct-set! aK2563@x '1 aK2564@val))) (set! aK2895@aKe20@set-interaction-env-r! aKe20@set-interaction-env-r!) (set! aKe22@interaction-env-locs (lambda (aK2567@x) (simple-struct-ref aK2567@x '2))) (set! aK2896@aKe22@interaction-env-locs aKe22@interaction-env-locs) (set! aKe24@set-interaction-env-locs! (lambda (aK2569@x aK256a@val) (simple-struct-set! aK2569@x '2 aK256a@val))) (set! aK2897@aKe24@set-interaction-env-locs! aKe24@set-interaction-env-locs!) (set! aKe26@dummy '3) (set! aK2898@aKe26@dummy aKe26@dummy) (set! aKe28@interaction-environment-symbols (lambda () (aKe30@environment-symbols (aKe68@interaction-environment)))) (set! aK2899@aKe28@interaction-environment-symbols aKe28@interaction-environment-symbols) (set! aKe2a@environment-bindings (lambda (aK256d@e) (vector->list (vector-map (lambda (aK256f@name aK2570@label) (aKe2c@parse-binding (cons aK256f@name (aK988@aK7d5@imported-label->binding aK2570@label)))) (aKe00@env-names aK256d@e) (aKe04@env-labels aK256d@e))))) (set! aK289a@aKe2a@environment-bindings aKe2a@environment-bindings) (set! aKe2c@parse-binding (lambda (aK2573@b) (cons (car aK2573@b) (let ((aK2575@t (cadr aK2573@b))) (if (memv aK2575@t '(core-prim global)) 'procedure (if (memv aK2575@t '(core-macro macro global-macro)) 'syntax (if (memv aK2575@t '($core-rtd)) 'record (if (eq? (car aK2573@b) (cadr aK2573@b)) 'syntax 'unknown)))))))) (set! aK289b@aKe2c@parse-binding aKe2c@parse-binding) (set! aKe2e@environment? (lambda (aK2577@x) (or (aKdfe@env? aK2577@x) (aKe18@interaction-env? aK2577@x)))) (set! aK289c@aKe2e@environment? aKe2e@environment?) (set! aKe30@environment-symbols (lambda (aK2579@x) (if (aKdfe@env? aK2579@x) (vector->list (aKe00@env-names aK2579@x)) (if (aKe18@interaction-env? aK2579@x) (map values (aKb11@rib-sym* (aKe1a@interaction-env-rib aK2579@x))) (assertion-violation 'environment-symbols '"not an environment" aK2579@x))))) (set! aK289d@aKe30@environment-symbols aKe30@environment-symbols) (set! aKe32@environment (lambda aK257b@imp* (let ((aK257d@itc (aKde0@make-collector))) (let ((aK2583@aK2580 aKde6@imp-collector) (aK2584@aK2582 aK257d@itc)) (let ((aK2587@swap (lambda () (let ((aK2589@t (aK2583@aK2580))) (begin (aK2583@aK2580 aK2584@aK2582) (set! aK2584@aK2582 aK2589@t)))))) (dynamic-wind aK2587@swap (lambda () (call-with-values (lambda () (aKddc@parse-import-spec* aK257b@imp*)) (lambda (aK258f@aK258c aK2590@aK258e) (let ((aK2593@subst-labels aK2590@aK258e) (aK2594@subst-names aK258f@aK258c)) (make-simple-struct 'env '4 (list aK2594@subst-names aK2593@subst-labels aK257d@itc)))))) aK2587@swap)))))) (set! aK289e@aKe32@environment aKe32@environment) (set! aKe34@null-environment (lambda (aK2597@n) (begin (if (not (eqv? aK2597@n '5)) (assertion-violation 'null-environment '"not 5" aK2597@n) (void)) (aKe32@environment '(psyntax null-environment-5))))) (set! aK289f@aKe34@null-environment aKe34@null-environment) (set! aKe36@scheme-report-environment (lambda (aK2599@n) (begin (if (not (eqv? aK2599@n '5)) (assertion-violation 'scheme-report-environment '"not 5" aK2599@n) (void)) (aKe32@environment '(psyntax scheme-report-environment-5))))) (set! aK28a0@aKe36@scheme-report-environment aKe36@scheme-report-environment) (set! aKe38@expand (lambda (aK259b@x aK259c@env) (if (aKdfe@env? aK259c@env) (let ((aK259f@rib (aKdde@make-top-rib (aKe00@env-names aK259c@env) (aKe04@env-labels aK259c@env)))) (let ((aK25a1@x (make-simple-struct 'stx '5 (list aK259b@x aKaf7@top-mark* (list aK259f@rib) '()))) (aK25a2@itc (aKe08@env-itc aK259c@env)) (aK25a3@rtc (aKde0@make-collector)) (aK25a4@vtc (aKde0@make-collector))) (let ((aK25a9@x (let ((aK25bb@aK25ac aKe6a@top-level-context) (aK25bc@aK25ae aKde2@inv-collector) (aK25bd@aK25b0 aKde4@vis-collector) (aK25be@aK25b2 aKde6@imp-collector) (aK25bf@aK25b4 '#f) (aK25c0@aK25b6 aK25a3@rtc) (aK25c1@aK25b8 aK25a4@vtc) (aK25c2@aK25ba aK25a2@itc)) (let ((aK25cb@swap (lambda () (begin (let ((aK25cd@t (aK25bb@aK25ac))) (begin (aK25bb@aK25ac aK25bf@aK25b4) (set! aK25bf@aK25b4 aK25cd@t))) (let ((aK25cf@t (aK25bc@aK25ae))) (begin (aK25bc@aK25ae aK25c0@aK25b6) (set! aK25c0@aK25b6 aK25cf@t))) (let ((aK25d1@t (aK25bd@aK25b0))) (begin (aK25bd@aK25b0 aK25c1@aK25b8) (set! aK25c1@aK25b8 aK25d1@t))) (let ((aK25d3@t (aK25be@aK25b2))) (begin (aK25be@aK25b2 aK25c2@aK25ba) (set! aK25c2@aK25ba aK25d3@t))))))) (dynamic-wind aK25cb@swap (lambda () (aKd9c@chi-expr aK25a1@x '() '())) aK25cb@swap))))) (begin (aKb2f@seal-rib! aK259f@rib) (values aK25a9@x (aK25a3@rtc)))))) (if (aKe18@interaction-env? aK259c@env) (let ((aK25d5@rib (aKe1a@interaction-env-rib aK259c@env)) (aK25d6@r (aKe1e@interaction-env-r aK259c@env)) (aK25d7@rtc (aKde0@make-collector))) (let ((aK25db@x (make-simple-struct 'stx '5 (list aK259b@x aKaf7@top-mark* (list aK25d5@rib) '())))) (call-with-values (lambda () (let ((aK25f1@aK25e2 aKe6a@top-level-context) (aK25f2@aK25e4 aKde2@inv-collector) (aK25f3@aK25e6 aKde4@vis-collector) (aK25f4@aK25e8 aKde6@imp-collector) (aK25f5@aK25ea aK259c@env) (aK25f6@aK25ec aK25d7@rtc) (aK25f7@aK25ee (aKde0@make-collector)) (aK25f8@aK25f0 (aKde0@make-collector))) (let ((aK2601@swap (lambda () (begin (let ((aK2603@t (aK25f1@aK25e2))) (begin (aK25f1@aK25e2 aK25f5@aK25ea) (set! aK25f5@aK25ea aK2603@t))) (let ((aK2605@t (aK25f2@aK25e4))) (begin (aK25f2@aK25e4 aK25f6@aK25ec) (set! aK25f6@aK25ec aK2605@t))) (let ((aK2607@t (aK25f3@aK25e6))) (begin (aK25f3@aK25e6 aK25f7@aK25ee) (set! aK25f7@aK25ee aK2607@t))) (let ((aK2609@t (aK25f4@aK25e8))) (begin (aK25f4@aK25e8 aK25f8@aK25f0) (set! aK25f8@aK25f0 aK2609@t))))))) (dynamic-wind aK2601@swap (lambda () (aKdea@chi-interaction-expr aK25db@x aK25d5@rib aK25d6@r)) aK2601@swap)))) (lambda (aK260b@aK25de aK260c@aK25e0) (let ((aK260f@r^ aK260c@aK25e0) (aK2610@e aK260b@aK25de)) (begin (aKe20@set-interaction-env-r! aK259c@env aK260f@r^) (values aK2610@e (aK25d7@rtc)))))))) (assertion-violation 'expand '"not an environment" aK259c@env))))) (set! aK28a1@aKe38@expand aKe38@expand) (set! aKe3a@eval (lambda (aK2613@x aK2614@env) (begin (if (not (aKe2e@environment? aK2614@env)) (error 'eval '"not an environment" aK2614@env) (void)) (call-with-values (lambda () (aKe38@expand aK2613@x aK2614@env)) (lambda (aK261b@aK2618 aK261c@aK261a) (let ((aK261f@invoke-req* aK261c@aK261a) (aK2620@x aK261b@aK2618)) (begin (for-each aK989@aK7d7@invoke-library aK261f@invoke-req*) (eval-core (aK713@aK6cb@expanded->core aK2620@x))))))))) (set! aK28a2@aKe3a@eval aKe3a@eval) (set! aKe3c@library-expander (lambda aK2691 (let ((aK2692 (length aK2691))) (if (= aK2692 '3) (apply (lambda (aK2623@x aK2624@filename aK2625@verify-name) (let ((aK262a@build-visit-code '#f) (aK262c@visit! '#f)) (begin (set! aK262a@build-visit-code (lambda (aK267f@macro*) (if (null? aK267f@macro*) (aKad9@aKa34@build-void) (aKad8@aKa32@build-sequence '#f (map (lambda (aK2681@x) (let ((aK2683@loc (car aK2681@x)) (aK2684@src (cddr aK2681@x))) (list 'set! aK2683@loc aK2684@src))) aK267f@macro*))))) (set! aK262c@visit! (lambda (aK2677@macro*) (for-each (lambda (aK2679@x) (let ((aK267b@loc (car aK2679@x)) (aK267c@proc (cadr aK2679@x))) (set-symbol-value! aK267b@loc aK267c@proc))) aK2677@macro*))) (call-with-values (lambda () (aKdee@core-library-expander aK2623@x aK2625@verify-name)) (lambda (aK263f@aK262e aK2640@aK2630 aK2641@aK2632 aK2642@aK2634 aK2643@aK2636 aK2644@aK2638 aK2645@aK263a aK2646@aK263c aK2647@aK263e) (let ((aK2651@export-env aK2647@aK263e) (aK2652@export-subst aK2646@aK263c) (aK2653@macro* aK2645@aK263a) (aK2654@invoke-code aK2644@aK2638) (aK2655@vis* aK2643@aK2636) (aK2656@inv* aK2642@aK2634) (aK2657@imp* aK2641@aK2632) (aK2658@ver aK2640@aK2630) (aK2659@name aK263f@aK262e)) (let ((aK2663@id (gensym)) (aK2664@name aK2659@name) (aK2665@ver aK2658@ver) (aK2666@imp* (map aK98d@aK7df@library-spec aK2657@imp*)) (aK2667@vis* (map aK98d@aK7df@library-spec aK2655@vis*)) (aK2668@inv* (map aK98d@aK7df@library-spec aK2656@inv*)) (aK2669@visit-proc (lambda () (aK262c@visit! aK2653@macro*))) (aK266a@invoke-proc (lambda () (eval-core (aK713@aK6cb@expanded->core aK2654@invoke-code)))) (aK266b@visit-code (aK262a@build-visit-code aK2653@macro*)) (aK266c@invoke-code aK2654@invoke-code)) (begin (aK987@aK7d3@install-library aK2663@id aK2664@name aK2665@ver aK2666@imp* aK2667@vis* aK2668@inv* aK2652@export-subst aK2651@export-env aK2669@visit-proc aK266a@invoke-proc aK266b@visit-code aK266c@invoke-code '#t aK2624@filename) (values aK2663@id aK2664@name aK2665@ver aK2666@imp* aK2667@vis* aK2668@inv* aK266c@invoke-code aK266b@visit-code aK2652@export-subst aK2651@export-env))))))))) aK2691) (if (= aK2692 '2) (apply (lambda (aK2687@x aK2688@filename) (aKe3c@library-expander aK2687@x aK2688@filename (lambda (aK268b@x) (values)))) aK2691) (if (= aK2692 '1) (apply (lambda (aK268d@x) (aKe3c@library-expander aK268d@x '#f (lambda (aK268f@x) (values)))) aK2691) (error 'apply '"invalid arg count"))))))) (set! aK28a3@aKe3c@library-expander aKe3c@library-expander) (set! aKe3e@boot-library-expand (lambda (aK2693@x) (call-with-values (lambda () (aKe3c@library-expander aK2693@x)) (lambda (aK26a9@aK2696 aK26aa@aK2698 aK26ab@aK269a aK26ac@aK269c aK26ad@aK269e aK26ae@aK26a0 aK26af@aK26a2 aK26b0@aK26a4 aK26b1@aK26a6 aK26b2@aK26a8) (let ((aK26bd@export-env aK26b2@aK26a8) (aK26be@export-subst aK26b1@aK26a6) (aK26bf@visit-code aK26b0@aK26a4) (aK26c0@invoke-code aK26af@aK26a2) (aK26c1@inv* aK26ae@aK26a0) (aK26c2@vis* aK26ad@aK269e) (aK26c3@imp* aK26ac@aK269c) (aK26c4@ver aK26ab@aK269a) (aK26c5@name aK26aa@aK2698) (aK26c6@id aK26a9@aK2696)) (values aK26c5@name aK26c0@invoke-code aK26be@export-subst aK26bd@export-env)))))) (set! aK28a4@aKe3e@boot-library-expand aKe3e@boot-library-expand) (set! aKe40@rev-map-append (lambda (aK26d1@f aK26d2@ls aK26d3@ac) (if (null? aK26d2@ls) aK26d3@ac (aKe40@rev-map-append aK26d1@f (cdr aK26d2@ls) (cons (aK26d1@f (car aK26d2@ls)) aK26d3@ac))))) (set! aK28a5@aKe40@rev-map-append aKe40@rev-map-append) (set! aKe42@build-exports (lambda (aK26d7@lex*+loc* aK26d8@init*) (aKad8@aKa32@build-sequence '#f (cons (aKad9@aKa34@build-void) (aKe40@rev-map-append (lambda (aK26db@x) (list 'set! (cdr aK26db@x) (car aK26db@x))) aK26d7@lex*+loc* aK26d8@init*))))) (set! aK28a6@aKe42@build-exports aKe42@build-exports) (set! aKe44@make-export-subst (lambda (aK26dd@name* aK26de@id*) (map (lambda (aK26e1@name aK26e2@id) (let ((aK26e5@label (aKb89@id->label aK26e2@id))) (begin (if (not aK26e5@label) (aKe5a@syntax-violation '#f '"cannot export unbound identifier" aK26e2@id) (void)) (cons aK26e1@name aK26e5@label)))) aK26dd@name* aK26de@id*))) (set! aK28a7@aKe44@make-export-subst aKe44@make-export-subst) (set! aKe46@make-export-env/macros (lambda (aK26e7@lex* aK26e8@loc* aK26e9@r) (let ((aK26ee@lookup '#f)) (begin (set! aK26ee@lookup (lambda (aK270b@x) (let aK2713@f ((aK270d@x aK270b@x) (aK270e@lex* aK26e7@lex*) (aK270f@loc* aK26e8@loc*)) (if (pair? aK270e@lex*) (if (eq? aK270d@x (car aK270e@lex*)) (car aK270f@loc*) (aK2713@f aK270d@x (cdr aK270e@lex*) (cdr aK270f@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let aK26f7@f ((aK26ef@r aK26e9@r) (aK26f0@env '()) (aK26f1@global* '()) (aK26f2@macro* '())) (if (null? aK26ef@r) (values aK26f0@env aK26f1@global* aK26f2@macro*) (let ((aK26f9@x (car aK26ef@r))) (let ((aK26fb@label (car aK26f9@x)) (aK26fc@b (cdr aK26f9@x))) (let ((aK26ff@t (aKb8f@binding-type aK26fc@b))) (if (memv aK26ff@t '(lexical)) (let ((aK2701@v (aKb91@binding-value aK26fc@b))) (let ((aK2703@loc (aK26ee@lookup (aKd04@lexical-var aK2701@v))) (aK2704@type (if (aKd06@lexical-mutable? aK2701@v) 'mutable 'global))) (aK26f7@f (cdr aK26ef@r) (cons (cons* aK26fb@label aK2704@type aK2703@loc) aK26f0@env) (cons (cons (aKd04@lexical-var aK2701@v) aK2703@loc) aK26f1@global*) aK26f2@macro*))) (if (memv aK26ff@t '(local-macro)) (let ((aK2707@loc (gensym))) (aK26f7@f (cdr aK26ef@r) (cons (cons* aK26fb@label 'global-macro aK2707@loc) aK26f0@env) aK26f1@global* (cons (cons aK2707@loc (aKb91@binding-value aK26fc@b)) aK26f2@macro*))) (if (memv aK26ff@t '(local-macro!)) (let ((aK2709@loc (gensym))) (aK26f7@f (cdr aK26ef@r) (cons (cons* aK26fb@label 'global-macro! aK2709@loc) aK26f0@env) aK26f1@global* (cons (cons aK2709@loc (aKb91@binding-value aK26fc@b)) aK26f2@macro*))) (if (memv aK26ff@t '($rtd $module)) (aK26f7@f (cdr aK26ef@r) (cons aK26f9@x aK26f0@env) aK26f1@global* aK26f2@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (aKb8f@binding-type aK26fc@b) (aKb91@binding-value aK26fc@b))))))))))))))) (set! aK28a8@aKe46@make-export-env/macros aKe46@make-export-env/macros) (set! aKe48@generate-temporaries (lambda (aK2715@ls) (let ((aK2717@t aK2715@ls)) (let ((aK2719@ls/false (aKd7a@syntax-dispatch aK2717@t 'each-any))) (if aK2719@ls/false (apply (lambda (aK271b@ls) (map (lambda (aK271d@x) (make-simple-struct 'stx '5 (list (let ((aK271f@x (aKe60@syntax->datum aK271d@x))) (if (or (symbol? aK271f@x) (string? aK271f@x)) (gensym aK271f@x) (gensym 't))) aKaf7@top-mark* '() '()))) aK271b@ls)) aK2719@ls/false) (let ((aK2721@t aK2717@t)) (let ((aK2723@ls/false (aKd7a@syntax-dispatch aK2721@t '_))) (if aK2723@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) aK2723@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK2721@t))))))))) (set! aK28a9@aKe48@generate-temporaries aKe48@generate-temporaries) (set! aKe4a@free-identifier=? (lambda (aK2725@x aK2726@y) (if (aKb73@id? aK2725@x) (if (aKb73@id? aK2726@y) (aKb79@free-id=? aK2725@x aK2726@y) (assertion-violation 'free-identifier=? '"not an identifier" aK2726@y)) (assertion-violation 'free-identifier=? '"not an identifier" aK2725@x)))) (set! aK28aa@aKe4a@free-identifier=? aKe4a@free-identifier=?) (set! aKe4c@bound-identifier=? (lambda (aK2729@x aK272a@y) (if (aKb73@id? aK2729@x) (if (aKb73@id? aK272a@y) (aKb77@bound-id=? aK2729@x aK272a@y) (assertion-violation 'bound-identifier=? '"not an identifier" aK272a@y)) (assertion-violation 'bound-identifier=? '"not an identifier" aK2729@x)))) (set! aK28ab@aKe4c@bound-identifier=? aKe4c@bound-identifier=?) (set! aKe4e@make-source-condition (lambda (aK272d@x) (let ((aK2737@aK2732 '#f) (aK2739@aK2734 '#f) (aK273b@aK2733 '#f) (aK273e@aK2731 '#f) (aK2740@make-source-condition '#f) (aK2742@aK272f '#f) (aK2744@aK2730 '#f) (aK2746@source-condition? '#f) (aK2748@source-filename '#f) (aK274a@source-character '#f)) (begin (set! aK2737@aK2732 (make-record-type-descriptor '&source-information aK2b8d@aK28d4@&condition-rtd 'aK2735 '#f '#f '#((immutable file-name) (immutable character)))) (set! aK2739@aK2734 '#f) (set! aK273b@aK2733 (make-record-constructor-descriptor aK2737@aK2732 aK2b8e@aK28d6@&condition-rcd aK2739@aK2734)) (set! aK273e@aK2731 (record-predicate aK2737@aK2732)) (set! aK2740@make-source-condition (record-constructor aK273b@aK2733)) (set! aK2742@aK272f (record-accessor aK2737@aK2732 '0)) (set! aK2744@aK2730 (record-accessor aK2737@aK2732 '1)) (set! aK2746@source-condition? (condition-predicate aK2737@aK2732)) (set! aK2748@source-filename (condition-accessor aK2737@aK2732 aK2742@aK272f)) (set! aK274a@source-character (condition-accessor aK2737@aK2732 aK2744@aK2730)) (if (pair? aK272d@x) (aK2740@make-source-condition (car aK272d@x) (cdr aK272d@x)) (condition)))))) (set! aK28ac@aKe4e@make-source-condition aKe4e@make-source-condition) (set! aKe50@extract-position-condition (lambda (aK274b@x) (aKe4e@make-source-condition (aKe52@expression-position aK274b@x)))) (set! aK28ad@aKe50@extract-position-condition aKe50@extract-position-condition) (set! aKe52@expression-position (lambda (aK274d@x) (and (aKb3f@stx? aK274d@x) (let ((aK274f@x (aKb41@stx-expr aK274d@x))) (and (aK6b2@aK586@annotation? aK274f@x) (aK6b3@aK588@annotation-source aK274f@x)))))) (set! aK28ae@aKe52@expression-position aKe52@expression-position) (set! aKe54@assertion-error (lambda (aK2751@expr aK2752@pos) (raise (condition (aK2bbd@aK2998@make-assertion-violation) (aK2bcf@aK29ca@make-who-condition 'assert) (aK2b93@aK292b@make-message-condition '"assertion failed") (aK2bc5@aK29af@make-irritants-condition (list aK2751@expr)) (aKe4e@make-source-condition aK2752@pos))))) (set! aK28af@aKe54@assertion-error aKe54@assertion-error) (set! aKe56@syntax-error (lambda (aK2755@x . aK2757@args) (begin (if (not (for-all string? aK2757@args)) (assertion-violation 'syntax-error '"invalid argument" aK2757@args) (void)) (raise (condition (aK2b93@aK292b@make-message-condition (if (null? aK2757@args) '"invalid syntax" (apply string-append aK2757@args))) (aK2bf1@aK2a26@make-syntax-violation (aKe60@syntax->datum aK2755@x) '#f) (aKe50@extract-position-condition aK2755@x)))))) (set! aK28b0@aKe56@syntax-error aKe56@syntax-error) (set! aKe58@syntax-violation* (lambda (aK2759@who aK275a@msg aK275b@form aK275c@condition-object) (begin (if (not (string? aK275a@msg)) (assertion-violation 'syntax-violation '"message is not a string" aK275a@msg) (void)) (let ((aK2761@who (if (or (string? aK2759@who) (symbol? aK2759@who)) aK2759@who (if (not aK2759@who) (let ((aK2763@t aK275b@form)) (let ((aK2765@ls/false (aKd7a@syntax-dispatch aK2763@t 'any))) (if (and aK2765@ls/false (apply (lambda (aK2767@id) (aKb73@id? aK2767@id)) aK2765@ls/false)) (apply (lambda (aK2769@id) (aKe60@syntax->datum aK2769@id)) aK2765@ls/false) (let ((aK276b@t aK2763@t)) (let ((aK276d@ls/false (aKd7a@syntax-dispatch aK276b@t '(any . any)))) (if (and aK276d@ls/false (apply (lambda (aK276f@id aK2770@rest) (aKb73@id? aK276f@id)) aK276d@ls/false)) (apply (lambda (aK2773@id aK2774@rest) (aKe60@syntax->datum aK2773@id)) aK276d@ls/false) (let ((aK2777@t aK276b@t)) (let ((aK2779@ls/false (aKd7a@syntax-dispatch aK2777@t '_))) (if aK2779@ls/false (apply (lambda () '#f) aK2779@ls/false) (aKe5a@syntax-violation '#f '"invalid syntax" aK2777@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" aK2759@who))))) (raise (condition (if aK2761@who (aK2bcf@aK29ca@make-who-condition aK2761@who) (condition)) (aK2b93@aK292b@make-message-condition aK275a@msg) aK275c@condition-object (aKe50@extract-position-condition aK275b@form))))))) (set! aK28b1@aKe58@syntax-violation* aKe58@syntax-violation*) (set! aKe5a@syntax-violation (lambda aK2789 (let ((aK278a (length aK2789))) (if (= aK278a '3) (apply (lambda (aK277b@who aK277c@msg aK277d@form) (aKe5a@syntax-violation aK277b@who aK277c@msg aK277d@form '#f)) aK2789) (if (= aK278a '4) (apply (lambda (aK2781@who aK2782@msg aK2783@form aK2784@subform) (aKe58@syntax-violation* aK2781@who aK2782@msg aK2783@form (aK2bf1@aK2a26@make-syntax-violation (aKe60@syntax->datum aK2783@form) (aKe60@syntax->datum aK2784@subform)))) aK2789) (error 'apply '"invalid arg count")))))) (set! aK28b2@aKe5a@syntax-violation aKe5a@syntax-violation) (set! aKe5c@identifier? (lambda (aK278b@x) (aKb73@id? aK278b@x))) (set! aK28b3@aKe5c@identifier? aKe5c@identifier?) (set! aKe5e@datum->syntax (lambda (aK278d@id aK278e@datum) (if (aKb73@id? aK278d@id) (aKb53@datum->stx aK278d@id aK278e@datum) (assertion-violation 'datum->syntax '"not an identifier" aK278d@id)))) (set! aK28b4@aKe5e@datum->syntax aKe5e@datum->syntax) (set! aKe60@syntax->datum (lambda (aK2791@x) (aKb87@stx->datum aK2791@x))) (set! aK28b5@aKe60@syntax->datum aKe60@syntax->datum) (set! aKe62@ungensym-all (lambda (aK2793@code) (if (pair? aK2793@code) (cons (aKe62@ungensym-all (car aK2793@code)) (aKe62@ungensym-all (cdr aK2793@code))) (if (symbol? aK2793@code) (ungensym aK2793@code) aK2793@code)))) (set! aK28b6@aKe62@ungensym-all aKe62@ungensym-all) (set! aKe64@compile-r6rs-top-level (lambda (aK2795@x*) (call-with-values (lambda () (aKdf2@top-level-expander aK2795@x*)) (lambda (aK279b@aK2798 aK279c@aK279a) (let ((aK279f@invoke-code aK279c@aK279a) (aK27a0@lib* aK279b@aK2798)) (lambda () (begin (for-each aK989@aK7d7@invoke-library aK27a0@lib*) (let ((aK27a3@expanded (aK713@aK6cb@expanded->core aK279f@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (aKe62@ungensym-all aK27a3@expanded)) (void)) (eval-core aK27a3@expanded)))))))))) (set! aK28b7@aKe64@compile-r6rs-top-level aKe64@compile-r6rs-top-level) (set! aKe66@pre-compile-r6rs-top-level (lambda (aK27a5@x*) (call-with-values (lambda () (aKdf2@top-level-expander aK27a5@x*)) (lambda (aK27ab@aK27a8 aK27ac@aK27aa) (let ((aK27af@invoke-code aK27ac@aK27aa) (aK27b0@lib* aK27ab@aK27a8)) (begin (for-each aK989@aK7d7@invoke-library aK27b0@lib*) (aK6bb@aK598@compile-core (aK713@aK6cb@expanded->core aK27af@invoke-code)))))))) (set! aK28b8@aKe66@pre-compile-r6rs-top-level aKe66@pre-compile-r6rs-top-level) (set! aKe68@interaction-environment (let ((aK27b3@the-env '#f)) (lambda () (or aK27b3@the-env (let ((aK27b5@lib (aK982@aK7c9@find-library-by-name '(mosh interaction))) (aK27b6@rib (aKb27@make-empty-rib))) (begin (let ((aK27b9@subst (aK964@aK78d@library-subst aK27b5@lib))) (begin (aKb13@set-rib-sym*! aK27b6@rib (map car aK27b9@subst)) (aKb17@set-rib-mark**! aK27b6@rib (map (lambda (aK27bb@x) aKaf7@top-mark*) aK27b9@subst)) (aKb1b@set-rib-label*! aK27b6@rib (map cdr aK27b9@subst)))) (let ((aK27bd@env (make-simple-struct 'interaction-env '4 (list aK27b6@rib '() '())))) (begin (set! aK27b3@the-env aK27bd@env) aK27bd@env)))))))) (set! aK28b9@aKe68@interaction-environment aKe68@interaction-environment) (set! aKe6a@top-level-context (aK6bd@aK59c@make-parameter '#f)) (set! aK28ba@aKe6a@top-level-context aKe6a@top-level-context) (aK97f@aK7c3@current-library-expander aKe3c@library-expander))
(begin (set! aK28c9@aK28c4 (unspecified)) (set! aK28cb@aK28c6 (unspecified)) (set! aK28cd@aK28c5 (unspecified)) (set! aK28d0@&condition? (unspecified)) (set! aK28d2@make-&condition (unspecified)) (set! aK28d4@&condition-rtd (unspecified)) (set! aK28d6@&condition-rcd (unspecified)) (set! aK2922@aK291d (unspecified)) (set! aK2924@aK291f (unspecified)) (set! aK2926@aK291e (unspecified)) (set! aK2929@p? (unspecified)) (set! aK292b@make-message-condition (unspecified)) (set! aK292d@aK291c (unspecified)) (set! aK292f@message-condition? (unspecified)) (set! aK2931@condition-message (unspecified)) (set! aK2933@&message-rtd (unspecified)) (set! aK2935@&message-rcd (unspecified)) (set! aK293b@aK2936 (unspecified)) (set! aK293d@aK2938 (unspecified)) (set! aK293f@aK2937 (unspecified)) (set! aK2942@p? (unspecified)) (set! aK2944@make-warning (unspecified)) (set! aK2946@warning? (unspecified)) (set! aK2948@&warning-rtd (unspecified)) (set! aK294a@&warning-rcd (unspecified)) (set! aK2950@aK294b (unspecified)) (set! aK2952@aK294d (unspecified)) (set! aK2954@aK294c (unspecified)) (set! aK2957@p? (unspecified)) (set! aK2959@make-serious-condition (unspecified)) (set! aK295b@serious-condition? (unspecified)) (set! aK295d@&serious-rtd (unspecified)) (set! aK295f@&serious-rcd (unspecified)) (set! aK2965@aK2960 (unspecified)) (set! aK2967@aK2962 (unspecified)) (set! aK2969@aK2961 (unspecified)) (set! aK296c@p? (unspecified)) (set! aK296e@make-error (unspecified)) (set! aK2970@error? (unspecified)) (set! aK2972@&error-rtd (unspecified)) (set! aK2974@&error-rcd (unspecified)) (set! aK297a@aK2975 (unspecified)) (set! aK297c@aK2977 (unspecified)) (set! aK297e@aK2976 (unspecified)) (set! aK2981@p? (unspecified)) (set! aK2983@make-violation (unspecified)) (set! aK2985@violation? (unspecified)) (set! aK2987@&violation-rtd (unspecified)) (set! aK2989@&violation-rcd (unspecified)) (set! aK298f@aK298a (unspecified)) (set! aK2991@aK298c (unspecified)) (set! aK2993@aK298b (unspecified)) (set! aK2996@p? (unspecified)) (set! aK2998@make-assertion-violation (unspecified)) (set! aK299a@assertion-violation? (unspecified)) (set! aK299c@&assertion-rtd (unspecified)) (set! aK299e@&assertion-rcd (unspecified)) (set! aK29a6@aK29a1 (unspecified)) (set! aK29a8@aK29a3 (unspecified)) (set! aK29aa@aK29a2 (unspecified)) (set! aK29ad@p? (unspecified)) (set! aK29af@make-irritants-condition (unspecified)) (set! aK29b1@aK29a0 (unspecified)) (set! aK29b3@irritants-condition? (unspecified)) (set! aK29b5@condition-irritants (unspecified)) (set! aK29b7@&irritants-rtd (unspecified)) (set! aK29b9@&irritants-rcd (unspecified)) (set! aK29c1@aK29bc (unspecified)) (set! aK29c3@aK29be (unspecified)) (set! aK29c5@aK29bd (unspecified)) (set! aK29c8@p? (unspecified)) (set! aK29ca@make-who-condition (unspecified)) (set! aK29cc@aK29bb (unspecified)) (set! aK29ce@who-condition? (unspecified)) (set! aK29d0@condition-who (unspecified)) (set! aK29d2@&who-rtd (unspecified)) (set! aK29d4@&who-rcd (unspecified)) (set! aK29da@aK29d5 (unspecified)) (set! aK29dc@aK29d7 (unspecified)) (set! aK29de@aK29d6 (unspecified)) (set! aK29e1@p? (unspecified)) (set! aK29e3@make-non-continuable-violation (unspecified)) (set! aK29e5@non-continuable-violation? (unspecified)) (set! aK29e7@&non-continuable-rtd (unspecified)) (set! aK29e9@&non-continuable-rcd (unspecified)) (set! aK29ef@aK29ea (unspecified)) (set! aK29f1@aK29ec (unspecified)) (set! aK29f3@aK29eb (unspecified)) (set! aK29f6@p? (unspecified)) (set! aK29f8@make-implementation-restriction-violation (unspecified)) (set! aK29fa@implementation-restriction-violation? (unspecified)) (set! aK29fc@&implementation-restriction-rtd (unspecified)) (set! aK29fe@&implementation-restriction-rcd (unspecified)) (set! aK2a04@aK29ff (unspecified)) (set! aK2a06@aK2a01 (unspecified)) (set! aK2a08@aK2a00 (unspecified)) (set! aK2a0b@p? (unspecified)) (set! aK2a0d@make-lexical-violation (unspecified)) (set! aK2a0f@lexical-violation? (unspecified)) (set! aK2a11@&lexical-rtd (unspecified)) (set! aK2a13@&lexical-rcd (unspecified)) (set! aK2a1d@aK2a18 (unspecified)) (set! aK2a1f@aK2a1a (unspecified)) (set! aK2a21@aK2a19 (unspecified)) (set! aK2a24@p? (unspecified)) (set! aK2a26@make-syntax-violation (unspecified)) (set! aK2a28@aK2a15 (unspecified)) (set! aK2a2a@aK2a17 (unspecified)) (set! aK2a2c@syntax-violation? (unspecified)) (set! aK2a2e@syntax-violation-form (unspecified)) (set! aK2a30@syntax-violation-subform (unspecified)) (set! aK2a32@&syntax-rtd (unspecified)) (set! aK2a34@&syntax-rcd (unspecified)) (set! aK2a3a@aK2a35 (unspecified)) (set! aK2a3c@aK2a37 (unspecified)) (set! aK2a3e@aK2a36 (unspecified)) (set! aK2a41@p? (unspecified)) (set! aK2a43@make-undefined-violation (unspecified)) (set! aK2a45@undefined-violation? (unspecified)) (set! aK2a47@&undefined-rtd (unspecified)) (set! aK2a49@&undefined-rcd (unspecified)) (set! aK2a4f@aK2a4a (unspecified)) (set! aK2a51@aK2a4c (unspecified)) (set! aK2a53@aK2a4b (unspecified)) (set! aK2a56@p? (unspecified)) (set! aK2a58@make-i/o-error (unspecified)) (set! aK2a5a@i/o-error? (unspecified)) (set! aK2a5c@&i/o-rtd (unspecified)) (set! aK2a5e@&i/o-rcd (unspecified)) (set! aK2a64@aK2a5f (unspecified)) (set! aK2a66@aK2a61 (unspecified)) (set! aK2a68@aK2a60 (unspecified)) (set! aK2a6b@p? (unspecified)) (set! aK2a6d@make-i/o-read-error (unspecified)) (set! aK2a6f@i/o-read-error? (unspecified)) (set! aK2a71@&i/o-read-rtd (unspecified)) (set! aK2a73@&i/o-read-rcd (unspecified)) (set! aK2a79@aK2a74 (unspecified)) (set! aK2a7b@aK2a76 (unspecified)) (set! aK2a7d@aK2a75 (unspecified)) (set! aK2a80@p? (unspecified)) (set! aK2a82@make-i/o-write-error (unspecified)) (set! aK2a84@i/o-write-error? (unspecified)) (set! aK2a86@&i/o-write-rtd (unspecified)) (set! aK2a88@&i/o-write-rcd (unspecified)) (set! aK2a90@aK2a8b (unspecified)) (set! aK2a92@aK2a8d (unspecified)) (set! aK2a94@aK2a8c (unspecified)) (set! aK2a97@p? (unspecified)) (set! aK2a99@make-i/o-invalid-position-error (unspecified)) (set! aK2a9b@aK2a8a (unspecified)) (set! aK2a9d@i/o-invalid-position-error? (unspecified)) (set! aK2a9f@i/o-error-position (unspecified)) (set! aK2aa1@&i/o-invalid-position-rtd (unspecified)) (set! aK2aa3@&i/o-invalid-position-rcd (unspecified)) (set! aK2aab@aK2aa6 (unspecified)) (set! aK2aad@aK2aa8 (unspecified)) (set! aK2aaf@aK2aa7 (unspecified)) (set! aK2ab2@p? (unspecified)) (set! aK2ab4@make-i/o-filename-error (unspecified)) (set! aK2ab6@aK2aa5 (unspecified)) (set! aK2ab8@i/o-filename-error? (unspecified)) (set! aK2aba@i/o-error-filename (unspecified)) (set! aK2abc@&i/o-filename-rtd (unspecified)) (set! aK2abe@&i/o-filename-rcd (unspecified)) (set! aK2ac4@aK2abf (unspecified)) (set! aK2ac6@aK2ac1 (unspecified)) (set! aK2ac8@aK2ac0 (unspecified)) (set! aK2acb@p? (unspecified)) (set! aK2acd@make-i/o-file-protection-error (unspecified)) (set! aK2acf@i/o-file-protection-error? (unspecified)) (set! aK2ad1@&i/o-file-protection-rtd (unspecified)) (set! aK2ad3@&i/o-file-protection-rcd (unspecified)) (set! aK2ad9@aK2ad4 (unspecified)) (set! aK2adb@aK2ad6 (unspecified)) (set! aK2add@aK2ad5 (unspecified)) (set! aK2ae0@p? (unspecified)) (set! aK2ae2@make-i/o-file-is-read-only-error (unspecified)) (set! aK2ae4@i/o-file-is-read-only-error? (unspecified)) (set! aK2ae6@&i/o-file-is-read-only-rtd (unspecified)) (set! aK2ae8@&i/o-file-is-read-only-rcd (unspecified)) (set! aK2aee@aK2ae9 (unspecified)) (set! aK2af0@aK2aeb (unspecified)) (set! aK2af2@aK2aea (unspecified)) (set! aK2af5@p? (unspecified)) (set! aK2af7@make-i/o-file-already-exists-error (unspecified)) (set! aK2af9@i/o-file-already-exists-error? (unspecified)) (set! aK2afb@&i/o-file-already-exists-rtd (unspecified)) (set! aK2afd@&i/o-file-already-exists-rcd (unspecified)) (set! aK2b03@aK2afe (unspecified)) (set! aK2b05@aK2b00 (unspecified)) (set! aK2b07@aK2aff (unspecified)) (set! aK2b0a@p? (unspecified)) (set! aK2b0c@make-i/o-file-does-not-exist-error (unspecified)) (set! aK2b0e@i/o-file-does-not-exist-error? (unspecified)) (set! aK2b10@&i/o-file-does-not-exist-rtd (unspecified)) (set! aK2b12@&i/o-file-does-not-exist-rcd (unspecified)) (set! aK2b1a@aK2b15 (unspecified)) (set! aK2b1c@aK2b17 (unspecified)) (set! aK2b1e@aK2b16 (unspecified)) (set! aK2b21@p? (unspecified)) (set! aK2b23@make-i/o-port-error (unspecified)) (set! aK2b25@aK2b14 (unspecified)) (set! aK2b27@i/o-port-error? (unspecified)) (set! aK2b29@i/o-error-port (unspecified)) (set! aK2b2b@&i/o-port-rtd (unspecified)) (set! aK2b2d@&i/o-port-rcd (unspecified)) (set! aK2b33@aK2b2e (unspecified)) (set! aK2b35@aK2b30 (unspecified)) (set! aK2b37@aK2b2f (unspecified)) (set! aK2b3a@p? (unspecified)) (set! aK2b3c@make-i/o-decoding-error (unspecified)) (set! aK2b3e@i/o-decoding-error? (unspecified)) (set! aK2b40@&i/o-decoding-rtd (unspecified)) (set! aK2b42@&i/o-decoding-rcd (unspecified)) (set! aK2b4a@aK2b45 (unspecified)) (set! aK2b4c@aK2b47 (unspecified)) (set! aK2b4e@aK2b46 (unspecified)) (set! aK2b51@p? (unspecified)) (set! aK2b53@make-i/o-encoding-error (unspecified)) (set! aK2b55@aK2b44 (unspecified)) (set! aK2b57@i/o-encoding-error? (unspecified)) (set! aK2b59@i/o-encoding-error-char (unspecified)) (set! aK2b5b@&i/o-encoding-rtd (unspecified)) (set! aK2b5d@&i/o-encoding-rcd (unspecified)) (set! aK2b63@aK2b5e (unspecified)) (set! aK2b65@aK2b60 (unspecified)) (set! aK2b67@aK2b5f (unspecified)) (set! aK2b6a@p? (unspecified)) (set! aK2b6c@make-no-infinities-violation (unspecified)) (set! aK2b6e@no-infinities-violation? (unspecified)) (set! aK2b70@&no-infinities-rtd (unspecified)) (set! aK2b72@&no-infinities-rcd (unspecified)) (set! aK2b78@aK2b73 (unspecified)) (set! aK2b7a@aK2b75 (unspecified)) (set! aK2b7c@aK2b74 (unspecified)) (set! aK2b7f@p? (unspecified)) (set! aK2b81@make-no-nans-violation (unspecified)) (set! aK2b83@no-nans-violation? (unspecified)) (set! aK2b85@&no-nans-rtd (unspecified)) (set! aK2b87@&no-nans-rcd (unspecified)) (set! aK28c9@aK28c4 (make-record-type-descriptor '&condition '#f 'aK28c7 '#f '#f '#())) (set! aK2b88@aK28c9@aK28c4 aK28c9@aK28c4) (set! aK28cb@aK28c6 '#f) (set! aK2b89@aK28cb@aK28c6 aK28cb@aK28c6) (set! aK28cd@aK28c5 (make-record-constructor-descriptor aK28c9@aK28c4 '#f aK28cb@aK28c6)) (set! aK2b8a@aK28cd@aK28c5 aK28cd@aK28c5) (set! aK28d0@&condition? (record-predicate aK28c9@aK28c4)) (set! aK2b8b@aK28d0@&condition? aK28d0@&condition?) (set! aK28d2@make-&condition (record-constructor aK28cd@aK28c5)) (set! aK2b8c@aK28d2@make-&condition aK28d2@make-&condition) (set! aK28d4@&condition-rtd aK28c9@aK28c4) (set! aK2b8d@aK28d4@&condition-rtd aK28d4@&condition-rtd) (set! aK28d6@&condition-rcd aK28cd@aK28c5) (set! aK2b8e@aK28d6@&condition-rcd aK28d6@&condition-rcd) (set! aK2922@aK291d (make-record-type-descriptor '&message aK28c9@aK28c4 'aK2920 '#f '#f '#((immutable message)))) (set! aK2b8f@aK2922@aK291d aK2922@aK291d) (set! aK2924@aK291f '#f) (set! aK2b90@aK2924@aK291f aK2924@aK291f) (set! aK2926@aK291e (make-record-constructor-descriptor aK2922@aK291d aK28cd@aK28c5 aK2924@aK291f)) (set! aK2b91@aK2926@aK291e aK2926@aK291e) (set! aK2929@p? (record-predicate aK2922@aK291d)) (set! aK2b92@aK2929@p? aK2929@p?) (set! aK292b@make-message-condition (record-constructor aK2926@aK291e)) (set! aK2b93@aK292b@make-message-condition aK292b@make-message-condition) (set! aK292d@aK291c (record-accessor aK2922@aK291d '0)) (set! aK2b94@aK292d@aK291c aK292d@aK291c) (set! aK292f@message-condition? (condition-predicate aK2922@aK291d)) (set! aK2b95@aK292f@message-condition? aK292f@message-condition?) (set! aK2931@condition-message (condition-accessor aK2922@aK291d aK292d@aK291c)) (set! aK2b96@aK2931@condition-message aK2931@condition-message) (set! aK2933@&message-rtd aK2922@aK291d) (set! aK2b97@aK2933@&message-rtd aK2933@&message-rtd) (set! aK2935@&message-rcd aK2926@aK291e) (set! aK2b98@aK2935@&message-rcd aK2935@&message-rcd) (set! aK293b@aK2936 (make-record-type-descriptor '&warning aK28c9@aK28c4 'aK2939 '#f '#f '#())) (set! aK2b99@aK293b@aK2936 aK293b@aK2936) (set! aK293d@aK2938 '#f) (set! aK2b9a@aK293d@aK2938 aK293d@aK2938) (set! aK293f@aK2937 (make-record-constructor-descriptor aK293b@aK2936 aK28cd@aK28c5 aK293d@aK2938)) (set! aK2b9b@aK293f@aK2937 aK293f@aK2937) (set! aK2942@p? (record-predicate aK293b@aK2936)) (set! aK2b9c@aK2942@p? aK2942@p?) (set! aK2944@make-warning (record-constructor aK293f@aK2937)) (set! aK2b9d@aK2944@make-warning aK2944@make-warning) (set! aK2946@warning? (condition-predicate aK293b@aK2936)) (set! aK2b9e@aK2946@warning? aK2946@warning?) (set! aK2948@&warning-rtd aK293b@aK2936) (set! aK2b9f@aK2948@&warning-rtd aK2948@&warning-rtd) (set! aK294a@&warning-rcd aK293f@aK2937) (set! aK2ba0@aK294a@&warning-rcd aK294a@&warning-rcd) (set! aK2950@aK294b (make-record-type-descriptor '&serious aK28c9@aK28c4 'aK294e '#f '#f '#())) (set! aK2ba1@aK2950@aK294b aK2950@aK294b) (set! aK2952@aK294d '#f) (set! aK2ba2@aK2952@aK294d aK2952@aK294d) (set! aK2954@aK294c (make-record-constructor-descriptor aK2950@aK294b aK28cd@aK28c5 aK2952@aK294d)) (set! aK2ba3@aK2954@aK294c aK2954@aK294c) (set! aK2957@p? (record-predicate aK2950@aK294b)) (set! aK2ba4@aK2957@p? aK2957@p?) (set! aK2959@make-serious-condition (record-constructor aK2954@aK294c)) (set! aK2ba5@aK2959@make-serious-condition aK2959@make-serious-condition) (set! aK295b@serious-condition? (condition-predicate aK2950@aK294b)) (set! aK2ba6@aK295b@serious-condition? aK295b@serious-condition?) (set! aK295d@&serious-rtd aK2950@aK294b) (set! aK2ba7@aK295d@&serious-rtd aK295d@&serious-rtd) (set! aK295f@&serious-rcd aK2954@aK294c) (set! aK2ba8@aK295f@&serious-rcd aK295f@&serious-rcd) (set! aK2965@aK2960 (make-record-type-descriptor '&error aK2950@aK294b 'aK2963 '#f '#f '#())) (set! aK2ba9@aK2965@aK2960 aK2965@aK2960) (set! aK2967@aK2962 '#f) (set! aK2baa@aK2967@aK2962 aK2967@aK2962) (set! aK2969@aK2961 (make-record-constructor-descriptor aK2965@aK2960 aK2954@aK294c aK2967@aK2962)) (set! aK2bab@aK2969@aK2961 aK2969@aK2961) (set! aK296c@p? (record-predicate aK2965@aK2960)) (set! aK2bac@aK296c@p? aK296c@p?) (set! aK296e@make-error (record-constructor aK2969@aK2961)) (set! aK2bad@aK296e@make-error aK296e@make-error) (set! aK2970@error? (condition-predicate aK2965@aK2960)) (set! aK2bae@aK2970@error? aK2970@error?) (set! aK2972@&error-rtd aK2965@aK2960) (set! aK2baf@aK2972@&error-rtd aK2972@&error-rtd) (set! aK2974@&error-rcd aK2969@aK2961) (set! aK2bb0@aK2974@&error-rcd aK2974@&error-rcd) (set! aK297a@aK2975 (make-record-type-descriptor '&violation aK2950@aK294b 'aK2978 '#f '#f '#())) (set! aK2bb1@aK297a@aK2975 aK297a@aK2975) (set! aK297c@aK2977 '#f) (set! aK2bb2@aK297c@aK2977 aK297c@aK2977) (set! aK297e@aK2976 (make-record-constructor-descriptor aK297a@aK2975 aK2954@aK294c aK297c@aK2977)) (set! aK2bb3@aK297e@aK2976 aK297e@aK2976) (set! aK2981@p? (record-predicate aK297a@aK2975)) (set! aK2bb4@aK2981@p? aK2981@p?) (set! aK2983@make-violation (record-constructor aK297e@aK2976)) (set! aK2bb5@aK2983@make-violation aK2983@make-violation) (set! aK2985@violation? (condition-predicate aK297a@aK2975)) (set! aK2bb6@aK2985@violation? aK2985@violation?) (set! aK2987@&violation-rtd aK297a@aK2975) (set! aK2bb7@aK2987@&violation-rtd aK2987@&violation-rtd) (set! aK2989@&violation-rcd aK297e@aK2976) (set! aK2bb8@aK2989@&violation-rcd aK2989@&violation-rcd) (set! aK298f@aK298a (make-record-type-descriptor '&assertion aK297a@aK2975 'aK298d '#f '#f '#())) (set! aK2bb9@aK298f@aK298a aK298f@aK298a) (set! aK2991@aK298c '#f) (set! aK2bba@aK2991@aK298c aK2991@aK298c) (set! aK2993@aK298b (make-record-constructor-descriptor aK298f@aK298a aK297e@aK2976 aK2991@aK298c)) (set! aK2bbb@aK2993@aK298b aK2993@aK298b) (set! aK2996@p? (record-predicate aK298f@aK298a)) (set! aK2bbc@aK2996@p? aK2996@p?) (set! aK2998@make-assertion-violation (record-constructor aK2993@aK298b)) (set! aK2bbd@aK2998@make-assertion-violation aK2998@make-assertion-violation) (set! aK299a@assertion-violation? (condition-predicate aK298f@aK298a)) (set! aK2bbe@aK299a@assertion-violation? aK299a@assertion-violation?) (set! aK299c@&assertion-rtd aK298f@aK298a) (set! aK2bbf@aK299c@&assertion-rtd aK299c@&assertion-rtd) (set! aK299e@&assertion-rcd aK2993@aK298b) (set! aK2bc0@aK299e@&assertion-rcd aK299e@&assertion-rcd) (set! aK29a6@aK29a1 (make-record-type-descriptor '&irritants aK28c9@aK28c4 'aK29a4 '#f '#f '#((immutable irritants)))) (set! aK2bc1@aK29a6@aK29a1 aK29a6@aK29a1) (set! aK29a8@aK29a3 '#f) (set! aK2bc2@aK29a8@aK29a3 aK29a8@aK29a3) (set! aK29aa@aK29a2 (make-record-constructor-descriptor aK29a6@aK29a1 aK28cd@aK28c5 aK29a8@aK29a3)) (set! aK2bc3@aK29aa@aK29a2 aK29aa@aK29a2) (set! aK29ad@p? (record-predicate aK29a6@aK29a1)) (set! aK2bc4@aK29ad@p? aK29ad@p?) (set! aK29af@make-irritants-condition (record-constructor aK29aa@aK29a2)) (set! aK2bc5@aK29af@make-irritants-condition aK29af@make-irritants-condition) (set! aK29b1@aK29a0 (record-accessor aK29a6@aK29a1 '0)) (set! aK2bc6@aK29b1@aK29a0 aK29b1@aK29a0) (set! aK29b3@irritants-condition? (condition-predicate aK29a6@aK29a1)) (set! aK2bc7@aK29b3@irritants-condition? aK29b3@irritants-condition?) (set! aK29b5@condition-irritants (condition-accessor aK29a6@aK29a1 aK29b1@aK29a0)) (set! aK2bc8@aK29b5@condition-irritants aK29b5@condition-irritants) (set! aK29b7@&irritants-rtd aK29a6@aK29a1) (set! aK2bc9@aK29b7@&irritants-rtd aK29b7@&irritants-rtd) (set! aK29b9@&irritants-rcd aK29aa@aK29a2) (set! aK2bca@aK29b9@&irritants-rcd aK29b9@&irritants-rcd) (set! aK29c1@aK29bc (make-record-type-descriptor '&who aK28c9@aK28c4 'aK29bf '#f '#f '#((immutable who)))) (set! aK2bcb@aK29c1@aK29bc aK29c1@aK29bc) (set! aK29c3@aK29be '#f) (set! aK2bcc@aK29c3@aK29be aK29c3@aK29be) (set! aK29c5@aK29bd (make-record-constructor-descriptor aK29c1@aK29bc aK28cd@aK28c5 aK29c3@aK29be)) (set! aK2bcd@aK29c5@aK29bd aK29c5@aK29bd) (set! aK29c8@p? (record-predicate aK29c1@aK29bc)) (set! aK2bce@aK29c8@p? aK29c8@p?) (set! aK29ca@make-who-condition (record-constructor aK29c5@aK29bd)) (set! aK2bcf@aK29ca@make-who-condition aK29ca@make-who-condition) (set! aK29cc@aK29bb (record-accessor aK29c1@aK29bc '0)) (set! aK2bd0@aK29cc@aK29bb aK29cc@aK29bb) (set! aK29ce@who-condition? (condition-predicate aK29c1@aK29bc)) (set! aK2bd1@aK29ce@who-condition? aK29ce@who-condition?) (set! aK29d0@condition-who (condition-accessor aK29c1@aK29bc aK29cc@aK29bb)) (set! aK2bd2@aK29d0@condition-who aK29d0@condition-who) (set! aK29d2@&who-rtd aK29c1@aK29bc) (set! aK2bd3@aK29d2@&who-rtd aK29d2@&who-rtd) (set! aK29d4@&who-rcd aK29c5@aK29bd) (set! aK2bd4@aK29d4@&who-rcd aK29d4@&who-rcd) (set! aK29da@aK29d5 (make-record-type-descriptor '&non-continuable aK297a@aK2975 'aK29d8 '#f '#f '#())) (set! aK2bd5@aK29da@aK29d5 aK29da@aK29d5) (set! aK29dc@aK29d7 '#f) (set! aK2bd6@aK29dc@aK29d7 aK29dc@aK29d7) (set! aK29de@aK29d6 (make-record-constructor-descriptor aK29da@aK29d5 aK297e@aK2976 aK29dc@aK29d7)) (set! aK2bd7@aK29de@aK29d6 aK29de@aK29d6) (set! aK29e1@p? (record-predicate aK29da@aK29d5)) (set! aK2bd8@aK29e1@p? aK29e1@p?) (set! aK29e3@make-non-continuable-violation (record-constructor aK29de@aK29d6)) (set! aK2bd9@aK29e3@make-non-continuable-violation aK29e3@make-non-continuable-violation) (set! aK29e5@non-continuable-violation? (condition-predicate aK29da@aK29d5)) (set! aK2bda@aK29e5@non-continuable-violation? aK29e5@non-continuable-violation?) (set! aK29e7@&non-continuable-rtd aK29da@aK29d5) (set! aK2bdb@aK29e7@&non-continuable-rtd aK29e7@&non-continuable-rtd) (set! aK29e9@&non-continuable-rcd aK29de@aK29d6) (set! aK2bdc@aK29e9@&non-continuable-rcd aK29e9@&non-continuable-rcd) (set! aK29ef@aK29ea (make-record-type-descriptor '&implementation-restriction aK297a@aK2975 'aK29ed '#f '#f '#())) (set! aK2bdd@aK29ef@aK29ea aK29ef@aK29ea) (set! aK29f1@aK29ec '#f) (set! aK2bde@aK29f1@aK29ec aK29f1@aK29ec) (set! aK29f3@aK29eb (make-record-constructor-descriptor aK29ef@aK29ea aK297e@aK2976 aK29f1@aK29ec)) (set! aK2bdf@aK29f3@aK29eb aK29f3@aK29eb) (set! aK29f6@p? (record-predicate aK29ef@aK29ea)) (set! aK2be0@aK29f6@p? aK29f6@p?) (set! aK29f8@make-implementation-restriction-violation (record-constructor aK29f3@aK29eb)) (set! aK2be1@aK29f8@make-implementation-restriction-violation aK29f8@make-implementation-restriction-violation) (set! aK29fa@implementation-restriction-violation? (condition-predicate aK29ef@aK29ea)) (set! aK2be2@aK29fa@implementation-restriction-violation? aK29fa@implementation-restriction-violation?) (set! aK29fc@&implementation-restriction-rtd aK29ef@aK29ea) (set! aK2be3@aK29fc@&implementation-restriction-rtd aK29fc@&implementation-restriction-rtd) (set! aK29fe@&implementation-restriction-rcd aK29f3@aK29eb) (set! aK2be4@aK29fe@&implementation-restriction-rcd aK29fe@&implementation-restriction-rcd) (set! aK2a04@aK29ff (make-record-type-descriptor '&lexical aK297a@aK2975 'aK2a02 '#f '#f '#())) (set! aK2be5@aK2a04@aK29ff aK2a04@aK29ff) (set! aK2a06@aK2a01 '#f) (set! aK2be6@aK2a06@aK2a01 aK2a06@aK2a01) (set! aK2a08@aK2a00 (make-record-constructor-descriptor aK2a04@aK29ff aK297e@aK2976 aK2a06@aK2a01)) (set! aK2be7@aK2a08@aK2a00 aK2a08@aK2a00) (set! aK2a0b@p? (record-predicate aK2a04@aK29ff)) (set! aK2be8@aK2a0b@p? aK2a0b@p?) (set! aK2a0d@make-lexical-violation (record-constructor aK2a08@aK2a00)) (set! aK2be9@aK2a0d@make-lexical-violation aK2a0d@make-lexical-violation) (set! aK2a0f@lexical-violation? (condition-predicate aK2a04@aK29ff)) (set! aK2bea@aK2a0f@lexical-violation? aK2a0f@lexical-violation?) (set! aK2a11@&lexical-rtd aK2a04@aK29ff) (set! aK2beb@aK2a11@&lexical-rtd aK2a11@&lexical-rtd) (set! aK2a13@&lexical-rcd aK2a08@aK2a00) (set! aK2bec@aK2a13@&lexical-rcd aK2a13@&lexical-rcd) (set! aK2a1d@aK2a18 (make-record-type-descriptor '&syntax aK297a@aK2975 'aK2a1b '#f '#f '#((immutable form) (immutable subform)))) (set! aK2bed@aK2a1d@aK2a18 aK2a1d@aK2a18) (set! aK2a1f@aK2a1a '#f) (set! aK2bee@aK2a1f@aK2a1a aK2a1f@aK2a1a) (set! aK2a21@aK2a19 (make-record-constructor-descriptor aK2a1d@aK2a18 aK297e@aK2976 aK2a1f@aK2a1a)) (set! aK2bef@aK2a21@aK2a19 aK2a21@aK2a19) (set! aK2a24@p? (record-predicate aK2a1d@aK2a18)) (set! aK2bf0@aK2a24@p? aK2a24@p?) (set! aK2a26@make-syntax-violation (record-constructor aK2a21@aK2a19)) (set! aK2bf1@aK2a26@make-syntax-violation aK2a26@make-syntax-violation) (set! aK2a28@aK2a15 (record-accessor aK2a1d@aK2a18 '0)) (set! aK2bf2@aK2a28@aK2a15 aK2a28@aK2a15) (set! aK2a2a@aK2a17 (record-accessor aK2a1d@aK2a18 '1)) (set! aK2bf3@aK2a2a@aK2a17 aK2a2a@aK2a17) (set! aK2a2c@syntax-violation? (condition-predicate aK2a1d@aK2a18)) (set! aK2bf4@aK2a2c@syntax-violation? aK2a2c@syntax-violation?) (set! aK2a2e@syntax-violation-form (condition-accessor aK2a1d@aK2a18 aK2a28@aK2a15)) (set! aK2bf5@aK2a2e@syntax-violation-form aK2a2e@syntax-violation-form) (set! aK2a30@syntax-violation-subform (condition-accessor aK2a1d@aK2a18 aK2a2a@aK2a17)) (set! aK2bf6@aK2a30@syntax-violation-subform aK2a30@syntax-violation-subform) (set! aK2a32@&syntax-rtd aK2a1d@aK2a18) (set! aK2bf7@aK2a32@&syntax-rtd aK2a32@&syntax-rtd) (set! aK2a34@&syntax-rcd aK2a21@aK2a19) (set! aK2bf8@aK2a34@&syntax-rcd aK2a34@&syntax-rcd) (set! aK2a3a@aK2a35 (make-record-type-descriptor '&undefined aK297a@aK2975 'aK2a38 '#f '#f '#())) (set! aK2bf9@aK2a3a@aK2a35 aK2a3a@aK2a35) (set! aK2a3c@aK2a37 '#f) (set! aK2bfa@aK2a3c@aK2a37 aK2a3c@aK2a37) (set! aK2a3e@aK2a36 (make-record-constructor-descriptor aK2a3a@aK2a35 aK297e@aK2976 aK2a3c@aK2a37)) (set! aK2bfb@aK2a3e@aK2a36 aK2a3e@aK2a36) (set! aK2a41@p? (record-predicate aK2a3a@aK2a35)) (set! aK2bfc@aK2a41@p? aK2a41@p?) (set! aK2a43@make-undefined-violation (record-constructor aK2a3e@aK2a36)) (set! aK2bfd@aK2a43@make-undefined-violation aK2a43@make-undefined-violation) (set! aK2a45@undefined-violation? (condition-predicate aK2a3a@aK2a35)) (set! aK2bfe@aK2a45@undefined-violation? aK2a45@undefined-violation?) (set! aK2a47@&undefined-rtd aK2a3a@aK2a35) (set! aK2bff@aK2a47@&undefined-rtd aK2a47@&undefined-rtd) (set! aK2a49@&undefined-rcd aK2a3e@aK2a36) (set! aK2c00@aK2a49@&undefined-rcd aK2a49@&undefined-rcd) (set! aK2a4f@aK2a4a (make-record-type-descriptor '&i/o aK2965@aK2960 'aK2a4d '#f '#f '#())) (set! aK2c01@aK2a4f@aK2a4a aK2a4f@aK2a4a) (set! aK2a51@aK2a4c '#f) (set! aK2c02@aK2a51@aK2a4c aK2a51@aK2a4c) (set! aK2a53@aK2a4b (make-record-constructor-descriptor aK2a4f@aK2a4a aK2969@aK2961 aK2a51@aK2a4c)) (set! aK2c03@aK2a53@aK2a4b aK2a53@aK2a4b) (set! aK2a56@p? (record-predicate aK2a4f@aK2a4a)) (set! aK2c04@aK2a56@p? aK2a56@p?) (set! aK2a58@make-i/o-error (record-constructor aK2a53@aK2a4b)) (set! aK2c05@aK2a58@make-i/o-error aK2a58@make-i/o-error) (set! aK2a5a@i/o-error? (condition-predicate aK2a4f@aK2a4a)) (set! aK2c06@aK2a5a@i/o-error? aK2a5a@i/o-error?) (set! aK2a5c@&i/o-rtd aK2a4f@aK2a4a) (set! aK2c07@aK2a5c@&i/o-rtd aK2a5c@&i/o-rtd) (set! aK2a5e@&i/o-rcd aK2a53@aK2a4b) (set! aK2c08@aK2a5e@&i/o-rcd aK2a5e@&i/o-rcd) (set! aK2a64@aK2a5f (make-record-type-descriptor '&i/o-read aK2a4f@aK2a4a 'aK2a62 '#f '#f '#())) (set! aK2c09@aK2a64@aK2a5f aK2a64@aK2a5f) (set! aK2a66@aK2a61 '#f) (set! aK2c0a@aK2a66@aK2a61 aK2a66@aK2a61) (set! aK2a68@aK2a60 (make-record-constructor-descriptor aK2a64@aK2a5f aK2a53@aK2a4b aK2a66@aK2a61)) (set! aK2c0b@aK2a68@aK2a60 aK2a68@aK2a60) (set! aK2a6b@p? (record-predicate aK2a64@aK2a5f)) (set! aK2c0c@aK2a6b@p? aK2a6b@p?) (set! aK2a6d@make-i/o-read-error (record-constructor aK2a68@aK2a60)) (set! aK2c0d@aK2a6d@make-i/o-read-error aK2a6d@make-i/o-read-error) (set! aK2a6f@i/o-read-error? (condition-predicate aK2a64@aK2a5f)) (set! aK2c0e@aK2a6f@i/o-read-error? aK2a6f@i/o-read-error?) (set! aK2a71@&i/o-read-rtd aK2a64@aK2a5f) (set! aK2c0f@aK2a71@&i/o-read-rtd aK2a71@&i/o-read-rtd) (set! aK2a73@&i/o-read-rcd aK2a68@aK2a60) (set! aK2c10@aK2a73@&i/o-read-rcd aK2a73@&i/o-read-rcd) (set! aK2a79@aK2a74 (make-record-type-descriptor '&i/o-write aK2a4f@aK2a4a 'aK2a77 '#f '#f '#())) (set! aK2c11@aK2a79@aK2a74 aK2a79@aK2a74) (set! aK2a7b@aK2a76 '#f) (set! aK2c12@aK2a7b@aK2a76 aK2a7b@aK2a76) (set! aK2a7d@aK2a75 (make-record-constructor-descriptor aK2a79@aK2a74 aK2a53@aK2a4b aK2a7b@aK2a76)) (set! aK2c13@aK2a7d@aK2a75 aK2a7d@aK2a75) (set! aK2a80@p? (record-predicate aK2a79@aK2a74)) (set! aK2c14@aK2a80@p? aK2a80@p?) (set! aK2a82@make-i/o-write-error (record-constructor aK2a7d@aK2a75)) (set! aK2c15@aK2a82@make-i/o-write-error aK2a82@make-i/o-write-error) (set! aK2a84@i/o-write-error? (condition-predicate aK2a79@aK2a74)) (set! aK2c16@aK2a84@i/o-write-error? aK2a84@i/o-write-error?) (set! aK2a86@&i/o-write-rtd aK2a79@aK2a74) (set! aK2c17@aK2a86@&i/o-write-rtd aK2a86@&i/o-write-rtd) (set! aK2a88@&i/o-write-rcd aK2a7d@aK2a75) (set! aK2c18@aK2a88@&i/o-write-rcd aK2a88@&i/o-write-rcd) (set! aK2a90@aK2a8b (make-record-type-descriptor '&i/o-invalid-position aK2a4f@aK2a4a 'aK2a8e '#f '#f '#((immutable position)))) (set! aK2c19@aK2a90@aK2a8b aK2a90@aK2a8b) (set! aK2a92@aK2a8d '#f) (set! aK2c1a@aK2a92@aK2a8d aK2a92@aK2a8d) (set! aK2a94@aK2a8c (make-record-constructor-descriptor aK2a90@aK2a8b aK2a53@aK2a4b aK2a92@aK2a8d)) (set! aK2c1b@aK2a94@aK2a8c aK2a94@aK2a8c) (set! aK2a97@p? (record-predicate aK2a90@aK2a8b)) (set! aK2c1c@aK2a97@p? aK2a97@p?) (set! aK2a99@make-i/o-invalid-position-error (record-constructor aK2a94@aK2a8c)) (set! aK2c1d@aK2a99@make-i/o-invalid-position-error aK2a99@make-i/o-invalid-position-error) (set! aK2a9b@aK2a8a (record-accessor aK2a90@aK2a8b '0)) (set! aK2c1e@aK2a9b@aK2a8a aK2a9b@aK2a8a) (set! aK2a9d@i/o-invalid-position-error? (condition-predicate aK2a90@aK2a8b)) (set! aK2c1f@aK2a9d@i/o-invalid-position-error? aK2a9d@i/o-invalid-position-error?) (set! aK2a9f@i/o-error-position (condition-accessor aK2a90@aK2a8b aK2a9b@aK2a8a)) (set! aK2c20@aK2a9f@i/o-error-position aK2a9f@i/o-error-position) (set! aK2aa1@&i/o-invalid-position-rtd aK2a90@aK2a8b) (set! aK2c21@aK2aa1@&i/o-invalid-position-rtd aK2aa1@&i/o-invalid-position-rtd) (set! aK2aa3@&i/o-invalid-position-rcd aK2a94@aK2a8c) (set! aK2c22@aK2aa3@&i/o-invalid-position-rcd aK2aa3@&i/o-invalid-position-rcd) (set! aK2aab@aK2aa6 (make-record-type-descriptor '&i/o-filename aK2a4f@aK2a4a 'aK2aa9 '#f '#f '#((immutable filename)))) (set! aK2c23@aK2aab@aK2aa6 aK2aab@aK2aa6) (set! aK2aad@aK2aa8 '#f) (set! aK2c24@aK2aad@aK2aa8 aK2aad@aK2aa8) (set! aK2aaf@aK2aa7 (make-record-constructor-descriptor aK2aab@aK2aa6 aK2a53@aK2a4b aK2aad@aK2aa8)) (set! aK2c25@aK2aaf@aK2aa7 aK2aaf@aK2aa7) (set! aK2ab2@p? (record-predicate aK2aab@aK2aa6)) (set! aK2c26@aK2ab2@p? aK2ab2@p?) (set! aK2ab4@make-i/o-filename-error (record-constructor aK2aaf@aK2aa7)) (set! aK2c27@aK2ab4@make-i/o-filename-error aK2ab4@make-i/o-filename-error) (set! aK2ab6@aK2aa5 (record-accessor aK2aab@aK2aa6 '0)) (set! aK2c28@aK2ab6@aK2aa5 aK2ab6@aK2aa5) (set! aK2ab8@i/o-filename-error? (condition-predicate aK2aab@aK2aa6)) (set! aK2c29@aK2ab8@i/o-filename-error? aK2ab8@i/o-filename-error?) (set! aK2aba@i/o-error-filename (condition-accessor aK2aab@aK2aa6 aK2ab6@aK2aa5)) (set! aK2c2a@aK2aba@i/o-error-filename aK2aba@i/o-error-filename) (set! aK2abc@&i/o-filename-rtd aK2aab@aK2aa6) (set! aK2c2b@aK2abc@&i/o-filename-rtd aK2abc@&i/o-filename-rtd) (set! aK2abe@&i/o-filename-rcd aK2aaf@aK2aa7) (set! aK2c2c@aK2abe@&i/o-filename-rcd aK2abe@&i/o-filename-rcd) (set! aK2ac4@aK2abf (make-record-type-descriptor '&i/o-file-protection aK2aab@aK2aa6 'aK2ac2 '#f '#f '#())) (set! aK2c2d@aK2ac4@aK2abf aK2ac4@aK2abf) (set! aK2ac6@aK2ac1 '#f) (set! aK2c2e@aK2ac6@aK2ac1 aK2ac6@aK2ac1) (set! aK2ac8@aK2ac0 (make-record-constructor-descriptor aK2ac4@aK2abf aK2aaf@aK2aa7 aK2ac6@aK2ac1)) (set! aK2c2f@aK2ac8@aK2ac0 aK2ac8@aK2ac0) (set! aK2acb@p? (record-predicate aK2ac4@aK2abf)) (set! aK2c30@aK2acb@p? aK2acb@p?) (set! aK2acd@make-i/o-file-protection-error (record-constructor aK2ac8@aK2ac0)) (set! aK2c31@aK2acd@make-i/o-file-protection-error aK2acd@make-i/o-file-protection-error) (set! aK2acf@i/o-file-protection-error? (condition-predicate aK2ac4@aK2abf)) (set! aK2c32@aK2acf@i/o-file-protection-error? aK2acf@i/o-file-protection-error?) (set! aK2ad1@&i/o-file-protection-rtd aK2ac4@aK2abf) (set! aK2c33@aK2ad1@&i/o-file-protection-rtd aK2ad1@&i/o-file-protection-rtd) (set! aK2ad3@&i/o-file-protection-rcd aK2ac8@aK2ac0) (set! aK2c34@aK2ad3@&i/o-file-protection-rcd aK2ad3@&i/o-file-protection-rcd) (set! aK2ad9@aK2ad4 (make-record-type-descriptor '&i/o-file-is-read-only aK2ac4@aK2abf 'aK2ad7 '#f '#f '#())) (set! aK2c35@aK2ad9@aK2ad4 aK2ad9@aK2ad4) (set! aK2adb@aK2ad6 '#f) (set! aK2c36@aK2adb@aK2ad6 aK2adb@aK2ad6) (set! aK2add@aK2ad5 (make-record-constructor-descriptor aK2ad9@aK2ad4 aK2ac8@aK2ac0 aK2adb@aK2ad6)) (set! aK2c37@aK2add@aK2ad5 aK2add@aK2ad5) (set! aK2ae0@p? (record-predicate aK2ad9@aK2ad4)) (set! aK2c38@aK2ae0@p? aK2ae0@p?) (set! aK2ae2@make-i/o-file-is-read-only-error (record-constructor aK2add@aK2ad5)) (set! aK2c39@aK2ae2@make-i/o-file-is-read-only-error aK2ae2@make-i/o-file-is-read-only-error) (set! aK2ae4@i/o-file-is-read-only-error? (condition-predicate aK2ad9@aK2ad4)) (set! aK2c3a@aK2ae4@i/o-file-is-read-only-error? aK2ae4@i/o-file-is-read-only-error?) (set! aK2ae6@&i/o-file-is-read-only-rtd aK2ad9@aK2ad4) (set! aK2c3b@aK2ae6@&i/o-file-is-read-only-rtd aK2ae6@&i/o-file-is-read-only-rtd) (set! aK2ae8@&i/o-file-is-read-only-rcd aK2add@aK2ad5) (set! aK2c3c@aK2ae8@&i/o-file-is-read-only-rcd aK2ae8@&i/o-file-is-read-only-rcd) (set! aK2aee@aK2ae9 (make-record-type-descriptor '&i/o-file-already-exists aK2aab@aK2aa6 'aK2aec '#f '#f '#())) (set! aK2c3d@aK2aee@aK2ae9 aK2aee@aK2ae9) (set! aK2af0@aK2aeb '#f) (set! aK2c3e@aK2af0@aK2aeb aK2af0@aK2aeb) (set! aK2af2@aK2aea (make-record-constructor-descriptor aK2aee@aK2ae9 aK2aaf@aK2aa7 aK2af0@aK2aeb)) (set! aK2c3f@aK2af2@aK2aea aK2af2@aK2aea) (set! aK2af5@p? (record-predicate aK2aee@aK2ae9)) (set! aK2c40@aK2af5@p? aK2af5@p?) (set! aK2af7@make-i/o-file-already-exists-error (record-constructor aK2af2@aK2aea)) (set! aK2c41@aK2af7@make-i/o-file-already-exists-error aK2af7@make-i/o-file-already-exists-error) (set! aK2af9@i/o-file-already-exists-error? (condition-predicate aK2aee@aK2ae9)) (set! aK2c42@aK2af9@i/o-file-already-exists-error? aK2af9@i/o-file-already-exists-error?) (set! aK2afb@&i/o-file-already-exists-rtd aK2aee@aK2ae9) (set! aK2c43@aK2afb@&i/o-file-already-exists-rtd aK2afb@&i/o-file-already-exists-rtd) (set! aK2afd@&i/o-file-already-exists-rcd aK2af2@aK2aea) (set! aK2c44@aK2afd@&i/o-file-already-exists-rcd aK2afd@&i/o-file-already-exists-rcd) (set! aK2b03@aK2afe (make-record-type-descriptor '&i/o-file-does-not-exist aK2aab@aK2aa6 'aK2b01 '#f '#f '#())) (set! aK2c45@aK2b03@aK2afe aK2b03@aK2afe) (set! aK2b05@aK2b00 '#f) (set! aK2c46@aK2b05@aK2b00 aK2b05@aK2b00) (set! aK2b07@aK2aff (make-record-constructor-descriptor aK2b03@aK2afe aK2aaf@aK2aa7 aK2b05@aK2b00)) (set! aK2c47@aK2b07@aK2aff aK2b07@aK2aff) (set! aK2b0a@p? (record-predicate aK2b03@aK2afe)) (set! aK2c48@aK2b0a@p? aK2b0a@p?) (set! aK2b0c@make-i/o-file-does-not-exist-error (record-constructor aK2b07@aK2aff)) (set! aK2c49@aK2b0c@make-i/o-file-does-not-exist-error aK2b0c@make-i/o-file-does-not-exist-error) (set! aK2b0e@i/o-file-does-not-exist-error? (condition-predicate aK2b03@aK2afe)) (set! aK2c4a@aK2b0e@i/o-file-does-not-exist-error? aK2b0e@i/o-file-does-not-exist-error?) (set! aK2b10@&i/o-file-does-not-exist-rtd aK2b03@aK2afe) (set! aK2c4b@aK2b10@&i/o-file-does-not-exist-rtd aK2b10@&i/o-file-does-not-exist-rtd) (set! aK2b12@&i/o-file-does-not-exist-rcd aK2b07@aK2aff) (set! aK2c4c@aK2b12@&i/o-file-does-not-exist-rcd aK2b12@&i/o-file-does-not-exist-rcd) (set! aK2b1a@aK2b15 (make-record-type-descriptor '&i/o-port aK2a4f@aK2a4a 'aK2b18 '#f '#f '#((immutable port)))) (set! aK2c4d@aK2b1a@aK2b15 aK2b1a@aK2b15) (set! aK2b1c@aK2b17 '#f) (set! aK2c4e@aK2b1c@aK2b17 aK2b1c@aK2b17) (set! aK2b1e@aK2b16 (make-record-constructor-descriptor aK2b1a@aK2b15 aK2a53@aK2a4b aK2b1c@aK2b17)) (set! aK2c4f@aK2b1e@aK2b16 aK2b1e@aK2b16) (set! aK2b21@p? (record-predicate aK2b1a@aK2b15)) (set! aK2c50@aK2b21@p? aK2b21@p?) (set! aK2b23@make-i/o-port-error (record-constructor aK2b1e@aK2b16)) (set! aK2c51@aK2b23@make-i/o-port-error aK2b23@make-i/o-port-error) (set! aK2b25@aK2b14 (record-accessor aK2b1a@aK2b15 '0)) (set! aK2c52@aK2b25@aK2b14 aK2b25@aK2b14) (set! aK2b27@i/o-port-error? (condition-predicate aK2b1a@aK2b15)) (set! aK2c53@aK2b27@i/o-port-error? aK2b27@i/o-port-error?) (set! aK2b29@i/o-error-port (condition-accessor aK2b1a@aK2b15 aK2b25@aK2b14)) (set! aK2c54@aK2b29@i/o-error-port aK2b29@i/o-error-port) (set! aK2b2b@&i/o-port-rtd aK2b1a@aK2b15) (set! aK2c55@aK2b2b@&i/o-port-rtd aK2b2b@&i/o-port-rtd) (set! aK2b2d@&i/o-port-rcd aK2b1e@aK2b16) (set! aK2c56@aK2b2d@&i/o-port-rcd aK2b2d@&i/o-port-rcd) (set! aK2b33@aK2b2e (make-record-type-descriptor '&i/o-decoding aK2b1a@aK2b15 'aK2b31 '#f '#f '#())) (set! aK2c57@aK2b33@aK2b2e aK2b33@aK2b2e) (set! aK2b35@aK2b30 '#f) (set! aK2c58@aK2b35@aK2b30 aK2b35@aK2b30) (set! aK2b37@aK2b2f (make-record-constructor-descriptor aK2b33@aK2b2e aK2b1e@aK2b16 aK2b35@aK2b30)) (set! aK2c59@aK2b37@aK2b2f aK2b37@aK2b2f) (set! aK2b3a@p? (record-predicate aK2b33@aK2b2e)) (set! aK2c5a@aK2b3a@p? aK2b3a@p?) (set! aK2b3c@make-i/o-decoding-error (record-constructor aK2b37@aK2b2f)) (set! aK2c5b@aK2b3c@make-i/o-decoding-error aK2b3c@make-i/o-decoding-error) (set! aK2b3e@i/o-decoding-error? (condition-predicate aK2b33@aK2b2e)) (set! aK2c5c@aK2b3e@i/o-decoding-error? aK2b3e@i/o-decoding-error?) (set! aK2b40@&i/o-decoding-rtd aK2b33@aK2b2e) (set! aK2c5d@aK2b40@&i/o-decoding-rtd aK2b40@&i/o-decoding-rtd) (set! aK2b42@&i/o-decoding-rcd aK2b37@aK2b2f) (set! aK2c5e@aK2b42@&i/o-decoding-rcd aK2b42@&i/o-decoding-rcd) (set! aK2b4a@aK2b45 (make-record-type-descriptor '&i/o-encoding aK2b1a@aK2b15 'aK2b48 '#f '#f '#((immutable char)))) (set! aK2c5f@aK2b4a@aK2b45 aK2b4a@aK2b45) (set! aK2b4c@aK2b47 '#f) (set! aK2c60@aK2b4c@aK2b47 aK2b4c@aK2b47) (set! aK2b4e@aK2b46 (make-record-constructor-descriptor aK2b4a@aK2b45 aK2b1e@aK2b16 aK2b4c@aK2b47)) (set! aK2c61@aK2b4e@aK2b46 aK2b4e@aK2b46) (set! aK2b51@p? (record-predicate aK2b4a@aK2b45)) (set! aK2c62@aK2b51@p? aK2b51@p?) (set! aK2b53@make-i/o-encoding-error (record-constructor aK2b4e@aK2b46)) (set! aK2c63@aK2b53@make-i/o-encoding-error aK2b53@make-i/o-encoding-error) (set! aK2b55@aK2b44 (record-accessor aK2b4a@aK2b45 '0)) (set! aK2c64@aK2b55@aK2b44 aK2b55@aK2b44) (set! aK2b57@i/o-encoding-error? (condition-predicate aK2b4a@aK2b45)) (set! aK2c65@aK2b57@i/o-encoding-error? aK2b57@i/o-encoding-error?) (set! aK2b59@i/o-encoding-error-char (condition-accessor aK2b4a@aK2b45 aK2b55@aK2b44)) (set! aK2c66@aK2b59@i/o-encoding-error-char aK2b59@i/o-encoding-error-char) (set! aK2b5b@&i/o-encoding-rtd aK2b4a@aK2b45) (set! aK2c67@aK2b5b@&i/o-encoding-rtd aK2b5b@&i/o-encoding-rtd) (set! aK2b5d@&i/o-encoding-rcd aK2b4e@aK2b46) (set! aK2c68@aK2b5d@&i/o-encoding-rcd aK2b5d@&i/o-encoding-rcd) (set! aK2b63@aK2b5e (make-record-type-descriptor '&no-infinities aK29ef@aK29ea 'aK2b61 '#f '#f '#())) (set! aK2c69@aK2b63@aK2b5e aK2b63@aK2b5e) (set! aK2b65@aK2b60 '#f) (set! aK2c6a@aK2b65@aK2b60 aK2b65@aK2b60) (set! aK2b67@aK2b5f (make-record-constructor-descriptor aK2b63@aK2b5e aK29f3@aK29eb aK2b65@aK2b60)) (set! aK2c6b@aK2b67@aK2b5f aK2b67@aK2b5f) (set! aK2b6a@p? (record-predicate aK2b63@aK2b5e)) (set! aK2c6c@aK2b6a@p? aK2b6a@p?) (set! aK2b6c@make-no-infinities-violation (record-constructor aK2b67@aK2b5f)) (set! aK2c6d@aK2b6c@make-no-infinities-violation aK2b6c@make-no-infinities-violation) (set! aK2b6e@no-infinities-violation? (condition-predicate aK2b63@aK2b5e)) (set! aK2c6e@aK2b6e@no-infinities-violation? aK2b6e@no-infinities-violation?) (set! aK2b70@&no-infinities-rtd aK2b63@aK2b5e) (set! aK2c6f@aK2b70@&no-infinities-rtd aK2b70@&no-infinities-rtd) (set! aK2b72@&no-infinities-rcd aK2b67@aK2b5f) (set! aK2c70@aK2b72@&no-infinities-rcd aK2b72@&no-infinities-rcd) (set! aK2b78@aK2b73 (make-record-type-descriptor '&no-nans aK29ef@aK29ea 'aK2b76 '#f '#f '#())) (set! aK2c71@aK2b78@aK2b73 aK2b78@aK2b73) (set! aK2b7a@aK2b75 '#f) (set! aK2c72@aK2b7a@aK2b75 aK2b7a@aK2b75) (set! aK2b7c@aK2b74 (make-record-constructor-descriptor aK2b78@aK2b73 aK29f3@aK29eb aK2b7a@aK2b75)) (set! aK2c73@aK2b7c@aK2b74 aK2b7c@aK2b74) (set! aK2b7f@p? (record-predicate aK2b78@aK2b73)) (set! aK2c74@aK2b7f@p? aK2b7f@p?) (set! aK2b81@make-no-nans-violation (record-constructor aK2b7c@aK2b74)) (set! aK2c75@aK2b81@make-no-nans-violation aK2b81@make-no-nans-violation) (set! aK2b83@no-nans-violation? (condition-predicate aK2b78@aK2b73)) (set! aK2c76@aK2b83@no-nans-violation? aK2b83@no-nans-violation?) (set! aK2b85@&no-nans-rtd aK2b78@aK2b73) (set! aK2c77@aK2b85@&no-nans-rtd aK2b85@&no-nans-rtd) (set! aK2b87@&no-nans-rcd aK2b7c@aK2b74) (set! aK2c78@aK2b87@&no-nans-rcd aK2b87@&no-nans-rcd) (void))
(begin (begin (aK710@aK6c5@current-primitive-locations (lambda (aK3144@x) (let ((aK3146@t (assq aK3144@x '((&no-nans-rcd . aK2c78@aK2b87@&no-nans-rcd) (&no-nans-rtd . aK2c77@aK2b85@&no-nans-rtd) (&no-infinities-rcd . aK2c70@aK2b72@&no-infinities-rcd) (&no-infinities-rtd . aK2c6f@aK2b70@&no-infinities-rtd) (&i/o-encoding-rcd . aK2c68@aK2b5d@&i/o-encoding-rcd) (&i/o-encoding-rtd . aK2c67@aK2b5b@&i/o-encoding-rtd) (&i/o-decoding-rcd . aK2c5e@aK2b42@&i/o-decoding-rcd) (&i/o-decoding-rtd . aK2c5d@aK2b40@&i/o-decoding-rtd) (&i/o-port-rcd . aK2c56@aK2b2d@&i/o-port-rcd) (&i/o-port-rtd . aK2c55@aK2b2b@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . aK2c4c@aK2b12@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . aK2c4b@aK2b10@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . aK2c44@aK2afd@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . aK2c43@aK2afb@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . aK2c3c@aK2ae8@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . aK2c3b@aK2ae6@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . aK2c34@aK2ad3@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . aK2c33@aK2ad1@&i/o-file-protection-rtd) (&i/o-filename-rcd . aK2c2c@aK2abe@&i/o-filename-rcd) (&i/o-filename-rtd . aK2c2b@aK2abc@&i/o-filename-rtd) (&i/o-invalid-position-rcd . aK2c22@aK2aa3@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . aK2c21@aK2aa1@&i/o-invalid-position-rtd) (&i/o-write-rcd . aK2c18@aK2a88@&i/o-write-rcd) (&i/o-write-rtd . aK2c17@aK2a86@&i/o-write-rtd) (&i/o-read-rcd . aK2c10@aK2a73@&i/o-read-rcd) (&i/o-read-rtd . aK2c0f@aK2a71@&i/o-read-rtd) (&i/o-rcd . aK2c08@aK2a5e@&i/o-rcd) (&i/o-rtd . aK2c07@aK2a5c@&i/o-rtd) (&undefined-rcd . aK2c00@aK2a49@&undefined-rcd) (&undefined-rtd . aK2bff@aK2a47@&undefined-rtd) (&syntax-rcd . aK2bf8@aK2a34@&syntax-rcd) (&syntax-rtd . aK2bf7@aK2a32@&syntax-rtd) (&lexical-rcd . aK2bec@aK2a13@&lexical-rcd) (&lexical-rtd . aK2beb@aK2a11@&lexical-rtd) (&implementation-restriction-rcd . aK2be4@aK29fe@&implementation-restriction-rcd) (&implementation-restriction-rtd . aK2be3@aK29fc@&implementation-restriction-rtd) (&non-continuable-rcd . aK2bdc@aK29e9@&non-continuable-rcd) (&non-continuable-rtd . aK2bdb@aK29e7@&non-continuable-rtd) (&who-rcd . aK2bd4@aK29d4@&who-rcd) (&who-rtd . aK2bd3@aK29d2@&who-rtd) (&irritants-rcd . aK2bca@aK29b9@&irritants-rcd) (&irritants-rtd . aK2bc9@aK29b7@&irritants-rtd) (&assertion-rcd . aK2bc0@aK299e@&assertion-rcd) (&assertion-rtd . aK2bbf@aK299c@&assertion-rtd) (&violation-rcd . aK2bb8@aK2989@&violation-rcd) (&violation-rtd . aK2bb7@aK2987@&violation-rtd) (&error-rcd . aK2bb0@aK2974@&error-rcd) (&error-rtd . aK2baf@aK2972@&error-rtd) (&serious-rcd . aK2ba8@aK295f@&serious-rcd) (&serious-rtd . aK2ba7@aK295d@&serious-rtd) (&warning-rcd . aK2ba0@aK294a@&warning-rcd) (&warning-rtd . aK2b9f@aK2948@&warning-rtd) (&message-rcd . aK2b98@aK2935@&message-rcd) (&message-rtd . aK2b97@aK2933@&message-rtd) (&condition-rcd . aK2b8e@aK28d6@&condition-rcd) (&condition-rtd . aK2b8d@aK28d4@&condition-rtd) (syntax-error . aK28b0@aKe56@syntax-error) (syntax-dispatch . aK284e@aKd7a@syntax-dispatch) (load . aK2ded@aK2c98@load) (interaction-environment . aK28b9@aKe68@interaction-environment) (library-path . aK977@aK7b3@library-path) (mosh-cache-dir . aK6be@aK59e@mosh-cache-dir) (make-parameter . aK6bd@aK59c@make-parameter) (make-variable-transformer . aK280b@aKba5@make-variable-transformer) (identifier? . aK28b3@aKe5c@identifier?) (generate-temporaries . aK28a9@aKe48@generate-temporaries) (free-identifier=? . aK28aa@aKe4a@free-identifier=?) (syntax->datum . aK28b5@aKe60@syntax->datum) (datum->syntax . aK28b4@aKe5e@datum->syntax) (bound-identifier=? . aK28ab@aKe4c@bound-identifier=?) (make-i/o-write-error . aK2c15@aK2a82@make-i/o-write-error) (make-i/o-read-error . aK2c0d@aK2a6d@make-i/o-read-error) (make-i/o-port-error . aK2c51@aK2b23@make-i/o-port-error) (make-i/o-invalid-position-error . aK2c1d@aK2a99@make-i/o-invalid-position-error) (make-i/o-filename-error . aK2c27@aK2ab4@make-i/o-filename-error) (make-i/o-file-protection-error . aK2c31@aK2acd@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . aK2c39@aK2ae2@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . aK2c49@aK2b0c@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . aK2c41@aK2af7@make-i/o-file-already-exists-error) (make-i/o-error . aK2c05@aK2a58@make-i/o-error) (make-i/o-encoding-error . aK2c63@aK2b53@make-i/o-encoding-error) (make-i/o-decoding-error . aK2c5b@aK2b3c@make-i/o-decoding-error) (i/o-write-error? . aK2c16@aK2a84@i/o-write-error?) (i/o-read-error? . aK2c0e@aK2a6f@i/o-read-error?) (i/o-port-error? . aK2c53@aK2b27@i/o-port-error?) (i/o-invalid-position-error? . aK2c1f@aK2a9d@i/o-invalid-position-error?) (i/o-filename-error? . aK2c29@aK2ab8@i/o-filename-error?) (i/o-file-protection-error? . aK2c32@aK2acf@i/o-file-protection-error?) (i/o-file-is-read-only-error? . aK2c3a@aK2ae4@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . aK2c4a@aK2b0e@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . aK2c42@aK2af9@i/o-file-already-exists-error?) (i/o-error? . aK2c06@aK2a5a@i/o-error?) (i/o-error-position . aK2c20@aK2a9f@i/o-error-position) (i/o-error-port . aK2c54@aK2b29@i/o-error-port) (i/o-error-filename . aK2c2a@aK2aba@i/o-error-filename) (i/o-encoding-error? . aK2c65@aK2b57@i/o-encoding-error?) (i/o-encoding-error-char . aK2c66@aK2b59@i/o-encoding-error-char) (i/o-decoding-error? . aK2c5c@aK2b3e@i/o-decoding-error?) (scheme-report-environment . aK28a0@aKe36@scheme-report-environment) (null-environment . aK289f@aKe34@null-environment) (command-line . aK2dea@aK2c92@command-line) (eval . aK28a2@aKe3a@eval) (environment . aK289e@aKe32@environment) (who-condition? . aK2bd1@aK29ce@who-condition?) (warning? . aK2b9e@aK2946@warning?) (violation? . aK2bb6@aK2985@violation?) (undefined-violation? . aK2bfe@aK2a45@undefined-violation?) (syntax-violation? . aK2bf4@aK2a2c@syntax-violation?) (syntax-violation-subform . aK2bf6@aK2a30@syntax-violation-subform) (syntax-violation-form . aK2bf5@aK2a2e@syntax-violation-form) (syntax-violation . aK28b2@aKe5a@syntax-violation) (serious-condition? . aK2ba6@aK295b@serious-condition?) (non-continuable-violation? . aK2bda@aK29e5@non-continuable-violation?) (message-condition? . aK2b95@aK292f@message-condition?) (make-who-condition . aK2bcf@aK29ca@make-who-condition) (make-warning . aK2b9d@aK2944@make-warning) (make-violation . aK2bb5@aK2983@make-violation) (make-undefined-violation . aK2bfd@aK2a43@make-undefined-violation) (make-syntax-violation . aK2bf1@aK2a26@make-syntax-violation) (make-serious-condition . aK2ba5@aK2959@make-serious-condition) (make-non-continuable-violation . aK2bd9@aK29e3@make-non-continuable-violation) (make-message-condition . aK2b93@aK292b@make-message-condition) (make-lexical-violation . aK2be9@aK2a0d@make-lexical-violation) (make-irritants-condition . aK2bc5@aK29af@make-irritants-condition) (make-implementation-restriction-violation . aK2be1@aK29f8@make-implementation-restriction-violation) (make-error . aK2bad@aK296e@make-error) (make-assertion-violation . aK2bbd@aK2998@make-assertion-violation) (lexical-violation? . aK2bea@aK2a0f@lexical-violation?) (irritants-condition? . aK2bc7@aK29b3@irritants-condition?) (implementation-restriction-violation? . aK2be2@aK29fa@implementation-restriction-violation?) (error? . aK2bae@aK2970@error?) (condition-who . aK2bd2@aK29d0@condition-who) (condition-message . aK2b96@aK2931@condition-message) (condition-irritants . aK2bc8@aK29b5@condition-irritants) (assertion-violation? . aK2bbe@aK299a@assertion-violation?) (no-nans-violation? . aK2c76@aK2b83@no-nans-violation?) (no-infinities-violation? . aK2c6e@aK2b6e@no-infinities-violation?) (make-no-nans-violation . aK2c75@aK2b81@make-no-nans-violation) (make-no-infinities-violation . aK2c6d@aK2b6c@make-no-infinities-violation) (assertion-error . aK28af@aKe54@assertion-error))))) (if aK3146@t (cdr aK3146@t) '#f)))) (aK987@aK7d3@install-library 'aK3121 '(mosh interaction) '() '() '() '() '((regexp? . aK3119) (alist->eq-hash-table . aK3115) (format . aK3112) (string-split . aK3107) (call-process . aK3101) (set-current-directory! . aK30fd) (expand-path . aK30fc) (current-directory . aK30fb) (%spawn . aK30fa) (%waitpid . aK30f9) (simple-struct-name . aK30f8) (simple-struct-set! . aK30f7) (simple-struct-ref . aK30f6) (make-simple-struct . aK30f5) (simple-struct? . aK30f4) (pointer-ref-c-int64 . aK30f3) (pointer-ref-c-int32 . aK30f2) (pointer-ref-c-int16 . aK30f1) (pointer-ref-c-int8 . aK30f0) (pointer-ref-c-uint64 . aK30ef) (pointer-ref-c-uint32 . aK30ee) (pointer-ref-c-uint16 . aK30ed) (pointer-ref-c-uint8 . aK30ec) (pointer-set-c-uint64! . aK30eb) (pointer-set-c-uint32! . aK30ea) (pointer-set-c-uint16! . aK30e9) (pointer-set-c-uint8! . aK30e8) (pointer-set-c-int64! . aK30e7) (pointer-set-c-int32! . aK30e6) (pointer-set-c-int16! . aK30e5) (pointer-set-c-int8! . aK30e4) (pointer-set-c-pointer! . aK30e3) (pointer-set-c-double! . aK30e2) (pointer-set-c-float! . aK30e1) (pointer-set-c-long-long! . aK30e0) (pointer-set-c-long! . aK30df) (pointer-set-c-int! . aK30de) (pointer-set-c-short! . aK30dd) (pointer-set-c-char! . aK30dc) (pointer-ref-c-pointer . aK30db) (pointer-ref-c-double . aK30da) (pointer-ref-c-float . aK30d9) (pointer-ref-c-unsigned-long-long . aK30d8) (pointer-ref-c-signed-long-long . aK30d7) (pointer-ref-c-unsigned-long . aK30d6) (pointer-ref-c-signed-long . aK30d5) (pointer-ref-c-unsigned-int . aK30d4) (pointer-ref-c-signed-int . aK30d3) (pointer-ref-c-unsigned-short . aK30d2) (pointer-ref-c-signed-short . aK30d1) (pointer-ref-c-unsigned-char . aK30d0) (pointer-ref-c-signed-char . aK30cf) (pointer->integer . aK30ce) (integer->pointer . aK30cd) (pointer? . aK30cc) (shared-errno . aK30cb) (%ffi-supported? . aK30c8) (%ffi-pointer->string . aK30c7) (%ffi-call->string-or-zero . aK30c6) (%ffi-call->double . aK30c5) (%ffi-call->void* . aK30c4) (%ffi-call->void . aK30c3) (%ffi-call->char . aK30c2) (%ffi-call->int . aK30c1) (%ffi-lookup . aK30c0) (%ffi-open . aK30bf) (%fork . aK30be) (%pipe . aK30bd) (p . aK30bc) (whereis . aK30a0) (register . aK309f) (vm-join! . aK309e) (vm-set-value! . aK309d) (vm? . aK309c) (main-vm? . aK309b) (vm-eval . aK309a) (vm-self . aK3099) (vm-start! . aK3098) (make-vm . aK3097) (mutex-try-lock! . aK3096) (mutex-unlock! . aK3095) (mutex-lock! . aK3094) (mutex? . aK3093) (make-mutex . aK3092) (condition-variable-notify-all! . aK3091) (condition-variable-notify! . aK3090) (condition-variable-wait! . aK308f) (make-condition-variable . aK308e) (string-upcase . aK3076) (string-titlecase . aK3075) (string-normalize-nfkd . aK3074) (string-normalize-nfkc . aK3073) (string-normalize-nfd . aK3072) (string-normalize-nfc . aK3071) (string-foldcase . aK3070) (string-downcase . aK306f) (string-ci>? . aK306e) (string-ci>=? . aK306d) (string-ci=? . aK306c) (string-ci<? . aK306b) (string-ci<=? . aK306a) (char-whitespace? . aK3069) (char-upper-case? . aK3068) (char-title-case? . aK3067) (char-numeric? . aK3066) (char-lower-case? . aK3065) (char-general-category . aK3064) (char-upcase . aK3063) (char-titlecase . aK3062) (char-foldcase . aK3061) (char-downcase . aK3060) (char-ci>? . aK305f) (char-ci>=? . aK305e) (char-ci=? . aK305d) (char-ci<? . aK305c) (char-ci<=? . aK305b) (char-alphabetic? . aK305a) (make-variable-transformer . aKba4) (identifier? . aKe5b) (generate-temporaries . aKe47) (free-identifier=? . aKe49) (syntax->datum . aKe5f) (datum->syntax . aKe5d) (bound-identifier=? . aKe4b) (record-type-descriptor? . aK3059) (record-predicate . aK3058) (record-mutator . aK3057) (record-constructor . aK3056) (record-accessor . aK3055) (make-record-type-descriptor . aK3054) (make-record-constructor-descriptor . aK3053) (record? . aK3052) (record-type-uid . aK3051) (record-type-sealed? . aK3050) (record-type-parent . aK304f) (record-type-opaque? . aK304e) (record-type-name . aK304d) (record-type-generative? . aK304c) (record-type-field-names . aK304b) (record-rtd . aK304a) (record-field-mutable? . aK3049) (delete-file . aK3048) (file-exists? . aK3047) (vector-sort! . aK3046) (vector-sort . aK3045) (list-sort . aK3044) (symbol-hash . aK3043) (string-ci-hash . aK3042) (string-hash . aK3041) (equal-hash . aK3040) (hashtable-equivalence-function . aK303f) (make-hashtable . aK303e) (hashtable-hash-function . aK303d) (make-eqv-hashtable . aK303c) (make-eq-hashtable . aK303b) (hashtable? . aK303a) (hashtable-update! . aK3039) (hashtable-size . aK3038) (hashtable-set! . aK3037) (hashtable-ref . aK3036) (hashtable-mutable? . aK3035) (hashtable-keys . aK3034) (hashtable-entries . aK3033) (hashtable-delete! . aK3032) (hashtable-copy . aK3031) (hashtable-contains? . aK3030) (hashtable-clear! . aK302f) (call-with-output-file . aK302e) (call-with-input-file . aK302d) (write-char . aK302c) (write . aK302b) (with-output-to-file . aK302a) (with-input-from-file . aK3029) (read-char . aK3028) (read . aK3027) (peek-char . aK3026) (open-output-file . aK3025) (open-input-file . aK3024) (newline . aK3023) (display . aK3022) (close-output-port . aK3021) (close-input-port . aK3020) (eof-object? . aK301f) (eof-object . aK301e) (current-error-port . aK301d) (current-output-port . aK301c) (current-input-port . aK301b) (output-port? . aK301a) (input-port? . aK3019) (utf-8-codec . aK3018) (utf-16-codec . aK3017) (transcoder-error-handling-mode . aK3016) (transcoder-eol-style . aK3015) (transcoder-codec . aK3014) (transcoded-port . aK3013) (textual-port? . aK3012) (string->bytevector . aK3011) (standard-output-port . aK3010) (standard-input-port . aK300f) (standard-error-port . aK300e) (set-port-position! . aK300d) (put-u8 . aK300c) (put-string . aK300b) (put-datum . aK300a) (put-char . aK3009) (put-bytevector . aK3008) (port? . aK3007) (port-transcoder . aK3006) (port-position . aK3005) (port-has-set-port-position!? . aK3004) (port-has-port-position? . aK3003) (port-eof? . aK3002) (output-port-buffer-mode . aK3001) (open-string-output-port . aK3000) (open-string-input-port . aK2fff) (open-file-output-port . aK2ffe) (open-file-input/output-port . aK2ffd) (open-file-input-port . aK2ffc) (open-bytevector-output-port . aK2ffb) (open-bytevector-input-port . aK2ffa) (native-transcoder . aK2ff9) (native-eol-style . aK2ff8) (make-transcoder . aK2ff7) (latin-1-codec . aK2ff6) (make-i/o-write-error . aK2a81) (make-i/o-read-error . aK2a6c) (make-i/o-port-error . aK2b22) (make-i/o-invalid-position-error . aK2a98) (make-i/o-filename-error . aK2ab3) (make-i/o-file-protection-error . aK2acc) (make-i/o-file-is-read-only-error . aK2ae1) (make-i/o-file-does-not-exist-error . aK2b0b) (make-i/o-file-already-exists-error . aK2af6) (make-i/o-error . aK2a57) (make-i/o-encoding-error . aK2b52) (make-i/o-decoding-error . aK2b3b) (make-custom-textual-output-port . aK2ff5) (make-custom-textual-input/output-port . aK2ff4) (make-custom-textual-input-port . aK2ff3) (make-custom-binary-output-port . aK2ff2) (make-custom-binary-input/output-port . aK2ff1) (make-custom-binary-input-port . aK2ff0) (make-bytevector . aK2fef) (lookahead-u8 . aK2fee) (lookahead-char . aK2fed) (i/o-write-error? . aK2a83) (i/o-read-error? . aK2a6e) (i/o-port-error? . aK2b26) (i/o-invalid-position-error? . aK2a9c) (i/o-filename-error? . aK2ab7) (i/o-file-protection-error? . aK2ace) (i/o-file-is-read-only-error? . aK2ae3) (i/o-file-does-not-exist-error? . aK2b0d) (i/o-file-already-exists-error? . aK2af8) (i/o-error? . aK2a59) (i/o-error-position . aK2a9e) (i/o-error-port . aK2b28) (i/o-error-filename . aK2ab9) (i/o-encoding-error? . aK2b56) (i/o-encoding-error-char . aK2b58) (i/o-decoding-error? . aK2b3d) (get-u8 . aK2fec) (get-string-n! . aK2feb) (get-string-n . aK2fea) (get-string-all . aK2fe9) (get-line . aK2fe8) (get-datum . aK2fe7) (get-char . aK2fe6) (get-bytevector-some . aK2fe5) (get-bytevector-n! . aK2fe4) (get-bytevector-n . aK2fe3) (get-bytevector-all . aK2fe2) (flush-output-port . aK2fe1) (close-port . aK2fe0) (exit . aK2fd8) (command-line . aK2c91) (string-fill! . aK2fd7) (string-set! . aK2fd6) (set-cdr! . aK2fd5) (set-car! . aK2fd4) (remove . aK2fd3) (remv . aK2fd2) (remp . aK2fd1) (remq . aK2fd0) (partition . aK2fcf) (memv . aK2fce) (memq . aK2fcd) (memp . aK2fcc) (member . aK2fcb) (exists . aK2fca) (for-all . aK2fc9) (fold-right . aK2fc8) (fold-left . aK2fc7) (find . aK2fc6) (filter . aK2fc5) (cons* . aK2fc4) (assv . aK2fc3) (assq . aK2fc2) (assp . aK2fc1) (assoc . aK2fc0) (call-with-string-output-port . aK2fbf) (call-with-port . aK2fbe) (call-with-bytevector-output-port . aK2fbd) (bytevector->string . aK2fbc) (buffer-mode? . aK2fbb) (binary-port? . aK2fba) (with-exception-handler . aK2fb9) (raise-continuable . aK2fb8) (raise . aK2fb7) (eval . aKe39) (environment . aKe31) (make-enumeration . aK2fb6) (enum-set=? . aK2fb5) (enum-set-universe . aK2fb4) (enum-set-union . aK2fb3) (enum-set-subset? . aK2fb2) (enum-set-projection . aK2fb1) (enum-set-member? . aK2fb0) (enum-set-intersection . aK2faf) (enum-set-indexer . aK2fae) (enum-set-difference . aK2fad) (enum-set-constructor . aK2fac) (enum-set-complement . aK2fab) (enum-set->list . aK2faa) (who-condition? . aK29cd) (warning? . aK2945) (violation? . aK2984) (undefined-violation? . aK2a44) (syntax-violation? . aK2a2b) (syntax-violation-subform . aK2a2f) (syntax-violation-form . aK2a2d) (syntax-violation . aKe59) (simple-conditions . aK2fa9) (serious-condition? . aK295a) (non-continuable-violation? . aK29e4) (message-condition? . aK292e) (make-who-condition . aK29c9) (make-warning . aK2943) (make-violation . aK2982) (make-undefined-violation . aK2a42) (make-syntax-violation . aK2a25) (make-serious-condition . aK2958) (make-non-continuable-violation . aK29e2) (make-message-condition . aK292a) (make-lexical-violation . aK2a0c) (make-irritants-condition . aK29ae) (make-implementation-restriction-violation . aK29f7) (make-error . aK296d) (make-assertion-violation . aK2997) (lexical-violation? . aK2a0e) (irritants-condition? . aK29b2) (implementation-restriction-violation? . aK29f9) (error? . aK296f) (condition-who . aK29cf) (condition-predicate . aK2fa8) (condition-message . aK2930) (condition-irritants . aK29b4) (condition-accessor . aK2fa7) (condition . aK2fa6) (assertion-violation? . aK2999) (condition? . aK2fa5) (utf32->string . aK2fa4) (utf16->string . aK2fa3) (utf8->string . aK2fa2) (uint-list->bytevector . aK2fa1) (u8-list->bytevector . aK2fa0) (string->utf8 . aK2f9f) (string->utf32 . aK2f9e) (string->utf16 . aK2f9d) (sint-list->bytevector . aK2f9c) (native-endianness . aK2f9b) (bytevector? . aK2f9a) (bytevector=? . aK2f99) (bytevector-uint-set! . aK2f98) (bytevector-uint-ref . aK2f97) (bytevector-u8-set! . aK2f96) (bytevector-u8-ref . aK2f95) (bytevector-u64-set! . aK2f94) (bytevector-u64-ref . aK2f93) (bytevector-u64-native-set! . aK2f92) (bytevector-u64-native-ref . aK2f91) (bytevector-u32-set! . aK2f90) (bytevector-u32-ref . aK2f8f) (bytevector-u32-native-set! . aK2f8e) (bytevector-u32-native-ref . aK2f8d) (bytevector-u16-set! . aK2f8c) (bytevector-u16-ref . aK2f8b) (bytevector-u16-native-set! . aK2f8a) (bytevector-u16-native-ref . aK2f89) (bytevector-sint-set! . aK2f88) (bytevector-sint-ref . aK2f87) (bytevector-s8-set! . aK2f86) (bytevector-s8-ref . aK2f85) (bytevector-s64-set! . aK2f84) (bytevector-s64-ref . aK2f83) (bytevector-s64-native-set! . aK2f82) (bytevector-s64-native-ref . aK2f81) (bytevector-s32-set! . aK2f80) (bytevector-s32-ref . aK2f7f) (bytevector-s32-native-set! . aK2f7e) (bytevector-s32-native-ref . aK2f7d) (bytevector-s16-set! . aK2f7c) (bytevector-s16-ref . aK2f7b) (bytevector-s16-native-set! . aK2f7a) (bytevector-s16-native-ref . aK2f79) (bytevector-length . aK2f78) (bytevector-ieee-single-ref . aK2f77) (bytevector-ieee-single-set! . aK2f76) (bytevector-ieee-single-native-set! . aK2f75) (bytevector-ieee-single-native-ref . aK2f74) (bytevector-ieee-double-set! . aK2f73) (bytevector-ieee-double-ref . aK2f72) (bytevector-ieee-double-native-set! . aK2f71) (bytevector-ieee-double-native-ref . aK2f70) (bytevector-fill! . aK2f6f) (bytevector-copy! . aK2f6e) (bytevector-copy . aK2f6d) (bytevector->uint-list . aK2f6c) (bytevector->u8-list . aK2f6b) (bytevector->sint-list . aK2f6a) (no-nans-violation? . aK2b82) (no-infinities-violation? . aK2b6d) (make-no-nans-violation . aK2b80) (make-no-infinities-violation . aK2b6b) (real->flonum . aK2f69) (flzero? . aK2f68) (fltruncate . aK2f67) (fltan . aK2f66) (flsqrt . aK2f65) (flsin . aK2f64) (flround . aK2f63) (flpositive? . aK2f62) (flonum? . aK2f61) (flodd? . aK2f60) (flnumerator . aK2f5f) (flnegative? . aK2f5e) (flnan? . aK2f5d) (flmod0 . aK2f5c) (flmod . aK2f5b) (flmin . aK2f5a) (flmax . aK2f59) (fllog . aK2f58) (flinteger? . aK2f57) (flinfinite? . aK2f56) (flfloor . aK2f55) (flfinite? . aK2f54) (flexpt . aK2f53) (flexp . aK2f52) (fleven? . aK2f51) (fldiv0-and-mod0 . aK2f50) (fldiv0 . aK2f4f) (fldiv-and-mod . aK2f4e) (fldiv . aK2f4d) (fldenominator . aK2f4c) (flcos . aK2f4b) (flceiling . aK2f4a) (flatan . aK2f49) (flasin . aK2f48) (flacos . aK2f47) (flabs . aK2f46) (fl>? . aK2f45) (fl>=? . aK2f44) (fl=? . aK2f43) (fl<? . aK2f42) (fl<=? . aK2f41) (fl/ . aK2f40) (fl- . aK2f3f) (fl+ . aK2f3e) (fl* . aK2f3d) (fixnum->flonum . aK2f3c) (fxzero? . aK2f3b) (fxxor . aK2f3a) (fxrotate-bit-field . aK2f39) (fxreverse-bit-field . aK2f38) (fxpositive? . aK2f37) (fxodd? . aK2f36) (fxnot . aK2f35) (fxnegative? . aK2f34) (fxmod0 . aK2f33) (fxmod . aK2f32) (fxmin . aK2f31) (fxmax . aK2f30) (fxlength . aK2f2f) (fxior . aK2f2e) (fxif . aK2f2d) (fxfirst-bit-set . aK2f2c) (fxeven? . aK2f2b) (fxdiv0-and-mod0 . aK2f2a) (fxdiv0 . aK2f29) (fxdiv-and-mod . aK2f28) (fxdiv . aK2f27) (fxcopy-bit-field . aK2f26) (fxcopy-bit . aK2f25) (fxbit-set? . aK2f24) (fxbit-field . aK2f23) (fxbit-count . aK2f22) (fxarithmetic-shift-right . aK2f21) (fxarithmetic-shift-left . aK2f20) (fxarithmetic-shift . aK2f1f) (fxand . aK2f1e) (fx>? . aK2f1d) (fx>=? . aK2f1c) (fx=? . aK2f1b) (fx<? . aK2f1a) (fx<=? . aK2f19) (fx-/carry . aK2f18) (fx- . aK2f17) (fx+/carry . aK2f16) (fx+ . aK2f15) (fx*/carry . aK2f14) (fx* . aK2f13) (greatest-fixnum . aK2f12) (least-fixnum . aK2f11) (fixnum-width . aK2f10) (fixnum? . aK2f0f) (bitwise-rotate-bit-field . aK2f0e) (bitwise-reverse-bit-field . aK2f0d) (bitwise-length . aK2f0c) (bitwise-if . aK2f0b) (bitwise-first-bit-set . aK2f0a) (bitwise-copy-bit-field . aK2f09) (bitwise-copy-bit . aK2f08) (bitwise-bit-set? . aK2f07) (bitwise-bit-field . aK2f06) (bitwise-bit-count . aK2f05) (bitwise-xor . aK2f04) (bitwise-ior . aK2f03) (bitwise-and . aK2f02) (bitwise-not . aK2f01) (bitwise-arithmetic-shift-right . aK2f00) (bitwise-arithmetic-shift-left . aK2eff) (bitwise-arithmetic-shift . aK2efe) (zero? . aK2efd) (vector? . aK2efc) (vector-set! . aK2efb) (vector-ref . aK2efa) (vector-map . aK2ef9) (vector-length . aK2ef8) (vector-for-each . aK2ef7) (vector-fill! . aK2ef6) (vector->list . aK2ef5) (vector . aK2ef4) (values . aK2ef3) (truncate . aK2ef2) (tan . aK2ef1) (symbol? . aK2ef0) (symbol=? . aK2eef) (symbol->string . aK2eee) (substring . aK2eed) (string? . aK2eec) (string>? . aK2eeb) (string>=? . aK2eea) (string=? . aK2ee9) (string<? . aK2ee8) (string<=? . aK2ee7) (string-ref . aK2ee6) (string-length . aK2ee5) (string-for-each . aK2ee4) (string-copy . aK2ee3) (string-append . aK2ee2) (string->symbol . aK2ee1) (string->number . aK2ee0) (string->list . aK2edf) (string . aK2ede) (sqrt . aK2edd) (sin . aK2edc) (round . aK2edb) (reverse . aK2eda) (real? . aK2ed9) (real-valued? . aK2ed8) (real-part . aK2ed7) (rationalize . aK2ed6) (rational? . aK2ed5) (rational-valued? . aK2ed4) (procedure? . aK2ed3) (positive? . aK2ed2) (pair? . aK2ed1) (odd? . aK2ed0) (numerator . aK2ecf) (number? . aK2ece) (number->string . aK2ecd) (null? . aK2ecc) (not . aK2ecb) (negative? . aK2eca) (nan? . aK2ec9) (min . aK2ec8) (max . aK2ec7) (map . aK2ec6) (make-vector . aK2ec5) (make-string . aK2ec4) (make-rectangular . aK2ec3) (make-polar . aK2ec2) (magnitude . aK2ec1) (log . aK2ec0) (list? . aK2ebf) (list-tail . aK2ebe) (list-ref . aK2ebd) (list->vector . aK2ebc) (list->string . aK2ebb) (list . aK2eba) (length . aK2eb9) (lcm . aK2eb8) (integer? . aK2eb7) (integer-valued? . aK2eb6) (integer->char . aK2eb5) (infinite? . aK2eb4) (inexact? . aK2eb3) (inexact . aK2eb2) (imag-part . aK2eb1) (gcd . aK2eb0) (for-each . aK2eaf) (floor . aK2eae) (finite? . aK2ead) (expt . aK2eac) (exp . aK2eab) (exact? . aK2eaa) (exact-integer-sqrt . aK2ea9) (exact . aK2ea8) (even? . aK2ea7) (error . aK2ea6) (eqv? . aK2ea5) (equal? . aK2ea4) (eq? . aK2ea3) (dynamic-wind . aK2ea2) (div0-and-mod0 . aK2ea1) (mod0 . aK2ea0) (div0 . aK2e9f) (div-and-mod . aK2e9e) (mod . aK2e9d) (div . aK2e9c) (denominator . aK2e9b) (cos . aK2e9a) (cons . aK2e99) (complex? . aK2e98) (char? . aK2e97) (char>? . aK2e96) (char>=? . aK2e95) (char=? . aK2e94) (char<? . aK2e93) (char<=? . aK2e92) (char->integer . aK2e91) (ceiling . aK2e90) (call-with-values . aK2e8f) (call/cc . aK2e8e) (call-with-current-continuation . aK2e8d) (cddddr . aK2e8c) (cdddar . aK2e8b) (cddadr . aK2e8a) (cddaar . aK2e89) (cdaddr . aK2e88) (cdadar . aK2e87) (cdaadr . aK2e86) (cdaaar . aK2e85) (cadddr . aK2e84) (caddar . aK2e83) (cadadr . aK2e82) (cadaar . aK2e81) (caaddr . aK2e80) (caadar . aK2e7f) (caaadr . aK2e7e) (caaaar . aK2e7d) (cdddr . aK2e7c) (cddar . aK2e7b) (cdadr . aK2e7a) (cdaar . aK2e79) (caddr . aK2e78) (cadar . aK2e77) (caadr . aK2e76) (caaar . aK2e75) (cddr . aK2e74) (cdar . aK2e73) (cadr . aK2e72) (caar . aK2e71) (cdr . aK2e70) (car . aK2e6f) (boolean? . aK2e6e) (boolean=? . aK2e6d) (atan . aK2e6c) (assertion-violation . aK2e6b) (asin . aK2e6a) (apply . aK2e69) (append . aK2e68) (angle . aK2e67) (acos . aK2e66) (abs . aK2e65) (/ . aK2e64) (* . aK2e63) (- . aK2e62) (+ . aK2e61) (>= . aK2e60) (> . aK2e5f) (= . aK2e5e) (<= . aK2e5d) (< . aK2e5c) (library . aK2e5b) (&no-nans . aK2e5a) (&no-infinities . aK2e59) (&i/o-encoding . aK2e58) (&i/o-decoding . aK2e57) (&i/o-port . aK2e56) (&i/o-file-does-not-exist . aK2e55) (&i/o-file-already-exists . aK2e54) (&i/o-file-is-read-only . aK2e53) (&i/o-file-protection . aK2e52) (&i/o-filename . aK2e51) (&i/o-invalid-position . aK2e50) (&i/o-write . aK2e4f) (&i/o-read . aK2e4e) (&i/o . aK2e4d) (&undefined . aK2e4c) (&syntax . aK2e4b) (&lexical . aK2e4a) (&implementation-restriction . aK2e49) (&non-continuable . aK2e48) (&who . aK2e47) (&irritants . aK2e46) (&assertion . aK2e45) (&violation . aK2e44) (&error . aK2e43) (&serious . aK2e42) (&warning . aK2e41) (&message . aK2e40) (&condition . aK2e3f) (define-condition-type . aK2e3e) (define-enumeration . aK2e3d) (define-record-type . aK2e3c) (parent-rtd . aK2e3b) (nongenerative . aK2e3a) (opaque . aK2e39) (sealed . aK2e38) (protocol . aK2e37) (parent . aK2e36) (immutable . aK2e35) (mutable . aK2e34) (fields . aK2e33) (error-handling-mode . aK2e32) (file-options . aK2e31) (buffer-mode . aK2e30) (eol-style . aK2e2f) (guard . aK2e2e) (unsyntax-splicing . aK2e2b) (unsyntax . aK2e2a) (unquote-splicing . aK2e29) (unquote . aK2e28) (_ . aK2e27) (else . aK2e26) (=> . aK2e25) (... . aK2e24) (assert . aK2e23) (endianness . aK2e22) (time . aK2e20) (do . aK2e1f) (cond . aK2e1e) (let* . aK2e1d) (let*-values . aK2e1c) (let-values . aK2e1b) (identifier-syntax . aK2e1a) (with-syntax . aK2e19) (quasisyntax . aK2e18) (quasiquote . aK2e17) (syntax-rules . aK2e16) (include . aK2e15) (record-constructor-descriptor . aK2e13) (record-type-descriptor . aK2e12) (case . aK2e11) (unless . aK2e0f) (when . aK2e0e) (or . aK2e0d) (and . aK2e0c) (if . aK2e0b) (let . aK2e0a) (letrec* . aK2e09) (letrec . aK2e08) (case-lambda . aK2e06) (lambda . aK2e05) (syntax . aK2e04) (syntax-case . aK2e03) (quote . aK2e02) (letrec-syntax . aK2e00) (let-syntax . aK2dff) (set! . aK2dfe) (import . aK2dfd) (begin . aK2dfc) (define-syntax . aK2dfa) (define . aK2df9)) '() values values '#f '#f '#t '#f) (aK987@aK7d3@install-library 'aK3122 '(psyntax null-environment-5) '() '() '() '() '((make-promise . aK2fd9) (unquote-splicing . aK2e29) (unquote . aK2e28) (_ . aK2e27) (else . aK2e26) (=> . aK2e25) (... . aK2e24) (delay . aK2e21) (do . aK2e1f) (cond . aK2e1e) (let* . aK2e1d) (quasiquote . aK2e17) (syntax-rules . aK2e16) (case . aK2e11) (or . aK2e0d) (and . aK2e0c) (if . aK2e0b) (let . aK2e0a) (letrec . aK2e08) (lambda . aK2e05) (quote . aK2e02) (letrec-syntax . aK2e00) (let-syntax . aK2dff) (set! . aK2dfe) (begin . aK2dfc) (define-syntax . aK2dfa) (define . aK2df9)) '() values values '#f '#f '#t '#f) (aK987@aK7d3@install-library 'aK3123 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . aK306e) (string-ci>=? . aK306d) (string-ci=? . aK306c) (string-ci<? . aK306b) (string-ci<=? . aK306a) (char-whitespace? . aK3069) (char-upper-case? . aK3068) (char-numeric? . aK3066) (char-lower-case? . aK3065) (char-upcase . aK3063) (char-downcase . aK3060) (char-ci>? . aK305f) (char-ci>=? . aK305e) (char-ci=? . aK305d) (char-ci<? . aK305c) (char-ci<=? . aK305b) (char-alphabetic? . aK305a) (call-with-output-file . aK302e) (call-with-input-file . aK302d) (write-char . aK302c) (write . aK302b) (with-output-to-file . aK302a) (with-input-from-file . aK3029) (read-char . aK3028) (read . aK3027) (peek-char . aK3026) (open-output-file . aK3025) (open-input-file . aK3024) (newline . aK3023) (display . aK3022) (close-output-port . aK3021) (close-input-port . aK3020) (eof-object . aK301e) (current-output-port . aK301c) (current-input-port . aK301b) (output-port? . aK301a) (input-port? . aK3019) (scheme-report-environment . aKe35) (quotient . aK2fdf) (null-environment . aKe33) (remainder . aK2fde) (modulo . aK2fdd) (inexact->exact . aK2fdc) (force . aK2fdb) (exact->inexact . aK2fda) (make-promise . aK2fd9) (string-fill! . aK2fd7) (string-set! . aK2fd6) (set-cdr! . aK2fd5) (set-car! . aK2fd4) (memv . aK2fce) (memq . aK2fcd) (member . aK2fcb) (assv . aK2fc3) (assq . aK2fc2) (assoc . aK2fc0) (eval . aKe39) (zero? . aK2efd) (vector? . aK2efc) (vector-set! . aK2efb) (vector-ref . aK2efa) (vector-length . aK2ef8) (vector-fill! . aK2ef6) (vector->list . aK2ef5) (vector . aK2ef4) (values . aK2ef3) (truncate . aK2ef2) (tan . aK2ef1) (symbol? . aK2ef0) (symbol->string . aK2eee) (substring . aK2eed) (string? . aK2eec) (string>? . aK2eeb) (string>=? . aK2eea) (string=? . aK2ee9) (string<? . aK2ee8) (string<=? . aK2ee7) (string-ref . aK2ee6) (string-length . aK2ee5) (string-copy . aK2ee3) (string-append . aK2ee2) (string->symbol . aK2ee1) (string->number . aK2ee0) (string->list . aK2edf) (string . aK2ede) (sqrt . aK2edd) (sin . aK2edc) (round . aK2edb) (reverse . aK2eda) (real? . aK2ed9) (real-part . aK2ed7) (rationalize . aK2ed6) (rational? . aK2ed5) (procedure? . aK2ed3) (positive? . aK2ed2) (pair? . aK2ed1) (odd? . aK2ed0) (numerator . aK2ecf) (number? . aK2ece) (number->string . aK2ecd) (not . aK2ecb) (negative? . aK2eca) (min . aK2ec8) (max . aK2ec7) (map . aK2ec6) (make-vector . aK2ec5) (make-string . aK2ec4) (make-rectangular . aK2ec3) (make-polar . aK2ec2) (magnitude . aK2ec1) (log . aK2ec0) (list? . aK2ebf) (list-tail . aK2ebe) (list-ref . aK2ebd) (list->vector . aK2ebc) (list->string . aK2ebb) (list . aK2eba) (length . aK2eb9) (lcm . aK2eb8) (integer? . aK2eb7) (integer->char . aK2eb5) (inexact? . aK2eb3) (imag-part . aK2eb1) (gcd . aK2eb0) (for-each . aK2eaf) (floor . aK2eae) (expt . aK2eac) (exp . aK2eab) (exact? . aK2eaa) (even? . aK2ea7) (eqv? . aK2ea5) (equal? . aK2ea4) (eq? . aK2ea3) (dynamic-wind . aK2ea2) (denominator . aK2e9b) (cos . aK2e9a) (cons . aK2e99) (complex? . aK2e98) (char? . aK2e97) (char>? . aK2e96) (char>=? . aK2e95) (char=? . aK2e94) (char<? . aK2e93) (char<=? . aK2e92) (char->integer . aK2e91) (ceiling . aK2e90) (call-with-values . aK2e8f) (call-with-current-continuation . aK2e8d) (cddddr . aK2e8c) (cdddar . aK2e8b) (cddadr . aK2e8a) (cddaar . aK2e89) (cdaddr . aK2e88) (cdadar . aK2e87) (cdaadr . aK2e86) (cdaaar . aK2e85) (cadddr . aK2e84) (caddar . aK2e83) (cadadr . aK2e82) (cadaar . aK2e81) (caaddr . aK2e80) (caadar . aK2e7f) (caaadr . aK2e7e) (caaaar . aK2e7d) (cdddr . aK2e7c) (cddar . aK2e7b) (cdadr . aK2e7a) (cdaar . aK2e79) (caddr . aK2e78) (cadar . aK2e77) (caadr . aK2e76) (caaar . aK2e75) (cddr . aK2e74) (cdar . aK2e73) (cadr . aK2e72) (caar . aK2e71) (cdr . aK2e70) (car . aK2e6f) (boolean? . aK2e6e) (atan . aK2e6c) (asin . aK2e6a) (apply . aK2e69) (append . aK2e68) (angle . aK2e67) (acos . aK2e66) (abs . aK2e65) (/ . aK2e64) (* . aK2e63) (- . aK2e62) (+ . aK2e61) (>= . aK2e60) (> . aK2e5f) (= . aK2e5e) (<= . aK2e5d) (< . aK2e5c) (unquote-splicing . aK2e29) (unquote . aK2e28) (else . aK2e26) (=> . aK2e25) (... . aK2e24) (delay . aK2e21) (do . aK2e1f) (cond . aK2e1e) (let* . aK2e1d) (quasiquote . aK2e17) (syntax-rules . aK2e16) (case . aK2e11) (or . aK2e0d) (and . aK2e0c) (if . aK2e0b) (let . aK2e0a) (letrec . aK2e08) (lambda . aK2e05) (quote . aK2e02) (letrec-syntax . aK2e00) (let-syntax . aK2dff) (set! . aK2dfe) (begin . aK2dfc) (define-syntax . aK2dfa) (define . aK2df9)) '() values values '#f '#f '#t '#f) (aK987@aK7d3@install-library 'aK3124 '(psyntax modules) '() '() '() '() '((module . aK2dfb)) '() values values '#f '#f '#t '#f) (aK987@aK7d3@install-library 'aK3125 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (aK987@aK7d3@install-library 'aK3126 '(rnrs) '(6) '() '() '() '((regexp? . aK3119) (string-upcase . aK3076) (string-titlecase . aK3075) (string-normalize-nfkd . aK3074) (string-normalize-nfkc . aK3073) (string-normalize-nfd . aK3072) (string-normalize-nfc . aK3071) (string-foldcase . aK3070) (string-downcase . aK306f) (string-ci>? . aK306e) (string-ci>=? . aK306d) (string-ci=? . aK306c) (string-ci<? . aK306b) (string-ci<=? . aK306a) (char-whitespace? . aK3069) (char-upper-case? . aK3068) (char-title-case? . aK3067) (char-numeric? . aK3066) (char-lower-case? . aK3065) (char-general-category . aK3064) (char-upcase . aK3063) (char-titlecase . aK3062) (char-foldcase . aK3061) (char-downcase . aK3060) (char-ci>? . aK305f) (char-ci>=? . aK305e) (char-ci=? . aK305d) (char-ci<? . aK305c) (char-ci<=? . aK305b) (char-alphabetic? . aK305a) (make-variable-transformer . aKba4) (identifier? . aKe5b) (generate-temporaries . aKe47) (free-identifier=? . aKe49) (syntax->datum . aKe5f) (datum->syntax . aKe5d) (bound-identifier=? . aKe4b) (record-type-descriptor? . aK3059) (record-predicate . aK3058) (record-mutator . aK3057) (record-constructor . aK3056) (record-accessor . aK3055) (make-record-type-descriptor . aK3054) (make-record-constructor-descriptor . aK3053) (record? . aK3052) (record-type-uid . aK3051) (record-type-sealed? . aK3050) (record-type-parent . aK304f) (record-type-opaque? . aK304e) (record-type-name . aK304d) (record-type-generative? . aK304c) (record-type-field-names . aK304b) (record-rtd . aK304a) (record-field-mutable? . aK3049) (delete-file . aK3048) (file-exists? . aK3047) (vector-sort! . aK3046) (vector-sort . aK3045) (list-sort . aK3044) (symbol-hash . aK3043) (string-ci-hash . aK3042) (string-hash . aK3041) (equal-hash . aK3040) (hashtable-equivalence-function . aK303f) (make-hashtable . aK303e) (hashtable-hash-function . aK303d) (make-eqv-hashtable . aK303c) (make-eq-hashtable . aK303b) (hashtable? . aK303a) (hashtable-update! . aK3039) (hashtable-size . aK3038) (hashtable-set! . aK3037) (hashtable-ref . aK3036) (hashtable-mutable? . aK3035) (hashtable-keys . aK3034) (hashtable-entries . aK3033) (hashtable-delete! . aK3032) (hashtable-copy . aK3031) (hashtable-contains? . aK3030) (hashtable-clear! . aK302f) (call-with-output-file . aK302e) (call-with-input-file . aK302d) (write-char . aK302c) (write . aK302b) (with-output-to-file . aK302a) (with-input-from-file . aK3029) (read-char . aK3028) (read . aK3027) (peek-char . aK3026) (open-output-file . aK3025) (open-input-file . aK3024) (newline . aK3023) (display . aK3022) (close-output-port . aK3021) (close-input-port . aK3020) (eof-object? . aK301f) (eof-object . aK301e) (current-error-port . aK301d) (current-output-port . aK301c) (current-input-port . aK301b) (output-port? . aK301a) (input-port? . aK3019) (utf-8-codec . aK3018) (utf-16-codec . aK3017) (transcoder-error-handling-mode . aK3016) (transcoder-eol-style . aK3015) (transcoder-codec . aK3014) (transcoded-port . aK3013) (textual-port? . aK3012) (string->bytevector . aK3011) (standard-output-port . aK3010) (standard-input-port . aK300f) (standard-error-port . aK300e) (set-port-position! . aK300d) (put-u8 . aK300c) (put-string . aK300b) (put-datum . aK300a) (put-char . aK3009) (put-bytevector . aK3008) (port? . aK3007) (port-transcoder . aK3006) (port-position . aK3005) (port-has-set-port-position!? . aK3004) (port-has-port-position? . aK3003) (port-eof? . aK3002) (output-port-buffer-mode . aK3001) (open-string-output-port . aK3000) (open-string-input-port . aK2fff) (open-file-output-port . aK2ffe) (open-file-input/output-port . aK2ffd) (open-file-input-port . aK2ffc) (open-bytevector-output-port . aK2ffb) (open-bytevector-input-port . aK2ffa) (native-transcoder . aK2ff9) (native-eol-style . aK2ff8) (make-transcoder . aK2ff7) (latin-1-codec . aK2ff6) (make-i/o-write-error . aK2a81) (make-i/o-read-error . aK2a6c) (make-i/o-port-error . aK2b22) (make-i/o-invalid-position-error . aK2a98) (make-i/o-filename-error . aK2ab3) (make-i/o-file-protection-error . aK2acc) (make-i/o-file-is-read-only-error . aK2ae1) (make-i/o-file-does-not-exist-error . aK2b0b) (make-i/o-file-already-exists-error . aK2af6) (make-i/o-error . aK2a57) (make-i/o-encoding-error . aK2b52) (make-i/o-decoding-error . aK2b3b) (make-custom-textual-output-port . aK2ff5) (make-custom-textual-input/output-port . aK2ff4) (make-custom-textual-input-port . aK2ff3) (make-custom-binary-output-port . aK2ff2) (make-custom-binary-input/output-port . aK2ff1) (make-custom-binary-input-port . aK2ff0) (make-bytevector . aK2fef) (lookahead-u8 . aK2fee) (lookahead-char . aK2fed) (i/o-write-error? . aK2a83) (i/o-read-error? . aK2a6e) (i/o-port-error? . aK2b26) (i/o-invalid-position-error? . aK2a9c) (i/o-filename-error? . aK2ab7) (i/o-file-protection-error? . aK2ace) (i/o-file-is-read-only-error? . aK2ae3) (i/o-file-does-not-exist-error? . aK2b0d) (i/o-file-already-exists-error? . aK2af8) (i/o-error? . aK2a59) (i/o-error-position . aK2a9e) (i/o-error-port . aK2b28) (i/o-error-filename . aK2ab9) (i/o-encoding-error? . aK2b56) (i/o-encoding-error-char . aK2b58) (i/o-decoding-error? . aK2b3d) (get-u8 . aK2fec) (get-string-n! . aK2feb) (get-string-n . aK2fea) (get-string-all . aK2fe9) (get-line . aK2fe8) (get-datum . aK2fe7) (get-char . aK2fe6) (get-bytevector-some . aK2fe5) (get-bytevector-n! . aK2fe4) (get-bytevector-n . aK2fe3) (get-bytevector-all . aK2fe2) (flush-output-port . aK2fe1) (close-port . aK2fe0) (exit . aK2fd8) (command-line . aK2c91) (remove . aK2fd3) (remv . aK2fd2) (remp . aK2fd1) (remq . aK2fd0) (partition . aK2fcf) (memv . aK2fce) (memq . aK2fcd) (memp . aK2fcc) (member . aK2fcb) (exists . aK2fca) (for-all . aK2fc9) (fold-right . aK2fc8) (fold-left . aK2fc7) (find . aK2fc6) (filter . aK2fc5) (cons* . aK2fc4) (assv . aK2fc3) (assq . aK2fc2) (assp . aK2fc1) (assoc . aK2fc0) (call-with-string-output-port . aK2fbf) (call-with-port . aK2fbe) (call-with-bytevector-output-port . aK2fbd) (bytevector->string . aK2fbc) (buffer-mode? . aK2fbb) (binary-port? . aK2fba) (with-exception-handler . aK2fb9) (raise-continuable . aK2fb8) (raise . aK2fb7) (make-enumeration . aK2fb6) (enum-set=? . aK2fb5) (enum-set-universe . aK2fb4) (enum-set-union . aK2fb3) (enum-set-subset? . aK2fb2) (enum-set-projection . aK2fb1) (enum-set-member? . aK2fb0) (enum-set-intersection . aK2faf) (enum-set-indexer . aK2fae) (enum-set-difference . aK2fad) (enum-set-constructor . aK2fac) (enum-set-complement . aK2fab) (enum-set->list . aK2faa) (who-condition? . aK29cd) (warning? . aK2945) (violation? . aK2984) (undefined-violation? . aK2a44) (syntax-violation? . aK2a2b) (syntax-violation-subform . aK2a2f) (syntax-violation-form . aK2a2d) (syntax-violation . aKe59) (simple-conditions . aK2fa9) (serious-condition? . aK295a) (non-continuable-violation? . aK29e4) (message-condition? . aK292e) (make-who-condition . aK29c9) (make-warning . aK2943) (make-violation . aK2982) (make-undefined-violation . aK2a42) (make-syntax-violation . aK2a25) (make-serious-condition . aK2958) (make-non-continuable-violation . aK29e2) (make-message-condition . aK292a) (make-lexical-violation . aK2a0c) (make-irritants-condition . aK29ae) (make-implementation-restriction-violation . aK29f7) (make-error . aK296d) (make-assertion-violation . aK2997) (lexical-violation? . aK2a0e) (irritants-condition? . aK29b2) (implementation-restriction-violation? . aK29f9) (error? . aK296f) (condition-who . aK29cf) (condition-predicate . aK2fa8) (condition-message . aK2930) (condition-irritants . aK29b4) (condition-accessor . aK2fa7) (condition . aK2fa6) (assertion-violation? . aK2999) (condition? . aK2fa5) (utf32->string . aK2fa4) (utf16->string . aK2fa3) (utf8->string . aK2fa2) (uint-list->bytevector . aK2fa1) (u8-list->bytevector . aK2fa0) (string->utf8 . aK2f9f) (string->utf32 . aK2f9e) (string->utf16 . aK2f9d) (sint-list->bytevector . aK2f9c) (native-endianness . aK2f9b) (bytevector? . aK2f9a) (bytevector=? . aK2f99) (bytevector-uint-set! . aK2f98) (bytevector-uint-ref . aK2f97) (bytevector-u8-set! . aK2f96) (bytevector-u8-ref . aK2f95) (bytevector-u64-set! . aK2f94) (bytevector-u64-ref . aK2f93) (bytevector-u64-native-set! . aK2f92) (bytevector-u64-native-ref . aK2f91) (bytevector-u32-set! . aK2f90) (bytevector-u32-ref . aK2f8f) (bytevector-u32-native-set! . aK2f8e) (bytevector-u32-native-ref . aK2f8d) (bytevector-u16-set! . aK2f8c) (bytevector-u16-ref . aK2f8b) (bytevector-u16-native-set! . aK2f8a) (bytevector-u16-native-ref . aK2f89) (bytevector-sint-set! . aK2f88) (bytevector-sint-ref . aK2f87) (bytevector-s8-set! . aK2f86) (bytevector-s8-ref . aK2f85) (bytevector-s64-set! . aK2f84) (bytevector-s64-ref . aK2f83) (bytevector-s64-native-set! . aK2f82) (bytevector-s64-native-ref . aK2f81) (bytevector-s32-set! . aK2f80) (bytevector-s32-ref . aK2f7f) (bytevector-s32-native-set! . aK2f7e) (bytevector-s32-native-ref . aK2f7d) (bytevector-s16-set! . aK2f7c) (bytevector-s16-ref . aK2f7b) (bytevector-s16-native-set! . aK2f7a) (bytevector-s16-native-ref . aK2f79) (bytevector-length . aK2f78) (bytevector-ieee-single-ref . aK2f77) (bytevector-ieee-single-set! . aK2f76) (bytevector-ieee-single-native-set! . aK2f75) (bytevector-ieee-single-native-ref . aK2f74) (bytevector-ieee-double-set! . aK2f73) (bytevector-ieee-double-ref . aK2f72) (bytevector-ieee-double-native-set! . aK2f71) (bytevector-ieee-double-native-ref . aK2f70) (bytevector-fill! . aK2f6f) (bytevector-copy! . aK2f6e) (bytevector-copy . aK2f6d) (bytevector->uint-list . aK2f6c) (bytevector->u8-list . aK2f6b) (bytevector->sint-list . aK2f6a) (no-nans-violation? . aK2b82) (no-infinities-violation? . aK2b6d) (make-no-nans-violation . aK2b80) (make-no-infinities-violation . aK2b6b) (real->flonum . aK2f69) (flzero? . aK2f68) (fltruncate . aK2f67) (fltan . aK2f66) (flsqrt . aK2f65) (flsin . aK2f64) (flround . aK2f63) (flpositive? . aK2f62) (flonum? . aK2f61) (flodd? . aK2f60) (flnumerator . aK2f5f) (flnegative? . aK2f5e) (flnan? . aK2f5d) (flmod0 . aK2f5c) (flmod . aK2f5b) (flmin . aK2f5a) (flmax . aK2f59) (fllog . aK2f58) (flinteger? . aK2f57) (flinfinite? . aK2f56) (flfloor . aK2f55) (flfinite? . aK2f54) (flexpt . aK2f53) (flexp . aK2f52) (fleven? . aK2f51) (fldiv0-and-mod0 . aK2f50) (fldiv0 . aK2f4f) (fldiv-and-mod . aK2f4e) (fldiv . aK2f4d) (fldenominator . aK2f4c) (flcos . aK2f4b) (flceiling . aK2f4a) (flatan . aK2f49) (flasin . aK2f48) (flacos . aK2f47) (flabs . aK2f46) (fl>? . aK2f45) (fl>=? . aK2f44) (fl=? . aK2f43) (fl<? . aK2f42) (fl<=? . aK2f41) (fl/ . aK2f40) (fl- . aK2f3f) (fl+ . aK2f3e) (fl* . aK2f3d) (fixnum->flonum . aK2f3c) (fxzero? . aK2f3b) (fxxor . aK2f3a) (fxrotate-bit-field . aK2f39) (fxreverse-bit-field . aK2f38) (fxpositive? . aK2f37) (fxodd? . aK2f36) (fxnot . aK2f35) (fxnegative? . aK2f34) (fxmod0 . aK2f33) (fxmod . aK2f32) (fxmin . aK2f31) (fxmax . aK2f30) (fxlength . aK2f2f) (fxior . aK2f2e) (fxif . aK2f2d) (fxfirst-bit-set . aK2f2c) (fxeven? . aK2f2b) (fxdiv0-and-mod0 . aK2f2a) (fxdiv0 . aK2f29) (fxdiv-and-mod . aK2f28) (fxdiv . aK2f27) (fxcopy-bit-field . aK2f26) (fxcopy-bit . aK2f25) (fxbit-set? . aK2f24) (fxbit-field . aK2f23) (fxbit-count . aK2f22) (fxarithmetic-shift-right . aK2f21) (fxarithmetic-shift-left . aK2f20) (fxarithmetic-shift . aK2f1f) (fxand . aK2f1e) (fx>? . aK2f1d) (fx>=? . aK2f1c) (fx=? . aK2f1b) (fx<? . aK2f1a) (fx<=? . aK2f19) (fx-/carry . aK2f18) (fx- . aK2f17) (fx+/carry . aK2f16) (fx+ . aK2f15) (fx*/carry . aK2f14) (fx* . aK2f13) (greatest-fixnum . aK2f12) (least-fixnum . aK2f11) (fixnum-width . aK2f10) (fixnum? . aK2f0f) (bitwise-rotate-bit-field . aK2f0e) (bitwise-reverse-bit-field . aK2f0d) (bitwise-length . aK2f0c) (bitwise-if . aK2f0b) (bitwise-first-bit-set . aK2f0a) (bitwise-copy-bit-field . aK2f09) (bitwise-copy-bit . aK2f08) (bitwise-bit-set? . aK2f07) (bitwise-bit-field . aK2f06) (bitwise-bit-count . aK2f05) (bitwise-xor . aK2f04) (bitwise-ior . aK2f03) (bitwise-and . aK2f02) (bitwise-not . aK2f01) (bitwise-arithmetic-shift-right . aK2f00) (bitwise-arithmetic-shift-left . aK2eff) (bitwise-arithmetic-shift . aK2efe) (zero? . aK2efd) (vector? . aK2efc) (vector-set! . aK2efb) (vector-ref . aK2efa) (vector-map . aK2ef9) (vector-length . aK2ef8) (vector-for-each . aK2ef7) (vector-fill! . aK2ef6) (vector->list . aK2ef5) (vector . aK2ef4) (values . aK2ef3) (truncate . aK2ef2) (tan . aK2ef1) (symbol? . aK2ef0) (symbol=? . aK2eef) (symbol->string . aK2eee) (substring . aK2eed) (string? . aK2eec) (string>? . aK2eeb) (string>=? . aK2eea) (string=? . aK2ee9) (string<? . aK2ee8) (string<=? . aK2ee7) (string-ref . aK2ee6) (string-length . aK2ee5) (string-for-each . aK2ee4) (string-copy . aK2ee3) (string-append . aK2ee2) (string->symbol . aK2ee1) (string->number . aK2ee0) (string->list . aK2edf) (string . aK2ede) (sqrt . aK2edd) (sin . aK2edc) (round . aK2edb) (reverse . aK2eda) (real? . aK2ed9) (real-valued? . aK2ed8) (real-part . aK2ed7) (rationalize . aK2ed6) (rational? . aK2ed5) (rational-valued? . aK2ed4) (procedure? . aK2ed3) (positive? . aK2ed2) (pair? . aK2ed1) (odd? . aK2ed0) (numerator . aK2ecf) (number? . aK2ece) (number->string . aK2ecd) (null? . aK2ecc) (not . aK2ecb) (negative? . aK2eca) (nan? . aK2ec9) (min . aK2ec8) (max . aK2ec7) (map . aK2ec6) (make-vector . aK2ec5) (make-string . aK2ec4) (make-rectangular . aK2ec3) (make-polar . aK2ec2) (magnitude . aK2ec1) (log . aK2ec0) (list? . aK2ebf) (list-tail . aK2ebe) (list-ref . aK2ebd) (list->vector . aK2ebc) (list->string . aK2ebb) (list . aK2eba) (length . aK2eb9) (lcm . aK2eb8) (integer? . aK2eb7) (integer-valued? . aK2eb6) (integer->char . aK2eb5) (infinite? . aK2eb4) (inexact? . aK2eb3) (inexact . aK2eb2) (imag-part . aK2eb1) (gcd . aK2eb0) (for-each . aK2eaf) (floor . aK2eae) (finite? . aK2ead) (expt . aK2eac) (exp . aK2eab) (exact? . aK2eaa) (exact-integer-sqrt . aK2ea9) (exact . aK2ea8) (even? . aK2ea7) (error . aK2ea6) (eqv? . aK2ea5) (equal? . aK2ea4) (eq? . aK2ea3) (dynamic-wind . aK2ea2) (div0-and-mod0 . aK2ea1) (mod0 . aK2ea0) (div0 . aK2e9f) (div-and-mod . aK2e9e) (mod . aK2e9d) (div . aK2e9c) (denominator . aK2e9b) (cos . aK2e9a) (cons . aK2e99) (complex? . aK2e98) (char? . aK2e97) (char>? . aK2e96) (char>=? . aK2e95) (char=? . aK2e94) (char<? . aK2e93) (char<=? . aK2e92) (char->integer . aK2e91) (ceiling . aK2e90) (call-with-values . aK2e8f) (call/cc . aK2e8e) (call-with-current-continuation . aK2e8d) (cddddr . aK2e8c) (cdddar . aK2e8b) (cddadr . aK2e8a) (cddaar . aK2e89) (cdaddr . aK2e88) (cdadar . aK2e87) (cdaadr . aK2e86) (cdaaar . aK2e85) (cadddr . aK2e84) (caddar . aK2e83) (cadadr . aK2e82) (cadaar . aK2e81) (caaddr . aK2e80) (caadar . aK2e7f) (caaadr . aK2e7e) (caaaar . aK2e7d) (cdddr . aK2e7c) (cddar . aK2e7b) (cdadr . aK2e7a) (cdaar . aK2e79) (caddr . aK2e78) (cadar . aK2e77) (caadr . aK2e76) (caaar . aK2e75) (cddr . aK2e74) (cdar . aK2e73) (cadr . aK2e72) (caar . aK2e71) (cdr . aK2e70) (car . aK2e6f) (boolean? . aK2e6e) (boolean=? . aK2e6d) (atan . aK2e6c) (assertion-violation . aK2e6b) (asin . aK2e6a) (apply . aK2e69) (append . aK2e68) (angle . aK2e67) (acos . aK2e66) (abs . aK2e65) (/ . aK2e64) (* . aK2e63) (- . aK2e62) (+ . aK2e61) (>= . aK2e60) (> . aK2e5f) (= . aK2e5e) (<= . aK2e5d) (< . aK2e5c) (&no-nans . aK2e5a) (&no-infinities . aK2e59) (&i/o-encoding . aK2e58) (&i/o-decoding . aK2e57) (&i/o-port . aK2e56) (&i/o-file-does-not-exist . aK2e55) (&i/o-file-already-exists . aK2e54) (&i/o-file-is-read-only . aK2e53) (&i/o-file-protection . aK2e52) (&i/o-filename . aK2e51) (&i/o-invalid-position . aK2e50) (&i/o-write . aK2e4f) (&i/o-read . aK2e4e) (&i/o . aK2e4d) (&undefined . aK2e4c) (&syntax . aK2e4b) (&lexical . aK2e4a) (&implementation-restriction . aK2e49) (&non-continuable . aK2e48) (&who . aK2e47) (&irritants . aK2e46) (&assertion . aK2e45) (&violation . aK2e44) (&error . aK2e43) (&serious . aK2e42) (&warning . aK2e41) (&message . aK2e40) (&condition . aK2e3f) (define-condition-type . aK2e3e) (define-enumeration . aK2e3d) (define-record-type . aK2e3c) (parent-rtd . aK2e3b) (nongenerative . aK2e3a) (opaque . aK2e39) (sealed . aK2e38) (protocol . aK2e37) (parent . aK2e36) (immutable . aK2e35) (mutable . aK2e34) (fields . aK2e33) (error-handling-mode . aK2e32) (file-options . aK2e31) (buffer-mode . aK2e30) (eol-style . aK2e2f) (guard . aK2e2e) (unsyntax-splicing . aK2e2b) (unsyntax . aK2e2a) (unquote-splicing . aK2e29) (unquote . aK2e28) (_ . aK2e27) (else . aK2e26) (=> . aK2e25) (... . aK2e24) (assert . aK2e23) (endianness . aK2e22) (do . aK2e1f) (cond . aK2e1e) (let* . aK2e1d) (let*-values . aK2e1c) (let-values . aK2e1b) (identifier-syntax . aK2e1a) (with-syntax . aK2e19) (quasisyntax . aK2e18) (quasiquote . aK2e17) (syntax-rules . aK2e16) (record-constructor-descriptor . aK2e13) (record-type-descriptor . aK2e12) (case . aK2e11) (unless . aK2e0f) (when . aK2e0e) (or . aK2e0d) (and . aK2e0c) (if . aK2e0b) (let . aK2e0a) (letrec* . aK2e09) (letrec . aK2e08) (case-lambda . aK2e06) (lambda . aK2e05) (syntax . aK2e04) (syntax-case . aK2e03) (quote . aK2e02) (letrec-syntax . aK2e00) (let-syntax . aK2dff) (set! . aK2dfe) (begin . aK2dfc) (define-syntax . aK2dfa) (define . aK2df9)) '() values values '#f '#f '#t '#f) (aK987@aK7d3@install-library 'aK3127 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . aKe35) (quotient . aK2fdf) (null-environment . aKe33) (remainder . aK2fde) (modulo . aK2fdd) (inexact->exact . aK2fdc) (force . aK2fdb) (exact->inexact . aK2fda) (make-promise . aK2fd9) (delay . aK2e21)) '() values values '#f '#f '#t '#f) (aK987@aK7d3@install-library 'aK3128 '(rnrs control) '(6) '() '() '() '((do . aK2e1f) (unless . aK2e0f) (when . aK2e0e) (case-lambda . aK2e06)) '() values values '#f '#f '#t '#f) (aK987@aK7d3@install-library 'aK3129 '(rnrs eval) '(6) '() '() '() '((eval . aKe39) (environment . aKe31)) '() values values '#f '#f '#t '#f) (aK987@aK7d3@install-library 'aK312a '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . aK2fd5) (set-car! . aK2fd4)) '() values values '#f '#f '#t '#f) (aK987@aK7d3@install-library 'aK312b '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . aK2fd7) (string-set! . aK2fd6)) '() values values '#f '#f '#t '#f) (aK987@aK7d3@install-library 'aK312c '(rnrs programs) '(6) '() '() '() '((exit . aK2fd8) (command-line . aK2c91)) '() values values '#f '#f '#t '#f) (aK987@aK7d3@install-library 'aK312d '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . aKba4) (identifier? . aKe5b) (generate-temporaries . aKe47) (free-identifier=? . aKe49) (syntax->datum . aKe5f) (datum->syntax . aKe5d) (bound-identifier=? . aKe4b) (syntax-violation . aKe59) (unsyntax-splicing . aK2e2b) (unsyntax . aK2e2a) (_ . aK2e27) (... . aK2e24) (with-syntax . aK2e19) (quasisyntax . aK2e18) (syntax . aK2e04) (syntax-case . aK2e03)) '() values values '#f '#f '#t '#f) (aK987@aK7d3@install-library 'aK312e '(rnrs files) '(6) '() '() '() '((delete-file . aK3048) (file-exists? . aK3047) (make-i/o-write-error . aK2a81) (make-i/o-read-error . aK2a6c) (make-i/o-port-error . aK2b22) (make-i/o-invalid-position-error . aK2a98) (make-i/o-filename-error . aK2ab3) (make-i/o-file-protection-error . aK2acc) (make-i/o-file-is-read-only-error . aK2ae1) (make-i/o-file-does-not-exist-error . aK2b0b) (make-i/o-file-already-exists-error . aK2af6) (make-i/o-error . aK2a57) (i/o-write-error? . aK2a83) (i/o-read-error? . aK2a6e) (i/o-port-error? . aK2b26) (i/o-invalid-position-error? . aK2a9c) (i/o-filename-error? . aK2ab7) (i/o-file-protection-error? . aK2ace) (i/o-file-is-read-only-error? . aK2ae3) (i/o-file-does-not-exist-error? . aK2b0d) (i/o-file-already-exists-error? . aK2af8) (i/o-error? . aK2a59) (i/o-error-position . aK2a9e) (i/o-error-port . aK2b28) (i/o-error-filename . aK2ab9) (&i/o-port . aK2e56) (&i/o-file-does-not-exist . aK2e55) (&i/o-file-already-exists . aK2e54) (&i/o-file-is-read-only . aK2e53) (&i/o-file-protection . aK2e52) (&i/o-filename . aK2e51) (&i/o-invalid-position . aK2e50) (&i/o-write . aK2e4f) (&i/o-read . aK2e4e) (&i/o . aK2e4d)) '() values values '#f '#f '#t '#f) (aK987@aK7d3@install-library 'aK312f '(rnrs sorting) '(6) '() '() '() '((vector-sort! . aK3046) (vector-sort . aK3045) (list-sort . aK3044)) '() values values '#f '#f '#t '#f) (aK987@aK7d3@install-library 'aK3130 '(rnrs base) '(6) '() '() '() '((zero? . aK2efd) (vector? . aK2efc) (vector-set! . aK2efb) (vector-ref . aK2efa) (vector-map . aK2ef9) (vector-length . aK2ef8) (vector-for-each . aK2ef7) (vector-fill! . aK2ef6) (vector->list . aK2ef5) (vector . aK2ef4) (values . aK2ef3) (truncate . aK2ef2) (tan . aK2ef1) (symbol? . aK2ef0) (symbol=? . aK2eef) (symbol->string . aK2eee) (substring . aK2eed) (string? . aK2eec) (string>? . aK2eeb) (string>=? . aK2eea) (string=? . aK2ee9) (string<? . aK2ee8) (string<=? . aK2ee7) (string-ref . aK2ee6) (string-length . aK2ee5) (string-for-each . aK2ee4) (string-copy . aK2ee3) (string-append . aK2ee2) (string->symbol . aK2ee1) (string->number . aK2ee0) (string->list . aK2edf) (string . aK2ede) (sqrt . aK2edd) (sin . aK2edc) (round . aK2edb) (reverse . aK2eda) (real? . aK2ed9) (real-valued? . aK2ed8) (real-part . aK2ed7) (rationalize . aK2ed6) (rational? . aK2ed5) (rational-valued? . aK2ed4) (procedure? . aK2ed3) (positive? . aK2ed2) (pair? . aK2ed1) (odd? . aK2ed0) (numerator . aK2ecf) (number? . aK2ece) (number->string . aK2ecd) (null? . aK2ecc) (not . aK2ecb) (negative? . aK2eca) (nan? . aK2ec9) (min . aK2ec8) (max . aK2ec7) (map . aK2ec6) (make-vector . aK2ec5) (make-string . aK2ec4) (make-rectangular . aK2ec3) (make-polar . aK2ec2) (magnitude . aK2ec1) (log . aK2ec0) (list? . aK2ebf) (list-tail . aK2ebe) (list-ref . aK2ebd) (list->vector . aK2ebc) (list->string . aK2ebb) (list . aK2eba) (length . aK2eb9) (lcm . aK2eb8) (integer? . aK2eb7) (integer-valued? . aK2eb6) (integer->char . aK2eb5) (infinite? . aK2eb4) (inexact? . aK2eb3) (inexact . aK2eb2) (imag-part . aK2eb1) (gcd . aK2eb0) (for-each . aK2eaf) (floor . aK2eae) (finite? . aK2ead) (expt . aK2eac) (exp . aK2eab) (exact? . aK2eaa) (exact-integer-sqrt . aK2ea9) (exact . aK2ea8) (even? . aK2ea7) (error . aK2ea6) (eqv? . aK2ea5) (equal? . aK2ea4) (eq? . aK2ea3) (dynamic-wind . aK2ea2) (div0-and-mod0 . aK2ea1) (mod0 . aK2ea0) (div0 . aK2e9f) (div-and-mod . aK2e9e) (mod . aK2e9d) (div . aK2e9c) (denominator . aK2e9b) (cos . aK2e9a) (cons . aK2e99) (complex? . aK2e98) (char? . aK2e97) (char>? . aK2e96) (char>=? . aK2e95) (char=? . aK2e94) (char<? . aK2e93) (char<=? . aK2e92) (char->integer . aK2e91) (ceiling . aK2e90) (call-with-values . aK2e8f) (call/cc . aK2e8e) (call-with-current-continuation . aK2e8d) (cddddr . aK2e8c) (cdddar . aK2e8b) (cddadr . aK2e8a) (cddaar . aK2e89) (cdaddr . aK2e88) (cdadar . aK2e87) (cdaadr . aK2e86) (cdaaar . aK2e85) (cadddr . aK2e84) (caddar . aK2e83) (cadadr . aK2e82) (cadaar . aK2e81) (caaddr . aK2e80) (caadar . aK2e7f) (caaadr . aK2e7e) (caaaar . aK2e7d) (cdddr . aK2e7c) (cddar . aK2e7b) (cdadr . aK2e7a) (cdaar . aK2e79) (caddr . aK2e78) (cadar . aK2e77) (caadr . aK2e76) (caaar . aK2e75) (cddr . aK2e74) (cdar . aK2e73) (cadr . aK2e72) (caar . aK2e71) (cdr . aK2e70) (car . aK2e6f) (boolean? . aK2e6e) (boolean=? . aK2e6d) (atan . aK2e6c) (assertion-violation . aK2e6b) (asin . aK2e6a) (apply . aK2e69) (append . aK2e68) (angle . aK2e67) (acos . aK2e66) (abs . aK2e65) (/ . aK2e64) (* . aK2e63) (- . aK2e62) (+ . aK2e61) (>= . aK2e60) (> . aK2e5f) (= . aK2e5e) (<= . aK2e5d) (< . aK2e5c) (unquote-splicing . aK2e29) (unquote . aK2e28) (_ . aK2e27) (else . aK2e26) (=> . aK2e25) (... . aK2e24) (assert . aK2e23) (cond . aK2e1e) (let* . aK2e1d) (let*-values . aK2e1c) (let-values . aK2e1b) (identifier-syntax . aK2e1a) (quasiquote . aK2e17) (syntax-rules . aK2e16) (case . aK2e11) (or . aK2e0d) (and . aK2e0c) (if . aK2e0b) (let . aK2e0a) (letrec* . aK2e09) (letrec . aK2e08) (lambda . aK2e05) (quote . aK2e02) (letrec-syntax . aK2e00) (let-syntax . aK2dff) (set! . aK2dfe) (begin . aK2dfc) (define-syntax . aK2dfa) (define . aK2df9)) '() values values '#f '#f '#t '#f) (aK987@aK7d3@install-library 'aK3131 '(rnrs lists) '(6) '() '() '() '((remove . aK2fd3) (remv . aK2fd2) (remp . aK2fd1) (remq . aK2fd0) (partition . aK2fcf) (memv . aK2fce) (memq . aK2fcd) (memp . aK2fcc) (member . aK2fcb) (exists . aK2fca) (for-all . aK2fc9) (fold-right . aK2fc8) (fold-left . aK2fc7) (find . aK2fc6) (filter . aK2fc5) (cons* . aK2fc4) (assv . aK2fc3) (assq . aK2fc2) (assp . aK2fc1) (assoc . aK2fc0)) '() values values '#f '#f '#t '#f) (aK987@aK7d3@install-library 'aK3132 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . aK302e) (call-with-input-file . aK302d) (write-char . aK302c) (write . aK302b) (with-output-to-file . aK302a) (with-input-from-file . aK3029) (read-char . aK3028) (read . aK3027) (peek-char . aK3026) (open-output-file . aK3025) (open-input-file . aK3024) (newline . aK3023) (display . aK3022) (close-output-port . aK3021) (close-input-port . aK3020) (eof-object? . aK301f) (eof-object . aK301e) (current-error-port . aK301d) (current-output-port . aK301c) (current-input-port . aK301b) (output-port? . aK301a) (input-port? . aK3019) (make-i/o-write-error . aK2a81) (make-i/o-read-error . aK2a6c) (make-i/o-port-error . aK2b22) (make-i/o-invalid-position-error . aK2a98) (make-i/o-filename-error . aK2ab3) (make-i/o-file-protection-error . aK2acc) (make-i/o-file-is-read-only-error . aK2ae1) (make-i/o-file-does-not-exist-error . aK2b0b) (make-i/o-file-already-exists-error . aK2af6) (make-i/o-error . aK2a57) (i/o-write-error? . aK2a83) (i/o-read-error? . aK2a6e) (i/o-port-error? . aK2b26) (i/o-invalid-position-error? . aK2a9c) (i/o-filename-error? . aK2ab7) (i/o-file-protection-error? . aK2ace) (i/o-file-is-read-only-error? . aK2ae3) (i/o-file-does-not-exist-error? . aK2b0d) (i/o-file-already-exists-error? . aK2af8) (i/o-error? . aK2a59) (i/o-error-position . aK2a9e) (i/o-error-port . aK2b28) (i/o-error-filename . aK2ab9) (&i/o-port . aK2e56) (&i/o-file-does-not-exist . aK2e55) (&i/o-file-already-exists . aK2e54) (&i/o-file-is-read-only . aK2e53) (&i/o-file-protection . aK2e52) (&i/o-filename . aK2e51) (&i/o-invalid-position . aK2e50) (&i/o-write . aK2e4f) (&i/o-read . aK2e4e) (&i/o . aK2e4d)) '() values values '#f '#f '#t '#f) (aK987@aK7d3@install-library 'aK3133 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . aK2fef) (utf32->string . aK2fa4) (utf16->string . aK2fa3) (utf8->string . aK2fa2) (uint-list->bytevector . aK2fa1) (u8-list->bytevector . aK2fa0) (string->utf8 . aK2f9f) (string->utf32 . aK2f9e) (string->utf16 . aK2f9d) (sint-list->bytevector . aK2f9c) (native-endianness . aK2f9b) (bytevector? . aK2f9a) (bytevector=? . aK2f99) (bytevector-uint-set! . aK2f98) (bytevector-uint-ref . aK2f97) (bytevector-u8-set! . aK2f96) (bytevector-u8-ref . aK2f95) (bytevector-u64-set! . aK2f94) (bytevector-u64-ref . aK2f93) (bytevector-u64-native-set! . aK2f92) (bytevector-u64-native-ref . aK2f91) (bytevector-u32-set! . aK2f90) (bytevector-u32-ref . aK2f8f) (bytevector-u32-native-set! . aK2f8e) (bytevector-u32-native-ref . aK2f8d) (bytevector-u16-set! . aK2f8c) (bytevector-u16-ref . aK2f8b) (bytevector-u16-native-set! . aK2f8a) (bytevector-u16-native-ref . aK2f89) (bytevector-sint-set! . aK2f88) (bytevector-sint-ref . aK2f87) (bytevector-s8-set! . aK2f86) (bytevector-s8-ref . aK2f85) (bytevector-s64-set! . aK2f84) (bytevector-s64-ref . aK2f83) (bytevector-s64-native-set! . aK2f82) (bytevector-s64-native-ref . aK2f81) (bytevector-s32-set! . aK2f80) (bytevector-s32-ref . aK2f7f) (bytevector-s32-native-set! . aK2f7e) (bytevector-s32-native-ref . aK2f7d) (bytevector-s16-set! . aK2f7c) (bytevector-s16-ref . aK2f7b) (bytevector-s16-native-set! . aK2f7a) (bytevector-s16-native-ref . aK2f79) (bytevector-length . aK2f78) (bytevector-ieee-single-ref . aK2f77) (bytevector-ieee-single-set! . aK2f76) (bytevector-ieee-single-native-set! . aK2f75) (bytevector-ieee-single-native-ref . aK2f74) (bytevector-ieee-double-set! . aK2f73) (bytevector-ieee-double-ref . aK2f72) (bytevector-ieee-double-native-set! . aK2f71) (bytevector-ieee-double-native-ref . aK2f70) (bytevector-fill! . aK2f6f) (bytevector-copy! . aK2f6e) (bytevector-copy . aK2f6d) (bytevector->uint-list . aK2f6c) (bytevector->u8-list . aK2f6b) (bytevector->sint-list . aK2f6a) (endianness . aK2e22)) '() values values '#f '#f '#t '#f) (aK987@aK7d3@install-library 'aK3134 '(rnrs unicode) '(6) '() '() '() '((string-upcase . aK3076) (string-titlecase . aK3075) (string-normalize-nfkd . aK3074) (string-normalize-nfkc . aK3073) (string-normalize-nfd . aK3072) (string-normalize-nfc . aK3071) (string-foldcase . aK3070) (string-downcase . aK306f) (string-ci>? . aK306e) (string-ci>=? . aK306d) (string-ci=? . aK306c) (string-ci<? . aK306b) (string-ci<=? . aK306a) (char-whitespace? . aK3069) (char-upper-case? . aK3068) (char-title-case? . aK3067) (char-numeric? . aK3066) (char-lower-case? . aK3065) (char-general-category . aK3064) (char-upcase . aK3063) (char-titlecase . aK3062) (char-foldcase . aK3061) (char-downcase . aK3060) (char-ci>? . aK305f) (char-ci>=? . aK305e) (char-ci=? . aK305d) (char-ci<? . aK305c) (char-ci<=? . aK305b) (char-alphabetic? . aK305a)) '() values values '#f '#f '#t '#f) (aK987@aK7d3@install-library 'aK3135 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . aK2fb9) (raise-continuable . aK2fb8) (raise . aK2fb7) (guard . aK2e2e) (else . aK2e26) (=> . aK2e25)) '() values values '#f '#f '#t '#f) (aK987@aK7d3@install-library 'aK3136 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . aK2f0e) (bitwise-reverse-bit-field . aK2f0d) (bitwise-length . aK2f0c) (bitwise-if . aK2f0b) (bitwise-first-bit-set . aK2f0a) (bitwise-copy-bit-field . aK2f09) (bitwise-copy-bit . aK2f08) (bitwise-bit-set? . aK2f07) (bitwise-bit-field . aK2f06) (bitwise-bit-count . aK2f05) (bitwise-xor . aK2f04) (bitwise-ior . aK2f03) (bitwise-and . aK2f02) (bitwise-not . aK2f01) (bitwise-arithmetic-shift-right . aK2f00) (bitwise-arithmetic-shift-left . aK2eff) (bitwise-arithmetic-shift . aK2efe)) '() values values '#f '#f '#t '#f) (aK987@aK7d3@install-library 'aK3137 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . aK2f3b) (fxxor . aK2f3a) (fxrotate-bit-field . aK2f39) (fxreverse-bit-field . aK2f38) (fxpositive? . aK2f37) (fxodd? . aK2f36) (fxnot . aK2f35) (fxnegative? . aK2f34) (fxmod0 . aK2f33) (fxmod . aK2f32) (fxmin . aK2f31) (fxmax . aK2f30) (fxlength . aK2f2f) (fxior . aK2f2e) (fxif . aK2f2d) (fxfirst-bit-set . aK2f2c) (fxeven? . aK2f2b) (fxdiv0-and-mod0 . aK2f2a) (fxdiv0 . aK2f29) (fxdiv-and-mod . aK2f28) (fxdiv . aK2f27) (fxcopy-bit-field . aK2f26) (fxcopy-bit . aK2f25) (fxbit-set? . aK2f24) (fxbit-field . aK2f23) (fxbit-count . aK2f22) (fxarithmetic-shift-right . aK2f21) (fxarithmetic-shift-left . aK2f20) (fxarithmetic-shift . aK2f1f) (fxand . aK2f1e) (fx>? . aK2f1d) (fx>=? . aK2f1c) (fx=? . aK2f1b) (fx<? . aK2f1a) (fx<=? . aK2f19) (fx-/carry . aK2f18) (fx- . aK2f17) (fx+/carry . aK2f16) (fx+ . aK2f15) (fx*/carry . aK2f14) (fx* . aK2f13) (greatest-fixnum . aK2f12) (least-fixnum . aK2f11) (fixnum-width . aK2f10) (fixnum? . aK2f0f)) '() values values '#f '#f '#t '#f) (aK987@aK7d3@install-library 'aK3138 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . aK2b82) (no-infinities-violation? . aK2b6d) (make-no-nans-violation . aK2b80) (make-no-infinities-violation . aK2b6b) (real->flonum . aK2f69) (flzero? . aK2f68) (fltruncate . aK2f67) (fltan . aK2f66) (flsqrt . aK2f65) (flsin . aK2f64) (flround . aK2f63) (flpositive? . aK2f62) (flonum? . aK2f61) (flodd? . aK2f60) (flnumerator . aK2f5f) (flnegative? . aK2f5e) (flnan? . aK2f5d) (flmod0 . aK2f5c) (flmod . aK2f5b) (flmin . aK2f5a) (flmax . aK2f59) (fllog . aK2f58) (flinteger? . aK2f57) (flinfinite? . aK2f56) (flfloor . aK2f55) (flfinite? . aK2f54) (flexpt . aK2f53) (flexp . aK2f52) (fleven? . aK2f51) (fldiv0-and-mod0 . aK2f50) (fldiv0 . aK2f4f) (fldiv-and-mod . aK2f4e) (fldiv . aK2f4d) (fldenominator . aK2f4c) (flcos . aK2f4b) (flceiling . aK2f4a) (flatan . aK2f49) (flasin . aK2f48) (flacos . aK2f47) (flabs . aK2f46) (fl>? . aK2f45) (fl>=? . aK2f44) (fl=? . aK2f43) (fl<? . aK2f42) (fl<=? . aK2f41) (fl/ . aK2f40) (fl- . aK2f3f) (fl+ . aK2f3e) (fl* . aK2f3d) (fixnum->flonum . aK2f3c) (&no-nans . aK2e5a) (&no-infinities . aK2e59)) '() values values '#f '#f '#t '#f) (aK987@aK7d3@install-library 'aK3139 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . aK3043) (string-ci-hash . aK3042) (string-hash . aK3041) (equal-hash . aK3040) (hashtable-equivalence-function . aK303f) (make-hashtable . aK303e) (hashtable-hash-function . aK303d) (make-eqv-hashtable . aK303c) (make-eq-hashtable . aK303b) (hashtable? . aK303a) (hashtable-update! . aK3039) (hashtable-size . aK3038) (hashtable-set! . aK3037) (hashtable-ref . aK3036) (hashtable-mutable? . aK3035) (hashtable-keys . aK3034) (hashtable-entries . aK3033) (hashtable-delete! . aK3032) (hashtable-copy . aK3031) (hashtable-contains? . aK3030) (hashtable-clear! . aK302f)) '() values values '#f '#f '#t '#f) (aK987@aK7d3@install-library 'aK313a '(rnrs io ports) '(6) '() '() '() '((eof-object? . aK301f) (eof-object . aK301e) (current-error-port . aK301d) (current-output-port . aK301c) (current-input-port . aK301b) (output-port? . aK301a) (input-port? . aK3019) (utf-8-codec . aK3018) (utf-16-codec . aK3017) (transcoder-error-handling-mode . aK3016) (transcoder-eol-style . aK3015) (transcoder-codec . aK3014) (transcoded-port . aK3013) (textual-port? . aK3012) (string->bytevector . aK3011) (standard-output-port . aK3010) (standard-input-port . aK300f) (standard-error-port . aK300e) (set-port-position! . aK300d) (put-u8 . aK300c) (put-string . aK300b) (put-datum . aK300a) (put-char . aK3009) (put-bytevector . aK3008) (port? . aK3007) (port-transcoder . aK3006) (port-position . aK3005) (port-has-set-port-position!? . aK3004) (port-has-port-position? . aK3003) (port-eof? . aK3002) (output-port-buffer-mode . aK3001) (open-string-output-port . aK3000) (open-string-input-port . aK2fff) (open-file-output-port . aK2ffe) (open-file-input/output-port . aK2ffd) (open-file-input-port . aK2ffc) (open-bytevector-output-port . aK2ffb) (open-bytevector-input-port . aK2ffa) (native-transcoder . aK2ff9) (native-eol-style . aK2ff8) (make-transcoder . aK2ff7) (latin-1-codec . aK2ff6) (make-i/o-write-error . aK2a81) (make-i/o-read-error . aK2a6c) (make-i/o-port-error . aK2b22) (make-i/o-invalid-position-error . aK2a98) (make-i/o-filename-error . aK2ab3) (make-i/o-file-protection-error . aK2acc) (make-i/o-file-is-read-only-error . aK2ae1) (make-i/o-file-does-not-exist-error . aK2b0b) (make-i/o-file-already-exists-error . aK2af6) (make-i/o-error . aK2a57) (make-i/o-encoding-error . aK2b52) (make-i/o-decoding-error . aK2b3b) (make-custom-textual-output-port . aK2ff5) (make-custom-textual-input/output-port . aK2ff4) (make-custom-textual-input-port . aK2ff3) (make-custom-binary-output-port . aK2ff2) (make-custom-binary-input/output-port . aK2ff1) (make-custom-binary-input-port . aK2ff0) (lookahead-u8 . aK2fee) (lookahead-char . aK2fed) (i/o-write-error? . aK2a83) (i/o-read-error? . aK2a6e) (i/o-port-error? . aK2b26) (i/o-invalid-position-error? . aK2a9c) (i/o-filename-error? . aK2ab7) (i/o-file-protection-error? . aK2ace) (i/o-file-is-read-only-error? . aK2ae3) (i/o-file-does-not-exist-error? . aK2b0d) (i/o-file-already-exists-error? . aK2af8) (i/o-error? . aK2a59) (i/o-error-position . aK2a9e) (i/o-error-port . aK2b28) (i/o-error-filename . aK2ab9) (i/o-encoding-error? . aK2b56) (i/o-encoding-error-char . aK2b58) (i/o-decoding-error? . aK2b3d) (get-u8 . aK2fec) (get-string-n! . aK2feb) (get-string-n . aK2fea) (get-string-all . aK2fe9) (get-line . aK2fe8) (get-datum . aK2fe7) (get-char . aK2fe6) (get-bytevector-some . aK2fe5) (get-bytevector-n! . aK2fe4) (get-bytevector-n . aK2fe3) (get-bytevector-all . aK2fe2) (flush-output-port . aK2fe1) (close-port . aK2fe0) (call-with-string-output-port . aK2fbf) (call-with-port . aK2fbe) (call-with-bytevector-output-port . aK2fbd) (bytevector->string . aK2fbc) (buffer-mode? . aK2fbb) (binary-port? . aK2fba) (&i/o-encoding . aK2e58) (&i/o-decoding . aK2e57) (&i/o-port . aK2e56) (&i/o-file-does-not-exist . aK2e55) (&i/o-file-already-exists . aK2e54) (&i/o-file-is-read-only . aK2e53) (&i/o-file-protection . aK2e52) (&i/o-filename . aK2e51) (&i/o-invalid-position . aK2e50) (&i/o-write . aK2e4f) (&i/o-read . aK2e4e) (&i/o . aK2e4d) (error-handling-mode . aK2e32) (file-options . aK2e31) (buffer-mode . aK2e30) (eol-style . aK2e2f)) '() values values '#f '#f '#t '#f) (aK987@aK7d3@install-library 'aK313b '(rnrs enums) '(6) '() '() '() '((make-enumeration . aK2fb6) (enum-set=? . aK2fb5) (enum-set-universe . aK2fb4) (enum-set-union . aK2fb3) (enum-set-subset? . aK2fb2) (enum-set-projection . aK2fb1) (enum-set-member? . aK2fb0) (enum-set-intersection . aK2faf) (enum-set-indexer . aK2fae) (enum-set-difference . aK2fad) (enum-set-constructor . aK2fac) (enum-set-complement . aK2fab) (enum-set->list . aK2faa) (define-enumeration . aK2e3d)) '() values values '#f '#f '#t '#f) (aK987@aK7d3@install-library 'aK313c '(rnrs conditions) '(6) '() '() '() '((who-condition? . aK29cd) (warning? . aK2945) (violation? . aK2984) (undefined-violation? . aK2a44) (syntax-violation? . aK2a2b) (syntax-violation-subform . aK2a2f) (syntax-violation-form . aK2a2d) (syntax-violation . aKe59) (simple-conditions . aK2fa9) (serious-condition? . aK295a) (non-continuable-violation? . aK29e4) (message-condition? . aK292e) (make-who-condition . aK29c9) (make-warning . aK2943) (make-violation . aK2982) (make-undefined-violation . aK2a42) (make-syntax-violation . aK2a25) (make-serious-condition . aK2958) (make-non-continuable-violation . aK29e2) (make-message-condition . aK292a) (make-lexical-violation . aK2a0c) (make-irritants-condition . aK29ae) (make-implementation-restriction-violation . aK29f7) (make-error . aK296d) (make-assertion-violation . aK2997) (lexical-violation? . aK2a0e) (irritants-condition? . aK29b2) (implementation-restriction-violation? . aK29f9) (error? . aK296f) (condition-who . aK29cf) (condition-predicate . aK2fa8) (condition-message . aK2930) (condition-irritants . aK29b4) (condition-accessor . aK2fa7) (condition . aK2fa6) (assertion-violation? . aK2999) (condition? . aK2fa5) (&undefined . aK2e4c) (&syntax . aK2e4b) (&lexical . aK2e4a) (&implementation-restriction . aK2e49) (&non-continuable . aK2e48) (&who . aK2e47) (&irritants . aK2e46) (&assertion . aK2e45) (&violation . aK2e44) (&error . aK2e43) (&serious . aK2e42) (&warning . aK2e41) (&message . aK2e40) (&condition . aK2e3f) (define-condition-type . aK2e3e)) '() values values '#f '#f '#t '#f) (aK987@aK7d3@install-library 'aK313d '(rnrs records inspection) '(6) '() '() '() '((record? . aK3052) (record-type-uid . aK3051) (record-type-sealed? . aK3050) (record-type-parent . aK304f) (record-type-opaque? . aK304e) (record-type-name . aK304d) (record-type-generative? . aK304c) (record-type-field-names . aK304b) (record-rtd . aK304a) (record-field-mutable? . aK3049)) '() values values '#f '#f '#t '#f) (aK987@aK7d3@install-library 'aK313e '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . aK3059) (record-predicate . aK3058) (record-mutator . aK3057) (record-constructor . aK3056) (record-accessor . aK3055) (make-record-type-descriptor . aK3054) (make-record-constructor-descriptor . aK3053)) '() values values '#f '#f '#t '#f) (aK987@aK7d3@install-library 'aK313f '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . aK2e3c) (parent-rtd . aK2e3b) (nongenerative . aK2e3a) (opaque . aK2e39) (sealed . aK2e38) (protocol . aK2e37) (parent . aK2e36) (immutable . aK2e35) (mutable . aK2e34) (fields . aK2e33) (record-constructor-descriptor . aK2e13) (record-type-descriptor . aK2e12)) '() values values '#f '#f '#t '#f) (aK987@aK7d3@install-library 'aK3140 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . aK2b86) (&no-nans-rtd . aK2b84) (&no-infinities-rcd . aK2b71) (&no-infinities-rtd . aK2b6f) (&i/o-encoding-rcd . aK2b5c) (&i/o-encoding-rtd . aK2b5a) (&i/o-decoding-rcd . aK2b41) (&i/o-decoding-rtd . aK2b3f) (&i/o-port-rcd . aK2b2c) (&i/o-port-rtd . aK2b2a) (&i/o-file-does-not-exist-rcd . aK2b11) (&i/o-file-does-not-exist-rtd . aK2b0f) (&i/o-file-already-exists-rcd . aK2afc) (&i/o-file-already-exists-rtd . aK2afa) (&i/o-file-is-read-only-rcd . aK2ae7) (&i/o-file-is-read-only-rtd . aK2ae5) (&i/o-file-protection-rcd . aK2ad2) (&i/o-file-protection-rtd . aK2ad0) (&i/o-filename-rcd . aK2abd) (&i/o-filename-rtd . aK2abb) (&i/o-invalid-position-rcd . aK2aa2) (&i/o-invalid-position-rtd . aK2aa0) (&i/o-write-rcd . aK2a87) (&i/o-write-rtd . aK2a85) (&i/o-read-rcd . aK2a72) (&i/o-read-rtd . aK2a70) (&i/o-rcd . aK2a5d) (&i/o-rtd . aK2a5b) (&undefined-rcd . aK2a48) (&undefined-rtd . aK2a46) (&syntax-rcd . aK2a33) (&syntax-rtd . aK2a31) (&lexical-rcd . aK2a12) (&lexical-rtd . aK2a10) (&implementation-restriction-rcd . aK29fd) (&implementation-restriction-rtd . aK29fb) (&non-continuable-rcd . aK29e8) (&non-continuable-rtd . aK29e6) (&who-rcd . aK29d3) (&who-rtd . aK29d1) (&irritants-rcd . aK29b8) (&irritants-rtd . aK29b6) (&assertion-rcd . aK299d) (&assertion-rtd . aK299b) (&violation-rcd . aK2988) (&violation-rtd . aK2986) (&error-rcd . aK2973) (&error-rtd . aK2971) (&serious-rcd . aK295e) (&serious-rtd . aK295c) (&warning-rcd . aK2949) (&warning-rtd . aK2947) (&message-rcd . aK2934) (&message-rtd . aK2932) (&condition-rcd . aK28d5) (&condition-rtd . aK28d3) (syntax-error . aKe55) (syntax-dispatch . aKd79) (pretty-print . aK3120) (eval-core . aK311f) (set-symbol-value! . aK311e) (symbol-value . aK311d) (gensym . aK311c) (void . aK311b) (load . aK2c97) (interaction-environment . aKe67) (char-ready? . aK311a) (regexp? . aK3119) (read-line . aK3118) (gensym-prefix-set! . aK3117) (ungensym . aK3116) (alist->eq-hash-table . aK3115) (assoc-ref . aK3114) (print . aK3113) (format . aK3112) (host-os . aK3111) (library-path . aK7b2) (standard-library-path . aK3110) (file-newer? . aK310f) (stat-mtime . aK310e) (write-to-file . aK310d) (file->list . aK310c) (file->string . aK310b) (digit->integer . aK310a) (call-with-string-input-port . aK3109) (call-with-string-io . aK3108) (string-split . aK3107) (bytevector-for-each . aK3106) (string->regexp . aK3105) (rxmatch . aK3104) (regexp-replace-all . aK3103) (hashtable-for-each . aK3102) (mosh-cache-dir . aK59d) (call-process . aK3101) (local-tz-offset . aK3100) (microseconds . aK30ff) (directory-list . aK30fe) (set-current-directory! . aK30fd) (expand-path . aK30fc) (current-directory . aK30fb) (%spawn . aK30fa) (%waitpid . aK30f9) (simple-struct-name . aK30f8) (simple-struct-set! . aK30f7) (simple-struct-ref . aK30f6) (make-simple-struct . aK30f5) (simple-struct? . aK30f4) (pointer-ref-c-int64 . aK30f3) (pointer-ref-c-int32 . aK30f2) (pointer-ref-c-int16 . aK30f1) (pointer-ref-c-int8 . aK30f0) (pointer-ref-c-uint64 . aK30ef) (pointer-ref-c-uint32 . aK30ee) (pointer-ref-c-uint16 . aK30ed) (pointer-ref-c-uint8 . aK30ec) (pointer-set-c-uint64! . aK30eb) (pointer-set-c-uint32! . aK30ea) (pointer-set-c-uint16! . aK30e9) (pointer-set-c-uint8! . aK30e8) (pointer-set-c-int64! . aK30e7) (pointer-set-c-int32! . aK30e6) (pointer-set-c-int16! . aK30e5) (pointer-set-c-int8! . aK30e4) (pointer-set-c-pointer! . aK30e3) (pointer-set-c-double! . aK30e2) (pointer-set-c-float! . aK30e1) (pointer-set-c-long-long! . aK30e0) (pointer-set-c-long! . aK30df) (pointer-set-c-int! . aK30de) (pointer-set-c-short! . aK30dd) (pointer-set-c-char! . aK30dc) (pointer-ref-c-pointer . aK30db) (pointer-ref-c-double . aK30da) (pointer-ref-c-float . aK30d9) (pointer-ref-c-unsigned-long-long . aK30d8) (pointer-ref-c-signed-long-long . aK30d7) (pointer-ref-c-unsigned-long . aK30d6) (pointer-ref-c-signed-long . aK30d5) (pointer-ref-c-unsigned-int . aK30d4) (pointer-ref-c-signed-int . aK30d3) (pointer-ref-c-unsigned-short . aK30d2) (pointer-ref-c-signed-short . aK30d1) (pointer-ref-c-unsigned-char . aK30d0) (pointer-ref-c-signed-char . aK30cf) (pointer->integer . aK30ce) (integer->pointer . aK30cd) (pointer? . aK30cc) (shared-errno . aK30cb) (%ffi-free . aK30ca) (%ffi-malloc . aK30c9) (%ffi-supported? . aK30c8) (%ffi-pointer->string . aK30c7) (%ffi-call->string-or-zero . aK30c6) (%ffi-call->double . aK30c5) (%ffi-call->void* . aK30c4) (%ffi-call->void . aK30c3) (%ffi-call->char . aK30c2) (%ffi-call->int . aK30c1) (%ffi-lookup . aK30c0) (%ffi-open . aK30bf) (%fork . aK30be) (%pipe . aK30bd) (p . aK30bc) (open-output-string . aK30bb) (get-output-string . aK30ba) (file-stat-ctime . aK30b9) (file-stat-atime . aK30b8) (file-stat-mtime . aK30b7) (file-size-in-bytes . aK30b6) (file-writable? . aK30b5) (file-executable? . aK30b4) (file-readable? . aK30b3) (file-regular? . aK30b2) (file-symbolic-link? . aK30b1) (file-directory? . aK30b0) (create-symbolic-link . aK30af) (rename-file . aK30ae) (delete-directory . aK30ad) (create-directory . aK30ac) (create-mosh-cache-dir . aK30ab) (get-environment-variables . aK30aa) (current-exception-handler . aK30a9) (get-environment-variable . aK30a8) (join-wraps . aK30a7) (id->real-label . aK30a6) (same-marks? . aK30a5) (same-marks*? . aK30a4) (get-timeofday . aK30a3) (get-command-line . aK30a2) (sys-display . aK30a1) (whereis . aK30a0) (register . aK309f) (vm-join! . aK309e) (vm-set-value! . aK309d) (vm? . aK309c) (main-vm? . aK309b) (vm-eval . aK309a) (vm-self . aK3099) (vm-start! . aK3098) (make-vm . aK3097) (mutex-try-lock! . aK3096) (mutex-unlock! . aK3095) (mutex-lock! . aK3094) (mutex? . aK3093) (make-mutex . aK3092) (condition-variable-notify-all! . aK3091) (condition-variable-notify! . aK3090) (condition-variable-wait! . aK308f) (make-condition-variable . aK308e) (mosh-executable-path . aK308d) (make-file-options . aK308c) (source-info . aK308b) (make-compiler-instruction . aK308a) (make-instruction . aK3089) (set-source-info! . aK3088) (bignum? . aK3087) (fast-equal? . aK3086) (fasl-read . aK3085) (fasl-write . aK3084) (time-usage . aK3083) (os-constant . aK3082) (disasm . aK3081) (make-parameter . aK59b) (socket-port . aK3080) (socket-shutdown . aK307f) (socket-close . aK307e) (socket-send . aK307d) (socket-recv! . aK307c) (socket-recv . aK307b) (make-server-socket . aK307a) (make-client-socket . aK3079) (socket-accept . aK3078) (socket? . aK3077) (string-upcase . aK3076) (string-titlecase . aK3075) (string-normalize-nfkd . aK3074) (string-normalize-nfkc . aK3073) (string-normalize-nfd . aK3072) (string-normalize-nfc . aK3071) (string-foldcase . aK3070) (string-downcase . aK306f) (string-ci>? . aK306e) (string-ci>=? . aK306d) (string-ci=? . aK306c) (string-ci<? . aK306b) (string-ci<=? . aK306a) (char-whitespace? . aK3069) (char-upper-case? . aK3068) (char-title-case? . aK3067) (char-numeric? . aK3066) (char-lower-case? . aK3065) (char-general-category . aK3064) (char-upcase . aK3063) (char-titlecase . aK3062) (char-foldcase . aK3061) (char-downcase . aK3060) (char-ci>? . aK305f) (char-ci>=? . aK305e) (char-ci=? . aK305d) (char-ci<? . aK305c) (char-ci<=? . aK305b) (char-alphabetic? . aK305a) (make-variable-transformer . aKba4) (identifier? . aKe5b) (generate-temporaries . aKe47) (free-identifier=? . aKe49) (syntax->datum . aKe5f) (datum->syntax . aKe5d) (bound-identifier=? . aKe4b) (record-type-descriptor? . aK3059) (record-predicate . aK3058) (record-mutator . aK3057) (record-constructor . aK3056) (record-accessor . aK3055) (make-record-type-descriptor . aK3054) (make-record-constructor-descriptor . aK3053) (record? . aK3052) (record-type-uid . aK3051) (record-type-sealed? . aK3050) (record-type-parent . aK304f) (record-type-opaque? . aK304e) (record-type-name . aK304d) (record-type-generative? . aK304c) (record-type-field-names . aK304b) (record-rtd . aK304a) (record-field-mutable? . aK3049) (delete-file . aK3048) (file-exists? . aK3047) (vector-sort! . aK3046) (vector-sort . aK3045) (list-sort . aK3044) (symbol-hash . aK3043) (string-ci-hash . aK3042) (string-hash . aK3041) (equal-hash . aK3040) (hashtable-equivalence-function . aK303f) (make-hashtable . aK303e) (hashtable-hash-function . aK303d) (make-eqv-hashtable . aK303c) (make-eq-hashtable . aK303b) (hashtable? . aK303a) (hashtable-update! . aK3039) (hashtable-size . aK3038) (hashtable-set! . aK3037) (hashtable-ref . aK3036) (hashtable-mutable? . aK3035) (hashtable-keys . aK3034) (hashtable-entries . aK3033) (hashtable-delete! . aK3032) (hashtable-copy . aK3031) (hashtable-contains? . aK3030) (hashtable-clear! . aK302f) (call-with-output-file . aK302e) (call-with-input-file . aK302d) (write-char . aK302c) (write . aK302b) (with-output-to-file . aK302a) (with-input-from-file . aK3029) (read-char . aK3028) (read . aK3027) (peek-char . aK3026) (open-output-file . aK3025) (open-input-file . aK3024) (newline . aK3023) (display . aK3022) (close-output-port . aK3021) (close-input-port . aK3020) (eof-object? . aK301f) (eof-object . aK301e) (current-error-port . aK301d) (current-output-port . aK301c) (current-input-port . aK301b) (output-port? . aK301a) (input-port? . aK3019) (utf-8-codec . aK3018) (utf-16-codec . aK3017) (transcoder-error-handling-mode . aK3016) (transcoder-eol-style . aK3015) (transcoder-codec . aK3014) (transcoded-port . aK3013) (textual-port? . aK3012) (string->bytevector . aK3011) (standard-output-port . aK3010) (standard-input-port . aK300f) (standard-error-port . aK300e) (set-port-position! . aK300d) (put-u8 . aK300c) (put-string . aK300b) (put-datum . aK300a) (put-char . aK3009) (put-bytevector . aK3008) (port? . aK3007) (port-transcoder . aK3006) (port-position . aK3005) (port-has-set-port-position!? . aK3004) (port-has-port-position? . aK3003) (port-eof? . aK3002) (output-port-buffer-mode . aK3001) (open-string-output-port . aK3000) (open-string-input-port . aK2fff) (open-file-output-port . aK2ffe) (open-file-input/output-port . aK2ffd) (open-file-input-port . aK2ffc) (open-bytevector-output-port . aK2ffb) (open-bytevector-input-port . aK2ffa) (native-transcoder . aK2ff9) (native-eol-style . aK2ff8) (make-transcoder . aK2ff7) (latin-1-codec . aK2ff6) (make-i/o-write-error . aK2a81) (make-i/o-read-error . aK2a6c) (make-i/o-port-error . aK2b22) (make-i/o-invalid-position-error . aK2a98) (make-i/o-filename-error . aK2ab3) (make-i/o-file-protection-error . aK2acc) (make-i/o-file-is-read-only-error . aK2ae1) (make-i/o-file-does-not-exist-error . aK2b0b) (make-i/o-file-already-exists-error . aK2af6) (make-i/o-error . aK2a57) (make-i/o-encoding-error . aK2b52) (make-i/o-decoding-error . aK2b3b) (make-custom-textual-output-port . aK2ff5) (make-custom-textual-input/output-port . aK2ff4) (make-custom-textual-input-port . aK2ff3) (make-custom-binary-output-port . aK2ff2) (make-custom-binary-input/output-port . aK2ff1) (make-custom-binary-input-port . aK2ff0) (make-bytevector . aK2fef) (lookahead-u8 . aK2fee) (lookahead-char . aK2fed) (i/o-write-error? . aK2a83) (i/o-read-error? . aK2a6e) (i/o-port-error? . aK2b26) (i/o-invalid-position-error? . aK2a9c) (i/o-filename-error? . aK2ab7) (i/o-file-protection-error? . aK2ace) (i/o-file-is-read-only-error? . aK2ae3) (i/o-file-does-not-exist-error? . aK2b0d) (i/o-file-already-exists-error? . aK2af8) (i/o-error? . aK2a59) (i/o-error-position . aK2a9e) (i/o-error-port . aK2b28) (i/o-error-filename . aK2ab9) (i/o-encoding-error? . aK2b56) (i/o-encoding-error-char . aK2b58) (i/o-decoding-error? . aK2b3d) (get-u8 . aK2fec) (get-string-n! . aK2feb) (get-string-n . aK2fea) (get-string-all . aK2fe9) (get-line . aK2fe8) (get-datum . aK2fe7) (get-char . aK2fe6) (get-bytevector-some . aK2fe5) (get-bytevector-n! . aK2fe4) (get-bytevector-n . aK2fe3) (get-bytevector-all . aK2fe2) (flush-output-port . aK2fe1) (close-port . aK2fe0) (scheme-report-environment . aKe35) (quotient . aK2fdf) (null-environment . aKe33) (remainder . aK2fde) (modulo . aK2fdd) (inexact->exact . aK2fdc) (force . aK2fdb) (exact->inexact . aK2fda) (make-promise . aK2fd9) (exit . aK2fd8) (command-line . aK2c91) (string-fill! . aK2fd7) (string-set! . aK2fd6) (set-cdr! . aK2fd5) (set-car! . aK2fd4) (remove . aK2fd3) (remv . aK2fd2) (remp . aK2fd1) (remq . aK2fd0) (partition . aK2fcf) (memv . aK2fce) (memq . aK2fcd) (memp . aK2fcc) (member . aK2fcb) (exists . aK2fca) (for-all . aK2fc9) (fold-right . aK2fc8) (fold-left . aK2fc7) (find . aK2fc6) (filter . aK2fc5) (cons* . aK2fc4) (assv . aK2fc3) (assq . aK2fc2) (assp . aK2fc1) (assoc . aK2fc0) (call-with-string-output-port . aK2fbf) (call-with-port . aK2fbe) (call-with-bytevector-output-port . aK2fbd) (bytevector->string . aK2fbc) (buffer-mode? . aK2fbb) (binary-port? . aK2fba) (with-exception-handler . aK2fb9) (raise-continuable . aK2fb8) (raise . aK2fb7) (eval . aKe39) (environment . aKe31) (make-enumeration . aK2fb6) (enum-set=? . aK2fb5) (enum-set-universe . aK2fb4) (enum-set-union . aK2fb3) (enum-set-subset? . aK2fb2) (enum-set-projection . aK2fb1) (enum-set-member? . aK2fb0) (enum-set-intersection . aK2faf) (enum-set-indexer . aK2fae) (enum-set-difference . aK2fad) (enum-set-constructor . aK2fac) (enum-set-complement . aK2fab) (enum-set->list . aK2faa) (who-condition? . aK29cd) (warning? . aK2945) (violation? . aK2984) (undefined-violation? . aK2a44) (syntax-violation? . aK2a2b) (syntax-violation-subform . aK2a2f) (syntax-violation-form . aK2a2d) (syntax-violation . aKe59) (simple-conditions . aK2fa9) (serious-condition? . aK295a) (non-continuable-violation? . aK29e4) (message-condition? . aK292e) (make-who-condition . aK29c9) (make-warning . aK2943) (make-violation . aK2982) (make-undefined-violation . aK2a42) (make-syntax-violation . aK2a25) (make-serious-condition . aK2958) (make-non-continuable-violation . aK29e2) (make-message-condition . aK292a) (make-lexical-violation . aK2a0c) (make-irritants-condition . aK29ae) (make-implementation-restriction-violation . aK29f7) (make-error . aK296d) (make-assertion-violation . aK2997) (lexical-violation? . aK2a0e) (irritants-condition? . aK29b2) (implementation-restriction-violation? . aK29f9) (error? . aK296f) (condition-who . aK29cf) (condition-predicate . aK2fa8) (condition-message . aK2930) (condition-irritants . aK29b4) (condition-accessor . aK2fa7) (condition . aK2fa6) (assertion-violation? . aK2999) (condition? . aK2fa5) (utf32->string . aK2fa4) (utf16->string . aK2fa3) (utf8->string . aK2fa2) (uint-list->bytevector . aK2fa1) (u8-list->bytevector . aK2fa0) (string->utf8 . aK2f9f) (string->utf32 . aK2f9e) (string->utf16 . aK2f9d) (sint-list->bytevector . aK2f9c) (native-endianness . aK2f9b) (bytevector? . aK2f9a) (bytevector=? . aK2f99) (bytevector-uint-set! . aK2f98) (bytevector-uint-ref . aK2f97) (bytevector-u8-set! . aK2f96) (bytevector-u8-ref . aK2f95) (bytevector-u64-set! . aK2f94) (bytevector-u64-ref . aK2f93) (bytevector-u64-native-set! . aK2f92) (bytevector-u64-native-ref . aK2f91) (bytevector-u32-set! . aK2f90) (bytevector-u32-ref . aK2f8f) (bytevector-u32-native-set! . aK2f8e) (bytevector-u32-native-ref . aK2f8d) (bytevector-u16-set! . aK2f8c) (bytevector-u16-ref . aK2f8b) (bytevector-u16-native-set! . aK2f8a) (bytevector-u16-native-ref . aK2f89) (bytevector-sint-set! . aK2f88) (bytevector-sint-ref . aK2f87) (bytevector-s8-set! . aK2f86) (bytevector-s8-ref . aK2f85) (bytevector-s64-set! . aK2f84) (bytevector-s64-ref . aK2f83) (bytevector-s64-native-set! . aK2f82) (bytevector-s64-native-ref . aK2f81) (bytevector-s32-set! . aK2f80) (bytevector-s32-ref . aK2f7f) (bytevector-s32-native-set! . aK2f7e) (bytevector-s32-native-ref . aK2f7d) (bytevector-s16-set! . aK2f7c) (bytevector-s16-ref . aK2f7b) (bytevector-s16-native-set! . aK2f7a) (bytevector-s16-native-ref . aK2f79) (bytevector-length . aK2f78) (bytevector-ieee-single-ref . aK2f77) (bytevector-ieee-single-set! . aK2f76) (bytevector-ieee-single-native-set! . aK2f75) (bytevector-ieee-single-native-ref . aK2f74) (bytevector-ieee-double-set! . aK2f73) (bytevector-ieee-double-ref . aK2f72) (bytevector-ieee-double-native-set! . aK2f71) (bytevector-ieee-double-native-ref . aK2f70) (bytevector-fill! . aK2f6f) (bytevector-copy! . aK2f6e) (bytevector-copy . aK2f6d) (bytevector->uint-list . aK2f6c) (bytevector->u8-list . aK2f6b) (bytevector->sint-list . aK2f6a) (no-nans-violation? . aK2b82) (no-infinities-violation? . aK2b6d) (make-no-nans-violation . aK2b80) (make-no-infinities-violation . aK2b6b) (real->flonum . aK2f69) (flzero? . aK2f68) (fltruncate . aK2f67) (fltan . aK2f66) (flsqrt . aK2f65) (flsin . aK2f64) (flround . aK2f63) (flpositive? . aK2f62) (flonum? . aK2f61) (flodd? . aK2f60) (flnumerator . aK2f5f) (flnegative? . aK2f5e) (flnan? . aK2f5d) (flmod0 . aK2f5c) (flmod . aK2f5b) (flmin . aK2f5a) (flmax . aK2f59) (fllog . aK2f58) (flinteger? . aK2f57) (flinfinite? . aK2f56) (flfloor . aK2f55) (flfinite? . aK2f54) (flexpt . aK2f53) (flexp . aK2f52) (fleven? . aK2f51) (fldiv0-and-mod0 . aK2f50) (fldiv0 . aK2f4f) (fldiv-and-mod . aK2f4e) (fldiv . aK2f4d) (fldenominator . aK2f4c) (flcos . aK2f4b) (flceiling . aK2f4a) (flatan . aK2f49) (flasin . aK2f48) (flacos . aK2f47) (flabs . aK2f46) (fl>? . aK2f45) (fl>=? . aK2f44) (fl=? . aK2f43) (fl<? . aK2f42) (fl<=? . aK2f41) (fl/ . aK2f40) (fl- . aK2f3f) (fl+ . aK2f3e) (fl* . aK2f3d) (fixnum->flonum . aK2f3c) (fxzero? . aK2f3b) (fxxor . aK2f3a) (fxrotate-bit-field . aK2f39) (fxreverse-bit-field . aK2f38) (fxpositive? . aK2f37) (fxodd? . aK2f36) (fxnot . aK2f35) (fxnegative? . aK2f34) (fxmod0 . aK2f33) (fxmod . aK2f32) (fxmin . aK2f31) (fxmax . aK2f30) (fxlength . aK2f2f) (fxior . aK2f2e) (fxif . aK2f2d) (fxfirst-bit-set . aK2f2c) (fxeven? . aK2f2b) (fxdiv0-and-mod0 . aK2f2a) (fxdiv0 . aK2f29) (fxdiv-and-mod . aK2f28) (fxdiv . aK2f27) (fxcopy-bit-field . aK2f26) (fxcopy-bit . aK2f25) (fxbit-set? . aK2f24) (fxbit-field . aK2f23) (fxbit-count . aK2f22) (fxarithmetic-shift-right . aK2f21) (fxarithmetic-shift-left . aK2f20) (fxarithmetic-shift . aK2f1f) (fxand . aK2f1e) (fx>? . aK2f1d) (fx>=? . aK2f1c) (fx=? . aK2f1b) (fx<? . aK2f1a) (fx<=? . aK2f19) (fx-/carry . aK2f18) (fx- . aK2f17) (fx+/carry . aK2f16) (fx+ . aK2f15) (fx*/carry . aK2f14) (fx* . aK2f13) (greatest-fixnum . aK2f12) (least-fixnum . aK2f11) (fixnum-width . aK2f10) (fixnum? . aK2f0f) (bitwise-rotate-bit-field . aK2f0e) (bitwise-reverse-bit-field . aK2f0d) (bitwise-length . aK2f0c) (bitwise-if . aK2f0b) (bitwise-first-bit-set . aK2f0a) (bitwise-copy-bit-field . aK2f09) (bitwise-copy-bit . aK2f08) (bitwise-bit-set? . aK2f07) (bitwise-bit-field . aK2f06) (bitwise-bit-count . aK2f05) (bitwise-xor . aK2f04) (bitwise-ior . aK2f03) (bitwise-and . aK2f02) (bitwise-not . aK2f01) (bitwise-arithmetic-shift-right . aK2f00) (bitwise-arithmetic-shift-left . aK2eff) (bitwise-arithmetic-shift . aK2efe) (zero? . aK2efd) (vector? . aK2efc) (vector-set! . aK2efb) (vector-ref . aK2efa) (vector-map . aK2ef9) (vector-length . aK2ef8) (vector-for-each . aK2ef7) (vector-fill! . aK2ef6) (vector->list . aK2ef5) (vector . aK2ef4) (values . aK2ef3) (truncate . aK2ef2) (tan . aK2ef1) (symbol? . aK2ef0) (symbol=? . aK2eef) (symbol->string . aK2eee) (substring . aK2eed) (string? . aK2eec) (string>? . aK2eeb) (string>=? . aK2eea) (string=? . aK2ee9) (string<? . aK2ee8) (string<=? . aK2ee7) (string-ref . aK2ee6) (string-length . aK2ee5) (string-for-each . aK2ee4) (string-copy . aK2ee3) (string-append . aK2ee2) (string->symbol . aK2ee1) (string->number . aK2ee0) (string->list . aK2edf) (string . aK2ede) (sqrt . aK2edd) (sin . aK2edc) (round . aK2edb) (reverse . aK2eda) (real? . aK2ed9) (real-valued? . aK2ed8) (real-part . aK2ed7) (rationalize . aK2ed6) (rational? . aK2ed5) (rational-valued? . aK2ed4) (procedure? . aK2ed3) (positive? . aK2ed2) (pair? . aK2ed1) (odd? . aK2ed0) (numerator . aK2ecf) (number? . aK2ece) (number->string . aK2ecd) (null? . aK2ecc) (not . aK2ecb) (negative? . aK2eca) (nan? . aK2ec9) (min . aK2ec8) (max . aK2ec7) (map . aK2ec6) (make-vector . aK2ec5) (make-string . aK2ec4) (make-rectangular . aK2ec3) (make-polar . aK2ec2) (magnitude . aK2ec1) (log . aK2ec0) (list? . aK2ebf) (list-tail . aK2ebe) (list-ref . aK2ebd) (list->vector . aK2ebc) (list->string . aK2ebb) (list . aK2eba) (length . aK2eb9) (lcm . aK2eb8) (integer? . aK2eb7) (integer-valued? . aK2eb6) (integer->char . aK2eb5) (infinite? . aK2eb4) (inexact? . aK2eb3) (inexact . aK2eb2) (imag-part . aK2eb1) (gcd . aK2eb0) (for-each . aK2eaf) (floor . aK2eae) (finite? . aK2ead) (expt . aK2eac) (exp . aK2eab) (exact? . aK2eaa) (exact-integer-sqrt . aK2ea9) (exact . aK2ea8) (even? . aK2ea7) (error . aK2ea6) (eqv? . aK2ea5) (equal? . aK2ea4) (eq? . aK2ea3) (dynamic-wind . aK2ea2) (div0-and-mod0 . aK2ea1) (mod0 . aK2ea0) (div0 . aK2e9f) (div-and-mod . aK2e9e) (mod . aK2e9d) (div . aK2e9c) (denominator . aK2e9b) (cos . aK2e9a) (cons . aK2e99) (complex? . aK2e98) (char? . aK2e97) (char>? . aK2e96) (char>=? . aK2e95) (char=? . aK2e94) (char<? . aK2e93) (char<=? . aK2e92) (char->integer . aK2e91) (ceiling . aK2e90) (call-with-values . aK2e8f) (call/cc . aK2e8e) (call-with-current-continuation . aK2e8d) (cddddr . aK2e8c) (cdddar . aK2e8b) (cddadr . aK2e8a) (cddaar . aK2e89) (cdaddr . aK2e88) (cdadar . aK2e87) (cdaadr . aK2e86) (cdaaar . aK2e85) (cadddr . aK2e84) (caddar . aK2e83) (cadadr . aK2e82) (cadaar . aK2e81) (caaddr . aK2e80) (caadar . aK2e7f) (caaadr . aK2e7e) (caaaar . aK2e7d) (cdddr . aK2e7c) (cddar . aK2e7b) (cdadr . aK2e7a) (cdaar . aK2e79) (caddr . aK2e78) (cadar . aK2e77) (caadr . aK2e76) (caaar . aK2e75) (cddr . aK2e74) (cdar . aK2e73) (cadr . aK2e72) (caar . aK2e71) (cdr . aK2e70) (car . aK2e6f) (boolean? . aK2e6e) (boolean=? . aK2e6d) (atan . aK2e6c) (assertion-violation . aK2e6b) (assertion-error . aKe53) (asin . aK2e6a) (apply . aK2e69) (append . aK2e68) (angle . aK2e67) (acos . aK2e66) (abs . aK2e65) (/ . aK2e64) (* . aK2e63) (- . aK2e62) (+ . aK2e61) (>= . aK2e60) (> . aK2e5f) (= . aK2e5e) (<= . aK2e5d) (< . aK2e5c) (library . aK2e5b) (&no-nans . aK2e5a) (&no-infinities . aK2e59) (&i/o-encoding . aK2e58) (&i/o-decoding . aK2e57) (&i/o-port . aK2e56) (&i/o-file-does-not-exist . aK2e55) (&i/o-file-already-exists . aK2e54) (&i/o-file-is-read-only . aK2e53) (&i/o-file-protection . aK2e52) (&i/o-filename . aK2e51) (&i/o-invalid-position . aK2e50) (&i/o-write . aK2e4f) (&i/o-read . aK2e4e) (&i/o . aK2e4d) (&undefined . aK2e4c) (&syntax . aK2e4b) (&lexical . aK2e4a) (&implementation-restriction . aK2e49) (&non-continuable . aK2e48) (&who . aK2e47) (&irritants . aK2e46) (&assertion . aK2e45) (&violation . aK2e44) (&error . aK2e43) (&serious . aK2e42) (&warning . aK2e41) (&message . aK2e40) (&condition . aK2e3f) (define-condition-type . aK2e3e) (define-enumeration . aK2e3d) (define-record-type . aK2e3c) (parent-rtd . aK2e3b) (nongenerative . aK2e3a) (opaque . aK2e39) (sealed . aK2e38) (protocol . aK2e37) (parent . aK2e36) (immutable . aK2e35) (mutable . aK2e34) (fields . aK2e33) (error-handling-mode . aK2e32) (file-options . aK2e31) (buffer-mode . aK2e30) (eol-style . aK2e2f) (guard . aK2e2e) (trace-define . aK2e2d) (trace-lambda . aK2e2c) (unsyntax-splicing . aK2e2b) (unsyntax . aK2e2a) (unquote-splicing . aK2e29) (unquote . aK2e28) (_ . aK2e27) (else . aK2e26) (=> . aK2e25) (... . aK2e24) (assert . aK2e23) (endianness . aK2e22) (delay . aK2e21) (time . aK2e20) (do . aK2e1f) (cond . aK2e1e) (let* . aK2e1d) (let*-values . aK2e1c) (let-values . aK2e1b) (identifier-syntax . aK2e1a) (with-syntax . aK2e19) (quasisyntax . aK2e18) (quasiquote . aK2e17) (syntax-rules . aK2e16) (include . aK2e15) (define-struct . aK2e14) (record-constructor-descriptor . aK2e13) (record-type-descriptor . aK2e12) (case . aK2e11) (parameterize . aK2e10) (unless . aK2e0f) (when . aK2e0e) (or . aK2e0d) (and . aK2e0c) (if . aK2e0b) (let . aK2e0a) (letrec* . aK2e09) (letrec . aK2e08) (type-descriptor . aK2e07) (case-lambda . aK2e06) (lambda . aK2e05) (syntax . aK2e04) (syntax-case . aK2e03) (quote . aK2e02) (foreign-call . aK2e01) (letrec-syntax . aK2e00) (let-syntax . aK2dff) (set! . aK2dfe) (import . aK2dfd) (begin . aK2dfc) (module . aK2dfb) (define-syntax . aK2dfa) (define . aK2df9)) '((aK2b86 core-prim . &no-nans-rcd) (aK2b84 core-prim . &no-nans-rtd) (aK2b71 core-prim . &no-infinities-rcd) (aK2b6f core-prim . &no-infinities-rtd) (aK2b5c core-prim . &i/o-encoding-rcd) (aK2b5a core-prim . &i/o-encoding-rtd) (aK2b41 core-prim . &i/o-decoding-rcd) (aK2b3f core-prim . &i/o-decoding-rtd) (aK2b2c core-prim . &i/o-port-rcd) (aK2b2a core-prim . &i/o-port-rtd) (aK2b11 core-prim . &i/o-file-does-not-exist-rcd) (aK2b0f core-prim . &i/o-file-does-not-exist-rtd) (aK2afc core-prim . &i/o-file-already-exists-rcd) (aK2afa core-prim . &i/o-file-already-exists-rtd) (aK2ae7 core-prim . &i/o-file-is-read-only-rcd) (aK2ae5 core-prim . &i/o-file-is-read-only-rtd) (aK2ad2 core-prim . &i/o-file-protection-rcd) (aK2ad0 core-prim . &i/o-file-protection-rtd) (aK2abd core-prim . &i/o-filename-rcd) (aK2abb core-prim . &i/o-filename-rtd) (aK2aa2 core-prim . &i/o-invalid-position-rcd) (aK2aa0 core-prim . &i/o-invalid-position-rtd) (aK2a87 core-prim . &i/o-write-rcd) (aK2a85 core-prim . &i/o-write-rtd) (aK2a72 core-prim . &i/o-read-rcd) (aK2a70 core-prim . &i/o-read-rtd) (aK2a5d core-prim . &i/o-rcd) (aK2a5b core-prim . &i/o-rtd) (aK2a48 core-prim . &undefined-rcd) (aK2a46 core-prim . &undefined-rtd) (aK2a33 core-prim . &syntax-rcd) (aK2a31 core-prim . &syntax-rtd) (aK2a12 core-prim . &lexical-rcd) (aK2a10 core-prim . &lexical-rtd) (aK29fd core-prim . &implementation-restriction-rcd) (aK29fb core-prim . &implementation-restriction-rtd) (aK29e8 core-prim . &non-continuable-rcd) (aK29e6 core-prim . &non-continuable-rtd) (aK29d3 core-prim . &who-rcd) (aK29d1 core-prim . &who-rtd) (aK29b8 core-prim . &irritants-rcd) (aK29b6 core-prim . &irritants-rtd) (aK299d core-prim . &assertion-rcd) (aK299b core-prim . &assertion-rtd) (aK2988 core-prim . &violation-rcd) (aK2986 core-prim . &violation-rtd) (aK2973 core-prim . &error-rcd) (aK2971 core-prim . &error-rtd) (aK295e core-prim . &serious-rcd) (aK295c core-prim . &serious-rtd) (aK2949 core-prim . &warning-rcd) (aK2947 core-prim . &warning-rtd) (aK2934 core-prim . &message-rcd) (aK2932 core-prim . &message-rtd) (aK28d5 core-prim . &condition-rcd) (aK28d3 core-prim . &condition-rtd) (aKe55 core-prim . syntax-error) (aKd79 core-prim . syntax-dispatch) (aK3120 core-prim . pretty-print) (aK311f core-prim . eval-core) (aK311e core-prim . set-symbol-value!) (aK311d core-prim . symbol-value) (aK311c core-prim . gensym) (aK311b core-prim . void) (aK2c97 core-prim . load) (aKe67 core-prim . interaction-environment) (aK311a core-prim . char-ready?) (aK3119 core-prim . regexp?) (aK3118 core-prim . read-line) (aK3117 core-prim . gensym-prefix-set!) (aK3116 core-prim . ungensym) (aK3115 core-prim . alist->eq-hash-table) (aK3114 core-prim . assoc-ref) (aK3113 core-prim . print) (aK3112 core-prim . format) (aK3111 core-prim . host-os) (aK7b2 core-prim . library-path) (aK3110 core-prim . standard-library-path) (aK310f core-prim . file-newer?) (aK310e core-prim . stat-mtime) (aK310d core-prim . write-to-file) (aK310c core-prim . file->list) (aK310b core-prim . file->string) (aK310a core-prim . digit->integer) (aK3109 core-prim . call-with-string-input-port) (aK3108 core-prim . call-with-string-io) (aK3107 core-prim . string-split) (aK3106 core-prim . bytevector-for-each) (aK3105 core-prim . string->regexp) (aK3104 core-prim . rxmatch) (aK3103 core-prim . regexp-replace-all) (aK3102 core-prim . hashtable-for-each) (aK59d core-prim . mosh-cache-dir) (aK3101 core-prim . call-process) (aK3100 core-prim . local-tz-offset) (aK30ff core-prim . microseconds) (aK30fe core-prim . directory-list) (aK30fd core-prim . set-current-directory!) (aK30fc core-prim . expand-path) (aK30fb core-prim . current-directory) (aK30fa core-prim . %spawn) (aK30f9 core-prim . %waitpid) (aK30f8 core-prim . simple-struct-name) (aK30f7 core-prim . simple-struct-set!) (aK30f6 core-prim . simple-struct-ref) (aK30f5 core-prim . make-simple-struct) (aK30f4 core-prim . simple-struct?) (aK30f3 core-prim . pointer-ref-c-int64) (aK30f2 core-prim . pointer-ref-c-int32) (aK30f1 core-prim . pointer-ref-c-int16) (aK30f0 core-prim . pointer-ref-c-int8) (aK30ef core-prim . pointer-ref-c-uint64) (aK30ee core-prim . pointer-ref-c-uint32) (aK30ed core-prim . pointer-ref-c-uint16) (aK30ec core-prim . pointer-ref-c-uint8) (aK30eb core-prim . pointer-set-c-uint64!) (aK30ea core-prim . pointer-set-c-uint32!) (aK30e9 core-prim . pointer-set-c-uint16!) (aK30e8 core-prim . pointer-set-c-uint8!) (aK30e7 core-prim . pointer-set-c-int64!) (aK30e6 core-prim . pointer-set-c-int32!) (aK30e5 core-prim . pointer-set-c-int16!) (aK30e4 core-prim . pointer-set-c-int8!) (aK30e3 core-prim . pointer-set-c-pointer!) (aK30e2 core-prim . pointer-set-c-double!) (aK30e1 core-prim . pointer-set-c-float!) (aK30e0 core-prim . pointer-set-c-long-long!) (aK30df core-prim . pointer-set-c-long!) (aK30de core-prim . pointer-set-c-int!) (aK30dd core-prim . pointer-set-c-short!) (aK30dc core-prim . pointer-set-c-char!) (aK30db core-prim . pointer-ref-c-pointer) (aK30da core-prim . pointer-ref-c-double) (aK30d9 core-prim . pointer-ref-c-float) (aK30d8 core-prim . pointer-ref-c-unsigned-long-long) (aK30d7 core-prim . pointer-ref-c-signed-long-long) (aK30d6 core-prim . pointer-ref-c-unsigned-long) (aK30d5 core-prim . pointer-ref-c-signed-long) (aK30d4 core-prim . pointer-ref-c-unsigned-int) (aK30d3 core-prim . pointer-ref-c-signed-int) (aK30d2 core-prim . pointer-ref-c-unsigned-short) (aK30d1 core-prim . pointer-ref-c-signed-short) (aK30d0 core-prim . pointer-ref-c-unsigned-char) (aK30cf core-prim . pointer-ref-c-signed-char) (aK30ce core-prim . pointer->integer) (aK30cd core-prim . integer->pointer) (aK30cc core-prim . pointer?) (aK30cb core-prim . shared-errno) (aK30ca core-prim . %ffi-free) (aK30c9 core-prim . %ffi-malloc) (aK30c8 core-prim . %ffi-supported?) (aK30c7 core-prim . %ffi-pointer->string) (aK30c6 core-prim . %ffi-call->string-or-zero) (aK30c5 core-prim . %ffi-call->double) (aK30c4 core-prim . %ffi-call->void*) (aK30c3 core-prim . %ffi-call->void) (aK30c2 core-prim . %ffi-call->char) (aK30c1 core-prim . %ffi-call->int) (aK30c0 core-prim . %ffi-lookup) (aK30bf core-prim . %ffi-open) (aK30be core-prim . %fork) (aK30bd core-prim . %pipe) (aK30bc core-prim . p) (aK30bb core-prim . open-output-string) (aK30ba core-prim . get-output-string) (aK30b9 core-prim . file-stat-ctime) (aK30b8 core-prim . file-stat-atime) (aK30b7 core-prim . file-stat-mtime) (aK30b6 core-prim . file-size-in-bytes) (aK30b5 core-prim . file-writable?) (aK30b4 core-prim . file-executable?) (aK30b3 core-prim . file-readable?) (aK30b2 core-prim . file-regular?) (aK30b1 core-prim . file-symbolic-link?) (aK30b0 core-prim . file-directory?) (aK30af core-prim . create-symbolic-link) (aK30ae core-prim . rename-file) (aK30ad core-prim . delete-directory) (aK30ac core-prim . create-directory) (aK30ab core-prim . create-mosh-cache-dir) (aK30aa core-prim . get-environment-variables) (aK30a9 core-prim . current-exception-handler) (aK30a8 core-prim . get-environment-variable) (aK30a7 core-prim . join-wraps) (aK30a6 core-prim . id->real-label) (aK30a5 core-prim . same-marks?) (aK30a4 core-prim . same-marks*?) (aK30a3 core-prim . get-timeofday) (aK30a2 core-prim . get-command-line) (aK30a1 core-prim . sys-display) (aK30a0 core-prim . whereis) (aK309f core-prim . register) (aK309e core-prim . vm-join!) (aK309d core-prim . vm-set-value!) (aK309c core-prim . vm?) (aK309b core-prim . main-vm?) (aK309a core-prim . vm-eval) (aK3099 core-prim . vm-self) (aK3098 core-prim . vm-start!) (aK3097 core-prim . make-vm) (aK3096 core-prim . mutex-try-lock!) (aK3095 core-prim . mutex-unlock!) (aK3094 core-prim . mutex-lock!) (aK3093 core-prim . mutex?) (aK3092 core-prim . make-mutex) (aK3091 core-prim . condition-variable-notify-all!) (aK3090 core-prim . condition-variable-notify!) (aK308f core-prim . condition-variable-wait!) (aK308e core-prim . make-condition-variable) (aK308d core-prim . mosh-executable-path) (aK308c core-prim . make-file-options) (aK308b core-prim . source-info) (aK308a core-prim . make-compiler-instruction) (aK3089 core-prim . make-instruction) (aK3088 core-prim . set-source-info!) (aK3087 core-prim . bignum?) (aK3086 core-prim . fast-equal?) (aK3085 core-prim . fasl-read) (aK3084 core-prim . fasl-write) (aK3083 core-prim . time-usage) (aK3082 core-prim . os-constant) (aK3081 core-prim . disasm) (aK59b core-prim . make-parameter) (aK3080 core-prim . socket-port) (aK307f core-prim . socket-shutdown) (aK307e core-prim . socket-close) (aK307d core-prim . socket-send) (aK307c core-prim . socket-recv!) (aK307b core-prim . socket-recv) (aK307a core-prim . make-server-socket) (aK3079 core-prim . make-client-socket) (aK3078 core-prim . socket-accept) (aK3077 core-prim . socket?) (aK3076 core-prim . string-upcase) (aK3075 core-prim . string-titlecase) (aK3074 core-prim . string-normalize-nfkd) (aK3073 core-prim . string-normalize-nfkc) (aK3072 core-prim . string-normalize-nfd) (aK3071 core-prim . string-normalize-nfc) (aK3070 core-prim . string-foldcase) (aK306f core-prim . string-downcase) (aK306e core-prim . string-ci>?) (aK306d core-prim . string-ci>=?) (aK306c core-prim . string-ci=?) (aK306b core-prim . string-ci<?) (aK306a core-prim . string-ci<=?) (aK3069 core-prim . char-whitespace?) (aK3068 core-prim . char-upper-case?) (aK3067 core-prim . char-title-case?) (aK3066 core-prim . char-numeric?) (aK3065 core-prim . char-lower-case?) (aK3064 core-prim . char-general-category) (aK3063 core-prim . char-upcase) (aK3062 core-prim . char-titlecase) (aK3061 core-prim . char-foldcase) (aK3060 core-prim . char-downcase) (aK305f core-prim . char-ci>?) (aK305e core-prim . char-ci>=?) (aK305d core-prim . char-ci=?) (aK305c core-prim . char-ci<?) (aK305b core-prim . char-ci<=?) (aK305a core-prim . char-alphabetic?) (aKba4 core-prim . make-variable-transformer) (aKe5b core-prim . identifier?) (aKe47 core-prim . generate-temporaries) (aKe49 core-prim . free-identifier=?) (aKe5f core-prim . syntax->datum) (aKe5d core-prim . datum->syntax) (aKe4b core-prim . bound-identifier=?) (aK3059 core-prim . record-type-descriptor?) (aK3058 core-prim . record-predicate) (aK3057 core-prim . record-mutator) (aK3056 core-prim . record-constructor) (aK3055 core-prim . record-accessor) (aK3054 core-prim . make-record-type-descriptor) (aK3053 core-prim . make-record-constructor-descriptor) (aK3052 core-prim . record?) (aK3051 core-prim . record-type-uid) (aK3050 core-prim . record-type-sealed?) (aK304f core-prim . record-type-parent) (aK304e core-prim . record-type-opaque?) (aK304d core-prim . record-type-name) (aK304c core-prim . record-type-generative?) (aK304b core-prim . record-type-field-names) (aK304a core-prim . record-rtd) (aK3049 core-prim . record-field-mutable?) (aK3048 core-prim . delete-file) (aK3047 core-prim . file-exists?) (aK3046 core-prim . vector-sort!) (aK3045 core-prim . vector-sort) (aK3044 core-prim . list-sort) (aK3043 core-prim . symbol-hash) (aK3042 core-prim . string-ci-hash) (aK3041 core-prim . string-hash) (aK3040 core-prim . equal-hash) (aK303f core-prim . hashtable-equivalence-function) (aK303e core-prim . make-hashtable) (aK303d core-prim . hashtable-hash-function) (aK303c core-prim . make-eqv-hashtable) (aK303b core-prim . make-eq-hashtable) (aK303a core-prim . hashtable?) (aK3039 core-prim . hashtable-update!) (aK3038 core-prim . hashtable-size) (aK3037 core-prim . hashtable-set!) (aK3036 core-prim . hashtable-ref) (aK3035 core-prim . hashtable-mutable?) (aK3034 core-prim . hashtable-keys) (aK3033 core-prim . hashtable-entries) (aK3032 core-prim . hashtable-delete!) (aK3031 core-prim . hashtable-copy) (aK3030 core-prim . hashtable-contains?) (aK302f core-prim . hashtable-clear!) (aK302e core-prim . call-with-output-file) (aK302d core-prim . call-with-input-file) (aK302c core-prim . write-char) (aK302b core-prim . write) (aK302a core-prim . with-output-to-file) (aK3029 core-prim . with-input-from-file) (aK3028 core-prim . read-char) (aK3027 core-prim . read) (aK3026 core-prim . peek-char) (aK3025 core-prim . open-output-file) (aK3024 core-prim . open-input-file) (aK3023 core-prim . newline) (aK3022 core-prim . display) (aK3021 core-prim . close-output-port) (aK3020 core-prim . close-input-port) (aK301f core-prim . eof-object?) (aK301e core-prim . eof-object) (aK301d core-prim . current-error-port) (aK301c core-prim . current-output-port) (aK301b core-prim . current-input-port) (aK301a core-prim . output-port?) (aK3019 core-prim . input-port?) (aK3018 core-prim . utf-8-codec) (aK3017 core-prim . utf-16-codec) (aK3016 core-prim . transcoder-error-handling-mode) (aK3015 core-prim . transcoder-eol-style) (aK3014 core-prim . transcoder-codec) (aK3013 core-prim . transcoded-port) (aK3012 core-prim . textual-port?) (aK3011 core-prim . string->bytevector) (aK3010 core-prim . standard-output-port) (aK300f core-prim . standard-input-port) (aK300e core-prim . standard-error-port) (aK300d core-prim . set-port-position!) (aK300c core-prim . put-u8) (aK300b core-prim . put-string) (aK300a core-prim . put-datum) (aK3009 core-prim . put-char) (aK3008 core-prim . put-bytevector) (aK3007 core-prim . port?) (aK3006 core-prim . port-transcoder) (aK3005 core-prim . port-position) (aK3004 core-prim . port-has-set-port-position!?) (aK3003 core-prim . port-has-port-position?) (aK3002 core-prim . port-eof?) (aK3001 core-prim . output-port-buffer-mode) (aK3000 core-prim . open-string-output-port) (aK2fff core-prim . open-string-input-port) (aK2ffe core-prim . open-file-output-port) (aK2ffd core-prim . open-file-input/output-port) (aK2ffc core-prim . open-file-input-port) (aK2ffb core-prim . open-bytevector-output-port) (aK2ffa core-prim . open-bytevector-input-port) (aK2ff9 core-prim . native-transcoder) (aK2ff8 core-prim . native-eol-style) (aK2ff7 core-prim . make-transcoder) (aK2ff6 core-prim . latin-1-codec) (aK2a81 core-prim . make-i/o-write-error) (aK2a6c core-prim . make-i/o-read-error) (aK2b22 core-prim . make-i/o-port-error) (aK2a98 core-prim . make-i/o-invalid-position-error) (aK2ab3 core-prim . make-i/o-filename-error) (aK2acc core-prim . make-i/o-file-protection-error) (aK2ae1 core-prim . make-i/o-file-is-read-only-error) (aK2b0b core-prim . make-i/o-file-does-not-exist-error) (aK2af6 core-prim . make-i/o-file-already-exists-error) (aK2a57 core-prim . make-i/o-error) (aK2b52 core-prim . make-i/o-encoding-error) (aK2b3b core-prim . make-i/o-decoding-error) (aK2ff5 core-prim . make-custom-textual-output-port) (aK2ff4 core-prim . make-custom-textual-input/output-port) (aK2ff3 core-prim . make-custom-textual-input-port) (aK2ff2 core-prim . make-custom-binary-output-port) (aK2ff1 core-prim . make-custom-binary-input/output-port) (aK2ff0 core-prim . make-custom-binary-input-port) (aK2fef core-prim . make-bytevector) (aK2fee core-prim . lookahead-u8) (aK2fed core-prim . lookahead-char) (aK2a83 core-prim . i/o-write-error?) (aK2a6e core-prim . i/o-read-error?) (aK2b26 core-prim . i/o-port-error?) (aK2a9c core-prim . i/o-invalid-position-error?) (aK2ab7 core-prim . i/o-filename-error?) (aK2ace core-prim . i/o-file-protection-error?) (aK2ae3 core-prim . i/o-file-is-read-only-error?) (aK2b0d core-prim . i/o-file-does-not-exist-error?) (aK2af8 core-prim . i/o-file-already-exists-error?) (aK2a59 core-prim . i/o-error?) (aK2a9e core-prim . i/o-error-position) (aK2b28 core-prim . i/o-error-port) (aK2ab9 core-prim . i/o-error-filename) (aK2b56 core-prim . i/o-encoding-error?) (aK2b58 core-prim . i/o-encoding-error-char) (aK2b3d core-prim . i/o-decoding-error?) (aK2fec core-prim . get-u8) (aK2feb core-prim . get-string-n!) (aK2fea core-prim . get-string-n) (aK2fe9 core-prim . get-string-all) (aK2fe8 core-prim . get-line) (aK2fe7 core-prim . get-datum) (aK2fe6 core-prim . get-char) (aK2fe5 core-prim . get-bytevector-some) (aK2fe4 core-prim . get-bytevector-n!) (aK2fe3 core-prim . get-bytevector-n) (aK2fe2 core-prim . get-bytevector-all) (aK2fe1 core-prim . flush-output-port) (aK2fe0 core-prim . close-port) (aKe35 core-prim . scheme-report-environment) (aK2fdf core-prim . quotient) (aKe33 core-prim . null-environment) (aK2fde core-prim . remainder) (aK2fdd core-prim . modulo) (aK2fdc core-prim . inexact->exact) (aK2fdb core-prim . force) (aK2fda core-prim . exact->inexact) (aK2fd9 core-prim . make-promise) (aK2fd8 core-prim . exit) (aK2c91 core-prim . command-line) (aK2fd7 core-prim . string-fill!) (aK2fd6 core-prim . string-set!) (aK2fd5 core-prim . set-cdr!) (aK2fd4 core-prim . set-car!) (aK2fd3 core-prim . remove) (aK2fd2 core-prim . remv) (aK2fd1 core-prim . remp) (aK2fd0 core-prim . remq) (aK2fcf core-prim . partition) (aK2fce core-prim . memv) (aK2fcd core-prim . memq) (aK2fcc core-prim . memp) (aK2fcb core-prim . member) (aK2fca core-prim . exists) (aK2fc9 core-prim . for-all) (aK2fc8 core-prim . fold-right) (aK2fc7 core-prim . fold-left) (aK2fc6 core-prim . find) (aK2fc5 core-prim . filter) (aK2fc4 core-prim . cons*) (aK2fc3 core-prim . assv) (aK2fc2 core-prim . assq) (aK2fc1 core-prim . assp) (aK2fc0 core-prim . assoc) (aK2fbf core-prim . call-with-string-output-port) (aK2fbe core-prim . call-with-port) (aK2fbd core-prim . call-with-bytevector-output-port) (aK2fbc core-prim . bytevector->string) (aK2fbb core-prim . buffer-mode?) (aK2fba core-prim . binary-port?) (aK2fb9 core-prim . with-exception-handler) (aK2fb8 core-prim . raise-continuable) (aK2fb7 core-prim . raise) (aKe39 core-prim . eval) (aKe31 core-prim . environment) (aK2fb6 core-prim . make-enumeration) (aK2fb5 core-prim . enum-set=?) (aK2fb4 core-prim . enum-set-universe) (aK2fb3 core-prim . enum-set-union) (aK2fb2 core-prim . enum-set-subset?) (aK2fb1 core-prim . enum-set-projection) (aK2fb0 core-prim . enum-set-member?) (aK2faf core-prim . enum-set-intersection) (aK2fae core-prim . enum-set-indexer) (aK2fad core-prim . enum-set-difference) (aK2fac core-prim . enum-set-constructor) (aK2fab core-prim . enum-set-complement) (aK2faa core-prim . enum-set->list) (aK29cd core-prim . who-condition?) (aK2945 core-prim . warning?) (aK2984 core-prim . violation?) (aK2a44 core-prim . undefined-violation?) (aK2a2b core-prim . syntax-violation?) (aK2a2f core-prim . syntax-violation-subform) (aK2a2d core-prim . syntax-violation-form) (aKe59 core-prim . syntax-violation) (aK2fa9 core-prim . simple-conditions) (aK295a core-prim . serious-condition?) (aK29e4 core-prim . non-continuable-violation?) (aK292e core-prim . message-condition?) (aK29c9 core-prim . make-who-condition) (aK2943 core-prim . make-warning) (aK2982 core-prim . make-violation) (aK2a42 core-prim . make-undefined-violation) (aK2a25 core-prim . make-syntax-violation) (aK2958 core-prim . make-serious-condition) (aK29e2 core-prim . make-non-continuable-violation) (aK292a core-prim . make-message-condition) (aK2a0c core-prim . make-lexical-violation) (aK29ae core-prim . make-irritants-condition) (aK29f7 core-prim . make-implementation-restriction-violation) (aK296d core-prim . make-error) (aK2997 core-prim . make-assertion-violation) (aK2a0e core-prim . lexical-violation?) (aK29b2 core-prim . irritants-condition?) (aK29f9 core-prim . implementation-restriction-violation?) (aK296f core-prim . error?) (aK29cf core-prim . condition-who) (aK2fa8 core-prim . condition-predicate) (aK2930 core-prim . condition-message) (aK29b4 core-prim . condition-irritants) (aK2fa7 core-prim . condition-accessor) (aK2fa6 core-prim . condition) (aK2999 core-prim . assertion-violation?) (aK2fa5 core-prim . condition?) (aK2fa4 core-prim . utf32->string) (aK2fa3 core-prim . utf16->string) (aK2fa2 core-prim . utf8->string) (aK2fa1 core-prim . uint-list->bytevector) (aK2fa0 core-prim . u8-list->bytevector) (aK2f9f core-prim . string->utf8) (aK2f9e core-prim . string->utf32) (aK2f9d core-prim . string->utf16) (aK2f9c core-prim . sint-list->bytevector) (aK2f9b core-prim . native-endianness) (aK2f9a core-prim . bytevector?) (aK2f99 core-prim . bytevector=?) (aK2f98 core-prim . bytevector-uint-set!) (aK2f97 core-prim . bytevector-uint-ref) (aK2f96 core-prim . bytevector-u8-set!) (aK2f95 core-prim . bytevector-u8-ref) (aK2f94 core-prim . bytevector-u64-set!) (aK2f93 core-prim . bytevector-u64-ref) (aK2f92 core-prim . bytevector-u64-native-set!) (aK2f91 core-prim . bytevector-u64-native-ref) (aK2f90 core-prim . bytevector-u32-set!) (aK2f8f core-prim . bytevector-u32-ref) (aK2f8e core-prim . bytevector-u32-native-set!) (aK2f8d core-prim . bytevector-u32-native-ref) (aK2f8c core-prim . bytevector-u16-set!) (aK2f8b core-prim . bytevector-u16-ref) (aK2f8a core-prim . bytevector-u16-native-set!) (aK2f89 core-prim . bytevector-u16-native-ref) (aK2f88 core-prim . bytevector-sint-set!) (aK2f87 core-prim . bytevector-sint-ref) (aK2f86 core-prim . bytevector-s8-set!) (aK2f85 core-prim . bytevector-s8-ref) (aK2f84 core-prim . bytevector-s64-set!) (aK2f83 core-prim . bytevector-s64-ref) (aK2f82 core-prim . bytevector-s64-native-set!) (aK2f81 core-prim . bytevector-s64-native-ref) (aK2f80 core-prim . bytevector-s32-set!) (aK2f7f core-prim . bytevector-s32-ref) (aK2f7e core-prim . bytevector-s32-native-set!) (aK2f7d core-prim . bytevector-s32-native-ref) (aK2f7c core-prim . bytevector-s16-set!) (aK2f7b core-prim . bytevector-s16-ref) (aK2f7a core-prim . bytevector-s16-native-set!) (aK2f79 core-prim . bytevector-s16-native-ref) (aK2f78 core-prim . bytevector-length) (aK2f77 core-prim . bytevector-ieee-single-ref) (aK2f76 core-prim . bytevector-ieee-single-set!) (aK2f75 core-prim . bytevector-ieee-single-native-set!) (aK2f74 core-prim . bytevector-ieee-single-native-ref) (aK2f73 core-prim . bytevector-ieee-double-set!) (aK2f72 core-prim . bytevector-ieee-double-ref) (aK2f71 core-prim . bytevector-ieee-double-native-set!) (aK2f70 core-prim . bytevector-ieee-double-native-ref) (aK2f6f core-prim . bytevector-fill!) (aK2f6e core-prim . bytevector-copy!) (aK2f6d core-prim . bytevector-copy) (aK2f6c core-prim . bytevector->uint-list) (aK2f6b core-prim . bytevector->u8-list) (aK2f6a core-prim . bytevector->sint-list) (aK2b82 core-prim . no-nans-violation?) (aK2b6d core-prim . no-infinities-violation?) (aK2b80 core-prim . make-no-nans-violation) (aK2b6b core-prim . make-no-infinities-violation) (aK2f69 core-prim . real->flonum) (aK2f68 core-prim . flzero?) (aK2f67 core-prim . fltruncate) (aK2f66 core-prim . fltan) (aK2f65 core-prim . flsqrt) (aK2f64 core-prim . flsin) (aK2f63 core-prim . flround) (aK2f62 core-prim . flpositive?) (aK2f61 core-prim . flonum?) (aK2f60 core-prim . flodd?) (aK2f5f core-prim . flnumerator) (aK2f5e core-prim . flnegative?) (aK2f5d core-prim . flnan?) (aK2f5c core-prim . flmod0) (aK2f5b core-prim . flmod) (aK2f5a core-prim . flmin) (aK2f59 core-prim . flmax) (aK2f58 core-prim . fllog) (aK2f57 core-prim . flinteger?) (aK2f56 core-prim . flinfinite?) (aK2f55 core-prim . flfloor) (aK2f54 core-prim . flfinite?) (aK2f53 core-prim . flexpt) (aK2f52 core-prim . flexp) (aK2f51 core-prim . fleven?) (aK2f50 core-prim . fldiv0-and-mod0) (aK2f4f core-prim . fldiv0) (aK2f4e core-prim . fldiv-and-mod) (aK2f4d core-prim . fldiv) (aK2f4c core-prim . fldenominator) (aK2f4b core-prim . flcos) (aK2f4a core-prim . flceiling) (aK2f49 core-prim . flatan) (aK2f48 core-prim . flasin) (aK2f47 core-prim . flacos) (aK2f46 core-prim . flabs) (aK2f45 core-prim . fl>?) (aK2f44 core-prim . fl>=?) (aK2f43 core-prim . fl=?) (aK2f42 core-prim . fl<?) (aK2f41 core-prim . fl<=?) (aK2f40 core-prim . fl/) (aK2f3f core-prim . fl-) (aK2f3e core-prim . fl+) (aK2f3d core-prim . fl*) (aK2f3c core-prim . fixnum->flonum) (aK2f3b core-prim . fxzero?) (aK2f3a core-prim . fxxor) (aK2f39 core-prim . fxrotate-bit-field) (aK2f38 core-prim . fxreverse-bit-field) (aK2f37 core-prim . fxpositive?) (aK2f36 core-prim . fxodd?) (aK2f35 core-prim . fxnot) (aK2f34 core-prim . fxnegative?) (aK2f33 core-prim . fxmod0) (aK2f32 core-prim . fxmod) (aK2f31 core-prim . fxmin) (aK2f30 core-prim . fxmax) (aK2f2f core-prim . fxlength) (aK2f2e core-prim . fxior) (aK2f2d core-prim . fxif) (aK2f2c core-prim . fxfirst-bit-set) (aK2f2b core-prim . fxeven?) (aK2f2a core-prim . fxdiv0-and-mod0) (aK2f29 core-prim . fxdiv0) (aK2f28 core-prim . fxdiv-and-mod) (aK2f27 core-prim . fxdiv) (aK2f26 core-prim . fxcopy-bit-field) (aK2f25 core-prim . fxcopy-bit) (aK2f24 core-prim . fxbit-set?) (aK2f23 core-prim . fxbit-field) (aK2f22 core-prim . fxbit-count) (aK2f21 core-prim . fxarithmetic-shift-right) (aK2f20 core-prim . fxarithmetic-shift-left) (aK2f1f core-prim . fxarithmetic-shift) (aK2f1e core-prim . fxand) (aK2f1d core-prim . fx>?) (aK2f1c core-prim . fx>=?) (aK2f1b core-prim . fx=?) (aK2f1a core-prim . fx<?) (aK2f19 core-prim . fx<=?) (aK2f18 core-prim . fx-/carry) (aK2f17 core-prim . fx-) (aK2f16 core-prim . fx+/carry) (aK2f15 core-prim . fx+) (aK2f14 core-prim . fx*/carry) (aK2f13 core-prim . fx*) (aK2f12 core-prim . greatest-fixnum) (aK2f11 core-prim . least-fixnum) (aK2f10 core-prim . fixnum-width) (aK2f0f core-prim . fixnum?) (aK2f0e core-prim . bitwise-rotate-bit-field) (aK2f0d core-prim . bitwise-reverse-bit-field) (aK2f0c core-prim . bitwise-length) (aK2f0b core-prim . bitwise-if) (aK2f0a core-prim . bitwise-first-bit-set) (aK2f09 core-prim . bitwise-copy-bit-field) (aK2f08 core-prim . bitwise-copy-bit) (aK2f07 core-prim . bitwise-bit-set?) (aK2f06 core-prim . bitwise-bit-field) (aK2f05 core-prim . bitwise-bit-count) (aK2f04 core-prim . bitwise-xor) (aK2f03 core-prim . bitwise-ior) (aK2f02 core-prim . bitwise-and) (aK2f01 core-prim . bitwise-not) (aK2f00 core-prim . bitwise-arithmetic-shift-right) (aK2eff core-prim . bitwise-arithmetic-shift-left) (aK2efe core-prim . bitwise-arithmetic-shift) (aK2efd core-prim . zero?) (aK2efc core-prim . vector?) (aK2efb core-prim . vector-set!) (aK2efa core-prim . vector-ref) (aK2ef9 core-prim . vector-map) (aK2ef8 core-prim . vector-length) (aK2ef7 core-prim . vector-for-each) (aK2ef6 core-prim . vector-fill!) (aK2ef5 core-prim . vector->list) (aK2ef4 core-prim . vector) (aK2ef3 core-prim . values) (aK2ef2 core-prim . truncate) (aK2ef1 core-prim . tan) (aK2ef0 core-prim . symbol?) (aK2eef core-prim . symbol=?) (aK2eee core-prim . symbol->string) (aK2eed core-prim . substring) (aK2eec core-prim . string?) (aK2eeb core-prim . string>?) (aK2eea core-prim . string>=?) (aK2ee9 core-prim . string=?) (aK2ee8 core-prim . string<?) (aK2ee7 core-prim . string<=?) (aK2ee6 core-prim . string-ref) (aK2ee5 core-prim . string-length) (aK2ee4 core-prim . string-for-each) (aK2ee3 core-prim . string-copy) (aK2ee2 core-prim . string-append) (aK2ee1 core-prim . string->symbol) (aK2ee0 core-prim . string->number) (aK2edf core-prim . string->list) (aK2ede core-prim . string) (aK2edd core-prim . sqrt) (aK2edc core-prim . sin) (aK2edb core-prim . round) (aK2eda core-prim . reverse) (aK2ed9 core-prim . real?) (aK2ed8 core-prim . real-valued?) (aK2ed7 core-prim . real-part) (aK2ed6 core-prim . rationalize) (aK2ed5 core-prim . rational?) (aK2ed4 core-prim . rational-valued?) (aK2ed3 core-prim . procedure?) (aK2ed2 core-prim . positive?) (aK2ed1 core-prim . pair?) (aK2ed0 core-prim . odd?) (aK2ecf core-prim . numerator) (aK2ece core-prim . number?) (aK2ecd core-prim . number->string) (aK2ecc core-prim . null?) (aK2ecb core-prim . not) (aK2eca core-prim . negative?) (aK2ec9 core-prim . nan?) (aK2ec8 core-prim . min) (aK2ec7 core-prim . max) (aK2ec6 core-prim . map) (aK2ec5 core-prim . make-vector) (aK2ec4 core-prim . make-string) (aK2ec3 core-prim . make-rectangular) (aK2ec2 core-prim . make-polar) (aK2ec1 core-prim . magnitude) (aK2ec0 core-prim . log) (aK2ebf core-prim . list?) (aK2ebe core-prim . list-tail) (aK2ebd core-prim . list-ref) (aK2ebc core-prim . list->vector) (aK2ebb core-prim . list->string) (aK2eba core-prim . list) (aK2eb9 core-prim . length) (aK2eb8 core-prim . lcm) (aK2eb7 core-prim . integer?) (aK2eb6 core-prim . integer-valued?) (aK2eb5 core-prim . integer->char) (aK2eb4 core-prim . infinite?) (aK2eb3 core-prim . inexact?) (aK2eb2 core-prim . inexact) (aK2eb1 core-prim . imag-part) (aK2eb0 core-prim . gcd) (aK2eaf core-prim . for-each) (aK2eae core-prim . floor) (aK2ead core-prim . finite?) (aK2eac core-prim . expt) (aK2eab core-prim . exp) (aK2eaa core-prim . exact?) (aK2ea9 core-prim . exact-integer-sqrt) (aK2ea8 core-prim . exact) (aK2ea7 core-prim . even?) (aK2ea6 core-prim . error) (aK2ea5 core-prim . eqv?) (aK2ea4 core-prim . equal?) (aK2ea3 core-prim . eq?) (aK2ea2 core-prim . dynamic-wind) (aK2ea1 core-prim . div0-and-mod0) (aK2ea0 core-prim . mod0) (aK2e9f core-prim . div0) (aK2e9e core-prim . div-and-mod) (aK2e9d core-prim . mod) (aK2e9c core-prim . div) (aK2e9b core-prim . denominator) (aK2e9a core-prim . cos) (aK2e99 core-prim . cons) (aK2e98 core-prim . complex?) (aK2e97 core-prim . char?) (aK2e96 core-prim . char>?) (aK2e95 core-prim . char>=?) (aK2e94 core-prim . char=?) (aK2e93 core-prim . char<?) (aK2e92 core-prim . char<=?) (aK2e91 core-prim . char->integer) (aK2e90 core-prim . ceiling) (aK2e8f core-prim . call-with-values) (aK2e8e core-prim . call/cc) (aK2e8d core-prim . call-with-current-continuation) (aK2e8c core-prim . cddddr) (aK2e8b core-prim . cdddar) (aK2e8a core-prim . cddadr) (aK2e89 core-prim . cddaar) (aK2e88 core-prim . cdaddr) (aK2e87 core-prim . cdadar) (aK2e86 core-prim . cdaadr) (aK2e85 core-prim . cdaaar) (aK2e84 core-prim . cadddr) (aK2e83 core-prim . caddar) (aK2e82 core-prim . cadadr) (aK2e81 core-prim . cadaar) (aK2e80 core-prim . caaddr) (aK2e7f core-prim . caadar) (aK2e7e core-prim . caaadr) (aK2e7d core-prim . caaaar) (aK2e7c core-prim . cdddr) (aK2e7b core-prim . cddar) (aK2e7a core-prim . cdadr) (aK2e79 core-prim . cdaar) (aK2e78 core-prim . caddr) (aK2e77 core-prim . cadar) (aK2e76 core-prim . caadr) (aK2e75 core-prim . caaar) (aK2e74 core-prim . cddr) (aK2e73 core-prim . cdar) (aK2e72 core-prim . cadr) (aK2e71 core-prim . caar) (aK2e70 core-prim . cdr) (aK2e6f core-prim . car) (aK2e6e core-prim . boolean?) (aK2e6d core-prim . boolean=?) (aK2e6c core-prim . atan) (aK2e6b core-prim . assertion-violation) (aKe53 core-prim . assertion-error) (aK2e6a core-prim . asin) (aK2e69 core-prim . apply) (aK2e68 core-prim . append) (aK2e67 core-prim . angle) (aK2e66 core-prim . acos) (aK2e65 core-prim . abs) (aK2e64 core-prim . /) (aK2e63 core-prim . *) (aK2e62 core-prim . -) (aK2e61 core-prim . +) (aK2e60 core-prim . >=) (aK2e5f core-prim . >) (aK2e5e core-prim . =) (aK2e5d core-prim . <=) (aK2e5c core-prim . <) (aK2e5b core-prim . library) (aK2e5a $core-rtd &no-nans-rtd &no-nans-rcd) (aK2e59 $core-rtd &no-infinities-rtd &no-infinities-rcd) (aK2e58 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (aK2e57 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (aK2e56 $core-rtd &i/o-port-rtd &i/o-port-rcd) (aK2e55 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (aK2e54 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (aK2e53 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (aK2e52 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (aK2e51 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (aK2e50 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (aK2e4f $core-rtd &i/o-write-rtd &i/o-write-rcd) (aK2e4e $core-rtd &i/o-read-rtd &i/o-read-rcd) (aK2e4d $core-rtd &i/o-rtd &i/o-rcd) (aK2e4c $core-rtd &undefined-rtd &undefined-rcd) (aK2e4b $core-rtd &syntax-rtd &syntax-rcd) (aK2e4a $core-rtd &lexical-rtd &lexical-rcd) (aK2e49 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (aK2e48 $core-rtd &non-continuable-rtd &non-continuable-rcd) (aK2e47 $core-rtd &who-rtd &who-rcd) (aK2e46 $core-rtd &irritants-rtd &irritants-rcd) (aK2e45 $core-rtd &assertion-rtd &assertion-rcd) (aK2e44 $core-rtd &violation-rtd &violation-rcd) (aK2e43 $core-rtd &error-rtd &error-rcd) (aK2e42 $core-rtd &serious-rtd &serious-rcd) (aK2e41 $core-rtd &warning-rtd &warning-rcd) (aK2e40 $core-rtd &message-rtd &message-rcd) (aK2e3f $core-rtd &condition-rtd &condition-rcd) (aK2e3e macro . define-condition-type) (aK2e3d macro . define-enumeration) (aK2e3c macro . define-record-type) (aK2e3b macro . parent-rtd) (aK2e3a macro . nongenerative) (aK2e39 macro . opaque) (aK2e38 macro . sealed) (aK2e37 macro . protocol) (aK2e36 macro . parent) (aK2e35 macro . immutable) (aK2e34 macro . mutable) (aK2e33 macro . fields) (aK2e32 macro . error-handling-mode) (aK2e31 macro . file-options) (aK2e30 macro . buffer-mode) (aK2e2f macro . eol-style) (aK2e2e macro . guard) (aK2e2d macro . trace-define) (aK2e2c macro . trace-lambda) (aK2e2b macro . unsyntax-splicing) (aK2e2a macro . unsyntax) (aK2e29 macro . unquote-splicing) (aK2e28 macro . unquote) (aK2e27 macro . _) (aK2e26 macro . else) (aK2e25 macro . =>) (aK2e24 macro . ...) (aK2e23 macro . assert) (aK2e22 macro . endianness) (aK2e21 macro . delay) (aK2e20 macro . time) (aK2e1f macro . do) (aK2e1e macro . cond) (aK2e1d macro . let*) (aK2e1c macro . let*-values) (aK2e1b macro . let-values) (aK2e1a macro . identifier-syntax) (aK2e19 macro . with-syntax) (aK2e18 macro . quasisyntax) (aK2e17 macro . quasiquote) (aK2e16 macro . syntax-rules) (aK2e15 macro . include) (aK2e14 macro . define-struct) (aK2e13 core-macro . record-constructor-descriptor) (aK2e12 core-macro . record-type-descriptor) (aK2e11 macro . case) (aK2e10 macro . parameterize) (aK2e0f macro . unless) (aK2e0e macro . when) (aK2e0d core-macro . or) (aK2e0c core-macro . and) (aK2e0b core-macro . if) (aK2e0a core-macro . let) (aK2e09 core-macro . letrec*) (aK2e08 core-macro . letrec) (aK2e07 core-macro . type-descriptor) (aK2e06 core-macro . case-lambda) (aK2e05 core-macro . lambda) (aK2e04 core-macro . syntax) (aK2e03 core-macro . syntax-case) (aK2e02 core-macro . quote) (aK2e01 core-macro . foreign-call) (aK2e00 letrec-syntax) (aK2dff let-syntax) (aK2dfe set!) (aK2dfd import) (aK2dfc begin) (aK2dfb module) (aK2dfa define-syntax) (aK2df9 define)) values values '#f '#f '#f '#f) (aK987@aK7d3@install-library 'aK3141 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . aK3120) (eval-core . aK311f) (set-symbol-value! . aK311e) (symbol-value . aK311d) (gensym . aK311c) (void . aK311b)) '() values values '#f '#f '#f '#f) (aK987@aK7d3@install-library 'aK3142 '(mosh) '() '() '() '() '((set-symbol-value! . aK311e) (symbol-value . aK311d) (regexp? . aK3119) (read-line . aK3118) (ungensym . aK3116) (alist->eq-hash-table . aK3115) (assoc-ref . aK3114) (print . aK3113) (format . aK3112) (host-os . aK3111) (library-path . aK7b2) (standard-library-path . aK3110) (file-newer? . aK310f) (stat-mtime . aK310e) (digit->integer . aK310a) (call-with-string-input-port . aK3109) (call-with-string-io . aK3108) (string-split . aK3107) (bytevector-for-each . aK3106) (string->regexp . aK3105) (rxmatch . aK3104) (regexp-replace-all . aK3103) (hashtable-for-each . aK3102) (set-current-directory! . aK30fd) (expand-path . aK30fc) (current-directory . aK30fb) (p . aK30bc) (get-timeofday . aK30a3) (get-command-line . aK30a2) (sys-display . aK30a1) (whereis . aK30a0) (register . aK309f) (vm-join! . aK309e) (vm-set-value! . aK309d) (vm? . aK309c) (main-vm? . aK309b) (vm-eval . aK309a) (vm-self . aK3099) (vm-start! . aK3098) (make-vm . aK3097) (mutex-try-lock! . aK3096) (mutex-unlock! . aK3095) (mutex-lock! . aK3094) (mutex? . aK3093) (make-mutex . aK3092) (condition-variable-notify-all! . aK3091) (condition-variable-notify! . aK3090) (condition-variable-wait! . aK308f) (make-condition-variable . aK308e) (mosh-executable-path . aK308d) (make-file-options . aK308c) (source-info . aK308b) (make-compiler-instruction . aK308a) (make-instruction . aK3089) (set-source-info! . aK3088) (bignum? . aK3087) (fast-equal? . aK3086) (fasl-read . aK3085) (fasl-write . aK3084) (time-usage . aK3083) (os-constant . aK3082) (time . aK2e20) (include . aK2e15)) '() values values '#f '#f '#f '#f) (aK987@aK7d3@install-library 'aK3143 '(system) '() '() '() '() '((gensym-prefix-set! . aK3117) (write-to-file . aK310d) (file->list . aK310c) (file->string . aK310b) (mosh-cache-dir . aK59d) (call-process . aK3101) (local-tz-offset . aK3100) (microseconds . aK30ff) (directory-list . aK30fe) (expand-path . aK30fc) (%spawn . aK30fa) (%waitpid . aK30f9) (simple-struct-name . aK30f8) (simple-struct-set! . aK30f7) (simple-struct-ref . aK30f6) (make-simple-struct . aK30f5) (simple-struct? . aK30f4) (pointer-ref-c-int64 . aK30f3) (pointer-ref-c-int32 . aK30f2) (pointer-ref-c-int16 . aK30f1) (pointer-ref-c-int8 . aK30f0) (pointer-ref-c-uint64 . aK30ef) (pointer-ref-c-uint32 . aK30ee) (pointer-ref-c-uint16 . aK30ed) (pointer-ref-c-uint8 . aK30ec) (pointer-set-c-uint64! . aK30eb) (pointer-set-c-uint32! . aK30ea) (pointer-set-c-uint16! . aK30e9) (pointer-set-c-uint8! . aK30e8) (pointer-set-c-int64! . aK30e7) (pointer-set-c-int32! . aK30e6) (pointer-set-c-int16! . aK30e5) (pointer-set-c-int8! . aK30e4) (pointer-set-c-pointer! . aK30e3) (pointer-set-c-double! . aK30e2) (pointer-set-c-float! . aK30e1) (pointer-set-c-long-long! . aK30e0) (pointer-set-c-long! . aK30df) (pointer-set-c-int! . aK30de) (pointer-set-c-short! . aK30dd) (pointer-set-c-char! . aK30dc) (pointer-ref-c-pointer . aK30db) (pointer-ref-c-double . aK30da) (pointer-ref-c-float . aK30d9) (pointer-ref-c-unsigned-long-long . aK30d8) (pointer-ref-c-signed-long-long . aK30d7) (pointer-ref-c-unsigned-long . aK30d6) (pointer-ref-c-signed-long . aK30d5) (pointer-ref-c-unsigned-int . aK30d4) (pointer-ref-c-signed-int . aK30d3) (pointer-ref-c-unsigned-short . aK30d2) (pointer-ref-c-signed-short . aK30d1) (pointer-ref-c-unsigned-char . aK30d0) (pointer-ref-c-signed-char . aK30cf) (pointer->integer . aK30ce) (integer->pointer . aK30cd) (pointer? . aK30cc) (shared-errno . aK30cb) (%ffi-free . aK30ca) (%ffi-malloc . aK30c9) (%ffi-supported? . aK30c8) (%ffi-pointer->string . aK30c7) (%ffi-call->string-or-zero . aK30c6) (%ffi-call->double . aK30c5) (%ffi-call->void* . aK30c4) (%ffi-call->void . aK30c3) (%ffi-call->char . aK30c2) (%ffi-call->int . aK30c1) (%ffi-lookup . aK30c0) (%ffi-open . aK30bf) (%fork . aK30be) (%pipe . aK30bd) (open-output-string . aK30bb) (get-output-string . aK30ba) (file-stat-ctime . aK30b9) (file-stat-atime . aK30b8) (file-stat-mtime . aK30b7) (file-size-in-bytes . aK30b6) (file-writable? . aK30b5) (file-executable? . aK30b4) (file-readable? . aK30b3) (file-regular? . aK30b2) (file-symbolic-link? . aK30b1) (file-directory? . aK30b0) (create-symbolic-link . aK30af) (rename-file . aK30ae) (delete-directory . aK30ad) (create-directory . aK30ac) (create-mosh-cache-dir . aK30ab) (get-environment-variables . aK30aa) (current-exception-handler . aK30a9) (get-environment-variable . aK30a8) (join-wraps . aK30a7) (id->real-label . aK30a6) (same-marks? . aK30a5) (same-marks*? . aK30a4) (disasm . aK3081) (make-parameter . aK59b) (socket-port . aK3080) (socket-shutdown . aK307f) (socket-close . aK307e) (socket-send . aK307d) (socket-recv! . aK307c) (socket-recv . aK307b) (make-server-socket . aK307a) (make-client-socket . aK3079) (socket-accept . aK3078) (socket? . aK3077) (parameterize . aK2e10)) '() values values '#f '#f '#f '#f)))
(begin (set! aK2c7c@ref (unspecified)) (set! aK2c7e@x* (unspecified)) (set! aK2c80@add-library-path! (unspecified)) (set! aK2c82@parse-and-add-library-path (unspecified)) (set! aK2c84@for-each-with-index (unspecified)) (set! aK2c86@rpad (unspecified)) (set! aK2c88@condition-printer (unspecified)) (set! aK2c8a@record->field-alist (unspecified)) (set! aK2c8c@map-with-index (unspecified)) (set! aK2c8e@repl (unspecified)) (set! aK2c90@trace-printer (unspecified)) (set! aK2c92@command-line (unspecified)) (set! aK2c94@local-library-path (unspecified)) (set! aK2c96@load/args (unspecified)) (set! aK2c98@load (unspecified)) (set! aK2c9a@ironscheme-build (unspecified)) (set! aK2c9c@eval-top-level (unspecified)) (set! aK2c9e@compile-system-libraries (unspecified)) (set! aK2ca0@compile (unspecified)) (set! aK2ca2@compile->closure (unspecified)) (set! aK2ca4@pre-compile-r6rs-file (unspecified)) (set! aK2ca6@load-r6rs-top-level (unspecified)) (set! aK2ca8@load-r6rs-top-level-sexp (unspecified)) (set! aK2caa@prefix-inc (unspecified)) (set! aK2cac@prefix-inc! (unspecified)) (set! aK2c7c@ref (lambda (aK2ce7@rtd aK2ce8@i aK2ce9@x) (let ((aK2ced@val ((record-accessor aK2ce7@rtd aK2ce8@i) aK2ce9@x))) (if (symbol? aK2ced@val) (ungensym aK2ced@val) aK2ced@val)))) (set! aK2ddf@aK2c7c@ref aK2c7c@ref) (set! aK2c7e@x* '()) (set! aK2de0@aK2c7e@x* aK2c7e@x*) (set! aK2c80@add-library-path! (lambda (aK2cef@path) (aK977@aK7b3@library-path (append (aK977@aK7b3@library-path) (list aK2cef@path))))) (set! aK2de1@aK2c80@add-library-path! aK2c80@add-library-path!) (set! aK2c82@parse-and-add-library-path (lambda (aK2cf1@paths aK2cf2@message) (let ((aK2cf6@separator '#f)) (begin (set! aK2cf6@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((aK2cf7@t aK2cf1@paths)) (if aK2cf7@t ((lambda (aK2cf9@paths) (for-each (lambda (aK2cfb@path) (if (file-exists? aK2cfb@path) (aK2c80@add-library-path! (expand-path aK2cfb@path)) (format (current-error-port) aK2cf2@message aK2cfb@path))) (string-split aK2cf9@paths aK2cf6@separator))) aK2cf7@t) (void))))))) (set! aK2de2@aK2c82@parse-and-add-library-path aK2c82@parse-and-add-library-path) (set! aK2c84@for-each-with-index (lambda (aK2cfd@proc aK2cfe@lst) (letrec ((aK2d01@loop (lambda (aK2d03@i aK2d04@lst) (if (null? aK2d04@lst) (if '#f '#f (void)) (begin (aK2cfd@proc aK2d03@i (car aK2d04@lst)) (aK2d01@loop (+ aK2d03@i '1) (cdr aK2d04@lst))))))) (aK2d01@loop '1 aK2cfe@lst)))) (set! aK2de3@aK2c84@for-each-with-index aK2c84@for-each-with-index) (set! aK2c86@rpad (lambda (aK2d07@str aK2d08@pad aK2d09@n) (let ((aK2d0d@rest (- aK2d09@n (string-length (format '"~a" aK2d07@str))))) (let aK2d13@loop ((aK2d0f@rest aK2d0d@rest) (aK2d10@ret (format '"~a" aK2d07@str))) (if (<= aK2d0f@rest '0) aK2d10@ret (aK2d13@loop (- aK2d0f@rest '1) (string-append aK2d10@ret aK2d08@pad))))))) (set! aK2de4@aK2c86@rpad aK2c86@rpad) (set! aK2c88@condition-printer (lambda (aK2d15@e aK2d16@port) (let ((aK2d1a@max-condition-len '#f)) (begin (set! aK2d1a@max-condition-len (apply max (map (lambda (aK2d2b@c) (string-length (symbol->string (record-type-name (record-rtd aK2d2b@c))))) (simple-conditions aK2d15@e)))) (begin (display '" Condition components:\n" aK2d16@port) (aK2c84@for-each-with-index (lambda (aK2d1b@i aK2d1c@x) (let ((aK2d1f@rtd (record-rtd aK2d1c@x)) (aK2d20@fields-alist (aK2c8a@record->field-alist aK2d1c@x))) (begin (format aK2d16@port '" ~d. ~a" aK2d1b@i (aK2c86@rpad (symbol->string (record-type-name aK2d1f@rtd)) '" " aK2d1a@max-condition-len)) (if (null? aK2d20@fields-alist) (newline aK2d16@port) (void)) (let aK2d27@loop ((aK2d23@first '#t) (aK2d24@fields-alist aK2d20@fields-alist)) (if (null? aK2d24@fields-alist) '() (let ((aK2d29@field (car aK2d24@fields-alist))) (begin (if (not aK2d23@first) (display (aK2c86@rpad '"" '" " (+ '4 aK2d1a@max-condition-len)) aK2d16@port) (void)) (display '"       " aK2d16@port) (display (car aK2d29@field) aK2d16@port) (display '": " aK2d16@port) (write (cdr aK2d29@field) aK2d16@port) (newline aK2d16@port) (aK2d27@loop '#f (cdr aK2d24@fields-alist))))))))) (simple-conditions aK2d15@e))))))) (set! aK2de5@aK2c88@condition-printer aK2c88@condition-printer) (set! aK2c8a@record->field-alist (lambda (aK2d2d@r) (let ((aK2d30@ref '#f)) (begin (set! aK2d30@ref (lambda (aK2d3b@rtd aK2d3c@i aK2d3d@x) (let ((aK2d41@val ((record-accessor aK2d3b@rtd aK2d3c@i) aK2d3d@x))) (if (symbol? aK2d41@val) (ungensym aK2d41@val) aK2d41@val)))) (let aK2d35@loop ((aK2d31@ret '()) (aK2d32@rtd (record-rtd aK2d2d@r))) (if aK2d32@rtd (aK2d35@loop (append aK2d31@ret (aK2c8c@map-with-index (lambda (aK2d37@i aK2d38@field) (cons aK2d38@field (aK2d30@ref aK2d32@rtd aK2d37@i aK2d2d@r))) (vector->list (record-type-field-names aK2d32@rtd)))) (record-type-parent aK2d32@rtd)) aK2d31@ret)))))) (set! aK2de6@aK2c8a@record->field-alist aK2c8a@record->field-alist) (set! aK2c8c@map-with-index (lambda (aK2d43@proc aK2d44@lst) (let aK2d4d@loop ((aK2d47@i '0) (aK2d48@lst aK2d44@lst) (aK2d49@ret '())) (if (null? aK2d48@lst) (reverse aK2d49@ret) (aK2d4d@loop (+ aK2d47@i '1) (cdr aK2d48@lst) (cons (aK2d43@proc aK2d47@i (car aK2d48@lst)) aK2d49@ret)))))) (set! aK2de7@aK2c8c@map-with-index aK2c8c@map-with-index) (set! aK2c8e@repl (lambda aK2d4f@x (let ((aK2d52@rec '#f)) (begin (set! aK2d52@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (aK2d55@aK2d53) (lambda () (with-exception-handler (lambda (aK2d57@e) ((call/cc (lambda (aK2d59@aK2d54) (aK2d55@aK2d53 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? aK2d57@e) (aK2c88@condition-printer aK2d57@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" aK2d57@e))) (aK2d59@aK2d54 (lambda () (raise-continuable aK2d57@e)))))))))) (lambda () (let aK2d5f@loop ((aK2d5b@line (get-line (current-input-port))) (aK2d5c@accum '"")) (let ((aK2d62@parentheses-ok? '#f) (aK2d64@eval-string-print '#f)) (begin (set! aK2d62@parentheses-ok? (lambda (aK2d69@text) (let aK2d71@loop ((aK2d6b@chars (string->list aK2d69@text)) (aK2d6c@p0 '0) (aK2d6d@p1 '0)) (if (null? aK2d6b@chars) (= '0 aK2d6c@p0 aK2d6d@p1) (let ((aK2d73@t (car aK2d6b@chars))) (if (memv aK2d73@t '(#\()) (aK2d71@loop (cdr aK2d6b@chars) (+ aK2d6c@p0 '1) aK2d6d@p1) (if (memv aK2d73@t '(#\))) (aK2d71@loop (cdr aK2d6b@chars) (- aK2d6c@p0 '1) aK2d6d@p1) (if (memv aK2d73@t '(#\[)) (aK2d71@loop (cdr aK2d6b@chars) aK2d6c@p0 (+ aK2d6d@p1 '1)) (if (memv aK2d73@t '(#\])) (aK2d71@loop (cdr aK2d6b@chars) aK2d6c@p0 (- aK2d6d@p1 '1)) (aK2d71@loop (cdr aK2d6b@chars) aK2d6c@p0 aK2d6d@p1)))))))))) (set! aK2d64@eval-string-print (lambda (aK2d67@text) (if (not (or (string=? '"\n" aK2d67@text) (= '0 (string-length aK2d67@text)))) (write (aK2c9c@eval-top-level (call-with-port (open-string-input-port aK2d67@text) read))) (void)))) (if (eof-object? aK2d5b@line) (begin (aK2d64@eval-string-print aK2d5c@accum) (exit)) (let ((aK2d65@current (string-append aK2d5c@accum aK2d5b@line))) (if (aK2d62@parentheses-ok? aK2d65@current) (aK2d64@eval-string-print aK2d65@current) (aK2d5f@loop (get-line (current-input-port)) aK2d65@current))))))))))))) (newline) (aK2d52@rec)))) (aK2d52@rec))))) (set! aK2de8@aK2c8e@repl aK2c8e@repl) (set! aK2c90@trace-printer (aK6bd@aK59c@make-parameter write)) (set! aK2de9@aK2c90@trace-printer aK2c90@trace-printer) (set! aK2c92@command-line (aK6bd@aK59c@make-parameter (get-command-line))) (set! aK2dea@aK2c92@command-line aK2c92@command-line) (set! aK2c94@local-library-path (lambda (aK2d75@filename) (aK977@aK7b3@library-path))) (set! aK2deb@aK2c94@local-library-path aK2c94@local-library-path) (set! aK2c96@load/args (lambda (aK2d77@filename . aK2d79@args) (begin (apply aK2ca6@load-r6rs-top-level aK2d77@filename 'load aK2d79@args) (void)))) (set! aK2dec@aK2c96@load/args aK2c96@load/args) (set! aK2c98@load (lambda (aK2d7b@filename) (begin (apply aK2ca6@load-r6rs-top-level aK2d7b@filename 'load (aK2c92@command-line)) (void)))) (set! aK2ded@aK2c98@load aK2c98@load) (set! aK2c9a@ironscheme-build (lambda () (aK2c98@load '"ironscheme-buildscript.ss"))) (set! aK2dee@aK2c9a@ironscheme-build aK2c9a@ironscheme-build) (set! aK2c9c@eval-top-level (lambda (aK2d7d@x) (aK28a2@aKe3a@eval aK2d7d@x (aK28b9@aKe68@interaction-environment)))) (set! aK2def@aK2c9c@eval-top-level aK2c9c@eval-top-level) (set! aK2c9e@compile-system-libraries (lambda () (aK2c9c@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! aK2df0@aK2c9e@compile-system-libraries aK2c9e@compile-system-libraries) (set! aK2ca0@compile (lambda (aK2d7f@filename) (aK2ca6@load-r6rs-top-level aK2d7f@filename 'compile))) (set! aK2df1@aK2ca0@compile aK2ca0@compile) (set! aK2ca2@compile->closure (lambda (aK2d81@filename) (aK2ca6@load-r6rs-top-level aK2d81@filename 'closure))) (set! aK2df2@aK2ca2@compile->closure aK2ca2@compile->closure) (set! aK2ca4@pre-compile-r6rs-file (lambda (aK2d83@filename) (aK2ca6@load-r6rs-top-level aK2d83@filename 'compile))) (set! aK2df3@aK2ca4@pre-compile-r6rs-file aK2ca4@pre-compile-r6rs-file) (set! aK2ca6@load-r6rs-top-level (lambda (aK2d85@filename aK2d86@how . aK2d89@args) (begin (aK977@aK7b3@library-path (aK2c94@local-library-path aK2d85@filename)) (let ((aK2d8b@x* (with-input-from-file aK2d85@filename (lambda () (let aK2d8d@f () (let ((aK2d8f@x (aK6b0@aK582@read-annotated))) (if (eof-object? aK2d8f@x) '() (cons aK2d8f@x (aK2d8d@f))))))))) (let ((aK2d91@t aK2d86@how)) (if (memv aK2d91@t '(closure)) (aK28b8@aKe66@pre-compile-r6rs-top-level aK2d8b@x*) (if (memv aK2d91@t '(load)) (begin (aK2c92@command-line (cons aK2d85@filename (car aK2d89@args))) (aK6be@aK59e@mosh-cache-dir (create-mosh-cache-dir)) (if (aK6be@aK59e@mosh-cache-dir) (gensym-prefix-set! (aK2cac@prefix-inc! (string-append (aK6be@aK59e@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (aK2d93@file) ((call/cc (lambda (aK2d97@aK2d95) (lambda () (with-exception-handler (lambda (aK2d99@c) ((call/cc (lambda (aK2d9b@aK2d96) (aK2d97@aK2d95 (lambda () (if '#t '#t (aK2d9b@aK2d96 (lambda () (raise-continuable aK2d99@c)))))))))) (lambda () (delete-file (string-append (aK6be@aK59e@mosh-cache-dir) '"/" aK2d93@file))))))))) (directory-list (aK6be@aK59e@mosh-cache-dir))) (void)) (let ((aK2d9d@compiled (aK28b7@aKe64@compile-r6rs-top-level aK2d8b@x*))) (begin (if (and (aK6be@aK59e@mosh-cache-dir) (not (symbol-value '%disable-acc))) (aK97b@aK7bb@serialize-all aK6b8@aK592@serialize-library aK714@aK6cd@compile-core-expr) (void)) (aK2d9d@compiled)))) (if (memv aK2d91@t '(compile)) (begin (aK28b7@aKe64@compile-r6rs-top-level aK2d8b@x*) (aK97b@aK7bb@serialize-all aK6b8@aK592@serialize-library aK714@aK6cd@compile-core-expr)) (if '#f '#f (void)))))))))) (set! aK2df4@aK2ca6@load-r6rs-top-level aK2ca6@load-r6rs-top-level) (set! aK2ca8@load-r6rs-top-level-sexp (lambda (aK2d9f@import-spec aK2da0@thunk) (let ((aK2dab@aK2da4 aK977@aK7b3@library-path) (aK2dac@aK2da6 aK6be@aK59e@mosh-cache-dir) (aK2dad@aK2da8 (aK2c94@local-library-path '"")) (aK2dae@aK2daa (create-mosh-cache-dir))) (let ((aK2db3@swap (lambda () (begin (let ((aK2db5@t (aK2dab@aK2da4))) (begin (aK2dab@aK2da4 aK2dad@aK2da8) (set! aK2dad@aK2da8 aK2db5@t))) (let ((aK2db7@t (aK2dac@aK2da6))) (begin (aK2dac@aK2da6 aK2dae@aK2daa) (set! aK2dae@aK2daa aK2db7@t))))))) (dynamic-wind aK2db3@swap (lambda () (begin (if (aK6be@aK59e@mosh-cache-dir) (gensym-prefix-set! (aK2cac@prefix-inc! (string-append (aK6be@aK59e@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((aK2dbd@aK2dba aK2c92@command-line) (aK2dbe@aK2dbc '())) (let ((aK2dc1@swap (lambda () (let ((aK2dc3@t (aK2dbd@aK2dba))) (begin (aK2dbd@aK2dba aK2dbe@aK2dbc) (set! aK2dbe@aK2dbc aK2dc3@t)))))) (dynamic-wind aK2dc1@swap (lambda () ((aK28b7@aKe64@compile-r6rs-top-level (list (cons 'import aK2d9f@import-spec) (list aK2da0@thunk))))) aK2dc1@swap))))) aK2db3@swap))))) (set! aK2df5@aK2ca8@load-r6rs-top-level-sexp aK2ca8@load-r6rs-top-level-sexp) (set! aK2caa@prefix-inc (lambda (aK2dc5@prefix-string) (let ((aK2dc7@prefix (symbol->string aK2dc5@prefix-string))) (let ((aK2dc9@len (string-length aK2dc7@prefix))) (let aK2dd1@loop ((aK2dcb@i (- aK2dc9@len '1)) (aK2dcc@carry? '#t) (aK2dcd@accum '())) (if (< aK2dcb@i '0) (string->symbol (list->string (if aK2dcc@carry? (cons '#\a aK2dcd@accum) aK2dcd@accum))) (if aK2dcc@carry? (let ((aK2dd3@next-integer (+ '1 (char->integer (string-ref aK2dc7@prefix aK2dcb@i))))) (if (= aK2dd3@next-integer '123) (aK2dd1@loop (- aK2dcb@i '1) '#f (cons '#\A aK2dcd@accum)) (if (= aK2dd3@next-integer '91) (aK2dd1@loop (- aK2dcb@i '1) '#t (cons '#\a aK2dcd@accum)) (aK2dd1@loop (- aK2dcb@i '1) '#f (cons (integer->char aK2dd3@next-integer) aK2dcd@accum))))) (aK2dd1@loop (- aK2dcb@i '1) '#f (cons (string-ref aK2dc7@prefix aK2dcb@i) aK2dcd@accum))))))))) (set! aK2df6@aK2caa@prefix-inc aK2caa@prefix-inc) (set! aK2cac@prefix-inc! (lambda (aK2dd5@file) (begin (if (not (file-exists? aK2dd5@file)) (call-with-output-file aK2dd5@file (lambda (aK2dd7@port) (write 'd aK2dd7@port))) (void)) (let ((aK2dd9@prefix (call-with-input-file aK2dd5@file read))) (let ((aK2ddb@next-prefix (aK2caa@prefix-inc aK2dd9@prefix))) (begin (call-with-port (open-file-output-port aK2dd5@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (aK2ddd@port) (write aK2ddb@next-prefix aK2ddd@port))) aK2dd9@prefix)))))) (set! aK2df7@aK2cac@prefix-inc! aK2cac@prefix-inc!) (begin (aK97c@aK7bd@current-precompiled-library-loader aK6b9@aK594@load-serialized-library) (set-symbol-value! 'load aK2c98@load) (set-symbol-value! 'pre-compile-r6rs-file aK2ca4@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs aK2c9c@eval-top-level) (set-symbol-value! 'int-env-syms aK2899@aKe28@interaction-environment-symbols) (set-symbol-value! 'expanded2core aK713@aK6cb@expanded->core) (set-symbol-value! 'trace-printer aK2c90@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (aK2cad@c) (condition (aK2bd9@aK29e3@make-non-continuable-violation) (aK2bcf@aK29ca@make-who-condition 'raise) (aK2b93@aK292b@make-message-condition '"returned from non-continuable exception") (aK2bc5@aK29af@make-irritants-condition (list aK2cad@c))))) (aK2c82@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (aK2c82@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (aK2c80@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (aK2c80@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (aK2c80@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((aK2caf@prefix (lambda (aK2cb1@ext aK2cb2@ls) (append (map (lambda (aK2cb5@x) (string-append aK2cb1@ext aK2cb5@x)) aK2cb2@ls) aK2cb2@ls)))) (aK978@aK7b5@library-extensions (aK2caf@prefix '".mosh" (aK978@aK7b5@library-extensions)))) (current-exception-handler (lambda (aK2cb7@c) (if (condition? aK2cb7@c) (aK2c88@condition-printer aK2cb7@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" aK2cb7@c)))) (if ((call/cc (lambda (aK2cbb@aK2cb9) (lambda () (with-exception-handler (lambda (aK2cbd@c) ((call/cc (lambda (aK2cbf@aK2cba) (aK2cbb@aK2cb9 (lambda () (if '#t '#f (aK2cbf@aK2cba (lambda () (raise-continuable aK2cbd@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (aK2ca8@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (aK2c92@command-line)) (let ((aK2cc9@aK2cc2 aK2c92@command-line) (aK2cca@aK2cc4 aK6be@aK59e@mosh-cache-dir) (aK2ccb@aK2cc6 '()) (aK2ccc@aK2cc8 (create-mosh-cache-dir))) (let ((aK2cd1@swap (lambda () (begin (let ((aK2cd3@t (aK2cc9@aK2cc2))) (begin (aK2cc9@aK2cc2 aK2ccb@aK2cc6) (set! aK2ccb@aK2cc6 aK2cd3@t))) (let ((aK2cd5@t (aK2cca@aK2cc4))) (begin (aK2cca@aK2cc4 aK2ccc@aK2cc8) (set! aK2ccc@aK2cc8 aK2cd5@t))))))) (dynamic-wind aK2cd1@swap (lambda () (begin (if (aK6be@aK59e@mosh-cache-dir) (gensym-prefix-set! (aK2cac@prefix-inc! (string-append (aK6be@aK59e@mosh-cache-dir) '"/prefix.txt"))) (void)) (aK2c8e@repl))) aK2cd1@swap))) (begin (aK977@aK7b3@library-path (aK2c94@local-library-path (car (aK2c92@command-line)))) (set! aK2c7e@x* (with-input-from-file (car (aK2c92@command-line)) (lambda () (let aK2cd7@f () (let ((aK2cd9@x (aK6b0@aK582@read-annotated))) (if (eof-object? aK2cd9@x) '() (cons aK2cd9@x (aK2cd7@f)))))))) (aK2c92@command-line (cons (car (aK2c92@command-line)) (cdr (aK2c92@command-line)))) (aK6be@aK59e@mosh-cache-dir (create-mosh-cache-dir)) (if (aK6be@aK59e@mosh-cache-dir) (gensym-prefix-set! (aK2cac@prefix-inc! (string-append (aK6be@aK59e@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (aK2cdb@file) ((call/cc (lambda (aK2cdf@aK2cdd) (lambda () (with-exception-handler (lambda (aK2ce1@c) ((call/cc (lambda (aK2ce3@aK2cde) (aK2cdf@aK2cdd (lambda () (if '#t '#t (aK2ce3@aK2cde (lambda () (raise-continuable aK2ce1@c)))))))))) (lambda () (delete-file (string-append (aK6be@aK59e@mosh-cache-dir) '"/" aK2cdb@file))))))))) (directory-list (aK6be@aK59e@mosh-cache-dir))) (void)) (let ((aK2ce5@compiled (aK28b7@aKe64@compile-r6rs-top-level aK2c7e@x*))) (begin (if (and (aK6be@aK59e@mosh-cache-dir) (not (symbol-value '%disable-acc))) (aK97b@aK7bb@serialize-all aK6b8@aK592@serialize-library aK714@aK6cd@compile-core-expr) (void)) (aK2ce5@compiled))))))))
