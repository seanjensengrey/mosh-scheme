;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (g907@make-gensym-counter g909@gen-sym-prefix g911@gen-sym-counter g913@gensym g915@read-annotated g917@annotation-stripped g919@annotation? g921@annotation-source g923@annotation-expression g925@scm->fasl g927@fasl-save g929@fasl-load g931@serialize-library g933@load-serialized-library g935@make-record-printer g937@compile-core g939@read-library-source-file g941@make-parameter g1041@file-options-spec) (begin (set! g907@make-gensym-counter (lambda (g1042@i) ((lambda (g1045@inc) (begin (set! g1045@inc (lambda () (begin (set! g1042@i (+ g1042@i '1)) g1042@i))) g1045@inc)) '#f))) (set! g909@gen-sym-prefix ((lambda (g1046@v) (if g1046@v (string->symbol g1046@v) 'A)) (get-environment-variable '"MOSH_GENSYM_PREFIX"))) (set! g911@gen-sym-counter (g907@make-gensym-counter '0)) (set! g913@gensym (lambda g1048@x (string->symbol (if (null? g1048@x) (format '"~a~a" g909@gen-sym-prefix (g911@gen-sym-counter)) (format '"~a~a@~a" g909@gen-sym-prefix (g911@gen-sym-counter) (car g1048@x)))))) (set! g915@read-annotated read) (set! g917@annotation-stripped (lambda (g1050@x) (g923@annotation-expression g1050@x))) (set! g919@annotation? (lambda (g1052@x) (source-info g1052@x))) (set! g921@annotation-source (lambda (g1054@x) (source-info g1054@x))) (set! g923@annotation-expression (lambda (g1056@x) (if (pair? g1056@x) (cons (car g1056@x) (cdr g1056@x)) (display '"line:46\n")))) (set! g925@scm->fasl (lambda (g1058@filename) (string-append g1058@filename '".fasl"))) (set! g927@fasl-save (lambda (g1060@filename g1061@obj) (call-with-port (open-file-output-port g1060@filename) (lambda (g1064@port) ((symbol-value 'fasl-write!) g1061@obj g1064@port))))) (set! g929@fasl-load (lambda (g1066@filename) (call-with-port (open-file-input-port g1066@filename) (symbol-value 'fasl-read!)))) (set! g931@serialize-library (lambda (g1068@filename g1069@obj) (begin (format '#t '"serialize-library ~a\n..." g1068@filename) ((lambda (g1072@expanded2core) ((lambda (g1074@compile) ((lambda (g1076@code) ((lambda (g1078@pivot) ((lambda (g1080@visit) ((lambda () (begin (set-car! g1078@pivot g1080@visit) ((lambda (g1082@pivot) ((lambda (g1084@invoke) ((lambda () (set-car! g1082@pivot g1084@invoke)))) (g1074@compile (g1072@expanded2core (car g1082@pivot))))) (cdr g1078@pivot)))))) (g1074@compile (g1072@expanded2core (car g1078@pivot))))) (cddddr (cddddr g1076@code)))) g1069@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (g1086@fasl-file) (begin (if (file-exists? g1086@fasl-file) (delete-file g1086@fasl-file) (void)) ((call/cc (lambda (g1090@g1088) (lambda () (with-exception-handler (lambda (g1092@c) ((call/cc (lambda (g1094@g1089) (g1090@g1088 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " g1068@filename) (if (file-exists? g1086@fasl-file) (delete-file g1086@fasl-file) (void)) '#f) (g1094@g1089 (lambda () (raise-continuable g1092@c)))))))))) (lambda () (begin (g927@fasl-save g1086@fasl-file g1069@obj) (display '"OK\n")))))))))) (g925@scm->fasl g1068@filename))))) (set! g933@load-serialized-library (lambda (g1096@filename g1097@obj) ((lambda (g1100@fasl-file) (if (and (file-exists? g1100@fasl-file) ((symbol-value 'file-newer?) g1100@fasl-file g1096@filename)) ((lambda (g1102@expanded2core) ((lambda (g1104@eval-compiled-core) ((lambda (g1106@code) ((lambda (g1108@pivot) ((lambda (g1110@visit) ((lambda (g1112@visit-proc) ((lambda () (begin (set-car! g1108@pivot g1112@visit-proc) ((lambda (g1114@pivot) ((lambda (g1116@invoke) ((lambda () (begin (set-car! g1114@pivot (lambda () (g1104@eval-compiled-core g1116@invoke))) (apply g1097@obj g1106@code))))) (car g1114@pivot))) (cdr g1108@pivot)) '#t)))) (lambda () (g1104@eval-compiled-core g1110@visit)))) (car g1108@pivot))) (cddddr (cddddr g1106@code)))) (g929@fasl-load g1100@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (g925@scm->fasl g1096@filename)))) (set! g935@make-record-printer (lambda (g1118@name g1119@printer) (lambda g1122@x (begin (display '"record printer") (for-each display g1122@x))))) (set! g937@compile-core (lambda g1124@x (apply error 'comile-core '"not implementated" g1124@x))) (set! g939@read-library-source-file (lambda (g1126@file-name) (with-input-from-file g1126@file-name g915@read-annotated))) (set! g941@make-parameter (lambda g1142 ((lambda (g1143) (if (= g1143 '1) (apply (lambda (g1128@x) (g941@make-parameter g1128@x (lambda (g1130@x) g1130@x))) g1142) (if (= g1143 '2) (apply (lambda (g1132@x g1133@fender) ((lambda (g1136@x) (lambda g1140 ((lambda (g1141) (if (= g1141 '0) (apply (lambda () g1136@x) g1140) (if (= g1141 '1) (apply (lambda (g1138@v) (set! g1136@x (g1133@fender g1138@v))) g1140) (error 'apply '"invalid arg count")))) (length g1140)))) (g1133@fender g1132@x))) g1142) (error 'apply '"invalid arg count")))) (length g1142)))) (set! g1041@file-options-spec (lambda (g1144@x) g1144@x)) (begin (set! g1164@g1041@file-options-spec g1041@file-options-spec) (set! g1163@g941@make-parameter g941@make-parameter) (set! g1162@g939@read-library-source-file g939@read-library-source-file) (set! g1161@g937@compile-core g937@compile-core) (set! g1160@g935@make-record-printer g935@make-record-printer) (set! g1159@g933@load-serialized-library g933@load-serialized-library) (set! g1158@g931@serialize-library g931@serialize-library) (set! g1157@g929@fasl-load g929@fasl-load) (set! g1156@g927@fasl-save g927@fasl-save) (set! g1155@g925@scm->fasl g925@scm->fasl) (set! g1154@g923@annotation-expression g923@annotation-expression) (set! g1153@g921@annotation-source g921@annotation-source) (set! g1152@g919@annotation? g919@annotation?) (set! g1151@g917@annotation-stripped g917@annotation-stripped) (set! g1150@g915@read-annotated g915@read-annotated) (set! g1149@g913@gensym g913@gensym) (set! g1148@g911@gen-sym-counter g911@gen-sym-counter) (set! g1147@g909@gen-sym-prefix g909@gen-sym-prefix) (set! g1146@g907@make-gensym-counter g907@make-gensym-counter)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (g1169@current-primitive-locations g1171@mutable? g1173@rewriter g1175@expanded->core g1177@compile-core-expr g1179@pretty-print g1181@compile-core-expr-to-port) (begin (set! g1169@current-primitive-locations (g1163@g941@make-parameter (lambda (g1182@x) '#f) (lambda (g1184@p) g1184@p))) (set! g1171@mutable? (lambda (g1186@x) (or (pair? g1186@x) (vector? g1186@x) (hashtable? g1186@x)))) (set! g1173@rewriter (lambda (g1188@quote-hack?) ((lambda (g1191@f) (begin (set! g1191@f (lambda (g1192@x) (if (pair? g1192@x) ((lambda (g1194@t) (if (memv g1194@t '(quote)) (if (and g1188@quote-hack? (g1171@mutable? (cadr g1192@x))) ((lambda (g1196@g) (begin (set-symbol-value! g1196@g (cadr g1192@x)) g1196@g)) (g1149@g913@gensym)) g1192@x) (if (memv g1194@t '(case-lambda)) (cons 'case-lambda (map (lambda (g1198@x) (cons (car g1198@x) (map g1191@f (cdr g1198@x)))) (cdr g1192@x))) (if (memv g1194@t '(lambda)) (cons* 'lambda (cadr g1192@x) (map g1191@f (cddr g1192@x))) (if (memv g1194@t '(letrec)) ((lambda (g1200@bindings g1201@body*) ((lambda (g1204@lhs* g1205@rhs*) (cons* 'letrec (map list g1204@lhs* (map g1191@f g1205@rhs*)) (map g1191@f g1201@body*))) (map car g1200@bindings) (map cadr g1200@bindings))) (cadr g1192@x) (cddr g1192@x)) (if (memv g1194@t '(letrec*)) ((lambda (g1208@bindings g1209@body*) ((lambda (g1212@lhs* g1213@rhs*) (cons* 'letrec* (map list g1212@lhs* (map g1191@f g1213@rhs*)) (map g1191@f g1209@body*))) (map car g1208@bindings) (map cadr g1208@bindings))) (cadr g1192@x) (cddr g1192@x)) (if (memv g1194@t '(library-letrec*)) ((lambda (g1216@name g1217@x) ((lambda (g1220@bindings g1221@body*) ((lambda (g1224@lhs* g1225@lhs** g1226@rhs*) (cons* 'library-letrec* g1216@name (map list g1224@lhs* g1225@lhs** (map g1191@f g1226@rhs*)) (map g1191@f g1221@body*))) (map car g1220@bindings) (map cadr g1220@bindings) (map caddr g1220@bindings))) (cadr g1217@x) (cddr g1217@x))) (cadr g1192@x) (cdr g1192@x)) (if (memv g1194@t '(begin)) (cons 'begin (map g1191@f (cdr g1192@x))) (if (memv g1194@t '(set!)) (list 'set! (cadr g1192@x) (g1191@f (caddr g1192@x))) (if (memv g1194@t '(primitive)) ((lambda (g1230@op) ((lambda (g1232@t) (if g1232@t ((lambda (g1234@loc) g1234@loc) g1232@t) g1230@op)) ((g1169@current-primitive-locations) g1230@op))) (cadr g1192@x)) (if (memv g1194@t '(define)) g1192@x (if (list? g1192@x) (map g1191@f g1192@x) (error 'rewrite '"invalid form ~s ~s" g1192@x (list? g1192@x)))))))))))))) (car g1192@x)) g1192@x))) g1191@f)) '#f))) (set! g1175@expanded->core (lambda (g1236@x) ((g1173@rewriter '#f) g1236@x))) (set! g1177@compile-core-expr (lambda (g1238@x) ((g1173@rewriter '#f) g1238@x))) (set! g1179@pretty-print write) (set! g1181@compile-core-expr-to-port (lambda (g1240@x g1241@p) (g1179@pretty-print ((g1173@rewriter '#f) g1240@x) g1241@p))) (begin (set! g1250@g1181@compile-core-expr-to-port g1181@compile-core-expr-to-port) (set! g1249@g1179@pretty-print g1179@pretty-print) (set! g1248@g1177@compile-core-expr g1177@compile-core-expr) (set! g1247@g1175@expanded->core g1175@expanded->core) (set! g1246@g1173@rewriter g1173@rewriter) (set! g1245@g1171@mutable? g1171@mutable?) (set! g1244@g1169@current-primitive-locations g1169@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (g1329@make-collection g1331@current-library-collection g1337@g1332 g1339@g1334 g1341@g1333 g1344@library? g1346@make-library g1348@library-id g1350@library-name g1352@library-version g1354@library-imp* g1356@library-vis* g1358@library-inv* g1360@library-subst g1362@library-env g1364@library-visit-state g1366@library-invoke-state g1368@library-visit-code g1370@library-invoke-code g1372@library-visible? g1374@library-source-file-name g1376@set-library-id! g1378@set-library-name! g1380@set-library-version! g1382@set-library-imp*! g1384@set-library-vis*! g1386@set-library-inv*! g1388@set-library-subst! g1390@set-library-env! g1392@set-library-visit-state! g1394@set-library-invoke-state! g1396@set-library-visit-code! g1398@set-library-invoke-code! g1400@set-library-visible?! g1402@set-library-source-file-name! g1404@rp g1406@find-dependencies g1408@find-library-by g1410@library-path g1412@library-extensions g1414@library-name->file-name g1416@file-locator g1418@serialize-all g1420@current-precompiled-library-loader g1422@try-load-from-file g1424@library-loader g1426@current-library-expander g1428@external-pending-libraries g1430@find-external-library g1432@find-library-by-name g1434@library-exists? g1436@find-library-by-spec/die g1438@label->binding-table g1440@install-library-record g1442@install-library g1444@imported-label->binding g1446@invoke-library g1448@visit-library g1450@invoke-library-by-spec g1452@installed-libraries g1454@library-spec) (begin (set! g1329@make-collection (lambda () ((lambda (g1455@set) ((lambda (g1458@set-cons) (begin (set! g1458@set-cons (lambda (g1463@x g1464@ls) (if (memq g1463@x g1464@ls) g1464@ls (cons g1463@x g1464@ls)))) (lambda g1461 ((lambda (g1462) (if (= g1462 '0) (apply (lambda () g1455@set) g1461) (if (= g1462 '1) (apply (lambda (g1459@x) (set! g1455@set (g1458@set-cons g1459@x g1455@set))) g1461) (error 'apply '"invalid arg count")))) (length g1461))))) '#f)) '()))) (set! g1331@current-library-collection (g1163@g941@make-parameter (g1329@make-collection) (lambda (g1467@x) (begin (if (not (procedure? g1467@x)) (assertion-violation 'current-library-collection '"not a procedure" g1467@x) (void)) g1467@x)))) (set! g1337@g1332 (make-record-type-descriptor 'library '#f 'g1335 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! g1339@g1334 '#f) (set! g1341@g1333 (make-record-constructor-descriptor g1337@g1332 '#f g1339@g1334)) (set! g1344@library? (record-predicate g1337@g1332)) (set! g1346@make-library (record-constructor g1341@g1333)) (set! g1348@library-id (record-accessor g1337@g1332 '0)) (set! g1350@library-name (record-accessor g1337@g1332 '1)) (set! g1352@library-version (record-accessor g1337@g1332 '2)) (set! g1354@library-imp* (record-accessor g1337@g1332 '3)) (set! g1356@library-vis* (record-accessor g1337@g1332 '4)) (set! g1358@library-inv* (record-accessor g1337@g1332 '5)) (set! g1360@library-subst (record-accessor g1337@g1332 '6)) (set! g1362@library-env (record-accessor g1337@g1332 '7)) (set! g1364@library-visit-state (record-accessor g1337@g1332 '8)) (set! g1366@library-invoke-state (record-accessor g1337@g1332 '9)) (set! g1368@library-visit-code (record-accessor g1337@g1332 '10)) (set! g1370@library-invoke-code (record-accessor g1337@g1332 '11)) (set! g1372@library-visible? (record-accessor g1337@g1332 '12)) (set! g1374@library-source-file-name (record-accessor g1337@g1332 '13)) (set! g1376@set-library-id! (record-mutator g1337@g1332 '0)) (set! g1378@set-library-name! (record-mutator g1337@g1332 '1)) (set! g1380@set-library-version! (record-mutator g1337@g1332 '2)) (set! g1382@set-library-imp*! (record-mutator g1337@g1332 '3)) (set! g1384@set-library-vis*! (record-mutator g1337@g1332 '4)) (set! g1386@set-library-inv*! (record-mutator g1337@g1332 '5)) (set! g1388@set-library-subst! (record-mutator g1337@g1332 '6)) (set! g1390@set-library-env! (record-mutator g1337@g1332 '7)) (set! g1392@set-library-visit-state! (record-mutator g1337@g1332 '8)) (set! g1394@set-library-invoke-state! (record-mutator g1337@g1332 '9)) (set! g1396@set-library-visit-code! (record-mutator g1337@g1332 '10)) (set! g1398@set-library-invoke-code! (record-mutator g1337@g1332 '11)) (set! g1400@set-library-visible?! (record-mutator g1337@g1332 '12)) (set! g1402@set-library-source-file-name! (record-mutator g1337@g1332 '13)) (set! g1404@rp (g1160@g935@make-record-printer 'library (lambda (g1469@x g1470@p g1471@wr) (begin (if (not (g1344@library? g1469@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (g1352@library-version g1469@x)) (g1350@library-name g1469@x) (append (g1350@library-name g1469@x) (list (g1352@library-version g1469@x))))) g1470@p))))) (set! g1406@find-dependencies (lambda (g1475@ls) (if (null? g1475@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! g1408@find-library-by (lambda (g1477@pred) ((letrec ((g1479@f (lambda (g1481@ls) (if (null? g1481@ls) '#f (if (g1477@pred (car g1481@ls)) (car g1481@ls) (g1479@f (cdr g1481@ls))))))) g1479@f) ((g1331@current-library-collection))))) (set! g1410@library-path (g1163@g941@make-parameter '(".") (lambda (g1483@x) (if (and (list? g1483@x) (for-all string? g1483@x)) (map (lambda (g1485@x) g1485@x) g1483@x) (assertion-violation 'library-path '"not a list of strings" g1483@x))))) (set! g1412@library-extensions (g1163@g941@make-parameter '(".sls" ".ss" ".scm") (lambda (g1487@x) (if (and (list? g1487@x) (for-all string? g1487@x)) (map (lambda (g1489@x) g1489@x) g1487@x) (assertion-violation 'library-extensions '"not a list of strings" g1487@x))))) (set! g1414@library-name->file-name (lambda (g1491@x) (call-with-values (lambda () (open-string-output-port)) (lambda (g1495@g1493@p g1496@g1494@extract) ((lambda (g1499@extract g1500@p) ((lambda (g1504@display-hex) (begin (set! g1504@display-hex (lambda (g1513@n) (if (<= '0 g1513@n '9) (display g1513@n g1500@p) (display (integer->char (+ (char->integer '#\a) (- g1513@n '10))) g1500@p)))) (begin ((letrec ((g1505@f (lambda (g1507@ls) (if (not (null? g1507@ls)) (begin (display '"/" g1500@p) (for-each (lambda (g1509@c) (if (or (char<=? '#\a g1509@c '#\z) (char<=? '#\A g1509@c '#\Z) (char<=? '#\0 g1509@c '#\9) (memv g1509@c '(#\- #\. #\_ #\~))) (display g1509@c g1500@p) (begin (display '"%" g1500@p) ((lambda (g1511@n) (begin (g1504@display-hex (quotient g1511@n '16)) (g1504@display-hex (remainder g1511@n '16)))) (char->integer g1509@c))))) (string->list (symbol->string (car g1507@ls)))) (g1505@f (cdr g1507@ls))) (void))))) g1505@f) g1491@x) (g1499@extract)))) '#f)) g1496@g1494@extract g1495@g1493@p))))) (set! g1416@file-locator (g1163@g941@make-parameter (lambda (g1515@x) ((lambda (g1517@str) ((letrec ((g1519@f (lambda (g1521@ls g1522@exts g1523@failed-list) (if (null? g1521@ls) ((lambda () ((lambda (g1535@g1530 g1537@g1532 g1539@g1531 g1542@g1529 g1544@make-library-resolution-condition g1546@g1527 g1548@g1528 g1550@library-resolution-condition? g1552@condition-library g1554@condition-files) (begin (set! g1535@g1530 (make-record-type-descriptor '&library-resolution g10071@g9386@&condition-rtd 'g1533 '#f '#f '#((immutable library) (immutable files)))) (set! g1537@g1532 '#f) (set! g1539@g1531 (make-record-constructor-descriptor g1535@g1530 g10072@g9388@&condition-rcd g1537@g1532)) (set! g1542@g1529 (record-predicate g1535@g1530)) (set! g1544@make-library-resolution-condition (record-constructor g1539@g1531)) (set! g1546@g1527 (record-accessor g1535@g1530 '0)) (set! g1548@g1528 (record-accessor g1535@g1530 '1)) (set! g1550@library-resolution-condition? (condition-predicate g1535@g1530)) (set! g1552@condition-library (condition-accessor g1535@g1530 g1546@g1527)) (set! g1554@condition-files (condition-accessor g1535@g1530 g1548@g1528)) (raise (condition (g10103@g9536@make-error) (g10137@g9626@make-who-condition 'expander) (g10077@g9469@make-message-condition '"cannot locate library in library-path") (g1544@make-library-resolution-condition g1515@x (reverse g1523@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? g1522@exts) (g1519@f (cdr g1521@ls) (g1412@library-extensions) g1523@failed-list) ((lambda (g1555@name) (if (file-exists? g1555@name) g1555@name (g1519@f g1521@ls (cdr g1522@exts) (cons g1555@name g1523@failed-list)))) (string-append (car g1521@ls) g1517@str (car g1522@exts)))))))) g1519@f) (g1410@library-path) (g1412@library-extensions) '())) (g1414@library-name->file-name g1515@x))) (lambda (g1557@f) (if (procedure? g1557@f) g1557@f (assertion-violation 'file-locator '"not a procedure" g1557@f))))) (set! g1418@serialize-all (lambda (g1559@serialize g1560@compile) ((lambda (g1564@library-desc) (begin (set! g1564@library-desc (lambda (g1567@x) (list (g1348@library-id g1567@x) (g1350@library-name g1567@x)))) (for-each (lambda (g1565@x) (if (g1374@library-source-file-name g1565@x) (g1559@serialize (g1374@library-source-file-name g1565@x) (list (g1348@library-id g1565@x) (g1350@library-name g1565@x) (g1352@library-version g1565@x) (map g1564@library-desc (g1354@library-imp* g1565@x)) (map g1564@library-desc (g1356@library-vis* g1565@x)) (map g1564@library-desc (g1358@library-inv* g1565@x)) (g1360@library-subst g1565@x) (g1362@library-env g1565@x) (g1560@compile (g1368@library-visit-code g1565@x)) (g1560@compile (g1370@library-invoke-code g1565@x)) (g1372@library-visible? g1565@x))) (void))) ((g1331@current-library-collection))))) '#f))) (set! g1420@current-precompiled-library-loader (g1163@g941@make-parameter (lambda (g1569@filename g1570@sk) '#f))) (set! g1422@try-load-from-file (lambda (g1573@filename) ((g1420@current-precompiled-library-loader) g1573@filename (lambda g1611 ((lambda (g1612) (if (= g1612 '11) (apply (lambda (g1575@id g1576@name g1577@ver g1578@imp* g1579@vis* g1580@inv* g1581@exp-subst g1582@exp-env g1583@visit-proc g1584@invoke-proc g1585@visible?) ((letrec ((g1597@f (lambda (g1599@deps) (if (null? g1599@deps) (begin (g1442@install-library g1575@id g1576@name g1577@ver g1578@imp* g1579@vis* g1580@inv* g1581@exp-subst g1582@exp-env g1583@visit-proc g1584@invoke-proc '#f '#f g1585@visible? '#f) '#t) ((lambda (g1601@d) ((lambda (g1603@label g1604@dname) ((lambda (g1607@l) (if (and (g1344@library? g1607@l) (eq? g1603@label (g1348@library-id g1607@l))) (g1597@f (cdr g1599@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" g1576@name g1604@dname g1573@filename g1607@l g1603@label (g1348@library-id g1607@l)) '#f))) (g1432@find-library-by-name g1604@dname))) (car g1601@d) (cadr g1601@d))) (car g1599@deps)))))) g1597@f) (append g1578@imp* g1579@vis* g1580@inv*))) g1611) (if (>= g1612 '0) (apply (lambda g1609@others '#f) g1611) (error 'apply '"invalid arg count")))) (length g1611)))))) (set! g1424@library-loader (g1163@g941@make-parameter (lambda (g1613@x) ((lambda (g1615@file-name) (if (not g1615@file-name) (assertion-violation '#f '"cannot file library" g1613@x) (or (g1422@try-load-from-file g1615@file-name) ((g1426@current-library-expander) (g1162@g939@read-library-source-file g1615@file-name) g1615@file-name (lambda (g1617@name) (if (not (fast-equal? g1617@name g1613@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (g1621@g1619@p g1622@g1620@e) ((lambda (g1625@e g1626@p) (begin (display '"expected to find library " g1626@p) (write g1613@x g1626@p) (display '" in file " g1626@p) (display g1615@file-name g1626@p) (display '", found " g1626@p) (write g1617@name g1626@p) (display '" instead" g1626@p) (g1625@e))) g1622@g1620@e g1621@g1619@p)))) (void))))))) ((g1416@file-locator) g1613@x))) (lambda (g1629@f) (if (procedure? g1629@f) g1629@f (assertion-violation 'library-locator '"not a procedure" g1629@f))))) (set! g1426@current-library-expander (g1163@g941@make-parameter (lambda (g1631@x) (assertion-violation 'library-expander '"not initialized")) (lambda (g1633@f) (if (procedure? g1633@f) g1633@f (assertion-violation 'library-expander '"not a procedure" g1633@f))))) (set! g1428@external-pending-libraries (g1163@g941@make-parameter '())) (set! g1430@find-external-library (lambda (g1635@name) (begin (if (member g1635@name (g1428@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" g1635@name) (void)) ((lambda (g1639@g1637@external-pending-libraries g1640@g1638@external-pending-libraries) ((lambda (g1643@swap) (dynamic-wind g1643@swap (lambda () (begin ((g1424@library-loader) g1635@name) (or (g1408@find-library-by (lambda (g1645@x) (fast-equal? (g1350@library-name g1645@x) g1635@name))) (assertion-violation '#f '"handling external library did not yield the correct library" g1635@name)))) g1643@swap)) (lambda () ((lambda (g1647@t) (begin (g1639@g1637@external-pending-libraries g1640@g1638@external-pending-libraries) (set! g1640@g1638@external-pending-libraries g1647@t))) (g1639@g1637@external-pending-libraries))))) g1428@external-pending-libraries (cons g1635@name (g1428@external-pending-libraries)))))) (set! g1432@find-library-by-name (lambda (g1649@name) (or (g1408@find-library-by (lambda (g1651@x) (fast-equal? (g1350@library-name g1651@x) g1649@name))) (g1430@find-external-library g1649@name)))) (set! g1434@library-exists? (lambda (g1653@name) (and (g1408@find-library-by (lambda (g1655@x) (fast-equal? (g1350@library-name g1655@x) g1653@name))) '#t))) (set! g1436@find-library-by-spec/die (lambda (g1657@spec) ((lambda (g1659@id) (or (g1408@find-library-by (lambda (g1661@x) (eq? g1659@id (g1348@library-id g1661@x)))) (assertion-violation '#f '"cannot find library with required spec" g1657@spec))) (car g1657@spec)))) (set! g1438@label->binding-table (make-eq-hashtable)) (set! g1440@install-library-record (lambda (g1663@lib) (begin ((lambda (g1665@exp-env) (for-each (lambda (g1667@x) ((lambda (g1669@label g1670@binding) ((lambda (g1673@binding) (begin (if (hashtable-ref g1438@label->binding-table g1669@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" g1669@label (hashtable-ref g1438@label->binding-table g1669@label '#f) g1673@binding) (exit)) (void)) (hashtable-set! g1438@label->binding-table g1669@label g1673@binding))) ((lambda (g1675@t) (if (memv g1675@t '(global)) (cons 'global (cons g1663@lib (cdr g1670@binding))) (if (memv g1675@t '(global-macro)) (cons 'global-macro (cons g1663@lib (cdr g1670@binding))) (if (memv g1675@t '(global-macro!)) (cons 'global-macro! (cons g1663@lib (cdr g1670@binding))) g1670@binding)))) (car g1670@binding)))) (car g1667@x) (cdr g1667@x))) g1665@exp-env)) (g1362@library-env g1663@lib)) ((g1331@current-library-collection) g1663@lib)))) (set! g1442@install-library (lambda (g1677@id g1678@name g1679@ver g1680@imp* g1681@vis* g1682@inv* g1683@exp-subst g1684@exp-env g1685@visit-proc g1686@invoke-proc g1687@visit-code g1688@invoke-code g1689@visible? g1690@source-file-name) ((lambda (g1705@imp-lib* g1706@vis-lib* g1707@inv-lib*) (begin (if (not (and (symbol? g1677@id) (list? g1678@name) (list? g1679@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" g1677@id g1678@name g1679@ver) (void)) (if (g1434@library-exists? g1678@name) (assertion-violation 'install-library '"library is already installed" g1678@name) (void)) ((lambda (g1711@lib) (g1440@install-library-record g1711@lib)) (g1346@make-library g1677@id g1678@name g1679@ver g1705@imp-lib* g1706@vis-lib* g1707@inv-lib* g1683@exp-subst g1684@exp-env g1685@visit-proc g1686@invoke-proc g1687@visit-code g1688@invoke-code g1689@visible? g1690@source-file-name)))) (map g1436@find-library-by-spec/die g1680@imp*) (map g1436@find-library-by-spec/die g1681@vis*) (map g1436@find-library-by-spec/die g1682@inv*)))) (set! g1444@imported-label->binding (lambda (g1713@lab) (hashtable-ref g1438@label->binding-table g1713@lab '#f))) (set! g1446@invoke-library (lambda (g1715@lib) ((lambda (g1717@invoke) (if (procedure? g1717@invoke) (begin (g1394@set-library-invoke-state! g1715@lib (lambda () (assertion-violation 'invoke '"circularity detected" g1715@lib))) (for-each g1446@invoke-library (g1358@library-inv* g1715@lib)) (g1394@set-library-invoke-state! g1715@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" g1715@lib))) (g1717@invoke) (g1394@set-library-invoke-state! g1715@lib '#t)) (void))) (g1366@library-invoke-state g1715@lib)))) (set! g1448@visit-library (lambda (g1719@lib) ((lambda (g1721@visit) (if (procedure? g1721@visit) (begin (g1392@set-library-visit-state! g1719@lib (lambda () (assertion-violation 'visit '"circularity detected" g1719@lib))) (for-each g1446@invoke-library (g1356@library-vis* g1719@lib)) (g1392@set-library-visit-state! g1719@lib (lambda () (assertion-violation 'invoke '"first visit did not return" g1719@lib))) (g1721@visit) (g1392@set-library-visit-state! g1719@lib '#t)) (void))) (g1364@library-visit-state g1719@lib)))) (set! g1450@invoke-library-by-spec (lambda (g1723@spec) (g1446@invoke-library (g1436@find-library-by-spec/die g1723@spec)))) (set! g1452@installed-libraries (lambda g1731 ((lambda (g1732) (if (= g1732 '1) (apply (lambda (g1725@all?) ((letrec ((g1727@f (lambda (g1729@ls) (if (null? g1729@ls) '() (if (or g1725@all? (g1372@library-visible? (car g1729@ls))) (cons (car g1729@ls) (g1727@f (cdr g1729@ls))) (g1727@f (cdr g1729@ls))))))) g1727@f) ((g1331@current-library-collection)))) g1731) (if (= g1732 '0) (apply (lambda () (g1452@installed-libraries '#f)) g1731) (error 'apply '"invalid arg count")))) (length g1731)))) (set! g1454@library-spec (lambda (g1733@x) (begin (if (not (g1344@library? g1733@x)) (assertion-violation 'library-spec '"not a library" g1733@x) (void)) (list (g1348@library-id g1733@x) (g1350@library-name g1733@x) (g1352@library-version g1733@x))))) (begin (set! g1795@g1454@library-spec g1454@library-spec) (set! g1794@g1452@installed-libraries g1452@installed-libraries) (set! g1793@g1450@invoke-library-by-spec g1450@invoke-library-by-spec) (set! g1792@g1448@visit-library g1448@visit-library) (set! g1791@g1446@invoke-library g1446@invoke-library) (set! g1790@g1444@imported-label->binding g1444@imported-label->binding) (set! g1789@g1442@install-library g1442@install-library) (set! g1788@g1440@install-library-record g1440@install-library-record) (set! g1787@g1438@label->binding-table g1438@label->binding-table) (set! g1786@g1436@find-library-by-spec/die g1436@find-library-by-spec/die) (set! g1785@g1434@library-exists? g1434@library-exists?) (set! g1784@g1432@find-library-by-name g1432@find-library-by-name) (set! g1783@g1430@find-external-library g1430@find-external-library) (set! g1782@g1428@external-pending-libraries g1428@external-pending-libraries) (set! g1781@g1426@current-library-expander g1426@current-library-expander) (set! g1780@g1424@library-loader g1424@library-loader) (set! g1779@g1422@try-load-from-file g1422@try-load-from-file) (set! g1778@g1420@current-precompiled-library-loader g1420@current-precompiled-library-loader) (set! g1777@g1418@serialize-all g1418@serialize-all) (set! g1776@g1416@file-locator g1416@file-locator) (set! g1775@g1414@library-name->file-name g1414@library-name->file-name) (set! g1774@g1412@library-extensions g1412@library-extensions) (set! g1773@g1410@library-path g1410@library-path) (set! g1772@g1408@find-library-by g1408@find-library-by) (set! g1771@g1406@find-dependencies g1406@find-dependencies) (set! g1770@g1404@rp g1404@rp) (set! g1769@g1402@set-library-source-file-name! g1402@set-library-source-file-name!) (set! g1768@g1400@set-library-visible?! g1400@set-library-visible?!) (set! g1767@g1398@set-library-invoke-code! g1398@set-library-invoke-code!) (set! g1766@g1396@set-library-visit-code! g1396@set-library-visit-code!) (set! g1765@g1394@set-library-invoke-state! g1394@set-library-invoke-state!) (set! g1764@g1392@set-library-visit-state! g1392@set-library-visit-state!) (set! g1763@g1390@set-library-env! g1390@set-library-env!) (set! g1762@g1388@set-library-subst! g1388@set-library-subst!) (set! g1761@g1386@set-library-inv*! g1386@set-library-inv*!) (set! g1760@g1384@set-library-vis*! g1384@set-library-vis*!) (set! g1759@g1382@set-library-imp*! g1382@set-library-imp*!) (set! g1758@g1380@set-library-version! g1380@set-library-version!) (set! g1757@g1378@set-library-name! g1378@set-library-name!) (set! g1756@g1376@set-library-id! g1376@set-library-id!) (set! g1755@g1374@library-source-file-name g1374@library-source-file-name) (set! g1754@g1372@library-visible? g1372@library-visible?) (set! g1753@g1370@library-invoke-code g1370@library-invoke-code) (set! g1752@g1368@library-visit-code g1368@library-visit-code) (set! g1751@g1366@library-invoke-state g1366@library-invoke-state) (set! g1750@g1364@library-visit-state g1364@library-visit-state) (set! g1749@g1362@library-env g1362@library-env) (set! g1748@g1360@library-subst g1360@library-subst) (set! g1747@g1358@library-inv* g1358@library-inv*) (set! g1746@g1356@library-vis* g1356@library-vis*) (set! g1745@g1354@library-imp* g1354@library-imp*) (set! g1744@g1352@library-version g1352@library-version) (set! g1743@g1350@library-name g1350@library-name) (set! g1742@g1348@library-id g1348@library-id) (set! g1741@g1346@make-library g1346@make-library) (set! g1740@g1344@library? g1344@library?) (set! g1739@g1341@g1333 g1341@g1333) (set! g1738@g1339@g1334 g1339@g1334) (set! g1737@g1337@g1332 g1337@g1332) (set! g1736@g1331@current-library-collection g1331@current-library-collection) (set! g1735@g1329@make-collection g1329@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (g1798@build-global-define g1911@build-lambda g1913@build-case-lambda g1915@build-let g1961@build-sequence g1963@build-void g1965@build-letrec g1967@build-letrec* g1969@build-library-letrec* g1971@build-receive) (begin (set! g1798@build-global-define (lambda (g1972@x) (g1963@build-void))) (set! g1911@build-lambda (lambda (g1974@ae g1975@vars g1976@exp) (list 'lambda g1975@vars g1976@exp))) (set! g1913@build-case-lambda (lambda (g1980@ae g1981@vars* g1982@exp*) ((lambda (g1987@build-error g1989@build-pred g1991@build-apply g1993@expand-case-lambda) (begin (set! g1987@build-error (lambda (g2040@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! g1989@build-pred (lambda (g2018@ae g2019@n g2020@vars) (call-with-values (lambda () ((letrec ((g2026@f (lambda (g2028@vars g2029@count) (if (pair? g2028@vars) (g2026@f (cdr g2028@vars) (+ g2029@count '1)) (if (null? g2028@vars) (values g2029@count '=) (values g2029@count '>=)))))) g2026@f) g2020@vars '0)) (lambda (g2032@g2024@count g2033@g2025@pred) ((lambda (g2036@pred g2037@count) (list (list 'primitive g2036@pred) g2019@n (list 'quote g2037@count))) g2033@g2025@pred g2032@g2024@count))))) (set! g1991@build-apply (lambda (g2010@ae g2011@g g2012@vars g2013@exp) (list '(primitive apply) (g1911@build-lambda g2010@ae g2012@vars g2013@exp) g2011@g))) (set! g1993@expand-case-lambda (lambda (g1994@ae g1995@vars g1996@exp*) ((lambda (g2000@g g2001@n) (list 'lambda g2000@g (g1915@build-let g1994@ae (list g2001@n) (list (list '(primitive length) g2000@g)) ((letrec ((g2004@f (lambda (g2006@vars* g2007@exp*) (if (null? g2006@vars*) (g1987@build-error g1994@ae) (list 'if (g1989@build-pred g1994@ae g2001@n (car g2006@vars*)) (g1991@build-apply g1994@ae g2000@g (car g2006@vars*) (car g2007@exp*)) (g2004@f (cdr g2006@vars*) (cdr g2007@exp*))))))) g2004@f) g1981@vars* g1996@exp*)))) (g1149@g913@gensym) (g1149@g913@gensym)))) (if (= (length g1982@exp*) '1) (g1911@build-lambda g1980@ae (car g1981@vars*) (car g1982@exp*)) (g1993@expand-case-lambda g1980@ae g1981@vars* g1982@exp*)))) '#f '#f '#f '#f))) (set! g1915@build-let (lambda (g2042@ae g2043@lhs* g2044@rhs* g2045@body) (cons (g1911@build-lambda g2042@ae g2043@lhs* g2045@body) g2044@rhs*))) (set! g1961@build-sequence (lambda (g2050@ae g2051@exps) ((letrec ((g2054@loop (lambda (g2056@exps) (if (null? (cdr g2056@exps)) (car g2056@exps) (if (equal? (car g2056@exps) (g1963@build-void)) (g2054@loop (cdr g2056@exps)) (cons 'begin g2056@exps)))))) g2054@loop) g2051@exps))) (set! g1963@build-void (lambda () '((primitive void)))) (set! g1965@build-letrec (lambda (g2058@ae g2059@vars g2060@val-exps g2061@body-exp) (if (null? g2059@vars) g2061@body-exp (list 'letrec (map list g2059@vars g2060@val-exps) g2061@body-exp)))) (set! g1967@build-letrec* (lambda (g2066@ae g2067@vars g2068@val-exps g2069@body-exp) (if (null? g2067@vars) g2069@body-exp (g1915@build-let g2066@ae g2067@vars (map (lambda (g2074@x) (list 'quote '#f)) g2067@vars) (g1961@build-sequence g2066@ae (append (map (lambda (g2076@lhs g2077@rhs) (list 'set! g2076@lhs g2077@rhs)) g2067@vars g2068@val-exps) (list g2069@body-exp))))))) (set! g1969@build-library-letrec* (lambda (g2080@ae g2081@name g2082@vars g2083@locs g2084@val-exps g2085@body-exp) (list 'library-letrec* g2081@name (map list g2082@vars g2083@locs g2084@val-exps) g2085@body-exp))) (set! g1971@build-receive (lambda (g2092@ae g2093@vars g2094@producer g2095@body*) (begin (display '"************** in ") (cons 'receive (cons g2093@vars (cons g2094@producer g2095@body*)))))) (begin (set! g2109@g1971@build-receive g1971@build-receive) (set! g2108@g1969@build-library-letrec* g1969@build-library-letrec*) (set! g2107@g1967@build-letrec* g1967@build-letrec*) (set! g2106@g1965@build-letrec g1965@build-letrec) (set! g2105@g1963@build-void g1963@build-void) (set! g2104@g1961@build-sequence g1961@build-sequence) (set! g2103@g1915@build-let g1915@build-let) (set! g2102@g1913@build-case-lambda g1913@build-case-lambda) (set! g2101@g1911@build-lambda g1911@build-lambda) (set! g2100@g1798@build-global-define g1798@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (g2124@file-options-macro g2126@set-cons g2128@set-union g2133@top-mark* g2135@top-marked? g2137@gen-lexical g2139@gen-global g2141@gen-label g2143@gen-top-level-label g2145@gen-define-label+loc g2147@gen-define-label g2153@g2148 g2155@g2150 g2157@g2149 g2160@rib? g2162@make-rib g2164@rib-sym* g2166@rib-mark** g2168@rib-label* g2170@rib-sealed/freq g2172@rib-cache g2174@set-rib-sym*! g2176@set-rib-mark**! g2178@set-rib-label*! g2180@set-rib-sealed/freq! g2182@set-rib-cache! g2184@make-empty-rib g2186@extend-rib! g2188@extend-rib/nc! g2190@make-rib-map g2192@seal-rib! g2194@unseal-rib! g2196@make-full-rib g2202@g2197 g2204@g2199 g2206@g2198 g2209@stx? g2211@make-stx g2213@stx-expr g2215@stx-mark* g2217@stx-subst* g2219@stx-ae* g2221@set-stx-expr! g2223@set-stx-mark*! g2225@set-stx-subst*! g2227@set-stx-ae*! g2229@rp g2231@datum->stx g2233@gen-mark g2235@anti-mark g2237@anti-mark? g2239@join-wraps g2241@mkstx g2243@add-mark g2245@add-subst g2247@syntax-kind? g2249@syntax-vector->list g2251@syntax-pair? g2253@syntax-vector? g2255@syntax-null? g2257@syntax-list? g2259@syntax-car g2261@syntax-cdr g2263@syntax->list g2265@id? g2267@id->sym g2269@same-marks? g2271@bound-id=? g2273@free-id=? g2275@valid-bound-ids? g2277@distinct-bound-ids? g2279@bound-id-member? g2281@self-evaluating? g2283@strip-annotations g2285@strip g2287@stx->datum g2289@same-marks*? g2291@id->label g2293@id->real-label g2295@label->binding g2297@make-binding g2299@binding-type g2301@binding-value g2303@raise-unbound-error g2305@syntax-type g2319@sanitize-binding g2321@make-variable-transformer g2323@variable-transformer? g2325@variable-transformer-procedure g2327@make-eval-transformer g2638@parse-define g2640@parse-define-syntax g2642@scheme-stx-hashtable g2644@scheme-stx g2646@lexical-var g2648@lexical-mutable? g2650@set-lexical-mutable! g2652@add-lexical g2654@add-lexicals g2656@letrec-helper g2658@letrec-transformer g2660@letrec*-transformer g2662@fluid-let-syntax-transformer g2664@type-descriptor-transformer g2666@record-type-descriptor-transformer g2668@record-constructor-descriptor-transformer g2670@when-macro g2672@unless-macro g2674@if-transformer g2676@and-transformer g2678@or-transformer g2680@case-macro g2682@quote-transformer g2684@case-lambda-transformer g2686@lambda-transformer g2688@bless g2690@with-syntax-macro g2692@invalid-fmls-error g2694@let-macro g2696@let-values-macro g2698@let*-values-macro g2700@trace-lambda-macro g2702@trace-define-macro g2704@trace-define-syntax-macro g2706@trace-let/rec-syntax g2708@trace-let-syntax-macro g2710@trace-letrec-syntax-macro g2712@guard-macro g2714@define-enumeration-macro g2716@time-macro g2718@delay-macro g2720@assert-macro g2722@endianness-macro g2724@identifier-syntax-macro g2726@do-macro g2728@let*-macro g2730@or-macro g2732@and-macro g2734@cond-macro g2736@do-include g2738@include-macro g2740@include-into-macro g2742@syntax-rules-macro g2744@quasiquote-macro g2746@quasisyntax-macro g2748@define-struct-macro g2750@define-record-type-macro g2752@define-condition-type-macro g2754@incorrect-usage-macro g2756@parameterize-macro g2758@foreign-call-transformer g2760@convert-pattern g2762@syntax-dispatch g2764@ellipsis? g2766@underscore? g2768@verify-literals g2770@syntax-case-transformer g2772@ellipsis-map g2774@syntax-transformer g2776@core-macro-transformer g2778@symbol-macro g2780@macro-transformer g2782@local-macro-transformer g2784@do-macro-call g2786@chi-macro g2788@chi-local-macro g2790@chi-global-macro g2792@chi-expr* g2794@chi-application g2796@chi-expr g2798@chi-set! g2800@verify-formals g2802@chi-lambda-clause g2804@chi-lambda-clause* g2806@chi-defun g2808@chi-rhs g2810@expand-interaction-rhs*/init* g2812@chi-rhs* g2814@find-bound=? g2816@find-dups g2818@chi-internal g2820@parse-module g2826@g2821 g2828@g2823 g2830@g2822 g2833@module-interface? g2835@make-module-interface g2837@module-interface-first-mark g2839@module-interface-exp-id-vec g2841@module-interface-exp-lab-vec g2843@set-module-interface-first-mark! g2845@set-module-interface-exp-id-vec! g2847@set-module-interface-exp-lab-vec! g2849@module-interface-exp-id* g2851@chi-internal-module g2853@chi-body* g2855@expand-transformer g2857@parse-exports g2859@parse-library-name g2861@parse-library g2863@parse-import-spec* g2865@make-top-rib g2867@make-collector g2869@inv-collector g2871@vis-collector g2873@imp-collector g2875@chi-library-internal g2877@chi-interaction-expr g2879@library-body-expander g2881@core-library-expander g2883@parse-top-level-program g2885@top-level-expander g2891@g2886 g2893@g2888 g2895@g2887 g2898@env? g2900@make-env g2902@env-names g2904@env-labels g2906@env-itc g2908@set-env-names! g2910@set-env-labels! g2912@set-env-itc! g2914@rp g2920@g2915 g2922@g2917 g2924@g2916 g2927@interaction-env? g2929@make-interaction-env g2931@interaction-env-rib g2933@interaction-env-r g2935@interaction-env-locs g2937@set-interaction-env-rib! g2939@set-interaction-env-r! g2941@set-interaction-env-locs! g2943@rp g2945@interaction-environment-symbols g2947@environment-bindings g2949@parse-binding g2951@environment? g2953@environment-symbols g2955@environment g2957@null-environment g2959@scheme-report-environment g2961@expand g2963@eval g2965@library-expander g2967@boot-library-expand g2969@rev-map-append g2971@build-exports g2973@make-export-subst g2975@make-export-env/macros g2977@generate-temporaries g2979@free-identifier=? g2981@bound-identifier=? g2983@make-source-condition g2985@extract-position-condition g2987@expression-position g2989@assertion-error g2991@syntax-error g2993@syntax-violation* g2995@syntax-violation g2997@identifier? g2999@datum->syntax g3001@syntax->datum g3003@compile-r6rs-top-level g3005@pre-compile-r6rs-top-level g3007@interaction-environment g3009@top-level-context) (begin (set! g2124@file-options-macro (lambda (g3010@x) ((lambda (g3013@valid-option?) (begin (set! g3013@valid-option? (lambda (g3022@x) (and (g2265@id? g3022@x) (memq (g2267@id->sym g3022@x) '(no-fail no-create no-truncate))))) ((lambda (g3014@t) ((lambda (g3016@ls/false) (if (and g3016@ls/false (apply (lambda (g3018@opt*) (for-all g3013@valid-option? g3018@opt*)) g3016@ls/false)) (apply (lambda (g3020@opt*) (g2688@bless (list 'make-file-options (list 'quote g3020@opt*)))) g3016@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g3014@t))) (g2762@syntax-dispatch g3014@t '(_ . each-any)))) g3010@x))) '#f))) (set! g2126@set-cons (lambda (g3024@x g3025@ls) (if (memq g3024@x g3025@ls) g3025@ls (cons g3024@x g3025@ls)))) (set! g2128@set-union (lambda (g3028@ls1 g3029@ls2) (if (null? g3028@ls1) g3029@ls2 (if (memq (car g3028@ls1) g3029@ls2) (g2128@set-union (cdr g3028@ls1) g3029@ls2) (cons (car g3028@ls1) (g2128@set-union (cdr g3028@ls1) g3029@ls2)))))) (set! g2133@top-mark* '(top)) (set! g2135@top-marked? (lambda (g3032@m*) (memq 'top g3032@m*))) (set! g2137@gen-lexical (lambda (g3034@sym) (if (symbol? g3034@sym) (g1149@g913@gensym g3034@sym) (if (g2209@stx? g3034@sym) (g2137@gen-lexical (g2267@id->sym g3034@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" g3034@sym))))) (set! g2139@gen-global (lambda (g3036@x) (g2137@gen-lexical g3036@x))) (set! g2141@gen-label (lambda (g3038@_) (g1149@g913@gensym))) (set! g2143@gen-top-level-label (lambda (g3040@id g3041@rib) ((lambda (g3045@find) (begin (set! g3045@find (lambda (g3056@sym g3057@mark* g3058@sym* g3059@mark** g3060@label*) (and (pair? g3058@sym*) (if (and (eq? g3056@sym (car g3058@sym*)) (g2269@same-marks? g3057@mark* (car g3059@mark**))) (car g3060@label*) (g3045@find g3056@sym g3057@mark* (cdr g3058@sym*) (cdr g3059@mark**) (cdr g3060@label*)))))) ((lambda (g3046@sym g3047@mark*) ((lambda (g3050@sym*) ((lambda (g3052@t) (if g3052@t ((lambda (g3054@label) (if (g1790@g1444@imported-label->binding g3054@label) (g1149@g913@gensym) g3054@label)) g3052@t) (g1149@g913@gensym))) (and (memq g3046@sym (g2164@rib-sym* g3041@rib)) (g3045@find g3046@sym g3047@mark* g3050@sym* (g2166@rib-mark** g3041@rib) (g2168@rib-label* g3041@rib))))) (g2164@rib-sym* g3041@rib))) (g2267@id->sym g3040@id) (g2215@stx-mark* g3040@id)))) '#f))) (set! g2145@gen-define-label+loc (lambda (g3066@id g3067@rib) ((lambda (g3070@t) (if g3070@t ((lambda (g3072@env) ((lambda (g3074@label g3075@locs) (values g3074@label ((lambda (g3078@t) (if g3078@t (cdr g3078@t) ((lambda (g3080@loc) (begin (g2941@set-interaction-env-locs! g3072@env (cons (cons g3074@label g3080@loc) g3075@locs)) g3080@loc)) (g2137@gen-lexical g3066@id)))) (assq g3074@label g3075@locs)))) (g2143@gen-top-level-label g3066@id g3067@rib) (g2935@interaction-env-locs g3072@env))) g3070@t) (values (g1149@g913@gensym) (g2137@gen-lexical g3066@id)))) (g3009@top-level-context)))) (set! g2147@gen-define-label (lambda (g3082@id g3083@rib) (if (g3009@top-level-context) (g2143@gen-top-level-label g3082@id g3083@rib) (g1149@g913@gensym)))) (set! g2153@g2148 (make-record-type-descriptor 'rib '#f 'g2151 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! g2155@g2150 '#f) (set! g2157@g2149 (make-record-constructor-descriptor g2153@g2148 '#f g2155@g2150)) (set! g2160@rib? (record-predicate g2153@g2148)) (set! g2162@make-rib (record-constructor g2157@g2149)) (set! g2164@rib-sym* (record-accessor g2153@g2148 '0)) (set! g2166@rib-mark** (record-accessor g2153@g2148 '1)) (set! g2168@rib-label* (record-accessor g2153@g2148 '2)) (set! g2170@rib-sealed/freq (record-accessor g2153@g2148 '3)) (set! g2172@rib-cache (record-accessor g2153@g2148 '4)) (set! g2174@set-rib-sym*! (record-mutator g2153@g2148 '0)) (set! g2176@set-rib-mark**! (record-mutator g2153@g2148 '1)) (set! g2178@set-rib-label*! (record-mutator g2153@g2148 '2)) (set! g2180@set-rib-sealed/freq! (record-mutator g2153@g2148 '3)) (set! g2182@set-rib-cache! (record-mutator g2153@g2148 '4)) (set! g2184@make-empty-rib (lambda () (g2162@make-rib '() '() '() '#f '#f))) (set! g2186@extend-rib! (lambda (g3086@rib g3087@id g3088@label) ((lambda (g3093@find) (begin (set! g3093@find (lambda (g3106@sym g3107@mark* g3108@sym* g3109@mark** g3110@label*) (and (pair? g3108@sym*) (if (and (eq? g3106@sym (car g3108@sym*)) (g2269@same-marks? g3107@mark* (car g3109@mark**))) g3110@label* (g3093@find g3106@sym g3107@mark* (cdr g3108@sym*) (cdr g3109@mark**) (cdr g3110@label*)))))) (begin (if (g2170@rib-sealed/freq g3086@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" g3086@rib) (void)) ((lambda (g3094@sym g3095@mark*) ((lambda (g3098@sym*) ((lambda (g3100@t) (if g3100@t ((lambda (g3102@p) (if (not (eq? g3088@label (car g3102@p))) (if (g3009@top-level-context) (set-car! g3102@p g3088@label) (g2995@syntax-violation '#f '"multiple definitions of identifier" g3087@id)) (void))) g3100@t) (begin (if (g2172@rib-cache g3086@rib) (hashtable-update! (g2172@rib-cache g3086@rib) g3094@sym (lambda (g3104@e) (cons (cons g3095@mark* g3088@label) g3104@e)) '()) (void)) (g2174@set-rib-sym*! g3086@rib (cons g3094@sym g3098@sym*)) (g2176@set-rib-mark**! g3086@rib (cons g3095@mark* (g2166@rib-mark** g3086@rib))) (g2178@set-rib-label*! g3086@rib (cons g3088@label (g2168@rib-label* g3086@rib)))))) (and (memq g3094@sym (g2164@rib-sym* g3086@rib)) (g3093@find g3094@sym g3095@mark* g3098@sym* (g2166@rib-mark** g3086@rib) (g2168@rib-label* g3086@rib))))) (g2164@rib-sym* g3086@rib))) (g2267@id->sym g3087@id) (g2215@stx-mark* g3087@id))))) '#f))) (set! g2188@extend-rib/nc! (lambda (g3116@rib g3117@id g3118@label) ((lambda (g3122@sym g3123@mark*) ((lambda (g3126@sym*) (begin (if (g2172@rib-cache g3116@rib) (hashtable-update! (g2172@rib-cache g3116@rib) g3122@sym (lambda (g3128@e) (cons (cons g3123@mark* g3118@label) g3128@e)) '()) (void)) (g2174@set-rib-sym*! g3116@rib (cons g3122@sym g3126@sym*)) (g2176@set-rib-mark**! g3116@rib (cons g3123@mark* (g2166@rib-mark** g3116@rib))) (g2178@set-rib-label*! g3116@rib (cons g3118@label (g2168@rib-label* g3116@rib))))) (g2164@rib-sym* g3116@rib))) (g2267@id->sym g3117@id) (g2215@stx-mark* g3117@id)))) (set! g2190@make-rib-map (lambda (g3130@sym*) ((lambda (g3132@ht) ((letrec ((g3134@f (lambda (g3136@i g3137@sym*) (if (null? g3137@sym*) g3132@ht (begin (hashtable-update! g3132@ht (car g3137@sym*) (lambda (g3140@x) (cons g3136@i g3140@x)) '()) (g3134@f (+ g3136@i '1) (cdr g3137@sym*))))))) g3134@f) '0 g3130@sym*)) (make-eq-hashtable)))) (set! g2192@seal-rib! (lambda (g3142@rib) ((lambda (g3144@sym*) (if (not (null? g3144@sym*)) (begin (g2174@set-rib-sym*! g3142@rib (list->vector g3144@sym*)) (g2176@set-rib-mark**! g3142@rib (list->vector (g2166@rib-mark** g3142@rib))) (g2178@set-rib-label*! g3142@rib (list->vector (g2168@rib-label* g3142@rib))) (g2180@set-rib-sealed/freq! g3142@rib (g2190@make-rib-map g3144@sym*))) (void))) (g2164@rib-sym* g3142@rib)))) (set! g2194@unseal-rib! (lambda (g3146@rib) (if (g2170@rib-sealed/freq g3146@rib) (begin (g2180@set-rib-sealed/freq! g3146@rib '#f) (g2174@set-rib-sym*! g3146@rib (vector->list (g2164@rib-sym* g3146@rib))) (g2176@set-rib-mark**! g3146@rib (vector->list (g2166@rib-mark** g3146@rib))) (g2178@set-rib-label*! g3146@rib (vector->list (g2168@rib-label* g3146@rib)))) (void)))) (set! g2196@make-full-rib (lambda (g3148@id* g3149@label*) ((lambda (g3152@r) (begin (g2192@seal-rib! g3152@r) g3152@r)) (g2162@make-rib (map g2267@id->sym g3148@id*) (map g2215@stx-mark* g3148@id*) g3149@label* '#f '#f)))) (set! g2202@g2197 (make-record-type-descriptor 'stx '#f 'g2200 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! g2204@g2199 '#f) (set! g2206@g2198 (make-record-constructor-descriptor g2202@g2197 '#f g2204@g2199)) (set! g2209@stx? (record-predicate g2202@g2197)) (set! g2211@make-stx (record-constructor g2206@g2198)) (set! g2213@stx-expr (record-accessor g2202@g2197 '0)) (set! g2215@stx-mark* (record-accessor g2202@g2197 '1)) (set! g2217@stx-subst* (record-accessor g2202@g2197 '2)) (set! g2219@stx-ae* (record-accessor g2202@g2197 '3)) (set! g2221@set-stx-expr! (record-mutator g2202@g2197 '0)) (set! g2223@set-stx-mark*! (record-mutator g2202@g2197 '1)) (set! g2225@set-stx-subst*! (record-mutator g2202@g2197 '2)) (set! g2227@set-stx-ae*! (record-mutator g2202@g2197 '3)) (set! g2229@rp (g1160@g935@make-record-printer 'stx (lambda (g3154@x g3155@p g3156@wr) (begin (display '"#<syntax " g3155@p) (write (g2287@stx->datum g3154@x) g3155@p) ((lambda (g3160@expr) (if (g1152@g919@annotation? g3160@expr) ((lambda (g3162@src) (if (pair? g3162@src) (begin (display '" [" g3155@p) (display (cdr g3162@src) g3155@p) (display '" of " g3155@p) (display (car g3162@src) g3155@p) (display '"]" g3155@p)) (void))) (g1153@g921@annotation-source g3160@expr)) (void))) (g2213@stx-expr g3154@x)) (display '">" g3155@p))))) (set! g2231@datum->stx (lambda (g3164@id g3165@datum) (g2211@make-stx g3165@datum (g2215@stx-mark* g3164@id) (g2217@stx-subst* g3164@id) (g2219@stx-ae* g3164@id)))) (set! g2233@gen-mark (lambda () (string '#\m))) (set! g2235@anti-mark '#f) (set! g2237@anti-mark? not) (set! g2239@join-wraps (lambda (g3168@m1* g3169@s1* g3170@ae1* g3171@e) ((lambda (g3177@cancel) (begin (set! g3177@cancel (lambda (g3184@ls1 g3185@ls2) ((letrec ((g3188@f (lambda (g3190@x g3191@ls1) (if (null? g3191@ls1) (cdr g3185@ls2) (cons g3190@x (g3188@f (car g3191@ls1) (cdr g3191@ls1))))))) g3188@f) (car g3184@ls1) (cdr g3184@ls1)))) ((lambda (g3178@m2* g3179@s2* g3180@ae2*) (if (and (not (null? g3168@m1*)) (not (null? g3178@m2*)) (g2237@anti-mark? (car g3178@m2*))) (values (g3177@cancel g3168@m1* g3178@m2*) (g3177@cancel g3169@s1* g3179@s2*) (g3177@cancel g3170@ae1* g3180@ae2*)) (values (append g3168@m1* g3178@m2*) (append g3169@s1* g3179@s2*) (append g3170@ae1* g3180@ae2*)))) (g2215@stx-mark* g3171@e) (g2217@stx-subst* g3171@e) (g2219@stx-ae* g3171@e)))) '#f))) (set! g2241@mkstx (lambda (g3194@e g3195@m* g3196@s* g3197@ae*) (if (and (g2209@stx? g3194@e) (not (g2135@top-marked? g3195@m*))) (call-with-values (lambda () (g2239@join-wraps g3195@m* g3196@s* g3197@ae* g3194@e)) (lambda (g3205@g3202@m* g3206@g3203@s* g3207@g3204@ae*) ((lambda (g3211@ae* g3212@s* g3213@m*) (g2211@make-stx (g2213@stx-expr g3194@e) g3213@m* g3212@s* g3211@ae*)) g3207@g3204@ae* g3206@g3203@s* g3205@g3202@m*))) (g2211@make-stx g3194@e g3195@m* g3196@s* g3197@ae*)))) (set! g2243@add-mark (lambda (g3217@m g3218@e g3219@ae) (g2241@mkstx g3218@e (list g3217@m) '(shift) (list g3219@ae)))) (set! g2245@add-subst (lambda (g3223@subst g3224@e) (g2241@mkstx g3224@e '() (list g3223@subst) '()))) (set! g2247@syntax-kind? (lambda (g3227@x g3228@p?) (if (g2209@stx? g3227@x) (g2247@syntax-kind? (g2213@stx-expr g3227@x) g3228@p?) (if (g1152@g919@annotation? g3227@x) (g2247@syntax-kind? (g1154@g923@annotation-expression g3227@x) g3228@p?) (g3228@p? g3227@x))))) (set! g2249@syntax-vector->list (lambda (g3231@x) (if (g2209@stx? g3231@x) ((lambda (g3233@ls g3234@m* g3235@s* g3236@ae*) (map (lambda (g3241@x) (g2241@mkstx g3241@x g3234@m* g3235@s* g3236@ae*)) g3233@ls)) (g2249@syntax-vector->list (g2213@stx-expr g3231@x)) (g2215@stx-mark* g3231@x) (g2217@stx-subst* g3231@x) (g2219@stx-ae* g3231@x)) (if (g1152@g919@annotation? g3231@x) (g2249@syntax-vector->list (g1154@g923@annotation-expression g3231@x)) (if (vector? g3231@x) (vector->list g3231@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" g3231@x)))))) (set! g2251@syntax-pair? (lambda (g3243@x) (g2247@syntax-kind? g3243@x pair?))) (set! g2253@syntax-vector? (lambda (g3245@x) (g2247@syntax-kind? g3245@x vector?))) (set! g2255@syntax-null? (lambda (g3247@x) (g2247@syntax-kind? g3247@x null?))) (set! g2257@syntax-list? (lambda (g3249@x) (or (g2255@syntax-null? g3249@x) (and (g2251@syntax-pair? g3249@x) (g2257@syntax-list? (g2261@syntax-cdr g3249@x)))))) (set! g2259@syntax-car (lambda (g3251@x) (if (g2209@stx? g3251@x) (g2241@mkstx (g2259@syntax-car (g2213@stx-expr g3251@x)) (g2215@stx-mark* g3251@x) (g2217@stx-subst* g3251@x) (g2219@stx-ae* g3251@x)) (if (g1152@g919@annotation? g3251@x) (g2259@syntax-car (g1154@g923@annotation-expression g3251@x)) (if (pair? g3251@x) (car g3251@x) (assertion-violation 'syntax-car '"BUG: not a pair" g3251@x)))))) (set! g2261@syntax-cdr (lambda (g3253@x) (if (g2209@stx? g3253@x) (g2241@mkstx (g2261@syntax-cdr (g2213@stx-expr g3253@x)) (g2215@stx-mark* g3253@x) (g2217@stx-subst* g3253@x) (g2219@stx-ae* g3253@x)) (if (g1152@g919@annotation? g3253@x) (g2261@syntax-cdr (g1154@g923@annotation-expression g3253@x)) (if (pair? g3253@x) (cdr g3253@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" g3253@x)))))) (set! g2263@syntax->list (lambda (g3255@x) (if (g2251@syntax-pair? g3255@x) (cons (g2259@syntax-car g3255@x) (g2263@syntax->list (g2261@syntax-cdr g3255@x))) (if (g2255@syntax-null? g3255@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" g3255@x))))) (set! g2265@id? (lambda (g3257@x) (and (g2209@stx? g3257@x) ((lambda (g3259@expr) (symbol? (if (g1152@g919@annotation? g3259@expr) (g1151@g917@annotation-stripped g3259@expr) g3259@expr))) (g2213@stx-expr g3257@x))))) (set! g2267@id->sym (lambda (g3261@x) (begin (if (not (g2209@stx? g3261@x)) (error 'id->sym '"BUG in ikarus: not an id" g3261@x) (void)) ((lambda (g3263@expr) ((lambda (g3265@sym) (if (symbol? g3265@sym) g3265@sym (error 'id->sym '"BUG in ikarus: not an id" g3261@x))) (if (g1152@g919@annotation? g3263@expr) (g1151@g917@annotation-stripped g3263@expr) g3263@expr))) (g2213@stx-expr g3261@x))))) (set! g2269@same-marks? (lambda (g3267@x g3268@y) (or (and (null? g3267@x) (null? g3268@y)) (and (pair? g3267@x) (pair? g3268@y) (eq? (car g3267@x) (car g3268@y)) (g2269@same-marks? (cdr g3267@x) (cdr g3268@y)))))) (set! g2271@bound-id=? (lambda (g3271@x g3272@y) (and (eq? (g2267@id->sym g3271@x) (g2267@id->sym g3272@y)) (g2269@same-marks? (g2215@stx-mark* g3271@x) (g2215@stx-mark* g3272@y))))) (set! g2273@free-id=? (lambda (g3275@i g3276@j) ((lambda (g3279@t0 g3280@t1) (if (or g3279@t0 g3280@t1) (eq? g3279@t0 g3280@t1) (eq? (g2267@id->sym g3275@i) (g2267@id->sym g3276@j)))) (g2293@id->real-label g3275@i) (g2293@id->real-label g3276@j)))) (set! g2275@valid-bound-ids? (lambda (g3283@id*) (and (for-all g2265@id? g3283@id*) (g2277@distinct-bound-ids? g3283@id*)))) (set! g2277@distinct-bound-ids? (lambda (g3285@id*) (or (null? g3285@id*) (and (not (g2279@bound-id-member? (car g3285@id*) (cdr g3285@id*))) (g2277@distinct-bound-ids? (cdr g3285@id*)))))) (set! g2279@bound-id-member? (lambda (g3287@id g3288@id*) (and (pair? g3288@id*) (or (g2271@bound-id=? g3287@id (car g3288@id*)) (g2279@bound-id-member? g3287@id (cdr g3288@id*)))))) (set! g2281@self-evaluating? (lambda (g3291@x) (or (number? g3291@x) (string? g3291@x) (char? g3291@x) (boolean? g3291@x) (regexp? g3291@x) (bytevector? g3291@x)))) (set! g2283@strip-annotations (lambda (g3293@x) (if (pair? g3293@x) (cons (g2283@strip-annotations (car g3293@x)) (g2283@strip-annotations (cdr g3293@x))) (if (vector? g3293@x) (vector-map g2283@strip-annotations g3293@x) (if (g1152@g919@annotation? g3293@x) (g1151@g917@annotation-stripped g3293@x) g3293@x))))) (set! g2285@strip (lambda (g3295@x g3296@m*) (if (g2135@top-marked? g3296@m*) (if (or (g1152@g919@annotation? g3295@x) (and (pair? g3295@x) (g1152@g919@annotation? (car g3295@x))) (and (vector? g3295@x) (> (vector-length g3295@x) '0) (g1152@g919@annotation? (vector-ref g3295@x '0)))) (g2283@strip-annotations g3295@x) g3295@x) ((letrec ((g3299@f (lambda (g3301@x) (if (g2209@stx? g3301@x) (g2285@strip (g2213@stx-expr g3301@x) (g2215@stx-mark* g3301@x)) (if (g1152@g919@annotation? g3301@x) (g1151@g917@annotation-stripped g3301@x) (if (pair? g3301@x) ((lambda (g3303@a g3304@d) (if (and (eq? g3303@a (car g3301@x)) (eq? g3304@d (cdr g3301@x))) g3301@x (cons g3303@a g3304@d))) (g3299@f (car g3301@x)) (g3299@f (cdr g3301@x))) (if (vector? g3301@x) ((lambda (g3307@old) ((lambda (g3309@new) (if (for-all eq? g3307@old g3309@new) g3301@x (list->vector g3309@new))) (map g3299@f g3307@old))) (vector->list g3301@x)) g3301@x))))))) g3299@f) g3295@x)))) (set! g2287@stx->datum (lambda (g3311@x) (g2285@strip g3311@x '()))) (set! g2289@same-marks*? (lambda (g3313@mark* g3314@mark** g3315@si) (if (null? g3315@si) '#f (if (g2269@same-marks? g3313@mark* (vector-ref g3314@mark** (car g3315@si))) (car g3315@si) (g2289@same-marks*? g3313@mark* g3314@mark** (cdr g3315@si)))))) (set! g2291@id->label (lambda (g3319@id) (or (g2293@id->real-label g3319@id) ((lambda (g3321@t) (if g3321@t ((lambda (g3323@env) ((lambda (g3325@rib) (call-with-values (lambda () (g2145@gen-define-label+loc g3319@id g3325@rib)) (lambda (g3329@g3327@lab g3330@g3328@loc_) ((lambda (g3333@loc_ g3334@lab) (begin (g2186@extend-rib! g3325@rib g3319@id g3334@lab) g3334@lab)) g3330@g3328@loc_ g3329@g3327@lab)))) (g2931@interaction-env-rib g3323@env))) g3321@t) '#f)) (g3009@top-level-context))))) (set! g2293@id->real-label (lambda (g3337@id) ((lambda (g3339@sym) ((letrec ((g3341@search (lambda (g3343@subst* g3344@mark*) (if (null? g3343@subst*) '#f (if (eq? (car g3343@subst*) 'shift) (g3341@search (cdr g3343@subst*) (cdr g3344@mark*)) ((lambda (g3347@rib) ((lambda (g3349@t) (if g3349@t ((lambda (g3351@ht) ((lambda (g3353@si) ((lambda (g3355@i) (if g3355@i (vector-ref (g2168@rib-label* g3347@rib) g3355@i) (g3341@search (cdr g3343@subst*) g3344@mark*))) (and g3353@si (g2289@same-marks*? g3344@mark* (g2166@rib-mark** g3347@rib) (reverse g3353@si))))) (hashtable-ref g3351@ht g3339@sym '#f))) g3349@t) ((letrec ((g3357@f (lambda (g3359@sym* g3360@mark** g3361@label*) (if (null? g3359@sym*) (g3341@search (cdr g3343@subst*) g3344@mark*) (if (and (eq? (car g3359@sym*) g3339@sym) (g2269@same-marks? (car g3360@mark**) g3344@mark*)) (car g3361@label*) (g3357@f (cdr g3359@sym*) (cdr g3360@mark**) (cdr g3361@label*))))))) g3357@f) (g2164@rib-sym* g3347@rib) (g2166@rib-mark** g3347@rib) (g2168@rib-label* g3347@rib)))) (g2170@rib-sealed/freq g3347@rib))) (car g3343@subst*))))))) g3341@search) (g2217@stx-subst* g3337@id) (g2215@stx-mark* g3337@id))) (g2267@id->sym g3337@id)))) (set! g2295@label->binding (lambda (g3365@x g3366@r) ((lambda (g3369@t) (if g3369@t ((lambda (g3371@b) (if (and (pair? g3371@b) (eq? (car g3371@b) '$core-rtd)) (cons '$rtd (map g2688@bless (cdr g3371@b))) (if (and (pair? g3371@b) (eq? (car g3371@b) 'global-rtd)) ((lambda (g3373@lib g3374@loc) (cons '$rtd (symbol-value g3374@loc))) (cadr g3371@b) (cddr g3371@b)) g3371@b))) g3369@t) ((lambda (g3377@t) (if g3377@t (cdr g3377@t) ((lambda (g3379@t) (if g3379@t ((lambda (g3381@env) ((lambda (g3383@t) (if g3383@t ((lambda (g3385@p) (cons* 'lexical (cdr g3385@p) '#f)) g3383@t) '(displaced-lexical . #f))) (assq g3365@x (g2935@interaction-env-locs g3381@env)))) g3379@t) '(displaced-lexical . #f))) (g3009@top-level-context)))) (assq g3365@x g3366@r)))) (g1790@g1444@imported-label->binding g3365@x)))) (set! g2297@make-binding cons) (set! g2299@binding-type car) (set! g2301@binding-value cdr) (set! g2303@raise-unbound-error (lambda (g3387@id) (g2993@syntax-violation* '#f '"unbound identifier" g3387@id (g10183@g9745@make-undefined-violation)))) (set! g2305@syntax-type (lambda (g3389@e g3390@r) (if (g2265@id? g3389@e) ((lambda (g3393@id) ((lambda (g3395@label) ((lambda (g3397@b) ((lambda (g3399@type) ((lambda () (begin (if (not g3395@label) (g2303@raise-unbound-error g3393@id) (void)) ((lambda (g3401@t) (if (memv g3401@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values g3399@type (g2301@binding-value g3397@b) g3393@id) (values 'other '#f '#f))) g3399@type))))) (g2299@binding-type g3397@b))) (g2295@label->binding g3395@label g3390@r))) (g2291@id->label g3393@id))) g3389@e) (if (g2251@syntax-pair? g3389@e) ((lambda (g3403@id) (if (g2265@id? g3403@id) ((lambda (g3405@label) ((lambda (g3407@b) ((lambda (g3409@type) ((lambda () (begin (if (not g3405@label) (g2303@raise-unbound-error g3403@id) (void)) ((lambda (g3411@t) (if (memv g3411@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values g3409@type (g2301@binding-value g3407@b) g3403@id) (values 'call '#f '#f))) g3409@type))))) (g2299@binding-type g3407@b))) (g2295@label->binding g3405@label g3390@r))) (g2291@id->label g3403@id)) (values 'call '#f '#f))) (g2259@syntax-car g3389@e)) ((lambda (g3413@d) (if (g2281@self-evaluating? g3413@d) (values 'constant g3413@d '#f) (values 'other '#f '#f))) (g2287@stx->datum g3389@e)))))) (set! g2319@sanitize-binding (lambda (g3415@x g3416@src) (if (procedure? g3415@x) (cons* 'local-macro g3415@x g3416@src) (if (and (pair? g3415@x) (eq? (car g3415@x) 'macro!) (procedure? (cdr g3415@x))) (cons* 'local-macro! (cdr g3415@x) g3416@src) (if (and (pair? g3415@x) (eq? (car g3415@x) '$rtd)) g3415@x (assertion-violation 'expand '"invalid transformer" g3415@x)))))) (set! g2321@make-variable-transformer (lambda (g3419@x) (if (procedure? g3419@x) (cons 'macro! g3419@x) (assertion-violation 'make-variable-transformer '"not a procedure" g3419@x)))) (set! g2323@variable-transformer? (lambda (g3421@x) (and (pair? g3421@x) (eq? (car g3421@x) 'macro!) (procedure? (cdr g3421@x))))) (set! g2325@variable-transformer-procedure (lambda (g3423@x) (if (g2323@variable-transformer? g3423@x) (cdr g3423@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" g3423@x)))) (set! g2327@make-eval-transformer (lambda (g3425@x) (g2319@sanitize-binding (eval-core (g1247@g1175@expanded->core g3425@x)) g3425@x))) (set! g2638@parse-define (lambda (g3427@x) ((lambda (g3429@t) ((lambda (g3431@ls/false) (if (and g3431@ls/false (apply (lambda (g3433@id g3434@fmls g3435@b g3436@b*) (g2265@id? g3433@id)) g3431@ls/false)) (apply (lambda (g3441@id g3442@fmls g3443@b g3444@b*) (begin (g2800@verify-formals g3442@fmls g3427@x) (values g3441@id (cons 'defun (cons g3442@fmls (cons g3443@b g3444@b*)))))) g3431@ls/false) ((lambda (g3449@t) ((lambda (g3451@ls/false) (if (and g3451@ls/false (apply (lambda (g3453@id g3454@val) (g2265@id? g3453@id)) g3451@ls/false)) (apply (lambda (g3457@id g3458@val) (values g3457@id (cons 'expr g3458@val))) g3451@ls/false) ((lambda (g3461@t) ((lambda (g3463@ls/false) (if (and g3463@ls/false (apply (lambda (g3465@id) (g2265@id? g3465@id)) g3463@ls/false)) (apply (lambda (g3467@id) (values g3467@id (cons 'expr (g2688@bless '(void))))) g3463@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g3461@t))) (g2762@syntax-dispatch g3461@t '(_ any)))) g3449@t))) (g2762@syntax-dispatch g3449@t '(_ any any)))) g3429@t))) (g2762@syntax-dispatch g3429@t '(_ (any . any) any . each-any)))) g3427@x))) (set! g2640@parse-define-syntax (lambda (g3469@x) ((lambda (g3471@t) ((lambda (g3473@ls/false) (if (and g3473@ls/false (apply (lambda (g3475@id g3476@val) (g2265@id? g3475@id)) g3473@ls/false)) (apply (lambda (g3479@id g3480@val) (values g3479@id g3480@val)) g3473@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g3471@t))) (g2762@syntax-dispatch g3471@t '(_ any any)))) g3469@x))) (set! g2642@scheme-stx-hashtable (make-eq-hashtable)) (set! g2644@scheme-stx (lambda (g3483@sym) (or (hashtable-ref g2642@scheme-stx-hashtable g3483@sym '#f) ((lambda (g3485@subst) ((lambda (g3487@stx) ((lambda (g3489@stx) ((lambda () (begin (hashtable-set! g2642@scheme-stx-hashtable g3483@sym g3489@stx) g3489@stx)))) ((lambda (g3491@t) (if g3491@t ((lambda (g3493@x) ((lambda (g3495@name g3496@label) (g2245@add-subst (g2162@make-rib (list g3495@name) (list g2133@top-mark*) (list g3496@label) '#f '#f) g3487@stx)) (car g3493@x) (cdr g3493@x))) g3491@t) g3487@stx)) (assq g3483@sym g3485@subst)))) (g2211@make-stx g3483@sym g2133@top-mark* '() '()))) (g1748@g1360@library-subst (g1784@g1432@find-library-by-name '(psyntax system $all))))))) (set! g2646@lexical-var car) (set! g2648@lexical-mutable? cdr) (set! g2650@set-lexical-mutable! set-cdr!) (set! g2652@add-lexical (lambda (g3499@lab g3500@lex g3501@r) (cons (cons* g3499@lab 'lexical g3500@lex '#f) g3501@r))) (set! g2654@add-lexicals (lambda (g3505@lab* g3506@lex* g3507@r) (if (null? g3505@lab*) g3507@r (g2654@add-lexicals (cdr g3505@lab*) (cdr g3506@lex*) (g2652@add-lexical (car g3505@lab*) (car g3506@lex*) g3507@r))))) (set! g2656@letrec-helper (lambda (g3511@e g3512@r g3513@mr g3514@build) ((lambda (g3519@t) ((lambda (g3521@ls/false) (if g3521@ls/false (apply (lambda (g3523@lhs* g3524@rhs* g3525@b g3526@b*) (if (not (g2275@valid-bound-ids? g3523@lhs*)) (g2692@invalid-fmls-error g3511@e g3523@lhs*) ((lambda (g3531@lex* g3532@lab*) ((lambda (g3535@rib g3536@r) ((lambda (g3539@body g3540@rhs*) (g3514@build '#f g3531@lex* g3540@rhs* g3539@body)) (g2818@chi-internal (g2245@add-subst g3535@rib (cons g3525@b g3526@b*)) g3536@r g3513@mr) (g2792@chi-expr* (map (lambda (g3543@x) (g2245@add-subst g3535@rib g3543@x)) g3524@rhs*) g3536@r g3513@mr))) (g2196@make-full-rib g3523@lhs* g3532@lab*) (g2654@add-lexicals g3532@lab* g3531@lex* g3512@r))) (map g2137@gen-lexical g3523@lhs*) (map g2141@gen-label g3523@lhs*)))) g3521@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g3519@t))) (g2762@syntax-dispatch g3519@t '(_ #(each (any any)) any . each-any)))) g3511@e))) (set! g2658@letrec-transformer (lambda (g3545@e g3546@r g3547@mr) (g2656@letrec-helper g3545@e g3546@r g3547@mr g2106@g1965@build-letrec))) (set! g2660@letrec*-transformer (lambda (g3551@e g3552@r g3553@mr) (g2656@letrec-helper g3551@e g3552@r g3553@mr g2107@g1967@build-letrec*))) (set! g2662@fluid-let-syntax-transformer (lambda (g3557@e g3558@r g3559@mr) ((lambda (g3564@lookup) (begin (set! g3564@lookup (lambda (g3583@x) (or (g2291@id->label g3583@x) (g2995@syntax-violation '#f '"unbound identifier" g3557@e g3583@x)))) ((lambda (g3565@t) ((lambda (g3567@ls/false) (if g3567@ls/false (apply (lambda (g3569@lhs* g3570@rhs* g3571@b g3572@b*) (if (not (g2275@valid-bound-ids? g3569@lhs*)) (g2692@invalid-fmls-error g3557@e g3569@lhs*) ((lambda (g3577@lab* g3578@rhs*) (g2818@chi-internal (cons g3571@b g3572@b*) (append (map cons g3577@lab* g3578@rhs*) g3558@r) (append (map cons g3577@lab* g3578@rhs*) g3559@mr))) (map g3564@lookup g3569@lhs*) (map (lambda (g3581@x) (g2327@make-eval-transformer (g2855@expand-transformer g3581@x g3559@mr))) g3570@rhs*)))) g3567@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g3565@t))) (g2762@syntax-dispatch g3565@t '(_ #(each (any any)) any . each-any)))) g3557@e))) '#f))) (set! g2664@type-descriptor-transformer (lambda (g3585@e g3586@r g3587@mr) ((lambda (g3591@t) ((lambda (g3593@ls/false) (if (and g3593@ls/false (apply (lambda (g3595@id) (g2265@id? g3595@id)) g3593@ls/false)) (apply (lambda (g3597@id) ((lambda (g3599@lab) ((lambda (g3601@b) ((lambda (g3603@type) ((lambda () (begin (if (not g3599@lab) (g2303@raise-unbound-error g3597@id) (void)) (if (not (and (eq? g3603@type '$rtd) (not (list? (g2301@binding-value g3601@b))))) (g2995@syntax-violation '#f '"not a record type" g3585@e) (void)) (list 'quote (g2301@binding-value g3601@b)))))) (g2299@binding-type g3601@b))) (g2295@label->binding g3599@lab g3586@r))) (g2291@id->label g3597@id))) g3593@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g3591@t))) (g2762@syntax-dispatch g3591@t '(_ any)))) g3585@e))) (set! g2666@record-type-descriptor-transformer (lambda (g3605@e g3606@r g3607@mr) ((lambda (g3611@t) ((lambda (g3613@ls/false) (if (and g3613@ls/false (apply (lambda (g3615@id) (g2265@id? g3615@id)) g3613@ls/false)) (apply (lambda (g3617@id) ((lambda (g3619@lab) ((lambda (g3621@b) ((lambda (g3623@type) ((lambda () (begin (if (not g3619@lab) (g2303@raise-unbound-error g3617@id) (void)) (if (not (and (eq? g3623@type '$rtd) (list? (g2301@binding-value g3621@b)))) (g2995@syntax-violation '#f '"not a record type" g3605@e) (void)) (g2796@chi-expr (car (g2301@binding-value g3621@b)) g3606@r g3607@mr))))) (g2299@binding-type g3621@b))) (g2295@label->binding g3619@lab g3606@r))) (g2291@id->label g3617@id))) g3613@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g3611@t))) (g2762@syntax-dispatch g3611@t '(_ any)))) g3605@e))) (set! g2668@record-constructor-descriptor-transformer (lambda (g3625@e g3626@r g3627@mr) ((lambda (g3631@t) ((lambda (g3633@ls/false) (if (and g3633@ls/false (apply (lambda (g3635@id) (g2265@id? g3635@id)) g3633@ls/false)) (apply (lambda (g3637@id) ((lambda (g3639@lab) ((lambda (g3641@b) ((lambda (g3643@type) ((lambda () (begin (if (not g3639@lab) (g2303@raise-unbound-error g3637@id) (void)) (if (not (and (eq? g3643@type '$rtd) (list? (g2301@binding-value g3641@b)))) (g2995@syntax-violation '#f '"invalid type" g3625@e) (void)) (g2796@chi-expr (cadr (g2301@binding-value g3641@b)) g3626@r g3627@mr))))) (g2299@binding-type g3641@b))) (g2295@label->binding g3639@lab g3626@r))) (g2291@id->label g3637@id))) g3633@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g3631@t))) (g2762@syntax-dispatch g3631@t '(_ any)))) g3625@e))) (set! g2670@when-macro (lambda (g3645@e) ((lambda (g3647@t) ((lambda (g3649@ls/false) (if g3649@ls/false (apply (lambda (g3651@test g3652@e g3653@e*) (g2688@bless (list 'if g3651@test (cons 'begin (cons g3652@e g3653@e*))))) g3649@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g3647@t))) (g2762@syntax-dispatch g3647@t '(_ any any . each-any)))) g3645@e))) (set! g2672@unless-macro (lambda (g3657@e) ((lambda (g3659@t) ((lambda (g3661@ls/false) (if g3661@ls/false (apply (lambda (g3663@test g3664@e g3665@e*) (g2688@bless (list 'if (list 'not g3663@test) (cons 'begin (cons g3664@e g3665@e*))))) g3661@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g3659@t))) (g2762@syntax-dispatch g3659@t '(_ any any . each-any)))) g3657@e))) (set! g2674@if-transformer (lambda (g3669@e g3670@r g3671@mr) ((lambda (g3675@t) ((lambda (g3677@ls/false) (if g3677@ls/false (apply (lambda (g3679@e0 g3680@e1 g3681@e2) (list 'if (g2796@chi-expr g3679@e0 g3670@r g3671@mr) (g2796@chi-expr g3680@e1 g3670@r g3671@mr) (g2796@chi-expr g3681@e2 g3670@r g3671@mr))) g3677@ls/false) ((lambda (g3685@t) ((lambda (g3687@ls/false) (if g3687@ls/false (apply (lambda (g3689@e0 g3690@e1) (list 'if (g2796@chi-expr g3689@e0 g3670@r g3671@mr) (g2796@chi-expr g3690@e1 g3670@r g3671@mr) (g2105@g1963@build-void))) g3687@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g3685@t))) (g2762@syntax-dispatch g3685@t '(_ any any)))) g3675@t))) (g2762@syntax-dispatch g3675@t '(_ any any any)))) g3669@e))) (set! g2676@and-transformer (lambda (g3693@e g3694@r g3695@mr) ((lambda (g3699@t) ((lambda (g3701@ls/false) (if g3701@ls/false (apply (lambda (g3703@e*) (cons 'and (g2792@chi-expr* g3703@e* g3694@r g3695@mr))) g3701@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g3699@t))) (g2762@syntax-dispatch g3699@t '(_ . each-any)))) g3693@e))) (set! g2678@or-transformer (lambda (g3705@e g3706@r g3707@mr) ((lambda (g3711@t) ((lambda (g3713@ls/false) (if g3713@ls/false (apply (lambda (g3715@e*) (cons 'or (g2792@chi-expr* g3715@e* g3706@r g3707@mr))) g3713@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g3711@t))) (g2762@syntax-dispatch g3711@t '(_ . each-any)))) g3705@e))) (set! g2680@case-macro (lambda (g3717@e) ((lambda (g3720@build-last g3722@build-one) (begin (set! g3720@build-last (lambda (g3759@cls) ((lambda (g3761@t) ((lambda (g3763@ls/false) (if g3763@ls/false (apply (lambda (g3765@e g3766@e*) (cons 'begin (cons g3765@e g3766@e*))) g3763@ls/false) ((lambda (g3769@t) ((lambda (g3771@ls/false) (if g3771@ls/false (apply (lambda () (g3722@build-one g3759@cls '(if #f #f))) g3771@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g3769@t))) (g2762@syntax-dispatch g3769@t '_))) g3761@t))) (g2762@syntax-dispatch g3761@t '(#(scheme-id else) any . each-any)))) g3759@cls))) (set! g3722@build-one (lambda (g3745@cls g3746@k) ((lambda (g3749@t) ((lambda (g3751@ls/false) (if g3751@ls/false (apply (lambda (g3753@d* g3754@e g3755@e*) (list 'if (list 'memv 't (list 'quote g3753@d*)) (cons 'begin (cons g3754@e g3755@e*)) g3746@k)) g3751@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g3749@t))) (g2762@syntax-dispatch g3749@t '(each-any any . each-any)))) g3745@cls))) ((lambda (g3723@t) ((lambda (g3725@ls/false) (if g3725@ls/false (apply (lambda (g3727@expr) (g2688@bless (cons 'let (cons (list (list 't g3727@expr)) '((if #f #f)))))) g3725@ls/false) ((lambda (g3729@t) ((lambda (g3731@ls/false) (if g3731@ls/false (apply (lambda (g3733@expr g3734@cls g3735@cls*) (g2688@bless (list 'let (list (list 't g3733@expr)) ((letrec ((g3739@f (lambda (g3741@cls g3742@cls*) (if (null? g3742@cls*) (g3720@build-last g3741@cls) (g3722@build-one g3741@cls (g3739@f (car g3742@cls*) (cdr g3742@cls*))))))) g3739@f) g3734@cls g3735@cls*)))) g3731@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g3729@t))) (g2762@syntax-dispatch g3729@t '(_ any any . each-any)))) g3723@t))) (g2762@syntax-dispatch g3723@t '(_ any)))) g3717@e))) '#f '#f))) (set! g2682@quote-transformer (lambda (g3773@e g3774@r g3775@mr) ((lambda (g3779@t) ((lambda (g3781@ls/false) (if g3781@ls/false (apply (lambda (g3783@datum) (list 'quote (g2287@stx->datum g3783@datum))) g3781@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g3779@t))) (g2762@syntax-dispatch g3779@t '(_ any)))) g3773@e))) (set! g2684@case-lambda-transformer (lambda (g3785@e g3786@r g3787@mr) ((lambda (g3791@t) ((lambda (g3793@ls/false) (if g3793@ls/false (apply (lambda (g3795@fmls* g3796@b* g3797@b**) (call-with-values (lambda () (g2804@chi-lambda-clause* g3785@e g3795@fmls* (map cons g3796@b* g3797@b**) g3786@r g3787@mr)) (lambda (g3803@g3801@fmls* g3804@g3802@body*) ((lambda (g3807@body* g3808@fmls*) (g2102@g1913@build-case-lambda '#f g3808@fmls* g3807@body*)) g3804@g3802@body* g3803@g3801@fmls*)))) g3793@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g3791@t))) (g2762@syntax-dispatch g3791@t '(_ . #(each (any any . each-any)))))) g3785@e))) (set! g2686@lambda-transformer (lambda (g3811@e g3812@r g3813@mr) ((lambda (g3817@t) ((lambda (g3819@ls/false) (if g3819@ls/false (apply (lambda (g3821@fmls g3822@b g3823@b*) (call-with-values (lambda () (g2802@chi-lambda-clause g3811@e g3821@fmls (cons g3822@b g3823@b*) g3812@r g3813@mr)) (lambda (g3829@g3827@fmls g3830@g3828@body) ((lambda (g3833@body g3834@fmls) (g2101@g1911@build-lambda '#f g3834@fmls g3833@body)) g3830@g3828@body g3829@g3827@fmls)))) g3819@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g3817@t))) (g2762@syntax-dispatch g3817@t '(_ any any . each-any)))) g3811@e))) (set! g2688@bless (lambda (g3837@x) (g2241@mkstx ((letrec ((g3839@f (lambda (g3841@x) (if (g2209@stx? g3841@x) g3841@x (if (pair? g3841@x) (cons (g3839@f (car g3841@x)) (g3839@f (cdr g3841@x))) (if (symbol? g3841@x) (g2644@scheme-stx g3841@x) (if (vector? g3841@x) (vector-map g3839@f g3841@x) g3841@x))))))) g3839@f) g3837@x) '() '() '()))) (set! g2690@with-syntax-macro (lambda (g3843@e) ((lambda (g3845@t) ((lambda (g3847@ls/false) (if g3847@ls/false (apply (lambda (g3849@pat* g3850@expr* g3851@b g3852@b*) ((lambda (g3857@idn*) (begin (g2800@verify-formals (map car g3857@idn*) g3843@e) ((lambda (g3859@t*) (g2688@bless (list 'let (map list g3859@t* g3850@expr*) ((letrec ((g3861@f (lambda (g3863@pat* g3864@t*) (if (null? g3863@pat*) (cons 'begin (cons '#f (cons g3851@b g3852@b*))) (list 'syntax-case (car g3864@t*) '() (list (car g3863@pat*) (g3861@f (cdr g3863@pat*) (cdr g3864@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car g3863@pat*)) (car g3864@t*)))))))) g3861@f) g3849@pat* g3859@t*)))) (g2977@generate-temporaries g3850@expr*)))) ((letrec ((g3867@f (lambda (g3869@pat*) (if (null? g3869@pat*) '() (call-with-values (lambda () (g2760@convert-pattern (car g3869@pat*) '())) (lambda (g3873@g3871@pat g3874@g3872@idn*) ((lambda (g3877@idn* g3878@pat) (append g3877@idn* (g3867@f (cdr g3869@pat*)))) g3874@g3872@idn* g3873@g3871@pat))))))) g3867@f) g3849@pat*))) g3847@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g3845@t))) (g2762@syntax-dispatch g3845@t '(_ #(each (any any)) any . each-any)))) g3843@e))) (set! g2692@invalid-fmls-error (lambda (g3881@stx g3882@fmls) ((lambda (g3885@t) ((lambda (g3887@ls/false) (if g3887@ls/false (apply (lambda (g3889@id* g3890@last) ((letrec ((g3893@f (lambda (g3895@id*) (if (null? g3895@id*) (values) (if (not (g2265@id? (car g3895@id*))) (g2995@syntax-violation '#f '"not an identifier" g3881@stx (car g3895@id*)) (begin (g3893@f (cdr g3895@id*)) (if (g2279@bound-id-member? (car g3895@id*) (cdr g3895@id*)) (g2995@syntax-violation '#f '"duplicate binding" g3881@stx (car g3895@id*)) (void)))))))) g3893@f) (if (g2265@id? g3890@last) (cons g3890@last g3889@id*) (if (g2255@syntax-null? g3890@last) g3889@id* (g2995@syntax-violation '#f '"not an identifier" g3881@stx g3890@last))))) g3887@ls/false) ((lambda (g3897@t) ((lambda (g3899@ls/false) (if g3899@ls/false (apply (lambda () (g2995@syntax-violation '#f '"malformed binding form" g3881@stx g3882@fmls)) g3899@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g3897@t))) (g2762@syntax-dispatch g3897@t '_))) g3885@t))) (g2762@syntax-dispatch g3885@t '#(each+ any () any)))) g3882@fmls))) (set! g2694@let-macro (lambda (g3901@stx) ((lambda (g3903@t) ((lambda (g3905@ls/false) (if g3905@ls/false (apply (lambda (g3907@lhs* g3908@rhs* g3909@b g3910@b*) (if (g2275@valid-bound-ids? g3907@lhs*) (g2688@bless (cons (cons 'lambda (cons g3907@lhs* (cons g3909@b g3910@b*))) g3908@rhs*)) (g2692@invalid-fmls-error g3901@stx g3907@lhs*))) g3905@ls/false) ((lambda (g3915@t) ((lambda (g3917@ls/false) (if (and g3917@ls/false (apply (lambda (g3919@f g3920@lhs* g3921@rhs* g3922@b g3923@b*) (g2265@id? g3919@f)) g3917@ls/false)) (apply (lambda (g3929@f g3930@lhs* g3931@rhs* g3932@b g3933@b*) (if (g2275@valid-bound-ids? g3930@lhs*) (g2688@bless (cons (list 'letrec (list (list g3929@f (cons 'lambda (cons g3930@lhs* (cons g3932@b g3933@b*))))) g3929@f) g3931@rhs*)) (g2692@invalid-fmls-error g3901@stx g3930@lhs*))) g3917@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g3915@t))) (g2762@syntax-dispatch g3915@t '(_ any #(each (any any)) any . each-any)))) g3903@t))) (g2762@syntax-dispatch g3903@t '(_ #(each (any any)) any . each-any)))) g3901@stx))) (set! g2696@let-values-macro (lambda (g3939@stx) ((lambda (g3942@rename g3944@rename*) (begin (set! g3942@rename (lambda (g4040@x g4041@old* g4042@new*) (begin (if (not (g2265@id? g4040@x)) (g2995@syntax-violation '#f '"not an indentifier" g3939@stx g4040@x) (void)) (if (g2279@bound-id-member? g4040@x g4041@old*) (g2995@syntax-violation '#f '"duplicate binding" g3939@stx g4040@x) (void)) ((lambda (g4046@y) (values g4046@y (cons g4040@x g4041@old*) (cons g4046@y g4042@new*))) (g1149@g913@gensym (g3001@syntax->datum g4040@x)))))) (set! g3944@rename* (lambda (g4022@x* g4023@old* g4024@new*) (if (null? g4022@x*) (values '() g4023@old* g4024@new*) (call-with-values (lambda () (g3942@rename (car g4022@x*) g4023@old* g4024@new*)) (lambda (g4028@x g4029@old* g4030@new*) (call-with-values (lambda () (g3944@rename* (cdr g4022@x*) g4029@old* g4030@new*)) (lambda (g4034@x* g4035@old* g4036@new*) (values (cons g4028@x g4034@x*) g4035@old* g4036@new*)))))))) ((lambda (g3945@t) ((lambda (g3947@ls/false) (if g3947@ls/false (apply (lambda (g3949@b g3950@b*) (cons* (g2688@bless 'let) '() g3949@b g3950@b*)) g3947@ls/false) ((lambda (g3953@t) ((lambda (g3955@ls/false) (if g3955@ls/false (apply (lambda (g3957@lhs* g3958@rhs* g3959@b g3960@b*) (g2688@bless ((letrec ((g3965@f (lambda (g3967@lhs* g3968@rhs* g3969@old* g3970@new*) (if (null? g3967@lhs*) (cons 'let (cons (map list g3969@old* g3970@new*) (cons g3959@b g3960@b*))) ((lambda (g3975@t) ((lambda (g3977@ls/false) (if g3977@ls/false (apply (lambda (g3979@x*) (call-with-values (lambda () (g3944@rename* g3979@x* g3969@old* g3970@new*)) (lambda (g3984@g3981@y* g3985@g3982@old* g3986@g3983@new*) ((lambda (g3990@new* g3991@old* g3992@y*) (list 'call-with-values (list 'lambda '() (car g3968@rhs*)) (list 'lambda g3992@y* (g3965@f (cdr g3967@lhs*) (cdr g3968@rhs*) g3991@old* g3990@new*)))) g3986@g3983@new* g3985@g3982@old* g3984@g3981@y*)))) g3977@ls/false) ((lambda (g3996@t) ((lambda (g3998@ls/false) (if g3998@ls/false (apply (lambda (g4000@x* g4001@x) (call-with-values (lambda () (g3942@rename g4001@x g3969@old* g3970@new*)) (lambda (g4004@y g4005@old* g4006@new*) (call-with-values (lambda () (g3944@rename* g4000@x* g4005@old* g4006@new*)) (lambda (g4010@y* g4011@old* g4012@new*) (list 'call-with-values (list 'lambda '() (car g3968@rhs*)) (list 'lambda (append g4010@y* g4004@y) (g3965@f (cdr g3967@lhs*) (cdr g3968@rhs*) g4011@old* g4012@new*)))))))) g3998@ls/false) ((lambda (g4016@t) ((lambda (g4018@ls/false) (if g4018@ls/false (apply (lambda (g4020@others) (g2995@syntax-violation '#f '"malformed bindings" g3939@stx g4020@others)) g4018@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4016@t))) (g2762@syntax-dispatch g4016@t 'any))) g3996@t))) (g2762@syntax-dispatch g3996@t '#(each+ any () any)))) g3975@t))) (g2762@syntax-dispatch g3975@t 'each-any))) (car g3967@lhs*)))))) g3965@f) g3957@lhs* g3958@rhs* '() '()))) g3955@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g3953@t))) (g2762@syntax-dispatch g3953@t '(_ #(each (any any)) any . each-any)))) g3945@t))) (g2762@syntax-dispatch g3945@t '(_ () any . each-any)))) g3939@stx))) '#f '#f))) (set! g2698@let*-values-macro (lambda (g4048@stx) ((lambda (g4051@check) (begin (set! g4051@check (lambda (g4098@x*) (if (not (null? g4098@x*)) ((lambda (g4100@x) (begin (if (not (g2265@id? g4100@x)) (g2995@syntax-violation '#f '"not an identifier" g4048@stx g4100@x) (void)) (g4051@check (cdr g4098@x*)) (if (g2279@bound-id-member? g4100@x (cdr g4098@x*)) (g2995@syntax-violation '#f '"duplicate identifier" g4048@stx g4100@x) (void)))) (car g4098@x*)) (void)))) ((lambda (g4052@t) ((lambda (g4054@ls/false) (if g4054@ls/false (apply (lambda (g4056@b g4057@b*) (cons* (g2688@bless 'let) '() g4056@b g4057@b*)) g4054@ls/false) ((lambda (g4060@t) ((lambda (g4062@ls/false) (if g4062@ls/false (apply (lambda (g4064@lhs* g4065@rhs* g4066@b g4067@b*) (g2688@bless ((letrec ((g4072@f (lambda (g4074@lhs* g4075@rhs*) (if (null? g4074@lhs*) (cons 'begin (cons g4066@b g4067@b*)) ((lambda (g4078@t) ((lambda (g4080@ls/false) (if g4080@ls/false (apply (lambda (g4082@x*) (begin (g4051@check g4082@x*) (list 'call-with-values (list 'lambda '() (car g4075@rhs*)) (list 'lambda g4082@x* (g4072@f (cdr g4074@lhs*) (cdr g4075@rhs*)))))) g4080@ls/false) ((lambda (g4084@t) ((lambda (g4086@ls/false) (if g4086@ls/false (apply (lambda (g4088@x* g4089@x) (begin (g4051@check (cons g4089@x g4088@x*)) (list 'call-with-values (list 'lambda '() (car g4075@rhs*)) (list 'lambda (append g4088@x* g4089@x) (g4072@f (cdr g4074@lhs*) (cdr g4075@rhs*)))))) g4086@ls/false) ((lambda (g4092@t) ((lambda (g4094@ls/false) (if g4094@ls/false (apply (lambda (g4096@others) (g2995@syntax-violation '#f '"malformed bindings" g4048@stx g4096@others)) g4094@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4092@t))) (g2762@syntax-dispatch g4092@t 'any))) g4084@t))) (g2762@syntax-dispatch g4084@t '#(each+ any () any)))) g4078@t))) (g2762@syntax-dispatch g4078@t 'each-any))) (car g4074@lhs*)))))) g4072@f) g4064@lhs* g4065@rhs*))) g4062@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4060@t))) (g2762@syntax-dispatch g4060@t '(_ #(each (any any)) any . each-any)))) g4052@t))) (g2762@syntax-dispatch g4052@t '(_ () any . each-any)))) g4048@stx))) '#f))) (set! g2700@trace-lambda-macro (lambda (g4102@stx) ((lambda (g4104@t) ((lambda (g4106@ls/false) (if g4106@ls/false (apply (lambda (g4108@who g4109@fmls g4110@b g4111@b*) (if (g2275@valid-bound-ids? g4109@fmls) (g2688@bless (list 'make-traced-procedure (list 'quote g4108@who) (cons 'lambda (cons g4109@fmls (cons g4110@b g4111@b*))))) (g2692@invalid-fmls-error g4102@stx g4109@fmls))) g4106@ls/false) ((lambda (g4116@t) ((lambda (g4118@ls/false) (if g4118@ls/false (apply (lambda (g4120@who g4121@fmls g4122@last g4123@b g4124@b*) (if (g2275@valid-bound-ids? (cons g4122@last g4121@fmls)) (g2688@bless (list 'make-traced-procedure (list 'quote g4120@who) (cons 'lambda (cons (append g4121@fmls g4122@last) (cons g4123@b g4124@b*))))) (g2692@invalid-fmls-error g4102@stx (append g4121@fmls g4122@last)))) g4118@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4116@t))) (g2762@syntax-dispatch g4116@t '(_ any #(each+ any () any) any . each-any)))) g4104@t))) (g2762@syntax-dispatch g4104@t '(_ any each-any any . each-any)))) g4102@stx))) (set! g2702@trace-define-macro (lambda (g4130@stx) ((lambda (g4132@t) ((lambda (g4134@ls/false) (if g4134@ls/false (apply (lambda (g4136@who g4137@fmls g4138@b g4139@b*) (if (g2275@valid-bound-ids? g4137@fmls) (g2688@bless (list 'define g4136@who (list 'make-traced-procedure (list 'quote g4136@who) (cons 'lambda (cons g4137@fmls (cons g4138@b g4139@b*)))))) (g2692@invalid-fmls-error g4130@stx g4137@fmls))) g4134@ls/false) ((lambda (g4144@t) ((lambda (g4146@ls/false) (if g4146@ls/false (apply (lambda (g4148@who g4149@fmls g4150@last g4151@b g4152@b*) (if (g2275@valid-bound-ids? (cons g4150@last g4149@fmls)) (g2688@bless (list 'define g4148@who (list 'make-traced-procedure (list 'quote g4148@who) (cons 'lambda (cons (append g4149@fmls g4150@last) (cons g4151@b g4152@b*)))))) (g2692@invalid-fmls-error g4130@stx (append g4149@fmls g4150@last)))) g4146@ls/false) ((lambda (g4158@t) ((lambda (g4160@ls/false) (if g4160@ls/false (apply (lambda (g4162@who g4163@expr) (if (g2265@id? g4162@who) (g2688@bless (list 'define g4162@who (list 'let (list (list 'v g4163@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote g4162@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (g2995@syntax-violation '#f '"invalid name" g4130@stx))) g4160@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4158@t))) (g2762@syntax-dispatch g4158@t '(_ any any)))) g4144@t))) (g2762@syntax-dispatch g4144@t '(_ (any . #(each+ any () any)) any . each-any)))) g4132@t))) (g2762@syntax-dispatch g4132@t '(_ (any . each-any) any . each-any)))) g4130@stx))) (set! g2704@trace-define-syntax-macro (lambda (g4166@stx) ((lambda (g4168@t) ((lambda (g4170@ls/false) (if g4170@ls/false (apply (lambda (g4172@who g4173@expr) (if (g2265@id? g4172@who) (g2688@bless (list 'define-syntax g4172@who (list 'make-traced-macro (list 'quote g4172@who) g4173@expr))) (g2995@syntax-violation '#f '"invalid name" g4166@stx))) g4170@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4168@t))) (g2762@syntax-dispatch g4168@t '(_ any any)))) g4166@stx))) (set! g2706@trace-let/rec-syntax (lambda (g4176@who) (lambda (g4178@stx) ((lambda (g4180@t) ((lambda (g4182@ls/false) (if g4182@ls/false (apply (lambda (g4184@lhs* g4185@rhs* g4186@b g4187@b*) (if (g2275@valid-bound-ids? g4184@lhs*) ((lambda (g4192@rhs*) (g2688@bless (cons g4176@who (cons (map list g4184@lhs* g4192@rhs*) (cons g4186@b g4187@b*))))) (map (lambda (g4194@lhs g4195@rhs) (list 'make-traced-macro (list 'quote g4194@lhs) g4195@rhs)) g4184@lhs* g4185@rhs*)) (g2692@invalid-fmls-error g4178@stx g4184@lhs*))) g4182@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4180@t))) (g2762@syntax-dispatch g4180@t '(_ #(each (any any)) any . each-any)))) g4178@stx)))) (set! g2708@trace-let-syntax-macro (g2706@trace-let/rec-syntax 'let-syntax)) (set! g2710@trace-letrec-syntax-macro (g2706@trace-let/rec-syntax 'letrec-syntax)) (set! g2712@guard-macro (lambda (g4198@x) ((lambda (g4201@gen-clauses) (begin (set! g4201@gen-clauses (lambda (g4224@con g4225@outerk g4226@clause*) ((lambda (g4231@f g4233@f*) (begin (set! g4231@f (lambda (g4284@x g4285@k) ((lambda (g4288@t) ((lambda (g4290@ls/false) (if g4290@ls/false (apply (lambda (g4292@e g4293@p) ((lambda (g4296@t) (list 'let (list (list g4296@t g4292@e)) (list 'if g4296@t (list g4293@p g4296@t) g4285@k))) (g1149@g913@gensym))) g4290@ls/false) ((lambda (g4298@t) ((lambda (g4300@ls/false) (if g4300@ls/false (apply (lambda (g4302@e) ((lambda (g4304@t) (list 'let (list (list g4304@t g4302@e)) (list 'if g4304@t g4304@t g4285@k))) (g1149@g913@gensym))) g4300@ls/false) ((lambda (g4306@t) ((lambda (g4308@ls/false) (if g4308@ls/false (apply (lambda (g4310@e g4311@v g4312@v*) (list 'if g4310@e (cons 'begin (cons g4311@v g4312@v*)) g4285@k)) g4308@ls/false) ((lambda (g4316@t) ((lambda (g4318@ls/false) (if g4318@ls/false (apply (lambda () (g2995@syntax-violation '#f '"invalid guard clause" g4284@x)) g4318@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4316@t))) (g2762@syntax-dispatch g4316@t '_))) g4306@t))) (g2762@syntax-dispatch g4306@t '(any any . each-any)))) g4298@t))) (g2762@syntax-dispatch g4298@t '(any)))) g4288@t))) (g2762@syntax-dispatch g4288@t '(any #(scheme-id =>) any)))) g4284@x))) (set! g4233@f* (lambda (g4244@x*) ((lambda (g4246@t) ((lambda (g4248@ls/false) (if g4248@ls/false (apply (lambda () ((lambda (g4250@g) (values (list g4250@g (list 'lambda '() (list 'raise-continuable g4224@con))) g4250@g)) (g1149@g913@gensym))) g4248@ls/false) ((lambda (g4252@t) ((lambda (g4254@ls/false) (if g4254@ls/false (apply (lambda (g4256@e g4257@e*) (values (cons 'begin (cons g4256@e g4257@e*)) '#f)) g4254@ls/false) ((lambda (g4260@t) ((lambda (g4262@ls/false) (if g4262@ls/false (apply (lambda (g4264@cls g4265@cls*) (call-with-values (lambda () (g4233@f* g4265@cls*)) (lambda (g4270@g4268@e g4271@g4269@g) ((lambda (g4274@g g4275@e) (values (g4231@f g4264@cls g4275@e) g4274@g)) g4271@g4269@g g4270@g4268@e)))) g4262@ls/false) ((lambda (g4278@t) ((lambda (g4280@ls/false) (if g4280@ls/false (apply (lambda (g4282@others) (g2995@syntax-violation '#f '"invalid guard clause" g4282@others)) g4280@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4278@t))) (g2762@syntax-dispatch g4278@t 'any))) g4260@t))) (g2762@syntax-dispatch g4260@t '(any . any)))) g4252@t))) (g2762@syntax-dispatch g4252@t '((#(scheme-id else) any . each-any))))) g4246@t))) (g2762@syntax-dispatch g4246@t '()))) g4244@x*))) (call-with-values (lambda () (g4233@f* g4226@clause*)) (lambda (g4236@g4234@code g4237@g4235@raisek) ((lambda (g4240@raisek g4241@code) (if g4240@raisek (list (list 'call/cc (list 'lambda (list g4240@raisek) (list g4225@outerk (list 'lambda '() g4241@code))))) (list g4225@outerk (list 'lambda '() g4241@code)))) g4237@g4235@raisek g4236@g4234@code))))) '#f '#f))) ((lambda (g4202@t) ((lambda (g4204@ls/false) (if (and g4204@ls/false (apply (lambda (g4206@con g4207@clause* g4208@b g4209@b*) (g2265@id? g4206@con)) g4204@ls/false)) (apply (lambda (g4214@con g4215@clause* g4216@b g4217@b*) ((lambda (g4222@outerk) (g2688@bless (list (list 'call/cc (list 'lambda (list g4222@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list g4214@con) (g4201@gen-clauses g4214@con g4222@outerk g4215@clause*)) (cons 'lambda (cons '() (cons g4216@b g4217@b*)))))))))) (g1149@g913@gensym))) g4204@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4202@t))) (g2762@syntax-dispatch g4202@t '(_ (any . each-any) any . each-any)))) g4198@x))) '#f))) (set! g2714@define-enumeration-macro (lambda (g4320@stx) ((lambda (g4323@set? g4325@remove-dups) (begin (set! g4323@set? (lambda (g4348@x) (or (null? g4348@x) (and (not (memq (car g4348@x) (cdr g4348@x))) (g4323@set? (cdr g4348@x)))))) (set! g4325@remove-dups (lambda (g4346@ls) (if (null? g4346@ls) '() (cons (car g4346@ls) (g4325@remove-dups (remq (car g4346@ls) (cdr g4346@ls))))))) ((lambda (g4326@t) ((lambda (g4328@ls/false) (if (and g4328@ls/false (apply (lambda (g4330@name g4331@id* g4332@maker) (and (g2265@id? g4330@name) (g2265@id? g4332@maker) (for-all g2265@id? g4331@id*))) g4328@ls/false)) (apply (lambda (g4336@name g4337@id* g4338@maker) ((lambda (g4342@name* g4343@mk) (g2688@bless (list 'begin (list 'define g4343@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote g4342@name*)))) (list 'define-syntax g4336@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote g4342@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote g4336@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax g4338@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote g4338@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote g4342@name*)) (cons 'syntax-violation (cons (list 'quote g4338@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons g4343@mk '('(n* ...)))))))))))) (g4325@remove-dups (g3001@syntax->datum g4337@id*)) (g1149@g913@gensym))) g4328@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4326@t))) (g2762@syntax-dispatch g4326@t '(_ any each-any any)))) g4320@stx))) '#f '#f))) (set! g2716@time-macro (lambda (g4350@stx) ((lambda (g4352@t) ((lambda (g4354@ls/false) (if g4354@ls/false (apply (lambda (g4356@expr) (g2688@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() g4356@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) g4354@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4352@t))) (g2762@syntax-dispatch g4352@t '(_ any)))) g4350@stx))) (set! g2718@delay-macro (lambda (g4358@stx) ((lambda (g4360@t) ((lambda (g4362@ls/false) (if g4362@ls/false (apply (lambda (g4364@expr) (g2688@bless (list 'make-promise (list 'lambda '() g4364@expr)))) g4362@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4360@t))) (g2762@syntax-dispatch g4360@t '(_ any)))) g4358@stx))) (set! g2720@assert-macro (lambda (g4366@stx) ((lambda (g4368@t) ((lambda (g4370@ls/false) (if g4370@ls/false (apply (lambda (g4372@expr) ((lambda (g4374@pos) (g2688@bless (list 'unless g4372@expr (list 'assertion-error (list 'quote g4372@expr) (list 'quote g4374@pos))))) (or (g2987@expression-position g4366@stx) (g2987@expression-position g4372@expr)))) g4370@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4368@t))) (g2762@syntax-dispatch g4368@t '(_ any)))) g4366@stx))) (set! g2722@endianness-macro (lambda (g4376@stx) ((lambda (g4378@t) ((lambda (g4380@ls/false) (if g4380@ls/false (apply (lambda (g4382@e) ((lambda (g4384@t) (if (memv g4384@t '(little)) (g2688@bless ''little) (if (memv g4384@t '(big)) (g2688@bless ''big) (g2995@syntax-violation '#f '"endianness must be big or little" g4376@stx)))) (g3001@syntax->datum g4382@e))) g4380@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4378@t))) (g2762@syntax-dispatch g4378@t '(_ any)))) g4376@stx))) (set! g2724@identifier-syntax-macro (lambda (g4386@stx) ((lambda (g4388@t) ((lambda (g4390@ls/false) (if g4390@ls/false (apply (lambda (g4392@expr) (g2688@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax g4392@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax g4392@expr) '((syntax (e* ...)))))))))) g4390@ls/false) ((lambda (g4394@t) ((lambda (g4396@ls/false) (if (and g4396@ls/false (apply (lambda (g4398@id1 g4399@expr1 g4400@id2 g4401@expr2 g4402@expr3) (and (g2265@id? g4398@id1) (g2265@id? g4400@id2) (g2265@id? g4401@expr2))) g4396@ls/false)) (apply (lambda (g4408@id1 g4409@expr1 g4410@id2 g4411@expr2 g4412@expr3) (g2688@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax g4409@expr1)) (list (list 'set! 'id g4411@expr2) (list 'syntax g4412@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons g4409@expr1 '(e* ...))))))))) g4396@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4394@t))) (g2762@syntax-dispatch g4394@t '(_ (any any) ((#(scheme-id set!) any any) any))))) g4388@t))) (g2762@syntax-dispatch g4388@t '(_ any)))) g4386@stx))) (set! g2726@do-macro (lambda (g4418@stx) ((lambda (g4421@bind) (begin (set! g4421@bind (lambda (g4444@x) ((lambda (g4446@t) ((lambda (g4448@ls/false) (if g4448@ls/false (apply (lambda (g4450@x g4451@init) (list g4450@x g4451@init g4450@x)) g4448@ls/false) ((lambda (g4454@t) ((lambda (g4456@ls/false) (if g4456@ls/false (apply (lambda (g4458@x g4459@init g4460@step) (list g4458@x g4459@init g4460@step)) g4456@ls/false) ((lambda (g4464@t) ((lambda (g4466@ls/false) (if g4466@ls/false (apply (lambda () (g2995@syntax-violation '#f '"invalid binding" g4418@stx)) g4466@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4464@t))) (g2762@syntax-dispatch g4464@t '_))) g4454@t))) (g2762@syntax-dispatch g4454@t '(any any any)))) g4446@t))) (g2762@syntax-dispatch g4446@t '(any any)))) g4444@x))) ((lambda (g4422@t) ((lambda (g4424@ls/false) (if g4424@ls/false (apply (lambda (g4426@binding* g4427@test g4428@expr* g4429@command*) ((lambda (g4434@t) ((lambda (g4436@ls/false) (if g4436@ls/false (apply (lambda (g4438@x* g4439@init* g4440@step*) (if (g2275@valid-bound-ids? g4438@x*) (g2688@bless (list 'letrec (list (list 'loop (list 'lambda g4438@x* (list 'if g4427@test (cons 'begin (cons '(if #f #f) g4428@expr*)) (cons 'begin (append g4429@command* (list (cons 'loop g4440@step*)))))))) (cons 'loop g4439@init*))) (g2995@syntax-violation '#f '"invalid bindings" g4418@stx))) g4436@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4434@t))) (g2762@syntax-dispatch g4434@t '#(each (any any any))))) (map g4421@bind g4426@binding*))) g4424@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4422@t))) (g2762@syntax-dispatch g4422@t '(_ each-any (any . each-any) . each-any)))) g4418@stx))) '#f))) (set! g2728@let*-macro (lambda (g4468@stx) ((lambda (g4470@t) ((lambda (g4472@ls/false) (if (and g4472@ls/false (apply (lambda (g4474@lhs* g4475@rhs* g4476@b g4477@b*) (for-all g2265@id? g4474@lhs*)) g4472@ls/false)) (apply (lambda (g4482@lhs* g4483@rhs* g4484@b g4485@b*) (g2688@bless ((letrec ((g4490@f (lambda (g4492@x*) (if (null? g4492@x*) (cons 'let (cons '() (cons g4484@b g4485@b*))) (list 'let (list (car g4492@x*)) (g4490@f (cdr g4492@x*))))))) g4490@f) (map list g4482@lhs* g4483@rhs*)))) g4472@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4470@t))) (g2762@syntax-dispatch g4470@t '(_ #(each (any any)) any . each-any)))) g4468@stx))) (set! g2730@or-macro (lambda (g4494@stx) ((lambda (g4496@t) ((lambda (g4498@ls/false) (if g4498@ls/false (apply (lambda () '#f) g4498@ls/false) ((lambda (g4500@t) ((lambda (g4502@ls/false) (if g4502@ls/false (apply (lambda (g4504@e g4505@e*) (g2688@bless ((letrec ((g4508@f (lambda (g4510@e g4511@e*) (if (null? g4511@e*) (list 'begin '#f g4510@e) (list 'let (list (list 't g4510@e)) (list 'if 't 't (g4508@f (car g4511@e*) (cdr g4511@e*)))))))) g4508@f) g4504@e g4505@e*))) g4502@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4500@t))) (g2762@syntax-dispatch g4500@t '(_ any . each-any)))) g4496@t))) (g2762@syntax-dispatch g4496@t '(_)))) g4494@stx))) (set! g2732@and-macro (lambda (g4514@stx) ((lambda (g4516@t) ((lambda (g4518@ls/false) (if g4518@ls/false (apply (lambda () '#t) g4518@ls/false) ((lambda (g4520@t) ((lambda (g4522@ls/false) (if g4522@ls/false (apply (lambda (g4524@e g4525@e*) (g2688@bless ((letrec ((g4528@f (lambda (g4530@e g4531@e*) (if (null? g4531@e*) (list 'begin '#f g4530@e) (cons 'if (cons g4530@e (cons (g4528@f (car g4531@e*) (cdr g4531@e*)) '(#f)))))))) g4528@f) g4524@e g4525@e*))) g4522@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4520@t))) (g2762@syntax-dispatch g4520@t '(_ any . each-any)))) g4516@t))) (g2762@syntax-dispatch g4516@t '(_)))) g4514@stx))) (set! g2734@cond-macro (lambda (g4534@stx) ((lambda (g4536@t) ((lambda (g4538@ls/false) (if g4538@ls/false (apply (lambda (g4540@cls g4541@cls*) (g2688@bless ((letrec ((g4544@f (lambda (g4546@cls g4547@cls*) (if (null? g4547@cls*) ((lambda (g4550@t) ((lambda (g4552@ls/false) (if g4552@ls/false (apply (lambda (g4554@e g4555@e*) (cons 'begin (cons g4554@e g4555@e*))) g4552@ls/false) ((lambda (g4558@t) ((lambda (g4560@ls/false) (if g4560@ls/false (apply (lambda (g4562@e g4563@p) (list 'let (list (list 't g4562@e)) (list 'if 't (cons g4563@p '(t))))) g4560@ls/false) ((lambda (g4566@t) ((lambda (g4568@ls/false) (if g4568@ls/false (apply (lambda (g4570@e) (cons 'or (cons g4570@e '((if #f #f))))) g4568@ls/false) ((lambda (g4572@t) ((lambda (g4574@ls/false) (if g4574@ls/false (apply (lambda (g4576@e g4577@e*) (list 'if g4576@e (cons 'begin g4577@e*))) g4574@ls/false) ((lambda (g4580@t) ((lambda (g4582@ls/false) (if g4582@ls/false (apply (lambda () (g2995@syntax-violation '#f '"invalid last clause" g4534@stx)) g4582@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4580@t))) (g2762@syntax-dispatch g4580@t '_))) g4572@t))) (g2762@syntax-dispatch g4572@t '(any . each-any)))) g4566@t))) (g2762@syntax-dispatch g4566@t '(any)))) g4558@t))) (g2762@syntax-dispatch g4558@t '(any #(scheme-id =>) any)))) g4550@t))) (g2762@syntax-dispatch g4550@t '(#(scheme-id else) any . each-any)))) g4546@cls) ((lambda (g4584@t) ((lambda (g4586@ls/false) (if g4586@ls/false (apply (lambda (g4588@e g4589@e*) (g2995@syntax-violation '#f '"incorrect position of keyword else" g4534@stx)) g4586@ls/false) ((lambda (g4592@t) ((lambda (g4594@ls/false) (if g4594@ls/false (apply (lambda (g4596@e g4597@p) (list 'let (list (list 't g4596@e)) (list 'if 't (cons g4597@p '(t)) (g4544@f (car g4547@cls*) (cdr g4547@cls*))))) g4594@ls/false) ((lambda (g4600@t) ((lambda (g4602@ls/false) (if g4602@ls/false (apply (lambda (g4604@e) (list 'or g4604@e (g4544@f (car g4547@cls*) (cdr g4547@cls*)))) g4602@ls/false) ((lambda (g4606@t) ((lambda (g4608@ls/false) (if g4608@ls/false (apply (lambda (g4610@e g4611@e*) (list 'if g4610@e (cons 'begin g4611@e*) (g4544@f (car g4547@cls*) (cdr g4547@cls*)))) g4608@ls/false) ((lambda (g4614@t) ((lambda (g4616@ls/false) (if g4616@ls/false (apply (lambda () (g2995@syntax-violation '#f '"invalid last clause" g4534@stx)) g4616@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4614@t))) (g2762@syntax-dispatch g4614@t '_))) g4606@t))) (g2762@syntax-dispatch g4606@t '(any . each-any)))) g4600@t))) (g2762@syntax-dispatch g4600@t '(any)))) g4592@t))) (g2762@syntax-dispatch g4592@t '(any #(scheme-id =>) any)))) g4584@t))) (g2762@syntax-dispatch g4584@t '(#(scheme-id else) any . each-any)))) g4546@cls))))) g4544@f) g4540@cls g4541@cls*))) g4538@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4536@t))) (g2762@syntax-dispatch g4536@t '(_ any . each-any)))) g4534@stx))) (set! g2736@do-include (lambda (g4618@stx g4619@id g4620@filename) ((lambda (g4624@filename) (begin (if (not (and (string? g4624@filename) (g2265@id? g4619@id))) (g2995@syntax-violation '#f '"invalid syntax" g4618@stx) (void)) (cons (g2688@bless 'begin) (with-input-from-file g4624@filename (lambda () ((letrec ((g4626@f (lambda (g4628@ls) ((lambda (g4630@x) (if (eof-object? g4630@x) (reverse g4628@ls) (g4626@f (cons (g2231@datum->stx g4619@id g4630@x) g4628@ls)))) (g1150@g915@read-annotated))))) g4626@f) '())))))) (g2287@stx->datum g4620@filename)))) (set! g2738@include-macro (lambda (g4632@e) ((lambda (g4634@t) ((lambda (g4636@ls/false) (if g4636@ls/false (apply (lambda (g4638@id g4639@filename) (g2736@do-include g4632@e g4638@id g4639@filename)) g4636@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4634@t))) (g2762@syntax-dispatch g4634@t '(any any)))) g4632@e))) (set! g2740@include-into-macro (lambda (g4642@e) ((lambda (g4644@t) ((lambda (g4646@ls/false) (if g4646@ls/false (apply (lambda (g4648@id g4649@filename) (g2736@do-include g4642@e g4648@id g4649@filename)) g4646@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4644@t))) (g2762@syntax-dispatch g4644@t '(_ any any)))) g4642@e))) (set! g2742@syntax-rules-macro (lambda (g4652@e) ((lambda (g4654@t) ((lambda (g4656@ls/false) (if g4656@ls/false (apply (lambda (g4658@lits g4659@pat* g4660@tmp*) (begin (g2768@verify-literals g4658@lits g4652@e) (g2688@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons g4658@lits (map (lambda (g4664@pat g4665@tmp) ((lambda (g4668@t) ((lambda (g4670@ls/false) (if g4670@ls/false (apply (lambda (g4672@rest) (list (cons 'g g4672@rest) (list 'syntax g4665@tmp))) g4670@ls/false) ((lambda (g4674@t) ((lambda (g4676@ls/false) (if g4676@ls/false (apply (lambda () (g2995@syntax-violation '#f '"invalid syntax-rules pattern" g4652@e g4664@pat)) g4676@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4674@t))) (g2762@syntax-dispatch g4674@t '_))) g4668@t))) (g2762@syntax-dispatch g4668@t '(_ . any)))) g4664@pat)) g4659@pat* g4660@tmp*)))))))) g4656@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4654@t))) (g2762@syntax-dispatch g4654@t '(_ each-any . #(each (any any)))))) g4652@e))) (set! g2744@quasiquote-macro ((lambda () ((lambda (g4679@datum g4707@quasicons* g4709@quasicons g4711@quasiappend g4713@quasivector g4715@vquasi g4717@quasi) (begin (set! g4679@datum (lambda (g4936@x) (list (g2644@scheme-stx 'quote) (g2241@mkstx g4936@x '() '() '())))) (set! g4707@quasicons* (lambda (g4928@x g4929@y) ((letrec ((g4932@f (lambda (g4934@x) (if (null? g4934@x) g4929@y (g4709@quasicons (car g4934@x) (g4932@f (cdr g4934@x))))))) g4932@f) g4928@x))) (set! g4709@quasicons (lambda (g4890@x g4891@y) ((lambda (g4894@t) ((lambda (g4896@ls/false) (if g4896@ls/false (apply (lambda (g4898@dy) ((lambda (g4900@t) ((lambda (g4902@ls/false) (if g4902@ls/false (apply (lambda (g4904@dx) (list (g2644@scheme-stx 'quote) (cons g4904@dx g4898@dy))) g4902@ls/false) ((lambda (g4906@t) ((lambda (g4908@ls/false) (if g4908@ls/false (apply (lambda () ((lambda (g4910@t) ((lambda (g4912@ls/false) (if g4912@ls/false (apply (lambda () (list (g2644@scheme-stx 'list) g4890@x)) g4912@ls/false) ((lambda (g4914@t) ((lambda (g4916@ls/false) (if g4916@ls/false (apply (lambda () (list (g2644@scheme-stx 'cons) g4890@x g4891@y)) g4916@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4914@t))) (g2762@syntax-dispatch g4914@t '_))) g4910@t))) (g2762@syntax-dispatch g4910@t '()))) g4898@dy)) g4908@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4906@t))) (g2762@syntax-dispatch g4906@t '_))) g4900@t))) (g2762@syntax-dispatch g4900@t '(#(scheme-id quote) any)))) g4890@x)) g4896@ls/false) ((lambda (g4918@t) ((lambda (g4920@ls/false) (if g4920@ls/false (apply (lambda (g4922@stuff) (cons* (g2644@scheme-stx 'list) g4890@x g4922@stuff)) g4920@ls/false) ((lambda (g4924@t) ((lambda (g4926@ls/false) (if g4926@ls/false (apply (lambda () (list (g2644@scheme-stx 'cons) g4890@x g4891@y)) g4926@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4924@t))) (g2762@syntax-dispatch g4924@t '_))) g4918@t))) (g2762@syntax-dispatch g4918@t '(#(scheme-id list) . each-any)))) g4894@t))) (g2762@syntax-dispatch g4894@t '(#(scheme-id quote) any)))) g4891@y))) (set! g4711@quasiappend (lambda (g4864@x g4865@y) ((lambda (g4868@ls) (if (null? g4868@ls) (list (g2644@scheme-stx 'quote) '()) (if (null? (cdr g4868@ls)) (car g4868@ls) (cons* (g2644@scheme-stx 'append) g4868@ls)))) ((letrec ((g4870@f (lambda (g4872@x) (if (null? g4872@x) ((lambda (g4874@t) ((lambda (g4876@ls/false) (if g4876@ls/false (apply (lambda () '()) g4876@ls/false) ((lambda (g4878@t) ((lambda (g4880@ls/false) (if g4880@ls/false (apply (lambda () (list g4865@y)) g4880@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4878@t))) (g2762@syntax-dispatch g4878@t '_))) g4874@t))) (g2762@syntax-dispatch g4874@t '(#(scheme-id quote) ())))) g4865@y) ((lambda (g4882@t) ((lambda (g4884@ls/false) (if g4884@ls/false (apply (lambda () (g4870@f (cdr g4872@x))) g4884@ls/false) ((lambda (g4886@t) ((lambda (g4888@ls/false) (if g4888@ls/false (apply (lambda () (cons (car g4872@x) (g4870@f (cdr g4872@x)))) g4888@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4886@t))) (g2762@syntax-dispatch g4886@t '_))) g4882@t))) (g2762@syntax-dispatch g4882@t '(#(scheme-id quote) ())))) (car g4872@x)))))) g4870@f) g4864@x)))) (set! g4713@quasivector (lambda (g4814@x) ((lambda (g4816@pat-x) ((lambda (g4818@t) ((lambda (g4820@ls/false) (if g4820@ls/false (apply (lambda (g4822@x*) (list (g2644@scheme-stx 'quote) (list->vector g4822@x*))) g4820@ls/false) ((lambda (g4824@t) ((lambda (g4826@ls/false) (if g4826@ls/false (apply (lambda () ((letrec ((g4828@f (lambda (g4830@x g4831@k) ((lambda (g4834@t) ((lambda (g4836@ls/false) (if g4836@ls/false (apply (lambda (g4838@x*) (g4831@k (map (lambda (g4840@x) (list (g2644@scheme-stx 'quote) g4840@x)) g4838@x*))) g4836@ls/false) ((lambda (g4842@t) ((lambda (g4844@ls/false) (if g4844@ls/false (apply (lambda (g4846@x*) (g4831@k g4846@x*)) g4844@ls/false) ((lambda (g4848@t) ((lambda (g4850@ls/false) (if g4850@ls/false (apply (lambda (g4852@x g4853@y) (g4828@f g4853@y (lambda (g4856@ls) (g4831@k (cons g4852@x g4856@ls))))) g4850@ls/false) ((lambda (g4858@t) ((lambda (g4860@ls/false) (if g4860@ls/false (apply (lambda () (list (g2644@scheme-stx 'list->vector) g4816@pat-x)) g4860@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4858@t))) (g2762@syntax-dispatch g4858@t '_))) g4848@t))) (g2762@syntax-dispatch g4848@t '(#(scheme-id cons) any any)))) g4842@t))) (g2762@syntax-dispatch g4842@t '(#(scheme-id list) . each-any)))) g4834@t))) (g2762@syntax-dispatch g4834@t '(#(scheme-id quote) each-any)))) g4830@x)))) g4828@f) g4814@x (lambda (g4862@ls) (cons* (g2644@scheme-stx 'vector) g4862@ls)))) g4826@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4824@t))) (g2762@syntax-dispatch g4824@t '_))) g4818@t))) (g2762@syntax-dispatch g4818@t '(#(scheme-id quote) each-any)))) g4816@pat-x)) g4814@x))) (set! g4715@vquasi (lambda (g4780@p g4781@lev) ((lambda (g4784@t) ((lambda (g4786@ls/false) (if g4786@ls/false (apply (lambda (g4788@p g4789@q) ((lambda (g4792@t) ((lambda (g4794@ls/false) (if g4794@ls/false (apply (lambda (g4796@p) (if (= g4781@lev '0) (g4707@quasicons* g4796@p (g4715@vquasi g4789@q g4781@lev)) (g4709@quasicons (g4709@quasicons (g4679@datum 'unquote) (g4717@quasi g4796@p (- g4781@lev '1))) (g4715@vquasi g4789@q g4781@lev)))) g4794@ls/false) ((lambda (g4798@t) ((lambda (g4800@ls/false) (if g4800@ls/false (apply (lambda (g4802@p) (if (= g4781@lev '0) (g4711@quasiappend g4802@p (g4715@vquasi g4789@q g4781@lev)) (g4709@quasicons (g4709@quasicons (g4679@datum 'unquote-splicing) (g4717@quasi g4802@p (- g4781@lev '1))) (g4715@vquasi g4789@q g4781@lev)))) g4800@ls/false) ((lambda (g4804@t) ((lambda (g4806@ls/false) (if g4806@ls/false (apply (lambda (g4808@p) (g4709@quasicons (g4717@quasi g4808@p g4781@lev) (g4715@vquasi g4789@q g4781@lev))) g4806@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4804@t))) (g2762@syntax-dispatch g4804@t 'any))) g4798@t))) (g2762@syntax-dispatch g4798@t '(#(scheme-id unquote-splicing) . each-any)))) g4792@t))) (g2762@syntax-dispatch g4792@t '(#(scheme-id unquote) . each-any)))) g4788@p)) g4786@ls/false) ((lambda (g4810@t) ((lambda (g4812@ls/false) (if g4812@ls/false (apply (lambda () (list (g2644@scheme-stx 'quote) '())) g4812@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4810@t))) (g2762@syntax-dispatch g4810@t '()))) g4784@t))) (g2762@syntax-dispatch g4784@t '(any . any)))) g4780@p))) (set! g4717@quasi (lambda (g4726@p g4727@lev) ((lambda (g4730@t) ((lambda (g4732@ls/false) (if g4732@ls/false (apply (lambda (g4734@p) (if (= g4727@lev '0) g4734@p (g4709@quasicons (g4679@datum 'unquote) (g4717@quasi (list g4734@p) (- g4727@lev '1))))) g4732@ls/false) ((lambda (g4736@t) ((lambda (g4738@ls/false) (if g4738@ls/false (apply (lambda (g4740@p g4741@q) (if (= g4727@lev '0) (g4707@quasicons* g4740@p (g4717@quasi g4741@q g4727@lev)) (g4709@quasicons (g4709@quasicons (g4679@datum 'unquote) (g4717@quasi g4740@p (- g4727@lev '1))) (g4717@quasi g4741@q g4727@lev)))) g4738@ls/false) ((lambda (g4744@t) ((lambda (g4746@ls/false) (if g4746@ls/false (apply (lambda (g4748@p g4749@q) (if (= g4727@lev '0) (g4711@quasiappend g4748@p (g4717@quasi g4749@q g4727@lev)) (g4709@quasicons (g4709@quasicons (g4679@datum 'unquote-splicing) (g4717@quasi g4748@p (- g4727@lev '1))) (g4717@quasi g4749@q g4727@lev)))) g4746@ls/false) ((lambda (g4752@t) ((lambda (g4754@ls/false) (if g4754@ls/false (apply (lambda (g4756@p) (g4709@quasicons (g4679@datum 'quasiquote) (g4717@quasi (list g4756@p) (+ g4727@lev '1)))) g4754@ls/false) ((lambda (g4758@t) ((lambda (g4760@ls/false) (if g4760@ls/false (apply (lambda (g4762@p g4763@q) (g4709@quasicons (g4717@quasi g4762@p g4727@lev) (g4717@quasi g4763@q g4727@lev))) g4760@ls/false) ((lambda (g4766@t) ((lambda (g4768@ls/false) (if (and g4768@ls/false (apply (lambda (g4770@x) (not (g2209@stx? g4770@x))) g4768@ls/false)) (apply (lambda (g4772@x) (g4713@quasivector (g4715@vquasi g4772@x g4727@lev))) g4768@ls/false) ((lambda (g4774@t) ((lambda (g4776@ls/false) (if g4776@ls/false (apply (lambda (g4778@p) (list (g2644@scheme-stx 'quote) g4778@p)) g4776@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4774@t))) (g2762@syntax-dispatch g4774@t 'any))) g4766@t))) (g2762@syntax-dispatch g4766@t '#(vector each-any)))) g4758@t))) (g2762@syntax-dispatch g4758@t '(any . any)))) g4752@t))) (g2762@syntax-dispatch g4752@t '(#(scheme-id quasiquote) any)))) g4744@t))) (g2762@syntax-dispatch g4744@t '((#(scheme-id unquote-splicing) . each-any) . any)))) g4736@t))) (g2762@syntax-dispatch g4736@t '((#(scheme-id unquote) . each-any) . any)))) g4730@t))) (g2762@syntax-dispatch g4730@t '(#(scheme-id unquote) any)))) g4726@p))) (lambda (g4718@x) ((lambda (g4720@t) ((lambda (g4722@ls/false) (if g4722@ls/false (apply (lambda (g4724@e) (g4717@quasi g4724@e '0)) g4722@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4720@t))) (g2762@syntax-dispatch g4720@t '(_ any)))) g4718@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! g2746@quasisyntax-macro ((lambda () ((lambda (g4939@quasi) (begin (set! g4939@quasi (lambda (g4963@p g4964@lev) ((lambda (g4967@t) ((lambda (g4969@ls/false) (if g4969@ls/false (apply (lambda (g4971@p) (if (= g4964@lev '0) ((lambda (g4973@g) (values (list g4973@g) (list g4971@p) g4973@g)) (g1149@g913@gensym)) (call-with-values (lambda () (g4939@quasi g4971@p (- g4964@lev '1))) (lambda (g4978@g4975@lhs* g4979@g4976@rhs* g4980@g4977@p) ((lambda (g4984@p g4985@rhs* g4986@lhs*) (values g4986@lhs* g4985@rhs* (list 'unsyntax g4984@p))) g4980@g4977@p g4979@g4976@rhs* g4978@g4975@lhs*))))) g4969@ls/false) ((lambda (g4990@t) ((lambda (g4992@ls/false) (if (and g4992@ls/false (apply (lambda () (= g4964@lev '0)) g4992@ls/false)) (apply (lambda () (g2995@syntax-violation '#f '"incorrect use of unsyntax" g4963@p)) g4992@ls/false) ((lambda (g4994@t) ((lambda (g4996@ls/false) (if g4996@ls/false (apply (lambda (g4998@p* g4999@q) (call-with-values (lambda () (g4939@quasi g4999@q g4964@lev)) (lambda (g5005@g5002@lhs* g5006@g5003@rhs* g5007@g5004@q) ((lambda (g5011@q g5012@rhs* g5013@lhs*) (if (= g4964@lev '0) ((lambda (g5017@g*) (values (append g5017@g* g5013@lhs*) (append g4998@p* g5012@rhs*) (append g5017@g* g5011@q))) (map (lambda (g5019@x) (g1149@g913@gensym)) g4998@p*)) (call-with-values (lambda () (g4939@quasi g4998@p* (- g4964@lev '1))) (lambda (g5024@g5021@lhs2* g5025@g5022@rhs2* g5026@g5023@p*) ((lambda (g5030@p* g5031@rhs2* g5032@lhs2*) (values (append g5032@lhs2* g5013@lhs*) (append g5031@rhs2* g5012@rhs*) (cons (cons 'unsyntax g5030@p*) g5011@q))) g5026@g5023@p* g5025@g5022@rhs2* g5024@g5021@lhs2*))))) g5007@g5004@q g5006@g5003@rhs* g5005@g5002@lhs*)))) g4996@ls/false) ((lambda (g5036@t) ((lambda (g5038@ls/false) (if g5038@ls/false (apply (lambda (g5040@p* g5041@q) (call-with-values (lambda () (g4939@quasi g5041@q g4964@lev)) (lambda (g5047@g5044@lhs* g5048@g5045@rhs* g5049@g5046@q) ((lambda (g5053@q g5054@rhs* g5055@lhs*) (if (= g4964@lev '0) ((lambda (g5059@g*) (values (append (map (lambda (g5061@g) (cons g5061@g '(...))) g5059@g*) g5055@lhs*) (append g5040@p* g5054@rhs*) (append (apply append (map (lambda (g5063@g) (cons g5063@g '(...))) g5059@g*)) g5053@q))) (map (lambda (g5065@x) (g1149@g913@gensym)) g5040@p*)) (call-with-values (lambda () (g4939@quasi g5040@p* (- g4964@lev '1))) (lambda (g5070@g5067@lhs2* g5071@g5068@rhs2* g5072@g5069@p*) ((lambda (g5076@p* g5077@rhs2* g5078@lhs2*) (values (append g5078@lhs2* g5055@lhs*) (append g5077@rhs2* g5054@rhs*) (cons (cons 'unsyntax-splicing g5076@p*) g5053@q))) g5072@g5069@p* g5071@g5068@rhs2* g5070@g5067@lhs2*))))) g5049@g5046@q g5048@g5045@rhs* g5047@g5044@lhs*)))) g5038@ls/false) ((lambda (g5082@t) ((lambda (g5084@ls/false) (if (and g5084@ls/false (apply (lambda () (= g4964@lev '0)) g5084@ls/false)) (apply (lambda () (g2995@syntax-violation '#f '"incorrect use of unsyntax-splicing" g4963@p)) g5084@ls/false) ((lambda (g5086@t) ((lambda (g5088@ls/false) (if g5088@ls/false (apply (lambda (g5090@p) (call-with-values (lambda () (g4939@quasi g5090@p (+ g4964@lev '1))) (lambda (g5095@g5092@lhs* g5096@g5093@rhs* g5097@g5094@p) ((lambda (g5101@p g5102@rhs* g5103@lhs*) (values g5103@lhs* g5102@rhs* (list 'quasisyntax g5101@p))) g5097@g5094@p g5096@g5093@rhs* g5095@g5092@lhs*)))) g5088@ls/false) ((lambda (g5107@t) ((lambda (g5109@ls/false) (if g5109@ls/false (apply (lambda (g5111@p g5112@q) (call-with-values (lambda () (g4939@quasi g5111@p g4964@lev)) (lambda (g5121@g5115@lhs* g5122@g5116@rhs* g5123@g5117@p) (call-with-values (lambda () (g4939@quasi g5112@q g4964@lev)) (lambda (g5127@g5118@lhs2* g5128@g5119@rhs2* g5129@g5120@q) ((lambda (g5133@q g5134@rhs2* g5135@lhs2* g5136@p g5137@rhs* g5138@lhs*) (values (append g5135@lhs2* g5138@lhs*) (append g5134@rhs2* g5137@rhs*) (cons g5136@p g5133@q))) g5129@g5120@q g5128@g5119@rhs2* g5127@g5118@lhs2* g5123@g5117@p g5122@g5116@rhs* g5121@g5115@lhs*)))))) g5109@ls/false) ((lambda (g5145@t) ((lambda (g5147@ls/false) (if g5147@ls/false (apply (lambda (g5149@x*) (call-with-values (lambda () (g4939@quasi g5149@x* g4964@lev)) (lambda (g5154@g5151@lhs* g5155@g5152@rhs* g5156@g5153@x*) ((lambda (g5160@x* g5161@rhs* g5162@lhs*) (values g5162@lhs* g5161@rhs* (list->vector g5160@x*))) g5156@g5153@x* g5155@g5152@rhs* g5154@g5151@lhs*)))) g5147@ls/false) ((lambda (g5166@t) ((lambda (g5168@ls/false) (if g5168@ls/false (apply (lambda () (values '() '() g4963@p)) g5168@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g5166@t))) (g2762@syntax-dispatch g5166@t '_))) g5145@t))) (g2762@syntax-dispatch g5145@t '#(vector each-any)))) g5107@t))) (g2762@syntax-dispatch g5107@t '(any . any)))) g5086@t))) (g2762@syntax-dispatch g5086@t '(#(scheme-id quasisyntax) any)))) g5082@t))) (g2762@syntax-dispatch g5082@t '#(scheme-id unsyntax-splicing)))) g5036@t))) (g2762@syntax-dispatch g5036@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) g4994@t))) (g2762@syntax-dispatch g4994@t '((#(scheme-id unsyntax) . each-any) . any)))) g4990@t))) (g2762@syntax-dispatch g4990@t '#(scheme-id unsyntax)))) g4967@t))) (g2762@syntax-dispatch g4967@t '(#(scheme-id unsyntax) any)))) g4963@p))) (lambda (g4940@x) ((lambda (g4942@t) ((lambda (g4944@ls/false) (if g4944@ls/false (apply (lambda (g4946@e) (call-with-values (lambda () (g4939@quasi g4946@e '0)) (lambda (g4951@g4948@lhs* g4952@g4949@rhs* g4953@g4950@v) ((lambda (g4957@v g4958@rhs* g4959@lhs*) (g2688@bless (list 'syntax-case (cons 'list g4958@rhs*) '() (list g4959@lhs* (list 'syntax g4957@v))))) g4953@g4950@v g4952@g4949@rhs* g4951@g4948@lhs*)))) g4944@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g4942@t))) (g2762@syntax-dispatch g4942@t '(_ any)))) g4940@x)))) '#f)))) (set! g2748@define-struct-macro (lambda (g5170@stx) (g2995@syntax-violation '#f '"define-struct not supported" g5170@stx))) (set! g2750@define-record-type-macro (lambda (g5172@x) ((lambda (g5175@id g5177@get-record-name g5179@get-record-constructor-name g5181@get-record-predicate-name g5183@get-clause g5185@foo-rtd-code g5187@parent-rtd-code g5189@parent-rcd-code g5191@foo-rcd-code g5193@get-protocol-code g5195@get-fields g5197@get-mutator-indices g5199@get-mutators g5201@get-accessors g5203@enumerate g5205@do-define-record g5207@verify-clauses) (begin (set! g5175@id (lambda (g5674@ctxt . g5676@str*) (g2999@datum->syntax g5674@ctxt (string->symbol (apply string-append (map (lambda (g5678@x) (if (symbol? g5678@x) (symbol->string g5678@x) (if (string? g5678@x) g5678@x (assertion-violation 'define-record-type '"BUG")))) g5676@str*)))))) (set! g5177@get-record-name (lambda (g5656@spec) ((lambda (g5658@t) ((lambda (g5660@ls/false) (if g5660@ls/false (apply (lambda (g5662@foo g5663@make-foo g5664@foo?) g5662@foo) g5660@ls/false) ((lambda (g5668@t) ((lambda (g5670@ls/false) (if g5670@ls/false (apply (lambda (g5672@foo) g5672@foo) g5670@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g5668@t))) (g2762@syntax-dispatch g5668@t 'any))) g5658@t))) (g2762@syntax-dispatch g5658@t '(any any any)))) g5656@spec))) (set! g5179@get-record-constructor-name (lambda (g5636@spec) ((lambda (g5638@t) ((lambda (g5640@ls/false) (if g5640@ls/false (apply (lambda (g5642@foo g5643@make-foo g5644@foo?) g5643@make-foo) g5640@ls/false) ((lambda (g5648@t) ((lambda (g5650@ls/false) (if (and g5650@ls/false (apply (lambda (g5652@foo) (g2265@id? g5652@foo)) g5650@ls/false)) (apply (lambda (g5654@foo) (g5175@id g5654@foo '"make-" (g2287@stx->datum g5654@foo))) g5650@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g5648@t))) (g2762@syntax-dispatch g5648@t 'any))) g5638@t))) (g2762@syntax-dispatch g5638@t '(any any any)))) g5636@spec))) (set! g5181@get-record-predicate-name (lambda (g5616@spec) ((lambda (g5618@t) ((lambda (g5620@ls/false) (if g5620@ls/false (apply (lambda (g5622@foo g5623@make-foo g5624@foo?) g5624@foo?) g5620@ls/false) ((lambda (g5628@t) ((lambda (g5630@ls/false) (if (and g5630@ls/false (apply (lambda (g5632@foo) (g2265@id? g5632@foo)) g5630@ls/false)) (apply (lambda (g5634@foo) (g5175@id g5634@foo (g2287@stx->datum g5634@foo) '"?")) g5630@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g5628@t))) (g2762@syntax-dispatch g5628@t 'any))) g5618@t))) (g2762@syntax-dispatch g5618@t '(any any any)))) g5616@spec))) (set! g5183@get-clause (lambda (g5598@id g5599@ls) ((lambda (g5602@t) ((lambda (g5604@ls/false) (if g5604@ls/false (apply (lambda () '#f) g5604@ls/false) ((lambda (g5606@t) ((lambda (g5608@ls/false) (if g5608@ls/false (apply (lambda (g5610@x g5611@rest g5612@ls) (if (g2273@free-id=? (g2688@bless g5598@id) g5610@x) (cons g5610@x g5611@rest) (g5183@get-clause g5598@id g5612@ls))) g5608@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g5606@t))) (g2762@syntax-dispatch g5606@t '((any . any) . any)))) g5602@t))) (g2762@syntax-dispatch g5602@t '()))) g5599@ls))) (set! g5185@foo-rtd-code (lambda (g5516@name g5517@clause* g5518@parent-rtd-code) ((lambda (g5523@convert-field-spec*) (begin (set! g5523@convert-field-spec* (lambda (g5572@ls) (list->vector (map (lambda (g5574@x) ((lambda (g5576@t) ((lambda (g5578@ls/false) (if g5578@ls/false (apply (lambda (g5580@name g5581@rest) (list 'mutable g5580@name)) g5578@ls/false) ((lambda (g5584@t) ((lambda (g5586@ls/false) (if g5586@ls/false (apply (lambda (g5588@name g5589@rest) (list 'immutable g5588@name)) g5586@ls/false) ((lambda (g5592@t) ((lambda (g5594@ls/false) (if g5594@ls/false (apply (lambda (g5596@name) (list 'immutable g5596@name)) g5594@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g5592@t))) (g2762@syntax-dispatch g5592@t 'any))) g5584@t))) (g2762@syntax-dispatch g5584@t '(#(scheme-id immutable) any . any)))) g5576@t))) (g2762@syntax-dispatch g5576@t '(#(scheme-id mutable) any . any)))) g5574@x)) g5572@ls)))) ((lambda (g5524@uid-code g5525@sealed? g5526@opaque? g5527@fields) (g2688@bless (list 'make-record-type-descriptor (list 'quote g5516@name) g5518@parent-rtd-code g5524@uid-code g5525@sealed? g5526@opaque? g5527@fields))) ((lambda (g5532@t) ((lambda (g5534@ls/false) (if g5534@ls/false (apply (lambda () (list 'quote (g1149@g913@gensym))) g5534@ls/false) ((lambda (g5536@t) ((lambda (g5538@ls/false) (if g5538@ls/false (apply (lambda (g5540@uid) (list 'quote g5540@uid)) g5538@ls/false) ((lambda (g5542@t) ((lambda (g5544@ls/false) (if g5544@ls/false (apply (lambda () '#f) g5544@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g5542@t))) (g2762@syntax-dispatch g5542@t '_))) g5536@t))) (g2762@syntax-dispatch g5536@t '(_ any)))) g5532@t))) (g2762@syntax-dispatch g5532@t '(_)))) (g5183@get-clause 'nongenerative g5517@clause*)) ((lambda (g5546@t) ((lambda (g5548@ls/false) (if g5548@ls/false (apply (lambda () '#t) g5548@ls/false) ((lambda (g5550@t) ((lambda (g5552@ls/false) (if g5552@ls/false (apply (lambda () '#f) g5552@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g5550@t))) (g2762@syntax-dispatch g5550@t '_))) g5546@t))) (g2762@syntax-dispatch g5546@t '(_ #(atom #t))))) (g5183@get-clause 'sealed g5517@clause*)) ((lambda (g5554@t) ((lambda (g5556@ls/false) (if g5556@ls/false (apply (lambda () '#t) g5556@ls/false) ((lambda (g5558@t) ((lambda (g5560@ls/false) (if g5560@ls/false (apply (lambda () '#f) g5560@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g5558@t))) (g2762@syntax-dispatch g5558@t '_))) g5554@t))) (g2762@syntax-dispatch g5554@t '(_ #(atom #t))))) (g5183@get-clause 'opaque g5517@clause*)) ((lambda (g5562@t) ((lambda (g5564@ls/false) (if g5564@ls/false (apply (lambda (g5566@field-spec*) (list 'quote (g5523@convert-field-spec* g5566@field-spec*))) g5564@ls/false) ((lambda (g5568@t) ((lambda (g5570@ls/false) (if g5570@ls/false (apply (lambda () ''#()) g5570@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g5568@t))) (g2762@syntax-dispatch g5568@t '_))) g5562@t))) (g2762@syntax-dispatch g5562@t '(_ . each-any)))) (g5183@get-clause 'fields g5517@clause*))))) '#f))) (set! g5187@parent-rtd-code (lambda (g5492@clause*) ((lambda (g5494@t) ((lambda (g5496@ls/false) (if g5496@ls/false (apply (lambda (g5498@name) (list 'record-type-descriptor g5498@name)) g5496@ls/false) ((lambda (g5500@t) ((lambda (g5502@ls/false) (if g5502@ls/false (apply (lambda () ((lambda (g5504@t) ((lambda (g5506@ls/false) (if g5506@ls/false (apply (lambda (g5508@rtd g5509@rcd) g5508@rtd) g5506@ls/false) ((lambda (g5512@t) ((lambda (g5514@ls/false) (if g5514@ls/false (apply (lambda () '#f) g5514@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g5512@t))) (g2762@syntax-dispatch g5512@t '#(atom #f)))) g5504@t))) (g2762@syntax-dispatch g5504@t '(_ any any)))) (g5183@get-clause 'parent-rtd g5492@clause*))) g5502@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g5500@t))) (g2762@syntax-dispatch g5500@t '#(atom #f)))) g5494@t))) (g2762@syntax-dispatch g5494@t '(_ any)))) (g5183@get-clause 'parent g5492@clause*)))) (set! g5189@parent-rcd-code (lambda (g5468@clause*) ((lambda (g5470@t) ((lambda (g5472@ls/false) (if g5472@ls/false (apply (lambda (g5474@name) (list 'record-constructor-descriptor g5474@name)) g5472@ls/false) ((lambda (g5476@t) ((lambda (g5478@ls/false) (if g5478@ls/false (apply (lambda () ((lambda (g5480@t) ((lambda (g5482@ls/false) (if g5482@ls/false (apply (lambda (g5484@rtd g5485@rcd) g5485@rcd) g5482@ls/false) ((lambda (g5488@t) ((lambda (g5490@ls/false) (if g5490@ls/false (apply (lambda () '#f) g5490@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g5488@t))) (g2762@syntax-dispatch g5488@t '#(atom #f)))) g5480@t))) (g2762@syntax-dispatch g5480@t '(_ any any)))) (g5183@get-clause 'parent-rtd g5468@clause*))) g5478@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g5476@t))) (g2762@syntax-dispatch g5476@t '#(atom #f)))) g5470@t))) (g2762@syntax-dispatch g5470@t '(_ any)))) (g5183@get-clause 'parent g5468@clause*)))) (set! g5191@foo-rcd-code (lambda (g5460@clause* g5461@foo-rtd g5462@protocol g5463@parent-rcd-code) (list 'make-record-constructor-descriptor g5461@foo-rtd g5463@parent-rcd-code g5462@protocol))) (set! g5193@get-protocol-code (lambda (g5448@clause*) ((lambda (g5450@t) ((lambda (g5452@ls/false) (if g5452@ls/false (apply (lambda (g5454@expr) g5454@expr) g5452@ls/false) ((lambda (g5456@t) ((lambda (g5458@ls/false) (if g5458@ls/false (apply (lambda () '#f) g5458@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g5456@t))) (g2762@syntax-dispatch g5456@t '_))) g5450@t))) (g2762@syntax-dispatch g5450@t '(_ any)))) (g5183@get-clause 'protocol g5448@clause*)))) (set! g5195@get-fields (lambda (g5430@clause*) ((lambda (g5432@t) ((lambda (g5434@ls/false) (if g5434@ls/false (apply (lambda () '()) g5434@ls/false) ((lambda (g5436@t) ((lambda (g5438@ls/false) (if g5438@ls/false (apply (lambda (g5440@f*) g5440@f*) g5438@ls/false) ((lambda (g5442@t) ((lambda (g5444@ls/false) (if g5444@ls/false (apply (lambda (g5446@rest) (g5195@get-fields g5446@rest)) g5444@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g5442@t))) (g2762@syntax-dispatch g5442@t '(_ . any)))) g5436@t))) (g2762@syntax-dispatch g5436@t '((#(scheme-id fields) . each-any) . _)))) g5432@t))) (g2762@syntax-dispatch g5432@t '()))) g5430@clause*))) (set! g5197@get-mutator-indices (lambda (g5406@fields) ((letrec ((g5408@f (lambda (g5410@fields g5411@i) ((lambda (g5414@t) ((lambda (g5416@ls/false) (if g5416@ls/false (apply (lambda () '()) g5416@ls/false) ((lambda (g5418@t) ((lambda (g5420@ls/false) (if g5420@ls/false (apply (lambda (g5422@rest) (cons g5411@i (g5408@f g5422@rest (+ g5411@i '1)))) g5420@ls/false) ((lambda (g5424@t) ((lambda (g5426@ls/false) (if g5426@ls/false (apply (lambda (g5428@rest) (g5408@f g5428@rest (+ g5411@i '1))) g5426@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g5424@t))) (g2762@syntax-dispatch g5424@t '(_ . any)))) g5418@t))) (g2762@syntax-dispatch g5418@t '((#(scheme-id mutable) . _) . any)))) g5414@t))) (g2762@syntax-dispatch g5414@t '()))) g5410@fields)))) g5408@f) g5406@fields '0))) (set! g5199@get-mutators (lambda (g5364@foo g5365@fields) ((lambda (g5369@gen-name) (begin (set! g5369@gen-name (lambda (g5404@x) (g2999@datum->syntax g5364@foo (string->symbol (string-append (symbol->string (g3001@syntax->datum g5364@foo)) '"-" (symbol->string (g3001@syntax->datum g5404@x)) '"-set!"))))) ((letrec ((g5370@f (lambda (g5372@fields) ((lambda (g5374@t) ((lambda (g5376@ls/false) (if g5376@ls/false (apply (lambda () '()) g5376@ls/false) ((lambda (g5378@t) ((lambda (g5380@ls/false) (if g5380@ls/false (apply (lambda (g5382@name g5383@accessor g5384@mutator g5385@rest) (cons g5384@mutator (g5370@f g5385@rest))) g5380@ls/false) ((lambda (g5390@t) ((lambda (g5392@ls/false) (if g5392@ls/false (apply (lambda (g5394@name g5395@rest) (cons (g5369@gen-name g5394@name) (g5370@f g5395@rest))) g5392@ls/false) ((lambda (g5398@t) ((lambda (g5400@ls/false) (if g5400@ls/false (apply (lambda (g5402@rest) (g5370@f g5402@rest)) g5400@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g5398@t))) (g2762@syntax-dispatch g5398@t '(_ . any)))) g5390@t))) (g2762@syntax-dispatch g5390@t '((#(scheme-id mutable) any) . any)))) g5378@t))) (g2762@syntax-dispatch g5378@t '((#(scheme-id mutable) any any any) . any)))) g5374@t))) (g2762@syntax-dispatch g5374@t '()))) g5372@fields)))) g5370@f) g5365@fields))) '#f))) (set! g5201@get-accessors (lambda (g5296@foo g5297@fields) ((lambda (g5301@gen-name) (begin (set! g5301@gen-name (lambda (g5362@x) (g2999@datum->syntax g5296@foo (string->symbol (string-append (symbol->string (g3001@syntax->datum g5296@foo)) '"-" (symbol->string (g3001@syntax->datum g5362@x))))))) (map (lambda (g5302@field) ((lambda (g5304@t) ((lambda (g5306@ls/false) (if (and g5306@ls/false (apply (lambda (g5308@name g5309@accessor g5310@mutator) (g2265@id? g5309@accessor)) g5306@ls/false)) (apply (lambda (g5314@name g5315@accessor g5316@mutator) g5315@accessor) g5306@ls/false) ((lambda (g5320@t) ((lambda (g5322@ls/false) (if (and g5322@ls/false (apply (lambda (g5324@name g5325@accessor) (g2265@id? g5325@accessor)) g5322@ls/false)) (apply (lambda (g5328@name g5329@accessor) g5329@accessor) g5322@ls/false) ((lambda (g5332@t) ((lambda (g5334@ls/false) (if (and g5334@ls/false (apply (lambda (g5336@name) (g2265@id? g5336@name)) g5334@ls/false)) (apply (lambda (g5338@name) (g5301@gen-name g5338@name)) g5334@ls/false) ((lambda (g5340@t) ((lambda (g5342@ls/false) (if (and g5342@ls/false (apply (lambda (g5344@name) (g2265@id? g5344@name)) g5342@ls/false)) (apply (lambda (g5346@name) (g5301@gen-name g5346@name)) g5342@ls/false) ((lambda (g5348@t) ((lambda (g5350@ls/false) (if (and g5350@ls/false (apply (lambda (g5352@name) (g2265@id? g5352@name)) g5350@ls/false)) (apply (lambda (g5354@name) (g5301@gen-name g5354@name)) g5350@ls/false) ((lambda (g5356@t) ((lambda (g5358@ls/false) (if g5358@ls/false (apply (lambda (g5360@others) (g2995@syntax-violation '#f '"invalid field spec" g5302@field)) g5358@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g5356@t))) (g2762@syntax-dispatch g5356@t 'any))) g5348@t))) (g2762@syntax-dispatch g5348@t 'any))) g5340@t))) (g2762@syntax-dispatch g5340@t '(#(scheme-id immutable) any)))) g5332@t))) (g2762@syntax-dispatch g5332@t '(#(scheme-id mutable) any)))) g5320@t))) (g2762@syntax-dispatch g5320@t '(#(scheme-id immutable) any any)))) g5304@t))) (g2762@syntax-dispatch g5304@t '(#(scheme-id mutable) any any any)))) g5302@field)) g5297@fields))) '#f))) (set! g5203@enumerate (lambda (g5288@ls) ((letrec ((g5290@f (lambda (g5292@ls g5293@i) (if (null? g5292@ls) '() (cons g5293@i (g5290@f (cdr g5292@ls) (+ g5293@i '1))))))) g5290@f) g5288@ls '0))) (set! g5205@do-define-record (lambda (g5248@namespec g5249@clause*) ((lambda (g5252@foo) ((lambda (g5254@foo-rtd) ((lambda (g5256@foo-rcd) ((lambda (g5258@protocol) ((lambda (g5260@make-foo) ((lambda (g5262@fields) ((lambda (g5264@idx*) ((lambda (g5266@foo-x*) ((lambda (g5268@set-foo-x!*) ((lambda (g5270@set-foo-idx*) ((lambda (g5272@foo?) ((lambda (g5274@foo-rtd-code) ((lambda (g5276@foo-rcd-code) ((lambda (g5278@protocol-code) ((lambda () (g2688@bless (cons 'begin (cons (list 'define g5254@foo-rtd g5274@foo-rtd-code) (cons (list 'define g5258@protocol g5278@protocol-code) (cons (list 'define g5256@foo-rcd g5276@foo-rcd-code) (cons (list 'define-syntax g5252@foo (list 'list ''$rtd (list 'syntax g5254@foo-rtd) (list 'syntax g5256@foo-rcd))) (cons (list 'define g5272@foo? (list 'record-predicate g5254@foo-rtd)) (cons (list 'define g5260@make-foo (list 'record-constructor g5256@foo-rcd)) (append (map (lambda (g5280@foo-x g5281@idx) (list 'define g5280@foo-x (list 'record-accessor g5254@foo-rtd g5281@idx))) g5266@foo-x* g5264@idx*) (map (lambda (g5284@set-foo-x! g5285@idx) (list 'define g5284@set-foo-x! (list 'record-mutator g5254@foo-rtd g5285@idx))) g5268@set-foo-x!* g5270@set-foo-idx*))))))))))))) (g5193@get-protocol-code g5249@clause*))) (g5191@foo-rcd-code g5249@clause* g5254@foo-rtd g5258@protocol (g5189@parent-rcd-code g5249@clause*)))) (g5185@foo-rtd-code g5252@foo g5249@clause* (g5187@parent-rtd-code g5249@clause*)))) (g5181@get-record-predicate-name g5248@namespec))) (g5197@get-mutator-indices g5262@fields))) (g5199@get-mutators g5252@foo g5262@fields))) (g5201@get-accessors g5252@foo g5262@fields))) (g5203@enumerate g5262@fields))) (g5195@get-fields g5249@clause*))) (g5179@get-record-constructor-name g5248@namespec))) (g1149@g913@gensym))) (g1149@g913@gensym))) (g1149@g913@gensym))) (g5177@get-record-name g5248@namespec)))) (set! g5207@verify-clauses (lambda (g5216@x g5217@cls*) ((lambda (g5221@valid-kwds g5223@free-id-member?) (begin (set! g5221@valid-kwds (map g2688@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! g5223@free-id-member? (lambda (g5244@x g5245@ls) (and (pair? g5245@ls) (or (g2273@free-id=? g5244@x (car g5245@ls)) (g5223@free-id-member? g5244@x (cdr g5245@ls)))))) ((letrec ((g5224@f (lambda (g5226@cls* g5227@seen*) (if (not (null? g5226@cls*)) ((lambda (g5230@t) ((lambda (g5232@ls/false) (if g5232@ls/false (apply (lambda (g5234@kwd g5235@rest) (if (or (not (g2265@id? g5234@kwd)) (not (g5223@free-id-member? g5234@kwd g5221@valid-kwds))) (g2995@syntax-violation '#f '"not a valid define-record-type keyword" g5234@kwd) (if (g2279@bound-id-member? g5234@kwd g5227@seen*) (g2995@syntax-violation '#f '"duplicate use of keyword " g5216@x g5234@kwd) (g5224@f (cdr g5226@cls*) (cons g5234@kwd g5227@seen*))))) g5232@ls/false) ((lambda (g5238@t) ((lambda (g5240@ls/false) (if g5240@ls/false (apply (lambda (g5242@cls) (g2995@syntax-violation '#f '"malformed define-record-type clause" g5242@cls)) g5240@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g5238@t))) (g2762@syntax-dispatch g5238@t 'any))) g5230@t))) (g2762@syntax-dispatch g5230@t '(any . any)))) (car g5226@cls*)) (void))))) g5224@f) g5217@cls* '()))) '#f '#f))) ((lambda (g5208@t) ((lambda (g5210@ls/false) (if g5210@ls/false (apply (lambda (g5212@namespec g5213@clause*) (begin (g5207@verify-clauses g5172@x g5213@clause*) (g5205@do-define-record g5212@namespec g5213@clause*))) g5210@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g5208@t))) (g2762@syntax-dispatch g5208@t '(_ any . each-any)))) g5172@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! g2752@define-condition-type-macro (lambda (g5680@x) ((lambda (g5683@mkname) (begin (set! g5683@mkname (lambda (g5728@name g5729@suffix) (g2999@datum->syntax g5728@name (string->symbol (string-append (symbol->string (g3001@syntax->datum g5728@name)) g5729@suffix))))) ((lambda (g5684@t) ((lambda (g5686@ls/false) (if (and g5686@ls/false (apply (lambda (g5688@ctxt g5689@name g5690@super g5691@constructor g5692@predicate g5693@field* g5694@accessor*) (and (g2265@id? g5689@name) (g2265@id? g5690@super) (g2265@id? g5691@constructor) (g2265@id? g5692@predicate) (for-all g2265@id? g5693@field*) (for-all g2265@id? g5694@accessor*))) g5686@ls/false)) (apply (lambda (g5702@ctxt g5703@name g5704@super g5705@constructor g5706@predicate g5707@field* g5708@accessor*) ((lambda (g5716@aux-accessor*) (g2688@bless (cons 'begin (cons (cons 'define-record-type (cons (list g5703@name g5705@constructor (g1149@g913@gensym)) (cons (list 'parent g5704@super) (cons (cons 'fields (map (lambda (g5718@field g5719@aux) (list 'immutable g5718@field g5719@aux)) g5707@field* g5716@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define g5706@predicate (list 'condition-predicate (list 'record-type-descriptor g5703@name))) (map (lambda (g5722@accessor g5723@aux) (list 'define g5722@accessor (list 'condition-accessor (list 'record-type-descriptor g5703@name) g5723@aux))) g5708@accessor* g5716@aux-accessor*)))))) (map (lambda (g5726@x) (g1149@g913@gensym)) g5708@accessor*))) g5686@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g5684@t))) (g2762@syntax-dispatch g5684@t '(any any any any any . #(each (any any)))))) g5680@x))) '#f))) (set! g2754@incorrect-usage-macro (lambda (g5732@e) (g2995@syntax-violation '#f '"incorrect usage of auxiliary keyword" g5732@e))) (set! g2756@parameterize-macro (lambda (g5734@e) ((lambda (g5736@t) ((lambda (g5738@ls/false) (if g5738@ls/false (apply (lambda (g5740@b g5741@b*) (g2688@bless (cons 'let (cons '() (cons g5740@b g5741@b*))))) g5738@ls/false) ((lambda (g5744@t) ((lambda (g5746@ls/false) (if g5746@ls/false (apply (lambda (g5748@olhs* g5749@orhs* g5750@b g5751@b*) ((lambda (g5756@lhs* g5757@rhs*) (g2688@bless (cons (list 'lambda (append g5756@lhs* g5757@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (g5760@lhs g5761@rhs) (list 'let (list (list 't (list g5760@lhs))) (list g5760@lhs g5761@rhs) (cons 'set! (cons g5761@rhs '(t))))) g5756@lhs* g5757@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons g5750@b g5751@b*))) '(swap)))))) (append g5748@olhs* g5749@orhs*)))) (g2977@generate-temporaries g5748@olhs*) (g2977@generate-temporaries g5749@orhs*))) g5746@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g5744@t))) (g2762@syntax-dispatch g5744@t '(_ #(each (any any)) any . each-any)))) g5736@t))) (g2762@syntax-dispatch g5736@t '(_ () any . each-any)))) g5734@e))) (set! g2758@foreign-call-transformer (lambda (g5764@e g5765@r g5766@mr) ((lambda (g5770@t) ((lambda (g5772@ls/false) (if g5772@ls/false (apply (lambda (g5774@name g5775@arg*) (cons 'foreign-call (cons (g2796@chi-expr g5774@name g5765@r g5766@mr) (g2792@chi-expr* g5775@arg* g5765@r g5766@mr)))) g5772@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g5770@t))) (g2762@syntax-dispatch g5770@t '(_ any . each-any)))) g5764@e))) (set! g2760@convert-pattern (lambda (g5778@pattern g5779@keys) ((lambda (g5783@cvt* g5785@cvt) (begin (set! g5783@cvt* (lambda (g5928@p* g5929@n g5930@ids) (if (null? g5928@p*) (values '() g5930@ids) (call-with-values (lambda () (g5783@cvt* (cdr g5928@p*) g5929@n g5930@ids)) (lambda (g5936@g5934@y g5937@g5935@ids) ((lambda (g5940@ids g5941@y) (call-with-values (lambda () (g5785@cvt (car g5928@p*) g5929@n g5940@ids)) (lambda (g5946@g5944@x g5947@g5945@ids) ((lambda (g5950@ids g5951@x) (values (cons g5951@x g5941@y) g5950@ids)) g5947@g5945@ids g5946@g5944@x)))) g5937@g5935@ids g5936@g5934@y)))))) (set! g5785@cvt (lambda (g5786@p g5787@n g5788@ids) ((lambda (g5792@t) ((lambda (g5794@ls/false) (if (and g5794@ls/false (apply (lambda (g5796@id) (g2265@id? g5796@id)) g5794@ls/false)) (apply (lambda (g5798@id) (if (g2279@bound-id-member? g5786@p g5779@keys) (values (vector 'free-id g5786@p) g5788@ids) (if (g2273@free-id=? g5786@p (g2644@scheme-stx '_)) (values '_ g5788@ids) (values 'any (cons (cons g5786@p g5787@n) g5788@ids))))) g5794@ls/false) ((lambda (g5800@t) ((lambda (g5802@ls/false) (if (and g5802@ls/false (apply (lambda (g5804@p g5805@dots) (g2764@ellipsis? g5805@dots)) g5802@ls/false)) (apply (lambda (g5808@p g5809@dots) (call-with-values (lambda () (g5785@cvt g5808@p (+ g5787@n '1) g5788@ids)) (lambda (g5814@g5812@p g5815@g5813@ids) ((lambda (g5818@ids g5819@p) (values (if (eq? g5819@p 'any) 'each-any (vector 'each g5819@p)) g5818@ids)) g5815@g5813@ids g5814@g5812@p)))) g5802@ls/false) ((lambda (g5822@t) ((lambda (g5824@ls/false) (if (and g5824@ls/false (apply (lambda (g5826@x g5827@dots g5828@ys g5829@z) (g2764@ellipsis? g5827@dots)) g5824@ls/false)) (apply (lambda (g5834@x g5835@dots g5836@ys g5837@z) (call-with-values (lambda () (g5785@cvt g5837@z g5787@n g5788@ids)) (lambda (g5844@g5842@z g5845@g5843@ids) ((lambda (g5848@ids g5849@z) (call-with-values (lambda () (g5783@cvt* g5836@ys g5787@n g5848@ids)) (lambda (g5854@g5852@ys g5855@g5853@ids) ((lambda (g5858@ids g5859@ys) (call-with-values (lambda () (g5785@cvt g5834@x (+ g5787@n '1) g5858@ids)) (lambda (g5864@g5862@x g5865@g5863@ids) ((lambda (g5868@ids g5869@x) (values (vector 'each+ g5869@x (reverse g5859@ys) g5849@z) g5868@ids)) g5865@g5863@ids g5864@g5862@x)))) g5855@g5853@ids g5854@g5852@ys)))) g5845@g5843@ids g5844@g5842@z)))) g5824@ls/false) ((lambda (g5872@t) ((lambda (g5874@ls/false) (if g5874@ls/false (apply (lambda (g5876@x g5877@y) (call-with-values (lambda () (g5785@cvt g5877@y g5787@n g5788@ids)) (lambda (g5882@g5880@y g5883@g5881@ids) ((lambda (g5886@ids g5887@y) (call-with-values (lambda () (g5785@cvt g5876@x g5787@n g5886@ids)) (lambda (g5892@g5890@x g5893@g5891@ids) ((lambda (g5896@ids g5897@x) (values (cons g5897@x g5887@y) g5896@ids)) g5893@g5891@ids g5892@g5890@x)))) g5883@g5881@ids g5882@g5880@y)))) g5874@ls/false) ((lambda (g5900@t) ((lambda (g5902@ls/false) (if g5902@ls/false (apply (lambda () (values '() g5788@ids)) g5902@ls/false) ((lambda (g5904@t) ((lambda (g5906@ls/false) (if (and g5906@ls/false (apply (lambda (g5908@p) (not (g2209@stx? g5908@p))) g5906@ls/false)) (apply (lambda (g5910@p) (call-with-values (lambda () (g5785@cvt g5910@p g5787@n g5788@ids)) (lambda (g5914@g5912@p g5915@g5913@ids) ((lambda (g5918@ids g5919@p) (values (vector 'vector g5919@p) g5918@ids)) g5915@g5913@ids g5914@g5912@p)))) g5906@ls/false) ((lambda (g5922@t) ((lambda (g5924@ls/false) (if g5924@ls/false (apply (lambda (g5926@datum) (values (vector 'atom (g2287@stx->datum g5926@datum)) g5788@ids)) g5924@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g5922@t))) (g2762@syntax-dispatch g5922@t 'any))) g5904@t))) (g2762@syntax-dispatch g5904@t '#(vector each-any)))) g5900@t))) (g2762@syntax-dispatch g5900@t '()))) g5872@t))) (g2762@syntax-dispatch g5872@t '(any . any)))) g5822@t))) (g2762@syntax-dispatch g5822@t '(any any . #(each+ any () any))))) g5800@t))) (g2762@syntax-dispatch g5800@t '(any any)))) g5792@t))) (g2762@syntax-dispatch g5792@t 'any))) g5786@p))) (g5785@cvt g5778@pattern '0 '()))) '#f '#f))) (set! g2762@syntax-dispatch ((lambda () ((lambda (g5955@stx^ g5957@match-each g5959@match-each+ g5961@match-each-any g5963@match-empty g5965@combine g5967@match* g5969@match) (begin (set! g5955@stx^ (lambda (g6156@e g6157@m* g6158@s* g6159@ae*) (if (and (null? g6157@m*) (null? g6158@s*) (null? g6159@ae*)) g6156@e (g2241@mkstx g6156@e g6157@m* g6158@s* g6159@ae*)))) (set! g5957@match-each (lambda (g6127@e g6128@p g6129@m* g6130@s* g6131@ae*) (if (pair? g6127@e) ((lambda (g6137@first) (and g6137@first ((lambda (g6139@rest) (and g6139@rest (cons g6137@first g6139@rest))) (g5957@match-each (cdr g6127@e) g6128@p g6129@m* g6130@s* g6131@ae*)))) (g5969@match (car g6127@e) g6128@p g6129@m* g6130@s* g6131@ae* '())) (if (null? g6127@e) '() (if (g2209@stx? g6127@e) (and (not (g2135@top-marked? g6129@m*)) (call-with-values (lambda () (g2239@join-wraps g6129@m* g6130@s* g6131@ae* g6127@e)) (lambda (g6144@g6141@m* g6145@g6142@s* g6146@g6143@ae*) ((lambda (g6150@ae* g6151@s* g6152@m*) (g5957@match-each (g2213@stx-expr g6127@e) g6128@p g6152@m* g6151@s* g6150@ae*)) g6146@g6143@ae* g6145@g6142@s* g6144@g6141@m*)))) (if (g1152@g919@annotation? g6127@e) (g5957@match-each (g1154@g923@annotation-expression g6127@e) g6128@p g6129@m* g6130@s* g6131@ae*) '#f)))))) (set! g5959@match-each+ (lambda (g6069@e g6070@x-pat g6071@y-pat g6072@z-pat g6073@m* g6074@s* g6075@ae* g6076@r) ((letrec ((g6085@f (lambda (g6087@e g6088@m* g6089@s* g6090@ae*) (if (pair? g6087@e) (call-with-values (lambda () (g6085@f (cdr g6087@e) g6088@m* g6089@s* g6090@ae*)) (lambda (g6098@g6095@xr* g6099@g6096@y-pat g6100@g6097@r) ((lambda (g6104@r g6105@y-pat g6106@xr*) (if g6104@r (if (null? g6105@y-pat) ((lambda (g6110@xr) (if g6110@xr (values (cons g6110@xr g6106@xr*) g6105@y-pat g6104@r) (values '#f '#f '#f))) (g5969@match (car g6087@e) g6070@x-pat g6088@m* g6089@s* g6090@ae* '())) (values '() (cdr g6105@y-pat) (g5969@match (car g6087@e) (car g6105@y-pat) g6088@m* g6089@s* g6090@ae* g6104@r))) (values '#f '#f '#f))) g6100@g6097@r g6099@g6096@y-pat g6098@g6095@xr*))) (if (g2209@stx? g6087@e) (if (g2135@top-marked? g6088@m*) (values '() g6071@y-pat (g5969@match g6087@e g6072@z-pat g6088@m* g6089@s* g6090@ae* g6076@r)) (call-with-values (lambda () (g2239@join-wraps g6088@m* g6089@s* g6090@ae* g6087@e)) (lambda (g6115@g6112@m* g6116@g6113@s* g6117@g6114@ae*) ((lambda (g6121@ae* g6122@s* g6123@m*) (g6085@f (g2213@stx-expr g6087@e) g6123@m* g6122@s* g6121@ae*)) g6117@g6114@ae* g6116@g6113@s* g6115@g6112@m*)))) (if (g1152@g919@annotation? g6087@e) (g6085@f (g1154@g923@annotation-expression g6087@e) g6088@m* g6089@s* g6090@ae*) (values '() g6071@y-pat (g5969@match g6087@e g6072@z-pat g6088@m* g6089@s* g6090@ae* g6076@r)))))))) g6085@f) g6069@e g6073@m* g6074@s* g6075@ae*))) (set! g5961@match-each-any (lambda (g6044@e g6045@m* g6046@s* g6047@ae*) (if (pair? g6044@e) ((lambda (g6052@l) (and g6052@l (cons (g5955@stx^ (car g6044@e) g6045@m* g6046@s* g6047@ae*) g6052@l))) (g5961@match-each-any (cdr g6044@e) g6045@m* g6046@s* g6047@ae*)) (if (null? g6044@e) '() (if (g2209@stx? g6044@e) (and (not (g2135@top-marked? g6045@m*)) (call-with-values (lambda () (g2239@join-wraps g6045@m* g6046@s* g6047@ae* g6044@e)) (lambda (g6057@g6054@m* g6058@g6055@s* g6059@g6056@ae*) ((lambda (g6063@ae* g6064@s* g6065@m*) (g5961@match-each-any (g2213@stx-expr g6044@e) g6065@m* g6064@s* g6063@ae*)) g6059@g6056@ae* g6058@g6055@s* g6057@g6054@m*)))) (if (g1152@g919@annotation? g6044@e) (g5961@match-each-any (g1154@g923@annotation-expression g6044@e) g6045@m* g6046@s* g6047@ae*) '#f)))))) (set! g5963@match-empty (lambda (g6038@p g6039@r) (if (null? g6038@p) g6039@r (if (eq? g6038@p '_) g6039@r (if (eq? g6038@p 'any) (cons '() g6039@r) (if (pair? g6038@p) (g5963@match-empty (car g6038@p) (g5963@match-empty (cdr g6038@p) g6039@r)) (if (eq? g6038@p 'each-any) (cons '() g6039@r) ((lambda (g6042@t) (if (memv g6042@t '(each)) (g5963@match-empty (vector-ref g6038@p '1) g6039@r) (if (memv g6042@t '(each+)) (g5963@match-empty (vector-ref g6038@p '1) (g5963@match-empty (reverse (vector-ref g6038@p '2)) (g5963@match-empty (vector-ref g6038@p '3) g6039@r))) (if (memv g6042@t '(free-id atom)) g6039@r (if (memv g6042@t '(scheme-id atom)) g6039@r (if (memv g6042@t '(vector)) (g5963@match-empty (vector-ref g6038@p '1) g6039@r) (assertion-violation 'syntax-dispatch '"invalid pattern" g6038@p))))))) (vector-ref g6038@p '0))))))))) (set! g5965@combine (lambda (g6034@r* g6035@r) (if (null? (car g6034@r*)) g6035@r (cons (map car g6034@r*) (g5965@combine (map cdr g6034@r*) g6035@r))))) (set! g5967@match* (lambda (g6001@e g6002@p g6003@m* g6004@s* g6005@ae* g6006@r) (if (null? g6002@p) (and (null? g6001@e) g6006@r) (if (pair? g6002@p) (and (pair? g6001@e) (g5969@match (car g6001@e) (car g6002@p) g6003@m* g6004@s* g6005@ae* (g5969@match (cdr g6001@e) (cdr g6002@p) g6003@m* g6004@s* g6005@ae* g6006@r))) (if (eq? g6002@p 'each-any) ((lambda (g6013@l) (and g6013@l (cons g6013@l g6006@r))) (g5961@match-each-any g6001@e g6003@m* g6004@s* g6005@ae*)) ((lambda (g6015@t) (if (memv g6015@t '(each)) (if (null? g6001@e) (g5963@match-empty (vector-ref g6002@p '1) g6006@r) ((lambda (g6017@r*) (and g6017@r* (g5965@combine g6017@r* g6006@r))) (g5957@match-each g6001@e (vector-ref g6002@p '1) g6003@m* g6004@s* g6005@ae*))) (if (memv g6015@t '(free-id)) (and (symbol? g6001@e) (g2135@top-marked? g6003@m*) (g2273@free-id=? (g5955@stx^ g6001@e g6003@m* g6004@s* g6005@ae*) (vector-ref g6002@p '1)) g6006@r) (if (memv g6015@t '(scheme-id)) (and (symbol? g6001@e) (g2135@top-marked? g6003@m*) (g2273@free-id=? (g5955@stx^ g6001@e g6003@m* g6004@s* g6005@ae*) (g2644@scheme-stx (vector-ref g6002@p '1))) g6006@r) (if (memv g6015@t '(each+)) (call-with-values (lambda () (g5959@match-each+ g6001@e (vector-ref g6002@p '1) (vector-ref g6002@p '2) (vector-ref g6002@p '3) g6003@m* g6004@s* g6005@ae* g6006@r)) (lambda (g6022@g6019@xr* g6023@g6020@y-pat g6024@g6021@r) ((lambda (g6028@r g6029@y-pat g6030@xr*) (and g6028@r (null? g6029@y-pat) (if (null? g6030@xr*) (g5963@match-empty (vector-ref g6002@p '1) g6028@r) (g5965@combine g6030@xr* g6028@r)))) g6024@g6021@r g6023@g6020@y-pat g6022@g6019@xr*))) (if (memv g6015@t '(atom)) (and (fast-equal? (vector-ref g6002@p '1) (g2285@strip g6001@e g6003@m*)) g6006@r) (if (memv g6015@t '(vector)) (and (vector? g6001@e) (g5969@match (vector->list g6001@e) (vector-ref g6002@p '1) g6003@m* g6004@s* g6005@ae* g6006@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" g6002@p)))))))) (vector-ref g6002@p '0))))))) (set! g5969@match (lambda (g5974@e g5975@p g5976@m* g5977@s* g5978@ae* g5979@r) (if (not g5979@r) '#f (if (eq? g5975@p '_) g5979@r (if (eq? g5975@p 'any) (cons (g5955@stx^ g5974@e g5976@m* g5977@s* g5978@ae*) g5979@r) (if (g2209@stx? g5974@e) (and (not (g2135@top-marked? g5976@m*)) (call-with-values (lambda () (g2239@join-wraps g5976@m* g5977@s* g5978@ae* g5974@e)) (lambda (g5989@g5986@m* g5990@g5987@s* g5991@g5988@ae*) ((lambda (g5995@ae* g5996@s* g5997@m*) (g5969@match (g2213@stx-expr g5974@e) g5975@p g5997@m* g5996@s* g5995@ae* g5979@r)) g5991@g5988@ae* g5990@g5987@s* g5989@g5986@m*)))) (if (g1152@g919@annotation? g5974@e) (g5969@match (g1154@g923@annotation-expression g5974@e) g5975@p g5976@m* g5977@s* g5978@ae* g5979@r) (g5967@match* g5974@e g5975@p g5976@m* g5977@s* g5978@ae* g5979@r)))))))) (lambda (g5970@e g5971@p) (g5969@match g5970@e g5971@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! g2764@ellipsis? (lambda (g6164@x) (and (g2265@id? g6164@x) (g2273@free-id=? g6164@x (g2644@scheme-stx '...))))) (set! g2766@underscore? (lambda (g6166@x) (and (g2265@id? g6166@x) (g2273@free-id=? g6166@x (g2644@scheme-stx '_))))) (set! g2768@verify-literals (lambda (g6168@lits g6169@expr) (for-each (lambda (g6172@x) (if (or (not (g2265@id? g6172@x)) (g2764@ellipsis? g6172@x) (g2766@underscore? g6172@x)) (g2995@syntax-violation '#f '"invalid literal" g6169@expr g6172@x) (void))) g6168@lits))) (set! g2770@syntax-case-transformer ((lambda () ((lambda (g6175@build-dispatch-call g6177@invalid-ids-error g6179@gen-clause g6181@gen-syntax-case) (begin (set! g6175@build-dispatch-call (lambda (g6286@pvars g6287@expr g6288@y g6289@r g6290@mr) ((lambda (g6296@ids g6297@levels) ((lambda (g6300@labels g6301@new-vars) ((lambda (g6304@body) (list '(primitive apply) (g2101@g1911@build-lambda '#f g6301@new-vars g6304@body) g6288@y)) (g2796@chi-expr (g2245@add-subst (g2196@make-full-rib g6296@ids g6300@labels) g6287@expr) (append (map (lambda (g6306@label g6307@var g6308@level) (cons g6306@label (g2297@make-binding 'syntax (cons g6307@var g6308@level)))) g6300@labels g6301@new-vars (map cdr g6286@pvars)) g6289@r) g6290@mr))) (map g2141@gen-label g6296@ids) (map g2137@gen-lexical g6296@ids))) (map car g6286@pvars) (map cdr g6286@pvars)))) (set! g6177@invalid-ids-error (lambda (g6274@id* g6275@e g6276@class) ((letrec ((g6280@find (lambda (g6282@id* g6283@ok*) (if (null? g6282@id*) (g2995@syntax-violation '#f '"invalid syntax" g6275@e) (if (g2265@id? (car g6282@id*)) (if (g2279@bound-id-member? (car g6282@id*) g6283@ok*) (g2991@syntax-error (car g6282@id*) '"duplicate " g6276@class) (g6280@find (cdr g6282@id*) (cons (car g6282@id*) g6283@ok*))) (g2991@syntax-error (car g6282@id*) '"invalid " g6276@class)))))) g6280@find) g6274@id* '()))) (set! g6179@gen-clause (lambda (g6236@x g6237@keys g6238@clauses g6239@r g6240@mr g6241@pat g6242@fender g6243@expr) (call-with-values (lambda () (g2760@convert-pattern g6241@pat g6237@keys)) (lambda (g6254@g6252@p g6255@g6253@pvars) ((lambda (g6258@pvars g6259@p) (if (not (g2277@distinct-bound-ids? (map car g6258@pvars))) (g6177@invalid-ids-error (map car g6258@pvars) g6241@pat '"pattern variable") (if (not (for-all (lambda (g6262@x) (not (g2764@ellipsis? (car g6262@x)))) g6258@pvars)) (g2995@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" g6241@pat) ((lambda (g6264@y) ((lambda (g6266@test) ((lambda (g6268@conseq) ((lambda (g6270@altern) (list (g2101@g1911@build-lambda '#f (list g6264@y) (list 'if g6266@test g6268@conseq g6270@altern)) (list '(primitive syntax-dispatch) g6236@x (list 'quote g6259@p)))) (g6181@gen-syntax-case g6236@x g6237@keys g6238@clauses g6239@r g6240@mr))) (g6175@build-dispatch-call g6258@pvars g6243@expr g6264@y g6239@r g6240@mr))) (if (eq? g6242@fender '#t) g6264@y ((lambda (g6272@call) (list 'if g6264@y g6272@call (list 'quote '#f))) (g6175@build-dispatch-call g6258@pvars g6242@fender g6264@y g6239@r g6240@mr))))) (g2137@gen-lexical 'tmp))))) g6255@g6253@pvars g6254@g6252@p))))) (set! g6181@gen-syntax-case (lambda (g6202@x g6203@keys g6204@clauses g6205@r g6206@mr) (if (null? g6204@clauses) (list '(primitive syntax-error) g6202@x) ((lambda (g6212@t) ((lambda (g6214@ls/false) (if g6214@ls/false (apply (lambda (g6216@pat g6217@expr) (if (and (g2265@id? g6216@pat) (not (g2279@bound-id-member? g6216@pat g6203@keys)) (not (g2764@ellipsis? g6216@pat))) (if (g2273@free-id=? g6216@pat (g2644@scheme-stx '_)) (g2796@chi-expr g6217@expr g6205@r g6206@mr) ((lambda (g6220@lab g6221@lex) ((lambda (g6224@body) (list (g2101@g1911@build-lambda '#f (list g6221@lex) g6224@body) g6202@x)) (g2796@chi-expr (g2245@add-subst (g2196@make-full-rib (list g6216@pat) (list g6220@lab)) g6217@expr) (cons (cons g6220@lab (g2297@make-binding 'syntax (cons g6221@lex '0))) g6205@r) g6206@mr))) (g2141@gen-label g6216@pat) (g2137@gen-lexical g6216@pat))) (g6179@gen-clause g6202@x g6203@keys (cdr g6204@clauses) g6205@r g6206@mr g6216@pat '#t g6217@expr))) g6214@ls/false) ((lambda (g6226@t) ((lambda (g6228@ls/false) (if g6228@ls/false (apply (lambda (g6230@pat g6231@fender g6232@expr) (g6179@gen-clause g6202@x g6203@keys (cdr g6204@clauses) g6205@r g6206@mr g6230@pat g6231@fender g6232@expr)) g6228@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g6226@t))) (g2762@syntax-dispatch g6226@t '(any any any)))) g6212@t))) (g2762@syntax-dispatch g6212@t '(any any)))) (car g6204@clauses))))) (lambda (g6182@e g6183@r g6184@mr) ((lambda (g6188@t) ((lambda (g6190@ls/false) (if g6190@ls/false (apply (lambda (g6192@expr g6193@keys g6194@clauses) (begin (g2768@verify-literals g6193@keys g6182@e) ((lambda (g6198@x) ((lambda (g6200@body) (list (g2101@g1911@build-lambda '#f (list g6198@x) g6200@body) (g2796@chi-expr g6192@expr g6183@r g6184@mr))) (g6181@gen-syntax-case g6198@x g6193@keys g6194@clauses g6183@r g6184@mr))) (g2137@gen-lexical 'tmp)))) g6190@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g6188@t))) (g2762@syntax-dispatch g6188@t '(_ any each-any . each-any)))) g6182@e)))) '#f '#f '#f '#f)))) (set! g2772@ellipsis-map (lambda (g6312@proc g6313@ls . g6316@ls*) ((lambda (g6319@who) (begin (set! g6319@who '...) (begin (if (not (list? g6313@ls)) (assertion-violation g6319@who '"not a list" g6313@ls) (void)) (if (not (null? g6316@ls*)) ((lambda (g6320@n) (for-each (lambda (g6322@x) (begin (if (not (list? g6322@x)) (assertion-violation g6319@who '"not a list" g6322@x) (void)) (if (not (= (length g6322@x) g6320@n)) (assertion-violation g6319@who '"length mismatch" g6313@ls g6322@x) (void)))) g6316@ls*)) (length g6313@ls)) (void)) (apply map g6312@proc g6313@ls g6316@ls*)))) '#f))) (set! g2774@syntax-transformer ((lambda () ((lambda (g6325@gen-syntax g6327@gen-ref g6329@gen-append g6331@gen-mappend g6333@gen-map g6335@gen-cons g6337@gen-vector g6339@regen) (begin (set! g6325@gen-syntax (lambda (g6440@src g6441@e g6442@r g6443@maps g6444@ellipsis? g6445@vec?) ((lambda (g6452@t) ((lambda (g6454@ls/false) (if (and g6454@ls/false (apply (lambda (g6456@dots) (g6444@ellipsis? g6456@dots)) g6454@ls/false)) (apply (lambda (g6458@dots) (g2995@syntax-violation '#f '"misplaced ellipsis in syntax form" g6440@src)) g6454@ls/false) ((lambda (g6460@t) ((lambda (g6462@ls/false) (if (and g6462@ls/false (apply (lambda (g6464@id) (g2265@id? g6464@id)) g6462@ls/false)) (apply (lambda (g6466@id) ((lambda (g6468@label) ((lambda (g6470@b) ((lambda () (if (eq? (g2299@binding-type g6470@b) 'syntax) (call-with-values (lambda () ((lambda (g6474@var.lev) (g6327@gen-ref g6440@src (car g6474@var.lev) (cdr g6474@var.lev) g6443@maps)) (g2301@binding-value g6470@b))) (lambda (g6476@g6472@var g6477@g6473@maps) ((lambda (g6480@maps g6481@var) (values (list 'ref g6481@var) g6480@maps)) g6477@g6473@maps g6476@g6472@var))) (values (list 'quote g6441@e) g6443@maps))))) (g2295@label->binding g6468@label g6442@r))) (g2291@id->label g6441@e))) g6462@ls/false) ((lambda (g6484@t) ((lambda (g6486@ls/false) (if (and g6486@ls/false (apply (lambda (g6488@dots g6489@e) (g6444@ellipsis? g6488@dots)) g6486@ls/false)) (apply (lambda (g6492@dots g6493@e) (if g6445@vec? (g2995@syntax-violation '#f '"misplaced ellipsis in syntax form" g6440@src) (g6325@gen-syntax g6440@src g6493@e g6442@r g6443@maps (lambda (g6496@x) '#f) '#f))) g6486@ls/false) ((lambda (g6498@t) ((lambda (g6500@ls/false) (if (and g6500@ls/false (apply (lambda (g6502@x g6503@dots g6504@y) (g6444@ellipsis? g6503@dots)) g6500@ls/false)) (apply (lambda (g6508@x g6509@dots g6510@y) ((letrec ((g6514@f (lambda (g6516@y g6517@k) ((lambda (g6520@t) ((lambda (g6522@ls/false) (if g6522@ls/false (apply (lambda () (g6517@k g6443@maps)) g6522@ls/false) ((lambda (g6524@t) ((lambda (g6526@ls/false) (if (and g6526@ls/false (apply (lambda (g6528@dots g6529@y) (g6444@ellipsis? g6528@dots)) g6526@ls/false)) (apply (lambda (g6532@dots g6533@y) (g6514@f g6533@y (lambda (g6536@maps) (call-with-values (lambda () (g6517@k (cons '() g6536@maps))) (lambda (g6540@g6538@x g6541@g6539@maps) ((lambda (g6544@maps g6545@x) (if (null? (car g6544@maps)) (g2995@syntax-violation '#f '"extra ellipsis in syntax form" g6440@src) (values (g6331@gen-mappend g6545@x (car g6544@maps)) (cdr g6544@maps)))) g6541@g6539@maps g6540@g6538@x)))))) g6526@ls/false) ((lambda (g6548@t) ((lambda (g6550@ls/false) (if g6550@ls/false (apply (lambda () (call-with-values (lambda () (g6325@gen-syntax g6440@src g6516@y g6442@r g6443@maps g6444@ellipsis? g6445@vec?)) (lambda (g6554@g6552@y g6555@g6553@maps) ((lambda (g6558@maps g6559@y) (call-with-values (lambda () (g6517@k g6558@maps)) (lambda (g6564@g6562@x g6565@g6563@maps) ((lambda (g6568@maps g6569@x) (values (g6329@gen-append g6569@x g6559@y) g6568@maps)) g6565@g6563@maps g6564@g6562@x)))) g6555@g6553@maps g6554@g6552@y)))) g6550@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g6548@t))) (g2762@syntax-dispatch g6548@t '_))) g6524@t))) (g2762@syntax-dispatch g6524@t '(any . any)))) g6520@t))) (g2762@syntax-dispatch g6520@t '()))) g6516@y)))) g6514@f) g6510@y (lambda (g6572@maps) (call-with-values (lambda () (g6325@gen-syntax g6440@src g6508@x g6442@r (cons '() g6572@maps) g6444@ellipsis? '#f)) (lambda (g6576@g6574@x g6577@g6575@maps) ((lambda (g6580@maps g6581@x) (if (null? (car g6580@maps)) (g2995@syntax-violation '#f '"extra ellipsis in syntax form" g6440@src) (values (g6333@gen-map g6581@x (car g6580@maps)) (cdr g6580@maps)))) g6577@g6575@maps g6576@g6574@x)))))) g6500@ls/false) ((lambda (g6584@t) ((lambda (g6586@ls/false) (if g6586@ls/false (apply (lambda (g6588@x g6589@y) (call-with-values (lambda () (g6325@gen-syntax g6440@src g6588@x g6442@r g6443@maps g6444@ellipsis? '#f)) (lambda (g6594@g6592@xnew g6595@g6593@maps) ((lambda (g6598@maps g6599@xnew) (call-with-values (lambda () (g6325@gen-syntax g6440@src g6589@y g6442@r g6598@maps g6444@ellipsis? g6445@vec?)) (lambda (g6604@g6602@ynew g6605@g6603@maps) ((lambda (g6608@maps g6609@ynew) (values (g6335@gen-cons g6441@e g6588@x g6589@y g6599@xnew g6609@ynew) g6608@maps)) g6605@g6603@maps g6604@g6602@ynew)))) g6595@g6593@maps g6594@g6592@xnew)))) g6586@ls/false) ((lambda (g6612@t) ((lambda (g6614@ls/false) (if g6614@ls/false (apply (lambda (g6616@ls) (call-with-values (lambda () (g6325@gen-syntax g6440@src g6616@ls g6442@r g6443@maps g6444@ellipsis? '#t)) (lambda (g6620@g6618@lsnew g6621@g6619@maps) ((lambda (g6624@maps g6625@lsnew) (values (g6337@gen-vector g6441@e g6616@ls g6625@lsnew) g6624@maps)) g6621@g6619@maps g6620@g6618@lsnew)))) g6614@ls/false) ((lambda (g6628@t) ((lambda (g6630@ls/false) (if g6630@ls/false (apply (lambda () (values (list 'quote g6441@e) g6443@maps)) g6630@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g6628@t))) (g2762@syntax-dispatch g6628@t '_))) g6612@t))) (g2762@syntax-dispatch g6612@t '#(vector each-any)))) g6584@t))) (g2762@syntax-dispatch g6584@t '(any . any)))) g6498@t))) (g2762@syntax-dispatch g6498@t '(any any . any)))) g6484@t))) (g2762@syntax-dispatch g6484@t '(any any)))) g6460@t))) (g2762@syntax-dispatch g6460@t 'any))) g6452@t))) (g2762@syntax-dispatch g6452@t 'any))) g6441@e))) (set! g6327@gen-ref (lambda (g6416@src g6417@var g6418@level g6419@maps) (if (= g6418@level '0) (values g6417@var g6419@maps) (if (null? g6419@maps) (g2995@syntax-violation '#f '"missing ellipsis in syntax form" g6416@src) (call-with-values (lambda () (g6327@gen-ref g6416@src g6417@var (- g6418@level '1) (cdr g6419@maps))) (lambda (g6426@g6424@outer-var g6427@g6425@outer-maps) ((lambda (g6430@outer-maps g6431@outer-var) ((lambda (g6434@t) (if g6434@t ((lambda (g6436@b) (values (cdr g6436@b) g6419@maps)) g6434@t) ((lambda (g6438@inner-var) (values g6438@inner-var (cons (cons (cons g6431@outer-var g6438@inner-var) (car g6419@maps)) g6430@outer-maps))) (g2137@gen-lexical 'tmp)))) (assq g6431@outer-var (car g6419@maps)))) g6427@g6425@outer-maps g6426@g6424@outer-var))))))) (set! g6329@gen-append (lambda (g6412@x g6413@y) (if (fast-equal? g6413@y ''()) g6412@x (list 'append g6412@x g6413@y)))) (set! g6331@gen-mappend (lambda (g6408@e g6409@map-env) (list 'apply '(primitive append) (g6333@gen-map g6408@e g6409@map-env)))) (set! g6333@gen-map (lambda (g6390@e g6391@map-env) ((lambda (g6394@formals g6395@actuals) (if (eq? (car g6390@e) 'ref) (car g6395@actuals) (if (for-all (lambda (g6398@x) (and (eq? (car g6398@x) 'ref) (memq (cadr g6398@x) g6394@formals))) (cdr g6390@e)) ((lambda (g6400@args) (cons 'map (cons (list 'primitive (car g6390@e)) g6400@args))) (map ((lambda (g6402@r) (lambda (g6404@x) (cdr (assq (cadr g6404@x) g6402@r)))) (map cons g6394@formals g6395@actuals)) (cdr g6390@e))) (cons* 'map (list 'lambda g6394@formals g6390@e) g6395@actuals)))) (map cdr g6391@map-env) (map (lambda (g6406@x) (list 'ref (car g6406@x))) g6391@map-env)))) (set! g6335@gen-cons (lambda (g6374@e g6375@x g6376@y g6377@xnew g6378@ynew) ((lambda (g6384@t) (if (memv g6384@t '(quote)) (if (eq? (car g6377@xnew) 'quote) ((lambda (g6386@xnew g6387@ynew) (if (and (eq? g6386@xnew g6375@x) (eq? g6387@ynew g6376@y)) (list 'quote g6374@e) (list 'quote (cons g6386@xnew g6387@ynew)))) (cadr g6377@xnew) (cadr g6378@ynew)) (if (null? (cadr g6378@ynew)) (list 'list g6377@xnew) (list 'cons g6377@xnew g6378@ynew))) (if (memv g6384@t '(list)) (cons 'list (cons g6377@xnew (cdr g6378@ynew))) (list 'cons g6377@xnew g6378@ynew)))) (car g6378@ynew)))) (set! g6337@gen-vector (lambda (g6368@e g6369@ls g6370@lsnew) (if (eq? (car g6370@lsnew) 'quote) (if (eq? (cadr g6370@lsnew) g6369@ls) (list 'quote g6368@e) (list 'quote (list->vector (cadr g6370@lsnew)))) (if (eq? (car g6370@lsnew) 'list) (cons 'vector (cdr g6370@lsnew)) (list 'list->vector g6370@lsnew))))) (set! g6339@regen (lambda (g6362@x) ((lambda (g6364@t) (if (memv g6364@t '(ref)) (cadr g6362@x) (if (memv g6364@t '(primitive)) (list 'primitive (cadr g6362@x)) (if (memv g6364@t '(quote)) (list 'quote (cadr g6362@x)) (if (memv g6364@t '(lambda)) (g2101@g1911@build-lambda '#f (cadr g6362@x) (g6339@regen (caddr g6362@x))) (if (memv g6364@t '(map)) ((lambda (g6366@ls) (cons '(primitive ellipsis-map) g6366@ls)) (map g6339@regen (cdr g6362@x))) (cons (list 'primitive (car g6362@x)) (map g6339@regen (cdr g6362@x))))))))) (car g6362@x)))) (lambda (g6340@e g6341@r g6342@mr) ((lambda (g6346@t) ((lambda (g6348@ls/false) (if g6348@ls/false (apply (lambda (g6350@x) (call-with-values (lambda () (g6325@gen-syntax g6340@e g6350@x g6341@r '() g2764@ellipsis? '#f)) (lambda (g6354@g6352@e g6355@g6353@maps) ((lambda (g6358@maps g6359@e) (g6339@regen g6359@e)) g6355@g6353@maps g6354@g6352@e)))) g6348@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g6346@t))) (g2762@syntax-dispatch g6346@t '(_ any)))) g6340@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! g2776@core-macro-transformer (lambda (g6632@name) ((lambda (g6634@t) (if (memv g6634@t '(quote)) g2682@quote-transformer (if (memv g6634@t '(lambda)) g2686@lambda-transformer (if (memv g6634@t '(case-lambda)) g2684@case-lambda-transformer (if (memv g6634@t '(letrec)) g2658@letrec-transformer (if (memv g6634@t '(letrec*)) g2660@letrec*-transformer (if (memv g6634@t '(if)) g2674@if-transformer (if (memv g6634@t '(and)) g2676@and-transformer (if (memv g6634@t '(or)) g2678@or-transformer (if (memv g6634@t '(foreign-call)) g2758@foreign-call-transformer (if (memv g6634@t '(syntax-case)) g2770@syntax-case-transformer (if (memv g6634@t '(syntax)) g2774@syntax-transformer (if (memv g6634@t '(type-descriptor)) g2664@type-descriptor-transformer (if (memv g6634@t '(record-type-descriptor)) g2666@record-type-descriptor-transformer (if (memv g6634@t '(record-constructor-descriptor)) g2668@record-constructor-descriptor-transformer (if (memv g6634@t '(fluid-let-syntax)) g2662@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" g6632@name))))))))))))))))) g6632@name))) (set! g2778@symbol-macro (lambda (g6636@x g6637@set) ((lambda (g6640@t) ((lambda (g6642@ls/false) (if (and g6642@ls/false (apply (lambda (g6644@name) (and (g2265@id? g6644@name) (memq (g2267@id->sym g6644@name) g6637@set))) g6642@ls/false)) (apply (lambda (g6646@name) (g2688@bless (list 'quote g6646@name))) g6642@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g6640@t))) (g2762@syntax-dispatch g6640@t '(_ any)))) g6636@x))) (set! g2780@macro-transformer (lambda (g6648@x) (if (procedure? g6648@x) g6648@x (if (symbol? g6648@x) ((lambda (g6650@t) (if (memv g6650@t '(define-record-type)) g2750@define-record-type-macro (if (memv g6650@t '(define-struct)) g2748@define-struct-macro (if (memv g6650@t '(include)) g2738@include-macro (if (memv g6650@t '(cond)) g2734@cond-macro (if (memv g6650@t '(let)) g2694@let-macro (if (memv g6650@t '(do)) g2726@do-macro (if (memv g6650@t '(or)) g2730@or-macro (if (memv g6650@t '(and)) g2732@and-macro (if (memv g6650@t '(let*)) g2728@let*-macro (if (memv g6650@t '(let-values)) g2696@let-values-macro (if (memv g6650@t '(let*-values)) g2698@let*-values-macro (if (memv g6650@t '(syntax-rules)) g2742@syntax-rules-macro (if (memv g6650@t '(quasiquote)) g2744@quasiquote-macro (if (memv g6650@t '(quasisyntax)) g2746@quasisyntax-macro (if (memv g6650@t '(with-syntax)) g2690@with-syntax-macro (if (memv g6650@t '(when)) g2670@when-macro (if (memv g6650@t '(unless)) g2672@unless-macro (if (memv g6650@t '(case)) g2680@case-macro (if (memv g6650@t '(identifier-syntax)) g2724@identifier-syntax-macro (if (memv g6650@t '(time)) g2716@time-macro (if (memv g6650@t '(delay)) g2718@delay-macro (if (memv g6650@t '(assert)) g2720@assert-macro (if (memv g6650@t '(endianness)) g2722@endianness-macro (if (memv g6650@t '(guard)) g2712@guard-macro (if (memv g6650@t '(define-enumeration)) g2714@define-enumeration-macro (if (memv g6650@t '(trace-lambda)) g2700@trace-lambda-macro (if (memv g6650@t '(trace-define)) g2702@trace-define-macro (if (memv g6650@t '(trace-define-syntax)) g2704@trace-define-syntax-macro (if (memv g6650@t '(trace-let-syntax)) g2708@trace-let-syntax-macro (if (memv g6650@t '(trace-letrec-syntax)) g2710@trace-letrec-syntax-macro (if (memv g6650@t '(define-condition-type)) g2752@define-condition-type-macro (if (memv g6650@t '(parameterize)) g2756@parameterize-macro (if (memv g6650@t '(include-into)) g2740@include-into-macro (if (memv g6650@t '(eol-style)) (lambda (g6652@x) (g2778@symbol-macro g6652@x '(none lf cr crlf nel crnel ls))) (if (memv g6650@t '(error-handling-mode)) (lambda (g6654@x) (g2778@symbol-macro g6654@x '(ignore raise replace))) (if (memv g6650@t '(buffer-mode)) (lambda (g6656@x) (g2778@symbol-macro g6656@x '(none line block))) (if (memv g6650@t '(file-options)) g2124@file-options-macro (if (memv g6650@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) g2754@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" g6648@x)))))))))))))))))))))))))))))))))))))))) g6648@x) (error 'core-macro-transformer '"BUG: invalid macro" g6648@x))))) (set! g2782@local-macro-transformer (lambda (g6658@x) (car g6658@x))) (set! g2784@do-macro-call (lambda (g6660@transformer g6661@expr) ((lambda (g6664@out) (begin ((letrec ((g6666@f (lambda (g6668@x) (if (not (g2209@stx? g6668@x)) (if (pair? g6668@x) (begin (g6666@f (car g6668@x)) (g6666@f (cdr g6668@x))) (if (vector? g6668@x) (vector-for-each g6666@f g6668@x) (if (symbol? g6668@x) (g2995@syntax-violation '#f '"raw symbol encountered in output of macro" g6661@expr g6668@x) (void)))) (void))))) g6666@f) g6664@out) (g2243@add-mark (g2233@gen-mark) g6664@out g6661@expr))) (g6660@transformer (g2243@add-mark g2235@anti-mark g6661@expr '#f))))) (set! g2786@chi-macro (lambda (g6670@p g6671@e) (g2784@do-macro-call (g2780@macro-transformer g6670@p) g6671@e))) (set! g2788@chi-local-macro (lambda (g6674@p g6675@e) (g2784@do-macro-call (g2782@local-macro-transformer g6674@p) g6675@e))) (set! g2790@chi-global-macro (lambda (g6678@p g6679@e) ((lambda (g6682@lib g6683@loc) (begin (g1792@g1448@visit-library g6682@lib) ((lambda (g6686@x) ((lambda (g6688@transformer) (g2784@do-macro-call g6688@transformer g6679@e)) (if (procedure? g6686@x) g6686@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" g6686@x)))) (symbol-value g6683@loc)))) (car g6678@p) (cdr g6678@p)))) (set! g2792@chi-expr* (lambda (g6690@e* g6691@r g6692@mr) (if (null? g6690@e*) '() ((lambda (g6696@e) (cons g6696@e (g2792@chi-expr* (cdr g6690@e*) g6691@r g6692@mr))) (g2796@chi-expr (car g6690@e*) g6691@r g6692@mr))))) (set! g2794@chi-application (lambda (g6698@e g6699@r g6700@mr) ((lambda (g6704@t) ((lambda (g6706@ls/false) (if g6706@ls/false (apply (lambda (g6708@rator g6709@rands) ((lambda (g6712@rator) (cons g6712@rator (g2792@chi-expr* g6709@rands g6699@r g6700@mr))) (g2796@chi-expr g6708@rator g6699@r g6700@mr))) g6706@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g6704@t))) (g2762@syntax-dispatch g6704@t '(any . each-any)))) g6698@e))) (set! g2796@chi-expr (lambda (g6714@e g6715@r g6716@mr) (call-with-values (lambda () (g2305@syntax-type g6714@e g6715@r)) (lambda (g6723@g6720@type g6724@g6721@value g6725@g6722@kwd) ((lambda (g6729@kwd g6730@value g6731@type) ((lambda (g6735@t) (if (memv g6735@t '(core-macro)) ((lambda (g6737@transformer) (g6737@transformer g6714@e g6715@r g6716@mr)) (g2776@core-macro-transformer g6730@value)) (if (memv g6735@t '(global)) ((lambda (g6739@lib) ((lambda (g6741@loc) ((lambda () (begin ((g2869@inv-collector) g6739@lib) g6741@loc)))) (cdr g6730@value))) (car g6730@value)) (if (memv g6735@t '(core-prim)) ((lambda (g6743@name) (list 'primitive g6743@name)) g6730@value) (if (memv g6735@t '(call)) (g2794@chi-application g6714@e g6715@r g6716@mr) (if (memv g6735@t '(lexical)) ((lambda (g6745@lex) g6745@lex) (g2646@lexical-var g6730@value)) (if (memv g6735@t '(global-macro global-macro!)) (g2796@chi-expr (g2790@chi-global-macro g6730@value g6714@e) g6715@r g6716@mr) (if (memv g6735@t '(local-macro local-macro!)) (g2796@chi-expr (g2788@chi-local-macro g6730@value g6714@e) g6715@r g6716@mr) (if (memv g6735@t '(macro macro!)) (g2796@chi-expr (g2786@chi-macro g6730@value g6714@e) g6715@r g6716@mr) (if (memv g6735@t '(constant)) ((lambda (g6747@datum) (list 'quote g6747@datum)) g6730@value) (if (memv g6735@t '(set!)) (g2798@chi-set! g6714@e g6715@r g6716@mr) (if (memv g6735@t '(begin)) ((lambda (g6749@t) ((lambda (g6751@ls/false) (if g6751@ls/false (apply (lambda (g6753@x g6754@x*) (g2104@g1961@build-sequence '#f (g2792@chi-expr* (cons g6753@x g6754@x*) g6715@r g6716@mr))) g6751@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g6749@t))) (g2762@syntax-dispatch g6749@t '(_ any . each-any)))) g6714@e) (if (memv g6735@t '(let-syntax letrec-syntax)) ((lambda (g6757@t) ((lambda (g6759@ls/false) (if (and g6759@ls/false (apply (lambda (g6761@xlhs* g6762@xrhs* g6763@xbody g6764@xbody*) (if (not (g2275@valid-bound-ids? g6761@xlhs*)) (g2995@syntax-violation '#f '"invalid identifiers" g6714@e) (void))) g6759@ls/false)) (apply (lambda (g6769@xlhs* g6770@xrhs* g6771@xbody g6772@xbody*) ((lambda (g6777@xlab*) ((lambda (g6779@xrib) ((lambda (g6781@xb*) ((lambda () (g2104@g1961@build-sequence '#f (g2792@chi-expr* (map (lambda (g6783@x) (g2245@add-subst g6779@xrib g6783@x)) (cons g6771@xbody g6772@xbody*)) (append (map cons g6777@xlab* g6781@xb*) g6715@r) (append (map cons g6777@xlab* g6781@xb*) g6716@mr)))))) (map (lambda (g6785@x) (g2327@make-eval-transformer (g2855@expand-transformer (if (eq? g6731@type 'let-syntax) g6785@x (g2245@add-subst g6779@xrib g6785@x)) g6716@mr))) g6770@xrhs*))) (g2196@make-full-rib g6769@xlhs* g6777@xlab*))) (map g2141@gen-label g6769@xlhs*))) g6759@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g6757@t))) (g2762@syntax-dispatch g6757@t '(_ #(each (any any)) any . each-any)))) g6714@e) (if (memv g6735@t '(displaced-lexical)) (g2995@syntax-violation '#f '"identifier out of context" g6714@e) (if (memv g6735@t '(syntax)) (g2995@syntax-violation '#f '"reference to pattern variable outside a syntax form" g6714@e) (if (memv g6735@t '(define define-syntax module import library)) (g2995@syntax-violation '#f (string-append ((lambda (g6787@t) (if (memv g6787@t '(define)) '"a definition" (if (memv g6787@t '(define-syntax)) '"a define-syntax" (if (memv g6787@t '(module)) '"a module definition" (if (memv g6787@t '(library)) '"a library definition" (if (memv g6787@t '(import)) '"an import declaration" (if (memv g6787@t '(export)) '"an export declaration" '"a non-expression"))))))) g6731@type) '" was found where an expression was expected") g6714@e) (if (memv g6735@t '(mutable)) (g2995@syntax-violation '#f '"attempt to reference an unexportable variable" g6714@e) (g2995@syntax-violation '#f '"invalid expression" g6714@e)))))))))))))))))) g6731@type)) g6725@g6722@kwd g6724@g6721@value g6723@g6720@type))))) (set! g2798@chi-set! (lambda (g6789@e g6790@r g6791@mr) ((lambda (g6795@t) ((lambda (g6797@ls/false) (if (and g6797@ls/false (apply (lambda (g6799@x g6800@v) (g2265@id? g6799@x)) g6797@ls/false)) (apply (lambda (g6803@x g6804@v) (call-with-values (lambda () (g2305@syntax-type g6803@x g6790@r)) (lambda (g6810@g6807@type g6811@g6808@value g6812@g6809@kwd) ((lambda (g6816@kwd g6817@value g6818@type) ((lambda (g6822@t) (if (memv g6822@t '(lexical)) (begin (g2650@set-lexical-mutable! g6817@value '#t) (list 'set! (g2646@lexical-var g6817@value) (g2796@chi-expr g6804@v g6790@r g6791@mr))) (if (memv g6822@t '(core-prim)) (g2995@syntax-violation '#f '"cannot modify imported core primitive" g6789@e) (if (memv g6822@t '(global)) (g2995@syntax-violation '#f '"attempt to modify imported binding" g6789@e) (if (memv g6822@t '(global-macro!)) (g2796@chi-expr (g2790@chi-global-macro g6817@value g6789@e) g6790@r g6791@mr) (if (memv g6822@t '(local-macro!)) (g2796@chi-expr (g2788@chi-local-macro g6817@value g6789@e) g6790@r g6791@mr) (if (memv g6822@t '(mutable)) (g2995@syntax-violation '#f '"attempt to assign to an unexportable variable" g6789@e) (g2995@syntax-violation '#f '"invalid syntax" g6789@e)))))))) g6818@type)) g6812@g6809@kwd g6811@g6808@value g6810@g6807@type)))) g6797@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g6795@t))) (g2762@syntax-dispatch g6795@t '(_ any any)))) g6789@e))) (set! g2800@verify-formals (lambda (g6824@fmls g6825@stx) ((lambda (g6828@t) ((lambda (g6830@ls/false) (if g6830@ls/false (apply (lambda (g6832@x*) (if (not (g2275@valid-bound-ids? g6832@x*)) (g2692@invalid-fmls-error g6825@stx g6824@fmls) (void))) g6830@ls/false) ((lambda (g6834@t) ((lambda (g6836@ls/false) (if g6836@ls/false (apply (lambda (g6838@x* g6839@x) (if (not (g2275@valid-bound-ids? (cons g6839@x g6838@x*))) (g2692@invalid-fmls-error g6825@stx g6824@fmls) (void))) g6836@ls/false) ((lambda (g6842@t) ((lambda (g6844@ls/false) (if g6844@ls/false (apply (lambda () (g2995@syntax-violation '#f '"invalid syntax" g6825@stx)) g6844@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g6842@t))) (g2762@syntax-dispatch g6842@t '_))) g6834@t))) (g2762@syntax-dispatch g6834@t '#(each+ any () any)))) g6828@t))) (g2762@syntax-dispatch g6828@t 'each-any))) g6824@fmls))) (set! g2802@chi-lambda-clause (lambda (g6846@stx g6847@fmls g6848@body* g6849@r g6850@mr) ((lambda (g6856@t) ((lambda (g6858@ls/false) (if g6858@ls/false (apply (lambda (g6860@x*) (begin (g2800@verify-formals g6847@fmls g6846@stx) ((lambda (g6862@lex* g6863@lab*) (values g6862@lex* (g2818@chi-internal (g2245@add-subst (g2196@make-full-rib g6860@x* g6863@lab*) g6848@body*) (g2654@add-lexicals g6863@lab* g6862@lex* g6849@r) g6850@mr))) (map g2137@gen-lexical g6860@x*) (map g2141@gen-label g6860@x*)))) g6858@ls/false) ((lambda (g6866@t) ((lambda (g6868@ls/false) (if g6868@ls/false (apply (lambda (g6870@x* g6871@x) (begin (g2800@verify-formals g6847@fmls g6846@stx) ((lambda (g6874@lex* g6875@lab* g6876@lex g6877@lab) (values (append g6874@lex* g6876@lex) (g2818@chi-internal (g2245@add-subst (g2196@make-full-rib (cons g6871@x g6870@x*) (cons g6877@lab g6875@lab*)) g6848@body*) (g2654@add-lexicals (cons g6877@lab g6875@lab*) (cons g6876@lex g6874@lex*) g6849@r) g6850@mr))) (map g2137@gen-lexical g6870@x*) (map g2141@gen-label g6870@x*) (g2137@gen-lexical g6871@x) (g2141@gen-label g6871@x)))) g6868@ls/false) ((lambda (g6882@t) ((lambda (g6884@ls/false) (if g6884@ls/false (apply (lambda () (g2995@syntax-violation '#f '"invalid syntax" g6847@fmls)) g6884@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g6882@t))) (g2762@syntax-dispatch g6882@t '_))) g6866@t))) (g2762@syntax-dispatch g6866@t '#(each+ any () any)))) g6856@t))) (g2762@syntax-dispatch g6856@t 'each-any))) g6847@fmls))) (set! g2804@chi-lambda-clause* (lambda (g6886@stx g6887@fmls* g6888@body** g6889@r g6890@mr) (if (null? g6887@fmls*) (values '() '()) (call-with-values (lambda () (g2802@chi-lambda-clause g6886@stx (car g6887@fmls*) (car g6888@body**) g6889@r g6890@mr)) (lambda (g6898@g6896@a g6899@g6897@b) ((lambda (g6902@b g6903@a) (call-with-values (lambda () (g2804@chi-lambda-clause* g6886@stx (cdr g6887@fmls*) (cdr g6888@body**) g6889@r g6890@mr)) (lambda (g6908@g6906@a* g6909@g6907@b*) ((lambda (g6912@b* g6913@a*) (values (cons g6903@a g6913@a*) (cons g6902@b g6912@b*))) g6909@g6907@b* g6908@g6906@a*)))) g6899@g6897@b g6898@g6896@a)))))) (set! g2806@chi-defun (lambda (g6916@x g6917@r g6918@mr) ((lambda (g6922@fmls g6923@body*) (call-with-values (lambda () (g2802@chi-lambda-clause g6922@fmls g6922@fmls g6923@body* g6917@r g6918@mr)) (lambda (g6928@g6926@fmls g6929@g6927@body) ((lambda (g6932@body g6933@fmls) (g2101@g1911@build-lambda '#f g6933@fmls g6932@body)) g6929@g6927@body g6928@g6926@fmls)))) (car g6916@x) (cdr g6916@x)))) (set! g2808@chi-rhs (lambda (g6936@rhs g6937@r g6938@mr) ((lambda (g6942@t) (if (memv g6942@t '(defun)) (g2806@chi-defun (cdr g6936@rhs) g6937@r g6938@mr) (if (memv g6942@t '(expr)) ((lambda (g6944@expr) (g2796@chi-expr g6944@expr g6937@r g6938@mr)) (cdr g6936@rhs)) (if (memv g6942@t '(top-expr)) ((lambda (g6946@expr) (g2104@g1961@build-sequence '#f (list (g2796@chi-expr g6946@expr g6937@r g6938@mr) (g2105@g1963@build-void)))) (cdr g6936@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" g6936@rhs))))) (car g6936@rhs)))) (set! g2810@expand-interaction-rhs*/init* (lambda (g6948@lhs* g6949@rhs* g6950@init* g6951@r g6952@mr) ((letrec ((g6958@f (lambda (g6960@lhs* g6961@rhs*) (if (null? g6960@lhs*) (map (lambda (g6964@x) (g2796@chi-expr g6964@x g6951@r g6952@mr)) g6950@init*) ((lambda (g6966@lhs g6967@rhs) ((lambda (g6970@t) (if (memv g6970@t '(defun)) ((lambda (g6972@rhs) (cons (list 'set! g6966@lhs g6972@rhs) (g6958@f (cdr g6960@lhs*) (cdr g6961@rhs*)))) (g2806@chi-defun (cdr g6967@rhs) g6951@r g6952@mr)) (if (memv g6970@t '(expr)) ((lambda (g6974@rhs) (cons (list 'set! g6966@lhs g6974@rhs) (g6958@f (cdr g6960@lhs*) (cdr g6961@rhs*)))) (g2796@chi-expr (cdr g6967@rhs) g6951@r g6952@mr)) (if (memv g6970@t '(top-expr)) ((lambda (g6976@e) (cons g6976@e (g6958@f (cdr g6960@lhs*) (cdr g6961@rhs*)))) (g2796@chi-expr (cdr g6967@rhs) g6951@r g6952@mr)) (error 'expand-interaction '"invallid" g6967@rhs))))) (car g6967@rhs))) (car g6960@lhs*) (car g6961@rhs*)))))) g6958@f) g6948@lhs* g6949@rhs*))) (set! g2812@chi-rhs* (lambda (g6978@rhs* g6979@r g6980@mr) ((letrec ((g6984@f (lambda (g6986@ls) (if (null? g6986@ls) '() ((lambda (g6988@a) (cons g6988@a (g6984@f (cdr g6986@ls)))) (g2808@chi-rhs (car g6986@ls) g6979@r g6980@mr)))))) g6984@f) g6978@rhs*))) (set! g2814@find-bound=? (lambda (g6990@x g6991@lhs* g6992@rhs*) (if (null? g6991@lhs*) '#f (if (g2271@bound-id=? g6990@x (car g6991@lhs*)) (car g6992@rhs*) (g2814@find-bound=? g6990@x (cdr g6991@lhs*) (cdr g6992@rhs*)))))) (set! g2816@find-dups (lambda (g6996@ls) ((letrec ((g6998@f (lambda (g7000@ls g7001@dups) (if (null? g7000@ls) g7001@dups ((lambda (g7004@t) (if g7004@t ((lambda (g7006@x) (g6998@f (cdr g7000@ls) (cons (list (car g7000@ls) g7006@x) g7001@dups))) g7004@t) (g6998@f (cdr g7000@ls) g7001@dups))) (g2814@find-bound=? (car g7000@ls) (cdr g7000@ls) (cdr g7000@ls))))))) g6998@f) g6996@ls '()))) (set! g2818@chi-internal (lambda (g7008@e* g7009@r g7010@mr) ((lambda (g7014@rib) (call-with-values (lambda () (g2853@chi-body* (map (lambda (g7024@x) (g2245@add-subst g7014@rib g7024@x)) (g2263@syntax->list g7008@e*)) g7009@r g7010@mr '() '() '() '() '() g7014@rib '#f)) (lambda (g7026@g7016@e* g7027@g7017@r g7028@g7018@mr g7029@g7019@lex* g7030@g7020@rhs* g7031@g7021@mod** g7032@g7022@kwd* g7033@g7023@_exp*) ((lambda (g7042@_exp* g7043@kwd* g7044@mod** g7045@rhs* g7046@lex* g7047@mr g7048@r g7049@e*) (begin (if (null? g7049@e*) (g2995@syntax-violation '#f '"no expression in body" g7049@e*) (void)) ((lambda (g7058@init*) ((lambda (g7060@rhs*) ((lambda () (g2107@g1967@build-letrec* '#f (reverse g7046@lex*) (reverse g7060@rhs*) (g2104@g1961@build-sequence '#f g7058@init*))))) (g2812@chi-rhs* g7045@rhs* g7048@r g7047@mr))) (g2792@chi-expr* (append (apply append (reverse g7044@mod**)) g7049@e*) g7048@r g7047@mr)))) g7033@g7023@_exp* g7032@g7022@kwd* g7031@g7021@mod** g7030@g7020@rhs* g7029@g7019@lex* g7028@g7018@mr g7027@g7017@r g7026@g7016@e*)))) (g2184@make-empty-rib)))) (set! g2820@parse-module (lambda (g7062@e) ((lambda (g7064@t) ((lambda (g7066@ls/false) (if g7066@ls/false (apply (lambda (g7068@export* g7069@b*) (begin (if (not (for-all g2265@id? g7068@export*)) (g2995@syntax-violation '#f '"module exports must be identifiers" g7062@e) (void)) (values '#f (list->vector g7068@export*) g7069@b*))) g7066@ls/false) ((lambda (g7072@t) ((lambda (g7074@ls/false) (if g7074@ls/false (apply (lambda (g7076@name g7077@export* g7078@b*) (begin (if (not (g2265@id? g7076@name)) (g2995@syntax-violation '#f '"module name must be an identifier" g7062@e) (void)) (if (not (for-all g2265@id? g7077@export*)) (g2995@syntax-violation '#f '"module exports must be identifiers" g7062@e) (void)) (values g7076@name (list->vector g7077@export*) g7078@b*))) g7074@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g7072@t))) (g2762@syntax-dispatch g7072@t '(_ any each-any . each-any)))) g7064@t))) (g2762@syntax-dispatch g7064@t '(_ each-any . each-any)))) g7062@e))) (set! g2826@g2821 (make-record-type-descriptor 'module-interface '#f 'g2824 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! g2828@g2823 '#f) (set! g2830@g2822 (make-record-constructor-descriptor g2826@g2821 '#f g2828@g2823)) (set! g2833@module-interface? (record-predicate g2826@g2821)) (set! g2835@make-module-interface (record-constructor g2830@g2822)) (set! g2837@module-interface-first-mark (record-accessor g2826@g2821 '0)) (set! g2839@module-interface-exp-id-vec (record-accessor g2826@g2821 '1)) (set! g2841@module-interface-exp-lab-vec (record-accessor g2826@g2821 '2)) (set! g2843@set-module-interface-first-mark! (record-mutator g2826@g2821 '0)) (set! g2845@set-module-interface-exp-id-vec! (record-mutator g2826@g2821 '1)) (set! g2847@set-module-interface-exp-lab-vec! (record-mutator g2826@g2821 '2)) (set! g2849@module-interface-exp-id* (lambda (g7082@iface g7083@id) ((lambda (g7087@diff-marks) (begin (set! g7087@diff-marks (lambda (g7094@ls g7095@x) (begin (if (null? g7094@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (g7098@a) (if (eq? g7098@a g7095@x) '() (cons g7098@a (g7087@diff-marks (cdr g7094@ls) g7095@x)))) (car g7094@ls))))) ((lambda (g7088@diff g7089@id-vec) (if (null? g7088@diff) g7089@id-vec (vector-map (lambda (g7092@x) (g2211@make-stx (g2213@stx-expr g7092@x) (append g7088@diff (g2215@stx-mark* g7092@x)) '() '())) g7089@id-vec))) (g7087@diff-marks (g2215@stx-mark* g7083@id) (g2837@module-interface-first-mark g7082@iface)) (g2839@module-interface-exp-id-vec g7082@iface)))) '#f))) (set! g2851@chi-internal-module (lambda (g7100@e g7101@r g7102@mr g7103@lex* g7104@rhs* g7105@mod** g7106@kwd*) (call-with-values (lambda () (g2820@parse-module g7100@e)) (lambda (g7117@g7114@name g7118@g7115@exp-id* g7119@g7116@e*) ((lambda (g7123@e* g7124@exp-id* g7125@name) ((lambda (g7129@rib) ((lambda (g7131@e*) ((lambda () (call-with-values (lambda () (g2853@chi-body* g7131@e* g7101@r g7102@mr g7103@lex* g7104@rhs* g7105@mod** g7106@kwd* '() g7129@rib '#f)) (lambda (g7141@g7133@e* g7142@g7134@r g7143@g7135@mr g7144@g7136@lex* g7145@g7137@rhs* g7146@g7138@mod** g7147@g7139@kwd* g7148@g7140@_exp*) ((lambda (g7157@_exp* g7158@kwd* g7159@mod** g7160@rhs* g7161@lex* g7162@mr g7163@r g7164@e*) ((lambda (g7173@exp-lab* g7174@mod**) (if (not g7125@name) (values g7161@lex* g7160@rhs* g7124@exp-id* g7173@exp-lab* g7163@r g7162@mr g7174@mod** g7158@kwd*) ((lambda (g7177@lab g7178@iface) (values g7161@lex* g7160@rhs* (vector g7125@name) (vector g7177@lab) (cons (cons g7177@lab (cons '$module g7178@iface)) g7163@r) (cons (cons g7177@lab (cons '$module g7178@iface)) g7162@mr) g7174@mod** g7158@kwd*)) (g2141@gen-label 'module) (g2835@make-module-interface (car (g2215@stx-mark* g7125@name)) (vector-map (lambda (g7181@x) (g2211@make-stx (g2213@stx-expr g7181@x) (g2215@stx-mark* g7181@x) '() '())) g7124@exp-id*) g7173@exp-lab*)))) (vector-map (lambda (g7183@x) (or (g2291@id->label (g2211@make-stx (g2267@id->sym g7183@x) (g2215@stx-mark* g7183@x) (list g7129@rib) '())) (g2995@syntax-violation '#f '"cannot find module export" g7183@x))) g7124@exp-id*) (cons g7164@e* g7159@mod**))) g7148@g7140@_exp* g7147@g7139@kwd* g7146@g7138@mod** g7145@g7137@rhs* g7144@g7136@lex* g7143@g7135@mr g7142@g7134@r g7141@g7133@e*)))))) (map (lambda (g7185@x) (g2245@add-subst g7129@rib g7185@x)) (g2263@syntax->list g7123@e*)))) (g2184@make-empty-rib))) g7119@g7116@e* g7118@g7115@exp-id* g7117@g7114@name))))) (set! g2853@chi-body* (lambda (g7187@e* g7188@r g7189@mr g7190@lex* g7191@rhs* g7192@mod** g7193@kwd* g7194@exp* g7195@rib g7196@top?) (if (null? g7187@e*) (values g7187@e* g7188@r g7189@mr g7190@lex* g7191@rhs* g7192@mod** g7193@kwd* g7194@exp*) ((lambda (g7207@e) (call-with-values (lambda () (g2305@syntax-type g7207@e g7188@r)) (lambda (g7212@g7209@type g7213@g7210@value g7214@g7211@kwd) ((lambda (g7218@kwd g7219@value g7220@type) ((lambda (g7224@kwd*) ((lambda (g7226@t) (if (memv g7226@t '(define)) (call-with-values (lambda () (g2638@parse-define g7207@e)) (lambda (g7230@g7228@id g7231@g7229@rhs) ((lambda (g7234@rhs g7235@id) (begin (if (g2279@bound-id-member? g7235@id g7224@kwd*) (g2995@syntax-violation '#f '"cannot redefine keyword" g7207@e) (void)) (call-with-values (lambda () (g2145@gen-define-label+loc g7235@id g7195@rib)) (lambda (g7240@g7238@lab g7241@g7239@lex) ((lambda (g7244@lex g7245@lab) (begin (g2186@extend-rib! g7195@rib g7235@id g7245@lab) (g2853@chi-body* (cdr g7187@e*) (g2652@add-lexical g7245@lab g7244@lex g7188@r) g7189@mr (cons g7244@lex g7190@lex*) (cons g7234@rhs g7191@rhs*) g7192@mod** g7224@kwd* g7194@exp* g7195@rib g7196@top?))) g7241@g7239@lex g7240@g7238@lab))))) g7231@g7229@rhs g7230@g7228@id))) (if (memv g7226@t '(define-syntax)) (call-with-values (lambda () (g2640@parse-define-syntax g7207@e)) (lambda (g7250@g7248@id g7251@g7249@rhs) ((lambda (g7254@rhs g7255@id) (begin (if (g2279@bound-id-member? g7255@id g7224@kwd*) (g2995@syntax-violation '#f '"cannot redefine keyword" g7207@e) (void)) ((lambda (g7258@lab g7259@expanded-rhs) (begin (g2186@extend-rib! g7195@rib g7255@id g7258@lab) ((lambda (g7262@b) (g2853@chi-body* (cdr g7187@e*) (cons (cons g7258@lab g7262@b) g7188@r) (cons (cons g7258@lab g7262@b) g7189@mr) g7190@lex* g7191@rhs* g7192@mod** g7224@kwd* g7194@exp* g7195@rib g7196@top?)) (g2327@make-eval-transformer g7259@expanded-rhs)))) (g2147@gen-define-label g7255@id g7195@rib) (g2855@expand-transformer g7254@rhs g7189@mr)))) g7251@g7249@rhs g7250@g7248@id))) (if (memv g7226@t '(let-syntax letrec-syntax)) ((lambda (g7264@t) ((lambda (g7266@ls/false) (if (and g7266@ls/false (apply (lambda (g7268@xlhs* g7269@xrhs* g7270@xbody*) (if (not (g2275@valid-bound-ids? g7268@xlhs*)) (g2995@syntax-violation '#f '"invalid identifiers" g7207@e) (void))) g7266@ls/false)) (apply (lambda (g7274@xlhs* g7275@xrhs* g7276@xbody*) ((lambda (g7280@xlab*) ((lambda (g7282@xrib) ((lambda (g7284@xb*) ((lambda () (g2853@chi-body* (append (map (lambda (g7286@x) (g2245@add-subst g7282@xrib g7286@x)) g7276@xbody*) (cdr g7187@e*)) (append (map cons g7280@xlab* g7284@xb*) g7188@r) (append (map cons g7280@xlab* g7284@xb*) g7189@mr) g7190@lex* g7191@rhs* g7192@mod** g7224@kwd* g7194@exp* g7195@rib g7196@top?)))) (map (lambda (g7288@x) (g2327@make-eval-transformer (g2855@expand-transformer (if (eq? g7220@type 'let-syntax) g7288@x (g2245@add-subst g7282@xrib g7288@x)) g7189@mr))) g7275@xrhs*))) (g2196@make-full-rib g7274@xlhs* g7280@xlab*))) (map g2141@gen-label g7274@xlhs*))) g7266@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g7264@t))) (g2762@syntax-dispatch g7264@t '(_ #(each (any any)) . each-any)))) g7207@e) (if (memv g7226@t '(begin)) ((lambda (g7290@t) ((lambda (g7292@ls/false) (if g7292@ls/false (apply (lambda (g7294@x*) (g2853@chi-body* (append g7294@x* (cdr g7187@e*)) g7188@r g7189@mr g7190@lex* g7191@rhs* g7192@mod** g7224@kwd* g7194@exp* g7195@rib g7196@top?)) g7292@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g7290@t))) (g2762@syntax-dispatch g7290@t '(_ . each-any)))) g7207@e) (if (memv g7226@t '(global-macro global-macro!)) (g2853@chi-body* (cons (g2245@add-subst g7195@rib (g2790@chi-global-macro g7219@value g7207@e)) (cdr g7187@e*)) g7188@r g7189@mr g7190@lex* g7191@rhs* g7192@mod** g7224@kwd* g7194@exp* g7195@rib g7196@top?) (if (memv g7226@t '(local-macro local-macro!)) (g2853@chi-body* (cons (g2245@add-subst g7195@rib (g2788@chi-local-macro g7219@value g7207@e)) (cdr g7187@e*)) g7188@r g7189@mr g7190@lex* g7191@rhs* g7192@mod** g7224@kwd* g7194@exp* g7195@rib g7196@top?) (if (memv g7226@t '(macro macro!)) (g2853@chi-body* (cons (g2245@add-subst g7195@rib (g2786@chi-macro g7219@value g7207@e)) (cdr g7187@e*)) g7188@r g7189@mr g7190@lex* g7191@rhs* g7192@mod** g7224@kwd* g7194@exp* g7195@rib g7196@top?) (if (memv g7226@t '(module)) (call-with-values (lambda () (g2851@chi-internal-module g7207@e g7188@r g7189@mr g7190@lex* g7191@rhs* g7192@mod** g7224@kwd*)) (lambda (g7304@g7296@lex* g7305@g7297@rhs* g7306@g7298@m-exp-id* g7307@g7299@m-exp-lab* g7308@g7300@r g7309@g7301@mr g7310@g7302@mod** g7311@g7303@kwd*) ((lambda (g7320@kwd* g7321@mod** g7322@mr g7323@r g7324@m-exp-lab* g7325@m-exp-id* g7326@rhs* g7327@lex*) (begin (vector-for-each (lambda (g7336@id g7337@lab) (g2186@extend-rib! g7195@rib g7336@id g7337@lab)) g7325@m-exp-id* g7324@m-exp-lab*) (g2853@chi-body* (cdr g7187@e*) g7323@r g7322@mr g7327@lex* g7326@rhs* g7321@mod** g7320@kwd* g7194@exp* g7195@rib g7196@top?))) g7311@g7303@kwd* g7310@g7302@mod** g7309@g7301@mr g7308@g7300@r g7307@g7299@m-exp-lab* g7306@g7298@m-exp-id* g7305@g7297@rhs* g7304@g7296@lex*))) (if (memv g7226@t '(library)) (begin (g2965@library-expander (g2287@stx->datum g7207@e)) (g2853@chi-body* (cdr g7187@e*) g7188@r g7189@mr g7190@lex* g7191@rhs* g7192@mod** g7224@kwd* g7194@exp* g7195@rib g7196@top?)) (if (memv g7226@t '(export)) ((lambda (g7340@t) ((lambda (g7342@ls/false) (if g7342@ls/false (apply (lambda (g7344@exp-decl*) (g2853@chi-body* (cdr g7187@e*) g7188@r g7189@mr g7190@lex* g7191@rhs* g7192@mod** g7224@kwd* (append g7344@exp-decl* g7194@exp*) g7195@rib g7196@top?)) g7342@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g7340@t))) (g2762@syntax-dispatch g7340@t '(_ . each-any)))) g7207@e) (if (memv g7226@t '(import)) ((lambda () ((lambda (g7347@module-import? g7349@module-import g7351@library-import) (begin (set! g7347@module-import? (lambda (g7423@e) ((lambda (g7425@t) ((lambda (g7427@ls/false) (if (and g7427@ls/false (apply (lambda (g7429@id) (g2265@id? g7429@id)) g7427@ls/false)) (apply (lambda (g7431@id) '#t) g7427@ls/false) ((lambda (g7433@t) ((lambda (g7435@ls/false) (if g7435@ls/false (apply (lambda (g7437@imp*) '#f) g7435@ls/false) ((lambda (g7439@t) ((lambda (g7441@ls/false) (if g7441@ls/false (apply (lambda () (g2995@syntax-violation '#f '"malformed import form" g7423@e)) g7441@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g7439@t))) (g2762@syntax-dispatch g7439@t '_))) g7433@t))) (g2762@syntax-dispatch g7433@t '(_ . each-any)))) g7425@t))) (g2762@syntax-dispatch g7425@t '(_ any)))) g7423@e))) (set! g7349@module-import (lambda (g7392@e g7393@r) ((lambda (g7396@t) ((lambda (g7398@ls/false) (if (and g7398@ls/false (apply (lambda (g7400@id) (g2265@id? g7400@id)) g7398@ls/false)) (apply (lambda (g7402@id) (call-with-values (lambda () (g2305@syntax-type g7402@id g7393@r)) (lambda (g7407@g7404@type g7408@g7405@value g7409@g7406@kwd) ((lambda (g7413@kwd g7414@value g7415@type) ((lambda (g7419@t) (if (memv g7419@t '($module)) ((lambda (g7421@iface) (values (g2849@module-interface-exp-id* g7421@iface g7402@id) (g2841@module-interface-exp-lab-vec g7421@iface))) g7414@value) (g2995@syntax-violation '#f '"invalid import" g7392@e))) g7415@type)) g7409@g7406@kwd g7408@g7405@value g7407@g7404@type)))) g7398@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g7396@t))) (g2762@syntax-dispatch g7396@t '(_ any)))) g7392@e))) (set! g7351@library-import (lambda (g7366@e) ((lambda (g7368@t) ((lambda (g7370@ls/false) (if g7370@ls/false (apply (lambda (g7372@ctxt g7373@imp*) (call-with-values (lambda () (g2863@parse-import-spec* (g3001@syntax->datum g7373@imp*))) (lambda (g7378@g7376@subst-names g7379@g7377@subst-labels) ((lambda (g7382@subst-labels g7383@subst-names) (values (vector-map (lambda (g7386@name) (g2231@datum->stx g7372@ctxt g7386@name)) g7383@subst-names) g7382@subst-labels)) g7379@g7377@subst-labels g7378@g7376@subst-names)))) g7370@ls/false) ((lambda (g7388@t) ((lambda (g7390@ls/false) (if g7390@ls/false (apply (lambda () (g2995@syntax-violation '#f '"invalid import form" g7366@e)) g7390@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g7388@t))) (g2762@syntax-dispatch g7388@t '_))) g7368@t))) (g2762@syntax-dispatch g7368@t '(any . each-any)))) g7366@e))) (begin (call-with-values (lambda () (if (g7347@module-import? g7207@e) (g7349@module-import g7207@e g7188@r) (g7351@library-import g7207@e))) (lambda (g7354@g7352@id* g7355@g7353@lab*) ((lambda (g7358@lab* g7359@id*) (vector-for-each (lambda (g7362@id g7363@lab) (g2186@extend-rib! g7195@rib g7362@id g7363@lab)) g7359@id* g7358@lab*)) g7355@g7353@lab* g7354@g7352@id*))) (g2853@chi-body* (cdr g7187@e*) g7188@r g7189@mr g7190@lex* g7191@rhs* g7192@mod** g7224@kwd* g7194@exp* g7195@rib g7196@top?)))) '#f '#f '#f))) (if g7196@top? (g2853@chi-body* (cdr g7187@e*) g7188@r g7189@mr (cons (g2137@gen-lexical 'dummy) g7190@lex*) (cons (cons 'top-expr g7207@e) g7191@rhs*) g7192@mod** g7224@kwd* g7194@exp* g7195@rib g7196@top?) (values g7187@e* g7188@r g7189@mr g7190@lex* g7191@rhs* g7192@mod** g7224@kwd* g7194@exp*)))))))))))))) g7220@type)) (if (g2265@id? g7218@kwd) (cons g7218@kwd g7193@kwd*) g7193@kwd*))) g7214@g7211@kwd g7213@g7210@value g7212@g7209@type)))) (car g7187@e*))))) (set! g2855@expand-transformer (lambda (g7443@expr g7444@r) ((lambda (g7447@rtc) ((lambda (g7449@expanded-rhs) (begin (for-each ((lambda (g7451@mark-visit) (lambda (g7453@x) (begin (g1791@g1446@invoke-library g7453@x) (g7451@mark-visit g7453@x)))) (g2871@vis-collector)) (g7447@rtc)) g7449@expanded-rhs)) ((lambda (g7459@g7455@inv-collector g7460@g7456@vis-collector g7461@g7457@inv-collector g7462@g7458@vis-collector) ((lambda (g7467@swap) (dynamic-wind g7467@swap (lambda () (g2796@chi-expr g7443@expr g7444@r g7444@r)) g7467@swap)) (lambda () (begin ((lambda (g7469@t) (begin (g7459@g7455@inv-collector g7461@g7457@inv-collector) (set! g7461@g7457@inv-collector g7469@t))) (g7459@g7455@inv-collector)) ((lambda (g7471@t) (begin (g7460@g7456@vis-collector g7462@g7458@vis-collector) (set! g7462@g7458@vis-collector g7471@t))) (g7460@g7456@vis-collector)))))) g2869@inv-collector g2871@vis-collector g7447@rtc (lambda (g7473@x) (values))))) (g2867@make-collector)))) (set! g2857@parse-exports (lambda (g7475@exp*) ((letrec ((g7477@f (lambda (g7479@exp* g7480@int* g7481@ext*) (if (null? g7479@exp*) (begin (if (not (g2275@valid-bound-ids? g7481@ext*)) (g2995@syntax-violation 'export '"invalid exports" (g2816@find-dups g7481@ext*)) (void)) (values (map g3001@syntax->datum g7481@ext*) g7480@int*)) ((lambda (g7485@t) ((lambda (g7487@ls/false) (if g7487@ls/false (apply (lambda (g7489@rename g7490@i* g7491@e*) (begin (if (not (and (eq? (g3001@syntax->datum g7489@rename) 'rename) (for-all g2265@id? g7490@i*) (for-all g2265@id? g7491@e*))) (g2995@syntax-violation 'export '"invalid export specifier" (car g7479@exp*)) (void)) (g7477@f (cdr g7479@exp*) (append g7490@i* g7480@int*) (append g7491@e* g7481@ext*)))) g7487@ls/false) ((lambda (g7495@t) ((lambda (g7497@ls/false) (if g7497@ls/false (apply (lambda (g7499@ie) (begin (if (not (g2265@id? g7499@ie)) (g2995@syntax-violation 'export '"invalid export" g7499@ie) (void)) (g7477@f (cdr g7479@exp*) (cons g7499@ie g7480@int*) (cons g7499@ie g7481@ext*)))) g7497@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g7495@t))) (g2762@syntax-dispatch g7495@t 'any))) g7485@t))) (g2762@syntax-dispatch g7485@t '(any . #(each (any any)))))) (car g7479@exp*)))))) g7477@f) g7475@exp* '() '()))) (set! g2859@parse-library-name (lambda (g7501@spec) ((lambda (g7504@parse) (begin (set! g7504@parse (lambda (g7515@x) ((lambda (g7517@t) ((lambda (g7519@ls/false) (if (and g7519@ls/false (apply (lambda (g7521@v*) (for-all (lambda (g7523@x) ((lambda (g7525@x) (and (integer? g7525@x) (exact? g7525@x))) (g3001@syntax->datum g7523@x))) g7521@v*)) g7519@ls/false)) (apply (lambda (g7527@v*) (values '() (map g3001@syntax->datum g7527@v*))) g7519@ls/false) ((lambda (g7529@t) ((lambda (g7531@ls/false) (if (and g7531@ls/false (apply (lambda (g7533@x g7534@rest) (symbol? (g3001@syntax->datum g7533@x))) g7531@ls/false)) (apply (lambda (g7537@x g7538@rest) (call-with-values (lambda () (g7504@parse g7538@rest)) (lambda (g7543@g7541@x* g7544@g7542@v*) ((lambda (g7547@v* g7548@x*) (values (cons (g3001@syntax->datum g7537@x) g7548@x*) g7547@v*)) g7544@g7542@v* g7543@g7541@x*)))) g7531@ls/false) ((lambda (g7551@t) ((lambda (g7553@ls/false) (if g7553@ls/false (apply (lambda () (values '() '())) g7553@ls/false) ((lambda (g7555@t) ((lambda (g7557@ls/false) (if g7557@ls/false (apply (lambda () (g2995@syntax-violation '#f '"invalid library name" g7501@spec)) g7557@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g7555@t))) (g2762@syntax-dispatch g7555@t '_))) g7551@t))) (g2762@syntax-dispatch g7551@t '()))) g7529@t))) (g2762@syntax-dispatch g7529@t '(any . any)))) g7517@t))) (g2762@syntax-dispatch g7517@t '(each-any)))) g7515@x))) (call-with-values (lambda () (g7504@parse g7501@spec)) (lambda (g7507@g7505@name* g7508@g7506@ver*) ((lambda (g7511@ver* g7512@name*) (begin (if (null? g7512@name*) (g2995@syntax-violation '#f '"empty library name" g7501@spec) (void)) (values g7512@name* g7511@ver*))) g7508@g7506@ver* g7507@g7505@name*))))) '#f))) (set! g2861@parse-library (lambda (g7559@e) ((lambda (g7561@t) ((lambda (g7563@ls/false) (if (and g7563@ls/false (apply (lambda (g7565@library g7566@name* g7567@export g7568@exp* g7569@import g7570@imp* g7571@b*) (and (eq? (g3001@syntax->datum g7567@export) 'export) (eq? (g3001@syntax->datum g7569@import) 'import) (eq? (g3001@syntax->datum g7565@library) 'library))) g7563@ls/false)) (apply (lambda (g7579@library g7580@name* g7581@export g7582@exp* g7583@import g7584@imp* g7585@b*) (values g7580@name* g7582@exp* g7584@imp* g7585@b*)) g7563@ls/false) ((lambda (g7593@t) ((lambda (g7595@ls/false) (if g7595@ls/false (apply (lambda () (g2995@syntax-violation '#f '"malformed library" g7559@e)) g7595@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g7593@t))) (g2762@syntax-dispatch g7593@t '_))) g7561@t))) (g2762@syntax-dispatch g7561@t '(any each-any (any . each-any) (any . each-any) . each-any)))) g7559@e))) (set! g2863@parse-import-spec* ((lambda () ((lambda (g7598@idsyn? g7600@dup-error g7602@merge-substs g7604@exclude* g7606@find* g7608@rem* g7610@remove-dups g7612@parse-library-name g7614@import-library g7616@get-import g7618@add-imports!) (begin (set! g7598@idsyn? (lambda (g8109@x) (symbol? (g3001@syntax->datum g8109@x)))) (set! g7600@dup-error (lambda (g8107@name) (g2995@syntax-violation 'import '"two imports with different bindings" g8107@name))) (set! g7602@merge-substs (lambda (g8089@s g8090@subst) ((lambda (g8094@insert-to-subst) (begin (set! g8094@insert-to-subst (lambda (g8095@a g8096@subst) ((lambda (g8099@name g8100@label) ((lambda (g8103@t) (if g8103@t ((lambda (g8105@x) (if (eq? (cdr g8105@x) g8100@label) g8096@subst (g7600@dup-error g8099@name))) g8103@t) (cons g8095@a g8096@subst))) (assq g8099@name g8096@subst))) (car g8095@a) (cdr g8095@a)))) (if (null? g8089@s) g8090@subst (g8094@insert-to-subst (car g8089@s) (g7602@merge-substs (cdr g8089@s) g8090@subst))))) '#f))) (set! g7604@exclude* (lambda (g8047@sym* g8048@subst) ((lambda (g8052@exclude) (begin (set! g8052@exclude (lambda (g8073@sym g8074@subst) (if (null? g8074@subst) (g2995@syntax-violation 'import '"cannot rename unbound identifier" g8073@sym) (if (eq? g8073@sym (caar g8074@subst)) (values (cdar g8074@subst) (cdr g8074@subst)) ((lambda (g8077@a) (call-with-values (lambda () (g8052@exclude g8073@sym (cdr g8074@subst))) (lambda (g8081@g8079@old g8082@g8080@subst) ((lambda (g8085@subst g8086@old) (values g8086@old (cons g8077@a g8085@subst))) g8082@g8080@subst g8081@g8079@old)))) (car g8074@subst)))))) (if (null? g8047@sym*) (values '() g8048@subst) (call-with-values (lambda () (g8052@exclude (car g8047@sym*) g8048@subst)) (lambda (g8055@g8053@old g8056@g8054@subst) ((lambda (g8059@subst g8060@old) (call-with-values (lambda () (g7604@exclude* (cdr g8047@sym*) g8059@subst)) (lambda (g8065@g8063@old* g8066@g8064@subst) ((lambda (g8069@subst g8070@old*) (values (cons g8060@old g8070@old*) g8069@subst)) g8066@g8064@subst g8065@g8063@old*)))) g8056@g8054@subst g8055@g8053@old)))))) '#f))) (set! g7606@find* (lambda (g8039@sym* g8040@subst) (map (lambda (g8043@x) ((lambda (g8045@t) (if g8045@t (cdr g8045@t) (g2995@syntax-violation 'import '"cannot find identifier" g8043@x))) (assq g8043@x g8040@subst))) g8039@sym*))) (set! g7608@rem* (lambda (g8031@sym* g8032@subst) ((letrec ((g8035@f (lambda (g8037@subst) (if (null? g8037@subst) '() (if (memq (caar g8037@subst) g8031@sym*) (g8035@f (cdr g8037@subst)) (cons (car g8037@subst) (g8035@f (cdr g8037@subst)))))))) g8035@f) g8032@subst))) (set! g7610@remove-dups (lambda (g8029@ls) (if (null? g8029@ls) '() (if (memq (car g8029@ls) (cdr g8029@ls)) (g7610@remove-dups (cdr g8029@ls)) (cons (car g8029@ls) (g7610@remove-dups (cdr g8029@ls))))))) (set! g7612@parse-library-name (lambda (g7799@spec) ((lambda (g7802@subversion? g7804@subversion-pred g7806@version-pred) (begin (set! g7802@subversion? (lambda (g8025@x) ((lambda (g8027@x) (and (integer? g8027@x) (exact? g8027@x) (>= g8027@x '0))) (g3001@syntax->datum g8025@x)))) (set! g7804@subversion-pred (lambda (g7929@x*) ((lambda (g7931@t) ((lambda (g7933@ls/false) (if (and g7933@ls/false (apply (lambda (g7935@n) (g7802@subversion? g7935@n)) g7933@ls/false)) (apply (lambda (g7937@n) (lambda (g7939@x) (= g7939@x (g3001@syntax->datum g7937@n)))) g7933@ls/false) ((lambda (g7941@t) ((lambda (g7943@ls/false) (if (and g7943@ls/false (apply (lambda (g7945@p? g7946@sub*) (eq? (g3001@syntax->datum g7945@p?) 'and)) g7943@ls/false)) (apply (lambda (g7949@p? g7950@sub*) ((lambda (g7953@p*) (lambda (g7955@x) (for-all (lambda (g7957@p) (g7957@p g7955@x)) g7953@p*))) (map g7804@subversion-pred g7950@sub*))) g7943@ls/false) ((lambda (g7959@t) ((lambda (g7961@ls/false) (if (and g7961@ls/false (apply (lambda (g7963@p? g7964@sub*) (eq? (g3001@syntax->datum g7963@p?) 'or)) g7961@ls/false)) (apply (lambda (g7967@p? g7968@sub*) ((lambda (g7971@p*) (lambda (g7973@x) (exists (lambda (g7975@p) (g7975@p g7973@x)) g7971@p*))) (map g7804@subversion-pred g7968@sub*))) g7961@ls/false) ((lambda (g7977@t) ((lambda (g7979@ls/false) (if (and g7979@ls/false (apply (lambda (g7981@p? g7982@sub) (eq? (g3001@syntax->datum g7981@p?) 'not)) g7979@ls/false)) (apply (lambda (g7985@p? g7986@sub) ((lambda (g7989@p) (lambda (g7991@x) (not (g7989@p g7991@x)))) (g7804@subversion-pred g7986@sub))) g7979@ls/false) ((lambda (g7993@t) ((lambda (g7995@ls/false) (if (and g7995@ls/false (apply (lambda (g7997@p? g7998@n) (and (eq? (g3001@syntax->datum g7997@p?) '<=) (g7802@subversion? g7998@n))) g7995@ls/false)) (apply (lambda (g8001@p? g8002@n) (lambda (g8005@x) (<= g8005@x (g3001@syntax->datum g8002@n)))) g7995@ls/false) ((lambda (g8007@t) ((lambda (g8009@ls/false) (if (and g8009@ls/false (apply (lambda (g8011@p? g8012@n) (and (eq? (g3001@syntax->datum g8011@p?) '>=) (g7802@subversion? g8012@n))) g8009@ls/false)) (apply (lambda (g8015@p? g8016@n) (lambda (g8019@x) (>= g8019@x (g3001@syntax->datum g8016@n)))) g8009@ls/false) ((lambda (g8021@t) ((lambda (g8023@ls/false) (if g8023@ls/false (apply (lambda () (g2995@syntax-violation 'import '"invalid sub-version spec" g7799@spec g7929@x*)) g8023@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g8021@t))) (g2762@syntax-dispatch g8021@t '_))) g8007@t))) (g2762@syntax-dispatch g8007@t '(any any)))) g7993@t))) (g2762@syntax-dispatch g7993@t '(any any)))) g7977@t))) (g2762@syntax-dispatch g7977@t '(any any)))) g7959@t))) (g2762@syntax-dispatch g7959@t '(any . each-any)))) g7941@t))) (g2762@syntax-dispatch g7941@t '(any . each-any)))) g7931@t))) (g2762@syntax-dispatch g7931@t 'any))) g7929@x*))) (set! g7806@version-pred (lambda (g7849@x*) ((lambda (g7851@t) ((lambda (g7853@ls/false) (if g7853@ls/false (apply (lambda () (lambda (g7855@x) '#t)) g7853@ls/false) ((lambda (g7857@t) ((lambda (g7859@ls/false) (if (and g7859@ls/false (apply (lambda (g7861@c g7862@ver*) (eq? (g3001@syntax->datum g7861@c) 'and)) g7859@ls/false)) (apply (lambda (g7865@c g7866@ver*) ((lambda (g7869@p*) (lambda (g7871@x) (for-all (lambda (g7873@p) (g7873@p g7871@x)) g7869@p*))) (map g7806@version-pred g7866@ver*))) g7859@ls/false) ((lambda (g7875@t) ((lambda (g7877@ls/false) (if (and g7877@ls/false (apply (lambda (g7879@c g7880@ver*) (eq? (g3001@syntax->datum g7879@c) 'or)) g7877@ls/false)) (apply (lambda (g7883@c g7884@ver*) ((lambda (g7887@p*) (lambda (g7889@x) (exists (lambda (g7891@p) (g7891@p g7889@x)) g7887@p*))) (map g7806@version-pred g7884@ver*))) g7877@ls/false) ((lambda (g7893@t) ((lambda (g7895@ls/false) (if (and g7895@ls/false (apply (lambda (g7897@c g7898@ver) (eq? (g3001@syntax->datum g7897@c) 'not)) g7895@ls/false)) (apply (lambda (g7901@c g7902@ver) ((lambda (g7905@p) (lambda (g7907@x) (not (g7905@p g7907@x)))) (g7806@version-pred g7902@ver))) g7895@ls/false) ((lambda (g7909@t) ((lambda (g7911@ls/false) (if g7911@ls/false (apply (lambda (g7913@sub*) ((lambda (g7915@p*) (lambda (g7917@x) ((letrec ((g7919@f (lambda (g7921@p* g7922@x) (if (null? g7921@p*) '#t (if (null? g7922@x) '#f (and ((car g7921@p*) (car g7922@x)) (g7919@f (cdr g7921@p*) (cdr g7922@x)))))))) g7919@f) g7915@p* g7917@x))) (map g7804@subversion-pred g7913@sub*))) g7911@ls/false) ((lambda (g7925@t) ((lambda (g7927@ls/false) (if g7927@ls/false (apply (lambda () (g2995@syntax-violation 'import '"invalid version spec" g7799@spec g7849@x*)) g7927@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g7925@t))) (g2762@syntax-dispatch g7925@t '_))) g7909@t))) (g2762@syntax-dispatch g7909@t 'each-any))) g7893@t))) (g2762@syntax-dispatch g7893@t '(any any)))) g7875@t))) (g2762@syntax-dispatch g7875@t '(any . each-any)))) g7857@t))) (g2762@syntax-dispatch g7857@t '(any . each-any)))) g7851@t))) (g2762@syntax-dispatch g7851@t '()))) g7849@x*))) ((letrec ((g7807@f (lambda (g7809@x) ((lambda (g7811@t) ((lambda (g7813@ls/false) (if g7813@ls/false (apply (lambda (g7815@version-spec*) (values '() (g7806@version-pred g7815@version-spec*))) g7813@ls/false) ((lambda (g7817@t) ((lambda (g7819@ls/false) (if (and g7819@ls/false (apply (lambda (g7821@x g7822@x*) (g7598@idsyn? g7821@x)) g7819@ls/false)) (apply (lambda (g7825@x g7826@x*) (call-with-values (lambda () (g7807@f g7826@x*)) (lambda (g7831@g7829@name g7832@g7830@pred) ((lambda (g7835@pred g7836@name) (values (cons (g3001@syntax->datum g7825@x) g7836@name) g7835@pred)) g7832@g7830@pred g7831@g7829@name)))) g7819@ls/false) ((lambda (g7839@t) ((lambda (g7841@ls/false) (if g7841@ls/false (apply (lambda () (values '() (lambda (g7843@x) '#t))) g7841@ls/false) ((lambda (g7845@t) ((lambda (g7847@ls/false) (if g7847@ls/false (apply (lambda () (g2995@syntax-violation '#f '"invalid import spec" g7799@spec)) g7847@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g7845@t))) (g2762@syntax-dispatch g7845@t '_))) g7839@t))) (g2762@syntax-dispatch g7839@t '()))) g7817@t))) (g2762@syntax-dispatch g7817@t '(any . any)))) g7811@t))) (g2762@syntax-dispatch g7811@t '(each-any)))) g7809@x)))) g7807@f) g7799@spec))) '#f '#f '#f))) (set! g7614@import-library (lambda (g7785@spec*) (call-with-values (lambda () (g7612@parse-library-name g7785@spec*)) (lambda (g7789@g7787@name g7790@g7788@pred) ((lambda (g7793@pred g7794@name) (begin (if (null? g7794@name) (g2995@syntax-violation 'import '"empty library name" g7785@spec*) (void)) ((lambda (g7797@lib) (begin (if (not g7797@lib) (g2995@syntax-violation 'import '"cannot find library with required name" g7794@name) (void)) (if (not (g7793@pred (g1744@g1352@library-version g7797@lib))) (g2995@syntax-violation 'import '"library does not satisfy version specification" g7785@spec* g7797@lib) (void)) ((g2873@imp-collector) g7797@lib) (g1748@g1360@library-subst g7797@lib))) (g1784@g1432@find-library-by-name g7794@name)))) g7790@g7788@pred g7789@g7787@name))))) (set! g7616@get-import (lambda (g7643@spec) ((lambda (g7645@t) ((lambda (g7647@ls/false) (if (and g7647@ls/false (apply (lambda (g7649@x g7650@x*) (not (memq (g3001@syntax->datum g7649@x) '(for rename except only prefix library)))) g7647@ls/false)) (apply (lambda (g7653@x g7654@x*) (g7614@import-library (cons g7653@x g7654@x*))) g7647@ls/false) ((lambda (g7657@t) ((lambda (g7659@ls/false) (if (and g7659@ls/false (apply (lambda (g7661@rename g7662@isp g7663@old* g7664@new*) (and (eq? (g3001@syntax->datum g7661@rename) 'rename) (for-all g7598@idsyn? g7663@old*) (for-all g7598@idsyn? g7664@new*))) g7659@ls/false)) (apply (lambda (g7669@rename g7670@isp g7671@old* g7672@new*) ((lambda (g7677@subst g7678@old* g7679@new*) ((lambda (g7683@old-label*) ((lambda (g7685@subst) (g7602@merge-substs (map cons g7679@new* g7683@old-label*) g7685@subst)) (g7608@rem* g7678@old* g7677@subst))) (g7606@find* g7678@old* g7677@subst))) (g7616@get-import g7670@isp) (map g3001@syntax->datum g7671@old*) (map g3001@syntax->datum g7672@new*))) g7659@ls/false) ((lambda (g7687@t) ((lambda (g7689@ls/false) (if (and g7689@ls/false (apply (lambda (g7691@except g7692@isp g7693@sym*) (and (eq? (g3001@syntax->datum g7691@except) 'except) (for-all g7598@idsyn? g7693@sym*))) g7689@ls/false)) (apply (lambda (g7697@except g7698@isp g7699@sym*) ((lambda (g7703@subst) (g7608@rem* (map g3001@syntax->datum g7699@sym*) g7703@subst)) (g7616@get-import g7698@isp))) g7689@ls/false) ((lambda (g7705@t) ((lambda (g7707@ls/false) (if (and g7707@ls/false (apply (lambda (g7709@only g7710@isp g7711@sym*) (and (eq? (g3001@syntax->datum g7709@only) 'only) (for-all g7598@idsyn? g7711@sym*))) g7707@ls/false)) (apply (lambda (g7715@only g7716@isp g7717@sym*) ((lambda (g7721@subst g7722@sym*) ((lambda (g7725@sym*) ((lambda (g7727@lab*) (map cons g7725@sym* g7727@lab*)) (g7606@find* g7725@sym* g7721@subst))) (g7610@remove-dups g7722@sym*))) (g7616@get-import g7716@isp) (map g3001@syntax->datum g7717@sym*))) g7707@ls/false) ((lambda (g7729@t) ((lambda (g7731@ls/false) (if (and g7731@ls/false (apply (lambda (g7733@prefix g7734@isp g7735@p) (and (eq? (g3001@syntax->datum g7733@prefix) 'prefix) (g7598@idsyn? g7735@p))) g7731@ls/false)) (apply (lambda (g7739@prefix g7740@isp g7741@p) ((lambda (g7745@subst g7746@prefix) (map (lambda (g7749@x) (cons (string->symbol (string-append g7746@prefix (symbol->string (car g7749@x)))) (cdr g7749@x))) g7745@subst)) (g7616@get-import g7740@isp) (symbol->string (g3001@syntax->datum g7741@p)))) g7731@ls/false) ((lambda (g7751@t) ((lambda (g7753@ls/false) (if (and g7753@ls/false (apply (lambda (g7755@library g7756@spec*) (eq? (g3001@syntax->datum g7755@library) 'library)) g7753@ls/false)) (apply (lambda (g7759@library g7760@spec*) (g7614@import-library g7760@spec*)) g7753@ls/false) ((lambda (g7763@t) ((lambda (g7765@ls/false) (if (and g7765@ls/false (apply (lambda (g7767@for g7768@isp g7769@rest) (eq? (g3001@syntax->datum g7767@for) 'for)) g7765@ls/false)) (apply (lambda (g7773@for g7774@isp g7775@rest) (g7616@get-import g7774@isp)) g7765@ls/false) ((lambda (g7779@t) ((lambda (g7781@ls/false) (if g7781@ls/false (apply (lambda (g7783@spec) (g2995@syntax-violation 'import '"invalid import spec" g7783@spec)) g7781@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g7779@t))) (g2762@syntax-dispatch g7779@t 'any))) g7763@t))) (g2762@syntax-dispatch g7763@t '(any any . any)))) g7751@t))) (g2762@syntax-dispatch g7751@t '(any each-any)))) g7729@t))) (g2762@syntax-dispatch g7729@t '(any any any)))) g7705@t))) (g2762@syntax-dispatch g7705@t '(any any . each-any)))) g7687@t))) (g2762@syntax-dispatch g7687@t '(any any . each-any)))) g7657@t))) (g2762@syntax-dispatch g7657@t '(any any . #(each (any any)))))) g7645@t))) (g2762@syntax-dispatch g7645@t '(any . each-any)))) g7643@spec))) (set! g7618@add-imports! (lambda (g7627@imp g7628@h) ((lambda (g7631@subst) (for-each (lambda (g7633@x) ((lambda (g7635@name g7636@label) ((lambda (g7639@t) (if g7639@t ((lambda (g7641@l) (if (not (eq? g7641@l g7636@label)) (g7600@dup-error g7635@name) (void))) g7639@t) (hashtable-set! g7628@h g7635@name g7636@label))) (hashtable-ref g7628@h g7635@name '#f))) (car g7633@x) (cdr g7633@x))) g7631@subst)) (g7616@get-import g7627@imp)))) (lambda (g7619@imp*) ((letrec ((g7621@f (lambda (g7623@imp* g7624@h) (if (null? g7623@imp*) (hashtable-entries g7624@h) (begin (g7618@add-imports! (car g7623@imp*) g7624@h) (g7621@f (cdr g7623@imp*) g7624@h)))))) g7621@f) g7619@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! g2865@make-top-rib (lambda (g8111@names g8112@labels) ((lambda (g8115@rib) (begin (vector-for-each (lambda (g8117@name g8118@label) (begin (if (not (symbol? g8117@name)) (error 'make-top-rib '"BUG: not a symbol" g8117@name) (void)) (g2188@extend-rib/nc! g8115@rib (g2211@make-stx g8117@name g2133@top-mark* '() '()) g8118@label))) g8111@names g8112@labels) g8115@rib)) (g2184@make-empty-rib)))) (set! g2867@make-collector (lambda () ((lambda (g8121@ls) (lambda g8125 ((lambda (g8126) (if (= g8126 '0) (apply (lambda () g8121@ls) g8125) (if (= g8126 '1) (apply (lambda (g8123@x) (set! g8121@ls (g2126@set-cons g8123@x g8121@ls))) g8125) (error 'apply '"invalid arg count")))) (length g8125)))) '()))) (set! g2869@inv-collector (g1163@g941@make-parameter (lambda g8127@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (g8129@x) (begin (if (not (procedure? g8129@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" g8129@x) (void)) g8129@x)))) (set! g2871@vis-collector (g1163@g941@make-parameter (lambda g8131@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (g8133@x) (begin (if (not (procedure? g8133@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" g8133@x) (void)) g8133@x)))) (set! g2873@imp-collector (g1163@g941@make-parameter (lambda g8135@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (g8137@x) (begin (if (not (procedure? g8137@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" g8137@x) (void)) g8137@x)))) (set! g2875@chi-library-internal (lambda (g8139@e* g8140@rib g8141@top?) (call-with-values (lambda () (g2853@chi-body* g8139@e* '() '() '() '() '() '() '() g8140@rib g8141@top?)) (lambda (g8153@g8145@e* g8154@g8146@r g8155@g8147@mr g8156@g8148@lex* g8157@g8149@rhs* g8158@g8150@mod** g8159@g8151@_kwd* g8160@g8152@exp*) ((lambda (g8169@exp* g8170@_kwd* g8171@mod** g8172@rhs* g8173@lex* g8174@mr g8175@r g8176@e*) (values (append (apply append (reverse g8171@mod**)) g8176@e*) g8175@r g8174@mr (reverse g8173@lex*) (reverse g8172@rhs*) g8169@exp*)) g8160@g8152@exp* g8159@g8151@_kwd* g8158@g8150@mod** g8157@g8149@rhs* g8156@g8148@lex* g8155@g8147@mr g8154@g8146@r g8153@g8145@e*))))) (set! g2877@chi-interaction-expr (lambda (g8185@e g8186@rib g8187@r) (call-with-values (lambda () (g2853@chi-body* (list g8185@e) g8187@r g8187@r '() '() '() '() '() g8186@rib '#t)) (lambda (g8199@g8191@e* g8200@g8192@r g8201@g8193@mr g8202@g8194@lex* g8203@g8195@rhs* g8204@g8196@mod** g8205@g8197@_kwd* g8206@g8198@_exp*) ((lambda (g8215@_exp* g8216@_kwd* g8217@mod** g8218@rhs* g8219@lex* g8220@mr g8221@r g8222@e*) ((lambda (g8231@e*) ((lambda (g8233@e) (values g8233@e g8221@r)) (if (null? g8231@e*) (g2105@g1963@build-void) (if (null? (cdr g8231@e*)) (car g8231@e*) (g2104@g1961@build-sequence '#f g8231@e*))))) (g2810@expand-interaction-rhs*/init* (reverse g8219@lex*) (reverse g8218@rhs*) (append (apply append (reverse g8217@mod**)) g8222@e*) g8221@r g8220@mr))) g8206@g8198@_exp* g8205@g8197@_kwd* g8204@g8196@mod** g8203@g8195@rhs* g8202@g8194@lex* g8201@g8193@mr g8200@g8192@r g8199@g8191@e*))))) (set! g2879@library-body-expander (lambda (g8235@name g8236@main-exp* g8237@imp* g8238@b* g8239@top?) ((lambda (g8246@itc) (begin (set! g8246@itc (g2867@make-collector)) ((lambda (g8251@g8247@imp-collector g8252@g8248@top-level-context g8253@g8249@imp-collector g8254@g8250@top-level-context) ((lambda (g8259@swap) (dynamic-wind g8259@swap (lambda () (call-with-values (lambda () (g2863@parse-import-spec* g8237@imp*)) (lambda (g8263@g8261@subst-names g8264@g8262@subst-labels) ((lambda (g8267@subst-labels g8268@subst-names) ((lambda (g8271@rib) ((lambda (g8274@wrap) (begin (set! g8274@wrap (lambda (g8382@x) (g2211@make-stx g8382@x g2133@top-mark* (list g8271@rib) '()))) ((lambda (g8275@b* g8276@main-exp* g8277@rtc g8278@vtc) ((lambda (g8287@g8283@inv-collector g8288@g8284@vis-collector g8289@g8285@inv-collector g8290@g8286@vis-collector) ((lambda (g8295@swap) (dynamic-wind g8295@swap (lambda () (call-with-values (lambda () (g2875@chi-library-internal g8275@b* g8271@rib g8239@top?)) (lambda (g8303@g8297@init* g8304@g8298@r g8305@g8299@mr g8306@g8300@lex* g8307@g8301@rhs* g8308@g8302@internal-exp*) ((lambda (g8315@internal-exp* g8316@rhs* g8317@lex* g8318@mr g8319@r g8320@init*) (call-with-values (lambda () (g2857@parse-exports (append g8276@main-exp* g8315@internal-exp*))) (lambda (g8329@g8327@exp-name* g8330@g8328@exp-id*) ((lambda (g8333@exp-id* g8334@exp-name*) (begin (g2192@seal-rib! g8271@rib) ((lambda (g8337@init*) ((lambda (g8339@rhs*) ((lambda () (begin (g2194@unseal-rib! g8271@rib) ((lambda (g8341@loc* g8342@export-subst) ((lambda (g8346@errstr) (begin (set! g8346@errstr '"attempt to export mutated variable") (call-with-values (lambda () (g2975@make-export-env/macros g8317@lex* g8341@loc* g8319@r)) (lambda (g8350@g8347@export-env g8351@g8348@global* g8352@g8349@macro*) ((lambda (g8356@macro* g8357@global* g8358@export-env) (begin (for-each (lambda (g8362@s) ((lambda (g8364@name g8365@label) ((lambda (g8368@p) (if g8368@p ((lambda (g8370@b) ((lambda (g8372@type) (if (eq? g8372@type 'mutable) (g2995@syntax-violation 'export g8346@errstr g8364@name) (void))) (car g8370@b))) (cdr g8368@p)) (void))) (assq g8365@label g8358@export-env))) (car g8362@s) (cdr g8362@s))) g8342@export-subst) ((lambda (g8374@invoke-body g8375@invoke-definitions) (values (g8246@itc) (g8277@rtc) (g8278@vtc) (g2104@g1961@build-sequence '#f (append g8375@invoke-definitions (list g8374@invoke-body))) g8356@macro* g8342@export-subst g8358@export-env)) (g2107@g1967@build-letrec* '#f g8317@lex* g8339@rhs* (g2971@build-exports g8357@global* g8337@init*)) (map g2100@g1798@build-global-define (map cdr g8357@global*))))) g8352@g8349@macro* g8351@g8348@global* g8350@g8347@export-env))))) '#f)) (map g2139@gen-global g8317@lex*) (g2973@make-export-subst g8334@exp-name* g8333@exp-id*)))))) (g2812@chi-rhs* g8316@rhs* g8319@r g8318@mr))) (g2792@chi-expr* g8320@init* g8319@r g8318@mr)))) g8330@g8328@exp-id* g8329@g8327@exp-name*)))) g8308@g8302@internal-exp* g8307@g8301@rhs* g8306@g8300@lex* g8305@g8299@mr g8304@g8298@r g8303@g8297@init*)))) g8295@swap)) (lambda () (begin ((lambda (g8378@t) (begin (g8287@g8283@inv-collector g8289@g8285@inv-collector) (set! g8289@g8285@inv-collector g8378@t))) (g8287@g8283@inv-collector)) ((lambda (g8380@t) (begin (g8288@g8284@vis-collector g8290@g8286@vis-collector) (set! g8290@g8286@vis-collector g8380@t))) (g8288@g8284@vis-collector)))))) g2869@inv-collector g2871@vis-collector g8277@rtc g8278@vtc)) (map g8274@wrap g8238@b*) (map g8274@wrap g8236@main-exp*) (g2867@make-collector) (g2867@make-collector)))) '#f)) (g2865@make-top-rib g8268@subst-names g8267@subst-labels))) g8264@g8262@subst-labels g8263@g8261@subst-names)))) g8259@swap)) (lambda () (begin ((lambda (g8384@t) (begin (g8251@g8247@imp-collector g8253@g8249@imp-collector) (set! g8253@g8249@imp-collector g8384@t))) (g8251@g8247@imp-collector)) ((lambda (g8386@t) (begin (g8252@g8248@top-level-context g8254@g8250@top-level-context) (set! g8254@g8250@top-level-context g8386@t))) (g8252@g8248@top-level-context)))))) g2873@imp-collector g3009@top-level-context g8246@itc '#f))) '#f))) (set! g2881@core-library-expander (lambda (g8388@e g8389@verify-name) (call-with-values (lambda () (g2861@parse-library g8388@e)) (lambda (g8396@g8392@name* g8397@g8393@exp* g8398@g8394@imp* g8399@g8395@b*) ((lambda (g8404@b* g8405@imp* g8406@exp* g8407@name*) (call-with-values (lambda () (g2859@parse-library-name g8407@name*)) (lambda (g8414@g8412@name g8415@g8413@ver) ((lambda (g8418@ver g8419@name) (begin (g8389@verify-name g8419@name) (call-with-values (lambda () (g2879@library-body-expander g8419@name g8406@exp* g8405@imp* g8404@b* '#f)) (lambda (g8429@g8422@imp* g8430@g8423@invoke-req* g8431@g8424@visit-req* g8432@g8425@invoke-code g8433@g8426@visit-code g8434@g8427@export-subst g8435@g8428@export-env) ((lambda (g8443@export-env g8444@export-subst g8445@visit-code g8446@invoke-code g8447@visit-req* g8448@invoke-req* g8449@imp*) (values g8419@name g8418@ver g8449@imp* g8448@invoke-req* g8447@visit-req* g8446@invoke-code g8445@visit-code g8444@export-subst g8443@export-env)) g8435@g8428@export-env g8434@g8427@export-subst g8433@g8426@visit-code g8432@g8425@invoke-code g8431@g8424@visit-req* g8430@g8423@invoke-req* g8429@g8422@imp*))))) g8415@g8413@ver g8414@g8412@name)))) g8399@g8395@b* g8398@g8394@imp* g8397@g8393@exp* g8396@g8392@name*))))) (set! g2883@parse-top-level-program (lambda (g8457@e*) ((lambda (g8459@t) ((lambda (g8461@ls/false) (if (and g8461@ls/false (apply (lambda (g8463@import g8464@imp* g8465@b*) (eq? (g3001@syntax->datum g8463@import) 'import)) g8461@ls/false)) (apply (lambda (g8469@import g8470@imp* g8471@b*) (values g8470@imp* g8471@b*)) g8461@ls/false) ((lambda (g8475@t) ((lambda (g8477@ls/false) (if (and g8477@ls/false (apply (lambda (g8479@import g8480@x g8481@y) (eq? (g3001@syntax->datum g8479@import) 'import)) g8477@ls/false)) (apply (lambda (g8485@import g8486@x g8487@y) (g2995@syntax-violation 'expander '"invalid syntax of top-level program" (g2259@syntax-car g8457@e*))) g8477@ls/false) ((lambda (g8491@t) ((lambda (g8493@ls/false) (if g8493@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) g8493@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g8491@t))) (g2762@syntax-dispatch g8491@t '_))) g8475@t))) (g2762@syntax-dispatch g8475@t '((any . any) . any)))) g8459@t))) (g2762@syntax-dispatch g8459@t '((any . each-any) . each-any)))) g8457@e*))) (set! g2885@top-level-expander (lambda (g8495@e*) (call-with-values (lambda () (g2883@parse-top-level-program g8495@e*)) (lambda (g8499@g8497@imp* g8500@g8498@b*) ((lambda (g8503@b* g8504@imp*) (call-with-values (lambda () (g2879@library-body-expander '() '() g8504@imp* g8503@b* '#t)) (lambda (g8514@g8507@imp* g8515@g8508@invoke-req* g8516@g8509@visit-req* g8517@g8510@invoke-code g8518@g8511@visit-code g8519@g8512@export-subst g8520@g8513@export-env) ((lambda (g8528@export-env g8529@export-subst g8530@visit-code g8531@invoke-code g8532@visit-req* g8533@invoke-req* g8534@imp*) (values g8533@invoke-req* g8531@invoke-code)) g8520@g8513@export-env g8519@g8512@export-subst g8518@g8511@visit-code g8517@g8510@invoke-code g8516@g8509@visit-req* g8515@g8508@invoke-req* g8514@g8507@imp*)))) g8500@g8498@b* g8499@g8497@imp*))))) (set! g2891@g2886 (make-record-type-descriptor 'env '#f 'g2889 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! g2893@g2888 '#f) (set! g2895@g2887 (make-record-constructor-descriptor g2891@g2886 '#f g2893@g2888)) (set! g2898@env? (record-predicate g2891@g2886)) (set! g2900@make-env (record-constructor g2895@g2887)) (set! g2902@env-names (record-accessor g2891@g2886 '0)) (set! g2904@env-labels (record-accessor g2891@g2886 '1)) (set! g2906@env-itc (record-accessor g2891@g2886 '2)) (set! g2908@set-env-names! (record-mutator g2891@g2886 '0)) (set! g2910@set-env-labels! (record-mutator g2891@g2886 '1)) (set! g2912@set-env-itc! (record-mutator g2891@g2886 '2)) (set! g2914@rp (g1160@g935@make-record-printer 'env (lambda (g8542@x g8543@p g8544@wr) (display '"#<environment>" g8543@p)))) (set! g2920@g2915 (make-record-type-descriptor 'interaction-env '#f 'g2918 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! g2922@g2917 '#f) (set! g2924@g2916 (make-record-constructor-descriptor g2920@g2915 '#f g2922@g2917)) (set! g2927@interaction-env? (record-predicate g2920@g2915)) (set! g2929@make-interaction-env (record-constructor g2924@g2916)) (set! g2931@interaction-env-rib (record-accessor g2920@g2915 '0)) (set! g2933@interaction-env-r (record-accessor g2920@g2915 '1)) (set! g2935@interaction-env-locs (record-accessor g2920@g2915 '2)) (set! g2937@set-interaction-env-rib! (record-mutator g2920@g2915 '0)) (set! g2939@set-interaction-env-r! (record-mutator g2920@g2915 '1)) (set! g2941@set-interaction-env-locs! (record-mutator g2920@g2915 '2)) (set! g2943@rp (g1160@g935@make-record-printer 'interaction-env (lambda (g8548@x g8549@p g8550@wr) (display '"#<environment>" g8549@p)))) (set! g2945@interaction-environment-symbols (lambda () (g2953@environment-symbols (g3007@interaction-environment)))) (set! g2947@environment-bindings (lambda (g8554@e) (vector->list (vector-map (lambda (g8556@name g8557@label) (g2949@parse-binding (cons g8556@name (g1790@g1444@imported-label->binding g8557@label)))) (g2902@env-names g8554@e) (g2904@env-labels g8554@e))))) (set! g2949@parse-binding (lambda (g8560@b) (cons (car g8560@b) ((lambda (g8562@t) (if (memv g8562@t '(core-prim global)) 'procedure (if (memv g8562@t '(core-macro macro global-macro)) 'syntax (if (memv g8562@t '($core-rtd)) 'record (if (eq? (car g8560@b) (cadr g8560@b)) 'syntax 'unknown))))) (cadr g8560@b))))) (set! g2951@environment? (lambda (g8564@x) (or (g2898@env? g8564@x) (g2927@interaction-env? g8564@x)))) (set! g2953@environment-symbols (lambda (g8566@x) (if (g2898@env? g8566@x) (vector->list (g2902@env-names g8566@x)) (if (g2927@interaction-env? g8566@x) (map values (g2164@rib-sym* (g2931@interaction-env-rib g8566@x))) (assertion-violation 'environment-symbols '"not an environment" g8566@x))))) (set! g2955@environment (lambda g8568@imp* ((lambda (g8570@itc) ((lambda (g8574@g8572@imp-collector g8575@g8573@imp-collector) ((lambda (g8578@swap) (dynamic-wind g8578@swap (lambda () (call-with-values (lambda () (g2863@parse-import-spec* g8568@imp*)) (lambda (g8582@g8580@subst-names g8583@g8581@subst-labels) ((lambda (g8586@subst-labels g8587@subst-names) (g2900@make-env g8587@subst-names g8586@subst-labels g8570@itc)) g8583@g8581@subst-labels g8582@g8580@subst-names)))) g8578@swap)) (lambda () ((lambda (g8590@t) (begin (g8574@g8572@imp-collector g8575@g8573@imp-collector) (set! g8575@g8573@imp-collector g8590@t))) (g8574@g8572@imp-collector))))) g2873@imp-collector g8570@itc)) (g2867@make-collector)))) (set! g2957@null-environment (lambda (g8592@n) (begin (if (not (eqv? g8592@n '5)) (assertion-violation 'null-environment '"not 5" g8592@n) (void)) (g2955@environment '(psyntax null-environment-5))))) (set! g2959@scheme-report-environment (lambda (g8594@n) (begin (if (not (eqv? g8594@n '5)) (assertion-violation 'scheme-report-environment '"not 5" g8594@n) (void)) (g2955@environment '(psyntax scheme-report-environment-5))))) (set! g2961@expand (lambda (g8596@x g8597@env) (if (g2898@env? g8597@env) ((lambda (g8600@rib) ((lambda (g8602@x g8603@itc g8604@rtc g8605@vtc) ((lambda (g8610@x) (begin (g2192@seal-rib! g8600@rib) (values g8610@x (g8604@rtc)))) ((lambda (g8620@g8612@top-level-context g8621@g8613@inv-collector g8622@g8614@vis-collector g8623@g8615@imp-collector g8624@g8616@top-level-context g8625@g8617@inv-collector g8626@g8618@vis-collector g8627@g8619@imp-collector) ((lambda (g8636@swap) (dynamic-wind g8636@swap (lambda () (g2796@chi-expr g8602@x '() '())) g8636@swap)) (lambda () (begin ((lambda (g8638@t) (begin (g8620@g8612@top-level-context g8624@g8616@top-level-context) (set! g8624@g8616@top-level-context g8638@t))) (g8620@g8612@top-level-context)) ((lambda (g8640@t) (begin (g8621@g8613@inv-collector g8625@g8617@inv-collector) (set! g8625@g8617@inv-collector g8640@t))) (g8621@g8613@inv-collector)) ((lambda (g8642@t) (begin (g8622@g8614@vis-collector g8626@g8618@vis-collector) (set! g8626@g8618@vis-collector g8642@t))) (g8622@g8614@vis-collector)) ((lambda (g8644@t) (begin (g8623@g8615@imp-collector g8627@g8619@imp-collector) (set! g8627@g8619@imp-collector g8644@t))) (g8623@g8615@imp-collector)))))) g3009@top-level-context g2869@inv-collector g2871@vis-collector g2873@imp-collector '#f g8604@rtc g8605@vtc g8603@itc))) (g2211@make-stx g8596@x g2133@top-mark* (list g8600@rib) '()) (g2906@env-itc g8597@env) (g2867@make-collector) (g2867@make-collector))) (g2865@make-top-rib (g2902@env-names g8597@env) (g2904@env-labels g8597@env))) (if (g2927@interaction-env? g8597@env) ((lambda (g8646@rib g8647@r g8648@rtc) ((lambda (g8652@x) (call-with-values (lambda () ((lambda (g8664@g8656@top-level-context g8665@g8657@inv-collector g8666@g8658@vis-collector g8667@g8659@imp-collector g8668@g8660@top-level-context g8669@g8661@inv-collector g8670@g8662@vis-collector g8671@g8663@imp-collector) ((lambda (g8680@swap) (dynamic-wind g8680@swap (lambda () (g2877@chi-interaction-expr g8652@x g8646@rib g8647@r)) g8680@swap)) (lambda () (begin ((lambda (g8682@t) (begin (g8664@g8656@top-level-context g8668@g8660@top-level-context) (set! g8668@g8660@top-level-context g8682@t))) (g8664@g8656@top-level-context)) ((lambda (g8684@t) (begin (g8665@g8657@inv-collector g8669@g8661@inv-collector) (set! g8669@g8661@inv-collector g8684@t))) (g8665@g8657@inv-collector)) ((lambda (g8686@t) (begin (g8666@g8658@vis-collector g8670@g8662@vis-collector) (set! g8670@g8662@vis-collector g8686@t))) (g8666@g8658@vis-collector)) ((lambda (g8688@t) (begin (g8667@g8659@imp-collector g8671@g8663@imp-collector) (set! g8671@g8663@imp-collector g8688@t))) (g8667@g8659@imp-collector)))))) g3009@top-level-context g2869@inv-collector g2871@vis-collector g2873@imp-collector g8597@env g8648@rtc (g2867@make-collector) (g2867@make-collector))) (lambda (g8690@g8654@e g8691@g8655@r^) ((lambda (g8694@r^ g8695@e) (begin (g2939@set-interaction-env-r! g8597@env g8694@r^) (values g8695@e (g8648@rtc)))) g8691@g8655@r^ g8690@g8654@e)))) (g2211@make-stx g8596@x g2133@top-mark* (list g8646@rib) '()))) (g2931@interaction-env-rib g8597@env) (g2933@interaction-env-r g8597@env) (g2867@make-collector)) (assertion-violation 'expand '"not an environment" g8597@env))))) (set! g2963@eval (lambda (g8698@x g8699@env) (begin (if (not (g2951@environment? g8699@env)) (error 'eval '"not an environment" g8699@env) (void)) (call-with-values (lambda () (g2961@expand g8698@x g8699@env)) (lambda (g8704@g8702@x g8705@g8703@invoke-req*) ((lambda (g8708@invoke-req* g8709@x) (begin (for-each g1791@g1446@invoke-library g8708@invoke-req*) (eval-core (g1247@g1175@expanded->core g8709@x)))) g8705@g8703@invoke-req* g8704@g8702@x)))))) (set! g2965@library-expander (lambda g8813 ((lambda (g8814) (if (= g8814 '3) (apply (lambda (g8712@x g8713@filename g8714@verify-name) ((lambda (g8719@build-visit-code g8721@visit!) (begin (set! g8719@build-visit-code (lambda (g8795@macro*) (if (null? g8795@macro*) (g2105@g1963@build-void) (g2104@g1961@build-sequence '#f (map (lambda (g8797@x) ((lambda (g8799@loc g8800@src) (list 'set! g8799@loc g8800@src)) (car g8797@x) (cddr g8797@x))) g8795@macro*))))) (set! g8721@visit! (lambda (g8787@macro*) (for-each (lambda (g8789@x) ((lambda (g8791@loc g8792@proc) (set-symbol-value! g8791@loc g8792@proc)) (car g8789@x) (cadr g8789@x))) g8787@macro*))) (call-with-values (lambda () (g2881@core-library-expander g8712@x g8714@verify-name)) (lambda (g8731@g8722@name g8732@g8723@ver g8733@g8724@imp* g8734@g8725@inv* g8735@g8726@vis* g8736@g8727@invoke-code g8737@g8728@macro* g8738@g8729@export-subst g8739@g8730@export-env) ((lambda (g8749@export-env g8750@export-subst g8751@macro* g8752@invoke-code g8753@vis* g8754@inv* g8755@imp* g8756@ver g8757@name) ((lambda (g8767@id g8768@name g8769@ver g8770@imp* g8771@vis* g8772@inv* g8773@visit-proc g8774@invoke-proc g8775@visit-code g8776@invoke-code) (begin (g1789@g1442@install-library g8767@id g8768@name g8769@ver g8770@imp* g8771@vis* g8772@inv* g8750@export-subst g8749@export-env g8773@visit-proc g8774@invoke-proc g8775@visit-code g8776@invoke-code '#t g8713@filename) (values g8767@id g8768@name g8769@ver g8770@imp* g8771@vis* g8772@inv* g8776@invoke-code g8775@visit-code g8750@export-subst g8749@export-env))) (g1149@g913@gensym) g8757@name g8756@ver (map g1795@g1454@library-spec g8755@imp*) (map g1795@g1454@library-spec g8753@vis*) (map g1795@g1454@library-spec g8754@inv*) (lambda () (g8721@visit! g8751@macro*)) (lambda () (eval-core (g1247@g1175@expanded->core g8752@invoke-code))) (g8719@build-visit-code g8751@macro*) g8752@invoke-code)) g8739@g8730@export-env g8738@g8729@export-subst g8737@g8728@macro* g8736@g8727@invoke-code g8735@g8726@vis* g8734@g8725@inv* g8733@g8724@imp* g8732@g8723@ver g8731@g8722@name))))) '#f '#f)) g8813) (if (= g8814 '2) (apply (lambda (g8803@x g8804@filename) (g2965@library-expander g8803@x g8804@filename (lambda (g8807@x) (values)))) g8813) (if (= g8814 '1) (apply (lambda (g8809@x) (g2965@library-expander g8809@x '#f (lambda (g8811@x) (values)))) g8813) (error 'apply '"invalid arg count"))))) (length g8813)))) (set! g2967@boot-library-expand (lambda (g8815@x) (call-with-values (lambda () (g2965@library-expander g8815@x)) (lambda (g8827@g8817@id g8828@g8818@name g8829@g8819@ver g8830@g8820@imp* g8831@g8821@vis* g8832@g8822@inv* g8833@g8823@invoke-code g8834@g8824@visit-code g8835@g8825@export-subst g8836@g8826@export-env) ((lambda (g8847@export-env g8848@export-subst g8849@visit-code g8850@invoke-code g8851@inv* g8852@vis* g8853@imp* g8854@ver g8855@name g8856@id) (values g8855@name g8850@invoke-code g8848@export-subst g8847@export-env)) g8836@g8826@export-env g8835@g8825@export-subst g8834@g8824@visit-code g8833@g8823@invoke-code g8832@g8822@inv* g8831@g8821@vis* g8830@g8820@imp* g8829@g8819@ver g8828@g8818@name g8827@g8817@id))))) (set! g2969@rev-map-append (lambda (g8867@f g8868@ls g8869@ac) (if (null? g8868@ls) g8869@ac (g2969@rev-map-append g8867@f (cdr g8868@ls) (cons (g8867@f (car g8868@ls)) g8869@ac))))) (set! g2971@build-exports (lambda (g8873@lex*+loc* g8874@init*) (g2104@g1961@build-sequence '#f (cons (g2105@g1963@build-void) (g2969@rev-map-append (lambda (g8877@x) (list 'set! (cdr g8877@x) (car g8877@x))) g8873@lex*+loc* g8874@init*))))) (set! g2973@make-export-subst (lambda (g8879@name* g8880@id*) (map (lambda (g8883@name g8884@id) ((lambda (g8887@label) (begin (if (not g8887@label) (g2995@syntax-violation '#f '"cannot export unbound identifier" g8884@id) (void)) (cons g8883@name g8887@label))) (g2291@id->label g8884@id))) g8879@name* g8880@id*))) (set! g2975@make-export-env/macros (lambda (g8889@lex* g8890@loc* g8891@r) ((lambda (g8896@lookup) (begin (set! g8896@lookup (lambda (g8925@x) ((letrec ((g8927@f (lambda (g8929@x g8930@lex* g8931@loc*) (if (pair? g8930@lex*) (if (eq? g8929@x (car g8930@lex*)) (car g8931@loc*) (g8927@f g8929@x (cdr g8930@lex*) (cdr g8931@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) g8927@f) g8925@x g8889@lex* g8890@loc*))) ((letrec ((g8897@f (lambda (g8899@r g8900@env g8901@global* g8902@macro*) (if (null? g8899@r) (values g8900@env g8901@global* g8902@macro*) ((lambda (g8907@x) ((lambda (g8909@label g8910@b) ((lambda (g8913@t) (if (memv g8913@t '(lexical)) ((lambda (g8915@v) ((lambda (g8917@loc g8918@type) (g8897@f (cdr g8899@r) (cons (cons* g8909@label g8918@type g8917@loc) g8900@env) (cons (cons (g2646@lexical-var g8915@v) g8917@loc) g8901@global*) g8902@macro*)) (g8896@lookup (g2646@lexical-var g8915@v)) (if (g2648@lexical-mutable? g8915@v) 'mutable 'global))) (g2301@binding-value g8910@b)) (if (memv g8913@t '(local-macro)) ((lambda (g8921@loc) (g8897@f (cdr g8899@r) (cons (cons* g8909@label 'global-macro g8921@loc) g8900@env) g8901@global* (cons (cons g8921@loc (g2301@binding-value g8910@b)) g8902@macro*))) (g1149@g913@gensym)) (if (memv g8913@t '(local-macro!)) ((lambda (g8923@loc) (g8897@f (cdr g8899@r) (cons (cons* g8909@label 'global-macro! g8923@loc) g8900@env) g8901@global* (cons (cons g8923@loc (g2301@binding-value g8910@b)) g8902@macro*))) (g1149@g913@gensym)) (if (memv g8913@t '($rtd $module)) (g8897@f (cdr g8899@r) (cons g8907@x g8900@env) g8901@global* g8902@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (g2299@binding-type g8910@b) (g2301@binding-value g8910@b))))))) (g2299@binding-type g8910@b))) (car g8907@x) (cdr g8907@x))) (car g8899@r)))))) g8897@f) g8891@r '() '() '()))) '#f))) (set! g2977@generate-temporaries (lambda (g8935@ls) ((lambda (g8937@t) ((lambda (g8939@ls/false) (if g8939@ls/false (apply (lambda (g8941@ls) (map (lambda (g8943@x) (g2211@make-stx ((lambda (g8945@x) (if (or (symbol? g8945@x) (string? g8945@x)) (g1149@g913@gensym g8945@x) (g1149@g913@gensym 't))) (g3001@syntax->datum g8943@x)) g2133@top-mark* '() '())) g8941@ls)) g8939@ls/false) ((lambda (g8947@t) ((lambda (g8949@ls/false) (if g8949@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) g8949@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g8947@t))) (g2762@syntax-dispatch g8947@t '_))) g8937@t))) (g2762@syntax-dispatch g8937@t 'each-any))) g8935@ls))) (set! g2979@free-identifier=? (lambda (g8951@x g8952@y) (if (g2265@id? g8951@x) (if (g2265@id? g8952@y) (g2273@free-id=? g8951@x g8952@y) (assertion-violation 'free-identifier=? '"not an identifier" g8952@y)) (assertion-violation 'free-identifier=? '"not an identifier" g8951@x)))) (set! g2981@bound-identifier=? (lambda (g8955@x g8956@y) (if (g2265@id? g8955@x) (if (g2265@id? g8956@y) (g2271@bound-id=? g8955@x g8956@y) (assertion-violation 'bound-identifier=? '"not an identifier" g8956@y)) (assertion-violation 'bound-identifier=? '"not an identifier" g8955@x)))) (set! g2983@make-source-condition (lambda (g8959@x) ((lambda (g8969@g8964 g8971@g8966 g8973@g8965 g8976@g8963 g8978@make-source-condition g8980@g8961 g8982@g8962 g8984@source-condition? g8986@source-filename g8988@source-character) (begin (set! g8969@g8964 (make-record-type-descriptor '&source-information g10071@g9386@&condition-rtd 'g8967 '#f '#f '#((immutable file-name) (immutable character)))) (set! g8971@g8966 '#f) (set! g8973@g8965 (make-record-constructor-descriptor g8969@g8964 g10072@g9388@&condition-rcd g8971@g8966)) (set! g8976@g8963 (record-predicate g8969@g8964)) (set! g8978@make-source-condition (record-constructor g8973@g8965)) (set! g8980@g8961 (record-accessor g8969@g8964 '0)) (set! g8982@g8962 (record-accessor g8969@g8964 '1)) (set! g8984@source-condition? (condition-predicate g8969@g8964)) (set! g8986@source-filename (condition-accessor g8969@g8964 g8980@g8961)) (set! g8988@source-character (condition-accessor g8969@g8964 g8982@g8962)) (if (pair? g8959@x) (g8978@make-source-condition (car g8959@x) (cdr g8959@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! g2985@extract-position-condition (lambda (g8989@x) (g2983@make-source-condition (g2987@expression-position g8989@x)))) (set! g2987@expression-position (lambda (g8991@x) (and (g2209@stx? g8991@x) ((lambda (g8993@x) (and (g1152@g919@annotation? g8993@x) (g1153@g921@annotation-source g8993@x))) (g2213@stx-expr g8991@x))))) (set! g2989@assertion-error (lambda (g8995@expr g8996@pos) (raise (condition (g10119@g9578@make-assertion-violation) (g10137@g9626@make-who-condition 'assert) (g10077@g9469@make-message-condition '"assertion failed") (g10127@g9600@make-irritants-condition (list g8995@expr)) (g2983@make-source-condition g8996@pos))))) (set! g2991@syntax-error (lambda (g8999@x . g9001@args) (begin (if (not (for-all string? g9001@args)) (assertion-violation 'syntax-error '"invalid argument" g9001@args) (void)) (raise (condition (g10077@g9469@make-message-condition (if (null? g9001@args) '"invalid syntax" (apply string-append g9001@args))) (g10171@g9716@make-syntax-violation (g3001@syntax->datum g8999@x) '#f) (g2985@extract-position-condition g8999@x)))))) (set! g2993@syntax-violation* (lambda (g9003@who g9004@msg g9005@form g9006@condition-object) (begin (if (not (string? g9004@msg)) (assertion-violation 'syntax-violation '"message is not a string" g9004@msg) (void)) ((lambda (g9011@who) (raise (condition (if g9011@who (g10137@g9626@make-who-condition g9011@who) (condition)) (g10077@g9469@make-message-condition g9004@msg) g9006@condition-object (g2985@extract-position-condition g9005@form)))) (if (or (string? g9003@who) (symbol? g9003@who)) g9003@who (if (not g9003@who) ((lambda (g9013@t) ((lambda (g9015@ls/false) (if (and g9015@ls/false (apply (lambda (g9017@id) (g2265@id? g9017@id)) g9015@ls/false)) (apply (lambda (g9019@id) (g3001@syntax->datum g9019@id)) g9015@ls/false) ((lambda (g9021@t) ((lambda (g9023@ls/false) (if (and g9023@ls/false (apply (lambda (g9025@id g9026@rest) (g2265@id? g9025@id)) g9023@ls/false)) (apply (lambda (g9029@id g9030@rest) (g3001@syntax->datum g9029@id)) g9023@ls/false) ((lambda (g9033@t) ((lambda (g9035@ls/false) (if g9035@ls/false (apply (lambda () '#f) g9035@ls/false) (g2995@syntax-violation '#f '"invalid syntax" g9033@t))) (g2762@syntax-dispatch g9033@t '_))) g9021@t))) (g2762@syntax-dispatch g9021@t '(any . any)))) g9013@t))) (g2762@syntax-dispatch g9013@t 'any))) g9005@form) (assertion-violation 'syntax-violation '"invalid who argument" g9003@who))))))) (set! g2995@syntax-violation (lambda g9051 ((lambda (g9052) (if (= g9052 '3) (apply (lambda (g9037@who g9038@msg g9039@form) (g2995@syntax-violation g9037@who g9038@msg g9039@form '#f)) g9051) (if (= g9052 '4) (apply (lambda (g9043@who g9044@msg g9045@form g9046@subform) (g2993@syntax-violation* g9043@who g9044@msg g9045@form (g10171@g9716@make-syntax-violation (g3001@syntax->datum g9045@form) (g3001@syntax->datum g9046@subform)))) g9051) (error 'apply '"invalid arg count")))) (length g9051)))) (set! g2997@identifier? (lambda (g9053@x) (g2265@id? g9053@x))) (set! g2999@datum->syntax (lambda (g9055@id g9056@datum) (if (g2265@id? g9055@id) (g2231@datum->stx g9055@id g9056@datum) (assertion-violation 'datum->syntax '"not an identifier" g9055@id)))) (set! g3001@syntax->datum (lambda (g9059@x) (g2287@stx->datum g9059@x))) (set! g3003@compile-r6rs-top-level (lambda (g9061@x*) (call-with-values (lambda () (g2885@top-level-expander g9061@x*)) (lambda (g9065@g9063@lib* g9066@g9064@invoke-code) ((lambda (g9069@invoke-code g9070@lib*) (lambda () (begin (for-each g1791@g1446@invoke-library g9070@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (g1247@g1175@expanded->core g9069@invoke-code)) (void)) (eval-core (g1247@g1175@expanded->core g9069@invoke-code))))) g9066@g9064@invoke-code g9065@g9063@lib*))))) (set! g3005@pre-compile-r6rs-top-level (lambda (g9073@x*) (call-with-values (lambda () (g2885@top-level-expander g9073@x*)) (lambda (g9077@g9075@lib* g9078@g9076@invoke-code) ((lambda (g9081@invoke-code g9082@lib*) (begin (for-each g1791@g1446@invoke-library g9082@lib*) (g1161@g937@compile-core (g1247@g1175@expanded->core g9081@invoke-code)))) g9078@g9076@invoke-code g9077@g9075@lib*))))) (set! g3007@interaction-environment ((lambda (g9085@the-env) (lambda () (or g9085@the-env ((lambda (g9087@lib g9088@rib) (begin ((lambda (g9091@subst) (begin (g2174@set-rib-sym*! g9088@rib (map car g9091@subst)) (g2176@set-rib-mark**! g9088@rib (map (lambda (g9093@x) g2133@top-mark*) g9091@subst)) (g2178@set-rib-label*! g9088@rib (map cdr g9091@subst)))) (g1748@g1360@library-subst g9087@lib)) ((lambda (g9095@env) (begin (set! g9085@the-env g9095@env) g9095@env)) (g2929@make-interaction-env g9088@rib '() '())))) (g1784@g1432@find-library-by-name '(mosh interaction)) (g2184@make-empty-rib))))) '#f)) (set! g3009@top-level-context (g1163@g941@make-parameter '#f)) (begin (set! g9365@g3009@top-level-context g3009@top-level-context) (set! g9364@g3007@interaction-environment g3007@interaction-environment) (set! g9363@g3005@pre-compile-r6rs-top-level g3005@pre-compile-r6rs-top-level) (set! g9362@g3003@compile-r6rs-top-level g3003@compile-r6rs-top-level) (set! g9361@g3001@syntax->datum g3001@syntax->datum) (set! g9360@g2999@datum->syntax g2999@datum->syntax) (set! g9359@g2997@identifier? g2997@identifier?) (set! g9358@g2995@syntax-violation g2995@syntax-violation) (set! g9357@g2993@syntax-violation* g2993@syntax-violation*) (set! g9356@g2991@syntax-error g2991@syntax-error) (set! g9355@g2989@assertion-error g2989@assertion-error) (set! g9354@g2987@expression-position g2987@expression-position) (set! g9353@g2985@extract-position-condition g2985@extract-position-condition) (set! g9352@g2983@make-source-condition g2983@make-source-condition) (set! g9351@g2981@bound-identifier=? g2981@bound-identifier=?) (set! g9350@g2979@free-identifier=? g2979@free-identifier=?) (set! g9349@g2977@generate-temporaries g2977@generate-temporaries) (set! g9348@g2975@make-export-env/macros g2975@make-export-env/macros) (set! g9347@g2973@make-export-subst g2973@make-export-subst) (set! g9346@g2971@build-exports g2971@build-exports) (set! g9345@g2969@rev-map-append g2969@rev-map-append) (set! g9344@g2967@boot-library-expand g2967@boot-library-expand) (set! g9343@g2965@library-expander g2965@library-expander) (set! g9342@g2963@eval g2963@eval) (set! g9341@g2961@expand g2961@expand) (set! g9340@g2959@scheme-report-environment g2959@scheme-report-environment) (set! g9339@g2957@null-environment g2957@null-environment) (set! g9338@g2955@environment g2955@environment) (set! g9337@g2953@environment-symbols g2953@environment-symbols) (set! g9336@g2951@environment? g2951@environment?) (set! g9335@g2949@parse-binding g2949@parse-binding) (set! g9334@g2947@environment-bindings g2947@environment-bindings) (set! g9333@g2945@interaction-environment-symbols g2945@interaction-environment-symbols) (set! g9332@g2943@rp g2943@rp) (set! g9331@g2941@set-interaction-env-locs! g2941@set-interaction-env-locs!) (set! g9330@g2939@set-interaction-env-r! g2939@set-interaction-env-r!) (set! g9329@g2937@set-interaction-env-rib! g2937@set-interaction-env-rib!) (set! g9328@g2935@interaction-env-locs g2935@interaction-env-locs) (set! g9327@g2933@interaction-env-r g2933@interaction-env-r) (set! g9326@g2931@interaction-env-rib g2931@interaction-env-rib) (set! g9325@g2929@make-interaction-env g2929@make-interaction-env) (set! g9324@g2927@interaction-env? g2927@interaction-env?) (set! g9323@g2924@g2916 g2924@g2916) (set! g9322@g2922@g2917 g2922@g2917) (set! g9321@g2920@g2915 g2920@g2915) (set! g9320@g2914@rp g2914@rp) (set! g9319@g2912@set-env-itc! g2912@set-env-itc!) (set! g9318@g2910@set-env-labels! g2910@set-env-labels!) (set! g9317@g2908@set-env-names! g2908@set-env-names!) (set! g9316@g2906@env-itc g2906@env-itc) (set! g9315@g2904@env-labels g2904@env-labels) (set! g9314@g2902@env-names g2902@env-names) (set! g9313@g2900@make-env g2900@make-env) (set! g9312@g2898@env? g2898@env?) (set! g9311@g2895@g2887 g2895@g2887) (set! g9310@g2893@g2888 g2893@g2888) (set! g9309@g2891@g2886 g2891@g2886) (set! g9308@g2885@top-level-expander g2885@top-level-expander) (set! g9307@g2883@parse-top-level-program g2883@parse-top-level-program) (set! g9306@g2881@core-library-expander g2881@core-library-expander) (set! g9305@g2879@library-body-expander g2879@library-body-expander) (set! g9304@g2877@chi-interaction-expr g2877@chi-interaction-expr) (set! g9303@g2875@chi-library-internal g2875@chi-library-internal) (set! g9302@g2873@imp-collector g2873@imp-collector) (set! g9301@g2871@vis-collector g2871@vis-collector) (set! g9300@g2869@inv-collector g2869@inv-collector) (set! g9299@g2867@make-collector g2867@make-collector) (set! g9298@g2865@make-top-rib g2865@make-top-rib) (set! g9297@g2863@parse-import-spec* g2863@parse-import-spec*) (set! g9296@g2861@parse-library g2861@parse-library) (set! g9295@g2859@parse-library-name g2859@parse-library-name) (set! g9294@g2857@parse-exports g2857@parse-exports) (set! g9293@g2855@expand-transformer g2855@expand-transformer) (set! g9292@g2853@chi-body* g2853@chi-body*) (set! g9291@g2851@chi-internal-module g2851@chi-internal-module) (set! g9290@g2849@module-interface-exp-id* g2849@module-interface-exp-id*) (set! g9289@g2847@set-module-interface-exp-lab-vec! g2847@set-module-interface-exp-lab-vec!) (set! g9288@g2845@set-module-interface-exp-id-vec! g2845@set-module-interface-exp-id-vec!) (set! g9287@g2843@set-module-interface-first-mark! g2843@set-module-interface-first-mark!) (set! g9286@g2841@module-interface-exp-lab-vec g2841@module-interface-exp-lab-vec) (set! g9285@g2839@module-interface-exp-id-vec g2839@module-interface-exp-id-vec) (set! g9284@g2837@module-interface-first-mark g2837@module-interface-first-mark) (set! g9283@g2835@make-module-interface g2835@make-module-interface) (set! g9282@g2833@module-interface? g2833@module-interface?) (set! g9281@g2830@g2822 g2830@g2822) (set! g9280@g2828@g2823 g2828@g2823) (set! g9279@g2826@g2821 g2826@g2821) (set! g9278@g2820@parse-module g2820@parse-module) (set! g9277@g2818@chi-internal g2818@chi-internal) (set! g9276@g2816@find-dups g2816@find-dups) (set! g9275@g2814@find-bound=? g2814@find-bound=?) (set! g9274@g2812@chi-rhs* g2812@chi-rhs*) (set! g9273@g2810@expand-interaction-rhs*/init* g2810@expand-interaction-rhs*/init*) (set! g9272@g2808@chi-rhs g2808@chi-rhs) (set! g9271@g2806@chi-defun g2806@chi-defun) (set! g9270@g2804@chi-lambda-clause* g2804@chi-lambda-clause*) (set! g9269@g2802@chi-lambda-clause g2802@chi-lambda-clause) (set! g9268@g2800@verify-formals g2800@verify-formals) (set! g9267@g2798@chi-set! g2798@chi-set!) (set! g9266@g2796@chi-expr g2796@chi-expr) (set! g9265@g2794@chi-application g2794@chi-application) (set! g9264@g2792@chi-expr* g2792@chi-expr*) (set! g9263@g2790@chi-global-macro g2790@chi-global-macro) (set! g9262@g2788@chi-local-macro g2788@chi-local-macro) (set! g9261@g2786@chi-macro g2786@chi-macro) (set! g9260@g2784@do-macro-call g2784@do-macro-call) (set! g9259@g2782@local-macro-transformer g2782@local-macro-transformer) (set! g9258@g2780@macro-transformer g2780@macro-transformer) (set! g9257@g2778@symbol-macro g2778@symbol-macro) (set! g9256@g2776@core-macro-transformer g2776@core-macro-transformer) (set! g9255@g2774@syntax-transformer g2774@syntax-transformer) (set! g9254@g2772@ellipsis-map g2772@ellipsis-map) (set! g9253@g2770@syntax-case-transformer g2770@syntax-case-transformer) (set! g9252@g2768@verify-literals g2768@verify-literals) (set! g9251@g2766@underscore? g2766@underscore?) (set! g9250@g2764@ellipsis? g2764@ellipsis?) (set! g9249@g2762@syntax-dispatch g2762@syntax-dispatch) (set! g9248@g2760@convert-pattern g2760@convert-pattern) (set! g9247@g2758@foreign-call-transformer g2758@foreign-call-transformer) (set! g9246@g2756@parameterize-macro g2756@parameterize-macro) (set! g9245@g2754@incorrect-usage-macro g2754@incorrect-usage-macro) (set! g9244@g2752@define-condition-type-macro g2752@define-condition-type-macro) (set! g9243@g2750@define-record-type-macro g2750@define-record-type-macro) (set! g9242@g2748@define-struct-macro g2748@define-struct-macro) (set! g9241@g2746@quasisyntax-macro g2746@quasisyntax-macro) (set! g9240@g2744@quasiquote-macro g2744@quasiquote-macro) (set! g9239@g2742@syntax-rules-macro g2742@syntax-rules-macro) (set! g9238@g2740@include-into-macro g2740@include-into-macro) (set! g9237@g2738@include-macro g2738@include-macro) (set! g9236@g2736@do-include g2736@do-include) (set! g9235@g2734@cond-macro g2734@cond-macro) (set! g9234@g2732@and-macro g2732@and-macro) (set! g9233@g2730@or-macro g2730@or-macro) (set! g9232@g2728@let*-macro g2728@let*-macro) (set! g9231@g2726@do-macro g2726@do-macro) (set! g9230@g2724@identifier-syntax-macro g2724@identifier-syntax-macro) (set! g9229@g2722@endianness-macro g2722@endianness-macro) (set! g9228@g2720@assert-macro g2720@assert-macro) (set! g9227@g2718@delay-macro g2718@delay-macro) (set! g9226@g2716@time-macro g2716@time-macro) (set! g9225@g2714@define-enumeration-macro g2714@define-enumeration-macro) (set! g9224@g2712@guard-macro g2712@guard-macro) (set! g9223@g2710@trace-letrec-syntax-macro g2710@trace-letrec-syntax-macro) (set! g9222@g2708@trace-let-syntax-macro g2708@trace-let-syntax-macro) (set! g9221@g2706@trace-let/rec-syntax g2706@trace-let/rec-syntax) (set! g9220@g2704@trace-define-syntax-macro g2704@trace-define-syntax-macro) (set! g9219@g2702@trace-define-macro g2702@trace-define-macro) (set! g9218@g2700@trace-lambda-macro g2700@trace-lambda-macro) (set! g9217@g2698@let*-values-macro g2698@let*-values-macro) (set! g9216@g2696@let-values-macro g2696@let-values-macro) (set! g9215@g2694@let-macro g2694@let-macro) (set! g9214@g2692@invalid-fmls-error g2692@invalid-fmls-error) (set! g9213@g2690@with-syntax-macro g2690@with-syntax-macro) (set! g9212@g2688@bless g2688@bless) (set! g9211@g2686@lambda-transformer g2686@lambda-transformer) (set! g9210@g2684@case-lambda-transformer g2684@case-lambda-transformer) (set! g9209@g2682@quote-transformer g2682@quote-transformer) (set! g9208@g2680@case-macro g2680@case-macro) (set! g9207@g2678@or-transformer g2678@or-transformer) (set! g9206@g2676@and-transformer g2676@and-transformer) (set! g9205@g2674@if-transformer g2674@if-transformer) (set! g9204@g2672@unless-macro g2672@unless-macro) (set! g9203@g2670@when-macro g2670@when-macro) (set! g9202@g2668@record-constructor-descriptor-transformer g2668@record-constructor-descriptor-transformer) (set! g9201@g2666@record-type-descriptor-transformer g2666@record-type-descriptor-transformer) (set! g9200@g2664@type-descriptor-transformer g2664@type-descriptor-transformer) (set! g9199@g2662@fluid-let-syntax-transformer g2662@fluid-let-syntax-transformer) (set! g9198@g2660@letrec*-transformer g2660@letrec*-transformer) (set! g9197@g2658@letrec-transformer g2658@letrec-transformer) (set! g9196@g2656@letrec-helper g2656@letrec-helper) (set! g9195@g2654@add-lexicals g2654@add-lexicals) (set! g9194@g2652@add-lexical g2652@add-lexical) (set! g9193@g2650@set-lexical-mutable! g2650@set-lexical-mutable!) (set! g9192@g2648@lexical-mutable? g2648@lexical-mutable?) (set! g9191@g2646@lexical-var g2646@lexical-var) (set! g9190@g2644@scheme-stx g2644@scheme-stx) (set! g9189@g2642@scheme-stx-hashtable g2642@scheme-stx-hashtable) (set! g9188@g2640@parse-define-syntax g2640@parse-define-syntax) (set! g9187@g2638@parse-define g2638@parse-define) (set! g9186@g2327@make-eval-transformer g2327@make-eval-transformer) (set! g9185@g2325@variable-transformer-procedure g2325@variable-transformer-procedure) (set! g9184@g2323@variable-transformer? g2323@variable-transformer?) (set! g9183@g2321@make-variable-transformer g2321@make-variable-transformer) (set! g9182@g2319@sanitize-binding g2319@sanitize-binding) (set! g9181@g2305@syntax-type g2305@syntax-type) (set! g9180@g2303@raise-unbound-error g2303@raise-unbound-error) (set! g9179@g2301@binding-value g2301@binding-value) (set! g9178@g2299@binding-type g2299@binding-type) (set! g9177@g2297@make-binding g2297@make-binding) (set! g9176@g2295@label->binding g2295@label->binding) (set! g9175@g2293@id->real-label g2293@id->real-label) (set! g9174@g2291@id->label g2291@id->label) (set! g9173@g2289@same-marks*? g2289@same-marks*?) (set! g9172@g2287@stx->datum g2287@stx->datum) (set! g9171@g2285@strip g2285@strip) (set! g9170@g2283@strip-annotations g2283@strip-annotations) (set! g9169@g2281@self-evaluating? g2281@self-evaluating?) (set! g9168@g2279@bound-id-member? g2279@bound-id-member?) (set! g9167@g2277@distinct-bound-ids? g2277@distinct-bound-ids?) (set! g9166@g2275@valid-bound-ids? g2275@valid-bound-ids?) (set! g9165@g2273@free-id=? g2273@free-id=?) (set! g9164@g2271@bound-id=? g2271@bound-id=?) (set! g9163@g2269@same-marks? g2269@same-marks?) (set! g9162@g2267@id->sym g2267@id->sym) (set! g9161@g2265@id? g2265@id?) (set! g9160@g2263@syntax->list g2263@syntax->list) (set! g9159@g2261@syntax-cdr g2261@syntax-cdr) (set! g9158@g2259@syntax-car g2259@syntax-car) (set! g9157@g2257@syntax-list? g2257@syntax-list?) (set! g9156@g2255@syntax-null? g2255@syntax-null?) (set! g9155@g2253@syntax-vector? g2253@syntax-vector?) (set! g9154@g2251@syntax-pair? g2251@syntax-pair?) (set! g9153@g2249@syntax-vector->list g2249@syntax-vector->list) (set! g9152@g2247@syntax-kind? g2247@syntax-kind?) (set! g9151@g2245@add-subst g2245@add-subst) (set! g9150@g2243@add-mark g2243@add-mark) (set! g9149@g2241@mkstx g2241@mkstx) (set! g9148@g2239@join-wraps g2239@join-wraps) (set! g9147@g2237@anti-mark? g2237@anti-mark?) (set! g9146@g2235@anti-mark g2235@anti-mark) (set! g9145@g2233@gen-mark g2233@gen-mark) (set! g9144@g2231@datum->stx g2231@datum->stx) (set! g9143@g2229@rp g2229@rp) (set! g9142@g2227@set-stx-ae*! g2227@set-stx-ae*!) (set! g9141@g2225@set-stx-subst*! g2225@set-stx-subst*!) (set! g9140@g2223@set-stx-mark*! g2223@set-stx-mark*!) (set! g9139@g2221@set-stx-expr! g2221@set-stx-expr!) (set! g9138@g2219@stx-ae* g2219@stx-ae*) (set! g9137@g2217@stx-subst* g2217@stx-subst*) (set! g9136@g2215@stx-mark* g2215@stx-mark*) (set! g9135@g2213@stx-expr g2213@stx-expr) (set! g9134@g2211@make-stx g2211@make-stx) (set! g9133@g2209@stx? g2209@stx?) (set! g9132@g2206@g2198 g2206@g2198) (set! g9131@g2204@g2199 g2204@g2199) (set! g9130@g2202@g2197 g2202@g2197) (set! g9129@g2196@make-full-rib g2196@make-full-rib) (set! g9128@g2194@unseal-rib! g2194@unseal-rib!) (set! g9127@g2192@seal-rib! g2192@seal-rib!) (set! g9126@g2190@make-rib-map g2190@make-rib-map) (set! g9125@g2188@extend-rib/nc! g2188@extend-rib/nc!) (set! g9124@g2186@extend-rib! g2186@extend-rib!) (set! g9123@g2184@make-empty-rib g2184@make-empty-rib) (set! g9122@g2182@set-rib-cache! g2182@set-rib-cache!) (set! g9121@g2180@set-rib-sealed/freq! g2180@set-rib-sealed/freq!) (set! g9120@g2178@set-rib-label*! g2178@set-rib-label*!) (set! g9119@g2176@set-rib-mark**! g2176@set-rib-mark**!) (set! g9118@g2174@set-rib-sym*! g2174@set-rib-sym*!) (set! g9117@g2172@rib-cache g2172@rib-cache) (set! g9116@g2170@rib-sealed/freq g2170@rib-sealed/freq) (set! g9115@g2168@rib-label* g2168@rib-label*) (set! g9114@g2166@rib-mark** g2166@rib-mark**) (set! g9113@g2164@rib-sym* g2164@rib-sym*) (set! g9112@g2162@make-rib g2162@make-rib) (set! g9111@g2160@rib? g2160@rib?) (set! g9110@g2157@g2149 g2157@g2149) (set! g9109@g2155@g2150 g2155@g2150) (set! g9108@g2153@g2148 g2153@g2148) (set! g9107@g2147@gen-define-label g2147@gen-define-label) (set! g9106@g2145@gen-define-label+loc g2145@gen-define-label+loc) (set! g9105@g2143@gen-top-level-label g2143@gen-top-level-label) (set! g9104@g2141@gen-label g2141@gen-label) (set! g9103@g2139@gen-global g2139@gen-global) (set! g9102@g2137@gen-lexical g2137@gen-lexical) (set! g9101@g2135@top-marked? g2135@top-marked?) (set! g9100@g2133@top-mark* g2133@top-mark*) (set! g9099@g2128@set-union g2128@set-union) (set! g9098@g2126@set-cons g2126@set-cons) (set! g9097@g2124@file-options-macro g2124@file-options-macro) (g1781@g1426@current-library-expander g2965@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (g9375@g9370 g9377@g9372 g9379@g9371 g9382@&condition? g9384@make-&condition g9386@&condition-rtd g9388@&condition-rcd g9460@g9455 g9462@g9457 g9464@g9456 g9467@p? g9469@make-message-condition g9471@g9454@condition-message g9473@message-condition? g9475@condition-message g9477@&message-rtd g9479@&message-rcd g9485@g9480 g9487@g9482 g9489@g9481 g9492@p? g9494@make-warning g9496@warning? g9498@&warning-rtd g9500@&warning-rcd g9506@g9501 g9508@g9503 g9510@g9502 g9513@p? g9515@make-serious-condition g9517@serious-condition? g9519@&serious-rtd g9521@&serious-rcd g9527@g9522 g9529@g9524 g9531@g9523 g9534@p? g9536@make-error g9538@error? g9540@&error-rtd g9542@&error-rcd g9548@g9543 g9550@g9545 g9552@g9544 g9555@p? g9557@make-violation g9559@violation? g9561@&violation-rtd g9563@&violation-rcd g9569@g9564 g9571@g9566 g9573@g9565 g9576@p? g9578@make-assertion-violation g9580@assertion-violation? g9582@&assertion-rtd g9584@&assertion-rcd g9591@g9586 g9593@g9588 g9595@g9587 g9598@p? g9600@make-irritants-condition g9602@g9585@condition-irritants g9604@irritants-condition? g9606@condition-irritants g9608@&irritants-rtd g9610@&irritants-rcd g9617@g9612 g9619@g9614 g9621@g9613 g9624@p? g9626@make-who-condition g9628@g9611@condition-who g9630@who-condition? g9632@condition-who g9634@&who-rtd g9636@&who-rcd g9642@g9637 g9644@g9639 g9646@g9638 g9649@p? g9651@make-non-continuable-violation g9653@non-continuable-violation? g9655@&non-continuable-rtd g9657@&non-continuable-rcd g9663@g9658 g9665@g9660 g9667@g9659 g9670@p? g9672@make-implementation-restriction-violation g9674@implementation-restriction-violation? g9676@&implementation-restriction-rtd g9678@&implementation-restriction-rcd g9684@g9679 g9686@g9681 g9688@g9680 g9691@p? g9693@make-lexical-violation g9695@lexical-violation? g9697@&lexical-rtd g9699@&lexical-rcd g9707@g9702 g9709@g9704 g9711@g9703 g9714@p? g9716@make-syntax-violation g9718@g9700@syntax-violation-form g9720@g9701@syntax-violation-subform g9722@syntax-violation? g9724@syntax-violation-form g9726@syntax-violation-subform g9728@&syntax-rtd g9730@&syntax-rcd g9736@g9731 g9738@g9733 g9740@g9732 g9743@p? g9745@make-undefined-violation g9747@undefined-violation? g9749@&undefined-rtd g9751@&undefined-rcd g9757@g9752 g9759@g9754 g9761@g9753 g9764@p? g9766@make-i/o-error g9768@i/o-error? g9770@&i/o-rtd g9772@&i/o-rcd g9778@g9773 g9780@g9775 g9782@g9774 g9785@p? g9787@make-i/o-read-error g9789@i/o-read-error? g9791@&i/o-read-rtd g9793@&i/o-read-rcd g9799@g9794 g9801@g9796 g9803@g9795 g9806@p? g9808@make-i/o-write-error g9810@i/o-write-error? g9812@&i/o-write-rtd g9814@&i/o-write-rcd g9821@g9816 g9823@g9818 g9825@g9817 g9828@p? g9830@make-i/o-invalid-position-error g9832@g9815@i/o-error-position g9834@i/o-invalid-position-error? g9836@i/o-error-position g9838@&i/o-invalid-position-rtd g9840@&i/o-invalid-position-rcd g9847@g9842 g9849@g9844 g9851@g9843 g9854@p? g9856@make-i/o-filename-error g9858@g9841@i/o-error-filename g9860@i/o-filename-error? g9862@i/o-error-filename g9864@&i/o-filename-rtd g9866@&i/o-filename-rcd g9872@g9867 g9874@g9869 g9876@g9868 g9879@p? g9881@make-i/o-file-protection-error g9883@i/o-file-protection-error? g9885@&i/o-file-protection-rtd g9887@&i/o-file-protection-rcd g9893@g9888 g9895@g9890 g9897@g9889 g9900@p? g9902@make-i/o-file-is-read-only-error g9904@i/o-file-is-read-only-error? g9906@&i/o-file-is-read-only-rtd g9908@&i/o-file-is-read-only-rcd g9914@g9909 g9916@g9911 g9918@g9910 g9921@p? g9923@make-i/o-file-already-exists-error g9925@i/o-file-already-exists-error? g9927@&i/o-file-already-exists-rtd g9929@&i/o-file-already-exists-rcd g9935@g9930 g9937@g9932 g9939@g9931 g9942@p? g9944@make-i/o-file-does-not-exist-error g9946@i/o-file-does-not-exist-error? g9948@&i/o-file-does-not-exist-rtd g9950@&i/o-file-does-not-exist-rcd g9957@g9952 g9959@g9954 g9961@g9953 g9964@p? g9966@make-i/o-port-error g9968@g9951@i/o-error-port g9970@i/o-port-error? g9972@i/o-error-port g9974@&i/o-port-rtd g9976@&i/o-port-rcd g9982@g9977 g9984@g9979 g9986@g9978 g9989@p? g9991@make-i/o-decoding-error g9993@i/o-decoding-error? g9995@&i/o-decoding-rtd g9997@&i/o-decoding-rcd g10004@g9999 g10006@g10001 g10008@g10000 g10011@p? g10013@make-i/o-encoding-error g10015@g9998@i/o-encoding-error-char g10017@i/o-encoding-error? g10019@i/o-encoding-error-char g10021@&i/o-encoding-rtd g10023@&i/o-encoding-rcd g10029@g10024 g10031@g10026 g10033@g10025 g10036@p? g10038@make-no-infinities-violation g10040@no-infinities-violation? g10042@&no-infinities-rtd g10044@&no-infinities-rcd g10050@g10045 g10052@g10047 g10054@g10046 g10057@p? g10059@make-no-nans-violation g10061@no-nans-violation? g10063@&no-nans-rtd g10065@&no-nans-rcd) (begin (set! g9375@g9370 (make-record-type-descriptor '&condition '#f 'g9373 '#f '#f '#())) (set! g9377@g9372 '#f) (set! g9379@g9371 (make-record-constructor-descriptor g9375@g9370 '#f g9377@g9372)) (set! g9382@&condition? (record-predicate g9375@g9370)) (set! g9384@make-&condition (record-constructor g9379@g9371)) (set! g9386@&condition-rtd g9375@g9370) (set! g9388@&condition-rcd g9379@g9371) (set! g9460@g9455 (make-record-type-descriptor '&message g9375@g9370 'g9458 '#f '#f '#((immutable message)))) (set! g9462@g9457 '#f) (set! g9464@g9456 (make-record-constructor-descriptor g9460@g9455 g9379@g9371 g9462@g9457)) (set! g9467@p? (record-predicate g9460@g9455)) (set! g9469@make-message-condition (record-constructor g9464@g9456)) (set! g9471@g9454@condition-message (record-accessor g9460@g9455 '0)) (set! g9473@message-condition? (condition-predicate g9460@g9455)) (set! g9475@condition-message (condition-accessor g9460@g9455 g9471@g9454@condition-message)) (set! g9477@&message-rtd g9460@g9455) (set! g9479@&message-rcd g9464@g9456) (set! g9485@g9480 (make-record-type-descriptor '&warning g9375@g9370 'g9483 '#f '#f '#())) (set! g9487@g9482 '#f) (set! g9489@g9481 (make-record-constructor-descriptor g9485@g9480 g9379@g9371 g9487@g9482)) (set! g9492@p? (record-predicate g9485@g9480)) (set! g9494@make-warning (record-constructor g9489@g9481)) (set! g9496@warning? (condition-predicate g9485@g9480)) (set! g9498@&warning-rtd g9485@g9480) (set! g9500@&warning-rcd g9489@g9481) (set! g9506@g9501 (make-record-type-descriptor '&serious g9375@g9370 'g9504 '#f '#f '#())) (set! g9508@g9503 '#f) (set! g9510@g9502 (make-record-constructor-descriptor g9506@g9501 g9379@g9371 g9508@g9503)) (set! g9513@p? (record-predicate g9506@g9501)) (set! g9515@make-serious-condition (record-constructor g9510@g9502)) (set! g9517@serious-condition? (condition-predicate g9506@g9501)) (set! g9519@&serious-rtd g9506@g9501) (set! g9521@&serious-rcd g9510@g9502) (set! g9527@g9522 (make-record-type-descriptor '&error g9506@g9501 'g9525 '#f '#f '#())) (set! g9529@g9524 '#f) (set! g9531@g9523 (make-record-constructor-descriptor g9527@g9522 g9510@g9502 g9529@g9524)) (set! g9534@p? (record-predicate g9527@g9522)) (set! g9536@make-error (record-constructor g9531@g9523)) (set! g9538@error? (condition-predicate g9527@g9522)) (set! g9540@&error-rtd g9527@g9522) (set! g9542@&error-rcd g9531@g9523) (set! g9548@g9543 (make-record-type-descriptor '&violation g9506@g9501 'g9546 '#f '#f '#())) (set! g9550@g9545 '#f) (set! g9552@g9544 (make-record-constructor-descriptor g9548@g9543 g9510@g9502 g9550@g9545)) (set! g9555@p? (record-predicate g9548@g9543)) (set! g9557@make-violation (record-constructor g9552@g9544)) (set! g9559@violation? (condition-predicate g9548@g9543)) (set! g9561@&violation-rtd g9548@g9543) (set! g9563@&violation-rcd g9552@g9544) (set! g9569@g9564 (make-record-type-descriptor '&assertion g9548@g9543 'g9567 '#f '#f '#())) (set! g9571@g9566 '#f) (set! g9573@g9565 (make-record-constructor-descriptor g9569@g9564 g9552@g9544 g9571@g9566)) (set! g9576@p? (record-predicate g9569@g9564)) (set! g9578@make-assertion-violation (record-constructor g9573@g9565)) (set! g9580@assertion-violation? (condition-predicate g9569@g9564)) (set! g9582@&assertion-rtd g9569@g9564) (set! g9584@&assertion-rcd g9573@g9565) (set! g9591@g9586 (make-record-type-descriptor '&irritants g9375@g9370 'g9589 '#f '#f '#((immutable irritants)))) (set! g9593@g9588 '#f) (set! g9595@g9587 (make-record-constructor-descriptor g9591@g9586 g9379@g9371 g9593@g9588)) (set! g9598@p? (record-predicate g9591@g9586)) (set! g9600@make-irritants-condition (record-constructor g9595@g9587)) (set! g9602@g9585@condition-irritants (record-accessor g9591@g9586 '0)) (set! g9604@irritants-condition? (condition-predicate g9591@g9586)) (set! g9606@condition-irritants (condition-accessor g9591@g9586 g9602@g9585@condition-irritants)) (set! g9608@&irritants-rtd g9591@g9586) (set! g9610@&irritants-rcd g9595@g9587) (set! g9617@g9612 (make-record-type-descriptor '&who g9375@g9370 'g9615 '#f '#f '#((immutable who)))) (set! g9619@g9614 '#f) (set! g9621@g9613 (make-record-constructor-descriptor g9617@g9612 g9379@g9371 g9619@g9614)) (set! g9624@p? (record-predicate g9617@g9612)) (set! g9626@make-who-condition (record-constructor g9621@g9613)) (set! g9628@g9611@condition-who (record-accessor g9617@g9612 '0)) (set! g9630@who-condition? (condition-predicate g9617@g9612)) (set! g9632@condition-who (condition-accessor g9617@g9612 g9628@g9611@condition-who)) (set! g9634@&who-rtd g9617@g9612) (set! g9636@&who-rcd g9621@g9613) (set! g9642@g9637 (make-record-type-descriptor '&non-continuable g9548@g9543 'g9640 '#f '#f '#())) (set! g9644@g9639 '#f) (set! g9646@g9638 (make-record-constructor-descriptor g9642@g9637 g9552@g9544 g9644@g9639)) (set! g9649@p? (record-predicate g9642@g9637)) (set! g9651@make-non-continuable-violation (record-constructor g9646@g9638)) (set! g9653@non-continuable-violation? (condition-predicate g9642@g9637)) (set! g9655@&non-continuable-rtd g9642@g9637) (set! g9657@&non-continuable-rcd g9646@g9638) (set! g9663@g9658 (make-record-type-descriptor '&implementation-restriction g9548@g9543 'g9661 '#f '#f '#())) (set! g9665@g9660 '#f) (set! g9667@g9659 (make-record-constructor-descriptor g9663@g9658 g9552@g9544 g9665@g9660)) (set! g9670@p? (record-predicate g9663@g9658)) (set! g9672@make-implementation-restriction-violation (record-constructor g9667@g9659)) (set! g9674@implementation-restriction-violation? (condition-predicate g9663@g9658)) (set! g9676@&implementation-restriction-rtd g9663@g9658) (set! g9678@&implementation-restriction-rcd g9667@g9659) (set! g9684@g9679 (make-record-type-descriptor '&lexical g9548@g9543 'g9682 '#f '#f '#())) (set! g9686@g9681 '#f) (set! g9688@g9680 (make-record-constructor-descriptor g9684@g9679 g9552@g9544 g9686@g9681)) (set! g9691@p? (record-predicate g9684@g9679)) (set! g9693@make-lexical-violation (record-constructor g9688@g9680)) (set! g9695@lexical-violation? (condition-predicate g9684@g9679)) (set! g9697@&lexical-rtd g9684@g9679) (set! g9699@&lexical-rcd g9688@g9680) (set! g9707@g9702 (make-record-type-descriptor '&syntax g9548@g9543 'g9705 '#f '#f '#((immutable form) (immutable subform)))) (set! g9709@g9704 '#f) (set! g9711@g9703 (make-record-constructor-descriptor g9707@g9702 g9552@g9544 g9709@g9704)) (set! g9714@p? (record-predicate g9707@g9702)) (set! g9716@make-syntax-violation (record-constructor g9711@g9703)) (set! g9718@g9700@syntax-violation-form (record-accessor g9707@g9702 '0)) (set! g9720@g9701@syntax-violation-subform (record-accessor g9707@g9702 '1)) (set! g9722@syntax-violation? (condition-predicate g9707@g9702)) (set! g9724@syntax-violation-form (condition-accessor g9707@g9702 g9718@g9700@syntax-violation-form)) (set! g9726@syntax-violation-subform (condition-accessor g9707@g9702 g9720@g9701@syntax-violation-subform)) (set! g9728@&syntax-rtd g9707@g9702) (set! g9730@&syntax-rcd g9711@g9703) (set! g9736@g9731 (make-record-type-descriptor '&undefined g9548@g9543 'g9734 '#f '#f '#())) (set! g9738@g9733 '#f) (set! g9740@g9732 (make-record-constructor-descriptor g9736@g9731 g9552@g9544 g9738@g9733)) (set! g9743@p? (record-predicate g9736@g9731)) (set! g9745@make-undefined-violation (record-constructor g9740@g9732)) (set! g9747@undefined-violation? (condition-predicate g9736@g9731)) (set! g9749@&undefined-rtd g9736@g9731) (set! g9751@&undefined-rcd g9740@g9732) (set! g9757@g9752 (make-record-type-descriptor '&i/o g9527@g9522 'g9755 '#f '#f '#())) (set! g9759@g9754 '#f) (set! g9761@g9753 (make-record-constructor-descriptor g9757@g9752 g9531@g9523 g9759@g9754)) (set! g9764@p? (record-predicate g9757@g9752)) (set! g9766@make-i/o-error (record-constructor g9761@g9753)) (set! g9768@i/o-error? (condition-predicate g9757@g9752)) (set! g9770@&i/o-rtd g9757@g9752) (set! g9772@&i/o-rcd g9761@g9753) (set! g9778@g9773 (make-record-type-descriptor '&i/o-read g9757@g9752 'g9776 '#f '#f '#())) (set! g9780@g9775 '#f) (set! g9782@g9774 (make-record-constructor-descriptor g9778@g9773 g9761@g9753 g9780@g9775)) (set! g9785@p? (record-predicate g9778@g9773)) (set! g9787@make-i/o-read-error (record-constructor g9782@g9774)) (set! g9789@i/o-read-error? (condition-predicate g9778@g9773)) (set! g9791@&i/o-read-rtd g9778@g9773) (set! g9793@&i/o-read-rcd g9782@g9774) (set! g9799@g9794 (make-record-type-descriptor '&i/o-write g9757@g9752 'g9797 '#f '#f '#())) (set! g9801@g9796 '#f) (set! g9803@g9795 (make-record-constructor-descriptor g9799@g9794 g9761@g9753 g9801@g9796)) (set! g9806@p? (record-predicate g9799@g9794)) (set! g9808@make-i/o-write-error (record-constructor g9803@g9795)) (set! g9810@i/o-write-error? (condition-predicate g9799@g9794)) (set! g9812@&i/o-write-rtd g9799@g9794) (set! g9814@&i/o-write-rcd g9803@g9795) (set! g9821@g9816 (make-record-type-descriptor '&i/o-invalid-position g9757@g9752 'g9819 '#f '#f '#((immutable position)))) (set! g9823@g9818 '#f) (set! g9825@g9817 (make-record-constructor-descriptor g9821@g9816 g9761@g9753 g9823@g9818)) (set! g9828@p? (record-predicate g9821@g9816)) (set! g9830@make-i/o-invalid-position-error (record-constructor g9825@g9817)) (set! g9832@g9815@i/o-error-position (record-accessor g9821@g9816 '0)) (set! g9834@i/o-invalid-position-error? (condition-predicate g9821@g9816)) (set! g9836@i/o-error-position (condition-accessor g9821@g9816 g9832@g9815@i/o-error-position)) (set! g9838@&i/o-invalid-position-rtd g9821@g9816) (set! g9840@&i/o-invalid-position-rcd g9825@g9817) (set! g9847@g9842 (make-record-type-descriptor '&i/o-filename g9757@g9752 'g9845 '#f '#f '#((immutable filename)))) (set! g9849@g9844 '#f) (set! g9851@g9843 (make-record-constructor-descriptor g9847@g9842 g9761@g9753 g9849@g9844)) (set! g9854@p? (record-predicate g9847@g9842)) (set! g9856@make-i/o-filename-error (record-constructor g9851@g9843)) (set! g9858@g9841@i/o-error-filename (record-accessor g9847@g9842 '0)) (set! g9860@i/o-filename-error? (condition-predicate g9847@g9842)) (set! g9862@i/o-error-filename (condition-accessor g9847@g9842 g9858@g9841@i/o-error-filename)) (set! g9864@&i/o-filename-rtd g9847@g9842) (set! g9866@&i/o-filename-rcd g9851@g9843) (set! g9872@g9867 (make-record-type-descriptor '&i/o-file-protection g9847@g9842 'g9870 '#f '#f '#())) (set! g9874@g9869 '#f) (set! g9876@g9868 (make-record-constructor-descriptor g9872@g9867 g9851@g9843 g9874@g9869)) (set! g9879@p? (record-predicate g9872@g9867)) (set! g9881@make-i/o-file-protection-error (record-constructor g9876@g9868)) (set! g9883@i/o-file-protection-error? (condition-predicate g9872@g9867)) (set! g9885@&i/o-file-protection-rtd g9872@g9867) (set! g9887@&i/o-file-protection-rcd g9876@g9868) (set! g9893@g9888 (make-record-type-descriptor '&i/o-file-is-read-only g9872@g9867 'g9891 '#f '#f '#())) (set! g9895@g9890 '#f) (set! g9897@g9889 (make-record-constructor-descriptor g9893@g9888 g9876@g9868 g9895@g9890)) (set! g9900@p? (record-predicate g9893@g9888)) (set! g9902@make-i/o-file-is-read-only-error (record-constructor g9897@g9889)) (set! g9904@i/o-file-is-read-only-error? (condition-predicate g9893@g9888)) (set! g9906@&i/o-file-is-read-only-rtd g9893@g9888) (set! g9908@&i/o-file-is-read-only-rcd g9897@g9889) (set! g9914@g9909 (make-record-type-descriptor '&i/o-file-already-exists g9847@g9842 'g9912 '#f '#f '#())) (set! g9916@g9911 '#f) (set! g9918@g9910 (make-record-constructor-descriptor g9914@g9909 g9851@g9843 g9916@g9911)) (set! g9921@p? (record-predicate g9914@g9909)) (set! g9923@make-i/o-file-already-exists-error (record-constructor g9918@g9910)) (set! g9925@i/o-file-already-exists-error? (condition-predicate g9914@g9909)) (set! g9927@&i/o-file-already-exists-rtd g9914@g9909) (set! g9929@&i/o-file-already-exists-rcd g9918@g9910) (set! g9935@g9930 (make-record-type-descriptor '&i/o-file-does-not-exist g9847@g9842 'g9933 '#f '#f '#())) (set! g9937@g9932 '#f) (set! g9939@g9931 (make-record-constructor-descriptor g9935@g9930 g9851@g9843 g9937@g9932)) (set! g9942@p? (record-predicate g9935@g9930)) (set! g9944@make-i/o-file-does-not-exist-error (record-constructor g9939@g9931)) (set! g9946@i/o-file-does-not-exist-error? (condition-predicate g9935@g9930)) (set! g9948@&i/o-file-does-not-exist-rtd g9935@g9930) (set! g9950@&i/o-file-does-not-exist-rcd g9939@g9931) (set! g9957@g9952 (make-record-type-descriptor '&i/o-port g9757@g9752 'g9955 '#f '#f '#((immutable port)))) (set! g9959@g9954 '#f) (set! g9961@g9953 (make-record-constructor-descriptor g9957@g9952 g9761@g9753 g9959@g9954)) (set! g9964@p? (record-predicate g9957@g9952)) (set! g9966@make-i/o-port-error (record-constructor g9961@g9953)) (set! g9968@g9951@i/o-error-port (record-accessor g9957@g9952 '0)) (set! g9970@i/o-port-error? (condition-predicate g9957@g9952)) (set! g9972@i/o-error-port (condition-accessor g9957@g9952 g9968@g9951@i/o-error-port)) (set! g9974@&i/o-port-rtd g9957@g9952) (set! g9976@&i/o-port-rcd g9961@g9953) (set! g9982@g9977 (make-record-type-descriptor '&i/o-decoding g9957@g9952 'g9980 '#f '#f '#())) (set! g9984@g9979 '#f) (set! g9986@g9978 (make-record-constructor-descriptor g9982@g9977 g9961@g9953 g9984@g9979)) (set! g9989@p? (record-predicate g9982@g9977)) (set! g9991@make-i/o-decoding-error (record-constructor g9986@g9978)) (set! g9993@i/o-decoding-error? (condition-predicate g9982@g9977)) (set! g9995@&i/o-decoding-rtd g9982@g9977) (set! g9997@&i/o-decoding-rcd g9986@g9978) (set! g10004@g9999 (make-record-type-descriptor '&i/o-encoding g9957@g9952 'g10002 '#f '#f '#((immutable char)))) (set! g10006@g10001 '#f) (set! g10008@g10000 (make-record-constructor-descriptor g10004@g9999 g9961@g9953 g10006@g10001)) (set! g10011@p? (record-predicate g10004@g9999)) (set! g10013@make-i/o-encoding-error (record-constructor g10008@g10000)) (set! g10015@g9998@i/o-encoding-error-char (record-accessor g10004@g9999 '0)) (set! g10017@i/o-encoding-error? (condition-predicate g10004@g9999)) (set! g10019@i/o-encoding-error-char (condition-accessor g10004@g9999 g10015@g9998@i/o-encoding-error-char)) (set! g10021@&i/o-encoding-rtd g10004@g9999) (set! g10023@&i/o-encoding-rcd g10008@g10000) (set! g10029@g10024 (make-record-type-descriptor '&no-infinities g9663@g9658 'g10027 '#f '#f '#())) (set! g10031@g10026 '#f) (set! g10033@g10025 (make-record-constructor-descriptor g10029@g10024 g9667@g9659 g10031@g10026)) (set! g10036@p? (record-predicate g10029@g10024)) (set! g10038@make-no-infinities-violation (record-constructor g10033@g10025)) (set! g10040@no-infinities-violation? (condition-predicate g10029@g10024)) (set! g10042@&no-infinities-rtd g10029@g10024) (set! g10044@&no-infinities-rcd g10033@g10025) (set! g10050@g10045 (make-record-type-descriptor '&no-nans g9663@g9658 'g10048 '#f '#f '#())) (set! g10052@g10047 '#f) (set! g10054@g10046 (make-record-constructor-descriptor g10050@g10045 g9667@g9659 g10052@g10047)) (set! g10057@p? (record-predicate g10050@g10045)) (set! g10059@make-no-nans-violation (record-constructor g10054@g10046)) (set! g10061@no-nans-violation? (condition-predicate g10050@g10045)) (set! g10063@&no-nans-rtd g10050@g10045) (set! g10065@&no-nans-rcd g10054@g10046) (begin (set! g10306@g10065@&no-nans-rcd g10065@&no-nans-rcd) (set! g10305@g10063@&no-nans-rtd g10063@&no-nans-rtd) (set! g10304@g10061@no-nans-violation? g10061@no-nans-violation?) (set! g10303@g10059@make-no-nans-violation g10059@make-no-nans-violation) (set! g10302@g10057@p? g10057@p?) (set! g10301@g10054@g10046 g10054@g10046) (set! g10300@g10052@g10047 g10052@g10047) (set! g10299@g10050@g10045 g10050@g10045) (set! g10298@g10044@&no-infinities-rcd g10044@&no-infinities-rcd) (set! g10297@g10042@&no-infinities-rtd g10042@&no-infinities-rtd) (set! g10296@g10040@no-infinities-violation? g10040@no-infinities-violation?) (set! g10295@g10038@make-no-infinities-violation g10038@make-no-infinities-violation) (set! g10294@g10036@p? g10036@p?) (set! g10293@g10033@g10025 g10033@g10025) (set! g10292@g10031@g10026 g10031@g10026) (set! g10291@g10029@g10024 g10029@g10024) (set! g10290@g10023@&i/o-encoding-rcd g10023@&i/o-encoding-rcd) (set! g10289@g10021@&i/o-encoding-rtd g10021@&i/o-encoding-rtd) (set! g10288@g10019@i/o-encoding-error-char g10019@i/o-encoding-error-char) (set! g10287@g10017@i/o-encoding-error? g10017@i/o-encoding-error?) (set! g10286@g10015@g9998@i/o-encoding-error-char g10015@g9998@i/o-encoding-error-char) (set! g10285@g10013@make-i/o-encoding-error g10013@make-i/o-encoding-error) (set! g10284@g10011@p? g10011@p?) (set! g10283@g10008@g10000 g10008@g10000) (set! g10282@g10006@g10001 g10006@g10001) (set! g10281@g10004@g9999 g10004@g9999) (set! g10280@g9997@&i/o-decoding-rcd g9997@&i/o-decoding-rcd) (set! g10279@g9995@&i/o-decoding-rtd g9995@&i/o-decoding-rtd) (set! g10278@g9993@i/o-decoding-error? g9993@i/o-decoding-error?) (set! g10277@g9991@make-i/o-decoding-error g9991@make-i/o-decoding-error) (set! g10276@g9989@p? g9989@p?) (set! g10275@g9986@g9978 g9986@g9978) (set! g10274@g9984@g9979 g9984@g9979) (set! g10273@g9982@g9977 g9982@g9977) (set! g10272@g9976@&i/o-port-rcd g9976@&i/o-port-rcd) (set! g10271@g9974@&i/o-port-rtd g9974@&i/o-port-rtd) (set! g10270@g9972@i/o-error-port g9972@i/o-error-port) (set! g10269@g9970@i/o-port-error? g9970@i/o-port-error?) (set! g10268@g9968@g9951@i/o-error-port g9968@g9951@i/o-error-port) (set! g10267@g9966@make-i/o-port-error g9966@make-i/o-port-error) (set! g10266@g9964@p? g9964@p?) (set! g10265@g9961@g9953 g9961@g9953) (set! g10264@g9959@g9954 g9959@g9954) (set! g10263@g9957@g9952 g9957@g9952) (set! g10262@g9950@&i/o-file-does-not-exist-rcd g9950@&i/o-file-does-not-exist-rcd) (set! g10261@g9948@&i/o-file-does-not-exist-rtd g9948@&i/o-file-does-not-exist-rtd) (set! g10260@g9946@i/o-file-does-not-exist-error? g9946@i/o-file-does-not-exist-error?) (set! g10259@g9944@make-i/o-file-does-not-exist-error g9944@make-i/o-file-does-not-exist-error) (set! g10258@g9942@p? g9942@p?) (set! g10257@g9939@g9931 g9939@g9931) (set! g10256@g9937@g9932 g9937@g9932) (set! g10255@g9935@g9930 g9935@g9930) (set! g10254@g9929@&i/o-file-already-exists-rcd g9929@&i/o-file-already-exists-rcd) (set! g10253@g9927@&i/o-file-already-exists-rtd g9927@&i/o-file-already-exists-rtd) (set! g10252@g9925@i/o-file-already-exists-error? g9925@i/o-file-already-exists-error?) (set! g10251@g9923@make-i/o-file-already-exists-error g9923@make-i/o-file-already-exists-error) (set! g10250@g9921@p? g9921@p?) (set! g10249@g9918@g9910 g9918@g9910) (set! g10248@g9916@g9911 g9916@g9911) (set! g10247@g9914@g9909 g9914@g9909) (set! g10246@g9908@&i/o-file-is-read-only-rcd g9908@&i/o-file-is-read-only-rcd) (set! g10245@g9906@&i/o-file-is-read-only-rtd g9906@&i/o-file-is-read-only-rtd) (set! g10244@g9904@i/o-file-is-read-only-error? g9904@i/o-file-is-read-only-error?) (set! g10243@g9902@make-i/o-file-is-read-only-error g9902@make-i/o-file-is-read-only-error) (set! g10242@g9900@p? g9900@p?) (set! g10241@g9897@g9889 g9897@g9889) (set! g10240@g9895@g9890 g9895@g9890) (set! g10239@g9893@g9888 g9893@g9888) (set! g10238@g9887@&i/o-file-protection-rcd g9887@&i/o-file-protection-rcd) (set! g10237@g9885@&i/o-file-protection-rtd g9885@&i/o-file-protection-rtd) (set! g10236@g9883@i/o-file-protection-error? g9883@i/o-file-protection-error?) (set! g10235@g9881@make-i/o-file-protection-error g9881@make-i/o-file-protection-error) (set! g10234@g9879@p? g9879@p?) (set! g10233@g9876@g9868 g9876@g9868) (set! g10232@g9874@g9869 g9874@g9869) (set! g10231@g9872@g9867 g9872@g9867) (set! g10230@g9866@&i/o-filename-rcd g9866@&i/o-filename-rcd) (set! g10229@g9864@&i/o-filename-rtd g9864@&i/o-filename-rtd) (set! g10228@g9862@i/o-error-filename g9862@i/o-error-filename) (set! g10227@g9860@i/o-filename-error? g9860@i/o-filename-error?) (set! g10226@g9858@g9841@i/o-error-filename g9858@g9841@i/o-error-filename) (set! g10225@g9856@make-i/o-filename-error g9856@make-i/o-filename-error) (set! g10224@g9854@p? g9854@p?) (set! g10223@g9851@g9843 g9851@g9843) (set! g10222@g9849@g9844 g9849@g9844) (set! g10221@g9847@g9842 g9847@g9842) (set! g10220@g9840@&i/o-invalid-position-rcd g9840@&i/o-invalid-position-rcd) (set! g10219@g9838@&i/o-invalid-position-rtd g9838@&i/o-invalid-position-rtd) (set! g10218@g9836@i/o-error-position g9836@i/o-error-position) (set! g10217@g9834@i/o-invalid-position-error? g9834@i/o-invalid-position-error?) (set! g10216@g9832@g9815@i/o-error-position g9832@g9815@i/o-error-position) (set! g10215@g9830@make-i/o-invalid-position-error g9830@make-i/o-invalid-position-error) (set! g10214@g9828@p? g9828@p?) (set! g10213@g9825@g9817 g9825@g9817) (set! g10212@g9823@g9818 g9823@g9818) (set! g10211@g9821@g9816 g9821@g9816) (set! g10210@g9814@&i/o-write-rcd g9814@&i/o-write-rcd) (set! g10209@g9812@&i/o-write-rtd g9812@&i/o-write-rtd) (set! g10208@g9810@i/o-write-error? g9810@i/o-write-error?) (set! g10207@g9808@make-i/o-write-error g9808@make-i/o-write-error) (set! g10206@g9806@p? g9806@p?) (set! g10205@g9803@g9795 g9803@g9795) (set! g10204@g9801@g9796 g9801@g9796) (set! g10203@g9799@g9794 g9799@g9794) (set! g10202@g9793@&i/o-read-rcd g9793@&i/o-read-rcd) (set! g10201@g9791@&i/o-read-rtd g9791@&i/o-read-rtd) (set! g10200@g9789@i/o-read-error? g9789@i/o-read-error?) (set! g10199@g9787@make-i/o-read-error g9787@make-i/o-read-error) (set! g10198@g9785@p? g9785@p?) (set! g10197@g9782@g9774 g9782@g9774) (set! g10196@g9780@g9775 g9780@g9775) (set! g10195@g9778@g9773 g9778@g9773) (set! g10194@g9772@&i/o-rcd g9772@&i/o-rcd) (set! g10193@g9770@&i/o-rtd g9770@&i/o-rtd) (set! g10192@g9768@i/o-error? g9768@i/o-error?) (set! g10191@g9766@make-i/o-error g9766@make-i/o-error) (set! g10190@g9764@p? g9764@p?) (set! g10189@g9761@g9753 g9761@g9753) (set! g10188@g9759@g9754 g9759@g9754) (set! g10187@g9757@g9752 g9757@g9752) (set! g10186@g9751@&undefined-rcd g9751@&undefined-rcd) (set! g10185@g9749@&undefined-rtd g9749@&undefined-rtd) (set! g10184@g9747@undefined-violation? g9747@undefined-violation?) (set! g10183@g9745@make-undefined-violation g9745@make-undefined-violation) (set! g10182@g9743@p? g9743@p?) (set! g10181@g9740@g9732 g9740@g9732) (set! g10180@g9738@g9733 g9738@g9733) (set! g10179@g9736@g9731 g9736@g9731) (set! g10178@g9730@&syntax-rcd g9730@&syntax-rcd) (set! g10177@g9728@&syntax-rtd g9728@&syntax-rtd) (set! g10176@g9726@syntax-violation-subform g9726@syntax-violation-subform) (set! g10175@g9724@syntax-violation-form g9724@syntax-violation-form) (set! g10174@g9722@syntax-violation? g9722@syntax-violation?) (set! g10173@g9720@g9701@syntax-violation-subform g9720@g9701@syntax-violation-subform) (set! g10172@g9718@g9700@syntax-violation-form g9718@g9700@syntax-violation-form) (set! g10171@g9716@make-syntax-violation g9716@make-syntax-violation) (set! g10170@g9714@p? g9714@p?) (set! g10169@g9711@g9703 g9711@g9703) (set! g10168@g9709@g9704 g9709@g9704) (set! g10167@g9707@g9702 g9707@g9702) (set! g10166@g9699@&lexical-rcd g9699@&lexical-rcd) (set! g10165@g9697@&lexical-rtd g9697@&lexical-rtd) (set! g10164@g9695@lexical-violation? g9695@lexical-violation?) (set! g10163@g9693@make-lexical-violation g9693@make-lexical-violation) (set! g10162@g9691@p? g9691@p?) (set! g10161@g9688@g9680 g9688@g9680) (set! g10160@g9686@g9681 g9686@g9681) (set! g10159@g9684@g9679 g9684@g9679) (set! g10158@g9678@&implementation-restriction-rcd g9678@&implementation-restriction-rcd) (set! g10157@g9676@&implementation-restriction-rtd g9676@&implementation-restriction-rtd) (set! g10156@g9674@implementation-restriction-violation? g9674@implementation-restriction-violation?) (set! g10155@g9672@make-implementation-restriction-violation g9672@make-implementation-restriction-violation) (set! g10154@g9670@p? g9670@p?) (set! g10153@g9667@g9659 g9667@g9659) (set! g10152@g9665@g9660 g9665@g9660) (set! g10151@g9663@g9658 g9663@g9658) (set! g10150@g9657@&non-continuable-rcd g9657@&non-continuable-rcd) (set! g10149@g9655@&non-continuable-rtd g9655@&non-continuable-rtd) (set! g10148@g9653@non-continuable-violation? g9653@non-continuable-violation?) (set! g10147@g9651@make-non-continuable-violation g9651@make-non-continuable-violation) (set! g10146@g9649@p? g9649@p?) (set! g10145@g9646@g9638 g9646@g9638) (set! g10144@g9644@g9639 g9644@g9639) (set! g10143@g9642@g9637 g9642@g9637) (set! g10142@g9636@&who-rcd g9636@&who-rcd) (set! g10141@g9634@&who-rtd g9634@&who-rtd) (set! g10140@g9632@condition-who g9632@condition-who) (set! g10139@g9630@who-condition? g9630@who-condition?) (set! g10138@g9628@g9611@condition-who g9628@g9611@condition-who) (set! g10137@g9626@make-who-condition g9626@make-who-condition) (set! g10136@g9624@p? g9624@p?) (set! g10135@g9621@g9613 g9621@g9613) (set! g10134@g9619@g9614 g9619@g9614) (set! g10133@g9617@g9612 g9617@g9612) (set! g10132@g9610@&irritants-rcd g9610@&irritants-rcd) (set! g10131@g9608@&irritants-rtd g9608@&irritants-rtd) (set! g10130@g9606@condition-irritants g9606@condition-irritants) (set! g10129@g9604@irritants-condition? g9604@irritants-condition?) (set! g10128@g9602@g9585@condition-irritants g9602@g9585@condition-irritants) (set! g10127@g9600@make-irritants-condition g9600@make-irritants-condition) (set! g10126@g9598@p? g9598@p?) (set! g10125@g9595@g9587 g9595@g9587) (set! g10124@g9593@g9588 g9593@g9588) (set! g10123@g9591@g9586 g9591@g9586) (set! g10122@g9584@&assertion-rcd g9584@&assertion-rcd) (set! g10121@g9582@&assertion-rtd g9582@&assertion-rtd) (set! g10120@g9580@assertion-violation? g9580@assertion-violation?) (set! g10119@g9578@make-assertion-violation g9578@make-assertion-violation) (set! g10118@g9576@p? g9576@p?) (set! g10117@g9573@g9565 g9573@g9565) (set! g10116@g9571@g9566 g9571@g9566) (set! g10115@g9569@g9564 g9569@g9564) (set! g10114@g9563@&violation-rcd g9563@&violation-rcd) (set! g10113@g9561@&violation-rtd g9561@&violation-rtd) (set! g10112@g9559@violation? g9559@violation?) (set! g10111@g9557@make-violation g9557@make-violation) (set! g10110@g9555@p? g9555@p?) (set! g10109@g9552@g9544 g9552@g9544) (set! g10108@g9550@g9545 g9550@g9545) (set! g10107@g9548@g9543 g9548@g9543) (set! g10106@g9542@&error-rcd g9542@&error-rcd) (set! g10105@g9540@&error-rtd g9540@&error-rtd) (set! g10104@g9538@error? g9538@error?) (set! g10103@g9536@make-error g9536@make-error) (set! g10102@g9534@p? g9534@p?) (set! g10101@g9531@g9523 g9531@g9523) (set! g10100@g9529@g9524 g9529@g9524) (set! g10099@g9527@g9522 g9527@g9522) (set! g10098@g9521@&serious-rcd g9521@&serious-rcd) (set! g10097@g9519@&serious-rtd g9519@&serious-rtd) (set! g10096@g9517@serious-condition? g9517@serious-condition?) (set! g10095@g9515@make-serious-condition g9515@make-serious-condition) (set! g10094@g9513@p? g9513@p?) (set! g10093@g9510@g9502 g9510@g9502) (set! g10092@g9508@g9503 g9508@g9503) (set! g10091@g9506@g9501 g9506@g9501) (set! g10090@g9500@&warning-rcd g9500@&warning-rcd) (set! g10089@g9498@&warning-rtd g9498@&warning-rtd) (set! g10088@g9496@warning? g9496@warning?) (set! g10087@g9494@make-warning g9494@make-warning) (set! g10086@g9492@p? g9492@p?) (set! g10085@g9489@g9481 g9489@g9481) (set! g10084@g9487@g9482 g9487@g9482) (set! g10083@g9485@g9480 g9485@g9480) (set! g10082@g9479@&message-rcd g9479@&message-rcd) (set! g10081@g9477@&message-rtd g9477@&message-rtd) (set! g10080@g9475@condition-message g9475@condition-message) (set! g10079@g9473@message-condition? g9473@message-condition?) (set! g10078@g9471@g9454@condition-message g9471@g9454@condition-message) (set! g10077@g9469@make-message-condition g9469@make-message-condition) (set! g10076@g9467@p? g9467@p?) (set! g10075@g9464@g9456 g9464@g9456) (set! g10074@g9462@g9457 g9462@g9457) (set! g10073@g9460@g9455 g9460@g9455) (set! g10072@g9388@&condition-rcd g9388@&condition-rcd) (set! g10071@g9386@&condition-rtd g9386@&condition-rtd) (set! g10070@g9384@make-&condition g9384@make-&condition) (set! g10069@g9382@&condition? g9382@&condition?) (set! g10068@g9379@g9371 g9379@g9371) (set! g10067@g9377@g9372 g9377@g9372) (set! g10066@g9375@g9370 g9375@g9370)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (g1244@g1169@current-primitive-locations (lambda (g11320@x) ((lambda (g11322@t) (if g11322@t (cdr g11322@t) '#f)) (assq g11320@x '((&no-nans-rcd . g10306@g10065@&no-nans-rcd) (&no-nans-rtd . g10305@g10063@&no-nans-rtd) (&no-infinities-rcd . g10298@g10044@&no-infinities-rcd) (&no-infinities-rtd . g10297@g10042@&no-infinities-rtd) (&i/o-encoding-rcd . g10290@g10023@&i/o-encoding-rcd) (&i/o-encoding-rtd . g10289@g10021@&i/o-encoding-rtd) (&i/o-decoding-rcd . g10280@g9997@&i/o-decoding-rcd) (&i/o-decoding-rtd . g10279@g9995@&i/o-decoding-rtd) (&i/o-port-rcd . g10272@g9976@&i/o-port-rcd) (&i/o-port-rtd . g10271@g9974@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . g10262@g9950@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . g10261@g9948@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . g10254@g9929@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . g10253@g9927@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . g10246@g9908@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . g10245@g9906@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . g10238@g9887@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . g10237@g9885@&i/o-file-protection-rtd) (&i/o-filename-rcd . g10230@g9866@&i/o-filename-rcd) (&i/o-filename-rtd . g10229@g9864@&i/o-filename-rtd) (&i/o-invalid-position-rcd . g10220@g9840@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . g10219@g9838@&i/o-invalid-position-rtd) (&i/o-write-rcd . g10210@g9814@&i/o-write-rcd) (&i/o-write-rtd . g10209@g9812@&i/o-write-rtd) (&i/o-read-rcd . g10202@g9793@&i/o-read-rcd) (&i/o-read-rtd . g10201@g9791@&i/o-read-rtd) (&i/o-rcd . g10194@g9772@&i/o-rcd) (&i/o-rtd . g10193@g9770@&i/o-rtd) (&undefined-rcd . g10186@g9751@&undefined-rcd) (&undefined-rtd . g10185@g9749@&undefined-rtd) (&syntax-rcd . g10178@g9730@&syntax-rcd) (&syntax-rtd . g10177@g9728@&syntax-rtd) (&lexical-rcd . g10166@g9699@&lexical-rcd) (&lexical-rtd . g10165@g9697@&lexical-rtd) (&implementation-restriction-rcd . g10158@g9678@&implementation-restriction-rcd) (&implementation-restriction-rtd . g10157@g9676@&implementation-restriction-rtd) (&non-continuable-rcd . g10150@g9657@&non-continuable-rcd) (&non-continuable-rtd . g10149@g9655@&non-continuable-rtd) (&who-rcd . g10142@g9636@&who-rcd) (&who-rtd . g10141@g9634@&who-rtd) (&irritants-rcd . g10132@g9610@&irritants-rcd) (&irritants-rtd . g10131@g9608@&irritants-rtd) (&assertion-rcd . g10122@g9584@&assertion-rcd) (&assertion-rtd . g10121@g9582@&assertion-rtd) (&violation-rcd . g10114@g9563@&violation-rcd) (&violation-rtd . g10113@g9561@&violation-rtd) (&error-rcd . g10106@g9542@&error-rcd) (&error-rtd . g10105@g9540@&error-rtd) (&serious-rcd . g10098@g9521@&serious-rcd) (&serious-rtd . g10097@g9519@&serious-rtd) (&warning-rcd . g10090@g9500@&warning-rcd) (&warning-rtd . g10089@g9498@&warning-rtd) (&message-rcd . g10082@g9479@&message-rcd) (&message-rtd . g10081@g9477@&message-rtd) (&condition-rcd . g10072@g9388@&condition-rcd) (&condition-rtd . g10071@g9386@&condition-rtd) (syntax-error . g9356@g2991@syntax-error) (syntax-dispatch . g9249@g2762@syntax-dispatch) (gensym . g1149@g913@gensym) (load . g10569@g10334@load) (interaction-environment . g9364@g3007@interaction-environment) (library-path . g1773@g1410@library-path) (make-parameter . g1163@g941@make-parameter) (make-variable-transformer . g9183@g2321@make-variable-transformer) (identifier? . g9359@g2997@identifier?) (generate-temporaries . g9349@g2977@generate-temporaries) (free-identifier=? . g9350@g2979@free-identifier=?) (syntax->datum . g9361@g3001@syntax->datum) (datum->syntax . g9360@g2999@datum->syntax) (bound-identifier=? . g9351@g2981@bound-identifier=?) (make-i/o-write-error . g10207@g9808@make-i/o-write-error) (make-i/o-read-error . g10199@g9787@make-i/o-read-error) (make-i/o-port-error . g10267@g9966@make-i/o-port-error) (make-i/o-invalid-position-error . g10215@g9830@make-i/o-invalid-position-error) (make-i/o-filename-error . g10225@g9856@make-i/o-filename-error) (make-i/o-file-protection-error . g10235@g9881@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . g10243@g9902@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . g10259@g9944@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . g10251@g9923@make-i/o-file-already-exists-error) (make-i/o-error . g10191@g9766@make-i/o-error) (make-i/o-encoding-error . g10285@g10013@make-i/o-encoding-error) (make-i/o-decoding-error . g10277@g9991@make-i/o-decoding-error) (i/o-write-error? . g10208@g9810@i/o-write-error?) (i/o-read-error? . g10200@g9789@i/o-read-error?) (i/o-port-error? . g10269@g9970@i/o-port-error?) (i/o-invalid-position-error? . g10217@g9834@i/o-invalid-position-error?) (i/o-filename-error? . g10227@g9860@i/o-filename-error?) (i/o-file-protection-error? . g10236@g9883@i/o-file-protection-error?) (i/o-file-is-read-only-error? . g10244@g9904@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . g10260@g9946@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . g10252@g9925@i/o-file-already-exists-error?) (i/o-error? . g10192@g9768@i/o-error?) (i/o-error-position . g10218@g9836@i/o-error-position) (i/o-error-port . g10270@g9972@i/o-error-port) (i/o-error-filename . g10228@g9862@i/o-error-filename) (i/o-encoding-error? . g10287@g10017@i/o-encoding-error?) (i/o-encoding-error-char . g10288@g10019@i/o-encoding-error-char) (i/o-decoding-error? . g10278@g9993@i/o-decoding-error?) (scheme-report-environment . g9340@g2959@scheme-report-environment) (null-environment . g9339@g2957@null-environment) (command-line . g10566@g10328@command-line) (eval . g9342@g2963@eval) (environment . g9338@g2955@environment) (who-condition? . g10139@g9630@who-condition?) (warning? . g10088@g9496@warning?) (violation? . g10112@g9559@violation?) (undefined-violation? . g10184@g9747@undefined-violation?) (syntax-violation? . g10174@g9722@syntax-violation?) (syntax-violation-subform . g10176@g9726@syntax-violation-subform) (syntax-violation-form . g10175@g9724@syntax-violation-form) (syntax-violation . g9358@g2995@syntax-violation) (serious-condition? . g10096@g9517@serious-condition?) (non-continuable-violation? . g10148@g9653@non-continuable-violation?) (message-condition? . g10079@g9473@message-condition?) (make-who-condition . g10137@g9626@make-who-condition) (make-warning . g10087@g9494@make-warning) (make-violation . g10111@g9557@make-violation) (make-undefined-violation . g10183@g9745@make-undefined-violation) (make-syntax-violation . g10171@g9716@make-syntax-violation) (make-serious-condition . g10095@g9515@make-serious-condition) (make-non-continuable-violation . g10147@g9651@make-non-continuable-violation) (make-message-condition . g10077@g9469@make-message-condition) (make-lexical-violation . g10163@g9693@make-lexical-violation) (make-irritants-condition . g10127@g9600@make-irritants-condition) (make-implementation-restriction-violation . g10155@g9672@make-implementation-restriction-violation) (make-error . g10103@g9536@make-error) (make-assertion-violation . g10119@g9578@make-assertion-violation) (lexical-violation? . g10164@g9695@lexical-violation?) (irritants-condition? . g10129@g9604@irritants-condition?) (implementation-restriction-violation? . g10156@g9674@implementation-restriction-violation?) (error? . g10104@g9538@error?) (condition-who . g10140@g9632@condition-who) (condition-message . g10080@g9475@condition-message) (condition-irritants . g10130@g9606@condition-irritants) (assertion-violation? . g10120@g9580@assertion-violation?) (no-nans-violation? . g10304@g10061@no-nans-violation?) (no-infinities-violation? . g10296@g10040@no-infinities-violation?) (make-no-nans-violation . g10303@g10059@make-no-nans-violation) (make-no-infinities-violation . g10295@g10038@make-no-infinities-violation)))))) (g1789@g1442@install-library 'g11285 '(mosh interaction) '() '() '() '() '((alist->eq-hash-table . g11275) (format . g11272) (string-split . g11261) (call-process . g11255) (set-current-directory! . g11251) (expand-path . g11250) (current-directory . g11249) (%spawn . g11248) (%waitpid . g11247) (%ffi-supported? . g11246) (%ffi-pointer-ref . g11245) (%ffi-pointer->string . g11244) (%ffi-call->string-or-zero . g11243) (%ffi-call->double . g11242) (%ffi-call->void* . g11241) (%ffi-call->void . g11240) (%ffi-call->int . g11239) (%ffi-lookup . g11238) (%ffi-open . g11237) (%fork . g11236) (%pipe . g11235) (p . g11234) (string-upcase . g11215) (string-titlecase . g11214) (string-normalize-nfkd . g11213) (string-normalize-nfkc . g11212) (string-normalize-nfd . g11211) (string-normalize-nfc . g11210) (string-foldcase . g11209) (string-downcase . g11208) (string-ci>? . g11207) (string-ci>=? . g11206) (string-ci=? . g11205) (string-ci<? . g11204) (string-ci<=? . g11203) (char-whitespace? . g11202) (char-upper-case? . g11201) (char-title-case? . g11200) (char-numeric? . g11199) (char-lower-case? . g11198) (char-general-category . g11197) (char-upcase . g11196) (char-titlecase . g11195) (char-foldcase . g11194) (char-downcase . g11193) (char-ci>? . g11192) (char-ci>=? . g11191) (char-ci=? . g11190) (char-ci<? . g11189) (char-ci<=? . g11188) (char-alphabetic? . g11187) (make-variable-transformer . g2320) (identifier? . g2996) (generate-temporaries . g2976) (free-identifier=? . g2978) (syntax->datum . g3000) (datum->syntax . g2998) (bound-identifier=? . g2980) (record-type-descriptor? . g11186) (record-predicate . g11185) (record-mutator . g11184) (record-constructor . g11183) (record-accessor . g11182) (make-record-type-descriptor . g11181) (make-record-constructor-descriptor . g11180) (record? . g11179) (record-type-uid . g11178) (record-type-sealed? . g11177) (record-type-parent . g11176) (record-type-opaque? . g11175) (record-type-name . g11174) (record-type-generative? . g11173) (record-type-field-names . g11172) (record-rtd . g11171) (record-field-mutable? . g11170) (delete-file . g11169) (file-exists? . g11168) (vector-sort! . g11167) (vector-sort . g11166) (list-sort . g11165) (symbol-hash . g11164) (string-ci-hash . g11163) (string-hash . g11162) (equal-hash . g11161) (hashtable-equivalence-function . g11160) (make-hashtable . g11159) (hashtable-hash-function . g11158) (make-eqv-hashtable . g11157) (make-eq-hashtable . g11156) (hashtable? . g11155) (hashtable-update! . g11154) (hashtable-size . g11153) (hashtable-set! . g11152) (hashtable-ref . g11151) (hashtable-mutable? . g11150) (hashtable-keys . g11149) (hashtable-entries . g11148) (hashtable-delete! . g11147) (hashtable-copy . g11146) (hashtable-contains? . g11145) (hashtable-clear! . g11144) (call-with-output-file . g11143) (call-with-input-file . g11142) (write-char . g11141) (write . g11140) (with-output-to-file . g11139) (with-input-from-file . g11138) (read-char . g11137) (read . g11136) (peek-char . g11135) (open-output-file . g11134) (open-input-file . g11133) (newline . g11132) (display . g11131) (close-output-port . g11130) (close-input-port . g11129) (eof-object? . g11128) (eof-object . g11127) (current-error-port . g11126) (current-output-port . g11125) (current-input-port . g11124) (output-port? . g11123) (input-port? . g11122) (utf-8-codec . g11121) (utf-16-codec . g11120) (transcoder-error-handling-mode . g11119) (transcoder-eol-style . g11118) (transcoder-codec . g11117) (transcoded-port . g11116) (textual-port? . g11115) (string->bytevector . g11114) (standard-output-port . g11113) (standard-input-port . g11112) (standard-error-port . g11111) (set-port-position! . g11110) (put-u8 . g11109) (put-string . g11108) (put-datum . g11107) (put-char . g11106) (put-bytevector . g11105) (port? . g11104) (port-transcoder . g11103) (port-position . g11102) (port-has-set-port-position!? . g11101) (port-has-port-position? . g11100) (port-eof? . g11099) (output-port-buffer-mode . g11098) (open-string-output-port . g11097) (open-string-input-port . g11096) (open-file-output-port . g11095) (open-file-input/output-port . g11094) (open-file-input-port . g11093) (open-bytevector-output-port . g11092) (open-bytevector-input-port . g11091) (native-transcoder . g11090) (native-eol-style . g11089) (make-transcoder . g11088) (latin-1-codec . g11087) (make-i/o-write-error . g9807) (make-i/o-read-error . g9786) (make-i/o-port-error . g9965) (make-i/o-invalid-position-error . g9829) (make-i/o-filename-error . g9855) (make-i/o-file-protection-error . g9880) (make-i/o-file-is-read-only-error . g9901) (make-i/o-file-does-not-exist-error . g9943) (make-i/o-file-already-exists-error . g9922) (make-i/o-error . g9765) (make-i/o-encoding-error . g10012) (make-i/o-decoding-error . g9990) (make-custom-textual-output-port . g11086) (make-custom-textual-input/output-port . g11085) (make-custom-textual-input-port . g11084) (make-custom-binary-output-port . g11083) (make-custom-binary-input/output-port . g11082) (make-custom-binary-input-port . g11081) (make-bytevector . g11080) (lookahead-u8 . g11079) (lookahead-char . g11078) (i/o-write-error? . g9809) (i/o-read-error? . g9788) (i/o-port-error? . g9969) (i/o-invalid-position-error? . g9833) (i/o-filename-error? . g9859) (i/o-file-protection-error? . g9882) (i/o-file-is-read-only-error? . g9903) (i/o-file-does-not-exist-error? . g9945) (i/o-file-already-exists-error? . g9924) (i/o-error? . g9767) (i/o-error-position . g9835) (i/o-error-port . g9971) (i/o-error-filename . g9861) (i/o-encoding-error? . g10016) (i/o-encoding-error-char . g10018) (i/o-decoding-error? . g9992) (get-u8 . g11077) (get-string-n! . g11076) (get-string-n . g11075) (get-string-all . g11074) (get-line . g11073) (get-datum . g11072) (get-char . g11071) (get-bytevector-some . g11070) (get-bytevector-n! . g11069) (get-bytevector-n . g11068) (get-bytevector-all . g11067) (flush-output-port . g11066) (close-port . g11065) (exit . g11057) (command-line . g10327) (string-fill! . g11056) (string-set! . g11055) (set-cdr! . g11054) (set-car! . g11053) (remove . g11052) (remv . g11051) (remp . g11050) (remq . g11049) (partition . g11048) (memv . g11047) (memq . g11046) (memp . g11045) (member . g11044) (exists . g11043) (for-all . g11042) (fold-right . g11041) (fold-left . g11040) (find . g11039) (filter . g11038) (cons* . g11037) (assv . g11036) (assq . g11035) (assp . g11034) (assoc . g11033) (call-with-string-output-port . g11032) (call-with-port . g11031) (call-with-bytevector-output-port . g11030) (bytevector->string . g11029) (buffer-mode? . g11028) (binary-port? . g11027) (with-exception-handler . g11026) (raise-continuable . g11025) (raise . g11024) (eval . g2962) (environment . g2954) (make-enumeration . g11023) (enum-set=? . g11022) (enum-set-universe . g11021) (enum-set-union . g11020) (enum-set-subset? . g11019) (enum-set-projection . g11018) (enum-set-member? . g11017) (enum-set-intersection . g11016) (enum-set-indexer . g11015) (enum-set-difference . g11014) (enum-set-constructor . g11013) (enum-set-complement . g11012) (enum-set->list . g11011) (who-condition? . g9629) (warning? . g9495) (violation? . g9558) (undefined-violation? . g9746) (syntax-violation? . g9721) (syntax-violation-subform . g9725) (syntax-violation-form . g9723) (syntax-violation . g2994) (simple-conditions . g11010) (serious-condition? . g9516) (non-continuable-violation? . g9652) (message-condition? . g9472) (make-who-condition . g9625) (make-warning . g9493) (make-violation . g9556) (make-undefined-violation . g9744) (make-syntax-violation . g9715) (make-serious-condition . g9514) (make-non-continuable-violation . g9650) (make-message-condition . g9468) (make-lexical-violation . g9692) (make-irritants-condition . g9599) (make-implementation-restriction-violation . g9671) (make-error . g9535) (make-assertion-violation . g9577) (lexical-violation? . g9694) (irritants-condition? . g9603) (implementation-restriction-violation? . g9673) (error? . g9537) (condition-who . g9631) (condition-predicate . g11009) (condition-message . g9474) (condition-irritants . g9605) (condition-accessor . g11008) (condition . g11007) (assertion-violation? . g9579) (condition? . g11006) (utf32->string . g11005) (utf16->string . g11004) (utf8->string . g11003) (uint-list->bytevector . g11002) (u8-list->bytevector . g11001) (string->utf8 . g11000) (string->utf32 . g10999) (string->utf16 . g10998) (sint-list->bytevector . g10997) (native-endianness . g10996) (bytevector? . g10995) (bytevector=? . g10994) (bytevector-uint-set! . g10993) (bytevector-uint-ref . g10992) (bytevector-u8-set! . g10991) (bytevector-u8-ref . g10990) (bytevector-u64-set! . g10989) (bytevector-u64-ref . g10988) (bytevector-u64-native-set! . g10987) (bytevector-u64-native-ref . g10986) (bytevector-u32-set! . g10985) (bytevector-u32-ref . g10984) (bytevector-u32-native-set! . g10983) (bytevector-u32-native-ref . g10982) (bytevector-u16-set! . g10981) (bytevector-u16-ref . g10980) (bytevector-u16-native-set! . g10979) (bytevector-u16-native-ref . g10978) (bytevector-sint-set! . g10977) (bytevector-sint-ref . g10976) (bytevector-s8-set! . g10975) (bytevector-s8-ref . g10974) (bytevector-s64-set! . g10973) (bytevector-s64-ref . g10972) (bytevector-s64-native-set! . g10971) (bytevector-s64-native-ref . g10970) (bytevector-s32-set! . g10969) (bytevector-s32-ref . g10968) (bytevector-s32-native-set! . g10967) (bytevector-s32-native-ref . g10966) (bytevector-s16-set! . g10965) (bytevector-s16-ref . g10964) (bytevector-s16-native-set! . g10963) (bytevector-s16-native-ref . g10962) (bytevector-length . g10961) (bytevector-ieee-single-ref . g10960) (bytevector-ieee-single-set! . g10959) (bytevector-ieee-single-native-set! . g10958) (bytevector-ieee-single-native-ref . g10957) (bytevector-ieee-double-set! . g10956) (bytevector-ieee-double-ref . g10955) (bytevector-ieee-double-native-set! . g10954) (bytevector-ieee-double-native-ref . g10953) (bytevector-fill! . g10952) (bytevector-copy! . g10951) (bytevector-copy . g10950) (bytevector->uint-list . g10949) (bytevector->u8-list . g10948) (bytevector->sint-list . g10947) (no-nans-violation? . g10060) (no-infinities-violation? . g10039) (make-no-nans-violation . g10058) (make-no-infinities-violation . g10037) (real->flonum . g10946) (flzero? . g10945) (fltruncate . g10944) (fltan . g10943) (flsqrt . g10942) (flsin . g10941) (flround . g10940) (flpositive? . g10939) (flonum? . g10938) (flodd? . g10937) (flnumerator . g10936) (flnegative? . g10935) (flnan? . g10934) (flmod0 . g10933) (flmod . g10932) (flmin . g10931) (flmax . g10930) (fllog . g10929) (flinteger? . g10928) (flinfinite? . g10927) (flfloor . g10926) (flfinite? . g10925) (flexpt . g10924) (flexp . g10923) (fleven? . g10922) (fldiv0-and-mod0 . g10921) (fldiv0 . g10920) (fldiv-and-mod . g10919) (fldiv . g10918) (fldenominator . g10917) (flcos . g10916) (flceiling . g10915) (flatan . g10914) (flasin . g10913) (flacos . g10912) (flabs . g10911) (fl>? . g10910) (fl>=? . g10909) (fl=? . g10908) (fl<? . g10907) (fl<=? . g10906) (fl/ . g10905) (fl- . g10904) (fl+ . g10903) (fl* . g10902) (fixnum->flonum . g10901) (fxzero? . g10900) (fxxor . g10899) (fxrotate-bit-field . g10898) (fxreverse-bit-field . g10897) (fxpositive? . g10896) (fxodd? . g10895) (fxnot . g10894) (fxnegative? . g10893) (fxmod0 . g10892) (fxmod . g10891) (fxmin . g10890) (fxmax . g10889) (fxlength . g10888) (fxior . g10887) (fxif . g10886) (fxfirst-bit-set . g10885) (fxeven? . g10884) (fxdiv0-and-mod0 . g10883) (fxdiv0 . g10882) (fxdiv-and-mod . g10881) (fxdiv . g10880) (fxcopy-bit-field . g10879) (fxcopy-bit . g10878) (fxbit-set? . g10877) (fxbit-field . g10876) (fxbit-count . g10875) (fxarithmetic-shift-right . g10874) (fxarithmetic-shift-left . g10873) (fxarithmetic-shift . g10872) (fxand . g10871) (fx>? . g10870) (fx>=? . g10869) (fx=? . g10868) (fx<? . g10867) (fx<=? . g10866) (fx-/carry . g10865) (fx- . g10864) (fx+/carry . g10863) (fx+ . g10862) (fx*/carry . g10861) (fx* . g10860) (greatest-fixnum . g10859) (least-fixnum . g10858) (fixnum-width . g10857) (fixnum? . g10856) (bitwise-rotate-bit-field . g10855) (bitwise-reverse-bit-field . g10854) (bitwise-length . g10853) (bitwise-if . g10852) (bitwise-first-bit-set . g10851) (bitwise-copy-bit-field . g10850) (bitwise-copy-bit . g10849) (bitwise-bit-set? . g10848) (bitwise-bit-field . g10847) (bitwise-bit-count . g10846) (bitwise-xor . g10845) (bitwise-ior . g10844) (bitwise-and . g10843) (bitwise-not . g10842) (bitwise-arithmetic-shift-right . g10841) (bitwise-arithmetic-shift-left . g10840) (bitwise-arithmetic-shift . g10839) (zero? . g10838) (vector? . g10837) (vector-set! . g10836) (vector-ref . g10835) (vector-map . g10834) (vector-length . g10833) (vector-for-each . g10832) (vector-fill! . g10831) (vector->list . g10830) (vector . g10829) (values . g10828) (truncate . g10827) (tan . g10826) (symbol? . g10825) (symbol=? . g10824) (symbol->string . g10823) (substring . g10822) (string? . g10821) (string>? . g10820) (string>=? . g10819) (string=? . g10818) (string<? . g10817) (string<=? . g10816) (string-ref . g10815) (string-length . g10814) (string-for-each . g10813) (string-copy . g10812) (string-append . g10811) (string->symbol . g10810) (string->number . g10809) (string->list . g10808) (string . g10807) (sqrt . g10806) (sin . g10805) (round . g10804) (reverse . g10803) (real? . g10802) (real-valued? . g10801) (real-part . g10800) (rationalize . g10799) (rational? . g10798) (rational-valued? . g10797) (procedure? . g10796) (positive? . g10795) (pair? . g10794) (odd? . g10793) (numerator . g10792) (number? . g10791) (number->string . g10790) (null? . g10789) (not . g10788) (negative? . g10787) (nan? . g10786) (min . g10785) (max . g10784) (map . g10783) (make-vector . g10782) (make-string . g10781) (make-rectangular . g10780) (make-polar . g10779) (magnitude . g10778) (log . g10777) (list? . g10776) (list-tail . g10775) (list-ref . g10774) (list->vector . g10773) (list->string . g10772) (list . g10771) (length . g10770) (lcm . g10769) (integer? . g10768) (integer-valued? . g10767) (integer->char . g10766) (infinite? . g10765) (inexact? . g10764) (inexact . g10763) (imag-part . g10762) (gcd . g10761) (for-each . g10760) (floor . g10759) (finite? . g10758) (expt . g10757) (exp . g10756) (exact? . g10755) (exact-integer-sqrt . g10754) (exact . g10753) (even? . g10752) (error . g10751) (eqv? . g10750) (equal? . g10749) (eq? . g10748) (dynamic-wind . g10747) (div0-and-mod0 . g10746) (mod0 . g10745) (div0 . g10744) (div-and-mod . g10743) (mod . g10742) (div . g10741) (denominator . g10740) (cos . g10739) (cons . g10738) (complex? . g10737) (char? . g10736) (char>? . g10735) (char>=? . g10734) (char=? . g10733) (char<? . g10732) (char<=? . g10731) (char->integer . g10730) (ceiling . g10729) (call-with-values . g10728) (call/cc . g10727) (call-with-current-continuation . g10726) (cddddr . g10725) (cdddar . g10724) (cddadr . g10723) (cddaar . g10722) (cdaddr . g10721) (cdadar . g10720) (cdaadr . g10719) (cdaaar . g10718) (cadddr . g10717) (caddar . g10716) (cadadr . g10715) (cadaar . g10714) (caaddr . g10713) (caadar . g10712) (caaadr . g10711) (caaaar . g10710) (cdddr . g10709) (cddar . g10708) (cdadr . g10707) (cdaar . g10706) (caddr . g10705) (cadar . g10704) (caadr . g10703) (caaar . g10702) (cddr . g10701) (cdar . g10700) (cadr . g10699) (caar . g10698) (cdr . g10697) (car . g10696) (boolean? . g10695) (boolean=? . g10694) (atan . g10693) (assertion-violation . g10692) (asin . g10691) (apply . g10690) (append . g10689) (angle . g10688) (acos . g10687) (abs . g10686) (/ . g10685) (* . g10684) (- . g10683) (+ . g10682) (>= . g10681) (> . g10680) (= . g10679) (<= . g10678) (< . g10677) (library . g10676) (&no-nans . g10675) (&no-infinities . g10674) (&i/o-encoding . g10673) (&i/o-decoding . g10672) (&i/o-port . g10671) (&i/o-file-does-not-exist . g10670) (&i/o-file-already-exists . g10669) (&i/o-file-is-read-only . g10668) (&i/o-file-protection . g10667) (&i/o-filename . g10666) (&i/o-invalid-position . g10665) (&i/o-write . g10664) (&i/o-read . g10663) (&i/o . g10662) (&undefined . g10661) (&syntax . g10660) (&lexical . g10659) (&implementation-restriction . g10658) (&non-continuable . g10657) (&who . g10656) (&irritants . g10655) (&assertion . g10654) (&violation . g10653) (&error . g10652) (&serious . g10651) (&warning . g10650) (&message . g10649) (&condition . g10648) (define-condition-type . g10647) (define-enumeration . g10646) (define-record-type . g10645) (parent-rtd . g10644) (nongenerative . g10643) (opaque . g10642) (sealed . g10641) (protocol . g10640) (parent . g10639) (immutable . g10638) (mutable . g10637) (fields . g10636) (error-handling-mode . g10635) (file-options . g10634) (buffer-mode . g10633) (eol-style . g10632) (guard . g10631) (unsyntax-splicing . g10628) (unsyntax . g10627) (unquote-splicing . g10626) (unquote . g10625) (_ . g10624) (else . g10623) (=> . g10622) (... . g10621) (assert . g10620) (endianness . g10619) (do . g10616) (cond . g10615) (let* . g10614) (let . g10613) (let*-values . g10612) (let-values . g10611) (identifier-syntax . g10610) (with-syntax . g10609) (quasisyntax . g10608) (quasiquote . g10607) (syntax-rules . g10606) (include . g10605) (record-constructor-descriptor . g10603) (record-type-descriptor . g10602) (case . g10601) (unless . g10599) (when . g10598) (or . g10597) (and . g10596) (if . g10595) (letrec* . g10594) (letrec . g10593) (case-lambda . g10591) (lambda . g10590) (syntax . g10589) (syntax-case . g10588) (quote . g10587) (letrec-syntax . g10585) (let-syntax . g10584) (set! . g10583) (import . g10582) (begin . g10581) (define-syntax . g10579) (define . g10578)) '() values values '#f '#f '#t '#f) (g1789@g1442@install-library 'g11286 '(psyntax null-environment-5) '() '() '() '() '((make-promise . g11058) (unquote-splicing . g10626) (unquote . g10625) (_ . g10624) (else . g10623) (=> . g10622) (... . g10621) (delay . g10618) (do . g10616) (cond . g10615) (let* . g10614) (let . g10613) (quasiquote . g10607) (syntax-rules . g10606) (case . g10601) (or . g10597) (and . g10596) (if . g10595) (letrec . g10593) (lambda . g10590) (quote . g10587) (letrec-syntax . g10585) (let-syntax . g10584) (set! . g10583) (begin . g10581) (define-syntax . g10579) (define . g10578)) '() values values '#f '#f '#t '#f) (g1789@g1442@install-library 'g11287 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . g11207) (string-ci>=? . g11206) (string-ci=? . g11205) (string-ci<? . g11204) (string-ci<=? . g11203) (char-whitespace? . g11202) (char-upper-case? . g11201) (char-numeric? . g11199) (char-lower-case? . g11198) (char-upcase . g11196) (char-downcase . g11193) (char-ci>? . g11192) (char-ci>=? . g11191) (char-ci=? . g11190) (char-ci<? . g11189) (char-ci<=? . g11188) (char-alphabetic? . g11187) (call-with-output-file . g11143) (call-with-input-file . g11142) (write-char . g11141) (write . g11140) (with-output-to-file . g11139) (with-input-from-file . g11138) (read-char . g11137) (read . g11136) (peek-char . g11135) (open-output-file . g11134) (open-input-file . g11133) (newline . g11132) (display . g11131) (close-output-port . g11130) (close-input-port . g11129) (eof-object . g11127) (current-output-port . g11125) (current-input-port . g11124) (output-port? . g11123) (input-port? . g11122) (scheme-report-environment . g2958) (quotient . g11064) (null-environment . g2956) (remainder . g11063) (modulo . g11062) (inexact->exact . g11061) (force . g11060) (exact->inexact . g11059) (make-promise . g11058) (string-fill! . g11056) (string-set! . g11055) (set-cdr! . g11054) (set-car! . g11053) (memv . g11047) (memq . g11046) (member . g11044) (assv . g11036) (assq . g11035) (assoc . g11033) (eval . g2962) (zero? . g10838) (vector? . g10837) (vector-set! . g10836) (vector-ref . g10835) (vector-length . g10833) (vector-fill! . g10831) (vector->list . g10830) (vector . g10829) (values . g10828) (truncate . g10827) (tan . g10826) (symbol? . g10825) (symbol->string . g10823) (substring . g10822) (string? . g10821) (string>? . g10820) (string>=? . g10819) (string=? . g10818) (string<? . g10817) (string<=? . g10816) (string-ref . g10815) (string-length . g10814) (string-copy . g10812) (string-append . g10811) (string->symbol . g10810) (string->number . g10809) (string->list . g10808) (string . g10807) (sqrt . g10806) (sin . g10805) (round . g10804) (reverse . g10803) (real? . g10802) (real-part . g10800) (rationalize . g10799) (rational? . g10798) (procedure? . g10796) (positive? . g10795) (pair? . g10794) (odd? . g10793) (numerator . g10792) (number? . g10791) (number->string . g10790) (not . g10788) (negative? . g10787) (min . g10785) (max . g10784) (map . g10783) (make-vector . g10782) (make-string . g10781) (make-rectangular . g10780) (make-polar . g10779) (magnitude . g10778) (log . g10777) (list? . g10776) (list-tail . g10775) (list-ref . g10774) (list->vector . g10773) (list->string . g10772) (list . g10771) (length . g10770) (lcm . g10769) (integer? . g10768) (integer->char . g10766) (inexact? . g10764) (imag-part . g10762) (gcd . g10761) (for-each . g10760) (floor . g10759) (expt . g10757) (exp . g10756) (exact? . g10755) (even? . g10752) (eqv? . g10750) (equal? . g10749) (eq? . g10748) (dynamic-wind . g10747) (denominator . g10740) (cos . g10739) (cons . g10738) (complex? . g10737) (char? . g10736) (char>? . g10735) (char>=? . g10734) (char=? . g10733) (char<? . g10732) (char<=? . g10731) (char->integer . g10730) (ceiling . g10729) (call-with-values . g10728) (call-with-current-continuation . g10726) (cddddr . g10725) (cdddar . g10724) (cddadr . g10723) (cddaar . g10722) (cdaddr . g10721) (cdadar . g10720) (cdaadr . g10719) (cdaaar . g10718) (cadddr . g10717) (caddar . g10716) (cadadr . g10715) (cadaar . g10714) (caaddr . g10713) (caadar . g10712) (caaadr . g10711) (caaaar . g10710) (cdddr . g10709) (cddar . g10708) (cdadr . g10707) (cdaar . g10706) (caddr . g10705) (cadar . g10704) (caadr . g10703) (caaar . g10702) (cddr . g10701) (cdar . g10700) (cadr . g10699) (caar . g10698) (cdr . g10697) (car . g10696) (boolean? . g10695) (atan . g10693) (asin . g10691) (apply . g10690) (append . g10689) (angle . g10688) (acos . g10687) (abs . g10686) (/ . g10685) (* . g10684) (- . g10683) (+ . g10682) (>= . g10681) (> . g10680) (= . g10679) (<= . g10678) (< . g10677) (unquote-splicing . g10626) (unquote . g10625) (else . g10623) (=> . g10622) (... . g10621) (delay . g10618) (do . g10616) (cond . g10615) (let* . g10614) (let . g10613) (quasiquote . g10607) (syntax-rules . g10606) (case . g10601) (or . g10597) (and . g10596) (if . g10595) (letrec . g10593) (lambda . g10590) (quote . g10587) (letrec-syntax . g10585) (let-syntax . g10584) (set! . g10583) (begin . g10581) (define-syntax . g10579) (define . g10578)) '() values values '#f '#f '#t '#f) (g1789@g1442@install-library 'g11288 '(psyntax modules) '() '() '() '() '((module . g10580)) '() values values '#f '#f '#t '#f) (g1789@g1442@install-library 'g11289 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (g1789@g1442@install-library 'g11290 '(rnrs) '(6) '() '() '() '((regexp? . g11278) (string-upcase . g11215) (string-titlecase . g11214) (string-normalize-nfkd . g11213) (string-normalize-nfkc . g11212) (string-normalize-nfd . g11211) (string-normalize-nfc . g11210) (string-foldcase . g11209) (string-downcase . g11208) (string-ci>? . g11207) (string-ci>=? . g11206) (string-ci=? . g11205) (string-ci<? . g11204) (string-ci<=? . g11203) (char-whitespace? . g11202) (char-upper-case? . g11201) (char-title-case? . g11200) (char-numeric? . g11199) (char-lower-case? . g11198) (char-general-category . g11197) (char-upcase . g11196) (char-titlecase . g11195) (char-foldcase . g11194) (char-downcase . g11193) (char-ci>? . g11192) (char-ci>=? . g11191) (char-ci=? . g11190) (char-ci<? . g11189) (char-ci<=? . g11188) (char-alphabetic? . g11187) (make-variable-transformer . g2320) (identifier? . g2996) (generate-temporaries . g2976) (free-identifier=? . g2978) (syntax->datum . g3000) (datum->syntax . g2998) (bound-identifier=? . g2980) (record-type-descriptor? . g11186) (record-predicate . g11185) (record-mutator . g11184) (record-constructor . g11183) (record-accessor . g11182) (make-record-type-descriptor . g11181) (make-record-constructor-descriptor . g11180) (record? . g11179) (record-type-uid . g11178) (record-type-sealed? . g11177) (record-type-parent . g11176) (record-type-opaque? . g11175) (record-type-name . g11174) (record-type-generative? . g11173) (record-type-field-names . g11172) (record-rtd . g11171) (record-field-mutable? . g11170) (delete-file . g11169) (file-exists? . g11168) (vector-sort! . g11167) (vector-sort . g11166) (list-sort . g11165) (symbol-hash . g11164) (string-ci-hash . g11163) (string-hash . g11162) (equal-hash . g11161) (hashtable-equivalence-function . g11160) (make-hashtable . g11159) (hashtable-hash-function . g11158) (make-eqv-hashtable . g11157) (make-eq-hashtable . g11156) (hashtable? . g11155) (hashtable-update! . g11154) (hashtable-size . g11153) (hashtable-set! . g11152) (hashtable-ref . g11151) (hashtable-mutable? . g11150) (hashtable-keys . g11149) (hashtable-entries . g11148) (hashtable-delete! . g11147) (hashtable-copy . g11146) (hashtable-contains? . g11145) (hashtable-clear! . g11144) (call-with-output-file . g11143) (call-with-input-file . g11142) (write-char . g11141) (write . g11140) (with-output-to-file . g11139) (with-input-from-file . g11138) (read-char . g11137) (read . g11136) (peek-char . g11135) (open-output-file . g11134) (open-input-file . g11133) (newline . g11132) (display . g11131) (close-output-port . g11130) (close-input-port . g11129) (eof-object? . g11128) (eof-object . g11127) (current-error-port . g11126) (current-output-port . g11125) (current-input-port . g11124) (output-port? . g11123) (input-port? . g11122) (utf-8-codec . g11121) (utf-16-codec . g11120) (transcoder-error-handling-mode . g11119) (transcoder-eol-style . g11118) (transcoder-codec . g11117) (transcoded-port . g11116) (textual-port? . g11115) (string->bytevector . g11114) (standard-output-port . g11113) (standard-input-port . g11112) (standard-error-port . g11111) (set-port-position! . g11110) (put-u8 . g11109) (put-string . g11108) (put-datum . g11107) (put-char . g11106) (put-bytevector . g11105) (port? . g11104) (port-transcoder . g11103) (port-position . g11102) (port-has-set-port-position!? . g11101) (port-has-port-position? . g11100) (port-eof? . g11099) (output-port-buffer-mode . g11098) (open-string-output-port . g11097) (open-string-input-port . g11096) (open-file-output-port . g11095) (open-file-input/output-port . g11094) (open-file-input-port . g11093) (open-bytevector-output-port . g11092) (open-bytevector-input-port . g11091) (native-transcoder . g11090) (native-eol-style . g11089) (make-transcoder . g11088) (latin-1-codec . g11087) (make-i/o-write-error . g9807) (make-i/o-read-error . g9786) (make-i/o-port-error . g9965) (make-i/o-invalid-position-error . g9829) (make-i/o-filename-error . g9855) (make-i/o-file-protection-error . g9880) (make-i/o-file-is-read-only-error . g9901) (make-i/o-file-does-not-exist-error . g9943) (make-i/o-file-already-exists-error . g9922) (make-i/o-error . g9765) (make-i/o-encoding-error . g10012) (make-i/o-decoding-error . g9990) (make-custom-textual-output-port . g11086) (make-custom-textual-input/output-port . g11085) (make-custom-textual-input-port . g11084) (make-custom-binary-output-port . g11083) (make-custom-binary-input/output-port . g11082) (make-custom-binary-input-port . g11081) (make-bytevector . g11080) (lookahead-u8 . g11079) (lookahead-char . g11078) (i/o-write-error? . g9809) (i/o-read-error? . g9788) (i/o-port-error? . g9969) (i/o-invalid-position-error? . g9833) (i/o-filename-error? . g9859) (i/o-file-protection-error? . g9882) (i/o-file-is-read-only-error? . g9903) (i/o-file-does-not-exist-error? . g9945) (i/o-file-already-exists-error? . g9924) (i/o-error? . g9767) (i/o-error-position . g9835) (i/o-error-port . g9971) (i/o-error-filename . g9861) (i/o-encoding-error? . g10016) (i/o-encoding-error-char . g10018) (i/o-decoding-error? . g9992) (get-u8 . g11077) (get-string-n! . g11076) (get-string-n . g11075) (get-string-all . g11074) (get-line . g11073) (get-datum . g11072) (get-char . g11071) (get-bytevector-some . g11070) (get-bytevector-n! . g11069) (get-bytevector-n . g11068) (get-bytevector-all . g11067) (flush-output-port . g11066) (close-port . g11065) (exit . g11057) (command-line . g10327) (remove . g11052) (remv . g11051) (remp . g11050) (remq . g11049) (partition . g11048) (memv . g11047) (memq . g11046) (memp . g11045) (member . g11044) (exists . g11043) (for-all . g11042) (fold-right . g11041) (fold-left . g11040) (find . g11039) (filter . g11038) (cons* . g11037) (assv . g11036) (assq . g11035) (assp . g11034) (assoc . g11033) (call-with-string-output-port . g11032) (call-with-port . g11031) (call-with-bytevector-output-port . g11030) (bytevector->string . g11029) (buffer-mode? . g11028) (binary-port? . g11027) (with-exception-handler . g11026) (raise-continuable . g11025) (raise . g11024) (make-enumeration . g11023) (enum-set=? . g11022) (enum-set-universe . g11021) (enum-set-union . g11020) (enum-set-subset? . g11019) (enum-set-projection . g11018) (enum-set-member? . g11017) (enum-set-intersection . g11016) (enum-set-indexer . g11015) (enum-set-difference . g11014) (enum-set-constructor . g11013) (enum-set-complement . g11012) (enum-set->list . g11011) (who-condition? . g9629) (warning? . g9495) (violation? . g9558) (undefined-violation? . g9746) (syntax-violation? . g9721) (syntax-violation-subform . g9725) (syntax-violation-form . g9723) (syntax-violation . g2994) (simple-conditions . g11010) (serious-condition? . g9516) (non-continuable-violation? . g9652) (message-condition? . g9472) (make-who-condition . g9625) (make-warning . g9493) (make-violation . g9556) (make-undefined-violation . g9744) (make-syntax-violation . g9715) (make-serious-condition . g9514) (make-non-continuable-violation . g9650) (make-message-condition . g9468) (make-lexical-violation . g9692) (make-irritants-condition . g9599) (make-implementation-restriction-violation . g9671) (make-error . g9535) (make-assertion-violation . g9577) (lexical-violation? . g9694) (irritants-condition? . g9603) (implementation-restriction-violation? . g9673) (error? . g9537) (condition-who . g9631) (condition-predicate . g11009) (condition-message . g9474) (condition-irritants . g9605) (condition-accessor . g11008) (condition . g11007) (assertion-violation? . g9579) (condition? . g11006) (utf32->string . g11005) (utf16->string . g11004) (utf8->string . g11003) (uint-list->bytevector . g11002) (u8-list->bytevector . g11001) (string->utf8 . g11000) (string->utf32 . g10999) (string->utf16 . g10998) (sint-list->bytevector . g10997) (native-endianness . g10996) (bytevector? . g10995) (bytevector=? . g10994) (bytevector-uint-set! . g10993) (bytevector-uint-ref . g10992) (bytevector-u8-set! . g10991) (bytevector-u8-ref . g10990) (bytevector-u64-set! . g10989) (bytevector-u64-ref . g10988) (bytevector-u64-native-set! . g10987) (bytevector-u64-native-ref . g10986) (bytevector-u32-set! . g10985) (bytevector-u32-ref . g10984) (bytevector-u32-native-set! . g10983) (bytevector-u32-native-ref . g10982) (bytevector-u16-set! . g10981) (bytevector-u16-ref . g10980) (bytevector-u16-native-set! . g10979) (bytevector-u16-native-ref . g10978) (bytevector-sint-set! . g10977) (bytevector-sint-ref . g10976) (bytevector-s8-set! . g10975) (bytevector-s8-ref . g10974) (bytevector-s64-set! . g10973) (bytevector-s64-ref . g10972) (bytevector-s64-native-set! . g10971) (bytevector-s64-native-ref . g10970) (bytevector-s32-set! . g10969) (bytevector-s32-ref . g10968) (bytevector-s32-native-set! . g10967) (bytevector-s32-native-ref . g10966) (bytevector-s16-set! . g10965) (bytevector-s16-ref . g10964) (bytevector-s16-native-set! . g10963) (bytevector-s16-native-ref . g10962) (bytevector-length . g10961) (bytevector-ieee-single-ref . g10960) (bytevector-ieee-single-set! . g10959) (bytevector-ieee-single-native-set! . g10958) (bytevector-ieee-single-native-ref . g10957) (bytevector-ieee-double-set! . g10956) (bytevector-ieee-double-ref . g10955) (bytevector-ieee-double-native-set! . g10954) (bytevector-ieee-double-native-ref . g10953) (bytevector-fill! . g10952) (bytevector-copy! . g10951) (bytevector-copy . g10950) (bytevector->uint-list . g10949) (bytevector->u8-list . g10948) (bytevector->sint-list . g10947) (no-nans-violation? . g10060) (no-infinities-violation? . g10039) (make-no-nans-violation . g10058) (make-no-infinities-violation . g10037) (real->flonum . g10946) (flzero? . g10945) (fltruncate . g10944) (fltan . g10943) (flsqrt . g10942) (flsin . g10941) (flround . g10940) (flpositive? . g10939) (flonum? . g10938) (flodd? . g10937) (flnumerator . g10936) (flnegative? . g10935) (flnan? . g10934) (flmod0 . g10933) (flmod . g10932) (flmin . g10931) (flmax . g10930) (fllog . g10929) (flinteger? . g10928) (flinfinite? . g10927) (flfloor . g10926) (flfinite? . g10925) (flexpt . g10924) (flexp . g10923) (fleven? . g10922) (fldiv0-and-mod0 . g10921) (fldiv0 . g10920) (fldiv-and-mod . g10919) (fldiv . g10918) (fldenominator . g10917) (flcos . g10916) (flceiling . g10915) (flatan . g10914) (flasin . g10913) (flacos . g10912) (flabs . g10911) (fl>? . g10910) (fl>=? . g10909) (fl=? . g10908) (fl<? . g10907) (fl<=? . g10906) (fl/ . g10905) (fl- . g10904) (fl+ . g10903) (fl* . g10902) (fixnum->flonum . g10901) (fxzero? . g10900) (fxxor . g10899) (fxrotate-bit-field . g10898) (fxreverse-bit-field . g10897) (fxpositive? . g10896) (fxodd? . g10895) (fxnot . g10894) (fxnegative? . g10893) (fxmod0 . g10892) (fxmod . g10891) (fxmin . g10890) (fxmax . g10889) (fxlength . g10888) (fxior . g10887) (fxif . g10886) (fxfirst-bit-set . g10885) (fxeven? . g10884) (fxdiv0-and-mod0 . g10883) (fxdiv0 . g10882) (fxdiv-and-mod . g10881) (fxdiv . g10880) (fxcopy-bit-field . g10879) (fxcopy-bit . g10878) (fxbit-set? . g10877) (fxbit-field . g10876) (fxbit-count . g10875) (fxarithmetic-shift-right . g10874) (fxarithmetic-shift-left . g10873) (fxarithmetic-shift . g10872) (fxand . g10871) (fx>? . g10870) (fx>=? . g10869) (fx=? . g10868) (fx<? . g10867) (fx<=? . g10866) (fx-/carry . g10865) (fx- . g10864) (fx+/carry . g10863) (fx+ . g10862) (fx*/carry . g10861) (fx* . g10860) (greatest-fixnum . g10859) (least-fixnum . g10858) (fixnum-width . g10857) (fixnum? . g10856) (bitwise-rotate-bit-field . g10855) (bitwise-reverse-bit-field . g10854) (bitwise-length . g10853) (bitwise-if . g10852) (bitwise-first-bit-set . g10851) (bitwise-copy-bit-field . g10850) (bitwise-copy-bit . g10849) (bitwise-bit-set? . g10848) (bitwise-bit-field . g10847) (bitwise-bit-count . g10846) (bitwise-xor . g10845) (bitwise-ior . g10844) (bitwise-and . g10843) (bitwise-not . g10842) (bitwise-arithmetic-shift-right . g10841) (bitwise-arithmetic-shift-left . g10840) (bitwise-arithmetic-shift . g10839) (zero? . g10838) (vector? . g10837) (vector-set! . g10836) (vector-ref . g10835) (vector-map . g10834) (vector-length . g10833) (vector-for-each . g10832) (vector-fill! . g10831) (vector->list . g10830) (vector . g10829) (values . g10828) (truncate . g10827) (tan . g10826) (symbol? . g10825) (symbol=? . g10824) (symbol->string . g10823) (substring . g10822) (string? . g10821) (string>? . g10820) (string>=? . g10819) (string=? . g10818) (string<? . g10817) (string<=? . g10816) (string-ref . g10815) (string-length . g10814) (string-for-each . g10813) (string-copy . g10812) (string-append . g10811) (string->symbol . g10810) (string->number . g10809) (string->list . g10808) (string . g10807) (sqrt . g10806) (sin . g10805) (round . g10804) (reverse . g10803) (real? . g10802) (real-valued? . g10801) (real-part . g10800) (rationalize . g10799) (rational? . g10798) (rational-valued? . g10797) (procedure? . g10796) (positive? . g10795) (pair? . g10794) (odd? . g10793) (numerator . g10792) (number? . g10791) (number->string . g10790) (null? . g10789) (not . g10788) (negative? . g10787) (nan? . g10786) (min . g10785) (max . g10784) (map . g10783) (make-vector . g10782) (make-string . g10781) (make-rectangular . g10780) (make-polar . g10779) (magnitude . g10778) (log . g10777) (list? . g10776) (list-tail . g10775) (list-ref . g10774) (list->vector . g10773) (list->string . g10772) (list . g10771) (length . g10770) (lcm . g10769) (integer? . g10768) (integer-valued? . g10767) (integer->char . g10766) (infinite? . g10765) (inexact? . g10764) (inexact . g10763) (imag-part . g10762) (gcd . g10761) (for-each . g10760) (floor . g10759) (finite? . g10758) (expt . g10757) (exp . g10756) (exact? . g10755) (exact-integer-sqrt . g10754) (exact . g10753) (even? . g10752) (error . g10751) (eqv? . g10750) (equal? . g10749) (eq? . g10748) (dynamic-wind . g10747) (div0-and-mod0 . g10746) (mod0 . g10745) (div0 . g10744) (div-and-mod . g10743) (mod . g10742) (div . g10741) (denominator . g10740) (cos . g10739) (cons . g10738) (complex? . g10737) (char? . g10736) (char>? . g10735) (char>=? . g10734) (char=? . g10733) (char<? . g10732) (char<=? . g10731) (char->integer . g10730) (ceiling . g10729) (call-with-values . g10728) (call/cc . g10727) (call-with-current-continuation . g10726) (cddddr . g10725) (cdddar . g10724) (cddadr . g10723) (cddaar . g10722) (cdaddr . g10721) (cdadar . g10720) (cdaadr . g10719) (cdaaar . g10718) (cadddr . g10717) (caddar . g10716) (cadadr . g10715) (cadaar . g10714) (caaddr . g10713) (caadar . g10712) (caaadr . g10711) (caaaar . g10710) (cdddr . g10709) (cddar . g10708) (cdadr . g10707) (cdaar . g10706) (caddr . g10705) (cadar . g10704) (caadr . g10703) (caaar . g10702) (cddr . g10701) (cdar . g10700) (cadr . g10699) (caar . g10698) (cdr . g10697) (car . g10696) (boolean? . g10695) (boolean=? . g10694) (atan . g10693) (assertion-violation . g10692) (asin . g10691) (apply . g10690) (append . g10689) (angle . g10688) (acos . g10687) (abs . g10686) (/ . g10685) (* . g10684) (- . g10683) (+ . g10682) (>= . g10681) (> . g10680) (= . g10679) (<= . g10678) (< . g10677) (&no-nans . g10675) (&no-infinities . g10674) (&i/o-encoding . g10673) (&i/o-decoding . g10672) (&i/o-port . g10671) (&i/o-file-does-not-exist . g10670) (&i/o-file-already-exists . g10669) (&i/o-file-is-read-only . g10668) (&i/o-file-protection . g10667) (&i/o-filename . g10666) (&i/o-invalid-position . g10665) (&i/o-write . g10664) (&i/o-read . g10663) (&i/o . g10662) (&undefined . g10661) (&syntax . g10660) (&lexical . g10659) (&implementation-restriction . g10658) (&non-continuable . g10657) (&who . g10656) (&irritants . g10655) (&assertion . g10654) (&violation . g10653) (&error . g10652) (&serious . g10651) (&warning . g10650) (&message . g10649) (&condition . g10648) (define-condition-type . g10647) (define-enumeration . g10646) (define-record-type . g10645) (parent-rtd . g10644) (nongenerative . g10643) (opaque . g10642) (sealed . g10641) (protocol . g10640) (parent . g10639) (immutable . g10638) (mutable . g10637) (fields . g10636) (error-handling-mode . g10635) (file-options . g10634) (buffer-mode . g10633) (eol-style . g10632) (guard . g10631) (unsyntax-splicing . g10628) (unsyntax . g10627) (unquote-splicing . g10626) (unquote . g10625) (_ . g10624) (else . g10623) (=> . g10622) (... . g10621) (assert . g10620) (endianness . g10619) (do . g10616) (cond . g10615) (let* . g10614) (let . g10613) (let*-values . g10612) (let-values . g10611) (identifier-syntax . g10610) (with-syntax . g10609) (quasisyntax . g10608) (quasiquote . g10607) (syntax-rules . g10606) (record-constructor-descriptor . g10603) (record-type-descriptor . g10602) (case . g10601) (unless . g10599) (when . g10598) (or . g10597) (and . g10596) (if . g10595) (letrec* . g10594) (letrec . g10593) (case-lambda . g10591) (lambda . g10590) (syntax . g10589) (syntax-case . g10588) (quote . g10587) (letrec-syntax . g10585) (let-syntax . g10584) (set! . g10583) (begin . g10581) (define-syntax . g10579) (define . g10578)) '() values values '#f '#f '#t '#f) (g1789@g1442@install-library 'g11291 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . g2958) (quotient . g11064) (null-environment . g2956) (remainder . g11063) (modulo . g11062) (inexact->exact . g11061) (force . g11060) (exact->inexact . g11059) (make-promise . g11058) (delay . g10618)) '() values values '#f '#f '#t '#f) (g1789@g1442@install-library 'g11292 '(rnrs control) '(6) '() '() '() '((do . g10616) (unless . g10599) (when . g10598) (case-lambda . g10591)) '() values values '#f '#f '#t '#f) (g1789@g1442@install-library 'g11293 '(rnrs eval) '(6) '() '() '() '((eval . g2962) (environment . g2954)) '() values values '#f '#f '#t '#f) (g1789@g1442@install-library 'g11294 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . g11054) (set-car! . g11053)) '() values values '#f '#f '#t '#f) (g1789@g1442@install-library 'g11295 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . g11056) (string-set! . g11055)) '() values values '#f '#f '#t '#f) (g1789@g1442@install-library 'g11296 '(rnrs programs) '(6) '() '() '() '((exit . g11057) (command-line . g10327)) '() values values '#f '#f '#t '#f) (g1789@g1442@install-library 'g11297 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . g2320) (identifier? . g2996) (generate-temporaries . g2976) (free-identifier=? . g2978) (syntax->datum . g3000) (datum->syntax . g2998) (bound-identifier=? . g2980) (syntax-violation . g2994) (unsyntax-splicing . g10628) (unsyntax . g10627) (_ . g10624) (... . g10621) (with-syntax . g10609) (quasisyntax . g10608) (syntax . g10589) (syntax-case . g10588)) '() values values '#f '#f '#t '#f) (g1789@g1442@install-library 'g11298 '(rnrs files) '(6) '() '() '() '((delete-file . g11169) (file-exists? . g11168) (make-i/o-write-error . g9807) (make-i/o-read-error . g9786) (make-i/o-port-error . g9965) (make-i/o-invalid-position-error . g9829) (make-i/o-filename-error . g9855) (make-i/o-file-protection-error . g9880) (make-i/o-file-is-read-only-error . g9901) (make-i/o-file-does-not-exist-error . g9943) (make-i/o-file-already-exists-error . g9922) (make-i/o-error . g9765) (i/o-write-error? . g9809) (i/o-read-error? . g9788) (i/o-port-error? . g9969) (i/o-invalid-position-error? . g9833) (i/o-filename-error? . g9859) (i/o-file-protection-error? . g9882) (i/o-file-is-read-only-error? . g9903) (i/o-file-does-not-exist-error? . g9945) (i/o-file-already-exists-error? . g9924) (i/o-error? . g9767) (i/o-error-position . g9835) (i/o-error-port . g9971) (i/o-error-filename . g9861) (&i/o-port . g10671) (&i/o-file-does-not-exist . g10670) (&i/o-file-already-exists . g10669) (&i/o-file-is-read-only . g10668) (&i/o-file-protection . g10667) (&i/o-filename . g10666) (&i/o-invalid-position . g10665) (&i/o-write . g10664) (&i/o-read . g10663) (&i/o . g10662)) '() values values '#f '#f '#t '#f) (g1789@g1442@install-library 'g11299 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . g11167) (vector-sort . g11166) (list-sort . g11165)) '() values values '#f '#f '#t '#f) (g1789@g1442@install-library 'g11300 '(rnrs base) '(6) '() '() '() '((zero? . g10838) (vector? . g10837) (vector-set! . g10836) (vector-ref . g10835) (vector-map . g10834) (vector-length . g10833) (vector-for-each . g10832) (vector-fill! . g10831) (vector->list . g10830) (vector . g10829) (values . g10828) (truncate . g10827) (tan . g10826) (symbol? . g10825) (symbol=? . g10824) (symbol->string . g10823) (substring . g10822) (string? . g10821) (string>? . g10820) (string>=? . g10819) (string=? . g10818) (string<? . g10817) (string<=? . g10816) (string-ref . g10815) (string-length . g10814) (string-for-each . g10813) (string-copy . g10812) (string-append . g10811) (string->symbol . g10810) (string->number . g10809) (string->list . g10808) (string . g10807) (sqrt . g10806) (sin . g10805) (round . g10804) (reverse . g10803) (real? . g10802) (real-valued? . g10801) (real-part . g10800) (rationalize . g10799) (rational? . g10798) (rational-valued? . g10797) (procedure? . g10796) (positive? . g10795) (pair? . g10794) (odd? . g10793) (numerator . g10792) (number? . g10791) (number->string . g10790) (null? . g10789) (not . g10788) (negative? . g10787) (nan? . g10786) (min . g10785) (max . g10784) (map . g10783) (make-vector . g10782) (make-string . g10781) (make-rectangular . g10780) (make-polar . g10779) (magnitude . g10778) (log . g10777) (list? . g10776) (list-tail . g10775) (list-ref . g10774) (list->vector . g10773) (list->string . g10772) (list . g10771) (length . g10770) (lcm . g10769) (integer? . g10768) (integer-valued? . g10767) (integer->char . g10766) (infinite? . g10765) (inexact? . g10764) (inexact . g10763) (imag-part . g10762) (gcd . g10761) (for-each . g10760) (floor . g10759) (finite? . g10758) (expt . g10757) (exp . g10756) (exact? . g10755) (exact-integer-sqrt . g10754) (exact . g10753) (even? . g10752) (error . g10751) (eqv? . g10750) (equal? . g10749) (eq? . g10748) (dynamic-wind . g10747) (div0-and-mod0 . g10746) (mod0 . g10745) (div0 . g10744) (div-and-mod . g10743) (mod . g10742) (div . g10741) (denominator . g10740) (cos . g10739) (cons . g10738) (complex? . g10737) (char? . g10736) (char>? . g10735) (char>=? . g10734) (char=? . g10733) (char<? . g10732) (char<=? . g10731) (char->integer . g10730) (ceiling . g10729) (call-with-values . g10728) (call/cc . g10727) (call-with-current-continuation . g10726) (cddddr . g10725) (cdddar . g10724) (cddadr . g10723) (cddaar . g10722) (cdaddr . g10721) (cdadar . g10720) (cdaadr . g10719) (cdaaar . g10718) (cadddr . g10717) (caddar . g10716) (cadadr . g10715) (cadaar . g10714) (caaddr . g10713) (caadar . g10712) (caaadr . g10711) (caaaar . g10710) (cdddr . g10709) (cddar . g10708) (cdadr . g10707) (cdaar . g10706) (caddr . g10705) (cadar . g10704) (caadr . g10703) (caaar . g10702) (cddr . g10701) (cdar . g10700) (cadr . g10699) (caar . g10698) (cdr . g10697) (car . g10696) (boolean? . g10695) (boolean=? . g10694) (atan . g10693) (assertion-violation . g10692) (asin . g10691) (apply . g10690) (append . g10689) (angle . g10688) (acos . g10687) (abs . g10686) (/ . g10685) (* . g10684) (- . g10683) (+ . g10682) (>= . g10681) (> . g10680) (= . g10679) (<= . g10678) (< . g10677) (unquote-splicing . g10626) (unquote . g10625) (_ . g10624) (else . g10623) (=> . g10622) (... . g10621) (assert . g10620) (cond . g10615) (let* . g10614) (let . g10613) (let*-values . g10612) (let-values . g10611) (identifier-syntax . g10610) (quasiquote . g10607) (syntax-rules . g10606) (case . g10601) (or . g10597) (and . g10596) (if . g10595) (letrec* . g10594) (letrec . g10593) (lambda . g10590) (quote . g10587) (letrec-syntax . g10585) (let-syntax . g10584) (set! . g10583) (begin . g10581) (define-syntax . g10579) (define . g10578)) '() values values '#f '#f '#t '#f) (g1789@g1442@install-library 'g11301 '(rnrs lists) '(6) '() '() '() '((remove . g11052) (remv . g11051) (remp . g11050) (remq . g11049) (partition . g11048) (memv . g11047) (memq . g11046) (memp . g11045) (member . g11044) (exists . g11043) (for-all . g11042) (fold-right . g11041) (fold-left . g11040) (find . g11039) (filter . g11038) (cons* . g11037) (assv . g11036) (assq . g11035) (assp . g11034) (assoc . g11033)) '() values values '#f '#f '#t '#f) (g1789@g1442@install-library 'g11302 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . g11143) (call-with-input-file . g11142) (write-char . g11141) (write . g11140) (with-output-to-file . g11139) (with-input-from-file . g11138) (read-char . g11137) (read . g11136) (peek-char . g11135) (open-output-file . g11134) (open-input-file . g11133) (newline . g11132) (display . g11131) (close-output-port . g11130) (close-input-port . g11129) (eof-object? . g11128) (eof-object . g11127) (current-error-port . g11126) (current-output-port . g11125) (current-input-port . g11124) (output-port? . g11123) (input-port? . g11122) (make-i/o-write-error . g9807) (make-i/o-read-error . g9786) (make-i/o-port-error . g9965) (make-i/o-invalid-position-error . g9829) (make-i/o-filename-error . g9855) (make-i/o-file-protection-error . g9880) (make-i/o-file-is-read-only-error . g9901) (make-i/o-file-does-not-exist-error . g9943) (make-i/o-file-already-exists-error . g9922) (make-i/o-error . g9765) (i/o-write-error? . g9809) (i/o-read-error? . g9788) (i/o-port-error? . g9969) (i/o-invalid-position-error? . g9833) (i/o-filename-error? . g9859) (i/o-file-protection-error? . g9882) (i/o-file-is-read-only-error? . g9903) (i/o-file-does-not-exist-error? . g9945) (i/o-file-already-exists-error? . g9924) (i/o-error? . g9767) (i/o-error-position . g9835) (i/o-error-port . g9971) (i/o-error-filename . g9861) (&i/o-port . g10671) (&i/o-file-does-not-exist . g10670) (&i/o-file-already-exists . g10669) (&i/o-file-is-read-only . g10668) (&i/o-file-protection . g10667) (&i/o-filename . g10666) (&i/o-invalid-position . g10665) (&i/o-write . g10664) (&i/o-read . g10663) (&i/o . g10662)) '() values values '#f '#f '#t '#f) (g1789@g1442@install-library 'g11303 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . g11080) (utf32->string . g11005) (utf16->string . g11004) (utf8->string . g11003) (uint-list->bytevector . g11002) (u8-list->bytevector . g11001) (string->utf8 . g11000) (string->utf32 . g10999) (string->utf16 . g10998) (sint-list->bytevector . g10997) (native-endianness . g10996) (bytevector? . g10995) (bytevector=? . g10994) (bytevector-uint-set! . g10993) (bytevector-uint-ref . g10992) (bytevector-u8-set! . g10991) (bytevector-u8-ref . g10990) (bytevector-u64-set! . g10989) (bytevector-u64-ref . g10988) (bytevector-u64-native-set! . g10987) (bytevector-u64-native-ref . g10986) (bytevector-u32-set! . g10985) (bytevector-u32-ref . g10984) (bytevector-u32-native-set! . g10983) (bytevector-u32-native-ref . g10982) (bytevector-u16-set! . g10981) (bytevector-u16-ref . g10980) (bytevector-u16-native-set! . g10979) (bytevector-u16-native-ref . g10978) (bytevector-sint-set! . g10977) (bytevector-sint-ref . g10976) (bytevector-s8-set! . g10975) (bytevector-s8-ref . g10974) (bytevector-s64-set! . g10973) (bytevector-s64-ref . g10972) (bytevector-s64-native-set! . g10971) (bytevector-s64-native-ref . g10970) (bytevector-s32-set! . g10969) (bytevector-s32-ref . g10968) (bytevector-s32-native-set! . g10967) (bytevector-s32-native-ref . g10966) (bytevector-s16-set! . g10965) (bytevector-s16-ref . g10964) (bytevector-s16-native-set! . g10963) (bytevector-s16-native-ref . g10962) (bytevector-length . g10961) (bytevector-ieee-single-ref . g10960) (bytevector-ieee-single-set! . g10959) (bytevector-ieee-single-native-set! . g10958) (bytevector-ieee-single-native-ref . g10957) (bytevector-ieee-double-set! . g10956) (bytevector-ieee-double-ref . g10955) (bytevector-ieee-double-native-set! . g10954) (bytevector-ieee-double-native-ref . g10953) (bytevector-fill! . g10952) (bytevector-copy! . g10951) (bytevector-copy . g10950) (bytevector->uint-list . g10949) (bytevector->u8-list . g10948) (bytevector->sint-list . g10947) (endianness . g10619)) '() values values '#f '#f '#t '#f) (g1789@g1442@install-library 'g11304 '(rnrs unicode) '(6) '() '() '() '((string-upcase . g11215) (string-titlecase . g11214) (string-normalize-nfkd . g11213) (string-normalize-nfkc . g11212) (string-normalize-nfd . g11211) (string-normalize-nfc . g11210) (string-foldcase . g11209) (string-downcase . g11208) (string-ci>? . g11207) (string-ci>=? . g11206) (string-ci=? . g11205) (string-ci<? . g11204) (string-ci<=? . g11203) (char-whitespace? . g11202) (char-upper-case? . g11201) (char-title-case? . g11200) (char-numeric? . g11199) (char-lower-case? . g11198) (char-general-category . g11197) (char-upcase . g11196) (char-titlecase . g11195) (char-foldcase . g11194) (char-downcase . g11193) (char-ci>? . g11192) (char-ci>=? . g11191) (char-ci=? . g11190) (char-ci<? . g11189) (char-ci<=? . g11188) (char-alphabetic? . g11187)) '() values values '#f '#f '#t '#f) (g1789@g1442@install-library 'g11305 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . g11026) (raise-continuable . g11025) (raise . g11024) (guard . g10631) (else . g10623) (=> . g10622)) '() values values '#f '#f '#t '#f) (g1789@g1442@install-library 'g11306 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . g10855) (bitwise-reverse-bit-field . g10854) (bitwise-length . g10853) (bitwise-if . g10852) (bitwise-first-bit-set . g10851) (bitwise-copy-bit-field . g10850) (bitwise-copy-bit . g10849) (bitwise-bit-set? . g10848) (bitwise-bit-field . g10847) (bitwise-bit-count . g10846) (bitwise-xor . g10845) (bitwise-ior . g10844) (bitwise-and . g10843) (bitwise-not . g10842) (bitwise-arithmetic-shift-right . g10841) (bitwise-arithmetic-shift-left . g10840) (bitwise-arithmetic-shift . g10839)) '() values values '#f '#f '#t '#f) (g1789@g1442@install-library 'g11307 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . g10900) (fxxor . g10899) (fxrotate-bit-field . g10898) (fxreverse-bit-field . g10897) (fxpositive? . g10896) (fxodd? . g10895) (fxnot . g10894) (fxnegative? . g10893) (fxmod0 . g10892) (fxmod . g10891) (fxmin . g10890) (fxmax . g10889) (fxlength . g10888) (fxior . g10887) (fxif . g10886) (fxfirst-bit-set . g10885) (fxeven? . g10884) (fxdiv0-and-mod0 . g10883) (fxdiv0 . g10882) (fxdiv-and-mod . g10881) (fxdiv . g10880) (fxcopy-bit-field . g10879) (fxcopy-bit . g10878) (fxbit-set? . g10877) (fxbit-field . g10876) (fxbit-count . g10875) (fxarithmetic-shift-right . g10874) (fxarithmetic-shift-left . g10873) (fxarithmetic-shift . g10872) (fxand . g10871) (fx>? . g10870) (fx>=? . g10869) (fx=? . g10868) (fx<? . g10867) (fx<=? . g10866) (fx-/carry . g10865) (fx- . g10864) (fx+/carry . g10863) (fx+ . g10862) (fx*/carry . g10861) (fx* . g10860) (greatest-fixnum . g10859) (least-fixnum . g10858) (fixnum-width . g10857) (fixnum? . g10856)) '() values values '#f '#f '#t '#f) (g1789@g1442@install-library 'g11308 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . g10060) (no-infinities-violation? . g10039) (make-no-nans-violation . g10058) (make-no-infinities-violation . g10037) (real->flonum . g10946) (flzero? . g10945) (fltruncate . g10944) (fltan . g10943) (flsqrt . g10942) (flsin . g10941) (flround . g10940) (flpositive? . g10939) (flonum? . g10938) (flodd? . g10937) (flnumerator . g10936) (flnegative? . g10935) (flnan? . g10934) (flmod0 . g10933) (flmod . g10932) (flmin . g10931) (flmax . g10930) (fllog . g10929) (flinteger? . g10928) (flinfinite? . g10927) (flfloor . g10926) (flfinite? . g10925) (flexpt . g10924) (flexp . g10923) (fleven? . g10922) (fldiv0-and-mod0 . g10921) (fldiv0 . g10920) (fldiv-and-mod . g10919) (fldiv . g10918) (fldenominator . g10917) (flcos . g10916) (flceiling . g10915) (flatan . g10914) (flasin . g10913) (flacos . g10912) (flabs . g10911) (fl>? . g10910) (fl>=? . g10909) (fl=? . g10908) (fl<? . g10907) (fl<=? . g10906) (fl/ . g10905) (fl- . g10904) (fl+ . g10903) (fl* . g10902) (fixnum->flonum . g10901) (&no-nans . g10675) (&no-infinities . g10674)) '() values values '#f '#f '#t '#f) (g1789@g1442@install-library 'g11309 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . g11164) (string-ci-hash . g11163) (string-hash . g11162) (equal-hash . g11161) (hashtable-equivalence-function . g11160) (make-hashtable . g11159) (hashtable-hash-function . g11158) (make-eqv-hashtable . g11157) (make-eq-hashtable . g11156) (hashtable? . g11155) (hashtable-update! . g11154) (hashtable-size . g11153) (hashtable-set! . g11152) (hashtable-ref . g11151) (hashtable-mutable? . g11150) (hashtable-keys . g11149) (hashtable-entries . g11148) (hashtable-delete! . g11147) (hashtable-copy . g11146) (hashtable-contains? . g11145) (hashtable-clear! . g11144)) '() values values '#f '#f '#t '#f) (g1789@g1442@install-library 'g11310 '(rnrs io ports) '(6) '() '() '() '((eof-object? . g11128) (eof-object . g11127) (current-error-port . g11126) (current-output-port . g11125) (current-input-port . g11124) (output-port? . g11123) (input-port? . g11122) (utf-8-codec . g11121) (utf-16-codec . g11120) (transcoder-error-handling-mode . g11119) (transcoder-eol-style . g11118) (transcoder-codec . g11117) (transcoded-port . g11116) (textual-port? . g11115) (string->bytevector . g11114) (standard-output-port . g11113) (standard-input-port . g11112) (standard-error-port . g11111) (set-port-position! . g11110) (put-u8 . g11109) (put-string . g11108) (put-datum . g11107) (put-char . g11106) (put-bytevector . g11105) (port? . g11104) (port-transcoder . g11103) (port-position . g11102) (port-has-set-port-position!? . g11101) (port-has-port-position? . g11100) (port-eof? . g11099) (output-port-buffer-mode . g11098) (open-string-output-port . g11097) (open-string-input-port . g11096) (open-file-output-port . g11095) (open-file-input/output-port . g11094) (open-file-input-port . g11093) (open-bytevector-output-port . g11092) (open-bytevector-input-port . g11091) (native-transcoder . g11090) (native-eol-style . g11089) (make-transcoder . g11088) (latin-1-codec . g11087) (make-i/o-write-error . g9807) (make-i/o-read-error . g9786) (make-i/o-port-error . g9965) (make-i/o-invalid-position-error . g9829) (make-i/o-filename-error . g9855) (make-i/o-file-protection-error . g9880) (make-i/o-file-is-read-only-error . g9901) (make-i/o-file-does-not-exist-error . g9943) (make-i/o-file-already-exists-error . g9922) (make-i/o-error . g9765) (make-i/o-encoding-error . g10012) (make-i/o-decoding-error . g9990) (make-custom-textual-output-port . g11086) (make-custom-textual-input/output-port . g11085) (make-custom-textual-input-port . g11084) (make-custom-binary-output-port . g11083) (make-custom-binary-input/output-port . g11082) (make-custom-binary-input-port . g11081) (lookahead-u8 . g11079) (lookahead-char . g11078) (i/o-write-error? . g9809) (i/o-read-error? . g9788) (i/o-port-error? . g9969) (i/o-invalid-position-error? . g9833) (i/o-filename-error? . g9859) (i/o-file-protection-error? . g9882) (i/o-file-is-read-only-error? . g9903) (i/o-file-does-not-exist-error? . g9945) (i/o-file-already-exists-error? . g9924) (i/o-error? . g9767) (i/o-error-position . g9835) (i/o-error-port . g9971) (i/o-error-filename . g9861) (i/o-encoding-error? . g10016) (i/o-encoding-error-char . g10018) (i/o-decoding-error? . g9992) (get-u8 . g11077) (get-string-n! . g11076) (get-string-n . g11075) (get-string-all . g11074) (get-line . g11073) (get-datum . g11072) (get-char . g11071) (get-bytevector-some . g11070) (get-bytevector-n! . g11069) (get-bytevector-n . g11068) (get-bytevector-all . g11067) (flush-output-port . g11066) (close-port . g11065) (call-with-string-output-port . g11032) (call-with-port . g11031) (call-with-bytevector-output-port . g11030) (bytevector->string . g11029) (buffer-mode? . g11028) (binary-port? . g11027) (&i/o-encoding . g10673) (&i/o-decoding . g10672) (&i/o-port . g10671) (&i/o-file-does-not-exist . g10670) (&i/o-file-already-exists . g10669) (&i/o-file-is-read-only . g10668) (&i/o-file-protection . g10667) (&i/o-filename . g10666) (&i/o-invalid-position . g10665) (&i/o-write . g10664) (&i/o-read . g10663) (&i/o . g10662) (error-handling-mode . g10635) (file-options . g10634) (buffer-mode . g10633) (eol-style . g10632)) '() values values '#f '#f '#t '#f) (g1789@g1442@install-library 'g11311 '(rnrs enums) '(6) '() '() '() '((make-enumeration . g11023) (enum-set=? . g11022) (enum-set-universe . g11021) (enum-set-union . g11020) (enum-set-subset? . g11019) (enum-set-projection . g11018) (enum-set-member? . g11017) (enum-set-intersection . g11016) (enum-set-indexer . g11015) (enum-set-difference . g11014) (enum-set-constructor . g11013) (enum-set-complement . g11012) (enum-set->list . g11011) (define-enumeration . g10646)) '() values values '#f '#f '#t '#f) (g1789@g1442@install-library 'g11312 '(rnrs conditions) '(6) '() '() '() '((who-condition? . g9629) (warning? . g9495) (violation? . g9558) (undefined-violation? . g9746) (syntax-violation? . g9721) (syntax-violation-subform . g9725) (syntax-violation-form . g9723) (syntax-violation . g2994) (simple-conditions . g11010) (serious-condition? . g9516) (non-continuable-violation? . g9652) (message-condition? . g9472) (make-who-condition . g9625) (make-warning . g9493) (make-violation . g9556) (make-undefined-violation . g9744) (make-syntax-violation . g9715) (make-serious-condition . g9514) (make-non-continuable-violation . g9650) (make-message-condition . g9468) (make-lexical-violation . g9692) (make-irritants-condition . g9599) (make-implementation-restriction-violation . g9671) (make-error . g9535) (make-assertion-violation . g9577) (lexical-violation? . g9694) (irritants-condition? . g9603) (implementation-restriction-violation? . g9673) (error? . g9537) (condition-who . g9631) (condition-predicate . g11009) (condition-message . g9474) (condition-irritants . g9605) (condition-accessor . g11008) (condition . g11007) (assertion-violation? . g9579) (condition? . g11006) (&undefined . g10661) (&syntax . g10660) (&lexical . g10659) (&implementation-restriction . g10658) (&non-continuable . g10657) (&who . g10656) (&irritants . g10655) (&assertion . g10654) (&violation . g10653) (&error . g10652) (&serious . g10651) (&warning . g10650) (&message . g10649) (&condition . g10648) (define-condition-type . g10647)) '() values values '#f '#f '#t '#f) (g1789@g1442@install-library 'g11313 '(rnrs records inspection) '(6) '() '() '() '((record? . g11179) (record-type-uid . g11178) (record-type-sealed? . g11177) (record-type-parent . g11176) (record-type-opaque? . g11175) (record-type-name . g11174) (record-type-generative? . g11173) (record-type-field-names . g11172) (record-rtd . g11171) (record-field-mutable? . g11170)) '() values values '#f '#f '#t '#f) (g1789@g1442@install-library 'g11314 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . g11186) (record-predicate . g11185) (record-mutator . g11184) (record-constructor . g11183) (record-accessor . g11182) (make-record-type-descriptor . g11181) (make-record-constructor-descriptor . g11180)) '() values values '#f '#f '#t '#f) (g1789@g1442@install-library 'g11315 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . g10645) (parent-rtd . g10644) (nongenerative . g10643) (opaque . g10642) (sealed . g10641) (protocol . g10640) (parent . g10639) (immutable . g10638) (mutable . g10637) (fields . g10636) (record-constructor-descriptor . g10603) (record-type-descriptor . g10602)) '() values values '#f '#f '#t '#f) (g1789@g1442@install-library 'g11316 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . g10064) (&no-nans-rtd . g10062) (&no-infinities-rcd . g10043) (&no-infinities-rtd . g10041) (&i/o-encoding-rcd . g10022) (&i/o-encoding-rtd . g10020) (&i/o-decoding-rcd . g9996) (&i/o-decoding-rtd . g9994) (&i/o-port-rcd . g9975) (&i/o-port-rtd . g9973) (&i/o-file-does-not-exist-rcd . g9949) (&i/o-file-does-not-exist-rtd . g9947) (&i/o-file-already-exists-rcd . g9928) (&i/o-file-already-exists-rtd . g9926) (&i/o-file-is-read-only-rcd . g9907) (&i/o-file-is-read-only-rtd . g9905) (&i/o-file-protection-rcd . g9886) (&i/o-file-protection-rtd . g9884) (&i/o-filename-rcd . g9865) (&i/o-filename-rtd . g9863) (&i/o-invalid-position-rcd . g9839) (&i/o-invalid-position-rtd . g9837) (&i/o-write-rcd . g9813) (&i/o-write-rtd . g9811) (&i/o-read-rcd . g9792) (&i/o-read-rtd . g9790) (&i/o-rcd . g9771) (&i/o-rtd . g9769) (&undefined-rcd . g9750) (&undefined-rtd . g9748) (&syntax-rcd . g9729) (&syntax-rtd . g9727) (&lexical-rcd . g9698) (&lexical-rtd . g9696) (&implementation-restriction-rcd . g9677) (&implementation-restriction-rtd . g9675) (&non-continuable-rcd . g9656) (&non-continuable-rtd . g9654) (&who-rcd . g9635) (&who-rtd . g9633) (&irritants-rcd . g9609) (&irritants-rtd . g9607) (&assertion-rcd . g9583) (&assertion-rtd . g9581) (&violation-rcd . g9562) (&violation-rtd . g9560) (&error-rcd . g9541) (&error-rtd . g9539) (&serious-rcd . g9520) (&serious-rtd . g9518) (&warning-rcd . g9499) (&warning-rtd . g9497) (&message-rcd . g9478) (&message-rtd . g9476) (&condition-rcd . g9387) (&condition-rtd . g9385) (syntax-error . g2990) (syntax-dispatch . g2761) (pretty-print . g11284) (eval-core . g11283) (set-symbol-value! . g11282) (symbol-value . g11281) (gensym . g912) (void . g11280) (load . g10333) (interaction-environment . g3006) (char-ready? . g11279) (regexp? . g11278) (read-line . g11277) (ungensym . g11276) (alist->eq-hash-table . g11275) (assoc-ref . g11274) (print . g11273) (format . g11272) (host-os . g11271) (library-path . g1409) (standard-library-path . g11270) (file-newer? . g11269) (stat-mtime . g11268) (write-to-file . g11267) (file->list . g11266) (file->string . g11265) (digit->integer . g11264) (call-with-string-input-port . g11263) (call-with-string-io . g11262) (string-split . g11261) (bytevector-for-each . g11260) (string->regexp . g11259) (rxmatch . g11258) (regexp-replace-all . g11257) (hashtable-for-each . g11256) (call-process . g11255) (local-tz-offset . g11254) (microseconds . g11253) (readdir . g11252) (set-current-directory! . g11251) (expand-path . g11250) (current-directory . g11249) (%spawn . g11248) (%waitpid . g11247) (%ffi-supported? . g11246) (%ffi-pointer-ref . g11245) (%ffi-pointer->string . g11244) (%ffi-call->string-or-zero . g11243) (%ffi-call->double . g11242) (%ffi-call->void* . g11241) (%ffi-call->void . g11240) (%ffi-call->int . g11239) (%ffi-lookup . g11238) (%ffi-open . g11237) (%fork . g11236) (%pipe . g11235) (p . g11234) (open-output-string . g11233) (get-output-string . g11232) (get-environment-variables . g11231) (get-environment-variable . g11230) (get-timeofday . g11229) (get-command-line . g11228) (sys-display . g11227) (mosh-executable-path . g11226) (make-file-options . g11225) (source-info . g11224) (make-compiler-instruction . g11223) (make-instruction . g11222) (set-source-info! . g11221) (bignum? . g11220) (fast-equal? . g11219) (fasl-read . g11218) (fasl-write . g11217) (time-usage . g11216) (make-parameter . g940) (string-upcase . g11215) (string-titlecase . g11214) (string-normalize-nfkd . g11213) (string-normalize-nfkc . g11212) (string-normalize-nfd . g11211) (string-normalize-nfc . g11210) (string-foldcase . g11209) (string-downcase . g11208) (string-ci>? . g11207) (string-ci>=? . g11206) (string-ci=? . g11205) (string-ci<? . g11204) (string-ci<=? . g11203) (char-whitespace? . g11202) (char-upper-case? . g11201) (char-title-case? . g11200) (char-numeric? . g11199) (char-lower-case? . g11198) (char-general-category . g11197) (char-upcase . g11196) (char-titlecase . g11195) (char-foldcase . g11194) (char-downcase . g11193) (char-ci>? . g11192) (char-ci>=? . g11191) (char-ci=? . g11190) (char-ci<? . g11189) (char-ci<=? . g11188) (char-alphabetic? . g11187) (make-variable-transformer . g2320) (identifier? . g2996) (generate-temporaries . g2976) (free-identifier=? . g2978) (syntax->datum . g3000) (datum->syntax . g2998) (bound-identifier=? . g2980) (record-type-descriptor? . g11186) (record-predicate . g11185) (record-mutator . g11184) (record-constructor . g11183) (record-accessor . g11182) (make-record-type-descriptor . g11181) (make-record-constructor-descriptor . g11180) (record? . g11179) (record-type-uid . g11178) (record-type-sealed? . g11177) (record-type-parent . g11176) (record-type-opaque? . g11175) (record-type-name . g11174) (record-type-generative? . g11173) (record-type-field-names . g11172) (record-rtd . g11171) (record-field-mutable? . g11170) (delete-file . g11169) (file-exists? . g11168) (vector-sort! . g11167) (vector-sort . g11166) (list-sort . g11165) (symbol-hash . g11164) (string-ci-hash . g11163) (string-hash . g11162) (equal-hash . g11161) (hashtable-equivalence-function . g11160) (make-hashtable . g11159) (hashtable-hash-function . g11158) (make-eqv-hashtable . g11157) (make-eq-hashtable . g11156) (hashtable? . g11155) (hashtable-update! . g11154) (hashtable-size . g11153) (hashtable-set! . g11152) (hashtable-ref . g11151) (hashtable-mutable? . g11150) (hashtable-keys . g11149) (hashtable-entries . g11148) (hashtable-delete! . g11147) (hashtable-copy . g11146) (hashtable-contains? . g11145) (hashtable-clear! . g11144) (call-with-output-file . g11143) (call-with-input-file . g11142) (write-char . g11141) (write . g11140) (with-output-to-file . g11139) (with-input-from-file . g11138) (read-char . g11137) (read . g11136) (peek-char . g11135) (open-output-file . g11134) (open-input-file . g11133) (newline . g11132) (display . g11131) (close-output-port . g11130) (close-input-port . g11129) (eof-object? . g11128) (eof-object . g11127) (current-error-port . g11126) (current-output-port . g11125) (current-input-port . g11124) (output-port? . g11123) (input-port? . g11122) (utf-8-codec . g11121) (utf-16-codec . g11120) (transcoder-error-handling-mode . g11119) (transcoder-eol-style . g11118) (transcoder-codec . g11117) (transcoded-port . g11116) (textual-port? . g11115) (string->bytevector . g11114) (standard-output-port . g11113) (standard-input-port . g11112) (standard-error-port . g11111) (set-port-position! . g11110) (put-u8 . g11109) (put-string . g11108) (put-datum . g11107) (put-char . g11106) (put-bytevector . g11105) (port? . g11104) (port-transcoder . g11103) (port-position . g11102) (port-has-set-port-position!? . g11101) (port-has-port-position? . g11100) (port-eof? . g11099) (output-port-buffer-mode . g11098) (open-string-output-port . g11097) (open-string-input-port . g11096) (open-file-output-port . g11095) (open-file-input/output-port . g11094) (open-file-input-port . g11093) (open-bytevector-output-port . g11092) (open-bytevector-input-port . g11091) (native-transcoder . g11090) (native-eol-style . g11089) (make-transcoder . g11088) (latin-1-codec . g11087) (make-i/o-write-error . g9807) (make-i/o-read-error . g9786) (make-i/o-port-error . g9965) (make-i/o-invalid-position-error . g9829) (make-i/o-filename-error . g9855) (make-i/o-file-protection-error . g9880) (make-i/o-file-is-read-only-error . g9901) (make-i/o-file-does-not-exist-error . g9943) (make-i/o-file-already-exists-error . g9922) (make-i/o-error . g9765) (make-i/o-encoding-error . g10012) (make-i/o-decoding-error . g9990) (make-custom-textual-output-port . g11086) (make-custom-textual-input/output-port . g11085) (make-custom-textual-input-port . g11084) (make-custom-binary-output-port . g11083) (make-custom-binary-input/output-port . g11082) (make-custom-binary-input-port . g11081) (make-bytevector . g11080) (lookahead-u8 . g11079) (lookahead-char . g11078) (i/o-write-error? . g9809) (i/o-read-error? . g9788) (i/o-port-error? . g9969) (i/o-invalid-position-error? . g9833) (i/o-filename-error? . g9859) (i/o-file-protection-error? . g9882) (i/o-file-is-read-only-error? . g9903) (i/o-file-does-not-exist-error? . g9945) (i/o-file-already-exists-error? . g9924) (i/o-error? . g9767) (i/o-error-position . g9835) (i/o-error-port . g9971) (i/o-error-filename . g9861) (i/o-encoding-error? . g10016) (i/o-encoding-error-char . g10018) (i/o-decoding-error? . g9992) (get-u8 . g11077) (get-string-n! . g11076) (get-string-n . g11075) (get-string-all . g11074) (get-line . g11073) (get-datum . g11072) (get-char . g11071) (get-bytevector-some . g11070) (get-bytevector-n! . g11069) (get-bytevector-n . g11068) (get-bytevector-all . g11067) (flush-output-port . g11066) (close-port . g11065) (scheme-report-environment . g2958) (quotient . g11064) (null-environment . g2956) (remainder . g11063) (modulo . g11062) (inexact->exact . g11061) (force . g11060) (exact->inexact . g11059) (make-promise . g11058) (exit . g11057) (command-line . g10327) (string-fill! . g11056) (string-set! . g11055) (set-cdr! . g11054) (set-car! . g11053) (remove . g11052) (remv . g11051) (remp . g11050) (remq . g11049) (partition . g11048) (memv . g11047) (memq . g11046) (memp . g11045) (member . g11044) (exists . g11043) (for-all . g11042) (fold-right . g11041) (fold-left . g11040) (find . g11039) (filter . g11038) (cons* . g11037) (assv . g11036) (assq . g11035) (assp . g11034) (assoc . g11033) (call-with-string-output-port . g11032) (call-with-port . g11031) (call-with-bytevector-output-port . g11030) (bytevector->string . g11029) (buffer-mode? . g11028) (binary-port? . g11027) (with-exception-handler . g11026) (raise-continuable . g11025) (raise . g11024) (eval . g2962) (environment . g2954) (make-enumeration . g11023) (enum-set=? . g11022) (enum-set-universe . g11021) (enum-set-union . g11020) (enum-set-subset? . g11019) (enum-set-projection . g11018) (enum-set-member? . g11017) (enum-set-intersection . g11016) (enum-set-indexer . g11015) (enum-set-difference . g11014) (enum-set-constructor . g11013) (enum-set-complement . g11012) (enum-set->list . g11011) (who-condition? . g9629) (warning? . g9495) (violation? . g9558) (undefined-violation? . g9746) (syntax-violation? . g9721) (syntax-violation-subform . g9725) (syntax-violation-form . g9723) (syntax-violation . g2994) (simple-conditions . g11010) (serious-condition? . g9516) (non-continuable-violation? . g9652) (message-condition? . g9472) (make-who-condition . g9625) (make-warning . g9493) (make-violation . g9556) (make-undefined-violation . g9744) (make-syntax-violation . g9715) (make-serious-condition . g9514) (make-non-continuable-violation . g9650) (make-message-condition . g9468) (make-lexical-violation . g9692) (make-irritants-condition . g9599) (make-implementation-restriction-violation . g9671) (make-error . g9535) (make-assertion-violation . g9577) (lexical-violation? . g9694) (irritants-condition? . g9603) (implementation-restriction-violation? . g9673) (error? . g9537) (condition-who . g9631) (condition-predicate . g11009) (condition-message . g9474) (condition-irritants . g9605) (condition-accessor . g11008) (condition . g11007) (assertion-violation? . g9579) (condition? . g11006) (utf32->string . g11005) (utf16->string . g11004) (utf8->string . g11003) (uint-list->bytevector . g11002) (u8-list->bytevector . g11001) (string->utf8 . g11000) (string->utf32 . g10999) (string->utf16 . g10998) (sint-list->bytevector . g10997) (native-endianness . g10996) (bytevector? . g10995) (bytevector=? . g10994) (bytevector-uint-set! . g10993) (bytevector-uint-ref . g10992) (bytevector-u8-set! . g10991) (bytevector-u8-ref . g10990) (bytevector-u64-set! . g10989) (bytevector-u64-ref . g10988) (bytevector-u64-native-set! . g10987) (bytevector-u64-native-ref . g10986) (bytevector-u32-set! . g10985) (bytevector-u32-ref . g10984) (bytevector-u32-native-set! . g10983) (bytevector-u32-native-ref . g10982) (bytevector-u16-set! . g10981) (bytevector-u16-ref . g10980) (bytevector-u16-native-set! . g10979) (bytevector-u16-native-ref . g10978) (bytevector-sint-set! . g10977) (bytevector-sint-ref . g10976) (bytevector-s8-set! . g10975) (bytevector-s8-ref . g10974) (bytevector-s64-set! . g10973) (bytevector-s64-ref . g10972) (bytevector-s64-native-set! . g10971) (bytevector-s64-native-ref . g10970) (bytevector-s32-set! . g10969) (bytevector-s32-ref . g10968) (bytevector-s32-native-set! . g10967) (bytevector-s32-native-ref . g10966) (bytevector-s16-set! . g10965) (bytevector-s16-ref . g10964) (bytevector-s16-native-set! . g10963) (bytevector-s16-native-ref . g10962) (bytevector-length . g10961) (bytevector-ieee-single-ref . g10960) (bytevector-ieee-single-set! . g10959) (bytevector-ieee-single-native-set! . g10958) (bytevector-ieee-single-native-ref . g10957) (bytevector-ieee-double-set! . g10956) (bytevector-ieee-double-ref . g10955) (bytevector-ieee-double-native-set! . g10954) (bytevector-ieee-double-native-ref . g10953) (bytevector-fill! . g10952) (bytevector-copy! . g10951) (bytevector-copy . g10950) (bytevector->uint-list . g10949) (bytevector->u8-list . g10948) (bytevector->sint-list . g10947) (no-nans-violation? . g10060) (no-infinities-violation? . g10039) (make-no-nans-violation . g10058) (make-no-infinities-violation . g10037) (real->flonum . g10946) (flzero? . g10945) (fltruncate . g10944) (fltan . g10943) (flsqrt . g10942) (flsin . g10941) (flround . g10940) (flpositive? . g10939) (flonum? . g10938) (flodd? . g10937) (flnumerator . g10936) (flnegative? . g10935) (flnan? . g10934) (flmod0 . g10933) (flmod . g10932) (flmin . g10931) (flmax . g10930) (fllog . g10929) (flinteger? . g10928) (flinfinite? . g10927) (flfloor . g10926) (flfinite? . g10925) (flexpt . g10924) (flexp . g10923) (fleven? . g10922) (fldiv0-and-mod0 . g10921) (fldiv0 . g10920) (fldiv-and-mod . g10919) (fldiv . g10918) (fldenominator . g10917) (flcos . g10916) (flceiling . g10915) (flatan . g10914) (flasin . g10913) (flacos . g10912) (flabs . g10911) (fl>? . g10910) (fl>=? . g10909) (fl=? . g10908) (fl<? . g10907) (fl<=? . g10906) (fl/ . g10905) (fl- . g10904) (fl+ . g10903) (fl* . g10902) (fixnum->flonum . g10901) (fxzero? . g10900) (fxxor . g10899) (fxrotate-bit-field . g10898) (fxreverse-bit-field . g10897) (fxpositive? . g10896) (fxodd? . g10895) (fxnot . g10894) (fxnegative? . g10893) (fxmod0 . g10892) (fxmod . g10891) (fxmin . g10890) (fxmax . g10889) (fxlength . g10888) (fxior . g10887) (fxif . g10886) (fxfirst-bit-set . g10885) (fxeven? . g10884) (fxdiv0-and-mod0 . g10883) (fxdiv0 . g10882) (fxdiv-and-mod . g10881) (fxdiv . g10880) (fxcopy-bit-field . g10879) (fxcopy-bit . g10878) (fxbit-set? . g10877) (fxbit-field . g10876) (fxbit-count . g10875) (fxarithmetic-shift-right . g10874) (fxarithmetic-shift-left . g10873) (fxarithmetic-shift . g10872) (fxand . g10871) (fx>? . g10870) (fx>=? . g10869) (fx=? . g10868) (fx<? . g10867) (fx<=? . g10866) (fx-/carry . g10865) (fx- . g10864) (fx+/carry . g10863) (fx+ . g10862) (fx*/carry . g10861) (fx* . g10860) (greatest-fixnum . g10859) (least-fixnum . g10858) (fixnum-width . g10857) (fixnum? . g10856) (bitwise-rotate-bit-field . g10855) (bitwise-reverse-bit-field . g10854) (bitwise-length . g10853) (bitwise-if . g10852) (bitwise-first-bit-set . g10851) (bitwise-copy-bit-field . g10850) (bitwise-copy-bit . g10849) (bitwise-bit-set? . g10848) (bitwise-bit-field . g10847) (bitwise-bit-count . g10846) (bitwise-xor . g10845) (bitwise-ior . g10844) (bitwise-and . g10843) (bitwise-not . g10842) (bitwise-arithmetic-shift-right . g10841) (bitwise-arithmetic-shift-left . g10840) (bitwise-arithmetic-shift . g10839) (zero? . g10838) (vector? . g10837) (vector-set! . g10836) (vector-ref . g10835) (vector-map . g10834) (vector-length . g10833) (vector-for-each . g10832) (vector-fill! . g10831) (vector->list . g10830) (vector . g10829) (values . g10828) (truncate . g10827) (tan . g10826) (symbol? . g10825) (symbol=? . g10824) (symbol->string . g10823) (substring . g10822) (string? . g10821) (string>? . g10820) (string>=? . g10819) (string=? . g10818) (string<? . g10817) (string<=? . g10816) (string-ref . g10815) (string-length . g10814) (string-for-each . g10813) (string-copy . g10812) (string-append . g10811) (string->symbol . g10810) (string->number . g10809) (string->list . g10808) (string . g10807) (sqrt . g10806) (sin . g10805) (round . g10804) (reverse . g10803) (real? . g10802) (real-valued? . g10801) (real-part . g10800) (rationalize . g10799) (rational? . g10798) (rational-valued? . g10797) (procedure? . g10796) (positive? . g10795) (pair? . g10794) (odd? . g10793) (numerator . g10792) (number? . g10791) (number->string . g10790) (null? . g10789) (not . g10788) (negative? . g10787) (nan? . g10786) (min . g10785) (max . g10784) (map . g10783) (make-vector . g10782) (make-string . g10781) (make-rectangular . g10780) (make-polar . g10779) (magnitude . g10778) (log . g10777) (list? . g10776) (list-tail . g10775) (list-ref . g10774) (list->vector . g10773) (list->string . g10772) (list . g10771) (length . g10770) (lcm . g10769) (integer? . g10768) (integer-valued? . g10767) (integer->char . g10766) (infinite? . g10765) (inexact? . g10764) (inexact . g10763) (imag-part . g10762) (gcd . g10761) (for-each . g10760) (floor . g10759) (finite? . g10758) (expt . g10757) (exp . g10756) (exact? . g10755) (exact-integer-sqrt . g10754) (exact . g10753) (even? . g10752) (error . g10751) (eqv? . g10750) (equal? . g10749) (eq? . g10748) (dynamic-wind . g10747) (div0-and-mod0 . g10746) (mod0 . g10745) (div0 . g10744) (div-and-mod . g10743) (mod . g10742) (div . g10741) (denominator . g10740) (cos . g10739) (cons . g10738) (complex? . g10737) (char? . g10736) (char>? . g10735) (char>=? . g10734) (char=? . g10733) (char<? . g10732) (char<=? . g10731) (char->integer . g10730) (ceiling . g10729) (call-with-values . g10728) (call/cc . g10727) (call-with-current-continuation . g10726) (cddddr . g10725) (cdddar . g10724) (cddadr . g10723) (cddaar . g10722) (cdaddr . g10721) (cdadar . g10720) (cdaadr . g10719) (cdaaar . g10718) (cadddr . g10717) (caddar . g10716) (cadadr . g10715) (cadaar . g10714) (caaddr . g10713) (caadar . g10712) (caaadr . g10711) (caaaar . g10710) (cdddr . g10709) (cddar . g10708) (cdadr . g10707) (cdaar . g10706) (caddr . g10705) (cadar . g10704) (caadr . g10703) (caaar . g10702) (cddr . g10701) (cdar . g10700) (cadr . g10699) (caar . g10698) (cdr . g10697) (car . g10696) (boolean? . g10695) (boolean=? . g10694) (atan . g10693) (assertion-violation . g10692) (asin . g10691) (apply . g10690) (append . g10689) (angle . g10688) (acos . g10687) (abs . g10686) (/ . g10685) (* . g10684) (- . g10683) (+ . g10682) (>= . g10681) (> . g10680) (= . g10679) (<= . g10678) (< . g10677) (library . g10676) (&no-nans . g10675) (&no-infinities . g10674) (&i/o-encoding . g10673) (&i/o-decoding . g10672) (&i/o-port . g10671) (&i/o-file-does-not-exist . g10670) (&i/o-file-already-exists . g10669) (&i/o-file-is-read-only . g10668) (&i/o-file-protection . g10667) (&i/o-filename . g10666) (&i/o-invalid-position . g10665) (&i/o-write . g10664) (&i/o-read . g10663) (&i/o . g10662) (&undefined . g10661) (&syntax . g10660) (&lexical . g10659) (&implementation-restriction . g10658) (&non-continuable . g10657) (&who . g10656) (&irritants . g10655) (&assertion . g10654) (&violation . g10653) (&error . g10652) (&serious . g10651) (&warning . g10650) (&message . g10649) (&condition . g10648) (define-condition-type . g10647) (define-enumeration . g10646) (define-record-type . g10645) (parent-rtd . g10644) (nongenerative . g10643) (opaque . g10642) (sealed . g10641) (protocol . g10640) (parent . g10639) (immutable . g10638) (mutable . g10637) (fields . g10636) (error-handling-mode . g10635) (file-options . g10634) (buffer-mode . g10633) (eol-style . g10632) (guard . g10631) (trace-define . g10630) (trace-lambda . g10629) (unsyntax-splicing . g10628) (unsyntax . g10627) (unquote-splicing . g10626) (unquote . g10625) (_ . g10624) (else . g10623) (=> . g10622) (... . g10621) (assert . g10620) (endianness . g10619) (delay . g10618) (time . g10617) (do . g10616) (cond . g10615) (let* . g10614) (let . g10613) (let*-values . g10612) (let-values . g10611) (identifier-syntax . g10610) (with-syntax . g10609) (quasisyntax . g10608) (quasiquote . g10607) (syntax-rules . g10606) (include . g10605) (define-struct . g10604) (record-constructor-descriptor . g10603) (record-type-descriptor . g10602) (case . g10601) (parameterize . g10600) (unless . g10599) (when . g10598) (or . g10597) (and . g10596) (if . g10595) (letrec* . g10594) (letrec . g10593) (type-descriptor . g10592) (case-lambda . g10591) (lambda . g10590) (syntax . g10589) (syntax-case . g10588) (quote . g10587) (foreign-call . g10586) (letrec-syntax . g10585) (let-syntax . g10584) (set! . g10583) (import . g10582) (begin . g10581) (module . g10580) (define-syntax . g10579) (define . g10578)) '((g10064 core-prim . &no-nans-rcd) (g10062 core-prim . &no-nans-rtd) (g10043 core-prim . &no-infinities-rcd) (g10041 core-prim . &no-infinities-rtd) (g10022 core-prim . &i/o-encoding-rcd) (g10020 core-prim . &i/o-encoding-rtd) (g9996 core-prim . &i/o-decoding-rcd) (g9994 core-prim . &i/o-decoding-rtd) (g9975 core-prim . &i/o-port-rcd) (g9973 core-prim . &i/o-port-rtd) (g9949 core-prim . &i/o-file-does-not-exist-rcd) (g9947 core-prim . &i/o-file-does-not-exist-rtd) (g9928 core-prim . &i/o-file-already-exists-rcd) (g9926 core-prim . &i/o-file-already-exists-rtd) (g9907 core-prim . &i/o-file-is-read-only-rcd) (g9905 core-prim . &i/o-file-is-read-only-rtd) (g9886 core-prim . &i/o-file-protection-rcd) (g9884 core-prim . &i/o-file-protection-rtd) (g9865 core-prim . &i/o-filename-rcd) (g9863 core-prim . &i/o-filename-rtd) (g9839 core-prim . &i/o-invalid-position-rcd) (g9837 core-prim . &i/o-invalid-position-rtd) (g9813 core-prim . &i/o-write-rcd) (g9811 core-prim . &i/o-write-rtd) (g9792 core-prim . &i/o-read-rcd) (g9790 core-prim . &i/o-read-rtd) (g9771 core-prim . &i/o-rcd) (g9769 core-prim . &i/o-rtd) (g9750 core-prim . &undefined-rcd) (g9748 core-prim . &undefined-rtd) (g9729 core-prim . &syntax-rcd) (g9727 core-prim . &syntax-rtd) (g9698 core-prim . &lexical-rcd) (g9696 core-prim . &lexical-rtd) (g9677 core-prim . &implementation-restriction-rcd) (g9675 core-prim . &implementation-restriction-rtd) (g9656 core-prim . &non-continuable-rcd) (g9654 core-prim . &non-continuable-rtd) (g9635 core-prim . &who-rcd) (g9633 core-prim . &who-rtd) (g9609 core-prim . &irritants-rcd) (g9607 core-prim . &irritants-rtd) (g9583 core-prim . &assertion-rcd) (g9581 core-prim . &assertion-rtd) (g9562 core-prim . &violation-rcd) (g9560 core-prim . &violation-rtd) (g9541 core-prim . &error-rcd) (g9539 core-prim . &error-rtd) (g9520 core-prim . &serious-rcd) (g9518 core-prim . &serious-rtd) (g9499 core-prim . &warning-rcd) (g9497 core-prim . &warning-rtd) (g9478 core-prim . &message-rcd) (g9476 core-prim . &message-rtd) (g9387 core-prim . &condition-rcd) (g9385 core-prim . &condition-rtd) (g2990 core-prim . syntax-error) (g2761 core-prim . syntax-dispatch) (g11284 core-prim . pretty-print) (g11283 core-prim . eval-core) (g11282 core-prim . set-symbol-value!) (g11281 core-prim . symbol-value) (g912 core-prim . gensym) (g11280 core-prim . void) (g10333 core-prim . load) (g3006 core-prim . interaction-environment) (g11279 core-prim . char-ready?) (g11278 core-prim . regexp?) (g11277 core-prim . read-line) (g11276 core-prim . ungensym) (g11275 core-prim . alist->eq-hash-table) (g11274 core-prim . assoc-ref) (g11273 core-prim . print) (g11272 core-prim . format) (g11271 core-prim . host-os) (g1409 core-prim . library-path) (g11270 core-prim . standard-library-path) (g11269 core-prim . file-newer?) (g11268 core-prim . stat-mtime) (g11267 core-prim . write-to-file) (g11266 core-prim . file->list) (g11265 core-prim . file->string) (g11264 core-prim . digit->integer) (g11263 core-prim . call-with-string-input-port) (g11262 core-prim . call-with-string-io) (g11261 core-prim . string-split) (g11260 core-prim . bytevector-for-each) (g11259 core-prim . string->regexp) (g11258 core-prim . rxmatch) (g11257 core-prim . regexp-replace-all) (g11256 core-prim . hashtable-for-each) (g11255 core-prim . call-process) (g11254 core-prim . local-tz-offset) (g11253 core-prim . microseconds) (g11252 core-prim . readdir) (g11251 core-prim . set-current-directory!) (g11250 core-prim . expand-path) (g11249 core-prim . current-directory) (g11248 core-prim . %spawn) (g11247 core-prim . %waitpid) (g11246 core-prim . %ffi-supported?) (g11245 core-prim . %ffi-pointer-ref) (g11244 core-prim . %ffi-pointer->string) (g11243 core-prim . %ffi-call->string-or-zero) (g11242 core-prim . %ffi-call->double) (g11241 core-prim . %ffi-call->void*) (g11240 core-prim . %ffi-call->void) (g11239 core-prim . %ffi-call->int) (g11238 core-prim . %ffi-lookup) (g11237 core-prim . %ffi-open) (g11236 core-prim . %fork) (g11235 core-prim . %pipe) (g11234 core-prim . p) (g11233 core-prim . open-output-string) (g11232 core-prim . get-output-string) (g11231 core-prim . get-environment-variables) (g11230 core-prim . get-environment-variable) (g11229 core-prim . get-timeofday) (g11228 core-prim . get-command-line) (g11227 core-prim . sys-display) (g11226 core-prim . mosh-executable-path) (g11225 core-prim . make-file-options) (g11224 core-prim . source-info) (g11223 core-prim . make-compiler-instruction) (g11222 core-prim . make-instruction) (g11221 core-prim . set-source-info!) (g11220 core-prim . bignum?) (g11219 core-prim . fast-equal?) (g11218 core-prim . fasl-read) (g11217 core-prim . fasl-write) (g11216 core-prim . time-usage) (g940 core-prim . make-parameter) (g11215 core-prim . string-upcase) (g11214 core-prim . string-titlecase) (g11213 core-prim . string-normalize-nfkd) (g11212 core-prim . string-normalize-nfkc) (g11211 core-prim . string-normalize-nfd) (g11210 core-prim . string-normalize-nfc) (g11209 core-prim . string-foldcase) (g11208 core-prim . string-downcase) (g11207 core-prim . string-ci>?) (g11206 core-prim . string-ci>=?) (g11205 core-prim . string-ci=?) (g11204 core-prim . string-ci<?) (g11203 core-prim . string-ci<=?) (g11202 core-prim . char-whitespace?) (g11201 core-prim . char-upper-case?) (g11200 core-prim . char-title-case?) (g11199 core-prim . char-numeric?) (g11198 core-prim . char-lower-case?) (g11197 core-prim . char-general-category) (g11196 core-prim . char-upcase) (g11195 core-prim . char-titlecase) (g11194 core-prim . char-foldcase) (g11193 core-prim . char-downcase) (g11192 core-prim . char-ci>?) (g11191 core-prim . char-ci>=?) (g11190 core-prim . char-ci=?) (g11189 core-prim . char-ci<?) (g11188 core-prim . char-ci<=?) (g11187 core-prim . char-alphabetic?) (g2320 core-prim . make-variable-transformer) (g2996 core-prim . identifier?) (g2976 core-prim . generate-temporaries) (g2978 core-prim . free-identifier=?) (g3000 core-prim . syntax->datum) (g2998 core-prim . datum->syntax) (g2980 core-prim . bound-identifier=?) (g11186 core-prim . record-type-descriptor?) (g11185 core-prim . record-predicate) (g11184 core-prim . record-mutator) (g11183 core-prim . record-constructor) (g11182 core-prim . record-accessor) (g11181 core-prim . make-record-type-descriptor) (g11180 core-prim . make-record-constructor-descriptor) (g11179 core-prim . record?) (g11178 core-prim . record-type-uid) (g11177 core-prim . record-type-sealed?) (g11176 core-prim . record-type-parent) (g11175 core-prim . record-type-opaque?) (g11174 core-prim . record-type-name) (g11173 core-prim . record-type-generative?) (g11172 core-prim . record-type-field-names) (g11171 core-prim . record-rtd) (g11170 core-prim . record-field-mutable?) (g11169 core-prim . delete-file) (g11168 core-prim . file-exists?) (g11167 core-prim . vector-sort!) (g11166 core-prim . vector-sort) (g11165 core-prim . list-sort) (g11164 core-prim . symbol-hash) (g11163 core-prim . string-ci-hash) (g11162 core-prim . string-hash) (g11161 core-prim . equal-hash) (g11160 core-prim . hashtable-equivalence-function) (g11159 core-prim . make-hashtable) (g11158 core-prim . hashtable-hash-function) (g11157 core-prim . make-eqv-hashtable) (g11156 core-prim . make-eq-hashtable) (g11155 core-prim . hashtable?) (g11154 core-prim . hashtable-update!) (g11153 core-prim . hashtable-size) (g11152 core-prim . hashtable-set!) (g11151 core-prim . hashtable-ref) (g11150 core-prim . hashtable-mutable?) (g11149 core-prim . hashtable-keys) (g11148 core-prim . hashtable-entries) (g11147 core-prim . hashtable-delete!) (g11146 core-prim . hashtable-copy) (g11145 core-prim . hashtable-contains?) (g11144 core-prim . hashtable-clear!) (g11143 core-prim . call-with-output-file) (g11142 core-prim . call-with-input-file) (g11141 core-prim . write-char) (g11140 core-prim . write) (g11139 core-prim . with-output-to-file) (g11138 core-prim . with-input-from-file) (g11137 core-prim . read-char) (g11136 core-prim . read) (g11135 core-prim . peek-char) (g11134 core-prim . open-output-file) (g11133 core-prim . open-input-file) (g11132 core-prim . newline) (g11131 core-prim . display) (g11130 core-prim . close-output-port) (g11129 core-prim . close-input-port) (g11128 core-prim . eof-object?) (g11127 core-prim . eof-object) (g11126 core-prim . current-error-port) (g11125 core-prim . current-output-port) (g11124 core-prim . current-input-port) (g11123 core-prim . output-port?) (g11122 core-prim . input-port?) (g11121 core-prim . utf-8-codec) (g11120 core-prim . utf-16-codec) (g11119 core-prim . transcoder-error-handling-mode) (g11118 core-prim . transcoder-eol-style) (g11117 core-prim . transcoder-codec) (g11116 core-prim . transcoded-port) (g11115 core-prim . textual-port?) (g11114 core-prim . string->bytevector) (g11113 core-prim . standard-output-port) (g11112 core-prim . standard-input-port) (g11111 core-prim . standard-error-port) (g11110 core-prim . set-port-position!) (g11109 core-prim . put-u8) (g11108 core-prim . put-string) (g11107 core-prim . put-datum) (g11106 core-prim . put-char) (g11105 core-prim . put-bytevector) (g11104 core-prim . port?) (g11103 core-prim . port-transcoder) (g11102 core-prim . port-position) (g11101 core-prim . port-has-set-port-position!?) (g11100 core-prim . port-has-port-position?) (g11099 core-prim . port-eof?) (g11098 core-prim . output-port-buffer-mode) (g11097 core-prim . open-string-output-port) (g11096 core-prim . open-string-input-port) (g11095 core-prim . open-file-output-port) (g11094 core-prim . open-file-input/output-port) (g11093 core-prim . open-file-input-port) (g11092 core-prim . open-bytevector-output-port) (g11091 core-prim . open-bytevector-input-port) (g11090 core-prim . native-transcoder) (g11089 core-prim . native-eol-style) (g11088 core-prim . make-transcoder) (g11087 core-prim . latin-1-codec) (g9807 core-prim . make-i/o-write-error) (g9786 core-prim . make-i/o-read-error) (g9965 core-prim . make-i/o-port-error) (g9829 core-prim . make-i/o-invalid-position-error) (g9855 core-prim . make-i/o-filename-error) (g9880 core-prim . make-i/o-file-protection-error) (g9901 core-prim . make-i/o-file-is-read-only-error) (g9943 core-prim . make-i/o-file-does-not-exist-error) (g9922 core-prim . make-i/o-file-already-exists-error) (g9765 core-prim . make-i/o-error) (g10012 core-prim . make-i/o-encoding-error) (g9990 core-prim . make-i/o-decoding-error) (g11086 core-prim . make-custom-textual-output-port) (g11085 core-prim . make-custom-textual-input/output-port) (g11084 core-prim . make-custom-textual-input-port) (g11083 core-prim . make-custom-binary-output-port) (g11082 core-prim . make-custom-binary-input/output-port) (g11081 core-prim . make-custom-binary-input-port) (g11080 core-prim . make-bytevector) (g11079 core-prim . lookahead-u8) (g11078 core-prim . lookahead-char) (g9809 core-prim . i/o-write-error?) (g9788 core-prim . i/o-read-error?) (g9969 core-prim . i/o-port-error?) (g9833 core-prim . i/o-invalid-position-error?) (g9859 core-prim . i/o-filename-error?) (g9882 core-prim . i/o-file-protection-error?) (g9903 core-prim . i/o-file-is-read-only-error?) (g9945 core-prim . i/o-file-does-not-exist-error?) (g9924 core-prim . i/o-file-already-exists-error?) (g9767 core-prim . i/o-error?) (g9835 core-prim . i/o-error-position) (g9971 core-prim . i/o-error-port) (g9861 core-prim . i/o-error-filename) (g10016 core-prim . i/o-encoding-error?) (g10018 core-prim . i/o-encoding-error-char) (g9992 core-prim . i/o-decoding-error?) (g11077 core-prim . get-u8) (g11076 core-prim . get-string-n!) (g11075 core-prim . get-string-n) (g11074 core-prim . get-string-all) (g11073 core-prim . get-line) (g11072 core-prim . get-datum) (g11071 core-prim . get-char) (g11070 core-prim . get-bytevector-some) (g11069 core-prim . get-bytevector-n!) (g11068 core-prim . get-bytevector-n) (g11067 core-prim . get-bytevector-all) (g11066 core-prim . flush-output-port) (g11065 core-prim . close-port) (g2958 core-prim . scheme-report-environment) (g11064 core-prim . quotient) (g2956 core-prim . null-environment) (g11063 core-prim . remainder) (g11062 core-prim . modulo) (g11061 core-prim . inexact->exact) (g11060 core-prim . force) (g11059 core-prim . exact->inexact) (g11058 core-prim . make-promise) (g11057 core-prim . exit) (g10327 core-prim . command-line) (g11056 core-prim . string-fill!) (g11055 core-prim . string-set!) (g11054 core-prim . set-cdr!) (g11053 core-prim . set-car!) (g11052 core-prim . remove) (g11051 core-prim . remv) (g11050 core-prim . remp) (g11049 core-prim . remq) (g11048 core-prim . partition) (g11047 core-prim . memv) (g11046 core-prim . memq) (g11045 core-prim . memp) (g11044 core-prim . member) (g11043 core-prim . exists) (g11042 core-prim . for-all) (g11041 core-prim . fold-right) (g11040 core-prim . fold-left) (g11039 core-prim . find) (g11038 core-prim . filter) (g11037 core-prim . cons*) (g11036 core-prim . assv) (g11035 core-prim . assq) (g11034 core-prim . assp) (g11033 core-prim . assoc) (g11032 core-prim . call-with-string-output-port) (g11031 core-prim . call-with-port) (g11030 core-prim . call-with-bytevector-output-port) (g11029 core-prim . bytevector->string) (g11028 core-prim . buffer-mode?) (g11027 core-prim . binary-port?) (g11026 core-prim . with-exception-handler) (g11025 core-prim . raise-continuable) (g11024 core-prim . raise) (g2962 core-prim . eval) (g2954 core-prim . environment) (g11023 core-prim . make-enumeration) (g11022 core-prim . enum-set=?) (g11021 core-prim . enum-set-universe) (g11020 core-prim . enum-set-union) (g11019 core-prim . enum-set-subset?) (g11018 core-prim . enum-set-projection) (g11017 core-prim . enum-set-member?) (g11016 core-prim . enum-set-intersection) (g11015 core-prim . enum-set-indexer) (g11014 core-prim . enum-set-difference) (g11013 core-prim . enum-set-constructor) (g11012 core-prim . enum-set-complement) (g11011 core-prim . enum-set->list) (g9629 core-prim . who-condition?) (g9495 core-prim . warning?) (g9558 core-prim . violation?) (g9746 core-prim . undefined-violation?) (g9721 core-prim . syntax-violation?) (g9725 core-prim . syntax-violation-subform) (g9723 core-prim . syntax-violation-form) (g2994 core-prim . syntax-violation) (g11010 core-prim . simple-conditions) (g9516 core-prim . serious-condition?) (g9652 core-prim . non-continuable-violation?) (g9472 core-prim . message-condition?) (g9625 core-prim . make-who-condition) (g9493 core-prim . make-warning) (g9556 core-prim . make-violation) (g9744 core-prim . make-undefined-violation) (g9715 core-prim . make-syntax-violation) (g9514 core-prim . make-serious-condition) (g9650 core-prim . make-non-continuable-violation) (g9468 core-prim . make-message-condition) (g9692 core-prim . make-lexical-violation) (g9599 core-prim . make-irritants-condition) (g9671 core-prim . make-implementation-restriction-violation) (g9535 core-prim . make-error) (g9577 core-prim . make-assertion-violation) (g9694 core-prim . lexical-violation?) (g9603 core-prim . irritants-condition?) (g9673 core-prim . implementation-restriction-violation?) (g9537 core-prim . error?) (g9631 core-prim . condition-who) (g11009 core-prim . condition-predicate) (g9474 core-prim . condition-message) (g9605 core-prim . condition-irritants) (g11008 core-prim . condition-accessor) (g11007 core-prim . condition) (g9579 core-prim . assertion-violation?) (g11006 core-prim . condition?) (g11005 core-prim . utf32->string) (g11004 core-prim . utf16->string) (g11003 core-prim . utf8->string) (g11002 core-prim . uint-list->bytevector) (g11001 core-prim . u8-list->bytevector) (g11000 core-prim . string->utf8) (g10999 core-prim . string->utf32) (g10998 core-prim . string->utf16) (g10997 core-prim . sint-list->bytevector) (g10996 core-prim . native-endianness) (g10995 core-prim . bytevector?) (g10994 core-prim . bytevector=?) (g10993 core-prim . bytevector-uint-set!) (g10992 core-prim . bytevector-uint-ref) (g10991 core-prim . bytevector-u8-set!) (g10990 core-prim . bytevector-u8-ref) (g10989 core-prim . bytevector-u64-set!) (g10988 core-prim . bytevector-u64-ref) (g10987 core-prim . bytevector-u64-native-set!) (g10986 core-prim . bytevector-u64-native-ref) (g10985 core-prim . bytevector-u32-set!) (g10984 core-prim . bytevector-u32-ref) (g10983 core-prim . bytevector-u32-native-set!) (g10982 core-prim . bytevector-u32-native-ref) (g10981 core-prim . bytevector-u16-set!) (g10980 core-prim . bytevector-u16-ref) (g10979 core-prim . bytevector-u16-native-set!) (g10978 core-prim . bytevector-u16-native-ref) (g10977 core-prim . bytevector-sint-set!) (g10976 core-prim . bytevector-sint-ref) (g10975 core-prim . bytevector-s8-set!) (g10974 core-prim . bytevector-s8-ref) (g10973 core-prim . bytevector-s64-set!) (g10972 core-prim . bytevector-s64-ref) (g10971 core-prim . bytevector-s64-native-set!) (g10970 core-prim . bytevector-s64-native-ref) (g10969 core-prim . bytevector-s32-set!) (g10968 core-prim . bytevector-s32-ref) (g10967 core-prim . bytevector-s32-native-set!) (g10966 core-prim . bytevector-s32-native-ref) (g10965 core-prim . bytevector-s16-set!) (g10964 core-prim . bytevector-s16-ref) (g10963 core-prim . bytevector-s16-native-set!) (g10962 core-prim . bytevector-s16-native-ref) (g10961 core-prim . bytevector-length) (g10960 core-prim . bytevector-ieee-single-ref) (g10959 core-prim . bytevector-ieee-single-set!) (g10958 core-prim . bytevector-ieee-single-native-set!) (g10957 core-prim . bytevector-ieee-single-native-ref) (g10956 core-prim . bytevector-ieee-double-set!) (g10955 core-prim . bytevector-ieee-double-ref) (g10954 core-prim . bytevector-ieee-double-native-set!) (g10953 core-prim . bytevector-ieee-double-native-ref) (g10952 core-prim . bytevector-fill!) (g10951 core-prim . bytevector-copy!) (g10950 core-prim . bytevector-copy) (g10949 core-prim . bytevector->uint-list) (g10948 core-prim . bytevector->u8-list) (g10947 core-prim . bytevector->sint-list) (g10060 core-prim . no-nans-violation?) (g10039 core-prim . no-infinities-violation?) (g10058 core-prim . make-no-nans-violation) (g10037 core-prim . make-no-infinities-violation) (g10946 core-prim . real->flonum) (g10945 core-prim . flzero?) (g10944 core-prim . fltruncate) (g10943 core-prim . fltan) (g10942 core-prim . flsqrt) (g10941 core-prim . flsin) (g10940 core-prim . flround) (g10939 core-prim . flpositive?) (g10938 core-prim . flonum?) (g10937 core-prim . flodd?) (g10936 core-prim . flnumerator) (g10935 core-prim . flnegative?) (g10934 core-prim . flnan?) (g10933 core-prim . flmod0) (g10932 core-prim . flmod) (g10931 core-prim . flmin) (g10930 core-prim . flmax) (g10929 core-prim . fllog) (g10928 core-prim . flinteger?) (g10927 core-prim . flinfinite?) (g10926 core-prim . flfloor) (g10925 core-prim . flfinite?) (g10924 core-prim . flexpt) (g10923 core-prim . flexp) (g10922 core-prim . fleven?) (g10921 core-prim . fldiv0-and-mod0) (g10920 core-prim . fldiv0) (g10919 core-prim . fldiv-and-mod) (g10918 core-prim . fldiv) (g10917 core-prim . fldenominator) (g10916 core-prim . flcos) (g10915 core-prim . flceiling) (g10914 core-prim . flatan) (g10913 core-prim . flasin) (g10912 core-prim . flacos) (g10911 core-prim . flabs) (g10910 core-prim . fl>?) (g10909 core-prim . fl>=?) (g10908 core-prim . fl=?) (g10907 core-prim . fl<?) (g10906 core-prim . fl<=?) (g10905 core-prim . fl/) (g10904 core-prim . fl-) (g10903 core-prim . fl+) (g10902 core-prim . fl*) (g10901 core-prim . fixnum->flonum) (g10900 core-prim . fxzero?) (g10899 core-prim . fxxor) (g10898 core-prim . fxrotate-bit-field) (g10897 core-prim . fxreverse-bit-field) (g10896 core-prim . fxpositive?) (g10895 core-prim . fxodd?) (g10894 core-prim . fxnot) (g10893 core-prim . fxnegative?) (g10892 core-prim . fxmod0) (g10891 core-prim . fxmod) (g10890 core-prim . fxmin) (g10889 core-prim . fxmax) (g10888 core-prim . fxlength) (g10887 core-prim . fxior) (g10886 core-prim . fxif) (g10885 core-prim . fxfirst-bit-set) (g10884 core-prim . fxeven?) (g10883 core-prim . fxdiv0-and-mod0) (g10882 core-prim . fxdiv0) (g10881 core-prim . fxdiv-and-mod) (g10880 core-prim . fxdiv) (g10879 core-prim . fxcopy-bit-field) (g10878 core-prim . fxcopy-bit) (g10877 core-prim . fxbit-set?) (g10876 core-prim . fxbit-field) (g10875 core-prim . fxbit-count) (g10874 core-prim . fxarithmetic-shift-right) (g10873 core-prim . fxarithmetic-shift-left) (g10872 core-prim . fxarithmetic-shift) (g10871 core-prim . fxand) (g10870 core-prim . fx>?) (g10869 core-prim . fx>=?) (g10868 core-prim . fx=?) (g10867 core-prim . fx<?) (g10866 core-prim . fx<=?) (g10865 core-prim . fx-/carry) (g10864 core-prim . fx-) (g10863 core-prim . fx+/carry) (g10862 core-prim . fx+) (g10861 core-prim . fx*/carry) (g10860 core-prim . fx*) (g10859 core-prim . greatest-fixnum) (g10858 core-prim . least-fixnum) (g10857 core-prim . fixnum-width) (g10856 core-prim . fixnum?) (g10855 core-prim . bitwise-rotate-bit-field) (g10854 core-prim . bitwise-reverse-bit-field) (g10853 core-prim . bitwise-length) (g10852 core-prim . bitwise-if) (g10851 core-prim . bitwise-first-bit-set) (g10850 core-prim . bitwise-copy-bit-field) (g10849 core-prim . bitwise-copy-bit) (g10848 core-prim . bitwise-bit-set?) (g10847 core-prim . bitwise-bit-field) (g10846 core-prim . bitwise-bit-count) (g10845 core-prim . bitwise-xor) (g10844 core-prim . bitwise-ior) (g10843 core-prim . bitwise-and) (g10842 core-prim . bitwise-not) (g10841 core-prim . bitwise-arithmetic-shift-right) (g10840 core-prim . bitwise-arithmetic-shift-left) (g10839 core-prim . bitwise-arithmetic-shift) (g10838 core-prim . zero?) (g10837 core-prim . vector?) (g10836 core-prim . vector-set!) (g10835 core-prim . vector-ref) (g10834 core-prim . vector-map) (g10833 core-prim . vector-length) (g10832 core-prim . vector-for-each) (g10831 core-prim . vector-fill!) (g10830 core-prim . vector->list) (g10829 core-prim . vector) (g10828 core-prim . values) (g10827 core-prim . truncate) (g10826 core-prim . tan) (g10825 core-prim . symbol?) (g10824 core-prim . symbol=?) (g10823 core-prim . symbol->string) (g10822 core-prim . substring) (g10821 core-prim . string?) (g10820 core-prim . string>?) (g10819 core-prim . string>=?) (g10818 core-prim . string=?) (g10817 core-prim . string<?) (g10816 core-prim . string<=?) (g10815 core-prim . string-ref) (g10814 core-prim . string-length) (g10813 core-prim . string-for-each) (g10812 core-prim . string-copy) (g10811 core-prim . string-append) (g10810 core-prim . string->symbol) (g10809 core-prim . string->number) (g10808 core-prim . string->list) (g10807 core-prim . string) (g10806 core-prim . sqrt) (g10805 core-prim . sin) (g10804 core-prim . round) (g10803 core-prim . reverse) (g10802 core-prim . real?) (g10801 core-prim . real-valued?) (g10800 core-prim . real-part) (g10799 core-prim . rationalize) (g10798 core-prim . rational?) (g10797 core-prim . rational-valued?) (g10796 core-prim . procedure?) (g10795 core-prim . positive?) (g10794 core-prim . pair?) (g10793 core-prim . odd?) (g10792 core-prim . numerator) (g10791 core-prim . number?) (g10790 core-prim . number->string) (g10789 core-prim . null?) (g10788 core-prim . not) (g10787 core-prim . negative?) (g10786 core-prim . nan?) (g10785 core-prim . min) (g10784 core-prim . max) (g10783 core-prim . map) (g10782 core-prim . make-vector) (g10781 core-prim . make-string) (g10780 core-prim . make-rectangular) (g10779 core-prim . make-polar) (g10778 core-prim . magnitude) (g10777 core-prim . log) (g10776 core-prim . list?) (g10775 core-prim . list-tail) (g10774 core-prim . list-ref) (g10773 core-prim . list->vector) (g10772 core-prim . list->string) (g10771 core-prim . list) (g10770 core-prim . length) (g10769 core-prim . lcm) (g10768 core-prim . integer?) (g10767 core-prim . integer-valued?) (g10766 core-prim . integer->char) (g10765 core-prim . infinite?) (g10764 core-prim . inexact?) (g10763 core-prim . inexact) (g10762 core-prim . imag-part) (g10761 core-prim . gcd) (g10760 core-prim . for-each) (g10759 core-prim . floor) (g10758 core-prim . finite?) (g10757 core-prim . expt) (g10756 core-prim . exp) (g10755 core-prim . exact?) (g10754 core-prim . exact-integer-sqrt) (g10753 core-prim . exact) (g10752 core-prim . even?) (g10751 core-prim . error) (g10750 core-prim . eqv?) (g10749 core-prim . equal?) (g10748 core-prim . eq?) (g10747 core-prim . dynamic-wind) (g10746 core-prim . div0-and-mod0) (g10745 core-prim . mod0) (g10744 core-prim . div0) (g10743 core-prim . div-and-mod) (g10742 core-prim . mod) (g10741 core-prim . div) (g10740 core-prim . denominator) (g10739 core-prim . cos) (g10738 core-prim . cons) (g10737 core-prim . complex?) (g10736 core-prim . char?) (g10735 core-prim . char>?) (g10734 core-prim . char>=?) (g10733 core-prim . char=?) (g10732 core-prim . char<?) (g10731 core-prim . char<=?) (g10730 core-prim . char->integer) (g10729 core-prim . ceiling) (g10728 core-prim . call-with-values) (g10727 core-prim . call/cc) (g10726 core-prim . call-with-current-continuation) (g10725 core-prim . cddddr) (g10724 core-prim . cdddar) (g10723 core-prim . cddadr) (g10722 core-prim . cddaar) (g10721 core-prim . cdaddr) (g10720 core-prim . cdadar) (g10719 core-prim . cdaadr) (g10718 core-prim . cdaaar) (g10717 core-prim . cadddr) (g10716 core-prim . caddar) (g10715 core-prim . cadadr) (g10714 core-prim . cadaar) (g10713 core-prim . caaddr) (g10712 core-prim . caadar) (g10711 core-prim . caaadr) (g10710 core-prim . caaaar) (g10709 core-prim . cdddr) (g10708 core-prim . cddar) (g10707 core-prim . cdadr) (g10706 core-prim . cdaar) (g10705 core-prim . caddr) (g10704 core-prim . cadar) (g10703 core-prim . caadr) (g10702 core-prim . caaar) (g10701 core-prim . cddr) (g10700 core-prim . cdar) (g10699 core-prim . cadr) (g10698 core-prim . caar) (g10697 core-prim . cdr) (g10696 core-prim . car) (g10695 core-prim . boolean?) (g10694 core-prim . boolean=?) (g10693 core-prim . atan) (g10692 core-prim . assertion-violation) (g10691 core-prim . asin) (g10690 core-prim . apply) (g10689 core-prim . append) (g10688 core-prim . angle) (g10687 core-prim . acos) (g10686 core-prim . abs) (g10685 core-prim . /) (g10684 core-prim . *) (g10683 core-prim . -) (g10682 core-prim . +) (g10681 core-prim . >=) (g10680 core-prim . >) (g10679 core-prim . =) (g10678 core-prim . <=) (g10677 core-prim . <) (g10676 core-prim . library) (g10675 $core-rtd &no-nans-rtd &no-nans-rcd) (g10674 $core-rtd &no-infinities-rtd &no-infinities-rcd) (g10673 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (g10672 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (g10671 $core-rtd &i/o-port-rtd &i/o-port-rcd) (g10670 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (g10669 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (g10668 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (g10667 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (g10666 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (g10665 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (g10664 $core-rtd &i/o-write-rtd &i/o-write-rcd) (g10663 $core-rtd &i/o-read-rtd &i/o-read-rcd) (g10662 $core-rtd &i/o-rtd &i/o-rcd) (g10661 $core-rtd &undefined-rtd &undefined-rcd) (g10660 $core-rtd &syntax-rtd &syntax-rcd) (g10659 $core-rtd &lexical-rtd &lexical-rcd) (g10658 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (g10657 $core-rtd &non-continuable-rtd &non-continuable-rcd) (g10656 $core-rtd &who-rtd &who-rcd) (g10655 $core-rtd &irritants-rtd &irritants-rcd) (g10654 $core-rtd &assertion-rtd &assertion-rcd) (g10653 $core-rtd &violation-rtd &violation-rcd) (g10652 $core-rtd &error-rtd &error-rcd) (g10651 $core-rtd &serious-rtd &serious-rcd) (g10650 $core-rtd &warning-rtd &warning-rcd) (g10649 $core-rtd &message-rtd &message-rcd) (g10648 $core-rtd &condition-rtd &condition-rcd) (g10647 macro . define-condition-type) (g10646 macro . define-enumeration) (g10645 macro . define-record-type) (g10644 macro . parent-rtd) (g10643 macro . nongenerative) (g10642 macro . opaque) (g10641 macro . sealed) (g10640 macro . protocol) (g10639 macro . parent) (g10638 macro . immutable) (g10637 macro . mutable) (g10636 macro . fields) (g10635 macro . error-handling-mode) (g10634 macro . file-options) (g10633 macro . buffer-mode) (g10632 macro . eol-style) (g10631 macro . guard) (g10630 macro . trace-define) (g10629 macro . trace-lambda) (g10628 macro . unsyntax-splicing) (g10627 macro . unsyntax) (g10626 macro . unquote-splicing) (g10625 macro . unquote) (g10624 macro . _) (g10623 macro . else) (g10622 macro . =>) (g10621 macro . ...) (g10620 macro . assert) (g10619 macro . endianness) (g10618 macro . delay) (g10617 macro . time) (g10616 macro . do) (g10615 macro . cond) (g10614 macro . let*) (g10613 macro . let) (g10612 macro . let*-values) (g10611 macro . let-values) (g10610 macro . identifier-syntax) (g10609 macro . with-syntax) (g10608 macro . quasisyntax) (g10607 macro . quasiquote) (g10606 macro . syntax-rules) (g10605 macro . include) (g10604 macro . define-struct) (g10603 core-macro . record-constructor-descriptor) (g10602 core-macro . record-type-descriptor) (g10601 macro . case) (g10600 macro . parameterize) (g10599 macro . unless) (g10598 macro . when) (g10597 core-macro . or) (g10596 core-macro . and) (g10595 core-macro . if) (g10594 core-macro . letrec*) (g10593 core-macro . letrec) (g10592 core-macro . type-descriptor) (g10591 core-macro . case-lambda) (g10590 core-macro . lambda) (g10589 core-macro . syntax) (g10588 core-macro . syntax-case) (g10587 core-macro . quote) (g10586 core-macro . foreign-call) (g10585 letrec-syntax) (g10584 let-syntax) (g10583 set!) (g10582 import) (g10581 begin) (g10580 module) (g10579 define-syntax) (g10578 define)) values values '#f '#f '#f '#f) (g1789@g1442@install-library 'g11317 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . g11284) (eval-core . g11283) (set-symbol-value! . g11282) (symbol-value . g11281) (gensym . g912) (void . g11280)) '() values values '#f '#f '#f '#f) (g1789@g1442@install-library 'g11318 '(mosh) '() '() '() '() '((set-symbol-value! . g11282) (symbol-value . g11281) (read-line . g11277) (ungensym . g11276) (alist->eq-hash-table . g11275) (assoc-ref . g11274) (print . g11273) (format . g11272) (host-os . g11271) (library-path . g1409) (standard-library-path . g11270) (file-newer? . g11269) (stat-mtime . g11268) (write-to-file . g11267) (file->list . g11266) (file->string . g11265) (digit->integer . g11264) (call-with-string-input-port . g11263) (call-with-string-io . g11262) (string-split . g11261) (bytevector-for-each . g11260) (string->regexp . g11259) (rxmatch . g11258) (regexp-replace-all . g11257) (hashtable-for-each . g11256) (readdir . g11252) (set-current-directory! . g11251) (expand-path . g11250) (current-directory . g11249) (p . g11234) (get-timeofday . g11229) (get-command-line . g11228) (sys-display . g11227) (mosh-executable-path . g11226) (make-file-options . g11225) (source-info . g11224) (make-compiler-instruction . g11223) (make-instruction . g11222) (set-source-info! . g11221) (bignum? . g11220) (fast-equal? . g11219) (fasl-read . g11218) (fasl-write . g11217) (time-usage . g11216) (time . g10617) (include . g10605)) '() values values '#f '#f '#f '#f) (g1789@g1442@install-library 'g11319 '(system) '() '() '() '() '((call-process . g11255) (local-tz-offset . g11254) (microseconds . g11253) (expand-path . g11250) (%spawn . g11248) (%waitpid . g11247) (%ffi-supported? . g11246) (%ffi-pointer-ref . g11245) (%ffi-pointer->string . g11244) (%ffi-call->string-or-zero . g11243) (%ffi-call->double . g11242) (%ffi-call->void* . g11241) (%ffi-call->void . g11240) (%ffi-call->int . g11239) (%ffi-lookup . g11238) (%ffi-open . g11237) (%fork . g11236) (%pipe . g11235) (open-output-string . g11233) (get-output-string . g11232) (get-environment-variables . g11231) (get-environment-variable . g11230) (make-parameter . g940) (parameterize . g10600)) '() values values '#f '#f '#f '#f))
((lambda (g10310@add-library-path! g10312@parse-and-add-library-path g10314@for-each-with-index g10316@rpad g10318@condition-printer g10320@record->field-alist g10322@map-with-index g10324@repl g10326@trace-printer g10328@command-line g10330@local-library-path g10332@load/args g10334@load g10336@ironscheme-build g10338@eval-top-level g10340@compile-system-libraries g10342@compile g10344@compile->closure g10346@pre-compile-r6rs-file g10348@load-r6rs-top-level) (begin (set! g10310@add-library-path! (lambda (g10375@path) (g1773@g1410@library-path (append (g1773@g1410@library-path) (list g10375@path))))) (set! g10312@parse-and-add-library-path (lambda (g10377@paths g10378@message) ((lambda (g10381@t) (if g10381@t ((lambda (g10383@paths) (for-each (lambda (g10385@path) (if (file-exists? g10385@path) (g10310@add-library-path! (expand-path g10385@path)) (format (current-error-port) g10378@message g10385@path))) (reverse (string-split g10383@paths '#\:)))) g10381@t) (void))) g10377@paths))) (set! g10314@for-each-with-index (lambda (g10387@proc g10388@lst) (letrec ((g10391@loop (lambda (g10393@i g10394@lst) (if (null? g10394@lst) (if '#f '#f (void)) (begin (g10387@proc g10393@i (car g10394@lst)) (g10391@loop (+ g10393@i '1) (cdr g10394@lst))))))) (g10391@loop '1 g10388@lst)))) (set! g10316@rpad (lambda (g10397@str g10398@pad g10399@n) ((lambda (g10403@rest) ((letrec ((g10405@loop (lambda (g10407@rest g10408@ret) (if (<= g10407@rest '0) g10408@ret (g10405@loop (- g10407@rest '1) (string-append g10408@ret g10398@pad)))))) g10405@loop) g10403@rest (format '"~a" g10397@str))) (- g10399@n (string-length (format '"~a" g10397@str)))))) (set! g10318@condition-printer (lambda (g10411@e g10412@port) ((lambda (g10416@max-condition-len) (begin (set! g10416@max-condition-len (apply max (map (lambda (g10433@c) (string-length (symbol->string (record-type-name (record-rtd g10433@c))))) (simple-conditions g10411@e)))) (begin (display '" Condition components:\n" g10412@port) (g10314@for-each-with-index (lambda (g10417@i g10418@x) ((lambda (g10421@rtd g10422@fields-alist) (begin (format g10412@port '" ~d. ~a" g10417@i (g10316@rpad (symbol->string (record-type-name g10421@rtd)) '" " g10416@max-condition-len)) (if (null? g10422@fields-alist) (newline g10412@port) (void)) ((letrec ((g10425@loop (lambda (g10427@first g10428@fields-alist) (if (null? g10428@fields-alist) '() ((lambda (g10431@field) (begin (if (not g10427@first) (display (g10316@rpad '"" '" " (+ '4 g10416@max-condition-len)) g10412@port) (void)) (display '"       " g10412@port) (display (car g10431@field) g10412@port) (display '": " g10412@port) (write (cdr g10431@field) g10412@port) (newline g10412@port) (g10425@loop '#f (cdr g10428@fields-alist)))) (car g10428@fields-alist)))))) g10425@loop) '#t g10422@fields-alist))) (record-rtd g10418@x) (g10320@record->field-alist g10418@x))) (simple-conditions g10411@e))))) '#f))) (set! g10320@record->field-alist (lambda (g10435@r) ((lambda (g10438@ref) (begin (set! g10438@ref (lambda (g10449@rtd g10450@i g10451@x) ((lambda (g10455@val) (if (symbol? g10455@val) (ungensym g10455@val) g10455@val)) ((record-accessor g10449@rtd g10450@i) g10451@x)))) ((letrec ((g10439@loop (lambda (g10441@ret g10442@rtd) (if g10442@rtd (g10439@loop (append g10441@ret (g10322@map-with-index (lambda (g10445@i g10446@field) (cons g10446@field (g10438@ref g10442@rtd g10445@i g10435@r))) (vector->list (record-type-field-names g10442@rtd)))) (record-type-parent g10442@rtd)) g10441@ret)))) g10439@loop) '() (record-rtd g10435@r)))) '#f))) (set! g10322@map-with-index (lambda (g10457@proc g10458@lst) ((letrec ((g10461@loop (lambda (g10463@i g10464@lst g10465@ret) (if (null? g10464@lst) (reverse g10465@ret) (g10461@loop (+ g10463@i '1) (cdr g10464@lst) (cons (g10457@proc g10463@i (car g10464@lst)) g10465@ret)))))) g10461@loop) '0 g10458@lst '()))) (set! g10324@repl (lambda g10469@x ((lambda (g10472@rec) (begin (set! g10472@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (g10475@g10473) (lambda () (with-exception-handler (lambda (g10477@e) ((call/cc (lambda (g10479@g10474) (g10475@g10473 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? g10477@e) (g10318@condition-printer g10477@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" g10477@e))) (g10479@g10474 (lambda () (raise-continuable g10477@e)))))))))) (lambda () ((letrec ((g10481@loop (lambda (g10483@line g10484@accum) ((lambda (g10488@parentheses-ok? g10490@eval-string-print) (begin (set! g10488@parentheses-ok? (lambda (g10495@text) ((letrec ((g10497@loop (lambda (g10499@chars g10500@p0 g10501@p1) (if (null? g10499@chars) (= '0 g10500@p0 g10501@p1) ((lambda (g10505@t) (if (memv g10505@t '(#\()) (g10497@loop (cdr g10499@chars) (+ g10500@p0 '1) g10501@p1) (if (memv g10505@t '(#\))) (g10497@loop (cdr g10499@chars) (- g10500@p0 '1) g10501@p1) (if (memv g10505@t '(#\[)) (g10497@loop (cdr g10499@chars) g10500@p0 (+ g10501@p1 '1)) (if (memv g10505@t '(#\])) (g10497@loop (cdr g10499@chars) g10500@p0 (- g10501@p1 '1)) (g10497@loop (cdr g10499@chars) g10500@p0 g10501@p1)))))) (car g10499@chars)))))) g10497@loop) (string->list g10495@text) '0 '0))) (set! g10490@eval-string-print (lambda (g10493@text) (if (not (or (string=? '"\n" g10493@text) (= '0 (string-length g10493@text)))) (write (g10338@eval-top-level (call-with-port (open-string-input-port g10493@text) read))) (void)))) (if (eof-object? g10483@line) (begin (g10490@eval-string-print g10484@accum) (exit)) ((lambda (g10491@current) (if (g10488@parentheses-ok? g10491@current) (g10490@eval-string-print g10491@current) (g10481@loop (get-line (current-input-port)) g10491@current))) (string-append g10484@accum g10483@line))))) '#f '#f)))) g10481@loop) (get-line (current-input-port)) '""))))))) (newline) (g10472@rec)))) (g10472@rec))) '#f))) (set! g10326@trace-printer (g1163@g941@make-parameter write)) (set! g10328@command-line (g1163@g941@make-parameter (get-command-line))) (set! g10330@local-library-path (lambda (g10507@filename) (cons (expand-path '".") (g1773@g1410@library-path)))) (set! g10332@load/args (lambda (g10509@filename . g10511@args) (begin (apply g10348@load-r6rs-top-level g10509@filename 'load g10511@args) (void)))) (set! g10334@load (lambda (g10513@filename) (begin (apply g10348@load-r6rs-top-level g10513@filename 'load (g10328@command-line)) (void)))) (set! g10336@ironscheme-build (lambda () (g10334@load '"ironscheme-buildscript.ss"))) (set! g10338@eval-top-level (lambda (g10515@x) (g9342@g2963@eval g10515@x (g9364@g3007@interaction-environment)))) (set! g10340@compile-system-libraries (lambda () (g10338@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! g10342@compile (lambda (g10517@filename) (g10348@load-r6rs-top-level g10517@filename 'compile))) (set! g10344@compile->closure (lambda (g10519@filename) (g10348@load-r6rs-top-level g10519@filename 'closure))) (set! g10346@pre-compile-r6rs-file (lambda (g10521@filename) (g10348@load-r6rs-top-level g10521@filename 'compile))) (set! g10348@load-r6rs-top-level (lambda (g10523@filename g10524@how . g10527@args) ((lambda (g10531@g10529@library-path g10532@g10530@library-path) ((lambda (g10535@swap) (dynamic-wind g10535@swap (lambda () ((lambda (g10537@x*) ((lambda (g10539@t) (if (memv g10539@t '(closure)) (g9363@g3005@pre-compile-r6rs-top-level g10537@x*) (if (memv g10539@t '(load)) ((lambda (g10543@g10541@command-line g10544@g10542@command-line) ((lambda (g10547@swap) (dynamic-wind g10547@swap (lambda () ((g9362@g3003@compile-r6rs-top-level g10537@x*))) g10547@swap)) (lambda () ((lambda (g10549@t) (begin (g10543@g10541@command-line g10544@g10542@command-line) (set! g10544@g10542@command-line g10549@t))) (g10543@g10541@command-line))))) g10328@command-line (cons g10523@filename (car g10527@args))) (if (memv g10539@t '(compile)) (begin (g9362@g3003@compile-r6rs-top-level g10537@x*) (g1777@g1418@serialize-all g1158@g931@serialize-library g1248@g1177@compile-core-expr)) (if '#f '#f (void)))))) g10524@how)) (with-input-from-file g10523@filename (lambda () ((letrec ((g10551@f (lambda () ((lambda (g10553@x) (if (eof-object? g10553@x) '() (cons g10553@x (g10551@f)))) (g1150@g915@read-annotated))))) g10551@f)))))) g10535@swap)) (lambda () ((lambda (g10555@t) (begin (g10531@g10529@library-path g10532@g10530@library-path) (set! g10532@g10530@library-path g10555@t))) (g10531@g10529@library-path))))) g1773@g1410@library-path (g10330@local-library-path g10523@filename)))) (begin (set! g10576@g10348@load-r6rs-top-level g10348@load-r6rs-top-level) (set! g10575@g10346@pre-compile-r6rs-file g10346@pre-compile-r6rs-file) (set! g10574@g10344@compile->closure g10344@compile->closure) (set! g10573@g10342@compile g10342@compile) (set! g10572@g10340@compile-system-libraries g10340@compile-system-libraries) (set! g10571@g10338@eval-top-level g10338@eval-top-level) (set! g10570@g10336@ironscheme-build g10336@ironscheme-build) (set! g10569@g10334@load g10334@load) (set! g10568@g10332@load/args g10332@load/args) (set! g10567@g10330@local-library-path g10330@local-library-path) (set! g10566@g10328@command-line g10328@command-line) (set! g10565@g10326@trace-printer g10326@trace-printer) (set! g10564@g10324@repl g10324@repl) (set! g10563@g10322@map-with-index g10322@map-with-index) (set! g10562@g10320@record->field-alist g10320@record->field-alist) (set! g10561@g10318@condition-printer g10318@condition-printer) (set! g10560@g10316@rpad g10316@rpad) (set! g10559@g10314@for-each-with-index g10314@for-each-with-index) (set! g10558@g10312@parse-and-add-library-path g10312@parse-and-add-library-path) (set! g10557@g10310@add-library-path! g10310@add-library-path!) (g1778@g1420@current-precompiled-library-loader g1159@g933@load-serialized-library) (set-symbol-value! 'load g10334@load) (set-symbol-value! 'pre-compile-r6rs-file g10346@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs g10338@eval-top-level) (set-symbol-value! 'int-env-syms g9333@g2945@interaction-environment-symbols) (set-symbol-value! 'expanded2core g1247@g1175@expanded->core) (set-symbol-value! 'trace-printer g10326@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (g10349@c) (condition (g10147@g9651@make-non-continuable-violation) (g10137@g9626@make-who-condition 'raise) (g10077@g9469@make-message-condition '"returned from non-continuable exception") (g10127@g9600@make-irritants-condition (list g10349@c))))) (g10312@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (g10312@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (g1773@g1410@library-path (append (g1773@g1410@library-path) (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib")))) ((lambda (g10351@prefix) (g1774@g1412@library-extensions (g10351@prefix '".mosh" (g1774@g1412@library-extensions)))) (lambda (g10353@ext g10354@ls) (append (map (lambda (g10357@x) (string-append g10353@ext g10357@x)) g10354@ls) g10354@ls))) ((lambda (g10359@args g10360@port) ((lambda (g10364@ref) (begin (set! g10364@ref (lambda (g10367@rtd g10368@i g10369@x) ((lambda (g10373@val) (if (symbol? g10373@val) (ungensym g10373@val) g10373@val)) ((record-accessor g10367@rtd g10368@i) g10369@x)))) (with-exception-handler (lambda (g10365@c) (if (condition? g10365@c) (g10318@condition-printer g10365@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" g10365@c))) (lambda () (if (null? g10359@args) (g10324@repl) (g10348@load-r6rs-top-level (car g10359@args) 'load (cdr g10359@args))))))) '#f)) (g10328@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
