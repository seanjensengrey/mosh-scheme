;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (f2765@read-annotated f2767@annotation-stripped f2769@annotation? f276b@annotation-source f276d@annotation-expression f276f@scm->fasl f2771@fasl-save f2773@fasl-load f2775@serialize-library f2777@load-serialized-library f2779@make-record-printer f277b@compile-core f277d@read-library-source-file f277f@make-parameter f27e7@file-options-spec) (begin (set! f2765@read-annotated read) (set! f2767@annotation-stripped (lambda (f27e8@x) (f276d@annotation-expression f27e8@x))) (set! f2769@annotation? (lambda (f27ea@x) (source-info f27ea@x))) (set! f276b@annotation-source (lambda (f27ec@x) (source-info f27ec@x))) (set! f276d@annotation-expression (lambda (f27ee@x) (if (pair? f27ee@x) (cons (car f27ee@x) (cdr f27ee@x)) (display '"line:46\n")))) (set! f276f@scm->fasl (lambda (f27f0@filename) (string-append f27f0@filename '".fasl"))) (set! f2771@fasl-save (lambda (f27f2@filename f27f3@obj) (call-with-port (open-file-output-port f27f2@filename) (lambda (f27f6@port) ((symbol-value 'fasl-write!) f27f3@obj f27f6@port))))) (set! f2773@fasl-load (lambda (f27f8@filename) (call-with-port (open-file-input-port f27f8@filename) (symbol-value 'fasl-read!)))) (set! f2775@serialize-library (lambda (f27fa@filename f27fb@obj) (begin (format '#t '"serialize-library ~a\n..." f27fa@filename) ((lambda (f27fe@expanded2core) ((lambda (f2800@compile) ((lambda (f2802@code) ((lambda (f2804@pivot) ((lambda (f2806@visit) ((lambda () (begin (set-car! f2804@pivot f2806@visit) ((lambda (f2808@pivot) ((lambda (f280a@invoke) ((lambda () (set-car! f2808@pivot f280a@invoke)))) (f2800@compile (f27fe@expanded2core (car f2808@pivot))))) (cdr f2804@pivot)))))) (f2800@compile (f27fe@expanded2core (car f2804@pivot))))) (cddddr (cddddr f2802@code)))) f27fb@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (f280c@fasl-file) (begin (if (file-exists? f280c@fasl-file) (delete-file f280c@fasl-file) (void)) ((call/cc (lambda (f2810@f280e) (lambda () (with-exception-handler (lambda (f2812@c) ((call/cc (lambda (f2814@f280f) (f2810@f280e (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " f27fa@filename) (if (file-exists? f280c@fasl-file) (delete-file f280c@fasl-file) (void)) '#f) (f2814@f280f (lambda () (raise-continuable f2812@c)))))))))) (lambda () (begin (f2771@fasl-save f280c@fasl-file f27fb@obj) (display '"OK\n")))))))))) (f276f@scm->fasl f27fa@filename))))) (set! f2777@load-serialized-library (lambda (f2816@filename f2817@obj) ((lambda (f281a@fasl-file) (if (and (file-exists? f281a@fasl-file) ((symbol-value 'file-newer?) f281a@fasl-file f2816@filename)) ((lambda (f281c@expanded2core) ((lambda (f281e@eval-compiled-core) ((lambda (f2820@code) ((lambda (f2822@pivot) ((lambda (f2824@visit) ((lambda (f2826@visit-proc) ((lambda () (begin (set-car! f2822@pivot f2826@visit-proc) ((lambda (f2828@pivot) ((lambda (f282a@invoke) ((lambda () (begin (set-car! f2828@pivot (lambda () (f281e@eval-compiled-core f282a@invoke))) (apply f2817@obj f2820@code))))) (car f2828@pivot))) (cdr f2822@pivot)) '#t)))) (lambda () (f281e@eval-compiled-core f2824@visit)))) (car f2822@pivot))) (cddddr (cddddr f2820@code)))) (f2773@fasl-load f281a@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (f276f@scm->fasl f2816@filename)))) (set! f2779@make-record-printer (lambda (f282c@name f282d@printer) (lambda f2830@x (begin (display '"record printer") (for-each display f2830@x))))) (set! f277b@compile-core (lambda f2832@x (apply error 'comile-core '"not implementated" f2832@x))) (set! f277d@read-library-source-file (lambda (f2834@file-name) (with-input-from-file f2834@file-name f2765@read-annotated))) (set! f277f@make-parameter (lambda f2844 ((lambda (f2845) (if (= f2845 '1) (apply (lambda (f2836@x) (f277f@make-parameter f2836@x (lambda (f2838@x) f2838@x))) f2844) (if (= f2845 '2) (apply (lambda (f283a@x f283b@fender) ((lambda (f283e@x) (lambda f2842 ((lambda (f2843) (if (= f2843 '0) (apply (lambda () f283e@x) f2842) (if (= f2843 '1) (apply (lambda (f2840@v) (set! f283e@x (f283b@fender f2840@v))) f2842) (error 'apply '"invalid arg count")))) (length f2842)))) (f283b@fender f283a@x))) f2844) (error 'apply '"invalid arg count")))) (length f2844)))) (set! f27e7@file-options-spec (lambda (f2846@x) f2846@x)) (begin (set! f2856@f27e7@file-options-spec f27e7@file-options-spec) (set! f2855@f277f@make-parameter f277f@make-parameter) (set! f2854@f277d@read-library-source-file f277d@read-library-source-file) (set! f2853@f277b@compile-core f277b@compile-core) (set! f2852@f2779@make-record-printer f2779@make-record-printer) (set! f2851@f2777@load-serialized-library f2777@load-serialized-library) (set! f2850@f2775@serialize-library f2775@serialize-library) (set! f284f@f2773@fasl-load f2773@fasl-load) (set! f284e@f2771@fasl-save f2771@fasl-save) (set! f284d@f276f@scm->fasl f276f@scm->fasl) (set! f284c@f276d@annotation-expression f276d@annotation-expression) (set! f284b@f276b@annotation-source f276b@annotation-source) (set! f284a@f2769@annotation? f2769@annotation?) (set! f2849@f2767@annotation-stripped f2767@annotation-stripped) (set! f2848@f2765@read-annotated f2765@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (f285b@current-primitive-locations f285d@mutable? f285f@rewriter f2861@expanded->core f2863@compile-core-expr f2865@pretty-print f2867@compile-core-expr-to-port) (begin (set! f285b@current-primitive-locations (f2855@f277f@make-parameter (lambda (f2868@x) '#f) (lambda (f286a@p) f286a@p))) (set! f285d@mutable? (lambda (f286c@x) (or (pair? f286c@x) (vector? f286c@x) (hashtable? f286c@x)))) (set! f285f@rewriter (lambda (f286e@quote-hack?) ((lambda (f2871@f) (begin (set! f2871@f (lambda (f2872@x) (if (pair? f2872@x) ((lambda (f2874@t) (if (memv f2874@t '(quote)) (if (and f286e@quote-hack? (f285d@mutable? (cadr f2872@x))) ((lambda (f2876@g) (begin (set-symbol-value! f2876@g (cadr f2872@x)) f2876@g)) (gensym)) f2872@x) (if (memv f2874@t '(case-lambda)) (cons 'case-lambda (map (lambda (f2878@x) (cons (car f2878@x) (map f2871@f (cdr f2878@x)))) (cdr f2872@x))) (if (memv f2874@t '(lambda)) (cons* 'lambda (cadr f2872@x) (map f2871@f (cddr f2872@x))) (if (memv f2874@t '(letrec)) ((lambda (f287a@bindings f287b@body*) ((lambda (f287e@lhs* f287f@rhs*) (cons* 'letrec (map list f287e@lhs* (map f2871@f f287f@rhs*)) (map f2871@f f287b@body*))) (map car f287a@bindings) (map cadr f287a@bindings))) (cadr f2872@x) (cddr f2872@x)) (if (memv f2874@t '(letrec*)) ((lambda (f2882@bindings f2883@body*) ((lambda (f2886@lhs* f2887@rhs*) (cons* 'letrec* (map list f2886@lhs* (map f2871@f f2887@rhs*)) (map f2871@f f2883@body*))) (map car f2882@bindings) (map cadr f2882@bindings))) (cadr f2872@x) (cddr f2872@x)) (if (memv f2874@t '(library-letrec*)) ((lambda (f288a@name f288b@x) ((lambda (f288e@bindings f288f@body*) ((lambda (f2892@lhs* f2893@lhs** f2894@rhs*) (cons* 'library-letrec* f288a@name (map list f2892@lhs* f2893@lhs** (map f2871@f f2894@rhs*)) (map f2871@f f288f@body*))) (map car f288e@bindings) (map cadr f288e@bindings) (map caddr f288e@bindings))) (cadr f288b@x) (cddr f288b@x))) (cadr f2872@x) (cdr f2872@x)) (if (memv f2874@t '(begin)) (cons 'begin (map f2871@f (cdr f2872@x))) (if (memv f2874@t '(set!)) (list 'set! (cadr f2872@x) (f2871@f (caddr f2872@x))) (if (memv f2874@t '(primitive)) ((lambda (f2898@op) ((lambda (f289a@t) (if f289a@t ((lambda (f289c@loc) f289c@loc) f289a@t) f2898@op)) ((f285b@current-primitive-locations) f2898@op))) (cadr f2872@x)) (if (memv f2874@t '(define)) f2872@x (if (list? f2872@x) (map f2871@f f2872@x) (error 'rewrite '"invalid form ~s ~s" f2872@x (list? f2872@x)))))))))))))) (car f2872@x)) f2872@x))) f2871@f)) '#f))) (set! f2861@expanded->core (lambda (f289e@x) ((f285f@rewriter '#f) f289e@x))) (set! f2863@compile-core-expr (lambda (f28a0@x) ((f285f@rewriter '#f) f28a0@x))) (set! f2865@pretty-print write) (set! f2867@compile-core-expr-to-port (lambda (f28a2@x f28a3@p) (f2865@pretty-print ((f285f@rewriter '#f) f28a2@x) f28a3@p))) (begin (set! f28ac@f2867@compile-core-expr-to-port f2867@compile-core-expr-to-port) (set! f28ab@f2865@pretty-print f2865@pretty-print) (set! f28aa@f2863@compile-core-expr f2863@compile-core-expr) (set! f28a9@f2861@expanded->core f2861@expanded->core) (set! f28a8@f285f@rewriter f285f@rewriter) (set! f28a7@f285d@mutable? f285d@mutable?) (set! f28a6@f285b@current-primitive-locations f285b@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (f28fb@make-collection f28fd@current-library-collection f2903@f28fe f2905@f2900 f2907@f28ff f290a@library? f290c@make-library f290e@library-id f2910@library-name f2912@library-version f2914@library-imp* f2916@library-vis* f2918@library-inv* f291a@library-subst f291c@library-env f291e@library-visit-state f2920@library-invoke-state f2922@library-visit-code f2924@library-invoke-code f2926@library-visible? f2928@library-source-file-name f292a@set-library-id! f292c@set-library-name! f292e@set-library-version! f2930@set-library-imp*! f2932@set-library-vis*! f2934@set-library-inv*! f2936@set-library-subst! f2938@set-library-env! f293a@set-library-visit-state! f293c@set-library-invoke-state! f293e@set-library-visit-code! f2940@set-library-invoke-code! f2942@set-library-visible?! f2944@set-library-source-file-name! f2946@rp f2948@find-dependencies f294a@find-library-by f294c@library-path f294e@library-extensions f2950@library-name->file-name f2952@file-locator f2954@serialize-all f2956@current-precompiled-library-loader f2958@try-load-from-file f295a@library-loader f295c@current-library-expander f295e@external-pending-libraries f2960@find-external-library f2962@find-library-by-name f2964@library-exists? f2966@find-library-by-spec/die f2968@label->binding-table f296a@install-library-record f296c@install-library f296e@imported-label->binding f2970@invoke-library f2972@visit-library f2974@invoke-library-by-spec f2976@installed-libraries f2978@library-spec) (begin (set! f28fb@make-collection (lambda () ((lambda (f2979@set) ((lambda (f297c@set-cons) (begin (set! f297c@set-cons (lambda (f2981@x f2982@ls) (if (memq f2981@x f2982@ls) f2982@ls (cons f2981@x f2982@ls)))) (lambda f297f ((lambda (f2980) (if (= f2980 '0) (apply (lambda () f2979@set) f297f) (if (= f2980 '1) (apply (lambda (f297d@x) (set! f2979@set (f297c@set-cons f297d@x f2979@set))) f297f) (error 'apply '"invalid arg count")))) (length f297f))))) '#f)) '()))) (set! f28fd@current-library-collection (f2855@f277f@make-parameter (f28fb@make-collection) (lambda (f2985@x) (begin (if (not (procedure? f2985@x)) (assertion-violation 'current-library-collection '"not a procedure" f2985@x) (void)) f2985@x)))) (set! f2903@f28fe (make-record-type-descriptor 'library '#f 'f2901 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! f2905@f2900 '#f) (set! f2907@f28ff (make-record-constructor-descriptor f2903@f28fe '#f f2905@f2900)) (set! f290a@library? (record-predicate f2903@f28fe)) (set! f290c@make-library (record-constructor f2907@f28ff)) (set! f290e@library-id (record-accessor f2903@f28fe '0)) (set! f2910@library-name (record-accessor f2903@f28fe '1)) (set! f2912@library-version (record-accessor f2903@f28fe '2)) (set! f2914@library-imp* (record-accessor f2903@f28fe '3)) (set! f2916@library-vis* (record-accessor f2903@f28fe '4)) (set! f2918@library-inv* (record-accessor f2903@f28fe '5)) (set! f291a@library-subst (record-accessor f2903@f28fe '6)) (set! f291c@library-env (record-accessor f2903@f28fe '7)) (set! f291e@library-visit-state (record-accessor f2903@f28fe '8)) (set! f2920@library-invoke-state (record-accessor f2903@f28fe '9)) (set! f2922@library-visit-code (record-accessor f2903@f28fe '10)) (set! f2924@library-invoke-code (record-accessor f2903@f28fe '11)) (set! f2926@library-visible? (record-accessor f2903@f28fe '12)) (set! f2928@library-source-file-name (record-accessor f2903@f28fe '13)) (set! f292a@set-library-id! (record-mutator f2903@f28fe '0)) (set! f292c@set-library-name! (record-mutator f2903@f28fe '1)) (set! f292e@set-library-version! (record-mutator f2903@f28fe '2)) (set! f2930@set-library-imp*! (record-mutator f2903@f28fe '3)) (set! f2932@set-library-vis*! (record-mutator f2903@f28fe '4)) (set! f2934@set-library-inv*! (record-mutator f2903@f28fe '5)) (set! f2936@set-library-subst! (record-mutator f2903@f28fe '6)) (set! f2938@set-library-env! (record-mutator f2903@f28fe '7)) (set! f293a@set-library-visit-state! (record-mutator f2903@f28fe '8)) (set! f293c@set-library-invoke-state! (record-mutator f2903@f28fe '9)) (set! f293e@set-library-visit-code! (record-mutator f2903@f28fe '10)) (set! f2940@set-library-invoke-code! (record-mutator f2903@f28fe '11)) (set! f2942@set-library-visible?! (record-mutator f2903@f28fe '12)) (set! f2944@set-library-source-file-name! (record-mutator f2903@f28fe '13)) (set! f2946@rp (f2852@f2779@make-record-printer 'library (lambda (f2987@x f2988@p f2989@wr) (begin (if (not (f290a@library? f2987@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (f2912@library-version f2987@x)) (f2910@library-name f2987@x) (append (f2910@library-name f2987@x) (list (f2912@library-version f2987@x))))) f2988@p))))) (set! f2948@find-dependencies (lambda (f298d@ls) (if (null? f298d@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! f294a@find-library-by (lambda (f298f@pred) ((letrec ((f2991@f (lambda (f2993@ls) (if (null? f2993@ls) '#f (if (f298f@pred (car f2993@ls)) (car f2993@ls) (f2991@f (cdr f2993@ls))))))) f2991@f) ((f28fd@current-library-collection))))) (set! f294c@library-path (f2855@f277f@make-parameter '(".") (lambda (f2995@x) (if (and (list? f2995@x) (for-all string? f2995@x)) (map (lambda (f2997@x) f2997@x) f2995@x) (assertion-violation 'library-path '"not a list of strings" f2995@x))))) (set! f294e@library-extensions (f2855@f277f@make-parameter '(".sls" ".ss" ".scm") (lambda (f2999@x) (if (and (list? f2999@x) (for-all string? f2999@x)) (map (lambda (f299b@x) f299b@x) f2999@x) (assertion-violation 'library-extensions '"not a list of strings" f2999@x))))) (set! f2950@library-name->file-name (lambda (f299d@x) (call-with-values (lambda () (open-string-output-port)) (lambda (f29a3@f29a0 f29a4@f29a2) ((lambda (f29a7@extract f29a8@p) ((lambda (f29ac@display-hex) (begin (set! f29ac@display-hex (lambda (f29b5@n) (if (<= '0 f29b5@n '9) (display f29b5@n f29a8@p) (display (integer->char (+ (char->integer '#\a) (- f29b5@n '10))) f29a8@p)))) (begin ((letrec ((f29ad@f (lambda (f29af@ls) (if (not (null? f29af@ls)) (begin (display '"/" f29a8@p) (for-each (lambda (f29b1@c) (if (or (char<=? '#\a f29b1@c '#\z) (char<=? '#\A f29b1@c '#\Z) (char<=? '#\0 f29b1@c '#\9) (memv f29b1@c '(#\- #\. #\_ #\~))) (display f29b1@c f29a8@p) (begin (display '"%" f29a8@p) ((lambda (f29b3@n) (begin (f29ac@display-hex (quotient f29b3@n '16)) (f29ac@display-hex (remainder f29b3@n '16)))) (char->integer f29b1@c))))) (string->list (symbol->string (car f29af@ls)))) (f29ad@f (cdr f29af@ls))) (void))))) f29ad@f) f299d@x) (f29a7@extract)))) '#f)) f29a4@f29a2 f29a3@f29a0))))) (set! f2952@file-locator (f2855@f277f@make-parameter (lambda (f29b7@x) ((lambda (f29b9@str) ((letrec ((f29bb@f (lambda (f29bd@ls f29be@exts f29bf@failed-list) (if (null? f29bd@ls) ((lambda () ((lambda (f29cb@f29c6 f29cd@f29c8 f29cf@f29c7 f29d2@f29c5 f29d4@make-library-resolution-condition f29d6@f29c3 f29d8@f29c4 f29da@library-resolution-condition? f29dc@condition-library f29de@condition-files) (begin (set! f29cb@f29c6 (make-record-type-descriptor '&library-resolution f4c6c@f49b3@&condition-rtd 'f29c9 '#f '#f '#((immutable library) (immutable files)))) (set! f29cd@f29c8 '#f) (set! f29cf@f29c7 (make-record-constructor-descriptor f29cb@f29c6 f4c6d@f49b5@&condition-rcd f29cd@f29c8)) (set! f29d2@f29c5 (record-predicate f29cb@f29c6)) (set! f29d4@make-library-resolution-condition (record-constructor f29cf@f29c7)) (set! f29d6@f29c3 (record-accessor f29cb@f29c6 '0)) (set! f29d8@f29c4 (record-accessor f29cb@f29c6 '1)) (set! f29da@library-resolution-condition? (condition-predicate f29cb@f29c6)) (set! f29dc@condition-library (condition-accessor f29cb@f29c6 f29d6@f29c3)) (set! f29de@condition-files (condition-accessor f29cb@f29c6 f29d8@f29c4)) (raise (condition (f4c8c@f4a4d@make-error) (f4cae@f4aa9@make-who-condition 'expander) (f4c72@f4a0a@make-message-condition '"cannot locate library in library-path") (f29d4@make-library-resolution-condition f29b7@x (reverse f29bf@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? f29be@exts) (f29bb@f (cdr f29bd@ls) (f294e@library-extensions) f29bf@failed-list) ((lambda (f29df@name) (if (file-exists? f29df@name) f29df@name (f29bb@f f29bd@ls (cdr f29be@exts) (cons f29df@name f29bf@failed-list)))) (string-append (car f29bd@ls) f29b9@str (car f29be@exts)))))))) f29bb@f) (f294c@library-path) (f294e@library-extensions) '())) (f2950@library-name->file-name f29b7@x))) (lambda (f29e1@f) (if (procedure? f29e1@f) f29e1@f (assertion-violation 'file-locator '"not a procedure" f29e1@f))))) (set! f2954@serialize-all (lambda (f29e3@serialize f29e4@compile) ((lambda (f29e8@library-desc) (begin (set! f29e8@library-desc (lambda (f29eb@x) (list (f290e@library-id f29eb@x) (f2910@library-name f29eb@x)))) (for-each (lambda (f29e9@x) (if (f2928@library-source-file-name f29e9@x) (f29e3@serialize (f2928@library-source-file-name f29e9@x) (list (f290e@library-id f29e9@x) (f2910@library-name f29e9@x) (f2912@library-version f29e9@x) (map f29e8@library-desc (f2914@library-imp* f29e9@x)) (map f29e8@library-desc (f2916@library-vis* f29e9@x)) (map f29e8@library-desc (f2918@library-inv* f29e9@x)) (f291a@library-subst f29e9@x) (f291c@library-env f29e9@x) (f29e4@compile (f2922@library-visit-code f29e9@x)) (f29e4@compile (f2924@library-invoke-code f29e9@x)) (f2926@library-visible? f29e9@x))) (void))) ((f28fd@current-library-collection))))) '#f))) (set! f2956@current-precompiled-library-loader (f2855@f277f@make-parameter (lambda (f29ed@filename f29ee@sk) '#f))) (set! f2958@try-load-from-file (lambda (f29f1@filename) ((f2956@current-precompiled-library-loader) f29f1@filename (lambda f2a17 ((lambda (f2a18) (if (= f2a18 '11) (apply (lambda (f29f3@id f29f4@name f29f5@ver f29f6@imp* f29f7@vis* f29f8@inv* f29f9@exp-subst f29fa@exp-env f29fb@visit-proc f29fc@invoke-proc f29fd@visible?) ((letrec ((f2a09@f (lambda (f2a0b@deps) (if (null? f2a0b@deps) (begin (f296c@install-library f29f3@id f29f4@name f29f5@ver f29f6@imp* f29f7@vis* f29f8@inv* f29f9@exp-subst f29fa@exp-env f29fb@visit-proc f29fc@invoke-proc '#f '#f f29fd@visible? '#f) '#t) ((lambda (f2a0d@d) ((lambda (f2a0f@label f2a10@dname) ((lambda (f2a13@l) (if (and (f290a@library? f2a13@l) (eq? f2a0f@label (f290e@library-id f2a13@l))) (f2a09@f (cdr f2a0b@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" f29f4@name f2a10@dname f29f1@filename f2a13@l f2a0f@label (f290e@library-id f2a13@l)) '#f))) (f2962@find-library-by-name f2a10@dname))) (car f2a0d@d) (cadr f2a0d@d))) (car f2a0b@deps)))))) f2a09@f) (append f29f6@imp* f29f7@vis* f29f8@inv*))) f2a17) (if (>= f2a18 '0) (apply (lambda f2a15@others '#f) f2a17) (error 'apply '"invalid arg count")))) (length f2a17)))))) (set! f295a@library-loader (f2855@f277f@make-parameter (lambda (f2a19@x) ((lambda (f2a1b@file-name) (if (not f2a1b@file-name) (assertion-violation '#f '"cannot file library" f2a19@x) (or (f2958@try-load-from-file f2a1b@file-name) ((f295c@current-library-expander) (f2854@f277d@read-library-source-file f2a1b@file-name) f2a1b@file-name (lambda (f2a1d@name) (if (not (fast-equal? f2a1d@name f2a19@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (f2a23@f2a20 f2a24@f2a22) ((lambda (f2a27@e f2a28@p) (begin (display '"expected to find library " f2a28@p) (write f2a19@x f2a28@p) (display '" in file " f2a28@p) (display f2a1b@file-name f2a28@p) (display '", found " f2a28@p) (write f2a1d@name f2a28@p) (display '" instead" f2a28@p) (f2a27@e))) f2a24@f2a22 f2a23@f2a20)))) (void))))))) ((f2952@file-locator) f2a19@x))) (lambda (f2a2b@f) (if (procedure? f2a2b@f) f2a2b@f (assertion-violation 'library-locator '"not a procedure" f2a2b@f))))) (set! f295c@current-library-expander (f2855@f277f@make-parameter (lambda (f2a2d@x) (assertion-violation 'library-expander '"not initialized")) (lambda (f2a2f@f) (if (procedure? f2a2f@f) f2a2f@f (assertion-violation 'library-expander '"not a procedure" f2a2f@f))))) (set! f295e@external-pending-libraries (f2855@f277f@make-parameter '())) (set! f2960@find-external-library (lambda (f2a31@name) (begin (if (member f2a31@name (f295e@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" f2a31@name) (void)) ((lambda (f2a37@f2a34 f2a38@f2a36) ((lambda (f2a3b@swap) (dynamic-wind f2a3b@swap (lambda () (begin ((f295a@library-loader) f2a31@name) (or (f294a@find-library-by (lambda (f2a3d@x) (fast-equal? (f2910@library-name f2a3d@x) f2a31@name))) (assertion-violation '#f '"handling external library did not yield the correct library" f2a31@name)))) f2a3b@swap)) (lambda () ((lambda (f2a3f@t) (begin (f2a37@f2a34 f2a38@f2a36) (set! f2a38@f2a36 f2a3f@t))) (f2a37@f2a34))))) f295e@external-pending-libraries (cons f2a31@name (f295e@external-pending-libraries)))))) (set! f2962@find-library-by-name (lambda (f2a41@name) (or (f294a@find-library-by (lambda (f2a43@x) (fast-equal? (f2910@library-name f2a43@x) f2a41@name))) (f2960@find-external-library f2a41@name)))) (set! f2964@library-exists? (lambda (f2a45@name) (and (f294a@find-library-by (lambda (f2a47@x) (fast-equal? (f2910@library-name f2a47@x) f2a45@name))) '#t))) (set! f2966@find-library-by-spec/die (lambda (f2a49@spec) ((lambda (f2a4b@id) (or (f294a@find-library-by (lambda (f2a4d@x) (eq? f2a4b@id (f290e@library-id f2a4d@x)))) (assertion-violation '#f '"cannot find library with required spec" f2a49@spec))) (car f2a49@spec)))) (set! f2968@label->binding-table (make-eq-hashtable)) (set! f296a@install-library-record (lambda (f2a4f@lib) (begin ((lambda (f2a51@exp-env) (for-each (lambda (f2a53@x) ((lambda (f2a55@label f2a56@binding) ((lambda (f2a59@binding) (begin (if (hashtable-ref f2968@label->binding-table f2a55@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" f2a55@label (hashtable-ref f2968@label->binding-table f2a55@label '#f) f2a59@binding) (exit)) (void)) (hashtable-set! f2968@label->binding-table f2a55@label f2a59@binding))) ((lambda (f2a5b@t) (if (memv f2a5b@t '(global)) (cons 'global (cons f2a4f@lib (cdr f2a56@binding))) (if (memv f2a5b@t '(global-macro)) (cons 'global-macro (cons f2a4f@lib (cdr f2a56@binding))) (if (memv f2a5b@t '(global-macro!)) (cons 'global-macro! (cons f2a4f@lib (cdr f2a56@binding))) f2a56@binding)))) (car f2a56@binding)))) (car f2a53@x) (cdr f2a53@x))) f2a51@exp-env)) (f291c@library-env f2a4f@lib)) ((f28fd@current-library-collection) f2a4f@lib)))) (set! f296c@install-library (lambda (f2a5d@id f2a5e@name f2a5f@ver f2a60@imp* f2a61@vis* f2a62@inv* f2a63@exp-subst f2a64@exp-env f2a65@visit-proc f2a66@invoke-proc f2a67@visit-code f2a68@invoke-code f2a69@visible? f2a6a@source-file-name) ((lambda (f2a79@imp-lib* f2a7a@vis-lib* f2a7b@inv-lib*) (begin (if (not (and (symbol? f2a5d@id) (list? f2a5e@name) (list? f2a5f@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" f2a5d@id f2a5e@name f2a5f@ver) (void)) (if (f2964@library-exists? f2a5e@name) (assertion-violation 'install-library '"library is already installed" f2a5e@name) (void)) ((lambda (f2a7f@lib) (f296a@install-library-record f2a7f@lib)) (f290c@make-library f2a5d@id f2a5e@name f2a5f@ver f2a79@imp-lib* f2a7a@vis-lib* f2a7b@inv-lib* f2a63@exp-subst f2a64@exp-env f2a65@visit-proc f2a66@invoke-proc f2a67@visit-code f2a68@invoke-code f2a69@visible? f2a6a@source-file-name)))) (map f2966@find-library-by-spec/die f2a60@imp*) (map f2966@find-library-by-spec/die f2a61@vis*) (map f2966@find-library-by-spec/die f2a62@inv*)))) (set! f296e@imported-label->binding (lambda (f2a81@lab) (hashtable-ref f2968@label->binding-table f2a81@lab '#f))) (set! f2970@invoke-library (lambda (f2a83@lib) ((lambda (f2a85@invoke) (if (procedure? f2a85@invoke) (begin (f293c@set-library-invoke-state! f2a83@lib (lambda () (assertion-violation 'invoke '"circularity detected" f2a83@lib))) (for-each f2970@invoke-library (f2918@library-inv* f2a83@lib)) (f293c@set-library-invoke-state! f2a83@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" f2a83@lib))) (f2a85@invoke) (f293c@set-library-invoke-state! f2a83@lib '#t)) (void))) (f2920@library-invoke-state f2a83@lib)))) (set! f2972@visit-library (lambda (f2a87@lib) ((lambda (f2a89@visit) (if (procedure? f2a89@visit) (begin (f293a@set-library-visit-state! f2a87@lib (lambda () (assertion-violation 'visit '"circularity detected" f2a87@lib))) (for-each f2970@invoke-library (f2916@library-vis* f2a87@lib)) (f293a@set-library-visit-state! f2a87@lib (lambda () (assertion-violation 'invoke '"first visit did not return" f2a87@lib))) (f2a89@visit) (f293a@set-library-visit-state! f2a87@lib '#t)) (void))) (f291e@library-visit-state f2a87@lib)))) (set! f2974@invoke-library-by-spec (lambda (f2a8b@spec) (f2970@invoke-library (f2966@find-library-by-spec/die f2a8b@spec)))) (set! f2976@installed-libraries (lambda f2a93 ((lambda (f2a94) (if (= f2a94 '1) (apply (lambda (f2a8d@all?) ((letrec ((f2a8f@f (lambda (f2a91@ls) (if (null? f2a91@ls) '() (if (or f2a8d@all? (f2926@library-visible? (car f2a91@ls))) (cons (car f2a91@ls) (f2a8f@f (cdr f2a91@ls))) (f2a8f@f (cdr f2a91@ls))))))) f2a8f@f) ((f28fd@current-library-collection)))) f2a93) (if (= f2a94 '0) (apply (lambda () (f2976@installed-libraries '#f)) f2a93) (error 'apply '"invalid arg count")))) (length f2a93)))) (set! f2978@library-spec (lambda (f2a95@x) (begin (if (not (f290a@library? f2a95@x)) (assertion-violation 'library-spec '"not a library" f2a95@x) (void)) (list (f290e@library-id f2a95@x) (f2910@library-name f2a95@x) (f2912@library-version f2a95@x))))) (begin (set! f2ad3@f2978@library-spec f2978@library-spec) (set! f2ad2@f2976@installed-libraries f2976@installed-libraries) (set! f2ad1@f2974@invoke-library-by-spec f2974@invoke-library-by-spec) (set! f2ad0@f2972@visit-library f2972@visit-library) (set! f2acf@f2970@invoke-library f2970@invoke-library) (set! f2ace@f296e@imported-label->binding f296e@imported-label->binding) (set! f2acd@f296c@install-library f296c@install-library) (set! f2acc@f296a@install-library-record f296a@install-library-record) (set! f2acb@f2968@label->binding-table f2968@label->binding-table) (set! f2aca@f2966@find-library-by-spec/die f2966@find-library-by-spec/die) (set! f2ac9@f2964@library-exists? f2964@library-exists?) (set! f2ac8@f2962@find-library-by-name f2962@find-library-by-name) (set! f2ac7@f2960@find-external-library f2960@find-external-library) (set! f2ac6@f295e@external-pending-libraries f295e@external-pending-libraries) (set! f2ac5@f295c@current-library-expander f295c@current-library-expander) (set! f2ac4@f295a@library-loader f295a@library-loader) (set! f2ac3@f2958@try-load-from-file f2958@try-load-from-file) (set! f2ac2@f2956@current-precompiled-library-loader f2956@current-precompiled-library-loader) (set! f2ac1@f2954@serialize-all f2954@serialize-all) (set! f2ac0@f2952@file-locator f2952@file-locator) (set! f2abf@f2950@library-name->file-name f2950@library-name->file-name) (set! f2abe@f294e@library-extensions f294e@library-extensions) (set! f2abd@f294c@library-path f294c@library-path) (set! f2abc@f294a@find-library-by f294a@find-library-by) (set! f2abb@f2948@find-dependencies f2948@find-dependencies) (set! f2aba@f2946@rp f2946@rp) (set! f2ab9@f2944@set-library-source-file-name! f2944@set-library-source-file-name!) (set! f2ab8@f2942@set-library-visible?! f2942@set-library-visible?!) (set! f2ab7@f2940@set-library-invoke-code! f2940@set-library-invoke-code!) (set! f2ab6@f293e@set-library-visit-code! f293e@set-library-visit-code!) (set! f2ab5@f293c@set-library-invoke-state! f293c@set-library-invoke-state!) (set! f2ab4@f293a@set-library-visit-state! f293a@set-library-visit-state!) (set! f2ab3@f2938@set-library-env! f2938@set-library-env!) (set! f2ab2@f2936@set-library-subst! f2936@set-library-subst!) (set! f2ab1@f2934@set-library-inv*! f2934@set-library-inv*!) (set! f2ab0@f2932@set-library-vis*! f2932@set-library-vis*!) (set! f2aaf@f2930@set-library-imp*! f2930@set-library-imp*!) (set! f2aae@f292e@set-library-version! f292e@set-library-version!) (set! f2aad@f292c@set-library-name! f292c@set-library-name!) (set! f2aac@f292a@set-library-id! f292a@set-library-id!) (set! f2aab@f2928@library-source-file-name f2928@library-source-file-name) (set! f2aaa@f2926@library-visible? f2926@library-visible?) (set! f2aa9@f2924@library-invoke-code f2924@library-invoke-code) (set! f2aa8@f2922@library-visit-code f2922@library-visit-code) (set! f2aa7@f2920@library-invoke-state f2920@library-invoke-state) (set! f2aa6@f291e@library-visit-state f291e@library-visit-state) (set! f2aa5@f291c@library-env f291c@library-env) (set! f2aa4@f291a@library-subst f291a@library-subst) (set! f2aa3@f2918@library-inv* f2918@library-inv*) (set! f2aa2@f2916@library-vis* f2916@library-vis*) (set! f2aa1@f2914@library-imp* f2914@library-imp*) (set! f2aa0@f2912@library-version f2912@library-version) (set! f2a9f@f2910@library-name f2910@library-name) (set! f2a9e@f290e@library-id f290e@library-id) (set! f2a9d@f290c@make-library f290c@make-library) (set! f2a9c@f290a@library? f290a@library?) (set! f2a9b@f2907@f28ff f2907@f28ff) (set! f2a9a@f2905@f2900 f2905@f2900) (set! f2a99@f2903@f28fe f2903@f28fe) (set! f2a98@f28fd@current-library-collection f28fd@current-library-collection) (set! f2a97@f28fb@make-collection f28fb@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (f2ad6@build-global-define f2b47@build-lambda f2b49@build-case-lambda f2b4b@build-let f2b79@build-sequence f2b7b@build-void f2b7d@build-letrec f2b7f@build-letrec* f2b81@build-library-letrec* f2b83@build-receive) (begin (set! f2ad6@build-global-define (lambda (f2b84@x) (f2b7b@build-void))) (set! f2b47@build-lambda (lambda (f2b86@ae f2b87@vars f2b88@exp) (list 'lambda f2b87@vars f2b88@exp))) (set! f2b49@build-case-lambda (lambda (f2b8c@ae f2b8d@vars* f2b8e@exp*) ((lambda (f2b93@build-error f2b95@build-pred f2b97@build-apply f2b99@expand-case-lambda) (begin (set! f2b93@build-error (lambda (f2bca@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! f2b95@build-pred (lambda (f2bb2@ae f2bb3@n f2bb4@vars) (call-with-values (lambda () ((letrec ((f2bbc@f (lambda (f2bbe@vars f2bbf@count) (if (pair? f2bbe@vars) (f2bbc@f (cdr f2bbe@vars) (+ f2bbf@count '1)) (if (null? f2bbe@vars) (values f2bbf@count '=) (values f2bbf@count '>=)))))) f2bbc@f) f2bb4@vars '0)) (lambda (f2bc2@f2bb9 f2bc3@f2bbb) ((lambda (f2bc6@pred f2bc7@count) (list (list 'primitive f2bc6@pred) f2bb3@n (list 'quote f2bc7@count))) f2bc3@f2bbb f2bc2@f2bb9))))) (set! f2b97@build-apply (lambda (f2baa@ae f2bab@g f2bac@vars f2bad@exp) (list '(primitive apply) (f2b47@build-lambda f2baa@ae f2bac@vars f2bad@exp) f2bab@g))) (set! f2b99@expand-case-lambda (lambda (f2b9a@ae f2b9b@vars f2b9c@exp*) ((lambda (f2ba0@g f2ba1@n) (list 'lambda f2ba0@g (f2b4b@build-let f2b9a@ae (list f2ba1@n) (list (list '(primitive length) f2ba0@g)) ((letrec ((f2ba4@f (lambda (f2ba6@vars* f2ba7@exp*) (if (null? f2ba6@vars*) (f2b93@build-error f2b9a@ae) (list 'if (f2b95@build-pred f2b9a@ae f2ba1@n (car f2ba6@vars*)) (f2b97@build-apply f2b9a@ae f2ba0@g (car f2ba6@vars*) (car f2ba7@exp*)) (f2ba4@f (cdr f2ba6@vars*) (cdr f2ba7@exp*))))))) f2ba4@f) f2b8d@vars* f2b9c@exp*)))) (gensym) (gensym)))) (if (= (length f2b8e@exp*) '1) (f2b47@build-lambda f2b8c@ae (car f2b8d@vars*) (car f2b8e@exp*)) (f2b99@expand-case-lambda f2b8c@ae f2b8d@vars* f2b8e@exp*)))) '#f '#f '#f '#f))) (set! f2b4b@build-let (lambda (f2bcc@ae f2bcd@lhs* f2bce@rhs* f2bcf@body) (cons (f2b47@build-lambda f2bcc@ae f2bcd@lhs* f2bcf@body) f2bce@rhs*))) (set! f2b79@build-sequence (lambda (f2bd4@ae f2bd5@exps) ((letrec ((f2bd8@loop (lambda (f2bda@exps) (if (null? (cdr f2bda@exps)) (car f2bda@exps) (if (equal? (car f2bda@exps) (f2b7b@build-void)) (f2bd8@loop (cdr f2bda@exps)) (cons 'begin f2bda@exps)))))) f2bd8@loop) f2bd5@exps))) (set! f2b7b@build-void (lambda () '((primitive void)))) (set! f2b7d@build-letrec (lambda (f2bdc@ae f2bdd@vars f2bde@val-exps f2bdf@body-exp) (if (null? f2bdd@vars) f2bdf@body-exp (list 'letrec (map list f2bdd@vars f2bde@val-exps) f2bdf@body-exp)))) (set! f2b7f@build-letrec* (lambda (f2be4@ae f2be5@vars f2be6@val-exps f2be7@body-exp) (if (null? f2be5@vars) f2be7@body-exp (f2b4b@build-let f2be4@ae f2be5@vars (map (lambda (f2bec@x) (list 'quote '#f)) f2be5@vars) (f2b79@build-sequence f2be4@ae (append (map (lambda (f2bee@lhs f2bef@rhs) (list 'set! f2bee@lhs f2bef@rhs)) f2be5@vars f2be6@val-exps) (list f2be7@body-exp))))))) (set! f2b81@build-library-letrec* (lambda (f2bf2@ae f2bf3@name f2bf4@vars f2bf5@locs f2bf6@val-exps f2bf7@body-exp) (list 'library-letrec* f2bf3@name (map list f2bf4@vars f2bf5@locs f2bf6@val-exps) f2bf7@body-exp))) (set! f2b83@build-receive (lambda (f2bfe@ae f2bff@vars f2c00@producer f2c01@body*) (begin (display '"************** in ") (cons 'receive (cons f2bff@vars (cons f2c00@producer f2c01@body*)))))) (begin (set! f2c0f@f2b83@build-receive f2b83@build-receive) (set! f2c0e@f2b81@build-library-letrec* f2b81@build-library-letrec*) (set! f2c0d@f2b7f@build-letrec* f2b7f@build-letrec*) (set! f2c0c@f2b7d@build-letrec f2b7d@build-letrec) (set! f2c0b@f2b7b@build-void f2b7b@build-void) (set! f2c0a@f2b79@build-sequence f2b79@build-sequence) (set! f2c09@f2b4b@build-let f2b4b@build-let) (set! f2c08@f2b49@build-case-lambda f2b49@build-case-lambda) (set! f2c07@f2b47@build-lambda f2b47@build-lambda) (set! f2c06@f2ad6@build-global-define f2ad6@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (f2c1e@file-options-macro f2c20@set-cons f2c22@set-union f2c27@top-mark* f2c29@top-marked? f2c2b@gen-lexical f2c2d@gen-global f2c2f@gen-label f2c31@gen-top-level-label f2c33@gen-define-label+loc f2c35@gen-define-label f2c3b@f2c36 f2c3d@f2c38 f2c3f@f2c37 f2c42@rib? f2c44@make-rib f2c46@rib-sym* f2c48@rib-mark** f2c4a@rib-label* f2c4c@rib-sealed/freq f2c4e@rib-cache f2c50@set-rib-sym*! f2c52@set-rib-mark**! f2c54@set-rib-label*! f2c56@set-rib-sealed/freq! f2c58@set-rib-cache! f2c5a@make-empty-rib f2c5c@extend-rib! f2c5e@extend-rib/nc! f2c60@make-rib-map f2c62@seal-rib! f2c64@unseal-rib! f2c66@make-full-rib f2c6c@f2c67 f2c6e@f2c69 f2c70@f2c68 f2c73@stx? f2c75@make-stx f2c77@stx-expr f2c79@stx-mark* f2c7b@stx-subst* f2c7d@stx-ae* f2c7f@set-stx-expr! f2c81@set-stx-mark*! f2c83@set-stx-subst*! f2c85@set-stx-ae*! f2c87@rp f2c89@datum->stx f2c8b@gen-mark f2c8d@anti-mark f2c8f@anti-mark? f2c91@join-wraps f2c93@mkstx f2c95@add-mark f2c97@add-subst f2c99@syntax-kind? f2c9b@syntax-vector->list f2c9d@syntax-pair? f2c9f@syntax-vector? f2ca1@syntax-null? f2ca3@syntax-list? f2ca5@syntax-car f2ca7@syntax-cdr f2ca9@syntax->list f2cab@id? f2cad@id->sym f2caf@same-marks? f2cb1@bound-id=? f2cb3@free-id=? f2cb5@valid-bound-ids? f2cb7@distinct-bound-ids? f2cb9@bound-id-member? f2cbb@self-evaluating? f2cbd@strip-annotations f2cbf@strip f2cc1@stx->datum f2cc3@same-marks*? f2cc5@id->label f2cc7@id->real-label f2cc9@label->binding f2ccb@make-binding f2ccd@binding-type f2ccf@binding-value f2cd1@raise-unbound-error f2cd3@syntax-type f2ce1@sanitize-binding f2ce3@make-variable-transformer f2ce5@variable-transformer? f2ce7@variable-transformer-procedure f2ce9@make-eval-transformer f2e3a@parse-define f2e3c@parse-define-syntax f2e3e@scheme-stx-hashtable f2e40@scheme-stx f2e42@lexical-var f2e44@lexical-mutable? f2e46@set-lexical-mutable! f2e48@add-lexical f2e4a@add-lexicals f2e4c@letrec-helper f2e4e@letrec-transformer f2e50@letrec*-transformer f2e52@fluid-let-syntax-transformer f2e54@type-descriptor-transformer f2e56@record-type-descriptor-transformer f2e58@record-constructor-descriptor-transformer f2e5a@when-macro f2e5c@unless-macro f2e5e@if-transformer f2e60@and-transformer f2e62@or-transformer f2e64@case-macro f2e66@quote-transformer f2e68@case-lambda-transformer f2e6a@lambda-transformer f2e6c@bless f2e6e@with-syntax-macro f2e70@invalid-fmls-error f2e72@let-macro f2e74@let-values-macro f2e76@let*-values-macro f2e78@trace-lambda-macro f2e7a@trace-define-macro f2e7c@trace-define-syntax-macro f2e7e@trace-let/rec-syntax f2e80@trace-let-syntax-macro f2e82@trace-letrec-syntax-macro f2e84@guard-macro f2e86@define-enumeration-macro f2e88@time-macro f2e8a@delay-macro f2e8c@assert-macro f2e8e@endianness-macro f2e90@identifier-syntax-macro f2e92@do-macro f2e94@let*-macro f2e96@or-macro f2e98@and-macro f2e9a@cond-macro f2e9c@do-include f2e9e@include-macro f2ea0@include-into-macro f2ea2@syntax-rules-macro f2ea4@quasiquote-macro f2ea6@quasisyntax-macro f2ea8@define-struct-macro f2eaa@define-record-type-macro f2eac@define-condition-type-macro f2eae@incorrect-usage-macro f2eb0@parameterize-macro f2eb2@foreign-call-transformer f2eb4@convert-pattern f2eb6@syntax-dispatch f2eb8@ellipsis? f2eba@underscore? f2ebc@verify-literals f2ebe@syntax-case-transformer f2ec0@ellipsis-map f2ec2@syntax-transformer f2ec4@core-macro-transformer f2ec6@symbol-macro f2ec8@macro-transformer f2eca@local-macro-transformer f2ecc@do-macro-call f2ece@chi-macro f2ed0@chi-local-macro f2ed2@chi-global-macro f2ed4@chi-expr* f2ed6@chi-application f2ed8@chi-expr f2eda@chi-set! f2edc@verify-formals f2ede@chi-lambda-clause f2ee0@chi-lambda-clause* f2ee2@chi-defun f2ee4@chi-rhs f2ee6@expand-interaction-rhs*/init* f2ee8@chi-rhs* f2eea@find-bound=? f2eec@find-dups f2eee@chi-internal f2ef0@parse-module f2ef6@f2ef1 f2ef8@f2ef3 f2efa@f2ef2 f2efd@module-interface? f2eff@make-module-interface f2f01@module-interface-first-mark f2f03@module-interface-exp-id-vec f2f05@module-interface-exp-lab-vec f2f07@set-module-interface-first-mark! f2f09@set-module-interface-exp-id-vec! f2f0b@set-module-interface-exp-lab-vec! f2f0d@module-interface-exp-id* f2f0f@chi-internal-module f2f11@chi-body* f2f13@expand-transformer f2f15@parse-exports f2f17@parse-library-name f2f19@parse-library f2f1b@parse-import-spec* f2f1d@make-top-rib f2f1f@make-collector f2f21@inv-collector f2f23@vis-collector f2f25@imp-collector f2f27@chi-library-internal f2f29@chi-interaction-expr f2f2b@library-body-expander f2f2d@core-library-expander f2f2f@parse-top-level-program f2f31@top-level-expander f2f37@f2f32 f2f39@f2f34 f2f3b@f2f33 f2f3e@env? f2f40@make-env f2f42@env-names f2f44@env-labels f2f46@env-itc f2f48@set-env-names! f2f4a@set-env-labels! f2f4c@set-env-itc! f2f4e@rp f2f54@f2f4f f2f56@f2f51 f2f58@f2f50 f2f5b@interaction-env? f2f5d@make-interaction-env f2f5f@interaction-env-rib f2f61@interaction-env-r f2f63@interaction-env-locs f2f65@set-interaction-env-rib! f2f67@set-interaction-env-r! f2f69@set-interaction-env-locs! f2f6b@rp f2f6d@interaction-environment-symbols f2f6f@environment-bindings f2f71@parse-binding f2f73@environment? f2f75@environment-symbols f2f77@environment f2f79@null-environment f2f7b@scheme-report-environment f2f7d@expand f2f7f@eval f2f81@library-expander f2f83@boot-library-expand f2f85@rev-map-append f2f87@build-exports f2f89@make-export-subst f2f8b@make-export-env/macros f2f8d@generate-temporaries f2f8f@free-identifier=? f2f91@bound-identifier=? f2f93@make-source-condition f2f95@extract-position-condition f2f97@expression-position f2f99@assertion-error f2f9b@syntax-error f2f9d@syntax-violation* f2f9f@syntax-violation f2fa1@identifier? f2fa3@datum->syntax f2fa5@syntax->datum f2fa7@compile-r6rs-top-level f2fa9@pre-compile-r6rs-top-level f2fab@interaction-environment f2fad@top-level-context) (begin (set! f2c1e@file-options-macro (lambda (f2fae@x) ((lambda (f2fb1@valid-option?) (begin (set! f2fb1@valid-option? (lambda (f2fba@x) (and (f2cab@id? f2fba@x) (memq (f2cad@id->sym f2fba@x) '(no-fail no-create no-truncate))))) ((lambda (f2fb2@t) ((lambda (f2fb4@ls/false) (if (and f2fb4@ls/false (apply (lambda (f2fb6@opt*) (for-all f2fb1@valid-option? f2fb6@opt*)) f2fb4@ls/false)) (apply (lambda (f2fb8@opt*) (f2e6c@bless (list 'make-file-options (list 'quote f2fb8@opt*)))) f2fb4@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f2fb2@t))) (f2eb6@syntax-dispatch f2fb2@t '(_ . each-any)))) f2fae@x))) '#f))) (set! f2c20@set-cons (lambda (f2fbc@x f2fbd@ls) (if (memq f2fbc@x f2fbd@ls) f2fbd@ls (cons f2fbc@x f2fbd@ls)))) (set! f2c22@set-union (lambda (f2fc0@ls1 f2fc1@ls2) (if (null? f2fc0@ls1) f2fc1@ls2 (if (memq (car f2fc0@ls1) f2fc1@ls2) (f2c22@set-union (cdr f2fc0@ls1) f2fc1@ls2) (cons (car f2fc0@ls1) (f2c22@set-union (cdr f2fc0@ls1) f2fc1@ls2)))))) (set! f2c27@top-mark* '(top)) (set! f2c29@top-marked? (lambda (f2fc4@m*) (memq 'top f2fc4@m*))) (set! f2c2b@gen-lexical (lambda (f2fc6@sym) (if (symbol? f2fc6@sym) (gensym f2fc6@sym) (if (f2c73@stx? f2fc6@sym) (f2c2b@gen-lexical (f2cad@id->sym f2fc6@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" f2fc6@sym))))) (set! f2c2d@gen-global (lambda (f2fc8@x) (f2c2b@gen-lexical f2fc8@x))) (set! f2c2f@gen-label (lambda (f2fca@_) (gensym))) (set! f2c31@gen-top-level-label (lambda (f2fcc@id f2fcd@rib) ((lambda (f2fd1@find) (begin (set! f2fd1@find (lambda (f2fdc@sym f2fdd@mark* f2fde@sym* f2fdf@mark** f2fe0@label*) (and (pair? f2fde@sym*) (if (and (eq? f2fdc@sym (car f2fde@sym*)) (f2caf@same-marks? f2fdd@mark* (car f2fdf@mark**))) (car f2fe0@label*) (f2fd1@find f2fdc@sym f2fdd@mark* (cdr f2fde@sym*) (cdr f2fdf@mark**) (cdr f2fe0@label*)))))) ((lambda (f2fd2@sym f2fd3@mark*) ((lambda (f2fd6@sym*) ((lambda (f2fd8@t) (if f2fd8@t ((lambda (f2fda@label) (if (f2ace@f296e@imported-label->binding f2fda@label) (gensym) f2fda@label)) f2fd8@t) (gensym))) (and (memq f2fd2@sym (f2c46@rib-sym* f2fcd@rib)) (f2fd1@find f2fd2@sym f2fd3@mark* f2fd6@sym* (f2c48@rib-mark** f2fcd@rib) (f2c4a@rib-label* f2fcd@rib))))) (f2c46@rib-sym* f2fcd@rib))) (f2cad@id->sym f2fcc@id) (f2c79@stx-mark* f2fcc@id)))) '#f))) (set! f2c33@gen-define-label+loc (lambda (f2fe6@id f2fe7@rib) ((lambda (f2fea@t) (if f2fea@t ((lambda (f2fec@env) ((lambda (f2fee@label f2fef@locs) (values f2fee@label ((lambda (f2ff2@t) (if f2ff2@t (cdr f2ff2@t) ((lambda (f2ff4@loc) (begin (f2f69@set-interaction-env-locs! f2fec@env (cons (cons f2fee@label f2ff4@loc) f2fef@locs)) f2ff4@loc)) (f2c2b@gen-lexical f2fe6@id)))) (assq f2fee@label f2fef@locs)))) (f2c31@gen-top-level-label f2fe6@id f2fe7@rib) (f2f63@interaction-env-locs f2fec@env))) f2fea@t) (values (gensym) (f2c2b@gen-lexical f2fe6@id)))) (f2fad@top-level-context)))) (set! f2c35@gen-define-label (lambda (f2ff6@id f2ff7@rib) (if (f2fad@top-level-context) (f2c31@gen-top-level-label f2ff6@id f2ff7@rib) (gensym)))) (set! f2c3b@f2c36 (make-record-type-descriptor 'rib '#f 'f2c39 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! f2c3d@f2c38 '#f) (set! f2c3f@f2c37 (make-record-constructor-descriptor f2c3b@f2c36 '#f f2c3d@f2c38)) (set! f2c42@rib? (record-predicate f2c3b@f2c36)) (set! f2c44@make-rib (record-constructor f2c3f@f2c37)) (set! f2c46@rib-sym* (record-accessor f2c3b@f2c36 '0)) (set! f2c48@rib-mark** (record-accessor f2c3b@f2c36 '1)) (set! f2c4a@rib-label* (record-accessor f2c3b@f2c36 '2)) (set! f2c4c@rib-sealed/freq (record-accessor f2c3b@f2c36 '3)) (set! f2c4e@rib-cache (record-accessor f2c3b@f2c36 '4)) (set! f2c50@set-rib-sym*! (record-mutator f2c3b@f2c36 '0)) (set! f2c52@set-rib-mark**! (record-mutator f2c3b@f2c36 '1)) (set! f2c54@set-rib-label*! (record-mutator f2c3b@f2c36 '2)) (set! f2c56@set-rib-sealed/freq! (record-mutator f2c3b@f2c36 '3)) (set! f2c58@set-rib-cache! (record-mutator f2c3b@f2c36 '4)) (set! f2c5a@make-empty-rib (lambda () (f2c44@make-rib '() '() '() '#f '#f))) (set! f2c5c@extend-rib! (lambda (f2ffa@rib f2ffb@id f2ffc@label) ((lambda (f3001@find) (begin (set! f3001@find (lambda (f300e@sym f300f@mark* f3010@sym* f3011@mark** f3012@label*) (and (pair? f3010@sym*) (if (and (eq? f300e@sym (car f3010@sym*)) (f2caf@same-marks? f300f@mark* (car f3011@mark**))) f3012@label* (f3001@find f300e@sym f300f@mark* (cdr f3010@sym*) (cdr f3011@mark**) (cdr f3012@label*)))))) (begin (if (f2c4c@rib-sealed/freq f2ffa@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" f2ffa@rib) (void)) ((lambda (f3002@sym f3003@mark*) ((lambda (f3006@sym*) ((lambda (f3008@t) (if f3008@t ((lambda (f300a@p) (if (not (eq? f2ffc@label (car f300a@p))) (if (f2fad@top-level-context) (set-car! f300a@p f2ffc@label) (f2f9f@syntax-violation '#f '"multiple definitions of identifier" f2ffb@id)) (void))) f3008@t) (begin (if (f2c4e@rib-cache f2ffa@rib) (hashtable-update! (f2c4e@rib-cache f2ffa@rib) f3002@sym (lambda (f300c@e) (cons (cons f3003@mark* f2ffc@label) f300c@e)) '()) (void)) (f2c50@set-rib-sym*! f2ffa@rib (cons f3002@sym f3006@sym*)) (f2c52@set-rib-mark**! f2ffa@rib (cons f3003@mark* (f2c48@rib-mark** f2ffa@rib))) (f2c54@set-rib-label*! f2ffa@rib (cons f2ffc@label (f2c4a@rib-label* f2ffa@rib)))))) (and (memq f3002@sym (f2c46@rib-sym* f2ffa@rib)) (f3001@find f3002@sym f3003@mark* f3006@sym* (f2c48@rib-mark** f2ffa@rib) (f2c4a@rib-label* f2ffa@rib))))) (f2c46@rib-sym* f2ffa@rib))) (f2cad@id->sym f2ffb@id) (f2c79@stx-mark* f2ffb@id))))) '#f))) (set! f2c5e@extend-rib/nc! (lambda (f3018@rib f3019@id f301a@label) ((lambda (f301e@sym f301f@mark*) ((lambda (f3022@sym*) (begin (if (f2c4e@rib-cache f3018@rib) (hashtable-update! (f2c4e@rib-cache f3018@rib) f301e@sym (lambda (f3024@e) (cons (cons f301f@mark* f301a@label) f3024@e)) '()) (void)) (f2c50@set-rib-sym*! f3018@rib (cons f301e@sym f3022@sym*)) (f2c52@set-rib-mark**! f3018@rib (cons f301f@mark* (f2c48@rib-mark** f3018@rib))) (f2c54@set-rib-label*! f3018@rib (cons f301a@label (f2c4a@rib-label* f3018@rib))))) (f2c46@rib-sym* f3018@rib))) (f2cad@id->sym f3019@id) (f2c79@stx-mark* f3019@id)))) (set! f2c60@make-rib-map (lambda (f3026@sym*) ((lambda (f3028@ht) ((letrec ((f302a@f (lambda (f302c@i f302d@sym*) (if (null? f302d@sym*) f3028@ht (begin (hashtable-update! f3028@ht (car f302d@sym*) (lambda (f3030@x) (cons f302c@i f3030@x)) '()) (f302a@f (+ f302c@i '1) (cdr f302d@sym*))))))) f302a@f) '0 f3026@sym*)) (make-eq-hashtable)))) (set! f2c62@seal-rib! (lambda (f3032@rib) ((lambda (f3034@sym*) (if (not (null? f3034@sym*)) (begin (f2c50@set-rib-sym*! f3032@rib (list->vector f3034@sym*)) (f2c52@set-rib-mark**! f3032@rib (list->vector (f2c48@rib-mark** f3032@rib))) (f2c54@set-rib-label*! f3032@rib (list->vector (f2c4a@rib-label* f3032@rib))) (f2c56@set-rib-sealed/freq! f3032@rib (f2c60@make-rib-map f3034@sym*))) (void))) (f2c46@rib-sym* f3032@rib)))) (set! f2c64@unseal-rib! (lambda (f3036@rib) (if (f2c4c@rib-sealed/freq f3036@rib) (begin (f2c56@set-rib-sealed/freq! f3036@rib '#f) (f2c50@set-rib-sym*! f3036@rib (vector->list (f2c46@rib-sym* f3036@rib))) (f2c52@set-rib-mark**! f3036@rib (vector->list (f2c48@rib-mark** f3036@rib))) (f2c54@set-rib-label*! f3036@rib (vector->list (f2c4a@rib-label* f3036@rib)))) (void)))) (set! f2c66@make-full-rib (lambda (f3038@id* f3039@label*) ((lambda (f303c@r) (begin (f2c62@seal-rib! f303c@r) f303c@r)) (f2c44@make-rib (map f2cad@id->sym f3038@id*) (map f2c79@stx-mark* f3038@id*) f3039@label* '#f '#f)))) (set! f2c6c@f2c67 (make-record-type-descriptor 'stx '#f 'f2c6a '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! f2c6e@f2c69 '#f) (set! f2c70@f2c68 (make-record-constructor-descriptor f2c6c@f2c67 '#f f2c6e@f2c69)) (set! f2c73@stx? (record-predicate f2c6c@f2c67)) (set! f2c75@make-stx (record-constructor f2c70@f2c68)) (set! f2c77@stx-expr (record-accessor f2c6c@f2c67 '0)) (set! f2c79@stx-mark* (record-accessor f2c6c@f2c67 '1)) (set! f2c7b@stx-subst* (record-accessor f2c6c@f2c67 '2)) (set! f2c7d@stx-ae* (record-accessor f2c6c@f2c67 '3)) (set! f2c7f@set-stx-expr! (record-mutator f2c6c@f2c67 '0)) (set! f2c81@set-stx-mark*! (record-mutator f2c6c@f2c67 '1)) (set! f2c83@set-stx-subst*! (record-mutator f2c6c@f2c67 '2)) (set! f2c85@set-stx-ae*! (record-mutator f2c6c@f2c67 '3)) (set! f2c87@rp (f2852@f2779@make-record-printer 'stx (lambda (f303e@x f303f@p f3040@wr) (begin (display '"#<syntax " f303f@p) (write (f2cc1@stx->datum f303e@x) f303f@p) ((lambda (f3044@expr) (if (f284a@f2769@annotation? f3044@expr) ((lambda (f3046@src) (if (pair? f3046@src) (begin (display '" [" f303f@p) (display (cdr f3046@src) f303f@p) (display '" of " f303f@p) (display (car f3046@src) f303f@p) (display '"]" f303f@p)) (void))) (f284b@f276b@annotation-source f3044@expr)) (void))) (f2c77@stx-expr f303e@x)) (display '">" f303f@p))))) (set! f2c89@datum->stx (lambda (f3048@id f3049@datum) (f2c75@make-stx f3049@datum (f2c79@stx-mark* f3048@id) (f2c7b@stx-subst* f3048@id) (f2c7d@stx-ae* f3048@id)))) (set! f2c8b@gen-mark (lambda () (string '#\m))) (set! f2c8d@anti-mark '#f) (set! f2c8f@anti-mark? not) (set! f2c91@join-wraps (lambda (f304c@m1* f304d@s1* f304e@ae1* f304f@e) ((lambda (f3055@cancel) (begin (set! f3055@cancel (lambda (f305c@ls1 f305d@ls2) ((letrec ((f3060@f (lambda (f3062@x f3063@ls1) (if (null? f3063@ls1) (cdr f305d@ls2) (cons f3062@x (f3060@f (car f3063@ls1) (cdr f3063@ls1))))))) f3060@f) (car f305c@ls1) (cdr f305c@ls1)))) ((lambda (f3056@m2* f3057@s2* f3058@ae2*) (if (and (not (null? f304c@m1*)) (not (null? f3056@m2*)) (f2c8f@anti-mark? (car f3056@m2*))) (values (f3055@cancel f304c@m1* f3056@m2*) (f3055@cancel f304d@s1* f3057@s2*) (f3055@cancel f304e@ae1* f3058@ae2*)) (values (append f304c@m1* f3056@m2*) (append f304d@s1* f3057@s2*) (append f304e@ae1* f3058@ae2*)))) (f2c79@stx-mark* f304f@e) (f2c7b@stx-subst* f304f@e) (f2c7d@stx-ae* f304f@e)))) '#f))) (set! f2c93@mkstx (lambda (f3066@e f3067@m* f3068@s* f3069@ae*) (if (and (f2c73@stx? f3066@e) (not (f2c29@top-marked? f3067@m*))) (call-with-values (lambda () (f2c91@join-wraps f3067@m* f3068@s* f3069@ae* f3066@e)) (lambda (f3074@f306f f3075@f3071 f3076@f3073) ((lambda (f307a@ae* f307b@s* f307c@m*) (f2c75@make-stx (f2c77@stx-expr f3066@e) f307c@m* f307b@s* f307a@ae*)) f3076@f3073 f3075@f3071 f3074@f306f))) (f2c75@make-stx f3066@e f3067@m* f3068@s* f3069@ae*)))) (set! f2c95@add-mark (lambda (f3080@m f3081@e f3082@ae) (f2c93@mkstx f3081@e (list f3080@m) '(shift) (list f3082@ae)))) (set! f2c97@add-subst (lambda (f3086@subst f3087@e) (f2c93@mkstx f3087@e '() (list f3086@subst) '()))) (set! f2c99@syntax-kind? (lambda (f308a@x f308b@p?) (if (f2c73@stx? f308a@x) (f2c99@syntax-kind? (f2c77@stx-expr f308a@x) f308b@p?) (if (f284a@f2769@annotation? f308a@x) (f2c99@syntax-kind? (f284c@f276d@annotation-expression f308a@x) f308b@p?) (f308b@p? f308a@x))))) (set! f2c9b@syntax-vector->list (lambda (f308e@x) (if (f2c73@stx? f308e@x) ((lambda (f3090@ls f3091@m* f3092@s* f3093@ae*) (map (lambda (f3098@x) (f2c93@mkstx f3098@x f3091@m* f3092@s* f3093@ae*)) f3090@ls)) (f2c9b@syntax-vector->list (f2c77@stx-expr f308e@x)) (f2c79@stx-mark* f308e@x) (f2c7b@stx-subst* f308e@x) (f2c7d@stx-ae* f308e@x)) (if (f284a@f2769@annotation? f308e@x) (f2c9b@syntax-vector->list (f284c@f276d@annotation-expression f308e@x)) (if (vector? f308e@x) (vector->list f308e@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" f308e@x)))))) (set! f2c9d@syntax-pair? (lambda (f309a@x) (f2c99@syntax-kind? f309a@x pair?))) (set! f2c9f@syntax-vector? (lambda (f309c@x) (f2c99@syntax-kind? f309c@x vector?))) (set! f2ca1@syntax-null? (lambda (f309e@x) (f2c99@syntax-kind? f309e@x null?))) (set! f2ca3@syntax-list? (lambda (f30a0@x) (or (f2ca1@syntax-null? f30a0@x) (and (f2c9d@syntax-pair? f30a0@x) (f2ca3@syntax-list? (f2ca7@syntax-cdr f30a0@x)))))) (set! f2ca5@syntax-car (lambda (f30a2@x) (if (f2c73@stx? f30a2@x) (f2c93@mkstx (f2ca5@syntax-car (f2c77@stx-expr f30a2@x)) (f2c79@stx-mark* f30a2@x) (f2c7b@stx-subst* f30a2@x) (f2c7d@stx-ae* f30a2@x)) (if (f284a@f2769@annotation? f30a2@x) (f2ca5@syntax-car (f284c@f276d@annotation-expression f30a2@x)) (if (pair? f30a2@x) (car f30a2@x) (assertion-violation 'syntax-car '"BUG: not a pair" f30a2@x)))))) (set! f2ca7@syntax-cdr (lambda (f30a4@x) (if (f2c73@stx? f30a4@x) (f2c93@mkstx (f2ca7@syntax-cdr (f2c77@stx-expr f30a4@x)) (f2c79@stx-mark* f30a4@x) (f2c7b@stx-subst* f30a4@x) (f2c7d@stx-ae* f30a4@x)) (if (f284a@f2769@annotation? f30a4@x) (f2ca7@syntax-cdr (f284c@f276d@annotation-expression f30a4@x)) (if (pair? f30a4@x) (cdr f30a4@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" f30a4@x)))))) (set! f2ca9@syntax->list (lambda (f30a6@x) (if (f2c9d@syntax-pair? f30a6@x) (cons (f2ca5@syntax-car f30a6@x) (f2ca9@syntax->list (f2ca7@syntax-cdr f30a6@x))) (if (f2ca1@syntax-null? f30a6@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" f30a6@x))))) (set! f2cab@id? (lambda (f30a8@x) (and (f2c73@stx? f30a8@x) ((lambda (f30aa@expr) (symbol? (if (f284a@f2769@annotation? f30aa@expr) (f2849@f2767@annotation-stripped f30aa@expr) f30aa@expr))) (f2c77@stx-expr f30a8@x))))) (set! f2cad@id->sym (lambda (f30ac@x) (begin (if (not (f2c73@stx? f30ac@x)) (error 'id->sym '"BUG in ikarus: not an id" f30ac@x) (void)) ((lambda (f30ae@expr) ((lambda (f30b0@sym) (if (symbol? f30b0@sym) f30b0@sym (error 'id->sym '"BUG in ikarus: not an id" f30ac@x))) (if (f284a@f2769@annotation? f30ae@expr) (f2849@f2767@annotation-stripped f30ae@expr) f30ae@expr))) (f2c77@stx-expr f30ac@x))))) (set! f2caf@same-marks? (lambda (f30b2@x f30b3@y) (or (and (null? f30b2@x) (null? f30b3@y)) (and (pair? f30b2@x) (pair? f30b3@y) (eq? (car f30b2@x) (car f30b3@y)) (f2caf@same-marks? (cdr f30b2@x) (cdr f30b3@y)))))) (set! f2cb1@bound-id=? (lambda (f30b6@x f30b7@y) (and (eq? (f2cad@id->sym f30b6@x) (f2cad@id->sym f30b7@y)) (f2caf@same-marks? (f2c79@stx-mark* f30b6@x) (f2c79@stx-mark* f30b7@y))))) (set! f2cb3@free-id=? (lambda (f30ba@i f30bb@j) ((lambda (f30be@t0 f30bf@t1) (if (or f30be@t0 f30bf@t1) (eq? f30be@t0 f30bf@t1) (eq? (f2cad@id->sym f30ba@i) (f2cad@id->sym f30bb@j)))) (f2cc7@id->real-label f30ba@i) (f2cc7@id->real-label f30bb@j)))) (set! f2cb5@valid-bound-ids? (lambda (f30c2@id*) (and (for-all f2cab@id? f30c2@id*) (f2cb7@distinct-bound-ids? f30c2@id*)))) (set! f2cb7@distinct-bound-ids? (lambda (f30c4@id*) (or (null? f30c4@id*) (and (not (f2cb9@bound-id-member? (car f30c4@id*) (cdr f30c4@id*))) (f2cb7@distinct-bound-ids? (cdr f30c4@id*)))))) (set! f2cb9@bound-id-member? (lambda (f30c6@id f30c7@id*) (and (pair? f30c7@id*) (or (f2cb1@bound-id=? f30c6@id (car f30c7@id*)) (f2cb9@bound-id-member? f30c6@id (cdr f30c7@id*)))))) (set! f2cbb@self-evaluating? (lambda (f30ca@x) (or (number? f30ca@x) (string? f30ca@x) (char? f30ca@x) (boolean? f30ca@x) (regexp? f30ca@x) (bytevector? f30ca@x)))) (set! f2cbd@strip-annotations (lambda (f30cc@x) (if (pair? f30cc@x) (cons (f2cbd@strip-annotations (car f30cc@x)) (f2cbd@strip-annotations (cdr f30cc@x))) (if (vector? f30cc@x) (vector-map f2cbd@strip-annotations f30cc@x) (if (f284a@f2769@annotation? f30cc@x) (f2849@f2767@annotation-stripped f30cc@x) f30cc@x))))) (set! f2cbf@strip (lambda (f30ce@x f30cf@m*) (if (f2c29@top-marked? f30cf@m*) (if (or (f284a@f2769@annotation? f30ce@x) (and (pair? f30ce@x) (f284a@f2769@annotation? (car f30ce@x))) (and (vector? f30ce@x) (> (vector-length f30ce@x) '0) (f284a@f2769@annotation? (vector-ref f30ce@x '0)))) (f2cbd@strip-annotations f30ce@x) f30ce@x) ((letrec ((f30d2@f (lambda (f30d4@x) (if (f2c73@stx? f30d4@x) (f2cbf@strip (f2c77@stx-expr f30d4@x) (f2c79@stx-mark* f30d4@x)) (if (f284a@f2769@annotation? f30d4@x) (f2849@f2767@annotation-stripped f30d4@x) (if (pair? f30d4@x) ((lambda (f30d6@a f30d7@d) (if (and (eq? f30d6@a (car f30d4@x)) (eq? f30d7@d (cdr f30d4@x))) f30d4@x (cons f30d6@a f30d7@d))) (f30d2@f (car f30d4@x)) (f30d2@f (cdr f30d4@x))) (if (vector? f30d4@x) ((lambda (f30da@old) ((lambda (f30dc@new) (if (for-all eq? f30da@old f30dc@new) f30d4@x (list->vector f30dc@new))) (map f30d2@f f30da@old))) (vector->list f30d4@x)) f30d4@x))))))) f30d2@f) f30ce@x)))) (set! f2cc1@stx->datum (lambda (f30de@x) (f2cbf@strip f30de@x '()))) (set! f2cc3@same-marks*? (lambda (f30e0@mark* f30e1@mark** f30e2@si) (if (null? f30e2@si) '#f (if (f2caf@same-marks? f30e0@mark* (vector-ref f30e1@mark** (car f30e2@si))) (car f30e2@si) (f2cc3@same-marks*? f30e0@mark* f30e1@mark** (cdr f30e2@si)))))) (set! f2cc5@id->label (lambda (f30e6@id) (or (f2cc7@id->real-label f30e6@id) ((lambda (f30e8@t) (if f30e8@t ((lambda (f30ea@env) ((lambda (f30ec@rib) (call-with-values (lambda () (f2c33@gen-define-label+loc f30e6@id f30ec@rib)) (lambda (f30f2@f30ef f30f3@f30f1) ((lambda (f30f6@loc_ f30f7@lab) (begin (f2c5c@extend-rib! f30ec@rib f30e6@id f30f7@lab) f30f7@lab)) f30f3@f30f1 f30f2@f30ef)))) (f2f5f@interaction-env-rib f30ea@env))) f30e8@t) '#f)) (f2fad@top-level-context))))) (set! f2cc7@id->real-label (lambda (f30fa@id) ((lambda (f30fc@sym) ((letrec ((f30fe@search (lambda (f3100@subst* f3101@mark*) (if (null? f3100@subst*) '#f (if (eq? (car f3100@subst*) 'shift) (f30fe@search (cdr f3100@subst*) (cdr f3101@mark*)) ((lambda (f3104@rib) ((lambda (f3106@t) (if f3106@t ((lambda (f3108@ht) ((lambda (f310a@si) ((lambda (f310c@i) (if f310c@i (vector-ref (f2c4a@rib-label* f3104@rib) f310c@i) (f30fe@search (cdr f3100@subst*) f3101@mark*))) (and f310a@si (f2cc3@same-marks*? f3101@mark* (f2c48@rib-mark** f3104@rib) (reverse f310a@si))))) (hashtable-ref f3108@ht f30fc@sym '#f))) f3106@t) ((letrec ((f310e@f (lambda (f3110@sym* f3111@mark** f3112@label*) (if (null? f3110@sym*) (f30fe@search (cdr f3100@subst*) f3101@mark*) (if (and (eq? (car f3110@sym*) f30fc@sym) (f2caf@same-marks? (car f3111@mark**) f3101@mark*)) (car f3112@label*) (f310e@f (cdr f3110@sym*) (cdr f3111@mark**) (cdr f3112@label*))))))) f310e@f) (f2c46@rib-sym* f3104@rib) (f2c48@rib-mark** f3104@rib) (f2c4a@rib-label* f3104@rib)))) (f2c4c@rib-sealed/freq f3104@rib))) (car f3100@subst*))))))) f30fe@search) (f2c7b@stx-subst* f30fa@id) (f2c79@stx-mark* f30fa@id))) (f2cad@id->sym f30fa@id)))) (set! f2cc9@label->binding (lambda (f3116@x f3117@r) ((lambda (f311a@t) (if f311a@t ((lambda (f311c@b) (if (and (pair? f311c@b) (eq? (car f311c@b) '$core-rtd)) (cons '$rtd (map f2e6c@bless (cdr f311c@b))) (if (and (pair? f311c@b) (eq? (car f311c@b) 'global-rtd)) ((lambda (f311e@lib f311f@loc) (cons '$rtd (symbol-value f311f@loc))) (cadr f311c@b) (cddr f311c@b)) f311c@b))) f311a@t) ((lambda (f3122@t) (if f3122@t (cdr f3122@t) ((lambda (f3124@t) (if f3124@t ((lambda (f3126@env) ((lambda (f3128@t) (if f3128@t ((lambda (f312a@p) (cons* 'lexical (cdr f312a@p) '#f)) f3128@t) '(displaced-lexical . #f))) (assq f3116@x (f2f63@interaction-env-locs f3126@env)))) f3124@t) '(displaced-lexical . #f))) (f2fad@top-level-context)))) (assq f3116@x f3117@r)))) (f2ace@f296e@imported-label->binding f3116@x)))) (set! f2ccb@make-binding cons) (set! f2ccd@binding-type car) (set! f2ccf@binding-value cdr) (set! f2cd1@raise-unbound-error (lambda (f312c@id) (f2f9d@syntax-violation* '#f '"unbound identifier" f312c@id (f4cdc@f4b22@make-undefined-violation)))) (set! f2cd3@syntax-type (lambda (f312e@e f312f@r) (if (f2cab@id? f312e@e) ((lambda (f3132@id) ((lambda (f3134@label) ((lambda (f3136@b) ((lambda (f3138@type) ((lambda () (begin (if (not f3134@label) (f2cd1@raise-unbound-error f3132@id) (void)) ((lambda (f313a@t) (if (memv f313a@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values f3138@type (f2ccf@binding-value f3136@b) f3132@id) (values 'other '#f '#f))) f3138@type))))) (f2ccd@binding-type f3136@b))) (f2cc9@label->binding f3134@label f312f@r))) (f2cc5@id->label f3132@id))) f312e@e) (if (f2c9d@syntax-pair? f312e@e) ((lambda (f313c@id) (if (f2cab@id? f313c@id) ((lambda (f313e@label) ((lambda (f3140@b) ((lambda (f3142@type) ((lambda () (begin (if (not f313e@label) (f2cd1@raise-unbound-error f313c@id) (void)) ((lambda (f3144@t) (if (memv f3144@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values f3142@type (f2ccf@binding-value f3140@b) f313c@id) (values 'call '#f '#f))) f3142@type))))) (f2ccd@binding-type f3140@b))) (f2cc9@label->binding f313e@label f312f@r))) (f2cc5@id->label f313c@id)) (values 'call '#f '#f))) (f2ca5@syntax-car f312e@e)) ((lambda (f3146@d) (if (f2cbb@self-evaluating? f3146@d) (values 'constant f3146@d '#f) (values 'other '#f '#f))) (f2cc1@stx->datum f312e@e)))))) (set! f2ce1@sanitize-binding (lambda (f3148@x f3149@src) (if (procedure? f3148@x) (cons* 'local-macro f3148@x f3149@src) (if (and (pair? f3148@x) (eq? (car f3148@x) 'macro!) (procedure? (cdr f3148@x))) (cons* 'local-macro! (cdr f3148@x) f3149@src) (if (and (pair? f3148@x) (eq? (car f3148@x) '$rtd)) f3148@x (assertion-violation 'expand '"invalid transformer" f3148@x)))))) (set! f2ce3@make-variable-transformer (lambda (f314c@x) (if (procedure? f314c@x) (cons 'macro! f314c@x) (assertion-violation 'make-variable-transformer '"not a procedure" f314c@x)))) (set! f2ce5@variable-transformer? (lambda (f314e@x) (and (pair? f314e@x) (eq? (car f314e@x) 'macro!) (procedure? (cdr f314e@x))))) (set! f2ce7@variable-transformer-procedure (lambda (f3150@x) (if (f2ce5@variable-transformer? f3150@x) (cdr f3150@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" f3150@x)))) (set! f2ce9@make-eval-transformer (lambda (f3152@x) (f2ce1@sanitize-binding (eval-core (f28a9@f2861@expanded->core f3152@x)) f3152@x))) (set! f2e3a@parse-define (lambda (f3154@x) ((lambda (f3156@t) ((lambda (f3158@ls/false) (if (and f3158@ls/false (apply (lambda (f315a@id f315b@fmls f315c@b f315d@b*) (f2cab@id? f315a@id)) f3158@ls/false)) (apply (lambda (f3162@id f3163@fmls f3164@b f3165@b*) (begin (f2edc@verify-formals f3163@fmls f3154@x) (values f3162@id (cons 'defun (cons f3163@fmls (cons f3164@b f3165@b*)))))) f3158@ls/false) ((lambda (f316a@t) ((lambda (f316c@ls/false) (if (and f316c@ls/false (apply (lambda (f316e@id f316f@val) (f2cab@id? f316e@id)) f316c@ls/false)) (apply (lambda (f3172@id f3173@val) (values f3172@id (cons 'expr f3173@val))) f316c@ls/false) ((lambda (f3176@t) ((lambda (f3178@ls/false) (if (and f3178@ls/false (apply (lambda (f317a@id) (f2cab@id? f317a@id)) f3178@ls/false)) (apply (lambda (f317c@id) (values f317c@id (cons 'expr (f2e6c@bless '(void))))) f3178@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3176@t))) (f2eb6@syntax-dispatch f3176@t '(_ any)))) f316a@t))) (f2eb6@syntax-dispatch f316a@t '(_ any any)))) f3156@t))) (f2eb6@syntax-dispatch f3156@t '(_ (any . any) any . each-any)))) f3154@x))) (set! f2e3c@parse-define-syntax (lambda (f317e@x) ((lambda (f3180@t) ((lambda (f3182@ls/false) (if (and f3182@ls/false (apply (lambda (f3184@id f3185@val) (f2cab@id? f3184@id)) f3182@ls/false)) (apply (lambda (f3188@id f3189@val) (values f3188@id f3189@val)) f3182@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3180@t))) (f2eb6@syntax-dispatch f3180@t '(_ any any)))) f317e@x))) (set! f2e3e@scheme-stx-hashtable (make-eq-hashtable)) (set! f2e40@scheme-stx (lambda (f318c@sym) (or (hashtable-ref f2e3e@scheme-stx-hashtable f318c@sym '#f) ((lambda (f318e@subst) ((lambda (f3190@stx) ((lambda (f3192@stx) ((lambda () (begin (hashtable-set! f2e3e@scheme-stx-hashtable f318c@sym f3192@stx) f3192@stx)))) ((lambda (f3194@t) (if f3194@t ((lambda (f3196@x) ((lambda (f3198@name f3199@label) (f2c97@add-subst (f2c44@make-rib (list f3198@name) (list f2c27@top-mark*) (list f3199@label) '#f '#f) f3190@stx)) (car f3196@x) (cdr f3196@x))) f3194@t) f3190@stx)) (assq f318c@sym f318e@subst)))) (f2c75@make-stx f318c@sym f2c27@top-mark* '() '()))) (f2aa4@f291a@library-subst (f2ac8@f2962@find-library-by-name '(psyntax system $all))))))) (set! f2e42@lexical-var car) (set! f2e44@lexical-mutable? cdr) (set! f2e46@set-lexical-mutable! set-cdr!) (set! f2e48@add-lexical (lambda (f319c@lab f319d@lex f319e@r) (cons (cons* f319c@lab 'lexical f319d@lex '#f) f319e@r))) (set! f2e4a@add-lexicals (lambda (f31a2@lab* f31a3@lex* f31a4@r) (if (null? f31a2@lab*) f31a4@r (f2e4a@add-lexicals (cdr f31a2@lab*) (cdr f31a3@lex*) (f2e48@add-lexical (car f31a2@lab*) (car f31a3@lex*) f31a4@r))))) (set! f2e4c@letrec-helper (lambda (f31a8@e f31a9@r f31aa@mr f31ab@build) ((lambda (f31b0@t) ((lambda (f31b2@ls/false) (if f31b2@ls/false (apply (lambda (f31b4@lhs* f31b5@rhs* f31b6@b f31b7@b*) (if (not (f2cb5@valid-bound-ids? f31b4@lhs*)) (f2e70@invalid-fmls-error f31a8@e f31b4@lhs*) ((lambda (f31bc@lex* f31bd@lab*) ((lambda (f31c0@rib f31c1@r) ((lambda (f31c4@body f31c5@rhs*) (f31ab@build '#f f31bc@lex* f31c5@rhs* f31c4@body)) (f2eee@chi-internal (f2c97@add-subst f31c0@rib (cons f31b6@b f31b7@b*)) f31c1@r f31aa@mr) (f2ed4@chi-expr* (map (lambda (f31c8@x) (f2c97@add-subst f31c0@rib f31c8@x)) f31b5@rhs*) f31c1@r f31aa@mr))) (f2c66@make-full-rib f31b4@lhs* f31bd@lab*) (f2e4a@add-lexicals f31bd@lab* f31bc@lex* f31a9@r))) (map f2c2b@gen-lexical f31b4@lhs*) (map f2c2f@gen-label f31b4@lhs*)))) f31b2@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f31b0@t))) (f2eb6@syntax-dispatch f31b0@t '(_ #(each (any any)) any . each-any)))) f31a8@e))) (set! f2e4e@letrec-transformer (lambda (f31ca@e f31cb@r f31cc@mr) (f2e4c@letrec-helper f31ca@e f31cb@r f31cc@mr f2c0c@f2b7d@build-letrec))) (set! f2e50@letrec*-transformer (lambda (f31d0@e f31d1@r f31d2@mr) (f2e4c@letrec-helper f31d0@e f31d1@r f31d2@mr f2c0d@f2b7f@build-letrec*))) (set! f2e52@fluid-let-syntax-transformer (lambda (f31d6@e f31d7@r f31d8@mr) ((lambda (f31dd@lookup) (begin (set! f31dd@lookup (lambda (f31f0@x) (or (f2cc5@id->label f31f0@x) (f2f9f@syntax-violation '#f '"unbound identifier" f31d6@e f31f0@x)))) ((lambda (f31de@t) ((lambda (f31e0@ls/false) (if f31e0@ls/false (apply (lambda (f31e2@lhs* f31e3@rhs* f31e4@b f31e5@b*) (if (not (f2cb5@valid-bound-ids? f31e2@lhs*)) (f2e70@invalid-fmls-error f31d6@e f31e2@lhs*) ((lambda (f31ea@lab* f31eb@rhs*) (f2eee@chi-internal (cons f31e4@b f31e5@b*) (append (map cons f31ea@lab* f31eb@rhs*) f31d7@r) (append (map cons f31ea@lab* f31eb@rhs*) f31d8@mr))) (map f31dd@lookup f31e2@lhs*) (map (lambda (f31ee@x) (f2ce9@make-eval-transformer (f2f13@expand-transformer f31ee@x f31d8@mr))) f31e3@rhs*)))) f31e0@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f31de@t))) (f2eb6@syntax-dispatch f31de@t '(_ #(each (any any)) any . each-any)))) f31d6@e))) '#f))) (set! f2e54@type-descriptor-transformer (lambda (f31f2@e f31f3@r f31f4@mr) ((lambda (f31f8@t) ((lambda (f31fa@ls/false) (if (and f31fa@ls/false (apply (lambda (f31fc@id) (f2cab@id? f31fc@id)) f31fa@ls/false)) (apply (lambda (f31fe@id) ((lambda (f3200@lab) ((lambda (f3202@b) ((lambda (f3204@type) ((lambda () (begin (if (not f3200@lab) (f2cd1@raise-unbound-error f31fe@id) (void)) (if (not (and (eq? f3204@type '$rtd) (not (list? (f2ccf@binding-value f3202@b))))) (f2f9f@syntax-violation '#f '"not a record type" f31f2@e) (void)) (list 'quote (f2ccf@binding-value f3202@b)))))) (f2ccd@binding-type f3202@b))) (f2cc9@label->binding f3200@lab f31f3@r))) (f2cc5@id->label f31fe@id))) f31fa@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f31f8@t))) (f2eb6@syntax-dispatch f31f8@t '(_ any)))) f31f2@e))) (set! f2e56@record-type-descriptor-transformer (lambda (f3206@e f3207@r f3208@mr) ((lambda (f320c@t) ((lambda (f320e@ls/false) (if (and f320e@ls/false (apply (lambda (f3210@id) (f2cab@id? f3210@id)) f320e@ls/false)) (apply (lambda (f3212@id) ((lambda (f3214@lab) ((lambda (f3216@b) ((lambda (f3218@type) ((lambda () (begin (if (not f3214@lab) (f2cd1@raise-unbound-error f3212@id) (void)) (if (not (and (eq? f3218@type '$rtd) (list? (f2ccf@binding-value f3216@b)))) (f2f9f@syntax-violation '#f '"not a record type" f3206@e) (void)) (f2ed8@chi-expr (car (f2ccf@binding-value f3216@b)) f3207@r f3208@mr))))) (f2ccd@binding-type f3216@b))) (f2cc9@label->binding f3214@lab f3207@r))) (f2cc5@id->label f3212@id))) f320e@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f320c@t))) (f2eb6@syntax-dispatch f320c@t '(_ any)))) f3206@e))) (set! f2e58@record-constructor-descriptor-transformer (lambda (f321a@e f321b@r f321c@mr) ((lambda (f3220@t) ((lambda (f3222@ls/false) (if (and f3222@ls/false (apply (lambda (f3224@id) (f2cab@id? f3224@id)) f3222@ls/false)) (apply (lambda (f3226@id) ((lambda (f3228@lab) ((lambda (f322a@b) ((lambda (f322c@type) ((lambda () (begin (if (not f3228@lab) (f2cd1@raise-unbound-error f3226@id) (void)) (if (not (and (eq? f322c@type '$rtd) (list? (f2ccf@binding-value f322a@b)))) (f2f9f@syntax-violation '#f '"invalid type" f321a@e) (void)) (f2ed8@chi-expr (cadr (f2ccf@binding-value f322a@b)) f321b@r f321c@mr))))) (f2ccd@binding-type f322a@b))) (f2cc9@label->binding f3228@lab f321b@r))) (f2cc5@id->label f3226@id))) f3222@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3220@t))) (f2eb6@syntax-dispatch f3220@t '(_ any)))) f321a@e))) (set! f2e5a@when-macro (lambda (f322e@e) ((lambda (f3230@t) ((lambda (f3232@ls/false) (if f3232@ls/false (apply (lambda (f3234@test f3235@e f3236@e*) (f2e6c@bless (list 'if f3234@test (cons 'begin (cons f3235@e f3236@e*))))) f3232@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3230@t))) (f2eb6@syntax-dispatch f3230@t '(_ any any . each-any)))) f322e@e))) (set! f2e5c@unless-macro (lambda (f323a@e) ((lambda (f323c@t) ((lambda (f323e@ls/false) (if f323e@ls/false (apply (lambda (f3240@test f3241@e f3242@e*) (f2e6c@bless (list 'if (list 'not f3240@test) (cons 'begin (cons f3241@e f3242@e*))))) f323e@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f323c@t))) (f2eb6@syntax-dispatch f323c@t '(_ any any . each-any)))) f323a@e))) (set! f2e5e@if-transformer (lambda (f3246@e f3247@r f3248@mr) ((lambda (f324c@t) ((lambda (f324e@ls/false) (if f324e@ls/false (apply (lambda (f3250@e0 f3251@e1 f3252@e2) (list 'if (f2ed8@chi-expr f3250@e0 f3247@r f3248@mr) (f2ed8@chi-expr f3251@e1 f3247@r f3248@mr) (f2ed8@chi-expr f3252@e2 f3247@r f3248@mr))) f324e@ls/false) ((lambda (f3256@t) ((lambda (f3258@ls/false) (if f3258@ls/false (apply (lambda (f325a@e0 f325b@e1) (list 'if (f2ed8@chi-expr f325a@e0 f3247@r f3248@mr) (f2ed8@chi-expr f325b@e1 f3247@r f3248@mr) (f2c0b@f2b7b@build-void))) f3258@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3256@t))) (f2eb6@syntax-dispatch f3256@t '(_ any any)))) f324c@t))) (f2eb6@syntax-dispatch f324c@t '(_ any any any)))) f3246@e))) (set! f2e60@and-transformer (lambda (f325e@e f325f@r f3260@mr) ((lambda (f3264@t) ((lambda (f3266@ls/false) (if f3266@ls/false (apply (lambda (f3268@e*) (cons 'and (f2ed4@chi-expr* f3268@e* f325f@r f3260@mr))) f3266@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3264@t))) (f2eb6@syntax-dispatch f3264@t '(_ . each-any)))) f325e@e))) (set! f2e62@or-transformer (lambda (f326a@e f326b@r f326c@mr) ((lambda (f3270@t) ((lambda (f3272@ls/false) (if f3272@ls/false (apply (lambda (f3274@e*) (cons 'or (f2ed4@chi-expr* f3274@e* f326b@r f326c@mr))) f3272@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3270@t))) (f2eb6@syntax-dispatch f3270@t '(_ . each-any)))) f326a@e))) (set! f2e64@case-macro (lambda (f3276@e) ((lambda (f3279@build-last f327b@build-one) (begin (set! f3279@build-last (lambda (f32a0@cls) ((lambda (f32a2@t) ((lambda (f32a4@ls/false) (if f32a4@ls/false (apply (lambda (f32a6@e f32a7@e*) (cons 'begin (cons f32a6@e f32a7@e*))) f32a4@ls/false) ((lambda (f32aa@t) ((lambda (f32ac@ls/false) (if f32ac@ls/false (apply (lambda () (f327b@build-one f32a0@cls '(if #f #f))) f32ac@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f32aa@t))) (f2eb6@syntax-dispatch f32aa@t '_))) f32a2@t))) (f2eb6@syntax-dispatch f32a2@t '(#(scheme-id else) any . each-any)))) f32a0@cls))) (set! f327b@build-one (lambda (f3292@cls f3293@k) ((lambda (f3296@t) ((lambda (f3298@ls/false) (if f3298@ls/false (apply (lambda (f329a@d* f329b@e f329c@e*) (list 'if (list 'memv 't (list 'quote f329a@d*)) (cons 'begin (cons f329b@e f329c@e*)) f3293@k)) f3298@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3296@t))) (f2eb6@syntax-dispatch f3296@t '(each-any any . each-any)))) f3292@cls))) ((lambda (f327c@t) ((lambda (f327e@ls/false) (if f327e@ls/false (apply (lambda (f3280@expr) (f2e6c@bless (cons 'let (cons (list (list 't f3280@expr)) '((if #f #f)))))) f327e@ls/false) ((lambda (f3282@t) ((lambda (f3284@ls/false) (if f3284@ls/false (apply (lambda (f3286@expr f3287@cls f3288@cls*) (f2e6c@bless (list 'let (list (list 't f3286@expr)) ((letrec ((f328c@f (lambda (f328e@cls f328f@cls*) (if (null? f328f@cls*) (f3279@build-last f328e@cls) (f327b@build-one f328e@cls (f328c@f (car f328f@cls*) (cdr f328f@cls*))))))) f328c@f) f3287@cls f3288@cls*)))) f3284@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3282@t))) (f2eb6@syntax-dispatch f3282@t '(_ any any . each-any)))) f327c@t))) (f2eb6@syntax-dispatch f327c@t '(_ any)))) f3276@e))) '#f '#f))) (set! f2e66@quote-transformer (lambda (f32ae@e f32af@r f32b0@mr) ((lambda (f32b4@t) ((lambda (f32b6@ls/false) (if f32b6@ls/false (apply (lambda (f32b8@datum) (list 'quote (f2cc1@stx->datum f32b8@datum))) f32b6@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f32b4@t))) (f2eb6@syntax-dispatch f32b4@t '(_ any)))) f32ae@e))) (set! f2e68@case-lambda-transformer (lambda (f32ba@e f32bb@r f32bc@mr) ((lambda (f32c0@t) ((lambda (f32c2@ls/false) (if f32c2@ls/false (apply (lambda (f32c4@fmls* f32c5@b* f32c6@b**) (call-with-values (lambda () (f2ee0@chi-lambda-clause* f32ba@e f32c4@fmls* (map cons f32c5@b* f32c6@b**) f32bb@r f32bc@mr)) (lambda (f32ce@f32cb f32cf@f32cd) ((lambda (f32d2@body* f32d3@fmls*) (f2c08@f2b49@build-case-lambda '#f f32d3@fmls* f32d2@body*)) f32cf@f32cd f32ce@f32cb)))) f32c2@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f32c0@t))) (f2eb6@syntax-dispatch f32c0@t '(_ . #(each (any any . each-any)))))) f32ba@e))) (set! f2e6a@lambda-transformer (lambda (f32d6@e f32d7@r f32d8@mr) ((lambda (f32dc@t) ((lambda (f32de@ls/false) (if f32de@ls/false (apply (lambda (f32e0@fmls f32e1@b f32e2@b*) (call-with-values (lambda () (f2ede@chi-lambda-clause f32d6@e f32e0@fmls (cons f32e1@b f32e2@b*) f32d7@r f32d8@mr)) (lambda (f32ea@f32e7 f32eb@f32e9) ((lambda (f32ee@body f32ef@fmls) (f2c07@f2b47@build-lambda '#f f32ef@fmls f32ee@body)) f32eb@f32e9 f32ea@f32e7)))) f32de@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f32dc@t))) (f2eb6@syntax-dispatch f32dc@t '(_ any any . each-any)))) f32d6@e))) (set! f2e6c@bless (lambda (f32f2@x) (f2c93@mkstx ((letrec ((f32f4@f (lambda (f32f6@x) (if (f2c73@stx? f32f6@x) f32f6@x (if (pair? f32f6@x) (cons (f32f4@f (car f32f6@x)) (f32f4@f (cdr f32f6@x))) (if (symbol? f32f6@x) (f2e40@scheme-stx f32f6@x) (if (vector? f32f6@x) (vector-map f32f4@f f32f6@x) f32f6@x))))))) f32f4@f) f32f2@x) '() '() '()))) (set! f2e6e@with-syntax-macro (lambda (f32f8@e) ((lambda (f32fa@t) ((lambda (f32fc@ls/false) (if f32fc@ls/false (apply (lambda (f32fe@pat* f32ff@expr* f3300@b f3301@b*) ((lambda (f3306@idn*) (begin (f2edc@verify-formals (map car f3306@idn*) f32f8@e) ((lambda (f3308@t*) (f2e6c@bless (list 'let (map list f3308@t* f32ff@expr*) ((letrec ((f330a@f (lambda (f330c@pat* f330d@t*) (if (null? f330c@pat*) (cons 'begin (cons '#f (cons f3300@b f3301@b*))) (list 'syntax-case (car f330d@t*) '() (list (car f330c@pat*) (f330a@f (cdr f330c@pat*) (cdr f330d@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car f330c@pat*)) (car f330d@t*)))))))) f330a@f) f32fe@pat* f3308@t*)))) (f2f8d@generate-temporaries f32ff@expr*)))) ((letrec ((f3310@f (lambda (f3312@pat*) (if (null? f3312@pat*) '() (call-with-values (lambda () (f2eb4@convert-pattern (car f3312@pat*) '())) (lambda (f3318@f3315 f3319@f3317) ((lambda (f331c@idn* f331d@pat) (append f331c@idn* (f3310@f (cdr f3312@pat*)))) f3319@f3317 f3318@f3315))))))) f3310@f) f32fe@pat*))) f32fc@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f32fa@t))) (f2eb6@syntax-dispatch f32fa@t '(_ #(each (any any)) any . each-any)))) f32f8@e))) (set! f2e70@invalid-fmls-error (lambda (f3320@stx f3321@fmls) ((lambda (f3324@t) ((lambda (f3326@ls/false) (if f3326@ls/false (apply (lambda (f3328@id* f3329@last) ((letrec ((f332c@f (lambda (f332e@id*) (if (null? f332e@id*) (values) (if (not (f2cab@id? (car f332e@id*))) (f2f9f@syntax-violation '#f '"not an identifier" f3320@stx (car f332e@id*)) (begin (f332c@f (cdr f332e@id*)) (if (f2cb9@bound-id-member? (car f332e@id*) (cdr f332e@id*)) (f2f9f@syntax-violation '#f '"duplicate binding" f3320@stx (car f332e@id*)) (void)))))))) f332c@f) (if (f2cab@id? f3329@last) (cons f3329@last f3328@id*) (if (f2ca1@syntax-null? f3329@last) f3328@id* (f2f9f@syntax-violation '#f '"not an identifier" f3320@stx f3329@last))))) f3326@ls/false) ((lambda (f3330@t) ((lambda (f3332@ls/false) (if f3332@ls/false (apply (lambda () (f2f9f@syntax-violation '#f '"malformed binding form" f3320@stx f3321@fmls)) f3332@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3330@t))) (f2eb6@syntax-dispatch f3330@t '_))) f3324@t))) (f2eb6@syntax-dispatch f3324@t '#(each+ any () any)))) f3321@fmls))) (set! f2e72@let-macro (lambda (f3334@stx) ((lambda (f3336@t) ((lambda (f3338@ls/false) (if f3338@ls/false (apply (lambda (f333a@lhs* f333b@rhs* f333c@b f333d@b*) (if (f2cb5@valid-bound-ids? f333a@lhs*) (f2e6c@bless (cons (cons 'lambda (cons f333a@lhs* (cons f333c@b f333d@b*))) f333b@rhs*)) (f2e70@invalid-fmls-error f3334@stx f333a@lhs*))) f3338@ls/false) ((lambda (f3342@t) ((lambda (f3344@ls/false) (if (and f3344@ls/false (apply (lambda (f3346@f f3347@lhs* f3348@rhs* f3349@b f334a@b*) (f2cab@id? f3346@f)) f3344@ls/false)) (apply (lambda (f3350@f f3351@lhs* f3352@rhs* f3353@b f3354@b*) (if (f2cb5@valid-bound-ids? f3351@lhs*) (f2e6c@bless (cons (list 'letrec (list (list f3350@f (cons 'lambda (cons f3351@lhs* (cons f3353@b f3354@b*))))) f3350@f) f3352@rhs*)) (f2e70@invalid-fmls-error f3334@stx f3351@lhs*))) f3344@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3342@t))) (f2eb6@syntax-dispatch f3342@t '(_ any #(each (any any)) any . each-any)))) f3336@t))) (f2eb6@syntax-dispatch f3336@t '(_ #(each (any any)) any . each-any)))) f3334@stx))) (set! f2e74@let-values-macro (lambda (f335a@stx) ((lambda (f335d@rename f335f@rename*) (begin (set! f335d@rename (lambda (f33c2@x f33c3@old* f33c4@new*) (begin (if (not (f2cab@id? f33c2@x)) (f2f9f@syntax-violation '#f '"not an indentifier" f335a@stx f33c2@x) (void)) (if (f2cb9@bound-id-member? f33c2@x f33c3@old*) (f2f9f@syntax-violation '#f '"duplicate binding" f335a@stx f33c2@x) (void)) ((lambda (f33c8@y) (values f33c8@y (cons f33c2@x f33c3@old*) (cons f33c8@y f33c4@new*))) (gensym (f2fa5@syntax->datum f33c2@x)))))) (set! f335f@rename* (lambda (f33b0@x* f33b1@old* f33b2@new*) (if (null? f33b0@x*) (values '() f33b1@old* f33b2@new*) (call-with-values (lambda () (f335d@rename (car f33b0@x*) f33b1@old* f33b2@new*)) (lambda (f33b6@x f33b7@old* f33b8@new*) (call-with-values (lambda () (f335f@rename* (cdr f33b0@x*) f33b7@old* f33b8@new*)) (lambda (f33bc@x* f33bd@old* f33be@new*) (values (cons f33b6@x f33bc@x*) f33bd@old* f33be@new*)))))))) ((lambda (f3360@t) ((lambda (f3362@ls/false) (if f3362@ls/false (apply (lambda (f3364@b f3365@b*) (cons* (f2e6c@bless 'let) '() f3364@b f3365@b*)) f3362@ls/false) ((lambda (f3368@t) ((lambda (f336a@ls/false) (if f336a@ls/false (apply (lambda (f336c@lhs* f336d@rhs* f336e@b f336f@b*) (f2e6c@bless ((letrec ((f3374@f (lambda (f3376@lhs* f3377@rhs* f3378@old* f3379@new*) (if (null? f3376@lhs*) (cons 'let (cons (map list f3378@old* f3379@new*) (cons f336e@b f336f@b*))) ((lambda (f337e@t) ((lambda (f3380@ls/false) (if f3380@ls/false (apply (lambda (f3382@x*) (call-with-values (lambda () (f335f@rename* f3382@x* f3378@old* f3379@new*)) (lambda (f338a@f3385 f338b@f3387 f338c@f3389) ((lambda (f3390@new* f3391@old* f3392@y*) (list 'call-with-values (list 'lambda '() (car f3377@rhs*)) (list 'lambda f3392@y* (f3374@f (cdr f3376@lhs*) (cdr f3377@rhs*) f3391@old* f3390@new*)))) f338c@f3389 f338b@f3387 f338a@f3385)))) f3380@ls/false) ((lambda (f3396@t) ((lambda (f3398@ls/false) (if f3398@ls/false (apply (lambda (f339a@x* f339b@x) (call-with-values (lambda () (f335d@rename f339b@x f3378@old* f3379@new*)) (lambda (f339e@y f339f@old* f33a0@new*) (call-with-values (lambda () (f335f@rename* f339a@x* f339f@old* f33a0@new*)) (lambda (f33a4@y* f33a5@old* f33a6@new*) (list 'call-with-values (list 'lambda '() (car f3377@rhs*)) (list 'lambda (append f33a4@y* f339e@y) (f3374@f (cdr f3376@lhs*) (cdr f3377@rhs*) f33a5@old* f33a6@new*)))))))) f3398@ls/false) ((lambda (f33aa@t) ((lambda (f33ac@ls/false) (if f33ac@ls/false (apply (lambda (f33ae@others) (f2f9f@syntax-violation '#f '"malformed bindings" f335a@stx f33ae@others)) f33ac@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f33aa@t))) (f2eb6@syntax-dispatch f33aa@t 'any))) f3396@t))) (f2eb6@syntax-dispatch f3396@t '#(each+ any () any)))) f337e@t))) (f2eb6@syntax-dispatch f337e@t 'each-any))) (car f3376@lhs*)))))) f3374@f) f336c@lhs* f336d@rhs* '() '()))) f336a@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3368@t))) (f2eb6@syntax-dispatch f3368@t '(_ #(each (any any)) any . each-any)))) f3360@t))) (f2eb6@syntax-dispatch f3360@t '(_ () any . each-any)))) f335a@stx))) '#f '#f))) (set! f2e76@let*-values-macro (lambda (f33ca@stx) ((lambda (f33cd@check) (begin (set! f33cd@check (lambda (f33fc@x*) (if (not (null? f33fc@x*)) ((lambda (f33fe@x) (begin (if (not (f2cab@id? f33fe@x)) (f2f9f@syntax-violation '#f '"not an identifier" f33ca@stx f33fe@x) (void)) (f33cd@check (cdr f33fc@x*)) (if (f2cb9@bound-id-member? f33fe@x (cdr f33fc@x*)) (f2f9f@syntax-violation '#f '"duplicate identifier" f33ca@stx f33fe@x) (void)))) (car f33fc@x*)) (void)))) ((lambda (f33ce@t) ((lambda (f33d0@ls/false) (if f33d0@ls/false (apply (lambda (f33d2@b f33d3@b*) (cons* (f2e6c@bless 'let) '() f33d2@b f33d3@b*)) f33d0@ls/false) ((lambda (f33d6@t) ((lambda (f33d8@ls/false) (if f33d8@ls/false (apply (lambda (f33da@lhs* f33db@rhs* f33dc@b f33dd@b*) (f2e6c@bless ((letrec ((f33e2@f (lambda (f33e4@lhs* f33e5@rhs*) (if (null? f33e4@lhs*) (cons 'begin (cons f33dc@b f33dd@b*)) ((lambda (f33e8@t) ((lambda (f33ea@ls/false) (if f33ea@ls/false (apply (lambda (f33ec@x*) (begin (f33cd@check f33ec@x*) (list 'call-with-values (list 'lambda '() (car f33e5@rhs*)) (list 'lambda f33ec@x* (f33e2@f (cdr f33e4@lhs*) (cdr f33e5@rhs*)))))) f33ea@ls/false) ((lambda (f33ee@t) ((lambda (f33f0@ls/false) (if f33f0@ls/false (apply (lambda (f33f2@x* f33f3@x) (begin (f33cd@check (cons f33f3@x f33f2@x*)) (list 'call-with-values (list 'lambda '() (car f33e5@rhs*)) (list 'lambda (append f33f2@x* f33f3@x) (f33e2@f (cdr f33e4@lhs*) (cdr f33e5@rhs*)))))) f33f0@ls/false) ((lambda (f33f6@t) ((lambda (f33f8@ls/false) (if f33f8@ls/false (apply (lambda (f33fa@others) (f2f9f@syntax-violation '#f '"malformed bindings" f33ca@stx f33fa@others)) f33f8@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f33f6@t))) (f2eb6@syntax-dispatch f33f6@t 'any))) f33ee@t))) (f2eb6@syntax-dispatch f33ee@t '#(each+ any () any)))) f33e8@t))) (f2eb6@syntax-dispatch f33e8@t 'each-any))) (car f33e4@lhs*)))))) f33e2@f) f33da@lhs* f33db@rhs*))) f33d8@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f33d6@t))) (f2eb6@syntax-dispatch f33d6@t '(_ #(each (any any)) any . each-any)))) f33ce@t))) (f2eb6@syntax-dispatch f33ce@t '(_ () any . each-any)))) f33ca@stx))) '#f))) (set! f2e78@trace-lambda-macro (lambda (f3400@stx) ((lambda (f3402@t) ((lambda (f3404@ls/false) (if f3404@ls/false (apply (lambda (f3406@who f3407@fmls f3408@b f3409@b*) (if (f2cb5@valid-bound-ids? f3407@fmls) (f2e6c@bless (list 'make-traced-procedure (list 'quote f3406@who) (cons 'lambda (cons f3407@fmls (cons f3408@b f3409@b*))))) (f2e70@invalid-fmls-error f3400@stx f3407@fmls))) f3404@ls/false) ((lambda (f340e@t) ((lambda (f3410@ls/false) (if f3410@ls/false (apply (lambda (f3412@who f3413@fmls f3414@last f3415@b f3416@b*) (if (f2cb5@valid-bound-ids? (cons f3414@last f3413@fmls)) (f2e6c@bless (list 'make-traced-procedure (list 'quote f3412@who) (cons 'lambda (cons (append f3413@fmls f3414@last) (cons f3415@b f3416@b*))))) (f2e70@invalid-fmls-error f3400@stx (append f3413@fmls f3414@last)))) f3410@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f340e@t))) (f2eb6@syntax-dispatch f340e@t '(_ any #(each+ any () any) any . each-any)))) f3402@t))) (f2eb6@syntax-dispatch f3402@t '(_ any each-any any . each-any)))) f3400@stx))) (set! f2e7a@trace-define-macro (lambda (f341c@stx) ((lambda (f341e@t) ((lambda (f3420@ls/false) (if f3420@ls/false (apply (lambda (f3422@who f3423@fmls f3424@b f3425@b*) (if (f2cb5@valid-bound-ids? f3423@fmls) (f2e6c@bless (list 'define f3422@who (list 'make-traced-procedure (list 'quote f3422@who) (cons 'lambda (cons f3423@fmls (cons f3424@b f3425@b*)))))) (f2e70@invalid-fmls-error f341c@stx f3423@fmls))) f3420@ls/false) ((lambda (f342a@t) ((lambda (f342c@ls/false) (if f342c@ls/false (apply (lambda (f342e@who f342f@fmls f3430@last f3431@b f3432@b*) (if (f2cb5@valid-bound-ids? (cons f3430@last f342f@fmls)) (f2e6c@bless (list 'define f342e@who (list 'make-traced-procedure (list 'quote f342e@who) (cons 'lambda (cons (append f342f@fmls f3430@last) (cons f3431@b f3432@b*)))))) (f2e70@invalid-fmls-error f341c@stx (append f342f@fmls f3430@last)))) f342c@ls/false) ((lambda (f3438@t) ((lambda (f343a@ls/false) (if f343a@ls/false (apply (lambda (f343c@who f343d@expr) (if (f2cab@id? f343c@who) (f2e6c@bless (list 'define f343c@who (list 'let (list (list 'v f343d@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote f343c@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (f2f9f@syntax-violation '#f '"invalid name" f341c@stx))) f343a@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3438@t))) (f2eb6@syntax-dispatch f3438@t '(_ any any)))) f342a@t))) (f2eb6@syntax-dispatch f342a@t '(_ (any . #(each+ any () any)) any . each-any)))) f341e@t))) (f2eb6@syntax-dispatch f341e@t '(_ (any . each-any) any . each-any)))) f341c@stx))) (set! f2e7c@trace-define-syntax-macro (lambda (f3440@stx) ((lambda (f3442@t) ((lambda (f3444@ls/false) (if f3444@ls/false (apply (lambda (f3446@who f3447@expr) (if (f2cab@id? f3446@who) (f2e6c@bless (list 'define-syntax f3446@who (list 'make-traced-macro (list 'quote f3446@who) f3447@expr))) (f2f9f@syntax-violation '#f '"invalid name" f3440@stx))) f3444@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3442@t))) (f2eb6@syntax-dispatch f3442@t '(_ any any)))) f3440@stx))) (set! f2e7e@trace-let/rec-syntax (lambda (f344a@who) (lambda (f344c@stx) ((lambda (f344e@t) ((lambda (f3450@ls/false) (if f3450@ls/false (apply (lambda (f3452@lhs* f3453@rhs* f3454@b f3455@b*) (if (f2cb5@valid-bound-ids? f3452@lhs*) ((lambda (f345a@rhs*) (f2e6c@bless (cons f344a@who (cons (map list f3452@lhs* f345a@rhs*) (cons f3454@b f3455@b*))))) (map (lambda (f345c@lhs f345d@rhs) (list 'make-traced-macro (list 'quote f345c@lhs) f345d@rhs)) f3452@lhs* f3453@rhs*)) (f2e70@invalid-fmls-error f344c@stx f3452@lhs*))) f3450@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f344e@t))) (f2eb6@syntax-dispatch f344e@t '(_ #(each (any any)) any . each-any)))) f344c@stx)))) (set! f2e80@trace-let-syntax-macro (f2e7e@trace-let/rec-syntax 'let-syntax)) (set! f2e82@trace-letrec-syntax-macro (f2e7e@trace-let/rec-syntax 'letrec-syntax)) (set! f2e84@guard-macro (lambda (f3460@x) ((lambda (f3463@gen-clauses) (begin (set! f3463@gen-clauses (lambda (f347a@con f347b@outerk f347c@clause*) ((lambda (f3481@f f3483@f*) (begin (set! f3481@f (lambda (f34ba@x f34bb@k) ((lambda (f34be@t) ((lambda (f34c0@ls/false) (if f34c0@ls/false (apply (lambda (f34c2@e f34c3@p) ((lambda (f34c6@t) (list 'let (list (list f34c6@t f34c2@e)) (list 'if f34c6@t (list f34c3@p f34c6@t) f34bb@k))) (gensym))) f34c0@ls/false) ((lambda (f34c8@t) ((lambda (f34ca@ls/false) (if f34ca@ls/false (apply (lambda (f34cc@e) ((lambda (f34ce@t) (list 'let (list (list f34ce@t f34cc@e)) (list 'if f34ce@t f34ce@t f34bb@k))) (gensym))) f34ca@ls/false) ((lambda (f34d0@t) ((lambda (f34d2@ls/false) (if f34d2@ls/false (apply (lambda (f34d4@e f34d5@v f34d6@v*) (list 'if f34d4@e (cons 'begin (cons f34d5@v f34d6@v*)) f34bb@k)) f34d2@ls/false) ((lambda (f34da@t) ((lambda (f34dc@ls/false) (if f34dc@ls/false (apply (lambda () (f2f9f@syntax-violation '#f '"invalid guard clause" f34ba@x)) f34dc@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f34da@t))) (f2eb6@syntax-dispatch f34da@t '_))) f34d0@t))) (f2eb6@syntax-dispatch f34d0@t '(any any . each-any)))) f34c8@t))) (f2eb6@syntax-dispatch f34c8@t '(any)))) f34be@t))) (f2eb6@syntax-dispatch f34be@t '(any #(scheme-id =>) any)))) f34ba@x))) (set! f3483@f* (lambda (f3490@x*) ((lambda (f3492@t) ((lambda (f3494@ls/false) (if f3494@ls/false (apply (lambda () ((lambda (f3496@g) (values (list f3496@g (list 'lambda '() (list 'raise-continuable f347a@con))) f3496@g)) (gensym))) f3494@ls/false) ((lambda (f3498@t) ((lambda (f349a@ls/false) (if f349a@ls/false (apply (lambda (f349c@e f349d@e*) (values (cons 'begin (cons f349c@e f349d@e*)) '#f)) f349a@ls/false) ((lambda (f34a0@t) ((lambda (f34a2@ls/false) (if f34a2@ls/false (apply (lambda (f34a4@cls f34a5@cls*) (call-with-values (lambda () (f3483@f* f34a5@cls*)) (lambda (f34ac@f34a9 f34ad@f34ab) ((lambda (f34b0@g f34b1@e) (values (f3481@f f34a4@cls f34b1@e) f34b0@g)) f34ad@f34ab f34ac@f34a9)))) f34a2@ls/false) ((lambda (f34b4@t) ((lambda (f34b6@ls/false) (if f34b6@ls/false (apply (lambda (f34b8@others) (f2f9f@syntax-violation '#f '"invalid guard clause" f34b8@others)) f34b6@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f34b4@t))) (f2eb6@syntax-dispatch f34b4@t 'any))) f34a0@t))) (f2eb6@syntax-dispatch f34a0@t '(any . any)))) f3498@t))) (f2eb6@syntax-dispatch f3498@t '((#(scheme-id else) any . each-any))))) f3492@t))) (f2eb6@syntax-dispatch f3492@t '()))) f3490@x*))) (call-with-values (lambda () (f3483@f* f347c@clause*)) (lambda (f3488@f3485 f3489@f3487) ((lambda (f348c@raisek f348d@code) (if f348c@raisek (list (list 'call/cc (list 'lambda (list f348c@raisek) (list f347b@outerk (list 'lambda '() f348d@code))))) (list f347b@outerk (list 'lambda '() f348d@code)))) f3489@f3487 f3488@f3485))))) '#f '#f))) ((lambda (f3464@t) ((lambda (f3466@ls/false) (if (and f3466@ls/false (apply (lambda (f3468@con f3469@clause* f346a@b f346b@b*) (f2cab@id? f3468@con)) f3466@ls/false)) (apply (lambda (f3470@con f3471@clause* f3472@b f3473@b*) ((lambda (f3478@outerk) (f2e6c@bless (list (list 'call/cc (list 'lambda (list f3478@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list f3470@con) (f3463@gen-clauses f3470@con f3478@outerk f3471@clause*)) (cons 'lambda (cons '() (cons f3472@b f3473@b*)))))))))) (gensym))) f3466@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3464@t))) (f2eb6@syntax-dispatch f3464@t '(_ (any . each-any) any . each-any)))) f3460@x))) '#f))) (set! f2e86@define-enumeration-macro (lambda (f34de@stx) ((lambda (f34e1@set? f34e3@remove-dups) (begin (set! f34e1@set? (lambda (f34fa@x) (or (null? f34fa@x) (and (not (memq (car f34fa@x) (cdr f34fa@x))) (f34e1@set? (cdr f34fa@x)))))) (set! f34e3@remove-dups (lambda (f34f8@ls) (if (null? f34f8@ls) '() (cons (car f34f8@ls) (f34e3@remove-dups (remq (car f34f8@ls) (cdr f34f8@ls))))))) ((lambda (f34e4@t) ((lambda (f34e6@ls/false) (if (and f34e6@ls/false (apply (lambda (f34e8@name f34e9@id* f34ea@maker) (and (f2cab@id? f34e8@name) (f2cab@id? f34ea@maker) (for-all f2cab@id? f34e9@id*))) f34e6@ls/false)) (apply (lambda (f34ee@name f34ef@id* f34f0@maker) ((lambda (f34f4@name* f34f5@mk) (f2e6c@bless (list 'begin (list 'define f34f5@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote f34f4@name*)))) (list 'define-syntax f34ee@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote f34f4@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote f34ee@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax f34f0@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote f34f0@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote f34f4@name*)) (cons 'syntax-violation (cons (list 'quote f34f0@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons f34f5@mk '('(n* ...)))))))))))) (f34e3@remove-dups (f2fa5@syntax->datum f34ef@id*)) (gensym))) f34e6@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f34e4@t))) (f2eb6@syntax-dispatch f34e4@t '(_ any each-any any)))) f34de@stx))) '#f '#f))) (set! f2e88@time-macro (lambda (f34fc@stx) ((lambda (f34fe@t) ((lambda (f3500@ls/false) (if f3500@ls/false (apply (lambda (f3502@expr) (f2e6c@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() f3502@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) f3500@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f34fe@t))) (f2eb6@syntax-dispatch f34fe@t '(_ any)))) f34fc@stx))) (set! f2e8a@delay-macro (lambda (f3504@stx) ((lambda (f3506@t) ((lambda (f3508@ls/false) (if f3508@ls/false (apply (lambda (f350a@expr) (f2e6c@bless (list 'make-promise (list 'lambda '() f350a@expr)))) f3508@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3506@t))) (f2eb6@syntax-dispatch f3506@t '(_ any)))) f3504@stx))) (set! f2e8c@assert-macro (lambda (f350c@stx) ((lambda (f350e@t) ((lambda (f3510@ls/false) (if f3510@ls/false (apply (lambda (f3512@expr) ((lambda (f3514@pos) (f2e6c@bless (list 'unless f3512@expr (list 'assertion-error (list 'quote f3512@expr) (list 'quote f3514@pos))))) (or (f2f97@expression-position f350c@stx) (f2f97@expression-position f3512@expr)))) f3510@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f350e@t))) (f2eb6@syntax-dispatch f350e@t '(_ any)))) f350c@stx))) (set! f2e8e@endianness-macro (lambda (f3516@stx) ((lambda (f3518@t) ((lambda (f351a@ls/false) (if f351a@ls/false (apply (lambda (f351c@e) ((lambda (f351e@t) (if (memv f351e@t '(little)) (f2e6c@bless ''little) (if (memv f351e@t '(big)) (f2e6c@bless ''big) (f2f9f@syntax-violation '#f '"endianness must be big or little" f3516@stx)))) (f2fa5@syntax->datum f351c@e))) f351a@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3518@t))) (f2eb6@syntax-dispatch f3518@t '(_ any)))) f3516@stx))) (set! f2e90@identifier-syntax-macro (lambda (f3520@stx) ((lambda (f3522@t) ((lambda (f3524@ls/false) (if f3524@ls/false (apply (lambda (f3526@expr) (f2e6c@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax f3526@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax f3526@expr) '((syntax (e* ...)))))))))) f3524@ls/false) ((lambda (f3528@t) ((lambda (f352a@ls/false) (if (and f352a@ls/false (apply (lambda (f352c@id1 f352d@expr1 f352e@id2 f352f@expr2 f3530@expr3) (and (f2cab@id? f352c@id1) (f2cab@id? f352e@id2) (f2cab@id? f352f@expr2))) f352a@ls/false)) (apply (lambda (f3536@id1 f3537@expr1 f3538@id2 f3539@expr2 f353a@expr3) (f2e6c@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax f3537@expr1)) (list (list 'set! 'id f3539@expr2) (list 'syntax f353a@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons f3537@expr1 '(e* ...))))))))) f352a@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3528@t))) (f2eb6@syntax-dispatch f3528@t '(_ (any any) ((#(scheme-id set!) any any) any))))) f3522@t))) (f2eb6@syntax-dispatch f3522@t '(_ any)))) f3520@stx))) (set! f2e92@do-macro (lambda (f3540@stx) ((lambda (f3543@bind) (begin (set! f3543@bind (lambda (f355a@x) ((lambda (f355c@t) ((lambda (f355e@ls/false) (if f355e@ls/false (apply (lambda (f3560@x f3561@init) (list f3560@x f3561@init f3560@x)) f355e@ls/false) ((lambda (f3564@t) ((lambda (f3566@ls/false) (if f3566@ls/false (apply (lambda (f3568@x f3569@init f356a@step) (list f3568@x f3569@init f356a@step)) f3566@ls/false) ((lambda (f356e@t) ((lambda (f3570@ls/false) (if f3570@ls/false (apply (lambda () (f2f9f@syntax-violation '#f '"invalid binding" f3540@stx)) f3570@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f356e@t))) (f2eb6@syntax-dispatch f356e@t '_))) f3564@t))) (f2eb6@syntax-dispatch f3564@t '(any any any)))) f355c@t))) (f2eb6@syntax-dispatch f355c@t '(any any)))) f355a@x))) ((lambda (f3544@t) ((lambda (f3546@ls/false) (if f3546@ls/false (apply (lambda (f3548@binding* f3549@test f354a@expr* f354b@command*) ((lambda (f3550@t) ((lambda (f3552@ls/false) (if f3552@ls/false (apply (lambda (f3554@x* f3555@init* f3556@step*) (if (f2cb5@valid-bound-ids? f3554@x*) (f2e6c@bless (list 'letrec (list (list 'loop (list 'lambda f3554@x* (list 'if f3549@test (cons 'begin (cons '(if #f #f) f354a@expr*)) (cons 'begin (append f354b@command* (list (cons 'loop f3556@step*)))))))) (cons 'loop f3555@init*))) (f2f9f@syntax-violation '#f '"invalid bindings" f3540@stx))) f3552@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3550@t))) (f2eb6@syntax-dispatch f3550@t '#(each (any any any))))) (map f3543@bind f3548@binding*))) f3546@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3544@t))) (f2eb6@syntax-dispatch f3544@t '(_ each-any (any . each-any) . each-any)))) f3540@stx))) '#f))) (set! f2e94@let*-macro (lambda (f3572@stx) ((lambda (f3574@t) ((lambda (f3576@ls/false) (if (and f3576@ls/false (apply (lambda (f3578@lhs* f3579@rhs* f357a@b f357b@b*) (for-all f2cab@id? f3578@lhs*)) f3576@ls/false)) (apply (lambda (f3580@lhs* f3581@rhs* f3582@b f3583@b*) (f2e6c@bless ((letrec ((f3588@f (lambda (f358a@x*) (if (null? f358a@x*) (cons 'let (cons '() (cons f3582@b f3583@b*))) (list 'let (list (car f358a@x*)) (f3588@f (cdr f358a@x*))))))) f3588@f) (map list f3580@lhs* f3581@rhs*)))) f3576@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3574@t))) (f2eb6@syntax-dispatch f3574@t '(_ #(each (any any)) any . each-any)))) f3572@stx))) (set! f2e96@or-macro (lambda (f358c@stx) ((lambda (f358e@t) ((lambda (f3590@ls/false) (if f3590@ls/false (apply (lambda () '#f) f3590@ls/false) ((lambda (f3592@t) ((lambda (f3594@ls/false) (if f3594@ls/false (apply (lambda (f3596@e f3597@e*) (f2e6c@bless ((letrec ((f359a@f (lambda (f359c@e f359d@e*) (if (null? f359d@e*) (list 'begin '#f f359c@e) (list 'let (list (list 't f359c@e)) (list 'if 't 't (f359a@f (car f359d@e*) (cdr f359d@e*)))))))) f359a@f) f3596@e f3597@e*))) f3594@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3592@t))) (f2eb6@syntax-dispatch f3592@t '(_ any . each-any)))) f358e@t))) (f2eb6@syntax-dispatch f358e@t '(_)))) f358c@stx))) (set! f2e98@and-macro (lambda (f35a0@stx) ((lambda (f35a2@t) ((lambda (f35a4@ls/false) (if f35a4@ls/false (apply (lambda () '#t) f35a4@ls/false) ((lambda (f35a6@t) ((lambda (f35a8@ls/false) (if f35a8@ls/false (apply (lambda (f35aa@e f35ab@e*) (f2e6c@bless ((letrec ((f35ae@f (lambda (f35b0@e f35b1@e*) (if (null? f35b1@e*) (list 'begin '#f f35b0@e) (cons 'if (cons f35b0@e (cons (f35ae@f (car f35b1@e*) (cdr f35b1@e*)) '(#f)))))))) f35ae@f) f35aa@e f35ab@e*))) f35a8@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f35a6@t))) (f2eb6@syntax-dispatch f35a6@t '(_ any . each-any)))) f35a2@t))) (f2eb6@syntax-dispatch f35a2@t '(_)))) f35a0@stx))) (set! f2e9a@cond-macro (lambda (f35b4@stx) ((lambda (f35b6@t) ((lambda (f35b8@ls/false) (if f35b8@ls/false (apply (lambda (f35ba@cls f35bb@cls*) (f2e6c@bless ((letrec ((f35be@f (lambda (f35c0@cls f35c1@cls*) (if (null? f35c1@cls*) ((lambda (f35c4@t) ((lambda (f35c6@ls/false) (if f35c6@ls/false (apply (lambda (f35c8@e f35c9@e*) (cons 'begin (cons f35c8@e f35c9@e*))) f35c6@ls/false) ((lambda (f35cc@t) ((lambda (f35ce@ls/false) (if f35ce@ls/false (apply (lambda (f35d0@e f35d1@p) (list 'let (list (list 't f35d0@e)) (list 'if 't (cons f35d1@p '(t))))) f35ce@ls/false) ((lambda (f35d4@t) ((lambda (f35d6@ls/false) (if f35d6@ls/false (apply (lambda (f35d8@e) (cons 'or (cons f35d8@e '((if #f #f))))) f35d6@ls/false) ((lambda (f35da@t) ((lambda (f35dc@ls/false) (if f35dc@ls/false (apply (lambda (f35de@e f35df@e*) (list 'if f35de@e (cons 'begin f35df@e*))) f35dc@ls/false) ((lambda (f35e2@t) ((lambda (f35e4@ls/false) (if f35e4@ls/false (apply (lambda () (f2f9f@syntax-violation '#f '"invalid last clause" f35b4@stx)) f35e4@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f35e2@t))) (f2eb6@syntax-dispatch f35e2@t '_))) f35da@t))) (f2eb6@syntax-dispatch f35da@t '(any . each-any)))) f35d4@t))) (f2eb6@syntax-dispatch f35d4@t '(any)))) f35cc@t))) (f2eb6@syntax-dispatch f35cc@t '(any #(scheme-id =>) any)))) f35c4@t))) (f2eb6@syntax-dispatch f35c4@t '(#(scheme-id else) any . each-any)))) f35c0@cls) ((lambda (f35e6@t) ((lambda (f35e8@ls/false) (if f35e8@ls/false (apply (lambda (f35ea@e f35eb@e*) (f2f9f@syntax-violation '#f '"incorrect position of keyword else" f35b4@stx)) f35e8@ls/false) ((lambda (f35ee@t) ((lambda (f35f0@ls/false) (if f35f0@ls/false (apply (lambda (f35f2@e f35f3@p) (list 'let (list (list 't f35f2@e)) (list 'if 't (cons f35f3@p '(t)) (f35be@f (car f35c1@cls*) (cdr f35c1@cls*))))) f35f0@ls/false) ((lambda (f35f6@t) ((lambda (f35f8@ls/false) (if f35f8@ls/false (apply (lambda (f35fa@e) (list 'or f35fa@e (f35be@f (car f35c1@cls*) (cdr f35c1@cls*)))) f35f8@ls/false) ((lambda (f35fc@t) ((lambda (f35fe@ls/false) (if f35fe@ls/false (apply (lambda (f3600@e f3601@e*) (list 'if f3600@e (cons 'begin f3601@e*) (f35be@f (car f35c1@cls*) (cdr f35c1@cls*)))) f35fe@ls/false) ((lambda (f3604@t) ((lambda (f3606@ls/false) (if f3606@ls/false (apply (lambda () (f2f9f@syntax-violation '#f '"invalid last clause" f35b4@stx)) f3606@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3604@t))) (f2eb6@syntax-dispatch f3604@t '_))) f35fc@t))) (f2eb6@syntax-dispatch f35fc@t '(any . each-any)))) f35f6@t))) (f2eb6@syntax-dispatch f35f6@t '(any)))) f35ee@t))) (f2eb6@syntax-dispatch f35ee@t '(any #(scheme-id =>) any)))) f35e6@t))) (f2eb6@syntax-dispatch f35e6@t '(#(scheme-id else) any . each-any)))) f35c0@cls))))) f35be@f) f35ba@cls f35bb@cls*))) f35b8@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f35b6@t))) (f2eb6@syntax-dispatch f35b6@t '(_ any . each-any)))) f35b4@stx))) (set! f2e9c@do-include (lambda (f3608@stx f3609@id f360a@filename) ((lambda (f360e@filename) (begin (if (not (and (string? f360e@filename) (f2cab@id? f3609@id))) (f2f9f@syntax-violation '#f '"invalid syntax" f3608@stx) (void)) (cons (f2e6c@bless 'begin) (with-input-from-file f360e@filename (lambda () ((letrec ((f3610@f (lambda (f3612@ls) ((lambda (f3614@x) (if (eof-object? f3614@x) (reverse f3612@ls) (f3610@f (cons (f2c89@datum->stx f3609@id f3614@x) f3612@ls)))) (f2848@f2765@read-annotated))))) f3610@f) '())))))) (f2cc1@stx->datum f360a@filename)))) (set! f2e9e@include-macro (lambda (f3616@e) ((lambda (f3618@t) ((lambda (f361a@ls/false) (if f361a@ls/false (apply (lambda (f361c@id f361d@filename) (f2e9c@do-include f3616@e f361c@id f361d@filename)) f361a@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3618@t))) (f2eb6@syntax-dispatch f3618@t '(any any)))) f3616@e))) (set! f2ea0@include-into-macro (lambda (f3620@e) ((lambda (f3622@t) ((lambda (f3624@ls/false) (if f3624@ls/false (apply (lambda (f3626@id f3627@filename) (f2e9c@do-include f3620@e f3626@id f3627@filename)) f3624@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3622@t))) (f2eb6@syntax-dispatch f3622@t '(_ any any)))) f3620@e))) (set! f2ea2@syntax-rules-macro (lambda (f362a@e) ((lambda (f362c@t) ((lambda (f362e@ls/false) (if f362e@ls/false (apply (lambda (f3630@lits f3631@pat* f3632@tmp*) (begin (f2ebc@verify-literals f3630@lits f362a@e) (f2e6c@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons f3630@lits (map (lambda (f3636@pat f3637@tmp) ((lambda (f363a@t) ((lambda (f363c@ls/false) (if f363c@ls/false (apply (lambda (f363e@rest) (list (cons 'g f363e@rest) (list 'syntax f3637@tmp))) f363c@ls/false) ((lambda (f3640@t) ((lambda (f3642@ls/false) (if f3642@ls/false (apply (lambda () (f2f9f@syntax-violation '#f '"invalid syntax-rules pattern" f362a@e f3636@pat)) f3642@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3640@t))) (f2eb6@syntax-dispatch f3640@t '_))) f363a@t))) (f2eb6@syntax-dispatch f363a@t '(_ . any)))) f3636@pat)) f3631@pat* f3632@tmp*)))))))) f362e@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f362c@t))) (f2eb6@syntax-dispatch f362c@t '(_ each-any . #(each (any any)))))) f362a@e))) (set! f2ea4@quasiquote-macro ((lambda () ((lambda (f3645@datum f3661@quasicons* f3663@quasicons f3665@quasiappend f3667@quasivector f3669@vquasi f366b@quasi) (begin (set! f3645@datum (lambda (f3746@x) (list (f2e40@scheme-stx 'quote) (f2c93@mkstx f3746@x '() '() '())))) (set! f3661@quasicons* (lambda (f373e@x f373f@y) ((letrec ((f3742@f (lambda (f3744@x) (if (null? f3744@x) f373f@y (f3663@quasicons (car f3744@x) (f3742@f (cdr f3744@x))))))) f3742@f) f373e@x))) (set! f3663@quasicons (lambda (f3718@x f3719@y) ((lambda (f371c@t) ((lambda (f371e@ls/false) (if f371e@ls/false (apply (lambda (f3720@dy) ((lambda (f3722@t) ((lambda (f3724@ls/false) (if f3724@ls/false (apply (lambda (f3726@dx) (list (f2e40@scheme-stx 'quote) (cons f3726@dx f3720@dy))) f3724@ls/false) ((lambda (f3728@t) ((lambda (f372a@ls/false) (if f372a@ls/false (apply (lambda () ((lambda (f372c@t) ((lambda (f372e@ls/false) (if f372e@ls/false (apply (lambda () (list (f2e40@scheme-stx 'list) f3718@x)) f372e@ls/false) ((lambda (f3730@t) ((lambda (f3732@ls/false) (if f3732@ls/false (apply (lambda () (list (f2e40@scheme-stx 'cons) f3718@x f3719@y)) f3732@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3730@t))) (f2eb6@syntax-dispatch f3730@t '_))) f372c@t))) (f2eb6@syntax-dispatch f372c@t '()))) f3720@dy)) f372a@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3728@t))) (f2eb6@syntax-dispatch f3728@t '_))) f3722@t))) (f2eb6@syntax-dispatch f3722@t '(#(scheme-id quote) any)))) f3718@x)) f371e@ls/false) ((lambda (f3734@t) ((lambda (f3736@ls/false) (if f3736@ls/false (apply (lambda (f3738@stuff) (cons* (f2e40@scheme-stx 'list) f3718@x f3738@stuff)) f3736@ls/false) ((lambda (f373a@t) ((lambda (f373c@ls/false) (if f373c@ls/false (apply (lambda () (list (f2e40@scheme-stx 'cons) f3718@x f3719@y)) f373c@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f373a@t))) (f2eb6@syntax-dispatch f373a@t '_))) f3734@t))) (f2eb6@syntax-dispatch f3734@t '(#(scheme-id list) . each-any)))) f371c@t))) (f2eb6@syntax-dispatch f371c@t '(#(scheme-id quote) any)))) f3719@y))) (set! f3665@quasiappend (lambda (f36fe@x f36ff@y) ((lambda (f3702@ls) (if (null? f3702@ls) (list (f2e40@scheme-stx 'quote) '()) (if (null? (cdr f3702@ls)) (car f3702@ls) (cons* (f2e40@scheme-stx 'append) f3702@ls)))) ((letrec ((f3704@f (lambda (f3706@x) (if (null? f3706@x) ((lambda (f3708@t) ((lambda (f370a@ls/false) (if f370a@ls/false (apply (lambda () '()) f370a@ls/false) ((lambda (f370c@t) ((lambda (f370e@ls/false) (if f370e@ls/false (apply (lambda () (list f36ff@y)) f370e@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f370c@t))) (f2eb6@syntax-dispatch f370c@t '_))) f3708@t))) (f2eb6@syntax-dispatch f3708@t '(#(scheme-id quote) ())))) f36ff@y) ((lambda (f3710@t) ((lambda (f3712@ls/false) (if f3712@ls/false (apply (lambda () (f3704@f (cdr f3706@x))) f3712@ls/false) ((lambda (f3714@t) ((lambda (f3716@ls/false) (if f3716@ls/false (apply (lambda () (cons (car f3706@x) (f3704@f (cdr f3706@x)))) f3716@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3714@t))) (f2eb6@syntax-dispatch f3714@t '_))) f3710@t))) (f2eb6@syntax-dispatch f3710@t '(#(scheme-id quote) ())))) (car f3706@x)))))) f3704@f) f36fe@x)))) (set! f3667@quasivector (lambda (f36cc@x) ((lambda (f36ce@pat-x) ((lambda (f36d0@t) ((lambda (f36d2@ls/false) (if f36d2@ls/false (apply (lambda (f36d4@x*) (list (f2e40@scheme-stx 'quote) (list->vector f36d4@x*))) f36d2@ls/false) ((lambda (f36d6@t) ((lambda (f36d8@ls/false) (if f36d8@ls/false (apply (lambda () ((letrec ((f36da@f (lambda (f36dc@x f36dd@k) ((lambda (f36e0@t) ((lambda (f36e2@ls/false) (if f36e2@ls/false (apply (lambda (f36e4@x*) (f36dd@k (map (lambda (f36e6@x) (list (f2e40@scheme-stx 'quote) f36e6@x)) f36e4@x*))) f36e2@ls/false) ((lambda (f36e8@t) ((lambda (f36ea@ls/false) (if f36ea@ls/false (apply (lambda (f36ec@x*) (f36dd@k f36ec@x*)) f36ea@ls/false) ((lambda (f36ee@t) ((lambda (f36f0@ls/false) (if f36f0@ls/false (apply (lambda (f36f2@x f36f3@y) (f36da@f f36f3@y (lambda (f36f6@ls) (f36dd@k (cons f36f2@x f36f6@ls))))) f36f0@ls/false) ((lambda (f36f8@t) ((lambda (f36fa@ls/false) (if f36fa@ls/false (apply (lambda () (list (f2e40@scheme-stx 'list->vector) f36ce@pat-x)) f36fa@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f36f8@t))) (f2eb6@syntax-dispatch f36f8@t '_))) f36ee@t))) (f2eb6@syntax-dispatch f36ee@t '(#(scheme-id cons) any any)))) f36e8@t))) (f2eb6@syntax-dispatch f36e8@t '(#(scheme-id list) . each-any)))) f36e0@t))) (f2eb6@syntax-dispatch f36e0@t '(#(scheme-id quote) each-any)))) f36dc@x)))) f36da@f) f36cc@x (lambda (f36fc@ls) (cons* (f2e40@scheme-stx 'vector) f36fc@ls)))) f36d8@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f36d6@t))) (f2eb6@syntax-dispatch f36d6@t '_))) f36d0@t))) (f2eb6@syntax-dispatch f36d0@t '(#(scheme-id quote) each-any)))) f36ce@pat-x)) f36cc@x))) (set! f3669@vquasi (lambda (f36aa@p f36ab@lev) ((lambda (f36ae@t) ((lambda (f36b0@ls/false) (if f36b0@ls/false (apply (lambda (f36b2@p f36b3@q) ((lambda (f36b6@t) ((lambda (f36b8@ls/false) (if f36b8@ls/false (apply (lambda (f36ba@p) (if (= f36ab@lev '0) (f3661@quasicons* f36ba@p (f3669@vquasi f36b3@q f36ab@lev)) (f3663@quasicons (f3663@quasicons (f3645@datum 'unquote) (f366b@quasi f36ba@p (- f36ab@lev '1))) (f3669@vquasi f36b3@q f36ab@lev)))) f36b8@ls/false) ((lambda (f36bc@t) ((lambda (f36be@ls/false) (if f36be@ls/false (apply (lambda (f36c0@p) (if (= f36ab@lev '0) (f3665@quasiappend f36c0@p (f3669@vquasi f36b3@q f36ab@lev)) (f3663@quasicons (f3663@quasicons (f3645@datum 'unquote-splicing) (f366b@quasi f36c0@p (- f36ab@lev '1))) (f3669@vquasi f36b3@q f36ab@lev)))) f36be@ls/false) ((lambda (f36c2@t) ((lambda (f36c4@ls/false) (if f36c4@ls/false (apply (lambda (f36c6@p) (f3663@quasicons (f366b@quasi f36c6@p f36ab@lev) (f3669@vquasi f36b3@q f36ab@lev))) f36c4@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f36c2@t))) (f2eb6@syntax-dispatch f36c2@t 'any))) f36bc@t))) (f2eb6@syntax-dispatch f36bc@t '(#(scheme-id unquote-splicing) . each-any)))) f36b6@t))) (f2eb6@syntax-dispatch f36b6@t '(#(scheme-id unquote) . each-any)))) f36b2@p)) f36b0@ls/false) ((lambda (f36c8@t) ((lambda (f36ca@ls/false) (if f36ca@ls/false (apply (lambda () (list (f2e40@scheme-stx 'quote) '())) f36ca@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f36c8@t))) (f2eb6@syntax-dispatch f36c8@t '()))) f36ae@t))) (f2eb6@syntax-dispatch f36ae@t '(any . any)))) f36aa@p))) (set! f366b@quasi (lambda (f3674@p f3675@lev) ((lambda (f3678@t) ((lambda (f367a@ls/false) (if f367a@ls/false (apply (lambda (f367c@p) (if (= f3675@lev '0) f367c@p (f3663@quasicons (f3645@datum 'unquote) (f366b@quasi (list f367c@p) (- f3675@lev '1))))) f367a@ls/false) ((lambda (f367e@t) ((lambda (f3680@ls/false) (if f3680@ls/false (apply (lambda (f3682@p f3683@q) (if (= f3675@lev '0) (f3661@quasicons* f3682@p (f366b@quasi f3683@q f3675@lev)) (f3663@quasicons (f3663@quasicons (f3645@datum 'unquote) (f366b@quasi f3682@p (- f3675@lev '1))) (f366b@quasi f3683@q f3675@lev)))) f3680@ls/false) ((lambda (f3686@t) ((lambda (f3688@ls/false) (if f3688@ls/false (apply (lambda (f368a@p f368b@q) (if (= f3675@lev '0) (f3665@quasiappend f368a@p (f366b@quasi f368b@q f3675@lev)) (f3663@quasicons (f3663@quasicons (f3645@datum 'unquote-splicing) (f366b@quasi f368a@p (- f3675@lev '1))) (f366b@quasi f368b@q f3675@lev)))) f3688@ls/false) ((lambda (f368e@t) ((lambda (f3690@ls/false) (if f3690@ls/false (apply (lambda (f3692@p) (f3663@quasicons (f3645@datum 'quasiquote) (f366b@quasi (list f3692@p) (+ f3675@lev '1)))) f3690@ls/false) ((lambda (f3694@t) ((lambda (f3696@ls/false) (if f3696@ls/false (apply (lambda (f3698@p f3699@q) (f3663@quasicons (f366b@quasi f3698@p f3675@lev) (f366b@quasi f3699@q f3675@lev))) f3696@ls/false) ((lambda (f369c@t) ((lambda (f369e@ls/false) (if (and f369e@ls/false (apply (lambda (f36a0@x) (not (f2c73@stx? f36a0@x))) f369e@ls/false)) (apply (lambda (f36a2@x) (f3667@quasivector (f3669@vquasi f36a2@x f3675@lev))) f369e@ls/false) ((lambda (f36a4@t) ((lambda (f36a6@ls/false) (if f36a6@ls/false (apply (lambda (f36a8@p) (list (f2e40@scheme-stx 'quote) f36a8@p)) f36a6@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f36a4@t))) (f2eb6@syntax-dispatch f36a4@t 'any))) f369c@t))) (f2eb6@syntax-dispatch f369c@t '#(vector each-any)))) f3694@t))) (f2eb6@syntax-dispatch f3694@t '(any . any)))) f368e@t))) (f2eb6@syntax-dispatch f368e@t '(#(scheme-id quasiquote) any)))) f3686@t))) (f2eb6@syntax-dispatch f3686@t '((#(scheme-id unquote-splicing) . each-any) . any)))) f367e@t))) (f2eb6@syntax-dispatch f367e@t '((#(scheme-id unquote) . each-any) . any)))) f3678@t))) (f2eb6@syntax-dispatch f3678@t '(#(scheme-id unquote) any)))) f3674@p))) (lambda (f366c@x) ((lambda (f366e@t) ((lambda (f3670@ls/false) (if f3670@ls/false (apply (lambda (f3672@e) (f366b@quasi f3672@e '0)) f3670@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f366e@t))) (f2eb6@syntax-dispatch f366e@t '(_ any)))) f366c@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! f2ea6@quasisyntax-macro ((lambda () ((lambda (f3749@quasi) (begin (set! f3749@quasi (lambda (f3764@p f3765@lev) ((lambda (f3768@t) ((lambda (f376a@ls/false) (if f376a@ls/false (apply (lambda (f376c@p) (if (= f3765@lev '0) ((lambda (f376e@g) (values (list f376e@g) (list f376c@p) f376e@g)) (gensym)) (call-with-values (lambda () (f3749@quasi f376c@p (- f3765@lev '1))) (lambda (f3776@f3771 f3777@f3773 f3778@f3775) ((lambda (f377c@p f377d@rhs* f377e@lhs*) (values f377e@lhs* f377d@rhs* (list 'unsyntax f377c@p))) f3778@f3775 f3777@f3773 f3776@f3771))))) f376a@ls/false) ((lambda (f3782@t) ((lambda (f3784@ls/false) (if (and f3784@ls/false (apply (lambda () (= f3765@lev '0)) f3784@ls/false)) (apply (lambda () (f2f9f@syntax-violation '#f '"incorrect use of unsyntax" f3764@p)) f3784@ls/false) ((lambda (f3786@t) ((lambda (f3788@ls/false) (if f3788@ls/false (apply (lambda (f378a@p* f378b@q) (call-with-values (lambda () (f3749@quasi f378b@q f3765@lev)) (lambda (f3794@f378f f3795@f3791 f3796@f3793) ((lambda (f379a@q f379b@rhs* f379c@lhs*) (if (= f3765@lev '0) ((lambda (f37a0@g*) (values (append f37a0@g* f379c@lhs*) (append f378a@p* f379b@rhs*) (append f37a0@g* f379a@q))) (map (lambda (f37a2@x) (gensym)) f378a@p*)) (call-with-values (lambda () (f3749@quasi f378a@p* (- f3765@lev '1))) (lambda (f37aa@f37a5 f37ab@f37a7 f37ac@f37a9) ((lambda (f37b0@p* f37b1@rhs2* f37b2@lhs2*) (values (append f37b2@lhs2* f379c@lhs*) (append f37b1@rhs2* f379b@rhs*) (cons (cons 'unsyntax f37b0@p*) f379a@q))) f37ac@f37a9 f37ab@f37a7 f37aa@f37a5))))) f3796@f3793 f3795@f3791 f3794@f378f)))) f3788@ls/false) ((lambda (f37b6@t) ((lambda (f37b8@ls/false) (if f37b8@ls/false (apply (lambda (f37ba@p* f37bb@q) (call-with-values (lambda () (f3749@quasi f37bb@q f3765@lev)) (lambda (f37c4@f37bf f37c5@f37c1 f37c6@f37c3) ((lambda (f37ca@q f37cb@rhs* f37cc@lhs*) (if (= f3765@lev '0) ((lambda (f37d0@g*) (values (append (map (lambda (f37d2@g) (cons f37d2@g '(...))) f37d0@g*) f37cc@lhs*) (append f37ba@p* f37cb@rhs*) (append (apply append (map (lambda (f37d4@g) (cons f37d4@g '(...))) f37d0@g*)) f37ca@q))) (map (lambda (f37d6@x) (gensym)) f37ba@p*)) (call-with-values (lambda () (f3749@quasi f37ba@p* (- f3765@lev '1))) (lambda (f37de@f37d9 f37df@f37db f37e0@f37dd) ((lambda (f37e4@p* f37e5@rhs2* f37e6@lhs2*) (values (append f37e6@lhs2* f37cc@lhs*) (append f37e5@rhs2* f37cb@rhs*) (cons (cons 'unsyntax-splicing f37e4@p*) f37ca@q))) f37e0@f37dd f37df@f37db f37de@f37d9))))) f37c6@f37c3 f37c5@f37c1 f37c4@f37bf)))) f37b8@ls/false) ((lambda (f37ea@t) ((lambda (f37ec@ls/false) (if (and f37ec@ls/false (apply (lambda () (= f3765@lev '0)) f37ec@ls/false)) (apply (lambda () (f2f9f@syntax-violation '#f '"incorrect use of unsyntax-splicing" f3764@p)) f37ec@ls/false) ((lambda (f37ee@t) ((lambda (f37f0@ls/false) (if f37f0@ls/false (apply (lambda (f37f2@p) (call-with-values (lambda () (f3749@quasi f37f2@p (+ f3765@lev '1))) (lambda (f37fa@f37f5 f37fb@f37f7 f37fc@f37f9) ((lambda (f3800@p f3801@rhs* f3802@lhs*) (values f3802@lhs* f3801@rhs* (list 'quasisyntax f3800@p))) f37fc@f37f9 f37fb@f37f7 f37fa@f37f5)))) f37f0@ls/false) ((lambda (f3806@t) ((lambda (f3808@ls/false) (if f3808@ls/false (apply (lambda (f380a@p f380b@q) (call-with-values (lambda () (f3749@quasi f380a@p f3765@lev)) (lambda (f381a@f380f f381b@f3811 f381c@f3813) (call-with-values (lambda () (f3749@quasi f380b@q f3765@lev)) (lambda (f3820@f3815 f3821@f3817 f3822@f3819) ((lambda (f3826@q f3827@rhs2* f3828@lhs2* f3829@p f382a@rhs* f382b@lhs*) (values (append f3828@lhs2* f382b@lhs*) (append f3827@rhs2* f382a@rhs*) (cons f3829@p f3826@q))) f3822@f3819 f3821@f3817 f3820@f3815 f381c@f3813 f381b@f3811 f381a@f380f)))))) f3808@ls/false) ((lambda (f3832@t) ((lambda (f3834@ls/false) (if f3834@ls/false (apply (lambda (f3836@x*) (call-with-values (lambda () (f3749@quasi f3836@x* f3765@lev)) (lambda (f383e@f3839 f383f@f383b f3840@f383d) ((lambda (f3844@x* f3845@rhs* f3846@lhs*) (values f3846@lhs* f3845@rhs* (list->vector f3844@x*))) f3840@f383d f383f@f383b f383e@f3839)))) f3834@ls/false) ((lambda (f384a@t) ((lambda (f384c@ls/false) (if f384c@ls/false (apply (lambda () (values '() '() f3764@p)) f384c@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f384a@t))) (f2eb6@syntax-dispatch f384a@t '_))) f3832@t))) (f2eb6@syntax-dispatch f3832@t '#(vector each-any)))) f3806@t))) (f2eb6@syntax-dispatch f3806@t '(any . any)))) f37ee@t))) (f2eb6@syntax-dispatch f37ee@t '(#(scheme-id quasisyntax) any)))) f37ea@t))) (f2eb6@syntax-dispatch f37ea@t '#(scheme-id unsyntax-splicing)))) f37b6@t))) (f2eb6@syntax-dispatch f37b6@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) f3786@t))) (f2eb6@syntax-dispatch f3786@t '((#(scheme-id unsyntax) . each-any) . any)))) f3782@t))) (f2eb6@syntax-dispatch f3782@t '#(scheme-id unsyntax)))) f3768@t))) (f2eb6@syntax-dispatch f3768@t '(#(scheme-id unsyntax) any)))) f3764@p))) (lambda (f374a@x) ((lambda (f374c@t) ((lambda (f374e@ls/false) (if f374e@ls/false (apply (lambda (f3750@e) (call-with-values (lambda () (f3749@quasi f3750@e '0)) (lambda (f3758@f3753 f3759@f3755 f375a@f3757) ((lambda (f375e@v f375f@rhs* f3760@lhs*) (f2e6c@bless (list 'syntax-case (cons 'list f375f@rhs*) '() (list f3760@lhs* (list 'syntax f375e@v))))) f375a@f3757 f3759@f3755 f3758@f3753)))) f374e@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f374c@t))) (f2eb6@syntax-dispatch f374c@t '(_ any)))) f374a@x)))) '#f)))) (set! f2ea8@define-struct-macro (lambda (f384e@stx) (f2f9f@syntax-violation '#f '"define-struct not supported" f384e@stx))) (set! f2eaa@define-record-type-macro (lambda (f3850@x) ((lambda (f3853@id f3855@get-record-name f3857@get-record-constructor-name f3859@get-record-predicate-name f385b@get-clause f385d@foo-rtd-code f385f@parent-rtd-code f3861@parent-rcd-code f3863@foo-rcd-code f3865@get-protocol-code f3867@get-fields f3869@get-mutator-indices f386b@get-mutators f386d@get-accessors f386f@enumerate f3871@do-define-record f3873@verify-clauses) (begin (set! f3853@id (lambda (f3a46@ctxt . f3a48@str*) (f2fa3@datum->syntax f3a46@ctxt (string->symbol (apply string-append (map (lambda (f3a4a@x) (if (symbol? f3a4a@x) (symbol->string f3a4a@x) (if (string? f3a4a@x) f3a4a@x (assertion-violation 'define-record-type '"BUG")))) f3a48@str*)))))) (set! f3855@get-record-name (lambda (f3a34@spec) ((lambda (f3a36@t) ((lambda (f3a38@ls/false) (if f3a38@ls/false (apply (lambda (f3a3a@foo f3a3b@make-foo f3a3c@foo?) f3a3a@foo) f3a38@ls/false) ((lambda (f3a40@t) ((lambda (f3a42@ls/false) (if f3a42@ls/false (apply (lambda (f3a44@foo) f3a44@foo) f3a42@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3a40@t))) (f2eb6@syntax-dispatch f3a40@t 'any))) f3a36@t))) (f2eb6@syntax-dispatch f3a36@t '(any any any)))) f3a34@spec))) (set! f3857@get-record-constructor-name (lambda (f3a20@spec) ((lambda (f3a22@t) ((lambda (f3a24@ls/false) (if f3a24@ls/false (apply (lambda (f3a26@foo f3a27@make-foo f3a28@foo?) f3a27@make-foo) f3a24@ls/false) ((lambda (f3a2c@t) ((lambda (f3a2e@ls/false) (if (and f3a2e@ls/false (apply (lambda (f3a30@foo) (f2cab@id? f3a30@foo)) f3a2e@ls/false)) (apply (lambda (f3a32@foo) (f3853@id f3a32@foo '"make-" (f2cc1@stx->datum f3a32@foo))) f3a2e@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3a2c@t))) (f2eb6@syntax-dispatch f3a2c@t 'any))) f3a22@t))) (f2eb6@syntax-dispatch f3a22@t '(any any any)))) f3a20@spec))) (set! f3859@get-record-predicate-name (lambda (f3a0c@spec) ((lambda (f3a0e@t) ((lambda (f3a10@ls/false) (if f3a10@ls/false (apply (lambda (f3a12@foo f3a13@make-foo f3a14@foo?) f3a14@foo?) f3a10@ls/false) ((lambda (f3a18@t) ((lambda (f3a1a@ls/false) (if (and f3a1a@ls/false (apply (lambda (f3a1c@foo) (f2cab@id? f3a1c@foo)) f3a1a@ls/false)) (apply (lambda (f3a1e@foo) (f3853@id f3a1e@foo (f2cc1@stx->datum f3a1e@foo) '"?")) f3a1a@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3a18@t))) (f2eb6@syntax-dispatch f3a18@t 'any))) f3a0e@t))) (f2eb6@syntax-dispatch f3a0e@t '(any any any)))) f3a0c@spec))) (set! f385b@get-clause (lambda (f39fa@id f39fb@ls) ((lambda (f39fe@t) ((lambda (f3a00@ls/false) (if f3a00@ls/false (apply (lambda () '#f) f3a00@ls/false) ((lambda (f3a02@t) ((lambda (f3a04@ls/false) (if f3a04@ls/false (apply (lambda (f3a06@x f3a07@rest f3a08@ls) (if (f2cb3@free-id=? (f2e6c@bless f39fa@id) f3a06@x) (cons f3a06@x f3a07@rest) (f385b@get-clause f39fa@id f3a08@ls))) f3a04@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3a02@t))) (f2eb6@syntax-dispatch f3a02@t '((any . any) . any)))) f39fe@t))) (f2eb6@syntax-dispatch f39fe@t '()))) f39fb@ls))) (set! f385d@foo-rtd-code (lambda (f39a8@name f39a9@clause* f39aa@parent-rtd-code) ((lambda (f39af@convert-field-spec*) (begin (set! f39af@convert-field-spec* (lambda (f39e0@ls) (list->vector (map (lambda (f39e2@x) ((lambda (f39e4@t) ((lambda (f39e6@ls/false) (if f39e6@ls/false (apply (lambda (f39e8@name f39e9@rest) (list 'mutable f39e8@name)) f39e6@ls/false) ((lambda (f39ec@t) ((lambda (f39ee@ls/false) (if f39ee@ls/false (apply (lambda (f39f0@name f39f1@rest) (list 'immutable f39f0@name)) f39ee@ls/false) ((lambda (f39f4@t) ((lambda (f39f6@ls/false) (if f39f6@ls/false (apply (lambda (f39f8@name) (list 'immutable f39f8@name)) f39f6@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f39f4@t))) (f2eb6@syntax-dispatch f39f4@t 'any))) f39ec@t))) (f2eb6@syntax-dispatch f39ec@t '(#(scheme-id immutable) any . any)))) f39e4@t))) (f2eb6@syntax-dispatch f39e4@t '(#(scheme-id mutable) any . any)))) f39e2@x)) f39e0@ls)))) ((lambda (f39b0@uid-code f39b1@sealed? f39b2@opaque? f39b3@fields) (f2e6c@bless (list 'make-record-type-descriptor (list 'quote f39a8@name) f39aa@parent-rtd-code f39b0@uid-code f39b1@sealed? f39b2@opaque? f39b3@fields))) ((lambda (f39b8@t) ((lambda (f39ba@ls/false) (if f39ba@ls/false (apply (lambda () (list 'quote (gensym))) f39ba@ls/false) ((lambda (f39bc@t) ((lambda (f39be@ls/false) (if f39be@ls/false (apply (lambda (f39c0@uid) (list 'quote f39c0@uid)) f39be@ls/false) ((lambda (f39c2@t) ((lambda (f39c4@ls/false) (if f39c4@ls/false (apply (lambda () '#f) f39c4@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f39c2@t))) (f2eb6@syntax-dispatch f39c2@t '_))) f39bc@t))) (f2eb6@syntax-dispatch f39bc@t '(_ any)))) f39b8@t))) (f2eb6@syntax-dispatch f39b8@t '(_)))) (f385b@get-clause 'nongenerative f39a9@clause*)) ((lambda (f39c6@t) ((lambda (f39c8@ls/false) (if f39c8@ls/false (apply (lambda () '#t) f39c8@ls/false) ((lambda (f39ca@t) ((lambda (f39cc@ls/false) (if f39cc@ls/false (apply (lambda () '#f) f39cc@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f39ca@t))) (f2eb6@syntax-dispatch f39ca@t '_))) f39c6@t))) (f2eb6@syntax-dispatch f39c6@t '(_ #(atom #t))))) (f385b@get-clause 'sealed f39a9@clause*)) ((lambda (f39ce@t) ((lambda (f39d0@ls/false) (if f39d0@ls/false (apply (lambda () '#t) f39d0@ls/false) ((lambda (f39d2@t) ((lambda (f39d4@ls/false) (if f39d4@ls/false (apply (lambda () '#f) f39d4@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f39d2@t))) (f2eb6@syntax-dispatch f39d2@t '_))) f39ce@t))) (f2eb6@syntax-dispatch f39ce@t '(_ #(atom #t))))) (f385b@get-clause 'opaque f39a9@clause*)) ((lambda (f39d6@t) ((lambda (f39d8@ls/false) (if f39d8@ls/false (apply (lambda (f39da@field-spec*) (list 'quote (f39af@convert-field-spec* f39da@field-spec*))) f39d8@ls/false) ((lambda (f39dc@t) ((lambda (f39de@ls/false) (if f39de@ls/false (apply (lambda () ''#()) f39de@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f39dc@t))) (f2eb6@syntax-dispatch f39dc@t '_))) f39d6@t))) (f2eb6@syntax-dispatch f39d6@t '(_ . each-any)))) (f385b@get-clause 'fields f39a9@clause*))))) '#f))) (set! f385f@parent-rtd-code (lambda (f3990@clause*) ((lambda (f3992@t) ((lambda (f3994@ls/false) (if f3994@ls/false (apply (lambda (f3996@name) (list 'record-type-descriptor f3996@name)) f3994@ls/false) ((lambda (f3998@t) ((lambda (f399a@ls/false) (if f399a@ls/false (apply (lambda () ((lambda (f399c@t) ((lambda (f399e@ls/false) (if f399e@ls/false (apply (lambda (f39a0@rtd f39a1@rcd) f39a0@rtd) f399e@ls/false) ((lambda (f39a4@t) ((lambda (f39a6@ls/false) (if f39a6@ls/false (apply (lambda () '#f) f39a6@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f39a4@t))) (f2eb6@syntax-dispatch f39a4@t '#(atom #f)))) f399c@t))) (f2eb6@syntax-dispatch f399c@t '(_ any any)))) (f385b@get-clause 'parent-rtd f3990@clause*))) f399a@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3998@t))) (f2eb6@syntax-dispatch f3998@t '#(atom #f)))) f3992@t))) (f2eb6@syntax-dispatch f3992@t '(_ any)))) (f385b@get-clause 'parent f3990@clause*)))) (set! f3861@parent-rcd-code (lambda (f3978@clause*) ((lambda (f397a@t) ((lambda (f397c@ls/false) (if f397c@ls/false (apply (lambda (f397e@name) (list 'record-constructor-descriptor f397e@name)) f397c@ls/false) ((lambda (f3980@t) ((lambda (f3982@ls/false) (if f3982@ls/false (apply (lambda () ((lambda (f3984@t) ((lambda (f3986@ls/false) (if f3986@ls/false (apply (lambda (f3988@rtd f3989@rcd) f3989@rcd) f3986@ls/false) ((lambda (f398c@t) ((lambda (f398e@ls/false) (if f398e@ls/false (apply (lambda () '#f) f398e@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f398c@t))) (f2eb6@syntax-dispatch f398c@t '#(atom #f)))) f3984@t))) (f2eb6@syntax-dispatch f3984@t '(_ any any)))) (f385b@get-clause 'parent-rtd f3978@clause*))) f3982@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3980@t))) (f2eb6@syntax-dispatch f3980@t '#(atom #f)))) f397a@t))) (f2eb6@syntax-dispatch f397a@t '(_ any)))) (f385b@get-clause 'parent f3978@clause*)))) (set! f3863@foo-rcd-code (lambda (f3970@clause* f3971@foo-rtd f3972@protocol f3973@parent-rcd-code) (list 'make-record-constructor-descriptor f3971@foo-rtd f3973@parent-rcd-code f3972@protocol))) (set! f3865@get-protocol-code (lambda (f3964@clause*) ((lambda (f3966@t) ((lambda (f3968@ls/false) (if f3968@ls/false (apply (lambda (f396a@expr) f396a@expr) f3968@ls/false) ((lambda (f396c@t) ((lambda (f396e@ls/false) (if f396e@ls/false (apply (lambda () '#f) f396e@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f396c@t))) (f2eb6@syntax-dispatch f396c@t '_))) f3966@t))) (f2eb6@syntax-dispatch f3966@t '(_ any)))) (f385b@get-clause 'protocol f3964@clause*)))) (set! f3867@get-fields (lambda (f3952@clause*) ((lambda (f3954@t) ((lambda (f3956@ls/false) (if f3956@ls/false (apply (lambda () '()) f3956@ls/false) ((lambda (f3958@t) ((lambda (f395a@ls/false) (if f395a@ls/false (apply (lambda (f395c@f*) f395c@f*) f395a@ls/false) ((lambda (f395e@t) ((lambda (f3960@ls/false) (if f3960@ls/false (apply (lambda (f3962@rest) (f3867@get-fields f3962@rest)) f3960@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f395e@t))) (f2eb6@syntax-dispatch f395e@t '(_ . any)))) f3958@t))) (f2eb6@syntax-dispatch f3958@t '((#(scheme-id fields) . each-any) . _)))) f3954@t))) (f2eb6@syntax-dispatch f3954@t '()))) f3952@clause*))) (set! f3869@get-mutator-indices (lambda (f393a@fields) ((letrec ((f393c@f (lambda (f393e@fields f393f@i) ((lambda (f3942@t) ((lambda (f3944@ls/false) (if f3944@ls/false (apply (lambda () '()) f3944@ls/false) ((lambda (f3946@t) ((lambda (f3948@ls/false) (if f3948@ls/false (apply (lambda (f394a@rest) (cons f393f@i (f393c@f f394a@rest (+ f393f@i '1)))) f3948@ls/false) ((lambda (f394c@t) ((lambda (f394e@ls/false) (if f394e@ls/false (apply (lambda (f3950@rest) (f393c@f f3950@rest (+ f393f@i '1))) f394e@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f394c@t))) (f2eb6@syntax-dispatch f394c@t '(_ . any)))) f3946@t))) (f2eb6@syntax-dispatch f3946@t '((#(scheme-id mutable) . _) . any)))) f3942@t))) (f2eb6@syntax-dispatch f3942@t '()))) f393e@fields)))) f393c@f) f393a@fields '0))) (set! f386b@get-mutators (lambda (f3910@foo f3911@fields) ((lambda (f3915@gen-name) (begin (set! f3915@gen-name (lambda (f3938@x) (f2fa3@datum->syntax f3910@foo (string->symbol (string-append (symbol->string (f2fa5@syntax->datum f3910@foo)) '"-" (symbol->string (f2fa5@syntax->datum f3938@x)) '"-set!"))))) ((letrec ((f3916@f (lambda (f3918@fields) ((lambda (f391a@t) ((lambda (f391c@ls/false) (if f391c@ls/false (apply (lambda () '()) f391c@ls/false) ((lambda (f391e@t) ((lambda (f3920@ls/false) (if f3920@ls/false (apply (lambda (f3922@name f3923@accessor f3924@mutator f3925@rest) (cons f3924@mutator (f3916@f f3925@rest))) f3920@ls/false) ((lambda (f392a@t) ((lambda (f392c@ls/false) (if f392c@ls/false (apply (lambda (f392e@name f392f@rest) (cons (f3915@gen-name f392e@name) (f3916@f f392f@rest))) f392c@ls/false) ((lambda (f3932@t) ((lambda (f3934@ls/false) (if f3934@ls/false (apply (lambda (f3936@rest) (f3916@f f3936@rest)) f3934@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3932@t))) (f2eb6@syntax-dispatch f3932@t '(_ . any)))) f392a@t))) (f2eb6@syntax-dispatch f392a@t '((#(scheme-id mutable) any) . any)))) f391e@t))) (f2eb6@syntax-dispatch f391e@t '((#(scheme-id mutable) any any any) . any)))) f391a@t))) (f2eb6@syntax-dispatch f391a@t '()))) f3918@fields)))) f3916@f) f3911@fields))) '#f))) (set! f386d@get-accessors (lambda (f38cc@foo f38cd@fields) ((lambda (f38d1@gen-name) (begin (set! f38d1@gen-name (lambda (f390e@x) (f2fa3@datum->syntax f38cc@foo (string->symbol (string-append (symbol->string (f2fa5@syntax->datum f38cc@foo)) '"-" (symbol->string (f2fa5@syntax->datum f390e@x))))))) (map (lambda (f38d2@field) ((lambda (f38d4@t) ((lambda (f38d6@ls/false) (if (and f38d6@ls/false (apply (lambda (f38d8@name f38d9@accessor f38da@mutator) (f2cab@id? f38d9@accessor)) f38d6@ls/false)) (apply (lambda (f38de@name f38df@accessor f38e0@mutator) f38df@accessor) f38d6@ls/false) ((lambda (f38e4@t) ((lambda (f38e6@ls/false) (if (and f38e6@ls/false (apply (lambda (f38e8@name f38e9@accessor) (f2cab@id? f38e9@accessor)) f38e6@ls/false)) (apply (lambda (f38ec@name f38ed@accessor) f38ed@accessor) f38e6@ls/false) ((lambda (f38f0@t) ((lambda (f38f2@ls/false) (if (and f38f2@ls/false (apply (lambda (f38f4@name) (f2cab@id? f38f4@name)) f38f2@ls/false)) (apply (lambda (f38f6@name) (f38d1@gen-name f38f6@name)) f38f2@ls/false) ((lambda (f38f8@t) ((lambda (f38fa@ls/false) (if (and f38fa@ls/false (apply (lambda (f38fc@name) (f2cab@id? f38fc@name)) f38fa@ls/false)) (apply (lambda (f38fe@name) (f38d1@gen-name f38fe@name)) f38fa@ls/false) ((lambda (f3900@t) ((lambda (f3902@ls/false) (if (and f3902@ls/false (apply (lambda (f3904@name) (f2cab@id? f3904@name)) f3902@ls/false)) (apply (lambda (f3906@name) (f38d1@gen-name f3906@name)) f3902@ls/false) ((lambda (f3908@t) ((lambda (f390a@ls/false) (if f390a@ls/false (apply (lambda (f390c@others) (f2f9f@syntax-violation '#f '"invalid field spec" f38d2@field)) f390a@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3908@t))) (f2eb6@syntax-dispatch f3908@t 'any))) f3900@t))) (f2eb6@syntax-dispatch f3900@t 'any))) f38f8@t))) (f2eb6@syntax-dispatch f38f8@t '(#(scheme-id immutable) any)))) f38f0@t))) (f2eb6@syntax-dispatch f38f0@t '(#(scheme-id mutable) any)))) f38e4@t))) (f2eb6@syntax-dispatch f38e4@t '(#(scheme-id immutable) any any)))) f38d4@t))) (f2eb6@syntax-dispatch f38d4@t '(#(scheme-id mutable) any any any)))) f38d2@field)) f38cd@fields))) '#f))) (set! f386f@enumerate (lambda (f38c4@ls) ((letrec ((f38c6@f (lambda (f38c8@ls f38c9@i) (if (null? f38c8@ls) '() (cons f38c9@i (f38c6@f (cdr f38c8@ls) (+ f38c9@i '1))))))) f38c6@f) f38c4@ls '0))) (set! f3871@do-define-record (lambda (f389c@namespec f389d@clause*) ((lambda (f38a0@foo) ((lambda (f38a2@foo-rtd) ((lambda (f38a4@foo-rcd) ((lambda (f38a6@protocol) ((lambda (f38a8@make-foo) ((lambda (f38aa@fields) ((lambda (f38ac@idx*) ((lambda (f38ae@foo-x*) ((lambda (f38b0@set-foo-x!*) ((lambda (f38b2@set-foo-idx*) ((lambda (f38b4@foo?) ((lambda (f38b6@foo-rtd-code) ((lambda (f38b8@foo-rcd-code) ((lambda (f38ba@protocol-code) ((lambda () (f2e6c@bless (cons 'begin (cons (list 'define f38a2@foo-rtd f38b6@foo-rtd-code) (cons (list 'define f38a6@protocol f38ba@protocol-code) (cons (list 'define f38a4@foo-rcd f38b8@foo-rcd-code) (cons (list 'define-syntax f38a0@foo (list 'list ''$rtd (list 'syntax f38a2@foo-rtd) (list 'syntax f38a4@foo-rcd))) (cons (list 'define f38b4@foo? (list 'record-predicate f38a2@foo-rtd)) (cons (list 'define f38a8@make-foo (list 'record-constructor f38a4@foo-rcd)) (append (map (lambda (f38bc@foo-x f38bd@idx) (list 'define f38bc@foo-x (list 'record-accessor f38a2@foo-rtd f38bd@idx))) f38ae@foo-x* f38ac@idx*) (map (lambda (f38c0@set-foo-x! f38c1@idx) (list 'define f38c0@set-foo-x! (list 'record-mutator f38a2@foo-rtd f38c1@idx))) f38b0@set-foo-x!* f38b2@set-foo-idx*))))))))))))) (f3865@get-protocol-code f389d@clause*))) (f3863@foo-rcd-code f389d@clause* f38a2@foo-rtd f38a6@protocol (f3861@parent-rcd-code f389d@clause*)))) (f385d@foo-rtd-code f38a0@foo f389d@clause* (f385f@parent-rtd-code f389d@clause*)))) (f3859@get-record-predicate-name f389c@namespec))) (f3869@get-mutator-indices f38aa@fields))) (f386b@get-mutators f38a0@foo f38aa@fields))) (f386d@get-accessors f38a0@foo f38aa@fields))) (f386f@enumerate f38aa@fields))) (f3867@get-fields f389d@clause*))) (f3857@get-record-constructor-name f389c@namespec))) (gensym))) (gensym))) (gensym))) (f3855@get-record-name f389c@namespec)))) (set! f3873@verify-clauses (lambda (f387c@x f387d@cls*) ((lambda (f3881@valid-kwds f3883@free-id-member?) (begin (set! f3881@valid-kwds (map f2e6c@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! f3883@free-id-member? (lambda (f3898@x f3899@ls) (and (pair? f3899@ls) (or (f2cb3@free-id=? f3898@x (car f3899@ls)) (f3883@free-id-member? f3898@x (cdr f3899@ls)))))) ((letrec ((f3884@f (lambda (f3886@cls* f3887@seen*) (if (not (null? f3886@cls*)) ((lambda (f388a@t) ((lambda (f388c@ls/false) (if f388c@ls/false (apply (lambda (f388e@kwd f388f@rest) (if (or (not (f2cab@id? f388e@kwd)) (not (f3883@free-id-member? f388e@kwd f3881@valid-kwds))) (f2f9f@syntax-violation '#f '"not a valid define-record-type keyword" f388e@kwd) (if (f2cb9@bound-id-member? f388e@kwd f3887@seen*) (f2f9f@syntax-violation '#f '"duplicate use of keyword " f387c@x f388e@kwd) (f3884@f (cdr f3886@cls*) (cons f388e@kwd f3887@seen*))))) f388c@ls/false) ((lambda (f3892@t) ((lambda (f3894@ls/false) (if f3894@ls/false (apply (lambda (f3896@cls) (f2f9f@syntax-violation '#f '"malformed define-record-type clause" f3896@cls)) f3894@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3892@t))) (f2eb6@syntax-dispatch f3892@t 'any))) f388a@t))) (f2eb6@syntax-dispatch f388a@t '(any . any)))) (car f3886@cls*)) (void))))) f3884@f) f387d@cls* '()))) '#f '#f))) ((lambda (f3874@t) ((lambda (f3876@ls/false) (if f3876@ls/false (apply (lambda (f3878@namespec f3879@clause*) (begin (f3873@verify-clauses f3850@x f3879@clause*) (f3871@do-define-record f3878@namespec f3879@clause*))) f3876@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3874@t))) (f2eb6@syntax-dispatch f3874@t '(_ any . each-any)))) f3850@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! f2eac@define-condition-type-macro (lambda (f3a4c@x) ((lambda (f3a4f@mkname) (begin (set! f3a4f@mkname (lambda (f3a7c@name f3a7d@suffix) (f2fa3@datum->syntax f3a7c@name (string->symbol (string-append (symbol->string (f2fa5@syntax->datum f3a7c@name)) f3a7d@suffix))))) ((lambda (f3a50@t) ((lambda (f3a52@ls/false) (if (and f3a52@ls/false (apply (lambda (f3a54@ctxt f3a55@name f3a56@super f3a57@constructor f3a58@predicate f3a59@field* f3a5a@accessor*) (and (f2cab@id? f3a55@name) (f2cab@id? f3a56@super) (f2cab@id? f3a57@constructor) (f2cab@id? f3a58@predicate) (for-all f2cab@id? f3a59@field*) (for-all f2cab@id? f3a5a@accessor*))) f3a52@ls/false)) (apply (lambda (f3a62@ctxt f3a63@name f3a64@super f3a65@constructor f3a66@predicate f3a67@field* f3a68@accessor*) ((lambda (f3a70@aux-accessor*) (f2e6c@bless (cons 'begin (cons (cons 'define-record-type (cons (list f3a63@name f3a65@constructor (gensym)) (cons (list 'parent f3a64@super) (cons (cons 'fields (map (lambda (f3a72@field f3a73@aux) (list 'immutable f3a72@field f3a73@aux)) f3a67@field* f3a70@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define f3a66@predicate (list 'condition-predicate (list 'record-type-descriptor f3a63@name))) (map (lambda (f3a76@accessor f3a77@aux) (list 'define f3a76@accessor (list 'condition-accessor (list 'record-type-descriptor f3a63@name) f3a77@aux))) f3a68@accessor* f3a70@aux-accessor*)))))) (map (lambda (f3a7a@x) (gensym)) f3a68@accessor*))) f3a52@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3a50@t))) (f2eb6@syntax-dispatch f3a50@t '(any any any any any . #(each (any any)))))) f3a4c@x))) '#f))) (set! f2eae@incorrect-usage-macro (lambda (f3a80@e) (f2f9f@syntax-violation '#f '"incorrect usage of auxiliary keyword" f3a80@e))) (set! f2eb0@parameterize-macro (lambda (f3a82@e) ((lambda (f3a84@t) ((lambda (f3a86@ls/false) (if f3a86@ls/false (apply (lambda (f3a88@b f3a89@b*) (f2e6c@bless (cons 'let (cons '() (cons f3a88@b f3a89@b*))))) f3a86@ls/false) ((lambda (f3a8c@t) ((lambda (f3a8e@ls/false) (if f3a8e@ls/false (apply (lambda (f3a90@olhs* f3a91@orhs* f3a92@b f3a93@b*) ((lambda (f3a98@lhs* f3a99@rhs*) (f2e6c@bless (cons (list 'lambda (append f3a98@lhs* f3a99@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (f3a9c@lhs f3a9d@rhs) (list 'let (list (list 't (list f3a9c@lhs))) (list f3a9c@lhs f3a9d@rhs) (cons 'set! (cons f3a9d@rhs '(t))))) f3a98@lhs* f3a99@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons f3a92@b f3a93@b*))) '(swap)))))) (append f3a90@olhs* f3a91@orhs*)))) (f2f8d@generate-temporaries f3a90@olhs*) (f2f8d@generate-temporaries f3a91@orhs*))) f3a8e@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3a8c@t))) (f2eb6@syntax-dispatch f3a8c@t '(_ #(each (any any)) any . each-any)))) f3a84@t))) (f2eb6@syntax-dispatch f3a84@t '(_ () any . each-any)))) f3a82@e))) (set! f2eb2@foreign-call-transformer (lambda (f3aa0@e f3aa1@r f3aa2@mr) ((lambda (f3aa6@t) ((lambda (f3aa8@ls/false) (if f3aa8@ls/false (apply (lambda (f3aaa@name f3aab@arg*) (cons 'foreign-call (cons (f2ed8@chi-expr f3aaa@name f3aa1@r f3aa2@mr) (f2ed4@chi-expr* f3aab@arg* f3aa1@r f3aa2@mr)))) f3aa8@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3aa6@t))) (f2eb6@syntax-dispatch f3aa6@t '(_ any . each-any)))) f3aa0@e))) (set! f2eb4@convert-pattern (lambda (f3aae@pattern f3aaf@keys) ((lambda (f3ab3@cvt* f3ab5@cvt) (begin (set! f3ab3@cvt* (lambda (f3b52@p* f3b53@n f3b54@ids) (if (null? f3b52@p*) (values '() f3b54@ids) (call-with-values (lambda () (f3ab3@cvt* (cdr f3b52@p*) f3b53@n f3b54@ids)) (lambda (f3b5c@f3b59 f3b5d@f3b5b) ((lambda (f3b60@ids f3b61@y) (call-with-values (lambda () (f3ab5@cvt (car f3b52@p*) f3b53@n f3b60@ids)) (lambda (f3b68@f3b65 f3b69@f3b67) ((lambda (f3b6c@ids f3b6d@x) (values (cons f3b6d@x f3b61@y) f3b6c@ids)) f3b69@f3b67 f3b68@f3b65)))) f3b5d@f3b5b f3b5c@f3b59)))))) (set! f3ab5@cvt (lambda (f3ab6@p f3ab7@n f3ab8@ids) ((lambda (f3abc@t) ((lambda (f3abe@ls/false) (if (and f3abe@ls/false (apply (lambda (f3ac0@id) (f2cab@id? f3ac0@id)) f3abe@ls/false)) (apply (lambda (f3ac2@id) (if (f2cb9@bound-id-member? f3ab6@p f3aaf@keys) (values (vector 'free-id f3ab6@p) f3ab8@ids) (if (f2cb3@free-id=? f3ab6@p (f2e40@scheme-stx '_)) (values '_ f3ab8@ids) (values 'any (cons (cons f3ab6@p f3ab7@n) f3ab8@ids))))) f3abe@ls/false) ((lambda (f3ac4@t) ((lambda (f3ac6@ls/false) (if (and f3ac6@ls/false (apply (lambda (f3ac8@p f3ac9@dots) (f2eb8@ellipsis? f3ac9@dots)) f3ac6@ls/false)) (apply (lambda (f3acc@p f3acd@dots) (call-with-values (lambda () (f3ab5@cvt f3acc@p (+ f3ab7@n '1) f3ab8@ids)) (lambda (f3ad4@f3ad1 f3ad5@f3ad3) ((lambda (f3ad8@ids f3ad9@p) (values (if (eq? f3ad9@p 'any) 'each-any (vector 'each f3ad9@p)) f3ad8@ids)) f3ad5@f3ad3 f3ad4@f3ad1)))) f3ac6@ls/false) ((lambda (f3adc@t) ((lambda (f3ade@ls/false) (if (and f3ade@ls/false (apply (lambda (f3ae0@x f3ae1@dots f3ae2@ys f3ae3@z) (f2eb8@ellipsis? f3ae1@dots)) f3ade@ls/false)) (apply (lambda (f3ae8@x f3ae9@dots f3aea@ys f3aeb@z) (call-with-values (lambda () (f3ab5@cvt f3aeb@z f3ab7@n f3ab8@ids)) (lambda (f3af4@f3af1 f3af5@f3af3) ((lambda (f3af8@ids f3af9@z) (call-with-values (lambda () (f3ab3@cvt* f3aea@ys f3ab7@n f3af8@ids)) (lambda (f3b00@f3afd f3b01@f3aff) ((lambda (f3b04@ids f3b05@ys) (call-with-values (lambda () (f3ab5@cvt f3ae8@x (+ f3ab7@n '1) f3b04@ids)) (lambda (f3b0c@f3b09 f3b0d@f3b0b) ((lambda (f3b10@ids f3b11@x) (values (vector 'each+ f3b11@x (reverse f3b05@ys) f3af9@z) f3b10@ids)) f3b0d@f3b0b f3b0c@f3b09)))) f3b01@f3aff f3b00@f3afd)))) f3af5@f3af3 f3af4@f3af1)))) f3ade@ls/false) ((lambda (f3b14@t) ((lambda (f3b16@ls/false) (if f3b16@ls/false (apply (lambda (f3b18@x f3b19@y) (call-with-values (lambda () (f3ab5@cvt f3b19@y f3ab7@n f3ab8@ids)) (lambda (f3b20@f3b1d f3b21@f3b1f) ((lambda (f3b24@ids f3b25@y) (call-with-values (lambda () (f3ab5@cvt f3b18@x f3ab7@n f3b24@ids)) (lambda (f3b2c@f3b29 f3b2d@f3b2b) ((lambda (f3b30@ids f3b31@x) (values (cons f3b31@x f3b25@y) f3b30@ids)) f3b2d@f3b2b f3b2c@f3b29)))) f3b21@f3b1f f3b20@f3b1d)))) f3b16@ls/false) ((lambda (f3b34@t) ((lambda (f3b36@ls/false) (if f3b36@ls/false (apply (lambda () (values '() f3ab8@ids)) f3b36@ls/false) ((lambda (f3b38@t) ((lambda (f3b3a@ls/false) (if (and f3b3a@ls/false (apply (lambda (f3b3c@p) (not (f2c73@stx? f3b3c@p))) f3b3a@ls/false)) (apply (lambda (f3b3e@p) (call-with-values (lambda () (f3ab5@cvt f3b3e@p f3ab7@n f3ab8@ids)) (lambda (f3b44@f3b41 f3b45@f3b43) ((lambda (f3b48@ids f3b49@p) (values (vector 'vector f3b49@p) f3b48@ids)) f3b45@f3b43 f3b44@f3b41)))) f3b3a@ls/false) ((lambda (f3b4c@t) ((lambda (f3b4e@ls/false) (if f3b4e@ls/false (apply (lambda (f3b50@datum) (values (vector 'atom (f2cc1@stx->datum f3b50@datum)) f3ab8@ids)) f3b4e@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3b4c@t))) (f2eb6@syntax-dispatch f3b4c@t 'any))) f3b38@t))) (f2eb6@syntax-dispatch f3b38@t '#(vector each-any)))) f3b34@t))) (f2eb6@syntax-dispatch f3b34@t '()))) f3b14@t))) (f2eb6@syntax-dispatch f3b14@t '(any . any)))) f3adc@t))) (f2eb6@syntax-dispatch f3adc@t '(any any . #(each+ any () any))))) f3ac4@t))) (f2eb6@syntax-dispatch f3ac4@t '(any any)))) f3abc@t))) (f2eb6@syntax-dispatch f3abc@t 'any))) f3ab6@p))) (f3ab5@cvt f3aae@pattern '0 '()))) '#f '#f))) (set! f2eb6@syntax-dispatch ((lambda () ((lambda (f3b71@stx^ f3b73@match-each f3b75@match-each+ f3b77@match-each-any f3b79@match-empty f3b7b@combine f3b7d@match* f3b7f@match) (begin (set! f3b71@stx^ (lambda (f3c4c@e f3c4d@m* f3c4e@s* f3c4f@ae*) (if (and (null? f3c4d@m*) (null? f3c4e@s*) (null? f3c4f@ae*)) f3c4c@e (f2c93@mkstx f3c4c@e f3c4d@m* f3c4e@s* f3c4f@ae*)))) (set! f3b73@match-each (lambda (f3c2c@e f3c2d@p f3c2e@m* f3c2f@s* f3c30@ae*) (if (pair? f3c2c@e) ((lambda (f3c36@first) (and f3c36@first ((lambda (f3c38@rest) (and f3c38@rest (cons f3c36@first f3c38@rest))) (f3b73@match-each (cdr f3c2c@e) f3c2d@p f3c2e@m* f3c2f@s* f3c30@ae*)))) (f3b7f@match (car f3c2c@e) f3c2d@p f3c2e@m* f3c2f@s* f3c30@ae* '())) (if (null? f3c2c@e) '() (if (f2c73@stx? f3c2c@e) (and (not (f2c29@top-marked? f3c2e@m*)) (call-with-values (lambda () (f2c91@join-wraps f3c2e@m* f3c2f@s* f3c30@ae* f3c2c@e)) (lambda (f3c40@f3c3b f3c41@f3c3d f3c42@f3c3f) ((lambda (f3c46@ae* f3c47@s* f3c48@m*) (f3b73@match-each (f2c77@stx-expr f3c2c@e) f3c2d@p f3c48@m* f3c47@s* f3c46@ae*)) f3c42@f3c3f f3c41@f3c3d f3c40@f3c3b)))) (if (f284a@f2769@annotation? f3c2c@e) (f3b73@match-each (f284c@f276d@annotation-expression f3c2c@e) f3c2d@p f3c2e@m* f3c2f@s* f3c30@ae*) '#f)))))) (set! f3b75@match-each+ (lambda (f3bec@e f3bed@x-pat f3bee@y-pat f3bef@z-pat f3bf0@m* f3bf1@s* f3bf2@ae* f3bf3@r) ((letrec ((f3bfc@f (lambda (f3bfe@e f3bff@m* f3c00@s* f3c01@ae*) (if (pair? f3bfe@e) (call-with-values (lambda () (f3bfc@f (cdr f3bfe@e) f3bff@m* f3c00@s* f3c01@ae*)) (lambda (f3c0c@f3c07 f3c0d@f3c09 f3c0e@f3c0b) ((lambda (f3c12@r f3c13@y-pat f3c14@xr*) (if f3c12@r (if (null? f3c13@y-pat) ((lambda (f3c18@xr) (if f3c18@xr (values (cons f3c18@xr f3c14@xr*) f3c13@y-pat f3c12@r) (values '#f '#f '#f))) (f3b7f@match (car f3bfe@e) f3bed@x-pat f3bff@m* f3c00@s* f3c01@ae* '())) (values '() (cdr f3c13@y-pat) (f3b7f@match (car f3bfe@e) (car f3c13@y-pat) f3bff@m* f3c00@s* f3c01@ae* f3c12@r))) (values '#f '#f '#f))) f3c0e@f3c0b f3c0d@f3c09 f3c0c@f3c07))) (if (f2c73@stx? f3bfe@e) (if (f2c29@top-marked? f3bff@m*) (values '() f3bee@y-pat (f3b7f@match f3bfe@e f3bef@z-pat f3bff@m* f3c00@s* f3c01@ae* f3bf3@r)) (call-with-values (lambda () (f2c91@join-wraps f3bff@m* f3c00@s* f3c01@ae* f3bfe@e)) (lambda (f3c20@f3c1b f3c21@f3c1d f3c22@f3c1f) ((lambda (f3c26@ae* f3c27@s* f3c28@m*) (f3bfc@f (f2c77@stx-expr f3bfe@e) f3c28@m* f3c27@s* f3c26@ae*)) f3c22@f3c1f f3c21@f3c1d f3c20@f3c1b)))) (if (f284a@f2769@annotation? f3bfe@e) (f3bfc@f (f284c@f276d@annotation-expression f3bfe@e) f3bff@m* f3c00@s* f3c01@ae*) (values '() f3bee@y-pat (f3b7f@match f3bfe@e f3bef@z-pat f3bff@m* f3c00@s* f3c01@ae* f3bf3@r)))))))) f3bfc@f) f3bec@e f3bf0@m* f3bf1@s* f3bf2@ae*))) (set! f3b77@match-each-any (lambda (f3bd0@e f3bd1@m* f3bd2@s* f3bd3@ae*) (if (pair? f3bd0@e) ((lambda (f3bd8@l) (and f3bd8@l (cons (f3b71@stx^ (car f3bd0@e) f3bd1@m* f3bd2@s* f3bd3@ae*) f3bd8@l))) (f3b77@match-each-any (cdr f3bd0@e) f3bd1@m* f3bd2@s* f3bd3@ae*)) (if (null? f3bd0@e) '() (if (f2c73@stx? f3bd0@e) (and (not (f2c29@top-marked? f3bd1@m*)) (call-with-values (lambda () (f2c91@join-wraps f3bd1@m* f3bd2@s* f3bd3@ae* f3bd0@e)) (lambda (f3be0@f3bdb f3be1@f3bdd f3be2@f3bdf) ((lambda (f3be6@ae* f3be7@s* f3be8@m*) (f3b77@match-each-any (f2c77@stx-expr f3bd0@e) f3be8@m* f3be7@s* f3be6@ae*)) f3be2@f3bdf f3be1@f3bdd f3be0@f3bdb)))) (if (f284a@f2769@annotation? f3bd0@e) (f3b77@match-each-any (f284c@f276d@annotation-expression f3bd0@e) f3bd1@m* f3bd2@s* f3bd3@ae*) '#f)))))) (set! f3b79@match-empty (lambda (f3bca@p f3bcb@r) (if (null? f3bca@p) f3bcb@r (if (eq? f3bca@p '_) f3bcb@r (if (eq? f3bca@p 'any) (cons '() f3bcb@r) (if (pair? f3bca@p) (f3b79@match-empty (car f3bca@p) (f3b79@match-empty (cdr f3bca@p) f3bcb@r)) (if (eq? f3bca@p 'each-any) (cons '() f3bcb@r) ((lambda (f3bce@t) (if (memv f3bce@t '(each)) (f3b79@match-empty (vector-ref f3bca@p '1) f3bcb@r) (if (memv f3bce@t '(each+)) (f3b79@match-empty (vector-ref f3bca@p '1) (f3b79@match-empty (reverse (vector-ref f3bca@p '2)) (f3b79@match-empty (vector-ref f3bca@p '3) f3bcb@r))) (if (memv f3bce@t '(free-id atom)) f3bcb@r (if (memv f3bce@t '(scheme-id atom)) f3bcb@r (if (memv f3bce@t '(vector)) (f3b79@match-empty (vector-ref f3bca@p '1) f3bcb@r) (assertion-violation 'syntax-dispatch '"invalid pattern" f3bca@p))))))) (vector-ref f3bca@p '0))))))))) (set! f3b7b@combine (lambda (f3bc6@r* f3bc7@r) (if (null? (car f3bc6@r*)) f3bc7@r (cons (map car f3bc6@r*) (f3b7b@combine (map cdr f3bc6@r*) f3bc7@r))))) (set! f3b7d@match* (lambda (f3ba2@e f3ba3@p f3ba4@m* f3ba5@s* f3ba6@ae* f3ba7@r) (if (null? f3ba3@p) (and (null? f3ba2@e) f3ba7@r) (if (pair? f3ba3@p) (and (pair? f3ba2@e) (f3b7f@match (car f3ba2@e) (car f3ba3@p) f3ba4@m* f3ba5@s* f3ba6@ae* (f3b7f@match (cdr f3ba2@e) (cdr f3ba3@p) f3ba4@m* f3ba5@s* f3ba6@ae* f3ba7@r))) (if (eq? f3ba3@p 'each-any) ((lambda (f3bae@l) (and f3bae@l (cons f3bae@l f3ba7@r))) (f3b77@match-each-any f3ba2@e f3ba4@m* f3ba5@s* f3ba6@ae*)) ((lambda (f3bb0@t) (if (memv f3bb0@t '(each)) (if (null? f3ba2@e) (f3b79@match-empty (vector-ref f3ba3@p '1) f3ba7@r) ((lambda (f3bb2@r*) (and f3bb2@r* (f3b7b@combine f3bb2@r* f3ba7@r))) (f3b73@match-each f3ba2@e (vector-ref f3ba3@p '1) f3ba4@m* f3ba5@s* f3ba6@ae*))) (if (memv f3bb0@t '(free-id)) (and (symbol? f3ba2@e) (f2c29@top-marked? f3ba4@m*) (f2cb3@free-id=? (f3b71@stx^ f3ba2@e f3ba4@m* f3ba5@s* f3ba6@ae*) (vector-ref f3ba3@p '1)) f3ba7@r) (if (memv f3bb0@t '(scheme-id)) (and (symbol? f3ba2@e) (f2c29@top-marked? f3ba4@m*) (f2cb3@free-id=? (f3b71@stx^ f3ba2@e f3ba4@m* f3ba5@s* f3ba6@ae*) (f2e40@scheme-stx (vector-ref f3ba3@p '1))) f3ba7@r) (if (memv f3bb0@t '(each+)) (call-with-values (lambda () (f3b75@match-each+ f3ba2@e (vector-ref f3ba3@p '1) (vector-ref f3ba3@p '2) (vector-ref f3ba3@p '3) f3ba4@m* f3ba5@s* f3ba6@ae* f3ba7@r)) (lambda (f3bba@f3bb5 f3bbb@f3bb7 f3bbc@f3bb9) ((lambda (f3bc0@r f3bc1@y-pat f3bc2@xr*) (and f3bc0@r (null? f3bc1@y-pat) (if (null? f3bc2@xr*) (f3b79@match-empty (vector-ref f3ba3@p '1) f3bc0@r) (f3b7b@combine f3bc2@xr* f3bc0@r)))) f3bbc@f3bb9 f3bbb@f3bb7 f3bba@f3bb5))) (if (memv f3bb0@t '(atom)) (and (fast-equal? (vector-ref f3ba3@p '1) (f2cbf@strip f3ba2@e f3ba4@m*)) f3ba7@r) (if (memv f3bb0@t '(vector)) (and (vector? f3ba2@e) (f3b7f@match (vector->list f3ba2@e) (vector-ref f3ba3@p '1) f3ba4@m* f3ba5@s* f3ba6@ae* f3ba7@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" f3ba3@p)))))))) (vector-ref f3ba3@p '0))))))) (set! f3b7f@match (lambda (f3b84@e f3b85@p f3b86@m* f3b87@s* f3b88@ae* f3b89@r) (if (not f3b89@r) '#f (if (eq? f3b85@p '_) f3b89@r (if (eq? f3b85@p 'any) (cons (f3b71@stx^ f3b84@e f3b86@m* f3b87@s* f3b88@ae*) f3b89@r) (if (f2c73@stx? f3b84@e) (and (not (f2c29@top-marked? f3b86@m*)) (call-with-values (lambda () (f2c91@join-wraps f3b86@m* f3b87@s* f3b88@ae* f3b84@e)) (lambda (f3b96@f3b91 f3b97@f3b93 f3b98@f3b95) ((lambda (f3b9c@ae* f3b9d@s* f3b9e@m*) (f3b7f@match (f2c77@stx-expr f3b84@e) f3b85@p f3b9e@m* f3b9d@s* f3b9c@ae* f3b89@r)) f3b98@f3b95 f3b97@f3b93 f3b96@f3b91)))) (if (f284a@f2769@annotation? f3b84@e) (f3b7f@match (f284c@f276d@annotation-expression f3b84@e) f3b85@p f3b86@m* f3b87@s* f3b88@ae* f3b89@r) (f3b7d@match* f3b84@e f3b85@p f3b86@m* f3b87@s* f3b88@ae* f3b89@r)))))))) (lambda (f3b80@e f3b81@p) (f3b7f@match f3b80@e f3b81@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! f2eb8@ellipsis? (lambda (f3c54@x) (and (f2cab@id? f3c54@x) (f2cb3@free-id=? f3c54@x (f2e40@scheme-stx '...))))) (set! f2eba@underscore? (lambda (f3c56@x) (and (f2cab@id? f3c56@x) (f2cb3@free-id=? f3c56@x (f2e40@scheme-stx '_))))) (set! f2ebc@verify-literals (lambda (f3c58@lits f3c59@expr) (for-each (lambda (f3c5c@x) (if (or (not (f2cab@id? f3c5c@x)) (f2eb8@ellipsis? f3c5c@x) (f2eba@underscore? f3c5c@x)) (f2f9f@syntax-violation '#f '"invalid literal" f3c59@expr f3c5c@x) (void))) f3c58@lits))) (set! f2ebe@syntax-case-transformer ((lambda () ((lambda (f3c5f@build-dispatch-call f3c61@invalid-ids-error f3c63@gen-clause f3c65@gen-syntax-case) (begin (set! f3c5f@build-dispatch-call (lambda (f3cd0@pvars f3cd1@expr f3cd2@y f3cd3@r f3cd4@mr) ((lambda (f3cda@ids f3cdb@levels) ((lambda (f3cde@labels f3cdf@new-vars) ((lambda (f3ce2@body) (list '(primitive apply) (f2c07@f2b47@build-lambda '#f f3cdf@new-vars f3ce2@body) f3cd2@y)) (f2ed8@chi-expr (f2c97@add-subst (f2c66@make-full-rib f3cda@ids f3cde@labels) f3cd1@expr) (append (map (lambda (f3ce4@label f3ce5@var f3ce6@level) (cons f3ce4@label (f2ccb@make-binding 'syntax (cons f3ce5@var f3ce6@level)))) f3cde@labels f3cdf@new-vars (map cdr f3cd0@pvars)) f3cd3@r) f3cd4@mr))) (map f2c2f@gen-label f3cda@ids) (map f2c2b@gen-lexical f3cda@ids))) (map car f3cd0@pvars) (map cdr f3cd0@pvars)))) (set! f3c61@invalid-ids-error (lambda (f3cc4@id* f3cc5@e f3cc6@class) ((letrec ((f3cca@find (lambda (f3ccc@id* f3ccd@ok*) (if (null? f3ccc@id*) (f2f9f@syntax-violation '#f '"invalid syntax" f3cc5@e) (if (f2cab@id? (car f3ccc@id*)) (if (f2cb9@bound-id-member? (car f3ccc@id*) f3ccd@ok*) (f2f9b@syntax-error (car f3ccc@id*) '"duplicate " f3cc6@class) (f3cca@find (cdr f3ccc@id*) (cons (car f3ccc@id*) f3ccd@ok*))) (f2f9b@syntax-error (car f3ccc@id*) '"invalid " f3cc6@class)))))) f3cca@find) f3cc4@id* '()))) (set! f3c63@gen-clause (lambda (f3c9c@x f3c9d@keys f3c9e@clauses f3c9f@r f3ca0@mr f3ca1@pat f3ca2@fender f3ca3@expr) (call-with-values (lambda () (f2eb4@convert-pattern f3ca1@pat f3c9d@keys)) (lambda (f3cb0@f3cad f3cb1@f3caf) ((lambda (f3cb4@pvars f3cb5@p) (if (not (f2cb7@distinct-bound-ids? (map car f3cb4@pvars))) (f3c61@invalid-ids-error (map car f3cb4@pvars) f3ca1@pat '"pattern variable") (if (not (for-all (lambda (f3cb8@x) (not (f2eb8@ellipsis? (car f3cb8@x)))) f3cb4@pvars)) (f2f9f@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" f3ca1@pat) ((lambda (f3cba@y) ((lambda (f3cbc@test) ((lambda (f3cbe@conseq) ((lambda (f3cc0@altern) (list (f2c07@f2b47@build-lambda '#f (list f3cba@y) (list 'if f3cbc@test f3cbe@conseq f3cc0@altern)) (list '(primitive syntax-dispatch) f3c9c@x (list 'quote f3cb5@p)))) (f3c65@gen-syntax-case f3c9c@x f3c9d@keys f3c9e@clauses f3c9f@r f3ca0@mr))) (f3c5f@build-dispatch-call f3cb4@pvars f3ca3@expr f3cba@y f3c9f@r f3ca0@mr))) (if (eq? f3ca2@fender '#t) f3cba@y ((lambda (f3cc2@call) (list 'if f3cba@y f3cc2@call (list 'quote '#f))) (f3c5f@build-dispatch-call f3cb4@pvars f3ca2@fender f3cba@y f3c9f@r f3ca0@mr))))) (f2c2b@gen-lexical 'tmp))))) f3cb1@f3caf f3cb0@f3cad))))) (set! f3c65@gen-syntax-case (lambda (f3c7a@x f3c7b@keys f3c7c@clauses f3c7d@r f3c7e@mr) (if (null? f3c7c@clauses) (list '(primitive syntax-error) f3c7a@x) ((lambda (f3c84@t) ((lambda (f3c86@ls/false) (if f3c86@ls/false (apply (lambda (f3c88@pat f3c89@expr) (if (and (f2cab@id? f3c88@pat) (not (f2cb9@bound-id-member? f3c88@pat f3c7b@keys)) (not (f2eb8@ellipsis? f3c88@pat))) (if (f2cb3@free-id=? f3c88@pat (f2e40@scheme-stx '_)) (f2ed8@chi-expr f3c89@expr f3c7d@r f3c7e@mr) ((lambda (f3c8c@lab f3c8d@lex) ((lambda (f3c90@body) (list (f2c07@f2b47@build-lambda '#f (list f3c8d@lex) f3c90@body) f3c7a@x)) (f2ed8@chi-expr (f2c97@add-subst (f2c66@make-full-rib (list f3c88@pat) (list f3c8c@lab)) f3c89@expr) (cons (cons f3c8c@lab (f2ccb@make-binding 'syntax (cons f3c8d@lex '0))) f3c7d@r) f3c7e@mr))) (f2c2f@gen-label f3c88@pat) (f2c2b@gen-lexical f3c88@pat))) (f3c63@gen-clause f3c7a@x f3c7b@keys (cdr f3c7c@clauses) f3c7d@r f3c7e@mr f3c88@pat '#t f3c89@expr))) f3c86@ls/false) ((lambda (f3c92@t) ((lambda (f3c94@ls/false) (if f3c94@ls/false (apply (lambda (f3c96@pat f3c97@fender f3c98@expr) (f3c63@gen-clause f3c7a@x f3c7b@keys (cdr f3c7c@clauses) f3c7d@r f3c7e@mr f3c96@pat f3c97@fender f3c98@expr)) f3c94@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3c92@t))) (f2eb6@syntax-dispatch f3c92@t '(any any any)))) f3c84@t))) (f2eb6@syntax-dispatch f3c84@t '(any any)))) (car f3c7c@clauses))))) (lambda (f3c66@e f3c67@r f3c68@mr) ((lambda (f3c6c@t) ((lambda (f3c6e@ls/false) (if f3c6e@ls/false (apply (lambda (f3c70@expr f3c71@keys f3c72@clauses) (begin (f2ebc@verify-literals f3c71@keys f3c66@e) ((lambda (f3c76@x) ((lambda (f3c78@body) (list (f2c07@f2b47@build-lambda '#f (list f3c76@x) f3c78@body) (f2ed8@chi-expr f3c70@expr f3c67@r f3c68@mr))) (f3c65@gen-syntax-case f3c76@x f3c71@keys f3c72@clauses f3c67@r f3c68@mr))) (f2c2b@gen-lexical 'tmp)))) f3c6e@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3c6c@t))) (f2eb6@syntax-dispatch f3c6c@t '(_ any each-any . each-any)))) f3c66@e)))) '#f '#f '#f '#f)))) (set! f2ec0@ellipsis-map (lambda (f3cea@proc f3ceb@ls . f3cee@ls*) ((lambda (f3cf1@who) (begin (set! f3cf1@who '...) (begin (if (not (list? f3ceb@ls)) (assertion-violation f3cf1@who '"not a list" f3ceb@ls) (void)) (if (not (null? f3cee@ls*)) ((lambda (f3cf2@n) (for-each (lambda (f3cf4@x) (begin (if (not (list? f3cf4@x)) (assertion-violation f3cf1@who '"not a list" f3cf4@x) (void)) (if (not (= (length f3cf4@x) f3cf2@n)) (assertion-violation f3cf1@who '"length mismatch" f3ceb@ls f3cf4@x) (void)))) f3cee@ls*)) (length f3ceb@ls)) (void)) (apply map f3cea@proc f3ceb@ls f3cee@ls*)))) '#f))) (set! f2ec2@syntax-transformer ((lambda () ((lambda (f3cf7@gen-syntax f3cf9@gen-ref f3cfb@gen-append f3cfd@gen-mappend f3cff@gen-map f3d01@gen-cons f3d03@gen-vector f3d05@regen) (begin (set! f3cf7@gen-syntax (lambda (f3d6e@src f3d6f@e f3d70@r f3d71@maps f3d72@ellipsis? f3d73@vec?) ((lambda (f3d7a@t) ((lambda (f3d7c@ls/false) (if (and f3d7c@ls/false (apply (lambda (f3d7e@dots) (f3d72@ellipsis? f3d7e@dots)) f3d7c@ls/false)) (apply (lambda (f3d80@dots) (f2f9f@syntax-violation '#f '"misplaced ellipsis in syntax form" f3d6e@src)) f3d7c@ls/false) ((lambda (f3d82@t) ((lambda (f3d84@ls/false) (if (and f3d84@ls/false (apply (lambda (f3d86@id) (f2cab@id? f3d86@id)) f3d84@ls/false)) (apply (lambda (f3d88@id) ((lambda (f3d8a@label) ((lambda (f3d8c@b) ((lambda () (if (eq? (f2ccd@binding-type f3d8c@b) 'syntax) (call-with-values (lambda () ((lambda (f3d92@var.lev) (f3cf9@gen-ref f3d6e@src (car f3d92@var.lev) (cdr f3d92@var.lev) f3d71@maps)) (f2ccf@binding-value f3d8c@b))) (lambda (f3d94@f3d8f f3d95@f3d91) ((lambda (f3d98@maps f3d99@var) (values (list 'ref f3d99@var) f3d98@maps)) f3d95@f3d91 f3d94@f3d8f))) (values (list 'quote f3d6f@e) f3d71@maps))))) (f2cc9@label->binding f3d8a@label f3d70@r))) (f2cc5@id->label f3d6f@e))) f3d84@ls/false) ((lambda (f3d9c@t) ((lambda (f3d9e@ls/false) (if (and f3d9e@ls/false (apply (lambda (f3da0@dots f3da1@e) (f3d72@ellipsis? f3da0@dots)) f3d9e@ls/false)) (apply (lambda (f3da4@dots f3da5@e) (if f3d73@vec? (f2f9f@syntax-violation '#f '"misplaced ellipsis in syntax form" f3d6e@src) (f3cf7@gen-syntax f3d6e@src f3da5@e f3d70@r f3d71@maps (lambda (f3da8@x) '#f) '#f))) f3d9e@ls/false) ((lambda (f3daa@t) ((lambda (f3dac@ls/false) (if (and f3dac@ls/false (apply (lambda (f3dae@x f3daf@dots f3db0@y) (f3d72@ellipsis? f3daf@dots)) f3dac@ls/false)) (apply (lambda (f3db4@x f3db5@dots f3db6@y) ((letrec ((f3dba@f (lambda (f3dbc@y f3dbd@k) ((lambda (f3dc0@t) ((lambda (f3dc2@ls/false) (if f3dc2@ls/false (apply (lambda () (f3dbd@k f3d71@maps)) f3dc2@ls/false) ((lambda (f3dc4@t) ((lambda (f3dc6@ls/false) (if (and f3dc6@ls/false (apply (lambda (f3dc8@dots f3dc9@y) (f3d72@ellipsis? f3dc8@dots)) f3dc6@ls/false)) (apply (lambda (f3dcc@dots f3dcd@y) (f3dba@f f3dcd@y (lambda (f3dd0@maps) (call-with-values (lambda () (f3dbd@k (cons '() f3dd0@maps))) (lambda (f3dd6@f3dd3 f3dd7@f3dd5) ((lambda (f3dda@maps f3ddb@x) (if (null? (car f3dda@maps)) (f2f9f@syntax-violation '#f '"extra ellipsis in syntax form" f3d6e@src) (values (f3cfd@gen-mappend f3ddb@x (car f3dda@maps)) (cdr f3dda@maps)))) f3dd7@f3dd5 f3dd6@f3dd3)))))) f3dc6@ls/false) ((lambda (f3dde@t) ((lambda (f3de0@ls/false) (if f3de0@ls/false (apply (lambda () (call-with-values (lambda () (f3cf7@gen-syntax f3d6e@src f3dbc@y f3d70@r f3d71@maps f3d72@ellipsis? f3d73@vec?)) (lambda (f3de6@f3de3 f3de7@f3de5) ((lambda (f3dea@maps f3deb@y) (call-with-values (lambda () (f3dbd@k f3dea@maps)) (lambda (f3df2@f3def f3df3@f3df1) ((lambda (f3df6@maps f3df7@x) (values (f3cfb@gen-append f3df7@x f3deb@y) f3df6@maps)) f3df3@f3df1 f3df2@f3def)))) f3de7@f3de5 f3de6@f3de3)))) f3de0@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3dde@t))) (f2eb6@syntax-dispatch f3dde@t '_))) f3dc4@t))) (f2eb6@syntax-dispatch f3dc4@t '(any . any)))) f3dc0@t))) (f2eb6@syntax-dispatch f3dc0@t '()))) f3dbc@y)))) f3dba@f) f3db6@y (lambda (f3dfa@maps) (call-with-values (lambda () (f3cf7@gen-syntax f3d6e@src f3db4@x f3d70@r (cons '() f3dfa@maps) f3d72@ellipsis? '#f)) (lambda (f3e00@f3dfd f3e01@f3dff) ((lambda (f3e04@maps f3e05@x) (if (null? (car f3e04@maps)) (f2f9f@syntax-violation '#f '"extra ellipsis in syntax form" f3d6e@src) (values (f3cff@gen-map f3e05@x (car f3e04@maps)) (cdr f3e04@maps)))) f3e01@f3dff f3e00@f3dfd)))))) f3dac@ls/false) ((lambda (f3e08@t) ((lambda (f3e0a@ls/false) (if f3e0a@ls/false (apply (lambda (f3e0c@x f3e0d@y) (call-with-values (lambda () (f3cf7@gen-syntax f3d6e@src f3e0c@x f3d70@r f3d71@maps f3d72@ellipsis? '#f)) (lambda (f3e14@f3e11 f3e15@f3e13) ((lambda (f3e18@maps f3e19@xnew) (call-with-values (lambda () (f3cf7@gen-syntax f3d6e@src f3e0d@y f3d70@r f3e18@maps f3d72@ellipsis? f3d73@vec?)) (lambda (f3e20@f3e1d f3e21@f3e1f) ((lambda (f3e24@maps f3e25@ynew) (values (f3d01@gen-cons f3d6f@e f3e0c@x f3e0d@y f3e19@xnew f3e25@ynew) f3e24@maps)) f3e21@f3e1f f3e20@f3e1d)))) f3e15@f3e13 f3e14@f3e11)))) f3e0a@ls/false) ((lambda (f3e28@t) ((lambda (f3e2a@ls/false) (if f3e2a@ls/false (apply (lambda (f3e2c@ls) (call-with-values (lambda () (f3cf7@gen-syntax f3d6e@src f3e2c@ls f3d70@r f3d71@maps f3d72@ellipsis? '#t)) (lambda (f3e32@f3e2f f3e33@f3e31) ((lambda (f3e36@maps f3e37@lsnew) (values (f3d03@gen-vector f3d6f@e f3e2c@ls f3e37@lsnew) f3e36@maps)) f3e33@f3e31 f3e32@f3e2f)))) f3e2a@ls/false) ((lambda (f3e3a@t) ((lambda (f3e3c@ls/false) (if f3e3c@ls/false (apply (lambda () (values (list 'quote f3d6f@e) f3d71@maps)) f3e3c@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3e3a@t))) (f2eb6@syntax-dispatch f3e3a@t '_))) f3e28@t))) (f2eb6@syntax-dispatch f3e28@t '#(vector each-any)))) f3e08@t))) (f2eb6@syntax-dispatch f3e08@t '(any . any)))) f3daa@t))) (f2eb6@syntax-dispatch f3daa@t '(any any . any)))) f3d9c@t))) (f2eb6@syntax-dispatch f3d9c@t '(any any)))) f3d82@t))) (f2eb6@syntax-dispatch f3d82@t 'any))) f3d7a@t))) (f2eb6@syntax-dispatch f3d7a@t 'any))) f3d6f@e))) (set! f3cf9@gen-ref (lambda (f3d54@src f3d55@var f3d56@level f3d57@maps) (if (= f3d56@level '0) (values f3d55@var f3d57@maps) (if (null? f3d57@maps) (f2f9f@syntax-violation '#f '"missing ellipsis in syntax form" f3d54@src) (call-with-values (lambda () (f3cf9@gen-ref f3d54@src f3d55@var (- f3d56@level '1) (cdr f3d57@maps))) (lambda (f3d60@f3d5d f3d61@f3d5f) ((lambda (f3d64@outer-maps f3d65@outer-var) ((lambda (f3d68@t) (if f3d68@t ((lambda (f3d6a@b) (values (cdr f3d6a@b) f3d57@maps)) f3d68@t) ((lambda (f3d6c@inner-var) (values f3d6c@inner-var (cons (cons (cons f3d65@outer-var f3d6c@inner-var) (car f3d57@maps)) f3d64@outer-maps))) (f2c2b@gen-lexical 'tmp)))) (assq f3d65@outer-var (car f3d57@maps)))) f3d61@f3d5f f3d60@f3d5d))))))) (set! f3cfb@gen-append (lambda (f3d50@x f3d51@y) (if (fast-equal? f3d51@y ''()) f3d50@x (list 'append f3d50@x f3d51@y)))) (set! f3cfd@gen-mappend (lambda (f3d4c@e f3d4d@map-env) (list 'apply '(primitive append) (f3cff@gen-map f3d4c@e f3d4d@map-env)))) (set! f3cff@gen-map (lambda (f3d3a@e f3d3b@map-env) ((lambda (f3d3e@formals f3d3f@actuals) (if (eq? (car f3d3a@e) 'ref) (car f3d3f@actuals) (if (for-all (lambda (f3d42@x) (and (eq? (car f3d42@x) 'ref) (memq (cadr f3d42@x) f3d3e@formals))) (cdr f3d3a@e)) ((lambda (f3d44@args) (cons 'map (cons (list 'primitive (car f3d3a@e)) f3d44@args))) (map ((lambda (f3d46@r) (lambda (f3d48@x) (cdr (assq (cadr f3d48@x) f3d46@r)))) (map cons f3d3e@formals f3d3f@actuals)) (cdr f3d3a@e))) (cons* 'map (list 'lambda f3d3e@formals f3d3a@e) f3d3f@actuals)))) (map cdr f3d3b@map-env) (map (lambda (f3d4a@x) (list 'ref (car f3d4a@x))) f3d3b@map-env)))) (set! f3d01@gen-cons (lambda (f3d2a@e f3d2b@x f3d2c@y f3d2d@xnew f3d2e@ynew) ((lambda (f3d34@t) (if (memv f3d34@t '(quote)) (if (eq? (car f3d2d@xnew) 'quote) ((lambda (f3d36@xnew f3d37@ynew) (if (and (eq? f3d36@xnew f3d2b@x) (eq? f3d37@ynew f3d2c@y)) (list 'quote f3d2a@e) (list 'quote (cons f3d36@xnew f3d37@ynew)))) (cadr f3d2d@xnew) (cadr f3d2e@ynew)) (if (null? (cadr f3d2e@ynew)) (list 'list f3d2d@xnew) (list 'cons f3d2d@xnew f3d2e@ynew))) (if (memv f3d34@t '(list)) (cons 'list (cons f3d2d@xnew (cdr f3d2e@ynew))) (list 'cons f3d2d@xnew f3d2e@ynew)))) (car f3d2e@ynew)))) (set! f3d03@gen-vector (lambda (f3d24@e f3d25@ls f3d26@lsnew) (if (eq? (car f3d26@lsnew) 'quote) (if (eq? (cadr f3d26@lsnew) f3d25@ls) (list 'quote f3d24@e) (list 'quote (list->vector (cadr f3d26@lsnew)))) (if (eq? (car f3d26@lsnew) 'list) (cons 'vector (cdr f3d26@lsnew)) (list 'list->vector f3d26@lsnew))))) (set! f3d05@regen (lambda (f3d1e@x) ((lambda (f3d20@t) (if (memv f3d20@t '(ref)) (cadr f3d1e@x) (if (memv f3d20@t '(primitive)) (list 'primitive (cadr f3d1e@x)) (if (memv f3d20@t '(quote)) (list 'quote (cadr f3d1e@x)) (if (memv f3d20@t '(lambda)) (f2c07@f2b47@build-lambda '#f (cadr f3d1e@x) (f3d05@regen (caddr f3d1e@x))) (if (memv f3d20@t '(map)) ((lambda (f3d22@ls) (cons '(primitive ellipsis-map) f3d22@ls)) (map f3d05@regen (cdr f3d1e@x))) (cons (list 'primitive (car f3d1e@x)) (map f3d05@regen (cdr f3d1e@x))))))))) (car f3d1e@x)))) (lambda (f3d06@e f3d07@r f3d08@mr) ((lambda (f3d0c@t) ((lambda (f3d0e@ls/false) (if f3d0e@ls/false (apply (lambda (f3d10@x) (call-with-values (lambda () (f3cf7@gen-syntax f3d06@e f3d10@x f3d07@r '() f2eb8@ellipsis? '#f)) (lambda (f3d16@f3d13 f3d17@f3d15) ((lambda (f3d1a@maps f3d1b@e) (f3d05@regen f3d1b@e)) f3d17@f3d15 f3d16@f3d13)))) f3d0e@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3d0c@t))) (f2eb6@syntax-dispatch f3d0c@t '(_ any)))) f3d06@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! f2ec4@core-macro-transformer (lambda (f3e3e@name) ((lambda (f3e40@t) (if (memv f3e40@t '(quote)) f2e66@quote-transformer (if (memv f3e40@t '(lambda)) f2e6a@lambda-transformer (if (memv f3e40@t '(case-lambda)) f2e68@case-lambda-transformer (if (memv f3e40@t '(letrec)) f2e4e@letrec-transformer (if (memv f3e40@t '(letrec*)) f2e50@letrec*-transformer (if (memv f3e40@t '(if)) f2e5e@if-transformer (if (memv f3e40@t '(and)) f2e60@and-transformer (if (memv f3e40@t '(or)) f2e62@or-transformer (if (memv f3e40@t '(foreign-call)) f2eb2@foreign-call-transformer (if (memv f3e40@t '(syntax-case)) f2ebe@syntax-case-transformer (if (memv f3e40@t '(syntax)) f2ec2@syntax-transformer (if (memv f3e40@t '(type-descriptor)) f2e54@type-descriptor-transformer (if (memv f3e40@t '(record-type-descriptor)) f2e56@record-type-descriptor-transformer (if (memv f3e40@t '(record-constructor-descriptor)) f2e58@record-constructor-descriptor-transformer (if (memv f3e40@t '(fluid-let-syntax)) f2e52@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" f3e3e@name))))))))))))))))) f3e3e@name))) (set! f2ec6@symbol-macro (lambda (f3e42@x f3e43@set) ((lambda (f3e46@t) ((lambda (f3e48@ls/false) (if (and f3e48@ls/false (apply (lambda (f3e4a@name) (and (f2cab@id? f3e4a@name) (memq (f2cad@id->sym f3e4a@name) f3e43@set))) f3e48@ls/false)) (apply (lambda (f3e4c@name) (f2e6c@bless (list 'quote f3e4c@name))) f3e48@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3e46@t))) (f2eb6@syntax-dispatch f3e46@t '(_ any)))) f3e42@x))) (set! f2ec8@macro-transformer (lambda (f3e4e@x) (if (procedure? f3e4e@x) f3e4e@x (if (symbol? f3e4e@x) ((lambda (f3e50@t) (if (memv f3e50@t '(define-record-type)) f2eaa@define-record-type-macro (if (memv f3e50@t '(define-struct)) f2ea8@define-struct-macro (if (memv f3e50@t '(include)) f2e9e@include-macro (if (memv f3e50@t '(cond)) f2e9a@cond-macro (if (memv f3e50@t '(let)) f2e72@let-macro (if (memv f3e50@t '(do)) f2e92@do-macro (if (memv f3e50@t '(or)) f2e96@or-macro (if (memv f3e50@t '(and)) f2e98@and-macro (if (memv f3e50@t '(let*)) f2e94@let*-macro (if (memv f3e50@t '(let-values)) f2e74@let-values-macro (if (memv f3e50@t '(let*-values)) f2e76@let*-values-macro (if (memv f3e50@t '(syntax-rules)) f2ea2@syntax-rules-macro (if (memv f3e50@t '(quasiquote)) f2ea4@quasiquote-macro (if (memv f3e50@t '(quasisyntax)) f2ea6@quasisyntax-macro (if (memv f3e50@t '(with-syntax)) f2e6e@with-syntax-macro (if (memv f3e50@t '(when)) f2e5a@when-macro (if (memv f3e50@t '(unless)) f2e5c@unless-macro (if (memv f3e50@t '(case)) f2e64@case-macro (if (memv f3e50@t '(identifier-syntax)) f2e90@identifier-syntax-macro (if (memv f3e50@t '(time)) f2e88@time-macro (if (memv f3e50@t '(delay)) f2e8a@delay-macro (if (memv f3e50@t '(assert)) f2e8c@assert-macro (if (memv f3e50@t '(endianness)) f2e8e@endianness-macro (if (memv f3e50@t '(guard)) f2e84@guard-macro (if (memv f3e50@t '(define-enumeration)) f2e86@define-enumeration-macro (if (memv f3e50@t '(trace-lambda)) f2e78@trace-lambda-macro (if (memv f3e50@t '(trace-define)) f2e7a@trace-define-macro (if (memv f3e50@t '(trace-define-syntax)) f2e7c@trace-define-syntax-macro (if (memv f3e50@t '(trace-let-syntax)) f2e80@trace-let-syntax-macro (if (memv f3e50@t '(trace-letrec-syntax)) f2e82@trace-letrec-syntax-macro (if (memv f3e50@t '(define-condition-type)) f2eac@define-condition-type-macro (if (memv f3e50@t '(parameterize)) f2eb0@parameterize-macro (if (memv f3e50@t '(include-into)) f2ea0@include-into-macro (if (memv f3e50@t '(eol-style)) (lambda (f3e52@x) (f2ec6@symbol-macro f3e52@x '(none lf cr crlf nel crnel ls))) (if (memv f3e50@t '(error-handling-mode)) (lambda (f3e54@x) (f2ec6@symbol-macro f3e54@x '(ignore raise replace))) (if (memv f3e50@t '(buffer-mode)) (lambda (f3e56@x) (f2ec6@symbol-macro f3e56@x '(none line block))) (if (memv f3e50@t '(file-options)) f2c1e@file-options-macro (if (memv f3e50@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) f2eae@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" f3e4e@x)))))))))))))))))))))))))))))))))))))))) f3e4e@x) (error 'core-macro-transformer '"BUG: invalid macro" f3e4e@x))))) (set! f2eca@local-macro-transformer (lambda (f3e58@x) (car f3e58@x))) (set! f2ecc@do-macro-call (lambda (f3e5a@transformer f3e5b@expr) ((lambda (f3e5e@out) (begin ((letrec ((f3e60@f (lambda (f3e62@x) (if (not (f2c73@stx? f3e62@x)) (if (pair? f3e62@x) (begin (f3e60@f (car f3e62@x)) (f3e60@f (cdr f3e62@x))) (if (vector? f3e62@x) (vector-for-each f3e60@f f3e62@x) (if (symbol? f3e62@x) (f2f9f@syntax-violation '#f '"raw symbol encountered in output of macro" f3e5b@expr f3e62@x) (void)))) (void))))) f3e60@f) f3e5e@out) (f2c95@add-mark (f2c8b@gen-mark) f3e5e@out f3e5b@expr))) (f3e5a@transformer (f2c95@add-mark f2c8d@anti-mark f3e5b@expr '#f))))) (set! f2ece@chi-macro (lambda (f3e64@p f3e65@e) (f2ecc@do-macro-call (f2ec8@macro-transformer f3e64@p) f3e65@e))) (set! f2ed0@chi-local-macro (lambda (f3e68@p f3e69@e) (f2ecc@do-macro-call (f2eca@local-macro-transformer f3e68@p) f3e69@e))) (set! f2ed2@chi-global-macro (lambda (f3e6c@p f3e6d@e) ((lambda (f3e70@lib f3e71@loc) (begin (f2ad0@f2972@visit-library f3e70@lib) ((lambda (f3e74@x) ((lambda (f3e76@transformer) (f2ecc@do-macro-call f3e76@transformer f3e6d@e)) (if (procedure? f3e74@x) f3e74@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" f3e74@x)))) (symbol-value f3e71@loc)))) (car f3e6c@p) (cdr f3e6c@p)))) (set! f2ed4@chi-expr* (lambda (f3e78@e* f3e79@r f3e7a@mr) (if (null? f3e78@e*) '() ((lambda (f3e7e@e) (cons f3e7e@e (f2ed4@chi-expr* (cdr f3e78@e*) f3e79@r f3e7a@mr))) (f2ed8@chi-expr (car f3e78@e*) f3e79@r f3e7a@mr))))) (set! f2ed6@chi-application (lambda (f3e80@e f3e81@r f3e82@mr) ((lambda (f3e86@t) ((lambda (f3e88@ls/false) (if f3e88@ls/false (apply (lambda (f3e8a@rator f3e8b@rands) ((lambda (f3e8e@rator) (cons f3e8e@rator (f2ed4@chi-expr* f3e8b@rands f3e81@r f3e82@mr))) (f2ed8@chi-expr f3e8a@rator f3e81@r f3e82@mr))) f3e88@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3e86@t))) (f2eb6@syntax-dispatch f3e86@t '(any . each-any)))) f3e80@e))) (set! f2ed8@chi-expr (lambda (f3e90@e f3e91@r f3e92@mr) (call-with-values (lambda () (f2cd3@syntax-type f3e90@e f3e91@r)) (lambda (f3e9c@f3e97 f3e9d@f3e99 f3e9e@f3e9b) ((lambda (f3ea2@kwd f3ea3@value f3ea4@type) ((lambda (f3ea8@t) (if (memv f3ea8@t '(core-macro)) ((lambda (f3eaa@transformer) (f3eaa@transformer f3e90@e f3e91@r f3e92@mr)) (f2ec4@core-macro-transformer f3ea3@value)) (if (memv f3ea8@t '(global)) ((lambda (f3eac@lib) ((lambda (f3eae@loc) ((lambda () (begin ((f2f21@inv-collector) f3eac@lib) f3eae@loc)))) (cdr f3ea3@value))) (car f3ea3@value)) (if (memv f3ea8@t '(core-prim)) ((lambda (f3eb0@name) (list 'primitive f3eb0@name)) f3ea3@value) (if (memv f3ea8@t '(call)) (f2ed6@chi-application f3e90@e f3e91@r f3e92@mr) (if (memv f3ea8@t '(lexical)) ((lambda (f3eb2@lex) f3eb2@lex) (f2e42@lexical-var f3ea3@value)) (if (memv f3ea8@t '(global-macro global-macro!)) (f2ed8@chi-expr (f2ed2@chi-global-macro f3ea3@value f3e90@e) f3e91@r f3e92@mr) (if (memv f3ea8@t '(local-macro local-macro!)) (f2ed8@chi-expr (f2ed0@chi-local-macro f3ea3@value f3e90@e) f3e91@r f3e92@mr) (if (memv f3ea8@t '(macro macro!)) (f2ed8@chi-expr (f2ece@chi-macro f3ea3@value f3e90@e) f3e91@r f3e92@mr) (if (memv f3ea8@t '(constant)) ((lambda (f3eb4@datum) (list 'quote f3eb4@datum)) f3ea3@value) (if (memv f3ea8@t '(set!)) (f2eda@chi-set! f3e90@e f3e91@r f3e92@mr) (if (memv f3ea8@t '(begin)) ((lambda (f3eb6@t) ((lambda (f3eb8@ls/false) (if f3eb8@ls/false (apply (lambda (f3eba@x f3ebb@x*) (f2c0a@f2b79@build-sequence '#f (f2ed4@chi-expr* (cons f3eba@x f3ebb@x*) f3e91@r f3e92@mr))) f3eb8@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3eb6@t))) (f2eb6@syntax-dispatch f3eb6@t '(_ any . each-any)))) f3e90@e) (if (memv f3ea8@t '(let-syntax letrec-syntax)) ((lambda (f3ebe@t) ((lambda (f3ec0@ls/false) (if (and f3ec0@ls/false (apply (lambda (f3ec2@xlhs* f3ec3@xrhs* f3ec4@xbody f3ec5@xbody*) (if (not (f2cb5@valid-bound-ids? f3ec2@xlhs*)) (f2f9f@syntax-violation '#f '"invalid identifiers" f3e90@e) (void))) f3ec0@ls/false)) (apply (lambda (f3eca@xlhs* f3ecb@xrhs* f3ecc@xbody f3ecd@xbody*) ((lambda (f3ed2@xlab*) ((lambda (f3ed4@xrib) ((lambda (f3ed6@xb*) ((lambda () (f2c0a@f2b79@build-sequence '#f (f2ed4@chi-expr* (map (lambda (f3ed8@x) (f2c97@add-subst f3ed4@xrib f3ed8@x)) (cons f3ecc@xbody f3ecd@xbody*)) (append (map cons f3ed2@xlab* f3ed6@xb*) f3e91@r) (append (map cons f3ed2@xlab* f3ed6@xb*) f3e92@mr)))))) (map (lambda (f3eda@x) (f2ce9@make-eval-transformer (f2f13@expand-transformer (if (eq? f3ea4@type 'let-syntax) f3eda@x (f2c97@add-subst f3ed4@xrib f3eda@x)) f3e92@mr))) f3ecb@xrhs*))) (f2c66@make-full-rib f3eca@xlhs* f3ed2@xlab*))) (map f2c2f@gen-label f3eca@xlhs*))) f3ec0@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3ebe@t))) (f2eb6@syntax-dispatch f3ebe@t '(_ #(each (any any)) any . each-any)))) f3e90@e) (if (memv f3ea8@t '(displaced-lexical)) (f2f9f@syntax-violation '#f '"identifier out of context" f3e90@e) (if (memv f3ea8@t '(syntax)) (f2f9f@syntax-violation '#f '"reference to pattern variable outside a syntax form" f3e90@e) (if (memv f3ea8@t '(define define-syntax module import library)) (f2f9f@syntax-violation '#f (string-append ((lambda (f3edc@t) (if (memv f3edc@t '(define)) '"a definition" (if (memv f3edc@t '(define-syntax)) '"a define-syntax" (if (memv f3edc@t '(module)) '"a module definition" (if (memv f3edc@t '(library)) '"a library definition" (if (memv f3edc@t '(import)) '"an import declaration" (if (memv f3edc@t '(export)) '"an export declaration" '"a non-expression"))))))) f3ea4@type) '" was found where an expression was expected") f3e90@e) (if (memv f3ea8@t '(mutable)) (f2f9f@syntax-violation '#f '"attempt to reference an unexportable variable" f3e90@e) (f2f9f@syntax-violation '#f '"invalid expression" f3e90@e)))))))))))))))))) f3ea4@type)) f3e9e@f3e9b f3e9d@f3e99 f3e9c@f3e97))))) (set! f2eda@chi-set! (lambda (f3ede@e f3edf@r f3ee0@mr) ((lambda (f3ee4@t) ((lambda (f3ee6@ls/false) (if (and f3ee6@ls/false (apply (lambda (f3ee8@x f3ee9@v) (f2cab@id? f3ee8@x)) f3ee6@ls/false)) (apply (lambda (f3eec@x f3eed@v) (call-with-values (lambda () (f2cd3@syntax-type f3eec@x f3edf@r)) (lambda (f3ef6@f3ef1 f3ef7@f3ef3 f3ef8@f3ef5) ((lambda (f3efc@kwd f3efd@value f3efe@type) ((lambda (f3f02@t) (if (memv f3f02@t '(lexical)) (begin (f2e46@set-lexical-mutable! f3efd@value '#t) (list 'set! (f2e42@lexical-var f3efd@value) (f2ed8@chi-expr f3eed@v f3edf@r f3ee0@mr))) (if (memv f3f02@t '(core-prim)) (f2f9f@syntax-violation '#f '"cannot modify imported core primitive" f3ede@e) (if (memv f3f02@t '(global)) (f2f9f@syntax-violation '#f '"attempt to modify imported binding" f3ede@e) (if (memv f3f02@t '(global-macro!)) (f2ed8@chi-expr (f2ed2@chi-global-macro f3efd@value f3ede@e) f3edf@r f3ee0@mr) (if (memv f3f02@t '(local-macro!)) (f2ed8@chi-expr (f2ed0@chi-local-macro f3efd@value f3ede@e) f3edf@r f3ee0@mr) (if (memv f3f02@t '(mutable)) (f2f9f@syntax-violation '#f '"attempt to assign to an unexportable variable" f3ede@e) (f2f9f@syntax-violation '#f '"invalid syntax" f3ede@e)))))))) f3efe@type)) f3ef8@f3ef5 f3ef7@f3ef3 f3ef6@f3ef1)))) f3ee6@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3ee4@t))) (f2eb6@syntax-dispatch f3ee4@t '(_ any any)))) f3ede@e))) (set! f2edc@verify-formals (lambda (f3f04@fmls f3f05@stx) ((lambda (f3f08@t) ((lambda (f3f0a@ls/false) (if f3f0a@ls/false (apply (lambda (f3f0c@x*) (if (not (f2cb5@valid-bound-ids? f3f0c@x*)) (f2e70@invalid-fmls-error f3f05@stx f3f04@fmls) (void))) f3f0a@ls/false) ((lambda (f3f0e@t) ((lambda (f3f10@ls/false) (if f3f10@ls/false (apply (lambda (f3f12@x* f3f13@x) (if (not (f2cb5@valid-bound-ids? (cons f3f13@x f3f12@x*))) (f2e70@invalid-fmls-error f3f05@stx f3f04@fmls) (void))) f3f10@ls/false) ((lambda (f3f16@t) ((lambda (f3f18@ls/false) (if f3f18@ls/false (apply (lambda () (f2f9f@syntax-violation '#f '"invalid syntax" f3f05@stx)) f3f18@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3f16@t))) (f2eb6@syntax-dispatch f3f16@t '_))) f3f0e@t))) (f2eb6@syntax-dispatch f3f0e@t '#(each+ any () any)))) f3f08@t))) (f2eb6@syntax-dispatch f3f08@t 'each-any))) f3f04@fmls))) (set! f2ede@chi-lambda-clause (lambda (f3f1a@stx f3f1b@fmls f3f1c@body* f3f1d@r f3f1e@mr) ((lambda (f3f24@t) ((lambda (f3f26@ls/false) (if f3f26@ls/false (apply (lambda (f3f28@x*) (begin (f2edc@verify-formals f3f1b@fmls f3f1a@stx) ((lambda (f3f2a@lex* f3f2b@lab*) (values f3f2a@lex* (f2eee@chi-internal (f2c97@add-subst (f2c66@make-full-rib f3f28@x* f3f2b@lab*) f3f1c@body*) (f2e4a@add-lexicals f3f2b@lab* f3f2a@lex* f3f1d@r) f3f1e@mr))) (map f2c2b@gen-lexical f3f28@x*) (map f2c2f@gen-label f3f28@x*)))) f3f26@ls/false) ((lambda (f3f2e@t) ((lambda (f3f30@ls/false) (if f3f30@ls/false (apply (lambda (f3f32@x* f3f33@x) (begin (f2edc@verify-formals f3f1b@fmls f3f1a@stx) ((lambda (f3f36@lex* f3f37@lab* f3f38@lex f3f39@lab) (values (append f3f36@lex* f3f38@lex) (f2eee@chi-internal (f2c97@add-subst (f2c66@make-full-rib (cons f3f33@x f3f32@x*) (cons f3f39@lab f3f37@lab*)) f3f1c@body*) (f2e4a@add-lexicals (cons f3f39@lab f3f37@lab*) (cons f3f38@lex f3f36@lex*) f3f1d@r) f3f1e@mr))) (map f2c2b@gen-lexical f3f32@x*) (map f2c2f@gen-label f3f32@x*) (f2c2b@gen-lexical f3f33@x) (f2c2f@gen-label f3f33@x)))) f3f30@ls/false) ((lambda (f3f3e@t) ((lambda (f3f40@ls/false) (if f3f40@ls/false (apply (lambda () (f2f9f@syntax-violation '#f '"invalid syntax" f3f1b@fmls)) f3f40@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f3f3e@t))) (f2eb6@syntax-dispatch f3f3e@t '_))) f3f2e@t))) (f2eb6@syntax-dispatch f3f2e@t '#(each+ any () any)))) f3f24@t))) (f2eb6@syntax-dispatch f3f24@t 'each-any))) f3f1b@fmls))) (set! f2ee0@chi-lambda-clause* (lambda (f3f42@stx f3f43@fmls* f3f44@body** f3f45@r f3f46@mr) (if (null? f3f43@fmls*) (values '() '()) (call-with-values (lambda () (f2ede@chi-lambda-clause f3f42@stx (car f3f43@fmls*) (car f3f44@body**) f3f45@r f3f46@mr)) (lambda (f3f50@f3f4d f3f51@f3f4f) ((lambda (f3f54@b f3f55@a) (call-with-values (lambda () (f2ee0@chi-lambda-clause* f3f42@stx (cdr f3f43@fmls*) (cdr f3f44@body**) f3f45@r f3f46@mr)) (lambda (f3f5c@f3f59 f3f5d@f3f5b) ((lambda (f3f60@b* f3f61@a*) (values (cons f3f55@a f3f61@a*) (cons f3f54@b f3f60@b*))) f3f5d@f3f5b f3f5c@f3f59)))) f3f51@f3f4f f3f50@f3f4d)))))) (set! f2ee2@chi-defun (lambda (f3f64@x f3f65@r f3f66@mr) ((lambda (f3f6a@fmls f3f6b@body*) (call-with-values (lambda () (f2ede@chi-lambda-clause f3f6a@fmls f3f6a@fmls f3f6b@body* f3f65@r f3f66@mr)) (lambda (f3f72@f3f6f f3f73@f3f71) ((lambda (f3f76@body f3f77@fmls) (f2c07@f2b47@build-lambda '#f f3f77@fmls f3f76@body)) f3f73@f3f71 f3f72@f3f6f)))) (car f3f64@x) (cdr f3f64@x)))) (set! f2ee4@chi-rhs (lambda (f3f7a@rhs f3f7b@r f3f7c@mr) ((lambda (f3f80@t) (if (memv f3f80@t '(defun)) (f2ee2@chi-defun (cdr f3f7a@rhs) f3f7b@r f3f7c@mr) (if (memv f3f80@t '(expr)) ((lambda (f3f82@expr) (f2ed8@chi-expr f3f82@expr f3f7b@r f3f7c@mr)) (cdr f3f7a@rhs)) (if (memv f3f80@t '(top-expr)) ((lambda (f3f84@expr) (f2c0a@f2b79@build-sequence '#f (list (f2ed8@chi-expr f3f84@expr f3f7b@r f3f7c@mr) (f2c0b@f2b7b@build-void)))) (cdr f3f7a@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" f3f7a@rhs))))) (car f3f7a@rhs)))) (set! f2ee6@expand-interaction-rhs*/init* (lambda (f3f86@lhs* f3f87@rhs* f3f88@init* f3f89@r f3f8a@mr) ((letrec ((f3f90@f (lambda (f3f92@lhs* f3f93@rhs*) (if (null? f3f92@lhs*) (map (lambda (f3f96@x) (f2ed8@chi-expr f3f96@x f3f89@r f3f8a@mr)) f3f88@init*) ((lambda (f3f98@lhs f3f99@rhs) ((lambda (f3f9c@t) (if (memv f3f9c@t '(defun)) ((lambda (f3f9e@rhs) (cons (list 'set! f3f98@lhs f3f9e@rhs) (f3f90@f (cdr f3f92@lhs*) (cdr f3f93@rhs*)))) (f2ee2@chi-defun (cdr f3f99@rhs) f3f89@r f3f8a@mr)) (if (memv f3f9c@t '(expr)) ((lambda (f3fa0@rhs) (cons (list 'set! f3f98@lhs f3fa0@rhs) (f3f90@f (cdr f3f92@lhs*) (cdr f3f93@rhs*)))) (f2ed8@chi-expr (cdr f3f99@rhs) f3f89@r f3f8a@mr)) (if (memv f3f9c@t '(top-expr)) ((lambda (f3fa2@e) (cons f3fa2@e (f3f90@f (cdr f3f92@lhs*) (cdr f3f93@rhs*)))) (f2ed8@chi-expr (cdr f3f99@rhs) f3f89@r f3f8a@mr)) (error 'expand-interaction '"invallid" f3f99@rhs))))) (car f3f99@rhs))) (car f3f92@lhs*) (car f3f93@rhs*)))))) f3f90@f) f3f86@lhs* f3f87@rhs*))) (set! f2ee8@chi-rhs* (lambda (f3fa4@rhs* f3fa5@r f3fa6@mr) ((letrec ((f3faa@f (lambda (f3fac@ls) (if (null? f3fac@ls) '() ((lambda (f3fae@a) (cons f3fae@a (f3faa@f (cdr f3fac@ls)))) (f2ee4@chi-rhs (car f3fac@ls) f3fa5@r f3fa6@mr)))))) f3faa@f) f3fa4@rhs*))) (set! f2eea@find-bound=? (lambda (f3fb0@x f3fb1@lhs* f3fb2@rhs*) (if (null? f3fb1@lhs*) '#f (if (f2cb1@bound-id=? f3fb0@x (car f3fb1@lhs*)) (car f3fb2@rhs*) (f2eea@find-bound=? f3fb0@x (cdr f3fb1@lhs*) (cdr f3fb2@rhs*)))))) (set! f2eec@find-dups (lambda (f3fb6@ls) ((letrec ((f3fb8@f (lambda (f3fba@ls f3fbb@dups) (if (null? f3fba@ls) f3fbb@dups ((lambda (f3fbe@t) (if f3fbe@t ((lambda (f3fc0@x) (f3fb8@f (cdr f3fba@ls) (cons (list (car f3fba@ls) f3fc0@x) f3fbb@dups))) f3fbe@t) (f3fb8@f (cdr f3fba@ls) f3fbb@dups))) (f2eea@find-bound=? (car f3fba@ls) (cdr f3fba@ls) (cdr f3fba@ls))))))) f3fb8@f) f3fb6@ls '()))) (set! f2eee@chi-internal (lambda (f3fc2@e* f3fc3@r f3fc4@mr) ((lambda (f3fc8@rib) (call-with-values (lambda () (f2f11@chi-body* (map (lambda (f3fda@x) (f2c97@add-subst f3fc8@rib f3fda@x)) (f2ca9@syntax->list f3fc2@e*)) f3fc3@r f3fc4@mr '() '() '() '() '() f3fc8@rib '#f)) (lambda (f3fdc@f3fcb f3fdd@f3fcd f3fde@f3fcf f3fdf@f3fd1 f3fe0@f3fd3 f3fe1@f3fd5 f3fe2@f3fd7 f3fe3@f3fd9) ((lambda (f3fec@_exp* f3fed@kwd* f3fee@mod** f3fef@rhs* f3ff0@lex* f3ff1@mr f3ff2@r f3ff3@e*) (begin (if (null? f3ff3@e*) (f2f9f@syntax-violation '#f '"no expression in body" f3ff3@e*) (void)) ((lambda (f3ffc@init*) ((lambda (f3ffe@rhs*) ((lambda () (f2c0d@f2b7f@build-letrec* '#f (reverse f3ff0@lex*) (reverse f3ffe@rhs*) (f2c0a@f2b79@build-sequence '#f f3ffc@init*))))) (f2ee8@chi-rhs* f3fef@rhs* f3ff2@r f3ff1@mr))) (f2ed4@chi-expr* (append (apply append (reverse f3fee@mod**)) f3ff3@e*) f3ff2@r f3ff1@mr)))) f3fe3@f3fd9 f3fe2@f3fd7 f3fe1@f3fd5 f3fe0@f3fd3 f3fdf@f3fd1 f3fde@f3fcf f3fdd@f3fcd f3fdc@f3fcb)))) (f2c5a@make-empty-rib)))) (set! f2ef0@parse-module (lambda (f4000@e) ((lambda (f4002@t) ((lambda (f4004@ls/false) (if f4004@ls/false (apply (lambda (f4006@export* f4007@b*) (begin (if (not (for-all f2cab@id? f4006@export*)) (f2f9f@syntax-violation '#f '"module exports must be identifiers" f4000@e) (void)) (values '#f (list->vector f4006@export*) f4007@b*))) f4004@ls/false) ((lambda (f400a@t) ((lambda (f400c@ls/false) (if f400c@ls/false (apply (lambda (f400e@name f400f@export* f4010@b*) (begin (if (not (f2cab@id? f400e@name)) (f2f9f@syntax-violation '#f '"module name must be an identifier" f4000@e) (void)) (if (not (for-all f2cab@id? f400f@export*)) (f2f9f@syntax-violation '#f '"module exports must be identifiers" f4000@e) (void)) (values f400e@name (list->vector f400f@export*) f4010@b*))) f400c@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f400a@t))) (f2eb6@syntax-dispatch f400a@t '(_ any each-any . each-any)))) f4002@t))) (f2eb6@syntax-dispatch f4002@t '(_ each-any . each-any)))) f4000@e))) (set! f2ef6@f2ef1 (make-record-type-descriptor 'module-interface '#f 'f2ef4 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! f2ef8@f2ef3 '#f) (set! f2efa@f2ef2 (make-record-constructor-descriptor f2ef6@f2ef1 '#f f2ef8@f2ef3)) (set! f2efd@module-interface? (record-predicate f2ef6@f2ef1)) (set! f2eff@make-module-interface (record-constructor f2efa@f2ef2)) (set! f2f01@module-interface-first-mark (record-accessor f2ef6@f2ef1 '0)) (set! f2f03@module-interface-exp-id-vec (record-accessor f2ef6@f2ef1 '1)) (set! f2f05@module-interface-exp-lab-vec (record-accessor f2ef6@f2ef1 '2)) (set! f2f07@set-module-interface-first-mark! (record-mutator f2ef6@f2ef1 '0)) (set! f2f09@set-module-interface-exp-id-vec! (record-mutator f2ef6@f2ef1 '1)) (set! f2f0b@set-module-interface-exp-lab-vec! (record-mutator f2ef6@f2ef1 '2)) (set! f2f0d@module-interface-exp-id* (lambda (f4014@iface f4015@id) ((lambda (f4019@diff-marks) (begin (set! f4019@diff-marks (lambda (f4020@ls f4021@x) (begin (if (null? f4020@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (f4024@a) (if (eq? f4024@a f4021@x) '() (cons f4024@a (f4019@diff-marks (cdr f4020@ls) f4021@x)))) (car f4020@ls))))) ((lambda (f401a@diff f401b@id-vec) (if (null? f401a@diff) f401b@id-vec (vector-map (lambda (f401e@x) (f2c75@make-stx (f2c77@stx-expr f401e@x) (append f401a@diff (f2c79@stx-mark* f401e@x)) '() '())) f401b@id-vec))) (f4019@diff-marks (f2c79@stx-mark* f4015@id) (f2f01@module-interface-first-mark f4014@iface)) (f2f03@module-interface-exp-id-vec f4014@iface)))) '#f))) (set! f2f0f@chi-internal-module (lambda (f4026@e f4027@r f4028@mr f4029@lex* f402a@rhs* f402b@mod** f402c@kwd*) (call-with-values (lambda () (f2ef0@parse-module f4026@e)) (lambda (f403a@f4035 f403b@f4037 f403c@f4039) ((lambda (f4040@e* f4041@exp-id* f4042@name) ((lambda (f4046@rib) ((lambda (f4048@e*) ((lambda () (call-with-values (lambda () (f2f11@chi-body* f4048@e* f4027@r f4028@mr f4029@lex* f402a@rhs* f402b@mod** f402c@kwd* '() f4046@rib '#f)) (lambda (f405a@f404b f405b@f404d f405c@f404f f405d@f4051 f405e@f4053 f405f@f4055 f4060@f4057 f4061@f4059) ((lambda (f406a@_exp* f406b@kwd* f406c@mod** f406d@rhs* f406e@lex* f406f@mr f4070@r f4071@e*) ((lambda (f407a@exp-lab* f407b@mod**) (if (not f4042@name) (values f406e@lex* f406d@rhs* f4041@exp-id* f407a@exp-lab* f4070@r f406f@mr f407b@mod** f406b@kwd*) ((lambda (f407e@lab f407f@iface) (values f406e@lex* f406d@rhs* (vector f4042@name) (vector f407e@lab) (cons (cons f407e@lab (cons '$module f407f@iface)) f4070@r) (cons (cons f407e@lab (cons '$module f407f@iface)) f406f@mr) f407b@mod** f406b@kwd*)) (f2c2f@gen-label 'module) (f2eff@make-module-interface (car (f2c79@stx-mark* f4042@name)) (vector-map (lambda (f4082@x) (f2c75@make-stx (f2c77@stx-expr f4082@x) (f2c79@stx-mark* f4082@x) '() '())) f4041@exp-id*) f407a@exp-lab*)))) (vector-map (lambda (f4084@x) (or (f2cc5@id->label (f2c75@make-stx (f2cad@id->sym f4084@x) (f2c79@stx-mark* f4084@x) (list f4046@rib) '())) (f2f9f@syntax-violation '#f '"cannot find module export" f4084@x))) f4041@exp-id*) (cons f4071@e* f406c@mod**))) f4061@f4059 f4060@f4057 f405f@f4055 f405e@f4053 f405d@f4051 f405c@f404f f405b@f404d f405a@f404b)))))) (map (lambda (f4086@x) (f2c97@add-subst f4046@rib f4086@x)) (f2ca9@syntax->list f4040@e*)))) (f2c5a@make-empty-rib))) f403c@f4039 f403b@f4037 f403a@f4035))))) (set! f2f11@chi-body* (lambda (f4088@e* f4089@r f408a@mr f408b@lex* f408c@rhs* f408d@mod** f408e@kwd* f408f@exp* f4090@rib f4091@top?) (if (null? f4088@e*) (values f4088@e* f4089@r f408a@mr f408b@lex* f408c@rhs* f408d@mod** f408e@kwd* f408f@exp*) ((lambda (f409c@e) (call-with-values (lambda () (f2cd3@syntax-type f409c@e f4089@r)) (lambda (f40a4@f409f f40a5@f40a1 f40a6@f40a3) ((lambda (f40aa@kwd f40ab@value f40ac@type) ((lambda (f40b0@kwd*) ((lambda (f40b2@t) (if (memv f40b2@t '(define)) (call-with-values (lambda () (f2e3a@parse-define f409c@e)) (lambda (f40b8@f40b5 f40b9@f40b7) ((lambda (f40bc@rhs f40bd@id) (begin (if (f2cb9@bound-id-member? f40bd@id f40b0@kwd*) (f2f9f@syntax-violation '#f '"cannot redefine keyword" f409c@e) (void)) (call-with-values (lambda () (f2c33@gen-define-label+loc f40bd@id f4090@rib)) (lambda (f40c4@f40c1 f40c5@f40c3) ((lambda (f40c8@lex f40c9@lab) (begin (f2c5c@extend-rib! f4090@rib f40bd@id f40c9@lab) (f2f11@chi-body* (cdr f4088@e*) (f2e48@add-lexical f40c9@lab f40c8@lex f4089@r) f408a@mr (cons f40c8@lex f408b@lex*) (cons f40bc@rhs f408c@rhs*) f408d@mod** f40b0@kwd* f408f@exp* f4090@rib f4091@top?))) f40c5@f40c3 f40c4@f40c1))))) f40b9@f40b7 f40b8@f40b5))) (if (memv f40b2@t '(define-syntax)) (call-with-values (lambda () (f2e3c@parse-define-syntax f409c@e)) (lambda (f40d0@f40cd f40d1@f40cf) ((lambda (f40d4@rhs f40d5@id) (begin (if (f2cb9@bound-id-member? f40d5@id f40b0@kwd*) (f2f9f@syntax-violation '#f '"cannot redefine keyword" f409c@e) (void)) ((lambda (f40d8@lab f40d9@expanded-rhs) (begin (f2c5c@extend-rib! f4090@rib f40d5@id f40d8@lab) ((lambda (f40dc@b) (f2f11@chi-body* (cdr f4088@e*) (cons (cons f40d8@lab f40dc@b) f4089@r) (cons (cons f40d8@lab f40dc@b) f408a@mr) f408b@lex* f408c@rhs* f408d@mod** f40b0@kwd* f408f@exp* f4090@rib f4091@top?)) (f2ce9@make-eval-transformer f40d9@expanded-rhs)))) (f2c35@gen-define-label f40d5@id f4090@rib) (f2f13@expand-transformer f40d4@rhs f408a@mr)))) f40d1@f40cf f40d0@f40cd))) (if (memv f40b2@t '(let-syntax letrec-syntax)) ((lambda (f40de@t) ((lambda (f40e0@ls/false) (if (and f40e0@ls/false (apply (lambda (f40e2@xlhs* f40e3@xrhs* f40e4@xbody*) (if (not (f2cb5@valid-bound-ids? f40e2@xlhs*)) (f2f9f@syntax-violation '#f '"invalid identifiers" f409c@e) (void))) f40e0@ls/false)) (apply (lambda (f40e8@xlhs* f40e9@xrhs* f40ea@xbody*) ((lambda (f40ee@xlab*) ((lambda (f40f0@xrib) ((lambda (f40f2@xb*) ((lambda () (f2f11@chi-body* (append (map (lambda (f40f4@x) (f2c97@add-subst f40f0@xrib f40f4@x)) f40ea@xbody*) (cdr f4088@e*)) (append (map cons f40ee@xlab* f40f2@xb*) f4089@r) (append (map cons f40ee@xlab* f40f2@xb*) f408a@mr) f408b@lex* f408c@rhs* f408d@mod** f40b0@kwd* f408f@exp* f4090@rib f4091@top?)))) (map (lambda (f40f6@x) (f2ce9@make-eval-transformer (f2f13@expand-transformer (if (eq? f40ac@type 'let-syntax) f40f6@x (f2c97@add-subst f40f0@xrib f40f6@x)) f408a@mr))) f40e9@xrhs*))) (f2c66@make-full-rib f40e8@xlhs* f40ee@xlab*))) (map f2c2f@gen-label f40e8@xlhs*))) f40e0@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f40de@t))) (f2eb6@syntax-dispatch f40de@t '(_ #(each (any any)) . each-any)))) f409c@e) (if (memv f40b2@t '(begin)) ((lambda (f40f8@t) ((lambda (f40fa@ls/false) (if f40fa@ls/false (apply (lambda (f40fc@x*) (f2f11@chi-body* (append f40fc@x* (cdr f4088@e*)) f4089@r f408a@mr f408b@lex* f408c@rhs* f408d@mod** f40b0@kwd* f408f@exp* f4090@rib f4091@top?)) f40fa@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f40f8@t))) (f2eb6@syntax-dispatch f40f8@t '(_ . each-any)))) f409c@e) (if (memv f40b2@t '(global-macro global-macro!)) (f2f11@chi-body* (cons (f2c97@add-subst f4090@rib (f2ed2@chi-global-macro f40ab@value f409c@e)) (cdr f4088@e*)) f4089@r f408a@mr f408b@lex* f408c@rhs* f408d@mod** f40b0@kwd* f408f@exp* f4090@rib f4091@top?) (if (memv f40b2@t '(local-macro local-macro!)) (f2f11@chi-body* (cons (f2c97@add-subst f4090@rib (f2ed0@chi-local-macro f40ab@value f409c@e)) (cdr f4088@e*)) f4089@r f408a@mr f408b@lex* f408c@rhs* f408d@mod** f40b0@kwd* f408f@exp* f4090@rib f4091@top?) (if (memv f40b2@t '(macro macro!)) (f2f11@chi-body* (cons (f2c97@add-subst f4090@rib (f2ece@chi-macro f40ab@value f409c@e)) (cdr f4088@e*)) f4089@r f408a@mr f408b@lex* f408c@rhs* f408d@mod** f40b0@kwd* f408f@exp* f4090@rib f4091@top?) (if (memv f40b2@t '(module)) (call-with-values (lambda () (f2f0f@chi-internal-module f409c@e f4089@r f408a@mr f408b@lex* f408c@rhs* f408d@mod** f40b0@kwd*)) (lambda (f410e@f40ff f410f@f4101 f4110@f4103 f4111@f4105 f4112@f4107 f4113@f4109 f4114@f410b f4115@f410d) ((lambda (f411e@kwd* f411f@mod** f4120@mr f4121@r f4122@m-exp-lab* f4123@m-exp-id* f4124@rhs* f4125@lex*) (begin (vector-for-each (lambda (f412e@id f412f@lab) (f2c5c@extend-rib! f4090@rib f412e@id f412f@lab)) f4123@m-exp-id* f4122@m-exp-lab*) (f2f11@chi-body* (cdr f4088@e*) f4121@r f4120@mr f4125@lex* f4124@rhs* f411f@mod** f411e@kwd* f408f@exp* f4090@rib f4091@top?))) f4115@f410d f4114@f410b f4113@f4109 f4112@f4107 f4111@f4105 f4110@f4103 f410f@f4101 f410e@f40ff))) (if (memv f40b2@t '(library)) (begin (f2f81@library-expander (f2cc1@stx->datum f409c@e)) (f2f11@chi-body* (cdr f4088@e*) f4089@r f408a@mr f408b@lex* f408c@rhs* f408d@mod** f40b0@kwd* f408f@exp* f4090@rib f4091@top?)) (if (memv f40b2@t '(export)) ((lambda (f4132@t) ((lambda (f4134@ls/false) (if f4134@ls/false (apply (lambda (f4136@exp-decl*) (f2f11@chi-body* (cdr f4088@e*) f4089@r f408a@mr f408b@lex* f408c@rhs* f408d@mod** f40b0@kwd* (append f4136@exp-decl* f408f@exp*) f4090@rib f4091@top?)) f4134@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f4132@t))) (f2eb6@syntax-dispatch f4132@t '(_ . each-any)))) f409c@e) (if (memv f40b2@t '(import)) ((lambda () ((lambda (f4139@module-import? f413b@module-import f413d@library-import) (begin (set! f4139@module-import? (lambda (f418c@e) ((lambda (f418e@t) ((lambda (f4190@ls/false) (if (and f4190@ls/false (apply (lambda (f4192@id) (f2cab@id? f4192@id)) f4190@ls/false)) (apply (lambda (f4194@id) '#t) f4190@ls/false) ((lambda (f4196@t) ((lambda (f4198@ls/false) (if f4198@ls/false (apply (lambda (f419a@imp*) '#f) f4198@ls/false) ((lambda (f419c@t) ((lambda (f419e@ls/false) (if f419e@ls/false (apply (lambda () (f2f9f@syntax-violation '#f '"malformed import form" f418c@e)) f419e@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f419c@t))) (f2eb6@syntax-dispatch f419c@t '_))) f4196@t))) (f2eb6@syntax-dispatch f4196@t '(_ . each-any)))) f418e@t))) (f2eb6@syntax-dispatch f418e@t '(_ any)))) f418c@e))) (set! f413b@module-import (lambda (f416a@e f416b@r) ((lambda (f416e@t) ((lambda (f4170@ls/false) (if (and f4170@ls/false (apply (lambda (f4172@id) (f2cab@id? f4172@id)) f4170@ls/false)) (apply (lambda (f4174@id) (call-with-values (lambda () (f2cd3@syntax-type f4174@id f416b@r)) (lambda (f417c@f4177 f417d@f4179 f417e@f417b) ((lambda (f4182@kwd f4183@value f4184@type) ((lambda (f4188@t) (if (memv f4188@t '($module)) ((lambda (f418a@iface) (values (f2f0d@module-interface-exp-id* f418a@iface f4174@id) (f2f05@module-interface-exp-lab-vec f418a@iface))) f4183@value) (f2f9f@syntax-violation '#f '"invalid import" f416a@e))) f4184@type)) f417e@f417b f417d@f4179 f417c@f4177)))) f4170@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f416e@t))) (f2eb6@syntax-dispatch f416e@t '(_ any)))) f416a@e))) (set! f413d@library-import (lambda (f414e@e) ((lambda (f4150@t) ((lambda (f4152@ls/false) (if f4152@ls/false (apply (lambda (f4154@ctxt f4155@imp*) (call-with-values (lambda () (f2f1b@parse-import-spec* (f2fa5@syntax->datum f4155@imp*))) (lambda (f415c@f4159 f415d@f415b) ((lambda (f4160@subst-labels f4161@subst-names) (values (vector-map (lambda (f4164@name) (f2c89@datum->stx f4154@ctxt f4164@name)) f4161@subst-names) f4160@subst-labels)) f415d@f415b f415c@f4159)))) f4152@ls/false) ((lambda (f4166@t) ((lambda (f4168@ls/false) (if f4168@ls/false (apply (lambda () (f2f9f@syntax-violation '#f '"invalid import form" f414e@e)) f4168@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f4166@t))) (f2eb6@syntax-dispatch f4166@t '_))) f4150@t))) (f2eb6@syntax-dispatch f4150@t '(any . each-any)))) f414e@e))) (begin (call-with-values (lambda () (if (f4139@module-import? f409c@e) (f413b@module-import f409c@e f4089@r) (f413d@library-import f409c@e))) (lambda (f4142@f413f f4143@f4141) ((lambda (f4146@lab* f4147@id*) (vector-for-each (lambda (f414a@id f414b@lab) (f2c5c@extend-rib! f4090@rib f414a@id f414b@lab)) f4147@id* f4146@lab*)) f4143@f4141 f4142@f413f))) (f2f11@chi-body* (cdr f4088@e*) f4089@r f408a@mr f408b@lex* f408c@rhs* f408d@mod** f40b0@kwd* f408f@exp* f4090@rib f4091@top?)))) '#f '#f '#f))) (if f4091@top? (f2f11@chi-body* (cdr f4088@e*) f4089@r f408a@mr (cons (f2c2b@gen-lexical 'dummy) f408b@lex*) (cons (cons 'top-expr f409c@e) f408c@rhs*) f408d@mod** f40b0@kwd* f408f@exp* f4090@rib f4091@top?) (values f4088@e* f4089@r f408a@mr f408b@lex* f408c@rhs* f408d@mod** f40b0@kwd* f408f@exp*)))))))))))))) f40ac@type)) (if (f2cab@id? f40aa@kwd) (cons f40aa@kwd f408e@kwd*) f408e@kwd*))) f40a6@f40a3 f40a5@f40a1 f40a4@f409f)))) (car f4088@e*))))) (set! f2f13@expand-transformer (lambda (f41a0@expr f41a1@r) ((lambda (f41a4@rtc) ((lambda (f41a6@expanded-rhs) (begin (for-each ((lambda (f41a8@mark-visit) (lambda (f41aa@x) (begin (f2acf@f2970@invoke-library f41aa@x) (f41a8@mark-visit f41aa@x)))) (f2f23@vis-collector)) (f41a4@rtc)) f41a6@expanded-rhs)) ((lambda (f41b4@f41ad f41b5@f41af f41b6@f41b1 f41b7@f41b3) ((lambda (f41bc@swap) (dynamic-wind f41bc@swap (lambda () (f2ed8@chi-expr f41a0@expr f41a1@r f41a1@r)) f41bc@swap)) (lambda () (begin ((lambda (f41be@t) (begin (f41b4@f41ad f41b6@f41b1) (set! f41b6@f41b1 f41be@t))) (f41b4@f41ad)) ((lambda (f41c0@t) (begin (f41b5@f41af f41b7@f41b3) (set! f41b7@f41b3 f41c0@t))) (f41b5@f41af)))))) f2f21@inv-collector f2f23@vis-collector f41a4@rtc (lambda (f41c2@x) (values))))) (f2f1f@make-collector)))) (set! f2f15@parse-exports (lambda (f41c4@exp*) ((letrec ((f41c6@f (lambda (f41c8@exp* f41c9@int* f41ca@ext*) (if (null? f41c8@exp*) (begin (if (not (f2cb5@valid-bound-ids? f41ca@ext*)) (f2f9f@syntax-violation 'export '"invalid exports" (f2eec@find-dups f41ca@ext*)) (void)) (values (map f2fa5@syntax->datum f41ca@ext*) f41c9@int*)) ((lambda (f41ce@t) ((lambda (f41d0@ls/false) (if f41d0@ls/false (apply (lambda (f41d2@rename f41d3@i* f41d4@e*) (begin (if (not (and (eq? (f2fa5@syntax->datum f41d2@rename) 'rename) (for-all f2cab@id? f41d3@i*) (for-all f2cab@id? f41d4@e*))) (f2f9f@syntax-violation 'export '"invalid export specifier" (car f41c8@exp*)) (void)) (f41c6@f (cdr f41c8@exp*) (append f41d3@i* f41c9@int*) (append f41d4@e* f41ca@ext*)))) f41d0@ls/false) ((lambda (f41d8@t) ((lambda (f41da@ls/false) (if f41da@ls/false (apply (lambda (f41dc@ie) (begin (if (not (f2cab@id? f41dc@ie)) (f2f9f@syntax-violation 'export '"invalid export" f41dc@ie) (void)) (f41c6@f (cdr f41c8@exp*) (cons f41dc@ie f41c9@int*) (cons f41dc@ie f41ca@ext*)))) f41da@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f41d8@t))) (f2eb6@syntax-dispatch f41d8@t 'any))) f41ce@t))) (f2eb6@syntax-dispatch f41ce@t '(any . #(each (any any)))))) (car f41c8@exp*)))))) f41c6@f) f41c4@exp* '() '()))) (set! f2f17@parse-library-name (lambda (f41de@spec) ((lambda (f41e1@parse) (begin (set! f41e1@parse (lambda (f41ee@x) ((lambda (f41f0@t) ((lambda (f41f2@ls/false) (if (and f41f2@ls/false (apply (lambda (f41f4@v*) (for-all (lambda (f41f6@x) ((lambda (f41f8@x) (and (integer? f41f8@x) (exact? f41f8@x))) (f2fa5@syntax->datum f41f6@x))) f41f4@v*)) f41f2@ls/false)) (apply (lambda (f41fa@v*) (values '() (map f2fa5@syntax->datum f41fa@v*))) f41f2@ls/false) ((lambda (f41fc@t) ((lambda (f41fe@ls/false) (if (and f41fe@ls/false (apply (lambda (f4200@x f4201@rest) (symbol? (f2fa5@syntax->datum f4200@x))) f41fe@ls/false)) (apply (lambda (f4204@x f4205@rest) (call-with-values (lambda () (f41e1@parse f4205@rest)) (lambda (f420c@f4209 f420d@f420b) ((lambda (f4210@v* f4211@x*) (values (cons (f2fa5@syntax->datum f4204@x) f4211@x*) f4210@v*)) f420d@f420b f420c@f4209)))) f41fe@ls/false) ((lambda (f4214@t) ((lambda (f4216@ls/false) (if f4216@ls/false (apply (lambda () (values '() '())) f4216@ls/false) ((lambda (f4218@t) ((lambda (f421a@ls/false) (if f421a@ls/false (apply (lambda () (f2f9f@syntax-violation '#f '"invalid library name" f41de@spec)) f421a@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f4218@t))) (f2eb6@syntax-dispatch f4218@t '_))) f4214@t))) (f2eb6@syntax-dispatch f4214@t '()))) f41fc@t))) (f2eb6@syntax-dispatch f41fc@t '(any . any)))) f41f0@t))) (f2eb6@syntax-dispatch f41f0@t '(each-any)))) f41ee@x))) (call-with-values (lambda () (f41e1@parse f41de@spec)) (lambda (f41e6@f41e3 f41e7@f41e5) ((lambda (f41ea@ver* f41eb@name*) (begin (if (null? f41eb@name*) (f2f9f@syntax-violation '#f '"empty library name" f41de@spec) (void)) (values f41eb@name* f41ea@ver*))) f41e7@f41e5 f41e6@f41e3))))) '#f))) (set! f2f19@parse-library (lambda (f421c@e) ((lambda (f421e@t) ((lambda (f4220@ls/false) (if (and f4220@ls/false (apply (lambda (f4222@library f4223@name* f4224@export f4225@exp* f4226@import f4227@imp* f4228@b*) (and (eq? (f2fa5@syntax->datum f4224@export) 'export) (eq? (f2fa5@syntax->datum f4226@import) 'import) (eq? (f2fa5@syntax->datum f4222@library) 'library))) f4220@ls/false)) (apply (lambda (f4230@library f4231@name* f4232@export f4233@exp* f4234@import f4235@imp* f4236@b*) (values f4231@name* f4233@exp* f4235@imp* f4236@b*)) f4220@ls/false) ((lambda (f423e@t) ((lambda (f4240@ls/false) (if f4240@ls/false (apply (lambda () (f2f9f@syntax-violation '#f '"malformed library" f421c@e)) f4240@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f423e@t))) (f2eb6@syntax-dispatch f423e@t '_))) f421e@t))) (f2eb6@syntax-dispatch f421e@t '(any each-any (any . each-any) (any . each-any) . each-any)))) f421c@e))) (set! f2f1b@parse-import-spec* ((lambda () ((lambda (f4243@idsyn? f4245@dup-error f4247@merge-substs f4249@exclude* f424b@find* f424d@rem* f424f@remove-dups f4251@parse-library-name f4253@import-library f4255@get-import f4257@add-imports!) (begin (set! f4243@idsyn? (lambda (f444c@x) (symbol? (f2fa5@syntax->datum f444c@x)))) (set! f4245@dup-error (lambda (f444a@name) (f2f9f@syntax-violation 'import '"two imports with different bindings" f444a@name))) (set! f4247@merge-substs (lambda (f4438@s f4439@subst) ((lambda (f443d@insert-to-subst) (begin (set! f443d@insert-to-subst (lambda (f443e@a f443f@subst) ((lambda (f4442@name f4443@label) ((lambda (f4446@t) (if f4446@t ((lambda (f4448@x) (if (eq? (cdr f4448@x) f4443@label) f443f@subst (f4245@dup-error f4442@name))) f4446@t) (cons f443e@a f443f@subst))) (assq f4442@name f443f@subst))) (car f443e@a) (cdr f443e@a)))) (if (null? f4438@s) f4439@subst (f443d@insert-to-subst (car f4438@s) (f4247@merge-substs (cdr f4438@s) f4439@subst))))) '#f))) (set! f4249@exclude* (lambda (f4408@sym* f4409@subst) ((lambda (f440d@exclude) (begin (set! f440d@exclude (lambda (f4426@sym f4427@subst) (if (null? f4427@subst) (f2f9f@syntax-violation 'import '"cannot rename unbound identifier" f4426@sym) (if (eq? f4426@sym (caar f4427@subst)) (values (cdar f4427@subst) (cdr f4427@subst)) ((lambda (f442a@a) (call-with-values (lambda () (f440d@exclude f4426@sym (cdr f4427@subst))) (lambda (f4430@f442d f4431@f442f) ((lambda (f4434@subst f4435@old) (values f4435@old (cons f442a@a f4434@subst))) f4431@f442f f4430@f442d)))) (car f4427@subst)))))) (if (null? f4408@sym*) (values '() f4409@subst) (call-with-values (lambda () (f440d@exclude (car f4408@sym*) f4409@subst)) (lambda (f4412@f440f f4413@f4411) ((lambda (f4416@subst f4417@old) (call-with-values (lambda () (f4249@exclude* (cdr f4408@sym*) f4416@subst)) (lambda (f441e@f441b f441f@f441d) ((lambda (f4422@subst f4423@old*) (values (cons f4417@old f4423@old*) f4422@subst)) f441f@f441d f441e@f441b)))) f4413@f4411 f4412@f440f)))))) '#f))) (set! f424b@find* (lambda (f4400@sym* f4401@subst) (map (lambda (f4404@x) ((lambda (f4406@t) (if f4406@t (cdr f4406@t) (f2f9f@syntax-violation 'import '"cannot find identifier" f4404@x))) (assq f4404@x f4401@subst))) f4400@sym*))) (set! f424d@rem* (lambda (f43f8@sym* f43f9@subst) ((letrec ((f43fc@f (lambda (f43fe@subst) (if (null? f43fe@subst) '() (if (memq (caar f43fe@subst) f43f8@sym*) (f43fc@f (cdr f43fe@subst)) (cons (car f43fe@subst) (f43fc@f (cdr f43fe@subst)))))))) f43fc@f) f43f9@subst))) (set! f424f@remove-dups (lambda (f43f6@ls) (if (null? f43f6@ls) '() (if (memq (car f43f6@ls) (cdr f43f6@ls)) (f424f@remove-dups (cdr f43f6@ls)) (cons (car f43f6@ls) (f424f@remove-dups (cdr f43f6@ls))))))) (set! f4251@parse-library-name (lambda (f430e@spec) ((lambda (f4311@subversion? f4313@subversion-pred f4315@version-pred) (begin (set! f4311@subversion? (lambda (f43f2@x) ((lambda (f43f4@x) (and (integer? f43f4@x) (exact? f43f4@x) (>= f43f4@x '0))) (f2fa5@syntax->datum f43f2@x)))) (set! f4313@subversion-pred (lambda (f4392@x*) ((lambda (f4394@t) ((lambda (f4396@ls/false) (if (and f4396@ls/false (apply (lambda (f4398@n) (f4311@subversion? f4398@n)) f4396@ls/false)) (apply (lambda (f439a@n) (lambda (f439c@x) (= f439c@x (f2fa5@syntax->datum f439a@n)))) f4396@ls/false) ((lambda (f439e@t) ((lambda (f43a0@ls/false) (if (and f43a0@ls/false (apply (lambda (f43a2@p? f43a3@sub*) (eq? (f2fa5@syntax->datum f43a2@p?) 'and)) f43a0@ls/false)) (apply (lambda (f43a6@p? f43a7@sub*) ((lambda (f43aa@p*) (lambda (f43ac@x) (for-all (lambda (f43ae@p) (f43ae@p f43ac@x)) f43aa@p*))) (map f4313@subversion-pred f43a7@sub*))) f43a0@ls/false) ((lambda (f43b0@t) ((lambda (f43b2@ls/false) (if (and f43b2@ls/false (apply (lambda (f43b4@p? f43b5@sub*) (eq? (f2fa5@syntax->datum f43b4@p?) 'or)) f43b2@ls/false)) (apply (lambda (f43b8@p? f43b9@sub*) ((lambda (f43bc@p*) (lambda (f43be@x) (exists (lambda (f43c0@p) (f43c0@p f43be@x)) f43bc@p*))) (map f4313@subversion-pred f43b9@sub*))) f43b2@ls/false) ((lambda (f43c2@t) ((lambda (f43c4@ls/false) (if (and f43c4@ls/false (apply (lambda (f43c6@p? f43c7@sub) (eq? (f2fa5@syntax->datum f43c6@p?) 'not)) f43c4@ls/false)) (apply (lambda (f43ca@p? f43cb@sub) ((lambda (f43ce@p) (lambda (f43d0@x) (not (f43ce@p f43d0@x)))) (f4313@subversion-pred f43cb@sub))) f43c4@ls/false) ((lambda (f43d2@t) ((lambda (f43d4@ls/false) (if (and f43d4@ls/false (apply (lambda (f43d6@p? f43d7@n) (and (eq? (f2fa5@syntax->datum f43d6@p?) '<=) (f4311@subversion? f43d7@n))) f43d4@ls/false)) (apply (lambda (f43da@p? f43db@n) (lambda (f43de@x) (<= f43de@x (f2fa5@syntax->datum f43db@n)))) f43d4@ls/false) ((lambda (f43e0@t) ((lambda (f43e2@ls/false) (if (and f43e2@ls/false (apply (lambda (f43e4@p? f43e5@n) (and (eq? (f2fa5@syntax->datum f43e4@p?) '>=) (f4311@subversion? f43e5@n))) f43e2@ls/false)) (apply (lambda (f43e8@p? f43e9@n) (lambda (f43ec@x) (>= f43ec@x (f2fa5@syntax->datum f43e9@n)))) f43e2@ls/false) ((lambda (f43ee@t) ((lambda (f43f0@ls/false) (if f43f0@ls/false (apply (lambda () (f2f9f@syntax-violation 'import '"invalid sub-version spec" f430e@spec f4392@x*)) f43f0@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f43ee@t))) (f2eb6@syntax-dispatch f43ee@t '_))) f43e0@t))) (f2eb6@syntax-dispatch f43e0@t '(any any)))) f43d2@t))) (f2eb6@syntax-dispatch f43d2@t '(any any)))) f43c2@t))) (f2eb6@syntax-dispatch f43c2@t '(any any)))) f43b0@t))) (f2eb6@syntax-dispatch f43b0@t '(any . each-any)))) f439e@t))) (f2eb6@syntax-dispatch f439e@t '(any . each-any)))) f4394@t))) (f2eb6@syntax-dispatch f4394@t 'any))) f4392@x*))) (set! f4315@version-pred (lambda (f4342@x*) ((lambda (f4344@t) ((lambda (f4346@ls/false) (if f4346@ls/false (apply (lambda () (lambda (f4348@x) '#t)) f4346@ls/false) ((lambda (f434a@t) ((lambda (f434c@ls/false) (if (and f434c@ls/false (apply (lambda (f434e@c f434f@ver*) (eq? (f2fa5@syntax->datum f434e@c) 'and)) f434c@ls/false)) (apply (lambda (f4352@c f4353@ver*) ((lambda (f4356@p*) (lambda (f4358@x) (for-all (lambda (f435a@p) (f435a@p f4358@x)) f4356@p*))) (map f4315@version-pred f4353@ver*))) f434c@ls/false) ((lambda (f435c@t) ((lambda (f435e@ls/false) (if (and f435e@ls/false (apply (lambda (f4360@c f4361@ver*) (eq? (f2fa5@syntax->datum f4360@c) 'or)) f435e@ls/false)) (apply (lambda (f4364@c f4365@ver*) ((lambda (f4368@p*) (lambda (f436a@x) (exists (lambda (f436c@p) (f436c@p f436a@x)) f4368@p*))) (map f4315@version-pred f4365@ver*))) f435e@ls/false) ((lambda (f436e@t) ((lambda (f4370@ls/false) (if (and f4370@ls/false (apply (lambda (f4372@c f4373@ver) (eq? (f2fa5@syntax->datum f4372@c) 'not)) f4370@ls/false)) (apply (lambda (f4376@c f4377@ver) ((lambda (f437a@p) (lambda (f437c@x) (not (f437a@p f437c@x)))) (f4315@version-pred f4377@ver))) f4370@ls/false) ((lambda (f437e@t) ((lambda (f4380@ls/false) (if f4380@ls/false (apply (lambda (f4382@sub*) ((lambda (f4384@p*) (lambda (f4386@x) ((letrec ((f4388@f (lambda (f438a@p* f438b@x) (if (null? f438a@p*) '#t (if (null? f438b@x) '#f (and ((car f438a@p*) (car f438b@x)) (f4388@f (cdr f438a@p*) (cdr f438b@x)))))))) f4388@f) f4384@p* f4386@x))) (map f4313@subversion-pred f4382@sub*))) f4380@ls/false) ((lambda (f438e@t) ((lambda (f4390@ls/false) (if f4390@ls/false (apply (lambda () (f2f9f@syntax-violation 'import '"invalid version spec" f430e@spec f4342@x*)) f4390@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f438e@t))) (f2eb6@syntax-dispatch f438e@t '_))) f437e@t))) (f2eb6@syntax-dispatch f437e@t 'each-any))) f436e@t))) (f2eb6@syntax-dispatch f436e@t '(any any)))) f435c@t))) (f2eb6@syntax-dispatch f435c@t '(any . each-any)))) f434a@t))) (f2eb6@syntax-dispatch f434a@t '(any . each-any)))) f4344@t))) (f2eb6@syntax-dispatch f4344@t '()))) f4342@x*))) ((letrec ((f4316@f (lambda (f4318@x) ((lambda (f431a@t) ((lambda (f431c@ls/false) (if f431c@ls/false (apply (lambda (f431e@version-spec*) (values '() (f4315@version-pred f431e@version-spec*))) f431c@ls/false) ((lambda (f4320@t) ((lambda (f4322@ls/false) (if (and f4322@ls/false (apply (lambda (f4324@x f4325@x*) (f4243@idsyn? f4324@x)) f4322@ls/false)) (apply (lambda (f4328@x f4329@x*) (call-with-values (lambda () (f4316@f f4329@x*)) (lambda (f4330@f432d f4331@f432f) ((lambda (f4334@pred f4335@name) (values (cons (f2fa5@syntax->datum f4328@x) f4335@name) f4334@pred)) f4331@f432f f4330@f432d)))) f4322@ls/false) ((lambda (f4338@t) ((lambda (f433a@ls/false) (if f433a@ls/false (apply (lambda () (values '() (lambda (f433c@x) '#t))) f433a@ls/false) ((lambda (f433e@t) ((lambda (f4340@ls/false) (if f4340@ls/false (apply (lambda () (f2f9f@syntax-violation '#f '"invalid import spec" f430e@spec)) f4340@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f433e@t))) (f2eb6@syntax-dispatch f433e@t '_))) f4338@t))) (f2eb6@syntax-dispatch f4338@t '()))) f4320@t))) (f2eb6@syntax-dispatch f4320@t '(any . any)))) f431a@t))) (f2eb6@syntax-dispatch f431a@t '(each-any)))) f4318@x)))) f4316@f) f430e@spec))) '#f '#f '#f))) (set! f4253@import-library (lambda (f42fe@spec*) (call-with-values (lambda () (f4251@parse-library-name f42fe@spec*)) (lambda (f4304@f4301 f4305@f4303) ((lambda (f4308@pred f4309@name) (begin (if (null? f4309@name) (f2f9f@syntax-violation 'import '"empty library name" f42fe@spec*) (void)) ((lambda (f430c@lib) (begin (if (not f430c@lib) (f2f9f@syntax-violation 'import '"cannot find library with required name" f4309@name) (void)) (if (not (f4308@pred (f2aa0@f2912@library-version f430c@lib))) (f2f9f@syntax-violation 'import '"library does not satisfy version specification" f42fe@spec* f430c@lib) (void)) ((f2f25@imp-collector) f430c@lib) (f2aa4@f291a@library-subst f430c@lib))) (f2ac8@f2962@find-library-by-name f4309@name)))) f4305@f4303 f4304@f4301))))) (set! f4255@get-import (lambda (f4270@spec) ((lambda (f4272@t) ((lambda (f4274@ls/false) (if (and f4274@ls/false (apply (lambda (f4276@x f4277@x*) (not (memq (f2fa5@syntax->datum f4276@x) '(for rename except only prefix library)))) f4274@ls/false)) (apply (lambda (f427a@x f427b@x*) (f4253@import-library (cons f427a@x f427b@x*))) f4274@ls/false) ((lambda (f427e@t) ((lambda (f4280@ls/false) (if (and f4280@ls/false (apply (lambda (f4282@rename f4283@isp f4284@old* f4285@new*) (and (eq? (f2fa5@syntax->datum f4282@rename) 'rename) (for-all f4243@idsyn? f4284@old*) (for-all f4243@idsyn? f4285@new*))) f4280@ls/false)) (apply (lambda (f428a@rename f428b@isp f428c@old* f428d@new*) ((lambda (f4292@subst f4293@old* f4294@new*) ((lambda (f4298@old-label*) ((lambda (f429a@subst) (f4247@merge-substs (map cons f4294@new* f4298@old-label*) f429a@subst)) (f424d@rem* f4293@old* f4292@subst))) (f424b@find* f4293@old* f4292@subst))) (f4255@get-import f428b@isp) (map f2fa5@syntax->datum f428c@old*) (map f2fa5@syntax->datum f428d@new*))) f4280@ls/false) ((lambda (f429c@t) ((lambda (f429e@ls/false) (if (and f429e@ls/false (apply (lambda (f42a0@except f42a1@isp f42a2@sym*) (and (eq? (f2fa5@syntax->datum f42a0@except) 'except) (for-all f4243@idsyn? f42a2@sym*))) f429e@ls/false)) (apply (lambda (f42a6@except f42a7@isp f42a8@sym*) ((lambda (f42ac@subst) (f424d@rem* (map f2fa5@syntax->datum f42a8@sym*) f42ac@subst)) (f4255@get-import f42a7@isp))) f429e@ls/false) ((lambda (f42ae@t) ((lambda (f42b0@ls/false) (if (and f42b0@ls/false (apply (lambda (f42b2@only f42b3@isp f42b4@sym*) (and (eq? (f2fa5@syntax->datum f42b2@only) 'only) (for-all f4243@idsyn? f42b4@sym*))) f42b0@ls/false)) (apply (lambda (f42b8@only f42b9@isp f42ba@sym*) ((lambda (f42be@subst f42bf@sym*) ((lambda (f42c2@sym*) ((lambda (f42c4@lab*) (map cons f42c2@sym* f42c4@lab*)) (f424b@find* f42c2@sym* f42be@subst))) (f424f@remove-dups f42bf@sym*))) (f4255@get-import f42b9@isp) (map f2fa5@syntax->datum f42ba@sym*))) f42b0@ls/false) ((lambda (f42c6@t) ((lambda (f42c8@ls/false) (if (and f42c8@ls/false (apply (lambda (f42ca@prefix f42cb@isp f42cc@p) (and (eq? (f2fa5@syntax->datum f42ca@prefix) 'prefix) (f4243@idsyn? f42cc@p))) f42c8@ls/false)) (apply (lambda (f42d0@prefix f42d1@isp f42d2@p) ((lambda (f42d6@subst f42d7@prefix) (map (lambda (f42da@x) (cons (string->symbol (string-append f42d7@prefix (symbol->string (car f42da@x)))) (cdr f42da@x))) f42d6@subst)) (f4255@get-import f42d1@isp) (symbol->string (f2fa5@syntax->datum f42d2@p)))) f42c8@ls/false) ((lambda (f42dc@t) ((lambda (f42de@ls/false) (if (and f42de@ls/false (apply (lambda (f42e0@library f42e1@spec*) (eq? (f2fa5@syntax->datum f42e0@library) 'library)) f42de@ls/false)) (apply (lambda (f42e4@library f42e5@spec*) (f4253@import-library f42e5@spec*)) f42de@ls/false) ((lambda (f42e8@t) ((lambda (f42ea@ls/false) (if (and f42ea@ls/false (apply (lambda (f42ec@for f42ed@isp f42ee@rest) (eq? (f2fa5@syntax->datum f42ec@for) 'for)) f42ea@ls/false)) (apply (lambda (f42f2@for f42f3@isp f42f4@rest) (f4255@get-import f42f3@isp)) f42ea@ls/false) ((lambda (f42f8@t) ((lambda (f42fa@ls/false) (if f42fa@ls/false (apply (lambda (f42fc@spec) (f2f9f@syntax-violation 'import '"invalid import spec" f42fc@spec)) f42fa@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f42f8@t))) (f2eb6@syntax-dispatch f42f8@t 'any))) f42e8@t))) (f2eb6@syntax-dispatch f42e8@t '(any any . any)))) f42dc@t))) (f2eb6@syntax-dispatch f42dc@t '(any each-any)))) f42c6@t))) (f2eb6@syntax-dispatch f42c6@t '(any any any)))) f42ae@t))) (f2eb6@syntax-dispatch f42ae@t '(any any . each-any)))) f429c@t))) (f2eb6@syntax-dispatch f429c@t '(any any . each-any)))) f427e@t))) (f2eb6@syntax-dispatch f427e@t '(any any . #(each (any any)))))) f4272@t))) (f2eb6@syntax-dispatch f4272@t '(any . each-any)))) f4270@spec))) (set! f4257@add-imports! (lambda (f4260@imp f4261@h) ((lambda (f4264@subst) (for-each (lambda (f4266@x) ((lambda (f4268@name f4269@label) ((lambda (f426c@t) (if f426c@t ((lambda (f426e@l) (if (not (eq? f426e@l f4269@label)) (f4245@dup-error f4268@name) (void))) f426c@t) (hashtable-set! f4261@h f4268@name f4269@label))) (hashtable-ref f4261@h f4268@name '#f))) (car f4266@x) (cdr f4266@x))) f4264@subst)) (f4255@get-import f4260@imp)))) (lambda (f4258@imp*) ((letrec ((f425a@f (lambda (f425c@imp* f425d@h) (if (null? f425c@imp*) (hashtable-entries f425d@h) (begin (f4257@add-imports! (car f425c@imp*) f425d@h) (f425a@f (cdr f425c@imp*) f425d@h)))))) f425a@f) f4258@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! f2f1d@make-top-rib (lambda (f444e@names f444f@labels) ((lambda (f4452@rib) (begin (vector-for-each (lambda (f4454@name f4455@label) (begin (if (not (symbol? f4454@name)) (error 'make-top-rib '"BUG: not a symbol" f4454@name) (void)) (f2c5e@extend-rib/nc! f4452@rib (f2c75@make-stx f4454@name f2c27@top-mark* '() '()) f4455@label))) f444e@names f444f@labels) f4452@rib)) (f2c5a@make-empty-rib)))) (set! f2f1f@make-collector (lambda () ((lambda (f4458@ls) (lambda f445c ((lambda (f445d) (if (= f445d '0) (apply (lambda () f4458@ls) f445c) (if (= f445d '1) (apply (lambda (f445a@x) (set! f4458@ls (f2c20@set-cons f445a@x f4458@ls))) f445c) (error 'apply '"invalid arg count")))) (length f445c)))) '()))) (set! f2f21@inv-collector (f2855@f277f@make-parameter (lambda f445e@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (f4460@x) (begin (if (not (procedure? f4460@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" f4460@x) (void)) f4460@x)))) (set! f2f23@vis-collector (f2855@f277f@make-parameter (lambda f4462@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (f4464@x) (begin (if (not (procedure? f4464@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" f4464@x) (void)) f4464@x)))) (set! f2f25@imp-collector (f2855@f277f@make-parameter (lambda f4466@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (f4468@x) (begin (if (not (procedure? f4468@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" f4468@x) (void)) f4468@x)))) (set! f2f27@chi-library-internal (lambda (f446a@e* f446b@rib f446c@top?) (call-with-values (lambda () (f2f11@chi-body* f446a@e* '() '() '() '() '() '() '() f446b@rib f446c@top?)) (lambda (f4480@f4471 f4481@f4473 f4482@f4475 f4483@f4477 f4484@f4479 f4485@f447b f4486@f447d f4487@f447f) ((lambda (f4490@exp* f4491@_kwd* f4492@mod** f4493@rhs* f4494@lex* f4495@mr f4496@r f4497@e*) (values (append (apply append (reverse f4492@mod**)) f4497@e*) f4496@r f4495@mr (reverse f4494@lex*) (reverse f4493@rhs*) f4490@exp*)) f4487@f447f f4486@f447d f4485@f447b f4484@f4479 f4483@f4477 f4482@f4475 f4481@f4473 f4480@f4471))))) (set! f2f29@chi-interaction-expr (lambda (f44a0@e f44a1@rib f44a2@r) (call-with-values (lambda () (f2f11@chi-body* (list f44a0@e) f44a2@r f44a2@r '() '() '() '() '() f44a1@rib '#t)) (lambda (f44b6@f44a7 f44b7@f44a9 f44b8@f44ab f44b9@f44ad f44ba@f44af f44bb@f44b1 f44bc@f44b3 f44bd@f44b5) ((lambda (f44c6@_exp* f44c7@_kwd* f44c8@mod** f44c9@rhs* f44ca@lex* f44cb@mr f44cc@r f44cd@e*) ((lambda (f44d6@e*) ((lambda (f44d8@e) (values f44d8@e f44cc@r)) (if (null? f44d6@e*) (f2c0b@f2b7b@build-void) (if (null? (cdr f44d6@e*)) (car f44d6@e*) (f2c0a@f2b79@build-sequence '#f f44d6@e*))))) (f2ee6@expand-interaction-rhs*/init* (reverse f44ca@lex*) (reverse f44c9@rhs*) (append (apply append (reverse f44c8@mod**)) f44cd@e*) f44cc@r f44cb@mr))) f44bd@f44b5 f44bc@f44b3 f44bb@f44b1 f44ba@f44af f44b9@f44ad f44b8@f44ab f44b7@f44a9 f44b6@f44a7))))) (set! f2f2b@library-body-expander (lambda (f44da@name f44db@main-exp* f44dc@imp* f44dd@b* f44de@top?) ((lambda (f44e5@itc) (begin (set! f44e5@itc (f2f1f@make-collector)) ((lambda (f44ee@f44e7 f44ef@f44e9 f44f0@f44eb f44f1@f44ed) ((lambda (f44f6@swap) (dynamic-wind f44f6@swap (lambda () (call-with-values (lambda () (f2f1b@parse-import-spec* f44dc@imp*)) (lambda (f44fc@f44f9 f44fd@f44fb) ((lambda (f4500@subst-labels f4501@subst-names) ((lambda (f4504@rib) ((lambda (f4507@wrap) (begin (set! f4507@wrap (lambda (f4582@x) (f2c75@make-stx f4582@x f2c27@top-mark* (list f4504@rib) '()))) ((lambda (f4508@b* f4509@main-exp* f450a@rtc f450b@vtc) ((lambda (f4518@f4511 f4519@f4513 f451a@f4515 f451b@f4517) ((lambda (f4520@swap) (dynamic-wind f4520@swap (lambda () (call-with-values (lambda () (f2f27@chi-library-internal f4508@b* f4504@rib f44de@top?)) (lambda (f452e@f4523 f452f@f4525 f4530@f4527 f4531@f4529 f4532@f452b f4533@f452d) ((lambda (f453a@internal-exp* f453b@rhs* f453c@lex* f453d@mr f453e@r f453f@init*) (call-with-values (lambda () (f2f15@parse-exports (append f4509@main-exp* f453a@internal-exp*))) (lambda (f454a@f4547 f454b@f4549) ((lambda (f454e@exp-id* f454f@exp-name*) (begin (f2c62@seal-rib! f4504@rib) ((lambda (f4552@init*) ((lambda (f4554@rhs*) ((lambda () (begin (f2c64@unseal-rib! f4504@rib) ((lambda (f4556@loc* f4557@export-subst) ((lambda (f455b@errstr) (begin (set! f455b@errstr '"attempt to export mutated variable") (call-with-values (lambda () (f2f8b@make-export-env/macros f453c@lex* f4556@loc* f453e@r)) (lambda (f4562@f455d f4563@f455f f4564@f4561) ((lambda (f4568@macro* f4569@global* f456a@export-env) (begin (for-each (lambda (f456e@s) ((lambda (f4570@name f4571@label) ((lambda (f4574@p) (if f4574@p ((lambda (f4576@b) ((lambda (f4578@type) (if (eq? f4578@type 'mutable) (f2f9f@syntax-violation 'export f455b@errstr f4570@name) (void))) (car f4576@b))) (cdr f4574@p)) (void))) (assq f4571@label f456a@export-env))) (car f456e@s) (cdr f456e@s))) f4557@export-subst) ((lambda (f457a@invoke-body f457b@invoke-definitions) (values (f44e5@itc) (f450a@rtc) (f450b@vtc) (f2c0a@f2b79@build-sequence '#f (append f457b@invoke-definitions (list f457a@invoke-body))) f4568@macro* f4557@export-subst f456a@export-env)) (f2c0d@f2b7f@build-letrec* '#f f453c@lex* f4554@rhs* (f2f87@build-exports f4569@global* f4552@init*)) (map f2c06@f2ad6@build-global-define (map cdr f4569@global*))))) f4564@f4561 f4563@f455f f4562@f455d))))) '#f)) (map f2c2d@gen-global f453c@lex*) (f2f89@make-export-subst f454f@exp-name* f454e@exp-id*)))))) (f2ee8@chi-rhs* f453b@rhs* f453e@r f453d@mr))) (f2ed4@chi-expr* f453f@init* f453e@r f453d@mr)))) f454b@f4549 f454a@f4547)))) f4533@f452d f4532@f452b f4531@f4529 f4530@f4527 f452f@f4525 f452e@f4523)))) f4520@swap)) (lambda () (begin ((lambda (f457e@t) (begin (f4518@f4511 f451a@f4515) (set! f451a@f4515 f457e@t))) (f4518@f4511)) ((lambda (f4580@t) (begin (f4519@f4513 f451b@f4517) (set! f451b@f4517 f4580@t))) (f4519@f4513)))))) f2f21@inv-collector f2f23@vis-collector f450a@rtc f450b@vtc)) (map f4507@wrap f44dd@b*) (map f4507@wrap f44db@main-exp*) (f2f1f@make-collector) (f2f1f@make-collector)))) '#f)) (f2f1d@make-top-rib f4501@subst-names f4500@subst-labels))) f44fd@f44fb f44fc@f44f9)))) f44f6@swap)) (lambda () (begin ((lambda (f4584@t) (begin (f44ee@f44e7 f44f0@f44eb) (set! f44f0@f44eb f4584@t))) (f44ee@f44e7)) ((lambda (f4586@t) (begin (f44ef@f44e9 f44f1@f44ed) (set! f44f1@f44ed f4586@t))) (f44ef@f44e9)))))) f2f25@imp-collector f2fad@top-level-context f44e5@itc '#f))) '#f))) (set! f2f2d@core-library-expander (lambda (f4588@e f4589@verify-name) (call-with-values (lambda () (f2f19@parse-library f4588@e)) (lambda (f4594@f458d f4595@f458f f4596@f4591 f4597@f4593) ((lambda (f459c@b* f459d@imp* f459e@exp* f459f@name*) (call-with-values (lambda () (f2f17@parse-library-name f459f@name*)) (lambda (f45a8@f45a5 f45a9@f45a7) ((lambda (f45ac@ver f45ad@name) (begin (f4589@verify-name f45ad@name) (call-with-values (lambda () (f2f2b@library-body-expander f45ad@name f459e@exp* f459d@imp* f459c@b* '#f)) (lambda (f45be@f45b1 f45bf@f45b3 f45c0@f45b5 f45c1@f45b7 f45c2@f45b9 f45c3@f45bb f45c4@f45bd) ((lambda (f45cc@export-env f45cd@export-subst f45ce@visit-code f45cf@invoke-code f45d0@visit-req* f45d1@invoke-req* f45d2@imp*) (values f45ad@name f45ac@ver f45d2@imp* f45d1@invoke-req* f45d0@visit-req* f45cf@invoke-code f45ce@visit-code f45cd@export-subst f45cc@export-env)) f45c4@f45bd f45c3@f45bb f45c2@f45b9 f45c1@f45b7 f45c0@f45b5 f45bf@f45b3 f45be@f45b1))))) f45a9@f45a7 f45a8@f45a5)))) f4597@f4593 f4596@f4591 f4595@f458f f4594@f458d))))) (set! f2f2f@parse-top-level-program (lambda (f45da@e*) ((lambda (f45dc@t) ((lambda (f45de@ls/false) (if (and f45de@ls/false (apply (lambda (f45e0@import f45e1@imp* f45e2@b*) (eq? (f2fa5@syntax->datum f45e0@import) 'import)) f45de@ls/false)) (apply (lambda (f45e6@import f45e7@imp* f45e8@b*) (values f45e7@imp* f45e8@b*)) f45de@ls/false) ((lambda (f45ec@t) ((lambda (f45ee@ls/false) (if (and f45ee@ls/false (apply (lambda (f45f0@import f45f1@x f45f2@y) (eq? (f2fa5@syntax->datum f45f0@import) 'import)) f45ee@ls/false)) (apply (lambda (f45f6@import f45f7@x f45f8@y) (f2f9f@syntax-violation 'expander '"invalid syntax of top-level program" (f2ca5@syntax-car f45da@e*))) f45ee@ls/false) ((lambda (f45fc@t) ((lambda (f45fe@ls/false) (if f45fe@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) f45fe@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f45fc@t))) (f2eb6@syntax-dispatch f45fc@t '_))) f45ec@t))) (f2eb6@syntax-dispatch f45ec@t '((any . any) . any)))) f45dc@t))) (f2eb6@syntax-dispatch f45dc@t '((any . each-any) . each-any)))) f45da@e*))) (set! f2f31@top-level-expander (lambda (f4600@e*) (call-with-values (lambda () (f2f2f@parse-top-level-program f4600@e*)) (lambda (f4606@f4603 f4607@f4605) ((lambda (f460a@b* f460b@imp*) (call-with-values (lambda () (f2f2b@library-body-expander '() '() f460b@imp* f460a@b* '#t)) (lambda (f461c@f460f f461d@f4611 f461e@f4613 f461f@f4615 f4620@f4617 f4621@f4619 f4622@f461b) ((lambda (f462a@export-env f462b@export-subst f462c@visit-code f462d@invoke-code f462e@visit-req* f462f@invoke-req* f4630@imp*) (values f462f@invoke-req* f462d@invoke-code)) f4622@f461b f4621@f4619 f4620@f4617 f461f@f4615 f461e@f4613 f461d@f4611 f461c@f460f)))) f4607@f4605 f4606@f4603))))) (set! f2f37@f2f32 (make-record-type-descriptor 'env '#f 'f2f35 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! f2f39@f2f34 '#f) (set! f2f3b@f2f33 (make-record-constructor-descriptor f2f37@f2f32 '#f f2f39@f2f34)) (set! f2f3e@env? (record-predicate f2f37@f2f32)) (set! f2f40@make-env (record-constructor f2f3b@f2f33)) (set! f2f42@env-names (record-accessor f2f37@f2f32 '0)) (set! f2f44@env-labels (record-accessor f2f37@f2f32 '1)) (set! f2f46@env-itc (record-accessor f2f37@f2f32 '2)) (set! f2f48@set-env-names! (record-mutator f2f37@f2f32 '0)) (set! f2f4a@set-env-labels! (record-mutator f2f37@f2f32 '1)) (set! f2f4c@set-env-itc! (record-mutator f2f37@f2f32 '2)) (set! f2f4e@rp (f2852@f2779@make-record-printer 'env (lambda (f4638@x f4639@p f463a@wr) (display '"#<environment>" f4639@p)))) (set! f2f54@f2f4f (make-record-type-descriptor 'interaction-env '#f 'f2f52 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! f2f56@f2f51 '#f) (set! f2f58@f2f50 (make-record-constructor-descriptor f2f54@f2f4f '#f f2f56@f2f51)) (set! f2f5b@interaction-env? (record-predicate f2f54@f2f4f)) (set! f2f5d@make-interaction-env (record-constructor f2f58@f2f50)) (set! f2f5f@interaction-env-rib (record-accessor f2f54@f2f4f '0)) (set! f2f61@interaction-env-r (record-accessor f2f54@f2f4f '1)) (set! f2f63@interaction-env-locs (record-accessor f2f54@f2f4f '2)) (set! f2f65@set-interaction-env-rib! (record-mutator f2f54@f2f4f '0)) (set! f2f67@set-interaction-env-r! (record-mutator f2f54@f2f4f '1)) (set! f2f69@set-interaction-env-locs! (record-mutator f2f54@f2f4f '2)) (set! f2f6b@rp (f2852@f2779@make-record-printer 'interaction-env (lambda (f463e@x f463f@p f4640@wr) (display '"#<environment>" f463f@p)))) (set! f2f6d@interaction-environment-symbols (lambda () (f2f75@environment-symbols (f2fab@interaction-environment)))) (set! f2f6f@environment-bindings (lambda (f4644@e) (vector->list (vector-map (lambda (f4646@name f4647@label) (f2f71@parse-binding (cons f4646@name (f2ace@f296e@imported-label->binding f4647@label)))) (f2f42@env-names f4644@e) (f2f44@env-labels f4644@e))))) (set! f2f71@parse-binding (lambda (f464a@b) (cons (car f464a@b) ((lambda (f464c@t) (if (memv f464c@t '(core-prim global)) 'procedure (if (memv f464c@t '(core-macro macro global-macro)) 'syntax (if (memv f464c@t '($core-rtd)) 'record (if (eq? (car f464a@b) (cadr f464a@b)) 'syntax 'unknown))))) (cadr f464a@b))))) (set! f2f73@environment? (lambda (f464e@x) (or (f2f3e@env? f464e@x) (f2f5b@interaction-env? f464e@x)))) (set! f2f75@environment-symbols (lambda (f4650@x) (if (f2f3e@env? f4650@x) (vector->list (f2f42@env-names f4650@x)) (if (f2f5b@interaction-env? f4650@x) (map values (f2c46@rib-sym* (f2f5f@interaction-env-rib f4650@x))) (assertion-violation 'environment-symbols '"not an environment" f4650@x))))) (set! f2f77@environment (lambda f4652@imp* ((lambda (f4654@itc) ((lambda (f465a@f4657 f465b@f4659) ((lambda (f465e@swap) (dynamic-wind f465e@swap (lambda () (call-with-values (lambda () (f2f1b@parse-import-spec* f4652@imp*)) (lambda (f4664@f4661 f4665@f4663) ((lambda (f4668@subst-labels f4669@subst-names) (f2f40@make-env f4669@subst-names f4668@subst-labels f4654@itc)) f4665@f4663 f4664@f4661)))) f465e@swap)) (lambda () ((lambda (f466c@t) (begin (f465a@f4657 f465b@f4659) (set! f465b@f4659 f466c@t))) (f465a@f4657))))) f2f25@imp-collector f4654@itc)) (f2f1f@make-collector)))) (set! f2f79@null-environment (lambda (f466e@n) (begin (if (not (eqv? f466e@n '5)) (assertion-violation 'null-environment '"not 5" f466e@n) (void)) (f2f77@environment '(psyntax null-environment-5))))) (set! f2f7b@scheme-report-environment (lambda (f4670@n) (begin (if (not (eqv? f4670@n '5)) (assertion-violation 'scheme-report-environment '"not 5" f4670@n) (void)) (f2f77@environment '(psyntax scheme-report-environment-5))))) (set! f2f7d@expand (lambda (f4672@x f4673@env) (if (f2f3e@env? f4673@env) ((lambda (f4676@rib) ((lambda (f4678@x f4679@itc f467a@rtc f467b@vtc) ((lambda (f4680@x) (begin (f2c62@seal-rib! f4676@rib) (values f4680@x (f467a@rtc)))) ((lambda (f4692@f4683 f4693@f4685 f4694@f4687 f4695@f4689 f4696@f468b f4697@f468d f4698@f468f f4699@f4691) ((lambda (f46a2@swap) (dynamic-wind f46a2@swap (lambda () (f2ed8@chi-expr f4678@x '() '())) f46a2@swap)) (lambda () (begin ((lambda (f46a4@t) (begin (f4692@f4683 f4696@f468b) (set! f4696@f468b f46a4@t))) (f4692@f4683)) ((lambda (f46a6@t) (begin (f4693@f4685 f4697@f468d) (set! f4697@f468d f46a6@t))) (f4693@f4685)) ((lambda (f46a8@t) (begin (f4694@f4687 f4698@f468f) (set! f4698@f468f f46a8@t))) (f4694@f4687)) ((lambda (f46aa@t) (begin (f4695@f4689 f4699@f4691) (set! f4699@f4691 f46aa@t))) (f4695@f4689)))))) f2fad@top-level-context f2f21@inv-collector f2f23@vis-collector f2f25@imp-collector '#f f467a@rtc f467b@vtc f4679@itc))) (f2c75@make-stx f4672@x f2c27@top-mark* (list f4676@rib) '()) (f2f46@env-itc f4673@env) (f2f1f@make-collector) (f2f1f@make-collector))) (f2f1d@make-top-rib (f2f42@env-names f4673@env) (f2f44@env-labels f4673@env))) (if (f2f5b@interaction-env? f4673@env) ((lambda (f46ac@rib f46ad@r f46ae@rtc) ((lambda (f46b2@x) (call-with-values (lambda () ((lambda (f46c8@f46b9 f46c9@f46bb f46ca@f46bd f46cb@f46bf f46cc@f46c1 f46cd@f46c3 f46ce@f46c5 f46cf@f46c7) ((lambda (f46d8@swap) (dynamic-wind f46d8@swap (lambda () (f2f29@chi-interaction-expr f46b2@x f46ac@rib f46ad@r)) f46d8@swap)) (lambda () (begin ((lambda (f46da@t) (begin (f46c8@f46b9 f46cc@f46c1) (set! f46cc@f46c1 f46da@t))) (f46c8@f46b9)) ((lambda (f46dc@t) (begin (f46c9@f46bb f46cd@f46c3) (set! f46cd@f46c3 f46dc@t))) (f46c9@f46bb)) ((lambda (f46de@t) (begin (f46ca@f46bd f46ce@f46c5) (set! f46ce@f46c5 f46de@t))) (f46ca@f46bd)) ((lambda (f46e0@t) (begin (f46cb@f46bf f46cf@f46c7) (set! f46cf@f46c7 f46e0@t))) (f46cb@f46bf)))))) f2fad@top-level-context f2f21@inv-collector f2f23@vis-collector f2f25@imp-collector f4673@env f46ae@rtc (f2f1f@make-collector) (f2f1f@make-collector))) (lambda (f46e2@f46b5 f46e3@f46b7) ((lambda (f46e6@r^ f46e7@e) (begin (f2f67@set-interaction-env-r! f4673@env f46e6@r^) (values f46e7@e (f46ae@rtc)))) f46e3@f46b7 f46e2@f46b5)))) (f2c75@make-stx f4672@x f2c27@top-mark* (list f46ac@rib) '()))) (f2f5f@interaction-env-rib f4673@env) (f2f61@interaction-env-r f4673@env) (f2f1f@make-collector)) (assertion-violation 'expand '"not an environment" f4673@env))))) (set! f2f7f@eval (lambda (f46ea@x f46eb@env) (begin (if (not (f2f73@environment? f46eb@env)) (error 'eval '"not an environment" f46eb@env) (void)) (call-with-values (lambda () (f2f7d@expand f46ea@x f46eb@env)) (lambda (f46f2@f46ef f46f3@f46f1) ((lambda (f46f6@invoke-req* f46f7@x) (begin (for-each f2acf@f2970@invoke-library f46f6@invoke-req*) (eval-core (f28a9@f2861@expanded->core f46f7@x)))) f46f3@f46f1 f46f2@f46ef)))))) (set! f2f81@library-expander (lambda f4768 ((lambda (f4769) (if (= f4769 '3) (apply (lambda (f46fa@x f46fb@filename f46fc@verify-name) ((lambda (f4701@build-visit-code f4703@visit!) (begin (set! f4701@build-visit-code (lambda (f4756@macro*) (if (null? f4756@macro*) (f2c0b@f2b7b@build-void) (f2c0a@f2b79@build-sequence '#f (map (lambda (f4758@x) ((lambda (f475a@loc f475b@src) (list 'set! f475a@loc f475b@src)) (car f4758@x) (cddr f4758@x))) f4756@macro*))))) (set! f4703@visit! (lambda (f474e@macro*) (for-each (lambda (f4750@x) ((lambda (f4752@loc f4753@proc) (set-symbol-value! f4752@loc f4753@proc)) (car f4750@x) (cadr f4750@x))) f474e@macro*))) (call-with-values (lambda () (f2f2d@core-library-expander f46fa@x f46fc@verify-name)) (lambda (f4716@f4705 f4717@f4707 f4718@f4709 f4719@f470b f471a@f470d f471b@f470f f471c@f4711 f471d@f4713 f471e@f4715) ((lambda (f4728@export-env f4729@export-subst f472a@macro* f472b@invoke-code f472c@vis* f472d@inv* f472e@imp* f472f@ver f4730@name) ((lambda (f473a@id f473b@name f473c@ver f473d@imp* f473e@vis* f473f@inv* f4740@visit-proc f4741@invoke-proc f4742@visit-code f4743@invoke-code) (begin (f2acd@f296c@install-library f473a@id f473b@name f473c@ver f473d@imp* f473e@vis* f473f@inv* f4729@export-subst f4728@export-env f4740@visit-proc f4741@invoke-proc f4742@visit-code f4743@invoke-code '#t f46fb@filename) (values f473a@id f473b@name f473c@ver f473d@imp* f473e@vis* f473f@inv* f4743@invoke-code f4742@visit-code f4729@export-subst f4728@export-env))) (gensym) f4730@name f472f@ver (map f2ad3@f2978@library-spec f472e@imp*) (map f2ad3@f2978@library-spec f472c@vis*) (map f2ad3@f2978@library-spec f472d@inv*) (lambda () (f4703@visit! f472a@macro*)) (lambda () (eval-core (f28a9@f2861@expanded->core f472b@invoke-code))) (f4701@build-visit-code f472a@macro*) f472b@invoke-code)) f471e@f4715 f471d@f4713 f471c@f4711 f471b@f470f f471a@f470d f4719@f470b f4718@f4709 f4717@f4707 f4716@f4705))))) '#f '#f)) f4768) (if (= f4769 '2) (apply (lambda (f475e@x f475f@filename) (f2f81@library-expander f475e@x f475f@filename (lambda (f4762@x) (values)))) f4768) (if (= f4769 '1) (apply (lambda (f4764@x) (f2f81@library-expander f4764@x '#f (lambda (f4766@x) (values)))) f4768) (error 'apply '"invalid arg count"))))) (length f4768)))) (set! f2f83@boot-library-expand (lambda (f476a@x) (call-with-values (lambda () (f2f81@library-expander f476a@x)) (lambda (f4780@f476d f4781@f476f f4782@f4771 f4783@f4773 f4784@f4775 f4785@f4777 f4786@f4779 f4787@f477b f4788@f477d f4789@f477f) ((lambda (f4794@export-env f4795@export-subst f4796@visit-code f4797@invoke-code f4798@inv* f4799@vis* f479a@imp* f479b@ver f479c@name f479d@id) (values f479c@name f4797@invoke-code f4795@export-subst f4794@export-env)) f4789@f477f f4788@f477d f4787@f477b f4786@f4779 f4785@f4777 f4784@f4775 f4783@f4773 f4782@f4771 f4781@f476f f4780@f476d))))) (set! f2f85@rev-map-append (lambda (f47a8@f f47a9@ls f47aa@ac) (if (null? f47a9@ls) f47aa@ac (f2f85@rev-map-append f47a8@f (cdr f47a9@ls) (cons (f47a8@f (car f47a9@ls)) f47aa@ac))))) (set! f2f87@build-exports (lambda (f47ae@lex*+loc* f47af@init*) (f2c0a@f2b79@build-sequence '#f (cons (f2c0b@f2b7b@build-void) (f2f85@rev-map-append (lambda (f47b2@x) (list 'set! (cdr f47b2@x) (car f47b2@x))) f47ae@lex*+loc* f47af@init*))))) (set! f2f89@make-export-subst (lambda (f47b4@name* f47b5@id*) (map (lambda (f47b8@name f47b9@id) ((lambda (f47bc@label) (begin (if (not f47bc@label) (f2f9f@syntax-violation '#f '"cannot export unbound identifier" f47b9@id) (void)) (cons f47b8@name f47bc@label))) (f2cc5@id->label f47b9@id))) f47b4@name* f47b5@id*))) (set! f2f8b@make-export-env/macros (lambda (f47be@lex* f47bf@loc* f47c0@r) ((lambda (f47c5@lookup) (begin (set! f47c5@lookup (lambda (f47e2@x) ((letrec ((f47e4@f (lambda (f47e6@x f47e7@lex* f47e8@loc*) (if (pair? f47e7@lex*) (if (eq? f47e6@x (car f47e7@lex*)) (car f47e8@loc*) (f47e4@f f47e6@x (cdr f47e7@lex*) (cdr f47e8@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) f47e4@f) f47e2@x f47be@lex* f47bf@loc*))) ((letrec ((f47c6@f (lambda (f47c8@r f47c9@env f47ca@global* f47cb@macro*) (if (null? f47c8@r) (values f47c9@env f47ca@global* f47cb@macro*) ((lambda (f47d0@x) ((lambda (f47d2@label f47d3@b) ((lambda (f47d6@t) (if (memv f47d6@t '(lexical)) ((lambda (f47d8@v) ((lambda (f47da@loc f47db@type) (f47c6@f (cdr f47c8@r) (cons (cons* f47d2@label f47db@type f47da@loc) f47c9@env) (cons (cons (f2e42@lexical-var f47d8@v) f47da@loc) f47ca@global*) f47cb@macro*)) (f47c5@lookup (f2e42@lexical-var f47d8@v)) (if (f2e44@lexical-mutable? f47d8@v) 'mutable 'global))) (f2ccf@binding-value f47d3@b)) (if (memv f47d6@t '(local-macro)) ((lambda (f47de@loc) (f47c6@f (cdr f47c8@r) (cons (cons* f47d2@label 'global-macro f47de@loc) f47c9@env) f47ca@global* (cons (cons f47de@loc (f2ccf@binding-value f47d3@b)) f47cb@macro*))) (gensym)) (if (memv f47d6@t '(local-macro!)) ((lambda (f47e0@loc) (f47c6@f (cdr f47c8@r) (cons (cons* f47d2@label 'global-macro! f47e0@loc) f47c9@env) f47ca@global* (cons (cons f47e0@loc (f2ccf@binding-value f47d3@b)) f47cb@macro*))) (gensym)) (if (memv f47d6@t '($rtd $module)) (f47c6@f (cdr f47c8@r) (cons f47d0@x f47c9@env) f47ca@global* f47cb@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (f2ccd@binding-type f47d3@b) (f2ccf@binding-value f47d3@b))))))) (f2ccd@binding-type f47d3@b))) (car f47d0@x) (cdr f47d0@x))) (car f47c8@r)))))) f47c6@f) f47c0@r '() '() '()))) '#f))) (set! f2f8d@generate-temporaries (lambda (f47ec@ls) ((lambda (f47ee@t) ((lambda (f47f0@ls/false) (if f47f0@ls/false (apply (lambda (f47f2@ls) (map (lambda (f47f4@x) (f2c75@make-stx ((lambda (f47f6@x) (if (or (symbol? f47f6@x) (string? f47f6@x)) (gensym f47f6@x) (gensym 't))) (f2fa5@syntax->datum f47f4@x)) f2c27@top-mark* '() '())) f47f2@ls)) f47f0@ls/false) ((lambda (f47f8@t) ((lambda (f47fa@ls/false) (if f47fa@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) f47fa@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f47f8@t))) (f2eb6@syntax-dispatch f47f8@t '_))) f47ee@t))) (f2eb6@syntax-dispatch f47ee@t 'each-any))) f47ec@ls))) (set! f2f8f@free-identifier=? (lambda (f47fc@x f47fd@y) (if (f2cab@id? f47fc@x) (if (f2cab@id? f47fd@y) (f2cb3@free-id=? f47fc@x f47fd@y) (assertion-violation 'free-identifier=? '"not an identifier" f47fd@y)) (assertion-violation 'free-identifier=? '"not an identifier" f47fc@x)))) (set! f2f91@bound-identifier=? (lambda (f4800@x f4801@y) (if (f2cab@id? f4800@x) (if (f2cab@id? f4801@y) (f2cb1@bound-id=? f4800@x f4801@y) (assertion-violation 'bound-identifier=? '"not an identifier" f4801@y)) (assertion-violation 'bound-identifier=? '"not an identifier" f4800@x)))) (set! f2f93@make-source-condition (lambda (f4804@x) ((lambda (f480e@f4809 f4810@f480b f4812@f480a f4815@f4808 f4817@make-source-condition f4819@f4806 f481b@f4807 f481d@source-condition? f481f@source-filename f4821@source-character) (begin (set! f480e@f4809 (make-record-type-descriptor '&source-information f4c6c@f49b3@&condition-rtd 'f480c '#f '#f '#((immutable file-name) (immutable character)))) (set! f4810@f480b '#f) (set! f4812@f480a (make-record-constructor-descriptor f480e@f4809 f4c6d@f49b5@&condition-rcd f4810@f480b)) (set! f4815@f4808 (record-predicate f480e@f4809)) (set! f4817@make-source-condition (record-constructor f4812@f480a)) (set! f4819@f4806 (record-accessor f480e@f4809 '0)) (set! f481b@f4807 (record-accessor f480e@f4809 '1)) (set! f481d@source-condition? (condition-predicate f480e@f4809)) (set! f481f@source-filename (condition-accessor f480e@f4809 f4819@f4806)) (set! f4821@source-character (condition-accessor f480e@f4809 f481b@f4807)) (if (pair? f4804@x) (f4817@make-source-condition (car f4804@x) (cdr f4804@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! f2f95@extract-position-condition (lambda (f4822@x) (f2f93@make-source-condition (f2f97@expression-position f4822@x)))) (set! f2f97@expression-position (lambda (f4824@x) (and (f2c73@stx? f4824@x) ((lambda (f4826@x) (and (f284a@f2769@annotation? f4826@x) (f284b@f276b@annotation-source f4826@x))) (f2c77@stx-expr f4824@x))))) (set! f2f99@assertion-error (lambda (f4828@expr f4829@pos) (raise (condition (f4c9c@f4a77@make-assertion-violation) (f4cae@f4aa9@make-who-condition 'assert) (f4c72@f4a0a@make-message-condition '"assertion failed") (f4ca4@f4a8e@make-irritants-condition (list f4828@expr)) (f2f93@make-source-condition f4829@pos))))) (set! f2f9b@syntax-error (lambda (f482c@x . f482e@args) (begin (if (not (for-all string? f482e@args)) (assertion-violation 'syntax-error '"invalid argument" f482e@args) (void)) (raise (condition (f4c72@f4a0a@make-message-condition (if (null? f482e@args) '"invalid syntax" (apply string-append f482e@args))) (f4cd0@f4b05@make-syntax-violation (f2fa5@syntax->datum f482c@x) '#f) (f2f95@extract-position-condition f482c@x)))))) (set! f2f9d@syntax-violation* (lambda (f4830@who f4831@msg f4832@form f4833@condition-object) (begin (if (not (string? f4831@msg)) (assertion-violation 'syntax-violation '"message is not a string" f4831@msg) (void)) ((lambda (f4838@who) (raise (condition (if f4838@who (f4cae@f4aa9@make-who-condition f4838@who) (condition)) (f4c72@f4a0a@make-message-condition f4831@msg) f4833@condition-object (f2f95@extract-position-condition f4832@form)))) (if (or (string? f4830@who) (symbol? f4830@who)) f4830@who (if (not f4830@who) ((lambda (f483a@t) ((lambda (f483c@ls/false) (if (and f483c@ls/false (apply (lambda (f483e@id) (f2cab@id? f483e@id)) f483c@ls/false)) (apply (lambda (f4840@id) (f2fa5@syntax->datum f4840@id)) f483c@ls/false) ((lambda (f4842@t) ((lambda (f4844@ls/false) (if (and f4844@ls/false (apply (lambda (f4846@id f4847@rest) (f2cab@id? f4846@id)) f4844@ls/false)) (apply (lambda (f484a@id f484b@rest) (f2fa5@syntax->datum f484a@id)) f4844@ls/false) ((lambda (f484e@t) ((lambda (f4850@ls/false) (if f4850@ls/false (apply (lambda () '#f) f4850@ls/false) (f2f9f@syntax-violation '#f '"invalid syntax" f484e@t))) (f2eb6@syntax-dispatch f484e@t '_))) f4842@t))) (f2eb6@syntax-dispatch f4842@t '(any . any)))) f483a@t))) (f2eb6@syntax-dispatch f483a@t 'any))) f4832@form) (assertion-violation 'syntax-violation '"invalid who argument" f4830@who))))))) (set! f2f9f@syntax-violation (lambda f4860 ((lambda (f4861) (if (= f4861 '3) (apply (lambda (f4852@who f4853@msg f4854@form) (f2f9f@syntax-violation f4852@who f4853@msg f4854@form '#f)) f4860) (if (= f4861 '4) (apply (lambda (f4858@who f4859@msg f485a@form f485b@subform) (f2f9d@syntax-violation* f4858@who f4859@msg f485a@form (f4cd0@f4b05@make-syntax-violation (f2fa5@syntax->datum f485a@form) (f2fa5@syntax->datum f485b@subform)))) f4860) (error 'apply '"invalid arg count")))) (length f4860)))) (set! f2fa1@identifier? (lambda (f4862@x) (f2cab@id? f4862@x))) (set! f2fa3@datum->syntax (lambda (f4864@id f4865@datum) (if (f2cab@id? f4864@id) (f2c89@datum->stx f4864@id f4865@datum) (assertion-violation 'datum->syntax '"not an identifier" f4864@id)))) (set! f2fa5@syntax->datum (lambda (f4868@x) (f2cc1@stx->datum f4868@x))) (set! f2fa7@compile-r6rs-top-level (lambda (f486a@x*) (call-with-values (lambda () (f2f31@top-level-expander f486a@x*)) (lambda (f4870@f486d f4871@f486f) ((lambda (f4874@invoke-code f4875@lib*) (lambda () (begin (for-each f2acf@f2970@invoke-library f4875@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (f28a9@f2861@expanded->core f4874@invoke-code)) (void)) (eval-core (f28a9@f2861@expanded->core f4874@invoke-code))))) f4871@f486f f4870@f486d))))) (set! f2fa9@pre-compile-r6rs-top-level (lambda (f4878@x*) (call-with-values (lambda () (f2f31@top-level-expander f4878@x*)) (lambda (f487e@f487b f487f@f487d) ((lambda (f4882@invoke-code f4883@lib*) (begin (for-each f2acf@f2970@invoke-library f4883@lib*) (f2853@f277b@compile-core (f28a9@f2861@expanded->core f4882@invoke-code)))) f487f@f487d f487e@f487b))))) (set! f2fab@interaction-environment ((lambda (f4886@the-env) (lambda () (or f4886@the-env ((lambda (f4888@lib f4889@rib) (begin ((lambda (f488c@subst) (begin (f2c50@set-rib-sym*! f4889@rib (map car f488c@subst)) (f2c52@set-rib-mark**! f4889@rib (map (lambda (f488e@x) f2c27@top-mark*) f488c@subst)) (f2c54@set-rib-label*! f4889@rib (map cdr f488c@subst)))) (f2aa4@f291a@library-subst f4888@lib)) ((lambda (f4890@env) (begin (set! f4886@the-env f4890@env) f4890@env)) (f2f5d@make-interaction-env f4889@rib '() '())))) (f2ac8@f2962@find-library-by-name '(mosh interaction)) (f2c5a@make-empty-rib))))) '#f)) (set! f2fad@top-level-context (f2855@f277f@make-parameter '#f)) (begin (set! f499e@f2fad@top-level-context f2fad@top-level-context) (set! f499d@f2fab@interaction-environment f2fab@interaction-environment) (set! f499c@f2fa9@pre-compile-r6rs-top-level f2fa9@pre-compile-r6rs-top-level) (set! f499b@f2fa7@compile-r6rs-top-level f2fa7@compile-r6rs-top-level) (set! f499a@f2fa5@syntax->datum f2fa5@syntax->datum) (set! f4999@f2fa3@datum->syntax f2fa3@datum->syntax) (set! f4998@f2fa1@identifier? f2fa1@identifier?) (set! f4997@f2f9f@syntax-violation f2f9f@syntax-violation) (set! f4996@f2f9d@syntax-violation* f2f9d@syntax-violation*) (set! f4995@f2f9b@syntax-error f2f9b@syntax-error) (set! f4994@f2f99@assertion-error f2f99@assertion-error) (set! f4993@f2f97@expression-position f2f97@expression-position) (set! f4992@f2f95@extract-position-condition f2f95@extract-position-condition) (set! f4991@f2f93@make-source-condition f2f93@make-source-condition) (set! f4990@f2f91@bound-identifier=? f2f91@bound-identifier=?) (set! f498f@f2f8f@free-identifier=? f2f8f@free-identifier=?) (set! f498e@f2f8d@generate-temporaries f2f8d@generate-temporaries) (set! f498d@f2f8b@make-export-env/macros f2f8b@make-export-env/macros) (set! f498c@f2f89@make-export-subst f2f89@make-export-subst) (set! f498b@f2f87@build-exports f2f87@build-exports) (set! f498a@f2f85@rev-map-append f2f85@rev-map-append) (set! f4989@f2f83@boot-library-expand f2f83@boot-library-expand) (set! f4988@f2f81@library-expander f2f81@library-expander) (set! f4987@f2f7f@eval f2f7f@eval) (set! f4986@f2f7d@expand f2f7d@expand) (set! f4985@f2f7b@scheme-report-environment f2f7b@scheme-report-environment) (set! f4984@f2f79@null-environment f2f79@null-environment) (set! f4983@f2f77@environment f2f77@environment) (set! f4982@f2f75@environment-symbols f2f75@environment-symbols) (set! f4981@f2f73@environment? f2f73@environment?) (set! f4980@f2f71@parse-binding f2f71@parse-binding) (set! f497f@f2f6f@environment-bindings f2f6f@environment-bindings) (set! f497e@f2f6d@interaction-environment-symbols f2f6d@interaction-environment-symbols) (set! f497d@f2f6b@rp f2f6b@rp) (set! f497c@f2f69@set-interaction-env-locs! f2f69@set-interaction-env-locs!) (set! f497b@f2f67@set-interaction-env-r! f2f67@set-interaction-env-r!) (set! f497a@f2f65@set-interaction-env-rib! f2f65@set-interaction-env-rib!) (set! f4979@f2f63@interaction-env-locs f2f63@interaction-env-locs) (set! f4978@f2f61@interaction-env-r f2f61@interaction-env-r) (set! f4977@f2f5f@interaction-env-rib f2f5f@interaction-env-rib) (set! f4976@f2f5d@make-interaction-env f2f5d@make-interaction-env) (set! f4975@f2f5b@interaction-env? f2f5b@interaction-env?) (set! f4974@f2f58@f2f50 f2f58@f2f50) (set! f4973@f2f56@f2f51 f2f56@f2f51) (set! f4972@f2f54@f2f4f f2f54@f2f4f) (set! f4971@f2f4e@rp f2f4e@rp) (set! f4970@f2f4c@set-env-itc! f2f4c@set-env-itc!) (set! f496f@f2f4a@set-env-labels! f2f4a@set-env-labels!) (set! f496e@f2f48@set-env-names! f2f48@set-env-names!) (set! f496d@f2f46@env-itc f2f46@env-itc) (set! f496c@f2f44@env-labels f2f44@env-labels) (set! f496b@f2f42@env-names f2f42@env-names) (set! f496a@f2f40@make-env f2f40@make-env) (set! f4969@f2f3e@env? f2f3e@env?) (set! f4968@f2f3b@f2f33 f2f3b@f2f33) (set! f4967@f2f39@f2f34 f2f39@f2f34) (set! f4966@f2f37@f2f32 f2f37@f2f32) (set! f4965@f2f31@top-level-expander f2f31@top-level-expander) (set! f4964@f2f2f@parse-top-level-program f2f2f@parse-top-level-program) (set! f4963@f2f2d@core-library-expander f2f2d@core-library-expander) (set! f4962@f2f2b@library-body-expander f2f2b@library-body-expander) (set! f4961@f2f29@chi-interaction-expr f2f29@chi-interaction-expr) (set! f4960@f2f27@chi-library-internal f2f27@chi-library-internal) (set! f495f@f2f25@imp-collector f2f25@imp-collector) (set! f495e@f2f23@vis-collector f2f23@vis-collector) (set! f495d@f2f21@inv-collector f2f21@inv-collector) (set! f495c@f2f1f@make-collector f2f1f@make-collector) (set! f495b@f2f1d@make-top-rib f2f1d@make-top-rib) (set! f495a@f2f1b@parse-import-spec* f2f1b@parse-import-spec*) (set! f4959@f2f19@parse-library f2f19@parse-library) (set! f4958@f2f17@parse-library-name f2f17@parse-library-name) (set! f4957@f2f15@parse-exports f2f15@parse-exports) (set! f4956@f2f13@expand-transformer f2f13@expand-transformer) (set! f4955@f2f11@chi-body* f2f11@chi-body*) (set! f4954@f2f0f@chi-internal-module f2f0f@chi-internal-module) (set! f4953@f2f0d@module-interface-exp-id* f2f0d@module-interface-exp-id*) (set! f4952@f2f0b@set-module-interface-exp-lab-vec! f2f0b@set-module-interface-exp-lab-vec!) (set! f4951@f2f09@set-module-interface-exp-id-vec! f2f09@set-module-interface-exp-id-vec!) (set! f4950@f2f07@set-module-interface-first-mark! f2f07@set-module-interface-first-mark!) (set! f494f@f2f05@module-interface-exp-lab-vec f2f05@module-interface-exp-lab-vec) (set! f494e@f2f03@module-interface-exp-id-vec f2f03@module-interface-exp-id-vec) (set! f494d@f2f01@module-interface-first-mark f2f01@module-interface-first-mark) (set! f494c@f2eff@make-module-interface f2eff@make-module-interface) (set! f494b@f2efd@module-interface? f2efd@module-interface?) (set! f494a@f2efa@f2ef2 f2efa@f2ef2) (set! f4949@f2ef8@f2ef3 f2ef8@f2ef3) (set! f4948@f2ef6@f2ef1 f2ef6@f2ef1) (set! f4947@f2ef0@parse-module f2ef0@parse-module) (set! f4946@f2eee@chi-internal f2eee@chi-internal) (set! f4945@f2eec@find-dups f2eec@find-dups) (set! f4944@f2eea@find-bound=? f2eea@find-bound=?) (set! f4943@f2ee8@chi-rhs* f2ee8@chi-rhs*) (set! f4942@f2ee6@expand-interaction-rhs*/init* f2ee6@expand-interaction-rhs*/init*) (set! f4941@f2ee4@chi-rhs f2ee4@chi-rhs) (set! f4940@f2ee2@chi-defun f2ee2@chi-defun) (set! f493f@f2ee0@chi-lambda-clause* f2ee0@chi-lambda-clause*) (set! f493e@f2ede@chi-lambda-clause f2ede@chi-lambda-clause) (set! f493d@f2edc@verify-formals f2edc@verify-formals) (set! f493c@f2eda@chi-set! f2eda@chi-set!) (set! f493b@f2ed8@chi-expr f2ed8@chi-expr) (set! f493a@f2ed6@chi-application f2ed6@chi-application) (set! f4939@f2ed4@chi-expr* f2ed4@chi-expr*) (set! f4938@f2ed2@chi-global-macro f2ed2@chi-global-macro) (set! f4937@f2ed0@chi-local-macro f2ed0@chi-local-macro) (set! f4936@f2ece@chi-macro f2ece@chi-macro) (set! f4935@f2ecc@do-macro-call f2ecc@do-macro-call) (set! f4934@f2eca@local-macro-transformer f2eca@local-macro-transformer) (set! f4933@f2ec8@macro-transformer f2ec8@macro-transformer) (set! f4932@f2ec6@symbol-macro f2ec6@symbol-macro) (set! f4931@f2ec4@core-macro-transformer f2ec4@core-macro-transformer) (set! f4930@f2ec2@syntax-transformer f2ec2@syntax-transformer) (set! f492f@f2ec0@ellipsis-map f2ec0@ellipsis-map) (set! f492e@f2ebe@syntax-case-transformer f2ebe@syntax-case-transformer) (set! f492d@f2ebc@verify-literals f2ebc@verify-literals) (set! f492c@f2eba@underscore? f2eba@underscore?) (set! f492b@f2eb8@ellipsis? f2eb8@ellipsis?) (set! f492a@f2eb6@syntax-dispatch f2eb6@syntax-dispatch) (set! f4929@f2eb4@convert-pattern f2eb4@convert-pattern) (set! f4928@f2eb2@foreign-call-transformer f2eb2@foreign-call-transformer) (set! f4927@f2eb0@parameterize-macro f2eb0@parameterize-macro) (set! f4926@f2eae@incorrect-usage-macro f2eae@incorrect-usage-macro) (set! f4925@f2eac@define-condition-type-macro f2eac@define-condition-type-macro) (set! f4924@f2eaa@define-record-type-macro f2eaa@define-record-type-macro) (set! f4923@f2ea8@define-struct-macro f2ea8@define-struct-macro) (set! f4922@f2ea6@quasisyntax-macro f2ea6@quasisyntax-macro) (set! f4921@f2ea4@quasiquote-macro f2ea4@quasiquote-macro) (set! f4920@f2ea2@syntax-rules-macro f2ea2@syntax-rules-macro) (set! f491f@f2ea0@include-into-macro f2ea0@include-into-macro) (set! f491e@f2e9e@include-macro f2e9e@include-macro) (set! f491d@f2e9c@do-include f2e9c@do-include) (set! f491c@f2e9a@cond-macro f2e9a@cond-macro) (set! f491b@f2e98@and-macro f2e98@and-macro) (set! f491a@f2e96@or-macro f2e96@or-macro) (set! f4919@f2e94@let*-macro f2e94@let*-macro) (set! f4918@f2e92@do-macro f2e92@do-macro) (set! f4917@f2e90@identifier-syntax-macro f2e90@identifier-syntax-macro) (set! f4916@f2e8e@endianness-macro f2e8e@endianness-macro) (set! f4915@f2e8c@assert-macro f2e8c@assert-macro) (set! f4914@f2e8a@delay-macro f2e8a@delay-macro) (set! f4913@f2e88@time-macro f2e88@time-macro) (set! f4912@f2e86@define-enumeration-macro f2e86@define-enumeration-macro) (set! f4911@f2e84@guard-macro f2e84@guard-macro) (set! f4910@f2e82@trace-letrec-syntax-macro f2e82@trace-letrec-syntax-macro) (set! f490f@f2e80@trace-let-syntax-macro f2e80@trace-let-syntax-macro) (set! f490e@f2e7e@trace-let/rec-syntax f2e7e@trace-let/rec-syntax) (set! f490d@f2e7c@trace-define-syntax-macro f2e7c@trace-define-syntax-macro) (set! f490c@f2e7a@trace-define-macro f2e7a@trace-define-macro) (set! f490b@f2e78@trace-lambda-macro f2e78@trace-lambda-macro) (set! f490a@f2e76@let*-values-macro f2e76@let*-values-macro) (set! f4909@f2e74@let-values-macro f2e74@let-values-macro) (set! f4908@f2e72@let-macro f2e72@let-macro) (set! f4907@f2e70@invalid-fmls-error f2e70@invalid-fmls-error) (set! f4906@f2e6e@with-syntax-macro f2e6e@with-syntax-macro) (set! f4905@f2e6c@bless f2e6c@bless) (set! f4904@f2e6a@lambda-transformer f2e6a@lambda-transformer) (set! f4903@f2e68@case-lambda-transformer f2e68@case-lambda-transformer) (set! f4902@f2e66@quote-transformer f2e66@quote-transformer) (set! f4901@f2e64@case-macro f2e64@case-macro) (set! f4900@f2e62@or-transformer f2e62@or-transformer) (set! f48ff@f2e60@and-transformer f2e60@and-transformer) (set! f48fe@f2e5e@if-transformer f2e5e@if-transformer) (set! f48fd@f2e5c@unless-macro f2e5c@unless-macro) (set! f48fc@f2e5a@when-macro f2e5a@when-macro) (set! f48fb@f2e58@record-constructor-descriptor-transformer f2e58@record-constructor-descriptor-transformer) (set! f48fa@f2e56@record-type-descriptor-transformer f2e56@record-type-descriptor-transformer) (set! f48f9@f2e54@type-descriptor-transformer f2e54@type-descriptor-transformer) (set! f48f8@f2e52@fluid-let-syntax-transformer f2e52@fluid-let-syntax-transformer) (set! f48f7@f2e50@letrec*-transformer f2e50@letrec*-transformer) (set! f48f6@f2e4e@letrec-transformer f2e4e@letrec-transformer) (set! f48f5@f2e4c@letrec-helper f2e4c@letrec-helper) (set! f48f4@f2e4a@add-lexicals f2e4a@add-lexicals) (set! f48f3@f2e48@add-lexical f2e48@add-lexical) (set! f48f2@f2e46@set-lexical-mutable! f2e46@set-lexical-mutable!) (set! f48f1@f2e44@lexical-mutable? f2e44@lexical-mutable?) (set! f48f0@f2e42@lexical-var f2e42@lexical-var) (set! f48ef@f2e40@scheme-stx f2e40@scheme-stx) (set! f48ee@f2e3e@scheme-stx-hashtable f2e3e@scheme-stx-hashtable) (set! f48ed@f2e3c@parse-define-syntax f2e3c@parse-define-syntax) (set! f48ec@f2e3a@parse-define f2e3a@parse-define) (set! f48eb@f2ce9@make-eval-transformer f2ce9@make-eval-transformer) (set! f48ea@f2ce7@variable-transformer-procedure f2ce7@variable-transformer-procedure) (set! f48e9@f2ce5@variable-transformer? f2ce5@variable-transformer?) (set! f48e8@f2ce3@make-variable-transformer f2ce3@make-variable-transformer) (set! f48e7@f2ce1@sanitize-binding f2ce1@sanitize-binding) (set! f48e6@f2cd3@syntax-type f2cd3@syntax-type) (set! f48e5@f2cd1@raise-unbound-error f2cd1@raise-unbound-error) (set! f48e4@f2ccf@binding-value f2ccf@binding-value) (set! f48e3@f2ccd@binding-type f2ccd@binding-type) (set! f48e2@f2ccb@make-binding f2ccb@make-binding) (set! f48e1@f2cc9@label->binding f2cc9@label->binding) (set! f48e0@f2cc7@id->real-label f2cc7@id->real-label) (set! f48df@f2cc5@id->label f2cc5@id->label) (set! f48de@f2cc3@same-marks*? f2cc3@same-marks*?) (set! f48dd@f2cc1@stx->datum f2cc1@stx->datum) (set! f48dc@f2cbf@strip f2cbf@strip) (set! f48db@f2cbd@strip-annotations f2cbd@strip-annotations) (set! f48da@f2cbb@self-evaluating? f2cbb@self-evaluating?) (set! f48d9@f2cb9@bound-id-member? f2cb9@bound-id-member?) (set! f48d8@f2cb7@distinct-bound-ids? f2cb7@distinct-bound-ids?) (set! f48d7@f2cb5@valid-bound-ids? f2cb5@valid-bound-ids?) (set! f48d6@f2cb3@free-id=? f2cb3@free-id=?) (set! f48d5@f2cb1@bound-id=? f2cb1@bound-id=?) (set! f48d4@f2caf@same-marks? f2caf@same-marks?) (set! f48d3@f2cad@id->sym f2cad@id->sym) (set! f48d2@f2cab@id? f2cab@id?) (set! f48d1@f2ca9@syntax->list f2ca9@syntax->list) (set! f48d0@f2ca7@syntax-cdr f2ca7@syntax-cdr) (set! f48cf@f2ca5@syntax-car f2ca5@syntax-car) (set! f48ce@f2ca3@syntax-list? f2ca3@syntax-list?) (set! f48cd@f2ca1@syntax-null? f2ca1@syntax-null?) (set! f48cc@f2c9f@syntax-vector? f2c9f@syntax-vector?) (set! f48cb@f2c9d@syntax-pair? f2c9d@syntax-pair?) (set! f48ca@f2c9b@syntax-vector->list f2c9b@syntax-vector->list) (set! f48c9@f2c99@syntax-kind? f2c99@syntax-kind?) (set! f48c8@f2c97@add-subst f2c97@add-subst) (set! f48c7@f2c95@add-mark f2c95@add-mark) (set! f48c6@f2c93@mkstx f2c93@mkstx) (set! f48c5@f2c91@join-wraps f2c91@join-wraps) (set! f48c4@f2c8f@anti-mark? f2c8f@anti-mark?) (set! f48c3@f2c8d@anti-mark f2c8d@anti-mark) (set! f48c2@f2c8b@gen-mark f2c8b@gen-mark) (set! f48c1@f2c89@datum->stx f2c89@datum->stx) (set! f48c0@f2c87@rp f2c87@rp) (set! f48bf@f2c85@set-stx-ae*! f2c85@set-stx-ae*!) (set! f48be@f2c83@set-stx-subst*! f2c83@set-stx-subst*!) (set! f48bd@f2c81@set-stx-mark*! f2c81@set-stx-mark*!) (set! f48bc@f2c7f@set-stx-expr! f2c7f@set-stx-expr!) (set! f48bb@f2c7d@stx-ae* f2c7d@stx-ae*) (set! f48ba@f2c7b@stx-subst* f2c7b@stx-subst*) (set! f48b9@f2c79@stx-mark* f2c79@stx-mark*) (set! f48b8@f2c77@stx-expr f2c77@stx-expr) (set! f48b7@f2c75@make-stx f2c75@make-stx) (set! f48b6@f2c73@stx? f2c73@stx?) (set! f48b5@f2c70@f2c68 f2c70@f2c68) (set! f48b4@f2c6e@f2c69 f2c6e@f2c69) (set! f48b3@f2c6c@f2c67 f2c6c@f2c67) (set! f48b2@f2c66@make-full-rib f2c66@make-full-rib) (set! f48b1@f2c64@unseal-rib! f2c64@unseal-rib!) (set! f48b0@f2c62@seal-rib! f2c62@seal-rib!) (set! f48af@f2c60@make-rib-map f2c60@make-rib-map) (set! f48ae@f2c5e@extend-rib/nc! f2c5e@extend-rib/nc!) (set! f48ad@f2c5c@extend-rib! f2c5c@extend-rib!) (set! f48ac@f2c5a@make-empty-rib f2c5a@make-empty-rib) (set! f48ab@f2c58@set-rib-cache! f2c58@set-rib-cache!) (set! f48aa@f2c56@set-rib-sealed/freq! f2c56@set-rib-sealed/freq!) (set! f48a9@f2c54@set-rib-label*! f2c54@set-rib-label*!) (set! f48a8@f2c52@set-rib-mark**! f2c52@set-rib-mark**!) (set! f48a7@f2c50@set-rib-sym*! f2c50@set-rib-sym*!) (set! f48a6@f2c4e@rib-cache f2c4e@rib-cache) (set! f48a5@f2c4c@rib-sealed/freq f2c4c@rib-sealed/freq) (set! f48a4@f2c4a@rib-label* f2c4a@rib-label*) (set! f48a3@f2c48@rib-mark** f2c48@rib-mark**) (set! f48a2@f2c46@rib-sym* f2c46@rib-sym*) (set! f48a1@f2c44@make-rib f2c44@make-rib) (set! f48a0@f2c42@rib? f2c42@rib?) (set! f489f@f2c3f@f2c37 f2c3f@f2c37) (set! f489e@f2c3d@f2c38 f2c3d@f2c38) (set! f489d@f2c3b@f2c36 f2c3b@f2c36) (set! f489c@f2c35@gen-define-label f2c35@gen-define-label) (set! f489b@f2c33@gen-define-label+loc f2c33@gen-define-label+loc) (set! f489a@f2c31@gen-top-level-label f2c31@gen-top-level-label) (set! f4899@f2c2f@gen-label f2c2f@gen-label) (set! f4898@f2c2d@gen-global f2c2d@gen-global) (set! f4897@f2c2b@gen-lexical f2c2b@gen-lexical) (set! f4896@f2c29@top-marked? f2c29@top-marked?) (set! f4895@f2c27@top-mark* f2c27@top-mark*) (set! f4894@f2c22@set-union f2c22@set-union) (set! f4893@f2c20@set-cons f2c20@set-cons) (set! f4892@f2c1e@file-options-macro f2c1e@file-options-macro) (f2ac5@f295c@current-library-expander f2f81@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (f49a8@f49a3 f49aa@f49a5 f49ac@f49a4 f49af@&condition? f49b1@make-&condition f49b3@&condition-rtd f49b5@&condition-rcd f4a01@f49fc f4a03@f49fe f4a05@f49fd f4a08@p? f4a0a@make-message-condition f4a0c@f49fb f4a0e@message-condition? f4a10@condition-message f4a12@&message-rtd f4a14@&message-rcd f4a1a@f4a15 f4a1c@f4a17 f4a1e@f4a16 f4a21@p? f4a23@make-warning f4a25@warning? f4a27@&warning-rtd f4a29@&warning-rcd f4a2f@f4a2a f4a31@f4a2c f4a33@f4a2b f4a36@p? f4a38@make-serious-condition f4a3a@serious-condition? f4a3c@&serious-rtd f4a3e@&serious-rcd f4a44@f4a3f f4a46@f4a41 f4a48@f4a40 f4a4b@p? f4a4d@make-error f4a4f@error? f4a51@&error-rtd f4a53@&error-rcd f4a59@f4a54 f4a5b@f4a56 f4a5d@f4a55 f4a60@p? f4a62@make-violation f4a64@violation? f4a66@&violation-rtd f4a68@&violation-rcd f4a6e@f4a69 f4a70@f4a6b f4a72@f4a6a f4a75@p? f4a77@make-assertion-violation f4a79@assertion-violation? f4a7b@&assertion-rtd f4a7d@&assertion-rcd f4a85@f4a80 f4a87@f4a82 f4a89@f4a81 f4a8c@p? f4a8e@make-irritants-condition f4a90@f4a7f f4a92@irritants-condition? f4a94@condition-irritants f4a96@&irritants-rtd f4a98@&irritants-rcd f4aa0@f4a9b f4aa2@f4a9d f4aa4@f4a9c f4aa7@p? f4aa9@make-who-condition f4aab@f4a9a f4aad@who-condition? f4aaf@condition-who f4ab1@&who-rtd f4ab3@&who-rcd f4ab9@f4ab4 f4abb@f4ab6 f4abd@f4ab5 f4ac0@p? f4ac2@make-non-continuable-violation f4ac4@non-continuable-violation? f4ac6@&non-continuable-rtd f4ac8@&non-continuable-rcd f4ace@f4ac9 f4ad0@f4acb f4ad2@f4aca f4ad5@p? f4ad7@make-implementation-restriction-violation f4ad9@implementation-restriction-violation? f4adb@&implementation-restriction-rtd f4add@&implementation-restriction-rcd f4ae3@f4ade f4ae5@f4ae0 f4ae7@f4adf f4aea@p? f4aec@make-lexical-violation f4aee@lexical-violation? f4af0@&lexical-rtd f4af2@&lexical-rcd f4afc@f4af7 f4afe@f4af9 f4b00@f4af8 f4b03@p? f4b05@make-syntax-violation f4b07@f4af4 f4b09@f4af6 f4b0b@syntax-violation? f4b0d@syntax-violation-form f4b0f@syntax-violation-subform f4b11@&syntax-rtd f4b13@&syntax-rcd f4b19@f4b14 f4b1b@f4b16 f4b1d@f4b15 f4b20@p? f4b22@make-undefined-violation f4b24@undefined-violation? f4b26@&undefined-rtd f4b28@&undefined-rcd f4b2e@f4b29 f4b30@f4b2b f4b32@f4b2a f4b35@p? f4b37@make-i/o-error f4b39@i/o-error? f4b3b@&i/o-rtd f4b3d@&i/o-rcd f4b43@f4b3e f4b45@f4b40 f4b47@f4b3f f4b4a@p? f4b4c@make-i/o-read-error f4b4e@i/o-read-error? f4b50@&i/o-read-rtd f4b52@&i/o-read-rcd f4b58@f4b53 f4b5a@f4b55 f4b5c@f4b54 f4b5f@p? f4b61@make-i/o-write-error f4b63@i/o-write-error? f4b65@&i/o-write-rtd f4b67@&i/o-write-rcd f4b6f@f4b6a f4b71@f4b6c f4b73@f4b6b f4b76@p? f4b78@make-i/o-invalid-position-error f4b7a@f4b69 f4b7c@i/o-invalid-position-error? f4b7e@i/o-error-position f4b80@&i/o-invalid-position-rtd f4b82@&i/o-invalid-position-rcd f4b8a@f4b85 f4b8c@f4b87 f4b8e@f4b86 f4b91@p? f4b93@make-i/o-filename-error f4b95@f4b84 f4b97@i/o-filename-error? f4b99@i/o-error-filename f4b9b@&i/o-filename-rtd f4b9d@&i/o-filename-rcd f4ba3@f4b9e f4ba5@f4ba0 f4ba7@f4b9f f4baa@p? f4bac@make-i/o-file-protection-error f4bae@i/o-file-protection-error? f4bb0@&i/o-file-protection-rtd f4bb2@&i/o-file-protection-rcd f4bb8@f4bb3 f4bba@f4bb5 f4bbc@f4bb4 f4bbf@p? f4bc1@make-i/o-file-is-read-only-error f4bc3@i/o-file-is-read-only-error? f4bc5@&i/o-file-is-read-only-rtd f4bc7@&i/o-file-is-read-only-rcd f4bcd@f4bc8 f4bcf@f4bca f4bd1@f4bc9 f4bd4@p? f4bd6@make-i/o-file-already-exists-error f4bd8@i/o-file-already-exists-error? f4bda@&i/o-file-already-exists-rtd f4bdc@&i/o-file-already-exists-rcd f4be2@f4bdd f4be4@f4bdf f4be6@f4bde f4be9@p? f4beb@make-i/o-file-does-not-exist-error f4bed@i/o-file-does-not-exist-error? f4bef@&i/o-file-does-not-exist-rtd f4bf1@&i/o-file-does-not-exist-rcd f4bf9@f4bf4 f4bfb@f4bf6 f4bfd@f4bf5 f4c00@p? f4c02@make-i/o-port-error f4c04@f4bf3 f4c06@i/o-port-error? f4c08@i/o-error-port f4c0a@&i/o-port-rtd f4c0c@&i/o-port-rcd f4c12@f4c0d f4c14@f4c0f f4c16@f4c0e f4c19@p? f4c1b@make-i/o-decoding-error f4c1d@i/o-decoding-error? f4c1f@&i/o-decoding-rtd f4c21@&i/o-decoding-rcd f4c29@f4c24 f4c2b@f4c26 f4c2d@f4c25 f4c30@p? f4c32@make-i/o-encoding-error f4c34@f4c23 f4c36@i/o-encoding-error? f4c38@i/o-encoding-error-char f4c3a@&i/o-encoding-rtd f4c3c@&i/o-encoding-rcd f4c42@f4c3d f4c44@f4c3f f4c46@f4c3e f4c49@p? f4c4b@make-no-infinities-violation f4c4d@no-infinities-violation? f4c4f@&no-infinities-rtd f4c51@&no-infinities-rcd f4c57@f4c52 f4c59@f4c54 f4c5b@f4c53 f4c5e@p? f4c60@make-no-nans-violation f4c62@no-nans-violation? f4c64@&no-nans-rtd f4c66@&no-nans-rcd) (begin (set! f49a8@f49a3 (make-record-type-descriptor '&condition '#f 'f49a6 '#f '#f '#())) (set! f49aa@f49a5 '#f) (set! f49ac@f49a4 (make-record-constructor-descriptor f49a8@f49a3 '#f f49aa@f49a5)) (set! f49af@&condition? (record-predicate f49a8@f49a3)) (set! f49b1@make-&condition (record-constructor f49ac@f49a4)) (set! f49b3@&condition-rtd f49a8@f49a3) (set! f49b5@&condition-rcd f49ac@f49a4) (set! f4a01@f49fc (make-record-type-descriptor '&message f49a8@f49a3 'f49ff '#f '#f '#((immutable message)))) (set! f4a03@f49fe '#f) (set! f4a05@f49fd (make-record-constructor-descriptor f4a01@f49fc f49ac@f49a4 f4a03@f49fe)) (set! f4a08@p? (record-predicate f4a01@f49fc)) (set! f4a0a@make-message-condition (record-constructor f4a05@f49fd)) (set! f4a0c@f49fb (record-accessor f4a01@f49fc '0)) (set! f4a0e@message-condition? (condition-predicate f4a01@f49fc)) (set! f4a10@condition-message (condition-accessor f4a01@f49fc f4a0c@f49fb)) (set! f4a12@&message-rtd f4a01@f49fc) (set! f4a14@&message-rcd f4a05@f49fd) (set! f4a1a@f4a15 (make-record-type-descriptor '&warning f49a8@f49a3 'f4a18 '#f '#f '#())) (set! f4a1c@f4a17 '#f) (set! f4a1e@f4a16 (make-record-constructor-descriptor f4a1a@f4a15 f49ac@f49a4 f4a1c@f4a17)) (set! f4a21@p? (record-predicate f4a1a@f4a15)) (set! f4a23@make-warning (record-constructor f4a1e@f4a16)) (set! f4a25@warning? (condition-predicate f4a1a@f4a15)) (set! f4a27@&warning-rtd f4a1a@f4a15) (set! f4a29@&warning-rcd f4a1e@f4a16) (set! f4a2f@f4a2a (make-record-type-descriptor '&serious f49a8@f49a3 'f4a2d '#f '#f '#())) (set! f4a31@f4a2c '#f) (set! f4a33@f4a2b (make-record-constructor-descriptor f4a2f@f4a2a f49ac@f49a4 f4a31@f4a2c)) (set! f4a36@p? (record-predicate f4a2f@f4a2a)) (set! f4a38@make-serious-condition (record-constructor f4a33@f4a2b)) (set! f4a3a@serious-condition? (condition-predicate f4a2f@f4a2a)) (set! f4a3c@&serious-rtd f4a2f@f4a2a) (set! f4a3e@&serious-rcd f4a33@f4a2b) (set! f4a44@f4a3f (make-record-type-descriptor '&error f4a2f@f4a2a 'f4a42 '#f '#f '#())) (set! f4a46@f4a41 '#f) (set! f4a48@f4a40 (make-record-constructor-descriptor f4a44@f4a3f f4a33@f4a2b f4a46@f4a41)) (set! f4a4b@p? (record-predicate f4a44@f4a3f)) (set! f4a4d@make-error (record-constructor f4a48@f4a40)) (set! f4a4f@error? (condition-predicate f4a44@f4a3f)) (set! f4a51@&error-rtd f4a44@f4a3f) (set! f4a53@&error-rcd f4a48@f4a40) (set! f4a59@f4a54 (make-record-type-descriptor '&violation f4a2f@f4a2a 'f4a57 '#f '#f '#())) (set! f4a5b@f4a56 '#f) (set! f4a5d@f4a55 (make-record-constructor-descriptor f4a59@f4a54 f4a33@f4a2b f4a5b@f4a56)) (set! f4a60@p? (record-predicate f4a59@f4a54)) (set! f4a62@make-violation (record-constructor f4a5d@f4a55)) (set! f4a64@violation? (condition-predicate f4a59@f4a54)) (set! f4a66@&violation-rtd f4a59@f4a54) (set! f4a68@&violation-rcd f4a5d@f4a55) (set! f4a6e@f4a69 (make-record-type-descriptor '&assertion f4a59@f4a54 'f4a6c '#f '#f '#())) (set! f4a70@f4a6b '#f) (set! f4a72@f4a6a (make-record-constructor-descriptor f4a6e@f4a69 f4a5d@f4a55 f4a70@f4a6b)) (set! f4a75@p? (record-predicate f4a6e@f4a69)) (set! f4a77@make-assertion-violation (record-constructor f4a72@f4a6a)) (set! f4a79@assertion-violation? (condition-predicate f4a6e@f4a69)) (set! f4a7b@&assertion-rtd f4a6e@f4a69) (set! f4a7d@&assertion-rcd f4a72@f4a6a) (set! f4a85@f4a80 (make-record-type-descriptor '&irritants f49a8@f49a3 'f4a83 '#f '#f '#((immutable irritants)))) (set! f4a87@f4a82 '#f) (set! f4a89@f4a81 (make-record-constructor-descriptor f4a85@f4a80 f49ac@f49a4 f4a87@f4a82)) (set! f4a8c@p? (record-predicate f4a85@f4a80)) (set! f4a8e@make-irritants-condition (record-constructor f4a89@f4a81)) (set! f4a90@f4a7f (record-accessor f4a85@f4a80 '0)) (set! f4a92@irritants-condition? (condition-predicate f4a85@f4a80)) (set! f4a94@condition-irritants (condition-accessor f4a85@f4a80 f4a90@f4a7f)) (set! f4a96@&irritants-rtd f4a85@f4a80) (set! f4a98@&irritants-rcd f4a89@f4a81) (set! f4aa0@f4a9b (make-record-type-descriptor '&who f49a8@f49a3 'f4a9e '#f '#f '#((immutable who)))) (set! f4aa2@f4a9d '#f) (set! f4aa4@f4a9c (make-record-constructor-descriptor f4aa0@f4a9b f49ac@f49a4 f4aa2@f4a9d)) (set! f4aa7@p? (record-predicate f4aa0@f4a9b)) (set! f4aa9@make-who-condition (record-constructor f4aa4@f4a9c)) (set! f4aab@f4a9a (record-accessor f4aa0@f4a9b '0)) (set! f4aad@who-condition? (condition-predicate f4aa0@f4a9b)) (set! f4aaf@condition-who (condition-accessor f4aa0@f4a9b f4aab@f4a9a)) (set! f4ab1@&who-rtd f4aa0@f4a9b) (set! f4ab3@&who-rcd f4aa4@f4a9c) (set! f4ab9@f4ab4 (make-record-type-descriptor '&non-continuable f4a59@f4a54 'f4ab7 '#f '#f '#())) (set! f4abb@f4ab6 '#f) (set! f4abd@f4ab5 (make-record-constructor-descriptor f4ab9@f4ab4 f4a5d@f4a55 f4abb@f4ab6)) (set! f4ac0@p? (record-predicate f4ab9@f4ab4)) (set! f4ac2@make-non-continuable-violation (record-constructor f4abd@f4ab5)) (set! f4ac4@non-continuable-violation? (condition-predicate f4ab9@f4ab4)) (set! f4ac6@&non-continuable-rtd f4ab9@f4ab4) (set! f4ac8@&non-continuable-rcd f4abd@f4ab5) (set! f4ace@f4ac9 (make-record-type-descriptor '&implementation-restriction f4a59@f4a54 'f4acc '#f '#f '#())) (set! f4ad0@f4acb '#f) (set! f4ad2@f4aca (make-record-constructor-descriptor f4ace@f4ac9 f4a5d@f4a55 f4ad0@f4acb)) (set! f4ad5@p? (record-predicate f4ace@f4ac9)) (set! f4ad7@make-implementation-restriction-violation (record-constructor f4ad2@f4aca)) (set! f4ad9@implementation-restriction-violation? (condition-predicate f4ace@f4ac9)) (set! f4adb@&implementation-restriction-rtd f4ace@f4ac9) (set! f4add@&implementation-restriction-rcd f4ad2@f4aca) (set! f4ae3@f4ade (make-record-type-descriptor '&lexical f4a59@f4a54 'f4ae1 '#f '#f '#())) (set! f4ae5@f4ae0 '#f) (set! f4ae7@f4adf (make-record-constructor-descriptor f4ae3@f4ade f4a5d@f4a55 f4ae5@f4ae0)) (set! f4aea@p? (record-predicate f4ae3@f4ade)) (set! f4aec@make-lexical-violation (record-constructor f4ae7@f4adf)) (set! f4aee@lexical-violation? (condition-predicate f4ae3@f4ade)) (set! f4af0@&lexical-rtd f4ae3@f4ade) (set! f4af2@&lexical-rcd f4ae7@f4adf) (set! f4afc@f4af7 (make-record-type-descriptor '&syntax f4a59@f4a54 'f4afa '#f '#f '#((immutable form) (immutable subform)))) (set! f4afe@f4af9 '#f) (set! f4b00@f4af8 (make-record-constructor-descriptor f4afc@f4af7 f4a5d@f4a55 f4afe@f4af9)) (set! f4b03@p? (record-predicate f4afc@f4af7)) (set! f4b05@make-syntax-violation (record-constructor f4b00@f4af8)) (set! f4b07@f4af4 (record-accessor f4afc@f4af7 '0)) (set! f4b09@f4af6 (record-accessor f4afc@f4af7 '1)) (set! f4b0b@syntax-violation? (condition-predicate f4afc@f4af7)) (set! f4b0d@syntax-violation-form (condition-accessor f4afc@f4af7 f4b07@f4af4)) (set! f4b0f@syntax-violation-subform (condition-accessor f4afc@f4af7 f4b09@f4af6)) (set! f4b11@&syntax-rtd f4afc@f4af7) (set! f4b13@&syntax-rcd f4b00@f4af8) (set! f4b19@f4b14 (make-record-type-descriptor '&undefined f4a59@f4a54 'f4b17 '#f '#f '#())) (set! f4b1b@f4b16 '#f) (set! f4b1d@f4b15 (make-record-constructor-descriptor f4b19@f4b14 f4a5d@f4a55 f4b1b@f4b16)) (set! f4b20@p? (record-predicate f4b19@f4b14)) (set! f4b22@make-undefined-violation (record-constructor f4b1d@f4b15)) (set! f4b24@undefined-violation? (condition-predicate f4b19@f4b14)) (set! f4b26@&undefined-rtd f4b19@f4b14) (set! f4b28@&undefined-rcd f4b1d@f4b15) (set! f4b2e@f4b29 (make-record-type-descriptor '&i/o f4a44@f4a3f 'f4b2c '#f '#f '#())) (set! f4b30@f4b2b '#f) (set! f4b32@f4b2a (make-record-constructor-descriptor f4b2e@f4b29 f4a48@f4a40 f4b30@f4b2b)) (set! f4b35@p? (record-predicate f4b2e@f4b29)) (set! f4b37@make-i/o-error (record-constructor f4b32@f4b2a)) (set! f4b39@i/o-error? (condition-predicate f4b2e@f4b29)) (set! f4b3b@&i/o-rtd f4b2e@f4b29) (set! f4b3d@&i/o-rcd f4b32@f4b2a) (set! f4b43@f4b3e (make-record-type-descriptor '&i/o-read f4b2e@f4b29 'f4b41 '#f '#f '#())) (set! f4b45@f4b40 '#f) (set! f4b47@f4b3f (make-record-constructor-descriptor f4b43@f4b3e f4b32@f4b2a f4b45@f4b40)) (set! f4b4a@p? (record-predicate f4b43@f4b3e)) (set! f4b4c@make-i/o-read-error (record-constructor f4b47@f4b3f)) (set! f4b4e@i/o-read-error? (condition-predicate f4b43@f4b3e)) (set! f4b50@&i/o-read-rtd f4b43@f4b3e) (set! f4b52@&i/o-read-rcd f4b47@f4b3f) (set! f4b58@f4b53 (make-record-type-descriptor '&i/o-write f4b2e@f4b29 'f4b56 '#f '#f '#())) (set! f4b5a@f4b55 '#f) (set! f4b5c@f4b54 (make-record-constructor-descriptor f4b58@f4b53 f4b32@f4b2a f4b5a@f4b55)) (set! f4b5f@p? (record-predicate f4b58@f4b53)) (set! f4b61@make-i/o-write-error (record-constructor f4b5c@f4b54)) (set! f4b63@i/o-write-error? (condition-predicate f4b58@f4b53)) (set! f4b65@&i/o-write-rtd f4b58@f4b53) (set! f4b67@&i/o-write-rcd f4b5c@f4b54) (set! f4b6f@f4b6a (make-record-type-descriptor '&i/o-invalid-position f4b2e@f4b29 'f4b6d '#f '#f '#((immutable position)))) (set! f4b71@f4b6c '#f) (set! f4b73@f4b6b (make-record-constructor-descriptor f4b6f@f4b6a f4b32@f4b2a f4b71@f4b6c)) (set! f4b76@p? (record-predicate f4b6f@f4b6a)) (set! f4b78@make-i/o-invalid-position-error (record-constructor f4b73@f4b6b)) (set! f4b7a@f4b69 (record-accessor f4b6f@f4b6a '0)) (set! f4b7c@i/o-invalid-position-error? (condition-predicate f4b6f@f4b6a)) (set! f4b7e@i/o-error-position (condition-accessor f4b6f@f4b6a f4b7a@f4b69)) (set! f4b80@&i/o-invalid-position-rtd f4b6f@f4b6a) (set! f4b82@&i/o-invalid-position-rcd f4b73@f4b6b) (set! f4b8a@f4b85 (make-record-type-descriptor '&i/o-filename f4b2e@f4b29 'f4b88 '#f '#f '#((immutable filename)))) (set! f4b8c@f4b87 '#f) (set! f4b8e@f4b86 (make-record-constructor-descriptor f4b8a@f4b85 f4b32@f4b2a f4b8c@f4b87)) (set! f4b91@p? (record-predicate f4b8a@f4b85)) (set! f4b93@make-i/o-filename-error (record-constructor f4b8e@f4b86)) (set! f4b95@f4b84 (record-accessor f4b8a@f4b85 '0)) (set! f4b97@i/o-filename-error? (condition-predicate f4b8a@f4b85)) (set! f4b99@i/o-error-filename (condition-accessor f4b8a@f4b85 f4b95@f4b84)) (set! f4b9b@&i/o-filename-rtd f4b8a@f4b85) (set! f4b9d@&i/o-filename-rcd f4b8e@f4b86) (set! f4ba3@f4b9e (make-record-type-descriptor '&i/o-file-protection f4b8a@f4b85 'f4ba1 '#f '#f '#())) (set! f4ba5@f4ba0 '#f) (set! f4ba7@f4b9f (make-record-constructor-descriptor f4ba3@f4b9e f4b8e@f4b86 f4ba5@f4ba0)) (set! f4baa@p? (record-predicate f4ba3@f4b9e)) (set! f4bac@make-i/o-file-protection-error (record-constructor f4ba7@f4b9f)) (set! f4bae@i/o-file-protection-error? (condition-predicate f4ba3@f4b9e)) (set! f4bb0@&i/o-file-protection-rtd f4ba3@f4b9e) (set! f4bb2@&i/o-file-protection-rcd f4ba7@f4b9f) (set! f4bb8@f4bb3 (make-record-type-descriptor '&i/o-file-is-read-only f4ba3@f4b9e 'f4bb6 '#f '#f '#())) (set! f4bba@f4bb5 '#f) (set! f4bbc@f4bb4 (make-record-constructor-descriptor f4bb8@f4bb3 f4ba7@f4b9f f4bba@f4bb5)) (set! f4bbf@p? (record-predicate f4bb8@f4bb3)) (set! f4bc1@make-i/o-file-is-read-only-error (record-constructor f4bbc@f4bb4)) (set! f4bc3@i/o-file-is-read-only-error? (condition-predicate f4bb8@f4bb3)) (set! f4bc5@&i/o-file-is-read-only-rtd f4bb8@f4bb3) (set! f4bc7@&i/o-file-is-read-only-rcd f4bbc@f4bb4) (set! f4bcd@f4bc8 (make-record-type-descriptor '&i/o-file-already-exists f4b8a@f4b85 'f4bcb '#f '#f '#())) (set! f4bcf@f4bca '#f) (set! f4bd1@f4bc9 (make-record-constructor-descriptor f4bcd@f4bc8 f4b8e@f4b86 f4bcf@f4bca)) (set! f4bd4@p? (record-predicate f4bcd@f4bc8)) (set! f4bd6@make-i/o-file-already-exists-error (record-constructor f4bd1@f4bc9)) (set! f4bd8@i/o-file-already-exists-error? (condition-predicate f4bcd@f4bc8)) (set! f4bda@&i/o-file-already-exists-rtd f4bcd@f4bc8) (set! f4bdc@&i/o-file-already-exists-rcd f4bd1@f4bc9) (set! f4be2@f4bdd (make-record-type-descriptor '&i/o-file-does-not-exist f4b8a@f4b85 'f4be0 '#f '#f '#())) (set! f4be4@f4bdf '#f) (set! f4be6@f4bde (make-record-constructor-descriptor f4be2@f4bdd f4b8e@f4b86 f4be4@f4bdf)) (set! f4be9@p? (record-predicate f4be2@f4bdd)) (set! f4beb@make-i/o-file-does-not-exist-error (record-constructor f4be6@f4bde)) (set! f4bed@i/o-file-does-not-exist-error? (condition-predicate f4be2@f4bdd)) (set! f4bef@&i/o-file-does-not-exist-rtd f4be2@f4bdd) (set! f4bf1@&i/o-file-does-not-exist-rcd f4be6@f4bde) (set! f4bf9@f4bf4 (make-record-type-descriptor '&i/o-port f4b2e@f4b29 'f4bf7 '#f '#f '#((immutable port)))) (set! f4bfb@f4bf6 '#f) (set! f4bfd@f4bf5 (make-record-constructor-descriptor f4bf9@f4bf4 f4b32@f4b2a f4bfb@f4bf6)) (set! f4c00@p? (record-predicate f4bf9@f4bf4)) (set! f4c02@make-i/o-port-error (record-constructor f4bfd@f4bf5)) (set! f4c04@f4bf3 (record-accessor f4bf9@f4bf4 '0)) (set! f4c06@i/o-port-error? (condition-predicate f4bf9@f4bf4)) (set! f4c08@i/o-error-port (condition-accessor f4bf9@f4bf4 f4c04@f4bf3)) (set! f4c0a@&i/o-port-rtd f4bf9@f4bf4) (set! f4c0c@&i/o-port-rcd f4bfd@f4bf5) (set! f4c12@f4c0d (make-record-type-descriptor '&i/o-decoding f4bf9@f4bf4 'f4c10 '#f '#f '#())) (set! f4c14@f4c0f '#f) (set! f4c16@f4c0e (make-record-constructor-descriptor f4c12@f4c0d f4bfd@f4bf5 f4c14@f4c0f)) (set! f4c19@p? (record-predicate f4c12@f4c0d)) (set! f4c1b@make-i/o-decoding-error (record-constructor f4c16@f4c0e)) (set! f4c1d@i/o-decoding-error? (condition-predicate f4c12@f4c0d)) (set! f4c1f@&i/o-decoding-rtd f4c12@f4c0d) (set! f4c21@&i/o-decoding-rcd f4c16@f4c0e) (set! f4c29@f4c24 (make-record-type-descriptor '&i/o-encoding f4bf9@f4bf4 'f4c27 '#f '#f '#((immutable char)))) (set! f4c2b@f4c26 '#f) (set! f4c2d@f4c25 (make-record-constructor-descriptor f4c29@f4c24 f4bfd@f4bf5 f4c2b@f4c26)) (set! f4c30@p? (record-predicate f4c29@f4c24)) (set! f4c32@make-i/o-encoding-error (record-constructor f4c2d@f4c25)) (set! f4c34@f4c23 (record-accessor f4c29@f4c24 '0)) (set! f4c36@i/o-encoding-error? (condition-predicate f4c29@f4c24)) (set! f4c38@i/o-encoding-error-char (condition-accessor f4c29@f4c24 f4c34@f4c23)) (set! f4c3a@&i/o-encoding-rtd f4c29@f4c24) (set! f4c3c@&i/o-encoding-rcd f4c2d@f4c25) (set! f4c42@f4c3d (make-record-type-descriptor '&no-infinities f4ace@f4ac9 'f4c40 '#f '#f '#())) (set! f4c44@f4c3f '#f) (set! f4c46@f4c3e (make-record-constructor-descriptor f4c42@f4c3d f4ad2@f4aca f4c44@f4c3f)) (set! f4c49@p? (record-predicate f4c42@f4c3d)) (set! f4c4b@make-no-infinities-violation (record-constructor f4c46@f4c3e)) (set! f4c4d@no-infinities-violation? (condition-predicate f4c42@f4c3d)) (set! f4c4f@&no-infinities-rtd f4c42@f4c3d) (set! f4c51@&no-infinities-rcd f4c46@f4c3e) (set! f4c57@f4c52 (make-record-type-descriptor '&no-nans f4ace@f4ac9 'f4c55 '#f '#f '#())) (set! f4c59@f4c54 '#f) (set! f4c5b@f4c53 (make-record-constructor-descriptor f4c57@f4c52 f4ad2@f4aca f4c59@f4c54)) (set! f4c5e@p? (record-predicate f4c57@f4c52)) (set! f4c60@make-no-nans-violation (record-constructor f4c5b@f4c53)) (set! f4c62@no-nans-violation? (condition-predicate f4c57@f4c52)) (set! f4c64@&no-nans-rtd f4c57@f4c52) (set! f4c66@&no-nans-rcd f4c5b@f4c53) (begin (set! f4d57@f4c66@&no-nans-rcd f4c66@&no-nans-rcd) (set! f4d56@f4c64@&no-nans-rtd f4c64@&no-nans-rtd) (set! f4d55@f4c62@no-nans-violation? f4c62@no-nans-violation?) (set! f4d54@f4c60@make-no-nans-violation f4c60@make-no-nans-violation) (set! f4d53@f4c5e@p? f4c5e@p?) (set! f4d52@f4c5b@f4c53 f4c5b@f4c53) (set! f4d51@f4c59@f4c54 f4c59@f4c54) (set! f4d50@f4c57@f4c52 f4c57@f4c52) (set! f4d4f@f4c51@&no-infinities-rcd f4c51@&no-infinities-rcd) (set! f4d4e@f4c4f@&no-infinities-rtd f4c4f@&no-infinities-rtd) (set! f4d4d@f4c4d@no-infinities-violation? f4c4d@no-infinities-violation?) (set! f4d4c@f4c4b@make-no-infinities-violation f4c4b@make-no-infinities-violation) (set! f4d4b@f4c49@p? f4c49@p?) (set! f4d4a@f4c46@f4c3e f4c46@f4c3e) (set! f4d49@f4c44@f4c3f f4c44@f4c3f) (set! f4d48@f4c42@f4c3d f4c42@f4c3d) (set! f4d47@f4c3c@&i/o-encoding-rcd f4c3c@&i/o-encoding-rcd) (set! f4d46@f4c3a@&i/o-encoding-rtd f4c3a@&i/o-encoding-rtd) (set! f4d45@f4c38@i/o-encoding-error-char f4c38@i/o-encoding-error-char) (set! f4d44@f4c36@i/o-encoding-error? f4c36@i/o-encoding-error?) (set! f4d43@f4c34@f4c23 f4c34@f4c23) (set! f4d42@f4c32@make-i/o-encoding-error f4c32@make-i/o-encoding-error) (set! f4d41@f4c30@p? f4c30@p?) (set! f4d40@f4c2d@f4c25 f4c2d@f4c25) (set! f4d3f@f4c2b@f4c26 f4c2b@f4c26) (set! f4d3e@f4c29@f4c24 f4c29@f4c24) (set! f4d3d@f4c21@&i/o-decoding-rcd f4c21@&i/o-decoding-rcd) (set! f4d3c@f4c1f@&i/o-decoding-rtd f4c1f@&i/o-decoding-rtd) (set! f4d3b@f4c1d@i/o-decoding-error? f4c1d@i/o-decoding-error?) (set! f4d3a@f4c1b@make-i/o-decoding-error f4c1b@make-i/o-decoding-error) (set! f4d39@f4c19@p? f4c19@p?) (set! f4d38@f4c16@f4c0e f4c16@f4c0e) (set! f4d37@f4c14@f4c0f f4c14@f4c0f) (set! f4d36@f4c12@f4c0d f4c12@f4c0d) (set! f4d35@f4c0c@&i/o-port-rcd f4c0c@&i/o-port-rcd) (set! f4d34@f4c0a@&i/o-port-rtd f4c0a@&i/o-port-rtd) (set! f4d33@f4c08@i/o-error-port f4c08@i/o-error-port) (set! f4d32@f4c06@i/o-port-error? f4c06@i/o-port-error?) (set! f4d31@f4c04@f4bf3 f4c04@f4bf3) (set! f4d30@f4c02@make-i/o-port-error f4c02@make-i/o-port-error) (set! f4d2f@f4c00@p? f4c00@p?) (set! f4d2e@f4bfd@f4bf5 f4bfd@f4bf5) (set! f4d2d@f4bfb@f4bf6 f4bfb@f4bf6) (set! f4d2c@f4bf9@f4bf4 f4bf9@f4bf4) (set! f4d2b@f4bf1@&i/o-file-does-not-exist-rcd f4bf1@&i/o-file-does-not-exist-rcd) (set! f4d2a@f4bef@&i/o-file-does-not-exist-rtd f4bef@&i/o-file-does-not-exist-rtd) (set! f4d29@f4bed@i/o-file-does-not-exist-error? f4bed@i/o-file-does-not-exist-error?) (set! f4d28@f4beb@make-i/o-file-does-not-exist-error f4beb@make-i/o-file-does-not-exist-error) (set! f4d27@f4be9@p? f4be9@p?) (set! f4d26@f4be6@f4bde f4be6@f4bde) (set! f4d25@f4be4@f4bdf f4be4@f4bdf) (set! f4d24@f4be2@f4bdd f4be2@f4bdd) (set! f4d23@f4bdc@&i/o-file-already-exists-rcd f4bdc@&i/o-file-already-exists-rcd) (set! f4d22@f4bda@&i/o-file-already-exists-rtd f4bda@&i/o-file-already-exists-rtd) (set! f4d21@f4bd8@i/o-file-already-exists-error? f4bd8@i/o-file-already-exists-error?) (set! f4d20@f4bd6@make-i/o-file-already-exists-error f4bd6@make-i/o-file-already-exists-error) (set! f4d1f@f4bd4@p? f4bd4@p?) (set! f4d1e@f4bd1@f4bc9 f4bd1@f4bc9) (set! f4d1d@f4bcf@f4bca f4bcf@f4bca) (set! f4d1c@f4bcd@f4bc8 f4bcd@f4bc8) (set! f4d1b@f4bc7@&i/o-file-is-read-only-rcd f4bc7@&i/o-file-is-read-only-rcd) (set! f4d1a@f4bc5@&i/o-file-is-read-only-rtd f4bc5@&i/o-file-is-read-only-rtd) (set! f4d19@f4bc3@i/o-file-is-read-only-error? f4bc3@i/o-file-is-read-only-error?) (set! f4d18@f4bc1@make-i/o-file-is-read-only-error f4bc1@make-i/o-file-is-read-only-error) (set! f4d17@f4bbf@p? f4bbf@p?) (set! f4d16@f4bbc@f4bb4 f4bbc@f4bb4) (set! f4d15@f4bba@f4bb5 f4bba@f4bb5) (set! f4d14@f4bb8@f4bb3 f4bb8@f4bb3) (set! f4d13@f4bb2@&i/o-file-protection-rcd f4bb2@&i/o-file-protection-rcd) (set! f4d12@f4bb0@&i/o-file-protection-rtd f4bb0@&i/o-file-protection-rtd) (set! f4d11@f4bae@i/o-file-protection-error? f4bae@i/o-file-protection-error?) (set! f4d10@f4bac@make-i/o-file-protection-error f4bac@make-i/o-file-protection-error) (set! f4d0f@f4baa@p? f4baa@p?) (set! f4d0e@f4ba7@f4b9f f4ba7@f4b9f) (set! f4d0d@f4ba5@f4ba0 f4ba5@f4ba0) (set! f4d0c@f4ba3@f4b9e f4ba3@f4b9e) (set! f4d0b@f4b9d@&i/o-filename-rcd f4b9d@&i/o-filename-rcd) (set! f4d0a@f4b9b@&i/o-filename-rtd f4b9b@&i/o-filename-rtd) (set! f4d09@f4b99@i/o-error-filename f4b99@i/o-error-filename) (set! f4d08@f4b97@i/o-filename-error? f4b97@i/o-filename-error?) (set! f4d07@f4b95@f4b84 f4b95@f4b84) (set! f4d06@f4b93@make-i/o-filename-error f4b93@make-i/o-filename-error) (set! f4d05@f4b91@p? f4b91@p?) (set! f4d04@f4b8e@f4b86 f4b8e@f4b86) (set! f4d03@f4b8c@f4b87 f4b8c@f4b87) (set! f4d02@f4b8a@f4b85 f4b8a@f4b85) (set! f4d01@f4b82@&i/o-invalid-position-rcd f4b82@&i/o-invalid-position-rcd) (set! f4d00@f4b80@&i/o-invalid-position-rtd f4b80@&i/o-invalid-position-rtd) (set! f4cff@f4b7e@i/o-error-position f4b7e@i/o-error-position) (set! f4cfe@f4b7c@i/o-invalid-position-error? f4b7c@i/o-invalid-position-error?) (set! f4cfd@f4b7a@f4b69 f4b7a@f4b69) (set! f4cfc@f4b78@make-i/o-invalid-position-error f4b78@make-i/o-invalid-position-error) (set! f4cfb@f4b76@p? f4b76@p?) (set! f4cfa@f4b73@f4b6b f4b73@f4b6b) (set! f4cf9@f4b71@f4b6c f4b71@f4b6c) (set! f4cf8@f4b6f@f4b6a f4b6f@f4b6a) (set! f4cf7@f4b67@&i/o-write-rcd f4b67@&i/o-write-rcd) (set! f4cf6@f4b65@&i/o-write-rtd f4b65@&i/o-write-rtd) (set! f4cf5@f4b63@i/o-write-error? f4b63@i/o-write-error?) (set! f4cf4@f4b61@make-i/o-write-error f4b61@make-i/o-write-error) (set! f4cf3@f4b5f@p? f4b5f@p?) (set! f4cf2@f4b5c@f4b54 f4b5c@f4b54) (set! f4cf1@f4b5a@f4b55 f4b5a@f4b55) (set! f4cf0@f4b58@f4b53 f4b58@f4b53) (set! f4cef@f4b52@&i/o-read-rcd f4b52@&i/o-read-rcd) (set! f4cee@f4b50@&i/o-read-rtd f4b50@&i/o-read-rtd) (set! f4ced@f4b4e@i/o-read-error? f4b4e@i/o-read-error?) (set! f4cec@f4b4c@make-i/o-read-error f4b4c@make-i/o-read-error) (set! f4ceb@f4b4a@p? f4b4a@p?) (set! f4cea@f4b47@f4b3f f4b47@f4b3f) (set! f4ce9@f4b45@f4b40 f4b45@f4b40) (set! f4ce8@f4b43@f4b3e f4b43@f4b3e) (set! f4ce7@f4b3d@&i/o-rcd f4b3d@&i/o-rcd) (set! f4ce6@f4b3b@&i/o-rtd f4b3b@&i/o-rtd) (set! f4ce5@f4b39@i/o-error? f4b39@i/o-error?) (set! f4ce4@f4b37@make-i/o-error f4b37@make-i/o-error) (set! f4ce3@f4b35@p? f4b35@p?) (set! f4ce2@f4b32@f4b2a f4b32@f4b2a) (set! f4ce1@f4b30@f4b2b f4b30@f4b2b) (set! f4ce0@f4b2e@f4b29 f4b2e@f4b29) (set! f4cdf@f4b28@&undefined-rcd f4b28@&undefined-rcd) (set! f4cde@f4b26@&undefined-rtd f4b26@&undefined-rtd) (set! f4cdd@f4b24@undefined-violation? f4b24@undefined-violation?) (set! f4cdc@f4b22@make-undefined-violation f4b22@make-undefined-violation) (set! f4cdb@f4b20@p? f4b20@p?) (set! f4cda@f4b1d@f4b15 f4b1d@f4b15) (set! f4cd9@f4b1b@f4b16 f4b1b@f4b16) (set! f4cd8@f4b19@f4b14 f4b19@f4b14) (set! f4cd7@f4b13@&syntax-rcd f4b13@&syntax-rcd) (set! f4cd6@f4b11@&syntax-rtd f4b11@&syntax-rtd) (set! f4cd5@f4b0f@syntax-violation-subform f4b0f@syntax-violation-subform) (set! f4cd4@f4b0d@syntax-violation-form f4b0d@syntax-violation-form) (set! f4cd3@f4b0b@syntax-violation? f4b0b@syntax-violation?) (set! f4cd2@f4b09@f4af6 f4b09@f4af6) (set! f4cd1@f4b07@f4af4 f4b07@f4af4) (set! f4cd0@f4b05@make-syntax-violation f4b05@make-syntax-violation) (set! f4ccf@f4b03@p? f4b03@p?) (set! f4cce@f4b00@f4af8 f4b00@f4af8) (set! f4ccd@f4afe@f4af9 f4afe@f4af9) (set! f4ccc@f4afc@f4af7 f4afc@f4af7) (set! f4ccb@f4af2@&lexical-rcd f4af2@&lexical-rcd) (set! f4cca@f4af0@&lexical-rtd f4af0@&lexical-rtd) (set! f4cc9@f4aee@lexical-violation? f4aee@lexical-violation?) (set! f4cc8@f4aec@make-lexical-violation f4aec@make-lexical-violation) (set! f4cc7@f4aea@p? f4aea@p?) (set! f4cc6@f4ae7@f4adf f4ae7@f4adf) (set! f4cc5@f4ae5@f4ae0 f4ae5@f4ae0) (set! f4cc4@f4ae3@f4ade f4ae3@f4ade) (set! f4cc3@f4add@&implementation-restriction-rcd f4add@&implementation-restriction-rcd) (set! f4cc2@f4adb@&implementation-restriction-rtd f4adb@&implementation-restriction-rtd) (set! f4cc1@f4ad9@implementation-restriction-violation? f4ad9@implementation-restriction-violation?) (set! f4cc0@f4ad7@make-implementation-restriction-violation f4ad7@make-implementation-restriction-violation) (set! f4cbf@f4ad5@p? f4ad5@p?) (set! f4cbe@f4ad2@f4aca f4ad2@f4aca) (set! f4cbd@f4ad0@f4acb f4ad0@f4acb) (set! f4cbc@f4ace@f4ac9 f4ace@f4ac9) (set! f4cbb@f4ac8@&non-continuable-rcd f4ac8@&non-continuable-rcd) (set! f4cba@f4ac6@&non-continuable-rtd f4ac6@&non-continuable-rtd) (set! f4cb9@f4ac4@non-continuable-violation? f4ac4@non-continuable-violation?) (set! f4cb8@f4ac2@make-non-continuable-violation f4ac2@make-non-continuable-violation) (set! f4cb7@f4ac0@p? f4ac0@p?) (set! f4cb6@f4abd@f4ab5 f4abd@f4ab5) (set! f4cb5@f4abb@f4ab6 f4abb@f4ab6) (set! f4cb4@f4ab9@f4ab4 f4ab9@f4ab4) (set! f4cb3@f4ab3@&who-rcd f4ab3@&who-rcd) (set! f4cb2@f4ab1@&who-rtd f4ab1@&who-rtd) (set! f4cb1@f4aaf@condition-who f4aaf@condition-who) (set! f4cb0@f4aad@who-condition? f4aad@who-condition?) (set! f4caf@f4aab@f4a9a f4aab@f4a9a) (set! f4cae@f4aa9@make-who-condition f4aa9@make-who-condition) (set! f4cad@f4aa7@p? f4aa7@p?) (set! f4cac@f4aa4@f4a9c f4aa4@f4a9c) (set! f4cab@f4aa2@f4a9d f4aa2@f4a9d) (set! f4caa@f4aa0@f4a9b f4aa0@f4a9b) (set! f4ca9@f4a98@&irritants-rcd f4a98@&irritants-rcd) (set! f4ca8@f4a96@&irritants-rtd f4a96@&irritants-rtd) (set! f4ca7@f4a94@condition-irritants f4a94@condition-irritants) (set! f4ca6@f4a92@irritants-condition? f4a92@irritants-condition?) (set! f4ca5@f4a90@f4a7f f4a90@f4a7f) (set! f4ca4@f4a8e@make-irritants-condition f4a8e@make-irritants-condition) (set! f4ca3@f4a8c@p? f4a8c@p?) (set! f4ca2@f4a89@f4a81 f4a89@f4a81) (set! f4ca1@f4a87@f4a82 f4a87@f4a82) (set! f4ca0@f4a85@f4a80 f4a85@f4a80) (set! f4c9f@f4a7d@&assertion-rcd f4a7d@&assertion-rcd) (set! f4c9e@f4a7b@&assertion-rtd f4a7b@&assertion-rtd) (set! f4c9d@f4a79@assertion-violation? f4a79@assertion-violation?) (set! f4c9c@f4a77@make-assertion-violation f4a77@make-assertion-violation) (set! f4c9b@f4a75@p? f4a75@p?) (set! f4c9a@f4a72@f4a6a f4a72@f4a6a) (set! f4c99@f4a70@f4a6b f4a70@f4a6b) (set! f4c98@f4a6e@f4a69 f4a6e@f4a69) (set! f4c97@f4a68@&violation-rcd f4a68@&violation-rcd) (set! f4c96@f4a66@&violation-rtd f4a66@&violation-rtd) (set! f4c95@f4a64@violation? f4a64@violation?) (set! f4c94@f4a62@make-violation f4a62@make-violation) (set! f4c93@f4a60@p? f4a60@p?) (set! f4c92@f4a5d@f4a55 f4a5d@f4a55) (set! f4c91@f4a5b@f4a56 f4a5b@f4a56) (set! f4c90@f4a59@f4a54 f4a59@f4a54) (set! f4c8f@f4a53@&error-rcd f4a53@&error-rcd) (set! f4c8e@f4a51@&error-rtd f4a51@&error-rtd) (set! f4c8d@f4a4f@error? f4a4f@error?) (set! f4c8c@f4a4d@make-error f4a4d@make-error) (set! f4c8b@f4a4b@p? f4a4b@p?) (set! f4c8a@f4a48@f4a40 f4a48@f4a40) (set! f4c89@f4a46@f4a41 f4a46@f4a41) (set! f4c88@f4a44@f4a3f f4a44@f4a3f) (set! f4c87@f4a3e@&serious-rcd f4a3e@&serious-rcd) (set! f4c86@f4a3c@&serious-rtd f4a3c@&serious-rtd) (set! f4c85@f4a3a@serious-condition? f4a3a@serious-condition?) (set! f4c84@f4a38@make-serious-condition f4a38@make-serious-condition) (set! f4c83@f4a36@p? f4a36@p?) (set! f4c82@f4a33@f4a2b f4a33@f4a2b) (set! f4c81@f4a31@f4a2c f4a31@f4a2c) (set! f4c80@f4a2f@f4a2a f4a2f@f4a2a) (set! f4c7f@f4a29@&warning-rcd f4a29@&warning-rcd) (set! f4c7e@f4a27@&warning-rtd f4a27@&warning-rtd) (set! f4c7d@f4a25@warning? f4a25@warning?) (set! f4c7c@f4a23@make-warning f4a23@make-warning) (set! f4c7b@f4a21@p? f4a21@p?) (set! f4c7a@f4a1e@f4a16 f4a1e@f4a16) (set! f4c79@f4a1c@f4a17 f4a1c@f4a17) (set! f4c78@f4a1a@f4a15 f4a1a@f4a15) (set! f4c77@f4a14@&message-rcd f4a14@&message-rcd) (set! f4c76@f4a12@&message-rtd f4a12@&message-rtd) (set! f4c75@f4a10@condition-message f4a10@condition-message) (set! f4c74@f4a0e@message-condition? f4a0e@message-condition?) (set! f4c73@f4a0c@f49fb f4a0c@f49fb) (set! f4c72@f4a0a@make-message-condition f4a0a@make-message-condition) (set! f4c71@f4a08@p? f4a08@p?) (set! f4c70@f4a05@f49fd f4a05@f49fd) (set! f4c6f@f4a03@f49fe f4a03@f49fe) (set! f4c6e@f4a01@f49fc f4a01@f49fc) (set! f4c6d@f49b5@&condition-rcd f49b5@&condition-rcd) (set! f4c6c@f49b3@&condition-rtd f49b3@&condition-rtd) (set! f4c6b@f49b1@make-&condition f49b1@make-&condition) (set! f4c6a@f49af@&condition? f49af@&condition?) (set! f4c69@f49ac@f49a4 f49ac@f49a4) (set! f4c68@f49aa@f49a5 f49aa@f49a5) (set! f4c67@f49a8@f49a3 f49a8@f49a3)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (f28a6@f285b@current-primitive-locations (lambda (f515d@x) ((lambda (f515f@t) (if f515f@t (cdr f515f@t) '#f)) (assq f515d@x '((&no-nans-rcd . f4d57@f4c66@&no-nans-rcd) (&no-nans-rtd . f4d56@f4c64@&no-nans-rtd) (&no-infinities-rcd . f4d4f@f4c51@&no-infinities-rcd) (&no-infinities-rtd . f4d4e@f4c4f@&no-infinities-rtd) (&i/o-encoding-rcd . f4d47@f4c3c@&i/o-encoding-rcd) (&i/o-encoding-rtd . f4d46@f4c3a@&i/o-encoding-rtd) (&i/o-decoding-rcd . f4d3d@f4c21@&i/o-decoding-rcd) (&i/o-decoding-rtd . f4d3c@f4c1f@&i/o-decoding-rtd) (&i/o-port-rcd . f4d35@f4c0c@&i/o-port-rcd) (&i/o-port-rtd . f4d34@f4c0a@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . f4d2b@f4bf1@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . f4d2a@f4bef@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . f4d23@f4bdc@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . f4d22@f4bda@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . f4d1b@f4bc7@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . f4d1a@f4bc5@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . f4d13@f4bb2@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . f4d12@f4bb0@&i/o-file-protection-rtd) (&i/o-filename-rcd . f4d0b@f4b9d@&i/o-filename-rcd) (&i/o-filename-rtd . f4d0a@f4b9b@&i/o-filename-rtd) (&i/o-invalid-position-rcd . f4d01@f4b82@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . f4d00@f4b80@&i/o-invalid-position-rtd) (&i/o-write-rcd . f4cf7@f4b67@&i/o-write-rcd) (&i/o-write-rtd . f4cf6@f4b65@&i/o-write-rtd) (&i/o-read-rcd . f4cef@f4b52@&i/o-read-rcd) (&i/o-read-rtd . f4cee@f4b50@&i/o-read-rtd) (&i/o-rcd . f4ce7@f4b3d@&i/o-rcd) (&i/o-rtd . f4ce6@f4b3b@&i/o-rtd) (&undefined-rcd . f4cdf@f4b28@&undefined-rcd) (&undefined-rtd . f4cde@f4b26@&undefined-rtd) (&syntax-rcd . f4cd7@f4b13@&syntax-rcd) (&syntax-rtd . f4cd6@f4b11@&syntax-rtd) (&lexical-rcd . f4ccb@f4af2@&lexical-rcd) (&lexical-rtd . f4cca@f4af0@&lexical-rtd) (&implementation-restriction-rcd . f4cc3@f4add@&implementation-restriction-rcd) (&implementation-restriction-rtd . f4cc2@f4adb@&implementation-restriction-rtd) (&non-continuable-rcd . f4cbb@f4ac8@&non-continuable-rcd) (&non-continuable-rtd . f4cba@f4ac6@&non-continuable-rtd) (&who-rcd . f4cb3@f4ab3@&who-rcd) (&who-rtd . f4cb2@f4ab1@&who-rtd) (&irritants-rcd . f4ca9@f4a98@&irritants-rcd) (&irritants-rtd . f4ca8@f4a96@&irritants-rtd) (&assertion-rcd . f4c9f@f4a7d@&assertion-rcd) (&assertion-rtd . f4c9e@f4a7b@&assertion-rtd) (&violation-rcd . f4c97@f4a68@&violation-rcd) (&violation-rtd . f4c96@f4a66@&violation-rtd) (&error-rcd . f4c8f@f4a53@&error-rcd) (&error-rtd . f4c8e@f4a51@&error-rtd) (&serious-rcd . f4c87@f4a3e@&serious-rcd) (&serious-rtd . f4c86@f4a3c@&serious-rtd) (&warning-rcd . f4c7f@f4a29@&warning-rcd) (&warning-rtd . f4c7e@f4a27@&warning-rtd) (&message-rcd . f4c77@f4a14@&message-rcd) (&message-rtd . f4c76@f4a12@&message-rtd) (&condition-rcd . f4c6d@f49b5@&condition-rcd) (&condition-rtd . f4c6c@f49b3@&condition-rtd) (syntax-error . f4995@f2f9b@syntax-error) (syntax-dispatch . f492a@f2eb6@syntax-dispatch) (load . f4e62@f4d73@load) (interaction-environment . f499d@f2fab@interaction-environment) (library-path . f2abd@f294c@library-path) (make-parameter . f2855@f277f@make-parameter) (make-variable-transformer . f48e8@f2ce3@make-variable-transformer) (identifier? . f4998@f2fa1@identifier?) (generate-temporaries . f498e@f2f8d@generate-temporaries) (free-identifier=? . f498f@f2f8f@free-identifier=?) (syntax->datum . f499a@f2fa5@syntax->datum) (datum->syntax . f4999@f2fa3@datum->syntax) (bound-identifier=? . f4990@f2f91@bound-identifier=?) (make-i/o-write-error . f4cf4@f4b61@make-i/o-write-error) (make-i/o-read-error . f4cec@f4b4c@make-i/o-read-error) (make-i/o-port-error . f4d30@f4c02@make-i/o-port-error) (make-i/o-invalid-position-error . f4cfc@f4b78@make-i/o-invalid-position-error) (make-i/o-filename-error . f4d06@f4b93@make-i/o-filename-error) (make-i/o-file-protection-error . f4d10@f4bac@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . f4d18@f4bc1@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . f4d28@f4beb@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . f4d20@f4bd6@make-i/o-file-already-exists-error) (make-i/o-error . f4ce4@f4b37@make-i/o-error) (make-i/o-encoding-error . f4d42@f4c32@make-i/o-encoding-error) (make-i/o-decoding-error . f4d3a@f4c1b@make-i/o-decoding-error) (i/o-write-error? . f4cf5@f4b63@i/o-write-error?) (i/o-read-error? . f4ced@f4b4e@i/o-read-error?) (i/o-port-error? . f4d32@f4c06@i/o-port-error?) (i/o-invalid-position-error? . f4cfe@f4b7c@i/o-invalid-position-error?) (i/o-filename-error? . f4d08@f4b97@i/o-filename-error?) (i/o-file-protection-error? . f4d11@f4bae@i/o-file-protection-error?) (i/o-file-is-read-only-error? . f4d19@f4bc3@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . f4d29@f4bed@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . f4d21@f4bd8@i/o-file-already-exists-error?) (i/o-error? . f4ce5@f4b39@i/o-error?) (i/o-error-position . f4cff@f4b7e@i/o-error-position) (i/o-error-port . f4d33@f4c08@i/o-error-port) (i/o-error-filename . f4d09@f4b99@i/o-error-filename) (i/o-encoding-error? . f4d44@f4c36@i/o-encoding-error?) (i/o-encoding-error-char . f4d45@f4c38@i/o-encoding-error-char) (i/o-decoding-error? . f4d3b@f4c1d@i/o-decoding-error?) (scheme-report-environment . f4985@f2f7b@scheme-report-environment) (null-environment . f4984@f2f79@null-environment) (command-line . f4e5f@f4d6d@command-line) (eval . f4987@f2f7f@eval) (environment . f4983@f2f77@environment) (who-condition? . f4cb0@f4aad@who-condition?) (warning? . f4c7d@f4a25@warning?) (violation? . f4c95@f4a64@violation?) (undefined-violation? . f4cdd@f4b24@undefined-violation?) (syntax-violation? . f4cd3@f4b0b@syntax-violation?) (syntax-violation-subform . f4cd5@f4b0f@syntax-violation-subform) (syntax-violation-form . f4cd4@f4b0d@syntax-violation-form) (syntax-violation . f4997@f2f9f@syntax-violation) (serious-condition? . f4c85@f4a3a@serious-condition?) (non-continuable-violation? . f4cb9@f4ac4@non-continuable-violation?) (message-condition? . f4c74@f4a0e@message-condition?) (make-who-condition . f4cae@f4aa9@make-who-condition) (make-warning . f4c7c@f4a23@make-warning) (make-violation . f4c94@f4a62@make-violation) (make-undefined-violation . f4cdc@f4b22@make-undefined-violation) (make-syntax-violation . f4cd0@f4b05@make-syntax-violation) (make-serious-condition . f4c84@f4a38@make-serious-condition) (make-non-continuable-violation . f4cb8@f4ac2@make-non-continuable-violation) (make-message-condition . f4c72@f4a0a@make-message-condition) (make-lexical-violation . f4cc8@f4aec@make-lexical-violation) (make-irritants-condition . f4ca4@f4a8e@make-irritants-condition) (make-implementation-restriction-violation . f4cc0@f4ad7@make-implementation-restriction-violation) (make-error . f4c8c@f4a4d@make-error) (make-assertion-violation . f4c9c@f4a77@make-assertion-violation) (lexical-violation? . f4cc9@f4aee@lexical-violation?) (irritants-condition? . f4ca6@f4a92@irritants-condition?) (implementation-restriction-violation? . f4cc1@f4ad9@implementation-restriction-violation?) (error? . f4c8d@f4a4f@error?) (condition-who . f4cb1@f4aaf@condition-who) (condition-message . f4c75@f4a10@condition-message) (condition-irritants . f4ca7@f4a94@condition-irritants) (assertion-violation? . f4c9d@f4a79@assertion-violation?) (no-nans-violation? . f4d55@f4c62@no-nans-violation?) (no-infinities-violation? . f4d4d@f4c4d@no-infinities-violation?) (make-no-nans-violation . f4d54@f4c60@make-no-nans-violation) (make-no-infinities-violation . f4d4c@f4c4b@make-no-infinities-violation) (assertion-error . f4994@f2f99@assertion-error)))))) (f2acd@f296c@install-library 'f513a '(mosh interaction) '() '() '() '() '((regexp? . f5132) (alist->eq-hash-table . f512f) (format . f512c) (string-split . f5121) (call-process . f511b) (set-current-directory! . f5117) (expand-path . f5116) (current-directory . f5115) (%spawn . f5114) (%waitpid . f5113) (%ffi-supported? . f5112) (%ffi-pointer-ref . f5111) (%ffi-pointer->string . f5110) (%ffi-call->string-or-zero . f510f) (%ffi-call->double . f510e) (%ffi-call->void* . f510d) (%ffi-call->void . f510c) (%ffi-call->int . f510b) (%ffi-lookup . f510a) (%ffi-open . f5109) (%fork . f5108) (%pipe . f5107) (p . f5106) (string-upcase . f50e8) (string-titlecase . f50e7) (string-normalize-nfkd . f50e6) (string-normalize-nfkc . f50e5) (string-normalize-nfd . f50e4) (string-normalize-nfc . f50e3) (string-foldcase . f50e2) (string-downcase . f50e1) (string-ci>? . f50e0) (string-ci>=? . f50df) (string-ci=? . f50de) (string-ci<? . f50dd) (string-ci<=? . f50dc) (char-whitespace? . f50db) (char-upper-case? . f50da) (char-title-case? . f50d9) (char-numeric? . f50d8) (char-lower-case? . f50d7) (char-general-category . f50d6) (char-upcase . f50d5) (char-titlecase . f50d4) (char-foldcase . f50d3) (char-downcase . f50d2) (char-ci>? . f50d1) (char-ci>=? . f50d0) (char-ci=? . f50cf) (char-ci<? . f50ce) (char-ci<=? . f50cd) (char-alphabetic? . f50cc) (make-variable-transformer . f2ce2) (identifier? . f2fa0) (generate-temporaries . f2f8c) (free-identifier=? . f2f8e) (syntax->datum . f2fa4) (datum->syntax . f2fa2) (bound-identifier=? . f2f90) (record-type-descriptor? . f50cb) (record-predicate . f50ca) (record-mutator . f50c9) (record-constructor . f50c8) (record-accessor . f50c7) (make-record-type-descriptor . f50c6) (make-record-constructor-descriptor . f50c5) (record? . f50c4) (record-type-uid . f50c3) (record-type-sealed? . f50c2) (record-type-parent . f50c1) (record-type-opaque? . f50c0) (record-type-name . f50bf) (record-type-generative? . f50be) (record-type-field-names . f50bd) (record-rtd . f50bc) (record-field-mutable? . f50bb) (delete-file . f50ba) (file-exists? . f50b9) (vector-sort! . f50b8) (vector-sort . f50b7) (list-sort . f50b6) (symbol-hash . f50b5) (string-ci-hash . f50b4) (string-hash . f50b3) (equal-hash . f50b2) (hashtable-equivalence-function . f50b1) (make-hashtable . f50b0) (hashtable-hash-function . f50af) (make-eqv-hashtable . f50ae) (make-eq-hashtable . f50ad) (hashtable? . f50ac) (hashtable-update! . f50ab) (hashtable-size . f50aa) (hashtable-set! . f50a9) (hashtable-ref . f50a8) (hashtable-mutable? . f50a7) (hashtable-keys . f50a6) (hashtable-entries . f50a5) (hashtable-delete! . f50a4) (hashtable-copy . f50a3) (hashtable-contains? . f50a2) (hashtable-clear! . f50a1) (call-with-output-file . f50a0) (call-with-input-file . f509f) (write-char . f509e) (write . f509d) (with-output-to-file . f509c) (with-input-from-file . f509b) (read-char . f509a) (read . f5099) (peek-char . f5098) (open-output-file . f5097) (open-input-file . f5096) (newline . f5095) (display . f5094) (close-output-port . f5093) (close-input-port . f5092) (eof-object? . f5091) (eof-object . f5090) (current-error-port . f508f) (current-output-port . f508e) (current-input-port . f508d) (output-port? . f508c) (input-port? . f508b) (utf-8-codec . f508a) (utf-16-codec . f5089) (transcoder-error-handling-mode . f5088) (transcoder-eol-style . f5087) (transcoder-codec . f5086) (transcoded-port . f5085) (textual-port? . f5084) (string->bytevector . f5083) (standard-output-port . f5082) (standard-input-port . f5081) (standard-error-port . f5080) (set-port-position! . f507f) (put-u8 . f507e) (put-string . f507d) (put-datum . f507c) (put-char . f507b) (put-bytevector . f507a) (port? . f5079) (port-transcoder . f5078) (port-position . f5077) (port-has-set-port-position!? . f5076) (port-has-port-position? . f5075) (port-eof? . f5074) (output-port-buffer-mode . f5073) (open-string-output-port . f5072) (open-string-input-port . f5071) (open-file-output-port . f5070) (open-file-input/output-port . f506f) (open-file-input-port . f506e) (open-bytevector-output-port . f506d) (open-bytevector-input-port . f506c) (native-transcoder . f506b) (native-eol-style . f506a) (make-transcoder . f5069) (latin-1-codec . f5068) (make-i/o-write-error . f4b60) (make-i/o-read-error . f4b4b) (make-i/o-port-error . f4c01) (make-i/o-invalid-position-error . f4b77) (make-i/o-filename-error . f4b92) (make-i/o-file-protection-error . f4bab) (make-i/o-file-is-read-only-error . f4bc0) (make-i/o-file-does-not-exist-error . f4bea) (make-i/o-file-already-exists-error . f4bd5) (make-i/o-error . f4b36) (make-i/o-encoding-error . f4c31) (make-i/o-decoding-error . f4c1a) (make-custom-textual-output-port . f5067) (make-custom-textual-input/output-port . f5066) (make-custom-textual-input-port . f5065) (make-custom-binary-output-port . f5064) (make-custom-binary-input/output-port . f5063) (make-custom-binary-input-port . f5062) (make-bytevector . f5061) (lookahead-u8 . f5060) (lookahead-char . f505f) (i/o-write-error? . f4b62) (i/o-read-error? . f4b4d) (i/o-port-error? . f4c05) (i/o-invalid-position-error? . f4b7b) (i/o-filename-error? . f4b96) (i/o-file-protection-error? . f4bad) (i/o-file-is-read-only-error? . f4bc2) (i/o-file-does-not-exist-error? . f4bec) (i/o-file-already-exists-error? . f4bd7) (i/o-error? . f4b38) (i/o-error-position . f4b7d) (i/o-error-port . f4c07) (i/o-error-filename . f4b98) (i/o-encoding-error? . f4c35) (i/o-encoding-error-char . f4c37) (i/o-decoding-error? . f4c1c) (get-u8 . f505e) (get-string-n! . f505d) (get-string-n . f505c) (get-string-all . f505b) (get-line . f505a) (get-datum . f5059) (get-char . f5058) (get-bytevector-some . f5057) (get-bytevector-n! . f5056) (get-bytevector-n . f5055) (get-bytevector-all . f5054) (flush-output-port . f5053) (close-port . f5052) (exit . f504a) (command-line . f4d6c) (string-fill! . f5049) (string-set! . f5048) (set-cdr! . f5047) (set-car! . f5046) (remove . f5045) (remv . f5044) (remp . f5043) (remq . f5042) (partition . f5041) (memv . f5040) (memq . f503f) (memp . f503e) (member . f503d) (exists . f503c) (for-all . f503b) (fold-right . f503a) (fold-left . f5039) (find . f5038) (filter . f5037) (cons* . f5036) (assv . f5035) (assq . f5034) (assp . f5033) (assoc . f5032) (call-with-string-output-port . f5031) (call-with-port . f5030) (call-with-bytevector-output-port . f502f) (bytevector->string . f502e) (buffer-mode? . f502d) (binary-port? . f502c) (with-exception-handler . f502b) (raise-continuable . f502a) (raise . f5029) (eval . f2f7e) (environment . f2f76) (make-enumeration . f5028) (enum-set=? . f5027) (enum-set-universe . f5026) (enum-set-union . f5025) (enum-set-subset? . f5024) (enum-set-projection . f5023) (enum-set-member? . f5022) (enum-set-intersection . f5021) (enum-set-indexer . f5020) (enum-set-difference . f501f) (enum-set-constructor . f501e) (enum-set-complement . f501d) (enum-set->list . f501c) (who-condition? . f4aac) (warning? . f4a24) (violation? . f4a63) (undefined-violation? . f4b23) (syntax-violation? . f4b0a) (syntax-violation-subform . f4b0e) (syntax-violation-form . f4b0c) (syntax-violation . f2f9e) (simple-conditions . f501b) (serious-condition? . f4a39) (non-continuable-violation? . f4ac3) (message-condition? . f4a0d) (make-who-condition . f4aa8) (make-warning . f4a22) (make-violation . f4a61) (make-undefined-violation . f4b21) (make-syntax-violation . f4b04) (make-serious-condition . f4a37) (make-non-continuable-violation . f4ac1) (make-message-condition . f4a09) (make-lexical-violation . f4aeb) (make-irritants-condition . f4a8d) (make-implementation-restriction-violation . f4ad6) (make-error . f4a4c) (make-assertion-violation . f4a76) (lexical-violation? . f4aed) (irritants-condition? . f4a91) (implementation-restriction-violation? . f4ad8) (error? . f4a4e) (condition-who . f4aae) (condition-predicate . f501a) (condition-message . f4a0f) (condition-irritants . f4a93) (condition-accessor . f5019) (condition . f5018) (assertion-violation? . f4a78) (condition? . f5017) (utf32->string . f5016) (utf16->string . f5015) (utf8->string . f5014) (uint-list->bytevector . f5013) (u8-list->bytevector . f5012) (string->utf8 . f5011) (string->utf32 . f5010) (string->utf16 . f500f) (sint-list->bytevector . f500e) (native-endianness . f500d) (bytevector? . f500c) (bytevector=? . f500b) (bytevector-uint-set! . f500a) (bytevector-uint-ref . f5009) (bytevector-u8-set! . f5008) (bytevector-u8-ref . f5007) (bytevector-u64-set! . f5006) (bytevector-u64-ref . f5005) (bytevector-u64-native-set! . f5004) (bytevector-u64-native-ref . f5003) (bytevector-u32-set! . f5002) (bytevector-u32-ref . f5001) (bytevector-u32-native-set! . f5000) (bytevector-u32-native-ref . f4fff) (bytevector-u16-set! . f4ffe) (bytevector-u16-ref . f4ffd) (bytevector-u16-native-set! . f4ffc) (bytevector-u16-native-ref . f4ffb) (bytevector-sint-set! . f4ffa) (bytevector-sint-ref . f4ff9) (bytevector-s8-set! . f4ff8) (bytevector-s8-ref . f4ff7) (bytevector-s64-set! . f4ff6) (bytevector-s64-ref . f4ff5) (bytevector-s64-native-set! . f4ff4) (bytevector-s64-native-ref . f4ff3) (bytevector-s32-set! . f4ff2) (bytevector-s32-ref . f4ff1) (bytevector-s32-native-set! . f4ff0) (bytevector-s32-native-ref . f4fef) (bytevector-s16-set! . f4fee) (bytevector-s16-ref . f4fed) (bytevector-s16-native-set! . f4fec) (bytevector-s16-native-ref . f4feb) (bytevector-length . f4fea) (bytevector-ieee-single-ref . f4fe9) (bytevector-ieee-single-set! . f4fe8) (bytevector-ieee-single-native-set! . f4fe7) (bytevector-ieee-single-native-ref . f4fe6) (bytevector-ieee-double-set! . f4fe5) (bytevector-ieee-double-ref . f4fe4) (bytevector-ieee-double-native-set! . f4fe3) (bytevector-ieee-double-native-ref . f4fe2) (bytevector-fill! . f4fe1) (bytevector-copy! . f4fe0) (bytevector-copy . f4fdf) (bytevector->uint-list . f4fde) (bytevector->u8-list . f4fdd) (bytevector->sint-list . f4fdc) (no-nans-violation? . f4c61) (no-infinities-violation? . f4c4c) (make-no-nans-violation . f4c5f) (make-no-infinities-violation . f4c4a) (real->flonum . f4fdb) (flzero? . f4fda) (fltruncate . f4fd9) (fltan . f4fd8) (flsqrt . f4fd7) (flsin . f4fd6) (flround . f4fd5) (flpositive? . f4fd4) (flonum? . f4fd3) (flodd? . f4fd2) (flnumerator . f4fd1) (flnegative? . f4fd0) (flnan? . f4fcf) (flmod0 . f4fce) (flmod . f4fcd) (flmin . f4fcc) (flmax . f4fcb) (fllog . f4fca) (flinteger? . f4fc9) (flinfinite? . f4fc8) (flfloor . f4fc7) (flfinite? . f4fc6) (flexpt . f4fc5) (flexp . f4fc4) (fleven? . f4fc3) (fldiv0-and-mod0 . f4fc2) (fldiv0 . f4fc1) (fldiv-and-mod . f4fc0) (fldiv . f4fbf) (fldenominator . f4fbe) (flcos . f4fbd) (flceiling . f4fbc) (flatan . f4fbb) (flasin . f4fba) (flacos . f4fb9) (flabs . f4fb8) (fl>? . f4fb7) (fl>=? . f4fb6) (fl=? . f4fb5) (fl<? . f4fb4) (fl<=? . f4fb3) (fl/ . f4fb2) (fl- . f4fb1) (fl+ . f4fb0) (fl* . f4faf) (fixnum->flonum . f4fae) (fxzero? . f4fad) (fxxor . f4fac) (fxrotate-bit-field . f4fab) (fxreverse-bit-field . f4faa) (fxpositive? . f4fa9) (fxodd? . f4fa8) (fxnot . f4fa7) (fxnegative? . f4fa6) (fxmod0 . f4fa5) (fxmod . f4fa4) (fxmin . f4fa3) (fxmax . f4fa2) (fxlength . f4fa1) (fxior . f4fa0) (fxif . f4f9f) (fxfirst-bit-set . f4f9e) (fxeven? . f4f9d) (fxdiv0-and-mod0 . f4f9c) (fxdiv0 . f4f9b) (fxdiv-and-mod . f4f9a) (fxdiv . f4f99) (fxcopy-bit-field . f4f98) (fxcopy-bit . f4f97) (fxbit-set? . f4f96) (fxbit-field . f4f95) (fxbit-count . f4f94) (fxarithmetic-shift-right . f4f93) (fxarithmetic-shift-left . f4f92) (fxarithmetic-shift . f4f91) (fxand . f4f90) (fx>? . f4f8f) (fx>=? . f4f8e) (fx=? . f4f8d) (fx<? . f4f8c) (fx<=? . f4f8b) (fx-/carry . f4f8a) (fx- . f4f89) (fx+/carry . f4f88) (fx+ . f4f87) (fx*/carry . f4f86) (fx* . f4f85) (greatest-fixnum . f4f84) (least-fixnum . f4f83) (fixnum-width . f4f82) (fixnum? . f4f81) (bitwise-rotate-bit-field . f4f80) (bitwise-reverse-bit-field . f4f7f) (bitwise-length . f4f7e) (bitwise-if . f4f7d) (bitwise-first-bit-set . f4f7c) (bitwise-copy-bit-field . f4f7b) (bitwise-copy-bit . f4f7a) (bitwise-bit-set? . f4f79) (bitwise-bit-field . f4f78) (bitwise-bit-count . f4f77) (bitwise-xor . f4f76) (bitwise-ior . f4f75) (bitwise-and . f4f74) (bitwise-not . f4f73) (bitwise-arithmetic-shift-right . f4f72) (bitwise-arithmetic-shift-left . f4f71) (bitwise-arithmetic-shift . f4f70) (zero? . f4f6f) (vector? . f4f6e) (vector-set! . f4f6d) (vector-ref . f4f6c) (vector-map . f4f6b) (vector-length . f4f6a) (vector-for-each . f4f69) (vector-fill! . f4f68) (vector->list . f4f67) (vector . f4f66) (values . f4f65) (truncate . f4f64) (tan . f4f63) (symbol? . f4f62) (symbol=? . f4f61) (symbol->string . f4f60) (substring . f4f5f) (string? . f4f5e) (string>? . f4f5d) (string>=? . f4f5c) (string=? . f4f5b) (string<? . f4f5a) (string<=? . f4f59) (string-ref . f4f58) (string-length . f4f57) (string-for-each . f4f56) (string-copy . f4f55) (string-append . f4f54) (string->symbol . f4f53) (string->number . f4f52) (string->list . f4f51) (string . f4f50) (sqrt . f4f4f) (sin . f4f4e) (round . f4f4d) (reverse . f4f4c) (real? . f4f4b) (real-valued? . f4f4a) (real-part . f4f49) (rationalize . f4f48) (rational? . f4f47) (rational-valued? . f4f46) (procedure? . f4f45) (positive? . f4f44) (pair? . f4f43) (odd? . f4f42) (numerator . f4f41) (number? . f4f40) (number->string . f4f3f) (null? . f4f3e) (not . f4f3d) (negative? . f4f3c) (nan? . f4f3b) (min . f4f3a) (max . f4f39) (map . f4f38) (make-vector . f4f37) (make-string . f4f36) (make-rectangular . f4f35) (make-polar . f4f34) (magnitude . f4f33) (log . f4f32) (list? . f4f31) (list-tail . f4f30) (list-ref . f4f2f) (list->vector . f4f2e) (list->string . f4f2d) (list . f4f2c) (length . f4f2b) (lcm . f4f2a) (integer? . f4f29) (integer-valued? . f4f28) (integer->char . f4f27) (infinite? . f4f26) (inexact? . f4f25) (inexact . f4f24) (imag-part . f4f23) (gcd . f4f22) (for-each . f4f21) (floor . f4f20) (finite? . f4f1f) (expt . f4f1e) (exp . f4f1d) (exact? . f4f1c) (exact-integer-sqrt . f4f1b) (exact . f4f1a) (even? . f4f19) (error . f4f18) (eqv? . f4f17) (equal? . f4f16) (eq? . f4f15) (dynamic-wind . f4f14) (div0-and-mod0 . f4f13) (mod0 . f4f12) (div0 . f4f11) (div-and-mod . f4f10) (mod . f4f0f) (div . f4f0e) (denominator . f4f0d) (cos . f4f0c) (cons . f4f0b) (complex? . f4f0a) (char? . f4f09) (char>? . f4f08) (char>=? . f4f07) (char=? . f4f06) (char<? . f4f05) (char<=? . f4f04) (char->integer . f4f03) (ceiling . f4f02) (call-with-values . f4f01) (call/cc . f4f00) (call-with-current-continuation . f4eff) (cddddr . f4efe) (cdddar . f4efd) (cddadr . f4efc) (cddaar . f4efb) (cdaddr . f4efa) (cdadar . f4ef9) (cdaadr . f4ef8) (cdaaar . f4ef7) (cadddr . f4ef6) (caddar . f4ef5) (cadadr . f4ef4) (cadaar . f4ef3) (caaddr . f4ef2) (caadar . f4ef1) (caaadr . f4ef0) (caaaar . f4eef) (cdddr . f4eee) (cddar . f4eed) (cdadr . f4eec) (cdaar . f4eeb) (caddr . f4eea) (cadar . f4ee9) (caadr . f4ee8) (caaar . f4ee7) (cddr . f4ee6) (cdar . f4ee5) (cadr . f4ee4) (caar . f4ee3) (cdr . f4ee2) (car . f4ee1) (boolean? . f4ee0) (boolean=? . f4edf) (atan . f4ede) (assertion-violation . f4edd) (asin . f4edc) (apply . f4edb) (append . f4eda) (angle . f4ed9) (acos . f4ed8) (abs . f4ed7) (/ . f4ed6) (* . f4ed5) (- . f4ed4) (+ . f4ed3) (>= . f4ed2) (> . f4ed1) (= . f4ed0) (<= . f4ecf) (< . f4ece) (library . f4ecd) (&no-nans . f4ecc) (&no-infinities . f4ecb) (&i/o-encoding . f4eca) (&i/o-decoding . f4ec9) (&i/o-port . f4ec8) (&i/o-file-does-not-exist . f4ec7) (&i/o-file-already-exists . f4ec6) (&i/o-file-is-read-only . f4ec5) (&i/o-file-protection . f4ec4) (&i/o-filename . f4ec3) (&i/o-invalid-position . f4ec2) (&i/o-write . f4ec1) (&i/o-read . f4ec0) (&i/o . f4ebf) (&undefined . f4ebe) (&syntax . f4ebd) (&lexical . f4ebc) (&implementation-restriction . f4ebb) (&non-continuable . f4eba) (&who . f4eb9) (&irritants . f4eb8) (&assertion . f4eb7) (&violation . f4eb6) (&error . f4eb5) (&serious . f4eb4) (&warning . f4eb3) (&message . f4eb2) (&condition . f4eb1) (define-condition-type . f4eb0) (define-enumeration . f4eaf) (define-record-type . f4eae) (parent-rtd . f4ead) (nongenerative . f4eac) (opaque . f4eab) (sealed . f4eaa) (protocol . f4ea9) (parent . f4ea8) (immutable . f4ea7) (mutable . f4ea6) (fields . f4ea5) (error-handling-mode . f4ea4) (file-options . f4ea3) (buffer-mode . f4ea2) (eol-style . f4ea1) (guard . f4ea0) (unsyntax-splicing . f4e9d) (unsyntax . f4e9c) (unquote-splicing . f4e9b) (unquote . f4e9a) (_ . f4e99) (else . f4e98) (=> . f4e97) (... . f4e96) (assert . f4e95) (endianness . f4e94) (time . f4e92) (do . f4e91) (cond . f4e90) (let* . f4e8f) (let . f4e8e) (let*-values . f4e8d) (let-values . f4e8c) (identifier-syntax . f4e8b) (with-syntax . f4e8a) (quasisyntax . f4e89) (quasiquote . f4e88) (syntax-rules . f4e87) (include . f4e86) (record-constructor-descriptor . f4e84) (record-type-descriptor . f4e83) (case . f4e82) (unless . f4e80) (when . f4e7f) (or . f4e7e) (and . f4e7d) (if . f4e7c) (letrec* . f4e7b) (letrec . f4e7a) (case-lambda . f4e78) (lambda . f4e77) (syntax . f4e76) (syntax-case . f4e75) (quote . f4e74) (letrec-syntax . f4e72) (let-syntax . f4e71) (set! . f4e70) (import . f4e6f) (begin . f4e6e) (define-syntax . f4e6c) (define . f4e6b)) '() values values '#f '#f '#t '#f) (f2acd@f296c@install-library 'f513b '(psyntax null-environment-5) '() '() '() '() '((make-promise . f504b) (unquote-splicing . f4e9b) (unquote . f4e9a) (_ . f4e99) (else . f4e98) (=> . f4e97) (... . f4e96) (delay . f4e93) (do . f4e91) (cond . f4e90) (let* . f4e8f) (let . f4e8e) (quasiquote . f4e88) (syntax-rules . f4e87) (case . f4e82) (or . f4e7e) (and . f4e7d) (if . f4e7c) (letrec . f4e7a) (lambda . f4e77) (quote . f4e74) (letrec-syntax . f4e72) (let-syntax . f4e71) (set! . f4e70) (begin . f4e6e) (define-syntax . f4e6c) (define . f4e6b)) '() values values '#f '#f '#t '#f) (f2acd@f296c@install-library 'f513c '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . f50e0) (string-ci>=? . f50df) (string-ci=? . f50de) (string-ci<? . f50dd) (string-ci<=? . f50dc) (char-whitespace? . f50db) (char-upper-case? . f50da) (char-numeric? . f50d8) (char-lower-case? . f50d7) (char-upcase . f50d5) (char-downcase . f50d2) (char-ci>? . f50d1) (char-ci>=? . f50d0) (char-ci=? . f50cf) (char-ci<? . f50ce) (char-ci<=? . f50cd) (char-alphabetic? . f50cc) (call-with-output-file . f50a0) (call-with-input-file . f509f) (write-char . f509e) (write . f509d) (with-output-to-file . f509c) (with-input-from-file . f509b) (read-char . f509a) (read . f5099) (peek-char . f5098) (open-output-file . f5097) (open-input-file . f5096) (newline . f5095) (display . f5094) (close-output-port . f5093) (close-input-port . f5092) (eof-object . f5090) (current-output-port . f508e) (current-input-port . f508d) (output-port? . f508c) (input-port? . f508b) (scheme-report-environment . f2f7a) (quotient . f5051) (null-environment . f2f78) (remainder . f5050) (modulo . f504f) (inexact->exact . f504e) (force . f504d) (exact->inexact . f504c) (make-promise . f504b) (string-fill! . f5049) (string-set! . f5048) (set-cdr! . f5047) (set-car! . f5046) (memv . f5040) (memq . f503f) (member . f503d) (assv . f5035) (assq . f5034) (assoc . f5032) (eval . f2f7e) (zero? . f4f6f) (vector? . f4f6e) (vector-set! . f4f6d) (vector-ref . f4f6c) (vector-length . f4f6a) (vector-fill! . f4f68) (vector->list . f4f67) (vector . f4f66) (values . f4f65) (truncate . f4f64) (tan . f4f63) (symbol? . f4f62) (symbol->string . f4f60) (substring . f4f5f) (string? . f4f5e) (string>? . f4f5d) (string>=? . f4f5c) (string=? . f4f5b) (string<? . f4f5a) (string<=? . f4f59) (string-ref . f4f58) (string-length . f4f57) (string-copy . f4f55) (string-append . f4f54) (string->symbol . f4f53) (string->number . f4f52) (string->list . f4f51) (string . f4f50) (sqrt . f4f4f) (sin . f4f4e) (round . f4f4d) (reverse . f4f4c) (real? . f4f4b) (real-part . f4f49) (rationalize . f4f48) (rational? . f4f47) (procedure? . f4f45) (positive? . f4f44) (pair? . f4f43) (odd? . f4f42) (numerator . f4f41) (number? . f4f40) (number->string . f4f3f) (not . f4f3d) (negative? . f4f3c) (min . f4f3a) (max . f4f39) (map . f4f38) (make-vector . f4f37) (make-string . f4f36) (make-rectangular . f4f35) (make-polar . f4f34) (magnitude . f4f33) (log . f4f32) (list? . f4f31) (list-tail . f4f30) (list-ref . f4f2f) (list->vector . f4f2e) (list->string . f4f2d) (list . f4f2c) (length . f4f2b) (lcm . f4f2a) (integer? . f4f29) (integer->char . f4f27) (inexact? . f4f25) (imag-part . f4f23) (gcd . f4f22) (for-each . f4f21) (floor . f4f20) (expt . f4f1e) (exp . f4f1d) (exact? . f4f1c) (even? . f4f19) (eqv? . f4f17) (equal? . f4f16) (eq? . f4f15) (dynamic-wind . f4f14) (denominator . f4f0d) (cos . f4f0c) (cons . f4f0b) (complex? . f4f0a) (char? . f4f09) (char>? . f4f08) (char>=? . f4f07) (char=? . f4f06) (char<? . f4f05) (char<=? . f4f04) (char->integer . f4f03) (ceiling . f4f02) (call-with-values . f4f01) (call-with-current-continuation . f4eff) (cddddr . f4efe) (cdddar . f4efd) (cddadr . f4efc) (cddaar . f4efb) (cdaddr . f4efa) (cdadar . f4ef9) (cdaadr . f4ef8) (cdaaar . f4ef7) (cadddr . f4ef6) (caddar . f4ef5) (cadadr . f4ef4) (cadaar . f4ef3) (caaddr . f4ef2) (caadar . f4ef1) (caaadr . f4ef0) (caaaar . f4eef) (cdddr . f4eee) (cddar . f4eed) (cdadr . f4eec) (cdaar . f4eeb) (caddr . f4eea) (cadar . f4ee9) (caadr . f4ee8) (caaar . f4ee7) (cddr . f4ee6) (cdar . f4ee5) (cadr . f4ee4) (caar . f4ee3) (cdr . f4ee2) (car . f4ee1) (boolean? . f4ee0) (atan . f4ede) (asin . f4edc) (apply . f4edb) (append . f4eda) (angle . f4ed9) (acos . f4ed8) (abs . f4ed7) (/ . f4ed6) (* . f4ed5) (- . f4ed4) (+ . f4ed3) (>= . f4ed2) (> . f4ed1) (= . f4ed0) (<= . f4ecf) (< . f4ece) (unquote-splicing . f4e9b) (unquote . f4e9a) (else . f4e98) (=> . f4e97) (... . f4e96) (delay . f4e93) (do . f4e91) (cond . f4e90) (let* . f4e8f) (let . f4e8e) (quasiquote . f4e88) (syntax-rules . f4e87) (case . f4e82) (or . f4e7e) (and . f4e7d) (if . f4e7c) (letrec . f4e7a) (lambda . f4e77) (quote . f4e74) (letrec-syntax . f4e72) (let-syntax . f4e71) (set! . f4e70) (begin . f4e6e) (define-syntax . f4e6c) (define . f4e6b)) '() values values '#f '#f '#t '#f) (f2acd@f296c@install-library 'f513d '(psyntax modules) '() '() '() '() '((module . f4e6d)) '() values values '#f '#f '#t '#f) (f2acd@f296c@install-library 'f513e '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (f2acd@f296c@install-library 'f513f '(rnrs) '(6) '() '() '() '((regexp? . f5132) (string-upcase . f50e8) (string-titlecase . f50e7) (string-normalize-nfkd . f50e6) (string-normalize-nfkc . f50e5) (string-normalize-nfd . f50e4) (string-normalize-nfc . f50e3) (string-foldcase . f50e2) (string-downcase . f50e1) (string-ci>? . f50e0) (string-ci>=? . f50df) (string-ci=? . f50de) (string-ci<? . f50dd) (string-ci<=? . f50dc) (char-whitespace? . f50db) (char-upper-case? . f50da) (char-title-case? . f50d9) (char-numeric? . f50d8) (char-lower-case? . f50d7) (char-general-category . f50d6) (char-upcase . f50d5) (char-titlecase . f50d4) (char-foldcase . f50d3) (char-downcase . f50d2) (char-ci>? . f50d1) (char-ci>=? . f50d0) (char-ci=? . f50cf) (char-ci<? . f50ce) (char-ci<=? . f50cd) (char-alphabetic? . f50cc) (make-variable-transformer . f2ce2) (identifier? . f2fa0) (generate-temporaries . f2f8c) (free-identifier=? . f2f8e) (syntax->datum . f2fa4) (datum->syntax . f2fa2) (bound-identifier=? . f2f90) (record-type-descriptor? . f50cb) (record-predicate . f50ca) (record-mutator . f50c9) (record-constructor . f50c8) (record-accessor . f50c7) (make-record-type-descriptor . f50c6) (make-record-constructor-descriptor . f50c5) (record? . f50c4) (record-type-uid . f50c3) (record-type-sealed? . f50c2) (record-type-parent . f50c1) (record-type-opaque? . f50c0) (record-type-name . f50bf) (record-type-generative? . f50be) (record-type-field-names . f50bd) (record-rtd . f50bc) (record-field-mutable? . f50bb) (delete-file . f50ba) (file-exists? . f50b9) (vector-sort! . f50b8) (vector-sort . f50b7) (list-sort . f50b6) (symbol-hash . f50b5) (string-ci-hash . f50b4) (string-hash . f50b3) (equal-hash . f50b2) (hashtable-equivalence-function . f50b1) (make-hashtable . f50b0) (hashtable-hash-function . f50af) (make-eqv-hashtable . f50ae) (make-eq-hashtable . f50ad) (hashtable? . f50ac) (hashtable-update! . f50ab) (hashtable-size . f50aa) (hashtable-set! . f50a9) (hashtable-ref . f50a8) (hashtable-mutable? . f50a7) (hashtable-keys . f50a6) (hashtable-entries . f50a5) (hashtable-delete! . f50a4) (hashtable-copy . f50a3) (hashtable-contains? . f50a2) (hashtable-clear! . f50a1) (call-with-output-file . f50a0) (call-with-input-file . f509f) (write-char . f509e) (write . f509d) (with-output-to-file . f509c) (with-input-from-file . f509b) (read-char . f509a) (read . f5099) (peek-char . f5098) (open-output-file . f5097) (open-input-file . f5096) (newline . f5095) (display . f5094) (close-output-port . f5093) (close-input-port . f5092) (eof-object? . f5091) (eof-object . f5090) (current-error-port . f508f) (current-output-port . f508e) (current-input-port . f508d) (output-port? . f508c) (input-port? . f508b) (utf-8-codec . f508a) (utf-16-codec . f5089) (transcoder-error-handling-mode . f5088) (transcoder-eol-style . f5087) (transcoder-codec . f5086) (transcoded-port . f5085) (textual-port? . f5084) (string->bytevector . f5083) (standard-output-port . f5082) (standard-input-port . f5081) (standard-error-port . f5080) (set-port-position! . f507f) (put-u8 . f507e) (put-string . f507d) (put-datum . f507c) (put-char . f507b) (put-bytevector . f507a) (port? . f5079) (port-transcoder . f5078) (port-position . f5077) (port-has-set-port-position!? . f5076) (port-has-port-position? . f5075) (port-eof? . f5074) (output-port-buffer-mode . f5073) (open-string-output-port . f5072) (open-string-input-port . f5071) (open-file-output-port . f5070) (open-file-input/output-port . f506f) (open-file-input-port . f506e) (open-bytevector-output-port . f506d) (open-bytevector-input-port . f506c) (native-transcoder . f506b) (native-eol-style . f506a) (make-transcoder . f5069) (latin-1-codec . f5068) (make-i/o-write-error . f4b60) (make-i/o-read-error . f4b4b) (make-i/o-port-error . f4c01) (make-i/o-invalid-position-error . f4b77) (make-i/o-filename-error . f4b92) (make-i/o-file-protection-error . f4bab) (make-i/o-file-is-read-only-error . f4bc0) (make-i/o-file-does-not-exist-error . f4bea) (make-i/o-file-already-exists-error . f4bd5) (make-i/o-error . f4b36) (make-i/o-encoding-error . f4c31) (make-i/o-decoding-error . f4c1a) (make-custom-textual-output-port . f5067) (make-custom-textual-input/output-port . f5066) (make-custom-textual-input-port . f5065) (make-custom-binary-output-port . f5064) (make-custom-binary-input/output-port . f5063) (make-custom-binary-input-port . f5062) (make-bytevector . f5061) (lookahead-u8 . f5060) (lookahead-char . f505f) (i/o-write-error? . f4b62) (i/o-read-error? . f4b4d) (i/o-port-error? . f4c05) (i/o-invalid-position-error? . f4b7b) (i/o-filename-error? . f4b96) (i/o-file-protection-error? . f4bad) (i/o-file-is-read-only-error? . f4bc2) (i/o-file-does-not-exist-error? . f4bec) (i/o-file-already-exists-error? . f4bd7) (i/o-error? . f4b38) (i/o-error-position . f4b7d) (i/o-error-port . f4c07) (i/o-error-filename . f4b98) (i/o-encoding-error? . f4c35) (i/o-encoding-error-char . f4c37) (i/o-decoding-error? . f4c1c) (get-u8 . f505e) (get-string-n! . f505d) (get-string-n . f505c) (get-string-all . f505b) (get-line . f505a) (get-datum . f5059) (get-char . f5058) (get-bytevector-some . f5057) (get-bytevector-n! . f5056) (get-bytevector-n . f5055) (get-bytevector-all . f5054) (flush-output-port . f5053) (close-port . f5052) (exit . f504a) (command-line . f4d6c) (remove . f5045) (remv . f5044) (remp . f5043) (remq . f5042) (partition . f5041) (memv . f5040) (memq . f503f) (memp . f503e) (member . f503d) (exists . f503c) (for-all . f503b) (fold-right . f503a) (fold-left . f5039) (find . f5038) (filter . f5037) (cons* . f5036) (assv . f5035) (assq . f5034) (assp . f5033) (assoc . f5032) (call-with-string-output-port . f5031) (call-with-port . f5030) (call-with-bytevector-output-port . f502f) (bytevector->string . f502e) (buffer-mode? . f502d) (binary-port? . f502c) (with-exception-handler . f502b) (raise-continuable . f502a) (raise . f5029) (make-enumeration . f5028) (enum-set=? . f5027) (enum-set-universe . f5026) (enum-set-union . f5025) (enum-set-subset? . f5024) (enum-set-projection . f5023) (enum-set-member? . f5022) (enum-set-intersection . f5021) (enum-set-indexer . f5020) (enum-set-difference . f501f) (enum-set-constructor . f501e) (enum-set-complement . f501d) (enum-set->list . f501c) (who-condition? . f4aac) (warning? . f4a24) (violation? . f4a63) (undefined-violation? . f4b23) (syntax-violation? . f4b0a) (syntax-violation-subform . f4b0e) (syntax-violation-form . f4b0c) (syntax-violation . f2f9e) (simple-conditions . f501b) (serious-condition? . f4a39) (non-continuable-violation? . f4ac3) (message-condition? . f4a0d) (make-who-condition . f4aa8) (make-warning . f4a22) (make-violation . f4a61) (make-undefined-violation . f4b21) (make-syntax-violation . f4b04) (make-serious-condition . f4a37) (make-non-continuable-violation . f4ac1) (make-message-condition . f4a09) (make-lexical-violation . f4aeb) (make-irritants-condition . f4a8d) (make-implementation-restriction-violation . f4ad6) (make-error . f4a4c) (make-assertion-violation . f4a76) (lexical-violation? . f4aed) (irritants-condition? . f4a91) (implementation-restriction-violation? . f4ad8) (error? . f4a4e) (condition-who . f4aae) (condition-predicate . f501a) (condition-message . f4a0f) (condition-irritants . f4a93) (condition-accessor . f5019) (condition . f5018) (assertion-violation? . f4a78) (condition? . f5017) (utf32->string . f5016) (utf16->string . f5015) (utf8->string . f5014) (uint-list->bytevector . f5013) (u8-list->bytevector . f5012) (string->utf8 . f5011) (string->utf32 . f5010) (string->utf16 . f500f) (sint-list->bytevector . f500e) (native-endianness . f500d) (bytevector? . f500c) (bytevector=? . f500b) (bytevector-uint-set! . f500a) (bytevector-uint-ref . f5009) (bytevector-u8-set! . f5008) (bytevector-u8-ref . f5007) (bytevector-u64-set! . f5006) (bytevector-u64-ref . f5005) (bytevector-u64-native-set! . f5004) (bytevector-u64-native-ref . f5003) (bytevector-u32-set! . f5002) (bytevector-u32-ref . f5001) (bytevector-u32-native-set! . f5000) (bytevector-u32-native-ref . f4fff) (bytevector-u16-set! . f4ffe) (bytevector-u16-ref . f4ffd) (bytevector-u16-native-set! . f4ffc) (bytevector-u16-native-ref . f4ffb) (bytevector-sint-set! . f4ffa) (bytevector-sint-ref . f4ff9) (bytevector-s8-set! . f4ff8) (bytevector-s8-ref . f4ff7) (bytevector-s64-set! . f4ff6) (bytevector-s64-ref . f4ff5) (bytevector-s64-native-set! . f4ff4) (bytevector-s64-native-ref . f4ff3) (bytevector-s32-set! . f4ff2) (bytevector-s32-ref . f4ff1) (bytevector-s32-native-set! . f4ff0) (bytevector-s32-native-ref . f4fef) (bytevector-s16-set! . f4fee) (bytevector-s16-ref . f4fed) (bytevector-s16-native-set! . f4fec) (bytevector-s16-native-ref . f4feb) (bytevector-length . f4fea) (bytevector-ieee-single-ref . f4fe9) (bytevector-ieee-single-set! . f4fe8) (bytevector-ieee-single-native-set! . f4fe7) (bytevector-ieee-single-native-ref . f4fe6) (bytevector-ieee-double-set! . f4fe5) (bytevector-ieee-double-ref . f4fe4) (bytevector-ieee-double-native-set! . f4fe3) (bytevector-ieee-double-native-ref . f4fe2) (bytevector-fill! . f4fe1) (bytevector-copy! . f4fe0) (bytevector-copy . f4fdf) (bytevector->uint-list . f4fde) (bytevector->u8-list . f4fdd) (bytevector->sint-list . f4fdc) (no-nans-violation? . f4c61) (no-infinities-violation? . f4c4c) (make-no-nans-violation . f4c5f) (make-no-infinities-violation . f4c4a) (real->flonum . f4fdb) (flzero? . f4fda) (fltruncate . f4fd9) (fltan . f4fd8) (flsqrt . f4fd7) (flsin . f4fd6) (flround . f4fd5) (flpositive? . f4fd4) (flonum? . f4fd3) (flodd? . f4fd2) (flnumerator . f4fd1) (flnegative? . f4fd0) (flnan? . f4fcf) (flmod0 . f4fce) (flmod . f4fcd) (flmin . f4fcc) (flmax . f4fcb) (fllog . f4fca) (flinteger? . f4fc9) (flinfinite? . f4fc8) (flfloor . f4fc7) (flfinite? . f4fc6) (flexpt . f4fc5) (flexp . f4fc4) (fleven? . f4fc3) (fldiv0-and-mod0 . f4fc2) (fldiv0 . f4fc1) (fldiv-and-mod . f4fc0) (fldiv . f4fbf) (fldenominator . f4fbe) (flcos . f4fbd) (flceiling . f4fbc) (flatan . f4fbb) (flasin . f4fba) (flacos . f4fb9) (flabs . f4fb8) (fl>? . f4fb7) (fl>=? . f4fb6) (fl=? . f4fb5) (fl<? . f4fb4) (fl<=? . f4fb3) (fl/ . f4fb2) (fl- . f4fb1) (fl+ . f4fb0) (fl* . f4faf) (fixnum->flonum . f4fae) (fxzero? . f4fad) (fxxor . f4fac) (fxrotate-bit-field . f4fab) (fxreverse-bit-field . f4faa) (fxpositive? . f4fa9) (fxodd? . f4fa8) (fxnot . f4fa7) (fxnegative? . f4fa6) (fxmod0 . f4fa5) (fxmod . f4fa4) (fxmin . f4fa3) (fxmax . f4fa2) (fxlength . f4fa1) (fxior . f4fa0) (fxif . f4f9f) (fxfirst-bit-set . f4f9e) (fxeven? . f4f9d) (fxdiv0-and-mod0 . f4f9c) (fxdiv0 . f4f9b) (fxdiv-and-mod . f4f9a) (fxdiv . f4f99) (fxcopy-bit-field . f4f98) (fxcopy-bit . f4f97) (fxbit-set? . f4f96) (fxbit-field . f4f95) (fxbit-count . f4f94) (fxarithmetic-shift-right . f4f93) (fxarithmetic-shift-left . f4f92) (fxarithmetic-shift . f4f91) (fxand . f4f90) (fx>? . f4f8f) (fx>=? . f4f8e) (fx=? . f4f8d) (fx<? . f4f8c) (fx<=? . f4f8b) (fx-/carry . f4f8a) (fx- . f4f89) (fx+/carry . f4f88) (fx+ . f4f87) (fx*/carry . f4f86) (fx* . f4f85) (greatest-fixnum . f4f84) (least-fixnum . f4f83) (fixnum-width . f4f82) (fixnum? . f4f81) (bitwise-rotate-bit-field . f4f80) (bitwise-reverse-bit-field . f4f7f) (bitwise-length . f4f7e) (bitwise-if . f4f7d) (bitwise-first-bit-set . f4f7c) (bitwise-copy-bit-field . f4f7b) (bitwise-copy-bit . f4f7a) (bitwise-bit-set? . f4f79) (bitwise-bit-field . f4f78) (bitwise-bit-count . f4f77) (bitwise-xor . f4f76) (bitwise-ior . f4f75) (bitwise-and . f4f74) (bitwise-not . f4f73) (bitwise-arithmetic-shift-right . f4f72) (bitwise-arithmetic-shift-left . f4f71) (bitwise-arithmetic-shift . f4f70) (zero? . f4f6f) (vector? . f4f6e) (vector-set! . f4f6d) (vector-ref . f4f6c) (vector-map . f4f6b) (vector-length . f4f6a) (vector-for-each . f4f69) (vector-fill! . f4f68) (vector->list . f4f67) (vector . f4f66) (values . f4f65) (truncate . f4f64) (tan . f4f63) (symbol? . f4f62) (symbol=? . f4f61) (symbol->string . f4f60) (substring . f4f5f) (string? . f4f5e) (string>? . f4f5d) (string>=? . f4f5c) (string=? . f4f5b) (string<? . f4f5a) (string<=? . f4f59) (string-ref . f4f58) (string-length . f4f57) (string-for-each . f4f56) (string-copy . f4f55) (string-append . f4f54) (string->symbol . f4f53) (string->number . f4f52) (string->list . f4f51) (string . f4f50) (sqrt . f4f4f) (sin . f4f4e) (round . f4f4d) (reverse . f4f4c) (real? . f4f4b) (real-valued? . f4f4a) (real-part . f4f49) (rationalize . f4f48) (rational? . f4f47) (rational-valued? . f4f46) (procedure? . f4f45) (positive? . f4f44) (pair? . f4f43) (odd? . f4f42) (numerator . f4f41) (number? . f4f40) (number->string . f4f3f) (null? . f4f3e) (not . f4f3d) (negative? . f4f3c) (nan? . f4f3b) (min . f4f3a) (max . f4f39) (map . f4f38) (make-vector . f4f37) (make-string . f4f36) (make-rectangular . f4f35) (make-polar . f4f34) (magnitude . f4f33) (log . f4f32) (list? . f4f31) (list-tail . f4f30) (list-ref . f4f2f) (list->vector . f4f2e) (list->string . f4f2d) (list . f4f2c) (length . f4f2b) (lcm . f4f2a) (integer? . f4f29) (integer-valued? . f4f28) (integer->char . f4f27) (infinite? . f4f26) (inexact? . f4f25) (inexact . f4f24) (imag-part . f4f23) (gcd . f4f22) (for-each . f4f21) (floor . f4f20) (finite? . f4f1f) (expt . f4f1e) (exp . f4f1d) (exact? . f4f1c) (exact-integer-sqrt . f4f1b) (exact . f4f1a) (even? . f4f19) (error . f4f18) (eqv? . f4f17) (equal? . f4f16) (eq? . f4f15) (dynamic-wind . f4f14) (div0-and-mod0 . f4f13) (mod0 . f4f12) (div0 . f4f11) (div-and-mod . f4f10) (mod . f4f0f) (div . f4f0e) (denominator . f4f0d) (cos . f4f0c) (cons . f4f0b) (complex? . f4f0a) (char? . f4f09) (char>? . f4f08) (char>=? . f4f07) (char=? . f4f06) (char<? . f4f05) (char<=? . f4f04) (char->integer . f4f03) (ceiling . f4f02) (call-with-values . f4f01) (call/cc . f4f00) (call-with-current-continuation . f4eff) (cddddr . f4efe) (cdddar . f4efd) (cddadr . f4efc) (cddaar . f4efb) (cdaddr . f4efa) (cdadar . f4ef9) (cdaadr . f4ef8) (cdaaar . f4ef7) (cadddr . f4ef6) (caddar . f4ef5) (cadadr . f4ef4) (cadaar . f4ef3) (caaddr . f4ef2) (caadar . f4ef1) (caaadr . f4ef0) (caaaar . f4eef) (cdddr . f4eee) (cddar . f4eed) (cdadr . f4eec) (cdaar . f4eeb) (caddr . f4eea) (cadar . f4ee9) (caadr . f4ee8) (caaar . f4ee7) (cddr . f4ee6) (cdar . f4ee5) (cadr . f4ee4) (caar . f4ee3) (cdr . f4ee2) (car . f4ee1) (boolean? . f4ee0) (boolean=? . f4edf) (atan . f4ede) (assertion-violation . f4edd) (asin . f4edc) (apply . f4edb) (append . f4eda) (angle . f4ed9) (acos . f4ed8) (abs . f4ed7) (/ . f4ed6) (* . f4ed5) (- . f4ed4) (+ . f4ed3) (>= . f4ed2) (> . f4ed1) (= . f4ed0) (<= . f4ecf) (< . f4ece) (&no-nans . f4ecc) (&no-infinities . f4ecb) (&i/o-encoding . f4eca) (&i/o-decoding . f4ec9) (&i/o-port . f4ec8) (&i/o-file-does-not-exist . f4ec7) (&i/o-file-already-exists . f4ec6) (&i/o-file-is-read-only . f4ec5) (&i/o-file-protection . f4ec4) (&i/o-filename . f4ec3) (&i/o-invalid-position . f4ec2) (&i/o-write . f4ec1) (&i/o-read . f4ec0) (&i/o . f4ebf) (&undefined . f4ebe) (&syntax . f4ebd) (&lexical . f4ebc) (&implementation-restriction . f4ebb) (&non-continuable . f4eba) (&who . f4eb9) (&irritants . f4eb8) (&assertion . f4eb7) (&violation . f4eb6) (&error . f4eb5) (&serious . f4eb4) (&warning . f4eb3) (&message . f4eb2) (&condition . f4eb1) (define-condition-type . f4eb0) (define-enumeration . f4eaf) (define-record-type . f4eae) (parent-rtd . f4ead) (nongenerative . f4eac) (opaque . f4eab) (sealed . f4eaa) (protocol . f4ea9) (parent . f4ea8) (immutable . f4ea7) (mutable . f4ea6) (fields . f4ea5) (error-handling-mode . f4ea4) (file-options . f4ea3) (buffer-mode . f4ea2) (eol-style . f4ea1) (guard . f4ea0) (unsyntax-splicing . f4e9d) (unsyntax . f4e9c) (unquote-splicing . f4e9b) (unquote . f4e9a) (_ . f4e99) (else . f4e98) (=> . f4e97) (... . f4e96) (assert . f4e95) (endianness . f4e94) (do . f4e91) (cond . f4e90) (let* . f4e8f) (let . f4e8e) (let*-values . f4e8d) (let-values . f4e8c) (identifier-syntax . f4e8b) (with-syntax . f4e8a) (quasisyntax . f4e89) (quasiquote . f4e88) (syntax-rules . f4e87) (record-constructor-descriptor . f4e84) (record-type-descriptor . f4e83) (case . f4e82) (unless . f4e80) (when . f4e7f) (or . f4e7e) (and . f4e7d) (if . f4e7c) (letrec* . f4e7b) (letrec . f4e7a) (case-lambda . f4e78) (lambda . f4e77) (syntax . f4e76) (syntax-case . f4e75) (quote . f4e74) (letrec-syntax . f4e72) (let-syntax . f4e71) (set! . f4e70) (begin . f4e6e) (define-syntax . f4e6c) (define . f4e6b)) '() values values '#f '#f '#t '#f) (f2acd@f296c@install-library 'f5140 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . f2f7a) (quotient . f5051) (null-environment . f2f78) (remainder . f5050) (modulo . f504f) (inexact->exact . f504e) (force . f504d) (exact->inexact . f504c) (make-promise . f504b) (delay . f4e93)) '() values values '#f '#f '#t '#f) (f2acd@f296c@install-library 'f5141 '(rnrs control) '(6) '() '() '() '((do . f4e91) (unless . f4e80) (when . f4e7f) (case-lambda . f4e78)) '() values values '#f '#f '#t '#f) (f2acd@f296c@install-library 'f5142 '(rnrs eval) '(6) '() '() '() '((eval . f2f7e) (environment . f2f76)) '() values values '#f '#f '#t '#f) (f2acd@f296c@install-library 'f5143 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . f5047) (set-car! . f5046)) '() values values '#f '#f '#t '#f) (f2acd@f296c@install-library 'f5144 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . f5049) (string-set! . f5048)) '() values values '#f '#f '#t '#f) (f2acd@f296c@install-library 'f5145 '(rnrs programs) '(6) '() '() '() '((exit . f504a) (command-line . f4d6c)) '() values values '#f '#f '#t '#f) (f2acd@f296c@install-library 'f5146 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . f2ce2) (identifier? . f2fa0) (generate-temporaries . f2f8c) (free-identifier=? . f2f8e) (syntax->datum . f2fa4) (datum->syntax . f2fa2) (bound-identifier=? . f2f90) (syntax-violation . f2f9e) (unsyntax-splicing . f4e9d) (unsyntax . f4e9c) (_ . f4e99) (... . f4e96) (with-syntax . f4e8a) (quasisyntax . f4e89) (syntax . f4e76) (syntax-case . f4e75)) '() values values '#f '#f '#t '#f) (f2acd@f296c@install-library 'f5147 '(rnrs files) '(6) '() '() '() '((delete-file . f50ba) (file-exists? . f50b9) (make-i/o-write-error . f4b60) (make-i/o-read-error . f4b4b) (make-i/o-port-error . f4c01) (make-i/o-invalid-position-error . f4b77) (make-i/o-filename-error . f4b92) (make-i/o-file-protection-error . f4bab) (make-i/o-file-is-read-only-error . f4bc0) (make-i/o-file-does-not-exist-error . f4bea) (make-i/o-file-already-exists-error . f4bd5) (make-i/o-error . f4b36) (i/o-write-error? . f4b62) (i/o-read-error? . f4b4d) (i/o-port-error? . f4c05) (i/o-invalid-position-error? . f4b7b) (i/o-filename-error? . f4b96) (i/o-file-protection-error? . f4bad) (i/o-file-is-read-only-error? . f4bc2) (i/o-file-does-not-exist-error? . f4bec) (i/o-file-already-exists-error? . f4bd7) (i/o-error? . f4b38) (i/o-error-position . f4b7d) (i/o-error-port . f4c07) (i/o-error-filename . f4b98) (&i/o-port . f4ec8) (&i/o-file-does-not-exist . f4ec7) (&i/o-file-already-exists . f4ec6) (&i/o-file-is-read-only . f4ec5) (&i/o-file-protection . f4ec4) (&i/o-filename . f4ec3) (&i/o-invalid-position . f4ec2) (&i/o-write . f4ec1) (&i/o-read . f4ec0) (&i/o . f4ebf)) '() values values '#f '#f '#t '#f) (f2acd@f296c@install-library 'f5148 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . f50b8) (vector-sort . f50b7) (list-sort . f50b6)) '() values values '#f '#f '#t '#f) (f2acd@f296c@install-library 'f5149 '(rnrs base) '(6) '() '() '() '((zero? . f4f6f) (vector? . f4f6e) (vector-set! . f4f6d) (vector-ref . f4f6c) (vector-map . f4f6b) (vector-length . f4f6a) (vector-for-each . f4f69) (vector-fill! . f4f68) (vector->list . f4f67) (vector . f4f66) (values . f4f65) (truncate . f4f64) (tan . f4f63) (symbol? . f4f62) (symbol=? . f4f61) (symbol->string . f4f60) (substring . f4f5f) (string? . f4f5e) (string>? . f4f5d) (string>=? . f4f5c) (string=? . f4f5b) (string<? . f4f5a) (string<=? . f4f59) (string-ref . f4f58) (string-length . f4f57) (string-for-each . f4f56) (string-copy . f4f55) (string-append . f4f54) (string->symbol . f4f53) (string->number . f4f52) (string->list . f4f51) (string . f4f50) (sqrt . f4f4f) (sin . f4f4e) (round . f4f4d) (reverse . f4f4c) (real? . f4f4b) (real-valued? . f4f4a) (real-part . f4f49) (rationalize . f4f48) (rational? . f4f47) (rational-valued? . f4f46) (procedure? . f4f45) (positive? . f4f44) (pair? . f4f43) (odd? . f4f42) (numerator . f4f41) (number? . f4f40) (number->string . f4f3f) (null? . f4f3e) (not . f4f3d) (negative? . f4f3c) (nan? . f4f3b) (min . f4f3a) (max . f4f39) (map . f4f38) (make-vector . f4f37) (make-string . f4f36) (make-rectangular . f4f35) (make-polar . f4f34) (magnitude . f4f33) (log . f4f32) (list? . f4f31) (list-tail . f4f30) (list-ref . f4f2f) (list->vector . f4f2e) (list->string . f4f2d) (list . f4f2c) (length . f4f2b) (lcm . f4f2a) (integer? . f4f29) (integer-valued? . f4f28) (integer->char . f4f27) (infinite? . f4f26) (inexact? . f4f25) (inexact . f4f24) (imag-part . f4f23) (gcd . f4f22) (for-each . f4f21) (floor . f4f20) (finite? . f4f1f) (expt . f4f1e) (exp . f4f1d) (exact? . f4f1c) (exact-integer-sqrt . f4f1b) (exact . f4f1a) (even? . f4f19) (error . f4f18) (eqv? . f4f17) (equal? . f4f16) (eq? . f4f15) (dynamic-wind . f4f14) (div0-and-mod0 . f4f13) (mod0 . f4f12) (div0 . f4f11) (div-and-mod . f4f10) (mod . f4f0f) (div . f4f0e) (denominator . f4f0d) (cos . f4f0c) (cons . f4f0b) (complex? . f4f0a) (char? . f4f09) (char>? . f4f08) (char>=? . f4f07) (char=? . f4f06) (char<? . f4f05) (char<=? . f4f04) (char->integer . f4f03) (ceiling . f4f02) (call-with-values . f4f01) (call/cc . f4f00) (call-with-current-continuation . f4eff) (cddddr . f4efe) (cdddar . f4efd) (cddadr . f4efc) (cddaar . f4efb) (cdaddr . f4efa) (cdadar . f4ef9) (cdaadr . f4ef8) (cdaaar . f4ef7) (cadddr . f4ef6) (caddar . f4ef5) (cadadr . f4ef4) (cadaar . f4ef3) (caaddr . f4ef2) (caadar . f4ef1) (caaadr . f4ef0) (caaaar . f4eef) (cdddr . f4eee) (cddar . f4eed) (cdadr . f4eec) (cdaar . f4eeb) (caddr . f4eea) (cadar . f4ee9) (caadr . f4ee8) (caaar . f4ee7) (cddr . f4ee6) (cdar . f4ee5) (cadr . f4ee4) (caar . f4ee3) (cdr . f4ee2) (car . f4ee1) (boolean? . f4ee0) (boolean=? . f4edf) (atan . f4ede) (assertion-violation . f4edd) (asin . f4edc) (apply . f4edb) (append . f4eda) (angle . f4ed9) (acos . f4ed8) (abs . f4ed7) (/ . f4ed6) (* . f4ed5) (- . f4ed4) (+ . f4ed3) (>= . f4ed2) (> . f4ed1) (= . f4ed0) (<= . f4ecf) (< . f4ece) (unquote-splicing . f4e9b) (unquote . f4e9a) (_ . f4e99) (else . f4e98) (=> . f4e97) (... . f4e96) (assert . f4e95) (cond . f4e90) (let* . f4e8f) (let . f4e8e) (let*-values . f4e8d) (let-values . f4e8c) (identifier-syntax . f4e8b) (quasiquote . f4e88) (syntax-rules . f4e87) (case . f4e82) (or . f4e7e) (and . f4e7d) (if . f4e7c) (letrec* . f4e7b) (letrec . f4e7a) (lambda . f4e77) (quote . f4e74) (letrec-syntax . f4e72) (let-syntax . f4e71) (set! . f4e70) (begin . f4e6e) (define-syntax . f4e6c) (define . f4e6b)) '() values values '#f '#f '#t '#f) (f2acd@f296c@install-library 'f514a '(rnrs lists) '(6) '() '() '() '((remove . f5045) (remv . f5044) (remp . f5043) (remq . f5042) (partition . f5041) (memv . f5040) (memq . f503f) (memp . f503e) (member . f503d) (exists . f503c) (for-all . f503b) (fold-right . f503a) (fold-left . f5039) (find . f5038) (filter . f5037) (cons* . f5036) (assv . f5035) (assq . f5034) (assp . f5033) (assoc . f5032)) '() values values '#f '#f '#t '#f) (f2acd@f296c@install-library 'f514b '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . f50a0) (call-with-input-file . f509f) (write-char . f509e) (write . f509d) (with-output-to-file . f509c) (with-input-from-file . f509b) (read-char . f509a) (read . f5099) (peek-char . f5098) (open-output-file . f5097) (open-input-file . f5096) (newline . f5095) (display . f5094) (close-output-port . f5093) (close-input-port . f5092) (eof-object? . f5091) (eof-object . f5090) (current-error-port . f508f) (current-output-port . f508e) (current-input-port . f508d) (output-port? . f508c) (input-port? . f508b) (make-i/o-write-error . f4b60) (make-i/o-read-error . f4b4b) (make-i/o-port-error . f4c01) (make-i/o-invalid-position-error . f4b77) (make-i/o-filename-error . f4b92) (make-i/o-file-protection-error . f4bab) (make-i/o-file-is-read-only-error . f4bc0) (make-i/o-file-does-not-exist-error . f4bea) (make-i/o-file-already-exists-error . f4bd5) (make-i/o-error . f4b36) (i/o-write-error? . f4b62) (i/o-read-error? . f4b4d) (i/o-port-error? . f4c05) (i/o-invalid-position-error? . f4b7b) (i/o-filename-error? . f4b96) (i/o-file-protection-error? . f4bad) (i/o-file-is-read-only-error? . f4bc2) (i/o-file-does-not-exist-error? . f4bec) (i/o-file-already-exists-error? . f4bd7) (i/o-error? . f4b38) (i/o-error-position . f4b7d) (i/o-error-port . f4c07) (i/o-error-filename . f4b98) (&i/o-port . f4ec8) (&i/o-file-does-not-exist . f4ec7) (&i/o-file-already-exists . f4ec6) (&i/o-file-is-read-only . f4ec5) (&i/o-file-protection . f4ec4) (&i/o-filename . f4ec3) (&i/o-invalid-position . f4ec2) (&i/o-write . f4ec1) (&i/o-read . f4ec0) (&i/o . f4ebf)) '() values values '#f '#f '#t '#f) (f2acd@f296c@install-library 'f514c '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . f5061) (utf32->string . f5016) (utf16->string . f5015) (utf8->string . f5014) (uint-list->bytevector . f5013) (u8-list->bytevector . f5012) (string->utf8 . f5011) (string->utf32 . f5010) (string->utf16 . f500f) (sint-list->bytevector . f500e) (native-endianness . f500d) (bytevector? . f500c) (bytevector=? . f500b) (bytevector-uint-set! . f500a) (bytevector-uint-ref . f5009) (bytevector-u8-set! . f5008) (bytevector-u8-ref . f5007) (bytevector-u64-set! . f5006) (bytevector-u64-ref . f5005) (bytevector-u64-native-set! . f5004) (bytevector-u64-native-ref . f5003) (bytevector-u32-set! . f5002) (bytevector-u32-ref . f5001) (bytevector-u32-native-set! . f5000) (bytevector-u32-native-ref . f4fff) (bytevector-u16-set! . f4ffe) (bytevector-u16-ref . f4ffd) (bytevector-u16-native-set! . f4ffc) (bytevector-u16-native-ref . f4ffb) (bytevector-sint-set! . f4ffa) (bytevector-sint-ref . f4ff9) (bytevector-s8-set! . f4ff8) (bytevector-s8-ref . f4ff7) (bytevector-s64-set! . f4ff6) (bytevector-s64-ref . f4ff5) (bytevector-s64-native-set! . f4ff4) (bytevector-s64-native-ref . f4ff3) (bytevector-s32-set! . f4ff2) (bytevector-s32-ref . f4ff1) (bytevector-s32-native-set! . f4ff0) (bytevector-s32-native-ref . f4fef) (bytevector-s16-set! . f4fee) (bytevector-s16-ref . f4fed) (bytevector-s16-native-set! . f4fec) (bytevector-s16-native-ref . f4feb) (bytevector-length . f4fea) (bytevector-ieee-single-ref . f4fe9) (bytevector-ieee-single-set! . f4fe8) (bytevector-ieee-single-native-set! . f4fe7) (bytevector-ieee-single-native-ref . f4fe6) (bytevector-ieee-double-set! . f4fe5) (bytevector-ieee-double-ref . f4fe4) (bytevector-ieee-double-native-set! . f4fe3) (bytevector-ieee-double-native-ref . f4fe2) (bytevector-fill! . f4fe1) (bytevector-copy! . f4fe0) (bytevector-copy . f4fdf) (bytevector->uint-list . f4fde) (bytevector->u8-list . f4fdd) (bytevector->sint-list . f4fdc) (endianness . f4e94)) '() values values '#f '#f '#t '#f) (f2acd@f296c@install-library 'f514d '(rnrs unicode) '(6) '() '() '() '((string-upcase . f50e8) (string-titlecase . f50e7) (string-normalize-nfkd . f50e6) (string-normalize-nfkc . f50e5) (string-normalize-nfd . f50e4) (string-normalize-nfc . f50e3) (string-foldcase . f50e2) (string-downcase . f50e1) (string-ci>? . f50e0) (string-ci>=? . f50df) (string-ci=? . f50de) (string-ci<? . f50dd) (string-ci<=? . f50dc) (char-whitespace? . f50db) (char-upper-case? . f50da) (char-title-case? . f50d9) (char-numeric? . f50d8) (char-lower-case? . f50d7) (char-general-category . f50d6) (char-upcase . f50d5) (char-titlecase . f50d4) (char-foldcase . f50d3) (char-downcase . f50d2) (char-ci>? . f50d1) (char-ci>=? . f50d0) (char-ci=? . f50cf) (char-ci<? . f50ce) (char-ci<=? . f50cd) (char-alphabetic? . f50cc)) '() values values '#f '#f '#t '#f) (f2acd@f296c@install-library 'f514e '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . f502b) (raise-continuable . f502a) (raise . f5029) (guard . f4ea0) (else . f4e98) (=> . f4e97)) '() values values '#f '#f '#t '#f) (f2acd@f296c@install-library 'f514f '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . f4f80) (bitwise-reverse-bit-field . f4f7f) (bitwise-length . f4f7e) (bitwise-if . f4f7d) (bitwise-first-bit-set . f4f7c) (bitwise-copy-bit-field . f4f7b) (bitwise-copy-bit . f4f7a) (bitwise-bit-set? . f4f79) (bitwise-bit-field . f4f78) (bitwise-bit-count . f4f77) (bitwise-xor . f4f76) (bitwise-ior . f4f75) (bitwise-and . f4f74) (bitwise-not . f4f73) (bitwise-arithmetic-shift-right . f4f72) (bitwise-arithmetic-shift-left . f4f71) (bitwise-arithmetic-shift . f4f70)) '() values values '#f '#f '#t '#f) (f2acd@f296c@install-library 'f5150 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . f4fad) (fxxor . f4fac) (fxrotate-bit-field . f4fab) (fxreverse-bit-field . f4faa) (fxpositive? . f4fa9) (fxodd? . f4fa8) (fxnot . f4fa7) (fxnegative? . f4fa6) (fxmod0 . f4fa5) (fxmod . f4fa4) (fxmin . f4fa3) (fxmax . f4fa2) (fxlength . f4fa1) (fxior . f4fa0) (fxif . f4f9f) (fxfirst-bit-set . f4f9e) (fxeven? . f4f9d) (fxdiv0-and-mod0 . f4f9c) (fxdiv0 . f4f9b) (fxdiv-and-mod . f4f9a) (fxdiv . f4f99) (fxcopy-bit-field . f4f98) (fxcopy-bit . f4f97) (fxbit-set? . f4f96) (fxbit-field . f4f95) (fxbit-count . f4f94) (fxarithmetic-shift-right . f4f93) (fxarithmetic-shift-left . f4f92) (fxarithmetic-shift . f4f91) (fxand . f4f90) (fx>? . f4f8f) (fx>=? . f4f8e) (fx=? . f4f8d) (fx<? . f4f8c) (fx<=? . f4f8b) (fx-/carry . f4f8a) (fx- . f4f89) (fx+/carry . f4f88) (fx+ . f4f87) (fx*/carry . f4f86) (fx* . f4f85) (greatest-fixnum . f4f84) (least-fixnum . f4f83) (fixnum-width . f4f82) (fixnum? . f4f81)) '() values values '#f '#f '#t '#f) (f2acd@f296c@install-library 'f5151 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . f4c61) (no-infinities-violation? . f4c4c) (make-no-nans-violation . f4c5f) (make-no-infinities-violation . f4c4a) (real->flonum . f4fdb) (flzero? . f4fda) (fltruncate . f4fd9) (fltan . f4fd8) (flsqrt . f4fd7) (flsin . f4fd6) (flround . f4fd5) (flpositive? . f4fd4) (flonum? . f4fd3) (flodd? . f4fd2) (flnumerator . f4fd1) (flnegative? . f4fd0) (flnan? . f4fcf) (flmod0 . f4fce) (flmod . f4fcd) (flmin . f4fcc) (flmax . f4fcb) (fllog . f4fca) (flinteger? . f4fc9) (flinfinite? . f4fc8) (flfloor . f4fc7) (flfinite? . f4fc6) (flexpt . f4fc5) (flexp . f4fc4) (fleven? . f4fc3) (fldiv0-and-mod0 . f4fc2) (fldiv0 . f4fc1) (fldiv-and-mod . f4fc0) (fldiv . f4fbf) (fldenominator . f4fbe) (flcos . f4fbd) (flceiling . f4fbc) (flatan . f4fbb) (flasin . f4fba) (flacos . f4fb9) (flabs . f4fb8) (fl>? . f4fb7) (fl>=? . f4fb6) (fl=? . f4fb5) (fl<? . f4fb4) (fl<=? . f4fb3) (fl/ . f4fb2) (fl- . f4fb1) (fl+ . f4fb0) (fl* . f4faf) (fixnum->flonum . f4fae) (&no-nans . f4ecc) (&no-infinities . f4ecb)) '() values values '#f '#f '#t '#f) (f2acd@f296c@install-library 'f5152 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . f50b5) (string-ci-hash . f50b4) (string-hash . f50b3) (equal-hash . f50b2) (hashtable-equivalence-function . f50b1) (make-hashtable . f50b0) (hashtable-hash-function . f50af) (make-eqv-hashtable . f50ae) (make-eq-hashtable . f50ad) (hashtable? . f50ac) (hashtable-update! . f50ab) (hashtable-size . f50aa) (hashtable-set! . f50a9) (hashtable-ref . f50a8) (hashtable-mutable? . f50a7) (hashtable-keys . f50a6) (hashtable-entries . f50a5) (hashtable-delete! . f50a4) (hashtable-copy . f50a3) (hashtable-contains? . f50a2) (hashtable-clear! . f50a1)) '() values values '#f '#f '#t '#f) (f2acd@f296c@install-library 'f5153 '(rnrs io ports) '(6) '() '() '() '((eof-object? . f5091) (eof-object . f5090) (current-error-port . f508f) (current-output-port . f508e) (current-input-port . f508d) (output-port? . f508c) (input-port? . f508b) (utf-8-codec . f508a) (utf-16-codec . f5089) (transcoder-error-handling-mode . f5088) (transcoder-eol-style . f5087) (transcoder-codec . f5086) (transcoded-port . f5085) (textual-port? . f5084) (string->bytevector . f5083) (standard-output-port . f5082) (standard-input-port . f5081) (standard-error-port . f5080) (set-port-position! . f507f) (put-u8 . f507e) (put-string . f507d) (put-datum . f507c) (put-char . f507b) (put-bytevector . f507a) (port? . f5079) (port-transcoder . f5078) (port-position . f5077) (port-has-set-port-position!? . f5076) (port-has-port-position? . f5075) (port-eof? . f5074) (output-port-buffer-mode . f5073) (open-string-output-port . f5072) (open-string-input-port . f5071) (open-file-output-port . f5070) (open-file-input/output-port . f506f) (open-file-input-port . f506e) (open-bytevector-output-port . f506d) (open-bytevector-input-port . f506c) (native-transcoder . f506b) (native-eol-style . f506a) (make-transcoder . f5069) (latin-1-codec . f5068) (make-i/o-write-error . f4b60) (make-i/o-read-error . f4b4b) (make-i/o-port-error . f4c01) (make-i/o-invalid-position-error . f4b77) (make-i/o-filename-error . f4b92) (make-i/o-file-protection-error . f4bab) (make-i/o-file-is-read-only-error . f4bc0) (make-i/o-file-does-not-exist-error . f4bea) (make-i/o-file-already-exists-error . f4bd5) (make-i/o-error . f4b36) (make-i/o-encoding-error . f4c31) (make-i/o-decoding-error . f4c1a) (make-custom-textual-output-port . f5067) (make-custom-textual-input/output-port . f5066) (make-custom-textual-input-port . f5065) (make-custom-binary-output-port . f5064) (make-custom-binary-input/output-port . f5063) (make-custom-binary-input-port . f5062) (lookahead-u8 . f5060) (lookahead-char . f505f) (i/o-write-error? . f4b62) (i/o-read-error? . f4b4d) (i/o-port-error? . f4c05) (i/o-invalid-position-error? . f4b7b) (i/o-filename-error? . f4b96) (i/o-file-protection-error? . f4bad) (i/o-file-is-read-only-error? . f4bc2) (i/o-file-does-not-exist-error? . f4bec) (i/o-file-already-exists-error? . f4bd7) (i/o-error? . f4b38) (i/o-error-position . f4b7d) (i/o-error-port . f4c07) (i/o-error-filename . f4b98) (i/o-encoding-error? . f4c35) (i/o-encoding-error-char . f4c37) (i/o-decoding-error? . f4c1c) (get-u8 . f505e) (get-string-n! . f505d) (get-string-n . f505c) (get-string-all . f505b) (get-line . f505a) (get-datum . f5059) (get-char . f5058) (get-bytevector-some . f5057) (get-bytevector-n! . f5056) (get-bytevector-n . f5055) (get-bytevector-all . f5054) (flush-output-port . f5053) (close-port . f5052) (call-with-string-output-port . f5031) (call-with-port . f5030) (call-with-bytevector-output-port . f502f) (bytevector->string . f502e) (buffer-mode? . f502d) (binary-port? . f502c) (&i/o-encoding . f4eca) (&i/o-decoding . f4ec9) (&i/o-port . f4ec8) (&i/o-file-does-not-exist . f4ec7) (&i/o-file-already-exists . f4ec6) (&i/o-file-is-read-only . f4ec5) (&i/o-file-protection . f4ec4) (&i/o-filename . f4ec3) (&i/o-invalid-position . f4ec2) (&i/o-write . f4ec1) (&i/o-read . f4ec0) (&i/o . f4ebf) (error-handling-mode . f4ea4) (file-options . f4ea3) (buffer-mode . f4ea2) (eol-style . f4ea1)) '() values values '#f '#f '#t '#f) (f2acd@f296c@install-library 'f5154 '(rnrs enums) '(6) '() '() '() '((make-enumeration . f5028) (enum-set=? . f5027) (enum-set-universe . f5026) (enum-set-union . f5025) (enum-set-subset? . f5024) (enum-set-projection . f5023) (enum-set-member? . f5022) (enum-set-intersection . f5021) (enum-set-indexer . f5020) (enum-set-difference . f501f) (enum-set-constructor . f501e) (enum-set-complement . f501d) (enum-set->list . f501c) (define-enumeration . f4eaf)) '() values values '#f '#f '#t '#f) (f2acd@f296c@install-library 'f5155 '(rnrs conditions) '(6) '() '() '() '((who-condition? . f4aac) (warning? . f4a24) (violation? . f4a63) (undefined-violation? . f4b23) (syntax-violation? . f4b0a) (syntax-violation-subform . f4b0e) (syntax-violation-form . f4b0c) (syntax-violation . f2f9e) (simple-conditions . f501b) (serious-condition? . f4a39) (non-continuable-violation? . f4ac3) (message-condition? . f4a0d) (make-who-condition . f4aa8) (make-warning . f4a22) (make-violation . f4a61) (make-undefined-violation . f4b21) (make-syntax-violation . f4b04) (make-serious-condition . f4a37) (make-non-continuable-violation . f4ac1) (make-message-condition . f4a09) (make-lexical-violation . f4aeb) (make-irritants-condition . f4a8d) (make-implementation-restriction-violation . f4ad6) (make-error . f4a4c) (make-assertion-violation . f4a76) (lexical-violation? . f4aed) (irritants-condition? . f4a91) (implementation-restriction-violation? . f4ad8) (error? . f4a4e) (condition-who . f4aae) (condition-predicate . f501a) (condition-message . f4a0f) (condition-irritants . f4a93) (condition-accessor . f5019) (condition . f5018) (assertion-violation? . f4a78) (condition? . f5017) (&undefined . f4ebe) (&syntax . f4ebd) (&lexical . f4ebc) (&implementation-restriction . f4ebb) (&non-continuable . f4eba) (&who . f4eb9) (&irritants . f4eb8) (&assertion . f4eb7) (&violation . f4eb6) (&error . f4eb5) (&serious . f4eb4) (&warning . f4eb3) (&message . f4eb2) (&condition . f4eb1) (define-condition-type . f4eb0)) '() values values '#f '#f '#t '#f) (f2acd@f296c@install-library 'f5156 '(rnrs records inspection) '(6) '() '() '() '((record? . f50c4) (record-type-uid . f50c3) (record-type-sealed? . f50c2) (record-type-parent . f50c1) (record-type-opaque? . f50c0) (record-type-name . f50bf) (record-type-generative? . f50be) (record-type-field-names . f50bd) (record-rtd . f50bc) (record-field-mutable? . f50bb)) '() values values '#f '#f '#t '#f) (f2acd@f296c@install-library 'f5157 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . f50cb) (record-predicate . f50ca) (record-mutator . f50c9) (record-constructor . f50c8) (record-accessor . f50c7) (make-record-type-descriptor . f50c6) (make-record-constructor-descriptor . f50c5)) '() values values '#f '#f '#t '#f) (f2acd@f296c@install-library 'f5158 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . f4eae) (parent-rtd . f4ead) (nongenerative . f4eac) (opaque . f4eab) (sealed . f4eaa) (protocol . f4ea9) (parent . f4ea8) (immutable . f4ea7) (mutable . f4ea6) (fields . f4ea5) (record-constructor-descriptor . f4e84) (record-type-descriptor . f4e83)) '() values values '#f '#f '#t '#f) (f2acd@f296c@install-library 'f5159 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . f4c65) (&no-nans-rtd . f4c63) (&no-infinities-rcd . f4c50) (&no-infinities-rtd . f4c4e) (&i/o-encoding-rcd . f4c3b) (&i/o-encoding-rtd . f4c39) (&i/o-decoding-rcd . f4c20) (&i/o-decoding-rtd . f4c1e) (&i/o-port-rcd . f4c0b) (&i/o-port-rtd . f4c09) (&i/o-file-does-not-exist-rcd . f4bf0) (&i/o-file-does-not-exist-rtd . f4bee) (&i/o-file-already-exists-rcd . f4bdb) (&i/o-file-already-exists-rtd . f4bd9) (&i/o-file-is-read-only-rcd . f4bc6) (&i/o-file-is-read-only-rtd . f4bc4) (&i/o-file-protection-rcd . f4bb1) (&i/o-file-protection-rtd . f4baf) (&i/o-filename-rcd . f4b9c) (&i/o-filename-rtd . f4b9a) (&i/o-invalid-position-rcd . f4b81) (&i/o-invalid-position-rtd . f4b7f) (&i/o-write-rcd . f4b66) (&i/o-write-rtd . f4b64) (&i/o-read-rcd . f4b51) (&i/o-read-rtd . f4b4f) (&i/o-rcd . f4b3c) (&i/o-rtd . f4b3a) (&undefined-rcd . f4b27) (&undefined-rtd . f4b25) (&syntax-rcd . f4b12) (&syntax-rtd . f4b10) (&lexical-rcd . f4af1) (&lexical-rtd . f4aef) (&implementation-restriction-rcd . f4adc) (&implementation-restriction-rtd . f4ada) (&non-continuable-rcd . f4ac7) (&non-continuable-rtd . f4ac5) (&who-rcd . f4ab2) (&who-rtd . f4ab0) (&irritants-rcd . f4a97) (&irritants-rtd . f4a95) (&assertion-rcd . f4a7c) (&assertion-rtd . f4a7a) (&violation-rcd . f4a67) (&violation-rtd . f4a65) (&error-rcd . f4a52) (&error-rtd . f4a50) (&serious-rcd . f4a3d) (&serious-rtd . f4a3b) (&warning-rcd . f4a28) (&warning-rtd . f4a26) (&message-rcd . f4a13) (&message-rtd . f4a11) (&condition-rcd . f49b4) (&condition-rtd . f49b2) (syntax-error . f2f9a) (syntax-dispatch . f2eb5) (pretty-print . f5139) (eval-core . f5138) (set-symbol-value! . f5137) (symbol-value . f5136) (gensym . f5135) (void . f5134) (load . f4d72) (interaction-environment . f2faa) (char-ready? . f5133) (regexp? . f5132) (read-line . f5131) (ungensym . f5130) (alist->eq-hash-table . f512f) (assoc-ref . f512e) (print . f512d) (format . f512c) (host-os . f512b) (library-path . f294b) (standard-library-path . f512a) (file-newer? . f5129) (stat-mtime . f5128) (write-to-file . f5127) (file->list . f5126) (file->string . f5125) (digit->integer . f5124) (call-with-string-input-port . f5123) (call-with-string-io . f5122) (string-split . f5121) (bytevector-for-each . f5120) (string->regexp . f511f) (rxmatch . f511e) (regexp-replace-all . f511d) (hashtable-for-each . f511c) (call-process . f511b) (local-tz-offset . f511a) (microseconds . f5119) (readdir . f5118) (set-current-directory! . f5117) (expand-path . f5116) (current-directory . f5115) (%spawn . f5114) (%waitpid . f5113) (%ffi-supported? . f5112) (%ffi-pointer-ref . f5111) (%ffi-pointer->string . f5110) (%ffi-call->string-or-zero . f510f) (%ffi-call->double . f510e) (%ffi-call->void* . f510d) (%ffi-call->void . f510c) (%ffi-call->int . f510b) (%ffi-lookup . f510a) (%ffi-open . f5109) (%fork . f5108) (%pipe . f5107) (p . f5106) (open-output-string . f5105) (get-output-string . f5104) (get-environment-variables . f5103) (get-environment-variable . f5102) (get-timeofday . f5101) (get-command-line . f5100) (sys-display . f50ff) (mosh-executable-path . f50fe) (make-file-options . f50fd) (source-info . f50fc) (make-compiler-instruction . f50fb) (make-instruction . f50fa) (set-source-info! . f50f9) (bignum? . f50f8) (fast-equal? . f50f7) (fasl-read . f50f6) (fasl-write . f50f5) (time-usage . f50f4) (os-constant . f50f3) (make-parameter . f277e) (socket-port . f50f2) (socket-shutdown . f50f1) (socket-close . f50f0) (socket-send . f50ef) (socket-recv! . f50ee) (socket-recv . f50ed) (make-server-socket . f50ec) (make-client-socket . f50eb) (socket-accept . f50ea) (socket? . f50e9) (string-upcase . f50e8) (string-titlecase . f50e7) (string-normalize-nfkd . f50e6) (string-normalize-nfkc . f50e5) (string-normalize-nfd . f50e4) (string-normalize-nfc . f50e3) (string-foldcase . f50e2) (string-downcase . f50e1) (string-ci>? . f50e0) (string-ci>=? . f50df) (string-ci=? . f50de) (string-ci<? . f50dd) (string-ci<=? . f50dc) (char-whitespace? . f50db) (char-upper-case? . f50da) (char-title-case? . f50d9) (char-numeric? . f50d8) (char-lower-case? . f50d7) (char-general-category . f50d6) (char-upcase . f50d5) (char-titlecase . f50d4) (char-foldcase . f50d3) (char-downcase . f50d2) (char-ci>? . f50d1) (char-ci>=? . f50d0) (char-ci=? . f50cf) (char-ci<? . f50ce) (char-ci<=? . f50cd) (char-alphabetic? . f50cc) (make-variable-transformer . f2ce2) (identifier? . f2fa0) (generate-temporaries . f2f8c) (free-identifier=? . f2f8e) (syntax->datum . f2fa4) (datum->syntax . f2fa2) (bound-identifier=? . f2f90) (record-type-descriptor? . f50cb) (record-predicate . f50ca) (record-mutator . f50c9) (record-constructor . f50c8) (record-accessor . f50c7) (make-record-type-descriptor . f50c6) (make-record-constructor-descriptor . f50c5) (record? . f50c4) (record-type-uid . f50c3) (record-type-sealed? . f50c2) (record-type-parent . f50c1) (record-type-opaque? . f50c0) (record-type-name . f50bf) (record-type-generative? . f50be) (record-type-field-names . f50bd) (record-rtd . f50bc) (record-field-mutable? . f50bb) (delete-file . f50ba) (file-exists? . f50b9) (vector-sort! . f50b8) (vector-sort . f50b7) (list-sort . f50b6) (symbol-hash . f50b5) (string-ci-hash . f50b4) (string-hash . f50b3) (equal-hash . f50b2) (hashtable-equivalence-function . f50b1) (make-hashtable . f50b0) (hashtable-hash-function . f50af) (make-eqv-hashtable . f50ae) (make-eq-hashtable . f50ad) (hashtable? . f50ac) (hashtable-update! . f50ab) (hashtable-size . f50aa) (hashtable-set! . f50a9) (hashtable-ref . f50a8) (hashtable-mutable? . f50a7) (hashtable-keys . f50a6) (hashtable-entries . f50a5) (hashtable-delete! . f50a4) (hashtable-copy . f50a3) (hashtable-contains? . f50a2) (hashtable-clear! . f50a1) (call-with-output-file . f50a0) (call-with-input-file . f509f) (write-char . f509e) (write . f509d) (with-output-to-file . f509c) (with-input-from-file . f509b) (read-char . f509a) (read . f5099) (peek-char . f5098) (open-output-file . f5097) (open-input-file . f5096) (newline . f5095) (display . f5094) (close-output-port . f5093) (close-input-port . f5092) (eof-object? . f5091) (eof-object . f5090) (current-error-port . f508f) (current-output-port . f508e) (current-input-port . f508d) (output-port? . f508c) (input-port? . f508b) (utf-8-codec . f508a) (utf-16-codec . f5089) (transcoder-error-handling-mode . f5088) (transcoder-eol-style . f5087) (transcoder-codec . f5086) (transcoded-port . f5085) (textual-port? . f5084) (string->bytevector . f5083) (standard-output-port . f5082) (standard-input-port . f5081) (standard-error-port . f5080) (set-port-position! . f507f) (put-u8 . f507e) (put-string . f507d) (put-datum . f507c) (put-char . f507b) (put-bytevector . f507a) (port? . f5079) (port-transcoder . f5078) (port-position . f5077) (port-has-set-port-position!? . f5076) (port-has-port-position? . f5075) (port-eof? . f5074) (output-port-buffer-mode . f5073) (open-string-output-port . f5072) (open-string-input-port . f5071) (open-file-output-port . f5070) (open-file-input/output-port . f506f) (open-file-input-port . f506e) (open-bytevector-output-port . f506d) (open-bytevector-input-port . f506c) (native-transcoder . f506b) (native-eol-style . f506a) (make-transcoder . f5069) (latin-1-codec . f5068) (make-i/o-write-error . f4b60) (make-i/o-read-error . f4b4b) (make-i/o-port-error . f4c01) (make-i/o-invalid-position-error . f4b77) (make-i/o-filename-error . f4b92) (make-i/o-file-protection-error . f4bab) (make-i/o-file-is-read-only-error . f4bc0) (make-i/o-file-does-not-exist-error . f4bea) (make-i/o-file-already-exists-error . f4bd5) (make-i/o-error . f4b36) (make-i/o-encoding-error . f4c31) (make-i/o-decoding-error . f4c1a) (make-custom-textual-output-port . f5067) (make-custom-textual-input/output-port . f5066) (make-custom-textual-input-port . f5065) (make-custom-binary-output-port . f5064) (make-custom-binary-input/output-port . f5063) (make-custom-binary-input-port . f5062) (make-bytevector . f5061) (lookahead-u8 . f5060) (lookahead-char . f505f) (i/o-write-error? . f4b62) (i/o-read-error? . f4b4d) (i/o-port-error? . f4c05) (i/o-invalid-position-error? . f4b7b) (i/o-filename-error? . f4b96) (i/o-file-protection-error? . f4bad) (i/o-file-is-read-only-error? . f4bc2) (i/o-file-does-not-exist-error? . f4bec) (i/o-file-already-exists-error? . f4bd7) (i/o-error? . f4b38) (i/o-error-position . f4b7d) (i/o-error-port . f4c07) (i/o-error-filename . f4b98) (i/o-encoding-error? . f4c35) (i/o-encoding-error-char . f4c37) (i/o-decoding-error? . f4c1c) (get-u8 . f505e) (get-string-n! . f505d) (get-string-n . f505c) (get-string-all . f505b) (get-line . f505a) (get-datum . f5059) (get-char . f5058) (get-bytevector-some . f5057) (get-bytevector-n! . f5056) (get-bytevector-n . f5055) (get-bytevector-all . f5054) (flush-output-port . f5053) (close-port . f5052) (scheme-report-environment . f2f7a) (quotient . f5051) (null-environment . f2f78) (remainder . f5050) (modulo . f504f) (inexact->exact . f504e) (force . f504d) (exact->inexact . f504c) (make-promise . f504b) (exit . f504a) (command-line . f4d6c) (string-fill! . f5049) (string-set! . f5048) (set-cdr! . f5047) (set-car! . f5046) (remove . f5045) (remv . f5044) (remp . f5043) (remq . f5042) (partition . f5041) (memv . f5040) (memq . f503f) (memp . f503e) (member . f503d) (exists . f503c) (for-all . f503b) (fold-right . f503a) (fold-left . f5039) (find . f5038) (filter . f5037) (cons* . f5036) (assv . f5035) (assq . f5034) (assp . f5033) (assoc . f5032) (call-with-string-output-port . f5031) (call-with-port . f5030) (call-with-bytevector-output-port . f502f) (bytevector->string . f502e) (buffer-mode? . f502d) (binary-port? . f502c) (with-exception-handler . f502b) (raise-continuable . f502a) (raise . f5029) (eval . f2f7e) (environment . f2f76) (make-enumeration . f5028) (enum-set=? . f5027) (enum-set-universe . f5026) (enum-set-union . f5025) (enum-set-subset? . f5024) (enum-set-projection . f5023) (enum-set-member? . f5022) (enum-set-intersection . f5021) (enum-set-indexer . f5020) (enum-set-difference . f501f) (enum-set-constructor . f501e) (enum-set-complement . f501d) (enum-set->list . f501c) (who-condition? . f4aac) (warning? . f4a24) (violation? . f4a63) (undefined-violation? . f4b23) (syntax-violation? . f4b0a) (syntax-violation-subform . f4b0e) (syntax-violation-form . f4b0c) (syntax-violation . f2f9e) (simple-conditions . f501b) (serious-condition? . f4a39) (non-continuable-violation? . f4ac3) (message-condition? . f4a0d) (make-who-condition . f4aa8) (make-warning . f4a22) (make-violation . f4a61) (make-undefined-violation . f4b21) (make-syntax-violation . f4b04) (make-serious-condition . f4a37) (make-non-continuable-violation . f4ac1) (make-message-condition . f4a09) (make-lexical-violation . f4aeb) (make-irritants-condition . f4a8d) (make-implementation-restriction-violation . f4ad6) (make-error . f4a4c) (make-assertion-violation . f4a76) (lexical-violation? . f4aed) (irritants-condition? . f4a91) (implementation-restriction-violation? . f4ad8) (error? . f4a4e) (condition-who . f4aae) (condition-predicate . f501a) (condition-message . f4a0f) (condition-irritants . f4a93) (condition-accessor . f5019) (condition . f5018) (assertion-violation? . f4a78) (condition? . f5017) (utf32->string . f5016) (utf16->string . f5015) (utf8->string . f5014) (uint-list->bytevector . f5013) (u8-list->bytevector . f5012) (string->utf8 . f5011) (string->utf32 . f5010) (string->utf16 . f500f) (sint-list->bytevector . f500e) (native-endianness . f500d) (bytevector? . f500c) (bytevector=? . f500b) (bytevector-uint-set! . f500a) (bytevector-uint-ref . f5009) (bytevector-u8-set! . f5008) (bytevector-u8-ref . f5007) (bytevector-u64-set! . f5006) (bytevector-u64-ref . f5005) (bytevector-u64-native-set! . f5004) (bytevector-u64-native-ref . f5003) (bytevector-u32-set! . f5002) (bytevector-u32-ref . f5001) (bytevector-u32-native-set! . f5000) (bytevector-u32-native-ref . f4fff) (bytevector-u16-set! . f4ffe) (bytevector-u16-ref . f4ffd) (bytevector-u16-native-set! . f4ffc) (bytevector-u16-native-ref . f4ffb) (bytevector-sint-set! . f4ffa) (bytevector-sint-ref . f4ff9) (bytevector-s8-set! . f4ff8) (bytevector-s8-ref . f4ff7) (bytevector-s64-set! . f4ff6) (bytevector-s64-ref . f4ff5) (bytevector-s64-native-set! . f4ff4) (bytevector-s64-native-ref . f4ff3) (bytevector-s32-set! . f4ff2) (bytevector-s32-ref . f4ff1) (bytevector-s32-native-set! . f4ff0) (bytevector-s32-native-ref . f4fef) (bytevector-s16-set! . f4fee) (bytevector-s16-ref . f4fed) (bytevector-s16-native-set! . f4fec) (bytevector-s16-native-ref . f4feb) (bytevector-length . f4fea) (bytevector-ieee-single-ref . f4fe9) (bytevector-ieee-single-set! . f4fe8) (bytevector-ieee-single-native-set! . f4fe7) (bytevector-ieee-single-native-ref . f4fe6) (bytevector-ieee-double-set! . f4fe5) (bytevector-ieee-double-ref . f4fe4) (bytevector-ieee-double-native-set! . f4fe3) (bytevector-ieee-double-native-ref . f4fe2) (bytevector-fill! . f4fe1) (bytevector-copy! . f4fe0) (bytevector-copy . f4fdf) (bytevector->uint-list . f4fde) (bytevector->u8-list . f4fdd) (bytevector->sint-list . f4fdc) (no-nans-violation? . f4c61) (no-infinities-violation? . f4c4c) (make-no-nans-violation . f4c5f) (make-no-infinities-violation . f4c4a) (real->flonum . f4fdb) (flzero? . f4fda) (fltruncate . f4fd9) (fltan . f4fd8) (flsqrt . f4fd7) (flsin . f4fd6) (flround . f4fd5) (flpositive? . f4fd4) (flonum? . f4fd3) (flodd? . f4fd2) (flnumerator . f4fd1) (flnegative? . f4fd0) (flnan? . f4fcf) (flmod0 . f4fce) (flmod . f4fcd) (flmin . f4fcc) (flmax . f4fcb) (fllog . f4fca) (flinteger? . f4fc9) (flinfinite? . f4fc8) (flfloor . f4fc7) (flfinite? . f4fc6) (flexpt . f4fc5) (flexp . f4fc4) (fleven? . f4fc3) (fldiv0-and-mod0 . f4fc2) (fldiv0 . f4fc1) (fldiv-and-mod . f4fc0) (fldiv . f4fbf) (fldenominator . f4fbe) (flcos . f4fbd) (flceiling . f4fbc) (flatan . f4fbb) (flasin . f4fba) (flacos . f4fb9) (flabs . f4fb8) (fl>? . f4fb7) (fl>=? . f4fb6) (fl=? . f4fb5) (fl<? . f4fb4) (fl<=? . f4fb3) (fl/ . f4fb2) (fl- . f4fb1) (fl+ . f4fb0) (fl* . f4faf) (fixnum->flonum . f4fae) (fxzero? . f4fad) (fxxor . f4fac) (fxrotate-bit-field . f4fab) (fxreverse-bit-field . f4faa) (fxpositive? . f4fa9) (fxodd? . f4fa8) (fxnot . f4fa7) (fxnegative? . f4fa6) (fxmod0 . f4fa5) (fxmod . f4fa4) (fxmin . f4fa3) (fxmax . f4fa2) (fxlength . f4fa1) (fxior . f4fa0) (fxif . f4f9f) (fxfirst-bit-set . f4f9e) (fxeven? . f4f9d) (fxdiv0-and-mod0 . f4f9c) (fxdiv0 . f4f9b) (fxdiv-and-mod . f4f9a) (fxdiv . f4f99) (fxcopy-bit-field . f4f98) (fxcopy-bit . f4f97) (fxbit-set? . f4f96) (fxbit-field . f4f95) (fxbit-count . f4f94) (fxarithmetic-shift-right . f4f93) (fxarithmetic-shift-left . f4f92) (fxarithmetic-shift . f4f91) (fxand . f4f90) (fx>? . f4f8f) (fx>=? . f4f8e) (fx=? . f4f8d) (fx<? . f4f8c) (fx<=? . f4f8b) (fx-/carry . f4f8a) (fx- . f4f89) (fx+/carry . f4f88) (fx+ . f4f87) (fx*/carry . f4f86) (fx* . f4f85) (greatest-fixnum . f4f84) (least-fixnum . f4f83) (fixnum-width . f4f82) (fixnum? . f4f81) (bitwise-rotate-bit-field . f4f80) (bitwise-reverse-bit-field . f4f7f) (bitwise-length . f4f7e) (bitwise-if . f4f7d) (bitwise-first-bit-set . f4f7c) (bitwise-copy-bit-field . f4f7b) (bitwise-copy-bit . f4f7a) (bitwise-bit-set? . f4f79) (bitwise-bit-field . f4f78) (bitwise-bit-count . f4f77) (bitwise-xor . f4f76) (bitwise-ior . f4f75) (bitwise-and . f4f74) (bitwise-not . f4f73) (bitwise-arithmetic-shift-right . f4f72) (bitwise-arithmetic-shift-left . f4f71) (bitwise-arithmetic-shift . f4f70) (zero? . f4f6f) (vector? . f4f6e) (vector-set! . f4f6d) (vector-ref . f4f6c) (vector-map . f4f6b) (vector-length . f4f6a) (vector-for-each . f4f69) (vector-fill! . f4f68) (vector->list . f4f67) (vector . f4f66) (values . f4f65) (truncate . f4f64) (tan . f4f63) (symbol? . f4f62) (symbol=? . f4f61) (symbol->string . f4f60) (substring . f4f5f) (string? . f4f5e) (string>? . f4f5d) (string>=? . f4f5c) (string=? . f4f5b) (string<? . f4f5a) (string<=? . f4f59) (string-ref . f4f58) (string-length . f4f57) (string-for-each . f4f56) (string-copy . f4f55) (string-append . f4f54) (string->symbol . f4f53) (string->number . f4f52) (string->list . f4f51) (string . f4f50) (sqrt . f4f4f) (sin . f4f4e) (round . f4f4d) (reverse . f4f4c) (real? . f4f4b) (real-valued? . f4f4a) (real-part . f4f49) (rationalize . f4f48) (rational? . f4f47) (rational-valued? . f4f46) (procedure? . f4f45) (positive? . f4f44) (pair? . f4f43) (odd? . f4f42) (numerator . f4f41) (number? . f4f40) (number->string . f4f3f) (null? . f4f3e) (not . f4f3d) (negative? . f4f3c) (nan? . f4f3b) (min . f4f3a) (max . f4f39) (map . f4f38) (make-vector . f4f37) (make-string . f4f36) (make-rectangular . f4f35) (make-polar . f4f34) (magnitude . f4f33) (log . f4f32) (list? . f4f31) (list-tail . f4f30) (list-ref . f4f2f) (list->vector . f4f2e) (list->string . f4f2d) (list . f4f2c) (length . f4f2b) (lcm . f4f2a) (integer? . f4f29) (integer-valued? . f4f28) (integer->char . f4f27) (infinite? . f4f26) (inexact? . f4f25) (inexact . f4f24) (imag-part . f4f23) (gcd . f4f22) (for-each . f4f21) (floor . f4f20) (finite? . f4f1f) (expt . f4f1e) (exp . f4f1d) (exact? . f4f1c) (exact-integer-sqrt . f4f1b) (exact . f4f1a) (even? . f4f19) (error . f4f18) (eqv? . f4f17) (equal? . f4f16) (eq? . f4f15) (dynamic-wind . f4f14) (div0-and-mod0 . f4f13) (mod0 . f4f12) (div0 . f4f11) (div-and-mod . f4f10) (mod . f4f0f) (div . f4f0e) (denominator . f4f0d) (cos . f4f0c) (cons . f4f0b) (complex? . f4f0a) (char? . f4f09) (char>? . f4f08) (char>=? . f4f07) (char=? . f4f06) (char<? . f4f05) (char<=? . f4f04) (char->integer . f4f03) (ceiling . f4f02) (call-with-values . f4f01) (call/cc . f4f00) (call-with-current-continuation . f4eff) (cddddr . f4efe) (cdddar . f4efd) (cddadr . f4efc) (cddaar . f4efb) (cdaddr . f4efa) (cdadar . f4ef9) (cdaadr . f4ef8) (cdaaar . f4ef7) (cadddr . f4ef6) (caddar . f4ef5) (cadadr . f4ef4) (cadaar . f4ef3) (caaddr . f4ef2) (caadar . f4ef1) (caaadr . f4ef0) (caaaar . f4eef) (cdddr . f4eee) (cddar . f4eed) (cdadr . f4eec) (cdaar . f4eeb) (caddr . f4eea) (cadar . f4ee9) (caadr . f4ee8) (caaar . f4ee7) (cddr . f4ee6) (cdar . f4ee5) (cadr . f4ee4) (caar . f4ee3) (cdr . f4ee2) (car . f4ee1) (boolean? . f4ee0) (boolean=? . f4edf) (atan . f4ede) (assertion-violation . f4edd) (assertion-error . f2f98) (asin . f4edc) (apply . f4edb) (append . f4eda) (angle . f4ed9) (acos . f4ed8) (abs . f4ed7) (/ . f4ed6) (* . f4ed5) (- . f4ed4) (+ . f4ed3) (>= . f4ed2) (> . f4ed1) (= . f4ed0) (<= . f4ecf) (< . f4ece) (library . f4ecd) (&no-nans . f4ecc) (&no-infinities . f4ecb) (&i/o-encoding . f4eca) (&i/o-decoding . f4ec9) (&i/o-port . f4ec8) (&i/o-file-does-not-exist . f4ec7) (&i/o-file-already-exists . f4ec6) (&i/o-file-is-read-only . f4ec5) (&i/o-file-protection . f4ec4) (&i/o-filename . f4ec3) (&i/o-invalid-position . f4ec2) (&i/o-write . f4ec1) (&i/o-read . f4ec0) (&i/o . f4ebf) (&undefined . f4ebe) (&syntax . f4ebd) (&lexical . f4ebc) (&implementation-restriction . f4ebb) (&non-continuable . f4eba) (&who . f4eb9) (&irritants . f4eb8) (&assertion . f4eb7) (&violation . f4eb6) (&error . f4eb5) (&serious . f4eb4) (&warning . f4eb3) (&message . f4eb2) (&condition . f4eb1) (define-condition-type . f4eb0) (define-enumeration . f4eaf) (define-record-type . f4eae) (parent-rtd . f4ead) (nongenerative . f4eac) (opaque . f4eab) (sealed . f4eaa) (protocol . f4ea9) (parent . f4ea8) (immutable . f4ea7) (mutable . f4ea6) (fields . f4ea5) (error-handling-mode . f4ea4) (file-options . f4ea3) (buffer-mode . f4ea2) (eol-style . f4ea1) (guard . f4ea0) (trace-define . f4e9f) (trace-lambda . f4e9e) (unsyntax-splicing . f4e9d) (unsyntax . f4e9c) (unquote-splicing . f4e9b) (unquote . f4e9a) (_ . f4e99) (else . f4e98) (=> . f4e97) (... . f4e96) (assert . f4e95) (endianness . f4e94) (delay . f4e93) (time . f4e92) (do . f4e91) (cond . f4e90) (let* . f4e8f) (let . f4e8e) (let*-values . f4e8d) (let-values . f4e8c) (identifier-syntax . f4e8b) (with-syntax . f4e8a) (quasisyntax . f4e89) (quasiquote . f4e88) (syntax-rules . f4e87) (include . f4e86) (define-struct . f4e85) (record-constructor-descriptor . f4e84) (record-type-descriptor . f4e83) (case . f4e82) (parameterize . f4e81) (unless . f4e80) (when . f4e7f) (or . f4e7e) (and . f4e7d) (if . f4e7c) (letrec* . f4e7b) (letrec . f4e7a) (type-descriptor . f4e79) (case-lambda . f4e78) (lambda . f4e77) (syntax . f4e76) (syntax-case . f4e75) (quote . f4e74) (foreign-call . f4e73) (letrec-syntax . f4e72) (let-syntax . f4e71) (set! . f4e70) (import . f4e6f) (begin . f4e6e) (module . f4e6d) (define-syntax . f4e6c) (define . f4e6b)) '((f4c65 core-prim . &no-nans-rcd) (f4c63 core-prim . &no-nans-rtd) (f4c50 core-prim . &no-infinities-rcd) (f4c4e core-prim . &no-infinities-rtd) (f4c3b core-prim . &i/o-encoding-rcd) (f4c39 core-prim . &i/o-encoding-rtd) (f4c20 core-prim . &i/o-decoding-rcd) (f4c1e core-prim . &i/o-decoding-rtd) (f4c0b core-prim . &i/o-port-rcd) (f4c09 core-prim . &i/o-port-rtd) (f4bf0 core-prim . &i/o-file-does-not-exist-rcd) (f4bee core-prim . &i/o-file-does-not-exist-rtd) (f4bdb core-prim . &i/o-file-already-exists-rcd) (f4bd9 core-prim . &i/o-file-already-exists-rtd) (f4bc6 core-prim . &i/o-file-is-read-only-rcd) (f4bc4 core-prim . &i/o-file-is-read-only-rtd) (f4bb1 core-prim . &i/o-file-protection-rcd) (f4baf core-prim . &i/o-file-protection-rtd) (f4b9c core-prim . &i/o-filename-rcd) (f4b9a core-prim . &i/o-filename-rtd) (f4b81 core-prim . &i/o-invalid-position-rcd) (f4b7f core-prim . &i/o-invalid-position-rtd) (f4b66 core-prim . &i/o-write-rcd) (f4b64 core-prim . &i/o-write-rtd) (f4b51 core-prim . &i/o-read-rcd) (f4b4f core-prim . &i/o-read-rtd) (f4b3c core-prim . &i/o-rcd) (f4b3a core-prim . &i/o-rtd) (f4b27 core-prim . &undefined-rcd) (f4b25 core-prim . &undefined-rtd) (f4b12 core-prim . &syntax-rcd) (f4b10 core-prim . &syntax-rtd) (f4af1 core-prim . &lexical-rcd) (f4aef core-prim . &lexical-rtd) (f4adc core-prim . &implementation-restriction-rcd) (f4ada core-prim . &implementation-restriction-rtd) (f4ac7 core-prim . &non-continuable-rcd) (f4ac5 core-prim . &non-continuable-rtd) (f4ab2 core-prim . &who-rcd) (f4ab0 core-prim . &who-rtd) (f4a97 core-prim . &irritants-rcd) (f4a95 core-prim . &irritants-rtd) (f4a7c core-prim . &assertion-rcd) (f4a7a core-prim . &assertion-rtd) (f4a67 core-prim . &violation-rcd) (f4a65 core-prim . &violation-rtd) (f4a52 core-prim . &error-rcd) (f4a50 core-prim . &error-rtd) (f4a3d core-prim . &serious-rcd) (f4a3b core-prim . &serious-rtd) (f4a28 core-prim . &warning-rcd) (f4a26 core-prim . &warning-rtd) (f4a13 core-prim . &message-rcd) (f4a11 core-prim . &message-rtd) (f49b4 core-prim . &condition-rcd) (f49b2 core-prim . &condition-rtd) (f2f9a core-prim . syntax-error) (f2eb5 core-prim . syntax-dispatch) (f5139 core-prim . pretty-print) (f5138 core-prim . eval-core) (f5137 core-prim . set-symbol-value!) (f5136 core-prim . symbol-value) (f5135 core-prim . gensym) (f5134 core-prim . void) (f4d72 core-prim . load) (f2faa core-prim . interaction-environment) (f5133 core-prim . char-ready?) (f5132 core-prim . regexp?) (f5131 core-prim . read-line) (f5130 core-prim . ungensym) (f512f core-prim . alist->eq-hash-table) (f512e core-prim . assoc-ref) (f512d core-prim . print) (f512c core-prim . format) (f512b core-prim . host-os) (f294b core-prim . library-path) (f512a core-prim . standard-library-path) (f5129 core-prim . file-newer?) (f5128 core-prim . stat-mtime) (f5127 core-prim . write-to-file) (f5126 core-prim . file->list) (f5125 core-prim . file->string) (f5124 core-prim . digit->integer) (f5123 core-prim . call-with-string-input-port) (f5122 core-prim . call-with-string-io) (f5121 core-prim . string-split) (f5120 core-prim . bytevector-for-each) (f511f core-prim . string->regexp) (f511e core-prim . rxmatch) (f511d core-prim . regexp-replace-all) (f511c core-prim . hashtable-for-each) (f511b core-prim . call-process) (f511a core-prim . local-tz-offset) (f5119 core-prim . microseconds) (f5118 core-prim . readdir) (f5117 core-prim . set-current-directory!) (f5116 core-prim . expand-path) (f5115 core-prim . current-directory) (f5114 core-prim . %spawn) (f5113 core-prim . %waitpid) (f5112 core-prim . %ffi-supported?) (f5111 core-prim . %ffi-pointer-ref) (f5110 core-prim . %ffi-pointer->string) (f510f core-prim . %ffi-call->string-or-zero) (f510e core-prim . %ffi-call->double) (f510d core-prim . %ffi-call->void*) (f510c core-prim . %ffi-call->void) (f510b core-prim . %ffi-call->int) (f510a core-prim . %ffi-lookup) (f5109 core-prim . %ffi-open) (f5108 core-prim . %fork) (f5107 core-prim . %pipe) (f5106 core-prim . p) (f5105 core-prim . open-output-string) (f5104 core-prim . get-output-string) (f5103 core-prim . get-environment-variables) (f5102 core-prim . get-environment-variable) (f5101 core-prim . get-timeofday) (f5100 core-prim . get-command-line) (f50ff core-prim . sys-display) (f50fe core-prim . mosh-executable-path) (f50fd core-prim . make-file-options) (f50fc core-prim . source-info) (f50fb core-prim . make-compiler-instruction) (f50fa core-prim . make-instruction) (f50f9 core-prim . set-source-info!) (f50f8 core-prim . bignum?) (f50f7 core-prim . fast-equal?) (f50f6 core-prim . fasl-read) (f50f5 core-prim . fasl-write) (f50f4 core-prim . time-usage) (f50f3 core-prim . os-constant) (f277e core-prim . make-parameter) (f50f2 core-prim . socket-port) (f50f1 core-prim . socket-shutdown) (f50f0 core-prim . socket-close) (f50ef core-prim . socket-send) (f50ee core-prim . socket-recv!) (f50ed core-prim . socket-recv) (f50ec core-prim . make-server-socket) (f50eb core-prim . make-client-socket) (f50ea core-prim . socket-accept) (f50e9 core-prim . socket?) (f50e8 core-prim . string-upcase) (f50e7 core-prim . string-titlecase) (f50e6 core-prim . string-normalize-nfkd) (f50e5 core-prim . string-normalize-nfkc) (f50e4 core-prim . string-normalize-nfd) (f50e3 core-prim . string-normalize-nfc) (f50e2 core-prim . string-foldcase) (f50e1 core-prim . string-downcase) (f50e0 core-prim . string-ci>?) (f50df core-prim . string-ci>=?) (f50de core-prim . string-ci=?) (f50dd core-prim . string-ci<?) (f50dc core-prim . string-ci<=?) (f50db core-prim . char-whitespace?) (f50da core-prim . char-upper-case?) (f50d9 core-prim . char-title-case?) (f50d8 core-prim . char-numeric?) (f50d7 core-prim . char-lower-case?) (f50d6 core-prim . char-general-category) (f50d5 core-prim . char-upcase) (f50d4 core-prim . char-titlecase) (f50d3 core-prim . char-foldcase) (f50d2 core-prim . char-downcase) (f50d1 core-prim . char-ci>?) (f50d0 core-prim . char-ci>=?) (f50cf core-prim . char-ci=?) (f50ce core-prim . char-ci<?) (f50cd core-prim . char-ci<=?) (f50cc core-prim . char-alphabetic?) (f2ce2 core-prim . make-variable-transformer) (f2fa0 core-prim . identifier?) (f2f8c core-prim . generate-temporaries) (f2f8e core-prim . free-identifier=?) (f2fa4 core-prim . syntax->datum) (f2fa2 core-prim . datum->syntax) (f2f90 core-prim . bound-identifier=?) (f50cb core-prim . record-type-descriptor?) (f50ca core-prim . record-predicate) (f50c9 core-prim . record-mutator) (f50c8 core-prim . record-constructor) (f50c7 core-prim . record-accessor) (f50c6 core-prim . make-record-type-descriptor) (f50c5 core-prim . make-record-constructor-descriptor) (f50c4 core-prim . record?) (f50c3 core-prim . record-type-uid) (f50c2 core-prim . record-type-sealed?) (f50c1 core-prim . record-type-parent) (f50c0 core-prim . record-type-opaque?) (f50bf core-prim . record-type-name) (f50be core-prim . record-type-generative?) (f50bd core-prim . record-type-field-names) (f50bc core-prim . record-rtd) (f50bb core-prim . record-field-mutable?) (f50ba core-prim . delete-file) (f50b9 core-prim . file-exists?) (f50b8 core-prim . vector-sort!) (f50b7 core-prim . vector-sort) (f50b6 core-prim . list-sort) (f50b5 core-prim . symbol-hash) (f50b4 core-prim . string-ci-hash) (f50b3 core-prim . string-hash) (f50b2 core-prim . equal-hash) (f50b1 core-prim . hashtable-equivalence-function) (f50b0 core-prim . make-hashtable) (f50af core-prim . hashtable-hash-function) (f50ae core-prim . make-eqv-hashtable) (f50ad core-prim . make-eq-hashtable) (f50ac core-prim . hashtable?) (f50ab core-prim . hashtable-update!) (f50aa core-prim . hashtable-size) (f50a9 core-prim . hashtable-set!) (f50a8 core-prim . hashtable-ref) (f50a7 core-prim . hashtable-mutable?) (f50a6 core-prim . hashtable-keys) (f50a5 core-prim . hashtable-entries) (f50a4 core-prim . hashtable-delete!) (f50a3 core-prim . hashtable-copy) (f50a2 core-prim . hashtable-contains?) (f50a1 core-prim . hashtable-clear!) (f50a0 core-prim . call-with-output-file) (f509f core-prim . call-with-input-file) (f509e core-prim . write-char) (f509d core-prim . write) (f509c core-prim . with-output-to-file) (f509b core-prim . with-input-from-file) (f509a core-prim . read-char) (f5099 core-prim . read) (f5098 core-prim . peek-char) (f5097 core-prim . open-output-file) (f5096 core-prim . open-input-file) (f5095 core-prim . newline) (f5094 core-prim . display) (f5093 core-prim . close-output-port) (f5092 core-prim . close-input-port) (f5091 core-prim . eof-object?) (f5090 core-prim . eof-object) (f508f core-prim . current-error-port) (f508e core-prim . current-output-port) (f508d core-prim . current-input-port) (f508c core-prim . output-port?) (f508b core-prim . input-port?) (f508a core-prim . utf-8-codec) (f5089 core-prim . utf-16-codec) (f5088 core-prim . transcoder-error-handling-mode) (f5087 core-prim . transcoder-eol-style) (f5086 core-prim . transcoder-codec) (f5085 core-prim . transcoded-port) (f5084 core-prim . textual-port?) (f5083 core-prim . string->bytevector) (f5082 core-prim . standard-output-port) (f5081 core-prim . standard-input-port) (f5080 core-prim . standard-error-port) (f507f core-prim . set-port-position!) (f507e core-prim . put-u8) (f507d core-prim . put-string) (f507c core-prim . put-datum) (f507b core-prim . put-char) (f507a core-prim . put-bytevector) (f5079 core-prim . port?) (f5078 core-prim . port-transcoder) (f5077 core-prim . port-position) (f5076 core-prim . port-has-set-port-position!?) (f5075 core-prim . port-has-port-position?) (f5074 core-prim . port-eof?) (f5073 core-prim . output-port-buffer-mode) (f5072 core-prim . open-string-output-port) (f5071 core-prim . open-string-input-port) (f5070 core-prim . open-file-output-port) (f506f core-prim . open-file-input/output-port) (f506e core-prim . open-file-input-port) (f506d core-prim . open-bytevector-output-port) (f506c core-prim . open-bytevector-input-port) (f506b core-prim . native-transcoder) (f506a core-prim . native-eol-style) (f5069 core-prim . make-transcoder) (f5068 core-prim . latin-1-codec) (f4b60 core-prim . make-i/o-write-error) (f4b4b core-prim . make-i/o-read-error) (f4c01 core-prim . make-i/o-port-error) (f4b77 core-prim . make-i/o-invalid-position-error) (f4b92 core-prim . make-i/o-filename-error) (f4bab core-prim . make-i/o-file-protection-error) (f4bc0 core-prim . make-i/o-file-is-read-only-error) (f4bea core-prim . make-i/o-file-does-not-exist-error) (f4bd5 core-prim . make-i/o-file-already-exists-error) (f4b36 core-prim . make-i/o-error) (f4c31 core-prim . make-i/o-encoding-error) (f4c1a core-prim . make-i/o-decoding-error) (f5067 core-prim . make-custom-textual-output-port) (f5066 core-prim . make-custom-textual-input/output-port) (f5065 core-prim . make-custom-textual-input-port) (f5064 core-prim . make-custom-binary-output-port) (f5063 core-prim . make-custom-binary-input/output-port) (f5062 core-prim . make-custom-binary-input-port) (f5061 core-prim . make-bytevector) (f5060 core-prim . lookahead-u8) (f505f core-prim . lookahead-char) (f4b62 core-prim . i/o-write-error?) (f4b4d core-prim . i/o-read-error?) (f4c05 core-prim . i/o-port-error?) (f4b7b core-prim . i/o-invalid-position-error?) (f4b96 core-prim . i/o-filename-error?) (f4bad core-prim . i/o-file-protection-error?) (f4bc2 core-prim . i/o-file-is-read-only-error?) (f4bec core-prim . i/o-file-does-not-exist-error?) (f4bd7 core-prim . i/o-file-already-exists-error?) (f4b38 core-prim . i/o-error?) (f4b7d core-prim . i/o-error-position) (f4c07 core-prim . i/o-error-port) (f4b98 core-prim . i/o-error-filename) (f4c35 core-prim . i/o-encoding-error?) (f4c37 core-prim . i/o-encoding-error-char) (f4c1c core-prim . i/o-decoding-error?) (f505e core-prim . get-u8) (f505d core-prim . get-string-n!) (f505c core-prim . get-string-n) (f505b core-prim . get-string-all) (f505a core-prim . get-line) (f5059 core-prim . get-datum) (f5058 core-prim . get-char) (f5057 core-prim . get-bytevector-some) (f5056 core-prim . get-bytevector-n!) (f5055 core-prim . get-bytevector-n) (f5054 core-prim . get-bytevector-all) (f5053 core-prim . flush-output-port) (f5052 core-prim . close-port) (f2f7a core-prim . scheme-report-environment) (f5051 core-prim . quotient) (f2f78 core-prim . null-environment) (f5050 core-prim . remainder) (f504f core-prim . modulo) (f504e core-prim . inexact->exact) (f504d core-prim . force) (f504c core-prim . exact->inexact) (f504b core-prim . make-promise) (f504a core-prim . exit) (f4d6c core-prim . command-line) (f5049 core-prim . string-fill!) (f5048 core-prim . string-set!) (f5047 core-prim . set-cdr!) (f5046 core-prim . set-car!) (f5045 core-prim . remove) (f5044 core-prim . remv) (f5043 core-prim . remp) (f5042 core-prim . remq) (f5041 core-prim . partition) (f5040 core-prim . memv) (f503f core-prim . memq) (f503e core-prim . memp) (f503d core-prim . member) (f503c core-prim . exists) (f503b core-prim . for-all) (f503a core-prim . fold-right) (f5039 core-prim . fold-left) (f5038 core-prim . find) (f5037 core-prim . filter) (f5036 core-prim . cons*) (f5035 core-prim . assv) (f5034 core-prim . assq) (f5033 core-prim . assp) (f5032 core-prim . assoc) (f5031 core-prim . call-with-string-output-port) (f5030 core-prim . call-with-port) (f502f core-prim . call-with-bytevector-output-port) (f502e core-prim . bytevector->string) (f502d core-prim . buffer-mode?) (f502c core-prim . binary-port?) (f502b core-prim . with-exception-handler) (f502a core-prim . raise-continuable) (f5029 core-prim . raise) (f2f7e core-prim . eval) (f2f76 core-prim . environment) (f5028 core-prim . make-enumeration) (f5027 core-prim . enum-set=?) (f5026 core-prim . enum-set-universe) (f5025 core-prim . enum-set-union) (f5024 core-prim . enum-set-subset?) (f5023 core-prim . enum-set-projection) (f5022 core-prim . enum-set-member?) (f5021 core-prim . enum-set-intersection) (f5020 core-prim . enum-set-indexer) (f501f core-prim . enum-set-difference) (f501e core-prim . enum-set-constructor) (f501d core-prim . enum-set-complement) (f501c core-prim . enum-set->list) (f4aac core-prim . who-condition?) (f4a24 core-prim . warning?) (f4a63 core-prim . violation?) (f4b23 core-prim . undefined-violation?) (f4b0a core-prim . syntax-violation?) (f4b0e core-prim . syntax-violation-subform) (f4b0c core-prim . syntax-violation-form) (f2f9e core-prim . syntax-violation) (f501b core-prim . simple-conditions) (f4a39 core-prim . serious-condition?) (f4ac3 core-prim . non-continuable-violation?) (f4a0d core-prim . message-condition?) (f4aa8 core-prim . make-who-condition) (f4a22 core-prim . make-warning) (f4a61 core-prim . make-violation) (f4b21 core-prim . make-undefined-violation) (f4b04 core-prim . make-syntax-violation) (f4a37 core-prim . make-serious-condition) (f4ac1 core-prim . make-non-continuable-violation) (f4a09 core-prim . make-message-condition) (f4aeb core-prim . make-lexical-violation) (f4a8d core-prim . make-irritants-condition) (f4ad6 core-prim . make-implementation-restriction-violation) (f4a4c core-prim . make-error) (f4a76 core-prim . make-assertion-violation) (f4aed core-prim . lexical-violation?) (f4a91 core-prim . irritants-condition?) (f4ad8 core-prim . implementation-restriction-violation?) (f4a4e core-prim . error?) (f4aae core-prim . condition-who) (f501a core-prim . condition-predicate) (f4a0f core-prim . condition-message) (f4a93 core-prim . condition-irritants) (f5019 core-prim . condition-accessor) (f5018 core-prim . condition) (f4a78 core-prim . assertion-violation?) (f5017 core-prim . condition?) (f5016 core-prim . utf32->string) (f5015 core-prim . utf16->string) (f5014 core-prim . utf8->string) (f5013 core-prim . uint-list->bytevector) (f5012 core-prim . u8-list->bytevector) (f5011 core-prim . string->utf8) (f5010 core-prim . string->utf32) (f500f core-prim . string->utf16) (f500e core-prim . sint-list->bytevector) (f500d core-prim . native-endianness) (f500c core-prim . bytevector?) (f500b core-prim . bytevector=?) (f500a core-prim . bytevector-uint-set!) (f5009 core-prim . bytevector-uint-ref) (f5008 core-prim . bytevector-u8-set!) (f5007 core-prim . bytevector-u8-ref) (f5006 core-prim . bytevector-u64-set!) (f5005 core-prim . bytevector-u64-ref) (f5004 core-prim . bytevector-u64-native-set!) (f5003 core-prim . bytevector-u64-native-ref) (f5002 core-prim . bytevector-u32-set!) (f5001 core-prim . bytevector-u32-ref) (f5000 core-prim . bytevector-u32-native-set!) (f4fff core-prim . bytevector-u32-native-ref) (f4ffe core-prim . bytevector-u16-set!) (f4ffd core-prim . bytevector-u16-ref) (f4ffc core-prim . bytevector-u16-native-set!) (f4ffb core-prim . bytevector-u16-native-ref) (f4ffa core-prim . bytevector-sint-set!) (f4ff9 core-prim . bytevector-sint-ref) (f4ff8 core-prim . bytevector-s8-set!) (f4ff7 core-prim . bytevector-s8-ref) (f4ff6 core-prim . bytevector-s64-set!) (f4ff5 core-prim . bytevector-s64-ref) (f4ff4 core-prim . bytevector-s64-native-set!) (f4ff3 core-prim . bytevector-s64-native-ref) (f4ff2 core-prim . bytevector-s32-set!) (f4ff1 core-prim . bytevector-s32-ref) (f4ff0 core-prim . bytevector-s32-native-set!) (f4fef core-prim . bytevector-s32-native-ref) (f4fee core-prim . bytevector-s16-set!) (f4fed core-prim . bytevector-s16-ref) (f4fec core-prim . bytevector-s16-native-set!) (f4feb core-prim . bytevector-s16-native-ref) (f4fea core-prim . bytevector-length) (f4fe9 core-prim . bytevector-ieee-single-ref) (f4fe8 core-prim . bytevector-ieee-single-set!) (f4fe7 core-prim . bytevector-ieee-single-native-set!) (f4fe6 core-prim . bytevector-ieee-single-native-ref) (f4fe5 core-prim . bytevector-ieee-double-set!) (f4fe4 core-prim . bytevector-ieee-double-ref) (f4fe3 core-prim . bytevector-ieee-double-native-set!) (f4fe2 core-prim . bytevector-ieee-double-native-ref) (f4fe1 core-prim . bytevector-fill!) (f4fe0 core-prim . bytevector-copy!) (f4fdf core-prim . bytevector-copy) (f4fde core-prim . bytevector->uint-list) (f4fdd core-prim . bytevector->u8-list) (f4fdc core-prim . bytevector->sint-list) (f4c61 core-prim . no-nans-violation?) (f4c4c core-prim . no-infinities-violation?) (f4c5f core-prim . make-no-nans-violation) (f4c4a core-prim . make-no-infinities-violation) (f4fdb core-prim . real->flonum) (f4fda core-prim . flzero?) (f4fd9 core-prim . fltruncate) (f4fd8 core-prim . fltan) (f4fd7 core-prim . flsqrt) (f4fd6 core-prim . flsin) (f4fd5 core-prim . flround) (f4fd4 core-prim . flpositive?) (f4fd3 core-prim . flonum?) (f4fd2 core-prim . flodd?) (f4fd1 core-prim . flnumerator) (f4fd0 core-prim . flnegative?) (f4fcf core-prim . flnan?) (f4fce core-prim . flmod0) (f4fcd core-prim . flmod) (f4fcc core-prim . flmin) (f4fcb core-prim . flmax) (f4fca core-prim . fllog) (f4fc9 core-prim . flinteger?) (f4fc8 core-prim . flinfinite?) (f4fc7 core-prim . flfloor) (f4fc6 core-prim . flfinite?) (f4fc5 core-prim . flexpt) (f4fc4 core-prim . flexp) (f4fc3 core-prim . fleven?) (f4fc2 core-prim . fldiv0-and-mod0) (f4fc1 core-prim . fldiv0) (f4fc0 core-prim . fldiv-and-mod) (f4fbf core-prim . fldiv) (f4fbe core-prim . fldenominator) (f4fbd core-prim . flcos) (f4fbc core-prim . flceiling) (f4fbb core-prim . flatan) (f4fba core-prim . flasin) (f4fb9 core-prim . flacos) (f4fb8 core-prim . flabs) (f4fb7 core-prim . fl>?) (f4fb6 core-prim . fl>=?) (f4fb5 core-prim . fl=?) (f4fb4 core-prim . fl<?) (f4fb3 core-prim . fl<=?) (f4fb2 core-prim . fl/) (f4fb1 core-prim . fl-) (f4fb0 core-prim . fl+) (f4faf core-prim . fl*) (f4fae core-prim . fixnum->flonum) (f4fad core-prim . fxzero?) (f4fac core-prim . fxxor) (f4fab core-prim . fxrotate-bit-field) (f4faa core-prim . fxreverse-bit-field) (f4fa9 core-prim . fxpositive?) (f4fa8 core-prim . fxodd?) (f4fa7 core-prim . fxnot) (f4fa6 core-prim . fxnegative?) (f4fa5 core-prim . fxmod0) (f4fa4 core-prim . fxmod) (f4fa3 core-prim . fxmin) (f4fa2 core-prim . fxmax) (f4fa1 core-prim . fxlength) (f4fa0 core-prim . fxior) (f4f9f core-prim . fxif) (f4f9e core-prim . fxfirst-bit-set) (f4f9d core-prim . fxeven?) (f4f9c core-prim . fxdiv0-and-mod0) (f4f9b core-prim . fxdiv0) (f4f9a core-prim . fxdiv-and-mod) (f4f99 core-prim . fxdiv) (f4f98 core-prim . fxcopy-bit-field) (f4f97 core-prim . fxcopy-bit) (f4f96 core-prim . fxbit-set?) (f4f95 core-prim . fxbit-field) (f4f94 core-prim . fxbit-count) (f4f93 core-prim . fxarithmetic-shift-right) (f4f92 core-prim . fxarithmetic-shift-left) (f4f91 core-prim . fxarithmetic-shift) (f4f90 core-prim . fxand) (f4f8f core-prim . fx>?) (f4f8e core-prim . fx>=?) (f4f8d core-prim . fx=?) (f4f8c core-prim . fx<?) (f4f8b core-prim . fx<=?) (f4f8a core-prim . fx-/carry) (f4f89 core-prim . fx-) (f4f88 core-prim . fx+/carry) (f4f87 core-prim . fx+) (f4f86 core-prim . fx*/carry) (f4f85 core-prim . fx*) (f4f84 core-prim . greatest-fixnum) (f4f83 core-prim . least-fixnum) (f4f82 core-prim . fixnum-width) (f4f81 core-prim . fixnum?) (f4f80 core-prim . bitwise-rotate-bit-field) (f4f7f core-prim . bitwise-reverse-bit-field) (f4f7e core-prim . bitwise-length) (f4f7d core-prim . bitwise-if) (f4f7c core-prim . bitwise-first-bit-set) (f4f7b core-prim . bitwise-copy-bit-field) (f4f7a core-prim . bitwise-copy-bit) (f4f79 core-prim . bitwise-bit-set?) (f4f78 core-prim . bitwise-bit-field) (f4f77 core-prim . bitwise-bit-count) (f4f76 core-prim . bitwise-xor) (f4f75 core-prim . bitwise-ior) (f4f74 core-prim . bitwise-and) (f4f73 core-prim . bitwise-not) (f4f72 core-prim . bitwise-arithmetic-shift-right) (f4f71 core-prim . bitwise-arithmetic-shift-left) (f4f70 core-prim . bitwise-arithmetic-shift) (f4f6f core-prim . zero?) (f4f6e core-prim . vector?) (f4f6d core-prim . vector-set!) (f4f6c core-prim . vector-ref) (f4f6b core-prim . vector-map) (f4f6a core-prim . vector-length) (f4f69 core-prim . vector-for-each) (f4f68 core-prim . vector-fill!) (f4f67 core-prim . vector->list) (f4f66 core-prim . vector) (f4f65 core-prim . values) (f4f64 core-prim . truncate) (f4f63 core-prim . tan) (f4f62 core-prim . symbol?) (f4f61 core-prim . symbol=?) (f4f60 core-prim . symbol->string) (f4f5f core-prim . substring) (f4f5e core-prim . string?) (f4f5d core-prim . string>?) (f4f5c core-prim . string>=?) (f4f5b core-prim . string=?) (f4f5a core-prim . string<?) (f4f59 core-prim . string<=?) (f4f58 core-prim . string-ref) (f4f57 core-prim . string-length) (f4f56 core-prim . string-for-each) (f4f55 core-prim . string-copy) (f4f54 core-prim . string-append) (f4f53 core-prim . string->symbol) (f4f52 core-prim . string->number) (f4f51 core-prim . string->list) (f4f50 core-prim . string) (f4f4f core-prim . sqrt) (f4f4e core-prim . sin) (f4f4d core-prim . round) (f4f4c core-prim . reverse) (f4f4b core-prim . real?) (f4f4a core-prim . real-valued?) (f4f49 core-prim . real-part) (f4f48 core-prim . rationalize) (f4f47 core-prim . rational?) (f4f46 core-prim . rational-valued?) (f4f45 core-prim . procedure?) (f4f44 core-prim . positive?) (f4f43 core-prim . pair?) (f4f42 core-prim . odd?) (f4f41 core-prim . numerator) (f4f40 core-prim . number?) (f4f3f core-prim . number->string) (f4f3e core-prim . null?) (f4f3d core-prim . not) (f4f3c core-prim . negative?) (f4f3b core-prim . nan?) (f4f3a core-prim . min) (f4f39 core-prim . max) (f4f38 core-prim . map) (f4f37 core-prim . make-vector) (f4f36 core-prim . make-string) (f4f35 core-prim . make-rectangular) (f4f34 core-prim . make-polar) (f4f33 core-prim . magnitude) (f4f32 core-prim . log) (f4f31 core-prim . list?) (f4f30 core-prim . list-tail) (f4f2f core-prim . list-ref) (f4f2e core-prim . list->vector) (f4f2d core-prim . list->string) (f4f2c core-prim . list) (f4f2b core-prim . length) (f4f2a core-prim . lcm) (f4f29 core-prim . integer?) (f4f28 core-prim . integer-valued?) (f4f27 core-prim . integer->char) (f4f26 core-prim . infinite?) (f4f25 core-prim . inexact?) (f4f24 core-prim . inexact) (f4f23 core-prim . imag-part) (f4f22 core-prim . gcd) (f4f21 core-prim . for-each) (f4f20 core-prim . floor) (f4f1f core-prim . finite?) (f4f1e core-prim . expt) (f4f1d core-prim . exp) (f4f1c core-prim . exact?) (f4f1b core-prim . exact-integer-sqrt) (f4f1a core-prim . exact) (f4f19 core-prim . even?) (f4f18 core-prim . error) (f4f17 core-prim . eqv?) (f4f16 core-prim . equal?) (f4f15 core-prim . eq?) (f4f14 core-prim . dynamic-wind) (f4f13 core-prim . div0-and-mod0) (f4f12 core-prim . mod0) (f4f11 core-prim . div0) (f4f10 core-prim . div-and-mod) (f4f0f core-prim . mod) (f4f0e core-prim . div) (f4f0d core-prim . denominator) (f4f0c core-prim . cos) (f4f0b core-prim . cons) (f4f0a core-prim . complex?) (f4f09 core-prim . char?) (f4f08 core-prim . char>?) (f4f07 core-prim . char>=?) (f4f06 core-prim . char=?) (f4f05 core-prim . char<?) (f4f04 core-prim . char<=?) (f4f03 core-prim . char->integer) (f4f02 core-prim . ceiling) (f4f01 core-prim . call-with-values) (f4f00 core-prim . call/cc) (f4eff core-prim . call-with-current-continuation) (f4efe core-prim . cddddr) (f4efd core-prim . cdddar) (f4efc core-prim . cddadr) (f4efb core-prim . cddaar) (f4efa core-prim . cdaddr) (f4ef9 core-prim . cdadar) (f4ef8 core-prim . cdaadr) (f4ef7 core-prim . cdaaar) (f4ef6 core-prim . cadddr) (f4ef5 core-prim . caddar) (f4ef4 core-prim . cadadr) (f4ef3 core-prim . cadaar) (f4ef2 core-prim . caaddr) (f4ef1 core-prim . caadar) (f4ef0 core-prim . caaadr) (f4eef core-prim . caaaar) (f4eee core-prim . cdddr) (f4eed core-prim . cddar) (f4eec core-prim . cdadr) (f4eeb core-prim . cdaar) (f4eea core-prim . caddr) (f4ee9 core-prim . cadar) (f4ee8 core-prim . caadr) (f4ee7 core-prim . caaar) (f4ee6 core-prim . cddr) (f4ee5 core-prim . cdar) (f4ee4 core-prim . cadr) (f4ee3 core-prim . caar) (f4ee2 core-prim . cdr) (f4ee1 core-prim . car) (f4ee0 core-prim . boolean?) (f4edf core-prim . boolean=?) (f4ede core-prim . atan) (f4edd core-prim . assertion-violation) (f2f98 core-prim . assertion-error) (f4edc core-prim . asin) (f4edb core-prim . apply) (f4eda core-prim . append) (f4ed9 core-prim . angle) (f4ed8 core-prim . acos) (f4ed7 core-prim . abs) (f4ed6 core-prim . /) (f4ed5 core-prim . *) (f4ed4 core-prim . -) (f4ed3 core-prim . +) (f4ed2 core-prim . >=) (f4ed1 core-prim . >) (f4ed0 core-prim . =) (f4ecf core-prim . <=) (f4ece core-prim . <) (f4ecd core-prim . library) (f4ecc $core-rtd &no-nans-rtd &no-nans-rcd) (f4ecb $core-rtd &no-infinities-rtd &no-infinities-rcd) (f4eca $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (f4ec9 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (f4ec8 $core-rtd &i/o-port-rtd &i/o-port-rcd) (f4ec7 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (f4ec6 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (f4ec5 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (f4ec4 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (f4ec3 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (f4ec2 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (f4ec1 $core-rtd &i/o-write-rtd &i/o-write-rcd) (f4ec0 $core-rtd &i/o-read-rtd &i/o-read-rcd) (f4ebf $core-rtd &i/o-rtd &i/o-rcd) (f4ebe $core-rtd &undefined-rtd &undefined-rcd) (f4ebd $core-rtd &syntax-rtd &syntax-rcd) (f4ebc $core-rtd &lexical-rtd &lexical-rcd) (f4ebb $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (f4eba $core-rtd &non-continuable-rtd &non-continuable-rcd) (f4eb9 $core-rtd &who-rtd &who-rcd) (f4eb8 $core-rtd &irritants-rtd &irritants-rcd) (f4eb7 $core-rtd &assertion-rtd &assertion-rcd) (f4eb6 $core-rtd &violation-rtd &violation-rcd) (f4eb5 $core-rtd &error-rtd &error-rcd) (f4eb4 $core-rtd &serious-rtd &serious-rcd) (f4eb3 $core-rtd &warning-rtd &warning-rcd) (f4eb2 $core-rtd &message-rtd &message-rcd) (f4eb1 $core-rtd &condition-rtd &condition-rcd) (f4eb0 macro . define-condition-type) (f4eaf macro . define-enumeration) (f4eae macro . define-record-type) (f4ead macro . parent-rtd) (f4eac macro . nongenerative) (f4eab macro . opaque) (f4eaa macro . sealed) (f4ea9 macro . protocol) (f4ea8 macro . parent) (f4ea7 macro . immutable) (f4ea6 macro . mutable) (f4ea5 macro . fields) (f4ea4 macro . error-handling-mode) (f4ea3 macro . file-options) (f4ea2 macro . buffer-mode) (f4ea1 macro . eol-style) (f4ea0 macro . guard) (f4e9f macro . trace-define) (f4e9e macro . trace-lambda) (f4e9d macro . unsyntax-splicing) (f4e9c macro . unsyntax) (f4e9b macro . unquote-splicing) (f4e9a macro . unquote) (f4e99 macro . _) (f4e98 macro . else) (f4e97 macro . =>) (f4e96 macro . ...) (f4e95 macro . assert) (f4e94 macro . endianness) (f4e93 macro . delay) (f4e92 macro . time) (f4e91 macro . do) (f4e90 macro . cond) (f4e8f macro . let*) (f4e8e macro . let) (f4e8d macro . let*-values) (f4e8c macro . let-values) (f4e8b macro . identifier-syntax) (f4e8a macro . with-syntax) (f4e89 macro . quasisyntax) (f4e88 macro . quasiquote) (f4e87 macro . syntax-rules) (f4e86 macro . include) (f4e85 macro . define-struct) (f4e84 core-macro . record-constructor-descriptor) (f4e83 core-macro . record-type-descriptor) (f4e82 macro . case) (f4e81 macro . parameterize) (f4e80 macro . unless) (f4e7f macro . when) (f4e7e core-macro . or) (f4e7d core-macro . and) (f4e7c core-macro . if) (f4e7b core-macro . letrec*) (f4e7a core-macro . letrec) (f4e79 core-macro . type-descriptor) (f4e78 core-macro . case-lambda) (f4e77 core-macro . lambda) (f4e76 core-macro . syntax) (f4e75 core-macro . syntax-case) (f4e74 core-macro . quote) (f4e73 core-macro . foreign-call) (f4e72 letrec-syntax) (f4e71 let-syntax) (f4e70 set!) (f4e6f import) (f4e6e begin) (f4e6d module) (f4e6c define-syntax) (f4e6b define)) values values '#f '#f '#f '#f) (f2acd@f296c@install-library 'f515a '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . f5139) (eval-core . f5138) (set-symbol-value! . f5137) (symbol-value . f5136) (gensym . f5135) (void . f5134)) '() values values '#f '#f '#f '#f) (f2acd@f296c@install-library 'f515b '(mosh) '() '() '() '() '((set-symbol-value! . f5137) (symbol-value . f5136) (regexp? . f5132) (read-line . f5131) (ungensym . f5130) (alist->eq-hash-table . f512f) (assoc-ref . f512e) (print . f512d) (format . f512c) (host-os . f512b) (library-path . f294b) (standard-library-path . f512a) (file-newer? . f5129) (stat-mtime . f5128) (write-to-file . f5127) (file->list . f5126) (file->string . f5125) (digit->integer . f5124) (call-with-string-input-port . f5123) (call-with-string-io . f5122) (string-split . f5121) (bytevector-for-each . f5120) (string->regexp . f511f) (rxmatch . f511e) (regexp-replace-all . f511d) (hashtable-for-each . f511c) (readdir . f5118) (set-current-directory! . f5117) (expand-path . f5116) (current-directory . f5115) (p . f5106) (get-timeofday . f5101) (get-command-line . f5100) (sys-display . f50ff) (mosh-executable-path . f50fe) (make-file-options . f50fd) (source-info . f50fc) (make-compiler-instruction . f50fb) (make-instruction . f50fa) (set-source-info! . f50f9) (bignum? . f50f8) (fast-equal? . f50f7) (fasl-read . f50f6) (fasl-write . f50f5) (time-usage . f50f4) (os-constant . f50f3) (time . f4e92) (include . f4e86)) '() values values '#f '#f '#f '#f) (f2acd@f296c@install-library 'f515c '(system) '() '() '() '() '((call-process . f511b) (local-tz-offset . f511a) (microseconds . f5119) (expand-path . f5116) (%spawn . f5114) (%waitpid . f5113) (%ffi-supported? . f5112) (%ffi-pointer-ref . f5111) (%ffi-pointer->string . f5110) (%ffi-call->string-or-zero . f510f) (%ffi-call->double . f510e) (%ffi-call->void* . f510d) (%ffi-call->void . f510c) (%ffi-call->int . f510b) (%ffi-lookup . f510a) (%ffi-open . f5109) (%fork . f5108) (%pipe . f5107) (open-output-string . f5105) (get-output-string . f5104) (get-environment-variables . f5103) (get-environment-variable . f5102) (make-parameter . f277e) (socket-port . f50f2) (socket-shutdown . f50f1) (socket-close . f50f0) (socket-send . f50ef) (socket-recv! . f50ee) (socket-recv . f50ed) (make-server-socket . f50ec) (make-client-socket . f50eb) (socket-accept . f50ea) (socket? . f50e9) (parameterize . f4e81)) '() values values '#f '#f '#f '#f))
((lambda (f4d5b@add-library-path! f4d5d@parse-and-add-library-path f4d5f@for-each-with-index f4d61@rpad f4d63@condition-printer f4d65@record->field-alist f4d67@map-with-index f4d69@repl f4d6b@trace-printer f4d6d@command-line f4d6f@local-library-path f4d71@load/args f4d73@load f4d75@ironscheme-build f4d77@eval-top-level f4d79@compile-system-libraries f4d7b@compile f4d7d@compile->closure f4d7f@pre-compile-r6rs-file f4d81@load-r6rs-top-level) (begin (set! f4d5b@add-library-path! (lambda (f4d9c@path) (f2abd@f294c@library-path (append (f2abd@f294c@library-path) (list f4d9c@path))))) (set! f4d5d@parse-and-add-library-path (lambda (f4d9e@paths f4d9f@message) ((lambda (f4da2@t) (if f4da2@t ((lambda (f4da4@paths) (for-each (lambda (f4da6@path) (if (file-exists? f4da6@path) (f4d5b@add-library-path! (expand-path f4da6@path)) (format (current-error-port) f4d9f@message f4da6@path))) (reverse (string-split f4da4@paths '#\:)))) f4da2@t) (void))) f4d9e@paths))) (set! f4d5f@for-each-with-index (lambda (f4da8@proc f4da9@lst) (letrec ((f4dac@loop (lambda (f4dae@i f4daf@lst) (if (null? f4daf@lst) (if '#f '#f (void)) (begin (f4da8@proc f4dae@i (car f4daf@lst)) (f4dac@loop (+ f4dae@i '1) (cdr f4daf@lst))))))) (f4dac@loop '1 f4da9@lst)))) (set! f4d61@rpad (lambda (f4db2@str f4db3@pad f4db4@n) ((lambda (f4db8@rest) ((letrec ((f4dba@loop (lambda (f4dbc@rest f4dbd@ret) (if (<= f4dbc@rest '0) f4dbd@ret (f4dba@loop (- f4dbc@rest '1) (string-append f4dbd@ret f4db3@pad)))))) f4dba@loop) f4db8@rest (format '"~a" f4db2@str))) (- f4db4@n (string-length (format '"~a" f4db2@str)))))) (set! f4d63@condition-printer (lambda (f4dc0@e f4dc1@port) ((lambda (f4dc5@max-condition-len) (begin (set! f4dc5@max-condition-len (apply max (map (lambda (f4dd6@c) (string-length (symbol->string (record-type-name (record-rtd f4dd6@c))))) (simple-conditions f4dc0@e)))) (begin (display '" Condition components:\n" f4dc1@port) (f4d5f@for-each-with-index (lambda (f4dc6@i f4dc7@x) ((lambda (f4dca@rtd f4dcb@fields-alist) (begin (format f4dc1@port '" ~d. ~a" f4dc6@i (f4d61@rpad (symbol->string (record-type-name f4dca@rtd)) '" " f4dc5@max-condition-len)) (if (null? f4dcb@fields-alist) (newline f4dc1@port) (void)) ((letrec ((f4dce@loop (lambda (f4dd0@first f4dd1@fields-alist) (if (null? f4dd1@fields-alist) '() ((lambda (f4dd4@field) (begin (if (not f4dd0@first) (display (f4d61@rpad '"" '" " (+ '4 f4dc5@max-condition-len)) f4dc1@port) (void)) (display '"       " f4dc1@port) (display (car f4dd4@field) f4dc1@port) (display '": " f4dc1@port) (write (cdr f4dd4@field) f4dc1@port) (newline f4dc1@port) (f4dce@loop '#f (cdr f4dd1@fields-alist)))) (car f4dd1@fields-alist)))))) f4dce@loop) '#t f4dcb@fields-alist))) (record-rtd f4dc7@x) (f4d65@record->field-alist f4dc7@x))) (simple-conditions f4dc0@e))))) '#f))) (set! f4d65@record->field-alist (lambda (f4dd8@r) ((lambda (f4ddb@ref) (begin (set! f4ddb@ref (lambda (f4de6@rtd f4de7@i f4de8@x) ((lambda (f4dec@val) (if (symbol? f4dec@val) (ungensym f4dec@val) f4dec@val)) ((record-accessor f4de6@rtd f4de7@i) f4de8@x)))) ((letrec ((f4ddc@loop (lambda (f4dde@ret f4ddf@rtd) (if f4ddf@rtd (f4ddc@loop (append f4dde@ret (f4d67@map-with-index (lambda (f4de2@i f4de3@field) (cons f4de3@field (f4ddb@ref f4ddf@rtd f4de2@i f4dd8@r))) (vector->list (record-type-field-names f4ddf@rtd)))) (record-type-parent f4ddf@rtd)) f4dde@ret)))) f4ddc@loop) '() (record-rtd f4dd8@r)))) '#f))) (set! f4d67@map-with-index (lambda (f4dee@proc f4def@lst) ((letrec ((f4df2@loop (lambda (f4df4@i f4df5@lst f4df6@ret) (if (null? f4df5@lst) (reverse f4df6@ret) (f4df2@loop (+ f4df4@i '1) (cdr f4df5@lst) (cons (f4dee@proc f4df4@i (car f4df5@lst)) f4df6@ret)))))) f4df2@loop) '0 f4def@lst '()))) (set! f4d69@repl (lambda f4dfa@x ((lambda (f4dfd@rec) (begin (set! f4dfd@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (f4e00@f4dfe) (lambda () (with-exception-handler (lambda (f4e02@e) ((call/cc (lambda (f4e04@f4dff) (f4e00@f4dfe (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? f4e02@e) (f4d63@condition-printer f4e02@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" f4e02@e))) (f4e04@f4dff (lambda () (raise-continuable f4e02@e)))))))))) (lambda () ((letrec ((f4e06@loop (lambda (f4e08@line f4e09@accum) ((lambda (f4e0d@parentheses-ok? f4e0f@eval-string-print) (begin (set! f4e0d@parentheses-ok? (lambda (f4e14@text) ((letrec ((f4e16@loop (lambda (f4e18@chars f4e19@p0 f4e1a@p1) (if (null? f4e18@chars) (= '0 f4e19@p0 f4e1a@p1) ((lambda (f4e1e@t) (if (memv f4e1e@t '(#\()) (f4e16@loop (cdr f4e18@chars) (+ f4e19@p0 '1) f4e1a@p1) (if (memv f4e1e@t '(#\))) (f4e16@loop (cdr f4e18@chars) (- f4e19@p0 '1) f4e1a@p1) (if (memv f4e1e@t '(#\[)) (f4e16@loop (cdr f4e18@chars) f4e19@p0 (+ f4e1a@p1 '1)) (if (memv f4e1e@t '(#\])) (f4e16@loop (cdr f4e18@chars) f4e19@p0 (- f4e1a@p1 '1)) (f4e16@loop (cdr f4e18@chars) f4e19@p0 f4e1a@p1)))))) (car f4e18@chars)))))) f4e16@loop) (string->list f4e14@text) '0 '0))) (set! f4e0f@eval-string-print (lambda (f4e12@text) (if (not (or (string=? '"\n" f4e12@text) (= '0 (string-length f4e12@text)))) (write (f4d77@eval-top-level (call-with-port (open-string-input-port f4e12@text) read))) (void)))) (if (eof-object? f4e08@line) (begin (f4e0f@eval-string-print f4e09@accum) (exit)) ((lambda (f4e10@current) (if (f4e0d@parentheses-ok? f4e10@current) (f4e0f@eval-string-print f4e10@current) (f4e06@loop (get-line (current-input-port)) f4e10@current))) (string-append f4e09@accum f4e08@line))))) '#f '#f)))) f4e06@loop) (get-line (current-input-port)) '""))))))) (newline) (f4dfd@rec)))) (f4dfd@rec))) '#f))) (set! f4d6b@trace-printer (f2855@f277f@make-parameter write)) (set! f4d6d@command-line (f2855@f277f@make-parameter (get-command-line))) (set! f4d6f@local-library-path (lambda (f4e20@filename) (cons (expand-path '".") (f2abd@f294c@library-path)))) (set! f4d71@load/args (lambda (f4e22@filename . f4e24@args) (begin (apply f4d81@load-r6rs-top-level f4e22@filename 'load f4e24@args) (void)))) (set! f4d73@load (lambda (f4e26@filename) (begin (apply f4d81@load-r6rs-top-level f4e26@filename 'load (f4d6d@command-line)) (void)))) (set! f4d75@ironscheme-build (lambda () (f4d73@load '"ironscheme-buildscript.ss"))) (set! f4d77@eval-top-level (lambda (f4e28@x) (f4987@f2f7f@eval f4e28@x (f499d@f2fab@interaction-environment)))) (set! f4d79@compile-system-libraries (lambda () (f4d77@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! f4d7b@compile (lambda (f4e2a@filename) (f4d81@load-r6rs-top-level f4e2a@filename 'compile))) (set! f4d7d@compile->closure (lambda (f4e2c@filename) (f4d81@load-r6rs-top-level f4e2c@filename 'closure))) (set! f4d7f@pre-compile-r6rs-file (lambda (f4e2e@filename) (f4d81@load-r6rs-top-level f4e2e@filename 'compile))) (set! f4d81@load-r6rs-top-level (lambda (f4e30@filename f4e31@how . f4e34@args) ((lambda (f4e3a@f4e37 f4e3b@f4e39) ((lambda (f4e3e@swap) (dynamic-wind f4e3e@swap (lambda () ((lambda (f4e40@x*) ((lambda (f4e42@t) (if (memv f4e42@t '(closure)) (f499c@f2fa9@pre-compile-r6rs-top-level f4e40@x*) (if (memv f4e42@t '(load)) ((lambda (f4e48@f4e45 f4e49@f4e47) ((lambda (f4e4c@swap) (dynamic-wind f4e4c@swap (lambda () ((f499b@f2fa7@compile-r6rs-top-level f4e40@x*))) f4e4c@swap)) (lambda () ((lambda (f4e4e@t) (begin (f4e48@f4e45 f4e49@f4e47) (set! f4e49@f4e47 f4e4e@t))) (f4e48@f4e45))))) f4d6d@command-line (cons f4e30@filename (car f4e34@args))) (if (memv f4e42@t '(compile)) (begin (f499b@f2fa7@compile-r6rs-top-level f4e40@x*) (f2ac1@f2954@serialize-all f2850@f2775@serialize-library f28aa@f2863@compile-core-expr)) (if '#f '#f (void)))))) f4e31@how)) (with-input-from-file f4e30@filename (lambda () ((letrec ((f4e50@f (lambda () ((lambda (f4e52@x) (if (eof-object? f4e52@x) '() (cons f4e52@x (f4e50@f)))) (f2848@f2765@read-annotated))))) f4e50@f)))))) f4e3e@swap)) (lambda () ((lambda (f4e54@t) (begin (f4e3a@f4e37 f4e3b@f4e39) (set! f4e3b@f4e39 f4e54@t))) (f4e3a@f4e37))))) f2abd@f294c@library-path (f4d6f@local-library-path f4e30@filename)))) (begin (set! f4e69@f4d81@load-r6rs-top-level f4d81@load-r6rs-top-level) (set! f4e68@f4d7f@pre-compile-r6rs-file f4d7f@pre-compile-r6rs-file) (set! f4e67@f4d7d@compile->closure f4d7d@compile->closure) (set! f4e66@f4d7b@compile f4d7b@compile) (set! f4e65@f4d79@compile-system-libraries f4d79@compile-system-libraries) (set! f4e64@f4d77@eval-top-level f4d77@eval-top-level) (set! f4e63@f4d75@ironscheme-build f4d75@ironscheme-build) (set! f4e62@f4d73@load f4d73@load) (set! f4e61@f4d71@load/args f4d71@load/args) (set! f4e60@f4d6f@local-library-path f4d6f@local-library-path) (set! f4e5f@f4d6d@command-line f4d6d@command-line) (set! f4e5e@f4d6b@trace-printer f4d6b@trace-printer) (set! f4e5d@f4d69@repl f4d69@repl) (set! f4e5c@f4d67@map-with-index f4d67@map-with-index) (set! f4e5b@f4d65@record->field-alist f4d65@record->field-alist) (set! f4e5a@f4d63@condition-printer f4d63@condition-printer) (set! f4e59@f4d61@rpad f4d61@rpad) (set! f4e58@f4d5f@for-each-with-index f4d5f@for-each-with-index) (set! f4e57@f4d5d@parse-and-add-library-path f4d5d@parse-and-add-library-path) (set! f4e56@f4d5b@add-library-path! f4d5b@add-library-path!) (f2ac2@f2956@current-precompiled-library-loader f2851@f2777@load-serialized-library) (set-symbol-value! 'load f4d73@load) (set-symbol-value! 'pre-compile-r6rs-file f4d7f@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs f4d77@eval-top-level) (set-symbol-value! 'int-env-syms f497e@f2f6d@interaction-environment-symbols) (set-symbol-value! 'expanded2core f28a9@f2861@expanded->core) (set-symbol-value! 'trace-printer f4d6b@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (f4d82@c) (condition (f4cb8@f4ac2@make-non-continuable-violation) (f4cae@f4aa9@make-who-condition 'raise) (f4c72@f4a0a@make-message-condition '"returned from non-continuable exception") (f4ca4@f4a8e@make-irritants-condition (list f4d82@c))))) (f4d5d@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (f4d5d@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (f4d5b@add-library-path! (string-append (mosh-executable-path) '"/lib")) (f4d5b@add-library-path! (string-append (current-directory) '"/lib"))) (f4d5b@add-library-path! (string-append (standard-library-path) '"/lib")) ((lambda (f4d84@prefix) (f2abe@f294e@library-extensions (f4d84@prefix '".mosh" (f2abe@f294e@library-extensions)))) (lambda (f4d86@ext f4d87@ls) (append (map (lambda (f4d8a@x) (string-append f4d86@ext f4d8a@x)) f4d87@ls) f4d87@ls))) ((lambda (f4d8c@args f4d8d@port) ((lambda (f4d91@ref) (begin (set! f4d91@ref (lambda (f4d94@rtd f4d95@i f4d96@x) ((lambda (f4d9a@val) (if (symbol? f4d9a@val) (ungensym f4d9a@val) f4d9a@val)) ((record-accessor f4d94@rtd f4d95@i) f4d96@x)))) (with-exception-handler (lambda (f4d92@c) (if (condition? f4d92@c) (f4d63@condition-printer f4d92@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" f4d92@c))) (lambda () (if (null? f4d8c@args) (f4d69@repl) (f4d81@load-r6rs-top-level (car f4d8c@args) 'load (cdr f4d8c@args))))))) '#f)) (f4d6d@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
