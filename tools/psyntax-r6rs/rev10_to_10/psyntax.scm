;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (j57c@library-file-path->cache-path j57e@read-annotated j580@annotation-stripped j582@annotation? j584@annotation-source j586@annotation-expression j588@scm->fasl j58a@fasl-save j58c@fasl-load j58e@serialize-library j590@load-serialized-library j592@make-record-printer j594@compile-core j596@read-library-source-file j598@make-parameter j59a@mosh-cache-dir j630@file-options-spec) (begin (set! j57c@library-file-path->cache-path (lambda (j631@x) (call-with-values (lambda () (open-string-output-port)) (lambda (j637@j634 j638@j636) ((lambda (j63b@extract j63c@p) ((lambda (j640@display-hex) (begin (set! j640@display-hex (lambda (j649@n) (if (<= '0 j649@n '9) (display j649@n j63c@p) (display (integer->char (+ (char->integer '#\a) (- j649@n '10))) j63c@p)))) (begin ((letrec ((j641@f (lambda (j643@ls) (if (not (null? j643@ls)) (begin (display '"_" j63c@p) (for-each (lambda (j645@c) (if (or (char<=? '#\a j645@c '#\z) (char<=? '#\A j645@c '#\Z) (char<=? '#\0 j645@c '#\9) (memv j645@c '(#\- #\. #\_ #\~))) (display j645@c j63c@p) (begin (display '"%" j63c@p) ((lambda (j647@n) (begin (j640@display-hex (quotient j647@n '16)) (j640@display-hex (remainder j647@n '16)))) (char->integer j645@c))))) (string->list (car j643@ls))) (j641@f (cdr j643@ls))) (void))))) j641@f) (string-split j631@x '#\/)) (j63b@extract)))) '#f)) j638@j636 j637@j634))))) (set! j57e@read-annotated read) (set! j580@annotation-stripped (lambda (j64b@x) (j586@annotation-expression j64b@x))) (set! j582@annotation? (lambda (j64d@x) (source-info j64d@x))) (set! j584@annotation-source (lambda (j64f@x) (source-info j64f@x))) (set! j586@annotation-expression (lambda (j651@x) (if (pair? j651@x) (cons (car j651@x) (cdr j651@x)) (display '"line:46\n")))) (set! j588@scm->fasl (lambda (j653@filename) (string-append (j59a@mosh-cache-dir) '"/" (j57c@library-file-path->cache-path j653@filename) '".mosh-fasl"))) (set! j58a@fasl-save (lambda (j655@filename j656@obj) (call-with-port (open-file-output-port j655@filename) (lambda (j659@port) ((symbol-value 'fasl-write!) j656@obj j659@port))))) (set! j58c@fasl-load (lambda (j65b@filename) (call-with-port (open-file-input-port j65b@filename) (symbol-value 'fasl-read!)))) (set! j58e@serialize-library (lambda (j65d@filename j65e@obj) (begin ((lambda (j661@expanded2core) ((lambda (j663@compile) ((lambda (j665@code) ((lambda (j667@pivot) ((lambda (j669@visit) ((lambda () (begin (set-car! j667@pivot j669@visit) ((lambda (j66b@pivot) ((lambda (j66d@invoke) ((lambda () (set-car! j66b@pivot j66d@invoke)))) (j663@compile (j661@expanded2core (car j66b@pivot))))) (cdr j667@pivot)))))) (j663@compile (j661@expanded2core (car j667@pivot))))) (cddddr (cddddr j665@code)))) j65e@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (j66f@fasl-file) (begin (if (file-exists? j66f@fasl-file) (delete-file j66f@fasl-file) (void)) ((call/cc (lambda (j673@j671) (lambda () (with-exception-handler (lambda (j675@c) ((call/cc (lambda (j677@j672) (j673@j671 (lambda () (if '#t (begin (format (current-error-port) '"Warning:serialize-library failed " j65d@filename) (if (file-exists? j66f@fasl-file) (delete-file j66f@fasl-file) (void)) '#f) (j677@j672 (lambda () (raise-continuable j675@c)))))))))) (lambda () (j58a@fasl-save j66f@fasl-file j65e@obj))))))))) (j588@scm->fasl j65d@filename))))) (set! j590@load-serialized-library (lambda (j679@filename j67a@obj) (and (j59a@mosh-cache-dir) ((lambda (j67d@fasl-file) (if (and (file-exists? j67d@fasl-file) ((symbol-value 'file-newer?) j67d@fasl-file j679@filename)) ((lambda (j67f@expanded2core) ((lambda (j681@eval-compiled-core) ((lambda (j683@code) ((lambda (j685@pivot) ((lambda (j687@visit) ((lambda (j689@visit-proc) ((lambda () (begin (set-car! j685@pivot j689@visit-proc) ((lambda (j68b@pivot) ((lambda (j68d@invoke) ((lambda () (begin (set-car! j68b@pivot (lambda () (j681@eval-compiled-core j68d@invoke))) (apply j67a@obj j683@code))))) (car j68b@pivot))) (cdr j685@pivot)))))) (lambda () (j681@eval-compiled-core j687@visit)))) (car j685@pivot))) (cddddr (cddddr j683@code)))) (j58c@fasl-load j67d@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (j588@scm->fasl j679@filename))))) (set! j592@make-record-printer (lambda (j68f@name j690@printer) (lambda j693@x (begin (display '"record printer") (for-each display j693@x))))) (set! j594@compile-core (lambda j695@x (apply error 'comile-core '"not implementated" j695@x))) (set! j596@read-library-source-file (lambda (j697@file-name) (with-input-from-file j697@file-name j57e@read-annotated))) (set! j598@make-parameter (lambda j6a7 ((lambda (j6a8) (if (= j6a8 '1) (apply (lambda (j699@x) (j598@make-parameter j699@x (lambda (j69b@x) j69b@x))) j6a7) (if (= j6a8 '2) (apply (lambda (j69d@x j69e@fender) ((lambda (j6a1@x) (lambda j6a5 ((lambda (j6a6) (if (= j6a6 '0) (apply (lambda () j6a1@x) j6a5) (if (= j6a6 '1) (apply (lambda (j6a3@v) (set! j6a1@x (j69e@fender j6a3@v))) j6a5) (error 'apply '"invalid arg count")))) (length j6a5)))) (j69e@fender j69d@x))) j6a7) (error 'apply '"invalid arg count")))) (length j6a7)))) (set! j59a@mosh-cache-dir (j598@make-parameter '#f)) (set! j630@file-options-spec (lambda (j6a9@x) j6a9@x)) (begin (set! j6bb@j630@file-options-spec j630@file-options-spec) (set! j6ba@j59a@mosh-cache-dir j59a@mosh-cache-dir) (set! j6b9@j598@make-parameter j598@make-parameter) (set! j6b8@j596@read-library-source-file j596@read-library-source-file) (set! j6b7@j594@compile-core j594@compile-core) (set! j6b6@j592@make-record-printer j592@make-record-printer) (set! j6b5@j590@load-serialized-library j590@load-serialized-library) (set! j6b4@j58e@serialize-library j58e@serialize-library) (set! j6b3@j58c@fasl-load j58c@fasl-load) (set! j6b2@j58a@fasl-save j58a@fasl-save) (set! j6b1@j588@scm->fasl j588@scm->fasl) (set! j6b0@j586@annotation-expression j586@annotation-expression) (set! j6af@j584@annotation-source j584@annotation-source) (set! j6ae@j582@annotation? j582@annotation?) (set! j6ad@j580@annotation-stripped j580@annotation-stripped) (set! j6ac@j57e@read-annotated j57e@read-annotated) (set! j6ab@j57c@library-file-path->cache-path j57c@library-file-path->cache-path)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (j6c1@current-primitive-locations j6c3@mutable? j6c5@rewriter j6c7@expanded->core j6c9@compile-core-expr j6cb@pretty-print j6cd@compile-core-expr-to-port) (begin (set! j6c1@current-primitive-locations (j6b9@j598@make-parameter (lambda (j6ce@x) '#f) (lambda (j6d0@p) j6d0@p))) (set! j6c3@mutable? (lambda (j6d2@x) (or (pair? j6d2@x) (vector? j6d2@x) (hashtable? j6d2@x)))) (set! j6c5@rewriter (lambda (j6d4@quote-hack?) ((lambda (j6d7@f) (begin (set! j6d7@f (lambda (j6d8@x) (if (pair? j6d8@x) ((lambda (j6da@t) (if (memv j6da@t '(quote)) (if (and j6d4@quote-hack? (j6c3@mutable? (cadr j6d8@x))) ((lambda (j6dc@g) (begin (set-symbol-value! j6dc@g (cadr j6d8@x)) j6dc@g)) (gensym)) j6d8@x) (if (memv j6da@t '(case-lambda)) (cons 'case-lambda (map (lambda (j6de@x) (cons (car j6de@x) (map j6d7@f (cdr j6de@x)))) (cdr j6d8@x))) (if (memv j6da@t '(lambda)) (cons* 'lambda (cadr j6d8@x) (map j6d7@f (cddr j6d8@x))) (if (memv j6da@t '(letrec)) ((lambda (j6e0@bindings j6e1@body*) ((lambda (j6e4@lhs* j6e5@rhs*) (cons* 'letrec (map list j6e4@lhs* (map j6d7@f j6e5@rhs*)) (map j6d7@f j6e1@body*))) (map car j6e0@bindings) (map cadr j6e0@bindings))) (cadr j6d8@x) (cddr j6d8@x)) (if (memv j6da@t '(letrec*)) ((lambda (j6e8@bindings j6e9@body*) ((lambda (j6ec@lhs* j6ed@rhs*) (cons* 'letrec* (map list j6ec@lhs* (map j6d7@f j6ed@rhs*)) (map j6d7@f j6e9@body*))) (map car j6e8@bindings) (map cadr j6e8@bindings))) (cadr j6d8@x) (cddr j6d8@x)) (if (memv j6da@t '(library-letrec*)) ((lambda (j6f0@name j6f1@x) ((lambda (j6f4@bindings j6f5@body*) ((lambda (j6f8@lhs* j6f9@lhs** j6fa@rhs*) (cons* 'library-letrec* j6f0@name (map list j6f8@lhs* j6f9@lhs** (map j6d7@f j6fa@rhs*)) (map j6d7@f j6f5@body*))) (map car j6f4@bindings) (map cadr j6f4@bindings) (map caddr j6f4@bindings))) (cadr j6f1@x) (cddr j6f1@x))) (cadr j6d8@x) (cdr j6d8@x)) (if (memv j6da@t '(begin)) (cons 'begin (map j6d7@f (cdr j6d8@x))) (if (memv j6da@t '(set!)) (list 'set! (cadr j6d8@x) (j6d7@f (caddr j6d8@x))) (if (memv j6da@t '(primitive)) ((lambda (j6fe@op) ((lambda (j700@t) (if j700@t ((lambda (j702@loc) j702@loc) j700@t) j6fe@op)) ((j6c1@current-primitive-locations) j6fe@op))) (cadr j6d8@x)) (if (memv j6da@t '(define)) j6d8@x (if (list? j6d8@x) (map j6d7@f j6d8@x) (error 'rewrite '"invalid form ~s ~s" j6d8@x (list? j6d8@x)))))))))))))) (car j6d8@x)) j6d8@x))) j6d7@f)) '#f))) (set! j6c7@expanded->core (lambda (j704@x) ((j6c5@rewriter '#f) j704@x))) (set! j6c9@compile-core-expr (lambda (j706@x) ((j6c5@rewriter '#f) j706@x))) (set! j6cb@pretty-print write) (set! j6cd@compile-core-expr-to-port (lambda (j708@x j709@p) (j6cb@pretty-print ((j6c5@rewriter '#f) j708@x) j709@p))) (begin (set! j712@j6cd@compile-core-expr-to-port j6cd@compile-core-expr-to-port) (set! j711@j6cb@pretty-print j6cb@pretty-print) (set! j710@j6c9@compile-core-expr j6c9@compile-core-expr) (set! j70f@j6c7@expanded->core j6c7@expanded->core) (set! j70e@j6c5@rewriter j6c5@rewriter) (set! j70d@j6c3@mutable? j6c3@mutable?) (set! j70c@j6c1@current-primitive-locations j6c1@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (j761@make-collection j763@current-library-collection j765@rp j76f@library? j771@library-id j773@set-library-id! j775@library-name j777@set-library-name! j779@library-version j77b@set-library-version! j77d@library-imp* j77f@set-library-imp*! j781@library-vis* j783@set-library-vis*! j785@library-inv* j787@set-library-inv*! j789@library-subst j78b@set-library-subst! j78d@library-env j78f@set-library-env! j791@library-visit-state j793@set-library-visit-state! j795@library-invoke-state j797@set-library-invoke-state! j799@library-visit-code j79b@set-library-visit-code! j79d@library-invoke-code j79f@set-library-invoke-code! j7a1@library-visible? j7a3@set-library-visible?! j7a5@library-source-file-name j7a7@set-library-source-file-name! j7a9@dummy j7ab@find-dependencies j7ad@find-library-by j7af@library-path j7b1@library-extensions j7b3@library-name->file-name j7b5@file-locator j7b7@serialize-all j7b9@current-precompiled-library-loader j7bb@try-load-from-file j7bd@library-loader j7bf@current-library-expander j7c1@external-pending-libraries j7c3@find-external-library j7c5@find-library-by-name j7c7@library-exists? j7c9@find-library-by-spec/die j7cb@label->binding-table j7cd@install-library-record j7cf@install-library j7d1@imported-label->binding j7d3@invoke-library j7d5@visit-library j7d7@invoke-library-by-spec j7d9@installed-libraries j7db@library-spec) (begin (set! j761@make-collection (lambda () ((lambda (j7dc@set) ((lambda (j7df@set-cons) (begin (set! j7df@set-cons (lambda (j7e4@x j7e5@ls) (if (memq j7e4@x j7e5@ls) j7e5@ls (cons j7e4@x j7e5@ls)))) (lambda j7e2 ((lambda (j7e3) (if (= j7e3 '0) (apply (lambda () j7dc@set) j7e2) (if (= j7e3 '1) (apply (lambda (j7e0@x) (set! j7dc@set (j7df@set-cons j7e0@x j7dc@set))) j7e2) (error 'apply '"invalid arg count")))) (length j7e2))))) '#f)) '()))) (set! j763@current-library-collection (j6b9@j598@make-parameter (j761@make-collection) (lambda (j7e8@x) (begin (if (not (procedure? j7e8@x)) (assertion-violation 'current-library-collection '"not a procedure" j7e8@x) (void)) j7e8@x)))) (set! j765@rp (j6b6@j592@make-record-printer 'library (lambda (j7ea@x j7eb@p j7ec@wr) (begin (if (not (j76f@library? j7ea@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (j779@library-version j7ea@x)) (j775@library-name j7ea@x) (append (j775@library-name j7ea@x) (list (j779@library-version j7ea@x))))) j7eb@p))))) (set! j76f@library? (lambda (j7f0@x) (and (simple-struct? j7f0@x) (eq? (simple-struct-name j7f0@x) 'library)))) (set! j771@library-id (lambda (j7f2@x) (simple-struct-ref j7f2@x '0))) (set! j773@set-library-id! (lambda (j7f4@x j7f5@val) (simple-struct-set! j7f4@x '0 j7f5@val))) (set! j775@library-name (lambda (j7f8@x) (simple-struct-ref j7f8@x '1))) (set! j777@set-library-name! (lambda (j7fa@x j7fb@val) (simple-struct-set! j7fa@x '1 j7fb@val))) (set! j779@library-version (lambda (j7fe@x) (simple-struct-ref j7fe@x '2))) (set! j77b@set-library-version! (lambda (j800@x j801@val) (simple-struct-set! j800@x '2 j801@val))) (set! j77d@library-imp* (lambda (j804@x) (simple-struct-ref j804@x '3))) (set! j77f@set-library-imp*! (lambda (j806@x j807@val) (simple-struct-set! j806@x '3 j807@val))) (set! j781@library-vis* (lambda (j80a@x) (simple-struct-ref j80a@x '4))) (set! j783@set-library-vis*! (lambda (j80c@x j80d@val) (simple-struct-set! j80c@x '4 j80d@val))) (set! j785@library-inv* (lambda (j810@x) (simple-struct-ref j810@x '5))) (set! j787@set-library-inv*! (lambda (j812@x j813@val) (simple-struct-set! j812@x '5 j813@val))) (set! j789@library-subst (lambda (j816@x) (simple-struct-ref j816@x '6))) (set! j78b@set-library-subst! (lambda (j818@x j819@val) (simple-struct-set! j818@x '6 j819@val))) (set! j78d@library-env (lambda (j81c@x) (simple-struct-ref j81c@x '7))) (set! j78f@set-library-env! (lambda (j81e@x j81f@val) (simple-struct-set! j81e@x '7 j81f@val))) (set! j791@library-visit-state (lambda (j822@x) (simple-struct-ref j822@x '8))) (set! j793@set-library-visit-state! (lambda (j824@x j825@val) (simple-struct-set! j824@x '8 j825@val))) (set! j795@library-invoke-state (lambda (j828@x) (simple-struct-ref j828@x '9))) (set! j797@set-library-invoke-state! (lambda (j82a@x j82b@val) (simple-struct-set! j82a@x '9 j82b@val))) (set! j799@library-visit-code (lambda (j82e@x) (simple-struct-ref j82e@x '10))) (set! j79b@set-library-visit-code! (lambda (j830@x j831@val) (simple-struct-set! j830@x '10 j831@val))) (set! j79d@library-invoke-code (lambda (j834@x) (simple-struct-ref j834@x '11))) (set! j79f@set-library-invoke-code! (lambda (j836@x j837@val) (simple-struct-set! j836@x '11 j837@val))) (set! j7a1@library-visible? (lambda (j83a@x) (simple-struct-ref j83a@x '12))) (set! j7a3@set-library-visible?! (lambda (j83c@x j83d@val) (simple-struct-set! j83c@x '12 j83d@val))) (set! j7a5@library-source-file-name (lambda (j840@x) (simple-struct-ref j840@x '13))) (set! j7a7@set-library-source-file-name! (lambda (j842@x j843@val) (simple-struct-set! j842@x '13 j843@val))) (set! j7a9@dummy '3) (set! j7ab@find-dependencies (lambda (j846@ls) (if (null? j846@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! j7ad@find-library-by (lambda (j848@pred) ((letrec ((j84a@f (lambda (j84c@ls) (if (null? j84c@ls) '#f (if (j848@pred (car j84c@ls)) (car j84c@ls) (j84a@f (cdr j84c@ls))))))) j84a@f) ((j763@current-library-collection))))) (set! j7af@library-path (j6b9@j598@make-parameter '(".") (lambda (j84e@x) (if (and (list? j84e@x) (for-all string? j84e@x)) (map (lambda (j850@x) j850@x) j84e@x) (assertion-violation 'library-path '"not a list of strings" j84e@x))))) (set! j7b1@library-extensions (j6b9@j598@make-parameter '(".sls" ".ss" ".scm") (lambda (j852@x) (if (and (list? j852@x) (for-all string? j852@x)) (map (lambda (j854@x) j854@x) j852@x) (assertion-violation 'library-extensions '"not a list of strings" j852@x))))) (set! j7b3@library-name->file-name (lambda (j856@x) (call-with-values (lambda () (open-string-output-port)) (lambda (j85c@j859 j85d@j85b) ((lambda (j860@extract j861@p) ((lambda (j865@display-hex) (begin (set! j865@display-hex (lambda (j86e@n) (if (<= '0 j86e@n '9) (display j86e@n j861@p) (display (integer->char (+ (char->integer '#\a) (- j86e@n '10))) j861@p)))) (begin ((letrec ((j866@f (lambda (j868@ls) (if (not (null? j868@ls)) (begin (display '"/" j861@p) (for-each (lambda (j86a@c) (if (or (char<=? '#\a j86a@c '#\z) (char<=? '#\A j86a@c '#\Z) (char<=? '#\0 j86a@c '#\9) (memv j86a@c '(#\- #\. #\_ #\~))) (display j86a@c j861@p) (begin (display '"%" j861@p) ((lambda (j86c@n) (begin (j865@display-hex (quotient j86c@n '16)) (j865@display-hex (remainder j86c@n '16)))) (char->integer j86a@c))))) (string->list (symbol->string (car j868@ls)))) (j866@f (cdr j868@ls))) (void))))) j866@f) j856@x) (j860@extract)))) '#f)) j85d@j85b j85c@j859))))) (set! j7b5@file-locator (j6b9@j598@make-parameter (lambda (j870@x) ((lambda (j872@str) ((letrec ((j874@f (lambda (j876@ls j877@exts j878@failed-list) (if (null? j876@ls) ((lambda () ((lambda (j884@j87f j886@j881 j888@j880 j88b@j87e j88d@make-library-resolution-condition j88f@j87c j891@j87d j893@library-resolution-condition? j895@condition-library j897@condition-files) (begin (set! j884@j87f (make-record-type-descriptor '&library-resolution j2b2e@j2875@&condition-rtd 'j882 '#f '#f '#((immutable library) (immutable files)))) (set! j886@j881 '#f) (set! j888@j880 (make-record-constructor-descriptor j884@j87f j2b2f@j2877@&condition-rcd j886@j881)) (set! j88b@j87e (record-predicate j884@j87f)) (set! j88d@make-library-resolution-condition (record-constructor j888@j880)) (set! j88f@j87c (record-accessor j884@j87f '0)) (set! j891@j87d (record-accessor j884@j87f '1)) (set! j893@library-resolution-condition? (condition-predicate j884@j87f)) (set! j895@condition-library (condition-accessor j884@j87f j88f@j87c)) (set! j897@condition-files (condition-accessor j884@j87f j891@j87d)) (raise (condition (j2b4e@j290f@make-error) (j2b70@j296b@make-who-condition 'expander) (j2b34@j28cc@make-message-condition '"cannot locate library in library-path") (j88d@make-library-resolution-condition j870@x (reverse j878@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? j877@exts) (j874@f (cdr j876@ls) (j7b1@library-extensions) j878@failed-list) ((lambda (j898@name) (if (file-exists? j898@name) j898@name (j874@f j876@ls (cdr j877@exts) (cons j898@name j878@failed-list)))) (string-append (car j876@ls) j872@str (car j877@exts)))))))) j874@f) (j7af@library-path) (j7b1@library-extensions) '())) (j7b3@library-name->file-name j870@x))) (lambda (j89a@f) (if (procedure? j89a@f) j89a@f (assertion-violation 'file-locator '"not a procedure" j89a@f))))) (set! j7b7@serialize-all (lambda (j89c@serialize j89d@compile) ((lambda (j8a1@library-desc) (begin (set! j8a1@library-desc (lambda (j8a4@x) (list (j771@library-id j8a4@x) (j775@library-name j8a4@x)))) (for-each (lambda (j8a2@x) (if (j7a5@library-source-file-name j8a2@x) (j89c@serialize (j7a5@library-source-file-name j8a2@x) (list (j771@library-id j8a2@x) (j775@library-name j8a2@x) (j779@library-version j8a2@x) (map j8a1@library-desc (j77d@library-imp* j8a2@x)) (map j8a1@library-desc (j781@library-vis* j8a2@x)) (map j8a1@library-desc (j785@library-inv* j8a2@x)) (j789@library-subst j8a2@x) (j78d@library-env j8a2@x) (j89d@compile (j799@library-visit-code j8a2@x)) (j89d@compile (j79d@library-invoke-code j8a2@x)) (j7a1@library-visible? j8a2@x))) (void))) ((j763@current-library-collection))))) '#f))) (set! j7b9@current-precompiled-library-loader (j6b9@j598@make-parameter (lambda (j8a6@filename j8a7@sk) '#f))) (set! j7bb@try-load-from-file (lambda (j8aa@filename) ((j7b9@current-precompiled-library-loader) j8aa@filename (lambda j8d0 ((lambda (j8d1) (if (= j8d1 '11) (apply (lambda (j8ac@id j8ad@name j8ae@ver j8af@imp* j8b0@vis* j8b1@inv* j8b2@exp-subst j8b3@exp-env j8b4@visit-proc j8b5@invoke-proc j8b6@visible?) ((letrec ((j8c2@f (lambda (j8c4@deps) (if (null? j8c4@deps) (begin (j7cf@install-library j8ac@id j8ad@name j8ae@ver j8af@imp* j8b0@vis* j8b1@inv* j8b2@exp-subst j8b3@exp-env j8b4@visit-proc j8b5@invoke-proc '#f '#f j8b6@visible? '#f) '#t) ((lambda (j8c6@d) ((lambda (j8c8@label j8c9@dname) ((lambda (j8cc@l) (if (and (j76f@library? j8cc@l) (eq? j8c8@label (j771@library-id j8cc@l))) (j8c2@f (cdr j8c4@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" j8ad@name j8c9@dname j8aa@filename j8cc@l j8c8@label (j771@library-id j8cc@l)) '#f))) (j7c5@find-library-by-name j8c9@dname))) (car j8c6@d) (cadr j8c6@d))) (car j8c4@deps)))))) j8c2@f) (append j8af@imp* j8b0@vis* j8b1@inv*))) j8d0) (if (>= j8d1 '0) (apply (lambda j8ce@others '#f) j8d0) (error 'apply '"invalid arg count")))) (length j8d0)))))) (set! j7bd@library-loader (j6b9@j598@make-parameter (lambda (j8d2@x) ((lambda (j8d4@file-name) (if (not j8d4@file-name) (assertion-violation '#f '"cannot file library" j8d2@x) (or (j7bb@try-load-from-file j8d4@file-name) ((j7bf@current-library-expander) (j6b8@j596@read-library-source-file j8d4@file-name) j8d4@file-name (lambda (j8d6@name) (if (not (fast-equal? j8d6@name j8d2@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (j8dc@j8d9 j8dd@j8db) ((lambda (j8e0@e j8e1@p) (begin (display '"expected to find library " j8e1@p) (write j8d2@x j8e1@p) (display '" in file " j8e1@p) (display j8d4@file-name j8e1@p) (display '", found " j8e1@p) (write j8d6@name j8e1@p) (display '" instead" j8e1@p) (j8e0@e))) j8dd@j8db j8dc@j8d9)))) (void))))))) ((j7b5@file-locator) j8d2@x))) (lambda (j8e4@f) (if (procedure? j8e4@f) j8e4@f (assertion-violation 'library-locator '"not a procedure" j8e4@f))))) (set! j7bf@current-library-expander (j6b9@j598@make-parameter (lambda (j8e6@x) (assertion-violation 'library-expander '"not initialized")) (lambda (j8e8@f) (if (procedure? j8e8@f) j8e8@f (assertion-violation 'library-expander '"not a procedure" j8e8@f))))) (set! j7c1@external-pending-libraries (j6b9@j598@make-parameter '())) (set! j7c3@find-external-library (lambda (j8ea@name) (begin (if (member j8ea@name (j7c1@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" j8ea@name) (void)) ((lambda (j8f0@j8ed j8f1@j8ef) ((lambda (j8f4@swap) (dynamic-wind j8f4@swap (lambda () (begin ((j7bd@library-loader) j8ea@name) (or (j7ad@find-library-by (lambda (j8f6@x) (fast-equal? (j775@library-name j8f6@x) j8ea@name))) (assertion-violation '#f '"handling external library did not yield the correct library" j8ea@name)))) j8f4@swap)) (lambda () ((lambda (j8f8@t) (begin (j8f0@j8ed j8f1@j8ef) (set! j8f1@j8ef j8f8@t))) (j8f0@j8ed))))) j7c1@external-pending-libraries (cons j8ea@name (j7c1@external-pending-libraries)))))) (set! j7c5@find-library-by-name (lambda (j8fa@name) (or (j7ad@find-library-by (lambda (j8fc@x) (fast-equal? (j775@library-name j8fc@x) j8fa@name))) (j7c3@find-external-library j8fa@name)))) (set! j7c7@library-exists? (lambda (j8fe@name) (and (j7ad@find-library-by (lambda (j900@x) (fast-equal? (j775@library-name j900@x) j8fe@name))) '#t))) (set! j7c9@find-library-by-spec/die (lambda (j902@spec) ((lambda (j904@id) (or (j7ad@find-library-by (lambda (j906@x) (eq? j904@id (j771@library-id j906@x)))) (assertion-violation '#f '"cannot find library with required spec" j902@spec))) (car j902@spec)))) (set! j7cb@label->binding-table (make-eq-hashtable)) (set! j7cd@install-library-record (lambda (j908@lib) (begin ((lambda (j90a@exp-env) (for-each (lambda (j90c@x) ((lambda (j90e@label j90f@binding) ((lambda (j912@binding) (begin (if (hashtable-ref j7cb@label->binding-table j90e@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" j90e@label (hashtable-ref j7cb@label->binding-table j90e@label '#f) j912@binding) (exit)) (void)) (hashtable-set! j7cb@label->binding-table j90e@label j912@binding))) ((lambda (j914@t) (if (memv j914@t '(global)) (cons 'global (cons j908@lib (cdr j90f@binding))) (if (memv j914@t '(global-macro)) (cons 'global-macro (cons j908@lib (cdr j90f@binding))) (if (memv j914@t '(global-macro!)) (cons 'global-macro! (cons j908@lib (cdr j90f@binding))) j90f@binding)))) (car j90f@binding)))) (car j90c@x) (cdr j90c@x))) j90a@exp-env)) (j78d@library-env j908@lib)) ((j763@current-library-collection) j908@lib)))) (set! j7cf@install-library (lambda (j916@id j917@name j918@ver j919@imp* j91a@vis* j91b@inv* j91c@exp-subst j91d@exp-env j91e@visit-proc j91f@invoke-proc j920@visit-code j921@invoke-code j922@visible? j923@source-file-name) ((lambda (j932@imp-lib* j933@vis-lib* j934@inv-lib*) (begin (if (not (and (symbol? j916@id) (list? j917@name) (list? j918@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" j916@id j917@name j918@ver) (void)) (if (j7c7@library-exists? j917@name) (assertion-violation 'install-library '"library is already installed" j917@name) (void)) ((lambda (j938@lib) (j7cd@install-library-record j938@lib)) (make-simple-struct 'library '15 (list j916@id j917@name j918@ver j932@imp-lib* j933@vis-lib* j934@inv-lib* j91c@exp-subst j91d@exp-env j91e@visit-proc j91f@invoke-proc j920@visit-code j921@invoke-code j922@visible? j923@source-file-name))))) (map j7c9@find-library-by-spec/die j919@imp*) (map j7c9@find-library-by-spec/die j91a@vis*) (map j7c9@find-library-by-spec/die j91b@inv*)))) (set! j7d1@imported-label->binding (lambda (j93a@lab) (hashtable-ref j7cb@label->binding-table j93a@lab '#f))) (set! j7d3@invoke-library (lambda (j93c@lib) ((lambda (j93e@invoke) (if (procedure? j93e@invoke) (begin (j797@set-library-invoke-state! j93c@lib (lambda () (assertion-violation 'invoke '"circularity detected" j93c@lib))) (for-each j7d3@invoke-library (j785@library-inv* j93c@lib)) (j797@set-library-invoke-state! j93c@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" j93c@lib))) (j93e@invoke) (j797@set-library-invoke-state! j93c@lib '#t)) (void))) (j795@library-invoke-state j93c@lib)))) (set! j7d5@visit-library (lambda (j940@lib) ((lambda (j942@visit) (if (procedure? j942@visit) (begin (j793@set-library-visit-state! j940@lib (lambda () (assertion-violation 'visit '"circularity detected" j940@lib))) (for-each j7d3@invoke-library (j781@library-vis* j940@lib)) (j793@set-library-visit-state! j940@lib (lambda () (assertion-violation 'invoke '"first visit did not return" j940@lib))) (j942@visit) (j793@set-library-visit-state! j940@lib '#t)) (void))) (j791@library-visit-state j940@lib)))) (set! j7d7@invoke-library-by-spec (lambda (j944@spec) (j7d3@invoke-library (j7c9@find-library-by-spec/die j944@spec)))) (set! j7d9@installed-libraries (lambda j94c ((lambda (j94d) (if (= j94d '1) (apply (lambda (j946@all?) ((letrec ((j948@f (lambda (j94a@ls) (if (null? j94a@ls) '() (if (or j946@all? (j7a1@library-visible? (car j94a@ls))) (cons (car j94a@ls) (j948@f (cdr j94a@ls))) (j948@f (cdr j94a@ls))))))) j948@f) ((j763@current-library-collection)))) j94c) (if (= j94d '0) (apply (lambda () (j7d9@installed-libraries '#f)) j94c) (error 'apply '"invalid arg count")))) (length j94c)))) (set! j7db@library-spec (lambda (j94e@x) (begin (if (not (j76f@library? j94e@x)) (assertion-violation 'library-spec '"not a library" j94e@x) (void)) (list (j771@library-id j94e@x) (j775@library-name j94e@x) (j779@library-version j94e@x))))) (begin (set! j989@j7db@library-spec j7db@library-spec) (set! j988@j7d9@installed-libraries j7d9@installed-libraries) (set! j987@j7d7@invoke-library-by-spec j7d7@invoke-library-by-spec) (set! j986@j7d5@visit-library j7d5@visit-library) (set! j985@j7d3@invoke-library j7d3@invoke-library) (set! j984@j7d1@imported-label->binding j7d1@imported-label->binding) (set! j983@j7cf@install-library j7cf@install-library) (set! j982@j7cd@install-library-record j7cd@install-library-record) (set! j981@j7cb@label->binding-table j7cb@label->binding-table) (set! j980@j7c9@find-library-by-spec/die j7c9@find-library-by-spec/die) (set! j97f@j7c7@library-exists? j7c7@library-exists?) (set! j97e@j7c5@find-library-by-name j7c5@find-library-by-name) (set! j97d@j7c3@find-external-library j7c3@find-external-library) (set! j97c@j7c1@external-pending-libraries j7c1@external-pending-libraries) (set! j97b@j7bf@current-library-expander j7bf@current-library-expander) (set! j97a@j7bd@library-loader j7bd@library-loader) (set! j979@j7bb@try-load-from-file j7bb@try-load-from-file) (set! j978@j7b9@current-precompiled-library-loader j7b9@current-precompiled-library-loader) (set! j977@j7b7@serialize-all j7b7@serialize-all) (set! j976@j7b5@file-locator j7b5@file-locator) (set! j975@j7b3@library-name->file-name j7b3@library-name->file-name) (set! j974@j7b1@library-extensions j7b1@library-extensions) (set! j973@j7af@library-path j7af@library-path) (set! j972@j7ad@find-library-by j7ad@find-library-by) (set! j971@j7ab@find-dependencies j7ab@find-dependencies) (set! j970@j7a9@dummy j7a9@dummy) (set! j96f@j7a7@set-library-source-file-name! j7a7@set-library-source-file-name!) (set! j96e@j7a5@library-source-file-name j7a5@library-source-file-name) (set! j96d@j7a3@set-library-visible?! j7a3@set-library-visible?!) (set! j96c@j7a1@library-visible? j7a1@library-visible?) (set! j96b@j79f@set-library-invoke-code! j79f@set-library-invoke-code!) (set! j96a@j79d@library-invoke-code j79d@library-invoke-code) (set! j969@j79b@set-library-visit-code! j79b@set-library-visit-code!) (set! j968@j799@library-visit-code j799@library-visit-code) (set! j967@j797@set-library-invoke-state! j797@set-library-invoke-state!) (set! j966@j795@library-invoke-state j795@library-invoke-state) (set! j965@j793@set-library-visit-state! j793@set-library-visit-state!) (set! j964@j791@library-visit-state j791@library-visit-state) (set! j963@j78f@set-library-env! j78f@set-library-env!) (set! j962@j78d@library-env j78d@library-env) (set! j961@j78b@set-library-subst! j78b@set-library-subst!) (set! j960@j789@library-subst j789@library-subst) (set! j95f@j787@set-library-inv*! j787@set-library-inv*!) (set! j95e@j785@library-inv* j785@library-inv*) (set! j95d@j783@set-library-vis*! j783@set-library-vis*!) (set! j95c@j781@library-vis* j781@library-vis*) (set! j95b@j77f@set-library-imp*! j77f@set-library-imp*!) (set! j95a@j77d@library-imp* j77d@library-imp*) (set! j959@j77b@set-library-version! j77b@set-library-version!) (set! j958@j779@library-version j779@library-version) (set! j957@j777@set-library-name! j777@set-library-name!) (set! j956@j775@library-name j775@library-name) (set! j955@j773@set-library-id! j773@set-library-id!) (set! j954@j771@library-id j771@library-id) (set! j953@j76f@library? j76f@library?) (set! j952@j765@rp j765@rp) (set! j951@j763@current-library-collection j763@current-library-collection) (set! j950@j761@make-collection j761@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (j98d@build-global-define j9fe@build-lambda ja00@build-case-lambda ja02@build-let ja30@build-sequence ja32@build-void ja34@build-letrec ja36@build-letrec* ja38@build-library-letrec* ja3a@build-receive) (begin (set! j98d@build-global-define (lambda (ja3b@x) (ja32@build-void))) (set! j9fe@build-lambda (lambda (ja3d@ae ja3e@vars ja3f@exp) (list 'lambda ja3e@vars ja3f@exp))) (set! ja00@build-case-lambda (lambda (ja43@ae ja44@vars* ja45@exp*) ((lambda (ja4a@build-error ja4c@build-pred ja4e@build-apply ja50@expand-case-lambda) (begin (set! ja4a@build-error (lambda (ja81@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! ja4c@build-pred (lambda (ja69@ae ja6a@n ja6b@vars) (call-with-values (lambda () ((letrec ((ja73@f (lambda (ja75@vars ja76@count) (if (pair? ja75@vars) (ja73@f (cdr ja75@vars) (+ ja76@count '1)) (if (null? ja75@vars) (values ja76@count '=) (values ja76@count '>=)))))) ja73@f) ja6b@vars '0)) (lambda (ja79@ja70 ja7a@ja72) ((lambda (ja7d@pred ja7e@count) (list (list 'primitive ja7d@pred) ja6a@n (list 'quote ja7e@count))) ja7a@ja72 ja79@ja70))))) (set! ja4e@build-apply (lambda (ja61@ae ja62@g ja63@vars ja64@exp) (list '(primitive apply) (j9fe@build-lambda ja61@ae ja63@vars ja64@exp) ja62@g))) (set! ja50@expand-case-lambda (lambda (ja51@ae ja52@vars ja53@exp*) ((lambda (ja57@g ja58@n) (list 'lambda ja57@g (ja02@build-let ja51@ae (list ja58@n) (list (list '(primitive length) ja57@g)) ((letrec ((ja5b@f (lambda (ja5d@vars* ja5e@exp*) (if (null? ja5d@vars*) (ja4a@build-error ja51@ae) (list 'if (ja4c@build-pred ja51@ae ja58@n (car ja5d@vars*)) (ja4e@build-apply ja51@ae ja57@g (car ja5d@vars*) (car ja5e@exp*)) (ja5b@f (cdr ja5d@vars*) (cdr ja5e@exp*))))))) ja5b@f) ja44@vars* ja53@exp*)))) (gensym) (gensym)))) (if (= (length ja45@exp*) '1) (j9fe@build-lambda ja43@ae (car ja44@vars*) (car ja45@exp*)) (ja50@expand-case-lambda ja43@ae ja44@vars* ja45@exp*)))) '#f '#f '#f '#f))) (set! ja02@build-let (lambda (ja83@ae ja84@lhs* ja85@rhs* ja86@body) (cons (j9fe@build-lambda ja83@ae ja84@lhs* ja86@body) ja85@rhs*))) (set! ja30@build-sequence (lambda (ja8b@ae ja8c@exps) ((letrec ((ja8f@loop (lambda (ja91@exps) (if (null? (cdr ja91@exps)) (car ja91@exps) (if (equal? (car ja91@exps) (ja32@build-void)) (ja8f@loop (cdr ja91@exps)) (cons 'begin ja91@exps)))))) ja8f@loop) ja8c@exps))) (set! ja32@build-void (lambda () '((primitive void)))) (set! ja34@build-letrec (lambda (ja93@ae ja94@vars ja95@val-exps ja96@body-exp) (if (null? ja94@vars) ja96@body-exp (list 'letrec (map list ja94@vars ja95@val-exps) ja96@body-exp)))) (set! ja36@build-letrec* (lambda (ja9b@ae ja9c@vars ja9d@val-exps ja9e@body-exp) (if (null? ja9c@vars) ja9e@body-exp (ja02@build-let ja9b@ae ja9c@vars (map (lambda (jaa3@x) (list 'quote '#f)) ja9c@vars) (ja30@build-sequence ja9b@ae (append (map (lambda (jaa5@lhs jaa6@rhs) (list 'set! jaa5@lhs jaa6@rhs)) ja9c@vars ja9d@val-exps) (list ja9e@body-exp))))))) (set! ja38@build-library-letrec* (lambda (jaa9@ae jaaa@name jaab@vars jaac@locs jaad@val-exps jaae@body-exp) (list 'library-letrec* jaaa@name (map list jaab@vars jaac@locs jaad@val-exps) jaae@body-exp))) (set! ja3a@build-receive (lambda (jab5@ae jab6@vars jab7@producer jab8@body*) (begin (display '"************** in ") (cons 'receive (cons jab6@vars (cons jab7@producer jab8@body*)))))) (begin (set! jac6@ja3a@build-receive ja3a@build-receive) (set! jac5@ja38@build-library-letrec* ja38@build-library-letrec*) (set! jac4@ja36@build-letrec* ja36@build-letrec*) (set! jac3@ja34@build-letrec ja34@build-letrec) (set! jac2@ja32@build-void ja32@build-void) (set! jac1@ja30@build-sequence ja30@build-sequence) (set! jac0@ja02@build-let ja02@build-let) (set! jabf@ja00@build-case-lambda ja00@build-case-lambda) (set! jabe@j9fe@build-lambda j9fe@build-lambda) (set! jabd@j98d@build-global-define j98d@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (jad5@file-options-macro jad7@set-cons jad9@set-union jade@top-mark* jae0@top-marked? jae2@gen-lexical jae4@gen-global jae6@gen-label jae8@gen-top-level-label jaea@gen-define-label+loc jaec@gen-define-label jaf6@rib? jaf8@rib-sym* jafa@set-rib-sym*! jafc@rib-mark** jafe@set-rib-mark**! jb00@rib-label* jb02@set-rib-label*! jb04@rib-sealed/freq jb06@set-rib-sealed/freq! jb08@rib-cache jb0a@set-rib-cache! jb0c@dummy jb0e@make-empty-rib jb10@extend-rib! jb12@extend-rib/nc! jb14@make-rib-map jb16@seal-rib! jb18@unseal-rib! jb1a@make-full-rib jb1c@rp jb26@stx? jb28@stx-expr jb2a@set-stx-expr! jb2c@stx-mark* jb2e@set-stx-mark*! jb30@stx-subst* jb32@set-stx-subst*! jb34@stx-ae* jb36@set-stx-ae*! jb38@dummy jb3a@datum->stx jb3c@gen-mark jb3e@anti-mark jb40@anti-mark? jb42@mkstx jb44@add-mark jb46@add-subst jb48@syntax-kind? jb4a@syntax-vector->list jb4c@syntax-pair? jb4e@syntax-vector? jb50@syntax-null? jb52@syntax-list? jb54@syntax-car jb56@syntax-cdr jb58@syntax->list jb5a@id? jb5c@id->sym jb5e@bound-id=? jb60@free-id=? jb62@valid-bound-ids? jb64@distinct-bound-ids? jb66@bound-id-member? jb68@self-evaluating? jb6a@strip-annotations jb6c@strip jb6e@stx->datum jb70@id->label jb72@label->binding jb74@make-binding jb76@binding-type jb78@binding-value jb7a@raise-unbound-error jb7c@syntax-type jb8a@sanitize-binding jb8c@make-variable-transformer jb8e@variable-transformer? jb90@variable-transformer-procedure jb92@make-eval-transformer jce3@parse-define jce5@parse-define-syntax jce7@scheme-stx-hashtable jce9@scheme-stx jceb@lexical-var jced@lexical-mutable? jcef@set-lexical-mutable! jcf1@add-lexical jcf3@add-lexicals jcf5@letrec-helper jcf7@letrec-transformer jcf9@letrec*-transformer jcfb@fluid-let-syntax-transformer jcfd@type-descriptor-transformer jcff@record-type-descriptor-transformer jd01@record-constructor-descriptor-transformer jd03@when-macro jd05@unless-macro jd07@if-transformer jd09@and-transformer jd0b@or-transformer jd0d@case-macro jd0f@quote-transformer jd11@case-lambda-transformer jd13@lambda-transformer jd15@bless jd17@with-syntax-macro jd19@invalid-fmls-error jd1b@let-macro jd1d@let-values-macro jd1f@let*-values-macro jd21@trace-lambda-macro jd23@trace-define-macro jd25@trace-define-syntax-macro jd27@trace-let/rec-syntax jd29@trace-let-syntax-macro jd2b@trace-letrec-syntax-macro jd2d@guard-macro jd2f@define-enumeration-macro jd31@time-macro jd33@delay-macro jd35@assert-macro jd37@endianness-macro jd39@identifier-syntax-macro jd3b@do-macro jd3d@let*-macro jd3f@or-macro jd41@and-macro jd43@cond-macro jd45@do-include jd47@include-macro jd49@include-into-macro jd4b@syntax-rules-macro jd4d@quasiquote-macro jd4f@quasisyntax-macro jd51@define-struct-macro jd53@define-record-type-macro jd55@define-condition-type-macro jd57@incorrect-usage-macro jd59@parameterize-macro jd5b@foreign-call-transformer jd5d@convert-pattern jd5f@syntax-dispatch jd61@ellipsis? jd63@underscore? jd65@verify-literals jd67@syntax-case-transformer jd69@ellipsis-map jd6b@syntax-transformer jd6d@core-macro-transformer jd6f@symbol-macro jd71@macro-transformer jd73@local-macro-transformer jd75@do-macro-call jd77@chi-macro jd79@chi-local-macro jd7b@chi-global-macro jd7d@chi-expr* jd7f@chi-application jd81@chi-expr jd83@chi-set! jd85@verify-formals jd87@chi-lambda-clause jd89@chi-lambda-clause* jd8b@chi-defun jd8d@chi-rhs jd8f@expand-interaction-rhs*/init* jd91@chi-rhs* jd93@find-bound=? jd95@find-dups jd97@chi-internal jd99@parse-module jda3@module-interface? jda5@module-interface-first-mark jda7@set-module-interface-first-mark! jda9@module-interface-exp-id-vec jdab@set-module-interface-exp-id-vec! jdad@module-interface-exp-lab-vec jdaf@set-module-interface-exp-lab-vec! jdb1@dummy jdb3@module-interface-exp-id* jdb5@chi-internal-module jdb7@chi-body* jdb9@expand-transformer jdbb@parse-exports jdbd@parse-library-name jdbf@parse-library jdc1@parse-import-spec* jdc3@make-top-rib jdc5@make-collector jdc7@inv-collector jdc9@vis-collector jdcb@imp-collector jdcd@chi-library-internal jdcf@chi-interaction-expr jdd1@library-body-expander jdd3@core-library-expander jdd5@parse-top-level-program jdd7@top-level-expander jdd9@rp jde3@env? jde5@env-names jde7@set-env-names! jde9@env-labels jdeb@set-env-labels! jded@env-itc jdef@set-env-itc! jdf1@dummy jdf3@rp jdfd@interaction-env? jdff@interaction-env-rib je01@set-interaction-env-rib! je03@interaction-env-r je05@set-interaction-env-r! je07@interaction-env-locs je09@set-interaction-env-locs! je0b@dummy je0d@interaction-environment-symbols je0f@environment-bindings je11@parse-binding je13@environment? je15@environment-symbols je17@environment je19@null-environment je1b@scheme-report-environment je1d@expand je1f@eval je21@library-expander je23@boot-library-expand je25@rev-map-append je27@build-exports je29@make-export-subst je2b@make-export-env/macros je2d@generate-temporaries je2f@free-identifier=? je31@bound-identifier=? je33@make-source-condition je35@extract-position-condition je37@expression-position je39@assertion-error je3b@syntax-error je3d@syntax-violation* je3f@syntax-violation je41@identifier? je43@datum->syntax je45@syntax->datum je47@compile-r6rs-top-level je49@pre-compile-r6rs-top-level je4b@interaction-environment je4d@top-level-context) (begin (set! jad5@file-options-macro (lambda (je4e@x) ((lambda (je51@valid-option?) (begin (set! je51@valid-option? (lambda (je5a@x) (and (jb5a@id? je5a@x) (memq (jb5c@id->sym je5a@x) '(no-fail no-create no-truncate))))) ((lambda (je52@t) ((lambda (je54@ls/false) (if (and je54@ls/false (apply (lambda (je56@opt*) (for-all je51@valid-option? je56@opt*)) je54@ls/false)) (apply (lambda (je58@opt*) (jd15@bless (list 'make-file-options (list 'quote je58@opt*)))) je54@ls/false) (je3f@syntax-violation '#f '"invalid syntax" je52@t))) (jd5f@syntax-dispatch je52@t '(_ . each-any)))) je4e@x))) '#f))) (set! jad7@set-cons (lambda (je5c@x je5d@ls) (if (memq je5c@x je5d@ls) je5d@ls (cons je5c@x je5d@ls)))) (set! jad9@set-union (lambda (je60@ls1 je61@ls2) (if (null? je60@ls1) je61@ls2 (if (memq (car je60@ls1) je61@ls2) (jad9@set-union (cdr je60@ls1) je61@ls2) (cons (car je60@ls1) (jad9@set-union (cdr je60@ls1) je61@ls2)))))) (set! jade@top-mark* '(top)) (set! jae0@top-marked? (lambda (je64@m*) (memq 'top je64@m*))) (set! jae2@gen-lexical (lambda (je66@sym) (if (symbol? je66@sym) (gensym je66@sym) (if (jb26@stx? je66@sym) (jae2@gen-lexical (jb5c@id->sym je66@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" je66@sym))))) (set! jae4@gen-global (lambda (je68@x) (jae2@gen-lexical je68@x))) (set! jae6@gen-label (lambda (je6a@_) (gensym))) (set! jae8@gen-top-level-label (lambda (je6c@id je6d@rib) ((lambda (je71@find) (begin (set! je71@find (lambda (je7c@sym je7d@mark* je7e@sym* je7f@mark** je80@label*) (and (pair? je7e@sym*) (if (and (eq? je7c@sym (car je7e@sym*)) (same-marks? je7d@mark* (car je7f@mark**))) (car je80@label*) (je71@find je7c@sym je7d@mark* (cdr je7e@sym*) (cdr je7f@mark**) (cdr je80@label*)))))) ((lambda (je72@sym je73@mark*) ((lambda (je76@sym*) ((lambda (je78@t) (if je78@t ((lambda (je7a@label) (if (j984@j7d1@imported-label->binding je7a@label) (gensym) je7a@label)) je78@t) (gensym))) (and (memq je72@sym (jaf8@rib-sym* je6d@rib)) (je71@find je72@sym je73@mark* je76@sym* (jafc@rib-mark** je6d@rib) (jb00@rib-label* je6d@rib))))) (jaf8@rib-sym* je6d@rib))) (jb5c@id->sym je6c@id) (jb2c@stx-mark* je6c@id)))) '#f))) (set! jaea@gen-define-label+loc (lambda (je86@id je87@rib) ((lambda (je8a@t) (if je8a@t ((lambda (je8c@env) ((lambda (je8e@label je8f@locs) (values je8e@label ((lambda (je92@t) (if je92@t (cdr je92@t) ((lambda (je94@loc) (begin (je09@set-interaction-env-locs! je8c@env (cons (cons je8e@label je94@loc) je8f@locs)) je94@loc)) (jae2@gen-lexical je86@id)))) (assq je8e@label je8f@locs)))) (jae8@gen-top-level-label je86@id je87@rib) (je07@interaction-env-locs je8c@env))) je8a@t) (values (gensym) (jae2@gen-lexical je86@id)))) (je4d@top-level-context)))) (set! jaec@gen-define-label (lambda (je96@id je97@rib) (if (je4d@top-level-context) (jae8@gen-top-level-label je96@id je97@rib) (gensym)))) (set! jaf6@rib? (lambda (je9a@x) (and (simple-struct? je9a@x) (eq? (simple-struct-name je9a@x) 'rib)))) (set! jaf8@rib-sym* (lambda (je9c@x) (simple-struct-ref je9c@x '0))) (set! jafa@set-rib-sym*! (lambda (je9e@x je9f@val) (simple-struct-set! je9e@x '0 je9f@val))) (set! jafc@rib-mark** (lambda (jea2@x) (simple-struct-ref jea2@x '1))) (set! jafe@set-rib-mark**! (lambda (jea4@x jea5@val) (simple-struct-set! jea4@x '1 jea5@val))) (set! jb00@rib-label* (lambda (jea8@x) (simple-struct-ref jea8@x '2))) (set! jb02@set-rib-label*! (lambda (jeaa@x jeab@val) (simple-struct-set! jeaa@x '2 jeab@val))) (set! jb04@rib-sealed/freq (lambda (jeae@x) (simple-struct-ref jeae@x '3))) (set! jb06@set-rib-sealed/freq! (lambda (jeb0@x jeb1@val) (simple-struct-set! jeb0@x '3 jeb1@val))) (set! jb08@rib-cache (lambda (jeb4@x) (simple-struct-ref jeb4@x '4))) (set! jb0a@set-rib-cache! (lambda (jeb6@x jeb7@val) (simple-struct-set! jeb6@x '4 jeb7@val))) (set! jb0c@dummy '3) (set! jb0e@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! jb10@extend-rib! (lambda (jeba@rib jebb@id jebc@label) ((lambda (jec1@find) (begin (set! jec1@find (lambda (jece@sym jecf@mark* jed0@sym* jed1@mark** jed2@label*) (and (pair? jed0@sym*) (if (and (eq? jece@sym (car jed0@sym*)) (same-marks? jecf@mark* (car jed1@mark**))) jed2@label* (jec1@find jece@sym jecf@mark* (cdr jed0@sym*) (cdr jed1@mark**) (cdr jed2@label*)))))) (begin (if (jb04@rib-sealed/freq jeba@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" jeba@rib) (void)) ((lambda (jec2@sym jec3@mark*) ((lambda (jec6@sym*) ((lambda (jec8@t) (if jec8@t ((lambda (jeca@p) (if (not (eq? jebc@label (car jeca@p))) (if (je4d@top-level-context) (set-car! jeca@p jebc@label) (je3f@syntax-violation '#f '"multiple definitions of identifier" jebb@id)) (void))) jec8@t) (begin (if (jb08@rib-cache jeba@rib) (hashtable-update! (jb08@rib-cache jeba@rib) jec2@sym (lambda (jecc@e) (cons (cons jec3@mark* jebc@label) jecc@e)) '()) (void)) (jafa@set-rib-sym*! jeba@rib (cons jec2@sym jec6@sym*)) (jafe@set-rib-mark**! jeba@rib (cons jec3@mark* (jafc@rib-mark** jeba@rib))) (jb02@set-rib-label*! jeba@rib (cons jebc@label (jb00@rib-label* jeba@rib)))))) (and (memq jec2@sym (jaf8@rib-sym* jeba@rib)) (jec1@find jec2@sym jec3@mark* jec6@sym* (jafc@rib-mark** jeba@rib) (jb00@rib-label* jeba@rib))))) (jaf8@rib-sym* jeba@rib))) (jb5c@id->sym jebb@id) (jb2c@stx-mark* jebb@id))))) '#f))) (set! jb12@extend-rib/nc! (lambda (jed8@rib jed9@id jeda@label) ((lambda (jede@sym jedf@mark*) ((lambda (jee2@sym*) (begin (if (jb08@rib-cache jed8@rib) (hashtable-update! (jb08@rib-cache jed8@rib) jede@sym (lambda (jee4@e) (cons (cons jedf@mark* jeda@label) jee4@e)) '()) (void)) (jafa@set-rib-sym*! jed8@rib (cons jede@sym jee2@sym*)) (jafe@set-rib-mark**! jed8@rib (cons jedf@mark* (jafc@rib-mark** jed8@rib))) (jb02@set-rib-label*! jed8@rib (cons jeda@label (jb00@rib-label* jed8@rib))))) (jaf8@rib-sym* jed8@rib))) (jb5c@id->sym jed9@id) (jb2c@stx-mark* jed9@id)))) (set! jb14@make-rib-map (lambda (jee6@sym*) ((lambda (jee8@ht) ((letrec ((jeea@f (lambda (jeec@i jeed@sym*) (if (null? jeed@sym*) jee8@ht (begin (hashtable-update! jee8@ht (car jeed@sym*) (lambda (jef0@x) (cons jeec@i jef0@x)) '()) (jeea@f (+ jeec@i '1) (cdr jeed@sym*))))))) jeea@f) '0 jee6@sym*)) (make-eq-hashtable)))) (set! jb16@seal-rib! (lambda (jef2@rib) ((lambda (jef4@sym*) (if (not (null? jef4@sym*)) (begin (jafa@set-rib-sym*! jef2@rib (list->vector jef4@sym*)) (jafe@set-rib-mark**! jef2@rib (list->vector (jafc@rib-mark** jef2@rib))) (jb02@set-rib-label*! jef2@rib (list->vector (jb00@rib-label* jef2@rib))) (jb06@set-rib-sealed/freq! jef2@rib (jb14@make-rib-map jef4@sym*))) (void))) (jaf8@rib-sym* jef2@rib)))) (set! jb18@unseal-rib! (lambda (jef6@rib) (if (jb04@rib-sealed/freq jef6@rib) (begin (jb06@set-rib-sealed/freq! jef6@rib '#f) (jafa@set-rib-sym*! jef6@rib (vector->list (jaf8@rib-sym* jef6@rib))) (jafe@set-rib-mark**! jef6@rib (vector->list (jafc@rib-mark** jef6@rib))) (jb02@set-rib-label*! jef6@rib (vector->list (jb00@rib-label* jef6@rib)))) (void)))) (set! jb1a@make-full-rib (lambda (jef8@id* jef9@label*) ((lambda (jefc@r) (begin (jb16@seal-rib! jefc@r) jefc@r)) (make-simple-struct 'rib '6 (list (map jb5c@id->sym jef8@id*) (map jb2c@stx-mark* jef8@id*) jef9@label* '#f '#f))))) (set! jb1c@rp (j6b6@j592@make-record-printer 'stx (lambda (jefe@x jeff@p jf00@wr) (begin (display '"#<syntax " jeff@p) (write (jb6e@stx->datum jefe@x) jeff@p) ((lambda (jf04@expr) (if (j6ae@j582@annotation? jf04@expr) ((lambda (jf06@src) (if (pair? jf06@src) (begin (display '" [" jeff@p) (display (cdr jf06@src) jeff@p) (display '" of " jeff@p) (display (car jf06@src) jeff@p) (display '"]" jeff@p)) (void))) (j6af@j584@annotation-source jf04@expr)) (void))) (jb28@stx-expr jefe@x)) (display '">" jeff@p))))) (set! jb26@stx? (lambda (jf08@x) (and (simple-struct? jf08@x) (eq? (simple-struct-name jf08@x) 'stx)))) (set! jb28@stx-expr (lambda (jf0a@x) (simple-struct-ref jf0a@x '0))) (set! jb2a@set-stx-expr! (lambda (jf0c@x jf0d@val) (simple-struct-set! jf0c@x '0 jf0d@val))) (set! jb2c@stx-mark* (lambda (jf10@x) (simple-struct-ref jf10@x '1))) (set! jb2e@set-stx-mark*! (lambda (jf12@x jf13@val) (simple-struct-set! jf12@x '1 jf13@val))) (set! jb30@stx-subst* (lambda (jf16@x) (simple-struct-ref jf16@x '2))) (set! jb32@set-stx-subst*! (lambda (jf18@x jf19@val) (simple-struct-set! jf18@x '2 jf19@val))) (set! jb34@stx-ae* (lambda (jf1c@x) (simple-struct-ref jf1c@x '3))) (set! jb36@set-stx-ae*! (lambda (jf1e@x jf1f@val) (simple-struct-set! jf1e@x '3 jf1f@val))) (set! jb38@dummy '3) (set! jb3a@datum->stx (lambda (jf22@id jf23@datum) (make-simple-struct 'stx '5 (list jf23@datum (jb2c@stx-mark* jf22@id) (jb30@stx-subst* jf22@id) (jb34@stx-ae* jf22@id))))) (set! jb3c@gen-mark (lambda () (string '#\m))) (set! jb3e@anti-mark '#f) (set! jb40@anti-mark? not) (set! jb42@mkstx (lambda (jf26@e jf27@m* jf28@s* jf29@ae*) (if (and (jb26@stx? jf26@e) (not (jae0@top-marked? jf27@m*))) (call-with-values (lambda () (join-wraps jf27@m* jf28@s* jf29@ae* jf26@e)) (lambda (jf34@jf2f jf35@jf31 jf36@jf33) ((lambda (jf3a@ae* jf3b@s* jf3c@m*) (make-simple-struct 'stx '5 (list (jb28@stx-expr jf26@e) jf3c@m* jf3b@s* jf3a@ae*))) jf36@jf33 jf35@jf31 jf34@jf2f))) (make-simple-struct 'stx '5 (list jf26@e jf27@m* jf28@s* jf29@ae*))))) (set! jb44@add-mark (lambda (jf40@m jf41@e jf42@ae) (jb42@mkstx jf41@e (list jf40@m) '(shift) (list jf42@ae)))) (set! jb46@add-subst (lambda (jf46@subst jf47@e) (jb42@mkstx jf47@e '() (list jf46@subst) '()))) (set! jb48@syntax-kind? (lambda (jf4a@x jf4b@p?) (if (jb26@stx? jf4a@x) (jb48@syntax-kind? (jb28@stx-expr jf4a@x) jf4b@p?) (if (j6ae@j582@annotation? jf4a@x) (jb48@syntax-kind? (j6b0@j586@annotation-expression jf4a@x) jf4b@p?) (jf4b@p? jf4a@x))))) (set! jb4a@syntax-vector->list (lambda (jf4e@x) (if (jb26@stx? jf4e@x) ((lambda (jf50@ls jf51@m* jf52@s* jf53@ae*) (map (lambda (jf58@x) (jb42@mkstx jf58@x jf51@m* jf52@s* jf53@ae*)) jf50@ls)) (jb4a@syntax-vector->list (jb28@stx-expr jf4e@x)) (jb2c@stx-mark* jf4e@x) (jb30@stx-subst* jf4e@x) (jb34@stx-ae* jf4e@x)) (if (j6ae@j582@annotation? jf4e@x) (jb4a@syntax-vector->list (j6b0@j586@annotation-expression jf4e@x)) (if (vector? jf4e@x) (vector->list jf4e@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" jf4e@x)))))) (set! jb4c@syntax-pair? (lambda (jf5a@x) (jb48@syntax-kind? jf5a@x pair?))) (set! jb4e@syntax-vector? (lambda (jf5c@x) (jb48@syntax-kind? jf5c@x vector?))) (set! jb50@syntax-null? (lambda (jf5e@x) (jb48@syntax-kind? jf5e@x null?))) (set! jb52@syntax-list? (lambda (jf60@x) (or (jb50@syntax-null? jf60@x) (and (jb4c@syntax-pair? jf60@x) (jb52@syntax-list? (jb56@syntax-cdr jf60@x)))))) (set! jb54@syntax-car (lambda (jf62@x) (if (jb26@stx? jf62@x) (jb42@mkstx (jb54@syntax-car (jb28@stx-expr jf62@x)) (jb2c@stx-mark* jf62@x) (jb30@stx-subst* jf62@x) (jb34@stx-ae* jf62@x)) (if (j6ae@j582@annotation? jf62@x) (jb54@syntax-car (j6b0@j586@annotation-expression jf62@x)) (if (pair? jf62@x) (car jf62@x) (assertion-violation 'syntax-car '"BUG: not a pair" jf62@x)))))) (set! jb56@syntax-cdr (lambda (jf64@x) (if (jb26@stx? jf64@x) (jb42@mkstx (jb56@syntax-cdr (jb28@stx-expr jf64@x)) (jb2c@stx-mark* jf64@x) (jb30@stx-subst* jf64@x) (jb34@stx-ae* jf64@x)) (if (j6ae@j582@annotation? jf64@x) (jb56@syntax-cdr (j6b0@j586@annotation-expression jf64@x)) (if (pair? jf64@x) (cdr jf64@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" jf64@x)))))) (set! jb58@syntax->list (lambda (jf66@x) (if (jb4c@syntax-pair? jf66@x) (cons (jb54@syntax-car jf66@x) (jb58@syntax->list (jb56@syntax-cdr jf66@x))) (if (jb50@syntax-null? jf66@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" jf66@x))))) (set! jb5a@id? (lambda (jf68@x) (and (jb26@stx? jf68@x) (symbol? (jb28@stx-expr jf68@x))))) (set! jb5c@id->sym (lambda (jf6a@x) (jb28@stx-expr jf6a@x))) (set! jb5e@bound-id=? (lambda (jf6c@x jf6d@y) (and (eq? (jb5c@id->sym jf6c@x) (jb5c@id->sym jf6d@y)) (same-marks? (jb2c@stx-mark* jf6c@x) (jb2c@stx-mark* jf6d@y))))) (set! jb60@free-id=? (lambda (jf70@i jf71@j) ((lambda (jf74@t0 jf75@t1) (if (or jf74@t0 jf75@t1) (eq? jf74@t0 jf75@t1) (eq? (jb5c@id->sym jf70@i) (jb5c@id->sym jf71@j)))) (id->real-label jf70@i) (id->real-label jf71@j)))) (set! jb62@valid-bound-ids? (lambda (jf78@id*) (and (for-all jb5a@id? jf78@id*) (jb64@distinct-bound-ids? jf78@id*)))) (set! jb64@distinct-bound-ids? (lambda (jf7a@id*) (or (null? jf7a@id*) (and (not (jb66@bound-id-member? (car jf7a@id*) (cdr jf7a@id*))) (jb64@distinct-bound-ids? (cdr jf7a@id*)))))) (set! jb66@bound-id-member? (lambda (jf7c@id jf7d@id*) (and (pair? jf7d@id*) (or (jb5e@bound-id=? jf7c@id (car jf7d@id*)) (jb66@bound-id-member? jf7c@id (cdr jf7d@id*)))))) (set! jb68@self-evaluating? (lambda (jf80@x) (or (number? jf80@x) (string? jf80@x) (char? jf80@x) (boolean? jf80@x) (regexp? jf80@x) (bytevector? jf80@x)))) (set! jb6a@strip-annotations (lambda (jf82@x) (if (pair? jf82@x) (cons (jb6a@strip-annotations (car jf82@x)) (jb6a@strip-annotations (cdr jf82@x))) (if (vector? jf82@x) (vector-map jb6a@strip-annotations jf82@x) (if (j6ae@j582@annotation? jf82@x) (j6ad@j580@annotation-stripped jf82@x) jf82@x))))) (set! jb6c@strip (lambda (jf84@x jf85@m*) (if (jae0@top-marked? jf85@m*) (if (or (j6ae@j582@annotation? jf84@x) (and (pair? jf84@x) (j6ae@j582@annotation? (car jf84@x))) (and (vector? jf84@x) (> (vector-length jf84@x) '0) (j6ae@j582@annotation? (vector-ref jf84@x '0)))) (jb6a@strip-annotations jf84@x) jf84@x) ((letrec ((jf88@f (lambda (jf8a@x) (if (jb26@stx? jf8a@x) (jb6c@strip (jb28@stx-expr jf8a@x) (jb2c@stx-mark* jf8a@x)) (if (j6ae@j582@annotation? jf8a@x) (j6ad@j580@annotation-stripped jf8a@x) (if (pair? jf8a@x) ((lambda (jf8c@a jf8d@d) (if (and (eq? jf8c@a (car jf8a@x)) (eq? jf8d@d (cdr jf8a@x))) jf8a@x (cons jf8c@a jf8d@d))) (jf88@f (car jf8a@x)) (jf88@f (cdr jf8a@x))) (if (vector? jf8a@x) ((lambda (jf90@old) ((lambda (jf92@new) (if (for-all eq? jf90@old jf92@new) jf8a@x (list->vector jf92@new))) (map jf88@f jf90@old))) (vector->list jf8a@x)) jf8a@x))))))) jf88@f) jf84@x)))) (set! jb6e@stx->datum (lambda (jf94@x) (jb6c@strip jf94@x '()))) (set! jb70@id->label (lambda (jf96@id) (or (id->real-label jf96@id) ((lambda (jf98@t) (if jf98@t ((lambda (jf9a@env) ((lambda (jf9c@rib) (call-with-values (lambda () (jaea@gen-define-label+loc jf96@id jf9c@rib)) (lambda (jfa2@jf9f jfa3@jfa1) ((lambda (jfa6@loc_ jfa7@lab) (begin (jb10@extend-rib! jf9c@rib jf96@id jfa7@lab) jfa7@lab)) jfa3@jfa1 jfa2@jf9f)))) (jdff@interaction-env-rib jf9a@env))) jf98@t) '#f)) (je4d@top-level-context))))) (set! jb72@label->binding (lambda (jfaa@x jfab@r) ((lambda (jfae@t) (if jfae@t ((lambda (jfb0@b) (if (and (pair? jfb0@b) (eq? (car jfb0@b) '$core-rtd)) (cons '$rtd (map jd15@bless (cdr jfb0@b))) (if (and (pair? jfb0@b) (eq? (car jfb0@b) 'global-rtd)) ((lambda (jfb2@lib jfb3@loc) (cons '$rtd (symbol-value jfb3@loc))) (cadr jfb0@b) (cddr jfb0@b)) jfb0@b))) jfae@t) ((lambda (jfb6@t) (if jfb6@t (cdr jfb6@t) ((lambda (jfb8@t) (if jfb8@t ((lambda (jfba@env) ((lambda (jfbc@t) (if jfbc@t ((lambda (jfbe@p) (cons* 'lexical (cdr jfbe@p) '#f)) jfbc@t) '(displaced-lexical . #f))) (assq jfaa@x (je07@interaction-env-locs jfba@env)))) jfb8@t) '(displaced-lexical . #f))) (je4d@top-level-context)))) (assq jfaa@x jfab@r)))) (j984@j7d1@imported-label->binding jfaa@x)))) (set! jb74@make-binding cons) (set! jb76@binding-type car) (set! jb78@binding-value cdr) (set! jb7a@raise-unbound-error (lambda (jfc0@id) (je3d@syntax-violation* '#f '"unbound identifier" jfc0@id (j2b9e@j29e4@make-undefined-violation)))) (set! jb7c@syntax-type (lambda (jfc2@e jfc3@r) (if (jb5a@id? jfc2@e) ((lambda (jfc6@id) ((lambda (jfc8@label) ((lambda (jfca@b) ((lambda (jfcc@type) ((lambda () (begin (if (not jfc8@label) (jb7a@raise-unbound-error jfc6@id) (void)) ((lambda (jfce@t) (if (memv jfce@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values jfcc@type (jb78@binding-value jfca@b) jfc6@id) (values 'other '#f '#f))) jfcc@type))))) (jb76@binding-type jfca@b))) (jb72@label->binding jfc8@label jfc3@r))) (jb70@id->label jfc6@id))) jfc2@e) (if (jb4c@syntax-pair? jfc2@e) ((lambda (jfd0@id) (if (jb5a@id? jfd0@id) ((lambda (jfd2@label) ((lambda (jfd4@b) ((lambda (jfd6@type) ((lambda () (begin (if (not jfd2@label) (jb7a@raise-unbound-error jfd0@id) (void)) ((lambda (jfd8@t) (if (memv jfd8@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values jfd6@type (jb78@binding-value jfd4@b) jfd0@id) (values 'call '#f '#f))) jfd6@type))))) (jb76@binding-type jfd4@b))) (jb72@label->binding jfd2@label jfc3@r))) (jb70@id->label jfd0@id)) (values 'call '#f '#f))) (jb54@syntax-car jfc2@e)) ((lambda (jfda@d) (if (jb68@self-evaluating? jfda@d) (values 'constant jfda@d '#f) (values 'other '#f '#f))) (jb6e@stx->datum jfc2@e)))))) (set! jb8a@sanitize-binding (lambda (jfdc@x jfdd@src) (if (procedure? jfdc@x) (cons* 'local-macro jfdc@x jfdd@src) (if (and (pair? jfdc@x) (eq? (car jfdc@x) 'macro!) (procedure? (cdr jfdc@x))) (cons* 'local-macro! (cdr jfdc@x) jfdd@src) (if (and (pair? jfdc@x) (eq? (car jfdc@x) '$rtd)) jfdc@x (assertion-violation 'expand '"invalid transformer" jfdc@x)))))) (set! jb8c@make-variable-transformer (lambda (jfe0@x) (if (procedure? jfe0@x) (cons 'macro! jfe0@x) (assertion-violation 'make-variable-transformer '"not a procedure" jfe0@x)))) (set! jb8e@variable-transformer? (lambda (jfe2@x) (and (pair? jfe2@x) (eq? (car jfe2@x) 'macro!) (procedure? (cdr jfe2@x))))) (set! jb90@variable-transformer-procedure (lambda (jfe4@x) (if (jb8e@variable-transformer? jfe4@x) (cdr jfe4@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" jfe4@x)))) (set! jb92@make-eval-transformer (lambda (jfe6@x) (jb8a@sanitize-binding (eval-core (j70f@j6c7@expanded->core jfe6@x)) jfe6@x))) (set! jce3@parse-define (lambda (jfe8@x) ((lambda (jfea@t) ((lambda (jfec@ls/false) (if (and jfec@ls/false (apply (lambda (jfee@id jfef@fmls jff0@b jff1@b*) (jb5a@id? jfee@id)) jfec@ls/false)) (apply (lambda (jff6@id jff7@fmls jff8@b jff9@b*) (begin (jd85@verify-formals jff7@fmls jfe8@x) (values jff6@id (cons 'defun (cons jff7@fmls (cons jff8@b jff9@b*)))))) jfec@ls/false) ((lambda (jffe@t) ((lambda (j1000@ls/false) (if (and j1000@ls/false (apply (lambda (j1002@id j1003@val) (jb5a@id? j1002@id)) j1000@ls/false)) (apply (lambda (j1006@id j1007@val) (values j1006@id (cons 'expr j1007@val))) j1000@ls/false) ((lambda (j100a@t) ((lambda (j100c@ls/false) (if (and j100c@ls/false (apply (lambda (j100e@id) (jb5a@id? j100e@id)) j100c@ls/false)) (apply (lambda (j1010@id) (values j1010@id (cons 'expr (jd15@bless '(void))))) j100c@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j100a@t))) (jd5f@syntax-dispatch j100a@t '(_ any)))) jffe@t))) (jd5f@syntax-dispatch jffe@t '(_ any any)))) jfea@t))) (jd5f@syntax-dispatch jfea@t '(_ (any . any) any . each-any)))) jfe8@x))) (set! jce5@parse-define-syntax (lambda (j1012@x) ((lambda (j1014@t) ((lambda (j1016@ls/false) (if (and j1016@ls/false (apply (lambda (j1018@id j1019@val) (jb5a@id? j1018@id)) j1016@ls/false)) (apply (lambda (j101c@id j101d@val) (values j101c@id j101d@val)) j1016@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1014@t))) (jd5f@syntax-dispatch j1014@t '(_ any any)))) j1012@x))) (set! jce7@scheme-stx-hashtable (make-eq-hashtable)) (set! jce9@scheme-stx (lambda (j1020@sym) (or (hashtable-ref jce7@scheme-stx-hashtable j1020@sym '#f) ((lambda (j1022@subst) ((lambda (j1024@stx) ((lambda (j1026@stx) ((lambda () (begin (hashtable-set! jce7@scheme-stx-hashtable j1020@sym j1026@stx) j1026@stx)))) ((lambda (j1028@t) (if j1028@t ((lambda (j102a@x) ((lambda (j102c@name j102d@label) (jb46@add-subst (make-simple-struct 'rib '6 (list (list j102c@name) (list jade@top-mark*) (list j102d@label) '#f '#f)) j1024@stx)) (car j102a@x) (cdr j102a@x))) j1028@t) j1024@stx)) (assq j1020@sym j1022@subst)))) (make-simple-struct 'stx '5 (list j1020@sym jade@top-mark* '() '())))) (j960@j789@library-subst (j97e@j7c5@find-library-by-name '(psyntax system $all))))))) (set! jceb@lexical-var car) (set! jced@lexical-mutable? cdr) (set! jcef@set-lexical-mutable! set-cdr!) (set! jcf1@add-lexical (lambda (j1030@lab j1031@lex j1032@r) (cons (cons* j1030@lab 'lexical j1031@lex '#f) j1032@r))) (set! jcf3@add-lexicals (lambda (j1036@lab* j1037@lex* j1038@r) (if (null? j1036@lab*) j1038@r (jcf3@add-lexicals (cdr j1036@lab*) (cdr j1037@lex*) (jcf1@add-lexical (car j1036@lab*) (car j1037@lex*) j1038@r))))) (set! jcf5@letrec-helper (lambda (j103c@e j103d@r j103e@mr j103f@build) ((lambda (j1044@t) ((lambda (j1046@ls/false) (if j1046@ls/false (apply (lambda (j1048@lhs* j1049@rhs* j104a@b j104b@b*) (if (not (jb62@valid-bound-ids? j1048@lhs*)) (jd19@invalid-fmls-error j103c@e j1048@lhs*) ((lambda (j1050@lex* j1051@lab*) ((lambda (j1054@rib j1055@r) ((lambda (j1058@body j1059@rhs*) (j103f@build '#f j1050@lex* j1059@rhs* j1058@body)) (jd97@chi-internal (jb46@add-subst j1054@rib (cons j104a@b j104b@b*)) j1055@r j103e@mr) (jd7d@chi-expr* (map (lambda (j105c@x) (jb46@add-subst j1054@rib j105c@x)) j1049@rhs*) j1055@r j103e@mr))) (jb1a@make-full-rib j1048@lhs* j1051@lab*) (jcf3@add-lexicals j1051@lab* j1050@lex* j103d@r))) (map jae2@gen-lexical j1048@lhs*) (map jae6@gen-label j1048@lhs*)))) j1046@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1044@t))) (jd5f@syntax-dispatch j1044@t '(_ #(each (any any)) any . each-any)))) j103c@e))) (set! jcf7@letrec-transformer (lambda (j105e@e j105f@r j1060@mr) (jcf5@letrec-helper j105e@e j105f@r j1060@mr jac3@ja34@build-letrec))) (set! jcf9@letrec*-transformer (lambda (j1064@e j1065@r j1066@mr) (jcf5@letrec-helper j1064@e j1065@r j1066@mr jac4@ja36@build-letrec*))) (set! jcfb@fluid-let-syntax-transformer (lambda (j106a@e j106b@r j106c@mr) ((lambda (j1071@lookup) (begin (set! j1071@lookup (lambda (j1084@x) (or (jb70@id->label j1084@x) (je3f@syntax-violation '#f '"unbound identifier" j106a@e j1084@x)))) ((lambda (j1072@t) ((lambda (j1074@ls/false) (if j1074@ls/false (apply (lambda (j1076@lhs* j1077@rhs* j1078@b j1079@b*) (if (not (jb62@valid-bound-ids? j1076@lhs*)) (jd19@invalid-fmls-error j106a@e j1076@lhs*) ((lambda (j107e@lab* j107f@rhs*) (jd97@chi-internal (cons j1078@b j1079@b*) (append (map cons j107e@lab* j107f@rhs*) j106b@r) (append (map cons j107e@lab* j107f@rhs*) j106c@mr))) (map j1071@lookup j1076@lhs*) (map (lambda (j1082@x) (jb92@make-eval-transformer (jdb9@expand-transformer j1082@x j106c@mr))) j1077@rhs*)))) j1074@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1072@t))) (jd5f@syntax-dispatch j1072@t '(_ #(each (any any)) any . each-any)))) j106a@e))) '#f))) (set! jcfd@type-descriptor-transformer (lambda (j1086@e j1087@r j1088@mr) ((lambda (j108c@t) ((lambda (j108e@ls/false) (if (and j108e@ls/false (apply (lambda (j1090@id) (jb5a@id? j1090@id)) j108e@ls/false)) (apply (lambda (j1092@id) ((lambda (j1094@lab) ((lambda (j1096@b) ((lambda (j1098@type) ((lambda () (begin (if (not j1094@lab) (jb7a@raise-unbound-error j1092@id) (void)) (if (not (and (eq? j1098@type '$rtd) (not (list? (jb78@binding-value j1096@b))))) (je3f@syntax-violation '#f '"not a record type" j1086@e) (void)) (list 'quote (jb78@binding-value j1096@b)))))) (jb76@binding-type j1096@b))) (jb72@label->binding j1094@lab j1087@r))) (jb70@id->label j1092@id))) j108e@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j108c@t))) (jd5f@syntax-dispatch j108c@t '(_ any)))) j1086@e))) (set! jcff@record-type-descriptor-transformer (lambda (j109a@e j109b@r j109c@mr) ((lambda (j10a0@t) ((lambda (j10a2@ls/false) (if (and j10a2@ls/false (apply (lambda (j10a4@id) (jb5a@id? j10a4@id)) j10a2@ls/false)) (apply (lambda (j10a6@id) ((lambda (j10a8@lab) ((lambda (j10aa@b) ((lambda (j10ac@type) ((lambda () (begin (if (not j10a8@lab) (jb7a@raise-unbound-error j10a6@id) (void)) (if (not (and (eq? j10ac@type '$rtd) (list? (jb78@binding-value j10aa@b)))) (je3f@syntax-violation '#f '"not a record type" j109a@e) (void)) (jd81@chi-expr (car (jb78@binding-value j10aa@b)) j109b@r j109c@mr))))) (jb76@binding-type j10aa@b))) (jb72@label->binding j10a8@lab j109b@r))) (jb70@id->label j10a6@id))) j10a2@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j10a0@t))) (jd5f@syntax-dispatch j10a0@t '(_ any)))) j109a@e))) (set! jd01@record-constructor-descriptor-transformer (lambda (j10ae@e j10af@r j10b0@mr) ((lambda (j10b4@t) ((lambda (j10b6@ls/false) (if (and j10b6@ls/false (apply (lambda (j10b8@id) (jb5a@id? j10b8@id)) j10b6@ls/false)) (apply (lambda (j10ba@id) ((lambda (j10bc@lab) ((lambda (j10be@b) ((lambda (j10c0@type) ((lambda () (begin (if (not j10bc@lab) (jb7a@raise-unbound-error j10ba@id) (void)) (if (not (and (eq? j10c0@type '$rtd) (list? (jb78@binding-value j10be@b)))) (je3f@syntax-violation '#f '"invalid type" j10ae@e) (void)) (jd81@chi-expr (cadr (jb78@binding-value j10be@b)) j10af@r j10b0@mr))))) (jb76@binding-type j10be@b))) (jb72@label->binding j10bc@lab j10af@r))) (jb70@id->label j10ba@id))) j10b6@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j10b4@t))) (jd5f@syntax-dispatch j10b4@t '(_ any)))) j10ae@e))) (set! jd03@when-macro (lambda (j10c2@e) ((lambda (j10c4@t) ((lambda (j10c6@ls/false) (if j10c6@ls/false (apply (lambda (j10c8@test j10c9@e j10ca@e*) (jd15@bless (list 'if j10c8@test (cons 'begin (cons j10c9@e j10ca@e*))))) j10c6@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j10c4@t))) (jd5f@syntax-dispatch j10c4@t '(_ any any . each-any)))) j10c2@e))) (set! jd05@unless-macro (lambda (j10ce@e) ((lambda (j10d0@t) ((lambda (j10d2@ls/false) (if j10d2@ls/false (apply (lambda (j10d4@test j10d5@e j10d6@e*) (jd15@bless (list 'if (list 'not j10d4@test) (cons 'begin (cons j10d5@e j10d6@e*))))) j10d2@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j10d0@t))) (jd5f@syntax-dispatch j10d0@t '(_ any any . each-any)))) j10ce@e))) (set! jd07@if-transformer (lambda (j10da@e j10db@r j10dc@mr) ((lambda (j10e0@t) ((lambda (j10e2@ls/false) (if j10e2@ls/false (apply (lambda (j10e4@e0 j10e5@e1 j10e6@e2) (list 'if (jd81@chi-expr j10e4@e0 j10db@r j10dc@mr) (jd81@chi-expr j10e5@e1 j10db@r j10dc@mr) (jd81@chi-expr j10e6@e2 j10db@r j10dc@mr))) j10e2@ls/false) ((lambda (j10ea@t) ((lambda (j10ec@ls/false) (if j10ec@ls/false (apply (lambda (j10ee@e0 j10ef@e1) (list 'if (jd81@chi-expr j10ee@e0 j10db@r j10dc@mr) (jd81@chi-expr j10ef@e1 j10db@r j10dc@mr) (jac2@ja32@build-void))) j10ec@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j10ea@t))) (jd5f@syntax-dispatch j10ea@t '(_ any any)))) j10e0@t))) (jd5f@syntax-dispatch j10e0@t '(_ any any any)))) j10da@e))) (set! jd09@and-transformer (lambda (j10f2@e j10f3@r j10f4@mr) ((lambda (j10f8@t) ((lambda (j10fa@ls/false) (if j10fa@ls/false (apply (lambda (j10fc@e*) (cons 'and (jd7d@chi-expr* j10fc@e* j10f3@r j10f4@mr))) j10fa@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j10f8@t))) (jd5f@syntax-dispatch j10f8@t '(_ . each-any)))) j10f2@e))) (set! jd0b@or-transformer (lambda (j10fe@e j10ff@r j1100@mr) ((lambda (j1104@t) ((lambda (j1106@ls/false) (if j1106@ls/false (apply (lambda (j1108@e*) (cons 'or (jd7d@chi-expr* j1108@e* j10ff@r j1100@mr))) j1106@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1104@t))) (jd5f@syntax-dispatch j1104@t '(_ . each-any)))) j10fe@e))) (set! jd0d@case-macro (lambda (j110a@e) ((lambda (j110d@build-last j110f@build-one) (begin (set! j110d@build-last (lambda (j1134@cls) ((lambda (j1136@t) ((lambda (j1138@ls/false) (if j1138@ls/false (apply (lambda (j113a@e j113b@e*) (cons 'begin (cons j113a@e j113b@e*))) j1138@ls/false) ((lambda (j113e@t) ((lambda (j1140@ls/false) (if j1140@ls/false (apply (lambda () (j110f@build-one j1134@cls '(if #f #f))) j1140@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j113e@t))) (jd5f@syntax-dispatch j113e@t '_))) j1136@t))) (jd5f@syntax-dispatch j1136@t '(#(scheme-id else) any . each-any)))) j1134@cls))) (set! j110f@build-one (lambda (j1126@cls j1127@k) ((lambda (j112a@t) ((lambda (j112c@ls/false) (if j112c@ls/false (apply (lambda (j112e@d* j112f@e j1130@e*) (list 'if (list 'memv 't (list 'quote j112e@d*)) (cons 'begin (cons j112f@e j1130@e*)) j1127@k)) j112c@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j112a@t))) (jd5f@syntax-dispatch j112a@t '(each-any any . each-any)))) j1126@cls))) ((lambda (j1110@t) ((lambda (j1112@ls/false) (if j1112@ls/false (apply (lambda (j1114@expr) (jd15@bless (cons 'let (cons (list (list 't j1114@expr)) '((if #f #f)))))) j1112@ls/false) ((lambda (j1116@t) ((lambda (j1118@ls/false) (if j1118@ls/false (apply (lambda (j111a@expr j111b@cls j111c@cls*) (jd15@bless (list 'let (list (list 't j111a@expr)) ((letrec ((j1120@f (lambda (j1122@cls j1123@cls*) (if (null? j1123@cls*) (j110d@build-last j1122@cls) (j110f@build-one j1122@cls (j1120@f (car j1123@cls*) (cdr j1123@cls*))))))) j1120@f) j111b@cls j111c@cls*)))) j1118@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1116@t))) (jd5f@syntax-dispatch j1116@t '(_ any any . each-any)))) j1110@t))) (jd5f@syntax-dispatch j1110@t '(_ any)))) j110a@e))) '#f '#f))) (set! jd0f@quote-transformer (lambda (j1142@e j1143@r j1144@mr) ((lambda (j1148@t) ((lambda (j114a@ls/false) (if j114a@ls/false (apply (lambda (j114c@datum) (list 'quote (jb6e@stx->datum j114c@datum))) j114a@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1148@t))) (jd5f@syntax-dispatch j1148@t '(_ any)))) j1142@e))) (set! jd11@case-lambda-transformer (lambda (j114e@e j114f@r j1150@mr) ((lambda (j1154@t) ((lambda (j1156@ls/false) (if j1156@ls/false (apply (lambda (j1158@fmls* j1159@b* j115a@b**) (call-with-values (lambda () (jd89@chi-lambda-clause* j114e@e j1158@fmls* (map cons j1159@b* j115a@b**) j114f@r j1150@mr)) (lambda (j1162@j115f j1163@j1161) ((lambda (j1166@body* j1167@fmls*) (jabf@ja00@build-case-lambda '#f j1167@fmls* j1166@body*)) j1163@j1161 j1162@j115f)))) j1156@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1154@t))) (jd5f@syntax-dispatch j1154@t '(_ . #(each (any any . each-any)))))) j114e@e))) (set! jd13@lambda-transformer (lambda (j116a@e j116b@r j116c@mr) ((lambda (j1170@t) ((lambda (j1172@ls/false) (if j1172@ls/false (apply (lambda (j1174@fmls j1175@b j1176@b*) (call-with-values (lambda () (jd87@chi-lambda-clause j116a@e j1174@fmls (cons j1175@b j1176@b*) j116b@r j116c@mr)) (lambda (j117e@j117b j117f@j117d) ((lambda (j1182@body j1183@fmls) (jabe@j9fe@build-lambda '#f j1183@fmls j1182@body)) j117f@j117d j117e@j117b)))) j1172@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1170@t))) (jd5f@syntax-dispatch j1170@t '(_ any any . each-any)))) j116a@e))) (set! jd15@bless (lambda (j1186@x) (jb42@mkstx ((letrec ((j1188@f (lambda (j118a@x) (if (jb26@stx? j118a@x) j118a@x (if (pair? j118a@x) (cons (j1188@f (car j118a@x)) (j1188@f (cdr j118a@x))) (if (symbol? j118a@x) (jce9@scheme-stx j118a@x) (if (vector? j118a@x) (vector-map j1188@f j118a@x) j118a@x))))))) j1188@f) j1186@x) '() '() '()))) (set! jd17@with-syntax-macro (lambda (j118c@e) ((lambda (j118e@t) ((lambda (j1190@ls/false) (if j1190@ls/false (apply (lambda (j1192@pat* j1193@expr* j1194@b j1195@b*) ((lambda (j119a@idn*) (begin (jd85@verify-formals (map car j119a@idn*) j118c@e) ((lambda (j119c@t*) (jd15@bless (list 'let (map list j119c@t* j1193@expr*) ((letrec ((j119e@f (lambda (j11a0@pat* j11a1@t*) (if (null? j11a0@pat*) (cons 'begin (cons '#f (cons j1194@b j1195@b*))) (list 'syntax-case (car j11a1@t*) '() (list (car j11a0@pat*) (j119e@f (cdr j11a0@pat*) (cdr j11a1@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car j11a0@pat*)) (car j11a1@t*)))))))) j119e@f) j1192@pat* j119c@t*)))) (je2d@generate-temporaries j1193@expr*)))) ((letrec ((j11a4@f (lambda (j11a6@pat*) (if (null? j11a6@pat*) '() (call-with-values (lambda () (jd5d@convert-pattern (car j11a6@pat*) '())) (lambda (j11ac@j11a9 j11ad@j11ab) ((lambda (j11b0@idn* j11b1@pat) (append j11b0@idn* (j11a4@f (cdr j11a6@pat*)))) j11ad@j11ab j11ac@j11a9))))))) j11a4@f) j1192@pat*))) j1190@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j118e@t))) (jd5f@syntax-dispatch j118e@t '(_ #(each (any any)) any . each-any)))) j118c@e))) (set! jd19@invalid-fmls-error (lambda (j11b4@stx j11b5@fmls) ((lambda (j11b8@t) ((lambda (j11ba@ls/false) (if j11ba@ls/false (apply (lambda (j11bc@id* j11bd@last) ((letrec ((j11c0@f (lambda (j11c2@id*) (if (null? j11c2@id*) (values) (if (not (jb5a@id? (car j11c2@id*))) (je3f@syntax-violation '#f '"not an identifier" j11b4@stx (car j11c2@id*)) (begin (j11c0@f (cdr j11c2@id*)) (if (jb66@bound-id-member? (car j11c2@id*) (cdr j11c2@id*)) (je3f@syntax-violation '#f '"duplicate binding" j11b4@stx (car j11c2@id*)) (void)))))))) j11c0@f) (if (jb5a@id? j11bd@last) (cons j11bd@last j11bc@id*) (if (jb50@syntax-null? j11bd@last) j11bc@id* (je3f@syntax-violation '#f '"not an identifier" j11b4@stx j11bd@last))))) j11ba@ls/false) ((lambda (j11c4@t) ((lambda (j11c6@ls/false) (if j11c6@ls/false (apply (lambda () (je3f@syntax-violation '#f '"malformed binding form" j11b4@stx j11b5@fmls)) j11c6@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j11c4@t))) (jd5f@syntax-dispatch j11c4@t '_))) j11b8@t))) (jd5f@syntax-dispatch j11b8@t '#(each+ any () any)))) j11b5@fmls))) (set! jd1b@let-macro (lambda (j11c8@stx) ((lambda (j11ca@t) ((lambda (j11cc@ls/false) (if j11cc@ls/false (apply (lambda (j11ce@lhs* j11cf@rhs* j11d0@b j11d1@b*) (if (jb62@valid-bound-ids? j11ce@lhs*) (jd15@bless (cons (cons 'lambda (cons j11ce@lhs* (cons j11d0@b j11d1@b*))) j11cf@rhs*)) (jd19@invalid-fmls-error j11c8@stx j11ce@lhs*))) j11cc@ls/false) ((lambda (j11d6@t) ((lambda (j11d8@ls/false) (if (and j11d8@ls/false (apply (lambda (j11da@f j11db@lhs* j11dc@rhs* j11dd@b j11de@b*) (jb5a@id? j11da@f)) j11d8@ls/false)) (apply (lambda (j11e4@f j11e5@lhs* j11e6@rhs* j11e7@b j11e8@b*) (if (jb62@valid-bound-ids? j11e5@lhs*) (jd15@bless (cons (list 'letrec (list (list j11e4@f (cons 'lambda (cons j11e5@lhs* (cons j11e7@b j11e8@b*))))) j11e4@f) j11e6@rhs*)) (jd19@invalid-fmls-error j11c8@stx j11e5@lhs*))) j11d8@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j11d6@t))) (jd5f@syntax-dispatch j11d6@t '(_ any #(each (any any)) any . each-any)))) j11ca@t))) (jd5f@syntax-dispatch j11ca@t '(_ #(each (any any)) any . each-any)))) j11c8@stx))) (set! jd1d@let-values-macro (lambda (j11ee@stx) ((lambda (j11f1@rename j11f3@rename*) (begin (set! j11f1@rename (lambda (j1256@x j1257@old* j1258@new*) (begin (if (not (jb5a@id? j1256@x)) (je3f@syntax-violation '#f '"not an indentifier" j11ee@stx j1256@x) (void)) (if (jb66@bound-id-member? j1256@x j1257@old*) (je3f@syntax-violation '#f '"duplicate binding" j11ee@stx j1256@x) (void)) ((lambda (j125c@y) (values j125c@y (cons j1256@x j1257@old*) (cons j125c@y j1258@new*))) (gensym (je45@syntax->datum j1256@x)))))) (set! j11f3@rename* (lambda (j1244@x* j1245@old* j1246@new*) (if (null? j1244@x*) (values '() j1245@old* j1246@new*) (call-with-values (lambda () (j11f1@rename (car j1244@x*) j1245@old* j1246@new*)) (lambda (j124a@x j124b@old* j124c@new*) (call-with-values (lambda () (j11f3@rename* (cdr j1244@x*) j124b@old* j124c@new*)) (lambda (j1250@x* j1251@old* j1252@new*) (values (cons j124a@x j1250@x*) j1251@old* j1252@new*)))))))) ((lambda (j11f4@t) ((lambda (j11f6@ls/false) (if j11f6@ls/false (apply (lambda (j11f8@b j11f9@b*) (cons* (jd15@bless 'let) '() j11f8@b j11f9@b*)) j11f6@ls/false) ((lambda (j11fc@t) ((lambda (j11fe@ls/false) (if j11fe@ls/false (apply (lambda (j1200@lhs* j1201@rhs* j1202@b j1203@b*) (jd15@bless ((letrec ((j1208@f (lambda (j120a@lhs* j120b@rhs* j120c@old* j120d@new*) (if (null? j120a@lhs*) (cons 'let (cons (map list j120c@old* j120d@new*) (cons j1202@b j1203@b*))) ((lambda (j1212@t) ((lambda (j1214@ls/false) (if j1214@ls/false (apply (lambda (j1216@x*) (call-with-values (lambda () (j11f3@rename* j1216@x* j120c@old* j120d@new*)) (lambda (j121e@j1219 j121f@j121b j1220@j121d) ((lambda (j1224@new* j1225@old* j1226@y*) (list 'call-with-values (list 'lambda '() (car j120b@rhs*)) (list 'lambda j1226@y* (j1208@f (cdr j120a@lhs*) (cdr j120b@rhs*) j1225@old* j1224@new*)))) j1220@j121d j121f@j121b j121e@j1219)))) j1214@ls/false) ((lambda (j122a@t) ((lambda (j122c@ls/false) (if j122c@ls/false (apply (lambda (j122e@x* j122f@x) (call-with-values (lambda () (j11f1@rename j122f@x j120c@old* j120d@new*)) (lambda (j1232@y j1233@old* j1234@new*) (call-with-values (lambda () (j11f3@rename* j122e@x* j1233@old* j1234@new*)) (lambda (j1238@y* j1239@old* j123a@new*) (list 'call-with-values (list 'lambda '() (car j120b@rhs*)) (list 'lambda (append j1238@y* j1232@y) (j1208@f (cdr j120a@lhs*) (cdr j120b@rhs*) j1239@old* j123a@new*)))))))) j122c@ls/false) ((lambda (j123e@t) ((lambda (j1240@ls/false) (if j1240@ls/false (apply (lambda (j1242@others) (je3f@syntax-violation '#f '"malformed bindings" j11ee@stx j1242@others)) j1240@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j123e@t))) (jd5f@syntax-dispatch j123e@t 'any))) j122a@t))) (jd5f@syntax-dispatch j122a@t '#(each+ any () any)))) j1212@t))) (jd5f@syntax-dispatch j1212@t 'each-any))) (car j120a@lhs*)))))) j1208@f) j1200@lhs* j1201@rhs* '() '()))) j11fe@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j11fc@t))) (jd5f@syntax-dispatch j11fc@t '(_ #(each (any any)) any . each-any)))) j11f4@t))) (jd5f@syntax-dispatch j11f4@t '(_ () any . each-any)))) j11ee@stx))) '#f '#f))) (set! jd1f@let*-values-macro (lambda (j125e@stx) ((lambda (j1261@check) (begin (set! j1261@check (lambda (j1290@x*) (if (not (null? j1290@x*)) ((lambda (j1292@x) (begin (if (not (jb5a@id? j1292@x)) (je3f@syntax-violation '#f '"not an identifier" j125e@stx j1292@x) (void)) (j1261@check (cdr j1290@x*)) (if (jb66@bound-id-member? j1292@x (cdr j1290@x*)) (je3f@syntax-violation '#f '"duplicate identifier" j125e@stx j1292@x) (void)))) (car j1290@x*)) (void)))) ((lambda (j1262@t) ((lambda (j1264@ls/false) (if j1264@ls/false (apply (lambda (j1266@b j1267@b*) (cons* (jd15@bless 'let) '() j1266@b j1267@b*)) j1264@ls/false) ((lambda (j126a@t) ((lambda (j126c@ls/false) (if j126c@ls/false (apply (lambda (j126e@lhs* j126f@rhs* j1270@b j1271@b*) (jd15@bless ((letrec ((j1276@f (lambda (j1278@lhs* j1279@rhs*) (if (null? j1278@lhs*) (cons 'begin (cons j1270@b j1271@b*)) ((lambda (j127c@t) ((lambda (j127e@ls/false) (if j127e@ls/false (apply (lambda (j1280@x*) (begin (j1261@check j1280@x*) (list 'call-with-values (list 'lambda '() (car j1279@rhs*)) (list 'lambda j1280@x* (j1276@f (cdr j1278@lhs*) (cdr j1279@rhs*)))))) j127e@ls/false) ((lambda (j1282@t) ((lambda (j1284@ls/false) (if j1284@ls/false (apply (lambda (j1286@x* j1287@x) (begin (j1261@check (cons j1287@x j1286@x*)) (list 'call-with-values (list 'lambda '() (car j1279@rhs*)) (list 'lambda (append j1286@x* j1287@x) (j1276@f (cdr j1278@lhs*) (cdr j1279@rhs*)))))) j1284@ls/false) ((lambda (j128a@t) ((lambda (j128c@ls/false) (if j128c@ls/false (apply (lambda (j128e@others) (je3f@syntax-violation '#f '"malformed bindings" j125e@stx j128e@others)) j128c@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j128a@t))) (jd5f@syntax-dispatch j128a@t 'any))) j1282@t))) (jd5f@syntax-dispatch j1282@t '#(each+ any () any)))) j127c@t))) (jd5f@syntax-dispatch j127c@t 'each-any))) (car j1278@lhs*)))))) j1276@f) j126e@lhs* j126f@rhs*))) j126c@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j126a@t))) (jd5f@syntax-dispatch j126a@t '(_ #(each (any any)) any . each-any)))) j1262@t))) (jd5f@syntax-dispatch j1262@t '(_ () any . each-any)))) j125e@stx))) '#f))) (set! jd21@trace-lambda-macro (lambda (j1294@stx) ((lambda (j1296@t) ((lambda (j1298@ls/false) (if j1298@ls/false (apply (lambda (j129a@who j129b@fmls j129c@b j129d@b*) (if (jb62@valid-bound-ids? j129b@fmls) (jd15@bless (list 'make-traced-procedure (list 'quote j129a@who) (cons 'lambda (cons j129b@fmls (cons j129c@b j129d@b*))))) (jd19@invalid-fmls-error j1294@stx j129b@fmls))) j1298@ls/false) ((lambda (j12a2@t) ((lambda (j12a4@ls/false) (if j12a4@ls/false (apply (lambda (j12a6@who j12a7@fmls j12a8@last j12a9@b j12aa@b*) (if (jb62@valid-bound-ids? (cons j12a8@last j12a7@fmls)) (jd15@bless (list 'make-traced-procedure (list 'quote j12a6@who) (cons 'lambda (cons (append j12a7@fmls j12a8@last) (cons j12a9@b j12aa@b*))))) (jd19@invalid-fmls-error j1294@stx (append j12a7@fmls j12a8@last)))) j12a4@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j12a2@t))) (jd5f@syntax-dispatch j12a2@t '(_ any #(each+ any () any) any . each-any)))) j1296@t))) (jd5f@syntax-dispatch j1296@t '(_ any each-any any . each-any)))) j1294@stx))) (set! jd23@trace-define-macro (lambda (j12b0@stx) ((lambda (j12b2@t) ((lambda (j12b4@ls/false) (if j12b4@ls/false (apply (lambda (j12b6@who j12b7@fmls j12b8@b j12b9@b*) (if (jb62@valid-bound-ids? j12b7@fmls) (jd15@bless (list 'define j12b6@who (list 'make-traced-procedure (list 'quote j12b6@who) (cons 'lambda (cons j12b7@fmls (cons j12b8@b j12b9@b*)))))) (jd19@invalid-fmls-error j12b0@stx j12b7@fmls))) j12b4@ls/false) ((lambda (j12be@t) ((lambda (j12c0@ls/false) (if j12c0@ls/false (apply (lambda (j12c2@who j12c3@fmls j12c4@last j12c5@b j12c6@b*) (if (jb62@valid-bound-ids? (cons j12c4@last j12c3@fmls)) (jd15@bless (list 'define j12c2@who (list 'make-traced-procedure (list 'quote j12c2@who) (cons 'lambda (cons (append j12c3@fmls j12c4@last) (cons j12c5@b j12c6@b*)))))) (jd19@invalid-fmls-error j12b0@stx (append j12c3@fmls j12c4@last)))) j12c0@ls/false) ((lambda (j12cc@t) ((lambda (j12ce@ls/false) (if j12ce@ls/false (apply (lambda (j12d0@who j12d1@expr) (if (jb5a@id? j12d0@who) (jd15@bless (list 'define j12d0@who (list 'let (list (list 'v j12d1@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote j12d0@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (je3f@syntax-violation '#f '"invalid name" j12b0@stx))) j12ce@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j12cc@t))) (jd5f@syntax-dispatch j12cc@t '(_ any any)))) j12be@t))) (jd5f@syntax-dispatch j12be@t '(_ (any . #(each+ any () any)) any . each-any)))) j12b2@t))) (jd5f@syntax-dispatch j12b2@t '(_ (any . each-any) any . each-any)))) j12b0@stx))) (set! jd25@trace-define-syntax-macro (lambda (j12d4@stx) ((lambda (j12d6@t) ((lambda (j12d8@ls/false) (if j12d8@ls/false (apply (lambda (j12da@who j12db@expr) (if (jb5a@id? j12da@who) (jd15@bless (list 'define-syntax j12da@who (list 'make-traced-macro (list 'quote j12da@who) j12db@expr))) (je3f@syntax-violation '#f '"invalid name" j12d4@stx))) j12d8@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j12d6@t))) (jd5f@syntax-dispatch j12d6@t '(_ any any)))) j12d4@stx))) (set! jd27@trace-let/rec-syntax (lambda (j12de@who) (lambda (j12e0@stx) ((lambda (j12e2@t) ((lambda (j12e4@ls/false) (if j12e4@ls/false (apply (lambda (j12e6@lhs* j12e7@rhs* j12e8@b j12e9@b*) (if (jb62@valid-bound-ids? j12e6@lhs*) ((lambda (j12ee@rhs*) (jd15@bless (cons j12de@who (cons (map list j12e6@lhs* j12ee@rhs*) (cons j12e8@b j12e9@b*))))) (map (lambda (j12f0@lhs j12f1@rhs) (list 'make-traced-macro (list 'quote j12f0@lhs) j12f1@rhs)) j12e6@lhs* j12e7@rhs*)) (jd19@invalid-fmls-error j12e0@stx j12e6@lhs*))) j12e4@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j12e2@t))) (jd5f@syntax-dispatch j12e2@t '(_ #(each (any any)) any . each-any)))) j12e0@stx)))) (set! jd29@trace-let-syntax-macro (jd27@trace-let/rec-syntax 'let-syntax)) (set! jd2b@trace-letrec-syntax-macro (jd27@trace-let/rec-syntax 'letrec-syntax)) (set! jd2d@guard-macro (lambda (j12f4@x) ((lambda (j12f7@gen-clauses) (begin (set! j12f7@gen-clauses (lambda (j130e@con j130f@outerk j1310@clause*) ((lambda (j1315@f j1317@f*) (begin (set! j1315@f (lambda (j134e@x j134f@k) ((lambda (j1352@t) ((lambda (j1354@ls/false) (if j1354@ls/false (apply (lambda (j1356@e j1357@p) ((lambda (j135a@t) (list 'let (list (list j135a@t j1356@e)) (list 'if j135a@t (list j1357@p j135a@t) j134f@k))) (gensym))) j1354@ls/false) ((lambda (j135c@t) ((lambda (j135e@ls/false) (if j135e@ls/false (apply (lambda (j1360@e) ((lambda (j1362@t) (list 'let (list (list j1362@t j1360@e)) (list 'if j1362@t j1362@t j134f@k))) (gensym))) j135e@ls/false) ((lambda (j1364@t) ((lambda (j1366@ls/false) (if j1366@ls/false (apply (lambda (j1368@e j1369@v j136a@v*) (list 'if j1368@e (cons 'begin (cons j1369@v j136a@v*)) j134f@k)) j1366@ls/false) ((lambda (j136e@t) ((lambda (j1370@ls/false) (if j1370@ls/false (apply (lambda () (je3f@syntax-violation '#f '"invalid guard clause" j134e@x)) j1370@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j136e@t))) (jd5f@syntax-dispatch j136e@t '_))) j1364@t))) (jd5f@syntax-dispatch j1364@t '(any any . each-any)))) j135c@t))) (jd5f@syntax-dispatch j135c@t '(any)))) j1352@t))) (jd5f@syntax-dispatch j1352@t '(any #(scheme-id =>) any)))) j134e@x))) (set! j1317@f* (lambda (j1324@x*) ((lambda (j1326@t) ((lambda (j1328@ls/false) (if j1328@ls/false (apply (lambda () ((lambda (j132a@g) (values (list j132a@g (list 'lambda '() (list 'raise-continuable j130e@con))) j132a@g)) (gensym))) j1328@ls/false) ((lambda (j132c@t) ((lambda (j132e@ls/false) (if j132e@ls/false (apply (lambda (j1330@e j1331@e*) (values (cons 'begin (cons j1330@e j1331@e*)) '#f)) j132e@ls/false) ((lambda (j1334@t) ((lambda (j1336@ls/false) (if j1336@ls/false (apply (lambda (j1338@cls j1339@cls*) (call-with-values (lambda () (j1317@f* j1339@cls*)) (lambda (j1340@j133d j1341@j133f) ((lambda (j1344@g j1345@e) (values (j1315@f j1338@cls j1345@e) j1344@g)) j1341@j133f j1340@j133d)))) j1336@ls/false) ((lambda (j1348@t) ((lambda (j134a@ls/false) (if j134a@ls/false (apply (lambda (j134c@others) (je3f@syntax-violation '#f '"invalid guard clause" j134c@others)) j134a@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1348@t))) (jd5f@syntax-dispatch j1348@t 'any))) j1334@t))) (jd5f@syntax-dispatch j1334@t '(any . any)))) j132c@t))) (jd5f@syntax-dispatch j132c@t '((#(scheme-id else) any . each-any))))) j1326@t))) (jd5f@syntax-dispatch j1326@t '()))) j1324@x*))) (call-with-values (lambda () (j1317@f* j1310@clause*)) (lambda (j131c@j1319 j131d@j131b) ((lambda (j1320@raisek j1321@code) (if j1320@raisek (list (list 'call/cc (list 'lambda (list j1320@raisek) (list j130f@outerk (list 'lambda '() j1321@code))))) (list j130f@outerk (list 'lambda '() j1321@code)))) j131d@j131b j131c@j1319))))) '#f '#f))) ((lambda (j12f8@t) ((lambda (j12fa@ls/false) (if (and j12fa@ls/false (apply (lambda (j12fc@con j12fd@clause* j12fe@b j12ff@b*) (jb5a@id? j12fc@con)) j12fa@ls/false)) (apply (lambda (j1304@con j1305@clause* j1306@b j1307@b*) ((lambda (j130c@outerk) (jd15@bless (list (list 'call/cc (list 'lambda (list j130c@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list j1304@con) (j12f7@gen-clauses j1304@con j130c@outerk j1305@clause*)) (cons 'lambda (cons '() (cons j1306@b j1307@b*)))))))))) (gensym))) j12fa@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j12f8@t))) (jd5f@syntax-dispatch j12f8@t '(_ (any . each-any) any . each-any)))) j12f4@x))) '#f))) (set! jd2f@define-enumeration-macro (lambda (j1372@stx) ((lambda (j1375@set? j1377@remove-dups) (begin (set! j1375@set? (lambda (j138e@x) (or (null? j138e@x) (and (not (memq (car j138e@x) (cdr j138e@x))) (j1375@set? (cdr j138e@x)))))) (set! j1377@remove-dups (lambda (j138c@ls) (if (null? j138c@ls) '() (cons (car j138c@ls) (j1377@remove-dups (remq (car j138c@ls) (cdr j138c@ls))))))) ((lambda (j1378@t) ((lambda (j137a@ls/false) (if (and j137a@ls/false (apply (lambda (j137c@name j137d@id* j137e@maker) (and (jb5a@id? j137c@name) (jb5a@id? j137e@maker) (for-all jb5a@id? j137d@id*))) j137a@ls/false)) (apply (lambda (j1382@name j1383@id* j1384@maker) ((lambda (j1388@name* j1389@mk) (jd15@bless (list 'begin (list 'define j1389@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote j1388@name*)))) (list 'define-syntax j1382@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote j1388@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote j1382@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax j1384@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote j1384@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote j1388@name*)) (cons 'syntax-violation (cons (list 'quote j1384@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons j1389@mk '('(n* ...)))))))))))) (j1377@remove-dups (je45@syntax->datum j1383@id*)) (gensym))) j137a@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1378@t))) (jd5f@syntax-dispatch j1378@t '(_ any each-any any)))) j1372@stx))) '#f '#f))) (set! jd31@time-macro (lambda (j1390@stx) ((lambda (j1392@t) ((lambda (j1394@ls/false) (if j1394@ls/false (apply (lambda (j1396@expr) (jd15@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() j1396@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) j1394@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1392@t))) (jd5f@syntax-dispatch j1392@t '(_ any)))) j1390@stx))) (set! jd33@delay-macro (lambda (j1398@stx) ((lambda (j139a@t) ((lambda (j139c@ls/false) (if j139c@ls/false (apply (lambda (j139e@expr) (jd15@bless (list 'make-promise (list 'lambda '() j139e@expr)))) j139c@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j139a@t))) (jd5f@syntax-dispatch j139a@t '(_ any)))) j1398@stx))) (set! jd35@assert-macro (lambda (j13a0@stx) ((lambda (j13a2@t) ((lambda (j13a4@ls/false) (if j13a4@ls/false (apply (lambda (j13a6@expr) ((lambda (j13a8@pos) (jd15@bless (list 'unless j13a6@expr (list 'assertion-error (list 'quote j13a6@expr) (list 'quote j13a8@pos))))) (or (je37@expression-position j13a0@stx) (je37@expression-position j13a6@expr)))) j13a4@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j13a2@t))) (jd5f@syntax-dispatch j13a2@t '(_ any)))) j13a0@stx))) (set! jd37@endianness-macro (lambda (j13aa@stx) ((lambda (j13ac@t) ((lambda (j13ae@ls/false) (if j13ae@ls/false (apply (lambda (j13b0@e) ((lambda (j13b2@t) (if (memv j13b2@t '(little)) (jd15@bless ''little) (if (memv j13b2@t '(big)) (jd15@bless ''big) (je3f@syntax-violation '#f '"endianness must be big or little" j13aa@stx)))) (je45@syntax->datum j13b0@e))) j13ae@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j13ac@t))) (jd5f@syntax-dispatch j13ac@t '(_ any)))) j13aa@stx))) (set! jd39@identifier-syntax-macro (lambda (j13b4@stx) ((lambda (j13b6@t) ((lambda (j13b8@ls/false) (if j13b8@ls/false (apply (lambda (j13ba@expr) (jd15@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax j13ba@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax j13ba@expr) '((syntax (e* ...)))))))))) j13b8@ls/false) ((lambda (j13bc@t) ((lambda (j13be@ls/false) (if (and j13be@ls/false (apply (lambda (j13c0@id1 j13c1@expr1 j13c2@id2 j13c3@expr2 j13c4@expr3) (and (jb5a@id? j13c0@id1) (jb5a@id? j13c2@id2) (jb5a@id? j13c3@expr2))) j13be@ls/false)) (apply (lambda (j13ca@id1 j13cb@expr1 j13cc@id2 j13cd@expr2 j13ce@expr3) (jd15@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax j13cb@expr1)) (list (list 'set! 'id j13cd@expr2) (list 'syntax j13ce@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons j13cb@expr1 '(e* ...))))))))) j13be@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j13bc@t))) (jd5f@syntax-dispatch j13bc@t '(_ (any any) ((#(scheme-id set!) any any) any))))) j13b6@t))) (jd5f@syntax-dispatch j13b6@t '(_ any)))) j13b4@stx))) (set! jd3b@do-macro (lambda (j13d4@stx) ((lambda (j13d7@bind) (begin (set! j13d7@bind (lambda (j13ee@x) ((lambda (j13f0@t) ((lambda (j13f2@ls/false) (if j13f2@ls/false (apply (lambda (j13f4@x j13f5@init) (list j13f4@x j13f5@init j13f4@x)) j13f2@ls/false) ((lambda (j13f8@t) ((lambda (j13fa@ls/false) (if j13fa@ls/false (apply (lambda (j13fc@x j13fd@init j13fe@step) (list j13fc@x j13fd@init j13fe@step)) j13fa@ls/false) ((lambda (j1402@t) ((lambda (j1404@ls/false) (if j1404@ls/false (apply (lambda () (je3f@syntax-violation '#f '"invalid binding" j13d4@stx)) j1404@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1402@t))) (jd5f@syntax-dispatch j1402@t '_))) j13f8@t))) (jd5f@syntax-dispatch j13f8@t '(any any any)))) j13f0@t))) (jd5f@syntax-dispatch j13f0@t '(any any)))) j13ee@x))) ((lambda (j13d8@t) ((lambda (j13da@ls/false) (if j13da@ls/false (apply (lambda (j13dc@binding* j13dd@test j13de@expr* j13df@command*) ((lambda (j13e4@t) ((lambda (j13e6@ls/false) (if j13e6@ls/false (apply (lambda (j13e8@x* j13e9@init* j13ea@step*) (if (jb62@valid-bound-ids? j13e8@x*) (jd15@bless (list 'letrec (list (list 'loop (list 'lambda j13e8@x* (list 'if j13dd@test (cons 'begin (cons '(if #f #f) j13de@expr*)) (cons 'begin (append j13df@command* (list (cons 'loop j13ea@step*)))))))) (cons 'loop j13e9@init*))) (je3f@syntax-violation '#f '"invalid bindings" j13d4@stx))) j13e6@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j13e4@t))) (jd5f@syntax-dispatch j13e4@t '#(each (any any any))))) (map j13d7@bind j13dc@binding*))) j13da@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j13d8@t))) (jd5f@syntax-dispatch j13d8@t '(_ each-any (any . each-any) . each-any)))) j13d4@stx))) '#f))) (set! jd3d@let*-macro (lambda (j1406@stx) ((lambda (j1408@t) ((lambda (j140a@ls/false) (if (and j140a@ls/false (apply (lambda (j140c@lhs* j140d@rhs* j140e@b j140f@b*) (for-all jb5a@id? j140c@lhs*)) j140a@ls/false)) (apply (lambda (j1414@lhs* j1415@rhs* j1416@b j1417@b*) (jd15@bless ((letrec ((j141c@f (lambda (j141e@x*) (if (null? j141e@x*) (cons 'let (cons '() (cons j1416@b j1417@b*))) (list 'let (list (car j141e@x*)) (j141c@f (cdr j141e@x*))))))) j141c@f) (map list j1414@lhs* j1415@rhs*)))) j140a@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1408@t))) (jd5f@syntax-dispatch j1408@t '(_ #(each (any any)) any . each-any)))) j1406@stx))) (set! jd3f@or-macro (lambda (j1420@stx) ((lambda (j1422@t) ((lambda (j1424@ls/false) (if j1424@ls/false (apply (lambda () '#f) j1424@ls/false) ((lambda (j1426@t) ((lambda (j1428@ls/false) (if j1428@ls/false (apply (lambda (j142a@e j142b@e*) (jd15@bless ((letrec ((j142e@f (lambda (j1430@e j1431@e*) (if (null? j1431@e*) (list 'begin '#f j1430@e) (list 'let (list (list 't j1430@e)) (list 'if 't 't (j142e@f (car j1431@e*) (cdr j1431@e*)))))))) j142e@f) j142a@e j142b@e*))) j1428@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1426@t))) (jd5f@syntax-dispatch j1426@t '(_ any . each-any)))) j1422@t))) (jd5f@syntax-dispatch j1422@t '(_)))) j1420@stx))) (set! jd41@and-macro (lambda (j1434@stx) ((lambda (j1436@t) ((lambda (j1438@ls/false) (if j1438@ls/false (apply (lambda () '#t) j1438@ls/false) ((lambda (j143a@t) ((lambda (j143c@ls/false) (if j143c@ls/false (apply (lambda (j143e@e j143f@e*) (jd15@bless ((letrec ((j1442@f (lambda (j1444@e j1445@e*) (if (null? j1445@e*) (list 'begin '#f j1444@e) (cons 'if (cons j1444@e (cons (j1442@f (car j1445@e*) (cdr j1445@e*)) '(#f)))))))) j1442@f) j143e@e j143f@e*))) j143c@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j143a@t))) (jd5f@syntax-dispatch j143a@t '(_ any . each-any)))) j1436@t))) (jd5f@syntax-dispatch j1436@t '(_)))) j1434@stx))) (set! jd43@cond-macro (lambda (j1448@stx) ((lambda (j144a@t) ((lambda (j144c@ls/false) (if j144c@ls/false (apply (lambda (j144e@cls j144f@cls*) (jd15@bless ((letrec ((j1452@f (lambda (j1454@cls j1455@cls*) (if (null? j1455@cls*) ((lambda (j1458@t) ((lambda (j145a@ls/false) (if j145a@ls/false (apply (lambda (j145c@e j145d@e*) (cons 'begin (cons j145c@e j145d@e*))) j145a@ls/false) ((lambda (j1460@t) ((lambda (j1462@ls/false) (if j1462@ls/false (apply (lambda (j1464@e j1465@p) (list 'let (list (list 't j1464@e)) (list 'if 't (cons j1465@p '(t))))) j1462@ls/false) ((lambda (j1468@t) ((lambda (j146a@ls/false) (if j146a@ls/false (apply (lambda (j146c@e) (cons 'or (cons j146c@e '((if #f #f))))) j146a@ls/false) ((lambda (j146e@t) ((lambda (j1470@ls/false) (if j1470@ls/false (apply (lambda (j1472@e j1473@e*) (list 'if j1472@e (cons 'begin j1473@e*))) j1470@ls/false) ((lambda (j1476@t) ((lambda (j1478@ls/false) (if j1478@ls/false (apply (lambda () (je3f@syntax-violation '#f '"invalid last clause" j1448@stx)) j1478@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1476@t))) (jd5f@syntax-dispatch j1476@t '_))) j146e@t))) (jd5f@syntax-dispatch j146e@t '(any . each-any)))) j1468@t))) (jd5f@syntax-dispatch j1468@t '(any)))) j1460@t))) (jd5f@syntax-dispatch j1460@t '(any #(scheme-id =>) any)))) j1458@t))) (jd5f@syntax-dispatch j1458@t '(#(scheme-id else) any . each-any)))) j1454@cls) ((lambda (j147a@t) ((lambda (j147c@ls/false) (if j147c@ls/false (apply (lambda (j147e@e j147f@e*) (je3f@syntax-violation '#f '"incorrect position of keyword else" j1448@stx)) j147c@ls/false) ((lambda (j1482@t) ((lambda (j1484@ls/false) (if j1484@ls/false (apply (lambda (j1486@e j1487@p) (list 'let (list (list 't j1486@e)) (list 'if 't (cons j1487@p '(t)) (j1452@f (car j1455@cls*) (cdr j1455@cls*))))) j1484@ls/false) ((lambda (j148a@t) ((lambda (j148c@ls/false) (if j148c@ls/false (apply (lambda (j148e@e) (list 'or j148e@e (j1452@f (car j1455@cls*) (cdr j1455@cls*)))) j148c@ls/false) ((lambda (j1490@t) ((lambda (j1492@ls/false) (if j1492@ls/false (apply (lambda (j1494@e j1495@e*) (list 'if j1494@e (cons 'begin j1495@e*) (j1452@f (car j1455@cls*) (cdr j1455@cls*)))) j1492@ls/false) ((lambda (j1498@t) ((lambda (j149a@ls/false) (if j149a@ls/false (apply (lambda () (je3f@syntax-violation '#f '"invalid last clause" j1448@stx)) j149a@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1498@t))) (jd5f@syntax-dispatch j1498@t '_))) j1490@t))) (jd5f@syntax-dispatch j1490@t '(any . each-any)))) j148a@t))) (jd5f@syntax-dispatch j148a@t '(any)))) j1482@t))) (jd5f@syntax-dispatch j1482@t '(any #(scheme-id =>) any)))) j147a@t))) (jd5f@syntax-dispatch j147a@t '(#(scheme-id else) any . each-any)))) j1454@cls))))) j1452@f) j144e@cls j144f@cls*))) j144c@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j144a@t))) (jd5f@syntax-dispatch j144a@t '(_ any . each-any)))) j1448@stx))) (set! jd45@do-include (lambda (j149c@stx j149d@id j149e@filename) ((lambda (j14a2@filename) (begin (if (not (and (string? j14a2@filename) (jb5a@id? j149d@id))) (je3f@syntax-violation '#f '"invalid syntax" j149c@stx) (void)) (cons (jd15@bless 'begin) (with-input-from-file j14a2@filename (lambda () ((letrec ((j14a4@f (lambda (j14a6@ls) ((lambda (j14a8@x) (if (eof-object? j14a8@x) (reverse j14a6@ls) (j14a4@f (cons (jb3a@datum->stx j149d@id j14a8@x) j14a6@ls)))) (j6ac@j57e@read-annotated))))) j14a4@f) '())))))) (jb6e@stx->datum j149e@filename)))) (set! jd47@include-macro (lambda (j14aa@e) ((lambda (j14ac@t) ((lambda (j14ae@ls/false) (if j14ae@ls/false (apply (lambda (j14b0@id j14b1@filename) (jd45@do-include j14aa@e j14b0@id j14b1@filename)) j14ae@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j14ac@t))) (jd5f@syntax-dispatch j14ac@t '(any any)))) j14aa@e))) (set! jd49@include-into-macro (lambda (j14b4@e) ((lambda (j14b6@t) ((lambda (j14b8@ls/false) (if j14b8@ls/false (apply (lambda (j14ba@id j14bb@filename) (jd45@do-include j14b4@e j14ba@id j14bb@filename)) j14b8@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j14b6@t))) (jd5f@syntax-dispatch j14b6@t '(_ any any)))) j14b4@e))) (set! jd4b@syntax-rules-macro (lambda (j14be@e) ((lambda (j14c0@t) ((lambda (j14c2@ls/false) (if j14c2@ls/false (apply (lambda (j14c4@lits j14c5@pat* j14c6@tmp*) (begin (jd65@verify-literals j14c4@lits j14be@e) (jd15@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons j14c4@lits (map (lambda (j14ca@pat j14cb@tmp) ((lambda (j14ce@t) ((lambda (j14d0@ls/false) (if j14d0@ls/false (apply (lambda (j14d2@rest) (list (cons 'g j14d2@rest) (list 'syntax j14cb@tmp))) j14d0@ls/false) ((lambda (j14d4@t) ((lambda (j14d6@ls/false) (if j14d6@ls/false (apply (lambda () (je3f@syntax-violation '#f '"invalid syntax-rules pattern" j14be@e j14ca@pat)) j14d6@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j14d4@t))) (jd5f@syntax-dispatch j14d4@t '_))) j14ce@t))) (jd5f@syntax-dispatch j14ce@t '(_ . any)))) j14ca@pat)) j14c5@pat* j14c6@tmp*)))))))) j14c2@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j14c0@t))) (jd5f@syntax-dispatch j14c0@t '(_ each-any . #(each (any any)))))) j14be@e))) (set! jd4d@quasiquote-macro ((lambda () ((lambda (j14d9@datum j14f5@quasicons* j14f7@quasicons j14f9@quasiappend j14fb@quasivector j14fd@vquasi j14ff@quasi) (begin (set! j14d9@datum (lambda (j15da@x) (list (jce9@scheme-stx 'quote) (jb42@mkstx j15da@x '() '() '())))) (set! j14f5@quasicons* (lambda (j15d2@x j15d3@y) ((letrec ((j15d6@f (lambda (j15d8@x) (if (null? j15d8@x) j15d3@y (j14f7@quasicons (car j15d8@x) (j15d6@f (cdr j15d8@x))))))) j15d6@f) j15d2@x))) (set! j14f7@quasicons (lambda (j15ac@x j15ad@y) ((lambda (j15b0@t) ((lambda (j15b2@ls/false) (if j15b2@ls/false (apply (lambda (j15b4@dy) ((lambda (j15b6@t) ((lambda (j15b8@ls/false) (if j15b8@ls/false (apply (lambda (j15ba@dx) (list (jce9@scheme-stx 'quote) (cons j15ba@dx j15b4@dy))) j15b8@ls/false) ((lambda (j15bc@t) ((lambda (j15be@ls/false) (if j15be@ls/false (apply (lambda () ((lambda (j15c0@t) ((lambda (j15c2@ls/false) (if j15c2@ls/false (apply (lambda () (list (jce9@scheme-stx 'list) j15ac@x)) j15c2@ls/false) ((lambda (j15c4@t) ((lambda (j15c6@ls/false) (if j15c6@ls/false (apply (lambda () (list (jce9@scheme-stx 'cons) j15ac@x j15ad@y)) j15c6@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j15c4@t))) (jd5f@syntax-dispatch j15c4@t '_))) j15c0@t))) (jd5f@syntax-dispatch j15c0@t '()))) j15b4@dy)) j15be@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j15bc@t))) (jd5f@syntax-dispatch j15bc@t '_))) j15b6@t))) (jd5f@syntax-dispatch j15b6@t '(#(scheme-id quote) any)))) j15ac@x)) j15b2@ls/false) ((lambda (j15c8@t) ((lambda (j15ca@ls/false) (if j15ca@ls/false (apply (lambda (j15cc@stuff) (cons* (jce9@scheme-stx 'list) j15ac@x j15cc@stuff)) j15ca@ls/false) ((lambda (j15ce@t) ((lambda (j15d0@ls/false) (if j15d0@ls/false (apply (lambda () (list (jce9@scheme-stx 'cons) j15ac@x j15ad@y)) j15d0@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j15ce@t))) (jd5f@syntax-dispatch j15ce@t '_))) j15c8@t))) (jd5f@syntax-dispatch j15c8@t '(#(scheme-id list) . each-any)))) j15b0@t))) (jd5f@syntax-dispatch j15b0@t '(#(scheme-id quote) any)))) j15ad@y))) (set! j14f9@quasiappend (lambda (j1592@x j1593@y) ((lambda (j1596@ls) (if (null? j1596@ls) (list (jce9@scheme-stx 'quote) '()) (if (null? (cdr j1596@ls)) (car j1596@ls) (cons* (jce9@scheme-stx 'append) j1596@ls)))) ((letrec ((j1598@f (lambda (j159a@x) (if (null? j159a@x) ((lambda (j159c@t) ((lambda (j159e@ls/false) (if j159e@ls/false (apply (lambda () '()) j159e@ls/false) ((lambda (j15a0@t) ((lambda (j15a2@ls/false) (if j15a2@ls/false (apply (lambda () (list j1593@y)) j15a2@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j15a0@t))) (jd5f@syntax-dispatch j15a0@t '_))) j159c@t))) (jd5f@syntax-dispatch j159c@t '(#(scheme-id quote) ())))) j1593@y) ((lambda (j15a4@t) ((lambda (j15a6@ls/false) (if j15a6@ls/false (apply (lambda () (j1598@f (cdr j159a@x))) j15a6@ls/false) ((lambda (j15a8@t) ((lambda (j15aa@ls/false) (if j15aa@ls/false (apply (lambda () (cons (car j159a@x) (j1598@f (cdr j159a@x)))) j15aa@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j15a8@t))) (jd5f@syntax-dispatch j15a8@t '_))) j15a4@t))) (jd5f@syntax-dispatch j15a4@t '(#(scheme-id quote) ())))) (car j159a@x)))))) j1598@f) j1592@x)))) (set! j14fb@quasivector (lambda (j1560@x) ((lambda (j1562@pat-x) ((lambda (j1564@t) ((lambda (j1566@ls/false) (if j1566@ls/false (apply (lambda (j1568@x*) (list (jce9@scheme-stx 'quote) (list->vector j1568@x*))) j1566@ls/false) ((lambda (j156a@t) ((lambda (j156c@ls/false) (if j156c@ls/false (apply (lambda () ((letrec ((j156e@f (lambda (j1570@x j1571@k) ((lambda (j1574@t) ((lambda (j1576@ls/false) (if j1576@ls/false (apply (lambda (j1578@x*) (j1571@k (map (lambda (j157a@x) (list (jce9@scheme-stx 'quote) j157a@x)) j1578@x*))) j1576@ls/false) ((lambda (j157c@t) ((lambda (j157e@ls/false) (if j157e@ls/false (apply (lambda (j1580@x*) (j1571@k j1580@x*)) j157e@ls/false) ((lambda (j1582@t) ((lambda (j1584@ls/false) (if j1584@ls/false (apply (lambda (j1586@x j1587@y) (j156e@f j1587@y (lambda (j158a@ls) (j1571@k (cons j1586@x j158a@ls))))) j1584@ls/false) ((lambda (j158c@t) ((lambda (j158e@ls/false) (if j158e@ls/false (apply (lambda () (list (jce9@scheme-stx 'list->vector) j1562@pat-x)) j158e@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j158c@t))) (jd5f@syntax-dispatch j158c@t '_))) j1582@t))) (jd5f@syntax-dispatch j1582@t '(#(scheme-id cons) any any)))) j157c@t))) (jd5f@syntax-dispatch j157c@t '(#(scheme-id list) . each-any)))) j1574@t))) (jd5f@syntax-dispatch j1574@t '(#(scheme-id quote) each-any)))) j1570@x)))) j156e@f) j1560@x (lambda (j1590@ls) (cons* (jce9@scheme-stx 'vector) j1590@ls)))) j156c@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j156a@t))) (jd5f@syntax-dispatch j156a@t '_))) j1564@t))) (jd5f@syntax-dispatch j1564@t '(#(scheme-id quote) each-any)))) j1562@pat-x)) j1560@x))) (set! j14fd@vquasi (lambda (j153e@p j153f@lev) ((lambda (j1542@t) ((lambda (j1544@ls/false) (if j1544@ls/false (apply (lambda (j1546@p j1547@q) ((lambda (j154a@t) ((lambda (j154c@ls/false) (if j154c@ls/false (apply (lambda (j154e@p) (if (= j153f@lev '0) (j14f5@quasicons* j154e@p (j14fd@vquasi j1547@q j153f@lev)) (j14f7@quasicons (j14f7@quasicons (j14d9@datum 'unquote) (j14ff@quasi j154e@p (- j153f@lev '1))) (j14fd@vquasi j1547@q j153f@lev)))) j154c@ls/false) ((lambda (j1550@t) ((lambda (j1552@ls/false) (if j1552@ls/false (apply (lambda (j1554@p) (if (= j153f@lev '0) (j14f9@quasiappend j1554@p (j14fd@vquasi j1547@q j153f@lev)) (j14f7@quasicons (j14f7@quasicons (j14d9@datum 'unquote-splicing) (j14ff@quasi j1554@p (- j153f@lev '1))) (j14fd@vquasi j1547@q j153f@lev)))) j1552@ls/false) ((lambda (j1556@t) ((lambda (j1558@ls/false) (if j1558@ls/false (apply (lambda (j155a@p) (j14f7@quasicons (j14ff@quasi j155a@p j153f@lev) (j14fd@vquasi j1547@q j153f@lev))) j1558@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1556@t))) (jd5f@syntax-dispatch j1556@t 'any))) j1550@t))) (jd5f@syntax-dispatch j1550@t '(#(scheme-id unquote-splicing) . each-any)))) j154a@t))) (jd5f@syntax-dispatch j154a@t '(#(scheme-id unquote) . each-any)))) j1546@p)) j1544@ls/false) ((lambda (j155c@t) ((lambda (j155e@ls/false) (if j155e@ls/false (apply (lambda () (list (jce9@scheme-stx 'quote) '())) j155e@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j155c@t))) (jd5f@syntax-dispatch j155c@t '()))) j1542@t))) (jd5f@syntax-dispatch j1542@t '(any . any)))) j153e@p))) (set! j14ff@quasi (lambda (j1508@p j1509@lev) ((lambda (j150c@t) ((lambda (j150e@ls/false) (if j150e@ls/false (apply (lambda (j1510@p) (if (= j1509@lev '0) j1510@p (j14f7@quasicons (j14d9@datum 'unquote) (j14ff@quasi (list j1510@p) (- j1509@lev '1))))) j150e@ls/false) ((lambda (j1512@t) ((lambda (j1514@ls/false) (if j1514@ls/false (apply (lambda (j1516@p j1517@q) (if (= j1509@lev '0) (j14f5@quasicons* j1516@p (j14ff@quasi j1517@q j1509@lev)) (j14f7@quasicons (j14f7@quasicons (j14d9@datum 'unquote) (j14ff@quasi j1516@p (- j1509@lev '1))) (j14ff@quasi j1517@q j1509@lev)))) j1514@ls/false) ((lambda (j151a@t) ((lambda (j151c@ls/false) (if j151c@ls/false (apply (lambda (j151e@p j151f@q) (if (= j1509@lev '0) (j14f9@quasiappend j151e@p (j14ff@quasi j151f@q j1509@lev)) (j14f7@quasicons (j14f7@quasicons (j14d9@datum 'unquote-splicing) (j14ff@quasi j151e@p (- j1509@lev '1))) (j14ff@quasi j151f@q j1509@lev)))) j151c@ls/false) ((lambda (j1522@t) ((lambda (j1524@ls/false) (if j1524@ls/false (apply (lambda (j1526@p) (j14f7@quasicons (j14d9@datum 'quasiquote) (j14ff@quasi (list j1526@p) (+ j1509@lev '1)))) j1524@ls/false) ((lambda (j1528@t) ((lambda (j152a@ls/false) (if j152a@ls/false (apply (lambda (j152c@p j152d@q) (j14f7@quasicons (j14ff@quasi j152c@p j1509@lev) (j14ff@quasi j152d@q j1509@lev))) j152a@ls/false) ((lambda (j1530@t) ((lambda (j1532@ls/false) (if (and j1532@ls/false (apply (lambda (j1534@x) (not (jb26@stx? j1534@x))) j1532@ls/false)) (apply (lambda (j1536@x) (j14fb@quasivector (j14fd@vquasi j1536@x j1509@lev))) j1532@ls/false) ((lambda (j1538@t) ((lambda (j153a@ls/false) (if j153a@ls/false (apply (lambda (j153c@p) (list (jce9@scheme-stx 'quote) j153c@p)) j153a@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1538@t))) (jd5f@syntax-dispatch j1538@t 'any))) j1530@t))) (jd5f@syntax-dispatch j1530@t '#(vector each-any)))) j1528@t))) (jd5f@syntax-dispatch j1528@t '(any . any)))) j1522@t))) (jd5f@syntax-dispatch j1522@t '(#(scheme-id quasiquote) any)))) j151a@t))) (jd5f@syntax-dispatch j151a@t '((#(scheme-id unquote-splicing) . each-any) . any)))) j1512@t))) (jd5f@syntax-dispatch j1512@t '((#(scheme-id unquote) . each-any) . any)))) j150c@t))) (jd5f@syntax-dispatch j150c@t '(#(scheme-id unquote) any)))) j1508@p))) (lambda (j1500@x) ((lambda (j1502@t) ((lambda (j1504@ls/false) (if j1504@ls/false (apply (lambda (j1506@e) (j14ff@quasi j1506@e '0)) j1504@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1502@t))) (jd5f@syntax-dispatch j1502@t '(_ any)))) j1500@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! jd4f@quasisyntax-macro ((lambda () ((lambda (j15dd@quasi) (begin (set! j15dd@quasi (lambda (j15f8@p j15f9@lev) ((lambda (j15fc@t) ((lambda (j15fe@ls/false) (if j15fe@ls/false (apply (lambda (j1600@p) (if (= j15f9@lev '0) ((lambda (j1602@g) (values (list j1602@g) (list j1600@p) j1602@g)) (gensym)) (call-with-values (lambda () (j15dd@quasi j1600@p (- j15f9@lev '1))) (lambda (j160a@j1605 j160b@j1607 j160c@j1609) ((lambda (j1610@p j1611@rhs* j1612@lhs*) (values j1612@lhs* j1611@rhs* (list 'unsyntax j1610@p))) j160c@j1609 j160b@j1607 j160a@j1605))))) j15fe@ls/false) ((lambda (j1616@t) ((lambda (j1618@ls/false) (if (and j1618@ls/false (apply (lambda () (= j15f9@lev '0)) j1618@ls/false)) (apply (lambda () (je3f@syntax-violation '#f '"incorrect use of unsyntax" j15f8@p)) j1618@ls/false) ((lambda (j161a@t) ((lambda (j161c@ls/false) (if j161c@ls/false (apply (lambda (j161e@p* j161f@q) (call-with-values (lambda () (j15dd@quasi j161f@q j15f9@lev)) (lambda (j1628@j1623 j1629@j1625 j162a@j1627) ((lambda (j162e@q j162f@rhs* j1630@lhs*) (if (= j15f9@lev '0) ((lambda (j1634@g*) (values (append j1634@g* j1630@lhs*) (append j161e@p* j162f@rhs*) (append j1634@g* j162e@q))) (map (lambda (j1636@x) (gensym)) j161e@p*)) (call-with-values (lambda () (j15dd@quasi j161e@p* (- j15f9@lev '1))) (lambda (j163e@j1639 j163f@j163b j1640@j163d) ((lambda (j1644@p* j1645@rhs2* j1646@lhs2*) (values (append j1646@lhs2* j1630@lhs*) (append j1645@rhs2* j162f@rhs*) (cons (cons 'unsyntax j1644@p*) j162e@q))) j1640@j163d j163f@j163b j163e@j1639))))) j162a@j1627 j1629@j1625 j1628@j1623)))) j161c@ls/false) ((lambda (j164a@t) ((lambda (j164c@ls/false) (if j164c@ls/false (apply (lambda (j164e@p* j164f@q) (call-with-values (lambda () (j15dd@quasi j164f@q j15f9@lev)) (lambda (j1658@j1653 j1659@j1655 j165a@j1657) ((lambda (j165e@q j165f@rhs* j1660@lhs*) (if (= j15f9@lev '0) ((lambda (j1664@g*) (values (append (map (lambda (j1666@g) (cons j1666@g '(...))) j1664@g*) j1660@lhs*) (append j164e@p* j165f@rhs*) (append (apply append (map (lambda (j1668@g) (cons j1668@g '(...))) j1664@g*)) j165e@q))) (map (lambda (j166a@x) (gensym)) j164e@p*)) (call-with-values (lambda () (j15dd@quasi j164e@p* (- j15f9@lev '1))) (lambda (j1672@j166d j1673@j166f j1674@j1671) ((lambda (j1678@p* j1679@rhs2* j167a@lhs2*) (values (append j167a@lhs2* j1660@lhs*) (append j1679@rhs2* j165f@rhs*) (cons (cons 'unsyntax-splicing j1678@p*) j165e@q))) j1674@j1671 j1673@j166f j1672@j166d))))) j165a@j1657 j1659@j1655 j1658@j1653)))) j164c@ls/false) ((lambda (j167e@t) ((lambda (j1680@ls/false) (if (and j1680@ls/false (apply (lambda () (= j15f9@lev '0)) j1680@ls/false)) (apply (lambda () (je3f@syntax-violation '#f '"incorrect use of unsyntax-splicing" j15f8@p)) j1680@ls/false) ((lambda (j1682@t) ((lambda (j1684@ls/false) (if j1684@ls/false (apply (lambda (j1686@p) (call-with-values (lambda () (j15dd@quasi j1686@p (+ j15f9@lev '1))) (lambda (j168e@j1689 j168f@j168b j1690@j168d) ((lambda (j1694@p j1695@rhs* j1696@lhs*) (values j1696@lhs* j1695@rhs* (list 'quasisyntax j1694@p))) j1690@j168d j168f@j168b j168e@j1689)))) j1684@ls/false) ((lambda (j169a@t) ((lambda (j169c@ls/false) (if j169c@ls/false (apply (lambda (j169e@p j169f@q) (call-with-values (lambda () (j15dd@quasi j169e@p j15f9@lev)) (lambda (j16ae@j16a3 j16af@j16a5 j16b0@j16a7) (call-with-values (lambda () (j15dd@quasi j169f@q j15f9@lev)) (lambda (j16b4@j16a9 j16b5@j16ab j16b6@j16ad) ((lambda (j16ba@q j16bb@rhs2* j16bc@lhs2* j16bd@p j16be@rhs* j16bf@lhs*) (values (append j16bc@lhs2* j16bf@lhs*) (append j16bb@rhs2* j16be@rhs*) (cons j16bd@p j16ba@q))) j16b6@j16ad j16b5@j16ab j16b4@j16a9 j16b0@j16a7 j16af@j16a5 j16ae@j16a3)))))) j169c@ls/false) ((lambda (j16c6@t) ((lambda (j16c8@ls/false) (if j16c8@ls/false (apply (lambda (j16ca@x*) (call-with-values (lambda () (j15dd@quasi j16ca@x* j15f9@lev)) (lambda (j16d2@j16cd j16d3@j16cf j16d4@j16d1) ((lambda (j16d8@x* j16d9@rhs* j16da@lhs*) (values j16da@lhs* j16d9@rhs* (list->vector j16d8@x*))) j16d4@j16d1 j16d3@j16cf j16d2@j16cd)))) j16c8@ls/false) ((lambda (j16de@t) ((lambda (j16e0@ls/false) (if j16e0@ls/false (apply (lambda () (values '() '() j15f8@p)) j16e0@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j16de@t))) (jd5f@syntax-dispatch j16de@t '_))) j16c6@t))) (jd5f@syntax-dispatch j16c6@t '#(vector each-any)))) j169a@t))) (jd5f@syntax-dispatch j169a@t '(any . any)))) j1682@t))) (jd5f@syntax-dispatch j1682@t '(#(scheme-id quasisyntax) any)))) j167e@t))) (jd5f@syntax-dispatch j167e@t '#(scheme-id unsyntax-splicing)))) j164a@t))) (jd5f@syntax-dispatch j164a@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) j161a@t))) (jd5f@syntax-dispatch j161a@t '((#(scheme-id unsyntax) . each-any) . any)))) j1616@t))) (jd5f@syntax-dispatch j1616@t '#(scheme-id unsyntax)))) j15fc@t))) (jd5f@syntax-dispatch j15fc@t '(#(scheme-id unsyntax) any)))) j15f8@p))) (lambda (j15de@x) ((lambda (j15e0@t) ((lambda (j15e2@ls/false) (if j15e2@ls/false (apply (lambda (j15e4@e) (call-with-values (lambda () (j15dd@quasi j15e4@e '0)) (lambda (j15ec@j15e7 j15ed@j15e9 j15ee@j15eb) ((lambda (j15f2@v j15f3@rhs* j15f4@lhs*) (jd15@bless (list 'syntax-case (cons 'list j15f3@rhs*) '() (list j15f4@lhs* (list 'syntax j15f2@v))))) j15ee@j15eb j15ed@j15e9 j15ec@j15e7)))) j15e2@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j15e0@t))) (jd5f@syntax-dispatch j15e0@t '(_ any)))) j15de@x)))) '#f)))) (set! jd51@define-struct-macro (lambda (j16e2@stx) (je3f@syntax-violation '#f '"define-struct not supported" j16e2@stx))) (set! jd53@define-record-type-macro (lambda (j16e4@x) ((lambda (j16e7@id j16e9@get-record-name j16eb@get-record-constructor-name j16ed@get-record-predicate-name j16ef@get-clause j16f1@foo-rtd-code j16f3@parent-rtd-code j16f5@parent-rcd-code j16f7@foo-rcd-code j16f9@get-protocol-code j16fb@get-fields j16fd@get-mutator-indices j16ff@get-mutators j1701@get-accessors j1703@enumerate j1705@do-define-record j1707@verify-clauses) (begin (set! j16e7@id (lambda (j18da@ctxt . j18dc@str*) (je43@datum->syntax j18da@ctxt (string->symbol (apply string-append (map (lambda (j18de@x) (if (symbol? j18de@x) (symbol->string j18de@x) (if (string? j18de@x) j18de@x (assertion-violation 'define-record-type '"BUG")))) j18dc@str*)))))) (set! j16e9@get-record-name (lambda (j18c8@spec) ((lambda (j18ca@t) ((lambda (j18cc@ls/false) (if j18cc@ls/false (apply (lambda (j18ce@foo j18cf@make-foo j18d0@foo?) j18ce@foo) j18cc@ls/false) ((lambda (j18d4@t) ((lambda (j18d6@ls/false) (if j18d6@ls/false (apply (lambda (j18d8@foo) j18d8@foo) j18d6@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j18d4@t))) (jd5f@syntax-dispatch j18d4@t 'any))) j18ca@t))) (jd5f@syntax-dispatch j18ca@t '(any any any)))) j18c8@spec))) (set! j16eb@get-record-constructor-name (lambda (j18b4@spec) ((lambda (j18b6@t) ((lambda (j18b8@ls/false) (if j18b8@ls/false (apply (lambda (j18ba@foo j18bb@make-foo j18bc@foo?) j18bb@make-foo) j18b8@ls/false) ((lambda (j18c0@t) ((lambda (j18c2@ls/false) (if (and j18c2@ls/false (apply (lambda (j18c4@foo) (jb5a@id? j18c4@foo)) j18c2@ls/false)) (apply (lambda (j18c6@foo) (j16e7@id j18c6@foo '"make-" (jb6e@stx->datum j18c6@foo))) j18c2@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j18c0@t))) (jd5f@syntax-dispatch j18c0@t 'any))) j18b6@t))) (jd5f@syntax-dispatch j18b6@t '(any any any)))) j18b4@spec))) (set! j16ed@get-record-predicate-name (lambda (j18a0@spec) ((lambda (j18a2@t) ((lambda (j18a4@ls/false) (if j18a4@ls/false (apply (lambda (j18a6@foo j18a7@make-foo j18a8@foo?) j18a8@foo?) j18a4@ls/false) ((lambda (j18ac@t) ((lambda (j18ae@ls/false) (if (and j18ae@ls/false (apply (lambda (j18b0@foo) (jb5a@id? j18b0@foo)) j18ae@ls/false)) (apply (lambda (j18b2@foo) (j16e7@id j18b2@foo (jb6e@stx->datum j18b2@foo) '"?")) j18ae@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j18ac@t))) (jd5f@syntax-dispatch j18ac@t 'any))) j18a2@t))) (jd5f@syntax-dispatch j18a2@t '(any any any)))) j18a0@spec))) (set! j16ef@get-clause (lambda (j188e@id j188f@ls) ((lambda (j1892@t) ((lambda (j1894@ls/false) (if j1894@ls/false (apply (lambda () '#f) j1894@ls/false) ((lambda (j1896@t) ((lambda (j1898@ls/false) (if j1898@ls/false (apply (lambda (j189a@x j189b@rest j189c@ls) (if (jb60@free-id=? (jd15@bless j188e@id) j189a@x) (cons j189a@x j189b@rest) (j16ef@get-clause j188e@id j189c@ls))) j1898@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1896@t))) (jd5f@syntax-dispatch j1896@t '((any . any) . any)))) j1892@t))) (jd5f@syntax-dispatch j1892@t '()))) j188f@ls))) (set! j16f1@foo-rtd-code (lambda (j183c@name j183d@clause* j183e@parent-rtd-code) ((lambda (j1843@convert-field-spec*) (begin (set! j1843@convert-field-spec* (lambda (j1874@ls) (list->vector (map (lambda (j1876@x) ((lambda (j1878@t) ((lambda (j187a@ls/false) (if j187a@ls/false (apply (lambda (j187c@name j187d@rest) (list 'mutable j187c@name)) j187a@ls/false) ((lambda (j1880@t) ((lambda (j1882@ls/false) (if j1882@ls/false (apply (lambda (j1884@name j1885@rest) (list 'immutable j1884@name)) j1882@ls/false) ((lambda (j1888@t) ((lambda (j188a@ls/false) (if j188a@ls/false (apply (lambda (j188c@name) (list 'immutable j188c@name)) j188a@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1888@t))) (jd5f@syntax-dispatch j1888@t 'any))) j1880@t))) (jd5f@syntax-dispatch j1880@t '(#(scheme-id immutable) any . any)))) j1878@t))) (jd5f@syntax-dispatch j1878@t '(#(scheme-id mutable) any . any)))) j1876@x)) j1874@ls)))) ((lambda (j1844@uid-code j1845@sealed? j1846@opaque? j1847@fields) (jd15@bless (list 'make-record-type-descriptor (list 'quote j183c@name) j183e@parent-rtd-code j1844@uid-code j1845@sealed? j1846@opaque? j1847@fields))) ((lambda (j184c@t) ((lambda (j184e@ls/false) (if j184e@ls/false (apply (lambda () (list 'quote (gensym))) j184e@ls/false) ((lambda (j1850@t) ((lambda (j1852@ls/false) (if j1852@ls/false (apply (lambda (j1854@uid) (list 'quote j1854@uid)) j1852@ls/false) ((lambda (j1856@t) ((lambda (j1858@ls/false) (if j1858@ls/false (apply (lambda () '#f) j1858@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1856@t))) (jd5f@syntax-dispatch j1856@t '_))) j1850@t))) (jd5f@syntax-dispatch j1850@t '(_ any)))) j184c@t))) (jd5f@syntax-dispatch j184c@t '(_)))) (j16ef@get-clause 'nongenerative j183d@clause*)) ((lambda (j185a@t) ((lambda (j185c@ls/false) (if j185c@ls/false (apply (lambda () '#t) j185c@ls/false) ((lambda (j185e@t) ((lambda (j1860@ls/false) (if j1860@ls/false (apply (lambda () '#f) j1860@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j185e@t))) (jd5f@syntax-dispatch j185e@t '_))) j185a@t))) (jd5f@syntax-dispatch j185a@t '(_ #(atom #t))))) (j16ef@get-clause 'sealed j183d@clause*)) ((lambda (j1862@t) ((lambda (j1864@ls/false) (if j1864@ls/false (apply (lambda () '#t) j1864@ls/false) ((lambda (j1866@t) ((lambda (j1868@ls/false) (if j1868@ls/false (apply (lambda () '#f) j1868@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1866@t))) (jd5f@syntax-dispatch j1866@t '_))) j1862@t))) (jd5f@syntax-dispatch j1862@t '(_ #(atom #t))))) (j16ef@get-clause 'opaque j183d@clause*)) ((lambda (j186a@t) ((lambda (j186c@ls/false) (if j186c@ls/false (apply (lambda (j186e@field-spec*) (list 'quote (j1843@convert-field-spec* j186e@field-spec*))) j186c@ls/false) ((lambda (j1870@t) ((lambda (j1872@ls/false) (if j1872@ls/false (apply (lambda () ''#()) j1872@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1870@t))) (jd5f@syntax-dispatch j1870@t '_))) j186a@t))) (jd5f@syntax-dispatch j186a@t '(_ . each-any)))) (j16ef@get-clause 'fields j183d@clause*))))) '#f))) (set! j16f3@parent-rtd-code (lambda (j1824@clause*) ((lambda (j1826@t) ((lambda (j1828@ls/false) (if j1828@ls/false (apply (lambda (j182a@name) (list 'record-type-descriptor j182a@name)) j1828@ls/false) ((lambda (j182c@t) ((lambda (j182e@ls/false) (if j182e@ls/false (apply (lambda () ((lambda (j1830@t) ((lambda (j1832@ls/false) (if j1832@ls/false (apply (lambda (j1834@rtd j1835@rcd) j1834@rtd) j1832@ls/false) ((lambda (j1838@t) ((lambda (j183a@ls/false) (if j183a@ls/false (apply (lambda () '#f) j183a@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1838@t))) (jd5f@syntax-dispatch j1838@t '#(atom #f)))) j1830@t))) (jd5f@syntax-dispatch j1830@t '(_ any any)))) (j16ef@get-clause 'parent-rtd j1824@clause*))) j182e@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j182c@t))) (jd5f@syntax-dispatch j182c@t '#(atom #f)))) j1826@t))) (jd5f@syntax-dispatch j1826@t '(_ any)))) (j16ef@get-clause 'parent j1824@clause*)))) (set! j16f5@parent-rcd-code (lambda (j180c@clause*) ((lambda (j180e@t) ((lambda (j1810@ls/false) (if j1810@ls/false (apply (lambda (j1812@name) (list 'record-constructor-descriptor j1812@name)) j1810@ls/false) ((lambda (j1814@t) ((lambda (j1816@ls/false) (if j1816@ls/false (apply (lambda () ((lambda (j1818@t) ((lambda (j181a@ls/false) (if j181a@ls/false (apply (lambda (j181c@rtd j181d@rcd) j181d@rcd) j181a@ls/false) ((lambda (j1820@t) ((lambda (j1822@ls/false) (if j1822@ls/false (apply (lambda () '#f) j1822@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1820@t))) (jd5f@syntax-dispatch j1820@t '#(atom #f)))) j1818@t))) (jd5f@syntax-dispatch j1818@t '(_ any any)))) (j16ef@get-clause 'parent-rtd j180c@clause*))) j1816@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1814@t))) (jd5f@syntax-dispatch j1814@t '#(atom #f)))) j180e@t))) (jd5f@syntax-dispatch j180e@t '(_ any)))) (j16ef@get-clause 'parent j180c@clause*)))) (set! j16f7@foo-rcd-code (lambda (j1804@clause* j1805@foo-rtd j1806@protocol j1807@parent-rcd-code) (list 'make-record-constructor-descriptor j1805@foo-rtd j1807@parent-rcd-code j1806@protocol))) (set! j16f9@get-protocol-code (lambda (j17f8@clause*) ((lambda (j17fa@t) ((lambda (j17fc@ls/false) (if j17fc@ls/false (apply (lambda (j17fe@expr) j17fe@expr) j17fc@ls/false) ((lambda (j1800@t) ((lambda (j1802@ls/false) (if j1802@ls/false (apply (lambda () '#f) j1802@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1800@t))) (jd5f@syntax-dispatch j1800@t '_))) j17fa@t))) (jd5f@syntax-dispatch j17fa@t '(_ any)))) (j16ef@get-clause 'protocol j17f8@clause*)))) (set! j16fb@get-fields (lambda (j17e6@clause*) ((lambda (j17e8@t) ((lambda (j17ea@ls/false) (if j17ea@ls/false (apply (lambda () '()) j17ea@ls/false) ((lambda (j17ec@t) ((lambda (j17ee@ls/false) (if j17ee@ls/false (apply (lambda (j17f0@f*) j17f0@f*) j17ee@ls/false) ((lambda (j17f2@t) ((lambda (j17f4@ls/false) (if j17f4@ls/false (apply (lambda (j17f6@rest) (j16fb@get-fields j17f6@rest)) j17f4@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j17f2@t))) (jd5f@syntax-dispatch j17f2@t '(_ . any)))) j17ec@t))) (jd5f@syntax-dispatch j17ec@t '((#(scheme-id fields) . each-any) . _)))) j17e8@t))) (jd5f@syntax-dispatch j17e8@t '()))) j17e6@clause*))) (set! j16fd@get-mutator-indices (lambda (j17ce@fields) ((letrec ((j17d0@f (lambda (j17d2@fields j17d3@i) ((lambda (j17d6@t) ((lambda (j17d8@ls/false) (if j17d8@ls/false (apply (lambda () '()) j17d8@ls/false) ((lambda (j17da@t) ((lambda (j17dc@ls/false) (if j17dc@ls/false (apply (lambda (j17de@rest) (cons j17d3@i (j17d0@f j17de@rest (+ j17d3@i '1)))) j17dc@ls/false) ((lambda (j17e0@t) ((lambda (j17e2@ls/false) (if j17e2@ls/false (apply (lambda (j17e4@rest) (j17d0@f j17e4@rest (+ j17d3@i '1))) j17e2@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j17e0@t))) (jd5f@syntax-dispatch j17e0@t '(_ . any)))) j17da@t))) (jd5f@syntax-dispatch j17da@t '((#(scheme-id mutable) . _) . any)))) j17d6@t))) (jd5f@syntax-dispatch j17d6@t '()))) j17d2@fields)))) j17d0@f) j17ce@fields '0))) (set! j16ff@get-mutators (lambda (j17a4@foo j17a5@fields) ((lambda (j17a9@gen-name) (begin (set! j17a9@gen-name (lambda (j17cc@x) (je43@datum->syntax j17a4@foo (string->symbol (string-append (symbol->string (je45@syntax->datum j17a4@foo)) '"-" (symbol->string (je45@syntax->datum j17cc@x)) '"-set!"))))) ((letrec ((j17aa@f (lambda (j17ac@fields) ((lambda (j17ae@t) ((lambda (j17b0@ls/false) (if j17b0@ls/false (apply (lambda () '()) j17b0@ls/false) ((lambda (j17b2@t) ((lambda (j17b4@ls/false) (if j17b4@ls/false (apply (lambda (j17b6@name j17b7@accessor j17b8@mutator j17b9@rest) (cons j17b8@mutator (j17aa@f j17b9@rest))) j17b4@ls/false) ((lambda (j17be@t) ((lambda (j17c0@ls/false) (if j17c0@ls/false (apply (lambda (j17c2@name j17c3@rest) (cons (j17a9@gen-name j17c2@name) (j17aa@f j17c3@rest))) j17c0@ls/false) ((lambda (j17c6@t) ((lambda (j17c8@ls/false) (if j17c8@ls/false (apply (lambda (j17ca@rest) (j17aa@f j17ca@rest)) j17c8@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j17c6@t))) (jd5f@syntax-dispatch j17c6@t '(_ . any)))) j17be@t))) (jd5f@syntax-dispatch j17be@t '((#(scheme-id mutable) any) . any)))) j17b2@t))) (jd5f@syntax-dispatch j17b2@t '((#(scheme-id mutable) any any any) . any)))) j17ae@t))) (jd5f@syntax-dispatch j17ae@t '()))) j17ac@fields)))) j17aa@f) j17a5@fields))) '#f))) (set! j1701@get-accessors (lambda (j1760@foo j1761@fields) ((lambda (j1765@gen-name) (begin (set! j1765@gen-name (lambda (j17a2@x) (je43@datum->syntax j1760@foo (string->symbol (string-append (symbol->string (je45@syntax->datum j1760@foo)) '"-" (symbol->string (je45@syntax->datum j17a2@x))))))) (map (lambda (j1766@field) ((lambda (j1768@t) ((lambda (j176a@ls/false) (if (and j176a@ls/false (apply (lambda (j176c@name j176d@accessor j176e@mutator) (jb5a@id? j176d@accessor)) j176a@ls/false)) (apply (lambda (j1772@name j1773@accessor j1774@mutator) j1773@accessor) j176a@ls/false) ((lambda (j1778@t) ((lambda (j177a@ls/false) (if (and j177a@ls/false (apply (lambda (j177c@name j177d@accessor) (jb5a@id? j177d@accessor)) j177a@ls/false)) (apply (lambda (j1780@name j1781@accessor) j1781@accessor) j177a@ls/false) ((lambda (j1784@t) ((lambda (j1786@ls/false) (if (and j1786@ls/false (apply (lambda (j1788@name) (jb5a@id? j1788@name)) j1786@ls/false)) (apply (lambda (j178a@name) (j1765@gen-name j178a@name)) j1786@ls/false) ((lambda (j178c@t) ((lambda (j178e@ls/false) (if (and j178e@ls/false (apply (lambda (j1790@name) (jb5a@id? j1790@name)) j178e@ls/false)) (apply (lambda (j1792@name) (j1765@gen-name j1792@name)) j178e@ls/false) ((lambda (j1794@t) ((lambda (j1796@ls/false) (if (and j1796@ls/false (apply (lambda (j1798@name) (jb5a@id? j1798@name)) j1796@ls/false)) (apply (lambda (j179a@name) (j1765@gen-name j179a@name)) j1796@ls/false) ((lambda (j179c@t) ((lambda (j179e@ls/false) (if j179e@ls/false (apply (lambda (j17a0@others) (je3f@syntax-violation '#f '"invalid field spec" j1766@field)) j179e@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j179c@t))) (jd5f@syntax-dispatch j179c@t 'any))) j1794@t))) (jd5f@syntax-dispatch j1794@t 'any))) j178c@t))) (jd5f@syntax-dispatch j178c@t '(#(scheme-id immutable) any)))) j1784@t))) (jd5f@syntax-dispatch j1784@t '(#(scheme-id mutable) any)))) j1778@t))) (jd5f@syntax-dispatch j1778@t '(#(scheme-id immutable) any any)))) j1768@t))) (jd5f@syntax-dispatch j1768@t '(#(scheme-id mutable) any any any)))) j1766@field)) j1761@fields))) '#f))) (set! j1703@enumerate (lambda (j1758@ls) ((letrec ((j175a@f (lambda (j175c@ls j175d@i) (if (null? j175c@ls) '() (cons j175d@i (j175a@f (cdr j175c@ls) (+ j175d@i '1))))))) j175a@f) j1758@ls '0))) (set! j1705@do-define-record (lambda (j1730@namespec j1731@clause*) ((lambda (j1734@foo) ((lambda (j1736@foo-rtd) ((lambda (j1738@foo-rcd) ((lambda (j173a@protocol) ((lambda (j173c@make-foo) ((lambda (j173e@fields) ((lambda (j1740@idx*) ((lambda (j1742@foo-x*) ((lambda (j1744@set-foo-x!*) ((lambda (j1746@set-foo-idx*) ((lambda (j1748@foo?) ((lambda (j174a@foo-rtd-code) ((lambda (j174c@foo-rcd-code) ((lambda (j174e@protocol-code) ((lambda () (jd15@bless (cons 'begin (cons (list 'define j1736@foo-rtd j174a@foo-rtd-code) (cons (list 'define j173a@protocol j174e@protocol-code) (cons (list 'define j1738@foo-rcd j174c@foo-rcd-code) (cons (list 'define-syntax j1734@foo (list 'list ''$rtd (list 'syntax j1736@foo-rtd) (list 'syntax j1738@foo-rcd))) (cons (list 'define j1748@foo? (list 'record-predicate j1736@foo-rtd)) (cons (list 'define j173c@make-foo (list 'record-constructor j1738@foo-rcd)) (append (map (lambda (j1750@foo-x j1751@idx) (list 'define j1750@foo-x (list 'record-accessor j1736@foo-rtd j1751@idx))) j1742@foo-x* j1740@idx*) (map (lambda (j1754@set-foo-x! j1755@idx) (list 'define j1754@set-foo-x! (list 'record-mutator j1736@foo-rtd j1755@idx))) j1744@set-foo-x!* j1746@set-foo-idx*))))))))))))) (j16f9@get-protocol-code j1731@clause*))) (j16f7@foo-rcd-code j1731@clause* j1736@foo-rtd j173a@protocol (j16f5@parent-rcd-code j1731@clause*)))) (j16f1@foo-rtd-code j1734@foo j1731@clause* (j16f3@parent-rtd-code j1731@clause*)))) (j16ed@get-record-predicate-name j1730@namespec))) (j16fd@get-mutator-indices j173e@fields))) (j16ff@get-mutators j1734@foo j173e@fields))) (j1701@get-accessors j1734@foo j173e@fields))) (j1703@enumerate j173e@fields))) (j16fb@get-fields j1731@clause*))) (j16eb@get-record-constructor-name j1730@namespec))) (gensym))) (gensym))) (gensym))) (j16e9@get-record-name j1730@namespec)))) (set! j1707@verify-clauses (lambda (j1710@x j1711@cls*) ((lambda (j1715@valid-kwds j1717@free-id-member?) (begin (set! j1715@valid-kwds (map jd15@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! j1717@free-id-member? (lambda (j172c@x j172d@ls) (and (pair? j172d@ls) (or (jb60@free-id=? j172c@x (car j172d@ls)) (j1717@free-id-member? j172c@x (cdr j172d@ls)))))) ((letrec ((j1718@f (lambda (j171a@cls* j171b@seen*) (if (not (null? j171a@cls*)) ((lambda (j171e@t) ((lambda (j1720@ls/false) (if j1720@ls/false (apply (lambda (j1722@kwd j1723@rest) (if (or (not (jb5a@id? j1722@kwd)) (not (j1717@free-id-member? j1722@kwd j1715@valid-kwds))) (je3f@syntax-violation '#f '"not a valid define-record-type keyword" j1722@kwd) (if (jb66@bound-id-member? j1722@kwd j171b@seen*) (je3f@syntax-violation '#f '"duplicate use of keyword " j1710@x j1722@kwd) (j1718@f (cdr j171a@cls*) (cons j1722@kwd j171b@seen*))))) j1720@ls/false) ((lambda (j1726@t) ((lambda (j1728@ls/false) (if j1728@ls/false (apply (lambda (j172a@cls) (je3f@syntax-violation '#f '"malformed define-record-type clause" j172a@cls)) j1728@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1726@t))) (jd5f@syntax-dispatch j1726@t 'any))) j171e@t))) (jd5f@syntax-dispatch j171e@t '(any . any)))) (car j171a@cls*)) (void))))) j1718@f) j1711@cls* '()))) '#f '#f))) ((lambda (j1708@t) ((lambda (j170a@ls/false) (if j170a@ls/false (apply (lambda (j170c@namespec j170d@clause*) (begin (j1707@verify-clauses j16e4@x j170d@clause*) (j1705@do-define-record j170c@namespec j170d@clause*))) j170a@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1708@t))) (jd5f@syntax-dispatch j1708@t '(_ any . each-any)))) j16e4@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! jd55@define-condition-type-macro (lambda (j18e0@x) ((lambda (j18e3@mkname) (begin (set! j18e3@mkname (lambda (j1910@name j1911@suffix) (je43@datum->syntax j1910@name (string->symbol (string-append (symbol->string (je45@syntax->datum j1910@name)) j1911@suffix))))) ((lambda (j18e4@t) ((lambda (j18e6@ls/false) (if (and j18e6@ls/false (apply (lambda (j18e8@ctxt j18e9@name j18ea@super j18eb@constructor j18ec@predicate j18ed@field* j18ee@accessor*) (and (jb5a@id? j18e9@name) (jb5a@id? j18ea@super) (jb5a@id? j18eb@constructor) (jb5a@id? j18ec@predicate) (for-all jb5a@id? j18ed@field*) (for-all jb5a@id? j18ee@accessor*))) j18e6@ls/false)) (apply (lambda (j18f6@ctxt j18f7@name j18f8@super j18f9@constructor j18fa@predicate j18fb@field* j18fc@accessor*) ((lambda (j1904@aux-accessor*) (jd15@bless (cons 'begin (cons (cons 'define-record-type (cons (list j18f7@name j18f9@constructor (gensym)) (cons (list 'parent j18f8@super) (cons (cons 'fields (map (lambda (j1906@field j1907@aux) (list 'immutable j1906@field j1907@aux)) j18fb@field* j1904@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define j18fa@predicate (list 'condition-predicate (list 'record-type-descriptor j18f7@name))) (map (lambda (j190a@accessor j190b@aux) (list 'define j190a@accessor (list 'condition-accessor (list 'record-type-descriptor j18f7@name) j190b@aux))) j18fc@accessor* j1904@aux-accessor*)))))) (map (lambda (j190e@x) (gensym)) j18fc@accessor*))) j18e6@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j18e4@t))) (jd5f@syntax-dispatch j18e4@t '(any any any any any . #(each (any any)))))) j18e0@x))) '#f))) (set! jd57@incorrect-usage-macro (lambda (j1914@e) (je3f@syntax-violation '#f '"incorrect usage of auxiliary keyword" j1914@e))) (set! jd59@parameterize-macro (lambda (j1916@e) ((lambda (j1918@t) ((lambda (j191a@ls/false) (if j191a@ls/false (apply (lambda (j191c@b j191d@b*) (jd15@bless (cons 'let (cons '() (cons j191c@b j191d@b*))))) j191a@ls/false) ((lambda (j1920@t) ((lambda (j1922@ls/false) (if j1922@ls/false (apply (lambda (j1924@olhs* j1925@orhs* j1926@b j1927@b*) ((lambda (j192c@lhs* j192d@rhs*) (jd15@bless (cons (list 'lambda (append j192c@lhs* j192d@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (j1930@lhs j1931@rhs) (list 'let (list (list 't (list j1930@lhs))) (list j1930@lhs j1931@rhs) (cons 'set! (cons j1931@rhs '(t))))) j192c@lhs* j192d@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons j1926@b j1927@b*))) '(swap)))))) (append j1924@olhs* j1925@orhs*)))) (je2d@generate-temporaries j1924@olhs*) (je2d@generate-temporaries j1925@orhs*))) j1922@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1920@t))) (jd5f@syntax-dispatch j1920@t '(_ #(each (any any)) any . each-any)))) j1918@t))) (jd5f@syntax-dispatch j1918@t '(_ () any . each-any)))) j1916@e))) (set! jd5b@foreign-call-transformer (lambda (j1934@e j1935@r j1936@mr) ((lambda (j193a@t) ((lambda (j193c@ls/false) (if j193c@ls/false (apply (lambda (j193e@name j193f@arg*) (cons 'foreign-call (cons (jd81@chi-expr j193e@name j1935@r j1936@mr) (jd7d@chi-expr* j193f@arg* j1935@r j1936@mr)))) j193c@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j193a@t))) (jd5f@syntax-dispatch j193a@t '(_ any . each-any)))) j1934@e))) (set! jd5d@convert-pattern (lambda (j1942@pattern j1943@keys) ((lambda (j1947@cvt* j1949@cvt) (begin (set! j1947@cvt* (lambda (j19e6@p* j19e7@n j19e8@ids) (if (null? j19e6@p*) (values '() j19e8@ids) (call-with-values (lambda () (j1947@cvt* (cdr j19e6@p*) j19e7@n j19e8@ids)) (lambda (j19f0@j19ed j19f1@j19ef) ((lambda (j19f4@ids j19f5@y) (call-with-values (lambda () (j1949@cvt (car j19e6@p*) j19e7@n j19f4@ids)) (lambda (j19fc@j19f9 j19fd@j19fb) ((lambda (j1a00@ids j1a01@x) (values (cons j1a01@x j19f5@y) j1a00@ids)) j19fd@j19fb j19fc@j19f9)))) j19f1@j19ef j19f0@j19ed)))))) (set! j1949@cvt (lambda (j194a@p j194b@n j194c@ids) ((lambda (j1950@t) ((lambda (j1952@ls/false) (if (and j1952@ls/false (apply (lambda (j1954@id) (jb5a@id? j1954@id)) j1952@ls/false)) (apply (lambda (j1956@id) (if (jb66@bound-id-member? j194a@p j1943@keys) (values (vector 'free-id j194a@p) j194c@ids) (if (jb60@free-id=? j194a@p (jce9@scheme-stx '_)) (values '_ j194c@ids) (values 'any (cons (cons j194a@p j194b@n) j194c@ids))))) j1952@ls/false) ((lambda (j1958@t) ((lambda (j195a@ls/false) (if (and j195a@ls/false (apply (lambda (j195c@p j195d@dots) (jd61@ellipsis? j195d@dots)) j195a@ls/false)) (apply (lambda (j1960@p j1961@dots) (call-with-values (lambda () (j1949@cvt j1960@p (+ j194b@n '1) j194c@ids)) (lambda (j1968@j1965 j1969@j1967) ((lambda (j196c@ids j196d@p) (values (if (eq? j196d@p 'any) 'each-any (vector 'each j196d@p)) j196c@ids)) j1969@j1967 j1968@j1965)))) j195a@ls/false) ((lambda (j1970@t) ((lambda (j1972@ls/false) (if (and j1972@ls/false (apply (lambda (j1974@x j1975@dots j1976@ys j1977@z) (jd61@ellipsis? j1975@dots)) j1972@ls/false)) (apply (lambda (j197c@x j197d@dots j197e@ys j197f@z) (call-with-values (lambda () (j1949@cvt j197f@z j194b@n j194c@ids)) (lambda (j1988@j1985 j1989@j1987) ((lambda (j198c@ids j198d@z) (call-with-values (lambda () (j1947@cvt* j197e@ys j194b@n j198c@ids)) (lambda (j1994@j1991 j1995@j1993) ((lambda (j1998@ids j1999@ys) (call-with-values (lambda () (j1949@cvt j197c@x (+ j194b@n '1) j1998@ids)) (lambda (j19a0@j199d j19a1@j199f) ((lambda (j19a4@ids j19a5@x) (values (vector 'each+ j19a5@x (reverse j1999@ys) j198d@z) j19a4@ids)) j19a1@j199f j19a0@j199d)))) j1995@j1993 j1994@j1991)))) j1989@j1987 j1988@j1985)))) j1972@ls/false) ((lambda (j19a8@t) ((lambda (j19aa@ls/false) (if j19aa@ls/false (apply (lambda (j19ac@x j19ad@y) (call-with-values (lambda () (j1949@cvt j19ad@y j194b@n j194c@ids)) (lambda (j19b4@j19b1 j19b5@j19b3) ((lambda (j19b8@ids j19b9@y) (call-with-values (lambda () (j1949@cvt j19ac@x j194b@n j19b8@ids)) (lambda (j19c0@j19bd j19c1@j19bf) ((lambda (j19c4@ids j19c5@x) (values (cons j19c5@x j19b9@y) j19c4@ids)) j19c1@j19bf j19c0@j19bd)))) j19b5@j19b3 j19b4@j19b1)))) j19aa@ls/false) ((lambda (j19c8@t) ((lambda (j19ca@ls/false) (if j19ca@ls/false (apply (lambda () (values '() j194c@ids)) j19ca@ls/false) ((lambda (j19cc@t) ((lambda (j19ce@ls/false) (if (and j19ce@ls/false (apply (lambda (j19d0@p) (not (jb26@stx? j19d0@p))) j19ce@ls/false)) (apply (lambda (j19d2@p) (call-with-values (lambda () (j1949@cvt j19d2@p j194b@n j194c@ids)) (lambda (j19d8@j19d5 j19d9@j19d7) ((lambda (j19dc@ids j19dd@p) (values (vector 'vector j19dd@p) j19dc@ids)) j19d9@j19d7 j19d8@j19d5)))) j19ce@ls/false) ((lambda (j19e0@t) ((lambda (j19e2@ls/false) (if j19e2@ls/false (apply (lambda (j19e4@datum) (values (vector 'atom (jb6e@stx->datum j19e4@datum)) j194c@ids)) j19e2@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j19e0@t))) (jd5f@syntax-dispatch j19e0@t 'any))) j19cc@t))) (jd5f@syntax-dispatch j19cc@t '#(vector each-any)))) j19c8@t))) (jd5f@syntax-dispatch j19c8@t '()))) j19a8@t))) (jd5f@syntax-dispatch j19a8@t '(any . any)))) j1970@t))) (jd5f@syntax-dispatch j1970@t '(any any . #(each+ any () any))))) j1958@t))) (jd5f@syntax-dispatch j1958@t '(any any)))) j1950@t))) (jd5f@syntax-dispatch j1950@t 'any))) j194a@p))) (j1949@cvt j1942@pattern '0 '()))) '#f '#f))) (set! jd5f@syntax-dispatch ((lambda () ((lambda (j1a05@stx^ j1a07@match-each j1a09@match-each+ j1a0b@match-each-any j1a0d@match-empty j1a0f@combine j1a11@match* j1a13@match) (begin (set! j1a05@stx^ (lambda (j1ae0@e j1ae1@m* j1ae2@s* j1ae3@ae*) (if (and (null? j1ae1@m*) (null? j1ae2@s*) (null? j1ae3@ae*)) j1ae0@e (jb42@mkstx j1ae0@e j1ae1@m* j1ae2@s* j1ae3@ae*)))) (set! j1a07@match-each (lambda (j1ac0@e j1ac1@p j1ac2@m* j1ac3@s* j1ac4@ae*) (if (pair? j1ac0@e) ((lambda (j1aca@first) (and j1aca@first ((lambda (j1acc@rest) (and j1acc@rest (cons j1aca@first j1acc@rest))) (j1a07@match-each (cdr j1ac0@e) j1ac1@p j1ac2@m* j1ac3@s* j1ac4@ae*)))) (j1a13@match (car j1ac0@e) j1ac1@p j1ac2@m* j1ac3@s* j1ac4@ae* '())) (if (null? j1ac0@e) '() (if (jb26@stx? j1ac0@e) (and (not (jae0@top-marked? j1ac2@m*)) (call-with-values (lambda () (join-wraps j1ac2@m* j1ac3@s* j1ac4@ae* j1ac0@e)) (lambda (j1ad4@j1acf j1ad5@j1ad1 j1ad6@j1ad3) ((lambda (j1ada@ae* j1adb@s* j1adc@m*) (j1a07@match-each (jb28@stx-expr j1ac0@e) j1ac1@p j1adc@m* j1adb@s* j1ada@ae*)) j1ad6@j1ad3 j1ad5@j1ad1 j1ad4@j1acf)))) (if (j6ae@j582@annotation? j1ac0@e) (j1a07@match-each (j6b0@j586@annotation-expression j1ac0@e) j1ac1@p j1ac2@m* j1ac3@s* j1ac4@ae*) '#f)))))) (set! j1a09@match-each+ (lambda (j1a80@e j1a81@x-pat j1a82@y-pat j1a83@z-pat j1a84@m* j1a85@s* j1a86@ae* j1a87@r) ((letrec ((j1a90@f (lambda (j1a92@e j1a93@m* j1a94@s* j1a95@ae*) (if (pair? j1a92@e) (call-with-values (lambda () (j1a90@f (cdr j1a92@e) j1a93@m* j1a94@s* j1a95@ae*)) (lambda (j1aa0@j1a9b j1aa1@j1a9d j1aa2@j1a9f) ((lambda (j1aa6@r j1aa7@y-pat j1aa8@xr*) (if j1aa6@r (if (null? j1aa7@y-pat) ((lambda (j1aac@xr) (if j1aac@xr (values (cons j1aac@xr j1aa8@xr*) j1aa7@y-pat j1aa6@r) (values '#f '#f '#f))) (j1a13@match (car j1a92@e) j1a81@x-pat j1a93@m* j1a94@s* j1a95@ae* '())) (values '() (cdr j1aa7@y-pat) (j1a13@match (car j1a92@e) (car j1aa7@y-pat) j1a93@m* j1a94@s* j1a95@ae* j1aa6@r))) (values '#f '#f '#f))) j1aa2@j1a9f j1aa1@j1a9d j1aa0@j1a9b))) (if (jb26@stx? j1a92@e) (if (jae0@top-marked? j1a93@m*) (values '() j1a82@y-pat (j1a13@match j1a92@e j1a83@z-pat j1a93@m* j1a94@s* j1a95@ae* j1a87@r)) (call-with-values (lambda () (join-wraps j1a93@m* j1a94@s* j1a95@ae* j1a92@e)) (lambda (j1ab4@j1aaf j1ab5@j1ab1 j1ab6@j1ab3) ((lambda (j1aba@ae* j1abb@s* j1abc@m*) (j1a90@f (jb28@stx-expr j1a92@e) j1abc@m* j1abb@s* j1aba@ae*)) j1ab6@j1ab3 j1ab5@j1ab1 j1ab4@j1aaf)))) (if (j6ae@j582@annotation? j1a92@e) (j1a90@f (j6b0@j586@annotation-expression j1a92@e) j1a93@m* j1a94@s* j1a95@ae*) (values '() j1a82@y-pat (j1a13@match j1a92@e j1a83@z-pat j1a93@m* j1a94@s* j1a95@ae* j1a87@r)))))))) j1a90@f) j1a80@e j1a84@m* j1a85@s* j1a86@ae*))) (set! j1a0b@match-each-any (lambda (j1a64@e j1a65@m* j1a66@s* j1a67@ae*) (if (pair? j1a64@e) ((lambda (j1a6c@l) (and j1a6c@l (cons (j1a05@stx^ (car j1a64@e) j1a65@m* j1a66@s* j1a67@ae*) j1a6c@l))) (j1a0b@match-each-any (cdr j1a64@e) j1a65@m* j1a66@s* j1a67@ae*)) (if (null? j1a64@e) '() (if (jb26@stx? j1a64@e) (and (not (jae0@top-marked? j1a65@m*)) (call-with-values (lambda () (join-wraps j1a65@m* j1a66@s* j1a67@ae* j1a64@e)) (lambda (j1a74@j1a6f j1a75@j1a71 j1a76@j1a73) ((lambda (j1a7a@ae* j1a7b@s* j1a7c@m*) (j1a0b@match-each-any (jb28@stx-expr j1a64@e) j1a7c@m* j1a7b@s* j1a7a@ae*)) j1a76@j1a73 j1a75@j1a71 j1a74@j1a6f)))) (if (j6ae@j582@annotation? j1a64@e) (j1a0b@match-each-any (j6b0@j586@annotation-expression j1a64@e) j1a65@m* j1a66@s* j1a67@ae*) '#f)))))) (set! j1a0d@match-empty (lambda (j1a5e@p j1a5f@r) (if (null? j1a5e@p) j1a5f@r (if (eq? j1a5e@p '_) j1a5f@r (if (eq? j1a5e@p 'any) (cons '() j1a5f@r) (if (pair? j1a5e@p) (j1a0d@match-empty (car j1a5e@p) (j1a0d@match-empty (cdr j1a5e@p) j1a5f@r)) (if (eq? j1a5e@p 'each-any) (cons '() j1a5f@r) ((lambda (j1a62@t) (if (memv j1a62@t '(each)) (j1a0d@match-empty (vector-ref j1a5e@p '1) j1a5f@r) (if (memv j1a62@t '(each+)) (j1a0d@match-empty (vector-ref j1a5e@p '1) (j1a0d@match-empty (reverse (vector-ref j1a5e@p '2)) (j1a0d@match-empty (vector-ref j1a5e@p '3) j1a5f@r))) (if (memv j1a62@t '(free-id atom)) j1a5f@r (if (memv j1a62@t '(scheme-id atom)) j1a5f@r (if (memv j1a62@t '(vector)) (j1a0d@match-empty (vector-ref j1a5e@p '1) j1a5f@r) (assertion-violation 'syntax-dispatch '"invalid pattern" j1a5e@p))))))) (vector-ref j1a5e@p '0))))))))) (set! j1a0f@combine (lambda (j1a5a@r* j1a5b@r) (if (null? (car j1a5a@r*)) j1a5b@r (cons (map car j1a5a@r*) (j1a0f@combine (map cdr j1a5a@r*) j1a5b@r))))) (set! j1a11@match* (lambda (j1a36@e j1a37@p j1a38@m* j1a39@s* j1a3a@ae* j1a3b@r) (if (null? j1a37@p) (and (null? j1a36@e) j1a3b@r) (if (pair? j1a37@p) (and (pair? j1a36@e) (j1a13@match (car j1a36@e) (car j1a37@p) j1a38@m* j1a39@s* j1a3a@ae* (j1a13@match (cdr j1a36@e) (cdr j1a37@p) j1a38@m* j1a39@s* j1a3a@ae* j1a3b@r))) (if (eq? j1a37@p 'each-any) ((lambda (j1a42@l) (and j1a42@l (cons j1a42@l j1a3b@r))) (j1a0b@match-each-any j1a36@e j1a38@m* j1a39@s* j1a3a@ae*)) ((lambda (j1a44@t) (if (memv j1a44@t '(each)) (if (null? j1a36@e) (j1a0d@match-empty (vector-ref j1a37@p '1) j1a3b@r) ((lambda (j1a46@r*) (and j1a46@r* (j1a0f@combine j1a46@r* j1a3b@r))) (j1a07@match-each j1a36@e (vector-ref j1a37@p '1) j1a38@m* j1a39@s* j1a3a@ae*))) (if (memv j1a44@t '(free-id)) (and (symbol? j1a36@e) (jae0@top-marked? j1a38@m*) (jb60@free-id=? (j1a05@stx^ j1a36@e j1a38@m* j1a39@s* j1a3a@ae*) (vector-ref j1a37@p '1)) j1a3b@r) (if (memv j1a44@t '(scheme-id)) (and (symbol? j1a36@e) (jae0@top-marked? j1a38@m*) (jb60@free-id=? (j1a05@stx^ j1a36@e j1a38@m* j1a39@s* j1a3a@ae*) (jce9@scheme-stx (vector-ref j1a37@p '1))) j1a3b@r) (if (memv j1a44@t '(each+)) (call-with-values (lambda () (j1a09@match-each+ j1a36@e (vector-ref j1a37@p '1) (vector-ref j1a37@p '2) (vector-ref j1a37@p '3) j1a38@m* j1a39@s* j1a3a@ae* j1a3b@r)) (lambda (j1a4e@j1a49 j1a4f@j1a4b j1a50@j1a4d) ((lambda (j1a54@r j1a55@y-pat j1a56@xr*) (and j1a54@r (null? j1a55@y-pat) (if (null? j1a56@xr*) (j1a0d@match-empty (vector-ref j1a37@p '1) j1a54@r) (j1a0f@combine j1a56@xr* j1a54@r)))) j1a50@j1a4d j1a4f@j1a4b j1a4e@j1a49))) (if (memv j1a44@t '(atom)) (and (fast-equal? (vector-ref j1a37@p '1) (jb6c@strip j1a36@e j1a38@m*)) j1a3b@r) (if (memv j1a44@t '(vector)) (and (vector? j1a36@e) (j1a13@match (vector->list j1a36@e) (vector-ref j1a37@p '1) j1a38@m* j1a39@s* j1a3a@ae* j1a3b@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" j1a37@p)))))))) (vector-ref j1a37@p '0))))))) (set! j1a13@match (lambda (j1a18@e j1a19@p j1a1a@m* j1a1b@s* j1a1c@ae* j1a1d@r) (if (not j1a1d@r) '#f (if (eq? j1a19@p '_) j1a1d@r (if (eq? j1a19@p 'any) (cons (j1a05@stx^ j1a18@e j1a1a@m* j1a1b@s* j1a1c@ae*) j1a1d@r) (if (jb26@stx? j1a18@e) (and (not (jae0@top-marked? j1a1a@m*)) (call-with-values (lambda () (join-wraps j1a1a@m* j1a1b@s* j1a1c@ae* j1a18@e)) (lambda (j1a2a@j1a25 j1a2b@j1a27 j1a2c@j1a29) ((lambda (j1a30@ae* j1a31@s* j1a32@m*) (j1a13@match (jb28@stx-expr j1a18@e) j1a19@p j1a32@m* j1a31@s* j1a30@ae* j1a1d@r)) j1a2c@j1a29 j1a2b@j1a27 j1a2a@j1a25)))) (if (j6ae@j582@annotation? j1a18@e) (j1a13@match (j6b0@j586@annotation-expression j1a18@e) j1a19@p j1a1a@m* j1a1b@s* j1a1c@ae* j1a1d@r) (j1a11@match* j1a18@e j1a19@p j1a1a@m* j1a1b@s* j1a1c@ae* j1a1d@r)))))))) (lambda (j1a14@e j1a15@p) (j1a13@match j1a14@e j1a15@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! jd61@ellipsis? (lambda (j1ae8@x) (and (jb5a@id? j1ae8@x) (jb60@free-id=? j1ae8@x (jce9@scheme-stx '...))))) (set! jd63@underscore? (lambda (j1aea@x) (and (jb5a@id? j1aea@x) (jb60@free-id=? j1aea@x (jce9@scheme-stx '_))))) (set! jd65@verify-literals (lambda (j1aec@lits j1aed@expr) (for-each (lambda (j1af0@x) (if (or (not (jb5a@id? j1af0@x)) (jd61@ellipsis? j1af0@x) (jd63@underscore? j1af0@x)) (je3f@syntax-violation '#f '"invalid literal" j1aed@expr j1af0@x) (void))) j1aec@lits))) (set! jd67@syntax-case-transformer ((lambda () ((lambda (j1af3@build-dispatch-call j1af5@invalid-ids-error j1af7@gen-clause j1af9@gen-syntax-case) (begin (set! j1af3@build-dispatch-call (lambda (j1b64@pvars j1b65@expr j1b66@y j1b67@r j1b68@mr) ((lambda (j1b6e@ids j1b6f@levels) ((lambda (j1b72@labels j1b73@new-vars) ((lambda (j1b76@body) (list '(primitive apply) (jabe@j9fe@build-lambda '#f j1b73@new-vars j1b76@body) j1b66@y)) (jd81@chi-expr (jb46@add-subst (jb1a@make-full-rib j1b6e@ids j1b72@labels) j1b65@expr) (append (map (lambda (j1b78@label j1b79@var j1b7a@level) (cons j1b78@label (jb74@make-binding 'syntax (cons j1b79@var j1b7a@level)))) j1b72@labels j1b73@new-vars (map cdr j1b64@pvars)) j1b67@r) j1b68@mr))) (map jae6@gen-label j1b6e@ids) (map jae2@gen-lexical j1b6e@ids))) (map car j1b64@pvars) (map cdr j1b64@pvars)))) (set! j1af5@invalid-ids-error (lambda (j1b58@id* j1b59@e j1b5a@class) ((letrec ((j1b5e@find (lambda (j1b60@id* j1b61@ok*) (if (null? j1b60@id*) (je3f@syntax-violation '#f '"invalid syntax" j1b59@e) (if (jb5a@id? (car j1b60@id*)) (if (jb66@bound-id-member? (car j1b60@id*) j1b61@ok*) (je3b@syntax-error (car j1b60@id*) '"duplicate " j1b5a@class) (j1b5e@find (cdr j1b60@id*) (cons (car j1b60@id*) j1b61@ok*))) (je3b@syntax-error (car j1b60@id*) '"invalid " j1b5a@class)))))) j1b5e@find) j1b58@id* '()))) (set! j1af7@gen-clause (lambda (j1b30@x j1b31@keys j1b32@clauses j1b33@r j1b34@mr j1b35@pat j1b36@fender j1b37@expr) (call-with-values (lambda () (jd5d@convert-pattern j1b35@pat j1b31@keys)) (lambda (j1b44@j1b41 j1b45@j1b43) ((lambda (j1b48@pvars j1b49@p) (if (not (jb64@distinct-bound-ids? (map car j1b48@pvars))) (j1af5@invalid-ids-error (map car j1b48@pvars) j1b35@pat '"pattern variable") (if (not (for-all (lambda (j1b4c@x) (not (jd61@ellipsis? (car j1b4c@x)))) j1b48@pvars)) (je3f@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" j1b35@pat) ((lambda (j1b4e@y) ((lambda (j1b50@test) ((lambda (j1b52@conseq) ((lambda (j1b54@altern) (list (jabe@j9fe@build-lambda '#f (list j1b4e@y) (list 'if j1b50@test j1b52@conseq j1b54@altern)) (list '(primitive syntax-dispatch) j1b30@x (list 'quote j1b49@p)))) (j1af9@gen-syntax-case j1b30@x j1b31@keys j1b32@clauses j1b33@r j1b34@mr))) (j1af3@build-dispatch-call j1b48@pvars j1b37@expr j1b4e@y j1b33@r j1b34@mr))) (if (eq? j1b36@fender '#t) j1b4e@y ((lambda (j1b56@call) (list 'if j1b4e@y j1b56@call (list 'quote '#f))) (j1af3@build-dispatch-call j1b48@pvars j1b36@fender j1b4e@y j1b33@r j1b34@mr))))) (jae2@gen-lexical 'tmp))))) j1b45@j1b43 j1b44@j1b41))))) (set! j1af9@gen-syntax-case (lambda (j1b0e@x j1b0f@keys j1b10@clauses j1b11@r j1b12@mr) (if (null? j1b10@clauses) (list '(primitive syntax-error) j1b0e@x) ((lambda (j1b18@t) ((lambda (j1b1a@ls/false) (if j1b1a@ls/false (apply (lambda (j1b1c@pat j1b1d@expr) (if (and (jb5a@id? j1b1c@pat) (not (jb66@bound-id-member? j1b1c@pat j1b0f@keys)) (not (jd61@ellipsis? j1b1c@pat))) (if (jb60@free-id=? j1b1c@pat (jce9@scheme-stx '_)) (jd81@chi-expr j1b1d@expr j1b11@r j1b12@mr) ((lambda (j1b20@lab j1b21@lex) ((lambda (j1b24@body) (list (jabe@j9fe@build-lambda '#f (list j1b21@lex) j1b24@body) j1b0e@x)) (jd81@chi-expr (jb46@add-subst (jb1a@make-full-rib (list j1b1c@pat) (list j1b20@lab)) j1b1d@expr) (cons (cons j1b20@lab (jb74@make-binding 'syntax (cons j1b21@lex '0))) j1b11@r) j1b12@mr))) (jae6@gen-label j1b1c@pat) (jae2@gen-lexical j1b1c@pat))) (j1af7@gen-clause j1b0e@x j1b0f@keys (cdr j1b10@clauses) j1b11@r j1b12@mr j1b1c@pat '#t j1b1d@expr))) j1b1a@ls/false) ((lambda (j1b26@t) ((lambda (j1b28@ls/false) (if j1b28@ls/false (apply (lambda (j1b2a@pat j1b2b@fender j1b2c@expr) (j1af7@gen-clause j1b0e@x j1b0f@keys (cdr j1b10@clauses) j1b11@r j1b12@mr j1b2a@pat j1b2b@fender j1b2c@expr)) j1b28@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1b26@t))) (jd5f@syntax-dispatch j1b26@t '(any any any)))) j1b18@t))) (jd5f@syntax-dispatch j1b18@t '(any any)))) (car j1b10@clauses))))) (lambda (j1afa@e j1afb@r j1afc@mr) ((lambda (j1b00@t) ((lambda (j1b02@ls/false) (if j1b02@ls/false (apply (lambda (j1b04@expr j1b05@keys j1b06@clauses) (begin (jd65@verify-literals j1b05@keys j1afa@e) ((lambda (j1b0a@x) ((lambda (j1b0c@body) (list (jabe@j9fe@build-lambda '#f (list j1b0a@x) j1b0c@body) (jd81@chi-expr j1b04@expr j1afb@r j1afc@mr))) (j1af9@gen-syntax-case j1b0a@x j1b05@keys j1b06@clauses j1afb@r j1afc@mr))) (jae2@gen-lexical 'tmp)))) j1b02@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1b00@t))) (jd5f@syntax-dispatch j1b00@t '(_ any each-any . each-any)))) j1afa@e)))) '#f '#f '#f '#f)))) (set! jd69@ellipsis-map (lambda (j1b7e@proc j1b7f@ls . j1b82@ls*) ((lambda (j1b85@who) (begin (set! j1b85@who '...) (begin (if (not (list? j1b7f@ls)) (assertion-violation j1b85@who '"not a list" j1b7f@ls) (void)) (if (not (null? j1b82@ls*)) ((lambda (j1b86@n) (for-each (lambda (j1b88@x) (begin (if (not (list? j1b88@x)) (assertion-violation j1b85@who '"not a list" j1b88@x) (void)) (if (not (= (length j1b88@x) j1b86@n)) (assertion-violation j1b85@who '"length mismatch" j1b7f@ls j1b88@x) (void)))) j1b82@ls*)) (length j1b7f@ls)) (void)) (apply map j1b7e@proc j1b7f@ls j1b82@ls*)))) '#f))) (set! jd6b@syntax-transformer ((lambda () ((lambda (j1b8b@gen-syntax j1b8d@gen-ref j1b8f@gen-append j1b91@gen-mappend j1b93@gen-map j1b95@gen-cons j1b97@gen-vector j1b99@regen) (begin (set! j1b8b@gen-syntax (lambda (j1c02@src j1c03@e j1c04@r j1c05@maps j1c06@ellipsis? j1c07@vec?) ((lambda (j1c0e@t) ((lambda (j1c10@ls/false) (if (and j1c10@ls/false (apply (lambda (j1c12@dots) (j1c06@ellipsis? j1c12@dots)) j1c10@ls/false)) (apply (lambda (j1c14@dots) (je3f@syntax-violation '#f '"misplaced ellipsis in syntax form" j1c02@src)) j1c10@ls/false) ((lambda (j1c16@t) ((lambda (j1c18@ls/false) (if (and j1c18@ls/false (apply (lambda (j1c1a@id) (jb5a@id? j1c1a@id)) j1c18@ls/false)) (apply (lambda (j1c1c@id) ((lambda (j1c1e@label) ((lambda (j1c20@b) ((lambda () (if (eq? (jb76@binding-type j1c20@b) 'syntax) (call-with-values (lambda () ((lambda (j1c26@var.lev) (j1b8d@gen-ref j1c02@src (car j1c26@var.lev) (cdr j1c26@var.lev) j1c05@maps)) (jb78@binding-value j1c20@b))) (lambda (j1c28@j1c23 j1c29@j1c25) ((lambda (j1c2c@maps j1c2d@var) (values (list 'ref j1c2d@var) j1c2c@maps)) j1c29@j1c25 j1c28@j1c23))) (values (list 'quote j1c03@e) j1c05@maps))))) (jb72@label->binding j1c1e@label j1c04@r))) (jb70@id->label j1c03@e))) j1c18@ls/false) ((lambda (j1c30@t) ((lambda (j1c32@ls/false) (if (and j1c32@ls/false (apply (lambda (j1c34@dots j1c35@e) (j1c06@ellipsis? j1c34@dots)) j1c32@ls/false)) (apply (lambda (j1c38@dots j1c39@e) (if j1c07@vec? (je3f@syntax-violation '#f '"misplaced ellipsis in syntax form" j1c02@src) (j1b8b@gen-syntax j1c02@src j1c39@e j1c04@r j1c05@maps (lambda (j1c3c@x) '#f) '#f))) j1c32@ls/false) ((lambda (j1c3e@t) ((lambda (j1c40@ls/false) (if (and j1c40@ls/false (apply (lambda (j1c42@x j1c43@dots j1c44@y) (j1c06@ellipsis? j1c43@dots)) j1c40@ls/false)) (apply (lambda (j1c48@x j1c49@dots j1c4a@y) ((letrec ((j1c4e@f (lambda (j1c50@y j1c51@k) ((lambda (j1c54@t) ((lambda (j1c56@ls/false) (if j1c56@ls/false (apply (lambda () (j1c51@k j1c05@maps)) j1c56@ls/false) ((lambda (j1c58@t) ((lambda (j1c5a@ls/false) (if (and j1c5a@ls/false (apply (lambda (j1c5c@dots j1c5d@y) (j1c06@ellipsis? j1c5c@dots)) j1c5a@ls/false)) (apply (lambda (j1c60@dots j1c61@y) (j1c4e@f j1c61@y (lambda (j1c64@maps) (call-with-values (lambda () (j1c51@k (cons '() j1c64@maps))) (lambda (j1c6a@j1c67 j1c6b@j1c69) ((lambda (j1c6e@maps j1c6f@x) (if (null? (car j1c6e@maps)) (je3f@syntax-violation '#f '"extra ellipsis in syntax form" j1c02@src) (values (j1b91@gen-mappend j1c6f@x (car j1c6e@maps)) (cdr j1c6e@maps)))) j1c6b@j1c69 j1c6a@j1c67)))))) j1c5a@ls/false) ((lambda (j1c72@t) ((lambda (j1c74@ls/false) (if j1c74@ls/false (apply (lambda () (call-with-values (lambda () (j1b8b@gen-syntax j1c02@src j1c50@y j1c04@r j1c05@maps j1c06@ellipsis? j1c07@vec?)) (lambda (j1c7a@j1c77 j1c7b@j1c79) ((lambda (j1c7e@maps j1c7f@y) (call-with-values (lambda () (j1c51@k j1c7e@maps)) (lambda (j1c86@j1c83 j1c87@j1c85) ((lambda (j1c8a@maps j1c8b@x) (values (j1b8f@gen-append j1c8b@x j1c7f@y) j1c8a@maps)) j1c87@j1c85 j1c86@j1c83)))) j1c7b@j1c79 j1c7a@j1c77)))) j1c74@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1c72@t))) (jd5f@syntax-dispatch j1c72@t '_))) j1c58@t))) (jd5f@syntax-dispatch j1c58@t '(any . any)))) j1c54@t))) (jd5f@syntax-dispatch j1c54@t '()))) j1c50@y)))) j1c4e@f) j1c4a@y (lambda (j1c8e@maps) (call-with-values (lambda () (j1b8b@gen-syntax j1c02@src j1c48@x j1c04@r (cons '() j1c8e@maps) j1c06@ellipsis? '#f)) (lambda (j1c94@j1c91 j1c95@j1c93) ((lambda (j1c98@maps j1c99@x) (if (null? (car j1c98@maps)) (je3f@syntax-violation '#f '"extra ellipsis in syntax form" j1c02@src) (values (j1b93@gen-map j1c99@x (car j1c98@maps)) (cdr j1c98@maps)))) j1c95@j1c93 j1c94@j1c91)))))) j1c40@ls/false) ((lambda (j1c9c@t) ((lambda (j1c9e@ls/false) (if j1c9e@ls/false (apply (lambda (j1ca0@x j1ca1@y) (call-with-values (lambda () (j1b8b@gen-syntax j1c02@src j1ca0@x j1c04@r j1c05@maps j1c06@ellipsis? '#f)) (lambda (j1ca8@j1ca5 j1ca9@j1ca7) ((lambda (j1cac@maps j1cad@xnew) (call-with-values (lambda () (j1b8b@gen-syntax j1c02@src j1ca1@y j1c04@r j1cac@maps j1c06@ellipsis? j1c07@vec?)) (lambda (j1cb4@j1cb1 j1cb5@j1cb3) ((lambda (j1cb8@maps j1cb9@ynew) (values (j1b95@gen-cons j1c03@e j1ca0@x j1ca1@y j1cad@xnew j1cb9@ynew) j1cb8@maps)) j1cb5@j1cb3 j1cb4@j1cb1)))) j1ca9@j1ca7 j1ca8@j1ca5)))) j1c9e@ls/false) ((lambda (j1cbc@t) ((lambda (j1cbe@ls/false) (if j1cbe@ls/false (apply (lambda (j1cc0@ls) (call-with-values (lambda () (j1b8b@gen-syntax j1c02@src j1cc0@ls j1c04@r j1c05@maps j1c06@ellipsis? '#t)) (lambda (j1cc6@j1cc3 j1cc7@j1cc5) ((lambda (j1cca@maps j1ccb@lsnew) (values (j1b97@gen-vector j1c03@e j1cc0@ls j1ccb@lsnew) j1cca@maps)) j1cc7@j1cc5 j1cc6@j1cc3)))) j1cbe@ls/false) ((lambda (j1cce@t) ((lambda (j1cd0@ls/false) (if j1cd0@ls/false (apply (lambda () (values (list 'quote j1c03@e) j1c05@maps)) j1cd0@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1cce@t))) (jd5f@syntax-dispatch j1cce@t '_))) j1cbc@t))) (jd5f@syntax-dispatch j1cbc@t '#(vector each-any)))) j1c9c@t))) (jd5f@syntax-dispatch j1c9c@t '(any . any)))) j1c3e@t))) (jd5f@syntax-dispatch j1c3e@t '(any any . any)))) j1c30@t))) (jd5f@syntax-dispatch j1c30@t '(any any)))) j1c16@t))) (jd5f@syntax-dispatch j1c16@t 'any))) j1c0e@t))) (jd5f@syntax-dispatch j1c0e@t 'any))) j1c03@e))) (set! j1b8d@gen-ref (lambda (j1be8@src j1be9@var j1bea@level j1beb@maps) (if (= j1bea@level '0) (values j1be9@var j1beb@maps) (if (null? j1beb@maps) (je3f@syntax-violation '#f '"missing ellipsis in syntax form" j1be8@src) (call-with-values (lambda () (j1b8d@gen-ref j1be8@src j1be9@var (- j1bea@level '1) (cdr j1beb@maps))) (lambda (j1bf4@j1bf1 j1bf5@j1bf3) ((lambda (j1bf8@outer-maps j1bf9@outer-var) ((lambda (j1bfc@t) (if j1bfc@t ((lambda (j1bfe@b) (values (cdr j1bfe@b) j1beb@maps)) j1bfc@t) ((lambda (j1c00@inner-var) (values j1c00@inner-var (cons (cons (cons j1bf9@outer-var j1c00@inner-var) (car j1beb@maps)) j1bf8@outer-maps))) (jae2@gen-lexical 'tmp)))) (assq j1bf9@outer-var (car j1beb@maps)))) j1bf5@j1bf3 j1bf4@j1bf1))))))) (set! j1b8f@gen-append (lambda (j1be4@x j1be5@y) (if (fast-equal? j1be5@y ''()) j1be4@x (list 'append j1be4@x j1be5@y)))) (set! j1b91@gen-mappend (lambda (j1be0@e j1be1@map-env) (list 'apply '(primitive append) (j1b93@gen-map j1be0@e j1be1@map-env)))) (set! j1b93@gen-map (lambda (j1bce@e j1bcf@map-env) ((lambda (j1bd2@formals j1bd3@actuals) (if (eq? (car j1bce@e) 'ref) (car j1bd3@actuals) (if (for-all (lambda (j1bd6@x) (and (eq? (car j1bd6@x) 'ref) (memq (cadr j1bd6@x) j1bd2@formals))) (cdr j1bce@e)) ((lambda (j1bd8@args) (cons 'map (cons (list 'primitive (car j1bce@e)) j1bd8@args))) (map ((lambda (j1bda@r) (lambda (j1bdc@x) (cdr (assq (cadr j1bdc@x) j1bda@r)))) (map cons j1bd2@formals j1bd3@actuals)) (cdr j1bce@e))) (cons* 'map (list 'lambda j1bd2@formals j1bce@e) j1bd3@actuals)))) (map cdr j1bcf@map-env) (map (lambda (j1bde@x) (list 'ref (car j1bde@x))) j1bcf@map-env)))) (set! j1b95@gen-cons (lambda (j1bbe@e j1bbf@x j1bc0@y j1bc1@xnew j1bc2@ynew) ((lambda (j1bc8@t) (if (memv j1bc8@t '(quote)) (if (eq? (car j1bc1@xnew) 'quote) ((lambda (j1bca@xnew j1bcb@ynew) (if (and (eq? j1bca@xnew j1bbf@x) (eq? j1bcb@ynew j1bc0@y)) (list 'quote j1bbe@e) (list 'quote (cons j1bca@xnew j1bcb@ynew)))) (cadr j1bc1@xnew) (cadr j1bc2@ynew)) (if (null? (cadr j1bc2@ynew)) (list 'list j1bc1@xnew) (list 'cons j1bc1@xnew j1bc2@ynew))) (if (memv j1bc8@t '(list)) (cons 'list (cons j1bc1@xnew (cdr j1bc2@ynew))) (list 'cons j1bc1@xnew j1bc2@ynew)))) (car j1bc2@ynew)))) (set! j1b97@gen-vector (lambda (j1bb8@e j1bb9@ls j1bba@lsnew) (if (eq? (car j1bba@lsnew) 'quote) (if (eq? (cadr j1bba@lsnew) j1bb9@ls) (list 'quote j1bb8@e) (list 'quote (list->vector (cadr j1bba@lsnew)))) (if (eq? (car j1bba@lsnew) 'list) (cons 'vector (cdr j1bba@lsnew)) (list 'list->vector j1bba@lsnew))))) (set! j1b99@regen (lambda (j1bb2@x) ((lambda (j1bb4@t) (if (memv j1bb4@t '(ref)) (cadr j1bb2@x) (if (memv j1bb4@t '(primitive)) (list 'primitive (cadr j1bb2@x)) (if (memv j1bb4@t '(quote)) (list 'quote (cadr j1bb2@x)) (if (memv j1bb4@t '(lambda)) (jabe@j9fe@build-lambda '#f (cadr j1bb2@x) (j1b99@regen (caddr j1bb2@x))) (if (memv j1bb4@t '(map)) ((lambda (j1bb6@ls) (cons '(primitive ellipsis-map) j1bb6@ls)) (map j1b99@regen (cdr j1bb2@x))) (cons (list 'primitive (car j1bb2@x)) (map j1b99@regen (cdr j1bb2@x))))))))) (car j1bb2@x)))) (lambda (j1b9a@e j1b9b@r j1b9c@mr) ((lambda (j1ba0@t) ((lambda (j1ba2@ls/false) (if j1ba2@ls/false (apply (lambda (j1ba4@x) (call-with-values (lambda () (j1b8b@gen-syntax j1b9a@e j1ba4@x j1b9b@r '() jd61@ellipsis? '#f)) (lambda (j1baa@j1ba7 j1bab@j1ba9) ((lambda (j1bae@maps j1baf@e) (j1b99@regen j1baf@e)) j1bab@j1ba9 j1baa@j1ba7)))) j1ba2@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1ba0@t))) (jd5f@syntax-dispatch j1ba0@t '(_ any)))) j1b9a@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! jd6d@core-macro-transformer (lambda (j1cd2@name) ((lambda (j1cd4@t) (if (memv j1cd4@t '(quote)) jd0f@quote-transformer (if (memv j1cd4@t '(lambda)) jd13@lambda-transformer (if (memv j1cd4@t '(case-lambda)) jd11@case-lambda-transformer (if (memv j1cd4@t '(letrec)) jcf7@letrec-transformer (if (memv j1cd4@t '(letrec*)) jcf9@letrec*-transformer (if (memv j1cd4@t '(if)) jd07@if-transformer (if (memv j1cd4@t '(and)) jd09@and-transformer (if (memv j1cd4@t '(or)) jd0b@or-transformer (if (memv j1cd4@t '(foreign-call)) jd5b@foreign-call-transformer (if (memv j1cd4@t '(syntax-case)) jd67@syntax-case-transformer (if (memv j1cd4@t '(syntax)) jd6b@syntax-transformer (if (memv j1cd4@t '(type-descriptor)) jcfd@type-descriptor-transformer (if (memv j1cd4@t '(record-type-descriptor)) jcff@record-type-descriptor-transformer (if (memv j1cd4@t '(record-constructor-descriptor)) jd01@record-constructor-descriptor-transformer (if (memv j1cd4@t '(fluid-let-syntax)) jcfb@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" j1cd2@name))))))))))))))))) j1cd2@name))) (set! jd6f@symbol-macro (lambda (j1cd6@x j1cd7@set) ((lambda (j1cda@t) ((lambda (j1cdc@ls/false) (if (and j1cdc@ls/false (apply (lambda (j1cde@name) (and (jb5a@id? j1cde@name) (memq (jb5c@id->sym j1cde@name) j1cd7@set))) j1cdc@ls/false)) (apply (lambda (j1ce0@name) (jd15@bless (list 'quote j1ce0@name))) j1cdc@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1cda@t))) (jd5f@syntax-dispatch j1cda@t '(_ any)))) j1cd6@x))) (set! jd71@macro-transformer (lambda (j1ce2@x) (if (procedure? j1ce2@x) j1ce2@x (if (symbol? j1ce2@x) ((lambda (j1ce4@t) (if (memv j1ce4@t '(define-record-type)) jd53@define-record-type-macro (if (memv j1ce4@t '(define-struct)) jd51@define-struct-macro (if (memv j1ce4@t '(include)) jd47@include-macro (if (memv j1ce4@t '(cond)) jd43@cond-macro (if (memv j1ce4@t '(let)) jd1b@let-macro (if (memv j1ce4@t '(do)) jd3b@do-macro (if (memv j1ce4@t '(or)) jd3f@or-macro (if (memv j1ce4@t '(and)) jd41@and-macro (if (memv j1ce4@t '(let*)) jd3d@let*-macro (if (memv j1ce4@t '(let-values)) jd1d@let-values-macro (if (memv j1ce4@t '(let*-values)) jd1f@let*-values-macro (if (memv j1ce4@t '(syntax-rules)) jd4b@syntax-rules-macro (if (memv j1ce4@t '(quasiquote)) jd4d@quasiquote-macro (if (memv j1ce4@t '(quasisyntax)) jd4f@quasisyntax-macro (if (memv j1ce4@t '(with-syntax)) jd17@with-syntax-macro (if (memv j1ce4@t '(when)) jd03@when-macro (if (memv j1ce4@t '(unless)) jd05@unless-macro (if (memv j1ce4@t '(case)) jd0d@case-macro (if (memv j1ce4@t '(identifier-syntax)) jd39@identifier-syntax-macro (if (memv j1ce4@t '(time)) jd31@time-macro (if (memv j1ce4@t '(delay)) jd33@delay-macro (if (memv j1ce4@t '(assert)) jd35@assert-macro (if (memv j1ce4@t '(endianness)) jd37@endianness-macro (if (memv j1ce4@t '(guard)) jd2d@guard-macro (if (memv j1ce4@t '(define-enumeration)) jd2f@define-enumeration-macro (if (memv j1ce4@t '(trace-lambda)) jd21@trace-lambda-macro (if (memv j1ce4@t '(trace-define)) jd23@trace-define-macro (if (memv j1ce4@t '(trace-define-syntax)) jd25@trace-define-syntax-macro (if (memv j1ce4@t '(trace-let-syntax)) jd29@trace-let-syntax-macro (if (memv j1ce4@t '(trace-letrec-syntax)) jd2b@trace-letrec-syntax-macro (if (memv j1ce4@t '(define-condition-type)) jd55@define-condition-type-macro (if (memv j1ce4@t '(parameterize)) jd59@parameterize-macro (if (memv j1ce4@t '(include-into)) jd49@include-into-macro (if (memv j1ce4@t '(eol-style)) (lambda (j1ce6@x) (jd6f@symbol-macro j1ce6@x '(none lf cr crlf nel crnel ls))) (if (memv j1ce4@t '(error-handling-mode)) (lambda (j1ce8@x) (jd6f@symbol-macro j1ce8@x '(ignore raise replace))) (if (memv j1ce4@t '(buffer-mode)) (lambda (j1cea@x) (jd6f@symbol-macro j1cea@x '(none line block))) (if (memv j1ce4@t '(file-options)) jad5@file-options-macro (if (memv j1ce4@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) jd57@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" j1ce2@x)))))))))))))))))))))))))))))))))))))))) j1ce2@x) (error 'core-macro-transformer '"BUG: invalid macro" j1ce2@x))))) (set! jd73@local-macro-transformer (lambda (j1cec@x) (car j1cec@x))) (set! jd75@do-macro-call (lambda (j1cee@transformer j1cef@expr) ((lambda (j1cf2@out) (begin ((letrec ((j1cf4@f (lambda (j1cf6@x) (if (not (jb26@stx? j1cf6@x)) (if (pair? j1cf6@x) (begin (j1cf4@f (car j1cf6@x)) (j1cf4@f (cdr j1cf6@x))) (if (vector? j1cf6@x) (vector-for-each j1cf4@f j1cf6@x) (if (symbol? j1cf6@x) (je3f@syntax-violation '#f '"raw symbol encountered in output of macro" j1cef@expr j1cf6@x) (void)))) (void))))) j1cf4@f) j1cf2@out) (jb44@add-mark (jb3c@gen-mark) j1cf2@out j1cef@expr))) (j1cee@transformer (jb44@add-mark jb3e@anti-mark j1cef@expr '#f))))) (set! jd77@chi-macro (lambda (j1cf8@p j1cf9@e) (jd75@do-macro-call (jd71@macro-transformer j1cf8@p) j1cf9@e))) (set! jd79@chi-local-macro (lambda (j1cfc@p j1cfd@e) (jd75@do-macro-call (jd73@local-macro-transformer j1cfc@p) j1cfd@e))) (set! jd7b@chi-global-macro (lambda (j1d00@p j1d01@e) ((lambda (j1d04@lib j1d05@loc) (begin (j986@j7d5@visit-library j1d04@lib) ((lambda (j1d08@x) ((lambda (j1d0a@transformer) (jd75@do-macro-call j1d0a@transformer j1d01@e)) (if (procedure? j1d08@x) j1d08@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" j1d08@x)))) (symbol-value j1d05@loc)))) (car j1d00@p) (cdr j1d00@p)))) (set! jd7d@chi-expr* (lambda (j1d0c@e* j1d0d@r j1d0e@mr) (if (null? j1d0c@e*) '() ((lambda (j1d12@e) (cons j1d12@e (jd7d@chi-expr* (cdr j1d0c@e*) j1d0d@r j1d0e@mr))) (jd81@chi-expr (car j1d0c@e*) j1d0d@r j1d0e@mr))))) (set! jd7f@chi-application (lambda (j1d14@e j1d15@r j1d16@mr) ((lambda (j1d1a@t) ((lambda (j1d1c@ls/false) (if j1d1c@ls/false (apply (lambda (j1d1e@rator j1d1f@rands) ((lambda (j1d22@rator) (cons j1d22@rator (jd7d@chi-expr* j1d1f@rands j1d15@r j1d16@mr))) (jd81@chi-expr j1d1e@rator j1d15@r j1d16@mr))) j1d1c@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1d1a@t))) (jd5f@syntax-dispatch j1d1a@t '(any . each-any)))) j1d14@e))) (set! jd81@chi-expr (lambda (j1d24@e j1d25@r j1d26@mr) (call-with-values (lambda () (jb7c@syntax-type j1d24@e j1d25@r)) (lambda (j1d30@j1d2b j1d31@j1d2d j1d32@j1d2f) ((lambda (j1d36@kwd j1d37@value j1d38@type) ((lambda (j1d3c@t) (if (memv j1d3c@t '(core-macro)) ((lambda (j1d3e@transformer) (j1d3e@transformer j1d24@e j1d25@r j1d26@mr)) (jd6d@core-macro-transformer j1d37@value)) (if (memv j1d3c@t '(global)) ((lambda (j1d40@lib) ((lambda (j1d42@loc) ((lambda () (begin ((jdc7@inv-collector) j1d40@lib) j1d42@loc)))) (cdr j1d37@value))) (car j1d37@value)) (if (memv j1d3c@t '(core-prim)) ((lambda (j1d44@name) (list 'primitive j1d44@name)) j1d37@value) (if (memv j1d3c@t '(call)) (jd7f@chi-application j1d24@e j1d25@r j1d26@mr) (if (memv j1d3c@t '(lexical)) ((lambda (j1d46@lex) j1d46@lex) (jceb@lexical-var j1d37@value)) (if (memv j1d3c@t '(global-macro global-macro!)) (jd81@chi-expr (jd7b@chi-global-macro j1d37@value j1d24@e) j1d25@r j1d26@mr) (if (memv j1d3c@t '(local-macro local-macro!)) (jd81@chi-expr (jd79@chi-local-macro j1d37@value j1d24@e) j1d25@r j1d26@mr) (if (memv j1d3c@t '(macro macro!)) (jd81@chi-expr (jd77@chi-macro j1d37@value j1d24@e) j1d25@r j1d26@mr) (if (memv j1d3c@t '(constant)) ((lambda (j1d48@datum) (list 'quote j1d48@datum)) j1d37@value) (if (memv j1d3c@t '(set!)) (jd83@chi-set! j1d24@e j1d25@r j1d26@mr) (if (memv j1d3c@t '(begin)) ((lambda (j1d4a@t) ((lambda (j1d4c@ls/false) (if j1d4c@ls/false (apply (lambda (j1d4e@x j1d4f@x*) (jac1@ja30@build-sequence '#f (jd7d@chi-expr* (cons j1d4e@x j1d4f@x*) j1d25@r j1d26@mr))) j1d4c@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1d4a@t))) (jd5f@syntax-dispatch j1d4a@t '(_ any . each-any)))) j1d24@e) (if (memv j1d3c@t '(let-syntax letrec-syntax)) ((lambda (j1d52@t) ((lambda (j1d54@ls/false) (if (and j1d54@ls/false (apply (lambda (j1d56@xlhs* j1d57@xrhs* j1d58@xbody j1d59@xbody*) (if (not (jb62@valid-bound-ids? j1d56@xlhs*)) (je3f@syntax-violation '#f '"invalid identifiers" j1d24@e) (void))) j1d54@ls/false)) (apply (lambda (j1d5e@xlhs* j1d5f@xrhs* j1d60@xbody j1d61@xbody*) ((lambda (j1d66@xlab*) ((lambda (j1d68@xrib) ((lambda (j1d6a@xb*) ((lambda () (jac1@ja30@build-sequence '#f (jd7d@chi-expr* (map (lambda (j1d6c@x) (jb46@add-subst j1d68@xrib j1d6c@x)) (cons j1d60@xbody j1d61@xbody*)) (append (map cons j1d66@xlab* j1d6a@xb*) j1d25@r) (append (map cons j1d66@xlab* j1d6a@xb*) j1d26@mr)))))) (map (lambda (j1d6e@x) (jb92@make-eval-transformer (jdb9@expand-transformer (if (eq? j1d38@type 'let-syntax) j1d6e@x (jb46@add-subst j1d68@xrib j1d6e@x)) j1d26@mr))) j1d5f@xrhs*))) (jb1a@make-full-rib j1d5e@xlhs* j1d66@xlab*))) (map jae6@gen-label j1d5e@xlhs*))) j1d54@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1d52@t))) (jd5f@syntax-dispatch j1d52@t '(_ #(each (any any)) any . each-any)))) j1d24@e) (if (memv j1d3c@t '(displaced-lexical)) (je3f@syntax-violation '#f '"identifier out of context" j1d24@e) (if (memv j1d3c@t '(syntax)) (je3f@syntax-violation '#f '"reference to pattern variable outside a syntax form" j1d24@e) (if (memv j1d3c@t '(define define-syntax module import library)) (je3f@syntax-violation '#f (string-append ((lambda (j1d70@t) (if (memv j1d70@t '(define)) '"a definition" (if (memv j1d70@t '(define-syntax)) '"a define-syntax" (if (memv j1d70@t '(module)) '"a module definition" (if (memv j1d70@t '(library)) '"a library definition" (if (memv j1d70@t '(import)) '"an import declaration" (if (memv j1d70@t '(export)) '"an export declaration" '"a non-expression"))))))) j1d38@type) '" was found where an expression was expected") j1d24@e) (if (memv j1d3c@t '(mutable)) (je3f@syntax-violation '#f '"attempt to reference an unexportable variable" j1d24@e) (je3f@syntax-violation '#f '"invalid expression" j1d24@e)))))))))))))))))) j1d38@type)) j1d32@j1d2f j1d31@j1d2d j1d30@j1d2b))))) (set! jd83@chi-set! (lambda (j1d72@e j1d73@r j1d74@mr) ((lambda (j1d78@t) ((lambda (j1d7a@ls/false) (if (and j1d7a@ls/false (apply (lambda (j1d7c@x j1d7d@v) (jb5a@id? j1d7c@x)) j1d7a@ls/false)) (apply (lambda (j1d80@x j1d81@v) (call-with-values (lambda () (jb7c@syntax-type j1d80@x j1d73@r)) (lambda (j1d8a@j1d85 j1d8b@j1d87 j1d8c@j1d89) ((lambda (j1d90@kwd j1d91@value j1d92@type) ((lambda (j1d96@t) (if (memv j1d96@t '(lexical)) (begin (jcef@set-lexical-mutable! j1d91@value '#t) (list 'set! (jceb@lexical-var j1d91@value) (jd81@chi-expr j1d81@v j1d73@r j1d74@mr))) (if (memv j1d96@t '(core-prim)) (je3f@syntax-violation '#f '"cannot modify imported core primitive" j1d72@e) (if (memv j1d96@t '(global)) (je3f@syntax-violation '#f '"attempt to modify imported binding" j1d72@e) (if (memv j1d96@t '(global-macro!)) (jd81@chi-expr (jd7b@chi-global-macro j1d91@value j1d72@e) j1d73@r j1d74@mr) (if (memv j1d96@t '(local-macro!)) (jd81@chi-expr (jd79@chi-local-macro j1d91@value j1d72@e) j1d73@r j1d74@mr) (if (memv j1d96@t '(mutable)) (je3f@syntax-violation '#f '"attempt to assign to an unexportable variable" j1d72@e) (je3f@syntax-violation '#f '"invalid syntax" j1d72@e)))))))) j1d92@type)) j1d8c@j1d89 j1d8b@j1d87 j1d8a@j1d85)))) j1d7a@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1d78@t))) (jd5f@syntax-dispatch j1d78@t '(_ any any)))) j1d72@e))) (set! jd85@verify-formals (lambda (j1d98@fmls j1d99@stx) ((lambda (j1d9c@t) ((lambda (j1d9e@ls/false) (if j1d9e@ls/false (apply (lambda (j1da0@x*) (if (not (jb62@valid-bound-ids? j1da0@x*)) (jd19@invalid-fmls-error j1d99@stx j1d98@fmls) (void))) j1d9e@ls/false) ((lambda (j1da2@t) ((lambda (j1da4@ls/false) (if j1da4@ls/false (apply (lambda (j1da6@x* j1da7@x) (if (not (jb62@valid-bound-ids? (cons j1da7@x j1da6@x*))) (jd19@invalid-fmls-error j1d99@stx j1d98@fmls) (void))) j1da4@ls/false) ((lambda (j1daa@t) ((lambda (j1dac@ls/false) (if j1dac@ls/false (apply (lambda () (je3f@syntax-violation '#f '"invalid syntax" j1d99@stx)) j1dac@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1daa@t))) (jd5f@syntax-dispatch j1daa@t '_))) j1da2@t))) (jd5f@syntax-dispatch j1da2@t '#(each+ any () any)))) j1d9c@t))) (jd5f@syntax-dispatch j1d9c@t 'each-any))) j1d98@fmls))) (set! jd87@chi-lambda-clause (lambda (j1dae@stx j1daf@fmls j1db0@body* j1db1@r j1db2@mr) ((lambda (j1db8@t) ((lambda (j1dba@ls/false) (if j1dba@ls/false (apply (lambda (j1dbc@x*) (begin (jd85@verify-formals j1daf@fmls j1dae@stx) ((lambda (j1dbe@lex* j1dbf@lab*) (values j1dbe@lex* (jd97@chi-internal (jb46@add-subst (jb1a@make-full-rib j1dbc@x* j1dbf@lab*) j1db0@body*) (jcf3@add-lexicals j1dbf@lab* j1dbe@lex* j1db1@r) j1db2@mr))) (map jae2@gen-lexical j1dbc@x*) (map jae6@gen-label j1dbc@x*)))) j1dba@ls/false) ((lambda (j1dc2@t) ((lambda (j1dc4@ls/false) (if j1dc4@ls/false (apply (lambda (j1dc6@x* j1dc7@x) (begin (jd85@verify-formals j1daf@fmls j1dae@stx) ((lambda (j1dca@lex* j1dcb@lab* j1dcc@lex j1dcd@lab) (values (append j1dca@lex* j1dcc@lex) (jd97@chi-internal (jb46@add-subst (jb1a@make-full-rib (cons j1dc7@x j1dc6@x*) (cons j1dcd@lab j1dcb@lab*)) j1db0@body*) (jcf3@add-lexicals (cons j1dcd@lab j1dcb@lab*) (cons j1dcc@lex j1dca@lex*) j1db1@r) j1db2@mr))) (map jae2@gen-lexical j1dc6@x*) (map jae6@gen-label j1dc6@x*) (jae2@gen-lexical j1dc7@x) (jae6@gen-label j1dc7@x)))) j1dc4@ls/false) ((lambda (j1dd2@t) ((lambda (j1dd4@ls/false) (if j1dd4@ls/false (apply (lambda () (je3f@syntax-violation '#f '"invalid syntax" j1daf@fmls)) j1dd4@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1dd2@t))) (jd5f@syntax-dispatch j1dd2@t '_))) j1dc2@t))) (jd5f@syntax-dispatch j1dc2@t '#(each+ any () any)))) j1db8@t))) (jd5f@syntax-dispatch j1db8@t 'each-any))) j1daf@fmls))) (set! jd89@chi-lambda-clause* (lambda (j1dd6@stx j1dd7@fmls* j1dd8@body** j1dd9@r j1dda@mr) (if (null? j1dd7@fmls*) (values '() '()) (call-with-values (lambda () (jd87@chi-lambda-clause j1dd6@stx (car j1dd7@fmls*) (car j1dd8@body**) j1dd9@r j1dda@mr)) (lambda (j1de4@j1de1 j1de5@j1de3) ((lambda (j1de8@b j1de9@a) (call-with-values (lambda () (jd89@chi-lambda-clause* j1dd6@stx (cdr j1dd7@fmls*) (cdr j1dd8@body**) j1dd9@r j1dda@mr)) (lambda (j1df0@j1ded j1df1@j1def) ((lambda (j1df4@b* j1df5@a*) (values (cons j1de9@a j1df5@a*) (cons j1de8@b j1df4@b*))) j1df1@j1def j1df0@j1ded)))) j1de5@j1de3 j1de4@j1de1)))))) (set! jd8b@chi-defun (lambda (j1df8@x j1df9@r j1dfa@mr) ((lambda (j1dfe@fmls j1dff@body*) (call-with-values (lambda () (jd87@chi-lambda-clause j1dfe@fmls j1dfe@fmls j1dff@body* j1df9@r j1dfa@mr)) (lambda (j1e06@j1e03 j1e07@j1e05) ((lambda (j1e0a@body j1e0b@fmls) (jabe@j9fe@build-lambda '#f j1e0b@fmls j1e0a@body)) j1e07@j1e05 j1e06@j1e03)))) (car j1df8@x) (cdr j1df8@x)))) (set! jd8d@chi-rhs (lambda (j1e0e@rhs j1e0f@r j1e10@mr) ((lambda (j1e14@t) (if (memv j1e14@t '(defun)) (jd8b@chi-defun (cdr j1e0e@rhs) j1e0f@r j1e10@mr) (if (memv j1e14@t '(expr)) ((lambda (j1e16@expr) (jd81@chi-expr j1e16@expr j1e0f@r j1e10@mr)) (cdr j1e0e@rhs)) (if (memv j1e14@t '(top-expr)) ((lambda (j1e18@expr) (jac1@ja30@build-sequence '#f (list (jd81@chi-expr j1e18@expr j1e0f@r j1e10@mr) (jac2@ja32@build-void)))) (cdr j1e0e@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" j1e0e@rhs))))) (car j1e0e@rhs)))) (set! jd8f@expand-interaction-rhs*/init* (lambda (j1e1a@lhs* j1e1b@rhs* j1e1c@init* j1e1d@r j1e1e@mr) ((letrec ((j1e24@f (lambda (j1e26@lhs* j1e27@rhs*) (if (null? j1e26@lhs*) (map (lambda (j1e2a@x) (jd81@chi-expr j1e2a@x j1e1d@r j1e1e@mr)) j1e1c@init*) ((lambda (j1e2c@lhs j1e2d@rhs) ((lambda (j1e30@t) (if (memv j1e30@t '(defun)) ((lambda (j1e32@rhs) (cons (list 'set! j1e2c@lhs j1e32@rhs) (j1e24@f (cdr j1e26@lhs*) (cdr j1e27@rhs*)))) (jd8b@chi-defun (cdr j1e2d@rhs) j1e1d@r j1e1e@mr)) (if (memv j1e30@t '(expr)) ((lambda (j1e34@rhs) (cons (list 'set! j1e2c@lhs j1e34@rhs) (j1e24@f (cdr j1e26@lhs*) (cdr j1e27@rhs*)))) (jd81@chi-expr (cdr j1e2d@rhs) j1e1d@r j1e1e@mr)) (if (memv j1e30@t '(top-expr)) ((lambda (j1e36@e) (cons j1e36@e (j1e24@f (cdr j1e26@lhs*) (cdr j1e27@rhs*)))) (jd81@chi-expr (cdr j1e2d@rhs) j1e1d@r j1e1e@mr)) (error 'expand-interaction '"invallid" j1e2d@rhs))))) (car j1e2d@rhs))) (car j1e26@lhs*) (car j1e27@rhs*)))))) j1e24@f) j1e1a@lhs* j1e1b@rhs*))) (set! jd91@chi-rhs* (lambda (j1e38@rhs* j1e39@r j1e3a@mr) ((letrec ((j1e3e@f (lambda (j1e40@ls) (if (null? j1e40@ls) '() ((lambda (j1e42@a) (cons j1e42@a (j1e3e@f (cdr j1e40@ls)))) (jd8d@chi-rhs (car j1e40@ls) j1e39@r j1e3a@mr)))))) j1e3e@f) j1e38@rhs*))) (set! jd93@find-bound=? (lambda (j1e44@x j1e45@lhs* j1e46@rhs*) (if (null? j1e45@lhs*) '#f (if (jb5e@bound-id=? j1e44@x (car j1e45@lhs*)) (car j1e46@rhs*) (jd93@find-bound=? j1e44@x (cdr j1e45@lhs*) (cdr j1e46@rhs*)))))) (set! jd95@find-dups (lambda (j1e4a@ls) ((letrec ((j1e4c@f (lambda (j1e4e@ls j1e4f@dups) (if (null? j1e4e@ls) j1e4f@dups ((lambda (j1e52@t) (if j1e52@t ((lambda (j1e54@x) (j1e4c@f (cdr j1e4e@ls) (cons (list (car j1e4e@ls) j1e54@x) j1e4f@dups))) j1e52@t) (j1e4c@f (cdr j1e4e@ls) j1e4f@dups))) (jd93@find-bound=? (car j1e4e@ls) (cdr j1e4e@ls) (cdr j1e4e@ls))))))) j1e4c@f) j1e4a@ls '()))) (set! jd97@chi-internal (lambda (j1e56@e* j1e57@r j1e58@mr) ((lambda (j1e5c@rib) (call-with-values (lambda () (jdb7@chi-body* (map (lambda (j1e6e@x) (jb46@add-subst j1e5c@rib j1e6e@x)) (jb58@syntax->list j1e56@e*)) j1e57@r j1e58@mr '() '() '() '() '() j1e5c@rib '#f)) (lambda (j1e70@j1e5f j1e71@j1e61 j1e72@j1e63 j1e73@j1e65 j1e74@j1e67 j1e75@j1e69 j1e76@j1e6b j1e77@j1e6d) ((lambda (j1e80@_exp* j1e81@kwd* j1e82@mod** j1e83@rhs* j1e84@lex* j1e85@mr j1e86@r j1e87@e*) (begin (if (null? j1e87@e*) (je3f@syntax-violation '#f '"no expression in body" j1e87@e*) (void)) ((lambda (j1e90@init*) ((lambda (j1e92@rhs*) ((lambda () (jac4@ja36@build-letrec* '#f (reverse j1e84@lex*) (reverse j1e92@rhs*) (jac1@ja30@build-sequence '#f j1e90@init*))))) (jd91@chi-rhs* j1e83@rhs* j1e86@r j1e85@mr))) (jd7d@chi-expr* (append (apply append (reverse j1e82@mod**)) j1e87@e*) j1e86@r j1e85@mr)))) j1e77@j1e6d j1e76@j1e6b j1e75@j1e69 j1e74@j1e67 j1e73@j1e65 j1e72@j1e63 j1e71@j1e61 j1e70@j1e5f)))) (jb0e@make-empty-rib)))) (set! jd99@parse-module (lambda (j1e94@e) ((lambda (j1e96@t) ((lambda (j1e98@ls/false) (if j1e98@ls/false (apply (lambda (j1e9a@export* j1e9b@b*) (begin (if (not (for-all jb5a@id? j1e9a@export*)) (je3f@syntax-violation '#f '"module exports must be identifiers" j1e94@e) (void)) (values '#f (list->vector j1e9a@export*) j1e9b@b*))) j1e98@ls/false) ((lambda (j1e9e@t) ((lambda (j1ea0@ls/false) (if j1ea0@ls/false (apply (lambda (j1ea2@name j1ea3@export* j1ea4@b*) (begin (if (not (jb5a@id? j1ea2@name)) (je3f@syntax-violation '#f '"module name must be an identifier" j1e94@e) (void)) (if (not (for-all jb5a@id? j1ea3@export*)) (je3f@syntax-violation '#f '"module exports must be identifiers" j1e94@e) (void)) (values j1ea2@name (list->vector j1ea3@export*) j1ea4@b*))) j1ea0@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1e9e@t))) (jd5f@syntax-dispatch j1e9e@t '(_ any each-any . each-any)))) j1e96@t))) (jd5f@syntax-dispatch j1e96@t '(_ each-any . each-any)))) j1e94@e))) (set! jda3@module-interface? (lambda (j1ea8@x) (and (simple-struct? j1ea8@x) (eq? (simple-struct-name j1ea8@x) 'module-interface)))) (set! jda5@module-interface-first-mark (lambda (j1eaa@x) (simple-struct-ref j1eaa@x '0))) (set! jda7@set-module-interface-first-mark! (lambda (j1eac@x j1ead@val) (simple-struct-set! j1eac@x '0 j1ead@val))) (set! jda9@module-interface-exp-id-vec (lambda (j1eb0@x) (simple-struct-ref j1eb0@x '1))) (set! jdab@set-module-interface-exp-id-vec! (lambda (j1eb2@x j1eb3@val) (simple-struct-set! j1eb2@x '1 j1eb3@val))) (set! jdad@module-interface-exp-lab-vec (lambda (j1eb6@x) (simple-struct-ref j1eb6@x '2))) (set! jdaf@set-module-interface-exp-lab-vec! (lambda (j1eb8@x j1eb9@val) (simple-struct-set! j1eb8@x '2 j1eb9@val))) (set! jdb1@dummy '3) (set! jdb3@module-interface-exp-id* (lambda (j1ebc@iface j1ebd@id) ((lambda (j1ec1@diff-marks) (begin (set! j1ec1@diff-marks (lambda (j1ec8@ls j1ec9@x) (begin (if (null? j1ec8@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (j1ecc@a) (if (eq? j1ecc@a j1ec9@x) '() (cons j1ecc@a (j1ec1@diff-marks (cdr j1ec8@ls) j1ec9@x)))) (car j1ec8@ls))))) ((lambda (j1ec2@diff j1ec3@id-vec) (if (null? j1ec2@diff) j1ec3@id-vec (vector-map (lambda (j1ec6@x) (make-simple-struct 'stx '5 (list (jb28@stx-expr j1ec6@x) (append j1ec2@diff (jb2c@stx-mark* j1ec6@x)) '() '()))) j1ec3@id-vec))) (j1ec1@diff-marks (jb2c@stx-mark* j1ebd@id) (jda5@module-interface-first-mark j1ebc@iface)) (jda9@module-interface-exp-id-vec j1ebc@iface)))) '#f))) (set! jdb5@chi-internal-module (lambda (j1ece@e j1ecf@r j1ed0@mr j1ed1@lex* j1ed2@rhs* j1ed3@mod** j1ed4@kwd*) (call-with-values (lambda () (jd99@parse-module j1ece@e)) (lambda (j1ee2@j1edd j1ee3@j1edf j1ee4@j1ee1) ((lambda (j1ee8@e* j1ee9@exp-id* j1eea@name) ((lambda (j1eee@rib) ((lambda (j1ef0@e*) ((lambda () (call-with-values (lambda () (jdb7@chi-body* j1ef0@e* j1ecf@r j1ed0@mr j1ed1@lex* j1ed2@rhs* j1ed3@mod** j1ed4@kwd* '() j1eee@rib '#f)) (lambda (j1f02@j1ef3 j1f03@j1ef5 j1f04@j1ef7 j1f05@j1ef9 j1f06@j1efb j1f07@j1efd j1f08@j1eff j1f09@j1f01) ((lambda (j1f12@_exp* j1f13@kwd* j1f14@mod** j1f15@rhs* j1f16@lex* j1f17@mr j1f18@r j1f19@e*) ((lambda (j1f22@exp-lab* j1f23@mod**) (if (not j1eea@name) (values j1f16@lex* j1f15@rhs* j1ee9@exp-id* j1f22@exp-lab* j1f18@r j1f17@mr j1f23@mod** j1f13@kwd*) ((lambda (j1f26@lab j1f27@iface) (values j1f16@lex* j1f15@rhs* (vector j1eea@name) (vector j1f26@lab) (cons (cons j1f26@lab (cons '$module j1f27@iface)) j1f18@r) (cons (cons j1f26@lab (cons '$module j1f27@iface)) j1f17@mr) j1f23@mod** j1f13@kwd*)) (jae6@gen-label 'module) (make-simple-struct 'module-interface '4 (list (car (jb2c@stx-mark* j1eea@name)) (vector-map (lambda (j1f2a@x) (make-simple-struct 'stx '5 (list (jb28@stx-expr j1f2a@x) (jb2c@stx-mark* j1f2a@x) '() '()))) j1ee9@exp-id*) j1f22@exp-lab*))))) (vector-map (lambda (j1f2c@x) (or (jb70@id->label (make-simple-struct 'stx '5 (list (jb5c@id->sym j1f2c@x) (jb2c@stx-mark* j1f2c@x) (list j1eee@rib) '()))) (je3f@syntax-violation '#f '"cannot find module export" j1f2c@x))) j1ee9@exp-id*) (cons j1f19@e* j1f14@mod**))) j1f09@j1f01 j1f08@j1eff j1f07@j1efd j1f06@j1efb j1f05@j1ef9 j1f04@j1ef7 j1f03@j1ef5 j1f02@j1ef3)))))) (map (lambda (j1f2e@x) (jb46@add-subst j1eee@rib j1f2e@x)) (jb58@syntax->list j1ee8@e*)))) (jb0e@make-empty-rib))) j1ee4@j1ee1 j1ee3@j1edf j1ee2@j1edd))))) (set! jdb7@chi-body* (lambda (j1f30@e* j1f31@r j1f32@mr j1f33@lex* j1f34@rhs* j1f35@mod** j1f36@kwd* j1f37@exp* j1f38@rib j1f39@top?) (if (null? j1f30@e*) (values j1f30@e* j1f31@r j1f32@mr j1f33@lex* j1f34@rhs* j1f35@mod** j1f36@kwd* j1f37@exp*) ((lambda (j1f44@e) (call-with-values (lambda () (jb7c@syntax-type j1f44@e j1f31@r)) (lambda (j1f4c@j1f47 j1f4d@j1f49 j1f4e@j1f4b) ((lambda (j1f52@kwd j1f53@value j1f54@type) ((lambda (j1f58@kwd*) ((lambda (j1f5a@t) (if (memv j1f5a@t '(define)) (call-with-values (lambda () (jce3@parse-define j1f44@e)) (lambda (j1f60@j1f5d j1f61@j1f5f) ((lambda (j1f64@rhs j1f65@id) (begin (if (jb66@bound-id-member? j1f65@id j1f58@kwd*) (je3f@syntax-violation '#f '"cannot redefine keyword" j1f44@e) (void)) (call-with-values (lambda () (jaea@gen-define-label+loc j1f65@id j1f38@rib)) (lambda (j1f6c@j1f69 j1f6d@j1f6b) ((lambda (j1f70@lex j1f71@lab) (begin (jb10@extend-rib! j1f38@rib j1f65@id j1f71@lab) (jdb7@chi-body* (cdr j1f30@e*) (jcf1@add-lexical j1f71@lab j1f70@lex j1f31@r) j1f32@mr (cons j1f70@lex j1f33@lex*) (cons j1f64@rhs j1f34@rhs*) j1f35@mod** j1f58@kwd* j1f37@exp* j1f38@rib j1f39@top?))) j1f6d@j1f6b j1f6c@j1f69))))) j1f61@j1f5f j1f60@j1f5d))) (if (memv j1f5a@t '(define-syntax)) (call-with-values (lambda () (jce5@parse-define-syntax j1f44@e)) (lambda (j1f78@j1f75 j1f79@j1f77) ((lambda (j1f7c@rhs j1f7d@id) (begin (if (jb66@bound-id-member? j1f7d@id j1f58@kwd*) (je3f@syntax-violation '#f '"cannot redefine keyword" j1f44@e) (void)) ((lambda (j1f80@lab j1f81@expanded-rhs) (begin (jb10@extend-rib! j1f38@rib j1f7d@id j1f80@lab) ((lambda (j1f84@b) (jdb7@chi-body* (cdr j1f30@e*) (cons (cons j1f80@lab j1f84@b) j1f31@r) (cons (cons j1f80@lab j1f84@b) j1f32@mr) j1f33@lex* j1f34@rhs* j1f35@mod** j1f58@kwd* j1f37@exp* j1f38@rib j1f39@top?)) (jb92@make-eval-transformer j1f81@expanded-rhs)))) (jaec@gen-define-label j1f7d@id j1f38@rib) (jdb9@expand-transformer j1f7c@rhs j1f32@mr)))) j1f79@j1f77 j1f78@j1f75))) (if (memv j1f5a@t '(let-syntax letrec-syntax)) ((lambda (j1f86@t) ((lambda (j1f88@ls/false) (if (and j1f88@ls/false (apply (lambda (j1f8a@xlhs* j1f8b@xrhs* j1f8c@xbody*) (if (not (jb62@valid-bound-ids? j1f8a@xlhs*)) (je3f@syntax-violation '#f '"invalid identifiers" j1f44@e) (void))) j1f88@ls/false)) (apply (lambda (j1f90@xlhs* j1f91@xrhs* j1f92@xbody*) ((lambda (j1f96@xlab*) ((lambda (j1f98@xrib) ((lambda (j1f9a@xb*) ((lambda () (jdb7@chi-body* (append (map (lambda (j1f9c@x) (jb46@add-subst j1f98@xrib j1f9c@x)) j1f92@xbody*) (cdr j1f30@e*)) (append (map cons j1f96@xlab* j1f9a@xb*) j1f31@r) (append (map cons j1f96@xlab* j1f9a@xb*) j1f32@mr) j1f33@lex* j1f34@rhs* j1f35@mod** j1f58@kwd* j1f37@exp* j1f38@rib j1f39@top?)))) (map (lambda (j1f9e@x) (jb92@make-eval-transformer (jdb9@expand-transformer (if (eq? j1f54@type 'let-syntax) j1f9e@x (jb46@add-subst j1f98@xrib j1f9e@x)) j1f32@mr))) j1f91@xrhs*))) (jb1a@make-full-rib j1f90@xlhs* j1f96@xlab*))) (map jae6@gen-label j1f90@xlhs*))) j1f88@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1f86@t))) (jd5f@syntax-dispatch j1f86@t '(_ #(each (any any)) . each-any)))) j1f44@e) (if (memv j1f5a@t '(begin)) ((lambda (j1fa0@t) ((lambda (j1fa2@ls/false) (if j1fa2@ls/false (apply (lambda (j1fa4@x*) (jdb7@chi-body* (append j1fa4@x* (cdr j1f30@e*)) j1f31@r j1f32@mr j1f33@lex* j1f34@rhs* j1f35@mod** j1f58@kwd* j1f37@exp* j1f38@rib j1f39@top?)) j1fa2@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1fa0@t))) (jd5f@syntax-dispatch j1fa0@t '(_ . each-any)))) j1f44@e) (if (memv j1f5a@t '(global-macro global-macro!)) (jdb7@chi-body* (cons (jb46@add-subst j1f38@rib (jd7b@chi-global-macro j1f53@value j1f44@e)) (cdr j1f30@e*)) j1f31@r j1f32@mr j1f33@lex* j1f34@rhs* j1f35@mod** j1f58@kwd* j1f37@exp* j1f38@rib j1f39@top?) (if (memv j1f5a@t '(local-macro local-macro!)) (jdb7@chi-body* (cons (jb46@add-subst j1f38@rib (jd79@chi-local-macro j1f53@value j1f44@e)) (cdr j1f30@e*)) j1f31@r j1f32@mr j1f33@lex* j1f34@rhs* j1f35@mod** j1f58@kwd* j1f37@exp* j1f38@rib j1f39@top?) (if (memv j1f5a@t '(macro macro!)) (jdb7@chi-body* (cons (jb46@add-subst j1f38@rib (jd77@chi-macro j1f53@value j1f44@e)) (cdr j1f30@e*)) j1f31@r j1f32@mr j1f33@lex* j1f34@rhs* j1f35@mod** j1f58@kwd* j1f37@exp* j1f38@rib j1f39@top?) (if (memv j1f5a@t '(module)) (call-with-values (lambda () (jdb5@chi-internal-module j1f44@e j1f31@r j1f32@mr j1f33@lex* j1f34@rhs* j1f35@mod** j1f58@kwd*)) (lambda (j1fb6@j1fa7 j1fb7@j1fa9 j1fb8@j1fab j1fb9@j1fad j1fba@j1faf j1fbb@j1fb1 j1fbc@j1fb3 j1fbd@j1fb5) ((lambda (j1fc6@kwd* j1fc7@mod** j1fc8@mr j1fc9@r j1fca@m-exp-lab* j1fcb@m-exp-id* j1fcc@rhs* j1fcd@lex*) (begin (vector-for-each (lambda (j1fd6@id j1fd7@lab) (jb10@extend-rib! j1f38@rib j1fd6@id j1fd7@lab)) j1fcb@m-exp-id* j1fca@m-exp-lab*) (jdb7@chi-body* (cdr j1f30@e*) j1fc9@r j1fc8@mr j1fcd@lex* j1fcc@rhs* j1fc7@mod** j1fc6@kwd* j1f37@exp* j1f38@rib j1f39@top?))) j1fbd@j1fb5 j1fbc@j1fb3 j1fbb@j1fb1 j1fba@j1faf j1fb9@j1fad j1fb8@j1fab j1fb7@j1fa9 j1fb6@j1fa7))) (if (memv j1f5a@t '(library)) (begin (je21@library-expander (jb6e@stx->datum j1f44@e)) (jdb7@chi-body* (cdr j1f30@e*) j1f31@r j1f32@mr j1f33@lex* j1f34@rhs* j1f35@mod** j1f58@kwd* j1f37@exp* j1f38@rib j1f39@top?)) (if (memv j1f5a@t '(export)) ((lambda (j1fda@t) ((lambda (j1fdc@ls/false) (if j1fdc@ls/false (apply (lambda (j1fde@exp-decl*) (jdb7@chi-body* (cdr j1f30@e*) j1f31@r j1f32@mr j1f33@lex* j1f34@rhs* j1f35@mod** j1f58@kwd* (append j1fde@exp-decl* j1f37@exp*) j1f38@rib j1f39@top?)) j1fdc@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j1fda@t))) (jd5f@syntax-dispatch j1fda@t '(_ . each-any)))) j1f44@e) (if (memv j1f5a@t '(import)) ((lambda () ((lambda (j1fe1@module-import? j1fe3@module-import j1fe5@library-import) (begin (set! j1fe1@module-import? (lambda (j2034@e) ((lambda (j2036@t) ((lambda (j2038@ls/false) (if (and j2038@ls/false (apply (lambda (j203a@id) (jb5a@id? j203a@id)) j2038@ls/false)) (apply (lambda (j203c@id) '#t) j2038@ls/false) ((lambda (j203e@t) ((lambda (j2040@ls/false) (if j2040@ls/false (apply (lambda (j2042@imp*) '#f) j2040@ls/false) ((lambda (j2044@t) ((lambda (j2046@ls/false) (if j2046@ls/false (apply (lambda () (je3f@syntax-violation '#f '"malformed import form" j2034@e)) j2046@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j2044@t))) (jd5f@syntax-dispatch j2044@t '_))) j203e@t))) (jd5f@syntax-dispatch j203e@t '(_ . each-any)))) j2036@t))) (jd5f@syntax-dispatch j2036@t '(_ any)))) j2034@e))) (set! j1fe3@module-import (lambda (j2012@e j2013@r) ((lambda (j2016@t) ((lambda (j2018@ls/false) (if (and j2018@ls/false (apply (lambda (j201a@id) (jb5a@id? j201a@id)) j2018@ls/false)) (apply (lambda (j201c@id) (call-with-values (lambda () (jb7c@syntax-type j201c@id j2013@r)) (lambda (j2024@j201f j2025@j2021 j2026@j2023) ((lambda (j202a@kwd j202b@value j202c@type) ((lambda (j2030@t) (if (memv j2030@t '($module)) ((lambda (j2032@iface) (values (jdb3@module-interface-exp-id* j2032@iface j201c@id) (jdad@module-interface-exp-lab-vec j2032@iface))) j202b@value) (je3f@syntax-violation '#f '"invalid import" j2012@e))) j202c@type)) j2026@j2023 j2025@j2021 j2024@j201f)))) j2018@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j2016@t))) (jd5f@syntax-dispatch j2016@t '(_ any)))) j2012@e))) (set! j1fe5@library-import (lambda (j1ff6@e) ((lambda (j1ff8@t) ((lambda (j1ffa@ls/false) (if j1ffa@ls/false (apply (lambda (j1ffc@ctxt j1ffd@imp*) (call-with-values (lambda () (jdc1@parse-import-spec* (je45@syntax->datum j1ffd@imp*))) (lambda (j2004@j2001 j2005@j2003) ((lambda (j2008@subst-labels j2009@subst-names) (values (vector-map (lambda (j200c@name) (jb3a@datum->stx j1ffc@ctxt j200c@name)) j2009@subst-names) j2008@subst-labels)) j2005@j2003 j2004@j2001)))) j1ffa@ls/false) ((lambda (j200e@t) ((lambda (j2010@ls/false) (if j2010@ls/false (apply (lambda () (je3f@syntax-violation '#f '"invalid import form" j1ff6@e)) j2010@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j200e@t))) (jd5f@syntax-dispatch j200e@t '_))) j1ff8@t))) (jd5f@syntax-dispatch j1ff8@t '(any . each-any)))) j1ff6@e))) (begin (call-with-values (lambda () (if (j1fe1@module-import? j1f44@e) (j1fe3@module-import j1f44@e j1f31@r) (j1fe5@library-import j1f44@e))) (lambda (j1fea@j1fe7 j1feb@j1fe9) ((lambda (j1fee@lab* j1fef@id*) (vector-for-each (lambda (j1ff2@id j1ff3@lab) (jb10@extend-rib! j1f38@rib j1ff2@id j1ff3@lab)) j1fef@id* j1fee@lab*)) j1feb@j1fe9 j1fea@j1fe7))) (jdb7@chi-body* (cdr j1f30@e*) j1f31@r j1f32@mr j1f33@lex* j1f34@rhs* j1f35@mod** j1f58@kwd* j1f37@exp* j1f38@rib j1f39@top?)))) '#f '#f '#f))) (if j1f39@top? (jdb7@chi-body* (cdr j1f30@e*) j1f31@r j1f32@mr (cons (jae2@gen-lexical 'dummy) j1f33@lex*) (cons (cons 'top-expr j1f44@e) j1f34@rhs*) j1f35@mod** j1f58@kwd* j1f37@exp* j1f38@rib j1f39@top?) (values j1f30@e* j1f31@r j1f32@mr j1f33@lex* j1f34@rhs* j1f35@mod** j1f58@kwd* j1f37@exp*)))))))))))))) j1f54@type)) (if (jb5a@id? j1f52@kwd) (cons j1f52@kwd j1f36@kwd*) j1f36@kwd*))) j1f4e@j1f4b j1f4d@j1f49 j1f4c@j1f47)))) (car j1f30@e*))))) (set! jdb9@expand-transformer (lambda (j2048@expr j2049@r) ((lambda (j204c@rtc) ((lambda (j204e@expanded-rhs) (begin (for-each ((lambda (j2050@mark-visit) (lambda (j2052@x) (begin (j985@j7d3@invoke-library j2052@x) (j2050@mark-visit j2052@x)))) (jdc9@vis-collector)) (j204c@rtc)) j204e@expanded-rhs)) ((lambda (j205c@j2055 j205d@j2057 j205e@j2059 j205f@j205b) ((lambda (j2064@swap) (dynamic-wind j2064@swap (lambda () (jd81@chi-expr j2048@expr j2049@r j2049@r)) j2064@swap)) (lambda () (begin ((lambda (j2066@t) (begin (j205c@j2055 j205e@j2059) (set! j205e@j2059 j2066@t))) (j205c@j2055)) ((lambda (j2068@t) (begin (j205d@j2057 j205f@j205b) (set! j205f@j205b j2068@t))) (j205d@j2057)))))) jdc7@inv-collector jdc9@vis-collector j204c@rtc (lambda (j206a@x) (values))))) (jdc5@make-collector)))) (set! jdbb@parse-exports (lambda (j206c@exp*) ((letrec ((j206e@f (lambda (j2070@exp* j2071@int* j2072@ext*) (if (null? j2070@exp*) (begin (if (not (jb62@valid-bound-ids? j2072@ext*)) (je3f@syntax-violation 'export '"invalid exports" (jd95@find-dups j2072@ext*)) (void)) (values (map je45@syntax->datum j2072@ext*) j2071@int*)) ((lambda (j2076@t) ((lambda (j2078@ls/false) (if j2078@ls/false (apply (lambda (j207a@rename j207b@i* j207c@e*) (begin (if (not (and (eq? (je45@syntax->datum j207a@rename) 'rename) (for-all jb5a@id? j207b@i*) (for-all jb5a@id? j207c@e*))) (je3f@syntax-violation 'export '"invalid export specifier" (car j2070@exp*)) (void)) (j206e@f (cdr j2070@exp*) (append j207b@i* j2071@int*) (append j207c@e* j2072@ext*)))) j2078@ls/false) ((lambda (j2080@t) ((lambda (j2082@ls/false) (if j2082@ls/false (apply (lambda (j2084@ie) (begin (if (not (jb5a@id? j2084@ie)) (je3f@syntax-violation 'export '"invalid export" j2084@ie) (void)) (j206e@f (cdr j2070@exp*) (cons j2084@ie j2071@int*) (cons j2084@ie j2072@ext*)))) j2082@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j2080@t))) (jd5f@syntax-dispatch j2080@t 'any))) j2076@t))) (jd5f@syntax-dispatch j2076@t '(any . #(each (any any)))))) (car j2070@exp*)))))) j206e@f) j206c@exp* '() '()))) (set! jdbd@parse-library-name (lambda (j2086@spec) ((lambda (j2089@parse) (begin (set! j2089@parse (lambda (j2096@x) ((lambda (j2098@t) ((lambda (j209a@ls/false) (if (and j209a@ls/false (apply (lambda (j209c@v*) (for-all (lambda (j209e@x) ((lambda (j20a0@x) (and (integer? j20a0@x) (exact? j20a0@x))) (je45@syntax->datum j209e@x))) j209c@v*)) j209a@ls/false)) (apply (lambda (j20a2@v*) (values '() (map je45@syntax->datum j20a2@v*))) j209a@ls/false) ((lambda (j20a4@t) ((lambda (j20a6@ls/false) (if (and j20a6@ls/false (apply (lambda (j20a8@x j20a9@rest) (symbol? (je45@syntax->datum j20a8@x))) j20a6@ls/false)) (apply (lambda (j20ac@x j20ad@rest) (call-with-values (lambda () (j2089@parse j20ad@rest)) (lambda (j20b4@j20b1 j20b5@j20b3) ((lambda (j20b8@v* j20b9@x*) (values (cons (je45@syntax->datum j20ac@x) j20b9@x*) j20b8@v*)) j20b5@j20b3 j20b4@j20b1)))) j20a6@ls/false) ((lambda (j20bc@t) ((lambda (j20be@ls/false) (if j20be@ls/false (apply (lambda () (values '() '())) j20be@ls/false) ((lambda (j20c0@t) ((lambda (j20c2@ls/false) (if j20c2@ls/false (apply (lambda () (je3f@syntax-violation '#f '"invalid library name" j2086@spec)) j20c2@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j20c0@t))) (jd5f@syntax-dispatch j20c0@t '_))) j20bc@t))) (jd5f@syntax-dispatch j20bc@t '()))) j20a4@t))) (jd5f@syntax-dispatch j20a4@t '(any . any)))) j2098@t))) (jd5f@syntax-dispatch j2098@t '(each-any)))) j2096@x))) (call-with-values (lambda () (j2089@parse j2086@spec)) (lambda (j208e@j208b j208f@j208d) ((lambda (j2092@ver* j2093@name*) (begin (if (null? j2093@name*) (je3f@syntax-violation '#f '"empty library name" j2086@spec) (void)) (values j2093@name* j2092@ver*))) j208f@j208d j208e@j208b))))) '#f))) (set! jdbf@parse-library (lambda (j20c4@e) ((lambda (j20c6@t) ((lambda (j20c8@ls/false) (if (and j20c8@ls/false (apply (lambda (j20ca@library j20cb@name* j20cc@export j20cd@exp* j20ce@import j20cf@imp* j20d0@b*) (and (eq? (je45@syntax->datum j20cc@export) 'export) (eq? (je45@syntax->datum j20ce@import) 'import) (eq? (je45@syntax->datum j20ca@library) 'library))) j20c8@ls/false)) (apply (lambda (j20d8@library j20d9@name* j20da@export j20db@exp* j20dc@import j20dd@imp* j20de@b*) (values j20d9@name* j20db@exp* j20dd@imp* j20de@b*)) j20c8@ls/false) ((lambda (j20e6@t) ((lambda (j20e8@ls/false) (if j20e8@ls/false (apply (lambda () (je3f@syntax-violation '#f '"malformed library" j20c4@e)) j20e8@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j20e6@t))) (jd5f@syntax-dispatch j20e6@t '_))) j20c6@t))) (jd5f@syntax-dispatch j20c6@t '(any each-any (any . each-any) (any . each-any) . each-any)))) j20c4@e))) (set! jdc1@parse-import-spec* ((lambda () ((lambda (j20eb@idsyn? j20ed@dup-error j20ef@merge-substs j20f1@exclude* j20f3@find* j20f5@rem* j20f7@remove-dups j20f9@parse-library-name j20fb@import-library j20fd@get-import j20ff@add-imports!) (begin (set! j20eb@idsyn? (lambda (j22f4@x) (symbol? (je45@syntax->datum j22f4@x)))) (set! j20ed@dup-error (lambda (j22f2@name) (je3f@syntax-violation 'import '"two imports with different bindings" j22f2@name))) (set! j20ef@merge-substs (lambda (j22e0@s j22e1@subst) ((lambda (j22e5@insert-to-subst) (begin (set! j22e5@insert-to-subst (lambda (j22e6@a j22e7@subst) ((lambda (j22ea@name j22eb@label) ((lambda (j22ee@t) (if j22ee@t ((lambda (j22f0@x) (if (eq? (cdr j22f0@x) j22eb@label) j22e7@subst (j20ed@dup-error j22ea@name))) j22ee@t) (cons j22e6@a j22e7@subst))) (assq j22ea@name j22e7@subst))) (car j22e6@a) (cdr j22e6@a)))) (if (null? j22e0@s) j22e1@subst (j22e5@insert-to-subst (car j22e0@s) (j20ef@merge-substs (cdr j22e0@s) j22e1@subst))))) '#f))) (set! j20f1@exclude* (lambda (j22b0@sym* j22b1@subst) ((lambda (j22b5@exclude) (begin (set! j22b5@exclude (lambda (j22ce@sym j22cf@subst) (if (null? j22cf@subst) (je3f@syntax-violation 'import '"cannot rename unbound identifier" j22ce@sym) (if (eq? j22ce@sym (caar j22cf@subst)) (values (cdar j22cf@subst) (cdr j22cf@subst)) ((lambda (j22d2@a) (call-with-values (lambda () (j22b5@exclude j22ce@sym (cdr j22cf@subst))) (lambda (j22d8@j22d5 j22d9@j22d7) ((lambda (j22dc@subst j22dd@old) (values j22dd@old (cons j22d2@a j22dc@subst))) j22d9@j22d7 j22d8@j22d5)))) (car j22cf@subst)))))) (if (null? j22b0@sym*) (values '() j22b1@subst) (call-with-values (lambda () (j22b5@exclude (car j22b0@sym*) j22b1@subst)) (lambda (j22ba@j22b7 j22bb@j22b9) ((lambda (j22be@subst j22bf@old) (call-with-values (lambda () (j20f1@exclude* (cdr j22b0@sym*) j22be@subst)) (lambda (j22c6@j22c3 j22c7@j22c5) ((lambda (j22ca@subst j22cb@old*) (values (cons j22bf@old j22cb@old*) j22ca@subst)) j22c7@j22c5 j22c6@j22c3)))) j22bb@j22b9 j22ba@j22b7)))))) '#f))) (set! j20f3@find* (lambda (j22a8@sym* j22a9@subst) (map (lambda (j22ac@x) ((lambda (j22ae@t) (if j22ae@t (cdr j22ae@t) (je3f@syntax-violation 'import '"cannot find identifier" j22ac@x))) (assq j22ac@x j22a9@subst))) j22a8@sym*))) (set! j20f5@rem* (lambda (j22a0@sym* j22a1@subst) ((letrec ((j22a4@f (lambda (j22a6@subst) (if (null? j22a6@subst) '() (if (memq (caar j22a6@subst) j22a0@sym*) (j22a4@f (cdr j22a6@subst)) (cons (car j22a6@subst) (j22a4@f (cdr j22a6@subst)))))))) j22a4@f) j22a1@subst))) (set! j20f7@remove-dups (lambda (j229e@ls) (if (null? j229e@ls) '() (if (memq (car j229e@ls) (cdr j229e@ls)) (j20f7@remove-dups (cdr j229e@ls)) (cons (car j229e@ls) (j20f7@remove-dups (cdr j229e@ls))))))) (set! j20f9@parse-library-name (lambda (j21b6@spec) ((lambda (j21b9@subversion? j21bb@subversion-pred j21bd@version-pred) (begin (set! j21b9@subversion? (lambda (j229a@x) ((lambda (j229c@x) (and (integer? j229c@x) (exact? j229c@x) (>= j229c@x '0))) (je45@syntax->datum j229a@x)))) (set! j21bb@subversion-pred (lambda (j223a@x*) ((lambda (j223c@t) ((lambda (j223e@ls/false) (if (and j223e@ls/false (apply (lambda (j2240@n) (j21b9@subversion? j2240@n)) j223e@ls/false)) (apply (lambda (j2242@n) (lambda (j2244@x) (= j2244@x (je45@syntax->datum j2242@n)))) j223e@ls/false) ((lambda (j2246@t) ((lambda (j2248@ls/false) (if (and j2248@ls/false (apply (lambda (j224a@p? j224b@sub*) (eq? (je45@syntax->datum j224a@p?) 'and)) j2248@ls/false)) (apply (lambda (j224e@p? j224f@sub*) ((lambda (j2252@p*) (lambda (j2254@x) (for-all (lambda (j2256@p) (j2256@p j2254@x)) j2252@p*))) (map j21bb@subversion-pred j224f@sub*))) j2248@ls/false) ((lambda (j2258@t) ((lambda (j225a@ls/false) (if (and j225a@ls/false (apply (lambda (j225c@p? j225d@sub*) (eq? (je45@syntax->datum j225c@p?) 'or)) j225a@ls/false)) (apply (lambda (j2260@p? j2261@sub*) ((lambda (j2264@p*) (lambda (j2266@x) (exists (lambda (j2268@p) (j2268@p j2266@x)) j2264@p*))) (map j21bb@subversion-pred j2261@sub*))) j225a@ls/false) ((lambda (j226a@t) ((lambda (j226c@ls/false) (if (and j226c@ls/false (apply (lambda (j226e@p? j226f@sub) (eq? (je45@syntax->datum j226e@p?) 'not)) j226c@ls/false)) (apply (lambda (j2272@p? j2273@sub) ((lambda (j2276@p) (lambda (j2278@x) (not (j2276@p j2278@x)))) (j21bb@subversion-pred j2273@sub))) j226c@ls/false) ((lambda (j227a@t) ((lambda (j227c@ls/false) (if (and j227c@ls/false (apply (lambda (j227e@p? j227f@n) (and (eq? (je45@syntax->datum j227e@p?) '<=) (j21b9@subversion? j227f@n))) j227c@ls/false)) (apply (lambda (j2282@p? j2283@n) (lambda (j2286@x) (<= j2286@x (je45@syntax->datum j2283@n)))) j227c@ls/false) ((lambda (j2288@t) ((lambda (j228a@ls/false) (if (and j228a@ls/false (apply (lambda (j228c@p? j228d@n) (and (eq? (je45@syntax->datum j228c@p?) '>=) (j21b9@subversion? j228d@n))) j228a@ls/false)) (apply (lambda (j2290@p? j2291@n) (lambda (j2294@x) (>= j2294@x (je45@syntax->datum j2291@n)))) j228a@ls/false) ((lambda (j2296@t) ((lambda (j2298@ls/false) (if j2298@ls/false (apply (lambda () (je3f@syntax-violation 'import '"invalid sub-version spec" j21b6@spec j223a@x*)) j2298@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j2296@t))) (jd5f@syntax-dispatch j2296@t '_))) j2288@t))) (jd5f@syntax-dispatch j2288@t '(any any)))) j227a@t))) (jd5f@syntax-dispatch j227a@t '(any any)))) j226a@t))) (jd5f@syntax-dispatch j226a@t '(any any)))) j2258@t))) (jd5f@syntax-dispatch j2258@t '(any . each-any)))) j2246@t))) (jd5f@syntax-dispatch j2246@t '(any . each-any)))) j223c@t))) (jd5f@syntax-dispatch j223c@t 'any))) j223a@x*))) (set! j21bd@version-pred (lambda (j21ea@x*) ((lambda (j21ec@t) ((lambda (j21ee@ls/false) (if j21ee@ls/false (apply (lambda () (lambda (j21f0@x) '#t)) j21ee@ls/false) ((lambda (j21f2@t) ((lambda (j21f4@ls/false) (if (and j21f4@ls/false (apply (lambda (j21f6@c j21f7@ver*) (eq? (je45@syntax->datum j21f6@c) 'and)) j21f4@ls/false)) (apply (lambda (j21fa@c j21fb@ver*) ((lambda (j21fe@p*) (lambda (j2200@x) (for-all (lambda (j2202@p) (j2202@p j2200@x)) j21fe@p*))) (map j21bd@version-pred j21fb@ver*))) j21f4@ls/false) ((lambda (j2204@t) ((lambda (j2206@ls/false) (if (and j2206@ls/false (apply (lambda (j2208@c j2209@ver*) (eq? (je45@syntax->datum j2208@c) 'or)) j2206@ls/false)) (apply (lambda (j220c@c j220d@ver*) ((lambda (j2210@p*) (lambda (j2212@x) (exists (lambda (j2214@p) (j2214@p j2212@x)) j2210@p*))) (map j21bd@version-pred j220d@ver*))) j2206@ls/false) ((lambda (j2216@t) ((lambda (j2218@ls/false) (if (and j2218@ls/false (apply (lambda (j221a@c j221b@ver) (eq? (je45@syntax->datum j221a@c) 'not)) j2218@ls/false)) (apply (lambda (j221e@c j221f@ver) ((lambda (j2222@p) (lambda (j2224@x) (not (j2222@p j2224@x)))) (j21bd@version-pred j221f@ver))) j2218@ls/false) ((lambda (j2226@t) ((lambda (j2228@ls/false) (if j2228@ls/false (apply (lambda (j222a@sub*) ((lambda (j222c@p*) (lambda (j222e@x) ((letrec ((j2230@f (lambda (j2232@p* j2233@x) (if (null? j2232@p*) '#t (if (null? j2233@x) '#f (and ((car j2232@p*) (car j2233@x)) (j2230@f (cdr j2232@p*) (cdr j2233@x)))))))) j2230@f) j222c@p* j222e@x))) (map j21bb@subversion-pred j222a@sub*))) j2228@ls/false) ((lambda (j2236@t) ((lambda (j2238@ls/false) (if j2238@ls/false (apply (lambda () (je3f@syntax-violation 'import '"invalid version spec" j21b6@spec j21ea@x*)) j2238@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j2236@t))) (jd5f@syntax-dispatch j2236@t '_))) j2226@t))) (jd5f@syntax-dispatch j2226@t 'each-any))) j2216@t))) (jd5f@syntax-dispatch j2216@t '(any any)))) j2204@t))) (jd5f@syntax-dispatch j2204@t '(any . each-any)))) j21f2@t))) (jd5f@syntax-dispatch j21f2@t '(any . each-any)))) j21ec@t))) (jd5f@syntax-dispatch j21ec@t '()))) j21ea@x*))) ((letrec ((j21be@f (lambda (j21c0@x) ((lambda (j21c2@t) ((lambda (j21c4@ls/false) (if j21c4@ls/false (apply (lambda (j21c6@version-spec*) (values '() (j21bd@version-pred j21c6@version-spec*))) j21c4@ls/false) ((lambda (j21c8@t) ((lambda (j21ca@ls/false) (if (and j21ca@ls/false (apply (lambda (j21cc@x j21cd@x*) (j20eb@idsyn? j21cc@x)) j21ca@ls/false)) (apply (lambda (j21d0@x j21d1@x*) (call-with-values (lambda () (j21be@f j21d1@x*)) (lambda (j21d8@j21d5 j21d9@j21d7) ((lambda (j21dc@pred j21dd@name) (values (cons (je45@syntax->datum j21d0@x) j21dd@name) j21dc@pred)) j21d9@j21d7 j21d8@j21d5)))) j21ca@ls/false) ((lambda (j21e0@t) ((lambda (j21e2@ls/false) (if j21e2@ls/false (apply (lambda () (values '() (lambda (j21e4@x) '#t))) j21e2@ls/false) ((lambda (j21e6@t) ((lambda (j21e8@ls/false) (if j21e8@ls/false (apply (lambda () (je3f@syntax-violation '#f '"invalid import spec" j21b6@spec)) j21e8@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j21e6@t))) (jd5f@syntax-dispatch j21e6@t '_))) j21e0@t))) (jd5f@syntax-dispatch j21e0@t '()))) j21c8@t))) (jd5f@syntax-dispatch j21c8@t '(any . any)))) j21c2@t))) (jd5f@syntax-dispatch j21c2@t '(each-any)))) j21c0@x)))) j21be@f) j21b6@spec))) '#f '#f '#f))) (set! j20fb@import-library (lambda (j21a6@spec*) (call-with-values (lambda () (j20f9@parse-library-name j21a6@spec*)) (lambda (j21ac@j21a9 j21ad@j21ab) ((lambda (j21b0@pred j21b1@name) (begin (if (null? j21b1@name) (je3f@syntax-violation 'import '"empty library name" j21a6@spec*) (void)) ((lambda (j21b4@lib) (begin (if (not j21b4@lib) (je3f@syntax-violation 'import '"cannot find library with required name" j21b1@name) (void)) (if (not (j21b0@pred (j958@j779@library-version j21b4@lib))) (je3f@syntax-violation 'import '"library does not satisfy version specification" j21a6@spec* j21b4@lib) (void)) ((jdcb@imp-collector) j21b4@lib) (j960@j789@library-subst j21b4@lib))) (j97e@j7c5@find-library-by-name j21b1@name)))) j21ad@j21ab j21ac@j21a9))))) (set! j20fd@get-import (lambda (j2118@spec) ((lambda (j211a@t) ((lambda (j211c@ls/false) (if (and j211c@ls/false (apply (lambda (j211e@x j211f@x*) (not (memq (je45@syntax->datum j211e@x) '(for rename except only prefix library)))) j211c@ls/false)) (apply (lambda (j2122@x j2123@x*) (j20fb@import-library (cons j2122@x j2123@x*))) j211c@ls/false) ((lambda (j2126@t) ((lambda (j2128@ls/false) (if (and j2128@ls/false (apply (lambda (j212a@rename j212b@isp j212c@old* j212d@new*) (and (eq? (je45@syntax->datum j212a@rename) 'rename) (for-all j20eb@idsyn? j212c@old*) (for-all j20eb@idsyn? j212d@new*))) j2128@ls/false)) (apply (lambda (j2132@rename j2133@isp j2134@old* j2135@new*) ((lambda (j213a@subst j213b@old* j213c@new*) ((lambda (j2140@old-label*) ((lambda (j2142@subst) (j20ef@merge-substs (map cons j213c@new* j2140@old-label*) j2142@subst)) (j20f5@rem* j213b@old* j213a@subst))) (j20f3@find* j213b@old* j213a@subst))) (j20fd@get-import j2133@isp) (map je45@syntax->datum j2134@old*) (map je45@syntax->datum j2135@new*))) j2128@ls/false) ((lambda (j2144@t) ((lambda (j2146@ls/false) (if (and j2146@ls/false (apply (lambda (j2148@except j2149@isp j214a@sym*) (and (eq? (je45@syntax->datum j2148@except) 'except) (for-all j20eb@idsyn? j214a@sym*))) j2146@ls/false)) (apply (lambda (j214e@except j214f@isp j2150@sym*) ((lambda (j2154@subst) (j20f5@rem* (map je45@syntax->datum j2150@sym*) j2154@subst)) (j20fd@get-import j214f@isp))) j2146@ls/false) ((lambda (j2156@t) ((lambda (j2158@ls/false) (if (and j2158@ls/false (apply (lambda (j215a@only j215b@isp j215c@sym*) (and (eq? (je45@syntax->datum j215a@only) 'only) (for-all j20eb@idsyn? j215c@sym*))) j2158@ls/false)) (apply (lambda (j2160@only j2161@isp j2162@sym*) ((lambda (j2166@subst j2167@sym*) ((lambda (j216a@sym*) ((lambda (j216c@lab*) (map cons j216a@sym* j216c@lab*)) (j20f3@find* j216a@sym* j2166@subst))) (j20f7@remove-dups j2167@sym*))) (j20fd@get-import j2161@isp) (map je45@syntax->datum j2162@sym*))) j2158@ls/false) ((lambda (j216e@t) ((lambda (j2170@ls/false) (if (and j2170@ls/false (apply (lambda (j2172@prefix j2173@isp j2174@p) (and (eq? (je45@syntax->datum j2172@prefix) 'prefix) (j20eb@idsyn? j2174@p))) j2170@ls/false)) (apply (lambda (j2178@prefix j2179@isp j217a@p) ((lambda (j217e@subst j217f@prefix) (map (lambda (j2182@x) (cons (string->symbol (string-append j217f@prefix (symbol->string (car j2182@x)))) (cdr j2182@x))) j217e@subst)) (j20fd@get-import j2179@isp) (symbol->string (je45@syntax->datum j217a@p)))) j2170@ls/false) ((lambda (j2184@t) ((lambda (j2186@ls/false) (if (and j2186@ls/false (apply (lambda (j2188@library j2189@spec*) (eq? (je45@syntax->datum j2188@library) 'library)) j2186@ls/false)) (apply (lambda (j218c@library j218d@spec*) (j20fb@import-library j218d@spec*)) j2186@ls/false) ((lambda (j2190@t) ((lambda (j2192@ls/false) (if (and j2192@ls/false (apply (lambda (j2194@for j2195@isp j2196@rest) (eq? (je45@syntax->datum j2194@for) 'for)) j2192@ls/false)) (apply (lambda (j219a@for j219b@isp j219c@rest) (j20fd@get-import j219b@isp)) j2192@ls/false) ((lambda (j21a0@t) ((lambda (j21a2@ls/false) (if j21a2@ls/false (apply (lambda (j21a4@spec) (je3f@syntax-violation 'import '"invalid import spec" j21a4@spec)) j21a2@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j21a0@t))) (jd5f@syntax-dispatch j21a0@t 'any))) j2190@t))) (jd5f@syntax-dispatch j2190@t '(any any . any)))) j2184@t))) (jd5f@syntax-dispatch j2184@t '(any each-any)))) j216e@t))) (jd5f@syntax-dispatch j216e@t '(any any any)))) j2156@t))) (jd5f@syntax-dispatch j2156@t '(any any . each-any)))) j2144@t))) (jd5f@syntax-dispatch j2144@t '(any any . each-any)))) j2126@t))) (jd5f@syntax-dispatch j2126@t '(any any . #(each (any any)))))) j211a@t))) (jd5f@syntax-dispatch j211a@t '(any . each-any)))) j2118@spec))) (set! j20ff@add-imports! (lambda (j2108@imp j2109@h) ((lambda (j210c@subst) (for-each (lambda (j210e@x) ((lambda (j2110@name j2111@label) ((lambda (j2114@t) (if j2114@t ((lambda (j2116@l) (if (not (eq? j2116@l j2111@label)) (j20ed@dup-error j2110@name) (void))) j2114@t) (hashtable-set! j2109@h j2110@name j2111@label))) (hashtable-ref j2109@h j2110@name '#f))) (car j210e@x) (cdr j210e@x))) j210c@subst)) (j20fd@get-import j2108@imp)))) (lambda (j2100@imp*) ((letrec ((j2102@f (lambda (j2104@imp* j2105@h) (if (null? j2104@imp*) (hashtable-entries j2105@h) (begin (j20ff@add-imports! (car j2104@imp*) j2105@h) (j2102@f (cdr j2104@imp*) j2105@h)))))) j2102@f) j2100@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! jdc3@make-top-rib (lambda (j22f6@names j22f7@labels) ((lambda (j22fa@rib) (begin (vector-for-each (lambda (j22fc@name j22fd@label) (begin (if (not (symbol? j22fc@name)) (error 'make-top-rib '"BUG: not a symbol" j22fc@name) (void)) (jb12@extend-rib/nc! j22fa@rib (make-simple-struct 'stx '5 (list j22fc@name jade@top-mark* '() '())) j22fd@label))) j22f6@names j22f7@labels) j22fa@rib)) (jb0e@make-empty-rib)))) (set! jdc5@make-collector (lambda () ((lambda (j2300@ls) (lambda j2304 ((lambda (j2305) (if (= j2305 '0) (apply (lambda () j2300@ls) j2304) (if (= j2305 '1) (apply (lambda (j2302@x) (set! j2300@ls (jad7@set-cons j2302@x j2300@ls))) j2304) (error 'apply '"invalid arg count")))) (length j2304)))) '()))) (set! jdc7@inv-collector (j6b9@j598@make-parameter (lambda j2306@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (j2308@x) (begin (if (not (procedure? j2308@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" j2308@x) (void)) j2308@x)))) (set! jdc9@vis-collector (j6b9@j598@make-parameter (lambda j230a@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (j230c@x) (begin (if (not (procedure? j230c@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" j230c@x) (void)) j230c@x)))) (set! jdcb@imp-collector (j6b9@j598@make-parameter (lambda j230e@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (j2310@x) (begin (if (not (procedure? j2310@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" j2310@x) (void)) j2310@x)))) (set! jdcd@chi-library-internal (lambda (j2312@e* j2313@rib j2314@top?) (call-with-values (lambda () (jdb7@chi-body* j2312@e* '() '() '() '() '() '() '() j2313@rib j2314@top?)) (lambda (j2328@j2319 j2329@j231b j232a@j231d j232b@j231f j232c@j2321 j232d@j2323 j232e@j2325 j232f@j2327) ((lambda (j2338@exp* j2339@_kwd* j233a@mod** j233b@rhs* j233c@lex* j233d@mr j233e@r j233f@e*) (values (append (apply append (reverse j233a@mod**)) j233f@e*) j233e@r j233d@mr (reverse j233c@lex*) (reverse j233b@rhs*) j2338@exp*)) j232f@j2327 j232e@j2325 j232d@j2323 j232c@j2321 j232b@j231f j232a@j231d j2329@j231b j2328@j2319))))) (set! jdcf@chi-interaction-expr (lambda (j2348@e j2349@rib j234a@r) (call-with-values (lambda () (jdb7@chi-body* (list j2348@e) j234a@r j234a@r '() '() '() '() '() j2349@rib '#t)) (lambda (j235e@j234f j235f@j2351 j2360@j2353 j2361@j2355 j2362@j2357 j2363@j2359 j2364@j235b j2365@j235d) ((lambda (j236e@_exp* j236f@_kwd* j2370@mod** j2371@rhs* j2372@lex* j2373@mr j2374@r j2375@e*) ((lambda (j237e@e*) ((lambda (j2380@e) (values j2380@e j2374@r)) (if (null? j237e@e*) (jac2@ja32@build-void) (if (null? (cdr j237e@e*)) (car j237e@e*) (jac1@ja30@build-sequence '#f j237e@e*))))) (jd8f@expand-interaction-rhs*/init* (reverse j2372@lex*) (reverse j2371@rhs*) (append (apply append (reverse j2370@mod**)) j2375@e*) j2374@r j2373@mr))) j2365@j235d j2364@j235b j2363@j2359 j2362@j2357 j2361@j2355 j2360@j2353 j235f@j2351 j235e@j234f))))) (set! jdd1@library-body-expander (lambda (j2382@name j2383@main-exp* j2384@imp* j2385@b* j2386@top?) ((lambda (j238d@itc) (begin (set! j238d@itc (jdc5@make-collector)) ((lambda (j2396@j238f j2397@j2391 j2398@j2393 j2399@j2395) ((lambda (j239e@swap) (dynamic-wind j239e@swap (lambda () (call-with-values (lambda () (jdc1@parse-import-spec* j2384@imp*)) (lambda (j23a4@j23a1 j23a5@j23a3) ((lambda (j23a8@subst-labels j23a9@subst-names) ((lambda (j23ac@rib) ((lambda (j23af@wrap) (begin (set! j23af@wrap (lambda (j242a@x) (make-simple-struct 'stx '5 (list j242a@x jade@top-mark* (list j23ac@rib) '())))) ((lambda (j23b0@b* j23b1@main-exp* j23b2@rtc j23b3@vtc) ((lambda (j23c0@j23b9 j23c1@j23bb j23c2@j23bd j23c3@j23bf) ((lambda (j23c8@swap) (dynamic-wind j23c8@swap (lambda () (call-with-values (lambda () (jdcd@chi-library-internal j23b0@b* j23ac@rib j2386@top?)) (lambda (j23d6@j23cb j23d7@j23cd j23d8@j23cf j23d9@j23d1 j23da@j23d3 j23db@j23d5) ((lambda (j23e2@internal-exp* j23e3@rhs* j23e4@lex* j23e5@mr j23e6@r j23e7@init*) (call-with-values (lambda () (jdbb@parse-exports (append j23b1@main-exp* j23e2@internal-exp*))) (lambda (j23f2@j23ef j23f3@j23f1) ((lambda (j23f6@exp-id* j23f7@exp-name*) (begin (jb16@seal-rib! j23ac@rib) ((lambda (j23fa@init*) ((lambda (j23fc@rhs*) ((lambda () (begin (jb18@unseal-rib! j23ac@rib) ((lambda (j23fe@loc* j23ff@export-subst) ((lambda (j2403@errstr) (begin (set! j2403@errstr '"attempt to export mutated variable") (call-with-values (lambda () (je2b@make-export-env/macros j23e4@lex* j23fe@loc* j23e6@r)) (lambda (j240a@j2405 j240b@j2407 j240c@j2409) ((lambda (j2410@macro* j2411@global* j2412@export-env) (begin (for-each (lambda (j2416@s) ((lambda (j2418@name j2419@label) ((lambda (j241c@p) (if j241c@p ((lambda (j241e@b) ((lambda (j2420@type) (if (eq? j2420@type 'mutable) (je3f@syntax-violation 'export j2403@errstr j2418@name) (void))) (car j241e@b))) (cdr j241c@p)) (void))) (assq j2419@label j2412@export-env))) (car j2416@s) (cdr j2416@s))) j23ff@export-subst) ((lambda (j2422@invoke-body j2423@invoke-definitions) (values (j238d@itc) (j23b2@rtc) (j23b3@vtc) (jac1@ja30@build-sequence '#f (append j2423@invoke-definitions (list j2422@invoke-body))) j2410@macro* j23ff@export-subst j2412@export-env)) (jac4@ja36@build-letrec* '#f j23e4@lex* j23fc@rhs* (je27@build-exports j2411@global* j23fa@init*)) (map jabd@j98d@build-global-define (map cdr j2411@global*))))) j240c@j2409 j240b@j2407 j240a@j2405))))) '#f)) (map jae4@gen-global j23e4@lex*) (je29@make-export-subst j23f7@exp-name* j23f6@exp-id*)))))) (jd91@chi-rhs* j23e3@rhs* j23e6@r j23e5@mr))) (jd7d@chi-expr* j23e7@init* j23e6@r j23e5@mr)))) j23f3@j23f1 j23f2@j23ef)))) j23db@j23d5 j23da@j23d3 j23d9@j23d1 j23d8@j23cf j23d7@j23cd j23d6@j23cb)))) j23c8@swap)) (lambda () (begin ((lambda (j2426@t) (begin (j23c0@j23b9 j23c2@j23bd) (set! j23c2@j23bd j2426@t))) (j23c0@j23b9)) ((lambda (j2428@t) (begin (j23c1@j23bb j23c3@j23bf) (set! j23c3@j23bf j2428@t))) (j23c1@j23bb)))))) jdc7@inv-collector jdc9@vis-collector j23b2@rtc j23b3@vtc)) (map j23af@wrap j2385@b*) (map j23af@wrap j2383@main-exp*) (jdc5@make-collector) (jdc5@make-collector)))) '#f)) (jdc3@make-top-rib j23a9@subst-names j23a8@subst-labels))) j23a5@j23a3 j23a4@j23a1)))) j239e@swap)) (lambda () (begin ((lambda (j242c@t) (begin (j2396@j238f j2398@j2393) (set! j2398@j2393 j242c@t))) (j2396@j238f)) ((lambda (j242e@t) (begin (j2397@j2391 j2399@j2395) (set! j2399@j2395 j242e@t))) (j2397@j2391)))))) jdcb@imp-collector je4d@top-level-context j238d@itc '#f))) '#f))) (set! jdd3@core-library-expander (lambda (j2430@e j2431@verify-name) (call-with-values (lambda () (jdbf@parse-library j2430@e)) (lambda (j243c@j2435 j243d@j2437 j243e@j2439 j243f@j243b) ((lambda (j2444@b* j2445@imp* j2446@exp* j2447@name*) (call-with-values (lambda () (jdbd@parse-library-name j2447@name*)) (lambda (j2450@j244d j2451@j244f) ((lambda (j2454@ver j2455@name) (begin (j2431@verify-name j2455@name) (call-with-values (lambda () (jdd1@library-body-expander j2455@name j2446@exp* j2445@imp* j2444@b* '#f)) (lambda (j2466@j2459 j2467@j245b j2468@j245d j2469@j245f j246a@j2461 j246b@j2463 j246c@j2465) ((lambda (j2474@export-env j2475@export-subst j2476@visit-code j2477@invoke-code j2478@visit-req* j2479@invoke-req* j247a@imp*) (values j2455@name j2454@ver j247a@imp* j2479@invoke-req* j2478@visit-req* j2477@invoke-code j2476@visit-code j2475@export-subst j2474@export-env)) j246c@j2465 j246b@j2463 j246a@j2461 j2469@j245f j2468@j245d j2467@j245b j2466@j2459))))) j2451@j244f j2450@j244d)))) j243f@j243b j243e@j2439 j243d@j2437 j243c@j2435))))) (set! jdd5@parse-top-level-program (lambda (j2482@e*) ((lambda (j2484@t) ((lambda (j2486@ls/false) (if (and j2486@ls/false (apply (lambda (j2488@import j2489@imp* j248a@b*) (eq? (je45@syntax->datum j2488@import) 'import)) j2486@ls/false)) (apply (lambda (j248e@import j248f@imp* j2490@b*) (values j248f@imp* j2490@b*)) j2486@ls/false) ((lambda (j2494@t) ((lambda (j2496@ls/false) (if (and j2496@ls/false (apply (lambda (j2498@import j2499@x j249a@y) (eq? (je45@syntax->datum j2498@import) 'import)) j2496@ls/false)) (apply (lambda (j249e@import j249f@x j24a0@y) (je3f@syntax-violation 'expander '"invalid syntax of top-level program" (jb54@syntax-car j2482@e*))) j2496@ls/false) ((lambda (j24a4@t) ((lambda (j24a6@ls/false) (if j24a6@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) j24a6@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j24a4@t))) (jd5f@syntax-dispatch j24a4@t '_))) j2494@t))) (jd5f@syntax-dispatch j2494@t '((any . any) . any)))) j2484@t))) (jd5f@syntax-dispatch j2484@t '((any . each-any) . each-any)))) j2482@e*))) (set! jdd7@top-level-expander (lambda (j24a8@e*) (call-with-values (lambda () (jdd5@parse-top-level-program j24a8@e*)) (lambda (j24ae@j24ab j24af@j24ad) ((lambda (j24b2@b* j24b3@imp*) (call-with-values (lambda () (jdd1@library-body-expander '() '() j24b3@imp* j24b2@b* '#t)) (lambda (j24c4@j24b7 j24c5@j24b9 j24c6@j24bb j24c7@j24bd j24c8@j24bf j24c9@j24c1 j24ca@j24c3) ((lambda (j24d2@export-env j24d3@export-subst j24d4@visit-code j24d5@invoke-code j24d6@visit-req* j24d7@invoke-req* j24d8@imp*) (values j24d7@invoke-req* j24d5@invoke-code)) j24ca@j24c3 j24c9@j24c1 j24c8@j24bf j24c7@j24bd j24c6@j24bb j24c5@j24b9 j24c4@j24b7)))) j24af@j24ad j24ae@j24ab))))) (set! jdd9@rp (j6b6@j592@make-record-printer 'env (lambda (j24e0@x j24e1@p j24e2@wr) (display '"#<environment>" j24e1@p)))) (set! jde3@env? (lambda (j24e6@x) (and (simple-struct? j24e6@x) (eq? (simple-struct-name j24e6@x) 'env)))) (set! jde5@env-names (lambda (j24e8@x) (simple-struct-ref j24e8@x '0))) (set! jde7@set-env-names! (lambda (j24ea@x j24eb@val) (simple-struct-set! j24ea@x '0 j24eb@val))) (set! jde9@env-labels (lambda (j24ee@x) (simple-struct-ref j24ee@x '1))) (set! jdeb@set-env-labels! (lambda (j24f0@x j24f1@val) (simple-struct-set! j24f0@x '1 j24f1@val))) (set! jded@env-itc (lambda (j24f4@x) (simple-struct-ref j24f4@x '2))) (set! jdef@set-env-itc! (lambda (j24f6@x j24f7@val) (simple-struct-set! j24f6@x '2 j24f7@val))) (set! jdf1@dummy '3) (set! jdf3@rp (j6b6@j592@make-record-printer 'interaction-env (lambda (j24fa@x j24fb@p j24fc@wr) (display '"#<environment>" j24fb@p)))) (set! jdfd@interaction-env? (lambda (j2500@x) (and (simple-struct? j2500@x) (eq? (simple-struct-name j2500@x) 'interaction-env)))) (set! jdff@interaction-env-rib (lambda (j2502@x) (simple-struct-ref j2502@x '0))) (set! je01@set-interaction-env-rib! (lambda (j2504@x j2505@val) (simple-struct-set! j2504@x '0 j2505@val))) (set! je03@interaction-env-r (lambda (j2508@x) (simple-struct-ref j2508@x '1))) (set! je05@set-interaction-env-r! (lambda (j250a@x j250b@val) (simple-struct-set! j250a@x '1 j250b@val))) (set! je07@interaction-env-locs (lambda (j250e@x) (simple-struct-ref j250e@x '2))) (set! je09@set-interaction-env-locs! (lambda (j2510@x j2511@val) (simple-struct-set! j2510@x '2 j2511@val))) (set! je0b@dummy '3) (set! je0d@interaction-environment-symbols (lambda () (je15@environment-symbols (je4b@interaction-environment)))) (set! je0f@environment-bindings (lambda (j2514@e) (vector->list (vector-map (lambda (j2516@name j2517@label) (je11@parse-binding (cons j2516@name (j984@j7d1@imported-label->binding j2517@label)))) (jde5@env-names j2514@e) (jde9@env-labels j2514@e))))) (set! je11@parse-binding (lambda (j251a@b) (cons (car j251a@b) ((lambda (j251c@t) (if (memv j251c@t '(core-prim global)) 'procedure (if (memv j251c@t '(core-macro macro global-macro)) 'syntax (if (memv j251c@t '($core-rtd)) 'record (if (eq? (car j251a@b) (cadr j251a@b)) 'syntax 'unknown))))) (cadr j251a@b))))) (set! je13@environment? (lambda (j251e@x) (or (jde3@env? j251e@x) (jdfd@interaction-env? j251e@x)))) (set! je15@environment-symbols (lambda (j2520@x) (if (jde3@env? j2520@x) (vector->list (jde5@env-names j2520@x)) (if (jdfd@interaction-env? j2520@x) (map values (jaf8@rib-sym* (jdff@interaction-env-rib j2520@x))) (assertion-violation 'environment-symbols '"not an environment" j2520@x))))) (set! je17@environment (lambda j2522@imp* ((lambda (j2524@itc) ((lambda (j252a@j2527 j252b@j2529) ((lambda (j252e@swap) (dynamic-wind j252e@swap (lambda () (call-with-values (lambda () (jdc1@parse-import-spec* j2522@imp*)) (lambda (j2534@j2531 j2535@j2533) ((lambda (j2538@subst-labels j2539@subst-names) (make-simple-struct 'env '4 (list j2539@subst-names j2538@subst-labels j2524@itc))) j2535@j2533 j2534@j2531)))) j252e@swap)) (lambda () ((lambda (j253c@t) (begin (j252a@j2527 j252b@j2529) (set! j252b@j2529 j253c@t))) (j252a@j2527))))) jdcb@imp-collector j2524@itc)) (jdc5@make-collector)))) (set! je19@null-environment (lambda (j253e@n) (begin (if (not (eqv? j253e@n '5)) (assertion-violation 'null-environment '"not 5" j253e@n) (void)) (je17@environment '(psyntax null-environment-5))))) (set! je1b@scheme-report-environment (lambda (j2540@n) (begin (if (not (eqv? j2540@n '5)) (assertion-violation 'scheme-report-environment '"not 5" j2540@n) (void)) (je17@environment '(psyntax scheme-report-environment-5))))) (set! je1d@expand (lambda (j2542@x j2543@env) (if (jde3@env? j2543@env) ((lambda (j2546@rib) ((lambda (j2548@x j2549@itc j254a@rtc j254b@vtc) ((lambda (j2550@x) (begin (jb16@seal-rib! j2546@rib) (values j2550@x (j254a@rtc)))) ((lambda (j2562@j2553 j2563@j2555 j2564@j2557 j2565@j2559 j2566@j255b j2567@j255d j2568@j255f j2569@j2561) ((lambda (j2572@swap) (dynamic-wind j2572@swap (lambda () (jd81@chi-expr j2548@x '() '())) j2572@swap)) (lambda () (begin ((lambda (j2574@t) (begin (j2562@j2553 j2566@j255b) (set! j2566@j255b j2574@t))) (j2562@j2553)) ((lambda (j2576@t) (begin (j2563@j2555 j2567@j255d) (set! j2567@j255d j2576@t))) (j2563@j2555)) ((lambda (j2578@t) (begin (j2564@j2557 j2568@j255f) (set! j2568@j255f j2578@t))) (j2564@j2557)) ((lambda (j257a@t) (begin (j2565@j2559 j2569@j2561) (set! j2569@j2561 j257a@t))) (j2565@j2559)))))) je4d@top-level-context jdc7@inv-collector jdc9@vis-collector jdcb@imp-collector '#f j254a@rtc j254b@vtc j2549@itc))) (make-simple-struct 'stx '5 (list j2542@x jade@top-mark* (list j2546@rib) '())) (jded@env-itc j2543@env) (jdc5@make-collector) (jdc5@make-collector))) (jdc3@make-top-rib (jde5@env-names j2543@env) (jde9@env-labels j2543@env))) (if (jdfd@interaction-env? j2543@env) ((lambda (j257c@rib j257d@r j257e@rtc) ((lambda (j2582@x) (call-with-values (lambda () ((lambda (j2598@j2589 j2599@j258b j259a@j258d j259b@j258f j259c@j2591 j259d@j2593 j259e@j2595 j259f@j2597) ((lambda (j25a8@swap) (dynamic-wind j25a8@swap (lambda () (jdcf@chi-interaction-expr j2582@x j257c@rib j257d@r)) j25a8@swap)) (lambda () (begin ((lambda (j25aa@t) (begin (j2598@j2589 j259c@j2591) (set! j259c@j2591 j25aa@t))) (j2598@j2589)) ((lambda (j25ac@t) (begin (j2599@j258b j259d@j2593) (set! j259d@j2593 j25ac@t))) (j2599@j258b)) ((lambda (j25ae@t) (begin (j259a@j258d j259e@j2595) (set! j259e@j2595 j25ae@t))) (j259a@j258d)) ((lambda (j25b0@t) (begin (j259b@j258f j259f@j2597) (set! j259f@j2597 j25b0@t))) (j259b@j258f)))))) je4d@top-level-context jdc7@inv-collector jdc9@vis-collector jdcb@imp-collector j2543@env j257e@rtc (jdc5@make-collector) (jdc5@make-collector))) (lambda (j25b2@j2585 j25b3@j2587) ((lambda (j25b6@r^ j25b7@e) (begin (je05@set-interaction-env-r! j2543@env j25b6@r^) (values j25b7@e (j257e@rtc)))) j25b3@j2587 j25b2@j2585)))) (make-simple-struct 'stx '5 (list j2542@x jade@top-mark* (list j257c@rib) '())))) (jdff@interaction-env-rib j2543@env) (je03@interaction-env-r j2543@env) (jdc5@make-collector)) (assertion-violation 'expand '"not an environment" j2543@env))))) (set! je1f@eval (lambda (j25ba@x j25bb@env) (begin (if (not (je13@environment? j25bb@env)) (error 'eval '"not an environment" j25bb@env) (void)) (call-with-values (lambda () (je1d@expand j25ba@x j25bb@env)) (lambda (j25c2@j25bf j25c3@j25c1) ((lambda (j25c6@invoke-req* j25c7@x) (begin (for-each j985@j7d3@invoke-library j25c6@invoke-req*) (eval-core (j70f@j6c7@expanded->core j25c7@x)))) j25c3@j25c1 j25c2@j25bf)))))) (set! je21@library-expander (lambda j2638 ((lambda (j2639) (if (= j2639 '3) (apply (lambda (j25ca@x j25cb@filename j25cc@verify-name) ((lambda (j25d1@build-visit-code j25d3@visit!) (begin (set! j25d1@build-visit-code (lambda (j2626@macro*) (if (null? j2626@macro*) (jac2@ja32@build-void) (jac1@ja30@build-sequence '#f (map (lambda (j2628@x) ((lambda (j262a@loc j262b@src) (list 'set! j262a@loc j262b@src)) (car j2628@x) (cddr j2628@x))) j2626@macro*))))) (set! j25d3@visit! (lambda (j261e@macro*) (for-each (lambda (j2620@x) ((lambda (j2622@loc j2623@proc) (set-symbol-value! j2622@loc j2623@proc)) (car j2620@x) (cadr j2620@x))) j261e@macro*))) (call-with-values (lambda () (jdd3@core-library-expander j25ca@x j25cc@verify-name)) (lambda (j25e6@j25d5 j25e7@j25d7 j25e8@j25d9 j25e9@j25db j25ea@j25dd j25eb@j25df j25ec@j25e1 j25ed@j25e3 j25ee@j25e5) ((lambda (j25f8@export-env j25f9@export-subst j25fa@macro* j25fb@invoke-code j25fc@vis* j25fd@inv* j25fe@imp* j25ff@ver j2600@name) ((lambda (j260a@id j260b@name j260c@ver j260d@imp* j260e@vis* j260f@inv* j2610@visit-proc j2611@invoke-proc j2612@visit-code j2613@invoke-code) (begin (j983@j7cf@install-library j260a@id j260b@name j260c@ver j260d@imp* j260e@vis* j260f@inv* j25f9@export-subst j25f8@export-env j2610@visit-proc j2611@invoke-proc j2612@visit-code j2613@invoke-code '#t j25cb@filename) (values j260a@id j260b@name j260c@ver j260d@imp* j260e@vis* j260f@inv* j2613@invoke-code j2612@visit-code j25f9@export-subst j25f8@export-env))) (gensym) j2600@name j25ff@ver (map j989@j7db@library-spec j25fe@imp*) (map j989@j7db@library-spec j25fc@vis*) (map j989@j7db@library-spec j25fd@inv*) (lambda () (j25d3@visit! j25fa@macro*)) (lambda () (eval-core (j70f@j6c7@expanded->core j25fb@invoke-code))) (j25d1@build-visit-code j25fa@macro*) j25fb@invoke-code)) j25ee@j25e5 j25ed@j25e3 j25ec@j25e1 j25eb@j25df j25ea@j25dd j25e9@j25db j25e8@j25d9 j25e7@j25d7 j25e6@j25d5))))) '#f '#f)) j2638) (if (= j2639 '2) (apply (lambda (j262e@x j262f@filename) (je21@library-expander j262e@x j262f@filename (lambda (j2632@x) (values)))) j2638) (if (= j2639 '1) (apply (lambda (j2634@x) (je21@library-expander j2634@x '#f (lambda (j2636@x) (values)))) j2638) (error 'apply '"invalid arg count"))))) (length j2638)))) (set! je23@boot-library-expand (lambda (j263a@x) (call-with-values (lambda () (je21@library-expander j263a@x)) (lambda (j2650@j263d j2651@j263f j2652@j2641 j2653@j2643 j2654@j2645 j2655@j2647 j2656@j2649 j2657@j264b j2658@j264d j2659@j264f) ((lambda (j2664@export-env j2665@export-subst j2666@visit-code j2667@invoke-code j2668@inv* j2669@vis* j266a@imp* j266b@ver j266c@name j266d@id) (values j266c@name j2667@invoke-code j2665@export-subst j2664@export-env)) j2659@j264f j2658@j264d j2657@j264b j2656@j2649 j2655@j2647 j2654@j2645 j2653@j2643 j2652@j2641 j2651@j263f j2650@j263d))))) (set! je25@rev-map-append (lambda (j2678@f j2679@ls j267a@ac) (if (null? j2679@ls) j267a@ac (je25@rev-map-append j2678@f (cdr j2679@ls) (cons (j2678@f (car j2679@ls)) j267a@ac))))) (set! je27@build-exports (lambda (j267e@lex*+loc* j267f@init*) (jac1@ja30@build-sequence '#f (cons (jac2@ja32@build-void) (je25@rev-map-append (lambda (j2682@x) (list 'set! (cdr j2682@x) (car j2682@x))) j267e@lex*+loc* j267f@init*))))) (set! je29@make-export-subst (lambda (j2684@name* j2685@id*) (map (lambda (j2688@name j2689@id) ((lambda (j268c@label) (begin (if (not j268c@label) (je3f@syntax-violation '#f '"cannot export unbound identifier" j2689@id) (void)) (cons j2688@name j268c@label))) (jb70@id->label j2689@id))) j2684@name* j2685@id*))) (set! je2b@make-export-env/macros (lambda (j268e@lex* j268f@loc* j2690@r) ((lambda (j2695@lookup) (begin (set! j2695@lookup (lambda (j26b2@x) ((letrec ((j26b4@f (lambda (j26b6@x j26b7@lex* j26b8@loc*) (if (pair? j26b7@lex*) (if (eq? j26b6@x (car j26b7@lex*)) (car j26b8@loc*) (j26b4@f j26b6@x (cdr j26b7@lex*) (cdr j26b8@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) j26b4@f) j26b2@x j268e@lex* j268f@loc*))) ((letrec ((j2696@f (lambda (j2698@r j2699@env j269a@global* j269b@macro*) (if (null? j2698@r) (values j2699@env j269a@global* j269b@macro*) ((lambda (j26a0@x) ((lambda (j26a2@label j26a3@b) ((lambda (j26a6@t) (if (memv j26a6@t '(lexical)) ((lambda (j26a8@v) ((lambda (j26aa@loc j26ab@type) (j2696@f (cdr j2698@r) (cons (cons* j26a2@label j26ab@type j26aa@loc) j2699@env) (cons (cons (jceb@lexical-var j26a8@v) j26aa@loc) j269a@global*) j269b@macro*)) (j2695@lookup (jceb@lexical-var j26a8@v)) (if (jced@lexical-mutable? j26a8@v) 'mutable 'global))) (jb78@binding-value j26a3@b)) (if (memv j26a6@t '(local-macro)) ((lambda (j26ae@loc) (j2696@f (cdr j2698@r) (cons (cons* j26a2@label 'global-macro j26ae@loc) j2699@env) j269a@global* (cons (cons j26ae@loc (jb78@binding-value j26a3@b)) j269b@macro*))) (gensym)) (if (memv j26a6@t '(local-macro!)) ((lambda (j26b0@loc) (j2696@f (cdr j2698@r) (cons (cons* j26a2@label 'global-macro! j26b0@loc) j2699@env) j269a@global* (cons (cons j26b0@loc (jb78@binding-value j26a3@b)) j269b@macro*))) (gensym)) (if (memv j26a6@t '($rtd $module)) (j2696@f (cdr j2698@r) (cons j26a0@x j2699@env) j269a@global* j269b@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (jb76@binding-type j26a3@b) (jb78@binding-value j26a3@b))))))) (jb76@binding-type j26a3@b))) (car j26a0@x) (cdr j26a0@x))) (car j2698@r)))))) j2696@f) j2690@r '() '() '()))) '#f))) (set! je2d@generate-temporaries (lambda (j26bc@ls) ((lambda (j26be@t) ((lambda (j26c0@ls/false) (if j26c0@ls/false (apply (lambda (j26c2@ls) (map (lambda (j26c4@x) (make-simple-struct 'stx '5 (list ((lambda (j26c6@x) (if (or (symbol? j26c6@x) (string? j26c6@x)) (gensym j26c6@x) (gensym 't))) (je45@syntax->datum j26c4@x)) jade@top-mark* '() '()))) j26c2@ls)) j26c0@ls/false) ((lambda (j26c8@t) ((lambda (j26ca@ls/false) (if j26ca@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) j26ca@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j26c8@t))) (jd5f@syntax-dispatch j26c8@t '_))) j26be@t))) (jd5f@syntax-dispatch j26be@t 'each-any))) j26bc@ls))) (set! je2f@free-identifier=? (lambda (j26cc@x j26cd@y) (if (jb5a@id? j26cc@x) (if (jb5a@id? j26cd@y) (jb60@free-id=? j26cc@x j26cd@y) (assertion-violation 'free-identifier=? '"not an identifier" j26cd@y)) (assertion-violation 'free-identifier=? '"not an identifier" j26cc@x)))) (set! je31@bound-identifier=? (lambda (j26d0@x j26d1@y) (if (jb5a@id? j26d0@x) (if (jb5a@id? j26d1@y) (jb5e@bound-id=? j26d0@x j26d1@y) (assertion-violation 'bound-identifier=? '"not an identifier" j26d1@y)) (assertion-violation 'bound-identifier=? '"not an identifier" j26d0@x)))) (set! je33@make-source-condition (lambda (j26d4@x) ((lambda (j26de@j26d9 j26e0@j26db j26e2@j26da j26e5@j26d8 j26e7@make-source-condition j26e9@j26d6 j26eb@j26d7 j26ed@source-condition? j26ef@source-filename j26f1@source-character) (begin (set! j26de@j26d9 (make-record-type-descriptor '&source-information j2b2e@j2875@&condition-rtd 'j26dc '#f '#f '#((immutable file-name) (immutable character)))) (set! j26e0@j26db '#f) (set! j26e2@j26da (make-record-constructor-descriptor j26de@j26d9 j2b2f@j2877@&condition-rcd j26e0@j26db)) (set! j26e5@j26d8 (record-predicate j26de@j26d9)) (set! j26e7@make-source-condition (record-constructor j26e2@j26da)) (set! j26e9@j26d6 (record-accessor j26de@j26d9 '0)) (set! j26eb@j26d7 (record-accessor j26de@j26d9 '1)) (set! j26ed@source-condition? (condition-predicate j26de@j26d9)) (set! j26ef@source-filename (condition-accessor j26de@j26d9 j26e9@j26d6)) (set! j26f1@source-character (condition-accessor j26de@j26d9 j26eb@j26d7)) (if (pair? j26d4@x) (j26e7@make-source-condition (car j26d4@x) (cdr j26d4@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! je35@extract-position-condition (lambda (j26f2@x) (je33@make-source-condition (je37@expression-position j26f2@x)))) (set! je37@expression-position (lambda (j26f4@x) (and (jb26@stx? j26f4@x) ((lambda (j26f6@x) (and (j6ae@j582@annotation? j26f6@x) (j6af@j584@annotation-source j26f6@x))) (jb28@stx-expr j26f4@x))))) (set! je39@assertion-error (lambda (j26f8@expr j26f9@pos) (raise (condition (j2b5e@j2939@make-assertion-violation) (j2b70@j296b@make-who-condition 'assert) (j2b34@j28cc@make-message-condition '"assertion failed") (j2b66@j2950@make-irritants-condition (list j26f8@expr)) (je33@make-source-condition j26f9@pos))))) (set! je3b@syntax-error (lambda (j26fc@x . j26fe@args) (begin (if (not (for-all string? j26fe@args)) (assertion-violation 'syntax-error '"invalid argument" j26fe@args) (void)) (raise (condition (j2b34@j28cc@make-message-condition (if (null? j26fe@args) '"invalid syntax" (apply string-append j26fe@args))) (j2b92@j29c7@make-syntax-violation (je45@syntax->datum j26fc@x) '#f) (je35@extract-position-condition j26fc@x)))))) (set! je3d@syntax-violation* (lambda (j2700@who j2701@msg j2702@form j2703@condition-object) (begin (if (not (string? j2701@msg)) (assertion-violation 'syntax-violation '"message is not a string" j2701@msg) (void)) ((lambda (j2708@who) (raise (condition (if j2708@who (j2b70@j296b@make-who-condition j2708@who) (condition)) (j2b34@j28cc@make-message-condition j2701@msg) j2703@condition-object (je35@extract-position-condition j2702@form)))) (if (or (string? j2700@who) (symbol? j2700@who)) j2700@who (if (not j2700@who) ((lambda (j270a@t) ((lambda (j270c@ls/false) (if (and j270c@ls/false (apply (lambda (j270e@id) (jb5a@id? j270e@id)) j270c@ls/false)) (apply (lambda (j2710@id) (je45@syntax->datum j2710@id)) j270c@ls/false) ((lambda (j2712@t) ((lambda (j2714@ls/false) (if (and j2714@ls/false (apply (lambda (j2716@id j2717@rest) (jb5a@id? j2716@id)) j2714@ls/false)) (apply (lambda (j271a@id j271b@rest) (je45@syntax->datum j271a@id)) j2714@ls/false) ((lambda (j271e@t) ((lambda (j2720@ls/false) (if j2720@ls/false (apply (lambda () '#f) j2720@ls/false) (je3f@syntax-violation '#f '"invalid syntax" j271e@t))) (jd5f@syntax-dispatch j271e@t '_))) j2712@t))) (jd5f@syntax-dispatch j2712@t '(any . any)))) j270a@t))) (jd5f@syntax-dispatch j270a@t 'any))) j2702@form) (assertion-violation 'syntax-violation '"invalid who argument" j2700@who))))))) (set! je3f@syntax-violation (lambda j2730 ((lambda (j2731) (if (= j2731 '3) (apply (lambda (j2722@who j2723@msg j2724@form) (je3f@syntax-violation j2722@who j2723@msg j2724@form '#f)) j2730) (if (= j2731 '4) (apply (lambda (j2728@who j2729@msg j272a@form j272b@subform) (je3d@syntax-violation* j2728@who j2729@msg j272a@form (j2b92@j29c7@make-syntax-violation (je45@syntax->datum j272a@form) (je45@syntax->datum j272b@subform)))) j2730) (error 'apply '"invalid arg count")))) (length j2730)))) (set! je41@identifier? (lambda (j2732@x) (jb5a@id? j2732@x))) (set! je43@datum->syntax (lambda (j2734@id j2735@datum) (if (jb5a@id? j2734@id) (jb3a@datum->stx j2734@id j2735@datum) (assertion-violation 'datum->syntax '"not an identifier" j2734@id)))) (set! je45@syntax->datum (lambda (j2738@x) (jb6e@stx->datum j2738@x))) (set! je47@compile-r6rs-top-level (lambda (j273a@x*) (call-with-values (lambda () (jdd7@top-level-expander j273a@x*)) (lambda (j2740@j273d j2741@j273f) ((lambda (j2744@invoke-code j2745@lib*) (lambda () (begin (for-each j985@j7d3@invoke-library j2745@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (j70f@j6c7@expanded->core j2744@invoke-code)) (void)) (eval-core (j70f@j6c7@expanded->core j2744@invoke-code))))) j2741@j273f j2740@j273d))))) (set! je49@pre-compile-r6rs-top-level (lambda (j2748@x*) (call-with-values (lambda () (jdd7@top-level-expander j2748@x*)) (lambda (j274e@j274b j274f@j274d) ((lambda (j2752@invoke-code j2753@lib*) (begin (for-each j985@j7d3@invoke-library j2753@lib*) (j6b7@j594@compile-core (j70f@j6c7@expanded->core j2752@invoke-code)))) j274f@j274d j274e@j274b))))) (set! je4b@interaction-environment ((lambda (j2756@the-env) (lambda () (or j2756@the-env ((lambda (j2758@lib j2759@rib) (begin ((lambda (j275c@subst) (begin (jafa@set-rib-sym*! j2759@rib (map car j275c@subst)) (jafe@set-rib-mark**! j2759@rib (map (lambda (j275e@x) jade@top-mark*) j275c@subst)) (jb02@set-rib-label*! j2759@rib (map cdr j275c@subst)))) (j960@j789@library-subst j2758@lib)) ((lambda (j2760@env) (begin (set! j2756@the-env j2760@env) j2760@env)) (make-simple-struct 'interaction-env '4 (list j2759@rib '() '()))))) (j97e@j7c5@find-library-by-name '(mosh interaction)) (jb0e@make-empty-rib))))) '#f)) (set! je4d@top-level-context (j6b9@j598@make-parameter '#f)) (begin (set! j285b@je4d@top-level-context je4d@top-level-context) (set! j285a@je4b@interaction-environment je4b@interaction-environment) (set! j2859@je49@pre-compile-r6rs-top-level je49@pre-compile-r6rs-top-level) (set! j2858@je47@compile-r6rs-top-level je47@compile-r6rs-top-level) (set! j2857@je45@syntax->datum je45@syntax->datum) (set! j2856@je43@datum->syntax je43@datum->syntax) (set! j2855@je41@identifier? je41@identifier?) (set! j2854@je3f@syntax-violation je3f@syntax-violation) (set! j2853@je3d@syntax-violation* je3d@syntax-violation*) (set! j2852@je3b@syntax-error je3b@syntax-error) (set! j2851@je39@assertion-error je39@assertion-error) (set! j2850@je37@expression-position je37@expression-position) (set! j284f@je35@extract-position-condition je35@extract-position-condition) (set! j284e@je33@make-source-condition je33@make-source-condition) (set! j284d@je31@bound-identifier=? je31@bound-identifier=?) (set! j284c@je2f@free-identifier=? je2f@free-identifier=?) (set! j284b@je2d@generate-temporaries je2d@generate-temporaries) (set! j284a@je2b@make-export-env/macros je2b@make-export-env/macros) (set! j2849@je29@make-export-subst je29@make-export-subst) (set! j2848@je27@build-exports je27@build-exports) (set! j2847@je25@rev-map-append je25@rev-map-append) (set! j2846@je23@boot-library-expand je23@boot-library-expand) (set! j2845@je21@library-expander je21@library-expander) (set! j2844@je1f@eval je1f@eval) (set! j2843@je1d@expand je1d@expand) (set! j2842@je1b@scheme-report-environment je1b@scheme-report-environment) (set! j2841@je19@null-environment je19@null-environment) (set! j2840@je17@environment je17@environment) (set! j283f@je15@environment-symbols je15@environment-symbols) (set! j283e@je13@environment? je13@environment?) (set! j283d@je11@parse-binding je11@parse-binding) (set! j283c@je0f@environment-bindings je0f@environment-bindings) (set! j283b@je0d@interaction-environment-symbols je0d@interaction-environment-symbols) (set! j283a@je0b@dummy je0b@dummy) (set! j2839@je09@set-interaction-env-locs! je09@set-interaction-env-locs!) (set! j2838@je07@interaction-env-locs je07@interaction-env-locs) (set! j2837@je05@set-interaction-env-r! je05@set-interaction-env-r!) (set! j2836@je03@interaction-env-r je03@interaction-env-r) (set! j2835@je01@set-interaction-env-rib! je01@set-interaction-env-rib!) (set! j2834@jdff@interaction-env-rib jdff@interaction-env-rib) (set! j2833@jdfd@interaction-env? jdfd@interaction-env?) (set! j2832@jdf3@rp jdf3@rp) (set! j2831@jdf1@dummy jdf1@dummy) (set! j2830@jdef@set-env-itc! jdef@set-env-itc!) (set! j282f@jded@env-itc jded@env-itc) (set! j282e@jdeb@set-env-labels! jdeb@set-env-labels!) (set! j282d@jde9@env-labels jde9@env-labels) (set! j282c@jde7@set-env-names! jde7@set-env-names!) (set! j282b@jde5@env-names jde5@env-names) (set! j282a@jde3@env? jde3@env?) (set! j2829@jdd9@rp jdd9@rp) (set! j2828@jdd7@top-level-expander jdd7@top-level-expander) (set! j2827@jdd5@parse-top-level-program jdd5@parse-top-level-program) (set! j2826@jdd3@core-library-expander jdd3@core-library-expander) (set! j2825@jdd1@library-body-expander jdd1@library-body-expander) (set! j2824@jdcf@chi-interaction-expr jdcf@chi-interaction-expr) (set! j2823@jdcd@chi-library-internal jdcd@chi-library-internal) (set! j2822@jdcb@imp-collector jdcb@imp-collector) (set! j2821@jdc9@vis-collector jdc9@vis-collector) (set! j2820@jdc7@inv-collector jdc7@inv-collector) (set! j281f@jdc5@make-collector jdc5@make-collector) (set! j281e@jdc3@make-top-rib jdc3@make-top-rib) (set! j281d@jdc1@parse-import-spec* jdc1@parse-import-spec*) (set! j281c@jdbf@parse-library jdbf@parse-library) (set! j281b@jdbd@parse-library-name jdbd@parse-library-name) (set! j281a@jdbb@parse-exports jdbb@parse-exports) (set! j2819@jdb9@expand-transformer jdb9@expand-transformer) (set! j2818@jdb7@chi-body* jdb7@chi-body*) (set! j2817@jdb5@chi-internal-module jdb5@chi-internal-module) (set! j2816@jdb3@module-interface-exp-id* jdb3@module-interface-exp-id*) (set! j2815@jdb1@dummy jdb1@dummy) (set! j2814@jdaf@set-module-interface-exp-lab-vec! jdaf@set-module-interface-exp-lab-vec!) (set! j2813@jdad@module-interface-exp-lab-vec jdad@module-interface-exp-lab-vec) (set! j2812@jdab@set-module-interface-exp-id-vec! jdab@set-module-interface-exp-id-vec!) (set! j2811@jda9@module-interface-exp-id-vec jda9@module-interface-exp-id-vec) (set! j2810@jda7@set-module-interface-first-mark! jda7@set-module-interface-first-mark!) (set! j280f@jda5@module-interface-first-mark jda5@module-interface-first-mark) (set! j280e@jda3@module-interface? jda3@module-interface?) (set! j280d@jd99@parse-module jd99@parse-module) (set! j280c@jd97@chi-internal jd97@chi-internal) (set! j280b@jd95@find-dups jd95@find-dups) (set! j280a@jd93@find-bound=? jd93@find-bound=?) (set! j2809@jd91@chi-rhs* jd91@chi-rhs*) (set! j2808@jd8f@expand-interaction-rhs*/init* jd8f@expand-interaction-rhs*/init*) (set! j2807@jd8d@chi-rhs jd8d@chi-rhs) (set! j2806@jd8b@chi-defun jd8b@chi-defun) (set! j2805@jd89@chi-lambda-clause* jd89@chi-lambda-clause*) (set! j2804@jd87@chi-lambda-clause jd87@chi-lambda-clause) (set! j2803@jd85@verify-formals jd85@verify-formals) (set! j2802@jd83@chi-set! jd83@chi-set!) (set! j2801@jd81@chi-expr jd81@chi-expr) (set! j2800@jd7f@chi-application jd7f@chi-application) (set! j27ff@jd7d@chi-expr* jd7d@chi-expr*) (set! j27fe@jd7b@chi-global-macro jd7b@chi-global-macro) (set! j27fd@jd79@chi-local-macro jd79@chi-local-macro) (set! j27fc@jd77@chi-macro jd77@chi-macro) (set! j27fb@jd75@do-macro-call jd75@do-macro-call) (set! j27fa@jd73@local-macro-transformer jd73@local-macro-transformer) (set! j27f9@jd71@macro-transformer jd71@macro-transformer) (set! j27f8@jd6f@symbol-macro jd6f@symbol-macro) (set! j27f7@jd6d@core-macro-transformer jd6d@core-macro-transformer) (set! j27f6@jd6b@syntax-transformer jd6b@syntax-transformer) (set! j27f5@jd69@ellipsis-map jd69@ellipsis-map) (set! j27f4@jd67@syntax-case-transformer jd67@syntax-case-transformer) (set! j27f3@jd65@verify-literals jd65@verify-literals) (set! j27f2@jd63@underscore? jd63@underscore?) (set! j27f1@jd61@ellipsis? jd61@ellipsis?) (set! j27f0@jd5f@syntax-dispatch jd5f@syntax-dispatch) (set! j27ef@jd5d@convert-pattern jd5d@convert-pattern) (set! j27ee@jd5b@foreign-call-transformer jd5b@foreign-call-transformer) (set! j27ed@jd59@parameterize-macro jd59@parameterize-macro) (set! j27ec@jd57@incorrect-usage-macro jd57@incorrect-usage-macro) (set! j27eb@jd55@define-condition-type-macro jd55@define-condition-type-macro) (set! j27ea@jd53@define-record-type-macro jd53@define-record-type-macro) (set! j27e9@jd51@define-struct-macro jd51@define-struct-macro) (set! j27e8@jd4f@quasisyntax-macro jd4f@quasisyntax-macro) (set! j27e7@jd4d@quasiquote-macro jd4d@quasiquote-macro) (set! j27e6@jd4b@syntax-rules-macro jd4b@syntax-rules-macro) (set! j27e5@jd49@include-into-macro jd49@include-into-macro) (set! j27e4@jd47@include-macro jd47@include-macro) (set! j27e3@jd45@do-include jd45@do-include) (set! j27e2@jd43@cond-macro jd43@cond-macro) (set! j27e1@jd41@and-macro jd41@and-macro) (set! j27e0@jd3f@or-macro jd3f@or-macro) (set! j27df@jd3d@let*-macro jd3d@let*-macro) (set! j27de@jd3b@do-macro jd3b@do-macro) (set! j27dd@jd39@identifier-syntax-macro jd39@identifier-syntax-macro) (set! j27dc@jd37@endianness-macro jd37@endianness-macro) (set! j27db@jd35@assert-macro jd35@assert-macro) (set! j27da@jd33@delay-macro jd33@delay-macro) (set! j27d9@jd31@time-macro jd31@time-macro) (set! j27d8@jd2f@define-enumeration-macro jd2f@define-enumeration-macro) (set! j27d7@jd2d@guard-macro jd2d@guard-macro) (set! j27d6@jd2b@trace-letrec-syntax-macro jd2b@trace-letrec-syntax-macro) (set! j27d5@jd29@trace-let-syntax-macro jd29@trace-let-syntax-macro) (set! j27d4@jd27@trace-let/rec-syntax jd27@trace-let/rec-syntax) (set! j27d3@jd25@trace-define-syntax-macro jd25@trace-define-syntax-macro) (set! j27d2@jd23@trace-define-macro jd23@trace-define-macro) (set! j27d1@jd21@trace-lambda-macro jd21@trace-lambda-macro) (set! j27d0@jd1f@let*-values-macro jd1f@let*-values-macro) (set! j27cf@jd1d@let-values-macro jd1d@let-values-macro) (set! j27ce@jd1b@let-macro jd1b@let-macro) (set! j27cd@jd19@invalid-fmls-error jd19@invalid-fmls-error) (set! j27cc@jd17@with-syntax-macro jd17@with-syntax-macro) (set! j27cb@jd15@bless jd15@bless) (set! j27ca@jd13@lambda-transformer jd13@lambda-transformer) (set! j27c9@jd11@case-lambda-transformer jd11@case-lambda-transformer) (set! j27c8@jd0f@quote-transformer jd0f@quote-transformer) (set! j27c7@jd0d@case-macro jd0d@case-macro) (set! j27c6@jd0b@or-transformer jd0b@or-transformer) (set! j27c5@jd09@and-transformer jd09@and-transformer) (set! j27c4@jd07@if-transformer jd07@if-transformer) (set! j27c3@jd05@unless-macro jd05@unless-macro) (set! j27c2@jd03@when-macro jd03@when-macro) (set! j27c1@jd01@record-constructor-descriptor-transformer jd01@record-constructor-descriptor-transformer) (set! j27c0@jcff@record-type-descriptor-transformer jcff@record-type-descriptor-transformer) (set! j27bf@jcfd@type-descriptor-transformer jcfd@type-descriptor-transformer) (set! j27be@jcfb@fluid-let-syntax-transformer jcfb@fluid-let-syntax-transformer) (set! j27bd@jcf9@letrec*-transformer jcf9@letrec*-transformer) (set! j27bc@jcf7@letrec-transformer jcf7@letrec-transformer) (set! j27bb@jcf5@letrec-helper jcf5@letrec-helper) (set! j27ba@jcf3@add-lexicals jcf3@add-lexicals) (set! j27b9@jcf1@add-lexical jcf1@add-lexical) (set! j27b8@jcef@set-lexical-mutable! jcef@set-lexical-mutable!) (set! j27b7@jced@lexical-mutable? jced@lexical-mutable?) (set! j27b6@jceb@lexical-var jceb@lexical-var) (set! j27b5@jce9@scheme-stx jce9@scheme-stx) (set! j27b4@jce7@scheme-stx-hashtable jce7@scheme-stx-hashtable) (set! j27b3@jce5@parse-define-syntax jce5@parse-define-syntax) (set! j27b2@jce3@parse-define jce3@parse-define) (set! j27b1@jb92@make-eval-transformer jb92@make-eval-transformer) (set! j27b0@jb90@variable-transformer-procedure jb90@variable-transformer-procedure) (set! j27af@jb8e@variable-transformer? jb8e@variable-transformer?) (set! j27ae@jb8c@make-variable-transformer jb8c@make-variable-transformer) (set! j27ad@jb8a@sanitize-binding jb8a@sanitize-binding) (set! j27ac@jb7c@syntax-type jb7c@syntax-type) (set! j27ab@jb7a@raise-unbound-error jb7a@raise-unbound-error) (set! j27aa@jb78@binding-value jb78@binding-value) (set! j27a9@jb76@binding-type jb76@binding-type) (set! j27a8@jb74@make-binding jb74@make-binding) (set! j27a7@jb72@label->binding jb72@label->binding) (set! j27a6@jb70@id->label jb70@id->label) (set! j27a5@jb6e@stx->datum jb6e@stx->datum) (set! j27a4@jb6c@strip jb6c@strip) (set! j27a3@jb6a@strip-annotations jb6a@strip-annotations) (set! j27a2@jb68@self-evaluating? jb68@self-evaluating?) (set! j27a1@jb66@bound-id-member? jb66@bound-id-member?) (set! j27a0@jb64@distinct-bound-ids? jb64@distinct-bound-ids?) (set! j279f@jb62@valid-bound-ids? jb62@valid-bound-ids?) (set! j279e@jb60@free-id=? jb60@free-id=?) (set! j279d@jb5e@bound-id=? jb5e@bound-id=?) (set! j279c@jb5c@id->sym jb5c@id->sym) (set! j279b@jb5a@id? jb5a@id?) (set! j279a@jb58@syntax->list jb58@syntax->list) (set! j2799@jb56@syntax-cdr jb56@syntax-cdr) (set! j2798@jb54@syntax-car jb54@syntax-car) (set! j2797@jb52@syntax-list? jb52@syntax-list?) (set! j2796@jb50@syntax-null? jb50@syntax-null?) (set! j2795@jb4e@syntax-vector? jb4e@syntax-vector?) (set! j2794@jb4c@syntax-pair? jb4c@syntax-pair?) (set! j2793@jb4a@syntax-vector->list jb4a@syntax-vector->list) (set! j2792@jb48@syntax-kind? jb48@syntax-kind?) (set! j2791@jb46@add-subst jb46@add-subst) (set! j2790@jb44@add-mark jb44@add-mark) (set! j278f@jb42@mkstx jb42@mkstx) (set! j278e@jb40@anti-mark? jb40@anti-mark?) (set! j278d@jb3e@anti-mark jb3e@anti-mark) (set! j278c@jb3c@gen-mark jb3c@gen-mark) (set! j278b@jb3a@datum->stx jb3a@datum->stx) (set! j278a@jb38@dummy jb38@dummy) (set! j2789@jb36@set-stx-ae*! jb36@set-stx-ae*!) (set! j2788@jb34@stx-ae* jb34@stx-ae*) (set! j2787@jb32@set-stx-subst*! jb32@set-stx-subst*!) (set! j2786@jb30@stx-subst* jb30@stx-subst*) (set! j2785@jb2e@set-stx-mark*! jb2e@set-stx-mark*!) (set! j2784@jb2c@stx-mark* jb2c@stx-mark*) (set! j2783@jb2a@set-stx-expr! jb2a@set-stx-expr!) (set! j2782@jb28@stx-expr jb28@stx-expr) (set! j2781@jb26@stx? jb26@stx?) (set! j2780@jb1c@rp jb1c@rp) (set! j277f@jb1a@make-full-rib jb1a@make-full-rib) (set! j277e@jb18@unseal-rib! jb18@unseal-rib!) (set! j277d@jb16@seal-rib! jb16@seal-rib!) (set! j277c@jb14@make-rib-map jb14@make-rib-map) (set! j277b@jb12@extend-rib/nc! jb12@extend-rib/nc!) (set! j277a@jb10@extend-rib! jb10@extend-rib!) (set! j2779@jb0e@make-empty-rib jb0e@make-empty-rib) (set! j2778@jb0c@dummy jb0c@dummy) (set! j2777@jb0a@set-rib-cache! jb0a@set-rib-cache!) (set! j2776@jb08@rib-cache jb08@rib-cache) (set! j2775@jb06@set-rib-sealed/freq! jb06@set-rib-sealed/freq!) (set! j2774@jb04@rib-sealed/freq jb04@rib-sealed/freq) (set! j2773@jb02@set-rib-label*! jb02@set-rib-label*!) (set! j2772@jb00@rib-label* jb00@rib-label*) (set! j2771@jafe@set-rib-mark**! jafe@set-rib-mark**!) (set! j2770@jafc@rib-mark** jafc@rib-mark**) (set! j276f@jafa@set-rib-sym*! jafa@set-rib-sym*!) (set! j276e@jaf8@rib-sym* jaf8@rib-sym*) (set! j276d@jaf6@rib? jaf6@rib?) (set! j276c@jaec@gen-define-label jaec@gen-define-label) (set! j276b@jaea@gen-define-label+loc jaea@gen-define-label+loc) (set! j276a@jae8@gen-top-level-label jae8@gen-top-level-label) (set! j2769@jae6@gen-label jae6@gen-label) (set! j2768@jae4@gen-global jae4@gen-global) (set! j2767@jae2@gen-lexical jae2@gen-lexical) (set! j2766@jae0@top-marked? jae0@top-marked?) (set! j2765@jade@top-mark* jade@top-mark*) (set! j2764@jad9@set-union jad9@set-union) (set! j2763@jad7@set-cons jad7@set-cons) (set! j2762@jad5@file-options-macro jad5@file-options-macro) (j97b@j7bf@current-library-expander je21@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (j286a@j2865 j286c@j2867 j286e@j2866 j2871@&condition? j2873@make-&condition j2875@&condition-rtd j2877@&condition-rcd j28c3@j28be j28c5@j28c0 j28c7@j28bf j28ca@p? j28cc@make-message-condition j28ce@j28bd j28d0@message-condition? j28d2@condition-message j28d4@&message-rtd j28d6@&message-rcd j28dc@j28d7 j28de@j28d9 j28e0@j28d8 j28e3@p? j28e5@make-warning j28e7@warning? j28e9@&warning-rtd j28eb@&warning-rcd j28f1@j28ec j28f3@j28ee j28f5@j28ed j28f8@p? j28fa@make-serious-condition j28fc@serious-condition? j28fe@&serious-rtd j2900@&serious-rcd j2906@j2901 j2908@j2903 j290a@j2902 j290d@p? j290f@make-error j2911@error? j2913@&error-rtd j2915@&error-rcd j291b@j2916 j291d@j2918 j291f@j2917 j2922@p? j2924@make-violation j2926@violation? j2928@&violation-rtd j292a@&violation-rcd j2930@j292b j2932@j292d j2934@j292c j2937@p? j2939@make-assertion-violation j293b@assertion-violation? j293d@&assertion-rtd j293f@&assertion-rcd j2947@j2942 j2949@j2944 j294b@j2943 j294e@p? j2950@make-irritants-condition j2952@j2941 j2954@irritants-condition? j2956@condition-irritants j2958@&irritants-rtd j295a@&irritants-rcd j2962@j295d j2964@j295f j2966@j295e j2969@p? j296b@make-who-condition j296d@j295c j296f@who-condition? j2971@condition-who j2973@&who-rtd j2975@&who-rcd j297b@j2976 j297d@j2978 j297f@j2977 j2982@p? j2984@make-non-continuable-violation j2986@non-continuable-violation? j2988@&non-continuable-rtd j298a@&non-continuable-rcd j2990@j298b j2992@j298d j2994@j298c j2997@p? j2999@make-implementation-restriction-violation j299b@implementation-restriction-violation? j299d@&implementation-restriction-rtd j299f@&implementation-restriction-rcd j29a5@j29a0 j29a7@j29a2 j29a9@j29a1 j29ac@p? j29ae@make-lexical-violation j29b0@lexical-violation? j29b2@&lexical-rtd j29b4@&lexical-rcd j29be@j29b9 j29c0@j29bb j29c2@j29ba j29c5@p? j29c7@make-syntax-violation j29c9@j29b6 j29cb@j29b8 j29cd@syntax-violation? j29cf@syntax-violation-form j29d1@syntax-violation-subform j29d3@&syntax-rtd j29d5@&syntax-rcd j29db@j29d6 j29dd@j29d8 j29df@j29d7 j29e2@p? j29e4@make-undefined-violation j29e6@undefined-violation? j29e8@&undefined-rtd j29ea@&undefined-rcd j29f0@j29eb j29f2@j29ed j29f4@j29ec j29f7@p? j29f9@make-i/o-error j29fb@i/o-error? j29fd@&i/o-rtd j29ff@&i/o-rcd j2a05@j2a00 j2a07@j2a02 j2a09@j2a01 j2a0c@p? j2a0e@make-i/o-read-error j2a10@i/o-read-error? j2a12@&i/o-read-rtd j2a14@&i/o-read-rcd j2a1a@j2a15 j2a1c@j2a17 j2a1e@j2a16 j2a21@p? j2a23@make-i/o-write-error j2a25@i/o-write-error? j2a27@&i/o-write-rtd j2a29@&i/o-write-rcd j2a31@j2a2c j2a33@j2a2e j2a35@j2a2d j2a38@p? j2a3a@make-i/o-invalid-position-error j2a3c@j2a2b j2a3e@i/o-invalid-position-error? j2a40@i/o-error-position j2a42@&i/o-invalid-position-rtd j2a44@&i/o-invalid-position-rcd j2a4c@j2a47 j2a4e@j2a49 j2a50@j2a48 j2a53@p? j2a55@make-i/o-filename-error j2a57@j2a46 j2a59@i/o-filename-error? j2a5b@i/o-error-filename j2a5d@&i/o-filename-rtd j2a5f@&i/o-filename-rcd j2a65@j2a60 j2a67@j2a62 j2a69@j2a61 j2a6c@p? j2a6e@make-i/o-file-protection-error j2a70@i/o-file-protection-error? j2a72@&i/o-file-protection-rtd j2a74@&i/o-file-protection-rcd j2a7a@j2a75 j2a7c@j2a77 j2a7e@j2a76 j2a81@p? j2a83@make-i/o-file-is-read-only-error j2a85@i/o-file-is-read-only-error? j2a87@&i/o-file-is-read-only-rtd j2a89@&i/o-file-is-read-only-rcd j2a8f@j2a8a j2a91@j2a8c j2a93@j2a8b j2a96@p? j2a98@make-i/o-file-already-exists-error j2a9a@i/o-file-already-exists-error? j2a9c@&i/o-file-already-exists-rtd j2a9e@&i/o-file-already-exists-rcd j2aa4@j2a9f j2aa6@j2aa1 j2aa8@j2aa0 j2aab@p? j2aad@make-i/o-file-does-not-exist-error j2aaf@i/o-file-does-not-exist-error? j2ab1@&i/o-file-does-not-exist-rtd j2ab3@&i/o-file-does-not-exist-rcd j2abb@j2ab6 j2abd@j2ab8 j2abf@j2ab7 j2ac2@p? j2ac4@make-i/o-port-error j2ac6@j2ab5 j2ac8@i/o-port-error? j2aca@i/o-error-port j2acc@&i/o-port-rtd j2ace@&i/o-port-rcd j2ad4@j2acf j2ad6@j2ad1 j2ad8@j2ad0 j2adb@p? j2add@make-i/o-decoding-error j2adf@i/o-decoding-error? j2ae1@&i/o-decoding-rtd j2ae3@&i/o-decoding-rcd j2aeb@j2ae6 j2aed@j2ae8 j2aef@j2ae7 j2af2@p? j2af4@make-i/o-encoding-error j2af6@j2ae5 j2af8@i/o-encoding-error? j2afa@i/o-encoding-error-char j2afc@&i/o-encoding-rtd j2afe@&i/o-encoding-rcd j2b04@j2aff j2b06@j2b01 j2b08@j2b00 j2b0b@p? j2b0d@make-no-infinities-violation j2b0f@no-infinities-violation? j2b11@&no-infinities-rtd j2b13@&no-infinities-rcd j2b19@j2b14 j2b1b@j2b16 j2b1d@j2b15 j2b20@p? j2b22@make-no-nans-violation j2b24@no-nans-violation? j2b26@&no-nans-rtd j2b28@&no-nans-rcd) (begin (set! j286a@j2865 (make-record-type-descriptor '&condition '#f 'j2868 '#f '#f '#())) (set! j286c@j2867 '#f) (set! j286e@j2866 (make-record-constructor-descriptor j286a@j2865 '#f j286c@j2867)) (set! j2871@&condition? (record-predicate j286a@j2865)) (set! j2873@make-&condition (record-constructor j286e@j2866)) (set! j2875@&condition-rtd j286a@j2865) (set! j2877@&condition-rcd j286e@j2866) (set! j28c3@j28be (make-record-type-descriptor '&message j286a@j2865 'j28c1 '#f '#f '#((immutable message)))) (set! j28c5@j28c0 '#f) (set! j28c7@j28bf (make-record-constructor-descriptor j28c3@j28be j286e@j2866 j28c5@j28c0)) (set! j28ca@p? (record-predicate j28c3@j28be)) (set! j28cc@make-message-condition (record-constructor j28c7@j28bf)) (set! j28ce@j28bd (record-accessor j28c3@j28be '0)) (set! j28d0@message-condition? (condition-predicate j28c3@j28be)) (set! j28d2@condition-message (condition-accessor j28c3@j28be j28ce@j28bd)) (set! j28d4@&message-rtd j28c3@j28be) (set! j28d6@&message-rcd j28c7@j28bf) (set! j28dc@j28d7 (make-record-type-descriptor '&warning j286a@j2865 'j28da '#f '#f '#())) (set! j28de@j28d9 '#f) (set! j28e0@j28d8 (make-record-constructor-descriptor j28dc@j28d7 j286e@j2866 j28de@j28d9)) (set! j28e3@p? (record-predicate j28dc@j28d7)) (set! j28e5@make-warning (record-constructor j28e0@j28d8)) (set! j28e7@warning? (condition-predicate j28dc@j28d7)) (set! j28e9@&warning-rtd j28dc@j28d7) (set! j28eb@&warning-rcd j28e0@j28d8) (set! j28f1@j28ec (make-record-type-descriptor '&serious j286a@j2865 'j28ef '#f '#f '#())) (set! j28f3@j28ee '#f) (set! j28f5@j28ed (make-record-constructor-descriptor j28f1@j28ec j286e@j2866 j28f3@j28ee)) (set! j28f8@p? (record-predicate j28f1@j28ec)) (set! j28fa@make-serious-condition (record-constructor j28f5@j28ed)) (set! j28fc@serious-condition? (condition-predicate j28f1@j28ec)) (set! j28fe@&serious-rtd j28f1@j28ec) (set! j2900@&serious-rcd j28f5@j28ed) (set! j2906@j2901 (make-record-type-descriptor '&error j28f1@j28ec 'j2904 '#f '#f '#())) (set! j2908@j2903 '#f) (set! j290a@j2902 (make-record-constructor-descriptor j2906@j2901 j28f5@j28ed j2908@j2903)) (set! j290d@p? (record-predicate j2906@j2901)) (set! j290f@make-error (record-constructor j290a@j2902)) (set! j2911@error? (condition-predicate j2906@j2901)) (set! j2913@&error-rtd j2906@j2901) (set! j2915@&error-rcd j290a@j2902) (set! j291b@j2916 (make-record-type-descriptor '&violation j28f1@j28ec 'j2919 '#f '#f '#())) (set! j291d@j2918 '#f) (set! j291f@j2917 (make-record-constructor-descriptor j291b@j2916 j28f5@j28ed j291d@j2918)) (set! j2922@p? (record-predicate j291b@j2916)) (set! j2924@make-violation (record-constructor j291f@j2917)) (set! j2926@violation? (condition-predicate j291b@j2916)) (set! j2928@&violation-rtd j291b@j2916) (set! j292a@&violation-rcd j291f@j2917) (set! j2930@j292b (make-record-type-descriptor '&assertion j291b@j2916 'j292e '#f '#f '#())) (set! j2932@j292d '#f) (set! j2934@j292c (make-record-constructor-descriptor j2930@j292b j291f@j2917 j2932@j292d)) (set! j2937@p? (record-predicate j2930@j292b)) (set! j2939@make-assertion-violation (record-constructor j2934@j292c)) (set! j293b@assertion-violation? (condition-predicate j2930@j292b)) (set! j293d@&assertion-rtd j2930@j292b) (set! j293f@&assertion-rcd j2934@j292c) (set! j2947@j2942 (make-record-type-descriptor '&irritants j286a@j2865 'j2945 '#f '#f '#((immutable irritants)))) (set! j2949@j2944 '#f) (set! j294b@j2943 (make-record-constructor-descriptor j2947@j2942 j286e@j2866 j2949@j2944)) (set! j294e@p? (record-predicate j2947@j2942)) (set! j2950@make-irritants-condition (record-constructor j294b@j2943)) (set! j2952@j2941 (record-accessor j2947@j2942 '0)) (set! j2954@irritants-condition? (condition-predicate j2947@j2942)) (set! j2956@condition-irritants (condition-accessor j2947@j2942 j2952@j2941)) (set! j2958@&irritants-rtd j2947@j2942) (set! j295a@&irritants-rcd j294b@j2943) (set! j2962@j295d (make-record-type-descriptor '&who j286a@j2865 'j2960 '#f '#f '#((immutable who)))) (set! j2964@j295f '#f) (set! j2966@j295e (make-record-constructor-descriptor j2962@j295d j286e@j2866 j2964@j295f)) (set! j2969@p? (record-predicate j2962@j295d)) (set! j296b@make-who-condition (record-constructor j2966@j295e)) (set! j296d@j295c (record-accessor j2962@j295d '0)) (set! j296f@who-condition? (condition-predicate j2962@j295d)) (set! j2971@condition-who (condition-accessor j2962@j295d j296d@j295c)) (set! j2973@&who-rtd j2962@j295d) (set! j2975@&who-rcd j2966@j295e) (set! j297b@j2976 (make-record-type-descriptor '&non-continuable j291b@j2916 'j2979 '#f '#f '#())) (set! j297d@j2978 '#f) (set! j297f@j2977 (make-record-constructor-descriptor j297b@j2976 j291f@j2917 j297d@j2978)) (set! j2982@p? (record-predicate j297b@j2976)) (set! j2984@make-non-continuable-violation (record-constructor j297f@j2977)) (set! j2986@non-continuable-violation? (condition-predicate j297b@j2976)) (set! j2988@&non-continuable-rtd j297b@j2976) (set! j298a@&non-continuable-rcd j297f@j2977) (set! j2990@j298b (make-record-type-descriptor '&implementation-restriction j291b@j2916 'j298e '#f '#f '#())) (set! j2992@j298d '#f) (set! j2994@j298c (make-record-constructor-descriptor j2990@j298b j291f@j2917 j2992@j298d)) (set! j2997@p? (record-predicate j2990@j298b)) (set! j2999@make-implementation-restriction-violation (record-constructor j2994@j298c)) (set! j299b@implementation-restriction-violation? (condition-predicate j2990@j298b)) (set! j299d@&implementation-restriction-rtd j2990@j298b) (set! j299f@&implementation-restriction-rcd j2994@j298c) (set! j29a5@j29a0 (make-record-type-descriptor '&lexical j291b@j2916 'j29a3 '#f '#f '#())) (set! j29a7@j29a2 '#f) (set! j29a9@j29a1 (make-record-constructor-descriptor j29a5@j29a0 j291f@j2917 j29a7@j29a2)) (set! j29ac@p? (record-predicate j29a5@j29a0)) (set! j29ae@make-lexical-violation (record-constructor j29a9@j29a1)) (set! j29b0@lexical-violation? (condition-predicate j29a5@j29a0)) (set! j29b2@&lexical-rtd j29a5@j29a0) (set! j29b4@&lexical-rcd j29a9@j29a1) (set! j29be@j29b9 (make-record-type-descriptor '&syntax j291b@j2916 'j29bc '#f '#f '#((immutable form) (immutable subform)))) (set! j29c0@j29bb '#f) (set! j29c2@j29ba (make-record-constructor-descriptor j29be@j29b9 j291f@j2917 j29c0@j29bb)) (set! j29c5@p? (record-predicate j29be@j29b9)) (set! j29c7@make-syntax-violation (record-constructor j29c2@j29ba)) (set! j29c9@j29b6 (record-accessor j29be@j29b9 '0)) (set! j29cb@j29b8 (record-accessor j29be@j29b9 '1)) (set! j29cd@syntax-violation? (condition-predicate j29be@j29b9)) (set! j29cf@syntax-violation-form (condition-accessor j29be@j29b9 j29c9@j29b6)) (set! j29d1@syntax-violation-subform (condition-accessor j29be@j29b9 j29cb@j29b8)) (set! j29d3@&syntax-rtd j29be@j29b9) (set! j29d5@&syntax-rcd j29c2@j29ba) (set! j29db@j29d6 (make-record-type-descriptor '&undefined j291b@j2916 'j29d9 '#f '#f '#())) (set! j29dd@j29d8 '#f) (set! j29df@j29d7 (make-record-constructor-descriptor j29db@j29d6 j291f@j2917 j29dd@j29d8)) (set! j29e2@p? (record-predicate j29db@j29d6)) (set! j29e4@make-undefined-violation (record-constructor j29df@j29d7)) (set! j29e6@undefined-violation? (condition-predicate j29db@j29d6)) (set! j29e8@&undefined-rtd j29db@j29d6) (set! j29ea@&undefined-rcd j29df@j29d7) (set! j29f0@j29eb (make-record-type-descriptor '&i/o j2906@j2901 'j29ee '#f '#f '#())) (set! j29f2@j29ed '#f) (set! j29f4@j29ec (make-record-constructor-descriptor j29f0@j29eb j290a@j2902 j29f2@j29ed)) (set! j29f7@p? (record-predicate j29f0@j29eb)) (set! j29f9@make-i/o-error (record-constructor j29f4@j29ec)) (set! j29fb@i/o-error? (condition-predicate j29f0@j29eb)) (set! j29fd@&i/o-rtd j29f0@j29eb) (set! j29ff@&i/o-rcd j29f4@j29ec) (set! j2a05@j2a00 (make-record-type-descriptor '&i/o-read j29f0@j29eb 'j2a03 '#f '#f '#())) (set! j2a07@j2a02 '#f) (set! j2a09@j2a01 (make-record-constructor-descriptor j2a05@j2a00 j29f4@j29ec j2a07@j2a02)) (set! j2a0c@p? (record-predicate j2a05@j2a00)) (set! j2a0e@make-i/o-read-error (record-constructor j2a09@j2a01)) (set! j2a10@i/o-read-error? (condition-predicate j2a05@j2a00)) (set! j2a12@&i/o-read-rtd j2a05@j2a00) (set! j2a14@&i/o-read-rcd j2a09@j2a01) (set! j2a1a@j2a15 (make-record-type-descriptor '&i/o-write j29f0@j29eb 'j2a18 '#f '#f '#())) (set! j2a1c@j2a17 '#f) (set! j2a1e@j2a16 (make-record-constructor-descriptor j2a1a@j2a15 j29f4@j29ec j2a1c@j2a17)) (set! j2a21@p? (record-predicate j2a1a@j2a15)) (set! j2a23@make-i/o-write-error (record-constructor j2a1e@j2a16)) (set! j2a25@i/o-write-error? (condition-predicate j2a1a@j2a15)) (set! j2a27@&i/o-write-rtd j2a1a@j2a15) (set! j2a29@&i/o-write-rcd j2a1e@j2a16) (set! j2a31@j2a2c (make-record-type-descriptor '&i/o-invalid-position j29f0@j29eb 'j2a2f '#f '#f '#((immutable position)))) (set! j2a33@j2a2e '#f) (set! j2a35@j2a2d (make-record-constructor-descriptor j2a31@j2a2c j29f4@j29ec j2a33@j2a2e)) (set! j2a38@p? (record-predicate j2a31@j2a2c)) (set! j2a3a@make-i/o-invalid-position-error (record-constructor j2a35@j2a2d)) (set! j2a3c@j2a2b (record-accessor j2a31@j2a2c '0)) (set! j2a3e@i/o-invalid-position-error? (condition-predicate j2a31@j2a2c)) (set! j2a40@i/o-error-position (condition-accessor j2a31@j2a2c j2a3c@j2a2b)) (set! j2a42@&i/o-invalid-position-rtd j2a31@j2a2c) (set! j2a44@&i/o-invalid-position-rcd j2a35@j2a2d) (set! j2a4c@j2a47 (make-record-type-descriptor '&i/o-filename j29f0@j29eb 'j2a4a '#f '#f '#((immutable filename)))) (set! j2a4e@j2a49 '#f) (set! j2a50@j2a48 (make-record-constructor-descriptor j2a4c@j2a47 j29f4@j29ec j2a4e@j2a49)) (set! j2a53@p? (record-predicate j2a4c@j2a47)) (set! j2a55@make-i/o-filename-error (record-constructor j2a50@j2a48)) (set! j2a57@j2a46 (record-accessor j2a4c@j2a47 '0)) (set! j2a59@i/o-filename-error? (condition-predicate j2a4c@j2a47)) (set! j2a5b@i/o-error-filename (condition-accessor j2a4c@j2a47 j2a57@j2a46)) (set! j2a5d@&i/o-filename-rtd j2a4c@j2a47) (set! j2a5f@&i/o-filename-rcd j2a50@j2a48) (set! j2a65@j2a60 (make-record-type-descriptor '&i/o-file-protection j2a4c@j2a47 'j2a63 '#f '#f '#())) (set! j2a67@j2a62 '#f) (set! j2a69@j2a61 (make-record-constructor-descriptor j2a65@j2a60 j2a50@j2a48 j2a67@j2a62)) (set! j2a6c@p? (record-predicate j2a65@j2a60)) (set! j2a6e@make-i/o-file-protection-error (record-constructor j2a69@j2a61)) (set! j2a70@i/o-file-protection-error? (condition-predicate j2a65@j2a60)) (set! j2a72@&i/o-file-protection-rtd j2a65@j2a60) (set! j2a74@&i/o-file-protection-rcd j2a69@j2a61) (set! j2a7a@j2a75 (make-record-type-descriptor '&i/o-file-is-read-only j2a65@j2a60 'j2a78 '#f '#f '#())) (set! j2a7c@j2a77 '#f) (set! j2a7e@j2a76 (make-record-constructor-descriptor j2a7a@j2a75 j2a69@j2a61 j2a7c@j2a77)) (set! j2a81@p? (record-predicate j2a7a@j2a75)) (set! j2a83@make-i/o-file-is-read-only-error (record-constructor j2a7e@j2a76)) (set! j2a85@i/o-file-is-read-only-error? (condition-predicate j2a7a@j2a75)) (set! j2a87@&i/o-file-is-read-only-rtd j2a7a@j2a75) (set! j2a89@&i/o-file-is-read-only-rcd j2a7e@j2a76) (set! j2a8f@j2a8a (make-record-type-descriptor '&i/o-file-already-exists j2a4c@j2a47 'j2a8d '#f '#f '#())) (set! j2a91@j2a8c '#f) (set! j2a93@j2a8b (make-record-constructor-descriptor j2a8f@j2a8a j2a50@j2a48 j2a91@j2a8c)) (set! j2a96@p? (record-predicate j2a8f@j2a8a)) (set! j2a98@make-i/o-file-already-exists-error (record-constructor j2a93@j2a8b)) (set! j2a9a@i/o-file-already-exists-error? (condition-predicate j2a8f@j2a8a)) (set! j2a9c@&i/o-file-already-exists-rtd j2a8f@j2a8a) (set! j2a9e@&i/o-file-already-exists-rcd j2a93@j2a8b) (set! j2aa4@j2a9f (make-record-type-descriptor '&i/o-file-does-not-exist j2a4c@j2a47 'j2aa2 '#f '#f '#())) (set! j2aa6@j2aa1 '#f) (set! j2aa8@j2aa0 (make-record-constructor-descriptor j2aa4@j2a9f j2a50@j2a48 j2aa6@j2aa1)) (set! j2aab@p? (record-predicate j2aa4@j2a9f)) (set! j2aad@make-i/o-file-does-not-exist-error (record-constructor j2aa8@j2aa0)) (set! j2aaf@i/o-file-does-not-exist-error? (condition-predicate j2aa4@j2a9f)) (set! j2ab1@&i/o-file-does-not-exist-rtd j2aa4@j2a9f) (set! j2ab3@&i/o-file-does-not-exist-rcd j2aa8@j2aa0) (set! j2abb@j2ab6 (make-record-type-descriptor '&i/o-port j29f0@j29eb 'j2ab9 '#f '#f '#((immutable port)))) (set! j2abd@j2ab8 '#f) (set! j2abf@j2ab7 (make-record-constructor-descriptor j2abb@j2ab6 j29f4@j29ec j2abd@j2ab8)) (set! j2ac2@p? (record-predicate j2abb@j2ab6)) (set! j2ac4@make-i/o-port-error (record-constructor j2abf@j2ab7)) (set! j2ac6@j2ab5 (record-accessor j2abb@j2ab6 '0)) (set! j2ac8@i/o-port-error? (condition-predicate j2abb@j2ab6)) (set! j2aca@i/o-error-port (condition-accessor j2abb@j2ab6 j2ac6@j2ab5)) (set! j2acc@&i/o-port-rtd j2abb@j2ab6) (set! j2ace@&i/o-port-rcd j2abf@j2ab7) (set! j2ad4@j2acf (make-record-type-descriptor '&i/o-decoding j2abb@j2ab6 'j2ad2 '#f '#f '#())) (set! j2ad6@j2ad1 '#f) (set! j2ad8@j2ad0 (make-record-constructor-descriptor j2ad4@j2acf j2abf@j2ab7 j2ad6@j2ad1)) (set! j2adb@p? (record-predicate j2ad4@j2acf)) (set! j2add@make-i/o-decoding-error (record-constructor j2ad8@j2ad0)) (set! j2adf@i/o-decoding-error? (condition-predicate j2ad4@j2acf)) (set! j2ae1@&i/o-decoding-rtd j2ad4@j2acf) (set! j2ae3@&i/o-decoding-rcd j2ad8@j2ad0) (set! j2aeb@j2ae6 (make-record-type-descriptor '&i/o-encoding j2abb@j2ab6 'j2ae9 '#f '#f '#((immutable char)))) (set! j2aed@j2ae8 '#f) (set! j2aef@j2ae7 (make-record-constructor-descriptor j2aeb@j2ae6 j2abf@j2ab7 j2aed@j2ae8)) (set! j2af2@p? (record-predicate j2aeb@j2ae6)) (set! j2af4@make-i/o-encoding-error (record-constructor j2aef@j2ae7)) (set! j2af6@j2ae5 (record-accessor j2aeb@j2ae6 '0)) (set! j2af8@i/o-encoding-error? (condition-predicate j2aeb@j2ae6)) (set! j2afa@i/o-encoding-error-char (condition-accessor j2aeb@j2ae6 j2af6@j2ae5)) (set! j2afc@&i/o-encoding-rtd j2aeb@j2ae6) (set! j2afe@&i/o-encoding-rcd j2aef@j2ae7) (set! j2b04@j2aff (make-record-type-descriptor '&no-infinities j2990@j298b 'j2b02 '#f '#f '#())) (set! j2b06@j2b01 '#f) (set! j2b08@j2b00 (make-record-constructor-descriptor j2b04@j2aff j2994@j298c j2b06@j2b01)) (set! j2b0b@p? (record-predicate j2b04@j2aff)) (set! j2b0d@make-no-infinities-violation (record-constructor j2b08@j2b00)) (set! j2b0f@no-infinities-violation? (condition-predicate j2b04@j2aff)) (set! j2b11@&no-infinities-rtd j2b04@j2aff) (set! j2b13@&no-infinities-rcd j2b08@j2b00) (set! j2b19@j2b14 (make-record-type-descriptor '&no-nans j2990@j298b 'j2b17 '#f '#f '#())) (set! j2b1b@j2b16 '#f) (set! j2b1d@j2b15 (make-record-constructor-descriptor j2b19@j2b14 j2994@j298c j2b1b@j2b16)) (set! j2b20@p? (record-predicate j2b19@j2b14)) (set! j2b22@make-no-nans-violation (record-constructor j2b1d@j2b15)) (set! j2b24@no-nans-violation? (condition-predicate j2b19@j2b14)) (set! j2b26@&no-nans-rtd j2b19@j2b14) (set! j2b28@&no-nans-rcd j2b1d@j2b15) (begin (set! j2c19@j2b28@&no-nans-rcd j2b28@&no-nans-rcd) (set! j2c18@j2b26@&no-nans-rtd j2b26@&no-nans-rtd) (set! j2c17@j2b24@no-nans-violation? j2b24@no-nans-violation?) (set! j2c16@j2b22@make-no-nans-violation j2b22@make-no-nans-violation) (set! j2c15@j2b20@p? j2b20@p?) (set! j2c14@j2b1d@j2b15 j2b1d@j2b15) (set! j2c13@j2b1b@j2b16 j2b1b@j2b16) (set! j2c12@j2b19@j2b14 j2b19@j2b14) (set! j2c11@j2b13@&no-infinities-rcd j2b13@&no-infinities-rcd) (set! j2c10@j2b11@&no-infinities-rtd j2b11@&no-infinities-rtd) (set! j2c0f@j2b0f@no-infinities-violation? j2b0f@no-infinities-violation?) (set! j2c0e@j2b0d@make-no-infinities-violation j2b0d@make-no-infinities-violation) (set! j2c0d@j2b0b@p? j2b0b@p?) (set! j2c0c@j2b08@j2b00 j2b08@j2b00) (set! j2c0b@j2b06@j2b01 j2b06@j2b01) (set! j2c0a@j2b04@j2aff j2b04@j2aff) (set! j2c09@j2afe@&i/o-encoding-rcd j2afe@&i/o-encoding-rcd) (set! j2c08@j2afc@&i/o-encoding-rtd j2afc@&i/o-encoding-rtd) (set! j2c07@j2afa@i/o-encoding-error-char j2afa@i/o-encoding-error-char) (set! j2c06@j2af8@i/o-encoding-error? j2af8@i/o-encoding-error?) (set! j2c05@j2af6@j2ae5 j2af6@j2ae5) (set! j2c04@j2af4@make-i/o-encoding-error j2af4@make-i/o-encoding-error) (set! j2c03@j2af2@p? j2af2@p?) (set! j2c02@j2aef@j2ae7 j2aef@j2ae7) (set! j2c01@j2aed@j2ae8 j2aed@j2ae8) (set! j2c00@j2aeb@j2ae6 j2aeb@j2ae6) (set! j2bff@j2ae3@&i/o-decoding-rcd j2ae3@&i/o-decoding-rcd) (set! j2bfe@j2ae1@&i/o-decoding-rtd j2ae1@&i/o-decoding-rtd) (set! j2bfd@j2adf@i/o-decoding-error? j2adf@i/o-decoding-error?) (set! j2bfc@j2add@make-i/o-decoding-error j2add@make-i/o-decoding-error) (set! j2bfb@j2adb@p? j2adb@p?) (set! j2bfa@j2ad8@j2ad0 j2ad8@j2ad0) (set! j2bf9@j2ad6@j2ad1 j2ad6@j2ad1) (set! j2bf8@j2ad4@j2acf j2ad4@j2acf) (set! j2bf7@j2ace@&i/o-port-rcd j2ace@&i/o-port-rcd) (set! j2bf6@j2acc@&i/o-port-rtd j2acc@&i/o-port-rtd) (set! j2bf5@j2aca@i/o-error-port j2aca@i/o-error-port) (set! j2bf4@j2ac8@i/o-port-error? j2ac8@i/o-port-error?) (set! j2bf3@j2ac6@j2ab5 j2ac6@j2ab5) (set! j2bf2@j2ac4@make-i/o-port-error j2ac4@make-i/o-port-error) (set! j2bf1@j2ac2@p? j2ac2@p?) (set! j2bf0@j2abf@j2ab7 j2abf@j2ab7) (set! j2bef@j2abd@j2ab8 j2abd@j2ab8) (set! j2bee@j2abb@j2ab6 j2abb@j2ab6) (set! j2bed@j2ab3@&i/o-file-does-not-exist-rcd j2ab3@&i/o-file-does-not-exist-rcd) (set! j2bec@j2ab1@&i/o-file-does-not-exist-rtd j2ab1@&i/o-file-does-not-exist-rtd) (set! j2beb@j2aaf@i/o-file-does-not-exist-error? j2aaf@i/o-file-does-not-exist-error?) (set! j2bea@j2aad@make-i/o-file-does-not-exist-error j2aad@make-i/o-file-does-not-exist-error) (set! j2be9@j2aab@p? j2aab@p?) (set! j2be8@j2aa8@j2aa0 j2aa8@j2aa0) (set! j2be7@j2aa6@j2aa1 j2aa6@j2aa1) (set! j2be6@j2aa4@j2a9f j2aa4@j2a9f) (set! j2be5@j2a9e@&i/o-file-already-exists-rcd j2a9e@&i/o-file-already-exists-rcd) (set! j2be4@j2a9c@&i/o-file-already-exists-rtd j2a9c@&i/o-file-already-exists-rtd) (set! j2be3@j2a9a@i/o-file-already-exists-error? j2a9a@i/o-file-already-exists-error?) (set! j2be2@j2a98@make-i/o-file-already-exists-error j2a98@make-i/o-file-already-exists-error) (set! j2be1@j2a96@p? j2a96@p?) (set! j2be0@j2a93@j2a8b j2a93@j2a8b) (set! j2bdf@j2a91@j2a8c j2a91@j2a8c) (set! j2bde@j2a8f@j2a8a j2a8f@j2a8a) (set! j2bdd@j2a89@&i/o-file-is-read-only-rcd j2a89@&i/o-file-is-read-only-rcd) (set! j2bdc@j2a87@&i/o-file-is-read-only-rtd j2a87@&i/o-file-is-read-only-rtd) (set! j2bdb@j2a85@i/o-file-is-read-only-error? j2a85@i/o-file-is-read-only-error?) (set! j2bda@j2a83@make-i/o-file-is-read-only-error j2a83@make-i/o-file-is-read-only-error) (set! j2bd9@j2a81@p? j2a81@p?) (set! j2bd8@j2a7e@j2a76 j2a7e@j2a76) (set! j2bd7@j2a7c@j2a77 j2a7c@j2a77) (set! j2bd6@j2a7a@j2a75 j2a7a@j2a75) (set! j2bd5@j2a74@&i/o-file-protection-rcd j2a74@&i/o-file-protection-rcd) (set! j2bd4@j2a72@&i/o-file-protection-rtd j2a72@&i/o-file-protection-rtd) (set! j2bd3@j2a70@i/o-file-protection-error? j2a70@i/o-file-protection-error?) (set! j2bd2@j2a6e@make-i/o-file-protection-error j2a6e@make-i/o-file-protection-error) (set! j2bd1@j2a6c@p? j2a6c@p?) (set! j2bd0@j2a69@j2a61 j2a69@j2a61) (set! j2bcf@j2a67@j2a62 j2a67@j2a62) (set! j2bce@j2a65@j2a60 j2a65@j2a60) (set! j2bcd@j2a5f@&i/o-filename-rcd j2a5f@&i/o-filename-rcd) (set! j2bcc@j2a5d@&i/o-filename-rtd j2a5d@&i/o-filename-rtd) (set! j2bcb@j2a5b@i/o-error-filename j2a5b@i/o-error-filename) (set! j2bca@j2a59@i/o-filename-error? j2a59@i/o-filename-error?) (set! j2bc9@j2a57@j2a46 j2a57@j2a46) (set! j2bc8@j2a55@make-i/o-filename-error j2a55@make-i/o-filename-error) (set! j2bc7@j2a53@p? j2a53@p?) (set! j2bc6@j2a50@j2a48 j2a50@j2a48) (set! j2bc5@j2a4e@j2a49 j2a4e@j2a49) (set! j2bc4@j2a4c@j2a47 j2a4c@j2a47) (set! j2bc3@j2a44@&i/o-invalid-position-rcd j2a44@&i/o-invalid-position-rcd) (set! j2bc2@j2a42@&i/o-invalid-position-rtd j2a42@&i/o-invalid-position-rtd) (set! j2bc1@j2a40@i/o-error-position j2a40@i/o-error-position) (set! j2bc0@j2a3e@i/o-invalid-position-error? j2a3e@i/o-invalid-position-error?) (set! j2bbf@j2a3c@j2a2b j2a3c@j2a2b) (set! j2bbe@j2a3a@make-i/o-invalid-position-error j2a3a@make-i/o-invalid-position-error) (set! j2bbd@j2a38@p? j2a38@p?) (set! j2bbc@j2a35@j2a2d j2a35@j2a2d) (set! j2bbb@j2a33@j2a2e j2a33@j2a2e) (set! j2bba@j2a31@j2a2c j2a31@j2a2c) (set! j2bb9@j2a29@&i/o-write-rcd j2a29@&i/o-write-rcd) (set! j2bb8@j2a27@&i/o-write-rtd j2a27@&i/o-write-rtd) (set! j2bb7@j2a25@i/o-write-error? j2a25@i/o-write-error?) (set! j2bb6@j2a23@make-i/o-write-error j2a23@make-i/o-write-error) (set! j2bb5@j2a21@p? j2a21@p?) (set! j2bb4@j2a1e@j2a16 j2a1e@j2a16) (set! j2bb3@j2a1c@j2a17 j2a1c@j2a17) (set! j2bb2@j2a1a@j2a15 j2a1a@j2a15) (set! j2bb1@j2a14@&i/o-read-rcd j2a14@&i/o-read-rcd) (set! j2bb0@j2a12@&i/o-read-rtd j2a12@&i/o-read-rtd) (set! j2baf@j2a10@i/o-read-error? j2a10@i/o-read-error?) (set! j2bae@j2a0e@make-i/o-read-error j2a0e@make-i/o-read-error) (set! j2bad@j2a0c@p? j2a0c@p?) (set! j2bac@j2a09@j2a01 j2a09@j2a01) (set! j2bab@j2a07@j2a02 j2a07@j2a02) (set! j2baa@j2a05@j2a00 j2a05@j2a00) (set! j2ba9@j29ff@&i/o-rcd j29ff@&i/o-rcd) (set! j2ba8@j29fd@&i/o-rtd j29fd@&i/o-rtd) (set! j2ba7@j29fb@i/o-error? j29fb@i/o-error?) (set! j2ba6@j29f9@make-i/o-error j29f9@make-i/o-error) (set! j2ba5@j29f7@p? j29f7@p?) (set! j2ba4@j29f4@j29ec j29f4@j29ec) (set! j2ba3@j29f2@j29ed j29f2@j29ed) (set! j2ba2@j29f0@j29eb j29f0@j29eb) (set! j2ba1@j29ea@&undefined-rcd j29ea@&undefined-rcd) (set! j2ba0@j29e8@&undefined-rtd j29e8@&undefined-rtd) (set! j2b9f@j29e6@undefined-violation? j29e6@undefined-violation?) (set! j2b9e@j29e4@make-undefined-violation j29e4@make-undefined-violation) (set! j2b9d@j29e2@p? j29e2@p?) (set! j2b9c@j29df@j29d7 j29df@j29d7) (set! j2b9b@j29dd@j29d8 j29dd@j29d8) (set! j2b9a@j29db@j29d6 j29db@j29d6) (set! j2b99@j29d5@&syntax-rcd j29d5@&syntax-rcd) (set! j2b98@j29d3@&syntax-rtd j29d3@&syntax-rtd) (set! j2b97@j29d1@syntax-violation-subform j29d1@syntax-violation-subform) (set! j2b96@j29cf@syntax-violation-form j29cf@syntax-violation-form) (set! j2b95@j29cd@syntax-violation? j29cd@syntax-violation?) (set! j2b94@j29cb@j29b8 j29cb@j29b8) (set! j2b93@j29c9@j29b6 j29c9@j29b6) (set! j2b92@j29c7@make-syntax-violation j29c7@make-syntax-violation) (set! j2b91@j29c5@p? j29c5@p?) (set! j2b90@j29c2@j29ba j29c2@j29ba) (set! j2b8f@j29c0@j29bb j29c0@j29bb) (set! j2b8e@j29be@j29b9 j29be@j29b9) (set! j2b8d@j29b4@&lexical-rcd j29b4@&lexical-rcd) (set! j2b8c@j29b2@&lexical-rtd j29b2@&lexical-rtd) (set! j2b8b@j29b0@lexical-violation? j29b0@lexical-violation?) (set! j2b8a@j29ae@make-lexical-violation j29ae@make-lexical-violation) (set! j2b89@j29ac@p? j29ac@p?) (set! j2b88@j29a9@j29a1 j29a9@j29a1) (set! j2b87@j29a7@j29a2 j29a7@j29a2) (set! j2b86@j29a5@j29a0 j29a5@j29a0) (set! j2b85@j299f@&implementation-restriction-rcd j299f@&implementation-restriction-rcd) (set! j2b84@j299d@&implementation-restriction-rtd j299d@&implementation-restriction-rtd) (set! j2b83@j299b@implementation-restriction-violation? j299b@implementation-restriction-violation?) (set! j2b82@j2999@make-implementation-restriction-violation j2999@make-implementation-restriction-violation) (set! j2b81@j2997@p? j2997@p?) (set! j2b80@j2994@j298c j2994@j298c) (set! j2b7f@j2992@j298d j2992@j298d) (set! j2b7e@j2990@j298b j2990@j298b) (set! j2b7d@j298a@&non-continuable-rcd j298a@&non-continuable-rcd) (set! j2b7c@j2988@&non-continuable-rtd j2988@&non-continuable-rtd) (set! j2b7b@j2986@non-continuable-violation? j2986@non-continuable-violation?) (set! j2b7a@j2984@make-non-continuable-violation j2984@make-non-continuable-violation) (set! j2b79@j2982@p? j2982@p?) (set! j2b78@j297f@j2977 j297f@j2977) (set! j2b77@j297d@j2978 j297d@j2978) (set! j2b76@j297b@j2976 j297b@j2976) (set! j2b75@j2975@&who-rcd j2975@&who-rcd) (set! j2b74@j2973@&who-rtd j2973@&who-rtd) (set! j2b73@j2971@condition-who j2971@condition-who) (set! j2b72@j296f@who-condition? j296f@who-condition?) (set! j2b71@j296d@j295c j296d@j295c) (set! j2b70@j296b@make-who-condition j296b@make-who-condition) (set! j2b6f@j2969@p? j2969@p?) (set! j2b6e@j2966@j295e j2966@j295e) (set! j2b6d@j2964@j295f j2964@j295f) (set! j2b6c@j2962@j295d j2962@j295d) (set! j2b6b@j295a@&irritants-rcd j295a@&irritants-rcd) (set! j2b6a@j2958@&irritants-rtd j2958@&irritants-rtd) (set! j2b69@j2956@condition-irritants j2956@condition-irritants) (set! j2b68@j2954@irritants-condition? j2954@irritants-condition?) (set! j2b67@j2952@j2941 j2952@j2941) (set! j2b66@j2950@make-irritants-condition j2950@make-irritants-condition) (set! j2b65@j294e@p? j294e@p?) (set! j2b64@j294b@j2943 j294b@j2943) (set! j2b63@j2949@j2944 j2949@j2944) (set! j2b62@j2947@j2942 j2947@j2942) (set! j2b61@j293f@&assertion-rcd j293f@&assertion-rcd) (set! j2b60@j293d@&assertion-rtd j293d@&assertion-rtd) (set! j2b5f@j293b@assertion-violation? j293b@assertion-violation?) (set! j2b5e@j2939@make-assertion-violation j2939@make-assertion-violation) (set! j2b5d@j2937@p? j2937@p?) (set! j2b5c@j2934@j292c j2934@j292c) (set! j2b5b@j2932@j292d j2932@j292d) (set! j2b5a@j2930@j292b j2930@j292b) (set! j2b59@j292a@&violation-rcd j292a@&violation-rcd) (set! j2b58@j2928@&violation-rtd j2928@&violation-rtd) (set! j2b57@j2926@violation? j2926@violation?) (set! j2b56@j2924@make-violation j2924@make-violation) (set! j2b55@j2922@p? j2922@p?) (set! j2b54@j291f@j2917 j291f@j2917) (set! j2b53@j291d@j2918 j291d@j2918) (set! j2b52@j291b@j2916 j291b@j2916) (set! j2b51@j2915@&error-rcd j2915@&error-rcd) (set! j2b50@j2913@&error-rtd j2913@&error-rtd) (set! j2b4f@j2911@error? j2911@error?) (set! j2b4e@j290f@make-error j290f@make-error) (set! j2b4d@j290d@p? j290d@p?) (set! j2b4c@j290a@j2902 j290a@j2902) (set! j2b4b@j2908@j2903 j2908@j2903) (set! j2b4a@j2906@j2901 j2906@j2901) (set! j2b49@j2900@&serious-rcd j2900@&serious-rcd) (set! j2b48@j28fe@&serious-rtd j28fe@&serious-rtd) (set! j2b47@j28fc@serious-condition? j28fc@serious-condition?) (set! j2b46@j28fa@make-serious-condition j28fa@make-serious-condition) (set! j2b45@j28f8@p? j28f8@p?) (set! j2b44@j28f5@j28ed j28f5@j28ed) (set! j2b43@j28f3@j28ee j28f3@j28ee) (set! j2b42@j28f1@j28ec j28f1@j28ec) (set! j2b41@j28eb@&warning-rcd j28eb@&warning-rcd) (set! j2b40@j28e9@&warning-rtd j28e9@&warning-rtd) (set! j2b3f@j28e7@warning? j28e7@warning?) (set! j2b3e@j28e5@make-warning j28e5@make-warning) (set! j2b3d@j28e3@p? j28e3@p?) (set! j2b3c@j28e0@j28d8 j28e0@j28d8) (set! j2b3b@j28de@j28d9 j28de@j28d9) (set! j2b3a@j28dc@j28d7 j28dc@j28d7) (set! j2b39@j28d6@&message-rcd j28d6@&message-rcd) (set! j2b38@j28d4@&message-rtd j28d4@&message-rtd) (set! j2b37@j28d2@condition-message j28d2@condition-message) (set! j2b36@j28d0@message-condition? j28d0@message-condition?) (set! j2b35@j28ce@j28bd j28ce@j28bd) (set! j2b34@j28cc@make-message-condition j28cc@make-message-condition) (set! j2b33@j28ca@p? j28ca@p?) (set! j2b32@j28c7@j28bf j28c7@j28bf) (set! j2b31@j28c5@j28c0 j28c5@j28c0) (set! j2b30@j28c3@j28be j28c3@j28be) (set! j2b2f@j2877@&condition-rcd j2877@&condition-rcd) (set! j2b2e@j2875@&condition-rtd j2875@&condition-rtd) (set! j2b2d@j2873@make-&condition j2873@make-&condition) (set! j2b2c@j2871@&condition? j2871@&condition?) (set! j2b2b@j286e@j2866 j286e@j2866) (set! j2b2a@j286c@j2867 j286c@j2867) (set! j2b29@j286a@j2865 j286a@j2865)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (j70c@j6c1@current-primitive-locations (lambda (j30f1@x) ((lambda (j30f3@t) (if j30f3@t (cdr j30f3@t) '#f)) (assq j30f1@x '((&no-nans-rcd . j2c19@j2b28@&no-nans-rcd) (&no-nans-rtd . j2c18@j2b26@&no-nans-rtd) (&no-infinities-rcd . j2c11@j2b13@&no-infinities-rcd) (&no-infinities-rtd . j2c10@j2b11@&no-infinities-rtd) (&i/o-encoding-rcd . j2c09@j2afe@&i/o-encoding-rcd) (&i/o-encoding-rtd . j2c08@j2afc@&i/o-encoding-rtd) (&i/o-decoding-rcd . j2bff@j2ae3@&i/o-decoding-rcd) (&i/o-decoding-rtd . j2bfe@j2ae1@&i/o-decoding-rtd) (&i/o-port-rcd . j2bf7@j2ace@&i/o-port-rcd) (&i/o-port-rtd . j2bf6@j2acc@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . j2bed@j2ab3@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . j2bec@j2ab1@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . j2be5@j2a9e@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . j2be4@j2a9c@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . j2bdd@j2a89@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . j2bdc@j2a87@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . j2bd5@j2a74@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . j2bd4@j2a72@&i/o-file-protection-rtd) (&i/o-filename-rcd . j2bcd@j2a5f@&i/o-filename-rcd) (&i/o-filename-rtd . j2bcc@j2a5d@&i/o-filename-rtd) (&i/o-invalid-position-rcd . j2bc3@j2a44@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . j2bc2@j2a42@&i/o-invalid-position-rtd) (&i/o-write-rcd . j2bb9@j2a29@&i/o-write-rcd) (&i/o-write-rtd . j2bb8@j2a27@&i/o-write-rtd) (&i/o-read-rcd . j2bb1@j2a14@&i/o-read-rcd) (&i/o-read-rtd . j2bb0@j2a12@&i/o-read-rtd) (&i/o-rcd . j2ba9@j29ff@&i/o-rcd) (&i/o-rtd . j2ba8@j29fd@&i/o-rtd) (&undefined-rcd . j2ba1@j29ea@&undefined-rcd) (&undefined-rtd . j2ba0@j29e8@&undefined-rtd) (&syntax-rcd . j2b99@j29d5@&syntax-rcd) (&syntax-rtd . j2b98@j29d3@&syntax-rtd) (&lexical-rcd . j2b8d@j29b4@&lexical-rcd) (&lexical-rtd . j2b8c@j29b2@&lexical-rtd) (&implementation-restriction-rcd . j2b85@j299f@&implementation-restriction-rcd) (&implementation-restriction-rtd . j2b84@j299d@&implementation-restriction-rtd) (&non-continuable-rcd . j2b7d@j298a@&non-continuable-rcd) (&non-continuable-rtd . j2b7c@j2988@&non-continuable-rtd) (&who-rcd . j2b75@j2975@&who-rcd) (&who-rtd . j2b74@j2973@&who-rtd) (&irritants-rcd . j2b6b@j295a@&irritants-rcd) (&irritants-rtd . j2b6a@j2958@&irritants-rtd) (&assertion-rcd . j2b61@j293f@&assertion-rcd) (&assertion-rtd . j2b60@j293d@&assertion-rtd) (&violation-rcd . j2b59@j292a@&violation-rcd) (&violation-rtd . j2b58@j2928@&violation-rtd) (&error-rcd . j2b51@j2915@&error-rcd) (&error-rtd . j2b50@j2913@&error-rtd) (&serious-rcd . j2b49@j2900@&serious-rcd) (&serious-rtd . j2b48@j28fe@&serious-rtd) (&warning-rcd . j2b41@j28eb@&warning-rcd) (&warning-rtd . j2b40@j28e9@&warning-rtd) (&message-rcd . j2b39@j28d6@&message-rcd) (&message-rtd . j2b38@j28d4@&message-rtd) (&condition-rcd . j2b2f@j2877@&condition-rcd) (&condition-rtd . j2b2e@j2875@&condition-rtd) (syntax-error . j2852@je3b@syntax-error) (syntax-dispatch . j27f0@jd5f@syntax-dispatch) (load . j2d9e@j2c35@load) (interaction-environment . j285a@je4b@interaction-environment) (library-path . j973@j7af@library-path) (mosh-cache-dir . j6ba@j59a@mosh-cache-dir) (make-parameter . j6b9@j598@make-parameter) (make-variable-transformer . j27ae@jb8c@make-variable-transformer) (identifier? . j2855@je41@identifier?) (generate-temporaries . j284b@je2d@generate-temporaries) (free-identifier=? . j284c@je2f@free-identifier=?) (syntax->datum . j2857@je45@syntax->datum) (datum->syntax . j2856@je43@datum->syntax) (bound-identifier=? . j284d@je31@bound-identifier=?) (make-i/o-write-error . j2bb6@j2a23@make-i/o-write-error) (make-i/o-read-error . j2bae@j2a0e@make-i/o-read-error) (make-i/o-port-error . j2bf2@j2ac4@make-i/o-port-error) (make-i/o-invalid-position-error . j2bbe@j2a3a@make-i/o-invalid-position-error) (make-i/o-filename-error . j2bc8@j2a55@make-i/o-filename-error) (make-i/o-file-protection-error . j2bd2@j2a6e@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . j2bda@j2a83@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . j2bea@j2aad@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . j2be2@j2a98@make-i/o-file-already-exists-error) (make-i/o-error . j2ba6@j29f9@make-i/o-error) (make-i/o-encoding-error . j2c04@j2af4@make-i/o-encoding-error) (make-i/o-decoding-error . j2bfc@j2add@make-i/o-decoding-error) (i/o-write-error? . j2bb7@j2a25@i/o-write-error?) (i/o-read-error? . j2baf@j2a10@i/o-read-error?) (i/o-port-error? . j2bf4@j2ac8@i/o-port-error?) (i/o-invalid-position-error? . j2bc0@j2a3e@i/o-invalid-position-error?) (i/o-filename-error? . j2bca@j2a59@i/o-filename-error?) (i/o-file-protection-error? . j2bd3@j2a70@i/o-file-protection-error?) (i/o-file-is-read-only-error? . j2bdb@j2a85@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . j2beb@j2aaf@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . j2be3@j2a9a@i/o-file-already-exists-error?) (i/o-error? . j2ba7@j29fb@i/o-error?) (i/o-error-position . j2bc1@j2a40@i/o-error-position) (i/o-error-port . j2bf5@j2aca@i/o-error-port) (i/o-error-filename . j2bcb@j2a5b@i/o-error-filename) (i/o-encoding-error? . j2c06@j2af8@i/o-encoding-error?) (i/o-encoding-error-char . j2c07@j2afa@i/o-encoding-error-char) (i/o-decoding-error? . j2bfd@j2adf@i/o-decoding-error?) (scheme-report-environment . j2842@je1b@scheme-report-environment) (null-environment . j2841@je19@null-environment) (command-line . j2d9b@j2c2f@command-line) (eval . j2844@je1f@eval) (environment . j2840@je17@environment) (who-condition? . j2b72@j296f@who-condition?) (warning? . j2b3f@j28e7@warning?) (violation? . j2b57@j2926@violation?) (undefined-violation? . j2b9f@j29e6@undefined-violation?) (syntax-violation? . j2b95@j29cd@syntax-violation?) (syntax-violation-subform . j2b97@j29d1@syntax-violation-subform) (syntax-violation-form . j2b96@j29cf@syntax-violation-form) (syntax-violation . j2854@je3f@syntax-violation) (serious-condition? . j2b47@j28fc@serious-condition?) (non-continuable-violation? . j2b7b@j2986@non-continuable-violation?) (message-condition? . j2b36@j28d0@message-condition?) (make-who-condition . j2b70@j296b@make-who-condition) (make-warning . j2b3e@j28e5@make-warning) (make-violation . j2b56@j2924@make-violation) (make-undefined-violation . j2b9e@j29e4@make-undefined-violation) (make-syntax-violation . j2b92@j29c7@make-syntax-violation) (make-serious-condition . j2b46@j28fa@make-serious-condition) (make-non-continuable-violation . j2b7a@j2984@make-non-continuable-violation) (make-message-condition . j2b34@j28cc@make-message-condition) (make-lexical-violation . j2b8a@j29ae@make-lexical-violation) (make-irritants-condition . j2b66@j2950@make-irritants-condition) (make-implementation-restriction-violation . j2b82@j2999@make-implementation-restriction-violation) (make-error . j2b4e@j290f@make-error) (make-assertion-violation . j2b5e@j2939@make-assertion-violation) (lexical-violation? . j2b8b@j29b0@lexical-violation?) (irritants-condition? . j2b68@j2954@irritants-condition?) (implementation-restriction-violation? . j2b83@j299b@implementation-restriction-violation?) (error? . j2b4f@j2911@error?) (condition-who . j2b73@j2971@condition-who) (condition-message . j2b37@j28d2@condition-message) (condition-irritants . j2b69@j2956@condition-irritants) (assertion-violation? . j2b5f@j293b@assertion-violation?) (no-nans-violation? . j2c17@j2b24@no-nans-violation?) (no-infinities-violation? . j2c0f@j2b0f@no-infinities-violation?) (make-no-nans-violation . j2c16@j2b22@make-no-nans-violation) (make-no-infinities-violation . j2c0e@j2b0d@make-no-infinities-violation) (assertion-error . j2851@je39@assertion-error)))))) (j983@j7cf@install-library 'j30ce '(mosh interaction) '() '() '() '() '((regexp? . j30c6) (alist->eq-hash-table . j30c2) (format . j30bf) (string-split . j30b4) (call-process . j30ae) (set-current-directory! . j30aa) (expand-path . j30a9) (current-directory . j30a8) (%spawn . j30a7) (%waitpid . j30a6) (simple-struct-name . j30a5) (simple-struct-set! . j30a4) (simple-struct-ref . j30a3) (make-simple-struct . j30a2) (simple-struct? . j30a1) (pointer-ref-c-int64 . j30a0) (pointer-ref-c-int32 . j309f) (pointer-ref-c-int16 . j309e) (pointer-ref-c-int8 . j309d) (pointer-ref-c-uint64 . j309c) (pointer-ref-c-uint32 . j309b) (pointer-ref-c-uint16 . j309a) (pointer-ref-c-uint8 . j3099) (pointer-set-c-uint64! . j3098) (pointer-set-c-uint32! . j3097) (pointer-set-c-uint16! . j3096) (pointer-set-c-uint8! . j3095) (pointer-set-c-int64! . j3094) (pointer-set-c-int32! . j3093) (pointer-set-c-int16! . j3092) (pointer-set-c-int8! . j3091) (pointer-set-c-pointer! . j3090) (pointer-set-c-double! . j308f) (pointer-set-c-float! . j308e) (pointer-set-c-long-long! . j308d) (pointer-set-c-long! . j308c) (pointer-set-c-int! . j308b) (pointer-set-c-short! . j308a) (pointer-set-c-char! . j3089) (pointer-ref-c-pointer . j3088) (pointer-ref-c-double . j3087) (pointer-ref-c-float . j3086) (pointer-ref-c-unsigned-long-long . j3085) (pointer-ref-c-signed-long-long . j3084) (pointer-ref-c-unsigned-long . j3083) (pointer-ref-c-signed-long . j3082) (pointer-ref-c-unsigned-int . j3081) (pointer-ref-c-signed-int . j3080) (pointer-ref-c-unsigned-short . j307f) (pointer-ref-c-signed-short . j307e) (pointer-ref-c-unsigned-char . j307d) (pointer-ref-c-signed-char . j307c) (pointer->integer . j307b) (integer->pointer . j307a) (pointer? . j3079) (shared-errno . j3078) (%ffi-supported? . j3077) (%ffi-pointer->string . j3076) (%ffi-call->string-or-zero . j3075) (%ffi-call->double . j3074) (%ffi-call->void* . j3073) (%ffi-call->void . j3072) (%ffi-call->char . j3071) (%ffi-call->int . j3070) (%ffi-lookup . j306f) (%ffi-open . j306e) (%fork . j306d) (%pipe . j306c) (p . j306b) (whereis . j3050) (register . j304f) (vm-join! . j304e) (vm-set-value! . j304d) (vm? . j304c) (main-vm? . j304b) (vm-eval . j304a) (vm-self . j3049) (vm-start! . j3048) (make-vm . j3047) (mutex-try-lock! . j3046) (mutex-unlock! . j3045) (mutex-lock! . j3044) (mutex? . j3043) (make-mutex . j3042) (condition-variable-notify-all! . j3041) (condition-variable-notify! . j3040) (condition-variable-wait! . j303f) (make-condition-variable . j303e) (string-upcase . j3027) (string-titlecase . j3026) (string-normalize-nfkd . j3025) (string-normalize-nfkc . j3024) (string-normalize-nfd . j3023) (string-normalize-nfc . j3022) (string-foldcase . j3021) (string-downcase . j3020) (string-ci>? . j301f) (string-ci>=? . j301e) (string-ci=? . j301d) (string-ci<? . j301c) (string-ci<=? . j301b) (char-whitespace? . j301a) (char-upper-case? . j3019) (char-title-case? . j3018) (char-numeric? . j3017) (char-lower-case? . j3016) (char-general-category . j3015) (char-upcase . j3014) (char-titlecase . j3013) (char-foldcase . j3012) (char-downcase . j3011) (char-ci>? . j3010) (char-ci>=? . j300f) (char-ci=? . j300e) (char-ci<? . j300d) (char-ci<=? . j300c) (char-alphabetic? . j300b) (make-variable-transformer . jb8b) (identifier? . je40) (generate-temporaries . je2c) (free-identifier=? . je2e) (syntax->datum . je44) (datum->syntax . je42) (bound-identifier=? . je30) (record-type-descriptor? . j300a) (record-predicate . j3009) (record-mutator . j3008) (record-constructor . j3007) (record-accessor . j3006) (make-record-type-descriptor . j3005) (make-record-constructor-descriptor . j3004) (record? . j3003) (record-type-uid . j3002) (record-type-sealed? . j3001) (record-type-parent . j3000) (record-type-opaque? . j2fff) (record-type-name . j2ffe) (record-type-generative? . j2ffd) (record-type-field-names . j2ffc) (record-rtd . j2ffb) (record-field-mutable? . j2ffa) (delete-file . j2ff9) (file-exists? . j2ff8) (vector-sort! . j2ff7) (vector-sort . j2ff6) (list-sort . j2ff5) (symbol-hash . j2ff4) (string-ci-hash . j2ff3) (string-hash . j2ff2) (equal-hash . j2ff1) (hashtable-equivalence-function . j2ff0) (make-hashtable . j2fef) (hashtable-hash-function . j2fee) (make-eqv-hashtable . j2fed) (make-eq-hashtable . j2fec) (hashtable? . j2feb) (hashtable-update! . j2fea) (hashtable-size . j2fe9) (hashtable-set! . j2fe8) (hashtable-ref . j2fe7) (hashtable-mutable? . j2fe6) (hashtable-keys . j2fe5) (hashtable-entries . j2fe4) (hashtable-delete! . j2fe3) (hashtable-copy . j2fe2) (hashtable-contains? . j2fe1) (hashtable-clear! . j2fe0) (call-with-output-file . j2fdf) (call-with-input-file . j2fde) (write-char . j2fdd) (write . j2fdc) (with-output-to-file . j2fdb) (with-input-from-file . j2fda) (read-char . j2fd9) (read . j2fd8) (peek-char . j2fd7) (open-output-file . j2fd6) (open-input-file . j2fd5) (newline . j2fd4) (display . j2fd3) (close-output-port . j2fd2) (close-input-port . j2fd1) (eof-object? . j2fd0) (eof-object . j2fcf) (current-error-port . j2fce) (current-output-port . j2fcd) (current-input-port . j2fcc) (output-port? . j2fcb) (input-port? . j2fca) (utf-8-codec . j2fc9) (utf-16-codec . j2fc8) (transcoder-error-handling-mode . j2fc7) (transcoder-eol-style . j2fc6) (transcoder-codec . j2fc5) (transcoded-port . j2fc4) (textual-port? . j2fc3) (string->bytevector . j2fc2) (standard-output-port . j2fc1) (standard-input-port . j2fc0) (standard-error-port . j2fbf) (set-port-position! . j2fbe) (put-u8 . j2fbd) (put-string . j2fbc) (put-datum . j2fbb) (put-char . j2fba) (put-bytevector . j2fb9) (port? . j2fb8) (port-transcoder . j2fb7) (port-position . j2fb6) (port-has-set-port-position!? . j2fb5) (port-has-port-position? . j2fb4) (port-eof? . j2fb3) (output-port-buffer-mode . j2fb2) (open-string-output-port . j2fb1) (open-string-input-port . j2fb0) (open-file-output-port . j2faf) (open-file-input/output-port . j2fae) (open-file-input-port . j2fad) (open-bytevector-output-port . j2fac) (open-bytevector-input-port . j2fab) (native-transcoder . j2faa) (native-eol-style . j2fa9) (make-transcoder . j2fa8) (latin-1-codec . j2fa7) (make-i/o-write-error . j2a22) (make-i/o-read-error . j2a0d) (make-i/o-port-error . j2ac3) (make-i/o-invalid-position-error . j2a39) (make-i/o-filename-error . j2a54) (make-i/o-file-protection-error . j2a6d) (make-i/o-file-is-read-only-error . j2a82) (make-i/o-file-does-not-exist-error . j2aac) (make-i/o-file-already-exists-error . j2a97) (make-i/o-error . j29f8) (make-i/o-encoding-error . j2af3) (make-i/o-decoding-error . j2adc) (make-custom-textual-output-port . j2fa6) (make-custom-textual-input/output-port . j2fa5) (make-custom-textual-input-port . j2fa4) (make-custom-binary-output-port . j2fa3) (make-custom-binary-input/output-port . j2fa2) (make-custom-binary-input-port . j2fa1) (make-bytevector . j2fa0) (lookahead-u8 . j2f9f) (lookahead-char . j2f9e) (i/o-write-error? . j2a24) (i/o-read-error? . j2a0f) (i/o-port-error? . j2ac7) (i/o-invalid-position-error? . j2a3d) (i/o-filename-error? . j2a58) (i/o-file-protection-error? . j2a6f) (i/o-file-is-read-only-error? . j2a84) (i/o-file-does-not-exist-error? . j2aae) (i/o-file-already-exists-error? . j2a99) (i/o-error? . j29fa) (i/o-error-position . j2a3f) (i/o-error-port . j2ac9) (i/o-error-filename . j2a5a) (i/o-encoding-error? . j2af7) (i/o-encoding-error-char . j2af9) (i/o-decoding-error? . j2ade) (get-u8 . j2f9d) (get-string-n! . j2f9c) (get-string-n . j2f9b) (get-string-all . j2f9a) (get-line . j2f99) (get-datum . j2f98) (get-char . j2f97) (get-bytevector-some . j2f96) (get-bytevector-n! . j2f95) (get-bytevector-n . j2f94) (get-bytevector-all . j2f93) (flush-output-port . j2f92) (close-port . j2f91) (exit . j2f89) (command-line . j2c2e) (string-fill! . j2f88) (string-set! . j2f87) (set-cdr! . j2f86) (set-car! . j2f85) (remove . j2f84) (remv . j2f83) (remp . j2f82) (remq . j2f81) (partition . j2f80) (memv . j2f7f) (memq . j2f7e) (memp . j2f7d) (member . j2f7c) (exists . j2f7b) (for-all . j2f7a) (fold-right . j2f79) (fold-left . j2f78) (find . j2f77) (filter . j2f76) (cons* . j2f75) (assv . j2f74) (assq . j2f73) (assp . j2f72) (assoc . j2f71) (call-with-string-output-port . j2f70) (call-with-port . j2f6f) (call-with-bytevector-output-port . j2f6e) (bytevector->string . j2f6d) (buffer-mode? . j2f6c) (binary-port? . j2f6b) (with-exception-handler . j2f6a) (raise-continuable . j2f69) (raise . j2f68) (eval . je1e) (environment . je16) (make-enumeration . j2f67) (enum-set=? . j2f66) (enum-set-universe . j2f65) (enum-set-union . j2f64) (enum-set-subset? . j2f63) (enum-set-projection . j2f62) (enum-set-member? . j2f61) (enum-set-intersection . j2f60) (enum-set-indexer . j2f5f) (enum-set-difference . j2f5e) (enum-set-constructor . j2f5d) (enum-set-complement . j2f5c) (enum-set->list . j2f5b) (who-condition? . j296e) (warning? . j28e6) (violation? . j2925) (undefined-violation? . j29e5) (syntax-violation? . j29cc) (syntax-violation-subform . j29d0) (syntax-violation-form . j29ce) (syntax-violation . je3e) (simple-conditions . j2f5a) (serious-condition? . j28fb) (non-continuable-violation? . j2985) (message-condition? . j28cf) (make-who-condition . j296a) (make-warning . j28e4) (make-violation . j2923) (make-undefined-violation . j29e3) (make-syntax-violation . j29c6) (make-serious-condition . j28f9) (make-non-continuable-violation . j2983) (make-message-condition . j28cb) (make-lexical-violation . j29ad) (make-irritants-condition . j294f) (make-implementation-restriction-violation . j2998) (make-error . j290e) (make-assertion-violation . j2938) (lexical-violation? . j29af) (irritants-condition? . j2953) (implementation-restriction-violation? . j299a) (error? . j2910) (condition-who . j2970) (condition-predicate . j2f59) (condition-message . j28d1) (condition-irritants . j2955) (condition-accessor . j2f58) (condition . j2f57) (assertion-violation? . j293a) (condition? . j2f56) (utf32->string . j2f55) (utf16->string . j2f54) (utf8->string . j2f53) (uint-list->bytevector . j2f52) (u8-list->bytevector . j2f51) (string->utf8 . j2f50) (string->utf32 . j2f4f) (string->utf16 . j2f4e) (sint-list->bytevector . j2f4d) (native-endianness . j2f4c) (bytevector? . j2f4b) (bytevector=? . j2f4a) (bytevector-uint-set! . j2f49) (bytevector-uint-ref . j2f48) (bytevector-u8-set! . j2f47) (bytevector-u8-ref . j2f46) (bytevector-u64-set! . j2f45) (bytevector-u64-ref . j2f44) (bytevector-u64-native-set! . j2f43) (bytevector-u64-native-ref . j2f42) (bytevector-u32-set! . j2f41) (bytevector-u32-ref . j2f40) (bytevector-u32-native-set! . j2f3f) (bytevector-u32-native-ref . j2f3e) (bytevector-u16-set! . j2f3d) (bytevector-u16-ref . j2f3c) (bytevector-u16-native-set! . j2f3b) (bytevector-u16-native-ref . j2f3a) (bytevector-sint-set! . j2f39) (bytevector-sint-ref . j2f38) (bytevector-s8-set! . j2f37) (bytevector-s8-ref . j2f36) (bytevector-s64-set! . j2f35) (bytevector-s64-ref . j2f34) (bytevector-s64-native-set! . j2f33) (bytevector-s64-native-ref . j2f32) (bytevector-s32-set! . j2f31) (bytevector-s32-ref . j2f30) (bytevector-s32-native-set! . j2f2f) (bytevector-s32-native-ref . j2f2e) (bytevector-s16-set! . j2f2d) (bytevector-s16-ref . j2f2c) (bytevector-s16-native-set! . j2f2b) (bytevector-s16-native-ref . j2f2a) (bytevector-length . j2f29) (bytevector-ieee-single-ref . j2f28) (bytevector-ieee-single-set! . j2f27) (bytevector-ieee-single-native-set! . j2f26) (bytevector-ieee-single-native-ref . j2f25) (bytevector-ieee-double-set! . j2f24) (bytevector-ieee-double-ref . j2f23) (bytevector-ieee-double-native-set! . j2f22) (bytevector-ieee-double-native-ref . j2f21) (bytevector-fill! . j2f20) (bytevector-copy! . j2f1f) (bytevector-copy . j2f1e) (bytevector->uint-list . j2f1d) (bytevector->u8-list . j2f1c) (bytevector->sint-list . j2f1b) (no-nans-violation? . j2b23) (no-infinities-violation? . j2b0e) (make-no-nans-violation . j2b21) (make-no-infinities-violation . j2b0c) (real->flonum . j2f1a) (flzero? . j2f19) (fltruncate . j2f18) (fltan . j2f17) (flsqrt . j2f16) (flsin . j2f15) (flround . j2f14) (flpositive? . j2f13) (flonum? . j2f12) (flodd? . j2f11) (flnumerator . j2f10) (flnegative? . j2f0f) (flnan? . j2f0e) (flmod0 . j2f0d) (flmod . j2f0c) (flmin . j2f0b) (flmax . j2f0a) (fllog . j2f09) (flinteger? . j2f08) (flinfinite? . j2f07) (flfloor . j2f06) (flfinite? . j2f05) (flexpt . j2f04) (flexp . j2f03) (fleven? . j2f02) (fldiv0-and-mod0 . j2f01) (fldiv0 . j2f00) (fldiv-and-mod . j2eff) (fldiv . j2efe) (fldenominator . j2efd) (flcos . j2efc) (flceiling . j2efb) (flatan . j2efa) (flasin . j2ef9) (flacos . j2ef8) (flabs . j2ef7) (fl>? . j2ef6) (fl>=? . j2ef5) (fl=? . j2ef4) (fl<? . j2ef3) (fl<=? . j2ef2) (fl/ . j2ef1) (fl- . j2ef0) (fl+ . j2eef) (fl* . j2eee) (fixnum->flonum . j2eed) (fxzero? . j2eec) (fxxor . j2eeb) (fxrotate-bit-field . j2eea) (fxreverse-bit-field . j2ee9) (fxpositive? . j2ee8) (fxodd? . j2ee7) (fxnot . j2ee6) (fxnegative? . j2ee5) (fxmod0 . j2ee4) (fxmod . j2ee3) (fxmin . j2ee2) (fxmax . j2ee1) (fxlength . j2ee0) (fxior . j2edf) (fxif . j2ede) (fxfirst-bit-set . j2edd) (fxeven? . j2edc) (fxdiv0-and-mod0 . j2edb) (fxdiv0 . j2eda) (fxdiv-and-mod . j2ed9) (fxdiv . j2ed8) (fxcopy-bit-field . j2ed7) (fxcopy-bit . j2ed6) (fxbit-set? . j2ed5) (fxbit-field . j2ed4) (fxbit-count . j2ed3) (fxarithmetic-shift-right . j2ed2) (fxarithmetic-shift-left . j2ed1) (fxarithmetic-shift . j2ed0) (fxand . j2ecf) (fx>? . j2ece) (fx>=? . j2ecd) (fx=? . j2ecc) (fx<? . j2ecb) (fx<=? . j2eca) (fx-/carry . j2ec9) (fx- . j2ec8) (fx+/carry . j2ec7) (fx+ . j2ec6) (fx*/carry . j2ec5) (fx* . j2ec4) (greatest-fixnum . j2ec3) (least-fixnum . j2ec2) (fixnum-width . j2ec1) (fixnum? . j2ec0) (bitwise-rotate-bit-field . j2ebf) (bitwise-reverse-bit-field . j2ebe) (bitwise-length . j2ebd) (bitwise-if . j2ebc) (bitwise-first-bit-set . j2ebb) (bitwise-copy-bit-field . j2eba) (bitwise-copy-bit . j2eb9) (bitwise-bit-set? . j2eb8) (bitwise-bit-field . j2eb7) (bitwise-bit-count . j2eb6) (bitwise-xor . j2eb5) (bitwise-ior . j2eb4) (bitwise-and . j2eb3) (bitwise-not . j2eb2) (bitwise-arithmetic-shift-right . j2eb1) (bitwise-arithmetic-shift-left . j2eb0) (bitwise-arithmetic-shift . j2eaf) (zero? . j2eae) (vector? . j2ead) (vector-set! . j2eac) (vector-ref . j2eab) (vector-map . j2eaa) (vector-length . j2ea9) (vector-for-each . j2ea8) (vector-fill! . j2ea7) (vector->list . j2ea6) (vector . j2ea5) (values . j2ea4) (truncate . j2ea3) (tan . j2ea2) (symbol? . j2ea1) (symbol=? . j2ea0) (symbol->string . j2e9f) (substring . j2e9e) (string? . j2e9d) (string>? . j2e9c) (string>=? . j2e9b) (string=? . j2e9a) (string<? . j2e99) (string<=? . j2e98) (string-ref . j2e97) (string-length . j2e96) (string-for-each . j2e95) (string-copy . j2e94) (string-append . j2e93) (string->symbol . j2e92) (string->number . j2e91) (string->list . j2e90) (string . j2e8f) (sqrt . j2e8e) (sin . j2e8d) (round . j2e8c) (reverse . j2e8b) (real? . j2e8a) (real-valued? . j2e89) (real-part . j2e88) (rationalize . j2e87) (rational? . j2e86) (rational-valued? . j2e85) (procedure? . j2e84) (positive? . j2e83) (pair? . j2e82) (odd? . j2e81) (numerator . j2e80) (number? . j2e7f) (number->string . j2e7e) (null? . j2e7d) (not . j2e7c) (negative? . j2e7b) (nan? . j2e7a) (min . j2e79) (max . j2e78) (map . j2e77) (make-vector . j2e76) (make-string . j2e75) (make-rectangular . j2e74) (make-polar . j2e73) (magnitude . j2e72) (log . j2e71) (list? . j2e70) (list-tail . j2e6f) (list-ref . j2e6e) (list->vector . j2e6d) (list->string . j2e6c) (list . j2e6b) (length . j2e6a) (lcm . j2e69) (integer? . j2e68) (integer-valued? . j2e67) (integer->char . j2e66) (infinite? . j2e65) (inexact? . j2e64) (inexact . j2e63) (imag-part . j2e62) (gcd . j2e61) (for-each . j2e60) (floor . j2e5f) (finite? . j2e5e) (expt . j2e5d) (exp . j2e5c) (exact? . j2e5b) (exact-integer-sqrt . j2e5a) (exact . j2e59) (even? . j2e58) (error . j2e57) (eqv? . j2e56) (equal? . j2e55) (eq? . j2e54) (dynamic-wind . j2e53) (div0-and-mod0 . j2e52) (mod0 . j2e51) (div0 . j2e50) (div-and-mod . j2e4f) (mod . j2e4e) (div . j2e4d) (denominator . j2e4c) (cos . j2e4b) (cons . j2e4a) (complex? . j2e49) (char? . j2e48) (char>? . j2e47) (char>=? . j2e46) (char=? . j2e45) (char<? . j2e44) (char<=? . j2e43) (char->integer . j2e42) (ceiling . j2e41) (call-with-values . j2e40) (call/cc . j2e3f) (call-with-current-continuation . j2e3e) (cddddr . j2e3d) (cdddar . j2e3c) (cddadr . j2e3b) (cddaar . j2e3a) (cdaddr . j2e39) (cdadar . j2e38) (cdaadr . j2e37) (cdaaar . j2e36) (cadddr . j2e35) (caddar . j2e34) (cadadr . j2e33) (cadaar . j2e32) (caaddr . j2e31) (caadar . j2e30) (caaadr . j2e2f) (caaaar . j2e2e) (cdddr . j2e2d) (cddar . j2e2c) (cdadr . j2e2b) (cdaar . j2e2a) (caddr . j2e29) (cadar . j2e28) (caadr . j2e27) (caaar . j2e26) (cddr . j2e25) (cdar . j2e24) (cadr . j2e23) (caar . j2e22) (cdr . j2e21) (car . j2e20) (boolean? . j2e1f) (boolean=? . j2e1e) (atan . j2e1d) (assertion-violation . j2e1c) (asin . j2e1b) (apply . j2e1a) (append . j2e19) (angle . j2e18) (acos . j2e17) (abs . j2e16) (/ . j2e15) (* . j2e14) (- . j2e13) (+ . j2e12) (>= . j2e11) (> . j2e10) (= . j2e0f) (<= . j2e0e) (< . j2e0d) (library . j2e0c) (&no-nans . j2e0b) (&no-infinities . j2e0a) (&i/o-encoding . j2e09) (&i/o-decoding . j2e08) (&i/o-port . j2e07) (&i/o-file-does-not-exist . j2e06) (&i/o-file-already-exists . j2e05) (&i/o-file-is-read-only . j2e04) (&i/o-file-protection . j2e03) (&i/o-filename . j2e02) (&i/o-invalid-position . j2e01) (&i/o-write . j2e00) (&i/o-read . j2dff) (&i/o . j2dfe) (&undefined . j2dfd) (&syntax . j2dfc) (&lexical . j2dfb) (&implementation-restriction . j2dfa) (&non-continuable . j2df9) (&who . j2df8) (&irritants . j2df7) (&assertion . j2df6) (&violation . j2df5) (&error . j2df4) (&serious . j2df3) (&warning . j2df2) (&message . j2df1) (&condition . j2df0) (define-condition-type . j2def) (define-enumeration . j2dee) (define-record-type . j2ded) (parent-rtd . j2dec) (nongenerative . j2deb) (opaque . j2dea) (sealed . j2de9) (protocol . j2de8) (parent . j2de7) (immutable . j2de6) (mutable . j2de5) (fields . j2de4) (error-handling-mode . j2de3) (file-options . j2de2) (buffer-mode . j2de1) (eol-style . j2de0) (guard . j2ddf) (unsyntax-splicing . j2ddc) (unsyntax . j2ddb) (unquote-splicing . j2dda) (unquote . j2dd9) (_ . j2dd8) (else . j2dd7) (=> . j2dd6) (... . j2dd5) (assert . j2dd4) (endianness . j2dd3) (time . j2dd1) (do . j2dd0) (cond . j2dcf) (let* . j2dce) (let . j2dcd) (let*-values . j2dcc) (let-values . j2dcb) (identifier-syntax . j2dca) (with-syntax . j2dc9) (quasisyntax . j2dc8) (quasiquote . j2dc7) (syntax-rules . j2dc6) (include . j2dc5) (record-constructor-descriptor . j2dc3) (record-type-descriptor . j2dc2) (case . j2dc1) (unless . j2dbf) (when . j2dbe) (or . j2dbd) (and . j2dbc) (if . j2dbb) (letrec* . j2dba) (letrec . j2db9) (case-lambda . j2db7) (lambda . j2db6) (syntax . j2db5) (syntax-case . j2db4) (quote . j2db3) (letrec-syntax . j2db1) (let-syntax . j2db0) (set! . j2daf) (import . j2dae) (begin . j2dad) (define-syntax . j2dab) (define . j2daa)) '() values values '#f '#f '#t '#f) (j983@j7cf@install-library 'j30cf '(psyntax null-environment-5) '() '() '() '() '((make-promise . j2f8a) (unquote-splicing . j2dda) (unquote . j2dd9) (_ . j2dd8) (else . j2dd7) (=> . j2dd6) (... . j2dd5) (delay . j2dd2) (do . j2dd0) (cond . j2dcf) (let* . j2dce) (let . j2dcd) (quasiquote . j2dc7) (syntax-rules . j2dc6) (case . j2dc1) (or . j2dbd) (and . j2dbc) (if . j2dbb) (letrec . j2db9) (lambda . j2db6) (quote . j2db3) (letrec-syntax . j2db1) (let-syntax . j2db0) (set! . j2daf) (begin . j2dad) (define-syntax . j2dab) (define . j2daa)) '() values values '#f '#f '#t '#f) (j983@j7cf@install-library 'j30d0 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . j301f) (string-ci>=? . j301e) (string-ci=? . j301d) (string-ci<? . j301c) (string-ci<=? . j301b) (char-whitespace? . j301a) (char-upper-case? . j3019) (char-numeric? . j3017) (char-lower-case? . j3016) (char-upcase . j3014) (char-downcase . j3011) (char-ci>? . j3010) (char-ci>=? . j300f) (char-ci=? . j300e) (char-ci<? . j300d) (char-ci<=? . j300c) (char-alphabetic? . j300b) (call-with-output-file . j2fdf) (call-with-input-file . j2fde) (write-char . j2fdd) (write . j2fdc) (with-output-to-file . j2fdb) (with-input-from-file . j2fda) (read-char . j2fd9) (read . j2fd8) (peek-char . j2fd7) (open-output-file . j2fd6) (open-input-file . j2fd5) (newline . j2fd4) (display . j2fd3) (close-output-port . j2fd2) (close-input-port . j2fd1) (eof-object . j2fcf) (current-output-port . j2fcd) (current-input-port . j2fcc) (output-port? . j2fcb) (input-port? . j2fca) (scheme-report-environment . je1a) (quotient . j2f90) (null-environment . je18) (remainder . j2f8f) (modulo . j2f8e) (inexact->exact . j2f8d) (force . j2f8c) (exact->inexact . j2f8b) (make-promise . j2f8a) (string-fill! . j2f88) (string-set! . j2f87) (set-cdr! . j2f86) (set-car! . j2f85) (memv . j2f7f) (memq . j2f7e) (member . j2f7c) (assv . j2f74) (assq . j2f73) (assoc . j2f71) (eval . je1e) (zero? . j2eae) (vector? . j2ead) (vector-set! . j2eac) (vector-ref . j2eab) (vector-length . j2ea9) (vector-fill! . j2ea7) (vector->list . j2ea6) (vector . j2ea5) (values . j2ea4) (truncate . j2ea3) (tan . j2ea2) (symbol? . j2ea1) (symbol->string . j2e9f) (substring . j2e9e) (string? . j2e9d) (string>? . j2e9c) (string>=? . j2e9b) (string=? . j2e9a) (string<? . j2e99) (string<=? . j2e98) (string-ref . j2e97) (string-length . j2e96) (string-copy . j2e94) (string-append . j2e93) (string->symbol . j2e92) (string->number . j2e91) (string->list . j2e90) (string . j2e8f) (sqrt . j2e8e) (sin . j2e8d) (round . j2e8c) (reverse . j2e8b) (real? . j2e8a) (real-part . j2e88) (rationalize . j2e87) (rational? . j2e86) (procedure? . j2e84) (positive? . j2e83) (pair? . j2e82) (odd? . j2e81) (numerator . j2e80) (number? . j2e7f) (number->string . j2e7e) (not . j2e7c) (negative? . j2e7b) (min . j2e79) (max . j2e78) (map . j2e77) (make-vector . j2e76) (make-string . j2e75) (make-rectangular . j2e74) (make-polar . j2e73) (magnitude . j2e72) (log . j2e71) (list? . j2e70) (list-tail . j2e6f) (list-ref . j2e6e) (list->vector . j2e6d) (list->string . j2e6c) (list . j2e6b) (length . j2e6a) (lcm . j2e69) (integer? . j2e68) (integer->char . j2e66) (inexact? . j2e64) (imag-part . j2e62) (gcd . j2e61) (for-each . j2e60) (floor . j2e5f) (expt . j2e5d) (exp . j2e5c) (exact? . j2e5b) (even? . j2e58) (eqv? . j2e56) (equal? . j2e55) (eq? . j2e54) (dynamic-wind . j2e53) (denominator . j2e4c) (cos . j2e4b) (cons . j2e4a) (complex? . j2e49) (char? . j2e48) (char>? . j2e47) (char>=? . j2e46) (char=? . j2e45) (char<? . j2e44) (char<=? . j2e43) (char->integer . j2e42) (ceiling . j2e41) (call-with-values . j2e40) (call-with-current-continuation . j2e3e) (cddddr . j2e3d) (cdddar . j2e3c) (cddadr . j2e3b) (cddaar . j2e3a) (cdaddr . j2e39) (cdadar . j2e38) (cdaadr . j2e37) (cdaaar . j2e36) (cadddr . j2e35) (caddar . j2e34) (cadadr . j2e33) (cadaar . j2e32) (caaddr . j2e31) (caadar . j2e30) (caaadr . j2e2f) (caaaar . j2e2e) (cdddr . j2e2d) (cddar . j2e2c) (cdadr . j2e2b) (cdaar . j2e2a) (caddr . j2e29) (cadar . j2e28) (caadr . j2e27) (caaar . j2e26) (cddr . j2e25) (cdar . j2e24) (cadr . j2e23) (caar . j2e22) (cdr . j2e21) (car . j2e20) (boolean? . j2e1f) (atan . j2e1d) (asin . j2e1b) (apply . j2e1a) (append . j2e19) (angle . j2e18) (acos . j2e17) (abs . j2e16) (/ . j2e15) (* . j2e14) (- . j2e13) (+ . j2e12) (>= . j2e11) (> . j2e10) (= . j2e0f) (<= . j2e0e) (< . j2e0d) (unquote-splicing . j2dda) (unquote . j2dd9) (else . j2dd7) (=> . j2dd6) (... . j2dd5) (delay . j2dd2) (do . j2dd0) (cond . j2dcf) (let* . j2dce) (let . j2dcd) (quasiquote . j2dc7) (syntax-rules . j2dc6) (case . j2dc1) (or . j2dbd) (and . j2dbc) (if . j2dbb) (letrec . j2db9) (lambda . j2db6) (quote . j2db3) (letrec-syntax . j2db1) (let-syntax . j2db0) (set! . j2daf) (begin . j2dad) (define-syntax . j2dab) (define . j2daa)) '() values values '#f '#f '#t '#f) (j983@j7cf@install-library 'j30d1 '(psyntax modules) '() '() '() '() '((module . j2dac)) '() values values '#f '#f '#t '#f) (j983@j7cf@install-library 'j30d2 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (j983@j7cf@install-library 'j30d3 '(rnrs) '(6) '() '() '() '((regexp? . j30c6) (string-upcase . j3027) (string-titlecase . j3026) (string-normalize-nfkd . j3025) (string-normalize-nfkc . j3024) (string-normalize-nfd . j3023) (string-normalize-nfc . j3022) (string-foldcase . j3021) (string-downcase . j3020) (string-ci>? . j301f) (string-ci>=? . j301e) (string-ci=? . j301d) (string-ci<? . j301c) (string-ci<=? . j301b) (char-whitespace? . j301a) (char-upper-case? . j3019) (char-title-case? . j3018) (char-numeric? . j3017) (char-lower-case? . j3016) (char-general-category . j3015) (char-upcase . j3014) (char-titlecase . j3013) (char-foldcase . j3012) (char-downcase . j3011) (char-ci>? . j3010) (char-ci>=? . j300f) (char-ci=? . j300e) (char-ci<? . j300d) (char-ci<=? . j300c) (char-alphabetic? . j300b) (make-variable-transformer . jb8b) (identifier? . je40) (generate-temporaries . je2c) (free-identifier=? . je2e) (syntax->datum . je44) (datum->syntax . je42) (bound-identifier=? . je30) (record-type-descriptor? . j300a) (record-predicate . j3009) (record-mutator . j3008) (record-constructor . j3007) (record-accessor . j3006) (make-record-type-descriptor . j3005) (make-record-constructor-descriptor . j3004) (record? . j3003) (record-type-uid . j3002) (record-type-sealed? . j3001) (record-type-parent . j3000) (record-type-opaque? . j2fff) (record-type-name . j2ffe) (record-type-generative? . j2ffd) (record-type-field-names . j2ffc) (record-rtd . j2ffb) (record-field-mutable? . j2ffa) (delete-file . j2ff9) (file-exists? . j2ff8) (vector-sort! . j2ff7) (vector-sort . j2ff6) (list-sort . j2ff5) (symbol-hash . j2ff4) (string-ci-hash . j2ff3) (string-hash . j2ff2) (equal-hash . j2ff1) (hashtable-equivalence-function . j2ff0) (make-hashtable . j2fef) (hashtable-hash-function . j2fee) (make-eqv-hashtable . j2fed) (make-eq-hashtable . j2fec) (hashtable? . j2feb) (hashtable-update! . j2fea) (hashtable-size . j2fe9) (hashtable-set! . j2fe8) (hashtable-ref . j2fe7) (hashtable-mutable? . j2fe6) (hashtable-keys . j2fe5) (hashtable-entries . j2fe4) (hashtable-delete! . j2fe3) (hashtable-copy . j2fe2) (hashtable-contains? . j2fe1) (hashtable-clear! . j2fe0) (call-with-output-file . j2fdf) (call-with-input-file . j2fde) (write-char . j2fdd) (write . j2fdc) (with-output-to-file . j2fdb) (with-input-from-file . j2fda) (read-char . j2fd9) (read . j2fd8) (peek-char . j2fd7) (open-output-file . j2fd6) (open-input-file . j2fd5) (newline . j2fd4) (display . j2fd3) (close-output-port . j2fd2) (close-input-port . j2fd1) (eof-object? . j2fd0) (eof-object . j2fcf) (current-error-port . j2fce) (current-output-port . j2fcd) (current-input-port . j2fcc) (output-port? . j2fcb) (input-port? . j2fca) (utf-8-codec . j2fc9) (utf-16-codec . j2fc8) (transcoder-error-handling-mode . j2fc7) (transcoder-eol-style . j2fc6) (transcoder-codec . j2fc5) (transcoded-port . j2fc4) (textual-port? . j2fc3) (string->bytevector . j2fc2) (standard-output-port . j2fc1) (standard-input-port . j2fc0) (standard-error-port . j2fbf) (set-port-position! . j2fbe) (put-u8 . j2fbd) (put-string . j2fbc) (put-datum . j2fbb) (put-char . j2fba) (put-bytevector . j2fb9) (port? . j2fb8) (port-transcoder . j2fb7) (port-position . j2fb6) (port-has-set-port-position!? . j2fb5) (port-has-port-position? . j2fb4) (port-eof? . j2fb3) (output-port-buffer-mode . j2fb2) (open-string-output-port . j2fb1) (open-string-input-port . j2fb0) (open-file-output-port . j2faf) (open-file-input/output-port . j2fae) (open-file-input-port . j2fad) (open-bytevector-output-port . j2fac) (open-bytevector-input-port . j2fab) (native-transcoder . j2faa) (native-eol-style . j2fa9) (make-transcoder . j2fa8) (latin-1-codec . j2fa7) (make-i/o-write-error . j2a22) (make-i/o-read-error . j2a0d) (make-i/o-port-error . j2ac3) (make-i/o-invalid-position-error . j2a39) (make-i/o-filename-error . j2a54) (make-i/o-file-protection-error . j2a6d) (make-i/o-file-is-read-only-error . j2a82) (make-i/o-file-does-not-exist-error . j2aac) (make-i/o-file-already-exists-error . j2a97) (make-i/o-error . j29f8) (make-i/o-encoding-error . j2af3) (make-i/o-decoding-error . j2adc) (make-custom-textual-output-port . j2fa6) (make-custom-textual-input/output-port . j2fa5) (make-custom-textual-input-port . j2fa4) (make-custom-binary-output-port . j2fa3) (make-custom-binary-input/output-port . j2fa2) (make-custom-binary-input-port . j2fa1) (make-bytevector . j2fa0) (lookahead-u8 . j2f9f) (lookahead-char . j2f9e) (i/o-write-error? . j2a24) (i/o-read-error? . j2a0f) (i/o-port-error? . j2ac7) (i/o-invalid-position-error? . j2a3d) (i/o-filename-error? . j2a58) (i/o-file-protection-error? . j2a6f) (i/o-file-is-read-only-error? . j2a84) (i/o-file-does-not-exist-error? . j2aae) (i/o-file-already-exists-error? . j2a99) (i/o-error? . j29fa) (i/o-error-position . j2a3f) (i/o-error-port . j2ac9) (i/o-error-filename . j2a5a) (i/o-encoding-error? . j2af7) (i/o-encoding-error-char . j2af9) (i/o-decoding-error? . j2ade) (get-u8 . j2f9d) (get-string-n! . j2f9c) (get-string-n . j2f9b) (get-string-all . j2f9a) (get-line . j2f99) (get-datum . j2f98) (get-char . j2f97) (get-bytevector-some . j2f96) (get-bytevector-n! . j2f95) (get-bytevector-n . j2f94) (get-bytevector-all . j2f93) (flush-output-port . j2f92) (close-port . j2f91) (exit . j2f89) (command-line . j2c2e) (remove . j2f84) (remv . j2f83) (remp . j2f82) (remq . j2f81) (partition . j2f80) (memv . j2f7f) (memq . j2f7e) (memp . j2f7d) (member . j2f7c) (exists . j2f7b) (for-all . j2f7a) (fold-right . j2f79) (fold-left . j2f78) (find . j2f77) (filter . j2f76) (cons* . j2f75) (assv . j2f74) (assq . j2f73) (assp . j2f72) (assoc . j2f71) (call-with-string-output-port . j2f70) (call-with-port . j2f6f) (call-with-bytevector-output-port . j2f6e) (bytevector->string . j2f6d) (buffer-mode? . j2f6c) (binary-port? . j2f6b) (with-exception-handler . j2f6a) (raise-continuable . j2f69) (raise . j2f68) (make-enumeration . j2f67) (enum-set=? . j2f66) (enum-set-universe . j2f65) (enum-set-union . j2f64) (enum-set-subset? . j2f63) (enum-set-projection . j2f62) (enum-set-member? . j2f61) (enum-set-intersection . j2f60) (enum-set-indexer . j2f5f) (enum-set-difference . j2f5e) (enum-set-constructor . j2f5d) (enum-set-complement . j2f5c) (enum-set->list . j2f5b) (who-condition? . j296e) (warning? . j28e6) (violation? . j2925) (undefined-violation? . j29e5) (syntax-violation? . j29cc) (syntax-violation-subform . j29d0) (syntax-violation-form . j29ce) (syntax-violation . je3e) (simple-conditions . j2f5a) (serious-condition? . j28fb) (non-continuable-violation? . j2985) (message-condition? . j28cf) (make-who-condition . j296a) (make-warning . j28e4) (make-violation . j2923) (make-undefined-violation . j29e3) (make-syntax-violation . j29c6) (make-serious-condition . j28f9) (make-non-continuable-violation . j2983) (make-message-condition . j28cb) (make-lexical-violation . j29ad) (make-irritants-condition . j294f) (make-implementation-restriction-violation . j2998) (make-error . j290e) (make-assertion-violation . j2938) (lexical-violation? . j29af) (irritants-condition? . j2953) (implementation-restriction-violation? . j299a) (error? . j2910) (condition-who . j2970) (condition-predicate . j2f59) (condition-message . j28d1) (condition-irritants . j2955) (condition-accessor . j2f58) (condition . j2f57) (assertion-violation? . j293a) (condition? . j2f56) (utf32->string . j2f55) (utf16->string . j2f54) (utf8->string . j2f53) (uint-list->bytevector . j2f52) (u8-list->bytevector . j2f51) (string->utf8 . j2f50) (string->utf32 . j2f4f) (string->utf16 . j2f4e) (sint-list->bytevector . j2f4d) (native-endianness . j2f4c) (bytevector? . j2f4b) (bytevector=? . j2f4a) (bytevector-uint-set! . j2f49) (bytevector-uint-ref . j2f48) (bytevector-u8-set! . j2f47) (bytevector-u8-ref . j2f46) (bytevector-u64-set! . j2f45) (bytevector-u64-ref . j2f44) (bytevector-u64-native-set! . j2f43) (bytevector-u64-native-ref . j2f42) (bytevector-u32-set! . j2f41) (bytevector-u32-ref . j2f40) (bytevector-u32-native-set! . j2f3f) (bytevector-u32-native-ref . j2f3e) (bytevector-u16-set! . j2f3d) (bytevector-u16-ref . j2f3c) (bytevector-u16-native-set! . j2f3b) (bytevector-u16-native-ref . j2f3a) (bytevector-sint-set! . j2f39) (bytevector-sint-ref . j2f38) (bytevector-s8-set! . j2f37) (bytevector-s8-ref . j2f36) (bytevector-s64-set! . j2f35) (bytevector-s64-ref . j2f34) (bytevector-s64-native-set! . j2f33) (bytevector-s64-native-ref . j2f32) (bytevector-s32-set! . j2f31) (bytevector-s32-ref . j2f30) (bytevector-s32-native-set! . j2f2f) (bytevector-s32-native-ref . j2f2e) (bytevector-s16-set! . j2f2d) (bytevector-s16-ref . j2f2c) (bytevector-s16-native-set! . j2f2b) (bytevector-s16-native-ref . j2f2a) (bytevector-length . j2f29) (bytevector-ieee-single-ref . j2f28) (bytevector-ieee-single-set! . j2f27) (bytevector-ieee-single-native-set! . j2f26) (bytevector-ieee-single-native-ref . j2f25) (bytevector-ieee-double-set! . j2f24) (bytevector-ieee-double-ref . j2f23) (bytevector-ieee-double-native-set! . j2f22) (bytevector-ieee-double-native-ref . j2f21) (bytevector-fill! . j2f20) (bytevector-copy! . j2f1f) (bytevector-copy . j2f1e) (bytevector->uint-list . j2f1d) (bytevector->u8-list . j2f1c) (bytevector->sint-list . j2f1b) (no-nans-violation? . j2b23) (no-infinities-violation? . j2b0e) (make-no-nans-violation . j2b21) (make-no-infinities-violation . j2b0c) (real->flonum . j2f1a) (flzero? . j2f19) (fltruncate . j2f18) (fltan . j2f17) (flsqrt . j2f16) (flsin . j2f15) (flround . j2f14) (flpositive? . j2f13) (flonum? . j2f12) (flodd? . j2f11) (flnumerator . j2f10) (flnegative? . j2f0f) (flnan? . j2f0e) (flmod0 . j2f0d) (flmod . j2f0c) (flmin . j2f0b) (flmax . j2f0a) (fllog . j2f09) (flinteger? . j2f08) (flinfinite? . j2f07) (flfloor . j2f06) (flfinite? . j2f05) (flexpt . j2f04) (flexp . j2f03) (fleven? . j2f02) (fldiv0-and-mod0 . j2f01) (fldiv0 . j2f00) (fldiv-and-mod . j2eff) (fldiv . j2efe) (fldenominator . j2efd) (flcos . j2efc) (flceiling . j2efb) (flatan . j2efa) (flasin . j2ef9) (flacos . j2ef8) (flabs . j2ef7) (fl>? . j2ef6) (fl>=? . j2ef5) (fl=? . j2ef4) (fl<? . j2ef3) (fl<=? . j2ef2) (fl/ . j2ef1) (fl- . j2ef0) (fl+ . j2eef) (fl* . j2eee) (fixnum->flonum . j2eed) (fxzero? . j2eec) (fxxor . j2eeb) (fxrotate-bit-field . j2eea) (fxreverse-bit-field . j2ee9) (fxpositive? . j2ee8) (fxodd? . j2ee7) (fxnot . j2ee6) (fxnegative? . j2ee5) (fxmod0 . j2ee4) (fxmod . j2ee3) (fxmin . j2ee2) (fxmax . j2ee1) (fxlength . j2ee0) (fxior . j2edf) (fxif . j2ede) (fxfirst-bit-set . j2edd) (fxeven? . j2edc) (fxdiv0-and-mod0 . j2edb) (fxdiv0 . j2eda) (fxdiv-and-mod . j2ed9) (fxdiv . j2ed8) (fxcopy-bit-field . j2ed7) (fxcopy-bit . j2ed6) (fxbit-set? . j2ed5) (fxbit-field . j2ed4) (fxbit-count . j2ed3) (fxarithmetic-shift-right . j2ed2) (fxarithmetic-shift-left . j2ed1) (fxarithmetic-shift . j2ed0) (fxand . j2ecf) (fx>? . j2ece) (fx>=? . j2ecd) (fx=? . j2ecc) (fx<? . j2ecb) (fx<=? . j2eca) (fx-/carry . j2ec9) (fx- . j2ec8) (fx+/carry . j2ec7) (fx+ . j2ec6) (fx*/carry . j2ec5) (fx* . j2ec4) (greatest-fixnum . j2ec3) (least-fixnum . j2ec2) (fixnum-width . j2ec1) (fixnum? . j2ec0) (bitwise-rotate-bit-field . j2ebf) (bitwise-reverse-bit-field . j2ebe) (bitwise-length . j2ebd) (bitwise-if . j2ebc) (bitwise-first-bit-set . j2ebb) (bitwise-copy-bit-field . j2eba) (bitwise-copy-bit . j2eb9) (bitwise-bit-set? . j2eb8) (bitwise-bit-field . j2eb7) (bitwise-bit-count . j2eb6) (bitwise-xor . j2eb5) (bitwise-ior . j2eb4) (bitwise-and . j2eb3) (bitwise-not . j2eb2) (bitwise-arithmetic-shift-right . j2eb1) (bitwise-arithmetic-shift-left . j2eb0) (bitwise-arithmetic-shift . j2eaf) (zero? . j2eae) (vector? . j2ead) (vector-set! . j2eac) (vector-ref . j2eab) (vector-map . j2eaa) (vector-length . j2ea9) (vector-for-each . j2ea8) (vector-fill! . j2ea7) (vector->list . j2ea6) (vector . j2ea5) (values . j2ea4) (truncate . j2ea3) (tan . j2ea2) (symbol? . j2ea1) (symbol=? . j2ea0) (symbol->string . j2e9f) (substring . j2e9e) (string? . j2e9d) (string>? . j2e9c) (string>=? . j2e9b) (string=? . j2e9a) (string<? . j2e99) (string<=? . j2e98) (string-ref . j2e97) (string-length . j2e96) (string-for-each . j2e95) (string-copy . j2e94) (string-append . j2e93) (string->symbol . j2e92) (string->number . j2e91) (string->list . j2e90) (string . j2e8f) (sqrt . j2e8e) (sin . j2e8d) (round . j2e8c) (reverse . j2e8b) (real? . j2e8a) (real-valued? . j2e89) (real-part . j2e88) (rationalize . j2e87) (rational? . j2e86) (rational-valued? . j2e85) (procedure? . j2e84) (positive? . j2e83) (pair? . j2e82) (odd? . j2e81) (numerator . j2e80) (number? . j2e7f) (number->string . j2e7e) (null? . j2e7d) (not . j2e7c) (negative? . j2e7b) (nan? . j2e7a) (min . j2e79) (max . j2e78) (map . j2e77) (make-vector . j2e76) (make-string . j2e75) (make-rectangular . j2e74) (make-polar . j2e73) (magnitude . j2e72) (log . j2e71) (list? . j2e70) (list-tail . j2e6f) (list-ref . j2e6e) (list->vector . j2e6d) (list->string . j2e6c) (list . j2e6b) (length . j2e6a) (lcm . j2e69) (integer? . j2e68) (integer-valued? . j2e67) (integer->char . j2e66) (infinite? . j2e65) (inexact? . j2e64) (inexact . j2e63) (imag-part . j2e62) (gcd . j2e61) (for-each . j2e60) (floor . j2e5f) (finite? . j2e5e) (expt . j2e5d) (exp . j2e5c) (exact? . j2e5b) (exact-integer-sqrt . j2e5a) (exact . j2e59) (even? . j2e58) (error . j2e57) (eqv? . j2e56) (equal? . j2e55) (eq? . j2e54) (dynamic-wind . j2e53) (div0-and-mod0 . j2e52) (mod0 . j2e51) (div0 . j2e50) (div-and-mod . j2e4f) (mod . j2e4e) (div . j2e4d) (denominator . j2e4c) (cos . j2e4b) (cons . j2e4a) (complex? . j2e49) (char? . j2e48) (char>? . j2e47) (char>=? . j2e46) (char=? . j2e45) (char<? . j2e44) (char<=? . j2e43) (char->integer . j2e42) (ceiling . j2e41) (call-with-values . j2e40) (call/cc . j2e3f) (call-with-current-continuation . j2e3e) (cddddr . j2e3d) (cdddar . j2e3c) (cddadr . j2e3b) (cddaar . j2e3a) (cdaddr . j2e39) (cdadar . j2e38) (cdaadr . j2e37) (cdaaar . j2e36) (cadddr . j2e35) (caddar . j2e34) (cadadr . j2e33) (cadaar . j2e32) (caaddr . j2e31) (caadar . j2e30) (caaadr . j2e2f) (caaaar . j2e2e) (cdddr . j2e2d) (cddar . j2e2c) (cdadr . j2e2b) (cdaar . j2e2a) (caddr . j2e29) (cadar . j2e28) (caadr . j2e27) (caaar . j2e26) (cddr . j2e25) (cdar . j2e24) (cadr . j2e23) (caar . j2e22) (cdr . j2e21) (car . j2e20) (boolean? . j2e1f) (boolean=? . j2e1e) (atan . j2e1d) (assertion-violation . j2e1c) (asin . j2e1b) (apply . j2e1a) (append . j2e19) (angle . j2e18) (acos . j2e17) (abs . j2e16) (/ . j2e15) (* . j2e14) (- . j2e13) (+ . j2e12) (>= . j2e11) (> . j2e10) (= . j2e0f) (<= . j2e0e) (< . j2e0d) (&no-nans . j2e0b) (&no-infinities . j2e0a) (&i/o-encoding . j2e09) (&i/o-decoding . j2e08) (&i/o-port . j2e07) (&i/o-file-does-not-exist . j2e06) (&i/o-file-already-exists . j2e05) (&i/o-file-is-read-only . j2e04) (&i/o-file-protection . j2e03) (&i/o-filename . j2e02) (&i/o-invalid-position . j2e01) (&i/o-write . j2e00) (&i/o-read . j2dff) (&i/o . j2dfe) (&undefined . j2dfd) (&syntax . j2dfc) (&lexical . j2dfb) (&implementation-restriction . j2dfa) (&non-continuable . j2df9) (&who . j2df8) (&irritants . j2df7) (&assertion . j2df6) (&violation . j2df5) (&error . j2df4) (&serious . j2df3) (&warning . j2df2) (&message . j2df1) (&condition . j2df0) (define-condition-type . j2def) (define-enumeration . j2dee) (define-record-type . j2ded) (parent-rtd . j2dec) (nongenerative . j2deb) (opaque . j2dea) (sealed . j2de9) (protocol . j2de8) (parent . j2de7) (immutable . j2de6) (mutable . j2de5) (fields . j2de4) (error-handling-mode . j2de3) (file-options . j2de2) (buffer-mode . j2de1) (eol-style . j2de0) (guard . j2ddf) (unsyntax-splicing . j2ddc) (unsyntax . j2ddb) (unquote-splicing . j2dda) (unquote . j2dd9) (_ . j2dd8) (else . j2dd7) (=> . j2dd6) (... . j2dd5) (assert . j2dd4) (endianness . j2dd3) (do . j2dd0) (cond . j2dcf) (let* . j2dce) (let . j2dcd) (let*-values . j2dcc) (let-values . j2dcb) (identifier-syntax . j2dca) (with-syntax . j2dc9) (quasisyntax . j2dc8) (quasiquote . j2dc7) (syntax-rules . j2dc6) (record-constructor-descriptor . j2dc3) (record-type-descriptor . j2dc2) (case . j2dc1) (unless . j2dbf) (when . j2dbe) (or . j2dbd) (and . j2dbc) (if . j2dbb) (letrec* . j2dba) (letrec . j2db9) (case-lambda . j2db7) (lambda . j2db6) (syntax . j2db5) (syntax-case . j2db4) (quote . j2db3) (letrec-syntax . j2db1) (let-syntax . j2db0) (set! . j2daf) (begin . j2dad) (define-syntax . j2dab) (define . j2daa)) '() values values '#f '#f '#t '#f) (j983@j7cf@install-library 'j30d4 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . je1a) (quotient . j2f90) (null-environment . je18) (remainder . j2f8f) (modulo . j2f8e) (inexact->exact . j2f8d) (force . j2f8c) (exact->inexact . j2f8b) (make-promise . j2f8a) (delay . j2dd2)) '() values values '#f '#f '#t '#f) (j983@j7cf@install-library 'j30d5 '(rnrs control) '(6) '() '() '() '((do . j2dd0) (unless . j2dbf) (when . j2dbe) (case-lambda . j2db7)) '() values values '#f '#f '#t '#f) (j983@j7cf@install-library 'j30d6 '(rnrs eval) '(6) '() '() '() '((eval . je1e) (environment . je16)) '() values values '#f '#f '#t '#f) (j983@j7cf@install-library 'j30d7 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . j2f86) (set-car! . j2f85)) '() values values '#f '#f '#t '#f) (j983@j7cf@install-library 'j30d8 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . j2f88) (string-set! . j2f87)) '() values values '#f '#f '#t '#f) (j983@j7cf@install-library 'j30d9 '(rnrs programs) '(6) '() '() '() '((exit . j2f89) (command-line . j2c2e)) '() values values '#f '#f '#t '#f) (j983@j7cf@install-library 'j30da '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . jb8b) (identifier? . je40) (generate-temporaries . je2c) (free-identifier=? . je2e) (syntax->datum . je44) (datum->syntax . je42) (bound-identifier=? . je30) (syntax-violation . je3e) (unsyntax-splicing . j2ddc) (unsyntax . j2ddb) (_ . j2dd8) (... . j2dd5) (with-syntax . j2dc9) (quasisyntax . j2dc8) (syntax . j2db5) (syntax-case . j2db4)) '() values values '#f '#f '#t '#f) (j983@j7cf@install-library 'j30db '(rnrs files) '(6) '() '() '() '((delete-file . j2ff9) (file-exists? . j2ff8) (make-i/o-write-error . j2a22) (make-i/o-read-error . j2a0d) (make-i/o-port-error . j2ac3) (make-i/o-invalid-position-error . j2a39) (make-i/o-filename-error . j2a54) (make-i/o-file-protection-error . j2a6d) (make-i/o-file-is-read-only-error . j2a82) (make-i/o-file-does-not-exist-error . j2aac) (make-i/o-file-already-exists-error . j2a97) (make-i/o-error . j29f8) (i/o-write-error? . j2a24) (i/o-read-error? . j2a0f) (i/o-port-error? . j2ac7) (i/o-invalid-position-error? . j2a3d) (i/o-filename-error? . j2a58) (i/o-file-protection-error? . j2a6f) (i/o-file-is-read-only-error? . j2a84) (i/o-file-does-not-exist-error? . j2aae) (i/o-file-already-exists-error? . j2a99) (i/o-error? . j29fa) (i/o-error-position . j2a3f) (i/o-error-port . j2ac9) (i/o-error-filename . j2a5a) (&i/o-port . j2e07) (&i/o-file-does-not-exist . j2e06) (&i/o-file-already-exists . j2e05) (&i/o-file-is-read-only . j2e04) (&i/o-file-protection . j2e03) (&i/o-filename . j2e02) (&i/o-invalid-position . j2e01) (&i/o-write . j2e00) (&i/o-read . j2dff) (&i/o . j2dfe)) '() values values '#f '#f '#t '#f) (j983@j7cf@install-library 'j30dc '(rnrs sorting) '(6) '() '() '() '((vector-sort! . j2ff7) (vector-sort . j2ff6) (list-sort . j2ff5)) '() values values '#f '#f '#t '#f) (j983@j7cf@install-library 'j30dd '(rnrs base) '(6) '() '() '() '((zero? . j2eae) (vector? . j2ead) (vector-set! . j2eac) (vector-ref . j2eab) (vector-map . j2eaa) (vector-length . j2ea9) (vector-for-each . j2ea8) (vector-fill! . j2ea7) (vector->list . j2ea6) (vector . j2ea5) (values . j2ea4) (truncate . j2ea3) (tan . j2ea2) (symbol? . j2ea1) (symbol=? . j2ea0) (symbol->string . j2e9f) (substring . j2e9e) (string? . j2e9d) (string>? . j2e9c) (string>=? . j2e9b) (string=? . j2e9a) (string<? . j2e99) (string<=? . j2e98) (string-ref . j2e97) (string-length . j2e96) (string-for-each . j2e95) (string-copy . j2e94) (string-append . j2e93) (string->symbol . j2e92) (string->number . j2e91) (string->list . j2e90) (string . j2e8f) (sqrt . j2e8e) (sin . j2e8d) (round . j2e8c) (reverse . j2e8b) (real? . j2e8a) (real-valued? . j2e89) (real-part . j2e88) (rationalize . j2e87) (rational? . j2e86) (rational-valued? . j2e85) (procedure? . j2e84) (positive? . j2e83) (pair? . j2e82) (odd? . j2e81) (numerator . j2e80) (number? . j2e7f) (number->string . j2e7e) (null? . j2e7d) (not . j2e7c) (negative? . j2e7b) (nan? . j2e7a) (min . j2e79) (max . j2e78) (map . j2e77) (make-vector . j2e76) (make-string . j2e75) (make-rectangular . j2e74) (make-polar . j2e73) (magnitude . j2e72) (log . j2e71) (list? . j2e70) (list-tail . j2e6f) (list-ref . j2e6e) (list->vector . j2e6d) (list->string . j2e6c) (list . j2e6b) (length . j2e6a) (lcm . j2e69) (integer? . j2e68) (integer-valued? . j2e67) (integer->char . j2e66) (infinite? . j2e65) (inexact? . j2e64) (inexact . j2e63) (imag-part . j2e62) (gcd . j2e61) (for-each . j2e60) (floor . j2e5f) (finite? . j2e5e) (expt . j2e5d) (exp . j2e5c) (exact? . j2e5b) (exact-integer-sqrt . j2e5a) (exact . j2e59) (even? . j2e58) (error . j2e57) (eqv? . j2e56) (equal? . j2e55) (eq? . j2e54) (dynamic-wind . j2e53) (div0-and-mod0 . j2e52) (mod0 . j2e51) (div0 . j2e50) (div-and-mod . j2e4f) (mod . j2e4e) (div . j2e4d) (denominator . j2e4c) (cos . j2e4b) (cons . j2e4a) (complex? . j2e49) (char? . j2e48) (char>? . j2e47) (char>=? . j2e46) (char=? . j2e45) (char<? . j2e44) (char<=? . j2e43) (char->integer . j2e42) (ceiling . j2e41) (call-with-values . j2e40) (call/cc . j2e3f) (call-with-current-continuation . j2e3e) (cddddr . j2e3d) (cdddar . j2e3c) (cddadr . j2e3b) (cddaar . j2e3a) (cdaddr . j2e39) (cdadar . j2e38) (cdaadr . j2e37) (cdaaar . j2e36) (cadddr . j2e35) (caddar . j2e34) (cadadr . j2e33) (cadaar . j2e32) (caaddr . j2e31) (caadar . j2e30) (caaadr . j2e2f) (caaaar . j2e2e) (cdddr . j2e2d) (cddar . j2e2c) (cdadr . j2e2b) (cdaar . j2e2a) (caddr . j2e29) (cadar . j2e28) (caadr . j2e27) (caaar . j2e26) (cddr . j2e25) (cdar . j2e24) (cadr . j2e23) (caar . j2e22) (cdr . j2e21) (car . j2e20) (boolean? . j2e1f) (boolean=? . j2e1e) (atan . j2e1d) (assertion-violation . j2e1c) (asin . j2e1b) (apply . j2e1a) (append . j2e19) (angle . j2e18) (acos . j2e17) (abs . j2e16) (/ . j2e15) (* . j2e14) (- . j2e13) (+ . j2e12) (>= . j2e11) (> . j2e10) (= . j2e0f) (<= . j2e0e) (< . j2e0d) (unquote-splicing . j2dda) (unquote . j2dd9) (_ . j2dd8) (else . j2dd7) (=> . j2dd6) (... . j2dd5) (assert . j2dd4) (cond . j2dcf) (let* . j2dce) (let . j2dcd) (let*-values . j2dcc) (let-values . j2dcb) (identifier-syntax . j2dca) (quasiquote . j2dc7) (syntax-rules . j2dc6) (case . j2dc1) (or . j2dbd) (and . j2dbc) (if . j2dbb) (letrec* . j2dba) (letrec . j2db9) (lambda . j2db6) (quote . j2db3) (letrec-syntax . j2db1) (let-syntax . j2db0) (set! . j2daf) (begin . j2dad) (define-syntax . j2dab) (define . j2daa)) '() values values '#f '#f '#t '#f) (j983@j7cf@install-library 'j30de '(rnrs lists) '(6) '() '() '() '((remove . j2f84) (remv . j2f83) (remp . j2f82) (remq . j2f81) (partition . j2f80) (memv . j2f7f) (memq . j2f7e) (memp . j2f7d) (member . j2f7c) (exists . j2f7b) (for-all . j2f7a) (fold-right . j2f79) (fold-left . j2f78) (find . j2f77) (filter . j2f76) (cons* . j2f75) (assv . j2f74) (assq . j2f73) (assp . j2f72) (assoc . j2f71)) '() values values '#f '#f '#t '#f) (j983@j7cf@install-library 'j30df '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . j2fdf) (call-with-input-file . j2fde) (write-char . j2fdd) (write . j2fdc) (with-output-to-file . j2fdb) (with-input-from-file . j2fda) (read-char . j2fd9) (read . j2fd8) (peek-char . j2fd7) (open-output-file . j2fd6) (open-input-file . j2fd5) (newline . j2fd4) (display . j2fd3) (close-output-port . j2fd2) (close-input-port . j2fd1) (eof-object? . j2fd0) (eof-object . j2fcf) (current-error-port . j2fce) (current-output-port . j2fcd) (current-input-port . j2fcc) (output-port? . j2fcb) (input-port? . j2fca) (make-i/o-write-error . j2a22) (make-i/o-read-error . j2a0d) (make-i/o-port-error . j2ac3) (make-i/o-invalid-position-error . j2a39) (make-i/o-filename-error . j2a54) (make-i/o-file-protection-error . j2a6d) (make-i/o-file-is-read-only-error . j2a82) (make-i/o-file-does-not-exist-error . j2aac) (make-i/o-file-already-exists-error . j2a97) (make-i/o-error . j29f8) (i/o-write-error? . j2a24) (i/o-read-error? . j2a0f) (i/o-port-error? . j2ac7) (i/o-invalid-position-error? . j2a3d) (i/o-filename-error? . j2a58) (i/o-file-protection-error? . j2a6f) (i/o-file-is-read-only-error? . j2a84) (i/o-file-does-not-exist-error? . j2aae) (i/o-file-already-exists-error? . j2a99) (i/o-error? . j29fa) (i/o-error-position . j2a3f) (i/o-error-port . j2ac9) (i/o-error-filename . j2a5a) (&i/o-port . j2e07) (&i/o-file-does-not-exist . j2e06) (&i/o-file-already-exists . j2e05) (&i/o-file-is-read-only . j2e04) (&i/o-file-protection . j2e03) (&i/o-filename . j2e02) (&i/o-invalid-position . j2e01) (&i/o-write . j2e00) (&i/o-read . j2dff) (&i/o . j2dfe)) '() values values '#f '#f '#t '#f) (j983@j7cf@install-library 'j30e0 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . j2fa0) (utf32->string . j2f55) (utf16->string . j2f54) (utf8->string . j2f53) (uint-list->bytevector . j2f52) (u8-list->bytevector . j2f51) (string->utf8 . j2f50) (string->utf32 . j2f4f) (string->utf16 . j2f4e) (sint-list->bytevector . j2f4d) (native-endianness . j2f4c) (bytevector? . j2f4b) (bytevector=? . j2f4a) (bytevector-uint-set! . j2f49) (bytevector-uint-ref . j2f48) (bytevector-u8-set! . j2f47) (bytevector-u8-ref . j2f46) (bytevector-u64-set! . j2f45) (bytevector-u64-ref . j2f44) (bytevector-u64-native-set! . j2f43) (bytevector-u64-native-ref . j2f42) (bytevector-u32-set! . j2f41) (bytevector-u32-ref . j2f40) (bytevector-u32-native-set! . j2f3f) (bytevector-u32-native-ref . j2f3e) (bytevector-u16-set! . j2f3d) (bytevector-u16-ref . j2f3c) (bytevector-u16-native-set! . j2f3b) (bytevector-u16-native-ref . j2f3a) (bytevector-sint-set! . j2f39) (bytevector-sint-ref . j2f38) (bytevector-s8-set! . j2f37) (bytevector-s8-ref . j2f36) (bytevector-s64-set! . j2f35) (bytevector-s64-ref . j2f34) (bytevector-s64-native-set! . j2f33) (bytevector-s64-native-ref . j2f32) (bytevector-s32-set! . j2f31) (bytevector-s32-ref . j2f30) (bytevector-s32-native-set! . j2f2f) (bytevector-s32-native-ref . j2f2e) (bytevector-s16-set! . j2f2d) (bytevector-s16-ref . j2f2c) (bytevector-s16-native-set! . j2f2b) (bytevector-s16-native-ref . j2f2a) (bytevector-length . j2f29) (bytevector-ieee-single-ref . j2f28) (bytevector-ieee-single-set! . j2f27) (bytevector-ieee-single-native-set! . j2f26) (bytevector-ieee-single-native-ref . j2f25) (bytevector-ieee-double-set! . j2f24) (bytevector-ieee-double-ref . j2f23) (bytevector-ieee-double-native-set! . j2f22) (bytevector-ieee-double-native-ref . j2f21) (bytevector-fill! . j2f20) (bytevector-copy! . j2f1f) (bytevector-copy . j2f1e) (bytevector->uint-list . j2f1d) (bytevector->u8-list . j2f1c) (bytevector->sint-list . j2f1b) (endianness . j2dd3)) '() values values '#f '#f '#t '#f) (j983@j7cf@install-library 'j30e1 '(rnrs unicode) '(6) '() '() '() '((string-upcase . j3027) (string-titlecase . j3026) (string-normalize-nfkd . j3025) (string-normalize-nfkc . j3024) (string-normalize-nfd . j3023) (string-normalize-nfc . j3022) (string-foldcase . j3021) (string-downcase . j3020) (string-ci>? . j301f) (string-ci>=? . j301e) (string-ci=? . j301d) (string-ci<? . j301c) (string-ci<=? . j301b) (char-whitespace? . j301a) (char-upper-case? . j3019) (char-title-case? . j3018) (char-numeric? . j3017) (char-lower-case? . j3016) (char-general-category . j3015) (char-upcase . j3014) (char-titlecase . j3013) (char-foldcase . j3012) (char-downcase . j3011) (char-ci>? . j3010) (char-ci>=? . j300f) (char-ci=? . j300e) (char-ci<? . j300d) (char-ci<=? . j300c) (char-alphabetic? . j300b)) '() values values '#f '#f '#t '#f) (j983@j7cf@install-library 'j30e2 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . j2f6a) (raise-continuable . j2f69) (raise . j2f68) (guard . j2ddf) (else . j2dd7) (=> . j2dd6)) '() values values '#f '#f '#t '#f) (j983@j7cf@install-library 'j30e3 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . j2ebf) (bitwise-reverse-bit-field . j2ebe) (bitwise-length . j2ebd) (bitwise-if . j2ebc) (bitwise-first-bit-set . j2ebb) (bitwise-copy-bit-field . j2eba) (bitwise-copy-bit . j2eb9) (bitwise-bit-set? . j2eb8) (bitwise-bit-field . j2eb7) (bitwise-bit-count . j2eb6) (bitwise-xor . j2eb5) (bitwise-ior . j2eb4) (bitwise-and . j2eb3) (bitwise-not . j2eb2) (bitwise-arithmetic-shift-right . j2eb1) (bitwise-arithmetic-shift-left . j2eb0) (bitwise-arithmetic-shift . j2eaf)) '() values values '#f '#f '#t '#f) (j983@j7cf@install-library 'j30e4 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . j2eec) (fxxor . j2eeb) (fxrotate-bit-field . j2eea) (fxreverse-bit-field . j2ee9) (fxpositive? . j2ee8) (fxodd? . j2ee7) (fxnot . j2ee6) (fxnegative? . j2ee5) (fxmod0 . j2ee4) (fxmod . j2ee3) (fxmin . j2ee2) (fxmax . j2ee1) (fxlength . j2ee0) (fxior . j2edf) (fxif . j2ede) (fxfirst-bit-set . j2edd) (fxeven? . j2edc) (fxdiv0-and-mod0 . j2edb) (fxdiv0 . j2eda) (fxdiv-and-mod . j2ed9) (fxdiv . j2ed8) (fxcopy-bit-field . j2ed7) (fxcopy-bit . j2ed6) (fxbit-set? . j2ed5) (fxbit-field . j2ed4) (fxbit-count . j2ed3) (fxarithmetic-shift-right . j2ed2) (fxarithmetic-shift-left . j2ed1) (fxarithmetic-shift . j2ed0) (fxand . j2ecf) (fx>? . j2ece) (fx>=? . j2ecd) (fx=? . j2ecc) (fx<? . j2ecb) (fx<=? . j2eca) (fx-/carry . j2ec9) (fx- . j2ec8) (fx+/carry . j2ec7) (fx+ . j2ec6) (fx*/carry . j2ec5) (fx* . j2ec4) (greatest-fixnum . j2ec3) (least-fixnum . j2ec2) (fixnum-width . j2ec1) (fixnum? . j2ec0)) '() values values '#f '#f '#t '#f) (j983@j7cf@install-library 'j30e5 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . j2b23) (no-infinities-violation? . j2b0e) (make-no-nans-violation . j2b21) (make-no-infinities-violation . j2b0c) (real->flonum . j2f1a) (flzero? . j2f19) (fltruncate . j2f18) (fltan . j2f17) (flsqrt . j2f16) (flsin . j2f15) (flround . j2f14) (flpositive? . j2f13) (flonum? . j2f12) (flodd? . j2f11) (flnumerator . j2f10) (flnegative? . j2f0f) (flnan? . j2f0e) (flmod0 . j2f0d) (flmod . j2f0c) (flmin . j2f0b) (flmax . j2f0a) (fllog . j2f09) (flinteger? . j2f08) (flinfinite? . j2f07) (flfloor . j2f06) (flfinite? . j2f05) (flexpt . j2f04) (flexp . j2f03) (fleven? . j2f02) (fldiv0-and-mod0 . j2f01) (fldiv0 . j2f00) (fldiv-and-mod . j2eff) (fldiv . j2efe) (fldenominator . j2efd) (flcos . j2efc) (flceiling . j2efb) (flatan . j2efa) (flasin . j2ef9) (flacos . j2ef8) (flabs . j2ef7) (fl>? . j2ef6) (fl>=? . j2ef5) (fl=? . j2ef4) (fl<? . j2ef3) (fl<=? . j2ef2) (fl/ . j2ef1) (fl- . j2ef0) (fl+ . j2eef) (fl* . j2eee) (fixnum->flonum . j2eed) (&no-nans . j2e0b) (&no-infinities . j2e0a)) '() values values '#f '#f '#t '#f) (j983@j7cf@install-library 'j30e6 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . j2ff4) (string-ci-hash . j2ff3) (string-hash . j2ff2) (equal-hash . j2ff1) (hashtable-equivalence-function . j2ff0) (make-hashtable . j2fef) (hashtable-hash-function . j2fee) (make-eqv-hashtable . j2fed) (make-eq-hashtable . j2fec) (hashtable? . j2feb) (hashtable-update! . j2fea) (hashtable-size . j2fe9) (hashtable-set! . j2fe8) (hashtable-ref . j2fe7) (hashtable-mutable? . j2fe6) (hashtable-keys . j2fe5) (hashtable-entries . j2fe4) (hashtable-delete! . j2fe3) (hashtable-copy . j2fe2) (hashtable-contains? . j2fe1) (hashtable-clear! . j2fe0)) '() values values '#f '#f '#t '#f) (j983@j7cf@install-library 'j30e7 '(rnrs io ports) '(6) '() '() '() '((eof-object? . j2fd0) (eof-object . j2fcf) (current-error-port . j2fce) (current-output-port . j2fcd) (current-input-port . j2fcc) (output-port? . j2fcb) (input-port? . j2fca) (utf-8-codec . j2fc9) (utf-16-codec . j2fc8) (transcoder-error-handling-mode . j2fc7) (transcoder-eol-style . j2fc6) (transcoder-codec . j2fc5) (transcoded-port . j2fc4) (textual-port? . j2fc3) (string->bytevector . j2fc2) (standard-output-port . j2fc1) (standard-input-port . j2fc0) (standard-error-port . j2fbf) (set-port-position! . j2fbe) (put-u8 . j2fbd) (put-string . j2fbc) (put-datum . j2fbb) (put-char . j2fba) (put-bytevector . j2fb9) (port? . j2fb8) (port-transcoder . j2fb7) (port-position . j2fb6) (port-has-set-port-position!? . j2fb5) (port-has-port-position? . j2fb4) (port-eof? . j2fb3) (output-port-buffer-mode . j2fb2) (open-string-output-port . j2fb1) (open-string-input-port . j2fb0) (open-file-output-port . j2faf) (open-file-input/output-port . j2fae) (open-file-input-port . j2fad) (open-bytevector-output-port . j2fac) (open-bytevector-input-port . j2fab) (native-transcoder . j2faa) (native-eol-style . j2fa9) (make-transcoder . j2fa8) (latin-1-codec . j2fa7) (make-i/o-write-error . j2a22) (make-i/o-read-error . j2a0d) (make-i/o-port-error . j2ac3) (make-i/o-invalid-position-error . j2a39) (make-i/o-filename-error . j2a54) (make-i/o-file-protection-error . j2a6d) (make-i/o-file-is-read-only-error . j2a82) (make-i/o-file-does-not-exist-error . j2aac) (make-i/o-file-already-exists-error . j2a97) (make-i/o-error . j29f8) (make-i/o-encoding-error . j2af3) (make-i/o-decoding-error . j2adc) (make-custom-textual-output-port . j2fa6) (make-custom-textual-input/output-port . j2fa5) (make-custom-textual-input-port . j2fa4) (make-custom-binary-output-port . j2fa3) (make-custom-binary-input/output-port . j2fa2) (make-custom-binary-input-port . j2fa1) (lookahead-u8 . j2f9f) (lookahead-char . j2f9e) (i/o-write-error? . j2a24) (i/o-read-error? . j2a0f) (i/o-port-error? . j2ac7) (i/o-invalid-position-error? . j2a3d) (i/o-filename-error? . j2a58) (i/o-file-protection-error? . j2a6f) (i/o-file-is-read-only-error? . j2a84) (i/o-file-does-not-exist-error? . j2aae) (i/o-file-already-exists-error? . j2a99) (i/o-error? . j29fa) (i/o-error-position . j2a3f) (i/o-error-port . j2ac9) (i/o-error-filename . j2a5a) (i/o-encoding-error? . j2af7) (i/o-encoding-error-char . j2af9) (i/o-decoding-error? . j2ade) (get-u8 . j2f9d) (get-string-n! . j2f9c) (get-string-n . j2f9b) (get-string-all . j2f9a) (get-line . j2f99) (get-datum . j2f98) (get-char . j2f97) (get-bytevector-some . j2f96) (get-bytevector-n! . j2f95) (get-bytevector-n . j2f94) (get-bytevector-all . j2f93) (flush-output-port . j2f92) (close-port . j2f91) (call-with-string-output-port . j2f70) (call-with-port . j2f6f) (call-with-bytevector-output-port . j2f6e) (bytevector->string . j2f6d) (buffer-mode? . j2f6c) (binary-port? . j2f6b) (&i/o-encoding . j2e09) (&i/o-decoding . j2e08) (&i/o-port . j2e07) (&i/o-file-does-not-exist . j2e06) (&i/o-file-already-exists . j2e05) (&i/o-file-is-read-only . j2e04) (&i/o-file-protection . j2e03) (&i/o-filename . j2e02) (&i/o-invalid-position . j2e01) (&i/o-write . j2e00) (&i/o-read . j2dff) (&i/o . j2dfe) (error-handling-mode . j2de3) (file-options . j2de2) (buffer-mode . j2de1) (eol-style . j2de0)) '() values values '#f '#f '#t '#f) (j983@j7cf@install-library 'j30e8 '(rnrs enums) '(6) '() '() '() '((make-enumeration . j2f67) (enum-set=? . j2f66) (enum-set-universe . j2f65) (enum-set-union . j2f64) (enum-set-subset? . j2f63) (enum-set-projection . j2f62) (enum-set-member? . j2f61) (enum-set-intersection . j2f60) (enum-set-indexer . j2f5f) (enum-set-difference . j2f5e) (enum-set-constructor . j2f5d) (enum-set-complement . j2f5c) (enum-set->list . j2f5b) (define-enumeration . j2dee)) '() values values '#f '#f '#t '#f) (j983@j7cf@install-library 'j30e9 '(rnrs conditions) '(6) '() '() '() '((who-condition? . j296e) (warning? . j28e6) (violation? . j2925) (undefined-violation? . j29e5) (syntax-violation? . j29cc) (syntax-violation-subform . j29d0) (syntax-violation-form . j29ce) (syntax-violation . je3e) (simple-conditions . j2f5a) (serious-condition? . j28fb) (non-continuable-violation? . j2985) (message-condition? . j28cf) (make-who-condition . j296a) (make-warning . j28e4) (make-violation . j2923) (make-undefined-violation . j29e3) (make-syntax-violation . j29c6) (make-serious-condition . j28f9) (make-non-continuable-violation . j2983) (make-message-condition . j28cb) (make-lexical-violation . j29ad) (make-irritants-condition . j294f) (make-implementation-restriction-violation . j2998) (make-error . j290e) (make-assertion-violation . j2938) (lexical-violation? . j29af) (irritants-condition? . j2953) (implementation-restriction-violation? . j299a) (error? . j2910) (condition-who . j2970) (condition-predicate . j2f59) (condition-message . j28d1) (condition-irritants . j2955) (condition-accessor . j2f58) (condition . j2f57) (assertion-violation? . j293a) (condition? . j2f56) (&undefined . j2dfd) (&syntax . j2dfc) (&lexical . j2dfb) (&implementation-restriction . j2dfa) (&non-continuable . j2df9) (&who . j2df8) (&irritants . j2df7) (&assertion . j2df6) (&violation . j2df5) (&error . j2df4) (&serious . j2df3) (&warning . j2df2) (&message . j2df1) (&condition . j2df0) (define-condition-type . j2def)) '() values values '#f '#f '#t '#f) (j983@j7cf@install-library 'j30ea '(rnrs records inspection) '(6) '() '() '() '((record? . j3003) (record-type-uid . j3002) (record-type-sealed? . j3001) (record-type-parent . j3000) (record-type-opaque? . j2fff) (record-type-name . j2ffe) (record-type-generative? . j2ffd) (record-type-field-names . j2ffc) (record-rtd . j2ffb) (record-field-mutable? . j2ffa)) '() values values '#f '#f '#t '#f) (j983@j7cf@install-library 'j30eb '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . j300a) (record-predicate . j3009) (record-mutator . j3008) (record-constructor . j3007) (record-accessor . j3006) (make-record-type-descriptor . j3005) (make-record-constructor-descriptor . j3004)) '() values values '#f '#f '#t '#f) (j983@j7cf@install-library 'j30ec '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . j2ded) (parent-rtd . j2dec) (nongenerative . j2deb) (opaque . j2dea) (sealed . j2de9) (protocol . j2de8) (parent . j2de7) (immutable . j2de6) (mutable . j2de5) (fields . j2de4) (record-constructor-descriptor . j2dc3) (record-type-descriptor . j2dc2)) '() values values '#f '#f '#t '#f) (j983@j7cf@install-library 'j30ed '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . j2b27) (&no-nans-rtd . j2b25) (&no-infinities-rcd . j2b12) (&no-infinities-rtd . j2b10) (&i/o-encoding-rcd . j2afd) (&i/o-encoding-rtd . j2afb) (&i/o-decoding-rcd . j2ae2) (&i/o-decoding-rtd . j2ae0) (&i/o-port-rcd . j2acd) (&i/o-port-rtd . j2acb) (&i/o-file-does-not-exist-rcd . j2ab2) (&i/o-file-does-not-exist-rtd . j2ab0) (&i/o-file-already-exists-rcd . j2a9d) (&i/o-file-already-exists-rtd . j2a9b) (&i/o-file-is-read-only-rcd . j2a88) (&i/o-file-is-read-only-rtd . j2a86) (&i/o-file-protection-rcd . j2a73) (&i/o-file-protection-rtd . j2a71) (&i/o-filename-rcd . j2a5e) (&i/o-filename-rtd . j2a5c) (&i/o-invalid-position-rcd . j2a43) (&i/o-invalid-position-rtd . j2a41) (&i/o-write-rcd . j2a28) (&i/o-write-rtd . j2a26) (&i/o-read-rcd . j2a13) (&i/o-read-rtd . j2a11) (&i/o-rcd . j29fe) (&i/o-rtd . j29fc) (&undefined-rcd . j29e9) (&undefined-rtd . j29e7) (&syntax-rcd . j29d4) (&syntax-rtd . j29d2) (&lexical-rcd . j29b3) (&lexical-rtd . j29b1) (&implementation-restriction-rcd . j299e) (&implementation-restriction-rtd . j299c) (&non-continuable-rcd . j2989) (&non-continuable-rtd . j2987) (&who-rcd . j2974) (&who-rtd . j2972) (&irritants-rcd . j2959) (&irritants-rtd . j2957) (&assertion-rcd . j293e) (&assertion-rtd . j293c) (&violation-rcd . j2929) (&violation-rtd . j2927) (&error-rcd . j2914) (&error-rtd . j2912) (&serious-rcd . j28ff) (&serious-rtd . j28fd) (&warning-rcd . j28ea) (&warning-rtd . j28e8) (&message-rcd . j28d5) (&message-rtd . j28d3) (&condition-rcd . j2876) (&condition-rtd . j2874) (syntax-error . je3a) (syntax-dispatch . jd5e) (pretty-print . j30cd) (eval-core . j30cc) (set-symbol-value! . j30cb) (symbol-value . j30ca) (gensym . j30c9) (void . j30c8) (load . j2c34) (interaction-environment . je4a) (char-ready? . j30c7) (regexp? . j30c6) (read-line . j30c5) (gensym-prefix-set! . j30c4) (ungensym . j30c3) (alist->eq-hash-table . j30c2) (assoc-ref . j30c1) (print . j30c0) (format . j30bf) (host-os . j30be) (library-path . j7ae) (standard-library-path . j30bd) (file-newer? . j30bc) (stat-mtime . j30bb) (write-to-file . j30ba) (file->list . j30b9) (file->string . j30b8) (digit->integer . j30b7) (call-with-string-input-port . j30b6) (call-with-string-io . j30b5) (string-split . j30b4) (bytevector-for-each . j30b3) (string->regexp . j30b2) (rxmatch . j30b1) (regexp-replace-all . j30b0) (hashtable-for-each . j30af) (mosh-cache-dir . j599) (call-process . j30ae) (local-tz-offset . j30ad) (microseconds . j30ac) (directory-list . j30ab) (set-current-directory! . j30aa) (expand-path . j30a9) (current-directory . j30a8) (%spawn . j30a7) (%waitpid . j30a6) (simple-struct-name . j30a5) (simple-struct-set! . j30a4) (simple-struct-ref . j30a3) (make-simple-struct . j30a2) (simple-struct? . j30a1) (pointer-ref-c-int64 . j30a0) (pointer-ref-c-int32 . j309f) (pointer-ref-c-int16 . j309e) (pointer-ref-c-int8 . j309d) (pointer-ref-c-uint64 . j309c) (pointer-ref-c-uint32 . j309b) (pointer-ref-c-uint16 . j309a) (pointer-ref-c-uint8 . j3099) (pointer-set-c-uint64! . j3098) (pointer-set-c-uint32! . j3097) (pointer-set-c-uint16! . j3096) (pointer-set-c-uint8! . j3095) (pointer-set-c-int64! . j3094) (pointer-set-c-int32! . j3093) (pointer-set-c-int16! . j3092) (pointer-set-c-int8! . j3091) (pointer-set-c-pointer! . j3090) (pointer-set-c-double! . j308f) (pointer-set-c-float! . j308e) (pointer-set-c-long-long! . j308d) (pointer-set-c-long! . j308c) (pointer-set-c-int! . j308b) (pointer-set-c-short! . j308a) (pointer-set-c-char! . j3089) (pointer-ref-c-pointer . j3088) (pointer-ref-c-double . j3087) (pointer-ref-c-float . j3086) (pointer-ref-c-unsigned-long-long . j3085) (pointer-ref-c-signed-long-long . j3084) (pointer-ref-c-unsigned-long . j3083) (pointer-ref-c-signed-long . j3082) (pointer-ref-c-unsigned-int . j3081) (pointer-ref-c-signed-int . j3080) (pointer-ref-c-unsigned-short . j307f) (pointer-ref-c-signed-short . j307e) (pointer-ref-c-unsigned-char . j307d) (pointer-ref-c-signed-char . j307c) (pointer->integer . j307b) (integer->pointer . j307a) (pointer? . j3079) (shared-errno . j3078) (%ffi-supported? . j3077) (%ffi-pointer->string . j3076) (%ffi-call->string-or-zero . j3075) (%ffi-call->double . j3074) (%ffi-call->void* . j3073) (%ffi-call->void . j3072) (%ffi-call->char . j3071) (%ffi-call->int . j3070) (%ffi-lookup . j306f) (%ffi-open . j306e) (%fork . j306d) (%pipe . j306c) (p . j306b) (open-output-string . j306a) (get-output-string . j3069) (file-stat-ctime . j3068) (file-stat-atime . j3067) (file-stat-mtime . j3066) (file-size-in-bytes . j3065) (file-writable? . j3064) (file-executable? . j3063) (file-readable? . j3062) (file-regular? . j3061) (file-symbolic-link? . j3060) (file-directory? . j305f) (create-symbolic-link . j305e) (rename-file . j305d) (delete-directory . j305c) (create-directory . j305b) (create-mosh-cache-dir . j305a) (get-environment-variables . j3059) (get-environment-variable . j3058) (join-wraps . j3057) (id->real-label . j3056) (same-marks? . j3055) (same-marks*? . j3054) (get-timeofday . j3053) (get-command-line . j3052) (sys-display . j3051) (whereis . j3050) (register . j304f) (vm-join! . j304e) (vm-set-value! . j304d) (vm? . j304c) (main-vm? . j304b) (vm-eval . j304a) (vm-self . j3049) (vm-start! . j3048) (make-vm . j3047) (mutex-try-lock! . j3046) (mutex-unlock! . j3045) (mutex-lock! . j3044) (mutex? . j3043) (make-mutex . j3042) (condition-variable-notify-all! . j3041) (condition-variable-notify! . j3040) (condition-variable-wait! . j303f) (make-condition-variable . j303e) (mosh-executable-path . j303d) (make-file-options . j303c) (source-info . j303b) (make-compiler-instruction . j303a) (make-instruction . j3039) (set-source-info! . j3038) (bignum? . j3037) (fast-equal? . j3036) (fasl-read . j3035) (fasl-write . j3034) (time-usage . j3033) (os-constant . j3032) (make-parameter . j597) (socket-port . j3031) (socket-shutdown . j3030) (socket-close . j302f) (socket-send . j302e) (socket-recv! . j302d) (socket-recv . j302c) (make-server-socket . j302b) (make-client-socket . j302a) (socket-accept . j3029) (socket? . j3028) (string-upcase . j3027) (string-titlecase . j3026) (string-normalize-nfkd . j3025) (string-normalize-nfkc . j3024) (string-normalize-nfd . j3023) (string-normalize-nfc . j3022) (string-foldcase . j3021) (string-downcase . j3020) (string-ci>? . j301f) (string-ci>=? . j301e) (string-ci=? . j301d) (string-ci<? . j301c) (string-ci<=? . j301b) (char-whitespace? . j301a) (char-upper-case? . j3019) (char-title-case? . j3018) (char-numeric? . j3017) (char-lower-case? . j3016) (char-general-category . j3015) (char-upcase . j3014) (char-titlecase . j3013) (char-foldcase . j3012) (char-downcase . j3011) (char-ci>? . j3010) (char-ci>=? . j300f) (char-ci=? . j300e) (char-ci<? . j300d) (char-ci<=? . j300c) (char-alphabetic? . j300b) (make-variable-transformer . jb8b) (identifier? . je40) (generate-temporaries . je2c) (free-identifier=? . je2e) (syntax->datum . je44) (datum->syntax . je42) (bound-identifier=? . je30) (record-type-descriptor? . j300a) (record-predicate . j3009) (record-mutator . j3008) (record-constructor . j3007) (record-accessor . j3006) (make-record-type-descriptor . j3005) (make-record-constructor-descriptor . j3004) (record? . j3003) (record-type-uid . j3002) (record-type-sealed? . j3001) (record-type-parent . j3000) (record-type-opaque? . j2fff) (record-type-name . j2ffe) (record-type-generative? . j2ffd) (record-type-field-names . j2ffc) (record-rtd . j2ffb) (record-field-mutable? . j2ffa) (delete-file . j2ff9) (file-exists? . j2ff8) (vector-sort! . j2ff7) (vector-sort . j2ff6) (list-sort . j2ff5) (symbol-hash . j2ff4) (string-ci-hash . j2ff3) (string-hash . j2ff2) (equal-hash . j2ff1) (hashtable-equivalence-function . j2ff0) (make-hashtable . j2fef) (hashtable-hash-function . j2fee) (make-eqv-hashtable . j2fed) (make-eq-hashtable . j2fec) (hashtable? . j2feb) (hashtable-update! . j2fea) (hashtable-size . j2fe9) (hashtable-set! . j2fe8) (hashtable-ref . j2fe7) (hashtable-mutable? . j2fe6) (hashtable-keys . j2fe5) (hashtable-entries . j2fe4) (hashtable-delete! . j2fe3) (hashtable-copy . j2fe2) (hashtable-contains? . j2fe1) (hashtable-clear! . j2fe0) (call-with-output-file . j2fdf) (call-with-input-file . j2fde) (write-char . j2fdd) (write . j2fdc) (with-output-to-file . j2fdb) (with-input-from-file . j2fda) (read-char . j2fd9) (read . j2fd8) (peek-char . j2fd7) (open-output-file . j2fd6) (open-input-file . j2fd5) (newline . j2fd4) (display . j2fd3) (close-output-port . j2fd2) (close-input-port . j2fd1) (eof-object? . j2fd0) (eof-object . j2fcf) (current-error-port . j2fce) (current-output-port . j2fcd) (current-input-port . j2fcc) (output-port? . j2fcb) (input-port? . j2fca) (utf-8-codec . j2fc9) (utf-16-codec . j2fc8) (transcoder-error-handling-mode . j2fc7) (transcoder-eol-style . j2fc6) (transcoder-codec . j2fc5) (transcoded-port . j2fc4) (textual-port? . j2fc3) (string->bytevector . j2fc2) (standard-output-port . j2fc1) (standard-input-port . j2fc0) (standard-error-port . j2fbf) (set-port-position! . j2fbe) (put-u8 . j2fbd) (put-string . j2fbc) (put-datum . j2fbb) (put-char . j2fba) (put-bytevector . j2fb9) (port? . j2fb8) (port-transcoder . j2fb7) (port-position . j2fb6) (port-has-set-port-position!? . j2fb5) (port-has-port-position? . j2fb4) (port-eof? . j2fb3) (output-port-buffer-mode . j2fb2) (open-string-output-port . j2fb1) (open-string-input-port . j2fb0) (open-file-output-port . j2faf) (open-file-input/output-port . j2fae) (open-file-input-port . j2fad) (open-bytevector-output-port . j2fac) (open-bytevector-input-port . j2fab) (native-transcoder . j2faa) (native-eol-style . j2fa9) (make-transcoder . j2fa8) (latin-1-codec . j2fa7) (make-i/o-write-error . j2a22) (make-i/o-read-error . j2a0d) (make-i/o-port-error . j2ac3) (make-i/o-invalid-position-error . j2a39) (make-i/o-filename-error . j2a54) (make-i/o-file-protection-error . j2a6d) (make-i/o-file-is-read-only-error . j2a82) (make-i/o-file-does-not-exist-error . j2aac) (make-i/o-file-already-exists-error . j2a97) (make-i/o-error . j29f8) (make-i/o-encoding-error . j2af3) (make-i/o-decoding-error . j2adc) (make-custom-textual-output-port . j2fa6) (make-custom-textual-input/output-port . j2fa5) (make-custom-textual-input-port . j2fa4) (make-custom-binary-output-port . j2fa3) (make-custom-binary-input/output-port . j2fa2) (make-custom-binary-input-port . j2fa1) (make-bytevector . j2fa0) (lookahead-u8 . j2f9f) (lookahead-char . j2f9e) (i/o-write-error? . j2a24) (i/o-read-error? . j2a0f) (i/o-port-error? . j2ac7) (i/o-invalid-position-error? . j2a3d) (i/o-filename-error? . j2a58) (i/o-file-protection-error? . j2a6f) (i/o-file-is-read-only-error? . j2a84) (i/o-file-does-not-exist-error? . j2aae) (i/o-file-already-exists-error? . j2a99) (i/o-error? . j29fa) (i/o-error-position . j2a3f) (i/o-error-port . j2ac9) (i/o-error-filename . j2a5a) (i/o-encoding-error? . j2af7) (i/o-encoding-error-char . j2af9) (i/o-decoding-error? . j2ade) (get-u8 . j2f9d) (get-string-n! . j2f9c) (get-string-n . j2f9b) (get-string-all . j2f9a) (get-line . j2f99) (get-datum . j2f98) (get-char . j2f97) (get-bytevector-some . j2f96) (get-bytevector-n! . j2f95) (get-bytevector-n . j2f94) (get-bytevector-all . j2f93) (flush-output-port . j2f92) (close-port . j2f91) (scheme-report-environment . je1a) (quotient . j2f90) (null-environment . je18) (remainder . j2f8f) (modulo . j2f8e) (inexact->exact . j2f8d) (force . j2f8c) (exact->inexact . j2f8b) (make-promise . j2f8a) (exit . j2f89) (command-line . j2c2e) (string-fill! . j2f88) (string-set! . j2f87) (set-cdr! . j2f86) (set-car! . j2f85) (remove . j2f84) (remv . j2f83) (remp . j2f82) (remq . j2f81) (partition . j2f80) (memv . j2f7f) (memq . j2f7e) (memp . j2f7d) (member . j2f7c) (exists . j2f7b) (for-all . j2f7a) (fold-right . j2f79) (fold-left . j2f78) (find . j2f77) (filter . j2f76) (cons* . j2f75) (assv . j2f74) (assq . j2f73) (assp . j2f72) (assoc . j2f71) (call-with-string-output-port . j2f70) (call-with-port . j2f6f) (call-with-bytevector-output-port . j2f6e) (bytevector->string . j2f6d) (buffer-mode? . j2f6c) (binary-port? . j2f6b) (with-exception-handler . j2f6a) (raise-continuable . j2f69) (raise . j2f68) (eval . je1e) (environment . je16) (make-enumeration . j2f67) (enum-set=? . j2f66) (enum-set-universe . j2f65) (enum-set-union . j2f64) (enum-set-subset? . j2f63) (enum-set-projection . j2f62) (enum-set-member? . j2f61) (enum-set-intersection . j2f60) (enum-set-indexer . j2f5f) (enum-set-difference . j2f5e) (enum-set-constructor . j2f5d) (enum-set-complement . j2f5c) (enum-set->list . j2f5b) (who-condition? . j296e) (warning? . j28e6) (violation? . j2925) (undefined-violation? . j29e5) (syntax-violation? . j29cc) (syntax-violation-subform . j29d0) (syntax-violation-form . j29ce) (syntax-violation . je3e) (simple-conditions . j2f5a) (serious-condition? . j28fb) (non-continuable-violation? . j2985) (message-condition? . j28cf) (make-who-condition . j296a) (make-warning . j28e4) (make-violation . j2923) (make-undefined-violation . j29e3) (make-syntax-violation . j29c6) (make-serious-condition . j28f9) (make-non-continuable-violation . j2983) (make-message-condition . j28cb) (make-lexical-violation . j29ad) (make-irritants-condition . j294f) (make-implementation-restriction-violation . j2998) (make-error . j290e) (make-assertion-violation . j2938) (lexical-violation? . j29af) (irritants-condition? . j2953) (implementation-restriction-violation? . j299a) (error? . j2910) (condition-who . j2970) (condition-predicate . j2f59) (condition-message . j28d1) (condition-irritants . j2955) (condition-accessor . j2f58) (condition . j2f57) (assertion-violation? . j293a) (condition? . j2f56) (utf32->string . j2f55) (utf16->string . j2f54) (utf8->string . j2f53) (uint-list->bytevector . j2f52) (u8-list->bytevector . j2f51) (string->utf8 . j2f50) (string->utf32 . j2f4f) (string->utf16 . j2f4e) (sint-list->bytevector . j2f4d) (native-endianness . j2f4c) (bytevector? . j2f4b) (bytevector=? . j2f4a) (bytevector-uint-set! . j2f49) (bytevector-uint-ref . j2f48) (bytevector-u8-set! . j2f47) (bytevector-u8-ref . j2f46) (bytevector-u64-set! . j2f45) (bytevector-u64-ref . j2f44) (bytevector-u64-native-set! . j2f43) (bytevector-u64-native-ref . j2f42) (bytevector-u32-set! . j2f41) (bytevector-u32-ref . j2f40) (bytevector-u32-native-set! . j2f3f) (bytevector-u32-native-ref . j2f3e) (bytevector-u16-set! . j2f3d) (bytevector-u16-ref . j2f3c) (bytevector-u16-native-set! . j2f3b) (bytevector-u16-native-ref . j2f3a) (bytevector-sint-set! . j2f39) (bytevector-sint-ref . j2f38) (bytevector-s8-set! . j2f37) (bytevector-s8-ref . j2f36) (bytevector-s64-set! . j2f35) (bytevector-s64-ref . j2f34) (bytevector-s64-native-set! . j2f33) (bytevector-s64-native-ref . j2f32) (bytevector-s32-set! . j2f31) (bytevector-s32-ref . j2f30) (bytevector-s32-native-set! . j2f2f) (bytevector-s32-native-ref . j2f2e) (bytevector-s16-set! . j2f2d) (bytevector-s16-ref . j2f2c) (bytevector-s16-native-set! . j2f2b) (bytevector-s16-native-ref . j2f2a) (bytevector-length . j2f29) (bytevector-ieee-single-ref . j2f28) (bytevector-ieee-single-set! . j2f27) (bytevector-ieee-single-native-set! . j2f26) (bytevector-ieee-single-native-ref . j2f25) (bytevector-ieee-double-set! . j2f24) (bytevector-ieee-double-ref . j2f23) (bytevector-ieee-double-native-set! . j2f22) (bytevector-ieee-double-native-ref . j2f21) (bytevector-fill! . j2f20) (bytevector-copy! . j2f1f) (bytevector-copy . j2f1e) (bytevector->uint-list . j2f1d) (bytevector->u8-list . j2f1c) (bytevector->sint-list . j2f1b) (no-nans-violation? . j2b23) (no-infinities-violation? . j2b0e) (make-no-nans-violation . j2b21) (make-no-infinities-violation . j2b0c) (real->flonum . j2f1a) (flzero? . j2f19) (fltruncate . j2f18) (fltan . j2f17) (flsqrt . j2f16) (flsin . j2f15) (flround . j2f14) (flpositive? . j2f13) (flonum? . j2f12) (flodd? . j2f11) (flnumerator . j2f10) (flnegative? . j2f0f) (flnan? . j2f0e) (flmod0 . j2f0d) (flmod . j2f0c) (flmin . j2f0b) (flmax . j2f0a) (fllog . j2f09) (flinteger? . j2f08) (flinfinite? . j2f07) (flfloor . j2f06) (flfinite? . j2f05) (flexpt . j2f04) (flexp . j2f03) (fleven? . j2f02) (fldiv0-and-mod0 . j2f01) (fldiv0 . j2f00) (fldiv-and-mod . j2eff) (fldiv . j2efe) (fldenominator . j2efd) (flcos . j2efc) (flceiling . j2efb) (flatan . j2efa) (flasin . j2ef9) (flacos . j2ef8) (flabs . j2ef7) (fl>? . j2ef6) (fl>=? . j2ef5) (fl=? . j2ef4) (fl<? . j2ef3) (fl<=? . j2ef2) (fl/ . j2ef1) (fl- . j2ef0) (fl+ . j2eef) (fl* . j2eee) (fixnum->flonum . j2eed) (fxzero? . j2eec) (fxxor . j2eeb) (fxrotate-bit-field . j2eea) (fxreverse-bit-field . j2ee9) (fxpositive? . j2ee8) (fxodd? . j2ee7) (fxnot . j2ee6) (fxnegative? . j2ee5) (fxmod0 . j2ee4) (fxmod . j2ee3) (fxmin . j2ee2) (fxmax . j2ee1) (fxlength . j2ee0) (fxior . j2edf) (fxif . j2ede) (fxfirst-bit-set . j2edd) (fxeven? . j2edc) (fxdiv0-and-mod0 . j2edb) (fxdiv0 . j2eda) (fxdiv-and-mod . j2ed9) (fxdiv . j2ed8) (fxcopy-bit-field . j2ed7) (fxcopy-bit . j2ed6) (fxbit-set? . j2ed5) (fxbit-field . j2ed4) (fxbit-count . j2ed3) (fxarithmetic-shift-right . j2ed2) (fxarithmetic-shift-left . j2ed1) (fxarithmetic-shift . j2ed0) (fxand . j2ecf) (fx>? . j2ece) (fx>=? . j2ecd) (fx=? . j2ecc) (fx<? . j2ecb) (fx<=? . j2eca) (fx-/carry . j2ec9) (fx- . j2ec8) (fx+/carry . j2ec7) (fx+ . j2ec6) (fx*/carry . j2ec5) (fx* . j2ec4) (greatest-fixnum . j2ec3) (least-fixnum . j2ec2) (fixnum-width . j2ec1) (fixnum? . j2ec0) (bitwise-rotate-bit-field . j2ebf) (bitwise-reverse-bit-field . j2ebe) (bitwise-length . j2ebd) (bitwise-if . j2ebc) (bitwise-first-bit-set . j2ebb) (bitwise-copy-bit-field . j2eba) (bitwise-copy-bit . j2eb9) (bitwise-bit-set? . j2eb8) (bitwise-bit-field . j2eb7) (bitwise-bit-count . j2eb6) (bitwise-xor . j2eb5) (bitwise-ior . j2eb4) (bitwise-and . j2eb3) (bitwise-not . j2eb2) (bitwise-arithmetic-shift-right . j2eb1) (bitwise-arithmetic-shift-left . j2eb0) (bitwise-arithmetic-shift . j2eaf) (zero? . j2eae) (vector? . j2ead) (vector-set! . j2eac) (vector-ref . j2eab) (vector-map . j2eaa) (vector-length . j2ea9) (vector-for-each . j2ea8) (vector-fill! . j2ea7) (vector->list . j2ea6) (vector . j2ea5) (values . j2ea4) (truncate . j2ea3) (tan . j2ea2) (symbol? . j2ea1) (symbol=? . j2ea0) (symbol->string . j2e9f) (substring . j2e9e) (string? . j2e9d) (string>? . j2e9c) (string>=? . j2e9b) (string=? . j2e9a) (string<? . j2e99) (string<=? . j2e98) (string-ref . j2e97) (string-length . j2e96) (string-for-each . j2e95) (string-copy . j2e94) (string-append . j2e93) (string->symbol . j2e92) (string->number . j2e91) (string->list . j2e90) (string . j2e8f) (sqrt . j2e8e) (sin . j2e8d) (round . j2e8c) (reverse . j2e8b) (real? . j2e8a) (real-valued? . j2e89) (real-part . j2e88) (rationalize . j2e87) (rational? . j2e86) (rational-valued? . j2e85) (procedure? . j2e84) (positive? . j2e83) (pair? . j2e82) (odd? . j2e81) (numerator . j2e80) (number? . j2e7f) (number->string . j2e7e) (null? . j2e7d) (not . j2e7c) (negative? . j2e7b) (nan? . j2e7a) (min . j2e79) (max . j2e78) (map . j2e77) (make-vector . j2e76) (make-string . j2e75) (make-rectangular . j2e74) (make-polar . j2e73) (magnitude . j2e72) (log . j2e71) (list? . j2e70) (list-tail . j2e6f) (list-ref . j2e6e) (list->vector . j2e6d) (list->string . j2e6c) (list . j2e6b) (length . j2e6a) (lcm . j2e69) (integer? . j2e68) (integer-valued? . j2e67) (integer->char . j2e66) (infinite? . j2e65) (inexact? . j2e64) (inexact . j2e63) (imag-part . j2e62) (gcd . j2e61) (for-each . j2e60) (floor . j2e5f) (finite? . j2e5e) (expt . j2e5d) (exp . j2e5c) (exact? . j2e5b) (exact-integer-sqrt . j2e5a) (exact . j2e59) (even? . j2e58) (error . j2e57) (eqv? . j2e56) (equal? . j2e55) (eq? . j2e54) (dynamic-wind . j2e53) (div0-and-mod0 . j2e52) (mod0 . j2e51) (div0 . j2e50) (div-and-mod . j2e4f) (mod . j2e4e) (div . j2e4d) (denominator . j2e4c) (cos . j2e4b) (cons . j2e4a) (complex? . j2e49) (char? . j2e48) (char>? . j2e47) (char>=? . j2e46) (char=? . j2e45) (char<? . j2e44) (char<=? . j2e43) (char->integer . j2e42) (ceiling . j2e41) (call-with-values . j2e40) (call/cc . j2e3f) (call-with-current-continuation . j2e3e) (cddddr . j2e3d) (cdddar . j2e3c) (cddadr . j2e3b) (cddaar . j2e3a) (cdaddr . j2e39) (cdadar . j2e38) (cdaadr . j2e37) (cdaaar . j2e36) (cadddr . j2e35) (caddar . j2e34) (cadadr . j2e33) (cadaar . j2e32) (caaddr . j2e31) (caadar . j2e30) (caaadr . j2e2f) (caaaar . j2e2e) (cdddr . j2e2d) (cddar . j2e2c) (cdadr . j2e2b) (cdaar . j2e2a) (caddr . j2e29) (cadar . j2e28) (caadr . j2e27) (caaar . j2e26) (cddr . j2e25) (cdar . j2e24) (cadr . j2e23) (caar . j2e22) (cdr . j2e21) (car . j2e20) (boolean? . j2e1f) (boolean=? . j2e1e) (atan . j2e1d) (assertion-violation . j2e1c) (assertion-error . je38) (asin . j2e1b) (apply . j2e1a) (append . j2e19) (angle . j2e18) (acos . j2e17) (abs . j2e16) (/ . j2e15) (* . j2e14) (- . j2e13) (+ . j2e12) (>= . j2e11) (> . j2e10) (= . j2e0f) (<= . j2e0e) (< . j2e0d) (library . j2e0c) (&no-nans . j2e0b) (&no-infinities . j2e0a) (&i/o-encoding . j2e09) (&i/o-decoding . j2e08) (&i/o-port . j2e07) (&i/o-file-does-not-exist . j2e06) (&i/o-file-already-exists . j2e05) (&i/o-file-is-read-only . j2e04) (&i/o-file-protection . j2e03) (&i/o-filename . j2e02) (&i/o-invalid-position . j2e01) (&i/o-write . j2e00) (&i/o-read . j2dff) (&i/o . j2dfe) (&undefined . j2dfd) (&syntax . j2dfc) (&lexical . j2dfb) (&implementation-restriction . j2dfa) (&non-continuable . j2df9) (&who . j2df8) (&irritants . j2df7) (&assertion . j2df6) (&violation . j2df5) (&error . j2df4) (&serious . j2df3) (&warning . j2df2) (&message . j2df1) (&condition . j2df0) (define-condition-type . j2def) (define-enumeration . j2dee) (define-record-type . j2ded) (parent-rtd . j2dec) (nongenerative . j2deb) (opaque . j2dea) (sealed . j2de9) (protocol . j2de8) (parent . j2de7) (immutable . j2de6) (mutable . j2de5) (fields . j2de4) (error-handling-mode . j2de3) (file-options . j2de2) (buffer-mode . j2de1) (eol-style . j2de0) (guard . j2ddf) (trace-define . j2dde) (trace-lambda . j2ddd) (unsyntax-splicing . j2ddc) (unsyntax . j2ddb) (unquote-splicing . j2dda) (unquote . j2dd9) (_ . j2dd8) (else . j2dd7) (=> . j2dd6) (... . j2dd5) (assert . j2dd4) (endianness . j2dd3) (delay . j2dd2) (time . j2dd1) (do . j2dd0) (cond . j2dcf) (let* . j2dce) (let . j2dcd) (let*-values . j2dcc) (let-values . j2dcb) (identifier-syntax . j2dca) (with-syntax . j2dc9) (quasisyntax . j2dc8) (quasiquote . j2dc7) (syntax-rules . j2dc6) (include . j2dc5) (define-struct . j2dc4) (record-constructor-descriptor . j2dc3) (record-type-descriptor . j2dc2) (case . j2dc1) (parameterize . j2dc0) (unless . j2dbf) (when . j2dbe) (or . j2dbd) (and . j2dbc) (if . j2dbb) (letrec* . j2dba) (letrec . j2db9) (type-descriptor . j2db8) (case-lambda . j2db7) (lambda . j2db6) (syntax . j2db5) (syntax-case . j2db4) (quote . j2db3) (foreign-call . j2db2) (letrec-syntax . j2db1) (let-syntax . j2db0) (set! . j2daf) (import . j2dae) (begin . j2dad) (module . j2dac) (define-syntax . j2dab) (define . j2daa)) '((j2b27 core-prim . &no-nans-rcd) (j2b25 core-prim . &no-nans-rtd) (j2b12 core-prim . &no-infinities-rcd) (j2b10 core-prim . &no-infinities-rtd) (j2afd core-prim . &i/o-encoding-rcd) (j2afb core-prim . &i/o-encoding-rtd) (j2ae2 core-prim . &i/o-decoding-rcd) (j2ae0 core-prim . &i/o-decoding-rtd) (j2acd core-prim . &i/o-port-rcd) (j2acb core-prim . &i/o-port-rtd) (j2ab2 core-prim . &i/o-file-does-not-exist-rcd) (j2ab0 core-prim . &i/o-file-does-not-exist-rtd) (j2a9d core-prim . &i/o-file-already-exists-rcd) (j2a9b core-prim . &i/o-file-already-exists-rtd) (j2a88 core-prim . &i/o-file-is-read-only-rcd) (j2a86 core-prim . &i/o-file-is-read-only-rtd) (j2a73 core-prim . &i/o-file-protection-rcd) (j2a71 core-prim . &i/o-file-protection-rtd) (j2a5e core-prim . &i/o-filename-rcd) (j2a5c core-prim . &i/o-filename-rtd) (j2a43 core-prim . &i/o-invalid-position-rcd) (j2a41 core-prim . &i/o-invalid-position-rtd) (j2a28 core-prim . &i/o-write-rcd) (j2a26 core-prim . &i/o-write-rtd) (j2a13 core-prim . &i/o-read-rcd) (j2a11 core-prim . &i/o-read-rtd) (j29fe core-prim . &i/o-rcd) (j29fc core-prim . &i/o-rtd) (j29e9 core-prim . &undefined-rcd) (j29e7 core-prim . &undefined-rtd) (j29d4 core-prim . &syntax-rcd) (j29d2 core-prim . &syntax-rtd) (j29b3 core-prim . &lexical-rcd) (j29b1 core-prim . &lexical-rtd) (j299e core-prim . &implementation-restriction-rcd) (j299c core-prim . &implementation-restriction-rtd) (j2989 core-prim . &non-continuable-rcd) (j2987 core-prim . &non-continuable-rtd) (j2974 core-prim . &who-rcd) (j2972 core-prim . &who-rtd) (j2959 core-prim . &irritants-rcd) (j2957 core-prim . &irritants-rtd) (j293e core-prim . &assertion-rcd) (j293c core-prim . &assertion-rtd) (j2929 core-prim . &violation-rcd) (j2927 core-prim . &violation-rtd) (j2914 core-prim . &error-rcd) (j2912 core-prim . &error-rtd) (j28ff core-prim . &serious-rcd) (j28fd core-prim . &serious-rtd) (j28ea core-prim . &warning-rcd) (j28e8 core-prim . &warning-rtd) (j28d5 core-prim . &message-rcd) (j28d3 core-prim . &message-rtd) (j2876 core-prim . &condition-rcd) (j2874 core-prim . &condition-rtd) (je3a core-prim . syntax-error) (jd5e core-prim . syntax-dispatch) (j30cd core-prim . pretty-print) (j30cc core-prim . eval-core) (j30cb core-prim . set-symbol-value!) (j30ca core-prim . symbol-value) (j30c9 core-prim . gensym) (j30c8 core-prim . void) (j2c34 core-prim . load) (je4a core-prim . interaction-environment) (j30c7 core-prim . char-ready?) (j30c6 core-prim . regexp?) (j30c5 core-prim . read-line) (j30c4 core-prim . gensym-prefix-set!) (j30c3 core-prim . ungensym) (j30c2 core-prim . alist->eq-hash-table) (j30c1 core-prim . assoc-ref) (j30c0 core-prim . print) (j30bf core-prim . format) (j30be core-prim . host-os) (j7ae core-prim . library-path) (j30bd core-prim . standard-library-path) (j30bc core-prim . file-newer?) (j30bb core-prim . stat-mtime) (j30ba core-prim . write-to-file) (j30b9 core-prim . file->list) (j30b8 core-prim . file->string) (j30b7 core-prim . digit->integer) (j30b6 core-prim . call-with-string-input-port) (j30b5 core-prim . call-with-string-io) (j30b4 core-prim . string-split) (j30b3 core-prim . bytevector-for-each) (j30b2 core-prim . string->regexp) (j30b1 core-prim . rxmatch) (j30b0 core-prim . regexp-replace-all) (j30af core-prim . hashtable-for-each) (j599 core-prim . mosh-cache-dir) (j30ae core-prim . call-process) (j30ad core-prim . local-tz-offset) (j30ac core-prim . microseconds) (j30ab core-prim . directory-list) (j30aa core-prim . set-current-directory!) (j30a9 core-prim . expand-path) (j30a8 core-prim . current-directory) (j30a7 core-prim . %spawn) (j30a6 core-prim . %waitpid) (j30a5 core-prim . simple-struct-name) (j30a4 core-prim . simple-struct-set!) (j30a3 core-prim . simple-struct-ref) (j30a2 core-prim . make-simple-struct) (j30a1 core-prim . simple-struct?) (j30a0 core-prim . pointer-ref-c-int64) (j309f core-prim . pointer-ref-c-int32) (j309e core-prim . pointer-ref-c-int16) (j309d core-prim . pointer-ref-c-int8) (j309c core-prim . pointer-ref-c-uint64) (j309b core-prim . pointer-ref-c-uint32) (j309a core-prim . pointer-ref-c-uint16) (j3099 core-prim . pointer-ref-c-uint8) (j3098 core-prim . pointer-set-c-uint64!) (j3097 core-prim . pointer-set-c-uint32!) (j3096 core-prim . pointer-set-c-uint16!) (j3095 core-prim . pointer-set-c-uint8!) (j3094 core-prim . pointer-set-c-int64!) (j3093 core-prim . pointer-set-c-int32!) (j3092 core-prim . pointer-set-c-int16!) (j3091 core-prim . pointer-set-c-int8!) (j3090 core-prim . pointer-set-c-pointer!) (j308f core-prim . pointer-set-c-double!) (j308e core-prim . pointer-set-c-float!) (j308d core-prim . pointer-set-c-long-long!) (j308c core-prim . pointer-set-c-long!) (j308b core-prim . pointer-set-c-int!) (j308a core-prim . pointer-set-c-short!) (j3089 core-prim . pointer-set-c-char!) (j3088 core-prim . pointer-ref-c-pointer) (j3087 core-prim . pointer-ref-c-double) (j3086 core-prim . pointer-ref-c-float) (j3085 core-prim . pointer-ref-c-unsigned-long-long) (j3084 core-prim . pointer-ref-c-signed-long-long) (j3083 core-prim . pointer-ref-c-unsigned-long) (j3082 core-prim . pointer-ref-c-signed-long) (j3081 core-prim . pointer-ref-c-unsigned-int) (j3080 core-prim . pointer-ref-c-signed-int) (j307f core-prim . pointer-ref-c-unsigned-short) (j307e core-prim . pointer-ref-c-signed-short) (j307d core-prim . pointer-ref-c-unsigned-char) (j307c core-prim . pointer-ref-c-signed-char) (j307b core-prim . pointer->integer) (j307a core-prim . integer->pointer) (j3079 core-prim . pointer?) (j3078 core-prim . shared-errno) (j3077 core-prim . %ffi-supported?) (j3076 core-prim . %ffi-pointer->string) (j3075 core-prim . %ffi-call->string-or-zero) (j3074 core-prim . %ffi-call->double) (j3073 core-prim . %ffi-call->void*) (j3072 core-prim . %ffi-call->void) (j3071 core-prim . %ffi-call->char) (j3070 core-prim . %ffi-call->int) (j306f core-prim . %ffi-lookup) (j306e core-prim . %ffi-open) (j306d core-prim . %fork) (j306c core-prim . %pipe) (j306b core-prim . p) (j306a core-prim . open-output-string) (j3069 core-prim . get-output-string) (j3068 core-prim . file-stat-ctime) (j3067 core-prim . file-stat-atime) (j3066 core-prim . file-stat-mtime) (j3065 core-prim . file-size-in-bytes) (j3064 core-prim . file-writable?) (j3063 core-prim . file-executable?) (j3062 core-prim . file-readable?) (j3061 core-prim . file-regular?) (j3060 core-prim . file-symbolic-link?) (j305f core-prim . file-directory?) (j305e core-prim . create-symbolic-link) (j305d core-prim . rename-file) (j305c core-prim . delete-directory) (j305b core-prim . create-directory) (j305a core-prim . create-mosh-cache-dir) (j3059 core-prim . get-environment-variables) (j3058 core-prim . get-environment-variable) (j3057 core-prim . join-wraps) (j3056 core-prim . id->real-label) (j3055 core-prim . same-marks?) (j3054 core-prim . same-marks*?) (j3053 core-prim . get-timeofday) (j3052 core-prim . get-command-line) (j3051 core-prim . sys-display) (j3050 core-prim . whereis) (j304f core-prim . register) (j304e core-prim . vm-join!) (j304d core-prim . vm-set-value!) (j304c core-prim . vm?) (j304b core-prim . main-vm?) (j304a core-prim . vm-eval) (j3049 core-prim . vm-self) (j3048 core-prim . vm-start!) (j3047 core-prim . make-vm) (j3046 core-prim . mutex-try-lock!) (j3045 core-prim . mutex-unlock!) (j3044 core-prim . mutex-lock!) (j3043 core-prim . mutex?) (j3042 core-prim . make-mutex) (j3041 core-prim . condition-variable-notify-all!) (j3040 core-prim . condition-variable-notify!) (j303f core-prim . condition-variable-wait!) (j303e core-prim . make-condition-variable) (j303d core-prim . mosh-executable-path) (j303c core-prim . make-file-options) (j303b core-prim . source-info) (j303a core-prim . make-compiler-instruction) (j3039 core-prim . make-instruction) (j3038 core-prim . set-source-info!) (j3037 core-prim . bignum?) (j3036 core-prim . fast-equal?) (j3035 core-prim . fasl-read) (j3034 core-prim . fasl-write) (j3033 core-prim . time-usage) (j3032 core-prim . os-constant) (j597 core-prim . make-parameter) (j3031 core-prim . socket-port) (j3030 core-prim . socket-shutdown) (j302f core-prim . socket-close) (j302e core-prim . socket-send) (j302d core-prim . socket-recv!) (j302c core-prim . socket-recv) (j302b core-prim . make-server-socket) (j302a core-prim . make-client-socket) (j3029 core-prim . socket-accept) (j3028 core-prim . socket?) (j3027 core-prim . string-upcase) (j3026 core-prim . string-titlecase) (j3025 core-prim . string-normalize-nfkd) (j3024 core-prim . string-normalize-nfkc) (j3023 core-prim . string-normalize-nfd) (j3022 core-prim . string-normalize-nfc) (j3021 core-prim . string-foldcase) (j3020 core-prim . string-downcase) (j301f core-prim . string-ci>?) (j301e core-prim . string-ci>=?) (j301d core-prim . string-ci=?) (j301c core-prim . string-ci<?) (j301b core-prim . string-ci<=?) (j301a core-prim . char-whitespace?) (j3019 core-prim . char-upper-case?) (j3018 core-prim . char-title-case?) (j3017 core-prim . char-numeric?) (j3016 core-prim . char-lower-case?) (j3015 core-prim . char-general-category) (j3014 core-prim . char-upcase) (j3013 core-prim . char-titlecase) (j3012 core-prim . char-foldcase) (j3011 core-prim . char-downcase) (j3010 core-prim . char-ci>?) (j300f core-prim . char-ci>=?) (j300e core-prim . char-ci=?) (j300d core-prim . char-ci<?) (j300c core-prim . char-ci<=?) (j300b core-prim . char-alphabetic?) (jb8b core-prim . make-variable-transformer) (je40 core-prim . identifier?) (je2c core-prim . generate-temporaries) (je2e core-prim . free-identifier=?) (je44 core-prim . syntax->datum) (je42 core-prim . datum->syntax) (je30 core-prim . bound-identifier=?) (j300a core-prim . record-type-descriptor?) (j3009 core-prim . record-predicate) (j3008 core-prim . record-mutator) (j3007 core-prim . record-constructor) (j3006 core-prim . record-accessor) (j3005 core-prim . make-record-type-descriptor) (j3004 core-prim . make-record-constructor-descriptor) (j3003 core-prim . record?) (j3002 core-prim . record-type-uid) (j3001 core-prim . record-type-sealed?) (j3000 core-prim . record-type-parent) (j2fff core-prim . record-type-opaque?) (j2ffe core-prim . record-type-name) (j2ffd core-prim . record-type-generative?) (j2ffc core-prim . record-type-field-names) (j2ffb core-prim . record-rtd) (j2ffa core-prim . record-field-mutable?) (j2ff9 core-prim . delete-file) (j2ff8 core-prim . file-exists?) (j2ff7 core-prim . vector-sort!) (j2ff6 core-prim . vector-sort) (j2ff5 core-prim . list-sort) (j2ff4 core-prim . symbol-hash) (j2ff3 core-prim . string-ci-hash) (j2ff2 core-prim . string-hash) (j2ff1 core-prim . equal-hash) (j2ff0 core-prim . hashtable-equivalence-function) (j2fef core-prim . make-hashtable) (j2fee core-prim . hashtable-hash-function) (j2fed core-prim . make-eqv-hashtable) (j2fec core-prim . make-eq-hashtable) (j2feb core-prim . hashtable?) (j2fea core-prim . hashtable-update!) (j2fe9 core-prim . hashtable-size) (j2fe8 core-prim . hashtable-set!) (j2fe7 core-prim . hashtable-ref) (j2fe6 core-prim . hashtable-mutable?) (j2fe5 core-prim . hashtable-keys) (j2fe4 core-prim . hashtable-entries) (j2fe3 core-prim . hashtable-delete!) (j2fe2 core-prim . hashtable-copy) (j2fe1 core-prim . hashtable-contains?) (j2fe0 core-prim . hashtable-clear!) (j2fdf core-prim . call-with-output-file) (j2fde core-prim . call-with-input-file) (j2fdd core-prim . write-char) (j2fdc core-prim . write) (j2fdb core-prim . with-output-to-file) (j2fda core-prim . with-input-from-file) (j2fd9 core-prim . read-char) (j2fd8 core-prim . read) (j2fd7 core-prim . peek-char) (j2fd6 core-prim . open-output-file) (j2fd5 core-prim . open-input-file) (j2fd4 core-prim . newline) (j2fd3 core-prim . display) (j2fd2 core-prim . close-output-port) (j2fd1 core-prim . close-input-port) (j2fd0 core-prim . eof-object?) (j2fcf core-prim . eof-object) (j2fce core-prim . current-error-port) (j2fcd core-prim . current-output-port) (j2fcc core-prim . current-input-port) (j2fcb core-prim . output-port?) (j2fca core-prim . input-port?) (j2fc9 core-prim . utf-8-codec) (j2fc8 core-prim . utf-16-codec) (j2fc7 core-prim . transcoder-error-handling-mode) (j2fc6 core-prim . transcoder-eol-style) (j2fc5 core-prim . transcoder-codec) (j2fc4 core-prim . transcoded-port) (j2fc3 core-prim . textual-port?) (j2fc2 core-prim . string->bytevector) (j2fc1 core-prim . standard-output-port) (j2fc0 core-prim . standard-input-port) (j2fbf core-prim . standard-error-port) (j2fbe core-prim . set-port-position!) (j2fbd core-prim . put-u8) (j2fbc core-prim . put-string) (j2fbb core-prim . put-datum) (j2fba core-prim . put-char) (j2fb9 core-prim . put-bytevector) (j2fb8 core-prim . port?) (j2fb7 core-prim . port-transcoder) (j2fb6 core-prim . port-position) (j2fb5 core-prim . port-has-set-port-position!?) (j2fb4 core-prim . port-has-port-position?) (j2fb3 core-prim . port-eof?) (j2fb2 core-prim . output-port-buffer-mode) (j2fb1 core-prim . open-string-output-port) (j2fb0 core-prim . open-string-input-port) (j2faf core-prim . open-file-output-port) (j2fae core-prim . open-file-input/output-port) (j2fad core-prim . open-file-input-port) (j2fac core-prim . open-bytevector-output-port) (j2fab core-prim . open-bytevector-input-port) (j2faa core-prim . native-transcoder) (j2fa9 core-prim . native-eol-style) (j2fa8 core-prim . make-transcoder) (j2fa7 core-prim . latin-1-codec) (j2a22 core-prim . make-i/o-write-error) (j2a0d core-prim . make-i/o-read-error) (j2ac3 core-prim . make-i/o-port-error) (j2a39 core-prim . make-i/o-invalid-position-error) (j2a54 core-prim . make-i/o-filename-error) (j2a6d core-prim . make-i/o-file-protection-error) (j2a82 core-prim . make-i/o-file-is-read-only-error) (j2aac core-prim . make-i/o-file-does-not-exist-error) (j2a97 core-prim . make-i/o-file-already-exists-error) (j29f8 core-prim . make-i/o-error) (j2af3 core-prim . make-i/o-encoding-error) (j2adc core-prim . make-i/o-decoding-error) (j2fa6 core-prim . make-custom-textual-output-port) (j2fa5 core-prim . make-custom-textual-input/output-port) (j2fa4 core-prim . make-custom-textual-input-port) (j2fa3 core-prim . make-custom-binary-output-port) (j2fa2 core-prim . make-custom-binary-input/output-port) (j2fa1 core-prim . make-custom-binary-input-port) (j2fa0 core-prim . make-bytevector) (j2f9f core-prim . lookahead-u8) (j2f9e core-prim . lookahead-char) (j2a24 core-prim . i/o-write-error?) (j2a0f core-prim . i/o-read-error?) (j2ac7 core-prim . i/o-port-error?) (j2a3d core-prim . i/o-invalid-position-error?) (j2a58 core-prim . i/o-filename-error?) (j2a6f core-prim . i/o-file-protection-error?) (j2a84 core-prim . i/o-file-is-read-only-error?) (j2aae core-prim . i/o-file-does-not-exist-error?) (j2a99 core-prim . i/o-file-already-exists-error?) (j29fa core-prim . i/o-error?) (j2a3f core-prim . i/o-error-position) (j2ac9 core-prim . i/o-error-port) (j2a5a core-prim . i/o-error-filename) (j2af7 core-prim . i/o-encoding-error?) (j2af9 core-prim . i/o-encoding-error-char) (j2ade core-prim . i/o-decoding-error?) (j2f9d core-prim . get-u8) (j2f9c core-prim . get-string-n!) (j2f9b core-prim . get-string-n) (j2f9a core-prim . get-string-all) (j2f99 core-prim . get-line) (j2f98 core-prim . get-datum) (j2f97 core-prim . get-char) (j2f96 core-prim . get-bytevector-some) (j2f95 core-prim . get-bytevector-n!) (j2f94 core-prim . get-bytevector-n) (j2f93 core-prim . get-bytevector-all) (j2f92 core-prim . flush-output-port) (j2f91 core-prim . close-port) (je1a core-prim . scheme-report-environment) (j2f90 core-prim . quotient) (je18 core-prim . null-environment) (j2f8f core-prim . remainder) (j2f8e core-prim . modulo) (j2f8d core-prim . inexact->exact) (j2f8c core-prim . force) (j2f8b core-prim . exact->inexact) (j2f8a core-prim . make-promise) (j2f89 core-prim . exit) (j2c2e core-prim . command-line) (j2f88 core-prim . string-fill!) (j2f87 core-prim . string-set!) (j2f86 core-prim . set-cdr!) (j2f85 core-prim . set-car!) (j2f84 core-prim . remove) (j2f83 core-prim . remv) (j2f82 core-prim . remp) (j2f81 core-prim . remq) (j2f80 core-prim . partition) (j2f7f core-prim . memv) (j2f7e core-prim . memq) (j2f7d core-prim . memp) (j2f7c core-prim . member) (j2f7b core-prim . exists) (j2f7a core-prim . for-all) (j2f79 core-prim . fold-right) (j2f78 core-prim . fold-left) (j2f77 core-prim . find) (j2f76 core-prim . filter) (j2f75 core-prim . cons*) (j2f74 core-prim . assv) (j2f73 core-prim . assq) (j2f72 core-prim . assp) (j2f71 core-prim . assoc) (j2f70 core-prim . call-with-string-output-port) (j2f6f core-prim . call-with-port) (j2f6e core-prim . call-with-bytevector-output-port) (j2f6d core-prim . bytevector->string) (j2f6c core-prim . buffer-mode?) (j2f6b core-prim . binary-port?) (j2f6a core-prim . with-exception-handler) (j2f69 core-prim . raise-continuable) (j2f68 core-prim . raise) (je1e core-prim . eval) (je16 core-prim . environment) (j2f67 core-prim . make-enumeration) (j2f66 core-prim . enum-set=?) (j2f65 core-prim . enum-set-universe) (j2f64 core-prim . enum-set-union) (j2f63 core-prim . enum-set-subset?) (j2f62 core-prim . enum-set-projection) (j2f61 core-prim . enum-set-member?) (j2f60 core-prim . enum-set-intersection) (j2f5f core-prim . enum-set-indexer) (j2f5e core-prim . enum-set-difference) (j2f5d core-prim . enum-set-constructor) (j2f5c core-prim . enum-set-complement) (j2f5b core-prim . enum-set->list) (j296e core-prim . who-condition?) (j28e6 core-prim . warning?) (j2925 core-prim . violation?) (j29e5 core-prim . undefined-violation?) (j29cc core-prim . syntax-violation?) (j29d0 core-prim . syntax-violation-subform) (j29ce core-prim . syntax-violation-form) (je3e core-prim . syntax-violation) (j2f5a core-prim . simple-conditions) (j28fb core-prim . serious-condition?) (j2985 core-prim . non-continuable-violation?) (j28cf core-prim . message-condition?) (j296a core-prim . make-who-condition) (j28e4 core-prim . make-warning) (j2923 core-prim . make-violation) (j29e3 core-prim . make-undefined-violation) (j29c6 core-prim . make-syntax-violation) (j28f9 core-prim . make-serious-condition) (j2983 core-prim . make-non-continuable-violation) (j28cb core-prim . make-message-condition) (j29ad core-prim . make-lexical-violation) (j294f core-prim . make-irritants-condition) (j2998 core-prim . make-implementation-restriction-violation) (j290e core-prim . make-error) (j2938 core-prim . make-assertion-violation) (j29af core-prim . lexical-violation?) (j2953 core-prim . irritants-condition?) (j299a core-prim . implementation-restriction-violation?) (j2910 core-prim . error?) (j2970 core-prim . condition-who) (j2f59 core-prim . condition-predicate) (j28d1 core-prim . condition-message) (j2955 core-prim . condition-irritants) (j2f58 core-prim . condition-accessor) (j2f57 core-prim . condition) (j293a core-prim . assertion-violation?) (j2f56 core-prim . condition?) (j2f55 core-prim . utf32->string) (j2f54 core-prim . utf16->string) (j2f53 core-prim . utf8->string) (j2f52 core-prim . uint-list->bytevector) (j2f51 core-prim . u8-list->bytevector) (j2f50 core-prim . string->utf8) (j2f4f core-prim . string->utf32) (j2f4e core-prim . string->utf16) (j2f4d core-prim . sint-list->bytevector) (j2f4c core-prim . native-endianness) (j2f4b core-prim . bytevector?) (j2f4a core-prim . bytevector=?) (j2f49 core-prim . bytevector-uint-set!) (j2f48 core-prim . bytevector-uint-ref) (j2f47 core-prim . bytevector-u8-set!) (j2f46 core-prim . bytevector-u8-ref) (j2f45 core-prim . bytevector-u64-set!) (j2f44 core-prim . bytevector-u64-ref) (j2f43 core-prim . bytevector-u64-native-set!) (j2f42 core-prim . bytevector-u64-native-ref) (j2f41 core-prim . bytevector-u32-set!) (j2f40 core-prim . bytevector-u32-ref) (j2f3f core-prim . bytevector-u32-native-set!) (j2f3e core-prim . bytevector-u32-native-ref) (j2f3d core-prim . bytevector-u16-set!) (j2f3c core-prim . bytevector-u16-ref) (j2f3b core-prim . bytevector-u16-native-set!) (j2f3a core-prim . bytevector-u16-native-ref) (j2f39 core-prim . bytevector-sint-set!) (j2f38 core-prim . bytevector-sint-ref) (j2f37 core-prim . bytevector-s8-set!) (j2f36 core-prim . bytevector-s8-ref) (j2f35 core-prim . bytevector-s64-set!) (j2f34 core-prim . bytevector-s64-ref) (j2f33 core-prim . bytevector-s64-native-set!) (j2f32 core-prim . bytevector-s64-native-ref) (j2f31 core-prim . bytevector-s32-set!) (j2f30 core-prim . bytevector-s32-ref) (j2f2f core-prim . bytevector-s32-native-set!) (j2f2e core-prim . bytevector-s32-native-ref) (j2f2d core-prim . bytevector-s16-set!) (j2f2c core-prim . bytevector-s16-ref) (j2f2b core-prim . bytevector-s16-native-set!) (j2f2a core-prim . bytevector-s16-native-ref) (j2f29 core-prim . bytevector-length) (j2f28 core-prim . bytevector-ieee-single-ref) (j2f27 core-prim . bytevector-ieee-single-set!) (j2f26 core-prim . bytevector-ieee-single-native-set!) (j2f25 core-prim . bytevector-ieee-single-native-ref) (j2f24 core-prim . bytevector-ieee-double-set!) (j2f23 core-prim . bytevector-ieee-double-ref) (j2f22 core-prim . bytevector-ieee-double-native-set!) (j2f21 core-prim . bytevector-ieee-double-native-ref) (j2f20 core-prim . bytevector-fill!) (j2f1f core-prim . bytevector-copy!) (j2f1e core-prim . bytevector-copy) (j2f1d core-prim . bytevector->uint-list) (j2f1c core-prim . bytevector->u8-list) (j2f1b core-prim . bytevector->sint-list) (j2b23 core-prim . no-nans-violation?) (j2b0e core-prim . no-infinities-violation?) (j2b21 core-prim . make-no-nans-violation) (j2b0c core-prim . make-no-infinities-violation) (j2f1a core-prim . real->flonum) (j2f19 core-prim . flzero?) (j2f18 core-prim . fltruncate) (j2f17 core-prim . fltan) (j2f16 core-prim . flsqrt) (j2f15 core-prim . flsin) (j2f14 core-prim . flround) (j2f13 core-prim . flpositive?) (j2f12 core-prim . flonum?) (j2f11 core-prim . flodd?) (j2f10 core-prim . flnumerator) (j2f0f core-prim . flnegative?) (j2f0e core-prim . flnan?) (j2f0d core-prim . flmod0) (j2f0c core-prim . flmod) (j2f0b core-prim . flmin) (j2f0a core-prim . flmax) (j2f09 core-prim . fllog) (j2f08 core-prim . flinteger?) (j2f07 core-prim . flinfinite?) (j2f06 core-prim . flfloor) (j2f05 core-prim . flfinite?) (j2f04 core-prim . flexpt) (j2f03 core-prim . flexp) (j2f02 core-prim . fleven?) (j2f01 core-prim . fldiv0-and-mod0) (j2f00 core-prim . fldiv0) (j2eff core-prim . fldiv-and-mod) (j2efe core-prim . fldiv) (j2efd core-prim . fldenominator) (j2efc core-prim . flcos) (j2efb core-prim . flceiling) (j2efa core-prim . flatan) (j2ef9 core-prim . flasin) (j2ef8 core-prim . flacos) (j2ef7 core-prim . flabs) (j2ef6 core-prim . fl>?) (j2ef5 core-prim . fl>=?) (j2ef4 core-prim . fl=?) (j2ef3 core-prim . fl<?) (j2ef2 core-prim . fl<=?) (j2ef1 core-prim . fl/) (j2ef0 core-prim . fl-) (j2eef core-prim . fl+) (j2eee core-prim . fl*) (j2eed core-prim . fixnum->flonum) (j2eec core-prim . fxzero?) (j2eeb core-prim . fxxor) (j2eea core-prim . fxrotate-bit-field) (j2ee9 core-prim . fxreverse-bit-field) (j2ee8 core-prim . fxpositive?) (j2ee7 core-prim . fxodd?) (j2ee6 core-prim . fxnot) (j2ee5 core-prim . fxnegative?) (j2ee4 core-prim . fxmod0) (j2ee3 core-prim . fxmod) (j2ee2 core-prim . fxmin) (j2ee1 core-prim . fxmax) (j2ee0 core-prim . fxlength) (j2edf core-prim . fxior) (j2ede core-prim . fxif) (j2edd core-prim . fxfirst-bit-set) (j2edc core-prim . fxeven?) (j2edb core-prim . fxdiv0-and-mod0) (j2eda core-prim . fxdiv0) (j2ed9 core-prim . fxdiv-and-mod) (j2ed8 core-prim . fxdiv) (j2ed7 core-prim . fxcopy-bit-field) (j2ed6 core-prim . fxcopy-bit) (j2ed5 core-prim . fxbit-set?) (j2ed4 core-prim . fxbit-field) (j2ed3 core-prim . fxbit-count) (j2ed2 core-prim . fxarithmetic-shift-right) (j2ed1 core-prim . fxarithmetic-shift-left) (j2ed0 core-prim . fxarithmetic-shift) (j2ecf core-prim . fxand) (j2ece core-prim . fx>?) (j2ecd core-prim . fx>=?) (j2ecc core-prim . fx=?) (j2ecb core-prim . fx<?) (j2eca core-prim . fx<=?) (j2ec9 core-prim . fx-/carry) (j2ec8 core-prim . fx-) (j2ec7 core-prim . fx+/carry) (j2ec6 core-prim . fx+) (j2ec5 core-prim . fx*/carry) (j2ec4 core-prim . fx*) (j2ec3 core-prim . greatest-fixnum) (j2ec2 core-prim . least-fixnum) (j2ec1 core-prim . fixnum-width) (j2ec0 core-prim . fixnum?) (j2ebf core-prim . bitwise-rotate-bit-field) (j2ebe core-prim . bitwise-reverse-bit-field) (j2ebd core-prim . bitwise-length) (j2ebc core-prim . bitwise-if) (j2ebb core-prim . bitwise-first-bit-set) (j2eba core-prim . bitwise-copy-bit-field) (j2eb9 core-prim . bitwise-copy-bit) (j2eb8 core-prim . bitwise-bit-set?) (j2eb7 core-prim . bitwise-bit-field) (j2eb6 core-prim . bitwise-bit-count) (j2eb5 core-prim . bitwise-xor) (j2eb4 core-prim . bitwise-ior) (j2eb3 core-prim . bitwise-and) (j2eb2 core-prim . bitwise-not) (j2eb1 core-prim . bitwise-arithmetic-shift-right) (j2eb0 core-prim . bitwise-arithmetic-shift-left) (j2eaf core-prim . bitwise-arithmetic-shift) (j2eae core-prim . zero?) (j2ead core-prim . vector?) (j2eac core-prim . vector-set!) (j2eab core-prim . vector-ref) (j2eaa core-prim . vector-map) (j2ea9 core-prim . vector-length) (j2ea8 core-prim . vector-for-each) (j2ea7 core-prim . vector-fill!) (j2ea6 core-prim . vector->list) (j2ea5 core-prim . vector) (j2ea4 core-prim . values) (j2ea3 core-prim . truncate) (j2ea2 core-prim . tan) (j2ea1 core-prim . symbol?) (j2ea0 core-prim . symbol=?) (j2e9f core-prim . symbol->string) (j2e9e core-prim . substring) (j2e9d core-prim . string?) (j2e9c core-prim . string>?) (j2e9b core-prim . string>=?) (j2e9a core-prim . string=?) (j2e99 core-prim . string<?) (j2e98 core-prim . string<=?) (j2e97 core-prim . string-ref) (j2e96 core-prim . string-length) (j2e95 core-prim . string-for-each) (j2e94 core-prim . string-copy) (j2e93 core-prim . string-append) (j2e92 core-prim . string->symbol) (j2e91 core-prim . string->number) (j2e90 core-prim . string->list) (j2e8f core-prim . string) (j2e8e core-prim . sqrt) (j2e8d core-prim . sin) (j2e8c core-prim . round) (j2e8b core-prim . reverse) (j2e8a core-prim . real?) (j2e89 core-prim . real-valued?) (j2e88 core-prim . real-part) (j2e87 core-prim . rationalize) (j2e86 core-prim . rational?) (j2e85 core-prim . rational-valued?) (j2e84 core-prim . procedure?) (j2e83 core-prim . positive?) (j2e82 core-prim . pair?) (j2e81 core-prim . odd?) (j2e80 core-prim . numerator) (j2e7f core-prim . number?) (j2e7e core-prim . number->string) (j2e7d core-prim . null?) (j2e7c core-prim . not) (j2e7b core-prim . negative?) (j2e7a core-prim . nan?) (j2e79 core-prim . min) (j2e78 core-prim . max) (j2e77 core-prim . map) (j2e76 core-prim . make-vector) (j2e75 core-prim . make-string) (j2e74 core-prim . make-rectangular) (j2e73 core-prim . make-polar) (j2e72 core-prim . magnitude) (j2e71 core-prim . log) (j2e70 core-prim . list?) (j2e6f core-prim . list-tail) (j2e6e core-prim . list-ref) (j2e6d core-prim . list->vector) (j2e6c core-prim . list->string) (j2e6b core-prim . list) (j2e6a core-prim . length) (j2e69 core-prim . lcm) (j2e68 core-prim . integer?) (j2e67 core-prim . integer-valued?) (j2e66 core-prim . integer->char) (j2e65 core-prim . infinite?) (j2e64 core-prim . inexact?) (j2e63 core-prim . inexact) (j2e62 core-prim . imag-part) (j2e61 core-prim . gcd) (j2e60 core-prim . for-each) (j2e5f core-prim . floor) (j2e5e core-prim . finite?) (j2e5d core-prim . expt) (j2e5c core-prim . exp) (j2e5b core-prim . exact?) (j2e5a core-prim . exact-integer-sqrt) (j2e59 core-prim . exact) (j2e58 core-prim . even?) (j2e57 core-prim . error) (j2e56 core-prim . eqv?) (j2e55 core-prim . equal?) (j2e54 core-prim . eq?) (j2e53 core-prim . dynamic-wind) (j2e52 core-prim . div0-and-mod0) (j2e51 core-prim . mod0) (j2e50 core-prim . div0) (j2e4f core-prim . div-and-mod) (j2e4e core-prim . mod) (j2e4d core-prim . div) (j2e4c core-prim . denominator) (j2e4b core-prim . cos) (j2e4a core-prim . cons) (j2e49 core-prim . complex?) (j2e48 core-prim . char?) (j2e47 core-prim . char>?) (j2e46 core-prim . char>=?) (j2e45 core-prim . char=?) (j2e44 core-prim . char<?) (j2e43 core-prim . char<=?) (j2e42 core-prim . char->integer) (j2e41 core-prim . ceiling) (j2e40 core-prim . call-with-values) (j2e3f core-prim . call/cc) (j2e3e core-prim . call-with-current-continuation) (j2e3d core-prim . cddddr) (j2e3c core-prim . cdddar) (j2e3b core-prim . cddadr) (j2e3a core-prim . cddaar) (j2e39 core-prim . cdaddr) (j2e38 core-prim . cdadar) (j2e37 core-prim . cdaadr) (j2e36 core-prim . cdaaar) (j2e35 core-prim . cadddr) (j2e34 core-prim . caddar) (j2e33 core-prim . cadadr) (j2e32 core-prim . cadaar) (j2e31 core-prim . caaddr) (j2e30 core-prim . caadar) (j2e2f core-prim . caaadr) (j2e2e core-prim . caaaar) (j2e2d core-prim . cdddr) (j2e2c core-prim . cddar) (j2e2b core-prim . cdadr) (j2e2a core-prim . cdaar) (j2e29 core-prim . caddr) (j2e28 core-prim . cadar) (j2e27 core-prim . caadr) (j2e26 core-prim . caaar) (j2e25 core-prim . cddr) (j2e24 core-prim . cdar) (j2e23 core-prim . cadr) (j2e22 core-prim . caar) (j2e21 core-prim . cdr) (j2e20 core-prim . car) (j2e1f core-prim . boolean?) (j2e1e core-prim . boolean=?) (j2e1d core-prim . atan) (j2e1c core-prim . assertion-violation) (je38 core-prim . assertion-error) (j2e1b core-prim . asin) (j2e1a core-prim . apply) (j2e19 core-prim . append) (j2e18 core-prim . angle) (j2e17 core-prim . acos) (j2e16 core-prim . abs) (j2e15 core-prim . /) (j2e14 core-prim . *) (j2e13 core-prim . -) (j2e12 core-prim . +) (j2e11 core-prim . >=) (j2e10 core-prim . >) (j2e0f core-prim . =) (j2e0e core-prim . <=) (j2e0d core-prim . <) (j2e0c core-prim . library) (j2e0b $core-rtd &no-nans-rtd &no-nans-rcd) (j2e0a $core-rtd &no-infinities-rtd &no-infinities-rcd) (j2e09 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (j2e08 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (j2e07 $core-rtd &i/o-port-rtd &i/o-port-rcd) (j2e06 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (j2e05 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (j2e04 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (j2e03 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (j2e02 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (j2e01 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (j2e00 $core-rtd &i/o-write-rtd &i/o-write-rcd) (j2dff $core-rtd &i/o-read-rtd &i/o-read-rcd) (j2dfe $core-rtd &i/o-rtd &i/o-rcd) (j2dfd $core-rtd &undefined-rtd &undefined-rcd) (j2dfc $core-rtd &syntax-rtd &syntax-rcd) (j2dfb $core-rtd &lexical-rtd &lexical-rcd) (j2dfa $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (j2df9 $core-rtd &non-continuable-rtd &non-continuable-rcd) (j2df8 $core-rtd &who-rtd &who-rcd) (j2df7 $core-rtd &irritants-rtd &irritants-rcd) (j2df6 $core-rtd &assertion-rtd &assertion-rcd) (j2df5 $core-rtd &violation-rtd &violation-rcd) (j2df4 $core-rtd &error-rtd &error-rcd) (j2df3 $core-rtd &serious-rtd &serious-rcd) (j2df2 $core-rtd &warning-rtd &warning-rcd) (j2df1 $core-rtd &message-rtd &message-rcd) (j2df0 $core-rtd &condition-rtd &condition-rcd) (j2def macro . define-condition-type) (j2dee macro . define-enumeration) (j2ded macro . define-record-type) (j2dec macro . parent-rtd) (j2deb macro . nongenerative) (j2dea macro . opaque) (j2de9 macro . sealed) (j2de8 macro . protocol) (j2de7 macro . parent) (j2de6 macro . immutable) (j2de5 macro . mutable) (j2de4 macro . fields) (j2de3 macro . error-handling-mode) (j2de2 macro . file-options) (j2de1 macro . buffer-mode) (j2de0 macro . eol-style) (j2ddf macro . guard) (j2dde macro . trace-define) (j2ddd macro . trace-lambda) (j2ddc macro . unsyntax-splicing) (j2ddb macro . unsyntax) (j2dda macro . unquote-splicing) (j2dd9 macro . unquote) (j2dd8 macro . _) (j2dd7 macro . else) (j2dd6 macro . =>) (j2dd5 macro . ...) (j2dd4 macro . assert) (j2dd3 macro . endianness) (j2dd2 macro . delay) (j2dd1 macro . time) (j2dd0 macro . do) (j2dcf macro . cond) (j2dce macro . let*) (j2dcd macro . let) (j2dcc macro . let*-values) (j2dcb macro . let-values) (j2dca macro . identifier-syntax) (j2dc9 macro . with-syntax) (j2dc8 macro . quasisyntax) (j2dc7 macro . quasiquote) (j2dc6 macro . syntax-rules) (j2dc5 macro . include) (j2dc4 macro . define-struct) (j2dc3 core-macro . record-constructor-descriptor) (j2dc2 core-macro . record-type-descriptor) (j2dc1 macro . case) (j2dc0 macro . parameterize) (j2dbf macro . unless) (j2dbe macro . when) (j2dbd core-macro . or) (j2dbc core-macro . and) (j2dbb core-macro . if) (j2dba core-macro . letrec*) (j2db9 core-macro . letrec) (j2db8 core-macro . type-descriptor) (j2db7 core-macro . case-lambda) (j2db6 core-macro . lambda) (j2db5 core-macro . syntax) (j2db4 core-macro . syntax-case) (j2db3 core-macro . quote) (j2db2 core-macro . foreign-call) (j2db1 letrec-syntax) (j2db0 let-syntax) (j2daf set!) (j2dae import) (j2dad begin) (j2dac module) (j2dab define-syntax) (j2daa define)) values values '#f '#f '#f '#f) (j983@j7cf@install-library 'j30ee '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . j30cd) (eval-core . j30cc) (set-symbol-value! . j30cb) (symbol-value . j30ca) (gensym . j30c9) (void . j30c8)) '() values values '#f '#f '#f '#f) (j983@j7cf@install-library 'j30ef '(mosh) '() '() '() '() '((set-symbol-value! . j30cb) (symbol-value . j30ca) (regexp? . j30c6) (read-line . j30c5) (ungensym . j30c3) (alist->eq-hash-table . j30c2) (assoc-ref . j30c1) (print . j30c0) (format . j30bf) (host-os . j30be) (library-path . j7ae) (standard-library-path . j30bd) (file-newer? . j30bc) (stat-mtime . j30bb) (digit->integer . j30b7) (call-with-string-input-port . j30b6) (call-with-string-io . j30b5) (string-split . j30b4) (bytevector-for-each . j30b3) (string->regexp . j30b2) (rxmatch . j30b1) (regexp-replace-all . j30b0) (hashtable-for-each . j30af) (set-current-directory! . j30aa) (expand-path . j30a9) (current-directory . j30a8) (p . j306b) (get-timeofday . j3053) (get-command-line . j3052) (sys-display . j3051) (whereis . j3050) (register . j304f) (vm-join! . j304e) (vm-set-value! . j304d) (vm? . j304c) (main-vm? . j304b) (vm-eval . j304a) (vm-self . j3049) (vm-start! . j3048) (make-vm . j3047) (mutex-try-lock! . j3046) (mutex-unlock! . j3045) (mutex-lock! . j3044) (mutex? . j3043) (make-mutex . j3042) (condition-variable-notify-all! . j3041) (condition-variable-notify! . j3040) (condition-variable-wait! . j303f) (make-condition-variable . j303e) (mosh-executable-path . j303d) (make-file-options . j303c) (source-info . j303b) (make-compiler-instruction . j303a) (make-instruction . j3039) (set-source-info! . j3038) (bignum? . j3037) (fast-equal? . j3036) (fasl-read . j3035) (fasl-write . j3034) (time-usage . j3033) (os-constant . j3032) (time . j2dd1) (include . j2dc5)) '() values values '#f '#f '#f '#f) (j983@j7cf@install-library 'j30f0 '(system) '() '() '() '() '((gensym-prefix-set! . j30c4) (write-to-file . j30ba) (file->list . j30b9) (file->string . j30b8) (mosh-cache-dir . j599) (call-process . j30ae) (local-tz-offset . j30ad) (microseconds . j30ac) (directory-list . j30ab) (expand-path . j30a9) (%spawn . j30a7) (%waitpid . j30a6) (simple-struct-name . j30a5) (simple-struct-set! . j30a4) (simple-struct-ref . j30a3) (make-simple-struct . j30a2) (simple-struct? . j30a1) (pointer-ref-c-int64 . j30a0) (pointer-ref-c-int32 . j309f) (pointer-ref-c-int16 . j309e) (pointer-ref-c-int8 . j309d) (pointer-ref-c-uint64 . j309c) (pointer-ref-c-uint32 . j309b) (pointer-ref-c-uint16 . j309a) (pointer-ref-c-uint8 . j3099) (pointer-set-c-uint64! . j3098) (pointer-set-c-uint32! . j3097) (pointer-set-c-uint16! . j3096) (pointer-set-c-uint8! . j3095) (pointer-set-c-int64! . j3094) (pointer-set-c-int32! . j3093) (pointer-set-c-int16! . j3092) (pointer-set-c-int8! . j3091) (pointer-set-c-pointer! . j3090) (pointer-set-c-double! . j308f) (pointer-set-c-float! . j308e) (pointer-set-c-long-long! . j308d) (pointer-set-c-long! . j308c) (pointer-set-c-int! . j308b) (pointer-set-c-short! . j308a) (pointer-set-c-char! . j3089) (pointer-ref-c-pointer . j3088) (pointer-ref-c-double . j3087) (pointer-ref-c-float . j3086) (pointer-ref-c-unsigned-long-long . j3085) (pointer-ref-c-signed-long-long . j3084) (pointer-ref-c-unsigned-long . j3083) (pointer-ref-c-signed-long . j3082) (pointer-ref-c-unsigned-int . j3081) (pointer-ref-c-signed-int . j3080) (pointer-ref-c-unsigned-short . j307f) (pointer-ref-c-signed-short . j307e) (pointer-ref-c-unsigned-char . j307d) (pointer-ref-c-signed-char . j307c) (pointer->integer . j307b) (integer->pointer . j307a) (pointer? . j3079) (shared-errno . j3078) (%ffi-supported? . j3077) (%ffi-pointer->string . j3076) (%ffi-call->string-or-zero . j3075) (%ffi-call->double . j3074) (%ffi-call->void* . j3073) (%ffi-call->void . j3072) (%ffi-call->char . j3071) (%ffi-call->int . j3070) (%ffi-lookup . j306f) (%ffi-open . j306e) (%fork . j306d) (%pipe . j306c) (open-output-string . j306a) (get-output-string . j3069) (file-stat-ctime . j3068) (file-stat-atime . j3067) (file-stat-mtime . j3066) (file-size-in-bytes . j3065) (file-writable? . j3064) (file-executable? . j3063) (file-readable? . j3062) (file-regular? . j3061) (file-symbolic-link? . j3060) (file-directory? . j305f) (create-symbolic-link . j305e) (rename-file . j305d) (delete-directory . j305c) (create-directory . j305b) (create-mosh-cache-dir . j305a) (get-environment-variables . j3059) (get-environment-variable . j3058) (join-wraps . j3057) (id->real-label . j3056) (same-marks? . j3055) (same-marks*? . j3054) (make-parameter . j597) (socket-port . j3031) (socket-shutdown . j3030) (socket-close . j302f) (socket-send . j302e) (socket-recv! . j302d) (socket-recv . j302c) (make-server-socket . j302b) (make-client-socket . j302a) (socket-accept . j3029) (socket? . j3028) (parameterize . j2dc0)) '() values values '#f '#f '#f '#f))
((lambda (j2c1d@add-library-path! j2c1f@parse-and-add-library-path j2c21@for-each-with-index j2c23@rpad j2c25@condition-printer j2c27@record->field-alist j2c29@map-with-index j2c2b@repl j2c2d@trace-printer j2c2f@command-line j2c31@local-library-path j2c33@load/args j2c35@load j2c37@ironscheme-build j2c39@eval-top-level j2c3b@compile-system-libraries j2c3d@compile j2c3f@compile->closure j2c41@pre-compile-r6rs-file j2c43@load-r6rs-top-level j2c45@load-r6rs-top-level-sexp j2c47@prefix-inc j2c49@prefix-inc!) (begin (set! j2c1d@add-library-path! (lambda (j2c82@path) (j973@j7af@library-path (append (j973@j7af@library-path) (list j2c82@path))))) (set! j2c1f@parse-and-add-library-path (lambda (j2c84@paths j2c85@message) ((lambda (j2c88@t) (if j2c88@t ((lambda (j2c8a@paths) (for-each (lambda (j2c8c@path) (if (file-exists? j2c8c@path) (j2c1d@add-library-path! (expand-path j2c8c@path)) (format (current-error-port) j2c85@message j2c8c@path))) (string-split j2c8a@paths '#\:))) j2c88@t) (void))) j2c84@paths))) (set! j2c21@for-each-with-index (lambda (j2c8e@proc j2c8f@lst) (letrec ((j2c92@loop (lambda (j2c94@i j2c95@lst) (if (null? j2c95@lst) (if '#f '#f (void)) (begin (j2c8e@proc j2c94@i (car j2c95@lst)) (j2c92@loop (+ j2c94@i '1) (cdr j2c95@lst))))))) (j2c92@loop '1 j2c8f@lst)))) (set! j2c23@rpad (lambda (j2c98@str j2c99@pad j2c9a@n) ((lambda (j2c9e@rest) ((letrec ((j2ca0@loop (lambda (j2ca2@rest j2ca3@ret) (if (<= j2ca2@rest '0) j2ca3@ret (j2ca0@loop (- j2ca2@rest '1) (string-append j2ca3@ret j2c99@pad)))))) j2ca0@loop) j2c9e@rest (format '"~a" j2c98@str))) (- j2c9a@n (string-length (format '"~a" j2c98@str)))))) (set! j2c25@condition-printer (lambda (j2ca6@e j2ca7@port) ((lambda (j2cab@max-condition-len) (begin (set! j2cab@max-condition-len (apply max (map (lambda (j2cbc@c) (string-length (symbol->string (record-type-name (record-rtd j2cbc@c))))) (simple-conditions j2ca6@e)))) (begin (display '" Condition components:\n" j2ca7@port) (j2c21@for-each-with-index (lambda (j2cac@i j2cad@x) ((lambda (j2cb0@rtd j2cb1@fields-alist) (begin (format j2ca7@port '" ~d. ~a" j2cac@i (j2c23@rpad (symbol->string (record-type-name j2cb0@rtd)) '" " j2cab@max-condition-len)) (if (null? j2cb1@fields-alist) (newline j2ca7@port) (void)) ((letrec ((j2cb4@loop (lambda (j2cb6@first j2cb7@fields-alist) (if (null? j2cb7@fields-alist) '() ((lambda (j2cba@field) (begin (if (not j2cb6@first) (display (j2c23@rpad '"" '" " (+ '4 j2cab@max-condition-len)) j2ca7@port) (void)) (display '"       " j2ca7@port) (display (car j2cba@field) j2ca7@port) (display '": " j2ca7@port) (write (cdr j2cba@field) j2ca7@port) (newline j2ca7@port) (j2cb4@loop '#f (cdr j2cb7@fields-alist)))) (car j2cb7@fields-alist)))))) j2cb4@loop) '#t j2cb1@fields-alist))) (record-rtd j2cad@x) (j2c27@record->field-alist j2cad@x))) (simple-conditions j2ca6@e))))) '#f))) (set! j2c27@record->field-alist (lambda (j2cbe@r) ((lambda (j2cc1@ref) (begin (set! j2cc1@ref (lambda (j2ccc@rtd j2ccd@i j2cce@x) ((lambda (j2cd2@val) (if (symbol? j2cd2@val) (ungensym j2cd2@val) j2cd2@val)) ((record-accessor j2ccc@rtd j2ccd@i) j2cce@x)))) ((letrec ((j2cc2@loop (lambda (j2cc4@ret j2cc5@rtd) (if j2cc5@rtd (j2cc2@loop (append j2cc4@ret (j2c29@map-with-index (lambda (j2cc8@i j2cc9@field) (cons j2cc9@field (j2cc1@ref j2cc5@rtd j2cc8@i j2cbe@r))) (vector->list (record-type-field-names j2cc5@rtd)))) (record-type-parent j2cc5@rtd)) j2cc4@ret)))) j2cc2@loop) '() (record-rtd j2cbe@r)))) '#f))) (set! j2c29@map-with-index (lambda (j2cd4@proc j2cd5@lst) ((letrec ((j2cd8@loop (lambda (j2cda@i j2cdb@lst j2cdc@ret) (if (null? j2cdb@lst) (reverse j2cdc@ret) (j2cd8@loop (+ j2cda@i '1) (cdr j2cdb@lst) (cons (j2cd4@proc j2cda@i (car j2cdb@lst)) j2cdc@ret)))))) j2cd8@loop) '0 j2cd5@lst '()))) (set! j2c2b@repl (lambda j2ce0@x ((lambda (j2ce3@rec) (begin (set! j2ce3@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (j2ce6@j2ce4) (lambda () (with-exception-handler (lambda (j2ce8@e) ((call/cc (lambda (j2cea@j2ce5) (j2ce6@j2ce4 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? j2ce8@e) (j2c25@condition-printer j2ce8@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" j2ce8@e))) (j2cea@j2ce5 (lambda () (raise-continuable j2ce8@e)))))))))) (lambda () ((letrec ((j2cec@loop (lambda (j2cee@line j2cef@accum) ((lambda (j2cf3@parentheses-ok? j2cf5@eval-string-print) (begin (set! j2cf3@parentheses-ok? (lambda (j2cfa@text) ((letrec ((j2cfc@loop (lambda (j2cfe@chars j2cff@p0 j2d00@p1) (if (null? j2cfe@chars) (= '0 j2cff@p0 j2d00@p1) ((lambda (j2d04@t) (if (memv j2d04@t '(#\()) (j2cfc@loop (cdr j2cfe@chars) (+ j2cff@p0 '1) j2d00@p1) (if (memv j2d04@t '(#\))) (j2cfc@loop (cdr j2cfe@chars) (- j2cff@p0 '1) j2d00@p1) (if (memv j2d04@t '(#\[)) (j2cfc@loop (cdr j2cfe@chars) j2cff@p0 (+ j2d00@p1 '1)) (if (memv j2d04@t '(#\])) (j2cfc@loop (cdr j2cfe@chars) j2cff@p0 (- j2d00@p1 '1)) (j2cfc@loop (cdr j2cfe@chars) j2cff@p0 j2d00@p1)))))) (car j2cfe@chars)))))) j2cfc@loop) (string->list j2cfa@text) '0 '0))) (set! j2cf5@eval-string-print (lambda (j2cf8@text) (if (not (or (string=? '"\n" j2cf8@text) (= '0 (string-length j2cf8@text)))) (write (j2c39@eval-top-level (call-with-port (open-string-input-port j2cf8@text) read))) (void)))) (if (eof-object? j2cee@line) (begin (j2cf5@eval-string-print j2cef@accum) (exit)) ((lambda (j2cf6@current) (if (j2cf3@parentheses-ok? j2cf6@current) (j2cf5@eval-string-print j2cf6@current) (j2cec@loop (get-line (current-input-port)) j2cf6@current))) (string-append j2cef@accum j2cee@line))))) '#f '#f)))) j2cec@loop) (get-line (current-input-port)) '""))))))) (newline) (j2ce3@rec)))) (j2ce3@rec))) '#f))) (set! j2c2d@trace-printer (j6b9@j598@make-parameter write)) (set! j2c2f@command-line (j6b9@j598@make-parameter (get-command-line))) (set! j2c31@local-library-path (lambda (j2d06@filename) (j973@j7af@library-path))) (set! j2c33@load/args (lambda (j2d08@filename . j2d0a@args) (begin (apply j2c43@load-r6rs-top-level j2d08@filename 'load j2d0a@args) (void)))) (set! j2c35@load (lambda (j2d0c@filename) (begin (apply j2c43@load-r6rs-top-level j2d0c@filename 'load (j2c2f@command-line)) (void)))) (set! j2c37@ironscheme-build (lambda () (j2c35@load '"ironscheme-buildscript.ss"))) (set! j2c39@eval-top-level (lambda (j2d0e@x) (j2844@je1f@eval j2d0e@x (j285a@je4b@interaction-environment)))) (set! j2c3b@compile-system-libraries (lambda () (j2c39@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! j2c3d@compile (lambda (j2d10@filename) (j2c43@load-r6rs-top-level j2d10@filename 'compile))) (set! j2c3f@compile->closure (lambda (j2d12@filename) (j2c43@load-r6rs-top-level j2d12@filename 'closure))) (set! j2c41@pre-compile-r6rs-file (lambda (j2d14@filename) (j2c43@load-r6rs-top-level j2d14@filename 'compile))) (set! j2c43@load-r6rs-top-level (lambda (j2d16@filename j2d17@how . j2d1a@args) ((lambda (j2d20@j2d1d j2d21@j2d1f) ((lambda (j2d24@swap) (dynamic-wind j2d24@swap (lambda () ((lambda (j2d26@x*) ((lambda (j2d28@t) (if (memv j2d28@t '(closure)) (j2859@je49@pre-compile-r6rs-top-level j2d26@x*) (if (memv j2d28@t '(load)) ((lambda (j2d32@j2d2b j2d33@j2d2d j2d34@j2d2f j2d35@j2d31) ((lambda (j2d3a@swap) (dynamic-wind j2d3a@swap (lambda () (begin (if (j6ba@j59a@mosh-cache-dir) (gensym-prefix-set! (j2c49@prefix-inc! (string-append (j6ba@j59a@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (j2d3c@file) ((call/cc (lambda (j2d40@j2d3e) (lambda () (with-exception-handler (lambda (j2d42@c) ((call/cc (lambda (j2d44@j2d3f) (j2d40@j2d3e (lambda () (if '#t '#t (j2d44@j2d3f (lambda () (raise-continuable j2d42@c)))))))))) (lambda () (delete-file (string-append (j6ba@j59a@mosh-cache-dir) '"/" j2d3c@file))))))))) (directory-list (j6ba@j59a@mosh-cache-dir))) (void)) ((lambda (j2d46@compiled) (begin (if (and (j6ba@j59a@mosh-cache-dir) (not (symbol-value '%disable-acc))) (j977@j7b7@serialize-all j6b4@j58e@serialize-library j710@j6c9@compile-core-expr) (void)) (j2d46@compiled))) (j2858@je47@compile-r6rs-top-level j2d26@x*)))) j2d3a@swap)) (lambda () (begin ((lambda (j2d48@t) (begin (j2d32@j2d2b j2d34@j2d2f) (set! j2d34@j2d2f j2d48@t))) (j2d32@j2d2b)) ((lambda (j2d4a@t) (begin (j2d33@j2d2d j2d35@j2d31) (set! j2d35@j2d31 j2d4a@t))) (j2d33@j2d2d)))))) j2c2f@command-line j6ba@j59a@mosh-cache-dir (cons j2d16@filename (car j2d1a@args)) (create-mosh-cache-dir)) (if (memv j2d28@t '(compile)) (begin (j2858@je47@compile-r6rs-top-level j2d26@x*) (j977@j7b7@serialize-all j6b4@j58e@serialize-library j710@j6c9@compile-core-expr)) (if '#f '#f (void)))))) j2d17@how)) (with-input-from-file j2d16@filename (lambda () ((letrec ((j2d4c@f (lambda () ((lambda (j2d4e@x) (if (eof-object? j2d4e@x) '() (cons j2d4e@x (j2d4c@f)))) (j6ac@j57e@read-annotated))))) j2d4c@f)))))) j2d24@swap)) (lambda () ((lambda (j2d50@t) (begin (j2d20@j2d1d j2d21@j2d1f) (set! j2d21@j2d1f j2d50@t))) (j2d20@j2d1d))))) j973@j7af@library-path (j2c31@local-library-path j2d16@filename)))) (set! j2c45@load-r6rs-top-level-sexp (lambda (j2d52@import-spec j2d53@thunk) ((lambda (j2d5e@j2d57 j2d5f@j2d59 j2d60@j2d5b j2d61@j2d5d) ((lambda (j2d66@swap) (dynamic-wind j2d66@swap (lambda () (begin (if (j6ba@j59a@mosh-cache-dir) (gensym-prefix-set! (j2c49@prefix-inc! (string-append (j6ba@j59a@mosh-cache-dir) '"/prefix.txt"))) (void)) ((lambda (j2d6c@j2d69 j2d6d@j2d6b) ((lambda (j2d70@swap) (dynamic-wind j2d70@swap (lambda () ((j2858@je47@compile-r6rs-top-level (list (cons 'import j2d52@import-spec) (list j2d53@thunk))))) j2d70@swap)) (lambda () ((lambda (j2d72@t) (begin (j2d6c@j2d69 j2d6d@j2d6b) (set! j2d6d@j2d6b j2d72@t))) (j2d6c@j2d69))))) j2c2f@command-line '()))) j2d66@swap)) (lambda () (begin ((lambda (j2d74@t) (begin (j2d5e@j2d57 j2d60@j2d5b) (set! j2d60@j2d5b j2d74@t))) (j2d5e@j2d57)) ((lambda (j2d76@t) (begin (j2d5f@j2d59 j2d61@j2d5d) (set! j2d61@j2d5d j2d76@t))) (j2d5f@j2d59)))))) j973@j7af@library-path j6ba@j59a@mosh-cache-dir (j2c31@local-library-path '"") (create-mosh-cache-dir)))) (set! j2c47@prefix-inc (lambda (j2d78@prefix-string) ((lambda (j2d7a@prefix) ((lambda (j2d7c@len) ((lambda () ((letrec ((j2d7e@loop (lambda (j2d80@i j2d81@carry? j2d82@accum) (if (< j2d80@i '0) (string->symbol (list->string (if j2d81@carry? (cons '#\a j2d82@accum) j2d82@accum))) (if j2d81@carry? ((lambda (j2d86@next-integer) (if (= j2d86@next-integer '123) (j2d7e@loop (- j2d80@i '1) '#f (cons '#\A j2d82@accum)) (if (= j2d86@next-integer '91) (j2d7e@loop (- j2d80@i '1) '#t (cons '#\a j2d82@accum)) (j2d7e@loop (- j2d80@i '1) '#f (cons (integer->char j2d86@next-integer) j2d82@accum))))) (+ '1 (char->integer (string-ref j2d7a@prefix j2d80@i)))) (j2d7e@loop (- j2d80@i '1) '#f (cons (string-ref j2d7a@prefix j2d80@i) j2d82@accum))))))) j2d7e@loop) (- j2d7c@len '1) '#t '())))) (string-length j2d7a@prefix))) (symbol->string j2d78@prefix-string)))) (set! j2c49@prefix-inc! (lambda (j2d88@file) (begin (if (not (file-exists? j2d88@file)) (call-with-output-file j2d88@file (lambda (j2d8a@port) (write 'd j2d8a@port))) (void)) ((lambda (j2d8c@prefix) ((lambda (j2d8e@next-prefix) ((lambda () (begin (call-with-port (open-file-output-port j2d88@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (j2d90@port) (write j2d8e@next-prefix j2d90@port))) j2d8c@prefix)))) (j2c47@prefix-inc j2d8c@prefix))) (call-with-input-file j2d88@file read))))) (begin (set! j2da8@j2c49@prefix-inc! j2c49@prefix-inc!) (set! j2da7@j2c47@prefix-inc j2c47@prefix-inc) (set! j2da6@j2c45@load-r6rs-top-level-sexp j2c45@load-r6rs-top-level-sexp) (set! j2da5@j2c43@load-r6rs-top-level j2c43@load-r6rs-top-level) (set! j2da4@j2c41@pre-compile-r6rs-file j2c41@pre-compile-r6rs-file) (set! j2da3@j2c3f@compile->closure j2c3f@compile->closure) (set! j2da2@j2c3d@compile j2c3d@compile) (set! j2da1@j2c3b@compile-system-libraries j2c3b@compile-system-libraries) (set! j2da0@j2c39@eval-top-level j2c39@eval-top-level) (set! j2d9f@j2c37@ironscheme-build j2c37@ironscheme-build) (set! j2d9e@j2c35@load j2c35@load) (set! j2d9d@j2c33@load/args j2c33@load/args) (set! j2d9c@j2c31@local-library-path j2c31@local-library-path) (set! j2d9b@j2c2f@command-line j2c2f@command-line) (set! j2d9a@j2c2d@trace-printer j2c2d@trace-printer) (set! j2d99@j2c2b@repl j2c2b@repl) (set! j2d98@j2c29@map-with-index j2c29@map-with-index) (set! j2d97@j2c27@record->field-alist j2c27@record->field-alist) (set! j2d96@j2c25@condition-printer j2c25@condition-printer) (set! j2d95@j2c23@rpad j2c23@rpad) (set! j2d94@j2c21@for-each-with-index j2c21@for-each-with-index) (set! j2d93@j2c1f@parse-and-add-library-path j2c1f@parse-and-add-library-path) (set! j2d92@j2c1d@add-library-path! j2c1d@add-library-path!) (j978@j7b9@current-precompiled-library-loader j6b5@j590@load-serialized-library) (set-symbol-value! 'load j2c35@load) (set-symbol-value! 'pre-compile-r6rs-file j2c41@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs j2c39@eval-top-level) (set-symbol-value! 'int-env-syms j283b@je0d@interaction-environment-symbols) (set-symbol-value! 'expanded2core j70f@j6c7@expanded->core) (set-symbol-value! 'trace-printer j2c2d@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (j2c4a@c) (condition (j2b7a@j2984@make-non-continuable-violation) (j2b70@j296b@make-who-condition 'raise) (j2b34@j28cc@make-message-condition '"returned from non-continuable exception") (j2b66@j2950@make-irritants-condition (list j2c4a@c))))) (j2c1f@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (j2c1f@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (j2c1d@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (j2c1d@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (j2c1d@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) ((lambda (j2c4c@prefix) (j974@j7b1@library-extensions (j2c4c@prefix '".mosh" (j974@j7b1@library-extensions)))) (lambda (j2c4e@ext j2c4f@ls) (append (map (lambda (j2c52@x) (string-append j2c4e@ext j2c52@x)) j2c4f@ls) j2c4f@ls))) ((lambda (j2c54@args j2c55@port) ((lambda (j2c59@ref) (begin (set! j2c59@ref (lambda (j2c7a@rtd j2c7b@i j2c7c@x) ((lambda (j2c80@val) (if (symbol? j2c80@val) (ungensym j2c80@val) j2c80@val)) ((record-accessor j2c7a@rtd j2c7b@i) j2c7c@x)))) (with-exception-handler (lambda (j2c5a@c) (if (condition? j2c5a@c) (j2c25@condition-printer j2c5a@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" j2c5a@c))) (lambda () (if ((call/cc (lambda (j2c5e@j2c5c) (lambda () (with-exception-handler (lambda (j2c60@c) ((call/cc (lambda (j2c62@j2c5d) (j2c5e@j2c5c (lambda () (if '#t '#f (j2c62@j2c5d (lambda () (raise-continuable j2c60@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (j2c45@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? j2c54@args) ((lambda (j2c6c@j2c65 j2c6d@j2c67 j2c6e@j2c69 j2c6f@j2c6b) ((lambda (j2c74@swap) (dynamic-wind j2c74@swap (lambda () (begin (if (j6ba@j59a@mosh-cache-dir) (gensym-prefix-set! (j2c49@prefix-inc! (string-append (j6ba@j59a@mosh-cache-dir) '"/prefix.txt"))) (void)) (j2c2b@repl))) j2c74@swap)) (lambda () (begin ((lambda (j2c76@t) (begin (j2c6c@j2c65 j2c6e@j2c69) (set! j2c6e@j2c69 j2c76@t))) (j2c6c@j2c65)) ((lambda (j2c78@t) (begin (j2c6d@j2c67 j2c6f@j2c6b) (set! j2c6f@j2c6b j2c78@t))) (j2c6d@j2c67)))))) j2c2f@command-line j6ba@j59a@mosh-cache-dir '() (create-mosh-cache-dir)) (j2c43@load-r6rs-top-level (car j2c54@args) 'load (cdr j2c54@args)))))))) '#f)) (j2c2f@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
