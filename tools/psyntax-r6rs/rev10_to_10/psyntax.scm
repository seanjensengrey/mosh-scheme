;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (k908@make-gensym-counter k910@gen-sym-prefix k912@gen-sym-counter k914@gensym k916@read-annotated k918@annotation-stripped k920@annotation? k922@annotation-source k924@annotation-expression k926@scm->fasl k928@fasl-save k930@fasl-load k932@serialize-library k934@load-serialized-library k936@make-record-printer k938@compile-core k940@read-library-source-file k942@make-parameter k1042@file-options-spec) (begin (set! k908@make-gensym-counter (lambda (k1043@i) ((lambda (k1046@inc) (begin (set! k1046@inc (lambda () (begin (set! k1043@i (+ k1043@i '1)) k1043@i))) k1046@inc)) '#f))) (set! k910@gen-sym-prefix ((lambda (k1047@v) (if k1047@v (string->symbol k1047@v) 'A)) (get-environment-variable '"MOSH_GENSYM_PREFIX"))) (set! k912@gen-sym-counter (k908@make-gensym-counter '0)) (set! k914@gensym (lambda k1049@x (string->symbol (if (null? k1049@x) (format '"~a~a" k910@gen-sym-prefix (k912@gen-sym-counter)) (format '"~a~a@~a" k910@gen-sym-prefix (k912@gen-sym-counter) (car k1049@x)))))) (set! k916@read-annotated read) (set! k918@annotation-stripped (lambda (k1051@x) (k924@annotation-expression k1051@x))) (set! k920@annotation? (lambda (k1053@x) (source-info k1053@x))) (set! k922@annotation-source (lambda (k1055@x) (source-info k1055@x))) (set! k924@annotation-expression (lambda (k1057@x) (if (pair? k1057@x) (cons (car k1057@x) (cdr k1057@x)) (display '"line:46\n")))) (set! k926@scm->fasl (lambda (k1059@filename) (string-append k1059@filename '".fasl"))) (set! k928@fasl-save (lambda (k1061@filename k1062@obj) (call-with-port (open-file-output-port k1061@filename) (lambda (k1065@port) ((symbol-value 'fasl-write!) k1062@obj k1065@port))))) (set! k930@fasl-load (lambda (k1067@filename) (call-with-port (open-file-input-port k1067@filename) (symbol-value 'fasl-read!)))) (set! k932@serialize-library (lambda (k1069@filename k1070@obj) (begin (format '#t '"serialize-library ~a\n..." k1069@filename) ((lambda (k1073@expanded2core) ((lambda (k1075@compile) ((lambda (k1077@code) ((lambda (k1079@pivot) ((lambda (k1081@visit) ((lambda () (begin (set-car! k1079@pivot k1081@visit) ((lambda (k1083@pivot) ((lambda (k1085@invoke) ((lambda () (set-car! k1083@pivot k1085@invoke)))) (k1075@compile (k1073@expanded2core (car k1083@pivot))))) (cdr k1079@pivot)))))) (k1075@compile (k1073@expanded2core (car k1079@pivot))))) (cddddr (cddddr k1077@code)))) k1070@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (k1087@fasl-file) (begin (if (file-exists? k1087@fasl-file) (delete-file k1087@fasl-file) (void)) ((call/cc (lambda (k1091@k1089) (lambda () (with-exception-handler (lambda (k1093@c) ((call/cc (lambda (k1095@k1090) (k1091@k1089 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " k1069@filename) (if (file-exists? k1087@fasl-file) (delete-file k1087@fasl-file) (void)) '#f) (k1095@k1090 (lambda () (raise-continuable k1093@c)))))))))) (lambda () (begin (k928@fasl-save k1087@fasl-file k1070@obj) (display '"OK\n")))))))))) (k926@scm->fasl k1069@filename))))) (set! k934@load-serialized-library (lambda (k1097@filename k1098@obj) ((lambda (k1101@fasl-file) (if (and (file-exists? k1101@fasl-file) ((symbol-value 'file-newer?) k1101@fasl-file k1097@filename)) ((lambda (k1103@expanded2core) ((lambda (k1105@eval-compiled-core) ((lambda (k1107@code) ((lambda (k1109@pivot) ((lambda (k1111@visit) ((lambda (k1113@visit-proc) ((lambda () (begin (set-car! k1109@pivot k1113@visit-proc) ((lambda (k1115@pivot) ((lambda (k1117@invoke) ((lambda () (begin (set-car! k1115@pivot (lambda () (k1105@eval-compiled-core k1117@invoke))) (apply k1098@obj k1107@code))))) (car k1115@pivot))) (cdr k1109@pivot)) '#t)))) (lambda () (k1105@eval-compiled-core k1111@visit)))) (car k1109@pivot))) (cddddr (cddddr k1107@code)))) (k930@fasl-load k1101@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (k926@scm->fasl k1097@filename)))) (set! k936@make-record-printer (lambda (k1119@name k1120@printer) (lambda k1123@x (begin (display '"record printer") (for-each display k1123@x))))) (set! k938@compile-core (lambda k1125@x (apply error 'comile-core '"not implementated" k1125@x))) (set! k940@read-library-source-file (lambda (k1127@file-name) (with-input-from-file k1127@file-name k916@read-annotated))) (set! k942@make-parameter (lambda k1143 ((lambda (k1144) (if (= k1144 '1) (apply (lambda (k1129@x) (k942@make-parameter k1129@x (lambda (k1131@x) k1131@x))) k1143) (if (= k1144 '2) (apply (lambda (k1133@x k1134@fender) ((lambda (k1137@x) (lambda k1141 ((lambda (k1142) (if (= k1142 '0) (apply (lambda () k1137@x) k1141) (if (= k1142 '1) (apply (lambda (k1139@v) (set! k1137@x (k1134@fender k1139@v))) k1141) (error 'apply '"invalid arg count")))) (length k1141)))) (k1134@fender k1133@x))) k1143) (error 'apply '"invalid arg count")))) (length k1143)))) (set! k1042@file-options-spec (lambda (k1145@x) k1145@x)) (begin (set! k1165@k1042@file-options-spec k1042@file-options-spec) (set! k1164@k942@make-parameter k942@make-parameter) (set! k1163@k940@read-library-source-file k940@read-library-source-file) (set! k1162@k938@compile-core k938@compile-core) (set! k1161@k936@make-record-printer k936@make-record-printer) (set! k1160@k934@load-serialized-library k934@load-serialized-library) (set! k1159@k932@serialize-library k932@serialize-library) (set! k1158@k930@fasl-load k930@fasl-load) (set! k1157@k928@fasl-save k928@fasl-save) (set! k1156@k926@scm->fasl k926@scm->fasl) (set! k1155@k924@annotation-expression k924@annotation-expression) (set! k1154@k922@annotation-source k922@annotation-source) (set! k1153@k920@annotation? k920@annotation?) (set! k1152@k918@annotation-stripped k918@annotation-stripped) (set! k1151@k916@read-annotated k916@read-annotated) (set! k1150@k914@gensym k914@gensym) (set! k1149@k912@gen-sym-counter k912@gen-sym-counter) (set! k1148@k910@gen-sym-prefix k910@gen-sym-prefix) (set! k1147@k908@make-gensym-counter k908@make-gensym-counter)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (k1170@current-primitive-locations k1172@mutable? k1174@rewriter k1176@expanded->core k1178@compile-core-expr k1180@pretty-print k1182@compile-core-expr-to-port) (begin (set! k1170@current-primitive-locations (k1164@k942@make-parameter (lambda (k1183@x) '#f) (lambda (k1185@p) k1185@p))) (set! k1172@mutable? (lambda (k1187@x) (or (pair? k1187@x) (vector? k1187@x) (hashtable? k1187@x)))) (set! k1174@rewriter (lambda (k1189@quote-hack?) ((lambda (k1192@f) (begin (set! k1192@f (lambda (k1193@x) (if (pair? k1193@x) ((lambda (k1195@t) (if (memv k1195@t '(quote)) (if (and k1189@quote-hack? (k1172@mutable? (cadr k1193@x))) ((lambda (k1197@g) (begin (set-symbol-value! k1197@g (cadr k1193@x)) k1197@g)) (k1150@k914@gensym)) k1193@x) (if (memv k1195@t '(case-lambda)) (cons 'case-lambda (map (lambda (k1199@x) (cons (car k1199@x) (map k1192@f (cdr k1199@x)))) (cdr k1193@x))) (if (memv k1195@t '(lambda)) (cons* 'lambda (cadr k1193@x) (map k1192@f (cddr k1193@x))) (if (memv k1195@t '(letrec)) ((lambda (k1201@bindings k1202@body*) ((lambda (k1205@lhs* k1206@rhs*) (cons* 'letrec (map list k1205@lhs* (map k1192@f k1206@rhs*)) (map k1192@f k1202@body*))) (map car k1201@bindings) (map cadr k1201@bindings))) (cadr k1193@x) (cddr k1193@x)) (if (memv k1195@t '(letrec*)) ((lambda (k1209@bindings k1210@body*) ((lambda (k1213@lhs* k1214@rhs*) (cons* 'letrec* (map list k1213@lhs* (map k1192@f k1214@rhs*)) (map k1192@f k1210@body*))) (map car k1209@bindings) (map cadr k1209@bindings))) (cadr k1193@x) (cddr k1193@x)) (if (memv k1195@t '(library-letrec*)) ((lambda (k1217@name k1218@x) ((lambda (k1221@bindings k1222@body*) ((lambda (k1225@lhs* k1226@lhs** k1227@rhs*) (cons* 'library-letrec* k1217@name (map list k1225@lhs* k1226@lhs** (map k1192@f k1227@rhs*)) (map k1192@f k1222@body*))) (map car k1221@bindings) (map cadr k1221@bindings) (map caddr k1221@bindings))) (cadr k1218@x) (cddr k1218@x))) (cadr k1193@x) (cdr k1193@x)) (if (memv k1195@t '(begin)) (cons 'begin (map k1192@f (cdr k1193@x))) (if (memv k1195@t '(set!)) (list 'set! (cadr k1193@x) (k1192@f (caddr k1193@x))) (if (memv k1195@t '(primitive)) ((lambda (k1231@op) ((lambda (k1233@t) (if k1233@t ((lambda (k1235@loc) k1235@loc) k1233@t) k1231@op)) ((k1170@current-primitive-locations) k1231@op))) (cadr k1193@x)) (if (memv k1195@t '(define)) k1193@x (if (list? k1193@x) (map k1192@f k1193@x) (error 'rewrite '"invalid form ~s ~s" k1193@x (list? k1193@x)))))))))))))) (car k1193@x)) k1193@x))) k1192@f)) '#f))) (set! k1176@expanded->core (lambda (k1237@x) ((k1174@rewriter '#f) k1237@x))) (set! k1178@compile-core-expr (lambda (k1239@x) ((k1174@rewriter '#f) k1239@x))) (set! k1180@pretty-print write) (set! k1182@compile-core-expr-to-port (lambda (k1241@x k1242@p) (k1180@pretty-print ((k1174@rewriter '#f) k1241@x) k1242@p))) (begin (set! k1251@k1182@compile-core-expr-to-port k1182@compile-core-expr-to-port) (set! k1250@k1180@pretty-print k1180@pretty-print) (set! k1249@k1178@compile-core-expr k1178@compile-core-expr) (set! k1248@k1176@expanded->core k1176@expanded->core) (set! k1247@k1174@rewriter k1174@rewriter) (set! k1246@k1172@mutable? k1172@mutable?) (set! k1245@k1170@current-primitive-locations k1170@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (k1330@make-collection k1332@current-library-collection k1338@k1333 k1340@k1335 k1342@k1334 k1345@library? k1347@make-library k1349@library-id k1351@library-name k1353@library-version k1355@library-imp* k1357@library-vis* k1359@library-inv* k1361@library-subst k1363@library-env k1365@library-visit-state k1367@library-invoke-state k1369@library-visit-code k1371@library-invoke-code k1373@library-visible? k1375@library-source-file-name k1377@set-library-id! k1379@set-library-name! k1381@set-library-version! k1383@set-library-imp*! k1385@set-library-vis*! k1387@set-library-inv*! k1389@set-library-subst! k1391@set-library-env! k1393@set-library-visit-state! k1395@set-library-invoke-state! k1397@set-library-visit-code! k1399@set-library-invoke-code! k1401@set-library-visible?! k1403@set-library-source-file-name! k1405@rp k1407@find-dependencies k1409@find-library-by k1411@library-path k1413@library-extensions k1415@library-name->file-name k1417@file-locator k1419@serialize-all k1421@current-precompiled-library-loader k1423@try-load-from-file k1425@library-loader k1427@current-library-expander k1429@external-pending-libraries k1431@find-external-library k1433@find-library-by-name k1435@library-exists? k1437@find-library-by-spec/die k1439@label->binding-table k1441@install-library-record k1443@install-library k1445@imported-label->binding k1447@invoke-library k1449@visit-library k1451@invoke-library-by-spec k1453@installed-libraries k1455@library-spec) (begin (set! k1330@make-collection (lambda () ((lambda (k1456@set) ((lambda (k1459@set-cons) (begin (set! k1459@set-cons (lambda (k1464@x k1465@ls) (if (memq k1464@x k1465@ls) k1465@ls (cons k1464@x k1465@ls)))) (lambda k1462 ((lambda (k1463) (if (= k1463 '0) (apply (lambda () k1456@set) k1462) (if (= k1463 '1) (apply (lambda (k1460@x) (set! k1456@set (k1459@set-cons k1460@x k1456@set))) k1462) (error 'apply '"invalid arg count")))) (length k1462))))) '#f)) '()))) (set! k1332@current-library-collection (k1164@k942@make-parameter (k1330@make-collection) (lambda (k1468@x) (begin (if (not (procedure? k1468@x)) (assertion-violation 'current-library-collection '"not a procedure" k1468@x) (void)) k1468@x)))) (set! k1338@k1333 (make-record-type-descriptor 'library '#f 'k1336 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! k1340@k1335 '#f) (set! k1342@k1334 (make-record-constructor-descriptor k1338@k1333 '#f k1340@k1335)) (set! k1345@library? (record-predicate k1338@k1333)) (set! k1347@make-library (record-constructor k1342@k1334)) (set! k1349@library-id (record-accessor k1338@k1333 '0)) (set! k1351@library-name (record-accessor k1338@k1333 '1)) (set! k1353@library-version (record-accessor k1338@k1333 '2)) (set! k1355@library-imp* (record-accessor k1338@k1333 '3)) (set! k1357@library-vis* (record-accessor k1338@k1333 '4)) (set! k1359@library-inv* (record-accessor k1338@k1333 '5)) (set! k1361@library-subst (record-accessor k1338@k1333 '6)) (set! k1363@library-env (record-accessor k1338@k1333 '7)) (set! k1365@library-visit-state (record-accessor k1338@k1333 '8)) (set! k1367@library-invoke-state (record-accessor k1338@k1333 '9)) (set! k1369@library-visit-code (record-accessor k1338@k1333 '10)) (set! k1371@library-invoke-code (record-accessor k1338@k1333 '11)) (set! k1373@library-visible? (record-accessor k1338@k1333 '12)) (set! k1375@library-source-file-name (record-accessor k1338@k1333 '13)) (set! k1377@set-library-id! (record-mutator k1338@k1333 '0)) (set! k1379@set-library-name! (record-mutator k1338@k1333 '1)) (set! k1381@set-library-version! (record-mutator k1338@k1333 '2)) (set! k1383@set-library-imp*! (record-mutator k1338@k1333 '3)) (set! k1385@set-library-vis*! (record-mutator k1338@k1333 '4)) (set! k1387@set-library-inv*! (record-mutator k1338@k1333 '5)) (set! k1389@set-library-subst! (record-mutator k1338@k1333 '6)) (set! k1391@set-library-env! (record-mutator k1338@k1333 '7)) (set! k1393@set-library-visit-state! (record-mutator k1338@k1333 '8)) (set! k1395@set-library-invoke-state! (record-mutator k1338@k1333 '9)) (set! k1397@set-library-visit-code! (record-mutator k1338@k1333 '10)) (set! k1399@set-library-invoke-code! (record-mutator k1338@k1333 '11)) (set! k1401@set-library-visible?! (record-mutator k1338@k1333 '12)) (set! k1403@set-library-source-file-name! (record-mutator k1338@k1333 '13)) (set! k1405@rp (k1161@k936@make-record-printer 'library (lambda (k1470@x k1471@p k1472@wr) (begin (if (not (k1345@library? k1470@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (k1353@library-version k1470@x)) (k1351@library-name k1470@x) (append (k1351@library-name k1470@x) (list (k1353@library-version k1470@x))))) k1471@p))))) (set! k1407@find-dependencies (lambda (k1476@ls) (if (null? k1476@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! k1409@find-library-by (lambda (k1478@pred) ((letrec ((k1480@f (lambda (k1482@ls) (if (null? k1482@ls) '#f (if (k1478@pred (car k1482@ls)) (car k1482@ls) (k1480@f (cdr k1482@ls))))))) k1480@f) ((k1332@current-library-collection))))) (set! k1411@library-path (k1164@k942@make-parameter '(".") (lambda (k1484@x) (if (and (list? k1484@x) (for-all string? k1484@x)) (map (lambda (k1486@x) k1486@x) k1484@x) (assertion-violation 'library-path '"not a list of strings" k1484@x))))) (set! k1413@library-extensions (k1164@k942@make-parameter '(".sls" ".ss" ".scm") (lambda (k1488@x) (if (and (list? k1488@x) (for-all string? k1488@x)) (map (lambda (k1490@x) k1490@x) k1488@x) (assertion-violation 'library-extensions '"not a list of strings" k1488@x))))) (set! k1415@library-name->file-name (lambda (k1492@x) (call-with-values (lambda () (open-string-output-port)) (lambda (k1496@k1494@p k1497@k1495@extract) ((lambda (k1500@extract k1501@p) ((lambda (k1505@display-hex) (begin (set! k1505@display-hex (lambda (k1514@n) (if (<= '0 k1514@n '9) (display k1514@n k1501@p) (display (integer->char (+ (char->integer '#\a) (- k1514@n '10))) k1501@p)))) (begin ((letrec ((k1506@f (lambda (k1508@ls) (if (not (null? k1508@ls)) (begin (display '"/" k1501@p) (for-each (lambda (k1510@c) (if (or (char<=? '#\a k1510@c '#\z) (char<=? '#\A k1510@c '#\Z) (char<=? '#\0 k1510@c '#\9) (memv k1510@c '(#\- #\. #\_ #\~))) (display k1510@c k1501@p) (begin (display '"%" k1501@p) ((lambda (k1512@n) (begin (k1505@display-hex (quotient k1512@n '16)) (k1505@display-hex (remainder k1512@n '16)))) (char->integer k1510@c))))) (string->list (symbol->string (car k1508@ls)))) (k1506@f (cdr k1508@ls))) (void))))) k1506@f) k1492@x) (k1500@extract)))) '#f)) k1497@k1495@extract k1496@k1494@p))))) (set! k1417@file-locator (k1164@k942@make-parameter (lambda (k1516@x) ((lambda (k1518@str) ((letrec ((k1520@f (lambda (k1522@ls k1523@exts k1524@failed-list) (if (null? k1522@ls) ((lambda () ((lambda (k1536@k1531 k1538@k1533 k1540@k1532 k1543@k1530 k1545@make-library-resolution-condition k1547@k1528 k1549@k1529 k1551@library-resolution-condition? k1553@condition-library k1555@condition-files) (begin (set! k1536@k1531 (make-record-type-descriptor '&library-resolution k10072@k9387@&condition-rtd 'k1534 '#f '#f '#((immutable library) (immutable files)))) (set! k1538@k1533 '#f) (set! k1540@k1532 (make-record-constructor-descriptor k1536@k1531 k10073@k9389@&condition-rcd k1538@k1533)) (set! k1543@k1530 (record-predicate k1536@k1531)) (set! k1545@make-library-resolution-condition (record-constructor k1540@k1532)) (set! k1547@k1528 (record-accessor k1536@k1531 '0)) (set! k1549@k1529 (record-accessor k1536@k1531 '1)) (set! k1551@library-resolution-condition? (condition-predicate k1536@k1531)) (set! k1553@condition-library (condition-accessor k1536@k1531 k1547@k1528)) (set! k1555@condition-files (condition-accessor k1536@k1531 k1549@k1529)) (raise (condition (k10104@k9537@make-error) (k10138@k9627@make-who-condition 'expander) (k10078@k9470@make-message-condition '"cannot locate library in library-path") (k1545@make-library-resolution-condition k1516@x (reverse k1524@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? k1523@exts) (k1520@f (cdr k1522@ls) (k1413@library-extensions) k1524@failed-list) ((lambda (k1556@name) (if (file-exists? k1556@name) k1556@name (k1520@f k1522@ls (cdr k1523@exts) (cons k1556@name k1524@failed-list)))) (string-append (car k1522@ls) k1518@str (car k1523@exts)))))))) k1520@f) (k1411@library-path) (k1413@library-extensions) '())) (k1415@library-name->file-name k1516@x))) (lambda (k1558@f) (if (procedure? k1558@f) k1558@f (assertion-violation 'file-locator '"not a procedure" k1558@f))))) (set! k1419@serialize-all (lambda (k1560@serialize k1561@compile) ((lambda (k1565@library-desc) (begin (set! k1565@library-desc (lambda (k1568@x) (list (k1349@library-id k1568@x) (k1351@library-name k1568@x)))) (for-each (lambda (k1566@x) (if (k1375@library-source-file-name k1566@x) (k1560@serialize (k1375@library-source-file-name k1566@x) (list (k1349@library-id k1566@x) (k1351@library-name k1566@x) (k1353@library-version k1566@x) (map k1565@library-desc (k1355@library-imp* k1566@x)) (map k1565@library-desc (k1357@library-vis* k1566@x)) (map k1565@library-desc (k1359@library-inv* k1566@x)) (k1361@library-subst k1566@x) (k1363@library-env k1566@x) (k1561@compile (k1369@library-visit-code k1566@x)) (k1561@compile (k1371@library-invoke-code k1566@x)) (k1373@library-visible? k1566@x))) (void))) ((k1332@current-library-collection))))) '#f))) (set! k1421@current-precompiled-library-loader (k1164@k942@make-parameter (lambda (k1570@filename k1571@sk) '#f))) (set! k1423@try-load-from-file (lambda (k1574@filename) ((k1421@current-precompiled-library-loader) k1574@filename (lambda k1612 ((lambda (k1613) (if (= k1613 '11) (apply (lambda (k1576@id k1577@name k1578@ver k1579@imp* k1580@vis* k1581@inv* k1582@exp-subst k1583@exp-env k1584@visit-proc k1585@invoke-proc k1586@visible?) ((letrec ((k1598@f (lambda (k1600@deps) (if (null? k1600@deps) (begin (k1443@install-library k1576@id k1577@name k1578@ver k1579@imp* k1580@vis* k1581@inv* k1582@exp-subst k1583@exp-env k1584@visit-proc k1585@invoke-proc '#f '#f k1586@visible? '#f) '#t) ((lambda (k1602@d) ((lambda (k1604@label k1605@dname) ((lambda (k1608@l) (if (and (k1345@library? k1608@l) (eq? k1604@label (k1349@library-id k1608@l))) (k1598@f (cdr k1600@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" k1577@name k1605@dname k1574@filename k1608@l k1604@label (k1349@library-id k1608@l)) '#f))) (k1433@find-library-by-name k1605@dname))) (car k1602@d) (cadr k1602@d))) (car k1600@deps)))))) k1598@f) (append k1579@imp* k1580@vis* k1581@inv*))) k1612) (if (>= k1613 '0) (apply (lambda k1610@others '#f) k1612) (error 'apply '"invalid arg count")))) (length k1612)))))) (set! k1425@library-loader (k1164@k942@make-parameter (lambda (k1614@x) ((lambda (k1616@file-name) (if (not k1616@file-name) (assertion-violation '#f '"cannot file library" k1614@x) (or (k1423@try-load-from-file k1616@file-name) ((k1427@current-library-expander) (k1163@k940@read-library-source-file k1616@file-name) k1616@file-name (lambda (k1618@name) (if (not (fast-equal? k1618@name k1614@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (k1622@k1620@p k1623@k1621@e) ((lambda (k1626@e k1627@p) (begin (display '"expected to find library " k1627@p) (write k1614@x k1627@p) (display '" in file " k1627@p) (display k1616@file-name k1627@p) (display '", found " k1627@p) (write k1618@name k1627@p) (display '" instead" k1627@p) (k1626@e))) k1623@k1621@e k1622@k1620@p)))) (void))))))) ((k1417@file-locator) k1614@x))) (lambda (k1630@f) (if (procedure? k1630@f) k1630@f (assertion-violation 'library-locator '"not a procedure" k1630@f))))) (set! k1427@current-library-expander (k1164@k942@make-parameter (lambda (k1632@x) (assertion-violation 'library-expander '"not initialized")) (lambda (k1634@f) (if (procedure? k1634@f) k1634@f (assertion-violation 'library-expander '"not a procedure" k1634@f))))) (set! k1429@external-pending-libraries (k1164@k942@make-parameter '())) (set! k1431@find-external-library (lambda (k1636@name) (begin (if (member k1636@name (k1429@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" k1636@name) (void)) ((lambda (k1640@k1638@external-pending-libraries k1641@k1639@external-pending-libraries) ((lambda (k1644@swap) (dynamic-wind k1644@swap (lambda () (begin ((k1425@library-loader) k1636@name) (or (k1409@find-library-by (lambda (k1646@x) (fast-equal? (k1351@library-name k1646@x) k1636@name))) (assertion-violation '#f '"handling external library did not yield the correct library" k1636@name)))) k1644@swap)) (lambda () ((lambda (k1648@t) (begin (k1640@k1638@external-pending-libraries k1641@k1639@external-pending-libraries) (set! k1641@k1639@external-pending-libraries k1648@t))) (k1640@k1638@external-pending-libraries))))) k1429@external-pending-libraries (cons k1636@name (k1429@external-pending-libraries)))))) (set! k1433@find-library-by-name (lambda (k1650@name) (or (k1409@find-library-by (lambda (k1652@x) (fast-equal? (k1351@library-name k1652@x) k1650@name))) (k1431@find-external-library k1650@name)))) (set! k1435@library-exists? (lambda (k1654@name) (and (k1409@find-library-by (lambda (k1656@x) (fast-equal? (k1351@library-name k1656@x) k1654@name))) '#t))) (set! k1437@find-library-by-spec/die (lambda (k1658@spec) ((lambda (k1660@id) (or (k1409@find-library-by (lambda (k1662@x) (eq? k1660@id (k1349@library-id k1662@x)))) (assertion-violation '#f '"cannot find library with required spec" k1658@spec))) (car k1658@spec)))) (set! k1439@label->binding-table (make-eq-hashtable)) (set! k1441@install-library-record (lambda (k1664@lib) (begin ((lambda (k1666@exp-env) (for-each (lambda (k1668@x) ((lambda (k1670@label k1671@binding) ((lambda (k1674@binding) (begin (if (hashtable-ref k1439@label->binding-table k1670@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" k1670@label (hashtable-ref k1439@label->binding-table k1670@label '#f) k1674@binding) (exit)) (void)) (hashtable-set! k1439@label->binding-table k1670@label k1674@binding))) ((lambda (k1676@t) (if (memv k1676@t '(global)) (cons 'global (cons k1664@lib (cdr k1671@binding))) (if (memv k1676@t '(global-macro)) (cons 'global-macro (cons k1664@lib (cdr k1671@binding))) (if (memv k1676@t '(global-macro!)) (cons 'global-macro! (cons k1664@lib (cdr k1671@binding))) k1671@binding)))) (car k1671@binding)))) (car k1668@x) (cdr k1668@x))) k1666@exp-env)) (k1363@library-env k1664@lib)) ((k1332@current-library-collection) k1664@lib)))) (set! k1443@install-library (lambda (k1678@id k1679@name k1680@ver k1681@imp* k1682@vis* k1683@inv* k1684@exp-subst k1685@exp-env k1686@visit-proc k1687@invoke-proc k1688@visit-code k1689@invoke-code k1690@visible? k1691@source-file-name) ((lambda (k1706@imp-lib* k1707@vis-lib* k1708@inv-lib*) (begin (if (not (and (symbol? k1678@id) (list? k1679@name) (list? k1680@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" k1678@id k1679@name k1680@ver) (void)) (if (k1435@library-exists? k1679@name) (assertion-violation 'install-library '"library is already installed" k1679@name) (void)) ((lambda (k1712@lib) (k1441@install-library-record k1712@lib)) (k1347@make-library k1678@id k1679@name k1680@ver k1706@imp-lib* k1707@vis-lib* k1708@inv-lib* k1684@exp-subst k1685@exp-env k1686@visit-proc k1687@invoke-proc k1688@visit-code k1689@invoke-code k1690@visible? k1691@source-file-name)))) (map k1437@find-library-by-spec/die k1681@imp*) (map k1437@find-library-by-spec/die k1682@vis*) (map k1437@find-library-by-spec/die k1683@inv*)))) (set! k1445@imported-label->binding (lambda (k1714@lab) (hashtable-ref k1439@label->binding-table k1714@lab '#f))) (set! k1447@invoke-library (lambda (k1716@lib) ((lambda (k1718@invoke) (if (procedure? k1718@invoke) (begin (k1395@set-library-invoke-state! k1716@lib (lambda () (assertion-violation 'invoke '"circularity detected" k1716@lib))) (for-each k1447@invoke-library (k1359@library-inv* k1716@lib)) (k1395@set-library-invoke-state! k1716@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" k1716@lib))) (k1718@invoke) (k1395@set-library-invoke-state! k1716@lib '#t)) (void))) (k1367@library-invoke-state k1716@lib)))) (set! k1449@visit-library (lambda (k1720@lib) ((lambda (k1722@visit) (if (procedure? k1722@visit) (begin (k1393@set-library-visit-state! k1720@lib (lambda () (assertion-violation 'visit '"circularity detected" k1720@lib))) (for-each k1447@invoke-library (k1357@library-vis* k1720@lib)) (k1393@set-library-visit-state! k1720@lib (lambda () (assertion-violation 'invoke '"first visit did not return" k1720@lib))) (k1722@visit) (k1393@set-library-visit-state! k1720@lib '#t)) (void))) (k1365@library-visit-state k1720@lib)))) (set! k1451@invoke-library-by-spec (lambda (k1724@spec) (k1447@invoke-library (k1437@find-library-by-spec/die k1724@spec)))) (set! k1453@installed-libraries (lambda k1732 ((lambda (k1733) (if (= k1733 '1) (apply (lambda (k1726@all?) ((letrec ((k1728@f (lambda (k1730@ls) (if (null? k1730@ls) '() (if (or k1726@all? (k1373@library-visible? (car k1730@ls))) (cons (car k1730@ls) (k1728@f (cdr k1730@ls))) (k1728@f (cdr k1730@ls))))))) k1728@f) ((k1332@current-library-collection)))) k1732) (if (= k1733 '0) (apply (lambda () (k1453@installed-libraries '#f)) k1732) (error 'apply '"invalid arg count")))) (length k1732)))) (set! k1455@library-spec (lambda (k1734@x) (begin (if (not (k1345@library? k1734@x)) (assertion-violation 'library-spec '"not a library" k1734@x) (void)) (list (k1349@library-id k1734@x) (k1351@library-name k1734@x) (k1353@library-version k1734@x))))) (begin (set! k1796@k1455@library-spec k1455@library-spec) (set! k1795@k1453@installed-libraries k1453@installed-libraries) (set! k1794@k1451@invoke-library-by-spec k1451@invoke-library-by-spec) (set! k1793@k1449@visit-library k1449@visit-library) (set! k1792@k1447@invoke-library k1447@invoke-library) (set! k1791@k1445@imported-label->binding k1445@imported-label->binding) (set! k1790@k1443@install-library k1443@install-library) (set! k1789@k1441@install-library-record k1441@install-library-record) (set! k1788@k1439@label->binding-table k1439@label->binding-table) (set! k1787@k1437@find-library-by-spec/die k1437@find-library-by-spec/die) (set! k1786@k1435@library-exists? k1435@library-exists?) (set! k1785@k1433@find-library-by-name k1433@find-library-by-name) (set! k1784@k1431@find-external-library k1431@find-external-library) (set! k1783@k1429@external-pending-libraries k1429@external-pending-libraries) (set! k1782@k1427@current-library-expander k1427@current-library-expander) (set! k1781@k1425@library-loader k1425@library-loader) (set! k1780@k1423@try-load-from-file k1423@try-load-from-file) (set! k1779@k1421@current-precompiled-library-loader k1421@current-precompiled-library-loader) (set! k1778@k1419@serialize-all k1419@serialize-all) (set! k1777@k1417@file-locator k1417@file-locator) (set! k1776@k1415@library-name->file-name k1415@library-name->file-name) (set! k1775@k1413@library-extensions k1413@library-extensions) (set! k1774@k1411@library-path k1411@library-path) (set! k1773@k1409@find-library-by k1409@find-library-by) (set! k1772@k1407@find-dependencies k1407@find-dependencies) (set! k1771@k1405@rp k1405@rp) (set! k1770@k1403@set-library-source-file-name! k1403@set-library-source-file-name!) (set! k1769@k1401@set-library-visible?! k1401@set-library-visible?!) (set! k1768@k1399@set-library-invoke-code! k1399@set-library-invoke-code!) (set! k1767@k1397@set-library-visit-code! k1397@set-library-visit-code!) (set! k1766@k1395@set-library-invoke-state! k1395@set-library-invoke-state!) (set! k1765@k1393@set-library-visit-state! k1393@set-library-visit-state!) (set! k1764@k1391@set-library-env! k1391@set-library-env!) (set! k1763@k1389@set-library-subst! k1389@set-library-subst!) (set! k1762@k1387@set-library-inv*! k1387@set-library-inv*!) (set! k1761@k1385@set-library-vis*! k1385@set-library-vis*!) (set! k1760@k1383@set-library-imp*! k1383@set-library-imp*!) (set! k1759@k1381@set-library-version! k1381@set-library-version!) (set! k1758@k1379@set-library-name! k1379@set-library-name!) (set! k1757@k1377@set-library-id! k1377@set-library-id!) (set! k1756@k1375@library-source-file-name k1375@library-source-file-name) (set! k1755@k1373@library-visible? k1373@library-visible?) (set! k1754@k1371@library-invoke-code k1371@library-invoke-code) (set! k1753@k1369@library-visit-code k1369@library-visit-code) (set! k1752@k1367@library-invoke-state k1367@library-invoke-state) (set! k1751@k1365@library-visit-state k1365@library-visit-state) (set! k1750@k1363@library-env k1363@library-env) (set! k1749@k1361@library-subst k1361@library-subst) (set! k1748@k1359@library-inv* k1359@library-inv*) (set! k1747@k1357@library-vis* k1357@library-vis*) (set! k1746@k1355@library-imp* k1355@library-imp*) (set! k1745@k1353@library-version k1353@library-version) (set! k1744@k1351@library-name k1351@library-name) (set! k1743@k1349@library-id k1349@library-id) (set! k1742@k1347@make-library k1347@make-library) (set! k1741@k1345@library? k1345@library?) (set! k1740@k1342@k1334 k1342@k1334) (set! k1739@k1340@k1335 k1340@k1335) (set! k1738@k1338@k1333 k1338@k1333) (set! k1737@k1332@current-library-collection k1332@current-library-collection) (set! k1736@k1330@make-collection k1330@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (k1799@build-global-define k1912@build-lambda k1914@build-case-lambda k1916@build-let k1962@build-sequence k1964@build-void k1966@build-letrec k1968@build-letrec* k1970@build-library-letrec* k1972@build-receive) (begin (set! k1799@build-global-define (lambda (k1973@x) (k1964@build-void))) (set! k1912@build-lambda (lambda (k1975@ae k1976@vars k1977@exp) (list 'lambda k1976@vars k1977@exp))) (set! k1914@build-case-lambda (lambda (k1981@ae k1982@vars* k1983@exp*) ((lambda (k1988@build-error k1990@build-pred k1992@build-apply k1994@expand-case-lambda) (begin (set! k1988@build-error (lambda (k2041@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! k1990@build-pred (lambda (k2019@ae k2020@n k2021@vars) (call-with-values (lambda () ((letrec ((k2027@f (lambda (k2029@vars k2030@count) (if (pair? k2029@vars) (k2027@f (cdr k2029@vars) (+ k2030@count '1)) (if (null? k2029@vars) (values k2030@count '=) (values k2030@count '>=)))))) k2027@f) k2021@vars '0)) (lambda (k2033@k2025@count k2034@k2026@pred) ((lambda (k2037@pred k2038@count) (list (list 'primitive k2037@pred) k2020@n (list 'quote k2038@count))) k2034@k2026@pred k2033@k2025@count))))) (set! k1992@build-apply (lambda (k2011@ae k2012@g k2013@vars k2014@exp) (list '(primitive apply) (k1912@build-lambda k2011@ae k2013@vars k2014@exp) k2012@g))) (set! k1994@expand-case-lambda (lambda (k1995@ae k1996@vars k1997@exp*) ((lambda (k2001@g k2002@n) (list 'lambda k2001@g (k1916@build-let k1995@ae (list k2002@n) (list (list '(primitive length) k2001@g)) ((letrec ((k2005@f (lambda (k2007@vars* k2008@exp*) (if (null? k2007@vars*) (k1988@build-error k1995@ae) (list 'if (k1990@build-pred k1995@ae k2002@n (car k2007@vars*)) (k1992@build-apply k1995@ae k2001@g (car k2007@vars*) (car k2008@exp*)) (k2005@f (cdr k2007@vars*) (cdr k2008@exp*))))))) k2005@f) k1982@vars* k1997@exp*)))) (k1150@k914@gensym) (k1150@k914@gensym)))) (if (= (length k1983@exp*) '1) (k1912@build-lambda k1981@ae (car k1982@vars*) (car k1983@exp*)) (k1994@expand-case-lambda k1981@ae k1982@vars* k1983@exp*)))) '#f '#f '#f '#f))) (set! k1916@build-let (lambda (k2043@ae k2044@lhs* k2045@rhs* k2046@body) (cons (k1912@build-lambda k2043@ae k2044@lhs* k2046@body) k2045@rhs*))) (set! k1962@build-sequence (lambda (k2051@ae k2052@exps) ((letrec ((k2055@loop (lambda (k2057@exps) (if (null? (cdr k2057@exps)) (car k2057@exps) (if (equal? (car k2057@exps) (k1964@build-void)) (k2055@loop (cdr k2057@exps)) (cons 'begin k2057@exps)))))) k2055@loop) k2052@exps))) (set! k1964@build-void (lambda () '((primitive void)))) (set! k1966@build-letrec (lambda (k2059@ae k2060@vars k2061@val-exps k2062@body-exp) (if (null? k2060@vars) k2062@body-exp (list 'letrec (map list k2060@vars k2061@val-exps) k2062@body-exp)))) (set! k1968@build-letrec* (lambda (k2067@ae k2068@vars k2069@val-exps k2070@body-exp) (if (null? k2068@vars) k2070@body-exp (k1916@build-let k2067@ae k2068@vars (map (lambda (k2075@x) (list 'quote '#f)) k2068@vars) (k1962@build-sequence k2067@ae (append (map (lambda (k2077@lhs k2078@rhs) (list 'set! k2077@lhs k2078@rhs)) k2068@vars k2069@val-exps) (list k2070@body-exp))))))) (set! k1970@build-library-letrec* (lambda (k2081@ae k2082@name k2083@vars k2084@locs k2085@val-exps k2086@body-exp) (list 'library-letrec* k2082@name (map list k2083@vars k2084@locs k2085@val-exps) k2086@body-exp))) (set! k1972@build-receive (lambda (k2093@ae k2094@vars k2095@producer k2096@body*) (begin (display '"************** in ") (cons 'receive (cons k2094@vars (cons k2095@producer k2096@body*)))))) (begin (set! k2110@k1972@build-receive k1972@build-receive) (set! k2109@k1970@build-library-letrec* k1970@build-library-letrec*) (set! k2108@k1968@build-letrec* k1968@build-letrec*) (set! k2107@k1966@build-letrec k1966@build-letrec) (set! k2106@k1964@build-void k1964@build-void) (set! k2105@k1962@build-sequence k1962@build-sequence) (set! k2104@k1916@build-let k1916@build-let) (set! k2103@k1914@build-case-lambda k1914@build-case-lambda) (set! k2102@k1912@build-lambda k1912@build-lambda) (set! k2101@k1799@build-global-define k1799@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (k2125@file-options-macro k2127@set-cons k2129@set-union k2134@top-mark* k2136@top-marked? k2138@gen-lexical k2140@gen-global k2142@gen-label k2144@gen-top-level-label k2146@gen-define-label+loc k2148@gen-define-label k2154@k2149 k2156@k2151 k2158@k2150 k2161@rib? k2163@make-rib k2165@rib-sym* k2167@rib-mark** k2169@rib-label* k2171@rib-sealed/freq k2173@rib-cache k2175@set-rib-sym*! k2177@set-rib-mark**! k2179@set-rib-label*! k2181@set-rib-sealed/freq! k2183@set-rib-cache! k2185@make-empty-rib k2187@extend-rib! k2189@extend-rib/nc! k2191@make-rib-map k2193@seal-rib! k2195@unseal-rib! k2197@make-full-rib k2203@k2198 k2205@k2200 k2207@k2199 k2210@stx? k2212@make-stx k2214@stx-expr k2216@stx-mark* k2218@stx-subst* k2220@stx-ae* k2222@set-stx-expr! k2224@set-stx-mark*! k2226@set-stx-subst*! k2228@set-stx-ae*! k2230@rp k2232@datum->stx k2234@gen-mark k2236@anti-mark k2238@anti-mark? k2240@join-wraps k2242@mkstx k2244@add-mark k2246@add-subst k2248@syntax-kind? k2250@syntax-vector->list k2252@syntax-pair? k2254@syntax-vector? k2256@syntax-null? k2258@syntax-list? k2260@syntax-car k2262@syntax-cdr k2264@syntax->list k2266@id? k2268@id->sym k2270@same-marks? k2272@bound-id=? k2274@free-id=? k2276@valid-bound-ids? k2278@distinct-bound-ids? k2280@bound-id-member? k2282@self-evaluating? k2284@strip-annotations k2286@strip k2288@stx->datum k2290@same-marks*? k2292@id->label k2294@id->real-label k2296@label->binding k2298@make-binding k2300@binding-type k2302@binding-value k2304@raise-unbound-error k2306@syntax-type k2320@sanitize-binding k2322@make-variable-transformer k2324@variable-transformer? k2326@variable-transformer-procedure k2328@make-eval-transformer k2639@parse-define k2641@parse-define-syntax k2643@scheme-stx-hashtable k2645@scheme-stx k2647@lexical-var k2649@lexical-mutable? k2651@set-lexical-mutable! k2653@add-lexical k2655@add-lexicals k2657@letrec-helper k2659@letrec-transformer k2661@letrec*-transformer k2663@fluid-let-syntax-transformer k2665@type-descriptor-transformer k2667@record-type-descriptor-transformer k2669@record-constructor-descriptor-transformer k2671@when-macro k2673@unless-macro k2675@if-transformer k2677@and-transformer k2679@or-transformer k2681@case-macro k2683@quote-transformer k2685@case-lambda-transformer k2687@lambda-transformer k2689@bless k2691@with-syntax-macro k2693@invalid-fmls-error k2695@let-macro k2697@let-values-macro k2699@let*-values-macro k2701@trace-lambda-macro k2703@trace-define-macro k2705@trace-define-syntax-macro k2707@trace-let/rec-syntax k2709@trace-let-syntax-macro k2711@trace-letrec-syntax-macro k2713@guard-macro k2715@define-enumeration-macro k2717@time-macro k2719@delay-macro k2721@assert-macro k2723@endianness-macro k2725@identifier-syntax-macro k2727@do-macro k2729@let*-macro k2731@or-macro k2733@and-macro k2735@cond-macro k2737@do-include k2739@include-macro k2741@include-into-macro k2743@syntax-rules-macro k2745@quasiquote-macro k2747@quasisyntax-macro k2749@define-struct-macro k2751@define-record-type-macro k2753@define-condition-type-macro k2755@incorrect-usage-macro k2757@parameterize-macro k2759@foreign-call-transformer k2761@convert-pattern k2763@syntax-dispatch k2765@ellipsis? k2767@underscore? k2769@verify-literals k2771@syntax-case-transformer k2773@ellipsis-map k2775@syntax-transformer k2777@core-macro-transformer k2779@symbol-macro k2781@macro-transformer k2783@local-macro-transformer k2785@do-macro-call k2787@chi-macro k2789@chi-local-macro k2791@chi-global-macro k2793@chi-expr* k2795@chi-application k2797@chi-expr k2799@chi-set! k2801@verify-formals k2803@chi-lambda-clause k2805@chi-lambda-clause* k2807@chi-defun k2809@chi-rhs k2811@expand-interaction-rhs*/init* k2813@chi-rhs* k2815@find-bound=? k2817@find-dups k2819@chi-internal k2821@parse-module k2827@k2822 k2829@k2824 k2831@k2823 k2834@module-interface? k2836@make-module-interface k2838@module-interface-first-mark k2840@module-interface-exp-id-vec k2842@module-interface-exp-lab-vec k2844@set-module-interface-first-mark! k2846@set-module-interface-exp-id-vec! k2848@set-module-interface-exp-lab-vec! k2850@module-interface-exp-id* k2852@chi-internal-module k2854@chi-body* k2856@expand-transformer k2858@parse-exports k2860@parse-library-name k2862@parse-library k2864@parse-import-spec* k2866@make-top-rib k2868@make-collector k2870@inv-collector k2872@vis-collector k2874@imp-collector k2876@chi-library-internal k2878@chi-interaction-expr k2880@library-body-expander k2882@core-library-expander k2884@parse-top-level-program k2886@top-level-expander k2892@k2887 k2894@k2889 k2896@k2888 k2899@env? k2901@make-env k2903@env-names k2905@env-labels k2907@env-itc k2909@set-env-names! k2911@set-env-labels! k2913@set-env-itc! k2915@rp k2921@k2916 k2923@k2918 k2925@k2917 k2928@interaction-env? k2930@make-interaction-env k2932@interaction-env-rib k2934@interaction-env-r k2936@interaction-env-locs k2938@set-interaction-env-rib! k2940@set-interaction-env-r! k2942@set-interaction-env-locs! k2944@rp k2946@interaction-environment-symbols k2948@environment-bindings k2950@parse-binding k2952@environment? k2954@environment-symbols k2956@environment k2958@null-environment k2960@scheme-report-environment k2962@expand k2964@eval k2966@library-expander k2968@boot-library-expand k2970@rev-map-append k2972@build-exports k2974@make-export-subst k2976@make-export-env/macros k2978@generate-temporaries k2980@free-identifier=? k2982@bound-identifier=? k2984@make-source-condition k2986@extract-position-condition k2988@expression-position k2990@assertion-error k2992@syntax-error k2994@syntax-violation* k2996@syntax-violation k2998@identifier? k3000@datum->syntax k3002@syntax->datum k3004@compile-r6rs-top-level k3006@pre-compile-r6rs-top-level k3008@interaction-environment k3010@top-level-context) (begin (set! k2125@file-options-macro (lambda (k3011@x) ((lambda (k3014@valid-option?) (begin (set! k3014@valid-option? (lambda (k3023@x) (and (k2266@id? k3023@x) (memq (k2268@id->sym k3023@x) '(no-fail no-create no-truncate))))) ((lambda (k3015@t) ((lambda (k3017@ls/false) (if (and k3017@ls/false (apply (lambda (k3019@opt*) (for-all k3014@valid-option? k3019@opt*)) k3017@ls/false)) (apply (lambda (k3021@opt*) (k2689@bless (list 'make-file-options (list 'quote k3021@opt*)))) k3017@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k3015@t))) (k2763@syntax-dispatch k3015@t '(_ . each-any)))) k3011@x))) '#f))) (set! k2127@set-cons (lambda (k3025@x k3026@ls) (if (memq k3025@x k3026@ls) k3026@ls (cons k3025@x k3026@ls)))) (set! k2129@set-union (lambda (k3029@ls1 k3030@ls2) (if (null? k3029@ls1) k3030@ls2 (if (memq (car k3029@ls1) k3030@ls2) (k2129@set-union (cdr k3029@ls1) k3030@ls2) (cons (car k3029@ls1) (k2129@set-union (cdr k3029@ls1) k3030@ls2)))))) (set! k2134@top-mark* '(top)) (set! k2136@top-marked? (lambda (k3033@m*) (memq 'top k3033@m*))) (set! k2138@gen-lexical (lambda (k3035@sym) (if (symbol? k3035@sym) (k1150@k914@gensym k3035@sym) (if (k2210@stx? k3035@sym) (k2138@gen-lexical (k2268@id->sym k3035@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" k3035@sym))))) (set! k2140@gen-global (lambda (k3037@x) (k2138@gen-lexical k3037@x))) (set! k2142@gen-label (lambda (k3039@_) (k1150@k914@gensym))) (set! k2144@gen-top-level-label (lambda (k3041@id k3042@rib) ((lambda (k3046@find) (begin (set! k3046@find (lambda (k3057@sym k3058@mark* k3059@sym* k3060@mark** k3061@label*) (and (pair? k3059@sym*) (if (and (eq? k3057@sym (car k3059@sym*)) (k2270@same-marks? k3058@mark* (car k3060@mark**))) (car k3061@label*) (k3046@find k3057@sym k3058@mark* (cdr k3059@sym*) (cdr k3060@mark**) (cdr k3061@label*)))))) ((lambda (k3047@sym k3048@mark*) ((lambda (k3051@sym*) ((lambda (k3053@t) (if k3053@t ((lambda (k3055@label) (if (k1791@k1445@imported-label->binding k3055@label) (k1150@k914@gensym) k3055@label)) k3053@t) (k1150@k914@gensym))) (and (memq k3047@sym (k2165@rib-sym* k3042@rib)) (k3046@find k3047@sym k3048@mark* k3051@sym* (k2167@rib-mark** k3042@rib) (k2169@rib-label* k3042@rib))))) (k2165@rib-sym* k3042@rib))) (k2268@id->sym k3041@id) (k2216@stx-mark* k3041@id)))) '#f))) (set! k2146@gen-define-label+loc (lambda (k3067@id k3068@rib) ((lambda (k3071@t) (if k3071@t ((lambda (k3073@env) ((lambda (k3075@label k3076@locs) (values k3075@label ((lambda (k3079@t) (if k3079@t (cdr k3079@t) ((lambda (k3081@loc) (begin (k2942@set-interaction-env-locs! k3073@env (cons (cons k3075@label k3081@loc) k3076@locs)) k3081@loc)) (k2138@gen-lexical k3067@id)))) (assq k3075@label k3076@locs)))) (k2144@gen-top-level-label k3067@id k3068@rib) (k2936@interaction-env-locs k3073@env))) k3071@t) (values (k1150@k914@gensym) (k2138@gen-lexical k3067@id)))) (k3010@top-level-context)))) (set! k2148@gen-define-label (lambda (k3083@id k3084@rib) (if (k3010@top-level-context) (k2144@gen-top-level-label k3083@id k3084@rib) (k1150@k914@gensym)))) (set! k2154@k2149 (make-record-type-descriptor 'rib '#f 'k2152 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! k2156@k2151 '#f) (set! k2158@k2150 (make-record-constructor-descriptor k2154@k2149 '#f k2156@k2151)) (set! k2161@rib? (record-predicate k2154@k2149)) (set! k2163@make-rib (record-constructor k2158@k2150)) (set! k2165@rib-sym* (record-accessor k2154@k2149 '0)) (set! k2167@rib-mark** (record-accessor k2154@k2149 '1)) (set! k2169@rib-label* (record-accessor k2154@k2149 '2)) (set! k2171@rib-sealed/freq (record-accessor k2154@k2149 '3)) (set! k2173@rib-cache (record-accessor k2154@k2149 '4)) (set! k2175@set-rib-sym*! (record-mutator k2154@k2149 '0)) (set! k2177@set-rib-mark**! (record-mutator k2154@k2149 '1)) (set! k2179@set-rib-label*! (record-mutator k2154@k2149 '2)) (set! k2181@set-rib-sealed/freq! (record-mutator k2154@k2149 '3)) (set! k2183@set-rib-cache! (record-mutator k2154@k2149 '4)) (set! k2185@make-empty-rib (lambda () (k2163@make-rib '() '() '() '#f '#f))) (set! k2187@extend-rib! (lambda (k3087@rib k3088@id k3089@label) ((lambda (k3094@find) (begin (set! k3094@find (lambda (k3107@sym k3108@mark* k3109@sym* k3110@mark** k3111@label*) (and (pair? k3109@sym*) (if (and (eq? k3107@sym (car k3109@sym*)) (k2270@same-marks? k3108@mark* (car k3110@mark**))) k3111@label* (k3094@find k3107@sym k3108@mark* (cdr k3109@sym*) (cdr k3110@mark**) (cdr k3111@label*)))))) (begin (if (k2171@rib-sealed/freq k3087@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" k3087@rib) (void)) ((lambda (k3095@sym k3096@mark*) ((lambda (k3099@sym*) ((lambda (k3101@t) (if k3101@t ((lambda (k3103@p) (if (not (eq? k3089@label (car k3103@p))) (if (k3010@top-level-context) (set-car! k3103@p k3089@label) (k2996@syntax-violation '#f '"multiple definitions of identifier" k3088@id)) (void))) k3101@t) (begin (if (k2173@rib-cache k3087@rib) (hashtable-update! (k2173@rib-cache k3087@rib) k3095@sym (lambda (k3105@e) (cons (cons k3096@mark* k3089@label) k3105@e)) '()) (void)) (k2175@set-rib-sym*! k3087@rib (cons k3095@sym k3099@sym*)) (k2177@set-rib-mark**! k3087@rib (cons k3096@mark* (k2167@rib-mark** k3087@rib))) (k2179@set-rib-label*! k3087@rib (cons k3089@label (k2169@rib-label* k3087@rib)))))) (and (memq k3095@sym (k2165@rib-sym* k3087@rib)) (k3094@find k3095@sym k3096@mark* k3099@sym* (k2167@rib-mark** k3087@rib) (k2169@rib-label* k3087@rib))))) (k2165@rib-sym* k3087@rib))) (k2268@id->sym k3088@id) (k2216@stx-mark* k3088@id))))) '#f))) (set! k2189@extend-rib/nc! (lambda (k3117@rib k3118@id k3119@label) ((lambda (k3123@sym k3124@mark*) ((lambda (k3127@sym*) (begin (if (k2173@rib-cache k3117@rib) (hashtable-update! (k2173@rib-cache k3117@rib) k3123@sym (lambda (k3129@e) (cons (cons k3124@mark* k3119@label) k3129@e)) '()) (void)) (k2175@set-rib-sym*! k3117@rib (cons k3123@sym k3127@sym*)) (k2177@set-rib-mark**! k3117@rib (cons k3124@mark* (k2167@rib-mark** k3117@rib))) (k2179@set-rib-label*! k3117@rib (cons k3119@label (k2169@rib-label* k3117@rib))))) (k2165@rib-sym* k3117@rib))) (k2268@id->sym k3118@id) (k2216@stx-mark* k3118@id)))) (set! k2191@make-rib-map (lambda (k3131@sym*) ((lambda (k3133@ht) ((letrec ((k3135@f (lambda (k3137@i k3138@sym*) (if (null? k3138@sym*) k3133@ht (begin (hashtable-update! k3133@ht (car k3138@sym*) (lambda (k3141@x) (cons k3137@i k3141@x)) '()) (k3135@f (+ k3137@i '1) (cdr k3138@sym*))))))) k3135@f) '0 k3131@sym*)) (make-eq-hashtable)))) (set! k2193@seal-rib! (lambda (k3143@rib) ((lambda (k3145@sym*) (if (not (null? k3145@sym*)) (begin (k2175@set-rib-sym*! k3143@rib (list->vector k3145@sym*)) (k2177@set-rib-mark**! k3143@rib (list->vector (k2167@rib-mark** k3143@rib))) (k2179@set-rib-label*! k3143@rib (list->vector (k2169@rib-label* k3143@rib))) (k2181@set-rib-sealed/freq! k3143@rib (k2191@make-rib-map k3145@sym*))) (void))) (k2165@rib-sym* k3143@rib)))) (set! k2195@unseal-rib! (lambda (k3147@rib) (if (k2171@rib-sealed/freq k3147@rib) (begin (k2181@set-rib-sealed/freq! k3147@rib '#f) (k2175@set-rib-sym*! k3147@rib (vector->list (k2165@rib-sym* k3147@rib))) (k2177@set-rib-mark**! k3147@rib (vector->list (k2167@rib-mark** k3147@rib))) (k2179@set-rib-label*! k3147@rib (vector->list (k2169@rib-label* k3147@rib)))) (void)))) (set! k2197@make-full-rib (lambda (k3149@id* k3150@label*) ((lambda (k3153@r) (begin (k2193@seal-rib! k3153@r) k3153@r)) (k2163@make-rib (map k2268@id->sym k3149@id*) (map k2216@stx-mark* k3149@id*) k3150@label* '#f '#f)))) (set! k2203@k2198 (make-record-type-descriptor 'stx '#f 'k2201 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! k2205@k2200 '#f) (set! k2207@k2199 (make-record-constructor-descriptor k2203@k2198 '#f k2205@k2200)) (set! k2210@stx? (record-predicate k2203@k2198)) (set! k2212@make-stx (record-constructor k2207@k2199)) (set! k2214@stx-expr (record-accessor k2203@k2198 '0)) (set! k2216@stx-mark* (record-accessor k2203@k2198 '1)) (set! k2218@stx-subst* (record-accessor k2203@k2198 '2)) (set! k2220@stx-ae* (record-accessor k2203@k2198 '3)) (set! k2222@set-stx-expr! (record-mutator k2203@k2198 '0)) (set! k2224@set-stx-mark*! (record-mutator k2203@k2198 '1)) (set! k2226@set-stx-subst*! (record-mutator k2203@k2198 '2)) (set! k2228@set-stx-ae*! (record-mutator k2203@k2198 '3)) (set! k2230@rp (k1161@k936@make-record-printer 'stx (lambda (k3155@x k3156@p k3157@wr) (begin (display '"#<syntax " k3156@p) (write (k2288@stx->datum k3155@x) k3156@p) ((lambda (k3161@expr) (if (k1153@k920@annotation? k3161@expr) ((lambda (k3163@src) (if (pair? k3163@src) (begin (display '" [" k3156@p) (display (cdr k3163@src) k3156@p) (display '" of " k3156@p) (display (car k3163@src) k3156@p) (display '"]" k3156@p)) (void))) (k1154@k922@annotation-source k3161@expr)) (void))) (k2214@stx-expr k3155@x)) (display '">" k3156@p))))) (set! k2232@datum->stx (lambda (k3165@id k3166@datum) (k2212@make-stx k3166@datum (k2216@stx-mark* k3165@id) (k2218@stx-subst* k3165@id) (k2220@stx-ae* k3165@id)))) (set! k2234@gen-mark (lambda () (string '#\m))) (set! k2236@anti-mark '#f) (set! k2238@anti-mark? not) (set! k2240@join-wraps (lambda (k3169@m1* k3170@s1* k3171@ae1* k3172@e) ((lambda (k3178@cancel) (begin (set! k3178@cancel (lambda (k3185@ls1 k3186@ls2) ((letrec ((k3189@f (lambda (k3191@x k3192@ls1) (if (null? k3192@ls1) (cdr k3186@ls2) (cons k3191@x (k3189@f (car k3192@ls1) (cdr k3192@ls1))))))) k3189@f) (car k3185@ls1) (cdr k3185@ls1)))) ((lambda (k3179@m2* k3180@s2* k3181@ae2*) (if (and (not (null? k3169@m1*)) (not (null? k3179@m2*)) (k2238@anti-mark? (car k3179@m2*))) (values (k3178@cancel k3169@m1* k3179@m2*) (k3178@cancel k3170@s1* k3180@s2*) (k3178@cancel k3171@ae1* k3181@ae2*)) (values (append k3169@m1* k3179@m2*) (append k3170@s1* k3180@s2*) (append k3171@ae1* k3181@ae2*)))) (k2216@stx-mark* k3172@e) (k2218@stx-subst* k3172@e) (k2220@stx-ae* k3172@e)))) '#f))) (set! k2242@mkstx (lambda (k3195@e k3196@m* k3197@s* k3198@ae*) (if (and (k2210@stx? k3195@e) (not (k2136@top-marked? k3196@m*))) (call-with-values (lambda () (k2240@join-wraps k3196@m* k3197@s* k3198@ae* k3195@e)) (lambda (k3206@k3203@m* k3207@k3204@s* k3208@k3205@ae*) ((lambda (k3212@ae* k3213@s* k3214@m*) (k2212@make-stx (k2214@stx-expr k3195@e) k3214@m* k3213@s* k3212@ae*)) k3208@k3205@ae* k3207@k3204@s* k3206@k3203@m*))) (k2212@make-stx k3195@e k3196@m* k3197@s* k3198@ae*)))) (set! k2244@add-mark (lambda (k3218@m k3219@e k3220@ae) (k2242@mkstx k3219@e (list k3218@m) '(shift) (list k3220@ae)))) (set! k2246@add-subst (lambda (k3224@subst k3225@e) (k2242@mkstx k3225@e '() (list k3224@subst) '()))) (set! k2248@syntax-kind? (lambda (k3228@x k3229@p?) (if (k2210@stx? k3228@x) (k2248@syntax-kind? (k2214@stx-expr k3228@x) k3229@p?) (if (k1153@k920@annotation? k3228@x) (k2248@syntax-kind? (k1155@k924@annotation-expression k3228@x) k3229@p?) (k3229@p? k3228@x))))) (set! k2250@syntax-vector->list (lambda (k3232@x) (if (k2210@stx? k3232@x) ((lambda (k3234@ls k3235@m* k3236@s* k3237@ae*) (map (lambda (k3242@x) (k2242@mkstx k3242@x k3235@m* k3236@s* k3237@ae*)) k3234@ls)) (k2250@syntax-vector->list (k2214@stx-expr k3232@x)) (k2216@stx-mark* k3232@x) (k2218@stx-subst* k3232@x) (k2220@stx-ae* k3232@x)) (if (k1153@k920@annotation? k3232@x) (k2250@syntax-vector->list (k1155@k924@annotation-expression k3232@x)) (if (vector? k3232@x) (vector->list k3232@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" k3232@x)))))) (set! k2252@syntax-pair? (lambda (k3244@x) (k2248@syntax-kind? k3244@x pair?))) (set! k2254@syntax-vector? (lambda (k3246@x) (k2248@syntax-kind? k3246@x vector?))) (set! k2256@syntax-null? (lambda (k3248@x) (k2248@syntax-kind? k3248@x null?))) (set! k2258@syntax-list? (lambda (k3250@x) (or (k2256@syntax-null? k3250@x) (and (k2252@syntax-pair? k3250@x) (k2258@syntax-list? (k2262@syntax-cdr k3250@x)))))) (set! k2260@syntax-car (lambda (k3252@x) (if (k2210@stx? k3252@x) (k2242@mkstx (k2260@syntax-car (k2214@stx-expr k3252@x)) (k2216@stx-mark* k3252@x) (k2218@stx-subst* k3252@x) (k2220@stx-ae* k3252@x)) (if (k1153@k920@annotation? k3252@x) (k2260@syntax-car (k1155@k924@annotation-expression k3252@x)) (if (pair? k3252@x) (car k3252@x) (assertion-violation 'syntax-car '"BUG: not a pair" k3252@x)))))) (set! k2262@syntax-cdr (lambda (k3254@x) (if (k2210@stx? k3254@x) (k2242@mkstx (k2262@syntax-cdr (k2214@stx-expr k3254@x)) (k2216@stx-mark* k3254@x) (k2218@stx-subst* k3254@x) (k2220@stx-ae* k3254@x)) (if (k1153@k920@annotation? k3254@x) (k2262@syntax-cdr (k1155@k924@annotation-expression k3254@x)) (if (pair? k3254@x) (cdr k3254@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" k3254@x)))))) (set! k2264@syntax->list (lambda (k3256@x) (if (k2252@syntax-pair? k3256@x) (cons (k2260@syntax-car k3256@x) (k2264@syntax->list (k2262@syntax-cdr k3256@x))) (if (k2256@syntax-null? k3256@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" k3256@x))))) (set! k2266@id? (lambda (k3258@x) (and (k2210@stx? k3258@x) ((lambda (k3260@expr) (symbol? (if (k1153@k920@annotation? k3260@expr) (k1152@k918@annotation-stripped k3260@expr) k3260@expr))) (k2214@stx-expr k3258@x))))) (set! k2268@id->sym (lambda (k3262@x) (begin (if (not (k2210@stx? k3262@x)) (error 'id->sym '"BUG in ikarus: not an id" k3262@x) (void)) ((lambda (k3264@expr) ((lambda (k3266@sym) (if (symbol? k3266@sym) k3266@sym (error 'id->sym '"BUG in ikarus: not an id" k3262@x))) (if (k1153@k920@annotation? k3264@expr) (k1152@k918@annotation-stripped k3264@expr) k3264@expr))) (k2214@stx-expr k3262@x))))) (set! k2270@same-marks? (lambda (k3268@x k3269@y) (or (and (null? k3268@x) (null? k3269@y)) (and (pair? k3268@x) (pair? k3269@y) (eq? (car k3268@x) (car k3269@y)) (k2270@same-marks? (cdr k3268@x) (cdr k3269@y)))))) (set! k2272@bound-id=? (lambda (k3272@x k3273@y) (and (eq? (k2268@id->sym k3272@x) (k2268@id->sym k3273@y)) (k2270@same-marks? (k2216@stx-mark* k3272@x) (k2216@stx-mark* k3273@y))))) (set! k2274@free-id=? (lambda (k3276@i k3277@j) ((lambda (k3280@t0 k3281@t1) (if (or k3280@t0 k3281@t1) (eq? k3280@t0 k3281@t1) (eq? (k2268@id->sym k3276@i) (k2268@id->sym k3277@j)))) (k2294@id->real-label k3276@i) (k2294@id->real-label k3277@j)))) (set! k2276@valid-bound-ids? (lambda (k3284@id*) (and (for-all k2266@id? k3284@id*) (k2278@distinct-bound-ids? k3284@id*)))) (set! k2278@distinct-bound-ids? (lambda (k3286@id*) (or (null? k3286@id*) (and (not (k2280@bound-id-member? (car k3286@id*) (cdr k3286@id*))) (k2278@distinct-bound-ids? (cdr k3286@id*)))))) (set! k2280@bound-id-member? (lambda (k3288@id k3289@id*) (and (pair? k3289@id*) (or (k2272@bound-id=? k3288@id (car k3289@id*)) (k2280@bound-id-member? k3288@id (cdr k3289@id*)))))) (set! k2282@self-evaluating? (lambda (k3292@x) (or (number? k3292@x) (string? k3292@x) (char? k3292@x) (boolean? k3292@x) (regexp? k3292@x) (bytevector? k3292@x)))) (set! k2284@strip-annotations (lambda (k3294@x) (if (pair? k3294@x) (cons (k2284@strip-annotations (car k3294@x)) (k2284@strip-annotations (cdr k3294@x))) (if (vector? k3294@x) (vector-map k2284@strip-annotations k3294@x) (if (k1153@k920@annotation? k3294@x) (k1152@k918@annotation-stripped k3294@x) k3294@x))))) (set! k2286@strip (lambda (k3296@x k3297@m*) (if (k2136@top-marked? k3297@m*) (if (or (k1153@k920@annotation? k3296@x) (and (pair? k3296@x) (k1153@k920@annotation? (car k3296@x))) (and (vector? k3296@x) (> (vector-length k3296@x) '0) (k1153@k920@annotation? (vector-ref k3296@x '0)))) (k2284@strip-annotations k3296@x) k3296@x) ((letrec ((k3300@f (lambda (k3302@x) (if (k2210@stx? k3302@x) (k2286@strip (k2214@stx-expr k3302@x) (k2216@stx-mark* k3302@x)) (if (k1153@k920@annotation? k3302@x) (k1152@k918@annotation-stripped k3302@x) (if (pair? k3302@x) ((lambda (k3304@a k3305@d) (if (and (eq? k3304@a (car k3302@x)) (eq? k3305@d (cdr k3302@x))) k3302@x (cons k3304@a k3305@d))) (k3300@f (car k3302@x)) (k3300@f (cdr k3302@x))) (if (vector? k3302@x) ((lambda (k3308@old) ((lambda (k3310@new) (if (for-all eq? k3308@old k3310@new) k3302@x (list->vector k3310@new))) (map k3300@f k3308@old))) (vector->list k3302@x)) k3302@x))))))) k3300@f) k3296@x)))) (set! k2288@stx->datum (lambda (k3312@x) (k2286@strip k3312@x '()))) (set! k2290@same-marks*? (lambda (k3314@mark* k3315@mark** k3316@si) (if (null? k3316@si) '#f (if (k2270@same-marks? k3314@mark* (vector-ref k3315@mark** (car k3316@si))) (car k3316@si) (k2290@same-marks*? k3314@mark* k3315@mark** (cdr k3316@si)))))) (set! k2292@id->label (lambda (k3320@id) (or (k2294@id->real-label k3320@id) ((lambda (k3322@t) (if k3322@t ((lambda (k3324@env) ((lambda (k3326@rib) (call-with-values (lambda () (k2146@gen-define-label+loc k3320@id k3326@rib)) (lambda (k3330@k3328@lab k3331@k3329@loc_) ((lambda (k3334@loc_ k3335@lab) (begin (k2187@extend-rib! k3326@rib k3320@id k3335@lab) k3335@lab)) k3331@k3329@loc_ k3330@k3328@lab)))) (k2932@interaction-env-rib k3324@env))) k3322@t) '#f)) (k3010@top-level-context))))) (set! k2294@id->real-label (lambda (k3338@id) ((lambda (k3340@sym) ((letrec ((k3342@search (lambda (k3344@subst* k3345@mark*) (if (null? k3344@subst*) '#f (if (eq? (car k3344@subst*) 'shift) (k3342@search (cdr k3344@subst*) (cdr k3345@mark*)) ((lambda (k3348@rib) ((lambda (k3350@t) (if k3350@t ((lambda (k3352@ht) ((lambda (k3354@si) ((lambda (k3356@i) (if k3356@i (vector-ref (k2169@rib-label* k3348@rib) k3356@i) (k3342@search (cdr k3344@subst*) k3345@mark*))) (and k3354@si (k2290@same-marks*? k3345@mark* (k2167@rib-mark** k3348@rib) (reverse k3354@si))))) (hashtable-ref k3352@ht k3340@sym '#f))) k3350@t) ((letrec ((k3358@f (lambda (k3360@sym* k3361@mark** k3362@label*) (if (null? k3360@sym*) (k3342@search (cdr k3344@subst*) k3345@mark*) (if (and (eq? (car k3360@sym*) k3340@sym) (k2270@same-marks? (car k3361@mark**) k3345@mark*)) (car k3362@label*) (k3358@f (cdr k3360@sym*) (cdr k3361@mark**) (cdr k3362@label*))))))) k3358@f) (k2165@rib-sym* k3348@rib) (k2167@rib-mark** k3348@rib) (k2169@rib-label* k3348@rib)))) (k2171@rib-sealed/freq k3348@rib))) (car k3344@subst*))))))) k3342@search) (k2218@stx-subst* k3338@id) (k2216@stx-mark* k3338@id))) (k2268@id->sym k3338@id)))) (set! k2296@label->binding (lambda (k3366@x k3367@r) ((lambda (k3370@t) (if k3370@t ((lambda (k3372@b) (if (and (pair? k3372@b) (eq? (car k3372@b) '$core-rtd)) (cons '$rtd (map k2689@bless (cdr k3372@b))) (if (and (pair? k3372@b) (eq? (car k3372@b) 'global-rtd)) ((lambda (k3374@lib k3375@loc) (cons '$rtd (symbol-value k3375@loc))) (cadr k3372@b) (cddr k3372@b)) k3372@b))) k3370@t) ((lambda (k3378@t) (if k3378@t (cdr k3378@t) ((lambda (k3380@t) (if k3380@t ((lambda (k3382@env) ((lambda (k3384@t) (if k3384@t ((lambda (k3386@p) (cons* 'lexical (cdr k3386@p) '#f)) k3384@t) '(displaced-lexical . #f))) (assq k3366@x (k2936@interaction-env-locs k3382@env)))) k3380@t) '(displaced-lexical . #f))) (k3010@top-level-context)))) (assq k3366@x k3367@r)))) (k1791@k1445@imported-label->binding k3366@x)))) (set! k2298@make-binding cons) (set! k2300@binding-type car) (set! k2302@binding-value cdr) (set! k2304@raise-unbound-error (lambda (k3388@id) (k2994@syntax-violation* '#f '"unbound identifier" k3388@id (k10184@k9746@make-undefined-violation)))) (set! k2306@syntax-type (lambda (k3390@e k3391@r) (if (k2266@id? k3390@e) ((lambda (k3394@id) ((lambda (k3396@label) ((lambda (k3398@b) ((lambda (k3400@type) ((lambda () (begin (if (not k3396@label) (k2304@raise-unbound-error k3394@id) (void)) ((lambda (k3402@t) (if (memv k3402@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values k3400@type (k2302@binding-value k3398@b) k3394@id) (values 'other '#f '#f))) k3400@type))))) (k2300@binding-type k3398@b))) (k2296@label->binding k3396@label k3391@r))) (k2292@id->label k3394@id))) k3390@e) (if (k2252@syntax-pair? k3390@e) ((lambda (k3404@id) (if (k2266@id? k3404@id) ((lambda (k3406@label) ((lambda (k3408@b) ((lambda (k3410@type) ((lambda () (begin (if (not k3406@label) (k2304@raise-unbound-error k3404@id) (void)) ((lambda (k3412@t) (if (memv k3412@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values k3410@type (k2302@binding-value k3408@b) k3404@id) (values 'call '#f '#f))) k3410@type))))) (k2300@binding-type k3408@b))) (k2296@label->binding k3406@label k3391@r))) (k2292@id->label k3404@id)) (values 'call '#f '#f))) (k2260@syntax-car k3390@e)) ((lambda (k3414@d) (if (k2282@self-evaluating? k3414@d) (values 'constant k3414@d '#f) (values 'other '#f '#f))) (k2288@stx->datum k3390@e)))))) (set! k2320@sanitize-binding (lambda (k3416@x k3417@src) (if (procedure? k3416@x) (cons* 'local-macro k3416@x k3417@src) (if (and (pair? k3416@x) (eq? (car k3416@x) 'macro!) (procedure? (cdr k3416@x))) (cons* 'local-macro! (cdr k3416@x) k3417@src) (if (and (pair? k3416@x) (eq? (car k3416@x) '$rtd)) k3416@x (assertion-violation 'expand '"invalid transformer" k3416@x)))))) (set! k2322@make-variable-transformer (lambda (k3420@x) (if (procedure? k3420@x) (cons 'macro! k3420@x) (assertion-violation 'make-variable-transformer '"not a procedure" k3420@x)))) (set! k2324@variable-transformer? (lambda (k3422@x) (and (pair? k3422@x) (eq? (car k3422@x) 'macro!) (procedure? (cdr k3422@x))))) (set! k2326@variable-transformer-procedure (lambda (k3424@x) (if (k2324@variable-transformer? k3424@x) (cdr k3424@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" k3424@x)))) (set! k2328@make-eval-transformer (lambda (k3426@x) (k2320@sanitize-binding (eval-core (k1248@k1176@expanded->core k3426@x)) k3426@x))) (set! k2639@parse-define (lambda (k3428@x) ((lambda (k3430@t) ((lambda (k3432@ls/false) (if (and k3432@ls/false (apply (lambda (k3434@id k3435@fmls k3436@b k3437@b*) (k2266@id? k3434@id)) k3432@ls/false)) (apply (lambda (k3442@id k3443@fmls k3444@b k3445@b*) (begin (k2801@verify-formals k3443@fmls k3428@x) (values k3442@id (cons 'defun (cons k3443@fmls (cons k3444@b k3445@b*)))))) k3432@ls/false) ((lambda (k3450@t) ((lambda (k3452@ls/false) (if (and k3452@ls/false (apply (lambda (k3454@id k3455@val) (k2266@id? k3454@id)) k3452@ls/false)) (apply (lambda (k3458@id k3459@val) (values k3458@id (cons 'expr k3459@val))) k3452@ls/false) ((lambda (k3462@t) ((lambda (k3464@ls/false) (if (and k3464@ls/false (apply (lambda (k3466@id) (k2266@id? k3466@id)) k3464@ls/false)) (apply (lambda (k3468@id) (values k3468@id (cons 'expr (k2689@bless '(void))))) k3464@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k3462@t))) (k2763@syntax-dispatch k3462@t '(_ any)))) k3450@t))) (k2763@syntax-dispatch k3450@t '(_ any any)))) k3430@t))) (k2763@syntax-dispatch k3430@t '(_ (any . any) any . each-any)))) k3428@x))) (set! k2641@parse-define-syntax (lambda (k3470@x) ((lambda (k3472@t) ((lambda (k3474@ls/false) (if (and k3474@ls/false (apply (lambda (k3476@id k3477@val) (k2266@id? k3476@id)) k3474@ls/false)) (apply (lambda (k3480@id k3481@val) (values k3480@id k3481@val)) k3474@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k3472@t))) (k2763@syntax-dispatch k3472@t '(_ any any)))) k3470@x))) (set! k2643@scheme-stx-hashtable (make-eq-hashtable)) (set! k2645@scheme-stx (lambda (k3484@sym) (or (hashtable-ref k2643@scheme-stx-hashtable k3484@sym '#f) ((lambda (k3486@subst) ((lambda (k3488@stx) ((lambda (k3490@stx) ((lambda () (begin (hashtable-set! k2643@scheme-stx-hashtable k3484@sym k3490@stx) k3490@stx)))) ((lambda (k3492@t) (if k3492@t ((lambda (k3494@x) ((lambda (k3496@name k3497@label) (k2246@add-subst (k2163@make-rib (list k3496@name) (list k2134@top-mark*) (list k3497@label) '#f '#f) k3488@stx)) (car k3494@x) (cdr k3494@x))) k3492@t) k3488@stx)) (assq k3484@sym k3486@subst)))) (k2212@make-stx k3484@sym k2134@top-mark* '() '()))) (k1749@k1361@library-subst (k1785@k1433@find-library-by-name '(psyntax system $all))))))) (set! k2647@lexical-var car) (set! k2649@lexical-mutable? cdr) (set! k2651@set-lexical-mutable! set-cdr!) (set! k2653@add-lexical (lambda (k3500@lab k3501@lex k3502@r) (cons (cons* k3500@lab 'lexical k3501@lex '#f) k3502@r))) (set! k2655@add-lexicals (lambda (k3506@lab* k3507@lex* k3508@r) (if (null? k3506@lab*) k3508@r (k2655@add-lexicals (cdr k3506@lab*) (cdr k3507@lex*) (k2653@add-lexical (car k3506@lab*) (car k3507@lex*) k3508@r))))) (set! k2657@letrec-helper (lambda (k3512@e k3513@r k3514@mr k3515@build) ((lambda (k3520@t) ((lambda (k3522@ls/false) (if k3522@ls/false (apply (lambda (k3524@lhs* k3525@rhs* k3526@b k3527@b*) (if (not (k2276@valid-bound-ids? k3524@lhs*)) (k2693@invalid-fmls-error k3512@e k3524@lhs*) ((lambda (k3532@lex* k3533@lab*) ((lambda (k3536@rib k3537@r) ((lambda (k3540@body k3541@rhs*) (k3515@build '#f k3532@lex* k3541@rhs* k3540@body)) (k2819@chi-internal (k2246@add-subst k3536@rib (cons k3526@b k3527@b*)) k3537@r k3514@mr) (k2793@chi-expr* (map (lambda (k3544@x) (k2246@add-subst k3536@rib k3544@x)) k3525@rhs*) k3537@r k3514@mr))) (k2197@make-full-rib k3524@lhs* k3533@lab*) (k2655@add-lexicals k3533@lab* k3532@lex* k3513@r))) (map k2138@gen-lexical k3524@lhs*) (map k2142@gen-label k3524@lhs*)))) k3522@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k3520@t))) (k2763@syntax-dispatch k3520@t '(_ #(each (any any)) any . each-any)))) k3512@e))) (set! k2659@letrec-transformer (lambda (k3546@e k3547@r k3548@mr) (k2657@letrec-helper k3546@e k3547@r k3548@mr k2107@k1966@build-letrec))) (set! k2661@letrec*-transformer (lambda (k3552@e k3553@r k3554@mr) (k2657@letrec-helper k3552@e k3553@r k3554@mr k2108@k1968@build-letrec*))) (set! k2663@fluid-let-syntax-transformer (lambda (k3558@e k3559@r k3560@mr) ((lambda (k3565@lookup) (begin (set! k3565@lookup (lambda (k3584@x) (or (k2292@id->label k3584@x) (k2996@syntax-violation '#f '"unbound identifier" k3558@e k3584@x)))) ((lambda (k3566@t) ((lambda (k3568@ls/false) (if k3568@ls/false (apply (lambda (k3570@lhs* k3571@rhs* k3572@b k3573@b*) (if (not (k2276@valid-bound-ids? k3570@lhs*)) (k2693@invalid-fmls-error k3558@e k3570@lhs*) ((lambda (k3578@lab* k3579@rhs*) (k2819@chi-internal (cons k3572@b k3573@b*) (append (map cons k3578@lab* k3579@rhs*) k3559@r) (append (map cons k3578@lab* k3579@rhs*) k3560@mr))) (map k3565@lookup k3570@lhs*) (map (lambda (k3582@x) (k2328@make-eval-transformer (k2856@expand-transformer k3582@x k3560@mr))) k3571@rhs*)))) k3568@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k3566@t))) (k2763@syntax-dispatch k3566@t '(_ #(each (any any)) any . each-any)))) k3558@e))) '#f))) (set! k2665@type-descriptor-transformer (lambda (k3586@e k3587@r k3588@mr) ((lambda (k3592@t) ((lambda (k3594@ls/false) (if (and k3594@ls/false (apply (lambda (k3596@id) (k2266@id? k3596@id)) k3594@ls/false)) (apply (lambda (k3598@id) ((lambda (k3600@lab) ((lambda (k3602@b) ((lambda (k3604@type) ((lambda () (begin (if (not k3600@lab) (k2304@raise-unbound-error k3598@id) (void)) (if (not (and (eq? k3604@type '$rtd) (not (list? (k2302@binding-value k3602@b))))) (k2996@syntax-violation '#f '"not a record type" k3586@e) (void)) (list 'quote (k2302@binding-value k3602@b)))))) (k2300@binding-type k3602@b))) (k2296@label->binding k3600@lab k3587@r))) (k2292@id->label k3598@id))) k3594@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k3592@t))) (k2763@syntax-dispatch k3592@t '(_ any)))) k3586@e))) (set! k2667@record-type-descriptor-transformer (lambda (k3606@e k3607@r k3608@mr) ((lambda (k3612@t) ((lambda (k3614@ls/false) (if (and k3614@ls/false (apply (lambda (k3616@id) (k2266@id? k3616@id)) k3614@ls/false)) (apply (lambda (k3618@id) ((lambda (k3620@lab) ((lambda (k3622@b) ((lambda (k3624@type) ((lambda () (begin (if (not k3620@lab) (k2304@raise-unbound-error k3618@id) (void)) (if (not (and (eq? k3624@type '$rtd) (list? (k2302@binding-value k3622@b)))) (k2996@syntax-violation '#f '"not a record type" k3606@e) (void)) (k2797@chi-expr (car (k2302@binding-value k3622@b)) k3607@r k3608@mr))))) (k2300@binding-type k3622@b))) (k2296@label->binding k3620@lab k3607@r))) (k2292@id->label k3618@id))) k3614@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k3612@t))) (k2763@syntax-dispatch k3612@t '(_ any)))) k3606@e))) (set! k2669@record-constructor-descriptor-transformer (lambda (k3626@e k3627@r k3628@mr) ((lambda (k3632@t) ((lambda (k3634@ls/false) (if (and k3634@ls/false (apply (lambda (k3636@id) (k2266@id? k3636@id)) k3634@ls/false)) (apply (lambda (k3638@id) ((lambda (k3640@lab) ((lambda (k3642@b) ((lambda (k3644@type) ((lambda () (begin (if (not k3640@lab) (k2304@raise-unbound-error k3638@id) (void)) (if (not (and (eq? k3644@type '$rtd) (list? (k2302@binding-value k3642@b)))) (k2996@syntax-violation '#f '"invalid type" k3626@e) (void)) (k2797@chi-expr (cadr (k2302@binding-value k3642@b)) k3627@r k3628@mr))))) (k2300@binding-type k3642@b))) (k2296@label->binding k3640@lab k3627@r))) (k2292@id->label k3638@id))) k3634@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k3632@t))) (k2763@syntax-dispatch k3632@t '(_ any)))) k3626@e))) (set! k2671@when-macro (lambda (k3646@e) ((lambda (k3648@t) ((lambda (k3650@ls/false) (if k3650@ls/false (apply (lambda (k3652@test k3653@e k3654@e*) (k2689@bless (list 'if k3652@test (cons 'begin (cons k3653@e k3654@e*))))) k3650@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k3648@t))) (k2763@syntax-dispatch k3648@t '(_ any any . each-any)))) k3646@e))) (set! k2673@unless-macro (lambda (k3658@e) ((lambda (k3660@t) ((lambda (k3662@ls/false) (if k3662@ls/false (apply (lambda (k3664@test k3665@e k3666@e*) (k2689@bless (list 'if (list 'not k3664@test) (cons 'begin (cons k3665@e k3666@e*))))) k3662@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k3660@t))) (k2763@syntax-dispatch k3660@t '(_ any any . each-any)))) k3658@e))) (set! k2675@if-transformer (lambda (k3670@e k3671@r k3672@mr) ((lambda (k3676@t) ((lambda (k3678@ls/false) (if k3678@ls/false (apply (lambda (k3680@e0 k3681@e1 k3682@e2) (list 'if (k2797@chi-expr k3680@e0 k3671@r k3672@mr) (k2797@chi-expr k3681@e1 k3671@r k3672@mr) (k2797@chi-expr k3682@e2 k3671@r k3672@mr))) k3678@ls/false) ((lambda (k3686@t) ((lambda (k3688@ls/false) (if k3688@ls/false (apply (lambda (k3690@e0 k3691@e1) (list 'if (k2797@chi-expr k3690@e0 k3671@r k3672@mr) (k2797@chi-expr k3691@e1 k3671@r k3672@mr) (k2106@k1964@build-void))) k3688@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k3686@t))) (k2763@syntax-dispatch k3686@t '(_ any any)))) k3676@t))) (k2763@syntax-dispatch k3676@t '(_ any any any)))) k3670@e))) (set! k2677@and-transformer (lambda (k3694@e k3695@r k3696@mr) ((lambda (k3700@t) ((lambda (k3702@ls/false) (if k3702@ls/false (apply (lambda (k3704@e*) (cons 'and (k2793@chi-expr* k3704@e* k3695@r k3696@mr))) k3702@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k3700@t))) (k2763@syntax-dispatch k3700@t '(_ . each-any)))) k3694@e))) (set! k2679@or-transformer (lambda (k3706@e k3707@r k3708@mr) ((lambda (k3712@t) ((lambda (k3714@ls/false) (if k3714@ls/false (apply (lambda (k3716@e*) (cons 'or (k2793@chi-expr* k3716@e* k3707@r k3708@mr))) k3714@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k3712@t))) (k2763@syntax-dispatch k3712@t '(_ . each-any)))) k3706@e))) (set! k2681@case-macro (lambda (k3718@e) ((lambda (k3721@build-last k3723@build-one) (begin (set! k3721@build-last (lambda (k3760@cls) ((lambda (k3762@t) ((lambda (k3764@ls/false) (if k3764@ls/false (apply (lambda (k3766@e k3767@e*) (cons 'begin (cons k3766@e k3767@e*))) k3764@ls/false) ((lambda (k3770@t) ((lambda (k3772@ls/false) (if k3772@ls/false (apply (lambda () (k3723@build-one k3760@cls '(if #f #f))) k3772@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k3770@t))) (k2763@syntax-dispatch k3770@t '_))) k3762@t))) (k2763@syntax-dispatch k3762@t '(#(scheme-id else) any . each-any)))) k3760@cls))) (set! k3723@build-one (lambda (k3746@cls k3747@k) ((lambda (k3750@t) ((lambda (k3752@ls/false) (if k3752@ls/false (apply (lambda (k3754@d* k3755@e k3756@e*) (list 'if (list 'memv 't (list 'quote k3754@d*)) (cons 'begin (cons k3755@e k3756@e*)) k3747@k)) k3752@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k3750@t))) (k2763@syntax-dispatch k3750@t '(each-any any . each-any)))) k3746@cls))) ((lambda (k3724@t) ((lambda (k3726@ls/false) (if k3726@ls/false (apply (lambda (k3728@expr) (k2689@bless (cons 'let (cons (list (list 't k3728@expr)) '((if #f #f)))))) k3726@ls/false) ((lambda (k3730@t) ((lambda (k3732@ls/false) (if k3732@ls/false (apply (lambda (k3734@expr k3735@cls k3736@cls*) (k2689@bless (list 'let (list (list 't k3734@expr)) ((letrec ((k3740@f (lambda (k3742@cls k3743@cls*) (if (null? k3743@cls*) (k3721@build-last k3742@cls) (k3723@build-one k3742@cls (k3740@f (car k3743@cls*) (cdr k3743@cls*))))))) k3740@f) k3735@cls k3736@cls*)))) k3732@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k3730@t))) (k2763@syntax-dispatch k3730@t '(_ any any . each-any)))) k3724@t))) (k2763@syntax-dispatch k3724@t '(_ any)))) k3718@e))) '#f '#f))) (set! k2683@quote-transformer (lambda (k3774@e k3775@r k3776@mr) ((lambda (k3780@t) ((lambda (k3782@ls/false) (if k3782@ls/false (apply (lambda (k3784@datum) (list 'quote (k2288@stx->datum k3784@datum))) k3782@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k3780@t))) (k2763@syntax-dispatch k3780@t '(_ any)))) k3774@e))) (set! k2685@case-lambda-transformer (lambda (k3786@e k3787@r k3788@mr) ((lambda (k3792@t) ((lambda (k3794@ls/false) (if k3794@ls/false (apply (lambda (k3796@fmls* k3797@b* k3798@b**) (call-with-values (lambda () (k2805@chi-lambda-clause* k3786@e k3796@fmls* (map cons k3797@b* k3798@b**) k3787@r k3788@mr)) (lambda (k3804@k3802@fmls* k3805@k3803@body*) ((lambda (k3808@body* k3809@fmls*) (k2103@k1914@build-case-lambda '#f k3809@fmls* k3808@body*)) k3805@k3803@body* k3804@k3802@fmls*)))) k3794@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k3792@t))) (k2763@syntax-dispatch k3792@t '(_ . #(each (any any . each-any)))))) k3786@e))) (set! k2687@lambda-transformer (lambda (k3812@e k3813@r k3814@mr) ((lambda (k3818@t) ((lambda (k3820@ls/false) (if k3820@ls/false (apply (lambda (k3822@fmls k3823@b k3824@b*) (call-with-values (lambda () (k2803@chi-lambda-clause k3812@e k3822@fmls (cons k3823@b k3824@b*) k3813@r k3814@mr)) (lambda (k3830@k3828@fmls k3831@k3829@body) ((lambda (k3834@body k3835@fmls) (k2102@k1912@build-lambda '#f k3835@fmls k3834@body)) k3831@k3829@body k3830@k3828@fmls)))) k3820@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k3818@t))) (k2763@syntax-dispatch k3818@t '(_ any any . each-any)))) k3812@e))) (set! k2689@bless (lambda (k3838@x) (k2242@mkstx ((letrec ((k3840@f (lambda (k3842@x) (if (k2210@stx? k3842@x) k3842@x (if (pair? k3842@x) (cons (k3840@f (car k3842@x)) (k3840@f (cdr k3842@x))) (if (symbol? k3842@x) (k2645@scheme-stx k3842@x) (if (vector? k3842@x) (vector-map k3840@f k3842@x) k3842@x))))))) k3840@f) k3838@x) '() '() '()))) (set! k2691@with-syntax-macro (lambda (k3844@e) ((lambda (k3846@t) ((lambda (k3848@ls/false) (if k3848@ls/false (apply (lambda (k3850@pat* k3851@expr* k3852@b k3853@b*) ((lambda (k3858@idn*) (begin (k2801@verify-formals (map car k3858@idn*) k3844@e) ((lambda (k3860@t*) (k2689@bless (list 'let (map list k3860@t* k3851@expr*) ((letrec ((k3862@f (lambda (k3864@pat* k3865@t*) (if (null? k3864@pat*) (cons 'begin (cons '#f (cons k3852@b k3853@b*))) (list 'syntax-case (car k3865@t*) '() (list (car k3864@pat*) (k3862@f (cdr k3864@pat*) (cdr k3865@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car k3864@pat*)) (car k3865@t*)))))))) k3862@f) k3850@pat* k3860@t*)))) (k2978@generate-temporaries k3851@expr*)))) ((letrec ((k3868@f (lambda (k3870@pat*) (if (null? k3870@pat*) '() (call-with-values (lambda () (k2761@convert-pattern (car k3870@pat*) '())) (lambda (k3874@k3872@pat k3875@k3873@idn*) ((lambda (k3878@idn* k3879@pat) (append k3878@idn* (k3868@f (cdr k3870@pat*)))) k3875@k3873@idn* k3874@k3872@pat))))))) k3868@f) k3850@pat*))) k3848@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k3846@t))) (k2763@syntax-dispatch k3846@t '(_ #(each (any any)) any . each-any)))) k3844@e))) (set! k2693@invalid-fmls-error (lambda (k3882@stx k3883@fmls) ((lambda (k3886@t) ((lambda (k3888@ls/false) (if k3888@ls/false (apply (lambda (k3890@id* k3891@last) ((letrec ((k3894@f (lambda (k3896@id*) (if (null? k3896@id*) (values) (if (not (k2266@id? (car k3896@id*))) (k2996@syntax-violation '#f '"not an identifier" k3882@stx (car k3896@id*)) (begin (k3894@f (cdr k3896@id*)) (if (k2280@bound-id-member? (car k3896@id*) (cdr k3896@id*)) (k2996@syntax-violation '#f '"duplicate binding" k3882@stx (car k3896@id*)) (void)))))))) k3894@f) (if (k2266@id? k3891@last) (cons k3891@last k3890@id*) (if (k2256@syntax-null? k3891@last) k3890@id* (k2996@syntax-violation '#f '"not an identifier" k3882@stx k3891@last))))) k3888@ls/false) ((lambda (k3898@t) ((lambda (k3900@ls/false) (if k3900@ls/false (apply (lambda () (k2996@syntax-violation '#f '"malformed binding form" k3882@stx k3883@fmls)) k3900@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k3898@t))) (k2763@syntax-dispatch k3898@t '_))) k3886@t))) (k2763@syntax-dispatch k3886@t '#(each+ any () any)))) k3883@fmls))) (set! k2695@let-macro (lambda (k3902@stx) ((lambda (k3904@t) ((lambda (k3906@ls/false) (if k3906@ls/false (apply (lambda (k3908@lhs* k3909@rhs* k3910@b k3911@b*) (if (k2276@valid-bound-ids? k3908@lhs*) (k2689@bless (cons (cons 'lambda (cons k3908@lhs* (cons k3910@b k3911@b*))) k3909@rhs*)) (k2693@invalid-fmls-error k3902@stx k3908@lhs*))) k3906@ls/false) ((lambda (k3916@t) ((lambda (k3918@ls/false) (if (and k3918@ls/false (apply (lambda (k3920@f k3921@lhs* k3922@rhs* k3923@b k3924@b*) (k2266@id? k3920@f)) k3918@ls/false)) (apply (lambda (k3930@f k3931@lhs* k3932@rhs* k3933@b k3934@b*) (if (k2276@valid-bound-ids? k3931@lhs*) (k2689@bless (cons (list 'letrec (list (list k3930@f (cons 'lambda (cons k3931@lhs* (cons k3933@b k3934@b*))))) k3930@f) k3932@rhs*)) (k2693@invalid-fmls-error k3902@stx k3931@lhs*))) k3918@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k3916@t))) (k2763@syntax-dispatch k3916@t '(_ any #(each (any any)) any . each-any)))) k3904@t))) (k2763@syntax-dispatch k3904@t '(_ #(each (any any)) any . each-any)))) k3902@stx))) (set! k2697@let-values-macro (lambda (k3940@stx) ((lambda (k3943@rename k3945@rename*) (begin (set! k3943@rename (lambda (k4041@x k4042@old* k4043@new*) (begin (if (not (k2266@id? k4041@x)) (k2996@syntax-violation '#f '"not an indentifier" k3940@stx k4041@x) (void)) (if (k2280@bound-id-member? k4041@x k4042@old*) (k2996@syntax-violation '#f '"duplicate binding" k3940@stx k4041@x) (void)) ((lambda (k4047@y) (values k4047@y (cons k4041@x k4042@old*) (cons k4047@y k4043@new*))) (k1150@k914@gensym (k3002@syntax->datum k4041@x)))))) (set! k3945@rename* (lambda (k4023@x* k4024@old* k4025@new*) (if (null? k4023@x*) (values '() k4024@old* k4025@new*) (call-with-values (lambda () (k3943@rename (car k4023@x*) k4024@old* k4025@new*)) (lambda (k4029@x k4030@old* k4031@new*) (call-with-values (lambda () (k3945@rename* (cdr k4023@x*) k4030@old* k4031@new*)) (lambda (k4035@x* k4036@old* k4037@new*) (values (cons k4029@x k4035@x*) k4036@old* k4037@new*)))))))) ((lambda (k3946@t) ((lambda (k3948@ls/false) (if k3948@ls/false (apply (lambda (k3950@b k3951@b*) (cons* (k2689@bless 'let) '() k3950@b k3951@b*)) k3948@ls/false) ((lambda (k3954@t) ((lambda (k3956@ls/false) (if k3956@ls/false (apply (lambda (k3958@lhs* k3959@rhs* k3960@b k3961@b*) (k2689@bless ((letrec ((k3966@f (lambda (k3968@lhs* k3969@rhs* k3970@old* k3971@new*) (if (null? k3968@lhs*) (cons 'let (cons (map list k3970@old* k3971@new*) (cons k3960@b k3961@b*))) ((lambda (k3976@t) ((lambda (k3978@ls/false) (if k3978@ls/false (apply (lambda (k3980@x*) (call-with-values (lambda () (k3945@rename* k3980@x* k3970@old* k3971@new*)) (lambda (k3985@k3982@y* k3986@k3983@old* k3987@k3984@new*) ((lambda (k3991@new* k3992@old* k3993@y*) (list 'call-with-values (list 'lambda '() (car k3969@rhs*)) (list 'lambda k3993@y* (k3966@f (cdr k3968@lhs*) (cdr k3969@rhs*) k3992@old* k3991@new*)))) k3987@k3984@new* k3986@k3983@old* k3985@k3982@y*)))) k3978@ls/false) ((lambda (k3997@t) ((lambda (k3999@ls/false) (if k3999@ls/false (apply (lambda (k4001@x* k4002@x) (call-with-values (lambda () (k3943@rename k4002@x k3970@old* k3971@new*)) (lambda (k4005@y k4006@old* k4007@new*) (call-with-values (lambda () (k3945@rename* k4001@x* k4006@old* k4007@new*)) (lambda (k4011@y* k4012@old* k4013@new*) (list 'call-with-values (list 'lambda '() (car k3969@rhs*)) (list 'lambda (append k4011@y* k4005@y) (k3966@f (cdr k3968@lhs*) (cdr k3969@rhs*) k4012@old* k4013@new*)))))))) k3999@ls/false) ((lambda (k4017@t) ((lambda (k4019@ls/false) (if k4019@ls/false (apply (lambda (k4021@others) (k2996@syntax-violation '#f '"malformed bindings" k3940@stx k4021@others)) k4019@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4017@t))) (k2763@syntax-dispatch k4017@t 'any))) k3997@t))) (k2763@syntax-dispatch k3997@t '#(each+ any () any)))) k3976@t))) (k2763@syntax-dispatch k3976@t 'each-any))) (car k3968@lhs*)))))) k3966@f) k3958@lhs* k3959@rhs* '() '()))) k3956@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k3954@t))) (k2763@syntax-dispatch k3954@t '(_ #(each (any any)) any . each-any)))) k3946@t))) (k2763@syntax-dispatch k3946@t '(_ () any . each-any)))) k3940@stx))) '#f '#f))) (set! k2699@let*-values-macro (lambda (k4049@stx) ((lambda (k4052@check) (begin (set! k4052@check (lambda (k4099@x*) (if (not (null? k4099@x*)) ((lambda (k4101@x) (begin (if (not (k2266@id? k4101@x)) (k2996@syntax-violation '#f '"not an identifier" k4049@stx k4101@x) (void)) (k4052@check (cdr k4099@x*)) (if (k2280@bound-id-member? k4101@x (cdr k4099@x*)) (k2996@syntax-violation '#f '"duplicate identifier" k4049@stx k4101@x) (void)))) (car k4099@x*)) (void)))) ((lambda (k4053@t) ((lambda (k4055@ls/false) (if k4055@ls/false (apply (lambda (k4057@b k4058@b*) (cons* (k2689@bless 'let) '() k4057@b k4058@b*)) k4055@ls/false) ((lambda (k4061@t) ((lambda (k4063@ls/false) (if k4063@ls/false (apply (lambda (k4065@lhs* k4066@rhs* k4067@b k4068@b*) (k2689@bless ((letrec ((k4073@f (lambda (k4075@lhs* k4076@rhs*) (if (null? k4075@lhs*) (cons 'begin (cons k4067@b k4068@b*)) ((lambda (k4079@t) ((lambda (k4081@ls/false) (if k4081@ls/false (apply (lambda (k4083@x*) (begin (k4052@check k4083@x*) (list 'call-with-values (list 'lambda '() (car k4076@rhs*)) (list 'lambda k4083@x* (k4073@f (cdr k4075@lhs*) (cdr k4076@rhs*)))))) k4081@ls/false) ((lambda (k4085@t) ((lambda (k4087@ls/false) (if k4087@ls/false (apply (lambda (k4089@x* k4090@x) (begin (k4052@check (cons k4090@x k4089@x*)) (list 'call-with-values (list 'lambda '() (car k4076@rhs*)) (list 'lambda (append k4089@x* k4090@x) (k4073@f (cdr k4075@lhs*) (cdr k4076@rhs*)))))) k4087@ls/false) ((lambda (k4093@t) ((lambda (k4095@ls/false) (if k4095@ls/false (apply (lambda (k4097@others) (k2996@syntax-violation '#f '"malformed bindings" k4049@stx k4097@others)) k4095@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4093@t))) (k2763@syntax-dispatch k4093@t 'any))) k4085@t))) (k2763@syntax-dispatch k4085@t '#(each+ any () any)))) k4079@t))) (k2763@syntax-dispatch k4079@t 'each-any))) (car k4075@lhs*)))))) k4073@f) k4065@lhs* k4066@rhs*))) k4063@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4061@t))) (k2763@syntax-dispatch k4061@t '(_ #(each (any any)) any . each-any)))) k4053@t))) (k2763@syntax-dispatch k4053@t '(_ () any . each-any)))) k4049@stx))) '#f))) (set! k2701@trace-lambda-macro (lambda (k4103@stx) ((lambda (k4105@t) ((lambda (k4107@ls/false) (if k4107@ls/false (apply (lambda (k4109@who k4110@fmls k4111@b k4112@b*) (if (k2276@valid-bound-ids? k4110@fmls) (k2689@bless (list 'make-traced-procedure (list 'quote k4109@who) (cons 'lambda (cons k4110@fmls (cons k4111@b k4112@b*))))) (k2693@invalid-fmls-error k4103@stx k4110@fmls))) k4107@ls/false) ((lambda (k4117@t) ((lambda (k4119@ls/false) (if k4119@ls/false (apply (lambda (k4121@who k4122@fmls k4123@last k4124@b k4125@b*) (if (k2276@valid-bound-ids? (cons k4123@last k4122@fmls)) (k2689@bless (list 'make-traced-procedure (list 'quote k4121@who) (cons 'lambda (cons (append k4122@fmls k4123@last) (cons k4124@b k4125@b*))))) (k2693@invalid-fmls-error k4103@stx (append k4122@fmls k4123@last)))) k4119@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4117@t))) (k2763@syntax-dispatch k4117@t '(_ any #(each+ any () any) any . each-any)))) k4105@t))) (k2763@syntax-dispatch k4105@t '(_ any each-any any . each-any)))) k4103@stx))) (set! k2703@trace-define-macro (lambda (k4131@stx) ((lambda (k4133@t) ((lambda (k4135@ls/false) (if k4135@ls/false (apply (lambda (k4137@who k4138@fmls k4139@b k4140@b*) (if (k2276@valid-bound-ids? k4138@fmls) (k2689@bless (list 'define k4137@who (list 'make-traced-procedure (list 'quote k4137@who) (cons 'lambda (cons k4138@fmls (cons k4139@b k4140@b*)))))) (k2693@invalid-fmls-error k4131@stx k4138@fmls))) k4135@ls/false) ((lambda (k4145@t) ((lambda (k4147@ls/false) (if k4147@ls/false (apply (lambda (k4149@who k4150@fmls k4151@last k4152@b k4153@b*) (if (k2276@valid-bound-ids? (cons k4151@last k4150@fmls)) (k2689@bless (list 'define k4149@who (list 'make-traced-procedure (list 'quote k4149@who) (cons 'lambda (cons (append k4150@fmls k4151@last) (cons k4152@b k4153@b*)))))) (k2693@invalid-fmls-error k4131@stx (append k4150@fmls k4151@last)))) k4147@ls/false) ((lambda (k4159@t) ((lambda (k4161@ls/false) (if k4161@ls/false (apply (lambda (k4163@who k4164@expr) (if (k2266@id? k4163@who) (k2689@bless (list 'define k4163@who (list 'let (list (list 'v k4164@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote k4163@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (k2996@syntax-violation '#f '"invalid name" k4131@stx))) k4161@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4159@t))) (k2763@syntax-dispatch k4159@t '(_ any any)))) k4145@t))) (k2763@syntax-dispatch k4145@t '(_ (any . #(each+ any () any)) any . each-any)))) k4133@t))) (k2763@syntax-dispatch k4133@t '(_ (any . each-any) any . each-any)))) k4131@stx))) (set! k2705@trace-define-syntax-macro (lambda (k4167@stx) ((lambda (k4169@t) ((lambda (k4171@ls/false) (if k4171@ls/false (apply (lambda (k4173@who k4174@expr) (if (k2266@id? k4173@who) (k2689@bless (list 'define-syntax k4173@who (list 'make-traced-macro (list 'quote k4173@who) k4174@expr))) (k2996@syntax-violation '#f '"invalid name" k4167@stx))) k4171@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4169@t))) (k2763@syntax-dispatch k4169@t '(_ any any)))) k4167@stx))) (set! k2707@trace-let/rec-syntax (lambda (k4177@who) (lambda (k4179@stx) ((lambda (k4181@t) ((lambda (k4183@ls/false) (if k4183@ls/false (apply (lambda (k4185@lhs* k4186@rhs* k4187@b k4188@b*) (if (k2276@valid-bound-ids? k4185@lhs*) ((lambda (k4193@rhs*) (k2689@bless (cons k4177@who (cons (map list k4185@lhs* k4193@rhs*) (cons k4187@b k4188@b*))))) (map (lambda (k4195@lhs k4196@rhs) (list 'make-traced-macro (list 'quote k4195@lhs) k4196@rhs)) k4185@lhs* k4186@rhs*)) (k2693@invalid-fmls-error k4179@stx k4185@lhs*))) k4183@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4181@t))) (k2763@syntax-dispatch k4181@t '(_ #(each (any any)) any . each-any)))) k4179@stx)))) (set! k2709@trace-let-syntax-macro (k2707@trace-let/rec-syntax 'let-syntax)) (set! k2711@trace-letrec-syntax-macro (k2707@trace-let/rec-syntax 'letrec-syntax)) (set! k2713@guard-macro (lambda (k4199@x) ((lambda (k4202@gen-clauses) (begin (set! k4202@gen-clauses (lambda (k4225@con k4226@outerk k4227@clause*) ((lambda (k4232@f k4234@f*) (begin (set! k4232@f (lambda (k4285@x k4286@k) ((lambda (k4289@t) ((lambda (k4291@ls/false) (if k4291@ls/false (apply (lambda (k4293@e k4294@p) ((lambda (k4297@t) (list 'let (list (list k4297@t k4293@e)) (list 'if k4297@t (list k4294@p k4297@t) k4286@k))) (k1150@k914@gensym))) k4291@ls/false) ((lambda (k4299@t) ((lambda (k4301@ls/false) (if k4301@ls/false (apply (lambda (k4303@e) ((lambda (k4305@t) (list 'let (list (list k4305@t k4303@e)) (list 'if k4305@t k4305@t k4286@k))) (k1150@k914@gensym))) k4301@ls/false) ((lambda (k4307@t) ((lambda (k4309@ls/false) (if k4309@ls/false (apply (lambda (k4311@e k4312@v k4313@v*) (list 'if k4311@e (cons 'begin (cons k4312@v k4313@v*)) k4286@k)) k4309@ls/false) ((lambda (k4317@t) ((lambda (k4319@ls/false) (if k4319@ls/false (apply (lambda () (k2996@syntax-violation '#f '"invalid guard clause" k4285@x)) k4319@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4317@t))) (k2763@syntax-dispatch k4317@t '_))) k4307@t))) (k2763@syntax-dispatch k4307@t '(any any . each-any)))) k4299@t))) (k2763@syntax-dispatch k4299@t '(any)))) k4289@t))) (k2763@syntax-dispatch k4289@t '(any #(scheme-id =>) any)))) k4285@x))) (set! k4234@f* (lambda (k4245@x*) ((lambda (k4247@t) ((lambda (k4249@ls/false) (if k4249@ls/false (apply (lambda () ((lambda (k4251@g) (values (list k4251@g (list 'lambda '() (list 'raise-continuable k4225@con))) k4251@g)) (k1150@k914@gensym))) k4249@ls/false) ((lambda (k4253@t) ((lambda (k4255@ls/false) (if k4255@ls/false (apply (lambda (k4257@e k4258@e*) (values (cons 'begin (cons k4257@e k4258@e*)) '#f)) k4255@ls/false) ((lambda (k4261@t) ((lambda (k4263@ls/false) (if k4263@ls/false (apply (lambda (k4265@cls k4266@cls*) (call-with-values (lambda () (k4234@f* k4266@cls*)) (lambda (k4271@k4269@e k4272@k4270@g) ((lambda (k4275@g k4276@e) (values (k4232@f k4265@cls k4276@e) k4275@g)) k4272@k4270@g k4271@k4269@e)))) k4263@ls/false) ((lambda (k4279@t) ((lambda (k4281@ls/false) (if k4281@ls/false (apply (lambda (k4283@others) (k2996@syntax-violation '#f '"invalid guard clause" k4283@others)) k4281@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4279@t))) (k2763@syntax-dispatch k4279@t 'any))) k4261@t))) (k2763@syntax-dispatch k4261@t '(any . any)))) k4253@t))) (k2763@syntax-dispatch k4253@t '((#(scheme-id else) any . each-any))))) k4247@t))) (k2763@syntax-dispatch k4247@t '()))) k4245@x*))) (call-with-values (lambda () (k4234@f* k4227@clause*)) (lambda (k4237@k4235@code k4238@k4236@raisek) ((lambda (k4241@raisek k4242@code) (if k4241@raisek (list (list 'call/cc (list 'lambda (list k4241@raisek) (list k4226@outerk (list 'lambda '() k4242@code))))) (list k4226@outerk (list 'lambda '() k4242@code)))) k4238@k4236@raisek k4237@k4235@code))))) '#f '#f))) ((lambda (k4203@t) ((lambda (k4205@ls/false) (if (and k4205@ls/false (apply (lambda (k4207@con k4208@clause* k4209@b k4210@b*) (k2266@id? k4207@con)) k4205@ls/false)) (apply (lambda (k4215@con k4216@clause* k4217@b k4218@b*) ((lambda (k4223@outerk) (k2689@bless (list (list 'call/cc (list 'lambda (list k4223@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list k4215@con) (k4202@gen-clauses k4215@con k4223@outerk k4216@clause*)) (cons 'lambda (cons '() (cons k4217@b k4218@b*)))))))))) (k1150@k914@gensym))) k4205@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4203@t))) (k2763@syntax-dispatch k4203@t '(_ (any . each-any) any . each-any)))) k4199@x))) '#f))) (set! k2715@define-enumeration-macro (lambda (k4321@stx) ((lambda (k4324@set? k4326@remove-dups) (begin (set! k4324@set? (lambda (k4349@x) (or (null? k4349@x) (and (not (memq (car k4349@x) (cdr k4349@x))) (k4324@set? (cdr k4349@x)))))) (set! k4326@remove-dups (lambda (k4347@ls) (if (null? k4347@ls) '() (cons (car k4347@ls) (k4326@remove-dups (remq (car k4347@ls) (cdr k4347@ls))))))) ((lambda (k4327@t) ((lambda (k4329@ls/false) (if (and k4329@ls/false (apply (lambda (k4331@name k4332@id* k4333@maker) (and (k2266@id? k4331@name) (k2266@id? k4333@maker) (for-all k2266@id? k4332@id*))) k4329@ls/false)) (apply (lambda (k4337@name k4338@id* k4339@maker) ((lambda (k4343@name* k4344@mk) (k2689@bless (list 'begin (list 'define k4344@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote k4343@name*)))) (list 'define-syntax k4337@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote k4343@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote k4337@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax k4339@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote k4339@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote k4343@name*)) (cons 'syntax-violation (cons (list 'quote k4339@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons k4344@mk '('(n* ...)))))))))))) (k4326@remove-dups (k3002@syntax->datum k4338@id*)) (k1150@k914@gensym))) k4329@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4327@t))) (k2763@syntax-dispatch k4327@t '(_ any each-any any)))) k4321@stx))) '#f '#f))) (set! k2717@time-macro (lambda (k4351@stx) ((lambda (k4353@t) ((lambda (k4355@ls/false) (if k4355@ls/false (apply (lambda (k4357@expr) (k2689@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() k4357@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) k4355@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4353@t))) (k2763@syntax-dispatch k4353@t '(_ any)))) k4351@stx))) (set! k2719@delay-macro (lambda (k4359@stx) ((lambda (k4361@t) ((lambda (k4363@ls/false) (if k4363@ls/false (apply (lambda (k4365@expr) (k2689@bless (list 'make-promise (list 'lambda '() k4365@expr)))) k4363@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4361@t))) (k2763@syntax-dispatch k4361@t '(_ any)))) k4359@stx))) (set! k2721@assert-macro (lambda (k4367@stx) ((lambda (k4369@t) ((lambda (k4371@ls/false) (if k4371@ls/false (apply (lambda (k4373@expr) ((lambda (k4375@pos) (k2689@bless (list 'unless k4373@expr (list 'assertion-error (list 'quote k4373@expr) (list 'quote k4375@pos))))) (or (k2988@expression-position k4367@stx) (k2988@expression-position k4373@expr)))) k4371@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4369@t))) (k2763@syntax-dispatch k4369@t '(_ any)))) k4367@stx))) (set! k2723@endianness-macro (lambda (k4377@stx) ((lambda (k4379@t) ((lambda (k4381@ls/false) (if k4381@ls/false (apply (lambda (k4383@e) ((lambda (k4385@t) (if (memv k4385@t '(little)) (k2689@bless ''little) (if (memv k4385@t '(big)) (k2689@bless ''big) (k2996@syntax-violation '#f '"endianness must be big or little" k4377@stx)))) (k3002@syntax->datum k4383@e))) k4381@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4379@t))) (k2763@syntax-dispatch k4379@t '(_ any)))) k4377@stx))) (set! k2725@identifier-syntax-macro (lambda (k4387@stx) ((lambda (k4389@t) ((lambda (k4391@ls/false) (if k4391@ls/false (apply (lambda (k4393@expr) (k2689@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax k4393@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax k4393@expr) '((syntax (e* ...)))))))))) k4391@ls/false) ((lambda (k4395@t) ((lambda (k4397@ls/false) (if (and k4397@ls/false (apply (lambda (k4399@id1 k4400@expr1 k4401@id2 k4402@expr2 k4403@expr3) (and (k2266@id? k4399@id1) (k2266@id? k4401@id2) (k2266@id? k4402@expr2))) k4397@ls/false)) (apply (lambda (k4409@id1 k4410@expr1 k4411@id2 k4412@expr2 k4413@expr3) (k2689@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax k4410@expr1)) (list (list 'set! 'id k4412@expr2) (list 'syntax k4413@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons k4410@expr1 '(e* ...))))))))) k4397@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4395@t))) (k2763@syntax-dispatch k4395@t '(_ (any any) ((#(scheme-id set!) any any) any))))) k4389@t))) (k2763@syntax-dispatch k4389@t '(_ any)))) k4387@stx))) (set! k2727@do-macro (lambda (k4419@stx) ((lambda (k4422@bind) (begin (set! k4422@bind (lambda (k4445@x) ((lambda (k4447@t) ((lambda (k4449@ls/false) (if k4449@ls/false (apply (lambda (k4451@x k4452@init) (list k4451@x k4452@init k4451@x)) k4449@ls/false) ((lambda (k4455@t) ((lambda (k4457@ls/false) (if k4457@ls/false (apply (lambda (k4459@x k4460@init k4461@step) (list k4459@x k4460@init k4461@step)) k4457@ls/false) ((lambda (k4465@t) ((lambda (k4467@ls/false) (if k4467@ls/false (apply (lambda () (k2996@syntax-violation '#f '"invalid binding" k4419@stx)) k4467@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4465@t))) (k2763@syntax-dispatch k4465@t '_))) k4455@t))) (k2763@syntax-dispatch k4455@t '(any any any)))) k4447@t))) (k2763@syntax-dispatch k4447@t '(any any)))) k4445@x))) ((lambda (k4423@t) ((lambda (k4425@ls/false) (if k4425@ls/false (apply (lambda (k4427@binding* k4428@test k4429@expr* k4430@command*) ((lambda (k4435@t) ((lambda (k4437@ls/false) (if k4437@ls/false (apply (lambda (k4439@x* k4440@init* k4441@step*) (if (k2276@valid-bound-ids? k4439@x*) (k2689@bless (list 'letrec (list (list 'loop (list 'lambda k4439@x* (list 'if k4428@test (cons 'begin (cons '(if #f #f) k4429@expr*)) (cons 'begin (append k4430@command* (list (cons 'loop k4441@step*)))))))) (cons 'loop k4440@init*))) (k2996@syntax-violation '#f '"invalid bindings" k4419@stx))) k4437@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4435@t))) (k2763@syntax-dispatch k4435@t '#(each (any any any))))) (map k4422@bind k4427@binding*))) k4425@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4423@t))) (k2763@syntax-dispatch k4423@t '(_ each-any (any . each-any) . each-any)))) k4419@stx))) '#f))) (set! k2729@let*-macro (lambda (k4469@stx) ((lambda (k4471@t) ((lambda (k4473@ls/false) (if (and k4473@ls/false (apply (lambda (k4475@lhs* k4476@rhs* k4477@b k4478@b*) (for-all k2266@id? k4475@lhs*)) k4473@ls/false)) (apply (lambda (k4483@lhs* k4484@rhs* k4485@b k4486@b*) (k2689@bless ((letrec ((k4491@f (lambda (k4493@x*) (if (null? k4493@x*) (cons 'let (cons '() (cons k4485@b k4486@b*))) (list 'let (list (car k4493@x*)) (k4491@f (cdr k4493@x*))))))) k4491@f) (map list k4483@lhs* k4484@rhs*)))) k4473@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4471@t))) (k2763@syntax-dispatch k4471@t '(_ #(each (any any)) any . each-any)))) k4469@stx))) (set! k2731@or-macro (lambda (k4495@stx) ((lambda (k4497@t) ((lambda (k4499@ls/false) (if k4499@ls/false (apply (lambda () '#f) k4499@ls/false) ((lambda (k4501@t) ((lambda (k4503@ls/false) (if k4503@ls/false (apply (lambda (k4505@e k4506@e*) (k2689@bless ((letrec ((k4509@f (lambda (k4511@e k4512@e*) (if (null? k4512@e*) (list 'begin '#f k4511@e) (list 'let (list (list 't k4511@e)) (list 'if 't 't (k4509@f (car k4512@e*) (cdr k4512@e*)))))))) k4509@f) k4505@e k4506@e*))) k4503@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4501@t))) (k2763@syntax-dispatch k4501@t '(_ any . each-any)))) k4497@t))) (k2763@syntax-dispatch k4497@t '(_)))) k4495@stx))) (set! k2733@and-macro (lambda (k4515@stx) ((lambda (k4517@t) ((lambda (k4519@ls/false) (if k4519@ls/false (apply (lambda () '#t) k4519@ls/false) ((lambda (k4521@t) ((lambda (k4523@ls/false) (if k4523@ls/false (apply (lambda (k4525@e k4526@e*) (k2689@bless ((letrec ((k4529@f (lambda (k4531@e k4532@e*) (if (null? k4532@e*) (list 'begin '#f k4531@e) (cons 'if (cons k4531@e (cons (k4529@f (car k4532@e*) (cdr k4532@e*)) '(#f)))))))) k4529@f) k4525@e k4526@e*))) k4523@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4521@t))) (k2763@syntax-dispatch k4521@t '(_ any . each-any)))) k4517@t))) (k2763@syntax-dispatch k4517@t '(_)))) k4515@stx))) (set! k2735@cond-macro (lambda (k4535@stx) ((lambda (k4537@t) ((lambda (k4539@ls/false) (if k4539@ls/false (apply (lambda (k4541@cls k4542@cls*) (k2689@bless ((letrec ((k4545@f (lambda (k4547@cls k4548@cls*) (if (null? k4548@cls*) ((lambda (k4551@t) ((lambda (k4553@ls/false) (if k4553@ls/false (apply (lambda (k4555@e k4556@e*) (cons 'begin (cons k4555@e k4556@e*))) k4553@ls/false) ((lambda (k4559@t) ((lambda (k4561@ls/false) (if k4561@ls/false (apply (lambda (k4563@e k4564@p) (list 'let (list (list 't k4563@e)) (list 'if 't (cons k4564@p '(t))))) k4561@ls/false) ((lambda (k4567@t) ((lambda (k4569@ls/false) (if k4569@ls/false (apply (lambda (k4571@e) (cons 'or (cons k4571@e '((if #f #f))))) k4569@ls/false) ((lambda (k4573@t) ((lambda (k4575@ls/false) (if k4575@ls/false (apply (lambda (k4577@e k4578@e*) (list 'if k4577@e (cons 'begin k4578@e*))) k4575@ls/false) ((lambda (k4581@t) ((lambda (k4583@ls/false) (if k4583@ls/false (apply (lambda () (k2996@syntax-violation '#f '"invalid last clause" k4535@stx)) k4583@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4581@t))) (k2763@syntax-dispatch k4581@t '_))) k4573@t))) (k2763@syntax-dispatch k4573@t '(any . each-any)))) k4567@t))) (k2763@syntax-dispatch k4567@t '(any)))) k4559@t))) (k2763@syntax-dispatch k4559@t '(any #(scheme-id =>) any)))) k4551@t))) (k2763@syntax-dispatch k4551@t '(#(scheme-id else) any . each-any)))) k4547@cls) ((lambda (k4585@t) ((lambda (k4587@ls/false) (if k4587@ls/false (apply (lambda (k4589@e k4590@e*) (k2996@syntax-violation '#f '"incorrect position of keyword else" k4535@stx)) k4587@ls/false) ((lambda (k4593@t) ((lambda (k4595@ls/false) (if k4595@ls/false (apply (lambda (k4597@e k4598@p) (list 'let (list (list 't k4597@e)) (list 'if 't (cons k4598@p '(t)) (k4545@f (car k4548@cls*) (cdr k4548@cls*))))) k4595@ls/false) ((lambda (k4601@t) ((lambda (k4603@ls/false) (if k4603@ls/false (apply (lambda (k4605@e) (list 'or k4605@e (k4545@f (car k4548@cls*) (cdr k4548@cls*)))) k4603@ls/false) ((lambda (k4607@t) ((lambda (k4609@ls/false) (if k4609@ls/false (apply (lambda (k4611@e k4612@e*) (list 'if k4611@e (cons 'begin k4612@e*) (k4545@f (car k4548@cls*) (cdr k4548@cls*)))) k4609@ls/false) ((lambda (k4615@t) ((lambda (k4617@ls/false) (if k4617@ls/false (apply (lambda () (k2996@syntax-violation '#f '"invalid last clause" k4535@stx)) k4617@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4615@t))) (k2763@syntax-dispatch k4615@t '_))) k4607@t))) (k2763@syntax-dispatch k4607@t '(any . each-any)))) k4601@t))) (k2763@syntax-dispatch k4601@t '(any)))) k4593@t))) (k2763@syntax-dispatch k4593@t '(any #(scheme-id =>) any)))) k4585@t))) (k2763@syntax-dispatch k4585@t '(#(scheme-id else) any . each-any)))) k4547@cls))))) k4545@f) k4541@cls k4542@cls*))) k4539@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4537@t))) (k2763@syntax-dispatch k4537@t '(_ any . each-any)))) k4535@stx))) (set! k2737@do-include (lambda (k4619@stx k4620@id k4621@filename) ((lambda (k4625@filename) (begin (if (not (and (string? k4625@filename) (k2266@id? k4620@id))) (k2996@syntax-violation '#f '"invalid syntax" k4619@stx) (void)) (cons (k2689@bless 'begin) (with-input-from-file k4625@filename (lambda () ((letrec ((k4627@f (lambda (k4629@ls) ((lambda (k4631@x) (if (eof-object? k4631@x) (reverse k4629@ls) (k4627@f (cons (k2232@datum->stx k4620@id k4631@x) k4629@ls)))) (k1151@k916@read-annotated))))) k4627@f) '())))))) (k2288@stx->datum k4621@filename)))) (set! k2739@include-macro (lambda (k4633@e) ((lambda (k4635@t) ((lambda (k4637@ls/false) (if k4637@ls/false (apply (lambda (k4639@id k4640@filename) (k2737@do-include k4633@e k4639@id k4640@filename)) k4637@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4635@t))) (k2763@syntax-dispatch k4635@t '(any any)))) k4633@e))) (set! k2741@include-into-macro (lambda (k4643@e) ((lambda (k4645@t) ((lambda (k4647@ls/false) (if k4647@ls/false (apply (lambda (k4649@id k4650@filename) (k2737@do-include k4643@e k4649@id k4650@filename)) k4647@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4645@t))) (k2763@syntax-dispatch k4645@t '(_ any any)))) k4643@e))) (set! k2743@syntax-rules-macro (lambda (k4653@e) ((lambda (k4655@t) ((lambda (k4657@ls/false) (if k4657@ls/false (apply (lambda (k4659@lits k4660@pat* k4661@tmp*) (begin (k2769@verify-literals k4659@lits k4653@e) (k2689@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons k4659@lits (map (lambda (k4665@pat k4666@tmp) ((lambda (k4669@t) ((lambda (k4671@ls/false) (if k4671@ls/false (apply (lambda (k4673@rest) (list (cons 'g k4673@rest) (list 'syntax k4666@tmp))) k4671@ls/false) ((lambda (k4675@t) ((lambda (k4677@ls/false) (if k4677@ls/false (apply (lambda () (k2996@syntax-violation '#f '"invalid syntax-rules pattern" k4653@e k4665@pat)) k4677@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4675@t))) (k2763@syntax-dispatch k4675@t '_))) k4669@t))) (k2763@syntax-dispatch k4669@t '(_ . any)))) k4665@pat)) k4660@pat* k4661@tmp*)))))))) k4657@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4655@t))) (k2763@syntax-dispatch k4655@t '(_ each-any . #(each (any any)))))) k4653@e))) (set! k2745@quasiquote-macro ((lambda () ((lambda (k4680@datum k4708@quasicons* k4710@quasicons k4712@quasiappend k4714@quasivector k4716@vquasi k4718@quasi) (begin (set! k4680@datum (lambda (k4937@x) (list (k2645@scheme-stx 'quote) (k2242@mkstx k4937@x '() '() '())))) (set! k4708@quasicons* (lambda (k4929@x k4930@y) ((letrec ((k4933@f (lambda (k4935@x) (if (null? k4935@x) k4930@y (k4710@quasicons (car k4935@x) (k4933@f (cdr k4935@x))))))) k4933@f) k4929@x))) (set! k4710@quasicons (lambda (k4891@x k4892@y) ((lambda (k4895@t) ((lambda (k4897@ls/false) (if k4897@ls/false (apply (lambda (k4899@dy) ((lambda (k4901@t) ((lambda (k4903@ls/false) (if k4903@ls/false (apply (lambda (k4905@dx) (list (k2645@scheme-stx 'quote) (cons k4905@dx k4899@dy))) k4903@ls/false) ((lambda (k4907@t) ((lambda (k4909@ls/false) (if k4909@ls/false (apply (lambda () ((lambda (k4911@t) ((lambda (k4913@ls/false) (if k4913@ls/false (apply (lambda () (list (k2645@scheme-stx 'list) k4891@x)) k4913@ls/false) ((lambda (k4915@t) ((lambda (k4917@ls/false) (if k4917@ls/false (apply (lambda () (list (k2645@scheme-stx 'cons) k4891@x k4892@y)) k4917@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4915@t))) (k2763@syntax-dispatch k4915@t '_))) k4911@t))) (k2763@syntax-dispatch k4911@t '()))) k4899@dy)) k4909@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4907@t))) (k2763@syntax-dispatch k4907@t '_))) k4901@t))) (k2763@syntax-dispatch k4901@t '(#(scheme-id quote) any)))) k4891@x)) k4897@ls/false) ((lambda (k4919@t) ((lambda (k4921@ls/false) (if k4921@ls/false (apply (lambda (k4923@stuff) (cons* (k2645@scheme-stx 'list) k4891@x k4923@stuff)) k4921@ls/false) ((lambda (k4925@t) ((lambda (k4927@ls/false) (if k4927@ls/false (apply (lambda () (list (k2645@scheme-stx 'cons) k4891@x k4892@y)) k4927@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4925@t))) (k2763@syntax-dispatch k4925@t '_))) k4919@t))) (k2763@syntax-dispatch k4919@t '(#(scheme-id list) . each-any)))) k4895@t))) (k2763@syntax-dispatch k4895@t '(#(scheme-id quote) any)))) k4892@y))) (set! k4712@quasiappend (lambda (k4865@x k4866@y) ((lambda (k4869@ls) (if (null? k4869@ls) (list (k2645@scheme-stx 'quote) '()) (if (null? (cdr k4869@ls)) (car k4869@ls) (cons* (k2645@scheme-stx 'append) k4869@ls)))) ((letrec ((k4871@f (lambda (k4873@x) (if (null? k4873@x) ((lambda (k4875@t) ((lambda (k4877@ls/false) (if k4877@ls/false (apply (lambda () '()) k4877@ls/false) ((lambda (k4879@t) ((lambda (k4881@ls/false) (if k4881@ls/false (apply (lambda () (list k4866@y)) k4881@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4879@t))) (k2763@syntax-dispatch k4879@t '_))) k4875@t))) (k2763@syntax-dispatch k4875@t '(#(scheme-id quote) ())))) k4866@y) ((lambda (k4883@t) ((lambda (k4885@ls/false) (if k4885@ls/false (apply (lambda () (k4871@f (cdr k4873@x))) k4885@ls/false) ((lambda (k4887@t) ((lambda (k4889@ls/false) (if k4889@ls/false (apply (lambda () (cons (car k4873@x) (k4871@f (cdr k4873@x)))) k4889@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4887@t))) (k2763@syntax-dispatch k4887@t '_))) k4883@t))) (k2763@syntax-dispatch k4883@t '(#(scheme-id quote) ())))) (car k4873@x)))))) k4871@f) k4865@x)))) (set! k4714@quasivector (lambda (k4815@x) ((lambda (k4817@pat-x) ((lambda (k4819@t) ((lambda (k4821@ls/false) (if k4821@ls/false (apply (lambda (k4823@x*) (list (k2645@scheme-stx 'quote) (list->vector k4823@x*))) k4821@ls/false) ((lambda (k4825@t) ((lambda (k4827@ls/false) (if k4827@ls/false (apply (lambda () ((letrec ((k4829@f (lambda (k4831@x k4832@k) ((lambda (k4835@t) ((lambda (k4837@ls/false) (if k4837@ls/false (apply (lambda (k4839@x*) (k4832@k (map (lambda (k4841@x) (list (k2645@scheme-stx 'quote) k4841@x)) k4839@x*))) k4837@ls/false) ((lambda (k4843@t) ((lambda (k4845@ls/false) (if k4845@ls/false (apply (lambda (k4847@x*) (k4832@k k4847@x*)) k4845@ls/false) ((lambda (k4849@t) ((lambda (k4851@ls/false) (if k4851@ls/false (apply (lambda (k4853@x k4854@y) (k4829@f k4854@y (lambda (k4857@ls) (k4832@k (cons k4853@x k4857@ls))))) k4851@ls/false) ((lambda (k4859@t) ((lambda (k4861@ls/false) (if k4861@ls/false (apply (lambda () (list (k2645@scheme-stx 'list->vector) k4817@pat-x)) k4861@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4859@t))) (k2763@syntax-dispatch k4859@t '_))) k4849@t))) (k2763@syntax-dispatch k4849@t '(#(scheme-id cons) any any)))) k4843@t))) (k2763@syntax-dispatch k4843@t '(#(scheme-id list) . each-any)))) k4835@t))) (k2763@syntax-dispatch k4835@t '(#(scheme-id quote) each-any)))) k4831@x)))) k4829@f) k4815@x (lambda (k4863@ls) (cons* (k2645@scheme-stx 'vector) k4863@ls)))) k4827@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4825@t))) (k2763@syntax-dispatch k4825@t '_))) k4819@t))) (k2763@syntax-dispatch k4819@t '(#(scheme-id quote) each-any)))) k4817@pat-x)) k4815@x))) (set! k4716@vquasi (lambda (k4781@p k4782@lev) ((lambda (k4785@t) ((lambda (k4787@ls/false) (if k4787@ls/false (apply (lambda (k4789@p k4790@q) ((lambda (k4793@t) ((lambda (k4795@ls/false) (if k4795@ls/false (apply (lambda (k4797@p) (if (= k4782@lev '0) (k4708@quasicons* k4797@p (k4716@vquasi k4790@q k4782@lev)) (k4710@quasicons (k4710@quasicons (k4680@datum 'unquote) (k4718@quasi k4797@p (- k4782@lev '1))) (k4716@vquasi k4790@q k4782@lev)))) k4795@ls/false) ((lambda (k4799@t) ((lambda (k4801@ls/false) (if k4801@ls/false (apply (lambda (k4803@p) (if (= k4782@lev '0) (k4712@quasiappend k4803@p (k4716@vquasi k4790@q k4782@lev)) (k4710@quasicons (k4710@quasicons (k4680@datum 'unquote-splicing) (k4718@quasi k4803@p (- k4782@lev '1))) (k4716@vquasi k4790@q k4782@lev)))) k4801@ls/false) ((lambda (k4805@t) ((lambda (k4807@ls/false) (if k4807@ls/false (apply (lambda (k4809@p) (k4710@quasicons (k4718@quasi k4809@p k4782@lev) (k4716@vquasi k4790@q k4782@lev))) k4807@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4805@t))) (k2763@syntax-dispatch k4805@t 'any))) k4799@t))) (k2763@syntax-dispatch k4799@t '(#(scheme-id unquote-splicing) . each-any)))) k4793@t))) (k2763@syntax-dispatch k4793@t '(#(scheme-id unquote) . each-any)))) k4789@p)) k4787@ls/false) ((lambda (k4811@t) ((lambda (k4813@ls/false) (if k4813@ls/false (apply (lambda () (list (k2645@scheme-stx 'quote) '())) k4813@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4811@t))) (k2763@syntax-dispatch k4811@t '()))) k4785@t))) (k2763@syntax-dispatch k4785@t '(any . any)))) k4781@p))) (set! k4718@quasi (lambda (k4727@p k4728@lev) ((lambda (k4731@t) ((lambda (k4733@ls/false) (if k4733@ls/false (apply (lambda (k4735@p) (if (= k4728@lev '0) k4735@p (k4710@quasicons (k4680@datum 'unquote) (k4718@quasi (list k4735@p) (- k4728@lev '1))))) k4733@ls/false) ((lambda (k4737@t) ((lambda (k4739@ls/false) (if k4739@ls/false (apply (lambda (k4741@p k4742@q) (if (= k4728@lev '0) (k4708@quasicons* k4741@p (k4718@quasi k4742@q k4728@lev)) (k4710@quasicons (k4710@quasicons (k4680@datum 'unquote) (k4718@quasi k4741@p (- k4728@lev '1))) (k4718@quasi k4742@q k4728@lev)))) k4739@ls/false) ((lambda (k4745@t) ((lambda (k4747@ls/false) (if k4747@ls/false (apply (lambda (k4749@p k4750@q) (if (= k4728@lev '0) (k4712@quasiappend k4749@p (k4718@quasi k4750@q k4728@lev)) (k4710@quasicons (k4710@quasicons (k4680@datum 'unquote-splicing) (k4718@quasi k4749@p (- k4728@lev '1))) (k4718@quasi k4750@q k4728@lev)))) k4747@ls/false) ((lambda (k4753@t) ((lambda (k4755@ls/false) (if k4755@ls/false (apply (lambda (k4757@p) (k4710@quasicons (k4680@datum 'quasiquote) (k4718@quasi (list k4757@p) (+ k4728@lev '1)))) k4755@ls/false) ((lambda (k4759@t) ((lambda (k4761@ls/false) (if k4761@ls/false (apply (lambda (k4763@p k4764@q) (k4710@quasicons (k4718@quasi k4763@p k4728@lev) (k4718@quasi k4764@q k4728@lev))) k4761@ls/false) ((lambda (k4767@t) ((lambda (k4769@ls/false) (if (and k4769@ls/false (apply (lambda (k4771@x) (not (k2210@stx? k4771@x))) k4769@ls/false)) (apply (lambda (k4773@x) (k4714@quasivector (k4716@vquasi k4773@x k4728@lev))) k4769@ls/false) ((lambda (k4775@t) ((lambda (k4777@ls/false) (if k4777@ls/false (apply (lambda (k4779@p) (list (k2645@scheme-stx 'quote) k4779@p)) k4777@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4775@t))) (k2763@syntax-dispatch k4775@t 'any))) k4767@t))) (k2763@syntax-dispatch k4767@t '#(vector each-any)))) k4759@t))) (k2763@syntax-dispatch k4759@t '(any . any)))) k4753@t))) (k2763@syntax-dispatch k4753@t '(#(scheme-id quasiquote) any)))) k4745@t))) (k2763@syntax-dispatch k4745@t '((#(scheme-id unquote-splicing) . each-any) . any)))) k4737@t))) (k2763@syntax-dispatch k4737@t '((#(scheme-id unquote) . each-any) . any)))) k4731@t))) (k2763@syntax-dispatch k4731@t '(#(scheme-id unquote) any)))) k4727@p))) (lambda (k4719@x) ((lambda (k4721@t) ((lambda (k4723@ls/false) (if k4723@ls/false (apply (lambda (k4725@e) (k4718@quasi k4725@e '0)) k4723@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4721@t))) (k2763@syntax-dispatch k4721@t '(_ any)))) k4719@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! k2747@quasisyntax-macro ((lambda () ((lambda (k4940@quasi) (begin (set! k4940@quasi (lambda (k4964@p k4965@lev) ((lambda (k4968@t) ((lambda (k4970@ls/false) (if k4970@ls/false (apply (lambda (k4972@p) (if (= k4965@lev '0) ((lambda (k4974@g) (values (list k4974@g) (list k4972@p) k4974@g)) (k1150@k914@gensym)) (call-with-values (lambda () (k4940@quasi k4972@p (- k4965@lev '1))) (lambda (k4979@k4976@lhs* k4980@k4977@rhs* k4981@k4978@p) ((lambda (k4985@p k4986@rhs* k4987@lhs*) (values k4987@lhs* k4986@rhs* (list 'unsyntax k4985@p))) k4981@k4978@p k4980@k4977@rhs* k4979@k4976@lhs*))))) k4970@ls/false) ((lambda (k4991@t) ((lambda (k4993@ls/false) (if (and k4993@ls/false (apply (lambda () (= k4965@lev '0)) k4993@ls/false)) (apply (lambda () (k2996@syntax-violation '#f '"incorrect use of unsyntax" k4964@p)) k4993@ls/false) ((lambda (k4995@t) ((lambda (k4997@ls/false) (if k4997@ls/false (apply (lambda (k4999@p* k5000@q) (call-with-values (lambda () (k4940@quasi k5000@q k4965@lev)) (lambda (k5006@k5003@lhs* k5007@k5004@rhs* k5008@k5005@q) ((lambda (k5012@q k5013@rhs* k5014@lhs*) (if (= k4965@lev '0) ((lambda (k5018@g*) (values (append k5018@g* k5014@lhs*) (append k4999@p* k5013@rhs*) (append k5018@g* k5012@q))) (map (lambda (k5020@x) (k1150@k914@gensym)) k4999@p*)) (call-with-values (lambda () (k4940@quasi k4999@p* (- k4965@lev '1))) (lambda (k5025@k5022@lhs2* k5026@k5023@rhs2* k5027@k5024@p*) ((lambda (k5031@p* k5032@rhs2* k5033@lhs2*) (values (append k5033@lhs2* k5014@lhs*) (append k5032@rhs2* k5013@rhs*) (cons (cons 'unsyntax k5031@p*) k5012@q))) k5027@k5024@p* k5026@k5023@rhs2* k5025@k5022@lhs2*))))) k5008@k5005@q k5007@k5004@rhs* k5006@k5003@lhs*)))) k4997@ls/false) ((lambda (k5037@t) ((lambda (k5039@ls/false) (if k5039@ls/false (apply (lambda (k5041@p* k5042@q) (call-with-values (lambda () (k4940@quasi k5042@q k4965@lev)) (lambda (k5048@k5045@lhs* k5049@k5046@rhs* k5050@k5047@q) ((lambda (k5054@q k5055@rhs* k5056@lhs*) (if (= k4965@lev '0) ((lambda (k5060@g*) (values (append (map (lambda (k5062@g) (cons k5062@g '(...))) k5060@g*) k5056@lhs*) (append k5041@p* k5055@rhs*) (append (apply append (map (lambda (k5064@g) (cons k5064@g '(...))) k5060@g*)) k5054@q))) (map (lambda (k5066@x) (k1150@k914@gensym)) k5041@p*)) (call-with-values (lambda () (k4940@quasi k5041@p* (- k4965@lev '1))) (lambda (k5071@k5068@lhs2* k5072@k5069@rhs2* k5073@k5070@p*) ((lambda (k5077@p* k5078@rhs2* k5079@lhs2*) (values (append k5079@lhs2* k5056@lhs*) (append k5078@rhs2* k5055@rhs*) (cons (cons 'unsyntax-splicing k5077@p*) k5054@q))) k5073@k5070@p* k5072@k5069@rhs2* k5071@k5068@lhs2*))))) k5050@k5047@q k5049@k5046@rhs* k5048@k5045@lhs*)))) k5039@ls/false) ((lambda (k5083@t) ((lambda (k5085@ls/false) (if (and k5085@ls/false (apply (lambda () (= k4965@lev '0)) k5085@ls/false)) (apply (lambda () (k2996@syntax-violation '#f '"incorrect use of unsyntax-splicing" k4964@p)) k5085@ls/false) ((lambda (k5087@t) ((lambda (k5089@ls/false) (if k5089@ls/false (apply (lambda (k5091@p) (call-with-values (lambda () (k4940@quasi k5091@p (+ k4965@lev '1))) (lambda (k5096@k5093@lhs* k5097@k5094@rhs* k5098@k5095@p) ((lambda (k5102@p k5103@rhs* k5104@lhs*) (values k5104@lhs* k5103@rhs* (list 'quasisyntax k5102@p))) k5098@k5095@p k5097@k5094@rhs* k5096@k5093@lhs*)))) k5089@ls/false) ((lambda (k5108@t) ((lambda (k5110@ls/false) (if k5110@ls/false (apply (lambda (k5112@p k5113@q) (call-with-values (lambda () (k4940@quasi k5112@p k4965@lev)) (lambda (k5122@k5116@lhs* k5123@k5117@rhs* k5124@k5118@p) (call-with-values (lambda () (k4940@quasi k5113@q k4965@lev)) (lambda (k5128@k5119@lhs2* k5129@k5120@rhs2* k5130@k5121@q) ((lambda (k5134@q k5135@rhs2* k5136@lhs2* k5137@p k5138@rhs* k5139@lhs*) (values (append k5136@lhs2* k5139@lhs*) (append k5135@rhs2* k5138@rhs*) (cons k5137@p k5134@q))) k5130@k5121@q k5129@k5120@rhs2* k5128@k5119@lhs2* k5124@k5118@p k5123@k5117@rhs* k5122@k5116@lhs*)))))) k5110@ls/false) ((lambda (k5146@t) ((lambda (k5148@ls/false) (if k5148@ls/false (apply (lambda (k5150@x*) (call-with-values (lambda () (k4940@quasi k5150@x* k4965@lev)) (lambda (k5155@k5152@lhs* k5156@k5153@rhs* k5157@k5154@x*) ((lambda (k5161@x* k5162@rhs* k5163@lhs*) (values k5163@lhs* k5162@rhs* (list->vector k5161@x*))) k5157@k5154@x* k5156@k5153@rhs* k5155@k5152@lhs*)))) k5148@ls/false) ((lambda (k5167@t) ((lambda (k5169@ls/false) (if k5169@ls/false (apply (lambda () (values '() '() k4964@p)) k5169@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k5167@t))) (k2763@syntax-dispatch k5167@t '_))) k5146@t))) (k2763@syntax-dispatch k5146@t '#(vector each-any)))) k5108@t))) (k2763@syntax-dispatch k5108@t '(any . any)))) k5087@t))) (k2763@syntax-dispatch k5087@t '(#(scheme-id quasisyntax) any)))) k5083@t))) (k2763@syntax-dispatch k5083@t '#(scheme-id unsyntax-splicing)))) k5037@t))) (k2763@syntax-dispatch k5037@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) k4995@t))) (k2763@syntax-dispatch k4995@t '((#(scheme-id unsyntax) . each-any) . any)))) k4991@t))) (k2763@syntax-dispatch k4991@t '#(scheme-id unsyntax)))) k4968@t))) (k2763@syntax-dispatch k4968@t '(#(scheme-id unsyntax) any)))) k4964@p))) (lambda (k4941@x) ((lambda (k4943@t) ((lambda (k4945@ls/false) (if k4945@ls/false (apply (lambda (k4947@e) (call-with-values (lambda () (k4940@quasi k4947@e '0)) (lambda (k4952@k4949@lhs* k4953@k4950@rhs* k4954@k4951@v) ((lambda (k4958@v k4959@rhs* k4960@lhs*) (k2689@bless (list 'syntax-case (cons 'list k4959@rhs*) '() (list k4960@lhs* (list 'syntax k4958@v))))) k4954@k4951@v k4953@k4950@rhs* k4952@k4949@lhs*)))) k4945@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k4943@t))) (k2763@syntax-dispatch k4943@t '(_ any)))) k4941@x)))) '#f)))) (set! k2749@define-struct-macro (lambda (k5171@stx) (k2996@syntax-violation '#f '"define-struct not supported" k5171@stx))) (set! k2751@define-record-type-macro (lambda (k5173@x) ((lambda (k5176@id k5178@get-record-name k5180@get-record-constructor-name k5182@get-record-predicate-name k5184@get-clause k5186@foo-rtd-code k5188@parent-rtd-code k5190@parent-rcd-code k5192@foo-rcd-code k5194@get-protocol-code k5196@get-fields k5198@get-mutator-indices k5200@get-mutators k5202@get-accessors k5204@enumerate k5206@do-define-record k5208@verify-clauses) (begin (set! k5176@id (lambda (k5675@ctxt . k5677@str*) (k3000@datum->syntax k5675@ctxt (string->symbol (apply string-append (map (lambda (k5679@x) (if (symbol? k5679@x) (symbol->string k5679@x) (if (string? k5679@x) k5679@x (assertion-violation 'define-record-type '"BUG")))) k5677@str*)))))) (set! k5178@get-record-name (lambda (k5657@spec) ((lambda (k5659@t) ((lambda (k5661@ls/false) (if k5661@ls/false (apply (lambda (k5663@foo k5664@make-foo k5665@foo?) k5663@foo) k5661@ls/false) ((lambda (k5669@t) ((lambda (k5671@ls/false) (if k5671@ls/false (apply (lambda (k5673@foo) k5673@foo) k5671@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k5669@t))) (k2763@syntax-dispatch k5669@t 'any))) k5659@t))) (k2763@syntax-dispatch k5659@t '(any any any)))) k5657@spec))) (set! k5180@get-record-constructor-name (lambda (k5637@spec) ((lambda (k5639@t) ((lambda (k5641@ls/false) (if k5641@ls/false (apply (lambda (k5643@foo k5644@make-foo k5645@foo?) k5644@make-foo) k5641@ls/false) ((lambda (k5649@t) ((lambda (k5651@ls/false) (if (and k5651@ls/false (apply (lambda (k5653@foo) (k2266@id? k5653@foo)) k5651@ls/false)) (apply (lambda (k5655@foo) (k5176@id k5655@foo '"make-" (k2288@stx->datum k5655@foo))) k5651@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k5649@t))) (k2763@syntax-dispatch k5649@t 'any))) k5639@t))) (k2763@syntax-dispatch k5639@t '(any any any)))) k5637@spec))) (set! k5182@get-record-predicate-name (lambda (k5617@spec) ((lambda (k5619@t) ((lambda (k5621@ls/false) (if k5621@ls/false (apply (lambda (k5623@foo k5624@make-foo k5625@foo?) k5625@foo?) k5621@ls/false) ((lambda (k5629@t) ((lambda (k5631@ls/false) (if (and k5631@ls/false (apply (lambda (k5633@foo) (k2266@id? k5633@foo)) k5631@ls/false)) (apply (lambda (k5635@foo) (k5176@id k5635@foo (k2288@stx->datum k5635@foo) '"?")) k5631@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k5629@t))) (k2763@syntax-dispatch k5629@t 'any))) k5619@t))) (k2763@syntax-dispatch k5619@t '(any any any)))) k5617@spec))) (set! k5184@get-clause (lambda (k5599@id k5600@ls) ((lambda (k5603@t) ((lambda (k5605@ls/false) (if k5605@ls/false (apply (lambda () '#f) k5605@ls/false) ((lambda (k5607@t) ((lambda (k5609@ls/false) (if k5609@ls/false (apply (lambda (k5611@x k5612@rest k5613@ls) (if (k2274@free-id=? (k2689@bless k5599@id) k5611@x) (cons k5611@x k5612@rest) (k5184@get-clause k5599@id k5613@ls))) k5609@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k5607@t))) (k2763@syntax-dispatch k5607@t '((any . any) . any)))) k5603@t))) (k2763@syntax-dispatch k5603@t '()))) k5600@ls))) (set! k5186@foo-rtd-code (lambda (k5517@name k5518@clause* k5519@parent-rtd-code) ((lambda (k5524@convert-field-spec*) (begin (set! k5524@convert-field-spec* (lambda (k5573@ls) (list->vector (map (lambda (k5575@x) ((lambda (k5577@t) ((lambda (k5579@ls/false) (if k5579@ls/false (apply (lambda (k5581@name k5582@rest) (list 'mutable k5581@name)) k5579@ls/false) ((lambda (k5585@t) ((lambda (k5587@ls/false) (if k5587@ls/false (apply (lambda (k5589@name k5590@rest) (list 'immutable k5589@name)) k5587@ls/false) ((lambda (k5593@t) ((lambda (k5595@ls/false) (if k5595@ls/false (apply (lambda (k5597@name) (list 'immutable k5597@name)) k5595@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k5593@t))) (k2763@syntax-dispatch k5593@t 'any))) k5585@t))) (k2763@syntax-dispatch k5585@t '(#(scheme-id immutable) any . any)))) k5577@t))) (k2763@syntax-dispatch k5577@t '(#(scheme-id mutable) any . any)))) k5575@x)) k5573@ls)))) ((lambda (k5525@uid-code k5526@sealed? k5527@opaque? k5528@fields) (k2689@bless (list 'make-record-type-descriptor (list 'quote k5517@name) k5519@parent-rtd-code k5525@uid-code k5526@sealed? k5527@opaque? k5528@fields))) ((lambda (k5533@t) ((lambda (k5535@ls/false) (if k5535@ls/false (apply (lambda () (list 'quote (k1150@k914@gensym))) k5535@ls/false) ((lambda (k5537@t) ((lambda (k5539@ls/false) (if k5539@ls/false (apply (lambda (k5541@uid) (list 'quote k5541@uid)) k5539@ls/false) ((lambda (k5543@t) ((lambda (k5545@ls/false) (if k5545@ls/false (apply (lambda () '#f) k5545@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k5543@t))) (k2763@syntax-dispatch k5543@t '_))) k5537@t))) (k2763@syntax-dispatch k5537@t '(_ any)))) k5533@t))) (k2763@syntax-dispatch k5533@t '(_)))) (k5184@get-clause 'nongenerative k5518@clause*)) ((lambda (k5547@t) ((lambda (k5549@ls/false) (if k5549@ls/false (apply (lambda () '#t) k5549@ls/false) ((lambda (k5551@t) ((lambda (k5553@ls/false) (if k5553@ls/false (apply (lambda () '#f) k5553@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k5551@t))) (k2763@syntax-dispatch k5551@t '_))) k5547@t))) (k2763@syntax-dispatch k5547@t '(_ #(atom #t))))) (k5184@get-clause 'sealed k5518@clause*)) ((lambda (k5555@t) ((lambda (k5557@ls/false) (if k5557@ls/false (apply (lambda () '#t) k5557@ls/false) ((lambda (k5559@t) ((lambda (k5561@ls/false) (if k5561@ls/false (apply (lambda () '#f) k5561@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k5559@t))) (k2763@syntax-dispatch k5559@t '_))) k5555@t))) (k2763@syntax-dispatch k5555@t '(_ #(atom #t))))) (k5184@get-clause 'opaque k5518@clause*)) ((lambda (k5563@t) ((lambda (k5565@ls/false) (if k5565@ls/false (apply (lambda (k5567@field-spec*) (list 'quote (k5524@convert-field-spec* k5567@field-spec*))) k5565@ls/false) ((lambda (k5569@t) ((lambda (k5571@ls/false) (if k5571@ls/false (apply (lambda () ''#()) k5571@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k5569@t))) (k2763@syntax-dispatch k5569@t '_))) k5563@t))) (k2763@syntax-dispatch k5563@t '(_ . each-any)))) (k5184@get-clause 'fields k5518@clause*))))) '#f))) (set! k5188@parent-rtd-code (lambda (k5493@clause*) ((lambda (k5495@t) ((lambda (k5497@ls/false) (if k5497@ls/false (apply (lambda (k5499@name) (list 'record-type-descriptor k5499@name)) k5497@ls/false) ((lambda (k5501@t) ((lambda (k5503@ls/false) (if k5503@ls/false (apply (lambda () ((lambda (k5505@t) ((lambda (k5507@ls/false) (if k5507@ls/false (apply (lambda (k5509@rtd k5510@rcd) k5509@rtd) k5507@ls/false) ((lambda (k5513@t) ((lambda (k5515@ls/false) (if k5515@ls/false (apply (lambda () '#f) k5515@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k5513@t))) (k2763@syntax-dispatch k5513@t '#(atom #f)))) k5505@t))) (k2763@syntax-dispatch k5505@t '(_ any any)))) (k5184@get-clause 'parent-rtd k5493@clause*))) k5503@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k5501@t))) (k2763@syntax-dispatch k5501@t '#(atom #f)))) k5495@t))) (k2763@syntax-dispatch k5495@t '(_ any)))) (k5184@get-clause 'parent k5493@clause*)))) (set! k5190@parent-rcd-code (lambda (k5469@clause*) ((lambda (k5471@t) ((lambda (k5473@ls/false) (if k5473@ls/false (apply (lambda (k5475@name) (list 'record-constructor-descriptor k5475@name)) k5473@ls/false) ((lambda (k5477@t) ((lambda (k5479@ls/false) (if k5479@ls/false (apply (lambda () ((lambda (k5481@t) ((lambda (k5483@ls/false) (if k5483@ls/false (apply (lambda (k5485@rtd k5486@rcd) k5486@rcd) k5483@ls/false) ((lambda (k5489@t) ((lambda (k5491@ls/false) (if k5491@ls/false (apply (lambda () '#f) k5491@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k5489@t))) (k2763@syntax-dispatch k5489@t '#(atom #f)))) k5481@t))) (k2763@syntax-dispatch k5481@t '(_ any any)))) (k5184@get-clause 'parent-rtd k5469@clause*))) k5479@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k5477@t))) (k2763@syntax-dispatch k5477@t '#(atom #f)))) k5471@t))) (k2763@syntax-dispatch k5471@t '(_ any)))) (k5184@get-clause 'parent k5469@clause*)))) (set! k5192@foo-rcd-code (lambda (k5461@clause* k5462@foo-rtd k5463@protocol k5464@parent-rcd-code) (list 'make-record-constructor-descriptor k5462@foo-rtd k5464@parent-rcd-code k5463@protocol))) (set! k5194@get-protocol-code (lambda (k5449@clause*) ((lambda (k5451@t) ((lambda (k5453@ls/false) (if k5453@ls/false (apply (lambda (k5455@expr) k5455@expr) k5453@ls/false) ((lambda (k5457@t) ((lambda (k5459@ls/false) (if k5459@ls/false (apply (lambda () '#f) k5459@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k5457@t))) (k2763@syntax-dispatch k5457@t '_))) k5451@t))) (k2763@syntax-dispatch k5451@t '(_ any)))) (k5184@get-clause 'protocol k5449@clause*)))) (set! k5196@get-fields (lambda (k5431@clause*) ((lambda (k5433@t) ((lambda (k5435@ls/false) (if k5435@ls/false (apply (lambda () '()) k5435@ls/false) ((lambda (k5437@t) ((lambda (k5439@ls/false) (if k5439@ls/false (apply (lambda (k5441@f*) k5441@f*) k5439@ls/false) ((lambda (k5443@t) ((lambda (k5445@ls/false) (if k5445@ls/false (apply (lambda (k5447@rest) (k5196@get-fields k5447@rest)) k5445@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k5443@t))) (k2763@syntax-dispatch k5443@t '(_ . any)))) k5437@t))) (k2763@syntax-dispatch k5437@t '((#(scheme-id fields) . each-any) . _)))) k5433@t))) (k2763@syntax-dispatch k5433@t '()))) k5431@clause*))) (set! k5198@get-mutator-indices (lambda (k5407@fields) ((letrec ((k5409@f (lambda (k5411@fields k5412@i) ((lambda (k5415@t) ((lambda (k5417@ls/false) (if k5417@ls/false (apply (lambda () '()) k5417@ls/false) ((lambda (k5419@t) ((lambda (k5421@ls/false) (if k5421@ls/false (apply (lambda (k5423@rest) (cons k5412@i (k5409@f k5423@rest (+ k5412@i '1)))) k5421@ls/false) ((lambda (k5425@t) ((lambda (k5427@ls/false) (if k5427@ls/false (apply (lambda (k5429@rest) (k5409@f k5429@rest (+ k5412@i '1))) k5427@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k5425@t))) (k2763@syntax-dispatch k5425@t '(_ . any)))) k5419@t))) (k2763@syntax-dispatch k5419@t '((#(scheme-id mutable) . _) . any)))) k5415@t))) (k2763@syntax-dispatch k5415@t '()))) k5411@fields)))) k5409@f) k5407@fields '0))) (set! k5200@get-mutators (lambda (k5365@foo k5366@fields) ((lambda (k5370@gen-name) (begin (set! k5370@gen-name (lambda (k5405@x) (k3000@datum->syntax k5365@foo (string->symbol (string-append (symbol->string (k3002@syntax->datum k5365@foo)) '"-" (symbol->string (k3002@syntax->datum k5405@x)) '"-set!"))))) ((letrec ((k5371@f (lambda (k5373@fields) ((lambda (k5375@t) ((lambda (k5377@ls/false) (if k5377@ls/false (apply (lambda () '()) k5377@ls/false) ((lambda (k5379@t) ((lambda (k5381@ls/false) (if k5381@ls/false (apply (lambda (k5383@name k5384@accessor k5385@mutator k5386@rest) (cons k5385@mutator (k5371@f k5386@rest))) k5381@ls/false) ((lambda (k5391@t) ((lambda (k5393@ls/false) (if k5393@ls/false (apply (lambda (k5395@name k5396@rest) (cons (k5370@gen-name k5395@name) (k5371@f k5396@rest))) k5393@ls/false) ((lambda (k5399@t) ((lambda (k5401@ls/false) (if k5401@ls/false (apply (lambda (k5403@rest) (k5371@f k5403@rest)) k5401@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k5399@t))) (k2763@syntax-dispatch k5399@t '(_ . any)))) k5391@t))) (k2763@syntax-dispatch k5391@t '((#(scheme-id mutable) any) . any)))) k5379@t))) (k2763@syntax-dispatch k5379@t '((#(scheme-id mutable) any any any) . any)))) k5375@t))) (k2763@syntax-dispatch k5375@t '()))) k5373@fields)))) k5371@f) k5366@fields))) '#f))) (set! k5202@get-accessors (lambda (k5297@foo k5298@fields) ((lambda (k5302@gen-name) (begin (set! k5302@gen-name (lambda (k5363@x) (k3000@datum->syntax k5297@foo (string->symbol (string-append (symbol->string (k3002@syntax->datum k5297@foo)) '"-" (symbol->string (k3002@syntax->datum k5363@x))))))) (map (lambda (k5303@field) ((lambda (k5305@t) ((lambda (k5307@ls/false) (if (and k5307@ls/false (apply (lambda (k5309@name k5310@accessor k5311@mutator) (k2266@id? k5310@accessor)) k5307@ls/false)) (apply (lambda (k5315@name k5316@accessor k5317@mutator) k5316@accessor) k5307@ls/false) ((lambda (k5321@t) ((lambda (k5323@ls/false) (if (and k5323@ls/false (apply (lambda (k5325@name k5326@accessor) (k2266@id? k5326@accessor)) k5323@ls/false)) (apply (lambda (k5329@name k5330@accessor) k5330@accessor) k5323@ls/false) ((lambda (k5333@t) ((lambda (k5335@ls/false) (if (and k5335@ls/false (apply (lambda (k5337@name) (k2266@id? k5337@name)) k5335@ls/false)) (apply (lambda (k5339@name) (k5302@gen-name k5339@name)) k5335@ls/false) ((lambda (k5341@t) ((lambda (k5343@ls/false) (if (and k5343@ls/false (apply (lambda (k5345@name) (k2266@id? k5345@name)) k5343@ls/false)) (apply (lambda (k5347@name) (k5302@gen-name k5347@name)) k5343@ls/false) ((lambda (k5349@t) ((lambda (k5351@ls/false) (if (and k5351@ls/false (apply (lambda (k5353@name) (k2266@id? k5353@name)) k5351@ls/false)) (apply (lambda (k5355@name) (k5302@gen-name k5355@name)) k5351@ls/false) ((lambda (k5357@t) ((lambda (k5359@ls/false) (if k5359@ls/false (apply (lambda (k5361@others) (k2996@syntax-violation '#f '"invalid field spec" k5303@field)) k5359@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k5357@t))) (k2763@syntax-dispatch k5357@t 'any))) k5349@t))) (k2763@syntax-dispatch k5349@t 'any))) k5341@t))) (k2763@syntax-dispatch k5341@t '(#(scheme-id immutable) any)))) k5333@t))) (k2763@syntax-dispatch k5333@t '(#(scheme-id mutable) any)))) k5321@t))) (k2763@syntax-dispatch k5321@t '(#(scheme-id immutable) any any)))) k5305@t))) (k2763@syntax-dispatch k5305@t '(#(scheme-id mutable) any any any)))) k5303@field)) k5298@fields))) '#f))) (set! k5204@enumerate (lambda (k5289@ls) ((letrec ((k5291@f (lambda (k5293@ls k5294@i) (if (null? k5293@ls) '() (cons k5294@i (k5291@f (cdr k5293@ls) (+ k5294@i '1))))))) k5291@f) k5289@ls '0))) (set! k5206@do-define-record (lambda (k5249@namespec k5250@clause*) ((lambda (k5253@foo) ((lambda (k5255@foo-rtd) ((lambda (k5257@foo-rcd) ((lambda (k5259@protocol) ((lambda (k5261@make-foo) ((lambda (k5263@fields) ((lambda (k5265@idx*) ((lambda (k5267@foo-x*) ((lambda (k5269@set-foo-x!*) ((lambda (k5271@set-foo-idx*) ((lambda (k5273@foo?) ((lambda (k5275@foo-rtd-code) ((lambda (k5277@foo-rcd-code) ((lambda (k5279@protocol-code) ((lambda () (k2689@bless (cons 'begin (cons (list 'define k5255@foo-rtd k5275@foo-rtd-code) (cons (list 'define k5259@protocol k5279@protocol-code) (cons (list 'define k5257@foo-rcd k5277@foo-rcd-code) (cons (list 'define-syntax k5253@foo (list 'list ''$rtd (list 'syntax k5255@foo-rtd) (list 'syntax k5257@foo-rcd))) (cons (list 'define k5273@foo? (list 'record-predicate k5255@foo-rtd)) (cons (list 'define k5261@make-foo (list 'record-constructor k5257@foo-rcd)) (append (map (lambda (k5281@foo-x k5282@idx) (list 'define k5281@foo-x (list 'record-accessor k5255@foo-rtd k5282@idx))) k5267@foo-x* k5265@idx*) (map (lambda (k5285@set-foo-x! k5286@idx) (list 'define k5285@set-foo-x! (list 'record-mutator k5255@foo-rtd k5286@idx))) k5269@set-foo-x!* k5271@set-foo-idx*))))))))))))) (k5194@get-protocol-code k5250@clause*))) (k5192@foo-rcd-code k5250@clause* k5255@foo-rtd k5259@protocol (k5190@parent-rcd-code k5250@clause*)))) (k5186@foo-rtd-code k5253@foo k5250@clause* (k5188@parent-rtd-code k5250@clause*)))) (k5182@get-record-predicate-name k5249@namespec))) (k5198@get-mutator-indices k5263@fields))) (k5200@get-mutators k5253@foo k5263@fields))) (k5202@get-accessors k5253@foo k5263@fields))) (k5204@enumerate k5263@fields))) (k5196@get-fields k5250@clause*))) (k5180@get-record-constructor-name k5249@namespec))) (k1150@k914@gensym))) (k1150@k914@gensym))) (k1150@k914@gensym))) (k5178@get-record-name k5249@namespec)))) (set! k5208@verify-clauses (lambda (k5217@x k5218@cls*) ((lambda (k5222@valid-kwds k5224@free-id-member?) (begin (set! k5222@valid-kwds (map k2689@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! k5224@free-id-member? (lambda (k5245@x k5246@ls) (and (pair? k5246@ls) (or (k2274@free-id=? k5245@x (car k5246@ls)) (k5224@free-id-member? k5245@x (cdr k5246@ls)))))) ((letrec ((k5225@f (lambda (k5227@cls* k5228@seen*) (if (not (null? k5227@cls*)) ((lambda (k5231@t) ((lambda (k5233@ls/false) (if k5233@ls/false (apply (lambda (k5235@kwd k5236@rest) (if (or (not (k2266@id? k5235@kwd)) (not (k5224@free-id-member? k5235@kwd k5222@valid-kwds))) (k2996@syntax-violation '#f '"not a valid define-record-type keyword" k5235@kwd) (if (k2280@bound-id-member? k5235@kwd k5228@seen*) (k2996@syntax-violation '#f '"duplicate use of keyword " k5217@x k5235@kwd) (k5225@f (cdr k5227@cls*) (cons k5235@kwd k5228@seen*))))) k5233@ls/false) ((lambda (k5239@t) ((lambda (k5241@ls/false) (if k5241@ls/false (apply (lambda (k5243@cls) (k2996@syntax-violation '#f '"malformed define-record-type clause" k5243@cls)) k5241@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k5239@t))) (k2763@syntax-dispatch k5239@t 'any))) k5231@t))) (k2763@syntax-dispatch k5231@t '(any . any)))) (car k5227@cls*)) (void))))) k5225@f) k5218@cls* '()))) '#f '#f))) ((lambda (k5209@t) ((lambda (k5211@ls/false) (if k5211@ls/false (apply (lambda (k5213@namespec k5214@clause*) (begin (k5208@verify-clauses k5173@x k5214@clause*) (k5206@do-define-record k5213@namespec k5214@clause*))) k5211@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k5209@t))) (k2763@syntax-dispatch k5209@t '(_ any . each-any)))) k5173@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! k2753@define-condition-type-macro (lambda (k5681@x) ((lambda (k5684@mkname) (begin (set! k5684@mkname (lambda (k5729@name k5730@suffix) (k3000@datum->syntax k5729@name (string->symbol (string-append (symbol->string (k3002@syntax->datum k5729@name)) k5730@suffix))))) ((lambda (k5685@t) ((lambda (k5687@ls/false) (if (and k5687@ls/false (apply (lambda (k5689@ctxt k5690@name k5691@super k5692@constructor k5693@predicate k5694@field* k5695@accessor*) (and (k2266@id? k5690@name) (k2266@id? k5691@super) (k2266@id? k5692@constructor) (k2266@id? k5693@predicate) (for-all k2266@id? k5694@field*) (for-all k2266@id? k5695@accessor*))) k5687@ls/false)) (apply (lambda (k5703@ctxt k5704@name k5705@super k5706@constructor k5707@predicate k5708@field* k5709@accessor*) ((lambda (k5717@aux-accessor*) (k2689@bless (cons 'begin (cons (cons 'define-record-type (cons (list k5704@name k5706@constructor (k1150@k914@gensym)) (cons (list 'parent k5705@super) (cons (cons 'fields (map (lambda (k5719@field k5720@aux) (list 'immutable k5719@field k5720@aux)) k5708@field* k5717@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define k5707@predicate (list 'condition-predicate (list 'record-type-descriptor k5704@name))) (map (lambda (k5723@accessor k5724@aux) (list 'define k5723@accessor (list 'condition-accessor (list 'record-type-descriptor k5704@name) k5724@aux))) k5709@accessor* k5717@aux-accessor*)))))) (map (lambda (k5727@x) (k1150@k914@gensym)) k5709@accessor*))) k5687@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k5685@t))) (k2763@syntax-dispatch k5685@t '(any any any any any . #(each (any any)))))) k5681@x))) '#f))) (set! k2755@incorrect-usage-macro (lambda (k5733@e) (k2996@syntax-violation '#f '"incorrect usage of auxiliary keyword" k5733@e))) (set! k2757@parameterize-macro (lambda (k5735@e) ((lambda (k5737@t) ((lambda (k5739@ls/false) (if k5739@ls/false (apply (lambda (k5741@b k5742@b*) (k2689@bless (cons 'let (cons '() (cons k5741@b k5742@b*))))) k5739@ls/false) ((lambda (k5745@t) ((lambda (k5747@ls/false) (if k5747@ls/false (apply (lambda (k5749@olhs* k5750@orhs* k5751@b k5752@b*) ((lambda (k5757@lhs* k5758@rhs*) (k2689@bless (cons (list 'lambda (append k5757@lhs* k5758@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (k5761@lhs k5762@rhs) (list 'let (list (list 't (list k5761@lhs))) (list k5761@lhs k5762@rhs) (cons 'set! (cons k5762@rhs '(t))))) k5757@lhs* k5758@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons k5751@b k5752@b*))) '(swap)))))) (append k5749@olhs* k5750@orhs*)))) (k2978@generate-temporaries k5749@olhs*) (k2978@generate-temporaries k5750@orhs*))) k5747@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k5745@t))) (k2763@syntax-dispatch k5745@t '(_ #(each (any any)) any . each-any)))) k5737@t))) (k2763@syntax-dispatch k5737@t '(_ () any . each-any)))) k5735@e))) (set! k2759@foreign-call-transformer (lambda (k5765@e k5766@r k5767@mr) ((lambda (k5771@t) ((lambda (k5773@ls/false) (if k5773@ls/false (apply (lambda (k5775@name k5776@arg*) (cons 'foreign-call (cons (k2797@chi-expr k5775@name k5766@r k5767@mr) (k2793@chi-expr* k5776@arg* k5766@r k5767@mr)))) k5773@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k5771@t))) (k2763@syntax-dispatch k5771@t '(_ any . each-any)))) k5765@e))) (set! k2761@convert-pattern (lambda (k5779@pattern k5780@keys) ((lambda (k5784@cvt* k5786@cvt) (begin (set! k5784@cvt* (lambda (k5929@p* k5930@n k5931@ids) (if (null? k5929@p*) (values '() k5931@ids) (call-with-values (lambda () (k5784@cvt* (cdr k5929@p*) k5930@n k5931@ids)) (lambda (k5937@k5935@y k5938@k5936@ids) ((lambda (k5941@ids k5942@y) (call-with-values (lambda () (k5786@cvt (car k5929@p*) k5930@n k5941@ids)) (lambda (k5947@k5945@x k5948@k5946@ids) ((lambda (k5951@ids k5952@x) (values (cons k5952@x k5942@y) k5951@ids)) k5948@k5946@ids k5947@k5945@x)))) k5938@k5936@ids k5937@k5935@y)))))) (set! k5786@cvt (lambda (k5787@p k5788@n k5789@ids) ((lambda (k5793@t) ((lambda (k5795@ls/false) (if (and k5795@ls/false (apply (lambda (k5797@id) (k2266@id? k5797@id)) k5795@ls/false)) (apply (lambda (k5799@id) (if (k2280@bound-id-member? k5787@p k5780@keys) (values (vector 'free-id k5787@p) k5789@ids) (if (k2274@free-id=? k5787@p (k2645@scheme-stx '_)) (values '_ k5789@ids) (values 'any (cons (cons k5787@p k5788@n) k5789@ids))))) k5795@ls/false) ((lambda (k5801@t) ((lambda (k5803@ls/false) (if (and k5803@ls/false (apply (lambda (k5805@p k5806@dots) (k2765@ellipsis? k5806@dots)) k5803@ls/false)) (apply (lambda (k5809@p k5810@dots) (call-with-values (lambda () (k5786@cvt k5809@p (+ k5788@n '1) k5789@ids)) (lambda (k5815@k5813@p k5816@k5814@ids) ((lambda (k5819@ids k5820@p) (values (if (eq? k5820@p 'any) 'each-any (vector 'each k5820@p)) k5819@ids)) k5816@k5814@ids k5815@k5813@p)))) k5803@ls/false) ((lambda (k5823@t) ((lambda (k5825@ls/false) (if (and k5825@ls/false (apply (lambda (k5827@x k5828@dots k5829@ys k5830@z) (k2765@ellipsis? k5828@dots)) k5825@ls/false)) (apply (lambda (k5835@x k5836@dots k5837@ys k5838@z) (call-with-values (lambda () (k5786@cvt k5838@z k5788@n k5789@ids)) (lambda (k5845@k5843@z k5846@k5844@ids) ((lambda (k5849@ids k5850@z) (call-with-values (lambda () (k5784@cvt* k5837@ys k5788@n k5849@ids)) (lambda (k5855@k5853@ys k5856@k5854@ids) ((lambda (k5859@ids k5860@ys) (call-with-values (lambda () (k5786@cvt k5835@x (+ k5788@n '1) k5859@ids)) (lambda (k5865@k5863@x k5866@k5864@ids) ((lambda (k5869@ids k5870@x) (values (vector 'each+ k5870@x (reverse k5860@ys) k5850@z) k5869@ids)) k5866@k5864@ids k5865@k5863@x)))) k5856@k5854@ids k5855@k5853@ys)))) k5846@k5844@ids k5845@k5843@z)))) k5825@ls/false) ((lambda (k5873@t) ((lambda (k5875@ls/false) (if k5875@ls/false (apply (lambda (k5877@x k5878@y) (call-with-values (lambda () (k5786@cvt k5878@y k5788@n k5789@ids)) (lambda (k5883@k5881@y k5884@k5882@ids) ((lambda (k5887@ids k5888@y) (call-with-values (lambda () (k5786@cvt k5877@x k5788@n k5887@ids)) (lambda (k5893@k5891@x k5894@k5892@ids) ((lambda (k5897@ids k5898@x) (values (cons k5898@x k5888@y) k5897@ids)) k5894@k5892@ids k5893@k5891@x)))) k5884@k5882@ids k5883@k5881@y)))) k5875@ls/false) ((lambda (k5901@t) ((lambda (k5903@ls/false) (if k5903@ls/false (apply (lambda () (values '() k5789@ids)) k5903@ls/false) ((lambda (k5905@t) ((lambda (k5907@ls/false) (if (and k5907@ls/false (apply (lambda (k5909@p) (not (k2210@stx? k5909@p))) k5907@ls/false)) (apply (lambda (k5911@p) (call-with-values (lambda () (k5786@cvt k5911@p k5788@n k5789@ids)) (lambda (k5915@k5913@p k5916@k5914@ids) ((lambda (k5919@ids k5920@p) (values (vector 'vector k5920@p) k5919@ids)) k5916@k5914@ids k5915@k5913@p)))) k5907@ls/false) ((lambda (k5923@t) ((lambda (k5925@ls/false) (if k5925@ls/false (apply (lambda (k5927@datum) (values (vector 'atom (k2288@stx->datum k5927@datum)) k5789@ids)) k5925@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k5923@t))) (k2763@syntax-dispatch k5923@t 'any))) k5905@t))) (k2763@syntax-dispatch k5905@t '#(vector each-any)))) k5901@t))) (k2763@syntax-dispatch k5901@t '()))) k5873@t))) (k2763@syntax-dispatch k5873@t '(any . any)))) k5823@t))) (k2763@syntax-dispatch k5823@t '(any any . #(each+ any () any))))) k5801@t))) (k2763@syntax-dispatch k5801@t '(any any)))) k5793@t))) (k2763@syntax-dispatch k5793@t 'any))) k5787@p))) (k5786@cvt k5779@pattern '0 '()))) '#f '#f))) (set! k2763@syntax-dispatch ((lambda () ((lambda (k5956@stx^ k5958@match-each k5960@match-each+ k5962@match-each-any k5964@match-empty k5966@combine k5968@match* k5970@match) (begin (set! k5956@stx^ (lambda (k6157@e k6158@m* k6159@s* k6160@ae*) (if (and (null? k6158@m*) (null? k6159@s*) (null? k6160@ae*)) k6157@e (k2242@mkstx k6157@e k6158@m* k6159@s* k6160@ae*)))) (set! k5958@match-each (lambda (k6128@e k6129@p k6130@m* k6131@s* k6132@ae*) (if (pair? k6128@e) ((lambda (k6138@first) (and k6138@first ((lambda (k6140@rest) (and k6140@rest (cons k6138@first k6140@rest))) (k5958@match-each (cdr k6128@e) k6129@p k6130@m* k6131@s* k6132@ae*)))) (k5970@match (car k6128@e) k6129@p k6130@m* k6131@s* k6132@ae* '())) (if (null? k6128@e) '() (if (k2210@stx? k6128@e) (and (not (k2136@top-marked? k6130@m*)) (call-with-values (lambda () (k2240@join-wraps k6130@m* k6131@s* k6132@ae* k6128@e)) (lambda (k6145@k6142@m* k6146@k6143@s* k6147@k6144@ae*) ((lambda (k6151@ae* k6152@s* k6153@m*) (k5958@match-each (k2214@stx-expr k6128@e) k6129@p k6153@m* k6152@s* k6151@ae*)) k6147@k6144@ae* k6146@k6143@s* k6145@k6142@m*)))) (if (k1153@k920@annotation? k6128@e) (k5958@match-each (k1155@k924@annotation-expression k6128@e) k6129@p k6130@m* k6131@s* k6132@ae*) '#f)))))) (set! k5960@match-each+ (lambda (k6070@e k6071@x-pat k6072@y-pat k6073@z-pat k6074@m* k6075@s* k6076@ae* k6077@r) ((letrec ((k6086@f (lambda (k6088@e k6089@m* k6090@s* k6091@ae*) (if (pair? k6088@e) (call-with-values (lambda () (k6086@f (cdr k6088@e) k6089@m* k6090@s* k6091@ae*)) (lambda (k6099@k6096@xr* k6100@k6097@y-pat k6101@k6098@r) ((lambda (k6105@r k6106@y-pat k6107@xr*) (if k6105@r (if (null? k6106@y-pat) ((lambda (k6111@xr) (if k6111@xr (values (cons k6111@xr k6107@xr*) k6106@y-pat k6105@r) (values '#f '#f '#f))) (k5970@match (car k6088@e) k6071@x-pat k6089@m* k6090@s* k6091@ae* '())) (values '() (cdr k6106@y-pat) (k5970@match (car k6088@e) (car k6106@y-pat) k6089@m* k6090@s* k6091@ae* k6105@r))) (values '#f '#f '#f))) k6101@k6098@r k6100@k6097@y-pat k6099@k6096@xr*))) (if (k2210@stx? k6088@e) (if (k2136@top-marked? k6089@m*) (values '() k6072@y-pat (k5970@match k6088@e k6073@z-pat k6089@m* k6090@s* k6091@ae* k6077@r)) (call-with-values (lambda () (k2240@join-wraps k6089@m* k6090@s* k6091@ae* k6088@e)) (lambda (k6116@k6113@m* k6117@k6114@s* k6118@k6115@ae*) ((lambda (k6122@ae* k6123@s* k6124@m*) (k6086@f (k2214@stx-expr k6088@e) k6124@m* k6123@s* k6122@ae*)) k6118@k6115@ae* k6117@k6114@s* k6116@k6113@m*)))) (if (k1153@k920@annotation? k6088@e) (k6086@f (k1155@k924@annotation-expression k6088@e) k6089@m* k6090@s* k6091@ae*) (values '() k6072@y-pat (k5970@match k6088@e k6073@z-pat k6089@m* k6090@s* k6091@ae* k6077@r)))))))) k6086@f) k6070@e k6074@m* k6075@s* k6076@ae*))) (set! k5962@match-each-any (lambda (k6045@e k6046@m* k6047@s* k6048@ae*) (if (pair? k6045@e) ((lambda (k6053@l) (and k6053@l (cons (k5956@stx^ (car k6045@e) k6046@m* k6047@s* k6048@ae*) k6053@l))) (k5962@match-each-any (cdr k6045@e) k6046@m* k6047@s* k6048@ae*)) (if (null? k6045@e) '() (if (k2210@stx? k6045@e) (and (not (k2136@top-marked? k6046@m*)) (call-with-values (lambda () (k2240@join-wraps k6046@m* k6047@s* k6048@ae* k6045@e)) (lambda (k6058@k6055@m* k6059@k6056@s* k6060@k6057@ae*) ((lambda (k6064@ae* k6065@s* k6066@m*) (k5962@match-each-any (k2214@stx-expr k6045@e) k6066@m* k6065@s* k6064@ae*)) k6060@k6057@ae* k6059@k6056@s* k6058@k6055@m*)))) (if (k1153@k920@annotation? k6045@e) (k5962@match-each-any (k1155@k924@annotation-expression k6045@e) k6046@m* k6047@s* k6048@ae*) '#f)))))) (set! k5964@match-empty (lambda (k6039@p k6040@r) (if (null? k6039@p) k6040@r (if (eq? k6039@p '_) k6040@r (if (eq? k6039@p 'any) (cons '() k6040@r) (if (pair? k6039@p) (k5964@match-empty (car k6039@p) (k5964@match-empty (cdr k6039@p) k6040@r)) (if (eq? k6039@p 'each-any) (cons '() k6040@r) ((lambda (k6043@t) (if (memv k6043@t '(each)) (k5964@match-empty (vector-ref k6039@p '1) k6040@r) (if (memv k6043@t '(each+)) (k5964@match-empty (vector-ref k6039@p '1) (k5964@match-empty (reverse (vector-ref k6039@p '2)) (k5964@match-empty (vector-ref k6039@p '3) k6040@r))) (if (memv k6043@t '(free-id atom)) k6040@r (if (memv k6043@t '(scheme-id atom)) k6040@r (if (memv k6043@t '(vector)) (k5964@match-empty (vector-ref k6039@p '1) k6040@r) (assertion-violation 'syntax-dispatch '"invalid pattern" k6039@p))))))) (vector-ref k6039@p '0))))))))) (set! k5966@combine (lambda (k6035@r* k6036@r) (if (null? (car k6035@r*)) k6036@r (cons (map car k6035@r*) (k5966@combine (map cdr k6035@r*) k6036@r))))) (set! k5968@match* (lambda (k6002@e k6003@p k6004@m* k6005@s* k6006@ae* k6007@r) (if (null? k6003@p) (and (null? k6002@e) k6007@r) (if (pair? k6003@p) (and (pair? k6002@e) (k5970@match (car k6002@e) (car k6003@p) k6004@m* k6005@s* k6006@ae* (k5970@match (cdr k6002@e) (cdr k6003@p) k6004@m* k6005@s* k6006@ae* k6007@r))) (if (eq? k6003@p 'each-any) ((lambda (k6014@l) (and k6014@l (cons k6014@l k6007@r))) (k5962@match-each-any k6002@e k6004@m* k6005@s* k6006@ae*)) ((lambda (k6016@t) (if (memv k6016@t '(each)) (if (null? k6002@e) (k5964@match-empty (vector-ref k6003@p '1) k6007@r) ((lambda (k6018@r*) (and k6018@r* (k5966@combine k6018@r* k6007@r))) (k5958@match-each k6002@e (vector-ref k6003@p '1) k6004@m* k6005@s* k6006@ae*))) (if (memv k6016@t '(free-id)) (and (symbol? k6002@e) (k2136@top-marked? k6004@m*) (k2274@free-id=? (k5956@stx^ k6002@e k6004@m* k6005@s* k6006@ae*) (vector-ref k6003@p '1)) k6007@r) (if (memv k6016@t '(scheme-id)) (and (symbol? k6002@e) (k2136@top-marked? k6004@m*) (k2274@free-id=? (k5956@stx^ k6002@e k6004@m* k6005@s* k6006@ae*) (k2645@scheme-stx (vector-ref k6003@p '1))) k6007@r) (if (memv k6016@t '(each+)) (call-with-values (lambda () (k5960@match-each+ k6002@e (vector-ref k6003@p '1) (vector-ref k6003@p '2) (vector-ref k6003@p '3) k6004@m* k6005@s* k6006@ae* k6007@r)) (lambda (k6023@k6020@xr* k6024@k6021@y-pat k6025@k6022@r) ((lambda (k6029@r k6030@y-pat k6031@xr*) (and k6029@r (null? k6030@y-pat) (if (null? k6031@xr*) (k5964@match-empty (vector-ref k6003@p '1) k6029@r) (k5966@combine k6031@xr* k6029@r)))) k6025@k6022@r k6024@k6021@y-pat k6023@k6020@xr*))) (if (memv k6016@t '(atom)) (and (fast-equal? (vector-ref k6003@p '1) (k2286@strip k6002@e k6004@m*)) k6007@r) (if (memv k6016@t '(vector)) (and (vector? k6002@e) (k5970@match (vector->list k6002@e) (vector-ref k6003@p '1) k6004@m* k6005@s* k6006@ae* k6007@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" k6003@p)))))))) (vector-ref k6003@p '0))))))) (set! k5970@match (lambda (k5975@e k5976@p k5977@m* k5978@s* k5979@ae* k5980@r) (if (not k5980@r) '#f (if (eq? k5976@p '_) k5980@r (if (eq? k5976@p 'any) (cons (k5956@stx^ k5975@e k5977@m* k5978@s* k5979@ae*) k5980@r) (if (k2210@stx? k5975@e) (and (not (k2136@top-marked? k5977@m*)) (call-with-values (lambda () (k2240@join-wraps k5977@m* k5978@s* k5979@ae* k5975@e)) (lambda (k5990@k5987@m* k5991@k5988@s* k5992@k5989@ae*) ((lambda (k5996@ae* k5997@s* k5998@m*) (k5970@match (k2214@stx-expr k5975@e) k5976@p k5998@m* k5997@s* k5996@ae* k5980@r)) k5992@k5989@ae* k5991@k5988@s* k5990@k5987@m*)))) (if (k1153@k920@annotation? k5975@e) (k5970@match (k1155@k924@annotation-expression k5975@e) k5976@p k5977@m* k5978@s* k5979@ae* k5980@r) (k5968@match* k5975@e k5976@p k5977@m* k5978@s* k5979@ae* k5980@r)))))))) (lambda (k5971@e k5972@p) (k5970@match k5971@e k5972@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! k2765@ellipsis? (lambda (k6165@x) (and (k2266@id? k6165@x) (k2274@free-id=? k6165@x (k2645@scheme-stx '...))))) (set! k2767@underscore? (lambda (k6167@x) (and (k2266@id? k6167@x) (k2274@free-id=? k6167@x (k2645@scheme-stx '_))))) (set! k2769@verify-literals (lambda (k6169@lits k6170@expr) (for-each (lambda (k6173@x) (if (or (not (k2266@id? k6173@x)) (k2765@ellipsis? k6173@x) (k2767@underscore? k6173@x)) (k2996@syntax-violation '#f '"invalid literal" k6170@expr k6173@x) (void))) k6169@lits))) (set! k2771@syntax-case-transformer ((lambda () ((lambda (k6176@build-dispatch-call k6178@invalid-ids-error k6180@gen-clause k6182@gen-syntax-case) (begin (set! k6176@build-dispatch-call (lambda (k6287@pvars k6288@expr k6289@y k6290@r k6291@mr) ((lambda (k6297@ids k6298@levels) ((lambda (k6301@labels k6302@new-vars) ((lambda (k6305@body) (list '(primitive apply) (k2102@k1912@build-lambda '#f k6302@new-vars k6305@body) k6289@y)) (k2797@chi-expr (k2246@add-subst (k2197@make-full-rib k6297@ids k6301@labels) k6288@expr) (append (map (lambda (k6307@label k6308@var k6309@level) (cons k6307@label (k2298@make-binding 'syntax (cons k6308@var k6309@level)))) k6301@labels k6302@new-vars (map cdr k6287@pvars)) k6290@r) k6291@mr))) (map k2142@gen-label k6297@ids) (map k2138@gen-lexical k6297@ids))) (map car k6287@pvars) (map cdr k6287@pvars)))) (set! k6178@invalid-ids-error (lambda (k6275@id* k6276@e k6277@class) ((letrec ((k6281@find (lambda (k6283@id* k6284@ok*) (if (null? k6283@id*) (k2996@syntax-violation '#f '"invalid syntax" k6276@e) (if (k2266@id? (car k6283@id*)) (if (k2280@bound-id-member? (car k6283@id*) k6284@ok*) (k2992@syntax-error (car k6283@id*) '"duplicate " k6277@class) (k6281@find (cdr k6283@id*) (cons (car k6283@id*) k6284@ok*))) (k2992@syntax-error (car k6283@id*) '"invalid " k6277@class)))))) k6281@find) k6275@id* '()))) (set! k6180@gen-clause (lambda (k6237@x k6238@keys k6239@clauses k6240@r k6241@mr k6242@pat k6243@fender k6244@expr) (call-with-values (lambda () (k2761@convert-pattern k6242@pat k6238@keys)) (lambda (k6255@k6253@p k6256@k6254@pvars) ((lambda (k6259@pvars k6260@p) (if (not (k2278@distinct-bound-ids? (map car k6259@pvars))) (k6178@invalid-ids-error (map car k6259@pvars) k6242@pat '"pattern variable") (if (not (for-all (lambda (k6263@x) (not (k2765@ellipsis? (car k6263@x)))) k6259@pvars)) (k2996@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" k6242@pat) ((lambda (k6265@y) ((lambda (k6267@test) ((lambda (k6269@conseq) ((lambda (k6271@altern) (list (k2102@k1912@build-lambda '#f (list k6265@y) (list 'if k6267@test k6269@conseq k6271@altern)) (list '(primitive syntax-dispatch) k6237@x (list 'quote k6260@p)))) (k6182@gen-syntax-case k6237@x k6238@keys k6239@clauses k6240@r k6241@mr))) (k6176@build-dispatch-call k6259@pvars k6244@expr k6265@y k6240@r k6241@mr))) (if (eq? k6243@fender '#t) k6265@y ((lambda (k6273@call) (list 'if k6265@y k6273@call (list 'quote '#f))) (k6176@build-dispatch-call k6259@pvars k6243@fender k6265@y k6240@r k6241@mr))))) (k2138@gen-lexical 'tmp))))) k6256@k6254@pvars k6255@k6253@p))))) (set! k6182@gen-syntax-case (lambda (k6203@x k6204@keys k6205@clauses k6206@r k6207@mr) (if (null? k6205@clauses) (list '(primitive syntax-error) k6203@x) ((lambda (k6213@t) ((lambda (k6215@ls/false) (if k6215@ls/false (apply (lambda (k6217@pat k6218@expr) (if (and (k2266@id? k6217@pat) (not (k2280@bound-id-member? k6217@pat k6204@keys)) (not (k2765@ellipsis? k6217@pat))) (if (k2274@free-id=? k6217@pat (k2645@scheme-stx '_)) (k2797@chi-expr k6218@expr k6206@r k6207@mr) ((lambda (k6221@lab k6222@lex) ((lambda (k6225@body) (list (k2102@k1912@build-lambda '#f (list k6222@lex) k6225@body) k6203@x)) (k2797@chi-expr (k2246@add-subst (k2197@make-full-rib (list k6217@pat) (list k6221@lab)) k6218@expr) (cons (cons k6221@lab (k2298@make-binding 'syntax (cons k6222@lex '0))) k6206@r) k6207@mr))) (k2142@gen-label k6217@pat) (k2138@gen-lexical k6217@pat))) (k6180@gen-clause k6203@x k6204@keys (cdr k6205@clauses) k6206@r k6207@mr k6217@pat '#t k6218@expr))) k6215@ls/false) ((lambda (k6227@t) ((lambda (k6229@ls/false) (if k6229@ls/false (apply (lambda (k6231@pat k6232@fender k6233@expr) (k6180@gen-clause k6203@x k6204@keys (cdr k6205@clauses) k6206@r k6207@mr k6231@pat k6232@fender k6233@expr)) k6229@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k6227@t))) (k2763@syntax-dispatch k6227@t '(any any any)))) k6213@t))) (k2763@syntax-dispatch k6213@t '(any any)))) (car k6205@clauses))))) (lambda (k6183@e k6184@r k6185@mr) ((lambda (k6189@t) ((lambda (k6191@ls/false) (if k6191@ls/false (apply (lambda (k6193@expr k6194@keys k6195@clauses) (begin (k2769@verify-literals k6194@keys k6183@e) ((lambda (k6199@x) ((lambda (k6201@body) (list (k2102@k1912@build-lambda '#f (list k6199@x) k6201@body) (k2797@chi-expr k6193@expr k6184@r k6185@mr))) (k6182@gen-syntax-case k6199@x k6194@keys k6195@clauses k6184@r k6185@mr))) (k2138@gen-lexical 'tmp)))) k6191@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k6189@t))) (k2763@syntax-dispatch k6189@t '(_ any each-any . each-any)))) k6183@e)))) '#f '#f '#f '#f)))) (set! k2773@ellipsis-map (lambda (k6313@proc k6314@ls . k6317@ls*) ((lambda (k6320@who) (begin (set! k6320@who '...) (begin (if (not (list? k6314@ls)) (assertion-violation k6320@who '"not a list" k6314@ls) (void)) (if (not (null? k6317@ls*)) ((lambda (k6321@n) (for-each (lambda (k6323@x) (begin (if (not (list? k6323@x)) (assertion-violation k6320@who '"not a list" k6323@x) (void)) (if (not (= (length k6323@x) k6321@n)) (assertion-violation k6320@who '"length mismatch" k6314@ls k6323@x) (void)))) k6317@ls*)) (length k6314@ls)) (void)) (apply map k6313@proc k6314@ls k6317@ls*)))) '#f))) (set! k2775@syntax-transformer ((lambda () ((lambda (k6326@gen-syntax k6328@gen-ref k6330@gen-append k6332@gen-mappend k6334@gen-map k6336@gen-cons k6338@gen-vector k6340@regen) (begin (set! k6326@gen-syntax (lambda (k6441@src k6442@e k6443@r k6444@maps k6445@ellipsis? k6446@vec?) ((lambda (k6453@t) ((lambda (k6455@ls/false) (if (and k6455@ls/false (apply (lambda (k6457@dots) (k6445@ellipsis? k6457@dots)) k6455@ls/false)) (apply (lambda (k6459@dots) (k2996@syntax-violation '#f '"misplaced ellipsis in syntax form" k6441@src)) k6455@ls/false) ((lambda (k6461@t) ((lambda (k6463@ls/false) (if (and k6463@ls/false (apply (lambda (k6465@id) (k2266@id? k6465@id)) k6463@ls/false)) (apply (lambda (k6467@id) ((lambda (k6469@label) ((lambda (k6471@b) ((lambda () (if (eq? (k2300@binding-type k6471@b) 'syntax) (call-with-values (lambda () ((lambda (k6475@var.lev) (k6328@gen-ref k6441@src (car k6475@var.lev) (cdr k6475@var.lev) k6444@maps)) (k2302@binding-value k6471@b))) (lambda (k6477@k6473@var k6478@k6474@maps) ((lambda (k6481@maps k6482@var) (values (list 'ref k6482@var) k6481@maps)) k6478@k6474@maps k6477@k6473@var))) (values (list 'quote k6442@e) k6444@maps))))) (k2296@label->binding k6469@label k6443@r))) (k2292@id->label k6442@e))) k6463@ls/false) ((lambda (k6485@t) ((lambda (k6487@ls/false) (if (and k6487@ls/false (apply (lambda (k6489@dots k6490@e) (k6445@ellipsis? k6489@dots)) k6487@ls/false)) (apply (lambda (k6493@dots k6494@e) (if k6446@vec? (k2996@syntax-violation '#f '"misplaced ellipsis in syntax form" k6441@src) (k6326@gen-syntax k6441@src k6494@e k6443@r k6444@maps (lambda (k6497@x) '#f) '#f))) k6487@ls/false) ((lambda (k6499@t) ((lambda (k6501@ls/false) (if (and k6501@ls/false (apply (lambda (k6503@x k6504@dots k6505@y) (k6445@ellipsis? k6504@dots)) k6501@ls/false)) (apply (lambda (k6509@x k6510@dots k6511@y) ((letrec ((k6515@f (lambda (k6517@y k6518@k) ((lambda (k6521@t) ((lambda (k6523@ls/false) (if k6523@ls/false (apply (lambda () (k6518@k k6444@maps)) k6523@ls/false) ((lambda (k6525@t) ((lambda (k6527@ls/false) (if (and k6527@ls/false (apply (lambda (k6529@dots k6530@y) (k6445@ellipsis? k6529@dots)) k6527@ls/false)) (apply (lambda (k6533@dots k6534@y) (k6515@f k6534@y (lambda (k6537@maps) (call-with-values (lambda () (k6518@k (cons '() k6537@maps))) (lambda (k6541@k6539@x k6542@k6540@maps) ((lambda (k6545@maps k6546@x) (if (null? (car k6545@maps)) (k2996@syntax-violation '#f '"extra ellipsis in syntax form" k6441@src) (values (k6332@gen-mappend k6546@x (car k6545@maps)) (cdr k6545@maps)))) k6542@k6540@maps k6541@k6539@x)))))) k6527@ls/false) ((lambda (k6549@t) ((lambda (k6551@ls/false) (if k6551@ls/false (apply (lambda () (call-with-values (lambda () (k6326@gen-syntax k6441@src k6517@y k6443@r k6444@maps k6445@ellipsis? k6446@vec?)) (lambda (k6555@k6553@y k6556@k6554@maps) ((lambda (k6559@maps k6560@y) (call-with-values (lambda () (k6518@k k6559@maps)) (lambda (k6565@k6563@x k6566@k6564@maps) ((lambda (k6569@maps k6570@x) (values (k6330@gen-append k6570@x k6560@y) k6569@maps)) k6566@k6564@maps k6565@k6563@x)))) k6556@k6554@maps k6555@k6553@y)))) k6551@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k6549@t))) (k2763@syntax-dispatch k6549@t '_))) k6525@t))) (k2763@syntax-dispatch k6525@t '(any . any)))) k6521@t))) (k2763@syntax-dispatch k6521@t '()))) k6517@y)))) k6515@f) k6511@y (lambda (k6573@maps) (call-with-values (lambda () (k6326@gen-syntax k6441@src k6509@x k6443@r (cons '() k6573@maps) k6445@ellipsis? '#f)) (lambda (k6577@k6575@x k6578@k6576@maps) ((lambda (k6581@maps k6582@x) (if (null? (car k6581@maps)) (k2996@syntax-violation '#f '"extra ellipsis in syntax form" k6441@src) (values (k6334@gen-map k6582@x (car k6581@maps)) (cdr k6581@maps)))) k6578@k6576@maps k6577@k6575@x)))))) k6501@ls/false) ((lambda (k6585@t) ((lambda (k6587@ls/false) (if k6587@ls/false (apply (lambda (k6589@x k6590@y) (call-with-values (lambda () (k6326@gen-syntax k6441@src k6589@x k6443@r k6444@maps k6445@ellipsis? '#f)) (lambda (k6595@k6593@xnew k6596@k6594@maps) ((lambda (k6599@maps k6600@xnew) (call-with-values (lambda () (k6326@gen-syntax k6441@src k6590@y k6443@r k6599@maps k6445@ellipsis? k6446@vec?)) (lambda (k6605@k6603@ynew k6606@k6604@maps) ((lambda (k6609@maps k6610@ynew) (values (k6336@gen-cons k6442@e k6589@x k6590@y k6600@xnew k6610@ynew) k6609@maps)) k6606@k6604@maps k6605@k6603@ynew)))) k6596@k6594@maps k6595@k6593@xnew)))) k6587@ls/false) ((lambda (k6613@t) ((lambda (k6615@ls/false) (if k6615@ls/false (apply (lambda (k6617@ls) (call-with-values (lambda () (k6326@gen-syntax k6441@src k6617@ls k6443@r k6444@maps k6445@ellipsis? '#t)) (lambda (k6621@k6619@lsnew k6622@k6620@maps) ((lambda (k6625@maps k6626@lsnew) (values (k6338@gen-vector k6442@e k6617@ls k6626@lsnew) k6625@maps)) k6622@k6620@maps k6621@k6619@lsnew)))) k6615@ls/false) ((lambda (k6629@t) ((lambda (k6631@ls/false) (if k6631@ls/false (apply (lambda () (values (list 'quote k6442@e) k6444@maps)) k6631@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k6629@t))) (k2763@syntax-dispatch k6629@t '_))) k6613@t))) (k2763@syntax-dispatch k6613@t '#(vector each-any)))) k6585@t))) (k2763@syntax-dispatch k6585@t '(any . any)))) k6499@t))) (k2763@syntax-dispatch k6499@t '(any any . any)))) k6485@t))) (k2763@syntax-dispatch k6485@t '(any any)))) k6461@t))) (k2763@syntax-dispatch k6461@t 'any))) k6453@t))) (k2763@syntax-dispatch k6453@t 'any))) k6442@e))) (set! k6328@gen-ref (lambda (k6417@src k6418@var k6419@level k6420@maps) (if (= k6419@level '0) (values k6418@var k6420@maps) (if (null? k6420@maps) (k2996@syntax-violation '#f '"missing ellipsis in syntax form" k6417@src) (call-with-values (lambda () (k6328@gen-ref k6417@src k6418@var (- k6419@level '1) (cdr k6420@maps))) (lambda (k6427@k6425@outer-var k6428@k6426@outer-maps) ((lambda (k6431@outer-maps k6432@outer-var) ((lambda (k6435@t) (if k6435@t ((lambda (k6437@b) (values (cdr k6437@b) k6420@maps)) k6435@t) ((lambda (k6439@inner-var) (values k6439@inner-var (cons (cons (cons k6432@outer-var k6439@inner-var) (car k6420@maps)) k6431@outer-maps))) (k2138@gen-lexical 'tmp)))) (assq k6432@outer-var (car k6420@maps)))) k6428@k6426@outer-maps k6427@k6425@outer-var))))))) (set! k6330@gen-append (lambda (k6413@x k6414@y) (if (fast-equal? k6414@y ''()) k6413@x (list 'append k6413@x k6414@y)))) (set! k6332@gen-mappend (lambda (k6409@e k6410@map-env) (list 'apply '(primitive append) (k6334@gen-map k6409@e k6410@map-env)))) (set! k6334@gen-map (lambda (k6391@e k6392@map-env) ((lambda (k6395@formals k6396@actuals) (if (eq? (car k6391@e) 'ref) (car k6396@actuals) (if (for-all (lambda (k6399@x) (and (eq? (car k6399@x) 'ref) (memq (cadr k6399@x) k6395@formals))) (cdr k6391@e)) ((lambda (k6401@args) (cons 'map (cons (list 'primitive (car k6391@e)) k6401@args))) (map ((lambda (k6403@r) (lambda (k6405@x) (cdr (assq (cadr k6405@x) k6403@r)))) (map cons k6395@formals k6396@actuals)) (cdr k6391@e))) (cons* 'map (list 'lambda k6395@formals k6391@e) k6396@actuals)))) (map cdr k6392@map-env) (map (lambda (k6407@x) (list 'ref (car k6407@x))) k6392@map-env)))) (set! k6336@gen-cons (lambda (k6375@e k6376@x k6377@y k6378@xnew k6379@ynew) ((lambda (k6385@t) (if (memv k6385@t '(quote)) (if (eq? (car k6378@xnew) 'quote) ((lambda (k6387@xnew k6388@ynew) (if (and (eq? k6387@xnew k6376@x) (eq? k6388@ynew k6377@y)) (list 'quote k6375@e) (list 'quote (cons k6387@xnew k6388@ynew)))) (cadr k6378@xnew) (cadr k6379@ynew)) (if (null? (cadr k6379@ynew)) (list 'list k6378@xnew) (list 'cons k6378@xnew k6379@ynew))) (if (memv k6385@t '(list)) (cons 'list (cons k6378@xnew (cdr k6379@ynew))) (list 'cons k6378@xnew k6379@ynew)))) (car k6379@ynew)))) (set! k6338@gen-vector (lambda (k6369@e k6370@ls k6371@lsnew) (if (eq? (car k6371@lsnew) 'quote) (if (eq? (cadr k6371@lsnew) k6370@ls) (list 'quote k6369@e) (list 'quote (list->vector (cadr k6371@lsnew)))) (if (eq? (car k6371@lsnew) 'list) (cons 'vector (cdr k6371@lsnew)) (list 'list->vector k6371@lsnew))))) (set! k6340@regen (lambda (k6363@x) ((lambda (k6365@t) (if (memv k6365@t '(ref)) (cadr k6363@x) (if (memv k6365@t '(primitive)) (list 'primitive (cadr k6363@x)) (if (memv k6365@t '(quote)) (list 'quote (cadr k6363@x)) (if (memv k6365@t '(lambda)) (k2102@k1912@build-lambda '#f (cadr k6363@x) (k6340@regen (caddr k6363@x))) (if (memv k6365@t '(map)) ((lambda (k6367@ls) (cons '(primitive ellipsis-map) k6367@ls)) (map k6340@regen (cdr k6363@x))) (cons (list 'primitive (car k6363@x)) (map k6340@regen (cdr k6363@x))))))))) (car k6363@x)))) (lambda (k6341@e k6342@r k6343@mr) ((lambda (k6347@t) ((lambda (k6349@ls/false) (if k6349@ls/false (apply (lambda (k6351@x) (call-with-values (lambda () (k6326@gen-syntax k6341@e k6351@x k6342@r '() k2765@ellipsis? '#f)) (lambda (k6355@k6353@e k6356@k6354@maps) ((lambda (k6359@maps k6360@e) (k6340@regen k6360@e)) k6356@k6354@maps k6355@k6353@e)))) k6349@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k6347@t))) (k2763@syntax-dispatch k6347@t '(_ any)))) k6341@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! k2777@core-macro-transformer (lambda (k6633@name) ((lambda (k6635@t) (if (memv k6635@t '(quote)) k2683@quote-transformer (if (memv k6635@t '(lambda)) k2687@lambda-transformer (if (memv k6635@t '(case-lambda)) k2685@case-lambda-transformer (if (memv k6635@t '(letrec)) k2659@letrec-transformer (if (memv k6635@t '(letrec*)) k2661@letrec*-transformer (if (memv k6635@t '(if)) k2675@if-transformer (if (memv k6635@t '(and)) k2677@and-transformer (if (memv k6635@t '(or)) k2679@or-transformer (if (memv k6635@t '(foreign-call)) k2759@foreign-call-transformer (if (memv k6635@t '(syntax-case)) k2771@syntax-case-transformer (if (memv k6635@t '(syntax)) k2775@syntax-transformer (if (memv k6635@t '(type-descriptor)) k2665@type-descriptor-transformer (if (memv k6635@t '(record-type-descriptor)) k2667@record-type-descriptor-transformer (if (memv k6635@t '(record-constructor-descriptor)) k2669@record-constructor-descriptor-transformer (if (memv k6635@t '(fluid-let-syntax)) k2663@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" k6633@name))))))))))))))))) k6633@name))) (set! k2779@symbol-macro (lambda (k6637@x k6638@set) ((lambda (k6641@t) ((lambda (k6643@ls/false) (if (and k6643@ls/false (apply (lambda (k6645@name) (and (k2266@id? k6645@name) (memq (k2268@id->sym k6645@name) k6638@set))) k6643@ls/false)) (apply (lambda (k6647@name) (k2689@bless (list 'quote k6647@name))) k6643@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k6641@t))) (k2763@syntax-dispatch k6641@t '(_ any)))) k6637@x))) (set! k2781@macro-transformer (lambda (k6649@x) (if (procedure? k6649@x) k6649@x (if (symbol? k6649@x) ((lambda (k6651@t) (if (memv k6651@t '(define-record-type)) k2751@define-record-type-macro (if (memv k6651@t '(define-struct)) k2749@define-struct-macro (if (memv k6651@t '(include)) k2739@include-macro (if (memv k6651@t '(cond)) k2735@cond-macro (if (memv k6651@t '(let)) k2695@let-macro (if (memv k6651@t '(do)) k2727@do-macro (if (memv k6651@t '(or)) k2731@or-macro (if (memv k6651@t '(and)) k2733@and-macro (if (memv k6651@t '(let*)) k2729@let*-macro (if (memv k6651@t '(let-values)) k2697@let-values-macro (if (memv k6651@t '(let*-values)) k2699@let*-values-macro (if (memv k6651@t '(syntax-rules)) k2743@syntax-rules-macro (if (memv k6651@t '(quasiquote)) k2745@quasiquote-macro (if (memv k6651@t '(quasisyntax)) k2747@quasisyntax-macro (if (memv k6651@t '(with-syntax)) k2691@with-syntax-macro (if (memv k6651@t '(when)) k2671@when-macro (if (memv k6651@t '(unless)) k2673@unless-macro (if (memv k6651@t '(case)) k2681@case-macro (if (memv k6651@t '(identifier-syntax)) k2725@identifier-syntax-macro (if (memv k6651@t '(time)) k2717@time-macro (if (memv k6651@t '(delay)) k2719@delay-macro (if (memv k6651@t '(assert)) k2721@assert-macro (if (memv k6651@t '(endianness)) k2723@endianness-macro (if (memv k6651@t '(guard)) k2713@guard-macro (if (memv k6651@t '(define-enumeration)) k2715@define-enumeration-macro (if (memv k6651@t '(trace-lambda)) k2701@trace-lambda-macro (if (memv k6651@t '(trace-define)) k2703@trace-define-macro (if (memv k6651@t '(trace-define-syntax)) k2705@trace-define-syntax-macro (if (memv k6651@t '(trace-let-syntax)) k2709@trace-let-syntax-macro (if (memv k6651@t '(trace-letrec-syntax)) k2711@trace-letrec-syntax-macro (if (memv k6651@t '(define-condition-type)) k2753@define-condition-type-macro (if (memv k6651@t '(parameterize)) k2757@parameterize-macro (if (memv k6651@t '(include-into)) k2741@include-into-macro (if (memv k6651@t '(eol-style)) (lambda (k6653@x) (k2779@symbol-macro k6653@x '(none lf cr crlf nel crnel ls))) (if (memv k6651@t '(error-handling-mode)) (lambda (k6655@x) (k2779@symbol-macro k6655@x '(ignore raise replace))) (if (memv k6651@t '(buffer-mode)) (lambda (k6657@x) (k2779@symbol-macro k6657@x '(none line block))) (if (memv k6651@t '(file-options)) k2125@file-options-macro (if (memv k6651@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) k2755@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" k6649@x)))))))))))))))))))))))))))))))))))))))) k6649@x) (error 'core-macro-transformer '"BUG: invalid macro" k6649@x))))) (set! k2783@local-macro-transformer (lambda (k6659@x) (car k6659@x))) (set! k2785@do-macro-call (lambda (k6661@transformer k6662@expr) ((lambda (k6665@out) (begin ((letrec ((k6667@f (lambda (k6669@x) (if (not (k2210@stx? k6669@x)) (if (pair? k6669@x) (begin (k6667@f (car k6669@x)) (k6667@f (cdr k6669@x))) (if (vector? k6669@x) (vector-for-each k6667@f k6669@x) (if (symbol? k6669@x) (k2996@syntax-violation '#f '"raw symbol encountered in output of macro" k6662@expr k6669@x) (void)))) (void))))) k6667@f) k6665@out) (k2244@add-mark (k2234@gen-mark) k6665@out k6662@expr))) (k6661@transformer (k2244@add-mark k2236@anti-mark k6662@expr '#f))))) (set! k2787@chi-macro (lambda (k6671@p k6672@e) (k2785@do-macro-call (k2781@macro-transformer k6671@p) k6672@e))) (set! k2789@chi-local-macro (lambda (k6675@p k6676@e) (k2785@do-macro-call (k2783@local-macro-transformer k6675@p) k6676@e))) (set! k2791@chi-global-macro (lambda (k6679@p k6680@e) ((lambda (k6683@lib k6684@loc) (begin (k1793@k1449@visit-library k6683@lib) ((lambda (k6687@x) ((lambda (k6689@transformer) (k2785@do-macro-call k6689@transformer k6680@e)) (if (procedure? k6687@x) k6687@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" k6687@x)))) (symbol-value k6684@loc)))) (car k6679@p) (cdr k6679@p)))) (set! k2793@chi-expr* (lambda (k6691@e* k6692@r k6693@mr) (if (null? k6691@e*) '() ((lambda (k6697@e) (cons k6697@e (k2793@chi-expr* (cdr k6691@e*) k6692@r k6693@mr))) (k2797@chi-expr (car k6691@e*) k6692@r k6693@mr))))) (set! k2795@chi-application (lambda (k6699@e k6700@r k6701@mr) ((lambda (k6705@t) ((lambda (k6707@ls/false) (if k6707@ls/false (apply (lambda (k6709@rator k6710@rands) ((lambda (k6713@rator) (cons k6713@rator (k2793@chi-expr* k6710@rands k6700@r k6701@mr))) (k2797@chi-expr k6709@rator k6700@r k6701@mr))) k6707@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k6705@t))) (k2763@syntax-dispatch k6705@t '(any . each-any)))) k6699@e))) (set! k2797@chi-expr (lambda (k6715@e k6716@r k6717@mr) (call-with-values (lambda () (k2306@syntax-type k6715@e k6716@r)) (lambda (k6724@k6721@type k6725@k6722@value k6726@k6723@kwd) ((lambda (k6730@kwd k6731@value k6732@type) ((lambda (k6736@t) (if (memv k6736@t '(core-macro)) ((lambda (k6738@transformer) (k6738@transformer k6715@e k6716@r k6717@mr)) (k2777@core-macro-transformer k6731@value)) (if (memv k6736@t '(global)) ((lambda (k6740@lib) ((lambda (k6742@loc) ((lambda () (begin ((k2870@inv-collector) k6740@lib) k6742@loc)))) (cdr k6731@value))) (car k6731@value)) (if (memv k6736@t '(core-prim)) ((lambda (k6744@name) (list 'primitive k6744@name)) k6731@value) (if (memv k6736@t '(call)) (k2795@chi-application k6715@e k6716@r k6717@mr) (if (memv k6736@t '(lexical)) ((lambda (k6746@lex) k6746@lex) (k2647@lexical-var k6731@value)) (if (memv k6736@t '(global-macro global-macro!)) (k2797@chi-expr (k2791@chi-global-macro k6731@value k6715@e) k6716@r k6717@mr) (if (memv k6736@t '(local-macro local-macro!)) (k2797@chi-expr (k2789@chi-local-macro k6731@value k6715@e) k6716@r k6717@mr) (if (memv k6736@t '(macro macro!)) (k2797@chi-expr (k2787@chi-macro k6731@value k6715@e) k6716@r k6717@mr) (if (memv k6736@t '(constant)) ((lambda (k6748@datum) (list 'quote k6748@datum)) k6731@value) (if (memv k6736@t '(set!)) (k2799@chi-set! k6715@e k6716@r k6717@mr) (if (memv k6736@t '(begin)) ((lambda (k6750@t) ((lambda (k6752@ls/false) (if k6752@ls/false (apply (lambda (k6754@x k6755@x*) (k2105@k1962@build-sequence '#f (k2793@chi-expr* (cons k6754@x k6755@x*) k6716@r k6717@mr))) k6752@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k6750@t))) (k2763@syntax-dispatch k6750@t '(_ any . each-any)))) k6715@e) (if (memv k6736@t '(let-syntax letrec-syntax)) ((lambda (k6758@t) ((lambda (k6760@ls/false) (if (and k6760@ls/false (apply (lambda (k6762@xlhs* k6763@xrhs* k6764@xbody k6765@xbody*) (if (not (k2276@valid-bound-ids? k6762@xlhs*)) (k2996@syntax-violation '#f '"invalid identifiers" k6715@e) (void))) k6760@ls/false)) (apply (lambda (k6770@xlhs* k6771@xrhs* k6772@xbody k6773@xbody*) ((lambda (k6778@xlab*) ((lambda (k6780@xrib) ((lambda (k6782@xb*) ((lambda () (k2105@k1962@build-sequence '#f (k2793@chi-expr* (map (lambda (k6784@x) (k2246@add-subst k6780@xrib k6784@x)) (cons k6772@xbody k6773@xbody*)) (append (map cons k6778@xlab* k6782@xb*) k6716@r) (append (map cons k6778@xlab* k6782@xb*) k6717@mr)))))) (map (lambda (k6786@x) (k2328@make-eval-transformer (k2856@expand-transformer (if (eq? k6732@type 'let-syntax) k6786@x (k2246@add-subst k6780@xrib k6786@x)) k6717@mr))) k6771@xrhs*))) (k2197@make-full-rib k6770@xlhs* k6778@xlab*))) (map k2142@gen-label k6770@xlhs*))) k6760@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k6758@t))) (k2763@syntax-dispatch k6758@t '(_ #(each (any any)) any . each-any)))) k6715@e) (if (memv k6736@t '(displaced-lexical)) (k2996@syntax-violation '#f '"identifier out of context" k6715@e) (if (memv k6736@t '(syntax)) (k2996@syntax-violation '#f '"reference to pattern variable outside a syntax form" k6715@e) (if (memv k6736@t '(define define-syntax module import library)) (k2996@syntax-violation '#f (string-append ((lambda (k6788@t) (if (memv k6788@t '(define)) '"a definition" (if (memv k6788@t '(define-syntax)) '"a define-syntax" (if (memv k6788@t '(module)) '"a module definition" (if (memv k6788@t '(library)) '"a library definition" (if (memv k6788@t '(import)) '"an import declaration" (if (memv k6788@t '(export)) '"an export declaration" '"a non-expression"))))))) k6732@type) '" was found where an expression was expected") k6715@e) (if (memv k6736@t '(mutable)) (k2996@syntax-violation '#f '"attempt to reference an unexportable variable" k6715@e) (k2996@syntax-violation '#f '"invalid expression" k6715@e)))))))))))))))))) k6732@type)) k6726@k6723@kwd k6725@k6722@value k6724@k6721@type))))) (set! k2799@chi-set! (lambda (k6790@e k6791@r k6792@mr) ((lambda (k6796@t) ((lambda (k6798@ls/false) (if (and k6798@ls/false (apply (lambda (k6800@x k6801@v) (k2266@id? k6800@x)) k6798@ls/false)) (apply (lambda (k6804@x k6805@v) (call-with-values (lambda () (k2306@syntax-type k6804@x k6791@r)) (lambda (k6811@k6808@type k6812@k6809@value k6813@k6810@kwd) ((lambda (k6817@kwd k6818@value k6819@type) ((lambda (k6823@t) (if (memv k6823@t '(lexical)) (begin (k2651@set-lexical-mutable! k6818@value '#t) (list 'set! (k2647@lexical-var k6818@value) (k2797@chi-expr k6805@v k6791@r k6792@mr))) (if (memv k6823@t '(core-prim)) (k2996@syntax-violation '#f '"cannot modify imported core primitive" k6790@e) (if (memv k6823@t '(global)) (k2996@syntax-violation '#f '"attempt to modify imported binding" k6790@e) (if (memv k6823@t '(global-macro!)) (k2797@chi-expr (k2791@chi-global-macro k6818@value k6790@e) k6791@r k6792@mr) (if (memv k6823@t '(local-macro!)) (k2797@chi-expr (k2789@chi-local-macro k6818@value k6790@e) k6791@r k6792@mr) (if (memv k6823@t '(mutable)) (k2996@syntax-violation '#f '"attempt to assign to an unexportable variable" k6790@e) (k2996@syntax-violation '#f '"invalid syntax" k6790@e)))))))) k6819@type)) k6813@k6810@kwd k6812@k6809@value k6811@k6808@type)))) k6798@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k6796@t))) (k2763@syntax-dispatch k6796@t '(_ any any)))) k6790@e))) (set! k2801@verify-formals (lambda (k6825@fmls k6826@stx) ((lambda (k6829@t) ((lambda (k6831@ls/false) (if k6831@ls/false (apply (lambda (k6833@x*) (if (not (k2276@valid-bound-ids? k6833@x*)) (k2693@invalid-fmls-error k6826@stx k6825@fmls) (void))) k6831@ls/false) ((lambda (k6835@t) ((lambda (k6837@ls/false) (if k6837@ls/false (apply (lambda (k6839@x* k6840@x) (if (not (k2276@valid-bound-ids? (cons k6840@x k6839@x*))) (k2693@invalid-fmls-error k6826@stx k6825@fmls) (void))) k6837@ls/false) ((lambda (k6843@t) ((lambda (k6845@ls/false) (if k6845@ls/false (apply (lambda () (k2996@syntax-violation '#f '"invalid syntax" k6826@stx)) k6845@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k6843@t))) (k2763@syntax-dispatch k6843@t '_))) k6835@t))) (k2763@syntax-dispatch k6835@t '#(each+ any () any)))) k6829@t))) (k2763@syntax-dispatch k6829@t 'each-any))) k6825@fmls))) (set! k2803@chi-lambda-clause (lambda (k6847@stx k6848@fmls k6849@body* k6850@r k6851@mr) ((lambda (k6857@t) ((lambda (k6859@ls/false) (if k6859@ls/false (apply (lambda (k6861@x*) (begin (k2801@verify-formals k6848@fmls k6847@stx) ((lambda (k6863@lex* k6864@lab*) (values k6863@lex* (k2819@chi-internal (k2246@add-subst (k2197@make-full-rib k6861@x* k6864@lab*) k6849@body*) (k2655@add-lexicals k6864@lab* k6863@lex* k6850@r) k6851@mr))) (map k2138@gen-lexical k6861@x*) (map k2142@gen-label k6861@x*)))) k6859@ls/false) ((lambda (k6867@t) ((lambda (k6869@ls/false) (if k6869@ls/false (apply (lambda (k6871@x* k6872@x) (begin (k2801@verify-formals k6848@fmls k6847@stx) ((lambda (k6875@lex* k6876@lab* k6877@lex k6878@lab) (values (append k6875@lex* k6877@lex) (k2819@chi-internal (k2246@add-subst (k2197@make-full-rib (cons k6872@x k6871@x*) (cons k6878@lab k6876@lab*)) k6849@body*) (k2655@add-lexicals (cons k6878@lab k6876@lab*) (cons k6877@lex k6875@lex*) k6850@r) k6851@mr))) (map k2138@gen-lexical k6871@x*) (map k2142@gen-label k6871@x*) (k2138@gen-lexical k6872@x) (k2142@gen-label k6872@x)))) k6869@ls/false) ((lambda (k6883@t) ((lambda (k6885@ls/false) (if k6885@ls/false (apply (lambda () (k2996@syntax-violation '#f '"invalid syntax" k6848@fmls)) k6885@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k6883@t))) (k2763@syntax-dispatch k6883@t '_))) k6867@t))) (k2763@syntax-dispatch k6867@t '#(each+ any () any)))) k6857@t))) (k2763@syntax-dispatch k6857@t 'each-any))) k6848@fmls))) (set! k2805@chi-lambda-clause* (lambda (k6887@stx k6888@fmls* k6889@body** k6890@r k6891@mr) (if (null? k6888@fmls*) (values '() '()) (call-with-values (lambda () (k2803@chi-lambda-clause k6887@stx (car k6888@fmls*) (car k6889@body**) k6890@r k6891@mr)) (lambda (k6899@k6897@a k6900@k6898@b) ((lambda (k6903@b k6904@a) (call-with-values (lambda () (k2805@chi-lambda-clause* k6887@stx (cdr k6888@fmls*) (cdr k6889@body**) k6890@r k6891@mr)) (lambda (k6909@k6907@a* k6910@k6908@b*) ((lambda (k6913@b* k6914@a*) (values (cons k6904@a k6914@a*) (cons k6903@b k6913@b*))) k6910@k6908@b* k6909@k6907@a*)))) k6900@k6898@b k6899@k6897@a)))))) (set! k2807@chi-defun (lambda (k6917@x k6918@r k6919@mr) ((lambda (k6923@fmls k6924@body*) (call-with-values (lambda () (k2803@chi-lambda-clause k6923@fmls k6923@fmls k6924@body* k6918@r k6919@mr)) (lambda (k6929@k6927@fmls k6930@k6928@body) ((lambda (k6933@body k6934@fmls) (k2102@k1912@build-lambda '#f k6934@fmls k6933@body)) k6930@k6928@body k6929@k6927@fmls)))) (car k6917@x) (cdr k6917@x)))) (set! k2809@chi-rhs (lambda (k6937@rhs k6938@r k6939@mr) ((lambda (k6943@t) (if (memv k6943@t '(defun)) (k2807@chi-defun (cdr k6937@rhs) k6938@r k6939@mr) (if (memv k6943@t '(expr)) ((lambda (k6945@expr) (k2797@chi-expr k6945@expr k6938@r k6939@mr)) (cdr k6937@rhs)) (if (memv k6943@t '(top-expr)) ((lambda (k6947@expr) (k2105@k1962@build-sequence '#f (list (k2797@chi-expr k6947@expr k6938@r k6939@mr) (k2106@k1964@build-void)))) (cdr k6937@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" k6937@rhs))))) (car k6937@rhs)))) (set! k2811@expand-interaction-rhs*/init* (lambda (k6949@lhs* k6950@rhs* k6951@init* k6952@r k6953@mr) ((letrec ((k6959@f (lambda (k6961@lhs* k6962@rhs*) (if (null? k6961@lhs*) (map (lambda (k6965@x) (k2797@chi-expr k6965@x k6952@r k6953@mr)) k6951@init*) ((lambda (k6967@lhs k6968@rhs) ((lambda (k6971@t) (if (memv k6971@t '(defun)) ((lambda (k6973@rhs) (cons (list 'set! k6967@lhs k6973@rhs) (k6959@f (cdr k6961@lhs*) (cdr k6962@rhs*)))) (k2807@chi-defun (cdr k6968@rhs) k6952@r k6953@mr)) (if (memv k6971@t '(expr)) ((lambda (k6975@rhs) (cons (list 'set! k6967@lhs k6975@rhs) (k6959@f (cdr k6961@lhs*) (cdr k6962@rhs*)))) (k2797@chi-expr (cdr k6968@rhs) k6952@r k6953@mr)) (if (memv k6971@t '(top-expr)) ((lambda (k6977@e) (cons k6977@e (k6959@f (cdr k6961@lhs*) (cdr k6962@rhs*)))) (k2797@chi-expr (cdr k6968@rhs) k6952@r k6953@mr)) (error 'expand-interaction '"invallid" k6968@rhs))))) (car k6968@rhs))) (car k6961@lhs*) (car k6962@rhs*)))))) k6959@f) k6949@lhs* k6950@rhs*))) (set! k2813@chi-rhs* (lambda (k6979@rhs* k6980@r k6981@mr) ((letrec ((k6985@f (lambda (k6987@ls) (if (null? k6987@ls) '() ((lambda (k6989@a) (cons k6989@a (k6985@f (cdr k6987@ls)))) (k2809@chi-rhs (car k6987@ls) k6980@r k6981@mr)))))) k6985@f) k6979@rhs*))) (set! k2815@find-bound=? (lambda (k6991@x k6992@lhs* k6993@rhs*) (if (null? k6992@lhs*) '#f (if (k2272@bound-id=? k6991@x (car k6992@lhs*)) (car k6993@rhs*) (k2815@find-bound=? k6991@x (cdr k6992@lhs*) (cdr k6993@rhs*)))))) (set! k2817@find-dups (lambda (k6997@ls) ((letrec ((k6999@f (lambda (k7001@ls k7002@dups) (if (null? k7001@ls) k7002@dups ((lambda (k7005@t) (if k7005@t ((lambda (k7007@x) (k6999@f (cdr k7001@ls) (cons (list (car k7001@ls) k7007@x) k7002@dups))) k7005@t) (k6999@f (cdr k7001@ls) k7002@dups))) (k2815@find-bound=? (car k7001@ls) (cdr k7001@ls) (cdr k7001@ls))))))) k6999@f) k6997@ls '()))) (set! k2819@chi-internal (lambda (k7009@e* k7010@r k7011@mr) ((lambda (k7015@rib) (call-with-values (lambda () (k2854@chi-body* (map (lambda (k7025@x) (k2246@add-subst k7015@rib k7025@x)) (k2264@syntax->list k7009@e*)) k7010@r k7011@mr '() '() '() '() '() k7015@rib '#f)) (lambda (k7027@k7017@e* k7028@k7018@r k7029@k7019@mr k7030@k7020@lex* k7031@k7021@rhs* k7032@k7022@mod** k7033@k7023@kwd* k7034@k7024@_exp*) ((lambda (k7043@_exp* k7044@kwd* k7045@mod** k7046@rhs* k7047@lex* k7048@mr k7049@r k7050@e*) (begin (if (null? k7050@e*) (k2996@syntax-violation '#f '"no expression in body" k7050@e*) (void)) ((lambda (k7059@init*) ((lambda (k7061@rhs*) ((lambda () (k2108@k1968@build-letrec* '#f (reverse k7047@lex*) (reverse k7061@rhs*) (k2105@k1962@build-sequence '#f k7059@init*))))) (k2813@chi-rhs* k7046@rhs* k7049@r k7048@mr))) (k2793@chi-expr* (append (apply append (reverse k7045@mod**)) k7050@e*) k7049@r k7048@mr)))) k7034@k7024@_exp* k7033@k7023@kwd* k7032@k7022@mod** k7031@k7021@rhs* k7030@k7020@lex* k7029@k7019@mr k7028@k7018@r k7027@k7017@e*)))) (k2185@make-empty-rib)))) (set! k2821@parse-module (lambda (k7063@e) ((lambda (k7065@t) ((lambda (k7067@ls/false) (if k7067@ls/false (apply (lambda (k7069@export* k7070@b*) (begin (if (not (for-all k2266@id? k7069@export*)) (k2996@syntax-violation '#f '"module exports must be identifiers" k7063@e) (void)) (values '#f (list->vector k7069@export*) k7070@b*))) k7067@ls/false) ((lambda (k7073@t) ((lambda (k7075@ls/false) (if k7075@ls/false (apply (lambda (k7077@name k7078@export* k7079@b*) (begin (if (not (k2266@id? k7077@name)) (k2996@syntax-violation '#f '"module name must be an identifier" k7063@e) (void)) (if (not (for-all k2266@id? k7078@export*)) (k2996@syntax-violation '#f '"module exports must be identifiers" k7063@e) (void)) (values k7077@name (list->vector k7078@export*) k7079@b*))) k7075@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k7073@t))) (k2763@syntax-dispatch k7073@t '(_ any each-any . each-any)))) k7065@t))) (k2763@syntax-dispatch k7065@t '(_ each-any . each-any)))) k7063@e))) (set! k2827@k2822 (make-record-type-descriptor 'module-interface '#f 'k2825 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! k2829@k2824 '#f) (set! k2831@k2823 (make-record-constructor-descriptor k2827@k2822 '#f k2829@k2824)) (set! k2834@module-interface? (record-predicate k2827@k2822)) (set! k2836@make-module-interface (record-constructor k2831@k2823)) (set! k2838@module-interface-first-mark (record-accessor k2827@k2822 '0)) (set! k2840@module-interface-exp-id-vec (record-accessor k2827@k2822 '1)) (set! k2842@module-interface-exp-lab-vec (record-accessor k2827@k2822 '2)) (set! k2844@set-module-interface-first-mark! (record-mutator k2827@k2822 '0)) (set! k2846@set-module-interface-exp-id-vec! (record-mutator k2827@k2822 '1)) (set! k2848@set-module-interface-exp-lab-vec! (record-mutator k2827@k2822 '2)) (set! k2850@module-interface-exp-id* (lambda (k7083@iface k7084@id) ((lambda (k7088@diff-marks) (begin (set! k7088@diff-marks (lambda (k7095@ls k7096@x) (begin (if (null? k7095@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (k7099@a) (if (eq? k7099@a k7096@x) '() (cons k7099@a (k7088@diff-marks (cdr k7095@ls) k7096@x)))) (car k7095@ls))))) ((lambda (k7089@diff k7090@id-vec) (if (null? k7089@diff) k7090@id-vec (vector-map (lambda (k7093@x) (k2212@make-stx (k2214@stx-expr k7093@x) (append k7089@diff (k2216@stx-mark* k7093@x)) '() '())) k7090@id-vec))) (k7088@diff-marks (k2216@stx-mark* k7084@id) (k2838@module-interface-first-mark k7083@iface)) (k2840@module-interface-exp-id-vec k7083@iface)))) '#f))) (set! k2852@chi-internal-module (lambda (k7101@e k7102@r k7103@mr k7104@lex* k7105@rhs* k7106@mod** k7107@kwd*) (call-with-values (lambda () (k2821@parse-module k7101@e)) (lambda (k7118@k7115@name k7119@k7116@exp-id* k7120@k7117@e*) ((lambda (k7124@e* k7125@exp-id* k7126@name) ((lambda (k7130@rib) ((lambda (k7132@e*) ((lambda () (call-with-values (lambda () (k2854@chi-body* k7132@e* k7102@r k7103@mr k7104@lex* k7105@rhs* k7106@mod** k7107@kwd* '() k7130@rib '#f)) (lambda (k7142@k7134@e* k7143@k7135@r k7144@k7136@mr k7145@k7137@lex* k7146@k7138@rhs* k7147@k7139@mod** k7148@k7140@kwd* k7149@k7141@_exp*) ((lambda (k7158@_exp* k7159@kwd* k7160@mod** k7161@rhs* k7162@lex* k7163@mr k7164@r k7165@e*) ((lambda (k7174@exp-lab* k7175@mod**) (if (not k7126@name) (values k7162@lex* k7161@rhs* k7125@exp-id* k7174@exp-lab* k7164@r k7163@mr k7175@mod** k7159@kwd*) ((lambda (k7178@lab k7179@iface) (values k7162@lex* k7161@rhs* (vector k7126@name) (vector k7178@lab) (cons (cons k7178@lab (cons '$module k7179@iface)) k7164@r) (cons (cons k7178@lab (cons '$module k7179@iface)) k7163@mr) k7175@mod** k7159@kwd*)) (k2142@gen-label 'module) (k2836@make-module-interface (car (k2216@stx-mark* k7126@name)) (vector-map (lambda (k7182@x) (k2212@make-stx (k2214@stx-expr k7182@x) (k2216@stx-mark* k7182@x) '() '())) k7125@exp-id*) k7174@exp-lab*)))) (vector-map (lambda (k7184@x) (or (k2292@id->label (k2212@make-stx (k2268@id->sym k7184@x) (k2216@stx-mark* k7184@x) (list k7130@rib) '())) (k2996@syntax-violation '#f '"cannot find module export" k7184@x))) k7125@exp-id*) (cons k7165@e* k7160@mod**))) k7149@k7141@_exp* k7148@k7140@kwd* k7147@k7139@mod** k7146@k7138@rhs* k7145@k7137@lex* k7144@k7136@mr k7143@k7135@r k7142@k7134@e*)))))) (map (lambda (k7186@x) (k2246@add-subst k7130@rib k7186@x)) (k2264@syntax->list k7124@e*)))) (k2185@make-empty-rib))) k7120@k7117@e* k7119@k7116@exp-id* k7118@k7115@name))))) (set! k2854@chi-body* (lambda (k7188@e* k7189@r k7190@mr k7191@lex* k7192@rhs* k7193@mod** k7194@kwd* k7195@exp* k7196@rib k7197@top?) (if (null? k7188@e*) (values k7188@e* k7189@r k7190@mr k7191@lex* k7192@rhs* k7193@mod** k7194@kwd* k7195@exp*) ((lambda (k7208@e) (call-with-values (lambda () (k2306@syntax-type k7208@e k7189@r)) (lambda (k7213@k7210@type k7214@k7211@value k7215@k7212@kwd) ((lambda (k7219@kwd k7220@value k7221@type) ((lambda (k7225@kwd*) ((lambda (k7227@t) (if (memv k7227@t '(define)) (call-with-values (lambda () (k2639@parse-define k7208@e)) (lambda (k7231@k7229@id k7232@k7230@rhs) ((lambda (k7235@rhs k7236@id) (begin (if (k2280@bound-id-member? k7236@id k7225@kwd*) (k2996@syntax-violation '#f '"cannot redefine keyword" k7208@e) (void)) (call-with-values (lambda () (k2146@gen-define-label+loc k7236@id k7196@rib)) (lambda (k7241@k7239@lab k7242@k7240@lex) ((lambda (k7245@lex k7246@lab) (begin (k2187@extend-rib! k7196@rib k7236@id k7246@lab) (k2854@chi-body* (cdr k7188@e*) (k2653@add-lexical k7246@lab k7245@lex k7189@r) k7190@mr (cons k7245@lex k7191@lex*) (cons k7235@rhs k7192@rhs*) k7193@mod** k7225@kwd* k7195@exp* k7196@rib k7197@top?))) k7242@k7240@lex k7241@k7239@lab))))) k7232@k7230@rhs k7231@k7229@id))) (if (memv k7227@t '(define-syntax)) (call-with-values (lambda () (k2641@parse-define-syntax k7208@e)) (lambda (k7251@k7249@id k7252@k7250@rhs) ((lambda (k7255@rhs k7256@id) (begin (if (k2280@bound-id-member? k7256@id k7225@kwd*) (k2996@syntax-violation '#f '"cannot redefine keyword" k7208@e) (void)) ((lambda (k7259@lab k7260@expanded-rhs) (begin (k2187@extend-rib! k7196@rib k7256@id k7259@lab) ((lambda (k7263@b) (k2854@chi-body* (cdr k7188@e*) (cons (cons k7259@lab k7263@b) k7189@r) (cons (cons k7259@lab k7263@b) k7190@mr) k7191@lex* k7192@rhs* k7193@mod** k7225@kwd* k7195@exp* k7196@rib k7197@top?)) (k2328@make-eval-transformer k7260@expanded-rhs)))) (k2148@gen-define-label k7256@id k7196@rib) (k2856@expand-transformer k7255@rhs k7190@mr)))) k7252@k7250@rhs k7251@k7249@id))) (if (memv k7227@t '(let-syntax letrec-syntax)) ((lambda (k7265@t) ((lambda (k7267@ls/false) (if (and k7267@ls/false (apply (lambda (k7269@xlhs* k7270@xrhs* k7271@xbody*) (if (not (k2276@valid-bound-ids? k7269@xlhs*)) (k2996@syntax-violation '#f '"invalid identifiers" k7208@e) (void))) k7267@ls/false)) (apply (lambda (k7275@xlhs* k7276@xrhs* k7277@xbody*) ((lambda (k7281@xlab*) ((lambda (k7283@xrib) ((lambda (k7285@xb*) ((lambda () (k2854@chi-body* (append (map (lambda (k7287@x) (k2246@add-subst k7283@xrib k7287@x)) k7277@xbody*) (cdr k7188@e*)) (append (map cons k7281@xlab* k7285@xb*) k7189@r) (append (map cons k7281@xlab* k7285@xb*) k7190@mr) k7191@lex* k7192@rhs* k7193@mod** k7225@kwd* k7195@exp* k7196@rib k7197@top?)))) (map (lambda (k7289@x) (k2328@make-eval-transformer (k2856@expand-transformer (if (eq? k7221@type 'let-syntax) k7289@x (k2246@add-subst k7283@xrib k7289@x)) k7190@mr))) k7276@xrhs*))) (k2197@make-full-rib k7275@xlhs* k7281@xlab*))) (map k2142@gen-label k7275@xlhs*))) k7267@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k7265@t))) (k2763@syntax-dispatch k7265@t '(_ #(each (any any)) . each-any)))) k7208@e) (if (memv k7227@t '(begin)) ((lambda (k7291@t) ((lambda (k7293@ls/false) (if k7293@ls/false (apply (lambda (k7295@x*) (k2854@chi-body* (append k7295@x* (cdr k7188@e*)) k7189@r k7190@mr k7191@lex* k7192@rhs* k7193@mod** k7225@kwd* k7195@exp* k7196@rib k7197@top?)) k7293@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k7291@t))) (k2763@syntax-dispatch k7291@t '(_ . each-any)))) k7208@e) (if (memv k7227@t '(global-macro global-macro!)) (k2854@chi-body* (cons (k2246@add-subst k7196@rib (k2791@chi-global-macro k7220@value k7208@e)) (cdr k7188@e*)) k7189@r k7190@mr k7191@lex* k7192@rhs* k7193@mod** k7225@kwd* k7195@exp* k7196@rib k7197@top?) (if (memv k7227@t '(local-macro local-macro!)) (k2854@chi-body* (cons (k2246@add-subst k7196@rib (k2789@chi-local-macro k7220@value k7208@e)) (cdr k7188@e*)) k7189@r k7190@mr k7191@lex* k7192@rhs* k7193@mod** k7225@kwd* k7195@exp* k7196@rib k7197@top?) (if (memv k7227@t '(macro macro!)) (k2854@chi-body* (cons (k2246@add-subst k7196@rib (k2787@chi-macro k7220@value k7208@e)) (cdr k7188@e*)) k7189@r k7190@mr k7191@lex* k7192@rhs* k7193@mod** k7225@kwd* k7195@exp* k7196@rib k7197@top?) (if (memv k7227@t '(module)) (call-with-values (lambda () (k2852@chi-internal-module k7208@e k7189@r k7190@mr k7191@lex* k7192@rhs* k7193@mod** k7225@kwd*)) (lambda (k7305@k7297@lex* k7306@k7298@rhs* k7307@k7299@m-exp-id* k7308@k7300@m-exp-lab* k7309@k7301@r k7310@k7302@mr k7311@k7303@mod** k7312@k7304@kwd*) ((lambda (k7321@kwd* k7322@mod** k7323@mr k7324@r k7325@m-exp-lab* k7326@m-exp-id* k7327@rhs* k7328@lex*) (begin (vector-for-each (lambda (k7337@id k7338@lab) (k2187@extend-rib! k7196@rib k7337@id k7338@lab)) k7326@m-exp-id* k7325@m-exp-lab*) (k2854@chi-body* (cdr k7188@e*) k7324@r k7323@mr k7328@lex* k7327@rhs* k7322@mod** k7321@kwd* k7195@exp* k7196@rib k7197@top?))) k7312@k7304@kwd* k7311@k7303@mod** k7310@k7302@mr k7309@k7301@r k7308@k7300@m-exp-lab* k7307@k7299@m-exp-id* k7306@k7298@rhs* k7305@k7297@lex*))) (if (memv k7227@t '(library)) (begin (k2966@library-expander (k2288@stx->datum k7208@e)) (k2854@chi-body* (cdr k7188@e*) k7189@r k7190@mr k7191@lex* k7192@rhs* k7193@mod** k7225@kwd* k7195@exp* k7196@rib k7197@top?)) (if (memv k7227@t '(export)) ((lambda (k7341@t) ((lambda (k7343@ls/false) (if k7343@ls/false (apply (lambda (k7345@exp-decl*) (k2854@chi-body* (cdr k7188@e*) k7189@r k7190@mr k7191@lex* k7192@rhs* k7193@mod** k7225@kwd* (append k7345@exp-decl* k7195@exp*) k7196@rib k7197@top?)) k7343@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k7341@t))) (k2763@syntax-dispatch k7341@t '(_ . each-any)))) k7208@e) (if (memv k7227@t '(import)) ((lambda () ((lambda (k7348@module-import? k7350@module-import k7352@library-import) (begin (set! k7348@module-import? (lambda (k7424@e) ((lambda (k7426@t) ((lambda (k7428@ls/false) (if (and k7428@ls/false (apply (lambda (k7430@id) (k2266@id? k7430@id)) k7428@ls/false)) (apply (lambda (k7432@id) '#t) k7428@ls/false) ((lambda (k7434@t) ((lambda (k7436@ls/false) (if k7436@ls/false (apply (lambda (k7438@imp*) '#f) k7436@ls/false) ((lambda (k7440@t) ((lambda (k7442@ls/false) (if k7442@ls/false (apply (lambda () (k2996@syntax-violation '#f '"malformed import form" k7424@e)) k7442@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k7440@t))) (k2763@syntax-dispatch k7440@t '_))) k7434@t))) (k2763@syntax-dispatch k7434@t '(_ . each-any)))) k7426@t))) (k2763@syntax-dispatch k7426@t '(_ any)))) k7424@e))) (set! k7350@module-import (lambda (k7393@e k7394@r) ((lambda (k7397@t) ((lambda (k7399@ls/false) (if (and k7399@ls/false (apply (lambda (k7401@id) (k2266@id? k7401@id)) k7399@ls/false)) (apply (lambda (k7403@id) (call-with-values (lambda () (k2306@syntax-type k7403@id k7394@r)) (lambda (k7408@k7405@type k7409@k7406@value k7410@k7407@kwd) ((lambda (k7414@kwd k7415@value k7416@type) ((lambda (k7420@t) (if (memv k7420@t '($module)) ((lambda (k7422@iface) (values (k2850@module-interface-exp-id* k7422@iface k7403@id) (k2842@module-interface-exp-lab-vec k7422@iface))) k7415@value) (k2996@syntax-violation '#f '"invalid import" k7393@e))) k7416@type)) k7410@k7407@kwd k7409@k7406@value k7408@k7405@type)))) k7399@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k7397@t))) (k2763@syntax-dispatch k7397@t '(_ any)))) k7393@e))) (set! k7352@library-import (lambda (k7367@e) ((lambda (k7369@t) ((lambda (k7371@ls/false) (if k7371@ls/false (apply (lambda (k7373@ctxt k7374@imp*) (call-with-values (lambda () (k2864@parse-import-spec* (k3002@syntax->datum k7374@imp*))) (lambda (k7379@k7377@subst-names k7380@k7378@subst-labels) ((lambda (k7383@subst-labels k7384@subst-names) (values (vector-map (lambda (k7387@name) (k2232@datum->stx k7373@ctxt k7387@name)) k7384@subst-names) k7383@subst-labels)) k7380@k7378@subst-labels k7379@k7377@subst-names)))) k7371@ls/false) ((lambda (k7389@t) ((lambda (k7391@ls/false) (if k7391@ls/false (apply (lambda () (k2996@syntax-violation '#f '"invalid import form" k7367@e)) k7391@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k7389@t))) (k2763@syntax-dispatch k7389@t '_))) k7369@t))) (k2763@syntax-dispatch k7369@t '(any . each-any)))) k7367@e))) (begin (call-with-values (lambda () (if (k7348@module-import? k7208@e) (k7350@module-import k7208@e k7189@r) (k7352@library-import k7208@e))) (lambda (k7355@k7353@id* k7356@k7354@lab*) ((lambda (k7359@lab* k7360@id*) (vector-for-each (lambda (k7363@id k7364@lab) (k2187@extend-rib! k7196@rib k7363@id k7364@lab)) k7360@id* k7359@lab*)) k7356@k7354@lab* k7355@k7353@id*))) (k2854@chi-body* (cdr k7188@e*) k7189@r k7190@mr k7191@lex* k7192@rhs* k7193@mod** k7225@kwd* k7195@exp* k7196@rib k7197@top?)))) '#f '#f '#f))) (if k7197@top? (k2854@chi-body* (cdr k7188@e*) k7189@r k7190@mr (cons (k2138@gen-lexical 'dummy) k7191@lex*) (cons (cons 'top-expr k7208@e) k7192@rhs*) k7193@mod** k7225@kwd* k7195@exp* k7196@rib k7197@top?) (values k7188@e* k7189@r k7190@mr k7191@lex* k7192@rhs* k7193@mod** k7225@kwd* k7195@exp*)))))))))))))) k7221@type)) (if (k2266@id? k7219@kwd) (cons k7219@kwd k7194@kwd*) k7194@kwd*))) k7215@k7212@kwd k7214@k7211@value k7213@k7210@type)))) (car k7188@e*))))) (set! k2856@expand-transformer (lambda (k7444@expr k7445@r) ((lambda (k7448@rtc) ((lambda (k7450@expanded-rhs) (begin (for-each ((lambda (k7452@mark-visit) (lambda (k7454@x) (begin (k1792@k1447@invoke-library k7454@x) (k7452@mark-visit k7454@x)))) (k2872@vis-collector)) (k7448@rtc)) k7450@expanded-rhs)) ((lambda (k7460@k7456@inv-collector k7461@k7457@vis-collector k7462@k7458@inv-collector k7463@k7459@vis-collector) ((lambda (k7468@swap) (dynamic-wind k7468@swap (lambda () (k2797@chi-expr k7444@expr k7445@r k7445@r)) k7468@swap)) (lambda () (begin ((lambda (k7470@t) (begin (k7460@k7456@inv-collector k7462@k7458@inv-collector) (set! k7462@k7458@inv-collector k7470@t))) (k7460@k7456@inv-collector)) ((lambda (k7472@t) (begin (k7461@k7457@vis-collector k7463@k7459@vis-collector) (set! k7463@k7459@vis-collector k7472@t))) (k7461@k7457@vis-collector)))))) k2870@inv-collector k2872@vis-collector k7448@rtc (lambda (k7474@x) (values))))) (k2868@make-collector)))) (set! k2858@parse-exports (lambda (k7476@exp*) ((letrec ((k7478@f (lambda (k7480@exp* k7481@int* k7482@ext*) (if (null? k7480@exp*) (begin (if (not (k2276@valid-bound-ids? k7482@ext*)) (k2996@syntax-violation 'export '"invalid exports" (k2817@find-dups k7482@ext*)) (void)) (values (map k3002@syntax->datum k7482@ext*) k7481@int*)) ((lambda (k7486@t) ((lambda (k7488@ls/false) (if k7488@ls/false (apply (lambda (k7490@rename k7491@i* k7492@e*) (begin (if (not (and (eq? (k3002@syntax->datum k7490@rename) 'rename) (for-all k2266@id? k7491@i*) (for-all k2266@id? k7492@e*))) (k2996@syntax-violation 'export '"invalid export specifier" (car k7480@exp*)) (void)) (k7478@f (cdr k7480@exp*) (append k7491@i* k7481@int*) (append k7492@e* k7482@ext*)))) k7488@ls/false) ((lambda (k7496@t) ((lambda (k7498@ls/false) (if k7498@ls/false (apply (lambda (k7500@ie) (begin (if (not (k2266@id? k7500@ie)) (k2996@syntax-violation 'export '"invalid export" k7500@ie) (void)) (k7478@f (cdr k7480@exp*) (cons k7500@ie k7481@int*) (cons k7500@ie k7482@ext*)))) k7498@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k7496@t))) (k2763@syntax-dispatch k7496@t 'any))) k7486@t))) (k2763@syntax-dispatch k7486@t '(any . #(each (any any)))))) (car k7480@exp*)))))) k7478@f) k7476@exp* '() '()))) (set! k2860@parse-library-name (lambda (k7502@spec) ((lambda (k7505@parse) (begin (set! k7505@parse (lambda (k7516@x) ((lambda (k7518@t) ((lambda (k7520@ls/false) (if (and k7520@ls/false (apply (lambda (k7522@v*) (for-all (lambda (k7524@x) ((lambda (k7526@x) (and (integer? k7526@x) (exact? k7526@x))) (k3002@syntax->datum k7524@x))) k7522@v*)) k7520@ls/false)) (apply (lambda (k7528@v*) (values '() (map k3002@syntax->datum k7528@v*))) k7520@ls/false) ((lambda (k7530@t) ((lambda (k7532@ls/false) (if (and k7532@ls/false (apply (lambda (k7534@x k7535@rest) (symbol? (k3002@syntax->datum k7534@x))) k7532@ls/false)) (apply (lambda (k7538@x k7539@rest) (call-with-values (lambda () (k7505@parse k7539@rest)) (lambda (k7544@k7542@x* k7545@k7543@v*) ((lambda (k7548@v* k7549@x*) (values (cons (k3002@syntax->datum k7538@x) k7549@x*) k7548@v*)) k7545@k7543@v* k7544@k7542@x*)))) k7532@ls/false) ((lambda (k7552@t) ((lambda (k7554@ls/false) (if k7554@ls/false (apply (lambda () (values '() '())) k7554@ls/false) ((lambda (k7556@t) ((lambda (k7558@ls/false) (if k7558@ls/false (apply (lambda () (k2996@syntax-violation '#f '"invalid library name" k7502@spec)) k7558@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k7556@t))) (k2763@syntax-dispatch k7556@t '_))) k7552@t))) (k2763@syntax-dispatch k7552@t '()))) k7530@t))) (k2763@syntax-dispatch k7530@t '(any . any)))) k7518@t))) (k2763@syntax-dispatch k7518@t '(each-any)))) k7516@x))) (call-with-values (lambda () (k7505@parse k7502@spec)) (lambda (k7508@k7506@name* k7509@k7507@ver*) ((lambda (k7512@ver* k7513@name*) (begin (if (null? k7513@name*) (k2996@syntax-violation '#f '"empty library name" k7502@spec) (void)) (values k7513@name* k7512@ver*))) k7509@k7507@ver* k7508@k7506@name*))))) '#f))) (set! k2862@parse-library (lambda (k7560@e) ((lambda (k7562@t) ((lambda (k7564@ls/false) (if (and k7564@ls/false (apply (lambda (k7566@library k7567@name* k7568@export k7569@exp* k7570@import k7571@imp* k7572@b*) (and (eq? (k3002@syntax->datum k7568@export) 'export) (eq? (k3002@syntax->datum k7570@import) 'import) (eq? (k3002@syntax->datum k7566@library) 'library))) k7564@ls/false)) (apply (lambda (k7580@library k7581@name* k7582@export k7583@exp* k7584@import k7585@imp* k7586@b*) (values k7581@name* k7583@exp* k7585@imp* k7586@b*)) k7564@ls/false) ((lambda (k7594@t) ((lambda (k7596@ls/false) (if k7596@ls/false (apply (lambda () (k2996@syntax-violation '#f '"malformed library" k7560@e)) k7596@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k7594@t))) (k2763@syntax-dispatch k7594@t '_))) k7562@t))) (k2763@syntax-dispatch k7562@t '(any each-any (any . each-any) (any . each-any) . each-any)))) k7560@e))) (set! k2864@parse-import-spec* ((lambda () ((lambda (k7599@idsyn? k7601@dup-error k7603@merge-substs k7605@exclude* k7607@find* k7609@rem* k7611@remove-dups k7613@parse-library-name k7615@import-library k7617@get-import k7619@add-imports!) (begin (set! k7599@idsyn? (lambda (k8110@x) (symbol? (k3002@syntax->datum k8110@x)))) (set! k7601@dup-error (lambda (k8108@name) (k2996@syntax-violation 'import '"two imports with different bindings" k8108@name))) (set! k7603@merge-substs (lambda (k8090@s k8091@subst) ((lambda (k8095@insert-to-subst) (begin (set! k8095@insert-to-subst (lambda (k8096@a k8097@subst) ((lambda (k8100@name k8101@label) ((lambda (k8104@t) (if k8104@t ((lambda (k8106@x) (if (eq? (cdr k8106@x) k8101@label) k8097@subst (k7601@dup-error k8100@name))) k8104@t) (cons k8096@a k8097@subst))) (assq k8100@name k8097@subst))) (car k8096@a) (cdr k8096@a)))) (if (null? k8090@s) k8091@subst (k8095@insert-to-subst (car k8090@s) (k7603@merge-substs (cdr k8090@s) k8091@subst))))) '#f))) (set! k7605@exclude* (lambda (k8048@sym* k8049@subst) ((lambda (k8053@exclude) (begin (set! k8053@exclude (lambda (k8074@sym k8075@subst) (if (null? k8075@subst) (k2996@syntax-violation 'import '"cannot rename unbound identifier" k8074@sym) (if (eq? k8074@sym (caar k8075@subst)) (values (cdar k8075@subst) (cdr k8075@subst)) ((lambda (k8078@a) (call-with-values (lambda () (k8053@exclude k8074@sym (cdr k8075@subst))) (lambda (k8082@k8080@old k8083@k8081@subst) ((lambda (k8086@subst k8087@old) (values k8087@old (cons k8078@a k8086@subst))) k8083@k8081@subst k8082@k8080@old)))) (car k8075@subst)))))) (if (null? k8048@sym*) (values '() k8049@subst) (call-with-values (lambda () (k8053@exclude (car k8048@sym*) k8049@subst)) (lambda (k8056@k8054@old k8057@k8055@subst) ((lambda (k8060@subst k8061@old) (call-with-values (lambda () (k7605@exclude* (cdr k8048@sym*) k8060@subst)) (lambda (k8066@k8064@old* k8067@k8065@subst) ((lambda (k8070@subst k8071@old*) (values (cons k8061@old k8071@old*) k8070@subst)) k8067@k8065@subst k8066@k8064@old*)))) k8057@k8055@subst k8056@k8054@old)))))) '#f))) (set! k7607@find* (lambda (k8040@sym* k8041@subst) (map (lambda (k8044@x) ((lambda (k8046@t) (if k8046@t (cdr k8046@t) (k2996@syntax-violation 'import '"cannot find identifier" k8044@x))) (assq k8044@x k8041@subst))) k8040@sym*))) (set! k7609@rem* (lambda (k8032@sym* k8033@subst) ((letrec ((k8036@f (lambda (k8038@subst) (if (null? k8038@subst) '() (if (memq (caar k8038@subst) k8032@sym*) (k8036@f (cdr k8038@subst)) (cons (car k8038@subst) (k8036@f (cdr k8038@subst)))))))) k8036@f) k8033@subst))) (set! k7611@remove-dups (lambda (k8030@ls) (if (null? k8030@ls) '() (if (memq (car k8030@ls) (cdr k8030@ls)) (k7611@remove-dups (cdr k8030@ls)) (cons (car k8030@ls) (k7611@remove-dups (cdr k8030@ls))))))) (set! k7613@parse-library-name (lambda (k7800@spec) ((lambda (k7803@subversion? k7805@subversion-pred k7807@version-pred) (begin (set! k7803@subversion? (lambda (k8026@x) ((lambda (k8028@x) (and (integer? k8028@x) (exact? k8028@x) (>= k8028@x '0))) (k3002@syntax->datum k8026@x)))) (set! k7805@subversion-pred (lambda (k7930@x*) ((lambda (k7932@t) ((lambda (k7934@ls/false) (if (and k7934@ls/false (apply (lambda (k7936@n) (k7803@subversion? k7936@n)) k7934@ls/false)) (apply (lambda (k7938@n) (lambda (k7940@x) (= k7940@x (k3002@syntax->datum k7938@n)))) k7934@ls/false) ((lambda (k7942@t) ((lambda (k7944@ls/false) (if (and k7944@ls/false (apply (lambda (k7946@p? k7947@sub*) (eq? (k3002@syntax->datum k7946@p?) 'and)) k7944@ls/false)) (apply (lambda (k7950@p? k7951@sub*) ((lambda (k7954@p*) (lambda (k7956@x) (for-all (lambda (k7958@p) (k7958@p k7956@x)) k7954@p*))) (map k7805@subversion-pred k7951@sub*))) k7944@ls/false) ((lambda (k7960@t) ((lambda (k7962@ls/false) (if (and k7962@ls/false (apply (lambda (k7964@p? k7965@sub*) (eq? (k3002@syntax->datum k7964@p?) 'or)) k7962@ls/false)) (apply (lambda (k7968@p? k7969@sub*) ((lambda (k7972@p*) (lambda (k7974@x) (exists (lambda (k7976@p) (k7976@p k7974@x)) k7972@p*))) (map k7805@subversion-pred k7969@sub*))) k7962@ls/false) ((lambda (k7978@t) ((lambda (k7980@ls/false) (if (and k7980@ls/false (apply (lambda (k7982@p? k7983@sub) (eq? (k3002@syntax->datum k7982@p?) 'not)) k7980@ls/false)) (apply (lambda (k7986@p? k7987@sub) ((lambda (k7990@p) (lambda (k7992@x) (not (k7990@p k7992@x)))) (k7805@subversion-pred k7987@sub))) k7980@ls/false) ((lambda (k7994@t) ((lambda (k7996@ls/false) (if (and k7996@ls/false (apply (lambda (k7998@p? k7999@n) (and (eq? (k3002@syntax->datum k7998@p?) '<=) (k7803@subversion? k7999@n))) k7996@ls/false)) (apply (lambda (k8002@p? k8003@n) (lambda (k8006@x) (<= k8006@x (k3002@syntax->datum k8003@n)))) k7996@ls/false) ((lambda (k8008@t) ((lambda (k8010@ls/false) (if (and k8010@ls/false (apply (lambda (k8012@p? k8013@n) (and (eq? (k3002@syntax->datum k8012@p?) '>=) (k7803@subversion? k8013@n))) k8010@ls/false)) (apply (lambda (k8016@p? k8017@n) (lambda (k8020@x) (>= k8020@x (k3002@syntax->datum k8017@n)))) k8010@ls/false) ((lambda (k8022@t) ((lambda (k8024@ls/false) (if k8024@ls/false (apply (lambda () (k2996@syntax-violation 'import '"invalid sub-version spec" k7800@spec k7930@x*)) k8024@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k8022@t))) (k2763@syntax-dispatch k8022@t '_))) k8008@t))) (k2763@syntax-dispatch k8008@t '(any any)))) k7994@t))) (k2763@syntax-dispatch k7994@t '(any any)))) k7978@t))) (k2763@syntax-dispatch k7978@t '(any any)))) k7960@t))) (k2763@syntax-dispatch k7960@t '(any . each-any)))) k7942@t))) (k2763@syntax-dispatch k7942@t '(any . each-any)))) k7932@t))) (k2763@syntax-dispatch k7932@t 'any))) k7930@x*))) (set! k7807@version-pred (lambda (k7850@x*) ((lambda (k7852@t) ((lambda (k7854@ls/false) (if k7854@ls/false (apply (lambda () (lambda (k7856@x) '#t)) k7854@ls/false) ((lambda (k7858@t) ((lambda (k7860@ls/false) (if (and k7860@ls/false (apply (lambda (k7862@c k7863@ver*) (eq? (k3002@syntax->datum k7862@c) 'and)) k7860@ls/false)) (apply (lambda (k7866@c k7867@ver*) ((lambda (k7870@p*) (lambda (k7872@x) (for-all (lambda (k7874@p) (k7874@p k7872@x)) k7870@p*))) (map k7807@version-pred k7867@ver*))) k7860@ls/false) ((lambda (k7876@t) ((lambda (k7878@ls/false) (if (and k7878@ls/false (apply (lambda (k7880@c k7881@ver*) (eq? (k3002@syntax->datum k7880@c) 'or)) k7878@ls/false)) (apply (lambda (k7884@c k7885@ver*) ((lambda (k7888@p*) (lambda (k7890@x) (exists (lambda (k7892@p) (k7892@p k7890@x)) k7888@p*))) (map k7807@version-pred k7885@ver*))) k7878@ls/false) ((lambda (k7894@t) ((lambda (k7896@ls/false) (if (and k7896@ls/false (apply (lambda (k7898@c k7899@ver) (eq? (k3002@syntax->datum k7898@c) 'not)) k7896@ls/false)) (apply (lambda (k7902@c k7903@ver) ((lambda (k7906@p) (lambda (k7908@x) (not (k7906@p k7908@x)))) (k7807@version-pred k7903@ver))) k7896@ls/false) ((lambda (k7910@t) ((lambda (k7912@ls/false) (if k7912@ls/false (apply (lambda (k7914@sub*) ((lambda (k7916@p*) (lambda (k7918@x) ((letrec ((k7920@f (lambda (k7922@p* k7923@x) (if (null? k7922@p*) '#t (if (null? k7923@x) '#f (and ((car k7922@p*) (car k7923@x)) (k7920@f (cdr k7922@p*) (cdr k7923@x)))))))) k7920@f) k7916@p* k7918@x))) (map k7805@subversion-pred k7914@sub*))) k7912@ls/false) ((lambda (k7926@t) ((lambda (k7928@ls/false) (if k7928@ls/false (apply (lambda () (k2996@syntax-violation 'import '"invalid version spec" k7800@spec k7850@x*)) k7928@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k7926@t))) (k2763@syntax-dispatch k7926@t '_))) k7910@t))) (k2763@syntax-dispatch k7910@t 'each-any))) k7894@t))) (k2763@syntax-dispatch k7894@t '(any any)))) k7876@t))) (k2763@syntax-dispatch k7876@t '(any . each-any)))) k7858@t))) (k2763@syntax-dispatch k7858@t '(any . each-any)))) k7852@t))) (k2763@syntax-dispatch k7852@t '()))) k7850@x*))) ((letrec ((k7808@f (lambda (k7810@x) ((lambda (k7812@t) ((lambda (k7814@ls/false) (if k7814@ls/false (apply (lambda (k7816@version-spec*) (values '() (k7807@version-pred k7816@version-spec*))) k7814@ls/false) ((lambda (k7818@t) ((lambda (k7820@ls/false) (if (and k7820@ls/false (apply (lambda (k7822@x k7823@x*) (k7599@idsyn? k7822@x)) k7820@ls/false)) (apply (lambda (k7826@x k7827@x*) (call-with-values (lambda () (k7808@f k7827@x*)) (lambda (k7832@k7830@name k7833@k7831@pred) ((lambda (k7836@pred k7837@name) (values (cons (k3002@syntax->datum k7826@x) k7837@name) k7836@pred)) k7833@k7831@pred k7832@k7830@name)))) k7820@ls/false) ((lambda (k7840@t) ((lambda (k7842@ls/false) (if k7842@ls/false (apply (lambda () (values '() (lambda (k7844@x) '#t))) k7842@ls/false) ((lambda (k7846@t) ((lambda (k7848@ls/false) (if k7848@ls/false (apply (lambda () (k2996@syntax-violation '#f '"invalid import spec" k7800@spec)) k7848@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k7846@t))) (k2763@syntax-dispatch k7846@t '_))) k7840@t))) (k2763@syntax-dispatch k7840@t '()))) k7818@t))) (k2763@syntax-dispatch k7818@t '(any . any)))) k7812@t))) (k2763@syntax-dispatch k7812@t '(each-any)))) k7810@x)))) k7808@f) k7800@spec))) '#f '#f '#f))) (set! k7615@import-library (lambda (k7786@spec*) (call-with-values (lambda () (k7613@parse-library-name k7786@spec*)) (lambda (k7790@k7788@name k7791@k7789@pred) ((lambda (k7794@pred k7795@name) (begin (if (null? k7795@name) (k2996@syntax-violation 'import '"empty library name" k7786@spec*) (void)) ((lambda (k7798@lib) (begin (if (not k7798@lib) (k2996@syntax-violation 'import '"cannot find library with required name" k7795@name) (void)) (if (not (k7794@pred (k1745@k1353@library-version k7798@lib))) (k2996@syntax-violation 'import '"library does not satisfy version specification" k7786@spec* k7798@lib) (void)) ((k2874@imp-collector) k7798@lib) (k1749@k1361@library-subst k7798@lib))) (k1785@k1433@find-library-by-name k7795@name)))) k7791@k7789@pred k7790@k7788@name))))) (set! k7617@get-import (lambda (k7644@spec) ((lambda (k7646@t) ((lambda (k7648@ls/false) (if (and k7648@ls/false (apply (lambda (k7650@x k7651@x*) (not (memq (k3002@syntax->datum k7650@x) '(for rename except only prefix library)))) k7648@ls/false)) (apply (lambda (k7654@x k7655@x*) (k7615@import-library (cons k7654@x k7655@x*))) k7648@ls/false) ((lambda (k7658@t) ((lambda (k7660@ls/false) (if (and k7660@ls/false (apply (lambda (k7662@rename k7663@isp k7664@old* k7665@new*) (and (eq? (k3002@syntax->datum k7662@rename) 'rename) (for-all k7599@idsyn? k7664@old*) (for-all k7599@idsyn? k7665@new*))) k7660@ls/false)) (apply (lambda (k7670@rename k7671@isp k7672@old* k7673@new*) ((lambda (k7678@subst k7679@old* k7680@new*) ((lambda (k7684@old-label*) ((lambda (k7686@subst) (k7603@merge-substs (map cons k7680@new* k7684@old-label*) k7686@subst)) (k7609@rem* k7679@old* k7678@subst))) (k7607@find* k7679@old* k7678@subst))) (k7617@get-import k7671@isp) (map k3002@syntax->datum k7672@old*) (map k3002@syntax->datum k7673@new*))) k7660@ls/false) ((lambda (k7688@t) ((lambda (k7690@ls/false) (if (and k7690@ls/false (apply (lambda (k7692@except k7693@isp k7694@sym*) (and (eq? (k3002@syntax->datum k7692@except) 'except) (for-all k7599@idsyn? k7694@sym*))) k7690@ls/false)) (apply (lambda (k7698@except k7699@isp k7700@sym*) ((lambda (k7704@subst) (k7609@rem* (map k3002@syntax->datum k7700@sym*) k7704@subst)) (k7617@get-import k7699@isp))) k7690@ls/false) ((lambda (k7706@t) ((lambda (k7708@ls/false) (if (and k7708@ls/false (apply (lambda (k7710@only k7711@isp k7712@sym*) (and (eq? (k3002@syntax->datum k7710@only) 'only) (for-all k7599@idsyn? k7712@sym*))) k7708@ls/false)) (apply (lambda (k7716@only k7717@isp k7718@sym*) ((lambda (k7722@subst k7723@sym*) ((lambda (k7726@sym*) ((lambda (k7728@lab*) (map cons k7726@sym* k7728@lab*)) (k7607@find* k7726@sym* k7722@subst))) (k7611@remove-dups k7723@sym*))) (k7617@get-import k7717@isp) (map k3002@syntax->datum k7718@sym*))) k7708@ls/false) ((lambda (k7730@t) ((lambda (k7732@ls/false) (if (and k7732@ls/false (apply (lambda (k7734@prefix k7735@isp k7736@p) (and (eq? (k3002@syntax->datum k7734@prefix) 'prefix) (k7599@idsyn? k7736@p))) k7732@ls/false)) (apply (lambda (k7740@prefix k7741@isp k7742@p) ((lambda (k7746@subst k7747@prefix) (map (lambda (k7750@x) (cons (string->symbol (string-append k7747@prefix (symbol->string (car k7750@x)))) (cdr k7750@x))) k7746@subst)) (k7617@get-import k7741@isp) (symbol->string (k3002@syntax->datum k7742@p)))) k7732@ls/false) ((lambda (k7752@t) ((lambda (k7754@ls/false) (if (and k7754@ls/false (apply (lambda (k7756@library k7757@spec*) (eq? (k3002@syntax->datum k7756@library) 'library)) k7754@ls/false)) (apply (lambda (k7760@library k7761@spec*) (k7615@import-library k7761@spec*)) k7754@ls/false) ((lambda (k7764@t) ((lambda (k7766@ls/false) (if (and k7766@ls/false (apply (lambda (k7768@for k7769@isp k7770@rest) (eq? (k3002@syntax->datum k7768@for) 'for)) k7766@ls/false)) (apply (lambda (k7774@for k7775@isp k7776@rest) (k7617@get-import k7775@isp)) k7766@ls/false) ((lambda (k7780@t) ((lambda (k7782@ls/false) (if k7782@ls/false (apply (lambda (k7784@spec) (k2996@syntax-violation 'import '"invalid import spec" k7784@spec)) k7782@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k7780@t))) (k2763@syntax-dispatch k7780@t 'any))) k7764@t))) (k2763@syntax-dispatch k7764@t '(any any . any)))) k7752@t))) (k2763@syntax-dispatch k7752@t '(any each-any)))) k7730@t))) (k2763@syntax-dispatch k7730@t '(any any any)))) k7706@t))) (k2763@syntax-dispatch k7706@t '(any any . each-any)))) k7688@t))) (k2763@syntax-dispatch k7688@t '(any any . each-any)))) k7658@t))) (k2763@syntax-dispatch k7658@t '(any any . #(each (any any)))))) k7646@t))) (k2763@syntax-dispatch k7646@t '(any . each-any)))) k7644@spec))) (set! k7619@add-imports! (lambda (k7628@imp k7629@h) ((lambda (k7632@subst) (for-each (lambda (k7634@x) ((lambda (k7636@name k7637@label) ((lambda (k7640@t) (if k7640@t ((lambda (k7642@l) (if (not (eq? k7642@l k7637@label)) (k7601@dup-error k7636@name) (void))) k7640@t) (hashtable-set! k7629@h k7636@name k7637@label))) (hashtable-ref k7629@h k7636@name '#f))) (car k7634@x) (cdr k7634@x))) k7632@subst)) (k7617@get-import k7628@imp)))) (lambda (k7620@imp*) ((letrec ((k7622@f (lambda (k7624@imp* k7625@h) (if (null? k7624@imp*) (hashtable-entries k7625@h) (begin (k7619@add-imports! (car k7624@imp*) k7625@h) (k7622@f (cdr k7624@imp*) k7625@h)))))) k7622@f) k7620@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! k2866@make-top-rib (lambda (k8112@names k8113@labels) ((lambda (k8116@rib) (begin (vector-for-each (lambda (k8118@name k8119@label) (begin (if (not (symbol? k8118@name)) (error 'make-top-rib '"BUG: not a symbol" k8118@name) (void)) (k2189@extend-rib/nc! k8116@rib (k2212@make-stx k8118@name k2134@top-mark* '() '()) k8119@label))) k8112@names k8113@labels) k8116@rib)) (k2185@make-empty-rib)))) (set! k2868@make-collector (lambda () ((lambda (k8122@ls) (lambda k8126 ((lambda (k8127) (if (= k8127 '0) (apply (lambda () k8122@ls) k8126) (if (= k8127 '1) (apply (lambda (k8124@x) (set! k8122@ls (k2127@set-cons k8124@x k8122@ls))) k8126) (error 'apply '"invalid arg count")))) (length k8126)))) '()))) (set! k2870@inv-collector (k1164@k942@make-parameter (lambda k8128@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (k8130@x) (begin (if (not (procedure? k8130@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" k8130@x) (void)) k8130@x)))) (set! k2872@vis-collector (k1164@k942@make-parameter (lambda k8132@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (k8134@x) (begin (if (not (procedure? k8134@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" k8134@x) (void)) k8134@x)))) (set! k2874@imp-collector (k1164@k942@make-parameter (lambda k8136@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (k8138@x) (begin (if (not (procedure? k8138@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" k8138@x) (void)) k8138@x)))) (set! k2876@chi-library-internal (lambda (k8140@e* k8141@rib k8142@top?) (call-with-values (lambda () (k2854@chi-body* k8140@e* '() '() '() '() '() '() '() k8141@rib k8142@top?)) (lambda (k8154@k8146@e* k8155@k8147@r k8156@k8148@mr k8157@k8149@lex* k8158@k8150@rhs* k8159@k8151@mod** k8160@k8152@_kwd* k8161@k8153@exp*) ((lambda (k8170@exp* k8171@_kwd* k8172@mod** k8173@rhs* k8174@lex* k8175@mr k8176@r k8177@e*) (values (append (apply append (reverse k8172@mod**)) k8177@e*) k8176@r k8175@mr (reverse k8174@lex*) (reverse k8173@rhs*) k8170@exp*)) k8161@k8153@exp* k8160@k8152@_kwd* k8159@k8151@mod** k8158@k8150@rhs* k8157@k8149@lex* k8156@k8148@mr k8155@k8147@r k8154@k8146@e*))))) (set! k2878@chi-interaction-expr (lambda (k8186@e k8187@rib k8188@r) (call-with-values (lambda () (k2854@chi-body* (list k8186@e) k8188@r k8188@r '() '() '() '() '() k8187@rib '#t)) (lambda (k8200@k8192@e* k8201@k8193@r k8202@k8194@mr k8203@k8195@lex* k8204@k8196@rhs* k8205@k8197@mod** k8206@k8198@_kwd* k8207@k8199@_exp*) ((lambda (k8216@_exp* k8217@_kwd* k8218@mod** k8219@rhs* k8220@lex* k8221@mr k8222@r k8223@e*) ((lambda (k8232@e*) ((lambda (k8234@e) (values k8234@e k8222@r)) (if (null? k8232@e*) (k2106@k1964@build-void) (if (null? (cdr k8232@e*)) (car k8232@e*) (k2105@k1962@build-sequence '#f k8232@e*))))) (k2811@expand-interaction-rhs*/init* (reverse k8220@lex*) (reverse k8219@rhs*) (append (apply append (reverse k8218@mod**)) k8223@e*) k8222@r k8221@mr))) k8207@k8199@_exp* k8206@k8198@_kwd* k8205@k8197@mod** k8204@k8196@rhs* k8203@k8195@lex* k8202@k8194@mr k8201@k8193@r k8200@k8192@e*))))) (set! k2880@library-body-expander (lambda (k8236@name k8237@main-exp* k8238@imp* k8239@b* k8240@top?) ((lambda (k8247@itc) (begin (set! k8247@itc (k2868@make-collector)) ((lambda (k8252@k8248@imp-collector k8253@k8249@top-level-context k8254@k8250@imp-collector k8255@k8251@top-level-context) ((lambda (k8260@swap) (dynamic-wind k8260@swap (lambda () (call-with-values (lambda () (k2864@parse-import-spec* k8238@imp*)) (lambda (k8264@k8262@subst-names k8265@k8263@subst-labels) ((lambda (k8268@subst-labels k8269@subst-names) ((lambda (k8272@rib) ((lambda (k8275@wrap) (begin (set! k8275@wrap (lambda (k8383@x) (k2212@make-stx k8383@x k2134@top-mark* (list k8272@rib) '()))) ((lambda (k8276@b* k8277@main-exp* k8278@rtc k8279@vtc) ((lambda (k8288@k8284@inv-collector k8289@k8285@vis-collector k8290@k8286@inv-collector k8291@k8287@vis-collector) ((lambda (k8296@swap) (dynamic-wind k8296@swap (lambda () (call-with-values (lambda () (k2876@chi-library-internal k8276@b* k8272@rib k8240@top?)) (lambda (k8304@k8298@init* k8305@k8299@r k8306@k8300@mr k8307@k8301@lex* k8308@k8302@rhs* k8309@k8303@internal-exp*) ((lambda (k8316@internal-exp* k8317@rhs* k8318@lex* k8319@mr k8320@r k8321@init*) (call-with-values (lambda () (k2858@parse-exports (append k8277@main-exp* k8316@internal-exp*))) (lambda (k8330@k8328@exp-name* k8331@k8329@exp-id*) ((lambda (k8334@exp-id* k8335@exp-name*) (begin (k2193@seal-rib! k8272@rib) ((lambda (k8338@init*) ((lambda (k8340@rhs*) ((lambda () (begin (k2195@unseal-rib! k8272@rib) ((lambda (k8342@loc* k8343@export-subst) ((lambda (k8347@errstr) (begin (set! k8347@errstr '"attempt to export mutated variable") (call-with-values (lambda () (k2976@make-export-env/macros k8318@lex* k8342@loc* k8320@r)) (lambda (k8351@k8348@export-env k8352@k8349@global* k8353@k8350@macro*) ((lambda (k8357@macro* k8358@global* k8359@export-env) (begin (for-each (lambda (k8363@s) ((lambda (k8365@name k8366@label) ((lambda (k8369@p) (if k8369@p ((lambda (k8371@b) ((lambda (k8373@type) (if (eq? k8373@type 'mutable) (k2996@syntax-violation 'export k8347@errstr k8365@name) (void))) (car k8371@b))) (cdr k8369@p)) (void))) (assq k8366@label k8359@export-env))) (car k8363@s) (cdr k8363@s))) k8343@export-subst) ((lambda (k8375@invoke-body k8376@invoke-definitions) (values (k8247@itc) (k8278@rtc) (k8279@vtc) (k2105@k1962@build-sequence '#f (append k8376@invoke-definitions (list k8375@invoke-body))) k8357@macro* k8343@export-subst k8359@export-env)) (k2108@k1968@build-letrec* '#f k8318@lex* k8340@rhs* (k2972@build-exports k8358@global* k8338@init*)) (map k2101@k1799@build-global-define (map cdr k8358@global*))))) k8353@k8350@macro* k8352@k8349@global* k8351@k8348@export-env))))) '#f)) (map k2140@gen-global k8318@lex*) (k2974@make-export-subst k8335@exp-name* k8334@exp-id*)))))) (k2813@chi-rhs* k8317@rhs* k8320@r k8319@mr))) (k2793@chi-expr* k8321@init* k8320@r k8319@mr)))) k8331@k8329@exp-id* k8330@k8328@exp-name*)))) k8309@k8303@internal-exp* k8308@k8302@rhs* k8307@k8301@lex* k8306@k8300@mr k8305@k8299@r k8304@k8298@init*)))) k8296@swap)) (lambda () (begin ((lambda (k8379@t) (begin (k8288@k8284@inv-collector k8290@k8286@inv-collector) (set! k8290@k8286@inv-collector k8379@t))) (k8288@k8284@inv-collector)) ((lambda (k8381@t) (begin (k8289@k8285@vis-collector k8291@k8287@vis-collector) (set! k8291@k8287@vis-collector k8381@t))) (k8289@k8285@vis-collector)))))) k2870@inv-collector k2872@vis-collector k8278@rtc k8279@vtc)) (map k8275@wrap k8239@b*) (map k8275@wrap k8237@main-exp*) (k2868@make-collector) (k2868@make-collector)))) '#f)) (k2866@make-top-rib k8269@subst-names k8268@subst-labels))) k8265@k8263@subst-labels k8264@k8262@subst-names)))) k8260@swap)) (lambda () (begin ((lambda (k8385@t) (begin (k8252@k8248@imp-collector k8254@k8250@imp-collector) (set! k8254@k8250@imp-collector k8385@t))) (k8252@k8248@imp-collector)) ((lambda (k8387@t) (begin (k8253@k8249@top-level-context k8255@k8251@top-level-context) (set! k8255@k8251@top-level-context k8387@t))) (k8253@k8249@top-level-context)))))) k2874@imp-collector k3010@top-level-context k8247@itc '#f))) '#f))) (set! k2882@core-library-expander (lambda (k8389@e k8390@verify-name) (call-with-values (lambda () (k2862@parse-library k8389@e)) (lambda (k8397@k8393@name* k8398@k8394@exp* k8399@k8395@imp* k8400@k8396@b*) ((lambda (k8405@b* k8406@imp* k8407@exp* k8408@name*) (call-with-values (lambda () (k2860@parse-library-name k8408@name*)) (lambda (k8415@k8413@name k8416@k8414@ver) ((lambda (k8419@ver k8420@name) (begin (k8390@verify-name k8420@name) (call-with-values (lambda () (k2880@library-body-expander k8420@name k8407@exp* k8406@imp* k8405@b* '#f)) (lambda (k8430@k8423@imp* k8431@k8424@invoke-req* k8432@k8425@visit-req* k8433@k8426@invoke-code k8434@k8427@visit-code k8435@k8428@export-subst k8436@k8429@export-env) ((lambda (k8444@export-env k8445@export-subst k8446@visit-code k8447@invoke-code k8448@visit-req* k8449@invoke-req* k8450@imp*) (values k8420@name k8419@ver k8450@imp* k8449@invoke-req* k8448@visit-req* k8447@invoke-code k8446@visit-code k8445@export-subst k8444@export-env)) k8436@k8429@export-env k8435@k8428@export-subst k8434@k8427@visit-code k8433@k8426@invoke-code k8432@k8425@visit-req* k8431@k8424@invoke-req* k8430@k8423@imp*))))) k8416@k8414@ver k8415@k8413@name)))) k8400@k8396@b* k8399@k8395@imp* k8398@k8394@exp* k8397@k8393@name*))))) (set! k2884@parse-top-level-program (lambda (k8458@e*) ((lambda (k8460@t) ((lambda (k8462@ls/false) (if (and k8462@ls/false (apply (lambda (k8464@import k8465@imp* k8466@b*) (eq? (k3002@syntax->datum k8464@import) 'import)) k8462@ls/false)) (apply (lambda (k8470@import k8471@imp* k8472@b*) (values k8471@imp* k8472@b*)) k8462@ls/false) ((lambda (k8476@t) ((lambda (k8478@ls/false) (if (and k8478@ls/false (apply (lambda (k8480@import k8481@x k8482@y) (eq? (k3002@syntax->datum k8480@import) 'import)) k8478@ls/false)) (apply (lambda (k8486@import k8487@x k8488@y) (k2996@syntax-violation 'expander '"invalid syntax of top-level program" (k2260@syntax-car k8458@e*))) k8478@ls/false) ((lambda (k8492@t) ((lambda (k8494@ls/false) (if k8494@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) k8494@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k8492@t))) (k2763@syntax-dispatch k8492@t '_))) k8476@t))) (k2763@syntax-dispatch k8476@t '((any . any) . any)))) k8460@t))) (k2763@syntax-dispatch k8460@t '((any . each-any) . each-any)))) k8458@e*))) (set! k2886@top-level-expander (lambda (k8496@e*) (call-with-values (lambda () (k2884@parse-top-level-program k8496@e*)) (lambda (k8500@k8498@imp* k8501@k8499@b*) ((lambda (k8504@b* k8505@imp*) (call-with-values (lambda () (k2880@library-body-expander '() '() k8505@imp* k8504@b* '#t)) (lambda (k8515@k8508@imp* k8516@k8509@invoke-req* k8517@k8510@visit-req* k8518@k8511@invoke-code k8519@k8512@visit-code k8520@k8513@export-subst k8521@k8514@export-env) ((lambda (k8529@export-env k8530@export-subst k8531@visit-code k8532@invoke-code k8533@visit-req* k8534@invoke-req* k8535@imp*) (values k8534@invoke-req* k8532@invoke-code)) k8521@k8514@export-env k8520@k8513@export-subst k8519@k8512@visit-code k8518@k8511@invoke-code k8517@k8510@visit-req* k8516@k8509@invoke-req* k8515@k8508@imp*)))) k8501@k8499@b* k8500@k8498@imp*))))) (set! k2892@k2887 (make-record-type-descriptor 'env '#f 'k2890 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! k2894@k2889 '#f) (set! k2896@k2888 (make-record-constructor-descriptor k2892@k2887 '#f k2894@k2889)) (set! k2899@env? (record-predicate k2892@k2887)) (set! k2901@make-env (record-constructor k2896@k2888)) (set! k2903@env-names (record-accessor k2892@k2887 '0)) (set! k2905@env-labels (record-accessor k2892@k2887 '1)) (set! k2907@env-itc (record-accessor k2892@k2887 '2)) (set! k2909@set-env-names! (record-mutator k2892@k2887 '0)) (set! k2911@set-env-labels! (record-mutator k2892@k2887 '1)) (set! k2913@set-env-itc! (record-mutator k2892@k2887 '2)) (set! k2915@rp (k1161@k936@make-record-printer 'env (lambda (k8543@x k8544@p k8545@wr) (display '"#<environment>" k8544@p)))) (set! k2921@k2916 (make-record-type-descriptor 'interaction-env '#f 'k2919 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! k2923@k2918 '#f) (set! k2925@k2917 (make-record-constructor-descriptor k2921@k2916 '#f k2923@k2918)) (set! k2928@interaction-env? (record-predicate k2921@k2916)) (set! k2930@make-interaction-env (record-constructor k2925@k2917)) (set! k2932@interaction-env-rib (record-accessor k2921@k2916 '0)) (set! k2934@interaction-env-r (record-accessor k2921@k2916 '1)) (set! k2936@interaction-env-locs (record-accessor k2921@k2916 '2)) (set! k2938@set-interaction-env-rib! (record-mutator k2921@k2916 '0)) (set! k2940@set-interaction-env-r! (record-mutator k2921@k2916 '1)) (set! k2942@set-interaction-env-locs! (record-mutator k2921@k2916 '2)) (set! k2944@rp (k1161@k936@make-record-printer 'interaction-env (lambda (k8549@x k8550@p k8551@wr) (display '"#<environment>" k8550@p)))) (set! k2946@interaction-environment-symbols (lambda () (k2954@environment-symbols (k3008@interaction-environment)))) (set! k2948@environment-bindings (lambda (k8555@e) (vector->list (vector-map (lambda (k8557@name k8558@label) (k2950@parse-binding (cons k8557@name (k1791@k1445@imported-label->binding k8558@label)))) (k2903@env-names k8555@e) (k2905@env-labels k8555@e))))) (set! k2950@parse-binding (lambda (k8561@b) (cons (car k8561@b) ((lambda (k8563@t) (if (memv k8563@t '(core-prim global)) 'procedure (if (memv k8563@t '(core-macro macro global-macro)) 'syntax (if (memv k8563@t '($core-rtd)) 'record (if (eq? (car k8561@b) (cadr k8561@b)) 'syntax 'unknown))))) (cadr k8561@b))))) (set! k2952@environment? (lambda (k8565@x) (or (k2899@env? k8565@x) (k2928@interaction-env? k8565@x)))) (set! k2954@environment-symbols (lambda (k8567@x) (if (k2899@env? k8567@x) (vector->list (k2903@env-names k8567@x)) (if (k2928@interaction-env? k8567@x) (map values (k2165@rib-sym* (k2932@interaction-env-rib k8567@x))) (assertion-violation 'environment-symbols '"not an environment" k8567@x))))) (set! k2956@environment (lambda k8569@imp* ((lambda (k8571@itc) ((lambda (k8575@k8573@imp-collector k8576@k8574@imp-collector) ((lambda (k8579@swap) (dynamic-wind k8579@swap (lambda () (call-with-values (lambda () (k2864@parse-import-spec* k8569@imp*)) (lambda (k8583@k8581@subst-names k8584@k8582@subst-labels) ((lambda (k8587@subst-labels k8588@subst-names) (k2901@make-env k8588@subst-names k8587@subst-labels k8571@itc)) k8584@k8582@subst-labels k8583@k8581@subst-names)))) k8579@swap)) (lambda () ((lambda (k8591@t) (begin (k8575@k8573@imp-collector k8576@k8574@imp-collector) (set! k8576@k8574@imp-collector k8591@t))) (k8575@k8573@imp-collector))))) k2874@imp-collector k8571@itc)) (k2868@make-collector)))) (set! k2958@null-environment (lambda (k8593@n) (begin (if (not (eqv? k8593@n '5)) (assertion-violation 'null-environment '"not 5" k8593@n) (void)) (k2956@environment '(psyntax null-environment-5))))) (set! k2960@scheme-report-environment (lambda (k8595@n) (begin (if (not (eqv? k8595@n '5)) (assertion-violation 'scheme-report-environment '"not 5" k8595@n) (void)) (k2956@environment '(psyntax scheme-report-environment-5))))) (set! k2962@expand (lambda (k8597@x k8598@env) (if (k2899@env? k8598@env) ((lambda (k8601@rib) ((lambda (k8603@x k8604@itc k8605@rtc k8606@vtc) ((lambda (k8611@x) (begin (k2193@seal-rib! k8601@rib) (values k8611@x (k8605@rtc)))) ((lambda (k8621@k8613@top-level-context k8622@k8614@inv-collector k8623@k8615@vis-collector k8624@k8616@imp-collector k8625@k8617@top-level-context k8626@k8618@inv-collector k8627@k8619@vis-collector k8628@k8620@imp-collector) ((lambda (k8637@swap) (dynamic-wind k8637@swap (lambda () (k2797@chi-expr k8603@x '() '())) k8637@swap)) (lambda () (begin ((lambda (k8639@t) (begin (k8621@k8613@top-level-context k8625@k8617@top-level-context) (set! k8625@k8617@top-level-context k8639@t))) (k8621@k8613@top-level-context)) ((lambda (k8641@t) (begin (k8622@k8614@inv-collector k8626@k8618@inv-collector) (set! k8626@k8618@inv-collector k8641@t))) (k8622@k8614@inv-collector)) ((lambda (k8643@t) (begin (k8623@k8615@vis-collector k8627@k8619@vis-collector) (set! k8627@k8619@vis-collector k8643@t))) (k8623@k8615@vis-collector)) ((lambda (k8645@t) (begin (k8624@k8616@imp-collector k8628@k8620@imp-collector) (set! k8628@k8620@imp-collector k8645@t))) (k8624@k8616@imp-collector)))))) k3010@top-level-context k2870@inv-collector k2872@vis-collector k2874@imp-collector '#f k8605@rtc k8606@vtc k8604@itc))) (k2212@make-stx k8597@x k2134@top-mark* (list k8601@rib) '()) (k2907@env-itc k8598@env) (k2868@make-collector) (k2868@make-collector))) (k2866@make-top-rib (k2903@env-names k8598@env) (k2905@env-labels k8598@env))) (if (k2928@interaction-env? k8598@env) ((lambda (k8647@rib k8648@r k8649@rtc) ((lambda (k8653@x) (call-with-values (lambda () ((lambda (k8665@k8657@top-level-context k8666@k8658@inv-collector k8667@k8659@vis-collector k8668@k8660@imp-collector k8669@k8661@top-level-context k8670@k8662@inv-collector k8671@k8663@vis-collector k8672@k8664@imp-collector) ((lambda (k8681@swap) (dynamic-wind k8681@swap (lambda () (k2878@chi-interaction-expr k8653@x k8647@rib k8648@r)) k8681@swap)) (lambda () (begin ((lambda (k8683@t) (begin (k8665@k8657@top-level-context k8669@k8661@top-level-context) (set! k8669@k8661@top-level-context k8683@t))) (k8665@k8657@top-level-context)) ((lambda (k8685@t) (begin (k8666@k8658@inv-collector k8670@k8662@inv-collector) (set! k8670@k8662@inv-collector k8685@t))) (k8666@k8658@inv-collector)) ((lambda (k8687@t) (begin (k8667@k8659@vis-collector k8671@k8663@vis-collector) (set! k8671@k8663@vis-collector k8687@t))) (k8667@k8659@vis-collector)) ((lambda (k8689@t) (begin (k8668@k8660@imp-collector k8672@k8664@imp-collector) (set! k8672@k8664@imp-collector k8689@t))) (k8668@k8660@imp-collector)))))) k3010@top-level-context k2870@inv-collector k2872@vis-collector k2874@imp-collector k8598@env k8649@rtc (k2868@make-collector) (k2868@make-collector))) (lambda (k8691@k8655@e k8692@k8656@r^) ((lambda (k8695@r^ k8696@e) (begin (k2940@set-interaction-env-r! k8598@env k8695@r^) (values k8696@e (k8649@rtc)))) k8692@k8656@r^ k8691@k8655@e)))) (k2212@make-stx k8597@x k2134@top-mark* (list k8647@rib) '()))) (k2932@interaction-env-rib k8598@env) (k2934@interaction-env-r k8598@env) (k2868@make-collector)) (assertion-violation 'expand '"not an environment" k8598@env))))) (set! k2964@eval (lambda (k8699@x k8700@env) (begin (if (not (k2952@environment? k8700@env)) (error 'eval '"not an environment" k8700@env) (void)) (call-with-values (lambda () (k2962@expand k8699@x k8700@env)) (lambda (k8705@k8703@x k8706@k8704@invoke-req*) ((lambda (k8709@invoke-req* k8710@x) (begin (for-each k1792@k1447@invoke-library k8709@invoke-req*) (eval-core (k1248@k1176@expanded->core k8710@x)))) k8706@k8704@invoke-req* k8705@k8703@x)))))) (set! k2966@library-expander (lambda k8814 ((lambda (k8815) (if (= k8815 '3) (apply (lambda (k8713@x k8714@filename k8715@verify-name) ((lambda (k8720@build-visit-code k8722@visit!) (begin (set! k8720@build-visit-code (lambda (k8796@macro*) (if (null? k8796@macro*) (k2106@k1964@build-void) (k2105@k1962@build-sequence '#f (map (lambda (k8798@x) ((lambda (k8800@loc k8801@src) (list 'set! k8800@loc k8801@src)) (car k8798@x) (cddr k8798@x))) k8796@macro*))))) (set! k8722@visit! (lambda (k8788@macro*) (for-each (lambda (k8790@x) ((lambda (k8792@loc k8793@proc) (set-symbol-value! k8792@loc k8793@proc)) (car k8790@x) (cadr k8790@x))) k8788@macro*))) (call-with-values (lambda () (k2882@core-library-expander k8713@x k8715@verify-name)) (lambda (k8732@k8723@name k8733@k8724@ver k8734@k8725@imp* k8735@k8726@inv* k8736@k8727@vis* k8737@k8728@invoke-code k8738@k8729@macro* k8739@k8730@export-subst k8740@k8731@export-env) ((lambda (k8750@export-env k8751@export-subst k8752@macro* k8753@invoke-code k8754@vis* k8755@inv* k8756@imp* k8757@ver k8758@name) ((lambda (k8768@id k8769@name k8770@ver k8771@imp* k8772@vis* k8773@inv* k8774@visit-proc k8775@invoke-proc k8776@visit-code k8777@invoke-code) (begin (k1790@k1443@install-library k8768@id k8769@name k8770@ver k8771@imp* k8772@vis* k8773@inv* k8751@export-subst k8750@export-env k8774@visit-proc k8775@invoke-proc k8776@visit-code k8777@invoke-code '#t k8714@filename) (values k8768@id k8769@name k8770@ver k8771@imp* k8772@vis* k8773@inv* k8777@invoke-code k8776@visit-code k8751@export-subst k8750@export-env))) (k1150@k914@gensym) k8758@name k8757@ver (map k1796@k1455@library-spec k8756@imp*) (map k1796@k1455@library-spec k8754@vis*) (map k1796@k1455@library-spec k8755@inv*) (lambda () (k8722@visit! k8752@macro*)) (lambda () (eval-core (k1248@k1176@expanded->core k8753@invoke-code))) (k8720@build-visit-code k8752@macro*) k8753@invoke-code)) k8740@k8731@export-env k8739@k8730@export-subst k8738@k8729@macro* k8737@k8728@invoke-code k8736@k8727@vis* k8735@k8726@inv* k8734@k8725@imp* k8733@k8724@ver k8732@k8723@name))))) '#f '#f)) k8814) (if (= k8815 '2) (apply (lambda (k8804@x k8805@filename) (k2966@library-expander k8804@x k8805@filename (lambda (k8808@x) (values)))) k8814) (if (= k8815 '1) (apply (lambda (k8810@x) (k2966@library-expander k8810@x '#f (lambda (k8812@x) (values)))) k8814) (error 'apply '"invalid arg count"))))) (length k8814)))) (set! k2968@boot-library-expand (lambda (k8816@x) (call-with-values (lambda () (k2966@library-expander k8816@x)) (lambda (k8828@k8818@id k8829@k8819@name k8830@k8820@ver k8831@k8821@imp* k8832@k8822@vis* k8833@k8823@inv* k8834@k8824@invoke-code k8835@k8825@visit-code k8836@k8826@export-subst k8837@k8827@export-env) ((lambda (k8848@export-env k8849@export-subst k8850@visit-code k8851@invoke-code k8852@inv* k8853@vis* k8854@imp* k8855@ver k8856@name k8857@id) (values k8856@name k8851@invoke-code k8849@export-subst k8848@export-env)) k8837@k8827@export-env k8836@k8826@export-subst k8835@k8825@visit-code k8834@k8824@invoke-code k8833@k8823@inv* k8832@k8822@vis* k8831@k8821@imp* k8830@k8820@ver k8829@k8819@name k8828@k8818@id))))) (set! k2970@rev-map-append (lambda (k8868@f k8869@ls k8870@ac) (if (null? k8869@ls) k8870@ac (k2970@rev-map-append k8868@f (cdr k8869@ls) (cons (k8868@f (car k8869@ls)) k8870@ac))))) (set! k2972@build-exports (lambda (k8874@lex*+loc* k8875@init*) (k2105@k1962@build-sequence '#f (cons (k2106@k1964@build-void) (k2970@rev-map-append (lambda (k8878@x) (list 'set! (cdr k8878@x) (car k8878@x))) k8874@lex*+loc* k8875@init*))))) (set! k2974@make-export-subst (lambda (k8880@name* k8881@id*) (map (lambda (k8884@name k8885@id) ((lambda (k8888@label) (begin (if (not k8888@label) (k2996@syntax-violation '#f '"cannot export unbound identifier" k8885@id) (void)) (cons k8884@name k8888@label))) (k2292@id->label k8885@id))) k8880@name* k8881@id*))) (set! k2976@make-export-env/macros (lambda (k8890@lex* k8891@loc* k8892@r) ((lambda (k8897@lookup) (begin (set! k8897@lookup (lambda (k8926@x) ((letrec ((k8928@f (lambda (k8930@x k8931@lex* k8932@loc*) (if (pair? k8931@lex*) (if (eq? k8930@x (car k8931@lex*)) (car k8932@loc*) (k8928@f k8930@x (cdr k8931@lex*) (cdr k8932@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) k8928@f) k8926@x k8890@lex* k8891@loc*))) ((letrec ((k8898@f (lambda (k8900@r k8901@env k8902@global* k8903@macro*) (if (null? k8900@r) (values k8901@env k8902@global* k8903@macro*) ((lambda (k8908@x) ((lambda (k8910@label k8911@b) ((lambda (k8914@t) (if (memv k8914@t '(lexical)) ((lambda (k8916@v) ((lambda (k8918@loc k8919@type) (k8898@f (cdr k8900@r) (cons (cons* k8910@label k8919@type k8918@loc) k8901@env) (cons (cons (k2647@lexical-var k8916@v) k8918@loc) k8902@global*) k8903@macro*)) (k8897@lookup (k2647@lexical-var k8916@v)) (if (k2649@lexical-mutable? k8916@v) 'mutable 'global))) (k2302@binding-value k8911@b)) (if (memv k8914@t '(local-macro)) ((lambda (k8922@loc) (k8898@f (cdr k8900@r) (cons (cons* k8910@label 'global-macro k8922@loc) k8901@env) k8902@global* (cons (cons k8922@loc (k2302@binding-value k8911@b)) k8903@macro*))) (k1150@k914@gensym)) (if (memv k8914@t '(local-macro!)) ((lambda (k8924@loc) (k8898@f (cdr k8900@r) (cons (cons* k8910@label 'global-macro! k8924@loc) k8901@env) k8902@global* (cons (cons k8924@loc (k2302@binding-value k8911@b)) k8903@macro*))) (k1150@k914@gensym)) (if (memv k8914@t '($rtd $module)) (k8898@f (cdr k8900@r) (cons k8908@x k8901@env) k8902@global* k8903@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (k2300@binding-type k8911@b) (k2302@binding-value k8911@b))))))) (k2300@binding-type k8911@b))) (car k8908@x) (cdr k8908@x))) (car k8900@r)))))) k8898@f) k8892@r '() '() '()))) '#f))) (set! k2978@generate-temporaries (lambda (k8936@ls) ((lambda (k8938@t) ((lambda (k8940@ls/false) (if k8940@ls/false (apply (lambda (k8942@ls) (map (lambda (k8944@x) (k2212@make-stx ((lambda (k8946@x) (if (or (symbol? k8946@x) (string? k8946@x)) (k1150@k914@gensym k8946@x) (k1150@k914@gensym 't))) (k3002@syntax->datum k8944@x)) k2134@top-mark* '() '())) k8942@ls)) k8940@ls/false) ((lambda (k8948@t) ((lambda (k8950@ls/false) (if k8950@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) k8950@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k8948@t))) (k2763@syntax-dispatch k8948@t '_))) k8938@t))) (k2763@syntax-dispatch k8938@t 'each-any))) k8936@ls))) (set! k2980@free-identifier=? (lambda (k8952@x k8953@y) (if (k2266@id? k8952@x) (if (k2266@id? k8953@y) (k2274@free-id=? k8952@x k8953@y) (assertion-violation 'free-identifier=? '"not an identifier" k8953@y)) (assertion-violation 'free-identifier=? '"not an identifier" k8952@x)))) (set! k2982@bound-identifier=? (lambda (k8956@x k8957@y) (if (k2266@id? k8956@x) (if (k2266@id? k8957@y) (k2272@bound-id=? k8956@x k8957@y) (assertion-violation 'bound-identifier=? '"not an identifier" k8957@y)) (assertion-violation 'bound-identifier=? '"not an identifier" k8956@x)))) (set! k2984@make-source-condition (lambda (k8960@x) ((lambda (k8970@k8965 k8972@k8967 k8974@k8966 k8977@k8964 k8979@make-source-condition k8981@k8962 k8983@k8963 k8985@source-condition? k8987@source-filename k8989@source-character) (begin (set! k8970@k8965 (make-record-type-descriptor '&source-information k10072@k9387@&condition-rtd 'k8968 '#f '#f '#((immutable file-name) (immutable character)))) (set! k8972@k8967 '#f) (set! k8974@k8966 (make-record-constructor-descriptor k8970@k8965 k10073@k9389@&condition-rcd k8972@k8967)) (set! k8977@k8964 (record-predicate k8970@k8965)) (set! k8979@make-source-condition (record-constructor k8974@k8966)) (set! k8981@k8962 (record-accessor k8970@k8965 '0)) (set! k8983@k8963 (record-accessor k8970@k8965 '1)) (set! k8985@source-condition? (condition-predicate k8970@k8965)) (set! k8987@source-filename (condition-accessor k8970@k8965 k8981@k8962)) (set! k8989@source-character (condition-accessor k8970@k8965 k8983@k8963)) (if (pair? k8960@x) (k8979@make-source-condition (car k8960@x) (cdr k8960@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! k2986@extract-position-condition (lambda (k8990@x) (k2984@make-source-condition (k2988@expression-position k8990@x)))) (set! k2988@expression-position (lambda (k8992@x) (and (k2210@stx? k8992@x) ((lambda (k8994@x) (and (k1153@k920@annotation? k8994@x) (k1154@k922@annotation-source k8994@x))) (k2214@stx-expr k8992@x))))) (set! k2990@assertion-error (lambda (k8996@expr k8997@pos) (raise (condition (k10120@k9579@make-assertion-violation) (k10138@k9627@make-who-condition 'assert) (k10078@k9470@make-message-condition '"assertion failed") (k10128@k9601@make-irritants-condition (list k8996@expr)) (k2984@make-source-condition k8997@pos))))) (set! k2992@syntax-error (lambda (k9000@x . k9002@args) (begin (if (not (for-all string? k9002@args)) (assertion-violation 'syntax-error '"invalid argument" k9002@args) (void)) (raise (condition (k10078@k9470@make-message-condition (if (null? k9002@args) '"invalid syntax" (apply string-append k9002@args))) (k10172@k9717@make-syntax-violation (k3002@syntax->datum k9000@x) '#f) (k2986@extract-position-condition k9000@x)))))) (set! k2994@syntax-violation* (lambda (k9004@who k9005@msg k9006@form k9007@condition-object) (begin (if (not (string? k9005@msg)) (assertion-violation 'syntax-violation '"message is not a string" k9005@msg) (void)) ((lambda (k9012@who) (raise (condition (if k9012@who (k10138@k9627@make-who-condition k9012@who) (condition)) (k10078@k9470@make-message-condition k9005@msg) k9007@condition-object (k2986@extract-position-condition k9006@form)))) (if (or (string? k9004@who) (symbol? k9004@who)) k9004@who (if (not k9004@who) ((lambda (k9014@t) ((lambda (k9016@ls/false) (if (and k9016@ls/false (apply (lambda (k9018@id) (k2266@id? k9018@id)) k9016@ls/false)) (apply (lambda (k9020@id) (k3002@syntax->datum k9020@id)) k9016@ls/false) ((lambda (k9022@t) ((lambda (k9024@ls/false) (if (and k9024@ls/false (apply (lambda (k9026@id k9027@rest) (k2266@id? k9026@id)) k9024@ls/false)) (apply (lambda (k9030@id k9031@rest) (k3002@syntax->datum k9030@id)) k9024@ls/false) ((lambda (k9034@t) ((lambda (k9036@ls/false) (if k9036@ls/false (apply (lambda () '#f) k9036@ls/false) (k2996@syntax-violation '#f '"invalid syntax" k9034@t))) (k2763@syntax-dispatch k9034@t '_))) k9022@t))) (k2763@syntax-dispatch k9022@t '(any . any)))) k9014@t))) (k2763@syntax-dispatch k9014@t 'any))) k9006@form) (assertion-violation 'syntax-violation '"invalid who argument" k9004@who))))))) (set! k2996@syntax-violation (lambda k9052 ((lambda (k9053) (if (= k9053 '3) (apply (lambda (k9038@who k9039@msg k9040@form) (k2996@syntax-violation k9038@who k9039@msg k9040@form '#f)) k9052) (if (= k9053 '4) (apply (lambda (k9044@who k9045@msg k9046@form k9047@subform) (k2994@syntax-violation* k9044@who k9045@msg k9046@form (k10172@k9717@make-syntax-violation (k3002@syntax->datum k9046@form) (k3002@syntax->datum k9047@subform)))) k9052) (error 'apply '"invalid arg count")))) (length k9052)))) (set! k2998@identifier? (lambda (k9054@x) (k2266@id? k9054@x))) (set! k3000@datum->syntax (lambda (k9056@id k9057@datum) (if (k2266@id? k9056@id) (k2232@datum->stx k9056@id k9057@datum) (assertion-violation 'datum->syntax '"not an identifier" k9056@id)))) (set! k3002@syntax->datum (lambda (k9060@x) (k2288@stx->datum k9060@x))) (set! k3004@compile-r6rs-top-level (lambda (k9062@x*) (call-with-values (lambda () (k2886@top-level-expander k9062@x*)) (lambda (k9066@k9064@lib* k9067@k9065@invoke-code) ((lambda (k9070@invoke-code k9071@lib*) (lambda () (begin (for-each k1792@k1447@invoke-library k9071@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (k1248@k1176@expanded->core k9070@invoke-code)) (void)) (eval-core (k1248@k1176@expanded->core k9070@invoke-code))))) k9067@k9065@invoke-code k9066@k9064@lib*))))) (set! k3006@pre-compile-r6rs-top-level (lambda (k9074@x*) (call-with-values (lambda () (k2886@top-level-expander k9074@x*)) (lambda (k9078@k9076@lib* k9079@k9077@invoke-code) ((lambda (k9082@invoke-code k9083@lib*) (begin (for-each k1792@k1447@invoke-library k9083@lib*) (k1162@k938@compile-core (k1248@k1176@expanded->core k9082@invoke-code)))) k9079@k9077@invoke-code k9078@k9076@lib*))))) (set! k3008@interaction-environment ((lambda (k9086@the-env) (lambda () (or k9086@the-env ((lambda (k9088@lib k9089@rib) (begin ((lambda (k9092@subst) (begin (k2175@set-rib-sym*! k9089@rib (map car k9092@subst)) (k2177@set-rib-mark**! k9089@rib (map (lambda (k9094@x) k2134@top-mark*) k9092@subst)) (k2179@set-rib-label*! k9089@rib (map cdr k9092@subst)))) (k1749@k1361@library-subst k9088@lib)) ((lambda (k9096@env) (begin (set! k9086@the-env k9096@env) k9096@env)) (k2930@make-interaction-env k9089@rib '() '())))) (k1785@k1433@find-library-by-name '(mosh interaction)) (k2185@make-empty-rib))))) '#f)) (set! k3010@top-level-context (k1164@k942@make-parameter '#f)) (begin (set! k9366@k3010@top-level-context k3010@top-level-context) (set! k9365@k3008@interaction-environment k3008@interaction-environment) (set! k9364@k3006@pre-compile-r6rs-top-level k3006@pre-compile-r6rs-top-level) (set! k9363@k3004@compile-r6rs-top-level k3004@compile-r6rs-top-level) (set! k9362@k3002@syntax->datum k3002@syntax->datum) (set! k9361@k3000@datum->syntax k3000@datum->syntax) (set! k9360@k2998@identifier? k2998@identifier?) (set! k9359@k2996@syntax-violation k2996@syntax-violation) (set! k9358@k2994@syntax-violation* k2994@syntax-violation*) (set! k9357@k2992@syntax-error k2992@syntax-error) (set! k9356@k2990@assertion-error k2990@assertion-error) (set! k9355@k2988@expression-position k2988@expression-position) (set! k9354@k2986@extract-position-condition k2986@extract-position-condition) (set! k9353@k2984@make-source-condition k2984@make-source-condition) (set! k9352@k2982@bound-identifier=? k2982@bound-identifier=?) (set! k9351@k2980@free-identifier=? k2980@free-identifier=?) (set! k9350@k2978@generate-temporaries k2978@generate-temporaries) (set! k9349@k2976@make-export-env/macros k2976@make-export-env/macros) (set! k9348@k2974@make-export-subst k2974@make-export-subst) (set! k9347@k2972@build-exports k2972@build-exports) (set! k9346@k2970@rev-map-append k2970@rev-map-append) (set! k9345@k2968@boot-library-expand k2968@boot-library-expand) (set! k9344@k2966@library-expander k2966@library-expander) (set! k9343@k2964@eval k2964@eval) (set! k9342@k2962@expand k2962@expand) (set! k9341@k2960@scheme-report-environment k2960@scheme-report-environment) (set! k9340@k2958@null-environment k2958@null-environment) (set! k9339@k2956@environment k2956@environment) (set! k9338@k2954@environment-symbols k2954@environment-symbols) (set! k9337@k2952@environment? k2952@environment?) (set! k9336@k2950@parse-binding k2950@parse-binding) (set! k9335@k2948@environment-bindings k2948@environment-bindings) (set! k9334@k2946@interaction-environment-symbols k2946@interaction-environment-symbols) (set! k9333@k2944@rp k2944@rp) (set! k9332@k2942@set-interaction-env-locs! k2942@set-interaction-env-locs!) (set! k9331@k2940@set-interaction-env-r! k2940@set-interaction-env-r!) (set! k9330@k2938@set-interaction-env-rib! k2938@set-interaction-env-rib!) (set! k9329@k2936@interaction-env-locs k2936@interaction-env-locs) (set! k9328@k2934@interaction-env-r k2934@interaction-env-r) (set! k9327@k2932@interaction-env-rib k2932@interaction-env-rib) (set! k9326@k2930@make-interaction-env k2930@make-interaction-env) (set! k9325@k2928@interaction-env? k2928@interaction-env?) (set! k9324@k2925@k2917 k2925@k2917) (set! k9323@k2923@k2918 k2923@k2918) (set! k9322@k2921@k2916 k2921@k2916) (set! k9321@k2915@rp k2915@rp) (set! k9320@k2913@set-env-itc! k2913@set-env-itc!) (set! k9319@k2911@set-env-labels! k2911@set-env-labels!) (set! k9318@k2909@set-env-names! k2909@set-env-names!) (set! k9317@k2907@env-itc k2907@env-itc) (set! k9316@k2905@env-labels k2905@env-labels) (set! k9315@k2903@env-names k2903@env-names) (set! k9314@k2901@make-env k2901@make-env) (set! k9313@k2899@env? k2899@env?) (set! k9312@k2896@k2888 k2896@k2888) (set! k9311@k2894@k2889 k2894@k2889) (set! k9310@k2892@k2887 k2892@k2887) (set! k9309@k2886@top-level-expander k2886@top-level-expander) (set! k9308@k2884@parse-top-level-program k2884@parse-top-level-program) (set! k9307@k2882@core-library-expander k2882@core-library-expander) (set! k9306@k2880@library-body-expander k2880@library-body-expander) (set! k9305@k2878@chi-interaction-expr k2878@chi-interaction-expr) (set! k9304@k2876@chi-library-internal k2876@chi-library-internal) (set! k9303@k2874@imp-collector k2874@imp-collector) (set! k9302@k2872@vis-collector k2872@vis-collector) (set! k9301@k2870@inv-collector k2870@inv-collector) (set! k9300@k2868@make-collector k2868@make-collector) (set! k9299@k2866@make-top-rib k2866@make-top-rib) (set! k9298@k2864@parse-import-spec* k2864@parse-import-spec*) (set! k9297@k2862@parse-library k2862@parse-library) (set! k9296@k2860@parse-library-name k2860@parse-library-name) (set! k9295@k2858@parse-exports k2858@parse-exports) (set! k9294@k2856@expand-transformer k2856@expand-transformer) (set! k9293@k2854@chi-body* k2854@chi-body*) (set! k9292@k2852@chi-internal-module k2852@chi-internal-module) (set! k9291@k2850@module-interface-exp-id* k2850@module-interface-exp-id*) (set! k9290@k2848@set-module-interface-exp-lab-vec! k2848@set-module-interface-exp-lab-vec!) (set! k9289@k2846@set-module-interface-exp-id-vec! k2846@set-module-interface-exp-id-vec!) (set! k9288@k2844@set-module-interface-first-mark! k2844@set-module-interface-first-mark!) (set! k9287@k2842@module-interface-exp-lab-vec k2842@module-interface-exp-lab-vec) (set! k9286@k2840@module-interface-exp-id-vec k2840@module-interface-exp-id-vec) (set! k9285@k2838@module-interface-first-mark k2838@module-interface-first-mark) (set! k9284@k2836@make-module-interface k2836@make-module-interface) (set! k9283@k2834@module-interface? k2834@module-interface?) (set! k9282@k2831@k2823 k2831@k2823) (set! k9281@k2829@k2824 k2829@k2824) (set! k9280@k2827@k2822 k2827@k2822) (set! k9279@k2821@parse-module k2821@parse-module) (set! k9278@k2819@chi-internal k2819@chi-internal) (set! k9277@k2817@find-dups k2817@find-dups) (set! k9276@k2815@find-bound=? k2815@find-bound=?) (set! k9275@k2813@chi-rhs* k2813@chi-rhs*) (set! k9274@k2811@expand-interaction-rhs*/init* k2811@expand-interaction-rhs*/init*) (set! k9273@k2809@chi-rhs k2809@chi-rhs) (set! k9272@k2807@chi-defun k2807@chi-defun) (set! k9271@k2805@chi-lambda-clause* k2805@chi-lambda-clause*) (set! k9270@k2803@chi-lambda-clause k2803@chi-lambda-clause) (set! k9269@k2801@verify-formals k2801@verify-formals) (set! k9268@k2799@chi-set! k2799@chi-set!) (set! k9267@k2797@chi-expr k2797@chi-expr) (set! k9266@k2795@chi-application k2795@chi-application) (set! k9265@k2793@chi-expr* k2793@chi-expr*) (set! k9264@k2791@chi-global-macro k2791@chi-global-macro) (set! k9263@k2789@chi-local-macro k2789@chi-local-macro) (set! k9262@k2787@chi-macro k2787@chi-macro) (set! k9261@k2785@do-macro-call k2785@do-macro-call) (set! k9260@k2783@local-macro-transformer k2783@local-macro-transformer) (set! k9259@k2781@macro-transformer k2781@macro-transformer) (set! k9258@k2779@symbol-macro k2779@symbol-macro) (set! k9257@k2777@core-macro-transformer k2777@core-macro-transformer) (set! k9256@k2775@syntax-transformer k2775@syntax-transformer) (set! k9255@k2773@ellipsis-map k2773@ellipsis-map) (set! k9254@k2771@syntax-case-transformer k2771@syntax-case-transformer) (set! k9253@k2769@verify-literals k2769@verify-literals) (set! k9252@k2767@underscore? k2767@underscore?) (set! k9251@k2765@ellipsis? k2765@ellipsis?) (set! k9250@k2763@syntax-dispatch k2763@syntax-dispatch) (set! k9249@k2761@convert-pattern k2761@convert-pattern) (set! k9248@k2759@foreign-call-transformer k2759@foreign-call-transformer) (set! k9247@k2757@parameterize-macro k2757@parameterize-macro) (set! k9246@k2755@incorrect-usage-macro k2755@incorrect-usage-macro) (set! k9245@k2753@define-condition-type-macro k2753@define-condition-type-macro) (set! k9244@k2751@define-record-type-macro k2751@define-record-type-macro) (set! k9243@k2749@define-struct-macro k2749@define-struct-macro) (set! k9242@k2747@quasisyntax-macro k2747@quasisyntax-macro) (set! k9241@k2745@quasiquote-macro k2745@quasiquote-macro) (set! k9240@k2743@syntax-rules-macro k2743@syntax-rules-macro) (set! k9239@k2741@include-into-macro k2741@include-into-macro) (set! k9238@k2739@include-macro k2739@include-macro) (set! k9237@k2737@do-include k2737@do-include) (set! k9236@k2735@cond-macro k2735@cond-macro) (set! k9235@k2733@and-macro k2733@and-macro) (set! k9234@k2731@or-macro k2731@or-macro) (set! k9233@k2729@let*-macro k2729@let*-macro) (set! k9232@k2727@do-macro k2727@do-macro) (set! k9231@k2725@identifier-syntax-macro k2725@identifier-syntax-macro) (set! k9230@k2723@endianness-macro k2723@endianness-macro) (set! k9229@k2721@assert-macro k2721@assert-macro) (set! k9228@k2719@delay-macro k2719@delay-macro) (set! k9227@k2717@time-macro k2717@time-macro) (set! k9226@k2715@define-enumeration-macro k2715@define-enumeration-macro) (set! k9225@k2713@guard-macro k2713@guard-macro) (set! k9224@k2711@trace-letrec-syntax-macro k2711@trace-letrec-syntax-macro) (set! k9223@k2709@trace-let-syntax-macro k2709@trace-let-syntax-macro) (set! k9222@k2707@trace-let/rec-syntax k2707@trace-let/rec-syntax) (set! k9221@k2705@trace-define-syntax-macro k2705@trace-define-syntax-macro) (set! k9220@k2703@trace-define-macro k2703@trace-define-macro) (set! k9219@k2701@trace-lambda-macro k2701@trace-lambda-macro) (set! k9218@k2699@let*-values-macro k2699@let*-values-macro) (set! k9217@k2697@let-values-macro k2697@let-values-macro) (set! k9216@k2695@let-macro k2695@let-macro) (set! k9215@k2693@invalid-fmls-error k2693@invalid-fmls-error) (set! k9214@k2691@with-syntax-macro k2691@with-syntax-macro) (set! k9213@k2689@bless k2689@bless) (set! k9212@k2687@lambda-transformer k2687@lambda-transformer) (set! k9211@k2685@case-lambda-transformer k2685@case-lambda-transformer) (set! k9210@k2683@quote-transformer k2683@quote-transformer) (set! k9209@k2681@case-macro k2681@case-macro) (set! k9208@k2679@or-transformer k2679@or-transformer) (set! k9207@k2677@and-transformer k2677@and-transformer) (set! k9206@k2675@if-transformer k2675@if-transformer) (set! k9205@k2673@unless-macro k2673@unless-macro) (set! k9204@k2671@when-macro k2671@when-macro) (set! k9203@k2669@record-constructor-descriptor-transformer k2669@record-constructor-descriptor-transformer) (set! k9202@k2667@record-type-descriptor-transformer k2667@record-type-descriptor-transformer) (set! k9201@k2665@type-descriptor-transformer k2665@type-descriptor-transformer) (set! k9200@k2663@fluid-let-syntax-transformer k2663@fluid-let-syntax-transformer) (set! k9199@k2661@letrec*-transformer k2661@letrec*-transformer) (set! k9198@k2659@letrec-transformer k2659@letrec-transformer) (set! k9197@k2657@letrec-helper k2657@letrec-helper) (set! k9196@k2655@add-lexicals k2655@add-lexicals) (set! k9195@k2653@add-lexical k2653@add-lexical) (set! k9194@k2651@set-lexical-mutable! k2651@set-lexical-mutable!) (set! k9193@k2649@lexical-mutable? k2649@lexical-mutable?) (set! k9192@k2647@lexical-var k2647@lexical-var) (set! k9191@k2645@scheme-stx k2645@scheme-stx) (set! k9190@k2643@scheme-stx-hashtable k2643@scheme-stx-hashtable) (set! k9189@k2641@parse-define-syntax k2641@parse-define-syntax) (set! k9188@k2639@parse-define k2639@parse-define) (set! k9187@k2328@make-eval-transformer k2328@make-eval-transformer) (set! k9186@k2326@variable-transformer-procedure k2326@variable-transformer-procedure) (set! k9185@k2324@variable-transformer? k2324@variable-transformer?) (set! k9184@k2322@make-variable-transformer k2322@make-variable-transformer) (set! k9183@k2320@sanitize-binding k2320@sanitize-binding) (set! k9182@k2306@syntax-type k2306@syntax-type) (set! k9181@k2304@raise-unbound-error k2304@raise-unbound-error) (set! k9180@k2302@binding-value k2302@binding-value) (set! k9179@k2300@binding-type k2300@binding-type) (set! k9178@k2298@make-binding k2298@make-binding) (set! k9177@k2296@label->binding k2296@label->binding) (set! k9176@k2294@id->real-label k2294@id->real-label) (set! k9175@k2292@id->label k2292@id->label) (set! k9174@k2290@same-marks*? k2290@same-marks*?) (set! k9173@k2288@stx->datum k2288@stx->datum) (set! k9172@k2286@strip k2286@strip) (set! k9171@k2284@strip-annotations k2284@strip-annotations) (set! k9170@k2282@self-evaluating? k2282@self-evaluating?) (set! k9169@k2280@bound-id-member? k2280@bound-id-member?) (set! k9168@k2278@distinct-bound-ids? k2278@distinct-bound-ids?) (set! k9167@k2276@valid-bound-ids? k2276@valid-bound-ids?) (set! k9166@k2274@free-id=? k2274@free-id=?) (set! k9165@k2272@bound-id=? k2272@bound-id=?) (set! k9164@k2270@same-marks? k2270@same-marks?) (set! k9163@k2268@id->sym k2268@id->sym) (set! k9162@k2266@id? k2266@id?) (set! k9161@k2264@syntax->list k2264@syntax->list) (set! k9160@k2262@syntax-cdr k2262@syntax-cdr) (set! k9159@k2260@syntax-car k2260@syntax-car) (set! k9158@k2258@syntax-list? k2258@syntax-list?) (set! k9157@k2256@syntax-null? k2256@syntax-null?) (set! k9156@k2254@syntax-vector? k2254@syntax-vector?) (set! k9155@k2252@syntax-pair? k2252@syntax-pair?) (set! k9154@k2250@syntax-vector->list k2250@syntax-vector->list) (set! k9153@k2248@syntax-kind? k2248@syntax-kind?) (set! k9152@k2246@add-subst k2246@add-subst) (set! k9151@k2244@add-mark k2244@add-mark) (set! k9150@k2242@mkstx k2242@mkstx) (set! k9149@k2240@join-wraps k2240@join-wraps) (set! k9148@k2238@anti-mark? k2238@anti-mark?) (set! k9147@k2236@anti-mark k2236@anti-mark) (set! k9146@k2234@gen-mark k2234@gen-mark) (set! k9145@k2232@datum->stx k2232@datum->stx) (set! k9144@k2230@rp k2230@rp) (set! k9143@k2228@set-stx-ae*! k2228@set-stx-ae*!) (set! k9142@k2226@set-stx-subst*! k2226@set-stx-subst*!) (set! k9141@k2224@set-stx-mark*! k2224@set-stx-mark*!) (set! k9140@k2222@set-stx-expr! k2222@set-stx-expr!) (set! k9139@k2220@stx-ae* k2220@stx-ae*) (set! k9138@k2218@stx-subst* k2218@stx-subst*) (set! k9137@k2216@stx-mark* k2216@stx-mark*) (set! k9136@k2214@stx-expr k2214@stx-expr) (set! k9135@k2212@make-stx k2212@make-stx) (set! k9134@k2210@stx? k2210@stx?) (set! k9133@k2207@k2199 k2207@k2199) (set! k9132@k2205@k2200 k2205@k2200) (set! k9131@k2203@k2198 k2203@k2198) (set! k9130@k2197@make-full-rib k2197@make-full-rib) (set! k9129@k2195@unseal-rib! k2195@unseal-rib!) (set! k9128@k2193@seal-rib! k2193@seal-rib!) (set! k9127@k2191@make-rib-map k2191@make-rib-map) (set! k9126@k2189@extend-rib/nc! k2189@extend-rib/nc!) (set! k9125@k2187@extend-rib! k2187@extend-rib!) (set! k9124@k2185@make-empty-rib k2185@make-empty-rib) (set! k9123@k2183@set-rib-cache! k2183@set-rib-cache!) (set! k9122@k2181@set-rib-sealed/freq! k2181@set-rib-sealed/freq!) (set! k9121@k2179@set-rib-label*! k2179@set-rib-label*!) (set! k9120@k2177@set-rib-mark**! k2177@set-rib-mark**!) (set! k9119@k2175@set-rib-sym*! k2175@set-rib-sym*!) (set! k9118@k2173@rib-cache k2173@rib-cache) (set! k9117@k2171@rib-sealed/freq k2171@rib-sealed/freq) (set! k9116@k2169@rib-label* k2169@rib-label*) (set! k9115@k2167@rib-mark** k2167@rib-mark**) (set! k9114@k2165@rib-sym* k2165@rib-sym*) (set! k9113@k2163@make-rib k2163@make-rib) (set! k9112@k2161@rib? k2161@rib?) (set! k9111@k2158@k2150 k2158@k2150) (set! k9110@k2156@k2151 k2156@k2151) (set! k9109@k2154@k2149 k2154@k2149) (set! k9108@k2148@gen-define-label k2148@gen-define-label) (set! k9107@k2146@gen-define-label+loc k2146@gen-define-label+loc) (set! k9106@k2144@gen-top-level-label k2144@gen-top-level-label) (set! k9105@k2142@gen-label k2142@gen-label) (set! k9104@k2140@gen-global k2140@gen-global) (set! k9103@k2138@gen-lexical k2138@gen-lexical) (set! k9102@k2136@top-marked? k2136@top-marked?) (set! k9101@k2134@top-mark* k2134@top-mark*) (set! k9100@k2129@set-union k2129@set-union) (set! k9099@k2127@set-cons k2127@set-cons) (set! k9098@k2125@file-options-macro k2125@file-options-macro) (k1782@k1427@current-library-expander k2966@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (k9376@k9371 k9378@k9373 k9380@k9372 k9383@&condition? k9385@make-&condition k9387@&condition-rtd k9389@&condition-rcd k9461@k9456 k9463@k9458 k9465@k9457 k9468@p? k9470@make-message-condition k9472@k9455@condition-message k9474@message-condition? k9476@condition-message k9478@&message-rtd k9480@&message-rcd k9486@k9481 k9488@k9483 k9490@k9482 k9493@p? k9495@make-warning k9497@warning? k9499@&warning-rtd k9501@&warning-rcd k9507@k9502 k9509@k9504 k9511@k9503 k9514@p? k9516@make-serious-condition k9518@serious-condition? k9520@&serious-rtd k9522@&serious-rcd k9528@k9523 k9530@k9525 k9532@k9524 k9535@p? k9537@make-error k9539@error? k9541@&error-rtd k9543@&error-rcd k9549@k9544 k9551@k9546 k9553@k9545 k9556@p? k9558@make-violation k9560@violation? k9562@&violation-rtd k9564@&violation-rcd k9570@k9565 k9572@k9567 k9574@k9566 k9577@p? k9579@make-assertion-violation k9581@assertion-violation? k9583@&assertion-rtd k9585@&assertion-rcd k9592@k9587 k9594@k9589 k9596@k9588 k9599@p? k9601@make-irritants-condition k9603@k9586@condition-irritants k9605@irritants-condition? k9607@condition-irritants k9609@&irritants-rtd k9611@&irritants-rcd k9618@k9613 k9620@k9615 k9622@k9614 k9625@p? k9627@make-who-condition k9629@k9612@condition-who k9631@who-condition? k9633@condition-who k9635@&who-rtd k9637@&who-rcd k9643@k9638 k9645@k9640 k9647@k9639 k9650@p? k9652@make-non-continuable-violation k9654@non-continuable-violation? k9656@&non-continuable-rtd k9658@&non-continuable-rcd k9664@k9659 k9666@k9661 k9668@k9660 k9671@p? k9673@make-implementation-restriction-violation k9675@implementation-restriction-violation? k9677@&implementation-restriction-rtd k9679@&implementation-restriction-rcd k9685@k9680 k9687@k9682 k9689@k9681 k9692@p? k9694@make-lexical-violation k9696@lexical-violation? k9698@&lexical-rtd k9700@&lexical-rcd k9708@k9703 k9710@k9705 k9712@k9704 k9715@p? k9717@make-syntax-violation k9719@k9701@syntax-violation-form k9721@k9702@syntax-violation-subform k9723@syntax-violation? k9725@syntax-violation-form k9727@syntax-violation-subform k9729@&syntax-rtd k9731@&syntax-rcd k9737@k9732 k9739@k9734 k9741@k9733 k9744@p? k9746@make-undefined-violation k9748@undefined-violation? k9750@&undefined-rtd k9752@&undefined-rcd k9758@k9753 k9760@k9755 k9762@k9754 k9765@p? k9767@make-i/o-error k9769@i/o-error? k9771@&i/o-rtd k9773@&i/o-rcd k9779@k9774 k9781@k9776 k9783@k9775 k9786@p? k9788@make-i/o-read-error k9790@i/o-read-error? k9792@&i/o-read-rtd k9794@&i/o-read-rcd k9800@k9795 k9802@k9797 k9804@k9796 k9807@p? k9809@make-i/o-write-error k9811@i/o-write-error? k9813@&i/o-write-rtd k9815@&i/o-write-rcd k9822@k9817 k9824@k9819 k9826@k9818 k9829@p? k9831@make-i/o-invalid-position-error k9833@k9816@i/o-error-position k9835@i/o-invalid-position-error? k9837@i/o-error-position k9839@&i/o-invalid-position-rtd k9841@&i/o-invalid-position-rcd k9848@k9843 k9850@k9845 k9852@k9844 k9855@p? k9857@make-i/o-filename-error k9859@k9842@i/o-error-filename k9861@i/o-filename-error? k9863@i/o-error-filename k9865@&i/o-filename-rtd k9867@&i/o-filename-rcd k9873@k9868 k9875@k9870 k9877@k9869 k9880@p? k9882@make-i/o-file-protection-error k9884@i/o-file-protection-error? k9886@&i/o-file-protection-rtd k9888@&i/o-file-protection-rcd k9894@k9889 k9896@k9891 k9898@k9890 k9901@p? k9903@make-i/o-file-is-read-only-error k9905@i/o-file-is-read-only-error? k9907@&i/o-file-is-read-only-rtd k9909@&i/o-file-is-read-only-rcd k9915@k9910 k9917@k9912 k9919@k9911 k9922@p? k9924@make-i/o-file-already-exists-error k9926@i/o-file-already-exists-error? k9928@&i/o-file-already-exists-rtd k9930@&i/o-file-already-exists-rcd k9936@k9931 k9938@k9933 k9940@k9932 k9943@p? k9945@make-i/o-file-does-not-exist-error k9947@i/o-file-does-not-exist-error? k9949@&i/o-file-does-not-exist-rtd k9951@&i/o-file-does-not-exist-rcd k9958@k9953 k9960@k9955 k9962@k9954 k9965@p? k9967@make-i/o-port-error k9969@k9952@i/o-error-port k9971@i/o-port-error? k9973@i/o-error-port k9975@&i/o-port-rtd k9977@&i/o-port-rcd k9983@k9978 k9985@k9980 k9987@k9979 k9990@p? k9992@make-i/o-decoding-error k9994@i/o-decoding-error? k9996@&i/o-decoding-rtd k9998@&i/o-decoding-rcd k10005@k10000 k10007@k10002 k10009@k10001 k10012@p? k10014@make-i/o-encoding-error k10016@k9999@i/o-encoding-error-char k10018@i/o-encoding-error? k10020@i/o-encoding-error-char k10022@&i/o-encoding-rtd k10024@&i/o-encoding-rcd k10030@k10025 k10032@k10027 k10034@k10026 k10037@p? k10039@make-no-infinities-violation k10041@no-infinities-violation? k10043@&no-infinities-rtd k10045@&no-infinities-rcd k10051@k10046 k10053@k10048 k10055@k10047 k10058@p? k10060@make-no-nans-violation k10062@no-nans-violation? k10064@&no-nans-rtd k10066@&no-nans-rcd) (begin (set! k9376@k9371 (make-record-type-descriptor '&condition '#f 'k9374 '#f '#f '#())) (set! k9378@k9373 '#f) (set! k9380@k9372 (make-record-constructor-descriptor k9376@k9371 '#f k9378@k9373)) (set! k9383@&condition? (record-predicate k9376@k9371)) (set! k9385@make-&condition (record-constructor k9380@k9372)) (set! k9387@&condition-rtd k9376@k9371) (set! k9389@&condition-rcd k9380@k9372) (set! k9461@k9456 (make-record-type-descriptor '&message k9376@k9371 'k9459 '#f '#f '#((immutable message)))) (set! k9463@k9458 '#f) (set! k9465@k9457 (make-record-constructor-descriptor k9461@k9456 k9380@k9372 k9463@k9458)) (set! k9468@p? (record-predicate k9461@k9456)) (set! k9470@make-message-condition (record-constructor k9465@k9457)) (set! k9472@k9455@condition-message (record-accessor k9461@k9456 '0)) (set! k9474@message-condition? (condition-predicate k9461@k9456)) (set! k9476@condition-message (condition-accessor k9461@k9456 k9472@k9455@condition-message)) (set! k9478@&message-rtd k9461@k9456) (set! k9480@&message-rcd k9465@k9457) (set! k9486@k9481 (make-record-type-descriptor '&warning k9376@k9371 'k9484 '#f '#f '#())) (set! k9488@k9483 '#f) (set! k9490@k9482 (make-record-constructor-descriptor k9486@k9481 k9380@k9372 k9488@k9483)) (set! k9493@p? (record-predicate k9486@k9481)) (set! k9495@make-warning (record-constructor k9490@k9482)) (set! k9497@warning? (condition-predicate k9486@k9481)) (set! k9499@&warning-rtd k9486@k9481) (set! k9501@&warning-rcd k9490@k9482) (set! k9507@k9502 (make-record-type-descriptor '&serious k9376@k9371 'k9505 '#f '#f '#())) (set! k9509@k9504 '#f) (set! k9511@k9503 (make-record-constructor-descriptor k9507@k9502 k9380@k9372 k9509@k9504)) (set! k9514@p? (record-predicate k9507@k9502)) (set! k9516@make-serious-condition (record-constructor k9511@k9503)) (set! k9518@serious-condition? (condition-predicate k9507@k9502)) (set! k9520@&serious-rtd k9507@k9502) (set! k9522@&serious-rcd k9511@k9503) (set! k9528@k9523 (make-record-type-descriptor '&error k9507@k9502 'k9526 '#f '#f '#())) (set! k9530@k9525 '#f) (set! k9532@k9524 (make-record-constructor-descriptor k9528@k9523 k9511@k9503 k9530@k9525)) (set! k9535@p? (record-predicate k9528@k9523)) (set! k9537@make-error (record-constructor k9532@k9524)) (set! k9539@error? (condition-predicate k9528@k9523)) (set! k9541@&error-rtd k9528@k9523) (set! k9543@&error-rcd k9532@k9524) (set! k9549@k9544 (make-record-type-descriptor '&violation k9507@k9502 'k9547 '#f '#f '#())) (set! k9551@k9546 '#f) (set! k9553@k9545 (make-record-constructor-descriptor k9549@k9544 k9511@k9503 k9551@k9546)) (set! k9556@p? (record-predicate k9549@k9544)) (set! k9558@make-violation (record-constructor k9553@k9545)) (set! k9560@violation? (condition-predicate k9549@k9544)) (set! k9562@&violation-rtd k9549@k9544) (set! k9564@&violation-rcd k9553@k9545) (set! k9570@k9565 (make-record-type-descriptor '&assertion k9549@k9544 'k9568 '#f '#f '#())) (set! k9572@k9567 '#f) (set! k9574@k9566 (make-record-constructor-descriptor k9570@k9565 k9553@k9545 k9572@k9567)) (set! k9577@p? (record-predicate k9570@k9565)) (set! k9579@make-assertion-violation (record-constructor k9574@k9566)) (set! k9581@assertion-violation? (condition-predicate k9570@k9565)) (set! k9583@&assertion-rtd k9570@k9565) (set! k9585@&assertion-rcd k9574@k9566) (set! k9592@k9587 (make-record-type-descriptor '&irritants k9376@k9371 'k9590 '#f '#f '#((immutable irritants)))) (set! k9594@k9589 '#f) (set! k9596@k9588 (make-record-constructor-descriptor k9592@k9587 k9380@k9372 k9594@k9589)) (set! k9599@p? (record-predicate k9592@k9587)) (set! k9601@make-irritants-condition (record-constructor k9596@k9588)) (set! k9603@k9586@condition-irritants (record-accessor k9592@k9587 '0)) (set! k9605@irritants-condition? (condition-predicate k9592@k9587)) (set! k9607@condition-irritants (condition-accessor k9592@k9587 k9603@k9586@condition-irritants)) (set! k9609@&irritants-rtd k9592@k9587) (set! k9611@&irritants-rcd k9596@k9588) (set! k9618@k9613 (make-record-type-descriptor '&who k9376@k9371 'k9616 '#f '#f '#((immutable who)))) (set! k9620@k9615 '#f) (set! k9622@k9614 (make-record-constructor-descriptor k9618@k9613 k9380@k9372 k9620@k9615)) (set! k9625@p? (record-predicate k9618@k9613)) (set! k9627@make-who-condition (record-constructor k9622@k9614)) (set! k9629@k9612@condition-who (record-accessor k9618@k9613 '0)) (set! k9631@who-condition? (condition-predicate k9618@k9613)) (set! k9633@condition-who (condition-accessor k9618@k9613 k9629@k9612@condition-who)) (set! k9635@&who-rtd k9618@k9613) (set! k9637@&who-rcd k9622@k9614) (set! k9643@k9638 (make-record-type-descriptor '&non-continuable k9549@k9544 'k9641 '#f '#f '#())) (set! k9645@k9640 '#f) (set! k9647@k9639 (make-record-constructor-descriptor k9643@k9638 k9553@k9545 k9645@k9640)) (set! k9650@p? (record-predicate k9643@k9638)) (set! k9652@make-non-continuable-violation (record-constructor k9647@k9639)) (set! k9654@non-continuable-violation? (condition-predicate k9643@k9638)) (set! k9656@&non-continuable-rtd k9643@k9638) (set! k9658@&non-continuable-rcd k9647@k9639) (set! k9664@k9659 (make-record-type-descriptor '&implementation-restriction k9549@k9544 'k9662 '#f '#f '#())) (set! k9666@k9661 '#f) (set! k9668@k9660 (make-record-constructor-descriptor k9664@k9659 k9553@k9545 k9666@k9661)) (set! k9671@p? (record-predicate k9664@k9659)) (set! k9673@make-implementation-restriction-violation (record-constructor k9668@k9660)) (set! k9675@implementation-restriction-violation? (condition-predicate k9664@k9659)) (set! k9677@&implementation-restriction-rtd k9664@k9659) (set! k9679@&implementation-restriction-rcd k9668@k9660) (set! k9685@k9680 (make-record-type-descriptor '&lexical k9549@k9544 'k9683 '#f '#f '#())) (set! k9687@k9682 '#f) (set! k9689@k9681 (make-record-constructor-descriptor k9685@k9680 k9553@k9545 k9687@k9682)) (set! k9692@p? (record-predicate k9685@k9680)) (set! k9694@make-lexical-violation (record-constructor k9689@k9681)) (set! k9696@lexical-violation? (condition-predicate k9685@k9680)) (set! k9698@&lexical-rtd k9685@k9680) (set! k9700@&lexical-rcd k9689@k9681) (set! k9708@k9703 (make-record-type-descriptor '&syntax k9549@k9544 'k9706 '#f '#f '#((immutable form) (immutable subform)))) (set! k9710@k9705 '#f) (set! k9712@k9704 (make-record-constructor-descriptor k9708@k9703 k9553@k9545 k9710@k9705)) (set! k9715@p? (record-predicate k9708@k9703)) (set! k9717@make-syntax-violation (record-constructor k9712@k9704)) (set! k9719@k9701@syntax-violation-form (record-accessor k9708@k9703 '0)) (set! k9721@k9702@syntax-violation-subform (record-accessor k9708@k9703 '1)) (set! k9723@syntax-violation? (condition-predicate k9708@k9703)) (set! k9725@syntax-violation-form (condition-accessor k9708@k9703 k9719@k9701@syntax-violation-form)) (set! k9727@syntax-violation-subform (condition-accessor k9708@k9703 k9721@k9702@syntax-violation-subform)) (set! k9729@&syntax-rtd k9708@k9703) (set! k9731@&syntax-rcd k9712@k9704) (set! k9737@k9732 (make-record-type-descriptor '&undefined k9549@k9544 'k9735 '#f '#f '#())) (set! k9739@k9734 '#f) (set! k9741@k9733 (make-record-constructor-descriptor k9737@k9732 k9553@k9545 k9739@k9734)) (set! k9744@p? (record-predicate k9737@k9732)) (set! k9746@make-undefined-violation (record-constructor k9741@k9733)) (set! k9748@undefined-violation? (condition-predicate k9737@k9732)) (set! k9750@&undefined-rtd k9737@k9732) (set! k9752@&undefined-rcd k9741@k9733) (set! k9758@k9753 (make-record-type-descriptor '&i/o k9528@k9523 'k9756 '#f '#f '#())) (set! k9760@k9755 '#f) (set! k9762@k9754 (make-record-constructor-descriptor k9758@k9753 k9532@k9524 k9760@k9755)) (set! k9765@p? (record-predicate k9758@k9753)) (set! k9767@make-i/o-error (record-constructor k9762@k9754)) (set! k9769@i/o-error? (condition-predicate k9758@k9753)) (set! k9771@&i/o-rtd k9758@k9753) (set! k9773@&i/o-rcd k9762@k9754) (set! k9779@k9774 (make-record-type-descriptor '&i/o-read k9758@k9753 'k9777 '#f '#f '#())) (set! k9781@k9776 '#f) (set! k9783@k9775 (make-record-constructor-descriptor k9779@k9774 k9762@k9754 k9781@k9776)) (set! k9786@p? (record-predicate k9779@k9774)) (set! k9788@make-i/o-read-error (record-constructor k9783@k9775)) (set! k9790@i/o-read-error? (condition-predicate k9779@k9774)) (set! k9792@&i/o-read-rtd k9779@k9774) (set! k9794@&i/o-read-rcd k9783@k9775) (set! k9800@k9795 (make-record-type-descriptor '&i/o-write k9758@k9753 'k9798 '#f '#f '#())) (set! k9802@k9797 '#f) (set! k9804@k9796 (make-record-constructor-descriptor k9800@k9795 k9762@k9754 k9802@k9797)) (set! k9807@p? (record-predicate k9800@k9795)) (set! k9809@make-i/o-write-error (record-constructor k9804@k9796)) (set! k9811@i/o-write-error? (condition-predicate k9800@k9795)) (set! k9813@&i/o-write-rtd k9800@k9795) (set! k9815@&i/o-write-rcd k9804@k9796) (set! k9822@k9817 (make-record-type-descriptor '&i/o-invalid-position k9758@k9753 'k9820 '#f '#f '#((immutable position)))) (set! k9824@k9819 '#f) (set! k9826@k9818 (make-record-constructor-descriptor k9822@k9817 k9762@k9754 k9824@k9819)) (set! k9829@p? (record-predicate k9822@k9817)) (set! k9831@make-i/o-invalid-position-error (record-constructor k9826@k9818)) (set! k9833@k9816@i/o-error-position (record-accessor k9822@k9817 '0)) (set! k9835@i/o-invalid-position-error? (condition-predicate k9822@k9817)) (set! k9837@i/o-error-position (condition-accessor k9822@k9817 k9833@k9816@i/o-error-position)) (set! k9839@&i/o-invalid-position-rtd k9822@k9817) (set! k9841@&i/o-invalid-position-rcd k9826@k9818) (set! k9848@k9843 (make-record-type-descriptor '&i/o-filename k9758@k9753 'k9846 '#f '#f '#((immutable filename)))) (set! k9850@k9845 '#f) (set! k9852@k9844 (make-record-constructor-descriptor k9848@k9843 k9762@k9754 k9850@k9845)) (set! k9855@p? (record-predicate k9848@k9843)) (set! k9857@make-i/o-filename-error (record-constructor k9852@k9844)) (set! k9859@k9842@i/o-error-filename (record-accessor k9848@k9843 '0)) (set! k9861@i/o-filename-error? (condition-predicate k9848@k9843)) (set! k9863@i/o-error-filename (condition-accessor k9848@k9843 k9859@k9842@i/o-error-filename)) (set! k9865@&i/o-filename-rtd k9848@k9843) (set! k9867@&i/o-filename-rcd k9852@k9844) (set! k9873@k9868 (make-record-type-descriptor '&i/o-file-protection k9848@k9843 'k9871 '#f '#f '#())) (set! k9875@k9870 '#f) (set! k9877@k9869 (make-record-constructor-descriptor k9873@k9868 k9852@k9844 k9875@k9870)) (set! k9880@p? (record-predicate k9873@k9868)) (set! k9882@make-i/o-file-protection-error (record-constructor k9877@k9869)) (set! k9884@i/o-file-protection-error? (condition-predicate k9873@k9868)) (set! k9886@&i/o-file-protection-rtd k9873@k9868) (set! k9888@&i/o-file-protection-rcd k9877@k9869) (set! k9894@k9889 (make-record-type-descriptor '&i/o-file-is-read-only k9873@k9868 'k9892 '#f '#f '#())) (set! k9896@k9891 '#f) (set! k9898@k9890 (make-record-constructor-descriptor k9894@k9889 k9877@k9869 k9896@k9891)) (set! k9901@p? (record-predicate k9894@k9889)) (set! k9903@make-i/o-file-is-read-only-error (record-constructor k9898@k9890)) (set! k9905@i/o-file-is-read-only-error? (condition-predicate k9894@k9889)) (set! k9907@&i/o-file-is-read-only-rtd k9894@k9889) (set! k9909@&i/o-file-is-read-only-rcd k9898@k9890) (set! k9915@k9910 (make-record-type-descriptor '&i/o-file-already-exists k9848@k9843 'k9913 '#f '#f '#())) (set! k9917@k9912 '#f) (set! k9919@k9911 (make-record-constructor-descriptor k9915@k9910 k9852@k9844 k9917@k9912)) (set! k9922@p? (record-predicate k9915@k9910)) (set! k9924@make-i/o-file-already-exists-error (record-constructor k9919@k9911)) (set! k9926@i/o-file-already-exists-error? (condition-predicate k9915@k9910)) (set! k9928@&i/o-file-already-exists-rtd k9915@k9910) (set! k9930@&i/o-file-already-exists-rcd k9919@k9911) (set! k9936@k9931 (make-record-type-descriptor '&i/o-file-does-not-exist k9848@k9843 'k9934 '#f '#f '#())) (set! k9938@k9933 '#f) (set! k9940@k9932 (make-record-constructor-descriptor k9936@k9931 k9852@k9844 k9938@k9933)) (set! k9943@p? (record-predicate k9936@k9931)) (set! k9945@make-i/o-file-does-not-exist-error (record-constructor k9940@k9932)) (set! k9947@i/o-file-does-not-exist-error? (condition-predicate k9936@k9931)) (set! k9949@&i/o-file-does-not-exist-rtd k9936@k9931) (set! k9951@&i/o-file-does-not-exist-rcd k9940@k9932) (set! k9958@k9953 (make-record-type-descriptor '&i/o-port k9758@k9753 'k9956 '#f '#f '#((immutable port)))) (set! k9960@k9955 '#f) (set! k9962@k9954 (make-record-constructor-descriptor k9958@k9953 k9762@k9754 k9960@k9955)) (set! k9965@p? (record-predicate k9958@k9953)) (set! k9967@make-i/o-port-error (record-constructor k9962@k9954)) (set! k9969@k9952@i/o-error-port (record-accessor k9958@k9953 '0)) (set! k9971@i/o-port-error? (condition-predicate k9958@k9953)) (set! k9973@i/o-error-port (condition-accessor k9958@k9953 k9969@k9952@i/o-error-port)) (set! k9975@&i/o-port-rtd k9958@k9953) (set! k9977@&i/o-port-rcd k9962@k9954) (set! k9983@k9978 (make-record-type-descriptor '&i/o-decoding k9958@k9953 'k9981 '#f '#f '#())) (set! k9985@k9980 '#f) (set! k9987@k9979 (make-record-constructor-descriptor k9983@k9978 k9962@k9954 k9985@k9980)) (set! k9990@p? (record-predicate k9983@k9978)) (set! k9992@make-i/o-decoding-error (record-constructor k9987@k9979)) (set! k9994@i/o-decoding-error? (condition-predicate k9983@k9978)) (set! k9996@&i/o-decoding-rtd k9983@k9978) (set! k9998@&i/o-decoding-rcd k9987@k9979) (set! k10005@k10000 (make-record-type-descriptor '&i/o-encoding k9958@k9953 'k10003 '#f '#f '#((immutable char)))) (set! k10007@k10002 '#f) (set! k10009@k10001 (make-record-constructor-descriptor k10005@k10000 k9962@k9954 k10007@k10002)) (set! k10012@p? (record-predicate k10005@k10000)) (set! k10014@make-i/o-encoding-error (record-constructor k10009@k10001)) (set! k10016@k9999@i/o-encoding-error-char (record-accessor k10005@k10000 '0)) (set! k10018@i/o-encoding-error? (condition-predicate k10005@k10000)) (set! k10020@i/o-encoding-error-char (condition-accessor k10005@k10000 k10016@k9999@i/o-encoding-error-char)) (set! k10022@&i/o-encoding-rtd k10005@k10000) (set! k10024@&i/o-encoding-rcd k10009@k10001) (set! k10030@k10025 (make-record-type-descriptor '&no-infinities k9664@k9659 'k10028 '#f '#f '#())) (set! k10032@k10027 '#f) (set! k10034@k10026 (make-record-constructor-descriptor k10030@k10025 k9668@k9660 k10032@k10027)) (set! k10037@p? (record-predicate k10030@k10025)) (set! k10039@make-no-infinities-violation (record-constructor k10034@k10026)) (set! k10041@no-infinities-violation? (condition-predicate k10030@k10025)) (set! k10043@&no-infinities-rtd k10030@k10025) (set! k10045@&no-infinities-rcd k10034@k10026) (set! k10051@k10046 (make-record-type-descriptor '&no-nans k9664@k9659 'k10049 '#f '#f '#())) (set! k10053@k10048 '#f) (set! k10055@k10047 (make-record-constructor-descriptor k10051@k10046 k9668@k9660 k10053@k10048)) (set! k10058@p? (record-predicate k10051@k10046)) (set! k10060@make-no-nans-violation (record-constructor k10055@k10047)) (set! k10062@no-nans-violation? (condition-predicate k10051@k10046)) (set! k10064@&no-nans-rtd k10051@k10046) (set! k10066@&no-nans-rcd k10055@k10047) (begin (set! k10307@k10066@&no-nans-rcd k10066@&no-nans-rcd) (set! k10306@k10064@&no-nans-rtd k10064@&no-nans-rtd) (set! k10305@k10062@no-nans-violation? k10062@no-nans-violation?) (set! k10304@k10060@make-no-nans-violation k10060@make-no-nans-violation) (set! k10303@k10058@p? k10058@p?) (set! k10302@k10055@k10047 k10055@k10047) (set! k10301@k10053@k10048 k10053@k10048) (set! k10300@k10051@k10046 k10051@k10046) (set! k10299@k10045@&no-infinities-rcd k10045@&no-infinities-rcd) (set! k10298@k10043@&no-infinities-rtd k10043@&no-infinities-rtd) (set! k10297@k10041@no-infinities-violation? k10041@no-infinities-violation?) (set! k10296@k10039@make-no-infinities-violation k10039@make-no-infinities-violation) (set! k10295@k10037@p? k10037@p?) (set! k10294@k10034@k10026 k10034@k10026) (set! k10293@k10032@k10027 k10032@k10027) (set! k10292@k10030@k10025 k10030@k10025) (set! k10291@k10024@&i/o-encoding-rcd k10024@&i/o-encoding-rcd) (set! k10290@k10022@&i/o-encoding-rtd k10022@&i/o-encoding-rtd) (set! k10289@k10020@i/o-encoding-error-char k10020@i/o-encoding-error-char) (set! k10288@k10018@i/o-encoding-error? k10018@i/o-encoding-error?) (set! k10287@k10016@k9999@i/o-encoding-error-char k10016@k9999@i/o-encoding-error-char) (set! k10286@k10014@make-i/o-encoding-error k10014@make-i/o-encoding-error) (set! k10285@k10012@p? k10012@p?) (set! k10284@k10009@k10001 k10009@k10001) (set! k10283@k10007@k10002 k10007@k10002) (set! k10282@k10005@k10000 k10005@k10000) (set! k10281@k9998@&i/o-decoding-rcd k9998@&i/o-decoding-rcd) (set! k10280@k9996@&i/o-decoding-rtd k9996@&i/o-decoding-rtd) (set! k10279@k9994@i/o-decoding-error? k9994@i/o-decoding-error?) (set! k10278@k9992@make-i/o-decoding-error k9992@make-i/o-decoding-error) (set! k10277@k9990@p? k9990@p?) (set! k10276@k9987@k9979 k9987@k9979) (set! k10275@k9985@k9980 k9985@k9980) (set! k10274@k9983@k9978 k9983@k9978) (set! k10273@k9977@&i/o-port-rcd k9977@&i/o-port-rcd) (set! k10272@k9975@&i/o-port-rtd k9975@&i/o-port-rtd) (set! k10271@k9973@i/o-error-port k9973@i/o-error-port) (set! k10270@k9971@i/o-port-error? k9971@i/o-port-error?) (set! k10269@k9969@k9952@i/o-error-port k9969@k9952@i/o-error-port) (set! k10268@k9967@make-i/o-port-error k9967@make-i/o-port-error) (set! k10267@k9965@p? k9965@p?) (set! k10266@k9962@k9954 k9962@k9954) (set! k10265@k9960@k9955 k9960@k9955) (set! k10264@k9958@k9953 k9958@k9953) (set! k10263@k9951@&i/o-file-does-not-exist-rcd k9951@&i/o-file-does-not-exist-rcd) (set! k10262@k9949@&i/o-file-does-not-exist-rtd k9949@&i/o-file-does-not-exist-rtd) (set! k10261@k9947@i/o-file-does-not-exist-error? k9947@i/o-file-does-not-exist-error?) (set! k10260@k9945@make-i/o-file-does-not-exist-error k9945@make-i/o-file-does-not-exist-error) (set! k10259@k9943@p? k9943@p?) (set! k10258@k9940@k9932 k9940@k9932) (set! k10257@k9938@k9933 k9938@k9933) (set! k10256@k9936@k9931 k9936@k9931) (set! k10255@k9930@&i/o-file-already-exists-rcd k9930@&i/o-file-already-exists-rcd) (set! k10254@k9928@&i/o-file-already-exists-rtd k9928@&i/o-file-already-exists-rtd) (set! k10253@k9926@i/o-file-already-exists-error? k9926@i/o-file-already-exists-error?) (set! k10252@k9924@make-i/o-file-already-exists-error k9924@make-i/o-file-already-exists-error) (set! k10251@k9922@p? k9922@p?) (set! k10250@k9919@k9911 k9919@k9911) (set! k10249@k9917@k9912 k9917@k9912) (set! k10248@k9915@k9910 k9915@k9910) (set! k10247@k9909@&i/o-file-is-read-only-rcd k9909@&i/o-file-is-read-only-rcd) (set! k10246@k9907@&i/o-file-is-read-only-rtd k9907@&i/o-file-is-read-only-rtd) (set! k10245@k9905@i/o-file-is-read-only-error? k9905@i/o-file-is-read-only-error?) (set! k10244@k9903@make-i/o-file-is-read-only-error k9903@make-i/o-file-is-read-only-error) (set! k10243@k9901@p? k9901@p?) (set! k10242@k9898@k9890 k9898@k9890) (set! k10241@k9896@k9891 k9896@k9891) (set! k10240@k9894@k9889 k9894@k9889) (set! k10239@k9888@&i/o-file-protection-rcd k9888@&i/o-file-protection-rcd) (set! k10238@k9886@&i/o-file-protection-rtd k9886@&i/o-file-protection-rtd) (set! k10237@k9884@i/o-file-protection-error? k9884@i/o-file-protection-error?) (set! k10236@k9882@make-i/o-file-protection-error k9882@make-i/o-file-protection-error) (set! k10235@k9880@p? k9880@p?) (set! k10234@k9877@k9869 k9877@k9869) (set! k10233@k9875@k9870 k9875@k9870) (set! k10232@k9873@k9868 k9873@k9868) (set! k10231@k9867@&i/o-filename-rcd k9867@&i/o-filename-rcd) (set! k10230@k9865@&i/o-filename-rtd k9865@&i/o-filename-rtd) (set! k10229@k9863@i/o-error-filename k9863@i/o-error-filename) (set! k10228@k9861@i/o-filename-error? k9861@i/o-filename-error?) (set! k10227@k9859@k9842@i/o-error-filename k9859@k9842@i/o-error-filename) (set! k10226@k9857@make-i/o-filename-error k9857@make-i/o-filename-error) (set! k10225@k9855@p? k9855@p?) (set! k10224@k9852@k9844 k9852@k9844) (set! k10223@k9850@k9845 k9850@k9845) (set! k10222@k9848@k9843 k9848@k9843) (set! k10221@k9841@&i/o-invalid-position-rcd k9841@&i/o-invalid-position-rcd) (set! k10220@k9839@&i/o-invalid-position-rtd k9839@&i/o-invalid-position-rtd) (set! k10219@k9837@i/o-error-position k9837@i/o-error-position) (set! k10218@k9835@i/o-invalid-position-error? k9835@i/o-invalid-position-error?) (set! k10217@k9833@k9816@i/o-error-position k9833@k9816@i/o-error-position) (set! k10216@k9831@make-i/o-invalid-position-error k9831@make-i/o-invalid-position-error) (set! k10215@k9829@p? k9829@p?) (set! k10214@k9826@k9818 k9826@k9818) (set! k10213@k9824@k9819 k9824@k9819) (set! k10212@k9822@k9817 k9822@k9817) (set! k10211@k9815@&i/o-write-rcd k9815@&i/o-write-rcd) (set! k10210@k9813@&i/o-write-rtd k9813@&i/o-write-rtd) (set! k10209@k9811@i/o-write-error? k9811@i/o-write-error?) (set! k10208@k9809@make-i/o-write-error k9809@make-i/o-write-error) (set! k10207@k9807@p? k9807@p?) (set! k10206@k9804@k9796 k9804@k9796) (set! k10205@k9802@k9797 k9802@k9797) (set! k10204@k9800@k9795 k9800@k9795) (set! k10203@k9794@&i/o-read-rcd k9794@&i/o-read-rcd) (set! k10202@k9792@&i/o-read-rtd k9792@&i/o-read-rtd) (set! k10201@k9790@i/o-read-error? k9790@i/o-read-error?) (set! k10200@k9788@make-i/o-read-error k9788@make-i/o-read-error) (set! k10199@k9786@p? k9786@p?) (set! k10198@k9783@k9775 k9783@k9775) (set! k10197@k9781@k9776 k9781@k9776) (set! k10196@k9779@k9774 k9779@k9774) (set! k10195@k9773@&i/o-rcd k9773@&i/o-rcd) (set! k10194@k9771@&i/o-rtd k9771@&i/o-rtd) (set! k10193@k9769@i/o-error? k9769@i/o-error?) (set! k10192@k9767@make-i/o-error k9767@make-i/o-error) (set! k10191@k9765@p? k9765@p?) (set! k10190@k9762@k9754 k9762@k9754) (set! k10189@k9760@k9755 k9760@k9755) (set! k10188@k9758@k9753 k9758@k9753) (set! k10187@k9752@&undefined-rcd k9752@&undefined-rcd) (set! k10186@k9750@&undefined-rtd k9750@&undefined-rtd) (set! k10185@k9748@undefined-violation? k9748@undefined-violation?) (set! k10184@k9746@make-undefined-violation k9746@make-undefined-violation) (set! k10183@k9744@p? k9744@p?) (set! k10182@k9741@k9733 k9741@k9733) (set! k10181@k9739@k9734 k9739@k9734) (set! k10180@k9737@k9732 k9737@k9732) (set! k10179@k9731@&syntax-rcd k9731@&syntax-rcd) (set! k10178@k9729@&syntax-rtd k9729@&syntax-rtd) (set! k10177@k9727@syntax-violation-subform k9727@syntax-violation-subform) (set! k10176@k9725@syntax-violation-form k9725@syntax-violation-form) (set! k10175@k9723@syntax-violation? k9723@syntax-violation?) (set! k10174@k9721@k9702@syntax-violation-subform k9721@k9702@syntax-violation-subform) (set! k10173@k9719@k9701@syntax-violation-form k9719@k9701@syntax-violation-form) (set! k10172@k9717@make-syntax-violation k9717@make-syntax-violation) (set! k10171@k9715@p? k9715@p?) (set! k10170@k9712@k9704 k9712@k9704) (set! k10169@k9710@k9705 k9710@k9705) (set! k10168@k9708@k9703 k9708@k9703) (set! k10167@k9700@&lexical-rcd k9700@&lexical-rcd) (set! k10166@k9698@&lexical-rtd k9698@&lexical-rtd) (set! k10165@k9696@lexical-violation? k9696@lexical-violation?) (set! k10164@k9694@make-lexical-violation k9694@make-lexical-violation) (set! k10163@k9692@p? k9692@p?) (set! k10162@k9689@k9681 k9689@k9681) (set! k10161@k9687@k9682 k9687@k9682) (set! k10160@k9685@k9680 k9685@k9680) (set! k10159@k9679@&implementation-restriction-rcd k9679@&implementation-restriction-rcd) (set! k10158@k9677@&implementation-restriction-rtd k9677@&implementation-restriction-rtd) (set! k10157@k9675@implementation-restriction-violation? k9675@implementation-restriction-violation?) (set! k10156@k9673@make-implementation-restriction-violation k9673@make-implementation-restriction-violation) (set! k10155@k9671@p? k9671@p?) (set! k10154@k9668@k9660 k9668@k9660) (set! k10153@k9666@k9661 k9666@k9661) (set! k10152@k9664@k9659 k9664@k9659) (set! k10151@k9658@&non-continuable-rcd k9658@&non-continuable-rcd) (set! k10150@k9656@&non-continuable-rtd k9656@&non-continuable-rtd) (set! k10149@k9654@non-continuable-violation? k9654@non-continuable-violation?) (set! k10148@k9652@make-non-continuable-violation k9652@make-non-continuable-violation) (set! k10147@k9650@p? k9650@p?) (set! k10146@k9647@k9639 k9647@k9639) (set! k10145@k9645@k9640 k9645@k9640) (set! k10144@k9643@k9638 k9643@k9638) (set! k10143@k9637@&who-rcd k9637@&who-rcd) (set! k10142@k9635@&who-rtd k9635@&who-rtd) (set! k10141@k9633@condition-who k9633@condition-who) (set! k10140@k9631@who-condition? k9631@who-condition?) (set! k10139@k9629@k9612@condition-who k9629@k9612@condition-who) (set! k10138@k9627@make-who-condition k9627@make-who-condition) (set! k10137@k9625@p? k9625@p?) (set! k10136@k9622@k9614 k9622@k9614) (set! k10135@k9620@k9615 k9620@k9615) (set! k10134@k9618@k9613 k9618@k9613) (set! k10133@k9611@&irritants-rcd k9611@&irritants-rcd) (set! k10132@k9609@&irritants-rtd k9609@&irritants-rtd) (set! k10131@k9607@condition-irritants k9607@condition-irritants) (set! k10130@k9605@irritants-condition? k9605@irritants-condition?) (set! k10129@k9603@k9586@condition-irritants k9603@k9586@condition-irritants) (set! k10128@k9601@make-irritants-condition k9601@make-irritants-condition) (set! k10127@k9599@p? k9599@p?) (set! k10126@k9596@k9588 k9596@k9588) (set! k10125@k9594@k9589 k9594@k9589) (set! k10124@k9592@k9587 k9592@k9587) (set! k10123@k9585@&assertion-rcd k9585@&assertion-rcd) (set! k10122@k9583@&assertion-rtd k9583@&assertion-rtd) (set! k10121@k9581@assertion-violation? k9581@assertion-violation?) (set! k10120@k9579@make-assertion-violation k9579@make-assertion-violation) (set! k10119@k9577@p? k9577@p?) (set! k10118@k9574@k9566 k9574@k9566) (set! k10117@k9572@k9567 k9572@k9567) (set! k10116@k9570@k9565 k9570@k9565) (set! k10115@k9564@&violation-rcd k9564@&violation-rcd) (set! k10114@k9562@&violation-rtd k9562@&violation-rtd) (set! k10113@k9560@violation? k9560@violation?) (set! k10112@k9558@make-violation k9558@make-violation) (set! k10111@k9556@p? k9556@p?) (set! k10110@k9553@k9545 k9553@k9545) (set! k10109@k9551@k9546 k9551@k9546) (set! k10108@k9549@k9544 k9549@k9544) (set! k10107@k9543@&error-rcd k9543@&error-rcd) (set! k10106@k9541@&error-rtd k9541@&error-rtd) (set! k10105@k9539@error? k9539@error?) (set! k10104@k9537@make-error k9537@make-error) (set! k10103@k9535@p? k9535@p?) (set! k10102@k9532@k9524 k9532@k9524) (set! k10101@k9530@k9525 k9530@k9525) (set! k10100@k9528@k9523 k9528@k9523) (set! k10099@k9522@&serious-rcd k9522@&serious-rcd) (set! k10098@k9520@&serious-rtd k9520@&serious-rtd) (set! k10097@k9518@serious-condition? k9518@serious-condition?) (set! k10096@k9516@make-serious-condition k9516@make-serious-condition) (set! k10095@k9514@p? k9514@p?) (set! k10094@k9511@k9503 k9511@k9503) (set! k10093@k9509@k9504 k9509@k9504) (set! k10092@k9507@k9502 k9507@k9502) (set! k10091@k9501@&warning-rcd k9501@&warning-rcd) (set! k10090@k9499@&warning-rtd k9499@&warning-rtd) (set! k10089@k9497@warning? k9497@warning?) (set! k10088@k9495@make-warning k9495@make-warning) (set! k10087@k9493@p? k9493@p?) (set! k10086@k9490@k9482 k9490@k9482) (set! k10085@k9488@k9483 k9488@k9483) (set! k10084@k9486@k9481 k9486@k9481) (set! k10083@k9480@&message-rcd k9480@&message-rcd) (set! k10082@k9478@&message-rtd k9478@&message-rtd) (set! k10081@k9476@condition-message k9476@condition-message) (set! k10080@k9474@message-condition? k9474@message-condition?) (set! k10079@k9472@k9455@condition-message k9472@k9455@condition-message) (set! k10078@k9470@make-message-condition k9470@make-message-condition) (set! k10077@k9468@p? k9468@p?) (set! k10076@k9465@k9457 k9465@k9457) (set! k10075@k9463@k9458 k9463@k9458) (set! k10074@k9461@k9456 k9461@k9456) (set! k10073@k9389@&condition-rcd k9389@&condition-rcd) (set! k10072@k9387@&condition-rtd k9387@&condition-rtd) (set! k10071@k9385@make-&condition k9385@make-&condition) (set! k10070@k9383@&condition? k9383@&condition?) (set! k10069@k9380@k9372 k9380@k9372) (set! k10068@k9378@k9373 k9378@k9373) (set! k10067@k9376@k9371 k9376@k9371)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (k1245@k1170@current-primitive-locations (lambda (k11321@x) ((lambda (k11323@t) (if k11323@t (cdr k11323@t) '#f)) (assq k11321@x '((&no-nans-rcd . k10307@k10066@&no-nans-rcd) (&no-nans-rtd . k10306@k10064@&no-nans-rtd) (&no-infinities-rcd . k10299@k10045@&no-infinities-rcd) (&no-infinities-rtd . k10298@k10043@&no-infinities-rtd) (&i/o-encoding-rcd . k10291@k10024@&i/o-encoding-rcd) (&i/o-encoding-rtd . k10290@k10022@&i/o-encoding-rtd) (&i/o-decoding-rcd . k10281@k9998@&i/o-decoding-rcd) (&i/o-decoding-rtd . k10280@k9996@&i/o-decoding-rtd) (&i/o-port-rcd . k10273@k9977@&i/o-port-rcd) (&i/o-port-rtd . k10272@k9975@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . k10263@k9951@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . k10262@k9949@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . k10255@k9930@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . k10254@k9928@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . k10247@k9909@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . k10246@k9907@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . k10239@k9888@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . k10238@k9886@&i/o-file-protection-rtd) (&i/o-filename-rcd . k10231@k9867@&i/o-filename-rcd) (&i/o-filename-rtd . k10230@k9865@&i/o-filename-rtd) (&i/o-invalid-position-rcd . k10221@k9841@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . k10220@k9839@&i/o-invalid-position-rtd) (&i/o-write-rcd . k10211@k9815@&i/o-write-rcd) (&i/o-write-rtd . k10210@k9813@&i/o-write-rtd) (&i/o-read-rcd . k10203@k9794@&i/o-read-rcd) (&i/o-read-rtd . k10202@k9792@&i/o-read-rtd) (&i/o-rcd . k10195@k9773@&i/o-rcd) (&i/o-rtd . k10194@k9771@&i/o-rtd) (&undefined-rcd . k10187@k9752@&undefined-rcd) (&undefined-rtd . k10186@k9750@&undefined-rtd) (&syntax-rcd . k10179@k9731@&syntax-rcd) (&syntax-rtd . k10178@k9729@&syntax-rtd) (&lexical-rcd . k10167@k9700@&lexical-rcd) (&lexical-rtd . k10166@k9698@&lexical-rtd) (&implementation-restriction-rcd . k10159@k9679@&implementation-restriction-rcd) (&implementation-restriction-rtd . k10158@k9677@&implementation-restriction-rtd) (&non-continuable-rcd . k10151@k9658@&non-continuable-rcd) (&non-continuable-rtd . k10150@k9656@&non-continuable-rtd) (&who-rcd . k10143@k9637@&who-rcd) (&who-rtd . k10142@k9635@&who-rtd) (&irritants-rcd . k10133@k9611@&irritants-rcd) (&irritants-rtd . k10132@k9609@&irritants-rtd) (&assertion-rcd . k10123@k9585@&assertion-rcd) (&assertion-rtd . k10122@k9583@&assertion-rtd) (&violation-rcd . k10115@k9564@&violation-rcd) (&violation-rtd . k10114@k9562@&violation-rtd) (&error-rcd . k10107@k9543@&error-rcd) (&error-rtd . k10106@k9541@&error-rtd) (&serious-rcd . k10099@k9522@&serious-rcd) (&serious-rtd . k10098@k9520@&serious-rtd) (&warning-rcd . k10091@k9501@&warning-rcd) (&warning-rtd . k10090@k9499@&warning-rtd) (&message-rcd . k10083@k9480@&message-rcd) (&message-rtd . k10082@k9478@&message-rtd) (&condition-rcd . k10073@k9389@&condition-rcd) (&condition-rtd . k10072@k9387@&condition-rtd) (syntax-error . k9357@k2992@syntax-error) (syntax-dispatch . k9250@k2763@syntax-dispatch) (gensym . k1150@k914@gensym) (load . k10570@k10335@load) (interaction-environment . k9365@k3008@interaction-environment) (library-path . k1774@k1411@library-path) (make-parameter . k1164@k942@make-parameter) (make-variable-transformer . k9184@k2322@make-variable-transformer) (identifier? . k9360@k2998@identifier?) (generate-temporaries . k9350@k2978@generate-temporaries) (free-identifier=? . k9351@k2980@free-identifier=?) (syntax->datum . k9362@k3002@syntax->datum) (datum->syntax . k9361@k3000@datum->syntax) (bound-identifier=? . k9352@k2982@bound-identifier=?) (make-i/o-write-error . k10208@k9809@make-i/o-write-error) (make-i/o-read-error . k10200@k9788@make-i/o-read-error) (make-i/o-port-error . k10268@k9967@make-i/o-port-error) (make-i/o-invalid-position-error . k10216@k9831@make-i/o-invalid-position-error) (make-i/o-filename-error . k10226@k9857@make-i/o-filename-error) (make-i/o-file-protection-error . k10236@k9882@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . k10244@k9903@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . k10260@k9945@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . k10252@k9924@make-i/o-file-already-exists-error) (make-i/o-error . k10192@k9767@make-i/o-error) (make-i/o-encoding-error . k10286@k10014@make-i/o-encoding-error) (make-i/o-decoding-error . k10278@k9992@make-i/o-decoding-error) (i/o-write-error? . k10209@k9811@i/o-write-error?) (i/o-read-error? . k10201@k9790@i/o-read-error?) (i/o-port-error? . k10270@k9971@i/o-port-error?) (i/o-invalid-position-error? . k10218@k9835@i/o-invalid-position-error?) (i/o-filename-error? . k10228@k9861@i/o-filename-error?) (i/o-file-protection-error? . k10237@k9884@i/o-file-protection-error?) (i/o-file-is-read-only-error? . k10245@k9905@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . k10261@k9947@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . k10253@k9926@i/o-file-already-exists-error?) (i/o-error? . k10193@k9769@i/o-error?) (i/o-error-position . k10219@k9837@i/o-error-position) (i/o-error-port . k10271@k9973@i/o-error-port) (i/o-error-filename . k10229@k9863@i/o-error-filename) (i/o-encoding-error? . k10288@k10018@i/o-encoding-error?) (i/o-encoding-error-char . k10289@k10020@i/o-encoding-error-char) (i/o-decoding-error? . k10279@k9994@i/o-decoding-error?) (scheme-report-environment . k9341@k2960@scheme-report-environment) (null-environment . k9340@k2958@null-environment) (command-line . k10567@k10329@command-line) (eval . k9343@k2964@eval) (environment . k9339@k2956@environment) (who-condition? . k10140@k9631@who-condition?) (warning? . k10089@k9497@warning?) (violation? . k10113@k9560@violation?) (undefined-violation? . k10185@k9748@undefined-violation?) (syntax-violation? . k10175@k9723@syntax-violation?) (syntax-violation-subform . k10177@k9727@syntax-violation-subform) (syntax-violation-form . k10176@k9725@syntax-violation-form) (syntax-violation . k9359@k2996@syntax-violation) (serious-condition? . k10097@k9518@serious-condition?) (non-continuable-violation? . k10149@k9654@non-continuable-violation?) (message-condition? . k10080@k9474@message-condition?) (make-who-condition . k10138@k9627@make-who-condition) (make-warning . k10088@k9495@make-warning) (make-violation . k10112@k9558@make-violation) (make-undefined-violation . k10184@k9746@make-undefined-violation) (make-syntax-violation . k10172@k9717@make-syntax-violation) (make-serious-condition . k10096@k9516@make-serious-condition) (make-non-continuable-violation . k10148@k9652@make-non-continuable-violation) (make-message-condition . k10078@k9470@make-message-condition) (make-lexical-violation . k10164@k9694@make-lexical-violation) (make-irritants-condition . k10128@k9601@make-irritants-condition) (make-implementation-restriction-violation . k10156@k9673@make-implementation-restriction-violation) (make-error . k10104@k9537@make-error) (make-assertion-violation . k10120@k9579@make-assertion-violation) (lexical-violation? . k10165@k9696@lexical-violation?) (irritants-condition? . k10130@k9605@irritants-condition?) (implementation-restriction-violation? . k10157@k9675@implementation-restriction-violation?) (error? . k10105@k9539@error?) (condition-who . k10141@k9633@condition-who) (condition-message . k10081@k9476@condition-message) (condition-irritants . k10131@k9607@condition-irritants) (assertion-violation? . k10121@k9581@assertion-violation?) (no-nans-violation? . k10305@k10062@no-nans-violation?) (no-infinities-violation? . k10297@k10041@no-infinities-violation?) (make-no-nans-violation . k10304@k10060@make-no-nans-violation) (make-no-infinities-violation . k10296@k10039@make-no-infinities-violation) (assertion-error . k9356@k2990@assertion-error)))))) (k1790@k1443@install-library 'k11286 '(mosh interaction) '() '() '() '() '((alist->eq-hash-table . k11276) (format . k11273) (string-split . k11262) (call-process . k11256) (set-current-directory! . k11252) (expand-path . k11251) (current-directory . k11250) (%spawn . k11249) (%waitpid . k11248) (%ffi-supported? . k11247) (%ffi-pointer-ref . k11246) (%ffi-pointer->string . k11245) (%ffi-call->string-or-zero . k11244) (%ffi-call->double . k11243) (%ffi-call->void* . k11242) (%ffi-call->void . k11241) (%ffi-call->int . k11240) (%ffi-lookup . k11239) (%ffi-open . k11238) (%fork . k11237) (%pipe . k11236) (p . k11235) (string-upcase . k11216) (string-titlecase . k11215) (string-normalize-nfkd . k11214) (string-normalize-nfkc . k11213) (string-normalize-nfd . k11212) (string-normalize-nfc . k11211) (string-foldcase . k11210) (string-downcase . k11209) (string-ci>? . k11208) (string-ci>=? . k11207) (string-ci=? . k11206) (string-ci<? . k11205) (string-ci<=? . k11204) (char-whitespace? . k11203) (char-upper-case? . k11202) (char-title-case? . k11201) (char-numeric? . k11200) (char-lower-case? . k11199) (char-general-category . k11198) (char-upcase . k11197) (char-titlecase . k11196) (char-foldcase . k11195) (char-downcase . k11194) (char-ci>? . k11193) (char-ci>=? . k11192) (char-ci=? . k11191) (char-ci<? . k11190) (char-ci<=? . k11189) (char-alphabetic? . k11188) (make-variable-transformer . k2321) (identifier? . k2997) (generate-temporaries . k2977) (free-identifier=? . k2979) (syntax->datum . k3001) (datum->syntax . k2999) (bound-identifier=? . k2981) (record-type-descriptor? . k11187) (record-predicate . k11186) (record-mutator . k11185) (record-constructor . k11184) (record-accessor . k11183) (make-record-type-descriptor . k11182) (make-record-constructor-descriptor . k11181) (record? . k11180) (record-type-uid . k11179) (record-type-sealed? . k11178) (record-type-parent . k11177) (record-type-opaque? . k11176) (record-type-name . k11175) (record-type-generative? . k11174) (record-type-field-names . k11173) (record-rtd . k11172) (record-field-mutable? . k11171) (delete-file . k11170) (file-exists? . k11169) (vector-sort! . k11168) (vector-sort . k11167) (list-sort . k11166) (symbol-hash . k11165) (string-ci-hash . k11164) (string-hash . k11163) (equal-hash . k11162) (hashtable-equivalence-function . k11161) (make-hashtable . k11160) (hashtable-hash-function . k11159) (make-eqv-hashtable . k11158) (make-eq-hashtable . k11157) (hashtable? . k11156) (hashtable-update! . k11155) (hashtable-size . k11154) (hashtable-set! . k11153) (hashtable-ref . k11152) (hashtable-mutable? . k11151) (hashtable-keys . k11150) (hashtable-entries . k11149) (hashtable-delete! . k11148) (hashtable-copy . k11147) (hashtable-contains? . k11146) (hashtable-clear! . k11145) (call-with-output-file . k11144) (call-with-input-file . k11143) (write-char . k11142) (write . k11141) (with-output-to-file . k11140) (with-input-from-file . k11139) (read-char . k11138) (read . k11137) (peek-char . k11136) (open-output-file . k11135) (open-input-file . k11134) (newline . k11133) (display . k11132) (close-output-port . k11131) (close-input-port . k11130) (eof-object? . k11129) (eof-object . k11128) (current-error-port . k11127) (current-output-port . k11126) (current-input-port . k11125) (output-port? . k11124) (input-port? . k11123) (utf-8-codec . k11122) (utf-16-codec . k11121) (transcoder-error-handling-mode . k11120) (transcoder-eol-style . k11119) (transcoder-codec . k11118) (transcoded-port . k11117) (textual-port? . k11116) (string->bytevector . k11115) (standard-output-port . k11114) (standard-input-port . k11113) (standard-error-port . k11112) (set-port-position! . k11111) (put-u8 . k11110) (put-string . k11109) (put-datum . k11108) (put-char . k11107) (put-bytevector . k11106) (port? . k11105) (port-transcoder . k11104) (port-position . k11103) (port-has-set-port-position!? . k11102) (port-has-port-position? . k11101) (port-eof? . k11100) (output-port-buffer-mode . k11099) (open-string-output-port . k11098) (open-string-input-port . k11097) (open-file-output-port . k11096) (open-file-input/output-port . k11095) (open-file-input-port . k11094) (open-bytevector-output-port . k11093) (open-bytevector-input-port . k11092) (native-transcoder . k11091) (native-eol-style . k11090) (make-transcoder . k11089) (latin-1-codec . k11088) (make-i/o-write-error . k9808) (make-i/o-read-error . k9787) (make-i/o-port-error . k9966) (make-i/o-invalid-position-error . k9830) (make-i/o-filename-error . k9856) (make-i/o-file-protection-error . k9881) (make-i/o-file-is-read-only-error . k9902) (make-i/o-file-does-not-exist-error . k9944) (make-i/o-file-already-exists-error . k9923) (make-i/o-error . k9766) (make-i/o-encoding-error . k10013) (make-i/o-decoding-error . k9991) (make-custom-textual-output-port . k11087) (make-custom-textual-input/output-port . k11086) (make-custom-textual-input-port . k11085) (make-custom-binary-output-port . k11084) (make-custom-binary-input/output-port . k11083) (make-custom-binary-input-port . k11082) (make-bytevector . k11081) (lookahead-u8 . k11080) (lookahead-char . k11079) (i/o-write-error? . k9810) (i/o-read-error? . k9789) (i/o-port-error? . k9970) (i/o-invalid-position-error? . k9834) (i/o-filename-error? . k9860) (i/o-file-protection-error? . k9883) (i/o-file-is-read-only-error? . k9904) (i/o-file-does-not-exist-error? . k9946) (i/o-file-already-exists-error? . k9925) (i/o-error? . k9768) (i/o-error-position . k9836) (i/o-error-port . k9972) (i/o-error-filename . k9862) (i/o-encoding-error? . k10017) (i/o-encoding-error-char . k10019) (i/o-decoding-error? . k9993) (get-u8 . k11078) (get-string-n! . k11077) (get-string-n . k11076) (get-string-all . k11075) (get-line . k11074) (get-datum . k11073) (get-char . k11072) (get-bytevector-some . k11071) (get-bytevector-n! . k11070) (get-bytevector-n . k11069) (get-bytevector-all . k11068) (flush-output-port . k11067) (close-port . k11066) (exit . k11058) (command-line . k10328) (string-fill! . k11057) (string-set! . k11056) (set-cdr! . k11055) (set-car! . k11054) (remove . k11053) (remv . k11052) (remp . k11051) (remq . k11050) (partition . k11049) (memv . k11048) (memq . k11047) (memp . k11046) (member . k11045) (exists . k11044) (for-all . k11043) (fold-right . k11042) (fold-left . k11041) (find . k11040) (filter . k11039) (cons* . k11038) (assv . k11037) (assq . k11036) (assp . k11035) (assoc . k11034) (call-with-string-output-port . k11033) (call-with-port . k11032) (call-with-bytevector-output-port . k11031) (bytevector->string . k11030) (buffer-mode? . k11029) (binary-port? . k11028) (with-exception-handler . k11027) (raise-continuable . k11026) (raise . k11025) (eval . k2963) (environment . k2955) (make-enumeration . k11024) (enum-set=? . k11023) (enum-set-universe . k11022) (enum-set-union . k11021) (enum-set-subset? . k11020) (enum-set-projection . k11019) (enum-set-member? . k11018) (enum-set-intersection . k11017) (enum-set-indexer . k11016) (enum-set-difference . k11015) (enum-set-constructor . k11014) (enum-set-complement . k11013) (enum-set->list . k11012) (who-condition? . k9630) (warning? . k9496) (violation? . k9559) (undefined-violation? . k9747) (syntax-violation? . k9722) (syntax-violation-subform . k9726) (syntax-violation-form . k9724) (syntax-violation . k2995) (simple-conditions . k11011) (serious-condition? . k9517) (non-continuable-violation? . k9653) (message-condition? . k9473) (make-who-condition . k9626) (make-warning . k9494) (make-violation . k9557) (make-undefined-violation . k9745) (make-syntax-violation . k9716) (make-serious-condition . k9515) (make-non-continuable-violation . k9651) (make-message-condition . k9469) (make-lexical-violation . k9693) (make-irritants-condition . k9600) (make-implementation-restriction-violation . k9672) (make-error . k9536) (make-assertion-violation . k9578) (lexical-violation? . k9695) (irritants-condition? . k9604) (implementation-restriction-violation? . k9674) (error? . k9538) (condition-who . k9632) (condition-predicate . k11010) (condition-message . k9475) (condition-irritants . k9606) (condition-accessor . k11009) (condition . k11008) (assertion-violation? . k9580) (condition? . k11007) (utf32->string . k11006) (utf16->string . k11005) (utf8->string . k11004) (uint-list->bytevector . k11003) (u8-list->bytevector . k11002) (string->utf8 . k11001) (string->utf32 . k11000) (string->utf16 . k10999) (sint-list->bytevector . k10998) (native-endianness . k10997) (bytevector? . k10996) (bytevector=? . k10995) (bytevector-uint-set! . k10994) (bytevector-uint-ref . k10993) (bytevector-u8-set! . k10992) (bytevector-u8-ref . k10991) (bytevector-u64-set! . k10990) (bytevector-u64-ref . k10989) (bytevector-u64-native-set! . k10988) (bytevector-u64-native-ref . k10987) (bytevector-u32-set! . k10986) (bytevector-u32-ref . k10985) (bytevector-u32-native-set! . k10984) (bytevector-u32-native-ref . k10983) (bytevector-u16-set! . k10982) (bytevector-u16-ref . k10981) (bytevector-u16-native-set! . k10980) (bytevector-u16-native-ref . k10979) (bytevector-sint-set! . k10978) (bytevector-sint-ref . k10977) (bytevector-s8-set! . k10976) (bytevector-s8-ref . k10975) (bytevector-s64-set! . k10974) (bytevector-s64-ref . k10973) (bytevector-s64-native-set! . k10972) (bytevector-s64-native-ref . k10971) (bytevector-s32-set! . k10970) (bytevector-s32-ref . k10969) (bytevector-s32-native-set! . k10968) (bytevector-s32-native-ref . k10967) (bytevector-s16-set! . k10966) (bytevector-s16-ref . k10965) (bytevector-s16-native-set! . k10964) (bytevector-s16-native-ref . k10963) (bytevector-length . k10962) (bytevector-ieee-single-ref . k10961) (bytevector-ieee-single-set! . k10960) (bytevector-ieee-single-native-set! . k10959) (bytevector-ieee-single-native-ref . k10958) (bytevector-ieee-double-set! . k10957) (bytevector-ieee-double-ref . k10956) (bytevector-ieee-double-native-set! . k10955) (bytevector-ieee-double-native-ref . k10954) (bytevector-fill! . k10953) (bytevector-copy! . k10952) (bytevector-copy . k10951) (bytevector->uint-list . k10950) (bytevector->u8-list . k10949) (bytevector->sint-list . k10948) (no-nans-violation? . k10061) (no-infinities-violation? . k10040) (make-no-nans-violation . k10059) (make-no-infinities-violation . k10038) (real->flonum . k10947) (flzero? . k10946) (fltruncate . k10945) (fltan . k10944) (flsqrt . k10943) (flsin . k10942) (flround . k10941) (flpositive? . k10940) (flonum? . k10939) (flodd? . k10938) (flnumerator . k10937) (flnegative? . k10936) (flnan? . k10935) (flmod0 . k10934) (flmod . k10933) (flmin . k10932) (flmax . k10931) (fllog . k10930) (flinteger? . k10929) (flinfinite? . k10928) (flfloor . k10927) (flfinite? . k10926) (flexpt . k10925) (flexp . k10924) (fleven? . k10923) (fldiv0-and-mod0 . k10922) (fldiv0 . k10921) (fldiv-and-mod . k10920) (fldiv . k10919) (fldenominator . k10918) (flcos . k10917) (flceiling . k10916) (flatan . k10915) (flasin . k10914) (flacos . k10913) (flabs . k10912) (fl>? . k10911) (fl>=? . k10910) (fl=? . k10909) (fl<? . k10908) (fl<=? . k10907) (fl/ . k10906) (fl- . k10905) (fl+ . k10904) (fl* . k10903) (fixnum->flonum . k10902) (fxzero? . k10901) (fxxor . k10900) (fxrotate-bit-field . k10899) (fxreverse-bit-field . k10898) (fxpositive? . k10897) (fxodd? . k10896) (fxnot . k10895) (fxnegative? . k10894) (fxmod0 . k10893) (fxmod . k10892) (fxmin . k10891) (fxmax . k10890) (fxlength . k10889) (fxior . k10888) (fxif . k10887) (fxfirst-bit-set . k10886) (fxeven? . k10885) (fxdiv0-and-mod0 . k10884) (fxdiv0 . k10883) (fxdiv-and-mod . k10882) (fxdiv . k10881) (fxcopy-bit-field . k10880) (fxcopy-bit . k10879) (fxbit-set? . k10878) (fxbit-field . k10877) (fxbit-count . k10876) (fxarithmetic-shift-right . k10875) (fxarithmetic-shift-left . k10874) (fxarithmetic-shift . k10873) (fxand . k10872) (fx>? . k10871) (fx>=? . k10870) (fx=? . k10869) (fx<? . k10868) (fx<=? . k10867) (fx-/carry . k10866) (fx- . k10865) (fx+/carry . k10864) (fx+ . k10863) (fx*/carry . k10862) (fx* . k10861) (greatest-fixnum . k10860) (least-fixnum . k10859) (fixnum-width . k10858) (fixnum? . k10857) (bitwise-rotate-bit-field . k10856) (bitwise-reverse-bit-field . k10855) (bitwise-length . k10854) (bitwise-if . k10853) (bitwise-first-bit-set . k10852) (bitwise-copy-bit-field . k10851) (bitwise-copy-bit . k10850) (bitwise-bit-set? . k10849) (bitwise-bit-field . k10848) (bitwise-bit-count . k10847) (bitwise-xor . k10846) (bitwise-ior . k10845) (bitwise-and . k10844) (bitwise-not . k10843) (bitwise-arithmetic-shift-right . k10842) (bitwise-arithmetic-shift-left . k10841) (bitwise-arithmetic-shift . k10840) (zero? . k10839) (vector? . k10838) (vector-set! . k10837) (vector-ref . k10836) (vector-map . k10835) (vector-length . k10834) (vector-for-each . k10833) (vector-fill! . k10832) (vector->list . k10831) (vector . k10830) (values . k10829) (truncate . k10828) (tan . k10827) (symbol? . k10826) (symbol=? . k10825) (symbol->string . k10824) (substring . k10823) (string? . k10822) (string>? . k10821) (string>=? . k10820) (string=? . k10819) (string<? . k10818) (string<=? . k10817) (string-ref . k10816) (string-length . k10815) (string-for-each . k10814) (string-copy . k10813) (string-append . k10812) (string->symbol . k10811) (string->number . k10810) (string->list . k10809) (string . k10808) (sqrt . k10807) (sin . k10806) (round . k10805) (reverse . k10804) (real? . k10803) (real-valued? . k10802) (real-part . k10801) (rationalize . k10800) (rational? . k10799) (rational-valued? . k10798) (procedure? . k10797) (positive? . k10796) (pair? . k10795) (odd? . k10794) (numerator . k10793) (number? . k10792) (number->string . k10791) (null? . k10790) (not . k10789) (negative? . k10788) (nan? . k10787) (min . k10786) (max . k10785) (map . k10784) (make-vector . k10783) (make-string . k10782) (make-rectangular . k10781) (make-polar . k10780) (magnitude . k10779) (log . k10778) (list? . k10777) (list-tail . k10776) (list-ref . k10775) (list->vector . k10774) (list->string . k10773) (list . k10772) (length . k10771) (lcm . k10770) (integer? . k10769) (integer-valued? . k10768) (integer->char . k10767) (infinite? . k10766) (inexact? . k10765) (inexact . k10764) (imag-part . k10763) (gcd . k10762) (for-each . k10761) (floor . k10760) (finite? . k10759) (expt . k10758) (exp . k10757) (exact? . k10756) (exact-integer-sqrt . k10755) (exact . k10754) (even? . k10753) (error . k10752) (eqv? . k10751) (equal? . k10750) (eq? . k10749) (dynamic-wind . k10748) (div0-and-mod0 . k10747) (mod0 . k10746) (div0 . k10745) (div-and-mod . k10744) (mod . k10743) (div . k10742) (denominator . k10741) (cos . k10740) (cons . k10739) (complex? . k10738) (char? . k10737) (char>? . k10736) (char>=? . k10735) (char=? . k10734) (char<? . k10733) (char<=? . k10732) (char->integer . k10731) (ceiling . k10730) (call-with-values . k10729) (call/cc . k10728) (call-with-current-continuation . k10727) (cddddr . k10726) (cdddar . k10725) (cddadr . k10724) (cddaar . k10723) (cdaddr . k10722) (cdadar . k10721) (cdaadr . k10720) (cdaaar . k10719) (cadddr . k10718) (caddar . k10717) (cadadr . k10716) (cadaar . k10715) (caaddr . k10714) (caadar . k10713) (caaadr . k10712) (caaaar . k10711) (cdddr . k10710) (cddar . k10709) (cdadr . k10708) (cdaar . k10707) (caddr . k10706) (cadar . k10705) (caadr . k10704) (caaar . k10703) (cddr . k10702) (cdar . k10701) (cadr . k10700) (caar . k10699) (cdr . k10698) (car . k10697) (boolean? . k10696) (boolean=? . k10695) (atan . k10694) (assertion-violation . k10693) (asin . k10692) (apply . k10691) (append . k10690) (angle . k10689) (acos . k10688) (abs . k10687) (/ . k10686) (* . k10685) (- . k10684) (+ . k10683) (>= . k10682) (> . k10681) (= . k10680) (<= . k10679) (< . k10678) (library . k10677) (&no-nans . k10676) (&no-infinities . k10675) (&i/o-encoding . k10674) (&i/o-decoding . k10673) (&i/o-port . k10672) (&i/o-file-does-not-exist . k10671) (&i/o-file-already-exists . k10670) (&i/o-file-is-read-only . k10669) (&i/o-file-protection . k10668) (&i/o-filename . k10667) (&i/o-invalid-position . k10666) (&i/o-write . k10665) (&i/o-read . k10664) (&i/o . k10663) (&undefined . k10662) (&syntax . k10661) (&lexical . k10660) (&implementation-restriction . k10659) (&non-continuable . k10658) (&who . k10657) (&irritants . k10656) (&assertion . k10655) (&violation . k10654) (&error . k10653) (&serious . k10652) (&warning . k10651) (&message . k10650) (&condition . k10649) (define-condition-type . k10648) (define-enumeration . k10647) (define-record-type . k10646) (parent-rtd . k10645) (nongenerative . k10644) (opaque . k10643) (sealed . k10642) (protocol . k10641) (parent . k10640) (immutable . k10639) (mutable . k10638) (fields . k10637) (error-handling-mode . k10636) (file-options . k10635) (buffer-mode . k10634) (eol-style . k10633) (guard . k10632) (unsyntax-splicing . k10629) (unsyntax . k10628) (unquote-splicing . k10627) (unquote . k10626) (_ . k10625) (else . k10624) (=> . k10623) (... . k10622) (assert . k10621) (endianness . k10620) (do . k10617) (cond . k10616) (let* . k10615) (let . k10614) (let*-values . k10613) (let-values . k10612) (identifier-syntax . k10611) (with-syntax . k10610) (quasisyntax . k10609) (quasiquote . k10608) (syntax-rules . k10607) (include . k10606) (record-constructor-descriptor . k10604) (record-type-descriptor . k10603) (case . k10602) (unless . k10600) (when . k10599) (or . k10598) (and . k10597) (if . k10596) (letrec* . k10595) (letrec . k10594) (case-lambda . k10592) (lambda . k10591) (syntax . k10590) (syntax-case . k10589) (quote . k10588) (letrec-syntax . k10586) (let-syntax . k10585) (set! . k10584) (import . k10583) (begin . k10582) (define-syntax . k10580) (define . k10579)) '() values values '#f '#f '#t '#f) (k1790@k1443@install-library 'k11287 '(psyntax null-environment-5) '() '() '() '() '((make-promise . k11059) (unquote-splicing . k10627) (unquote . k10626) (_ . k10625) (else . k10624) (=> . k10623) (... . k10622) (delay . k10619) (do . k10617) (cond . k10616) (let* . k10615) (let . k10614) (quasiquote . k10608) (syntax-rules . k10607) (case . k10602) (or . k10598) (and . k10597) (if . k10596) (letrec . k10594) (lambda . k10591) (quote . k10588) (letrec-syntax . k10586) (let-syntax . k10585) (set! . k10584) (begin . k10582) (define-syntax . k10580) (define . k10579)) '() values values '#f '#f '#t '#f) (k1790@k1443@install-library 'k11288 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . k11208) (string-ci>=? . k11207) (string-ci=? . k11206) (string-ci<? . k11205) (string-ci<=? . k11204) (char-whitespace? . k11203) (char-upper-case? . k11202) (char-numeric? . k11200) (char-lower-case? . k11199) (char-upcase . k11197) (char-downcase . k11194) (char-ci>? . k11193) (char-ci>=? . k11192) (char-ci=? . k11191) (char-ci<? . k11190) (char-ci<=? . k11189) (char-alphabetic? . k11188) (call-with-output-file . k11144) (call-with-input-file . k11143) (write-char . k11142) (write . k11141) (with-output-to-file . k11140) (with-input-from-file . k11139) (read-char . k11138) (read . k11137) (peek-char . k11136) (open-output-file . k11135) (open-input-file . k11134) (newline . k11133) (display . k11132) (close-output-port . k11131) (close-input-port . k11130) (eof-object . k11128) (current-output-port . k11126) (current-input-port . k11125) (output-port? . k11124) (input-port? . k11123) (scheme-report-environment . k2959) (quotient . k11065) (null-environment . k2957) (remainder . k11064) (modulo . k11063) (inexact->exact . k11062) (force . k11061) (exact->inexact . k11060) (make-promise . k11059) (string-fill! . k11057) (string-set! . k11056) (set-cdr! . k11055) (set-car! . k11054) (memv . k11048) (memq . k11047) (member . k11045) (assv . k11037) (assq . k11036) (assoc . k11034) (eval . k2963) (zero? . k10839) (vector? . k10838) (vector-set! . k10837) (vector-ref . k10836) (vector-length . k10834) (vector-fill! . k10832) (vector->list . k10831) (vector . k10830) (values . k10829) (truncate . k10828) (tan . k10827) (symbol? . k10826) (symbol->string . k10824) (substring . k10823) (string? . k10822) (string>? . k10821) (string>=? . k10820) (string=? . k10819) (string<? . k10818) (string<=? . k10817) (string-ref . k10816) (string-length . k10815) (string-copy . k10813) (string-append . k10812) (string->symbol . k10811) (string->number . k10810) (string->list . k10809) (string . k10808) (sqrt . k10807) (sin . k10806) (round . k10805) (reverse . k10804) (real? . k10803) (real-part . k10801) (rationalize . k10800) (rational? . k10799) (procedure? . k10797) (positive? . k10796) (pair? . k10795) (odd? . k10794) (numerator . k10793) (number? . k10792) (number->string . k10791) (not . k10789) (negative? . k10788) (min . k10786) (max . k10785) (map . k10784) (make-vector . k10783) (make-string . k10782) (make-rectangular . k10781) (make-polar . k10780) (magnitude . k10779) (log . k10778) (list? . k10777) (list-tail . k10776) (list-ref . k10775) (list->vector . k10774) (list->string . k10773) (list . k10772) (length . k10771) (lcm . k10770) (integer? . k10769) (integer->char . k10767) (inexact? . k10765) (imag-part . k10763) (gcd . k10762) (for-each . k10761) (floor . k10760) (expt . k10758) (exp . k10757) (exact? . k10756) (even? . k10753) (eqv? . k10751) (equal? . k10750) (eq? . k10749) (dynamic-wind . k10748) (denominator . k10741) (cos . k10740) (cons . k10739) (complex? . k10738) (char? . k10737) (char>? . k10736) (char>=? . k10735) (char=? . k10734) (char<? . k10733) (char<=? . k10732) (char->integer . k10731) (ceiling . k10730) (call-with-values . k10729) (call-with-current-continuation . k10727) (cddddr . k10726) (cdddar . k10725) (cddadr . k10724) (cddaar . k10723) (cdaddr . k10722) (cdadar . k10721) (cdaadr . k10720) (cdaaar . k10719) (cadddr . k10718) (caddar . k10717) (cadadr . k10716) (cadaar . k10715) (caaddr . k10714) (caadar . k10713) (caaadr . k10712) (caaaar . k10711) (cdddr . k10710) (cddar . k10709) (cdadr . k10708) (cdaar . k10707) (caddr . k10706) (cadar . k10705) (caadr . k10704) (caaar . k10703) (cddr . k10702) (cdar . k10701) (cadr . k10700) (caar . k10699) (cdr . k10698) (car . k10697) (boolean? . k10696) (atan . k10694) (asin . k10692) (apply . k10691) (append . k10690) (angle . k10689) (acos . k10688) (abs . k10687) (/ . k10686) (* . k10685) (- . k10684) (+ . k10683) (>= . k10682) (> . k10681) (= . k10680) (<= . k10679) (< . k10678) (unquote-splicing . k10627) (unquote . k10626) (else . k10624) (=> . k10623) (... . k10622) (delay . k10619) (do . k10617) (cond . k10616) (let* . k10615) (let . k10614) (quasiquote . k10608) (syntax-rules . k10607) (case . k10602) (or . k10598) (and . k10597) (if . k10596) (letrec . k10594) (lambda . k10591) (quote . k10588) (letrec-syntax . k10586) (let-syntax . k10585) (set! . k10584) (begin . k10582) (define-syntax . k10580) (define . k10579)) '() values values '#f '#f '#t '#f) (k1790@k1443@install-library 'k11289 '(psyntax modules) '() '() '() '() '((module . k10581)) '() values values '#f '#f '#t '#f) (k1790@k1443@install-library 'k11290 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (k1790@k1443@install-library 'k11291 '(rnrs) '(6) '() '() '() '((regexp? . k11279) (string-upcase . k11216) (string-titlecase . k11215) (string-normalize-nfkd . k11214) (string-normalize-nfkc . k11213) (string-normalize-nfd . k11212) (string-normalize-nfc . k11211) (string-foldcase . k11210) (string-downcase . k11209) (string-ci>? . k11208) (string-ci>=? . k11207) (string-ci=? . k11206) (string-ci<? . k11205) (string-ci<=? . k11204) (char-whitespace? . k11203) (char-upper-case? . k11202) (char-title-case? . k11201) (char-numeric? . k11200) (char-lower-case? . k11199) (char-general-category . k11198) (char-upcase . k11197) (char-titlecase . k11196) (char-foldcase . k11195) (char-downcase . k11194) (char-ci>? . k11193) (char-ci>=? . k11192) (char-ci=? . k11191) (char-ci<? . k11190) (char-ci<=? . k11189) (char-alphabetic? . k11188) (make-variable-transformer . k2321) (identifier? . k2997) (generate-temporaries . k2977) (free-identifier=? . k2979) (syntax->datum . k3001) (datum->syntax . k2999) (bound-identifier=? . k2981) (record-type-descriptor? . k11187) (record-predicate . k11186) (record-mutator . k11185) (record-constructor . k11184) (record-accessor . k11183) (make-record-type-descriptor . k11182) (make-record-constructor-descriptor . k11181) (record? . k11180) (record-type-uid . k11179) (record-type-sealed? . k11178) (record-type-parent . k11177) (record-type-opaque? . k11176) (record-type-name . k11175) (record-type-generative? . k11174) (record-type-field-names . k11173) (record-rtd . k11172) (record-field-mutable? . k11171) (delete-file . k11170) (file-exists? . k11169) (vector-sort! . k11168) (vector-sort . k11167) (list-sort . k11166) (symbol-hash . k11165) (string-ci-hash . k11164) (string-hash . k11163) (equal-hash . k11162) (hashtable-equivalence-function . k11161) (make-hashtable . k11160) (hashtable-hash-function . k11159) (make-eqv-hashtable . k11158) (make-eq-hashtable . k11157) (hashtable? . k11156) (hashtable-update! . k11155) (hashtable-size . k11154) (hashtable-set! . k11153) (hashtable-ref . k11152) (hashtable-mutable? . k11151) (hashtable-keys . k11150) (hashtable-entries . k11149) (hashtable-delete! . k11148) (hashtable-copy . k11147) (hashtable-contains? . k11146) (hashtable-clear! . k11145) (call-with-output-file . k11144) (call-with-input-file . k11143) (write-char . k11142) (write . k11141) (with-output-to-file . k11140) (with-input-from-file . k11139) (read-char . k11138) (read . k11137) (peek-char . k11136) (open-output-file . k11135) (open-input-file . k11134) (newline . k11133) (display . k11132) (close-output-port . k11131) (close-input-port . k11130) (eof-object? . k11129) (eof-object . k11128) (current-error-port . k11127) (current-output-port . k11126) (current-input-port . k11125) (output-port? . k11124) (input-port? . k11123) (utf-8-codec . k11122) (utf-16-codec . k11121) (transcoder-error-handling-mode . k11120) (transcoder-eol-style . k11119) (transcoder-codec . k11118) (transcoded-port . k11117) (textual-port? . k11116) (string->bytevector . k11115) (standard-output-port . k11114) (standard-input-port . k11113) (standard-error-port . k11112) (set-port-position! . k11111) (put-u8 . k11110) (put-string . k11109) (put-datum . k11108) (put-char . k11107) (put-bytevector . k11106) (port? . k11105) (port-transcoder . k11104) (port-position . k11103) (port-has-set-port-position!? . k11102) (port-has-port-position? . k11101) (port-eof? . k11100) (output-port-buffer-mode . k11099) (open-string-output-port . k11098) (open-string-input-port . k11097) (open-file-output-port . k11096) (open-file-input/output-port . k11095) (open-file-input-port . k11094) (open-bytevector-output-port . k11093) (open-bytevector-input-port . k11092) (native-transcoder . k11091) (native-eol-style . k11090) (make-transcoder . k11089) (latin-1-codec . k11088) (make-i/o-write-error . k9808) (make-i/o-read-error . k9787) (make-i/o-port-error . k9966) (make-i/o-invalid-position-error . k9830) (make-i/o-filename-error . k9856) (make-i/o-file-protection-error . k9881) (make-i/o-file-is-read-only-error . k9902) (make-i/o-file-does-not-exist-error . k9944) (make-i/o-file-already-exists-error . k9923) (make-i/o-error . k9766) (make-i/o-encoding-error . k10013) (make-i/o-decoding-error . k9991) (make-custom-textual-output-port . k11087) (make-custom-textual-input/output-port . k11086) (make-custom-textual-input-port . k11085) (make-custom-binary-output-port . k11084) (make-custom-binary-input/output-port . k11083) (make-custom-binary-input-port . k11082) (make-bytevector . k11081) (lookahead-u8 . k11080) (lookahead-char . k11079) (i/o-write-error? . k9810) (i/o-read-error? . k9789) (i/o-port-error? . k9970) (i/o-invalid-position-error? . k9834) (i/o-filename-error? . k9860) (i/o-file-protection-error? . k9883) (i/o-file-is-read-only-error? . k9904) (i/o-file-does-not-exist-error? . k9946) (i/o-file-already-exists-error? . k9925) (i/o-error? . k9768) (i/o-error-position . k9836) (i/o-error-port . k9972) (i/o-error-filename . k9862) (i/o-encoding-error? . k10017) (i/o-encoding-error-char . k10019) (i/o-decoding-error? . k9993) (get-u8 . k11078) (get-string-n! . k11077) (get-string-n . k11076) (get-string-all . k11075) (get-line . k11074) (get-datum . k11073) (get-char . k11072) (get-bytevector-some . k11071) (get-bytevector-n! . k11070) (get-bytevector-n . k11069) (get-bytevector-all . k11068) (flush-output-port . k11067) (close-port . k11066) (exit . k11058) (command-line . k10328) (remove . k11053) (remv . k11052) (remp . k11051) (remq . k11050) (partition . k11049) (memv . k11048) (memq . k11047) (memp . k11046) (member . k11045) (exists . k11044) (for-all . k11043) (fold-right . k11042) (fold-left . k11041) (find . k11040) (filter . k11039) (cons* . k11038) (assv . k11037) (assq . k11036) (assp . k11035) (assoc . k11034) (call-with-string-output-port . k11033) (call-with-port . k11032) (call-with-bytevector-output-port . k11031) (bytevector->string . k11030) (buffer-mode? . k11029) (binary-port? . k11028) (with-exception-handler . k11027) (raise-continuable . k11026) (raise . k11025) (make-enumeration . k11024) (enum-set=? . k11023) (enum-set-universe . k11022) (enum-set-union . k11021) (enum-set-subset? . k11020) (enum-set-projection . k11019) (enum-set-member? . k11018) (enum-set-intersection . k11017) (enum-set-indexer . k11016) (enum-set-difference . k11015) (enum-set-constructor . k11014) (enum-set-complement . k11013) (enum-set->list . k11012) (who-condition? . k9630) (warning? . k9496) (violation? . k9559) (undefined-violation? . k9747) (syntax-violation? . k9722) (syntax-violation-subform . k9726) (syntax-violation-form . k9724) (syntax-violation . k2995) (simple-conditions . k11011) (serious-condition? . k9517) (non-continuable-violation? . k9653) (message-condition? . k9473) (make-who-condition . k9626) (make-warning . k9494) (make-violation . k9557) (make-undefined-violation . k9745) (make-syntax-violation . k9716) (make-serious-condition . k9515) (make-non-continuable-violation . k9651) (make-message-condition . k9469) (make-lexical-violation . k9693) (make-irritants-condition . k9600) (make-implementation-restriction-violation . k9672) (make-error . k9536) (make-assertion-violation . k9578) (lexical-violation? . k9695) (irritants-condition? . k9604) (implementation-restriction-violation? . k9674) (error? . k9538) (condition-who . k9632) (condition-predicate . k11010) (condition-message . k9475) (condition-irritants . k9606) (condition-accessor . k11009) (condition . k11008) (assertion-violation? . k9580) (condition? . k11007) (utf32->string . k11006) (utf16->string . k11005) (utf8->string . k11004) (uint-list->bytevector . k11003) (u8-list->bytevector . k11002) (string->utf8 . k11001) (string->utf32 . k11000) (string->utf16 . k10999) (sint-list->bytevector . k10998) (native-endianness . k10997) (bytevector? . k10996) (bytevector=? . k10995) (bytevector-uint-set! . k10994) (bytevector-uint-ref . k10993) (bytevector-u8-set! . k10992) (bytevector-u8-ref . k10991) (bytevector-u64-set! . k10990) (bytevector-u64-ref . k10989) (bytevector-u64-native-set! . k10988) (bytevector-u64-native-ref . k10987) (bytevector-u32-set! . k10986) (bytevector-u32-ref . k10985) (bytevector-u32-native-set! . k10984) (bytevector-u32-native-ref . k10983) (bytevector-u16-set! . k10982) (bytevector-u16-ref . k10981) (bytevector-u16-native-set! . k10980) (bytevector-u16-native-ref . k10979) (bytevector-sint-set! . k10978) (bytevector-sint-ref . k10977) (bytevector-s8-set! . k10976) (bytevector-s8-ref . k10975) (bytevector-s64-set! . k10974) (bytevector-s64-ref . k10973) (bytevector-s64-native-set! . k10972) (bytevector-s64-native-ref . k10971) (bytevector-s32-set! . k10970) (bytevector-s32-ref . k10969) (bytevector-s32-native-set! . k10968) (bytevector-s32-native-ref . k10967) (bytevector-s16-set! . k10966) (bytevector-s16-ref . k10965) (bytevector-s16-native-set! . k10964) (bytevector-s16-native-ref . k10963) (bytevector-length . k10962) (bytevector-ieee-single-ref . k10961) (bytevector-ieee-single-set! . k10960) (bytevector-ieee-single-native-set! . k10959) (bytevector-ieee-single-native-ref . k10958) (bytevector-ieee-double-set! . k10957) (bytevector-ieee-double-ref . k10956) (bytevector-ieee-double-native-set! . k10955) (bytevector-ieee-double-native-ref . k10954) (bytevector-fill! . k10953) (bytevector-copy! . k10952) (bytevector-copy . k10951) (bytevector->uint-list . k10950) (bytevector->u8-list . k10949) (bytevector->sint-list . k10948) (no-nans-violation? . k10061) (no-infinities-violation? . k10040) (make-no-nans-violation . k10059) (make-no-infinities-violation . k10038) (real->flonum . k10947) (flzero? . k10946) (fltruncate . k10945) (fltan . k10944) (flsqrt . k10943) (flsin . k10942) (flround . k10941) (flpositive? . k10940) (flonum? . k10939) (flodd? . k10938) (flnumerator . k10937) (flnegative? . k10936) (flnan? . k10935) (flmod0 . k10934) (flmod . k10933) (flmin . k10932) (flmax . k10931) (fllog . k10930) (flinteger? . k10929) (flinfinite? . k10928) (flfloor . k10927) (flfinite? . k10926) (flexpt . k10925) (flexp . k10924) (fleven? . k10923) (fldiv0-and-mod0 . k10922) (fldiv0 . k10921) (fldiv-and-mod . k10920) (fldiv . k10919) (fldenominator . k10918) (flcos . k10917) (flceiling . k10916) (flatan . k10915) (flasin . k10914) (flacos . k10913) (flabs . k10912) (fl>? . k10911) (fl>=? . k10910) (fl=? . k10909) (fl<? . k10908) (fl<=? . k10907) (fl/ . k10906) (fl- . k10905) (fl+ . k10904) (fl* . k10903) (fixnum->flonum . k10902) (fxzero? . k10901) (fxxor . k10900) (fxrotate-bit-field . k10899) (fxreverse-bit-field . k10898) (fxpositive? . k10897) (fxodd? . k10896) (fxnot . k10895) (fxnegative? . k10894) (fxmod0 . k10893) (fxmod . k10892) (fxmin . k10891) (fxmax . k10890) (fxlength . k10889) (fxior . k10888) (fxif . k10887) (fxfirst-bit-set . k10886) (fxeven? . k10885) (fxdiv0-and-mod0 . k10884) (fxdiv0 . k10883) (fxdiv-and-mod . k10882) (fxdiv . k10881) (fxcopy-bit-field . k10880) (fxcopy-bit . k10879) (fxbit-set? . k10878) (fxbit-field . k10877) (fxbit-count . k10876) (fxarithmetic-shift-right . k10875) (fxarithmetic-shift-left . k10874) (fxarithmetic-shift . k10873) (fxand . k10872) (fx>? . k10871) (fx>=? . k10870) (fx=? . k10869) (fx<? . k10868) (fx<=? . k10867) (fx-/carry . k10866) (fx- . k10865) (fx+/carry . k10864) (fx+ . k10863) (fx*/carry . k10862) (fx* . k10861) (greatest-fixnum . k10860) (least-fixnum . k10859) (fixnum-width . k10858) (fixnum? . k10857) (bitwise-rotate-bit-field . k10856) (bitwise-reverse-bit-field . k10855) (bitwise-length . k10854) (bitwise-if . k10853) (bitwise-first-bit-set . k10852) (bitwise-copy-bit-field . k10851) (bitwise-copy-bit . k10850) (bitwise-bit-set? . k10849) (bitwise-bit-field . k10848) (bitwise-bit-count . k10847) (bitwise-xor . k10846) (bitwise-ior . k10845) (bitwise-and . k10844) (bitwise-not . k10843) (bitwise-arithmetic-shift-right . k10842) (bitwise-arithmetic-shift-left . k10841) (bitwise-arithmetic-shift . k10840) (zero? . k10839) (vector? . k10838) (vector-set! . k10837) (vector-ref . k10836) (vector-map . k10835) (vector-length . k10834) (vector-for-each . k10833) (vector-fill! . k10832) (vector->list . k10831) (vector . k10830) (values . k10829) (truncate . k10828) (tan . k10827) (symbol? . k10826) (symbol=? . k10825) (symbol->string . k10824) (substring . k10823) (string? . k10822) (string>? . k10821) (string>=? . k10820) (string=? . k10819) (string<? . k10818) (string<=? . k10817) (string-ref . k10816) (string-length . k10815) (string-for-each . k10814) (string-copy . k10813) (string-append . k10812) (string->symbol . k10811) (string->number . k10810) (string->list . k10809) (string . k10808) (sqrt . k10807) (sin . k10806) (round . k10805) (reverse . k10804) (real? . k10803) (real-valued? . k10802) (real-part . k10801) (rationalize . k10800) (rational? . k10799) (rational-valued? . k10798) (procedure? . k10797) (positive? . k10796) (pair? . k10795) (odd? . k10794) (numerator . k10793) (number? . k10792) (number->string . k10791) (null? . k10790) (not . k10789) (negative? . k10788) (nan? . k10787) (min . k10786) (max . k10785) (map . k10784) (make-vector . k10783) (make-string . k10782) (make-rectangular . k10781) (make-polar . k10780) (magnitude . k10779) (log . k10778) (list? . k10777) (list-tail . k10776) (list-ref . k10775) (list->vector . k10774) (list->string . k10773) (list . k10772) (length . k10771) (lcm . k10770) (integer? . k10769) (integer-valued? . k10768) (integer->char . k10767) (infinite? . k10766) (inexact? . k10765) (inexact . k10764) (imag-part . k10763) (gcd . k10762) (for-each . k10761) (floor . k10760) (finite? . k10759) (expt . k10758) (exp . k10757) (exact? . k10756) (exact-integer-sqrt . k10755) (exact . k10754) (even? . k10753) (error . k10752) (eqv? . k10751) (equal? . k10750) (eq? . k10749) (dynamic-wind . k10748) (div0-and-mod0 . k10747) (mod0 . k10746) (div0 . k10745) (div-and-mod . k10744) (mod . k10743) (div . k10742) (denominator . k10741) (cos . k10740) (cons . k10739) (complex? . k10738) (char? . k10737) (char>? . k10736) (char>=? . k10735) (char=? . k10734) (char<? . k10733) (char<=? . k10732) (char->integer . k10731) (ceiling . k10730) (call-with-values . k10729) (call/cc . k10728) (call-with-current-continuation . k10727) (cddddr . k10726) (cdddar . k10725) (cddadr . k10724) (cddaar . k10723) (cdaddr . k10722) (cdadar . k10721) (cdaadr . k10720) (cdaaar . k10719) (cadddr . k10718) (caddar . k10717) (cadadr . k10716) (cadaar . k10715) (caaddr . k10714) (caadar . k10713) (caaadr . k10712) (caaaar . k10711) (cdddr . k10710) (cddar . k10709) (cdadr . k10708) (cdaar . k10707) (caddr . k10706) (cadar . k10705) (caadr . k10704) (caaar . k10703) (cddr . k10702) (cdar . k10701) (cadr . k10700) (caar . k10699) (cdr . k10698) (car . k10697) (boolean? . k10696) (boolean=? . k10695) (atan . k10694) (assertion-violation . k10693) (asin . k10692) (apply . k10691) (append . k10690) (angle . k10689) (acos . k10688) (abs . k10687) (/ . k10686) (* . k10685) (- . k10684) (+ . k10683) (>= . k10682) (> . k10681) (= . k10680) (<= . k10679) (< . k10678) (&no-nans . k10676) (&no-infinities . k10675) (&i/o-encoding . k10674) (&i/o-decoding . k10673) (&i/o-port . k10672) (&i/o-file-does-not-exist . k10671) (&i/o-file-already-exists . k10670) (&i/o-file-is-read-only . k10669) (&i/o-file-protection . k10668) (&i/o-filename . k10667) (&i/o-invalid-position . k10666) (&i/o-write . k10665) (&i/o-read . k10664) (&i/o . k10663) (&undefined . k10662) (&syntax . k10661) (&lexical . k10660) (&implementation-restriction . k10659) (&non-continuable . k10658) (&who . k10657) (&irritants . k10656) (&assertion . k10655) (&violation . k10654) (&error . k10653) (&serious . k10652) (&warning . k10651) (&message . k10650) (&condition . k10649) (define-condition-type . k10648) (define-enumeration . k10647) (define-record-type . k10646) (parent-rtd . k10645) (nongenerative . k10644) (opaque . k10643) (sealed . k10642) (protocol . k10641) (parent . k10640) (immutable . k10639) (mutable . k10638) (fields . k10637) (error-handling-mode . k10636) (file-options . k10635) (buffer-mode . k10634) (eol-style . k10633) (guard . k10632) (unsyntax-splicing . k10629) (unsyntax . k10628) (unquote-splicing . k10627) (unquote . k10626) (_ . k10625) (else . k10624) (=> . k10623) (... . k10622) (assert . k10621) (endianness . k10620) (do . k10617) (cond . k10616) (let* . k10615) (let . k10614) (let*-values . k10613) (let-values . k10612) (identifier-syntax . k10611) (with-syntax . k10610) (quasisyntax . k10609) (quasiquote . k10608) (syntax-rules . k10607) (record-constructor-descriptor . k10604) (record-type-descriptor . k10603) (case . k10602) (unless . k10600) (when . k10599) (or . k10598) (and . k10597) (if . k10596) (letrec* . k10595) (letrec . k10594) (case-lambda . k10592) (lambda . k10591) (syntax . k10590) (syntax-case . k10589) (quote . k10588) (letrec-syntax . k10586) (let-syntax . k10585) (set! . k10584) (begin . k10582) (define-syntax . k10580) (define . k10579)) '() values values '#f '#f '#t '#f) (k1790@k1443@install-library 'k11292 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . k2959) (quotient . k11065) (null-environment . k2957) (remainder . k11064) (modulo . k11063) (inexact->exact . k11062) (force . k11061) (exact->inexact . k11060) (make-promise . k11059) (delay . k10619)) '() values values '#f '#f '#t '#f) (k1790@k1443@install-library 'k11293 '(rnrs control) '(6) '() '() '() '((do . k10617) (unless . k10600) (when . k10599) (case-lambda . k10592)) '() values values '#f '#f '#t '#f) (k1790@k1443@install-library 'k11294 '(rnrs eval) '(6) '() '() '() '((eval . k2963) (environment . k2955)) '() values values '#f '#f '#t '#f) (k1790@k1443@install-library 'k11295 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . k11055) (set-car! . k11054)) '() values values '#f '#f '#t '#f) (k1790@k1443@install-library 'k11296 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . k11057) (string-set! . k11056)) '() values values '#f '#f '#t '#f) (k1790@k1443@install-library 'k11297 '(rnrs programs) '(6) '() '() '() '((exit . k11058) (command-line . k10328)) '() values values '#f '#f '#t '#f) (k1790@k1443@install-library 'k11298 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . k2321) (identifier? . k2997) (generate-temporaries . k2977) (free-identifier=? . k2979) (syntax->datum . k3001) (datum->syntax . k2999) (bound-identifier=? . k2981) (syntax-violation . k2995) (unsyntax-splicing . k10629) (unsyntax . k10628) (_ . k10625) (... . k10622) (with-syntax . k10610) (quasisyntax . k10609) (syntax . k10590) (syntax-case . k10589)) '() values values '#f '#f '#t '#f) (k1790@k1443@install-library 'k11299 '(rnrs files) '(6) '() '() '() '((delete-file . k11170) (file-exists? . k11169) (make-i/o-write-error . k9808) (make-i/o-read-error . k9787) (make-i/o-port-error . k9966) (make-i/o-invalid-position-error . k9830) (make-i/o-filename-error . k9856) (make-i/o-file-protection-error . k9881) (make-i/o-file-is-read-only-error . k9902) (make-i/o-file-does-not-exist-error . k9944) (make-i/o-file-already-exists-error . k9923) (make-i/o-error . k9766) (i/o-write-error? . k9810) (i/o-read-error? . k9789) (i/o-port-error? . k9970) (i/o-invalid-position-error? . k9834) (i/o-filename-error? . k9860) (i/o-file-protection-error? . k9883) (i/o-file-is-read-only-error? . k9904) (i/o-file-does-not-exist-error? . k9946) (i/o-file-already-exists-error? . k9925) (i/o-error? . k9768) (i/o-error-position . k9836) (i/o-error-port . k9972) (i/o-error-filename . k9862) (&i/o-port . k10672) (&i/o-file-does-not-exist . k10671) (&i/o-file-already-exists . k10670) (&i/o-file-is-read-only . k10669) (&i/o-file-protection . k10668) (&i/o-filename . k10667) (&i/o-invalid-position . k10666) (&i/o-write . k10665) (&i/o-read . k10664) (&i/o . k10663)) '() values values '#f '#f '#t '#f) (k1790@k1443@install-library 'k11300 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . k11168) (vector-sort . k11167) (list-sort . k11166)) '() values values '#f '#f '#t '#f) (k1790@k1443@install-library 'k11301 '(rnrs base) '(6) '() '() '() '((zero? . k10839) (vector? . k10838) (vector-set! . k10837) (vector-ref . k10836) (vector-map . k10835) (vector-length . k10834) (vector-for-each . k10833) (vector-fill! . k10832) (vector->list . k10831) (vector . k10830) (values . k10829) (truncate . k10828) (tan . k10827) (symbol? . k10826) (symbol=? . k10825) (symbol->string . k10824) (substring . k10823) (string? . k10822) (string>? . k10821) (string>=? . k10820) (string=? . k10819) (string<? . k10818) (string<=? . k10817) (string-ref . k10816) (string-length . k10815) (string-for-each . k10814) (string-copy . k10813) (string-append . k10812) (string->symbol . k10811) (string->number . k10810) (string->list . k10809) (string . k10808) (sqrt . k10807) (sin . k10806) (round . k10805) (reverse . k10804) (real? . k10803) (real-valued? . k10802) (real-part . k10801) (rationalize . k10800) (rational? . k10799) (rational-valued? . k10798) (procedure? . k10797) (positive? . k10796) (pair? . k10795) (odd? . k10794) (numerator . k10793) (number? . k10792) (number->string . k10791) (null? . k10790) (not . k10789) (negative? . k10788) (nan? . k10787) (min . k10786) (max . k10785) (map . k10784) (make-vector . k10783) (make-string . k10782) (make-rectangular . k10781) (make-polar . k10780) (magnitude . k10779) (log . k10778) (list? . k10777) (list-tail . k10776) (list-ref . k10775) (list->vector . k10774) (list->string . k10773) (list . k10772) (length . k10771) (lcm . k10770) (integer? . k10769) (integer-valued? . k10768) (integer->char . k10767) (infinite? . k10766) (inexact? . k10765) (inexact . k10764) (imag-part . k10763) (gcd . k10762) (for-each . k10761) (floor . k10760) (finite? . k10759) (expt . k10758) (exp . k10757) (exact? . k10756) (exact-integer-sqrt . k10755) (exact . k10754) (even? . k10753) (error . k10752) (eqv? . k10751) (equal? . k10750) (eq? . k10749) (dynamic-wind . k10748) (div0-and-mod0 . k10747) (mod0 . k10746) (div0 . k10745) (div-and-mod . k10744) (mod . k10743) (div . k10742) (denominator . k10741) (cos . k10740) (cons . k10739) (complex? . k10738) (char? . k10737) (char>? . k10736) (char>=? . k10735) (char=? . k10734) (char<? . k10733) (char<=? . k10732) (char->integer . k10731) (ceiling . k10730) (call-with-values . k10729) (call/cc . k10728) (call-with-current-continuation . k10727) (cddddr . k10726) (cdddar . k10725) (cddadr . k10724) (cddaar . k10723) (cdaddr . k10722) (cdadar . k10721) (cdaadr . k10720) (cdaaar . k10719) (cadddr . k10718) (caddar . k10717) (cadadr . k10716) (cadaar . k10715) (caaddr . k10714) (caadar . k10713) (caaadr . k10712) (caaaar . k10711) (cdddr . k10710) (cddar . k10709) (cdadr . k10708) (cdaar . k10707) (caddr . k10706) (cadar . k10705) (caadr . k10704) (caaar . k10703) (cddr . k10702) (cdar . k10701) (cadr . k10700) (caar . k10699) (cdr . k10698) (car . k10697) (boolean? . k10696) (boolean=? . k10695) (atan . k10694) (assertion-violation . k10693) (asin . k10692) (apply . k10691) (append . k10690) (angle . k10689) (acos . k10688) (abs . k10687) (/ . k10686) (* . k10685) (- . k10684) (+ . k10683) (>= . k10682) (> . k10681) (= . k10680) (<= . k10679) (< . k10678) (unquote-splicing . k10627) (unquote . k10626) (_ . k10625) (else . k10624) (=> . k10623) (... . k10622) (assert . k10621) (cond . k10616) (let* . k10615) (let . k10614) (let*-values . k10613) (let-values . k10612) (identifier-syntax . k10611) (quasiquote . k10608) (syntax-rules . k10607) (case . k10602) (or . k10598) (and . k10597) (if . k10596) (letrec* . k10595) (letrec . k10594) (lambda . k10591) (quote . k10588) (letrec-syntax . k10586) (let-syntax . k10585) (set! . k10584) (begin . k10582) (define-syntax . k10580) (define . k10579)) '() values values '#f '#f '#t '#f) (k1790@k1443@install-library 'k11302 '(rnrs lists) '(6) '() '() '() '((remove . k11053) (remv . k11052) (remp . k11051) (remq . k11050) (partition . k11049) (memv . k11048) (memq . k11047) (memp . k11046) (member . k11045) (exists . k11044) (for-all . k11043) (fold-right . k11042) (fold-left . k11041) (find . k11040) (filter . k11039) (cons* . k11038) (assv . k11037) (assq . k11036) (assp . k11035) (assoc . k11034)) '() values values '#f '#f '#t '#f) (k1790@k1443@install-library 'k11303 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . k11144) (call-with-input-file . k11143) (write-char . k11142) (write . k11141) (with-output-to-file . k11140) (with-input-from-file . k11139) (read-char . k11138) (read . k11137) (peek-char . k11136) (open-output-file . k11135) (open-input-file . k11134) (newline . k11133) (display . k11132) (close-output-port . k11131) (close-input-port . k11130) (eof-object? . k11129) (eof-object . k11128) (current-error-port . k11127) (current-output-port . k11126) (current-input-port . k11125) (output-port? . k11124) (input-port? . k11123) (make-i/o-write-error . k9808) (make-i/o-read-error . k9787) (make-i/o-port-error . k9966) (make-i/o-invalid-position-error . k9830) (make-i/o-filename-error . k9856) (make-i/o-file-protection-error . k9881) (make-i/o-file-is-read-only-error . k9902) (make-i/o-file-does-not-exist-error . k9944) (make-i/o-file-already-exists-error . k9923) (make-i/o-error . k9766) (i/o-write-error? . k9810) (i/o-read-error? . k9789) (i/o-port-error? . k9970) (i/o-invalid-position-error? . k9834) (i/o-filename-error? . k9860) (i/o-file-protection-error? . k9883) (i/o-file-is-read-only-error? . k9904) (i/o-file-does-not-exist-error? . k9946) (i/o-file-already-exists-error? . k9925) (i/o-error? . k9768) (i/o-error-position . k9836) (i/o-error-port . k9972) (i/o-error-filename . k9862) (&i/o-port . k10672) (&i/o-file-does-not-exist . k10671) (&i/o-file-already-exists . k10670) (&i/o-file-is-read-only . k10669) (&i/o-file-protection . k10668) (&i/o-filename . k10667) (&i/o-invalid-position . k10666) (&i/o-write . k10665) (&i/o-read . k10664) (&i/o . k10663)) '() values values '#f '#f '#t '#f) (k1790@k1443@install-library 'k11304 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . k11081) (utf32->string . k11006) (utf16->string . k11005) (utf8->string . k11004) (uint-list->bytevector . k11003) (u8-list->bytevector . k11002) (string->utf8 . k11001) (string->utf32 . k11000) (string->utf16 . k10999) (sint-list->bytevector . k10998) (native-endianness . k10997) (bytevector? . k10996) (bytevector=? . k10995) (bytevector-uint-set! . k10994) (bytevector-uint-ref . k10993) (bytevector-u8-set! . k10992) (bytevector-u8-ref . k10991) (bytevector-u64-set! . k10990) (bytevector-u64-ref . k10989) (bytevector-u64-native-set! . k10988) (bytevector-u64-native-ref . k10987) (bytevector-u32-set! . k10986) (bytevector-u32-ref . k10985) (bytevector-u32-native-set! . k10984) (bytevector-u32-native-ref . k10983) (bytevector-u16-set! . k10982) (bytevector-u16-ref . k10981) (bytevector-u16-native-set! . k10980) (bytevector-u16-native-ref . k10979) (bytevector-sint-set! . k10978) (bytevector-sint-ref . k10977) (bytevector-s8-set! . k10976) (bytevector-s8-ref . k10975) (bytevector-s64-set! . k10974) (bytevector-s64-ref . k10973) (bytevector-s64-native-set! . k10972) (bytevector-s64-native-ref . k10971) (bytevector-s32-set! . k10970) (bytevector-s32-ref . k10969) (bytevector-s32-native-set! . k10968) (bytevector-s32-native-ref . k10967) (bytevector-s16-set! . k10966) (bytevector-s16-ref . k10965) (bytevector-s16-native-set! . k10964) (bytevector-s16-native-ref . k10963) (bytevector-length . k10962) (bytevector-ieee-single-ref . k10961) (bytevector-ieee-single-set! . k10960) (bytevector-ieee-single-native-set! . k10959) (bytevector-ieee-single-native-ref . k10958) (bytevector-ieee-double-set! . k10957) (bytevector-ieee-double-ref . k10956) (bytevector-ieee-double-native-set! . k10955) (bytevector-ieee-double-native-ref . k10954) (bytevector-fill! . k10953) (bytevector-copy! . k10952) (bytevector-copy . k10951) (bytevector->uint-list . k10950) (bytevector->u8-list . k10949) (bytevector->sint-list . k10948) (endianness . k10620)) '() values values '#f '#f '#t '#f) (k1790@k1443@install-library 'k11305 '(rnrs unicode) '(6) '() '() '() '((string-upcase . k11216) (string-titlecase . k11215) (string-normalize-nfkd . k11214) (string-normalize-nfkc . k11213) (string-normalize-nfd . k11212) (string-normalize-nfc . k11211) (string-foldcase . k11210) (string-downcase . k11209) (string-ci>? . k11208) (string-ci>=? . k11207) (string-ci=? . k11206) (string-ci<? . k11205) (string-ci<=? . k11204) (char-whitespace? . k11203) (char-upper-case? . k11202) (char-title-case? . k11201) (char-numeric? . k11200) (char-lower-case? . k11199) (char-general-category . k11198) (char-upcase . k11197) (char-titlecase . k11196) (char-foldcase . k11195) (char-downcase . k11194) (char-ci>? . k11193) (char-ci>=? . k11192) (char-ci=? . k11191) (char-ci<? . k11190) (char-ci<=? . k11189) (char-alphabetic? . k11188)) '() values values '#f '#f '#t '#f) (k1790@k1443@install-library 'k11306 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . k11027) (raise-continuable . k11026) (raise . k11025) (guard . k10632) (else . k10624) (=> . k10623)) '() values values '#f '#f '#t '#f) (k1790@k1443@install-library 'k11307 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . k10856) (bitwise-reverse-bit-field . k10855) (bitwise-length . k10854) (bitwise-if . k10853) (bitwise-first-bit-set . k10852) (bitwise-copy-bit-field . k10851) (bitwise-copy-bit . k10850) (bitwise-bit-set? . k10849) (bitwise-bit-field . k10848) (bitwise-bit-count . k10847) (bitwise-xor . k10846) (bitwise-ior . k10845) (bitwise-and . k10844) (bitwise-not . k10843) (bitwise-arithmetic-shift-right . k10842) (bitwise-arithmetic-shift-left . k10841) (bitwise-arithmetic-shift . k10840)) '() values values '#f '#f '#t '#f) (k1790@k1443@install-library 'k11308 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . k10901) (fxxor . k10900) (fxrotate-bit-field . k10899) (fxreverse-bit-field . k10898) (fxpositive? . k10897) (fxodd? . k10896) (fxnot . k10895) (fxnegative? . k10894) (fxmod0 . k10893) (fxmod . k10892) (fxmin . k10891) (fxmax . k10890) (fxlength . k10889) (fxior . k10888) (fxif . k10887) (fxfirst-bit-set . k10886) (fxeven? . k10885) (fxdiv0-and-mod0 . k10884) (fxdiv0 . k10883) (fxdiv-and-mod . k10882) (fxdiv . k10881) (fxcopy-bit-field . k10880) (fxcopy-bit . k10879) (fxbit-set? . k10878) (fxbit-field . k10877) (fxbit-count . k10876) (fxarithmetic-shift-right . k10875) (fxarithmetic-shift-left . k10874) (fxarithmetic-shift . k10873) (fxand . k10872) (fx>? . k10871) (fx>=? . k10870) (fx=? . k10869) (fx<? . k10868) (fx<=? . k10867) (fx-/carry . k10866) (fx- . k10865) (fx+/carry . k10864) (fx+ . k10863) (fx*/carry . k10862) (fx* . k10861) (greatest-fixnum . k10860) (least-fixnum . k10859) (fixnum-width . k10858) (fixnum? . k10857)) '() values values '#f '#f '#t '#f) (k1790@k1443@install-library 'k11309 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . k10061) (no-infinities-violation? . k10040) (make-no-nans-violation . k10059) (make-no-infinities-violation . k10038) (real->flonum . k10947) (flzero? . k10946) (fltruncate . k10945) (fltan . k10944) (flsqrt . k10943) (flsin . k10942) (flround . k10941) (flpositive? . k10940) (flonum? . k10939) (flodd? . k10938) (flnumerator . k10937) (flnegative? . k10936) (flnan? . k10935) (flmod0 . k10934) (flmod . k10933) (flmin . k10932) (flmax . k10931) (fllog . k10930) (flinteger? . k10929) (flinfinite? . k10928) (flfloor . k10927) (flfinite? . k10926) (flexpt . k10925) (flexp . k10924) (fleven? . k10923) (fldiv0-and-mod0 . k10922) (fldiv0 . k10921) (fldiv-and-mod . k10920) (fldiv . k10919) (fldenominator . k10918) (flcos . k10917) (flceiling . k10916) (flatan . k10915) (flasin . k10914) (flacos . k10913) (flabs . k10912) (fl>? . k10911) (fl>=? . k10910) (fl=? . k10909) (fl<? . k10908) (fl<=? . k10907) (fl/ . k10906) (fl- . k10905) (fl+ . k10904) (fl* . k10903) (fixnum->flonum . k10902) (&no-nans . k10676) (&no-infinities . k10675)) '() values values '#f '#f '#t '#f) (k1790@k1443@install-library 'k11310 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . k11165) (string-ci-hash . k11164) (string-hash . k11163) (equal-hash . k11162) (hashtable-equivalence-function . k11161) (make-hashtable . k11160) (hashtable-hash-function . k11159) (make-eqv-hashtable . k11158) (make-eq-hashtable . k11157) (hashtable? . k11156) (hashtable-update! . k11155) (hashtable-size . k11154) (hashtable-set! . k11153) (hashtable-ref . k11152) (hashtable-mutable? . k11151) (hashtable-keys . k11150) (hashtable-entries . k11149) (hashtable-delete! . k11148) (hashtable-copy . k11147) (hashtable-contains? . k11146) (hashtable-clear! . k11145)) '() values values '#f '#f '#t '#f) (k1790@k1443@install-library 'k11311 '(rnrs io ports) '(6) '() '() '() '((eof-object? . k11129) (eof-object . k11128) (current-error-port . k11127) (current-output-port . k11126) (current-input-port . k11125) (output-port? . k11124) (input-port? . k11123) (utf-8-codec . k11122) (utf-16-codec . k11121) (transcoder-error-handling-mode . k11120) (transcoder-eol-style . k11119) (transcoder-codec . k11118) (transcoded-port . k11117) (textual-port? . k11116) (string->bytevector . k11115) (standard-output-port . k11114) (standard-input-port . k11113) (standard-error-port . k11112) (set-port-position! . k11111) (put-u8 . k11110) (put-string . k11109) (put-datum . k11108) (put-char . k11107) (put-bytevector . k11106) (port? . k11105) (port-transcoder . k11104) (port-position . k11103) (port-has-set-port-position!? . k11102) (port-has-port-position? . k11101) (port-eof? . k11100) (output-port-buffer-mode . k11099) (open-string-output-port . k11098) (open-string-input-port . k11097) (open-file-output-port . k11096) (open-file-input/output-port . k11095) (open-file-input-port . k11094) (open-bytevector-output-port . k11093) (open-bytevector-input-port . k11092) (native-transcoder . k11091) (native-eol-style . k11090) (make-transcoder . k11089) (latin-1-codec . k11088) (make-i/o-write-error . k9808) (make-i/o-read-error . k9787) (make-i/o-port-error . k9966) (make-i/o-invalid-position-error . k9830) (make-i/o-filename-error . k9856) (make-i/o-file-protection-error . k9881) (make-i/o-file-is-read-only-error . k9902) (make-i/o-file-does-not-exist-error . k9944) (make-i/o-file-already-exists-error . k9923) (make-i/o-error . k9766) (make-i/o-encoding-error . k10013) (make-i/o-decoding-error . k9991) (make-custom-textual-output-port . k11087) (make-custom-textual-input/output-port . k11086) (make-custom-textual-input-port . k11085) (make-custom-binary-output-port . k11084) (make-custom-binary-input/output-port . k11083) (make-custom-binary-input-port . k11082) (lookahead-u8 . k11080) (lookahead-char . k11079) (i/o-write-error? . k9810) (i/o-read-error? . k9789) (i/o-port-error? . k9970) (i/o-invalid-position-error? . k9834) (i/o-filename-error? . k9860) (i/o-file-protection-error? . k9883) (i/o-file-is-read-only-error? . k9904) (i/o-file-does-not-exist-error? . k9946) (i/o-file-already-exists-error? . k9925) (i/o-error? . k9768) (i/o-error-position . k9836) (i/o-error-port . k9972) (i/o-error-filename . k9862) (i/o-encoding-error? . k10017) (i/o-encoding-error-char . k10019) (i/o-decoding-error? . k9993) (get-u8 . k11078) (get-string-n! . k11077) (get-string-n . k11076) (get-string-all . k11075) (get-line . k11074) (get-datum . k11073) (get-char . k11072) (get-bytevector-some . k11071) (get-bytevector-n! . k11070) (get-bytevector-n . k11069) (get-bytevector-all . k11068) (flush-output-port . k11067) (close-port . k11066) (call-with-string-output-port . k11033) (call-with-port . k11032) (call-with-bytevector-output-port . k11031) (bytevector->string . k11030) (buffer-mode? . k11029) (binary-port? . k11028) (&i/o-encoding . k10674) (&i/o-decoding . k10673) (&i/o-port . k10672) (&i/o-file-does-not-exist . k10671) (&i/o-file-already-exists . k10670) (&i/o-file-is-read-only . k10669) (&i/o-file-protection . k10668) (&i/o-filename . k10667) (&i/o-invalid-position . k10666) (&i/o-write . k10665) (&i/o-read . k10664) (&i/o . k10663) (error-handling-mode . k10636) (file-options . k10635) (buffer-mode . k10634) (eol-style . k10633)) '() values values '#f '#f '#t '#f) (k1790@k1443@install-library 'k11312 '(rnrs enums) '(6) '() '() '() '((make-enumeration . k11024) (enum-set=? . k11023) (enum-set-universe . k11022) (enum-set-union . k11021) (enum-set-subset? . k11020) (enum-set-projection . k11019) (enum-set-member? . k11018) (enum-set-intersection . k11017) (enum-set-indexer . k11016) (enum-set-difference . k11015) (enum-set-constructor . k11014) (enum-set-complement . k11013) (enum-set->list . k11012) (define-enumeration . k10647)) '() values values '#f '#f '#t '#f) (k1790@k1443@install-library 'k11313 '(rnrs conditions) '(6) '() '() '() '((who-condition? . k9630) (warning? . k9496) (violation? . k9559) (undefined-violation? . k9747) (syntax-violation? . k9722) (syntax-violation-subform . k9726) (syntax-violation-form . k9724) (syntax-violation . k2995) (simple-conditions . k11011) (serious-condition? . k9517) (non-continuable-violation? . k9653) (message-condition? . k9473) (make-who-condition . k9626) (make-warning . k9494) (make-violation . k9557) (make-undefined-violation . k9745) (make-syntax-violation . k9716) (make-serious-condition . k9515) (make-non-continuable-violation . k9651) (make-message-condition . k9469) (make-lexical-violation . k9693) (make-irritants-condition . k9600) (make-implementation-restriction-violation . k9672) (make-error . k9536) (make-assertion-violation . k9578) (lexical-violation? . k9695) (irritants-condition? . k9604) (implementation-restriction-violation? . k9674) (error? . k9538) (condition-who . k9632) (condition-predicate . k11010) (condition-message . k9475) (condition-irritants . k9606) (condition-accessor . k11009) (condition . k11008) (assertion-violation? . k9580) (condition? . k11007) (&undefined . k10662) (&syntax . k10661) (&lexical . k10660) (&implementation-restriction . k10659) (&non-continuable . k10658) (&who . k10657) (&irritants . k10656) (&assertion . k10655) (&violation . k10654) (&error . k10653) (&serious . k10652) (&warning . k10651) (&message . k10650) (&condition . k10649) (define-condition-type . k10648)) '() values values '#f '#f '#t '#f) (k1790@k1443@install-library 'k11314 '(rnrs records inspection) '(6) '() '() '() '((record? . k11180) (record-type-uid . k11179) (record-type-sealed? . k11178) (record-type-parent . k11177) (record-type-opaque? . k11176) (record-type-name . k11175) (record-type-generative? . k11174) (record-type-field-names . k11173) (record-rtd . k11172) (record-field-mutable? . k11171)) '() values values '#f '#f '#t '#f) (k1790@k1443@install-library 'k11315 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . k11187) (record-predicate . k11186) (record-mutator . k11185) (record-constructor . k11184) (record-accessor . k11183) (make-record-type-descriptor . k11182) (make-record-constructor-descriptor . k11181)) '() values values '#f '#f '#t '#f) (k1790@k1443@install-library 'k11316 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . k10646) (parent-rtd . k10645) (nongenerative . k10644) (opaque . k10643) (sealed . k10642) (protocol . k10641) (parent . k10640) (immutable . k10639) (mutable . k10638) (fields . k10637) (record-constructor-descriptor . k10604) (record-type-descriptor . k10603)) '() values values '#f '#f '#t '#f) (k1790@k1443@install-library 'k11317 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . k10065) (&no-nans-rtd . k10063) (&no-infinities-rcd . k10044) (&no-infinities-rtd . k10042) (&i/o-encoding-rcd . k10023) (&i/o-encoding-rtd . k10021) (&i/o-decoding-rcd . k9997) (&i/o-decoding-rtd . k9995) (&i/o-port-rcd . k9976) (&i/o-port-rtd . k9974) (&i/o-file-does-not-exist-rcd . k9950) (&i/o-file-does-not-exist-rtd . k9948) (&i/o-file-already-exists-rcd . k9929) (&i/o-file-already-exists-rtd . k9927) (&i/o-file-is-read-only-rcd . k9908) (&i/o-file-is-read-only-rtd . k9906) (&i/o-file-protection-rcd . k9887) (&i/o-file-protection-rtd . k9885) (&i/o-filename-rcd . k9866) (&i/o-filename-rtd . k9864) (&i/o-invalid-position-rcd . k9840) (&i/o-invalid-position-rtd . k9838) (&i/o-write-rcd . k9814) (&i/o-write-rtd . k9812) (&i/o-read-rcd . k9793) (&i/o-read-rtd . k9791) (&i/o-rcd . k9772) (&i/o-rtd . k9770) (&undefined-rcd . k9751) (&undefined-rtd . k9749) (&syntax-rcd . k9730) (&syntax-rtd . k9728) (&lexical-rcd . k9699) (&lexical-rtd . k9697) (&implementation-restriction-rcd . k9678) (&implementation-restriction-rtd . k9676) (&non-continuable-rcd . k9657) (&non-continuable-rtd . k9655) (&who-rcd . k9636) (&who-rtd . k9634) (&irritants-rcd . k9610) (&irritants-rtd . k9608) (&assertion-rcd . k9584) (&assertion-rtd . k9582) (&violation-rcd . k9563) (&violation-rtd . k9561) (&error-rcd . k9542) (&error-rtd . k9540) (&serious-rcd . k9521) (&serious-rtd . k9519) (&warning-rcd . k9500) (&warning-rtd . k9498) (&message-rcd . k9479) (&message-rtd . k9477) (&condition-rcd . k9388) (&condition-rtd . k9386) (syntax-error . k2991) (syntax-dispatch . k2762) (pretty-print . k11285) (eval-core . k11284) (set-symbol-value! . k11283) (symbol-value . k11282) (gensym . k913) (void . k11281) (load . k10334) (interaction-environment . k3007) (char-ready? . k11280) (regexp? . k11279) (read-line . k11278) (ungensym . k11277) (alist->eq-hash-table . k11276) (assoc-ref . k11275) (print . k11274) (format . k11273) (host-os . k11272) (library-path . k1410) (standard-library-path . k11271) (file-newer? . k11270) (stat-mtime . k11269) (write-to-file . k11268) (file->list . k11267) (file->string . k11266) (digit->integer . k11265) (call-with-string-input-port . k11264) (call-with-string-io . k11263) (string-split . k11262) (bytevector-for-each . k11261) (string->regexp . k11260) (rxmatch . k11259) (regexp-replace-all . k11258) (hashtable-for-each . k11257) (call-process . k11256) (local-tz-offset . k11255) (microseconds . k11254) (readdir . k11253) (set-current-directory! . k11252) (expand-path . k11251) (current-directory . k11250) (%spawn . k11249) (%waitpid . k11248) (%ffi-supported? . k11247) (%ffi-pointer-ref . k11246) (%ffi-pointer->string . k11245) (%ffi-call->string-or-zero . k11244) (%ffi-call->double . k11243) (%ffi-call->void* . k11242) (%ffi-call->void . k11241) (%ffi-call->int . k11240) (%ffi-lookup . k11239) (%ffi-open . k11238) (%fork . k11237) (%pipe . k11236) (p . k11235) (open-output-string . k11234) (get-output-string . k11233) (get-environment-variables . k11232) (get-environment-variable . k11231) (get-timeofday . k11230) (get-command-line . k11229) (sys-display . k11228) (mosh-executable-path . k11227) (make-file-options . k11226) (source-info . k11225) (make-compiler-instruction . k11224) (make-instruction . k11223) (set-source-info! . k11222) (bignum? . k11221) (fast-equal? . k11220) (fasl-read . k11219) (fasl-write . k11218) (time-usage . k11217) (make-parameter . k941) (string-upcase . k11216) (string-titlecase . k11215) (string-normalize-nfkd . k11214) (string-normalize-nfkc . k11213) (string-normalize-nfd . k11212) (string-normalize-nfc . k11211) (string-foldcase . k11210) (string-downcase . k11209) (string-ci>? . k11208) (string-ci>=? . k11207) (string-ci=? . k11206) (string-ci<? . k11205) (string-ci<=? . k11204) (char-whitespace? . k11203) (char-upper-case? . k11202) (char-title-case? . k11201) (char-numeric? . k11200) (char-lower-case? . k11199) (char-general-category . k11198) (char-upcase . k11197) (char-titlecase . k11196) (char-foldcase . k11195) (char-downcase . k11194) (char-ci>? . k11193) (char-ci>=? . k11192) (char-ci=? . k11191) (char-ci<? . k11190) (char-ci<=? . k11189) (char-alphabetic? . k11188) (make-variable-transformer . k2321) (identifier? . k2997) (generate-temporaries . k2977) (free-identifier=? . k2979) (syntax->datum . k3001) (datum->syntax . k2999) (bound-identifier=? . k2981) (record-type-descriptor? . k11187) (record-predicate . k11186) (record-mutator . k11185) (record-constructor . k11184) (record-accessor . k11183) (make-record-type-descriptor . k11182) (make-record-constructor-descriptor . k11181) (record? . k11180) (record-type-uid . k11179) (record-type-sealed? . k11178) (record-type-parent . k11177) (record-type-opaque? . k11176) (record-type-name . k11175) (record-type-generative? . k11174) (record-type-field-names . k11173) (record-rtd . k11172) (record-field-mutable? . k11171) (delete-file . k11170) (file-exists? . k11169) (vector-sort! . k11168) (vector-sort . k11167) (list-sort . k11166) (symbol-hash . k11165) (string-ci-hash . k11164) (string-hash . k11163) (equal-hash . k11162) (hashtable-equivalence-function . k11161) (make-hashtable . k11160) (hashtable-hash-function . k11159) (make-eqv-hashtable . k11158) (make-eq-hashtable . k11157) (hashtable? . k11156) (hashtable-update! . k11155) (hashtable-size . k11154) (hashtable-set! . k11153) (hashtable-ref . k11152) (hashtable-mutable? . k11151) (hashtable-keys . k11150) (hashtable-entries . k11149) (hashtable-delete! . k11148) (hashtable-copy . k11147) (hashtable-contains? . k11146) (hashtable-clear! . k11145) (call-with-output-file . k11144) (call-with-input-file . k11143) (write-char . k11142) (write . k11141) (with-output-to-file . k11140) (with-input-from-file . k11139) (read-char . k11138) (read . k11137) (peek-char . k11136) (open-output-file . k11135) (open-input-file . k11134) (newline . k11133) (display . k11132) (close-output-port . k11131) (close-input-port . k11130) (eof-object? . k11129) (eof-object . k11128) (current-error-port . k11127) (current-output-port . k11126) (current-input-port . k11125) (output-port? . k11124) (input-port? . k11123) (utf-8-codec . k11122) (utf-16-codec . k11121) (transcoder-error-handling-mode . k11120) (transcoder-eol-style . k11119) (transcoder-codec . k11118) (transcoded-port . k11117) (textual-port? . k11116) (string->bytevector . k11115) (standard-output-port . k11114) (standard-input-port . k11113) (standard-error-port . k11112) (set-port-position! . k11111) (put-u8 . k11110) (put-string . k11109) (put-datum . k11108) (put-char . k11107) (put-bytevector . k11106) (port? . k11105) (port-transcoder . k11104) (port-position . k11103) (port-has-set-port-position!? . k11102) (port-has-port-position? . k11101) (port-eof? . k11100) (output-port-buffer-mode . k11099) (open-string-output-port . k11098) (open-string-input-port . k11097) (open-file-output-port . k11096) (open-file-input/output-port . k11095) (open-file-input-port . k11094) (open-bytevector-output-port . k11093) (open-bytevector-input-port . k11092) (native-transcoder . k11091) (native-eol-style . k11090) (make-transcoder . k11089) (latin-1-codec . k11088) (make-i/o-write-error . k9808) (make-i/o-read-error . k9787) (make-i/o-port-error . k9966) (make-i/o-invalid-position-error . k9830) (make-i/o-filename-error . k9856) (make-i/o-file-protection-error . k9881) (make-i/o-file-is-read-only-error . k9902) (make-i/o-file-does-not-exist-error . k9944) (make-i/o-file-already-exists-error . k9923) (make-i/o-error . k9766) (make-i/o-encoding-error . k10013) (make-i/o-decoding-error . k9991) (make-custom-textual-output-port . k11087) (make-custom-textual-input/output-port . k11086) (make-custom-textual-input-port . k11085) (make-custom-binary-output-port . k11084) (make-custom-binary-input/output-port . k11083) (make-custom-binary-input-port . k11082) (make-bytevector . k11081) (lookahead-u8 . k11080) (lookahead-char . k11079) (i/o-write-error? . k9810) (i/o-read-error? . k9789) (i/o-port-error? . k9970) (i/o-invalid-position-error? . k9834) (i/o-filename-error? . k9860) (i/o-file-protection-error? . k9883) (i/o-file-is-read-only-error? . k9904) (i/o-file-does-not-exist-error? . k9946) (i/o-file-already-exists-error? . k9925) (i/o-error? . k9768) (i/o-error-position . k9836) (i/o-error-port . k9972) (i/o-error-filename . k9862) (i/o-encoding-error? . k10017) (i/o-encoding-error-char . k10019) (i/o-decoding-error? . k9993) (get-u8 . k11078) (get-string-n! . k11077) (get-string-n . k11076) (get-string-all . k11075) (get-line . k11074) (get-datum . k11073) (get-char . k11072) (get-bytevector-some . k11071) (get-bytevector-n! . k11070) (get-bytevector-n . k11069) (get-bytevector-all . k11068) (flush-output-port . k11067) (close-port . k11066) (scheme-report-environment . k2959) (quotient . k11065) (null-environment . k2957) (remainder . k11064) (modulo . k11063) (inexact->exact . k11062) (force . k11061) (exact->inexact . k11060) (make-promise . k11059) (exit . k11058) (command-line . k10328) (string-fill! . k11057) (string-set! . k11056) (set-cdr! . k11055) (set-car! . k11054) (remove . k11053) (remv . k11052) (remp . k11051) (remq . k11050) (partition . k11049) (memv . k11048) (memq . k11047) (memp . k11046) (member . k11045) (exists . k11044) (for-all . k11043) (fold-right . k11042) (fold-left . k11041) (find . k11040) (filter . k11039) (cons* . k11038) (assv . k11037) (assq . k11036) (assp . k11035) (assoc . k11034) (call-with-string-output-port . k11033) (call-with-port . k11032) (call-with-bytevector-output-port . k11031) (bytevector->string . k11030) (buffer-mode? . k11029) (binary-port? . k11028) (with-exception-handler . k11027) (raise-continuable . k11026) (raise . k11025) (eval . k2963) (environment . k2955) (make-enumeration . k11024) (enum-set=? . k11023) (enum-set-universe . k11022) (enum-set-union . k11021) (enum-set-subset? . k11020) (enum-set-projection . k11019) (enum-set-member? . k11018) (enum-set-intersection . k11017) (enum-set-indexer . k11016) (enum-set-difference . k11015) (enum-set-constructor . k11014) (enum-set-complement . k11013) (enum-set->list . k11012) (who-condition? . k9630) (warning? . k9496) (violation? . k9559) (undefined-violation? . k9747) (syntax-violation? . k9722) (syntax-violation-subform . k9726) (syntax-violation-form . k9724) (syntax-violation . k2995) (simple-conditions . k11011) (serious-condition? . k9517) (non-continuable-violation? . k9653) (message-condition? . k9473) (make-who-condition . k9626) (make-warning . k9494) (make-violation . k9557) (make-undefined-violation . k9745) (make-syntax-violation . k9716) (make-serious-condition . k9515) (make-non-continuable-violation . k9651) (make-message-condition . k9469) (make-lexical-violation . k9693) (make-irritants-condition . k9600) (make-implementation-restriction-violation . k9672) (make-error . k9536) (make-assertion-violation . k9578) (lexical-violation? . k9695) (irritants-condition? . k9604) (implementation-restriction-violation? . k9674) (error? . k9538) (condition-who . k9632) (condition-predicate . k11010) (condition-message . k9475) (condition-irritants . k9606) (condition-accessor . k11009) (condition . k11008) (assertion-violation? . k9580) (condition? . k11007) (utf32->string . k11006) (utf16->string . k11005) (utf8->string . k11004) (uint-list->bytevector . k11003) (u8-list->bytevector . k11002) (string->utf8 . k11001) (string->utf32 . k11000) (string->utf16 . k10999) (sint-list->bytevector . k10998) (native-endianness . k10997) (bytevector? . k10996) (bytevector=? . k10995) (bytevector-uint-set! . k10994) (bytevector-uint-ref . k10993) (bytevector-u8-set! . k10992) (bytevector-u8-ref . k10991) (bytevector-u64-set! . k10990) (bytevector-u64-ref . k10989) (bytevector-u64-native-set! . k10988) (bytevector-u64-native-ref . k10987) (bytevector-u32-set! . k10986) (bytevector-u32-ref . k10985) (bytevector-u32-native-set! . k10984) (bytevector-u32-native-ref . k10983) (bytevector-u16-set! . k10982) (bytevector-u16-ref . k10981) (bytevector-u16-native-set! . k10980) (bytevector-u16-native-ref . k10979) (bytevector-sint-set! . k10978) (bytevector-sint-ref . k10977) (bytevector-s8-set! . k10976) (bytevector-s8-ref . k10975) (bytevector-s64-set! . k10974) (bytevector-s64-ref . k10973) (bytevector-s64-native-set! . k10972) (bytevector-s64-native-ref . k10971) (bytevector-s32-set! . k10970) (bytevector-s32-ref . k10969) (bytevector-s32-native-set! . k10968) (bytevector-s32-native-ref . k10967) (bytevector-s16-set! . k10966) (bytevector-s16-ref . k10965) (bytevector-s16-native-set! . k10964) (bytevector-s16-native-ref . k10963) (bytevector-length . k10962) (bytevector-ieee-single-ref . k10961) (bytevector-ieee-single-set! . k10960) (bytevector-ieee-single-native-set! . k10959) (bytevector-ieee-single-native-ref . k10958) (bytevector-ieee-double-set! . k10957) (bytevector-ieee-double-ref . k10956) (bytevector-ieee-double-native-set! . k10955) (bytevector-ieee-double-native-ref . k10954) (bytevector-fill! . k10953) (bytevector-copy! . k10952) (bytevector-copy . k10951) (bytevector->uint-list . k10950) (bytevector->u8-list . k10949) (bytevector->sint-list . k10948) (no-nans-violation? . k10061) (no-infinities-violation? . k10040) (make-no-nans-violation . k10059) (make-no-infinities-violation . k10038) (real->flonum . k10947) (flzero? . k10946) (fltruncate . k10945) (fltan . k10944) (flsqrt . k10943) (flsin . k10942) (flround . k10941) (flpositive? . k10940) (flonum? . k10939) (flodd? . k10938) (flnumerator . k10937) (flnegative? . k10936) (flnan? . k10935) (flmod0 . k10934) (flmod . k10933) (flmin . k10932) (flmax . k10931) (fllog . k10930) (flinteger? . k10929) (flinfinite? . k10928) (flfloor . k10927) (flfinite? . k10926) (flexpt . k10925) (flexp . k10924) (fleven? . k10923) (fldiv0-and-mod0 . k10922) (fldiv0 . k10921) (fldiv-and-mod . k10920) (fldiv . k10919) (fldenominator . k10918) (flcos . k10917) (flceiling . k10916) (flatan . k10915) (flasin . k10914) (flacos . k10913) (flabs . k10912) (fl>? . k10911) (fl>=? . k10910) (fl=? . k10909) (fl<? . k10908) (fl<=? . k10907) (fl/ . k10906) (fl- . k10905) (fl+ . k10904) (fl* . k10903) (fixnum->flonum . k10902) (fxzero? . k10901) (fxxor . k10900) (fxrotate-bit-field . k10899) (fxreverse-bit-field . k10898) (fxpositive? . k10897) (fxodd? . k10896) (fxnot . k10895) (fxnegative? . k10894) (fxmod0 . k10893) (fxmod . k10892) (fxmin . k10891) (fxmax . k10890) (fxlength . k10889) (fxior . k10888) (fxif . k10887) (fxfirst-bit-set . k10886) (fxeven? . k10885) (fxdiv0-and-mod0 . k10884) (fxdiv0 . k10883) (fxdiv-and-mod . k10882) (fxdiv . k10881) (fxcopy-bit-field . k10880) (fxcopy-bit . k10879) (fxbit-set? . k10878) (fxbit-field . k10877) (fxbit-count . k10876) (fxarithmetic-shift-right . k10875) (fxarithmetic-shift-left . k10874) (fxarithmetic-shift . k10873) (fxand . k10872) (fx>? . k10871) (fx>=? . k10870) (fx=? . k10869) (fx<? . k10868) (fx<=? . k10867) (fx-/carry . k10866) (fx- . k10865) (fx+/carry . k10864) (fx+ . k10863) (fx*/carry . k10862) (fx* . k10861) (greatest-fixnum . k10860) (least-fixnum . k10859) (fixnum-width . k10858) (fixnum? . k10857) (bitwise-rotate-bit-field . k10856) (bitwise-reverse-bit-field . k10855) (bitwise-length . k10854) (bitwise-if . k10853) (bitwise-first-bit-set . k10852) (bitwise-copy-bit-field . k10851) (bitwise-copy-bit . k10850) (bitwise-bit-set? . k10849) (bitwise-bit-field . k10848) (bitwise-bit-count . k10847) (bitwise-xor . k10846) (bitwise-ior . k10845) (bitwise-and . k10844) (bitwise-not . k10843) (bitwise-arithmetic-shift-right . k10842) (bitwise-arithmetic-shift-left . k10841) (bitwise-arithmetic-shift . k10840) (zero? . k10839) (vector? . k10838) (vector-set! . k10837) (vector-ref . k10836) (vector-map . k10835) (vector-length . k10834) (vector-for-each . k10833) (vector-fill! . k10832) (vector->list . k10831) (vector . k10830) (values . k10829) (truncate . k10828) (tan . k10827) (symbol? . k10826) (symbol=? . k10825) (symbol->string . k10824) (substring . k10823) (string? . k10822) (string>? . k10821) (string>=? . k10820) (string=? . k10819) (string<? . k10818) (string<=? . k10817) (string-ref . k10816) (string-length . k10815) (string-for-each . k10814) (string-copy . k10813) (string-append . k10812) (string->symbol . k10811) (string->number . k10810) (string->list . k10809) (string . k10808) (sqrt . k10807) (sin . k10806) (round . k10805) (reverse . k10804) (real? . k10803) (real-valued? . k10802) (real-part . k10801) (rationalize . k10800) (rational? . k10799) (rational-valued? . k10798) (procedure? . k10797) (positive? . k10796) (pair? . k10795) (odd? . k10794) (numerator . k10793) (number? . k10792) (number->string . k10791) (null? . k10790) (not . k10789) (negative? . k10788) (nan? . k10787) (min . k10786) (max . k10785) (map . k10784) (make-vector . k10783) (make-string . k10782) (make-rectangular . k10781) (make-polar . k10780) (magnitude . k10779) (log . k10778) (list? . k10777) (list-tail . k10776) (list-ref . k10775) (list->vector . k10774) (list->string . k10773) (list . k10772) (length . k10771) (lcm . k10770) (integer? . k10769) (integer-valued? . k10768) (integer->char . k10767) (infinite? . k10766) (inexact? . k10765) (inexact . k10764) (imag-part . k10763) (gcd . k10762) (for-each . k10761) (floor . k10760) (finite? . k10759) (expt . k10758) (exp . k10757) (exact? . k10756) (exact-integer-sqrt . k10755) (exact . k10754) (even? . k10753) (error . k10752) (eqv? . k10751) (equal? . k10750) (eq? . k10749) (dynamic-wind . k10748) (div0-and-mod0 . k10747) (mod0 . k10746) (div0 . k10745) (div-and-mod . k10744) (mod . k10743) (div . k10742) (denominator . k10741) (cos . k10740) (cons . k10739) (complex? . k10738) (char? . k10737) (char>? . k10736) (char>=? . k10735) (char=? . k10734) (char<? . k10733) (char<=? . k10732) (char->integer . k10731) (ceiling . k10730) (call-with-values . k10729) (call/cc . k10728) (call-with-current-continuation . k10727) (cddddr . k10726) (cdddar . k10725) (cddadr . k10724) (cddaar . k10723) (cdaddr . k10722) (cdadar . k10721) (cdaadr . k10720) (cdaaar . k10719) (cadddr . k10718) (caddar . k10717) (cadadr . k10716) (cadaar . k10715) (caaddr . k10714) (caadar . k10713) (caaadr . k10712) (caaaar . k10711) (cdddr . k10710) (cddar . k10709) (cdadr . k10708) (cdaar . k10707) (caddr . k10706) (cadar . k10705) (caadr . k10704) (caaar . k10703) (cddr . k10702) (cdar . k10701) (cadr . k10700) (caar . k10699) (cdr . k10698) (car . k10697) (boolean? . k10696) (boolean=? . k10695) (atan . k10694) (assertion-violation . k10693) (assertion-error . k2989) (asin . k10692) (apply . k10691) (append . k10690) (angle . k10689) (acos . k10688) (abs . k10687) (/ . k10686) (* . k10685) (- . k10684) (+ . k10683) (>= . k10682) (> . k10681) (= . k10680) (<= . k10679) (< . k10678) (library . k10677) (&no-nans . k10676) (&no-infinities . k10675) (&i/o-encoding . k10674) (&i/o-decoding . k10673) (&i/o-port . k10672) (&i/o-file-does-not-exist . k10671) (&i/o-file-already-exists . k10670) (&i/o-file-is-read-only . k10669) (&i/o-file-protection . k10668) (&i/o-filename . k10667) (&i/o-invalid-position . k10666) (&i/o-write . k10665) (&i/o-read . k10664) (&i/o . k10663) (&undefined . k10662) (&syntax . k10661) (&lexical . k10660) (&implementation-restriction . k10659) (&non-continuable . k10658) (&who . k10657) (&irritants . k10656) (&assertion . k10655) (&violation . k10654) (&error . k10653) (&serious . k10652) (&warning . k10651) (&message . k10650) (&condition . k10649) (define-condition-type . k10648) (define-enumeration . k10647) (define-record-type . k10646) (parent-rtd . k10645) (nongenerative . k10644) (opaque . k10643) (sealed . k10642) (protocol . k10641) (parent . k10640) (immutable . k10639) (mutable . k10638) (fields . k10637) (error-handling-mode . k10636) (file-options . k10635) (buffer-mode . k10634) (eol-style . k10633) (guard . k10632) (trace-define . k10631) (trace-lambda . k10630) (unsyntax-splicing . k10629) (unsyntax . k10628) (unquote-splicing . k10627) (unquote . k10626) (_ . k10625) (else . k10624) (=> . k10623) (... . k10622) (assert . k10621) (endianness . k10620) (delay . k10619) (time . k10618) (do . k10617) (cond . k10616) (let* . k10615) (let . k10614) (let*-values . k10613) (let-values . k10612) (identifier-syntax . k10611) (with-syntax . k10610) (quasisyntax . k10609) (quasiquote . k10608) (syntax-rules . k10607) (include . k10606) (define-struct . k10605) (record-constructor-descriptor . k10604) (record-type-descriptor . k10603) (case . k10602) (parameterize . k10601) (unless . k10600) (when . k10599) (or . k10598) (and . k10597) (if . k10596) (letrec* . k10595) (letrec . k10594) (type-descriptor . k10593) (case-lambda . k10592) (lambda . k10591) (syntax . k10590) (syntax-case . k10589) (quote . k10588) (foreign-call . k10587) (letrec-syntax . k10586) (let-syntax . k10585) (set! . k10584) (import . k10583) (begin . k10582) (module . k10581) (define-syntax . k10580) (define . k10579)) '((k10065 core-prim . &no-nans-rcd) (k10063 core-prim . &no-nans-rtd) (k10044 core-prim . &no-infinities-rcd) (k10042 core-prim . &no-infinities-rtd) (k10023 core-prim . &i/o-encoding-rcd) (k10021 core-prim . &i/o-encoding-rtd) (k9997 core-prim . &i/o-decoding-rcd) (k9995 core-prim . &i/o-decoding-rtd) (k9976 core-prim . &i/o-port-rcd) (k9974 core-prim . &i/o-port-rtd) (k9950 core-prim . &i/o-file-does-not-exist-rcd) (k9948 core-prim . &i/o-file-does-not-exist-rtd) (k9929 core-prim . &i/o-file-already-exists-rcd) (k9927 core-prim . &i/o-file-already-exists-rtd) (k9908 core-prim . &i/o-file-is-read-only-rcd) (k9906 core-prim . &i/o-file-is-read-only-rtd) (k9887 core-prim . &i/o-file-protection-rcd) (k9885 core-prim . &i/o-file-protection-rtd) (k9866 core-prim . &i/o-filename-rcd) (k9864 core-prim . &i/o-filename-rtd) (k9840 core-prim . &i/o-invalid-position-rcd) (k9838 core-prim . &i/o-invalid-position-rtd) (k9814 core-prim . &i/o-write-rcd) (k9812 core-prim . &i/o-write-rtd) (k9793 core-prim . &i/o-read-rcd) (k9791 core-prim . &i/o-read-rtd) (k9772 core-prim . &i/o-rcd) (k9770 core-prim . &i/o-rtd) (k9751 core-prim . &undefined-rcd) (k9749 core-prim . &undefined-rtd) (k9730 core-prim . &syntax-rcd) (k9728 core-prim . &syntax-rtd) (k9699 core-prim . &lexical-rcd) (k9697 core-prim . &lexical-rtd) (k9678 core-prim . &implementation-restriction-rcd) (k9676 core-prim . &implementation-restriction-rtd) (k9657 core-prim . &non-continuable-rcd) (k9655 core-prim . &non-continuable-rtd) (k9636 core-prim . &who-rcd) (k9634 core-prim . &who-rtd) (k9610 core-prim . &irritants-rcd) (k9608 core-prim . &irritants-rtd) (k9584 core-prim . &assertion-rcd) (k9582 core-prim . &assertion-rtd) (k9563 core-prim . &violation-rcd) (k9561 core-prim . &violation-rtd) (k9542 core-prim . &error-rcd) (k9540 core-prim . &error-rtd) (k9521 core-prim . &serious-rcd) (k9519 core-prim . &serious-rtd) (k9500 core-prim . &warning-rcd) (k9498 core-prim . &warning-rtd) (k9479 core-prim . &message-rcd) (k9477 core-prim . &message-rtd) (k9388 core-prim . &condition-rcd) (k9386 core-prim . &condition-rtd) (k2991 core-prim . syntax-error) (k2762 core-prim . syntax-dispatch) (k11285 core-prim . pretty-print) (k11284 core-prim . eval-core) (k11283 core-prim . set-symbol-value!) (k11282 core-prim . symbol-value) (k913 core-prim . gensym) (k11281 core-prim . void) (k10334 core-prim . load) (k3007 core-prim . interaction-environment) (k11280 core-prim . char-ready?) (k11279 core-prim . regexp?) (k11278 core-prim . read-line) (k11277 core-prim . ungensym) (k11276 core-prim . alist->eq-hash-table) (k11275 core-prim . assoc-ref) (k11274 core-prim . print) (k11273 core-prim . format) (k11272 core-prim . host-os) (k1410 core-prim . library-path) (k11271 core-prim . standard-library-path) (k11270 core-prim . file-newer?) (k11269 core-prim . stat-mtime) (k11268 core-prim . write-to-file) (k11267 core-prim . file->list) (k11266 core-prim . file->string) (k11265 core-prim . digit->integer) (k11264 core-prim . call-with-string-input-port) (k11263 core-prim . call-with-string-io) (k11262 core-prim . string-split) (k11261 core-prim . bytevector-for-each) (k11260 core-prim . string->regexp) (k11259 core-prim . rxmatch) (k11258 core-prim . regexp-replace-all) (k11257 core-prim . hashtable-for-each) (k11256 core-prim . call-process) (k11255 core-prim . local-tz-offset) (k11254 core-prim . microseconds) (k11253 core-prim . readdir) (k11252 core-prim . set-current-directory!) (k11251 core-prim . expand-path) (k11250 core-prim . current-directory) (k11249 core-prim . %spawn) (k11248 core-prim . %waitpid) (k11247 core-prim . %ffi-supported?) (k11246 core-prim . %ffi-pointer-ref) (k11245 core-prim . %ffi-pointer->string) (k11244 core-prim . %ffi-call->string-or-zero) (k11243 core-prim . %ffi-call->double) (k11242 core-prim . %ffi-call->void*) (k11241 core-prim . %ffi-call->void) (k11240 core-prim . %ffi-call->int) (k11239 core-prim . %ffi-lookup) (k11238 core-prim . %ffi-open) (k11237 core-prim . %fork) (k11236 core-prim . %pipe) (k11235 core-prim . p) (k11234 core-prim . open-output-string) (k11233 core-prim . get-output-string) (k11232 core-prim . get-environment-variables) (k11231 core-prim . get-environment-variable) (k11230 core-prim . get-timeofday) (k11229 core-prim . get-command-line) (k11228 core-prim . sys-display) (k11227 core-prim . mosh-executable-path) (k11226 core-prim . make-file-options) (k11225 core-prim . source-info) (k11224 core-prim . make-compiler-instruction) (k11223 core-prim . make-instruction) (k11222 core-prim . set-source-info!) (k11221 core-prim . bignum?) (k11220 core-prim . fast-equal?) (k11219 core-prim . fasl-read) (k11218 core-prim . fasl-write) (k11217 core-prim . time-usage) (k941 core-prim . make-parameter) (k11216 core-prim . string-upcase) (k11215 core-prim . string-titlecase) (k11214 core-prim . string-normalize-nfkd) (k11213 core-prim . string-normalize-nfkc) (k11212 core-prim . string-normalize-nfd) (k11211 core-prim . string-normalize-nfc) (k11210 core-prim . string-foldcase) (k11209 core-prim . string-downcase) (k11208 core-prim . string-ci>?) (k11207 core-prim . string-ci>=?) (k11206 core-prim . string-ci=?) (k11205 core-prim . string-ci<?) (k11204 core-prim . string-ci<=?) (k11203 core-prim . char-whitespace?) (k11202 core-prim . char-upper-case?) (k11201 core-prim . char-title-case?) (k11200 core-prim . char-numeric?) (k11199 core-prim . char-lower-case?) (k11198 core-prim . char-general-category) (k11197 core-prim . char-upcase) (k11196 core-prim . char-titlecase) (k11195 core-prim . char-foldcase) (k11194 core-prim . char-downcase) (k11193 core-prim . char-ci>?) (k11192 core-prim . char-ci>=?) (k11191 core-prim . char-ci=?) (k11190 core-prim . char-ci<?) (k11189 core-prim . char-ci<=?) (k11188 core-prim . char-alphabetic?) (k2321 core-prim . make-variable-transformer) (k2997 core-prim . identifier?) (k2977 core-prim . generate-temporaries) (k2979 core-prim . free-identifier=?) (k3001 core-prim . syntax->datum) (k2999 core-prim . datum->syntax) (k2981 core-prim . bound-identifier=?) (k11187 core-prim . record-type-descriptor?) (k11186 core-prim . record-predicate) (k11185 core-prim . record-mutator) (k11184 core-prim . record-constructor) (k11183 core-prim . record-accessor) (k11182 core-prim . make-record-type-descriptor) (k11181 core-prim . make-record-constructor-descriptor) (k11180 core-prim . record?) (k11179 core-prim . record-type-uid) (k11178 core-prim . record-type-sealed?) (k11177 core-prim . record-type-parent) (k11176 core-prim . record-type-opaque?) (k11175 core-prim . record-type-name) (k11174 core-prim . record-type-generative?) (k11173 core-prim . record-type-field-names) (k11172 core-prim . record-rtd) (k11171 core-prim . record-field-mutable?) (k11170 core-prim . delete-file) (k11169 core-prim . file-exists?) (k11168 core-prim . vector-sort!) (k11167 core-prim . vector-sort) (k11166 core-prim . list-sort) (k11165 core-prim . symbol-hash) (k11164 core-prim . string-ci-hash) (k11163 core-prim . string-hash) (k11162 core-prim . equal-hash) (k11161 core-prim . hashtable-equivalence-function) (k11160 core-prim . make-hashtable) (k11159 core-prim . hashtable-hash-function) (k11158 core-prim . make-eqv-hashtable) (k11157 core-prim . make-eq-hashtable) (k11156 core-prim . hashtable?) (k11155 core-prim . hashtable-update!) (k11154 core-prim . hashtable-size) (k11153 core-prim . hashtable-set!) (k11152 core-prim . hashtable-ref) (k11151 core-prim . hashtable-mutable?) (k11150 core-prim . hashtable-keys) (k11149 core-prim . hashtable-entries) (k11148 core-prim . hashtable-delete!) (k11147 core-prim . hashtable-copy) (k11146 core-prim . hashtable-contains?) (k11145 core-prim . hashtable-clear!) (k11144 core-prim . call-with-output-file) (k11143 core-prim . call-with-input-file) (k11142 core-prim . write-char) (k11141 core-prim . write) (k11140 core-prim . with-output-to-file) (k11139 core-prim . with-input-from-file) (k11138 core-prim . read-char) (k11137 core-prim . read) (k11136 core-prim . peek-char) (k11135 core-prim . open-output-file) (k11134 core-prim . open-input-file) (k11133 core-prim . newline) (k11132 core-prim . display) (k11131 core-prim . close-output-port) (k11130 core-prim . close-input-port) (k11129 core-prim . eof-object?) (k11128 core-prim . eof-object) (k11127 core-prim . current-error-port) (k11126 core-prim . current-output-port) (k11125 core-prim . current-input-port) (k11124 core-prim . output-port?) (k11123 core-prim . input-port?) (k11122 core-prim . utf-8-codec) (k11121 core-prim . utf-16-codec) (k11120 core-prim . transcoder-error-handling-mode) (k11119 core-prim . transcoder-eol-style) (k11118 core-prim . transcoder-codec) (k11117 core-prim . transcoded-port) (k11116 core-prim . textual-port?) (k11115 core-prim . string->bytevector) (k11114 core-prim . standard-output-port) (k11113 core-prim . standard-input-port) (k11112 core-prim . standard-error-port) (k11111 core-prim . set-port-position!) (k11110 core-prim . put-u8) (k11109 core-prim . put-string) (k11108 core-prim . put-datum) (k11107 core-prim . put-char) (k11106 core-prim . put-bytevector) (k11105 core-prim . port?) (k11104 core-prim . port-transcoder) (k11103 core-prim . port-position) (k11102 core-prim . port-has-set-port-position!?) (k11101 core-prim . port-has-port-position?) (k11100 core-prim . port-eof?) (k11099 core-prim . output-port-buffer-mode) (k11098 core-prim . open-string-output-port) (k11097 core-prim . open-string-input-port) (k11096 core-prim . open-file-output-port) (k11095 core-prim . open-file-input/output-port) (k11094 core-prim . open-file-input-port) (k11093 core-prim . open-bytevector-output-port) (k11092 core-prim . open-bytevector-input-port) (k11091 core-prim . native-transcoder) (k11090 core-prim . native-eol-style) (k11089 core-prim . make-transcoder) (k11088 core-prim . latin-1-codec) (k9808 core-prim . make-i/o-write-error) (k9787 core-prim . make-i/o-read-error) (k9966 core-prim . make-i/o-port-error) (k9830 core-prim . make-i/o-invalid-position-error) (k9856 core-prim . make-i/o-filename-error) (k9881 core-prim . make-i/o-file-protection-error) (k9902 core-prim . make-i/o-file-is-read-only-error) (k9944 core-prim . make-i/o-file-does-not-exist-error) (k9923 core-prim . make-i/o-file-already-exists-error) (k9766 core-prim . make-i/o-error) (k10013 core-prim . make-i/o-encoding-error) (k9991 core-prim . make-i/o-decoding-error) (k11087 core-prim . make-custom-textual-output-port) (k11086 core-prim . make-custom-textual-input/output-port) (k11085 core-prim . make-custom-textual-input-port) (k11084 core-prim . make-custom-binary-output-port) (k11083 core-prim . make-custom-binary-input/output-port) (k11082 core-prim . make-custom-binary-input-port) (k11081 core-prim . make-bytevector) (k11080 core-prim . lookahead-u8) (k11079 core-prim . lookahead-char) (k9810 core-prim . i/o-write-error?) (k9789 core-prim . i/o-read-error?) (k9970 core-prim . i/o-port-error?) (k9834 core-prim . i/o-invalid-position-error?) (k9860 core-prim . i/o-filename-error?) (k9883 core-prim . i/o-file-protection-error?) (k9904 core-prim . i/o-file-is-read-only-error?) (k9946 core-prim . i/o-file-does-not-exist-error?) (k9925 core-prim . i/o-file-already-exists-error?) (k9768 core-prim . i/o-error?) (k9836 core-prim . i/o-error-position) (k9972 core-prim . i/o-error-port) (k9862 core-prim . i/o-error-filename) (k10017 core-prim . i/o-encoding-error?) (k10019 core-prim . i/o-encoding-error-char) (k9993 core-prim . i/o-decoding-error?) (k11078 core-prim . get-u8) (k11077 core-prim . get-string-n!) (k11076 core-prim . get-string-n) (k11075 core-prim . get-string-all) (k11074 core-prim . get-line) (k11073 core-prim . get-datum) (k11072 core-prim . get-char) (k11071 core-prim . get-bytevector-some) (k11070 core-prim . get-bytevector-n!) (k11069 core-prim . get-bytevector-n) (k11068 core-prim . get-bytevector-all) (k11067 core-prim . flush-output-port) (k11066 core-prim . close-port) (k2959 core-prim . scheme-report-environment) (k11065 core-prim . quotient) (k2957 core-prim . null-environment) (k11064 core-prim . remainder) (k11063 core-prim . modulo) (k11062 core-prim . inexact->exact) (k11061 core-prim . force) (k11060 core-prim . exact->inexact) (k11059 core-prim . make-promise) (k11058 core-prim . exit) (k10328 core-prim . command-line) (k11057 core-prim . string-fill!) (k11056 core-prim . string-set!) (k11055 core-prim . set-cdr!) (k11054 core-prim . set-car!) (k11053 core-prim . remove) (k11052 core-prim . remv) (k11051 core-prim . remp) (k11050 core-prim . remq) (k11049 core-prim . partition) (k11048 core-prim . memv) (k11047 core-prim . memq) (k11046 core-prim . memp) (k11045 core-prim . member) (k11044 core-prim . exists) (k11043 core-prim . for-all) (k11042 core-prim . fold-right) (k11041 core-prim . fold-left) (k11040 core-prim . find) (k11039 core-prim . filter) (k11038 core-prim . cons*) (k11037 core-prim . assv) (k11036 core-prim . assq) (k11035 core-prim . assp) (k11034 core-prim . assoc) (k11033 core-prim . call-with-string-output-port) (k11032 core-prim . call-with-port) (k11031 core-prim . call-with-bytevector-output-port) (k11030 core-prim . bytevector->string) (k11029 core-prim . buffer-mode?) (k11028 core-prim . binary-port?) (k11027 core-prim . with-exception-handler) (k11026 core-prim . raise-continuable) (k11025 core-prim . raise) (k2963 core-prim . eval) (k2955 core-prim . environment) (k11024 core-prim . make-enumeration) (k11023 core-prim . enum-set=?) (k11022 core-prim . enum-set-universe) (k11021 core-prim . enum-set-union) (k11020 core-prim . enum-set-subset?) (k11019 core-prim . enum-set-projection) (k11018 core-prim . enum-set-member?) (k11017 core-prim . enum-set-intersection) (k11016 core-prim . enum-set-indexer) (k11015 core-prim . enum-set-difference) (k11014 core-prim . enum-set-constructor) (k11013 core-prim . enum-set-complement) (k11012 core-prim . enum-set->list) (k9630 core-prim . who-condition?) (k9496 core-prim . warning?) (k9559 core-prim . violation?) (k9747 core-prim . undefined-violation?) (k9722 core-prim . syntax-violation?) (k9726 core-prim . syntax-violation-subform) (k9724 core-prim . syntax-violation-form) (k2995 core-prim . syntax-violation) (k11011 core-prim . simple-conditions) (k9517 core-prim . serious-condition?) (k9653 core-prim . non-continuable-violation?) (k9473 core-prim . message-condition?) (k9626 core-prim . make-who-condition) (k9494 core-prim . make-warning) (k9557 core-prim . make-violation) (k9745 core-prim . make-undefined-violation) (k9716 core-prim . make-syntax-violation) (k9515 core-prim . make-serious-condition) (k9651 core-prim . make-non-continuable-violation) (k9469 core-prim . make-message-condition) (k9693 core-prim . make-lexical-violation) (k9600 core-prim . make-irritants-condition) (k9672 core-prim . make-implementation-restriction-violation) (k9536 core-prim . make-error) (k9578 core-prim . make-assertion-violation) (k9695 core-prim . lexical-violation?) (k9604 core-prim . irritants-condition?) (k9674 core-prim . implementation-restriction-violation?) (k9538 core-prim . error?) (k9632 core-prim . condition-who) (k11010 core-prim . condition-predicate) (k9475 core-prim . condition-message) (k9606 core-prim . condition-irritants) (k11009 core-prim . condition-accessor) (k11008 core-prim . condition) (k9580 core-prim . assertion-violation?) (k11007 core-prim . condition?) (k11006 core-prim . utf32->string) (k11005 core-prim . utf16->string) (k11004 core-prim . utf8->string) (k11003 core-prim . uint-list->bytevector) (k11002 core-prim . u8-list->bytevector) (k11001 core-prim . string->utf8) (k11000 core-prim . string->utf32) (k10999 core-prim . string->utf16) (k10998 core-prim . sint-list->bytevector) (k10997 core-prim . native-endianness) (k10996 core-prim . bytevector?) (k10995 core-prim . bytevector=?) (k10994 core-prim . bytevector-uint-set!) (k10993 core-prim . bytevector-uint-ref) (k10992 core-prim . bytevector-u8-set!) (k10991 core-prim . bytevector-u8-ref) (k10990 core-prim . bytevector-u64-set!) (k10989 core-prim . bytevector-u64-ref) (k10988 core-prim . bytevector-u64-native-set!) (k10987 core-prim . bytevector-u64-native-ref) (k10986 core-prim . bytevector-u32-set!) (k10985 core-prim . bytevector-u32-ref) (k10984 core-prim . bytevector-u32-native-set!) (k10983 core-prim . bytevector-u32-native-ref) (k10982 core-prim . bytevector-u16-set!) (k10981 core-prim . bytevector-u16-ref) (k10980 core-prim . bytevector-u16-native-set!) (k10979 core-prim . bytevector-u16-native-ref) (k10978 core-prim . bytevector-sint-set!) (k10977 core-prim . bytevector-sint-ref) (k10976 core-prim . bytevector-s8-set!) (k10975 core-prim . bytevector-s8-ref) (k10974 core-prim . bytevector-s64-set!) (k10973 core-prim . bytevector-s64-ref) (k10972 core-prim . bytevector-s64-native-set!) (k10971 core-prim . bytevector-s64-native-ref) (k10970 core-prim . bytevector-s32-set!) (k10969 core-prim . bytevector-s32-ref) (k10968 core-prim . bytevector-s32-native-set!) (k10967 core-prim . bytevector-s32-native-ref) (k10966 core-prim . bytevector-s16-set!) (k10965 core-prim . bytevector-s16-ref) (k10964 core-prim . bytevector-s16-native-set!) (k10963 core-prim . bytevector-s16-native-ref) (k10962 core-prim . bytevector-length) (k10961 core-prim . bytevector-ieee-single-ref) (k10960 core-prim . bytevector-ieee-single-set!) (k10959 core-prim . bytevector-ieee-single-native-set!) (k10958 core-prim . bytevector-ieee-single-native-ref) (k10957 core-prim . bytevector-ieee-double-set!) (k10956 core-prim . bytevector-ieee-double-ref) (k10955 core-prim . bytevector-ieee-double-native-set!) (k10954 core-prim . bytevector-ieee-double-native-ref) (k10953 core-prim . bytevector-fill!) (k10952 core-prim . bytevector-copy!) (k10951 core-prim . bytevector-copy) (k10950 core-prim . bytevector->uint-list) (k10949 core-prim . bytevector->u8-list) (k10948 core-prim . bytevector->sint-list) (k10061 core-prim . no-nans-violation?) (k10040 core-prim . no-infinities-violation?) (k10059 core-prim . make-no-nans-violation) (k10038 core-prim . make-no-infinities-violation) (k10947 core-prim . real->flonum) (k10946 core-prim . flzero?) (k10945 core-prim . fltruncate) (k10944 core-prim . fltan) (k10943 core-prim . flsqrt) (k10942 core-prim . flsin) (k10941 core-prim . flround) (k10940 core-prim . flpositive?) (k10939 core-prim . flonum?) (k10938 core-prim . flodd?) (k10937 core-prim . flnumerator) (k10936 core-prim . flnegative?) (k10935 core-prim . flnan?) (k10934 core-prim . flmod0) (k10933 core-prim . flmod) (k10932 core-prim . flmin) (k10931 core-prim . flmax) (k10930 core-prim . fllog) (k10929 core-prim . flinteger?) (k10928 core-prim . flinfinite?) (k10927 core-prim . flfloor) (k10926 core-prim . flfinite?) (k10925 core-prim . flexpt) (k10924 core-prim . flexp) (k10923 core-prim . fleven?) (k10922 core-prim . fldiv0-and-mod0) (k10921 core-prim . fldiv0) (k10920 core-prim . fldiv-and-mod) (k10919 core-prim . fldiv) (k10918 core-prim . fldenominator) (k10917 core-prim . flcos) (k10916 core-prim . flceiling) (k10915 core-prim . flatan) (k10914 core-prim . flasin) (k10913 core-prim . flacos) (k10912 core-prim . flabs) (k10911 core-prim . fl>?) (k10910 core-prim . fl>=?) (k10909 core-prim . fl=?) (k10908 core-prim . fl<?) (k10907 core-prim . fl<=?) (k10906 core-prim . fl/) (k10905 core-prim . fl-) (k10904 core-prim . fl+) (k10903 core-prim . fl*) (k10902 core-prim . fixnum->flonum) (k10901 core-prim . fxzero?) (k10900 core-prim . fxxor) (k10899 core-prim . fxrotate-bit-field) (k10898 core-prim . fxreverse-bit-field) (k10897 core-prim . fxpositive?) (k10896 core-prim . fxodd?) (k10895 core-prim . fxnot) (k10894 core-prim . fxnegative?) (k10893 core-prim . fxmod0) (k10892 core-prim . fxmod) (k10891 core-prim . fxmin) (k10890 core-prim . fxmax) (k10889 core-prim . fxlength) (k10888 core-prim . fxior) (k10887 core-prim . fxif) (k10886 core-prim . fxfirst-bit-set) (k10885 core-prim . fxeven?) (k10884 core-prim . fxdiv0-and-mod0) (k10883 core-prim . fxdiv0) (k10882 core-prim . fxdiv-and-mod) (k10881 core-prim . fxdiv) (k10880 core-prim . fxcopy-bit-field) (k10879 core-prim . fxcopy-bit) (k10878 core-prim . fxbit-set?) (k10877 core-prim . fxbit-field) (k10876 core-prim . fxbit-count) (k10875 core-prim . fxarithmetic-shift-right) (k10874 core-prim . fxarithmetic-shift-left) (k10873 core-prim . fxarithmetic-shift) (k10872 core-prim . fxand) (k10871 core-prim . fx>?) (k10870 core-prim . fx>=?) (k10869 core-prim . fx=?) (k10868 core-prim . fx<?) (k10867 core-prim . fx<=?) (k10866 core-prim . fx-/carry) (k10865 core-prim . fx-) (k10864 core-prim . fx+/carry) (k10863 core-prim . fx+) (k10862 core-prim . fx*/carry) (k10861 core-prim . fx*) (k10860 core-prim . greatest-fixnum) (k10859 core-prim . least-fixnum) (k10858 core-prim . fixnum-width) (k10857 core-prim . fixnum?) (k10856 core-prim . bitwise-rotate-bit-field) (k10855 core-prim . bitwise-reverse-bit-field) (k10854 core-prim . bitwise-length) (k10853 core-prim . bitwise-if) (k10852 core-prim . bitwise-first-bit-set) (k10851 core-prim . bitwise-copy-bit-field) (k10850 core-prim . bitwise-copy-bit) (k10849 core-prim . bitwise-bit-set?) (k10848 core-prim . bitwise-bit-field) (k10847 core-prim . bitwise-bit-count) (k10846 core-prim . bitwise-xor) (k10845 core-prim . bitwise-ior) (k10844 core-prim . bitwise-and) (k10843 core-prim . bitwise-not) (k10842 core-prim . bitwise-arithmetic-shift-right) (k10841 core-prim . bitwise-arithmetic-shift-left) (k10840 core-prim . bitwise-arithmetic-shift) (k10839 core-prim . zero?) (k10838 core-prim . vector?) (k10837 core-prim . vector-set!) (k10836 core-prim . vector-ref) (k10835 core-prim . vector-map) (k10834 core-prim . vector-length) (k10833 core-prim . vector-for-each) (k10832 core-prim . vector-fill!) (k10831 core-prim . vector->list) (k10830 core-prim . vector) (k10829 core-prim . values) (k10828 core-prim . truncate) (k10827 core-prim . tan) (k10826 core-prim . symbol?) (k10825 core-prim . symbol=?) (k10824 core-prim . symbol->string) (k10823 core-prim . substring) (k10822 core-prim . string?) (k10821 core-prim . string>?) (k10820 core-prim . string>=?) (k10819 core-prim . string=?) (k10818 core-prim . string<?) (k10817 core-prim . string<=?) (k10816 core-prim . string-ref) (k10815 core-prim . string-length) (k10814 core-prim . string-for-each) (k10813 core-prim . string-copy) (k10812 core-prim . string-append) (k10811 core-prim . string->symbol) (k10810 core-prim . string->number) (k10809 core-prim . string->list) (k10808 core-prim . string) (k10807 core-prim . sqrt) (k10806 core-prim . sin) (k10805 core-prim . round) (k10804 core-prim . reverse) (k10803 core-prim . real?) (k10802 core-prim . real-valued?) (k10801 core-prim . real-part) (k10800 core-prim . rationalize) (k10799 core-prim . rational?) (k10798 core-prim . rational-valued?) (k10797 core-prim . procedure?) (k10796 core-prim . positive?) (k10795 core-prim . pair?) (k10794 core-prim . odd?) (k10793 core-prim . numerator) (k10792 core-prim . number?) (k10791 core-prim . number->string) (k10790 core-prim . null?) (k10789 core-prim . not) (k10788 core-prim . negative?) (k10787 core-prim . nan?) (k10786 core-prim . min) (k10785 core-prim . max) (k10784 core-prim . map) (k10783 core-prim . make-vector) (k10782 core-prim . make-string) (k10781 core-prim . make-rectangular) (k10780 core-prim . make-polar) (k10779 core-prim . magnitude) (k10778 core-prim . log) (k10777 core-prim . list?) (k10776 core-prim . list-tail) (k10775 core-prim . list-ref) (k10774 core-prim . list->vector) (k10773 core-prim . list->string) (k10772 core-prim . list) (k10771 core-prim . length) (k10770 core-prim . lcm) (k10769 core-prim . integer?) (k10768 core-prim . integer-valued?) (k10767 core-prim . integer->char) (k10766 core-prim . infinite?) (k10765 core-prim . inexact?) (k10764 core-prim . inexact) (k10763 core-prim . imag-part) (k10762 core-prim . gcd) (k10761 core-prim . for-each) (k10760 core-prim . floor) (k10759 core-prim . finite?) (k10758 core-prim . expt) (k10757 core-prim . exp) (k10756 core-prim . exact?) (k10755 core-prim . exact-integer-sqrt) (k10754 core-prim . exact) (k10753 core-prim . even?) (k10752 core-prim . error) (k10751 core-prim . eqv?) (k10750 core-prim . equal?) (k10749 core-prim . eq?) (k10748 core-prim . dynamic-wind) (k10747 core-prim . div0-and-mod0) (k10746 core-prim . mod0) (k10745 core-prim . div0) (k10744 core-prim . div-and-mod) (k10743 core-prim . mod) (k10742 core-prim . div) (k10741 core-prim . denominator) (k10740 core-prim . cos) (k10739 core-prim . cons) (k10738 core-prim . complex?) (k10737 core-prim . char?) (k10736 core-prim . char>?) (k10735 core-prim . char>=?) (k10734 core-prim . char=?) (k10733 core-prim . char<?) (k10732 core-prim . char<=?) (k10731 core-prim . char->integer) (k10730 core-prim . ceiling) (k10729 core-prim . call-with-values) (k10728 core-prim . call/cc) (k10727 core-prim . call-with-current-continuation) (k10726 core-prim . cddddr) (k10725 core-prim . cdddar) (k10724 core-prim . cddadr) (k10723 core-prim . cddaar) (k10722 core-prim . cdaddr) (k10721 core-prim . cdadar) (k10720 core-prim . cdaadr) (k10719 core-prim . cdaaar) (k10718 core-prim . cadddr) (k10717 core-prim . caddar) (k10716 core-prim . cadadr) (k10715 core-prim . cadaar) (k10714 core-prim . caaddr) (k10713 core-prim . caadar) (k10712 core-prim . caaadr) (k10711 core-prim . caaaar) (k10710 core-prim . cdddr) (k10709 core-prim . cddar) (k10708 core-prim . cdadr) (k10707 core-prim . cdaar) (k10706 core-prim . caddr) (k10705 core-prim . cadar) (k10704 core-prim . caadr) (k10703 core-prim . caaar) (k10702 core-prim . cddr) (k10701 core-prim . cdar) (k10700 core-prim . cadr) (k10699 core-prim . caar) (k10698 core-prim . cdr) (k10697 core-prim . car) (k10696 core-prim . boolean?) (k10695 core-prim . boolean=?) (k10694 core-prim . atan) (k10693 core-prim . assertion-violation) (k2989 core-prim . assertion-error) (k10692 core-prim . asin) (k10691 core-prim . apply) (k10690 core-prim . append) (k10689 core-prim . angle) (k10688 core-prim . acos) (k10687 core-prim . abs) (k10686 core-prim . /) (k10685 core-prim . *) (k10684 core-prim . -) (k10683 core-prim . +) (k10682 core-prim . >=) (k10681 core-prim . >) (k10680 core-prim . =) (k10679 core-prim . <=) (k10678 core-prim . <) (k10677 core-prim . library) (k10676 $core-rtd &no-nans-rtd &no-nans-rcd) (k10675 $core-rtd &no-infinities-rtd &no-infinities-rcd) (k10674 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (k10673 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (k10672 $core-rtd &i/o-port-rtd &i/o-port-rcd) (k10671 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (k10670 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (k10669 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (k10668 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (k10667 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (k10666 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (k10665 $core-rtd &i/o-write-rtd &i/o-write-rcd) (k10664 $core-rtd &i/o-read-rtd &i/o-read-rcd) (k10663 $core-rtd &i/o-rtd &i/o-rcd) (k10662 $core-rtd &undefined-rtd &undefined-rcd) (k10661 $core-rtd &syntax-rtd &syntax-rcd) (k10660 $core-rtd &lexical-rtd &lexical-rcd) (k10659 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (k10658 $core-rtd &non-continuable-rtd &non-continuable-rcd) (k10657 $core-rtd &who-rtd &who-rcd) (k10656 $core-rtd &irritants-rtd &irritants-rcd) (k10655 $core-rtd &assertion-rtd &assertion-rcd) (k10654 $core-rtd &violation-rtd &violation-rcd) (k10653 $core-rtd &error-rtd &error-rcd) (k10652 $core-rtd &serious-rtd &serious-rcd) (k10651 $core-rtd &warning-rtd &warning-rcd) (k10650 $core-rtd &message-rtd &message-rcd) (k10649 $core-rtd &condition-rtd &condition-rcd) (k10648 macro . define-condition-type) (k10647 macro . define-enumeration) (k10646 macro . define-record-type) (k10645 macro . parent-rtd) (k10644 macro . nongenerative) (k10643 macro . opaque) (k10642 macro . sealed) (k10641 macro . protocol) (k10640 macro . parent) (k10639 macro . immutable) (k10638 macro . mutable) (k10637 macro . fields) (k10636 macro . error-handling-mode) (k10635 macro . file-options) (k10634 macro . buffer-mode) (k10633 macro . eol-style) (k10632 macro . guard) (k10631 macro . trace-define) (k10630 macro . trace-lambda) (k10629 macro . unsyntax-splicing) (k10628 macro . unsyntax) (k10627 macro . unquote-splicing) (k10626 macro . unquote) (k10625 macro . _) (k10624 macro . else) (k10623 macro . =>) (k10622 macro . ...) (k10621 macro . assert) (k10620 macro . endianness) (k10619 macro . delay) (k10618 macro . time) (k10617 macro . do) (k10616 macro . cond) (k10615 macro . let*) (k10614 macro . let) (k10613 macro . let*-values) (k10612 macro . let-values) (k10611 macro . identifier-syntax) (k10610 macro . with-syntax) (k10609 macro . quasisyntax) (k10608 macro . quasiquote) (k10607 macro . syntax-rules) (k10606 macro . include) (k10605 macro . define-struct) (k10604 core-macro . record-constructor-descriptor) (k10603 core-macro . record-type-descriptor) (k10602 macro . case) (k10601 macro . parameterize) (k10600 macro . unless) (k10599 macro . when) (k10598 core-macro . or) (k10597 core-macro . and) (k10596 core-macro . if) (k10595 core-macro . letrec*) (k10594 core-macro . letrec) (k10593 core-macro . type-descriptor) (k10592 core-macro . case-lambda) (k10591 core-macro . lambda) (k10590 core-macro . syntax) (k10589 core-macro . syntax-case) (k10588 core-macro . quote) (k10587 core-macro . foreign-call) (k10586 letrec-syntax) (k10585 let-syntax) (k10584 set!) (k10583 import) (k10582 begin) (k10581 module) (k10580 define-syntax) (k10579 define)) values values '#f '#f '#f '#f) (k1790@k1443@install-library 'k11318 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . k11285) (eval-core . k11284) (set-symbol-value! . k11283) (symbol-value . k11282) (gensym . k913) (void . k11281)) '() values values '#f '#f '#f '#f) (k1790@k1443@install-library 'k11319 '(mosh) '() '() '() '() '((set-symbol-value! . k11283) (symbol-value . k11282) (read-line . k11278) (ungensym . k11277) (alist->eq-hash-table . k11276) (assoc-ref . k11275) (print . k11274) (format . k11273) (host-os . k11272) (library-path . k1410) (standard-library-path . k11271) (file-newer? . k11270) (stat-mtime . k11269) (write-to-file . k11268) (file->list . k11267) (file->string . k11266) (digit->integer . k11265) (call-with-string-input-port . k11264) (call-with-string-io . k11263) (string-split . k11262) (bytevector-for-each . k11261) (string->regexp . k11260) (rxmatch . k11259) (regexp-replace-all . k11258) (hashtable-for-each . k11257) (readdir . k11253) (set-current-directory! . k11252) (expand-path . k11251) (current-directory . k11250) (p . k11235) (get-timeofday . k11230) (get-command-line . k11229) (sys-display . k11228) (mosh-executable-path . k11227) (make-file-options . k11226) (source-info . k11225) (make-compiler-instruction . k11224) (make-instruction . k11223) (set-source-info! . k11222) (bignum? . k11221) (fast-equal? . k11220) (fasl-read . k11219) (fasl-write . k11218) (time-usage . k11217) (time . k10618) (include . k10606)) '() values values '#f '#f '#f '#f) (k1790@k1443@install-library 'k11320 '(system) '() '() '() '() '((call-process . k11256) (local-tz-offset . k11255) (microseconds . k11254) (expand-path . k11251) (%spawn . k11249) (%waitpid . k11248) (%ffi-supported? . k11247) (%ffi-pointer-ref . k11246) (%ffi-pointer->string . k11245) (%ffi-call->string-or-zero . k11244) (%ffi-call->double . k11243) (%ffi-call->void* . k11242) (%ffi-call->void . k11241) (%ffi-call->int . k11240) (%ffi-lookup . k11239) (%ffi-open . k11238) (%fork . k11237) (%pipe . k11236) (open-output-string . k11234) (get-output-string . k11233) (get-environment-variables . k11232) (get-environment-variable . k11231) (make-parameter . k941) (parameterize . k10601)) '() values values '#f '#f '#f '#f))
((lambda (k10311@add-library-path! k10313@parse-and-add-library-path k10315@for-each-with-index k10317@rpad k10319@condition-printer k10321@record->field-alist k10323@map-with-index k10325@repl k10327@trace-printer k10329@command-line k10331@local-library-path k10333@load/args k10335@load k10337@ironscheme-build k10339@eval-top-level k10341@compile-system-libraries k10343@compile k10345@compile->closure k10347@pre-compile-r6rs-file k10349@load-r6rs-top-level) (begin (set! k10311@add-library-path! (lambda (k10376@path) (k1774@k1411@library-path (append (k1774@k1411@library-path) (list k10376@path))))) (set! k10313@parse-and-add-library-path (lambda (k10378@paths k10379@message) ((lambda (k10382@t) (if k10382@t ((lambda (k10384@paths) (for-each (lambda (k10386@path) (if (file-exists? k10386@path) (k10311@add-library-path! (expand-path k10386@path)) (format (current-error-port) k10379@message k10386@path))) (reverse (string-split k10384@paths '#\:)))) k10382@t) (void))) k10378@paths))) (set! k10315@for-each-with-index (lambda (k10388@proc k10389@lst) (letrec ((k10392@loop (lambda (k10394@i k10395@lst) (if (null? k10395@lst) (if '#f '#f (void)) (begin (k10388@proc k10394@i (car k10395@lst)) (k10392@loop (+ k10394@i '1) (cdr k10395@lst))))))) (k10392@loop '1 k10389@lst)))) (set! k10317@rpad (lambda (k10398@str k10399@pad k10400@n) ((lambda (k10404@rest) ((letrec ((k10406@loop (lambda (k10408@rest k10409@ret) (if (<= k10408@rest '0) k10409@ret (k10406@loop (- k10408@rest '1) (string-append k10409@ret k10399@pad)))))) k10406@loop) k10404@rest (format '"~a" k10398@str))) (- k10400@n (string-length (format '"~a" k10398@str)))))) (set! k10319@condition-printer (lambda (k10412@e k10413@port) ((lambda (k10417@max-condition-len) (begin (set! k10417@max-condition-len (apply max (map (lambda (k10434@c) (string-length (symbol->string (record-type-name (record-rtd k10434@c))))) (simple-conditions k10412@e)))) (begin (display '" Condition components:\n" k10413@port) (k10315@for-each-with-index (lambda (k10418@i k10419@x) ((lambda (k10422@rtd k10423@fields-alist) (begin (format k10413@port '" ~d. ~a" k10418@i (k10317@rpad (symbol->string (record-type-name k10422@rtd)) '" " k10417@max-condition-len)) (if (null? k10423@fields-alist) (newline k10413@port) (void)) ((letrec ((k10426@loop (lambda (k10428@first k10429@fields-alist) (if (null? k10429@fields-alist) '() ((lambda (k10432@field) (begin (if (not k10428@first) (display (k10317@rpad '"" '" " (+ '4 k10417@max-condition-len)) k10413@port) (void)) (display '"       " k10413@port) (display (car k10432@field) k10413@port) (display '": " k10413@port) (write (cdr k10432@field) k10413@port) (newline k10413@port) (k10426@loop '#f (cdr k10429@fields-alist)))) (car k10429@fields-alist)))))) k10426@loop) '#t k10423@fields-alist))) (record-rtd k10419@x) (k10321@record->field-alist k10419@x))) (simple-conditions k10412@e))))) '#f))) (set! k10321@record->field-alist (lambda (k10436@r) ((lambda (k10439@ref) (begin (set! k10439@ref (lambda (k10450@rtd k10451@i k10452@x) ((lambda (k10456@val) (if (symbol? k10456@val) (ungensym k10456@val) k10456@val)) ((record-accessor k10450@rtd k10451@i) k10452@x)))) ((letrec ((k10440@loop (lambda (k10442@ret k10443@rtd) (if k10443@rtd (k10440@loop (append k10442@ret (k10323@map-with-index (lambda (k10446@i k10447@field) (cons k10447@field (k10439@ref k10443@rtd k10446@i k10436@r))) (vector->list (record-type-field-names k10443@rtd)))) (record-type-parent k10443@rtd)) k10442@ret)))) k10440@loop) '() (record-rtd k10436@r)))) '#f))) (set! k10323@map-with-index (lambda (k10458@proc k10459@lst) ((letrec ((k10462@loop (lambda (k10464@i k10465@lst k10466@ret) (if (null? k10465@lst) (reverse k10466@ret) (k10462@loop (+ k10464@i '1) (cdr k10465@lst) (cons (k10458@proc k10464@i (car k10465@lst)) k10466@ret)))))) k10462@loop) '0 k10459@lst '()))) (set! k10325@repl (lambda k10470@x ((lambda (k10473@rec) (begin (set! k10473@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (k10476@k10474) (lambda () (with-exception-handler (lambda (k10478@e) ((call/cc (lambda (k10480@k10475) (k10476@k10474 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? k10478@e) (k10319@condition-printer k10478@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" k10478@e))) (k10480@k10475 (lambda () (raise-continuable k10478@e)))))))))) (lambda () ((letrec ((k10482@loop (lambda (k10484@line k10485@accum) ((lambda (k10489@parentheses-ok? k10491@eval-string-print) (begin (set! k10489@parentheses-ok? (lambda (k10496@text) ((letrec ((k10498@loop (lambda (k10500@chars k10501@p0 k10502@p1) (if (null? k10500@chars) (= '0 k10501@p0 k10502@p1) ((lambda (k10506@t) (if (memv k10506@t '(#\()) (k10498@loop (cdr k10500@chars) (+ k10501@p0 '1) k10502@p1) (if (memv k10506@t '(#\))) (k10498@loop (cdr k10500@chars) (- k10501@p0 '1) k10502@p1) (if (memv k10506@t '(#\[)) (k10498@loop (cdr k10500@chars) k10501@p0 (+ k10502@p1 '1)) (if (memv k10506@t '(#\])) (k10498@loop (cdr k10500@chars) k10501@p0 (- k10502@p1 '1)) (k10498@loop (cdr k10500@chars) k10501@p0 k10502@p1)))))) (car k10500@chars)))))) k10498@loop) (string->list k10496@text) '0 '0))) (set! k10491@eval-string-print (lambda (k10494@text) (if (not (or (string=? '"\n" k10494@text) (= '0 (string-length k10494@text)))) (write (k10339@eval-top-level (call-with-port (open-string-input-port k10494@text) read))) (void)))) (if (eof-object? k10484@line) (begin (k10491@eval-string-print k10485@accum) (exit)) ((lambda (k10492@current) (if (k10489@parentheses-ok? k10492@current) (k10491@eval-string-print k10492@current) (k10482@loop (get-line (current-input-port)) k10492@current))) (string-append k10485@accum k10484@line))))) '#f '#f)))) k10482@loop) (get-line (current-input-port)) '""))))))) (newline) (k10473@rec)))) (k10473@rec))) '#f))) (set! k10327@trace-printer (k1164@k942@make-parameter write)) (set! k10329@command-line (k1164@k942@make-parameter (get-command-line))) (set! k10331@local-library-path (lambda (k10508@filename) (cons (expand-path '".") (k1774@k1411@library-path)))) (set! k10333@load/args (lambda (k10510@filename . k10512@args) (begin (apply k10349@load-r6rs-top-level k10510@filename 'load k10512@args) (void)))) (set! k10335@load (lambda (k10514@filename) (begin (apply k10349@load-r6rs-top-level k10514@filename 'load (k10329@command-line)) (void)))) (set! k10337@ironscheme-build (lambda () (k10335@load '"ironscheme-buildscript.ss"))) (set! k10339@eval-top-level (lambda (k10516@x) (k9343@k2964@eval k10516@x (k9365@k3008@interaction-environment)))) (set! k10341@compile-system-libraries (lambda () (k10339@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! k10343@compile (lambda (k10518@filename) (k10349@load-r6rs-top-level k10518@filename 'compile))) (set! k10345@compile->closure (lambda (k10520@filename) (k10349@load-r6rs-top-level k10520@filename 'closure))) (set! k10347@pre-compile-r6rs-file (lambda (k10522@filename) (k10349@load-r6rs-top-level k10522@filename 'compile))) (set! k10349@load-r6rs-top-level (lambda (k10524@filename k10525@how . k10528@args) ((lambda (k10532@k10530@library-path k10533@k10531@library-path) ((lambda (k10536@swap) (dynamic-wind k10536@swap (lambda () ((lambda (k10538@x*) ((lambda (k10540@t) (if (memv k10540@t '(closure)) (k9364@k3006@pre-compile-r6rs-top-level k10538@x*) (if (memv k10540@t '(load)) ((lambda (k10544@k10542@command-line k10545@k10543@command-line) ((lambda (k10548@swap) (dynamic-wind k10548@swap (lambda () ((k9363@k3004@compile-r6rs-top-level k10538@x*))) k10548@swap)) (lambda () ((lambda (k10550@t) (begin (k10544@k10542@command-line k10545@k10543@command-line) (set! k10545@k10543@command-line k10550@t))) (k10544@k10542@command-line))))) k10329@command-line (cons k10524@filename (car k10528@args))) (if (memv k10540@t '(compile)) (begin (k9363@k3004@compile-r6rs-top-level k10538@x*) (k1778@k1419@serialize-all k1159@k932@serialize-library k1249@k1178@compile-core-expr)) (if '#f '#f (void)))))) k10525@how)) (with-input-from-file k10524@filename (lambda () ((letrec ((k10552@f (lambda () ((lambda (k10554@x) (if (eof-object? k10554@x) '() (cons k10554@x (k10552@f)))) (k1151@k916@read-annotated))))) k10552@f)))))) k10536@swap)) (lambda () ((lambda (k10556@t) (begin (k10532@k10530@library-path k10533@k10531@library-path) (set! k10533@k10531@library-path k10556@t))) (k10532@k10530@library-path))))) k1774@k1411@library-path (k10331@local-library-path k10524@filename)))) (begin (set! k10577@k10349@load-r6rs-top-level k10349@load-r6rs-top-level) (set! k10576@k10347@pre-compile-r6rs-file k10347@pre-compile-r6rs-file) (set! k10575@k10345@compile->closure k10345@compile->closure) (set! k10574@k10343@compile k10343@compile) (set! k10573@k10341@compile-system-libraries k10341@compile-system-libraries) (set! k10572@k10339@eval-top-level k10339@eval-top-level) (set! k10571@k10337@ironscheme-build k10337@ironscheme-build) (set! k10570@k10335@load k10335@load) (set! k10569@k10333@load/args k10333@load/args) (set! k10568@k10331@local-library-path k10331@local-library-path) (set! k10567@k10329@command-line k10329@command-line) (set! k10566@k10327@trace-printer k10327@trace-printer) (set! k10565@k10325@repl k10325@repl) (set! k10564@k10323@map-with-index k10323@map-with-index) (set! k10563@k10321@record->field-alist k10321@record->field-alist) (set! k10562@k10319@condition-printer k10319@condition-printer) (set! k10561@k10317@rpad k10317@rpad) (set! k10560@k10315@for-each-with-index k10315@for-each-with-index) (set! k10559@k10313@parse-and-add-library-path k10313@parse-and-add-library-path) (set! k10558@k10311@add-library-path! k10311@add-library-path!) (k1779@k1421@current-precompiled-library-loader k1160@k934@load-serialized-library) (set-symbol-value! 'load k10335@load) (set-symbol-value! 'pre-compile-r6rs-file k10347@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs k10339@eval-top-level) (set-symbol-value! 'int-env-syms k9334@k2946@interaction-environment-symbols) (set-symbol-value! 'expanded2core k1248@k1176@expanded->core) (set-symbol-value! 'trace-printer k10327@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (k10350@c) (condition (k10148@k9652@make-non-continuable-violation) (k10138@k9627@make-who-condition 'raise) (k10078@k9470@make-message-condition '"returned from non-continuable exception") (k10128@k9601@make-irritants-condition (list k10350@c))))) (k10313@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (k10313@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (k10311@add-library-path! (string-append (mosh-executable-path) '"/lib")) (k10311@add-library-path! (string-append (current-directory) '"/lib"))) (k10311@add-library-path! (string-append (standard-library-path) '"/lib")) ((lambda (k10352@prefix) (k1775@k1413@library-extensions (k10352@prefix '".mosh" (k1775@k1413@library-extensions)))) (lambda (k10354@ext k10355@ls) (append (map (lambda (k10358@x) (string-append k10354@ext k10358@x)) k10355@ls) k10355@ls))) ((lambda (k10360@args k10361@port) ((lambda (k10365@ref) (begin (set! k10365@ref (lambda (k10368@rtd k10369@i k10370@x) ((lambda (k10374@val) (if (symbol? k10374@val) (ungensym k10374@val) k10374@val)) ((record-accessor k10368@rtd k10369@i) k10370@x)))) (with-exception-handler (lambda (k10366@c) (if (condition? k10366@c) (k10319@condition-printer k10366@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" k10366@c))) (lambda () (if (null? k10360@args) (k10325@repl) (k10349@load-r6rs-top-level (car k10360@args) 'load (cdr k10360@args))))))) '#f)) (k10329@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
