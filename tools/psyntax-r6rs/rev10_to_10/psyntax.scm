;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (r27ae@read-annotated r27b0@annotation-stripped r27b2@annotation? r27b4@annotation-source r27b6@annotation-expression r27b8@scm->fasl r27ba@fasl-save r27bc@fasl-load r27be@serialize-library r27c0@load-serialized-library r27c2@make-record-printer r27c4@compile-core r27c6@read-library-source-file r27c8@make-parameter r2830@file-options-spec) (begin (set! r27ae@read-annotated read) (set! r27b0@annotation-stripped (lambda (r2831@x) (r27b6@annotation-expression r2831@x))) (set! r27b2@annotation? (lambda (r2833@x) (source-info r2833@x))) (set! r27b4@annotation-source (lambda (r2835@x) (source-info r2835@x))) (set! r27b6@annotation-expression (lambda (r2837@x) (if (pair? r2837@x) (cons (car r2837@x) (cdr r2837@x)) (display '"line:46\n")))) (set! r27b8@scm->fasl (lambda (r2839@filename) (string-append r2839@filename '".mosh-fasl"))) (set! r27ba@fasl-save (lambda (r283b@filename r283c@obj) (call-with-port (open-file-output-port r283b@filename) (lambda (r283f@port) ((symbol-value 'fasl-write!) r283c@obj r283f@port))))) (set! r27bc@fasl-load (lambda (r2841@filename) (call-with-port (open-file-input-port r2841@filename) (symbol-value 'fasl-read!)))) (set! r27be@serialize-library (lambda (r2843@filename r2844@obj) (begin (format '#t '"serialize-library ~a\n..." r2843@filename) ((lambda (r2847@expanded2core) ((lambda (r2849@compile) ((lambda (r284b@code) ((lambda (r284d@pivot) ((lambda (r284f@visit) ((lambda () (begin (set-car! r284d@pivot r284f@visit) ((lambda (r2851@pivot) ((lambda (r2853@invoke) ((lambda () (set-car! r2851@pivot r2853@invoke)))) (r2849@compile (r2847@expanded2core (car r2851@pivot))))) (cdr r284d@pivot)))))) (r2849@compile (r2847@expanded2core (car r284d@pivot))))) (cddddr (cddddr r284b@code)))) r2844@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (r2855@fasl-file) (begin (if (file-exists? r2855@fasl-file) (delete-file r2855@fasl-file) (void)) ((call/cc (lambda (r2859@r2857) (lambda () (with-exception-handler (lambda (r285b@c) ((call/cc (lambda (r285d@r2858) (r2859@r2857 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " r2843@filename) (if (file-exists? r2855@fasl-file) (delete-file r2855@fasl-file) (void)) '#f) (r285d@r2858 (lambda () (raise-continuable r285b@c)))))))))) (lambda () (begin (r27ba@fasl-save r2855@fasl-file r2844@obj) (display '"OK\n")))))))))) (r27b8@scm->fasl r2843@filename))))) (set! r27c0@load-serialized-library (lambda (r285f@filename r2860@obj) ((lambda (r2863@fasl-file) (if (and (file-exists? r2863@fasl-file) ((symbol-value 'file-newer?) r2863@fasl-file r285f@filename)) ((lambda (r2865@expanded2core) ((lambda (r2867@eval-compiled-core) ((lambda (r2869@code) ((lambda (r286b@pivot) ((lambda (r286d@visit) ((lambda (r286f@visit-proc) ((lambda () (begin (set-car! r286b@pivot r286f@visit-proc) ((lambda (r2871@pivot) ((lambda (r2873@invoke) ((lambda () (begin (set-car! r2871@pivot (lambda () (r2867@eval-compiled-core r2873@invoke))) (apply r2860@obj r2869@code))))) (car r2871@pivot))) (cdr r286b@pivot)) '#t)))) (lambda () (r2867@eval-compiled-core r286d@visit)))) (car r286b@pivot))) (cddddr (cddddr r2869@code)))) (r27bc@fasl-load r2863@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (r27b8@scm->fasl r285f@filename)))) (set! r27c2@make-record-printer (lambda (r2875@name r2876@printer) (lambda r2879@x (begin (display '"record printer") (for-each display r2879@x))))) (set! r27c4@compile-core (lambda r287b@x (apply error 'comile-core '"not implementated" r287b@x))) (set! r27c6@read-library-source-file (lambda (r287d@file-name) (with-input-from-file r287d@file-name r27ae@read-annotated))) (set! r27c8@make-parameter (lambda r288d ((lambda (r288e) (if (= r288e '1) (apply (lambda (r287f@x) (r27c8@make-parameter r287f@x (lambda (r2881@x) r2881@x))) r288d) (if (= r288e '2) (apply (lambda (r2883@x r2884@fender) ((lambda (r2887@x) (lambda r288b ((lambda (r288c) (if (= r288c '0) (apply (lambda () r2887@x) r288b) (if (= r288c '1) (apply (lambda (r2889@v) (set! r2887@x (r2884@fender r2889@v))) r288b) (error 'apply '"invalid arg count")))) (length r288b)))) (r2884@fender r2883@x))) r288d) (error 'apply '"invalid arg count")))) (length r288d)))) (set! r2830@file-options-spec (lambda (r288f@x) r288f@x)) (begin (set! r289f@r2830@file-options-spec r2830@file-options-spec) (set! r289e@r27c8@make-parameter r27c8@make-parameter) (set! r289d@r27c6@read-library-source-file r27c6@read-library-source-file) (set! r289c@r27c4@compile-core r27c4@compile-core) (set! r289b@r27c2@make-record-printer r27c2@make-record-printer) (set! r289a@r27c0@load-serialized-library r27c0@load-serialized-library) (set! r2899@r27be@serialize-library r27be@serialize-library) (set! r2898@r27bc@fasl-load r27bc@fasl-load) (set! r2897@r27ba@fasl-save r27ba@fasl-save) (set! r2896@r27b8@scm->fasl r27b8@scm->fasl) (set! r2895@r27b6@annotation-expression r27b6@annotation-expression) (set! r2894@r27b4@annotation-source r27b4@annotation-source) (set! r2893@r27b2@annotation? r27b2@annotation?) (set! r2892@r27b0@annotation-stripped r27b0@annotation-stripped) (set! r2891@r27ae@read-annotated r27ae@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (r28a4@current-primitive-locations r28a6@mutable? r28a8@rewriter r28aa@expanded->core r28ac@compile-core-expr r28ae@pretty-print r28b0@compile-core-expr-to-port) (begin (set! r28a4@current-primitive-locations (r289e@r27c8@make-parameter (lambda (r28b1@x) '#f) (lambda (r28b3@p) r28b3@p))) (set! r28a6@mutable? (lambda (r28b5@x) (or (pair? r28b5@x) (vector? r28b5@x) (hashtable? r28b5@x)))) (set! r28a8@rewriter (lambda (r28b7@quote-hack?) ((lambda (r28ba@f) (begin (set! r28ba@f (lambda (r28bb@x) (if (pair? r28bb@x) ((lambda (r28bd@t) (if (memv r28bd@t '(quote)) (if (and r28b7@quote-hack? (r28a6@mutable? (cadr r28bb@x))) ((lambda (r28bf@g) (begin (set-symbol-value! r28bf@g (cadr r28bb@x)) r28bf@g)) (gensym)) r28bb@x) (if (memv r28bd@t '(case-lambda)) (cons 'case-lambda (map (lambda (r28c1@x) (cons (car r28c1@x) (map r28ba@f (cdr r28c1@x)))) (cdr r28bb@x))) (if (memv r28bd@t '(lambda)) (cons* 'lambda (cadr r28bb@x) (map r28ba@f (cddr r28bb@x))) (if (memv r28bd@t '(letrec)) ((lambda (r28c3@bindings r28c4@body*) ((lambda (r28c7@lhs* r28c8@rhs*) (cons* 'letrec (map list r28c7@lhs* (map r28ba@f r28c8@rhs*)) (map r28ba@f r28c4@body*))) (map car r28c3@bindings) (map cadr r28c3@bindings))) (cadr r28bb@x) (cddr r28bb@x)) (if (memv r28bd@t '(letrec*)) ((lambda (r28cb@bindings r28cc@body*) ((lambda (r28cf@lhs* r28d0@rhs*) (cons* 'letrec* (map list r28cf@lhs* (map r28ba@f r28d0@rhs*)) (map r28ba@f r28cc@body*))) (map car r28cb@bindings) (map cadr r28cb@bindings))) (cadr r28bb@x) (cddr r28bb@x)) (if (memv r28bd@t '(library-letrec*)) ((lambda (r28d3@name r28d4@x) ((lambda (r28d7@bindings r28d8@body*) ((lambda (r28db@lhs* r28dc@lhs** r28dd@rhs*) (cons* 'library-letrec* r28d3@name (map list r28db@lhs* r28dc@lhs** (map r28ba@f r28dd@rhs*)) (map r28ba@f r28d8@body*))) (map car r28d7@bindings) (map cadr r28d7@bindings) (map caddr r28d7@bindings))) (cadr r28d4@x) (cddr r28d4@x))) (cadr r28bb@x) (cdr r28bb@x)) (if (memv r28bd@t '(begin)) (cons 'begin (map r28ba@f (cdr r28bb@x))) (if (memv r28bd@t '(set!)) (list 'set! (cadr r28bb@x) (r28ba@f (caddr r28bb@x))) (if (memv r28bd@t '(primitive)) ((lambda (r28e1@op) ((lambda (r28e3@t) (if r28e3@t ((lambda (r28e5@loc) r28e5@loc) r28e3@t) r28e1@op)) ((r28a4@current-primitive-locations) r28e1@op))) (cadr r28bb@x)) (if (memv r28bd@t '(define)) r28bb@x (if (list? r28bb@x) (map r28ba@f r28bb@x) (error 'rewrite '"invalid form ~s ~s" r28bb@x (list? r28bb@x)))))))))))))) (car r28bb@x)) r28bb@x))) r28ba@f)) '#f))) (set! r28aa@expanded->core (lambda (r28e7@x) ((r28a8@rewriter '#f) r28e7@x))) (set! r28ac@compile-core-expr (lambda (r28e9@x) ((r28a8@rewriter '#f) r28e9@x))) (set! r28ae@pretty-print write) (set! r28b0@compile-core-expr-to-port (lambda (r28eb@x r28ec@p) (r28ae@pretty-print ((r28a8@rewriter '#f) r28eb@x) r28ec@p))) (begin (set! r28f5@r28b0@compile-core-expr-to-port r28b0@compile-core-expr-to-port) (set! r28f4@r28ae@pretty-print r28ae@pretty-print) (set! r28f3@r28ac@compile-core-expr r28ac@compile-core-expr) (set! r28f2@r28aa@expanded->core r28aa@expanded->core) (set! r28f1@r28a8@rewriter r28a8@rewriter) (set! r28f0@r28a6@mutable? r28a6@mutable?) (set! r28ef@r28a4@current-primitive-locations r28a4@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (r2944@make-collection r2946@current-library-collection r294c@r2947 r294e@r2949 r2950@r2948 r2953@library? r2955@make-library r2957@library-id r2959@library-name r295b@library-version r295d@library-imp* r295f@library-vis* r2961@library-inv* r2963@library-subst r2965@library-env r2967@library-visit-state r2969@library-invoke-state r296b@library-visit-code r296d@library-invoke-code r296f@library-visible? r2971@library-source-file-name r2973@set-library-id! r2975@set-library-name! r2977@set-library-version! r2979@set-library-imp*! r297b@set-library-vis*! r297d@set-library-inv*! r297f@set-library-subst! r2981@set-library-env! r2983@set-library-visit-state! r2985@set-library-invoke-state! r2987@set-library-visit-code! r2989@set-library-invoke-code! r298b@set-library-visible?! r298d@set-library-source-file-name! r298f@rp r2991@find-dependencies r2993@find-library-by r2995@library-path r2997@library-extensions r2999@library-name->file-name r299b@file-locator r299d@serialize-all r299f@current-precompiled-library-loader r29a1@try-load-from-file r29a3@library-loader r29a5@current-library-expander r29a7@external-pending-libraries r29a9@find-external-library r29ab@find-library-by-name r29ad@library-exists? r29af@find-library-by-spec/die r29b1@label->binding-table r29b3@install-library-record r29b5@install-library r29b7@imported-label->binding r29b9@invoke-library r29bb@visit-library r29bd@invoke-library-by-spec r29bf@installed-libraries r29c1@library-spec) (begin (set! r2944@make-collection (lambda () ((lambda (r29c2@set) ((lambda (r29c5@set-cons) (begin (set! r29c5@set-cons (lambda (r29ca@x r29cb@ls) (if (memq r29ca@x r29cb@ls) r29cb@ls (cons r29ca@x r29cb@ls)))) (lambda r29c8 ((lambda (r29c9) (if (= r29c9 '0) (apply (lambda () r29c2@set) r29c8) (if (= r29c9 '1) (apply (lambda (r29c6@x) (set! r29c2@set (r29c5@set-cons r29c6@x r29c2@set))) r29c8) (error 'apply '"invalid arg count")))) (length r29c8))))) '#f)) '()))) (set! r2946@current-library-collection (r289e@r27c8@make-parameter (r2944@make-collection) (lambda (r29ce@x) (begin (if (not (procedure? r29ce@x)) (assertion-violation 'current-library-collection '"not a procedure" r29ce@x) (void)) r29ce@x)))) (set! r294c@r2947 (make-record-type-descriptor 'library '#f 'r294a '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! r294e@r2949 '#f) (set! r2950@r2948 (make-record-constructor-descriptor r294c@r2947 '#f r294e@r2949)) (set! r2953@library? (record-predicate r294c@r2947)) (set! r2955@make-library (record-constructor r2950@r2948)) (set! r2957@library-id (record-accessor r294c@r2947 '0)) (set! r2959@library-name (record-accessor r294c@r2947 '1)) (set! r295b@library-version (record-accessor r294c@r2947 '2)) (set! r295d@library-imp* (record-accessor r294c@r2947 '3)) (set! r295f@library-vis* (record-accessor r294c@r2947 '4)) (set! r2961@library-inv* (record-accessor r294c@r2947 '5)) (set! r2963@library-subst (record-accessor r294c@r2947 '6)) (set! r2965@library-env (record-accessor r294c@r2947 '7)) (set! r2967@library-visit-state (record-accessor r294c@r2947 '8)) (set! r2969@library-invoke-state (record-accessor r294c@r2947 '9)) (set! r296b@library-visit-code (record-accessor r294c@r2947 '10)) (set! r296d@library-invoke-code (record-accessor r294c@r2947 '11)) (set! r296f@library-visible? (record-accessor r294c@r2947 '12)) (set! r2971@library-source-file-name (record-accessor r294c@r2947 '13)) (set! r2973@set-library-id! (record-mutator r294c@r2947 '0)) (set! r2975@set-library-name! (record-mutator r294c@r2947 '1)) (set! r2977@set-library-version! (record-mutator r294c@r2947 '2)) (set! r2979@set-library-imp*! (record-mutator r294c@r2947 '3)) (set! r297b@set-library-vis*! (record-mutator r294c@r2947 '4)) (set! r297d@set-library-inv*! (record-mutator r294c@r2947 '5)) (set! r297f@set-library-subst! (record-mutator r294c@r2947 '6)) (set! r2981@set-library-env! (record-mutator r294c@r2947 '7)) (set! r2983@set-library-visit-state! (record-mutator r294c@r2947 '8)) (set! r2985@set-library-invoke-state! (record-mutator r294c@r2947 '9)) (set! r2987@set-library-visit-code! (record-mutator r294c@r2947 '10)) (set! r2989@set-library-invoke-code! (record-mutator r294c@r2947 '11)) (set! r298b@set-library-visible?! (record-mutator r294c@r2947 '12)) (set! r298d@set-library-source-file-name! (record-mutator r294c@r2947 '13)) (set! r298f@rp (r289b@r27c2@make-record-printer 'library (lambda (r29d0@x r29d1@p r29d2@wr) (begin (if (not (r2953@library? r29d0@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (r295b@library-version r29d0@x)) (r2959@library-name r29d0@x) (append (r2959@library-name r29d0@x) (list (r295b@library-version r29d0@x))))) r29d1@p))))) (set! r2991@find-dependencies (lambda (r29d6@ls) (if (null? r29d6@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! r2993@find-library-by (lambda (r29d8@pred) ((letrec ((r29da@f (lambda (r29dc@ls) (if (null? r29dc@ls) '#f (if (r29d8@pred (car r29dc@ls)) (car r29dc@ls) (r29da@f (cdr r29dc@ls))))))) r29da@f) ((r2946@current-library-collection))))) (set! r2995@library-path (r289e@r27c8@make-parameter '(".") (lambda (r29de@x) (if (and (list? r29de@x) (for-all string? r29de@x)) (map (lambda (r29e0@x) r29e0@x) r29de@x) (assertion-violation 'library-path '"not a list of strings" r29de@x))))) (set! r2997@library-extensions (r289e@r27c8@make-parameter '(".sls" ".ss" ".scm") (lambda (r29e2@x) (if (and (list? r29e2@x) (for-all string? r29e2@x)) (map (lambda (r29e4@x) r29e4@x) r29e2@x) (assertion-violation 'library-extensions '"not a list of strings" r29e2@x))))) (set! r2999@library-name->file-name (lambda (r29e6@x) (call-with-values (lambda () (open-string-output-port)) (lambda (r29ec@r29e9 r29ed@r29eb) ((lambda (r29f0@extract r29f1@p) ((lambda (r29f5@display-hex) (begin (set! r29f5@display-hex (lambda (r29fe@n) (if (<= '0 r29fe@n '9) (display r29fe@n r29f1@p) (display (integer->char (+ (char->integer '#\a) (- r29fe@n '10))) r29f1@p)))) (begin ((letrec ((r29f6@f (lambda (r29f8@ls) (if (not (null? r29f8@ls)) (begin (display '"/" r29f1@p) (for-each (lambda (r29fa@c) (if (or (char<=? '#\a r29fa@c '#\z) (char<=? '#\A r29fa@c '#\Z) (char<=? '#\0 r29fa@c '#\9) (memv r29fa@c '(#\- #\. #\_ #\~))) (display r29fa@c r29f1@p) (begin (display '"%" r29f1@p) ((lambda (r29fc@n) (begin (r29f5@display-hex (quotient r29fc@n '16)) (r29f5@display-hex (remainder r29fc@n '16)))) (char->integer r29fa@c))))) (string->list (symbol->string (car r29f8@ls)))) (r29f6@f (cdr r29f8@ls))) (void))))) r29f6@f) r29e6@x) (r29f0@extract)))) '#f)) r29ed@r29eb r29ec@r29e9))))) (set! r299b@file-locator (r289e@r27c8@make-parameter (lambda (r2a00@x) ((lambda (r2a02@str) ((letrec ((r2a04@f (lambda (r2a06@ls r2a07@exts r2a08@failed-list) (if (null? r2a06@ls) ((lambda () ((lambda (r2a14@r2a0f r2a16@r2a11 r2a18@r2a10 r2a1b@r2a0e r2a1d@make-library-resolution-condition r2a1f@r2a0c r2a21@r2a0d r2a23@library-resolution-condition? r2a25@condition-library r2a27@condition-files) (begin (set! r2a14@r2a0f (make-record-type-descriptor '&library-resolution r4caf@r49f6@&condition-rtd 'r2a12 '#f '#f '#((immutable library) (immutable files)))) (set! r2a16@r2a11 '#f) (set! r2a18@r2a10 (make-record-constructor-descriptor r2a14@r2a0f r4cb0@r49f8@&condition-rcd r2a16@r2a11)) (set! r2a1b@r2a0e (record-predicate r2a14@r2a0f)) (set! r2a1d@make-library-resolution-condition (record-constructor r2a18@r2a10)) (set! r2a1f@r2a0c (record-accessor r2a14@r2a0f '0)) (set! r2a21@r2a0d (record-accessor r2a14@r2a0f '1)) (set! r2a23@library-resolution-condition? (condition-predicate r2a14@r2a0f)) (set! r2a25@condition-library (condition-accessor r2a14@r2a0f r2a1f@r2a0c)) (set! r2a27@condition-files (condition-accessor r2a14@r2a0f r2a21@r2a0d)) (raise (condition (r4ccf@r4a90@make-error) (r4cf1@r4aec@make-who-condition 'expander) (r4cb5@r4a4d@make-message-condition '"cannot locate library in library-path") (r2a1d@make-library-resolution-condition r2a00@x (reverse r2a08@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? r2a07@exts) (r2a04@f (cdr r2a06@ls) (r2997@library-extensions) r2a08@failed-list) ((lambda (r2a28@name) (if (file-exists? r2a28@name) r2a28@name (r2a04@f r2a06@ls (cdr r2a07@exts) (cons r2a28@name r2a08@failed-list)))) (string-append (car r2a06@ls) r2a02@str (car r2a07@exts)))))))) r2a04@f) (r2995@library-path) (r2997@library-extensions) '())) (r2999@library-name->file-name r2a00@x))) (lambda (r2a2a@f) (if (procedure? r2a2a@f) r2a2a@f (assertion-violation 'file-locator '"not a procedure" r2a2a@f))))) (set! r299d@serialize-all (lambda (r2a2c@serialize r2a2d@compile) ((lambda (r2a31@library-desc) (begin (set! r2a31@library-desc (lambda (r2a34@x) (list (r2957@library-id r2a34@x) (r2959@library-name r2a34@x)))) (for-each (lambda (r2a32@x) (if (r2971@library-source-file-name r2a32@x) (r2a2c@serialize (r2971@library-source-file-name r2a32@x) (list (r2957@library-id r2a32@x) (r2959@library-name r2a32@x) (r295b@library-version r2a32@x) (map r2a31@library-desc (r295d@library-imp* r2a32@x)) (map r2a31@library-desc (r295f@library-vis* r2a32@x)) (map r2a31@library-desc (r2961@library-inv* r2a32@x)) (r2963@library-subst r2a32@x) (r2965@library-env r2a32@x) (r2a2d@compile (r296b@library-visit-code r2a32@x)) (r2a2d@compile (r296d@library-invoke-code r2a32@x)) (r296f@library-visible? r2a32@x))) (void))) ((r2946@current-library-collection))))) '#f))) (set! r299f@current-precompiled-library-loader (r289e@r27c8@make-parameter (lambda (r2a36@filename r2a37@sk) '#f))) (set! r29a1@try-load-from-file (lambda (r2a3a@filename) ((r299f@current-precompiled-library-loader) r2a3a@filename (lambda r2a60 ((lambda (r2a61) (if (= r2a61 '11) (apply (lambda (r2a3c@id r2a3d@name r2a3e@ver r2a3f@imp* r2a40@vis* r2a41@inv* r2a42@exp-subst r2a43@exp-env r2a44@visit-proc r2a45@invoke-proc r2a46@visible?) ((letrec ((r2a52@f (lambda (r2a54@deps) (if (null? r2a54@deps) (begin (r29b5@install-library r2a3c@id r2a3d@name r2a3e@ver r2a3f@imp* r2a40@vis* r2a41@inv* r2a42@exp-subst r2a43@exp-env r2a44@visit-proc r2a45@invoke-proc '#f '#f r2a46@visible? '#f) '#t) ((lambda (r2a56@d) ((lambda (r2a58@label r2a59@dname) ((lambda (r2a5c@l) (if (and (r2953@library? r2a5c@l) (eq? r2a58@label (r2957@library-id r2a5c@l))) (r2a52@f (cdr r2a54@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" r2a3d@name r2a59@dname r2a3a@filename r2a5c@l r2a58@label (r2957@library-id r2a5c@l)) '#f))) (r29ab@find-library-by-name r2a59@dname))) (car r2a56@d) (cadr r2a56@d))) (car r2a54@deps)))))) r2a52@f) (append r2a3f@imp* r2a40@vis* r2a41@inv*))) r2a60) (if (>= r2a61 '0) (apply (lambda r2a5e@others '#f) r2a60) (error 'apply '"invalid arg count")))) (length r2a60)))))) (set! r29a3@library-loader (r289e@r27c8@make-parameter (lambda (r2a62@x) ((lambda (r2a64@file-name) (if (not r2a64@file-name) (assertion-violation '#f '"cannot file library" r2a62@x) (or (r29a1@try-load-from-file r2a64@file-name) ((r29a5@current-library-expander) (r289d@r27c6@read-library-source-file r2a64@file-name) r2a64@file-name (lambda (r2a66@name) (if (not (fast-equal? r2a66@name r2a62@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (r2a6c@r2a69 r2a6d@r2a6b) ((lambda (r2a70@e r2a71@p) (begin (display '"expected to find library " r2a71@p) (write r2a62@x r2a71@p) (display '" in file " r2a71@p) (display r2a64@file-name r2a71@p) (display '", found " r2a71@p) (write r2a66@name r2a71@p) (display '" instead" r2a71@p) (r2a70@e))) r2a6d@r2a6b r2a6c@r2a69)))) (void))))))) ((r299b@file-locator) r2a62@x))) (lambda (r2a74@f) (if (procedure? r2a74@f) r2a74@f (assertion-violation 'library-locator '"not a procedure" r2a74@f))))) (set! r29a5@current-library-expander (r289e@r27c8@make-parameter (lambda (r2a76@x) (assertion-violation 'library-expander '"not initialized")) (lambda (r2a78@f) (if (procedure? r2a78@f) r2a78@f (assertion-violation 'library-expander '"not a procedure" r2a78@f))))) (set! r29a7@external-pending-libraries (r289e@r27c8@make-parameter '())) (set! r29a9@find-external-library (lambda (r2a7a@name) (begin (if (member r2a7a@name (r29a7@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" r2a7a@name) (void)) ((lambda (r2a80@r2a7d r2a81@r2a7f) ((lambda (r2a84@swap) (dynamic-wind r2a84@swap (lambda () (begin ((r29a3@library-loader) r2a7a@name) (or (r2993@find-library-by (lambda (r2a86@x) (fast-equal? (r2959@library-name r2a86@x) r2a7a@name))) (assertion-violation '#f '"handling external library did not yield the correct library" r2a7a@name)))) r2a84@swap)) (lambda () ((lambda (r2a88@t) (begin (r2a80@r2a7d r2a81@r2a7f) (set! r2a81@r2a7f r2a88@t))) (r2a80@r2a7d))))) r29a7@external-pending-libraries (cons r2a7a@name (r29a7@external-pending-libraries)))))) (set! r29ab@find-library-by-name (lambda (r2a8a@name) (or (r2993@find-library-by (lambda (r2a8c@x) (fast-equal? (r2959@library-name r2a8c@x) r2a8a@name))) (r29a9@find-external-library r2a8a@name)))) (set! r29ad@library-exists? (lambda (r2a8e@name) (and (r2993@find-library-by (lambda (r2a90@x) (fast-equal? (r2959@library-name r2a90@x) r2a8e@name))) '#t))) (set! r29af@find-library-by-spec/die (lambda (r2a92@spec) ((lambda (r2a94@id) (or (r2993@find-library-by (lambda (r2a96@x) (eq? r2a94@id (r2957@library-id r2a96@x)))) (assertion-violation '#f '"cannot find library with required spec" r2a92@spec))) (car r2a92@spec)))) (set! r29b1@label->binding-table (make-eq-hashtable)) (set! r29b3@install-library-record (lambda (r2a98@lib) (begin ((lambda (r2a9a@exp-env) (for-each (lambda (r2a9c@x) ((lambda (r2a9e@label r2a9f@binding) ((lambda (r2aa2@binding) (begin (if (hashtable-ref r29b1@label->binding-table r2a9e@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" r2a9e@label (hashtable-ref r29b1@label->binding-table r2a9e@label '#f) r2aa2@binding) (exit)) (void)) (hashtable-set! r29b1@label->binding-table r2a9e@label r2aa2@binding))) ((lambda (r2aa4@t) (if (memv r2aa4@t '(global)) (cons 'global (cons r2a98@lib (cdr r2a9f@binding))) (if (memv r2aa4@t '(global-macro)) (cons 'global-macro (cons r2a98@lib (cdr r2a9f@binding))) (if (memv r2aa4@t '(global-macro!)) (cons 'global-macro! (cons r2a98@lib (cdr r2a9f@binding))) r2a9f@binding)))) (car r2a9f@binding)))) (car r2a9c@x) (cdr r2a9c@x))) r2a9a@exp-env)) (r2965@library-env r2a98@lib)) ((r2946@current-library-collection) r2a98@lib)))) (set! r29b5@install-library (lambda (r2aa6@id r2aa7@name r2aa8@ver r2aa9@imp* r2aaa@vis* r2aab@inv* r2aac@exp-subst r2aad@exp-env r2aae@visit-proc r2aaf@invoke-proc r2ab0@visit-code r2ab1@invoke-code r2ab2@visible? r2ab3@source-file-name) ((lambda (r2ac2@imp-lib* r2ac3@vis-lib* r2ac4@inv-lib*) (begin (if (not (and (symbol? r2aa6@id) (list? r2aa7@name) (list? r2aa8@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" r2aa6@id r2aa7@name r2aa8@ver) (void)) (if (r29ad@library-exists? r2aa7@name) (assertion-violation 'install-library '"library is already installed" r2aa7@name) (void)) ((lambda (r2ac8@lib) (r29b3@install-library-record r2ac8@lib)) (r2955@make-library r2aa6@id r2aa7@name r2aa8@ver r2ac2@imp-lib* r2ac3@vis-lib* r2ac4@inv-lib* r2aac@exp-subst r2aad@exp-env r2aae@visit-proc r2aaf@invoke-proc r2ab0@visit-code r2ab1@invoke-code r2ab2@visible? r2ab3@source-file-name)))) (map r29af@find-library-by-spec/die r2aa9@imp*) (map r29af@find-library-by-spec/die r2aaa@vis*) (map r29af@find-library-by-spec/die r2aab@inv*)))) (set! r29b7@imported-label->binding (lambda (r2aca@lab) (hashtable-ref r29b1@label->binding-table r2aca@lab '#f))) (set! r29b9@invoke-library (lambda (r2acc@lib) ((lambda (r2ace@invoke) (if (procedure? r2ace@invoke) (begin (r2985@set-library-invoke-state! r2acc@lib (lambda () (assertion-violation 'invoke '"circularity detected" r2acc@lib))) (for-each r29b9@invoke-library (r2961@library-inv* r2acc@lib)) (r2985@set-library-invoke-state! r2acc@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" r2acc@lib))) (r2ace@invoke) (r2985@set-library-invoke-state! r2acc@lib '#t)) (void))) (r2969@library-invoke-state r2acc@lib)))) (set! r29bb@visit-library (lambda (r2ad0@lib) ((lambda (r2ad2@visit) (if (procedure? r2ad2@visit) (begin (r2983@set-library-visit-state! r2ad0@lib (lambda () (assertion-violation 'visit '"circularity detected" r2ad0@lib))) (for-each r29b9@invoke-library (r295f@library-vis* r2ad0@lib)) (r2983@set-library-visit-state! r2ad0@lib (lambda () (assertion-violation 'invoke '"first visit did not return" r2ad0@lib))) (r2ad2@visit) (r2983@set-library-visit-state! r2ad0@lib '#t)) (void))) (r2967@library-visit-state r2ad0@lib)))) (set! r29bd@invoke-library-by-spec (lambda (r2ad4@spec) (r29b9@invoke-library (r29af@find-library-by-spec/die r2ad4@spec)))) (set! r29bf@installed-libraries (lambda r2adc ((lambda (r2add) (if (= r2add '1) (apply (lambda (r2ad6@all?) ((letrec ((r2ad8@f (lambda (r2ada@ls) (if (null? r2ada@ls) '() (if (or r2ad6@all? (r296f@library-visible? (car r2ada@ls))) (cons (car r2ada@ls) (r2ad8@f (cdr r2ada@ls))) (r2ad8@f (cdr r2ada@ls))))))) r2ad8@f) ((r2946@current-library-collection)))) r2adc) (if (= r2add '0) (apply (lambda () (r29bf@installed-libraries '#f)) r2adc) (error 'apply '"invalid arg count")))) (length r2adc)))) (set! r29c1@library-spec (lambda (r2ade@x) (begin (if (not (r2953@library? r2ade@x)) (assertion-violation 'library-spec '"not a library" r2ade@x) (void)) (list (r2957@library-id r2ade@x) (r2959@library-name r2ade@x) (r295b@library-version r2ade@x))))) (begin (set! r2b1c@r29c1@library-spec r29c1@library-spec) (set! r2b1b@r29bf@installed-libraries r29bf@installed-libraries) (set! r2b1a@r29bd@invoke-library-by-spec r29bd@invoke-library-by-spec) (set! r2b19@r29bb@visit-library r29bb@visit-library) (set! r2b18@r29b9@invoke-library r29b9@invoke-library) (set! r2b17@r29b7@imported-label->binding r29b7@imported-label->binding) (set! r2b16@r29b5@install-library r29b5@install-library) (set! r2b15@r29b3@install-library-record r29b3@install-library-record) (set! r2b14@r29b1@label->binding-table r29b1@label->binding-table) (set! r2b13@r29af@find-library-by-spec/die r29af@find-library-by-spec/die) (set! r2b12@r29ad@library-exists? r29ad@library-exists?) (set! r2b11@r29ab@find-library-by-name r29ab@find-library-by-name) (set! r2b10@r29a9@find-external-library r29a9@find-external-library) (set! r2b0f@r29a7@external-pending-libraries r29a7@external-pending-libraries) (set! r2b0e@r29a5@current-library-expander r29a5@current-library-expander) (set! r2b0d@r29a3@library-loader r29a3@library-loader) (set! r2b0c@r29a1@try-load-from-file r29a1@try-load-from-file) (set! r2b0b@r299f@current-precompiled-library-loader r299f@current-precompiled-library-loader) (set! r2b0a@r299d@serialize-all r299d@serialize-all) (set! r2b09@r299b@file-locator r299b@file-locator) (set! r2b08@r2999@library-name->file-name r2999@library-name->file-name) (set! r2b07@r2997@library-extensions r2997@library-extensions) (set! r2b06@r2995@library-path r2995@library-path) (set! r2b05@r2993@find-library-by r2993@find-library-by) (set! r2b04@r2991@find-dependencies r2991@find-dependencies) (set! r2b03@r298f@rp r298f@rp) (set! r2b02@r298d@set-library-source-file-name! r298d@set-library-source-file-name!) (set! r2b01@r298b@set-library-visible?! r298b@set-library-visible?!) (set! r2b00@r2989@set-library-invoke-code! r2989@set-library-invoke-code!) (set! r2aff@r2987@set-library-visit-code! r2987@set-library-visit-code!) (set! r2afe@r2985@set-library-invoke-state! r2985@set-library-invoke-state!) (set! r2afd@r2983@set-library-visit-state! r2983@set-library-visit-state!) (set! r2afc@r2981@set-library-env! r2981@set-library-env!) (set! r2afb@r297f@set-library-subst! r297f@set-library-subst!) (set! r2afa@r297d@set-library-inv*! r297d@set-library-inv*!) (set! r2af9@r297b@set-library-vis*! r297b@set-library-vis*!) (set! r2af8@r2979@set-library-imp*! r2979@set-library-imp*!) (set! r2af7@r2977@set-library-version! r2977@set-library-version!) (set! r2af6@r2975@set-library-name! r2975@set-library-name!) (set! r2af5@r2973@set-library-id! r2973@set-library-id!) (set! r2af4@r2971@library-source-file-name r2971@library-source-file-name) (set! r2af3@r296f@library-visible? r296f@library-visible?) (set! r2af2@r296d@library-invoke-code r296d@library-invoke-code) (set! r2af1@r296b@library-visit-code r296b@library-visit-code) (set! r2af0@r2969@library-invoke-state r2969@library-invoke-state) (set! r2aef@r2967@library-visit-state r2967@library-visit-state) (set! r2aee@r2965@library-env r2965@library-env) (set! r2aed@r2963@library-subst r2963@library-subst) (set! r2aec@r2961@library-inv* r2961@library-inv*) (set! r2aeb@r295f@library-vis* r295f@library-vis*) (set! r2aea@r295d@library-imp* r295d@library-imp*) (set! r2ae9@r295b@library-version r295b@library-version) (set! r2ae8@r2959@library-name r2959@library-name) (set! r2ae7@r2957@library-id r2957@library-id) (set! r2ae6@r2955@make-library r2955@make-library) (set! r2ae5@r2953@library? r2953@library?) (set! r2ae4@r2950@r2948 r2950@r2948) (set! r2ae3@r294e@r2949 r294e@r2949) (set! r2ae2@r294c@r2947 r294c@r2947) (set! r2ae1@r2946@current-library-collection r2946@current-library-collection) (set! r2ae0@r2944@make-collection r2944@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (r2b1f@build-global-define r2b90@build-lambda r2b92@build-case-lambda r2b94@build-let r2bc2@build-sequence r2bc4@build-void r2bc6@build-letrec r2bc8@build-letrec* r2bca@build-library-letrec* r2bcc@build-receive) (begin (set! r2b1f@build-global-define (lambda (r2bcd@x) (r2bc4@build-void))) (set! r2b90@build-lambda (lambda (r2bcf@ae r2bd0@vars r2bd1@exp) (list 'lambda r2bd0@vars r2bd1@exp))) (set! r2b92@build-case-lambda (lambda (r2bd5@ae r2bd6@vars* r2bd7@exp*) ((lambda (r2bdc@build-error r2bde@build-pred r2be0@build-apply r2be2@expand-case-lambda) (begin (set! r2bdc@build-error (lambda (r2c13@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! r2bde@build-pred (lambda (r2bfb@ae r2bfc@n r2bfd@vars) (call-with-values (lambda () ((letrec ((r2c05@f (lambda (r2c07@vars r2c08@count) (if (pair? r2c07@vars) (r2c05@f (cdr r2c07@vars) (+ r2c08@count '1)) (if (null? r2c07@vars) (values r2c08@count '=) (values r2c08@count '>=)))))) r2c05@f) r2bfd@vars '0)) (lambda (r2c0b@r2c02 r2c0c@r2c04) ((lambda (r2c0f@pred r2c10@count) (list (list 'primitive r2c0f@pred) r2bfc@n (list 'quote r2c10@count))) r2c0c@r2c04 r2c0b@r2c02))))) (set! r2be0@build-apply (lambda (r2bf3@ae r2bf4@g r2bf5@vars r2bf6@exp) (list '(primitive apply) (r2b90@build-lambda r2bf3@ae r2bf5@vars r2bf6@exp) r2bf4@g))) (set! r2be2@expand-case-lambda (lambda (r2be3@ae r2be4@vars r2be5@exp*) ((lambda (r2be9@g r2bea@n) (list 'lambda r2be9@g (r2b94@build-let r2be3@ae (list r2bea@n) (list (list '(primitive length) r2be9@g)) ((letrec ((r2bed@f (lambda (r2bef@vars* r2bf0@exp*) (if (null? r2bef@vars*) (r2bdc@build-error r2be3@ae) (list 'if (r2bde@build-pred r2be3@ae r2bea@n (car r2bef@vars*)) (r2be0@build-apply r2be3@ae r2be9@g (car r2bef@vars*) (car r2bf0@exp*)) (r2bed@f (cdr r2bef@vars*) (cdr r2bf0@exp*))))))) r2bed@f) r2bd6@vars* r2be5@exp*)))) (gensym) (gensym)))) (if (= (length r2bd7@exp*) '1) (r2b90@build-lambda r2bd5@ae (car r2bd6@vars*) (car r2bd7@exp*)) (r2be2@expand-case-lambda r2bd5@ae r2bd6@vars* r2bd7@exp*)))) '#f '#f '#f '#f))) (set! r2b94@build-let (lambda (r2c15@ae r2c16@lhs* r2c17@rhs* r2c18@body) (cons (r2b90@build-lambda r2c15@ae r2c16@lhs* r2c18@body) r2c17@rhs*))) (set! r2bc2@build-sequence (lambda (r2c1d@ae r2c1e@exps) ((letrec ((r2c21@loop (lambda (r2c23@exps) (if (null? (cdr r2c23@exps)) (car r2c23@exps) (if (equal? (car r2c23@exps) (r2bc4@build-void)) (r2c21@loop (cdr r2c23@exps)) (cons 'begin r2c23@exps)))))) r2c21@loop) r2c1e@exps))) (set! r2bc4@build-void (lambda () '((primitive void)))) (set! r2bc6@build-letrec (lambda (r2c25@ae r2c26@vars r2c27@val-exps r2c28@body-exp) (if (null? r2c26@vars) r2c28@body-exp (list 'letrec (map list r2c26@vars r2c27@val-exps) r2c28@body-exp)))) (set! r2bc8@build-letrec* (lambda (r2c2d@ae r2c2e@vars r2c2f@val-exps r2c30@body-exp) (if (null? r2c2e@vars) r2c30@body-exp (r2b94@build-let r2c2d@ae r2c2e@vars (map (lambda (r2c35@x) (list 'quote '#f)) r2c2e@vars) (r2bc2@build-sequence r2c2d@ae (append (map (lambda (r2c37@lhs r2c38@rhs) (list 'set! r2c37@lhs r2c38@rhs)) r2c2e@vars r2c2f@val-exps) (list r2c30@body-exp))))))) (set! r2bca@build-library-letrec* (lambda (r2c3b@ae r2c3c@name r2c3d@vars r2c3e@locs r2c3f@val-exps r2c40@body-exp) (list 'library-letrec* r2c3c@name (map list r2c3d@vars r2c3e@locs r2c3f@val-exps) r2c40@body-exp))) (set! r2bcc@build-receive (lambda (r2c47@ae r2c48@vars r2c49@producer r2c4a@body*) (begin (display '"************** in ") (cons 'receive (cons r2c48@vars (cons r2c49@producer r2c4a@body*)))))) (begin (set! r2c58@r2bcc@build-receive r2bcc@build-receive) (set! r2c57@r2bca@build-library-letrec* r2bca@build-library-letrec*) (set! r2c56@r2bc8@build-letrec* r2bc8@build-letrec*) (set! r2c55@r2bc6@build-letrec r2bc6@build-letrec) (set! r2c54@r2bc4@build-void r2bc4@build-void) (set! r2c53@r2bc2@build-sequence r2bc2@build-sequence) (set! r2c52@r2b94@build-let r2b94@build-let) (set! r2c51@r2b92@build-case-lambda r2b92@build-case-lambda) (set! r2c50@r2b90@build-lambda r2b90@build-lambda) (set! r2c4f@r2b1f@build-global-define r2b1f@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (r2c67@file-options-macro r2c69@set-cons r2c6b@set-union r2c70@top-mark* r2c72@top-marked? r2c74@gen-lexical r2c76@gen-global r2c78@gen-label r2c7a@gen-top-level-label r2c7c@gen-define-label+loc r2c7e@gen-define-label r2c84@r2c7f r2c86@r2c81 r2c88@r2c80 r2c8b@rib? r2c8d@make-rib r2c8f@rib-sym* r2c91@rib-mark** r2c93@rib-label* r2c95@rib-sealed/freq r2c97@rib-cache r2c99@set-rib-sym*! r2c9b@set-rib-mark**! r2c9d@set-rib-label*! r2c9f@set-rib-sealed/freq! r2ca1@set-rib-cache! r2ca3@make-empty-rib r2ca5@extend-rib! r2ca7@extend-rib/nc! r2ca9@make-rib-map r2cab@seal-rib! r2cad@unseal-rib! r2caf@make-full-rib r2cb5@r2cb0 r2cb7@r2cb2 r2cb9@r2cb1 r2cbc@stx? r2cbe@make-stx r2cc0@stx-expr r2cc2@stx-mark* r2cc4@stx-subst* r2cc6@stx-ae* r2cc8@set-stx-expr! r2cca@set-stx-mark*! r2ccc@set-stx-subst*! r2cce@set-stx-ae*! r2cd0@rp r2cd2@datum->stx r2cd4@gen-mark r2cd6@anti-mark r2cd8@anti-mark? r2cda@join-wraps r2cdc@mkstx r2cde@add-mark r2ce0@add-subst r2ce2@syntax-kind? r2ce4@syntax-vector->list r2ce6@syntax-pair? r2ce8@syntax-vector? r2cea@syntax-null? r2cec@syntax-list? r2cee@syntax-car r2cf0@syntax-cdr r2cf2@syntax->list r2cf4@id? r2cf6@id->sym r2cf8@same-marks? r2cfa@bound-id=? r2cfc@free-id=? r2cfe@valid-bound-ids? r2d00@distinct-bound-ids? r2d02@bound-id-member? r2d04@self-evaluating? r2d06@strip-annotations r2d08@strip r2d0a@stx->datum r2d0c@same-marks*? r2d0e@id->label r2d10@id->real-label r2d12@label->binding r2d14@make-binding r2d16@binding-type r2d18@binding-value r2d1a@raise-unbound-error r2d1c@syntax-type r2d2a@sanitize-binding r2d2c@make-variable-transformer r2d2e@variable-transformer? r2d30@variable-transformer-procedure r2d32@make-eval-transformer r2e83@parse-define r2e85@parse-define-syntax r2e87@scheme-stx-hashtable r2e89@scheme-stx r2e8b@lexical-var r2e8d@lexical-mutable? r2e8f@set-lexical-mutable! r2e91@add-lexical r2e93@add-lexicals r2e95@letrec-helper r2e97@letrec-transformer r2e99@letrec*-transformer r2e9b@fluid-let-syntax-transformer r2e9d@type-descriptor-transformer r2e9f@record-type-descriptor-transformer r2ea1@record-constructor-descriptor-transformer r2ea3@when-macro r2ea5@unless-macro r2ea7@if-transformer r2ea9@and-transformer r2eab@or-transformer r2ead@case-macro r2eaf@quote-transformer r2eb1@case-lambda-transformer r2eb3@lambda-transformer r2eb5@bless r2eb7@with-syntax-macro r2eb9@invalid-fmls-error r2ebb@let-macro r2ebd@let-values-macro r2ebf@let*-values-macro r2ec1@trace-lambda-macro r2ec3@trace-define-macro r2ec5@trace-define-syntax-macro r2ec7@trace-let/rec-syntax r2ec9@trace-let-syntax-macro r2ecb@trace-letrec-syntax-macro r2ecd@guard-macro r2ecf@define-enumeration-macro r2ed1@time-macro r2ed3@delay-macro r2ed5@assert-macro r2ed7@endianness-macro r2ed9@identifier-syntax-macro r2edb@do-macro r2edd@let*-macro r2edf@or-macro r2ee1@and-macro r2ee3@cond-macro r2ee5@do-include r2ee7@include-macro r2ee9@include-into-macro r2eeb@syntax-rules-macro r2eed@quasiquote-macro r2eef@quasisyntax-macro r2ef1@define-struct-macro r2ef3@define-record-type-macro r2ef5@define-condition-type-macro r2ef7@incorrect-usage-macro r2ef9@parameterize-macro r2efb@foreign-call-transformer r2efd@convert-pattern r2eff@syntax-dispatch r2f01@ellipsis? r2f03@underscore? r2f05@verify-literals r2f07@syntax-case-transformer r2f09@ellipsis-map r2f0b@syntax-transformer r2f0d@core-macro-transformer r2f0f@symbol-macro r2f11@macro-transformer r2f13@local-macro-transformer r2f15@do-macro-call r2f17@chi-macro r2f19@chi-local-macro r2f1b@chi-global-macro r2f1d@chi-expr* r2f1f@chi-application r2f21@chi-expr r2f23@chi-set! r2f25@verify-formals r2f27@chi-lambda-clause r2f29@chi-lambda-clause* r2f2b@chi-defun r2f2d@chi-rhs r2f2f@expand-interaction-rhs*/init* r2f31@chi-rhs* r2f33@find-bound=? r2f35@find-dups r2f37@chi-internal r2f39@parse-module r2f3f@r2f3a r2f41@r2f3c r2f43@r2f3b r2f46@module-interface? r2f48@make-module-interface r2f4a@module-interface-first-mark r2f4c@module-interface-exp-id-vec r2f4e@module-interface-exp-lab-vec r2f50@set-module-interface-first-mark! r2f52@set-module-interface-exp-id-vec! r2f54@set-module-interface-exp-lab-vec! r2f56@module-interface-exp-id* r2f58@chi-internal-module r2f5a@chi-body* r2f5c@expand-transformer r2f5e@parse-exports r2f60@parse-library-name r2f62@parse-library r2f64@parse-import-spec* r2f66@make-top-rib r2f68@make-collector r2f6a@inv-collector r2f6c@vis-collector r2f6e@imp-collector r2f70@chi-library-internal r2f72@chi-interaction-expr r2f74@library-body-expander r2f76@core-library-expander r2f78@parse-top-level-program r2f7a@top-level-expander r2f80@r2f7b r2f82@r2f7d r2f84@r2f7c r2f87@env? r2f89@make-env r2f8b@env-names r2f8d@env-labels r2f8f@env-itc r2f91@set-env-names! r2f93@set-env-labels! r2f95@set-env-itc! r2f97@rp r2f9d@r2f98 r2f9f@r2f9a r2fa1@r2f99 r2fa4@interaction-env? r2fa6@make-interaction-env r2fa8@interaction-env-rib r2faa@interaction-env-r r2fac@interaction-env-locs r2fae@set-interaction-env-rib! r2fb0@set-interaction-env-r! r2fb2@set-interaction-env-locs! r2fb4@rp r2fb6@interaction-environment-symbols r2fb8@environment-bindings r2fba@parse-binding r2fbc@environment? r2fbe@environment-symbols r2fc0@environment r2fc2@null-environment r2fc4@scheme-report-environment r2fc6@expand r2fc8@eval r2fca@library-expander r2fcc@boot-library-expand r2fce@rev-map-append r2fd0@build-exports r2fd2@make-export-subst r2fd4@make-export-env/macros r2fd6@generate-temporaries r2fd8@free-identifier=? r2fda@bound-identifier=? r2fdc@make-source-condition r2fde@extract-position-condition r2fe0@expression-position r2fe2@assertion-error r2fe4@syntax-error r2fe6@syntax-violation* r2fe8@syntax-violation r2fea@identifier? r2fec@datum->syntax r2fee@syntax->datum r2ff0@compile-r6rs-top-level r2ff2@pre-compile-r6rs-top-level r2ff4@interaction-environment r2ff6@top-level-context) (begin (set! r2c67@file-options-macro (lambda (r2ff7@x) ((lambda (r2ffa@valid-option?) (begin (set! r2ffa@valid-option? (lambda (r3003@x) (and (r2cf4@id? r3003@x) (memq (r2cf6@id->sym r3003@x) '(no-fail no-create no-truncate))))) ((lambda (r2ffb@t) ((lambda (r2ffd@ls/false) (if (and r2ffd@ls/false (apply (lambda (r2fff@opt*) (for-all r2ffa@valid-option? r2fff@opt*)) r2ffd@ls/false)) (apply (lambda (r3001@opt*) (r2eb5@bless (list 'make-file-options (list 'quote r3001@opt*)))) r2ffd@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r2ffb@t))) (r2eff@syntax-dispatch r2ffb@t '(_ . each-any)))) r2ff7@x))) '#f))) (set! r2c69@set-cons (lambda (r3005@x r3006@ls) (if (memq r3005@x r3006@ls) r3006@ls (cons r3005@x r3006@ls)))) (set! r2c6b@set-union (lambda (r3009@ls1 r300a@ls2) (if (null? r3009@ls1) r300a@ls2 (if (memq (car r3009@ls1) r300a@ls2) (r2c6b@set-union (cdr r3009@ls1) r300a@ls2) (cons (car r3009@ls1) (r2c6b@set-union (cdr r3009@ls1) r300a@ls2)))))) (set! r2c70@top-mark* '(top)) (set! r2c72@top-marked? (lambda (r300d@m*) (memq 'top r300d@m*))) (set! r2c74@gen-lexical (lambda (r300f@sym) (if (symbol? r300f@sym) (gensym r300f@sym) (if (r2cbc@stx? r300f@sym) (r2c74@gen-lexical (r2cf6@id->sym r300f@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" r300f@sym))))) (set! r2c76@gen-global (lambda (r3011@x) (r2c74@gen-lexical r3011@x))) (set! r2c78@gen-label (lambda (r3013@_) (gensym))) (set! r2c7a@gen-top-level-label (lambda (r3015@id r3016@rib) ((lambda (r301a@find) (begin (set! r301a@find (lambda (r3025@sym r3026@mark* r3027@sym* r3028@mark** r3029@label*) (and (pair? r3027@sym*) (if (and (eq? r3025@sym (car r3027@sym*)) (r2cf8@same-marks? r3026@mark* (car r3028@mark**))) (car r3029@label*) (r301a@find r3025@sym r3026@mark* (cdr r3027@sym*) (cdr r3028@mark**) (cdr r3029@label*)))))) ((lambda (r301b@sym r301c@mark*) ((lambda (r301f@sym*) ((lambda (r3021@t) (if r3021@t ((lambda (r3023@label) (if (r2b17@r29b7@imported-label->binding r3023@label) (gensym) r3023@label)) r3021@t) (gensym))) (and (memq r301b@sym (r2c8f@rib-sym* r3016@rib)) (r301a@find r301b@sym r301c@mark* r301f@sym* (r2c91@rib-mark** r3016@rib) (r2c93@rib-label* r3016@rib))))) (r2c8f@rib-sym* r3016@rib))) (r2cf6@id->sym r3015@id) (r2cc2@stx-mark* r3015@id)))) '#f))) (set! r2c7c@gen-define-label+loc (lambda (r302f@id r3030@rib) ((lambda (r3033@t) (if r3033@t ((lambda (r3035@env) ((lambda (r3037@label r3038@locs) (values r3037@label ((lambda (r303b@t) (if r303b@t (cdr r303b@t) ((lambda (r303d@loc) (begin (r2fb2@set-interaction-env-locs! r3035@env (cons (cons r3037@label r303d@loc) r3038@locs)) r303d@loc)) (r2c74@gen-lexical r302f@id)))) (assq r3037@label r3038@locs)))) (r2c7a@gen-top-level-label r302f@id r3030@rib) (r2fac@interaction-env-locs r3035@env))) r3033@t) (values (gensym) (r2c74@gen-lexical r302f@id)))) (r2ff6@top-level-context)))) (set! r2c7e@gen-define-label (lambda (r303f@id r3040@rib) (if (r2ff6@top-level-context) (r2c7a@gen-top-level-label r303f@id r3040@rib) (gensym)))) (set! r2c84@r2c7f (make-record-type-descriptor 'rib '#f 'r2c82 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! r2c86@r2c81 '#f) (set! r2c88@r2c80 (make-record-constructor-descriptor r2c84@r2c7f '#f r2c86@r2c81)) (set! r2c8b@rib? (record-predicate r2c84@r2c7f)) (set! r2c8d@make-rib (record-constructor r2c88@r2c80)) (set! r2c8f@rib-sym* (record-accessor r2c84@r2c7f '0)) (set! r2c91@rib-mark** (record-accessor r2c84@r2c7f '1)) (set! r2c93@rib-label* (record-accessor r2c84@r2c7f '2)) (set! r2c95@rib-sealed/freq (record-accessor r2c84@r2c7f '3)) (set! r2c97@rib-cache (record-accessor r2c84@r2c7f '4)) (set! r2c99@set-rib-sym*! (record-mutator r2c84@r2c7f '0)) (set! r2c9b@set-rib-mark**! (record-mutator r2c84@r2c7f '1)) (set! r2c9d@set-rib-label*! (record-mutator r2c84@r2c7f '2)) (set! r2c9f@set-rib-sealed/freq! (record-mutator r2c84@r2c7f '3)) (set! r2ca1@set-rib-cache! (record-mutator r2c84@r2c7f '4)) (set! r2ca3@make-empty-rib (lambda () (r2c8d@make-rib '() '() '() '#f '#f))) (set! r2ca5@extend-rib! (lambda (r3043@rib r3044@id r3045@label) ((lambda (r304a@find) (begin (set! r304a@find (lambda (r3057@sym r3058@mark* r3059@sym* r305a@mark** r305b@label*) (and (pair? r3059@sym*) (if (and (eq? r3057@sym (car r3059@sym*)) (r2cf8@same-marks? r3058@mark* (car r305a@mark**))) r305b@label* (r304a@find r3057@sym r3058@mark* (cdr r3059@sym*) (cdr r305a@mark**) (cdr r305b@label*)))))) (begin (if (r2c95@rib-sealed/freq r3043@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" r3043@rib) (void)) ((lambda (r304b@sym r304c@mark*) ((lambda (r304f@sym*) ((lambda (r3051@t) (if r3051@t ((lambda (r3053@p) (if (not (eq? r3045@label (car r3053@p))) (if (r2ff6@top-level-context) (set-car! r3053@p r3045@label) (r2fe8@syntax-violation '#f '"multiple definitions of identifier" r3044@id)) (void))) r3051@t) (begin (if (r2c97@rib-cache r3043@rib) (hashtable-update! (r2c97@rib-cache r3043@rib) r304b@sym (lambda (r3055@e) (cons (cons r304c@mark* r3045@label) r3055@e)) '()) (void)) (r2c99@set-rib-sym*! r3043@rib (cons r304b@sym r304f@sym*)) (r2c9b@set-rib-mark**! r3043@rib (cons r304c@mark* (r2c91@rib-mark** r3043@rib))) (r2c9d@set-rib-label*! r3043@rib (cons r3045@label (r2c93@rib-label* r3043@rib)))))) (and (memq r304b@sym (r2c8f@rib-sym* r3043@rib)) (r304a@find r304b@sym r304c@mark* r304f@sym* (r2c91@rib-mark** r3043@rib) (r2c93@rib-label* r3043@rib))))) (r2c8f@rib-sym* r3043@rib))) (r2cf6@id->sym r3044@id) (r2cc2@stx-mark* r3044@id))))) '#f))) (set! r2ca7@extend-rib/nc! (lambda (r3061@rib r3062@id r3063@label) ((lambda (r3067@sym r3068@mark*) ((lambda (r306b@sym*) (begin (if (r2c97@rib-cache r3061@rib) (hashtable-update! (r2c97@rib-cache r3061@rib) r3067@sym (lambda (r306d@e) (cons (cons r3068@mark* r3063@label) r306d@e)) '()) (void)) (r2c99@set-rib-sym*! r3061@rib (cons r3067@sym r306b@sym*)) (r2c9b@set-rib-mark**! r3061@rib (cons r3068@mark* (r2c91@rib-mark** r3061@rib))) (r2c9d@set-rib-label*! r3061@rib (cons r3063@label (r2c93@rib-label* r3061@rib))))) (r2c8f@rib-sym* r3061@rib))) (r2cf6@id->sym r3062@id) (r2cc2@stx-mark* r3062@id)))) (set! r2ca9@make-rib-map (lambda (r306f@sym*) ((lambda (r3071@ht) ((letrec ((r3073@f (lambda (r3075@i r3076@sym*) (if (null? r3076@sym*) r3071@ht (begin (hashtable-update! r3071@ht (car r3076@sym*) (lambda (r3079@x) (cons r3075@i r3079@x)) '()) (r3073@f (+ r3075@i '1) (cdr r3076@sym*))))))) r3073@f) '0 r306f@sym*)) (make-eq-hashtable)))) (set! r2cab@seal-rib! (lambda (r307b@rib) ((lambda (r307d@sym*) (if (not (null? r307d@sym*)) (begin (r2c99@set-rib-sym*! r307b@rib (list->vector r307d@sym*)) (r2c9b@set-rib-mark**! r307b@rib (list->vector (r2c91@rib-mark** r307b@rib))) (r2c9d@set-rib-label*! r307b@rib (list->vector (r2c93@rib-label* r307b@rib))) (r2c9f@set-rib-sealed/freq! r307b@rib (r2ca9@make-rib-map r307d@sym*))) (void))) (r2c8f@rib-sym* r307b@rib)))) (set! r2cad@unseal-rib! (lambda (r307f@rib) (if (r2c95@rib-sealed/freq r307f@rib) (begin (r2c9f@set-rib-sealed/freq! r307f@rib '#f) (r2c99@set-rib-sym*! r307f@rib (vector->list (r2c8f@rib-sym* r307f@rib))) (r2c9b@set-rib-mark**! r307f@rib (vector->list (r2c91@rib-mark** r307f@rib))) (r2c9d@set-rib-label*! r307f@rib (vector->list (r2c93@rib-label* r307f@rib)))) (void)))) (set! r2caf@make-full-rib (lambda (r3081@id* r3082@label*) ((lambda (r3085@r) (begin (r2cab@seal-rib! r3085@r) r3085@r)) (r2c8d@make-rib (map r2cf6@id->sym r3081@id*) (map r2cc2@stx-mark* r3081@id*) r3082@label* '#f '#f)))) (set! r2cb5@r2cb0 (make-record-type-descriptor 'stx '#f 'r2cb3 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! r2cb7@r2cb2 '#f) (set! r2cb9@r2cb1 (make-record-constructor-descriptor r2cb5@r2cb0 '#f r2cb7@r2cb2)) (set! r2cbc@stx? (record-predicate r2cb5@r2cb0)) (set! r2cbe@make-stx (record-constructor r2cb9@r2cb1)) (set! r2cc0@stx-expr (record-accessor r2cb5@r2cb0 '0)) (set! r2cc2@stx-mark* (record-accessor r2cb5@r2cb0 '1)) (set! r2cc4@stx-subst* (record-accessor r2cb5@r2cb0 '2)) (set! r2cc6@stx-ae* (record-accessor r2cb5@r2cb0 '3)) (set! r2cc8@set-stx-expr! (record-mutator r2cb5@r2cb0 '0)) (set! r2cca@set-stx-mark*! (record-mutator r2cb5@r2cb0 '1)) (set! r2ccc@set-stx-subst*! (record-mutator r2cb5@r2cb0 '2)) (set! r2cce@set-stx-ae*! (record-mutator r2cb5@r2cb0 '3)) (set! r2cd0@rp (r289b@r27c2@make-record-printer 'stx (lambda (r3087@x r3088@p r3089@wr) (begin (display '"#<syntax " r3088@p) (write (r2d0a@stx->datum r3087@x) r3088@p) ((lambda (r308d@expr) (if (r2893@r27b2@annotation? r308d@expr) ((lambda (r308f@src) (if (pair? r308f@src) (begin (display '" [" r3088@p) (display (cdr r308f@src) r3088@p) (display '" of " r3088@p) (display (car r308f@src) r3088@p) (display '"]" r3088@p)) (void))) (r2894@r27b4@annotation-source r308d@expr)) (void))) (r2cc0@stx-expr r3087@x)) (display '">" r3088@p))))) (set! r2cd2@datum->stx (lambda (r3091@id r3092@datum) (r2cbe@make-stx r3092@datum (r2cc2@stx-mark* r3091@id) (r2cc4@stx-subst* r3091@id) (r2cc6@stx-ae* r3091@id)))) (set! r2cd4@gen-mark (lambda () (string '#\m))) (set! r2cd6@anti-mark '#f) (set! r2cd8@anti-mark? not) (set! r2cda@join-wraps (lambda (r3095@m1* r3096@s1* r3097@ae1* r3098@e) ((lambda (r309e@cancel) (begin (set! r309e@cancel (lambda (r30a5@ls1 r30a6@ls2) ((letrec ((r30a9@f (lambda (r30ab@x r30ac@ls1) (if (null? r30ac@ls1) (cdr r30a6@ls2) (cons r30ab@x (r30a9@f (car r30ac@ls1) (cdr r30ac@ls1))))))) r30a9@f) (car r30a5@ls1) (cdr r30a5@ls1)))) ((lambda (r309f@m2* r30a0@s2* r30a1@ae2*) (if (and (not (null? r3095@m1*)) (not (null? r309f@m2*)) (r2cd8@anti-mark? (car r309f@m2*))) (values (r309e@cancel r3095@m1* r309f@m2*) (r309e@cancel r3096@s1* r30a0@s2*) (r309e@cancel r3097@ae1* r30a1@ae2*)) (values (append r3095@m1* r309f@m2*) (append r3096@s1* r30a0@s2*) (append r3097@ae1* r30a1@ae2*)))) (r2cc2@stx-mark* r3098@e) (r2cc4@stx-subst* r3098@e) (r2cc6@stx-ae* r3098@e)))) '#f))) (set! r2cdc@mkstx (lambda (r30af@e r30b0@m* r30b1@s* r30b2@ae*) (if (and (r2cbc@stx? r30af@e) (not (r2c72@top-marked? r30b0@m*))) (call-with-values (lambda () (r2cda@join-wraps r30b0@m* r30b1@s* r30b2@ae* r30af@e)) (lambda (r30bd@r30b8 r30be@r30ba r30bf@r30bc) ((lambda (r30c3@ae* r30c4@s* r30c5@m*) (r2cbe@make-stx (r2cc0@stx-expr r30af@e) r30c5@m* r30c4@s* r30c3@ae*)) r30bf@r30bc r30be@r30ba r30bd@r30b8))) (r2cbe@make-stx r30af@e r30b0@m* r30b1@s* r30b2@ae*)))) (set! r2cde@add-mark (lambda (r30c9@m r30ca@e r30cb@ae) (r2cdc@mkstx r30ca@e (list r30c9@m) '(shift) (list r30cb@ae)))) (set! r2ce0@add-subst (lambda (r30cf@subst r30d0@e) (r2cdc@mkstx r30d0@e '() (list r30cf@subst) '()))) (set! r2ce2@syntax-kind? (lambda (r30d3@x r30d4@p?) (if (r2cbc@stx? r30d3@x) (r2ce2@syntax-kind? (r2cc0@stx-expr r30d3@x) r30d4@p?) (if (r2893@r27b2@annotation? r30d3@x) (r2ce2@syntax-kind? (r2895@r27b6@annotation-expression r30d3@x) r30d4@p?) (r30d4@p? r30d3@x))))) (set! r2ce4@syntax-vector->list (lambda (r30d7@x) (if (r2cbc@stx? r30d7@x) ((lambda (r30d9@ls r30da@m* r30db@s* r30dc@ae*) (map (lambda (r30e1@x) (r2cdc@mkstx r30e1@x r30da@m* r30db@s* r30dc@ae*)) r30d9@ls)) (r2ce4@syntax-vector->list (r2cc0@stx-expr r30d7@x)) (r2cc2@stx-mark* r30d7@x) (r2cc4@stx-subst* r30d7@x) (r2cc6@stx-ae* r30d7@x)) (if (r2893@r27b2@annotation? r30d7@x) (r2ce4@syntax-vector->list (r2895@r27b6@annotation-expression r30d7@x)) (if (vector? r30d7@x) (vector->list r30d7@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" r30d7@x)))))) (set! r2ce6@syntax-pair? (lambda (r30e3@x) (r2ce2@syntax-kind? r30e3@x pair?))) (set! r2ce8@syntax-vector? (lambda (r30e5@x) (r2ce2@syntax-kind? r30e5@x vector?))) (set! r2cea@syntax-null? (lambda (r30e7@x) (r2ce2@syntax-kind? r30e7@x null?))) (set! r2cec@syntax-list? (lambda (r30e9@x) (or (r2cea@syntax-null? r30e9@x) (and (r2ce6@syntax-pair? r30e9@x) (r2cec@syntax-list? (r2cf0@syntax-cdr r30e9@x)))))) (set! r2cee@syntax-car (lambda (r30eb@x) (if (r2cbc@stx? r30eb@x) (r2cdc@mkstx (r2cee@syntax-car (r2cc0@stx-expr r30eb@x)) (r2cc2@stx-mark* r30eb@x) (r2cc4@stx-subst* r30eb@x) (r2cc6@stx-ae* r30eb@x)) (if (r2893@r27b2@annotation? r30eb@x) (r2cee@syntax-car (r2895@r27b6@annotation-expression r30eb@x)) (if (pair? r30eb@x) (car r30eb@x) (assertion-violation 'syntax-car '"BUG: not a pair" r30eb@x)))))) (set! r2cf0@syntax-cdr (lambda (r30ed@x) (if (r2cbc@stx? r30ed@x) (r2cdc@mkstx (r2cf0@syntax-cdr (r2cc0@stx-expr r30ed@x)) (r2cc2@stx-mark* r30ed@x) (r2cc4@stx-subst* r30ed@x) (r2cc6@stx-ae* r30ed@x)) (if (r2893@r27b2@annotation? r30ed@x) (r2cf0@syntax-cdr (r2895@r27b6@annotation-expression r30ed@x)) (if (pair? r30ed@x) (cdr r30ed@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" r30ed@x)))))) (set! r2cf2@syntax->list (lambda (r30ef@x) (if (r2ce6@syntax-pair? r30ef@x) (cons (r2cee@syntax-car r30ef@x) (r2cf2@syntax->list (r2cf0@syntax-cdr r30ef@x))) (if (r2cea@syntax-null? r30ef@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" r30ef@x))))) (set! r2cf4@id? (lambda (r30f1@x) (and (r2cbc@stx? r30f1@x) (symbol? (r2cc0@stx-expr r30f1@x))))) (set! r2cf6@id->sym (lambda (r30f3@x) (r2cc0@stx-expr r30f3@x))) (set! r2cf8@same-marks? (lambda (r30f5@x r30f6@y) (or (and (null? r30f5@x) (null? r30f6@y)) (and (pair? r30f5@x) (pair? r30f6@y) (eq? (car r30f5@x) (car r30f6@y)) (r2cf8@same-marks? (cdr r30f5@x) (cdr r30f6@y)))))) (set! r2cfa@bound-id=? (lambda (r30f9@x r30fa@y) (and (eq? (r2cf6@id->sym r30f9@x) (r2cf6@id->sym r30fa@y)) (r2cf8@same-marks? (r2cc2@stx-mark* r30f9@x) (r2cc2@stx-mark* r30fa@y))))) (set! r2cfc@free-id=? (lambda (r30fd@i r30fe@j) ((lambda (r3101@t0 r3102@t1) (if (or r3101@t0 r3102@t1) (eq? r3101@t0 r3102@t1) (eq? (r2cf6@id->sym r30fd@i) (r2cf6@id->sym r30fe@j)))) (r2d10@id->real-label r30fd@i) (r2d10@id->real-label r30fe@j)))) (set! r2cfe@valid-bound-ids? (lambda (r3105@id*) (and (for-all r2cf4@id? r3105@id*) (r2d00@distinct-bound-ids? r3105@id*)))) (set! r2d00@distinct-bound-ids? (lambda (r3107@id*) (or (null? r3107@id*) (and (not (r2d02@bound-id-member? (car r3107@id*) (cdr r3107@id*))) (r2d00@distinct-bound-ids? (cdr r3107@id*)))))) (set! r2d02@bound-id-member? (lambda (r3109@id r310a@id*) (and (pair? r310a@id*) (or (r2cfa@bound-id=? r3109@id (car r310a@id*)) (r2d02@bound-id-member? r3109@id (cdr r310a@id*)))))) (set! r2d04@self-evaluating? (lambda (r310d@x) (or (number? r310d@x) (string? r310d@x) (char? r310d@x) (boolean? r310d@x) (regexp? r310d@x) (bytevector? r310d@x)))) (set! r2d06@strip-annotations (lambda (r310f@x) (if (pair? r310f@x) (cons (r2d06@strip-annotations (car r310f@x)) (r2d06@strip-annotations (cdr r310f@x))) (if (vector? r310f@x) (vector-map r2d06@strip-annotations r310f@x) (if (r2893@r27b2@annotation? r310f@x) (r2892@r27b0@annotation-stripped r310f@x) r310f@x))))) (set! r2d08@strip (lambda (r3111@x r3112@m*) (if (r2c72@top-marked? r3112@m*) (if (or (r2893@r27b2@annotation? r3111@x) (and (pair? r3111@x) (r2893@r27b2@annotation? (car r3111@x))) (and (vector? r3111@x) (> (vector-length r3111@x) '0) (r2893@r27b2@annotation? (vector-ref r3111@x '0)))) (r2d06@strip-annotations r3111@x) r3111@x) ((letrec ((r3115@f (lambda (r3117@x) (if (r2cbc@stx? r3117@x) (r2d08@strip (r2cc0@stx-expr r3117@x) (r2cc2@stx-mark* r3117@x)) (if (r2893@r27b2@annotation? r3117@x) (r2892@r27b0@annotation-stripped r3117@x) (if (pair? r3117@x) ((lambda (r3119@a r311a@d) (if (and (eq? r3119@a (car r3117@x)) (eq? r311a@d (cdr r3117@x))) r3117@x (cons r3119@a r311a@d))) (r3115@f (car r3117@x)) (r3115@f (cdr r3117@x))) (if (vector? r3117@x) ((lambda (r311d@old) ((lambda (r311f@new) (if (for-all eq? r311d@old r311f@new) r3117@x (list->vector r311f@new))) (map r3115@f r311d@old))) (vector->list r3117@x)) r3117@x))))))) r3115@f) r3111@x)))) (set! r2d0a@stx->datum (lambda (r3121@x) (r2d08@strip r3121@x '()))) (set! r2d0c@same-marks*? (lambda (r3123@mark* r3124@mark** r3125@si) (if (null? r3125@si) '#f (if (r2cf8@same-marks? r3123@mark* (vector-ref r3124@mark** (car r3125@si))) (car r3125@si) (r2d0c@same-marks*? r3123@mark* r3124@mark** (cdr r3125@si)))))) (set! r2d0e@id->label (lambda (r3129@id) (or (r2d10@id->real-label r3129@id) ((lambda (r312b@t) (if r312b@t ((lambda (r312d@env) ((lambda (r312f@rib) (call-with-values (lambda () (r2c7c@gen-define-label+loc r3129@id r312f@rib)) (lambda (r3135@r3132 r3136@r3134) ((lambda (r3139@loc_ r313a@lab) (begin (r2ca5@extend-rib! r312f@rib r3129@id r313a@lab) r313a@lab)) r3136@r3134 r3135@r3132)))) (r2fa8@interaction-env-rib r312d@env))) r312b@t) '#f)) (r2ff6@top-level-context))))) (set! r2d10@id->real-label (lambda (r313d@id) ((lambda (r313f@sym) ((letrec ((r3141@search (lambda (r3143@subst* r3144@mark*) (if (null? r3143@subst*) '#f (if (eq? (car r3143@subst*) 'shift) (r3141@search (cdr r3143@subst*) (cdr r3144@mark*)) ((lambda (r3147@rib) ((lambda (r3149@t) (if r3149@t ((lambda (r314b@ht) ((lambda (r314d@si) ((lambda (r314f@i) (if r314f@i (vector-ref (r2c93@rib-label* r3147@rib) r314f@i) (r3141@search (cdr r3143@subst*) r3144@mark*))) (and r314d@si (r2d0c@same-marks*? r3144@mark* (r2c91@rib-mark** r3147@rib) (reverse r314d@si))))) (hashtable-ref r314b@ht r313f@sym '#f))) r3149@t) ((letrec ((r3151@f (lambda (r3153@sym* r3154@mark** r3155@label*) (if (null? r3153@sym*) (r3141@search (cdr r3143@subst*) r3144@mark*) (if (and (eq? (car r3153@sym*) r313f@sym) (r2cf8@same-marks? (car r3154@mark**) r3144@mark*)) (car r3155@label*) (r3151@f (cdr r3153@sym*) (cdr r3154@mark**) (cdr r3155@label*))))))) r3151@f) (r2c8f@rib-sym* r3147@rib) (r2c91@rib-mark** r3147@rib) (r2c93@rib-label* r3147@rib)))) (r2c95@rib-sealed/freq r3147@rib))) (car r3143@subst*))))))) r3141@search) (r2cc4@stx-subst* r313d@id) (r2cc2@stx-mark* r313d@id))) (r2cf6@id->sym r313d@id)))) (set! r2d12@label->binding (lambda (r3159@x r315a@r) ((lambda (r315d@t) (if r315d@t ((lambda (r315f@b) (if (and (pair? r315f@b) (eq? (car r315f@b) '$core-rtd)) (cons '$rtd (map r2eb5@bless (cdr r315f@b))) (if (and (pair? r315f@b) (eq? (car r315f@b) 'global-rtd)) ((lambda (r3161@lib r3162@loc) (cons '$rtd (symbol-value r3162@loc))) (cadr r315f@b) (cddr r315f@b)) r315f@b))) r315d@t) ((lambda (r3165@t) (if r3165@t (cdr r3165@t) ((lambda (r3167@t) (if r3167@t ((lambda (r3169@env) ((lambda (r316b@t) (if r316b@t ((lambda (r316d@p) (cons* 'lexical (cdr r316d@p) '#f)) r316b@t) '(displaced-lexical . #f))) (assq r3159@x (r2fac@interaction-env-locs r3169@env)))) r3167@t) '(displaced-lexical . #f))) (r2ff6@top-level-context)))) (assq r3159@x r315a@r)))) (r2b17@r29b7@imported-label->binding r3159@x)))) (set! r2d14@make-binding cons) (set! r2d16@binding-type car) (set! r2d18@binding-value cdr) (set! r2d1a@raise-unbound-error (lambda (r316f@id) (r2fe6@syntax-violation* '#f '"unbound identifier" r316f@id (r4d1f@r4b65@make-undefined-violation)))) (set! r2d1c@syntax-type (lambda (r3171@e r3172@r) (if (r2cf4@id? r3171@e) ((lambda (r3175@id) ((lambda (r3177@label) ((lambda (r3179@b) ((lambda (r317b@type) ((lambda () (begin (if (not r3177@label) (r2d1a@raise-unbound-error r3175@id) (void)) ((lambda (r317d@t) (if (memv r317d@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values r317b@type (r2d18@binding-value r3179@b) r3175@id) (values 'other '#f '#f))) r317b@type))))) (r2d16@binding-type r3179@b))) (r2d12@label->binding r3177@label r3172@r))) (r2d0e@id->label r3175@id))) r3171@e) (if (r2ce6@syntax-pair? r3171@e) ((lambda (r317f@id) (if (r2cf4@id? r317f@id) ((lambda (r3181@label) ((lambda (r3183@b) ((lambda (r3185@type) ((lambda () (begin (if (not r3181@label) (r2d1a@raise-unbound-error r317f@id) (void)) ((lambda (r3187@t) (if (memv r3187@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values r3185@type (r2d18@binding-value r3183@b) r317f@id) (values 'call '#f '#f))) r3185@type))))) (r2d16@binding-type r3183@b))) (r2d12@label->binding r3181@label r3172@r))) (r2d0e@id->label r317f@id)) (values 'call '#f '#f))) (r2cee@syntax-car r3171@e)) ((lambda (r3189@d) (if (r2d04@self-evaluating? r3189@d) (values 'constant r3189@d '#f) (values 'other '#f '#f))) (r2d0a@stx->datum r3171@e)))))) (set! r2d2a@sanitize-binding (lambda (r318b@x r318c@src) (if (procedure? r318b@x) (cons* 'local-macro r318b@x r318c@src) (if (and (pair? r318b@x) (eq? (car r318b@x) 'macro!) (procedure? (cdr r318b@x))) (cons* 'local-macro! (cdr r318b@x) r318c@src) (if (and (pair? r318b@x) (eq? (car r318b@x) '$rtd)) r318b@x (assertion-violation 'expand '"invalid transformer" r318b@x)))))) (set! r2d2c@make-variable-transformer (lambda (r318f@x) (if (procedure? r318f@x) (cons 'macro! r318f@x) (assertion-violation 'make-variable-transformer '"not a procedure" r318f@x)))) (set! r2d2e@variable-transformer? (lambda (r3191@x) (and (pair? r3191@x) (eq? (car r3191@x) 'macro!) (procedure? (cdr r3191@x))))) (set! r2d30@variable-transformer-procedure (lambda (r3193@x) (if (r2d2e@variable-transformer? r3193@x) (cdr r3193@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" r3193@x)))) (set! r2d32@make-eval-transformer (lambda (r3195@x) (r2d2a@sanitize-binding (eval-core (r28f2@r28aa@expanded->core r3195@x)) r3195@x))) (set! r2e83@parse-define (lambda (r3197@x) ((lambda (r3199@t) ((lambda (r319b@ls/false) (if (and r319b@ls/false (apply (lambda (r319d@id r319e@fmls r319f@b r31a0@b*) (r2cf4@id? r319d@id)) r319b@ls/false)) (apply (lambda (r31a5@id r31a6@fmls r31a7@b r31a8@b*) (begin (r2f25@verify-formals r31a6@fmls r3197@x) (values r31a5@id (cons 'defun (cons r31a6@fmls (cons r31a7@b r31a8@b*)))))) r319b@ls/false) ((lambda (r31ad@t) ((lambda (r31af@ls/false) (if (and r31af@ls/false (apply (lambda (r31b1@id r31b2@val) (r2cf4@id? r31b1@id)) r31af@ls/false)) (apply (lambda (r31b5@id r31b6@val) (values r31b5@id (cons 'expr r31b6@val))) r31af@ls/false) ((lambda (r31b9@t) ((lambda (r31bb@ls/false) (if (and r31bb@ls/false (apply (lambda (r31bd@id) (r2cf4@id? r31bd@id)) r31bb@ls/false)) (apply (lambda (r31bf@id) (values r31bf@id (cons 'expr (r2eb5@bless '(void))))) r31bb@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r31b9@t))) (r2eff@syntax-dispatch r31b9@t '(_ any)))) r31ad@t))) (r2eff@syntax-dispatch r31ad@t '(_ any any)))) r3199@t))) (r2eff@syntax-dispatch r3199@t '(_ (any . any) any . each-any)))) r3197@x))) (set! r2e85@parse-define-syntax (lambda (r31c1@x) ((lambda (r31c3@t) ((lambda (r31c5@ls/false) (if (and r31c5@ls/false (apply (lambda (r31c7@id r31c8@val) (r2cf4@id? r31c7@id)) r31c5@ls/false)) (apply (lambda (r31cb@id r31cc@val) (values r31cb@id r31cc@val)) r31c5@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r31c3@t))) (r2eff@syntax-dispatch r31c3@t '(_ any any)))) r31c1@x))) (set! r2e87@scheme-stx-hashtable (make-eq-hashtable)) (set! r2e89@scheme-stx (lambda (r31cf@sym) (or (hashtable-ref r2e87@scheme-stx-hashtable r31cf@sym '#f) ((lambda (r31d1@subst) ((lambda (r31d3@stx) ((lambda (r31d5@stx) ((lambda () (begin (hashtable-set! r2e87@scheme-stx-hashtable r31cf@sym r31d5@stx) r31d5@stx)))) ((lambda (r31d7@t) (if r31d7@t ((lambda (r31d9@x) ((lambda (r31db@name r31dc@label) (r2ce0@add-subst (r2c8d@make-rib (list r31db@name) (list r2c70@top-mark*) (list r31dc@label) '#f '#f) r31d3@stx)) (car r31d9@x) (cdr r31d9@x))) r31d7@t) r31d3@stx)) (assq r31cf@sym r31d1@subst)))) (r2cbe@make-stx r31cf@sym r2c70@top-mark* '() '()))) (r2aed@r2963@library-subst (r2b11@r29ab@find-library-by-name '(psyntax system $all))))))) (set! r2e8b@lexical-var car) (set! r2e8d@lexical-mutable? cdr) (set! r2e8f@set-lexical-mutable! set-cdr!) (set! r2e91@add-lexical (lambda (r31df@lab r31e0@lex r31e1@r) (cons (cons* r31df@lab 'lexical r31e0@lex '#f) r31e1@r))) (set! r2e93@add-lexicals (lambda (r31e5@lab* r31e6@lex* r31e7@r) (if (null? r31e5@lab*) r31e7@r (r2e93@add-lexicals (cdr r31e5@lab*) (cdr r31e6@lex*) (r2e91@add-lexical (car r31e5@lab*) (car r31e6@lex*) r31e7@r))))) (set! r2e95@letrec-helper (lambda (r31eb@e r31ec@r r31ed@mr r31ee@build) ((lambda (r31f3@t) ((lambda (r31f5@ls/false) (if r31f5@ls/false (apply (lambda (r31f7@lhs* r31f8@rhs* r31f9@b r31fa@b*) (if (not (r2cfe@valid-bound-ids? r31f7@lhs*)) (r2eb9@invalid-fmls-error r31eb@e r31f7@lhs*) ((lambda (r31ff@lex* r3200@lab*) ((lambda (r3203@rib r3204@r) ((lambda (r3207@body r3208@rhs*) (r31ee@build '#f r31ff@lex* r3208@rhs* r3207@body)) (r2f37@chi-internal (r2ce0@add-subst r3203@rib (cons r31f9@b r31fa@b*)) r3204@r r31ed@mr) (r2f1d@chi-expr* (map (lambda (r320b@x) (r2ce0@add-subst r3203@rib r320b@x)) r31f8@rhs*) r3204@r r31ed@mr))) (r2caf@make-full-rib r31f7@lhs* r3200@lab*) (r2e93@add-lexicals r3200@lab* r31ff@lex* r31ec@r))) (map r2c74@gen-lexical r31f7@lhs*) (map r2c78@gen-label r31f7@lhs*)))) r31f5@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r31f3@t))) (r2eff@syntax-dispatch r31f3@t '(_ #(each (any any)) any . each-any)))) r31eb@e))) (set! r2e97@letrec-transformer (lambda (r320d@e r320e@r r320f@mr) (r2e95@letrec-helper r320d@e r320e@r r320f@mr r2c55@r2bc6@build-letrec))) (set! r2e99@letrec*-transformer (lambda (r3213@e r3214@r r3215@mr) (r2e95@letrec-helper r3213@e r3214@r r3215@mr r2c56@r2bc8@build-letrec*))) (set! r2e9b@fluid-let-syntax-transformer (lambda (r3219@e r321a@r r321b@mr) ((lambda (r3220@lookup) (begin (set! r3220@lookup (lambda (r3233@x) (or (r2d0e@id->label r3233@x) (r2fe8@syntax-violation '#f '"unbound identifier" r3219@e r3233@x)))) ((lambda (r3221@t) ((lambda (r3223@ls/false) (if r3223@ls/false (apply (lambda (r3225@lhs* r3226@rhs* r3227@b r3228@b*) (if (not (r2cfe@valid-bound-ids? r3225@lhs*)) (r2eb9@invalid-fmls-error r3219@e r3225@lhs*) ((lambda (r322d@lab* r322e@rhs*) (r2f37@chi-internal (cons r3227@b r3228@b*) (append (map cons r322d@lab* r322e@rhs*) r321a@r) (append (map cons r322d@lab* r322e@rhs*) r321b@mr))) (map r3220@lookup r3225@lhs*) (map (lambda (r3231@x) (r2d32@make-eval-transformer (r2f5c@expand-transformer r3231@x r321b@mr))) r3226@rhs*)))) r3223@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3221@t))) (r2eff@syntax-dispatch r3221@t '(_ #(each (any any)) any . each-any)))) r3219@e))) '#f))) (set! r2e9d@type-descriptor-transformer (lambda (r3235@e r3236@r r3237@mr) ((lambda (r323b@t) ((lambda (r323d@ls/false) (if (and r323d@ls/false (apply (lambda (r323f@id) (r2cf4@id? r323f@id)) r323d@ls/false)) (apply (lambda (r3241@id) ((lambda (r3243@lab) ((lambda (r3245@b) ((lambda (r3247@type) ((lambda () (begin (if (not r3243@lab) (r2d1a@raise-unbound-error r3241@id) (void)) (if (not (and (eq? r3247@type '$rtd) (not (list? (r2d18@binding-value r3245@b))))) (r2fe8@syntax-violation '#f '"not a record type" r3235@e) (void)) (list 'quote (r2d18@binding-value r3245@b)))))) (r2d16@binding-type r3245@b))) (r2d12@label->binding r3243@lab r3236@r))) (r2d0e@id->label r3241@id))) r323d@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r323b@t))) (r2eff@syntax-dispatch r323b@t '(_ any)))) r3235@e))) (set! r2e9f@record-type-descriptor-transformer (lambda (r3249@e r324a@r r324b@mr) ((lambda (r324f@t) ((lambda (r3251@ls/false) (if (and r3251@ls/false (apply (lambda (r3253@id) (r2cf4@id? r3253@id)) r3251@ls/false)) (apply (lambda (r3255@id) ((lambda (r3257@lab) ((lambda (r3259@b) ((lambda (r325b@type) ((lambda () (begin (if (not r3257@lab) (r2d1a@raise-unbound-error r3255@id) (void)) (if (not (and (eq? r325b@type '$rtd) (list? (r2d18@binding-value r3259@b)))) (r2fe8@syntax-violation '#f '"not a record type" r3249@e) (void)) (r2f21@chi-expr (car (r2d18@binding-value r3259@b)) r324a@r r324b@mr))))) (r2d16@binding-type r3259@b))) (r2d12@label->binding r3257@lab r324a@r))) (r2d0e@id->label r3255@id))) r3251@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r324f@t))) (r2eff@syntax-dispatch r324f@t '(_ any)))) r3249@e))) (set! r2ea1@record-constructor-descriptor-transformer (lambda (r325d@e r325e@r r325f@mr) ((lambda (r3263@t) ((lambda (r3265@ls/false) (if (and r3265@ls/false (apply (lambda (r3267@id) (r2cf4@id? r3267@id)) r3265@ls/false)) (apply (lambda (r3269@id) ((lambda (r326b@lab) ((lambda (r326d@b) ((lambda (r326f@type) ((lambda () (begin (if (not r326b@lab) (r2d1a@raise-unbound-error r3269@id) (void)) (if (not (and (eq? r326f@type '$rtd) (list? (r2d18@binding-value r326d@b)))) (r2fe8@syntax-violation '#f '"invalid type" r325d@e) (void)) (r2f21@chi-expr (cadr (r2d18@binding-value r326d@b)) r325e@r r325f@mr))))) (r2d16@binding-type r326d@b))) (r2d12@label->binding r326b@lab r325e@r))) (r2d0e@id->label r3269@id))) r3265@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3263@t))) (r2eff@syntax-dispatch r3263@t '(_ any)))) r325d@e))) (set! r2ea3@when-macro (lambda (r3271@e) ((lambda (r3273@t) ((lambda (r3275@ls/false) (if r3275@ls/false (apply (lambda (r3277@test r3278@e r3279@e*) (r2eb5@bless (list 'if r3277@test (cons 'begin (cons r3278@e r3279@e*))))) r3275@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3273@t))) (r2eff@syntax-dispatch r3273@t '(_ any any . each-any)))) r3271@e))) (set! r2ea5@unless-macro (lambda (r327d@e) ((lambda (r327f@t) ((lambda (r3281@ls/false) (if r3281@ls/false (apply (lambda (r3283@test r3284@e r3285@e*) (r2eb5@bless (list 'if (list 'not r3283@test) (cons 'begin (cons r3284@e r3285@e*))))) r3281@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r327f@t))) (r2eff@syntax-dispatch r327f@t '(_ any any . each-any)))) r327d@e))) (set! r2ea7@if-transformer (lambda (r3289@e r328a@r r328b@mr) ((lambda (r328f@t) ((lambda (r3291@ls/false) (if r3291@ls/false (apply (lambda (r3293@e0 r3294@e1 r3295@e2) (list 'if (r2f21@chi-expr r3293@e0 r328a@r r328b@mr) (r2f21@chi-expr r3294@e1 r328a@r r328b@mr) (r2f21@chi-expr r3295@e2 r328a@r r328b@mr))) r3291@ls/false) ((lambda (r3299@t) ((lambda (r329b@ls/false) (if r329b@ls/false (apply (lambda (r329d@e0 r329e@e1) (list 'if (r2f21@chi-expr r329d@e0 r328a@r r328b@mr) (r2f21@chi-expr r329e@e1 r328a@r r328b@mr) (r2c54@r2bc4@build-void))) r329b@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3299@t))) (r2eff@syntax-dispatch r3299@t '(_ any any)))) r328f@t))) (r2eff@syntax-dispatch r328f@t '(_ any any any)))) r3289@e))) (set! r2ea9@and-transformer (lambda (r32a1@e r32a2@r r32a3@mr) ((lambda (r32a7@t) ((lambda (r32a9@ls/false) (if r32a9@ls/false (apply (lambda (r32ab@e*) (cons 'and (r2f1d@chi-expr* r32ab@e* r32a2@r r32a3@mr))) r32a9@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r32a7@t))) (r2eff@syntax-dispatch r32a7@t '(_ . each-any)))) r32a1@e))) (set! r2eab@or-transformer (lambda (r32ad@e r32ae@r r32af@mr) ((lambda (r32b3@t) ((lambda (r32b5@ls/false) (if r32b5@ls/false (apply (lambda (r32b7@e*) (cons 'or (r2f1d@chi-expr* r32b7@e* r32ae@r r32af@mr))) r32b5@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r32b3@t))) (r2eff@syntax-dispatch r32b3@t '(_ . each-any)))) r32ad@e))) (set! r2ead@case-macro (lambda (r32b9@e) ((lambda (r32bc@build-last r32be@build-one) (begin (set! r32bc@build-last (lambda (r32e3@cls) ((lambda (r32e5@t) ((lambda (r32e7@ls/false) (if r32e7@ls/false (apply (lambda (r32e9@e r32ea@e*) (cons 'begin (cons r32e9@e r32ea@e*))) r32e7@ls/false) ((lambda (r32ed@t) ((lambda (r32ef@ls/false) (if r32ef@ls/false (apply (lambda () (r32be@build-one r32e3@cls '(if #f #f))) r32ef@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r32ed@t))) (r2eff@syntax-dispatch r32ed@t '_))) r32e5@t))) (r2eff@syntax-dispatch r32e5@t '(#(scheme-id else) any . each-any)))) r32e3@cls))) (set! r32be@build-one (lambda (r32d5@cls r32d6@k) ((lambda (r32d9@t) ((lambda (r32db@ls/false) (if r32db@ls/false (apply (lambda (r32dd@d* r32de@e r32df@e*) (list 'if (list 'memv 't (list 'quote r32dd@d*)) (cons 'begin (cons r32de@e r32df@e*)) r32d6@k)) r32db@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r32d9@t))) (r2eff@syntax-dispatch r32d9@t '(each-any any . each-any)))) r32d5@cls))) ((lambda (r32bf@t) ((lambda (r32c1@ls/false) (if r32c1@ls/false (apply (lambda (r32c3@expr) (r2eb5@bless (cons 'let (cons (list (list 't r32c3@expr)) '((if #f #f)))))) r32c1@ls/false) ((lambda (r32c5@t) ((lambda (r32c7@ls/false) (if r32c7@ls/false (apply (lambda (r32c9@expr r32ca@cls r32cb@cls*) (r2eb5@bless (list 'let (list (list 't r32c9@expr)) ((letrec ((r32cf@f (lambda (r32d1@cls r32d2@cls*) (if (null? r32d2@cls*) (r32bc@build-last r32d1@cls) (r32be@build-one r32d1@cls (r32cf@f (car r32d2@cls*) (cdr r32d2@cls*))))))) r32cf@f) r32ca@cls r32cb@cls*)))) r32c7@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r32c5@t))) (r2eff@syntax-dispatch r32c5@t '(_ any any . each-any)))) r32bf@t))) (r2eff@syntax-dispatch r32bf@t '(_ any)))) r32b9@e))) '#f '#f))) (set! r2eaf@quote-transformer (lambda (r32f1@e r32f2@r r32f3@mr) ((lambda (r32f7@t) ((lambda (r32f9@ls/false) (if r32f9@ls/false (apply (lambda (r32fb@datum) (list 'quote (r2d0a@stx->datum r32fb@datum))) r32f9@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r32f7@t))) (r2eff@syntax-dispatch r32f7@t '(_ any)))) r32f1@e))) (set! r2eb1@case-lambda-transformer (lambda (r32fd@e r32fe@r r32ff@mr) ((lambda (r3303@t) ((lambda (r3305@ls/false) (if r3305@ls/false (apply (lambda (r3307@fmls* r3308@b* r3309@b**) (call-with-values (lambda () (r2f29@chi-lambda-clause* r32fd@e r3307@fmls* (map cons r3308@b* r3309@b**) r32fe@r r32ff@mr)) (lambda (r3311@r330e r3312@r3310) ((lambda (r3315@body* r3316@fmls*) (r2c51@r2b92@build-case-lambda '#f r3316@fmls* r3315@body*)) r3312@r3310 r3311@r330e)))) r3305@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3303@t))) (r2eff@syntax-dispatch r3303@t '(_ . #(each (any any . each-any)))))) r32fd@e))) (set! r2eb3@lambda-transformer (lambda (r3319@e r331a@r r331b@mr) ((lambda (r331f@t) ((lambda (r3321@ls/false) (if r3321@ls/false (apply (lambda (r3323@fmls r3324@b r3325@b*) (call-with-values (lambda () (r2f27@chi-lambda-clause r3319@e r3323@fmls (cons r3324@b r3325@b*) r331a@r r331b@mr)) (lambda (r332d@r332a r332e@r332c) ((lambda (r3331@body r3332@fmls) (r2c50@r2b90@build-lambda '#f r3332@fmls r3331@body)) r332e@r332c r332d@r332a)))) r3321@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r331f@t))) (r2eff@syntax-dispatch r331f@t '(_ any any . each-any)))) r3319@e))) (set! r2eb5@bless (lambda (r3335@x) (r2cdc@mkstx ((letrec ((r3337@f (lambda (r3339@x) (if (r2cbc@stx? r3339@x) r3339@x (if (pair? r3339@x) (cons (r3337@f (car r3339@x)) (r3337@f (cdr r3339@x))) (if (symbol? r3339@x) (r2e89@scheme-stx r3339@x) (if (vector? r3339@x) (vector-map r3337@f r3339@x) r3339@x))))))) r3337@f) r3335@x) '() '() '()))) (set! r2eb7@with-syntax-macro (lambda (r333b@e) ((lambda (r333d@t) ((lambda (r333f@ls/false) (if r333f@ls/false (apply (lambda (r3341@pat* r3342@expr* r3343@b r3344@b*) ((lambda (r3349@idn*) (begin (r2f25@verify-formals (map car r3349@idn*) r333b@e) ((lambda (r334b@t*) (r2eb5@bless (list 'let (map list r334b@t* r3342@expr*) ((letrec ((r334d@f (lambda (r334f@pat* r3350@t*) (if (null? r334f@pat*) (cons 'begin (cons '#f (cons r3343@b r3344@b*))) (list 'syntax-case (car r3350@t*) '() (list (car r334f@pat*) (r334d@f (cdr r334f@pat*) (cdr r3350@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car r334f@pat*)) (car r3350@t*)))))))) r334d@f) r3341@pat* r334b@t*)))) (r2fd6@generate-temporaries r3342@expr*)))) ((letrec ((r3353@f (lambda (r3355@pat*) (if (null? r3355@pat*) '() (call-with-values (lambda () (r2efd@convert-pattern (car r3355@pat*) '())) (lambda (r335b@r3358 r335c@r335a) ((lambda (r335f@idn* r3360@pat) (append r335f@idn* (r3353@f (cdr r3355@pat*)))) r335c@r335a r335b@r3358))))))) r3353@f) r3341@pat*))) r333f@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r333d@t))) (r2eff@syntax-dispatch r333d@t '(_ #(each (any any)) any . each-any)))) r333b@e))) (set! r2eb9@invalid-fmls-error (lambda (r3363@stx r3364@fmls) ((lambda (r3367@t) ((lambda (r3369@ls/false) (if r3369@ls/false (apply (lambda (r336b@id* r336c@last) ((letrec ((r336f@f (lambda (r3371@id*) (if (null? r3371@id*) (values) (if (not (r2cf4@id? (car r3371@id*))) (r2fe8@syntax-violation '#f '"not an identifier" r3363@stx (car r3371@id*)) (begin (r336f@f (cdr r3371@id*)) (if (r2d02@bound-id-member? (car r3371@id*) (cdr r3371@id*)) (r2fe8@syntax-violation '#f '"duplicate binding" r3363@stx (car r3371@id*)) (void)))))))) r336f@f) (if (r2cf4@id? r336c@last) (cons r336c@last r336b@id*) (if (r2cea@syntax-null? r336c@last) r336b@id* (r2fe8@syntax-violation '#f '"not an identifier" r3363@stx r336c@last))))) r3369@ls/false) ((lambda (r3373@t) ((lambda (r3375@ls/false) (if r3375@ls/false (apply (lambda () (r2fe8@syntax-violation '#f '"malformed binding form" r3363@stx r3364@fmls)) r3375@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3373@t))) (r2eff@syntax-dispatch r3373@t '_))) r3367@t))) (r2eff@syntax-dispatch r3367@t '#(each+ any () any)))) r3364@fmls))) (set! r2ebb@let-macro (lambda (r3377@stx) ((lambda (r3379@t) ((lambda (r337b@ls/false) (if r337b@ls/false (apply (lambda (r337d@lhs* r337e@rhs* r337f@b r3380@b*) (if (r2cfe@valid-bound-ids? r337d@lhs*) (r2eb5@bless (cons (cons 'lambda (cons r337d@lhs* (cons r337f@b r3380@b*))) r337e@rhs*)) (r2eb9@invalid-fmls-error r3377@stx r337d@lhs*))) r337b@ls/false) ((lambda (r3385@t) ((lambda (r3387@ls/false) (if (and r3387@ls/false (apply (lambda (r3389@f r338a@lhs* r338b@rhs* r338c@b r338d@b*) (r2cf4@id? r3389@f)) r3387@ls/false)) (apply (lambda (r3393@f r3394@lhs* r3395@rhs* r3396@b r3397@b*) (if (r2cfe@valid-bound-ids? r3394@lhs*) (r2eb5@bless (cons (list 'letrec (list (list r3393@f (cons 'lambda (cons r3394@lhs* (cons r3396@b r3397@b*))))) r3393@f) r3395@rhs*)) (r2eb9@invalid-fmls-error r3377@stx r3394@lhs*))) r3387@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3385@t))) (r2eff@syntax-dispatch r3385@t '(_ any #(each (any any)) any . each-any)))) r3379@t))) (r2eff@syntax-dispatch r3379@t '(_ #(each (any any)) any . each-any)))) r3377@stx))) (set! r2ebd@let-values-macro (lambda (r339d@stx) ((lambda (r33a0@rename r33a2@rename*) (begin (set! r33a0@rename (lambda (r3405@x r3406@old* r3407@new*) (begin (if (not (r2cf4@id? r3405@x)) (r2fe8@syntax-violation '#f '"not an indentifier" r339d@stx r3405@x) (void)) (if (r2d02@bound-id-member? r3405@x r3406@old*) (r2fe8@syntax-violation '#f '"duplicate binding" r339d@stx r3405@x) (void)) ((lambda (r340b@y) (values r340b@y (cons r3405@x r3406@old*) (cons r340b@y r3407@new*))) (gensym (r2fee@syntax->datum r3405@x)))))) (set! r33a2@rename* (lambda (r33f3@x* r33f4@old* r33f5@new*) (if (null? r33f3@x*) (values '() r33f4@old* r33f5@new*) (call-with-values (lambda () (r33a0@rename (car r33f3@x*) r33f4@old* r33f5@new*)) (lambda (r33f9@x r33fa@old* r33fb@new*) (call-with-values (lambda () (r33a2@rename* (cdr r33f3@x*) r33fa@old* r33fb@new*)) (lambda (r33ff@x* r3400@old* r3401@new*) (values (cons r33f9@x r33ff@x*) r3400@old* r3401@new*)))))))) ((lambda (r33a3@t) ((lambda (r33a5@ls/false) (if r33a5@ls/false (apply (lambda (r33a7@b r33a8@b*) (cons* (r2eb5@bless 'let) '() r33a7@b r33a8@b*)) r33a5@ls/false) ((lambda (r33ab@t) ((lambda (r33ad@ls/false) (if r33ad@ls/false (apply (lambda (r33af@lhs* r33b0@rhs* r33b1@b r33b2@b*) (r2eb5@bless ((letrec ((r33b7@f (lambda (r33b9@lhs* r33ba@rhs* r33bb@old* r33bc@new*) (if (null? r33b9@lhs*) (cons 'let (cons (map list r33bb@old* r33bc@new*) (cons r33b1@b r33b2@b*))) ((lambda (r33c1@t) ((lambda (r33c3@ls/false) (if r33c3@ls/false (apply (lambda (r33c5@x*) (call-with-values (lambda () (r33a2@rename* r33c5@x* r33bb@old* r33bc@new*)) (lambda (r33cd@r33c8 r33ce@r33ca r33cf@r33cc) ((lambda (r33d3@new* r33d4@old* r33d5@y*) (list 'call-with-values (list 'lambda '() (car r33ba@rhs*)) (list 'lambda r33d5@y* (r33b7@f (cdr r33b9@lhs*) (cdr r33ba@rhs*) r33d4@old* r33d3@new*)))) r33cf@r33cc r33ce@r33ca r33cd@r33c8)))) r33c3@ls/false) ((lambda (r33d9@t) ((lambda (r33db@ls/false) (if r33db@ls/false (apply (lambda (r33dd@x* r33de@x) (call-with-values (lambda () (r33a0@rename r33de@x r33bb@old* r33bc@new*)) (lambda (r33e1@y r33e2@old* r33e3@new*) (call-with-values (lambda () (r33a2@rename* r33dd@x* r33e2@old* r33e3@new*)) (lambda (r33e7@y* r33e8@old* r33e9@new*) (list 'call-with-values (list 'lambda '() (car r33ba@rhs*)) (list 'lambda (append r33e7@y* r33e1@y) (r33b7@f (cdr r33b9@lhs*) (cdr r33ba@rhs*) r33e8@old* r33e9@new*)))))))) r33db@ls/false) ((lambda (r33ed@t) ((lambda (r33ef@ls/false) (if r33ef@ls/false (apply (lambda (r33f1@others) (r2fe8@syntax-violation '#f '"malformed bindings" r339d@stx r33f1@others)) r33ef@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r33ed@t))) (r2eff@syntax-dispatch r33ed@t 'any))) r33d9@t))) (r2eff@syntax-dispatch r33d9@t '#(each+ any () any)))) r33c1@t))) (r2eff@syntax-dispatch r33c1@t 'each-any))) (car r33b9@lhs*)))))) r33b7@f) r33af@lhs* r33b0@rhs* '() '()))) r33ad@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r33ab@t))) (r2eff@syntax-dispatch r33ab@t '(_ #(each (any any)) any . each-any)))) r33a3@t))) (r2eff@syntax-dispatch r33a3@t '(_ () any . each-any)))) r339d@stx))) '#f '#f))) (set! r2ebf@let*-values-macro (lambda (r340d@stx) ((lambda (r3410@check) (begin (set! r3410@check (lambda (r343f@x*) (if (not (null? r343f@x*)) ((lambda (r3441@x) (begin (if (not (r2cf4@id? r3441@x)) (r2fe8@syntax-violation '#f '"not an identifier" r340d@stx r3441@x) (void)) (r3410@check (cdr r343f@x*)) (if (r2d02@bound-id-member? r3441@x (cdr r343f@x*)) (r2fe8@syntax-violation '#f '"duplicate identifier" r340d@stx r3441@x) (void)))) (car r343f@x*)) (void)))) ((lambda (r3411@t) ((lambda (r3413@ls/false) (if r3413@ls/false (apply (lambda (r3415@b r3416@b*) (cons* (r2eb5@bless 'let) '() r3415@b r3416@b*)) r3413@ls/false) ((lambda (r3419@t) ((lambda (r341b@ls/false) (if r341b@ls/false (apply (lambda (r341d@lhs* r341e@rhs* r341f@b r3420@b*) (r2eb5@bless ((letrec ((r3425@f (lambda (r3427@lhs* r3428@rhs*) (if (null? r3427@lhs*) (cons 'begin (cons r341f@b r3420@b*)) ((lambda (r342b@t) ((lambda (r342d@ls/false) (if r342d@ls/false (apply (lambda (r342f@x*) (begin (r3410@check r342f@x*) (list 'call-with-values (list 'lambda '() (car r3428@rhs*)) (list 'lambda r342f@x* (r3425@f (cdr r3427@lhs*) (cdr r3428@rhs*)))))) r342d@ls/false) ((lambda (r3431@t) ((lambda (r3433@ls/false) (if r3433@ls/false (apply (lambda (r3435@x* r3436@x) (begin (r3410@check (cons r3436@x r3435@x*)) (list 'call-with-values (list 'lambda '() (car r3428@rhs*)) (list 'lambda (append r3435@x* r3436@x) (r3425@f (cdr r3427@lhs*) (cdr r3428@rhs*)))))) r3433@ls/false) ((lambda (r3439@t) ((lambda (r343b@ls/false) (if r343b@ls/false (apply (lambda (r343d@others) (r2fe8@syntax-violation '#f '"malformed bindings" r340d@stx r343d@others)) r343b@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3439@t))) (r2eff@syntax-dispatch r3439@t 'any))) r3431@t))) (r2eff@syntax-dispatch r3431@t '#(each+ any () any)))) r342b@t))) (r2eff@syntax-dispatch r342b@t 'each-any))) (car r3427@lhs*)))))) r3425@f) r341d@lhs* r341e@rhs*))) r341b@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3419@t))) (r2eff@syntax-dispatch r3419@t '(_ #(each (any any)) any . each-any)))) r3411@t))) (r2eff@syntax-dispatch r3411@t '(_ () any . each-any)))) r340d@stx))) '#f))) (set! r2ec1@trace-lambda-macro (lambda (r3443@stx) ((lambda (r3445@t) ((lambda (r3447@ls/false) (if r3447@ls/false (apply (lambda (r3449@who r344a@fmls r344b@b r344c@b*) (if (r2cfe@valid-bound-ids? r344a@fmls) (r2eb5@bless (list 'make-traced-procedure (list 'quote r3449@who) (cons 'lambda (cons r344a@fmls (cons r344b@b r344c@b*))))) (r2eb9@invalid-fmls-error r3443@stx r344a@fmls))) r3447@ls/false) ((lambda (r3451@t) ((lambda (r3453@ls/false) (if r3453@ls/false (apply (lambda (r3455@who r3456@fmls r3457@last r3458@b r3459@b*) (if (r2cfe@valid-bound-ids? (cons r3457@last r3456@fmls)) (r2eb5@bless (list 'make-traced-procedure (list 'quote r3455@who) (cons 'lambda (cons (append r3456@fmls r3457@last) (cons r3458@b r3459@b*))))) (r2eb9@invalid-fmls-error r3443@stx (append r3456@fmls r3457@last)))) r3453@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3451@t))) (r2eff@syntax-dispatch r3451@t '(_ any #(each+ any () any) any . each-any)))) r3445@t))) (r2eff@syntax-dispatch r3445@t '(_ any each-any any . each-any)))) r3443@stx))) (set! r2ec3@trace-define-macro (lambda (r345f@stx) ((lambda (r3461@t) ((lambda (r3463@ls/false) (if r3463@ls/false (apply (lambda (r3465@who r3466@fmls r3467@b r3468@b*) (if (r2cfe@valid-bound-ids? r3466@fmls) (r2eb5@bless (list 'define r3465@who (list 'make-traced-procedure (list 'quote r3465@who) (cons 'lambda (cons r3466@fmls (cons r3467@b r3468@b*)))))) (r2eb9@invalid-fmls-error r345f@stx r3466@fmls))) r3463@ls/false) ((lambda (r346d@t) ((lambda (r346f@ls/false) (if r346f@ls/false (apply (lambda (r3471@who r3472@fmls r3473@last r3474@b r3475@b*) (if (r2cfe@valid-bound-ids? (cons r3473@last r3472@fmls)) (r2eb5@bless (list 'define r3471@who (list 'make-traced-procedure (list 'quote r3471@who) (cons 'lambda (cons (append r3472@fmls r3473@last) (cons r3474@b r3475@b*)))))) (r2eb9@invalid-fmls-error r345f@stx (append r3472@fmls r3473@last)))) r346f@ls/false) ((lambda (r347b@t) ((lambda (r347d@ls/false) (if r347d@ls/false (apply (lambda (r347f@who r3480@expr) (if (r2cf4@id? r347f@who) (r2eb5@bless (list 'define r347f@who (list 'let (list (list 'v r3480@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote r347f@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (r2fe8@syntax-violation '#f '"invalid name" r345f@stx))) r347d@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r347b@t))) (r2eff@syntax-dispatch r347b@t '(_ any any)))) r346d@t))) (r2eff@syntax-dispatch r346d@t '(_ (any . #(each+ any () any)) any . each-any)))) r3461@t))) (r2eff@syntax-dispatch r3461@t '(_ (any . each-any) any . each-any)))) r345f@stx))) (set! r2ec5@trace-define-syntax-macro (lambda (r3483@stx) ((lambda (r3485@t) ((lambda (r3487@ls/false) (if r3487@ls/false (apply (lambda (r3489@who r348a@expr) (if (r2cf4@id? r3489@who) (r2eb5@bless (list 'define-syntax r3489@who (list 'make-traced-macro (list 'quote r3489@who) r348a@expr))) (r2fe8@syntax-violation '#f '"invalid name" r3483@stx))) r3487@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3485@t))) (r2eff@syntax-dispatch r3485@t '(_ any any)))) r3483@stx))) (set! r2ec7@trace-let/rec-syntax (lambda (r348d@who) (lambda (r348f@stx) ((lambda (r3491@t) ((lambda (r3493@ls/false) (if r3493@ls/false (apply (lambda (r3495@lhs* r3496@rhs* r3497@b r3498@b*) (if (r2cfe@valid-bound-ids? r3495@lhs*) ((lambda (r349d@rhs*) (r2eb5@bless (cons r348d@who (cons (map list r3495@lhs* r349d@rhs*) (cons r3497@b r3498@b*))))) (map (lambda (r349f@lhs r34a0@rhs) (list 'make-traced-macro (list 'quote r349f@lhs) r34a0@rhs)) r3495@lhs* r3496@rhs*)) (r2eb9@invalid-fmls-error r348f@stx r3495@lhs*))) r3493@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3491@t))) (r2eff@syntax-dispatch r3491@t '(_ #(each (any any)) any . each-any)))) r348f@stx)))) (set! r2ec9@trace-let-syntax-macro (r2ec7@trace-let/rec-syntax 'let-syntax)) (set! r2ecb@trace-letrec-syntax-macro (r2ec7@trace-let/rec-syntax 'letrec-syntax)) (set! r2ecd@guard-macro (lambda (r34a3@x) ((lambda (r34a6@gen-clauses) (begin (set! r34a6@gen-clauses (lambda (r34bd@con r34be@outerk r34bf@clause*) ((lambda (r34c4@f r34c6@f*) (begin (set! r34c4@f (lambda (r34fd@x r34fe@k) ((lambda (r3501@t) ((lambda (r3503@ls/false) (if r3503@ls/false (apply (lambda (r3505@e r3506@p) ((lambda (r3509@t) (list 'let (list (list r3509@t r3505@e)) (list 'if r3509@t (list r3506@p r3509@t) r34fe@k))) (gensym))) r3503@ls/false) ((lambda (r350b@t) ((lambda (r350d@ls/false) (if r350d@ls/false (apply (lambda (r350f@e) ((lambda (r3511@t) (list 'let (list (list r3511@t r350f@e)) (list 'if r3511@t r3511@t r34fe@k))) (gensym))) r350d@ls/false) ((lambda (r3513@t) ((lambda (r3515@ls/false) (if r3515@ls/false (apply (lambda (r3517@e r3518@v r3519@v*) (list 'if r3517@e (cons 'begin (cons r3518@v r3519@v*)) r34fe@k)) r3515@ls/false) ((lambda (r351d@t) ((lambda (r351f@ls/false) (if r351f@ls/false (apply (lambda () (r2fe8@syntax-violation '#f '"invalid guard clause" r34fd@x)) r351f@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r351d@t))) (r2eff@syntax-dispatch r351d@t '_))) r3513@t))) (r2eff@syntax-dispatch r3513@t '(any any . each-any)))) r350b@t))) (r2eff@syntax-dispatch r350b@t '(any)))) r3501@t))) (r2eff@syntax-dispatch r3501@t '(any #(scheme-id =>) any)))) r34fd@x))) (set! r34c6@f* (lambda (r34d3@x*) ((lambda (r34d5@t) ((lambda (r34d7@ls/false) (if r34d7@ls/false (apply (lambda () ((lambda (r34d9@g) (values (list r34d9@g (list 'lambda '() (list 'raise-continuable r34bd@con))) r34d9@g)) (gensym))) r34d7@ls/false) ((lambda (r34db@t) ((lambda (r34dd@ls/false) (if r34dd@ls/false (apply (lambda (r34df@e r34e0@e*) (values (cons 'begin (cons r34df@e r34e0@e*)) '#f)) r34dd@ls/false) ((lambda (r34e3@t) ((lambda (r34e5@ls/false) (if r34e5@ls/false (apply (lambda (r34e7@cls r34e8@cls*) (call-with-values (lambda () (r34c6@f* r34e8@cls*)) (lambda (r34ef@r34ec r34f0@r34ee) ((lambda (r34f3@g r34f4@e) (values (r34c4@f r34e7@cls r34f4@e) r34f3@g)) r34f0@r34ee r34ef@r34ec)))) r34e5@ls/false) ((lambda (r34f7@t) ((lambda (r34f9@ls/false) (if r34f9@ls/false (apply (lambda (r34fb@others) (r2fe8@syntax-violation '#f '"invalid guard clause" r34fb@others)) r34f9@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r34f7@t))) (r2eff@syntax-dispatch r34f7@t 'any))) r34e3@t))) (r2eff@syntax-dispatch r34e3@t '(any . any)))) r34db@t))) (r2eff@syntax-dispatch r34db@t '((#(scheme-id else) any . each-any))))) r34d5@t))) (r2eff@syntax-dispatch r34d5@t '()))) r34d3@x*))) (call-with-values (lambda () (r34c6@f* r34bf@clause*)) (lambda (r34cb@r34c8 r34cc@r34ca) ((lambda (r34cf@raisek r34d0@code) (if r34cf@raisek (list (list 'call/cc (list 'lambda (list r34cf@raisek) (list r34be@outerk (list 'lambda '() r34d0@code))))) (list r34be@outerk (list 'lambda '() r34d0@code)))) r34cc@r34ca r34cb@r34c8))))) '#f '#f))) ((lambda (r34a7@t) ((lambda (r34a9@ls/false) (if (and r34a9@ls/false (apply (lambda (r34ab@con r34ac@clause* r34ad@b r34ae@b*) (r2cf4@id? r34ab@con)) r34a9@ls/false)) (apply (lambda (r34b3@con r34b4@clause* r34b5@b r34b6@b*) ((lambda (r34bb@outerk) (r2eb5@bless (list (list 'call/cc (list 'lambda (list r34bb@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list r34b3@con) (r34a6@gen-clauses r34b3@con r34bb@outerk r34b4@clause*)) (cons 'lambda (cons '() (cons r34b5@b r34b6@b*)))))))))) (gensym))) r34a9@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r34a7@t))) (r2eff@syntax-dispatch r34a7@t '(_ (any . each-any) any . each-any)))) r34a3@x))) '#f))) (set! r2ecf@define-enumeration-macro (lambda (r3521@stx) ((lambda (r3524@set? r3526@remove-dups) (begin (set! r3524@set? (lambda (r353d@x) (or (null? r353d@x) (and (not (memq (car r353d@x) (cdr r353d@x))) (r3524@set? (cdr r353d@x)))))) (set! r3526@remove-dups (lambda (r353b@ls) (if (null? r353b@ls) '() (cons (car r353b@ls) (r3526@remove-dups (remq (car r353b@ls) (cdr r353b@ls))))))) ((lambda (r3527@t) ((lambda (r3529@ls/false) (if (and r3529@ls/false (apply (lambda (r352b@name r352c@id* r352d@maker) (and (r2cf4@id? r352b@name) (r2cf4@id? r352d@maker) (for-all r2cf4@id? r352c@id*))) r3529@ls/false)) (apply (lambda (r3531@name r3532@id* r3533@maker) ((lambda (r3537@name* r3538@mk) (r2eb5@bless (list 'begin (list 'define r3538@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote r3537@name*)))) (list 'define-syntax r3531@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote r3537@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote r3531@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax r3533@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote r3533@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote r3537@name*)) (cons 'syntax-violation (cons (list 'quote r3533@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons r3538@mk '('(n* ...)))))))))))) (r3526@remove-dups (r2fee@syntax->datum r3532@id*)) (gensym))) r3529@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3527@t))) (r2eff@syntax-dispatch r3527@t '(_ any each-any any)))) r3521@stx))) '#f '#f))) (set! r2ed1@time-macro (lambda (r353f@stx) ((lambda (r3541@t) ((lambda (r3543@ls/false) (if r3543@ls/false (apply (lambda (r3545@expr) (r2eb5@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() r3545@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) r3543@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3541@t))) (r2eff@syntax-dispatch r3541@t '(_ any)))) r353f@stx))) (set! r2ed3@delay-macro (lambda (r3547@stx) ((lambda (r3549@t) ((lambda (r354b@ls/false) (if r354b@ls/false (apply (lambda (r354d@expr) (r2eb5@bless (list 'make-promise (list 'lambda '() r354d@expr)))) r354b@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3549@t))) (r2eff@syntax-dispatch r3549@t '(_ any)))) r3547@stx))) (set! r2ed5@assert-macro (lambda (r354f@stx) ((lambda (r3551@t) ((lambda (r3553@ls/false) (if r3553@ls/false (apply (lambda (r3555@expr) ((lambda (r3557@pos) (r2eb5@bless (list 'unless r3555@expr (list 'assertion-error (list 'quote r3555@expr) (list 'quote r3557@pos))))) (or (r2fe0@expression-position r354f@stx) (r2fe0@expression-position r3555@expr)))) r3553@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3551@t))) (r2eff@syntax-dispatch r3551@t '(_ any)))) r354f@stx))) (set! r2ed7@endianness-macro (lambda (r3559@stx) ((lambda (r355b@t) ((lambda (r355d@ls/false) (if r355d@ls/false (apply (lambda (r355f@e) ((lambda (r3561@t) (if (memv r3561@t '(little)) (r2eb5@bless ''little) (if (memv r3561@t '(big)) (r2eb5@bless ''big) (r2fe8@syntax-violation '#f '"endianness must be big or little" r3559@stx)))) (r2fee@syntax->datum r355f@e))) r355d@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r355b@t))) (r2eff@syntax-dispatch r355b@t '(_ any)))) r3559@stx))) (set! r2ed9@identifier-syntax-macro (lambda (r3563@stx) ((lambda (r3565@t) ((lambda (r3567@ls/false) (if r3567@ls/false (apply (lambda (r3569@expr) (r2eb5@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax r3569@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax r3569@expr) '((syntax (e* ...)))))))))) r3567@ls/false) ((lambda (r356b@t) ((lambda (r356d@ls/false) (if (and r356d@ls/false (apply (lambda (r356f@id1 r3570@expr1 r3571@id2 r3572@expr2 r3573@expr3) (and (r2cf4@id? r356f@id1) (r2cf4@id? r3571@id2) (r2cf4@id? r3572@expr2))) r356d@ls/false)) (apply (lambda (r3579@id1 r357a@expr1 r357b@id2 r357c@expr2 r357d@expr3) (r2eb5@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax r357a@expr1)) (list (list 'set! 'id r357c@expr2) (list 'syntax r357d@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons r357a@expr1 '(e* ...))))))))) r356d@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r356b@t))) (r2eff@syntax-dispatch r356b@t '(_ (any any) ((#(scheme-id set!) any any) any))))) r3565@t))) (r2eff@syntax-dispatch r3565@t '(_ any)))) r3563@stx))) (set! r2edb@do-macro (lambda (r3583@stx) ((lambda (r3586@bind) (begin (set! r3586@bind (lambda (r359d@x) ((lambda (r359f@t) ((lambda (r35a1@ls/false) (if r35a1@ls/false (apply (lambda (r35a3@x r35a4@init) (list r35a3@x r35a4@init r35a3@x)) r35a1@ls/false) ((lambda (r35a7@t) ((lambda (r35a9@ls/false) (if r35a9@ls/false (apply (lambda (r35ab@x r35ac@init r35ad@step) (list r35ab@x r35ac@init r35ad@step)) r35a9@ls/false) ((lambda (r35b1@t) ((lambda (r35b3@ls/false) (if r35b3@ls/false (apply (lambda () (r2fe8@syntax-violation '#f '"invalid binding" r3583@stx)) r35b3@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r35b1@t))) (r2eff@syntax-dispatch r35b1@t '_))) r35a7@t))) (r2eff@syntax-dispatch r35a7@t '(any any any)))) r359f@t))) (r2eff@syntax-dispatch r359f@t '(any any)))) r359d@x))) ((lambda (r3587@t) ((lambda (r3589@ls/false) (if r3589@ls/false (apply (lambda (r358b@binding* r358c@test r358d@expr* r358e@command*) ((lambda (r3593@t) ((lambda (r3595@ls/false) (if r3595@ls/false (apply (lambda (r3597@x* r3598@init* r3599@step*) (if (r2cfe@valid-bound-ids? r3597@x*) (r2eb5@bless (list 'letrec (list (list 'loop (list 'lambda r3597@x* (list 'if r358c@test (cons 'begin (cons '(if #f #f) r358d@expr*)) (cons 'begin (append r358e@command* (list (cons 'loop r3599@step*)))))))) (cons 'loop r3598@init*))) (r2fe8@syntax-violation '#f '"invalid bindings" r3583@stx))) r3595@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3593@t))) (r2eff@syntax-dispatch r3593@t '#(each (any any any))))) (map r3586@bind r358b@binding*))) r3589@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3587@t))) (r2eff@syntax-dispatch r3587@t '(_ each-any (any . each-any) . each-any)))) r3583@stx))) '#f))) (set! r2edd@let*-macro (lambda (r35b5@stx) ((lambda (r35b7@t) ((lambda (r35b9@ls/false) (if (and r35b9@ls/false (apply (lambda (r35bb@lhs* r35bc@rhs* r35bd@b r35be@b*) (for-all r2cf4@id? r35bb@lhs*)) r35b9@ls/false)) (apply (lambda (r35c3@lhs* r35c4@rhs* r35c5@b r35c6@b*) (r2eb5@bless ((letrec ((r35cb@f (lambda (r35cd@x*) (if (null? r35cd@x*) (cons 'let (cons '() (cons r35c5@b r35c6@b*))) (list 'let (list (car r35cd@x*)) (r35cb@f (cdr r35cd@x*))))))) r35cb@f) (map list r35c3@lhs* r35c4@rhs*)))) r35b9@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r35b7@t))) (r2eff@syntax-dispatch r35b7@t '(_ #(each (any any)) any . each-any)))) r35b5@stx))) (set! r2edf@or-macro (lambda (r35cf@stx) ((lambda (r35d1@t) ((lambda (r35d3@ls/false) (if r35d3@ls/false (apply (lambda () '#f) r35d3@ls/false) ((lambda (r35d5@t) ((lambda (r35d7@ls/false) (if r35d7@ls/false (apply (lambda (r35d9@e r35da@e*) (r2eb5@bless ((letrec ((r35dd@f (lambda (r35df@e r35e0@e*) (if (null? r35e0@e*) (list 'begin '#f r35df@e) (list 'let (list (list 't r35df@e)) (list 'if 't 't (r35dd@f (car r35e0@e*) (cdr r35e0@e*)))))))) r35dd@f) r35d9@e r35da@e*))) r35d7@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r35d5@t))) (r2eff@syntax-dispatch r35d5@t '(_ any . each-any)))) r35d1@t))) (r2eff@syntax-dispatch r35d1@t '(_)))) r35cf@stx))) (set! r2ee1@and-macro (lambda (r35e3@stx) ((lambda (r35e5@t) ((lambda (r35e7@ls/false) (if r35e7@ls/false (apply (lambda () '#t) r35e7@ls/false) ((lambda (r35e9@t) ((lambda (r35eb@ls/false) (if r35eb@ls/false (apply (lambda (r35ed@e r35ee@e*) (r2eb5@bless ((letrec ((r35f1@f (lambda (r35f3@e r35f4@e*) (if (null? r35f4@e*) (list 'begin '#f r35f3@e) (cons 'if (cons r35f3@e (cons (r35f1@f (car r35f4@e*) (cdr r35f4@e*)) '(#f)))))))) r35f1@f) r35ed@e r35ee@e*))) r35eb@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r35e9@t))) (r2eff@syntax-dispatch r35e9@t '(_ any . each-any)))) r35e5@t))) (r2eff@syntax-dispatch r35e5@t '(_)))) r35e3@stx))) (set! r2ee3@cond-macro (lambda (r35f7@stx) ((lambda (r35f9@t) ((lambda (r35fb@ls/false) (if r35fb@ls/false (apply (lambda (r35fd@cls r35fe@cls*) (r2eb5@bless ((letrec ((r3601@f (lambda (r3603@cls r3604@cls*) (if (null? r3604@cls*) ((lambda (r3607@t) ((lambda (r3609@ls/false) (if r3609@ls/false (apply (lambda (r360b@e r360c@e*) (cons 'begin (cons r360b@e r360c@e*))) r3609@ls/false) ((lambda (r360f@t) ((lambda (r3611@ls/false) (if r3611@ls/false (apply (lambda (r3613@e r3614@p) (list 'let (list (list 't r3613@e)) (list 'if 't (cons r3614@p '(t))))) r3611@ls/false) ((lambda (r3617@t) ((lambda (r3619@ls/false) (if r3619@ls/false (apply (lambda (r361b@e) (cons 'or (cons r361b@e '((if #f #f))))) r3619@ls/false) ((lambda (r361d@t) ((lambda (r361f@ls/false) (if r361f@ls/false (apply (lambda (r3621@e r3622@e*) (list 'if r3621@e (cons 'begin r3622@e*))) r361f@ls/false) ((lambda (r3625@t) ((lambda (r3627@ls/false) (if r3627@ls/false (apply (lambda () (r2fe8@syntax-violation '#f '"invalid last clause" r35f7@stx)) r3627@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3625@t))) (r2eff@syntax-dispatch r3625@t '_))) r361d@t))) (r2eff@syntax-dispatch r361d@t '(any . each-any)))) r3617@t))) (r2eff@syntax-dispatch r3617@t '(any)))) r360f@t))) (r2eff@syntax-dispatch r360f@t '(any #(scheme-id =>) any)))) r3607@t))) (r2eff@syntax-dispatch r3607@t '(#(scheme-id else) any . each-any)))) r3603@cls) ((lambda (r3629@t) ((lambda (r362b@ls/false) (if r362b@ls/false (apply (lambda (r362d@e r362e@e*) (r2fe8@syntax-violation '#f '"incorrect position of keyword else" r35f7@stx)) r362b@ls/false) ((lambda (r3631@t) ((lambda (r3633@ls/false) (if r3633@ls/false (apply (lambda (r3635@e r3636@p) (list 'let (list (list 't r3635@e)) (list 'if 't (cons r3636@p '(t)) (r3601@f (car r3604@cls*) (cdr r3604@cls*))))) r3633@ls/false) ((lambda (r3639@t) ((lambda (r363b@ls/false) (if r363b@ls/false (apply (lambda (r363d@e) (list 'or r363d@e (r3601@f (car r3604@cls*) (cdr r3604@cls*)))) r363b@ls/false) ((lambda (r363f@t) ((lambda (r3641@ls/false) (if r3641@ls/false (apply (lambda (r3643@e r3644@e*) (list 'if r3643@e (cons 'begin r3644@e*) (r3601@f (car r3604@cls*) (cdr r3604@cls*)))) r3641@ls/false) ((lambda (r3647@t) ((lambda (r3649@ls/false) (if r3649@ls/false (apply (lambda () (r2fe8@syntax-violation '#f '"invalid last clause" r35f7@stx)) r3649@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3647@t))) (r2eff@syntax-dispatch r3647@t '_))) r363f@t))) (r2eff@syntax-dispatch r363f@t '(any . each-any)))) r3639@t))) (r2eff@syntax-dispatch r3639@t '(any)))) r3631@t))) (r2eff@syntax-dispatch r3631@t '(any #(scheme-id =>) any)))) r3629@t))) (r2eff@syntax-dispatch r3629@t '(#(scheme-id else) any . each-any)))) r3603@cls))))) r3601@f) r35fd@cls r35fe@cls*))) r35fb@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r35f9@t))) (r2eff@syntax-dispatch r35f9@t '(_ any . each-any)))) r35f7@stx))) (set! r2ee5@do-include (lambda (r364b@stx r364c@id r364d@filename) ((lambda (r3651@filename) (begin (if (not (and (string? r3651@filename) (r2cf4@id? r364c@id))) (r2fe8@syntax-violation '#f '"invalid syntax" r364b@stx) (void)) (cons (r2eb5@bless 'begin) (with-input-from-file r3651@filename (lambda () ((letrec ((r3653@f (lambda (r3655@ls) ((lambda (r3657@x) (if (eof-object? r3657@x) (reverse r3655@ls) (r3653@f (cons (r2cd2@datum->stx r364c@id r3657@x) r3655@ls)))) (r2891@r27ae@read-annotated))))) r3653@f) '())))))) (r2d0a@stx->datum r364d@filename)))) (set! r2ee7@include-macro (lambda (r3659@e) ((lambda (r365b@t) ((lambda (r365d@ls/false) (if r365d@ls/false (apply (lambda (r365f@id r3660@filename) (r2ee5@do-include r3659@e r365f@id r3660@filename)) r365d@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r365b@t))) (r2eff@syntax-dispatch r365b@t '(any any)))) r3659@e))) (set! r2ee9@include-into-macro (lambda (r3663@e) ((lambda (r3665@t) ((lambda (r3667@ls/false) (if r3667@ls/false (apply (lambda (r3669@id r366a@filename) (r2ee5@do-include r3663@e r3669@id r366a@filename)) r3667@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3665@t))) (r2eff@syntax-dispatch r3665@t '(_ any any)))) r3663@e))) (set! r2eeb@syntax-rules-macro (lambda (r366d@e) ((lambda (r366f@t) ((lambda (r3671@ls/false) (if r3671@ls/false (apply (lambda (r3673@lits r3674@pat* r3675@tmp*) (begin (r2f05@verify-literals r3673@lits r366d@e) (r2eb5@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons r3673@lits (map (lambda (r3679@pat r367a@tmp) ((lambda (r367d@t) ((lambda (r367f@ls/false) (if r367f@ls/false (apply (lambda (r3681@rest) (list (cons 'g r3681@rest) (list 'syntax r367a@tmp))) r367f@ls/false) ((lambda (r3683@t) ((lambda (r3685@ls/false) (if r3685@ls/false (apply (lambda () (r2fe8@syntax-violation '#f '"invalid syntax-rules pattern" r366d@e r3679@pat)) r3685@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3683@t))) (r2eff@syntax-dispatch r3683@t '_))) r367d@t))) (r2eff@syntax-dispatch r367d@t '(_ . any)))) r3679@pat)) r3674@pat* r3675@tmp*)))))))) r3671@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r366f@t))) (r2eff@syntax-dispatch r366f@t '(_ each-any . #(each (any any)))))) r366d@e))) (set! r2eed@quasiquote-macro ((lambda () ((lambda (r3688@datum r36a4@quasicons* r36a6@quasicons r36a8@quasiappend r36aa@quasivector r36ac@vquasi r36ae@quasi) (begin (set! r3688@datum (lambda (r3789@x) (list (r2e89@scheme-stx 'quote) (r2cdc@mkstx r3789@x '() '() '())))) (set! r36a4@quasicons* (lambda (r3781@x r3782@y) ((letrec ((r3785@f (lambda (r3787@x) (if (null? r3787@x) r3782@y (r36a6@quasicons (car r3787@x) (r3785@f (cdr r3787@x))))))) r3785@f) r3781@x))) (set! r36a6@quasicons (lambda (r375b@x r375c@y) ((lambda (r375f@t) ((lambda (r3761@ls/false) (if r3761@ls/false (apply (lambda (r3763@dy) ((lambda (r3765@t) ((lambda (r3767@ls/false) (if r3767@ls/false (apply (lambda (r3769@dx) (list (r2e89@scheme-stx 'quote) (cons r3769@dx r3763@dy))) r3767@ls/false) ((lambda (r376b@t) ((lambda (r376d@ls/false) (if r376d@ls/false (apply (lambda () ((lambda (r376f@t) ((lambda (r3771@ls/false) (if r3771@ls/false (apply (lambda () (list (r2e89@scheme-stx 'list) r375b@x)) r3771@ls/false) ((lambda (r3773@t) ((lambda (r3775@ls/false) (if r3775@ls/false (apply (lambda () (list (r2e89@scheme-stx 'cons) r375b@x r375c@y)) r3775@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3773@t))) (r2eff@syntax-dispatch r3773@t '_))) r376f@t))) (r2eff@syntax-dispatch r376f@t '()))) r3763@dy)) r376d@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r376b@t))) (r2eff@syntax-dispatch r376b@t '_))) r3765@t))) (r2eff@syntax-dispatch r3765@t '(#(scheme-id quote) any)))) r375b@x)) r3761@ls/false) ((lambda (r3777@t) ((lambda (r3779@ls/false) (if r3779@ls/false (apply (lambda (r377b@stuff) (cons* (r2e89@scheme-stx 'list) r375b@x r377b@stuff)) r3779@ls/false) ((lambda (r377d@t) ((lambda (r377f@ls/false) (if r377f@ls/false (apply (lambda () (list (r2e89@scheme-stx 'cons) r375b@x r375c@y)) r377f@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r377d@t))) (r2eff@syntax-dispatch r377d@t '_))) r3777@t))) (r2eff@syntax-dispatch r3777@t '(#(scheme-id list) . each-any)))) r375f@t))) (r2eff@syntax-dispatch r375f@t '(#(scheme-id quote) any)))) r375c@y))) (set! r36a8@quasiappend (lambda (r3741@x r3742@y) ((lambda (r3745@ls) (if (null? r3745@ls) (list (r2e89@scheme-stx 'quote) '()) (if (null? (cdr r3745@ls)) (car r3745@ls) (cons* (r2e89@scheme-stx 'append) r3745@ls)))) ((letrec ((r3747@f (lambda (r3749@x) (if (null? r3749@x) ((lambda (r374b@t) ((lambda (r374d@ls/false) (if r374d@ls/false (apply (lambda () '()) r374d@ls/false) ((lambda (r374f@t) ((lambda (r3751@ls/false) (if r3751@ls/false (apply (lambda () (list r3742@y)) r3751@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r374f@t))) (r2eff@syntax-dispatch r374f@t '_))) r374b@t))) (r2eff@syntax-dispatch r374b@t '(#(scheme-id quote) ())))) r3742@y) ((lambda (r3753@t) ((lambda (r3755@ls/false) (if r3755@ls/false (apply (lambda () (r3747@f (cdr r3749@x))) r3755@ls/false) ((lambda (r3757@t) ((lambda (r3759@ls/false) (if r3759@ls/false (apply (lambda () (cons (car r3749@x) (r3747@f (cdr r3749@x)))) r3759@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3757@t))) (r2eff@syntax-dispatch r3757@t '_))) r3753@t))) (r2eff@syntax-dispatch r3753@t '(#(scheme-id quote) ())))) (car r3749@x)))))) r3747@f) r3741@x)))) (set! r36aa@quasivector (lambda (r370f@x) ((lambda (r3711@pat-x) ((lambda (r3713@t) ((lambda (r3715@ls/false) (if r3715@ls/false (apply (lambda (r3717@x*) (list (r2e89@scheme-stx 'quote) (list->vector r3717@x*))) r3715@ls/false) ((lambda (r3719@t) ((lambda (r371b@ls/false) (if r371b@ls/false (apply (lambda () ((letrec ((r371d@f (lambda (r371f@x r3720@k) ((lambda (r3723@t) ((lambda (r3725@ls/false) (if r3725@ls/false (apply (lambda (r3727@x*) (r3720@k (map (lambda (r3729@x) (list (r2e89@scheme-stx 'quote) r3729@x)) r3727@x*))) r3725@ls/false) ((lambda (r372b@t) ((lambda (r372d@ls/false) (if r372d@ls/false (apply (lambda (r372f@x*) (r3720@k r372f@x*)) r372d@ls/false) ((lambda (r3731@t) ((lambda (r3733@ls/false) (if r3733@ls/false (apply (lambda (r3735@x r3736@y) (r371d@f r3736@y (lambda (r3739@ls) (r3720@k (cons r3735@x r3739@ls))))) r3733@ls/false) ((lambda (r373b@t) ((lambda (r373d@ls/false) (if r373d@ls/false (apply (lambda () (list (r2e89@scheme-stx 'list->vector) r3711@pat-x)) r373d@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r373b@t))) (r2eff@syntax-dispatch r373b@t '_))) r3731@t))) (r2eff@syntax-dispatch r3731@t '(#(scheme-id cons) any any)))) r372b@t))) (r2eff@syntax-dispatch r372b@t '(#(scheme-id list) . each-any)))) r3723@t))) (r2eff@syntax-dispatch r3723@t '(#(scheme-id quote) each-any)))) r371f@x)))) r371d@f) r370f@x (lambda (r373f@ls) (cons* (r2e89@scheme-stx 'vector) r373f@ls)))) r371b@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3719@t))) (r2eff@syntax-dispatch r3719@t '_))) r3713@t))) (r2eff@syntax-dispatch r3713@t '(#(scheme-id quote) each-any)))) r3711@pat-x)) r370f@x))) (set! r36ac@vquasi (lambda (r36ed@p r36ee@lev) ((lambda (r36f1@t) ((lambda (r36f3@ls/false) (if r36f3@ls/false (apply (lambda (r36f5@p r36f6@q) ((lambda (r36f9@t) ((lambda (r36fb@ls/false) (if r36fb@ls/false (apply (lambda (r36fd@p) (if (= r36ee@lev '0) (r36a4@quasicons* r36fd@p (r36ac@vquasi r36f6@q r36ee@lev)) (r36a6@quasicons (r36a6@quasicons (r3688@datum 'unquote) (r36ae@quasi r36fd@p (- r36ee@lev '1))) (r36ac@vquasi r36f6@q r36ee@lev)))) r36fb@ls/false) ((lambda (r36ff@t) ((lambda (r3701@ls/false) (if r3701@ls/false (apply (lambda (r3703@p) (if (= r36ee@lev '0) (r36a8@quasiappend r3703@p (r36ac@vquasi r36f6@q r36ee@lev)) (r36a6@quasicons (r36a6@quasicons (r3688@datum 'unquote-splicing) (r36ae@quasi r3703@p (- r36ee@lev '1))) (r36ac@vquasi r36f6@q r36ee@lev)))) r3701@ls/false) ((lambda (r3705@t) ((lambda (r3707@ls/false) (if r3707@ls/false (apply (lambda (r3709@p) (r36a6@quasicons (r36ae@quasi r3709@p r36ee@lev) (r36ac@vquasi r36f6@q r36ee@lev))) r3707@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3705@t))) (r2eff@syntax-dispatch r3705@t 'any))) r36ff@t))) (r2eff@syntax-dispatch r36ff@t '(#(scheme-id unquote-splicing) . each-any)))) r36f9@t))) (r2eff@syntax-dispatch r36f9@t '(#(scheme-id unquote) . each-any)))) r36f5@p)) r36f3@ls/false) ((lambda (r370b@t) ((lambda (r370d@ls/false) (if r370d@ls/false (apply (lambda () (list (r2e89@scheme-stx 'quote) '())) r370d@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r370b@t))) (r2eff@syntax-dispatch r370b@t '()))) r36f1@t))) (r2eff@syntax-dispatch r36f1@t '(any . any)))) r36ed@p))) (set! r36ae@quasi (lambda (r36b7@p r36b8@lev) ((lambda (r36bb@t) ((lambda (r36bd@ls/false) (if r36bd@ls/false (apply (lambda (r36bf@p) (if (= r36b8@lev '0) r36bf@p (r36a6@quasicons (r3688@datum 'unquote) (r36ae@quasi (list r36bf@p) (- r36b8@lev '1))))) r36bd@ls/false) ((lambda (r36c1@t) ((lambda (r36c3@ls/false) (if r36c3@ls/false (apply (lambda (r36c5@p r36c6@q) (if (= r36b8@lev '0) (r36a4@quasicons* r36c5@p (r36ae@quasi r36c6@q r36b8@lev)) (r36a6@quasicons (r36a6@quasicons (r3688@datum 'unquote) (r36ae@quasi r36c5@p (- r36b8@lev '1))) (r36ae@quasi r36c6@q r36b8@lev)))) r36c3@ls/false) ((lambda (r36c9@t) ((lambda (r36cb@ls/false) (if r36cb@ls/false (apply (lambda (r36cd@p r36ce@q) (if (= r36b8@lev '0) (r36a8@quasiappend r36cd@p (r36ae@quasi r36ce@q r36b8@lev)) (r36a6@quasicons (r36a6@quasicons (r3688@datum 'unquote-splicing) (r36ae@quasi r36cd@p (- r36b8@lev '1))) (r36ae@quasi r36ce@q r36b8@lev)))) r36cb@ls/false) ((lambda (r36d1@t) ((lambda (r36d3@ls/false) (if r36d3@ls/false (apply (lambda (r36d5@p) (r36a6@quasicons (r3688@datum 'quasiquote) (r36ae@quasi (list r36d5@p) (+ r36b8@lev '1)))) r36d3@ls/false) ((lambda (r36d7@t) ((lambda (r36d9@ls/false) (if r36d9@ls/false (apply (lambda (r36db@p r36dc@q) (r36a6@quasicons (r36ae@quasi r36db@p r36b8@lev) (r36ae@quasi r36dc@q r36b8@lev))) r36d9@ls/false) ((lambda (r36df@t) ((lambda (r36e1@ls/false) (if (and r36e1@ls/false (apply (lambda (r36e3@x) (not (r2cbc@stx? r36e3@x))) r36e1@ls/false)) (apply (lambda (r36e5@x) (r36aa@quasivector (r36ac@vquasi r36e5@x r36b8@lev))) r36e1@ls/false) ((lambda (r36e7@t) ((lambda (r36e9@ls/false) (if r36e9@ls/false (apply (lambda (r36eb@p) (list (r2e89@scheme-stx 'quote) r36eb@p)) r36e9@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r36e7@t))) (r2eff@syntax-dispatch r36e7@t 'any))) r36df@t))) (r2eff@syntax-dispatch r36df@t '#(vector each-any)))) r36d7@t))) (r2eff@syntax-dispatch r36d7@t '(any . any)))) r36d1@t))) (r2eff@syntax-dispatch r36d1@t '(#(scheme-id quasiquote) any)))) r36c9@t))) (r2eff@syntax-dispatch r36c9@t '((#(scheme-id unquote-splicing) . each-any) . any)))) r36c1@t))) (r2eff@syntax-dispatch r36c1@t '((#(scheme-id unquote) . each-any) . any)))) r36bb@t))) (r2eff@syntax-dispatch r36bb@t '(#(scheme-id unquote) any)))) r36b7@p))) (lambda (r36af@x) ((lambda (r36b1@t) ((lambda (r36b3@ls/false) (if r36b3@ls/false (apply (lambda (r36b5@e) (r36ae@quasi r36b5@e '0)) r36b3@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r36b1@t))) (r2eff@syntax-dispatch r36b1@t '(_ any)))) r36af@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! r2eef@quasisyntax-macro ((lambda () ((lambda (r378c@quasi) (begin (set! r378c@quasi (lambda (r37a7@p r37a8@lev) ((lambda (r37ab@t) ((lambda (r37ad@ls/false) (if r37ad@ls/false (apply (lambda (r37af@p) (if (= r37a8@lev '0) ((lambda (r37b1@g) (values (list r37b1@g) (list r37af@p) r37b1@g)) (gensym)) (call-with-values (lambda () (r378c@quasi r37af@p (- r37a8@lev '1))) (lambda (r37b9@r37b4 r37ba@r37b6 r37bb@r37b8) ((lambda (r37bf@p r37c0@rhs* r37c1@lhs*) (values r37c1@lhs* r37c0@rhs* (list 'unsyntax r37bf@p))) r37bb@r37b8 r37ba@r37b6 r37b9@r37b4))))) r37ad@ls/false) ((lambda (r37c5@t) ((lambda (r37c7@ls/false) (if (and r37c7@ls/false (apply (lambda () (= r37a8@lev '0)) r37c7@ls/false)) (apply (lambda () (r2fe8@syntax-violation '#f '"incorrect use of unsyntax" r37a7@p)) r37c7@ls/false) ((lambda (r37c9@t) ((lambda (r37cb@ls/false) (if r37cb@ls/false (apply (lambda (r37cd@p* r37ce@q) (call-with-values (lambda () (r378c@quasi r37ce@q r37a8@lev)) (lambda (r37d7@r37d2 r37d8@r37d4 r37d9@r37d6) ((lambda (r37dd@q r37de@rhs* r37df@lhs*) (if (= r37a8@lev '0) ((lambda (r37e3@g*) (values (append r37e3@g* r37df@lhs*) (append r37cd@p* r37de@rhs*) (append r37e3@g* r37dd@q))) (map (lambda (r37e5@x) (gensym)) r37cd@p*)) (call-with-values (lambda () (r378c@quasi r37cd@p* (- r37a8@lev '1))) (lambda (r37ed@r37e8 r37ee@r37ea r37ef@r37ec) ((lambda (r37f3@p* r37f4@rhs2* r37f5@lhs2*) (values (append r37f5@lhs2* r37df@lhs*) (append r37f4@rhs2* r37de@rhs*) (cons (cons 'unsyntax r37f3@p*) r37dd@q))) r37ef@r37ec r37ee@r37ea r37ed@r37e8))))) r37d9@r37d6 r37d8@r37d4 r37d7@r37d2)))) r37cb@ls/false) ((lambda (r37f9@t) ((lambda (r37fb@ls/false) (if r37fb@ls/false (apply (lambda (r37fd@p* r37fe@q) (call-with-values (lambda () (r378c@quasi r37fe@q r37a8@lev)) (lambda (r3807@r3802 r3808@r3804 r3809@r3806) ((lambda (r380d@q r380e@rhs* r380f@lhs*) (if (= r37a8@lev '0) ((lambda (r3813@g*) (values (append (map (lambda (r3815@g) (cons r3815@g '(...))) r3813@g*) r380f@lhs*) (append r37fd@p* r380e@rhs*) (append (apply append (map (lambda (r3817@g) (cons r3817@g '(...))) r3813@g*)) r380d@q))) (map (lambda (r3819@x) (gensym)) r37fd@p*)) (call-with-values (lambda () (r378c@quasi r37fd@p* (- r37a8@lev '1))) (lambda (r3821@r381c r3822@r381e r3823@r3820) ((lambda (r3827@p* r3828@rhs2* r3829@lhs2*) (values (append r3829@lhs2* r380f@lhs*) (append r3828@rhs2* r380e@rhs*) (cons (cons 'unsyntax-splicing r3827@p*) r380d@q))) r3823@r3820 r3822@r381e r3821@r381c))))) r3809@r3806 r3808@r3804 r3807@r3802)))) r37fb@ls/false) ((lambda (r382d@t) ((lambda (r382f@ls/false) (if (and r382f@ls/false (apply (lambda () (= r37a8@lev '0)) r382f@ls/false)) (apply (lambda () (r2fe8@syntax-violation '#f '"incorrect use of unsyntax-splicing" r37a7@p)) r382f@ls/false) ((lambda (r3831@t) ((lambda (r3833@ls/false) (if r3833@ls/false (apply (lambda (r3835@p) (call-with-values (lambda () (r378c@quasi r3835@p (+ r37a8@lev '1))) (lambda (r383d@r3838 r383e@r383a r383f@r383c) ((lambda (r3843@p r3844@rhs* r3845@lhs*) (values r3845@lhs* r3844@rhs* (list 'quasisyntax r3843@p))) r383f@r383c r383e@r383a r383d@r3838)))) r3833@ls/false) ((lambda (r3849@t) ((lambda (r384b@ls/false) (if r384b@ls/false (apply (lambda (r384d@p r384e@q) (call-with-values (lambda () (r378c@quasi r384d@p r37a8@lev)) (lambda (r385d@r3852 r385e@r3854 r385f@r3856) (call-with-values (lambda () (r378c@quasi r384e@q r37a8@lev)) (lambda (r3863@r3858 r3864@r385a r3865@r385c) ((lambda (r3869@q r386a@rhs2* r386b@lhs2* r386c@p r386d@rhs* r386e@lhs*) (values (append r386b@lhs2* r386e@lhs*) (append r386a@rhs2* r386d@rhs*) (cons r386c@p r3869@q))) r3865@r385c r3864@r385a r3863@r3858 r385f@r3856 r385e@r3854 r385d@r3852)))))) r384b@ls/false) ((lambda (r3875@t) ((lambda (r3877@ls/false) (if r3877@ls/false (apply (lambda (r3879@x*) (call-with-values (lambda () (r378c@quasi r3879@x* r37a8@lev)) (lambda (r3881@r387c r3882@r387e r3883@r3880) ((lambda (r3887@x* r3888@rhs* r3889@lhs*) (values r3889@lhs* r3888@rhs* (list->vector r3887@x*))) r3883@r3880 r3882@r387e r3881@r387c)))) r3877@ls/false) ((lambda (r388d@t) ((lambda (r388f@ls/false) (if r388f@ls/false (apply (lambda () (values '() '() r37a7@p)) r388f@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r388d@t))) (r2eff@syntax-dispatch r388d@t '_))) r3875@t))) (r2eff@syntax-dispatch r3875@t '#(vector each-any)))) r3849@t))) (r2eff@syntax-dispatch r3849@t '(any . any)))) r3831@t))) (r2eff@syntax-dispatch r3831@t '(#(scheme-id quasisyntax) any)))) r382d@t))) (r2eff@syntax-dispatch r382d@t '#(scheme-id unsyntax-splicing)))) r37f9@t))) (r2eff@syntax-dispatch r37f9@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) r37c9@t))) (r2eff@syntax-dispatch r37c9@t '((#(scheme-id unsyntax) . each-any) . any)))) r37c5@t))) (r2eff@syntax-dispatch r37c5@t '#(scheme-id unsyntax)))) r37ab@t))) (r2eff@syntax-dispatch r37ab@t '(#(scheme-id unsyntax) any)))) r37a7@p))) (lambda (r378d@x) ((lambda (r378f@t) ((lambda (r3791@ls/false) (if r3791@ls/false (apply (lambda (r3793@e) (call-with-values (lambda () (r378c@quasi r3793@e '0)) (lambda (r379b@r3796 r379c@r3798 r379d@r379a) ((lambda (r37a1@v r37a2@rhs* r37a3@lhs*) (r2eb5@bless (list 'syntax-case (cons 'list r37a2@rhs*) '() (list r37a3@lhs* (list 'syntax r37a1@v))))) r379d@r379a r379c@r3798 r379b@r3796)))) r3791@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r378f@t))) (r2eff@syntax-dispatch r378f@t '(_ any)))) r378d@x)))) '#f)))) (set! r2ef1@define-struct-macro (lambda (r3891@stx) (r2fe8@syntax-violation '#f '"define-struct not supported" r3891@stx))) (set! r2ef3@define-record-type-macro (lambda (r3893@x) ((lambda (r3896@id r3898@get-record-name r389a@get-record-constructor-name r389c@get-record-predicate-name r389e@get-clause r38a0@foo-rtd-code r38a2@parent-rtd-code r38a4@parent-rcd-code r38a6@foo-rcd-code r38a8@get-protocol-code r38aa@get-fields r38ac@get-mutator-indices r38ae@get-mutators r38b0@get-accessors r38b2@enumerate r38b4@do-define-record r38b6@verify-clauses) (begin (set! r3896@id (lambda (r3a89@ctxt . r3a8b@str*) (r2fec@datum->syntax r3a89@ctxt (string->symbol (apply string-append (map (lambda (r3a8d@x) (if (symbol? r3a8d@x) (symbol->string r3a8d@x) (if (string? r3a8d@x) r3a8d@x (assertion-violation 'define-record-type '"BUG")))) r3a8b@str*)))))) (set! r3898@get-record-name (lambda (r3a77@spec) ((lambda (r3a79@t) ((lambda (r3a7b@ls/false) (if r3a7b@ls/false (apply (lambda (r3a7d@foo r3a7e@make-foo r3a7f@foo?) r3a7d@foo) r3a7b@ls/false) ((lambda (r3a83@t) ((lambda (r3a85@ls/false) (if r3a85@ls/false (apply (lambda (r3a87@foo) r3a87@foo) r3a85@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3a83@t))) (r2eff@syntax-dispatch r3a83@t 'any))) r3a79@t))) (r2eff@syntax-dispatch r3a79@t '(any any any)))) r3a77@spec))) (set! r389a@get-record-constructor-name (lambda (r3a63@spec) ((lambda (r3a65@t) ((lambda (r3a67@ls/false) (if r3a67@ls/false (apply (lambda (r3a69@foo r3a6a@make-foo r3a6b@foo?) r3a6a@make-foo) r3a67@ls/false) ((lambda (r3a6f@t) ((lambda (r3a71@ls/false) (if (and r3a71@ls/false (apply (lambda (r3a73@foo) (r2cf4@id? r3a73@foo)) r3a71@ls/false)) (apply (lambda (r3a75@foo) (r3896@id r3a75@foo '"make-" (r2d0a@stx->datum r3a75@foo))) r3a71@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3a6f@t))) (r2eff@syntax-dispatch r3a6f@t 'any))) r3a65@t))) (r2eff@syntax-dispatch r3a65@t '(any any any)))) r3a63@spec))) (set! r389c@get-record-predicate-name (lambda (r3a4f@spec) ((lambda (r3a51@t) ((lambda (r3a53@ls/false) (if r3a53@ls/false (apply (lambda (r3a55@foo r3a56@make-foo r3a57@foo?) r3a57@foo?) r3a53@ls/false) ((lambda (r3a5b@t) ((lambda (r3a5d@ls/false) (if (and r3a5d@ls/false (apply (lambda (r3a5f@foo) (r2cf4@id? r3a5f@foo)) r3a5d@ls/false)) (apply (lambda (r3a61@foo) (r3896@id r3a61@foo (r2d0a@stx->datum r3a61@foo) '"?")) r3a5d@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3a5b@t))) (r2eff@syntax-dispatch r3a5b@t 'any))) r3a51@t))) (r2eff@syntax-dispatch r3a51@t '(any any any)))) r3a4f@spec))) (set! r389e@get-clause (lambda (r3a3d@id r3a3e@ls) ((lambda (r3a41@t) ((lambda (r3a43@ls/false) (if r3a43@ls/false (apply (lambda () '#f) r3a43@ls/false) ((lambda (r3a45@t) ((lambda (r3a47@ls/false) (if r3a47@ls/false (apply (lambda (r3a49@x r3a4a@rest r3a4b@ls) (if (r2cfc@free-id=? (r2eb5@bless r3a3d@id) r3a49@x) (cons r3a49@x r3a4a@rest) (r389e@get-clause r3a3d@id r3a4b@ls))) r3a47@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3a45@t))) (r2eff@syntax-dispatch r3a45@t '((any . any) . any)))) r3a41@t))) (r2eff@syntax-dispatch r3a41@t '()))) r3a3e@ls))) (set! r38a0@foo-rtd-code (lambda (r39eb@name r39ec@clause* r39ed@parent-rtd-code) ((lambda (r39f2@convert-field-spec*) (begin (set! r39f2@convert-field-spec* (lambda (r3a23@ls) (list->vector (map (lambda (r3a25@x) ((lambda (r3a27@t) ((lambda (r3a29@ls/false) (if r3a29@ls/false (apply (lambda (r3a2b@name r3a2c@rest) (list 'mutable r3a2b@name)) r3a29@ls/false) ((lambda (r3a2f@t) ((lambda (r3a31@ls/false) (if r3a31@ls/false (apply (lambda (r3a33@name r3a34@rest) (list 'immutable r3a33@name)) r3a31@ls/false) ((lambda (r3a37@t) ((lambda (r3a39@ls/false) (if r3a39@ls/false (apply (lambda (r3a3b@name) (list 'immutable r3a3b@name)) r3a39@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3a37@t))) (r2eff@syntax-dispatch r3a37@t 'any))) r3a2f@t))) (r2eff@syntax-dispatch r3a2f@t '(#(scheme-id immutable) any . any)))) r3a27@t))) (r2eff@syntax-dispatch r3a27@t '(#(scheme-id mutable) any . any)))) r3a25@x)) r3a23@ls)))) ((lambda (r39f3@uid-code r39f4@sealed? r39f5@opaque? r39f6@fields) (r2eb5@bless (list 'make-record-type-descriptor (list 'quote r39eb@name) r39ed@parent-rtd-code r39f3@uid-code r39f4@sealed? r39f5@opaque? r39f6@fields))) ((lambda (r39fb@t) ((lambda (r39fd@ls/false) (if r39fd@ls/false (apply (lambda () (list 'quote (gensym))) r39fd@ls/false) ((lambda (r39ff@t) ((lambda (r3a01@ls/false) (if r3a01@ls/false (apply (lambda (r3a03@uid) (list 'quote r3a03@uid)) r3a01@ls/false) ((lambda (r3a05@t) ((lambda (r3a07@ls/false) (if r3a07@ls/false (apply (lambda () '#f) r3a07@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3a05@t))) (r2eff@syntax-dispatch r3a05@t '_))) r39ff@t))) (r2eff@syntax-dispatch r39ff@t '(_ any)))) r39fb@t))) (r2eff@syntax-dispatch r39fb@t '(_)))) (r389e@get-clause 'nongenerative r39ec@clause*)) ((lambda (r3a09@t) ((lambda (r3a0b@ls/false) (if r3a0b@ls/false (apply (lambda () '#t) r3a0b@ls/false) ((lambda (r3a0d@t) ((lambda (r3a0f@ls/false) (if r3a0f@ls/false (apply (lambda () '#f) r3a0f@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3a0d@t))) (r2eff@syntax-dispatch r3a0d@t '_))) r3a09@t))) (r2eff@syntax-dispatch r3a09@t '(_ #(atom #t))))) (r389e@get-clause 'sealed r39ec@clause*)) ((lambda (r3a11@t) ((lambda (r3a13@ls/false) (if r3a13@ls/false (apply (lambda () '#t) r3a13@ls/false) ((lambda (r3a15@t) ((lambda (r3a17@ls/false) (if r3a17@ls/false (apply (lambda () '#f) r3a17@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3a15@t))) (r2eff@syntax-dispatch r3a15@t '_))) r3a11@t))) (r2eff@syntax-dispatch r3a11@t '(_ #(atom #t))))) (r389e@get-clause 'opaque r39ec@clause*)) ((lambda (r3a19@t) ((lambda (r3a1b@ls/false) (if r3a1b@ls/false (apply (lambda (r3a1d@field-spec*) (list 'quote (r39f2@convert-field-spec* r3a1d@field-spec*))) r3a1b@ls/false) ((lambda (r3a1f@t) ((lambda (r3a21@ls/false) (if r3a21@ls/false (apply (lambda () ''#()) r3a21@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3a1f@t))) (r2eff@syntax-dispatch r3a1f@t '_))) r3a19@t))) (r2eff@syntax-dispatch r3a19@t '(_ . each-any)))) (r389e@get-clause 'fields r39ec@clause*))))) '#f))) (set! r38a2@parent-rtd-code (lambda (r39d3@clause*) ((lambda (r39d5@t) ((lambda (r39d7@ls/false) (if r39d7@ls/false (apply (lambda (r39d9@name) (list 'record-type-descriptor r39d9@name)) r39d7@ls/false) ((lambda (r39db@t) ((lambda (r39dd@ls/false) (if r39dd@ls/false (apply (lambda () ((lambda (r39df@t) ((lambda (r39e1@ls/false) (if r39e1@ls/false (apply (lambda (r39e3@rtd r39e4@rcd) r39e3@rtd) r39e1@ls/false) ((lambda (r39e7@t) ((lambda (r39e9@ls/false) (if r39e9@ls/false (apply (lambda () '#f) r39e9@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r39e7@t))) (r2eff@syntax-dispatch r39e7@t '#(atom #f)))) r39df@t))) (r2eff@syntax-dispatch r39df@t '(_ any any)))) (r389e@get-clause 'parent-rtd r39d3@clause*))) r39dd@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r39db@t))) (r2eff@syntax-dispatch r39db@t '#(atom #f)))) r39d5@t))) (r2eff@syntax-dispatch r39d5@t '(_ any)))) (r389e@get-clause 'parent r39d3@clause*)))) (set! r38a4@parent-rcd-code (lambda (r39bb@clause*) ((lambda (r39bd@t) ((lambda (r39bf@ls/false) (if r39bf@ls/false (apply (lambda (r39c1@name) (list 'record-constructor-descriptor r39c1@name)) r39bf@ls/false) ((lambda (r39c3@t) ((lambda (r39c5@ls/false) (if r39c5@ls/false (apply (lambda () ((lambda (r39c7@t) ((lambda (r39c9@ls/false) (if r39c9@ls/false (apply (lambda (r39cb@rtd r39cc@rcd) r39cc@rcd) r39c9@ls/false) ((lambda (r39cf@t) ((lambda (r39d1@ls/false) (if r39d1@ls/false (apply (lambda () '#f) r39d1@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r39cf@t))) (r2eff@syntax-dispatch r39cf@t '#(atom #f)))) r39c7@t))) (r2eff@syntax-dispatch r39c7@t '(_ any any)))) (r389e@get-clause 'parent-rtd r39bb@clause*))) r39c5@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r39c3@t))) (r2eff@syntax-dispatch r39c3@t '#(atom #f)))) r39bd@t))) (r2eff@syntax-dispatch r39bd@t '(_ any)))) (r389e@get-clause 'parent r39bb@clause*)))) (set! r38a6@foo-rcd-code (lambda (r39b3@clause* r39b4@foo-rtd r39b5@protocol r39b6@parent-rcd-code) (list 'make-record-constructor-descriptor r39b4@foo-rtd r39b6@parent-rcd-code r39b5@protocol))) (set! r38a8@get-protocol-code (lambda (r39a7@clause*) ((lambda (r39a9@t) ((lambda (r39ab@ls/false) (if r39ab@ls/false (apply (lambda (r39ad@expr) r39ad@expr) r39ab@ls/false) ((lambda (r39af@t) ((lambda (r39b1@ls/false) (if r39b1@ls/false (apply (lambda () '#f) r39b1@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r39af@t))) (r2eff@syntax-dispatch r39af@t '_))) r39a9@t))) (r2eff@syntax-dispatch r39a9@t '(_ any)))) (r389e@get-clause 'protocol r39a7@clause*)))) (set! r38aa@get-fields (lambda (r3995@clause*) ((lambda (r3997@t) ((lambda (r3999@ls/false) (if r3999@ls/false (apply (lambda () '()) r3999@ls/false) ((lambda (r399b@t) ((lambda (r399d@ls/false) (if r399d@ls/false (apply (lambda (r399f@f*) r399f@f*) r399d@ls/false) ((lambda (r39a1@t) ((lambda (r39a3@ls/false) (if r39a3@ls/false (apply (lambda (r39a5@rest) (r38aa@get-fields r39a5@rest)) r39a3@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r39a1@t))) (r2eff@syntax-dispatch r39a1@t '(_ . any)))) r399b@t))) (r2eff@syntax-dispatch r399b@t '((#(scheme-id fields) . each-any) . _)))) r3997@t))) (r2eff@syntax-dispatch r3997@t '()))) r3995@clause*))) (set! r38ac@get-mutator-indices (lambda (r397d@fields) ((letrec ((r397f@f (lambda (r3981@fields r3982@i) ((lambda (r3985@t) ((lambda (r3987@ls/false) (if r3987@ls/false (apply (lambda () '()) r3987@ls/false) ((lambda (r3989@t) ((lambda (r398b@ls/false) (if r398b@ls/false (apply (lambda (r398d@rest) (cons r3982@i (r397f@f r398d@rest (+ r3982@i '1)))) r398b@ls/false) ((lambda (r398f@t) ((lambda (r3991@ls/false) (if r3991@ls/false (apply (lambda (r3993@rest) (r397f@f r3993@rest (+ r3982@i '1))) r3991@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r398f@t))) (r2eff@syntax-dispatch r398f@t '(_ . any)))) r3989@t))) (r2eff@syntax-dispatch r3989@t '((#(scheme-id mutable) . _) . any)))) r3985@t))) (r2eff@syntax-dispatch r3985@t '()))) r3981@fields)))) r397f@f) r397d@fields '0))) (set! r38ae@get-mutators (lambda (r3953@foo r3954@fields) ((lambda (r3958@gen-name) (begin (set! r3958@gen-name (lambda (r397b@x) (r2fec@datum->syntax r3953@foo (string->symbol (string-append (symbol->string (r2fee@syntax->datum r3953@foo)) '"-" (symbol->string (r2fee@syntax->datum r397b@x)) '"-set!"))))) ((letrec ((r3959@f (lambda (r395b@fields) ((lambda (r395d@t) ((lambda (r395f@ls/false) (if r395f@ls/false (apply (lambda () '()) r395f@ls/false) ((lambda (r3961@t) ((lambda (r3963@ls/false) (if r3963@ls/false (apply (lambda (r3965@name r3966@accessor r3967@mutator r3968@rest) (cons r3967@mutator (r3959@f r3968@rest))) r3963@ls/false) ((lambda (r396d@t) ((lambda (r396f@ls/false) (if r396f@ls/false (apply (lambda (r3971@name r3972@rest) (cons (r3958@gen-name r3971@name) (r3959@f r3972@rest))) r396f@ls/false) ((lambda (r3975@t) ((lambda (r3977@ls/false) (if r3977@ls/false (apply (lambda (r3979@rest) (r3959@f r3979@rest)) r3977@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3975@t))) (r2eff@syntax-dispatch r3975@t '(_ . any)))) r396d@t))) (r2eff@syntax-dispatch r396d@t '((#(scheme-id mutable) any) . any)))) r3961@t))) (r2eff@syntax-dispatch r3961@t '((#(scheme-id mutable) any any any) . any)))) r395d@t))) (r2eff@syntax-dispatch r395d@t '()))) r395b@fields)))) r3959@f) r3954@fields))) '#f))) (set! r38b0@get-accessors (lambda (r390f@foo r3910@fields) ((lambda (r3914@gen-name) (begin (set! r3914@gen-name (lambda (r3951@x) (r2fec@datum->syntax r390f@foo (string->symbol (string-append (symbol->string (r2fee@syntax->datum r390f@foo)) '"-" (symbol->string (r2fee@syntax->datum r3951@x))))))) (map (lambda (r3915@field) ((lambda (r3917@t) ((lambda (r3919@ls/false) (if (and r3919@ls/false (apply (lambda (r391b@name r391c@accessor r391d@mutator) (r2cf4@id? r391c@accessor)) r3919@ls/false)) (apply (lambda (r3921@name r3922@accessor r3923@mutator) r3922@accessor) r3919@ls/false) ((lambda (r3927@t) ((lambda (r3929@ls/false) (if (and r3929@ls/false (apply (lambda (r392b@name r392c@accessor) (r2cf4@id? r392c@accessor)) r3929@ls/false)) (apply (lambda (r392f@name r3930@accessor) r3930@accessor) r3929@ls/false) ((lambda (r3933@t) ((lambda (r3935@ls/false) (if (and r3935@ls/false (apply (lambda (r3937@name) (r2cf4@id? r3937@name)) r3935@ls/false)) (apply (lambda (r3939@name) (r3914@gen-name r3939@name)) r3935@ls/false) ((lambda (r393b@t) ((lambda (r393d@ls/false) (if (and r393d@ls/false (apply (lambda (r393f@name) (r2cf4@id? r393f@name)) r393d@ls/false)) (apply (lambda (r3941@name) (r3914@gen-name r3941@name)) r393d@ls/false) ((lambda (r3943@t) ((lambda (r3945@ls/false) (if (and r3945@ls/false (apply (lambda (r3947@name) (r2cf4@id? r3947@name)) r3945@ls/false)) (apply (lambda (r3949@name) (r3914@gen-name r3949@name)) r3945@ls/false) ((lambda (r394b@t) ((lambda (r394d@ls/false) (if r394d@ls/false (apply (lambda (r394f@others) (r2fe8@syntax-violation '#f '"invalid field spec" r3915@field)) r394d@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r394b@t))) (r2eff@syntax-dispatch r394b@t 'any))) r3943@t))) (r2eff@syntax-dispatch r3943@t 'any))) r393b@t))) (r2eff@syntax-dispatch r393b@t '(#(scheme-id immutable) any)))) r3933@t))) (r2eff@syntax-dispatch r3933@t '(#(scheme-id mutable) any)))) r3927@t))) (r2eff@syntax-dispatch r3927@t '(#(scheme-id immutable) any any)))) r3917@t))) (r2eff@syntax-dispatch r3917@t '(#(scheme-id mutable) any any any)))) r3915@field)) r3910@fields))) '#f))) (set! r38b2@enumerate (lambda (r3907@ls) ((letrec ((r3909@f (lambda (r390b@ls r390c@i) (if (null? r390b@ls) '() (cons r390c@i (r3909@f (cdr r390b@ls) (+ r390c@i '1))))))) r3909@f) r3907@ls '0))) (set! r38b4@do-define-record (lambda (r38df@namespec r38e0@clause*) ((lambda (r38e3@foo) ((lambda (r38e5@foo-rtd) ((lambda (r38e7@foo-rcd) ((lambda (r38e9@protocol) ((lambda (r38eb@make-foo) ((lambda (r38ed@fields) ((lambda (r38ef@idx*) ((lambda (r38f1@foo-x*) ((lambda (r38f3@set-foo-x!*) ((lambda (r38f5@set-foo-idx*) ((lambda (r38f7@foo?) ((lambda (r38f9@foo-rtd-code) ((lambda (r38fb@foo-rcd-code) ((lambda (r38fd@protocol-code) ((lambda () (r2eb5@bless (cons 'begin (cons (list 'define r38e5@foo-rtd r38f9@foo-rtd-code) (cons (list 'define r38e9@protocol r38fd@protocol-code) (cons (list 'define r38e7@foo-rcd r38fb@foo-rcd-code) (cons (list 'define-syntax r38e3@foo (list 'list ''$rtd (list 'syntax r38e5@foo-rtd) (list 'syntax r38e7@foo-rcd))) (cons (list 'define r38f7@foo? (list 'record-predicate r38e5@foo-rtd)) (cons (list 'define r38eb@make-foo (list 'record-constructor r38e7@foo-rcd)) (append (map (lambda (r38ff@foo-x r3900@idx) (list 'define r38ff@foo-x (list 'record-accessor r38e5@foo-rtd r3900@idx))) r38f1@foo-x* r38ef@idx*) (map (lambda (r3903@set-foo-x! r3904@idx) (list 'define r3903@set-foo-x! (list 'record-mutator r38e5@foo-rtd r3904@idx))) r38f3@set-foo-x!* r38f5@set-foo-idx*))))))))))))) (r38a8@get-protocol-code r38e0@clause*))) (r38a6@foo-rcd-code r38e0@clause* r38e5@foo-rtd r38e9@protocol (r38a4@parent-rcd-code r38e0@clause*)))) (r38a0@foo-rtd-code r38e3@foo r38e0@clause* (r38a2@parent-rtd-code r38e0@clause*)))) (r389c@get-record-predicate-name r38df@namespec))) (r38ac@get-mutator-indices r38ed@fields))) (r38ae@get-mutators r38e3@foo r38ed@fields))) (r38b0@get-accessors r38e3@foo r38ed@fields))) (r38b2@enumerate r38ed@fields))) (r38aa@get-fields r38e0@clause*))) (r389a@get-record-constructor-name r38df@namespec))) (gensym))) (gensym))) (gensym))) (r3898@get-record-name r38df@namespec)))) (set! r38b6@verify-clauses (lambda (r38bf@x r38c0@cls*) ((lambda (r38c4@valid-kwds r38c6@free-id-member?) (begin (set! r38c4@valid-kwds (map r2eb5@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! r38c6@free-id-member? (lambda (r38db@x r38dc@ls) (and (pair? r38dc@ls) (or (r2cfc@free-id=? r38db@x (car r38dc@ls)) (r38c6@free-id-member? r38db@x (cdr r38dc@ls)))))) ((letrec ((r38c7@f (lambda (r38c9@cls* r38ca@seen*) (if (not (null? r38c9@cls*)) ((lambda (r38cd@t) ((lambda (r38cf@ls/false) (if r38cf@ls/false (apply (lambda (r38d1@kwd r38d2@rest) (if (or (not (r2cf4@id? r38d1@kwd)) (not (r38c6@free-id-member? r38d1@kwd r38c4@valid-kwds))) (r2fe8@syntax-violation '#f '"not a valid define-record-type keyword" r38d1@kwd) (if (r2d02@bound-id-member? r38d1@kwd r38ca@seen*) (r2fe8@syntax-violation '#f '"duplicate use of keyword " r38bf@x r38d1@kwd) (r38c7@f (cdr r38c9@cls*) (cons r38d1@kwd r38ca@seen*))))) r38cf@ls/false) ((lambda (r38d5@t) ((lambda (r38d7@ls/false) (if r38d7@ls/false (apply (lambda (r38d9@cls) (r2fe8@syntax-violation '#f '"malformed define-record-type clause" r38d9@cls)) r38d7@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r38d5@t))) (r2eff@syntax-dispatch r38d5@t 'any))) r38cd@t))) (r2eff@syntax-dispatch r38cd@t '(any . any)))) (car r38c9@cls*)) (void))))) r38c7@f) r38c0@cls* '()))) '#f '#f))) ((lambda (r38b7@t) ((lambda (r38b9@ls/false) (if r38b9@ls/false (apply (lambda (r38bb@namespec r38bc@clause*) (begin (r38b6@verify-clauses r3893@x r38bc@clause*) (r38b4@do-define-record r38bb@namespec r38bc@clause*))) r38b9@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r38b7@t))) (r2eff@syntax-dispatch r38b7@t '(_ any . each-any)))) r3893@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! r2ef5@define-condition-type-macro (lambda (r3a8f@x) ((lambda (r3a92@mkname) (begin (set! r3a92@mkname (lambda (r3abf@name r3ac0@suffix) (r2fec@datum->syntax r3abf@name (string->symbol (string-append (symbol->string (r2fee@syntax->datum r3abf@name)) r3ac0@suffix))))) ((lambda (r3a93@t) ((lambda (r3a95@ls/false) (if (and r3a95@ls/false (apply (lambda (r3a97@ctxt r3a98@name r3a99@super r3a9a@constructor r3a9b@predicate r3a9c@field* r3a9d@accessor*) (and (r2cf4@id? r3a98@name) (r2cf4@id? r3a99@super) (r2cf4@id? r3a9a@constructor) (r2cf4@id? r3a9b@predicate) (for-all r2cf4@id? r3a9c@field*) (for-all r2cf4@id? r3a9d@accessor*))) r3a95@ls/false)) (apply (lambda (r3aa5@ctxt r3aa6@name r3aa7@super r3aa8@constructor r3aa9@predicate r3aaa@field* r3aab@accessor*) ((lambda (r3ab3@aux-accessor*) (r2eb5@bless (cons 'begin (cons (cons 'define-record-type (cons (list r3aa6@name r3aa8@constructor (gensym)) (cons (list 'parent r3aa7@super) (cons (cons 'fields (map (lambda (r3ab5@field r3ab6@aux) (list 'immutable r3ab5@field r3ab6@aux)) r3aaa@field* r3ab3@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define r3aa9@predicate (list 'condition-predicate (list 'record-type-descriptor r3aa6@name))) (map (lambda (r3ab9@accessor r3aba@aux) (list 'define r3ab9@accessor (list 'condition-accessor (list 'record-type-descriptor r3aa6@name) r3aba@aux))) r3aab@accessor* r3ab3@aux-accessor*)))))) (map (lambda (r3abd@x) (gensym)) r3aab@accessor*))) r3a95@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3a93@t))) (r2eff@syntax-dispatch r3a93@t '(any any any any any . #(each (any any)))))) r3a8f@x))) '#f))) (set! r2ef7@incorrect-usage-macro (lambda (r3ac3@e) (r2fe8@syntax-violation '#f '"incorrect usage of auxiliary keyword" r3ac3@e))) (set! r2ef9@parameterize-macro (lambda (r3ac5@e) ((lambda (r3ac7@t) ((lambda (r3ac9@ls/false) (if r3ac9@ls/false (apply (lambda (r3acb@b r3acc@b*) (r2eb5@bless (cons 'let (cons '() (cons r3acb@b r3acc@b*))))) r3ac9@ls/false) ((lambda (r3acf@t) ((lambda (r3ad1@ls/false) (if r3ad1@ls/false (apply (lambda (r3ad3@olhs* r3ad4@orhs* r3ad5@b r3ad6@b*) ((lambda (r3adb@lhs* r3adc@rhs*) (r2eb5@bless (cons (list 'lambda (append r3adb@lhs* r3adc@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (r3adf@lhs r3ae0@rhs) (list 'let (list (list 't (list r3adf@lhs))) (list r3adf@lhs r3ae0@rhs) (cons 'set! (cons r3ae0@rhs '(t))))) r3adb@lhs* r3adc@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons r3ad5@b r3ad6@b*))) '(swap)))))) (append r3ad3@olhs* r3ad4@orhs*)))) (r2fd6@generate-temporaries r3ad3@olhs*) (r2fd6@generate-temporaries r3ad4@orhs*))) r3ad1@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3acf@t))) (r2eff@syntax-dispatch r3acf@t '(_ #(each (any any)) any . each-any)))) r3ac7@t))) (r2eff@syntax-dispatch r3ac7@t '(_ () any . each-any)))) r3ac5@e))) (set! r2efb@foreign-call-transformer (lambda (r3ae3@e r3ae4@r r3ae5@mr) ((lambda (r3ae9@t) ((lambda (r3aeb@ls/false) (if r3aeb@ls/false (apply (lambda (r3aed@name r3aee@arg*) (cons 'foreign-call (cons (r2f21@chi-expr r3aed@name r3ae4@r r3ae5@mr) (r2f1d@chi-expr* r3aee@arg* r3ae4@r r3ae5@mr)))) r3aeb@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3ae9@t))) (r2eff@syntax-dispatch r3ae9@t '(_ any . each-any)))) r3ae3@e))) (set! r2efd@convert-pattern (lambda (r3af1@pattern r3af2@keys) ((lambda (r3af6@cvt* r3af8@cvt) (begin (set! r3af6@cvt* (lambda (r3b95@p* r3b96@n r3b97@ids) (if (null? r3b95@p*) (values '() r3b97@ids) (call-with-values (lambda () (r3af6@cvt* (cdr r3b95@p*) r3b96@n r3b97@ids)) (lambda (r3b9f@r3b9c r3ba0@r3b9e) ((lambda (r3ba3@ids r3ba4@y) (call-with-values (lambda () (r3af8@cvt (car r3b95@p*) r3b96@n r3ba3@ids)) (lambda (r3bab@r3ba8 r3bac@r3baa) ((lambda (r3baf@ids r3bb0@x) (values (cons r3bb0@x r3ba4@y) r3baf@ids)) r3bac@r3baa r3bab@r3ba8)))) r3ba0@r3b9e r3b9f@r3b9c)))))) (set! r3af8@cvt (lambda (r3af9@p r3afa@n r3afb@ids) ((lambda (r3aff@t) ((lambda (r3b01@ls/false) (if (and r3b01@ls/false (apply (lambda (r3b03@id) (r2cf4@id? r3b03@id)) r3b01@ls/false)) (apply (lambda (r3b05@id) (if (r2d02@bound-id-member? r3af9@p r3af2@keys) (values (vector 'free-id r3af9@p) r3afb@ids) (if (r2cfc@free-id=? r3af9@p (r2e89@scheme-stx '_)) (values '_ r3afb@ids) (values 'any (cons (cons r3af9@p r3afa@n) r3afb@ids))))) r3b01@ls/false) ((lambda (r3b07@t) ((lambda (r3b09@ls/false) (if (and r3b09@ls/false (apply (lambda (r3b0b@p r3b0c@dots) (r2f01@ellipsis? r3b0c@dots)) r3b09@ls/false)) (apply (lambda (r3b0f@p r3b10@dots) (call-with-values (lambda () (r3af8@cvt r3b0f@p (+ r3afa@n '1) r3afb@ids)) (lambda (r3b17@r3b14 r3b18@r3b16) ((lambda (r3b1b@ids r3b1c@p) (values (if (eq? r3b1c@p 'any) 'each-any (vector 'each r3b1c@p)) r3b1b@ids)) r3b18@r3b16 r3b17@r3b14)))) r3b09@ls/false) ((lambda (r3b1f@t) ((lambda (r3b21@ls/false) (if (and r3b21@ls/false (apply (lambda (r3b23@x r3b24@dots r3b25@ys r3b26@z) (r2f01@ellipsis? r3b24@dots)) r3b21@ls/false)) (apply (lambda (r3b2b@x r3b2c@dots r3b2d@ys r3b2e@z) (call-with-values (lambda () (r3af8@cvt r3b2e@z r3afa@n r3afb@ids)) (lambda (r3b37@r3b34 r3b38@r3b36) ((lambda (r3b3b@ids r3b3c@z) (call-with-values (lambda () (r3af6@cvt* r3b2d@ys r3afa@n r3b3b@ids)) (lambda (r3b43@r3b40 r3b44@r3b42) ((lambda (r3b47@ids r3b48@ys) (call-with-values (lambda () (r3af8@cvt r3b2b@x (+ r3afa@n '1) r3b47@ids)) (lambda (r3b4f@r3b4c r3b50@r3b4e) ((lambda (r3b53@ids r3b54@x) (values (vector 'each+ r3b54@x (reverse r3b48@ys) r3b3c@z) r3b53@ids)) r3b50@r3b4e r3b4f@r3b4c)))) r3b44@r3b42 r3b43@r3b40)))) r3b38@r3b36 r3b37@r3b34)))) r3b21@ls/false) ((lambda (r3b57@t) ((lambda (r3b59@ls/false) (if r3b59@ls/false (apply (lambda (r3b5b@x r3b5c@y) (call-with-values (lambda () (r3af8@cvt r3b5c@y r3afa@n r3afb@ids)) (lambda (r3b63@r3b60 r3b64@r3b62) ((lambda (r3b67@ids r3b68@y) (call-with-values (lambda () (r3af8@cvt r3b5b@x r3afa@n r3b67@ids)) (lambda (r3b6f@r3b6c r3b70@r3b6e) ((lambda (r3b73@ids r3b74@x) (values (cons r3b74@x r3b68@y) r3b73@ids)) r3b70@r3b6e r3b6f@r3b6c)))) r3b64@r3b62 r3b63@r3b60)))) r3b59@ls/false) ((lambda (r3b77@t) ((lambda (r3b79@ls/false) (if r3b79@ls/false (apply (lambda () (values '() r3afb@ids)) r3b79@ls/false) ((lambda (r3b7b@t) ((lambda (r3b7d@ls/false) (if (and r3b7d@ls/false (apply (lambda (r3b7f@p) (not (r2cbc@stx? r3b7f@p))) r3b7d@ls/false)) (apply (lambda (r3b81@p) (call-with-values (lambda () (r3af8@cvt r3b81@p r3afa@n r3afb@ids)) (lambda (r3b87@r3b84 r3b88@r3b86) ((lambda (r3b8b@ids r3b8c@p) (values (vector 'vector r3b8c@p) r3b8b@ids)) r3b88@r3b86 r3b87@r3b84)))) r3b7d@ls/false) ((lambda (r3b8f@t) ((lambda (r3b91@ls/false) (if r3b91@ls/false (apply (lambda (r3b93@datum) (values (vector 'atom (r2d0a@stx->datum r3b93@datum)) r3afb@ids)) r3b91@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3b8f@t))) (r2eff@syntax-dispatch r3b8f@t 'any))) r3b7b@t))) (r2eff@syntax-dispatch r3b7b@t '#(vector each-any)))) r3b77@t))) (r2eff@syntax-dispatch r3b77@t '()))) r3b57@t))) (r2eff@syntax-dispatch r3b57@t '(any . any)))) r3b1f@t))) (r2eff@syntax-dispatch r3b1f@t '(any any . #(each+ any () any))))) r3b07@t))) (r2eff@syntax-dispatch r3b07@t '(any any)))) r3aff@t))) (r2eff@syntax-dispatch r3aff@t 'any))) r3af9@p))) (r3af8@cvt r3af1@pattern '0 '()))) '#f '#f))) (set! r2eff@syntax-dispatch ((lambda () ((lambda (r3bb4@stx^ r3bb6@match-each r3bb8@match-each+ r3bba@match-each-any r3bbc@match-empty r3bbe@combine r3bc0@match* r3bc2@match) (begin (set! r3bb4@stx^ (lambda (r3c8f@e r3c90@m* r3c91@s* r3c92@ae*) (if (and (null? r3c90@m*) (null? r3c91@s*) (null? r3c92@ae*)) r3c8f@e (r2cdc@mkstx r3c8f@e r3c90@m* r3c91@s* r3c92@ae*)))) (set! r3bb6@match-each (lambda (r3c6f@e r3c70@p r3c71@m* r3c72@s* r3c73@ae*) (if (pair? r3c6f@e) ((lambda (r3c79@first) (and r3c79@first ((lambda (r3c7b@rest) (and r3c7b@rest (cons r3c79@first r3c7b@rest))) (r3bb6@match-each (cdr r3c6f@e) r3c70@p r3c71@m* r3c72@s* r3c73@ae*)))) (r3bc2@match (car r3c6f@e) r3c70@p r3c71@m* r3c72@s* r3c73@ae* '())) (if (null? r3c6f@e) '() (if (r2cbc@stx? r3c6f@e) (and (not (r2c72@top-marked? r3c71@m*)) (call-with-values (lambda () (r2cda@join-wraps r3c71@m* r3c72@s* r3c73@ae* r3c6f@e)) (lambda (r3c83@r3c7e r3c84@r3c80 r3c85@r3c82) ((lambda (r3c89@ae* r3c8a@s* r3c8b@m*) (r3bb6@match-each (r2cc0@stx-expr r3c6f@e) r3c70@p r3c8b@m* r3c8a@s* r3c89@ae*)) r3c85@r3c82 r3c84@r3c80 r3c83@r3c7e)))) (if (r2893@r27b2@annotation? r3c6f@e) (r3bb6@match-each (r2895@r27b6@annotation-expression r3c6f@e) r3c70@p r3c71@m* r3c72@s* r3c73@ae*) '#f)))))) (set! r3bb8@match-each+ (lambda (r3c2f@e r3c30@x-pat r3c31@y-pat r3c32@z-pat r3c33@m* r3c34@s* r3c35@ae* r3c36@r) ((letrec ((r3c3f@f (lambda (r3c41@e r3c42@m* r3c43@s* r3c44@ae*) (if (pair? r3c41@e) (call-with-values (lambda () (r3c3f@f (cdr r3c41@e) r3c42@m* r3c43@s* r3c44@ae*)) (lambda (r3c4f@r3c4a r3c50@r3c4c r3c51@r3c4e) ((lambda (r3c55@r r3c56@y-pat r3c57@xr*) (if r3c55@r (if (null? r3c56@y-pat) ((lambda (r3c5b@xr) (if r3c5b@xr (values (cons r3c5b@xr r3c57@xr*) r3c56@y-pat r3c55@r) (values '#f '#f '#f))) (r3bc2@match (car r3c41@e) r3c30@x-pat r3c42@m* r3c43@s* r3c44@ae* '())) (values '() (cdr r3c56@y-pat) (r3bc2@match (car r3c41@e) (car r3c56@y-pat) r3c42@m* r3c43@s* r3c44@ae* r3c55@r))) (values '#f '#f '#f))) r3c51@r3c4e r3c50@r3c4c r3c4f@r3c4a))) (if (r2cbc@stx? r3c41@e) (if (r2c72@top-marked? r3c42@m*) (values '() r3c31@y-pat (r3bc2@match r3c41@e r3c32@z-pat r3c42@m* r3c43@s* r3c44@ae* r3c36@r)) (call-with-values (lambda () (r2cda@join-wraps r3c42@m* r3c43@s* r3c44@ae* r3c41@e)) (lambda (r3c63@r3c5e r3c64@r3c60 r3c65@r3c62) ((lambda (r3c69@ae* r3c6a@s* r3c6b@m*) (r3c3f@f (r2cc0@stx-expr r3c41@e) r3c6b@m* r3c6a@s* r3c69@ae*)) r3c65@r3c62 r3c64@r3c60 r3c63@r3c5e)))) (if (r2893@r27b2@annotation? r3c41@e) (r3c3f@f (r2895@r27b6@annotation-expression r3c41@e) r3c42@m* r3c43@s* r3c44@ae*) (values '() r3c31@y-pat (r3bc2@match r3c41@e r3c32@z-pat r3c42@m* r3c43@s* r3c44@ae* r3c36@r)))))))) r3c3f@f) r3c2f@e r3c33@m* r3c34@s* r3c35@ae*))) (set! r3bba@match-each-any (lambda (r3c13@e r3c14@m* r3c15@s* r3c16@ae*) (if (pair? r3c13@e) ((lambda (r3c1b@l) (and r3c1b@l (cons (r3bb4@stx^ (car r3c13@e) r3c14@m* r3c15@s* r3c16@ae*) r3c1b@l))) (r3bba@match-each-any (cdr r3c13@e) r3c14@m* r3c15@s* r3c16@ae*)) (if (null? r3c13@e) '() (if (r2cbc@stx? r3c13@e) (and (not (r2c72@top-marked? r3c14@m*)) (call-with-values (lambda () (r2cda@join-wraps r3c14@m* r3c15@s* r3c16@ae* r3c13@e)) (lambda (r3c23@r3c1e r3c24@r3c20 r3c25@r3c22) ((lambda (r3c29@ae* r3c2a@s* r3c2b@m*) (r3bba@match-each-any (r2cc0@stx-expr r3c13@e) r3c2b@m* r3c2a@s* r3c29@ae*)) r3c25@r3c22 r3c24@r3c20 r3c23@r3c1e)))) (if (r2893@r27b2@annotation? r3c13@e) (r3bba@match-each-any (r2895@r27b6@annotation-expression r3c13@e) r3c14@m* r3c15@s* r3c16@ae*) '#f)))))) (set! r3bbc@match-empty (lambda (r3c0d@p r3c0e@r) (if (null? r3c0d@p) r3c0e@r (if (eq? r3c0d@p '_) r3c0e@r (if (eq? r3c0d@p 'any) (cons '() r3c0e@r) (if (pair? r3c0d@p) (r3bbc@match-empty (car r3c0d@p) (r3bbc@match-empty (cdr r3c0d@p) r3c0e@r)) (if (eq? r3c0d@p 'each-any) (cons '() r3c0e@r) ((lambda (r3c11@t) (if (memv r3c11@t '(each)) (r3bbc@match-empty (vector-ref r3c0d@p '1) r3c0e@r) (if (memv r3c11@t '(each+)) (r3bbc@match-empty (vector-ref r3c0d@p '1) (r3bbc@match-empty (reverse (vector-ref r3c0d@p '2)) (r3bbc@match-empty (vector-ref r3c0d@p '3) r3c0e@r))) (if (memv r3c11@t '(free-id atom)) r3c0e@r (if (memv r3c11@t '(scheme-id atom)) r3c0e@r (if (memv r3c11@t '(vector)) (r3bbc@match-empty (vector-ref r3c0d@p '1) r3c0e@r) (assertion-violation 'syntax-dispatch '"invalid pattern" r3c0d@p))))))) (vector-ref r3c0d@p '0))))))))) (set! r3bbe@combine (lambda (r3c09@r* r3c0a@r) (if (null? (car r3c09@r*)) r3c0a@r (cons (map car r3c09@r*) (r3bbe@combine (map cdr r3c09@r*) r3c0a@r))))) (set! r3bc0@match* (lambda (r3be5@e r3be6@p r3be7@m* r3be8@s* r3be9@ae* r3bea@r) (if (null? r3be6@p) (and (null? r3be5@e) r3bea@r) (if (pair? r3be6@p) (and (pair? r3be5@e) (r3bc2@match (car r3be5@e) (car r3be6@p) r3be7@m* r3be8@s* r3be9@ae* (r3bc2@match (cdr r3be5@e) (cdr r3be6@p) r3be7@m* r3be8@s* r3be9@ae* r3bea@r))) (if (eq? r3be6@p 'each-any) ((lambda (r3bf1@l) (and r3bf1@l (cons r3bf1@l r3bea@r))) (r3bba@match-each-any r3be5@e r3be7@m* r3be8@s* r3be9@ae*)) ((lambda (r3bf3@t) (if (memv r3bf3@t '(each)) (if (null? r3be5@e) (r3bbc@match-empty (vector-ref r3be6@p '1) r3bea@r) ((lambda (r3bf5@r*) (and r3bf5@r* (r3bbe@combine r3bf5@r* r3bea@r))) (r3bb6@match-each r3be5@e (vector-ref r3be6@p '1) r3be7@m* r3be8@s* r3be9@ae*))) (if (memv r3bf3@t '(free-id)) (and (symbol? r3be5@e) (r2c72@top-marked? r3be7@m*) (r2cfc@free-id=? (r3bb4@stx^ r3be5@e r3be7@m* r3be8@s* r3be9@ae*) (vector-ref r3be6@p '1)) r3bea@r) (if (memv r3bf3@t '(scheme-id)) (and (symbol? r3be5@e) (r2c72@top-marked? r3be7@m*) (r2cfc@free-id=? (r3bb4@stx^ r3be5@e r3be7@m* r3be8@s* r3be9@ae*) (r2e89@scheme-stx (vector-ref r3be6@p '1))) r3bea@r) (if (memv r3bf3@t '(each+)) (call-with-values (lambda () (r3bb8@match-each+ r3be5@e (vector-ref r3be6@p '1) (vector-ref r3be6@p '2) (vector-ref r3be6@p '3) r3be7@m* r3be8@s* r3be9@ae* r3bea@r)) (lambda (r3bfd@r3bf8 r3bfe@r3bfa r3bff@r3bfc) ((lambda (r3c03@r r3c04@y-pat r3c05@xr*) (and r3c03@r (null? r3c04@y-pat) (if (null? r3c05@xr*) (r3bbc@match-empty (vector-ref r3be6@p '1) r3c03@r) (r3bbe@combine r3c05@xr* r3c03@r)))) r3bff@r3bfc r3bfe@r3bfa r3bfd@r3bf8))) (if (memv r3bf3@t '(atom)) (and (fast-equal? (vector-ref r3be6@p '1) (r2d08@strip r3be5@e r3be7@m*)) r3bea@r) (if (memv r3bf3@t '(vector)) (and (vector? r3be5@e) (r3bc2@match (vector->list r3be5@e) (vector-ref r3be6@p '1) r3be7@m* r3be8@s* r3be9@ae* r3bea@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" r3be6@p)))))))) (vector-ref r3be6@p '0))))))) (set! r3bc2@match (lambda (r3bc7@e r3bc8@p r3bc9@m* r3bca@s* r3bcb@ae* r3bcc@r) (if (not r3bcc@r) '#f (if (eq? r3bc8@p '_) r3bcc@r (if (eq? r3bc8@p 'any) (cons (r3bb4@stx^ r3bc7@e r3bc9@m* r3bca@s* r3bcb@ae*) r3bcc@r) (if (r2cbc@stx? r3bc7@e) (and (not (r2c72@top-marked? r3bc9@m*)) (call-with-values (lambda () (r2cda@join-wraps r3bc9@m* r3bca@s* r3bcb@ae* r3bc7@e)) (lambda (r3bd9@r3bd4 r3bda@r3bd6 r3bdb@r3bd8) ((lambda (r3bdf@ae* r3be0@s* r3be1@m*) (r3bc2@match (r2cc0@stx-expr r3bc7@e) r3bc8@p r3be1@m* r3be0@s* r3bdf@ae* r3bcc@r)) r3bdb@r3bd8 r3bda@r3bd6 r3bd9@r3bd4)))) (if (r2893@r27b2@annotation? r3bc7@e) (r3bc2@match (r2895@r27b6@annotation-expression r3bc7@e) r3bc8@p r3bc9@m* r3bca@s* r3bcb@ae* r3bcc@r) (r3bc0@match* r3bc7@e r3bc8@p r3bc9@m* r3bca@s* r3bcb@ae* r3bcc@r)))))))) (lambda (r3bc3@e r3bc4@p) (r3bc2@match r3bc3@e r3bc4@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! r2f01@ellipsis? (lambda (r3c97@x) (and (r2cf4@id? r3c97@x) (r2cfc@free-id=? r3c97@x (r2e89@scheme-stx '...))))) (set! r2f03@underscore? (lambda (r3c99@x) (and (r2cf4@id? r3c99@x) (r2cfc@free-id=? r3c99@x (r2e89@scheme-stx '_))))) (set! r2f05@verify-literals (lambda (r3c9b@lits r3c9c@expr) (for-each (lambda (r3c9f@x) (if (or (not (r2cf4@id? r3c9f@x)) (r2f01@ellipsis? r3c9f@x) (r2f03@underscore? r3c9f@x)) (r2fe8@syntax-violation '#f '"invalid literal" r3c9c@expr r3c9f@x) (void))) r3c9b@lits))) (set! r2f07@syntax-case-transformer ((lambda () ((lambda (r3ca2@build-dispatch-call r3ca4@invalid-ids-error r3ca6@gen-clause r3ca8@gen-syntax-case) (begin (set! r3ca2@build-dispatch-call (lambda (r3d13@pvars r3d14@expr r3d15@y r3d16@r r3d17@mr) ((lambda (r3d1d@ids r3d1e@levels) ((lambda (r3d21@labels r3d22@new-vars) ((lambda (r3d25@body) (list '(primitive apply) (r2c50@r2b90@build-lambda '#f r3d22@new-vars r3d25@body) r3d15@y)) (r2f21@chi-expr (r2ce0@add-subst (r2caf@make-full-rib r3d1d@ids r3d21@labels) r3d14@expr) (append (map (lambda (r3d27@label r3d28@var r3d29@level) (cons r3d27@label (r2d14@make-binding 'syntax (cons r3d28@var r3d29@level)))) r3d21@labels r3d22@new-vars (map cdr r3d13@pvars)) r3d16@r) r3d17@mr))) (map r2c78@gen-label r3d1d@ids) (map r2c74@gen-lexical r3d1d@ids))) (map car r3d13@pvars) (map cdr r3d13@pvars)))) (set! r3ca4@invalid-ids-error (lambda (r3d07@id* r3d08@e r3d09@class) ((letrec ((r3d0d@find (lambda (r3d0f@id* r3d10@ok*) (if (null? r3d0f@id*) (r2fe8@syntax-violation '#f '"invalid syntax" r3d08@e) (if (r2cf4@id? (car r3d0f@id*)) (if (r2d02@bound-id-member? (car r3d0f@id*) r3d10@ok*) (r2fe4@syntax-error (car r3d0f@id*) '"duplicate " r3d09@class) (r3d0d@find (cdr r3d0f@id*) (cons (car r3d0f@id*) r3d10@ok*))) (r2fe4@syntax-error (car r3d0f@id*) '"invalid " r3d09@class)))))) r3d0d@find) r3d07@id* '()))) (set! r3ca6@gen-clause (lambda (r3cdf@x r3ce0@keys r3ce1@clauses r3ce2@r r3ce3@mr r3ce4@pat r3ce5@fender r3ce6@expr) (call-with-values (lambda () (r2efd@convert-pattern r3ce4@pat r3ce0@keys)) (lambda (r3cf3@r3cf0 r3cf4@r3cf2) ((lambda (r3cf7@pvars r3cf8@p) (if (not (r2d00@distinct-bound-ids? (map car r3cf7@pvars))) (r3ca4@invalid-ids-error (map car r3cf7@pvars) r3ce4@pat '"pattern variable") (if (not (for-all (lambda (r3cfb@x) (not (r2f01@ellipsis? (car r3cfb@x)))) r3cf7@pvars)) (r2fe8@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" r3ce4@pat) ((lambda (r3cfd@y) ((lambda (r3cff@test) ((lambda (r3d01@conseq) ((lambda (r3d03@altern) (list (r2c50@r2b90@build-lambda '#f (list r3cfd@y) (list 'if r3cff@test r3d01@conseq r3d03@altern)) (list '(primitive syntax-dispatch) r3cdf@x (list 'quote r3cf8@p)))) (r3ca8@gen-syntax-case r3cdf@x r3ce0@keys r3ce1@clauses r3ce2@r r3ce3@mr))) (r3ca2@build-dispatch-call r3cf7@pvars r3ce6@expr r3cfd@y r3ce2@r r3ce3@mr))) (if (eq? r3ce5@fender '#t) r3cfd@y ((lambda (r3d05@call) (list 'if r3cfd@y r3d05@call (list 'quote '#f))) (r3ca2@build-dispatch-call r3cf7@pvars r3ce5@fender r3cfd@y r3ce2@r r3ce3@mr))))) (r2c74@gen-lexical 'tmp))))) r3cf4@r3cf2 r3cf3@r3cf0))))) (set! r3ca8@gen-syntax-case (lambda (r3cbd@x r3cbe@keys r3cbf@clauses r3cc0@r r3cc1@mr) (if (null? r3cbf@clauses) (list '(primitive syntax-error) r3cbd@x) ((lambda (r3cc7@t) ((lambda (r3cc9@ls/false) (if r3cc9@ls/false (apply (lambda (r3ccb@pat r3ccc@expr) (if (and (r2cf4@id? r3ccb@pat) (not (r2d02@bound-id-member? r3ccb@pat r3cbe@keys)) (not (r2f01@ellipsis? r3ccb@pat))) (if (r2cfc@free-id=? r3ccb@pat (r2e89@scheme-stx '_)) (r2f21@chi-expr r3ccc@expr r3cc0@r r3cc1@mr) ((lambda (r3ccf@lab r3cd0@lex) ((lambda (r3cd3@body) (list (r2c50@r2b90@build-lambda '#f (list r3cd0@lex) r3cd3@body) r3cbd@x)) (r2f21@chi-expr (r2ce0@add-subst (r2caf@make-full-rib (list r3ccb@pat) (list r3ccf@lab)) r3ccc@expr) (cons (cons r3ccf@lab (r2d14@make-binding 'syntax (cons r3cd0@lex '0))) r3cc0@r) r3cc1@mr))) (r2c78@gen-label r3ccb@pat) (r2c74@gen-lexical r3ccb@pat))) (r3ca6@gen-clause r3cbd@x r3cbe@keys (cdr r3cbf@clauses) r3cc0@r r3cc1@mr r3ccb@pat '#t r3ccc@expr))) r3cc9@ls/false) ((lambda (r3cd5@t) ((lambda (r3cd7@ls/false) (if r3cd7@ls/false (apply (lambda (r3cd9@pat r3cda@fender r3cdb@expr) (r3ca6@gen-clause r3cbd@x r3cbe@keys (cdr r3cbf@clauses) r3cc0@r r3cc1@mr r3cd9@pat r3cda@fender r3cdb@expr)) r3cd7@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3cd5@t))) (r2eff@syntax-dispatch r3cd5@t '(any any any)))) r3cc7@t))) (r2eff@syntax-dispatch r3cc7@t '(any any)))) (car r3cbf@clauses))))) (lambda (r3ca9@e r3caa@r r3cab@mr) ((lambda (r3caf@t) ((lambda (r3cb1@ls/false) (if r3cb1@ls/false (apply (lambda (r3cb3@expr r3cb4@keys r3cb5@clauses) (begin (r2f05@verify-literals r3cb4@keys r3ca9@e) ((lambda (r3cb9@x) ((lambda (r3cbb@body) (list (r2c50@r2b90@build-lambda '#f (list r3cb9@x) r3cbb@body) (r2f21@chi-expr r3cb3@expr r3caa@r r3cab@mr))) (r3ca8@gen-syntax-case r3cb9@x r3cb4@keys r3cb5@clauses r3caa@r r3cab@mr))) (r2c74@gen-lexical 'tmp)))) r3cb1@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3caf@t))) (r2eff@syntax-dispatch r3caf@t '(_ any each-any . each-any)))) r3ca9@e)))) '#f '#f '#f '#f)))) (set! r2f09@ellipsis-map (lambda (r3d2d@proc r3d2e@ls . r3d31@ls*) ((lambda (r3d34@who) (begin (set! r3d34@who '...) (begin (if (not (list? r3d2e@ls)) (assertion-violation r3d34@who '"not a list" r3d2e@ls) (void)) (if (not (null? r3d31@ls*)) ((lambda (r3d35@n) (for-each (lambda (r3d37@x) (begin (if (not (list? r3d37@x)) (assertion-violation r3d34@who '"not a list" r3d37@x) (void)) (if (not (= (length r3d37@x) r3d35@n)) (assertion-violation r3d34@who '"length mismatch" r3d2e@ls r3d37@x) (void)))) r3d31@ls*)) (length r3d2e@ls)) (void)) (apply map r3d2d@proc r3d2e@ls r3d31@ls*)))) '#f))) (set! r2f0b@syntax-transformer ((lambda () ((lambda (r3d3a@gen-syntax r3d3c@gen-ref r3d3e@gen-append r3d40@gen-mappend r3d42@gen-map r3d44@gen-cons r3d46@gen-vector r3d48@regen) (begin (set! r3d3a@gen-syntax (lambda (r3db1@src r3db2@e r3db3@r r3db4@maps r3db5@ellipsis? r3db6@vec?) ((lambda (r3dbd@t) ((lambda (r3dbf@ls/false) (if (and r3dbf@ls/false (apply (lambda (r3dc1@dots) (r3db5@ellipsis? r3dc1@dots)) r3dbf@ls/false)) (apply (lambda (r3dc3@dots) (r2fe8@syntax-violation '#f '"misplaced ellipsis in syntax form" r3db1@src)) r3dbf@ls/false) ((lambda (r3dc5@t) ((lambda (r3dc7@ls/false) (if (and r3dc7@ls/false (apply (lambda (r3dc9@id) (r2cf4@id? r3dc9@id)) r3dc7@ls/false)) (apply (lambda (r3dcb@id) ((lambda (r3dcd@label) ((lambda (r3dcf@b) ((lambda () (if (eq? (r2d16@binding-type r3dcf@b) 'syntax) (call-with-values (lambda () ((lambda (r3dd5@var.lev) (r3d3c@gen-ref r3db1@src (car r3dd5@var.lev) (cdr r3dd5@var.lev) r3db4@maps)) (r2d18@binding-value r3dcf@b))) (lambda (r3dd7@r3dd2 r3dd8@r3dd4) ((lambda (r3ddb@maps r3ddc@var) (values (list 'ref r3ddc@var) r3ddb@maps)) r3dd8@r3dd4 r3dd7@r3dd2))) (values (list 'quote r3db2@e) r3db4@maps))))) (r2d12@label->binding r3dcd@label r3db3@r))) (r2d0e@id->label r3db2@e))) r3dc7@ls/false) ((lambda (r3ddf@t) ((lambda (r3de1@ls/false) (if (and r3de1@ls/false (apply (lambda (r3de3@dots r3de4@e) (r3db5@ellipsis? r3de3@dots)) r3de1@ls/false)) (apply (lambda (r3de7@dots r3de8@e) (if r3db6@vec? (r2fe8@syntax-violation '#f '"misplaced ellipsis in syntax form" r3db1@src) (r3d3a@gen-syntax r3db1@src r3de8@e r3db3@r r3db4@maps (lambda (r3deb@x) '#f) '#f))) r3de1@ls/false) ((lambda (r3ded@t) ((lambda (r3def@ls/false) (if (and r3def@ls/false (apply (lambda (r3df1@x r3df2@dots r3df3@y) (r3db5@ellipsis? r3df2@dots)) r3def@ls/false)) (apply (lambda (r3df7@x r3df8@dots r3df9@y) ((letrec ((r3dfd@f (lambda (r3dff@y r3e00@k) ((lambda (r3e03@t) ((lambda (r3e05@ls/false) (if r3e05@ls/false (apply (lambda () (r3e00@k r3db4@maps)) r3e05@ls/false) ((lambda (r3e07@t) ((lambda (r3e09@ls/false) (if (and r3e09@ls/false (apply (lambda (r3e0b@dots r3e0c@y) (r3db5@ellipsis? r3e0b@dots)) r3e09@ls/false)) (apply (lambda (r3e0f@dots r3e10@y) (r3dfd@f r3e10@y (lambda (r3e13@maps) (call-with-values (lambda () (r3e00@k (cons '() r3e13@maps))) (lambda (r3e19@r3e16 r3e1a@r3e18) ((lambda (r3e1d@maps r3e1e@x) (if (null? (car r3e1d@maps)) (r2fe8@syntax-violation '#f '"extra ellipsis in syntax form" r3db1@src) (values (r3d40@gen-mappend r3e1e@x (car r3e1d@maps)) (cdr r3e1d@maps)))) r3e1a@r3e18 r3e19@r3e16)))))) r3e09@ls/false) ((lambda (r3e21@t) ((lambda (r3e23@ls/false) (if r3e23@ls/false (apply (lambda () (call-with-values (lambda () (r3d3a@gen-syntax r3db1@src r3dff@y r3db3@r r3db4@maps r3db5@ellipsis? r3db6@vec?)) (lambda (r3e29@r3e26 r3e2a@r3e28) ((lambda (r3e2d@maps r3e2e@y) (call-with-values (lambda () (r3e00@k r3e2d@maps)) (lambda (r3e35@r3e32 r3e36@r3e34) ((lambda (r3e39@maps r3e3a@x) (values (r3d3e@gen-append r3e3a@x r3e2e@y) r3e39@maps)) r3e36@r3e34 r3e35@r3e32)))) r3e2a@r3e28 r3e29@r3e26)))) r3e23@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3e21@t))) (r2eff@syntax-dispatch r3e21@t '_))) r3e07@t))) (r2eff@syntax-dispatch r3e07@t '(any . any)))) r3e03@t))) (r2eff@syntax-dispatch r3e03@t '()))) r3dff@y)))) r3dfd@f) r3df9@y (lambda (r3e3d@maps) (call-with-values (lambda () (r3d3a@gen-syntax r3db1@src r3df7@x r3db3@r (cons '() r3e3d@maps) r3db5@ellipsis? '#f)) (lambda (r3e43@r3e40 r3e44@r3e42) ((lambda (r3e47@maps r3e48@x) (if (null? (car r3e47@maps)) (r2fe8@syntax-violation '#f '"extra ellipsis in syntax form" r3db1@src) (values (r3d42@gen-map r3e48@x (car r3e47@maps)) (cdr r3e47@maps)))) r3e44@r3e42 r3e43@r3e40)))))) r3def@ls/false) ((lambda (r3e4b@t) ((lambda (r3e4d@ls/false) (if r3e4d@ls/false (apply (lambda (r3e4f@x r3e50@y) (call-with-values (lambda () (r3d3a@gen-syntax r3db1@src r3e4f@x r3db3@r r3db4@maps r3db5@ellipsis? '#f)) (lambda (r3e57@r3e54 r3e58@r3e56) ((lambda (r3e5b@maps r3e5c@xnew) (call-with-values (lambda () (r3d3a@gen-syntax r3db1@src r3e50@y r3db3@r r3e5b@maps r3db5@ellipsis? r3db6@vec?)) (lambda (r3e63@r3e60 r3e64@r3e62) ((lambda (r3e67@maps r3e68@ynew) (values (r3d44@gen-cons r3db2@e r3e4f@x r3e50@y r3e5c@xnew r3e68@ynew) r3e67@maps)) r3e64@r3e62 r3e63@r3e60)))) r3e58@r3e56 r3e57@r3e54)))) r3e4d@ls/false) ((lambda (r3e6b@t) ((lambda (r3e6d@ls/false) (if r3e6d@ls/false (apply (lambda (r3e6f@ls) (call-with-values (lambda () (r3d3a@gen-syntax r3db1@src r3e6f@ls r3db3@r r3db4@maps r3db5@ellipsis? '#t)) (lambda (r3e75@r3e72 r3e76@r3e74) ((lambda (r3e79@maps r3e7a@lsnew) (values (r3d46@gen-vector r3db2@e r3e6f@ls r3e7a@lsnew) r3e79@maps)) r3e76@r3e74 r3e75@r3e72)))) r3e6d@ls/false) ((lambda (r3e7d@t) ((lambda (r3e7f@ls/false) (if r3e7f@ls/false (apply (lambda () (values (list 'quote r3db2@e) r3db4@maps)) r3e7f@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3e7d@t))) (r2eff@syntax-dispatch r3e7d@t '_))) r3e6b@t))) (r2eff@syntax-dispatch r3e6b@t '#(vector each-any)))) r3e4b@t))) (r2eff@syntax-dispatch r3e4b@t '(any . any)))) r3ded@t))) (r2eff@syntax-dispatch r3ded@t '(any any . any)))) r3ddf@t))) (r2eff@syntax-dispatch r3ddf@t '(any any)))) r3dc5@t))) (r2eff@syntax-dispatch r3dc5@t 'any))) r3dbd@t))) (r2eff@syntax-dispatch r3dbd@t 'any))) r3db2@e))) (set! r3d3c@gen-ref (lambda (r3d97@src r3d98@var r3d99@level r3d9a@maps) (if (= r3d99@level '0) (values r3d98@var r3d9a@maps) (if (null? r3d9a@maps) (r2fe8@syntax-violation '#f '"missing ellipsis in syntax form" r3d97@src) (call-with-values (lambda () (r3d3c@gen-ref r3d97@src r3d98@var (- r3d99@level '1) (cdr r3d9a@maps))) (lambda (r3da3@r3da0 r3da4@r3da2) ((lambda (r3da7@outer-maps r3da8@outer-var) ((lambda (r3dab@t) (if r3dab@t ((lambda (r3dad@b) (values (cdr r3dad@b) r3d9a@maps)) r3dab@t) ((lambda (r3daf@inner-var) (values r3daf@inner-var (cons (cons (cons r3da8@outer-var r3daf@inner-var) (car r3d9a@maps)) r3da7@outer-maps))) (r2c74@gen-lexical 'tmp)))) (assq r3da8@outer-var (car r3d9a@maps)))) r3da4@r3da2 r3da3@r3da0))))))) (set! r3d3e@gen-append (lambda (r3d93@x r3d94@y) (if (fast-equal? r3d94@y ''()) r3d93@x (list 'append r3d93@x r3d94@y)))) (set! r3d40@gen-mappend (lambda (r3d8f@e r3d90@map-env) (list 'apply '(primitive append) (r3d42@gen-map r3d8f@e r3d90@map-env)))) (set! r3d42@gen-map (lambda (r3d7d@e r3d7e@map-env) ((lambda (r3d81@formals r3d82@actuals) (if (eq? (car r3d7d@e) 'ref) (car r3d82@actuals) (if (for-all (lambda (r3d85@x) (and (eq? (car r3d85@x) 'ref) (memq (cadr r3d85@x) r3d81@formals))) (cdr r3d7d@e)) ((lambda (r3d87@args) (cons 'map (cons (list 'primitive (car r3d7d@e)) r3d87@args))) (map ((lambda (r3d89@r) (lambda (r3d8b@x) (cdr (assq (cadr r3d8b@x) r3d89@r)))) (map cons r3d81@formals r3d82@actuals)) (cdr r3d7d@e))) (cons* 'map (list 'lambda r3d81@formals r3d7d@e) r3d82@actuals)))) (map cdr r3d7e@map-env) (map (lambda (r3d8d@x) (list 'ref (car r3d8d@x))) r3d7e@map-env)))) (set! r3d44@gen-cons (lambda (r3d6d@e r3d6e@x r3d6f@y r3d70@xnew r3d71@ynew) ((lambda (r3d77@t) (if (memv r3d77@t '(quote)) (if (eq? (car r3d70@xnew) 'quote) ((lambda (r3d79@xnew r3d7a@ynew) (if (and (eq? r3d79@xnew r3d6e@x) (eq? r3d7a@ynew r3d6f@y)) (list 'quote r3d6d@e) (list 'quote (cons r3d79@xnew r3d7a@ynew)))) (cadr r3d70@xnew) (cadr r3d71@ynew)) (if (null? (cadr r3d71@ynew)) (list 'list r3d70@xnew) (list 'cons r3d70@xnew r3d71@ynew))) (if (memv r3d77@t '(list)) (cons 'list (cons r3d70@xnew (cdr r3d71@ynew))) (list 'cons r3d70@xnew r3d71@ynew)))) (car r3d71@ynew)))) (set! r3d46@gen-vector (lambda (r3d67@e r3d68@ls r3d69@lsnew) (if (eq? (car r3d69@lsnew) 'quote) (if (eq? (cadr r3d69@lsnew) r3d68@ls) (list 'quote r3d67@e) (list 'quote (list->vector (cadr r3d69@lsnew)))) (if (eq? (car r3d69@lsnew) 'list) (cons 'vector (cdr r3d69@lsnew)) (list 'list->vector r3d69@lsnew))))) (set! r3d48@regen (lambda (r3d61@x) ((lambda (r3d63@t) (if (memv r3d63@t '(ref)) (cadr r3d61@x) (if (memv r3d63@t '(primitive)) (list 'primitive (cadr r3d61@x)) (if (memv r3d63@t '(quote)) (list 'quote (cadr r3d61@x)) (if (memv r3d63@t '(lambda)) (r2c50@r2b90@build-lambda '#f (cadr r3d61@x) (r3d48@regen (caddr r3d61@x))) (if (memv r3d63@t '(map)) ((lambda (r3d65@ls) (cons '(primitive ellipsis-map) r3d65@ls)) (map r3d48@regen (cdr r3d61@x))) (cons (list 'primitive (car r3d61@x)) (map r3d48@regen (cdr r3d61@x))))))))) (car r3d61@x)))) (lambda (r3d49@e r3d4a@r r3d4b@mr) ((lambda (r3d4f@t) ((lambda (r3d51@ls/false) (if r3d51@ls/false (apply (lambda (r3d53@x) (call-with-values (lambda () (r3d3a@gen-syntax r3d49@e r3d53@x r3d4a@r '() r2f01@ellipsis? '#f)) (lambda (r3d59@r3d56 r3d5a@r3d58) ((lambda (r3d5d@maps r3d5e@e) (r3d48@regen r3d5e@e)) r3d5a@r3d58 r3d59@r3d56)))) r3d51@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3d4f@t))) (r2eff@syntax-dispatch r3d4f@t '(_ any)))) r3d49@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! r2f0d@core-macro-transformer (lambda (r3e81@name) ((lambda (r3e83@t) (if (memv r3e83@t '(quote)) r2eaf@quote-transformer (if (memv r3e83@t '(lambda)) r2eb3@lambda-transformer (if (memv r3e83@t '(case-lambda)) r2eb1@case-lambda-transformer (if (memv r3e83@t '(letrec)) r2e97@letrec-transformer (if (memv r3e83@t '(letrec*)) r2e99@letrec*-transformer (if (memv r3e83@t '(if)) r2ea7@if-transformer (if (memv r3e83@t '(and)) r2ea9@and-transformer (if (memv r3e83@t '(or)) r2eab@or-transformer (if (memv r3e83@t '(foreign-call)) r2efb@foreign-call-transformer (if (memv r3e83@t '(syntax-case)) r2f07@syntax-case-transformer (if (memv r3e83@t '(syntax)) r2f0b@syntax-transformer (if (memv r3e83@t '(type-descriptor)) r2e9d@type-descriptor-transformer (if (memv r3e83@t '(record-type-descriptor)) r2e9f@record-type-descriptor-transformer (if (memv r3e83@t '(record-constructor-descriptor)) r2ea1@record-constructor-descriptor-transformer (if (memv r3e83@t '(fluid-let-syntax)) r2e9b@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" r3e81@name))))))))))))))))) r3e81@name))) (set! r2f0f@symbol-macro (lambda (r3e85@x r3e86@set) ((lambda (r3e89@t) ((lambda (r3e8b@ls/false) (if (and r3e8b@ls/false (apply (lambda (r3e8d@name) (and (r2cf4@id? r3e8d@name) (memq (r2cf6@id->sym r3e8d@name) r3e86@set))) r3e8b@ls/false)) (apply (lambda (r3e8f@name) (r2eb5@bless (list 'quote r3e8f@name))) r3e8b@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3e89@t))) (r2eff@syntax-dispatch r3e89@t '(_ any)))) r3e85@x))) (set! r2f11@macro-transformer (lambda (r3e91@x) (if (procedure? r3e91@x) r3e91@x (if (symbol? r3e91@x) ((lambda (r3e93@t) (if (memv r3e93@t '(define-record-type)) r2ef3@define-record-type-macro (if (memv r3e93@t '(define-struct)) r2ef1@define-struct-macro (if (memv r3e93@t '(include)) r2ee7@include-macro (if (memv r3e93@t '(cond)) r2ee3@cond-macro (if (memv r3e93@t '(let)) r2ebb@let-macro (if (memv r3e93@t '(do)) r2edb@do-macro (if (memv r3e93@t '(or)) r2edf@or-macro (if (memv r3e93@t '(and)) r2ee1@and-macro (if (memv r3e93@t '(let*)) r2edd@let*-macro (if (memv r3e93@t '(let-values)) r2ebd@let-values-macro (if (memv r3e93@t '(let*-values)) r2ebf@let*-values-macro (if (memv r3e93@t '(syntax-rules)) r2eeb@syntax-rules-macro (if (memv r3e93@t '(quasiquote)) r2eed@quasiquote-macro (if (memv r3e93@t '(quasisyntax)) r2eef@quasisyntax-macro (if (memv r3e93@t '(with-syntax)) r2eb7@with-syntax-macro (if (memv r3e93@t '(when)) r2ea3@when-macro (if (memv r3e93@t '(unless)) r2ea5@unless-macro (if (memv r3e93@t '(case)) r2ead@case-macro (if (memv r3e93@t '(identifier-syntax)) r2ed9@identifier-syntax-macro (if (memv r3e93@t '(time)) r2ed1@time-macro (if (memv r3e93@t '(delay)) r2ed3@delay-macro (if (memv r3e93@t '(assert)) r2ed5@assert-macro (if (memv r3e93@t '(endianness)) r2ed7@endianness-macro (if (memv r3e93@t '(guard)) r2ecd@guard-macro (if (memv r3e93@t '(define-enumeration)) r2ecf@define-enumeration-macro (if (memv r3e93@t '(trace-lambda)) r2ec1@trace-lambda-macro (if (memv r3e93@t '(trace-define)) r2ec3@trace-define-macro (if (memv r3e93@t '(trace-define-syntax)) r2ec5@trace-define-syntax-macro (if (memv r3e93@t '(trace-let-syntax)) r2ec9@trace-let-syntax-macro (if (memv r3e93@t '(trace-letrec-syntax)) r2ecb@trace-letrec-syntax-macro (if (memv r3e93@t '(define-condition-type)) r2ef5@define-condition-type-macro (if (memv r3e93@t '(parameterize)) r2ef9@parameterize-macro (if (memv r3e93@t '(include-into)) r2ee9@include-into-macro (if (memv r3e93@t '(eol-style)) (lambda (r3e95@x) (r2f0f@symbol-macro r3e95@x '(none lf cr crlf nel crnel ls))) (if (memv r3e93@t '(error-handling-mode)) (lambda (r3e97@x) (r2f0f@symbol-macro r3e97@x '(ignore raise replace))) (if (memv r3e93@t '(buffer-mode)) (lambda (r3e99@x) (r2f0f@symbol-macro r3e99@x '(none line block))) (if (memv r3e93@t '(file-options)) r2c67@file-options-macro (if (memv r3e93@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) r2ef7@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" r3e91@x)))))))))))))))))))))))))))))))))))))))) r3e91@x) (error 'core-macro-transformer '"BUG: invalid macro" r3e91@x))))) (set! r2f13@local-macro-transformer (lambda (r3e9b@x) (car r3e9b@x))) (set! r2f15@do-macro-call (lambda (r3e9d@transformer r3e9e@expr) ((lambda (r3ea1@out) (begin ((letrec ((r3ea3@f (lambda (r3ea5@x) (if (not (r2cbc@stx? r3ea5@x)) (if (pair? r3ea5@x) (begin (r3ea3@f (car r3ea5@x)) (r3ea3@f (cdr r3ea5@x))) (if (vector? r3ea5@x) (vector-for-each r3ea3@f r3ea5@x) (if (symbol? r3ea5@x) (r2fe8@syntax-violation '#f '"raw symbol encountered in output of macro" r3e9e@expr r3ea5@x) (void)))) (void))))) r3ea3@f) r3ea1@out) (r2cde@add-mark (r2cd4@gen-mark) r3ea1@out r3e9e@expr))) (r3e9d@transformer (r2cde@add-mark r2cd6@anti-mark r3e9e@expr '#f))))) (set! r2f17@chi-macro (lambda (r3ea7@p r3ea8@e) (r2f15@do-macro-call (r2f11@macro-transformer r3ea7@p) r3ea8@e))) (set! r2f19@chi-local-macro (lambda (r3eab@p r3eac@e) (r2f15@do-macro-call (r2f13@local-macro-transformer r3eab@p) r3eac@e))) (set! r2f1b@chi-global-macro (lambda (r3eaf@p r3eb0@e) ((lambda (r3eb3@lib r3eb4@loc) (begin (r2b19@r29bb@visit-library r3eb3@lib) ((lambda (r3eb7@x) ((lambda (r3eb9@transformer) (r2f15@do-macro-call r3eb9@transformer r3eb0@e)) (if (procedure? r3eb7@x) r3eb7@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" r3eb7@x)))) (symbol-value r3eb4@loc)))) (car r3eaf@p) (cdr r3eaf@p)))) (set! r2f1d@chi-expr* (lambda (r3ebb@e* r3ebc@r r3ebd@mr) (if (null? r3ebb@e*) '() ((lambda (r3ec1@e) (cons r3ec1@e (r2f1d@chi-expr* (cdr r3ebb@e*) r3ebc@r r3ebd@mr))) (r2f21@chi-expr (car r3ebb@e*) r3ebc@r r3ebd@mr))))) (set! r2f1f@chi-application (lambda (r3ec3@e r3ec4@r r3ec5@mr) ((lambda (r3ec9@t) ((lambda (r3ecb@ls/false) (if r3ecb@ls/false (apply (lambda (r3ecd@rator r3ece@rands) ((lambda (r3ed1@rator) (cons r3ed1@rator (r2f1d@chi-expr* r3ece@rands r3ec4@r r3ec5@mr))) (r2f21@chi-expr r3ecd@rator r3ec4@r r3ec5@mr))) r3ecb@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3ec9@t))) (r2eff@syntax-dispatch r3ec9@t '(any . each-any)))) r3ec3@e))) (set! r2f21@chi-expr (lambda (r3ed3@e r3ed4@r r3ed5@mr) (call-with-values (lambda () (r2d1c@syntax-type r3ed3@e r3ed4@r)) (lambda (r3edf@r3eda r3ee0@r3edc r3ee1@r3ede) ((lambda (r3ee5@kwd r3ee6@value r3ee7@type) ((lambda (r3eeb@t) (if (memv r3eeb@t '(core-macro)) ((lambda (r3eed@transformer) (r3eed@transformer r3ed3@e r3ed4@r r3ed5@mr)) (r2f0d@core-macro-transformer r3ee6@value)) (if (memv r3eeb@t '(global)) ((lambda (r3eef@lib) ((lambda (r3ef1@loc) ((lambda () (begin ((r2f6a@inv-collector) r3eef@lib) r3ef1@loc)))) (cdr r3ee6@value))) (car r3ee6@value)) (if (memv r3eeb@t '(core-prim)) ((lambda (r3ef3@name) (list 'primitive r3ef3@name)) r3ee6@value) (if (memv r3eeb@t '(call)) (r2f1f@chi-application r3ed3@e r3ed4@r r3ed5@mr) (if (memv r3eeb@t '(lexical)) ((lambda (r3ef5@lex) r3ef5@lex) (r2e8b@lexical-var r3ee6@value)) (if (memv r3eeb@t '(global-macro global-macro!)) (r2f21@chi-expr (r2f1b@chi-global-macro r3ee6@value r3ed3@e) r3ed4@r r3ed5@mr) (if (memv r3eeb@t '(local-macro local-macro!)) (r2f21@chi-expr (r2f19@chi-local-macro r3ee6@value r3ed3@e) r3ed4@r r3ed5@mr) (if (memv r3eeb@t '(macro macro!)) (r2f21@chi-expr (r2f17@chi-macro r3ee6@value r3ed3@e) r3ed4@r r3ed5@mr) (if (memv r3eeb@t '(constant)) ((lambda (r3ef7@datum) (list 'quote r3ef7@datum)) r3ee6@value) (if (memv r3eeb@t '(set!)) (r2f23@chi-set! r3ed3@e r3ed4@r r3ed5@mr) (if (memv r3eeb@t '(begin)) ((lambda (r3ef9@t) ((lambda (r3efb@ls/false) (if r3efb@ls/false (apply (lambda (r3efd@x r3efe@x*) (r2c53@r2bc2@build-sequence '#f (r2f1d@chi-expr* (cons r3efd@x r3efe@x*) r3ed4@r r3ed5@mr))) r3efb@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3ef9@t))) (r2eff@syntax-dispatch r3ef9@t '(_ any . each-any)))) r3ed3@e) (if (memv r3eeb@t '(let-syntax letrec-syntax)) ((lambda (r3f01@t) ((lambda (r3f03@ls/false) (if (and r3f03@ls/false (apply (lambda (r3f05@xlhs* r3f06@xrhs* r3f07@xbody r3f08@xbody*) (if (not (r2cfe@valid-bound-ids? r3f05@xlhs*)) (r2fe8@syntax-violation '#f '"invalid identifiers" r3ed3@e) (void))) r3f03@ls/false)) (apply (lambda (r3f0d@xlhs* r3f0e@xrhs* r3f0f@xbody r3f10@xbody*) ((lambda (r3f15@xlab*) ((lambda (r3f17@xrib) ((lambda (r3f19@xb*) ((lambda () (r2c53@r2bc2@build-sequence '#f (r2f1d@chi-expr* (map (lambda (r3f1b@x) (r2ce0@add-subst r3f17@xrib r3f1b@x)) (cons r3f0f@xbody r3f10@xbody*)) (append (map cons r3f15@xlab* r3f19@xb*) r3ed4@r) (append (map cons r3f15@xlab* r3f19@xb*) r3ed5@mr)))))) (map (lambda (r3f1d@x) (r2d32@make-eval-transformer (r2f5c@expand-transformer (if (eq? r3ee7@type 'let-syntax) r3f1d@x (r2ce0@add-subst r3f17@xrib r3f1d@x)) r3ed5@mr))) r3f0e@xrhs*))) (r2caf@make-full-rib r3f0d@xlhs* r3f15@xlab*))) (map r2c78@gen-label r3f0d@xlhs*))) r3f03@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3f01@t))) (r2eff@syntax-dispatch r3f01@t '(_ #(each (any any)) any . each-any)))) r3ed3@e) (if (memv r3eeb@t '(displaced-lexical)) (r2fe8@syntax-violation '#f '"identifier out of context" r3ed3@e) (if (memv r3eeb@t '(syntax)) (r2fe8@syntax-violation '#f '"reference to pattern variable outside a syntax form" r3ed3@e) (if (memv r3eeb@t '(define define-syntax module import library)) (r2fe8@syntax-violation '#f (string-append ((lambda (r3f1f@t) (if (memv r3f1f@t '(define)) '"a definition" (if (memv r3f1f@t '(define-syntax)) '"a define-syntax" (if (memv r3f1f@t '(module)) '"a module definition" (if (memv r3f1f@t '(library)) '"a library definition" (if (memv r3f1f@t '(import)) '"an import declaration" (if (memv r3f1f@t '(export)) '"an export declaration" '"a non-expression"))))))) r3ee7@type) '" was found where an expression was expected") r3ed3@e) (if (memv r3eeb@t '(mutable)) (r2fe8@syntax-violation '#f '"attempt to reference an unexportable variable" r3ed3@e) (r2fe8@syntax-violation '#f '"invalid expression" r3ed3@e)))))))))))))))))) r3ee7@type)) r3ee1@r3ede r3ee0@r3edc r3edf@r3eda))))) (set! r2f23@chi-set! (lambda (r3f21@e r3f22@r r3f23@mr) ((lambda (r3f27@t) ((lambda (r3f29@ls/false) (if (and r3f29@ls/false (apply (lambda (r3f2b@x r3f2c@v) (r2cf4@id? r3f2b@x)) r3f29@ls/false)) (apply (lambda (r3f2f@x r3f30@v) (call-with-values (lambda () (r2d1c@syntax-type r3f2f@x r3f22@r)) (lambda (r3f39@r3f34 r3f3a@r3f36 r3f3b@r3f38) ((lambda (r3f3f@kwd r3f40@value r3f41@type) ((lambda (r3f45@t) (if (memv r3f45@t '(lexical)) (begin (r2e8f@set-lexical-mutable! r3f40@value '#t) (list 'set! (r2e8b@lexical-var r3f40@value) (r2f21@chi-expr r3f30@v r3f22@r r3f23@mr))) (if (memv r3f45@t '(core-prim)) (r2fe8@syntax-violation '#f '"cannot modify imported core primitive" r3f21@e) (if (memv r3f45@t '(global)) (r2fe8@syntax-violation '#f '"attempt to modify imported binding" r3f21@e) (if (memv r3f45@t '(global-macro!)) (r2f21@chi-expr (r2f1b@chi-global-macro r3f40@value r3f21@e) r3f22@r r3f23@mr) (if (memv r3f45@t '(local-macro!)) (r2f21@chi-expr (r2f19@chi-local-macro r3f40@value r3f21@e) r3f22@r r3f23@mr) (if (memv r3f45@t '(mutable)) (r2fe8@syntax-violation '#f '"attempt to assign to an unexportable variable" r3f21@e) (r2fe8@syntax-violation '#f '"invalid syntax" r3f21@e)))))))) r3f41@type)) r3f3b@r3f38 r3f3a@r3f36 r3f39@r3f34)))) r3f29@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3f27@t))) (r2eff@syntax-dispatch r3f27@t '(_ any any)))) r3f21@e))) (set! r2f25@verify-formals (lambda (r3f47@fmls r3f48@stx) ((lambda (r3f4b@t) ((lambda (r3f4d@ls/false) (if r3f4d@ls/false (apply (lambda (r3f4f@x*) (if (not (r2cfe@valid-bound-ids? r3f4f@x*)) (r2eb9@invalid-fmls-error r3f48@stx r3f47@fmls) (void))) r3f4d@ls/false) ((lambda (r3f51@t) ((lambda (r3f53@ls/false) (if r3f53@ls/false (apply (lambda (r3f55@x* r3f56@x) (if (not (r2cfe@valid-bound-ids? (cons r3f56@x r3f55@x*))) (r2eb9@invalid-fmls-error r3f48@stx r3f47@fmls) (void))) r3f53@ls/false) ((lambda (r3f59@t) ((lambda (r3f5b@ls/false) (if r3f5b@ls/false (apply (lambda () (r2fe8@syntax-violation '#f '"invalid syntax" r3f48@stx)) r3f5b@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3f59@t))) (r2eff@syntax-dispatch r3f59@t '_))) r3f51@t))) (r2eff@syntax-dispatch r3f51@t '#(each+ any () any)))) r3f4b@t))) (r2eff@syntax-dispatch r3f4b@t 'each-any))) r3f47@fmls))) (set! r2f27@chi-lambda-clause (lambda (r3f5d@stx r3f5e@fmls r3f5f@body* r3f60@r r3f61@mr) ((lambda (r3f67@t) ((lambda (r3f69@ls/false) (if r3f69@ls/false (apply (lambda (r3f6b@x*) (begin (r2f25@verify-formals r3f5e@fmls r3f5d@stx) ((lambda (r3f6d@lex* r3f6e@lab*) (values r3f6d@lex* (r2f37@chi-internal (r2ce0@add-subst (r2caf@make-full-rib r3f6b@x* r3f6e@lab*) r3f5f@body*) (r2e93@add-lexicals r3f6e@lab* r3f6d@lex* r3f60@r) r3f61@mr))) (map r2c74@gen-lexical r3f6b@x*) (map r2c78@gen-label r3f6b@x*)))) r3f69@ls/false) ((lambda (r3f71@t) ((lambda (r3f73@ls/false) (if r3f73@ls/false (apply (lambda (r3f75@x* r3f76@x) (begin (r2f25@verify-formals r3f5e@fmls r3f5d@stx) ((lambda (r3f79@lex* r3f7a@lab* r3f7b@lex r3f7c@lab) (values (append r3f79@lex* r3f7b@lex) (r2f37@chi-internal (r2ce0@add-subst (r2caf@make-full-rib (cons r3f76@x r3f75@x*) (cons r3f7c@lab r3f7a@lab*)) r3f5f@body*) (r2e93@add-lexicals (cons r3f7c@lab r3f7a@lab*) (cons r3f7b@lex r3f79@lex*) r3f60@r) r3f61@mr))) (map r2c74@gen-lexical r3f75@x*) (map r2c78@gen-label r3f75@x*) (r2c74@gen-lexical r3f76@x) (r2c78@gen-label r3f76@x)))) r3f73@ls/false) ((lambda (r3f81@t) ((lambda (r3f83@ls/false) (if r3f83@ls/false (apply (lambda () (r2fe8@syntax-violation '#f '"invalid syntax" r3f5e@fmls)) r3f83@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r3f81@t))) (r2eff@syntax-dispatch r3f81@t '_))) r3f71@t))) (r2eff@syntax-dispatch r3f71@t '#(each+ any () any)))) r3f67@t))) (r2eff@syntax-dispatch r3f67@t 'each-any))) r3f5e@fmls))) (set! r2f29@chi-lambda-clause* (lambda (r3f85@stx r3f86@fmls* r3f87@body** r3f88@r r3f89@mr) (if (null? r3f86@fmls*) (values '() '()) (call-with-values (lambda () (r2f27@chi-lambda-clause r3f85@stx (car r3f86@fmls*) (car r3f87@body**) r3f88@r r3f89@mr)) (lambda (r3f93@r3f90 r3f94@r3f92) ((lambda (r3f97@b r3f98@a) (call-with-values (lambda () (r2f29@chi-lambda-clause* r3f85@stx (cdr r3f86@fmls*) (cdr r3f87@body**) r3f88@r r3f89@mr)) (lambda (r3f9f@r3f9c r3fa0@r3f9e) ((lambda (r3fa3@b* r3fa4@a*) (values (cons r3f98@a r3fa4@a*) (cons r3f97@b r3fa3@b*))) r3fa0@r3f9e r3f9f@r3f9c)))) r3f94@r3f92 r3f93@r3f90)))))) (set! r2f2b@chi-defun (lambda (r3fa7@x r3fa8@r r3fa9@mr) ((lambda (r3fad@fmls r3fae@body*) (call-with-values (lambda () (r2f27@chi-lambda-clause r3fad@fmls r3fad@fmls r3fae@body* r3fa8@r r3fa9@mr)) (lambda (r3fb5@r3fb2 r3fb6@r3fb4) ((lambda (r3fb9@body r3fba@fmls) (r2c50@r2b90@build-lambda '#f r3fba@fmls r3fb9@body)) r3fb6@r3fb4 r3fb5@r3fb2)))) (car r3fa7@x) (cdr r3fa7@x)))) (set! r2f2d@chi-rhs (lambda (r3fbd@rhs r3fbe@r r3fbf@mr) ((lambda (r3fc3@t) (if (memv r3fc3@t '(defun)) (r2f2b@chi-defun (cdr r3fbd@rhs) r3fbe@r r3fbf@mr) (if (memv r3fc3@t '(expr)) ((lambda (r3fc5@expr) (r2f21@chi-expr r3fc5@expr r3fbe@r r3fbf@mr)) (cdr r3fbd@rhs)) (if (memv r3fc3@t '(top-expr)) ((lambda (r3fc7@expr) (r2c53@r2bc2@build-sequence '#f (list (r2f21@chi-expr r3fc7@expr r3fbe@r r3fbf@mr) (r2c54@r2bc4@build-void)))) (cdr r3fbd@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" r3fbd@rhs))))) (car r3fbd@rhs)))) (set! r2f2f@expand-interaction-rhs*/init* (lambda (r3fc9@lhs* r3fca@rhs* r3fcb@init* r3fcc@r r3fcd@mr) ((letrec ((r3fd3@f (lambda (r3fd5@lhs* r3fd6@rhs*) (if (null? r3fd5@lhs*) (map (lambda (r3fd9@x) (r2f21@chi-expr r3fd9@x r3fcc@r r3fcd@mr)) r3fcb@init*) ((lambda (r3fdb@lhs r3fdc@rhs) ((lambda (r3fdf@t) (if (memv r3fdf@t '(defun)) ((lambda (r3fe1@rhs) (cons (list 'set! r3fdb@lhs r3fe1@rhs) (r3fd3@f (cdr r3fd5@lhs*) (cdr r3fd6@rhs*)))) (r2f2b@chi-defun (cdr r3fdc@rhs) r3fcc@r r3fcd@mr)) (if (memv r3fdf@t '(expr)) ((lambda (r3fe3@rhs) (cons (list 'set! r3fdb@lhs r3fe3@rhs) (r3fd3@f (cdr r3fd5@lhs*) (cdr r3fd6@rhs*)))) (r2f21@chi-expr (cdr r3fdc@rhs) r3fcc@r r3fcd@mr)) (if (memv r3fdf@t '(top-expr)) ((lambda (r3fe5@e) (cons r3fe5@e (r3fd3@f (cdr r3fd5@lhs*) (cdr r3fd6@rhs*)))) (r2f21@chi-expr (cdr r3fdc@rhs) r3fcc@r r3fcd@mr)) (error 'expand-interaction '"invallid" r3fdc@rhs))))) (car r3fdc@rhs))) (car r3fd5@lhs*) (car r3fd6@rhs*)))))) r3fd3@f) r3fc9@lhs* r3fca@rhs*))) (set! r2f31@chi-rhs* (lambda (r3fe7@rhs* r3fe8@r r3fe9@mr) ((letrec ((r3fed@f (lambda (r3fef@ls) (if (null? r3fef@ls) '() ((lambda (r3ff1@a) (cons r3ff1@a (r3fed@f (cdr r3fef@ls)))) (r2f2d@chi-rhs (car r3fef@ls) r3fe8@r r3fe9@mr)))))) r3fed@f) r3fe7@rhs*))) (set! r2f33@find-bound=? (lambda (r3ff3@x r3ff4@lhs* r3ff5@rhs*) (if (null? r3ff4@lhs*) '#f (if (r2cfa@bound-id=? r3ff3@x (car r3ff4@lhs*)) (car r3ff5@rhs*) (r2f33@find-bound=? r3ff3@x (cdr r3ff4@lhs*) (cdr r3ff5@rhs*)))))) (set! r2f35@find-dups (lambda (r3ff9@ls) ((letrec ((r3ffb@f (lambda (r3ffd@ls r3ffe@dups) (if (null? r3ffd@ls) r3ffe@dups ((lambda (r4001@t) (if r4001@t ((lambda (r4003@x) (r3ffb@f (cdr r3ffd@ls) (cons (list (car r3ffd@ls) r4003@x) r3ffe@dups))) r4001@t) (r3ffb@f (cdr r3ffd@ls) r3ffe@dups))) (r2f33@find-bound=? (car r3ffd@ls) (cdr r3ffd@ls) (cdr r3ffd@ls))))))) r3ffb@f) r3ff9@ls '()))) (set! r2f37@chi-internal (lambda (r4005@e* r4006@r r4007@mr) ((lambda (r400b@rib) (call-with-values (lambda () (r2f5a@chi-body* (map (lambda (r401d@x) (r2ce0@add-subst r400b@rib r401d@x)) (r2cf2@syntax->list r4005@e*)) r4006@r r4007@mr '() '() '() '() '() r400b@rib '#f)) (lambda (r401f@r400e r4020@r4010 r4021@r4012 r4022@r4014 r4023@r4016 r4024@r4018 r4025@r401a r4026@r401c) ((lambda (r402f@_exp* r4030@kwd* r4031@mod** r4032@rhs* r4033@lex* r4034@mr r4035@r r4036@e*) (begin (if (null? r4036@e*) (r2fe8@syntax-violation '#f '"no expression in body" r4036@e*) (void)) ((lambda (r403f@init*) ((lambda (r4041@rhs*) ((lambda () (r2c56@r2bc8@build-letrec* '#f (reverse r4033@lex*) (reverse r4041@rhs*) (r2c53@r2bc2@build-sequence '#f r403f@init*))))) (r2f31@chi-rhs* r4032@rhs* r4035@r r4034@mr))) (r2f1d@chi-expr* (append (apply append (reverse r4031@mod**)) r4036@e*) r4035@r r4034@mr)))) r4026@r401c r4025@r401a r4024@r4018 r4023@r4016 r4022@r4014 r4021@r4012 r4020@r4010 r401f@r400e)))) (r2ca3@make-empty-rib)))) (set! r2f39@parse-module (lambda (r4043@e) ((lambda (r4045@t) ((lambda (r4047@ls/false) (if r4047@ls/false (apply (lambda (r4049@export* r404a@b*) (begin (if (not (for-all r2cf4@id? r4049@export*)) (r2fe8@syntax-violation '#f '"module exports must be identifiers" r4043@e) (void)) (values '#f (list->vector r4049@export*) r404a@b*))) r4047@ls/false) ((lambda (r404d@t) ((lambda (r404f@ls/false) (if r404f@ls/false (apply (lambda (r4051@name r4052@export* r4053@b*) (begin (if (not (r2cf4@id? r4051@name)) (r2fe8@syntax-violation '#f '"module name must be an identifier" r4043@e) (void)) (if (not (for-all r2cf4@id? r4052@export*)) (r2fe8@syntax-violation '#f '"module exports must be identifiers" r4043@e) (void)) (values r4051@name (list->vector r4052@export*) r4053@b*))) r404f@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r404d@t))) (r2eff@syntax-dispatch r404d@t '(_ any each-any . each-any)))) r4045@t))) (r2eff@syntax-dispatch r4045@t '(_ each-any . each-any)))) r4043@e))) (set! r2f3f@r2f3a (make-record-type-descriptor 'module-interface '#f 'r2f3d '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! r2f41@r2f3c '#f) (set! r2f43@r2f3b (make-record-constructor-descriptor r2f3f@r2f3a '#f r2f41@r2f3c)) (set! r2f46@module-interface? (record-predicate r2f3f@r2f3a)) (set! r2f48@make-module-interface (record-constructor r2f43@r2f3b)) (set! r2f4a@module-interface-first-mark (record-accessor r2f3f@r2f3a '0)) (set! r2f4c@module-interface-exp-id-vec (record-accessor r2f3f@r2f3a '1)) (set! r2f4e@module-interface-exp-lab-vec (record-accessor r2f3f@r2f3a '2)) (set! r2f50@set-module-interface-first-mark! (record-mutator r2f3f@r2f3a '0)) (set! r2f52@set-module-interface-exp-id-vec! (record-mutator r2f3f@r2f3a '1)) (set! r2f54@set-module-interface-exp-lab-vec! (record-mutator r2f3f@r2f3a '2)) (set! r2f56@module-interface-exp-id* (lambda (r4057@iface r4058@id) ((lambda (r405c@diff-marks) (begin (set! r405c@diff-marks (lambda (r4063@ls r4064@x) (begin (if (null? r4063@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (r4067@a) (if (eq? r4067@a r4064@x) '() (cons r4067@a (r405c@diff-marks (cdr r4063@ls) r4064@x)))) (car r4063@ls))))) ((lambda (r405d@diff r405e@id-vec) (if (null? r405d@diff) r405e@id-vec (vector-map (lambda (r4061@x) (r2cbe@make-stx (r2cc0@stx-expr r4061@x) (append r405d@diff (r2cc2@stx-mark* r4061@x)) '() '())) r405e@id-vec))) (r405c@diff-marks (r2cc2@stx-mark* r4058@id) (r2f4a@module-interface-first-mark r4057@iface)) (r2f4c@module-interface-exp-id-vec r4057@iface)))) '#f))) (set! r2f58@chi-internal-module (lambda (r4069@e r406a@r r406b@mr r406c@lex* r406d@rhs* r406e@mod** r406f@kwd*) (call-with-values (lambda () (r2f39@parse-module r4069@e)) (lambda (r407d@r4078 r407e@r407a r407f@r407c) ((lambda (r4083@e* r4084@exp-id* r4085@name) ((lambda (r4089@rib) ((lambda (r408b@e*) ((lambda () (call-with-values (lambda () (r2f5a@chi-body* r408b@e* r406a@r r406b@mr r406c@lex* r406d@rhs* r406e@mod** r406f@kwd* '() r4089@rib '#f)) (lambda (r409d@r408e r409e@r4090 r409f@r4092 r40a0@r4094 r40a1@r4096 r40a2@r4098 r40a3@r409a r40a4@r409c) ((lambda (r40ad@_exp* r40ae@kwd* r40af@mod** r40b0@rhs* r40b1@lex* r40b2@mr r40b3@r r40b4@e*) ((lambda (r40bd@exp-lab* r40be@mod**) (if (not r4085@name) (values r40b1@lex* r40b0@rhs* r4084@exp-id* r40bd@exp-lab* r40b3@r r40b2@mr r40be@mod** r40ae@kwd*) ((lambda (r40c1@lab r40c2@iface) (values r40b1@lex* r40b0@rhs* (vector r4085@name) (vector r40c1@lab) (cons (cons r40c1@lab (cons '$module r40c2@iface)) r40b3@r) (cons (cons r40c1@lab (cons '$module r40c2@iface)) r40b2@mr) r40be@mod** r40ae@kwd*)) (r2c78@gen-label 'module) (r2f48@make-module-interface (car (r2cc2@stx-mark* r4085@name)) (vector-map (lambda (r40c5@x) (r2cbe@make-stx (r2cc0@stx-expr r40c5@x) (r2cc2@stx-mark* r40c5@x) '() '())) r4084@exp-id*) r40bd@exp-lab*)))) (vector-map (lambda (r40c7@x) (or (r2d0e@id->label (r2cbe@make-stx (r2cf6@id->sym r40c7@x) (r2cc2@stx-mark* r40c7@x) (list r4089@rib) '())) (r2fe8@syntax-violation '#f '"cannot find module export" r40c7@x))) r4084@exp-id*) (cons r40b4@e* r40af@mod**))) r40a4@r409c r40a3@r409a r40a2@r4098 r40a1@r4096 r40a0@r4094 r409f@r4092 r409e@r4090 r409d@r408e)))))) (map (lambda (r40c9@x) (r2ce0@add-subst r4089@rib r40c9@x)) (r2cf2@syntax->list r4083@e*)))) (r2ca3@make-empty-rib))) r407f@r407c r407e@r407a r407d@r4078))))) (set! r2f5a@chi-body* (lambda (r40cb@e* r40cc@r r40cd@mr r40ce@lex* r40cf@rhs* r40d0@mod** r40d1@kwd* r40d2@exp* r40d3@rib r40d4@top?) (if (null? r40cb@e*) (values r40cb@e* r40cc@r r40cd@mr r40ce@lex* r40cf@rhs* r40d0@mod** r40d1@kwd* r40d2@exp*) ((lambda (r40df@e) (call-with-values (lambda () (r2d1c@syntax-type r40df@e r40cc@r)) (lambda (r40e7@r40e2 r40e8@r40e4 r40e9@r40e6) ((lambda (r40ed@kwd r40ee@value r40ef@type) ((lambda (r40f3@kwd*) ((lambda (r40f5@t) (if (memv r40f5@t '(define)) (call-with-values (lambda () (r2e83@parse-define r40df@e)) (lambda (r40fb@r40f8 r40fc@r40fa) ((lambda (r40ff@rhs r4100@id) (begin (if (r2d02@bound-id-member? r4100@id r40f3@kwd*) (r2fe8@syntax-violation '#f '"cannot redefine keyword" r40df@e) (void)) (call-with-values (lambda () (r2c7c@gen-define-label+loc r4100@id r40d3@rib)) (lambda (r4107@r4104 r4108@r4106) ((lambda (r410b@lex r410c@lab) (begin (r2ca5@extend-rib! r40d3@rib r4100@id r410c@lab) (r2f5a@chi-body* (cdr r40cb@e*) (r2e91@add-lexical r410c@lab r410b@lex r40cc@r) r40cd@mr (cons r410b@lex r40ce@lex*) (cons r40ff@rhs r40cf@rhs*) r40d0@mod** r40f3@kwd* r40d2@exp* r40d3@rib r40d4@top?))) r4108@r4106 r4107@r4104))))) r40fc@r40fa r40fb@r40f8))) (if (memv r40f5@t '(define-syntax)) (call-with-values (lambda () (r2e85@parse-define-syntax r40df@e)) (lambda (r4113@r4110 r4114@r4112) ((lambda (r4117@rhs r4118@id) (begin (if (r2d02@bound-id-member? r4118@id r40f3@kwd*) (r2fe8@syntax-violation '#f '"cannot redefine keyword" r40df@e) (void)) ((lambda (r411b@lab r411c@expanded-rhs) (begin (r2ca5@extend-rib! r40d3@rib r4118@id r411b@lab) ((lambda (r411f@b) (r2f5a@chi-body* (cdr r40cb@e*) (cons (cons r411b@lab r411f@b) r40cc@r) (cons (cons r411b@lab r411f@b) r40cd@mr) r40ce@lex* r40cf@rhs* r40d0@mod** r40f3@kwd* r40d2@exp* r40d3@rib r40d4@top?)) (r2d32@make-eval-transformer r411c@expanded-rhs)))) (r2c7e@gen-define-label r4118@id r40d3@rib) (r2f5c@expand-transformer r4117@rhs r40cd@mr)))) r4114@r4112 r4113@r4110))) (if (memv r40f5@t '(let-syntax letrec-syntax)) ((lambda (r4121@t) ((lambda (r4123@ls/false) (if (and r4123@ls/false (apply (lambda (r4125@xlhs* r4126@xrhs* r4127@xbody*) (if (not (r2cfe@valid-bound-ids? r4125@xlhs*)) (r2fe8@syntax-violation '#f '"invalid identifiers" r40df@e) (void))) r4123@ls/false)) (apply (lambda (r412b@xlhs* r412c@xrhs* r412d@xbody*) ((lambda (r4131@xlab*) ((lambda (r4133@xrib) ((lambda (r4135@xb*) ((lambda () (r2f5a@chi-body* (append (map (lambda (r4137@x) (r2ce0@add-subst r4133@xrib r4137@x)) r412d@xbody*) (cdr r40cb@e*)) (append (map cons r4131@xlab* r4135@xb*) r40cc@r) (append (map cons r4131@xlab* r4135@xb*) r40cd@mr) r40ce@lex* r40cf@rhs* r40d0@mod** r40f3@kwd* r40d2@exp* r40d3@rib r40d4@top?)))) (map (lambda (r4139@x) (r2d32@make-eval-transformer (r2f5c@expand-transformer (if (eq? r40ef@type 'let-syntax) r4139@x (r2ce0@add-subst r4133@xrib r4139@x)) r40cd@mr))) r412c@xrhs*))) (r2caf@make-full-rib r412b@xlhs* r4131@xlab*))) (map r2c78@gen-label r412b@xlhs*))) r4123@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r4121@t))) (r2eff@syntax-dispatch r4121@t '(_ #(each (any any)) . each-any)))) r40df@e) (if (memv r40f5@t '(begin)) ((lambda (r413b@t) ((lambda (r413d@ls/false) (if r413d@ls/false (apply (lambda (r413f@x*) (r2f5a@chi-body* (append r413f@x* (cdr r40cb@e*)) r40cc@r r40cd@mr r40ce@lex* r40cf@rhs* r40d0@mod** r40f3@kwd* r40d2@exp* r40d3@rib r40d4@top?)) r413d@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r413b@t))) (r2eff@syntax-dispatch r413b@t '(_ . each-any)))) r40df@e) (if (memv r40f5@t '(global-macro global-macro!)) (r2f5a@chi-body* (cons (r2ce0@add-subst r40d3@rib (r2f1b@chi-global-macro r40ee@value r40df@e)) (cdr r40cb@e*)) r40cc@r r40cd@mr r40ce@lex* r40cf@rhs* r40d0@mod** r40f3@kwd* r40d2@exp* r40d3@rib r40d4@top?) (if (memv r40f5@t '(local-macro local-macro!)) (r2f5a@chi-body* (cons (r2ce0@add-subst r40d3@rib (r2f19@chi-local-macro r40ee@value r40df@e)) (cdr r40cb@e*)) r40cc@r r40cd@mr r40ce@lex* r40cf@rhs* r40d0@mod** r40f3@kwd* r40d2@exp* r40d3@rib r40d4@top?) (if (memv r40f5@t '(macro macro!)) (r2f5a@chi-body* (cons (r2ce0@add-subst r40d3@rib (r2f17@chi-macro r40ee@value r40df@e)) (cdr r40cb@e*)) r40cc@r r40cd@mr r40ce@lex* r40cf@rhs* r40d0@mod** r40f3@kwd* r40d2@exp* r40d3@rib r40d4@top?) (if (memv r40f5@t '(module)) (call-with-values (lambda () (r2f58@chi-internal-module r40df@e r40cc@r r40cd@mr r40ce@lex* r40cf@rhs* r40d0@mod** r40f3@kwd*)) (lambda (r4151@r4142 r4152@r4144 r4153@r4146 r4154@r4148 r4155@r414a r4156@r414c r4157@r414e r4158@r4150) ((lambda (r4161@kwd* r4162@mod** r4163@mr r4164@r r4165@m-exp-lab* r4166@m-exp-id* r4167@rhs* r4168@lex*) (begin (vector-for-each (lambda (r4171@id r4172@lab) (r2ca5@extend-rib! r40d3@rib r4171@id r4172@lab)) r4166@m-exp-id* r4165@m-exp-lab*) (r2f5a@chi-body* (cdr r40cb@e*) r4164@r r4163@mr r4168@lex* r4167@rhs* r4162@mod** r4161@kwd* r40d2@exp* r40d3@rib r40d4@top?))) r4158@r4150 r4157@r414e r4156@r414c r4155@r414a r4154@r4148 r4153@r4146 r4152@r4144 r4151@r4142))) (if (memv r40f5@t '(library)) (begin (r2fca@library-expander (r2d0a@stx->datum r40df@e)) (r2f5a@chi-body* (cdr r40cb@e*) r40cc@r r40cd@mr r40ce@lex* r40cf@rhs* r40d0@mod** r40f3@kwd* r40d2@exp* r40d3@rib r40d4@top?)) (if (memv r40f5@t '(export)) ((lambda (r4175@t) ((lambda (r4177@ls/false) (if r4177@ls/false (apply (lambda (r4179@exp-decl*) (r2f5a@chi-body* (cdr r40cb@e*) r40cc@r r40cd@mr r40ce@lex* r40cf@rhs* r40d0@mod** r40f3@kwd* (append r4179@exp-decl* r40d2@exp*) r40d3@rib r40d4@top?)) r4177@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r4175@t))) (r2eff@syntax-dispatch r4175@t '(_ . each-any)))) r40df@e) (if (memv r40f5@t '(import)) ((lambda () ((lambda (r417c@module-import? r417e@module-import r4180@library-import) (begin (set! r417c@module-import? (lambda (r41cf@e) ((lambda (r41d1@t) ((lambda (r41d3@ls/false) (if (and r41d3@ls/false (apply (lambda (r41d5@id) (r2cf4@id? r41d5@id)) r41d3@ls/false)) (apply (lambda (r41d7@id) '#t) r41d3@ls/false) ((lambda (r41d9@t) ((lambda (r41db@ls/false) (if r41db@ls/false (apply (lambda (r41dd@imp*) '#f) r41db@ls/false) ((lambda (r41df@t) ((lambda (r41e1@ls/false) (if r41e1@ls/false (apply (lambda () (r2fe8@syntax-violation '#f '"malformed import form" r41cf@e)) r41e1@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r41df@t))) (r2eff@syntax-dispatch r41df@t '_))) r41d9@t))) (r2eff@syntax-dispatch r41d9@t '(_ . each-any)))) r41d1@t))) (r2eff@syntax-dispatch r41d1@t '(_ any)))) r41cf@e))) (set! r417e@module-import (lambda (r41ad@e r41ae@r) ((lambda (r41b1@t) ((lambda (r41b3@ls/false) (if (and r41b3@ls/false (apply (lambda (r41b5@id) (r2cf4@id? r41b5@id)) r41b3@ls/false)) (apply (lambda (r41b7@id) (call-with-values (lambda () (r2d1c@syntax-type r41b7@id r41ae@r)) (lambda (r41bf@r41ba r41c0@r41bc r41c1@r41be) ((lambda (r41c5@kwd r41c6@value r41c7@type) ((lambda (r41cb@t) (if (memv r41cb@t '($module)) ((lambda (r41cd@iface) (values (r2f56@module-interface-exp-id* r41cd@iface r41b7@id) (r2f4e@module-interface-exp-lab-vec r41cd@iface))) r41c6@value) (r2fe8@syntax-violation '#f '"invalid import" r41ad@e))) r41c7@type)) r41c1@r41be r41c0@r41bc r41bf@r41ba)))) r41b3@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r41b1@t))) (r2eff@syntax-dispatch r41b1@t '(_ any)))) r41ad@e))) (set! r4180@library-import (lambda (r4191@e) ((lambda (r4193@t) ((lambda (r4195@ls/false) (if r4195@ls/false (apply (lambda (r4197@ctxt r4198@imp*) (call-with-values (lambda () (r2f64@parse-import-spec* (r2fee@syntax->datum r4198@imp*))) (lambda (r419f@r419c r41a0@r419e) ((lambda (r41a3@subst-labels r41a4@subst-names) (values (vector-map (lambda (r41a7@name) (r2cd2@datum->stx r4197@ctxt r41a7@name)) r41a4@subst-names) r41a3@subst-labels)) r41a0@r419e r419f@r419c)))) r4195@ls/false) ((lambda (r41a9@t) ((lambda (r41ab@ls/false) (if r41ab@ls/false (apply (lambda () (r2fe8@syntax-violation '#f '"invalid import form" r4191@e)) r41ab@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r41a9@t))) (r2eff@syntax-dispatch r41a9@t '_))) r4193@t))) (r2eff@syntax-dispatch r4193@t '(any . each-any)))) r4191@e))) (begin (call-with-values (lambda () (if (r417c@module-import? r40df@e) (r417e@module-import r40df@e r40cc@r) (r4180@library-import r40df@e))) (lambda (r4185@r4182 r4186@r4184) ((lambda (r4189@lab* r418a@id*) (vector-for-each (lambda (r418d@id r418e@lab) (r2ca5@extend-rib! r40d3@rib r418d@id r418e@lab)) r418a@id* r4189@lab*)) r4186@r4184 r4185@r4182))) (r2f5a@chi-body* (cdr r40cb@e*) r40cc@r r40cd@mr r40ce@lex* r40cf@rhs* r40d0@mod** r40f3@kwd* r40d2@exp* r40d3@rib r40d4@top?)))) '#f '#f '#f))) (if r40d4@top? (r2f5a@chi-body* (cdr r40cb@e*) r40cc@r r40cd@mr (cons (r2c74@gen-lexical 'dummy) r40ce@lex*) (cons (cons 'top-expr r40df@e) r40cf@rhs*) r40d0@mod** r40f3@kwd* r40d2@exp* r40d3@rib r40d4@top?) (values r40cb@e* r40cc@r r40cd@mr r40ce@lex* r40cf@rhs* r40d0@mod** r40f3@kwd* r40d2@exp*)))))))))))))) r40ef@type)) (if (r2cf4@id? r40ed@kwd) (cons r40ed@kwd r40d1@kwd*) r40d1@kwd*))) r40e9@r40e6 r40e8@r40e4 r40e7@r40e2)))) (car r40cb@e*))))) (set! r2f5c@expand-transformer (lambda (r41e3@expr r41e4@r) ((lambda (r41e7@rtc) ((lambda (r41e9@expanded-rhs) (begin (for-each ((lambda (r41eb@mark-visit) (lambda (r41ed@x) (begin (r2b18@r29b9@invoke-library r41ed@x) (r41eb@mark-visit r41ed@x)))) (r2f6c@vis-collector)) (r41e7@rtc)) r41e9@expanded-rhs)) ((lambda (r41f7@r41f0 r41f8@r41f2 r41f9@r41f4 r41fa@r41f6) ((lambda (r41ff@swap) (dynamic-wind r41ff@swap (lambda () (r2f21@chi-expr r41e3@expr r41e4@r r41e4@r)) r41ff@swap)) (lambda () (begin ((lambda (r4201@t) (begin (r41f7@r41f0 r41f9@r41f4) (set! r41f9@r41f4 r4201@t))) (r41f7@r41f0)) ((lambda (r4203@t) (begin (r41f8@r41f2 r41fa@r41f6) (set! r41fa@r41f6 r4203@t))) (r41f8@r41f2)))))) r2f6a@inv-collector r2f6c@vis-collector r41e7@rtc (lambda (r4205@x) (values))))) (r2f68@make-collector)))) (set! r2f5e@parse-exports (lambda (r4207@exp*) ((letrec ((r4209@f (lambda (r420b@exp* r420c@int* r420d@ext*) (if (null? r420b@exp*) (begin (if (not (r2cfe@valid-bound-ids? r420d@ext*)) (r2fe8@syntax-violation 'export '"invalid exports" (r2f35@find-dups r420d@ext*)) (void)) (values (map r2fee@syntax->datum r420d@ext*) r420c@int*)) ((lambda (r4211@t) ((lambda (r4213@ls/false) (if r4213@ls/false (apply (lambda (r4215@rename r4216@i* r4217@e*) (begin (if (not (and (eq? (r2fee@syntax->datum r4215@rename) 'rename) (for-all r2cf4@id? r4216@i*) (for-all r2cf4@id? r4217@e*))) (r2fe8@syntax-violation 'export '"invalid export specifier" (car r420b@exp*)) (void)) (r4209@f (cdr r420b@exp*) (append r4216@i* r420c@int*) (append r4217@e* r420d@ext*)))) r4213@ls/false) ((lambda (r421b@t) ((lambda (r421d@ls/false) (if r421d@ls/false (apply (lambda (r421f@ie) (begin (if (not (r2cf4@id? r421f@ie)) (r2fe8@syntax-violation 'export '"invalid export" r421f@ie) (void)) (r4209@f (cdr r420b@exp*) (cons r421f@ie r420c@int*) (cons r421f@ie r420d@ext*)))) r421d@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r421b@t))) (r2eff@syntax-dispatch r421b@t 'any))) r4211@t))) (r2eff@syntax-dispatch r4211@t '(any . #(each (any any)))))) (car r420b@exp*)))))) r4209@f) r4207@exp* '() '()))) (set! r2f60@parse-library-name (lambda (r4221@spec) ((lambda (r4224@parse) (begin (set! r4224@parse (lambda (r4231@x) ((lambda (r4233@t) ((lambda (r4235@ls/false) (if (and r4235@ls/false (apply (lambda (r4237@v*) (for-all (lambda (r4239@x) ((lambda (r423b@x) (and (integer? r423b@x) (exact? r423b@x))) (r2fee@syntax->datum r4239@x))) r4237@v*)) r4235@ls/false)) (apply (lambda (r423d@v*) (values '() (map r2fee@syntax->datum r423d@v*))) r4235@ls/false) ((lambda (r423f@t) ((lambda (r4241@ls/false) (if (and r4241@ls/false (apply (lambda (r4243@x r4244@rest) (symbol? (r2fee@syntax->datum r4243@x))) r4241@ls/false)) (apply (lambda (r4247@x r4248@rest) (call-with-values (lambda () (r4224@parse r4248@rest)) (lambda (r424f@r424c r4250@r424e) ((lambda (r4253@v* r4254@x*) (values (cons (r2fee@syntax->datum r4247@x) r4254@x*) r4253@v*)) r4250@r424e r424f@r424c)))) r4241@ls/false) ((lambda (r4257@t) ((lambda (r4259@ls/false) (if r4259@ls/false (apply (lambda () (values '() '())) r4259@ls/false) ((lambda (r425b@t) ((lambda (r425d@ls/false) (if r425d@ls/false (apply (lambda () (r2fe8@syntax-violation '#f '"invalid library name" r4221@spec)) r425d@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r425b@t))) (r2eff@syntax-dispatch r425b@t '_))) r4257@t))) (r2eff@syntax-dispatch r4257@t '()))) r423f@t))) (r2eff@syntax-dispatch r423f@t '(any . any)))) r4233@t))) (r2eff@syntax-dispatch r4233@t '(each-any)))) r4231@x))) (call-with-values (lambda () (r4224@parse r4221@spec)) (lambda (r4229@r4226 r422a@r4228) ((lambda (r422d@ver* r422e@name*) (begin (if (null? r422e@name*) (r2fe8@syntax-violation '#f '"empty library name" r4221@spec) (void)) (values r422e@name* r422d@ver*))) r422a@r4228 r4229@r4226))))) '#f))) (set! r2f62@parse-library (lambda (r425f@e) ((lambda (r4261@t) ((lambda (r4263@ls/false) (if (and r4263@ls/false (apply (lambda (r4265@library r4266@name* r4267@export r4268@exp* r4269@import r426a@imp* r426b@b*) (and (eq? (r2fee@syntax->datum r4267@export) 'export) (eq? (r2fee@syntax->datum r4269@import) 'import) (eq? (r2fee@syntax->datum r4265@library) 'library))) r4263@ls/false)) (apply (lambda (r4273@library r4274@name* r4275@export r4276@exp* r4277@import r4278@imp* r4279@b*) (values r4274@name* r4276@exp* r4278@imp* r4279@b*)) r4263@ls/false) ((lambda (r4281@t) ((lambda (r4283@ls/false) (if r4283@ls/false (apply (lambda () (r2fe8@syntax-violation '#f '"malformed library" r425f@e)) r4283@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r4281@t))) (r2eff@syntax-dispatch r4281@t '_))) r4261@t))) (r2eff@syntax-dispatch r4261@t '(any each-any (any . each-any) (any . each-any) . each-any)))) r425f@e))) (set! r2f64@parse-import-spec* ((lambda () ((lambda (r4286@idsyn? r4288@dup-error r428a@merge-substs r428c@exclude* r428e@find* r4290@rem* r4292@remove-dups r4294@parse-library-name r4296@import-library r4298@get-import r429a@add-imports!) (begin (set! r4286@idsyn? (lambda (r448f@x) (symbol? (r2fee@syntax->datum r448f@x)))) (set! r4288@dup-error (lambda (r448d@name) (r2fe8@syntax-violation 'import '"two imports with different bindings" r448d@name))) (set! r428a@merge-substs (lambda (r447b@s r447c@subst) ((lambda (r4480@insert-to-subst) (begin (set! r4480@insert-to-subst (lambda (r4481@a r4482@subst) ((lambda (r4485@name r4486@label) ((lambda (r4489@t) (if r4489@t ((lambda (r448b@x) (if (eq? (cdr r448b@x) r4486@label) r4482@subst (r4288@dup-error r4485@name))) r4489@t) (cons r4481@a r4482@subst))) (assq r4485@name r4482@subst))) (car r4481@a) (cdr r4481@a)))) (if (null? r447b@s) r447c@subst (r4480@insert-to-subst (car r447b@s) (r428a@merge-substs (cdr r447b@s) r447c@subst))))) '#f))) (set! r428c@exclude* (lambda (r444b@sym* r444c@subst) ((lambda (r4450@exclude) (begin (set! r4450@exclude (lambda (r4469@sym r446a@subst) (if (null? r446a@subst) (r2fe8@syntax-violation 'import '"cannot rename unbound identifier" r4469@sym) (if (eq? r4469@sym (caar r446a@subst)) (values (cdar r446a@subst) (cdr r446a@subst)) ((lambda (r446d@a) (call-with-values (lambda () (r4450@exclude r4469@sym (cdr r446a@subst))) (lambda (r4473@r4470 r4474@r4472) ((lambda (r4477@subst r4478@old) (values r4478@old (cons r446d@a r4477@subst))) r4474@r4472 r4473@r4470)))) (car r446a@subst)))))) (if (null? r444b@sym*) (values '() r444c@subst) (call-with-values (lambda () (r4450@exclude (car r444b@sym*) r444c@subst)) (lambda (r4455@r4452 r4456@r4454) ((lambda (r4459@subst r445a@old) (call-with-values (lambda () (r428c@exclude* (cdr r444b@sym*) r4459@subst)) (lambda (r4461@r445e r4462@r4460) ((lambda (r4465@subst r4466@old*) (values (cons r445a@old r4466@old*) r4465@subst)) r4462@r4460 r4461@r445e)))) r4456@r4454 r4455@r4452)))))) '#f))) (set! r428e@find* (lambda (r4443@sym* r4444@subst) (map (lambda (r4447@x) ((lambda (r4449@t) (if r4449@t (cdr r4449@t) (r2fe8@syntax-violation 'import '"cannot find identifier" r4447@x))) (assq r4447@x r4444@subst))) r4443@sym*))) (set! r4290@rem* (lambda (r443b@sym* r443c@subst) ((letrec ((r443f@f (lambda (r4441@subst) (if (null? r4441@subst) '() (if (memq (caar r4441@subst) r443b@sym*) (r443f@f (cdr r4441@subst)) (cons (car r4441@subst) (r443f@f (cdr r4441@subst)))))))) r443f@f) r443c@subst))) (set! r4292@remove-dups (lambda (r4439@ls) (if (null? r4439@ls) '() (if (memq (car r4439@ls) (cdr r4439@ls)) (r4292@remove-dups (cdr r4439@ls)) (cons (car r4439@ls) (r4292@remove-dups (cdr r4439@ls))))))) (set! r4294@parse-library-name (lambda (r4351@spec) ((lambda (r4354@subversion? r4356@subversion-pred r4358@version-pred) (begin (set! r4354@subversion? (lambda (r4435@x) ((lambda (r4437@x) (and (integer? r4437@x) (exact? r4437@x) (>= r4437@x '0))) (r2fee@syntax->datum r4435@x)))) (set! r4356@subversion-pred (lambda (r43d5@x*) ((lambda (r43d7@t) ((lambda (r43d9@ls/false) (if (and r43d9@ls/false (apply (lambda (r43db@n) (r4354@subversion? r43db@n)) r43d9@ls/false)) (apply (lambda (r43dd@n) (lambda (r43df@x) (= r43df@x (r2fee@syntax->datum r43dd@n)))) r43d9@ls/false) ((lambda (r43e1@t) ((lambda (r43e3@ls/false) (if (and r43e3@ls/false (apply (lambda (r43e5@p? r43e6@sub*) (eq? (r2fee@syntax->datum r43e5@p?) 'and)) r43e3@ls/false)) (apply (lambda (r43e9@p? r43ea@sub*) ((lambda (r43ed@p*) (lambda (r43ef@x) (for-all (lambda (r43f1@p) (r43f1@p r43ef@x)) r43ed@p*))) (map r4356@subversion-pred r43ea@sub*))) r43e3@ls/false) ((lambda (r43f3@t) ((lambda (r43f5@ls/false) (if (and r43f5@ls/false (apply (lambda (r43f7@p? r43f8@sub*) (eq? (r2fee@syntax->datum r43f7@p?) 'or)) r43f5@ls/false)) (apply (lambda (r43fb@p? r43fc@sub*) ((lambda (r43ff@p*) (lambda (r4401@x) (exists (lambda (r4403@p) (r4403@p r4401@x)) r43ff@p*))) (map r4356@subversion-pred r43fc@sub*))) r43f5@ls/false) ((lambda (r4405@t) ((lambda (r4407@ls/false) (if (and r4407@ls/false (apply (lambda (r4409@p? r440a@sub) (eq? (r2fee@syntax->datum r4409@p?) 'not)) r4407@ls/false)) (apply (lambda (r440d@p? r440e@sub) ((lambda (r4411@p) (lambda (r4413@x) (not (r4411@p r4413@x)))) (r4356@subversion-pred r440e@sub))) r4407@ls/false) ((lambda (r4415@t) ((lambda (r4417@ls/false) (if (and r4417@ls/false (apply (lambda (r4419@p? r441a@n) (and (eq? (r2fee@syntax->datum r4419@p?) '<=) (r4354@subversion? r441a@n))) r4417@ls/false)) (apply (lambda (r441d@p? r441e@n) (lambda (r4421@x) (<= r4421@x (r2fee@syntax->datum r441e@n)))) r4417@ls/false) ((lambda (r4423@t) ((lambda (r4425@ls/false) (if (and r4425@ls/false (apply (lambda (r4427@p? r4428@n) (and (eq? (r2fee@syntax->datum r4427@p?) '>=) (r4354@subversion? r4428@n))) r4425@ls/false)) (apply (lambda (r442b@p? r442c@n) (lambda (r442f@x) (>= r442f@x (r2fee@syntax->datum r442c@n)))) r4425@ls/false) ((lambda (r4431@t) ((lambda (r4433@ls/false) (if r4433@ls/false (apply (lambda () (r2fe8@syntax-violation 'import '"invalid sub-version spec" r4351@spec r43d5@x*)) r4433@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r4431@t))) (r2eff@syntax-dispatch r4431@t '_))) r4423@t))) (r2eff@syntax-dispatch r4423@t '(any any)))) r4415@t))) (r2eff@syntax-dispatch r4415@t '(any any)))) r4405@t))) (r2eff@syntax-dispatch r4405@t '(any any)))) r43f3@t))) (r2eff@syntax-dispatch r43f3@t '(any . each-any)))) r43e1@t))) (r2eff@syntax-dispatch r43e1@t '(any . each-any)))) r43d7@t))) (r2eff@syntax-dispatch r43d7@t 'any))) r43d5@x*))) (set! r4358@version-pred (lambda (r4385@x*) ((lambda (r4387@t) ((lambda (r4389@ls/false) (if r4389@ls/false (apply (lambda () (lambda (r438b@x) '#t)) r4389@ls/false) ((lambda (r438d@t) ((lambda (r438f@ls/false) (if (and r438f@ls/false (apply (lambda (r4391@c r4392@ver*) (eq? (r2fee@syntax->datum r4391@c) 'and)) r438f@ls/false)) (apply (lambda (r4395@c r4396@ver*) ((lambda (r4399@p*) (lambda (r439b@x) (for-all (lambda (r439d@p) (r439d@p r439b@x)) r4399@p*))) (map r4358@version-pred r4396@ver*))) r438f@ls/false) ((lambda (r439f@t) ((lambda (r43a1@ls/false) (if (and r43a1@ls/false (apply (lambda (r43a3@c r43a4@ver*) (eq? (r2fee@syntax->datum r43a3@c) 'or)) r43a1@ls/false)) (apply (lambda (r43a7@c r43a8@ver*) ((lambda (r43ab@p*) (lambda (r43ad@x) (exists (lambda (r43af@p) (r43af@p r43ad@x)) r43ab@p*))) (map r4358@version-pred r43a8@ver*))) r43a1@ls/false) ((lambda (r43b1@t) ((lambda (r43b3@ls/false) (if (and r43b3@ls/false (apply (lambda (r43b5@c r43b6@ver) (eq? (r2fee@syntax->datum r43b5@c) 'not)) r43b3@ls/false)) (apply (lambda (r43b9@c r43ba@ver) ((lambda (r43bd@p) (lambda (r43bf@x) (not (r43bd@p r43bf@x)))) (r4358@version-pred r43ba@ver))) r43b3@ls/false) ((lambda (r43c1@t) ((lambda (r43c3@ls/false) (if r43c3@ls/false (apply (lambda (r43c5@sub*) ((lambda (r43c7@p*) (lambda (r43c9@x) ((letrec ((r43cb@f (lambda (r43cd@p* r43ce@x) (if (null? r43cd@p*) '#t (if (null? r43ce@x) '#f (and ((car r43cd@p*) (car r43ce@x)) (r43cb@f (cdr r43cd@p*) (cdr r43ce@x)))))))) r43cb@f) r43c7@p* r43c9@x))) (map r4356@subversion-pred r43c5@sub*))) r43c3@ls/false) ((lambda (r43d1@t) ((lambda (r43d3@ls/false) (if r43d3@ls/false (apply (lambda () (r2fe8@syntax-violation 'import '"invalid version spec" r4351@spec r4385@x*)) r43d3@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r43d1@t))) (r2eff@syntax-dispatch r43d1@t '_))) r43c1@t))) (r2eff@syntax-dispatch r43c1@t 'each-any))) r43b1@t))) (r2eff@syntax-dispatch r43b1@t '(any any)))) r439f@t))) (r2eff@syntax-dispatch r439f@t '(any . each-any)))) r438d@t))) (r2eff@syntax-dispatch r438d@t '(any . each-any)))) r4387@t))) (r2eff@syntax-dispatch r4387@t '()))) r4385@x*))) ((letrec ((r4359@f (lambda (r435b@x) ((lambda (r435d@t) ((lambda (r435f@ls/false) (if r435f@ls/false (apply (lambda (r4361@version-spec*) (values '() (r4358@version-pred r4361@version-spec*))) r435f@ls/false) ((lambda (r4363@t) ((lambda (r4365@ls/false) (if (and r4365@ls/false (apply (lambda (r4367@x r4368@x*) (r4286@idsyn? r4367@x)) r4365@ls/false)) (apply (lambda (r436b@x r436c@x*) (call-with-values (lambda () (r4359@f r436c@x*)) (lambda (r4373@r4370 r4374@r4372) ((lambda (r4377@pred r4378@name) (values (cons (r2fee@syntax->datum r436b@x) r4378@name) r4377@pred)) r4374@r4372 r4373@r4370)))) r4365@ls/false) ((lambda (r437b@t) ((lambda (r437d@ls/false) (if r437d@ls/false (apply (lambda () (values '() (lambda (r437f@x) '#t))) r437d@ls/false) ((lambda (r4381@t) ((lambda (r4383@ls/false) (if r4383@ls/false (apply (lambda () (r2fe8@syntax-violation '#f '"invalid import spec" r4351@spec)) r4383@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r4381@t))) (r2eff@syntax-dispatch r4381@t '_))) r437b@t))) (r2eff@syntax-dispatch r437b@t '()))) r4363@t))) (r2eff@syntax-dispatch r4363@t '(any . any)))) r435d@t))) (r2eff@syntax-dispatch r435d@t '(each-any)))) r435b@x)))) r4359@f) r4351@spec))) '#f '#f '#f))) (set! r4296@import-library (lambda (r4341@spec*) (call-with-values (lambda () (r4294@parse-library-name r4341@spec*)) (lambda (r4347@r4344 r4348@r4346) ((lambda (r434b@pred r434c@name) (begin (if (null? r434c@name) (r2fe8@syntax-violation 'import '"empty library name" r4341@spec*) (void)) ((lambda (r434f@lib) (begin (if (not r434f@lib) (r2fe8@syntax-violation 'import '"cannot find library with required name" r434c@name) (void)) (if (not (r434b@pred (r2ae9@r295b@library-version r434f@lib))) (r2fe8@syntax-violation 'import '"library does not satisfy version specification" r4341@spec* r434f@lib) (void)) ((r2f6e@imp-collector) r434f@lib) (r2aed@r2963@library-subst r434f@lib))) (r2b11@r29ab@find-library-by-name r434c@name)))) r4348@r4346 r4347@r4344))))) (set! r4298@get-import (lambda (r42b3@spec) ((lambda (r42b5@t) ((lambda (r42b7@ls/false) (if (and r42b7@ls/false (apply (lambda (r42b9@x r42ba@x*) (not (memq (r2fee@syntax->datum r42b9@x) '(for rename except only prefix library)))) r42b7@ls/false)) (apply (lambda (r42bd@x r42be@x*) (r4296@import-library (cons r42bd@x r42be@x*))) r42b7@ls/false) ((lambda (r42c1@t) ((lambda (r42c3@ls/false) (if (and r42c3@ls/false (apply (lambda (r42c5@rename r42c6@isp r42c7@old* r42c8@new*) (and (eq? (r2fee@syntax->datum r42c5@rename) 'rename) (for-all r4286@idsyn? r42c7@old*) (for-all r4286@idsyn? r42c8@new*))) r42c3@ls/false)) (apply (lambda (r42cd@rename r42ce@isp r42cf@old* r42d0@new*) ((lambda (r42d5@subst r42d6@old* r42d7@new*) ((lambda (r42db@old-label*) ((lambda (r42dd@subst) (r428a@merge-substs (map cons r42d7@new* r42db@old-label*) r42dd@subst)) (r4290@rem* r42d6@old* r42d5@subst))) (r428e@find* r42d6@old* r42d5@subst))) (r4298@get-import r42ce@isp) (map r2fee@syntax->datum r42cf@old*) (map r2fee@syntax->datum r42d0@new*))) r42c3@ls/false) ((lambda (r42df@t) ((lambda (r42e1@ls/false) (if (and r42e1@ls/false (apply (lambda (r42e3@except r42e4@isp r42e5@sym*) (and (eq? (r2fee@syntax->datum r42e3@except) 'except) (for-all r4286@idsyn? r42e5@sym*))) r42e1@ls/false)) (apply (lambda (r42e9@except r42ea@isp r42eb@sym*) ((lambda (r42ef@subst) (r4290@rem* (map r2fee@syntax->datum r42eb@sym*) r42ef@subst)) (r4298@get-import r42ea@isp))) r42e1@ls/false) ((lambda (r42f1@t) ((lambda (r42f3@ls/false) (if (and r42f3@ls/false (apply (lambda (r42f5@only r42f6@isp r42f7@sym*) (and (eq? (r2fee@syntax->datum r42f5@only) 'only) (for-all r4286@idsyn? r42f7@sym*))) r42f3@ls/false)) (apply (lambda (r42fb@only r42fc@isp r42fd@sym*) ((lambda (r4301@subst r4302@sym*) ((lambda (r4305@sym*) ((lambda (r4307@lab*) (map cons r4305@sym* r4307@lab*)) (r428e@find* r4305@sym* r4301@subst))) (r4292@remove-dups r4302@sym*))) (r4298@get-import r42fc@isp) (map r2fee@syntax->datum r42fd@sym*))) r42f3@ls/false) ((lambda (r4309@t) ((lambda (r430b@ls/false) (if (and r430b@ls/false (apply (lambda (r430d@prefix r430e@isp r430f@p) (and (eq? (r2fee@syntax->datum r430d@prefix) 'prefix) (r4286@idsyn? r430f@p))) r430b@ls/false)) (apply (lambda (r4313@prefix r4314@isp r4315@p) ((lambda (r4319@subst r431a@prefix) (map (lambda (r431d@x) (cons (string->symbol (string-append r431a@prefix (symbol->string (car r431d@x)))) (cdr r431d@x))) r4319@subst)) (r4298@get-import r4314@isp) (symbol->string (r2fee@syntax->datum r4315@p)))) r430b@ls/false) ((lambda (r431f@t) ((lambda (r4321@ls/false) (if (and r4321@ls/false (apply (lambda (r4323@library r4324@spec*) (eq? (r2fee@syntax->datum r4323@library) 'library)) r4321@ls/false)) (apply (lambda (r4327@library r4328@spec*) (r4296@import-library r4328@spec*)) r4321@ls/false) ((lambda (r432b@t) ((lambda (r432d@ls/false) (if (and r432d@ls/false (apply (lambda (r432f@for r4330@isp r4331@rest) (eq? (r2fee@syntax->datum r432f@for) 'for)) r432d@ls/false)) (apply (lambda (r4335@for r4336@isp r4337@rest) (r4298@get-import r4336@isp)) r432d@ls/false) ((lambda (r433b@t) ((lambda (r433d@ls/false) (if r433d@ls/false (apply (lambda (r433f@spec) (r2fe8@syntax-violation 'import '"invalid import spec" r433f@spec)) r433d@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r433b@t))) (r2eff@syntax-dispatch r433b@t 'any))) r432b@t))) (r2eff@syntax-dispatch r432b@t '(any any . any)))) r431f@t))) (r2eff@syntax-dispatch r431f@t '(any each-any)))) r4309@t))) (r2eff@syntax-dispatch r4309@t '(any any any)))) r42f1@t))) (r2eff@syntax-dispatch r42f1@t '(any any . each-any)))) r42df@t))) (r2eff@syntax-dispatch r42df@t '(any any . each-any)))) r42c1@t))) (r2eff@syntax-dispatch r42c1@t '(any any . #(each (any any)))))) r42b5@t))) (r2eff@syntax-dispatch r42b5@t '(any . each-any)))) r42b3@spec))) (set! r429a@add-imports! (lambda (r42a3@imp r42a4@h) ((lambda (r42a7@subst) (for-each (lambda (r42a9@x) ((lambda (r42ab@name r42ac@label) ((lambda (r42af@t) (if r42af@t ((lambda (r42b1@l) (if (not (eq? r42b1@l r42ac@label)) (r4288@dup-error r42ab@name) (void))) r42af@t) (hashtable-set! r42a4@h r42ab@name r42ac@label))) (hashtable-ref r42a4@h r42ab@name '#f))) (car r42a9@x) (cdr r42a9@x))) r42a7@subst)) (r4298@get-import r42a3@imp)))) (lambda (r429b@imp*) ((letrec ((r429d@f (lambda (r429f@imp* r42a0@h) (if (null? r429f@imp*) (hashtable-entries r42a0@h) (begin (r429a@add-imports! (car r429f@imp*) r42a0@h) (r429d@f (cdr r429f@imp*) r42a0@h)))))) r429d@f) r429b@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! r2f66@make-top-rib (lambda (r4491@names r4492@labels) ((lambda (r4495@rib) (begin (vector-for-each (lambda (r4497@name r4498@label) (begin (if (not (symbol? r4497@name)) (error 'make-top-rib '"BUG: not a symbol" r4497@name) (void)) (r2ca7@extend-rib/nc! r4495@rib (r2cbe@make-stx r4497@name r2c70@top-mark* '() '()) r4498@label))) r4491@names r4492@labels) r4495@rib)) (r2ca3@make-empty-rib)))) (set! r2f68@make-collector (lambda () ((lambda (r449b@ls) (lambda r449f ((lambda (r44a0) (if (= r44a0 '0) (apply (lambda () r449b@ls) r449f) (if (= r44a0 '1) (apply (lambda (r449d@x) (set! r449b@ls (r2c69@set-cons r449d@x r449b@ls))) r449f) (error 'apply '"invalid arg count")))) (length r449f)))) '()))) (set! r2f6a@inv-collector (r289e@r27c8@make-parameter (lambda r44a1@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (r44a3@x) (begin (if (not (procedure? r44a3@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" r44a3@x) (void)) r44a3@x)))) (set! r2f6c@vis-collector (r289e@r27c8@make-parameter (lambda r44a5@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (r44a7@x) (begin (if (not (procedure? r44a7@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" r44a7@x) (void)) r44a7@x)))) (set! r2f6e@imp-collector (r289e@r27c8@make-parameter (lambda r44a9@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (r44ab@x) (begin (if (not (procedure? r44ab@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" r44ab@x) (void)) r44ab@x)))) (set! r2f70@chi-library-internal (lambda (r44ad@e* r44ae@rib r44af@top?) (call-with-values (lambda () (r2f5a@chi-body* r44ad@e* '() '() '() '() '() '() '() r44ae@rib r44af@top?)) (lambda (r44c3@r44b4 r44c4@r44b6 r44c5@r44b8 r44c6@r44ba r44c7@r44bc r44c8@r44be r44c9@r44c0 r44ca@r44c2) ((lambda (r44d3@exp* r44d4@_kwd* r44d5@mod** r44d6@rhs* r44d7@lex* r44d8@mr r44d9@r r44da@e*) (values (append (apply append (reverse r44d5@mod**)) r44da@e*) r44d9@r r44d8@mr (reverse r44d7@lex*) (reverse r44d6@rhs*) r44d3@exp*)) r44ca@r44c2 r44c9@r44c0 r44c8@r44be r44c7@r44bc r44c6@r44ba r44c5@r44b8 r44c4@r44b6 r44c3@r44b4))))) (set! r2f72@chi-interaction-expr (lambda (r44e3@e r44e4@rib r44e5@r) (call-with-values (lambda () (r2f5a@chi-body* (list r44e3@e) r44e5@r r44e5@r '() '() '() '() '() r44e4@rib '#t)) (lambda (r44f9@r44ea r44fa@r44ec r44fb@r44ee r44fc@r44f0 r44fd@r44f2 r44fe@r44f4 r44ff@r44f6 r4500@r44f8) ((lambda (r4509@_exp* r450a@_kwd* r450b@mod** r450c@rhs* r450d@lex* r450e@mr r450f@r r4510@e*) ((lambda (r4519@e*) ((lambda (r451b@e) (values r451b@e r450f@r)) (if (null? r4519@e*) (r2c54@r2bc4@build-void) (if (null? (cdr r4519@e*)) (car r4519@e*) (r2c53@r2bc2@build-sequence '#f r4519@e*))))) (r2f2f@expand-interaction-rhs*/init* (reverse r450d@lex*) (reverse r450c@rhs*) (append (apply append (reverse r450b@mod**)) r4510@e*) r450f@r r450e@mr))) r4500@r44f8 r44ff@r44f6 r44fe@r44f4 r44fd@r44f2 r44fc@r44f0 r44fb@r44ee r44fa@r44ec r44f9@r44ea))))) (set! r2f74@library-body-expander (lambda (r451d@name r451e@main-exp* r451f@imp* r4520@b* r4521@top?) ((lambda (r4528@itc) (begin (set! r4528@itc (r2f68@make-collector)) ((lambda (r4531@r452a r4532@r452c r4533@r452e r4534@r4530) ((lambda (r4539@swap) (dynamic-wind r4539@swap (lambda () (call-with-values (lambda () (r2f64@parse-import-spec* r451f@imp*)) (lambda (r453f@r453c r4540@r453e) ((lambda (r4543@subst-labels r4544@subst-names) ((lambda (r4547@rib) ((lambda (r454a@wrap) (begin (set! r454a@wrap (lambda (r45c5@x) (r2cbe@make-stx r45c5@x r2c70@top-mark* (list r4547@rib) '()))) ((lambda (r454b@b* r454c@main-exp* r454d@rtc r454e@vtc) ((lambda (r455b@r4554 r455c@r4556 r455d@r4558 r455e@r455a) ((lambda (r4563@swap) (dynamic-wind r4563@swap (lambda () (call-with-values (lambda () (r2f70@chi-library-internal r454b@b* r4547@rib r4521@top?)) (lambda (r4571@r4566 r4572@r4568 r4573@r456a r4574@r456c r4575@r456e r4576@r4570) ((lambda (r457d@internal-exp* r457e@rhs* r457f@lex* r4580@mr r4581@r r4582@init*) (call-with-values (lambda () (r2f5e@parse-exports (append r454c@main-exp* r457d@internal-exp*))) (lambda (r458d@r458a r458e@r458c) ((lambda (r4591@exp-id* r4592@exp-name*) (begin (r2cab@seal-rib! r4547@rib) ((lambda (r4595@init*) ((lambda (r4597@rhs*) ((lambda () (begin (r2cad@unseal-rib! r4547@rib) ((lambda (r4599@loc* r459a@export-subst) ((lambda (r459e@errstr) (begin (set! r459e@errstr '"attempt to export mutated variable") (call-with-values (lambda () (r2fd4@make-export-env/macros r457f@lex* r4599@loc* r4581@r)) (lambda (r45a5@r45a0 r45a6@r45a2 r45a7@r45a4) ((lambda (r45ab@macro* r45ac@global* r45ad@export-env) (begin (for-each (lambda (r45b1@s) ((lambda (r45b3@name r45b4@label) ((lambda (r45b7@p) (if r45b7@p ((lambda (r45b9@b) ((lambda (r45bb@type) (if (eq? r45bb@type 'mutable) (r2fe8@syntax-violation 'export r459e@errstr r45b3@name) (void))) (car r45b9@b))) (cdr r45b7@p)) (void))) (assq r45b4@label r45ad@export-env))) (car r45b1@s) (cdr r45b1@s))) r459a@export-subst) ((lambda (r45bd@invoke-body r45be@invoke-definitions) (values (r4528@itc) (r454d@rtc) (r454e@vtc) (r2c53@r2bc2@build-sequence '#f (append r45be@invoke-definitions (list r45bd@invoke-body))) r45ab@macro* r459a@export-subst r45ad@export-env)) (r2c56@r2bc8@build-letrec* '#f r457f@lex* r4597@rhs* (r2fd0@build-exports r45ac@global* r4595@init*)) (map r2c4f@r2b1f@build-global-define (map cdr r45ac@global*))))) r45a7@r45a4 r45a6@r45a2 r45a5@r45a0))))) '#f)) (map r2c76@gen-global r457f@lex*) (r2fd2@make-export-subst r4592@exp-name* r4591@exp-id*)))))) (r2f31@chi-rhs* r457e@rhs* r4581@r r4580@mr))) (r2f1d@chi-expr* r4582@init* r4581@r r4580@mr)))) r458e@r458c r458d@r458a)))) r4576@r4570 r4575@r456e r4574@r456c r4573@r456a r4572@r4568 r4571@r4566)))) r4563@swap)) (lambda () (begin ((lambda (r45c1@t) (begin (r455b@r4554 r455d@r4558) (set! r455d@r4558 r45c1@t))) (r455b@r4554)) ((lambda (r45c3@t) (begin (r455c@r4556 r455e@r455a) (set! r455e@r455a r45c3@t))) (r455c@r4556)))))) r2f6a@inv-collector r2f6c@vis-collector r454d@rtc r454e@vtc)) (map r454a@wrap r4520@b*) (map r454a@wrap r451e@main-exp*) (r2f68@make-collector) (r2f68@make-collector)))) '#f)) (r2f66@make-top-rib r4544@subst-names r4543@subst-labels))) r4540@r453e r453f@r453c)))) r4539@swap)) (lambda () (begin ((lambda (r45c7@t) (begin (r4531@r452a r4533@r452e) (set! r4533@r452e r45c7@t))) (r4531@r452a)) ((lambda (r45c9@t) (begin (r4532@r452c r4534@r4530) (set! r4534@r4530 r45c9@t))) (r4532@r452c)))))) r2f6e@imp-collector r2ff6@top-level-context r4528@itc '#f))) '#f))) (set! r2f76@core-library-expander (lambda (r45cb@e r45cc@verify-name) (call-with-values (lambda () (r2f62@parse-library r45cb@e)) (lambda (r45d7@r45d0 r45d8@r45d2 r45d9@r45d4 r45da@r45d6) ((lambda (r45df@b* r45e0@imp* r45e1@exp* r45e2@name*) (call-with-values (lambda () (r2f60@parse-library-name r45e2@name*)) (lambda (r45eb@r45e8 r45ec@r45ea) ((lambda (r45ef@ver r45f0@name) (begin (r45cc@verify-name r45f0@name) (call-with-values (lambda () (r2f74@library-body-expander r45f0@name r45e1@exp* r45e0@imp* r45df@b* '#f)) (lambda (r4601@r45f4 r4602@r45f6 r4603@r45f8 r4604@r45fa r4605@r45fc r4606@r45fe r4607@r4600) ((lambda (r460f@export-env r4610@export-subst r4611@visit-code r4612@invoke-code r4613@visit-req* r4614@invoke-req* r4615@imp*) (values r45f0@name r45ef@ver r4615@imp* r4614@invoke-req* r4613@visit-req* r4612@invoke-code r4611@visit-code r4610@export-subst r460f@export-env)) r4607@r4600 r4606@r45fe r4605@r45fc r4604@r45fa r4603@r45f8 r4602@r45f6 r4601@r45f4))))) r45ec@r45ea r45eb@r45e8)))) r45da@r45d6 r45d9@r45d4 r45d8@r45d2 r45d7@r45d0))))) (set! r2f78@parse-top-level-program (lambda (r461d@e*) ((lambda (r461f@t) ((lambda (r4621@ls/false) (if (and r4621@ls/false (apply (lambda (r4623@import r4624@imp* r4625@b*) (eq? (r2fee@syntax->datum r4623@import) 'import)) r4621@ls/false)) (apply (lambda (r4629@import r462a@imp* r462b@b*) (values r462a@imp* r462b@b*)) r4621@ls/false) ((lambda (r462f@t) ((lambda (r4631@ls/false) (if (and r4631@ls/false (apply (lambda (r4633@import r4634@x r4635@y) (eq? (r2fee@syntax->datum r4633@import) 'import)) r4631@ls/false)) (apply (lambda (r4639@import r463a@x r463b@y) (r2fe8@syntax-violation 'expander '"invalid syntax of top-level program" (r2cee@syntax-car r461d@e*))) r4631@ls/false) ((lambda (r463f@t) ((lambda (r4641@ls/false) (if r4641@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) r4641@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r463f@t))) (r2eff@syntax-dispatch r463f@t '_))) r462f@t))) (r2eff@syntax-dispatch r462f@t '((any . any) . any)))) r461f@t))) (r2eff@syntax-dispatch r461f@t '((any . each-any) . each-any)))) r461d@e*))) (set! r2f7a@top-level-expander (lambda (r4643@e*) (call-with-values (lambda () (r2f78@parse-top-level-program r4643@e*)) (lambda (r4649@r4646 r464a@r4648) ((lambda (r464d@b* r464e@imp*) (call-with-values (lambda () (r2f74@library-body-expander '() '() r464e@imp* r464d@b* '#t)) (lambda (r465f@r4652 r4660@r4654 r4661@r4656 r4662@r4658 r4663@r465a r4664@r465c r4665@r465e) ((lambda (r466d@export-env r466e@export-subst r466f@visit-code r4670@invoke-code r4671@visit-req* r4672@invoke-req* r4673@imp*) (values r4672@invoke-req* r4670@invoke-code)) r4665@r465e r4664@r465c r4663@r465a r4662@r4658 r4661@r4656 r4660@r4654 r465f@r4652)))) r464a@r4648 r4649@r4646))))) (set! r2f80@r2f7b (make-record-type-descriptor 'env '#f 'r2f7e '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! r2f82@r2f7d '#f) (set! r2f84@r2f7c (make-record-constructor-descriptor r2f80@r2f7b '#f r2f82@r2f7d)) (set! r2f87@env? (record-predicate r2f80@r2f7b)) (set! r2f89@make-env (record-constructor r2f84@r2f7c)) (set! r2f8b@env-names (record-accessor r2f80@r2f7b '0)) (set! r2f8d@env-labels (record-accessor r2f80@r2f7b '1)) (set! r2f8f@env-itc (record-accessor r2f80@r2f7b '2)) (set! r2f91@set-env-names! (record-mutator r2f80@r2f7b '0)) (set! r2f93@set-env-labels! (record-mutator r2f80@r2f7b '1)) (set! r2f95@set-env-itc! (record-mutator r2f80@r2f7b '2)) (set! r2f97@rp (r289b@r27c2@make-record-printer 'env (lambda (r467b@x r467c@p r467d@wr) (display '"#<environment>" r467c@p)))) (set! r2f9d@r2f98 (make-record-type-descriptor 'interaction-env '#f 'r2f9b '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! r2f9f@r2f9a '#f) (set! r2fa1@r2f99 (make-record-constructor-descriptor r2f9d@r2f98 '#f r2f9f@r2f9a)) (set! r2fa4@interaction-env? (record-predicate r2f9d@r2f98)) (set! r2fa6@make-interaction-env (record-constructor r2fa1@r2f99)) (set! r2fa8@interaction-env-rib (record-accessor r2f9d@r2f98 '0)) (set! r2faa@interaction-env-r (record-accessor r2f9d@r2f98 '1)) (set! r2fac@interaction-env-locs (record-accessor r2f9d@r2f98 '2)) (set! r2fae@set-interaction-env-rib! (record-mutator r2f9d@r2f98 '0)) (set! r2fb0@set-interaction-env-r! (record-mutator r2f9d@r2f98 '1)) (set! r2fb2@set-interaction-env-locs! (record-mutator r2f9d@r2f98 '2)) (set! r2fb4@rp (r289b@r27c2@make-record-printer 'interaction-env (lambda (r4681@x r4682@p r4683@wr) (display '"#<environment>" r4682@p)))) (set! r2fb6@interaction-environment-symbols (lambda () (r2fbe@environment-symbols (r2ff4@interaction-environment)))) (set! r2fb8@environment-bindings (lambda (r4687@e) (vector->list (vector-map (lambda (r4689@name r468a@label) (r2fba@parse-binding (cons r4689@name (r2b17@r29b7@imported-label->binding r468a@label)))) (r2f8b@env-names r4687@e) (r2f8d@env-labels r4687@e))))) (set! r2fba@parse-binding (lambda (r468d@b) (cons (car r468d@b) ((lambda (r468f@t) (if (memv r468f@t '(core-prim global)) 'procedure (if (memv r468f@t '(core-macro macro global-macro)) 'syntax (if (memv r468f@t '($core-rtd)) 'record (if (eq? (car r468d@b) (cadr r468d@b)) 'syntax 'unknown))))) (cadr r468d@b))))) (set! r2fbc@environment? (lambda (r4691@x) (or (r2f87@env? r4691@x) (r2fa4@interaction-env? r4691@x)))) (set! r2fbe@environment-symbols (lambda (r4693@x) (if (r2f87@env? r4693@x) (vector->list (r2f8b@env-names r4693@x)) (if (r2fa4@interaction-env? r4693@x) (map values (r2c8f@rib-sym* (r2fa8@interaction-env-rib r4693@x))) (assertion-violation 'environment-symbols '"not an environment" r4693@x))))) (set! r2fc0@environment (lambda r4695@imp* ((lambda (r4697@itc) ((lambda (r469d@r469a r469e@r469c) ((lambda (r46a1@swap) (dynamic-wind r46a1@swap (lambda () (call-with-values (lambda () (r2f64@parse-import-spec* r4695@imp*)) (lambda (r46a7@r46a4 r46a8@r46a6) ((lambda (r46ab@subst-labels r46ac@subst-names) (r2f89@make-env r46ac@subst-names r46ab@subst-labels r4697@itc)) r46a8@r46a6 r46a7@r46a4)))) r46a1@swap)) (lambda () ((lambda (r46af@t) (begin (r469d@r469a r469e@r469c) (set! r469e@r469c r46af@t))) (r469d@r469a))))) r2f6e@imp-collector r4697@itc)) (r2f68@make-collector)))) (set! r2fc2@null-environment (lambda (r46b1@n) (begin (if (not (eqv? r46b1@n '5)) (assertion-violation 'null-environment '"not 5" r46b1@n) (void)) (r2fc0@environment '(psyntax null-environment-5))))) (set! r2fc4@scheme-report-environment (lambda (r46b3@n) (begin (if (not (eqv? r46b3@n '5)) (assertion-violation 'scheme-report-environment '"not 5" r46b3@n) (void)) (r2fc0@environment '(psyntax scheme-report-environment-5))))) (set! r2fc6@expand (lambda (r46b5@x r46b6@env) (if (r2f87@env? r46b6@env) ((lambda (r46b9@rib) ((lambda (r46bb@x r46bc@itc r46bd@rtc r46be@vtc) ((lambda (r46c3@x) (begin (r2cab@seal-rib! r46b9@rib) (values r46c3@x (r46bd@rtc)))) ((lambda (r46d5@r46c6 r46d6@r46c8 r46d7@r46ca r46d8@r46cc r46d9@r46ce r46da@r46d0 r46db@r46d2 r46dc@r46d4) ((lambda (r46e5@swap) (dynamic-wind r46e5@swap (lambda () (r2f21@chi-expr r46bb@x '() '())) r46e5@swap)) (lambda () (begin ((lambda (r46e7@t) (begin (r46d5@r46c6 r46d9@r46ce) (set! r46d9@r46ce r46e7@t))) (r46d5@r46c6)) ((lambda (r46e9@t) (begin (r46d6@r46c8 r46da@r46d0) (set! r46da@r46d0 r46e9@t))) (r46d6@r46c8)) ((lambda (r46eb@t) (begin (r46d7@r46ca r46db@r46d2) (set! r46db@r46d2 r46eb@t))) (r46d7@r46ca)) ((lambda (r46ed@t) (begin (r46d8@r46cc r46dc@r46d4) (set! r46dc@r46d4 r46ed@t))) (r46d8@r46cc)))))) r2ff6@top-level-context r2f6a@inv-collector r2f6c@vis-collector r2f6e@imp-collector '#f r46bd@rtc r46be@vtc r46bc@itc))) (r2cbe@make-stx r46b5@x r2c70@top-mark* (list r46b9@rib) '()) (r2f8f@env-itc r46b6@env) (r2f68@make-collector) (r2f68@make-collector))) (r2f66@make-top-rib (r2f8b@env-names r46b6@env) (r2f8d@env-labels r46b6@env))) (if (r2fa4@interaction-env? r46b6@env) ((lambda (r46ef@rib r46f0@r r46f1@rtc) ((lambda (r46f5@x) (call-with-values (lambda () ((lambda (r470b@r46fc r470c@r46fe r470d@r4700 r470e@r4702 r470f@r4704 r4710@r4706 r4711@r4708 r4712@r470a) ((lambda (r471b@swap) (dynamic-wind r471b@swap (lambda () (r2f72@chi-interaction-expr r46f5@x r46ef@rib r46f0@r)) r471b@swap)) (lambda () (begin ((lambda (r471d@t) (begin (r470b@r46fc r470f@r4704) (set! r470f@r4704 r471d@t))) (r470b@r46fc)) ((lambda (r471f@t) (begin (r470c@r46fe r4710@r4706) (set! r4710@r4706 r471f@t))) (r470c@r46fe)) ((lambda (r4721@t) (begin (r470d@r4700 r4711@r4708) (set! r4711@r4708 r4721@t))) (r470d@r4700)) ((lambda (r4723@t) (begin (r470e@r4702 r4712@r470a) (set! r4712@r470a r4723@t))) (r470e@r4702)))))) r2ff6@top-level-context r2f6a@inv-collector r2f6c@vis-collector r2f6e@imp-collector r46b6@env r46f1@rtc (r2f68@make-collector) (r2f68@make-collector))) (lambda (r4725@r46f8 r4726@r46fa) ((lambda (r4729@r^ r472a@e) (begin (r2fb0@set-interaction-env-r! r46b6@env r4729@r^) (values r472a@e (r46f1@rtc)))) r4726@r46fa r4725@r46f8)))) (r2cbe@make-stx r46b5@x r2c70@top-mark* (list r46ef@rib) '()))) (r2fa8@interaction-env-rib r46b6@env) (r2faa@interaction-env-r r46b6@env) (r2f68@make-collector)) (assertion-violation 'expand '"not an environment" r46b6@env))))) (set! r2fc8@eval (lambda (r472d@x r472e@env) (begin (if (not (r2fbc@environment? r472e@env)) (error 'eval '"not an environment" r472e@env) (void)) (call-with-values (lambda () (r2fc6@expand r472d@x r472e@env)) (lambda (r4735@r4732 r4736@r4734) ((lambda (r4739@invoke-req* r473a@x) (begin (for-each r2b18@r29b9@invoke-library r4739@invoke-req*) (eval-core (r28f2@r28aa@expanded->core r473a@x)))) r4736@r4734 r4735@r4732)))))) (set! r2fca@library-expander (lambda r47ab ((lambda (r47ac) (if (= r47ac '3) (apply (lambda (r473d@x r473e@filename r473f@verify-name) ((lambda (r4744@build-visit-code r4746@visit!) (begin (set! r4744@build-visit-code (lambda (r4799@macro*) (if (null? r4799@macro*) (r2c54@r2bc4@build-void) (r2c53@r2bc2@build-sequence '#f (map (lambda (r479b@x) ((lambda (r479d@loc r479e@src) (list 'set! r479d@loc r479e@src)) (car r479b@x) (cddr r479b@x))) r4799@macro*))))) (set! r4746@visit! (lambda (r4791@macro*) (for-each (lambda (r4793@x) ((lambda (r4795@loc r4796@proc) (set-symbol-value! r4795@loc r4796@proc)) (car r4793@x) (cadr r4793@x))) r4791@macro*))) (call-with-values (lambda () (r2f76@core-library-expander r473d@x r473f@verify-name)) (lambda (r4759@r4748 r475a@r474a r475b@r474c r475c@r474e r475d@r4750 r475e@r4752 r475f@r4754 r4760@r4756 r4761@r4758) ((lambda (r476b@export-env r476c@export-subst r476d@macro* r476e@invoke-code r476f@vis* r4770@inv* r4771@imp* r4772@ver r4773@name) ((lambda (r477d@id r477e@name r477f@ver r4780@imp* r4781@vis* r4782@inv* r4783@visit-proc r4784@invoke-proc r4785@visit-code r4786@invoke-code) (begin (r2b16@r29b5@install-library r477d@id r477e@name r477f@ver r4780@imp* r4781@vis* r4782@inv* r476c@export-subst r476b@export-env r4783@visit-proc r4784@invoke-proc r4785@visit-code r4786@invoke-code '#t r473e@filename) (values r477d@id r477e@name r477f@ver r4780@imp* r4781@vis* r4782@inv* r4786@invoke-code r4785@visit-code r476c@export-subst r476b@export-env))) (gensym) r4773@name r4772@ver (map r2b1c@r29c1@library-spec r4771@imp*) (map r2b1c@r29c1@library-spec r476f@vis*) (map r2b1c@r29c1@library-spec r4770@inv*) (lambda () (r4746@visit! r476d@macro*)) (lambda () (eval-core (r28f2@r28aa@expanded->core r476e@invoke-code))) (r4744@build-visit-code r476d@macro*) r476e@invoke-code)) r4761@r4758 r4760@r4756 r475f@r4754 r475e@r4752 r475d@r4750 r475c@r474e r475b@r474c r475a@r474a r4759@r4748))))) '#f '#f)) r47ab) (if (= r47ac '2) (apply (lambda (r47a1@x r47a2@filename) (r2fca@library-expander r47a1@x r47a2@filename (lambda (r47a5@x) (values)))) r47ab) (if (= r47ac '1) (apply (lambda (r47a7@x) (r2fca@library-expander r47a7@x '#f (lambda (r47a9@x) (values)))) r47ab) (error 'apply '"invalid arg count"))))) (length r47ab)))) (set! r2fcc@boot-library-expand (lambda (r47ad@x) (call-with-values (lambda () (r2fca@library-expander r47ad@x)) (lambda (r47c3@r47b0 r47c4@r47b2 r47c5@r47b4 r47c6@r47b6 r47c7@r47b8 r47c8@r47ba r47c9@r47bc r47ca@r47be r47cb@r47c0 r47cc@r47c2) ((lambda (r47d7@export-env r47d8@export-subst r47d9@visit-code r47da@invoke-code r47db@inv* r47dc@vis* r47dd@imp* r47de@ver r47df@name r47e0@id) (values r47df@name r47da@invoke-code r47d8@export-subst r47d7@export-env)) r47cc@r47c2 r47cb@r47c0 r47ca@r47be r47c9@r47bc r47c8@r47ba r47c7@r47b8 r47c6@r47b6 r47c5@r47b4 r47c4@r47b2 r47c3@r47b0))))) (set! r2fce@rev-map-append (lambda (r47eb@f r47ec@ls r47ed@ac) (if (null? r47ec@ls) r47ed@ac (r2fce@rev-map-append r47eb@f (cdr r47ec@ls) (cons (r47eb@f (car r47ec@ls)) r47ed@ac))))) (set! r2fd0@build-exports (lambda (r47f1@lex*+loc* r47f2@init*) (r2c53@r2bc2@build-sequence '#f (cons (r2c54@r2bc4@build-void) (r2fce@rev-map-append (lambda (r47f5@x) (list 'set! (cdr r47f5@x) (car r47f5@x))) r47f1@lex*+loc* r47f2@init*))))) (set! r2fd2@make-export-subst (lambda (r47f7@name* r47f8@id*) (map (lambda (r47fb@name r47fc@id) ((lambda (r47ff@label) (begin (if (not r47ff@label) (r2fe8@syntax-violation '#f '"cannot export unbound identifier" r47fc@id) (void)) (cons r47fb@name r47ff@label))) (r2d0e@id->label r47fc@id))) r47f7@name* r47f8@id*))) (set! r2fd4@make-export-env/macros (lambda (r4801@lex* r4802@loc* r4803@r) ((lambda (r4808@lookup) (begin (set! r4808@lookup (lambda (r4825@x) ((letrec ((r4827@f (lambda (r4829@x r482a@lex* r482b@loc*) (if (pair? r482a@lex*) (if (eq? r4829@x (car r482a@lex*)) (car r482b@loc*) (r4827@f r4829@x (cdr r482a@lex*) (cdr r482b@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) r4827@f) r4825@x r4801@lex* r4802@loc*))) ((letrec ((r4809@f (lambda (r480b@r r480c@env r480d@global* r480e@macro*) (if (null? r480b@r) (values r480c@env r480d@global* r480e@macro*) ((lambda (r4813@x) ((lambda (r4815@label r4816@b) ((lambda (r4819@t) (if (memv r4819@t '(lexical)) ((lambda (r481b@v) ((lambda (r481d@loc r481e@type) (r4809@f (cdr r480b@r) (cons (cons* r4815@label r481e@type r481d@loc) r480c@env) (cons (cons (r2e8b@lexical-var r481b@v) r481d@loc) r480d@global*) r480e@macro*)) (r4808@lookup (r2e8b@lexical-var r481b@v)) (if (r2e8d@lexical-mutable? r481b@v) 'mutable 'global))) (r2d18@binding-value r4816@b)) (if (memv r4819@t '(local-macro)) ((lambda (r4821@loc) (r4809@f (cdr r480b@r) (cons (cons* r4815@label 'global-macro r4821@loc) r480c@env) r480d@global* (cons (cons r4821@loc (r2d18@binding-value r4816@b)) r480e@macro*))) (gensym)) (if (memv r4819@t '(local-macro!)) ((lambda (r4823@loc) (r4809@f (cdr r480b@r) (cons (cons* r4815@label 'global-macro! r4823@loc) r480c@env) r480d@global* (cons (cons r4823@loc (r2d18@binding-value r4816@b)) r480e@macro*))) (gensym)) (if (memv r4819@t '($rtd $module)) (r4809@f (cdr r480b@r) (cons r4813@x r480c@env) r480d@global* r480e@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (r2d16@binding-type r4816@b) (r2d18@binding-value r4816@b))))))) (r2d16@binding-type r4816@b))) (car r4813@x) (cdr r4813@x))) (car r480b@r)))))) r4809@f) r4803@r '() '() '()))) '#f))) (set! r2fd6@generate-temporaries (lambda (r482f@ls) ((lambda (r4831@t) ((lambda (r4833@ls/false) (if r4833@ls/false (apply (lambda (r4835@ls) (map (lambda (r4837@x) (r2cbe@make-stx ((lambda (r4839@x) (if (or (symbol? r4839@x) (string? r4839@x)) (gensym r4839@x) (gensym 't))) (r2fee@syntax->datum r4837@x)) r2c70@top-mark* '() '())) r4835@ls)) r4833@ls/false) ((lambda (r483b@t) ((lambda (r483d@ls/false) (if r483d@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) r483d@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r483b@t))) (r2eff@syntax-dispatch r483b@t '_))) r4831@t))) (r2eff@syntax-dispatch r4831@t 'each-any))) r482f@ls))) (set! r2fd8@free-identifier=? (lambda (r483f@x r4840@y) (if (r2cf4@id? r483f@x) (if (r2cf4@id? r4840@y) (r2cfc@free-id=? r483f@x r4840@y) (assertion-violation 'free-identifier=? '"not an identifier" r4840@y)) (assertion-violation 'free-identifier=? '"not an identifier" r483f@x)))) (set! r2fda@bound-identifier=? (lambda (r4843@x r4844@y) (if (r2cf4@id? r4843@x) (if (r2cf4@id? r4844@y) (r2cfa@bound-id=? r4843@x r4844@y) (assertion-violation 'bound-identifier=? '"not an identifier" r4844@y)) (assertion-violation 'bound-identifier=? '"not an identifier" r4843@x)))) (set! r2fdc@make-source-condition (lambda (r4847@x) ((lambda (r4851@r484c r4853@r484e r4855@r484d r4858@r484b r485a@make-source-condition r485c@r4849 r485e@r484a r4860@source-condition? r4862@source-filename r4864@source-character) (begin (set! r4851@r484c (make-record-type-descriptor '&source-information r4caf@r49f6@&condition-rtd 'r484f '#f '#f '#((immutable file-name) (immutable character)))) (set! r4853@r484e '#f) (set! r4855@r484d (make-record-constructor-descriptor r4851@r484c r4cb0@r49f8@&condition-rcd r4853@r484e)) (set! r4858@r484b (record-predicate r4851@r484c)) (set! r485a@make-source-condition (record-constructor r4855@r484d)) (set! r485c@r4849 (record-accessor r4851@r484c '0)) (set! r485e@r484a (record-accessor r4851@r484c '1)) (set! r4860@source-condition? (condition-predicate r4851@r484c)) (set! r4862@source-filename (condition-accessor r4851@r484c r485c@r4849)) (set! r4864@source-character (condition-accessor r4851@r484c r485e@r484a)) (if (pair? r4847@x) (r485a@make-source-condition (car r4847@x) (cdr r4847@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! r2fde@extract-position-condition (lambda (r4865@x) (r2fdc@make-source-condition (r2fe0@expression-position r4865@x)))) (set! r2fe0@expression-position (lambda (r4867@x) (and (r2cbc@stx? r4867@x) ((lambda (r4869@x) (and (r2893@r27b2@annotation? r4869@x) (r2894@r27b4@annotation-source r4869@x))) (r2cc0@stx-expr r4867@x))))) (set! r2fe2@assertion-error (lambda (r486b@expr r486c@pos) (raise (condition (r4cdf@r4aba@make-assertion-violation) (r4cf1@r4aec@make-who-condition 'assert) (r4cb5@r4a4d@make-message-condition '"assertion failed") (r4ce7@r4ad1@make-irritants-condition (list r486b@expr)) (r2fdc@make-source-condition r486c@pos))))) (set! r2fe4@syntax-error (lambda (r486f@x . r4871@args) (begin (if (not (for-all string? r4871@args)) (assertion-violation 'syntax-error '"invalid argument" r4871@args) (void)) (raise (condition (r4cb5@r4a4d@make-message-condition (if (null? r4871@args) '"invalid syntax" (apply string-append r4871@args))) (r4d13@r4b48@make-syntax-violation (r2fee@syntax->datum r486f@x) '#f) (r2fde@extract-position-condition r486f@x)))))) (set! r2fe6@syntax-violation* (lambda (r4873@who r4874@msg r4875@form r4876@condition-object) (begin (if (not (string? r4874@msg)) (assertion-violation 'syntax-violation '"message is not a string" r4874@msg) (void)) ((lambda (r487b@who) (raise (condition (if r487b@who (r4cf1@r4aec@make-who-condition r487b@who) (condition)) (r4cb5@r4a4d@make-message-condition r4874@msg) r4876@condition-object (r2fde@extract-position-condition r4875@form)))) (if (or (string? r4873@who) (symbol? r4873@who)) r4873@who (if (not r4873@who) ((lambda (r487d@t) ((lambda (r487f@ls/false) (if (and r487f@ls/false (apply (lambda (r4881@id) (r2cf4@id? r4881@id)) r487f@ls/false)) (apply (lambda (r4883@id) (r2fee@syntax->datum r4883@id)) r487f@ls/false) ((lambda (r4885@t) ((lambda (r4887@ls/false) (if (and r4887@ls/false (apply (lambda (r4889@id r488a@rest) (r2cf4@id? r4889@id)) r4887@ls/false)) (apply (lambda (r488d@id r488e@rest) (r2fee@syntax->datum r488d@id)) r4887@ls/false) ((lambda (r4891@t) ((lambda (r4893@ls/false) (if r4893@ls/false (apply (lambda () '#f) r4893@ls/false) (r2fe8@syntax-violation '#f '"invalid syntax" r4891@t))) (r2eff@syntax-dispatch r4891@t '_))) r4885@t))) (r2eff@syntax-dispatch r4885@t '(any . any)))) r487d@t))) (r2eff@syntax-dispatch r487d@t 'any))) r4875@form) (assertion-violation 'syntax-violation '"invalid who argument" r4873@who))))))) (set! r2fe8@syntax-violation (lambda r48a3 ((lambda (r48a4) (if (= r48a4 '3) (apply (lambda (r4895@who r4896@msg r4897@form) (r2fe8@syntax-violation r4895@who r4896@msg r4897@form '#f)) r48a3) (if (= r48a4 '4) (apply (lambda (r489b@who r489c@msg r489d@form r489e@subform) (r2fe6@syntax-violation* r489b@who r489c@msg r489d@form (r4d13@r4b48@make-syntax-violation (r2fee@syntax->datum r489d@form) (r2fee@syntax->datum r489e@subform)))) r48a3) (error 'apply '"invalid arg count")))) (length r48a3)))) (set! r2fea@identifier? (lambda (r48a5@x) (r2cf4@id? r48a5@x))) (set! r2fec@datum->syntax (lambda (r48a7@id r48a8@datum) (if (r2cf4@id? r48a7@id) (r2cd2@datum->stx r48a7@id r48a8@datum) (assertion-violation 'datum->syntax '"not an identifier" r48a7@id)))) (set! r2fee@syntax->datum (lambda (r48ab@x) (r2d0a@stx->datum r48ab@x))) (set! r2ff0@compile-r6rs-top-level (lambda (r48ad@x*) (call-with-values (lambda () (r2f7a@top-level-expander r48ad@x*)) (lambda (r48b3@r48b0 r48b4@r48b2) ((lambda (r48b7@invoke-code r48b8@lib*) (lambda () (begin (for-each r2b18@r29b9@invoke-library r48b8@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (r28f2@r28aa@expanded->core r48b7@invoke-code)) (void)) (eval-core (r28f2@r28aa@expanded->core r48b7@invoke-code))))) r48b4@r48b2 r48b3@r48b0))))) (set! r2ff2@pre-compile-r6rs-top-level (lambda (r48bb@x*) (call-with-values (lambda () (r2f7a@top-level-expander r48bb@x*)) (lambda (r48c1@r48be r48c2@r48c0) ((lambda (r48c5@invoke-code r48c6@lib*) (begin (for-each r2b18@r29b9@invoke-library r48c6@lib*) (r289c@r27c4@compile-core (r28f2@r28aa@expanded->core r48c5@invoke-code)))) r48c2@r48c0 r48c1@r48be))))) (set! r2ff4@interaction-environment ((lambda (r48c9@the-env) (lambda () (or r48c9@the-env ((lambda (r48cb@lib r48cc@rib) (begin ((lambda (r48cf@subst) (begin (r2c99@set-rib-sym*! r48cc@rib (map car r48cf@subst)) (r2c9b@set-rib-mark**! r48cc@rib (map (lambda (r48d1@x) r2c70@top-mark*) r48cf@subst)) (r2c9d@set-rib-label*! r48cc@rib (map cdr r48cf@subst)))) (r2aed@r2963@library-subst r48cb@lib)) ((lambda (r48d3@env) (begin (set! r48c9@the-env r48d3@env) r48d3@env)) (r2fa6@make-interaction-env r48cc@rib '() '())))) (r2b11@r29ab@find-library-by-name '(mosh interaction)) (r2ca3@make-empty-rib))))) '#f)) (set! r2ff6@top-level-context (r289e@r27c8@make-parameter '#f)) (begin (set! r49e1@r2ff6@top-level-context r2ff6@top-level-context) (set! r49e0@r2ff4@interaction-environment r2ff4@interaction-environment) (set! r49df@r2ff2@pre-compile-r6rs-top-level r2ff2@pre-compile-r6rs-top-level) (set! r49de@r2ff0@compile-r6rs-top-level r2ff0@compile-r6rs-top-level) (set! r49dd@r2fee@syntax->datum r2fee@syntax->datum) (set! r49dc@r2fec@datum->syntax r2fec@datum->syntax) (set! r49db@r2fea@identifier? r2fea@identifier?) (set! r49da@r2fe8@syntax-violation r2fe8@syntax-violation) (set! r49d9@r2fe6@syntax-violation* r2fe6@syntax-violation*) (set! r49d8@r2fe4@syntax-error r2fe4@syntax-error) (set! r49d7@r2fe2@assertion-error r2fe2@assertion-error) (set! r49d6@r2fe0@expression-position r2fe0@expression-position) (set! r49d5@r2fde@extract-position-condition r2fde@extract-position-condition) (set! r49d4@r2fdc@make-source-condition r2fdc@make-source-condition) (set! r49d3@r2fda@bound-identifier=? r2fda@bound-identifier=?) (set! r49d2@r2fd8@free-identifier=? r2fd8@free-identifier=?) (set! r49d1@r2fd6@generate-temporaries r2fd6@generate-temporaries) (set! r49d0@r2fd4@make-export-env/macros r2fd4@make-export-env/macros) (set! r49cf@r2fd2@make-export-subst r2fd2@make-export-subst) (set! r49ce@r2fd0@build-exports r2fd0@build-exports) (set! r49cd@r2fce@rev-map-append r2fce@rev-map-append) (set! r49cc@r2fcc@boot-library-expand r2fcc@boot-library-expand) (set! r49cb@r2fca@library-expander r2fca@library-expander) (set! r49ca@r2fc8@eval r2fc8@eval) (set! r49c9@r2fc6@expand r2fc6@expand) (set! r49c8@r2fc4@scheme-report-environment r2fc4@scheme-report-environment) (set! r49c7@r2fc2@null-environment r2fc2@null-environment) (set! r49c6@r2fc0@environment r2fc0@environment) (set! r49c5@r2fbe@environment-symbols r2fbe@environment-symbols) (set! r49c4@r2fbc@environment? r2fbc@environment?) (set! r49c3@r2fba@parse-binding r2fba@parse-binding) (set! r49c2@r2fb8@environment-bindings r2fb8@environment-bindings) (set! r49c1@r2fb6@interaction-environment-symbols r2fb6@interaction-environment-symbols) (set! r49c0@r2fb4@rp r2fb4@rp) (set! r49bf@r2fb2@set-interaction-env-locs! r2fb2@set-interaction-env-locs!) (set! r49be@r2fb0@set-interaction-env-r! r2fb0@set-interaction-env-r!) (set! r49bd@r2fae@set-interaction-env-rib! r2fae@set-interaction-env-rib!) (set! r49bc@r2fac@interaction-env-locs r2fac@interaction-env-locs) (set! r49bb@r2faa@interaction-env-r r2faa@interaction-env-r) (set! r49ba@r2fa8@interaction-env-rib r2fa8@interaction-env-rib) (set! r49b9@r2fa6@make-interaction-env r2fa6@make-interaction-env) (set! r49b8@r2fa4@interaction-env? r2fa4@interaction-env?) (set! r49b7@r2fa1@r2f99 r2fa1@r2f99) (set! r49b6@r2f9f@r2f9a r2f9f@r2f9a) (set! r49b5@r2f9d@r2f98 r2f9d@r2f98) (set! r49b4@r2f97@rp r2f97@rp) (set! r49b3@r2f95@set-env-itc! r2f95@set-env-itc!) (set! r49b2@r2f93@set-env-labels! r2f93@set-env-labels!) (set! r49b1@r2f91@set-env-names! r2f91@set-env-names!) (set! r49b0@r2f8f@env-itc r2f8f@env-itc) (set! r49af@r2f8d@env-labels r2f8d@env-labels) (set! r49ae@r2f8b@env-names r2f8b@env-names) (set! r49ad@r2f89@make-env r2f89@make-env) (set! r49ac@r2f87@env? r2f87@env?) (set! r49ab@r2f84@r2f7c r2f84@r2f7c) (set! r49aa@r2f82@r2f7d r2f82@r2f7d) (set! r49a9@r2f80@r2f7b r2f80@r2f7b) (set! r49a8@r2f7a@top-level-expander r2f7a@top-level-expander) (set! r49a7@r2f78@parse-top-level-program r2f78@parse-top-level-program) (set! r49a6@r2f76@core-library-expander r2f76@core-library-expander) (set! r49a5@r2f74@library-body-expander r2f74@library-body-expander) (set! r49a4@r2f72@chi-interaction-expr r2f72@chi-interaction-expr) (set! r49a3@r2f70@chi-library-internal r2f70@chi-library-internal) (set! r49a2@r2f6e@imp-collector r2f6e@imp-collector) (set! r49a1@r2f6c@vis-collector r2f6c@vis-collector) (set! r49a0@r2f6a@inv-collector r2f6a@inv-collector) (set! r499f@r2f68@make-collector r2f68@make-collector) (set! r499e@r2f66@make-top-rib r2f66@make-top-rib) (set! r499d@r2f64@parse-import-spec* r2f64@parse-import-spec*) (set! r499c@r2f62@parse-library r2f62@parse-library) (set! r499b@r2f60@parse-library-name r2f60@parse-library-name) (set! r499a@r2f5e@parse-exports r2f5e@parse-exports) (set! r4999@r2f5c@expand-transformer r2f5c@expand-transformer) (set! r4998@r2f5a@chi-body* r2f5a@chi-body*) (set! r4997@r2f58@chi-internal-module r2f58@chi-internal-module) (set! r4996@r2f56@module-interface-exp-id* r2f56@module-interface-exp-id*) (set! r4995@r2f54@set-module-interface-exp-lab-vec! r2f54@set-module-interface-exp-lab-vec!) (set! r4994@r2f52@set-module-interface-exp-id-vec! r2f52@set-module-interface-exp-id-vec!) (set! r4993@r2f50@set-module-interface-first-mark! r2f50@set-module-interface-first-mark!) (set! r4992@r2f4e@module-interface-exp-lab-vec r2f4e@module-interface-exp-lab-vec) (set! r4991@r2f4c@module-interface-exp-id-vec r2f4c@module-interface-exp-id-vec) (set! r4990@r2f4a@module-interface-first-mark r2f4a@module-interface-first-mark) (set! r498f@r2f48@make-module-interface r2f48@make-module-interface) (set! r498e@r2f46@module-interface? r2f46@module-interface?) (set! r498d@r2f43@r2f3b r2f43@r2f3b) (set! r498c@r2f41@r2f3c r2f41@r2f3c) (set! r498b@r2f3f@r2f3a r2f3f@r2f3a) (set! r498a@r2f39@parse-module r2f39@parse-module) (set! r4989@r2f37@chi-internal r2f37@chi-internal) (set! r4988@r2f35@find-dups r2f35@find-dups) (set! r4987@r2f33@find-bound=? r2f33@find-bound=?) (set! r4986@r2f31@chi-rhs* r2f31@chi-rhs*) (set! r4985@r2f2f@expand-interaction-rhs*/init* r2f2f@expand-interaction-rhs*/init*) (set! r4984@r2f2d@chi-rhs r2f2d@chi-rhs) (set! r4983@r2f2b@chi-defun r2f2b@chi-defun) (set! r4982@r2f29@chi-lambda-clause* r2f29@chi-lambda-clause*) (set! r4981@r2f27@chi-lambda-clause r2f27@chi-lambda-clause) (set! r4980@r2f25@verify-formals r2f25@verify-formals) (set! r497f@r2f23@chi-set! r2f23@chi-set!) (set! r497e@r2f21@chi-expr r2f21@chi-expr) (set! r497d@r2f1f@chi-application r2f1f@chi-application) (set! r497c@r2f1d@chi-expr* r2f1d@chi-expr*) (set! r497b@r2f1b@chi-global-macro r2f1b@chi-global-macro) (set! r497a@r2f19@chi-local-macro r2f19@chi-local-macro) (set! r4979@r2f17@chi-macro r2f17@chi-macro) (set! r4978@r2f15@do-macro-call r2f15@do-macro-call) (set! r4977@r2f13@local-macro-transformer r2f13@local-macro-transformer) (set! r4976@r2f11@macro-transformer r2f11@macro-transformer) (set! r4975@r2f0f@symbol-macro r2f0f@symbol-macro) (set! r4974@r2f0d@core-macro-transformer r2f0d@core-macro-transformer) (set! r4973@r2f0b@syntax-transformer r2f0b@syntax-transformer) (set! r4972@r2f09@ellipsis-map r2f09@ellipsis-map) (set! r4971@r2f07@syntax-case-transformer r2f07@syntax-case-transformer) (set! r4970@r2f05@verify-literals r2f05@verify-literals) (set! r496f@r2f03@underscore? r2f03@underscore?) (set! r496e@r2f01@ellipsis? r2f01@ellipsis?) (set! r496d@r2eff@syntax-dispatch r2eff@syntax-dispatch) (set! r496c@r2efd@convert-pattern r2efd@convert-pattern) (set! r496b@r2efb@foreign-call-transformer r2efb@foreign-call-transformer) (set! r496a@r2ef9@parameterize-macro r2ef9@parameterize-macro) (set! r4969@r2ef7@incorrect-usage-macro r2ef7@incorrect-usage-macro) (set! r4968@r2ef5@define-condition-type-macro r2ef5@define-condition-type-macro) (set! r4967@r2ef3@define-record-type-macro r2ef3@define-record-type-macro) (set! r4966@r2ef1@define-struct-macro r2ef1@define-struct-macro) (set! r4965@r2eef@quasisyntax-macro r2eef@quasisyntax-macro) (set! r4964@r2eed@quasiquote-macro r2eed@quasiquote-macro) (set! r4963@r2eeb@syntax-rules-macro r2eeb@syntax-rules-macro) (set! r4962@r2ee9@include-into-macro r2ee9@include-into-macro) (set! r4961@r2ee7@include-macro r2ee7@include-macro) (set! r4960@r2ee5@do-include r2ee5@do-include) (set! r495f@r2ee3@cond-macro r2ee3@cond-macro) (set! r495e@r2ee1@and-macro r2ee1@and-macro) (set! r495d@r2edf@or-macro r2edf@or-macro) (set! r495c@r2edd@let*-macro r2edd@let*-macro) (set! r495b@r2edb@do-macro r2edb@do-macro) (set! r495a@r2ed9@identifier-syntax-macro r2ed9@identifier-syntax-macro) (set! r4959@r2ed7@endianness-macro r2ed7@endianness-macro) (set! r4958@r2ed5@assert-macro r2ed5@assert-macro) (set! r4957@r2ed3@delay-macro r2ed3@delay-macro) (set! r4956@r2ed1@time-macro r2ed1@time-macro) (set! r4955@r2ecf@define-enumeration-macro r2ecf@define-enumeration-macro) (set! r4954@r2ecd@guard-macro r2ecd@guard-macro) (set! r4953@r2ecb@trace-letrec-syntax-macro r2ecb@trace-letrec-syntax-macro) (set! r4952@r2ec9@trace-let-syntax-macro r2ec9@trace-let-syntax-macro) (set! r4951@r2ec7@trace-let/rec-syntax r2ec7@trace-let/rec-syntax) (set! r4950@r2ec5@trace-define-syntax-macro r2ec5@trace-define-syntax-macro) (set! r494f@r2ec3@trace-define-macro r2ec3@trace-define-macro) (set! r494e@r2ec1@trace-lambda-macro r2ec1@trace-lambda-macro) (set! r494d@r2ebf@let*-values-macro r2ebf@let*-values-macro) (set! r494c@r2ebd@let-values-macro r2ebd@let-values-macro) (set! r494b@r2ebb@let-macro r2ebb@let-macro) (set! r494a@r2eb9@invalid-fmls-error r2eb9@invalid-fmls-error) (set! r4949@r2eb7@with-syntax-macro r2eb7@with-syntax-macro) (set! r4948@r2eb5@bless r2eb5@bless) (set! r4947@r2eb3@lambda-transformer r2eb3@lambda-transformer) (set! r4946@r2eb1@case-lambda-transformer r2eb1@case-lambda-transformer) (set! r4945@r2eaf@quote-transformer r2eaf@quote-transformer) (set! r4944@r2ead@case-macro r2ead@case-macro) (set! r4943@r2eab@or-transformer r2eab@or-transformer) (set! r4942@r2ea9@and-transformer r2ea9@and-transformer) (set! r4941@r2ea7@if-transformer r2ea7@if-transformer) (set! r4940@r2ea5@unless-macro r2ea5@unless-macro) (set! r493f@r2ea3@when-macro r2ea3@when-macro) (set! r493e@r2ea1@record-constructor-descriptor-transformer r2ea1@record-constructor-descriptor-transformer) (set! r493d@r2e9f@record-type-descriptor-transformer r2e9f@record-type-descriptor-transformer) (set! r493c@r2e9d@type-descriptor-transformer r2e9d@type-descriptor-transformer) (set! r493b@r2e9b@fluid-let-syntax-transformer r2e9b@fluid-let-syntax-transformer) (set! r493a@r2e99@letrec*-transformer r2e99@letrec*-transformer) (set! r4939@r2e97@letrec-transformer r2e97@letrec-transformer) (set! r4938@r2e95@letrec-helper r2e95@letrec-helper) (set! r4937@r2e93@add-lexicals r2e93@add-lexicals) (set! r4936@r2e91@add-lexical r2e91@add-lexical) (set! r4935@r2e8f@set-lexical-mutable! r2e8f@set-lexical-mutable!) (set! r4934@r2e8d@lexical-mutable? r2e8d@lexical-mutable?) (set! r4933@r2e8b@lexical-var r2e8b@lexical-var) (set! r4932@r2e89@scheme-stx r2e89@scheme-stx) (set! r4931@r2e87@scheme-stx-hashtable r2e87@scheme-stx-hashtable) (set! r4930@r2e85@parse-define-syntax r2e85@parse-define-syntax) (set! r492f@r2e83@parse-define r2e83@parse-define) (set! r492e@r2d32@make-eval-transformer r2d32@make-eval-transformer) (set! r492d@r2d30@variable-transformer-procedure r2d30@variable-transformer-procedure) (set! r492c@r2d2e@variable-transformer? r2d2e@variable-transformer?) (set! r492b@r2d2c@make-variable-transformer r2d2c@make-variable-transformer) (set! r492a@r2d2a@sanitize-binding r2d2a@sanitize-binding) (set! r4929@r2d1c@syntax-type r2d1c@syntax-type) (set! r4928@r2d1a@raise-unbound-error r2d1a@raise-unbound-error) (set! r4927@r2d18@binding-value r2d18@binding-value) (set! r4926@r2d16@binding-type r2d16@binding-type) (set! r4925@r2d14@make-binding r2d14@make-binding) (set! r4924@r2d12@label->binding r2d12@label->binding) (set! r4923@r2d10@id->real-label r2d10@id->real-label) (set! r4922@r2d0e@id->label r2d0e@id->label) (set! r4921@r2d0c@same-marks*? r2d0c@same-marks*?) (set! r4920@r2d0a@stx->datum r2d0a@stx->datum) (set! r491f@r2d08@strip r2d08@strip) (set! r491e@r2d06@strip-annotations r2d06@strip-annotations) (set! r491d@r2d04@self-evaluating? r2d04@self-evaluating?) (set! r491c@r2d02@bound-id-member? r2d02@bound-id-member?) (set! r491b@r2d00@distinct-bound-ids? r2d00@distinct-bound-ids?) (set! r491a@r2cfe@valid-bound-ids? r2cfe@valid-bound-ids?) (set! r4919@r2cfc@free-id=? r2cfc@free-id=?) (set! r4918@r2cfa@bound-id=? r2cfa@bound-id=?) (set! r4917@r2cf8@same-marks? r2cf8@same-marks?) (set! r4916@r2cf6@id->sym r2cf6@id->sym) (set! r4915@r2cf4@id? r2cf4@id?) (set! r4914@r2cf2@syntax->list r2cf2@syntax->list) (set! r4913@r2cf0@syntax-cdr r2cf0@syntax-cdr) (set! r4912@r2cee@syntax-car r2cee@syntax-car) (set! r4911@r2cec@syntax-list? r2cec@syntax-list?) (set! r4910@r2cea@syntax-null? r2cea@syntax-null?) (set! r490f@r2ce8@syntax-vector? r2ce8@syntax-vector?) (set! r490e@r2ce6@syntax-pair? r2ce6@syntax-pair?) (set! r490d@r2ce4@syntax-vector->list r2ce4@syntax-vector->list) (set! r490c@r2ce2@syntax-kind? r2ce2@syntax-kind?) (set! r490b@r2ce0@add-subst r2ce0@add-subst) (set! r490a@r2cde@add-mark r2cde@add-mark) (set! r4909@r2cdc@mkstx r2cdc@mkstx) (set! r4908@r2cda@join-wraps r2cda@join-wraps) (set! r4907@r2cd8@anti-mark? r2cd8@anti-mark?) (set! r4906@r2cd6@anti-mark r2cd6@anti-mark) (set! r4905@r2cd4@gen-mark r2cd4@gen-mark) (set! r4904@r2cd2@datum->stx r2cd2@datum->stx) (set! r4903@r2cd0@rp r2cd0@rp) (set! r4902@r2cce@set-stx-ae*! r2cce@set-stx-ae*!) (set! r4901@r2ccc@set-stx-subst*! r2ccc@set-stx-subst*!) (set! r4900@r2cca@set-stx-mark*! r2cca@set-stx-mark*!) (set! r48ff@r2cc8@set-stx-expr! r2cc8@set-stx-expr!) (set! r48fe@r2cc6@stx-ae* r2cc6@stx-ae*) (set! r48fd@r2cc4@stx-subst* r2cc4@stx-subst*) (set! r48fc@r2cc2@stx-mark* r2cc2@stx-mark*) (set! r48fb@r2cc0@stx-expr r2cc0@stx-expr) (set! r48fa@r2cbe@make-stx r2cbe@make-stx) (set! r48f9@r2cbc@stx? r2cbc@stx?) (set! r48f8@r2cb9@r2cb1 r2cb9@r2cb1) (set! r48f7@r2cb7@r2cb2 r2cb7@r2cb2) (set! r48f6@r2cb5@r2cb0 r2cb5@r2cb0) (set! r48f5@r2caf@make-full-rib r2caf@make-full-rib) (set! r48f4@r2cad@unseal-rib! r2cad@unseal-rib!) (set! r48f3@r2cab@seal-rib! r2cab@seal-rib!) (set! r48f2@r2ca9@make-rib-map r2ca9@make-rib-map) (set! r48f1@r2ca7@extend-rib/nc! r2ca7@extend-rib/nc!) (set! r48f0@r2ca5@extend-rib! r2ca5@extend-rib!) (set! r48ef@r2ca3@make-empty-rib r2ca3@make-empty-rib) (set! r48ee@r2ca1@set-rib-cache! r2ca1@set-rib-cache!) (set! r48ed@r2c9f@set-rib-sealed/freq! r2c9f@set-rib-sealed/freq!) (set! r48ec@r2c9d@set-rib-label*! r2c9d@set-rib-label*!) (set! r48eb@r2c9b@set-rib-mark**! r2c9b@set-rib-mark**!) (set! r48ea@r2c99@set-rib-sym*! r2c99@set-rib-sym*!) (set! r48e9@r2c97@rib-cache r2c97@rib-cache) (set! r48e8@r2c95@rib-sealed/freq r2c95@rib-sealed/freq) (set! r48e7@r2c93@rib-label* r2c93@rib-label*) (set! r48e6@r2c91@rib-mark** r2c91@rib-mark**) (set! r48e5@r2c8f@rib-sym* r2c8f@rib-sym*) (set! r48e4@r2c8d@make-rib r2c8d@make-rib) (set! r48e3@r2c8b@rib? r2c8b@rib?) (set! r48e2@r2c88@r2c80 r2c88@r2c80) (set! r48e1@r2c86@r2c81 r2c86@r2c81) (set! r48e0@r2c84@r2c7f r2c84@r2c7f) (set! r48df@r2c7e@gen-define-label r2c7e@gen-define-label) (set! r48de@r2c7c@gen-define-label+loc r2c7c@gen-define-label+loc) (set! r48dd@r2c7a@gen-top-level-label r2c7a@gen-top-level-label) (set! r48dc@r2c78@gen-label r2c78@gen-label) (set! r48db@r2c76@gen-global r2c76@gen-global) (set! r48da@r2c74@gen-lexical r2c74@gen-lexical) (set! r48d9@r2c72@top-marked? r2c72@top-marked?) (set! r48d8@r2c70@top-mark* r2c70@top-mark*) (set! r48d7@r2c6b@set-union r2c6b@set-union) (set! r48d6@r2c69@set-cons r2c69@set-cons) (set! r48d5@r2c67@file-options-macro r2c67@file-options-macro) (r2b0e@r29a5@current-library-expander r2fca@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (r49eb@r49e6 r49ed@r49e8 r49ef@r49e7 r49f2@&condition? r49f4@make-&condition r49f6@&condition-rtd r49f8@&condition-rcd r4a44@r4a3f r4a46@r4a41 r4a48@r4a40 r4a4b@p? r4a4d@make-message-condition r4a4f@r4a3e r4a51@message-condition? r4a53@condition-message r4a55@&message-rtd r4a57@&message-rcd r4a5d@r4a58 r4a5f@r4a5a r4a61@r4a59 r4a64@p? r4a66@make-warning r4a68@warning? r4a6a@&warning-rtd r4a6c@&warning-rcd r4a72@r4a6d r4a74@r4a6f r4a76@r4a6e r4a79@p? r4a7b@make-serious-condition r4a7d@serious-condition? r4a7f@&serious-rtd r4a81@&serious-rcd r4a87@r4a82 r4a89@r4a84 r4a8b@r4a83 r4a8e@p? r4a90@make-error r4a92@error? r4a94@&error-rtd r4a96@&error-rcd r4a9c@r4a97 r4a9e@r4a99 r4aa0@r4a98 r4aa3@p? r4aa5@make-violation r4aa7@violation? r4aa9@&violation-rtd r4aab@&violation-rcd r4ab1@r4aac r4ab3@r4aae r4ab5@r4aad r4ab8@p? r4aba@make-assertion-violation r4abc@assertion-violation? r4abe@&assertion-rtd r4ac0@&assertion-rcd r4ac8@r4ac3 r4aca@r4ac5 r4acc@r4ac4 r4acf@p? r4ad1@make-irritants-condition r4ad3@r4ac2 r4ad5@irritants-condition? r4ad7@condition-irritants r4ad9@&irritants-rtd r4adb@&irritants-rcd r4ae3@r4ade r4ae5@r4ae0 r4ae7@r4adf r4aea@p? r4aec@make-who-condition r4aee@r4add r4af0@who-condition? r4af2@condition-who r4af4@&who-rtd r4af6@&who-rcd r4afc@r4af7 r4afe@r4af9 r4b00@r4af8 r4b03@p? r4b05@make-non-continuable-violation r4b07@non-continuable-violation? r4b09@&non-continuable-rtd r4b0b@&non-continuable-rcd r4b11@r4b0c r4b13@r4b0e r4b15@r4b0d r4b18@p? r4b1a@make-implementation-restriction-violation r4b1c@implementation-restriction-violation? r4b1e@&implementation-restriction-rtd r4b20@&implementation-restriction-rcd r4b26@r4b21 r4b28@r4b23 r4b2a@r4b22 r4b2d@p? r4b2f@make-lexical-violation r4b31@lexical-violation? r4b33@&lexical-rtd r4b35@&lexical-rcd r4b3f@r4b3a r4b41@r4b3c r4b43@r4b3b r4b46@p? r4b48@make-syntax-violation r4b4a@r4b37 r4b4c@r4b39 r4b4e@syntax-violation? r4b50@syntax-violation-form r4b52@syntax-violation-subform r4b54@&syntax-rtd r4b56@&syntax-rcd r4b5c@r4b57 r4b5e@r4b59 r4b60@r4b58 r4b63@p? r4b65@make-undefined-violation r4b67@undefined-violation? r4b69@&undefined-rtd r4b6b@&undefined-rcd r4b71@r4b6c r4b73@r4b6e r4b75@r4b6d r4b78@p? r4b7a@make-i/o-error r4b7c@i/o-error? r4b7e@&i/o-rtd r4b80@&i/o-rcd r4b86@r4b81 r4b88@r4b83 r4b8a@r4b82 r4b8d@p? r4b8f@make-i/o-read-error r4b91@i/o-read-error? r4b93@&i/o-read-rtd r4b95@&i/o-read-rcd r4b9b@r4b96 r4b9d@r4b98 r4b9f@r4b97 r4ba2@p? r4ba4@make-i/o-write-error r4ba6@i/o-write-error? r4ba8@&i/o-write-rtd r4baa@&i/o-write-rcd r4bb2@r4bad r4bb4@r4baf r4bb6@r4bae r4bb9@p? r4bbb@make-i/o-invalid-position-error r4bbd@r4bac r4bbf@i/o-invalid-position-error? r4bc1@i/o-error-position r4bc3@&i/o-invalid-position-rtd r4bc5@&i/o-invalid-position-rcd r4bcd@r4bc8 r4bcf@r4bca r4bd1@r4bc9 r4bd4@p? r4bd6@make-i/o-filename-error r4bd8@r4bc7 r4bda@i/o-filename-error? r4bdc@i/o-error-filename r4bde@&i/o-filename-rtd r4be0@&i/o-filename-rcd r4be6@r4be1 r4be8@r4be3 r4bea@r4be2 r4bed@p? r4bef@make-i/o-file-protection-error r4bf1@i/o-file-protection-error? r4bf3@&i/o-file-protection-rtd r4bf5@&i/o-file-protection-rcd r4bfb@r4bf6 r4bfd@r4bf8 r4bff@r4bf7 r4c02@p? r4c04@make-i/o-file-is-read-only-error r4c06@i/o-file-is-read-only-error? r4c08@&i/o-file-is-read-only-rtd r4c0a@&i/o-file-is-read-only-rcd r4c10@r4c0b r4c12@r4c0d r4c14@r4c0c r4c17@p? r4c19@make-i/o-file-already-exists-error r4c1b@i/o-file-already-exists-error? r4c1d@&i/o-file-already-exists-rtd r4c1f@&i/o-file-already-exists-rcd r4c25@r4c20 r4c27@r4c22 r4c29@r4c21 r4c2c@p? r4c2e@make-i/o-file-does-not-exist-error r4c30@i/o-file-does-not-exist-error? r4c32@&i/o-file-does-not-exist-rtd r4c34@&i/o-file-does-not-exist-rcd r4c3c@r4c37 r4c3e@r4c39 r4c40@r4c38 r4c43@p? r4c45@make-i/o-port-error r4c47@r4c36 r4c49@i/o-port-error? r4c4b@i/o-error-port r4c4d@&i/o-port-rtd r4c4f@&i/o-port-rcd r4c55@r4c50 r4c57@r4c52 r4c59@r4c51 r4c5c@p? r4c5e@make-i/o-decoding-error r4c60@i/o-decoding-error? r4c62@&i/o-decoding-rtd r4c64@&i/o-decoding-rcd r4c6c@r4c67 r4c6e@r4c69 r4c70@r4c68 r4c73@p? r4c75@make-i/o-encoding-error r4c77@r4c66 r4c79@i/o-encoding-error? r4c7b@i/o-encoding-error-char r4c7d@&i/o-encoding-rtd r4c7f@&i/o-encoding-rcd r4c85@r4c80 r4c87@r4c82 r4c89@r4c81 r4c8c@p? r4c8e@make-no-infinities-violation r4c90@no-infinities-violation? r4c92@&no-infinities-rtd r4c94@&no-infinities-rcd r4c9a@r4c95 r4c9c@r4c97 r4c9e@r4c96 r4ca1@p? r4ca3@make-no-nans-violation r4ca5@no-nans-violation? r4ca7@&no-nans-rtd r4ca9@&no-nans-rcd) (begin (set! r49eb@r49e6 (make-record-type-descriptor '&condition '#f 'r49e9 '#f '#f '#())) (set! r49ed@r49e8 '#f) (set! r49ef@r49e7 (make-record-constructor-descriptor r49eb@r49e6 '#f r49ed@r49e8)) (set! r49f2@&condition? (record-predicate r49eb@r49e6)) (set! r49f4@make-&condition (record-constructor r49ef@r49e7)) (set! r49f6@&condition-rtd r49eb@r49e6) (set! r49f8@&condition-rcd r49ef@r49e7) (set! r4a44@r4a3f (make-record-type-descriptor '&message r49eb@r49e6 'r4a42 '#f '#f '#((immutable message)))) (set! r4a46@r4a41 '#f) (set! r4a48@r4a40 (make-record-constructor-descriptor r4a44@r4a3f r49ef@r49e7 r4a46@r4a41)) (set! r4a4b@p? (record-predicate r4a44@r4a3f)) (set! r4a4d@make-message-condition (record-constructor r4a48@r4a40)) (set! r4a4f@r4a3e (record-accessor r4a44@r4a3f '0)) (set! r4a51@message-condition? (condition-predicate r4a44@r4a3f)) (set! r4a53@condition-message (condition-accessor r4a44@r4a3f r4a4f@r4a3e)) (set! r4a55@&message-rtd r4a44@r4a3f) (set! r4a57@&message-rcd r4a48@r4a40) (set! r4a5d@r4a58 (make-record-type-descriptor '&warning r49eb@r49e6 'r4a5b '#f '#f '#())) (set! r4a5f@r4a5a '#f) (set! r4a61@r4a59 (make-record-constructor-descriptor r4a5d@r4a58 r49ef@r49e7 r4a5f@r4a5a)) (set! r4a64@p? (record-predicate r4a5d@r4a58)) (set! r4a66@make-warning (record-constructor r4a61@r4a59)) (set! r4a68@warning? (condition-predicate r4a5d@r4a58)) (set! r4a6a@&warning-rtd r4a5d@r4a58) (set! r4a6c@&warning-rcd r4a61@r4a59) (set! r4a72@r4a6d (make-record-type-descriptor '&serious r49eb@r49e6 'r4a70 '#f '#f '#())) (set! r4a74@r4a6f '#f) (set! r4a76@r4a6e (make-record-constructor-descriptor r4a72@r4a6d r49ef@r49e7 r4a74@r4a6f)) (set! r4a79@p? (record-predicate r4a72@r4a6d)) (set! r4a7b@make-serious-condition (record-constructor r4a76@r4a6e)) (set! r4a7d@serious-condition? (condition-predicate r4a72@r4a6d)) (set! r4a7f@&serious-rtd r4a72@r4a6d) (set! r4a81@&serious-rcd r4a76@r4a6e) (set! r4a87@r4a82 (make-record-type-descriptor '&error r4a72@r4a6d 'r4a85 '#f '#f '#())) (set! r4a89@r4a84 '#f) (set! r4a8b@r4a83 (make-record-constructor-descriptor r4a87@r4a82 r4a76@r4a6e r4a89@r4a84)) (set! r4a8e@p? (record-predicate r4a87@r4a82)) (set! r4a90@make-error (record-constructor r4a8b@r4a83)) (set! r4a92@error? (condition-predicate r4a87@r4a82)) (set! r4a94@&error-rtd r4a87@r4a82) (set! r4a96@&error-rcd r4a8b@r4a83) (set! r4a9c@r4a97 (make-record-type-descriptor '&violation r4a72@r4a6d 'r4a9a '#f '#f '#())) (set! r4a9e@r4a99 '#f) (set! r4aa0@r4a98 (make-record-constructor-descriptor r4a9c@r4a97 r4a76@r4a6e r4a9e@r4a99)) (set! r4aa3@p? (record-predicate r4a9c@r4a97)) (set! r4aa5@make-violation (record-constructor r4aa0@r4a98)) (set! r4aa7@violation? (condition-predicate r4a9c@r4a97)) (set! r4aa9@&violation-rtd r4a9c@r4a97) (set! r4aab@&violation-rcd r4aa0@r4a98) (set! r4ab1@r4aac (make-record-type-descriptor '&assertion r4a9c@r4a97 'r4aaf '#f '#f '#())) (set! r4ab3@r4aae '#f) (set! r4ab5@r4aad (make-record-constructor-descriptor r4ab1@r4aac r4aa0@r4a98 r4ab3@r4aae)) (set! r4ab8@p? (record-predicate r4ab1@r4aac)) (set! r4aba@make-assertion-violation (record-constructor r4ab5@r4aad)) (set! r4abc@assertion-violation? (condition-predicate r4ab1@r4aac)) (set! r4abe@&assertion-rtd r4ab1@r4aac) (set! r4ac0@&assertion-rcd r4ab5@r4aad) (set! r4ac8@r4ac3 (make-record-type-descriptor '&irritants r49eb@r49e6 'r4ac6 '#f '#f '#((immutable irritants)))) (set! r4aca@r4ac5 '#f) (set! r4acc@r4ac4 (make-record-constructor-descriptor r4ac8@r4ac3 r49ef@r49e7 r4aca@r4ac5)) (set! r4acf@p? (record-predicate r4ac8@r4ac3)) (set! r4ad1@make-irritants-condition (record-constructor r4acc@r4ac4)) (set! r4ad3@r4ac2 (record-accessor r4ac8@r4ac3 '0)) (set! r4ad5@irritants-condition? (condition-predicate r4ac8@r4ac3)) (set! r4ad7@condition-irritants (condition-accessor r4ac8@r4ac3 r4ad3@r4ac2)) (set! r4ad9@&irritants-rtd r4ac8@r4ac3) (set! r4adb@&irritants-rcd r4acc@r4ac4) (set! r4ae3@r4ade (make-record-type-descriptor '&who r49eb@r49e6 'r4ae1 '#f '#f '#((immutable who)))) (set! r4ae5@r4ae0 '#f) (set! r4ae7@r4adf (make-record-constructor-descriptor r4ae3@r4ade r49ef@r49e7 r4ae5@r4ae0)) (set! r4aea@p? (record-predicate r4ae3@r4ade)) (set! r4aec@make-who-condition (record-constructor r4ae7@r4adf)) (set! r4aee@r4add (record-accessor r4ae3@r4ade '0)) (set! r4af0@who-condition? (condition-predicate r4ae3@r4ade)) (set! r4af2@condition-who (condition-accessor r4ae3@r4ade r4aee@r4add)) (set! r4af4@&who-rtd r4ae3@r4ade) (set! r4af6@&who-rcd r4ae7@r4adf) (set! r4afc@r4af7 (make-record-type-descriptor '&non-continuable r4a9c@r4a97 'r4afa '#f '#f '#())) (set! r4afe@r4af9 '#f) (set! r4b00@r4af8 (make-record-constructor-descriptor r4afc@r4af7 r4aa0@r4a98 r4afe@r4af9)) (set! r4b03@p? (record-predicate r4afc@r4af7)) (set! r4b05@make-non-continuable-violation (record-constructor r4b00@r4af8)) (set! r4b07@non-continuable-violation? (condition-predicate r4afc@r4af7)) (set! r4b09@&non-continuable-rtd r4afc@r4af7) (set! r4b0b@&non-continuable-rcd r4b00@r4af8) (set! r4b11@r4b0c (make-record-type-descriptor '&implementation-restriction r4a9c@r4a97 'r4b0f '#f '#f '#())) (set! r4b13@r4b0e '#f) (set! r4b15@r4b0d (make-record-constructor-descriptor r4b11@r4b0c r4aa0@r4a98 r4b13@r4b0e)) (set! r4b18@p? (record-predicate r4b11@r4b0c)) (set! r4b1a@make-implementation-restriction-violation (record-constructor r4b15@r4b0d)) (set! r4b1c@implementation-restriction-violation? (condition-predicate r4b11@r4b0c)) (set! r4b1e@&implementation-restriction-rtd r4b11@r4b0c) (set! r4b20@&implementation-restriction-rcd r4b15@r4b0d) (set! r4b26@r4b21 (make-record-type-descriptor '&lexical r4a9c@r4a97 'r4b24 '#f '#f '#())) (set! r4b28@r4b23 '#f) (set! r4b2a@r4b22 (make-record-constructor-descriptor r4b26@r4b21 r4aa0@r4a98 r4b28@r4b23)) (set! r4b2d@p? (record-predicate r4b26@r4b21)) (set! r4b2f@make-lexical-violation (record-constructor r4b2a@r4b22)) (set! r4b31@lexical-violation? (condition-predicate r4b26@r4b21)) (set! r4b33@&lexical-rtd r4b26@r4b21) (set! r4b35@&lexical-rcd r4b2a@r4b22) (set! r4b3f@r4b3a (make-record-type-descriptor '&syntax r4a9c@r4a97 'r4b3d '#f '#f '#((immutable form) (immutable subform)))) (set! r4b41@r4b3c '#f) (set! r4b43@r4b3b (make-record-constructor-descriptor r4b3f@r4b3a r4aa0@r4a98 r4b41@r4b3c)) (set! r4b46@p? (record-predicate r4b3f@r4b3a)) (set! r4b48@make-syntax-violation (record-constructor r4b43@r4b3b)) (set! r4b4a@r4b37 (record-accessor r4b3f@r4b3a '0)) (set! r4b4c@r4b39 (record-accessor r4b3f@r4b3a '1)) (set! r4b4e@syntax-violation? (condition-predicate r4b3f@r4b3a)) (set! r4b50@syntax-violation-form (condition-accessor r4b3f@r4b3a r4b4a@r4b37)) (set! r4b52@syntax-violation-subform (condition-accessor r4b3f@r4b3a r4b4c@r4b39)) (set! r4b54@&syntax-rtd r4b3f@r4b3a) (set! r4b56@&syntax-rcd r4b43@r4b3b) (set! r4b5c@r4b57 (make-record-type-descriptor '&undefined r4a9c@r4a97 'r4b5a '#f '#f '#())) (set! r4b5e@r4b59 '#f) (set! r4b60@r4b58 (make-record-constructor-descriptor r4b5c@r4b57 r4aa0@r4a98 r4b5e@r4b59)) (set! r4b63@p? (record-predicate r4b5c@r4b57)) (set! r4b65@make-undefined-violation (record-constructor r4b60@r4b58)) (set! r4b67@undefined-violation? (condition-predicate r4b5c@r4b57)) (set! r4b69@&undefined-rtd r4b5c@r4b57) (set! r4b6b@&undefined-rcd r4b60@r4b58) (set! r4b71@r4b6c (make-record-type-descriptor '&i/o r4a87@r4a82 'r4b6f '#f '#f '#())) (set! r4b73@r4b6e '#f) (set! r4b75@r4b6d (make-record-constructor-descriptor r4b71@r4b6c r4a8b@r4a83 r4b73@r4b6e)) (set! r4b78@p? (record-predicate r4b71@r4b6c)) (set! r4b7a@make-i/o-error (record-constructor r4b75@r4b6d)) (set! r4b7c@i/o-error? (condition-predicate r4b71@r4b6c)) (set! r4b7e@&i/o-rtd r4b71@r4b6c) (set! r4b80@&i/o-rcd r4b75@r4b6d) (set! r4b86@r4b81 (make-record-type-descriptor '&i/o-read r4b71@r4b6c 'r4b84 '#f '#f '#())) (set! r4b88@r4b83 '#f) (set! r4b8a@r4b82 (make-record-constructor-descriptor r4b86@r4b81 r4b75@r4b6d r4b88@r4b83)) (set! r4b8d@p? (record-predicate r4b86@r4b81)) (set! r4b8f@make-i/o-read-error (record-constructor r4b8a@r4b82)) (set! r4b91@i/o-read-error? (condition-predicate r4b86@r4b81)) (set! r4b93@&i/o-read-rtd r4b86@r4b81) (set! r4b95@&i/o-read-rcd r4b8a@r4b82) (set! r4b9b@r4b96 (make-record-type-descriptor '&i/o-write r4b71@r4b6c 'r4b99 '#f '#f '#())) (set! r4b9d@r4b98 '#f) (set! r4b9f@r4b97 (make-record-constructor-descriptor r4b9b@r4b96 r4b75@r4b6d r4b9d@r4b98)) (set! r4ba2@p? (record-predicate r4b9b@r4b96)) (set! r4ba4@make-i/o-write-error (record-constructor r4b9f@r4b97)) (set! r4ba6@i/o-write-error? (condition-predicate r4b9b@r4b96)) (set! r4ba8@&i/o-write-rtd r4b9b@r4b96) (set! r4baa@&i/o-write-rcd r4b9f@r4b97) (set! r4bb2@r4bad (make-record-type-descriptor '&i/o-invalid-position r4b71@r4b6c 'r4bb0 '#f '#f '#((immutable position)))) (set! r4bb4@r4baf '#f) (set! r4bb6@r4bae (make-record-constructor-descriptor r4bb2@r4bad r4b75@r4b6d r4bb4@r4baf)) (set! r4bb9@p? (record-predicate r4bb2@r4bad)) (set! r4bbb@make-i/o-invalid-position-error (record-constructor r4bb6@r4bae)) (set! r4bbd@r4bac (record-accessor r4bb2@r4bad '0)) (set! r4bbf@i/o-invalid-position-error? (condition-predicate r4bb2@r4bad)) (set! r4bc1@i/o-error-position (condition-accessor r4bb2@r4bad r4bbd@r4bac)) (set! r4bc3@&i/o-invalid-position-rtd r4bb2@r4bad) (set! r4bc5@&i/o-invalid-position-rcd r4bb6@r4bae) (set! r4bcd@r4bc8 (make-record-type-descriptor '&i/o-filename r4b71@r4b6c 'r4bcb '#f '#f '#((immutable filename)))) (set! r4bcf@r4bca '#f) (set! r4bd1@r4bc9 (make-record-constructor-descriptor r4bcd@r4bc8 r4b75@r4b6d r4bcf@r4bca)) (set! r4bd4@p? (record-predicate r4bcd@r4bc8)) (set! r4bd6@make-i/o-filename-error (record-constructor r4bd1@r4bc9)) (set! r4bd8@r4bc7 (record-accessor r4bcd@r4bc8 '0)) (set! r4bda@i/o-filename-error? (condition-predicate r4bcd@r4bc8)) (set! r4bdc@i/o-error-filename (condition-accessor r4bcd@r4bc8 r4bd8@r4bc7)) (set! r4bde@&i/o-filename-rtd r4bcd@r4bc8) (set! r4be0@&i/o-filename-rcd r4bd1@r4bc9) (set! r4be6@r4be1 (make-record-type-descriptor '&i/o-file-protection r4bcd@r4bc8 'r4be4 '#f '#f '#())) (set! r4be8@r4be3 '#f) (set! r4bea@r4be2 (make-record-constructor-descriptor r4be6@r4be1 r4bd1@r4bc9 r4be8@r4be3)) (set! r4bed@p? (record-predicate r4be6@r4be1)) (set! r4bef@make-i/o-file-protection-error (record-constructor r4bea@r4be2)) (set! r4bf1@i/o-file-protection-error? (condition-predicate r4be6@r4be1)) (set! r4bf3@&i/o-file-protection-rtd r4be6@r4be1) (set! r4bf5@&i/o-file-protection-rcd r4bea@r4be2) (set! r4bfb@r4bf6 (make-record-type-descriptor '&i/o-file-is-read-only r4be6@r4be1 'r4bf9 '#f '#f '#())) (set! r4bfd@r4bf8 '#f) (set! r4bff@r4bf7 (make-record-constructor-descriptor r4bfb@r4bf6 r4bea@r4be2 r4bfd@r4bf8)) (set! r4c02@p? (record-predicate r4bfb@r4bf6)) (set! r4c04@make-i/o-file-is-read-only-error (record-constructor r4bff@r4bf7)) (set! r4c06@i/o-file-is-read-only-error? (condition-predicate r4bfb@r4bf6)) (set! r4c08@&i/o-file-is-read-only-rtd r4bfb@r4bf6) (set! r4c0a@&i/o-file-is-read-only-rcd r4bff@r4bf7) (set! r4c10@r4c0b (make-record-type-descriptor '&i/o-file-already-exists r4bcd@r4bc8 'r4c0e '#f '#f '#())) (set! r4c12@r4c0d '#f) (set! r4c14@r4c0c (make-record-constructor-descriptor r4c10@r4c0b r4bd1@r4bc9 r4c12@r4c0d)) (set! r4c17@p? (record-predicate r4c10@r4c0b)) (set! r4c19@make-i/o-file-already-exists-error (record-constructor r4c14@r4c0c)) (set! r4c1b@i/o-file-already-exists-error? (condition-predicate r4c10@r4c0b)) (set! r4c1d@&i/o-file-already-exists-rtd r4c10@r4c0b) (set! r4c1f@&i/o-file-already-exists-rcd r4c14@r4c0c) (set! r4c25@r4c20 (make-record-type-descriptor '&i/o-file-does-not-exist r4bcd@r4bc8 'r4c23 '#f '#f '#())) (set! r4c27@r4c22 '#f) (set! r4c29@r4c21 (make-record-constructor-descriptor r4c25@r4c20 r4bd1@r4bc9 r4c27@r4c22)) (set! r4c2c@p? (record-predicate r4c25@r4c20)) (set! r4c2e@make-i/o-file-does-not-exist-error (record-constructor r4c29@r4c21)) (set! r4c30@i/o-file-does-not-exist-error? (condition-predicate r4c25@r4c20)) (set! r4c32@&i/o-file-does-not-exist-rtd r4c25@r4c20) (set! r4c34@&i/o-file-does-not-exist-rcd r4c29@r4c21) (set! r4c3c@r4c37 (make-record-type-descriptor '&i/o-port r4b71@r4b6c 'r4c3a '#f '#f '#((immutable port)))) (set! r4c3e@r4c39 '#f) (set! r4c40@r4c38 (make-record-constructor-descriptor r4c3c@r4c37 r4b75@r4b6d r4c3e@r4c39)) (set! r4c43@p? (record-predicate r4c3c@r4c37)) (set! r4c45@make-i/o-port-error (record-constructor r4c40@r4c38)) (set! r4c47@r4c36 (record-accessor r4c3c@r4c37 '0)) (set! r4c49@i/o-port-error? (condition-predicate r4c3c@r4c37)) (set! r4c4b@i/o-error-port (condition-accessor r4c3c@r4c37 r4c47@r4c36)) (set! r4c4d@&i/o-port-rtd r4c3c@r4c37) (set! r4c4f@&i/o-port-rcd r4c40@r4c38) (set! r4c55@r4c50 (make-record-type-descriptor '&i/o-decoding r4c3c@r4c37 'r4c53 '#f '#f '#())) (set! r4c57@r4c52 '#f) (set! r4c59@r4c51 (make-record-constructor-descriptor r4c55@r4c50 r4c40@r4c38 r4c57@r4c52)) (set! r4c5c@p? (record-predicate r4c55@r4c50)) (set! r4c5e@make-i/o-decoding-error (record-constructor r4c59@r4c51)) (set! r4c60@i/o-decoding-error? (condition-predicate r4c55@r4c50)) (set! r4c62@&i/o-decoding-rtd r4c55@r4c50) (set! r4c64@&i/o-decoding-rcd r4c59@r4c51) (set! r4c6c@r4c67 (make-record-type-descriptor '&i/o-encoding r4c3c@r4c37 'r4c6a '#f '#f '#((immutable char)))) (set! r4c6e@r4c69 '#f) (set! r4c70@r4c68 (make-record-constructor-descriptor r4c6c@r4c67 r4c40@r4c38 r4c6e@r4c69)) (set! r4c73@p? (record-predicate r4c6c@r4c67)) (set! r4c75@make-i/o-encoding-error (record-constructor r4c70@r4c68)) (set! r4c77@r4c66 (record-accessor r4c6c@r4c67 '0)) (set! r4c79@i/o-encoding-error? (condition-predicate r4c6c@r4c67)) (set! r4c7b@i/o-encoding-error-char (condition-accessor r4c6c@r4c67 r4c77@r4c66)) (set! r4c7d@&i/o-encoding-rtd r4c6c@r4c67) (set! r4c7f@&i/o-encoding-rcd r4c70@r4c68) (set! r4c85@r4c80 (make-record-type-descriptor '&no-infinities r4b11@r4b0c 'r4c83 '#f '#f '#())) (set! r4c87@r4c82 '#f) (set! r4c89@r4c81 (make-record-constructor-descriptor r4c85@r4c80 r4b15@r4b0d r4c87@r4c82)) (set! r4c8c@p? (record-predicate r4c85@r4c80)) (set! r4c8e@make-no-infinities-violation (record-constructor r4c89@r4c81)) (set! r4c90@no-infinities-violation? (condition-predicate r4c85@r4c80)) (set! r4c92@&no-infinities-rtd r4c85@r4c80) (set! r4c94@&no-infinities-rcd r4c89@r4c81) (set! r4c9a@r4c95 (make-record-type-descriptor '&no-nans r4b11@r4b0c 'r4c98 '#f '#f '#())) (set! r4c9c@r4c97 '#f) (set! r4c9e@r4c96 (make-record-constructor-descriptor r4c9a@r4c95 r4b15@r4b0d r4c9c@r4c97)) (set! r4ca1@p? (record-predicate r4c9a@r4c95)) (set! r4ca3@make-no-nans-violation (record-constructor r4c9e@r4c96)) (set! r4ca5@no-nans-violation? (condition-predicate r4c9a@r4c95)) (set! r4ca7@&no-nans-rtd r4c9a@r4c95) (set! r4ca9@&no-nans-rcd r4c9e@r4c96) (begin (set! r4d9a@r4ca9@&no-nans-rcd r4ca9@&no-nans-rcd) (set! r4d99@r4ca7@&no-nans-rtd r4ca7@&no-nans-rtd) (set! r4d98@r4ca5@no-nans-violation? r4ca5@no-nans-violation?) (set! r4d97@r4ca3@make-no-nans-violation r4ca3@make-no-nans-violation) (set! r4d96@r4ca1@p? r4ca1@p?) (set! r4d95@r4c9e@r4c96 r4c9e@r4c96) (set! r4d94@r4c9c@r4c97 r4c9c@r4c97) (set! r4d93@r4c9a@r4c95 r4c9a@r4c95) (set! r4d92@r4c94@&no-infinities-rcd r4c94@&no-infinities-rcd) (set! r4d91@r4c92@&no-infinities-rtd r4c92@&no-infinities-rtd) (set! r4d90@r4c90@no-infinities-violation? r4c90@no-infinities-violation?) (set! r4d8f@r4c8e@make-no-infinities-violation r4c8e@make-no-infinities-violation) (set! r4d8e@r4c8c@p? r4c8c@p?) (set! r4d8d@r4c89@r4c81 r4c89@r4c81) (set! r4d8c@r4c87@r4c82 r4c87@r4c82) (set! r4d8b@r4c85@r4c80 r4c85@r4c80) (set! r4d8a@r4c7f@&i/o-encoding-rcd r4c7f@&i/o-encoding-rcd) (set! r4d89@r4c7d@&i/o-encoding-rtd r4c7d@&i/o-encoding-rtd) (set! r4d88@r4c7b@i/o-encoding-error-char r4c7b@i/o-encoding-error-char) (set! r4d87@r4c79@i/o-encoding-error? r4c79@i/o-encoding-error?) (set! r4d86@r4c77@r4c66 r4c77@r4c66) (set! r4d85@r4c75@make-i/o-encoding-error r4c75@make-i/o-encoding-error) (set! r4d84@r4c73@p? r4c73@p?) (set! r4d83@r4c70@r4c68 r4c70@r4c68) (set! r4d82@r4c6e@r4c69 r4c6e@r4c69) (set! r4d81@r4c6c@r4c67 r4c6c@r4c67) (set! r4d80@r4c64@&i/o-decoding-rcd r4c64@&i/o-decoding-rcd) (set! r4d7f@r4c62@&i/o-decoding-rtd r4c62@&i/o-decoding-rtd) (set! r4d7e@r4c60@i/o-decoding-error? r4c60@i/o-decoding-error?) (set! r4d7d@r4c5e@make-i/o-decoding-error r4c5e@make-i/o-decoding-error) (set! r4d7c@r4c5c@p? r4c5c@p?) (set! r4d7b@r4c59@r4c51 r4c59@r4c51) (set! r4d7a@r4c57@r4c52 r4c57@r4c52) (set! r4d79@r4c55@r4c50 r4c55@r4c50) (set! r4d78@r4c4f@&i/o-port-rcd r4c4f@&i/o-port-rcd) (set! r4d77@r4c4d@&i/o-port-rtd r4c4d@&i/o-port-rtd) (set! r4d76@r4c4b@i/o-error-port r4c4b@i/o-error-port) (set! r4d75@r4c49@i/o-port-error? r4c49@i/o-port-error?) (set! r4d74@r4c47@r4c36 r4c47@r4c36) (set! r4d73@r4c45@make-i/o-port-error r4c45@make-i/o-port-error) (set! r4d72@r4c43@p? r4c43@p?) (set! r4d71@r4c40@r4c38 r4c40@r4c38) (set! r4d70@r4c3e@r4c39 r4c3e@r4c39) (set! r4d6f@r4c3c@r4c37 r4c3c@r4c37) (set! r4d6e@r4c34@&i/o-file-does-not-exist-rcd r4c34@&i/o-file-does-not-exist-rcd) (set! r4d6d@r4c32@&i/o-file-does-not-exist-rtd r4c32@&i/o-file-does-not-exist-rtd) (set! r4d6c@r4c30@i/o-file-does-not-exist-error? r4c30@i/o-file-does-not-exist-error?) (set! r4d6b@r4c2e@make-i/o-file-does-not-exist-error r4c2e@make-i/o-file-does-not-exist-error) (set! r4d6a@r4c2c@p? r4c2c@p?) (set! r4d69@r4c29@r4c21 r4c29@r4c21) (set! r4d68@r4c27@r4c22 r4c27@r4c22) (set! r4d67@r4c25@r4c20 r4c25@r4c20) (set! r4d66@r4c1f@&i/o-file-already-exists-rcd r4c1f@&i/o-file-already-exists-rcd) (set! r4d65@r4c1d@&i/o-file-already-exists-rtd r4c1d@&i/o-file-already-exists-rtd) (set! r4d64@r4c1b@i/o-file-already-exists-error? r4c1b@i/o-file-already-exists-error?) (set! r4d63@r4c19@make-i/o-file-already-exists-error r4c19@make-i/o-file-already-exists-error) (set! r4d62@r4c17@p? r4c17@p?) (set! r4d61@r4c14@r4c0c r4c14@r4c0c) (set! r4d60@r4c12@r4c0d r4c12@r4c0d) (set! r4d5f@r4c10@r4c0b r4c10@r4c0b) (set! r4d5e@r4c0a@&i/o-file-is-read-only-rcd r4c0a@&i/o-file-is-read-only-rcd) (set! r4d5d@r4c08@&i/o-file-is-read-only-rtd r4c08@&i/o-file-is-read-only-rtd) (set! r4d5c@r4c06@i/o-file-is-read-only-error? r4c06@i/o-file-is-read-only-error?) (set! r4d5b@r4c04@make-i/o-file-is-read-only-error r4c04@make-i/o-file-is-read-only-error) (set! r4d5a@r4c02@p? r4c02@p?) (set! r4d59@r4bff@r4bf7 r4bff@r4bf7) (set! r4d58@r4bfd@r4bf8 r4bfd@r4bf8) (set! r4d57@r4bfb@r4bf6 r4bfb@r4bf6) (set! r4d56@r4bf5@&i/o-file-protection-rcd r4bf5@&i/o-file-protection-rcd) (set! r4d55@r4bf3@&i/o-file-protection-rtd r4bf3@&i/o-file-protection-rtd) (set! r4d54@r4bf1@i/o-file-protection-error? r4bf1@i/o-file-protection-error?) (set! r4d53@r4bef@make-i/o-file-protection-error r4bef@make-i/o-file-protection-error) (set! r4d52@r4bed@p? r4bed@p?) (set! r4d51@r4bea@r4be2 r4bea@r4be2) (set! r4d50@r4be8@r4be3 r4be8@r4be3) (set! r4d4f@r4be6@r4be1 r4be6@r4be1) (set! r4d4e@r4be0@&i/o-filename-rcd r4be0@&i/o-filename-rcd) (set! r4d4d@r4bde@&i/o-filename-rtd r4bde@&i/o-filename-rtd) (set! r4d4c@r4bdc@i/o-error-filename r4bdc@i/o-error-filename) (set! r4d4b@r4bda@i/o-filename-error? r4bda@i/o-filename-error?) (set! r4d4a@r4bd8@r4bc7 r4bd8@r4bc7) (set! r4d49@r4bd6@make-i/o-filename-error r4bd6@make-i/o-filename-error) (set! r4d48@r4bd4@p? r4bd4@p?) (set! r4d47@r4bd1@r4bc9 r4bd1@r4bc9) (set! r4d46@r4bcf@r4bca r4bcf@r4bca) (set! r4d45@r4bcd@r4bc8 r4bcd@r4bc8) (set! r4d44@r4bc5@&i/o-invalid-position-rcd r4bc5@&i/o-invalid-position-rcd) (set! r4d43@r4bc3@&i/o-invalid-position-rtd r4bc3@&i/o-invalid-position-rtd) (set! r4d42@r4bc1@i/o-error-position r4bc1@i/o-error-position) (set! r4d41@r4bbf@i/o-invalid-position-error? r4bbf@i/o-invalid-position-error?) (set! r4d40@r4bbd@r4bac r4bbd@r4bac) (set! r4d3f@r4bbb@make-i/o-invalid-position-error r4bbb@make-i/o-invalid-position-error) (set! r4d3e@r4bb9@p? r4bb9@p?) (set! r4d3d@r4bb6@r4bae r4bb6@r4bae) (set! r4d3c@r4bb4@r4baf r4bb4@r4baf) (set! r4d3b@r4bb2@r4bad r4bb2@r4bad) (set! r4d3a@r4baa@&i/o-write-rcd r4baa@&i/o-write-rcd) (set! r4d39@r4ba8@&i/o-write-rtd r4ba8@&i/o-write-rtd) (set! r4d38@r4ba6@i/o-write-error? r4ba6@i/o-write-error?) (set! r4d37@r4ba4@make-i/o-write-error r4ba4@make-i/o-write-error) (set! r4d36@r4ba2@p? r4ba2@p?) (set! r4d35@r4b9f@r4b97 r4b9f@r4b97) (set! r4d34@r4b9d@r4b98 r4b9d@r4b98) (set! r4d33@r4b9b@r4b96 r4b9b@r4b96) (set! r4d32@r4b95@&i/o-read-rcd r4b95@&i/o-read-rcd) (set! r4d31@r4b93@&i/o-read-rtd r4b93@&i/o-read-rtd) (set! r4d30@r4b91@i/o-read-error? r4b91@i/o-read-error?) (set! r4d2f@r4b8f@make-i/o-read-error r4b8f@make-i/o-read-error) (set! r4d2e@r4b8d@p? r4b8d@p?) (set! r4d2d@r4b8a@r4b82 r4b8a@r4b82) (set! r4d2c@r4b88@r4b83 r4b88@r4b83) (set! r4d2b@r4b86@r4b81 r4b86@r4b81) (set! r4d2a@r4b80@&i/o-rcd r4b80@&i/o-rcd) (set! r4d29@r4b7e@&i/o-rtd r4b7e@&i/o-rtd) (set! r4d28@r4b7c@i/o-error? r4b7c@i/o-error?) (set! r4d27@r4b7a@make-i/o-error r4b7a@make-i/o-error) (set! r4d26@r4b78@p? r4b78@p?) (set! r4d25@r4b75@r4b6d r4b75@r4b6d) (set! r4d24@r4b73@r4b6e r4b73@r4b6e) (set! r4d23@r4b71@r4b6c r4b71@r4b6c) (set! r4d22@r4b6b@&undefined-rcd r4b6b@&undefined-rcd) (set! r4d21@r4b69@&undefined-rtd r4b69@&undefined-rtd) (set! r4d20@r4b67@undefined-violation? r4b67@undefined-violation?) (set! r4d1f@r4b65@make-undefined-violation r4b65@make-undefined-violation) (set! r4d1e@r4b63@p? r4b63@p?) (set! r4d1d@r4b60@r4b58 r4b60@r4b58) (set! r4d1c@r4b5e@r4b59 r4b5e@r4b59) (set! r4d1b@r4b5c@r4b57 r4b5c@r4b57) (set! r4d1a@r4b56@&syntax-rcd r4b56@&syntax-rcd) (set! r4d19@r4b54@&syntax-rtd r4b54@&syntax-rtd) (set! r4d18@r4b52@syntax-violation-subform r4b52@syntax-violation-subform) (set! r4d17@r4b50@syntax-violation-form r4b50@syntax-violation-form) (set! r4d16@r4b4e@syntax-violation? r4b4e@syntax-violation?) (set! r4d15@r4b4c@r4b39 r4b4c@r4b39) (set! r4d14@r4b4a@r4b37 r4b4a@r4b37) (set! r4d13@r4b48@make-syntax-violation r4b48@make-syntax-violation) (set! r4d12@r4b46@p? r4b46@p?) (set! r4d11@r4b43@r4b3b r4b43@r4b3b) (set! r4d10@r4b41@r4b3c r4b41@r4b3c) (set! r4d0f@r4b3f@r4b3a r4b3f@r4b3a) (set! r4d0e@r4b35@&lexical-rcd r4b35@&lexical-rcd) (set! r4d0d@r4b33@&lexical-rtd r4b33@&lexical-rtd) (set! r4d0c@r4b31@lexical-violation? r4b31@lexical-violation?) (set! r4d0b@r4b2f@make-lexical-violation r4b2f@make-lexical-violation) (set! r4d0a@r4b2d@p? r4b2d@p?) (set! r4d09@r4b2a@r4b22 r4b2a@r4b22) (set! r4d08@r4b28@r4b23 r4b28@r4b23) (set! r4d07@r4b26@r4b21 r4b26@r4b21) (set! r4d06@r4b20@&implementation-restriction-rcd r4b20@&implementation-restriction-rcd) (set! r4d05@r4b1e@&implementation-restriction-rtd r4b1e@&implementation-restriction-rtd) (set! r4d04@r4b1c@implementation-restriction-violation? r4b1c@implementation-restriction-violation?) (set! r4d03@r4b1a@make-implementation-restriction-violation r4b1a@make-implementation-restriction-violation) (set! r4d02@r4b18@p? r4b18@p?) (set! r4d01@r4b15@r4b0d r4b15@r4b0d) (set! r4d00@r4b13@r4b0e r4b13@r4b0e) (set! r4cff@r4b11@r4b0c r4b11@r4b0c) (set! r4cfe@r4b0b@&non-continuable-rcd r4b0b@&non-continuable-rcd) (set! r4cfd@r4b09@&non-continuable-rtd r4b09@&non-continuable-rtd) (set! r4cfc@r4b07@non-continuable-violation? r4b07@non-continuable-violation?) (set! r4cfb@r4b05@make-non-continuable-violation r4b05@make-non-continuable-violation) (set! r4cfa@r4b03@p? r4b03@p?) (set! r4cf9@r4b00@r4af8 r4b00@r4af8) (set! r4cf8@r4afe@r4af9 r4afe@r4af9) (set! r4cf7@r4afc@r4af7 r4afc@r4af7) (set! r4cf6@r4af6@&who-rcd r4af6@&who-rcd) (set! r4cf5@r4af4@&who-rtd r4af4@&who-rtd) (set! r4cf4@r4af2@condition-who r4af2@condition-who) (set! r4cf3@r4af0@who-condition? r4af0@who-condition?) (set! r4cf2@r4aee@r4add r4aee@r4add) (set! r4cf1@r4aec@make-who-condition r4aec@make-who-condition) (set! r4cf0@r4aea@p? r4aea@p?) (set! r4cef@r4ae7@r4adf r4ae7@r4adf) (set! r4cee@r4ae5@r4ae0 r4ae5@r4ae0) (set! r4ced@r4ae3@r4ade r4ae3@r4ade) (set! r4cec@r4adb@&irritants-rcd r4adb@&irritants-rcd) (set! r4ceb@r4ad9@&irritants-rtd r4ad9@&irritants-rtd) (set! r4cea@r4ad7@condition-irritants r4ad7@condition-irritants) (set! r4ce9@r4ad5@irritants-condition? r4ad5@irritants-condition?) (set! r4ce8@r4ad3@r4ac2 r4ad3@r4ac2) (set! r4ce7@r4ad1@make-irritants-condition r4ad1@make-irritants-condition) (set! r4ce6@r4acf@p? r4acf@p?) (set! r4ce5@r4acc@r4ac4 r4acc@r4ac4) (set! r4ce4@r4aca@r4ac5 r4aca@r4ac5) (set! r4ce3@r4ac8@r4ac3 r4ac8@r4ac3) (set! r4ce2@r4ac0@&assertion-rcd r4ac0@&assertion-rcd) (set! r4ce1@r4abe@&assertion-rtd r4abe@&assertion-rtd) (set! r4ce0@r4abc@assertion-violation? r4abc@assertion-violation?) (set! r4cdf@r4aba@make-assertion-violation r4aba@make-assertion-violation) (set! r4cde@r4ab8@p? r4ab8@p?) (set! r4cdd@r4ab5@r4aad r4ab5@r4aad) (set! r4cdc@r4ab3@r4aae r4ab3@r4aae) (set! r4cdb@r4ab1@r4aac r4ab1@r4aac) (set! r4cda@r4aab@&violation-rcd r4aab@&violation-rcd) (set! r4cd9@r4aa9@&violation-rtd r4aa9@&violation-rtd) (set! r4cd8@r4aa7@violation? r4aa7@violation?) (set! r4cd7@r4aa5@make-violation r4aa5@make-violation) (set! r4cd6@r4aa3@p? r4aa3@p?) (set! r4cd5@r4aa0@r4a98 r4aa0@r4a98) (set! r4cd4@r4a9e@r4a99 r4a9e@r4a99) (set! r4cd3@r4a9c@r4a97 r4a9c@r4a97) (set! r4cd2@r4a96@&error-rcd r4a96@&error-rcd) (set! r4cd1@r4a94@&error-rtd r4a94@&error-rtd) (set! r4cd0@r4a92@error? r4a92@error?) (set! r4ccf@r4a90@make-error r4a90@make-error) (set! r4cce@r4a8e@p? r4a8e@p?) (set! r4ccd@r4a8b@r4a83 r4a8b@r4a83) (set! r4ccc@r4a89@r4a84 r4a89@r4a84) (set! r4ccb@r4a87@r4a82 r4a87@r4a82) (set! r4cca@r4a81@&serious-rcd r4a81@&serious-rcd) (set! r4cc9@r4a7f@&serious-rtd r4a7f@&serious-rtd) (set! r4cc8@r4a7d@serious-condition? r4a7d@serious-condition?) (set! r4cc7@r4a7b@make-serious-condition r4a7b@make-serious-condition) (set! r4cc6@r4a79@p? r4a79@p?) (set! r4cc5@r4a76@r4a6e r4a76@r4a6e) (set! r4cc4@r4a74@r4a6f r4a74@r4a6f) (set! r4cc3@r4a72@r4a6d r4a72@r4a6d) (set! r4cc2@r4a6c@&warning-rcd r4a6c@&warning-rcd) (set! r4cc1@r4a6a@&warning-rtd r4a6a@&warning-rtd) (set! r4cc0@r4a68@warning? r4a68@warning?) (set! r4cbf@r4a66@make-warning r4a66@make-warning) (set! r4cbe@r4a64@p? r4a64@p?) (set! r4cbd@r4a61@r4a59 r4a61@r4a59) (set! r4cbc@r4a5f@r4a5a r4a5f@r4a5a) (set! r4cbb@r4a5d@r4a58 r4a5d@r4a58) (set! r4cba@r4a57@&message-rcd r4a57@&message-rcd) (set! r4cb9@r4a55@&message-rtd r4a55@&message-rtd) (set! r4cb8@r4a53@condition-message r4a53@condition-message) (set! r4cb7@r4a51@message-condition? r4a51@message-condition?) (set! r4cb6@r4a4f@r4a3e r4a4f@r4a3e) (set! r4cb5@r4a4d@make-message-condition r4a4d@make-message-condition) (set! r4cb4@r4a4b@p? r4a4b@p?) (set! r4cb3@r4a48@r4a40 r4a48@r4a40) (set! r4cb2@r4a46@r4a41 r4a46@r4a41) (set! r4cb1@r4a44@r4a3f r4a44@r4a3f) (set! r4cb0@r49f8@&condition-rcd r49f8@&condition-rcd) (set! r4caf@r49f6@&condition-rtd r49f6@&condition-rtd) (set! r4cae@r49f4@make-&condition r49f4@make-&condition) (set! r4cad@r49f2@&condition? r49f2@&condition?) (set! r4cac@r49ef@r49e7 r49ef@r49e7) (set! r4cab@r49ed@r49e8 r49ed@r49e8) (set! r4caa@r49eb@r49e6 r49eb@r49e6)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (r28ef@r28a4@current-primitive-locations (lambda (r5216@x) ((lambda (r5218@t) (if r5218@t (cdr r5218@t) '#f)) (assq r5216@x '((&no-nans-rcd . r4d9a@r4ca9@&no-nans-rcd) (&no-nans-rtd . r4d99@r4ca7@&no-nans-rtd) (&no-infinities-rcd . r4d92@r4c94@&no-infinities-rcd) (&no-infinities-rtd . r4d91@r4c92@&no-infinities-rtd) (&i/o-encoding-rcd . r4d8a@r4c7f@&i/o-encoding-rcd) (&i/o-encoding-rtd . r4d89@r4c7d@&i/o-encoding-rtd) (&i/o-decoding-rcd . r4d80@r4c64@&i/o-decoding-rcd) (&i/o-decoding-rtd . r4d7f@r4c62@&i/o-decoding-rtd) (&i/o-port-rcd . r4d78@r4c4f@&i/o-port-rcd) (&i/o-port-rtd . r4d77@r4c4d@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . r4d6e@r4c34@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . r4d6d@r4c32@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . r4d66@r4c1f@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . r4d65@r4c1d@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . r4d5e@r4c0a@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . r4d5d@r4c08@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . r4d56@r4bf5@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . r4d55@r4bf3@&i/o-file-protection-rtd) (&i/o-filename-rcd . r4d4e@r4be0@&i/o-filename-rcd) (&i/o-filename-rtd . r4d4d@r4bde@&i/o-filename-rtd) (&i/o-invalid-position-rcd . r4d44@r4bc5@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . r4d43@r4bc3@&i/o-invalid-position-rtd) (&i/o-write-rcd . r4d3a@r4baa@&i/o-write-rcd) (&i/o-write-rtd . r4d39@r4ba8@&i/o-write-rtd) (&i/o-read-rcd . r4d32@r4b95@&i/o-read-rcd) (&i/o-read-rtd . r4d31@r4b93@&i/o-read-rtd) (&i/o-rcd . r4d2a@r4b80@&i/o-rcd) (&i/o-rtd . r4d29@r4b7e@&i/o-rtd) (&undefined-rcd . r4d22@r4b6b@&undefined-rcd) (&undefined-rtd . r4d21@r4b69@&undefined-rtd) (&syntax-rcd . r4d1a@r4b56@&syntax-rcd) (&syntax-rtd . r4d19@r4b54@&syntax-rtd) (&lexical-rcd . r4d0e@r4b35@&lexical-rcd) (&lexical-rtd . r4d0d@r4b33@&lexical-rtd) (&implementation-restriction-rcd . r4d06@r4b20@&implementation-restriction-rcd) (&implementation-restriction-rtd . r4d05@r4b1e@&implementation-restriction-rtd) (&non-continuable-rcd . r4cfe@r4b0b@&non-continuable-rcd) (&non-continuable-rtd . r4cfd@r4b09@&non-continuable-rtd) (&who-rcd . r4cf6@r4af6@&who-rcd) (&who-rtd . r4cf5@r4af4@&who-rtd) (&irritants-rcd . r4cec@r4adb@&irritants-rcd) (&irritants-rtd . r4ceb@r4ad9@&irritants-rtd) (&assertion-rcd . r4ce2@r4ac0@&assertion-rcd) (&assertion-rtd . r4ce1@r4abe@&assertion-rtd) (&violation-rcd . r4cda@r4aab@&violation-rcd) (&violation-rtd . r4cd9@r4aa9@&violation-rtd) (&error-rcd . r4cd2@r4a96@&error-rcd) (&error-rtd . r4cd1@r4a94@&error-rtd) (&serious-rcd . r4cca@r4a81@&serious-rcd) (&serious-rtd . r4cc9@r4a7f@&serious-rtd) (&warning-rcd . r4cc2@r4a6c@&warning-rcd) (&warning-rtd . r4cc1@r4a6a@&warning-rtd) (&message-rcd . r4cba@r4a57@&message-rcd) (&message-rtd . r4cb9@r4a55@&message-rtd) (&condition-rcd . r4cb0@r49f8@&condition-rcd) (&condition-rtd . r4caf@r49f6@&condition-rtd) (syntax-error . r49d8@r2fe4@syntax-error) (syntax-dispatch . r496d@r2eff@syntax-dispatch) (load . r4ecb@r4db6@load) (interaction-environment . r49e0@r2ff4@interaction-environment) (library-path . r2b06@r2995@library-path) (make-parameter . r289e@r27c8@make-parameter) (make-variable-transformer . r492b@r2d2c@make-variable-transformer) (identifier? . r49db@r2fea@identifier?) (generate-temporaries . r49d1@r2fd6@generate-temporaries) (free-identifier=? . r49d2@r2fd8@free-identifier=?) (syntax->datum . r49dd@r2fee@syntax->datum) (datum->syntax . r49dc@r2fec@datum->syntax) (bound-identifier=? . r49d3@r2fda@bound-identifier=?) (make-i/o-write-error . r4d37@r4ba4@make-i/o-write-error) (make-i/o-read-error . r4d2f@r4b8f@make-i/o-read-error) (make-i/o-port-error . r4d73@r4c45@make-i/o-port-error) (make-i/o-invalid-position-error . r4d3f@r4bbb@make-i/o-invalid-position-error) (make-i/o-filename-error . r4d49@r4bd6@make-i/o-filename-error) (make-i/o-file-protection-error . r4d53@r4bef@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . r4d5b@r4c04@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . r4d6b@r4c2e@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . r4d63@r4c19@make-i/o-file-already-exists-error) (make-i/o-error . r4d27@r4b7a@make-i/o-error) (make-i/o-encoding-error . r4d85@r4c75@make-i/o-encoding-error) (make-i/o-decoding-error . r4d7d@r4c5e@make-i/o-decoding-error) (i/o-write-error? . r4d38@r4ba6@i/o-write-error?) (i/o-read-error? . r4d30@r4b91@i/o-read-error?) (i/o-port-error? . r4d75@r4c49@i/o-port-error?) (i/o-invalid-position-error? . r4d41@r4bbf@i/o-invalid-position-error?) (i/o-filename-error? . r4d4b@r4bda@i/o-filename-error?) (i/o-file-protection-error? . r4d54@r4bf1@i/o-file-protection-error?) (i/o-file-is-read-only-error? . r4d5c@r4c06@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . r4d6c@r4c30@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . r4d64@r4c1b@i/o-file-already-exists-error?) (i/o-error? . r4d28@r4b7c@i/o-error?) (i/o-error-position . r4d42@r4bc1@i/o-error-position) (i/o-error-port . r4d76@r4c4b@i/o-error-port) (i/o-error-filename . r4d4c@r4bdc@i/o-error-filename) (i/o-encoding-error? . r4d87@r4c79@i/o-encoding-error?) (i/o-encoding-error-char . r4d88@r4c7b@i/o-encoding-error-char) (i/o-decoding-error? . r4d7e@r4c60@i/o-decoding-error?) (scheme-report-environment . r49c8@r2fc4@scheme-report-environment) (null-environment . r49c7@r2fc2@null-environment) (command-line . r4ec8@r4db0@command-line) (eval . r49ca@r2fc8@eval) (environment . r49c6@r2fc0@environment) (who-condition? . r4cf3@r4af0@who-condition?) (warning? . r4cc0@r4a68@warning?) (violation? . r4cd8@r4aa7@violation?) (undefined-violation? . r4d20@r4b67@undefined-violation?) (syntax-violation? . r4d16@r4b4e@syntax-violation?) (syntax-violation-subform . r4d18@r4b52@syntax-violation-subform) (syntax-violation-form . r4d17@r4b50@syntax-violation-form) (syntax-violation . r49da@r2fe8@syntax-violation) (serious-condition? . r4cc8@r4a7d@serious-condition?) (non-continuable-violation? . r4cfc@r4b07@non-continuable-violation?) (message-condition? . r4cb7@r4a51@message-condition?) (make-who-condition . r4cf1@r4aec@make-who-condition) (make-warning . r4cbf@r4a66@make-warning) (make-violation . r4cd7@r4aa5@make-violation) (make-undefined-violation . r4d1f@r4b65@make-undefined-violation) (make-syntax-violation . r4d13@r4b48@make-syntax-violation) (make-serious-condition . r4cc7@r4a7b@make-serious-condition) (make-non-continuable-violation . r4cfb@r4b05@make-non-continuable-violation) (make-message-condition . r4cb5@r4a4d@make-message-condition) (make-lexical-violation . r4d0b@r4b2f@make-lexical-violation) (make-irritants-condition . r4ce7@r4ad1@make-irritants-condition) (make-implementation-restriction-violation . r4d03@r4b1a@make-implementation-restriction-violation) (make-error . r4ccf@r4a90@make-error) (make-assertion-violation . r4cdf@r4aba@make-assertion-violation) (lexical-violation? . r4d0c@r4b31@lexical-violation?) (irritants-condition? . r4ce9@r4ad5@irritants-condition?) (implementation-restriction-violation? . r4d04@r4b1c@implementation-restriction-violation?) (error? . r4cd0@r4a92@error?) (condition-who . r4cf4@r4af2@condition-who) (condition-message . r4cb8@r4a53@condition-message) (condition-irritants . r4cea@r4ad7@condition-irritants) (assertion-violation? . r4ce0@r4abc@assertion-violation?) (no-nans-violation? . r4d98@r4ca5@no-nans-violation?) (no-infinities-violation? . r4d90@r4c90@no-infinities-violation?) (make-no-nans-violation . r4d97@r4ca3@make-no-nans-violation) (make-no-infinities-violation . r4d8f@r4c8e@make-no-infinities-violation) (assertion-error . r49d7@r2fe2@assertion-error)))))) (r2b16@r29b5@install-library 'r51f3 '(mosh interaction) '() '() '() '() '((regexp? . r51eb) (alist->eq-hash-table . r51e8) (format . r51e5) (string-split . r51da) (call-process . r51d4) (set-current-directory! . r51d0) (expand-path . r51cf) (current-directory . r51ce) (%spawn . r51cd) (%waitpid . r51cc) (simple-struct-name . r51cb) (simple-struct-set! . r51ca) (simple-struct-ref . r51c9) (make-simple-struct . r51c8) (simple-struct? . r51c7) (pointer-ref-c-int64 . r51c6) (pointer-ref-c-int32 . r51c5) (pointer-ref-c-int16 . r51c4) (pointer-ref-c-int8 . r51c3) (pointer-ref-c-uint64 . r51c2) (pointer-ref-c-uint32 . r51c1) (pointer-ref-c-uint16 . r51c0) (pointer-ref-c-uint8 . r51bf) (pointer-set-c-uint64! . r51be) (pointer-set-c-uint32! . r51bd) (pointer-set-c-uint16! . r51bc) (pointer-set-c-uint8! . r51bb) (pointer-set-c-int64! . r51ba) (pointer-set-c-int32! . r51b9) (pointer-set-c-int16! . r51b8) (pointer-set-c-int8! . r51b7) (pointer-set-c-pointer! . r51b6) (pointer-set-c-double! . r51b5) (pointer-set-c-float! . r51b4) (pointer-set-c-long-long! . r51b3) (pointer-set-c-long! . r51b2) (pointer-set-c-int! . r51b1) (pointer-set-c-short! . r51b0) (pointer-set-c-char! . r51af) (pointer-ref-c-pointer . r51ae) (pointer-ref-c-double . r51ad) (pointer-ref-c-float . r51ac) (pointer-ref-c-unsigned-long-long . r51ab) (pointer-ref-c-signed-long-long . r51aa) (pointer-ref-c-unsigned-long . r51a9) (pointer-ref-c-signed-long . r51a8) (pointer-ref-c-unsigned-int . r51a7) (pointer-ref-c-signed-int . r51a6) (pointer-ref-c-unsigned-short . r51a5) (pointer-ref-c-signed-short . r51a4) (pointer-ref-c-unsigned-char . r51a3) (pointer-ref-c-signed-char . r51a2) (pointer->integer . r51a1) (integer->pointer . r51a0) (pointer? . r519f) (shared-errno . r519e) (%ffi-supported? . r519d) (%ffi-pointer->string . r519c) (%ffi-call->string-or-zero . r519b) (%ffi-call->double . r519a) (%ffi-call->void* . r5199) (%ffi-call->void . r5198) (%ffi-call->char . r5197) (%ffi-call->int . r5196) (%ffi-lookup . r5195) (%ffi-open . r5194) (%fork . r5193) (%pipe . r5192) (p . r5191) (whereis . r517b) (register . r517a) (vm-join! . r5179) (vm-set-value! . r5178) (vm? . r5177) (main-vm? . r5176) (vm-eval . r5175) (vm-self . r5174) (vm-start! . r5173) (make-vm . r5172) (mutex-try-lock! . r5171) (mutex-unlock! . r5170) (mutex-lock! . r516f) (mutex? . r516e) (make-mutex . r516d) (condition-variable-notify-all! . r516c) (condition-variable-notify! . r516b) (condition-variable-wait! . r516a) (make-condition-variable . r5169) (string-upcase . r5152) (string-titlecase . r5151) (string-normalize-nfkd . r5150) (string-normalize-nfkc . r514f) (string-normalize-nfd . r514e) (string-normalize-nfc . r514d) (string-foldcase . r514c) (string-downcase . r514b) (string-ci>? . r514a) (string-ci>=? . r5149) (string-ci=? . r5148) (string-ci<? . r5147) (string-ci<=? . r5146) (char-whitespace? . r5145) (char-upper-case? . r5144) (char-title-case? . r5143) (char-numeric? . r5142) (char-lower-case? . r5141) (char-general-category . r5140) (char-upcase . r513f) (char-titlecase . r513e) (char-foldcase . r513d) (char-downcase . r513c) (char-ci>? . r513b) (char-ci>=? . r513a) (char-ci=? . r5139) (char-ci<? . r5138) (char-ci<=? . r5137) (char-alphabetic? . r5136) (make-variable-transformer . r2d2b) (identifier? . r2fe9) (generate-temporaries . r2fd5) (free-identifier=? . r2fd7) (syntax->datum . r2fed) (datum->syntax . r2feb) (bound-identifier=? . r2fd9) (record-type-descriptor? . r5135) (record-predicate . r5134) (record-mutator . r5133) (record-constructor . r5132) (record-accessor . r5131) (make-record-type-descriptor . r5130) (make-record-constructor-descriptor . r512f) (record? . r512e) (record-type-uid . r512d) (record-type-sealed? . r512c) (record-type-parent . r512b) (record-type-opaque? . r512a) (record-type-name . r5129) (record-type-generative? . r5128) (record-type-field-names . r5127) (record-rtd . r5126) (record-field-mutable? . r5125) (delete-file . r5124) (file-exists? . r5123) (vector-sort! . r5122) (vector-sort . r5121) (list-sort . r5120) (symbol-hash . r511f) (string-ci-hash . r511e) (string-hash . r511d) (equal-hash . r511c) (hashtable-equivalence-function . r511b) (make-hashtable . r511a) (hashtable-hash-function . r5119) (make-eqv-hashtable . r5118) (make-eq-hashtable . r5117) (hashtable? . r5116) (hashtable-update! . r5115) (hashtable-size . r5114) (hashtable-set! . r5113) (hashtable-ref . r5112) (hashtable-mutable? . r5111) (hashtable-keys . r5110) (hashtable-entries . r510f) (hashtable-delete! . r510e) (hashtable-copy . r510d) (hashtable-contains? . r510c) (hashtable-clear! . r510b) (call-with-output-file . r510a) (call-with-input-file . r5109) (write-char . r5108) (write . r5107) (with-output-to-file . r5106) (with-input-from-file . r5105) (read-char . r5104) (read . r5103) (peek-char . r5102) (open-output-file . r5101) (open-input-file . r5100) (newline . r50ff) (display . r50fe) (close-output-port . r50fd) (close-input-port . r50fc) (eof-object? . r50fb) (eof-object . r50fa) (current-error-port . r50f9) (current-output-port . r50f8) (current-input-port . r50f7) (output-port? . r50f6) (input-port? . r50f5) (utf-8-codec . r50f4) (utf-16-codec . r50f3) (transcoder-error-handling-mode . r50f2) (transcoder-eol-style . r50f1) (transcoder-codec . r50f0) (transcoded-port . r50ef) (textual-port? . r50ee) (string->bytevector . r50ed) (standard-output-port . r50ec) (standard-input-port . r50eb) (standard-error-port . r50ea) (set-port-position! . r50e9) (put-u8 . r50e8) (put-string . r50e7) (put-datum . r50e6) (put-char . r50e5) (put-bytevector . r50e4) (port? . r50e3) (port-transcoder . r50e2) (port-position . r50e1) (port-has-set-port-position!? . r50e0) (port-has-port-position? . r50df) (port-eof? . r50de) (output-port-buffer-mode . r50dd) (open-string-output-port . r50dc) (open-string-input-port . r50db) (open-file-output-port . r50da) (open-file-input/output-port . r50d9) (open-file-input-port . r50d8) (open-bytevector-output-port . r50d7) (open-bytevector-input-port . r50d6) (native-transcoder . r50d5) (native-eol-style . r50d4) (make-transcoder . r50d3) (latin-1-codec . r50d2) (make-i/o-write-error . r4ba3) (make-i/o-read-error . r4b8e) (make-i/o-port-error . r4c44) (make-i/o-invalid-position-error . r4bba) (make-i/o-filename-error . r4bd5) (make-i/o-file-protection-error . r4bee) (make-i/o-file-is-read-only-error . r4c03) (make-i/o-file-does-not-exist-error . r4c2d) (make-i/o-file-already-exists-error . r4c18) (make-i/o-error . r4b79) (make-i/o-encoding-error . r4c74) (make-i/o-decoding-error . r4c5d) (make-custom-textual-output-port . r50d1) (make-custom-textual-input/output-port . r50d0) (make-custom-textual-input-port . r50cf) (make-custom-binary-output-port . r50ce) (make-custom-binary-input/output-port . r50cd) (make-custom-binary-input-port . r50cc) (make-bytevector . r50cb) (lookahead-u8 . r50ca) (lookahead-char . r50c9) (i/o-write-error? . r4ba5) (i/o-read-error? . r4b90) (i/o-port-error? . r4c48) (i/o-invalid-position-error? . r4bbe) (i/o-filename-error? . r4bd9) (i/o-file-protection-error? . r4bf0) (i/o-file-is-read-only-error? . r4c05) (i/o-file-does-not-exist-error? . r4c2f) (i/o-file-already-exists-error? . r4c1a) (i/o-error? . r4b7b) (i/o-error-position . r4bc0) (i/o-error-port . r4c4a) (i/o-error-filename . r4bdb) (i/o-encoding-error? . r4c78) (i/o-encoding-error-char . r4c7a) (i/o-decoding-error? . r4c5f) (get-u8 . r50c8) (get-string-n! . r50c7) (get-string-n . r50c6) (get-string-all . r50c5) (get-line . r50c4) (get-datum . r50c3) (get-char . r50c2) (get-bytevector-some . r50c1) (get-bytevector-n! . r50c0) (get-bytevector-n . r50bf) (get-bytevector-all . r50be) (flush-output-port . r50bd) (close-port . r50bc) (exit . r50b4) (command-line . r4daf) (string-fill! . r50b3) (string-set! . r50b2) (set-cdr! . r50b1) (set-car! . r50b0) (remove . r50af) (remv . r50ae) (remp . r50ad) (remq . r50ac) (partition . r50ab) (memv . r50aa) (memq . r50a9) (memp . r50a8) (member . r50a7) (exists . r50a6) (for-all . r50a5) (fold-right . r50a4) (fold-left . r50a3) (find . r50a2) (filter . r50a1) (cons* . r50a0) (assv . r509f) (assq . r509e) (assp . r509d) (assoc . r509c) (call-with-string-output-port . r509b) (call-with-port . r509a) (call-with-bytevector-output-port . r5099) (bytevector->string . r5098) (buffer-mode? . r5097) (binary-port? . r5096) (with-exception-handler . r5095) (raise-continuable . r5094) (raise . r5093) (eval . r2fc7) (environment . r2fbf) (make-enumeration . r5092) (enum-set=? . r5091) (enum-set-universe . r5090) (enum-set-union . r508f) (enum-set-subset? . r508e) (enum-set-projection . r508d) (enum-set-member? . r508c) (enum-set-intersection . r508b) (enum-set-indexer . r508a) (enum-set-difference . r5089) (enum-set-constructor . r5088) (enum-set-complement . r5087) (enum-set->list . r5086) (who-condition? . r4aef) (warning? . r4a67) (violation? . r4aa6) (undefined-violation? . r4b66) (syntax-violation? . r4b4d) (syntax-violation-subform . r4b51) (syntax-violation-form . r4b4f) (syntax-violation . r2fe7) (simple-conditions . r5085) (serious-condition? . r4a7c) (non-continuable-violation? . r4b06) (message-condition? . r4a50) (make-who-condition . r4aeb) (make-warning . r4a65) (make-violation . r4aa4) (make-undefined-violation . r4b64) (make-syntax-violation . r4b47) (make-serious-condition . r4a7a) (make-non-continuable-violation . r4b04) (make-message-condition . r4a4c) (make-lexical-violation . r4b2e) (make-irritants-condition . r4ad0) (make-implementation-restriction-violation . r4b19) (make-error . r4a8f) (make-assertion-violation . r4ab9) (lexical-violation? . r4b30) (irritants-condition? . r4ad4) (implementation-restriction-violation? . r4b1b) (error? . r4a91) (condition-who . r4af1) (condition-predicate . r5084) (condition-message . r4a52) (condition-irritants . r4ad6) (condition-accessor . r5083) (condition . r5082) (assertion-violation? . r4abb) (condition? . r5081) (utf32->string . r5080) (utf16->string . r507f) (utf8->string . r507e) (uint-list->bytevector . r507d) (u8-list->bytevector . r507c) (string->utf8 . r507b) (string->utf32 . r507a) (string->utf16 . r5079) (sint-list->bytevector . r5078) (native-endianness . r5077) (bytevector? . r5076) (bytevector=? . r5075) (bytevector-uint-set! . r5074) (bytevector-uint-ref . r5073) (bytevector-u8-set! . r5072) (bytevector-u8-ref . r5071) (bytevector-u64-set! . r5070) (bytevector-u64-ref . r506f) (bytevector-u64-native-set! . r506e) (bytevector-u64-native-ref . r506d) (bytevector-u32-set! . r506c) (bytevector-u32-ref . r506b) (bytevector-u32-native-set! . r506a) (bytevector-u32-native-ref . r5069) (bytevector-u16-set! . r5068) (bytevector-u16-ref . r5067) (bytevector-u16-native-set! . r5066) (bytevector-u16-native-ref . r5065) (bytevector-sint-set! . r5064) (bytevector-sint-ref . r5063) (bytevector-s8-set! . r5062) (bytevector-s8-ref . r5061) (bytevector-s64-set! . r5060) (bytevector-s64-ref . r505f) (bytevector-s64-native-set! . r505e) (bytevector-s64-native-ref . r505d) (bytevector-s32-set! . r505c) (bytevector-s32-ref . r505b) (bytevector-s32-native-set! . r505a) (bytevector-s32-native-ref . r5059) (bytevector-s16-set! . r5058) (bytevector-s16-ref . r5057) (bytevector-s16-native-set! . r5056) (bytevector-s16-native-ref . r5055) (bytevector-length . r5054) (bytevector-ieee-single-ref . r5053) (bytevector-ieee-single-set! . r5052) (bytevector-ieee-single-native-set! . r5051) (bytevector-ieee-single-native-ref . r5050) (bytevector-ieee-double-set! . r504f) (bytevector-ieee-double-ref . r504e) (bytevector-ieee-double-native-set! . r504d) (bytevector-ieee-double-native-ref . r504c) (bytevector-fill! . r504b) (bytevector-copy! . r504a) (bytevector-copy . r5049) (bytevector->uint-list . r5048) (bytevector->u8-list . r5047) (bytevector->sint-list . r5046) (no-nans-violation? . r4ca4) (no-infinities-violation? . r4c8f) (make-no-nans-violation . r4ca2) (make-no-infinities-violation . r4c8d) (real->flonum . r5045) (flzero? . r5044) (fltruncate . r5043) (fltan . r5042) (flsqrt . r5041) (flsin . r5040) (flround . r503f) (flpositive? . r503e) (flonum? . r503d) (flodd? . r503c) (flnumerator . r503b) (flnegative? . r503a) (flnan? . r5039) (flmod0 . r5038) (flmod . r5037) (flmin . r5036) (flmax . r5035) (fllog . r5034) (flinteger? . r5033) (flinfinite? . r5032) (flfloor . r5031) (flfinite? . r5030) (flexpt . r502f) (flexp . r502e) (fleven? . r502d) (fldiv0-and-mod0 . r502c) (fldiv0 . r502b) (fldiv-and-mod . r502a) (fldiv . r5029) (fldenominator . r5028) (flcos . r5027) (flceiling . r5026) (flatan . r5025) (flasin . r5024) (flacos . r5023) (flabs . r5022) (fl>? . r5021) (fl>=? . r5020) (fl=? . r501f) (fl<? . r501e) (fl<=? . r501d) (fl/ . r501c) (fl- . r501b) (fl+ . r501a) (fl* . r5019) (fixnum->flonum . r5018) (fxzero? . r5017) (fxxor . r5016) (fxrotate-bit-field . r5015) (fxreverse-bit-field . r5014) (fxpositive? . r5013) (fxodd? . r5012) (fxnot . r5011) (fxnegative? . r5010) (fxmod0 . r500f) (fxmod . r500e) (fxmin . r500d) (fxmax . r500c) (fxlength . r500b) (fxior . r500a) (fxif . r5009) (fxfirst-bit-set . r5008) (fxeven? . r5007) (fxdiv0-and-mod0 . r5006) (fxdiv0 . r5005) (fxdiv-and-mod . r5004) (fxdiv . r5003) (fxcopy-bit-field . r5002) (fxcopy-bit . r5001) (fxbit-set? . r5000) (fxbit-field . r4fff) (fxbit-count . r4ffe) (fxarithmetic-shift-right . r4ffd) (fxarithmetic-shift-left . r4ffc) (fxarithmetic-shift . r4ffb) (fxand . r4ffa) (fx>? . r4ff9) (fx>=? . r4ff8) (fx=? . r4ff7) (fx<? . r4ff6) (fx<=? . r4ff5) (fx-/carry . r4ff4) (fx- . r4ff3) (fx+/carry . r4ff2) (fx+ . r4ff1) (fx*/carry . r4ff0) (fx* . r4fef) (greatest-fixnum . r4fee) (least-fixnum . r4fed) (fixnum-width . r4fec) (fixnum? . r4feb) (bitwise-rotate-bit-field . r4fea) (bitwise-reverse-bit-field . r4fe9) (bitwise-length . r4fe8) (bitwise-if . r4fe7) (bitwise-first-bit-set . r4fe6) (bitwise-copy-bit-field . r4fe5) (bitwise-copy-bit . r4fe4) (bitwise-bit-set? . r4fe3) (bitwise-bit-field . r4fe2) (bitwise-bit-count . r4fe1) (bitwise-xor . r4fe0) (bitwise-ior . r4fdf) (bitwise-and . r4fde) (bitwise-not . r4fdd) (bitwise-arithmetic-shift-right . r4fdc) (bitwise-arithmetic-shift-left . r4fdb) (bitwise-arithmetic-shift . r4fda) (zero? . r4fd9) (vector? . r4fd8) (vector-set! . r4fd7) (vector-ref . r4fd6) (vector-map . r4fd5) (vector-length . r4fd4) (vector-for-each . r4fd3) (vector-fill! . r4fd2) (vector->list . r4fd1) (vector . r4fd0) (values . r4fcf) (truncate . r4fce) (tan . r4fcd) (symbol? . r4fcc) (symbol=? . r4fcb) (symbol->string . r4fca) (substring . r4fc9) (string? . r4fc8) (string>? . r4fc7) (string>=? . r4fc6) (string=? . r4fc5) (string<? . r4fc4) (string<=? . r4fc3) (string-ref . r4fc2) (string-length . r4fc1) (string-for-each . r4fc0) (string-copy . r4fbf) (string-append . r4fbe) (string->symbol . r4fbd) (string->number . r4fbc) (string->list . r4fbb) (string . r4fba) (sqrt . r4fb9) (sin . r4fb8) (round . r4fb7) (reverse . r4fb6) (real? . r4fb5) (real-valued? . r4fb4) (real-part . r4fb3) (rationalize . r4fb2) (rational? . r4fb1) (rational-valued? . r4fb0) (procedure? . r4faf) (positive? . r4fae) (pair? . r4fad) (odd? . r4fac) (numerator . r4fab) (number? . r4faa) (number->string . r4fa9) (null? . r4fa8) (not . r4fa7) (negative? . r4fa6) (nan? . r4fa5) (min . r4fa4) (max . r4fa3) (map . r4fa2) (make-vector . r4fa1) (make-string . r4fa0) (make-rectangular . r4f9f) (make-polar . r4f9e) (magnitude . r4f9d) (log . r4f9c) (list? . r4f9b) (list-tail . r4f9a) (list-ref . r4f99) (list->vector . r4f98) (list->string . r4f97) (list . r4f96) (length . r4f95) (lcm . r4f94) (integer? . r4f93) (integer-valued? . r4f92) (integer->char . r4f91) (infinite? . r4f90) (inexact? . r4f8f) (inexact . r4f8e) (imag-part . r4f8d) (gcd . r4f8c) (for-each . r4f8b) (floor . r4f8a) (finite? . r4f89) (expt . r4f88) (exp . r4f87) (exact? . r4f86) (exact-integer-sqrt . r4f85) (exact . r4f84) (even? . r4f83) (error . r4f82) (eqv? . r4f81) (equal? . r4f80) (eq? . r4f7f) (dynamic-wind . r4f7e) (div0-and-mod0 . r4f7d) (mod0 . r4f7c) (div0 . r4f7b) (div-and-mod . r4f7a) (mod . r4f79) (div . r4f78) (denominator . r4f77) (cos . r4f76) (cons . r4f75) (complex? . r4f74) (char? . r4f73) (char>? . r4f72) (char>=? . r4f71) (char=? . r4f70) (char<? . r4f6f) (char<=? . r4f6e) (char->integer . r4f6d) (ceiling . r4f6c) (call-with-values . r4f6b) (call/cc . r4f6a) (call-with-current-continuation . r4f69) (cddddr . r4f68) (cdddar . r4f67) (cddadr . r4f66) (cddaar . r4f65) (cdaddr . r4f64) (cdadar . r4f63) (cdaadr . r4f62) (cdaaar . r4f61) (cadddr . r4f60) (caddar . r4f5f) (cadadr . r4f5e) (cadaar . r4f5d) (caaddr . r4f5c) (caadar . r4f5b) (caaadr . r4f5a) (caaaar . r4f59) (cdddr . r4f58) (cddar . r4f57) (cdadr . r4f56) (cdaar . r4f55) (caddr . r4f54) (cadar . r4f53) (caadr . r4f52) (caaar . r4f51) (cddr . r4f50) (cdar . r4f4f) (cadr . r4f4e) (caar . r4f4d) (cdr . r4f4c) (car . r4f4b) (boolean? . r4f4a) (boolean=? . r4f49) (atan . r4f48) (assertion-violation . r4f47) (asin . r4f46) (apply . r4f45) (append . r4f44) (angle . r4f43) (acos . r4f42) (abs . r4f41) (/ . r4f40) (* . r4f3f) (- . r4f3e) (+ . r4f3d) (>= . r4f3c) (> . r4f3b) (= . r4f3a) (<= . r4f39) (< . r4f38) (library . r4f37) (&no-nans . r4f36) (&no-infinities . r4f35) (&i/o-encoding . r4f34) (&i/o-decoding . r4f33) (&i/o-port . r4f32) (&i/o-file-does-not-exist . r4f31) (&i/o-file-already-exists . r4f30) (&i/o-file-is-read-only . r4f2f) (&i/o-file-protection . r4f2e) (&i/o-filename . r4f2d) (&i/o-invalid-position . r4f2c) (&i/o-write . r4f2b) (&i/o-read . r4f2a) (&i/o . r4f29) (&undefined . r4f28) (&syntax . r4f27) (&lexical . r4f26) (&implementation-restriction . r4f25) (&non-continuable . r4f24) (&who . r4f23) (&irritants . r4f22) (&assertion . r4f21) (&violation . r4f20) (&error . r4f1f) (&serious . r4f1e) (&warning . r4f1d) (&message . r4f1c) (&condition . r4f1b) (define-condition-type . r4f1a) (define-enumeration . r4f19) (define-record-type . r4f18) (parent-rtd . r4f17) (nongenerative . r4f16) (opaque . r4f15) (sealed . r4f14) (protocol . r4f13) (parent . r4f12) (immutable . r4f11) (mutable . r4f10) (fields . r4f0f) (error-handling-mode . r4f0e) (file-options . r4f0d) (buffer-mode . r4f0c) (eol-style . r4f0b) (guard . r4f0a) (unsyntax-splicing . r4f07) (unsyntax . r4f06) (unquote-splicing . r4f05) (unquote . r4f04) (_ . r4f03) (else . r4f02) (=> . r4f01) (... . r4f00) (assert . r4eff) (endianness . r4efe) (time . r4efc) (do . r4efb) (cond . r4efa) (let* . r4ef9) (let . r4ef8) (let*-values . r4ef7) (let-values . r4ef6) (identifier-syntax . r4ef5) (with-syntax . r4ef4) (quasisyntax . r4ef3) (quasiquote . r4ef2) (syntax-rules . r4ef1) (include . r4ef0) (record-constructor-descriptor . r4eee) (record-type-descriptor . r4eed) (case . r4eec) (unless . r4eea) (when . r4ee9) (or . r4ee8) (and . r4ee7) (if . r4ee6) (letrec* . r4ee5) (letrec . r4ee4) (case-lambda . r4ee2) (lambda . r4ee1) (syntax . r4ee0) (syntax-case . r4edf) (quote . r4ede) (letrec-syntax . r4edc) (let-syntax . r4edb) (set! . r4eda) (import . r4ed9) (begin . r4ed8) (define-syntax . r4ed6) (define . r4ed5)) '() values values '#f '#f '#t '#f) (r2b16@r29b5@install-library 'r51f4 '(psyntax null-environment-5) '() '() '() '() '((make-promise . r50b5) (unquote-splicing . r4f05) (unquote . r4f04) (_ . r4f03) (else . r4f02) (=> . r4f01) (... . r4f00) (delay . r4efd) (do . r4efb) (cond . r4efa) (let* . r4ef9) (let . r4ef8) (quasiquote . r4ef2) (syntax-rules . r4ef1) (case . r4eec) (or . r4ee8) (and . r4ee7) (if . r4ee6) (letrec . r4ee4) (lambda . r4ee1) (quote . r4ede) (letrec-syntax . r4edc) (let-syntax . r4edb) (set! . r4eda) (begin . r4ed8) (define-syntax . r4ed6) (define . r4ed5)) '() values values '#f '#f '#t '#f) (r2b16@r29b5@install-library 'r51f5 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . r514a) (string-ci>=? . r5149) (string-ci=? . r5148) (string-ci<? . r5147) (string-ci<=? . r5146) (char-whitespace? . r5145) (char-upper-case? . r5144) (char-numeric? . r5142) (char-lower-case? . r5141) (char-upcase . r513f) (char-downcase . r513c) (char-ci>? . r513b) (char-ci>=? . r513a) (char-ci=? . r5139) (char-ci<? . r5138) (char-ci<=? . r5137) (char-alphabetic? . r5136) (call-with-output-file . r510a) (call-with-input-file . r5109) (write-char . r5108) (write . r5107) (with-output-to-file . r5106) (with-input-from-file . r5105) (read-char . r5104) (read . r5103) (peek-char . r5102) (open-output-file . r5101) (open-input-file . r5100) (newline . r50ff) (display . r50fe) (close-output-port . r50fd) (close-input-port . r50fc) (eof-object . r50fa) (current-output-port . r50f8) (current-input-port . r50f7) (output-port? . r50f6) (input-port? . r50f5) (scheme-report-environment . r2fc3) (quotient . r50bb) (null-environment . r2fc1) (remainder . r50ba) (modulo . r50b9) (inexact->exact . r50b8) (force . r50b7) (exact->inexact . r50b6) (make-promise . r50b5) (string-fill! . r50b3) (string-set! . r50b2) (set-cdr! . r50b1) (set-car! . r50b0) (memv . r50aa) (memq . r50a9) (member . r50a7) (assv . r509f) (assq . r509e) (assoc . r509c) (eval . r2fc7) (zero? . r4fd9) (vector? . r4fd8) (vector-set! . r4fd7) (vector-ref . r4fd6) (vector-length . r4fd4) (vector-fill! . r4fd2) (vector->list . r4fd1) (vector . r4fd0) (values . r4fcf) (truncate . r4fce) (tan . r4fcd) (symbol? . r4fcc) (symbol->string . r4fca) (substring . r4fc9) (string? . r4fc8) (string>? . r4fc7) (string>=? . r4fc6) (string=? . r4fc5) (string<? . r4fc4) (string<=? . r4fc3) (string-ref . r4fc2) (string-length . r4fc1) (string-copy . r4fbf) (string-append . r4fbe) (string->symbol . r4fbd) (string->number . r4fbc) (string->list . r4fbb) (string . r4fba) (sqrt . r4fb9) (sin . r4fb8) (round . r4fb7) (reverse . r4fb6) (real? . r4fb5) (real-part . r4fb3) (rationalize . r4fb2) (rational? . r4fb1) (procedure? . r4faf) (positive? . r4fae) (pair? . r4fad) (odd? . r4fac) (numerator . r4fab) (number? . r4faa) (number->string . r4fa9) (not . r4fa7) (negative? . r4fa6) (min . r4fa4) (max . r4fa3) (map . r4fa2) (make-vector . r4fa1) (make-string . r4fa0) (make-rectangular . r4f9f) (make-polar . r4f9e) (magnitude . r4f9d) (log . r4f9c) (list? . r4f9b) (list-tail . r4f9a) (list-ref . r4f99) (list->vector . r4f98) (list->string . r4f97) (list . r4f96) (length . r4f95) (lcm . r4f94) (integer? . r4f93) (integer->char . r4f91) (inexact? . r4f8f) (imag-part . r4f8d) (gcd . r4f8c) (for-each . r4f8b) (floor . r4f8a) (expt . r4f88) (exp . r4f87) (exact? . r4f86) (even? . r4f83) (eqv? . r4f81) (equal? . r4f80) (eq? . r4f7f) (dynamic-wind . r4f7e) (denominator . r4f77) (cos . r4f76) (cons . r4f75) (complex? . r4f74) (char? . r4f73) (char>? . r4f72) (char>=? . r4f71) (char=? . r4f70) (char<? . r4f6f) (char<=? . r4f6e) (char->integer . r4f6d) (ceiling . r4f6c) (call-with-values . r4f6b) (call-with-current-continuation . r4f69) (cddddr . r4f68) (cdddar . r4f67) (cddadr . r4f66) (cddaar . r4f65) (cdaddr . r4f64) (cdadar . r4f63) (cdaadr . r4f62) (cdaaar . r4f61) (cadddr . r4f60) (caddar . r4f5f) (cadadr . r4f5e) (cadaar . r4f5d) (caaddr . r4f5c) (caadar . r4f5b) (caaadr . r4f5a) (caaaar . r4f59) (cdddr . r4f58) (cddar . r4f57) (cdadr . r4f56) (cdaar . r4f55) (caddr . r4f54) (cadar . r4f53) (caadr . r4f52) (caaar . r4f51) (cddr . r4f50) (cdar . r4f4f) (cadr . r4f4e) (caar . r4f4d) (cdr . r4f4c) (car . r4f4b) (boolean? . r4f4a) (atan . r4f48) (asin . r4f46) (apply . r4f45) (append . r4f44) (angle . r4f43) (acos . r4f42) (abs . r4f41) (/ . r4f40) (* . r4f3f) (- . r4f3e) (+ . r4f3d) (>= . r4f3c) (> . r4f3b) (= . r4f3a) (<= . r4f39) (< . r4f38) (unquote-splicing . r4f05) (unquote . r4f04) (else . r4f02) (=> . r4f01) (... . r4f00) (delay . r4efd) (do . r4efb) (cond . r4efa) (let* . r4ef9) (let . r4ef8) (quasiquote . r4ef2) (syntax-rules . r4ef1) (case . r4eec) (or . r4ee8) (and . r4ee7) (if . r4ee6) (letrec . r4ee4) (lambda . r4ee1) (quote . r4ede) (letrec-syntax . r4edc) (let-syntax . r4edb) (set! . r4eda) (begin . r4ed8) (define-syntax . r4ed6) (define . r4ed5)) '() values values '#f '#f '#t '#f) (r2b16@r29b5@install-library 'r51f6 '(psyntax modules) '() '() '() '() '((module . r4ed7)) '() values values '#f '#f '#t '#f) (r2b16@r29b5@install-library 'r51f7 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (r2b16@r29b5@install-library 'r51f8 '(rnrs) '(6) '() '() '() '((regexp? . r51eb) (string-upcase . r5152) (string-titlecase . r5151) (string-normalize-nfkd . r5150) (string-normalize-nfkc . r514f) (string-normalize-nfd . r514e) (string-normalize-nfc . r514d) (string-foldcase . r514c) (string-downcase . r514b) (string-ci>? . r514a) (string-ci>=? . r5149) (string-ci=? . r5148) (string-ci<? . r5147) (string-ci<=? . r5146) (char-whitespace? . r5145) (char-upper-case? . r5144) (char-title-case? . r5143) (char-numeric? . r5142) (char-lower-case? . r5141) (char-general-category . r5140) (char-upcase . r513f) (char-titlecase . r513e) (char-foldcase . r513d) (char-downcase . r513c) (char-ci>? . r513b) (char-ci>=? . r513a) (char-ci=? . r5139) (char-ci<? . r5138) (char-ci<=? . r5137) (char-alphabetic? . r5136) (make-variable-transformer . r2d2b) (identifier? . r2fe9) (generate-temporaries . r2fd5) (free-identifier=? . r2fd7) (syntax->datum . r2fed) (datum->syntax . r2feb) (bound-identifier=? . r2fd9) (record-type-descriptor? . r5135) (record-predicate . r5134) (record-mutator . r5133) (record-constructor . r5132) (record-accessor . r5131) (make-record-type-descriptor . r5130) (make-record-constructor-descriptor . r512f) (record? . r512e) (record-type-uid . r512d) (record-type-sealed? . r512c) (record-type-parent . r512b) (record-type-opaque? . r512a) (record-type-name . r5129) (record-type-generative? . r5128) (record-type-field-names . r5127) (record-rtd . r5126) (record-field-mutable? . r5125) (delete-file . r5124) (file-exists? . r5123) (vector-sort! . r5122) (vector-sort . r5121) (list-sort . r5120) (symbol-hash . r511f) (string-ci-hash . r511e) (string-hash . r511d) (equal-hash . r511c) (hashtable-equivalence-function . r511b) (make-hashtable . r511a) (hashtable-hash-function . r5119) (make-eqv-hashtable . r5118) (make-eq-hashtable . r5117) (hashtable? . r5116) (hashtable-update! . r5115) (hashtable-size . r5114) (hashtable-set! . r5113) (hashtable-ref . r5112) (hashtable-mutable? . r5111) (hashtable-keys . r5110) (hashtable-entries . r510f) (hashtable-delete! . r510e) (hashtable-copy . r510d) (hashtable-contains? . r510c) (hashtable-clear! . r510b) (call-with-output-file . r510a) (call-with-input-file . r5109) (write-char . r5108) (write . r5107) (with-output-to-file . r5106) (with-input-from-file . r5105) (read-char . r5104) (read . r5103) (peek-char . r5102) (open-output-file . r5101) (open-input-file . r5100) (newline . r50ff) (display . r50fe) (close-output-port . r50fd) (close-input-port . r50fc) (eof-object? . r50fb) (eof-object . r50fa) (current-error-port . r50f9) (current-output-port . r50f8) (current-input-port . r50f7) (output-port? . r50f6) (input-port? . r50f5) (utf-8-codec . r50f4) (utf-16-codec . r50f3) (transcoder-error-handling-mode . r50f2) (transcoder-eol-style . r50f1) (transcoder-codec . r50f0) (transcoded-port . r50ef) (textual-port? . r50ee) (string->bytevector . r50ed) (standard-output-port . r50ec) (standard-input-port . r50eb) (standard-error-port . r50ea) (set-port-position! . r50e9) (put-u8 . r50e8) (put-string . r50e7) (put-datum . r50e6) (put-char . r50e5) (put-bytevector . r50e4) (port? . r50e3) (port-transcoder . r50e2) (port-position . r50e1) (port-has-set-port-position!? . r50e0) (port-has-port-position? . r50df) (port-eof? . r50de) (output-port-buffer-mode . r50dd) (open-string-output-port . r50dc) (open-string-input-port . r50db) (open-file-output-port . r50da) (open-file-input/output-port . r50d9) (open-file-input-port . r50d8) (open-bytevector-output-port . r50d7) (open-bytevector-input-port . r50d6) (native-transcoder . r50d5) (native-eol-style . r50d4) (make-transcoder . r50d3) (latin-1-codec . r50d2) (make-i/o-write-error . r4ba3) (make-i/o-read-error . r4b8e) (make-i/o-port-error . r4c44) (make-i/o-invalid-position-error . r4bba) (make-i/o-filename-error . r4bd5) (make-i/o-file-protection-error . r4bee) (make-i/o-file-is-read-only-error . r4c03) (make-i/o-file-does-not-exist-error . r4c2d) (make-i/o-file-already-exists-error . r4c18) (make-i/o-error . r4b79) (make-i/o-encoding-error . r4c74) (make-i/o-decoding-error . r4c5d) (make-custom-textual-output-port . r50d1) (make-custom-textual-input/output-port . r50d0) (make-custom-textual-input-port . r50cf) (make-custom-binary-output-port . r50ce) (make-custom-binary-input/output-port . r50cd) (make-custom-binary-input-port . r50cc) (make-bytevector . r50cb) (lookahead-u8 . r50ca) (lookahead-char . r50c9) (i/o-write-error? . r4ba5) (i/o-read-error? . r4b90) (i/o-port-error? . r4c48) (i/o-invalid-position-error? . r4bbe) (i/o-filename-error? . r4bd9) (i/o-file-protection-error? . r4bf0) (i/o-file-is-read-only-error? . r4c05) (i/o-file-does-not-exist-error? . r4c2f) (i/o-file-already-exists-error? . r4c1a) (i/o-error? . r4b7b) (i/o-error-position . r4bc0) (i/o-error-port . r4c4a) (i/o-error-filename . r4bdb) (i/o-encoding-error? . r4c78) (i/o-encoding-error-char . r4c7a) (i/o-decoding-error? . r4c5f) (get-u8 . r50c8) (get-string-n! . r50c7) (get-string-n . r50c6) (get-string-all . r50c5) (get-line . r50c4) (get-datum . r50c3) (get-char . r50c2) (get-bytevector-some . r50c1) (get-bytevector-n! . r50c0) (get-bytevector-n . r50bf) (get-bytevector-all . r50be) (flush-output-port . r50bd) (close-port . r50bc) (exit . r50b4) (command-line . r4daf) (remove . r50af) (remv . r50ae) (remp . r50ad) (remq . r50ac) (partition . r50ab) (memv . r50aa) (memq . r50a9) (memp . r50a8) (member . r50a7) (exists . r50a6) (for-all . r50a5) (fold-right . r50a4) (fold-left . r50a3) (find . r50a2) (filter . r50a1) (cons* . r50a0) (assv . r509f) (assq . r509e) (assp . r509d) (assoc . r509c) (call-with-string-output-port . r509b) (call-with-port . r509a) (call-with-bytevector-output-port . r5099) (bytevector->string . r5098) (buffer-mode? . r5097) (binary-port? . r5096) (with-exception-handler . r5095) (raise-continuable . r5094) (raise . r5093) (make-enumeration . r5092) (enum-set=? . r5091) (enum-set-universe . r5090) (enum-set-union . r508f) (enum-set-subset? . r508e) (enum-set-projection . r508d) (enum-set-member? . r508c) (enum-set-intersection . r508b) (enum-set-indexer . r508a) (enum-set-difference . r5089) (enum-set-constructor . r5088) (enum-set-complement . r5087) (enum-set->list . r5086) (who-condition? . r4aef) (warning? . r4a67) (violation? . r4aa6) (undefined-violation? . r4b66) (syntax-violation? . r4b4d) (syntax-violation-subform . r4b51) (syntax-violation-form . r4b4f) (syntax-violation . r2fe7) (simple-conditions . r5085) (serious-condition? . r4a7c) (non-continuable-violation? . r4b06) (message-condition? . r4a50) (make-who-condition . r4aeb) (make-warning . r4a65) (make-violation . r4aa4) (make-undefined-violation . r4b64) (make-syntax-violation . r4b47) (make-serious-condition . r4a7a) (make-non-continuable-violation . r4b04) (make-message-condition . r4a4c) (make-lexical-violation . r4b2e) (make-irritants-condition . r4ad0) (make-implementation-restriction-violation . r4b19) (make-error . r4a8f) (make-assertion-violation . r4ab9) (lexical-violation? . r4b30) (irritants-condition? . r4ad4) (implementation-restriction-violation? . r4b1b) (error? . r4a91) (condition-who . r4af1) (condition-predicate . r5084) (condition-message . r4a52) (condition-irritants . r4ad6) (condition-accessor . r5083) (condition . r5082) (assertion-violation? . r4abb) (condition? . r5081) (utf32->string . r5080) (utf16->string . r507f) (utf8->string . r507e) (uint-list->bytevector . r507d) (u8-list->bytevector . r507c) (string->utf8 . r507b) (string->utf32 . r507a) (string->utf16 . r5079) (sint-list->bytevector . r5078) (native-endianness . r5077) (bytevector? . r5076) (bytevector=? . r5075) (bytevector-uint-set! . r5074) (bytevector-uint-ref . r5073) (bytevector-u8-set! . r5072) (bytevector-u8-ref . r5071) (bytevector-u64-set! . r5070) (bytevector-u64-ref . r506f) (bytevector-u64-native-set! . r506e) (bytevector-u64-native-ref . r506d) (bytevector-u32-set! . r506c) (bytevector-u32-ref . r506b) (bytevector-u32-native-set! . r506a) (bytevector-u32-native-ref . r5069) (bytevector-u16-set! . r5068) (bytevector-u16-ref . r5067) (bytevector-u16-native-set! . r5066) (bytevector-u16-native-ref . r5065) (bytevector-sint-set! . r5064) (bytevector-sint-ref . r5063) (bytevector-s8-set! . r5062) (bytevector-s8-ref . r5061) (bytevector-s64-set! . r5060) (bytevector-s64-ref . r505f) (bytevector-s64-native-set! . r505e) (bytevector-s64-native-ref . r505d) (bytevector-s32-set! . r505c) (bytevector-s32-ref . r505b) (bytevector-s32-native-set! . r505a) (bytevector-s32-native-ref . r5059) (bytevector-s16-set! . r5058) (bytevector-s16-ref . r5057) (bytevector-s16-native-set! . r5056) (bytevector-s16-native-ref . r5055) (bytevector-length . r5054) (bytevector-ieee-single-ref . r5053) (bytevector-ieee-single-set! . r5052) (bytevector-ieee-single-native-set! . r5051) (bytevector-ieee-single-native-ref . r5050) (bytevector-ieee-double-set! . r504f) (bytevector-ieee-double-ref . r504e) (bytevector-ieee-double-native-set! . r504d) (bytevector-ieee-double-native-ref . r504c) (bytevector-fill! . r504b) (bytevector-copy! . r504a) (bytevector-copy . r5049) (bytevector->uint-list . r5048) (bytevector->u8-list . r5047) (bytevector->sint-list . r5046) (no-nans-violation? . r4ca4) (no-infinities-violation? . r4c8f) (make-no-nans-violation . r4ca2) (make-no-infinities-violation . r4c8d) (real->flonum . r5045) (flzero? . r5044) (fltruncate . r5043) (fltan . r5042) (flsqrt . r5041) (flsin . r5040) (flround . r503f) (flpositive? . r503e) (flonum? . r503d) (flodd? . r503c) (flnumerator . r503b) (flnegative? . r503a) (flnan? . r5039) (flmod0 . r5038) (flmod . r5037) (flmin . r5036) (flmax . r5035) (fllog . r5034) (flinteger? . r5033) (flinfinite? . r5032) (flfloor . r5031) (flfinite? . r5030) (flexpt . r502f) (flexp . r502e) (fleven? . r502d) (fldiv0-and-mod0 . r502c) (fldiv0 . r502b) (fldiv-and-mod . r502a) (fldiv . r5029) (fldenominator . r5028) (flcos . r5027) (flceiling . r5026) (flatan . r5025) (flasin . r5024) (flacos . r5023) (flabs . r5022) (fl>? . r5021) (fl>=? . r5020) (fl=? . r501f) (fl<? . r501e) (fl<=? . r501d) (fl/ . r501c) (fl- . r501b) (fl+ . r501a) (fl* . r5019) (fixnum->flonum . r5018) (fxzero? . r5017) (fxxor . r5016) (fxrotate-bit-field . r5015) (fxreverse-bit-field . r5014) (fxpositive? . r5013) (fxodd? . r5012) (fxnot . r5011) (fxnegative? . r5010) (fxmod0 . r500f) (fxmod . r500e) (fxmin . r500d) (fxmax . r500c) (fxlength . r500b) (fxior . r500a) (fxif . r5009) (fxfirst-bit-set . r5008) (fxeven? . r5007) (fxdiv0-and-mod0 . r5006) (fxdiv0 . r5005) (fxdiv-and-mod . r5004) (fxdiv . r5003) (fxcopy-bit-field . r5002) (fxcopy-bit . r5001) (fxbit-set? . r5000) (fxbit-field . r4fff) (fxbit-count . r4ffe) (fxarithmetic-shift-right . r4ffd) (fxarithmetic-shift-left . r4ffc) (fxarithmetic-shift . r4ffb) (fxand . r4ffa) (fx>? . r4ff9) (fx>=? . r4ff8) (fx=? . r4ff7) (fx<? . r4ff6) (fx<=? . r4ff5) (fx-/carry . r4ff4) (fx- . r4ff3) (fx+/carry . r4ff2) (fx+ . r4ff1) (fx*/carry . r4ff0) (fx* . r4fef) (greatest-fixnum . r4fee) (least-fixnum . r4fed) (fixnum-width . r4fec) (fixnum? . r4feb) (bitwise-rotate-bit-field . r4fea) (bitwise-reverse-bit-field . r4fe9) (bitwise-length . r4fe8) (bitwise-if . r4fe7) (bitwise-first-bit-set . r4fe6) (bitwise-copy-bit-field . r4fe5) (bitwise-copy-bit . r4fe4) (bitwise-bit-set? . r4fe3) (bitwise-bit-field . r4fe2) (bitwise-bit-count . r4fe1) (bitwise-xor . r4fe0) (bitwise-ior . r4fdf) (bitwise-and . r4fde) (bitwise-not . r4fdd) (bitwise-arithmetic-shift-right . r4fdc) (bitwise-arithmetic-shift-left . r4fdb) (bitwise-arithmetic-shift . r4fda) (zero? . r4fd9) (vector? . r4fd8) (vector-set! . r4fd7) (vector-ref . r4fd6) (vector-map . r4fd5) (vector-length . r4fd4) (vector-for-each . r4fd3) (vector-fill! . r4fd2) (vector->list . r4fd1) (vector . r4fd0) (values . r4fcf) (truncate . r4fce) (tan . r4fcd) (symbol? . r4fcc) (symbol=? . r4fcb) (symbol->string . r4fca) (substring . r4fc9) (string? . r4fc8) (string>? . r4fc7) (string>=? . r4fc6) (string=? . r4fc5) (string<? . r4fc4) (string<=? . r4fc3) (string-ref . r4fc2) (string-length . r4fc1) (string-for-each . r4fc0) (string-copy . r4fbf) (string-append . r4fbe) (string->symbol . r4fbd) (string->number . r4fbc) (string->list . r4fbb) (string . r4fba) (sqrt . r4fb9) (sin . r4fb8) (round . r4fb7) (reverse . r4fb6) (real? . r4fb5) (real-valued? . r4fb4) (real-part . r4fb3) (rationalize . r4fb2) (rational? . r4fb1) (rational-valued? . r4fb0) (procedure? . r4faf) (positive? . r4fae) (pair? . r4fad) (odd? . r4fac) (numerator . r4fab) (number? . r4faa) (number->string . r4fa9) (null? . r4fa8) (not . r4fa7) (negative? . r4fa6) (nan? . r4fa5) (min . r4fa4) (max . r4fa3) (map . r4fa2) (make-vector . r4fa1) (make-string . r4fa0) (make-rectangular . r4f9f) (make-polar . r4f9e) (magnitude . r4f9d) (log . r4f9c) (list? . r4f9b) (list-tail . r4f9a) (list-ref . r4f99) (list->vector . r4f98) (list->string . r4f97) (list . r4f96) (length . r4f95) (lcm . r4f94) (integer? . r4f93) (integer-valued? . r4f92) (integer->char . r4f91) (infinite? . r4f90) (inexact? . r4f8f) (inexact . r4f8e) (imag-part . r4f8d) (gcd . r4f8c) (for-each . r4f8b) (floor . r4f8a) (finite? . r4f89) (expt . r4f88) (exp . r4f87) (exact? . r4f86) (exact-integer-sqrt . r4f85) (exact . r4f84) (even? . r4f83) (error . r4f82) (eqv? . r4f81) (equal? . r4f80) (eq? . r4f7f) (dynamic-wind . r4f7e) (div0-and-mod0 . r4f7d) (mod0 . r4f7c) (div0 . r4f7b) (div-and-mod . r4f7a) (mod . r4f79) (div . r4f78) (denominator . r4f77) (cos . r4f76) (cons . r4f75) (complex? . r4f74) (char? . r4f73) (char>? . r4f72) (char>=? . r4f71) (char=? . r4f70) (char<? . r4f6f) (char<=? . r4f6e) (char->integer . r4f6d) (ceiling . r4f6c) (call-with-values . r4f6b) (call/cc . r4f6a) (call-with-current-continuation . r4f69) (cddddr . r4f68) (cdddar . r4f67) (cddadr . r4f66) (cddaar . r4f65) (cdaddr . r4f64) (cdadar . r4f63) (cdaadr . r4f62) (cdaaar . r4f61) (cadddr . r4f60) (caddar . r4f5f) (cadadr . r4f5e) (cadaar . r4f5d) (caaddr . r4f5c) (caadar . r4f5b) (caaadr . r4f5a) (caaaar . r4f59) (cdddr . r4f58) (cddar . r4f57) (cdadr . r4f56) (cdaar . r4f55) (caddr . r4f54) (cadar . r4f53) (caadr . r4f52) (caaar . r4f51) (cddr . r4f50) (cdar . r4f4f) (cadr . r4f4e) (caar . r4f4d) (cdr . r4f4c) (car . r4f4b) (boolean? . r4f4a) (boolean=? . r4f49) (atan . r4f48) (assertion-violation . r4f47) (asin . r4f46) (apply . r4f45) (append . r4f44) (angle . r4f43) (acos . r4f42) (abs . r4f41) (/ . r4f40) (* . r4f3f) (- . r4f3e) (+ . r4f3d) (>= . r4f3c) (> . r4f3b) (= . r4f3a) (<= . r4f39) (< . r4f38) (&no-nans . r4f36) (&no-infinities . r4f35) (&i/o-encoding . r4f34) (&i/o-decoding . r4f33) (&i/o-port . r4f32) (&i/o-file-does-not-exist . r4f31) (&i/o-file-already-exists . r4f30) (&i/o-file-is-read-only . r4f2f) (&i/o-file-protection . r4f2e) (&i/o-filename . r4f2d) (&i/o-invalid-position . r4f2c) (&i/o-write . r4f2b) (&i/o-read . r4f2a) (&i/o . r4f29) (&undefined . r4f28) (&syntax . r4f27) (&lexical . r4f26) (&implementation-restriction . r4f25) (&non-continuable . r4f24) (&who . r4f23) (&irritants . r4f22) (&assertion . r4f21) (&violation . r4f20) (&error . r4f1f) (&serious . r4f1e) (&warning . r4f1d) (&message . r4f1c) (&condition . r4f1b) (define-condition-type . r4f1a) (define-enumeration . r4f19) (define-record-type . r4f18) (parent-rtd . r4f17) (nongenerative . r4f16) (opaque . r4f15) (sealed . r4f14) (protocol . r4f13) (parent . r4f12) (immutable . r4f11) (mutable . r4f10) (fields . r4f0f) (error-handling-mode . r4f0e) (file-options . r4f0d) (buffer-mode . r4f0c) (eol-style . r4f0b) (guard . r4f0a) (unsyntax-splicing . r4f07) (unsyntax . r4f06) (unquote-splicing . r4f05) (unquote . r4f04) (_ . r4f03) (else . r4f02) (=> . r4f01) (... . r4f00) (assert . r4eff) (endianness . r4efe) (do . r4efb) (cond . r4efa) (let* . r4ef9) (let . r4ef8) (let*-values . r4ef7) (let-values . r4ef6) (identifier-syntax . r4ef5) (with-syntax . r4ef4) (quasisyntax . r4ef3) (quasiquote . r4ef2) (syntax-rules . r4ef1) (record-constructor-descriptor . r4eee) (record-type-descriptor . r4eed) (case . r4eec) (unless . r4eea) (when . r4ee9) (or . r4ee8) (and . r4ee7) (if . r4ee6) (letrec* . r4ee5) (letrec . r4ee4) (case-lambda . r4ee2) (lambda . r4ee1) (syntax . r4ee0) (syntax-case . r4edf) (quote . r4ede) (letrec-syntax . r4edc) (let-syntax . r4edb) (set! . r4eda) (begin . r4ed8) (define-syntax . r4ed6) (define . r4ed5)) '() values values '#f '#f '#t '#f) (r2b16@r29b5@install-library 'r51f9 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . r2fc3) (quotient . r50bb) (null-environment . r2fc1) (remainder . r50ba) (modulo . r50b9) (inexact->exact . r50b8) (force . r50b7) (exact->inexact . r50b6) (make-promise . r50b5) (delay . r4efd)) '() values values '#f '#f '#t '#f) (r2b16@r29b5@install-library 'r51fa '(rnrs control) '(6) '() '() '() '((do . r4efb) (unless . r4eea) (when . r4ee9) (case-lambda . r4ee2)) '() values values '#f '#f '#t '#f) (r2b16@r29b5@install-library 'r51fb '(rnrs eval) '(6) '() '() '() '((eval . r2fc7) (environment . r2fbf)) '() values values '#f '#f '#t '#f) (r2b16@r29b5@install-library 'r51fc '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . r50b1) (set-car! . r50b0)) '() values values '#f '#f '#t '#f) (r2b16@r29b5@install-library 'r51fd '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . r50b3) (string-set! . r50b2)) '() values values '#f '#f '#t '#f) (r2b16@r29b5@install-library 'r51fe '(rnrs programs) '(6) '() '() '() '((exit . r50b4) (command-line . r4daf)) '() values values '#f '#f '#t '#f) (r2b16@r29b5@install-library 'r51ff '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . r2d2b) (identifier? . r2fe9) (generate-temporaries . r2fd5) (free-identifier=? . r2fd7) (syntax->datum . r2fed) (datum->syntax . r2feb) (bound-identifier=? . r2fd9) (syntax-violation . r2fe7) (unsyntax-splicing . r4f07) (unsyntax . r4f06) (_ . r4f03) (... . r4f00) (with-syntax . r4ef4) (quasisyntax . r4ef3) (syntax . r4ee0) (syntax-case . r4edf)) '() values values '#f '#f '#t '#f) (r2b16@r29b5@install-library 'r5200 '(rnrs files) '(6) '() '() '() '((delete-file . r5124) (file-exists? . r5123) (make-i/o-write-error . r4ba3) (make-i/o-read-error . r4b8e) (make-i/o-port-error . r4c44) (make-i/o-invalid-position-error . r4bba) (make-i/o-filename-error . r4bd5) (make-i/o-file-protection-error . r4bee) (make-i/o-file-is-read-only-error . r4c03) (make-i/o-file-does-not-exist-error . r4c2d) (make-i/o-file-already-exists-error . r4c18) (make-i/o-error . r4b79) (i/o-write-error? . r4ba5) (i/o-read-error? . r4b90) (i/o-port-error? . r4c48) (i/o-invalid-position-error? . r4bbe) (i/o-filename-error? . r4bd9) (i/o-file-protection-error? . r4bf0) (i/o-file-is-read-only-error? . r4c05) (i/o-file-does-not-exist-error? . r4c2f) (i/o-file-already-exists-error? . r4c1a) (i/o-error? . r4b7b) (i/o-error-position . r4bc0) (i/o-error-port . r4c4a) (i/o-error-filename . r4bdb) (&i/o-port . r4f32) (&i/o-file-does-not-exist . r4f31) (&i/o-file-already-exists . r4f30) (&i/o-file-is-read-only . r4f2f) (&i/o-file-protection . r4f2e) (&i/o-filename . r4f2d) (&i/o-invalid-position . r4f2c) (&i/o-write . r4f2b) (&i/o-read . r4f2a) (&i/o . r4f29)) '() values values '#f '#f '#t '#f) (r2b16@r29b5@install-library 'r5201 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . r5122) (vector-sort . r5121) (list-sort . r5120)) '() values values '#f '#f '#t '#f) (r2b16@r29b5@install-library 'r5202 '(rnrs base) '(6) '() '() '() '((zero? . r4fd9) (vector? . r4fd8) (vector-set! . r4fd7) (vector-ref . r4fd6) (vector-map . r4fd5) (vector-length . r4fd4) (vector-for-each . r4fd3) (vector-fill! . r4fd2) (vector->list . r4fd1) (vector . r4fd0) (values . r4fcf) (truncate . r4fce) (tan . r4fcd) (symbol? . r4fcc) (symbol=? . r4fcb) (symbol->string . r4fca) (substring . r4fc9) (string? . r4fc8) (string>? . r4fc7) (string>=? . r4fc6) (string=? . r4fc5) (string<? . r4fc4) (string<=? . r4fc3) (string-ref . r4fc2) (string-length . r4fc1) (string-for-each . r4fc0) (string-copy . r4fbf) (string-append . r4fbe) (string->symbol . r4fbd) (string->number . r4fbc) (string->list . r4fbb) (string . r4fba) (sqrt . r4fb9) (sin . r4fb8) (round . r4fb7) (reverse . r4fb6) (real? . r4fb5) (real-valued? . r4fb4) (real-part . r4fb3) (rationalize . r4fb2) (rational? . r4fb1) (rational-valued? . r4fb0) (procedure? . r4faf) (positive? . r4fae) (pair? . r4fad) (odd? . r4fac) (numerator . r4fab) (number? . r4faa) (number->string . r4fa9) (null? . r4fa8) (not . r4fa7) (negative? . r4fa6) (nan? . r4fa5) (min . r4fa4) (max . r4fa3) (map . r4fa2) (make-vector . r4fa1) (make-string . r4fa0) (make-rectangular . r4f9f) (make-polar . r4f9e) (magnitude . r4f9d) (log . r4f9c) (list? . r4f9b) (list-tail . r4f9a) (list-ref . r4f99) (list->vector . r4f98) (list->string . r4f97) (list . r4f96) (length . r4f95) (lcm . r4f94) (integer? . r4f93) (integer-valued? . r4f92) (integer->char . r4f91) (infinite? . r4f90) (inexact? . r4f8f) (inexact . r4f8e) (imag-part . r4f8d) (gcd . r4f8c) (for-each . r4f8b) (floor . r4f8a) (finite? . r4f89) (expt . r4f88) (exp . r4f87) (exact? . r4f86) (exact-integer-sqrt . r4f85) (exact . r4f84) (even? . r4f83) (error . r4f82) (eqv? . r4f81) (equal? . r4f80) (eq? . r4f7f) (dynamic-wind . r4f7e) (div0-and-mod0 . r4f7d) (mod0 . r4f7c) (div0 . r4f7b) (div-and-mod . r4f7a) (mod . r4f79) (div . r4f78) (denominator . r4f77) (cos . r4f76) (cons . r4f75) (complex? . r4f74) (char? . r4f73) (char>? . r4f72) (char>=? . r4f71) (char=? . r4f70) (char<? . r4f6f) (char<=? . r4f6e) (char->integer . r4f6d) (ceiling . r4f6c) (call-with-values . r4f6b) (call/cc . r4f6a) (call-with-current-continuation . r4f69) (cddddr . r4f68) (cdddar . r4f67) (cddadr . r4f66) (cddaar . r4f65) (cdaddr . r4f64) (cdadar . r4f63) (cdaadr . r4f62) (cdaaar . r4f61) (cadddr . r4f60) (caddar . r4f5f) (cadadr . r4f5e) (cadaar . r4f5d) (caaddr . r4f5c) (caadar . r4f5b) (caaadr . r4f5a) (caaaar . r4f59) (cdddr . r4f58) (cddar . r4f57) (cdadr . r4f56) (cdaar . r4f55) (caddr . r4f54) (cadar . r4f53) (caadr . r4f52) (caaar . r4f51) (cddr . r4f50) (cdar . r4f4f) (cadr . r4f4e) (caar . r4f4d) (cdr . r4f4c) (car . r4f4b) (boolean? . r4f4a) (boolean=? . r4f49) (atan . r4f48) (assertion-violation . r4f47) (asin . r4f46) (apply . r4f45) (append . r4f44) (angle . r4f43) (acos . r4f42) (abs . r4f41) (/ . r4f40) (* . r4f3f) (- . r4f3e) (+ . r4f3d) (>= . r4f3c) (> . r4f3b) (= . r4f3a) (<= . r4f39) (< . r4f38) (unquote-splicing . r4f05) (unquote . r4f04) (_ . r4f03) (else . r4f02) (=> . r4f01) (... . r4f00) (assert . r4eff) (cond . r4efa) (let* . r4ef9) (let . r4ef8) (let*-values . r4ef7) (let-values . r4ef6) (identifier-syntax . r4ef5) (quasiquote . r4ef2) (syntax-rules . r4ef1) (case . r4eec) (or . r4ee8) (and . r4ee7) (if . r4ee6) (letrec* . r4ee5) (letrec . r4ee4) (lambda . r4ee1) (quote . r4ede) (letrec-syntax . r4edc) (let-syntax . r4edb) (set! . r4eda) (begin . r4ed8) (define-syntax . r4ed6) (define . r4ed5)) '() values values '#f '#f '#t '#f) (r2b16@r29b5@install-library 'r5203 '(rnrs lists) '(6) '() '() '() '((remove . r50af) (remv . r50ae) (remp . r50ad) (remq . r50ac) (partition . r50ab) (memv . r50aa) (memq . r50a9) (memp . r50a8) (member . r50a7) (exists . r50a6) (for-all . r50a5) (fold-right . r50a4) (fold-left . r50a3) (find . r50a2) (filter . r50a1) (cons* . r50a0) (assv . r509f) (assq . r509e) (assp . r509d) (assoc . r509c)) '() values values '#f '#f '#t '#f) (r2b16@r29b5@install-library 'r5204 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . r510a) (call-with-input-file . r5109) (write-char . r5108) (write . r5107) (with-output-to-file . r5106) (with-input-from-file . r5105) (read-char . r5104) (read . r5103) (peek-char . r5102) (open-output-file . r5101) (open-input-file . r5100) (newline . r50ff) (display . r50fe) (close-output-port . r50fd) (close-input-port . r50fc) (eof-object? . r50fb) (eof-object . r50fa) (current-error-port . r50f9) (current-output-port . r50f8) (current-input-port . r50f7) (output-port? . r50f6) (input-port? . r50f5) (make-i/o-write-error . r4ba3) (make-i/o-read-error . r4b8e) (make-i/o-port-error . r4c44) (make-i/o-invalid-position-error . r4bba) (make-i/o-filename-error . r4bd5) (make-i/o-file-protection-error . r4bee) (make-i/o-file-is-read-only-error . r4c03) (make-i/o-file-does-not-exist-error . r4c2d) (make-i/o-file-already-exists-error . r4c18) (make-i/o-error . r4b79) (i/o-write-error? . r4ba5) (i/o-read-error? . r4b90) (i/o-port-error? . r4c48) (i/o-invalid-position-error? . r4bbe) (i/o-filename-error? . r4bd9) (i/o-file-protection-error? . r4bf0) (i/o-file-is-read-only-error? . r4c05) (i/o-file-does-not-exist-error? . r4c2f) (i/o-file-already-exists-error? . r4c1a) (i/o-error? . r4b7b) (i/o-error-position . r4bc0) (i/o-error-port . r4c4a) (i/o-error-filename . r4bdb) (&i/o-port . r4f32) (&i/o-file-does-not-exist . r4f31) (&i/o-file-already-exists . r4f30) (&i/o-file-is-read-only . r4f2f) (&i/o-file-protection . r4f2e) (&i/o-filename . r4f2d) (&i/o-invalid-position . r4f2c) (&i/o-write . r4f2b) (&i/o-read . r4f2a) (&i/o . r4f29)) '() values values '#f '#f '#t '#f) (r2b16@r29b5@install-library 'r5205 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . r50cb) (utf32->string . r5080) (utf16->string . r507f) (utf8->string . r507e) (uint-list->bytevector . r507d) (u8-list->bytevector . r507c) (string->utf8 . r507b) (string->utf32 . r507a) (string->utf16 . r5079) (sint-list->bytevector . r5078) (native-endianness . r5077) (bytevector? . r5076) (bytevector=? . r5075) (bytevector-uint-set! . r5074) (bytevector-uint-ref . r5073) (bytevector-u8-set! . r5072) (bytevector-u8-ref . r5071) (bytevector-u64-set! . r5070) (bytevector-u64-ref . r506f) (bytevector-u64-native-set! . r506e) (bytevector-u64-native-ref . r506d) (bytevector-u32-set! . r506c) (bytevector-u32-ref . r506b) (bytevector-u32-native-set! . r506a) (bytevector-u32-native-ref . r5069) (bytevector-u16-set! . r5068) (bytevector-u16-ref . r5067) (bytevector-u16-native-set! . r5066) (bytevector-u16-native-ref . r5065) (bytevector-sint-set! . r5064) (bytevector-sint-ref . r5063) (bytevector-s8-set! . r5062) (bytevector-s8-ref . r5061) (bytevector-s64-set! . r5060) (bytevector-s64-ref . r505f) (bytevector-s64-native-set! . r505e) (bytevector-s64-native-ref . r505d) (bytevector-s32-set! . r505c) (bytevector-s32-ref . r505b) (bytevector-s32-native-set! . r505a) (bytevector-s32-native-ref . r5059) (bytevector-s16-set! . r5058) (bytevector-s16-ref . r5057) (bytevector-s16-native-set! . r5056) (bytevector-s16-native-ref . r5055) (bytevector-length . r5054) (bytevector-ieee-single-ref . r5053) (bytevector-ieee-single-set! . r5052) (bytevector-ieee-single-native-set! . r5051) (bytevector-ieee-single-native-ref . r5050) (bytevector-ieee-double-set! . r504f) (bytevector-ieee-double-ref . r504e) (bytevector-ieee-double-native-set! . r504d) (bytevector-ieee-double-native-ref . r504c) (bytevector-fill! . r504b) (bytevector-copy! . r504a) (bytevector-copy . r5049) (bytevector->uint-list . r5048) (bytevector->u8-list . r5047) (bytevector->sint-list . r5046) (endianness . r4efe)) '() values values '#f '#f '#t '#f) (r2b16@r29b5@install-library 'r5206 '(rnrs unicode) '(6) '() '() '() '((string-upcase . r5152) (string-titlecase . r5151) (string-normalize-nfkd . r5150) (string-normalize-nfkc . r514f) (string-normalize-nfd . r514e) (string-normalize-nfc . r514d) (string-foldcase . r514c) (string-downcase . r514b) (string-ci>? . r514a) (string-ci>=? . r5149) (string-ci=? . r5148) (string-ci<? . r5147) (string-ci<=? . r5146) (char-whitespace? . r5145) (char-upper-case? . r5144) (char-title-case? . r5143) (char-numeric? . r5142) (char-lower-case? . r5141) (char-general-category . r5140) (char-upcase . r513f) (char-titlecase . r513e) (char-foldcase . r513d) (char-downcase . r513c) (char-ci>? . r513b) (char-ci>=? . r513a) (char-ci=? . r5139) (char-ci<? . r5138) (char-ci<=? . r5137) (char-alphabetic? . r5136)) '() values values '#f '#f '#t '#f) (r2b16@r29b5@install-library 'r5207 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . r5095) (raise-continuable . r5094) (raise . r5093) (guard . r4f0a) (else . r4f02) (=> . r4f01)) '() values values '#f '#f '#t '#f) (r2b16@r29b5@install-library 'r5208 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . r4fea) (bitwise-reverse-bit-field . r4fe9) (bitwise-length . r4fe8) (bitwise-if . r4fe7) (bitwise-first-bit-set . r4fe6) (bitwise-copy-bit-field . r4fe5) (bitwise-copy-bit . r4fe4) (bitwise-bit-set? . r4fe3) (bitwise-bit-field . r4fe2) (bitwise-bit-count . r4fe1) (bitwise-xor . r4fe0) (bitwise-ior . r4fdf) (bitwise-and . r4fde) (bitwise-not . r4fdd) (bitwise-arithmetic-shift-right . r4fdc) (bitwise-arithmetic-shift-left . r4fdb) (bitwise-arithmetic-shift . r4fda)) '() values values '#f '#f '#t '#f) (r2b16@r29b5@install-library 'r5209 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . r5017) (fxxor . r5016) (fxrotate-bit-field . r5015) (fxreverse-bit-field . r5014) (fxpositive? . r5013) (fxodd? . r5012) (fxnot . r5011) (fxnegative? . r5010) (fxmod0 . r500f) (fxmod . r500e) (fxmin . r500d) (fxmax . r500c) (fxlength . r500b) (fxior . r500a) (fxif . r5009) (fxfirst-bit-set . r5008) (fxeven? . r5007) (fxdiv0-and-mod0 . r5006) (fxdiv0 . r5005) (fxdiv-and-mod . r5004) (fxdiv . r5003) (fxcopy-bit-field . r5002) (fxcopy-bit . r5001) (fxbit-set? . r5000) (fxbit-field . r4fff) (fxbit-count . r4ffe) (fxarithmetic-shift-right . r4ffd) (fxarithmetic-shift-left . r4ffc) (fxarithmetic-shift . r4ffb) (fxand . r4ffa) (fx>? . r4ff9) (fx>=? . r4ff8) (fx=? . r4ff7) (fx<? . r4ff6) (fx<=? . r4ff5) (fx-/carry . r4ff4) (fx- . r4ff3) (fx+/carry . r4ff2) (fx+ . r4ff1) (fx*/carry . r4ff0) (fx* . r4fef) (greatest-fixnum . r4fee) (least-fixnum . r4fed) (fixnum-width . r4fec) (fixnum? . r4feb)) '() values values '#f '#f '#t '#f) (r2b16@r29b5@install-library 'r520a '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . r4ca4) (no-infinities-violation? . r4c8f) (make-no-nans-violation . r4ca2) (make-no-infinities-violation . r4c8d) (real->flonum . r5045) (flzero? . r5044) (fltruncate . r5043) (fltan . r5042) (flsqrt . r5041) (flsin . r5040) (flround . r503f) (flpositive? . r503e) (flonum? . r503d) (flodd? . r503c) (flnumerator . r503b) (flnegative? . r503a) (flnan? . r5039) (flmod0 . r5038) (flmod . r5037) (flmin . r5036) (flmax . r5035) (fllog . r5034) (flinteger? . r5033) (flinfinite? . r5032) (flfloor . r5031) (flfinite? . r5030) (flexpt . r502f) (flexp . r502e) (fleven? . r502d) (fldiv0-and-mod0 . r502c) (fldiv0 . r502b) (fldiv-and-mod . r502a) (fldiv . r5029) (fldenominator . r5028) (flcos . r5027) (flceiling . r5026) (flatan . r5025) (flasin . r5024) (flacos . r5023) (flabs . r5022) (fl>? . r5021) (fl>=? . r5020) (fl=? . r501f) (fl<? . r501e) (fl<=? . r501d) (fl/ . r501c) (fl- . r501b) (fl+ . r501a) (fl* . r5019) (fixnum->flonum . r5018) (&no-nans . r4f36) (&no-infinities . r4f35)) '() values values '#f '#f '#t '#f) (r2b16@r29b5@install-library 'r520b '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . r511f) (string-ci-hash . r511e) (string-hash . r511d) (equal-hash . r511c) (hashtable-equivalence-function . r511b) (make-hashtable . r511a) (hashtable-hash-function . r5119) (make-eqv-hashtable . r5118) (make-eq-hashtable . r5117) (hashtable? . r5116) (hashtable-update! . r5115) (hashtable-size . r5114) (hashtable-set! . r5113) (hashtable-ref . r5112) (hashtable-mutable? . r5111) (hashtable-keys . r5110) (hashtable-entries . r510f) (hashtable-delete! . r510e) (hashtable-copy . r510d) (hashtable-contains? . r510c) (hashtable-clear! . r510b)) '() values values '#f '#f '#t '#f) (r2b16@r29b5@install-library 'r520c '(rnrs io ports) '(6) '() '() '() '((eof-object? . r50fb) (eof-object . r50fa) (current-error-port . r50f9) (current-output-port . r50f8) (current-input-port . r50f7) (output-port? . r50f6) (input-port? . r50f5) (utf-8-codec . r50f4) (utf-16-codec . r50f3) (transcoder-error-handling-mode . r50f2) (transcoder-eol-style . r50f1) (transcoder-codec . r50f0) (transcoded-port . r50ef) (textual-port? . r50ee) (string->bytevector . r50ed) (standard-output-port . r50ec) (standard-input-port . r50eb) (standard-error-port . r50ea) (set-port-position! . r50e9) (put-u8 . r50e8) (put-string . r50e7) (put-datum . r50e6) (put-char . r50e5) (put-bytevector . r50e4) (port? . r50e3) (port-transcoder . r50e2) (port-position . r50e1) (port-has-set-port-position!? . r50e0) (port-has-port-position? . r50df) (port-eof? . r50de) (output-port-buffer-mode . r50dd) (open-string-output-port . r50dc) (open-string-input-port . r50db) (open-file-output-port . r50da) (open-file-input/output-port . r50d9) (open-file-input-port . r50d8) (open-bytevector-output-port . r50d7) (open-bytevector-input-port . r50d6) (native-transcoder . r50d5) (native-eol-style . r50d4) (make-transcoder . r50d3) (latin-1-codec . r50d2) (make-i/o-write-error . r4ba3) (make-i/o-read-error . r4b8e) (make-i/o-port-error . r4c44) (make-i/o-invalid-position-error . r4bba) (make-i/o-filename-error . r4bd5) (make-i/o-file-protection-error . r4bee) (make-i/o-file-is-read-only-error . r4c03) (make-i/o-file-does-not-exist-error . r4c2d) (make-i/o-file-already-exists-error . r4c18) (make-i/o-error . r4b79) (make-i/o-encoding-error . r4c74) (make-i/o-decoding-error . r4c5d) (make-custom-textual-output-port . r50d1) (make-custom-textual-input/output-port . r50d0) (make-custom-textual-input-port . r50cf) (make-custom-binary-output-port . r50ce) (make-custom-binary-input/output-port . r50cd) (make-custom-binary-input-port . r50cc) (lookahead-u8 . r50ca) (lookahead-char . r50c9) (i/o-write-error? . r4ba5) (i/o-read-error? . r4b90) (i/o-port-error? . r4c48) (i/o-invalid-position-error? . r4bbe) (i/o-filename-error? . r4bd9) (i/o-file-protection-error? . r4bf0) (i/o-file-is-read-only-error? . r4c05) (i/o-file-does-not-exist-error? . r4c2f) (i/o-file-already-exists-error? . r4c1a) (i/o-error? . r4b7b) (i/o-error-position . r4bc0) (i/o-error-port . r4c4a) (i/o-error-filename . r4bdb) (i/o-encoding-error? . r4c78) (i/o-encoding-error-char . r4c7a) (i/o-decoding-error? . r4c5f) (get-u8 . r50c8) (get-string-n! . r50c7) (get-string-n . r50c6) (get-string-all . r50c5) (get-line . r50c4) (get-datum . r50c3) (get-char . r50c2) (get-bytevector-some . r50c1) (get-bytevector-n! . r50c0) (get-bytevector-n . r50bf) (get-bytevector-all . r50be) (flush-output-port . r50bd) (close-port . r50bc) (call-with-string-output-port . r509b) (call-with-port . r509a) (call-with-bytevector-output-port . r5099) (bytevector->string . r5098) (buffer-mode? . r5097) (binary-port? . r5096) (&i/o-encoding . r4f34) (&i/o-decoding . r4f33) (&i/o-port . r4f32) (&i/o-file-does-not-exist . r4f31) (&i/o-file-already-exists . r4f30) (&i/o-file-is-read-only . r4f2f) (&i/o-file-protection . r4f2e) (&i/o-filename . r4f2d) (&i/o-invalid-position . r4f2c) (&i/o-write . r4f2b) (&i/o-read . r4f2a) (&i/o . r4f29) (error-handling-mode . r4f0e) (file-options . r4f0d) (buffer-mode . r4f0c) (eol-style . r4f0b)) '() values values '#f '#f '#t '#f) (r2b16@r29b5@install-library 'r520d '(rnrs enums) '(6) '() '() '() '((make-enumeration . r5092) (enum-set=? . r5091) (enum-set-universe . r5090) (enum-set-union . r508f) (enum-set-subset? . r508e) (enum-set-projection . r508d) (enum-set-member? . r508c) (enum-set-intersection . r508b) (enum-set-indexer . r508a) (enum-set-difference . r5089) (enum-set-constructor . r5088) (enum-set-complement . r5087) (enum-set->list . r5086) (define-enumeration . r4f19)) '() values values '#f '#f '#t '#f) (r2b16@r29b5@install-library 'r520e '(rnrs conditions) '(6) '() '() '() '((who-condition? . r4aef) (warning? . r4a67) (violation? . r4aa6) (undefined-violation? . r4b66) (syntax-violation? . r4b4d) (syntax-violation-subform . r4b51) (syntax-violation-form . r4b4f) (syntax-violation . r2fe7) (simple-conditions . r5085) (serious-condition? . r4a7c) (non-continuable-violation? . r4b06) (message-condition? . r4a50) (make-who-condition . r4aeb) (make-warning . r4a65) (make-violation . r4aa4) (make-undefined-violation . r4b64) (make-syntax-violation . r4b47) (make-serious-condition . r4a7a) (make-non-continuable-violation . r4b04) (make-message-condition . r4a4c) (make-lexical-violation . r4b2e) (make-irritants-condition . r4ad0) (make-implementation-restriction-violation . r4b19) (make-error . r4a8f) (make-assertion-violation . r4ab9) (lexical-violation? . r4b30) (irritants-condition? . r4ad4) (implementation-restriction-violation? . r4b1b) (error? . r4a91) (condition-who . r4af1) (condition-predicate . r5084) (condition-message . r4a52) (condition-irritants . r4ad6) (condition-accessor . r5083) (condition . r5082) (assertion-violation? . r4abb) (condition? . r5081) (&undefined . r4f28) (&syntax . r4f27) (&lexical . r4f26) (&implementation-restriction . r4f25) (&non-continuable . r4f24) (&who . r4f23) (&irritants . r4f22) (&assertion . r4f21) (&violation . r4f20) (&error . r4f1f) (&serious . r4f1e) (&warning . r4f1d) (&message . r4f1c) (&condition . r4f1b) (define-condition-type . r4f1a)) '() values values '#f '#f '#t '#f) (r2b16@r29b5@install-library 'r520f '(rnrs records inspection) '(6) '() '() '() '((record? . r512e) (record-type-uid . r512d) (record-type-sealed? . r512c) (record-type-parent . r512b) (record-type-opaque? . r512a) (record-type-name . r5129) (record-type-generative? . r5128) (record-type-field-names . r5127) (record-rtd . r5126) (record-field-mutable? . r5125)) '() values values '#f '#f '#t '#f) (r2b16@r29b5@install-library 'r5210 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . r5135) (record-predicate . r5134) (record-mutator . r5133) (record-constructor . r5132) (record-accessor . r5131) (make-record-type-descriptor . r5130) (make-record-constructor-descriptor . r512f)) '() values values '#f '#f '#t '#f) (r2b16@r29b5@install-library 'r5211 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . r4f18) (parent-rtd . r4f17) (nongenerative . r4f16) (opaque . r4f15) (sealed . r4f14) (protocol . r4f13) (parent . r4f12) (immutable . r4f11) (mutable . r4f10) (fields . r4f0f) (record-constructor-descriptor . r4eee) (record-type-descriptor . r4eed)) '() values values '#f '#f '#t '#f) (r2b16@r29b5@install-library 'r5212 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . r4ca8) (&no-nans-rtd . r4ca6) (&no-infinities-rcd . r4c93) (&no-infinities-rtd . r4c91) (&i/o-encoding-rcd . r4c7e) (&i/o-encoding-rtd . r4c7c) (&i/o-decoding-rcd . r4c63) (&i/o-decoding-rtd . r4c61) (&i/o-port-rcd . r4c4e) (&i/o-port-rtd . r4c4c) (&i/o-file-does-not-exist-rcd . r4c33) (&i/o-file-does-not-exist-rtd . r4c31) (&i/o-file-already-exists-rcd . r4c1e) (&i/o-file-already-exists-rtd . r4c1c) (&i/o-file-is-read-only-rcd . r4c09) (&i/o-file-is-read-only-rtd . r4c07) (&i/o-file-protection-rcd . r4bf4) (&i/o-file-protection-rtd . r4bf2) (&i/o-filename-rcd . r4bdf) (&i/o-filename-rtd . r4bdd) (&i/o-invalid-position-rcd . r4bc4) (&i/o-invalid-position-rtd . r4bc2) (&i/o-write-rcd . r4ba9) (&i/o-write-rtd . r4ba7) (&i/o-read-rcd . r4b94) (&i/o-read-rtd . r4b92) (&i/o-rcd . r4b7f) (&i/o-rtd . r4b7d) (&undefined-rcd . r4b6a) (&undefined-rtd . r4b68) (&syntax-rcd . r4b55) (&syntax-rtd . r4b53) (&lexical-rcd . r4b34) (&lexical-rtd . r4b32) (&implementation-restriction-rcd . r4b1f) (&implementation-restriction-rtd . r4b1d) (&non-continuable-rcd . r4b0a) (&non-continuable-rtd . r4b08) (&who-rcd . r4af5) (&who-rtd . r4af3) (&irritants-rcd . r4ada) (&irritants-rtd . r4ad8) (&assertion-rcd . r4abf) (&assertion-rtd . r4abd) (&violation-rcd . r4aaa) (&violation-rtd . r4aa8) (&error-rcd . r4a95) (&error-rtd . r4a93) (&serious-rcd . r4a80) (&serious-rtd . r4a7e) (&warning-rcd . r4a6b) (&warning-rtd . r4a69) (&message-rcd . r4a56) (&message-rtd . r4a54) (&condition-rcd . r49f7) (&condition-rtd . r49f5) (syntax-error . r2fe3) (syntax-dispatch . r2efe) (pretty-print . r51f2) (eval-core . r51f1) (set-symbol-value! . r51f0) (symbol-value . r51ef) (gensym . r51ee) (void . r51ed) (load . r4db5) (interaction-environment . r2ff3) (char-ready? . r51ec) (regexp? . r51eb) (read-line . r51ea) (ungensym . r51e9) (alist->eq-hash-table . r51e8) (assoc-ref . r51e7) (print . r51e6) (format . r51e5) (host-os . r51e4) (library-path . r2994) (standard-library-path . r51e3) (file-newer? . r51e2) (stat-mtime . r51e1) (write-to-file . r51e0) (file->list . r51df) (file->string . r51de) (digit->integer . r51dd) (call-with-string-input-port . r51dc) (call-with-string-io . r51db) (string-split . r51da) (bytevector-for-each . r51d9) (string->regexp . r51d8) (rxmatch . r51d7) (regexp-replace-all . r51d6) (hashtable-for-each . r51d5) (call-process . r51d4) (local-tz-offset . r51d3) (microseconds . r51d2) (directory-list . r51d1) (set-current-directory! . r51d0) (expand-path . r51cf) (current-directory . r51ce) (%spawn . r51cd) (%waitpid . r51cc) (simple-struct-name . r51cb) (simple-struct-set! . r51ca) (simple-struct-ref . r51c9) (make-simple-struct . r51c8) (simple-struct? . r51c7) (pointer-ref-c-int64 . r51c6) (pointer-ref-c-int32 . r51c5) (pointer-ref-c-int16 . r51c4) (pointer-ref-c-int8 . r51c3) (pointer-ref-c-uint64 . r51c2) (pointer-ref-c-uint32 . r51c1) (pointer-ref-c-uint16 . r51c0) (pointer-ref-c-uint8 . r51bf) (pointer-set-c-uint64! . r51be) (pointer-set-c-uint32! . r51bd) (pointer-set-c-uint16! . r51bc) (pointer-set-c-uint8! . r51bb) (pointer-set-c-int64! . r51ba) (pointer-set-c-int32! . r51b9) (pointer-set-c-int16! . r51b8) (pointer-set-c-int8! . r51b7) (pointer-set-c-pointer! . r51b6) (pointer-set-c-double! . r51b5) (pointer-set-c-float! . r51b4) (pointer-set-c-long-long! . r51b3) (pointer-set-c-long! . r51b2) (pointer-set-c-int! . r51b1) (pointer-set-c-short! . r51b0) (pointer-set-c-char! . r51af) (pointer-ref-c-pointer . r51ae) (pointer-ref-c-double . r51ad) (pointer-ref-c-float . r51ac) (pointer-ref-c-unsigned-long-long . r51ab) (pointer-ref-c-signed-long-long . r51aa) (pointer-ref-c-unsigned-long . r51a9) (pointer-ref-c-signed-long . r51a8) (pointer-ref-c-unsigned-int . r51a7) (pointer-ref-c-signed-int . r51a6) (pointer-ref-c-unsigned-short . r51a5) (pointer-ref-c-signed-short . r51a4) (pointer-ref-c-unsigned-char . r51a3) (pointer-ref-c-signed-char . r51a2) (pointer->integer . r51a1) (integer->pointer . r51a0) (pointer? . r519f) (shared-errno . r519e) (%ffi-supported? . r519d) (%ffi-pointer->string . r519c) (%ffi-call->string-or-zero . r519b) (%ffi-call->double . r519a) (%ffi-call->void* . r5199) (%ffi-call->void . r5198) (%ffi-call->char . r5197) (%ffi-call->int . r5196) (%ffi-lookup . r5195) (%ffi-open . r5194) (%fork . r5193) (%pipe . r5192) (p . r5191) (open-output-string . r5190) (get-output-string . r518f) (file-stat-ctime . r518e) (file-stat-atime . r518d) (file-stat-mtime . r518c) (file-size-in-bytes . r518b) (file-writable? . r518a) (file-executable? . r5189) (file-readable? . r5188) (file-regular? . r5187) (file-symbolic-link? . r5186) (file-directory? . r5185) (create-symbolic-link . r5184) (rename-file . r5183) (delete-directory . r5182) (create-directory . r5181) (get-environment-variables . r5180) (get-environment-variable . r517f) (get-timeofday . r517e) (get-command-line . r517d) (sys-display . r517c) (whereis . r517b) (register . r517a) (vm-join! . r5179) (vm-set-value! . r5178) (vm? . r5177) (main-vm? . r5176) (vm-eval . r5175) (vm-self . r5174) (vm-start! . r5173) (make-vm . r5172) (mutex-try-lock! . r5171) (mutex-unlock! . r5170) (mutex-lock! . r516f) (mutex? . r516e) (make-mutex . r516d) (condition-variable-notify-all! . r516c) (condition-variable-notify! . r516b) (condition-variable-wait! . r516a) (make-condition-variable . r5169) (mosh-executable-path . r5168) (make-file-options . r5167) (source-info . r5166) (make-compiler-instruction . r5165) (make-instruction . r5164) (set-source-info! . r5163) (bignum? . r5162) (fast-equal? . r5161) (fasl-read . r5160) (fasl-write . r515f) (time-usage . r515e) (os-constant . r515d) (make-parameter . r27c7) (socket-port . r515c) (socket-shutdown . r515b) (socket-close . r515a) (socket-send . r5159) (socket-recv! . r5158) (socket-recv . r5157) (make-server-socket . r5156) (make-client-socket . r5155) (socket-accept . r5154) (socket? . r5153) (string-upcase . r5152) (string-titlecase . r5151) (string-normalize-nfkd . r5150) (string-normalize-nfkc . r514f) (string-normalize-nfd . r514e) (string-normalize-nfc . r514d) (string-foldcase . r514c) (string-downcase . r514b) (string-ci>? . r514a) (string-ci>=? . r5149) (string-ci=? . r5148) (string-ci<? . r5147) (string-ci<=? . r5146) (char-whitespace? . r5145) (char-upper-case? . r5144) (char-title-case? . r5143) (char-numeric? . r5142) (char-lower-case? . r5141) (char-general-category . r5140) (char-upcase . r513f) (char-titlecase . r513e) (char-foldcase . r513d) (char-downcase . r513c) (char-ci>? . r513b) (char-ci>=? . r513a) (char-ci=? . r5139) (char-ci<? . r5138) (char-ci<=? . r5137) (char-alphabetic? . r5136) (make-variable-transformer . r2d2b) (identifier? . r2fe9) (generate-temporaries . r2fd5) (free-identifier=? . r2fd7) (syntax->datum . r2fed) (datum->syntax . r2feb) (bound-identifier=? . r2fd9) (record-type-descriptor? . r5135) (record-predicate . r5134) (record-mutator . r5133) (record-constructor . r5132) (record-accessor . r5131) (make-record-type-descriptor . r5130) (make-record-constructor-descriptor . r512f) (record? . r512e) (record-type-uid . r512d) (record-type-sealed? . r512c) (record-type-parent . r512b) (record-type-opaque? . r512a) (record-type-name . r5129) (record-type-generative? . r5128) (record-type-field-names . r5127) (record-rtd . r5126) (record-field-mutable? . r5125) (delete-file . r5124) (file-exists? . r5123) (vector-sort! . r5122) (vector-sort . r5121) (list-sort . r5120) (symbol-hash . r511f) (string-ci-hash . r511e) (string-hash . r511d) (equal-hash . r511c) (hashtable-equivalence-function . r511b) (make-hashtable . r511a) (hashtable-hash-function . r5119) (make-eqv-hashtable . r5118) (make-eq-hashtable . r5117) (hashtable? . r5116) (hashtable-update! . r5115) (hashtable-size . r5114) (hashtable-set! . r5113) (hashtable-ref . r5112) (hashtable-mutable? . r5111) (hashtable-keys . r5110) (hashtable-entries . r510f) (hashtable-delete! . r510e) (hashtable-copy . r510d) (hashtable-contains? . r510c) (hashtable-clear! . r510b) (call-with-output-file . r510a) (call-with-input-file . r5109) (write-char . r5108) (write . r5107) (with-output-to-file . r5106) (with-input-from-file . r5105) (read-char . r5104) (read . r5103) (peek-char . r5102) (open-output-file . r5101) (open-input-file . r5100) (newline . r50ff) (display . r50fe) (close-output-port . r50fd) (close-input-port . r50fc) (eof-object? . r50fb) (eof-object . r50fa) (current-error-port . r50f9) (current-output-port . r50f8) (current-input-port . r50f7) (output-port? . r50f6) (input-port? . r50f5) (utf-8-codec . r50f4) (utf-16-codec . r50f3) (transcoder-error-handling-mode . r50f2) (transcoder-eol-style . r50f1) (transcoder-codec . r50f0) (transcoded-port . r50ef) (textual-port? . r50ee) (string->bytevector . r50ed) (standard-output-port . r50ec) (standard-input-port . r50eb) (standard-error-port . r50ea) (set-port-position! . r50e9) (put-u8 . r50e8) (put-string . r50e7) (put-datum . r50e6) (put-char . r50e5) (put-bytevector . r50e4) (port? . r50e3) (port-transcoder . r50e2) (port-position . r50e1) (port-has-set-port-position!? . r50e0) (port-has-port-position? . r50df) (port-eof? . r50de) (output-port-buffer-mode . r50dd) (open-string-output-port . r50dc) (open-string-input-port . r50db) (open-file-output-port . r50da) (open-file-input/output-port . r50d9) (open-file-input-port . r50d8) (open-bytevector-output-port . r50d7) (open-bytevector-input-port . r50d6) (native-transcoder . r50d5) (native-eol-style . r50d4) (make-transcoder . r50d3) (latin-1-codec . r50d2) (make-i/o-write-error . r4ba3) (make-i/o-read-error . r4b8e) (make-i/o-port-error . r4c44) (make-i/o-invalid-position-error . r4bba) (make-i/o-filename-error . r4bd5) (make-i/o-file-protection-error . r4bee) (make-i/o-file-is-read-only-error . r4c03) (make-i/o-file-does-not-exist-error . r4c2d) (make-i/o-file-already-exists-error . r4c18) (make-i/o-error . r4b79) (make-i/o-encoding-error . r4c74) (make-i/o-decoding-error . r4c5d) (make-custom-textual-output-port . r50d1) (make-custom-textual-input/output-port . r50d0) (make-custom-textual-input-port . r50cf) (make-custom-binary-output-port . r50ce) (make-custom-binary-input/output-port . r50cd) (make-custom-binary-input-port . r50cc) (make-bytevector . r50cb) (lookahead-u8 . r50ca) (lookahead-char . r50c9) (i/o-write-error? . r4ba5) (i/o-read-error? . r4b90) (i/o-port-error? . r4c48) (i/o-invalid-position-error? . r4bbe) (i/o-filename-error? . r4bd9) (i/o-file-protection-error? . r4bf0) (i/o-file-is-read-only-error? . r4c05) (i/o-file-does-not-exist-error? . r4c2f) (i/o-file-already-exists-error? . r4c1a) (i/o-error? . r4b7b) (i/o-error-position . r4bc0) (i/o-error-port . r4c4a) (i/o-error-filename . r4bdb) (i/o-encoding-error? . r4c78) (i/o-encoding-error-char . r4c7a) (i/o-decoding-error? . r4c5f) (get-u8 . r50c8) (get-string-n! . r50c7) (get-string-n . r50c6) (get-string-all . r50c5) (get-line . r50c4) (get-datum . r50c3) (get-char . r50c2) (get-bytevector-some . r50c1) (get-bytevector-n! . r50c0) (get-bytevector-n . r50bf) (get-bytevector-all . r50be) (flush-output-port . r50bd) (close-port . r50bc) (scheme-report-environment . r2fc3) (quotient . r50bb) (null-environment . r2fc1) (remainder . r50ba) (modulo . r50b9) (inexact->exact . r50b8) (force . r50b7) (exact->inexact . r50b6) (make-promise . r50b5) (exit . r50b4) (command-line . r4daf) (string-fill! . r50b3) (string-set! . r50b2) (set-cdr! . r50b1) (set-car! . r50b0) (remove . r50af) (remv . r50ae) (remp . r50ad) (remq . r50ac) (partition . r50ab) (memv . r50aa) (memq . r50a9) (memp . r50a8) (member . r50a7) (exists . r50a6) (for-all . r50a5) (fold-right . r50a4) (fold-left . r50a3) (find . r50a2) (filter . r50a1) (cons* . r50a0) (assv . r509f) (assq . r509e) (assp . r509d) (assoc . r509c) (call-with-string-output-port . r509b) (call-with-port . r509a) (call-with-bytevector-output-port . r5099) (bytevector->string . r5098) (buffer-mode? . r5097) (binary-port? . r5096) (with-exception-handler . r5095) (raise-continuable . r5094) (raise . r5093) (eval . r2fc7) (environment . r2fbf) (make-enumeration . r5092) (enum-set=? . r5091) (enum-set-universe . r5090) (enum-set-union . r508f) (enum-set-subset? . r508e) (enum-set-projection . r508d) (enum-set-member? . r508c) (enum-set-intersection . r508b) (enum-set-indexer . r508a) (enum-set-difference . r5089) (enum-set-constructor . r5088) (enum-set-complement . r5087) (enum-set->list . r5086) (who-condition? . r4aef) (warning? . r4a67) (violation? . r4aa6) (undefined-violation? . r4b66) (syntax-violation? . r4b4d) (syntax-violation-subform . r4b51) (syntax-violation-form . r4b4f) (syntax-violation . r2fe7) (simple-conditions . r5085) (serious-condition? . r4a7c) (non-continuable-violation? . r4b06) (message-condition? . r4a50) (make-who-condition . r4aeb) (make-warning . r4a65) (make-violation . r4aa4) (make-undefined-violation . r4b64) (make-syntax-violation . r4b47) (make-serious-condition . r4a7a) (make-non-continuable-violation . r4b04) (make-message-condition . r4a4c) (make-lexical-violation . r4b2e) (make-irritants-condition . r4ad0) (make-implementation-restriction-violation . r4b19) (make-error . r4a8f) (make-assertion-violation . r4ab9) (lexical-violation? . r4b30) (irritants-condition? . r4ad4) (implementation-restriction-violation? . r4b1b) (error? . r4a91) (condition-who . r4af1) (condition-predicate . r5084) (condition-message . r4a52) (condition-irritants . r4ad6) (condition-accessor . r5083) (condition . r5082) (assertion-violation? . r4abb) (condition? . r5081) (utf32->string . r5080) (utf16->string . r507f) (utf8->string . r507e) (uint-list->bytevector . r507d) (u8-list->bytevector . r507c) (string->utf8 . r507b) (string->utf32 . r507a) (string->utf16 . r5079) (sint-list->bytevector . r5078) (native-endianness . r5077) (bytevector? . r5076) (bytevector=? . r5075) (bytevector-uint-set! . r5074) (bytevector-uint-ref . r5073) (bytevector-u8-set! . r5072) (bytevector-u8-ref . r5071) (bytevector-u64-set! . r5070) (bytevector-u64-ref . r506f) (bytevector-u64-native-set! . r506e) (bytevector-u64-native-ref . r506d) (bytevector-u32-set! . r506c) (bytevector-u32-ref . r506b) (bytevector-u32-native-set! . r506a) (bytevector-u32-native-ref . r5069) (bytevector-u16-set! . r5068) (bytevector-u16-ref . r5067) (bytevector-u16-native-set! . r5066) (bytevector-u16-native-ref . r5065) (bytevector-sint-set! . r5064) (bytevector-sint-ref . r5063) (bytevector-s8-set! . r5062) (bytevector-s8-ref . r5061) (bytevector-s64-set! . r5060) (bytevector-s64-ref . r505f) (bytevector-s64-native-set! . r505e) (bytevector-s64-native-ref . r505d) (bytevector-s32-set! . r505c) (bytevector-s32-ref . r505b) (bytevector-s32-native-set! . r505a) (bytevector-s32-native-ref . r5059) (bytevector-s16-set! . r5058) (bytevector-s16-ref . r5057) (bytevector-s16-native-set! . r5056) (bytevector-s16-native-ref . r5055) (bytevector-length . r5054) (bytevector-ieee-single-ref . r5053) (bytevector-ieee-single-set! . r5052) (bytevector-ieee-single-native-set! . r5051) (bytevector-ieee-single-native-ref . r5050) (bytevector-ieee-double-set! . r504f) (bytevector-ieee-double-ref . r504e) (bytevector-ieee-double-native-set! . r504d) (bytevector-ieee-double-native-ref . r504c) (bytevector-fill! . r504b) (bytevector-copy! . r504a) (bytevector-copy . r5049) (bytevector->uint-list . r5048) (bytevector->u8-list . r5047) (bytevector->sint-list . r5046) (no-nans-violation? . r4ca4) (no-infinities-violation? . r4c8f) (make-no-nans-violation . r4ca2) (make-no-infinities-violation . r4c8d) (real->flonum . r5045) (flzero? . r5044) (fltruncate . r5043) (fltan . r5042) (flsqrt . r5041) (flsin . r5040) (flround . r503f) (flpositive? . r503e) (flonum? . r503d) (flodd? . r503c) (flnumerator . r503b) (flnegative? . r503a) (flnan? . r5039) (flmod0 . r5038) (flmod . r5037) (flmin . r5036) (flmax . r5035) (fllog . r5034) (flinteger? . r5033) (flinfinite? . r5032) (flfloor . r5031) (flfinite? . r5030) (flexpt . r502f) (flexp . r502e) (fleven? . r502d) (fldiv0-and-mod0 . r502c) (fldiv0 . r502b) (fldiv-and-mod . r502a) (fldiv . r5029) (fldenominator . r5028) (flcos . r5027) (flceiling . r5026) (flatan . r5025) (flasin . r5024) (flacos . r5023) (flabs . r5022) (fl>? . r5021) (fl>=? . r5020) (fl=? . r501f) (fl<? . r501e) (fl<=? . r501d) (fl/ . r501c) (fl- . r501b) (fl+ . r501a) (fl* . r5019) (fixnum->flonum . r5018) (fxzero? . r5017) (fxxor . r5016) (fxrotate-bit-field . r5015) (fxreverse-bit-field . r5014) (fxpositive? . r5013) (fxodd? . r5012) (fxnot . r5011) (fxnegative? . r5010) (fxmod0 . r500f) (fxmod . r500e) (fxmin . r500d) (fxmax . r500c) (fxlength . r500b) (fxior . r500a) (fxif . r5009) (fxfirst-bit-set . r5008) (fxeven? . r5007) (fxdiv0-and-mod0 . r5006) (fxdiv0 . r5005) (fxdiv-and-mod . r5004) (fxdiv . r5003) (fxcopy-bit-field . r5002) (fxcopy-bit . r5001) (fxbit-set? . r5000) (fxbit-field . r4fff) (fxbit-count . r4ffe) (fxarithmetic-shift-right . r4ffd) (fxarithmetic-shift-left . r4ffc) (fxarithmetic-shift . r4ffb) (fxand . r4ffa) (fx>? . r4ff9) (fx>=? . r4ff8) (fx=? . r4ff7) (fx<? . r4ff6) (fx<=? . r4ff5) (fx-/carry . r4ff4) (fx- . r4ff3) (fx+/carry . r4ff2) (fx+ . r4ff1) (fx*/carry . r4ff0) (fx* . r4fef) (greatest-fixnum . r4fee) (least-fixnum . r4fed) (fixnum-width . r4fec) (fixnum? . r4feb) (bitwise-rotate-bit-field . r4fea) (bitwise-reverse-bit-field . r4fe9) (bitwise-length . r4fe8) (bitwise-if . r4fe7) (bitwise-first-bit-set . r4fe6) (bitwise-copy-bit-field . r4fe5) (bitwise-copy-bit . r4fe4) (bitwise-bit-set? . r4fe3) (bitwise-bit-field . r4fe2) (bitwise-bit-count . r4fe1) (bitwise-xor . r4fe0) (bitwise-ior . r4fdf) (bitwise-and . r4fde) (bitwise-not . r4fdd) (bitwise-arithmetic-shift-right . r4fdc) (bitwise-arithmetic-shift-left . r4fdb) (bitwise-arithmetic-shift . r4fda) (zero? . r4fd9) (vector? . r4fd8) (vector-set! . r4fd7) (vector-ref . r4fd6) (vector-map . r4fd5) (vector-length . r4fd4) (vector-for-each . r4fd3) (vector-fill! . r4fd2) (vector->list . r4fd1) (vector . r4fd0) (values . r4fcf) (truncate . r4fce) (tan . r4fcd) (symbol? . r4fcc) (symbol=? . r4fcb) (symbol->string . r4fca) (substring . r4fc9) (string? . r4fc8) (string>? . r4fc7) (string>=? . r4fc6) (string=? . r4fc5) (string<? . r4fc4) (string<=? . r4fc3) (string-ref . r4fc2) (string-length . r4fc1) (string-for-each . r4fc0) (string-copy . r4fbf) (string-append . r4fbe) (string->symbol . r4fbd) (string->number . r4fbc) (string->list . r4fbb) (string . r4fba) (sqrt . r4fb9) (sin . r4fb8) (round . r4fb7) (reverse . r4fb6) (real? . r4fb5) (real-valued? . r4fb4) (real-part . r4fb3) (rationalize . r4fb2) (rational? . r4fb1) (rational-valued? . r4fb0) (procedure? . r4faf) (positive? . r4fae) (pair? . r4fad) (odd? . r4fac) (numerator . r4fab) (number? . r4faa) (number->string . r4fa9) (null? . r4fa8) (not . r4fa7) (negative? . r4fa6) (nan? . r4fa5) (min . r4fa4) (max . r4fa3) (map . r4fa2) (make-vector . r4fa1) (make-string . r4fa0) (make-rectangular . r4f9f) (make-polar . r4f9e) (magnitude . r4f9d) (log . r4f9c) (list? . r4f9b) (list-tail . r4f9a) (list-ref . r4f99) (list->vector . r4f98) (list->string . r4f97) (list . r4f96) (length . r4f95) (lcm . r4f94) (integer? . r4f93) (integer-valued? . r4f92) (integer->char . r4f91) (infinite? . r4f90) (inexact? . r4f8f) (inexact . r4f8e) (imag-part . r4f8d) (gcd . r4f8c) (for-each . r4f8b) (floor . r4f8a) (finite? . r4f89) (expt . r4f88) (exp . r4f87) (exact? . r4f86) (exact-integer-sqrt . r4f85) (exact . r4f84) (even? . r4f83) (error . r4f82) (eqv? . r4f81) (equal? . r4f80) (eq? . r4f7f) (dynamic-wind . r4f7e) (div0-and-mod0 . r4f7d) (mod0 . r4f7c) (div0 . r4f7b) (div-and-mod . r4f7a) (mod . r4f79) (div . r4f78) (denominator . r4f77) (cos . r4f76) (cons . r4f75) (complex? . r4f74) (char? . r4f73) (char>? . r4f72) (char>=? . r4f71) (char=? . r4f70) (char<? . r4f6f) (char<=? . r4f6e) (char->integer . r4f6d) (ceiling . r4f6c) (call-with-values . r4f6b) (call/cc . r4f6a) (call-with-current-continuation . r4f69) (cddddr . r4f68) (cdddar . r4f67) (cddadr . r4f66) (cddaar . r4f65) (cdaddr . r4f64) (cdadar . r4f63) (cdaadr . r4f62) (cdaaar . r4f61) (cadddr . r4f60) (caddar . r4f5f) (cadadr . r4f5e) (cadaar . r4f5d) (caaddr . r4f5c) (caadar . r4f5b) (caaadr . r4f5a) (caaaar . r4f59) (cdddr . r4f58) (cddar . r4f57) (cdadr . r4f56) (cdaar . r4f55) (caddr . r4f54) (cadar . r4f53) (caadr . r4f52) (caaar . r4f51) (cddr . r4f50) (cdar . r4f4f) (cadr . r4f4e) (caar . r4f4d) (cdr . r4f4c) (car . r4f4b) (boolean? . r4f4a) (boolean=? . r4f49) (atan . r4f48) (assertion-violation . r4f47) (assertion-error . r2fe1) (asin . r4f46) (apply . r4f45) (append . r4f44) (angle . r4f43) (acos . r4f42) (abs . r4f41) (/ . r4f40) (* . r4f3f) (- . r4f3e) (+ . r4f3d) (>= . r4f3c) (> . r4f3b) (= . r4f3a) (<= . r4f39) (< . r4f38) (library . r4f37) (&no-nans . r4f36) (&no-infinities . r4f35) (&i/o-encoding . r4f34) (&i/o-decoding . r4f33) (&i/o-port . r4f32) (&i/o-file-does-not-exist . r4f31) (&i/o-file-already-exists . r4f30) (&i/o-file-is-read-only . r4f2f) (&i/o-file-protection . r4f2e) (&i/o-filename . r4f2d) (&i/o-invalid-position . r4f2c) (&i/o-write . r4f2b) (&i/o-read . r4f2a) (&i/o . r4f29) (&undefined . r4f28) (&syntax . r4f27) (&lexical . r4f26) (&implementation-restriction . r4f25) (&non-continuable . r4f24) (&who . r4f23) (&irritants . r4f22) (&assertion . r4f21) (&violation . r4f20) (&error . r4f1f) (&serious . r4f1e) (&warning . r4f1d) (&message . r4f1c) (&condition . r4f1b) (define-condition-type . r4f1a) (define-enumeration . r4f19) (define-record-type . r4f18) (parent-rtd . r4f17) (nongenerative . r4f16) (opaque . r4f15) (sealed . r4f14) (protocol . r4f13) (parent . r4f12) (immutable . r4f11) (mutable . r4f10) (fields . r4f0f) (error-handling-mode . r4f0e) (file-options . r4f0d) (buffer-mode . r4f0c) (eol-style . r4f0b) (guard . r4f0a) (trace-define . r4f09) (trace-lambda . r4f08) (unsyntax-splicing . r4f07) (unsyntax . r4f06) (unquote-splicing . r4f05) (unquote . r4f04) (_ . r4f03) (else . r4f02) (=> . r4f01) (... . r4f00) (assert . r4eff) (endianness . r4efe) (delay . r4efd) (time . r4efc) (do . r4efb) (cond . r4efa) (let* . r4ef9) (let . r4ef8) (let*-values . r4ef7) (let-values . r4ef6) (identifier-syntax . r4ef5) (with-syntax . r4ef4) (quasisyntax . r4ef3) (quasiquote . r4ef2) (syntax-rules . r4ef1) (include . r4ef0) (define-struct . r4eef) (record-constructor-descriptor . r4eee) (record-type-descriptor . r4eed) (case . r4eec) (parameterize . r4eeb) (unless . r4eea) (when . r4ee9) (or . r4ee8) (and . r4ee7) (if . r4ee6) (letrec* . r4ee5) (letrec . r4ee4) (type-descriptor . r4ee3) (case-lambda . r4ee2) (lambda . r4ee1) (syntax . r4ee0) (syntax-case . r4edf) (quote . r4ede) (foreign-call . r4edd) (letrec-syntax . r4edc) (let-syntax . r4edb) (set! . r4eda) (import . r4ed9) (begin . r4ed8) (module . r4ed7) (define-syntax . r4ed6) (define . r4ed5)) '((r4ca8 core-prim . &no-nans-rcd) (r4ca6 core-prim . &no-nans-rtd) (r4c93 core-prim . &no-infinities-rcd) (r4c91 core-prim . &no-infinities-rtd) (r4c7e core-prim . &i/o-encoding-rcd) (r4c7c core-prim . &i/o-encoding-rtd) (r4c63 core-prim . &i/o-decoding-rcd) (r4c61 core-prim . &i/o-decoding-rtd) (r4c4e core-prim . &i/o-port-rcd) (r4c4c core-prim . &i/o-port-rtd) (r4c33 core-prim . &i/o-file-does-not-exist-rcd) (r4c31 core-prim . &i/o-file-does-not-exist-rtd) (r4c1e core-prim . &i/o-file-already-exists-rcd) (r4c1c core-prim . &i/o-file-already-exists-rtd) (r4c09 core-prim . &i/o-file-is-read-only-rcd) (r4c07 core-prim . &i/o-file-is-read-only-rtd) (r4bf4 core-prim . &i/o-file-protection-rcd) (r4bf2 core-prim . &i/o-file-protection-rtd) (r4bdf core-prim . &i/o-filename-rcd) (r4bdd core-prim . &i/o-filename-rtd) (r4bc4 core-prim . &i/o-invalid-position-rcd) (r4bc2 core-prim . &i/o-invalid-position-rtd) (r4ba9 core-prim . &i/o-write-rcd) (r4ba7 core-prim . &i/o-write-rtd) (r4b94 core-prim . &i/o-read-rcd) (r4b92 core-prim . &i/o-read-rtd) (r4b7f core-prim . &i/o-rcd) (r4b7d core-prim . &i/o-rtd) (r4b6a core-prim . &undefined-rcd) (r4b68 core-prim . &undefined-rtd) (r4b55 core-prim . &syntax-rcd) (r4b53 core-prim . &syntax-rtd) (r4b34 core-prim . &lexical-rcd) (r4b32 core-prim . &lexical-rtd) (r4b1f core-prim . &implementation-restriction-rcd) (r4b1d core-prim . &implementation-restriction-rtd) (r4b0a core-prim . &non-continuable-rcd) (r4b08 core-prim . &non-continuable-rtd) (r4af5 core-prim . &who-rcd) (r4af3 core-prim . &who-rtd) (r4ada core-prim . &irritants-rcd) (r4ad8 core-prim . &irritants-rtd) (r4abf core-prim . &assertion-rcd) (r4abd core-prim . &assertion-rtd) (r4aaa core-prim . &violation-rcd) (r4aa8 core-prim . &violation-rtd) (r4a95 core-prim . &error-rcd) (r4a93 core-prim . &error-rtd) (r4a80 core-prim . &serious-rcd) (r4a7e core-prim . &serious-rtd) (r4a6b core-prim . &warning-rcd) (r4a69 core-prim . &warning-rtd) (r4a56 core-prim . &message-rcd) (r4a54 core-prim . &message-rtd) (r49f7 core-prim . &condition-rcd) (r49f5 core-prim . &condition-rtd) (r2fe3 core-prim . syntax-error) (r2efe core-prim . syntax-dispatch) (r51f2 core-prim . pretty-print) (r51f1 core-prim . eval-core) (r51f0 core-prim . set-symbol-value!) (r51ef core-prim . symbol-value) (r51ee core-prim . gensym) (r51ed core-prim . void) (r4db5 core-prim . load) (r2ff3 core-prim . interaction-environment) (r51ec core-prim . char-ready?) (r51eb core-prim . regexp?) (r51ea core-prim . read-line) (r51e9 core-prim . ungensym) (r51e8 core-prim . alist->eq-hash-table) (r51e7 core-prim . assoc-ref) (r51e6 core-prim . print) (r51e5 core-prim . format) (r51e4 core-prim . host-os) (r2994 core-prim . library-path) (r51e3 core-prim . standard-library-path) (r51e2 core-prim . file-newer?) (r51e1 core-prim . stat-mtime) (r51e0 core-prim . write-to-file) (r51df core-prim . file->list) (r51de core-prim . file->string) (r51dd core-prim . digit->integer) (r51dc core-prim . call-with-string-input-port) (r51db core-prim . call-with-string-io) (r51da core-prim . string-split) (r51d9 core-prim . bytevector-for-each) (r51d8 core-prim . string->regexp) (r51d7 core-prim . rxmatch) (r51d6 core-prim . regexp-replace-all) (r51d5 core-prim . hashtable-for-each) (r51d4 core-prim . call-process) (r51d3 core-prim . local-tz-offset) (r51d2 core-prim . microseconds) (r51d1 core-prim . directory-list) (r51d0 core-prim . set-current-directory!) (r51cf core-prim . expand-path) (r51ce core-prim . current-directory) (r51cd core-prim . %spawn) (r51cc core-prim . %waitpid) (r51cb core-prim . simple-struct-name) (r51ca core-prim . simple-struct-set!) (r51c9 core-prim . simple-struct-ref) (r51c8 core-prim . make-simple-struct) (r51c7 core-prim . simple-struct?) (r51c6 core-prim . pointer-ref-c-int64) (r51c5 core-prim . pointer-ref-c-int32) (r51c4 core-prim . pointer-ref-c-int16) (r51c3 core-prim . pointer-ref-c-int8) (r51c2 core-prim . pointer-ref-c-uint64) (r51c1 core-prim . pointer-ref-c-uint32) (r51c0 core-prim . pointer-ref-c-uint16) (r51bf core-prim . pointer-ref-c-uint8) (r51be core-prim . pointer-set-c-uint64!) (r51bd core-prim . pointer-set-c-uint32!) (r51bc core-prim . pointer-set-c-uint16!) (r51bb core-prim . pointer-set-c-uint8!) (r51ba core-prim . pointer-set-c-int64!) (r51b9 core-prim . pointer-set-c-int32!) (r51b8 core-prim . pointer-set-c-int16!) (r51b7 core-prim . pointer-set-c-int8!) (r51b6 core-prim . pointer-set-c-pointer!) (r51b5 core-prim . pointer-set-c-double!) (r51b4 core-prim . pointer-set-c-float!) (r51b3 core-prim . pointer-set-c-long-long!) (r51b2 core-prim . pointer-set-c-long!) (r51b1 core-prim . pointer-set-c-int!) (r51b0 core-prim . pointer-set-c-short!) (r51af core-prim . pointer-set-c-char!) (r51ae core-prim . pointer-ref-c-pointer) (r51ad core-prim . pointer-ref-c-double) (r51ac core-prim . pointer-ref-c-float) (r51ab core-prim . pointer-ref-c-unsigned-long-long) (r51aa core-prim . pointer-ref-c-signed-long-long) (r51a9 core-prim . pointer-ref-c-unsigned-long) (r51a8 core-prim . pointer-ref-c-signed-long) (r51a7 core-prim . pointer-ref-c-unsigned-int) (r51a6 core-prim . pointer-ref-c-signed-int) (r51a5 core-prim . pointer-ref-c-unsigned-short) (r51a4 core-prim . pointer-ref-c-signed-short) (r51a3 core-prim . pointer-ref-c-unsigned-char) (r51a2 core-prim . pointer-ref-c-signed-char) (r51a1 core-prim . pointer->integer) (r51a0 core-prim . integer->pointer) (r519f core-prim . pointer?) (r519e core-prim . shared-errno) (r519d core-prim . %ffi-supported?) (r519c core-prim . %ffi-pointer->string) (r519b core-prim . %ffi-call->string-or-zero) (r519a core-prim . %ffi-call->double) (r5199 core-prim . %ffi-call->void*) (r5198 core-prim . %ffi-call->void) (r5197 core-prim . %ffi-call->char) (r5196 core-prim . %ffi-call->int) (r5195 core-prim . %ffi-lookup) (r5194 core-prim . %ffi-open) (r5193 core-prim . %fork) (r5192 core-prim . %pipe) (r5191 core-prim . p) (r5190 core-prim . open-output-string) (r518f core-prim . get-output-string) (r518e core-prim . file-stat-ctime) (r518d core-prim . file-stat-atime) (r518c core-prim . file-stat-mtime) (r518b core-prim . file-size-in-bytes) (r518a core-prim . file-writable?) (r5189 core-prim . file-executable?) (r5188 core-prim . file-readable?) (r5187 core-prim . file-regular?) (r5186 core-prim . file-symbolic-link?) (r5185 core-prim . file-directory?) (r5184 core-prim . create-symbolic-link) (r5183 core-prim . rename-file) (r5182 core-prim . delete-directory) (r5181 core-prim . create-directory) (r5180 core-prim . get-environment-variables) (r517f core-prim . get-environment-variable) (r517e core-prim . get-timeofday) (r517d core-prim . get-command-line) (r517c core-prim . sys-display) (r517b core-prim . whereis) (r517a core-prim . register) (r5179 core-prim . vm-join!) (r5178 core-prim . vm-set-value!) (r5177 core-prim . vm?) (r5176 core-prim . main-vm?) (r5175 core-prim . vm-eval) (r5174 core-prim . vm-self) (r5173 core-prim . vm-start!) (r5172 core-prim . make-vm) (r5171 core-prim . mutex-try-lock!) (r5170 core-prim . mutex-unlock!) (r516f core-prim . mutex-lock!) (r516e core-prim . mutex?) (r516d core-prim . make-mutex) (r516c core-prim . condition-variable-notify-all!) (r516b core-prim . condition-variable-notify!) (r516a core-prim . condition-variable-wait!) (r5169 core-prim . make-condition-variable) (r5168 core-prim . mosh-executable-path) (r5167 core-prim . make-file-options) (r5166 core-prim . source-info) (r5165 core-prim . make-compiler-instruction) (r5164 core-prim . make-instruction) (r5163 core-prim . set-source-info!) (r5162 core-prim . bignum?) (r5161 core-prim . fast-equal?) (r5160 core-prim . fasl-read) (r515f core-prim . fasl-write) (r515e core-prim . time-usage) (r515d core-prim . os-constant) (r27c7 core-prim . make-parameter) (r515c core-prim . socket-port) (r515b core-prim . socket-shutdown) (r515a core-prim . socket-close) (r5159 core-prim . socket-send) (r5158 core-prim . socket-recv!) (r5157 core-prim . socket-recv) (r5156 core-prim . make-server-socket) (r5155 core-prim . make-client-socket) (r5154 core-prim . socket-accept) (r5153 core-prim . socket?) (r5152 core-prim . string-upcase) (r5151 core-prim . string-titlecase) (r5150 core-prim . string-normalize-nfkd) (r514f core-prim . string-normalize-nfkc) (r514e core-prim . string-normalize-nfd) (r514d core-prim . string-normalize-nfc) (r514c core-prim . string-foldcase) (r514b core-prim . string-downcase) (r514a core-prim . string-ci>?) (r5149 core-prim . string-ci>=?) (r5148 core-prim . string-ci=?) (r5147 core-prim . string-ci<?) (r5146 core-prim . string-ci<=?) (r5145 core-prim . char-whitespace?) (r5144 core-prim . char-upper-case?) (r5143 core-prim . char-title-case?) (r5142 core-prim . char-numeric?) (r5141 core-prim . char-lower-case?) (r5140 core-prim . char-general-category) (r513f core-prim . char-upcase) (r513e core-prim . char-titlecase) (r513d core-prim . char-foldcase) (r513c core-prim . char-downcase) (r513b core-prim . char-ci>?) (r513a core-prim . char-ci>=?) (r5139 core-prim . char-ci=?) (r5138 core-prim . char-ci<?) (r5137 core-prim . char-ci<=?) (r5136 core-prim . char-alphabetic?) (r2d2b core-prim . make-variable-transformer) (r2fe9 core-prim . identifier?) (r2fd5 core-prim . generate-temporaries) (r2fd7 core-prim . free-identifier=?) (r2fed core-prim . syntax->datum) (r2feb core-prim . datum->syntax) (r2fd9 core-prim . bound-identifier=?) (r5135 core-prim . record-type-descriptor?) (r5134 core-prim . record-predicate) (r5133 core-prim . record-mutator) (r5132 core-prim . record-constructor) (r5131 core-prim . record-accessor) (r5130 core-prim . make-record-type-descriptor) (r512f core-prim . make-record-constructor-descriptor) (r512e core-prim . record?) (r512d core-prim . record-type-uid) (r512c core-prim . record-type-sealed?) (r512b core-prim . record-type-parent) (r512a core-prim . record-type-opaque?) (r5129 core-prim . record-type-name) (r5128 core-prim . record-type-generative?) (r5127 core-prim . record-type-field-names) (r5126 core-prim . record-rtd) (r5125 core-prim . record-field-mutable?) (r5124 core-prim . delete-file) (r5123 core-prim . file-exists?) (r5122 core-prim . vector-sort!) (r5121 core-prim . vector-sort) (r5120 core-prim . list-sort) (r511f core-prim . symbol-hash) (r511e core-prim . string-ci-hash) (r511d core-prim . string-hash) (r511c core-prim . equal-hash) (r511b core-prim . hashtable-equivalence-function) (r511a core-prim . make-hashtable) (r5119 core-prim . hashtable-hash-function) (r5118 core-prim . make-eqv-hashtable) (r5117 core-prim . make-eq-hashtable) (r5116 core-prim . hashtable?) (r5115 core-prim . hashtable-update!) (r5114 core-prim . hashtable-size) (r5113 core-prim . hashtable-set!) (r5112 core-prim . hashtable-ref) (r5111 core-prim . hashtable-mutable?) (r5110 core-prim . hashtable-keys) (r510f core-prim . hashtable-entries) (r510e core-prim . hashtable-delete!) (r510d core-prim . hashtable-copy) (r510c core-prim . hashtable-contains?) (r510b core-prim . hashtable-clear!) (r510a core-prim . call-with-output-file) (r5109 core-prim . call-with-input-file) (r5108 core-prim . write-char) (r5107 core-prim . write) (r5106 core-prim . with-output-to-file) (r5105 core-prim . with-input-from-file) (r5104 core-prim . read-char) (r5103 core-prim . read) (r5102 core-prim . peek-char) (r5101 core-prim . open-output-file) (r5100 core-prim . open-input-file) (r50ff core-prim . newline) (r50fe core-prim . display) (r50fd core-prim . close-output-port) (r50fc core-prim . close-input-port) (r50fb core-prim . eof-object?) (r50fa core-prim . eof-object) (r50f9 core-prim . current-error-port) (r50f8 core-prim . current-output-port) (r50f7 core-prim . current-input-port) (r50f6 core-prim . output-port?) (r50f5 core-prim . input-port?) (r50f4 core-prim . utf-8-codec) (r50f3 core-prim . utf-16-codec) (r50f2 core-prim . transcoder-error-handling-mode) (r50f1 core-prim . transcoder-eol-style) (r50f0 core-prim . transcoder-codec) (r50ef core-prim . transcoded-port) (r50ee core-prim . textual-port?) (r50ed core-prim . string->bytevector) (r50ec core-prim . standard-output-port) (r50eb core-prim . standard-input-port) (r50ea core-prim . standard-error-port) (r50e9 core-prim . set-port-position!) (r50e8 core-prim . put-u8) (r50e7 core-prim . put-string) (r50e6 core-prim . put-datum) (r50e5 core-prim . put-char) (r50e4 core-prim . put-bytevector) (r50e3 core-prim . port?) (r50e2 core-prim . port-transcoder) (r50e1 core-prim . port-position) (r50e0 core-prim . port-has-set-port-position!?) (r50df core-prim . port-has-port-position?) (r50de core-prim . port-eof?) (r50dd core-prim . output-port-buffer-mode) (r50dc core-prim . open-string-output-port) (r50db core-prim . open-string-input-port) (r50da core-prim . open-file-output-port) (r50d9 core-prim . open-file-input/output-port) (r50d8 core-prim . open-file-input-port) (r50d7 core-prim . open-bytevector-output-port) (r50d6 core-prim . open-bytevector-input-port) (r50d5 core-prim . native-transcoder) (r50d4 core-prim . native-eol-style) (r50d3 core-prim . make-transcoder) (r50d2 core-prim . latin-1-codec) (r4ba3 core-prim . make-i/o-write-error) (r4b8e core-prim . make-i/o-read-error) (r4c44 core-prim . make-i/o-port-error) (r4bba core-prim . make-i/o-invalid-position-error) (r4bd5 core-prim . make-i/o-filename-error) (r4bee core-prim . make-i/o-file-protection-error) (r4c03 core-prim . make-i/o-file-is-read-only-error) (r4c2d core-prim . make-i/o-file-does-not-exist-error) (r4c18 core-prim . make-i/o-file-already-exists-error) (r4b79 core-prim . make-i/o-error) (r4c74 core-prim . make-i/o-encoding-error) (r4c5d core-prim . make-i/o-decoding-error) (r50d1 core-prim . make-custom-textual-output-port) (r50d0 core-prim . make-custom-textual-input/output-port) (r50cf core-prim . make-custom-textual-input-port) (r50ce core-prim . make-custom-binary-output-port) (r50cd core-prim . make-custom-binary-input/output-port) (r50cc core-prim . make-custom-binary-input-port) (r50cb core-prim . make-bytevector) (r50ca core-prim . lookahead-u8) (r50c9 core-prim . lookahead-char) (r4ba5 core-prim . i/o-write-error?) (r4b90 core-prim . i/o-read-error?) (r4c48 core-prim . i/o-port-error?) (r4bbe core-prim . i/o-invalid-position-error?) (r4bd9 core-prim . i/o-filename-error?) (r4bf0 core-prim . i/o-file-protection-error?) (r4c05 core-prim . i/o-file-is-read-only-error?) (r4c2f core-prim . i/o-file-does-not-exist-error?) (r4c1a core-prim . i/o-file-already-exists-error?) (r4b7b core-prim . i/o-error?) (r4bc0 core-prim . i/o-error-position) (r4c4a core-prim . i/o-error-port) (r4bdb core-prim . i/o-error-filename) (r4c78 core-prim . i/o-encoding-error?) (r4c7a core-prim . i/o-encoding-error-char) (r4c5f core-prim . i/o-decoding-error?) (r50c8 core-prim . get-u8) (r50c7 core-prim . get-string-n!) (r50c6 core-prim . get-string-n) (r50c5 core-prim . get-string-all) (r50c4 core-prim . get-line) (r50c3 core-prim . get-datum) (r50c2 core-prim . get-char) (r50c1 core-prim . get-bytevector-some) (r50c0 core-prim . get-bytevector-n!) (r50bf core-prim . get-bytevector-n) (r50be core-prim . get-bytevector-all) (r50bd core-prim . flush-output-port) (r50bc core-prim . close-port) (r2fc3 core-prim . scheme-report-environment) (r50bb core-prim . quotient) (r2fc1 core-prim . null-environment) (r50ba core-prim . remainder) (r50b9 core-prim . modulo) (r50b8 core-prim . inexact->exact) (r50b7 core-prim . force) (r50b6 core-prim . exact->inexact) (r50b5 core-prim . make-promise) (r50b4 core-prim . exit) (r4daf core-prim . command-line) (r50b3 core-prim . string-fill!) (r50b2 core-prim . string-set!) (r50b1 core-prim . set-cdr!) (r50b0 core-prim . set-car!) (r50af core-prim . remove) (r50ae core-prim . remv) (r50ad core-prim . remp) (r50ac core-prim . remq) (r50ab core-prim . partition) (r50aa core-prim . memv) (r50a9 core-prim . memq) (r50a8 core-prim . memp) (r50a7 core-prim . member) (r50a6 core-prim . exists) (r50a5 core-prim . for-all) (r50a4 core-prim . fold-right) (r50a3 core-prim . fold-left) (r50a2 core-prim . find) (r50a1 core-prim . filter) (r50a0 core-prim . cons*) (r509f core-prim . assv) (r509e core-prim . assq) (r509d core-prim . assp) (r509c core-prim . assoc) (r509b core-prim . call-with-string-output-port) (r509a core-prim . call-with-port) (r5099 core-prim . call-with-bytevector-output-port) (r5098 core-prim . bytevector->string) (r5097 core-prim . buffer-mode?) (r5096 core-prim . binary-port?) (r5095 core-prim . with-exception-handler) (r5094 core-prim . raise-continuable) (r5093 core-prim . raise) (r2fc7 core-prim . eval) (r2fbf core-prim . environment) (r5092 core-prim . make-enumeration) (r5091 core-prim . enum-set=?) (r5090 core-prim . enum-set-universe) (r508f core-prim . enum-set-union) (r508e core-prim . enum-set-subset?) (r508d core-prim . enum-set-projection) (r508c core-prim . enum-set-member?) (r508b core-prim . enum-set-intersection) (r508a core-prim . enum-set-indexer) (r5089 core-prim . enum-set-difference) (r5088 core-prim . enum-set-constructor) (r5087 core-prim . enum-set-complement) (r5086 core-prim . enum-set->list) (r4aef core-prim . who-condition?) (r4a67 core-prim . warning?) (r4aa6 core-prim . violation?) (r4b66 core-prim . undefined-violation?) (r4b4d core-prim . syntax-violation?) (r4b51 core-prim . syntax-violation-subform) (r4b4f core-prim . syntax-violation-form) (r2fe7 core-prim . syntax-violation) (r5085 core-prim . simple-conditions) (r4a7c core-prim . serious-condition?) (r4b06 core-prim . non-continuable-violation?) (r4a50 core-prim . message-condition?) (r4aeb core-prim . make-who-condition) (r4a65 core-prim . make-warning) (r4aa4 core-prim . make-violation) (r4b64 core-prim . make-undefined-violation) (r4b47 core-prim . make-syntax-violation) (r4a7a core-prim . make-serious-condition) (r4b04 core-prim . make-non-continuable-violation) (r4a4c core-prim . make-message-condition) (r4b2e core-prim . make-lexical-violation) (r4ad0 core-prim . make-irritants-condition) (r4b19 core-prim . make-implementation-restriction-violation) (r4a8f core-prim . make-error) (r4ab9 core-prim . make-assertion-violation) (r4b30 core-prim . lexical-violation?) (r4ad4 core-prim . irritants-condition?) (r4b1b core-prim . implementation-restriction-violation?) (r4a91 core-prim . error?) (r4af1 core-prim . condition-who) (r5084 core-prim . condition-predicate) (r4a52 core-prim . condition-message) (r4ad6 core-prim . condition-irritants) (r5083 core-prim . condition-accessor) (r5082 core-prim . condition) (r4abb core-prim . assertion-violation?) (r5081 core-prim . condition?) (r5080 core-prim . utf32->string) (r507f core-prim . utf16->string) (r507e core-prim . utf8->string) (r507d core-prim . uint-list->bytevector) (r507c core-prim . u8-list->bytevector) (r507b core-prim . string->utf8) (r507a core-prim . string->utf32) (r5079 core-prim . string->utf16) (r5078 core-prim . sint-list->bytevector) (r5077 core-prim . native-endianness) (r5076 core-prim . bytevector?) (r5075 core-prim . bytevector=?) (r5074 core-prim . bytevector-uint-set!) (r5073 core-prim . bytevector-uint-ref) (r5072 core-prim . bytevector-u8-set!) (r5071 core-prim . bytevector-u8-ref) (r5070 core-prim . bytevector-u64-set!) (r506f core-prim . bytevector-u64-ref) (r506e core-prim . bytevector-u64-native-set!) (r506d core-prim . bytevector-u64-native-ref) (r506c core-prim . bytevector-u32-set!) (r506b core-prim . bytevector-u32-ref) (r506a core-prim . bytevector-u32-native-set!) (r5069 core-prim . bytevector-u32-native-ref) (r5068 core-prim . bytevector-u16-set!) (r5067 core-prim . bytevector-u16-ref) (r5066 core-prim . bytevector-u16-native-set!) (r5065 core-prim . bytevector-u16-native-ref) (r5064 core-prim . bytevector-sint-set!) (r5063 core-prim . bytevector-sint-ref) (r5062 core-prim . bytevector-s8-set!) (r5061 core-prim . bytevector-s8-ref) (r5060 core-prim . bytevector-s64-set!) (r505f core-prim . bytevector-s64-ref) (r505e core-prim . bytevector-s64-native-set!) (r505d core-prim . bytevector-s64-native-ref) (r505c core-prim . bytevector-s32-set!) (r505b core-prim . bytevector-s32-ref) (r505a core-prim . bytevector-s32-native-set!) (r5059 core-prim . bytevector-s32-native-ref) (r5058 core-prim . bytevector-s16-set!) (r5057 core-prim . bytevector-s16-ref) (r5056 core-prim . bytevector-s16-native-set!) (r5055 core-prim . bytevector-s16-native-ref) (r5054 core-prim . bytevector-length) (r5053 core-prim . bytevector-ieee-single-ref) (r5052 core-prim . bytevector-ieee-single-set!) (r5051 core-prim . bytevector-ieee-single-native-set!) (r5050 core-prim . bytevector-ieee-single-native-ref) (r504f core-prim . bytevector-ieee-double-set!) (r504e core-prim . bytevector-ieee-double-ref) (r504d core-prim . bytevector-ieee-double-native-set!) (r504c core-prim . bytevector-ieee-double-native-ref) (r504b core-prim . bytevector-fill!) (r504a core-prim . bytevector-copy!) (r5049 core-prim . bytevector-copy) (r5048 core-prim . bytevector->uint-list) (r5047 core-prim . bytevector->u8-list) (r5046 core-prim . bytevector->sint-list) (r4ca4 core-prim . no-nans-violation?) (r4c8f core-prim . no-infinities-violation?) (r4ca2 core-prim . make-no-nans-violation) (r4c8d core-prim . make-no-infinities-violation) (r5045 core-prim . real->flonum) (r5044 core-prim . flzero?) (r5043 core-prim . fltruncate) (r5042 core-prim . fltan) (r5041 core-prim . flsqrt) (r5040 core-prim . flsin) (r503f core-prim . flround) (r503e core-prim . flpositive?) (r503d core-prim . flonum?) (r503c core-prim . flodd?) (r503b core-prim . flnumerator) (r503a core-prim . flnegative?) (r5039 core-prim . flnan?) (r5038 core-prim . flmod0) (r5037 core-prim . flmod) (r5036 core-prim . flmin) (r5035 core-prim . flmax) (r5034 core-prim . fllog) (r5033 core-prim . flinteger?) (r5032 core-prim . flinfinite?) (r5031 core-prim . flfloor) (r5030 core-prim . flfinite?) (r502f core-prim . flexpt) (r502e core-prim . flexp) (r502d core-prim . fleven?) (r502c core-prim . fldiv0-and-mod0) (r502b core-prim . fldiv0) (r502a core-prim . fldiv-and-mod) (r5029 core-prim . fldiv) (r5028 core-prim . fldenominator) (r5027 core-prim . flcos) (r5026 core-prim . flceiling) (r5025 core-prim . flatan) (r5024 core-prim . flasin) (r5023 core-prim . flacos) (r5022 core-prim . flabs) (r5021 core-prim . fl>?) (r5020 core-prim . fl>=?) (r501f core-prim . fl=?) (r501e core-prim . fl<?) (r501d core-prim . fl<=?) (r501c core-prim . fl/) (r501b core-prim . fl-) (r501a core-prim . fl+) (r5019 core-prim . fl*) (r5018 core-prim . fixnum->flonum) (r5017 core-prim . fxzero?) (r5016 core-prim . fxxor) (r5015 core-prim . fxrotate-bit-field) (r5014 core-prim . fxreverse-bit-field) (r5013 core-prim . fxpositive?) (r5012 core-prim . fxodd?) (r5011 core-prim . fxnot) (r5010 core-prim . fxnegative?) (r500f core-prim . fxmod0) (r500e core-prim . fxmod) (r500d core-prim . fxmin) (r500c core-prim . fxmax) (r500b core-prim . fxlength) (r500a core-prim . fxior) (r5009 core-prim . fxif) (r5008 core-prim . fxfirst-bit-set) (r5007 core-prim . fxeven?) (r5006 core-prim . fxdiv0-and-mod0) (r5005 core-prim . fxdiv0) (r5004 core-prim . fxdiv-and-mod) (r5003 core-prim . fxdiv) (r5002 core-prim . fxcopy-bit-field) (r5001 core-prim . fxcopy-bit) (r5000 core-prim . fxbit-set?) (r4fff core-prim . fxbit-field) (r4ffe core-prim . fxbit-count) (r4ffd core-prim . fxarithmetic-shift-right) (r4ffc core-prim . fxarithmetic-shift-left) (r4ffb core-prim . fxarithmetic-shift) (r4ffa core-prim . fxand) (r4ff9 core-prim . fx>?) (r4ff8 core-prim . fx>=?) (r4ff7 core-prim . fx=?) (r4ff6 core-prim . fx<?) (r4ff5 core-prim . fx<=?) (r4ff4 core-prim . fx-/carry) (r4ff3 core-prim . fx-) (r4ff2 core-prim . fx+/carry) (r4ff1 core-prim . fx+) (r4ff0 core-prim . fx*/carry) (r4fef core-prim . fx*) (r4fee core-prim . greatest-fixnum) (r4fed core-prim . least-fixnum) (r4fec core-prim . fixnum-width) (r4feb core-prim . fixnum?) (r4fea core-prim . bitwise-rotate-bit-field) (r4fe9 core-prim . bitwise-reverse-bit-field) (r4fe8 core-prim . bitwise-length) (r4fe7 core-prim . bitwise-if) (r4fe6 core-prim . bitwise-first-bit-set) (r4fe5 core-prim . bitwise-copy-bit-field) (r4fe4 core-prim . bitwise-copy-bit) (r4fe3 core-prim . bitwise-bit-set?) (r4fe2 core-prim . bitwise-bit-field) (r4fe1 core-prim . bitwise-bit-count) (r4fe0 core-prim . bitwise-xor) (r4fdf core-prim . bitwise-ior) (r4fde core-prim . bitwise-and) (r4fdd core-prim . bitwise-not) (r4fdc core-prim . bitwise-arithmetic-shift-right) (r4fdb core-prim . bitwise-arithmetic-shift-left) (r4fda core-prim . bitwise-arithmetic-shift) (r4fd9 core-prim . zero?) (r4fd8 core-prim . vector?) (r4fd7 core-prim . vector-set!) (r4fd6 core-prim . vector-ref) (r4fd5 core-prim . vector-map) (r4fd4 core-prim . vector-length) (r4fd3 core-prim . vector-for-each) (r4fd2 core-prim . vector-fill!) (r4fd1 core-prim . vector->list) (r4fd0 core-prim . vector) (r4fcf core-prim . values) (r4fce core-prim . truncate) (r4fcd core-prim . tan) (r4fcc core-prim . symbol?) (r4fcb core-prim . symbol=?) (r4fca core-prim . symbol->string) (r4fc9 core-prim . substring) (r4fc8 core-prim . string?) (r4fc7 core-prim . string>?) (r4fc6 core-prim . string>=?) (r4fc5 core-prim . string=?) (r4fc4 core-prim . string<?) (r4fc3 core-prim . string<=?) (r4fc2 core-prim . string-ref) (r4fc1 core-prim . string-length) (r4fc0 core-prim . string-for-each) (r4fbf core-prim . string-copy) (r4fbe core-prim . string-append) (r4fbd core-prim . string->symbol) (r4fbc core-prim . string->number) (r4fbb core-prim . string->list) (r4fba core-prim . string) (r4fb9 core-prim . sqrt) (r4fb8 core-prim . sin) (r4fb7 core-prim . round) (r4fb6 core-prim . reverse) (r4fb5 core-prim . real?) (r4fb4 core-prim . real-valued?) (r4fb3 core-prim . real-part) (r4fb2 core-prim . rationalize) (r4fb1 core-prim . rational?) (r4fb0 core-prim . rational-valued?) (r4faf core-prim . procedure?) (r4fae core-prim . positive?) (r4fad core-prim . pair?) (r4fac core-prim . odd?) (r4fab core-prim . numerator) (r4faa core-prim . number?) (r4fa9 core-prim . number->string) (r4fa8 core-prim . null?) (r4fa7 core-prim . not) (r4fa6 core-prim . negative?) (r4fa5 core-prim . nan?) (r4fa4 core-prim . min) (r4fa3 core-prim . max) (r4fa2 core-prim . map) (r4fa1 core-prim . make-vector) (r4fa0 core-prim . make-string) (r4f9f core-prim . make-rectangular) (r4f9e core-prim . make-polar) (r4f9d core-prim . magnitude) (r4f9c core-prim . log) (r4f9b core-prim . list?) (r4f9a core-prim . list-tail) (r4f99 core-prim . list-ref) (r4f98 core-prim . list->vector) (r4f97 core-prim . list->string) (r4f96 core-prim . list) (r4f95 core-prim . length) (r4f94 core-prim . lcm) (r4f93 core-prim . integer?) (r4f92 core-prim . integer-valued?) (r4f91 core-prim . integer->char) (r4f90 core-prim . infinite?) (r4f8f core-prim . inexact?) (r4f8e core-prim . inexact) (r4f8d core-prim . imag-part) (r4f8c core-prim . gcd) (r4f8b core-prim . for-each) (r4f8a core-prim . floor) (r4f89 core-prim . finite?) (r4f88 core-prim . expt) (r4f87 core-prim . exp) (r4f86 core-prim . exact?) (r4f85 core-prim . exact-integer-sqrt) (r4f84 core-prim . exact) (r4f83 core-prim . even?) (r4f82 core-prim . error) (r4f81 core-prim . eqv?) (r4f80 core-prim . equal?) (r4f7f core-prim . eq?) (r4f7e core-prim . dynamic-wind) (r4f7d core-prim . div0-and-mod0) (r4f7c core-prim . mod0) (r4f7b core-prim . div0) (r4f7a core-prim . div-and-mod) (r4f79 core-prim . mod) (r4f78 core-prim . div) (r4f77 core-prim . denominator) (r4f76 core-prim . cos) (r4f75 core-prim . cons) (r4f74 core-prim . complex?) (r4f73 core-prim . char?) (r4f72 core-prim . char>?) (r4f71 core-prim . char>=?) (r4f70 core-prim . char=?) (r4f6f core-prim . char<?) (r4f6e core-prim . char<=?) (r4f6d core-prim . char->integer) (r4f6c core-prim . ceiling) (r4f6b core-prim . call-with-values) (r4f6a core-prim . call/cc) (r4f69 core-prim . call-with-current-continuation) (r4f68 core-prim . cddddr) (r4f67 core-prim . cdddar) (r4f66 core-prim . cddadr) (r4f65 core-prim . cddaar) (r4f64 core-prim . cdaddr) (r4f63 core-prim . cdadar) (r4f62 core-prim . cdaadr) (r4f61 core-prim . cdaaar) (r4f60 core-prim . cadddr) (r4f5f core-prim . caddar) (r4f5e core-prim . cadadr) (r4f5d core-prim . cadaar) (r4f5c core-prim . caaddr) (r4f5b core-prim . caadar) (r4f5a core-prim . caaadr) (r4f59 core-prim . caaaar) (r4f58 core-prim . cdddr) (r4f57 core-prim . cddar) (r4f56 core-prim . cdadr) (r4f55 core-prim . cdaar) (r4f54 core-prim . caddr) (r4f53 core-prim . cadar) (r4f52 core-prim . caadr) (r4f51 core-prim . caaar) (r4f50 core-prim . cddr) (r4f4f core-prim . cdar) (r4f4e core-prim . cadr) (r4f4d core-prim . caar) (r4f4c core-prim . cdr) (r4f4b core-prim . car) (r4f4a core-prim . boolean?) (r4f49 core-prim . boolean=?) (r4f48 core-prim . atan) (r4f47 core-prim . assertion-violation) (r2fe1 core-prim . assertion-error) (r4f46 core-prim . asin) (r4f45 core-prim . apply) (r4f44 core-prim . append) (r4f43 core-prim . angle) (r4f42 core-prim . acos) (r4f41 core-prim . abs) (r4f40 core-prim . /) (r4f3f core-prim . *) (r4f3e core-prim . -) (r4f3d core-prim . +) (r4f3c core-prim . >=) (r4f3b core-prim . >) (r4f3a core-prim . =) (r4f39 core-prim . <=) (r4f38 core-prim . <) (r4f37 core-prim . library) (r4f36 $core-rtd &no-nans-rtd &no-nans-rcd) (r4f35 $core-rtd &no-infinities-rtd &no-infinities-rcd) (r4f34 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (r4f33 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (r4f32 $core-rtd &i/o-port-rtd &i/o-port-rcd) (r4f31 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (r4f30 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (r4f2f $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (r4f2e $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (r4f2d $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (r4f2c $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (r4f2b $core-rtd &i/o-write-rtd &i/o-write-rcd) (r4f2a $core-rtd &i/o-read-rtd &i/o-read-rcd) (r4f29 $core-rtd &i/o-rtd &i/o-rcd) (r4f28 $core-rtd &undefined-rtd &undefined-rcd) (r4f27 $core-rtd &syntax-rtd &syntax-rcd) (r4f26 $core-rtd &lexical-rtd &lexical-rcd) (r4f25 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (r4f24 $core-rtd &non-continuable-rtd &non-continuable-rcd) (r4f23 $core-rtd &who-rtd &who-rcd) (r4f22 $core-rtd &irritants-rtd &irritants-rcd) (r4f21 $core-rtd &assertion-rtd &assertion-rcd) (r4f20 $core-rtd &violation-rtd &violation-rcd) (r4f1f $core-rtd &error-rtd &error-rcd) (r4f1e $core-rtd &serious-rtd &serious-rcd) (r4f1d $core-rtd &warning-rtd &warning-rcd) (r4f1c $core-rtd &message-rtd &message-rcd) (r4f1b $core-rtd &condition-rtd &condition-rcd) (r4f1a macro . define-condition-type) (r4f19 macro . define-enumeration) (r4f18 macro . define-record-type) (r4f17 macro . parent-rtd) (r4f16 macro . nongenerative) (r4f15 macro . opaque) (r4f14 macro . sealed) (r4f13 macro . protocol) (r4f12 macro . parent) (r4f11 macro . immutable) (r4f10 macro . mutable) (r4f0f macro . fields) (r4f0e macro . error-handling-mode) (r4f0d macro . file-options) (r4f0c macro . buffer-mode) (r4f0b macro . eol-style) (r4f0a macro . guard) (r4f09 macro . trace-define) (r4f08 macro . trace-lambda) (r4f07 macro . unsyntax-splicing) (r4f06 macro . unsyntax) (r4f05 macro . unquote-splicing) (r4f04 macro . unquote) (r4f03 macro . _) (r4f02 macro . else) (r4f01 macro . =>) (r4f00 macro . ...) (r4eff macro . assert) (r4efe macro . endianness) (r4efd macro . delay) (r4efc macro . time) (r4efb macro . do) (r4efa macro . cond) (r4ef9 macro . let*) (r4ef8 macro . let) (r4ef7 macro . let*-values) (r4ef6 macro . let-values) (r4ef5 macro . identifier-syntax) (r4ef4 macro . with-syntax) (r4ef3 macro . quasisyntax) (r4ef2 macro . quasiquote) (r4ef1 macro . syntax-rules) (r4ef0 macro . include) (r4eef macro . define-struct) (r4eee core-macro . record-constructor-descriptor) (r4eed core-macro . record-type-descriptor) (r4eec macro . case) (r4eeb macro . parameterize) (r4eea macro . unless) (r4ee9 macro . when) (r4ee8 core-macro . or) (r4ee7 core-macro . and) (r4ee6 core-macro . if) (r4ee5 core-macro . letrec*) (r4ee4 core-macro . letrec) (r4ee3 core-macro . type-descriptor) (r4ee2 core-macro . case-lambda) (r4ee1 core-macro . lambda) (r4ee0 core-macro . syntax) (r4edf core-macro . syntax-case) (r4ede core-macro . quote) (r4edd core-macro . foreign-call) (r4edc letrec-syntax) (r4edb let-syntax) (r4eda set!) (r4ed9 import) (r4ed8 begin) (r4ed7 module) (r4ed6 define-syntax) (r4ed5 define)) values values '#f '#f '#f '#f) (r2b16@r29b5@install-library 'r5213 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . r51f2) (eval-core . r51f1) (set-symbol-value! . r51f0) (symbol-value . r51ef) (gensym . r51ee) (void . r51ed)) '() values values '#f '#f '#f '#f) (r2b16@r29b5@install-library 'r5214 '(mosh) '() '() '() '() '((set-symbol-value! . r51f0) (symbol-value . r51ef) (regexp? . r51eb) (read-line . r51ea) (ungensym . r51e9) (alist->eq-hash-table . r51e8) (assoc-ref . r51e7) (print . r51e6) (format . r51e5) (host-os . r51e4) (library-path . r2994) (standard-library-path . r51e3) (file-newer? . r51e2) (stat-mtime . r51e1) (digit->integer . r51dd) (call-with-string-input-port . r51dc) (call-with-string-io . r51db) (string-split . r51da) (bytevector-for-each . r51d9) (string->regexp . r51d8) (rxmatch . r51d7) (regexp-replace-all . r51d6) (hashtable-for-each . r51d5) (set-current-directory! . r51d0) (expand-path . r51cf) (current-directory . r51ce) (p . r5191) (get-timeofday . r517e) (get-command-line . r517d) (sys-display . r517c) (whereis . r517b) (register . r517a) (vm-join! . r5179) (vm-set-value! . r5178) (vm? . r5177) (main-vm? . r5176) (vm-eval . r5175) (vm-self . r5174) (vm-start! . r5173) (make-vm . r5172) (mutex-try-lock! . r5171) (mutex-unlock! . r5170) (mutex-lock! . r516f) (mutex? . r516e) (make-mutex . r516d) (condition-variable-notify-all! . r516c) (condition-variable-notify! . r516b) (condition-variable-wait! . r516a) (make-condition-variable . r5169) (mosh-executable-path . r5168) (make-file-options . r5167) (source-info . r5166) (make-compiler-instruction . r5165) (make-instruction . r5164) (set-source-info! . r5163) (bignum? . r5162) (fast-equal? . r5161) (fasl-read . r5160) (fasl-write . r515f) (time-usage . r515e) (os-constant . r515d) (time . r4efc) (include . r4ef0)) '() values values '#f '#f '#f '#f) (r2b16@r29b5@install-library 'r5215 '(system) '() '() '() '() '((write-to-file . r51e0) (file->list . r51df) (file->string . r51de) (call-process . r51d4) (local-tz-offset . r51d3) (microseconds . r51d2) (directory-list . r51d1) (expand-path . r51cf) (%spawn . r51cd) (%waitpid . r51cc) (simple-struct-name . r51cb) (simple-struct-set! . r51ca) (simple-struct-ref . r51c9) (make-simple-struct . r51c8) (simple-struct? . r51c7) (pointer-ref-c-int64 . r51c6) (pointer-ref-c-int32 . r51c5) (pointer-ref-c-int16 . r51c4) (pointer-ref-c-int8 . r51c3) (pointer-ref-c-uint64 . r51c2) (pointer-ref-c-uint32 . r51c1) (pointer-ref-c-uint16 . r51c0) (pointer-ref-c-uint8 . r51bf) (pointer-set-c-uint64! . r51be) (pointer-set-c-uint32! . r51bd) (pointer-set-c-uint16! . r51bc) (pointer-set-c-uint8! . r51bb) (pointer-set-c-int64! . r51ba) (pointer-set-c-int32! . r51b9) (pointer-set-c-int16! . r51b8) (pointer-set-c-int8! . r51b7) (pointer-set-c-pointer! . r51b6) (pointer-set-c-double! . r51b5) (pointer-set-c-float! . r51b4) (pointer-set-c-long-long! . r51b3) (pointer-set-c-long! . r51b2) (pointer-set-c-int! . r51b1) (pointer-set-c-short! . r51b0) (pointer-set-c-char! . r51af) (pointer-ref-c-pointer . r51ae) (pointer-ref-c-double . r51ad) (pointer-ref-c-float . r51ac) (pointer-ref-c-unsigned-long-long . r51ab) (pointer-ref-c-signed-long-long . r51aa) (pointer-ref-c-unsigned-long . r51a9) (pointer-ref-c-signed-long . r51a8) (pointer-ref-c-unsigned-int . r51a7) (pointer-ref-c-signed-int . r51a6) (pointer-ref-c-unsigned-short . r51a5) (pointer-ref-c-signed-short . r51a4) (pointer-ref-c-unsigned-char . r51a3) (pointer-ref-c-signed-char . r51a2) (pointer->integer . r51a1) (integer->pointer . r51a0) (pointer? . r519f) (shared-errno . r519e) (%ffi-supported? . r519d) (%ffi-pointer->string . r519c) (%ffi-call->string-or-zero . r519b) (%ffi-call->double . r519a) (%ffi-call->void* . r5199) (%ffi-call->void . r5198) (%ffi-call->char . r5197) (%ffi-call->int . r5196) (%ffi-lookup . r5195) (%ffi-open . r5194) (%fork . r5193) (%pipe . r5192) (open-output-string . r5190) (get-output-string . r518f) (file-stat-ctime . r518e) (file-stat-atime . r518d) (file-stat-mtime . r518c) (file-size-in-bytes . r518b) (file-writable? . r518a) (file-executable? . r5189) (file-readable? . r5188) (file-regular? . r5187) (file-symbolic-link? . r5186) (file-directory? . r5185) (create-symbolic-link . r5184) (rename-file . r5183) (delete-directory . r5182) (create-directory . r5181) (get-environment-variables . r5180) (get-environment-variable . r517f) (make-parameter . r27c7) (socket-port . r515c) (socket-shutdown . r515b) (socket-close . r515a) (socket-send . r5159) (socket-recv! . r5158) (socket-recv . r5157) (make-server-socket . r5156) (make-client-socket . r5155) (socket-accept . r5154) (socket? . r5153) (parameterize . r4eeb)) '() values values '#f '#f '#f '#f))
((lambda (r4d9e@add-library-path! r4da0@parse-and-add-library-path r4da2@for-each-with-index r4da4@rpad r4da6@condition-printer r4da8@record->field-alist r4daa@map-with-index r4dac@repl r4dae@trace-printer r4db0@command-line r4db2@local-library-path r4db4@load/args r4db6@load r4db8@ironscheme-build r4dba@eval-top-level r4dbc@compile-system-libraries r4dbe@compile r4dc0@compile->closure r4dc2@pre-compile-r6rs-file r4dc4@load-r6rs-top-level r4dc6@load-r6rs-top-level-sexp) (begin (set! r4d9e@add-library-path! (lambda (r4de9@path) (r2b06@r2995@library-path (append (r2b06@r2995@library-path) (list r4de9@path))))) (set! r4da0@parse-and-add-library-path (lambda (r4deb@paths r4dec@message) ((lambda (r4def@t) (if r4def@t ((lambda (r4df1@paths) (for-each (lambda (r4df3@path) (if (file-exists? r4df3@path) (r4d9e@add-library-path! (expand-path r4df3@path)) (format (current-error-port) r4dec@message r4df3@path))) (string-split r4df1@paths '#\:))) r4def@t) (void))) r4deb@paths))) (set! r4da2@for-each-with-index (lambda (r4df5@proc r4df6@lst) (letrec ((r4df9@loop (lambda (r4dfb@i r4dfc@lst) (if (null? r4dfc@lst) (if '#f '#f (void)) (begin (r4df5@proc r4dfb@i (car r4dfc@lst)) (r4df9@loop (+ r4dfb@i '1) (cdr r4dfc@lst))))))) (r4df9@loop '1 r4df6@lst)))) (set! r4da4@rpad (lambda (r4dff@str r4e00@pad r4e01@n) ((lambda (r4e05@rest) ((letrec ((r4e07@loop (lambda (r4e09@rest r4e0a@ret) (if (<= r4e09@rest '0) r4e0a@ret (r4e07@loop (- r4e09@rest '1) (string-append r4e0a@ret r4e00@pad)))))) r4e07@loop) r4e05@rest (format '"~a" r4dff@str))) (- r4e01@n (string-length (format '"~a" r4dff@str)))))) (set! r4da6@condition-printer (lambda (r4e0d@e r4e0e@port) ((lambda (r4e12@max-condition-len) (begin (set! r4e12@max-condition-len (apply max (map (lambda (r4e23@c) (string-length (symbol->string (record-type-name (record-rtd r4e23@c))))) (simple-conditions r4e0d@e)))) (begin (display '" Condition components:\n" r4e0e@port) (r4da2@for-each-with-index (lambda (r4e13@i r4e14@x) ((lambda (r4e17@rtd r4e18@fields-alist) (begin (format r4e0e@port '" ~d. ~a" r4e13@i (r4da4@rpad (symbol->string (record-type-name r4e17@rtd)) '" " r4e12@max-condition-len)) (if (null? r4e18@fields-alist) (newline r4e0e@port) (void)) ((letrec ((r4e1b@loop (lambda (r4e1d@first r4e1e@fields-alist) (if (null? r4e1e@fields-alist) '() ((lambda (r4e21@field) (begin (if (not r4e1d@first) (display (r4da4@rpad '"" '" " (+ '4 r4e12@max-condition-len)) r4e0e@port) (void)) (display '"       " r4e0e@port) (display (car r4e21@field) r4e0e@port) (display '": " r4e0e@port) (write (cdr r4e21@field) r4e0e@port) (newline r4e0e@port) (r4e1b@loop '#f (cdr r4e1e@fields-alist)))) (car r4e1e@fields-alist)))))) r4e1b@loop) '#t r4e18@fields-alist))) (record-rtd r4e14@x) (r4da8@record->field-alist r4e14@x))) (simple-conditions r4e0d@e))))) '#f))) (set! r4da8@record->field-alist (lambda (r4e25@r) ((lambda (r4e28@ref) (begin (set! r4e28@ref (lambda (r4e33@rtd r4e34@i r4e35@x) ((lambda (r4e39@val) (if (symbol? r4e39@val) (ungensym r4e39@val) r4e39@val)) ((record-accessor r4e33@rtd r4e34@i) r4e35@x)))) ((letrec ((r4e29@loop (lambda (r4e2b@ret r4e2c@rtd) (if r4e2c@rtd (r4e29@loop (append r4e2b@ret (r4daa@map-with-index (lambda (r4e2f@i r4e30@field) (cons r4e30@field (r4e28@ref r4e2c@rtd r4e2f@i r4e25@r))) (vector->list (record-type-field-names r4e2c@rtd)))) (record-type-parent r4e2c@rtd)) r4e2b@ret)))) r4e29@loop) '() (record-rtd r4e25@r)))) '#f))) (set! r4daa@map-with-index (lambda (r4e3b@proc r4e3c@lst) ((letrec ((r4e3f@loop (lambda (r4e41@i r4e42@lst r4e43@ret) (if (null? r4e42@lst) (reverse r4e43@ret) (r4e3f@loop (+ r4e41@i '1) (cdr r4e42@lst) (cons (r4e3b@proc r4e41@i (car r4e42@lst)) r4e43@ret)))))) r4e3f@loop) '0 r4e3c@lst '()))) (set! r4dac@repl (lambda r4e47@x ((lambda (r4e4a@rec) (begin (set! r4e4a@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (r4e4d@r4e4b) (lambda () (with-exception-handler (lambda (r4e4f@e) ((call/cc (lambda (r4e51@r4e4c) (r4e4d@r4e4b (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? r4e4f@e) (r4da6@condition-printer r4e4f@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" r4e4f@e))) (r4e51@r4e4c (lambda () (raise-continuable r4e4f@e)))))))))) (lambda () ((letrec ((r4e53@loop (lambda (r4e55@line r4e56@accum) ((lambda (r4e5a@parentheses-ok? r4e5c@eval-string-print) (begin (set! r4e5a@parentheses-ok? (lambda (r4e61@text) ((letrec ((r4e63@loop (lambda (r4e65@chars r4e66@p0 r4e67@p1) (if (null? r4e65@chars) (= '0 r4e66@p0 r4e67@p1) ((lambda (r4e6b@t) (if (memv r4e6b@t '(#\()) (r4e63@loop (cdr r4e65@chars) (+ r4e66@p0 '1) r4e67@p1) (if (memv r4e6b@t '(#\))) (r4e63@loop (cdr r4e65@chars) (- r4e66@p0 '1) r4e67@p1) (if (memv r4e6b@t '(#\[)) (r4e63@loop (cdr r4e65@chars) r4e66@p0 (+ r4e67@p1 '1)) (if (memv r4e6b@t '(#\])) (r4e63@loop (cdr r4e65@chars) r4e66@p0 (- r4e67@p1 '1)) (r4e63@loop (cdr r4e65@chars) r4e66@p0 r4e67@p1)))))) (car r4e65@chars)))))) r4e63@loop) (string->list r4e61@text) '0 '0))) (set! r4e5c@eval-string-print (lambda (r4e5f@text) (if (not (or (string=? '"\n" r4e5f@text) (= '0 (string-length r4e5f@text)))) (write (r4dba@eval-top-level (call-with-port (open-string-input-port r4e5f@text) read))) (void)))) (if (eof-object? r4e55@line) (begin (r4e5c@eval-string-print r4e56@accum) (exit)) ((lambda (r4e5d@current) (if (r4e5a@parentheses-ok? r4e5d@current) (r4e5c@eval-string-print r4e5d@current) (r4e53@loop (get-line (current-input-port)) r4e5d@current))) (string-append r4e56@accum r4e55@line))))) '#f '#f)))) r4e53@loop) (get-line (current-input-port)) '""))))))) (newline) (r4e4a@rec)))) (r4e4a@rec))) '#f))) (set! r4dae@trace-printer (r289e@r27c8@make-parameter write)) (set! r4db0@command-line (r289e@r27c8@make-parameter (get-command-line))) (set! r4db2@local-library-path (lambda (r4e6d@filename) (r2b06@r2995@library-path))) (set! r4db4@load/args (lambda (r4e6f@filename . r4e71@args) (begin (apply r4dc4@load-r6rs-top-level r4e6f@filename 'load r4e71@args) (void)))) (set! r4db6@load (lambda (r4e73@filename) (begin (apply r4dc4@load-r6rs-top-level r4e73@filename 'load (r4db0@command-line)) (void)))) (set! r4db8@ironscheme-build (lambda () (r4db6@load '"ironscheme-buildscript.ss"))) (set! r4dba@eval-top-level (lambda (r4e75@x) (r49ca@r2fc8@eval r4e75@x (r49e0@r2ff4@interaction-environment)))) (set! r4dbc@compile-system-libraries (lambda () (r4dba@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! r4dbe@compile (lambda (r4e77@filename) (r4dc4@load-r6rs-top-level r4e77@filename 'compile))) (set! r4dc0@compile->closure (lambda (r4e79@filename) (r4dc4@load-r6rs-top-level r4e79@filename 'closure))) (set! r4dc2@pre-compile-r6rs-file (lambda (r4e7b@filename) (r4dc4@load-r6rs-top-level r4e7b@filename 'compile))) (set! r4dc4@load-r6rs-top-level (lambda (r4e7d@filename r4e7e@how . r4e81@args) ((lambda (r4e87@r4e84 r4e88@r4e86) ((lambda (r4e8b@swap) (dynamic-wind r4e8b@swap (lambda () ((lambda (r4e8d@x*) ((lambda (r4e8f@t) (if (memv r4e8f@t '(closure)) (r49df@r2ff2@pre-compile-r6rs-top-level r4e8d@x*) (if (memv r4e8f@t '(load)) ((lambda (r4e95@r4e92 r4e96@r4e94) ((lambda (r4e99@swap) (dynamic-wind r4e99@swap (lambda () ((r49de@r2ff0@compile-r6rs-top-level r4e8d@x*))) r4e99@swap)) (lambda () ((lambda (r4e9b@t) (begin (r4e95@r4e92 r4e96@r4e94) (set! r4e96@r4e94 r4e9b@t))) (r4e95@r4e92))))) r4db0@command-line (cons r4e7d@filename (car r4e81@args))) (if (memv r4e8f@t '(compile)) (begin (r49de@r2ff0@compile-r6rs-top-level r4e8d@x*) (r2b0a@r299d@serialize-all r2899@r27be@serialize-library r28f3@r28ac@compile-core-expr)) (if '#f '#f (void)))))) r4e7e@how)) (with-input-from-file r4e7d@filename (lambda () ((letrec ((r4e9d@f (lambda () ((lambda (r4e9f@x) (if (eof-object? r4e9f@x) '() (cons r4e9f@x (r4e9d@f)))) (r2891@r27ae@read-annotated))))) r4e9d@f)))))) r4e8b@swap)) (lambda () ((lambda (r4ea1@t) (begin (r4e87@r4e84 r4e88@r4e86) (set! r4e88@r4e86 r4ea1@t))) (r4e87@r4e84))))) r2b06@r2995@library-path (r4db2@local-library-path r4e7d@filename)))) (set! r4dc6@load-r6rs-top-level-sexp (lambda (r4ea3@import-spec r4ea4@thunk) ((lambda (r4eab@r4ea8 r4eac@r4eaa) ((lambda (r4eaf@swap) (dynamic-wind r4eaf@swap (lambda () ((lambda (r4eb5@r4eb2 r4eb6@r4eb4) ((lambda (r4eb9@swap) (dynamic-wind r4eb9@swap (lambda () ((r49de@r2ff0@compile-r6rs-top-level (list (cons 'import r4ea3@import-spec) (list r4ea4@thunk))))) r4eb9@swap)) (lambda () ((lambda (r4ebb@t) (begin (r4eb5@r4eb2 r4eb6@r4eb4) (set! r4eb6@r4eb4 r4ebb@t))) (r4eb5@r4eb2))))) r4db0@command-line '())) r4eaf@swap)) (lambda () ((lambda (r4ebd@t) (begin (r4eab@r4ea8 r4eac@r4eaa) (set! r4eac@r4eaa r4ebd@t))) (r4eab@r4ea8))))) r2b06@r2995@library-path (r4db2@local-library-path '"")))) (begin (set! r4ed3@r4dc6@load-r6rs-top-level-sexp r4dc6@load-r6rs-top-level-sexp) (set! r4ed2@r4dc4@load-r6rs-top-level r4dc4@load-r6rs-top-level) (set! r4ed1@r4dc2@pre-compile-r6rs-file r4dc2@pre-compile-r6rs-file) (set! r4ed0@r4dc0@compile->closure r4dc0@compile->closure) (set! r4ecf@r4dbe@compile r4dbe@compile) (set! r4ece@r4dbc@compile-system-libraries r4dbc@compile-system-libraries) (set! r4ecd@r4dba@eval-top-level r4dba@eval-top-level) (set! r4ecc@r4db8@ironscheme-build r4db8@ironscheme-build) (set! r4ecb@r4db6@load r4db6@load) (set! r4eca@r4db4@load/args r4db4@load/args) (set! r4ec9@r4db2@local-library-path r4db2@local-library-path) (set! r4ec8@r4db0@command-line r4db0@command-line) (set! r4ec7@r4dae@trace-printer r4dae@trace-printer) (set! r4ec6@r4dac@repl r4dac@repl) (set! r4ec5@r4daa@map-with-index r4daa@map-with-index) (set! r4ec4@r4da8@record->field-alist r4da8@record->field-alist) (set! r4ec3@r4da6@condition-printer r4da6@condition-printer) (set! r4ec2@r4da4@rpad r4da4@rpad) (set! r4ec1@r4da2@for-each-with-index r4da2@for-each-with-index) (set! r4ec0@r4da0@parse-and-add-library-path r4da0@parse-and-add-library-path) (set! r4ebf@r4d9e@add-library-path! r4d9e@add-library-path!) (r2b0b@r299f@current-precompiled-library-loader r289a@r27c0@load-serialized-library) (set-symbol-value! 'load r4db6@load) (set-symbol-value! 'pre-compile-r6rs-file r4dc2@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs r4dba@eval-top-level) (set-symbol-value! 'int-env-syms r49c1@r2fb6@interaction-environment-symbols) (set-symbol-value! 'expanded2core r28f2@r28aa@expanded->core) (set-symbol-value! 'trace-printer r4dae@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (r4dc7@c) (condition (r4cfb@r4b05@make-non-continuable-violation) (r4cf1@r4aec@make-who-condition 'raise) (r4cb5@r4a4d@make-message-condition '"returned from non-continuable exception") (r4ce7@r4ad1@make-irritants-condition (list r4dc7@c))))) (r4da0@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (r4da0@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (r4d9e@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (r4d9e@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (r4d9e@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) ((lambda (r4dc9@prefix) (r2b07@r2997@library-extensions (r4dc9@prefix '".mosh" (r2b07@r2997@library-extensions)))) (lambda (r4dcb@ext r4dcc@ls) (append (map (lambda (r4dcf@x) (string-append r4dcb@ext r4dcf@x)) r4dcc@ls) r4dcc@ls))) ((lambda (r4dd1@args r4dd2@port) ((lambda (r4dd6@ref) (begin (set! r4dd6@ref (lambda (r4de1@rtd r4de2@i r4de3@x) ((lambda (r4de7@val) (if (symbol? r4de7@val) (ungensym r4de7@val) r4de7@val)) ((record-accessor r4de1@rtd r4de2@i) r4de3@x)))) (with-exception-handler (lambda (r4dd7@c) (if (condition? r4dd7@c) (r4da6@condition-printer r4dd7@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" r4dd7@c))) (lambda () (if ((call/cc (lambda (r4ddb@r4dd9) (lambda () (with-exception-handler (lambda (r4ddd@c) ((call/cc (lambda (r4ddf@r4dda) (r4ddb@r4dd9 (lambda () (if '#t '#f (r4ddf@r4dda (lambda () (raise-continuable r4ddd@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (r4dc6@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? r4dd1@args) (r4dac@repl) (r4dc4@load-r6rs-top-level (car r4dd1@args) 'load (cdr r4dd1@args)))))))) '#f)) (r4db0@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
