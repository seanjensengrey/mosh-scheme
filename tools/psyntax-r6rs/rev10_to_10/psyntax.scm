;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! pD28cb@library-file-path->cache-path (unspecified)) (set! pD28cd@read-annotated (unspecified)) (set! pD28cf@annotation-stripped (unspecified)) (set! pD28d1@annotation? (unspecified)) (set! pD28d3@annotation-source (unspecified)) (set! pD28d5@annotation-expression (unspecified)) (set! pD28d7@scm->fasl (unspecified)) (set! pD28d9@fasl-save (unspecified)) (set! pD28db@fasl-load (unspecified)) (set! pD28dd@serialize-library (unspecified)) (set! pD28df@load-serialized-library (unspecified)) (set! pD28e1@make-record-printer (unspecified)) (set! pD28e3@compile-core (unspecified)) (set! pD28e5@read-library-source-file (unspecified)) (set! pD28e7@make-parameter (unspecified)) (set! pD28e9@mosh-cache-dir (unspecified)) (set! pD297f@file-options-spec (unspecified)) (set! pD28cb@library-file-path->cache-path (lambda (pD2980@x) (call-with-values (lambda () (open-string-output-port)) (lambda (pD2986@pD2983 pD2987@pD2985) (let ((pD298a@extract pD2987@pD2985) (pD298b@p pD2986@pD2983)) (let ((pD298f@display-hex '#f)) (begin (set! pD298f@display-hex (lambda (pD2998@n) (if (<= '0 pD2998@n '9) (display pD2998@n pD298b@p) (display (integer->char (+ (char->integer '#\a) (- pD2998@n '10))) pD298b@p)))) (begin (let pD2992@f ((pD2990@ls (string-split pD2980@x '#\/))) (if (not (null? pD2990@ls)) (begin (display '"_" pD298b@p) (for-each (lambda (pD2994@c) (if (or (char<=? '#\a pD2994@c '#\z) (char<=? '#\A pD2994@c '#\Z) (char<=? '#\0 pD2994@c '#\9) (memv pD2994@c '(#\- #\. #\_ #\~))) (display pD2994@c pD298b@p) (begin (display '"%" pD298b@p) (let ((pD2996@n (char->integer pD2994@c))) (begin (pD298f@display-hex (quotient pD2996@n '16)) (pD298f@display-hex (remainder pD2996@n '16))))))) (string->list (car pD2990@ls))) (pD2992@f (cdr pD2990@ls))) (void))) (pD298a@extract))))))))) (set! pD29fa@pD28cb@library-file-path->cache-path pD28cb@library-file-path->cache-path) (set! pD28cd@read-annotated read) (set! pD29fb@pD28cd@read-annotated pD28cd@read-annotated) (set! pD28cf@annotation-stripped (lambda (pD299a@x) (pD28d5@annotation-expression pD299a@x))) (set! pD29fc@pD28cf@annotation-stripped pD28cf@annotation-stripped) (set! pD28d1@annotation? (lambda (pD299c@x) (source-info pD299c@x))) (set! pD29fd@pD28d1@annotation? pD28d1@annotation?) (set! pD28d3@annotation-source (lambda (pD299e@x) (source-info pD299e@x))) (set! pD29fe@pD28d3@annotation-source pD28d3@annotation-source) (set! pD28d5@annotation-expression (lambda (pD29a0@x) (if (pair? pD29a0@x) (cons (car pD29a0@x) (cdr pD29a0@x)) (if (procedure? pD29a0@x) (set-source-info! pD29a0@x '#f) pD29a0@x)))) (set! pD29ff@pD28d5@annotation-expression pD28d5@annotation-expression) (set! pD28d7@scm->fasl (lambda (pD29a2@filename) (string-append (pD28e9@mosh-cache-dir) '"/" (pD28cb@library-file-path->cache-path pD29a2@filename) '".mosh-fasl"))) (set! pD2a00@pD28d7@scm->fasl pD28d7@scm->fasl) (set! pD28d9@fasl-save (lambda (pD29a4@filename pD29a5@obj) (call-with-port (open-file-output-port pD29a4@filename) (lambda (pD29a8@port) ((symbol-value 'fasl-write!) pD29a5@obj pD29a8@port))))) (set! pD2a01@pD28d9@fasl-save pD28d9@fasl-save) (set! pD28db@fasl-load (lambda (pD29aa@filename) (call-with-port (open-file-input-port pD29aa@filename) (symbol-value 'fasl-read!)))) (set! pD2a02@pD28db@fasl-load pD28db@fasl-load) (set! pD28dd@serialize-library (lambda (pD29ac@filename pD29ad@obj) (begin (let ((pD29b0@expanded2core (symbol-value 'expanded2core))) (let ((pD29b2@compile (symbol-value 'compile-w/o-halt))) (let ((pD29b4@code pD29ad@obj)) (let ((pD29b6@pivot (cddddr (cddddr pD29b4@code)))) (let ((pD29b8@visit (pD29b2@compile (pD29b0@expanded2core (car pD29b6@pivot))))) (begin (set-car! pD29b6@pivot pD29b8@visit) (let ((pD29ba@pivot (cdr pD29b6@pivot))) (let ((pD29bc@invoke (pD29b2@compile (pD29b0@expanded2core (car pD29ba@pivot))))) (set-car! pD29ba@pivot pD29bc@invoke))))))))) (let ((pD29be@fasl-file (pD28d7@scm->fasl pD29ac@filename))) (begin (if (file-exists? pD29be@fasl-file) (delete-file pD29be@fasl-file) (void)) ((call/cc (lambda (pD29c2@pD29c0) (lambda () (with-exception-handler (lambda (pD29c4@c) ((call/cc (lambda (pD29c6@pD29c1) (pD29c2@pD29c0 (lambda () (if '#t (begin (format (current-error-port) '"Warning:serialize-library failed " pD29ac@filename) (if (file-exists? pD29be@fasl-file) (delete-file pD29be@fasl-file) (void)) '#f) (pD29c6@pD29c1 (lambda () (raise-continuable pD29c4@c)))))))))) (lambda () (pD28d9@fasl-save pD29be@fasl-file pD29ad@obj)))))))))))) (set! pD2a03@pD28dd@serialize-library pD28dd@serialize-library) (set! pD28df@load-serialized-library (lambda (pD29c8@filename pD29c9@obj) (and (pD28e9@mosh-cache-dir) (let ((pD29cc@fasl-file (pD28d7@scm->fasl pD29c8@filename))) (if (and (file-exists? pD29cc@fasl-file) ((symbol-value 'file-newer?) pD29cc@fasl-file pD29c8@filename)) (let ((pD29ce@expanded2core (symbol-value 'expanded2core))) (let ((pD29d0@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((pD29d2@code (pD28db@fasl-load pD29cc@fasl-file))) (let ((pD29d4@pivot (cddddr (cddddr pD29d2@code)))) (let ((pD29d6@visit (car pD29d4@pivot))) (let ((pD29d8@visit-proc (lambda () (pD29d0@eval-compiled-core pD29d6@visit)))) (begin (set-car! pD29d4@pivot pD29d8@visit-proc) (let ((pD29da@pivot (cdr pD29d4@pivot))) (let ((pD29dc@invoke (car pD29da@pivot))) (begin (set-car! pD29da@pivot (lambda () (pD29d0@eval-compiled-core pD29dc@invoke))) (apply pD29c9@obj pD29d2@code))))))))))) '#f))))) (set! pD2a04@pD28df@load-serialized-library pD28df@load-serialized-library) (set! pD28e1@make-record-printer (lambda (pD29de@name pD29df@printer) (lambda pD29e2@x (begin (display '"record printer") (for-each display pD29e2@x))))) (set! pD2a05@pD28e1@make-record-printer pD28e1@make-record-printer) (set! pD28e3@compile-core (lambda pD29e4@x (apply error 'comile-core '"not implementated" pD29e4@x))) (set! pD2a06@pD28e3@compile-core pD28e3@compile-core) (set! pD28e5@read-library-source-file (lambda (pD29e6@file-name) (with-input-from-file pD29e6@file-name pD28cd@read-annotated))) (set! pD2a07@pD28e5@read-library-source-file pD28e5@read-library-source-file) (set! pD28e7@make-parameter (lambda pD29f6 (let ((pD29f7 (length pD29f6))) (if (= pD29f7 '1) (apply (lambda (pD29e8@x) (pD28e7@make-parameter pD29e8@x (lambda (pD29ea@x) pD29ea@x))) pD29f6) (if (= pD29f7 '2) (apply (lambda (pD29ec@x pD29ed@fender) (let ((pD29f0@x (pD29ed@fender pD29ec@x))) (lambda pD29f4 (let ((pD29f5 (length pD29f4))) (if (= pD29f5 '0) (apply (lambda () pD29f0@x) pD29f4) (if (= pD29f5 '1) (apply (lambda (pD29f2@v) (set! pD29f0@x (pD29ed@fender pD29f2@v))) pD29f4) (error 'apply '"invalid arg count"))))))) pD29f6) (error 'apply '"invalid arg count")))))) (set! pD2a08@pD28e7@make-parameter pD28e7@make-parameter) (set! pD28e9@mosh-cache-dir (pD28e7@make-parameter '#f)) (set! pD2a09@pD28e9@mosh-cache-dir pD28e9@mosh-cache-dir) (set! pD297f@file-options-spec (lambda (pD29f8@x) pD29f8@x)) (set! pD2a0a@pD297f@file-options-spec pD297f@file-options-spec) (void))
(begin (set! pD2a10@current-primitive-locations (unspecified)) (set! pD2a12@mutable? (unspecified)) (set! pD2a14@rewriter (unspecified)) (set! pD2a16@expanded->core (unspecified)) (set! pD2a18@compile-core-expr (unspecified)) (set! pD2a1a@pretty-print (unspecified)) (set! pD2a1c@compile-core-expr-to-port (unspecified)) (set! pD2a10@current-primitive-locations (pD2a08@pD28e7@make-parameter (lambda (pD2a1d@x) '#f) (lambda (pD2a1f@p) pD2a1f@p))) (set! pD2a5b@pD2a10@current-primitive-locations pD2a10@current-primitive-locations) (set! pD2a12@mutable? (lambda (pD2a21@x) (or (pair? pD2a21@x) (vector? pD2a21@x) (hashtable? pD2a21@x)))) (set! pD2a5c@pD2a12@mutable? pD2a12@mutable?) (set! pD2a14@rewriter (lambda (pD2a23@quote-hack?) (let ((pD2a26@f '#f)) (begin (set! pD2a26@f (lambda (pD2a27@x) (if (pair? pD2a27@x) (let ((pD2a29@t (car pD2a27@x))) (if (memv pD2a29@t '(quote)) (if (and pD2a23@quote-hack? (pD2a12@mutable? (cadr pD2a27@x))) (let ((pD2a2b@g (gensym))) (begin (set-symbol-value! pD2a2b@g (cadr pD2a27@x)) pD2a2b@g)) pD2a27@x) (if (memv pD2a29@t '(case-lambda)) (cons 'case-lambda (map (lambda (pD2a2d@x) (cons (car pD2a2d@x) (map pD2a26@f (cdr pD2a2d@x)))) (cdr pD2a27@x))) (if (memv pD2a29@t '(lambda)) (cons* 'lambda (cadr pD2a27@x) (map pD2a26@f (cddr pD2a27@x))) (if (memv pD2a29@t '(letrec)) (let ((pD2a2f@bindings (cadr pD2a27@x)) (pD2a30@body* (cddr pD2a27@x))) (let ((pD2a33@lhs* (map car pD2a2f@bindings)) (pD2a34@rhs* (map cadr pD2a2f@bindings))) (cons* 'letrec (map list pD2a33@lhs* (map pD2a26@f pD2a34@rhs*)) (map pD2a26@f pD2a30@body*)))) (if (memv pD2a29@t '(letrec*)) (let ((pD2a37@bindings (cadr pD2a27@x)) (pD2a38@body* (cddr pD2a27@x))) (let ((pD2a3b@lhs* (map car pD2a37@bindings)) (pD2a3c@rhs* (map cadr pD2a37@bindings))) (cons* 'letrec* (map list pD2a3b@lhs* (map pD2a26@f pD2a3c@rhs*)) (map pD2a26@f pD2a38@body*)))) (if (memv pD2a29@t '(library-letrec*)) (let ((pD2a3f@name (cadr pD2a27@x)) (pD2a40@x (cdr pD2a27@x))) (let ((pD2a43@bindings (cadr pD2a40@x)) (pD2a44@body* (cddr pD2a40@x))) (let ((pD2a47@lhs* (map car pD2a43@bindings)) (pD2a48@lhs** (map cadr pD2a43@bindings)) (pD2a49@rhs* (map caddr pD2a43@bindings))) (cons* 'library-letrec* pD2a3f@name (map list pD2a47@lhs* pD2a48@lhs** (map pD2a26@f pD2a49@rhs*)) (map pD2a26@f pD2a44@body*))))) (if (memv pD2a29@t '(begin)) (cons 'begin (map pD2a26@f (cdr pD2a27@x))) (if (memv pD2a29@t '(set!)) (list 'set! (cadr pD2a27@x) (pD2a26@f (caddr pD2a27@x))) (if (memv pD2a29@t '(primitive)) (let ((pD2a4d@op (cadr pD2a27@x))) (let ((pD2a4f@t ((pD2a10@current-primitive-locations) pD2a4d@op))) (if pD2a4f@t ((lambda (pD2a51@loc) pD2a51@loc) pD2a4f@t) pD2a4d@op))) (if (memv pD2a29@t '(define)) pD2a27@x (if (list? pD2a27@x) (map pD2a26@f pD2a27@x) (error 'rewrite '"invalid form ~s ~s" pD2a27@x (list? pD2a27@x)))))))))))))) pD2a27@x))) pD2a26@f)))) (set! pD2a5d@pD2a14@rewriter pD2a14@rewriter) (set! pD2a16@expanded->core (lambda (pD2a53@x) ((pD2a14@rewriter '#f) pD2a53@x))) (set! pD2a5e@pD2a16@expanded->core pD2a16@expanded->core) (set! pD2a18@compile-core-expr (lambda (pD2a55@x) ((pD2a14@rewriter '#f) pD2a55@x))) (set! pD2a5f@pD2a18@compile-core-expr pD2a18@compile-core-expr) (set! pD2a1a@pretty-print write) (set! pD2a60@pD2a1a@pretty-print pD2a1a@pretty-print) (set! pD2a1c@compile-core-expr-to-port (lambda (pD2a57@x pD2a58@p) (pD2a1a@pretty-print ((pD2a14@rewriter '#f) pD2a57@x) pD2a58@p))) (set! pD2a61@pD2a1c@compile-core-expr-to-port pD2a1c@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! pD2ab0@make-collection (unspecified)) (set! pD2ab2@current-library-collection (unspecified)) (set! pD2ab4@rp (unspecified)) (set! pD2abe@library? (unspecified)) (set! pD2ac0@library-id (unspecified)) (set! pD2ac2@set-library-id! (unspecified)) (set! pD2ac4@library-name (unspecified)) (set! pD2ac6@set-library-name! (unspecified)) (set! pD2ac8@library-version (unspecified)) (set! pD2aca@set-library-version! (unspecified)) (set! pD2acc@library-imp* (unspecified)) (set! pD2ace@set-library-imp*! (unspecified)) (set! pD2ad0@library-vis* (unspecified)) (set! pD2ad2@set-library-vis*! (unspecified)) (set! pD2ad4@library-inv* (unspecified)) (set! pD2ad6@set-library-inv*! (unspecified)) (set! pD2ad8@library-subst (unspecified)) (set! pD2ada@set-library-subst! (unspecified)) (set! pD2adc@library-env (unspecified)) (set! pD2ade@set-library-env! (unspecified)) (set! pD2ae0@library-visit-state (unspecified)) (set! pD2ae2@set-library-visit-state! (unspecified)) (set! pD2ae4@library-invoke-state (unspecified)) (set! pD2ae6@set-library-invoke-state! (unspecified)) (set! pD2ae8@library-visit-code (unspecified)) (set! pD2aea@set-library-visit-code! (unspecified)) (set! pD2aec@library-invoke-code (unspecified)) (set! pD2aee@set-library-invoke-code! (unspecified)) (set! pD2af0@library-visible? (unspecified)) (set! pD2af2@set-library-visible?! (unspecified)) (set! pD2af4@library-source-file-name (unspecified)) (set! pD2af6@set-library-source-file-name! (unspecified)) (set! pD2af8@dummy (unspecified)) (set! pD2afa@find-dependencies (unspecified)) (set! pD2afc@find-library-by (unspecified)) (set! pD2afe@library-path (unspecified)) (set! pD2b00@library-extensions (unspecified)) (set! pD2b02@library-name->file-name (unspecified)) (set! pD2b04@file-locator (unspecified)) (set! pD2b06@serialize-all (unspecified)) (set! pD2b08@current-precompiled-library-loader (unspecified)) (set! pD2b0a@try-load-from-file (unspecified)) (set! pD2b0c@library-loader (unspecified)) (set! pD2b0e@current-library-expander (unspecified)) (set! pD2b10@external-pending-libraries (unspecified)) (set! pD2b12@find-external-library (unspecified)) (set! pD2b14@find-library-by-name (unspecified)) (set! pD2b16@library-exists? (unspecified)) (set! pD2b18@find-library-by-spec/die (unspecified)) (set! pD2b1a@label->binding-table (unspecified)) (set! pD2b1c@install-library-record (unspecified)) (set! pD2b1e@install-library (unspecified)) (set! pD2b20@imported-label->binding (unspecified)) (set! pD2b22@invoke-library (unspecified)) (set! pD2b24@visit-library (unspecified)) (set! pD2b26@invoke-library-by-spec (unspecified)) (set! pD2b28@installed-libraries (unspecified)) (set! pD2b2a@library-spec (unspecified)) (set! pD2ab0@make-collection (lambda () (let ((pD2b2b@set '())) (let ((pD2b2e@set-cons '#f)) (begin (set! pD2b2e@set-cons (lambda (pD2b33@x pD2b34@ls) (if (memq pD2b33@x pD2b34@ls) pD2b34@ls (cons pD2b33@x pD2b34@ls)))) (lambda pD2b31 (let ((pD2b32 (length pD2b31))) (if (= pD2b32 '0) (apply (lambda () pD2b2b@set) pD2b31) (if (= pD2b32 '1) (apply (lambda (pD2b2f@x) (set! pD2b2b@set (pD2b2e@set-cons pD2b2f@x pD2b2b@set))) pD2b31) (error 'apply '"invalid arg count")))))))))) (set! pD2c9f@pD2ab0@make-collection pD2ab0@make-collection) (set! pD2ab2@current-library-collection (pD2a08@pD28e7@make-parameter (pD2ab0@make-collection) (lambda (pD2b37@x) (begin (if (not (procedure? pD2b37@x)) (assertion-violation 'current-library-collection '"not a procedure" pD2b37@x) (void)) pD2b37@x)))) (set! pD2ca0@pD2ab2@current-library-collection pD2ab2@current-library-collection) (set! pD2ab4@rp (pD2a05@pD28e1@make-record-printer 'library (lambda (pD2b39@x pD2b3a@p pD2b3b@wr) (begin (if (not (pD2abe@library? pD2b39@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (pD2ac8@library-version pD2b39@x)) (pD2ac4@library-name pD2b39@x) (append (pD2ac4@library-name pD2b39@x) (list (pD2ac8@library-version pD2b39@x))))) pD2b3a@p))))) (set! pD2ca1@pD2ab4@rp pD2ab4@rp) (set! pD2abe@library? (lambda (pD2b3f@x) (and (simple-struct? pD2b3f@x) (eq? (simple-struct-name pD2b3f@x) 'library)))) (set! pD2ca2@pD2abe@library? pD2abe@library?) (set! pD2ac0@library-id (lambda (pD2b41@x) (simple-struct-ref pD2b41@x '0))) (set! pD2ca3@pD2ac0@library-id pD2ac0@library-id) (set! pD2ac2@set-library-id! (lambda (pD2b43@x pD2b44@val) (simple-struct-set! pD2b43@x '0 pD2b44@val))) (set! pD2ca4@pD2ac2@set-library-id! pD2ac2@set-library-id!) (set! pD2ac4@library-name (lambda (pD2b47@x) (simple-struct-ref pD2b47@x '1))) (set! pD2ca5@pD2ac4@library-name pD2ac4@library-name) (set! pD2ac6@set-library-name! (lambda (pD2b49@x pD2b4a@val) (simple-struct-set! pD2b49@x '1 pD2b4a@val))) (set! pD2ca6@pD2ac6@set-library-name! pD2ac6@set-library-name!) (set! pD2ac8@library-version (lambda (pD2b4d@x) (simple-struct-ref pD2b4d@x '2))) (set! pD2ca7@pD2ac8@library-version pD2ac8@library-version) (set! pD2aca@set-library-version! (lambda (pD2b4f@x pD2b50@val) (simple-struct-set! pD2b4f@x '2 pD2b50@val))) (set! pD2ca8@pD2aca@set-library-version! pD2aca@set-library-version!) (set! pD2acc@library-imp* (lambda (pD2b53@x) (simple-struct-ref pD2b53@x '3))) (set! pD2ca9@pD2acc@library-imp* pD2acc@library-imp*) (set! pD2ace@set-library-imp*! (lambda (pD2b55@x pD2b56@val) (simple-struct-set! pD2b55@x '3 pD2b56@val))) (set! pD2caa@pD2ace@set-library-imp*! pD2ace@set-library-imp*!) (set! pD2ad0@library-vis* (lambda (pD2b59@x) (simple-struct-ref pD2b59@x '4))) (set! pD2cab@pD2ad0@library-vis* pD2ad0@library-vis*) (set! pD2ad2@set-library-vis*! (lambda (pD2b5b@x pD2b5c@val) (simple-struct-set! pD2b5b@x '4 pD2b5c@val))) (set! pD2cac@pD2ad2@set-library-vis*! pD2ad2@set-library-vis*!) (set! pD2ad4@library-inv* (lambda (pD2b5f@x) (simple-struct-ref pD2b5f@x '5))) (set! pD2cad@pD2ad4@library-inv* pD2ad4@library-inv*) (set! pD2ad6@set-library-inv*! (lambda (pD2b61@x pD2b62@val) (simple-struct-set! pD2b61@x '5 pD2b62@val))) (set! pD2cae@pD2ad6@set-library-inv*! pD2ad6@set-library-inv*!) (set! pD2ad8@library-subst (lambda (pD2b65@x) (simple-struct-ref pD2b65@x '6))) (set! pD2caf@pD2ad8@library-subst pD2ad8@library-subst) (set! pD2ada@set-library-subst! (lambda (pD2b67@x pD2b68@val) (simple-struct-set! pD2b67@x '6 pD2b68@val))) (set! pD2cb0@pD2ada@set-library-subst! pD2ada@set-library-subst!) (set! pD2adc@library-env (lambda (pD2b6b@x) (simple-struct-ref pD2b6b@x '7))) (set! pD2cb1@pD2adc@library-env pD2adc@library-env) (set! pD2ade@set-library-env! (lambda (pD2b6d@x pD2b6e@val) (simple-struct-set! pD2b6d@x '7 pD2b6e@val))) (set! pD2cb2@pD2ade@set-library-env! pD2ade@set-library-env!) (set! pD2ae0@library-visit-state (lambda (pD2b71@x) (simple-struct-ref pD2b71@x '8))) (set! pD2cb3@pD2ae0@library-visit-state pD2ae0@library-visit-state) (set! pD2ae2@set-library-visit-state! (lambda (pD2b73@x pD2b74@val) (simple-struct-set! pD2b73@x '8 pD2b74@val))) (set! pD2cb4@pD2ae2@set-library-visit-state! pD2ae2@set-library-visit-state!) (set! pD2ae4@library-invoke-state (lambda (pD2b77@x) (simple-struct-ref pD2b77@x '9))) (set! pD2cb5@pD2ae4@library-invoke-state pD2ae4@library-invoke-state) (set! pD2ae6@set-library-invoke-state! (lambda (pD2b79@x pD2b7a@val) (simple-struct-set! pD2b79@x '9 pD2b7a@val))) (set! pD2cb6@pD2ae6@set-library-invoke-state! pD2ae6@set-library-invoke-state!) (set! pD2ae8@library-visit-code (lambda (pD2b7d@x) (simple-struct-ref pD2b7d@x '10))) (set! pD2cb7@pD2ae8@library-visit-code pD2ae8@library-visit-code) (set! pD2aea@set-library-visit-code! (lambda (pD2b7f@x pD2b80@val) (simple-struct-set! pD2b7f@x '10 pD2b80@val))) (set! pD2cb8@pD2aea@set-library-visit-code! pD2aea@set-library-visit-code!) (set! pD2aec@library-invoke-code (lambda (pD2b83@x) (simple-struct-ref pD2b83@x '11))) (set! pD2cb9@pD2aec@library-invoke-code pD2aec@library-invoke-code) (set! pD2aee@set-library-invoke-code! (lambda (pD2b85@x pD2b86@val) (simple-struct-set! pD2b85@x '11 pD2b86@val))) (set! pD2cba@pD2aee@set-library-invoke-code! pD2aee@set-library-invoke-code!) (set! pD2af0@library-visible? (lambda (pD2b89@x) (simple-struct-ref pD2b89@x '12))) (set! pD2cbb@pD2af0@library-visible? pD2af0@library-visible?) (set! pD2af2@set-library-visible?! (lambda (pD2b8b@x pD2b8c@val) (simple-struct-set! pD2b8b@x '12 pD2b8c@val))) (set! pD2cbc@pD2af2@set-library-visible?! pD2af2@set-library-visible?!) (set! pD2af4@library-source-file-name (lambda (pD2b8f@x) (simple-struct-ref pD2b8f@x '13))) (set! pD2cbd@pD2af4@library-source-file-name pD2af4@library-source-file-name) (set! pD2af6@set-library-source-file-name! (lambda (pD2b91@x pD2b92@val) (simple-struct-set! pD2b91@x '13 pD2b92@val))) (set! pD2cbe@pD2af6@set-library-source-file-name! pD2af6@set-library-source-file-name!) (set! pD2af8@dummy '3) (set! pD2cbf@pD2af8@dummy pD2af8@dummy) (set! pD2afa@find-dependencies (lambda (pD2b95@ls) (if (null? pD2b95@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! pD2cc0@pD2afa@find-dependencies pD2afa@find-dependencies) (set! pD2afc@find-library-by (lambda (pD2b97@pred) (let pD2b9b@f ((pD2b99@ls ((pD2ab2@current-library-collection)))) (if (null? pD2b99@ls) '#f (if (pD2b97@pred (car pD2b99@ls)) (car pD2b99@ls) (pD2b9b@f (cdr pD2b99@ls))))))) (set! pD2cc1@pD2afc@find-library-by pD2afc@find-library-by) (set! pD2afe@library-path (pD2a08@pD28e7@make-parameter '(".") (lambda (pD2b9d@x) (if (and (list? pD2b9d@x) (for-all string? pD2b9d@x)) (map (lambda (pD2b9f@x) pD2b9f@x) pD2b9d@x) (assertion-violation 'library-path '"not a list of strings" pD2b9d@x))))) (set! pD2cc2@pD2afe@library-path pD2afe@library-path) (set! pD2b00@library-extensions (pD2a08@pD28e7@make-parameter '(".sls" ".ss" ".scm") (lambda (pD2ba1@x) (if (and (list? pD2ba1@x) (for-all string? pD2ba1@x)) (map (lambda (pD2ba3@x) pD2ba3@x) pD2ba1@x) (assertion-violation 'library-extensions '"not a list of strings" pD2ba1@x))))) (set! pD2cc3@pD2b00@library-extensions pD2b00@library-extensions) (set! pD2b02@library-name->file-name (lambda (pD2ba5@x) (call-with-values (lambda () (open-string-output-port)) (lambda (pD2bab@pD2ba8 pD2bac@pD2baa) (let ((pD2baf@extract pD2bac@pD2baa) (pD2bb0@p pD2bab@pD2ba8)) (let ((pD2bb4@display-hex '#f)) (begin (set! pD2bb4@display-hex (lambda (pD2bbd@n) (if (<= '0 pD2bbd@n '9) (display pD2bbd@n pD2bb0@p) (display (integer->char (+ (char->integer '#\a) (- pD2bbd@n '10))) pD2bb0@p)))) (begin (let pD2bb7@f ((pD2bb5@ls pD2ba5@x)) (if (not (null? pD2bb5@ls)) (begin (display '"/" pD2bb0@p) (for-each (lambda (pD2bb9@c) (if (or (char<=? '#\a pD2bb9@c '#\z) (char<=? '#\A pD2bb9@c '#\Z) (char<=? '#\0 pD2bb9@c '#\9) (memv pD2bb9@c '(#\- #\. #\_ #\~))) (display pD2bb9@c pD2bb0@p) (begin (display '"%" pD2bb0@p) (let ((pD2bbb@n (char->integer pD2bb9@c))) (begin (pD2bb4@display-hex (quotient pD2bbb@n '16)) (pD2bb4@display-hex (remainder pD2bbb@n '16))))))) (string->list (symbol->string (car pD2bb5@ls)))) (pD2bb7@f (cdr pD2bb5@ls))) (void))) (pD2baf@extract))))))))) (set! pD2cc4@pD2b02@library-name->file-name pD2b02@library-name->file-name) (set! pD2b04@file-locator (pD2a08@pD28e7@make-parameter (lambda (pD2bbf@x) (let ((pD2bc1@str (pD2b02@library-name->file-name pD2bbf@x))) (let pD2bc9@f ((pD2bc3@ls (pD2afe@library-path)) (pD2bc4@exts (pD2b00@library-extensions)) (pD2bc5@failed-list '())) (if (null? pD2bc3@ls) (let ((pD2bd3@pD2bce '#f) (pD2bd5@pD2bd0 '#f) (pD2bd7@pD2bcf '#f) (pD2bda@pD2bcd '#f) (pD2bdc@make-library-resolution-condition '#f) (pD2bde@pD2bcb '#f) (pD2be0@pD2bcc '#f) (pD2be2@library-resolution-condition? '#f) (pD2be4@condition-library '#f) (pD2be6@condition-files '#f)) (begin (set! pD2bd3@pD2bce (make-record-type-descriptor '&library-resolution pD4eda@pD4c21@&condition-rtd 'pD2bd1 '#f '#f '#((immutable library) (immutable files)))) (set! pD2bd5@pD2bd0 '#f) (set! pD2bd7@pD2bcf (make-record-constructor-descriptor pD2bd3@pD2bce pD4edb@pD4c23@&condition-rcd pD2bd5@pD2bd0)) (set! pD2bda@pD2bcd (record-predicate pD2bd3@pD2bce)) (set! pD2bdc@make-library-resolution-condition (record-constructor pD2bd7@pD2bcf)) (set! pD2bde@pD2bcb (record-accessor pD2bd3@pD2bce '0)) (set! pD2be0@pD2bcc (record-accessor pD2bd3@pD2bce '1)) (set! pD2be2@library-resolution-condition? (condition-predicate pD2bd3@pD2bce)) (set! pD2be4@condition-library (condition-accessor pD2bd3@pD2bce pD2bde@pD2bcb)) (set! pD2be6@condition-files (condition-accessor pD2bd3@pD2bce pD2be0@pD2bcc)) (raise (condition (pD4efa@pD4cbb@make-error) (pD4f1c@pD4d17@make-who-condition 'expander) (pD4ee0@pD4c78@make-message-condition '"cannot locate library in library-path") (pD2bdc@make-library-resolution-condition pD2bbf@x (reverse pD2bc5@failed-list)))))) (if (null? pD2bc4@exts) (pD2bc9@f (cdr pD2bc3@ls) (pD2b00@library-extensions) pD2bc5@failed-list) (let ((pD2be7@name (string-append (car pD2bc3@ls) pD2bc1@str (car pD2bc4@exts)))) (if (file-exists? pD2be7@name) pD2be7@name (pD2bc9@f pD2bc3@ls (cdr pD2bc4@exts) (cons pD2be7@name pD2bc5@failed-list))))))))) (lambda (pD2be9@f) (if (procedure? pD2be9@f) pD2be9@f (assertion-violation 'file-locator '"not a procedure" pD2be9@f))))) (set! pD2cc5@pD2b04@file-locator pD2b04@file-locator) (set! pD2b06@serialize-all (lambda (pD2beb@serialize pD2bec@compile) (let ((pD2bf0@library-desc '#f)) (begin (set! pD2bf0@library-desc (lambda (pD2bf3@x) (list (pD2ac0@library-id pD2bf3@x) (pD2ac4@library-name pD2bf3@x)))) (for-each (lambda (pD2bf1@x) (if (pD2af4@library-source-file-name pD2bf1@x) (pD2beb@serialize (pD2af4@library-source-file-name pD2bf1@x) (list (pD2ac0@library-id pD2bf1@x) (pD2ac4@library-name pD2bf1@x) (pD2ac8@library-version pD2bf1@x) (map pD2bf0@library-desc (pD2acc@library-imp* pD2bf1@x)) (map pD2bf0@library-desc (pD2ad0@library-vis* pD2bf1@x)) (map pD2bf0@library-desc (pD2ad4@library-inv* pD2bf1@x)) (pD2ad8@library-subst pD2bf1@x) (pD2adc@library-env pD2bf1@x) (pD2bec@compile (pD2ae8@library-visit-code pD2bf1@x)) (pD2bec@compile (pD2aec@library-invoke-code pD2bf1@x)) (pD2af0@library-visible? pD2bf1@x))) (void))) ((pD2ab2@current-library-collection))))))) (set! pD2cc6@pD2b06@serialize-all pD2b06@serialize-all) (set! pD2b08@current-precompiled-library-loader (pD2a08@pD28e7@make-parameter (lambda (pD2bf5@filename pD2bf6@sk) '#f))) (set! pD2cc7@pD2b08@current-precompiled-library-loader pD2b08@current-precompiled-library-loader) (set! pD2b0a@try-load-from-file (lambda (pD2bf9@filename) ((pD2b08@current-precompiled-library-loader) pD2bf9@filename (lambda pD2c1f (let ((pD2c20 (length pD2c1f))) (if (= pD2c20 '11) (apply (lambda (pD2bfb@id pD2bfc@name pD2bfd@ver pD2bfe@imp* pD2bff@vis* pD2c00@inv* pD2c01@exp-subst pD2c02@exp-env pD2c03@visit-proc pD2c04@invoke-proc pD2c05@visible?) (let pD2c13@f ((pD2c11@deps (append pD2bfe@imp* pD2bff@vis* pD2c00@inv*))) (if (null? pD2c11@deps) (begin (pD2b1e@install-library pD2bfb@id pD2bfc@name pD2bfd@ver pD2bfe@imp* pD2bff@vis* pD2c00@inv* pD2c01@exp-subst pD2c02@exp-env pD2c03@visit-proc pD2c04@invoke-proc '#f '#f pD2c05@visible? '#f) '#t) (let ((pD2c15@d (car pD2c11@deps))) (let ((pD2c17@label (car pD2c15@d)) (pD2c18@dname (cadr pD2c15@d))) (let ((pD2c1b@l (pD2b14@find-library-by-name pD2c18@dname))) (if (and (pD2abe@library? pD2c1b@l) (eq? pD2c17@label (pD2ac0@library-id pD2c1b@l))) (pD2c13@f (cdr pD2c11@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" pD2bfc@name pD2c18@dname pD2bf9@filename pD2c1b@l pD2c17@label (pD2ac0@library-id pD2c1b@l)) '#f)))))))) pD2c1f) (if (>= pD2c20 '0) (apply (lambda pD2c1d@others '#f) pD2c1f) (error 'apply '"invalid arg count")))))))) (set! pD2cc8@pD2b0a@try-load-from-file pD2b0a@try-load-from-file) (set! pD2b0c@library-loader (pD2a08@pD28e7@make-parameter (lambda (pD2c21@x) (let ((pD2c23@file-name ((pD2b04@file-locator) pD2c21@x))) (if (not pD2c23@file-name) (assertion-violation '#f '"cannot file library" pD2c21@x) (or (pD2b0a@try-load-from-file pD2c23@file-name) ((pD2b0e@current-library-expander) (pD2a07@pD28e5@read-library-source-file pD2c23@file-name) pD2c23@file-name (lambda (pD2c25@name) (if (not (fast-equal? pD2c25@name pD2c21@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (pD2c2b@pD2c28 pD2c2c@pD2c2a) (let ((pD2c2f@e pD2c2c@pD2c2a) (pD2c30@p pD2c2b@pD2c28)) (begin (display '"expected to find library " pD2c30@p) (write pD2c21@x pD2c30@p) (display '" in file " pD2c30@p) (display pD2c23@file-name pD2c30@p) (display '", found " pD2c30@p) (write pD2c25@name pD2c30@p) (display '" instead" pD2c30@p) (pD2c2f@e)))))) (void)))))))) (lambda (pD2c33@f) (if (procedure? pD2c33@f) pD2c33@f (assertion-violation 'library-locator '"not a procedure" pD2c33@f))))) (set! pD2cc9@pD2b0c@library-loader pD2b0c@library-loader) (set! pD2b0e@current-library-expander (pD2a08@pD28e7@make-parameter (lambda (pD2c35@x) (assertion-violation 'library-expander '"not initialized")) (lambda (pD2c37@f) (if (procedure? pD2c37@f) pD2c37@f (assertion-violation 'library-expander '"not a procedure" pD2c37@f))))) (set! pD2cca@pD2b0e@current-library-expander pD2b0e@current-library-expander) (set! pD2b10@external-pending-libraries (pD2a08@pD28e7@make-parameter '())) (set! pD2ccb@pD2b10@external-pending-libraries pD2b10@external-pending-libraries) (set! pD2b12@find-external-library (lambda (pD2c39@name) (begin (if (member pD2c39@name (pD2b10@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" pD2c39@name) (void)) (let ((pD2c3f@pD2c3c pD2b10@external-pending-libraries) (pD2c40@pD2c3e (cons pD2c39@name (pD2b10@external-pending-libraries)))) (let ((pD2c43@swap (lambda () (let ((pD2c45@t (pD2c3f@pD2c3c))) (begin (pD2c3f@pD2c3c pD2c40@pD2c3e) (set! pD2c40@pD2c3e pD2c45@t)))))) (dynamic-wind pD2c43@swap (lambda () (begin ((pD2b0c@library-loader) pD2c39@name) (or (pD2afc@find-library-by (lambda (pD2c47@x) (fast-equal? (pD2ac4@library-name pD2c47@x) pD2c39@name))) (assertion-violation '#f '"handling external library did not yield the correct library" pD2c39@name)))) pD2c43@swap)))))) (set! pD2ccc@pD2b12@find-external-library pD2b12@find-external-library) (set! pD2b14@find-library-by-name (lambda (pD2c49@name) (or (pD2afc@find-library-by (lambda (pD2c4b@x) (fast-equal? (pD2ac4@library-name pD2c4b@x) pD2c49@name))) (pD2b12@find-external-library pD2c49@name)))) (set! pD2ccd@pD2b14@find-library-by-name pD2b14@find-library-by-name) (set! pD2b16@library-exists? (lambda (pD2c4d@name) (and (pD2afc@find-library-by (lambda (pD2c4f@x) (fast-equal? (pD2ac4@library-name pD2c4f@x) pD2c4d@name))) '#t))) (set! pD2cce@pD2b16@library-exists? pD2b16@library-exists?) (set! pD2b18@find-library-by-spec/die (lambda (pD2c51@spec) (let ((pD2c53@id (car pD2c51@spec))) (or (pD2afc@find-library-by (lambda (pD2c55@x) (eq? pD2c53@id (pD2ac0@library-id pD2c55@x)))) (assertion-violation '#f '"cannot find library with required spec" pD2c51@spec))))) (set! pD2ccf@pD2b18@find-library-by-spec/die pD2b18@find-library-by-spec/die) (set! pD2b1a@label->binding-table (make-eq-hashtable)) (set! pD2cd0@pD2b1a@label->binding-table pD2b1a@label->binding-table) (set! pD2b1c@install-library-record (lambda (pD2c57@lib) (begin (let ((pD2c59@exp-env (pD2adc@library-env pD2c57@lib))) (for-each (lambda (pD2c5b@x) (let ((pD2c5d@label (car pD2c5b@x)) (pD2c5e@binding (cdr pD2c5b@x))) (let ((pD2c61@binding (let ((pD2c63@t (car pD2c5e@binding))) (if (memv pD2c63@t '(global)) (cons 'global (cons pD2c57@lib (cdr pD2c5e@binding))) (if (memv pD2c63@t '(global-macro)) (cons 'global-macro (cons pD2c57@lib (cdr pD2c5e@binding))) (if (memv pD2c63@t '(global-macro!)) (cons 'global-macro! (cons pD2c57@lib (cdr pD2c5e@binding))) pD2c5e@binding)))))) (begin (if (hashtable-ref pD2b1a@label->binding-table pD2c5d@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" pD2c5d@label (hashtable-ref pD2b1a@label->binding-table pD2c5d@label '#f) pD2c61@binding) (exit)) (void)) (hashtable-set! pD2b1a@label->binding-table pD2c5d@label pD2c61@binding))))) pD2c59@exp-env)) ((pD2ab2@current-library-collection) pD2c57@lib)))) (set! pD2cd1@pD2b1c@install-library-record pD2b1c@install-library-record) (set! pD2b1e@install-library (lambda (pD2c65@id pD2c66@name pD2c67@ver pD2c68@imp* pD2c69@vis* pD2c6a@inv* pD2c6b@exp-subst pD2c6c@exp-env pD2c6d@visit-proc pD2c6e@invoke-proc pD2c6f@visit-code pD2c70@invoke-code pD2c71@visible? pD2c72@source-file-name) (let ((pD2c81@imp-lib* (map pD2b18@find-library-by-spec/die pD2c68@imp*)) (pD2c82@vis-lib* (map pD2b18@find-library-by-spec/die pD2c69@vis*)) (pD2c83@inv-lib* (map pD2b18@find-library-by-spec/die pD2c6a@inv*))) (begin (if (not (and (symbol? pD2c65@id) (list? pD2c66@name) (list? pD2c67@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" pD2c65@id pD2c66@name pD2c67@ver) (void)) (if (pD2b16@library-exists? pD2c66@name) (assertion-violation 'install-library '"library is already installed" pD2c66@name) (void)) (let ((pD2c87@lib (make-simple-struct 'library '15 (list pD2c65@id pD2c66@name pD2c67@ver pD2c81@imp-lib* pD2c82@vis-lib* pD2c83@inv-lib* pD2c6b@exp-subst pD2c6c@exp-env pD2c6d@visit-proc pD2c6e@invoke-proc pD2c6f@visit-code pD2c70@invoke-code pD2c71@visible? pD2c72@source-file-name)))) (pD2b1c@install-library-record pD2c87@lib)))))) (set! pD2cd2@pD2b1e@install-library pD2b1e@install-library) (set! pD2b20@imported-label->binding (lambda (pD2c89@lab) (hashtable-ref pD2b1a@label->binding-table pD2c89@lab '#f))) (set! pD2cd3@pD2b20@imported-label->binding pD2b20@imported-label->binding) (set! pD2b22@invoke-library (lambda (pD2c8b@lib) (let ((pD2c8d@invoke (pD2ae4@library-invoke-state pD2c8b@lib))) (if (procedure? pD2c8d@invoke) (begin (pD2ae6@set-library-invoke-state! pD2c8b@lib (lambda () (assertion-violation 'invoke '"circularity detected" pD2c8b@lib))) (for-each pD2b22@invoke-library (pD2ad4@library-inv* pD2c8b@lib)) (pD2ae6@set-library-invoke-state! pD2c8b@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" pD2c8b@lib))) (pD2c8d@invoke) (pD2ae6@set-library-invoke-state! pD2c8b@lib '#t)) (void))))) (set! pD2cd4@pD2b22@invoke-library pD2b22@invoke-library) (set! pD2b24@visit-library (lambda (pD2c8f@lib) (let ((pD2c91@visit (pD2ae0@library-visit-state pD2c8f@lib))) (if (procedure? pD2c91@visit) (begin (pD2ae2@set-library-visit-state! pD2c8f@lib (lambda () (assertion-violation 'visit '"circularity detected" pD2c8f@lib))) (for-each pD2b22@invoke-library (pD2ad0@library-vis* pD2c8f@lib)) (pD2ae2@set-library-visit-state! pD2c8f@lib (lambda () (assertion-violation 'invoke '"first visit did not return" pD2c8f@lib))) (pD2c91@visit) (pD2ae2@set-library-visit-state! pD2c8f@lib '#t)) (void))))) (set! pD2cd5@pD2b24@visit-library pD2b24@visit-library) (set! pD2b26@invoke-library-by-spec (lambda (pD2c93@spec) (pD2b22@invoke-library (pD2b18@find-library-by-spec/die pD2c93@spec)))) (set! pD2cd6@pD2b26@invoke-library-by-spec pD2b26@invoke-library-by-spec) (set! pD2b28@installed-libraries (lambda pD2c9b (let ((pD2c9c (length pD2c9b))) (if (= pD2c9c '1) (apply (lambda (pD2c95@all?) (let pD2c99@f ((pD2c97@ls ((pD2ab2@current-library-collection)))) (if (null? pD2c97@ls) '() (if (or pD2c95@all? (pD2af0@library-visible? (car pD2c97@ls))) (cons (car pD2c97@ls) (pD2c99@f (cdr pD2c97@ls))) (pD2c99@f (cdr pD2c97@ls)))))) pD2c9b) (if (= pD2c9c '0) (apply (lambda () (pD2b28@installed-libraries '#f)) pD2c9b) (error 'apply '"invalid arg count")))))) (set! pD2cd7@pD2b28@installed-libraries pD2b28@installed-libraries) (set! pD2b2a@library-spec (lambda (pD2c9d@x) (begin (if (not (pD2abe@library? pD2c9d@x)) (assertion-violation 'library-spec '"not a library" pD2c9d@x) (void)) (list (pD2ac0@library-id pD2c9d@x) (pD2ac4@library-name pD2c9d@x) (pD2ac8@library-version pD2c9d@x))))) (set! pD2cd8@pD2b2a@library-spec pD2b2a@library-spec) (void))
(begin (set! pD2cdc@build-global-define (unspecified)) (set! pD2d4d@build-lambda (unspecified)) (set! pD2d4f@build-case-lambda (unspecified)) (set! pD2d7d@build-sequence (unspecified)) (set! pD2d7f@build-void (unspecified)) (set! pD2d81@build-letrec (unspecified)) (set! pD2d83@build-let (unspecified)) (set! pD2d85@build-named-let (unspecified)) (set! pD2d87@build-letrec* (unspecified)) (set! pD2d89@build-library-letrec* (unspecified)) (set! pD2d8b@build-receive (unspecified)) (set! pD2cdc@build-global-define (lambda (pD2d8c@x) (pD2d7f@build-void))) (set! pD2e20@pD2cdc@build-global-define pD2cdc@build-global-define) (set! pD2d4d@build-lambda (lambda (pD2d8e@ae pD2d8f@vars pD2d90@exp) (list 'lambda pD2d8f@vars pD2d90@exp))) (set! pD2e21@pD2d4d@build-lambda pD2d4d@build-lambda) (set! pD2d4f@build-case-lambda (lambda (pD2d94@ae pD2d95@vars* pD2d96@exp*) (let ((pD2d9b@build-error '#f) (pD2d9d@build-pred '#f) (pD2d9f@build-apply '#f) (pD2da1@expand-case-lambda '#f)) (begin (set! pD2d9b@build-error (lambda (pD2dd2@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! pD2d9d@build-pred (lambda (pD2dba@ae pD2dbb@n pD2dbc@vars) (call-with-values (lambda () (let pD2dc8@f ((pD2dc4@vars pD2dbc@vars) (pD2dc5@count '0)) (if (pair? pD2dc4@vars) (pD2dc8@f (cdr pD2dc4@vars) (+ pD2dc5@count '1)) (if (null? pD2dc4@vars) (values pD2dc5@count '=) (values pD2dc5@count '>=))))) (lambda (pD2dca@pD2dc1 pD2dcb@pD2dc3) (let ((pD2dce@pred pD2dcb@pD2dc3) (pD2dcf@count pD2dca@pD2dc1)) (list (list 'primitive pD2dce@pred) pD2dbb@n (list 'quote pD2dcf@count))))))) (set! pD2d9f@build-apply (lambda (pD2db2@ae pD2db3@g pD2db4@vars pD2db5@exp) (list '(primitive apply) (pD2d4d@build-lambda pD2db2@ae pD2db4@vars pD2db5@exp) pD2db3@g))) (set! pD2da1@expand-case-lambda (lambda (pD2da2@ae pD2da3@vars pD2da4@exp*) (let ((pD2da8@g (gensym)) (pD2da9@n (gensym))) (list 'lambda pD2da8@g (pD2d83@build-let pD2da2@ae (list pD2da9@n) (list (list '(primitive length) pD2da8@g)) (let pD2db0@f ((pD2dac@vars* pD2d95@vars*) (pD2dad@exp* pD2da4@exp*)) (if (null? pD2dac@vars*) (pD2d9b@build-error pD2da2@ae) (list 'if (pD2d9d@build-pred pD2da2@ae pD2da9@n (car pD2dac@vars*)) (pD2d9f@build-apply pD2da2@ae pD2da8@g (car pD2dac@vars*) (car pD2dad@exp*)) (pD2db0@f (cdr pD2dac@vars*) (cdr pD2dad@exp*)))))))))) (if (= (length pD2d96@exp*) '1) (pD2d4d@build-lambda pD2d94@ae (car pD2d95@vars*) (car pD2d96@exp*)) (pD2da1@expand-case-lambda pD2d94@ae pD2d95@vars* pD2d96@exp*)))))) (set! pD2e22@pD2d4f@build-case-lambda pD2d4f@build-case-lambda) (set! pD2d7d@build-sequence (lambda (pD2dd4@ae pD2dd5@exps) (let pD2dda@loop ((pD2dd8@exps pD2dd5@exps)) (if (null? (cdr pD2dd8@exps)) (car pD2dd8@exps) (if (equal? (car pD2dd8@exps) (pD2d7f@build-void)) (pD2dda@loop (cdr pD2dd8@exps)) (cons 'begin pD2dd8@exps)))))) (set! pD2e23@pD2d7d@build-sequence pD2d7d@build-sequence) (set! pD2d7f@build-void (lambda () '((primitive void)))) (set! pD2e24@pD2d7f@build-void pD2d7f@build-void) (set! pD2d81@build-letrec (lambda (pD2ddc@ae pD2ddd@vars pD2dde@val-exps pD2ddf@body-exp) (if (null? pD2ddd@vars) pD2ddf@body-exp (list 'letrec (map list pD2ddd@vars pD2dde@val-exps) pD2ddf@body-exp)))) (set! pD2e25@pD2d81@build-letrec pD2d81@build-letrec) (set! pD2d83@build-let (lambda (pD2de4@ae pD2de5@vars pD2de6@val-exps pD2de7@body-exp) (if (null? pD2de5@vars) pD2de7@body-exp (list 'let (map list pD2de5@vars pD2de6@val-exps) pD2de7@body-exp)))) (set! pD2e26@pD2d83@build-let pD2d83@build-let) (set! pD2d85@build-named-let (lambda (pD2dec@ae pD2ded@name pD2dee@vars pD2def@val-exps pD2df0@body-exp) (list 'let pD2ded@name (map list pD2dee@vars pD2def@val-exps) pD2df0@body-exp))) (set! pD2e27@pD2d85@build-named-let pD2d85@build-named-let) (set! pD2d87@build-letrec* (lambda (pD2df6@ae pD2df7@vars pD2df8@val-exps pD2df9@body-exp) (if (null? pD2df7@vars) pD2df9@body-exp (pD2d83@build-let pD2df6@ae pD2df7@vars (map (lambda (pD2dfe@x) (list 'quote '#f)) pD2df7@vars) (pD2d7d@build-sequence pD2df6@ae (append (map (lambda (pD2e00@lhs pD2e01@rhs) (list 'set! pD2e00@lhs pD2e01@rhs)) pD2df7@vars pD2df8@val-exps) (list pD2df9@body-exp))))))) (set! pD2e28@pD2d87@build-letrec* pD2d87@build-letrec*) (set! pD2d89@build-library-letrec* (lambda (pD2e04@ae pD2e05@name pD2e06@vars pD2e07@locs pD2e08@val-exps pD2e09@body-exp) (cons 'begin (append (map (lambda (pD2e10@var) (cons 'set! (cons pD2e10@var '((unspecified))))) pD2e06@vars) (append (apply append (map (lambda (pD2e12@var pD2e13@loc pD2e14@val-exp) (list (list 'set! pD2e12@var pD2e14@val-exp) (list 'set! pD2e13@loc pD2e12@var))) pD2e06@vars pD2e07@locs pD2e08@val-exps)) (list pD2e09@body-exp)))))) (set! pD2e29@pD2d89@build-library-letrec* pD2d89@build-library-letrec*) (set! pD2d8b@build-receive (lambda (pD2e18@ae pD2e19@vars pD2e1a@producer pD2e1b@body*) (begin (display '"************** in ") (cons 'receive (cons pD2e19@vars (cons pD2e1a@producer pD2e1b@body*)))))) (set! pD2e2a@pD2d8b@build-receive pD2d8b@build-receive) (void))
(begin (set! pD2e39@file-options-macro (unspecified)) (set! pD2e3b@set-cons (unspecified)) (set! pD2e3d@set-union (unspecified)) (set! pD2e42@top-mark* (unspecified)) (set! pD2e44@top-marked? (unspecified)) (set! pD2e46@gen-lexical (unspecified)) (set! pD2e48@gen-global (unspecified)) (set! pD2e4a@gen-label (unspecified)) (set! pD2e4c@gen-top-level-label (unspecified)) (set! pD2e4e@gen-define-label+loc (unspecified)) (set! pD2e50@gen-define-label (unspecified)) (set! pD2e5a@rib? (unspecified)) (set! pD2e5c@rib-sym* (unspecified)) (set! pD2e5e@set-rib-sym*! (unspecified)) (set! pD2e60@rib-mark** (unspecified)) (set! pD2e62@set-rib-mark**! (unspecified)) (set! pD2e64@rib-label* (unspecified)) (set! pD2e66@set-rib-label*! (unspecified)) (set! pD2e68@rib-sealed/freq (unspecified)) (set! pD2e6a@set-rib-sealed/freq! (unspecified)) (set! pD2e6c@rib-cache (unspecified)) (set! pD2e6e@set-rib-cache! (unspecified)) (set! pD2e70@dummy (unspecified)) (set! pD2e72@make-empty-rib (unspecified)) (set! pD2e74@extend-rib! (unspecified)) (set! pD2e76@extend-rib/nc! (unspecified)) (set! pD2e78@make-rib-map (unspecified)) (set! pD2e7a@seal-rib! (unspecified)) (set! pD2e7c@unseal-rib! (unspecified)) (set! pD2e7e@make-full-rib (unspecified)) (set! pD2e80@rp (unspecified)) (set! pD2e8a@stx? (unspecified)) (set! pD2e8c@stx-expr (unspecified)) (set! pD2e8e@set-stx-expr! (unspecified)) (set! pD2e90@stx-mark* (unspecified)) (set! pD2e92@set-stx-mark*! (unspecified)) (set! pD2e94@stx-subst* (unspecified)) (set! pD2e96@set-stx-subst*! (unspecified)) (set! pD2e98@stx-ae* (unspecified)) (set! pD2e9a@set-stx-ae*! (unspecified)) (set! pD2e9c@dummy (unspecified)) (set! pD2e9e@datum->stx (unspecified)) (set! pD2ea0@gen-mark (unspecified)) (set! pD2ea2@anti-mark (unspecified)) (set! pD2ea4@anti-mark? (unspecified)) (set! pD2ea6@mkstx (unspecified)) (set! pD2ea8@add-mark (unspecified)) (set! pD2eaa@add-subst (unspecified)) (set! pD2eac@syntax-kind? (unspecified)) (set! pD2eae@syntax-vector->list (unspecified)) (set! pD2eb0@syntax-pair? (unspecified)) (set! pD2eb2@syntax-vector? (unspecified)) (set! pD2eb4@syntax-null? (unspecified)) (set! pD2eb6@syntax-list? (unspecified)) (set! pD2eb8@syntax-car (unspecified)) (set! pD2eba@syntax-cdr (unspecified)) (set! pD2ebc@syntax->list (unspecified)) (set! pD2ebe@id? (unspecified)) (set! pD2ec0@id->sym (unspecified)) (set! pD2ec2@bound-id=? (unspecified)) (set! pD2ec4@free-id=? (unspecified)) (set! pD2ec6@valid-bound-ids? (unspecified)) (set! pD2ec8@distinct-bound-ids? (unspecified)) (set! pD2eca@bound-id-member? (unspecified)) (set! pD2ecc@self-evaluating? (unspecified)) (set! pD2ece@strip-annotations (unspecified)) (set! pD2ed0@strip (unspecified)) (set! pD2ed2@stx->datum (unspecified)) (set! pD2ed4@id->label (unspecified)) (set! pD2ed6@label->binding (unspecified)) (set! pD2ed8@make-binding (unspecified)) (set! pD2eda@binding-type (unspecified)) (set! pD2edc@binding-value (unspecified)) (set! pD2ede@raise-unbound-error (unspecified)) (set! pD2ee0@syntax-type (unspecified)) (set! pD2eee@sanitize-binding (unspecified)) (set! pD2ef0@make-variable-transformer (unspecified)) (set! pD2ef2@variable-transformer? (unspecified)) (set! pD2ef4@variable-transformer-procedure (unspecified)) (set! pD2ef6@make-eval-transformer (unspecified)) (set! pD3047@parse-define (unspecified)) (set! pD3049@parse-define-syntax (unspecified)) (set! pD304b@scheme-stx-hashtable (unspecified)) (set! pD304d@scheme-stx (unspecified)) (set! pD304f@lexical-var (unspecified)) (set! pD3051@lexical-mutable? (unspecified)) (set! pD3053@set-lexical-mutable! (unspecified)) (set! pD3055@add-lexical (unspecified)) (set! pD3057@add-lexicals (unspecified)) (set! pD3059@letrec-helper (unspecified)) (set! pD305b@let-transformer (unspecified)) (set! pD305d@letrec-transformer (unspecified)) (set! pD305f@letrec*-transformer (unspecified)) (set! pD3061@fluid-let-syntax-transformer (unspecified)) (set! pD3063@type-descriptor-transformer (unspecified)) (set! pD3065@record-type-descriptor-transformer (unspecified)) (set! pD3067@record-constructor-descriptor-transformer (unspecified)) (set! pD3069@when-macro (unspecified)) (set! pD306b@unless-macro (unspecified)) (set! pD306d@if-transformer (unspecified)) (set! pD306f@and-transformer (unspecified)) (set! pD3071@or-transformer (unspecified)) (set! pD3073@case-macro (unspecified)) (set! pD3075@quote-transformer (unspecified)) (set! pD3077@case-lambda-transformer (unspecified)) (set! pD3079@lambda-transformer (unspecified)) (set! pD307b@bless (unspecified)) (set! pD307d@with-syntax-macro (unspecified)) (set! pD307f@invalid-fmls-error (unspecified)) (set! pD3081@let-macro (unspecified)) (set! pD3083@let-values-macro (unspecified)) (set! pD3085@let*-values-macro (unspecified)) (set! pD3087@trace-lambda-macro (unspecified)) (set! pD3089@trace-define-macro (unspecified)) (set! pD308b@trace-define-syntax-macro (unspecified)) (set! pD308d@trace-let/rec-syntax (unspecified)) (set! pD308f@trace-let-syntax-macro (unspecified)) (set! pD3091@trace-letrec-syntax-macro (unspecified)) (set! pD3093@guard-macro (unspecified)) (set! pD3095@define-enumeration-macro (unspecified)) (set! pD3097@time-macro (unspecified)) (set! pD3099@delay-macro (unspecified)) (set! pD309b@assert-macro (unspecified)) (set! pD309d@endianness-macro (unspecified)) (set! pD309f@identifier-syntax-macro (unspecified)) (set! pD30a1@do-macro (unspecified)) (set! pD30a3@let*-macro (unspecified)) (set! pD30a5@or-macro (unspecified)) (set! pD30a7@and-macro (unspecified)) (set! pD30a9@cond-macro (unspecified)) (set! pD30ab@do-include (unspecified)) (set! pD30ad@include-macro (unspecified)) (set! pD30af@include-into-macro (unspecified)) (set! pD30b1@syntax-rules-macro (unspecified)) (set! pD30b3@quasiquote-macro (unspecified)) (set! pD30b5@quasisyntax-macro (unspecified)) (set! pD30b7@define-struct-macro (unspecified)) (set! pD30b9@define-record-type-macro (unspecified)) (set! pD30bb@define-condition-type-macro (unspecified)) (set! pD30bd@incorrect-usage-macro (unspecified)) (set! pD30bf@parameterize-macro (unspecified)) (set! pD30c1@foreign-call-transformer (unspecified)) (set! pD30c3@convert-pattern (unspecified)) (set! pD30c5@syntax-dispatch (unspecified)) (set! pD30c7@ellipsis? (unspecified)) (set! pD30c9@underscore? (unspecified)) (set! pD30cb@verify-literals (unspecified)) (set! pD30cd@syntax-case-transformer (unspecified)) (set! pD30cf@ellipsis-map (unspecified)) (set! pD30d1@syntax-transformer (unspecified)) (set! pD30d3@core-macro-transformer (unspecified)) (set! pD30d5@symbol-macro (unspecified)) (set! pD30d7@macro-transformer (unspecified)) (set! pD30d9@local-macro-transformer (unspecified)) (set! pD30db@do-macro-call (unspecified)) (set! pD30dd@chi-macro (unspecified)) (set! pD30df@chi-local-macro (unspecified)) (set! pD30e1@chi-global-macro (unspecified)) (set! pD30e3@chi-expr* (unspecified)) (set! pD30e5@chi-application (unspecified)) (set! pD30e7@chi-expr (unspecified)) (set! pD30e9@chi-set! (unspecified)) (set! pD30eb@verify-formals (unspecified)) (set! pD30ed@chi-lambda-clause (unspecified)) (set! pD30ef@chi-lambda-clause* (unspecified)) (set! pD30f1@chi-defun (unspecified)) (set! pD30f3@chi-rhs (unspecified)) (set! pD30f5@expand-interaction-rhs*/init* (unspecified)) (set! pD30f7@chi-rhs* (unspecified)) (set! pD30f9@find-bound=? (unspecified)) (set! pD30fb@find-dups (unspecified)) (set! pD30fd@chi-internal (unspecified)) (set! pD30ff@parse-module (unspecified)) (set! pD3109@module-interface? (unspecified)) (set! pD310b@module-interface-first-mark (unspecified)) (set! pD310d@set-module-interface-first-mark! (unspecified)) (set! pD310f@module-interface-exp-id-vec (unspecified)) (set! pD3111@set-module-interface-exp-id-vec! (unspecified)) (set! pD3113@module-interface-exp-lab-vec (unspecified)) (set! pD3115@set-module-interface-exp-lab-vec! (unspecified)) (set! pD3117@dummy (unspecified)) (set! pD3119@module-interface-exp-id* (unspecified)) (set! pD311b@chi-internal-module (unspecified)) (set! pD311d@chi-body* (unspecified)) (set! pD311f@expand-transformer (unspecified)) (set! pD3121@parse-exports (unspecified)) (set! pD3123@parse-library-name (unspecified)) (set! pD3125@parse-library (unspecified)) (set! pD3127@parse-import-spec* (unspecified)) (set! pD3129@make-top-rib (unspecified)) (set! pD312b@make-collector (unspecified)) (set! pD312d@inv-collector (unspecified)) (set! pD312f@vis-collector (unspecified)) (set! pD3131@imp-collector (unspecified)) (set! pD3133@chi-library-internal (unspecified)) (set! pD3135@chi-interaction-expr (unspecified)) (set! pD3137@library-body-expander (unspecified)) (set! pD3139@core-library-expander (unspecified)) (set! pD313b@parse-top-level-program (unspecified)) (set! pD313d@top-level-expander (unspecified)) (set! pD313f@rp (unspecified)) (set! pD3149@env? (unspecified)) (set! pD314b@env-names (unspecified)) (set! pD314d@set-env-names! (unspecified)) (set! pD314f@env-labels (unspecified)) (set! pD3151@set-env-labels! (unspecified)) (set! pD3153@env-itc (unspecified)) (set! pD3155@set-env-itc! (unspecified)) (set! pD3157@dummy (unspecified)) (set! pD3159@rp (unspecified)) (set! pD3163@interaction-env? (unspecified)) (set! pD3165@interaction-env-rib (unspecified)) (set! pD3167@set-interaction-env-rib! (unspecified)) (set! pD3169@interaction-env-r (unspecified)) (set! pD316b@set-interaction-env-r! (unspecified)) (set! pD316d@interaction-env-locs (unspecified)) (set! pD316f@set-interaction-env-locs! (unspecified)) (set! pD3171@dummy (unspecified)) (set! pD3173@interaction-environment-symbols (unspecified)) (set! pD3175@environment-bindings (unspecified)) (set! pD3177@parse-binding (unspecified)) (set! pD3179@environment? (unspecified)) (set! pD317b@environment-symbols (unspecified)) (set! pD317d@environment (unspecified)) (set! pD317f@null-environment (unspecified)) (set! pD3181@scheme-report-environment (unspecified)) (set! pD3183@expand (unspecified)) (set! pD3185@eval (unspecified)) (set! pD3187@library-expander (unspecified)) (set! pD3189@boot-library-expand (unspecified)) (set! pD318b@rev-map-append (unspecified)) (set! pD318d@build-exports (unspecified)) (set! pD318f@make-export-subst (unspecified)) (set! pD3191@make-export-env/macros (unspecified)) (set! pD3193@generate-temporaries (unspecified)) (set! pD3195@free-identifier=? (unspecified)) (set! pD3197@bound-identifier=? (unspecified)) (set! pD3199@make-source-condition (unspecified)) (set! pD319b@extract-position-condition (unspecified)) (set! pD319d@expression-position (unspecified)) (set! pD319f@assertion-error (unspecified)) (set! pD31a1@syntax-error (unspecified)) (set! pD31a3@syntax-violation* (unspecified)) (set! pD31a5@syntax-violation (unspecified)) (set! pD31a7@identifier? (unspecified)) (set! pD31a9@datum->syntax (unspecified)) (set! pD31ab@syntax->datum (unspecified)) (set! pD31ad@ungensym-all (unspecified)) (set! pD31af@compile-r6rs-top-level (unspecified)) (set! pD31b1@pre-compile-r6rs-top-level (unspecified)) (set! pD31b3@interaction-environment (unspecified)) (set! pD31b5@top-level-context (unspecified)) (set! pD2e39@file-options-macro (lambda (pD31b6@x) (let ((pD31b9@valid-option? '#f)) (begin (set! pD31b9@valid-option? (lambda (pD31c2@x) (and (pD2ebe@id? pD31c2@x) (memq (pD2ec0@id->sym pD31c2@x) '(no-fail no-create no-truncate))))) (let ((pD31ba@t pD31b6@x)) (let ((pD31bc@ls/false (pD30c5@syntax-dispatch pD31ba@t '(_ . each-any)))) (if (and pD31bc@ls/false (apply (lambda (pD31be@opt*) (for-all pD31b9@valid-option? pD31be@opt*)) pD31bc@ls/false)) (apply (lambda (pD31c0@opt*) (pD307b@bless (list 'make-file-options (list 'quote pD31c0@opt*)))) pD31bc@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD31ba@t)))))))) (set! pD4b0c@pD2e39@file-options-macro pD2e39@file-options-macro) (set! pD2e3b@set-cons (lambda (pD31c4@x pD31c5@ls) (if (memq pD31c4@x pD31c5@ls) pD31c5@ls (cons pD31c4@x pD31c5@ls)))) (set! pD4b0d@pD2e3b@set-cons pD2e3b@set-cons) (set! pD2e3d@set-union (lambda (pD31c8@ls1 pD31c9@ls2) (if (null? pD31c8@ls1) pD31c9@ls2 (if (memq (car pD31c8@ls1) pD31c9@ls2) (pD2e3d@set-union (cdr pD31c8@ls1) pD31c9@ls2) (cons (car pD31c8@ls1) (pD2e3d@set-union (cdr pD31c8@ls1) pD31c9@ls2)))))) (set! pD4b0e@pD2e3d@set-union pD2e3d@set-union) (set! pD2e42@top-mark* '(top)) (set! pD4b0f@pD2e42@top-mark* pD2e42@top-mark*) (set! pD2e44@top-marked? (lambda (pD31cc@m*) (memq 'top pD31cc@m*))) (set! pD4b10@pD2e44@top-marked? pD2e44@top-marked?) (set! pD2e46@gen-lexical (lambda (pD31ce@sym) (if (symbol? pD31ce@sym) (gensym pD31ce@sym) (if (pD2e8a@stx? pD31ce@sym) (pD2e46@gen-lexical (pD2ec0@id->sym pD31ce@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" pD31ce@sym))))) (set! pD4b11@pD2e46@gen-lexical pD2e46@gen-lexical) (set! pD2e48@gen-global (lambda (pD31d0@x) (pD2e46@gen-lexical pD31d0@x))) (set! pD4b12@pD2e48@gen-global pD2e48@gen-global) (set! pD2e4a@gen-label (lambda (pD31d2@_) (gensym))) (set! pD4b13@pD2e4a@gen-label pD2e4a@gen-label) (set! pD2e4c@gen-top-level-label (lambda (pD31d4@id pD31d5@rib) (let ((pD31d9@find '#f)) (begin (set! pD31d9@find (lambda (pD31e4@sym pD31e5@mark* pD31e6@sym* pD31e7@mark** pD31e8@label*) (and (pair? pD31e6@sym*) (if (and (eq? pD31e4@sym (car pD31e6@sym*)) (same-marks? pD31e5@mark* (car pD31e7@mark**))) (car pD31e8@label*) (pD31d9@find pD31e4@sym pD31e5@mark* (cdr pD31e6@sym*) (cdr pD31e7@mark**) (cdr pD31e8@label*)))))) (let ((pD31da@sym (pD2ec0@id->sym pD31d4@id)) (pD31db@mark* (pD2e90@stx-mark* pD31d4@id))) (let ((pD31de@sym* (pD2e5c@rib-sym* pD31d5@rib))) (let ((pD31e0@t (and (memq pD31da@sym (pD2e5c@rib-sym* pD31d5@rib)) (pD31d9@find pD31da@sym pD31db@mark* pD31de@sym* (pD2e60@rib-mark** pD31d5@rib) (pD2e64@rib-label* pD31d5@rib))))) (if pD31e0@t ((lambda (pD31e2@label) (if (pD2cd3@pD2b20@imported-label->binding pD31e2@label) (gensym) pD31e2@label)) pD31e0@t) (gensym))))))))) (set! pD4b14@pD2e4c@gen-top-level-label pD2e4c@gen-top-level-label) (set! pD2e4e@gen-define-label+loc (lambda (pD31ee@id pD31ef@rib) (let ((pD31f2@t (pD31b5@top-level-context))) (if pD31f2@t ((lambda (pD31f4@env) (let ((pD31f6@label (pD2e4c@gen-top-level-label pD31ee@id pD31ef@rib)) (pD31f7@locs (pD316d@interaction-env-locs pD31f4@env))) (values pD31f6@label (let ((pD31fa@t (assq pD31f6@label pD31f7@locs))) (if pD31fa@t (cdr pD31fa@t) (let ((pD31fc@loc (pD2e46@gen-lexical pD31ee@id))) (begin (pD316f@set-interaction-env-locs! pD31f4@env (cons (cons pD31f6@label pD31fc@loc) pD31f7@locs)) pD31fc@loc))))))) pD31f2@t) (values (gensym) (pD2e46@gen-lexical pD31ee@id)))))) (set! pD4b15@pD2e4e@gen-define-label+loc pD2e4e@gen-define-label+loc) (set! pD2e50@gen-define-label (lambda (pD31fe@id pD31ff@rib) (if (pD31b5@top-level-context) (pD2e4c@gen-top-level-label pD31fe@id pD31ff@rib) (gensym)))) (set! pD4b16@pD2e50@gen-define-label pD2e50@gen-define-label) (set! pD2e5a@rib? (lambda (pD3202@x) (and (simple-struct? pD3202@x) (eq? (simple-struct-name pD3202@x) 'rib)))) (set! pD4b17@pD2e5a@rib? pD2e5a@rib?) (set! pD2e5c@rib-sym* (lambda (pD3204@x) (simple-struct-ref pD3204@x '0))) (set! pD4b18@pD2e5c@rib-sym* pD2e5c@rib-sym*) (set! pD2e5e@set-rib-sym*! (lambda (pD3206@x pD3207@val) (simple-struct-set! pD3206@x '0 pD3207@val))) (set! pD4b19@pD2e5e@set-rib-sym*! pD2e5e@set-rib-sym*!) (set! pD2e60@rib-mark** (lambda (pD320a@x) (simple-struct-ref pD320a@x '1))) (set! pD4b1a@pD2e60@rib-mark** pD2e60@rib-mark**) (set! pD2e62@set-rib-mark**! (lambda (pD320c@x pD320d@val) (simple-struct-set! pD320c@x '1 pD320d@val))) (set! pD4b1b@pD2e62@set-rib-mark**! pD2e62@set-rib-mark**!) (set! pD2e64@rib-label* (lambda (pD3210@x) (simple-struct-ref pD3210@x '2))) (set! pD4b1c@pD2e64@rib-label* pD2e64@rib-label*) (set! pD2e66@set-rib-label*! (lambda (pD3212@x pD3213@val) (simple-struct-set! pD3212@x '2 pD3213@val))) (set! pD4b1d@pD2e66@set-rib-label*! pD2e66@set-rib-label*!) (set! pD2e68@rib-sealed/freq (lambda (pD3216@x) (simple-struct-ref pD3216@x '3))) (set! pD4b1e@pD2e68@rib-sealed/freq pD2e68@rib-sealed/freq) (set! pD2e6a@set-rib-sealed/freq! (lambda (pD3218@x pD3219@val) (simple-struct-set! pD3218@x '3 pD3219@val))) (set! pD4b1f@pD2e6a@set-rib-sealed/freq! pD2e6a@set-rib-sealed/freq!) (set! pD2e6c@rib-cache (lambda (pD321c@x) (simple-struct-ref pD321c@x '4))) (set! pD4b20@pD2e6c@rib-cache pD2e6c@rib-cache) (set! pD2e6e@set-rib-cache! (lambda (pD321e@x pD321f@val) (simple-struct-set! pD321e@x '4 pD321f@val))) (set! pD4b21@pD2e6e@set-rib-cache! pD2e6e@set-rib-cache!) (set! pD2e70@dummy '3) (set! pD4b22@pD2e70@dummy pD2e70@dummy) (set! pD2e72@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! pD4b23@pD2e72@make-empty-rib pD2e72@make-empty-rib) (set! pD2e74@extend-rib! (lambda (pD3222@rib pD3223@id pD3224@label) (let ((pD3229@find '#f)) (begin (set! pD3229@find (lambda (pD3236@sym pD3237@mark* pD3238@sym* pD3239@mark** pD323a@label*) (and (pair? pD3238@sym*) (if (and (eq? pD3236@sym (car pD3238@sym*)) (same-marks? pD3237@mark* (car pD3239@mark**))) pD323a@label* (pD3229@find pD3236@sym pD3237@mark* (cdr pD3238@sym*) (cdr pD3239@mark**) (cdr pD323a@label*)))))) (begin (if (pD2e68@rib-sealed/freq pD3222@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" pD3222@rib) (void)) (let ((pD322a@sym (pD2ec0@id->sym pD3223@id)) (pD322b@mark* (pD2e90@stx-mark* pD3223@id))) (let ((pD322e@sym* (pD2e5c@rib-sym* pD3222@rib))) (let ((pD3230@t (and (memq pD322a@sym (pD2e5c@rib-sym* pD3222@rib)) (pD3229@find pD322a@sym pD322b@mark* pD322e@sym* (pD2e60@rib-mark** pD3222@rib) (pD2e64@rib-label* pD3222@rib))))) (if pD3230@t ((lambda (pD3232@p) (if (not (eq? pD3224@label (car pD3232@p))) (if (pD31b5@top-level-context) (set-car! pD3232@p pD3224@label) (pD31a5@syntax-violation '#f '"multiple definitions of identifier" pD3223@id)) (void))) pD3230@t) (begin (if (pD2e6c@rib-cache pD3222@rib) (hashtable-update! (pD2e6c@rib-cache pD3222@rib) pD322a@sym (lambda (pD3234@e) (cons (cons pD322b@mark* pD3224@label) pD3234@e)) '()) (void)) (pD2e5e@set-rib-sym*! pD3222@rib (cons pD322a@sym pD322e@sym*)) (pD2e62@set-rib-mark**! pD3222@rib (cons pD322b@mark* (pD2e60@rib-mark** pD3222@rib))) (pD2e66@set-rib-label*! pD3222@rib (cons pD3224@label (pD2e64@rib-label* pD3222@rib))))))))))))) (set! pD4b24@pD2e74@extend-rib! pD2e74@extend-rib!) (set! pD2e76@extend-rib/nc! (lambda (pD3240@rib pD3241@id pD3242@label) (let ((pD3246@sym (pD2ec0@id->sym pD3241@id)) (pD3247@mark* (pD2e90@stx-mark* pD3241@id))) (let ((pD324a@sym* (pD2e5c@rib-sym* pD3240@rib))) (begin (if (pD2e6c@rib-cache pD3240@rib) (hashtable-update! (pD2e6c@rib-cache pD3240@rib) pD3246@sym (lambda (pD324c@e) (cons (cons pD3247@mark* pD3242@label) pD324c@e)) '()) (void)) (pD2e5e@set-rib-sym*! pD3240@rib (cons pD3246@sym pD324a@sym*)) (pD2e62@set-rib-mark**! pD3240@rib (cons pD3247@mark* (pD2e60@rib-mark** pD3240@rib))) (pD2e66@set-rib-label*! pD3240@rib (cons pD3242@label (pD2e64@rib-label* pD3240@rib)))))))) (set! pD4b25@pD2e76@extend-rib/nc! pD2e76@extend-rib/nc!) (set! pD2e78@make-rib-map (lambda (pD324e@sym*) (let ((pD3250@ht (make-eq-hashtable))) (let pD3256@f ((pD3252@i '0) (pD3253@sym* pD324e@sym*)) (if (null? pD3253@sym*) pD3250@ht (begin (hashtable-update! pD3250@ht (car pD3253@sym*) (lambda (pD3258@x) (cons pD3252@i pD3258@x)) '()) (pD3256@f (+ pD3252@i '1) (cdr pD3253@sym*)))))))) (set! pD4b26@pD2e78@make-rib-map pD2e78@make-rib-map) (set! pD2e7a@seal-rib! (lambda (pD325a@rib) (let ((pD325c@sym* (pD2e5c@rib-sym* pD325a@rib))) (if (not (null? pD325c@sym*)) (begin (pD2e5e@set-rib-sym*! pD325a@rib (list->vector pD325c@sym*)) (pD2e62@set-rib-mark**! pD325a@rib (list->vector (pD2e60@rib-mark** pD325a@rib))) (pD2e66@set-rib-label*! pD325a@rib (list->vector (pD2e64@rib-label* pD325a@rib))) (pD2e6a@set-rib-sealed/freq! pD325a@rib (pD2e78@make-rib-map pD325c@sym*))) (void))))) (set! pD4b27@pD2e7a@seal-rib! pD2e7a@seal-rib!) (set! pD2e7c@unseal-rib! (lambda (pD325e@rib) (if (pD2e68@rib-sealed/freq pD325e@rib) (begin (pD2e6a@set-rib-sealed/freq! pD325e@rib '#f) (pD2e5e@set-rib-sym*! pD325e@rib (vector->list (pD2e5c@rib-sym* pD325e@rib))) (pD2e62@set-rib-mark**! pD325e@rib (vector->list (pD2e60@rib-mark** pD325e@rib))) (pD2e66@set-rib-label*! pD325e@rib (vector->list (pD2e64@rib-label* pD325e@rib)))) (void)))) (set! pD4b28@pD2e7c@unseal-rib! pD2e7c@unseal-rib!) (set! pD2e7e@make-full-rib (lambda (pD3260@id* pD3261@label*) (let ((pD3264@r (make-simple-struct 'rib '6 (list (map pD2ec0@id->sym pD3260@id*) (map pD2e90@stx-mark* pD3260@id*) pD3261@label* '#f '#f)))) (begin (pD2e7a@seal-rib! pD3264@r) pD3264@r)))) (set! pD4b29@pD2e7e@make-full-rib pD2e7e@make-full-rib) (set! pD2e80@rp (pD2a05@pD28e1@make-record-printer 'stx (lambda (pD3266@x pD3267@p pD3268@wr) (begin (display '"#<syntax " pD3267@p) (write (pD2ed2@stx->datum pD3266@x) pD3267@p) (let ((pD326c@expr (pD2e8c@stx-expr pD3266@x))) (if (pD29fd@pD28d1@annotation? pD326c@expr) (let ((pD326e@src (pD29fe@pD28d3@annotation-source pD326c@expr))) (if (pair? pD326e@src) (begin (display '" [" pD3267@p) (display (cdr pD326e@src) pD3267@p) (display '" of " pD3267@p) (display (car pD326e@src) pD3267@p) (display '"]" pD3267@p)) (void))) (void))) (display '">" pD3267@p))))) (set! pD4b2a@pD2e80@rp pD2e80@rp) (set! pD2e8a@stx? (lambda (pD3270@x) (and (simple-struct? pD3270@x) (eq? (simple-struct-name pD3270@x) 'stx)))) (set! pD4b2b@pD2e8a@stx? pD2e8a@stx?) (set! pD2e8c@stx-expr (lambda (pD3272@x) (simple-struct-ref pD3272@x '0))) (set! pD4b2c@pD2e8c@stx-expr pD2e8c@stx-expr) (set! pD2e8e@set-stx-expr! (lambda (pD3274@x pD3275@val) (simple-struct-set! pD3274@x '0 pD3275@val))) (set! pD4b2d@pD2e8e@set-stx-expr! pD2e8e@set-stx-expr!) (set! pD2e90@stx-mark* (lambda (pD3278@x) (simple-struct-ref pD3278@x '1))) (set! pD4b2e@pD2e90@stx-mark* pD2e90@stx-mark*) (set! pD2e92@set-stx-mark*! (lambda (pD327a@x pD327b@val) (simple-struct-set! pD327a@x '1 pD327b@val))) (set! pD4b2f@pD2e92@set-stx-mark*! pD2e92@set-stx-mark*!) (set! pD2e94@stx-subst* (lambda (pD327e@x) (simple-struct-ref pD327e@x '2))) (set! pD4b30@pD2e94@stx-subst* pD2e94@stx-subst*) (set! pD2e96@set-stx-subst*! (lambda (pD3280@x pD3281@val) (simple-struct-set! pD3280@x '2 pD3281@val))) (set! pD4b31@pD2e96@set-stx-subst*! pD2e96@set-stx-subst*!) (set! pD2e98@stx-ae* (lambda (pD3284@x) (simple-struct-ref pD3284@x '3))) (set! pD4b32@pD2e98@stx-ae* pD2e98@stx-ae*) (set! pD2e9a@set-stx-ae*! (lambda (pD3286@x pD3287@val) (simple-struct-set! pD3286@x '3 pD3287@val))) (set! pD4b33@pD2e9a@set-stx-ae*! pD2e9a@set-stx-ae*!) (set! pD2e9c@dummy '3) (set! pD4b34@pD2e9c@dummy pD2e9c@dummy) (set! pD2e9e@datum->stx (lambda (pD328a@id pD328b@datum) (make-simple-struct 'stx '5 (list pD328b@datum (pD2e90@stx-mark* pD328a@id) (pD2e94@stx-subst* pD328a@id) (pD2e98@stx-ae* pD328a@id))))) (set! pD4b35@pD2e9e@datum->stx pD2e9e@datum->stx) (set! pD2ea0@gen-mark (lambda () (string '#\m))) (set! pD4b36@pD2ea0@gen-mark pD2ea0@gen-mark) (set! pD2ea2@anti-mark '#f) (set! pD4b37@pD2ea2@anti-mark pD2ea2@anti-mark) (set! pD2ea4@anti-mark? not) (set! pD4b38@pD2ea4@anti-mark? pD2ea4@anti-mark?) (set! pD2ea6@mkstx (lambda (pD328e@e pD328f@m* pD3290@s* pD3291@ae*) (if (and (pD2e8a@stx? pD328e@e) (not (pD2e44@top-marked? pD328f@m*))) (call-with-values (lambda () (join-wraps pD328f@m* pD3290@s* pD3291@ae* pD328e@e)) (lambda (pD329c@pD3297 pD329d@pD3299 pD329e@pD329b) (let ((pD32a2@ae* pD329e@pD329b) (pD32a3@s* pD329d@pD3299) (pD32a4@m* pD329c@pD3297)) (make-simple-struct 'stx '5 (list (pD2e8c@stx-expr pD328e@e) pD32a4@m* pD32a3@s* pD32a2@ae*))))) (make-simple-struct 'stx '5 (list pD328e@e pD328f@m* pD3290@s* pD3291@ae*))))) (set! pD4b39@pD2ea6@mkstx pD2ea6@mkstx) (set! pD2ea8@add-mark (lambda (pD32a8@m pD32a9@e pD32aa@ae) (pD2ea6@mkstx pD32a9@e (list pD32a8@m) '(shift) (list pD32aa@ae)))) (set! pD4b3a@pD2ea8@add-mark pD2ea8@add-mark) (set! pD2eaa@add-subst (lambda (pD32ae@subst pD32af@e) (pD2ea6@mkstx pD32af@e '() (list pD32ae@subst) '()))) (set! pD4b3b@pD2eaa@add-subst pD2eaa@add-subst) (set! pD2eac@syntax-kind? (lambda (pD32b2@x pD32b3@p?) (if (pD2e8a@stx? pD32b2@x) (pD2eac@syntax-kind? (pD2e8c@stx-expr pD32b2@x) pD32b3@p?) (if (pD29fd@pD28d1@annotation? pD32b2@x) (pD2eac@syntax-kind? (pD29ff@pD28d5@annotation-expression pD32b2@x) pD32b3@p?) (pD32b3@p? pD32b2@x))))) (set! pD4b3c@pD2eac@syntax-kind? pD2eac@syntax-kind?) (set! pD2eae@syntax-vector->list (lambda (pD32b6@x) (if (pD2e8a@stx? pD32b6@x) (let ((pD32b8@ls (pD2eae@syntax-vector->list (pD2e8c@stx-expr pD32b6@x))) (pD32b9@m* (pD2e90@stx-mark* pD32b6@x)) (pD32ba@s* (pD2e94@stx-subst* pD32b6@x)) (pD32bb@ae* (pD2e98@stx-ae* pD32b6@x))) (map (lambda (pD32c0@x) (pD2ea6@mkstx pD32c0@x pD32b9@m* pD32ba@s* pD32bb@ae*)) pD32b8@ls)) (if (pD29fd@pD28d1@annotation? pD32b6@x) (pD2eae@syntax-vector->list (pD29ff@pD28d5@annotation-expression pD32b6@x)) (if (vector? pD32b6@x) (vector->list pD32b6@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" pD32b6@x)))))) (set! pD4b3d@pD2eae@syntax-vector->list pD2eae@syntax-vector->list) (set! pD2eb0@syntax-pair? (lambda (pD32c2@x) (pD2eac@syntax-kind? pD32c2@x pair?))) (set! pD4b3e@pD2eb0@syntax-pair? pD2eb0@syntax-pair?) (set! pD2eb2@syntax-vector? (lambda (pD32c4@x) (pD2eac@syntax-kind? pD32c4@x vector?))) (set! pD4b3f@pD2eb2@syntax-vector? pD2eb2@syntax-vector?) (set! pD2eb4@syntax-null? (lambda (pD32c6@x) (pD2eac@syntax-kind? pD32c6@x null?))) (set! pD4b40@pD2eb4@syntax-null? pD2eb4@syntax-null?) (set! pD2eb6@syntax-list? (lambda (pD32c8@x) (or (pD2eb4@syntax-null? pD32c8@x) (and (pD2eb0@syntax-pair? pD32c8@x) (pD2eb6@syntax-list? (pD2eba@syntax-cdr pD32c8@x)))))) (set! pD4b41@pD2eb6@syntax-list? pD2eb6@syntax-list?) (set! pD2eb8@syntax-car (lambda (pD32ca@x) (if (pD2e8a@stx? pD32ca@x) (pD2ea6@mkstx (pD2eb8@syntax-car (pD2e8c@stx-expr pD32ca@x)) (pD2e90@stx-mark* pD32ca@x) (pD2e94@stx-subst* pD32ca@x) (pD2e98@stx-ae* pD32ca@x)) (if (pD29fd@pD28d1@annotation? pD32ca@x) (pD2eb8@syntax-car (pD29ff@pD28d5@annotation-expression pD32ca@x)) (if (pair? pD32ca@x) (car pD32ca@x) (assertion-violation 'syntax-car '"BUG: not a pair" pD32ca@x)))))) (set! pD4b42@pD2eb8@syntax-car pD2eb8@syntax-car) (set! pD2eba@syntax-cdr (lambda (pD32cc@x) (if (pD2e8a@stx? pD32cc@x) (pD2ea6@mkstx (pD2eba@syntax-cdr (pD2e8c@stx-expr pD32cc@x)) (pD2e90@stx-mark* pD32cc@x) (pD2e94@stx-subst* pD32cc@x) (pD2e98@stx-ae* pD32cc@x)) (if (pD29fd@pD28d1@annotation? pD32cc@x) (pD2eba@syntax-cdr (pD29ff@pD28d5@annotation-expression pD32cc@x)) (if (pair? pD32cc@x) (cdr pD32cc@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" pD32cc@x)))))) (set! pD4b43@pD2eba@syntax-cdr pD2eba@syntax-cdr) (set! pD2ebc@syntax->list (lambda (pD32ce@x) (if (pD2eb0@syntax-pair? pD32ce@x) (cons (pD2eb8@syntax-car pD32ce@x) (pD2ebc@syntax->list (pD2eba@syntax-cdr pD32ce@x))) (if (pD2eb4@syntax-null? pD32ce@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" pD32ce@x))))) (set! pD4b44@pD2ebc@syntax->list pD2ebc@syntax->list) (set! pD2ebe@id? (lambda (pD32d0@x) (and (pD2e8a@stx? pD32d0@x) (symbol? (pD2e8c@stx-expr pD32d0@x))))) (set! pD4b45@pD2ebe@id? pD2ebe@id?) (set! pD2ec0@id->sym (lambda (pD32d2@x) (pD2e8c@stx-expr pD32d2@x))) (set! pD4b46@pD2ec0@id->sym pD2ec0@id->sym) (set! pD2ec2@bound-id=? (lambda (pD32d4@x pD32d5@y) (and (eq? (pD2ec0@id->sym pD32d4@x) (pD2ec0@id->sym pD32d5@y)) (same-marks? (pD2e90@stx-mark* pD32d4@x) (pD2e90@stx-mark* pD32d5@y))))) (set! pD4b47@pD2ec2@bound-id=? pD2ec2@bound-id=?) (set! pD2ec4@free-id=? (lambda (pD32d8@i pD32d9@j) (let ((pD32dc@t0 (id->real-label pD32d8@i)) (pD32dd@t1 (id->real-label pD32d9@j))) (if (or pD32dc@t0 pD32dd@t1) (eq? pD32dc@t0 pD32dd@t1) (eq? (pD2ec0@id->sym pD32d8@i) (pD2ec0@id->sym pD32d9@j)))))) (set! pD4b48@pD2ec4@free-id=? pD2ec4@free-id=?) (set! pD2ec6@valid-bound-ids? (lambda (pD32e0@id*) (and (for-all pD2ebe@id? pD32e0@id*) (pD2ec8@distinct-bound-ids? pD32e0@id*)))) (set! pD4b49@pD2ec6@valid-bound-ids? pD2ec6@valid-bound-ids?) (set! pD2ec8@distinct-bound-ids? (lambda (pD32e2@id*) (or (null? pD32e2@id*) (and (not (pD2eca@bound-id-member? (car pD32e2@id*) (cdr pD32e2@id*))) (pD2ec8@distinct-bound-ids? (cdr pD32e2@id*)))))) (set! pD4b4a@pD2ec8@distinct-bound-ids? pD2ec8@distinct-bound-ids?) (set! pD2eca@bound-id-member? (lambda (pD32e4@id pD32e5@id*) (and (pair? pD32e5@id*) (or (pD2ec2@bound-id=? pD32e4@id (car pD32e5@id*)) (pD2eca@bound-id-member? pD32e4@id (cdr pD32e5@id*)))))) (set! pD4b4b@pD2eca@bound-id-member? pD2eca@bound-id-member?) (set! pD2ecc@self-evaluating? (lambda (pD32e8@x) (or (number? pD32e8@x) (string? pD32e8@x) (char? pD32e8@x) (boolean? pD32e8@x) (regexp? pD32e8@x) (bytevector? pD32e8@x)))) (set! pD4b4c@pD2ecc@self-evaluating? pD2ecc@self-evaluating?) (set! pD2ece@strip-annotations (lambda (pD32ea@x) (if (pair? pD32ea@x) (cons (pD2ece@strip-annotations (car pD32ea@x)) (pD2ece@strip-annotations (cdr pD32ea@x))) (if (vector? pD32ea@x) (vector-map pD2ece@strip-annotations pD32ea@x) (if (pD29fd@pD28d1@annotation? pD32ea@x) (pD29fc@pD28cf@annotation-stripped pD32ea@x) pD32ea@x))))) (set! pD4b4d@pD2ece@strip-annotations pD2ece@strip-annotations) (set! pD2ed0@strip (lambda (pD32ec@x pD32ed@m*) (if (pD2e44@top-marked? pD32ed@m*) (if (or (pD29fd@pD28d1@annotation? pD32ec@x) (and (pair? pD32ec@x) (pD29fd@pD28d1@annotation? (car pD32ec@x))) (and (vector? pD32ec@x) (> (vector-length pD32ec@x) '0) (pD29fd@pD28d1@annotation? (vector-ref pD32ec@x '0)))) (pD2ece@strip-annotations pD32ec@x) pD32ec@x) (let pD32f2@f ((pD32f0@x pD32ec@x)) (if (pD2e8a@stx? pD32f0@x) (pD2ed0@strip (pD2e8c@stx-expr pD32f0@x) (pD2e90@stx-mark* pD32f0@x)) (if (pD29fd@pD28d1@annotation? pD32f0@x) (pD29fc@pD28cf@annotation-stripped pD32f0@x) (if (pair? pD32f0@x) (let ((pD32f4@a (pD32f2@f (car pD32f0@x))) (pD32f5@d (pD32f2@f (cdr pD32f0@x)))) (if (and (eq? pD32f4@a (car pD32f0@x)) (eq? pD32f5@d (cdr pD32f0@x))) pD32f0@x (cons pD32f4@a pD32f5@d))) (if (vector? pD32f0@x) (let ((pD32f8@old (vector->list pD32f0@x))) (let ((pD32fa@new (map pD32f2@f pD32f8@old))) (if (for-all eq? pD32f8@old pD32fa@new) pD32f0@x (list->vector pD32fa@new)))) pD32f0@x)))))))) (set! pD4b4e@pD2ed0@strip pD2ed0@strip) (set! pD2ed2@stx->datum (lambda (pD32fc@x) (pD2ed0@strip pD32fc@x '()))) (set! pD4b4f@pD2ed2@stx->datum pD2ed2@stx->datum) (set! pD2ed4@id->label (lambda (pD32fe@id) (or (id->real-label pD32fe@id) (let ((pD3300@t (pD31b5@top-level-context))) (if pD3300@t ((lambda (pD3302@env) (let ((pD3304@rib (pD3165@interaction-env-rib pD3302@env))) (call-with-values (lambda () (pD2e4e@gen-define-label+loc pD32fe@id pD3304@rib)) (lambda (pD330a@pD3307 pD330b@pD3309) (let ((pD330e@loc_ pD330b@pD3309) (pD330f@lab pD330a@pD3307)) (begin (pD2e74@extend-rib! pD3304@rib pD32fe@id pD330f@lab) pD330f@lab)))))) pD3300@t) '#f))))) (set! pD4b50@pD2ed4@id->label pD2ed4@id->label) (set! pD2ed6@label->binding (lambda (pD3312@x pD3313@r) (let ((pD3316@t (pD2cd3@pD2b20@imported-label->binding pD3312@x))) (if pD3316@t ((lambda (pD3318@b) (if (and (pair? pD3318@b) (eq? (car pD3318@b) '$core-rtd)) (cons '$rtd (map pD307b@bless (cdr pD3318@b))) (if (and (pair? pD3318@b) (eq? (car pD3318@b) 'global-rtd)) (let ((pD331a@lib (cadr pD3318@b)) (pD331b@loc (cddr pD3318@b))) (cons '$rtd (symbol-value pD331b@loc))) pD3318@b))) pD3316@t) (let ((pD331e@t (assq pD3312@x pD3313@r))) (if pD331e@t (cdr pD331e@t) (let ((pD3320@t (pD31b5@top-level-context))) (if pD3320@t ((lambda (pD3322@env) (let ((pD3324@t (assq pD3312@x (pD316d@interaction-env-locs pD3322@env)))) (if pD3324@t ((lambda (pD3326@p) (cons* 'lexical (cdr pD3326@p) '#f)) pD3324@t) '(displaced-lexical . #f)))) pD3320@t) '(displaced-lexical . #f))))))))) (set! pD4b51@pD2ed6@label->binding pD2ed6@label->binding) (set! pD2ed8@make-binding cons) (set! pD4b52@pD2ed8@make-binding pD2ed8@make-binding) (set! pD2eda@binding-type car) (set! pD4b53@pD2eda@binding-type pD2eda@binding-type) (set! pD2edc@binding-value cdr) (set! pD4b54@pD2edc@binding-value pD2edc@binding-value) (set! pD2ede@raise-unbound-error (lambda (pD3328@id) (pD31a3@syntax-violation* '#f '"unbound identifier" pD3328@id (pD4f4a@pD4d90@make-undefined-violation)))) (set! pD4b55@pD2ede@raise-unbound-error pD2ede@raise-unbound-error) (set! pD2ee0@syntax-type (lambda (pD332a@e pD332b@r) (if (pD2ebe@id? pD332a@e) (let ((pD332e@id pD332a@e)) (let ((pD3330@label (pD2ed4@id->label pD332e@id))) (let ((pD3332@b (pD2ed6@label->binding pD3330@label pD332b@r))) (let ((pD3334@type (pD2eda@binding-type pD3332@b))) (begin (if (not pD3330@label) (pD2ede@raise-unbound-error pD332e@id) (void)) (let ((pD3336@t pD3334@type)) (if (memv pD3336@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values pD3334@type (pD2edc@binding-value pD3332@b) pD332e@id) (values 'other '#f '#f)))))))) (if (pD2eb0@syntax-pair? pD332a@e) (let ((pD3338@id (pD2eb8@syntax-car pD332a@e))) (if (pD2ebe@id? pD3338@id) (let ((pD333a@label (pD2ed4@id->label pD3338@id))) (let ((pD333c@b (pD2ed6@label->binding pD333a@label pD332b@r))) (let ((pD333e@type (pD2eda@binding-type pD333c@b))) (begin (if (not pD333a@label) (pD2ede@raise-unbound-error pD3338@id) (void)) (let ((pD3340@t pD333e@type)) (if (memv pD3340@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values pD333e@type (pD2edc@binding-value pD333c@b) pD3338@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((pD3342@d (pD2ed2@stx->datum pD332a@e))) (if (pD2ecc@self-evaluating? pD3342@d) (values 'constant pD3342@d '#f) (values 'other '#f '#f))))))) (set! pD4b56@pD2ee0@syntax-type pD2ee0@syntax-type) (set! pD2eee@sanitize-binding (lambda (pD3344@x pD3345@src) (if (procedure? pD3344@x) (cons* 'local-macro pD3344@x pD3345@src) (if (and (pair? pD3344@x) (eq? (car pD3344@x) 'macro!) (procedure? (cdr pD3344@x))) (cons* 'local-macro! (cdr pD3344@x) pD3345@src) (if (and (pair? pD3344@x) (eq? (car pD3344@x) '$rtd)) pD3344@x (assertion-violation 'expand '"invalid transformer" pD3344@x)))))) (set! pD4b57@pD2eee@sanitize-binding pD2eee@sanitize-binding) (set! pD2ef0@make-variable-transformer (lambda (pD3348@x) (if (procedure? pD3348@x) (cons 'macro! pD3348@x) (assertion-violation 'make-variable-transformer '"not a procedure" pD3348@x)))) (set! pD4b58@pD2ef0@make-variable-transformer pD2ef0@make-variable-transformer) (set! pD2ef2@variable-transformer? (lambda (pD334a@x) (and (pair? pD334a@x) (eq? (car pD334a@x) 'macro!) (procedure? (cdr pD334a@x))))) (set! pD4b59@pD2ef2@variable-transformer? pD2ef2@variable-transformer?) (set! pD2ef4@variable-transformer-procedure (lambda (pD334c@x) (if (pD2ef2@variable-transformer? pD334c@x) (cdr pD334c@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" pD334c@x)))) (set! pD4b5a@pD2ef4@variable-transformer-procedure pD2ef4@variable-transformer-procedure) (set! pD2ef6@make-eval-transformer (lambda (pD334e@x) (pD2eee@sanitize-binding (eval-core (pD2a5e@pD2a16@expanded->core pD334e@x)) pD334e@x))) (set! pD4b5b@pD2ef6@make-eval-transformer pD2ef6@make-eval-transformer) (set! pD3047@parse-define (lambda (pD3350@x) (let ((pD3352@t pD3350@x)) (let ((pD3354@ls/false (pD30c5@syntax-dispatch pD3352@t '(_ (any . any) any . each-any)))) (if (and pD3354@ls/false (apply (lambda (pD3356@id pD3357@fmls pD3358@b pD3359@b*) (pD2ebe@id? pD3356@id)) pD3354@ls/false)) (apply (lambda (pD335e@id pD335f@fmls pD3360@b pD3361@b*) (begin (pD30eb@verify-formals pD335f@fmls pD3350@x) (values pD335e@id (cons 'defun (cons pD335f@fmls (cons pD3360@b pD3361@b*)))))) pD3354@ls/false) (let ((pD3366@t pD3352@t)) (let ((pD3368@ls/false (pD30c5@syntax-dispatch pD3366@t '(_ any any)))) (if (and pD3368@ls/false (apply (lambda (pD336a@id pD336b@val) (pD2ebe@id? pD336a@id)) pD3368@ls/false)) (apply (lambda (pD336e@id pD336f@val) (values pD336e@id (cons 'expr pD336f@val))) pD3368@ls/false) (let ((pD3372@t pD3366@t)) (let ((pD3374@ls/false (pD30c5@syntax-dispatch pD3372@t '(_ any)))) (if (and pD3374@ls/false (apply (lambda (pD3376@id) (pD2ebe@id? pD3376@id)) pD3374@ls/false)) (apply (lambda (pD3378@id) (values pD3378@id (cons 'expr (pD307b@bless '(void))))) pD3374@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3372@t)))))))))))) (set! pD4b5c@pD3047@parse-define pD3047@parse-define) (set! pD3049@parse-define-syntax (lambda (pD337a@x) (let ((pD337c@t pD337a@x)) (let ((pD337e@ls/false (pD30c5@syntax-dispatch pD337c@t '(_ any any)))) (if (and pD337e@ls/false (apply (lambda (pD3380@id pD3381@val) (pD2ebe@id? pD3380@id)) pD337e@ls/false)) (apply (lambda (pD3384@id pD3385@val) (values pD3384@id pD3385@val)) pD337e@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD337c@t)))))) (set! pD4b5d@pD3049@parse-define-syntax pD3049@parse-define-syntax) (set! pD304b@scheme-stx-hashtable (make-eq-hashtable)) (set! pD4b5e@pD304b@scheme-stx-hashtable pD304b@scheme-stx-hashtable) (set! pD304d@scheme-stx (lambda (pD3388@sym) (or (hashtable-ref pD304b@scheme-stx-hashtable pD3388@sym '#f) (let ((pD338a@subst (pD2caf@pD2ad8@library-subst (pD2ccd@pD2b14@find-library-by-name '(psyntax system $all))))) (let ((pD338c@stx (make-simple-struct 'stx '5 (list pD3388@sym pD2e42@top-mark* '() '())))) (let ((pD338e@stx (let ((pD3390@t (assq pD3388@sym pD338a@subst))) (if pD3390@t ((lambda (pD3392@x) (let ((pD3394@name (car pD3392@x)) (pD3395@label (cdr pD3392@x))) (pD2eaa@add-subst (make-simple-struct 'rib '6 (list (list pD3394@name) (list pD2e42@top-mark*) (list pD3395@label) '#f '#f)) pD338c@stx))) pD3390@t) pD338c@stx)))) (begin (hashtable-set! pD304b@scheme-stx-hashtable pD3388@sym pD338e@stx) pD338e@stx))))))) (set! pD4b5f@pD304d@scheme-stx pD304d@scheme-stx) (set! pD304f@lexical-var car) (set! pD4b60@pD304f@lexical-var pD304f@lexical-var) (set! pD3051@lexical-mutable? cdr) (set! pD4b61@pD3051@lexical-mutable? pD3051@lexical-mutable?) (set! pD3053@set-lexical-mutable! set-cdr!) (set! pD4b62@pD3053@set-lexical-mutable! pD3053@set-lexical-mutable!) (set! pD3055@add-lexical (lambda (pD3398@lab pD3399@lex pD339a@r) (cons (cons* pD3398@lab 'lexical pD3399@lex '#f) pD339a@r))) (set! pD4b63@pD3055@add-lexical pD3055@add-lexical) (set! pD3057@add-lexicals (lambda (pD339e@lab* pD339f@lex* pD33a0@r) (if (null? pD339e@lab*) pD33a0@r (pD3057@add-lexicals (cdr pD339e@lab*) (cdr pD339f@lex*) (pD3055@add-lexical (car pD339e@lab*) (car pD339f@lex*) pD33a0@r))))) (set! pD4b64@pD3057@add-lexicals pD3057@add-lexicals) (set! pD3059@letrec-helper (lambda (pD33a4@e pD33a5@r pD33a6@mr pD33a7@build) (let ((pD33ac@t pD33a4@e)) (let ((pD33ae@ls/false (pD30c5@syntax-dispatch pD33ac@t '(_ #(each (any any)) any . each-any)))) (if pD33ae@ls/false (apply (lambda (pD33b0@lhs* pD33b1@rhs* pD33b2@b pD33b3@b*) (if (not (pD2ec6@valid-bound-ids? pD33b0@lhs*)) (pD307f@invalid-fmls-error pD33a4@e pD33b0@lhs*) (let ((pD33b8@lex* (map pD2e46@gen-lexical pD33b0@lhs*)) (pD33b9@lab* (map pD2e4a@gen-label pD33b0@lhs*))) (let ((pD33bc@rib (pD2e7e@make-full-rib pD33b0@lhs* pD33b9@lab*)) (pD33bd@r (pD3057@add-lexicals pD33b9@lab* pD33b8@lex* pD33a5@r))) (let ((pD33c0@body (pD30fd@chi-internal (pD2eaa@add-subst pD33bc@rib (cons pD33b2@b pD33b3@b*)) pD33bd@r pD33a6@mr)) (pD33c1@rhs* (pD30e3@chi-expr* (map (lambda (pD33c4@x) (pD2eaa@add-subst pD33bc@rib pD33c4@x)) pD33b1@rhs*) pD33bd@r pD33a6@mr))) (pD33a7@build '#f pD33b8@lex* pD33c1@rhs* pD33c0@body)))))) pD33ae@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD33ac@t)))))) (set! pD4b65@pD3059@letrec-helper pD3059@letrec-helper) (set! pD305b@let-transformer (lambda (pD33c6@e pD33c7@r pD33c8@mr) (let ((pD33cc@t pD33c6@e)) (let ((pD33ce@ls/false (pD30c5@syntax-dispatch pD33cc@t '(_ #(each (any any)) any . each-any)))) (if pD33ce@ls/false (apply (lambda (pD33d0@lhs* pD33d1@rhs* pD33d2@b pD33d3@b*) (if (not (pD2ec6@valid-bound-ids? pD33d0@lhs*)) (pD307f@invalid-fmls-error pD33c6@e pD33d0@lhs*) (let ((pD33d8@lex* (map pD2e46@gen-lexical pD33d0@lhs*)) (pD33d9@lab* (map pD2e4a@gen-label pD33d0@lhs*)) (pD33da@rhs* (pD30e3@chi-expr* pD33d1@rhs* pD33c7@r pD33c8@mr))) (let ((pD33de@rib (pD2e7e@make-full-rib pD33d0@lhs* pD33d9@lab*)) (pD33df@r (pD3057@add-lexicals pD33d9@lab* pD33d8@lex* pD33c7@r))) (let ((pD33e2@body (pD30fd@chi-internal (pD2eaa@add-subst pD33de@rib (cons pD33d2@b pD33d3@b*)) pD33df@r pD33c8@mr))) (pD2e26@pD2d83@build-let '#f pD33d8@lex* pD33da@rhs* pD33e2@body)))))) pD33ce@ls/false) (let ((pD33e4@t pD33cc@t)) (let ((pD33e6@ls/false (pD30c5@syntax-dispatch pD33e4@t '(_ any #(each (any any)) any . each-any)))) (if pD33e6@ls/false (apply (lambda (pD33e8@loop pD33e9@lhs* pD33ea@rhs* pD33eb@b pD33ec@b*) (if (not (pD2ec6@valid-bound-ids? pD33e9@lhs*)) (pD307f@invalid-fmls-error pD33c6@e pD33e9@lhs*) (let ((pD33f2@lex* (map pD2e46@gen-lexical pD33e9@lhs*)) (pD33f3@lab* (map pD2e4a@gen-label pD33e9@lhs*)) (pD33f4@rhs* (pD30e3@chi-expr* pD33ea@rhs* pD33c7@r pD33c8@mr)) (pD33f5@loop-lex (pD2e46@gen-lexical pD33e8@loop)) (pD33f6@loop-lab (pD2e4a@gen-label pD33e8@loop))) (let ((pD33fc@loop-rib (pD2e7e@make-full-rib (list pD33e8@loop) (list pD33f6@loop-lab))) (pD33fd@rib (pD2e7e@make-full-rib pD33e9@lhs* pD33f3@lab*)) (pD33fe@r (pD3057@add-lexicals (cons pD33f6@loop-lab pD33f3@lab*) (cons pD33f5@loop-lex pD33f2@lex*) pD33c7@r))) (let ((pD3402@body (pD30fd@chi-internal (pD2eaa@add-subst pD33fc@loop-rib (pD2eaa@add-subst pD33fd@rib (cons pD33eb@b pD33ec@b*))) pD33fe@r pD33c8@mr))) (pD2e27@pD2d85@build-named-let '#f pD33f5@loop-lex pD33f2@lex* pD33f4@rhs* pD3402@body)))))) pD33e6@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD33e4@t))))))))) (set! pD4b66@pD305b@let-transformer pD305b@let-transformer) (set! pD305d@letrec-transformer (lambda (pD3404@e pD3405@r pD3406@mr) (pD3059@letrec-helper pD3404@e pD3405@r pD3406@mr pD2e25@pD2d81@build-letrec))) (set! pD4b67@pD305d@letrec-transformer pD305d@letrec-transformer) (set! pD305f@letrec*-transformer (lambda (pD340a@e pD340b@r pD340c@mr) (pD3059@letrec-helper pD340a@e pD340b@r pD340c@mr pD2e28@pD2d87@build-letrec*))) (set! pD4b68@pD305f@letrec*-transformer pD305f@letrec*-transformer) (set! pD3061@fluid-let-syntax-transformer (lambda (pD3410@e pD3411@r pD3412@mr) (let ((pD3417@lookup '#f)) (begin (set! pD3417@lookup (lambda (pD342a@x) (or (pD2ed4@id->label pD342a@x) (pD31a5@syntax-violation '#f '"unbound identifier" pD3410@e pD342a@x)))) (let ((pD3418@t pD3410@e)) (let ((pD341a@ls/false (pD30c5@syntax-dispatch pD3418@t '(_ #(each (any any)) any . each-any)))) (if pD341a@ls/false (apply (lambda (pD341c@lhs* pD341d@rhs* pD341e@b pD341f@b*) (if (not (pD2ec6@valid-bound-ids? pD341c@lhs*)) (pD307f@invalid-fmls-error pD3410@e pD341c@lhs*) (let ((pD3424@lab* (map pD3417@lookup pD341c@lhs*)) (pD3425@rhs* (map (lambda (pD3428@x) (pD2ef6@make-eval-transformer (pD311f@expand-transformer pD3428@x pD3412@mr))) pD341d@rhs*))) (pD30fd@chi-internal (cons pD341e@b pD341f@b*) (append (map cons pD3424@lab* pD3425@rhs*) pD3411@r) (append (map cons pD3424@lab* pD3425@rhs*) pD3412@mr))))) pD341a@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3418@t)))))))) (set! pD4b69@pD3061@fluid-let-syntax-transformer pD3061@fluid-let-syntax-transformer) (set! pD3063@type-descriptor-transformer (lambda (pD342c@e pD342d@r pD342e@mr) (let ((pD3432@t pD342c@e)) (let ((pD3434@ls/false (pD30c5@syntax-dispatch pD3432@t '(_ any)))) (if (and pD3434@ls/false (apply (lambda (pD3436@id) (pD2ebe@id? pD3436@id)) pD3434@ls/false)) (apply (lambda (pD3438@id) (let ((pD343a@lab (pD2ed4@id->label pD3438@id))) (let ((pD343c@b (pD2ed6@label->binding pD343a@lab pD342d@r))) (let ((pD343e@type (pD2eda@binding-type pD343c@b))) (begin (if (not pD343a@lab) (pD2ede@raise-unbound-error pD3438@id) (void)) (if (not (and (eq? pD343e@type '$rtd) (not (list? (pD2edc@binding-value pD343c@b))))) (pD31a5@syntax-violation '#f '"not a record type" pD342c@e) (void)) (list 'quote (pD2edc@binding-value pD343c@b))))))) pD3434@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3432@t)))))) (set! pD4b6a@pD3063@type-descriptor-transformer pD3063@type-descriptor-transformer) (set! pD3065@record-type-descriptor-transformer (lambda (pD3440@e pD3441@r pD3442@mr) (let ((pD3446@t pD3440@e)) (let ((pD3448@ls/false (pD30c5@syntax-dispatch pD3446@t '(_ any)))) (if (and pD3448@ls/false (apply (lambda (pD344a@id) (pD2ebe@id? pD344a@id)) pD3448@ls/false)) (apply (lambda (pD344c@id) (let ((pD344e@lab (pD2ed4@id->label pD344c@id))) (let ((pD3450@b (pD2ed6@label->binding pD344e@lab pD3441@r))) (let ((pD3452@type (pD2eda@binding-type pD3450@b))) (begin (if (not pD344e@lab) (pD2ede@raise-unbound-error pD344c@id) (void)) (if (not (and (eq? pD3452@type '$rtd) (list? (pD2edc@binding-value pD3450@b)))) (pD31a5@syntax-violation '#f '"not a record type" pD3440@e) (void)) (pD30e7@chi-expr (car (pD2edc@binding-value pD3450@b)) pD3441@r pD3442@mr)))))) pD3448@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3446@t)))))) (set! pD4b6b@pD3065@record-type-descriptor-transformer pD3065@record-type-descriptor-transformer) (set! pD3067@record-constructor-descriptor-transformer (lambda (pD3454@e pD3455@r pD3456@mr) (let ((pD345a@t pD3454@e)) (let ((pD345c@ls/false (pD30c5@syntax-dispatch pD345a@t '(_ any)))) (if (and pD345c@ls/false (apply (lambda (pD345e@id) (pD2ebe@id? pD345e@id)) pD345c@ls/false)) (apply (lambda (pD3460@id) (let ((pD3462@lab (pD2ed4@id->label pD3460@id))) (let ((pD3464@b (pD2ed6@label->binding pD3462@lab pD3455@r))) (let ((pD3466@type (pD2eda@binding-type pD3464@b))) (begin (if (not pD3462@lab) (pD2ede@raise-unbound-error pD3460@id) (void)) (if (not (and (eq? pD3466@type '$rtd) (list? (pD2edc@binding-value pD3464@b)))) (pD31a5@syntax-violation '#f '"invalid type" pD3454@e) (void)) (pD30e7@chi-expr (cadr (pD2edc@binding-value pD3464@b)) pD3455@r pD3456@mr)))))) pD345c@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD345a@t)))))) (set! pD4b6c@pD3067@record-constructor-descriptor-transformer pD3067@record-constructor-descriptor-transformer) (set! pD3069@when-macro (lambda (pD3468@e) (let ((pD346a@t pD3468@e)) (let ((pD346c@ls/false (pD30c5@syntax-dispatch pD346a@t '(_ any any . each-any)))) (if pD346c@ls/false (apply (lambda (pD346e@test pD346f@e pD3470@e*) (pD307b@bless (list 'if pD346e@test (cons 'begin (cons pD346f@e pD3470@e*))))) pD346c@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD346a@t)))))) (set! pD4b6d@pD3069@when-macro pD3069@when-macro) (set! pD306b@unless-macro (lambda (pD3474@e) (let ((pD3476@t pD3474@e)) (let ((pD3478@ls/false (pD30c5@syntax-dispatch pD3476@t '(_ any any . each-any)))) (if pD3478@ls/false (apply (lambda (pD347a@test pD347b@e pD347c@e*) (pD307b@bless (list 'if (list 'not pD347a@test) (cons 'begin (cons pD347b@e pD347c@e*))))) pD3478@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3476@t)))))) (set! pD4b6e@pD306b@unless-macro pD306b@unless-macro) (set! pD306d@if-transformer (lambda (pD3480@e pD3481@r pD3482@mr) (let ((pD3486@t pD3480@e)) (let ((pD3488@ls/false (pD30c5@syntax-dispatch pD3486@t '(_ any any any)))) (if pD3488@ls/false (apply (lambda (pD348a@e0 pD348b@e1 pD348c@e2) (list 'if (pD30e7@chi-expr pD348a@e0 pD3481@r pD3482@mr) (pD30e7@chi-expr pD348b@e1 pD3481@r pD3482@mr) (pD30e7@chi-expr pD348c@e2 pD3481@r pD3482@mr))) pD3488@ls/false) (let ((pD3490@t pD3486@t)) (let ((pD3492@ls/false (pD30c5@syntax-dispatch pD3490@t '(_ any any)))) (if pD3492@ls/false (apply (lambda (pD3494@e0 pD3495@e1) (list 'if (pD30e7@chi-expr pD3494@e0 pD3481@r pD3482@mr) (pD30e7@chi-expr pD3495@e1 pD3481@r pD3482@mr) (pD2e24@pD2d7f@build-void))) pD3492@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3490@t))))))))) (set! pD4b6f@pD306d@if-transformer pD306d@if-transformer) (set! pD306f@and-transformer (lambda (pD3498@e pD3499@r pD349a@mr) (let ((pD349e@t pD3498@e)) (let ((pD34a0@ls/false (pD30c5@syntax-dispatch pD349e@t '(_ . each-any)))) (if pD34a0@ls/false (apply (lambda (pD34a2@e*) (cons 'and (pD30e3@chi-expr* pD34a2@e* pD3499@r pD349a@mr))) pD34a0@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD349e@t)))))) (set! pD4b70@pD306f@and-transformer pD306f@and-transformer) (set! pD3071@or-transformer (lambda (pD34a4@e pD34a5@r pD34a6@mr) (let ((pD34aa@t pD34a4@e)) (let ((pD34ac@ls/false (pD30c5@syntax-dispatch pD34aa@t '(_ . each-any)))) (if pD34ac@ls/false (apply (lambda (pD34ae@e*) (cons 'or (pD30e3@chi-expr* pD34ae@e* pD34a5@r pD34a6@mr))) pD34ac@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD34aa@t)))))) (set! pD4b71@pD3071@or-transformer pD3071@or-transformer) (set! pD3073@case-macro (lambda (pD34b0@e) (let ((pD34b3@build-last '#f) (pD34b5@build-one '#f)) (begin (set! pD34b3@build-last (lambda (pD34da@cls) (let ((pD34dc@t pD34da@cls)) (let ((pD34de@ls/false (pD30c5@syntax-dispatch pD34dc@t '(#(scheme-id else) any . each-any)))) (if pD34de@ls/false (apply (lambda (pD34e0@e pD34e1@e*) (cons 'begin (cons pD34e0@e pD34e1@e*))) pD34de@ls/false) (let ((pD34e4@t pD34dc@t)) (let ((pD34e6@ls/false (pD30c5@syntax-dispatch pD34e4@t '_))) (if pD34e6@ls/false (apply (lambda () (pD34b5@build-one pD34da@cls '(if #f #f))) pD34e6@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD34e4@t))))))))) (set! pD34b5@build-one (lambda (pD34cc@cls pD34cd@k) (let ((pD34d0@t pD34cc@cls)) (let ((pD34d2@ls/false (pD30c5@syntax-dispatch pD34d0@t '(each-any any . each-any)))) (if pD34d2@ls/false (apply (lambda (pD34d4@d* pD34d5@e pD34d6@e*) (list 'if (list 'memv 't (list 'quote pD34d4@d*)) (cons 'begin (cons pD34d5@e pD34d6@e*)) pD34cd@k)) pD34d2@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD34d0@t)))))) (let ((pD34b6@t pD34b0@e)) (let ((pD34b8@ls/false (pD30c5@syntax-dispatch pD34b6@t '(_ any)))) (if pD34b8@ls/false (apply (lambda (pD34ba@expr) (pD307b@bless (cons 'let (cons (list (list 't pD34ba@expr)) '((if #f #f)))))) pD34b8@ls/false) (let ((pD34bc@t pD34b6@t)) (let ((pD34be@ls/false (pD30c5@syntax-dispatch pD34bc@t '(_ any any . each-any)))) (if pD34be@ls/false (apply (lambda (pD34c0@expr pD34c1@cls pD34c2@cls*) (pD307b@bless (list 'let (list (list 't pD34c0@expr)) (let pD34ca@f ((pD34c6@cls pD34c1@cls) (pD34c7@cls* pD34c2@cls*)) (if (null? pD34c7@cls*) (pD34b3@build-last pD34c6@cls) (pD34b5@build-one pD34c6@cls (pD34ca@f (car pD34c7@cls*) (cdr pD34c7@cls*)))))))) pD34be@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD34bc@t))))))))))) (set! pD4b72@pD3073@case-macro pD3073@case-macro) (set! pD3075@quote-transformer (lambda (pD34e8@e pD34e9@r pD34ea@mr) (let ((pD34ee@t pD34e8@e)) (let ((pD34f0@ls/false (pD30c5@syntax-dispatch pD34ee@t '(_ any)))) (if pD34f0@ls/false (apply (lambda (pD34f2@datum) (list 'quote (pD2ed2@stx->datum pD34f2@datum))) pD34f0@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD34ee@t)))))) (set! pD4b73@pD3075@quote-transformer pD3075@quote-transformer) (set! pD3077@case-lambda-transformer (lambda (pD34f4@e pD34f5@r pD34f6@mr) (let ((pD34fa@t pD34f4@e)) (let ((pD34fc@ls/false (pD30c5@syntax-dispatch pD34fa@t '(_ . #(each (any any . each-any)))))) (if pD34fc@ls/false (apply (lambda (pD34fe@fmls* pD34ff@b* pD3500@b**) (call-with-values (lambda () (pD30ef@chi-lambda-clause* pD34f4@e pD34fe@fmls* (map cons pD34ff@b* pD3500@b**) pD34f5@r pD34f6@mr)) (lambda (pD3508@pD3505 pD3509@pD3507) (let ((pD350c@body* pD3509@pD3507) (pD350d@fmls* pD3508@pD3505)) (pD2e22@pD2d4f@build-case-lambda '#f pD350d@fmls* pD350c@body*))))) pD34fc@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD34fa@t)))))) (set! pD4b74@pD3077@case-lambda-transformer pD3077@case-lambda-transformer) (set! pD3079@lambda-transformer (lambda (pD3510@e pD3511@r pD3512@mr) (let ((pD3516@t pD3510@e)) (let ((pD3518@ls/false (pD30c5@syntax-dispatch pD3516@t '(_ any any . each-any)))) (if pD3518@ls/false (apply (lambda (pD351a@fmls pD351b@b pD351c@b*) (call-with-values (lambda () (pD30ed@chi-lambda-clause pD3510@e pD351a@fmls (cons pD351b@b pD351c@b*) pD3511@r pD3512@mr)) (lambda (pD3524@pD3521 pD3525@pD3523) (let ((pD3528@body pD3525@pD3523) (pD3529@fmls pD3524@pD3521)) (pD2e21@pD2d4d@build-lambda '#f pD3529@fmls pD3528@body))))) pD3518@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3516@t)))))) (set! pD4b75@pD3079@lambda-transformer pD3079@lambda-transformer) (set! pD307b@bless (lambda (pD352c@x) (pD2ea6@mkstx (let pD3530@f ((pD352e@x pD352c@x)) (if (pD2e8a@stx? pD352e@x) pD352e@x (if (pair? pD352e@x) (cons (pD3530@f (car pD352e@x)) (pD3530@f (cdr pD352e@x))) (if (symbol? pD352e@x) (pD304d@scheme-stx pD352e@x) (if (vector? pD352e@x) (vector-map pD3530@f pD352e@x) pD352e@x))))) '() '() '()))) (set! pD4b76@pD307b@bless pD307b@bless) (set! pD307d@with-syntax-macro (lambda (pD3532@e) (let ((pD3534@t pD3532@e)) (let ((pD3536@ls/false (pD30c5@syntax-dispatch pD3534@t '(_ #(each (any any)) any . each-any)))) (if pD3536@ls/false (apply (lambda (pD3538@pat* pD3539@expr* pD353a@b pD353b@b*) (let ((pD3540@idn* (let pD3544@f ((pD3542@pat* pD3538@pat*)) (if (null? pD3542@pat*) '() (call-with-values (lambda () (pD30c3@convert-pattern (car pD3542@pat*) '())) (lambda (pD354a@pD3547 pD354b@pD3549) (let ((pD354e@idn* pD354b@pD3549) (pD354f@pat pD354a@pD3547)) (append pD354e@idn* (pD3544@f (cdr pD3542@pat*)))))))))) (begin (pD30eb@verify-formals (map car pD3540@idn*) pD3532@e) (let ((pD3552@t* (pD3193@generate-temporaries pD3539@expr*))) (pD307b@bless (list 'let (map list pD3552@t* pD3539@expr*) (let pD3558@f ((pD3554@pat* pD3538@pat*) (pD3555@t* pD3552@t*)) (if (null? pD3554@pat*) (cons 'begin (cons '#f (cons pD353a@b pD353b@b*))) (list 'syntax-case (car pD3555@t*) '() (list (car pD3554@pat*) (pD3558@f (cdr pD3554@pat*) (cdr pD3555@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car pD3554@pat*)) (car pD3555@t*)))))))))))) pD3536@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3534@t)))))) (set! pD4b77@pD307d@with-syntax-macro pD307d@with-syntax-macro) (set! pD307f@invalid-fmls-error (lambda (pD355a@stx pD355b@fmls) (let ((pD355e@t pD355b@fmls)) (let ((pD3560@ls/false (pD30c5@syntax-dispatch pD355e@t '#(each+ any () any)))) (if pD3560@ls/false (apply (lambda (pD3562@id* pD3563@last) (let pD3568@f ((pD3566@id* (if (pD2ebe@id? pD3563@last) (cons pD3563@last pD3562@id*) (if (pD2eb4@syntax-null? pD3563@last) pD3562@id* (pD31a5@syntax-violation '#f '"not an identifier" pD355a@stx pD3563@last))))) (if (null? pD3566@id*) (values) (if (not (pD2ebe@id? (car pD3566@id*))) (pD31a5@syntax-violation '#f '"not an identifier" pD355a@stx (car pD3566@id*)) (begin (pD3568@f (cdr pD3566@id*)) (if (pD2eca@bound-id-member? (car pD3566@id*) (cdr pD3566@id*)) (pD31a5@syntax-violation '#f '"duplicate binding" pD355a@stx (car pD3566@id*)) (void))))))) pD3560@ls/false) (let ((pD356a@t pD355e@t)) (let ((pD356c@ls/false (pD30c5@syntax-dispatch pD356a@t '_))) (if pD356c@ls/false (apply (lambda () (pD31a5@syntax-violation '#f '"malformed binding form" pD355a@stx pD355b@fmls)) pD356c@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD356a@t))))))))) (set! pD4b78@pD307f@invalid-fmls-error pD307f@invalid-fmls-error) (set! pD3081@let-macro (lambda (pD356e@stx) (let ((pD3570@t pD356e@stx)) (let ((pD3572@ls/false (pD30c5@syntax-dispatch pD3570@t '(_ #(each (any any)) any . each-any)))) (if pD3572@ls/false (apply (lambda (pD3574@lhs* pD3575@rhs* pD3576@b pD3577@b*) (if (pD2ec6@valid-bound-ids? pD3574@lhs*) (pD307b@bless (cons (cons 'lambda (cons pD3574@lhs* (cons pD3576@b pD3577@b*))) pD3575@rhs*)) (pD307f@invalid-fmls-error pD356e@stx pD3574@lhs*))) pD3572@ls/false) (let ((pD357c@t pD3570@t)) (let ((pD357e@ls/false (pD30c5@syntax-dispatch pD357c@t '(_ any #(each (any any)) any . each-any)))) (if (and pD357e@ls/false (apply (lambda (pD3580@f pD3581@lhs* pD3582@rhs* pD3583@b pD3584@b*) (pD2ebe@id? pD3580@f)) pD357e@ls/false)) (apply (lambda (pD358a@f pD358b@lhs* pD358c@rhs* pD358d@b pD358e@b*) (if (pD2ec6@valid-bound-ids? pD358b@lhs*) (pD307b@bless (cons (list 'letrec (list (list pD358a@f (cons 'lambda (cons pD358b@lhs* (cons pD358d@b pD358e@b*))))) pD358a@f) pD358c@rhs*)) (pD307f@invalid-fmls-error pD356e@stx pD358b@lhs*))) pD357e@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD357c@t))))))))) (set! pD4b79@pD3081@let-macro pD3081@let-macro) (set! pD3083@let-values-macro (lambda (pD3594@stx) (let ((pD3597@rename '#f) (pD3599@rename* '#f)) (begin (set! pD3597@rename (lambda (pD35fc@x pD35fd@old* pD35fe@new*) (begin (if (not (pD2ebe@id? pD35fc@x)) (pD31a5@syntax-violation '#f '"not an indentifier" pD3594@stx pD35fc@x) (void)) (if (pD2eca@bound-id-member? pD35fc@x pD35fd@old*) (pD31a5@syntax-violation '#f '"duplicate binding" pD3594@stx pD35fc@x) (void)) (let ((pD3602@y (gensym (pD31ab@syntax->datum pD35fc@x)))) (values pD3602@y (cons pD35fc@x pD35fd@old*) (cons pD3602@y pD35fe@new*)))))) (set! pD3599@rename* (lambda (pD35ea@x* pD35eb@old* pD35ec@new*) (if (null? pD35ea@x*) (values '() pD35eb@old* pD35ec@new*) (call-with-values (lambda () (pD3597@rename (car pD35ea@x*) pD35eb@old* pD35ec@new*)) (lambda (pD35f0@x pD35f1@old* pD35f2@new*) (call-with-values (lambda () (pD3599@rename* (cdr pD35ea@x*) pD35f1@old* pD35f2@new*)) (lambda (pD35f6@x* pD35f7@old* pD35f8@new*) (values (cons pD35f0@x pD35f6@x*) pD35f7@old* pD35f8@new*)))))))) (let ((pD359a@t pD3594@stx)) (let ((pD359c@ls/false (pD30c5@syntax-dispatch pD359a@t '(_ () any . each-any)))) (if pD359c@ls/false (apply (lambda (pD359e@b pD359f@b*) (cons* (pD307b@bless 'let) '() pD359e@b pD359f@b*)) pD359c@ls/false) (let ((pD35a2@t pD359a@t)) (let ((pD35a4@ls/false (pD30c5@syntax-dispatch pD35a2@t '(_ #(each (any any)) any . each-any)))) (if pD35a4@ls/false (apply (lambda (pD35a6@lhs* pD35a7@rhs* pD35a8@b pD35a9@b*) (pD307b@bless (let pD35b6@f ((pD35ae@lhs* pD35a6@lhs*) (pD35af@rhs* pD35a7@rhs*) (pD35b0@old* '()) (pD35b1@new* '())) (if (null? pD35ae@lhs*) (cons 'let (cons (map list pD35b0@old* pD35b1@new*) (cons pD35a8@b pD35a9@b*))) (let ((pD35b8@t (car pD35ae@lhs*))) (let ((pD35ba@ls/false (pD30c5@syntax-dispatch pD35b8@t 'each-any))) (if pD35ba@ls/false (apply (lambda (pD35bc@x*) (call-with-values (lambda () (pD3599@rename* pD35bc@x* pD35b0@old* pD35b1@new*)) (lambda (pD35c4@pD35bf pD35c5@pD35c1 pD35c6@pD35c3) (let ((pD35ca@new* pD35c6@pD35c3) (pD35cb@old* pD35c5@pD35c1) (pD35cc@y* pD35c4@pD35bf)) (list 'call-with-values (list 'lambda '() (car pD35af@rhs*)) (list 'lambda pD35cc@y* (pD35b6@f (cdr pD35ae@lhs*) (cdr pD35af@rhs*) pD35cb@old* pD35ca@new*))))))) pD35ba@ls/false) (let ((pD35d0@t pD35b8@t)) (let ((pD35d2@ls/false (pD30c5@syntax-dispatch pD35d0@t '#(each+ any () any)))) (if pD35d2@ls/false (apply (lambda (pD35d4@x* pD35d5@x) (call-with-values (lambda () (pD3597@rename pD35d5@x pD35b0@old* pD35b1@new*)) (lambda (pD35d8@y pD35d9@old* pD35da@new*) (call-with-values (lambda () (pD3599@rename* pD35d4@x* pD35d9@old* pD35da@new*)) (lambda (pD35de@y* pD35df@old* pD35e0@new*) (list 'call-with-values (list 'lambda '() (car pD35af@rhs*)) (list 'lambda (append pD35de@y* pD35d8@y) (pD35b6@f (cdr pD35ae@lhs*) (cdr pD35af@rhs*) pD35df@old* pD35e0@new*)))))))) pD35d2@ls/false) (let ((pD35e4@t pD35d0@t)) (let ((pD35e6@ls/false (pD30c5@syntax-dispatch pD35e4@t 'any))) (if pD35e6@ls/false (apply (lambda (pD35e8@others) (pD31a5@syntax-violation '#f '"malformed bindings" pD3594@stx pD35e8@others)) pD35e6@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD35e4@t)))))))))))))) pD35a4@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD35a2@t))))))))))) (set! pD4b7a@pD3083@let-values-macro pD3083@let-values-macro) (set! pD3085@let*-values-macro (lambda (pD3604@stx) (let ((pD3607@check '#f)) (begin (set! pD3607@check (lambda (pD3636@x*) (if (not (null? pD3636@x*)) (let ((pD3638@x (car pD3636@x*))) (begin (if (not (pD2ebe@id? pD3638@x)) (pD31a5@syntax-violation '#f '"not an identifier" pD3604@stx pD3638@x) (void)) (pD3607@check (cdr pD3636@x*)) (if (pD2eca@bound-id-member? pD3638@x (cdr pD3636@x*)) (pD31a5@syntax-violation '#f '"duplicate identifier" pD3604@stx pD3638@x) (void)))) (void)))) (let ((pD3608@t pD3604@stx)) (let ((pD360a@ls/false (pD30c5@syntax-dispatch pD3608@t '(_ () any . each-any)))) (if pD360a@ls/false (apply (lambda (pD360c@b pD360d@b*) (cons* (pD307b@bless 'let) '() pD360c@b pD360d@b*)) pD360a@ls/false) (let ((pD3610@t pD3608@t)) (let ((pD3612@ls/false (pD30c5@syntax-dispatch pD3610@t '(_ #(each (any any)) any . each-any)))) (if pD3612@ls/false (apply (lambda (pD3614@lhs* pD3615@rhs* pD3616@b pD3617@b*) (pD307b@bless (let pD3620@f ((pD361c@lhs* pD3614@lhs*) (pD361d@rhs* pD3615@rhs*)) (if (null? pD361c@lhs*) (cons 'begin (cons pD3616@b pD3617@b*)) (let ((pD3622@t (car pD361c@lhs*))) (let ((pD3624@ls/false (pD30c5@syntax-dispatch pD3622@t 'each-any))) (if pD3624@ls/false (apply (lambda (pD3626@x*) (begin (pD3607@check pD3626@x*) (list 'call-with-values (list 'lambda '() (car pD361d@rhs*)) (list 'lambda pD3626@x* (pD3620@f (cdr pD361c@lhs*) (cdr pD361d@rhs*)))))) pD3624@ls/false) (let ((pD3628@t pD3622@t)) (let ((pD362a@ls/false (pD30c5@syntax-dispatch pD3628@t '#(each+ any () any)))) (if pD362a@ls/false (apply (lambda (pD362c@x* pD362d@x) (begin (pD3607@check (cons pD362d@x pD362c@x*)) (list 'call-with-values (list 'lambda '() (car pD361d@rhs*)) (list 'lambda (append pD362c@x* pD362d@x) (pD3620@f (cdr pD361c@lhs*) (cdr pD361d@rhs*)))))) pD362a@ls/false) (let ((pD3630@t pD3628@t)) (let ((pD3632@ls/false (pD30c5@syntax-dispatch pD3630@t 'any))) (if pD3632@ls/false (apply (lambda (pD3634@others) (pD31a5@syntax-violation '#f '"malformed bindings" pD3604@stx pD3634@others)) pD3632@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3630@t)))))))))))))) pD3612@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3610@t))))))))))) (set! pD4b7b@pD3085@let*-values-macro pD3085@let*-values-macro) (set! pD3087@trace-lambda-macro (lambda (pD363a@stx) (let ((pD363c@t pD363a@stx)) (let ((pD363e@ls/false (pD30c5@syntax-dispatch pD363c@t '(_ any each-any any . each-any)))) (if pD363e@ls/false (apply (lambda (pD3640@who pD3641@fmls pD3642@b pD3643@b*) (if (pD2ec6@valid-bound-ids? pD3641@fmls) (pD307b@bless (list 'make-traced-procedure (list 'quote pD3640@who) (cons 'lambda (cons pD3641@fmls (cons pD3642@b pD3643@b*))))) (pD307f@invalid-fmls-error pD363a@stx pD3641@fmls))) pD363e@ls/false) (let ((pD3648@t pD363c@t)) (let ((pD364a@ls/false (pD30c5@syntax-dispatch pD3648@t '(_ any #(each+ any () any) any . each-any)))) (if pD364a@ls/false (apply (lambda (pD364c@who pD364d@fmls pD364e@last pD364f@b pD3650@b*) (if (pD2ec6@valid-bound-ids? (cons pD364e@last pD364d@fmls)) (pD307b@bless (list 'make-traced-procedure (list 'quote pD364c@who) (cons 'lambda (cons (append pD364d@fmls pD364e@last) (cons pD364f@b pD3650@b*))))) (pD307f@invalid-fmls-error pD363a@stx (append pD364d@fmls pD364e@last)))) pD364a@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3648@t))))))))) (set! pD4b7c@pD3087@trace-lambda-macro pD3087@trace-lambda-macro) (set! pD3089@trace-define-macro (lambda (pD3656@stx) (let ((pD3658@t pD3656@stx)) (let ((pD365a@ls/false (pD30c5@syntax-dispatch pD3658@t '(_ (any . each-any) any . each-any)))) (if pD365a@ls/false (apply (lambda (pD365c@who pD365d@fmls pD365e@b pD365f@b*) (if (pD2ec6@valid-bound-ids? pD365d@fmls) (pD307b@bless (list 'define pD365c@who (list 'make-traced-procedure (list 'quote pD365c@who) (cons 'lambda (cons pD365d@fmls (cons pD365e@b pD365f@b*)))))) (pD307f@invalid-fmls-error pD3656@stx pD365d@fmls))) pD365a@ls/false) (let ((pD3664@t pD3658@t)) (let ((pD3666@ls/false (pD30c5@syntax-dispatch pD3664@t '(_ (any . #(each+ any () any)) any . each-any)))) (if pD3666@ls/false (apply (lambda (pD3668@who pD3669@fmls pD366a@last pD366b@b pD366c@b*) (if (pD2ec6@valid-bound-ids? (cons pD366a@last pD3669@fmls)) (pD307b@bless (list 'define pD3668@who (list 'make-traced-procedure (list 'quote pD3668@who) (cons 'lambda (cons (append pD3669@fmls pD366a@last) (cons pD366b@b pD366c@b*)))))) (pD307f@invalid-fmls-error pD3656@stx (append pD3669@fmls pD366a@last)))) pD3666@ls/false) (let ((pD3672@t pD3664@t)) (let ((pD3674@ls/false (pD30c5@syntax-dispatch pD3672@t '(_ any any)))) (if pD3674@ls/false (apply (lambda (pD3676@who pD3677@expr) (if (pD2ebe@id? pD3676@who) (pD307b@bless (list 'define pD3676@who (list 'let (list (list 'v pD3677@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote pD3676@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (pD31a5@syntax-violation '#f '"invalid name" pD3656@stx))) pD3674@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3672@t)))))))))))) (set! pD4b7d@pD3089@trace-define-macro pD3089@trace-define-macro) (set! pD308b@trace-define-syntax-macro (lambda (pD367a@stx) (let ((pD367c@t pD367a@stx)) (let ((pD367e@ls/false (pD30c5@syntax-dispatch pD367c@t '(_ any any)))) (if pD367e@ls/false (apply (lambda (pD3680@who pD3681@expr) (if (pD2ebe@id? pD3680@who) (pD307b@bless (list 'define-syntax pD3680@who (list 'make-traced-macro (list 'quote pD3680@who) pD3681@expr))) (pD31a5@syntax-violation '#f '"invalid name" pD367a@stx))) pD367e@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD367c@t)))))) (set! pD4b7e@pD308b@trace-define-syntax-macro pD308b@trace-define-syntax-macro) (set! pD308d@trace-let/rec-syntax (lambda (pD3684@who) (lambda (pD3686@stx) (let ((pD3688@t pD3686@stx)) (let ((pD368a@ls/false (pD30c5@syntax-dispatch pD3688@t '(_ #(each (any any)) any . each-any)))) (if pD368a@ls/false (apply (lambda (pD368c@lhs* pD368d@rhs* pD368e@b pD368f@b*) (if (pD2ec6@valid-bound-ids? pD368c@lhs*) (let ((pD3694@rhs* (map (lambda (pD3696@lhs pD3697@rhs) (list 'make-traced-macro (list 'quote pD3696@lhs) pD3697@rhs)) pD368c@lhs* pD368d@rhs*))) (pD307b@bless (cons pD3684@who (cons (map list pD368c@lhs* pD3694@rhs*) (cons pD368e@b pD368f@b*))))) (pD307f@invalid-fmls-error pD3686@stx pD368c@lhs*))) pD368a@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3688@t))))))) (set! pD4b7f@pD308d@trace-let/rec-syntax pD308d@trace-let/rec-syntax) (set! pD308f@trace-let-syntax-macro (pD308d@trace-let/rec-syntax 'let-syntax)) (set! pD4b80@pD308f@trace-let-syntax-macro pD308f@trace-let-syntax-macro) (set! pD3091@trace-letrec-syntax-macro (pD308d@trace-let/rec-syntax 'letrec-syntax)) (set! pD4b81@pD3091@trace-letrec-syntax-macro pD3091@trace-letrec-syntax-macro) (set! pD3093@guard-macro (lambda (pD369a@x) (let ((pD369d@gen-clauses '#f)) (begin (set! pD369d@gen-clauses (lambda (pD36b4@con pD36b5@outerk pD36b6@clause*) (let ((pD36bb@f '#f) (pD36bd@f* '#f)) (begin (set! pD36bb@f (lambda (pD36f4@x pD36f5@k) (let ((pD36f8@t pD36f4@x)) (let ((pD36fa@ls/false (pD30c5@syntax-dispatch pD36f8@t '(any #(scheme-id =>) any)))) (if pD36fa@ls/false (apply (lambda (pD36fc@e pD36fd@p) (let ((pD3700@t (gensym))) (list 'let (list (list pD3700@t pD36fc@e)) (list 'if pD3700@t (list pD36fd@p pD3700@t) pD36f5@k)))) pD36fa@ls/false) (let ((pD3702@t pD36f8@t)) (let ((pD3704@ls/false (pD30c5@syntax-dispatch pD3702@t '(any)))) (if pD3704@ls/false (apply (lambda (pD3706@e) (let ((pD3708@t (gensym))) (list 'let (list (list pD3708@t pD3706@e)) (list 'if pD3708@t pD3708@t pD36f5@k)))) pD3704@ls/false) (let ((pD370a@t pD3702@t)) (let ((pD370c@ls/false (pD30c5@syntax-dispatch pD370a@t '(any any . each-any)))) (if pD370c@ls/false (apply (lambda (pD370e@e pD370f@v pD3710@v*) (list 'if pD370e@e (cons 'begin (cons pD370f@v pD3710@v*)) pD36f5@k)) pD370c@ls/false) (let ((pD3714@t pD370a@t)) (let ((pD3716@ls/false (pD30c5@syntax-dispatch pD3714@t '_))) (if pD3716@ls/false (apply (lambda () (pD31a5@syntax-violation '#f '"invalid guard clause" pD36f4@x)) pD3716@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3714@t))))))))))))))) (set! pD36bd@f* (lambda (pD36ca@x*) (let ((pD36cc@t pD36ca@x*)) (let ((pD36ce@ls/false (pD30c5@syntax-dispatch pD36cc@t '()))) (if pD36ce@ls/false (apply (lambda () (let ((pD36d0@g (gensym))) (values (list pD36d0@g (list 'lambda '() (list 'raise-continuable pD36b4@con))) pD36d0@g))) pD36ce@ls/false) (let ((pD36d2@t pD36cc@t)) (let ((pD36d4@ls/false (pD30c5@syntax-dispatch pD36d2@t '((#(scheme-id else) any . each-any))))) (if pD36d4@ls/false (apply (lambda (pD36d6@e pD36d7@e*) (values (cons 'begin (cons pD36d6@e pD36d7@e*)) '#f)) pD36d4@ls/false) (let ((pD36da@t pD36d2@t)) (let ((pD36dc@ls/false (pD30c5@syntax-dispatch pD36da@t '(any . any)))) (if pD36dc@ls/false (apply (lambda (pD36de@cls pD36df@cls*) (call-with-values (lambda () (pD36bd@f* pD36df@cls*)) (lambda (pD36e6@pD36e3 pD36e7@pD36e5) (let ((pD36ea@g pD36e7@pD36e5) (pD36eb@e pD36e6@pD36e3)) (values (pD36bb@f pD36de@cls pD36eb@e) pD36ea@g))))) pD36dc@ls/false) (let ((pD36ee@t pD36da@t)) (let ((pD36f0@ls/false (pD30c5@syntax-dispatch pD36ee@t 'any))) (if pD36f0@ls/false (apply (lambda (pD36f2@others) (pD31a5@syntax-violation '#f '"invalid guard clause" pD36f2@others)) pD36f0@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD36ee@t))))))))))))))) (call-with-values (lambda () (pD36bd@f* pD36b6@clause*)) (lambda (pD36c2@pD36bf pD36c3@pD36c1) (let ((pD36c6@raisek pD36c3@pD36c1) (pD36c7@code pD36c2@pD36bf)) (if pD36c6@raisek (list (list 'call/cc (list 'lambda (list pD36c6@raisek) (list pD36b5@outerk (list 'lambda '() pD36c7@code))))) (list pD36b5@outerk (list 'lambda '() pD36c7@code)))))))))) (let ((pD369e@t pD369a@x)) (let ((pD36a0@ls/false (pD30c5@syntax-dispatch pD369e@t '(_ (any . each-any) any . each-any)))) (if (and pD36a0@ls/false (apply (lambda (pD36a2@con pD36a3@clause* pD36a4@b pD36a5@b*) (pD2ebe@id? pD36a2@con)) pD36a0@ls/false)) (apply (lambda (pD36aa@con pD36ab@clause* pD36ac@b pD36ad@b*) (let ((pD36b2@outerk (gensym))) (pD307b@bless (list (list 'call/cc (list 'lambda (list pD36b2@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list pD36aa@con) (pD369d@gen-clauses pD36aa@con pD36b2@outerk pD36ab@clause*)) (cons 'lambda (cons '() (cons pD36ac@b pD36ad@b*))))))))))) pD36a0@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD369e@t)))))))) (set! pD4b82@pD3093@guard-macro pD3093@guard-macro) (set! pD3095@define-enumeration-macro (lambda (pD3718@stx) (let ((pD371b@set? '#f) (pD371d@remove-dups '#f)) (begin (set! pD371b@set? (lambda (pD3734@x) (or (null? pD3734@x) (and (not (memq (car pD3734@x) (cdr pD3734@x))) (pD371b@set? (cdr pD3734@x)))))) (set! pD371d@remove-dups (lambda (pD3732@ls) (if (null? pD3732@ls) '() (cons (car pD3732@ls) (pD371d@remove-dups (remq (car pD3732@ls) (cdr pD3732@ls))))))) (let ((pD371e@t pD3718@stx)) (let ((pD3720@ls/false (pD30c5@syntax-dispatch pD371e@t '(_ any each-any any)))) (if (and pD3720@ls/false (apply (lambda (pD3722@name pD3723@id* pD3724@maker) (and (pD2ebe@id? pD3722@name) (pD2ebe@id? pD3724@maker) (for-all pD2ebe@id? pD3723@id*))) pD3720@ls/false)) (apply (lambda (pD3728@name pD3729@id* pD372a@maker) (let ((pD372e@name* (pD371d@remove-dups (pD31ab@syntax->datum pD3729@id*))) (pD372f@mk (gensym))) (pD307b@bless (list 'begin (list 'define pD372f@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote pD372e@name*)))) (list 'define-syntax pD3728@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote pD372e@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote pD3728@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax pD372a@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote pD372a@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote pD372e@name*)) (cons 'syntax-violation (cons (list 'quote pD372a@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons pD372f@mk '('(n* ...))))))))))))) pD3720@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD371e@t)))))))) (set! pD4b83@pD3095@define-enumeration-macro pD3095@define-enumeration-macro) (set! pD3097@time-macro (lambda (pD3736@stx) (let ((pD3738@t pD3736@stx)) (let ((pD373a@ls/false (pD30c5@syntax-dispatch pD3738@t '(_ any)))) (if pD373a@ls/false (apply (lambda (pD373c@expr) (pD307b@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() pD373c@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) pD373a@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3738@t)))))) (set! pD4b84@pD3097@time-macro pD3097@time-macro) (set! pD3099@delay-macro (lambda (pD373e@stx) (let ((pD3740@t pD373e@stx)) (let ((pD3742@ls/false (pD30c5@syntax-dispatch pD3740@t '(_ any)))) (if pD3742@ls/false (apply (lambda (pD3744@expr) (pD307b@bless (list 'make-promise (list 'lambda '() pD3744@expr)))) pD3742@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3740@t)))))) (set! pD4b85@pD3099@delay-macro pD3099@delay-macro) (set! pD309b@assert-macro (lambda (pD3746@stx) (let ((pD3748@t pD3746@stx)) (let ((pD374a@ls/false (pD30c5@syntax-dispatch pD3748@t '(_ any)))) (if pD374a@ls/false (apply (lambda (pD374c@expr) (let ((pD374e@pos (or (pD319d@expression-position pD3746@stx) (pD319d@expression-position pD374c@expr)))) (pD307b@bless (list 'let (list (list 'x pD374c@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote pD374c@expr) (list 'quote pD374e@pos))))))) pD374a@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3748@t)))))) (set! pD4b86@pD309b@assert-macro pD309b@assert-macro) (set! pD309d@endianness-macro (lambda (pD3750@stx) (let ((pD3752@t pD3750@stx)) (let ((pD3754@ls/false (pD30c5@syntax-dispatch pD3752@t '(_ any)))) (if pD3754@ls/false (apply (lambda (pD3756@e) (let ((pD3758@t (pD31ab@syntax->datum pD3756@e))) (if (memv pD3758@t '(little)) (pD307b@bless ''little) (if (memv pD3758@t '(big)) (pD307b@bless ''big) (pD31a5@syntax-violation '#f '"endianness must be big or little" pD3750@stx))))) pD3754@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3752@t)))))) (set! pD4b87@pD309d@endianness-macro pD309d@endianness-macro) (set! pD309f@identifier-syntax-macro (lambda (pD375a@stx) (let ((pD375c@t pD375a@stx)) (let ((pD375e@ls/false (pD30c5@syntax-dispatch pD375c@t '(_ any)))) (if pD375e@ls/false (apply (lambda (pD3760@expr) (pD307b@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax pD3760@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax pD3760@expr) '((syntax (e* ...)))))))))) pD375e@ls/false) (let ((pD3762@t pD375c@t)) (let ((pD3764@ls/false (pD30c5@syntax-dispatch pD3762@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and pD3764@ls/false (apply (lambda (pD3766@id1 pD3767@expr1 pD3768@id2 pD3769@expr2 pD376a@expr3) (and (pD2ebe@id? pD3766@id1) (pD2ebe@id? pD3768@id2) (pD2ebe@id? pD3769@expr2))) pD3764@ls/false)) (apply (lambda (pD3770@id1 pD3771@expr1 pD3772@id2 pD3773@expr2 pD3774@expr3) (pD307b@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax pD3771@expr1)) (list (list 'set! 'id pD3773@expr2) (list 'syntax pD3774@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons pD3771@expr1 '(e* ...))))))))) pD3764@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3762@t))))))))) (set! pD4b88@pD309f@identifier-syntax-macro pD309f@identifier-syntax-macro) (set! pD30a1@do-macro (lambda (pD377a@stx) (let ((pD377d@bind '#f)) (begin (set! pD377d@bind (lambda (pD3794@x) (let ((pD3796@t pD3794@x)) (let ((pD3798@ls/false (pD30c5@syntax-dispatch pD3796@t '(any any)))) (if pD3798@ls/false (apply (lambda (pD379a@x pD379b@init) (list pD379a@x pD379b@init pD379a@x)) pD3798@ls/false) (let ((pD379e@t pD3796@t)) (let ((pD37a0@ls/false (pD30c5@syntax-dispatch pD379e@t '(any any any)))) (if pD37a0@ls/false (apply (lambda (pD37a2@x pD37a3@init pD37a4@step) (list pD37a2@x pD37a3@init pD37a4@step)) pD37a0@ls/false) (let ((pD37a8@t pD379e@t)) (let ((pD37aa@ls/false (pD30c5@syntax-dispatch pD37a8@t '_))) (if pD37aa@ls/false (apply (lambda () (pD31a5@syntax-violation '#f '"invalid binding" pD377a@stx)) pD37aa@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD37a8@t)))))))))))) (let ((pD377e@t pD377a@stx)) (let ((pD3780@ls/false (pD30c5@syntax-dispatch pD377e@t '(_ each-any (any . each-any) . each-any)))) (if pD3780@ls/false (apply (lambda (pD3782@binding* pD3783@test pD3784@expr* pD3785@command*) (let ((pD378a@t (map pD377d@bind pD3782@binding*))) (let ((pD378c@ls/false (pD30c5@syntax-dispatch pD378a@t '#(each (any any any))))) (if pD378c@ls/false (apply (lambda (pD378e@x* pD378f@init* pD3790@step*) (if (pD2ec6@valid-bound-ids? pD378e@x*) (pD307b@bless (list 'letrec (list (list 'loop (list 'lambda pD378e@x* (list 'if pD3783@test (cons 'begin (cons '(if #f #f) pD3784@expr*)) (cons 'begin (append pD3785@command* (list (cons 'loop pD3790@step*)))))))) (cons 'loop pD378f@init*))) (pD31a5@syntax-violation '#f '"invalid bindings" pD377a@stx))) pD378c@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD378a@t))))) pD3780@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD377e@t)))))))) (set! pD4b89@pD30a1@do-macro pD30a1@do-macro) (set! pD30a3@let*-macro (lambda (pD37ac@stx) (let ((pD37ae@t pD37ac@stx)) (let ((pD37b0@ls/false (pD30c5@syntax-dispatch pD37ae@t '(_ #(each (any any)) any . each-any)))) (if (and pD37b0@ls/false (apply (lambda (pD37b2@lhs* pD37b3@rhs* pD37b4@b pD37b5@b*) (for-all pD2ebe@id? pD37b2@lhs*)) pD37b0@ls/false)) (apply (lambda (pD37ba@lhs* pD37bb@rhs* pD37bc@b pD37bd@b*) (pD307b@bless (let pD37c4@f ((pD37c2@x* (map list pD37ba@lhs* pD37bb@rhs*))) (if (null? pD37c2@x*) (cons 'let (cons '() (cons pD37bc@b pD37bd@b*))) (list 'let (list (car pD37c2@x*)) (pD37c4@f (cdr pD37c2@x*))))))) pD37b0@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD37ae@t)))))) (set! pD4b8a@pD30a3@let*-macro pD30a3@let*-macro) (set! pD30a5@or-macro (lambda (pD37c6@stx) (let ((pD37c8@t pD37c6@stx)) (let ((pD37ca@ls/false (pD30c5@syntax-dispatch pD37c8@t '(_)))) (if pD37ca@ls/false (apply (lambda () '#f) pD37ca@ls/false) (let ((pD37cc@t pD37c8@t)) (let ((pD37ce@ls/false (pD30c5@syntax-dispatch pD37cc@t '(_ any . each-any)))) (if pD37ce@ls/false (apply (lambda (pD37d0@e pD37d1@e*) (pD307b@bless (let pD37d8@f ((pD37d4@e pD37d0@e) (pD37d5@e* pD37d1@e*)) (if (null? pD37d5@e*) (list 'begin '#f pD37d4@e) (list 'let (list (list 't pD37d4@e)) (list 'if 't 't (pD37d8@f (car pD37d5@e*) (cdr pD37d5@e*)))))))) pD37ce@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD37cc@t))))))))) (set! pD4b8b@pD30a5@or-macro pD30a5@or-macro) (set! pD30a7@and-macro (lambda (pD37da@stx) (let ((pD37dc@t pD37da@stx)) (let ((pD37de@ls/false (pD30c5@syntax-dispatch pD37dc@t '(_)))) (if pD37de@ls/false (apply (lambda () '#t) pD37de@ls/false) (let ((pD37e0@t pD37dc@t)) (let ((pD37e2@ls/false (pD30c5@syntax-dispatch pD37e0@t '(_ any . each-any)))) (if pD37e2@ls/false (apply (lambda (pD37e4@e pD37e5@e*) (pD307b@bless (let pD37ec@f ((pD37e8@e pD37e4@e) (pD37e9@e* pD37e5@e*)) (if (null? pD37e9@e*) (list 'begin '#f pD37e8@e) (cons 'if (cons pD37e8@e (cons (pD37ec@f (car pD37e9@e*) (cdr pD37e9@e*)) '(#f)))))))) pD37e2@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD37e0@t))))))))) (set! pD4b8c@pD30a7@and-macro pD30a7@and-macro) (set! pD30a9@cond-macro (lambda (pD37ee@stx) (let ((pD37f0@t pD37ee@stx)) (let ((pD37f2@ls/false (pD30c5@syntax-dispatch pD37f0@t '(_ any . each-any)))) (if pD37f2@ls/false (apply (lambda (pD37f4@cls pD37f5@cls*) (pD307b@bless (let pD37fc@f ((pD37f8@cls pD37f4@cls) (pD37f9@cls* pD37f5@cls*)) (if (null? pD37f9@cls*) (let ((pD37fe@t pD37f8@cls)) (let ((pD3800@ls/false (pD30c5@syntax-dispatch pD37fe@t '(#(scheme-id else) any . each-any)))) (if pD3800@ls/false (apply (lambda (pD3802@e pD3803@e*) (cons 'begin (cons pD3802@e pD3803@e*))) pD3800@ls/false) (let ((pD3806@t pD37fe@t)) (let ((pD3808@ls/false (pD30c5@syntax-dispatch pD3806@t '(any #(scheme-id =>) any)))) (if pD3808@ls/false (apply (lambda (pD380a@e pD380b@p) (list 'let (list (list 't pD380a@e)) (list 'if 't (cons pD380b@p '(t))))) pD3808@ls/false) (let ((pD380e@t pD3806@t)) (let ((pD3810@ls/false (pD30c5@syntax-dispatch pD380e@t '(any)))) (if pD3810@ls/false (apply (lambda (pD3812@e) (cons 'or (cons pD3812@e '((if #f #f))))) pD3810@ls/false) (let ((pD3814@t pD380e@t)) (let ((pD3816@ls/false (pD30c5@syntax-dispatch pD3814@t '(any . each-any)))) (if pD3816@ls/false (apply (lambda (pD3818@e pD3819@e*) (list 'if pD3818@e (cons 'begin pD3819@e*))) pD3816@ls/false) (let ((pD381c@t pD3814@t)) (let ((pD381e@ls/false (pD30c5@syntax-dispatch pD381c@t '_))) (if pD381e@ls/false (apply (lambda () (pD31a5@syntax-violation '#f '"invalid last clause" pD37ee@stx)) pD381e@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD381c@t)))))))))))))))) (let ((pD3820@t pD37f8@cls)) (let ((pD3822@ls/false (pD30c5@syntax-dispatch pD3820@t '(#(scheme-id else) any . each-any)))) (if pD3822@ls/false (apply (lambda (pD3824@e pD3825@e*) (pD31a5@syntax-violation '#f '"incorrect position of keyword else" pD37ee@stx)) pD3822@ls/false) (let ((pD3828@t pD3820@t)) (let ((pD382a@ls/false (pD30c5@syntax-dispatch pD3828@t '(any #(scheme-id =>) any)))) (if pD382a@ls/false (apply (lambda (pD382c@e pD382d@p) (list 'let (list (list 't pD382c@e)) (list 'if 't (cons pD382d@p '(t)) (pD37fc@f (car pD37f9@cls*) (cdr pD37f9@cls*))))) pD382a@ls/false) (let ((pD3830@t pD3828@t)) (let ((pD3832@ls/false (pD30c5@syntax-dispatch pD3830@t '(any)))) (if pD3832@ls/false (apply (lambda (pD3834@e) (list 'or pD3834@e (pD37fc@f (car pD37f9@cls*) (cdr pD37f9@cls*)))) pD3832@ls/false) (let ((pD3836@t pD3830@t)) (let ((pD3838@ls/false (pD30c5@syntax-dispatch pD3836@t '(any . each-any)))) (if pD3838@ls/false (apply (lambda (pD383a@e pD383b@e*) (list 'if pD383a@e (cons 'begin pD383b@e*) (pD37fc@f (car pD37f9@cls*) (cdr pD37f9@cls*)))) pD3838@ls/false) (let ((pD383e@t pD3836@t)) (let ((pD3840@ls/false (pD30c5@syntax-dispatch pD383e@t '_))) (if pD3840@ls/false (apply (lambda () (pD31a5@syntax-violation '#f '"invalid last clause" pD37ee@stx)) pD3840@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD383e@t)))))))))))))))))))) pD37f2@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD37f0@t)))))) (set! pD4b8d@pD30a9@cond-macro pD30a9@cond-macro) (set! pD30ab@do-include (lambda (pD3842@stx pD3843@id pD3844@filename) (let ((pD3848@filename (pD2ed2@stx->datum pD3844@filename))) (begin (if (not (and (string? pD3848@filename) (pD2ebe@id? pD3843@id))) (pD31a5@syntax-violation '#f '"invalid syntax" pD3842@stx) (void)) (cons (pD307b@bless 'begin) (with-input-from-file pD3848@filename (lambda () (let pD384c@f ((pD384a@ls '())) (let ((pD384e@x (pD29fb@pD28cd@read-annotated))) (if (eof-object? pD384e@x) (reverse pD384a@ls) (pD384c@f (cons (pD2e9e@datum->stx pD3843@id pD384e@x) pD384a@ls)))))))))))) (set! pD4b8e@pD30ab@do-include pD30ab@do-include) (set! pD30ad@include-macro (lambda (pD3850@e) (let ((pD3852@t pD3850@e)) (let ((pD3854@ls/false (pD30c5@syntax-dispatch pD3852@t '(any any)))) (if pD3854@ls/false (apply (lambda (pD3856@id pD3857@filename) (pD30ab@do-include pD3850@e pD3856@id pD3857@filename)) pD3854@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3852@t)))))) (set! pD4b8f@pD30ad@include-macro pD30ad@include-macro) (set! pD30af@include-into-macro (lambda (pD385a@e) (let ((pD385c@t pD385a@e)) (let ((pD385e@ls/false (pD30c5@syntax-dispatch pD385c@t '(_ any any)))) (if pD385e@ls/false (apply (lambda (pD3860@id pD3861@filename) (pD30ab@do-include pD385a@e pD3860@id pD3861@filename)) pD385e@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD385c@t)))))) (set! pD4b90@pD30af@include-into-macro pD30af@include-into-macro) (set! pD30b1@syntax-rules-macro (lambda (pD3864@e) (let ((pD3866@t pD3864@e)) (let ((pD3868@ls/false (pD30c5@syntax-dispatch pD3866@t '(_ each-any . #(each (any any)))))) (if pD3868@ls/false (apply (lambda (pD386a@lits pD386b@pat* pD386c@tmp*) (begin (pD30cb@verify-literals pD386a@lits pD3864@e) (pD307b@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons pD386a@lits (map (lambda (pD3870@pat pD3871@tmp) (let ((pD3874@t pD3870@pat)) (let ((pD3876@ls/false (pD30c5@syntax-dispatch pD3874@t '(_ . any)))) (if pD3876@ls/false (apply (lambda (pD3878@rest) (list (cons 'g pD3878@rest) (list 'syntax pD3871@tmp))) pD3876@ls/false) (let ((pD387a@t pD3874@t)) (let ((pD387c@ls/false (pD30c5@syntax-dispatch pD387a@t '_))) (if pD387c@ls/false (apply (lambda () (pD31a5@syntax-violation '#f '"invalid syntax-rules pattern" pD3864@e pD3870@pat)) pD387c@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD387a@t)))))))) pD386b@pat* pD386c@tmp*)))))))) pD3868@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3866@t)))))) (set! pD4b91@pD30b1@syntax-rules-macro pD30b1@syntax-rules-macro) (set! pD30b3@quasiquote-macro (let ((pD387f@datum '#f) (pD389b@quasicons* '#f) (pD389d@quasicons '#f) (pD389f@quasiappend '#f) (pD38a1@quasivector '#f) (pD38a3@vquasi '#f) (pD38a5@quasi '#f)) (begin (set! pD387f@datum (lambda (pD3980@x) (list (pD304d@scheme-stx 'quote) (pD2ea6@mkstx pD3980@x '() '() '())))) (set! pD389b@quasicons* (lambda (pD3978@x pD3979@y) (let pD397e@f ((pD397c@x pD3978@x)) (if (null? pD397c@x) pD3979@y (pD389d@quasicons (car pD397c@x) (pD397e@f (cdr pD397c@x))))))) (set! pD389d@quasicons (lambda (pD3952@x pD3953@y) (let ((pD3956@t pD3953@y)) (let ((pD3958@ls/false (pD30c5@syntax-dispatch pD3956@t '(#(scheme-id quote) any)))) (if pD3958@ls/false (apply (lambda (pD395a@dy) (let ((pD395c@t pD3952@x)) (let ((pD395e@ls/false (pD30c5@syntax-dispatch pD395c@t '(#(scheme-id quote) any)))) (if pD395e@ls/false (apply (lambda (pD3960@dx) (list (pD304d@scheme-stx 'quote) (cons pD3960@dx pD395a@dy))) pD395e@ls/false) (let ((pD3962@t pD395c@t)) (let ((pD3964@ls/false (pD30c5@syntax-dispatch pD3962@t '_))) (if pD3964@ls/false (apply (lambda () (let ((pD3966@t pD395a@dy)) (let ((pD3968@ls/false (pD30c5@syntax-dispatch pD3966@t '()))) (if pD3968@ls/false (apply (lambda () (list (pD304d@scheme-stx 'list) pD3952@x)) pD3968@ls/false) (let ((pD396a@t pD3966@t)) (let ((pD396c@ls/false (pD30c5@syntax-dispatch pD396a@t '_))) (if pD396c@ls/false (apply (lambda () (list (pD304d@scheme-stx 'cons) pD3952@x pD3953@y)) pD396c@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD396a@t)))))))) pD3964@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3962@t)))))))) pD3958@ls/false) (let ((pD396e@t pD3956@t)) (let ((pD3970@ls/false (pD30c5@syntax-dispatch pD396e@t '(#(scheme-id list) . each-any)))) (if pD3970@ls/false (apply (lambda (pD3972@stuff) (cons* (pD304d@scheme-stx 'list) pD3952@x pD3972@stuff)) pD3970@ls/false) (let ((pD3974@t pD396e@t)) (let ((pD3976@ls/false (pD30c5@syntax-dispatch pD3974@t '_))) (if pD3976@ls/false (apply (lambda () (list (pD304d@scheme-stx 'cons) pD3952@x pD3953@y)) pD3976@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3974@t)))))))))))) (set! pD389f@quasiappend (lambda (pD3938@x pD3939@y) (let ((pD393c@ls (let pD3940@f ((pD393e@x pD3938@x)) (if (null? pD393e@x) (let ((pD3942@t pD3939@y)) (let ((pD3944@ls/false (pD30c5@syntax-dispatch pD3942@t '(#(scheme-id quote) ())))) (if pD3944@ls/false (apply (lambda () '()) pD3944@ls/false) (let ((pD3946@t pD3942@t)) (let ((pD3948@ls/false (pD30c5@syntax-dispatch pD3946@t '_))) (if pD3948@ls/false (apply (lambda () (list pD3939@y)) pD3948@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3946@t))))))) (let ((pD394a@t (car pD393e@x))) (let ((pD394c@ls/false (pD30c5@syntax-dispatch pD394a@t '(#(scheme-id quote) ())))) (if pD394c@ls/false (apply (lambda () (pD3940@f (cdr pD393e@x))) pD394c@ls/false) (let ((pD394e@t pD394a@t)) (let ((pD3950@ls/false (pD30c5@syntax-dispatch pD394e@t '_))) (if pD3950@ls/false (apply (lambda () (cons (car pD393e@x) (pD3940@f (cdr pD393e@x)))) pD3950@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD394e@t))))))))))) (if (null? pD393c@ls) (list (pD304d@scheme-stx 'quote) '()) (if (null? (cdr pD393c@ls)) (car pD393c@ls) (cons* (pD304d@scheme-stx 'append) pD393c@ls)))))) (set! pD38a1@quasivector (lambda (pD3906@x) (let ((pD3908@pat-x pD3906@x)) (let ((pD390a@t pD3908@pat-x)) (let ((pD390c@ls/false (pD30c5@syntax-dispatch pD390a@t '(#(scheme-id quote) each-any)))) (if pD390c@ls/false (apply (lambda (pD390e@x*) (list (pD304d@scheme-stx 'quote) (list->vector pD390e@x*))) pD390c@ls/false) (let ((pD3910@t pD390a@t)) (let ((pD3912@ls/false (pD30c5@syntax-dispatch pD3910@t '_))) (if pD3912@ls/false (apply (lambda () (let pD391a@f ((pD3914@x pD3906@x) (pD3915@k (lambda (pD3918@ls) (cons* (pD304d@scheme-stx 'vector) pD3918@ls)))) (let ((pD391c@t pD3914@x)) (let ((pD391e@ls/false (pD30c5@syntax-dispatch pD391c@t '(#(scheme-id quote) each-any)))) (if pD391e@ls/false (apply (lambda (pD3920@x*) (pD3915@k (map (lambda (pD3922@x) (list (pD304d@scheme-stx 'quote) pD3922@x)) pD3920@x*))) pD391e@ls/false) (let ((pD3924@t pD391c@t)) (let ((pD3926@ls/false (pD30c5@syntax-dispatch pD3924@t '(#(scheme-id list) . each-any)))) (if pD3926@ls/false (apply (lambda (pD3928@x*) (pD3915@k pD3928@x*)) pD3926@ls/false) (let ((pD392a@t pD3924@t)) (let ((pD392c@ls/false (pD30c5@syntax-dispatch pD392a@t '(#(scheme-id cons) any any)))) (if pD392c@ls/false (apply (lambda (pD392e@x pD392f@y) (pD391a@f pD392f@y (lambda (pD3932@ls) (pD3915@k (cons pD392e@x pD3932@ls))))) pD392c@ls/false) (let ((pD3934@t pD392a@t)) (let ((pD3936@ls/false (pD30c5@syntax-dispatch pD3934@t '_))) (if pD3936@ls/false (apply (lambda () (list (pD304d@scheme-stx 'list->vector) pD3908@pat-x)) pD3936@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3934@t))))))))))))))) pD3912@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3910@t)))))))))) (set! pD38a3@vquasi (lambda (pD38e4@p pD38e5@lev) (let ((pD38e8@t pD38e4@p)) (let ((pD38ea@ls/false (pD30c5@syntax-dispatch pD38e8@t '(any . any)))) (if pD38ea@ls/false (apply (lambda (pD38ec@p pD38ed@q) (let ((pD38f0@t pD38ec@p)) (let ((pD38f2@ls/false (pD30c5@syntax-dispatch pD38f0@t '(#(scheme-id unquote) . each-any)))) (if pD38f2@ls/false (apply (lambda (pD38f4@p) (if (= pD38e5@lev '0) (pD389b@quasicons* pD38f4@p (pD38a3@vquasi pD38ed@q pD38e5@lev)) (pD389d@quasicons (pD389d@quasicons (pD387f@datum 'unquote) (pD38a5@quasi pD38f4@p (- pD38e5@lev '1))) (pD38a3@vquasi pD38ed@q pD38e5@lev)))) pD38f2@ls/false) (let ((pD38f6@t pD38f0@t)) (let ((pD38f8@ls/false (pD30c5@syntax-dispatch pD38f6@t '(#(scheme-id unquote-splicing) . each-any)))) (if pD38f8@ls/false (apply (lambda (pD38fa@p) (if (= pD38e5@lev '0) (pD389f@quasiappend pD38fa@p (pD38a3@vquasi pD38ed@q pD38e5@lev)) (pD389d@quasicons (pD389d@quasicons (pD387f@datum 'unquote-splicing) (pD38a5@quasi pD38fa@p (- pD38e5@lev '1))) (pD38a3@vquasi pD38ed@q pD38e5@lev)))) pD38f8@ls/false) (let ((pD38fc@t pD38f6@t)) (let ((pD38fe@ls/false (pD30c5@syntax-dispatch pD38fc@t 'any))) (if pD38fe@ls/false (apply (lambda (pD3900@p) (pD389d@quasicons (pD38a5@quasi pD3900@p pD38e5@lev) (pD38a3@vquasi pD38ed@q pD38e5@lev))) pD38fe@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD38fc@t))))))))))) pD38ea@ls/false) (let ((pD3902@t pD38e8@t)) (let ((pD3904@ls/false (pD30c5@syntax-dispatch pD3902@t '()))) (if pD3904@ls/false (apply (lambda () (list (pD304d@scheme-stx 'quote) '())) pD3904@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3902@t))))))))) (set! pD38a5@quasi (lambda (pD38ae@p pD38af@lev) (let ((pD38b2@t pD38ae@p)) (let ((pD38b4@ls/false (pD30c5@syntax-dispatch pD38b2@t '(#(scheme-id unquote) any)))) (if pD38b4@ls/false (apply (lambda (pD38b6@p) (if (= pD38af@lev '0) pD38b6@p (pD389d@quasicons (pD387f@datum 'unquote) (pD38a5@quasi (list pD38b6@p) (- pD38af@lev '1))))) pD38b4@ls/false) (let ((pD38b8@t pD38b2@t)) (let ((pD38ba@ls/false (pD30c5@syntax-dispatch pD38b8@t '((#(scheme-id unquote) . each-any) . any)))) (if pD38ba@ls/false (apply (lambda (pD38bc@p pD38bd@q) (if (= pD38af@lev '0) (pD389b@quasicons* pD38bc@p (pD38a5@quasi pD38bd@q pD38af@lev)) (pD389d@quasicons (pD389d@quasicons (pD387f@datum 'unquote) (pD38a5@quasi pD38bc@p (- pD38af@lev '1))) (pD38a5@quasi pD38bd@q pD38af@lev)))) pD38ba@ls/false) (let ((pD38c0@t pD38b8@t)) (let ((pD38c2@ls/false (pD30c5@syntax-dispatch pD38c0@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if pD38c2@ls/false (apply (lambda (pD38c4@p pD38c5@q) (if (= pD38af@lev '0) (pD389f@quasiappend pD38c4@p (pD38a5@quasi pD38c5@q pD38af@lev)) (pD389d@quasicons (pD389d@quasicons (pD387f@datum 'unquote-splicing) (pD38a5@quasi pD38c4@p (- pD38af@lev '1))) (pD38a5@quasi pD38c5@q pD38af@lev)))) pD38c2@ls/false) (let ((pD38c8@t pD38c0@t)) (let ((pD38ca@ls/false (pD30c5@syntax-dispatch pD38c8@t '(#(scheme-id quasiquote) any)))) (if pD38ca@ls/false (apply (lambda (pD38cc@p) (pD389d@quasicons (pD387f@datum 'quasiquote) (pD38a5@quasi (list pD38cc@p) (+ pD38af@lev '1)))) pD38ca@ls/false) (let ((pD38ce@t pD38c8@t)) (let ((pD38d0@ls/false (pD30c5@syntax-dispatch pD38ce@t '(any . any)))) (if pD38d0@ls/false (apply (lambda (pD38d2@p pD38d3@q) (pD389d@quasicons (pD38a5@quasi pD38d2@p pD38af@lev) (pD38a5@quasi pD38d3@q pD38af@lev))) pD38d0@ls/false) (let ((pD38d6@t pD38ce@t)) (let ((pD38d8@ls/false (pD30c5@syntax-dispatch pD38d6@t '#(vector each-any)))) (if (and pD38d8@ls/false (apply (lambda (pD38da@x) (not (pD2e8a@stx? pD38da@x))) pD38d8@ls/false)) (apply (lambda (pD38dc@x) (pD38a1@quasivector (pD38a3@vquasi pD38dc@x pD38af@lev))) pD38d8@ls/false) (let ((pD38de@t pD38d6@t)) (let ((pD38e0@ls/false (pD30c5@syntax-dispatch pD38de@t 'any))) (if pD38e0@ls/false (apply (lambda (pD38e2@p) (list (pD304d@scheme-stx 'quote) pD38e2@p)) pD38e0@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD38de@t)))))))))))))))))))))))) (lambda (pD38a6@x) (let ((pD38a8@t pD38a6@x)) (let ((pD38aa@ls/false (pD30c5@syntax-dispatch pD38a8@t '(_ any)))) (if pD38aa@ls/false (apply (lambda (pD38ac@e) (pD38a5@quasi pD38ac@e '0)) pD38aa@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD38a8@t)))))))) (set! pD4b92@pD30b3@quasiquote-macro pD30b3@quasiquote-macro) (set! pD30b5@quasisyntax-macro (let ((pD3983@quasi '#f)) (begin (set! pD3983@quasi (lambda (pD399e@p pD399f@lev) (let ((pD39a2@t pD399e@p)) (let ((pD39a4@ls/false (pD30c5@syntax-dispatch pD39a2@t '(#(scheme-id unsyntax) any)))) (if pD39a4@ls/false (apply (lambda (pD39a6@p) (if (= pD399f@lev '0) (let ((pD39a8@g (gensym))) (values (list pD39a8@g) (list pD39a6@p) pD39a8@g)) (call-with-values (lambda () (pD3983@quasi pD39a6@p (- pD399f@lev '1))) (lambda (pD39b0@pD39ab pD39b1@pD39ad pD39b2@pD39af) (let ((pD39b6@p pD39b2@pD39af) (pD39b7@rhs* pD39b1@pD39ad) (pD39b8@lhs* pD39b0@pD39ab)) (values pD39b8@lhs* pD39b7@rhs* (list 'unsyntax pD39b6@p))))))) pD39a4@ls/false) (let ((pD39bc@t pD39a2@t)) (let ((pD39be@ls/false (pD30c5@syntax-dispatch pD39bc@t '#(scheme-id unsyntax)))) (if (and pD39be@ls/false (apply (lambda () (= pD399f@lev '0)) pD39be@ls/false)) (apply (lambda () (pD31a5@syntax-violation '#f '"incorrect use of unsyntax" pD399e@p)) pD39be@ls/false) (let ((pD39c0@t pD39bc@t)) (let ((pD39c2@ls/false (pD30c5@syntax-dispatch pD39c0@t '((#(scheme-id unsyntax) . each-any) . any)))) (if pD39c2@ls/false (apply (lambda (pD39c4@p* pD39c5@q) (call-with-values (lambda () (pD3983@quasi pD39c5@q pD399f@lev)) (lambda (pD39ce@pD39c9 pD39cf@pD39cb pD39d0@pD39cd) (let ((pD39d4@q pD39d0@pD39cd) (pD39d5@rhs* pD39cf@pD39cb) (pD39d6@lhs* pD39ce@pD39c9)) (if (= pD399f@lev '0) (let ((pD39da@g* (map (lambda (pD39dc@x) (gensym)) pD39c4@p*))) (values (append pD39da@g* pD39d6@lhs*) (append pD39c4@p* pD39d5@rhs*) (append pD39da@g* pD39d4@q))) (call-with-values (lambda () (pD3983@quasi pD39c4@p* (- pD399f@lev '1))) (lambda (pD39e4@pD39df pD39e5@pD39e1 pD39e6@pD39e3) (let ((pD39ea@p* pD39e6@pD39e3) (pD39eb@rhs2* pD39e5@pD39e1) (pD39ec@lhs2* pD39e4@pD39df)) (values (append pD39ec@lhs2* pD39d6@lhs*) (append pD39eb@rhs2* pD39d5@rhs*) (cons (cons 'unsyntax pD39ea@p*) pD39d4@q)))))))))) pD39c2@ls/false) (let ((pD39f0@t pD39c0@t)) (let ((pD39f2@ls/false (pD30c5@syntax-dispatch pD39f0@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if pD39f2@ls/false (apply (lambda (pD39f4@p* pD39f5@q) (call-with-values (lambda () (pD3983@quasi pD39f5@q pD399f@lev)) (lambda (pD39fe@pD39f9 pD39ff@pD39fb pD3a00@pD39fd) (let ((pD3a04@q pD3a00@pD39fd) (pD3a05@rhs* pD39ff@pD39fb) (pD3a06@lhs* pD39fe@pD39f9)) (if (= pD399f@lev '0) (let ((pD3a0a@g* (map (lambda (pD3a0c@x) (gensym)) pD39f4@p*))) (values (append (map (lambda (pD3a0e@g) (cons pD3a0e@g '(...))) pD3a0a@g*) pD3a06@lhs*) (append pD39f4@p* pD3a05@rhs*) (append (apply append (map (lambda (pD3a10@g) (cons pD3a10@g '(...))) pD3a0a@g*)) pD3a04@q))) (call-with-values (lambda () (pD3983@quasi pD39f4@p* (- pD399f@lev '1))) (lambda (pD3a18@pD3a13 pD3a19@pD3a15 pD3a1a@pD3a17) (let ((pD3a1e@p* pD3a1a@pD3a17) (pD3a1f@rhs2* pD3a19@pD3a15) (pD3a20@lhs2* pD3a18@pD3a13)) (values (append pD3a20@lhs2* pD3a06@lhs*) (append pD3a1f@rhs2* pD3a05@rhs*) (cons (cons 'unsyntax-splicing pD3a1e@p*) pD3a04@q)))))))))) pD39f2@ls/false) (let ((pD3a24@t pD39f0@t)) (let ((pD3a26@ls/false (pD30c5@syntax-dispatch pD3a24@t '#(scheme-id unsyntax-splicing)))) (if (and pD3a26@ls/false (apply (lambda () (= pD399f@lev '0)) pD3a26@ls/false)) (apply (lambda () (pD31a5@syntax-violation '#f '"incorrect use of unsyntax-splicing" pD399e@p)) pD3a26@ls/false) (let ((pD3a28@t pD3a24@t)) (let ((pD3a2a@ls/false (pD30c5@syntax-dispatch pD3a28@t '(#(scheme-id quasisyntax) any)))) (if pD3a2a@ls/false (apply (lambda (pD3a2c@p) (call-with-values (lambda () (pD3983@quasi pD3a2c@p (+ pD399f@lev '1))) (lambda (pD3a34@pD3a2f pD3a35@pD3a31 pD3a36@pD3a33) (let ((pD3a3a@p pD3a36@pD3a33) (pD3a3b@rhs* pD3a35@pD3a31) (pD3a3c@lhs* pD3a34@pD3a2f)) (values pD3a3c@lhs* pD3a3b@rhs* (list 'quasisyntax pD3a3a@p)))))) pD3a2a@ls/false) (let ((pD3a40@t pD3a28@t)) (let ((pD3a42@ls/false (pD30c5@syntax-dispatch pD3a40@t '(any . any)))) (if pD3a42@ls/false (apply (lambda (pD3a44@p pD3a45@q) (call-with-values (lambda () (pD3983@quasi pD3a44@p pD399f@lev)) (lambda (pD3a54@pD3a49 pD3a55@pD3a4b pD3a56@pD3a4d) (call-with-values (lambda () (pD3983@quasi pD3a45@q pD399f@lev)) (lambda (pD3a5a@pD3a4f pD3a5b@pD3a51 pD3a5c@pD3a53) (let ((pD3a60@q pD3a5c@pD3a53) (pD3a61@rhs2* pD3a5b@pD3a51) (pD3a62@lhs2* pD3a5a@pD3a4f) (pD3a63@p pD3a56@pD3a4d) (pD3a64@rhs* pD3a55@pD3a4b) (pD3a65@lhs* pD3a54@pD3a49)) (values (append pD3a62@lhs2* pD3a65@lhs*) (append pD3a61@rhs2* pD3a64@rhs*) (cons pD3a63@p pD3a60@q)))))))) pD3a42@ls/false) (let ((pD3a6c@t pD3a40@t)) (let ((pD3a6e@ls/false (pD30c5@syntax-dispatch pD3a6c@t '#(vector each-any)))) (if pD3a6e@ls/false (apply (lambda (pD3a70@x*) (call-with-values (lambda () (pD3983@quasi pD3a70@x* pD399f@lev)) (lambda (pD3a78@pD3a73 pD3a79@pD3a75 pD3a7a@pD3a77) (let ((pD3a7e@x* pD3a7a@pD3a77) (pD3a7f@rhs* pD3a79@pD3a75) (pD3a80@lhs* pD3a78@pD3a73)) (values pD3a80@lhs* pD3a7f@rhs* (list->vector pD3a7e@x*)))))) pD3a6e@ls/false) (let ((pD3a84@t pD3a6c@t)) (let ((pD3a86@ls/false (pD30c5@syntax-dispatch pD3a84@t '_))) (if pD3a86@ls/false (apply (lambda () (values '() '() pD399e@p)) pD3a86@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3a84@t)))))))))))))))))))))))))))))) (lambda (pD3984@x) (let ((pD3986@t pD3984@x)) (let ((pD3988@ls/false (pD30c5@syntax-dispatch pD3986@t '(_ any)))) (if pD3988@ls/false (apply (lambda (pD398a@e) (call-with-values (lambda () (pD3983@quasi pD398a@e '0)) (lambda (pD3992@pD398d pD3993@pD398f pD3994@pD3991) (let ((pD3998@v pD3994@pD3991) (pD3999@rhs* pD3993@pD398f) (pD399a@lhs* pD3992@pD398d)) (pD307b@bless (list 'syntax-case (cons 'list pD3999@rhs*) '() (list pD399a@lhs* (list 'syntax pD3998@v)))))))) pD3988@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3986@t)))))))) (set! pD4b93@pD30b5@quasisyntax-macro pD30b5@quasisyntax-macro) (set! pD30b7@define-struct-macro (lambda (pD3a88@stx) (pD31a5@syntax-violation '#f '"define-struct not supported" pD3a88@stx))) (set! pD4b94@pD30b7@define-struct-macro pD30b7@define-struct-macro) (set! pD30b9@define-record-type-macro (lambda (pD3a8a@x) (let ((pD3a8d@id '#f) (pD3a8f@get-record-name '#f) (pD3a91@get-record-constructor-name '#f) (pD3a93@get-record-predicate-name '#f) (pD3a95@get-clause '#f) (pD3a97@foo-rtd-code '#f) (pD3a99@parent-rtd-code '#f) (pD3a9b@parent-rcd-code '#f) (pD3a9d@foo-rcd-code '#f) (pD3a9f@get-protocol-code '#f) (pD3aa1@get-fields '#f) (pD3aa3@get-mutator-indices '#f) (pD3aa5@get-mutators '#f) (pD3aa7@get-accessors '#f) (pD3aa9@enumerate '#f) (pD3aab@do-define-record '#f) (pD3aad@verify-clauses '#f)) (begin (set! pD3a8d@id (lambda (pD3c80@ctxt . pD3c82@str*) (pD31a9@datum->syntax pD3c80@ctxt (string->symbol (apply string-append (map (lambda (pD3c84@x) (if (symbol? pD3c84@x) (symbol->string pD3c84@x) (if (string? pD3c84@x) pD3c84@x (assertion-violation 'define-record-type '"BUG")))) pD3c82@str*)))))) (set! pD3a8f@get-record-name (lambda (pD3c6e@spec) (let ((pD3c70@t pD3c6e@spec)) (let ((pD3c72@ls/false (pD30c5@syntax-dispatch pD3c70@t '(any any any)))) (if pD3c72@ls/false (apply (lambda (pD3c74@foo pD3c75@make-foo pD3c76@foo?) pD3c74@foo) pD3c72@ls/false) (let ((pD3c7a@t pD3c70@t)) (let ((pD3c7c@ls/false (pD30c5@syntax-dispatch pD3c7a@t 'any))) (if pD3c7c@ls/false (apply (lambda (pD3c7e@foo) pD3c7e@foo) pD3c7c@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3c7a@t))))))))) (set! pD3a91@get-record-constructor-name (lambda (pD3c5a@spec) (let ((pD3c5c@t pD3c5a@spec)) (let ((pD3c5e@ls/false (pD30c5@syntax-dispatch pD3c5c@t '(any any any)))) (if pD3c5e@ls/false (apply (lambda (pD3c60@foo pD3c61@make-foo pD3c62@foo?) pD3c61@make-foo) pD3c5e@ls/false) (let ((pD3c66@t pD3c5c@t)) (let ((pD3c68@ls/false (pD30c5@syntax-dispatch pD3c66@t 'any))) (if (and pD3c68@ls/false (apply (lambda (pD3c6a@foo) (pD2ebe@id? pD3c6a@foo)) pD3c68@ls/false)) (apply (lambda (pD3c6c@foo) (pD3a8d@id pD3c6c@foo '"make-" (pD2ed2@stx->datum pD3c6c@foo))) pD3c68@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3c66@t))))))))) (set! pD3a93@get-record-predicate-name (lambda (pD3c46@spec) (let ((pD3c48@t pD3c46@spec)) (let ((pD3c4a@ls/false (pD30c5@syntax-dispatch pD3c48@t '(any any any)))) (if pD3c4a@ls/false (apply (lambda (pD3c4c@foo pD3c4d@make-foo pD3c4e@foo?) pD3c4e@foo?) pD3c4a@ls/false) (let ((pD3c52@t pD3c48@t)) (let ((pD3c54@ls/false (pD30c5@syntax-dispatch pD3c52@t 'any))) (if (and pD3c54@ls/false (apply (lambda (pD3c56@foo) (pD2ebe@id? pD3c56@foo)) pD3c54@ls/false)) (apply (lambda (pD3c58@foo) (pD3a8d@id pD3c58@foo (pD2ed2@stx->datum pD3c58@foo) '"?")) pD3c54@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3c52@t))))))))) (set! pD3a95@get-clause (lambda (pD3c34@id pD3c35@ls) (let ((pD3c38@t pD3c35@ls)) (let ((pD3c3a@ls/false (pD30c5@syntax-dispatch pD3c38@t '()))) (if pD3c3a@ls/false (apply (lambda () '#f) pD3c3a@ls/false) (let ((pD3c3c@t pD3c38@t)) (let ((pD3c3e@ls/false (pD30c5@syntax-dispatch pD3c3c@t '((any . any) . any)))) (if pD3c3e@ls/false (apply (lambda (pD3c40@x pD3c41@rest pD3c42@ls) (if (pD2ec4@free-id=? (pD307b@bless pD3c34@id) pD3c40@x) (cons pD3c40@x pD3c41@rest) (pD3a95@get-clause pD3c34@id pD3c42@ls))) pD3c3e@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3c3c@t))))))))) (set! pD3a97@foo-rtd-code (lambda (pD3be2@name pD3be3@clause* pD3be4@parent-rtd-code) (let ((pD3be9@convert-field-spec* '#f)) (begin (set! pD3be9@convert-field-spec* (lambda (pD3c1a@ls) (list->vector (map (lambda (pD3c1c@x) (let ((pD3c1e@t pD3c1c@x)) (let ((pD3c20@ls/false (pD30c5@syntax-dispatch pD3c1e@t '(#(scheme-id mutable) any . any)))) (if pD3c20@ls/false (apply (lambda (pD3c22@name pD3c23@rest) (list 'mutable pD3c22@name)) pD3c20@ls/false) (let ((pD3c26@t pD3c1e@t)) (let ((pD3c28@ls/false (pD30c5@syntax-dispatch pD3c26@t '(#(scheme-id immutable) any . any)))) (if pD3c28@ls/false (apply (lambda (pD3c2a@name pD3c2b@rest) (list 'immutable pD3c2a@name)) pD3c28@ls/false) (let ((pD3c2e@t pD3c26@t)) (let ((pD3c30@ls/false (pD30c5@syntax-dispatch pD3c2e@t 'any))) (if pD3c30@ls/false (apply (lambda (pD3c32@name) (list 'immutable pD3c32@name)) pD3c30@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3c2e@t))))))))))) pD3c1a@ls)))) (let ((pD3bea@uid-code (let ((pD3bf2@t (pD3a95@get-clause 'nongenerative pD3be3@clause*))) (let ((pD3bf4@ls/false (pD30c5@syntax-dispatch pD3bf2@t '(_)))) (if pD3bf4@ls/false (apply (lambda () (list 'quote (gensym))) pD3bf4@ls/false) (let ((pD3bf6@t pD3bf2@t)) (let ((pD3bf8@ls/false (pD30c5@syntax-dispatch pD3bf6@t '(_ any)))) (if pD3bf8@ls/false (apply (lambda (pD3bfa@uid) (list 'quote pD3bfa@uid)) pD3bf8@ls/false) (let ((pD3bfc@t pD3bf6@t)) (let ((pD3bfe@ls/false (pD30c5@syntax-dispatch pD3bfc@t '_))) (if pD3bfe@ls/false (apply (lambda () '#f) pD3bfe@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3bfc@t))))))))))) (pD3beb@sealed? (let ((pD3c00@t (pD3a95@get-clause 'sealed pD3be3@clause*))) (let ((pD3c02@ls/false (pD30c5@syntax-dispatch pD3c00@t '(_ #(atom #t))))) (if pD3c02@ls/false (apply (lambda () '#t) pD3c02@ls/false) (let ((pD3c04@t pD3c00@t)) (let ((pD3c06@ls/false (pD30c5@syntax-dispatch pD3c04@t '_))) (if pD3c06@ls/false (apply (lambda () '#f) pD3c06@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3c04@t)))))))) (pD3bec@opaque? (let ((pD3c08@t (pD3a95@get-clause 'opaque pD3be3@clause*))) (let ((pD3c0a@ls/false (pD30c5@syntax-dispatch pD3c08@t '(_ #(atom #t))))) (if pD3c0a@ls/false (apply (lambda () '#t) pD3c0a@ls/false) (let ((pD3c0c@t pD3c08@t)) (let ((pD3c0e@ls/false (pD30c5@syntax-dispatch pD3c0c@t '_))) (if pD3c0e@ls/false (apply (lambda () '#f) pD3c0e@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3c0c@t)))))))) (pD3bed@fields (let ((pD3c10@t (pD3a95@get-clause 'fields pD3be3@clause*))) (let ((pD3c12@ls/false (pD30c5@syntax-dispatch pD3c10@t '(_ . each-any)))) (if pD3c12@ls/false (apply (lambda (pD3c14@field-spec*) (list 'quote (pD3be9@convert-field-spec* pD3c14@field-spec*))) pD3c12@ls/false) (let ((pD3c16@t pD3c10@t)) (let ((pD3c18@ls/false (pD30c5@syntax-dispatch pD3c16@t '_))) (if pD3c18@ls/false (apply (lambda () ''#()) pD3c18@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3c16@t))))))))) (pD307b@bless (list 'make-record-type-descriptor (list 'quote pD3be2@name) pD3be4@parent-rtd-code pD3bea@uid-code pD3beb@sealed? pD3bec@opaque? pD3bed@fields))))))) (set! pD3a99@parent-rtd-code (lambda (pD3bca@clause*) (let ((pD3bcc@t (pD3a95@get-clause 'parent pD3bca@clause*))) (let ((pD3bce@ls/false (pD30c5@syntax-dispatch pD3bcc@t '(_ any)))) (if pD3bce@ls/false (apply (lambda (pD3bd0@name) (list 'record-type-descriptor pD3bd0@name)) pD3bce@ls/false) (let ((pD3bd2@t pD3bcc@t)) (let ((pD3bd4@ls/false (pD30c5@syntax-dispatch pD3bd2@t '#(atom #f)))) (if pD3bd4@ls/false (apply (lambda () (let ((pD3bd6@t (pD3a95@get-clause 'parent-rtd pD3bca@clause*))) (let ((pD3bd8@ls/false (pD30c5@syntax-dispatch pD3bd6@t '(_ any any)))) (if pD3bd8@ls/false (apply (lambda (pD3bda@rtd pD3bdb@rcd) pD3bda@rtd) pD3bd8@ls/false) (let ((pD3bde@t pD3bd6@t)) (let ((pD3be0@ls/false (pD30c5@syntax-dispatch pD3bde@t '#(atom #f)))) (if pD3be0@ls/false (apply (lambda () '#f) pD3be0@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3bde@t)))))))) pD3bd4@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3bd2@t))))))))) (set! pD3a9b@parent-rcd-code (lambda (pD3bb2@clause*) (let ((pD3bb4@t (pD3a95@get-clause 'parent pD3bb2@clause*))) (let ((pD3bb6@ls/false (pD30c5@syntax-dispatch pD3bb4@t '(_ any)))) (if pD3bb6@ls/false (apply (lambda (pD3bb8@name) (list 'record-constructor-descriptor pD3bb8@name)) pD3bb6@ls/false) (let ((pD3bba@t pD3bb4@t)) (let ((pD3bbc@ls/false (pD30c5@syntax-dispatch pD3bba@t '#(atom #f)))) (if pD3bbc@ls/false (apply (lambda () (let ((pD3bbe@t (pD3a95@get-clause 'parent-rtd pD3bb2@clause*))) (let ((pD3bc0@ls/false (pD30c5@syntax-dispatch pD3bbe@t '(_ any any)))) (if pD3bc0@ls/false (apply (lambda (pD3bc2@rtd pD3bc3@rcd) pD3bc3@rcd) pD3bc0@ls/false) (let ((pD3bc6@t pD3bbe@t)) (let ((pD3bc8@ls/false (pD30c5@syntax-dispatch pD3bc6@t '#(atom #f)))) (if pD3bc8@ls/false (apply (lambda () '#f) pD3bc8@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3bc6@t)))))))) pD3bbc@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3bba@t))))))))) (set! pD3a9d@foo-rcd-code (lambda (pD3baa@clause* pD3bab@foo-rtd pD3bac@protocol pD3bad@parent-rcd-code) (list 'make-record-constructor-descriptor pD3bab@foo-rtd pD3bad@parent-rcd-code pD3bac@protocol))) (set! pD3a9f@get-protocol-code (lambda (pD3b9e@clause*) (let ((pD3ba0@t (pD3a95@get-clause 'protocol pD3b9e@clause*))) (let ((pD3ba2@ls/false (pD30c5@syntax-dispatch pD3ba0@t '(_ any)))) (if pD3ba2@ls/false (apply (lambda (pD3ba4@expr) pD3ba4@expr) pD3ba2@ls/false) (let ((pD3ba6@t pD3ba0@t)) (let ((pD3ba8@ls/false (pD30c5@syntax-dispatch pD3ba6@t '_))) (if pD3ba8@ls/false (apply (lambda () '#f) pD3ba8@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3ba6@t))))))))) (set! pD3aa1@get-fields (lambda (pD3b8c@clause*) (let ((pD3b8e@t pD3b8c@clause*)) (let ((pD3b90@ls/false (pD30c5@syntax-dispatch pD3b8e@t '()))) (if pD3b90@ls/false (apply (lambda () '()) pD3b90@ls/false) (let ((pD3b92@t pD3b8e@t)) (let ((pD3b94@ls/false (pD30c5@syntax-dispatch pD3b92@t '((#(scheme-id fields) . each-any) . _)))) (if pD3b94@ls/false (apply (lambda (pD3b96@f*) pD3b96@f*) pD3b94@ls/false) (let ((pD3b98@t pD3b92@t)) (let ((pD3b9a@ls/false (pD30c5@syntax-dispatch pD3b98@t '(_ . any)))) (if pD3b9a@ls/false (apply (lambda (pD3b9c@rest) (pD3aa1@get-fields pD3b9c@rest)) pD3b9a@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3b98@t)))))))))))) (set! pD3aa3@get-mutator-indices (lambda (pD3b74@fields) (let pD3b7a@f ((pD3b76@fields pD3b74@fields) (pD3b77@i '0)) (let ((pD3b7c@t pD3b76@fields)) (let ((pD3b7e@ls/false (pD30c5@syntax-dispatch pD3b7c@t '()))) (if pD3b7e@ls/false (apply (lambda () '()) pD3b7e@ls/false) (let ((pD3b80@t pD3b7c@t)) (let ((pD3b82@ls/false (pD30c5@syntax-dispatch pD3b80@t '((#(scheme-id mutable) . _) . any)))) (if pD3b82@ls/false (apply (lambda (pD3b84@rest) (cons pD3b77@i (pD3b7a@f pD3b84@rest (+ pD3b77@i '1)))) pD3b82@ls/false) (let ((pD3b86@t pD3b80@t)) (let ((pD3b88@ls/false (pD30c5@syntax-dispatch pD3b86@t '(_ . any)))) (if pD3b88@ls/false (apply (lambda (pD3b8a@rest) (pD3b7a@f pD3b8a@rest (+ pD3b77@i '1))) pD3b88@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3b86@t))))))))))))) (set! pD3aa5@get-mutators (lambda (pD3b4a@foo pD3b4b@fields) (let ((pD3b4f@gen-name '#f)) (begin (set! pD3b4f@gen-name (lambda (pD3b72@x) (pD31a9@datum->syntax pD3b4a@foo (string->symbol (string-append (symbol->string (pD31ab@syntax->datum pD3b4a@foo)) '"-" (symbol->string (pD31ab@syntax->datum pD3b72@x)) '"-set!"))))) (let pD3b52@f ((pD3b50@fields pD3b4b@fields)) (let ((pD3b54@t pD3b50@fields)) (let ((pD3b56@ls/false (pD30c5@syntax-dispatch pD3b54@t '()))) (if pD3b56@ls/false (apply (lambda () '()) pD3b56@ls/false) (let ((pD3b58@t pD3b54@t)) (let ((pD3b5a@ls/false (pD30c5@syntax-dispatch pD3b58@t '((#(scheme-id mutable) any any any) . any)))) (if pD3b5a@ls/false (apply (lambda (pD3b5c@name pD3b5d@accessor pD3b5e@mutator pD3b5f@rest) (cons pD3b5e@mutator (pD3b52@f pD3b5f@rest))) pD3b5a@ls/false) (let ((pD3b64@t pD3b58@t)) (let ((pD3b66@ls/false (pD30c5@syntax-dispatch pD3b64@t '((#(scheme-id mutable) any) . any)))) (if pD3b66@ls/false (apply (lambda (pD3b68@name pD3b69@rest) (cons (pD3b4f@gen-name pD3b68@name) (pD3b52@f pD3b69@rest))) pD3b66@ls/false) (let ((pD3b6c@t pD3b64@t)) (let ((pD3b6e@ls/false (pD30c5@syntax-dispatch pD3b6c@t '(_ . any)))) (if pD3b6e@ls/false (apply (lambda (pD3b70@rest) (pD3b52@f pD3b70@rest)) pD3b6e@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3b6c@t)))))))))))))))))) (set! pD3aa7@get-accessors (lambda (pD3b06@foo pD3b07@fields) (let ((pD3b0b@gen-name '#f)) (begin (set! pD3b0b@gen-name (lambda (pD3b48@x) (pD31a9@datum->syntax pD3b06@foo (string->symbol (string-append (symbol->string (pD31ab@syntax->datum pD3b06@foo)) '"-" (symbol->string (pD31ab@syntax->datum pD3b48@x))))))) (map (lambda (pD3b0c@field) (let ((pD3b0e@t pD3b0c@field)) (let ((pD3b10@ls/false (pD30c5@syntax-dispatch pD3b0e@t '(#(scheme-id mutable) any any any)))) (if (and pD3b10@ls/false (apply (lambda (pD3b12@name pD3b13@accessor pD3b14@mutator) (pD2ebe@id? pD3b13@accessor)) pD3b10@ls/false)) (apply (lambda (pD3b18@name pD3b19@accessor pD3b1a@mutator) pD3b19@accessor) pD3b10@ls/false) (let ((pD3b1e@t pD3b0e@t)) (let ((pD3b20@ls/false (pD30c5@syntax-dispatch pD3b1e@t '(#(scheme-id immutable) any any)))) (if (and pD3b20@ls/false (apply (lambda (pD3b22@name pD3b23@accessor) (pD2ebe@id? pD3b23@accessor)) pD3b20@ls/false)) (apply (lambda (pD3b26@name pD3b27@accessor) pD3b27@accessor) pD3b20@ls/false) (let ((pD3b2a@t pD3b1e@t)) (let ((pD3b2c@ls/false (pD30c5@syntax-dispatch pD3b2a@t '(#(scheme-id mutable) any)))) (if (and pD3b2c@ls/false (apply (lambda (pD3b2e@name) (pD2ebe@id? pD3b2e@name)) pD3b2c@ls/false)) (apply (lambda (pD3b30@name) (pD3b0b@gen-name pD3b30@name)) pD3b2c@ls/false) (let ((pD3b32@t pD3b2a@t)) (let ((pD3b34@ls/false (pD30c5@syntax-dispatch pD3b32@t '(#(scheme-id immutable) any)))) (if (and pD3b34@ls/false (apply (lambda (pD3b36@name) (pD2ebe@id? pD3b36@name)) pD3b34@ls/false)) (apply (lambda (pD3b38@name) (pD3b0b@gen-name pD3b38@name)) pD3b34@ls/false) (let ((pD3b3a@t pD3b32@t)) (let ((pD3b3c@ls/false (pD30c5@syntax-dispatch pD3b3a@t 'any))) (if (and pD3b3c@ls/false (apply (lambda (pD3b3e@name) (pD2ebe@id? pD3b3e@name)) pD3b3c@ls/false)) (apply (lambda (pD3b40@name) (pD3b0b@gen-name pD3b40@name)) pD3b3c@ls/false) (let ((pD3b42@t pD3b3a@t)) (let ((pD3b44@ls/false (pD30c5@syntax-dispatch pD3b42@t 'any))) (if pD3b44@ls/false (apply (lambda (pD3b46@others) (pD31a5@syntax-violation '#f '"invalid field spec" pD3b0c@field)) pD3b44@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3b42@t)))))))))))))))))))) pD3b07@fields))))) (set! pD3aa9@enumerate (lambda (pD3afe@ls) (let pD3b04@f ((pD3b00@ls pD3afe@ls) (pD3b01@i '0)) (if (null? pD3b00@ls) '() (cons pD3b01@i (pD3b04@f (cdr pD3b00@ls) (+ pD3b01@i '1))))))) (set! pD3aab@do-define-record (lambda (pD3ad6@namespec pD3ad7@clause*) (let ((pD3ada@foo (pD3a8f@get-record-name pD3ad6@namespec))) (let ((pD3adc@foo-rtd (gensym))) (let ((pD3ade@foo-rcd (gensym))) (let ((pD3ae0@protocol (gensym))) (let ((pD3ae2@make-foo (pD3a91@get-record-constructor-name pD3ad6@namespec))) (let ((pD3ae4@fields (pD3aa1@get-fields pD3ad7@clause*))) (let ((pD3ae6@idx* (pD3aa9@enumerate pD3ae4@fields))) (let ((pD3ae8@foo-x* (pD3aa7@get-accessors pD3ada@foo pD3ae4@fields))) (let ((pD3aea@set-foo-x!* (pD3aa5@get-mutators pD3ada@foo pD3ae4@fields))) (let ((pD3aec@set-foo-idx* (pD3aa3@get-mutator-indices pD3ae4@fields))) (let ((pD3aee@foo? (pD3a93@get-record-predicate-name pD3ad6@namespec))) (let ((pD3af0@foo-rtd-code (pD3a97@foo-rtd-code pD3ada@foo pD3ad7@clause* (pD3a99@parent-rtd-code pD3ad7@clause*)))) (let ((pD3af2@foo-rcd-code (pD3a9d@foo-rcd-code pD3ad7@clause* pD3adc@foo-rtd pD3ae0@protocol (pD3a9b@parent-rcd-code pD3ad7@clause*)))) (let ((pD3af4@protocol-code (pD3a9f@get-protocol-code pD3ad7@clause*))) (pD307b@bless (cons 'begin (cons (list 'define pD3adc@foo-rtd pD3af0@foo-rtd-code) (cons (list 'define pD3ae0@protocol pD3af4@protocol-code) (cons (list 'define pD3ade@foo-rcd pD3af2@foo-rcd-code) (cons (list 'define-syntax pD3ada@foo (list 'list ''$rtd (list 'syntax pD3adc@foo-rtd) (list 'syntax pD3ade@foo-rcd))) (cons (list 'define pD3aee@foo? (list 'record-predicate pD3adc@foo-rtd)) (cons (list 'define pD3ae2@make-foo (list 'record-constructor pD3ade@foo-rcd)) (append (map (lambda (pD3af6@foo-x pD3af7@idx) (list 'define pD3af6@foo-x (list 'record-accessor pD3adc@foo-rtd pD3af7@idx))) pD3ae8@foo-x* pD3ae6@idx*) (map (lambda (pD3afa@set-foo-x! pD3afb@idx) (list 'define pD3afa@set-foo-x! (list 'record-mutator pD3adc@foo-rtd pD3afb@idx))) pD3aea@set-foo-x!* pD3aec@set-foo-idx*)))))))))))))))))))))))))) (set! pD3aad@verify-clauses (lambda (pD3ab6@x pD3ab7@cls*) (let ((pD3abb@valid-kwds '#f) (pD3abd@free-id-member? '#f)) (begin (set! pD3abb@valid-kwds (map pD307b@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! pD3abd@free-id-member? (lambda (pD3ad2@x pD3ad3@ls) (and (pair? pD3ad3@ls) (or (pD2ec4@free-id=? pD3ad2@x (car pD3ad3@ls)) (pD3abd@free-id-member? pD3ad2@x (cdr pD3ad3@ls)))))) (let pD3ac2@f ((pD3abe@cls* pD3ab7@cls*) (pD3abf@seen* '())) (if (not (null? pD3abe@cls*)) (let ((pD3ac4@t (car pD3abe@cls*))) (let ((pD3ac6@ls/false (pD30c5@syntax-dispatch pD3ac4@t '(any . any)))) (if pD3ac6@ls/false (apply (lambda (pD3ac8@kwd pD3ac9@rest) (if (or (not (pD2ebe@id? pD3ac8@kwd)) (not (pD3abd@free-id-member? pD3ac8@kwd pD3abb@valid-kwds))) (pD31a5@syntax-violation '#f '"not a valid define-record-type keyword" pD3ac8@kwd) (if (pD2eca@bound-id-member? pD3ac8@kwd pD3abf@seen*) (pD31a5@syntax-violation '#f '"duplicate use of keyword " pD3ab6@x pD3ac8@kwd) (pD3ac2@f (cdr pD3abe@cls*) (cons pD3ac8@kwd pD3abf@seen*))))) pD3ac6@ls/false) (let ((pD3acc@t pD3ac4@t)) (let ((pD3ace@ls/false (pD30c5@syntax-dispatch pD3acc@t 'any))) (if pD3ace@ls/false (apply (lambda (pD3ad0@cls) (pD31a5@syntax-violation '#f '"malformed define-record-type clause" pD3ad0@cls)) pD3ace@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3acc@t))))))) (void))))))) (let ((pD3aae@t pD3a8a@x)) (let ((pD3ab0@ls/false (pD30c5@syntax-dispatch pD3aae@t '(_ any . each-any)))) (if pD3ab0@ls/false (apply (lambda (pD3ab2@namespec pD3ab3@clause*) (begin (pD3aad@verify-clauses pD3a8a@x pD3ab3@clause*) (pD3aab@do-define-record pD3ab2@namespec pD3ab3@clause*))) pD3ab0@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3aae@t)))))))) (set! pD4b95@pD30b9@define-record-type-macro pD30b9@define-record-type-macro) (set! pD30bb@define-condition-type-macro (lambda (pD3c86@x) (let ((pD3c89@mkname '#f)) (begin (set! pD3c89@mkname (lambda (pD3cb6@name pD3cb7@suffix) (pD31a9@datum->syntax pD3cb6@name (string->symbol (string-append (symbol->string (pD31ab@syntax->datum pD3cb6@name)) pD3cb7@suffix))))) (let ((pD3c8a@t pD3c86@x)) (let ((pD3c8c@ls/false (pD30c5@syntax-dispatch pD3c8a@t '(any any any any any . #(each (any any)))))) (if (and pD3c8c@ls/false (apply (lambda (pD3c8e@ctxt pD3c8f@name pD3c90@super pD3c91@constructor pD3c92@predicate pD3c93@field* pD3c94@accessor*) (and (pD2ebe@id? pD3c8f@name) (pD2ebe@id? pD3c90@super) (pD2ebe@id? pD3c91@constructor) (pD2ebe@id? pD3c92@predicate) (for-all pD2ebe@id? pD3c93@field*) (for-all pD2ebe@id? pD3c94@accessor*))) pD3c8c@ls/false)) (apply (lambda (pD3c9c@ctxt pD3c9d@name pD3c9e@super pD3c9f@constructor pD3ca0@predicate pD3ca1@field* pD3ca2@accessor*) (let ((pD3caa@aux-accessor* (map (lambda (pD3cac@x) (gensym)) pD3ca2@accessor*))) (pD307b@bless (cons 'begin (cons (cons 'define-record-type (cons (list pD3c9d@name pD3c9f@constructor (gensym)) (cons (list 'parent pD3c9e@super) (cons (cons 'fields (map (lambda (pD3cae@field pD3caf@aux) (list 'immutable pD3cae@field pD3caf@aux)) pD3ca1@field* pD3caa@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define pD3ca0@predicate (list 'condition-predicate (list 'record-type-descriptor pD3c9d@name))) (map (lambda (pD3cb2@accessor pD3cb3@aux) (list 'define pD3cb2@accessor (list 'condition-accessor (list 'record-type-descriptor pD3c9d@name) pD3cb3@aux))) pD3ca2@accessor* pD3caa@aux-accessor*))))))) pD3c8c@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3c8a@t)))))))) (set! pD4b96@pD30bb@define-condition-type-macro pD30bb@define-condition-type-macro) (set! pD30bd@incorrect-usage-macro (lambda (pD3cba@e) (pD31a5@syntax-violation '#f '"incorrect usage of auxiliary keyword" pD3cba@e))) (set! pD4b97@pD30bd@incorrect-usage-macro pD30bd@incorrect-usage-macro) (set! pD30bf@parameterize-macro (lambda (pD3cbc@e) (let ((pD3cbe@t pD3cbc@e)) (let ((pD3cc0@ls/false (pD30c5@syntax-dispatch pD3cbe@t '(_ () any . each-any)))) (if pD3cc0@ls/false (apply (lambda (pD3cc2@b pD3cc3@b*) (pD307b@bless (cons 'let (cons '() (cons pD3cc2@b pD3cc3@b*))))) pD3cc0@ls/false) (let ((pD3cc6@t pD3cbe@t)) (let ((pD3cc8@ls/false (pD30c5@syntax-dispatch pD3cc6@t '(_ #(each (any any)) any . each-any)))) (if pD3cc8@ls/false (apply (lambda (pD3cca@olhs* pD3ccb@orhs* pD3ccc@b pD3ccd@b*) (let ((pD3cd2@lhs* (pD3193@generate-temporaries pD3cca@olhs*)) (pD3cd3@rhs* (pD3193@generate-temporaries pD3ccb@orhs*))) (pD307b@bless (cons (list 'lambda (append pD3cd2@lhs* pD3cd3@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (pD3cd6@lhs pD3cd7@rhs) (list 'let (list (list 't (list pD3cd6@lhs))) (list pD3cd6@lhs pD3cd7@rhs) (cons 'set! (cons pD3cd7@rhs '(t))))) pD3cd2@lhs* pD3cd3@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons pD3ccc@b pD3ccd@b*))) '(swap)))))) (append pD3cca@olhs* pD3ccb@orhs*))))) pD3cc8@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3cc6@t))))))))) (set! pD4b98@pD30bf@parameterize-macro pD30bf@parameterize-macro) (set! pD30c1@foreign-call-transformer (lambda (pD3cda@e pD3cdb@r pD3cdc@mr) (let ((pD3ce0@t pD3cda@e)) (let ((pD3ce2@ls/false (pD30c5@syntax-dispatch pD3ce0@t '(_ any . each-any)))) (if pD3ce2@ls/false (apply (lambda (pD3ce4@name pD3ce5@arg*) (cons 'foreign-call (cons (pD30e7@chi-expr pD3ce4@name pD3cdb@r pD3cdc@mr) (pD30e3@chi-expr* pD3ce5@arg* pD3cdb@r pD3cdc@mr)))) pD3ce2@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3ce0@t)))))) (set! pD4b99@pD30c1@foreign-call-transformer pD30c1@foreign-call-transformer) (set! pD30c3@convert-pattern (lambda (pD3ce8@pattern pD3ce9@keys) (let ((pD3ced@cvt* '#f) (pD3cef@cvt '#f)) (begin (set! pD3ced@cvt* (lambda (pD3d8c@p* pD3d8d@n pD3d8e@ids) (if (null? pD3d8c@p*) (values '() pD3d8e@ids) (call-with-values (lambda () (pD3ced@cvt* (cdr pD3d8c@p*) pD3d8d@n pD3d8e@ids)) (lambda (pD3d96@pD3d93 pD3d97@pD3d95) (let ((pD3d9a@ids pD3d97@pD3d95) (pD3d9b@y pD3d96@pD3d93)) (call-with-values (lambda () (pD3cef@cvt (car pD3d8c@p*) pD3d8d@n pD3d9a@ids)) (lambda (pD3da2@pD3d9f pD3da3@pD3da1) (let ((pD3da6@ids pD3da3@pD3da1) (pD3da7@x pD3da2@pD3d9f)) (values (cons pD3da7@x pD3d9b@y) pD3da6@ids)))))))))) (set! pD3cef@cvt (lambda (pD3cf0@p pD3cf1@n pD3cf2@ids) (let ((pD3cf6@t pD3cf0@p)) (let ((pD3cf8@ls/false (pD30c5@syntax-dispatch pD3cf6@t 'any))) (if (and pD3cf8@ls/false (apply (lambda (pD3cfa@id) (pD2ebe@id? pD3cfa@id)) pD3cf8@ls/false)) (apply (lambda (pD3cfc@id) (if (pD2eca@bound-id-member? pD3cf0@p pD3ce9@keys) (values (vector 'free-id pD3cf0@p) pD3cf2@ids) (if (pD2ec4@free-id=? pD3cf0@p (pD304d@scheme-stx '_)) (values '_ pD3cf2@ids) (values 'any (cons (cons pD3cf0@p pD3cf1@n) pD3cf2@ids))))) pD3cf8@ls/false) (let ((pD3cfe@t pD3cf6@t)) (let ((pD3d00@ls/false (pD30c5@syntax-dispatch pD3cfe@t '(any any)))) (if (and pD3d00@ls/false (apply (lambda (pD3d02@p pD3d03@dots) (pD30c7@ellipsis? pD3d03@dots)) pD3d00@ls/false)) (apply (lambda (pD3d06@p pD3d07@dots) (call-with-values (lambda () (pD3cef@cvt pD3d06@p (+ pD3cf1@n '1) pD3cf2@ids)) (lambda (pD3d0e@pD3d0b pD3d0f@pD3d0d) (let ((pD3d12@ids pD3d0f@pD3d0d) (pD3d13@p pD3d0e@pD3d0b)) (values (if (eq? pD3d13@p 'any) 'each-any (vector 'each pD3d13@p)) pD3d12@ids))))) pD3d00@ls/false) (let ((pD3d16@t pD3cfe@t)) (let ((pD3d18@ls/false (pD30c5@syntax-dispatch pD3d16@t '(any any . #(each+ any () any))))) (if (and pD3d18@ls/false (apply (lambda (pD3d1a@x pD3d1b@dots pD3d1c@ys pD3d1d@z) (pD30c7@ellipsis? pD3d1b@dots)) pD3d18@ls/false)) (apply (lambda (pD3d22@x pD3d23@dots pD3d24@ys pD3d25@z) (call-with-values (lambda () (pD3cef@cvt pD3d25@z pD3cf1@n pD3cf2@ids)) (lambda (pD3d2e@pD3d2b pD3d2f@pD3d2d) (let ((pD3d32@ids pD3d2f@pD3d2d) (pD3d33@z pD3d2e@pD3d2b)) (call-with-values (lambda () (pD3ced@cvt* pD3d24@ys pD3cf1@n pD3d32@ids)) (lambda (pD3d3a@pD3d37 pD3d3b@pD3d39) (let ((pD3d3e@ids pD3d3b@pD3d39) (pD3d3f@ys pD3d3a@pD3d37)) (call-with-values (lambda () (pD3cef@cvt pD3d22@x (+ pD3cf1@n '1) pD3d3e@ids)) (lambda (pD3d46@pD3d43 pD3d47@pD3d45) (let ((pD3d4a@ids pD3d47@pD3d45) (pD3d4b@x pD3d46@pD3d43)) (values (vector 'each+ pD3d4b@x (reverse pD3d3f@ys) pD3d33@z) pD3d4a@ids))))))))))) pD3d18@ls/false) (let ((pD3d4e@t pD3d16@t)) (let ((pD3d50@ls/false (pD30c5@syntax-dispatch pD3d4e@t '(any . any)))) (if pD3d50@ls/false (apply (lambda (pD3d52@x pD3d53@y) (call-with-values (lambda () (pD3cef@cvt pD3d53@y pD3cf1@n pD3cf2@ids)) (lambda (pD3d5a@pD3d57 pD3d5b@pD3d59) (let ((pD3d5e@ids pD3d5b@pD3d59) (pD3d5f@y pD3d5a@pD3d57)) (call-with-values (lambda () (pD3cef@cvt pD3d52@x pD3cf1@n pD3d5e@ids)) (lambda (pD3d66@pD3d63 pD3d67@pD3d65) (let ((pD3d6a@ids pD3d67@pD3d65) (pD3d6b@x pD3d66@pD3d63)) (values (cons pD3d6b@x pD3d5f@y) pD3d6a@ids)))))))) pD3d50@ls/false) (let ((pD3d6e@t pD3d4e@t)) (let ((pD3d70@ls/false (pD30c5@syntax-dispatch pD3d6e@t '()))) (if pD3d70@ls/false (apply (lambda () (values '() pD3cf2@ids)) pD3d70@ls/false) (let ((pD3d72@t pD3d6e@t)) (let ((pD3d74@ls/false (pD30c5@syntax-dispatch pD3d72@t '#(vector each-any)))) (if (and pD3d74@ls/false (apply (lambda (pD3d76@p) (not (pD2e8a@stx? pD3d76@p))) pD3d74@ls/false)) (apply (lambda (pD3d78@p) (call-with-values (lambda () (pD3cef@cvt pD3d78@p pD3cf1@n pD3cf2@ids)) (lambda (pD3d7e@pD3d7b pD3d7f@pD3d7d) (let ((pD3d82@ids pD3d7f@pD3d7d) (pD3d83@p pD3d7e@pD3d7b)) (values (vector 'vector pD3d83@p) pD3d82@ids))))) pD3d74@ls/false) (let ((pD3d86@t pD3d72@t)) (let ((pD3d88@ls/false (pD30c5@syntax-dispatch pD3d86@t 'any))) (if pD3d88@ls/false (apply (lambda (pD3d8a@datum) (values (vector 'atom (pD2ed2@stx->datum pD3d8a@datum)) pD3cf2@ids)) pD3d88@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3d86@t)))))))))))))))))))))))) (pD3cef@cvt pD3ce8@pattern '0 '()))))) (set! pD4b9a@pD30c3@convert-pattern pD30c3@convert-pattern) (set! pD30c5@syntax-dispatch (let ((pD3dab@stx^ '#f) (pD3dad@match-each '#f) (pD3daf@match-each+ '#f) (pD3db1@match-each-any '#f) (pD3db3@match-empty '#f) (pD3db5@combine '#f) (pD3db7@match* '#f) (pD3db9@match '#f)) (begin (set! pD3dab@stx^ (lambda (pD3e86@e pD3e87@m* pD3e88@s* pD3e89@ae*) (if (and (null? pD3e87@m*) (null? pD3e88@s*) (null? pD3e89@ae*)) pD3e86@e (pD2ea6@mkstx pD3e86@e pD3e87@m* pD3e88@s* pD3e89@ae*)))) (set! pD3dad@match-each (lambda (pD3e66@e pD3e67@p pD3e68@m* pD3e69@s* pD3e6a@ae*) (if (pair? pD3e66@e) (let ((pD3e70@first (pD3db9@match (car pD3e66@e) pD3e67@p pD3e68@m* pD3e69@s* pD3e6a@ae* '()))) (and pD3e70@first (let ((pD3e72@rest (pD3dad@match-each (cdr pD3e66@e) pD3e67@p pD3e68@m* pD3e69@s* pD3e6a@ae*))) (and pD3e72@rest (cons pD3e70@first pD3e72@rest))))) (if (null? pD3e66@e) '() (if (pD2e8a@stx? pD3e66@e) (and (not (pD2e44@top-marked? pD3e68@m*)) (call-with-values (lambda () (join-wraps pD3e68@m* pD3e69@s* pD3e6a@ae* pD3e66@e)) (lambda (pD3e7a@pD3e75 pD3e7b@pD3e77 pD3e7c@pD3e79) (let ((pD3e80@ae* pD3e7c@pD3e79) (pD3e81@s* pD3e7b@pD3e77) (pD3e82@m* pD3e7a@pD3e75)) (pD3dad@match-each (pD2e8c@stx-expr pD3e66@e) pD3e67@p pD3e82@m* pD3e81@s* pD3e80@ae*))))) (if (pD29fd@pD28d1@annotation? pD3e66@e) (pD3dad@match-each (pD29ff@pD28d5@annotation-expression pD3e66@e) pD3e67@p pD3e68@m* pD3e69@s* pD3e6a@ae*) '#f)))))) (set! pD3daf@match-each+ (lambda (pD3e26@e pD3e27@x-pat pD3e28@y-pat pD3e29@z-pat pD3e2a@m* pD3e2b@s* pD3e2c@ae* pD3e2d@r) (let pD3e3e@f ((pD3e36@e pD3e26@e) (pD3e37@m* pD3e2a@m*) (pD3e38@s* pD3e2b@s*) (pD3e39@ae* pD3e2c@ae*)) (if (pair? pD3e36@e) (call-with-values (lambda () (pD3e3e@f (cdr pD3e36@e) pD3e37@m* pD3e38@s* pD3e39@ae*)) (lambda (pD3e46@pD3e41 pD3e47@pD3e43 pD3e48@pD3e45) (let ((pD3e4c@r pD3e48@pD3e45) (pD3e4d@y-pat pD3e47@pD3e43) (pD3e4e@xr* pD3e46@pD3e41)) (if pD3e4c@r (if (null? pD3e4d@y-pat) (let ((pD3e52@xr (pD3db9@match (car pD3e36@e) pD3e27@x-pat pD3e37@m* pD3e38@s* pD3e39@ae* '()))) (if pD3e52@xr (values (cons pD3e52@xr pD3e4e@xr*) pD3e4d@y-pat pD3e4c@r) (values '#f '#f '#f))) (values '() (cdr pD3e4d@y-pat) (pD3db9@match (car pD3e36@e) (car pD3e4d@y-pat) pD3e37@m* pD3e38@s* pD3e39@ae* pD3e4c@r))) (values '#f '#f '#f))))) (if (pD2e8a@stx? pD3e36@e) (if (pD2e44@top-marked? pD3e37@m*) (values '() pD3e28@y-pat (pD3db9@match pD3e36@e pD3e29@z-pat pD3e37@m* pD3e38@s* pD3e39@ae* pD3e2d@r)) (call-with-values (lambda () (join-wraps pD3e37@m* pD3e38@s* pD3e39@ae* pD3e36@e)) (lambda (pD3e5a@pD3e55 pD3e5b@pD3e57 pD3e5c@pD3e59) (let ((pD3e60@ae* pD3e5c@pD3e59) (pD3e61@s* pD3e5b@pD3e57) (pD3e62@m* pD3e5a@pD3e55)) (pD3e3e@f (pD2e8c@stx-expr pD3e36@e) pD3e62@m* pD3e61@s* pD3e60@ae*))))) (if (pD29fd@pD28d1@annotation? pD3e36@e) (pD3e3e@f (pD29ff@pD28d5@annotation-expression pD3e36@e) pD3e37@m* pD3e38@s* pD3e39@ae*) (values '() pD3e28@y-pat (pD3db9@match pD3e36@e pD3e29@z-pat pD3e37@m* pD3e38@s* pD3e39@ae* pD3e2d@r)))))))) (set! pD3db1@match-each-any (lambda (pD3e0a@e pD3e0b@m* pD3e0c@s* pD3e0d@ae*) (if (pair? pD3e0a@e) (let ((pD3e12@l (pD3db1@match-each-any (cdr pD3e0a@e) pD3e0b@m* pD3e0c@s* pD3e0d@ae*))) (and pD3e12@l (cons (pD3dab@stx^ (car pD3e0a@e) pD3e0b@m* pD3e0c@s* pD3e0d@ae*) pD3e12@l))) (if (null? pD3e0a@e) '() (if (pD2e8a@stx? pD3e0a@e) (and (not (pD2e44@top-marked? pD3e0b@m*)) (call-with-values (lambda () (join-wraps pD3e0b@m* pD3e0c@s* pD3e0d@ae* pD3e0a@e)) (lambda (pD3e1a@pD3e15 pD3e1b@pD3e17 pD3e1c@pD3e19) (let ((pD3e20@ae* pD3e1c@pD3e19) (pD3e21@s* pD3e1b@pD3e17) (pD3e22@m* pD3e1a@pD3e15)) (pD3db1@match-each-any (pD2e8c@stx-expr pD3e0a@e) pD3e22@m* pD3e21@s* pD3e20@ae*))))) (if (pD29fd@pD28d1@annotation? pD3e0a@e) (pD3db1@match-each-any (pD29ff@pD28d5@annotation-expression pD3e0a@e) pD3e0b@m* pD3e0c@s* pD3e0d@ae*) '#f)))))) (set! pD3db3@match-empty (lambda (pD3e04@p pD3e05@r) (if (null? pD3e04@p) pD3e05@r (if (eq? pD3e04@p '_) pD3e05@r (if (eq? pD3e04@p 'any) (cons '() pD3e05@r) (if (pair? pD3e04@p) (pD3db3@match-empty (car pD3e04@p) (pD3db3@match-empty (cdr pD3e04@p) pD3e05@r)) (if (eq? pD3e04@p 'each-any) (cons '() pD3e05@r) (let ((pD3e08@t (vector-ref pD3e04@p '0))) (if (memv pD3e08@t '(each)) (pD3db3@match-empty (vector-ref pD3e04@p '1) pD3e05@r) (if (memv pD3e08@t '(each+)) (pD3db3@match-empty (vector-ref pD3e04@p '1) (pD3db3@match-empty (reverse (vector-ref pD3e04@p '2)) (pD3db3@match-empty (vector-ref pD3e04@p '3) pD3e05@r))) (if (memv pD3e08@t '(free-id atom)) pD3e05@r (if (memv pD3e08@t '(scheme-id atom)) pD3e05@r (if (memv pD3e08@t '(vector)) (pD3db3@match-empty (vector-ref pD3e04@p '1) pD3e05@r) (assertion-violation 'syntax-dispatch '"invalid pattern" pD3e04@p)))))))))))))) (set! pD3db5@combine (lambda (pD3e00@r* pD3e01@r) (if (null? (car pD3e00@r*)) pD3e01@r (cons (map car pD3e00@r*) (pD3db5@combine (map cdr pD3e00@r*) pD3e01@r))))) (set! pD3db7@match* (lambda (pD3ddc@e pD3ddd@p pD3dde@m* pD3ddf@s* pD3de0@ae* pD3de1@r) (if (null? pD3ddd@p) (and (null? pD3ddc@e) pD3de1@r) (if (pair? pD3ddd@p) (and (pair? pD3ddc@e) (pD3db9@match (car pD3ddc@e) (car pD3ddd@p) pD3dde@m* pD3ddf@s* pD3de0@ae* (pD3db9@match (cdr pD3ddc@e) (cdr pD3ddd@p) pD3dde@m* pD3ddf@s* pD3de0@ae* pD3de1@r))) (if (eq? pD3ddd@p 'each-any) (let ((pD3de8@l (pD3db1@match-each-any pD3ddc@e pD3dde@m* pD3ddf@s* pD3de0@ae*))) (and pD3de8@l (cons pD3de8@l pD3de1@r))) (let ((pD3dea@t (vector-ref pD3ddd@p '0))) (if (memv pD3dea@t '(each)) (if (null? pD3ddc@e) (pD3db3@match-empty (vector-ref pD3ddd@p '1) pD3de1@r) (let ((pD3dec@r* (pD3dad@match-each pD3ddc@e (vector-ref pD3ddd@p '1) pD3dde@m* pD3ddf@s* pD3de0@ae*))) (and pD3dec@r* (pD3db5@combine pD3dec@r* pD3de1@r)))) (if (memv pD3dea@t '(free-id)) (and (symbol? pD3ddc@e) (pD2e44@top-marked? pD3dde@m*) (pD2ec4@free-id=? (pD3dab@stx^ pD3ddc@e pD3dde@m* pD3ddf@s* pD3de0@ae*) (vector-ref pD3ddd@p '1)) pD3de1@r) (if (memv pD3dea@t '(scheme-id)) (and (symbol? pD3ddc@e) (pD2e44@top-marked? pD3dde@m*) (pD2ec4@free-id=? (pD3dab@stx^ pD3ddc@e pD3dde@m* pD3ddf@s* pD3de0@ae*) (pD304d@scheme-stx (vector-ref pD3ddd@p '1))) pD3de1@r) (if (memv pD3dea@t '(each+)) (call-with-values (lambda () (pD3daf@match-each+ pD3ddc@e (vector-ref pD3ddd@p '1) (vector-ref pD3ddd@p '2) (vector-ref pD3ddd@p '3) pD3dde@m* pD3ddf@s* pD3de0@ae* pD3de1@r)) (lambda (pD3df4@pD3def pD3df5@pD3df1 pD3df6@pD3df3) (let ((pD3dfa@r pD3df6@pD3df3) (pD3dfb@y-pat pD3df5@pD3df1) (pD3dfc@xr* pD3df4@pD3def)) (and pD3dfa@r (null? pD3dfb@y-pat) (if (null? pD3dfc@xr*) (pD3db3@match-empty (vector-ref pD3ddd@p '1) pD3dfa@r) (pD3db5@combine pD3dfc@xr* pD3dfa@r)))))) (if (memv pD3dea@t '(atom)) (and (fast-equal? (vector-ref pD3ddd@p '1) (pD2ed0@strip pD3ddc@e pD3dde@m*)) pD3de1@r) (if (memv pD3dea@t '(vector)) (and (vector? pD3ddc@e) (pD3db9@match (vector->list pD3ddc@e) (vector-ref pD3ddd@p '1) pD3dde@m* pD3ddf@s* pD3de0@ae* pD3de1@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" pD3ddd@p))))))))))))) (set! pD3db9@match (lambda (pD3dbe@e pD3dbf@p pD3dc0@m* pD3dc1@s* pD3dc2@ae* pD3dc3@r) (if (not pD3dc3@r) '#f (if (eq? pD3dbf@p '_) pD3dc3@r (if (eq? pD3dbf@p 'any) (cons (pD3dab@stx^ pD3dbe@e pD3dc0@m* pD3dc1@s* pD3dc2@ae*) pD3dc3@r) (if (pD2e8a@stx? pD3dbe@e) (and (not (pD2e44@top-marked? pD3dc0@m*)) (call-with-values (lambda () (join-wraps pD3dc0@m* pD3dc1@s* pD3dc2@ae* pD3dbe@e)) (lambda (pD3dd0@pD3dcb pD3dd1@pD3dcd pD3dd2@pD3dcf) (let ((pD3dd6@ae* pD3dd2@pD3dcf) (pD3dd7@s* pD3dd1@pD3dcd) (pD3dd8@m* pD3dd0@pD3dcb)) (pD3db9@match (pD2e8c@stx-expr pD3dbe@e) pD3dbf@p pD3dd8@m* pD3dd7@s* pD3dd6@ae* pD3dc3@r))))) (if (pD29fd@pD28d1@annotation? pD3dbe@e) (pD3db9@match (pD29ff@pD28d5@annotation-expression pD3dbe@e) pD3dbf@p pD3dc0@m* pD3dc1@s* pD3dc2@ae* pD3dc3@r) (pD3db7@match* pD3dbe@e pD3dbf@p pD3dc0@m* pD3dc1@s* pD3dc2@ae* pD3dc3@r)))))))) (lambda (pD3dba@e pD3dbb@p) (pD3db9@match pD3dba@e pD3dbb@p '() '() '() '()))))) (set! pD4b9b@pD30c5@syntax-dispatch pD30c5@syntax-dispatch) (set! pD30c7@ellipsis? (lambda (pD3e8e@x) (and (pD2ebe@id? pD3e8e@x) (pD2ec4@free-id=? pD3e8e@x (pD304d@scheme-stx '...))))) (set! pD4b9c@pD30c7@ellipsis? pD30c7@ellipsis?) (set! pD30c9@underscore? (lambda (pD3e90@x) (and (pD2ebe@id? pD3e90@x) (pD2ec4@free-id=? pD3e90@x (pD304d@scheme-stx '_))))) (set! pD4b9d@pD30c9@underscore? pD30c9@underscore?) (set! pD30cb@verify-literals (lambda (pD3e92@lits pD3e93@expr) (for-each (lambda (pD3e96@x) (if (or (not (pD2ebe@id? pD3e96@x)) (pD30c7@ellipsis? pD3e96@x) (pD30c9@underscore? pD3e96@x)) (pD31a5@syntax-violation '#f '"invalid literal" pD3e93@expr pD3e96@x) (void))) pD3e92@lits))) (set! pD4b9e@pD30cb@verify-literals pD30cb@verify-literals) (set! pD30cd@syntax-case-transformer (let ((pD3e99@build-dispatch-call '#f) (pD3e9b@invalid-ids-error '#f) (pD3e9d@gen-clause '#f) (pD3e9f@gen-syntax-case '#f)) (begin (set! pD3e99@build-dispatch-call (lambda (pD3f0a@pvars pD3f0b@expr pD3f0c@y pD3f0d@r pD3f0e@mr) (let ((pD3f14@ids (map car pD3f0a@pvars)) (pD3f15@levels (map cdr pD3f0a@pvars))) (let ((pD3f18@labels (map pD2e4a@gen-label pD3f14@ids)) (pD3f19@new-vars (map pD2e46@gen-lexical pD3f14@ids))) (let ((pD3f1c@body (pD30e7@chi-expr (pD2eaa@add-subst (pD2e7e@make-full-rib pD3f14@ids pD3f18@labels) pD3f0b@expr) (append (map (lambda (pD3f1e@label pD3f1f@var pD3f20@level) (cons pD3f1e@label (pD2ed8@make-binding 'syntax (cons pD3f1f@var pD3f20@level)))) pD3f18@labels pD3f19@new-vars (map cdr pD3f0a@pvars)) pD3f0d@r) pD3f0e@mr))) (list '(primitive apply) (pD2e21@pD2d4d@build-lambda '#f pD3f19@new-vars pD3f1c@body) pD3f0c@y)))))) (set! pD3e9b@invalid-ids-error (lambda (pD3efe@id* pD3eff@e pD3f00@class) (let pD3f08@find ((pD3f04@id* pD3efe@id*) (pD3f05@ok* '())) (if (null? pD3f04@id*) (pD31a5@syntax-violation '#f '"invalid syntax" pD3eff@e) (if (pD2ebe@id? (car pD3f04@id*)) (if (pD2eca@bound-id-member? (car pD3f04@id*) pD3f05@ok*) (pD31a1@syntax-error (car pD3f04@id*) '"duplicate " pD3f00@class) (pD3f08@find (cdr pD3f04@id*) (cons (car pD3f04@id*) pD3f05@ok*))) (pD31a1@syntax-error (car pD3f04@id*) '"invalid " pD3f00@class)))))) (set! pD3e9d@gen-clause (lambda (pD3ed6@x pD3ed7@keys pD3ed8@clauses pD3ed9@r pD3eda@mr pD3edb@pat pD3edc@fender pD3edd@expr) (call-with-values (lambda () (pD30c3@convert-pattern pD3edb@pat pD3ed7@keys)) (lambda (pD3eea@pD3ee7 pD3eeb@pD3ee9) (let ((pD3eee@pvars pD3eeb@pD3ee9) (pD3eef@p pD3eea@pD3ee7)) (if (not (pD2ec8@distinct-bound-ids? (map car pD3eee@pvars))) (pD3e9b@invalid-ids-error (map car pD3eee@pvars) pD3edb@pat '"pattern variable") (if (not (for-all (lambda (pD3ef2@x) (not (pD30c7@ellipsis? (car pD3ef2@x)))) pD3eee@pvars)) (pD31a5@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" pD3edb@pat) (let ((pD3ef4@y (pD2e46@gen-lexical 'tmp))) (let ((pD3ef6@test (if (eq? pD3edc@fender '#t) pD3ef4@y (let ((pD3ef8@call (pD3e99@build-dispatch-call pD3eee@pvars pD3edc@fender pD3ef4@y pD3ed9@r pD3eda@mr))) (list 'if pD3ef4@y pD3ef8@call (list 'quote '#f)))))) (let ((pD3efa@conseq (pD3e99@build-dispatch-call pD3eee@pvars pD3edd@expr pD3ef4@y pD3ed9@r pD3eda@mr))) (let ((pD3efc@altern (pD3e9f@gen-syntax-case pD3ed6@x pD3ed7@keys pD3ed8@clauses pD3ed9@r pD3eda@mr))) (list (pD2e21@pD2d4d@build-lambda '#f (list pD3ef4@y) (list 'if pD3ef6@test pD3efa@conseq pD3efc@altern)) (list '(primitive syntax-dispatch) pD3ed6@x (list 'quote pD3eef@p)))))))))))))) (set! pD3e9f@gen-syntax-case (lambda (pD3eb4@x pD3eb5@keys pD3eb6@clauses pD3eb7@r pD3eb8@mr) (if (null? pD3eb6@clauses) (list '(primitive syntax-error) pD3eb4@x) (let ((pD3ebe@t (car pD3eb6@clauses))) (let ((pD3ec0@ls/false (pD30c5@syntax-dispatch pD3ebe@t '(any any)))) (if pD3ec0@ls/false (apply (lambda (pD3ec2@pat pD3ec3@expr) (if (and (pD2ebe@id? pD3ec2@pat) (not (pD2eca@bound-id-member? pD3ec2@pat pD3eb5@keys)) (not (pD30c7@ellipsis? pD3ec2@pat))) (if (pD2ec4@free-id=? pD3ec2@pat (pD304d@scheme-stx '_)) (pD30e7@chi-expr pD3ec3@expr pD3eb7@r pD3eb8@mr) (let ((pD3ec6@lab (pD2e4a@gen-label pD3ec2@pat)) (pD3ec7@lex (pD2e46@gen-lexical pD3ec2@pat))) (let ((pD3eca@body (pD30e7@chi-expr (pD2eaa@add-subst (pD2e7e@make-full-rib (list pD3ec2@pat) (list pD3ec6@lab)) pD3ec3@expr) (cons (cons pD3ec6@lab (pD2ed8@make-binding 'syntax (cons pD3ec7@lex '0))) pD3eb7@r) pD3eb8@mr))) (list (pD2e21@pD2d4d@build-lambda '#f (list pD3ec7@lex) pD3eca@body) pD3eb4@x)))) (pD3e9d@gen-clause pD3eb4@x pD3eb5@keys (cdr pD3eb6@clauses) pD3eb7@r pD3eb8@mr pD3ec2@pat '#t pD3ec3@expr))) pD3ec0@ls/false) (let ((pD3ecc@t pD3ebe@t)) (let ((pD3ece@ls/false (pD30c5@syntax-dispatch pD3ecc@t '(any any any)))) (if pD3ece@ls/false (apply (lambda (pD3ed0@pat pD3ed1@fender pD3ed2@expr) (pD3e9d@gen-clause pD3eb4@x pD3eb5@keys (cdr pD3eb6@clauses) pD3eb7@r pD3eb8@mr pD3ed0@pat pD3ed1@fender pD3ed2@expr)) pD3ece@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3ecc@t)))))))))) (lambda (pD3ea0@e pD3ea1@r pD3ea2@mr) (let ((pD3ea6@t pD3ea0@e)) (let ((pD3ea8@ls/false (pD30c5@syntax-dispatch pD3ea6@t '(_ any each-any . each-any)))) (if pD3ea8@ls/false (apply (lambda (pD3eaa@expr pD3eab@keys pD3eac@clauses) (begin (pD30cb@verify-literals pD3eab@keys pD3ea0@e) (let ((pD3eb0@x (pD2e46@gen-lexical 'tmp))) (let ((pD3eb2@body (pD3e9f@gen-syntax-case pD3eb0@x pD3eab@keys pD3eac@clauses pD3ea1@r pD3ea2@mr))) (list (pD2e21@pD2d4d@build-lambda '#f (list pD3eb0@x) pD3eb2@body) (pD30e7@chi-expr pD3eaa@expr pD3ea1@r pD3ea2@mr)))))) pD3ea8@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3ea6@t)))))))) (set! pD4b9f@pD30cd@syntax-case-transformer pD30cd@syntax-case-transformer) (set! pD30cf@ellipsis-map (lambda (pD3f24@proc pD3f25@ls . pD3f28@ls*) (let ((pD3f2b@who '#f)) (begin (set! pD3f2b@who '...) (begin (if (not (list? pD3f25@ls)) (assertion-violation pD3f2b@who '"not a list" pD3f25@ls) (void)) (if (not (null? pD3f28@ls*)) (let ((pD3f2c@n (length pD3f25@ls))) (for-each (lambda (pD3f2e@x) (begin (if (not (list? pD3f2e@x)) (assertion-violation pD3f2b@who '"not a list" pD3f2e@x) (void)) (if (not (= (length pD3f2e@x) pD3f2c@n)) (assertion-violation pD3f2b@who '"length mismatch" pD3f25@ls pD3f2e@x) (void)))) pD3f28@ls*)) (void)) (apply map pD3f24@proc pD3f25@ls pD3f28@ls*)))))) (set! pD4ba0@pD30cf@ellipsis-map pD30cf@ellipsis-map) (set! pD30d1@syntax-transformer (let ((pD3f31@gen-syntax '#f) (pD3f33@gen-ref '#f) (pD3f35@gen-append '#f) (pD3f37@gen-mappend '#f) (pD3f39@gen-map '#f) (pD3f3b@gen-cons '#f) (pD3f3d@gen-vector '#f) (pD3f3f@regen '#f)) (begin (set! pD3f31@gen-syntax (lambda (pD3fa8@src pD3fa9@e pD3faa@r pD3fab@maps pD3fac@ellipsis? pD3fad@vec?) (let ((pD3fb4@t pD3fa9@e)) (let ((pD3fb6@ls/false (pD30c5@syntax-dispatch pD3fb4@t 'any))) (if (and pD3fb6@ls/false (apply (lambda (pD3fb8@dots) (pD3fac@ellipsis? pD3fb8@dots)) pD3fb6@ls/false)) (apply (lambda (pD3fba@dots) (pD31a5@syntax-violation '#f '"misplaced ellipsis in syntax form" pD3fa8@src)) pD3fb6@ls/false) (let ((pD3fbc@t pD3fb4@t)) (let ((pD3fbe@ls/false (pD30c5@syntax-dispatch pD3fbc@t 'any))) (if (and pD3fbe@ls/false (apply (lambda (pD3fc0@id) (pD2ebe@id? pD3fc0@id)) pD3fbe@ls/false)) (apply (lambda (pD3fc2@id) (let ((pD3fc4@label (pD2ed4@id->label pD3fa9@e))) (let ((pD3fc6@b (pD2ed6@label->binding pD3fc4@label pD3faa@r))) (if (eq? (pD2eda@binding-type pD3fc6@b) 'syntax) (call-with-values (lambda () (let ((pD3fcc@var.lev (pD2edc@binding-value pD3fc6@b))) (pD3f33@gen-ref pD3fa8@src (car pD3fcc@var.lev) (cdr pD3fcc@var.lev) pD3fab@maps))) (lambda (pD3fce@pD3fc9 pD3fcf@pD3fcb) (let ((pD3fd2@maps pD3fcf@pD3fcb) (pD3fd3@var pD3fce@pD3fc9)) (values (list 'ref pD3fd3@var) pD3fd2@maps)))) (values (list 'quote pD3fa9@e) pD3fab@maps))))) pD3fbe@ls/false) (let ((pD3fd6@t pD3fbc@t)) (let ((pD3fd8@ls/false (pD30c5@syntax-dispatch pD3fd6@t '(any any)))) (if (and pD3fd8@ls/false (apply (lambda (pD3fda@dots pD3fdb@e) (pD3fac@ellipsis? pD3fda@dots)) pD3fd8@ls/false)) (apply (lambda (pD3fde@dots pD3fdf@e) (if pD3fad@vec? (pD31a5@syntax-violation '#f '"misplaced ellipsis in syntax form" pD3fa8@src) (pD3f31@gen-syntax pD3fa8@src pD3fdf@e pD3faa@r pD3fab@maps (lambda (pD3fe2@x) '#f) '#f))) pD3fd8@ls/false) (let ((pD3fe4@t pD3fd6@t)) (let ((pD3fe6@ls/false (pD30c5@syntax-dispatch pD3fe4@t '(any any . any)))) (if (and pD3fe6@ls/false (apply (lambda (pD3fe8@x pD3fe9@dots pD3fea@y) (pD3fac@ellipsis? pD3fe9@dots)) pD3fe6@ls/false)) (apply (lambda (pD3fee@x pD3fef@dots pD3ff0@y) (let pD4006@f ((pD3ff4@y pD3ff0@y) (pD3ff5@k (lambda (pD3ff8@maps) (call-with-values (lambda () (pD3f31@gen-syntax pD3fa8@src pD3fee@x pD3faa@r (cons '() pD3ff8@maps) pD3fac@ellipsis? '#f)) (lambda (pD3ffe@pD3ffb pD3fff@pD3ffd) (let ((pD4002@maps pD3fff@pD3ffd) (pD4003@x pD3ffe@pD3ffb)) (if (null? (car pD4002@maps)) (pD31a5@syntax-violation '#f '"extra ellipsis in syntax form" pD3fa8@src) (values (pD3f39@gen-map pD4003@x (car pD4002@maps)) (cdr pD4002@maps))))))))) (let ((pD4008@t pD3ff4@y)) (let ((pD400a@ls/false (pD30c5@syntax-dispatch pD4008@t '()))) (if pD400a@ls/false (apply (lambda () (pD3ff5@k pD3fab@maps)) pD400a@ls/false) (let ((pD400c@t pD4008@t)) (let ((pD400e@ls/false (pD30c5@syntax-dispatch pD400c@t '(any . any)))) (if (and pD400e@ls/false (apply (lambda (pD4010@dots pD4011@y) (pD3fac@ellipsis? pD4010@dots)) pD400e@ls/false)) (apply (lambda (pD4014@dots pD4015@y) (pD4006@f pD4015@y (lambda (pD4018@maps) (call-with-values (lambda () (pD3ff5@k (cons '() pD4018@maps))) (lambda (pD401e@pD401b pD401f@pD401d) (let ((pD4022@maps pD401f@pD401d) (pD4023@x pD401e@pD401b)) (if (null? (car pD4022@maps)) (pD31a5@syntax-violation '#f '"extra ellipsis in syntax form" pD3fa8@src) (values (pD3f37@gen-mappend pD4023@x (car pD4022@maps)) (cdr pD4022@maps))))))))) pD400e@ls/false) (let ((pD4026@t pD400c@t)) (let ((pD4028@ls/false (pD30c5@syntax-dispatch pD4026@t '_))) (if pD4028@ls/false (apply (lambda () (call-with-values (lambda () (pD3f31@gen-syntax pD3fa8@src pD3ff4@y pD3faa@r pD3fab@maps pD3fac@ellipsis? pD3fad@vec?)) (lambda (pD402e@pD402b pD402f@pD402d) (let ((pD4032@maps pD402f@pD402d) (pD4033@y pD402e@pD402b)) (call-with-values (lambda () (pD3ff5@k pD4032@maps)) (lambda (pD403a@pD4037 pD403b@pD4039) (let ((pD403e@maps pD403b@pD4039) (pD403f@x pD403a@pD4037)) (values (pD3f35@gen-append pD403f@x pD4033@y) pD403e@maps)))))))) pD4028@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD4026@t)))))))))))) pD3fe6@ls/false) (let ((pD4042@t pD3fe4@t)) (let ((pD4044@ls/false (pD30c5@syntax-dispatch pD4042@t '(any . any)))) (if pD4044@ls/false (apply (lambda (pD4046@x pD4047@y) (call-with-values (lambda () (pD3f31@gen-syntax pD3fa8@src pD4046@x pD3faa@r pD3fab@maps pD3fac@ellipsis? '#f)) (lambda (pD404e@pD404b pD404f@pD404d) (let ((pD4052@maps pD404f@pD404d) (pD4053@xnew pD404e@pD404b)) (call-with-values (lambda () (pD3f31@gen-syntax pD3fa8@src pD4047@y pD3faa@r pD4052@maps pD3fac@ellipsis? pD3fad@vec?)) (lambda (pD405a@pD4057 pD405b@pD4059) (let ((pD405e@maps pD405b@pD4059) (pD405f@ynew pD405a@pD4057)) (values (pD3f3b@gen-cons pD3fa9@e pD4046@x pD4047@y pD4053@xnew pD405f@ynew) pD405e@maps)))))))) pD4044@ls/false) (let ((pD4062@t pD4042@t)) (let ((pD4064@ls/false (pD30c5@syntax-dispatch pD4062@t '#(vector each-any)))) (if pD4064@ls/false (apply (lambda (pD4066@ls) (call-with-values (lambda () (pD3f31@gen-syntax pD3fa8@src pD4066@ls pD3faa@r pD3fab@maps pD3fac@ellipsis? '#t)) (lambda (pD406c@pD4069 pD406d@pD406b) (let ((pD4070@maps pD406d@pD406b) (pD4071@lsnew pD406c@pD4069)) (values (pD3f3d@gen-vector pD3fa9@e pD4066@ls pD4071@lsnew) pD4070@maps))))) pD4064@ls/false) (let ((pD4074@t pD4062@t)) (let ((pD4076@ls/false (pD30c5@syntax-dispatch pD4074@t '_))) (if pD4076@ls/false (apply (lambda () (values (list 'quote pD3fa9@e) pD3fab@maps)) pD4076@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD4074@t)))))))))))))))))))))))) (set! pD3f33@gen-ref (lambda (pD3f8e@src pD3f8f@var pD3f90@level pD3f91@maps) (if (= pD3f90@level '0) (values pD3f8f@var pD3f91@maps) (if (null? pD3f91@maps) (pD31a5@syntax-violation '#f '"missing ellipsis in syntax form" pD3f8e@src) (call-with-values (lambda () (pD3f33@gen-ref pD3f8e@src pD3f8f@var (- pD3f90@level '1) (cdr pD3f91@maps))) (lambda (pD3f9a@pD3f97 pD3f9b@pD3f99) (let ((pD3f9e@outer-maps pD3f9b@pD3f99) (pD3f9f@outer-var pD3f9a@pD3f97)) (let ((pD3fa2@t (assq pD3f9f@outer-var (car pD3f91@maps)))) (if pD3fa2@t ((lambda (pD3fa4@b) (values (cdr pD3fa4@b) pD3f91@maps)) pD3fa2@t) (let ((pD3fa6@inner-var (pD2e46@gen-lexical 'tmp))) (values pD3fa6@inner-var (cons (cons (cons pD3f9f@outer-var pD3fa6@inner-var) (car pD3f91@maps)) pD3f9e@outer-maps)))))))))))) (set! pD3f35@gen-append (lambda (pD3f8a@x pD3f8b@y) (if (fast-equal? pD3f8b@y ''()) pD3f8a@x (list 'append pD3f8a@x pD3f8b@y)))) (set! pD3f37@gen-mappend (lambda (pD3f86@e pD3f87@map-env) (list 'apply '(primitive append) (pD3f39@gen-map pD3f86@e pD3f87@map-env)))) (set! pD3f39@gen-map (lambda (pD3f74@e pD3f75@map-env) (let ((pD3f78@formals (map cdr pD3f75@map-env)) (pD3f79@actuals (map (lambda (pD3f7c@x) (list 'ref (car pD3f7c@x))) pD3f75@map-env))) (if (eq? (car pD3f74@e) 'ref) (car pD3f79@actuals) (if (for-all (lambda (pD3f7e@x) (and (eq? (car pD3f7e@x) 'ref) (memq (cadr pD3f7e@x) pD3f78@formals))) (cdr pD3f74@e)) (let ((pD3f80@args (map (let ((pD3f82@r (map cons pD3f78@formals pD3f79@actuals))) (lambda (pD3f84@x) (cdr (assq (cadr pD3f84@x) pD3f82@r)))) (cdr pD3f74@e)))) (cons 'map (cons (list 'primitive (car pD3f74@e)) pD3f80@args))) (cons* 'map (list 'lambda pD3f78@formals pD3f74@e) pD3f79@actuals)))))) (set! pD3f3b@gen-cons (lambda (pD3f64@e pD3f65@x pD3f66@y pD3f67@xnew pD3f68@ynew) (let ((pD3f6e@t (car pD3f68@ynew))) (if (memv pD3f6e@t '(quote)) (if (eq? (car pD3f67@xnew) 'quote) (let ((pD3f70@xnew (cadr pD3f67@xnew)) (pD3f71@ynew (cadr pD3f68@ynew))) (if (and (eq? pD3f70@xnew pD3f65@x) (eq? pD3f71@ynew pD3f66@y)) (list 'quote pD3f64@e) (list 'quote (cons pD3f70@xnew pD3f71@ynew)))) (if (null? (cadr pD3f68@ynew)) (list 'list pD3f67@xnew) (list 'cons pD3f67@xnew pD3f68@ynew))) (if (memv pD3f6e@t '(list)) (cons 'list (cons pD3f67@xnew (cdr pD3f68@ynew))) (list 'cons pD3f67@xnew pD3f68@ynew)))))) (set! pD3f3d@gen-vector (lambda (pD3f5e@e pD3f5f@ls pD3f60@lsnew) (if (eq? (car pD3f60@lsnew) 'quote) (if (eq? (cadr pD3f60@lsnew) pD3f5f@ls) (list 'quote pD3f5e@e) (list 'quote (list->vector (cadr pD3f60@lsnew)))) (if (eq? (car pD3f60@lsnew) 'list) (cons 'vector (cdr pD3f60@lsnew)) (list 'list->vector pD3f60@lsnew))))) (set! pD3f3f@regen (lambda (pD3f58@x) (let ((pD3f5a@t (car pD3f58@x))) (if (memv pD3f5a@t '(ref)) (cadr pD3f58@x) (if (memv pD3f5a@t '(primitive)) (list 'primitive (cadr pD3f58@x)) (if (memv pD3f5a@t '(quote)) (list 'quote (cadr pD3f58@x)) (if (memv pD3f5a@t '(lambda)) (pD2e21@pD2d4d@build-lambda '#f (cadr pD3f58@x) (pD3f3f@regen (caddr pD3f58@x))) (if (memv pD3f5a@t '(map)) (let ((pD3f5c@ls (map pD3f3f@regen (cdr pD3f58@x)))) (cons '(primitive ellipsis-map) pD3f5c@ls)) (cons (list 'primitive (car pD3f58@x)) (map pD3f3f@regen (cdr pD3f58@x))))))))))) (lambda (pD3f40@e pD3f41@r pD3f42@mr) (let ((pD3f46@t pD3f40@e)) (let ((pD3f48@ls/false (pD30c5@syntax-dispatch pD3f46@t '(_ any)))) (if pD3f48@ls/false (apply (lambda (pD3f4a@x) (call-with-values (lambda () (pD3f31@gen-syntax pD3f40@e pD3f4a@x pD3f41@r '() pD30c7@ellipsis? '#f)) (lambda (pD3f50@pD3f4d pD3f51@pD3f4f) (let ((pD3f54@maps pD3f51@pD3f4f) (pD3f55@e pD3f50@pD3f4d)) (pD3f3f@regen pD3f55@e))))) pD3f48@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD3f46@t)))))))) (set! pD4ba1@pD30d1@syntax-transformer pD30d1@syntax-transformer) (set! pD30d3@core-macro-transformer (lambda (pD4078@name) (let ((pD407a@t pD4078@name)) (if (memv pD407a@t '(quote)) pD3075@quote-transformer (if (memv pD407a@t '(lambda)) pD3079@lambda-transformer (if (memv pD407a@t '(case-lambda)) pD3077@case-lambda-transformer (if (memv pD407a@t '(letrec)) pD305d@letrec-transformer (if (memv pD407a@t '(letrec*)) pD305f@letrec*-transformer (if (memv pD407a@t '(let)) pD305b@let-transformer (if (memv pD407a@t '(if)) pD306d@if-transformer (if (memv pD407a@t '(and)) pD306f@and-transformer (if (memv pD407a@t '(or)) pD3071@or-transformer (if (memv pD407a@t '(foreign-call)) pD30c1@foreign-call-transformer (if (memv pD407a@t '(syntax-case)) pD30cd@syntax-case-transformer (if (memv pD407a@t '(syntax)) pD30d1@syntax-transformer (if (memv pD407a@t '(type-descriptor)) pD3063@type-descriptor-transformer (if (memv pD407a@t '(record-type-descriptor)) pD3065@record-type-descriptor-transformer (if (memv pD407a@t '(record-constructor-descriptor)) pD3067@record-constructor-descriptor-transformer (if (memv pD407a@t '(fluid-let-syntax)) pD3061@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" pD4078@name)))))))))))))))))))) (set! pD4ba2@pD30d3@core-macro-transformer pD30d3@core-macro-transformer) (set! pD30d5@symbol-macro (lambda (pD407c@x pD407d@set) (let ((pD4080@t pD407c@x)) (let ((pD4082@ls/false (pD30c5@syntax-dispatch pD4080@t '(_ any)))) (if (and pD4082@ls/false (apply (lambda (pD4084@name) (and (pD2ebe@id? pD4084@name) (memq (pD2ec0@id->sym pD4084@name) pD407d@set))) pD4082@ls/false)) (apply (lambda (pD4086@name) (pD307b@bless (list 'quote pD4086@name))) pD4082@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD4080@t)))))) (set! pD4ba3@pD30d5@symbol-macro pD30d5@symbol-macro) (set! pD30d7@macro-transformer (lambda (pD4088@x) (if (procedure? pD4088@x) pD4088@x (if (symbol? pD4088@x) (let ((pD408a@t pD4088@x)) (if (memv pD408a@t '(define-record-type)) pD30b9@define-record-type-macro (if (memv pD408a@t '(define-struct)) pD30b7@define-struct-macro (if (memv pD408a@t '(include)) pD30ad@include-macro (if (memv pD408a@t '(cond)) pD30a9@cond-macro (if (memv pD408a@t '(let)) pD3081@let-macro (if (memv pD408a@t '(do)) pD30a1@do-macro (if (memv pD408a@t '(or)) pD30a5@or-macro (if (memv pD408a@t '(and)) pD30a7@and-macro (if (memv pD408a@t '(let*)) pD30a3@let*-macro (if (memv pD408a@t '(let-values)) pD3083@let-values-macro (if (memv pD408a@t '(let*-values)) pD3085@let*-values-macro (if (memv pD408a@t '(syntax-rules)) pD30b1@syntax-rules-macro (if (memv pD408a@t '(quasiquote)) pD30b3@quasiquote-macro (if (memv pD408a@t '(quasisyntax)) pD30b5@quasisyntax-macro (if (memv pD408a@t '(with-syntax)) pD307d@with-syntax-macro (if (memv pD408a@t '(when)) pD3069@when-macro (if (memv pD408a@t '(unless)) pD306b@unless-macro (if (memv pD408a@t '(case)) pD3073@case-macro (if (memv pD408a@t '(identifier-syntax)) pD309f@identifier-syntax-macro (if (memv pD408a@t '(time)) pD3097@time-macro (if (memv pD408a@t '(delay)) pD3099@delay-macro (if (memv pD408a@t '(assert)) pD309b@assert-macro (if (memv pD408a@t '(endianness)) pD309d@endianness-macro (if (memv pD408a@t '(guard)) pD3093@guard-macro (if (memv pD408a@t '(define-enumeration)) pD3095@define-enumeration-macro (if (memv pD408a@t '(trace-lambda)) pD3087@trace-lambda-macro (if (memv pD408a@t '(trace-define)) pD3089@trace-define-macro (if (memv pD408a@t '(trace-define-syntax)) pD308b@trace-define-syntax-macro (if (memv pD408a@t '(trace-let-syntax)) pD308f@trace-let-syntax-macro (if (memv pD408a@t '(trace-letrec-syntax)) pD3091@trace-letrec-syntax-macro (if (memv pD408a@t '(define-condition-type)) pD30bb@define-condition-type-macro (if (memv pD408a@t '(parameterize)) pD30bf@parameterize-macro (if (memv pD408a@t '(include-into)) pD30af@include-into-macro (if (memv pD408a@t '(eol-style)) (lambda (pD408c@x) (pD30d5@symbol-macro pD408c@x '(none lf cr crlf nel crnel ls))) (if (memv pD408a@t '(error-handling-mode)) (lambda (pD408e@x) (pD30d5@symbol-macro pD408e@x '(ignore raise replace))) (if (memv pD408a@t '(buffer-mode)) (lambda (pD4090@x) (pD30d5@symbol-macro pD4090@x '(none line block))) (if (memv pD408a@t '(file-options)) pD2e39@file-options-macro (if (memv pD408a@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) pD30bd@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" pD4088@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" pD4088@x))))) (set! pD4ba4@pD30d7@macro-transformer pD30d7@macro-transformer) (set! pD30d9@local-macro-transformer (lambda (pD4092@x) (car pD4092@x))) (set! pD4ba5@pD30d9@local-macro-transformer pD30d9@local-macro-transformer) (set! pD30db@do-macro-call (lambda (pD4094@transformer pD4095@expr) (let ((pD4098@out (pD4094@transformer (pD2ea8@add-mark pD2ea2@anti-mark pD4095@expr '#f)))) (begin (let pD409c@f ((pD409a@x pD4098@out)) (if (not (pD2e8a@stx? pD409a@x)) (if (pair? pD409a@x) (begin (pD409c@f (car pD409a@x)) (pD409c@f (cdr pD409a@x))) (if (vector? pD409a@x) (vector-for-each pD409c@f pD409a@x) (if (symbol? pD409a@x) (pD31a5@syntax-violation '#f '"raw symbol encountered in output of macro" pD4095@expr pD409a@x) (void)))) (void))) (pD2ea8@add-mark (pD2ea0@gen-mark) pD4098@out pD4095@expr))))) (set! pD4ba6@pD30db@do-macro-call pD30db@do-macro-call) (set! pD30dd@chi-macro (lambda (pD409e@p pD409f@e) (pD30db@do-macro-call (pD30d7@macro-transformer pD409e@p) pD409f@e))) (set! pD4ba7@pD30dd@chi-macro pD30dd@chi-macro) (set! pD30df@chi-local-macro (lambda (pD40a2@p pD40a3@e) (pD30db@do-macro-call (pD30d9@local-macro-transformer pD40a2@p) pD40a3@e))) (set! pD4ba8@pD30df@chi-local-macro pD30df@chi-local-macro) (set! pD30e1@chi-global-macro (lambda (pD40a6@p pD40a7@e) (let ((pD40aa@lib (car pD40a6@p)) (pD40ab@loc (cdr pD40a6@p))) (begin (pD2cd5@pD2b24@visit-library pD40aa@lib) (let ((pD40ae@x (symbol-value pD40ab@loc))) (let ((pD40b0@transformer (if (procedure? pD40ae@x) pD40ae@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" pD40ae@x)))) (pD30db@do-macro-call pD40b0@transformer pD40a7@e))))))) (set! pD4ba9@pD30e1@chi-global-macro pD30e1@chi-global-macro) (set! pD30e3@chi-expr* (lambda (pD40b2@e* pD40b3@r pD40b4@mr) (if (null? pD40b2@e*) '() (let ((pD40b8@e (pD30e7@chi-expr (car pD40b2@e*) pD40b3@r pD40b4@mr))) (cons pD40b8@e (pD30e3@chi-expr* (cdr pD40b2@e*) pD40b3@r pD40b4@mr)))))) (set! pD4baa@pD30e3@chi-expr* pD30e3@chi-expr*) (set! pD30e5@chi-application (lambda (pD40ba@e pD40bb@r pD40bc@mr) (let ((pD40c0@t pD40ba@e)) (let ((pD40c2@ls/false (pD30c5@syntax-dispatch pD40c0@t '(any . each-any)))) (if pD40c2@ls/false (apply (lambda (pD40c4@rator pD40c5@rands) (let ((pD40c8@rator (pD30e7@chi-expr pD40c4@rator pD40bb@r pD40bc@mr))) (cons pD40c8@rator (pD30e3@chi-expr* pD40c5@rands pD40bb@r pD40bc@mr)))) pD40c2@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD40c0@t)))))) (set! pD4bab@pD30e5@chi-application pD30e5@chi-application) (set! pD30e7@chi-expr (lambda (pD40ca@e pD40cb@r pD40cc@mr) (call-with-values (lambda () (pD2ee0@syntax-type pD40ca@e pD40cb@r)) (lambda (pD40d6@pD40d1 pD40d7@pD40d3 pD40d8@pD40d5) (let ((pD40dc@kwd pD40d8@pD40d5) (pD40dd@value pD40d7@pD40d3) (pD40de@type pD40d6@pD40d1)) (let ((pD40e2@t pD40de@type)) (if (memv pD40e2@t '(core-macro)) (let ((pD40e4@transformer (pD30d3@core-macro-transformer pD40dd@value))) (pD40e4@transformer pD40ca@e pD40cb@r pD40cc@mr)) (if (memv pD40e2@t '(global)) (let ((pD40e6@lib (car pD40dd@value))) (let ((pD40e8@loc (cdr pD40dd@value))) (begin ((pD312d@inv-collector) pD40e6@lib) pD40e8@loc))) (if (memv pD40e2@t '(core-prim)) (let ((pD40ea@name pD40dd@value)) (list 'primitive pD40ea@name)) (if (memv pD40e2@t '(call)) (pD30e5@chi-application pD40ca@e pD40cb@r pD40cc@mr) (if (memv pD40e2@t '(lexical)) (let ((pD40ec@lex (pD304f@lexical-var pD40dd@value))) pD40ec@lex) (if (memv pD40e2@t '(global-macro global-macro!)) (pD30e7@chi-expr (pD30e1@chi-global-macro pD40dd@value pD40ca@e) pD40cb@r pD40cc@mr) (if (memv pD40e2@t '(local-macro local-macro!)) (pD30e7@chi-expr (pD30df@chi-local-macro pD40dd@value pD40ca@e) pD40cb@r pD40cc@mr) (if (memv pD40e2@t '(macro macro!)) (pD30e7@chi-expr (pD30dd@chi-macro pD40dd@value pD40ca@e) pD40cb@r pD40cc@mr) (if (memv pD40e2@t '(constant)) (let ((pD40ee@datum pD40dd@value)) (list 'quote pD40ee@datum)) (if (memv pD40e2@t '(set!)) (pD30e9@chi-set! pD40ca@e pD40cb@r pD40cc@mr) (if (memv pD40e2@t '(begin)) (let ((pD40f0@t pD40ca@e)) (let ((pD40f2@ls/false (pD30c5@syntax-dispatch pD40f0@t '(_ any . each-any)))) (if pD40f2@ls/false (apply (lambda (pD40f4@x pD40f5@x*) (pD2e23@pD2d7d@build-sequence '#f (pD30e3@chi-expr* (cons pD40f4@x pD40f5@x*) pD40cb@r pD40cc@mr))) pD40f2@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD40f0@t)))) (if (memv pD40e2@t '(let-syntax letrec-syntax)) (let ((pD40f8@t pD40ca@e)) (let ((pD40fa@ls/false (pD30c5@syntax-dispatch pD40f8@t '(_ #(each (any any)) any . each-any)))) (if (and pD40fa@ls/false (apply (lambda (pD40fc@xlhs* pD40fd@xrhs* pD40fe@xbody pD40ff@xbody*) (if (not (pD2ec6@valid-bound-ids? pD40fc@xlhs*)) (pD31a5@syntax-violation '#f '"invalid identifiers" pD40ca@e) (void))) pD40fa@ls/false)) (apply (lambda (pD4104@xlhs* pD4105@xrhs* pD4106@xbody pD4107@xbody*) (let ((pD410c@xlab* (map pD2e4a@gen-label pD4104@xlhs*))) (let ((pD410e@xrib (pD2e7e@make-full-rib pD4104@xlhs* pD410c@xlab*))) (let ((pD4110@xb* (map (lambda (pD4112@x) (pD2ef6@make-eval-transformer (pD311f@expand-transformer (if (eq? pD40de@type 'let-syntax) pD4112@x (pD2eaa@add-subst pD410e@xrib pD4112@x)) pD40cc@mr))) pD4105@xrhs*))) (pD2e23@pD2d7d@build-sequence '#f (pD30e3@chi-expr* (map (lambda (pD4114@x) (pD2eaa@add-subst pD410e@xrib pD4114@x)) (cons pD4106@xbody pD4107@xbody*)) (append (map cons pD410c@xlab* pD4110@xb*) pD40cb@r) (append (map cons pD410c@xlab* pD4110@xb*) pD40cc@mr))))))) pD40fa@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD40f8@t)))) (if (memv pD40e2@t '(displaced-lexical)) (pD31a5@syntax-violation '#f '"identifier out of context" pD40ca@e) (if (memv pD40e2@t '(syntax)) (pD31a5@syntax-violation '#f '"reference to pattern variable outside a syntax form" pD40ca@e) (if (memv pD40e2@t '(define define-syntax module import library)) (pD31a5@syntax-violation '#f (string-append (let ((pD4116@t pD40de@type)) (if (memv pD4116@t '(define)) '"a definition" (if (memv pD4116@t '(define-syntax)) '"a define-syntax" (if (memv pD4116@t '(module)) '"a module definition" (if (memv pD4116@t '(library)) '"a library definition" (if (memv pD4116@t '(import)) '"an import declaration" (if (memv pD4116@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") pD40ca@e) (if (memv pD40e2@t '(mutable)) (pD31a5@syntax-violation '#f '"attempt to reference an unexportable variable" pD40ca@e) (pD31a5@syntax-violation '#f '"invalid expression" pD40ca@e))))))))))))))))))))))) (set! pD4bac@pD30e7@chi-expr pD30e7@chi-expr) (set! pD30e9@chi-set! (lambda (pD4118@e pD4119@r pD411a@mr) (let ((pD411e@t pD4118@e)) (let ((pD4120@ls/false (pD30c5@syntax-dispatch pD411e@t '(_ any any)))) (if (and pD4120@ls/false (apply (lambda (pD4122@x pD4123@v) (pD2ebe@id? pD4122@x)) pD4120@ls/false)) (apply (lambda (pD4126@x pD4127@v) (call-with-values (lambda () (pD2ee0@syntax-type pD4126@x pD4119@r)) (lambda (pD4130@pD412b pD4131@pD412d pD4132@pD412f) (let ((pD4136@kwd pD4132@pD412f) (pD4137@value pD4131@pD412d) (pD4138@type pD4130@pD412b)) (let ((pD413c@t pD4138@type)) (if (memv pD413c@t '(lexical)) (begin (pD3053@set-lexical-mutable! pD4137@value '#t) (list 'set! (pD304f@lexical-var pD4137@value) (pD30e7@chi-expr pD4127@v pD4119@r pD411a@mr))) (if (memv pD413c@t '(core-prim)) (pD31a5@syntax-violation '#f '"cannot modify imported core primitive" pD4118@e) (if (memv pD413c@t '(global)) (pD31a5@syntax-violation '#f '"attempt to modify imported binding" pD4118@e) (if (memv pD413c@t '(global-macro!)) (pD30e7@chi-expr (pD30e1@chi-global-macro pD4137@value pD4118@e) pD4119@r pD411a@mr) (if (memv pD413c@t '(local-macro!)) (pD30e7@chi-expr (pD30df@chi-local-macro pD4137@value pD4118@e) pD4119@r pD411a@mr) (if (memv pD413c@t '(mutable)) (pD31a5@syntax-violation '#f '"attempt to assign to an unexportable variable" pD4118@e) (pD31a5@syntax-violation '#f '"invalid syntax" pD4118@e)))))))))))) pD4120@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD411e@t)))))) (set! pD4bad@pD30e9@chi-set! pD30e9@chi-set!) (set! pD30eb@verify-formals (lambda (pD413e@fmls pD413f@stx) (let ((pD4142@t pD413e@fmls)) (let ((pD4144@ls/false (pD30c5@syntax-dispatch pD4142@t 'each-any))) (if pD4144@ls/false (apply (lambda (pD4146@x*) (if (not (pD2ec6@valid-bound-ids? pD4146@x*)) (pD307f@invalid-fmls-error pD413f@stx pD413e@fmls) (void))) pD4144@ls/false) (let ((pD4148@t pD4142@t)) (let ((pD414a@ls/false (pD30c5@syntax-dispatch pD4148@t '#(each+ any () any)))) (if pD414a@ls/false (apply (lambda (pD414c@x* pD414d@x) (if (not (pD2ec6@valid-bound-ids? (cons pD414d@x pD414c@x*))) (pD307f@invalid-fmls-error pD413f@stx pD413e@fmls) (void))) pD414a@ls/false) (let ((pD4150@t pD4148@t)) (let ((pD4152@ls/false (pD30c5@syntax-dispatch pD4150@t '_))) (if pD4152@ls/false (apply (lambda () (pD31a5@syntax-violation '#f '"invalid syntax" pD413f@stx)) pD4152@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD4150@t)))))))))))) (set! pD4bae@pD30eb@verify-formals pD30eb@verify-formals) (set! pD30ed@chi-lambda-clause (lambda (pD4154@stx pD4155@fmls pD4156@body* pD4157@r pD4158@mr) (let ((pD415e@t pD4155@fmls)) (let ((pD4160@ls/false (pD30c5@syntax-dispatch pD415e@t 'each-any))) (if pD4160@ls/false (apply (lambda (pD4162@x*) (begin (pD30eb@verify-formals pD4155@fmls pD4154@stx) (let ((pD4164@lex* (map pD2e46@gen-lexical pD4162@x*)) (pD4165@lab* (map pD2e4a@gen-label pD4162@x*))) (values pD4164@lex* (pD30fd@chi-internal (pD2eaa@add-subst (pD2e7e@make-full-rib pD4162@x* pD4165@lab*) pD4156@body*) (pD3057@add-lexicals pD4165@lab* pD4164@lex* pD4157@r) pD4158@mr))))) pD4160@ls/false) (let ((pD4168@t pD415e@t)) (let ((pD416a@ls/false (pD30c5@syntax-dispatch pD4168@t '#(each+ any () any)))) (if pD416a@ls/false (apply (lambda (pD416c@x* pD416d@x) (begin (pD30eb@verify-formals pD4155@fmls pD4154@stx) (let ((pD4170@lex* (map pD2e46@gen-lexical pD416c@x*)) (pD4171@lab* (map pD2e4a@gen-label pD416c@x*)) (pD4172@lex (pD2e46@gen-lexical pD416d@x)) (pD4173@lab (pD2e4a@gen-label pD416d@x))) (values (append pD4170@lex* pD4172@lex) (pD30fd@chi-internal (pD2eaa@add-subst (pD2e7e@make-full-rib (cons pD416d@x pD416c@x*) (cons pD4173@lab pD4171@lab*)) pD4156@body*) (pD3057@add-lexicals (cons pD4173@lab pD4171@lab*) (cons pD4172@lex pD4170@lex*) pD4157@r) pD4158@mr))))) pD416a@ls/false) (let ((pD4178@t pD4168@t)) (let ((pD417a@ls/false (pD30c5@syntax-dispatch pD4178@t '_))) (if pD417a@ls/false (apply (lambda () (pD31a5@syntax-violation '#f '"invalid syntax" pD4155@fmls)) pD417a@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD4178@t)))))))))))) (set! pD4baf@pD30ed@chi-lambda-clause pD30ed@chi-lambda-clause) (set! pD30ef@chi-lambda-clause* (lambda (pD417c@stx pD417d@fmls* pD417e@body** pD417f@r pD4180@mr) (if (null? pD417d@fmls*) (values '() '()) (call-with-values (lambda () (pD30ed@chi-lambda-clause pD417c@stx (car pD417d@fmls*) (car pD417e@body**) pD417f@r pD4180@mr)) (lambda (pD418a@pD4187 pD418b@pD4189) (let ((pD418e@b pD418b@pD4189) (pD418f@a pD418a@pD4187)) (call-with-values (lambda () (pD30ef@chi-lambda-clause* pD417c@stx (cdr pD417d@fmls*) (cdr pD417e@body**) pD417f@r pD4180@mr)) (lambda (pD4196@pD4193 pD4197@pD4195) (let ((pD419a@b* pD4197@pD4195) (pD419b@a* pD4196@pD4193)) (values (cons pD418f@a pD419b@a*) (cons pD418e@b pD419a@b*))))))))))) (set! pD4bb0@pD30ef@chi-lambda-clause* pD30ef@chi-lambda-clause*) (set! pD30f1@chi-defun (lambda (pD419e@x pD419f@r pD41a0@mr) (let ((pD41a4@fmls (car pD419e@x)) (pD41a5@body* (cdr pD419e@x))) (call-with-values (lambda () (pD30ed@chi-lambda-clause pD41a4@fmls pD41a4@fmls pD41a5@body* pD419f@r pD41a0@mr)) (lambda (pD41ac@pD41a9 pD41ad@pD41ab) (let ((pD41b0@body pD41ad@pD41ab) (pD41b1@fmls pD41ac@pD41a9)) (pD2e21@pD2d4d@build-lambda '#f pD41b1@fmls pD41b0@body))))))) (set! pD4bb1@pD30f1@chi-defun pD30f1@chi-defun) (set! pD30f3@chi-rhs (lambda (pD41b4@rhs pD41b5@r pD41b6@mr) (let ((pD41ba@t (car pD41b4@rhs))) (if (memv pD41ba@t '(defun)) (pD30f1@chi-defun (cdr pD41b4@rhs) pD41b5@r pD41b6@mr) (if (memv pD41ba@t '(expr)) (let ((pD41bc@expr (cdr pD41b4@rhs))) (pD30e7@chi-expr pD41bc@expr pD41b5@r pD41b6@mr)) (if (memv pD41ba@t '(top-expr)) (let ((pD41be@expr (cdr pD41b4@rhs))) (pD2e23@pD2d7d@build-sequence '#f (list (pD30e7@chi-expr pD41be@expr pD41b5@r pD41b6@mr) (pD2e24@pD2d7f@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" pD41b4@rhs))))))) (set! pD4bb2@pD30f3@chi-rhs pD30f3@chi-rhs) (set! pD30f5@expand-interaction-rhs*/init* (lambda (pD41c0@lhs* pD41c1@rhs* pD41c2@init* pD41c3@r pD41c4@mr) (let pD41ce@f ((pD41ca@lhs* pD41c0@lhs*) (pD41cb@rhs* pD41c1@rhs*)) (if (null? pD41ca@lhs*) (map (lambda (pD41d0@x) (pD30e7@chi-expr pD41d0@x pD41c3@r pD41c4@mr)) pD41c2@init*) (let ((pD41d2@lhs (car pD41ca@lhs*)) (pD41d3@rhs (car pD41cb@rhs*))) (let ((pD41d6@t (car pD41d3@rhs))) (if (memv pD41d6@t '(defun)) (let ((pD41d8@rhs (pD30f1@chi-defun (cdr pD41d3@rhs) pD41c3@r pD41c4@mr))) (cons (list 'set! pD41d2@lhs pD41d8@rhs) (pD41ce@f (cdr pD41ca@lhs*) (cdr pD41cb@rhs*)))) (if (memv pD41d6@t '(expr)) (let ((pD41da@rhs (pD30e7@chi-expr (cdr pD41d3@rhs) pD41c3@r pD41c4@mr))) (cons (list 'set! pD41d2@lhs pD41da@rhs) (pD41ce@f (cdr pD41ca@lhs*) (cdr pD41cb@rhs*)))) (if (memv pD41d6@t '(top-expr)) (let ((pD41dc@e (pD30e7@chi-expr (cdr pD41d3@rhs) pD41c3@r pD41c4@mr))) (cons pD41dc@e (pD41ce@f (cdr pD41ca@lhs*) (cdr pD41cb@rhs*)))) (error 'expand-interaction '"invallid" pD41d3@rhs)))))))))) (set! pD4bb3@pD30f5@expand-interaction-rhs*/init* pD30f5@expand-interaction-rhs*/init*) (set! pD30f7@chi-rhs* (lambda (pD41de@rhs* pD41df@r pD41e0@mr) (let pD41e6@f ((pD41e4@ls pD41de@rhs*)) (if (null? pD41e4@ls) '() (let ((pD41e8@a (pD30f3@chi-rhs (car pD41e4@ls) pD41df@r pD41e0@mr))) (cons pD41e8@a (pD41e6@f (cdr pD41e4@ls)))))))) (set! pD4bb4@pD30f7@chi-rhs* pD30f7@chi-rhs*) (set! pD30f9@find-bound=? (lambda (pD41ea@x pD41eb@lhs* pD41ec@rhs*) (if (null? pD41eb@lhs*) '#f (if (pD2ec2@bound-id=? pD41ea@x (car pD41eb@lhs*)) (car pD41ec@rhs*) (pD30f9@find-bound=? pD41ea@x (cdr pD41eb@lhs*) (cdr pD41ec@rhs*)))))) (set! pD4bb5@pD30f9@find-bound=? pD30f9@find-bound=?) (set! pD30fb@find-dups (lambda (pD41f0@ls) (let pD41f6@f ((pD41f2@ls pD41f0@ls) (pD41f3@dups '())) (if (null? pD41f2@ls) pD41f3@dups (let ((pD41f8@t (pD30f9@find-bound=? (car pD41f2@ls) (cdr pD41f2@ls) (cdr pD41f2@ls)))) (if pD41f8@t ((lambda (pD41fa@x) (pD41f6@f (cdr pD41f2@ls) (cons (list (car pD41f2@ls) pD41fa@x) pD41f3@dups))) pD41f8@t) (pD41f6@f (cdr pD41f2@ls) pD41f3@dups))))))) (set! pD4bb6@pD30fb@find-dups pD30fb@find-dups) (set! pD30fd@chi-internal (lambda (pD41fc@e* pD41fd@r pD41fe@mr) (let ((pD4202@rib (pD2e72@make-empty-rib))) (call-with-values (lambda () (pD311d@chi-body* (map (lambda (pD4214@x) (pD2eaa@add-subst pD4202@rib pD4214@x)) (pD2ebc@syntax->list pD41fc@e*)) pD41fd@r pD41fe@mr '() '() '() '() '() pD4202@rib '#f)) (lambda (pD4216@pD4205 pD4217@pD4207 pD4218@pD4209 pD4219@pD420b pD421a@pD420d pD421b@pD420f pD421c@pD4211 pD421d@pD4213) (let ((pD4226@_exp* pD421d@pD4213) (pD4227@kwd* pD421c@pD4211) (pD4228@mod** pD421b@pD420f) (pD4229@rhs* pD421a@pD420d) (pD422a@lex* pD4219@pD420b) (pD422b@mr pD4218@pD4209) (pD422c@r pD4217@pD4207) (pD422d@e* pD4216@pD4205)) (begin (if (null? pD422d@e*) (pD31a5@syntax-violation '#f '"no expression in body" pD422d@e*) (void)) (let ((pD4236@init* (pD30e3@chi-expr* (append (apply append (reverse pD4228@mod**)) pD422d@e*) pD422c@r pD422b@mr))) (let ((pD4238@rhs* (pD30f7@chi-rhs* pD4229@rhs* pD422c@r pD422b@mr))) (pD2e28@pD2d87@build-letrec* '#f (reverse pD422a@lex*) (reverse pD4238@rhs*) (pD2e23@pD2d7d@build-sequence '#f pD4236@init*))))))))))) (set! pD4bb7@pD30fd@chi-internal pD30fd@chi-internal) (set! pD30ff@parse-module (lambda (pD423a@e) (let ((pD423c@t pD423a@e)) (let ((pD423e@ls/false (pD30c5@syntax-dispatch pD423c@t '(_ each-any . each-any)))) (if pD423e@ls/false (apply (lambda (pD4240@export* pD4241@b*) (begin (if (not (for-all pD2ebe@id? pD4240@export*)) (pD31a5@syntax-violation '#f '"module exports must be identifiers" pD423a@e) (void)) (values '#f (list->vector pD4240@export*) pD4241@b*))) pD423e@ls/false) (let ((pD4244@t pD423c@t)) (let ((pD4246@ls/false (pD30c5@syntax-dispatch pD4244@t '(_ any each-any . each-any)))) (if pD4246@ls/false (apply (lambda (pD4248@name pD4249@export* pD424a@b*) (begin (if (not (pD2ebe@id? pD4248@name)) (pD31a5@syntax-violation '#f '"module name must be an identifier" pD423a@e) (void)) (if (not (for-all pD2ebe@id? pD4249@export*)) (pD31a5@syntax-violation '#f '"module exports must be identifiers" pD423a@e) (void)) (values pD4248@name (list->vector pD4249@export*) pD424a@b*))) pD4246@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD4244@t))))))))) (set! pD4bb8@pD30ff@parse-module pD30ff@parse-module) (set! pD3109@module-interface? (lambda (pD424e@x) (and (simple-struct? pD424e@x) (eq? (simple-struct-name pD424e@x) 'module-interface)))) (set! pD4bb9@pD3109@module-interface? pD3109@module-interface?) (set! pD310b@module-interface-first-mark (lambda (pD4250@x) (simple-struct-ref pD4250@x '0))) (set! pD4bba@pD310b@module-interface-first-mark pD310b@module-interface-first-mark) (set! pD310d@set-module-interface-first-mark! (lambda (pD4252@x pD4253@val) (simple-struct-set! pD4252@x '0 pD4253@val))) (set! pD4bbb@pD310d@set-module-interface-first-mark! pD310d@set-module-interface-first-mark!) (set! pD310f@module-interface-exp-id-vec (lambda (pD4256@x) (simple-struct-ref pD4256@x '1))) (set! pD4bbc@pD310f@module-interface-exp-id-vec pD310f@module-interface-exp-id-vec) (set! pD3111@set-module-interface-exp-id-vec! (lambda (pD4258@x pD4259@val) (simple-struct-set! pD4258@x '1 pD4259@val))) (set! pD4bbd@pD3111@set-module-interface-exp-id-vec! pD3111@set-module-interface-exp-id-vec!) (set! pD3113@module-interface-exp-lab-vec (lambda (pD425c@x) (simple-struct-ref pD425c@x '2))) (set! pD4bbe@pD3113@module-interface-exp-lab-vec pD3113@module-interface-exp-lab-vec) (set! pD3115@set-module-interface-exp-lab-vec! (lambda (pD425e@x pD425f@val) (simple-struct-set! pD425e@x '2 pD425f@val))) (set! pD4bbf@pD3115@set-module-interface-exp-lab-vec! pD3115@set-module-interface-exp-lab-vec!) (set! pD3117@dummy '3) (set! pD4bc0@pD3117@dummy pD3117@dummy) (set! pD3119@module-interface-exp-id* (lambda (pD4262@iface pD4263@id) (let ((pD4267@diff-marks '#f)) (begin (set! pD4267@diff-marks (lambda (pD426e@ls pD426f@x) (begin (if (null? pD426e@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((pD4272@a (car pD426e@ls))) (if (eq? pD4272@a pD426f@x) '() (cons pD4272@a (pD4267@diff-marks (cdr pD426e@ls) pD426f@x))))))) (let ((pD4268@diff (pD4267@diff-marks (pD2e90@stx-mark* pD4263@id) (pD310b@module-interface-first-mark pD4262@iface))) (pD4269@id-vec (pD310f@module-interface-exp-id-vec pD4262@iface))) (if (null? pD4268@diff) pD4269@id-vec (vector-map (lambda (pD426c@x) (make-simple-struct 'stx '5 (list (pD2e8c@stx-expr pD426c@x) (append pD4268@diff (pD2e90@stx-mark* pD426c@x)) '() '()))) pD4269@id-vec))))))) (set! pD4bc1@pD3119@module-interface-exp-id* pD3119@module-interface-exp-id*) (set! pD311b@chi-internal-module (lambda (pD4274@e pD4275@r pD4276@mr pD4277@lex* pD4278@rhs* pD4279@mod** pD427a@kwd*) (call-with-values (lambda () (pD30ff@parse-module pD4274@e)) (lambda (pD4288@pD4283 pD4289@pD4285 pD428a@pD4287) (let ((pD428e@e* pD428a@pD4287) (pD428f@exp-id* pD4289@pD4285) (pD4290@name pD4288@pD4283)) (let ((pD4294@rib (pD2e72@make-empty-rib))) (let ((pD4296@e* (map (lambda (pD4298@x) (pD2eaa@add-subst pD4294@rib pD4298@x)) (pD2ebc@syntax->list pD428e@e*)))) (call-with-values (lambda () (pD311d@chi-body* pD4296@e* pD4275@r pD4276@mr pD4277@lex* pD4278@rhs* pD4279@mod** pD427a@kwd* '() pD4294@rib '#f)) (lambda (pD42aa@pD429b pD42ab@pD429d pD42ac@pD429f pD42ad@pD42a1 pD42ae@pD42a3 pD42af@pD42a5 pD42b0@pD42a7 pD42b1@pD42a9) (let ((pD42ba@_exp* pD42b1@pD42a9) (pD42bb@kwd* pD42b0@pD42a7) (pD42bc@mod** pD42af@pD42a5) (pD42bd@rhs* pD42ae@pD42a3) (pD42be@lex* pD42ad@pD42a1) (pD42bf@mr pD42ac@pD429f) (pD42c0@r pD42ab@pD429d) (pD42c1@e* pD42aa@pD429b)) (let ((pD42ca@exp-lab* (vector-map (lambda (pD42ce@x) (or (pD2ed4@id->label (make-simple-struct 'stx '5 (list (pD2ec0@id->sym pD42ce@x) (pD2e90@stx-mark* pD42ce@x) (list pD4294@rib) '()))) (pD31a5@syntax-violation '#f '"cannot find module export" pD42ce@x))) pD428f@exp-id*)) (pD42cb@mod** (cons pD42c1@e* pD42bc@mod**))) (if (not pD4290@name) (values pD42be@lex* pD42bd@rhs* pD428f@exp-id* pD42ca@exp-lab* pD42c0@r pD42bf@mr pD42cb@mod** pD42bb@kwd*) (let ((pD42d0@lab (pD2e4a@gen-label 'module)) (pD42d1@iface (make-simple-struct 'module-interface '4 (list (car (pD2e90@stx-mark* pD4290@name)) (vector-map (lambda (pD42d4@x) (make-simple-struct 'stx '5 (list (pD2e8c@stx-expr pD42d4@x) (pD2e90@stx-mark* pD42d4@x) '() '()))) pD428f@exp-id*) pD42ca@exp-lab*)))) (values pD42be@lex* pD42bd@rhs* (vector pD4290@name) (vector pD42d0@lab) (cons (cons pD42d0@lab (cons '$module pD42d1@iface)) pD42c0@r) (cons (cons pD42d0@lab (cons '$module pD42d1@iface)) pD42bf@mr) pD42cb@mod** pD42bb@kwd*)))))))))))))) (set! pD4bc2@pD311b@chi-internal-module pD311b@chi-internal-module) (set! pD311d@chi-body* (lambda (pD42d6@e* pD42d7@r pD42d8@mr pD42d9@lex* pD42da@rhs* pD42db@mod** pD42dc@kwd* pD42dd@exp* pD42de@rib pD42df@top?) (if (null? pD42d6@e*) (values pD42d6@e* pD42d7@r pD42d8@mr pD42d9@lex* pD42da@rhs* pD42db@mod** pD42dc@kwd* pD42dd@exp*) (let ((pD42ea@e (car pD42d6@e*))) (call-with-values (lambda () (pD2ee0@syntax-type pD42ea@e pD42d7@r)) (lambda (pD42f2@pD42ed pD42f3@pD42ef pD42f4@pD42f1) (let ((pD42f8@kwd pD42f4@pD42f1) (pD42f9@value pD42f3@pD42ef) (pD42fa@type pD42f2@pD42ed)) (let ((pD42fe@kwd* (if (pD2ebe@id? pD42f8@kwd) (cons pD42f8@kwd pD42dc@kwd*) pD42dc@kwd*))) (let ((pD4300@t pD42fa@type)) (if (memv pD4300@t '(define)) (call-with-values (lambda () (pD3047@parse-define pD42ea@e)) (lambda (pD4306@pD4303 pD4307@pD4305) (let ((pD430a@rhs pD4307@pD4305) (pD430b@id pD4306@pD4303)) (begin (if (pD2eca@bound-id-member? pD430b@id pD42fe@kwd*) (pD31a5@syntax-violation '#f '"cannot redefine keyword" pD42ea@e) (void)) (call-with-values (lambda () (pD2e4e@gen-define-label+loc pD430b@id pD42de@rib)) (lambda (pD4312@pD430f pD4313@pD4311) (let ((pD4316@lex pD4313@pD4311) (pD4317@lab pD4312@pD430f)) (begin (pD2e74@extend-rib! pD42de@rib pD430b@id pD4317@lab) (pD311d@chi-body* (cdr pD42d6@e*) (pD3055@add-lexical pD4317@lab pD4316@lex pD42d7@r) pD42d8@mr (cons pD4316@lex pD42d9@lex*) (cons pD430a@rhs pD42da@rhs*) pD42db@mod** pD42fe@kwd* pD42dd@exp* pD42de@rib pD42df@top?))))))))) (if (memv pD4300@t '(define-syntax)) (call-with-values (lambda () (pD3049@parse-define-syntax pD42ea@e)) (lambda (pD431e@pD431b pD431f@pD431d) (let ((pD4322@rhs pD431f@pD431d) (pD4323@id pD431e@pD431b)) (begin (if (pD2eca@bound-id-member? pD4323@id pD42fe@kwd*) (pD31a5@syntax-violation '#f '"cannot redefine keyword" pD42ea@e) (void)) (let ((pD4326@lab (pD2e50@gen-define-label pD4323@id pD42de@rib)) (pD4327@expanded-rhs (pD311f@expand-transformer pD4322@rhs pD42d8@mr))) (begin (pD2e74@extend-rib! pD42de@rib pD4323@id pD4326@lab) (let ((pD432a@b (pD2ef6@make-eval-transformer pD4327@expanded-rhs))) (pD311d@chi-body* (cdr pD42d6@e*) (cons (cons pD4326@lab pD432a@b) pD42d7@r) (cons (cons pD4326@lab pD432a@b) pD42d8@mr) pD42d9@lex* pD42da@rhs* pD42db@mod** pD42fe@kwd* pD42dd@exp* pD42de@rib pD42df@top?)))))))) (if (memv pD4300@t '(let-syntax letrec-syntax)) (let ((pD432c@t pD42ea@e)) (let ((pD432e@ls/false (pD30c5@syntax-dispatch pD432c@t '(_ #(each (any any)) . each-any)))) (if (and pD432e@ls/false (apply (lambda (pD4330@xlhs* pD4331@xrhs* pD4332@xbody*) (if (not (pD2ec6@valid-bound-ids? pD4330@xlhs*)) (pD31a5@syntax-violation '#f '"invalid identifiers" pD42ea@e) (void))) pD432e@ls/false)) (apply (lambda (pD4336@xlhs* pD4337@xrhs* pD4338@xbody*) (let ((pD433c@xlab* (map pD2e4a@gen-label pD4336@xlhs*))) (let ((pD433e@xrib (pD2e7e@make-full-rib pD4336@xlhs* pD433c@xlab*))) (let ((pD4340@xb* (map (lambda (pD4342@x) (pD2ef6@make-eval-transformer (pD311f@expand-transformer (if (eq? pD42fa@type 'let-syntax) pD4342@x (pD2eaa@add-subst pD433e@xrib pD4342@x)) pD42d8@mr))) pD4337@xrhs*))) (pD311d@chi-body* (append (map (lambda (pD4344@x) (pD2eaa@add-subst pD433e@xrib pD4344@x)) pD4338@xbody*) (cdr pD42d6@e*)) (append (map cons pD433c@xlab* pD4340@xb*) pD42d7@r) (append (map cons pD433c@xlab* pD4340@xb*) pD42d8@mr) pD42d9@lex* pD42da@rhs* pD42db@mod** pD42fe@kwd* pD42dd@exp* pD42de@rib pD42df@top?))))) pD432e@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD432c@t)))) (if (memv pD4300@t '(begin)) (let ((pD4346@t pD42ea@e)) (let ((pD4348@ls/false (pD30c5@syntax-dispatch pD4346@t '(_ . each-any)))) (if pD4348@ls/false (apply (lambda (pD434a@x*) (pD311d@chi-body* (append pD434a@x* (cdr pD42d6@e*)) pD42d7@r pD42d8@mr pD42d9@lex* pD42da@rhs* pD42db@mod** pD42fe@kwd* pD42dd@exp* pD42de@rib pD42df@top?)) pD4348@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD4346@t)))) (if (memv pD4300@t '(global-macro global-macro!)) (pD311d@chi-body* (cons (pD2eaa@add-subst pD42de@rib (pD30e1@chi-global-macro pD42f9@value pD42ea@e)) (cdr pD42d6@e*)) pD42d7@r pD42d8@mr pD42d9@lex* pD42da@rhs* pD42db@mod** pD42fe@kwd* pD42dd@exp* pD42de@rib pD42df@top?) (if (memv pD4300@t '(local-macro local-macro!)) (pD311d@chi-body* (cons (pD2eaa@add-subst pD42de@rib (pD30df@chi-local-macro pD42f9@value pD42ea@e)) (cdr pD42d6@e*)) pD42d7@r pD42d8@mr pD42d9@lex* pD42da@rhs* pD42db@mod** pD42fe@kwd* pD42dd@exp* pD42de@rib pD42df@top?) (if (memv pD4300@t '(macro macro!)) (pD311d@chi-body* (cons (pD2eaa@add-subst pD42de@rib (pD30dd@chi-macro pD42f9@value pD42ea@e)) (cdr pD42d6@e*)) pD42d7@r pD42d8@mr pD42d9@lex* pD42da@rhs* pD42db@mod** pD42fe@kwd* pD42dd@exp* pD42de@rib pD42df@top?) (if (memv pD4300@t '(module)) (call-with-values (lambda () (pD311b@chi-internal-module pD42ea@e pD42d7@r pD42d8@mr pD42d9@lex* pD42da@rhs* pD42db@mod** pD42fe@kwd*)) (lambda (pD435c@pD434d pD435d@pD434f pD435e@pD4351 pD435f@pD4353 pD4360@pD4355 pD4361@pD4357 pD4362@pD4359 pD4363@pD435b) (let ((pD436c@kwd* pD4363@pD435b) (pD436d@mod** pD4362@pD4359) (pD436e@mr pD4361@pD4357) (pD436f@r pD4360@pD4355) (pD4370@m-exp-lab* pD435f@pD4353) (pD4371@m-exp-id* pD435e@pD4351) (pD4372@rhs* pD435d@pD434f) (pD4373@lex* pD435c@pD434d)) (begin (vector-for-each (lambda (pD437c@id pD437d@lab) (pD2e74@extend-rib! pD42de@rib pD437c@id pD437d@lab)) pD4371@m-exp-id* pD4370@m-exp-lab*) (pD311d@chi-body* (cdr pD42d6@e*) pD436f@r pD436e@mr pD4373@lex* pD4372@rhs* pD436d@mod** pD436c@kwd* pD42dd@exp* pD42de@rib pD42df@top?))))) (if (memv pD4300@t '(library)) (begin (pD3187@library-expander (pD2ed2@stx->datum pD42ea@e)) (pD311d@chi-body* (cdr pD42d6@e*) pD42d7@r pD42d8@mr pD42d9@lex* pD42da@rhs* pD42db@mod** pD42fe@kwd* pD42dd@exp* pD42de@rib pD42df@top?)) (if (memv pD4300@t '(export)) (let ((pD4380@t pD42ea@e)) (let ((pD4382@ls/false (pD30c5@syntax-dispatch pD4380@t '(_ . each-any)))) (if pD4382@ls/false (apply (lambda (pD4384@exp-decl*) (pD311d@chi-body* (cdr pD42d6@e*) pD42d7@r pD42d8@mr pD42d9@lex* pD42da@rhs* pD42db@mod** pD42fe@kwd* (append pD4384@exp-decl* pD42dd@exp*) pD42de@rib pD42df@top?)) pD4382@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD4380@t)))) (if (memv pD4300@t '(import)) (let ((pD4387@module-import? '#f) (pD4389@module-import '#f) (pD438b@library-import '#f)) (begin (set! pD4387@module-import? (lambda (pD43da@e) (let ((pD43dc@t pD43da@e)) (let ((pD43de@ls/false (pD30c5@syntax-dispatch pD43dc@t '(_ any)))) (if (and pD43de@ls/false (apply (lambda (pD43e0@id) (pD2ebe@id? pD43e0@id)) pD43de@ls/false)) (apply (lambda (pD43e2@id) '#t) pD43de@ls/false) (let ((pD43e4@t pD43dc@t)) (let ((pD43e6@ls/false (pD30c5@syntax-dispatch pD43e4@t '(_ . each-any)))) (if pD43e6@ls/false (apply (lambda (pD43e8@imp*) '#f) pD43e6@ls/false) (let ((pD43ea@t pD43e4@t)) (let ((pD43ec@ls/false (pD30c5@syntax-dispatch pD43ea@t '_))) (if pD43ec@ls/false (apply (lambda () (pD31a5@syntax-violation '#f '"malformed import form" pD43da@e)) pD43ec@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD43ea@t)))))))))))) (set! pD4389@module-import (lambda (pD43b8@e pD43b9@r) (let ((pD43bc@t pD43b8@e)) (let ((pD43be@ls/false (pD30c5@syntax-dispatch pD43bc@t '(_ any)))) (if (and pD43be@ls/false (apply (lambda (pD43c0@id) (pD2ebe@id? pD43c0@id)) pD43be@ls/false)) (apply (lambda (pD43c2@id) (call-with-values (lambda () (pD2ee0@syntax-type pD43c2@id pD43b9@r)) (lambda (pD43ca@pD43c5 pD43cb@pD43c7 pD43cc@pD43c9) (let ((pD43d0@kwd pD43cc@pD43c9) (pD43d1@value pD43cb@pD43c7) (pD43d2@type pD43ca@pD43c5)) (let ((pD43d6@t pD43d2@type)) (if (memv pD43d6@t '($module)) (let ((pD43d8@iface pD43d1@value)) (values (pD3119@module-interface-exp-id* pD43d8@iface pD43c2@id) (pD3113@module-interface-exp-lab-vec pD43d8@iface))) (pD31a5@syntax-violation '#f '"invalid import" pD43b8@e))))))) pD43be@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD43bc@t)))))) (set! pD438b@library-import (lambda (pD439c@e) (let ((pD439e@t pD439c@e)) (let ((pD43a0@ls/false (pD30c5@syntax-dispatch pD439e@t '(any . each-any)))) (if pD43a0@ls/false (apply (lambda (pD43a2@ctxt pD43a3@imp*) (call-with-values (lambda () (pD3127@parse-import-spec* (pD31ab@syntax->datum pD43a3@imp*))) (lambda (pD43aa@pD43a7 pD43ab@pD43a9) (let ((pD43ae@subst-labels pD43ab@pD43a9) (pD43af@subst-names pD43aa@pD43a7)) (values (vector-map (lambda (pD43b2@name) (pD2e9e@datum->stx pD43a2@ctxt pD43b2@name)) pD43af@subst-names) pD43ae@subst-labels))))) pD43a0@ls/false) (let ((pD43b4@t pD439e@t)) (let ((pD43b6@ls/false (pD30c5@syntax-dispatch pD43b4@t '_))) (if pD43b6@ls/false (apply (lambda () (pD31a5@syntax-violation '#f '"invalid import form" pD439c@e)) pD43b6@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD43b4@t))))))))) (begin (call-with-values (lambda () (if (pD4387@module-import? pD42ea@e) (pD4389@module-import pD42ea@e pD42d7@r) (pD438b@library-import pD42ea@e))) (lambda (pD4390@pD438d pD4391@pD438f) (let ((pD4394@lab* pD4391@pD438f) (pD4395@id* pD4390@pD438d)) (vector-for-each (lambda (pD4398@id pD4399@lab) (pD2e74@extend-rib! pD42de@rib pD4398@id pD4399@lab)) pD4395@id* pD4394@lab*)))) (pD311d@chi-body* (cdr pD42d6@e*) pD42d7@r pD42d8@mr pD42d9@lex* pD42da@rhs* pD42db@mod** pD42fe@kwd* pD42dd@exp* pD42de@rib pD42df@top?)))) (if pD42df@top? (pD311d@chi-body* (cdr pD42d6@e*) pD42d7@r pD42d8@mr (cons (pD2e46@gen-lexical 'dummy) pD42d9@lex*) (cons (cons 'top-expr pD42ea@e) pD42da@rhs*) pD42db@mod** pD42fe@kwd* pD42dd@exp* pD42de@rib pD42df@top?) (values pD42d6@e* pD42d7@r pD42d8@mr pD42d9@lex* pD42da@rhs* pD42db@mod** pD42fe@kwd* pD42dd@exp*)))))))))))))))))))))) (set! pD4bc3@pD311d@chi-body* pD311d@chi-body*) (set! pD311f@expand-transformer (lambda (pD43ee@expr pD43ef@r) (let ((pD43f2@rtc (pD312b@make-collector))) (let ((pD43f4@expanded-rhs (let ((pD43fe@pD43f7 pD312d@inv-collector) (pD43ff@pD43f9 pD312f@vis-collector) (pD4400@pD43fb pD43f2@rtc) (pD4401@pD43fd (lambda (pD4406@x) (values)))) (let ((pD4408@swap (lambda () (begin (let ((pD440a@t (pD43fe@pD43f7))) (begin (pD43fe@pD43f7 pD4400@pD43fb) (set! pD4400@pD43fb pD440a@t))) (let ((pD440c@t (pD43ff@pD43f9))) (begin (pD43ff@pD43f9 pD4401@pD43fd) (set! pD4401@pD43fd pD440c@t))))))) (dynamic-wind pD4408@swap (lambda () (pD30e7@chi-expr pD43ee@expr pD43ef@r pD43ef@r)) pD4408@swap))))) (begin (for-each (let ((pD440e@mark-visit (pD312f@vis-collector))) (lambda (pD4410@x) (begin (pD2cd4@pD2b22@invoke-library pD4410@x) (pD440e@mark-visit pD4410@x)))) (pD43f2@rtc)) pD43f4@expanded-rhs))))) (set! pD4bc4@pD311f@expand-transformer pD311f@expand-transformer) (set! pD3121@parse-exports (lambda (pD4412@exp*) (let pD441a@f ((pD4414@exp* pD4412@exp*) (pD4415@int* '()) (pD4416@ext* '())) (if (null? pD4414@exp*) (begin (if (not (pD2ec6@valid-bound-ids? pD4416@ext*)) (pD31a5@syntax-violation 'export '"invalid exports" (pD30fb@find-dups pD4416@ext*)) (void)) (values (map pD31ab@syntax->datum pD4416@ext*) pD4415@int*)) (let ((pD441c@t (car pD4414@exp*))) (let ((pD441e@ls/false (pD30c5@syntax-dispatch pD441c@t '(any . #(each (any any)))))) (if pD441e@ls/false (apply (lambda (pD4420@rename pD4421@i* pD4422@e*) (begin (if (not (and (eq? (pD31ab@syntax->datum pD4420@rename) 'rename) (for-all pD2ebe@id? pD4421@i*) (for-all pD2ebe@id? pD4422@e*))) (pD31a5@syntax-violation 'export '"invalid export specifier" (car pD4414@exp*)) (void)) (pD441a@f (cdr pD4414@exp*) (append pD4421@i* pD4415@int*) (append pD4422@e* pD4416@ext*)))) pD441e@ls/false) (let ((pD4426@t pD441c@t)) (let ((pD4428@ls/false (pD30c5@syntax-dispatch pD4426@t 'any))) (if pD4428@ls/false (apply (lambda (pD442a@ie) (begin (if (not (pD2ebe@id? pD442a@ie)) (pD31a5@syntax-violation 'export '"invalid export" pD442a@ie) (void)) (pD441a@f (cdr pD4414@exp*) (cons pD442a@ie pD4415@int*) (cons pD442a@ie pD4416@ext*)))) pD4428@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD4426@t))))))))))) (set! pD4bc5@pD3121@parse-exports pD3121@parse-exports) (set! pD3123@parse-library-name (lambda (pD442c@spec) (let ((pD442f@parse '#f)) (begin (set! pD442f@parse (lambda (pD443c@x) (let ((pD443e@t pD443c@x)) (let ((pD4440@ls/false (pD30c5@syntax-dispatch pD443e@t '(each-any)))) (if (and pD4440@ls/false (apply (lambda (pD4442@v*) (for-all (lambda (pD4444@x) (let ((pD4446@x (pD31ab@syntax->datum pD4444@x))) (and (integer? pD4446@x) (exact? pD4446@x)))) pD4442@v*)) pD4440@ls/false)) (apply (lambda (pD4448@v*) (values '() (map pD31ab@syntax->datum pD4448@v*))) pD4440@ls/false) (let ((pD444a@t pD443e@t)) (let ((pD444c@ls/false (pD30c5@syntax-dispatch pD444a@t '(any . any)))) (if (and pD444c@ls/false (apply (lambda (pD444e@x pD444f@rest) (symbol? (pD31ab@syntax->datum pD444e@x))) pD444c@ls/false)) (apply (lambda (pD4452@x pD4453@rest) (call-with-values (lambda () (pD442f@parse pD4453@rest)) (lambda (pD445a@pD4457 pD445b@pD4459) (let ((pD445e@v* pD445b@pD4459) (pD445f@x* pD445a@pD4457)) (values (cons (pD31ab@syntax->datum pD4452@x) pD445f@x*) pD445e@v*))))) pD444c@ls/false) (let ((pD4462@t pD444a@t)) (let ((pD4464@ls/false (pD30c5@syntax-dispatch pD4462@t '()))) (if pD4464@ls/false (apply (lambda () (values '() '())) pD4464@ls/false) (let ((pD4466@t pD4462@t)) (let ((pD4468@ls/false (pD30c5@syntax-dispatch pD4466@t '_))) (if pD4468@ls/false (apply (lambda () (pD31a5@syntax-violation '#f '"invalid library name" pD442c@spec)) pD4468@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD4466@t))))))))))))))) (call-with-values (lambda () (pD442f@parse pD442c@spec)) (lambda (pD4434@pD4431 pD4435@pD4433) (let ((pD4438@ver* pD4435@pD4433) (pD4439@name* pD4434@pD4431)) (begin (if (null? pD4439@name*) (pD31a5@syntax-violation '#f '"empty library name" pD442c@spec) (void)) (values pD4439@name* pD4438@ver*))))))))) (set! pD4bc6@pD3123@parse-library-name pD3123@parse-library-name) (set! pD3125@parse-library (lambda (pD446a@e) (let ((pD446c@t pD446a@e)) (let ((pD446e@ls/false (pD30c5@syntax-dispatch pD446c@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and pD446e@ls/false (apply (lambda (pD4470@library pD4471@name* pD4472@export pD4473@exp* pD4474@import pD4475@imp* pD4476@b*) (and (eq? (pD31ab@syntax->datum pD4472@export) 'export) (eq? (pD31ab@syntax->datum pD4474@import) 'import) (eq? (pD31ab@syntax->datum pD4470@library) 'library))) pD446e@ls/false)) (apply (lambda (pD447e@library pD447f@name* pD4480@export pD4481@exp* pD4482@import pD4483@imp* pD4484@b*) (values pD447f@name* pD4481@exp* pD4483@imp* pD4484@b*)) pD446e@ls/false) (let ((pD448c@t pD446c@t)) (let ((pD448e@ls/false (pD30c5@syntax-dispatch pD448c@t '_))) (if pD448e@ls/false (apply (lambda () (pD31a5@syntax-violation '#f '"malformed library" pD446a@e)) pD448e@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD448c@t))))))))) (set! pD4bc7@pD3125@parse-library pD3125@parse-library) (set! pD3127@parse-import-spec* (let ((pD4491@idsyn? '#f) (pD4493@dup-error '#f) (pD4495@merge-substs '#f) (pD4497@exclude* '#f) (pD4499@find* '#f) (pD449b@rem* '#f) (pD449d@remove-dups '#f) (pD449f@parse-library-name '#f) (pD44a1@import-library '#f) (pD44a3@get-import '#f) (pD44a5@add-imports! '#f)) (begin (set! pD4491@idsyn? (lambda (pD469a@x) (symbol? (pD31ab@syntax->datum pD469a@x)))) (set! pD4493@dup-error (lambda (pD4698@name) (pD31a5@syntax-violation 'import '"two imports with different bindings" pD4698@name))) (set! pD4495@merge-substs (lambda (pD4686@s pD4687@subst) (let ((pD468b@insert-to-subst '#f)) (begin (set! pD468b@insert-to-subst (lambda (pD468c@a pD468d@subst) (let ((pD4690@name (car pD468c@a)) (pD4691@label (cdr pD468c@a))) (let ((pD4694@t (assq pD4690@name pD468d@subst))) (if pD4694@t ((lambda (pD4696@x) (if (eq? (cdr pD4696@x) pD4691@label) pD468d@subst (pD4493@dup-error pD4690@name))) pD4694@t) (cons pD468c@a pD468d@subst)))))) (if (null? pD4686@s) pD4687@subst (pD468b@insert-to-subst (car pD4686@s) (pD4495@merge-substs (cdr pD4686@s) pD4687@subst))))))) (set! pD4497@exclude* (lambda (pD4656@sym* pD4657@subst) (let ((pD465b@exclude '#f)) (begin (set! pD465b@exclude (lambda (pD4674@sym pD4675@subst) (if (null? pD4675@subst) (pD31a5@syntax-violation 'import '"cannot rename unbound identifier" pD4674@sym) (if (eq? pD4674@sym (caar pD4675@subst)) (values (cdar pD4675@subst) (cdr pD4675@subst)) (let ((pD4678@a (car pD4675@subst))) (call-with-values (lambda () (pD465b@exclude pD4674@sym (cdr pD4675@subst))) (lambda (pD467e@pD467b pD467f@pD467d) (let ((pD4682@subst pD467f@pD467d) (pD4683@old pD467e@pD467b)) (values pD4683@old (cons pD4678@a pD4682@subst)))))))))) (if (null? pD4656@sym*) (values '() pD4657@subst) (call-with-values (lambda () (pD465b@exclude (car pD4656@sym*) pD4657@subst)) (lambda (pD4660@pD465d pD4661@pD465f) (let ((pD4664@subst pD4661@pD465f) (pD4665@old pD4660@pD465d)) (call-with-values (lambda () (pD4497@exclude* (cdr pD4656@sym*) pD4664@subst)) (lambda (pD466c@pD4669 pD466d@pD466b) (let ((pD4670@subst pD466d@pD466b) (pD4671@old* pD466c@pD4669)) (values (cons pD4665@old pD4671@old*) pD4670@subst)))))))))))) (set! pD4499@find* (lambda (pD464e@sym* pD464f@subst) (map (lambda (pD4652@x) (let ((pD4654@t (assq pD4652@x pD464f@subst))) (if pD4654@t (cdr pD4654@t) (pD31a5@syntax-violation 'import '"cannot find identifier" pD4652@x)))) pD464e@sym*))) (set! pD449b@rem* (lambda (pD4646@sym* pD4647@subst) (let pD464c@f ((pD464a@subst pD4647@subst)) (if (null? pD464a@subst) '() (if (memq (caar pD464a@subst) pD4646@sym*) (pD464c@f (cdr pD464a@subst)) (cons (car pD464a@subst) (pD464c@f (cdr pD464a@subst)))))))) (set! pD449d@remove-dups (lambda (pD4644@ls) (if (null? pD4644@ls) '() (if (memq (car pD4644@ls) (cdr pD4644@ls)) (pD449d@remove-dups (cdr pD4644@ls)) (cons (car pD4644@ls) (pD449d@remove-dups (cdr pD4644@ls))))))) (set! pD449f@parse-library-name (lambda (pD455c@spec) (let ((pD455f@subversion? '#f) (pD4561@subversion-pred '#f) (pD4563@version-pred '#f)) (begin (set! pD455f@subversion? (lambda (pD4640@x) (let ((pD4642@x (pD31ab@syntax->datum pD4640@x))) (and (integer? pD4642@x) (exact? pD4642@x) (>= pD4642@x '0))))) (set! pD4561@subversion-pred (lambda (pD45e0@x*) (let ((pD45e2@t pD45e0@x*)) (let ((pD45e4@ls/false (pD30c5@syntax-dispatch pD45e2@t 'any))) (if (and pD45e4@ls/false (apply (lambda (pD45e6@n) (pD455f@subversion? pD45e6@n)) pD45e4@ls/false)) (apply (lambda (pD45e8@n) (lambda (pD45ea@x) (= pD45ea@x (pD31ab@syntax->datum pD45e8@n)))) pD45e4@ls/false) (let ((pD45ec@t pD45e2@t)) (let ((pD45ee@ls/false (pD30c5@syntax-dispatch pD45ec@t '(any . each-any)))) (if (and pD45ee@ls/false (apply (lambda (pD45f0@p? pD45f1@sub*) (eq? (pD31ab@syntax->datum pD45f0@p?) 'and)) pD45ee@ls/false)) (apply (lambda (pD45f4@p? pD45f5@sub*) (let ((pD45f8@p* (map pD4561@subversion-pred pD45f5@sub*))) (lambda (pD45fa@x) (for-all (lambda (pD45fc@p) (pD45fc@p pD45fa@x)) pD45f8@p*)))) pD45ee@ls/false) (let ((pD45fe@t pD45ec@t)) (let ((pD4600@ls/false (pD30c5@syntax-dispatch pD45fe@t '(any . each-any)))) (if (and pD4600@ls/false (apply (lambda (pD4602@p? pD4603@sub*) (eq? (pD31ab@syntax->datum pD4602@p?) 'or)) pD4600@ls/false)) (apply (lambda (pD4606@p? pD4607@sub*) (let ((pD460a@p* (map pD4561@subversion-pred pD4607@sub*))) (lambda (pD460c@x) (exists (lambda (pD460e@p) (pD460e@p pD460c@x)) pD460a@p*)))) pD4600@ls/false) (let ((pD4610@t pD45fe@t)) (let ((pD4612@ls/false (pD30c5@syntax-dispatch pD4610@t '(any any)))) (if (and pD4612@ls/false (apply (lambda (pD4614@p? pD4615@sub) (eq? (pD31ab@syntax->datum pD4614@p?) 'not)) pD4612@ls/false)) (apply (lambda (pD4618@p? pD4619@sub) (let ((pD461c@p (pD4561@subversion-pred pD4619@sub))) (lambda (pD461e@x) (not (pD461c@p pD461e@x))))) pD4612@ls/false) (let ((pD4620@t pD4610@t)) (let ((pD4622@ls/false (pD30c5@syntax-dispatch pD4620@t '(any any)))) (if (and pD4622@ls/false (apply (lambda (pD4624@p? pD4625@n) (and (eq? (pD31ab@syntax->datum pD4624@p?) '<=) (pD455f@subversion? pD4625@n))) pD4622@ls/false)) (apply (lambda (pD4628@p? pD4629@n) (lambda (pD462c@x) (<= pD462c@x (pD31ab@syntax->datum pD4629@n)))) pD4622@ls/false) (let ((pD462e@t pD4620@t)) (let ((pD4630@ls/false (pD30c5@syntax-dispatch pD462e@t '(any any)))) (if (and pD4630@ls/false (apply (lambda (pD4632@p? pD4633@n) (and (eq? (pD31ab@syntax->datum pD4632@p?) '>=) (pD455f@subversion? pD4633@n))) pD4630@ls/false)) (apply (lambda (pD4636@p? pD4637@n) (lambda (pD463a@x) (>= pD463a@x (pD31ab@syntax->datum pD4637@n)))) pD4630@ls/false) (let ((pD463c@t pD462e@t)) (let ((pD463e@ls/false (pD30c5@syntax-dispatch pD463c@t '_))) (if pD463e@ls/false (apply (lambda () (pD31a5@syntax-violation 'import '"invalid sub-version spec" pD455c@spec pD45e0@x*)) pD463e@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD463c@t)))))))))))))))))))))))) (set! pD4563@version-pred (lambda (pD4590@x*) (let ((pD4592@t pD4590@x*)) (let ((pD4594@ls/false (pD30c5@syntax-dispatch pD4592@t '()))) (if pD4594@ls/false (apply (lambda () (lambda (pD4596@x) '#t)) pD4594@ls/false) (let ((pD4598@t pD4592@t)) (let ((pD459a@ls/false (pD30c5@syntax-dispatch pD4598@t '(any . each-any)))) (if (and pD459a@ls/false (apply (lambda (pD459c@c pD459d@ver*) (eq? (pD31ab@syntax->datum pD459c@c) 'and)) pD459a@ls/false)) (apply (lambda (pD45a0@c pD45a1@ver*) (let ((pD45a4@p* (map pD4563@version-pred pD45a1@ver*))) (lambda (pD45a6@x) (for-all (lambda (pD45a8@p) (pD45a8@p pD45a6@x)) pD45a4@p*)))) pD459a@ls/false) (let ((pD45aa@t pD4598@t)) (let ((pD45ac@ls/false (pD30c5@syntax-dispatch pD45aa@t '(any . each-any)))) (if (and pD45ac@ls/false (apply (lambda (pD45ae@c pD45af@ver*) (eq? (pD31ab@syntax->datum pD45ae@c) 'or)) pD45ac@ls/false)) (apply (lambda (pD45b2@c pD45b3@ver*) (let ((pD45b6@p* (map pD4563@version-pred pD45b3@ver*))) (lambda (pD45b8@x) (exists (lambda (pD45ba@p) (pD45ba@p pD45b8@x)) pD45b6@p*)))) pD45ac@ls/false) (let ((pD45bc@t pD45aa@t)) (let ((pD45be@ls/false (pD30c5@syntax-dispatch pD45bc@t '(any any)))) (if (and pD45be@ls/false (apply (lambda (pD45c0@c pD45c1@ver) (eq? (pD31ab@syntax->datum pD45c0@c) 'not)) pD45be@ls/false)) (apply (lambda (pD45c4@c pD45c5@ver) (let ((pD45c8@p (pD4563@version-pred pD45c5@ver))) (lambda (pD45ca@x) (not (pD45c8@p pD45ca@x))))) pD45be@ls/false) (let ((pD45cc@t pD45bc@t)) (let ((pD45ce@ls/false (pD30c5@syntax-dispatch pD45cc@t 'each-any))) (if pD45ce@ls/false (apply (lambda (pD45d0@sub*) (let ((pD45d2@p* (map pD4561@subversion-pred pD45d0@sub*))) (lambda (pD45d4@x) (let pD45da@f ((pD45d6@p* pD45d2@p*) (pD45d7@x pD45d4@x)) (if (null? pD45d6@p*) '#t (if (null? pD45d7@x) '#f (and ((car pD45d6@p*) (car pD45d7@x)) (pD45da@f (cdr pD45d6@p*) (cdr pD45d7@x))))))))) pD45ce@ls/false) (let ((pD45dc@t pD45cc@t)) (let ((pD45de@ls/false (pD30c5@syntax-dispatch pD45dc@t '_))) (if pD45de@ls/false (apply (lambda () (pD31a5@syntax-violation 'import '"invalid version spec" pD455c@spec pD4590@x*)) pD45de@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD45dc@t))))))))))))))))))))) (let pD4566@f ((pD4564@x pD455c@spec)) (let ((pD4568@t pD4564@x)) (let ((pD456a@ls/false (pD30c5@syntax-dispatch pD4568@t '(each-any)))) (if pD456a@ls/false (apply (lambda (pD456c@version-spec*) (values '() (pD4563@version-pred pD456c@version-spec*))) pD456a@ls/false) (let ((pD456e@t pD4568@t)) (let ((pD4570@ls/false (pD30c5@syntax-dispatch pD456e@t '(any . any)))) (if (and pD4570@ls/false (apply (lambda (pD4572@x pD4573@x*) (pD4491@idsyn? pD4572@x)) pD4570@ls/false)) (apply (lambda (pD4576@x pD4577@x*) (call-with-values (lambda () (pD4566@f pD4577@x*)) (lambda (pD457e@pD457b pD457f@pD457d) (let ((pD4582@pred pD457f@pD457d) (pD4583@name pD457e@pD457b)) (values (cons (pD31ab@syntax->datum pD4576@x) pD4583@name) pD4582@pred))))) pD4570@ls/false) (let ((pD4586@t pD456e@t)) (let ((pD4588@ls/false (pD30c5@syntax-dispatch pD4586@t '()))) (if pD4588@ls/false (apply (lambda () (values '() (lambda (pD458a@x) '#t))) pD4588@ls/false) (let ((pD458c@t pD4586@t)) (let ((pD458e@ls/false (pD30c5@syntax-dispatch pD458c@t '_))) (if pD458e@ls/false (apply (lambda () (pD31a5@syntax-violation '#f '"invalid import spec" pD455c@spec)) pD458e@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD458c@t)))))))))))))))))) (set! pD44a1@import-library (lambda (pD454c@spec*) (call-with-values (lambda () (pD449f@parse-library-name pD454c@spec*)) (lambda (pD4552@pD454f pD4553@pD4551) (let ((pD4556@pred pD4553@pD4551) (pD4557@name pD4552@pD454f)) (begin (if (null? pD4557@name) (pD31a5@syntax-violation 'import '"empty library name" pD454c@spec*) (void)) (let ((pD455a@lib (pD2ccd@pD2b14@find-library-by-name pD4557@name))) (begin (if (not pD455a@lib) (pD31a5@syntax-violation 'import '"cannot find library with required name" pD4557@name) (void)) (if (not (pD4556@pred (pD2ca7@pD2ac8@library-version pD455a@lib))) (pD31a5@syntax-violation 'import '"library does not satisfy version specification" pD454c@spec* pD455a@lib) (void)) ((pD3131@imp-collector) pD455a@lib) (pD2caf@pD2ad8@library-subst pD455a@lib))))))))) (set! pD44a3@get-import (lambda (pD44be@spec) (let ((pD44c0@t pD44be@spec)) (let ((pD44c2@ls/false (pD30c5@syntax-dispatch pD44c0@t '(any . each-any)))) (if (and pD44c2@ls/false (apply (lambda (pD44c4@x pD44c5@x*) (not (memq (pD31ab@syntax->datum pD44c4@x) '(for rename except only prefix library)))) pD44c2@ls/false)) (apply (lambda (pD44c8@x pD44c9@x*) (pD44a1@import-library (cons pD44c8@x pD44c9@x*))) pD44c2@ls/false) (let ((pD44cc@t pD44c0@t)) (let ((pD44ce@ls/false (pD30c5@syntax-dispatch pD44cc@t '(any any . #(each (any any)))))) (if (and pD44ce@ls/false (apply (lambda (pD44d0@rename pD44d1@isp pD44d2@old* pD44d3@new*) (and (eq? (pD31ab@syntax->datum pD44d0@rename) 'rename) (for-all pD4491@idsyn? pD44d2@old*) (for-all pD4491@idsyn? pD44d3@new*))) pD44ce@ls/false)) (apply (lambda (pD44d8@rename pD44d9@isp pD44da@old* pD44db@new*) (let ((pD44e0@subst (pD44a3@get-import pD44d9@isp)) (pD44e1@old* (map pD31ab@syntax->datum pD44da@old*)) (pD44e2@new* (map pD31ab@syntax->datum pD44db@new*))) (let ((pD44e6@old-label* (pD4499@find* pD44e1@old* pD44e0@subst))) (let ((pD44e8@subst (pD449b@rem* pD44e1@old* pD44e0@subst))) (pD4495@merge-substs (map cons pD44e2@new* pD44e6@old-label*) pD44e8@subst))))) pD44ce@ls/false) (let ((pD44ea@t pD44cc@t)) (let ((pD44ec@ls/false (pD30c5@syntax-dispatch pD44ea@t '(any any . each-any)))) (if (and pD44ec@ls/false (apply (lambda (pD44ee@except pD44ef@isp pD44f0@sym*) (and (eq? (pD31ab@syntax->datum pD44ee@except) 'except) (for-all pD4491@idsyn? pD44f0@sym*))) pD44ec@ls/false)) (apply (lambda (pD44f4@except pD44f5@isp pD44f6@sym*) (let ((pD44fa@subst (pD44a3@get-import pD44f5@isp))) (pD449b@rem* (map pD31ab@syntax->datum pD44f6@sym*) pD44fa@subst))) pD44ec@ls/false) (let ((pD44fc@t pD44ea@t)) (let ((pD44fe@ls/false (pD30c5@syntax-dispatch pD44fc@t '(any any . each-any)))) (if (and pD44fe@ls/false (apply (lambda (pD4500@only pD4501@isp pD4502@sym*) (and (eq? (pD31ab@syntax->datum pD4500@only) 'only) (for-all pD4491@idsyn? pD4502@sym*))) pD44fe@ls/false)) (apply (lambda (pD4506@only pD4507@isp pD4508@sym*) (let ((pD450c@subst (pD44a3@get-import pD4507@isp)) (pD450d@sym* (map pD31ab@syntax->datum pD4508@sym*))) (let ((pD4510@sym* (pD449d@remove-dups pD450d@sym*))) (let ((pD4512@lab* (pD4499@find* pD4510@sym* pD450c@subst))) (map cons pD4510@sym* pD4512@lab*))))) pD44fe@ls/false) (let ((pD4514@t pD44fc@t)) (let ((pD4516@ls/false (pD30c5@syntax-dispatch pD4514@t '(any any any)))) (if (and pD4516@ls/false (apply (lambda (pD4518@prefix pD4519@isp pD451a@p) (and (eq? (pD31ab@syntax->datum pD4518@prefix) 'prefix) (pD4491@idsyn? pD451a@p))) pD4516@ls/false)) (apply (lambda (pD451e@prefix pD451f@isp pD4520@p) (let ((pD4524@subst (pD44a3@get-import pD451f@isp)) (pD4525@prefix (symbol->string (pD31ab@syntax->datum pD4520@p)))) (map (lambda (pD4528@x) (cons (string->symbol (string-append pD4525@prefix (symbol->string (car pD4528@x)))) (cdr pD4528@x))) pD4524@subst))) pD4516@ls/false) (let ((pD452a@t pD4514@t)) (let ((pD452c@ls/false (pD30c5@syntax-dispatch pD452a@t '(any each-any)))) (if (and pD452c@ls/false (apply (lambda (pD452e@library pD452f@spec*) (eq? (pD31ab@syntax->datum pD452e@library) 'library)) pD452c@ls/false)) (apply (lambda (pD4532@library pD4533@spec*) (pD44a1@import-library pD4533@spec*)) pD452c@ls/false) (let ((pD4536@t pD452a@t)) (let ((pD4538@ls/false (pD30c5@syntax-dispatch pD4536@t '(any any . any)))) (if (and pD4538@ls/false (apply (lambda (pD453a@for pD453b@isp pD453c@rest) (eq? (pD31ab@syntax->datum pD453a@for) 'for)) pD4538@ls/false)) (apply (lambda (pD4540@for pD4541@isp pD4542@rest) (pD44a3@get-import pD4541@isp)) pD4538@ls/false) (let ((pD4546@t pD4536@t)) (let ((pD4548@ls/false (pD30c5@syntax-dispatch pD4546@t 'any))) (if pD4548@ls/false (apply (lambda (pD454a@spec) (pD31a5@syntax-violation 'import '"invalid import spec" pD454a@spec)) pD4548@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD4546@t))))))))))))))))))))))))))) (set! pD44a5@add-imports! (lambda (pD44ae@imp pD44af@h) (let ((pD44b2@subst (pD44a3@get-import pD44ae@imp))) (for-each (lambda (pD44b4@x) (let ((pD44b6@name (car pD44b4@x)) (pD44b7@label (cdr pD44b4@x))) (let ((pD44ba@t (hashtable-ref pD44af@h pD44b6@name '#f))) (if pD44ba@t ((lambda (pD44bc@l) (if (not (eq? pD44bc@l pD44b7@label)) (pD4493@dup-error pD44b6@name) (void))) pD44ba@t) (hashtable-set! pD44af@h pD44b6@name pD44b7@label))))) pD44b2@subst)))) (lambda (pD44a6@imp*) (let pD44ac@f ((pD44a8@imp* pD44a6@imp*) (pD44a9@h (make-eq-hashtable))) (if (null? pD44a8@imp*) (hashtable-entries pD44a9@h) (begin (pD44a5@add-imports! (car pD44a8@imp*) pD44a9@h) (pD44ac@f (cdr pD44a8@imp*) pD44a9@h)))))))) (set! pD4bc8@pD3127@parse-import-spec* pD3127@parse-import-spec*) (set! pD3129@make-top-rib (lambda (pD469c@names pD469d@labels) (let ((pD46a0@rib (pD2e72@make-empty-rib))) (begin (vector-for-each (lambda (pD46a2@name pD46a3@label) (begin (if (not (symbol? pD46a2@name)) (error 'make-top-rib '"BUG: not a symbol" pD46a2@name) (void)) (pD2e76@extend-rib/nc! pD46a0@rib (make-simple-struct 'stx '5 (list pD46a2@name pD2e42@top-mark* '() '())) pD46a3@label))) pD469c@names pD469d@labels) pD46a0@rib)))) (set! pD4bc9@pD3129@make-top-rib pD3129@make-top-rib) (set! pD312b@make-collector (lambda () (let ((pD46a6@ls '())) (lambda pD46aa (let ((pD46ab (length pD46aa))) (if (= pD46ab '0) (apply (lambda () pD46a6@ls) pD46aa) (if (= pD46ab '1) (apply (lambda (pD46a8@x) (set! pD46a6@ls (pD2e3b@set-cons pD46a8@x pD46a6@ls))) pD46aa) (error 'apply '"invalid arg count")))))))) (set! pD4bca@pD312b@make-collector pD312b@make-collector) (set! pD312d@inv-collector (pD2a08@pD28e7@make-parameter (lambda pD46ac@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (pD46ae@x) (begin (if (not (procedure? pD46ae@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" pD46ae@x) (void)) pD46ae@x)))) (set! pD4bcb@pD312d@inv-collector pD312d@inv-collector) (set! pD312f@vis-collector (pD2a08@pD28e7@make-parameter (lambda pD46b0@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (pD46b2@x) (begin (if (not (procedure? pD46b2@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" pD46b2@x) (void)) pD46b2@x)))) (set! pD4bcc@pD312f@vis-collector pD312f@vis-collector) (set! pD3131@imp-collector (pD2a08@pD28e7@make-parameter (lambda pD46b4@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (pD46b6@x) (begin (if (not (procedure? pD46b6@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" pD46b6@x) (void)) pD46b6@x)))) (set! pD4bcd@pD3131@imp-collector pD3131@imp-collector) (set! pD3133@chi-library-internal (lambda (pD46b8@e* pD46b9@rib pD46ba@top?) (call-with-values (lambda () (pD311d@chi-body* pD46b8@e* '() '() '() '() '() '() '() pD46b9@rib pD46ba@top?)) (lambda (pD46ce@pD46bf pD46cf@pD46c1 pD46d0@pD46c3 pD46d1@pD46c5 pD46d2@pD46c7 pD46d3@pD46c9 pD46d4@pD46cb pD46d5@pD46cd) (let ((pD46de@exp* pD46d5@pD46cd) (pD46df@_kwd* pD46d4@pD46cb) (pD46e0@mod** pD46d3@pD46c9) (pD46e1@rhs* pD46d2@pD46c7) (pD46e2@lex* pD46d1@pD46c5) (pD46e3@mr pD46d0@pD46c3) (pD46e4@r pD46cf@pD46c1) (pD46e5@e* pD46ce@pD46bf)) (values (append (apply append (reverse pD46e0@mod**)) pD46e5@e*) pD46e4@r pD46e3@mr (reverse pD46e2@lex*) (reverse pD46e1@rhs*) pD46de@exp*)))))) (set! pD4bce@pD3133@chi-library-internal pD3133@chi-library-internal) (set! pD3135@chi-interaction-expr (lambda (pD46ee@e pD46ef@rib pD46f0@r) (call-with-values (lambda () (pD311d@chi-body* (list pD46ee@e) pD46f0@r pD46f0@r '() '() '() '() '() pD46ef@rib '#t)) (lambda (pD4704@pD46f5 pD4705@pD46f7 pD4706@pD46f9 pD4707@pD46fb pD4708@pD46fd pD4709@pD46ff pD470a@pD4701 pD470b@pD4703) (let ((pD4714@_exp* pD470b@pD4703) (pD4715@_kwd* pD470a@pD4701) (pD4716@mod** pD4709@pD46ff) (pD4717@rhs* pD4708@pD46fd) (pD4718@lex* pD4707@pD46fb) (pD4719@mr pD4706@pD46f9) (pD471a@r pD4705@pD46f7) (pD471b@e* pD4704@pD46f5)) (let ((pD4724@e* (pD30f5@expand-interaction-rhs*/init* (reverse pD4718@lex*) (reverse pD4717@rhs*) (append (apply append (reverse pD4716@mod**)) pD471b@e*) pD471a@r pD4719@mr))) (let ((pD4726@e (if (null? pD4724@e*) (pD2e24@pD2d7f@build-void) (if (null? (cdr pD4724@e*)) (car pD4724@e*) (pD2e23@pD2d7d@build-sequence '#f pD4724@e*))))) (values pD4726@e pD471a@r)))))))) (set! pD4bcf@pD3135@chi-interaction-expr pD3135@chi-interaction-expr) (set! pD3137@library-body-expander (lambda (pD4728@name pD4729@main-exp* pD472a@imp* pD472b@b* pD472c@top?) (let ((pD4733@itc '#f)) (begin (set! pD4733@itc (pD312b@make-collector)) (let ((pD473c@pD4735 pD3131@imp-collector) (pD473d@pD4737 pD31b5@top-level-context) (pD473e@pD4739 pD4733@itc) (pD473f@pD473b '#f)) (let ((pD4744@swap (lambda () (begin (let ((pD4746@t (pD473c@pD4735))) (begin (pD473c@pD4735 pD473e@pD4739) (set! pD473e@pD4739 pD4746@t))) (let ((pD4748@t (pD473d@pD4737))) (begin (pD473d@pD4737 pD473f@pD473b) (set! pD473f@pD473b pD4748@t))))))) (dynamic-wind pD4744@swap (lambda () (call-with-values (lambda () (pD3127@parse-import-spec* pD472a@imp*)) (lambda (pD474e@pD474b pD474f@pD474d) (let ((pD4752@subst-labels pD474f@pD474d) (pD4753@subst-names pD474e@pD474b)) (let ((pD4756@rib (pD3129@make-top-rib pD4753@subst-names pD4752@subst-labels))) (let ((pD4759@wrap '#f)) (begin (set! pD4759@wrap (lambda (pD47d4@x) (make-simple-struct 'stx '5 (list pD47d4@x pD2e42@top-mark* (list pD4756@rib) '())))) (let ((pD475a@b* (map pD4759@wrap pD472b@b*)) (pD475b@main-exp* (map pD4759@wrap pD4729@main-exp*)) (pD475c@rtc (pD312b@make-collector)) (pD475d@vtc (pD312b@make-collector))) (let ((pD476a@pD4763 pD312d@inv-collector) (pD476b@pD4765 pD312f@vis-collector) (pD476c@pD4767 pD475c@rtc) (pD476d@pD4769 pD475d@vtc)) (let ((pD4772@swap (lambda () (begin (let ((pD4774@t (pD476a@pD4763))) (begin (pD476a@pD4763 pD476c@pD4767) (set! pD476c@pD4767 pD4774@t))) (let ((pD4776@t (pD476b@pD4765))) (begin (pD476b@pD4765 pD476d@pD4769) (set! pD476d@pD4769 pD4776@t))))))) (dynamic-wind pD4772@swap (lambda () (call-with-values (lambda () (pD3133@chi-library-internal pD475a@b* pD4756@rib pD472c@top?)) (lambda (pD4784@pD4779 pD4785@pD477b pD4786@pD477d pD4787@pD477f pD4788@pD4781 pD4789@pD4783) (let ((pD4790@internal-exp* pD4789@pD4783) (pD4791@rhs* pD4788@pD4781) (pD4792@lex* pD4787@pD477f) (pD4793@mr pD4786@pD477d) (pD4794@r pD4785@pD477b) (pD4795@init* pD4784@pD4779)) (call-with-values (lambda () (pD3121@parse-exports (append pD475b@main-exp* pD4790@internal-exp*))) (lambda (pD47a0@pD479d pD47a1@pD479f) (let ((pD47a4@exp-id* pD47a1@pD479f) (pD47a5@exp-name* pD47a0@pD479d)) (begin (pD2e7a@seal-rib! pD4756@rib) (let ((pD47a8@init* (pD30e3@chi-expr* pD4795@init* pD4794@r pD4793@mr))) (let ((pD47aa@rhs* (pD30f7@chi-rhs* pD4791@rhs* pD4794@r pD4793@mr))) (begin (pD2e7c@unseal-rib! pD4756@rib) (let ((pD47ac@loc* (map pD2e48@gen-global pD4792@lex*)) (pD47ad@export-subst (pD318f@make-export-subst pD47a5@exp-name* pD47a4@exp-id*))) (let ((pD47b1@errstr '#f)) (begin (set! pD47b1@errstr '"attempt to export mutated variable") (call-with-values (lambda () (pD3191@make-export-env/macros pD4792@lex* pD47ac@loc* pD4794@r)) (lambda (pD47b8@pD47b3 pD47b9@pD47b5 pD47ba@pD47b7) (let ((pD47be@macro* pD47ba@pD47b7) (pD47bf@global* pD47b9@pD47b5) (pD47c0@export-env pD47b8@pD47b3)) (begin (for-each (lambda (pD47c4@s) (let ((pD47c6@name (car pD47c4@s)) (pD47c7@label (cdr pD47c4@s))) (let ((pD47ca@p (assq pD47c7@label pD47c0@export-env))) (if pD47ca@p (let ((pD47cc@b (cdr pD47ca@p))) (let ((pD47ce@type (car pD47cc@b))) (if (eq? pD47ce@type 'mutable) (pD31a5@syntax-violation 'export pD47b1@errstr pD47c6@name) (void)))) (void))))) pD47ad@export-subst) (let ((pD47d0@invoke-body (pD2e29@pD2d89@build-library-letrec* '#f pD4728@name pD4792@lex* pD47ac@loc* pD47aa@rhs* (if (null? pD47a8@init*) (pD2e24@pD2d7f@build-void) (pD2e23@pD2d7d@build-sequence '#f pD47a8@init*)))) (pD47d1@invoke-definitions (map pD2e20@pD2cdc@build-global-define (map cdr pD47bf@global*)))) (values (pD4733@itc) (pD475c@rtc) (pD475d@vtc) (pD2e23@pD2d7d@build-sequence '#f (append pD47d1@invoke-definitions (list pD47d0@invoke-body))) pD47be@macro* pD47ad@export-subst pD47c0@export-env)))))))))))))))))))) pD4772@swap))))))))))) pD4744@swap))))))) (set! pD4bd0@pD3137@library-body-expander pD3137@library-body-expander) (set! pD3139@core-library-expander (lambda (pD47d6@e pD47d7@verify-name) (call-with-values (lambda () (pD3125@parse-library pD47d6@e)) (lambda (pD47e2@pD47db pD47e3@pD47dd pD47e4@pD47df pD47e5@pD47e1) (let ((pD47ea@b* pD47e5@pD47e1) (pD47eb@imp* pD47e4@pD47df) (pD47ec@exp* pD47e3@pD47dd) (pD47ed@name* pD47e2@pD47db)) (call-with-values (lambda () (pD3123@parse-library-name pD47ed@name*)) (lambda (pD47f6@pD47f3 pD47f7@pD47f5) (let ((pD47fa@ver pD47f7@pD47f5) (pD47fb@name pD47f6@pD47f3)) (begin (pD47d7@verify-name pD47fb@name) (call-with-values (lambda () (pD3137@library-body-expander pD47fb@name pD47ec@exp* pD47eb@imp* pD47ea@b* '#f)) (lambda (pD480c@pD47ff pD480d@pD4801 pD480e@pD4803 pD480f@pD4805 pD4810@pD4807 pD4811@pD4809 pD4812@pD480b) (let ((pD481a@export-env pD4812@pD480b) (pD481b@export-subst pD4811@pD4809) (pD481c@visit-code pD4810@pD4807) (pD481d@invoke-code pD480f@pD4805) (pD481e@visit-req* pD480e@pD4803) (pD481f@invoke-req* pD480d@pD4801) (pD4820@imp* pD480c@pD47ff)) (values pD47fb@name pD47fa@ver pD4820@imp* pD481f@invoke-req* pD481e@visit-req* pD481d@invoke-code pD481c@visit-code pD481b@export-subst pD481a@export-env))))))))))))) (set! pD4bd1@pD3139@core-library-expander pD3139@core-library-expander) (set! pD313b@parse-top-level-program (lambda (pD4828@e*) (let ((pD482a@t pD4828@e*)) (let ((pD482c@ls/false (pD30c5@syntax-dispatch pD482a@t '((any . each-any) . each-any)))) (if (and pD482c@ls/false (apply (lambda (pD482e@import pD482f@imp* pD4830@b*) (eq? (pD31ab@syntax->datum pD482e@import) 'import)) pD482c@ls/false)) (apply (lambda (pD4834@import pD4835@imp* pD4836@b*) (values pD4835@imp* pD4836@b*)) pD482c@ls/false) (let ((pD483a@t pD482a@t)) (let ((pD483c@ls/false (pD30c5@syntax-dispatch pD483a@t '((any . any) . any)))) (if (and pD483c@ls/false (apply (lambda (pD483e@import pD483f@x pD4840@y) (eq? (pD31ab@syntax->datum pD483e@import) 'import)) pD483c@ls/false)) (apply (lambda (pD4844@import pD4845@x pD4846@y) (pD31a5@syntax-violation 'expander '"invalid syntax of top-level program" (pD2eb8@syntax-car pD4828@e*))) pD483c@ls/false) (let ((pD484a@t pD483a@t)) (let ((pD484c@ls/false (pD30c5@syntax-dispatch pD484a@t '_))) (if pD484c@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) pD484c@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD484a@t)))))))))))) (set! pD4bd2@pD313b@parse-top-level-program pD313b@parse-top-level-program) (set! pD313d@top-level-expander (lambda (pD484e@e*) (call-with-values (lambda () (pD313b@parse-top-level-program pD484e@e*)) (lambda (pD4854@pD4851 pD4855@pD4853) (let ((pD4858@b* pD4855@pD4853) (pD4859@imp* pD4854@pD4851)) (call-with-values (lambda () (pD3137@library-body-expander '() '() pD4859@imp* pD4858@b* '#t)) (lambda (pD486a@pD485d pD486b@pD485f pD486c@pD4861 pD486d@pD4863 pD486e@pD4865 pD486f@pD4867 pD4870@pD4869) (let ((pD4878@export-env pD4870@pD4869) (pD4879@export-subst pD486f@pD4867) (pD487a@visit-code pD486e@pD4865) (pD487b@invoke-code pD486d@pD4863) (pD487c@visit-req* pD486c@pD4861) (pD487d@invoke-req* pD486b@pD485f) (pD487e@imp* pD486a@pD485d)) (values pD487d@invoke-req* pD487b@invoke-code))))))))) (set! pD4bd3@pD313d@top-level-expander pD313d@top-level-expander) (set! pD313f@rp (pD2a05@pD28e1@make-record-printer 'env (lambda (pD4886@x pD4887@p pD4888@wr) (display '"#<environment>" pD4887@p)))) (set! pD4bd4@pD313f@rp pD313f@rp) (set! pD3149@env? (lambda (pD488c@x) (and (simple-struct? pD488c@x) (eq? (simple-struct-name pD488c@x) 'env)))) (set! pD4bd5@pD3149@env? pD3149@env?) (set! pD314b@env-names (lambda (pD488e@x) (simple-struct-ref pD488e@x '0))) (set! pD4bd6@pD314b@env-names pD314b@env-names) (set! pD314d@set-env-names! (lambda (pD4890@x pD4891@val) (simple-struct-set! pD4890@x '0 pD4891@val))) (set! pD4bd7@pD314d@set-env-names! pD314d@set-env-names!) (set! pD314f@env-labels (lambda (pD4894@x) (simple-struct-ref pD4894@x '1))) (set! pD4bd8@pD314f@env-labels pD314f@env-labels) (set! pD3151@set-env-labels! (lambda (pD4896@x pD4897@val) (simple-struct-set! pD4896@x '1 pD4897@val))) (set! pD4bd9@pD3151@set-env-labels! pD3151@set-env-labels!) (set! pD3153@env-itc (lambda (pD489a@x) (simple-struct-ref pD489a@x '2))) (set! pD4bda@pD3153@env-itc pD3153@env-itc) (set! pD3155@set-env-itc! (lambda (pD489c@x pD489d@val) (simple-struct-set! pD489c@x '2 pD489d@val))) (set! pD4bdb@pD3155@set-env-itc! pD3155@set-env-itc!) (set! pD3157@dummy '3) (set! pD4bdc@pD3157@dummy pD3157@dummy) (set! pD3159@rp (pD2a05@pD28e1@make-record-printer 'interaction-env (lambda (pD48a0@x pD48a1@p pD48a2@wr) (display '"#<environment>" pD48a1@p)))) (set! pD4bdd@pD3159@rp pD3159@rp) (set! pD3163@interaction-env? (lambda (pD48a6@x) (and (simple-struct? pD48a6@x) (eq? (simple-struct-name pD48a6@x) 'interaction-env)))) (set! pD4bde@pD3163@interaction-env? pD3163@interaction-env?) (set! pD3165@interaction-env-rib (lambda (pD48a8@x) (simple-struct-ref pD48a8@x '0))) (set! pD4bdf@pD3165@interaction-env-rib pD3165@interaction-env-rib) (set! pD3167@set-interaction-env-rib! (lambda (pD48aa@x pD48ab@val) (simple-struct-set! pD48aa@x '0 pD48ab@val))) (set! pD4be0@pD3167@set-interaction-env-rib! pD3167@set-interaction-env-rib!) (set! pD3169@interaction-env-r (lambda (pD48ae@x) (simple-struct-ref pD48ae@x '1))) (set! pD4be1@pD3169@interaction-env-r pD3169@interaction-env-r) (set! pD316b@set-interaction-env-r! (lambda (pD48b0@x pD48b1@val) (simple-struct-set! pD48b0@x '1 pD48b1@val))) (set! pD4be2@pD316b@set-interaction-env-r! pD316b@set-interaction-env-r!) (set! pD316d@interaction-env-locs (lambda (pD48b4@x) (simple-struct-ref pD48b4@x '2))) (set! pD4be3@pD316d@interaction-env-locs pD316d@interaction-env-locs) (set! pD316f@set-interaction-env-locs! (lambda (pD48b6@x pD48b7@val) (simple-struct-set! pD48b6@x '2 pD48b7@val))) (set! pD4be4@pD316f@set-interaction-env-locs! pD316f@set-interaction-env-locs!) (set! pD3171@dummy '3) (set! pD4be5@pD3171@dummy pD3171@dummy) (set! pD3173@interaction-environment-symbols (lambda () (pD317b@environment-symbols (pD31b3@interaction-environment)))) (set! pD4be6@pD3173@interaction-environment-symbols pD3173@interaction-environment-symbols) (set! pD3175@environment-bindings (lambda (pD48ba@e) (vector->list (vector-map (lambda (pD48bc@name pD48bd@label) (pD3177@parse-binding (cons pD48bc@name (pD2cd3@pD2b20@imported-label->binding pD48bd@label)))) (pD314b@env-names pD48ba@e) (pD314f@env-labels pD48ba@e))))) (set! pD4be7@pD3175@environment-bindings pD3175@environment-bindings) (set! pD3177@parse-binding (lambda (pD48c0@b) (cons (car pD48c0@b) (let ((pD48c2@t (cadr pD48c0@b))) (if (memv pD48c2@t '(core-prim global)) 'procedure (if (memv pD48c2@t '(core-macro macro global-macro)) 'syntax (if (memv pD48c2@t '($core-rtd)) 'record (if (eq? (car pD48c0@b) (cadr pD48c0@b)) 'syntax 'unknown)))))))) (set! pD4be8@pD3177@parse-binding pD3177@parse-binding) (set! pD3179@environment? (lambda (pD48c4@x) (or (pD3149@env? pD48c4@x) (pD3163@interaction-env? pD48c4@x)))) (set! pD4be9@pD3179@environment? pD3179@environment?) (set! pD317b@environment-symbols (lambda (pD48c6@x) (if (pD3149@env? pD48c6@x) (vector->list (pD314b@env-names pD48c6@x)) (if (pD3163@interaction-env? pD48c6@x) (map values (pD2e5c@rib-sym* (pD3165@interaction-env-rib pD48c6@x))) (assertion-violation 'environment-symbols '"not an environment" pD48c6@x))))) (set! pD4bea@pD317b@environment-symbols pD317b@environment-symbols) (set! pD317d@environment (lambda pD48c8@imp* (let ((pD48ca@itc (pD312b@make-collector))) (let ((pD48d0@pD48cd pD3131@imp-collector) (pD48d1@pD48cf pD48ca@itc)) (let ((pD48d4@swap (lambda () (let ((pD48d6@t (pD48d0@pD48cd))) (begin (pD48d0@pD48cd pD48d1@pD48cf) (set! pD48d1@pD48cf pD48d6@t)))))) (dynamic-wind pD48d4@swap (lambda () (call-with-values (lambda () (pD3127@parse-import-spec* pD48c8@imp*)) (lambda (pD48dc@pD48d9 pD48dd@pD48db) (let ((pD48e0@subst-labels pD48dd@pD48db) (pD48e1@subst-names pD48dc@pD48d9)) (make-simple-struct 'env '4 (list pD48e1@subst-names pD48e0@subst-labels pD48ca@itc)))))) pD48d4@swap)))))) (set! pD4beb@pD317d@environment pD317d@environment) (set! pD317f@null-environment (lambda (pD48e4@n) (begin (if (not (eqv? pD48e4@n '5)) (assertion-violation 'null-environment '"not 5" pD48e4@n) (void)) (pD317d@environment '(psyntax null-environment-5))))) (set! pD4bec@pD317f@null-environment pD317f@null-environment) (set! pD3181@scheme-report-environment (lambda (pD48e6@n) (begin (if (not (eqv? pD48e6@n '5)) (assertion-violation 'scheme-report-environment '"not 5" pD48e6@n) (void)) (pD317d@environment '(psyntax scheme-report-environment-5))))) (set! pD4bed@pD3181@scheme-report-environment pD3181@scheme-report-environment) (set! pD3183@expand (lambda (pD48e8@x pD48e9@env) (if (pD3149@env? pD48e9@env) (let ((pD48ec@rib (pD3129@make-top-rib (pD314b@env-names pD48e9@env) (pD314f@env-labels pD48e9@env)))) (let ((pD48ee@x (make-simple-struct 'stx '5 (list pD48e8@x pD2e42@top-mark* (list pD48ec@rib) '()))) (pD48ef@itc (pD3153@env-itc pD48e9@env)) (pD48f0@rtc (pD312b@make-collector)) (pD48f1@vtc (pD312b@make-collector))) (let ((pD48f6@x (let ((pD4908@pD48f9 pD31b5@top-level-context) (pD4909@pD48fb pD312d@inv-collector) (pD490a@pD48fd pD312f@vis-collector) (pD490b@pD48ff pD3131@imp-collector) (pD490c@pD4901 '#f) (pD490d@pD4903 pD48f0@rtc) (pD490e@pD4905 pD48f1@vtc) (pD490f@pD4907 pD48ef@itc)) (let ((pD4918@swap (lambda () (begin (let ((pD491a@t (pD4908@pD48f9))) (begin (pD4908@pD48f9 pD490c@pD4901) (set! pD490c@pD4901 pD491a@t))) (let ((pD491c@t (pD4909@pD48fb))) (begin (pD4909@pD48fb pD490d@pD4903) (set! pD490d@pD4903 pD491c@t))) (let ((pD491e@t (pD490a@pD48fd))) (begin (pD490a@pD48fd pD490e@pD4905) (set! pD490e@pD4905 pD491e@t))) (let ((pD4920@t (pD490b@pD48ff))) (begin (pD490b@pD48ff pD490f@pD4907) (set! pD490f@pD4907 pD4920@t))))))) (dynamic-wind pD4918@swap (lambda () (pD30e7@chi-expr pD48ee@x '() '())) pD4918@swap))))) (begin (pD2e7a@seal-rib! pD48ec@rib) (values pD48f6@x (pD48f0@rtc)))))) (if (pD3163@interaction-env? pD48e9@env) (let ((pD4922@rib (pD3165@interaction-env-rib pD48e9@env)) (pD4923@r (pD3169@interaction-env-r pD48e9@env)) (pD4924@rtc (pD312b@make-collector))) (let ((pD4928@x (make-simple-struct 'stx '5 (list pD48e8@x pD2e42@top-mark* (list pD4922@rib) '())))) (call-with-values (lambda () (let ((pD493e@pD492f pD31b5@top-level-context) (pD493f@pD4931 pD312d@inv-collector) (pD4940@pD4933 pD312f@vis-collector) (pD4941@pD4935 pD3131@imp-collector) (pD4942@pD4937 pD48e9@env) (pD4943@pD4939 pD4924@rtc) (pD4944@pD493b (pD312b@make-collector)) (pD4945@pD493d (pD312b@make-collector))) (let ((pD494e@swap (lambda () (begin (let ((pD4950@t (pD493e@pD492f))) (begin (pD493e@pD492f pD4942@pD4937) (set! pD4942@pD4937 pD4950@t))) (let ((pD4952@t (pD493f@pD4931))) (begin (pD493f@pD4931 pD4943@pD4939) (set! pD4943@pD4939 pD4952@t))) (let ((pD4954@t (pD4940@pD4933))) (begin (pD4940@pD4933 pD4944@pD493b) (set! pD4944@pD493b pD4954@t))) (let ((pD4956@t (pD4941@pD4935))) (begin (pD4941@pD4935 pD4945@pD493d) (set! pD4945@pD493d pD4956@t))))))) (dynamic-wind pD494e@swap (lambda () (pD3135@chi-interaction-expr pD4928@x pD4922@rib pD4923@r)) pD494e@swap)))) (lambda (pD4958@pD492b pD4959@pD492d) (let ((pD495c@r^ pD4959@pD492d) (pD495d@e pD4958@pD492b)) (begin (pD316b@set-interaction-env-r! pD48e9@env pD495c@r^) (values pD495d@e (pD4924@rtc)))))))) (assertion-violation 'expand '"not an environment" pD48e9@env))))) (set! pD4bee@pD3183@expand pD3183@expand) (set! pD3185@eval (lambda (pD4960@x pD4961@env) (begin (if (not (pD3179@environment? pD4961@env)) (error 'eval '"not an environment" pD4961@env) (void)) (call-with-values (lambda () (pD3183@expand pD4960@x pD4961@env)) (lambda (pD4968@pD4965 pD4969@pD4967) (let ((pD496c@invoke-req* pD4969@pD4967) (pD496d@x pD4968@pD4965)) (begin (for-each pD2cd4@pD2b22@invoke-library pD496c@invoke-req*) (eval-core (pD2a5e@pD2a16@expanded->core pD496d@x))))))))) (set! pD4bef@pD3185@eval pD3185@eval) (set! pD3187@library-expander (lambda pD49de (let ((pD49df (length pD49de))) (if (= pD49df '3) (apply (lambda (pD4970@x pD4971@filename pD4972@verify-name) (let ((pD4977@build-visit-code '#f) (pD4979@visit! '#f)) (begin (set! pD4977@build-visit-code (lambda (pD49cc@macro*) (if (null? pD49cc@macro*) (pD2e24@pD2d7f@build-void) (pD2e23@pD2d7d@build-sequence '#f (map (lambda (pD49ce@x) (let ((pD49d0@loc (car pD49ce@x)) (pD49d1@src (cddr pD49ce@x))) (list 'set! pD49d0@loc pD49d1@src))) pD49cc@macro*))))) (set! pD4979@visit! (lambda (pD49c4@macro*) (for-each (lambda (pD49c6@x) (let ((pD49c8@loc (car pD49c6@x)) (pD49c9@proc (cadr pD49c6@x))) (set-symbol-value! pD49c8@loc pD49c9@proc))) pD49c4@macro*))) (call-with-values (lambda () (pD3139@core-library-expander pD4970@x pD4972@verify-name)) (lambda (pD498c@pD497b pD498d@pD497d pD498e@pD497f pD498f@pD4981 pD4990@pD4983 pD4991@pD4985 pD4992@pD4987 pD4993@pD4989 pD4994@pD498b) (let ((pD499e@export-env pD4994@pD498b) (pD499f@export-subst pD4993@pD4989) (pD49a0@macro* pD4992@pD4987) (pD49a1@invoke-code pD4991@pD4985) (pD49a2@vis* pD4990@pD4983) (pD49a3@inv* pD498f@pD4981) (pD49a4@imp* pD498e@pD497f) (pD49a5@ver pD498d@pD497d) (pD49a6@name pD498c@pD497b)) (let ((pD49b0@id (gensym)) (pD49b1@name pD49a6@name) (pD49b2@ver pD49a5@ver) (pD49b3@imp* (map pD2cd8@pD2b2a@library-spec pD49a4@imp*)) (pD49b4@vis* (map pD2cd8@pD2b2a@library-spec pD49a2@vis*)) (pD49b5@inv* (map pD2cd8@pD2b2a@library-spec pD49a3@inv*)) (pD49b6@visit-proc (lambda () (pD4979@visit! pD49a0@macro*))) (pD49b7@invoke-proc (lambda () (eval-core (pD2a5e@pD2a16@expanded->core pD49a1@invoke-code)))) (pD49b8@visit-code (pD4977@build-visit-code pD49a0@macro*)) (pD49b9@invoke-code pD49a1@invoke-code)) (begin (pD2cd2@pD2b1e@install-library pD49b0@id pD49b1@name pD49b2@ver pD49b3@imp* pD49b4@vis* pD49b5@inv* pD499f@export-subst pD499e@export-env pD49b6@visit-proc pD49b7@invoke-proc pD49b8@visit-code pD49b9@invoke-code '#t pD4971@filename) (values pD49b0@id pD49b1@name pD49b2@ver pD49b3@imp* pD49b4@vis* pD49b5@inv* pD49b9@invoke-code pD49b8@visit-code pD499f@export-subst pD499e@export-env))))))))) pD49de) (if (= pD49df '2) (apply (lambda (pD49d4@x pD49d5@filename) (pD3187@library-expander pD49d4@x pD49d5@filename (lambda (pD49d8@x) (values)))) pD49de) (if (= pD49df '1) (apply (lambda (pD49da@x) (pD3187@library-expander pD49da@x '#f (lambda (pD49dc@x) (values)))) pD49de) (error 'apply '"invalid arg count"))))))) (set! pD4bf0@pD3187@library-expander pD3187@library-expander) (set! pD3189@boot-library-expand (lambda (pD49e0@x) (call-with-values (lambda () (pD3187@library-expander pD49e0@x)) (lambda (pD49f6@pD49e3 pD49f7@pD49e5 pD49f8@pD49e7 pD49f9@pD49e9 pD49fa@pD49eb pD49fb@pD49ed pD49fc@pD49ef pD49fd@pD49f1 pD49fe@pD49f3 pD49ff@pD49f5) (let ((pD4a0a@export-env pD49ff@pD49f5) (pD4a0b@export-subst pD49fe@pD49f3) (pD4a0c@visit-code pD49fd@pD49f1) (pD4a0d@invoke-code pD49fc@pD49ef) (pD4a0e@inv* pD49fb@pD49ed) (pD4a0f@vis* pD49fa@pD49eb) (pD4a10@imp* pD49f9@pD49e9) (pD4a11@ver pD49f8@pD49e7) (pD4a12@name pD49f7@pD49e5) (pD4a13@id pD49f6@pD49e3)) (values pD4a12@name pD4a0d@invoke-code pD4a0b@export-subst pD4a0a@export-env)))))) (set! pD4bf1@pD3189@boot-library-expand pD3189@boot-library-expand) (set! pD318b@rev-map-append (lambda (pD4a1e@f pD4a1f@ls pD4a20@ac) (if (null? pD4a1f@ls) pD4a20@ac (pD318b@rev-map-append pD4a1e@f (cdr pD4a1f@ls) (cons (pD4a1e@f (car pD4a1f@ls)) pD4a20@ac))))) (set! pD4bf2@pD318b@rev-map-append pD318b@rev-map-append) (set! pD318d@build-exports (lambda (pD4a24@lex*+loc* pD4a25@init*) (pD2e23@pD2d7d@build-sequence '#f (cons (pD2e24@pD2d7f@build-void) (pD318b@rev-map-append (lambda (pD4a28@x) (list 'set! (cdr pD4a28@x) (car pD4a28@x))) pD4a24@lex*+loc* pD4a25@init*))))) (set! pD4bf3@pD318d@build-exports pD318d@build-exports) (set! pD318f@make-export-subst (lambda (pD4a2a@name* pD4a2b@id*) (map (lambda (pD4a2e@name pD4a2f@id) (let ((pD4a32@label (pD2ed4@id->label pD4a2f@id))) (begin (if (not pD4a32@label) (pD31a5@syntax-violation '#f '"cannot export unbound identifier" pD4a2f@id) (void)) (cons pD4a2e@name pD4a32@label)))) pD4a2a@name* pD4a2b@id*))) (set! pD4bf4@pD318f@make-export-subst pD318f@make-export-subst) (set! pD3191@make-export-env/macros (lambda (pD4a34@lex* pD4a35@loc* pD4a36@r) (let ((pD4a3b@lookup '#f)) (begin (set! pD4a3b@lookup (lambda (pD4a58@x) (let pD4a60@f ((pD4a5a@x pD4a58@x) (pD4a5b@lex* pD4a34@lex*) (pD4a5c@loc* pD4a35@loc*)) (if (pair? pD4a5b@lex*) (if (eq? pD4a5a@x (car pD4a5b@lex*)) (car pD4a5c@loc*) (pD4a60@f pD4a5a@x (cdr pD4a5b@lex*) (cdr pD4a5c@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let pD4a44@f ((pD4a3c@r pD4a36@r) (pD4a3d@env '()) (pD4a3e@global* '()) (pD4a3f@macro* '())) (if (null? pD4a3c@r) (values pD4a3d@env pD4a3e@global* pD4a3f@macro*) (let ((pD4a46@x (car pD4a3c@r))) (let ((pD4a48@label (car pD4a46@x)) (pD4a49@b (cdr pD4a46@x))) (let ((pD4a4c@t (pD2eda@binding-type pD4a49@b))) (if (memv pD4a4c@t '(lexical)) (let ((pD4a4e@v (pD2edc@binding-value pD4a49@b))) (let ((pD4a50@loc (pD4a3b@lookup (pD304f@lexical-var pD4a4e@v))) (pD4a51@type (if (pD3051@lexical-mutable? pD4a4e@v) 'mutable 'global))) (pD4a44@f (cdr pD4a3c@r) (cons (cons* pD4a48@label pD4a51@type pD4a50@loc) pD4a3d@env) (cons (cons (pD304f@lexical-var pD4a4e@v) pD4a50@loc) pD4a3e@global*) pD4a3f@macro*))) (if (memv pD4a4c@t '(local-macro)) (let ((pD4a54@loc (gensym))) (pD4a44@f (cdr pD4a3c@r) (cons (cons* pD4a48@label 'global-macro pD4a54@loc) pD4a3d@env) pD4a3e@global* (cons (cons pD4a54@loc (pD2edc@binding-value pD4a49@b)) pD4a3f@macro*))) (if (memv pD4a4c@t '(local-macro!)) (let ((pD4a56@loc (gensym))) (pD4a44@f (cdr pD4a3c@r) (cons (cons* pD4a48@label 'global-macro! pD4a56@loc) pD4a3d@env) pD4a3e@global* (cons (cons pD4a56@loc (pD2edc@binding-value pD4a49@b)) pD4a3f@macro*))) (if (memv pD4a4c@t '($rtd $module)) (pD4a44@f (cdr pD4a3c@r) (cons pD4a46@x pD4a3d@env) pD4a3e@global* pD4a3f@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (pD2eda@binding-type pD4a49@b) (pD2edc@binding-value pD4a49@b))))))))))))))) (set! pD4bf5@pD3191@make-export-env/macros pD3191@make-export-env/macros) (set! pD3193@generate-temporaries (lambda (pD4a62@ls) (let ((pD4a64@t pD4a62@ls)) (let ((pD4a66@ls/false (pD30c5@syntax-dispatch pD4a64@t 'each-any))) (if pD4a66@ls/false (apply (lambda (pD4a68@ls) (map (lambda (pD4a6a@x) (make-simple-struct 'stx '5 (list (let ((pD4a6c@x (pD31ab@syntax->datum pD4a6a@x))) (if (or (symbol? pD4a6c@x) (string? pD4a6c@x)) (gensym pD4a6c@x) (gensym 't))) pD2e42@top-mark* '() '()))) pD4a68@ls)) pD4a66@ls/false) (let ((pD4a6e@t pD4a64@t)) (let ((pD4a70@ls/false (pD30c5@syntax-dispatch pD4a6e@t '_))) (if pD4a70@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) pD4a70@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD4a6e@t))))))))) (set! pD4bf6@pD3193@generate-temporaries pD3193@generate-temporaries) (set! pD3195@free-identifier=? (lambda (pD4a72@x pD4a73@y) (if (pD2ebe@id? pD4a72@x) (if (pD2ebe@id? pD4a73@y) (pD2ec4@free-id=? pD4a72@x pD4a73@y) (assertion-violation 'free-identifier=? '"not an identifier" pD4a73@y)) (assertion-violation 'free-identifier=? '"not an identifier" pD4a72@x)))) (set! pD4bf7@pD3195@free-identifier=? pD3195@free-identifier=?) (set! pD3197@bound-identifier=? (lambda (pD4a76@x pD4a77@y) (if (pD2ebe@id? pD4a76@x) (if (pD2ebe@id? pD4a77@y) (pD2ec2@bound-id=? pD4a76@x pD4a77@y) (assertion-violation 'bound-identifier=? '"not an identifier" pD4a77@y)) (assertion-violation 'bound-identifier=? '"not an identifier" pD4a76@x)))) (set! pD4bf8@pD3197@bound-identifier=? pD3197@bound-identifier=?) (set! pD3199@make-source-condition (lambda (pD4a7a@x) (let ((pD4a84@pD4a7f '#f) (pD4a86@pD4a81 '#f) (pD4a88@pD4a80 '#f) (pD4a8b@pD4a7e '#f) (pD4a8d@make-source-condition '#f) (pD4a8f@pD4a7c '#f) (pD4a91@pD4a7d '#f) (pD4a93@source-condition? '#f) (pD4a95@source-filename '#f) (pD4a97@source-character '#f)) (begin (set! pD4a84@pD4a7f (make-record-type-descriptor '&source-information pD4eda@pD4c21@&condition-rtd 'pD4a82 '#f '#f '#((immutable file-name) (immutable character)))) (set! pD4a86@pD4a81 '#f) (set! pD4a88@pD4a80 (make-record-constructor-descriptor pD4a84@pD4a7f pD4edb@pD4c23@&condition-rcd pD4a86@pD4a81)) (set! pD4a8b@pD4a7e (record-predicate pD4a84@pD4a7f)) (set! pD4a8d@make-source-condition (record-constructor pD4a88@pD4a80)) (set! pD4a8f@pD4a7c (record-accessor pD4a84@pD4a7f '0)) (set! pD4a91@pD4a7d (record-accessor pD4a84@pD4a7f '1)) (set! pD4a93@source-condition? (condition-predicate pD4a84@pD4a7f)) (set! pD4a95@source-filename (condition-accessor pD4a84@pD4a7f pD4a8f@pD4a7c)) (set! pD4a97@source-character (condition-accessor pD4a84@pD4a7f pD4a91@pD4a7d)) (if (pair? pD4a7a@x) (pD4a8d@make-source-condition (car pD4a7a@x) (cdr pD4a7a@x)) (condition)))))) (set! pD4bf9@pD3199@make-source-condition pD3199@make-source-condition) (set! pD319b@extract-position-condition (lambda (pD4a98@x) (pD3199@make-source-condition (pD319d@expression-position pD4a98@x)))) (set! pD4bfa@pD319b@extract-position-condition pD319b@extract-position-condition) (set! pD319d@expression-position (lambda (pD4a9a@x) (and (pD2e8a@stx? pD4a9a@x) (let ((pD4a9c@x (pD2e8c@stx-expr pD4a9a@x))) (and (pD29fd@pD28d1@annotation? pD4a9c@x) (pD29fe@pD28d3@annotation-source pD4a9c@x)))))) (set! pD4bfb@pD319d@expression-position pD319d@expression-position) (set! pD319f@assertion-error (lambda (pD4a9e@expr pD4a9f@pos) (raise (condition (pD4f0a@pD4ce5@make-assertion-violation) (pD4f1c@pD4d17@make-who-condition 'assert) (pD4ee0@pD4c78@make-message-condition '"assertion failed") (pD4f12@pD4cfc@make-irritants-condition (list pD4a9e@expr)) (pD3199@make-source-condition pD4a9f@pos))))) (set! pD4bfc@pD319f@assertion-error pD319f@assertion-error) (set! pD31a1@syntax-error (lambda (pD4aa2@x . pD4aa4@args) (begin (if (not (for-all string? pD4aa4@args)) (assertion-violation 'syntax-error '"invalid argument" pD4aa4@args) (void)) (raise (condition (pD4ee0@pD4c78@make-message-condition (if (null? pD4aa4@args) '"invalid syntax" (apply string-append pD4aa4@args))) (pD4f3e@pD4d73@make-syntax-violation (pD31ab@syntax->datum pD4aa2@x) '#f) (pD319b@extract-position-condition pD4aa2@x)))))) (set! pD4bfd@pD31a1@syntax-error pD31a1@syntax-error) (set! pD31a3@syntax-violation* (lambda (pD4aa6@who pD4aa7@msg pD4aa8@form pD4aa9@condition-object) (begin (if (not (string? pD4aa7@msg)) (assertion-violation 'syntax-violation '"message is not a string" pD4aa7@msg) (void)) (let ((pD4aae@who (if (or (string? pD4aa6@who) (symbol? pD4aa6@who)) pD4aa6@who (if (not pD4aa6@who) (let ((pD4ab0@t pD4aa8@form)) (let ((pD4ab2@ls/false (pD30c5@syntax-dispatch pD4ab0@t 'any))) (if (and pD4ab2@ls/false (apply (lambda (pD4ab4@id) (pD2ebe@id? pD4ab4@id)) pD4ab2@ls/false)) (apply (lambda (pD4ab6@id) (pD31ab@syntax->datum pD4ab6@id)) pD4ab2@ls/false) (let ((pD4ab8@t pD4ab0@t)) (let ((pD4aba@ls/false (pD30c5@syntax-dispatch pD4ab8@t '(any . any)))) (if (and pD4aba@ls/false (apply (lambda (pD4abc@id pD4abd@rest) (pD2ebe@id? pD4abc@id)) pD4aba@ls/false)) (apply (lambda (pD4ac0@id pD4ac1@rest) (pD31ab@syntax->datum pD4ac0@id)) pD4aba@ls/false) (let ((pD4ac4@t pD4ab8@t)) (let ((pD4ac6@ls/false (pD30c5@syntax-dispatch pD4ac4@t '_))) (if pD4ac6@ls/false (apply (lambda () '#f) pD4ac6@ls/false) (pD31a5@syntax-violation '#f '"invalid syntax" pD4ac4@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" pD4aa6@who))))) (raise (condition (if pD4aae@who (pD4f1c@pD4d17@make-who-condition pD4aae@who) (condition)) (pD4ee0@pD4c78@make-message-condition pD4aa7@msg) pD4aa9@condition-object (pD319b@extract-position-condition pD4aa8@form))))))) (set! pD4bfe@pD31a3@syntax-violation* pD31a3@syntax-violation*) (set! pD31a5@syntax-violation (lambda pD4ad6 (let ((pD4ad7 (length pD4ad6))) (if (= pD4ad7 '3) (apply (lambda (pD4ac8@who pD4ac9@msg pD4aca@form) (pD31a5@syntax-violation pD4ac8@who pD4ac9@msg pD4aca@form '#f)) pD4ad6) (if (= pD4ad7 '4) (apply (lambda (pD4ace@who pD4acf@msg pD4ad0@form pD4ad1@subform) (pD31a3@syntax-violation* pD4ace@who pD4acf@msg pD4ad0@form (pD4f3e@pD4d73@make-syntax-violation (pD31ab@syntax->datum pD4ad0@form) (pD31ab@syntax->datum pD4ad1@subform)))) pD4ad6) (error 'apply '"invalid arg count")))))) (set! pD4bff@pD31a5@syntax-violation pD31a5@syntax-violation) (set! pD31a7@identifier? (lambda (pD4ad8@x) (pD2ebe@id? pD4ad8@x))) (set! pD4c00@pD31a7@identifier? pD31a7@identifier?) (set! pD31a9@datum->syntax (lambda (pD4ada@id pD4adb@datum) (if (pD2ebe@id? pD4ada@id) (pD2e9e@datum->stx pD4ada@id pD4adb@datum) (assertion-violation 'datum->syntax '"not an identifier" pD4ada@id)))) (set! pD4c01@pD31a9@datum->syntax pD31a9@datum->syntax) (set! pD31ab@syntax->datum (lambda (pD4ade@x) (pD2ed2@stx->datum pD4ade@x))) (set! pD4c02@pD31ab@syntax->datum pD31ab@syntax->datum) (set! pD31ad@ungensym-all (lambda (pD4ae0@code) (if (pair? pD4ae0@code) (cons (pD31ad@ungensym-all (car pD4ae0@code)) (pD31ad@ungensym-all (cdr pD4ae0@code))) (if (symbol? pD4ae0@code) (ungensym pD4ae0@code) pD4ae0@code)))) (set! pD4c03@pD31ad@ungensym-all pD31ad@ungensym-all) (set! pD31af@compile-r6rs-top-level (lambda (pD4ae2@x*) (call-with-values (lambda () (pD313d@top-level-expander pD4ae2@x*)) (lambda (pD4ae8@pD4ae5 pD4ae9@pD4ae7) (let ((pD4aec@invoke-code pD4ae9@pD4ae7) (pD4aed@lib* pD4ae8@pD4ae5)) (lambda () (begin (for-each pD2cd4@pD2b22@invoke-library pD4aed@lib*) (let ((pD4af0@expanded (pD2a5e@pD2a16@expanded->core pD4aec@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (pD31ad@ungensym-all pD4af0@expanded)) (void)) (eval-core pD4af0@expanded)))))))))) (set! pD4c04@pD31af@compile-r6rs-top-level pD31af@compile-r6rs-top-level) (set! pD31b1@pre-compile-r6rs-top-level (lambda (pD4af2@x*) (call-with-values (lambda () (pD313d@top-level-expander pD4af2@x*)) (lambda (pD4af8@pD4af5 pD4af9@pD4af7) (let ((pD4afc@invoke-code pD4af9@pD4af7) (pD4afd@lib* pD4af8@pD4af5)) (begin (for-each pD2cd4@pD2b22@invoke-library pD4afd@lib*) (pD2a06@pD28e3@compile-core (pD2a5e@pD2a16@expanded->core pD4afc@invoke-code)))))))) (set! pD4c05@pD31b1@pre-compile-r6rs-top-level pD31b1@pre-compile-r6rs-top-level) (set! pD31b3@interaction-environment (let ((pD4b00@the-env '#f)) (lambda () (or pD4b00@the-env (let ((pD4b02@lib (pD2ccd@pD2b14@find-library-by-name '(mosh interaction))) (pD4b03@rib (pD2e72@make-empty-rib))) (begin (let ((pD4b06@subst (pD2caf@pD2ad8@library-subst pD4b02@lib))) (begin (pD2e5e@set-rib-sym*! pD4b03@rib (map car pD4b06@subst)) (pD2e62@set-rib-mark**! pD4b03@rib (map (lambda (pD4b08@x) pD2e42@top-mark*) pD4b06@subst)) (pD2e66@set-rib-label*! pD4b03@rib (map cdr pD4b06@subst)))) (let ((pD4b0a@env (make-simple-struct 'interaction-env '4 (list pD4b03@rib '() '())))) (begin (set! pD4b00@the-env pD4b0a@env) pD4b0a@env)))))))) (set! pD4c06@pD31b3@interaction-environment pD31b3@interaction-environment) (set! pD31b5@top-level-context (pD2a08@pD28e7@make-parameter '#f)) (set! pD4c07@pD31b5@top-level-context pD31b5@top-level-context) (pD2cca@pD2b0e@current-library-expander pD3187@library-expander))
(begin (set! pD4c16@pD4c11 (unspecified)) (set! pD4c18@pD4c13 (unspecified)) (set! pD4c1a@pD4c12 (unspecified)) (set! pD4c1d@&condition? (unspecified)) (set! pD4c1f@make-&condition (unspecified)) (set! pD4c21@&condition-rtd (unspecified)) (set! pD4c23@&condition-rcd (unspecified)) (set! pD4c6f@pD4c6a (unspecified)) (set! pD4c71@pD4c6c (unspecified)) (set! pD4c73@pD4c6b (unspecified)) (set! pD4c76@p? (unspecified)) (set! pD4c78@make-message-condition (unspecified)) (set! pD4c7a@pD4c69 (unspecified)) (set! pD4c7c@message-condition? (unspecified)) (set! pD4c7e@condition-message (unspecified)) (set! pD4c80@&message-rtd (unspecified)) (set! pD4c82@&message-rcd (unspecified)) (set! pD4c88@pD4c83 (unspecified)) (set! pD4c8a@pD4c85 (unspecified)) (set! pD4c8c@pD4c84 (unspecified)) (set! pD4c8f@p? (unspecified)) (set! pD4c91@make-warning (unspecified)) (set! pD4c93@warning? (unspecified)) (set! pD4c95@&warning-rtd (unspecified)) (set! pD4c97@&warning-rcd (unspecified)) (set! pD4c9d@pD4c98 (unspecified)) (set! pD4c9f@pD4c9a (unspecified)) (set! pD4ca1@pD4c99 (unspecified)) (set! pD4ca4@p? (unspecified)) (set! pD4ca6@make-serious-condition (unspecified)) (set! pD4ca8@serious-condition? (unspecified)) (set! pD4caa@&serious-rtd (unspecified)) (set! pD4cac@&serious-rcd (unspecified)) (set! pD4cb2@pD4cad (unspecified)) (set! pD4cb4@pD4caf (unspecified)) (set! pD4cb6@pD4cae (unspecified)) (set! pD4cb9@p? (unspecified)) (set! pD4cbb@make-error (unspecified)) (set! pD4cbd@error? (unspecified)) (set! pD4cbf@&error-rtd (unspecified)) (set! pD4cc1@&error-rcd (unspecified)) (set! pD4cc7@pD4cc2 (unspecified)) (set! pD4cc9@pD4cc4 (unspecified)) (set! pD4ccb@pD4cc3 (unspecified)) (set! pD4cce@p? (unspecified)) (set! pD4cd0@make-violation (unspecified)) (set! pD4cd2@violation? (unspecified)) (set! pD4cd4@&violation-rtd (unspecified)) (set! pD4cd6@&violation-rcd (unspecified)) (set! pD4cdc@pD4cd7 (unspecified)) (set! pD4cde@pD4cd9 (unspecified)) (set! pD4ce0@pD4cd8 (unspecified)) (set! pD4ce3@p? (unspecified)) (set! pD4ce5@make-assertion-violation (unspecified)) (set! pD4ce7@assertion-violation? (unspecified)) (set! pD4ce9@&assertion-rtd (unspecified)) (set! pD4ceb@&assertion-rcd (unspecified)) (set! pD4cf3@pD4cee (unspecified)) (set! pD4cf5@pD4cf0 (unspecified)) (set! pD4cf7@pD4cef (unspecified)) (set! pD4cfa@p? (unspecified)) (set! pD4cfc@make-irritants-condition (unspecified)) (set! pD4cfe@pD4ced (unspecified)) (set! pD4d00@irritants-condition? (unspecified)) (set! pD4d02@condition-irritants (unspecified)) (set! pD4d04@&irritants-rtd (unspecified)) (set! pD4d06@&irritants-rcd (unspecified)) (set! pD4d0e@pD4d09 (unspecified)) (set! pD4d10@pD4d0b (unspecified)) (set! pD4d12@pD4d0a (unspecified)) (set! pD4d15@p? (unspecified)) (set! pD4d17@make-who-condition (unspecified)) (set! pD4d19@pD4d08 (unspecified)) (set! pD4d1b@who-condition? (unspecified)) (set! pD4d1d@condition-who (unspecified)) (set! pD4d1f@&who-rtd (unspecified)) (set! pD4d21@&who-rcd (unspecified)) (set! pD4d27@pD4d22 (unspecified)) (set! pD4d29@pD4d24 (unspecified)) (set! pD4d2b@pD4d23 (unspecified)) (set! pD4d2e@p? (unspecified)) (set! pD4d30@make-non-continuable-violation (unspecified)) (set! pD4d32@non-continuable-violation? (unspecified)) (set! pD4d34@&non-continuable-rtd (unspecified)) (set! pD4d36@&non-continuable-rcd (unspecified)) (set! pD4d3c@pD4d37 (unspecified)) (set! pD4d3e@pD4d39 (unspecified)) (set! pD4d40@pD4d38 (unspecified)) (set! pD4d43@p? (unspecified)) (set! pD4d45@make-implementation-restriction-violation (unspecified)) (set! pD4d47@implementation-restriction-violation? (unspecified)) (set! pD4d49@&implementation-restriction-rtd (unspecified)) (set! pD4d4b@&implementation-restriction-rcd (unspecified)) (set! pD4d51@pD4d4c (unspecified)) (set! pD4d53@pD4d4e (unspecified)) (set! pD4d55@pD4d4d (unspecified)) (set! pD4d58@p? (unspecified)) (set! pD4d5a@make-lexical-violation (unspecified)) (set! pD4d5c@lexical-violation? (unspecified)) (set! pD4d5e@&lexical-rtd (unspecified)) (set! pD4d60@&lexical-rcd (unspecified)) (set! pD4d6a@pD4d65 (unspecified)) (set! pD4d6c@pD4d67 (unspecified)) (set! pD4d6e@pD4d66 (unspecified)) (set! pD4d71@p? (unspecified)) (set! pD4d73@make-syntax-violation (unspecified)) (set! pD4d75@pD4d62 (unspecified)) (set! pD4d77@pD4d64 (unspecified)) (set! pD4d79@syntax-violation? (unspecified)) (set! pD4d7b@syntax-violation-form (unspecified)) (set! pD4d7d@syntax-violation-subform (unspecified)) (set! pD4d7f@&syntax-rtd (unspecified)) (set! pD4d81@&syntax-rcd (unspecified)) (set! pD4d87@pD4d82 (unspecified)) (set! pD4d89@pD4d84 (unspecified)) (set! pD4d8b@pD4d83 (unspecified)) (set! pD4d8e@p? (unspecified)) (set! pD4d90@make-undefined-violation (unspecified)) (set! pD4d92@undefined-violation? (unspecified)) (set! pD4d94@&undefined-rtd (unspecified)) (set! pD4d96@&undefined-rcd (unspecified)) (set! pD4d9c@pD4d97 (unspecified)) (set! pD4d9e@pD4d99 (unspecified)) (set! pD4da0@pD4d98 (unspecified)) (set! pD4da3@p? (unspecified)) (set! pD4da5@make-i/o-error (unspecified)) (set! pD4da7@i/o-error? (unspecified)) (set! pD4da9@&i/o-rtd (unspecified)) (set! pD4dab@&i/o-rcd (unspecified)) (set! pD4db1@pD4dac (unspecified)) (set! pD4db3@pD4dae (unspecified)) (set! pD4db5@pD4dad (unspecified)) (set! pD4db8@p? (unspecified)) (set! pD4dba@make-i/o-read-error (unspecified)) (set! pD4dbc@i/o-read-error? (unspecified)) (set! pD4dbe@&i/o-read-rtd (unspecified)) (set! pD4dc0@&i/o-read-rcd (unspecified)) (set! pD4dc6@pD4dc1 (unspecified)) (set! pD4dc8@pD4dc3 (unspecified)) (set! pD4dca@pD4dc2 (unspecified)) (set! pD4dcd@p? (unspecified)) (set! pD4dcf@make-i/o-write-error (unspecified)) (set! pD4dd1@i/o-write-error? (unspecified)) (set! pD4dd3@&i/o-write-rtd (unspecified)) (set! pD4dd5@&i/o-write-rcd (unspecified)) (set! pD4ddd@pD4dd8 (unspecified)) (set! pD4ddf@pD4dda (unspecified)) (set! pD4de1@pD4dd9 (unspecified)) (set! pD4de4@p? (unspecified)) (set! pD4de6@make-i/o-invalid-position-error (unspecified)) (set! pD4de8@pD4dd7 (unspecified)) (set! pD4dea@i/o-invalid-position-error? (unspecified)) (set! pD4dec@i/o-error-position (unspecified)) (set! pD4dee@&i/o-invalid-position-rtd (unspecified)) (set! pD4df0@&i/o-invalid-position-rcd (unspecified)) (set! pD4df8@pD4df3 (unspecified)) (set! pD4dfa@pD4df5 (unspecified)) (set! pD4dfc@pD4df4 (unspecified)) (set! pD4dff@p? (unspecified)) (set! pD4e01@make-i/o-filename-error (unspecified)) (set! pD4e03@pD4df2 (unspecified)) (set! pD4e05@i/o-filename-error? (unspecified)) (set! pD4e07@i/o-error-filename (unspecified)) (set! pD4e09@&i/o-filename-rtd (unspecified)) (set! pD4e0b@&i/o-filename-rcd (unspecified)) (set! pD4e11@pD4e0c (unspecified)) (set! pD4e13@pD4e0e (unspecified)) (set! pD4e15@pD4e0d (unspecified)) (set! pD4e18@p? (unspecified)) (set! pD4e1a@make-i/o-file-protection-error (unspecified)) (set! pD4e1c@i/o-file-protection-error? (unspecified)) (set! pD4e1e@&i/o-file-protection-rtd (unspecified)) (set! pD4e20@&i/o-file-protection-rcd (unspecified)) (set! pD4e26@pD4e21 (unspecified)) (set! pD4e28@pD4e23 (unspecified)) (set! pD4e2a@pD4e22 (unspecified)) (set! pD4e2d@p? (unspecified)) (set! pD4e2f@make-i/o-file-is-read-only-error (unspecified)) (set! pD4e31@i/o-file-is-read-only-error? (unspecified)) (set! pD4e33@&i/o-file-is-read-only-rtd (unspecified)) (set! pD4e35@&i/o-file-is-read-only-rcd (unspecified)) (set! pD4e3b@pD4e36 (unspecified)) (set! pD4e3d@pD4e38 (unspecified)) (set! pD4e3f@pD4e37 (unspecified)) (set! pD4e42@p? (unspecified)) (set! pD4e44@make-i/o-file-already-exists-error (unspecified)) (set! pD4e46@i/o-file-already-exists-error? (unspecified)) (set! pD4e48@&i/o-file-already-exists-rtd (unspecified)) (set! pD4e4a@&i/o-file-already-exists-rcd (unspecified)) (set! pD4e50@pD4e4b (unspecified)) (set! pD4e52@pD4e4d (unspecified)) (set! pD4e54@pD4e4c (unspecified)) (set! pD4e57@p? (unspecified)) (set! pD4e59@make-i/o-file-does-not-exist-error (unspecified)) (set! pD4e5b@i/o-file-does-not-exist-error? (unspecified)) (set! pD4e5d@&i/o-file-does-not-exist-rtd (unspecified)) (set! pD4e5f@&i/o-file-does-not-exist-rcd (unspecified)) (set! pD4e67@pD4e62 (unspecified)) (set! pD4e69@pD4e64 (unspecified)) (set! pD4e6b@pD4e63 (unspecified)) (set! pD4e6e@p? (unspecified)) (set! pD4e70@make-i/o-port-error (unspecified)) (set! pD4e72@pD4e61 (unspecified)) (set! pD4e74@i/o-port-error? (unspecified)) (set! pD4e76@i/o-error-port (unspecified)) (set! pD4e78@&i/o-port-rtd (unspecified)) (set! pD4e7a@&i/o-port-rcd (unspecified)) (set! pD4e80@pD4e7b (unspecified)) (set! pD4e82@pD4e7d (unspecified)) (set! pD4e84@pD4e7c (unspecified)) (set! pD4e87@p? (unspecified)) (set! pD4e89@make-i/o-decoding-error (unspecified)) (set! pD4e8b@i/o-decoding-error? (unspecified)) (set! pD4e8d@&i/o-decoding-rtd (unspecified)) (set! pD4e8f@&i/o-decoding-rcd (unspecified)) (set! pD4e97@pD4e92 (unspecified)) (set! pD4e99@pD4e94 (unspecified)) (set! pD4e9b@pD4e93 (unspecified)) (set! pD4e9e@p? (unspecified)) (set! pD4ea0@make-i/o-encoding-error (unspecified)) (set! pD4ea2@pD4e91 (unspecified)) (set! pD4ea4@i/o-encoding-error? (unspecified)) (set! pD4ea6@i/o-encoding-error-char (unspecified)) (set! pD4ea8@&i/o-encoding-rtd (unspecified)) (set! pD4eaa@&i/o-encoding-rcd (unspecified)) (set! pD4eb0@pD4eab (unspecified)) (set! pD4eb2@pD4ead (unspecified)) (set! pD4eb4@pD4eac (unspecified)) (set! pD4eb7@p? (unspecified)) (set! pD4eb9@make-no-infinities-violation (unspecified)) (set! pD4ebb@no-infinities-violation? (unspecified)) (set! pD4ebd@&no-infinities-rtd (unspecified)) (set! pD4ebf@&no-infinities-rcd (unspecified)) (set! pD4ec5@pD4ec0 (unspecified)) (set! pD4ec7@pD4ec2 (unspecified)) (set! pD4ec9@pD4ec1 (unspecified)) (set! pD4ecc@p? (unspecified)) (set! pD4ece@make-no-nans-violation (unspecified)) (set! pD4ed0@no-nans-violation? (unspecified)) (set! pD4ed2@&no-nans-rtd (unspecified)) (set! pD4ed4@&no-nans-rcd (unspecified)) (set! pD4c16@pD4c11 (make-record-type-descriptor '&condition '#f 'pD4c14 '#f '#f '#())) (set! pD4ed5@pD4c16@pD4c11 pD4c16@pD4c11) (set! pD4c18@pD4c13 '#f) (set! pD4ed6@pD4c18@pD4c13 pD4c18@pD4c13) (set! pD4c1a@pD4c12 (make-record-constructor-descriptor pD4c16@pD4c11 '#f pD4c18@pD4c13)) (set! pD4ed7@pD4c1a@pD4c12 pD4c1a@pD4c12) (set! pD4c1d@&condition? (record-predicate pD4c16@pD4c11)) (set! pD4ed8@pD4c1d@&condition? pD4c1d@&condition?) (set! pD4c1f@make-&condition (record-constructor pD4c1a@pD4c12)) (set! pD4ed9@pD4c1f@make-&condition pD4c1f@make-&condition) (set! pD4c21@&condition-rtd pD4c16@pD4c11) (set! pD4eda@pD4c21@&condition-rtd pD4c21@&condition-rtd) (set! pD4c23@&condition-rcd pD4c1a@pD4c12) (set! pD4edb@pD4c23@&condition-rcd pD4c23@&condition-rcd) (set! pD4c6f@pD4c6a (make-record-type-descriptor '&message pD4c16@pD4c11 'pD4c6d '#f '#f '#((immutable message)))) (set! pD4edc@pD4c6f@pD4c6a pD4c6f@pD4c6a) (set! pD4c71@pD4c6c '#f) (set! pD4edd@pD4c71@pD4c6c pD4c71@pD4c6c) (set! pD4c73@pD4c6b (make-record-constructor-descriptor pD4c6f@pD4c6a pD4c1a@pD4c12 pD4c71@pD4c6c)) (set! pD4ede@pD4c73@pD4c6b pD4c73@pD4c6b) (set! pD4c76@p? (record-predicate pD4c6f@pD4c6a)) (set! pD4edf@pD4c76@p? pD4c76@p?) (set! pD4c78@make-message-condition (record-constructor pD4c73@pD4c6b)) (set! pD4ee0@pD4c78@make-message-condition pD4c78@make-message-condition) (set! pD4c7a@pD4c69 (record-accessor pD4c6f@pD4c6a '0)) (set! pD4ee1@pD4c7a@pD4c69 pD4c7a@pD4c69) (set! pD4c7c@message-condition? (condition-predicate pD4c6f@pD4c6a)) (set! pD4ee2@pD4c7c@message-condition? pD4c7c@message-condition?) (set! pD4c7e@condition-message (condition-accessor pD4c6f@pD4c6a pD4c7a@pD4c69)) (set! pD4ee3@pD4c7e@condition-message pD4c7e@condition-message) (set! pD4c80@&message-rtd pD4c6f@pD4c6a) (set! pD4ee4@pD4c80@&message-rtd pD4c80@&message-rtd) (set! pD4c82@&message-rcd pD4c73@pD4c6b) (set! pD4ee5@pD4c82@&message-rcd pD4c82@&message-rcd) (set! pD4c88@pD4c83 (make-record-type-descriptor '&warning pD4c16@pD4c11 'pD4c86 '#f '#f '#())) (set! pD4ee6@pD4c88@pD4c83 pD4c88@pD4c83) (set! pD4c8a@pD4c85 '#f) (set! pD4ee7@pD4c8a@pD4c85 pD4c8a@pD4c85) (set! pD4c8c@pD4c84 (make-record-constructor-descriptor pD4c88@pD4c83 pD4c1a@pD4c12 pD4c8a@pD4c85)) (set! pD4ee8@pD4c8c@pD4c84 pD4c8c@pD4c84) (set! pD4c8f@p? (record-predicate pD4c88@pD4c83)) (set! pD4ee9@pD4c8f@p? pD4c8f@p?) (set! pD4c91@make-warning (record-constructor pD4c8c@pD4c84)) (set! pD4eea@pD4c91@make-warning pD4c91@make-warning) (set! pD4c93@warning? (condition-predicate pD4c88@pD4c83)) (set! pD4eeb@pD4c93@warning? pD4c93@warning?) (set! pD4c95@&warning-rtd pD4c88@pD4c83) (set! pD4eec@pD4c95@&warning-rtd pD4c95@&warning-rtd) (set! pD4c97@&warning-rcd pD4c8c@pD4c84) (set! pD4eed@pD4c97@&warning-rcd pD4c97@&warning-rcd) (set! pD4c9d@pD4c98 (make-record-type-descriptor '&serious pD4c16@pD4c11 'pD4c9b '#f '#f '#())) (set! pD4eee@pD4c9d@pD4c98 pD4c9d@pD4c98) (set! pD4c9f@pD4c9a '#f) (set! pD4eef@pD4c9f@pD4c9a pD4c9f@pD4c9a) (set! pD4ca1@pD4c99 (make-record-constructor-descriptor pD4c9d@pD4c98 pD4c1a@pD4c12 pD4c9f@pD4c9a)) (set! pD4ef0@pD4ca1@pD4c99 pD4ca1@pD4c99) (set! pD4ca4@p? (record-predicate pD4c9d@pD4c98)) (set! pD4ef1@pD4ca4@p? pD4ca4@p?) (set! pD4ca6@make-serious-condition (record-constructor pD4ca1@pD4c99)) (set! pD4ef2@pD4ca6@make-serious-condition pD4ca6@make-serious-condition) (set! pD4ca8@serious-condition? (condition-predicate pD4c9d@pD4c98)) (set! pD4ef3@pD4ca8@serious-condition? pD4ca8@serious-condition?) (set! pD4caa@&serious-rtd pD4c9d@pD4c98) (set! pD4ef4@pD4caa@&serious-rtd pD4caa@&serious-rtd) (set! pD4cac@&serious-rcd pD4ca1@pD4c99) (set! pD4ef5@pD4cac@&serious-rcd pD4cac@&serious-rcd) (set! pD4cb2@pD4cad (make-record-type-descriptor '&error pD4c9d@pD4c98 'pD4cb0 '#f '#f '#())) (set! pD4ef6@pD4cb2@pD4cad pD4cb2@pD4cad) (set! pD4cb4@pD4caf '#f) (set! pD4ef7@pD4cb4@pD4caf pD4cb4@pD4caf) (set! pD4cb6@pD4cae (make-record-constructor-descriptor pD4cb2@pD4cad pD4ca1@pD4c99 pD4cb4@pD4caf)) (set! pD4ef8@pD4cb6@pD4cae pD4cb6@pD4cae) (set! pD4cb9@p? (record-predicate pD4cb2@pD4cad)) (set! pD4ef9@pD4cb9@p? pD4cb9@p?) (set! pD4cbb@make-error (record-constructor pD4cb6@pD4cae)) (set! pD4efa@pD4cbb@make-error pD4cbb@make-error) (set! pD4cbd@error? (condition-predicate pD4cb2@pD4cad)) (set! pD4efb@pD4cbd@error? pD4cbd@error?) (set! pD4cbf@&error-rtd pD4cb2@pD4cad) (set! pD4efc@pD4cbf@&error-rtd pD4cbf@&error-rtd) (set! pD4cc1@&error-rcd pD4cb6@pD4cae) (set! pD4efd@pD4cc1@&error-rcd pD4cc1@&error-rcd) (set! pD4cc7@pD4cc2 (make-record-type-descriptor '&violation pD4c9d@pD4c98 'pD4cc5 '#f '#f '#())) (set! pD4efe@pD4cc7@pD4cc2 pD4cc7@pD4cc2) (set! pD4cc9@pD4cc4 '#f) (set! pD4eff@pD4cc9@pD4cc4 pD4cc9@pD4cc4) (set! pD4ccb@pD4cc3 (make-record-constructor-descriptor pD4cc7@pD4cc2 pD4ca1@pD4c99 pD4cc9@pD4cc4)) (set! pD4f00@pD4ccb@pD4cc3 pD4ccb@pD4cc3) (set! pD4cce@p? (record-predicate pD4cc7@pD4cc2)) (set! pD4f01@pD4cce@p? pD4cce@p?) (set! pD4cd0@make-violation (record-constructor pD4ccb@pD4cc3)) (set! pD4f02@pD4cd0@make-violation pD4cd0@make-violation) (set! pD4cd2@violation? (condition-predicate pD4cc7@pD4cc2)) (set! pD4f03@pD4cd2@violation? pD4cd2@violation?) (set! pD4cd4@&violation-rtd pD4cc7@pD4cc2) (set! pD4f04@pD4cd4@&violation-rtd pD4cd4@&violation-rtd) (set! pD4cd6@&violation-rcd pD4ccb@pD4cc3) (set! pD4f05@pD4cd6@&violation-rcd pD4cd6@&violation-rcd) (set! pD4cdc@pD4cd7 (make-record-type-descriptor '&assertion pD4cc7@pD4cc2 'pD4cda '#f '#f '#())) (set! pD4f06@pD4cdc@pD4cd7 pD4cdc@pD4cd7) (set! pD4cde@pD4cd9 '#f) (set! pD4f07@pD4cde@pD4cd9 pD4cde@pD4cd9) (set! pD4ce0@pD4cd8 (make-record-constructor-descriptor pD4cdc@pD4cd7 pD4ccb@pD4cc3 pD4cde@pD4cd9)) (set! pD4f08@pD4ce0@pD4cd8 pD4ce0@pD4cd8) (set! pD4ce3@p? (record-predicate pD4cdc@pD4cd7)) (set! pD4f09@pD4ce3@p? pD4ce3@p?) (set! pD4ce5@make-assertion-violation (record-constructor pD4ce0@pD4cd8)) (set! pD4f0a@pD4ce5@make-assertion-violation pD4ce5@make-assertion-violation) (set! pD4ce7@assertion-violation? (condition-predicate pD4cdc@pD4cd7)) (set! pD4f0b@pD4ce7@assertion-violation? pD4ce7@assertion-violation?) (set! pD4ce9@&assertion-rtd pD4cdc@pD4cd7) (set! pD4f0c@pD4ce9@&assertion-rtd pD4ce9@&assertion-rtd) (set! pD4ceb@&assertion-rcd pD4ce0@pD4cd8) (set! pD4f0d@pD4ceb@&assertion-rcd pD4ceb@&assertion-rcd) (set! pD4cf3@pD4cee (make-record-type-descriptor '&irritants pD4c16@pD4c11 'pD4cf1 '#f '#f '#((immutable irritants)))) (set! pD4f0e@pD4cf3@pD4cee pD4cf3@pD4cee) (set! pD4cf5@pD4cf0 '#f) (set! pD4f0f@pD4cf5@pD4cf0 pD4cf5@pD4cf0) (set! pD4cf7@pD4cef (make-record-constructor-descriptor pD4cf3@pD4cee pD4c1a@pD4c12 pD4cf5@pD4cf0)) (set! pD4f10@pD4cf7@pD4cef pD4cf7@pD4cef) (set! pD4cfa@p? (record-predicate pD4cf3@pD4cee)) (set! pD4f11@pD4cfa@p? pD4cfa@p?) (set! pD4cfc@make-irritants-condition (record-constructor pD4cf7@pD4cef)) (set! pD4f12@pD4cfc@make-irritants-condition pD4cfc@make-irritants-condition) (set! pD4cfe@pD4ced (record-accessor pD4cf3@pD4cee '0)) (set! pD4f13@pD4cfe@pD4ced pD4cfe@pD4ced) (set! pD4d00@irritants-condition? (condition-predicate pD4cf3@pD4cee)) (set! pD4f14@pD4d00@irritants-condition? pD4d00@irritants-condition?) (set! pD4d02@condition-irritants (condition-accessor pD4cf3@pD4cee pD4cfe@pD4ced)) (set! pD4f15@pD4d02@condition-irritants pD4d02@condition-irritants) (set! pD4d04@&irritants-rtd pD4cf3@pD4cee) (set! pD4f16@pD4d04@&irritants-rtd pD4d04@&irritants-rtd) (set! pD4d06@&irritants-rcd pD4cf7@pD4cef) (set! pD4f17@pD4d06@&irritants-rcd pD4d06@&irritants-rcd) (set! pD4d0e@pD4d09 (make-record-type-descriptor '&who pD4c16@pD4c11 'pD4d0c '#f '#f '#((immutable who)))) (set! pD4f18@pD4d0e@pD4d09 pD4d0e@pD4d09) (set! pD4d10@pD4d0b '#f) (set! pD4f19@pD4d10@pD4d0b pD4d10@pD4d0b) (set! pD4d12@pD4d0a (make-record-constructor-descriptor pD4d0e@pD4d09 pD4c1a@pD4c12 pD4d10@pD4d0b)) (set! pD4f1a@pD4d12@pD4d0a pD4d12@pD4d0a) (set! pD4d15@p? (record-predicate pD4d0e@pD4d09)) (set! pD4f1b@pD4d15@p? pD4d15@p?) (set! pD4d17@make-who-condition (record-constructor pD4d12@pD4d0a)) (set! pD4f1c@pD4d17@make-who-condition pD4d17@make-who-condition) (set! pD4d19@pD4d08 (record-accessor pD4d0e@pD4d09 '0)) (set! pD4f1d@pD4d19@pD4d08 pD4d19@pD4d08) (set! pD4d1b@who-condition? (condition-predicate pD4d0e@pD4d09)) (set! pD4f1e@pD4d1b@who-condition? pD4d1b@who-condition?) (set! pD4d1d@condition-who (condition-accessor pD4d0e@pD4d09 pD4d19@pD4d08)) (set! pD4f1f@pD4d1d@condition-who pD4d1d@condition-who) (set! pD4d1f@&who-rtd pD4d0e@pD4d09) (set! pD4f20@pD4d1f@&who-rtd pD4d1f@&who-rtd) (set! pD4d21@&who-rcd pD4d12@pD4d0a) (set! pD4f21@pD4d21@&who-rcd pD4d21@&who-rcd) (set! pD4d27@pD4d22 (make-record-type-descriptor '&non-continuable pD4cc7@pD4cc2 'pD4d25 '#f '#f '#())) (set! pD4f22@pD4d27@pD4d22 pD4d27@pD4d22) (set! pD4d29@pD4d24 '#f) (set! pD4f23@pD4d29@pD4d24 pD4d29@pD4d24) (set! pD4d2b@pD4d23 (make-record-constructor-descriptor pD4d27@pD4d22 pD4ccb@pD4cc3 pD4d29@pD4d24)) (set! pD4f24@pD4d2b@pD4d23 pD4d2b@pD4d23) (set! pD4d2e@p? (record-predicate pD4d27@pD4d22)) (set! pD4f25@pD4d2e@p? pD4d2e@p?) (set! pD4d30@make-non-continuable-violation (record-constructor pD4d2b@pD4d23)) (set! pD4f26@pD4d30@make-non-continuable-violation pD4d30@make-non-continuable-violation) (set! pD4d32@non-continuable-violation? (condition-predicate pD4d27@pD4d22)) (set! pD4f27@pD4d32@non-continuable-violation? pD4d32@non-continuable-violation?) (set! pD4d34@&non-continuable-rtd pD4d27@pD4d22) (set! pD4f28@pD4d34@&non-continuable-rtd pD4d34@&non-continuable-rtd) (set! pD4d36@&non-continuable-rcd pD4d2b@pD4d23) (set! pD4f29@pD4d36@&non-continuable-rcd pD4d36@&non-continuable-rcd) (set! pD4d3c@pD4d37 (make-record-type-descriptor '&implementation-restriction pD4cc7@pD4cc2 'pD4d3a '#f '#f '#())) (set! pD4f2a@pD4d3c@pD4d37 pD4d3c@pD4d37) (set! pD4d3e@pD4d39 '#f) (set! pD4f2b@pD4d3e@pD4d39 pD4d3e@pD4d39) (set! pD4d40@pD4d38 (make-record-constructor-descriptor pD4d3c@pD4d37 pD4ccb@pD4cc3 pD4d3e@pD4d39)) (set! pD4f2c@pD4d40@pD4d38 pD4d40@pD4d38) (set! pD4d43@p? (record-predicate pD4d3c@pD4d37)) (set! pD4f2d@pD4d43@p? pD4d43@p?) (set! pD4d45@make-implementation-restriction-violation (record-constructor pD4d40@pD4d38)) (set! pD4f2e@pD4d45@make-implementation-restriction-violation pD4d45@make-implementation-restriction-violation) (set! pD4d47@implementation-restriction-violation? (condition-predicate pD4d3c@pD4d37)) (set! pD4f2f@pD4d47@implementation-restriction-violation? pD4d47@implementation-restriction-violation?) (set! pD4d49@&implementation-restriction-rtd pD4d3c@pD4d37) (set! pD4f30@pD4d49@&implementation-restriction-rtd pD4d49@&implementation-restriction-rtd) (set! pD4d4b@&implementation-restriction-rcd pD4d40@pD4d38) (set! pD4f31@pD4d4b@&implementation-restriction-rcd pD4d4b@&implementation-restriction-rcd) (set! pD4d51@pD4d4c (make-record-type-descriptor '&lexical pD4cc7@pD4cc2 'pD4d4f '#f '#f '#())) (set! pD4f32@pD4d51@pD4d4c pD4d51@pD4d4c) (set! pD4d53@pD4d4e '#f) (set! pD4f33@pD4d53@pD4d4e pD4d53@pD4d4e) (set! pD4d55@pD4d4d (make-record-constructor-descriptor pD4d51@pD4d4c pD4ccb@pD4cc3 pD4d53@pD4d4e)) (set! pD4f34@pD4d55@pD4d4d pD4d55@pD4d4d) (set! pD4d58@p? (record-predicate pD4d51@pD4d4c)) (set! pD4f35@pD4d58@p? pD4d58@p?) (set! pD4d5a@make-lexical-violation (record-constructor pD4d55@pD4d4d)) (set! pD4f36@pD4d5a@make-lexical-violation pD4d5a@make-lexical-violation) (set! pD4d5c@lexical-violation? (condition-predicate pD4d51@pD4d4c)) (set! pD4f37@pD4d5c@lexical-violation? pD4d5c@lexical-violation?) (set! pD4d5e@&lexical-rtd pD4d51@pD4d4c) (set! pD4f38@pD4d5e@&lexical-rtd pD4d5e@&lexical-rtd) (set! pD4d60@&lexical-rcd pD4d55@pD4d4d) (set! pD4f39@pD4d60@&lexical-rcd pD4d60@&lexical-rcd) (set! pD4d6a@pD4d65 (make-record-type-descriptor '&syntax pD4cc7@pD4cc2 'pD4d68 '#f '#f '#((immutable form) (immutable subform)))) (set! pD4f3a@pD4d6a@pD4d65 pD4d6a@pD4d65) (set! pD4d6c@pD4d67 '#f) (set! pD4f3b@pD4d6c@pD4d67 pD4d6c@pD4d67) (set! pD4d6e@pD4d66 (make-record-constructor-descriptor pD4d6a@pD4d65 pD4ccb@pD4cc3 pD4d6c@pD4d67)) (set! pD4f3c@pD4d6e@pD4d66 pD4d6e@pD4d66) (set! pD4d71@p? (record-predicate pD4d6a@pD4d65)) (set! pD4f3d@pD4d71@p? pD4d71@p?) (set! pD4d73@make-syntax-violation (record-constructor pD4d6e@pD4d66)) (set! pD4f3e@pD4d73@make-syntax-violation pD4d73@make-syntax-violation) (set! pD4d75@pD4d62 (record-accessor pD4d6a@pD4d65 '0)) (set! pD4f3f@pD4d75@pD4d62 pD4d75@pD4d62) (set! pD4d77@pD4d64 (record-accessor pD4d6a@pD4d65 '1)) (set! pD4f40@pD4d77@pD4d64 pD4d77@pD4d64) (set! pD4d79@syntax-violation? (condition-predicate pD4d6a@pD4d65)) (set! pD4f41@pD4d79@syntax-violation? pD4d79@syntax-violation?) (set! pD4d7b@syntax-violation-form (condition-accessor pD4d6a@pD4d65 pD4d75@pD4d62)) (set! pD4f42@pD4d7b@syntax-violation-form pD4d7b@syntax-violation-form) (set! pD4d7d@syntax-violation-subform (condition-accessor pD4d6a@pD4d65 pD4d77@pD4d64)) (set! pD4f43@pD4d7d@syntax-violation-subform pD4d7d@syntax-violation-subform) (set! pD4d7f@&syntax-rtd pD4d6a@pD4d65) (set! pD4f44@pD4d7f@&syntax-rtd pD4d7f@&syntax-rtd) (set! pD4d81@&syntax-rcd pD4d6e@pD4d66) (set! pD4f45@pD4d81@&syntax-rcd pD4d81@&syntax-rcd) (set! pD4d87@pD4d82 (make-record-type-descriptor '&undefined pD4cc7@pD4cc2 'pD4d85 '#f '#f '#())) (set! pD4f46@pD4d87@pD4d82 pD4d87@pD4d82) (set! pD4d89@pD4d84 '#f) (set! pD4f47@pD4d89@pD4d84 pD4d89@pD4d84) (set! pD4d8b@pD4d83 (make-record-constructor-descriptor pD4d87@pD4d82 pD4ccb@pD4cc3 pD4d89@pD4d84)) (set! pD4f48@pD4d8b@pD4d83 pD4d8b@pD4d83) (set! pD4d8e@p? (record-predicate pD4d87@pD4d82)) (set! pD4f49@pD4d8e@p? pD4d8e@p?) (set! pD4d90@make-undefined-violation (record-constructor pD4d8b@pD4d83)) (set! pD4f4a@pD4d90@make-undefined-violation pD4d90@make-undefined-violation) (set! pD4d92@undefined-violation? (condition-predicate pD4d87@pD4d82)) (set! pD4f4b@pD4d92@undefined-violation? pD4d92@undefined-violation?) (set! pD4d94@&undefined-rtd pD4d87@pD4d82) (set! pD4f4c@pD4d94@&undefined-rtd pD4d94@&undefined-rtd) (set! pD4d96@&undefined-rcd pD4d8b@pD4d83) (set! pD4f4d@pD4d96@&undefined-rcd pD4d96@&undefined-rcd) (set! pD4d9c@pD4d97 (make-record-type-descriptor '&i/o pD4cb2@pD4cad 'pD4d9a '#f '#f '#())) (set! pD4f4e@pD4d9c@pD4d97 pD4d9c@pD4d97) (set! pD4d9e@pD4d99 '#f) (set! pD4f4f@pD4d9e@pD4d99 pD4d9e@pD4d99) (set! pD4da0@pD4d98 (make-record-constructor-descriptor pD4d9c@pD4d97 pD4cb6@pD4cae pD4d9e@pD4d99)) (set! pD4f50@pD4da0@pD4d98 pD4da0@pD4d98) (set! pD4da3@p? (record-predicate pD4d9c@pD4d97)) (set! pD4f51@pD4da3@p? pD4da3@p?) (set! pD4da5@make-i/o-error (record-constructor pD4da0@pD4d98)) (set! pD4f52@pD4da5@make-i/o-error pD4da5@make-i/o-error) (set! pD4da7@i/o-error? (condition-predicate pD4d9c@pD4d97)) (set! pD4f53@pD4da7@i/o-error? pD4da7@i/o-error?) (set! pD4da9@&i/o-rtd pD4d9c@pD4d97) (set! pD4f54@pD4da9@&i/o-rtd pD4da9@&i/o-rtd) (set! pD4dab@&i/o-rcd pD4da0@pD4d98) (set! pD4f55@pD4dab@&i/o-rcd pD4dab@&i/o-rcd) (set! pD4db1@pD4dac (make-record-type-descriptor '&i/o-read pD4d9c@pD4d97 'pD4daf '#f '#f '#())) (set! pD4f56@pD4db1@pD4dac pD4db1@pD4dac) (set! pD4db3@pD4dae '#f) (set! pD4f57@pD4db3@pD4dae pD4db3@pD4dae) (set! pD4db5@pD4dad (make-record-constructor-descriptor pD4db1@pD4dac pD4da0@pD4d98 pD4db3@pD4dae)) (set! pD4f58@pD4db5@pD4dad pD4db5@pD4dad) (set! pD4db8@p? (record-predicate pD4db1@pD4dac)) (set! pD4f59@pD4db8@p? pD4db8@p?) (set! pD4dba@make-i/o-read-error (record-constructor pD4db5@pD4dad)) (set! pD4f5a@pD4dba@make-i/o-read-error pD4dba@make-i/o-read-error) (set! pD4dbc@i/o-read-error? (condition-predicate pD4db1@pD4dac)) (set! pD4f5b@pD4dbc@i/o-read-error? pD4dbc@i/o-read-error?) (set! pD4dbe@&i/o-read-rtd pD4db1@pD4dac) (set! pD4f5c@pD4dbe@&i/o-read-rtd pD4dbe@&i/o-read-rtd) (set! pD4dc0@&i/o-read-rcd pD4db5@pD4dad) (set! pD4f5d@pD4dc0@&i/o-read-rcd pD4dc0@&i/o-read-rcd) (set! pD4dc6@pD4dc1 (make-record-type-descriptor '&i/o-write pD4d9c@pD4d97 'pD4dc4 '#f '#f '#())) (set! pD4f5e@pD4dc6@pD4dc1 pD4dc6@pD4dc1) (set! pD4dc8@pD4dc3 '#f) (set! pD4f5f@pD4dc8@pD4dc3 pD4dc8@pD4dc3) (set! pD4dca@pD4dc2 (make-record-constructor-descriptor pD4dc6@pD4dc1 pD4da0@pD4d98 pD4dc8@pD4dc3)) (set! pD4f60@pD4dca@pD4dc2 pD4dca@pD4dc2) (set! pD4dcd@p? (record-predicate pD4dc6@pD4dc1)) (set! pD4f61@pD4dcd@p? pD4dcd@p?) (set! pD4dcf@make-i/o-write-error (record-constructor pD4dca@pD4dc2)) (set! pD4f62@pD4dcf@make-i/o-write-error pD4dcf@make-i/o-write-error) (set! pD4dd1@i/o-write-error? (condition-predicate pD4dc6@pD4dc1)) (set! pD4f63@pD4dd1@i/o-write-error? pD4dd1@i/o-write-error?) (set! pD4dd3@&i/o-write-rtd pD4dc6@pD4dc1) (set! pD4f64@pD4dd3@&i/o-write-rtd pD4dd3@&i/o-write-rtd) (set! pD4dd5@&i/o-write-rcd pD4dca@pD4dc2) (set! pD4f65@pD4dd5@&i/o-write-rcd pD4dd5@&i/o-write-rcd) (set! pD4ddd@pD4dd8 (make-record-type-descriptor '&i/o-invalid-position pD4d9c@pD4d97 'pD4ddb '#f '#f '#((immutable position)))) (set! pD4f66@pD4ddd@pD4dd8 pD4ddd@pD4dd8) (set! pD4ddf@pD4dda '#f) (set! pD4f67@pD4ddf@pD4dda pD4ddf@pD4dda) (set! pD4de1@pD4dd9 (make-record-constructor-descriptor pD4ddd@pD4dd8 pD4da0@pD4d98 pD4ddf@pD4dda)) (set! pD4f68@pD4de1@pD4dd9 pD4de1@pD4dd9) (set! pD4de4@p? (record-predicate pD4ddd@pD4dd8)) (set! pD4f69@pD4de4@p? pD4de4@p?) (set! pD4de6@make-i/o-invalid-position-error (record-constructor pD4de1@pD4dd9)) (set! pD4f6a@pD4de6@make-i/o-invalid-position-error pD4de6@make-i/o-invalid-position-error) (set! pD4de8@pD4dd7 (record-accessor pD4ddd@pD4dd8 '0)) (set! pD4f6b@pD4de8@pD4dd7 pD4de8@pD4dd7) (set! pD4dea@i/o-invalid-position-error? (condition-predicate pD4ddd@pD4dd8)) (set! pD4f6c@pD4dea@i/o-invalid-position-error? pD4dea@i/o-invalid-position-error?) (set! pD4dec@i/o-error-position (condition-accessor pD4ddd@pD4dd8 pD4de8@pD4dd7)) (set! pD4f6d@pD4dec@i/o-error-position pD4dec@i/o-error-position) (set! pD4dee@&i/o-invalid-position-rtd pD4ddd@pD4dd8) (set! pD4f6e@pD4dee@&i/o-invalid-position-rtd pD4dee@&i/o-invalid-position-rtd) (set! pD4df0@&i/o-invalid-position-rcd pD4de1@pD4dd9) (set! pD4f6f@pD4df0@&i/o-invalid-position-rcd pD4df0@&i/o-invalid-position-rcd) (set! pD4df8@pD4df3 (make-record-type-descriptor '&i/o-filename pD4d9c@pD4d97 'pD4df6 '#f '#f '#((immutable filename)))) (set! pD4f70@pD4df8@pD4df3 pD4df8@pD4df3) (set! pD4dfa@pD4df5 '#f) (set! pD4f71@pD4dfa@pD4df5 pD4dfa@pD4df5) (set! pD4dfc@pD4df4 (make-record-constructor-descriptor pD4df8@pD4df3 pD4da0@pD4d98 pD4dfa@pD4df5)) (set! pD4f72@pD4dfc@pD4df4 pD4dfc@pD4df4) (set! pD4dff@p? (record-predicate pD4df8@pD4df3)) (set! pD4f73@pD4dff@p? pD4dff@p?) (set! pD4e01@make-i/o-filename-error (record-constructor pD4dfc@pD4df4)) (set! pD4f74@pD4e01@make-i/o-filename-error pD4e01@make-i/o-filename-error) (set! pD4e03@pD4df2 (record-accessor pD4df8@pD4df3 '0)) (set! pD4f75@pD4e03@pD4df2 pD4e03@pD4df2) (set! pD4e05@i/o-filename-error? (condition-predicate pD4df8@pD4df3)) (set! pD4f76@pD4e05@i/o-filename-error? pD4e05@i/o-filename-error?) (set! pD4e07@i/o-error-filename (condition-accessor pD4df8@pD4df3 pD4e03@pD4df2)) (set! pD4f77@pD4e07@i/o-error-filename pD4e07@i/o-error-filename) (set! pD4e09@&i/o-filename-rtd pD4df8@pD4df3) (set! pD4f78@pD4e09@&i/o-filename-rtd pD4e09@&i/o-filename-rtd) (set! pD4e0b@&i/o-filename-rcd pD4dfc@pD4df4) (set! pD4f79@pD4e0b@&i/o-filename-rcd pD4e0b@&i/o-filename-rcd) (set! pD4e11@pD4e0c (make-record-type-descriptor '&i/o-file-protection pD4df8@pD4df3 'pD4e0f '#f '#f '#())) (set! pD4f7a@pD4e11@pD4e0c pD4e11@pD4e0c) (set! pD4e13@pD4e0e '#f) (set! pD4f7b@pD4e13@pD4e0e pD4e13@pD4e0e) (set! pD4e15@pD4e0d (make-record-constructor-descriptor pD4e11@pD4e0c pD4dfc@pD4df4 pD4e13@pD4e0e)) (set! pD4f7c@pD4e15@pD4e0d pD4e15@pD4e0d) (set! pD4e18@p? (record-predicate pD4e11@pD4e0c)) (set! pD4f7d@pD4e18@p? pD4e18@p?) (set! pD4e1a@make-i/o-file-protection-error (record-constructor pD4e15@pD4e0d)) (set! pD4f7e@pD4e1a@make-i/o-file-protection-error pD4e1a@make-i/o-file-protection-error) (set! pD4e1c@i/o-file-protection-error? (condition-predicate pD4e11@pD4e0c)) (set! pD4f7f@pD4e1c@i/o-file-protection-error? pD4e1c@i/o-file-protection-error?) (set! pD4e1e@&i/o-file-protection-rtd pD4e11@pD4e0c) (set! pD4f80@pD4e1e@&i/o-file-protection-rtd pD4e1e@&i/o-file-protection-rtd) (set! pD4e20@&i/o-file-protection-rcd pD4e15@pD4e0d) (set! pD4f81@pD4e20@&i/o-file-protection-rcd pD4e20@&i/o-file-protection-rcd) (set! pD4e26@pD4e21 (make-record-type-descriptor '&i/o-file-is-read-only pD4e11@pD4e0c 'pD4e24 '#f '#f '#())) (set! pD4f82@pD4e26@pD4e21 pD4e26@pD4e21) (set! pD4e28@pD4e23 '#f) (set! pD4f83@pD4e28@pD4e23 pD4e28@pD4e23) (set! pD4e2a@pD4e22 (make-record-constructor-descriptor pD4e26@pD4e21 pD4e15@pD4e0d pD4e28@pD4e23)) (set! pD4f84@pD4e2a@pD4e22 pD4e2a@pD4e22) (set! pD4e2d@p? (record-predicate pD4e26@pD4e21)) (set! pD4f85@pD4e2d@p? pD4e2d@p?) (set! pD4e2f@make-i/o-file-is-read-only-error (record-constructor pD4e2a@pD4e22)) (set! pD4f86@pD4e2f@make-i/o-file-is-read-only-error pD4e2f@make-i/o-file-is-read-only-error) (set! pD4e31@i/o-file-is-read-only-error? (condition-predicate pD4e26@pD4e21)) (set! pD4f87@pD4e31@i/o-file-is-read-only-error? pD4e31@i/o-file-is-read-only-error?) (set! pD4e33@&i/o-file-is-read-only-rtd pD4e26@pD4e21) (set! pD4f88@pD4e33@&i/o-file-is-read-only-rtd pD4e33@&i/o-file-is-read-only-rtd) (set! pD4e35@&i/o-file-is-read-only-rcd pD4e2a@pD4e22) (set! pD4f89@pD4e35@&i/o-file-is-read-only-rcd pD4e35@&i/o-file-is-read-only-rcd) (set! pD4e3b@pD4e36 (make-record-type-descriptor '&i/o-file-already-exists pD4df8@pD4df3 'pD4e39 '#f '#f '#())) (set! pD4f8a@pD4e3b@pD4e36 pD4e3b@pD4e36) (set! pD4e3d@pD4e38 '#f) (set! pD4f8b@pD4e3d@pD4e38 pD4e3d@pD4e38) (set! pD4e3f@pD4e37 (make-record-constructor-descriptor pD4e3b@pD4e36 pD4dfc@pD4df4 pD4e3d@pD4e38)) (set! pD4f8c@pD4e3f@pD4e37 pD4e3f@pD4e37) (set! pD4e42@p? (record-predicate pD4e3b@pD4e36)) (set! pD4f8d@pD4e42@p? pD4e42@p?) (set! pD4e44@make-i/o-file-already-exists-error (record-constructor pD4e3f@pD4e37)) (set! pD4f8e@pD4e44@make-i/o-file-already-exists-error pD4e44@make-i/o-file-already-exists-error) (set! pD4e46@i/o-file-already-exists-error? (condition-predicate pD4e3b@pD4e36)) (set! pD4f8f@pD4e46@i/o-file-already-exists-error? pD4e46@i/o-file-already-exists-error?) (set! pD4e48@&i/o-file-already-exists-rtd pD4e3b@pD4e36) (set! pD4f90@pD4e48@&i/o-file-already-exists-rtd pD4e48@&i/o-file-already-exists-rtd) (set! pD4e4a@&i/o-file-already-exists-rcd pD4e3f@pD4e37) (set! pD4f91@pD4e4a@&i/o-file-already-exists-rcd pD4e4a@&i/o-file-already-exists-rcd) (set! pD4e50@pD4e4b (make-record-type-descriptor '&i/o-file-does-not-exist pD4df8@pD4df3 'pD4e4e '#f '#f '#())) (set! pD4f92@pD4e50@pD4e4b pD4e50@pD4e4b) (set! pD4e52@pD4e4d '#f) (set! pD4f93@pD4e52@pD4e4d pD4e52@pD4e4d) (set! pD4e54@pD4e4c (make-record-constructor-descriptor pD4e50@pD4e4b pD4dfc@pD4df4 pD4e52@pD4e4d)) (set! pD4f94@pD4e54@pD4e4c pD4e54@pD4e4c) (set! pD4e57@p? (record-predicate pD4e50@pD4e4b)) (set! pD4f95@pD4e57@p? pD4e57@p?) (set! pD4e59@make-i/o-file-does-not-exist-error (record-constructor pD4e54@pD4e4c)) (set! pD4f96@pD4e59@make-i/o-file-does-not-exist-error pD4e59@make-i/o-file-does-not-exist-error) (set! pD4e5b@i/o-file-does-not-exist-error? (condition-predicate pD4e50@pD4e4b)) (set! pD4f97@pD4e5b@i/o-file-does-not-exist-error? pD4e5b@i/o-file-does-not-exist-error?) (set! pD4e5d@&i/o-file-does-not-exist-rtd pD4e50@pD4e4b) (set! pD4f98@pD4e5d@&i/o-file-does-not-exist-rtd pD4e5d@&i/o-file-does-not-exist-rtd) (set! pD4e5f@&i/o-file-does-not-exist-rcd pD4e54@pD4e4c) (set! pD4f99@pD4e5f@&i/o-file-does-not-exist-rcd pD4e5f@&i/o-file-does-not-exist-rcd) (set! pD4e67@pD4e62 (make-record-type-descriptor '&i/o-port pD4d9c@pD4d97 'pD4e65 '#f '#f '#((immutable port)))) (set! pD4f9a@pD4e67@pD4e62 pD4e67@pD4e62) (set! pD4e69@pD4e64 '#f) (set! pD4f9b@pD4e69@pD4e64 pD4e69@pD4e64) (set! pD4e6b@pD4e63 (make-record-constructor-descriptor pD4e67@pD4e62 pD4da0@pD4d98 pD4e69@pD4e64)) (set! pD4f9c@pD4e6b@pD4e63 pD4e6b@pD4e63) (set! pD4e6e@p? (record-predicate pD4e67@pD4e62)) (set! pD4f9d@pD4e6e@p? pD4e6e@p?) (set! pD4e70@make-i/o-port-error (record-constructor pD4e6b@pD4e63)) (set! pD4f9e@pD4e70@make-i/o-port-error pD4e70@make-i/o-port-error) (set! pD4e72@pD4e61 (record-accessor pD4e67@pD4e62 '0)) (set! pD4f9f@pD4e72@pD4e61 pD4e72@pD4e61) (set! pD4e74@i/o-port-error? (condition-predicate pD4e67@pD4e62)) (set! pD4fa0@pD4e74@i/o-port-error? pD4e74@i/o-port-error?) (set! pD4e76@i/o-error-port (condition-accessor pD4e67@pD4e62 pD4e72@pD4e61)) (set! pD4fa1@pD4e76@i/o-error-port pD4e76@i/o-error-port) (set! pD4e78@&i/o-port-rtd pD4e67@pD4e62) (set! pD4fa2@pD4e78@&i/o-port-rtd pD4e78@&i/o-port-rtd) (set! pD4e7a@&i/o-port-rcd pD4e6b@pD4e63) (set! pD4fa3@pD4e7a@&i/o-port-rcd pD4e7a@&i/o-port-rcd) (set! pD4e80@pD4e7b (make-record-type-descriptor '&i/o-decoding pD4e67@pD4e62 'pD4e7e '#f '#f '#())) (set! pD4fa4@pD4e80@pD4e7b pD4e80@pD4e7b) (set! pD4e82@pD4e7d '#f) (set! pD4fa5@pD4e82@pD4e7d pD4e82@pD4e7d) (set! pD4e84@pD4e7c (make-record-constructor-descriptor pD4e80@pD4e7b pD4e6b@pD4e63 pD4e82@pD4e7d)) (set! pD4fa6@pD4e84@pD4e7c pD4e84@pD4e7c) (set! pD4e87@p? (record-predicate pD4e80@pD4e7b)) (set! pD4fa7@pD4e87@p? pD4e87@p?) (set! pD4e89@make-i/o-decoding-error (record-constructor pD4e84@pD4e7c)) (set! pD4fa8@pD4e89@make-i/o-decoding-error pD4e89@make-i/o-decoding-error) (set! pD4e8b@i/o-decoding-error? (condition-predicate pD4e80@pD4e7b)) (set! pD4fa9@pD4e8b@i/o-decoding-error? pD4e8b@i/o-decoding-error?) (set! pD4e8d@&i/o-decoding-rtd pD4e80@pD4e7b) (set! pD4faa@pD4e8d@&i/o-decoding-rtd pD4e8d@&i/o-decoding-rtd) (set! pD4e8f@&i/o-decoding-rcd pD4e84@pD4e7c) (set! pD4fab@pD4e8f@&i/o-decoding-rcd pD4e8f@&i/o-decoding-rcd) (set! pD4e97@pD4e92 (make-record-type-descriptor '&i/o-encoding pD4e67@pD4e62 'pD4e95 '#f '#f '#((immutable char)))) (set! pD4fac@pD4e97@pD4e92 pD4e97@pD4e92) (set! pD4e99@pD4e94 '#f) (set! pD4fad@pD4e99@pD4e94 pD4e99@pD4e94) (set! pD4e9b@pD4e93 (make-record-constructor-descriptor pD4e97@pD4e92 pD4e6b@pD4e63 pD4e99@pD4e94)) (set! pD4fae@pD4e9b@pD4e93 pD4e9b@pD4e93) (set! pD4e9e@p? (record-predicate pD4e97@pD4e92)) (set! pD4faf@pD4e9e@p? pD4e9e@p?) (set! pD4ea0@make-i/o-encoding-error (record-constructor pD4e9b@pD4e93)) (set! pD4fb0@pD4ea0@make-i/o-encoding-error pD4ea0@make-i/o-encoding-error) (set! pD4ea2@pD4e91 (record-accessor pD4e97@pD4e92 '0)) (set! pD4fb1@pD4ea2@pD4e91 pD4ea2@pD4e91) (set! pD4ea4@i/o-encoding-error? (condition-predicate pD4e97@pD4e92)) (set! pD4fb2@pD4ea4@i/o-encoding-error? pD4ea4@i/o-encoding-error?) (set! pD4ea6@i/o-encoding-error-char (condition-accessor pD4e97@pD4e92 pD4ea2@pD4e91)) (set! pD4fb3@pD4ea6@i/o-encoding-error-char pD4ea6@i/o-encoding-error-char) (set! pD4ea8@&i/o-encoding-rtd pD4e97@pD4e92) (set! pD4fb4@pD4ea8@&i/o-encoding-rtd pD4ea8@&i/o-encoding-rtd) (set! pD4eaa@&i/o-encoding-rcd pD4e9b@pD4e93) (set! pD4fb5@pD4eaa@&i/o-encoding-rcd pD4eaa@&i/o-encoding-rcd) (set! pD4eb0@pD4eab (make-record-type-descriptor '&no-infinities pD4d3c@pD4d37 'pD4eae '#f '#f '#())) (set! pD4fb6@pD4eb0@pD4eab pD4eb0@pD4eab) (set! pD4eb2@pD4ead '#f) (set! pD4fb7@pD4eb2@pD4ead pD4eb2@pD4ead) (set! pD4eb4@pD4eac (make-record-constructor-descriptor pD4eb0@pD4eab pD4d40@pD4d38 pD4eb2@pD4ead)) (set! pD4fb8@pD4eb4@pD4eac pD4eb4@pD4eac) (set! pD4eb7@p? (record-predicate pD4eb0@pD4eab)) (set! pD4fb9@pD4eb7@p? pD4eb7@p?) (set! pD4eb9@make-no-infinities-violation (record-constructor pD4eb4@pD4eac)) (set! pD4fba@pD4eb9@make-no-infinities-violation pD4eb9@make-no-infinities-violation) (set! pD4ebb@no-infinities-violation? (condition-predicate pD4eb0@pD4eab)) (set! pD4fbb@pD4ebb@no-infinities-violation? pD4ebb@no-infinities-violation?) (set! pD4ebd@&no-infinities-rtd pD4eb0@pD4eab) (set! pD4fbc@pD4ebd@&no-infinities-rtd pD4ebd@&no-infinities-rtd) (set! pD4ebf@&no-infinities-rcd pD4eb4@pD4eac) (set! pD4fbd@pD4ebf@&no-infinities-rcd pD4ebf@&no-infinities-rcd) (set! pD4ec5@pD4ec0 (make-record-type-descriptor '&no-nans pD4d3c@pD4d37 'pD4ec3 '#f '#f '#())) (set! pD4fbe@pD4ec5@pD4ec0 pD4ec5@pD4ec0) (set! pD4ec7@pD4ec2 '#f) (set! pD4fbf@pD4ec7@pD4ec2 pD4ec7@pD4ec2) (set! pD4ec9@pD4ec1 (make-record-constructor-descriptor pD4ec5@pD4ec0 pD4d40@pD4d38 pD4ec7@pD4ec2)) (set! pD4fc0@pD4ec9@pD4ec1 pD4ec9@pD4ec1) (set! pD4ecc@p? (record-predicate pD4ec5@pD4ec0)) (set! pD4fc1@pD4ecc@p? pD4ecc@p?) (set! pD4ece@make-no-nans-violation (record-constructor pD4ec9@pD4ec1)) (set! pD4fc2@pD4ece@make-no-nans-violation pD4ece@make-no-nans-violation) (set! pD4ed0@no-nans-violation? (condition-predicate pD4ec5@pD4ec0)) (set! pD4fc3@pD4ed0@no-nans-violation? pD4ed0@no-nans-violation?) (set! pD4ed2@&no-nans-rtd pD4ec5@pD4ec0) (set! pD4fc4@pD4ed2@&no-nans-rtd pD4ed2@&no-nans-rtd) (set! pD4ed4@&no-nans-rcd pD4ec9@pD4ec1) (set! pD4fc5@pD4ed4@&no-nans-rcd pD4ed4@&no-nans-rcd) (void))
(begin (begin (pD2a5b@pD2a10@current-primitive-locations (lambda (pD5495@x) (let ((pD5497@t (assq pD5495@x '((&no-nans-rcd . pD4fc5@pD4ed4@&no-nans-rcd) (&no-nans-rtd . pD4fc4@pD4ed2@&no-nans-rtd) (&no-infinities-rcd . pD4fbd@pD4ebf@&no-infinities-rcd) (&no-infinities-rtd . pD4fbc@pD4ebd@&no-infinities-rtd) (&i/o-encoding-rcd . pD4fb5@pD4eaa@&i/o-encoding-rcd) (&i/o-encoding-rtd . pD4fb4@pD4ea8@&i/o-encoding-rtd) (&i/o-decoding-rcd . pD4fab@pD4e8f@&i/o-decoding-rcd) (&i/o-decoding-rtd . pD4faa@pD4e8d@&i/o-decoding-rtd) (&i/o-port-rcd . pD4fa3@pD4e7a@&i/o-port-rcd) (&i/o-port-rtd . pD4fa2@pD4e78@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . pD4f99@pD4e5f@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . pD4f98@pD4e5d@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . pD4f91@pD4e4a@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . pD4f90@pD4e48@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . pD4f89@pD4e35@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . pD4f88@pD4e33@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . pD4f81@pD4e20@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . pD4f80@pD4e1e@&i/o-file-protection-rtd) (&i/o-filename-rcd . pD4f79@pD4e0b@&i/o-filename-rcd) (&i/o-filename-rtd . pD4f78@pD4e09@&i/o-filename-rtd) (&i/o-invalid-position-rcd . pD4f6f@pD4df0@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . pD4f6e@pD4dee@&i/o-invalid-position-rtd) (&i/o-write-rcd . pD4f65@pD4dd5@&i/o-write-rcd) (&i/o-write-rtd . pD4f64@pD4dd3@&i/o-write-rtd) (&i/o-read-rcd . pD4f5d@pD4dc0@&i/o-read-rcd) (&i/o-read-rtd . pD4f5c@pD4dbe@&i/o-read-rtd) (&i/o-rcd . pD4f55@pD4dab@&i/o-rcd) (&i/o-rtd . pD4f54@pD4da9@&i/o-rtd) (&undefined-rcd . pD4f4d@pD4d96@&undefined-rcd) (&undefined-rtd . pD4f4c@pD4d94@&undefined-rtd) (&syntax-rcd . pD4f45@pD4d81@&syntax-rcd) (&syntax-rtd . pD4f44@pD4d7f@&syntax-rtd) (&lexical-rcd . pD4f39@pD4d60@&lexical-rcd) (&lexical-rtd . pD4f38@pD4d5e@&lexical-rtd) (&implementation-restriction-rcd . pD4f31@pD4d4b@&implementation-restriction-rcd) (&implementation-restriction-rtd . pD4f30@pD4d49@&implementation-restriction-rtd) (&non-continuable-rcd . pD4f29@pD4d36@&non-continuable-rcd) (&non-continuable-rtd . pD4f28@pD4d34@&non-continuable-rtd) (&who-rcd . pD4f21@pD4d21@&who-rcd) (&who-rtd . pD4f20@pD4d1f@&who-rtd) (&irritants-rcd . pD4f17@pD4d06@&irritants-rcd) (&irritants-rtd . pD4f16@pD4d04@&irritants-rtd) (&assertion-rcd . pD4f0d@pD4ceb@&assertion-rcd) (&assertion-rtd . pD4f0c@pD4ce9@&assertion-rtd) (&violation-rcd . pD4f05@pD4cd6@&violation-rcd) (&violation-rtd . pD4f04@pD4cd4@&violation-rtd) (&error-rcd . pD4efd@pD4cc1@&error-rcd) (&error-rtd . pD4efc@pD4cbf@&error-rtd) (&serious-rcd . pD4ef5@pD4cac@&serious-rcd) (&serious-rtd . pD4ef4@pD4caa@&serious-rtd) (&warning-rcd . pD4eed@pD4c97@&warning-rcd) (&warning-rtd . pD4eec@pD4c95@&warning-rtd) (&message-rcd . pD4ee5@pD4c82@&message-rcd) (&message-rtd . pD4ee4@pD4c80@&message-rtd) (&condition-rcd . pD4edb@pD4c23@&condition-rcd) (&condition-rtd . pD4eda@pD4c21@&condition-rtd) (syntax-error . pD4bfd@pD31a1@syntax-error) (syntax-dispatch . pD4b9b@pD30c5@syntax-dispatch) (load . pD513a@pD4fe5@load) (interaction-environment . pD4c06@pD31b3@interaction-environment) (library-path . pD2cc2@pD2afe@library-path) (mosh-cache-dir . pD2a09@pD28e9@mosh-cache-dir) (make-parameter . pD2a08@pD28e7@make-parameter) (make-variable-transformer . pD4b58@pD2ef0@make-variable-transformer) (identifier? . pD4c00@pD31a7@identifier?) (generate-temporaries . pD4bf6@pD3193@generate-temporaries) (free-identifier=? . pD4bf7@pD3195@free-identifier=?) (syntax->datum . pD4c02@pD31ab@syntax->datum) (datum->syntax . pD4c01@pD31a9@datum->syntax) (bound-identifier=? . pD4bf8@pD3197@bound-identifier=?) (make-i/o-write-error . pD4f62@pD4dcf@make-i/o-write-error) (make-i/o-read-error . pD4f5a@pD4dba@make-i/o-read-error) (make-i/o-port-error . pD4f9e@pD4e70@make-i/o-port-error) (make-i/o-invalid-position-error . pD4f6a@pD4de6@make-i/o-invalid-position-error) (make-i/o-filename-error . pD4f74@pD4e01@make-i/o-filename-error) (make-i/o-file-protection-error . pD4f7e@pD4e1a@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . pD4f86@pD4e2f@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . pD4f96@pD4e59@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . pD4f8e@pD4e44@make-i/o-file-already-exists-error) (make-i/o-error . pD4f52@pD4da5@make-i/o-error) (make-i/o-encoding-error . pD4fb0@pD4ea0@make-i/o-encoding-error) (make-i/o-decoding-error . pD4fa8@pD4e89@make-i/o-decoding-error) (i/o-write-error? . pD4f63@pD4dd1@i/o-write-error?) (i/o-read-error? . pD4f5b@pD4dbc@i/o-read-error?) (i/o-port-error? . pD4fa0@pD4e74@i/o-port-error?) (i/o-invalid-position-error? . pD4f6c@pD4dea@i/o-invalid-position-error?) (i/o-filename-error? . pD4f76@pD4e05@i/o-filename-error?) (i/o-file-protection-error? . pD4f7f@pD4e1c@i/o-file-protection-error?) (i/o-file-is-read-only-error? . pD4f87@pD4e31@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . pD4f97@pD4e5b@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . pD4f8f@pD4e46@i/o-file-already-exists-error?) (i/o-error? . pD4f53@pD4da7@i/o-error?) (i/o-error-position . pD4f6d@pD4dec@i/o-error-position) (i/o-error-port . pD4fa1@pD4e76@i/o-error-port) (i/o-error-filename . pD4f77@pD4e07@i/o-error-filename) (i/o-encoding-error? . pD4fb2@pD4ea4@i/o-encoding-error?) (i/o-encoding-error-char . pD4fb3@pD4ea6@i/o-encoding-error-char) (i/o-decoding-error? . pD4fa9@pD4e8b@i/o-decoding-error?) (scheme-report-environment . pD4bed@pD3181@scheme-report-environment) (null-environment . pD4bec@pD317f@null-environment) (command-line . pD5137@pD4fdf@command-line) (eval . pD4bef@pD3185@eval) (environment . pD4beb@pD317d@environment) (who-condition? . pD4f1e@pD4d1b@who-condition?) (warning? . pD4eeb@pD4c93@warning?) (violation? . pD4f03@pD4cd2@violation?) (undefined-violation? . pD4f4b@pD4d92@undefined-violation?) (syntax-violation? . pD4f41@pD4d79@syntax-violation?) (syntax-violation-subform . pD4f43@pD4d7d@syntax-violation-subform) (syntax-violation-form . pD4f42@pD4d7b@syntax-violation-form) (syntax-violation . pD4bff@pD31a5@syntax-violation) (serious-condition? . pD4ef3@pD4ca8@serious-condition?) (non-continuable-violation? . pD4f27@pD4d32@non-continuable-violation?) (message-condition? . pD4ee2@pD4c7c@message-condition?) (make-who-condition . pD4f1c@pD4d17@make-who-condition) (make-warning . pD4eea@pD4c91@make-warning) (make-violation . pD4f02@pD4cd0@make-violation) (make-undefined-violation . pD4f4a@pD4d90@make-undefined-violation) (make-syntax-violation . pD4f3e@pD4d73@make-syntax-violation) (make-serious-condition . pD4ef2@pD4ca6@make-serious-condition) (make-non-continuable-violation . pD4f26@pD4d30@make-non-continuable-violation) (make-message-condition . pD4ee0@pD4c78@make-message-condition) (make-lexical-violation . pD4f36@pD4d5a@make-lexical-violation) (make-irritants-condition . pD4f12@pD4cfc@make-irritants-condition) (make-implementation-restriction-violation . pD4f2e@pD4d45@make-implementation-restriction-violation) (make-error . pD4efa@pD4cbb@make-error) (make-assertion-violation . pD4f0a@pD4ce5@make-assertion-violation) (lexical-violation? . pD4f37@pD4d5c@lexical-violation?) (irritants-condition? . pD4f14@pD4d00@irritants-condition?) (implementation-restriction-violation? . pD4f2f@pD4d47@implementation-restriction-violation?) (error? . pD4efb@pD4cbd@error?) (condition-who . pD4f1f@pD4d1d@condition-who) (condition-message . pD4ee3@pD4c7e@condition-message) (condition-irritants . pD4f15@pD4d02@condition-irritants) (assertion-violation? . pD4f0b@pD4ce7@assertion-violation?) (no-nans-violation? . pD4fc3@pD4ed0@no-nans-violation?) (no-infinities-violation? . pD4fbb@pD4ebb@no-infinities-violation?) (make-no-nans-violation . pD4fc2@pD4ece@make-no-nans-violation) (make-no-infinities-violation . pD4fba@pD4eb9@make-no-infinities-violation) (assertion-error . pD4bfc@pD319f@assertion-error))))) (if pD5497@t (cdr pD5497@t) '#f)))) (pD2cd2@pD2b1e@install-library 'pD5472 '(mosh interaction) '() '() '() '() '((regexp? . pD546a) (alist->eq-hash-table . pD5466) (format . pD5463) (string-split . pD5458) (call-process . pD5452) (set-current-directory! . pD544e) (expand-path . pD544d) (current-directory . pD544c) (%spawn . pD544b) (%waitpid . pD544a) (simple-struct-name . pD5449) (simple-struct-set! . pD5448) (simple-struct-ref . pD5447) (make-simple-struct . pD5446) (simple-struct? . pD5445) (pointer-ref-c-int64 . pD5444) (pointer-ref-c-int32 . pD5443) (pointer-ref-c-int16 . pD5442) (pointer-ref-c-int8 . pD5441) (pointer-ref-c-uint64 . pD5440) (pointer-ref-c-uint32 . pD543f) (pointer-ref-c-uint16 . pD543e) (pointer-ref-c-uint8 . pD543d) (pointer-set-c-uint64! . pD543c) (pointer-set-c-uint32! . pD543b) (pointer-set-c-uint16! . pD543a) (pointer-set-c-uint8! . pD5439) (pointer-set-c-int64! . pD5438) (pointer-set-c-int32! . pD5437) (pointer-set-c-int16! . pD5436) (pointer-set-c-int8! . pD5435) (pointer-set-c-pointer! . pD5434) (pointer-set-c-double! . pD5433) (pointer-set-c-float! . pD5432) (pointer-set-c-long-long! . pD5431) (pointer-set-c-long! . pD5430) (pointer-set-c-int! . pD542f) (pointer-set-c-short! . pD542e) (pointer-set-c-char! . pD542d) (pointer-ref-c-pointer . pD542c) (pointer-ref-c-double . pD542b) (pointer-ref-c-float . pD542a) (pointer-ref-c-unsigned-long-long . pD5429) (pointer-ref-c-signed-long-long . pD5428) (pointer-ref-c-unsigned-long . pD5427) (pointer-ref-c-signed-long . pD5426) (pointer-ref-c-unsigned-int . pD5425) (pointer-ref-c-signed-int . pD5424) (pointer-ref-c-unsigned-short . pD5423) (pointer-ref-c-signed-short . pD5422) (pointer-ref-c-unsigned-char . pD5421) (pointer-ref-c-signed-char . pD5420) (pointer->integer . pD541f) (integer->pointer . pD541e) (pointer? . pD541d) (shared-errno . pD541c) (%ffi-supported? . pD5417) (%ffi-pointer->string . pD5416) (%ffi-call->string-or-zero . pD5415) (%ffi-call->double . pD5414) (%ffi-call->void* . pD5413) (%ffi-call->void . pD5412) (%ffi-call->char . pD5411) (%ffi-call->int . pD5410) (%ffi-lookup . pD540f) (%ffi-open . pD540e) (null-terminated-utf8->string . pD540d) (null-terminated-bytevector->string . pD540c) (%fork . pD540b) (%pipe . pD540a) (p . pD5409) (whereis . pD53ed) (register . pD53ec) (vm-join! . pD53eb) (vm-set-value! . pD53ea) (vm? . pD53e9) (main-vm? . pD53e8) (vm-eval . pD53e7) (vm-self . pD53e6) (vm-start! . pD53e5) (make-vm . pD53e4) (mutex-try-lock! . pD53e3) (mutex-unlock! . pD53e2) (mutex-lock! . pD53e1) (mutex? . pD53e0) (make-mutex . pD53df) (condition-variable-notify-all! . pD53de) (condition-variable-notify! . pD53dd) (condition-variable-wait! . pD53dc) (make-condition-variable . pD53db) (string-upcase . pD53c3) (string-titlecase . pD53c2) (string-normalize-nfkd . pD53c1) (string-normalize-nfkc . pD53c0) (string-normalize-nfd . pD53bf) (string-normalize-nfc . pD53be) (string-foldcase . pD53bd) (string-downcase . pD53bc) (string-ci>? . pD53bb) (string-ci>=? . pD53ba) (string-ci=? . pD53b9) (string-ci<? . pD53b8) (string-ci<=? . pD53b7) (char-whitespace? . pD53b6) (char-upper-case? . pD53b5) (char-title-case? . pD53b4) (char-numeric? . pD53b3) (char-lower-case? . pD53b2) (char-general-category . pD53b1) (char-upcase . pD53b0) (char-titlecase . pD53af) (char-foldcase . pD53ae) (char-downcase . pD53ad) (char-ci>? . pD53ac) (char-ci>=? . pD53ab) (char-ci=? . pD53aa) (char-ci<? . pD53a9) (char-ci<=? . pD53a8) (char-alphabetic? . pD53a7) (make-variable-transformer . pD2eef) (identifier? . pD31a6) (generate-temporaries . pD3192) (free-identifier=? . pD3194) (syntax->datum . pD31aa) (datum->syntax . pD31a8) (bound-identifier=? . pD3196) (record-type-descriptor? . pD53a6) (record-predicate . pD53a5) (record-mutator . pD53a4) (record-constructor . pD53a3) (record-accessor . pD53a2) (make-record-type-descriptor . pD53a1) (make-record-constructor-descriptor . pD53a0) (record? . pD539f) (record-type-uid . pD539e) (record-type-sealed? . pD539d) (record-type-parent . pD539c) (record-type-opaque? . pD539b) (record-type-name . pD539a) (record-type-generative? . pD5399) (record-type-field-names . pD5398) (record-rtd . pD5397) (record-field-mutable? . pD5396) (delete-file . pD5395) (file-exists? . pD5394) (vector-sort! . pD5393) (vector-sort . pD5392) (list-sort . pD5391) (symbol-hash . pD5390) (string-ci-hash . pD538f) (string-hash . pD538e) (equal-hash . pD538d) (hashtable-equivalence-function . pD538c) (make-hashtable . pD538b) (hashtable-hash-function . pD538a) (make-eqv-hashtable . pD5389) (make-eq-hashtable . pD5388) (hashtable? . pD5387) (hashtable-update! . pD5386) (hashtable-size . pD5385) (hashtable-set! . pD5384) (hashtable-ref . pD5383) (hashtable-mutable? . pD5382) (hashtable-keys . pD5381) (hashtable-entries . pD5380) (hashtable-delete! . pD537f) (hashtable-copy . pD537e) (hashtable-contains? . pD537d) (hashtable-clear! . pD537c) (call-with-output-file . pD537b) (call-with-input-file . pD537a) (write-char . pD5379) (write . pD5378) (with-output-to-file . pD5377) (with-input-from-file . pD5376) (read-char . pD5375) (read . pD5374) (peek-char . pD5373) (open-output-file . pD5372) (open-input-file . pD5371) (newline . pD5370) (display . pD536f) (close-output-port . pD536e) (close-input-port . pD536d) (eof-object? . pD536c) (eof-object . pD536b) (current-error-port . pD536a) (current-output-port . pD5369) (current-input-port . pD5368) (output-port? . pD5367) (input-port? . pD5366) (utf-8-codec . pD5365) (utf-16-codec . pD5364) (transcoder-error-handling-mode . pD5363) (transcoder-eol-style . pD5362) (transcoder-codec . pD5361) (transcoded-port . pD5360) (textual-port? . pD535f) (string->bytevector . pD535e) (standard-output-port . pD535d) (standard-input-port . pD535c) (standard-error-port . pD535b) (set-port-position! . pD535a) (put-u8 . pD5359) (put-string . pD5358) (put-datum . pD5357) (put-char . pD5356) (put-bytevector . pD5355) (port? . pD5354) (port-transcoder . pD5353) (port-position . pD5352) (port-has-set-port-position!? . pD5351) (port-has-port-position? . pD5350) (port-eof? . pD534f) (output-port-buffer-mode . pD534e) (open-string-output-port . pD534d) (open-string-input-port . pD534c) (open-file-output-port . pD534b) (open-file-input/output-port . pD534a) (open-file-input-port . pD5349) (open-bytevector-output-port . pD5348) (open-bytevector-input-port . pD5347) (native-transcoder . pD5346) (native-eol-style . pD5345) (make-transcoder . pD5344) (latin-1-codec . pD5343) (make-i/o-write-error . pD4dce) (make-i/o-read-error . pD4db9) (make-i/o-port-error . pD4e6f) (make-i/o-invalid-position-error . pD4de5) (make-i/o-filename-error . pD4e00) (make-i/o-file-protection-error . pD4e19) (make-i/o-file-is-read-only-error . pD4e2e) (make-i/o-file-does-not-exist-error . pD4e58) (make-i/o-file-already-exists-error . pD4e43) (make-i/o-error . pD4da4) (make-i/o-encoding-error . pD4e9f) (make-i/o-decoding-error . pD4e88) (make-custom-textual-output-port . pD5342) (make-custom-textual-input/output-port . pD5341) (make-custom-textual-input-port . pD5340) (make-custom-binary-output-port . pD533f) (make-custom-binary-input/output-port . pD533e) (make-custom-binary-input-port . pD533d) (make-bytevector . pD533c) (lookahead-u8 . pD533b) (lookahead-char . pD533a) (i/o-write-error? . pD4dd0) (i/o-read-error? . pD4dbb) (i/o-port-error? . pD4e73) (i/o-invalid-position-error? . pD4de9) (i/o-filename-error? . pD4e04) (i/o-file-protection-error? . pD4e1b) (i/o-file-is-read-only-error? . pD4e30) (i/o-file-does-not-exist-error? . pD4e5a) (i/o-file-already-exists-error? . pD4e45) (i/o-error? . pD4da6) (i/o-error-position . pD4deb) (i/o-error-port . pD4e75) (i/o-error-filename . pD4e06) (i/o-encoding-error? . pD4ea3) (i/o-encoding-error-char . pD4ea5) (i/o-decoding-error? . pD4e8a) (get-u8 . pD5339) (get-string-n! . pD5338) (get-string-n . pD5337) (get-string-all . pD5336) (get-line . pD5335) (get-datum . pD5334) (get-char . pD5333) (get-bytevector-some . pD5332) (get-bytevector-n! . pD5331) (get-bytevector-n . pD5330) (get-bytevector-all . pD532f) (flush-output-port . pD532e) (close-port . pD532d) (exit . pD5325) (command-line . pD4fde) (string-fill! . pD5324) (string-set! . pD5323) (set-cdr! . pD5322) (set-car! . pD5321) (remove . pD5320) (remv . pD531f) (remp . pD531e) (remq . pD531d) (partition . pD531c) (memv . pD531b) (memq . pD531a) (memp . pD5319) (member . pD5318) (exists . pD5317) (for-all . pD5316) (fold-right . pD5315) (fold-left . pD5314) (find . pD5313) (filter . pD5312) (cons* . pD5311) (assv . pD5310) (assq . pD530f) (assp . pD530e) (assoc . pD530d) (call-with-string-output-port . pD530c) (call-with-port . pD530b) (call-with-bytevector-output-port . pD530a) (bytevector->string . pD5309) (buffer-mode? . pD5308) (binary-port? . pD5307) (with-exception-handler . pD5306) (raise-continuable . pD5305) (raise . pD5304) (eval . pD3184) (environment . pD317c) (make-enumeration . pD5303) (enum-set=? . pD5302) (enum-set-universe . pD5301) (enum-set-union . pD5300) (enum-set-subset? . pD52ff) (enum-set-projection . pD52fe) (enum-set-member? . pD52fd) (enum-set-intersection . pD52fc) (enum-set-indexer . pD52fb) (enum-set-difference . pD52fa) (enum-set-constructor . pD52f9) (enum-set-complement . pD52f8) (enum-set->list . pD52f7) (who-condition? . pD4d1a) (warning? . pD4c92) (violation? . pD4cd1) (undefined-violation? . pD4d91) (syntax-violation? . pD4d78) (syntax-violation-subform . pD4d7c) (syntax-violation-form . pD4d7a) (syntax-violation . pD31a4) (simple-conditions . pD52f6) (serious-condition? . pD4ca7) (non-continuable-violation? . pD4d31) (message-condition? . pD4c7b) (make-who-condition . pD4d16) (make-warning . pD4c90) (make-violation . pD4ccf) (make-undefined-violation . pD4d8f) (make-syntax-violation . pD4d72) (make-serious-condition . pD4ca5) (make-non-continuable-violation . pD4d2f) (make-message-condition . pD4c77) (make-lexical-violation . pD4d59) (make-irritants-condition . pD4cfb) (make-implementation-restriction-violation . pD4d44) (make-error . pD4cba) (make-assertion-violation . pD4ce4) (lexical-violation? . pD4d5b) (irritants-condition? . pD4cff) (implementation-restriction-violation? . pD4d46) (error? . pD4cbc) (condition-who . pD4d1c) (condition-predicate . pD52f5) (condition-message . pD4c7d) (condition-irritants . pD4d01) (condition-accessor . pD52f4) (condition . pD52f3) (assertion-violation? . pD4ce6) (condition? . pD52f2) (utf32->string . pD52f1) (utf16->string . pD52f0) (utf8->string . pD52ef) (uint-list->bytevector . pD52ee) (u8-list->bytevector . pD52ed) (string->utf8 . pD52ec) (string->utf32 . pD52eb) (string->utf16 . pD52ea) (sint-list->bytevector . pD52e9) (native-endianness . pD52e8) (bytevector? . pD52e7) (bytevector=? . pD52e6) (bytevector-uint-set! . pD52e5) (bytevector-uint-ref . pD52e4) (bytevector-u8-set! . pD52e3) (bytevector-u8-ref . pD52e2) (bytevector-u64-set! . pD52e1) (bytevector-u64-ref . pD52e0) (bytevector-u64-native-set! . pD52df) (bytevector-u64-native-ref . pD52de) (bytevector-u32-set! . pD52dd) (bytevector-u32-ref . pD52dc) (bytevector-u32-native-set! . pD52db) (bytevector-u32-native-ref . pD52da) (bytevector-u16-set! . pD52d9) (bytevector-u16-ref . pD52d8) (bytevector-u16-native-set! . pD52d7) (bytevector-u16-native-ref . pD52d6) (bytevector-sint-set! . pD52d5) (bytevector-sint-ref . pD52d4) (bytevector-s8-set! . pD52d3) (bytevector-s8-ref . pD52d2) (bytevector-s64-set! . pD52d1) (bytevector-s64-ref . pD52d0) (bytevector-s64-native-set! . pD52cf) (bytevector-s64-native-ref . pD52ce) (bytevector-s32-set! . pD52cd) (bytevector-s32-ref . pD52cc) (bytevector-s32-native-set! . pD52cb) (bytevector-s32-native-ref . pD52ca) (bytevector-s16-set! . pD52c9) (bytevector-s16-ref . pD52c8) (bytevector-s16-native-set! . pD52c7) (bytevector-s16-native-ref . pD52c6) (bytevector-length . pD52c5) (bytevector-ieee-single-ref . pD52c4) (bytevector-ieee-single-set! . pD52c3) (bytevector-ieee-single-native-set! . pD52c2) (bytevector-ieee-single-native-ref . pD52c1) (bytevector-ieee-double-set! . pD52c0) (bytevector-ieee-double-ref . pD52bf) (bytevector-ieee-double-native-set! . pD52be) (bytevector-ieee-double-native-ref . pD52bd) (bytevector-fill! . pD52bc) (bytevector-copy! . pD52bb) (bytevector-copy . pD52ba) (bytevector->uint-list . pD52b9) (bytevector->u8-list . pD52b8) (bytevector->sint-list . pD52b7) (no-nans-violation? . pD4ecf) (no-infinities-violation? . pD4eba) (make-no-nans-violation . pD4ecd) (make-no-infinities-violation . pD4eb8) (real->flonum . pD52b6) (flzero? . pD52b5) (fltruncate . pD52b4) (fltan . pD52b3) (flsqrt . pD52b2) (flsin . pD52b1) (flround . pD52b0) (flpositive? . pD52af) (flonum? . pD52ae) (flodd? . pD52ad) (flnumerator . pD52ac) (flnegative? . pD52ab) (flnan? . pD52aa) (flmod0 . pD52a9) (flmod . pD52a8) (flmin . pD52a7) (flmax . pD52a6) (fllog . pD52a5) (flinteger? . pD52a4) (flinfinite? . pD52a3) (flfloor . pD52a2) (flfinite? . pD52a1) (flexpt . pD52a0) (flexp . pD529f) (fleven? . pD529e) (fldiv0-and-mod0 . pD529d) (fldiv0 . pD529c) (fldiv-and-mod . pD529b) (fldiv . pD529a) (fldenominator . pD5299) (flcos . pD5298) (flceiling . pD5297) (flatan . pD5296) (flasin . pD5295) (flacos . pD5294) (flabs . pD5293) (fl>? . pD5292) (fl>=? . pD5291) (fl=? . pD5290) (fl<? . pD528f) (fl<=? . pD528e) (fl/ . pD528d) (fl- . pD528c) (fl+ . pD528b) (fl* . pD528a) (fixnum->flonum . pD5289) (fxzero? . pD5288) (fxxor . pD5287) (fxrotate-bit-field . pD5286) (fxreverse-bit-field . pD5285) (fxpositive? . pD5284) (fxodd? . pD5283) (fxnot . pD5282) (fxnegative? . pD5281) (fxmod0 . pD5280) (fxmod . pD527f) (fxmin . pD527e) (fxmax . pD527d) (fxlength . pD527c) (fxior . pD527b) (fxif . pD527a) (fxfirst-bit-set . pD5279) (fxeven? . pD5278) (fxdiv0-and-mod0 . pD5277) (fxdiv0 . pD5276) (fxdiv-and-mod . pD5275) (fxdiv . pD5274) (fxcopy-bit-field . pD5273) (fxcopy-bit . pD5272) (fxbit-set? . pD5271) (fxbit-field . pD5270) (fxbit-count . pD526f) (fxarithmetic-shift-right . pD526e) (fxarithmetic-shift-left . pD526d) (fxarithmetic-shift . pD526c) (fxand . pD526b) (fx>? . pD526a) (fx>=? . pD5269) (fx=? . pD5268) (fx<? . pD5267) (fx<=? . pD5266) (fx-/carry . pD5265) (fx- . pD5264) (fx+/carry . pD5263) (fx+ . pD5262) (fx*/carry . pD5261) (fx* . pD5260) (greatest-fixnum . pD525f) (least-fixnum . pD525e) (fixnum-width . pD525d) (fixnum? . pD525c) (bitwise-rotate-bit-field . pD525b) (bitwise-reverse-bit-field . pD525a) (bitwise-length . pD5259) (bitwise-if . pD5258) (bitwise-first-bit-set . pD5257) (bitwise-copy-bit-field . pD5256) (bitwise-copy-bit . pD5255) (bitwise-bit-set? . pD5254) (bitwise-bit-field . pD5253) (bitwise-bit-count . pD5252) (bitwise-xor . pD5251) (bitwise-ior . pD5250) (bitwise-and . pD524f) (bitwise-not . pD524e) (bitwise-arithmetic-shift-right . pD524d) (bitwise-arithmetic-shift-left . pD524c) (bitwise-arithmetic-shift . pD524b) (zero? . pD524a) (vector? . pD5249) (vector-set! . pD5248) (vector-ref . pD5247) (vector-map . pD5246) (vector-length . pD5245) (vector-for-each . pD5244) (vector-fill! . pD5243) (vector->list . pD5242) (vector . pD5241) (values . pD5240) (truncate . pD523f) (tan . pD523e) (symbol? . pD523d) (symbol=? . pD523c) (symbol->string . pD523b) (substring . pD523a) (string? . pD5239) (string>? . pD5238) (string>=? . pD5237) (string=? . pD5236) (string<? . pD5235) (string<=? . pD5234) (string-ref . pD5233) (string-length . pD5232) (string-for-each . pD5231) (string-copy . pD5230) (string-append . pD522f) (string->symbol . pD522e) (string->number . pD522d) (string->list . pD522c) (string . pD522b) (sqrt . pD522a) (sin . pD5229) (round . pD5228) (reverse . pD5227) (real? . pD5226) (real-valued? . pD5225) (real-part . pD5224) (rationalize . pD5223) (rational? . pD5222) (rational-valued? . pD5221) (procedure? . pD5220) (positive? . pD521f) (pair? . pD521e) (odd? . pD521d) (numerator . pD521c) (number? . pD521b) (number->string . pD521a) (null? . pD5219) (not . pD5218) (negative? . pD5217) (nan? . pD5216) (min . pD5215) (max . pD5214) (map . pD5213) (make-vector . pD5212) (make-string . pD5211) (make-rectangular . pD5210) (make-polar . pD520f) (magnitude . pD520e) (log . pD520d) (list? . pD520c) (list-tail . pD520b) (list-ref . pD520a) (list->vector . pD5209) (list->string . pD5208) (list . pD5207) (length . pD5206) (lcm . pD5205) (integer? . pD5204) (integer-valued? . pD5203) (integer->char . pD5202) (infinite? . pD5201) (inexact? . pD5200) (inexact . pD51ff) (imag-part . pD51fe) (gcd . pD51fd) (for-each . pD51fc) (floor . pD51fb) (finite? . pD51fa) (expt . pD51f9) (exp . pD51f8) (exact? . pD51f7) (exact-integer-sqrt . pD51f6) (exact . pD51f5) (even? . pD51f4) (error . pD51f3) (eqv? . pD51f2) (equal? . pD51f1) (eq? . pD51f0) (dynamic-wind . pD51ef) (div0-and-mod0 . pD51ee) (mod0 . pD51ed) (div0 . pD51ec) (div-and-mod . pD51eb) (mod . pD51ea) (div . pD51e9) (denominator . pD51e8) (cos . pD51e7) (cons . pD51e6) (complex? . pD51e5) (char? . pD51e4) (char>? . pD51e3) (char>=? . pD51e2) (char=? . pD51e1) (char<? . pD51e0) (char<=? . pD51df) (char->integer . pD51de) (ceiling . pD51dd) (call-with-values . pD51dc) (call/cc . pD51db) (call-with-current-continuation . pD51da) (cddddr . pD51d9) (cdddar . pD51d8) (cddadr . pD51d7) (cddaar . pD51d6) (cdaddr . pD51d5) (cdadar . pD51d4) (cdaadr . pD51d3) (cdaaar . pD51d2) (cadddr . pD51d1) (caddar . pD51d0) (cadadr . pD51cf) (cadaar . pD51ce) (caaddr . pD51cd) (caadar . pD51cc) (caaadr . pD51cb) (caaaar . pD51ca) (cdddr . pD51c9) (cddar . pD51c8) (cdadr . pD51c7) (cdaar . pD51c6) (caddr . pD51c5) (cadar . pD51c4) (caadr . pD51c3) (caaar . pD51c2) (cddr . pD51c1) (cdar . pD51c0) (cadr . pD51bf) (caar . pD51be) (cdr . pD51bd) (car . pD51bc) (boolean? . pD51bb) (boolean=? . pD51ba) (atan . pD51b9) (assertion-violation . pD51b8) (asin . pD51b7) (apply . pD51b6) (append . pD51b5) (angle . pD51b4) (acos . pD51b3) (abs . pD51b2) (/ . pD51b1) (* . pD51b0) (- . pD51af) (+ . pD51ae) (>= . pD51ad) (> . pD51ac) (= . pD51ab) (<= . pD51aa) (< . pD51a9) (library . pD51a8) (&no-nans . pD51a7) (&no-infinities . pD51a6) (&i/o-encoding . pD51a5) (&i/o-decoding . pD51a4) (&i/o-port . pD51a3) (&i/o-file-does-not-exist . pD51a2) (&i/o-file-already-exists . pD51a1) (&i/o-file-is-read-only . pD51a0) (&i/o-file-protection . pD519f) (&i/o-filename . pD519e) (&i/o-invalid-position . pD519d) (&i/o-write . pD519c) (&i/o-read . pD519b) (&i/o . pD519a) (&undefined . pD5199) (&syntax . pD5198) (&lexical . pD5197) (&implementation-restriction . pD5196) (&non-continuable . pD5195) (&who . pD5194) (&irritants . pD5193) (&assertion . pD5192) (&violation . pD5191) (&error . pD5190) (&serious . pD518f) (&warning . pD518e) (&message . pD518d) (&condition . pD518c) (define-condition-type . pD518b) (define-enumeration . pD518a) (define-record-type . pD5189) (parent-rtd . pD5188) (nongenerative . pD5187) (opaque . pD5186) (sealed . pD5185) (protocol . pD5184) (parent . pD5183) (immutable . pD5182) (mutable . pD5181) (fields . pD5180) (error-handling-mode . pD517f) (file-options . pD517e) (buffer-mode . pD517d) (eol-style . pD517c) (guard . pD517b) (unsyntax-splicing . pD5178) (unsyntax . pD5177) (unquote-splicing . pD5176) (unquote . pD5175) (_ . pD5174) (else . pD5173) (=> . pD5172) (... . pD5171) (assert . pD5170) (endianness . pD516f) (time . pD516d) (do . pD516c) (cond . pD516b) (let* . pD516a) (let*-values . pD5169) (let-values . pD5168) (identifier-syntax . pD5167) (with-syntax . pD5166) (quasisyntax . pD5165) (quasiquote . pD5164) (syntax-rules . pD5163) (include . pD5162) (record-constructor-descriptor . pD5160) (record-type-descriptor . pD515f) (case . pD515e) (unless . pD515c) (when . pD515b) (or . pD515a) (and . pD5159) (if . pD5158) (let . pD5157) (letrec* . pD5156) (letrec . pD5155) (case-lambda . pD5153) (lambda . pD5152) (syntax . pD5151) (syntax-case . pD5150) (quote . pD514f) (letrec-syntax . pD514d) (let-syntax . pD514c) (set! . pD514b) (import . pD514a) (begin . pD5149) (define-syntax . pD5147) (define . pD5146)) '() values values '#f '#f '#t '#f) (pD2cd2@pD2b1e@install-library 'pD5473 '(psyntax null-environment-5) '() '() '() '() '((make-promise . pD5326) (unquote-splicing . pD5176) (unquote . pD5175) (_ . pD5174) (else . pD5173) (=> . pD5172) (... . pD5171) (delay . pD516e) (do . pD516c) (cond . pD516b) (let* . pD516a) (quasiquote . pD5164) (syntax-rules . pD5163) (case . pD515e) (or . pD515a) (and . pD5159) (if . pD5158) (let . pD5157) (letrec . pD5155) (lambda . pD5152) (quote . pD514f) (letrec-syntax . pD514d) (let-syntax . pD514c) (set! . pD514b) (begin . pD5149) (define-syntax . pD5147) (define . pD5146)) '() values values '#f '#f '#t '#f) (pD2cd2@pD2b1e@install-library 'pD5474 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . pD53bb) (string-ci>=? . pD53ba) (string-ci=? . pD53b9) (string-ci<? . pD53b8) (string-ci<=? . pD53b7) (char-whitespace? . pD53b6) (char-upper-case? . pD53b5) (char-numeric? . pD53b3) (char-lower-case? . pD53b2) (char-upcase . pD53b0) (char-downcase . pD53ad) (char-ci>? . pD53ac) (char-ci>=? . pD53ab) (char-ci=? . pD53aa) (char-ci<? . pD53a9) (char-ci<=? . pD53a8) (char-alphabetic? . pD53a7) (call-with-output-file . pD537b) (call-with-input-file . pD537a) (write-char . pD5379) (write . pD5378) (with-output-to-file . pD5377) (with-input-from-file . pD5376) (read-char . pD5375) (read . pD5374) (peek-char . pD5373) (open-output-file . pD5372) (open-input-file . pD5371) (newline . pD5370) (display . pD536f) (close-output-port . pD536e) (close-input-port . pD536d) (eof-object . pD536b) (current-output-port . pD5369) (current-input-port . pD5368) (output-port? . pD5367) (input-port? . pD5366) (scheme-report-environment . pD3180) (quotient . pD532c) (null-environment . pD317e) (remainder . pD532b) (modulo . pD532a) (inexact->exact . pD5329) (force . pD5328) (exact->inexact . pD5327) (make-promise . pD5326) (string-fill! . pD5324) (string-set! . pD5323) (set-cdr! . pD5322) (set-car! . pD5321) (memv . pD531b) (memq . pD531a) (member . pD5318) (assv . pD5310) (assq . pD530f) (assoc . pD530d) (eval . pD3184) (zero? . pD524a) (vector? . pD5249) (vector-set! . pD5248) (vector-ref . pD5247) (vector-length . pD5245) (vector-fill! . pD5243) (vector->list . pD5242) (vector . pD5241) (values . pD5240) (truncate . pD523f) (tan . pD523e) (symbol? . pD523d) (symbol->string . pD523b) (substring . pD523a) (string? . pD5239) (string>? . pD5238) (string>=? . pD5237) (string=? . pD5236) (string<? . pD5235) (string<=? . pD5234) (string-ref . pD5233) (string-length . pD5232) (string-copy . pD5230) (string-append . pD522f) (string->symbol . pD522e) (string->number . pD522d) (string->list . pD522c) (string . pD522b) (sqrt . pD522a) (sin . pD5229) (round . pD5228) (reverse . pD5227) (real? . pD5226) (real-part . pD5224) (rationalize . pD5223) (rational? . pD5222) (procedure? . pD5220) (positive? . pD521f) (pair? . pD521e) (odd? . pD521d) (numerator . pD521c) (number? . pD521b) (number->string . pD521a) (not . pD5218) (negative? . pD5217) (min . pD5215) (max . pD5214) (map . pD5213) (make-vector . pD5212) (make-string . pD5211) (make-rectangular . pD5210) (make-polar . pD520f) (magnitude . pD520e) (log . pD520d) (list? . pD520c) (list-tail . pD520b) (list-ref . pD520a) (list->vector . pD5209) (list->string . pD5208) (list . pD5207) (length . pD5206) (lcm . pD5205) (integer? . pD5204) (integer->char . pD5202) (inexact? . pD5200) (imag-part . pD51fe) (gcd . pD51fd) (for-each . pD51fc) (floor . pD51fb) (expt . pD51f9) (exp . pD51f8) (exact? . pD51f7) (even? . pD51f4) (eqv? . pD51f2) (equal? . pD51f1) (eq? . pD51f0) (dynamic-wind . pD51ef) (denominator . pD51e8) (cos . pD51e7) (cons . pD51e6) (complex? . pD51e5) (char? . pD51e4) (char>? . pD51e3) (char>=? . pD51e2) (char=? . pD51e1) (char<? . pD51e0) (char<=? . pD51df) (char->integer . pD51de) (ceiling . pD51dd) (call-with-values . pD51dc) (call-with-current-continuation . pD51da) (cddddr . pD51d9) (cdddar . pD51d8) (cddadr . pD51d7) (cddaar . pD51d6) (cdaddr . pD51d5) (cdadar . pD51d4) (cdaadr . pD51d3) (cdaaar . pD51d2) (cadddr . pD51d1) (caddar . pD51d0) (cadadr . pD51cf) (cadaar . pD51ce) (caaddr . pD51cd) (caadar . pD51cc) (caaadr . pD51cb) (caaaar . pD51ca) (cdddr . pD51c9) (cddar . pD51c8) (cdadr . pD51c7) (cdaar . pD51c6) (caddr . pD51c5) (cadar . pD51c4) (caadr . pD51c3) (caaar . pD51c2) (cddr . pD51c1) (cdar . pD51c0) (cadr . pD51bf) (caar . pD51be) (cdr . pD51bd) (car . pD51bc) (boolean? . pD51bb) (atan . pD51b9) (asin . pD51b7) (apply . pD51b6) (append . pD51b5) (angle . pD51b4) (acos . pD51b3) (abs . pD51b2) (/ . pD51b1) (* . pD51b0) (- . pD51af) (+ . pD51ae) (>= . pD51ad) (> . pD51ac) (= . pD51ab) (<= . pD51aa) (< . pD51a9) (unquote-splicing . pD5176) (unquote . pD5175) (else . pD5173) (=> . pD5172) (... . pD5171) (delay . pD516e) (do . pD516c) (cond . pD516b) (let* . pD516a) (quasiquote . pD5164) (syntax-rules . pD5163) (case . pD515e) (or . pD515a) (and . pD5159) (if . pD5158) (let . pD5157) (letrec . pD5155) (lambda . pD5152) (quote . pD514f) (letrec-syntax . pD514d) (let-syntax . pD514c) (set! . pD514b) (begin . pD5149) (define-syntax . pD5147) (define . pD5146)) '() values values '#f '#f '#t '#f) (pD2cd2@pD2b1e@install-library 'pD5475 '(psyntax modules) '() '() '() '() '((module . pD5148)) '() values values '#f '#f '#t '#f) (pD2cd2@pD2b1e@install-library 'pD5476 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (pD2cd2@pD2b1e@install-library 'pD5477 '(rnrs) '(6) '() '() '() '((regexp? . pD546a) (string-upcase . pD53c3) (string-titlecase . pD53c2) (string-normalize-nfkd . pD53c1) (string-normalize-nfkc . pD53c0) (string-normalize-nfd . pD53bf) (string-normalize-nfc . pD53be) (string-foldcase . pD53bd) (string-downcase . pD53bc) (string-ci>? . pD53bb) (string-ci>=? . pD53ba) (string-ci=? . pD53b9) (string-ci<? . pD53b8) (string-ci<=? . pD53b7) (char-whitespace? . pD53b6) (char-upper-case? . pD53b5) (char-title-case? . pD53b4) (char-numeric? . pD53b3) (char-lower-case? . pD53b2) (char-general-category . pD53b1) (char-upcase . pD53b0) (char-titlecase . pD53af) (char-foldcase . pD53ae) (char-downcase . pD53ad) (char-ci>? . pD53ac) (char-ci>=? . pD53ab) (char-ci=? . pD53aa) (char-ci<? . pD53a9) (char-ci<=? . pD53a8) (char-alphabetic? . pD53a7) (make-variable-transformer . pD2eef) (identifier? . pD31a6) (generate-temporaries . pD3192) (free-identifier=? . pD3194) (syntax->datum . pD31aa) (datum->syntax . pD31a8) (bound-identifier=? . pD3196) (record-type-descriptor? . pD53a6) (record-predicate . pD53a5) (record-mutator . pD53a4) (record-constructor . pD53a3) (record-accessor . pD53a2) (make-record-type-descriptor . pD53a1) (make-record-constructor-descriptor . pD53a0) (record? . pD539f) (record-type-uid . pD539e) (record-type-sealed? . pD539d) (record-type-parent . pD539c) (record-type-opaque? . pD539b) (record-type-name . pD539a) (record-type-generative? . pD5399) (record-type-field-names . pD5398) (record-rtd . pD5397) (record-field-mutable? . pD5396) (delete-file . pD5395) (file-exists? . pD5394) (vector-sort! . pD5393) (vector-sort . pD5392) (list-sort . pD5391) (symbol-hash . pD5390) (string-ci-hash . pD538f) (string-hash . pD538e) (equal-hash . pD538d) (hashtable-equivalence-function . pD538c) (make-hashtable . pD538b) (hashtable-hash-function . pD538a) (make-eqv-hashtable . pD5389) (make-eq-hashtable . pD5388) (hashtable? . pD5387) (hashtable-update! . pD5386) (hashtable-size . pD5385) (hashtable-set! . pD5384) (hashtable-ref . pD5383) (hashtable-mutable? . pD5382) (hashtable-keys . pD5381) (hashtable-entries . pD5380) (hashtable-delete! . pD537f) (hashtable-copy . pD537e) (hashtable-contains? . pD537d) (hashtable-clear! . pD537c) (call-with-output-file . pD537b) (call-with-input-file . pD537a) (write-char . pD5379) (write . pD5378) (with-output-to-file . pD5377) (with-input-from-file . pD5376) (read-char . pD5375) (read . pD5374) (peek-char . pD5373) (open-output-file . pD5372) (open-input-file . pD5371) (newline . pD5370) (display . pD536f) (close-output-port . pD536e) (close-input-port . pD536d) (eof-object? . pD536c) (eof-object . pD536b) (current-error-port . pD536a) (current-output-port . pD5369) (current-input-port . pD5368) (output-port? . pD5367) (input-port? . pD5366) (utf-8-codec . pD5365) (utf-16-codec . pD5364) (transcoder-error-handling-mode . pD5363) (transcoder-eol-style . pD5362) (transcoder-codec . pD5361) (transcoded-port . pD5360) (textual-port? . pD535f) (string->bytevector . pD535e) (standard-output-port . pD535d) (standard-input-port . pD535c) (standard-error-port . pD535b) (set-port-position! . pD535a) (put-u8 . pD5359) (put-string . pD5358) (put-datum . pD5357) (put-char . pD5356) (put-bytevector . pD5355) (port? . pD5354) (port-transcoder . pD5353) (port-position . pD5352) (port-has-set-port-position!? . pD5351) (port-has-port-position? . pD5350) (port-eof? . pD534f) (output-port-buffer-mode . pD534e) (open-string-output-port . pD534d) (open-string-input-port . pD534c) (open-file-output-port . pD534b) (open-file-input/output-port . pD534a) (open-file-input-port . pD5349) (open-bytevector-output-port . pD5348) (open-bytevector-input-port . pD5347) (native-transcoder . pD5346) (native-eol-style . pD5345) (make-transcoder . pD5344) (latin-1-codec . pD5343) (make-i/o-write-error . pD4dce) (make-i/o-read-error . pD4db9) (make-i/o-port-error . pD4e6f) (make-i/o-invalid-position-error . pD4de5) (make-i/o-filename-error . pD4e00) (make-i/o-file-protection-error . pD4e19) (make-i/o-file-is-read-only-error . pD4e2e) (make-i/o-file-does-not-exist-error . pD4e58) (make-i/o-file-already-exists-error . pD4e43) (make-i/o-error . pD4da4) (make-i/o-encoding-error . pD4e9f) (make-i/o-decoding-error . pD4e88) (make-custom-textual-output-port . pD5342) (make-custom-textual-input/output-port . pD5341) (make-custom-textual-input-port . pD5340) (make-custom-binary-output-port . pD533f) (make-custom-binary-input/output-port . pD533e) (make-custom-binary-input-port . pD533d) (make-bytevector . pD533c) (lookahead-u8 . pD533b) (lookahead-char . pD533a) (i/o-write-error? . pD4dd0) (i/o-read-error? . pD4dbb) (i/o-port-error? . pD4e73) (i/o-invalid-position-error? . pD4de9) (i/o-filename-error? . pD4e04) (i/o-file-protection-error? . pD4e1b) (i/o-file-is-read-only-error? . pD4e30) (i/o-file-does-not-exist-error? . pD4e5a) (i/o-file-already-exists-error? . pD4e45) (i/o-error? . pD4da6) (i/o-error-position . pD4deb) (i/o-error-port . pD4e75) (i/o-error-filename . pD4e06) (i/o-encoding-error? . pD4ea3) (i/o-encoding-error-char . pD4ea5) (i/o-decoding-error? . pD4e8a) (get-u8 . pD5339) (get-string-n! . pD5338) (get-string-n . pD5337) (get-string-all . pD5336) (get-line . pD5335) (get-datum . pD5334) (get-char . pD5333) (get-bytevector-some . pD5332) (get-bytevector-n! . pD5331) (get-bytevector-n . pD5330) (get-bytevector-all . pD532f) (flush-output-port . pD532e) (close-port . pD532d) (exit . pD5325) (command-line . pD4fde) (remove . pD5320) (remv . pD531f) (remp . pD531e) (remq . pD531d) (partition . pD531c) (memv . pD531b) (memq . pD531a) (memp . pD5319) (member . pD5318) (exists . pD5317) (for-all . pD5316) (fold-right . pD5315) (fold-left . pD5314) (find . pD5313) (filter . pD5312) (cons* . pD5311) (assv . pD5310) (assq . pD530f) (assp . pD530e) (assoc . pD530d) (call-with-string-output-port . pD530c) (call-with-port . pD530b) (call-with-bytevector-output-port . pD530a) (bytevector->string . pD5309) (buffer-mode? . pD5308) (binary-port? . pD5307) (with-exception-handler . pD5306) (raise-continuable . pD5305) (raise . pD5304) (make-enumeration . pD5303) (enum-set=? . pD5302) (enum-set-universe . pD5301) (enum-set-union . pD5300) (enum-set-subset? . pD52ff) (enum-set-projection . pD52fe) (enum-set-member? . pD52fd) (enum-set-intersection . pD52fc) (enum-set-indexer . pD52fb) (enum-set-difference . pD52fa) (enum-set-constructor . pD52f9) (enum-set-complement . pD52f8) (enum-set->list . pD52f7) (who-condition? . pD4d1a) (warning? . pD4c92) (violation? . pD4cd1) (undefined-violation? . pD4d91) (syntax-violation? . pD4d78) (syntax-violation-subform . pD4d7c) (syntax-violation-form . pD4d7a) (syntax-violation . pD31a4) (simple-conditions . pD52f6) (serious-condition? . pD4ca7) (non-continuable-violation? . pD4d31) (message-condition? . pD4c7b) (make-who-condition . pD4d16) (make-warning . pD4c90) (make-violation . pD4ccf) (make-undefined-violation . pD4d8f) (make-syntax-violation . pD4d72) (make-serious-condition . pD4ca5) (make-non-continuable-violation . pD4d2f) (make-message-condition . pD4c77) (make-lexical-violation . pD4d59) (make-irritants-condition . pD4cfb) (make-implementation-restriction-violation . pD4d44) (make-error . pD4cba) (make-assertion-violation . pD4ce4) (lexical-violation? . pD4d5b) (irritants-condition? . pD4cff) (implementation-restriction-violation? . pD4d46) (error? . pD4cbc) (condition-who . pD4d1c) (condition-predicate . pD52f5) (condition-message . pD4c7d) (condition-irritants . pD4d01) (condition-accessor . pD52f4) (condition . pD52f3) (assertion-violation? . pD4ce6) (condition? . pD52f2) (utf32->string . pD52f1) (utf16->string . pD52f0) (utf8->string . pD52ef) (uint-list->bytevector . pD52ee) (u8-list->bytevector . pD52ed) (string->utf8 . pD52ec) (string->utf32 . pD52eb) (string->utf16 . pD52ea) (sint-list->bytevector . pD52e9) (native-endianness . pD52e8) (bytevector? . pD52e7) (bytevector=? . pD52e6) (bytevector-uint-set! . pD52e5) (bytevector-uint-ref . pD52e4) (bytevector-u8-set! . pD52e3) (bytevector-u8-ref . pD52e2) (bytevector-u64-set! . pD52e1) (bytevector-u64-ref . pD52e0) (bytevector-u64-native-set! . pD52df) (bytevector-u64-native-ref . pD52de) (bytevector-u32-set! . pD52dd) (bytevector-u32-ref . pD52dc) (bytevector-u32-native-set! . pD52db) (bytevector-u32-native-ref . pD52da) (bytevector-u16-set! . pD52d9) (bytevector-u16-ref . pD52d8) (bytevector-u16-native-set! . pD52d7) (bytevector-u16-native-ref . pD52d6) (bytevector-sint-set! . pD52d5) (bytevector-sint-ref . pD52d4) (bytevector-s8-set! . pD52d3) (bytevector-s8-ref . pD52d2) (bytevector-s64-set! . pD52d1) (bytevector-s64-ref . pD52d0) (bytevector-s64-native-set! . pD52cf) (bytevector-s64-native-ref . pD52ce) (bytevector-s32-set! . pD52cd) (bytevector-s32-ref . pD52cc) (bytevector-s32-native-set! . pD52cb) (bytevector-s32-native-ref . pD52ca) (bytevector-s16-set! . pD52c9) (bytevector-s16-ref . pD52c8) (bytevector-s16-native-set! . pD52c7) (bytevector-s16-native-ref . pD52c6) (bytevector-length . pD52c5) (bytevector-ieee-single-ref . pD52c4) (bytevector-ieee-single-set! . pD52c3) (bytevector-ieee-single-native-set! . pD52c2) (bytevector-ieee-single-native-ref . pD52c1) (bytevector-ieee-double-set! . pD52c0) (bytevector-ieee-double-ref . pD52bf) (bytevector-ieee-double-native-set! . pD52be) (bytevector-ieee-double-native-ref . pD52bd) (bytevector-fill! . pD52bc) (bytevector-copy! . pD52bb) (bytevector-copy . pD52ba) (bytevector->uint-list . pD52b9) (bytevector->u8-list . pD52b8) (bytevector->sint-list . pD52b7) (no-nans-violation? . pD4ecf) (no-infinities-violation? . pD4eba) (make-no-nans-violation . pD4ecd) (make-no-infinities-violation . pD4eb8) (real->flonum . pD52b6) (flzero? . pD52b5) (fltruncate . pD52b4) (fltan . pD52b3) (flsqrt . pD52b2) (flsin . pD52b1) (flround . pD52b0) (flpositive? . pD52af) (flonum? . pD52ae) (flodd? . pD52ad) (flnumerator . pD52ac) (flnegative? . pD52ab) (flnan? . pD52aa) (flmod0 . pD52a9) (flmod . pD52a8) (flmin . pD52a7) (flmax . pD52a6) (fllog . pD52a5) (flinteger? . pD52a4) (flinfinite? . pD52a3) (flfloor . pD52a2) (flfinite? . pD52a1) (flexpt . pD52a0) (flexp . pD529f) (fleven? . pD529e) (fldiv0-and-mod0 . pD529d) (fldiv0 . pD529c) (fldiv-and-mod . pD529b) (fldiv . pD529a) (fldenominator . pD5299) (flcos . pD5298) (flceiling . pD5297) (flatan . pD5296) (flasin . pD5295) (flacos . pD5294) (flabs . pD5293) (fl>? . pD5292) (fl>=? . pD5291) (fl=? . pD5290) (fl<? . pD528f) (fl<=? . pD528e) (fl/ . pD528d) (fl- . pD528c) (fl+ . pD528b) (fl* . pD528a) (fixnum->flonum . pD5289) (fxzero? . pD5288) (fxxor . pD5287) (fxrotate-bit-field . pD5286) (fxreverse-bit-field . pD5285) (fxpositive? . pD5284) (fxodd? . pD5283) (fxnot . pD5282) (fxnegative? . pD5281) (fxmod0 . pD5280) (fxmod . pD527f) (fxmin . pD527e) (fxmax . pD527d) (fxlength . pD527c) (fxior . pD527b) (fxif . pD527a) (fxfirst-bit-set . pD5279) (fxeven? . pD5278) (fxdiv0-and-mod0 . pD5277) (fxdiv0 . pD5276) (fxdiv-and-mod . pD5275) (fxdiv . pD5274) (fxcopy-bit-field . pD5273) (fxcopy-bit . pD5272) (fxbit-set? . pD5271) (fxbit-field . pD5270) (fxbit-count . pD526f) (fxarithmetic-shift-right . pD526e) (fxarithmetic-shift-left . pD526d) (fxarithmetic-shift . pD526c) (fxand . pD526b) (fx>? . pD526a) (fx>=? . pD5269) (fx=? . pD5268) (fx<? . pD5267) (fx<=? . pD5266) (fx-/carry . pD5265) (fx- . pD5264) (fx+/carry . pD5263) (fx+ . pD5262) (fx*/carry . pD5261) (fx* . pD5260) (greatest-fixnum . pD525f) (least-fixnum . pD525e) (fixnum-width . pD525d) (fixnum? . pD525c) (bitwise-rotate-bit-field . pD525b) (bitwise-reverse-bit-field . pD525a) (bitwise-length . pD5259) (bitwise-if . pD5258) (bitwise-first-bit-set . pD5257) (bitwise-copy-bit-field . pD5256) (bitwise-copy-bit . pD5255) (bitwise-bit-set? . pD5254) (bitwise-bit-field . pD5253) (bitwise-bit-count . pD5252) (bitwise-xor . pD5251) (bitwise-ior . pD5250) (bitwise-and . pD524f) (bitwise-not . pD524e) (bitwise-arithmetic-shift-right . pD524d) (bitwise-arithmetic-shift-left . pD524c) (bitwise-arithmetic-shift . pD524b) (zero? . pD524a) (vector? . pD5249) (vector-set! . pD5248) (vector-ref . pD5247) (vector-map . pD5246) (vector-length . pD5245) (vector-for-each . pD5244) (vector-fill! . pD5243) (vector->list . pD5242) (vector . pD5241) (values . pD5240) (truncate . pD523f) (tan . pD523e) (symbol? . pD523d) (symbol=? . pD523c) (symbol->string . pD523b) (substring . pD523a) (string? . pD5239) (string>? . pD5238) (string>=? . pD5237) (string=? . pD5236) (string<? . pD5235) (string<=? . pD5234) (string-ref . pD5233) (string-length . pD5232) (string-for-each . pD5231) (string-copy . pD5230) (string-append . pD522f) (string->symbol . pD522e) (string->number . pD522d) (string->list . pD522c) (string . pD522b) (sqrt . pD522a) (sin . pD5229) (round . pD5228) (reverse . pD5227) (real? . pD5226) (real-valued? . pD5225) (real-part . pD5224) (rationalize . pD5223) (rational? . pD5222) (rational-valued? . pD5221) (procedure? . pD5220) (positive? . pD521f) (pair? . pD521e) (odd? . pD521d) (numerator . pD521c) (number? . pD521b) (number->string . pD521a) (null? . pD5219) (not . pD5218) (negative? . pD5217) (nan? . pD5216) (min . pD5215) (max . pD5214) (map . pD5213) (make-vector . pD5212) (make-string . pD5211) (make-rectangular . pD5210) (make-polar . pD520f) (magnitude . pD520e) (log . pD520d) (list? . pD520c) (list-tail . pD520b) (list-ref . pD520a) (list->vector . pD5209) (list->string . pD5208) (list . pD5207) (length . pD5206) (lcm . pD5205) (integer? . pD5204) (integer-valued? . pD5203) (integer->char . pD5202) (infinite? . pD5201) (inexact? . pD5200) (inexact . pD51ff) (imag-part . pD51fe) (gcd . pD51fd) (for-each . pD51fc) (floor . pD51fb) (finite? . pD51fa) (expt . pD51f9) (exp . pD51f8) (exact? . pD51f7) (exact-integer-sqrt . pD51f6) (exact . pD51f5) (even? . pD51f4) (error . pD51f3) (eqv? . pD51f2) (equal? . pD51f1) (eq? . pD51f0) (dynamic-wind . pD51ef) (div0-and-mod0 . pD51ee) (mod0 . pD51ed) (div0 . pD51ec) (div-and-mod . pD51eb) (mod . pD51ea) (div . pD51e9) (denominator . pD51e8) (cos . pD51e7) (cons . pD51e6) (complex? . pD51e5) (char? . pD51e4) (char>? . pD51e3) (char>=? . pD51e2) (char=? . pD51e1) (char<? . pD51e0) (char<=? . pD51df) (char->integer . pD51de) (ceiling . pD51dd) (call-with-values . pD51dc) (call/cc . pD51db) (call-with-current-continuation . pD51da) (cddddr . pD51d9) (cdddar . pD51d8) (cddadr . pD51d7) (cddaar . pD51d6) (cdaddr . pD51d5) (cdadar . pD51d4) (cdaadr . pD51d3) (cdaaar . pD51d2) (cadddr . pD51d1) (caddar . pD51d0) (cadadr . pD51cf) (cadaar . pD51ce) (caaddr . pD51cd) (caadar . pD51cc) (caaadr . pD51cb) (caaaar . pD51ca) (cdddr . pD51c9) (cddar . pD51c8) (cdadr . pD51c7) (cdaar . pD51c6) (caddr . pD51c5) (cadar . pD51c4) (caadr . pD51c3) (caaar . pD51c2) (cddr . pD51c1) (cdar . pD51c0) (cadr . pD51bf) (caar . pD51be) (cdr . pD51bd) (car . pD51bc) (boolean? . pD51bb) (boolean=? . pD51ba) (atan . pD51b9) (assertion-violation . pD51b8) (asin . pD51b7) (apply . pD51b6) (append . pD51b5) (angle . pD51b4) (acos . pD51b3) (abs . pD51b2) (/ . pD51b1) (* . pD51b0) (- . pD51af) (+ . pD51ae) (>= . pD51ad) (> . pD51ac) (= . pD51ab) (<= . pD51aa) (< . pD51a9) (&no-nans . pD51a7) (&no-infinities . pD51a6) (&i/o-encoding . pD51a5) (&i/o-decoding . pD51a4) (&i/o-port . pD51a3) (&i/o-file-does-not-exist . pD51a2) (&i/o-file-already-exists . pD51a1) (&i/o-file-is-read-only . pD51a0) (&i/o-file-protection . pD519f) (&i/o-filename . pD519e) (&i/o-invalid-position . pD519d) (&i/o-write . pD519c) (&i/o-read . pD519b) (&i/o . pD519a) (&undefined . pD5199) (&syntax . pD5198) (&lexical . pD5197) (&implementation-restriction . pD5196) (&non-continuable . pD5195) (&who . pD5194) (&irritants . pD5193) (&assertion . pD5192) (&violation . pD5191) (&error . pD5190) (&serious . pD518f) (&warning . pD518e) (&message . pD518d) (&condition . pD518c) (define-condition-type . pD518b) (define-enumeration . pD518a) (define-record-type . pD5189) (parent-rtd . pD5188) (nongenerative . pD5187) (opaque . pD5186) (sealed . pD5185) (protocol . pD5184) (parent . pD5183) (immutable . pD5182) (mutable . pD5181) (fields . pD5180) (error-handling-mode . pD517f) (file-options . pD517e) (buffer-mode . pD517d) (eol-style . pD517c) (guard . pD517b) (unsyntax-splicing . pD5178) (unsyntax . pD5177) (unquote-splicing . pD5176) (unquote . pD5175) (_ . pD5174) (else . pD5173) (=> . pD5172) (... . pD5171) (assert . pD5170) (endianness . pD516f) (do . pD516c) (cond . pD516b) (let* . pD516a) (let*-values . pD5169) (let-values . pD5168) (identifier-syntax . pD5167) (with-syntax . pD5166) (quasisyntax . pD5165) (quasiquote . pD5164) (syntax-rules . pD5163) (record-constructor-descriptor . pD5160) (record-type-descriptor . pD515f) (case . pD515e) (unless . pD515c) (when . pD515b) (or . pD515a) (and . pD5159) (if . pD5158) (let . pD5157) (letrec* . pD5156) (letrec . pD5155) (case-lambda . pD5153) (lambda . pD5152) (syntax . pD5151) (syntax-case . pD5150) (quote . pD514f) (letrec-syntax . pD514d) (let-syntax . pD514c) (set! . pD514b) (begin . pD5149) (define-syntax . pD5147) (define . pD5146)) '() values values '#f '#f '#t '#f) (pD2cd2@pD2b1e@install-library 'pD5478 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . pD3180) (quotient . pD532c) (null-environment . pD317e) (remainder . pD532b) (modulo . pD532a) (inexact->exact . pD5329) (force . pD5328) (exact->inexact . pD5327) (make-promise . pD5326) (delay . pD516e)) '() values values '#f '#f '#t '#f) (pD2cd2@pD2b1e@install-library 'pD5479 '(rnrs control) '(6) '() '() '() '((do . pD516c) (unless . pD515c) (when . pD515b) (case-lambda . pD5153)) '() values values '#f '#f '#t '#f) (pD2cd2@pD2b1e@install-library 'pD547a '(rnrs eval) '(6) '() '() '() '((eval . pD3184) (environment . pD317c)) '() values values '#f '#f '#t '#f) (pD2cd2@pD2b1e@install-library 'pD547b '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . pD5322) (set-car! . pD5321)) '() values values '#f '#f '#t '#f) (pD2cd2@pD2b1e@install-library 'pD547c '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . pD5324) (string-set! . pD5323)) '() values values '#f '#f '#t '#f) (pD2cd2@pD2b1e@install-library 'pD547d '(rnrs programs) '(6) '() '() '() '((exit . pD5325) (command-line . pD4fde)) '() values values '#f '#f '#t '#f) (pD2cd2@pD2b1e@install-library 'pD547e '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . pD2eef) (identifier? . pD31a6) (generate-temporaries . pD3192) (free-identifier=? . pD3194) (syntax->datum . pD31aa) (datum->syntax . pD31a8) (bound-identifier=? . pD3196) (syntax-violation . pD31a4) (unsyntax-splicing . pD5178) (unsyntax . pD5177) (_ . pD5174) (... . pD5171) (with-syntax . pD5166) (quasisyntax . pD5165) (syntax . pD5151) (syntax-case . pD5150)) '() values values '#f '#f '#t '#f) (pD2cd2@pD2b1e@install-library 'pD547f '(rnrs files) '(6) '() '() '() '((delete-file . pD5395) (file-exists? . pD5394) (make-i/o-write-error . pD4dce) (make-i/o-read-error . pD4db9) (make-i/o-port-error . pD4e6f) (make-i/o-invalid-position-error . pD4de5) (make-i/o-filename-error . pD4e00) (make-i/o-file-protection-error . pD4e19) (make-i/o-file-is-read-only-error . pD4e2e) (make-i/o-file-does-not-exist-error . pD4e58) (make-i/o-file-already-exists-error . pD4e43) (make-i/o-error . pD4da4) (i/o-write-error? . pD4dd0) (i/o-read-error? . pD4dbb) (i/o-port-error? . pD4e73) (i/o-invalid-position-error? . pD4de9) (i/o-filename-error? . pD4e04) (i/o-file-protection-error? . pD4e1b) (i/o-file-is-read-only-error? . pD4e30) (i/o-file-does-not-exist-error? . pD4e5a) (i/o-file-already-exists-error? . pD4e45) (i/o-error? . pD4da6) (i/o-error-position . pD4deb) (i/o-error-port . pD4e75) (i/o-error-filename . pD4e06) (&i/o-port . pD51a3) (&i/o-file-does-not-exist . pD51a2) (&i/o-file-already-exists . pD51a1) (&i/o-file-is-read-only . pD51a0) (&i/o-file-protection . pD519f) (&i/o-filename . pD519e) (&i/o-invalid-position . pD519d) (&i/o-write . pD519c) (&i/o-read . pD519b) (&i/o . pD519a)) '() values values '#f '#f '#t '#f) (pD2cd2@pD2b1e@install-library 'pD5480 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . pD5393) (vector-sort . pD5392) (list-sort . pD5391)) '() values values '#f '#f '#t '#f) (pD2cd2@pD2b1e@install-library 'pD5481 '(rnrs base) '(6) '() '() '() '((zero? . pD524a) (vector? . pD5249) (vector-set! . pD5248) (vector-ref . pD5247) (vector-map . pD5246) (vector-length . pD5245) (vector-for-each . pD5244) (vector-fill! . pD5243) (vector->list . pD5242) (vector . pD5241) (values . pD5240) (truncate . pD523f) (tan . pD523e) (symbol? . pD523d) (symbol=? . pD523c) (symbol->string . pD523b) (substring . pD523a) (string? . pD5239) (string>? . pD5238) (string>=? . pD5237) (string=? . pD5236) (string<? . pD5235) (string<=? . pD5234) (string-ref . pD5233) (string-length . pD5232) (string-for-each . pD5231) (string-copy . pD5230) (string-append . pD522f) (string->symbol . pD522e) (string->number . pD522d) (string->list . pD522c) (string . pD522b) (sqrt . pD522a) (sin . pD5229) (round . pD5228) (reverse . pD5227) (real? . pD5226) (real-valued? . pD5225) (real-part . pD5224) (rationalize . pD5223) (rational? . pD5222) (rational-valued? . pD5221) (procedure? . pD5220) (positive? . pD521f) (pair? . pD521e) (odd? . pD521d) (numerator . pD521c) (number? . pD521b) (number->string . pD521a) (null? . pD5219) (not . pD5218) (negative? . pD5217) (nan? . pD5216) (min . pD5215) (max . pD5214) (map . pD5213) (make-vector . pD5212) (make-string . pD5211) (make-rectangular . pD5210) (make-polar . pD520f) (magnitude . pD520e) (log . pD520d) (list? . pD520c) (list-tail . pD520b) (list-ref . pD520a) (list->vector . pD5209) (list->string . pD5208) (list . pD5207) (length . pD5206) (lcm . pD5205) (integer? . pD5204) (integer-valued? . pD5203) (integer->char . pD5202) (infinite? . pD5201) (inexact? . pD5200) (inexact . pD51ff) (imag-part . pD51fe) (gcd . pD51fd) (for-each . pD51fc) (floor . pD51fb) (finite? . pD51fa) (expt . pD51f9) (exp . pD51f8) (exact? . pD51f7) (exact-integer-sqrt . pD51f6) (exact . pD51f5) (even? . pD51f4) (error . pD51f3) (eqv? . pD51f2) (equal? . pD51f1) (eq? . pD51f0) (dynamic-wind . pD51ef) (div0-and-mod0 . pD51ee) (mod0 . pD51ed) (div0 . pD51ec) (div-and-mod . pD51eb) (mod . pD51ea) (div . pD51e9) (denominator . pD51e8) (cos . pD51e7) (cons . pD51e6) (complex? . pD51e5) (char? . pD51e4) (char>? . pD51e3) (char>=? . pD51e2) (char=? . pD51e1) (char<? . pD51e0) (char<=? . pD51df) (char->integer . pD51de) (ceiling . pD51dd) (call-with-values . pD51dc) (call/cc . pD51db) (call-with-current-continuation . pD51da) (cddddr . pD51d9) (cdddar . pD51d8) (cddadr . pD51d7) (cddaar . pD51d6) (cdaddr . pD51d5) (cdadar . pD51d4) (cdaadr . pD51d3) (cdaaar . pD51d2) (cadddr . pD51d1) (caddar . pD51d0) (cadadr . pD51cf) (cadaar . pD51ce) (caaddr . pD51cd) (caadar . pD51cc) (caaadr . pD51cb) (caaaar . pD51ca) (cdddr . pD51c9) (cddar . pD51c8) (cdadr . pD51c7) (cdaar . pD51c6) (caddr . pD51c5) (cadar . pD51c4) (caadr . pD51c3) (caaar . pD51c2) (cddr . pD51c1) (cdar . pD51c0) (cadr . pD51bf) (caar . pD51be) (cdr . pD51bd) (car . pD51bc) (boolean? . pD51bb) (boolean=? . pD51ba) (atan . pD51b9) (assertion-violation . pD51b8) (asin . pD51b7) (apply . pD51b6) (append . pD51b5) (angle . pD51b4) (acos . pD51b3) (abs . pD51b2) (/ . pD51b1) (* . pD51b0) (- . pD51af) (+ . pD51ae) (>= . pD51ad) (> . pD51ac) (= . pD51ab) (<= . pD51aa) (< . pD51a9) (unquote-splicing . pD5176) (unquote . pD5175) (_ . pD5174) (else . pD5173) (=> . pD5172) (... . pD5171) (assert . pD5170) (cond . pD516b) (let* . pD516a) (let*-values . pD5169) (let-values . pD5168) (identifier-syntax . pD5167) (quasiquote . pD5164) (syntax-rules . pD5163) (case . pD515e) (or . pD515a) (and . pD5159) (if . pD5158) (let . pD5157) (letrec* . pD5156) (letrec . pD5155) (lambda . pD5152) (quote . pD514f) (letrec-syntax . pD514d) (let-syntax . pD514c) (set! . pD514b) (begin . pD5149) (define-syntax . pD5147) (define . pD5146)) '() values values '#f '#f '#t '#f) (pD2cd2@pD2b1e@install-library 'pD5482 '(rnrs lists) '(6) '() '() '() '((remove . pD5320) (remv . pD531f) (remp . pD531e) (remq . pD531d) (partition . pD531c) (memv . pD531b) (memq . pD531a) (memp . pD5319) (member . pD5318) (exists . pD5317) (for-all . pD5316) (fold-right . pD5315) (fold-left . pD5314) (find . pD5313) (filter . pD5312) (cons* . pD5311) (assv . pD5310) (assq . pD530f) (assp . pD530e) (assoc . pD530d)) '() values values '#f '#f '#t '#f) (pD2cd2@pD2b1e@install-library 'pD5483 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . pD537b) (call-with-input-file . pD537a) (write-char . pD5379) (write . pD5378) (with-output-to-file . pD5377) (with-input-from-file . pD5376) (read-char . pD5375) (read . pD5374) (peek-char . pD5373) (open-output-file . pD5372) (open-input-file . pD5371) (newline . pD5370) (display . pD536f) (close-output-port . pD536e) (close-input-port . pD536d) (eof-object? . pD536c) (eof-object . pD536b) (current-error-port . pD536a) (current-output-port . pD5369) (current-input-port . pD5368) (output-port? . pD5367) (input-port? . pD5366) (make-i/o-write-error . pD4dce) (make-i/o-read-error . pD4db9) (make-i/o-port-error . pD4e6f) (make-i/o-invalid-position-error . pD4de5) (make-i/o-filename-error . pD4e00) (make-i/o-file-protection-error . pD4e19) (make-i/o-file-is-read-only-error . pD4e2e) (make-i/o-file-does-not-exist-error . pD4e58) (make-i/o-file-already-exists-error . pD4e43) (make-i/o-error . pD4da4) (i/o-write-error? . pD4dd0) (i/o-read-error? . pD4dbb) (i/o-port-error? . pD4e73) (i/o-invalid-position-error? . pD4de9) (i/o-filename-error? . pD4e04) (i/o-file-protection-error? . pD4e1b) (i/o-file-is-read-only-error? . pD4e30) (i/o-file-does-not-exist-error? . pD4e5a) (i/o-file-already-exists-error? . pD4e45) (i/o-error? . pD4da6) (i/o-error-position . pD4deb) (i/o-error-port . pD4e75) (i/o-error-filename . pD4e06) (&i/o-port . pD51a3) (&i/o-file-does-not-exist . pD51a2) (&i/o-file-already-exists . pD51a1) (&i/o-file-is-read-only . pD51a0) (&i/o-file-protection . pD519f) (&i/o-filename . pD519e) (&i/o-invalid-position . pD519d) (&i/o-write . pD519c) (&i/o-read . pD519b) (&i/o . pD519a)) '() values values '#f '#f '#t '#f) (pD2cd2@pD2b1e@install-library 'pD5484 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . pD533c) (utf32->string . pD52f1) (utf16->string . pD52f0) (utf8->string . pD52ef) (uint-list->bytevector . pD52ee) (u8-list->bytevector . pD52ed) (string->utf8 . pD52ec) (string->utf32 . pD52eb) (string->utf16 . pD52ea) (sint-list->bytevector . pD52e9) (native-endianness . pD52e8) (bytevector? . pD52e7) (bytevector=? . pD52e6) (bytevector-uint-set! . pD52e5) (bytevector-uint-ref . pD52e4) (bytevector-u8-set! . pD52e3) (bytevector-u8-ref . pD52e2) (bytevector-u64-set! . pD52e1) (bytevector-u64-ref . pD52e0) (bytevector-u64-native-set! . pD52df) (bytevector-u64-native-ref . pD52de) (bytevector-u32-set! . pD52dd) (bytevector-u32-ref . pD52dc) (bytevector-u32-native-set! . pD52db) (bytevector-u32-native-ref . pD52da) (bytevector-u16-set! . pD52d9) (bytevector-u16-ref . pD52d8) (bytevector-u16-native-set! . pD52d7) (bytevector-u16-native-ref . pD52d6) (bytevector-sint-set! . pD52d5) (bytevector-sint-ref . pD52d4) (bytevector-s8-set! . pD52d3) (bytevector-s8-ref . pD52d2) (bytevector-s64-set! . pD52d1) (bytevector-s64-ref . pD52d0) (bytevector-s64-native-set! . pD52cf) (bytevector-s64-native-ref . pD52ce) (bytevector-s32-set! . pD52cd) (bytevector-s32-ref . pD52cc) (bytevector-s32-native-set! . pD52cb) (bytevector-s32-native-ref . pD52ca) (bytevector-s16-set! . pD52c9) (bytevector-s16-ref . pD52c8) (bytevector-s16-native-set! . pD52c7) (bytevector-s16-native-ref . pD52c6) (bytevector-length . pD52c5) (bytevector-ieee-single-ref . pD52c4) (bytevector-ieee-single-set! . pD52c3) (bytevector-ieee-single-native-set! . pD52c2) (bytevector-ieee-single-native-ref . pD52c1) (bytevector-ieee-double-set! . pD52c0) (bytevector-ieee-double-ref . pD52bf) (bytevector-ieee-double-native-set! . pD52be) (bytevector-ieee-double-native-ref . pD52bd) (bytevector-fill! . pD52bc) (bytevector-copy! . pD52bb) (bytevector-copy . pD52ba) (bytevector->uint-list . pD52b9) (bytevector->u8-list . pD52b8) (bytevector->sint-list . pD52b7) (endianness . pD516f)) '() values values '#f '#f '#t '#f) (pD2cd2@pD2b1e@install-library 'pD5485 '(rnrs unicode) '(6) '() '() '() '((string-upcase . pD53c3) (string-titlecase . pD53c2) (string-normalize-nfkd . pD53c1) (string-normalize-nfkc . pD53c0) (string-normalize-nfd . pD53bf) (string-normalize-nfc . pD53be) (string-foldcase . pD53bd) (string-downcase . pD53bc) (string-ci>? . pD53bb) (string-ci>=? . pD53ba) (string-ci=? . pD53b9) (string-ci<? . pD53b8) (string-ci<=? . pD53b7) (char-whitespace? . pD53b6) (char-upper-case? . pD53b5) (char-title-case? . pD53b4) (char-numeric? . pD53b3) (char-lower-case? . pD53b2) (char-general-category . pD53b1) (char-upcase . pD53b0) (char-titlecase . pD53af) (char-foldcase . pD53ae) (char-downcase . pD53ad) (char-ci>? . pD53ac) (char-ci>=? . pD53ab) (char-ci=? . pD53aa) (char-ci<? . pD53a9) (char-ci<=? . pD53a8) (char-alphabetic? . pD53a7)) '() values values '#f '#f '#t '#f) (pD2cd2@pD2b1e@install-library 'pD5486 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . pD5306) (raise-continuable . pD5305) (raise . pD5304) (guard . pD517b) (else . pD5173) (=> . pD5172)) '() values values '#f '#f '#t '#f) (pD2cd2@pD2b1e@install-library 'pD5487 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . pD525b) (bitwise-reverse-bit-field . pD525a) (bitwise-length . pD5259) (bitwise-if . pD5258) (bitwise-first-bit-set . pD5257) (bitwise-copy-bit-field . pD5256) (bitwise-copy-bit . pD5255) (bitwise-bit-set? . pD5254) (bitwise-bit-field . pD5253) (bitwise-bit-count . pD5252) (bitwise-xor . pD5251) (bitwise-ior . pD5250) (bitwise-and . pD524f) (bitwise-not . pD524e) (bitwise-arithmetic-shift-right . pD524d) (bitwise-arithmetic-shift-left . pD524c) (bitwise-arithmetic-shift . pD524b)) '() values values '#f '#f '#t '#f) (pD2cd2@pD2b1e@install-library 'pD5488 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . pD5288) (fxxor . pD5287) (fxrotate-bit-field . pD5286) (fxreverse-bit-field . pD5285) (fxpositive? . pD5284) (fxodd? . pD5283) (fxnot . pD5282) (fxnegative? . pD5281) (fxmod0 . pD5280) (fxmod . pD527f) (fxmin . pD527e) (fxmax . pD527d) (fxlength . pD527c) (fxior . pD527b) (fxif . pD527a) (fxfirst-bit-set . pD5279) (fxeven? . pD5278) (fxdiv0-and-mod0 . pD5277) (fxdiv0 . pD5276) (fxdiv-and-mod . pD5275) (fxdiv . pD5274) (fxcopy-bit-field . pD5273) (fxcopy-bit . pD5272) (fxbit-set? . pD5271) (fxbit-field . pD5270) (fxbit-count . pD526f) (fxarithmetic-shift-right . pD526e) (fxarithmetic-shift-left . pD526d) (fxarithmetic-shift . pD526c) (fxand . pD526b) (fx>? . pD526a) (fx>=? . pD5269) (fx=? . pD5268) (fx<? . pD5267) (fx<=? . pD5266) (fx-/carry . pD5265) (fx- . pD5264) (fx+/carry . pD5263) (fx+ . pD5262) (fx*/carry . pD5261) (fx* . pD5260) (greatest-fixnum . pD525f) (least-fixnum . pD525e) (fixnum-width . pD525d) (fixnum? . pD525c)) '() values values '#f '#f '#t '#f) (pD2cd2@pD2b1e@install-library 'pD5489 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . pD4ecf) (no-infinities-violation? . pD4eba) (make-no-nans-violation . pD4ecd) (make-no-infinities-violation . pD4eb8) (real->flonum . pD52b6) (flzero? . pD52b5) (fltruncate . pD52b4) (fltan . pD52b3) (flsqrt . pD52b2) (flsin . pD52b1) (flround . pD52b0) (flpositive? . pD52af) (flonum? . pD52ae) (flodd? . pD52ad) (flnumerator . pD52ac) (flnegative? . pD52ab) (flnan? . pD52aa) (flmod0 . pD52a9) (flmod . pD52a8) (flmin . pD52a7) (flmax . pD52a6) (fllog . pD52a5) (flinteger? . pD52a4) (flinfinite? . pD52a3) (flfloor . pD52a2) (flfinite? . pD52a1) (flexpt . pD52a0) (flexp . pD529f) (fleven? . pD529e) (fldiv0-and-mod0 . pD529d) (fldiv0 . pD529c) (fldiv-and-mod . pD529b) (fldiv . pD529a) (fldenominator . pD5299) (flcos . pD5298) (flceiling . pD5297) (flatan . pD5296) (flasin . pD5295) (flacos . pD5294) (flabs . pD5293) (fl>? . pD5292) (fl>=? . pD5291) (fl=? . pD5290) (fl<? . pD528f) (fl<=? . pD528e) (fl/ . pD528d) (fl- . pD528c) (fl+ . pD528b) (fl* . pD528a) (fixnum->flonum . pD5289) (&no-nans . pD51a7) (&no-infinities . pD51a6)) '() values values '#f '#f '#t '#f) (pD2cd2@pD2b1e@install-library 'pD548a '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . pD5390) (string-ci-hash . pD538f) (string-hash . pD538e) (equal-hash . pD538d) (hashtable-equivalence-function . pD538c) (make-hashtable . pD538b) (hashtable-hash-function . pD538a) (make-eqv-hashtable . pD5389) (make-eq-hashtable . pD5388) (hashtable? . pD5387) (hashtable-update! . pD5386) (hashtable-size . pD5385) (hashtable-set! . pD5384) (hashtable-ref . pD5383) (hashtable-mutable? . pD5382) (hashtable-keys . pD5381) (hashtable-entries . pD5380) (hashtable-delete! . pD537f) (hashtable-copy . pD537e) (hashtable-contains? . pD537d) (hashtable-clear! . pD537c)) '() values values '#f '#f '#t '#f) (pD2cd2@pD2b1e@install-library 'pD548b '(rnrs io ports) '(6) '() '() '() '((eof-object? . pD536c) (eof-object . pD536b) (current-error-port . pD536a) (current-output-port . pD5369) (current-input-port . pD5368) (output-port? . pD5367) (input-port? . pD5366) (utf-8-codec . pD5365) (utf-16-codec . pD5364) (transcoder-error-handling-mode . pD5363) (transcoder-eol-style . pD5362) (transcoder-codec . pD5361) (transcoded-port . pD5360) (textual-port? . pD535f) (string->bytevector . pD535e) (standard-output-port . pD535d) (standard-input-port . pD535c) (standard-error-port . pD535b) (set-port-position! . pD535a) (put-u8 . pD5359) (put-string . pD5358) (put-datum . pD5357) (put-char . pD5356) (put-bytevector . pD5355) (port? . pD5354) (port-transcoder . pD5353) (port-position . pD5352) (port-has-set-port-position!? . pD5351) (port-has-port-position? . pD5350) (port-eof? . pD534f) (output-port-buffer-mode . pD534e) (open-string-output-port . pD534d) (open-string-input-port . pD534c) (open-file-output-port . pD534b) (open-file-input/output-port . pD534a) (open-file-input-port . pD5349) (open-bytevector-output-port . pD5348) (open-bytevector-input-port . pD5347) (native-transcoder . pD5346) (native-eol-style . pD5345) (make-transcoder . pD5344) (latin-1-codec . pD5343) (make-i/o-write-error . pD4dce) (make-i/o-read-error . pD4db9) (make-i/o-port-error . pD4e6f) (make-i/o-invalid-position-error . pD4de5) (make-i/o-filename-error . pD4e00) (make-i/o-file-protection-error . pD4e19) (make-i/o-file-is-read-only-error . pD4e2e) (make-i/o-file-does-not-exist-error . pD4e58) (make-i/o-file-already-exists-error . pD4e43) (make-i/o-error . pD4da4) (make-i/o-encoding-error . pD4e9f) (make-i/o-decoding-error . pD4e88) (make-custom-textual-output-port . pD5342) (make-custom-textual-input/output-port . pD5341) (make-custom-textual-input-port . pD5340) (make-custom-binary-output-port . pD533f) (make-custom-binary-input/output-port . pD533e) (make-custom-binary-input-port . pD533d) (lookahead-u8 . pD533b) (lookahead-char . pD533a) (i/o-write-error? . pD4dd0) (i/o-read-error? . pD4dbb) (i/o-port-error? . pD4e73) (i/o-invalid-position-error? . pD4de9) (i/o-filename-error? . pD4e04) (i/o-file-protection-error? . pD4e1b) (i/o-file-is-read-only-error? . pD4e30) (i/o-file-does-not-exist-error? . pD4e5a) (i/o-file-already-exists-error? . pD4e45) (i/o-error? . pD4da6) (i/o-error-position . pD4deb) (i/o-error-port . pD4e75) (i/o-error-filename . pD4e06) (i/o-encoding-error? . pD4ea3) (i/o-encoding-error-char . pD4ea5) (i/o-decoding-error? . pD4e8a) (get-u8 . pD5339) (get-string-n! . pD5338) (get-string-n . pD5337) (get-string-all . pD5336) (get-line . pD5335) (get-datum . pD5334) (get-char . pD5333) (get-bytevector-some . pD5332) (get-bytevector-n! . pD5331) (get-bytevector-n . pD5330) (get-bytevector-all . pD532f) (flush-output-port . pD532e) (close-port . pD532d) (call-with-string-output-port . pD530c) (call-with-port . pD530b) (call-with-bytevector-output-port . pD530a) (bytevector->string . pD5309) (buffer-mode? . pD5308) (binary-port? . pD5307) (&i/o-encoding . pD51a5) (&i/o-decoding . pD51a4) (&i/o-port . pD51a3) (&i/o-file-does-not-exist . pD51a2) (&i/o-file-already-exists . pD51a1) (&i/o-file-is-read-only . pD51a0) (&i/o-file-protection . pD519f) (&i/o-filename . pD519e) (&i/o-invalid-position . pD519d) (&i/o-write . pD519c) (&i/o-read . pD519b) (&i/o . pD519a) (error-handling-mode . pD517f) (file-options . pD517e) (buffer-mode . pD517d) (eol-style . pD517c)) '() values values '#f '#f '#t '#f) (pD2cd2@pD2b1e@install-library 'pD548c '(rnrs enums) '(6) '() '() '() '((make-enumeration . pD5303) (enum-set=? . pD5302) (enum-set-universe . pD5301) (enum-set-union . pD5300) (enum-set-subset? . pD52ff) (enum-set-projection . pD52fe) (enum-set-member? . pD52fd) (enum-set-intersection . pD52fc) (enum-set-indexer . pD52fb) (enum-set-difference . pD52fa) (enum-set-constructor . pD52f9) (enum-set-complement . pD52f8) (enum-set->list . pD52f7) (define-enumeration . pD518a)) '() values values '#f '#f '#t '#f) (pD2cd2@pD2b1e@install-library 'pD548d '(rnrs conditions) '(6) '() '() '() '((who-condition? . pD4d1a) (warning? . pD4c92) (violation? . pD4cd1) (undefined-violation? . pD4d91) (syntax-violation? . pD4d78) (syntax-violation-subform . pD4d7c) (syntax-violation-form . pD4d7a) (syntax-violation . pD31a4) (simple-conditions . pD52f6) (serious-condition? . pD4ca7) (non-continuable-violation? . pD4d31) (message-condition? . pD4c7b) (make-who-condition . pD4d16) (make-warning . pD4c90) (make-violation . pD4ccf) (make-undefined-violation . pD4d8f) (make-syntax-violation . pD4d72) (make-serious-condition . pD4ca5) (make-non-continuable-violation . pD4d2f) (make-message-condition . pD4c77) (make-lexical-violation . pD4d59) (make-irritants-condition . pD4cfb) (make-implementation-restriction-violation . pD4d44) (make-error . pD4cba) (make-assertion-violation . pD4ce4) (lexical-violation? . pD4d5b) (irritants-condition? . pD4cff) (implementation-restriction-violation? . pD4d46) (error? . pD4cbc) (condition-who . pD4d1c) (condition-predicate . pD52f5) (condition-message . pD4c7d) (condition-irritants . pD4d01) (condition-accessor . pD52f4) (condition . pD52f3) (assertion-violation? . pD4ce6) (condition? . pD52f2) (&undefined . pD5199) (&syntax . pD5198) (&lexical . pD5197) (&implementation-restriction . pD5196) (&non-continuable . pD5195) (&who . pD5194) (&irritants . pD5193) (&assertion . pD5192) (&violation . pD5191) (&error . pD5190) (&serious . pD518f) (&warning . pD518e) (&message . pD518d) (&condition . pD518c) (define-condition-type . pD518b)) '() values values '#f '#f '#t '#f) (pD2cd2@pD2b1e@install-library 'pD548e '(rnrs records inspection) '(6) '() '() '() '((record? . pD539f) (record-type-uid . pD539e) (record-type-sealed? . pD539d) (record-type-parent . pD539c) (record-type-opaque? . pD539b) (record-type-name . pD539a) (record-type-generative? . pD5399) (record-type-field-names . pD5398) (record-rtd . pD5397) (record-field-mutable? . pD5396)) '() values values '#f '#f '#t '#f) (pD2cd2@pD2b1e@install-library 'pD548f '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . pD53a6) (record-predicate . pD53a5) (record-mutator . pD53a4) (record-constructor . pD53a3) (record-accessor . pD53a2) (make-record-type-descriptor . pD53a1) (make-record-constructor-descriptor . pD53a0)) '() values values '#f '#f '#t '#f) (pD2cd2@pD2b1e@install-library 'pD5490 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . pD5189) (parent-rtd . pD5188) (nongenerative . pD5187) (opaque . pD5186) (sealed . pD5185) (protocol . pD5184) (parent . pD5183) (immutable . pD5182) (mutable . pD5181) (fields . pD5180) (record-constructor-descriptor . pD5160) (record-type-descriptor . pD515f)) '() values values '#f '#f '#t '#f) (pD2cd2@pD2b1e@install-library 'pD5491 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . pD4ed3) (&no-nans-rtd . pD4ed1) (&no-infinities-rcd . pD4ebe) (&no-infinities-rtd . pD4ebc) (&i/o-encoding-rcd . pD4ea9) (&i/o-encoding-rtd . pD4ea7) (&i/o-decoding-rcd . pD4e8e) (&i/o-decoding-rtd . pD4e8c) (&i/o-port-rcd . pD4e79) (&i/o-port-rtd . pD4e77) (&i/o-file-does-not-exist-rcd . pD4e5e) (&i/o-file-does-not-exist-rtd . pD4e5c) (&i/o-file-already-exists-rcd . pD4e49) (&i/o-file-already-exists-rtd . pD4e47) (&i/o-file-is-read-only-rcd . pD4e34) (&i/o-file-is-read-only-rtd . pD4e32) (&i/o-file-protection-rcd . pD4e1f) (&i/o-file-protection-rtd . pD4e1d) (&i/o-filename-rcd . pD4e0a) (&i/o-filename-rtd . pD4e08) (&i/o-invalid-position-rcd . pD4def) (&i/o-invalid-position-rtd . pD4ded) (&i/o-write-rcd . pD4dd4) (&i/o-write-rtd . pD4dd2) (&i/o-read-rcd . pD4dbf) (&i/o-read-rtd . pD4dbd) (&i/o-rcd . pD4daa) (&i/o-rtd . pD4da8) (&undefined-rcd . pD4d95) (&undefined-rtd . pD4d93) (&syntax-rcd . pD4d80) (&syntax-rtd . pD4d7e) (&lexical-rcd . pD4d5f) (&lexical-rtd . pD4d5d) (&implementation-restriction-rcd . pD4d4a) (&implementation-restriction-rtd . pD4d48) (&non-continuable-rcd . pD4d35) (&non-continuable-rtd . pD4d33) (&who-rcd . pD4d20) (&who-rtd . pD4d1e) (&irritants-rcd . pD4d05) (&irritants-rtd . pD4d03) (&assertion-rcd . pD4cea) (&assertion-rtd . pD4ce8) (&violation-rcd . pD4cd5) (&violation-rtd . pD4cd3) (&error-rcd . pD4cc0) (&error-rtd . pD4cbe) (&serious-rcd . pD4cab) (&serious-rtd . pD4ca9) (&warning-rcd . pD4c96) (&warning-rtd . pD4c94) (&message-rcd . pD4c81) (&message-rtd . pD4c7f) (&condition-rcd . pD4c22) (&condition-rtd . pD4c20) (syntax-error . pD31a0) (syntax-dispatch . pD30c4) (pretty-print . pD5471) (eval-core . pD5470) (set-symbol-value! . pD546f) (symbol-value . pD546e) (gensym . pD546d) (void . pD546c) (load . pD4fe4) (interaction-environment . pD31b2) (char-ready? . pD546b) (regexp? . pD546a) (read-line . pD5469) (gensym-prefix-set! . pD5468) (ungensym . pD5467) (alist->eq-hash-table . pD5466) (assoc-ref . pD5465) (print . pD5464) (format . pD5463) (host-os . pD5462) (library-path . pD2afd) (standard-library-path . pD5461) (file-newer? . pD5460) (stat-mtime . pD545f) (write-to-file . pD545e) (file->list . pD545d) (file->string . pD545c) (digit->integer . pD545b) (call-with-string-input-port . pD545a) (call-with-string-io . pD5459) (string-split . pD5458) (bytevector-for-each . pD5457) (string->regexp . pD5456) (rxmatch . pD5455) (regexp-replace-all . pD5454) (hashtable-for-each . pD5453) (mosh-cache-dir . pD28e8) (call-process . pD5452) (local-tz-offset . pD5451) (microseconds . pD5450) (directory-list . pD544f) (set-current-directory! . pD544e) (expand-path . pD544d) (current-directory . pD544c) (%spawn . pD544b) (%waitpid . pD544a) (simple-struct-name . pD5449) (simple-struct-set! . pD5448) (simple-struct-ref . pD5447) (make-simple-struct . pD5446) (simple-struct? . pD5445) (pointer-ref-c-int64 . pD5444) (pointer-ref-c-int32 . pD5443) (pointer-ref-c-int16 . pD5442) (pointer-ref-c-int8 . pD5441) (pointer-ref-c-uint64 . pD5440) (pointer-ref-c-uint32 . pD543f) (pointer-ref-c-uint16 . pD543e) (pointer-ref-c-uint8 . pD543d) (pointer-set-c-uint64! . pD543c) (pointer-set-c-uint32! . pD543b) (pointer-set-c-uint16! . pD543a) (pointer-set-c-uint8! . pD5439) (pointer-set-c-int64! . pD5438) (pointer-set-c-int32! . pD5437) (pointer-set-c-int16! . pD5436) (pointer-set-c-int8! . pD5435) (pointer-set-c-pointer! . pD5434) (pointer-set-c-double! . pD5433) (pointer-set-c-float! . pD5432) (pointer-set-c-long-long! . pD5431) (pointer-set-c-long! . pD5430) (pointer-set-c-int! . pD542f) (pointer-set-c-short! . pD542e) (pointer-set-c-char! . pD542d) (pointer-ref-c-pointer . pD542c) (pointer-ref-c-double . pD542b) (pointer-ref-c-float . pD542a) (pointer-ref-c-unsigned-long-long . pD5429) (pointer-ref-c-signed-long-long . pD5428) (pointer-ref-c-unsigned-long . pD5427) (pointer-ref-c-signed-long . pD5426) (pointer-ref-c-unsigned-int . pD5425) (pointer-ref-c-signed-int . pD5424) (pointer-ref-c-unsigned-short . pD5423) (pointer-ref-c-signed-short . pD5422) (pointer-ref-c-unsigned-char . pD5421) (pointer-ref-c-signed-char . pD5420) (pointer->integer . pD541f) (integer->pointer . pD541e) (pointer? . pD541d) (shared-errno . pD541c) (%ffi-free-c-callback-trampoline . pD541b) (%ffi-make-c-callback-trampoline . pD541a) (%ffi-free . pD5419) (%ffi-malloc . pD5418) (%ffi-supported? . pD5417) (%ffi-pointer->string . pD5416) (%ffi-call->string-or-zero . pD5415) (%ffi-call->double . pD5414) (%ffi-call->void* . pD5413) (%ffi-call->void . pD5412) (%ffi-call->char . pD5411) (%ffi-call->int . pD5410) (%ffi-lookup . pD540f) (%ffi-open . pD540e) (null-terminated-utf8->string . pD540d) (null-terminated-bytevector->string . pD540c) (%fork . pD540b) (%pipe . pD540a) (p . pD5409) (open-output-string . pD5408) (get-output-string . pD5407) (file-stat-ctime . pD5406) (file-stat-atime . pD5405) (file-stat-mtime . pD5404) (file-size-in-bytes . pD5403) (file-writable? . pD5402) (file-executable? . pD5401) (file-readable? . pD5400) (file-regular? . pD53ff) (file-symbolic-link? . pD53fe) (file-directory? . pD53fd) (create-symbolic-link . pD53fc) (rename-file . pD53fb) (delete-directory . pD53fa) (create-directory . pD53f9) (create-mosh-cache-dir . pD53f8) (get-environment-variables . pD53f7) (current-exception-handler . pD53f6) (get-environment-variable . pD53f5) (join-wraps . pD53f4) (id->real-label . pD53f3) (same-marks? . pD53f2) (same-marks*? . pD53f1) (get-timeofday . pD53f0) (get-command-line . pD53ef) (sys-display . pD53ee) (whereis . pD53ed) (register . pD53ec) (vm-join! . pD53eb) (vm-set-value! . pD53ea) (vm? . pD53e9) (main-vm? . pD53e8) (vm-eval . pD53e7) (vm-self . pD53e6) (vm-start! . pD53e5) (make-vm . pD53e4) (mutex-try-lock! . pD53e3) (mutex-unlock! . pD53e2) (mutex-lock! . pD53e1) (mutex? . pD53e0) (make-mutex . pD53df) (condition-variable-notify-all! . pD53de) (condition-variable-notify! . pD53dd) (condition-variable-wait! . pD53dc) (make-condition-variable . pD53db) (mosh-executable-path . pD53da) (make-file-options . pD53d9) (source-info . pD53d8) (make-compiler-instruction . pD53d7) (make-instruction . pD53d6) (set-source-info! . pD53d5) (bignum? . pD53d4) (fast-equal? . pD53d3) (fasl-read . pD53d2) (fasl-write . pD53d1) (time-usage . pD53d0) (os-constant . pD53cf) (disasm . pD53ce) (make-parameter . pD28e6) (socket-port . pD53cd) (socket-shutdown . pD53cc) (socket-close . pD53cb) (socket-send . pD53ca) (socket-recv! . pD53c9) (socket-recv . pD53c8) (make-server-socket . pD53c7) (make-client-socket . pD53c6) (socket-accept . pD53c5) (socket? . pD53c4) (string-upcase . pD53c3) (string-titlecase . pD53c2) (string-normalize-nfkd . pD53c1) (string-normalize-nfkc . pD53c0) (string-normalize-nfd . pD53bf) (string-normalize-nfc . pD53be) (string-foldcase . pD53bd) (string-downcase . pD53bc) (string-ci>? . pD53bb) (string-ci>=? . pD53ba) (string-ci=? . pD53b9) (string-ci<? . pD53b8) (string-ci<=? . pD53b7) (char-whitespace? . pD53b6) (char-upper-case? . pD53b5) (char-title-case? . pD53b4) (char-numeric? . pD53b3) (char-lower-case? . pD53b2) (char-general-category . pD53b1) (char-upcase . pD53b0) (char-titlecase . pD53af) (char-foldcase . pD53ae) (char-downcase . pD53ad) (char-ci>? . pD53ac) (char-ci>=? . pD53ab) (char-ci=? . pD53aa) (char-ci<? . pD53a9) (char-ci<=? . pD53a8) (char-alphabetic? . pD53a7) (make-variable-transformer . pD2eef) (identifier? . pD31a6) (generate-temporaries . pD3192) (free-identifier=? . pD3194) (syntax->datum . pD31aa) (datum->syntax . pD31a8) (bound-identifier=? . pD3196) (record-type-descriptor? . pD53a6) (record-predicate . pD53a5) (record-mutator . pD53a4) (record-constructor . pD53a3) (record-accessor . pD53a2) (make-record-type-descriptor . pD53a1) (make-record-constructor-descriptor . pD53a0) (record? . pD539f) (record-type-uid . pD539e) (record-type-sealed? . pD539d) (record-type-parent . pD539c) (record-type-opaque? . pD539b) (record-type-name . pD539a) (record-type-generative? . pD5399) (record-type-field-names . pD5398) (record-rtd . pD5397) (record-field-mutable? . pD5396) (delete-file . pD5395) (file-exists? . pD5394) (vector-sort! . pD5393) (vector-sort . pD5392) (list-sort . pD5391) (symbol-hash . pD5390) (string-ci-hash . pD538f) (string-hash . pD538e) (equal-hash . pD538d) (hashtable-equivalence-function . pD538c) (make-hashtable . pD538b) (hashtable-hash-function . pD538a) (make-eqv-hashtable . pD5389) (make-eq-hashtable . pD5388) (hashtable? . pD5387) (hashtable-update! . pD5386) (hashtable-size . pD5385) (hashtable-set! . pD5384) (hashtable-ref . pD5383) (hashtable-mutable? . pD5382) (hashtable-keys . pD5381) (hashtable-entries . pD5380) (hashtable-delete! . pD537f) (hashtable-copy . pD537e) (hashtable-contains? . pD537d) (hashtable-clear! . pD537c) (call-with-output-file . pD537b) (call-with-input-file . pD537a) (write-char . pD5379) (write . pD5378) (with-output-to-file . pD5377) (with-input-from-file . pD5376) (read-char . pD5375) (read . pD5374) (peek-char . pD5373) (open-output-file . pD5372) (open-input-file . pD5371) (newline . pD5370) (display . pD536f) (close-output-port . pD536e) (close-input-port . pD536d) (eof-object? . pD536c) (eof-object . pD536b) (current-error-port . pD536a) (current-output-port . pD5369) (current-input-port . pD5368) (output-port? . pD5367) (input-port? . pD5366) (utf-8-codec . pD5365) (utf-16-codec . pD5364) (transcoder-error-handling-mode . pD5363) (transcoder-eol-style . pD5362) (transcoder-codec . pD5361) (transcoded-port . pD5360) (textual-port? . pD535f) (string->bytevector . pD535e) (standard-output-port . pD535d) (standard-input-port . pD535c) (standard-error-port . pD535b) (set-port-position! . pD535a) (put-u8 . pD5359) (put-string . pD5358) (put-datum . pD5357) (put-char . pD5356) (put-bytevector . pD5355) (port? . pD5354) (port-transcoder . pD5353) (port-position . pD5352) (port-has-set-port-position!? . pD5351) (port-has-port-position? . pD5350) (port-eof? . pD534f) (output-port-buffer-mode . pD534e) (open-string-output-port . pD534d) (open-string-input-port . pD534c) (open-file-output-port . pD534b) (open-file-input/output-port . pD534a) (open-file-input-port . pD5349) (open-bytevector-output-port . pD5348) (open-bytevector-input-port . pD5347) (native-transcoder . pD5346) (native-eol-style . pD5345) (make-transcoder . pD5344) (latin-1-codec . pD5343) (make-i/o-write-error . pD4dce) (make-i/o-read-error . pD4db9) (make-i/o-port-error . pD4e6f) (make-i/o-invalid-position-error . pD4de5) (make-i/o-filename-error . pD4e00) (make-i/o-file-protection-error . pD4e19) (make-i/o-file-is-read-only-error . pD4e2e) (make-i/o-file-does-not-exist-error . pD4e58) (make-i/o-file-already-exists-error . pD4e43) (make-i/o-error . pD4da4) (make-i/o-encoding-error . pD4e9f) (make-i/o-decoding-error . pD4e88) (make-custom-textual-output-port . pD5342) (make-custom-textual-input/output-port . pD5341) (make-custom-textual-input-port . pD5340) (make-custom-binary-output-port . pD533f) (make-custom-binary-input/output-port . pD533e) (make-custom-binary-input-port . pD533d) (make-bytevector . pD533c) (lookahead-u8 . pD533b) (lookahead-char . pD533a) (i/o-write-error? . pD4dd0) (i/o-read-error? . pD4dbb) (i/o-port-error? . pD4e73) (i/o-invalid-position-error? . pD4de9) (i/o-filename-error? . pD4e04) (i/o-file-protection-error? . pD4e1b) (i/o-file-is-read-only-error? . pD4e30) (i/o-file-does-not-exist-error? . pD4e5a) (i/o-file-already-exists-error? . pD4e45) (i/o-error? . pD4da6) (i/o-error-position . pD4deb) (i/o-error-port . pD4e75) (i/o-error-filename . pD4e06) (i/o-encoding-error? . pD4ea3) (i/o-encoding-error-char . pD4ea5) (i/o-decoding-error? . pD4e8a) (get-u8 . pD5339) (get-string-n! . pD5338) (get-string-n . pD5337) (get-string-all . pD5336) (get-line . pD5335) (get-datum . pD5334) (get-char . pD5333) (get-bytevector-some . pD5332) (get-bytevector-n! . pD5331) (get-bytevector-n . pD5330) (get-bytevector-all . pD532f) (flush-output-port . pD532e) (close-port . pD532d) (scheme-report-environment . pD3180) (quotient . pD532c) (null-environment . pD317e) (remainder . pD532b) (modulo . pD532a) (inexact->exact . pD5329) (force . pD5328) (exact->inexact . pD5327) (make-promise . pD5326) (exit . pD5325) (command-line . pD4fde) (string-fill! . pD5324) (string-set! . pD5323) (set-cdr! . pD5322) (set-car! . pD5321) (remove . pD5320) (remv . pD531f) (remp . pD531e) (remq . pD531d) (partition . pD531c) (memv . pD531b) (memq . pD531a) (memp . pD5319) (member . pD5318) (exists . pD5317) (for-all . pD5316) (fold-right . pD5315) (fold-left . pD5314) (find . pD5313) (filter . pD5312) (cons* . pD5311) (assv . pD5310) (assq . pD530f) (assp . pD530e) (assoc . pD530d) (call-with-string-output-port . pD530c) (call-with-port . pD530b) (call-with-bytevector-output-port . pD530a) (bytevector->string . pD5309) (buffer-mode? . pD5308) (binary-port? . pD5307) (with-exception-handler . pD5306) (raise-continuable . pD5305) (raise . pD5304) (eval . pD3184) (environment . pD317c) (make-enumeration . pD5303) (enum-set=? . pD5302) (enum-set-universe . pD5301) (enum-set-union . pD5300) (enum-set-subset? . pD52ff) (enum-set-projection . pD52fe) (enum-set-member? . pD52fd) (enum-set-intersection . pD52fc) (enum-set-indexer . pD52fb) (enum-set-difference . pD52fa) (enum-set-constructor . pD52f9) (enum-set-complement . pD52f8) (enum-set->list . pD52f7) (who-condition? . pD4d1a) (warning? . pD4c92) (violation? . pD4cd1) (undefined-violation? . pD4d91) (syntax-violation? . pD4d78) (syntax-violation-subform . pD4d7c) (syntax-violation-form . pD4d7a) (syntax-violation . pD31a4) (simple-conditions . pD52f6) (serious-condition? . pD4ca7) (non-continuable-violation? . pD4d31) (message-condition? . pD4c7b) (make-who-condition . pD4d16) (make-warning . pD4c90) (make-violation . pD4ccf) (make-undefined-violation . pD4d8f) (make-syntax-violation . pD4d72) (make-serious-condition . pD4ca5) (make-non-continuable-violation . pD4d2f) (make-message-condition . pD4c77) (make-lexical-violation . pD4d59) (make-irritants-condition . pD4cfb) (make-implementation-restriction-violation . pD4d44) (make-error . pD4cba) (make-assertion-violation . pD4ce4) (lexical-violation? . pD4d5b) (irritants-condition? . pD4cff) (implementation-restriction-violation? . pD4d46) (error? . pD4cbc) (condition-who . pD4d1c) (condition-predicate . pD52f5) (condition-message . pD4c7d) (condition-irritants . pD4d01) (condition-accessor . pD52f4) (condition . pD52f3) (assertion-violation? . pD4ce6) (condition? . pD52f2) (utf32->string . pD52f1) (utf16->string . pD52f0) (utf8->string . pD52ef) (uint-list->bytevector . pD52ee) (u8-list->bytevector . pD52ed) (string->utf8 . pD52ec) (string->utf32 . pD52eb) (string->utf16 . pD52ea) (sint-list->bytevector . pD52e9) (native-endianness . pD52e8) (bytevector? . pD52e7) (bytevector=? . pD52e6) (bytevector-uint-set! . pD52e5) (bytevector-uint-ref . pD52e4) (bytevector-u8-set! . pD52e3) (bytevector-u8-ref . pD52e2) (bytevector-u64-set! . pD52e1) (bytevector-u64-ref . pD52e0) (bytevector-u64-native-set! . pD52df) (bytevector-u64-native-ref . pD52de) (bytevector-u32-set! . pD52dd) (bytevector-u32-ref . pD52dc) (bytevector-u32-native-set! . pD52db) (bytevector-u32-native-ref . pD52da) (bytevector-u16-set! . pD52d9) (bytevector-u16-ref . pD52d8) (bytevector-u16-native-set! . pD52d7) (bytevector-u16-native-ref . pD52d6) (bytevector-sint-set! . pD52d5) (bytevector-sint-ref . pD52d4) (bytevector-s8-set! . pD52d3) (bytevector-s8-ref . pD52d2) (bytevector-s64-set! . pD52d1) (bytevector-s64-ref . pD52d0) (bytevector-s64-native-set! . pD52cf) (bytevector-s64-native-ref . pD52ce) (bytevector-s32-set! . pD52cd) (bytevector-s32-ref . pD52cc) (bytevector-s32-native-set! . pD52cb) (bytevector-s32-native-ref . pD52ca) (bytevector-s16-set! . pD52c9) (bytevector-s16-ref . pD52c8) (bytevector-s16-native-set! . pD52c7) (bytevector-s16-native-ref . pD52c6) (bytevector-length . pD52c5) (bytevector-ieee-single-ref . pD52c4) (bytevector-ieee-single-set! . pD52c3) (bytevector-ieee-single-native-set! . pD52c2) (bytevector-ieee-single-native-ref . pD52c1) (bytevector-ieee-double-set! . pD52c0) (bytevector-ieee-double-ref . pD52bf) (bytevector-ieee-double-native-set! . pD52be) (bytevector-ieee-double-native-ref . pD52bd) (bytevector-fill! . pD52bc) (bytevector-copy! . pD52bb) (bytevector-copy . pD52ba) (bytevector->uint-list . pD52b9) (bytevector->u8-list . pD52b8) (bytevector->sint-list . pD52b7) (no-nans-violation? . pD4ecf) (no-infinities-violation? . pD4eba) (make-no-nans-violation . pD4ecd) (make-no-infinities-violation . pD4eb8) (real->flonum . pD52b6) (flzero? . pD52b5) (fltruncate . pD52b4) (fltan . pD52b3) (flsqrt . pD52b2) (flsin . pD52b1) (flround . pD52b0) (flpositive? . pD52af) (flonum? . pD52ae) (flodd? . pD52ad) (flnumerator . pD52ac) (flnegative? . pD52ab) (flnan? . pD52aa) (flmod0 . pD52a9) (flmod . pD52a8) (flmin . pD52a7) (flmax . pD52a6) (fllog . pD52a5) (flinteger? . pD52a4) (flinfinite? . pD52a3) (flfloor . pD52a2) (flfinite? . pD52a1) (flexpt . pD52a0) (flexp . pD529f) (fleven? . pD529e) (fldiv0-and-mod0 . pD529d) (fldiv0 . pD529c) (fldiv-and-mod . pD529b) (fldiv . pD529a) (fldenominator . pD5299) (flcos . pD5298) (flceiling . pD5297) (flatan . pD5296) (flasin . pD5295) (flacos . pD5294) (flabs . pD5293) (fl>? . pD5292) (fl>=? . pD5291) (fl=? . pD5290) (fl<? . pD528f) (fl<=? . pD528e) (fl/ . pD528d) (fl- . pD528c) (fl+ . pD528b) (fl* . pD528a) (fixnum->flonum . pD5289) (fxzero? . pD5288) (fxxor . pD5287) (fxrotate-bit-field . pD5286) (fxreverse-bit-field . pD5285) (fxpositive? . pD5284) (fxodd? . pD5283) (fxnot . pD5282) (fxnegative? . pD5281) (fxmod0 . pD5280) (fxmod . pD527f) (fxmin . pD527e) (fxmax . pD527d) (fxlength . pD527c) (fxior . pD527b) (fxif . pD527a) (fxfirst-bit-set . pD5279) (fxeven? . pD5278) (fxdiv0-and-mod0 . pD5277) (fxdiv0 . pD5276) (fxdiv-and-mod . pD5275) (fxdiv . pD5274) (fxcopy-bit-field . pD5273) (fxcopy-bit . pD5272) (fxbit-set? . pD5271) (fxbit-field . pD5270) (fxbit-count . pD526f) (fxarithmetic-shift-right . pD526e) (fxarithmetic-shift-left . pD526d) (fxarithmetic-shift . pD526c) (fxand . pD526b) (fx>? . pD526a) (fx>=? . pD5269) (fx=? . pD5268) (fx<? . pD5267) (fx<=? . pD5266) (fx-/carry . pD5265) (fx- . pD5264) (fx+/carry . pD5263) (fx+ . pD5262) (fx*/carry . pD5261) (fx* . pD5260) (greatest-fixnum . pD525f) (least-fixnum . pD525e) (fixnum-width . pD525d) (fixnum? . pD525c) (bitwise-rotate-bit-field . pD525b) (bitwise-reverse-bit-field . pD525a) (bitwise-length . pD5259) (bitwise-if . pD5258) (bitwise-first-bit-set . pD5257) (bitwise-copy-bit-field . pD5256) (bitwise-copy-bit . pD5255) (bitwise-bit-set? . pD5254) (bitwise-bit-field . pD5253) (bitwise-bit-count . pD5252) (bitwise-xor . pD5251) (bitwise-ior . pD5250) (bitwise-and . pD524f) (bitwise-not . pD524e) (bitwise-arithmetic-shift-right . pD524d) (bitwise-arithmetic-shift-left . pD524c) (bitwise-arithmetic-shift . pD524b) (zero? . pD524a) (vector? . pD5249) (vector-set! . pD5248) (vector-ref . pD5247) (vector-map . pD5246) (vector-length . pD5245) (vector-for-each . pD5244) (vector-fill! . pD5243) (vector->list . pD5242) (vector . pD5241) (values . pD5240) (truncate . pD523f) (tan . pD523e) (symbol? . pD523d) (symbol=? . pD523c) (symbol->string . pD523b) (substring . pD523a) (string? . pD5239) (string>? . pD5238) (string>=? . pD5237) (string=? . pD5236) (string<? . pD5235) (string<=? . pD5234) (string-ref . pD5233) (string-length . pD5232) (string-for-each . pD5231) (string-copy . pD5230) (string-append . pD522f) (string->symbol . pD522e) (string->number . pD522d) (string->list . pD522c) (string . pD522b) (sqrt . pD522a) (sin . pD5229) (round . pD5228) (reverse . pD5227) (real? . pD5226) (real-valued? . pD5225) (real-part . pD5224) (rationalize . pD5223) (rational? . pD5222) (rational-valued? . pD5221) (procedure? . pD5220) (positive? . pD521f) (pair? . pD521e) (odd? . pD521d) (numerator . pD521c) (number? . pD521b) (number->string . pD521a) (null? . pD5219) (not . pD5218) (negative? . pD5217) (nan? . pD5216) (min . pD5215) (max . pD5214) (map . pD5213) (make-vector . pD5212) (make-string . pD5211) (make-rectangular . pD5210) (make-polar . pD520f) (magnitude . pD520e) (log . pD520d) (list? . pD520c) (list-tail . pD520b) (list-ref . pD520a) (list->vector . pD5209) (list->string . pD5208) (list . pD5207) (length . pD5206) (lcm . pD5205) (integer? . pD5204) (integer-valued? . pD5203) (integer->char . pD5202) (infinite? . pD5201) (inexact? . pD5200) (inexact . pD51ff) (imag-part . pD51fe) (gcd . pD51fd) (for-each . pD51fc) (floor . pD51fb) (finite? . pD51fa) (expt . pD51f9) (exp . pD51f8) (exact? . pD51f7) (exact-integer-sqrt . pD51f6) (exact . pD51f5) (even? . pD51f4) (error . pD51f3) (eqv? . pD51f2) (equal? . pD51f1) (eq? . pD51f0) (dynamic-wind . pD51ef) (div0-and-mod0 . pD51ee) (mod0 . pD51ed) (div0 . pD51ec) (div-and-mod . pD51eb) (mod . pD51ea) (div . pD51e9) (denominator . pD51e8) (cos . pD51e7) (cons . pD51e6) (complex? . pD51e5) (char? . pD51e4) (char>? . pD51e3) (char>=? . pD51e2) (char=? . pD51e1) (char<? . pD51e0) (char<=? . pD51df) (char->integer . pD51de) (ceiling . pD51dd) (call-with-values . pD51dc) (call/cc . pD51db) (call-with-current-continuation . pD51da) (cddddr . pD51d9) (cdddar . pD51d8) (cddadr . pD51d7) (cddaar . pD51d6) (cdaddr . pD51d5) (cdadar . pD51d4) (cdaadr . pD51d3) (cdaaar . pD51d2) (cadddr . pD51d1) (caddar . pD51d0) (cadadr . pD51cf) (cadaar . pD51ce) (caaddr . pD51cd) (caadar . pD51cc) (caaadr . pD51cb) (caaaar . pD51ca) (cdddr . pD51c9) (cddar . pD51c8) (cdadr . pD51c7) (cdaar . pD51c6) (caddr . pD51c5) (cadar . pD51c4) (caadr . pD51c3) (caaar . pD51c2) (cddr . pD51c1) (cdar . pD51c0) (cadr . pD51bf) (caar . pD51be) (cdr . pD51bd) (car . pD51bc) (boolean? . pD51bb) (boolean=? . pD51ba) (atan . pD51b9) (assertion-violation . pD51b8) (assertion-error . pD319e) (asin . pD51b7) (apply . pD51b6) (append . pD51b5) (angle . pD51b4) (acos . pD51b3) (abs . pD51b2) (/ . pD51b1) (* . pD51b0) (- . pD51af) (+ . pD51ae) (>= . pD51ad) (> . pD51ac) (= . pD51ab) (<= . pD51aa) (< . pD51a9) (library . pD51a8) (&no-nans . pD51a7) (&no-infinities . pD51a6) (&i/o-encoding . pD51a5) (&i/o-decoding . pD51a4) (&i/o-port . pD51a3) (&i/o-file-does-not-exist . pD51a2) (&i/o-file-already-exists . pD51a1) (&i/o-file-is-read-only . pD51a0) (&i/o-file-protection . pD519f) (&i/o-filename . pD519e) (&i/o-invalid-position . pD519d) (&i/o-write . pD519c) (&i/o-read . pD519b) (&i/o . pD519a) (&undefined . pD5199) (&syntax . pD5198) (&lexical . pD5197) (&implementation-restriction . pD5196) (&non-continuable . pD5195) (&who . pD5194) (&irritants . pD5193) (&assertion . pD5192) (&violation . pD5191) (&error . pD5190) (&serious . pD518f) (&warning . pD518e) (&message . pD518d) (&condition . pD518c) (define-condition-type . pD518b) (define-enumeration . pD518a) (define-record-type . pD5189) (parent-rtd . pD5188) (nongenerative . pD5187) (opaque . pD5186) (sealed . pD5185) (protocol . pD5184) (parent . pD5183) (immutable . pD5182) (mutable . pD5181) (fields . pD5180) (error-handling-mode . pD517f) (file-options . pD517e) (buffer-mode . pD517d) (eol-style . pD517c) (guard . pD517b) (trace-define . pD517a) (trace-lambda . pD5179) (unsyntax-splicing . pD5178) (unsyntax . pD5177) (unquote-splicing . pD5176) (unquote . pD5175) (_ . pD5174) (else . pD5173) (=> . pD5172) (... . pD5171) (assert . pD5170) (endianness . pD516f) (delay . pD516e) (time . pD516d) (do . pD516c) (cond . pD516b) (let* . pD516a) (let*-values . pD5169) (let-values . pD5168) (identifier-syntax . pD5167) (with-syntax . pD5166) (quasisyntax . pD5165) (quasiquote . pD5164) (syntax-rules . pD5163) (include . pD5162) (define-struct . pD5161) (record-constructor-descriptor . pD5160) (record-type-descriptor . pD515f) (case . pD515e) (parameterize . pD515d) (unless . pD515c) (when . pD515b) (or . pD515a) (and . pD5159) (if . pD5158) (let . pD5157) (letrec* . pD5156) (letrec . pD5155) (type-descriptor . pD5154) (case-lambda . pD5153) (lambda . pD5152) (syntax . pD5151) (syntax-case . pD5150) (quote . pD514f) (foreign-call . pD514e) (letrec-syntax . pD514d) (let-syntax . pD514c) (set! . pD514b) (import . pD514a) (begin . pD5149) (module . pD5148) (define-syntax . pD5147) (define . pD5146)) '((pD4ed3 core-prim . &no-nans-rcd) (pD4ed1 core-prim . &no-nans-rtd) (pD4ebe core-prim . &no-infinities-rcd) (pD4ebc core-prim . &no-infinities-rtd) (pD4ea9 core-prim . &i/o-encoding-rcd) (pD4ea7 core-prim . &i/o-encoding-rtd) (pD4e8e core-prim . &i/o-decoding-rcd) (pD4e8c core-prim . &i/o-decoding-rtd) (pD4e79 core-prim . &i/o-port-rcd) (pD4e77 core-prim . &i/o-port-rtd) (pD4e5e core-prim . &i/o-file-does-not-exist-rcd) (pD4e5c core-prim . &i/o-file-does-not-exist-rtd) (pD4e49 core-prim . &i/o-file-already-exists-rcd) (pD4e47 core-prim . &i/o-file-already-exists-rtd) (pD4e34 core-prim . &i/o-file-is-read-only-rcd) (pD4e32 core-prim . &i/o-file-is-read-only-rtd) (pD4e1f core-prim . &i/o-file-protection-rcd) (pD4e1d core-prim . &i/o-file-protection-rtd) (pD4e0a core-prim . &i/o-filename-rcd) (pD4e08 core-prim . &i/o-filename-rtd) (pD4def core-prim . &i/o-invalid-position-rcd) (pD4ded core-prim . &i/o-invalid-position-rtd) (pD4dd4 core-prim . &i/o-write-rcd) (pD4dd2 core-prim . &i/o-write-rtd) (pD4dbf core-prim . &i/o-read-rcd) (pD4dbd core-prim . &i/o-read-rtd) (pD4daa core-prim . &i/o-rcd) (pD4da8 core-prim . &i/o-rtd) (pD4d95 core-prim . &undefined-rcd) (pD4d93 core-prim . &undefined-rtd) (pD4d80 core-prim . &syntax-rcd) (pD4d7e core-prim . &syntax-rtd) (pD4d5f core-prim . &lexical-rcd) (pD4d5d core-prim . &lexical-rtd) (pD4d4a core-prim . &implementation-restriction-rcd) (pD4d48 core-prim . &implementation-restriction-rtd) (pD4d35 core-prim . &non-continuable-rcd) (pD4d33 core-prim . &non-continuable-rtd) (pD4d20 core-prim . &who-rcd) (pD4d1e core-prim . &who-rtd) (pD4d05 core-prim . &irritants-rcd) (pD4d03 core-prim . &irritants-rtd) (pD4cea core-prim . &assertion-rcd) (pD4ce8 core-prim . &assertion-rtd) (pD4cd5 core-prim . &violation-rcd) (pD4cd3 core-prim . &violation-rtd) (pD4cc0 core-prim . &error-rcd) (pD4cbe core-prim . &error-rtd) (pD4cab core-prim . &serious-rcd) (pD4ca9 core-prim . &serious-rtd) (pD4c96 core-prim . &warning-rcd) (pD4c94 core-prim . &warning-rtd) (pD4c81 core-prim . &message-rcd) (pD4c7f core-prim . &message-rtd) (pD4c22 core-prim . &condition-rcd) (pD4c20 core-prim . &condition-rtd) (pD31a0 core-prim . syntax-error) (pD30c4 core-prim . syntax-dispatch) (pD5471 core-prim . pretty-print) (pD5470 core-prim . eval-core) (pD546f core-prim . set-symbol-value!) (pD546e core-prim . symbol-value) (pD546d core-prim . gensym) (pD546c core-prim . void) (pD4fe4 core-prim . load) (pD31b2 core-prim . interaction-environment) (pD546b core-prim . char-ready?) (pD546a core-prim . regexp?) (pD5469 core-prim . read-line) (pD5468 core-prim . gensym-prefix-set!) (pD5467 core-prim . ungensym) (pD5466 core-prim . alist->eq-hash-table) (pD5465 core-prim . assoc-ref) (pD5464 core-prim . print) (pD5463 core-prim . format) (pD5462 core-prim . host-os) (pD2afd core-prim . library-path) (pD5461 core-prim . standard-library-path) (pD5460 core-prim . file-newer?) (pD545f core-prim . stat-mtime) (pD545e core-prim . write-to-file) (pD545d core-prim . file->list) (pD545c core-prim . file->string) (pD545b core-prim . digit->integer) (pD545a core-prim . call-with-string-input-port) (pD5459 core-prim . call-with-string-io) (pD5458 core-prim . string-split) (pD5457 core-prim . bytevector-for-each) (pD5456 core-prim . string->regexp) (pD5455 core-prim . rxmatch) (pD5454 core-prim . regexp-replace-all) (pD5453 core-prim . hashtable-for-each) (pD28e8 core-prim . mosh-cache-dir) (pD5452 core-prim . call-process) (pD5451 core-prim . local-tz-offset) (pD5450 core-prim . microseconds) (pD544f core-prim . directory-list) (pD544e core-prim . set-current-directory!) (pD544d core-prim . expand-path) (pD544c core-prim . current-directory) (pD544b core-prim . %spawn) (pD544a core-prim . %waitpid) (pD5449 core-prim . simple-struct-name) (pD5448 core-prim . simple-struct-set!) (pD5447 core-prim . simple-struct-ref) (pD5446 core-prim . make-simple-struct) (pD5445 core-prim . simple-struct?) (pD5444 core-prim . pointer-ref-c-int64) (pD5443 core-prim . pointer-ref-c-int32) (pD5442 core-prim . pointer-ref-c-int16) (pD5441 core-prim . pointer-ref-c-int8) (pD5440 core-prim . pointer-ref-c-uint64) (pD543f core-prim . pointer-ref-c-uint32) (pD543e core-prim . pointer-ref-c-uint16) (pD543d core-prim . pointer-ref-c-uint8) (pD543c core-prim . pointer-set-c-uint64!) (pD543b core-prim . pointer-set-c-uint32!) (pD543a core-prim . pointer-set-c-uint16!) (pD5439 core-prim . pointer-set-c-uint8!) (pD5438 core-prim . pointer-set-c-int64!) (pD5437 core-prim . pointer-set-c-int32!) (pD5436 core-prim . pointer-set-c-int16!) (pD5435 core-prim . pointer-set-c-int8!) (pD5434 core-prim . pointer-set-c-pointer!) (pD5433 core-prim . pointer-set-c-double!) (pD5432 core-prim . pointer-set-c-float!) (pD5431 core-prim . pointer-set-c-long-long!) (pD5430 core-prim . pointer-set-c-long!) (pD542f core-prim . pointer-set-c-int!) (pD542e core-prim . pointer-set-c-short!) (pD542d core-prim . pointer-set-c-char!) (pD542c core-prim . pointer-ref-c-pointer) (pD542b core-prim . pointer-ref-c-double) (pD542a core-prim . pointer-ref-c-float) (pD5429 core-prim . pointer-ref-c-unsigned-long-long) (pD5428 core-prim . pointer-ref-c-signed-long-long) (pD5427 core-prim . pointer-ref-c-unsigned-long) (pD5426 core-prim . pointer-ref-c-signed-long) (pD5425 core-prim . pointer-ref-c-unsigned-int) (pD5424 core-prim . pointer-ref-c-signed-int) (pD5423 core-prim . pointer-ref-c-unsigned-short) (pD5422 core-prim . pointer-ref-c-signed-short) (pD5421 core-prim . pointer-ref-c-unsigned-char) (pD5420 core-prim . pointer-ref-c-signed-char) (pD541f core-prim . pointer->integer) (pD541e core-prim . integer->pointer) (pD541d core-prim . pointer?) (pD541c core-prim . shared-errno) (pD541b core-prim . %ffi-free-c-callback-trampoline) (pD541a core-prim . %ffi-make-c-callback-trampoline) (pD5419 core-prim . %ffi-free) (pD5418 core-prim . %ffi-malloc) (pD5417 core-prim . %ffi-supported?) (pD5416 core-prim . %ffi-pointer->string) (pD5415 core-prim . %ffi-call->string-or-zero) (pD5414 core-prim . %ffi-call->double) (pD5413 core-prim . %ffi-call->void*) (pD5412 core-prim . %ffi-call->void) (pD5411 core-prim . %ffi-call->char) (pD5410 core-prim . %ffi-call->int) (pD540f core-prim . %ffi-lookup) (pD540e core-prim . %ffi-open) (pD540d core-prim . null-terminated-utf8->string) (pD540c core-prim . null-terminated-bytevector->string) (pD540b core-prim . %fork) (pD540a core-prim . %pipe) (pD5409 core-prim . p) (pD5408 core-prim . open-output-string) (pD5407 core-prim . get-output-string) (pD5406 core-prim . file-stat-ctime) (pD5405 core-prim . file-stat-atime) (pD5404 core-prim . file-stat-mtime) (pD5403 core-prim . file-size-in-bytes) (pD5402 core-prim . file-writable?) (pD5401 core-prim . file-executable?) (pD5400 core-prim . file-readable?) (pD53ff core-prim . file-regular?) (pD53fe core-prim . file-symbolic-link?) (pD53fd core-prim . file-directory?) (pD53fc core-prim . create-symbolic-link) (pD53fb core-prim . rename-file) (pD53fa core-prim . delete-directory) (pD53f9 core-prim . create-directory) (pD53f8 core-prim . create-mosh-cache-dir) (pD53f7 core-prim . get-environment-variables) (pD53f6 core-prim . current-exception-handler) (pD53f5 core-prim . get-environment-variable) (pD53f4 core-prim . join-wraps) (pD53f3 core-prim . id->real-label) (pD53f2 core-prim . same-marks?) (pD53f1 core-prim . same-marks*?) (pD53f0 core-prim . get-timeofday) (pD53ef core-prim . get-command-line) (pD53ee core-prim . sys-display) (pD53ed core-prim . whereis) (pD53ec core-prim . register) (pD53eb core-prim . vm-join!) (pD53ea core-prim . vm-set-value!) (pD53e9 core-prim . vm?) (pD53e8 core-prim . main-vm?) (pD53e7 core-prim . vm-eval) (pD53e6 core-prim . vm-self) (pD53e5 core-prim . vm-start!) (pD53e4 core-prim . make-vm) (pD53e3 core-prim . mutex-try-lock!) (pD53e2 core-prim . mutex-unlock!) (pD53e1 core-prim . mutex-lock!) (pD53e0 core-prim . mutex?) (pD53df core-prim . make-mutex) (pD53de core-prim . condition-variable-notify-all!) (pD53dd core-prim . condition-variable-notify!) (pD53dc core-prim . condition-variable-wait!) (pD53db core-prim . make-condition-variable) (pD53da core-prim . mosh-executable-path) (pD53d9 core-prim . make-file-options) (pD53d8 core-prim . source-info) (pD53d7 core-prim . make-compiler-instruction) (pD53d6 core-prim . make-instruction) (pD53d5 core-prim . set-source-info!) (pD53d4 core-prim . bignum?) (pD53d3 core-prim . fast-equal?) (pD53d2 core-prim . fasl-read) (pD53d1 core-prim . fasl-write) (pD53d0 core-prim . time-usage) (pD53cf core-prim . os-constant) (pD53ce core-prim . disasm) (pD28e6 core-prim . make-parameter) (pD53cd core-prim . socket-port) (pD53cc core-prim . socket-shutdown) (pD53cb core-prim . socket-close) (pD53ca core-prim . socket-send) (pD53c9 core-prim . socket-recv!) (pD53c8 core-prim . socket-recv) (pD53c7 core-prim . make-server-socket) (pD53c6 core-prim . make-client-socket) (pD53c5 core-prim . socket-accept) (pD53c4 core-prim . socket?) (pD53c3 core-prim . string-upcase) (pD53c2 core-prim . string-titlecase) (pD53c1 core-prim . string-normalize-nfkd) (pD53c0 core-prim . string-normalize-nfkc) (pD53bf core-prim . string-normalize-nfd) (pD53be core-prim . string-normalize-nfc) (pD53bd core-prim . string-foldcase) (pD53bc core-prim . string-downcase) (pD53bb core-prim . string-ci>?) (pD53ba core-prim . string-ci>=?) (pD53b9 core-prim . string-ci=?) (pD53b8 core-prim . string-ci<?) (pD53b7 core-prim . string-ci<=?) (pD53b6 core-prim . char-whitespace?) (pD53b5 core-prim . char-upper-case?) (pD53b4 core-prim . char-title-case?) (pD53b3 core-prim . char-numeric?) (pD53b2 core-prim . char-lower-case?) (pD53b1 core-prim . char-general-category) (pD53b0 core-prim . char-upcase) (pD53af core-prim . char-titlecase) (pD53ae core-prim . char-foldcase) (pD53ad core-prim . char-downcase) (pD53ac core-prim . char-ci>?) (pD53ab core-prim . char-ci>=?) (pD53aa core-prim . char-ci=?) (pD53a9 core-prim . char-ci<?) (pD53a8 core-prim . char-ci<=?) (pD53a7 core-prim . char-alphabetic?) (pD2eef core-prim . make-variable-transformer) (pD31a6 core-prim . identifier?) (pD3192 core-prim . generate-temporaries) (pD3194 core-prim . free-identifier=?) (pD31aa core-prim . syntax->datum) (pD31a8 core-prim . datum->syntax) (pD3196 core-prim . bound-identifier=?) (pD53a6 core-prim . record-type-descriptor?) (pD53a5 core-prim . record-predicate) (pD53a4 core-prim . record-mutator) (pD53a3 core-prim . record-constructor) (pD53a2 core-prim . record-accessor) (pD53a1 core-prim . make-record-type-descriptor) (pD53a0 core-prim . make-record-constructor-descriptor) (pD539f core-prim . record?) (pD539e core-prim . record-type-uid) (pD539d core-prim . record-type-sealed?) (pD539c core-prim . record-type-parent) (pD539b core-prim . record-type-opaque?) (pD539a core-prim . record-type-name) (pD5399 core-prim . record-type-generative?) (pD5398 core-prim . record-type-field-names) (pD5397 core-prim . record-rtd) (pD5396 core-prim . record-field-mutable?) (pD5395 core-prim . delete-file) (pD5394 core-prim . file-exists?) (pD5393 core-prim . vector-sort!) (pD5392 core-prim . vector-sort) (pD5391 core-prim . list-sort) (pD5390 core-prim . symbol-hash) (pD538f core-prim . string-ci-hash) (pD538e core-prim . string-hash) (pD538d core-prim . equal-hash) (pD538c core-prim . hashtable-equivalence-function) (pD538b core-prim . make-hashtable) (pD538a core-prim . hashtable-hash-function) (pD5389 core-prim . make-eqv-hashtable) (pD5388 core-prim . make-eq-hashtable) (pD5387 core-prim . hashtable?) (pD5386 core-prim . hashtable-update!) (pD5385 core-prim . hashtable-size) (pD5384 core-prim . hashtable-set!) (pD5383 core-prim . hashtable-ref) (pD5382 core-prim . hashtable-mutable?) (pD5381 core-prim . hashtable-keys) (pD5380 core-prim . hashtable-entries) (pD537f core-prim . hashtable-delete!) (pD537e core-prim . hashtable-copy) (pD537d core-prim . hashtable-contains?) (pD537c core-prim . hashtable-clear!) (pD537b core-prim . call-with-output-file) (pD537a core-prim . call-with-input-file) (pD5379 core-prim . write-char) (pD5378 core-prim . write) (pD5377 core-prim . with-output-to-file) (pD5376 core-prim . with-input-from-file) (pD5375 core-prim . read-char) (pD5374 core-prim . read) (pD5373 core-prim . peek-char) (pD5372 core-prim . open-output-file) (pD5371 core-prim . open-input-file) (pD5370 core-prim . newline) (pD536f core-prim . display) (pD536e core-prim . close-output-port) (pD536d core-prim . close-input-port) (pD536c core-prim . eof-object?) (pD536b core-prim . eof-object) (pD536a core-prim . current-error-port) (pD5369 core-prim . current-output-port) (pD5368 core-prim . current-input-port) (pD5367 core-prim . output-port?) (pD5366 core-prim . input-port?) (pD5365 core-prim . utf-8-codec) (pD5364 core-prim . utf-16-codec) (pD5363 core-prim . transcoder-error-handling-mode) (pD5362 core-prim . transcoder-eol-style) (pD5361 core-prim . transcoder-codec) (pD5360 core-prim . transcoded-port) (pD535f core-prim . textual-port?) (pD535e core-prim . string->bytevector) (pD535d core-prim . standard-output-port) (pD535c core-prim . standard-input-port) (pD535b core-prim . standard-error-port) (pD535a core-prim . set-port-position!) (pD5359 core-prim . put-u8) (pD5358 core-prim . put-string) (pD5357 core-prim . put-datum) (pD5356 core-prim . put-char) (pD5355 core-prim . put-bytevector) (pD5354 core-prim . port?) (pD5353 core-prim . port-transcoder) (pD5352 core-prim . port-position) (pD5351 core-prim . port-has-set-port-position!?) (pD5350 core-prim . port-has-port-position?) (pD534f core-prim . port-eof?) (pD534e core-prim . output-port-buffer-mode) (pD534d core-prim . open-string-output-port) (pD534c core-prim . open-string-input-port) (pD534b core-prim . open-file-output-port) (pD534a core-prim . open-file-input/output-port) (pD5349 core-prim . open-file-input-port) (pD5348 core-prim . open-bytevector-output-port) (pD5347 core-prim . open-bytevector-input-port) (pD5346 core-prim . native-transcoder) (pD5345 core-prim . native-eol-style) (pD5344 core-prim . make-transcoder) (pD5343 core-prim . latin-1-codec) (pD4dce core-prim . make-i/o-write-error) (pD4db9 core-prim . make-i/o-read-error) (pD4e6f core-prim . make-i/o-port-error) (pD4de5 core-prim . make-i/o-invalid-position-error) (pD4e00 core-prim . make-i/o-filename-error) (pD4e19 core-prim . make-i/o-file-protection-error) (pD4e2e core-prim . make-i/o-file-is-read-only-error) (pD4e58 core-prim . make-i/o-file-does-not-exist-error) (pD4e43 core-prim . make-i/o-file-already-exists-error) (pD4da4 core-prim . make-i/o-error) (pD4e9f core-prim . make-i/o-encoding-error) (pD4e88 core-prim . make-i/o-decoding-error) (pD5342 core-prim . make-custom-textual-output-port) (pD5341 core-prim . make-custom-textual-input/output-port) (pD5340 core-prim . make-custom-textual-input-port) (pD533f core-prim . make-custom-binary-output-port) (pD533e core-prim . make-custom-binary-input/output-port) (pD533d core-prim . make-custom-binary-input-port) (pD533c core-prim . make-bytevector) (pD533b core-prim . lookahead-u8) (pD533a core-prim . lookahead-char) (pD4dd0 core-prim . i/o-write-error?) (pD4dbb core-prim . i/o-read-error?) (pD4e73 core-prim . i/o-port-error?) (pD4de9 core-prim . i/o-invalid-position-error?) (pD4e04 core-prim . i/o-filename-error?) (pD4e1b core-prim . i/o-file-protection-error?) (pD4e30 core-prim . i/o-file-is-read-only-error?) (pD4e5a core-prim . i/o-file-does-not-exist-error?) (pD4e45 core-prim . i/o-file-already-exists-error?) (pD4da6 core-prim . i/o-error?) (pD4deb core-prim . i/o-error-position) (pD4e75 core-prim . i/o-error-port) (pD4e06 core-prim . i/o-error-filename) (pD4ea3 core-prim . i/o-encoding-error?) (pD4ea5 core-prim . i/o-encoding-error-char) (pD4e8a core-prim . i/o-decoding-error?) (pD5339 core-prim . get-u8) (pD5338 core-prim . get-string-n!) (pD5337 core-prim . get-string-n) (pD5336 core-prim . get-string-all) (pD5335 core-prim . get-line) (pD5334 core-prim . get-datum) (pD5333 core-prim . get-char) (pD5332 core-prim . get-bytevector-some) (pD5331 core-prim . get-bytevector-n!) (pD5330 core-prim . get-bytevector-n) (pD532f core-prim . get-bytevector-all) (pD532e core-prim . flush-output-port) (pD532d core-prim . close-port) (pD3180 core-prim . scheme-report-environment) (pD532c core-prim . quotient) (pD317e core-prim . null-environment) (pD532b core-prim . remainder) (pD532a core-prim . modulo) (pD5329 core-prim . inexact->exact) (pD5328 core-prim . force) (pD5327 core-prim . exact->inexact) (pD5326 core-prim . make-promise) (pD5325 core-prim . exit) (pD4fde core-prim . command-line) (pD5324 core-prim . string-fill!) (pD5323 core-prim . string-set!) (pD5322 core-prim . set-cdr!) (pD5321 core-prim . set-car!) (pD5320 core-prim . remove) (pD531f core-prim . remv) (pD531e core-prim . remp) (pD531d core-prim . remq) (pD531c core-prim . partition) (pD531b core-prim . memv) (pD531a core-prim . memq) (pD5319 core-prim . memp) (pD5318 core-prim . member) (pD5317 core-prim . exists) (pD5316 core-prim . for-all) (pD5315 core-prim . fold-right) (pD5314 core-prim . fold-left) (pD5313 core-prim . find) (pD5312 core-prim . filter) (pD5311 core-prim . cons*) (pD5310 core-prim . assv) (pD530f core-prim . assq) (pD530e core-prim . assp) (pD530d core-prim . assoc) (pD530c core-prim . call-with-string-output-port) (pD530b core-prim . call-with-port) (pD530a core-prim . call-with-bytevector-output-port) (pD5309 core-prim . bytevector->string) (pD5308 core-prim . buffer-mode?) (pD5307 core-prim . binary-port?) (pD5306 core-prim . with-exception-handler) (pD5305 core-prim . raise-continuable) (pD5304 core-prim . raise) (pD3184 core-prim . eval) (pD317c core-prim . environment) (pD5303 core-prim . make-enumeration) (pD5302 core-prim . enum-set=?) (pD5301 core-prim . enum-set-universe) (pD5300 core-prim . enum-set-union) (pD52ff core-prim . enum-set-subset?) (pD52fe core-prim . enum-set-projection) (pD52fd core-prim . enum-set-member?) (pD52fc core-prim . enum-set-intersection) (pD52fb core-prim . enum-set-indexer) (pD52fa core-prim . enum-set-difference) (pD52f9 core-prim . enum-set-constructor) (pD52f8 core-prim . enum-set-complement) (pD52f7 core-prim . enum-set->list) (pD4d1a core-prim . who-condition?) (pD4c92 core-prim . warning?) (pD4cd1 core-prim . violation?) (pD4d91 core-prim . undefined-violation?) (pD4d78 core-prim . syntax-violation?) (pD4d7c core-prim . syntax-violation-subform) (pD4d7a core-prim . syntax-violation-form) (pD31a4 core-prim . syntax-violation) (pD52f6 core-prim . simple-conditions) (pD4ca7 core-prim . serious-condition?) (pD4d31 core-prim . non-continuable-violation?) (pD4c7b core-prim . message-condition?) (pD4d16 core-prim . make-who-condition) (pD4c90 core-prim . make-warning) (pD4ccf core-prim . make-violation) (pD4d8f core-prim . make-undefined-violation) (pD4d72 core-prim . make-syntax-violation) (pD4ca5 core-prim . make-serious-condition) (pD4d2f core-prim . make-non-continuable-violation) (pD4c77 core-prim . make-message-condition) (pD4d59 core-prim . make-lexical-violation) (pD4cfb core-prim . make-irritants-condition) (pD4d44 core-prim . make-implementation-restriction-violation) (pD4cba core-prim . make-error) (pD4ce4 core-prim . make-assertion-violation) (pD4d5b core-prim . lexical-violation?) (pD4cff core-prim . irritants-condition?) (pD4d46 core-prim . implementation-restriction-violation?) (pD4cbc core-prim . error?) (pD4d1c core-prim . condition-who) (pD52f5 core-prim . condition-predicate) (pD4c7d core-prim . condition-message) (pD4d01 core-prim . condition-irritants) (pD52f4 core-prim . condition-accessor) (pD52f3 core-prim . condition) (pD4ce6 core-prim . assertion-violation?) (pD52f2 core-prim . condition?) (pD52f1 core-prim . utf32->string) (pD52f0 core-prim . utf16->string) (pD52ef core-prim . utf8->string) (pD52ee core-prim . uint-list->bytevector) (pD52ed core-prim . u8-list->bytevector) (pD52ec core-prim . string->utf8) (pD52eb core-prim . string->utf32) (pD52ea core-prim . string->utf16) (pD52e9 core-prim . sint-list->bytevector) (pD52e8 core-prim . native-endianness) (pD52e7 core-prim . bytevector?) (pD52e6 core-prim . bytevector=?) (pD52e5 core-prim . bytevector-uint-set!) (pD52e4 core-prim . bytevector-uint-ref) (pD52e3 core-prim . bytevector-u8-set!) (pD52e2 core-prim . bytevector-u8-ref) (pD52e1 core-prim . bytevector-u64-set!) (pD52e0 core-prim . bytevector-u64-ref) (pD52df core-prim . bytevector-u64-native-set!) (pD52de core-prim . bytevector-u64-native-ref) (pD52dd core-prim . bytevector-u32-set!) (pD52dc core-prim . bytevector-u32-ref) (pD52db core-prim . bytevector-u32-native-set!) (pD52da core-prim . bytevector-u32-native-ref) (pD52d9 core-prim . bytevector-u16-set!) (pD52d8 core-prim . bytevector-u16-ref) (pD52d7 core-prim . bytevector-u16-native-set!) (pD52d6 core-prim . bytevector-u16-native-ref) (pD52d5 core-prim . bytevector-sint-set!) (pD52d4 core-prim . bytevector-sint-ref) (pD52d3 core-prim . bytevector-s8-set!) (pD52d2 core-prim . bytevector-s8-ref) (pD52d1 core-prim . bytevector-s64-set!) (pD52d0 core-prim . bytevector-s64-ref) (pD52cf core-prim . bytevector-s64-native-set!) (pD52ce core-prim . bytevector-s64-native-ref) (pD52cd core-prim . bytevector-s32-set!) (pD52cc core-prim . bytevector-s32-ref) (pD52cb core-prim . bytevector-s32-native-set!) (pD52ca core-prim . bytevector-s32-native-ref) (pD52c9 core-prim . bytevector-s16-set!) (pD52c8 core-prim . bytevector-s16-ref) (pD52c7 core-prim . bytevector-s16-native-set!) (pD52c6 core-prim . bytevector-s16-native-ref) (pD52c5 core-prim . bytevector-length) (pD52c4 core-prim . bytevector-ieee-single-ref) (pD52c3 core-prim . bytevector-ieee-single-set!) (pD52c2 core-prim . bytevector-ieee-single-native-set!) (pD52c1 core-prim . bytevector-ieee-single-native-ref) (pD52c0 core-prim . bytevector-ieee-double-set!) (pD52bf core-prim . bytevector-ieee-double-ref) (pD52be core-prim . bytevector-ieee-double-native-set!) (pD52bd core-prim . bytevector-ieee-double-native-ref) (pD52bc core-prim . bytevector-fill!) (pD52bb core-prim . bytevector-copy!) (pD52ba core-prim . bytevector-copy) (pD52b9 core-prim . bytevector->uint-list) (pD52b8 core-prim . bytevector->u8-list) (pD52b7 core-prim . bytevector->sint-list) (pD4ecf core-prim . no-nans-violation?) (pD4eba core-prim . no-infinities-violation?) (pD4ecd core-prim . make-no-nans-violation) (pD4eb8 core-prim . make-no-infinities-violation) (pD52b6 core-prim . real->flonum) (pD52b5 core-prim . flzero?) (pD52b4 core-prim . fltruncate) (pD52b3 core-prim . fltan) (pD52b2 core-prim . flsqrt) (pD52b1 core-prim . flsin) (pD52b0 core-prim . flround) (pD52af core-prim . flpositive?) (pD52ae core-prim . flonum?) (pD52ad core-prim . flodd?) (pD52ac core-prim . flnumerator) (pD52ab core-prim . flnegative?) (pD52aa core-prim . flnan?) (pD52a9 core-prim . flmod0) (pD52a8 core-prim . flmod) (pD52a7 core-prim . flmin) (pD52a6 core-prim . flmax) (pD52a5 core-prim . fllog) (pD52a4 core-prim . flinteger?) (pD52a3 core-prim . flinfinite?) (pD52a2 core-prim . flfloor) (pD52a1 core-prim . flfinite?) (pD52a0 core-prim . flexpt) (pD529f core-prim . flexp) (pD529e core-prim . fleven?) (pD529d core-prim . fldiv0-and-mod0) (pD529c core-prim . fldiv0) (pD529b core-prim . fldiv-and-mod) (pD529a core-prim . fldiv) (pD5299 core-prim . fldenominator) (pD5298 core-prim . flcos) (pD5297 core-prim . flceiling) (pD5296 core-prim . flatan) (pD5295 core-prim . flasin) (pD5294 core-prim . flacos) (pD5293 core-prim . flabs) (pD5292 core-prim . fl>?) (pD5291 core-prim . fl>=?) (pD5290 core-prim . fl=?) (pD528f core-prim . fl<?) (pD528e core-prim . fl<=?) (pD528d core-prim . fl/) (pD528c core-prim . fl-) (pD528b core-prim . fl+) (pD528a core-prim . fl*) (pD5289 core-prim . fixnum->flonum) (pD5288 core-prim . fxzero?) (pD5287 core-prim . fxxor) (pD5286 core-prim . fxrotate-bit-field) (pD5285 core-prim . fxreverse-bit-field) (pD5284 core-prim . fxpositive?) (pD5283 core-prim . fxodd?) (pD5282 core-prim . fxnot) (pD5281 core-prim . fxnegative?) (pD5280 core-prim . fxmod0) (pD527f core-prim . fxmod) (pD527e core-prim . fxmin) (pD527d core-prim . fxmax) (pD527c core-prim . fxlength) (pD527b core-prim . fxior) (pD527a core-prim . fxif) (pD5279 core-prim . fxfirst-bit-set) (pD5278 core-prim . fxeven?) (pD5277 core-prim . fxdiv0-and-mod0) (pD5276 core-prim . fxdiv0) (pD5275 core-prim . fxdiv-and-mod) (pD5274 core-prim . fxdiv) (pD5273 core-prim . fxcopy-bit-field) (pD5272 core-prim . fxcopy-bit) (pD5271 core-prim . fxbit-set?) (pD5270 core-prim . fxbit-field) (pD526f core-prim . fxbit-count) (pD526e core-prim . fxarithmetic-shift-right) (pD526d core-prim . fxarithmetic-shift-left) (pD526c core-prim . fxarithmetic-shift) (pD526b core-prim . fxand) (pD526a core-prim . fx>?) (pD5269 core-prim . fx>=?) (pD5268 core-prim . fx=?) (pD5267 core-prim . fx<?) (pD5266 core-prim . fx<=?) (pD5265 core-prim . fx-/carry) (pD5264 core-prim . fx-) (pD5263 core-prim . fx+/carry) (pD5262 core-prim . fx+) (pD5261 core-prim . fx*/carry) (pD5260 core-prim . fx*) (pD525f core-prim . greatest-fixnum) (pD525e core-prim . least-fixnum) (pD525d core-prim . fixnum-width) (pD525c core-prim . fixnum?) (pD525b core-prim . bitwise-rotate-bit-field) (pD525a core-prim . bitwise-reverse-bit-field) (pD5259 core-prim . bitwise-length) (pD5258 core-prim . bitwise-if) (pD5257 core-prim . bitwise-first-bit-set) (pD5256 core-prim . bitwise-copy-bit-field) (pD5255 core-prim . bitwise-copy-bit) (pD5254 core-prim . bitwise-bit-set?) (pD5253 core-prim . bitwise-bit-field) (pD5252 core-prim . bitwise-bit-count) (pD5251 core-prim . bitwise-xor) (pD5250 core-prim . bitwise-ior) (pD524f core-prim . bitwise-and) (pD524e core-prim . bitwise-not) (pD524d core-prim . bitwise-arithmetic-shift-right) (pD524c core-prim . bitwise-arithmetic-shift-left) (pD524b core-prim . bitwise-arithmetic-shift) (pD524a core-prim . zero?) (pD5249 core-prim . vector?) (pD5248 core-prim . vector-set!) (pD5247 core-prim . vector-ref) (pD5246 core-prim . vector-map) (pD5245 core-prim . vector-length) (pD5244 core-prim . vector-for-each) (pD5243 core-prim . vector-fill!) (pD5242 core-prim . vector->list) (pD5241 core-prim . vector) (pD5240 core-prim . values) (pD523f core-prim . truncate) (pD523e core-prim . tan) (pD523d core-prim . symbol?) (pD523c core-prim . symbol=?) (pD523b core-prim . symbol->string) (pD523a core-prim . substring) (pD5239 core-prim . string?) (pD5238 core-prim . string>?) (pD5237 core-prim . string>=?) (pD5236 core-prim . string=?) (pD5235 core-prim . string<?) (pD5234 core-prim . string<=?) (pD5233 core-prim . string-ref) (pD5232 core-prim . string-length) (pD5231 core-prim . string-for-each) (pD5230 core-prim . string-copy) (pD522f core-prim . string-append) (pD522e core-prim . string->symbol) (pD522d core-prim . string->number) (pD522c core-prim . string->list) (pD522b core-prim . string) (pD522a core-prim . sqrt) (pD5229 core-prim . sin) (pD5228 core-prim . round) (pD5227 core-prim . reverse) (pD5226 core-prim . real?) (pD5225 core-prim . real-valued?) (pD5224 core-prim . real-part) (pD5223 core-prim . rationalize) (pD5222 core-prim . rational?) (pD5221 core-prim . rational-valued?) (pD5220 core-prim . procedure?) (pD521f core-prim . positive?) (pD521e core-prim . pair?) (pD521d core-prim . odd?) (pD521c core-prim . numerator) (pD521b core-prim . number?) (pD521a core-prim . number->string) (pD5219 core-prim . null?) (pD5218 core-prim . not) (pD5217 core-prim . negative?) (pD5216 core-prim . nan?) (pD5215 core-prim . min) (pD5214 core-prim . max) (pD5213 core-prim . map) (pD5212 core-prim . make-vector) (pD5211 core-prim . make-string) (pD5210 core-prim . make-rectangular) (pD520f core-prim . make-polar) (pD520e core-prim . magnitude) (pD520d core-prim . log) (pD520c core-prim . list?) (pD520b core-prim . list-tail) (pD520a core-prim . list-ref) (pD5209 core-prim . list->vector) (pD5208 core-prim . list->string) (pD5207 core-prim . list) (pD5206 core-prim . length) (pD5205 core-prim . lcm) (pD5204 core-prim . integer?) (pD5203 core-prim . integer-valued?) (pD5202 core-prim . integer->char) (pD5201 core-prim . infinite?) (pD5200 core-prim . inexact?) (pD51ff core-prim . inexact) (pD51fe core-prim . imag-part) (pD51fd core-prim . gcd) (pD51fc core-prim . for-each) (pD51fb core-prim . floor) (pD51fa core-prim . finite?) (pD51f9 core-prim . expt) (pD51f8 core-prim . exp) (pD51f7 core-prim . exact?) (pD51f6 core-prim . exact-integer-sqrt) (pD51f5 core-prim . exact) (pD51f4 core-prim . even?) (pD51f3 core-prim . error) (pD51f2 core-prim . eqv?) (pD51f1 core-prim . equal?) (pD51f0 core-prim . eq?) (pD51ef core-prim . dynamic-wind) (pD51ee core-prim . div0-and-mod0) (pD51ed core-prim . mod0) (pD51ec core-prim . div0) (pD51eb core-prim . div-and-mod) (pD51ea core-prim . mod) (pD51e9 core-prim . div) (pD51e8 core-prim . denominator) (pD51e7 core-prim . cos) (pD51e6 core-prim . cons) (pD51e5 core-prim . complex?) (pD51e4 core-prim . char?) (pD51e3 core-prim . char>?) (pD51e2 core-prim . char>=?) (pD51e1 core-prim . char=?) (pD51e0 core-prim . char<?) (pD51df core-prim . char<=?) (pD51de core-prim . char->integer) (pD51dd core-prim . ceiling) (pD51dc core-prim . call-with-values) (pD51db core-prim . call/cc) (pD51da core-prim . call-with-current-continuation) (pD51d9 core-prim . cddddr) (pD51d8 core-prim . cdddar) (pD51d7 core-prim . cddadr) (pD51d6 core-prim . cddaar) (pD51d5 core-prim . cdaddr) (pD51d4 core-prim . cdadar) (pD51d3 core-prim . cdaadr) (pD51d2 core-prim . cdaaar) (pD51d1 core-prim . cadddr) (pD51d0 core-prim . caddar) (pD51cf core-prim . cadadr) (pD51ce core-prim . cadaar) (pD51cd core-prim . caaddr) (pD51cc core-prim . caadar) (pD51cb core-prim . caaadr) (pD51ca core-prim . caaaar) (pD51c9 core-prim . cdddr) (pD51c8 core-prim . cddar) (pD51c7 core-prim . cdadr) (pD51c6 core-prim . cdaar) (pD51c5 core-prim . caddr) (pD51c4 core-prim . cadar) (pD51c3 core-prim . caadr) (pD51c2 core-prim . caaar) (pD51c1 core-prim . cddr) (pD51c0 core-prim . cdar) (pD51bf core-prim . cadr) (pD51be core-prim . caar) (pD51bd core-prim . cdr) (pD51bc core-prim . car) (pD51bb core-prim . boolean?) (pD51ba core-prim . boolean=?) (pD51b9 core-prim . atan) (pD51b8 core-prim . assertion-violation) (pD319e core-prim . assertion-error) (pD51b7 core-prim . asin) (pD51b6 core-prim . apply) (pD51b5 core-prim . append) (pD51b4 core-prim . angle) (pD51b3 core-prim . acos) (pD51b2 core-prim . abs) (pD51b1 core-prim . /) (pD51b0 core-prim . *) (pD51af core-prim . -) (pD51ae core-prim . +) (pD51ad core-prim . >=) (pD51ac core-prim . >) (pD51ab core-prim . =) (pD51aa core-prim . <=) (pD51a9 core-prim . <) (pD51a8 core-prim . library) (pD51a7 $core-rtd &no-nans-rtd &no-nans-rcd) (pD51a6 $core-rtd &no-infinities-rtd &no-infinities-rcd) (pD51a5 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (pD51a4 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (pD51a3 $core-rtd &i/o-port-rtd &i/o-port-rcd) (pD51a2 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (pD51a1 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (pD51a0 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (pD519f $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (pD519e $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (pD519d $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (pD519c $core-rtd &i/o-write-rtd &i/o-write-rcd) (pD519b $core-rtd &i/o-read-rtd &i/o-read-rcd) (pD519a $core-rtd &i/o-rtd &i/o-rcd) (pD5199 $core-rtd &undefined-rtd &undefined-rcd) (pD5198 $core-rtd &syntax-rtd &syntax-rcd) (pD5197 $core-rtd &lexical-rtd &lexical-rcd) (pD5196 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (pD5195 $core-rtd &non-continuable-rtd &non-continuable-rcd) (pD5194 $core-rtd &who-rtd &who-rcd) (pD5193 $core-rtd &irritants-rtd &irritants-rcd) (pD5192 $core-rtd &assertion-rtd &assertion-rcd) (pD5191 $core-rtd &violation-rtd &violation-rcd) (pD5190 $core-rtd &error-rtd &error-rcd) (pD518f $core-rtd &serious-rtd &serious-rcd) (pD518e $core-rtd &warning-rtd &warning-rcd) (pD518d $core-rtd &message-rtd &message-rcd) (pD518c $core-rtd &condition-rtd &condition-rcd) (pD518b macro . define-condition-type) (pD518a macro . define-enumeration) (pD5189 macro . define-record-type) (pD5188 macro . parent-rtd) (pD5187 macro . nongenerative) (pD5186 macro . opaque) (pD5185 macro . sealed) (pD5184 macro . protocol) (pD5183 macro . parent) (pD5182 macro . immutable) (pD5181 macro . mutable) (pD5180 macro . fields) (pD517f macro . error-handling-mode) (pD517e macro . file-options) (pD517d macro . buffer-mode) (pD517c macro . eol-style) (pD517b macro . guard) (pD517a macro . trace-define) (pD5179 macro . trace-lambda) (pD5178 macro . unsyntax-splicing) (pD5177 macro . unsyntax) (pD5176 macro . unquote-splicing) (pD5175 macro . unquote) (pD5174 macro . _) (pD5173 macro . else) (pD5172 macro . =>) (pD5171 macro . ...) (pD5170 macro . assert) (pD516f macro . endianness) (pD516e macro . delay) (pD516d macro . time) (pD516c macro . do) (pD516b macro . cond) (pD516a macro . let*) (pD5169 macro . let*-values) (pD5168 macro . let-values) (pD5167 macro . identifier-syntax) (pD5166 macro . with-syntax) (pD5165 macro . quasisyntax) (pD5164 macro . quasiquote) (pD5163 macro . syntax-rules) (pD5162 macro . include) (pD5161 macro . define-struct) (pD5160 core-macro . record-constructor-descriptor) (pD515f core-macro . record-type-descriptor) (pD515e macro . case) (pD515d macro . parameterize) (pD515c macro . unless) (pD515b macro . when) (pD515a core-macro . or) (pD5159 core-macro . and) (pD5158 core-macro . if) (pD5157 core-macro . let) (pD5156 core-macro . letrec*) (pD5155 core-macro . letrec) (pD5154 core-macro . type-descriptor) (pD5153 core-macro . case-lambda) (pD5152 core-macro . lambda) (pD5151 core-macro . syntax) (pD5150 core-macro . syntax-case) (pD514f core-macro . quote) (pD514e core-macro . foreign-call) (pD514d letrec-syntax) (pD514c let-syntax) (pD514b set!) (pD514a import) (pD5149 begin) (pD5148 module) (pD5147 define-syntax) (pD5146 define)) values values '#f '#f '#f '#f) (pD2cd2@pD2b1e@install-library 'pD5492 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . pD5471) (eval-core . pD5470) (set-symbol-value! . pD546f) (symbol-value . pD546e) (gensym . pD546d) (void . pD546c)) '() values values '#f '#f '#f '#f) (pD2cd2@pD2b1e@install-library 'pD5493 '(mosh) '() '() '() '() '((set-symbol-value! . pD546f) (symbol-value . pD546e) (regexp? . pD546a) (read-line . pD5469) (ungensym . pD5467) (alist->eq-hash-table . pD5466) (assoc-ref . pD5465) (print . pD5464) (format . pD5463) (host-os . pD5462) (library-path . pD2afd) (standard-library-path . pD5461) (file-newer? . pD5460) (stat-mtime . pD545f) (digit->integer . pD545b) (call-with-string-input-port . pD545a) (call-with-string-io . pD5459) (string-split . pD5458) (bytevector-for-each . pD5457) (string->regexp . pD5456) (rxmatch . pD5455) (regexp-replace-all . pD5454) (hashtable-for-each . pD5453) (set-current-directory! . pD544e) (expand-path . pD544d) (current-directory . pD544c) (p . pD5409) (get-timeofday . pD53f0) (get-command-line . pD53ef) (sys-display . pD53ee) (whereis . pD53ed) (register . pD53ec) (vm-join! . pD53eb) (vm-set-value! . pD53ea) (vm? . pD53e9) (main-vm? . pD53e8) (vm-eval . pD53e7) (vm-self . pD53e6) (vm-start! . pD53e5) (make-vm . pD53e4) (mutex-try-lock! . pD53e3) (mutex-unlock! . pD53e2) (mutex-lock! . pD53e1) (mutex? . pD53e0) (make-mutex . pD53df) (condition-variable-notify-all! . pD53de) (condition-variable-notify! . pD53dd) (condition-variable-wait! . pD53dc) (make-condition-variable . pD53db) (mosh-executable-path . pD53da) (make-file-options . pD53d9) (source-info . pD53d8) (make-compiler-instruction . pD53d7) (make-instruction . pD53d6) (set-source-info! . pD53d5) (bignum? . pD53d4) (fast-equal? . pD53d3) (fasl-read . pD53d2) (fasl-write . pD53d1) (time-usage . pD53d0) (os-constant . pD53cf) (time . pD516d) (include . pD5162)) '() values values '#f '#f '#f '#f) (pD2cd2@pD2b1e@install-library 'pD5494 '(system) '() '() '() '() '((gensym-prefix-set! . pD5468) (write-to-file . pD545e) (file->list . pD545d) (file->string . pD545c) (mosh-cache-dir . pD28e8) (call-process . pD5452) (local-tz-offset . pD5451) (microseconds . pD5450) (directory-list . pD544f) (expand-path . pD544d) (%spawn . pD544b) (%waitpid . pD544a) (simple-struct-name . pD5449) (simple-struct-set! . pD5448) (simple-struct-ref . pD5447) (make-simple-struct . pD5446) (simple-struct? . pD5445) (pointer-ref-c-int64 . pD5444) (pointer-ref-c-int32 . pD5443) (pointer-ref-c-int16 . pD5442) (pointer-ref-c-int8 . pD5441) (pointer-ref-c-uint64 . pD5440) (pointer-ref-c-uint32 . pD543f) (pointer-ref-c-uint16 . pD543e) (pointer-ref-c-uint8 . pD543d) (pointer-set-c-uint64! . pD543c) (pointer-set-c-uint32! . pD543b) (pointer-set-c-uint16! . pD543a) (pointer-set-c-uint8! . pD5439) (pointer-set-c-int64! . pD5438) (pointer-set-c-int32! . pD5437) (pointer-set-c-int16! . pD5436) (pointer-set-c-int8! . pD5435) (pointer-set-c-pointer! . pD5434) (pointer-set-c-double! . pD5433) (pointer-set-c-float! . pD5432) (pointer-set-c-long-long! . pD5431) (pointer-set-c-long! . pD5430) (pointer-set-c-int! . pD542f) (pointer-set-c-short! . pD542e) (pointer-set-c-char! . pD542d) (pointer-ref-c-pointer . pD542c) (pointer-ref-c-double . pD542b) (pointer-ref-c-float . pD542a) (pointer-ref-c-unsigned-long-long . pD5429) (pointer-ref-c-signed-long-long . pD5428) (pointer-ref-c-unsigned-long . pD5427) (pointer-ref-c-signed-long . pD5426) (pointer-ref-c-unsigned-int . pD5425) (pointer-ref-c-signed-int . pD5424) (pointer-ref-c-unsigned-short . pD5423) (pointer-ref-c-signed-short . pD5422) (pointer-ref-c-unsigned-char . pD5421) (pointer-ref-c-signed-char . pD5420) (pointer->integer . pD541f) (integer->pointer . pD541e) (pointer? . pD541d) (shared-errno . pD541c) (%ffi-free-c-callback-trampoline . pD541b) (%ffi-make-c-callback-trampoline . pD541a) (%ffi-free . pD5419) (%ffi-malloc . pD5418) (%ffi-supported? . pD5417) (%ffi-pointer->string . pD5416) (%ffi-call->string-or-zero . pD5415) (%ffi-call->double . pD5414) (%ffi-call->void* . pD5413) (%ffi-call->void . pD5412) (%ffi-call->char . pD5411) (%ffi-call->int . pD5410) (%ffi-lookup . pD540f) (%ffi-open . pD540e) (null-terminated-utf8->string . pD540d) (null-terminated-bytevector->string . pD540c) (%fork . pD540b) (%pipe . pD540a) (open-output-string . pD5408) (get-output-string . pD5407) (file-stat-ctime . pD5406) (file-stat-atime . pD5405) (file-stat-mtime . pD5404) (file-size-in-bytes . pD5403) (file-writable? . pD5402) (file-executable? . pD5401) (file-readable? . pD5400) (file-regular? . pD53ff) (file-symbolic-link? . pD53fe) (file-directory? . pD53fd) (create-symbolic-link . pD53fc) (rename-file . pD53fb) (delete-directory . pD53fa) (create-directory . pD53f9) (create-mosh-cache-dir . pD53f8) (get-environment-variables . pD53f7) (current-exception-handler . pD53f6) (get-environment-variable . pD53f5) (join-wraps . pD53f4) (id->real-label . pD53f3) (same-marks? . pD53f2) (same-marks*? . pD53f1) (disasm . pD53ce) (make-parameter . pD28e6) (socket-port . pD53cd) (socket-shutdown . pD53cc) (socket-close . pD53cb) (socket-send . pD53ca) (socket-recv! . pD53c9) (socket-recv . pD53c8) (make-server-socket . pD53c7) (make-client-socket . pD53c6) (socket-accept . pD53c5) (socket? . pD53c4) (parameterize . pD515d)) '() values values '#f '#f '#f '#f)))
(begin (set! pD4fc9@ref (unspecified)) (set! pD4fcb@x* (unspecified)) (set! pD4fcd@add-library-path! (unspecified)) (set! pD4fcf@parse-and-add-library-path (unspecified)) (set! pD4fd1@for-each-with-index (unspecified)) (set! pD4fd3@rpad (unspecified)) (set! pD4fd5@condition-printer (unspecified)) (set! pD4fd7@record->field-alist (unspecified)) (set! pD4fd9@map-with-index (unspecified)) (set! pD4fdb@repl (unspecified)) (set! pD4fdd@trace-printer (unspecified)) (set! pD4fdf@command-line (unspecified)) (set! pD4fe1@local-library-path (unspecified)) (set! pD4fe3@load/args (unspecified)) (set! pD4fe5@load (unspecified)) (set! pD4fe7@ironscheme-build (unspecified)) (set! pD4fe9@eval-top-level (unspecified)) (set! pD4feb@compile-system-libraries (unspecified)) (set! pD4fed@compile (unspecified)) (set! pD4fef@compile->closure (unspecified)) (set! pD4ff1@pre-compile-r6rs-file (unspecified)) (set! pD4ff3@load-r6rs-top-level (unspecified)) (set! pD4ff5@load-r6rs-top-level-sexp (unspecified)) (set! pD4ff7@prefix-inc (unspecified)) (set! pD4ff9@prefix-inc! (unspecified)) (set! pD4fc9@ref (lambda (pD5034@rtd pD5035@i pD5036@x) (let ((pD503a@val ((record-accessor pD5034@rtd pD5035@i) pD5036@x))) (if (symbol? pD503a@val) (ungensym pD503a@val) pD503a@val)))) (set! pD512c@pD4fc9@ref pD4fc9@ref) (set! pD4fcb@x* '()) (set! pD512d@pD4fcb@x* pD4fcb@x*) (set! pD4fcd@add-library-path! (lambda (pD503c@path) (pD2cc2@pD2afe@library-path (append (pD2cc2@pD2afe@library-path) (list pD503c@path))))) (set! pD512e@pD4fcd@add-library-path! pD4fcd@add-library-path!) (set! pD4fcf@parse-and-add-library-path (lambda (pD503e@paths pD503f@message) (let ((pD5043@separator '#f)) (begin (set! pD5043@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((pD5044@t pD503e@paths)) (if pD5044@t ((lambda (pD5046@paths) (for-each (lambda (pD5048@path) (if (file-exists? pD5048@path) (pD4fcd@add-library-path! (expand-path pD5048@path)) (format (current-error-port) pD503f@message pD5048@path))) (string-split pD5046@paths pD5043@separator))) pD5044@t) (void))))))) (set! pD512f@pD4fcf@parse-and-add-library-path pD4fcf@parse-and-add-library-path) (set! pD4fd1@for-each-with-index (lambda (pD504a@proc pD504b@lst) (letrec ((pD504e@loop (lambda (pD5050@i pD5051@lst) (if (null? pD5051@lst) (if '#f '#f (void)) (begin (pD504a@proc pD5050@i (car pD5051@lst)) (pD504e@loop (+ pD5050@i '1) (cdr pD5051@lst))))))) (pD504e@loop '1 pD504b@lst)))) (set! pD5130@pD4fd1@for-each-with-index pD4fd1@for-each-with-index) (set! pD4fd3@rpad (lambda (pD5054@str pD5055@pad pD5056@n) (let ((pD505a@rest (- pD5056@n (string-length (format '"~a" pD5054@str))))) (let pD5060@loop ((pD505c@rest pD505a@rest) (pD505d@ret (format '"~a" pD5054@str))) (if (<= pD505c@rest '0) pD505d@ret (pD5060@loop (- pD505c@rest '1) (string-append pD505d@ret pD5055@pad))))))) (set! pD5131@pD4fd3@rpad pD4fd3@rpad) (set! pD4fd5@condition-printer (lambda (pD5062@e pD5063@port) (let ((pD5067@max-condition-len '#f)) (begin (set! pD5067@max-condition-len (apply max (map (lambda (pD5078@c) (string-length (symbol->string (record-type-name (record-rtd pD5078@c))))) (simple-conditions pD5062@e)))) (begin (display '" Condition components:\n" pD5063@port) (pD4fd1@for-each-with-index (lambda (pD5068@i pD5069@x) (let ((pD506c@rtd (record-rtd pD5069@x)) (pD506d@fields-alist (pD4fd7@record->field-alist pD5069@x))) (begin (format pD5063@port '" ~d. ~a" pD5068@i (pD4fd3@rpad (symbol->string (record-type-name pD506c@rtd)) '" " pD5067@max-condition-len)) (if (null? pD506d@fields-alist) (newline pD5063@port) (void)) (let pD5074@loop ((pD5070@first '#t) (pD5071@fields-alist pD506d@fields-alist)) (if (null? pD5071@fields-alist) '() (let ((pD5076@field (car pD5071@fields-alist))) (begin (if (not pD5070@first) (display (pD4fd3@rpad '"" '" " (+ '4 pD5067@max-condition-len)) pD5063@port) (void)) (display '"       " pD5063@port) (display (car pD5076@field) pD5063@port) (display '": " pD5063@port) (write (cdr pD5076@field) pD5063@port) (newline pD5063@port) (pD5074@loop '#f (cdr pD5071@fields-alist))))))))) (simple-conditions pD5062@e))))))) (set! pD5132@pD4fd5@condition-printer pD4fd5@condition-printer) (set! pD4fd7@record->field-alist (lambda (pD507a@r) (let ((pD507d@ref '#f)) (begin (set! pD507d@ref (lambda (pD5088@rtd pD5089@i pD508a@x) (let ((pD508e@val ((record-accessor pD5088@rtd pD5089@i) pD508a@x))) (if (symbol? pD508e@val) (ungensym pD508e@val) pD508e@val)))) (let pD5082@loop ((pD507e@ret '()) (pD507f@rtd (record-rtd pD507a@r))) (if pD507f@rtd (pD5082@loop (append pD507e@ret (pD4fd9@map-with-index (lambda (pD5084@i pD5085@field) (cons pD5085@field (pD507d@ref pD507f@rtd pD5084@i pD507a@r))) (vector->list (record-type-field-names pD507f@rtd)))) (record-type-parent pD507f@rtd)) pD507e@ret)))))) (set! pD5133@pD4fd7@record->field-alist pD4fd7@record->field-alist) (set! pD4fd9@map-with-index (lambda (pD5090@proc pD5091@lst) (let pD509a@loop ((pD5094@i '0) (pD5095@lst pD5091@lst) (pD5096@ret '())) (if (null? pD5095@lst) (reverse pD5096@ret) (pD509a@loop (+ pD5094@i '1) (cdr pD5095@lst) (cons (pD5090@proc pD5094@i (car pD5095@lst)) pD5096@ret)))))) (set! pD5134@pD4fd9@map-with-index pD4fd9@map-with-index) (set! pD4fdb@repl (lambda pD509c@x (let ((pD509f@rec '#f)) (begin (set! pD509f@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (pD50a2@pD50a0) (lambda () (with-exception-handler (lambda (pD50a4@e) ((call/cc (lambda (pD50a6@pD50a1) (pD50a2@pD50a0 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? pD50a4@e) (pD4fd5@condition-printer pD50a4@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" pD50a4@e))) (pD50a6@pD50a1 (lambda () (raise-continuable pD50a4@e)))))))))) (lambda () (let pD50ac@loop ((pD50a8@line (get-line (current-input-port))) (pD50a9@accum '"")) (let ((pD50af@parentheses-ok? '#f) (pD50b1@eval-string-print '#f)) (begin (set! pD50af@parentheses-ok? (lambda (pD50b6@text) (let pD50be@loop ((pD50b8@chars (string->list pD50b6@text)) (pD50b9@p0 '0) (pD50ba@p1 '0)) (if (null? pD50b8@chars) (= '0 pD50b9@p0 pD50ba@p1) (let ((pD50c0@t (car pD50b8@chars))) (if (memv pD50c0@t '(#\()) (pD50be@loop (cdr pD50b8@chars) (+ pD50b9@p0 '1) pD50ba@p1) (if (memv pD50c0@t '(#\))) (pD50be@loop (cdr pD50b8@chars) (- pD50b9@p0 '1) pD50ba@p1) (if (memv pD50c0@t '(#\[)) (pD50be@loop (cdr pD50b8@chars) pD50b9@p0 (+ pD50ba@p1 '1)) (if (memv pD50c0@t '(#\])) (pD50be@loop (cdr pD50b8@chars) pD50b9@p0 (- pD50ba@p1 '1)) (pD50be@loop (cdr pD50b8@chars) pD50b9@p0 pD50ba@p1)))))))))) (set! pD50b1@eval-string-print (lambda (pD50b4@text) (if (not (or (string=? '"\n" pD50b4@text) (= '0 (string-length pD50b4@text)))) (write (pD4fe9@eval-top-level (call-with-port (open-string-input-port pD50b4@text) read))) (void)))) (if (eof-object? pD50a8@line) (begin (pD50b1@eval-string-print pD50a9@accum) (exit)) (let ((pD50b2@current (string-append pD50a9@accum pD50a8@line))) (if (pD50af@parentheses-ok? pD50b2@current) (pD50b1@eval-string-print pD50b2@current) (pD50ac@loop (get-line (current-input-port)) pD50b2@current))))))))))))) (newline) (pD509f@rec)))) (pD509f@rec))))) (set! pD5135@pD4fdb@repl pD4fdb@repl) (set! pD4fdd@trace-printer (pD2a08@pD28e7@make-parameter write)) (set! pD5136@pD4fdd@trace-printer pD4fdd@trace-printer) (set! pD4fdf@command-line (pD2a08@pD28e7@make-parameter (get-command-line))) (set! pD5137@pD4fdf@command-line pD4fdf@command-line) (set! pD4fe1@local-library-path (lambda (pD50c2@filename) (pD2cc2@pD2afe@library-path))) (set! pD5138@pD4fe1@local-library-path pD4fe1@local-library-path) (set! pD4fe3@load/args (lambda (pD50c4@filename . pD50c6@args) (begin (apply pD4ff3@load-r6rs-top-level pD50c4@filename 'load pD50c6@args) (void)))) (set! pD5139@pD4fe3@load/args pD4fe3@load/args) (set! pD4fe5@load (lambda (pD50c8@filename) (begin (apply pD4ff3@load-r6rs-top-level pD50c8@filename 'load (pD4fdf@command-line)) (void)))) (set! pD513a@pD4fe5@load pD4fe5@load) (set! pD4fe7@ironscheme-build (lambda () (pD4fe5@load '"ironscheme-buildscript.ss"))) (set! pD513b@pD4fe7@ironscheme-build pD4fe7@ironscheme-build) (set! pD4fe9@eval-top-level (lambda (pD50ca@x) (pD4bef@pD3185@eval pD50ca@x (pD4c06@pD31b3@interaction-environment)))) (set! pD513c@pD4fe9@eval-top-level pD4fe9@eval-top-level) (set! pD4feb@compile-system-libraries (lambda () (pD4fe9@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! pD513d@pD4feb@compile-system-libraries pD4feb@compile-system-libraries) (set! pD4fed@compile (lambda (pD50cc@filename) (pD4ff3@load-r6rs-top-level pD50cc@filename 'compile))) (set! pD513e@pD4fed@compile pD4fed@compile) (set! pD4fef@compile->closure (lambda (pD50ce@filename) (pD4ff3@load-r6rs-top-level pD50ce@filename 'closure))) (set! pD513f@pD4fef@compile->closure pD4fef@compile->closure) (set! pD4ff1@pre-compile-r6rs-file (lambda (pD50d0@filename) (pD4ff3@load-r6rs-top-level pD50d0@filename 'compile))) (set! pD5140@pD4ff1@pre-compile-r6rs-file pD4ff1@pre-compile-r6rs-file) (set! pD4ff3@load-r6rs-top-level (lambda (pD50d2@filename pD50d3@how . pD50d6@args) (begin (pD2cc2@pD2afe@library-path (pD4fe1@local-library-path pD50d2@filename)) (let ((pD50d8@x* (with-input-from-file pD50d2@filename (lambda () (let pD50da@f () (let ((pD50dc@x (pD29fb@pD28cd@read-annotated))) (if (eof-object? pD50dc@x) '() (cons pD50dc@x (pD50da@f))))))))) (let ((pD50de@t pD50d3@how)) (if (memv pD50de@t '(closure)) (pD4c05@pD31b1@pre-compile-r6rs-top-level pD50d8@x*) (if (memv pD50de@t '(load)) (begin (pD4fdf@command-line (cons pD50d2@filename (car pD50d6@args))) (pD2a09@pD28e9@mosh-cache-dir (create-mosh-cache-dir)) (if (pD2a09@pD28e9@mosh-cache-dir) (gensym-prefix-set! (pD4ff9@prefix-inc! (string-append (pD2a09@pD28e9@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (pD50e0@file) ((call/cc (lambda (pD50e4@pD50e2) (lambda () (with-exception-handler (lambda (pD50e6@c) ((call/cc (lambda (pD50e8@pD50e3) (pD50e4@pD50e2 (lambda () (if '#t '#t (pD50e8@pD50e3 (lambda () (raise-continuable pD50e6@c)))))))))) (lambda () (delete-file (string-append (pD2a09@pD28e9@mosh-cache-dir) '"/" pD50e0@file))))))))) (directory-list (pD2a09@pD28e9@mosh-cache-dir))) (void)) (let ((pD50ea@compiled (pD4c04@pD31af@compile-r6rs-top-level pD50d8@x*))) (begin (if (and (pD2a09@pD28e9@mosh-cache-dir) (not (symbol-value '%disable-acc))) (pD2cc6@pD2b06@serialize-all pD2a03@pD28dd@serialize-library pD2a5f@pD2a18@compile-core-expr) (void)) (pD50ea@compiled)))) (if (memv pD50de@t '(compile)) (begin (pD4c04@pD31af@compile-r6rs-top-level pD50d8@x*) (pD2cc6@pD2b06@serialize-all pD2a03@pD28dd@serialize-library pD2a5f@pD2a18@compile-core-expr)) (if '#f '#f (void)))))))))) (set! pD5141@pD4ff3@load-r6rs-top-level pD4ff3@load-r6rs-top-level) (set! pD4ff5@load-r6rs-top-level-sexp (lambda (pD50ec@import-spec pD50ed@thunk) (let ((pD50f8@pD50f1 pD2cc2@pD2afe@library-path) (pD50f9@pD50f3 pD2a09@pD28e9@mosh-cache-dir) (pD50fa@pD50f5 (pD4fe1@local-library-path '"")) (pD50fb@pD50f7 (create-mosh-cache-dir))) (let ((pD5100@swap (lambda () (begin (let ((pD5102@t (pD50f8@pD50f1))) (begin (pD50f8@pD50f1 pD50fa@pD50f5) (set! pD50fa@pD50f5 pD5102@t))) (let ((pD5104@t (pD50f9@pD50f3))) (begin (pD50f9@pD50f3 pD50fb@pD50f7) (set! pD50fb@pD50f7 pD5104@t))))))) (dynamic-wind pD5100@swap (lambda () (begin (if (pD2a09@pD28e9@mosh-cache-dir) (gensym-prefix-set! (pD4ff9@prefix-inc! (string-append (pD2a09@pD28e9@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((pD510a@pD5107 pD4fdf@command-line) (pD510b@pD5109 '())) (let ((pD510e@swap (lambda () (let ((pD5110@t (pD510a@pD5107))) (begin (pD510a@pD5107 pD510b@pD5109) (set! pD510b@pD5109 pD5110@t)))))) (dynamic-wind pD510e@swap (lambda () ((pD4c04@pD31af@compile-r6rs-top-level (list (cons 'import pD50ec@import-spec) (list pD50ed@thunk))))) pD510e@swap))))) pD5100@swap))))) (set! pD5142@pD4ff5@load-r6rs-top-level-sexp pD4ff5@load-r6rs-top-level-sexp) (set! pD4ff7@prefix-inc (lambda (pD5112@prefix-string) (let ((pD5114@prefix (symbol->string pD5112@prefix-string))) (let ((pD5116@len (string-length pD5114@prefix))) (let pD511e@loop ((pD5118@i (- pD5116@len '1)) (pD5119@carry? '#t) (pD511a@accum '())) (if (< pD5118@i '0) (string->symbol (list->string (if pD5119@carry? (cons '#\a pD511a@accum) pD511a@accum))) (if pD5119@carry? (let ((pD5120@next-integer (+ '1 (char->integer (string-ref pD5114@prefix pD5118@i))))) (if (= pD5120@next-integer '123) (pD511e@loop (- pD5118@i '1) '#f (cons '#\A pD511a@accum)) (if (= pD5120@next-integer '91) (pD511e@loop (- pD5118@i '1) '#t (cons '#\a pD511a@accum)) (pD511e@loop (- pD5118@i '1) '#f (cons (integer->char pD5120@next-integer) pD511a@accum))))) (pD511e@loop (- pD5118@i '1) '#f (cons (string-ref pD5114@prefix pD5118@i) pD511a@accum))))))))) (set! pD5143@pD4ff7@prefix-inc pD4ff7@prefix-inc) (set! pD4ff9@prefix-inc! (lambda (pD5122@file) (begin (if (not (file-exists? pD5122@file)) (call-with-output-file pD5122@file (lambda (pD5124@port) (write 'd pD5124@port))) (void)) (let ((pD5126@prefix (call-with-input-file pD5122@file read))) (let ((pD5128@next-prefix (pD4ff7@prefix-inc pD5126@prefix))) (begin (call-with-port (open-file-output-port pD5122@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (pD512a@port) (write pD5128@next-prefix pD512a@port))) pD5126@prefix)))))) (set! pD5144@pD4ff9@prefix-inc! pD4ff9@prefix-inc!) (begin (pD2cc7@pD2b08@current-precompiled-library-loader pD2a04@pD28df@load-serialized-library) (set-symbol-value! 'load pD4fe5@load) (set-symbol-value! 'pre-compile-r6rs-file pD4ff1@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs pD4fe9@eval-top-level) (set-symbol-value! 'int-env-syms pD4be6@pD3173@interaction-environment-symbols) (set-symbol-value! 'expanded2core pD2a5e@pD2a16@expanded->core) (set-symbol-value! 'trace-printer pD4fdd@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (pD4ffa@c) (condition (pD4f26@pD4d30@make-non-continuable-violation) (pD4f1c@pD4d17@make-who-condition 'raise) (pD4ee0@pD4c78@make-message-condition '"returned from non-continuable exception") (pD4f12@pD4cfc@make-irritants-condition (list pD4ffa@c))))) (pD4fcf@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (pD4fcf@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (pD4fcd@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (pD4fcd@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (pD4fcd@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((pD4ffc@prefix (lambda (pD4ffe@ext pD4fff@ls) (append (map (lambda (pD5002@x) (string-append pD4ffe@ext pD5002@x)) pD4fff@ls) pD4fff@ls)))) (pD2cc3@pD2b00@library-extensions (pD4ffc@prefix '".mosh" (pD2cc3@pD2b00@library-extensions)))) (current-exception-handler (lambda (pD5004@c) (if (condition? pD5004@c) (pD4fd5@condition-printer pD5004@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" pD5004@c)))) (if ((call/cc (lambda (pD5008@pD5006) (lambda () (with-exception-handler (lambda (pD500a@c) ((call/cc (lambda (pD500c@pD5007) (pD5008@pD5006 (lambda () (if '#t '#f (pD500c@pD5007 (lambda () (raise-continuable pD500a@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (pD4ff5@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (pD4fdf@command-line)) (let ((pD5016@pD500f pD4fdf@command-line) (pD5017@pD5011 pD2a09@pD28e9@mosh-cache-dir) (pD5018@pD5013 '()) (pD5019@pD5015 (create-mosh-cache-dir))) (let ((pD501e@swap (lambda () (begin (let ((pD5020@t (pD5016@pD500f))) (begin (pD5016@pD500f pD5018@pD5013) (set! pD5018@pD5013 pD5020@t))) (let ((pD5022@t (pD5017@pD5011))) (begin (pD5017@pD5011 pD5019@pD5015) (set! pD5019@pD5015 pD5022@t))))))) (dynamic-wind pD501e@swap (lambda () (begin (if (pD2a09@pD28e9@mosh-cache-dir) (gensym-prefix-set! (pD4ff9@prefix-inc! (string-append (pD2a09@pD28e9@mosh-cache-dir) '"/prefix.txt"))) (void)) (pD4fdb@repl))) pD501e@swap))) (begin (pD2cc2@pD2afe@library-path (pD4fe1@local-library-path (car (pD4fdf@command-line)))) (set! pD4fcb@x* (with-input-from-file (car (pD4fdf@command-line)) (lambda () (let pD5024@f () (let ((pD5026@x (pD29fb@pD28cd@read-annotated))) (if (eof-object? pD5026@x) '() (cons pD5026@x (pD5024@f)))))))) (pD4fdf@command-line (cons (car (pD4fdf@command-line)) (cdr (pD4fdf@command-line)))) (pD2a09@pD28e9@mosh-cache-dir (create-mosh-cache-dir)) (if (pD2a09@pD28e9@mosh-cache-dir) (gensym-prefix-set! (pD4ff9@prefix-inc! (string-append (pD2a09@pD28e9@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (pD5028@file) ((call/cc (lambda (pD502c@pD502a) (lambda () (with-exception-handler (lambda (pD502e@c) ((call/cc (lambda (pD5030@pD502b) (pD502c@pD502a (lambda () (if '#t '#t (pD5030@pD502b (lambda () (raise-continuable pD502e@c)))))))))) (lambda () (delete-file (string-append (pD2a09@pD28e9@mosh-cache-dir) '"/" pD5028@file))))))))) (directory-list (pD2a09@pD28e9@mosh-cache-dir))) (void)) (let ((pD5032@compiled (pD4c04@pD31af@compile-r6rs-top-level pD4fcb@x*))) (begin (if (and (pD2a09@pD28e9@mosh-cache-dir) (not (symbol-value '%disable-acc))) (pD2cc6@pD2b06@serialize-all pD2a03@pD28dd@serialize-library pD2a5f@pD2a18@compile-core-expr) (void)) (pD5032@compiled))))))))
