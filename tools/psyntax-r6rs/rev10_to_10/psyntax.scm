;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! ag2318@library-file-path->cache-path (unspecified)) (set! ag231a@read-annotated (unspecified)) (set! ag231c@annotation-stripped (unspecified)) (set! ag231e@annotation? (unspecified)) (set! ag2320@annotation-source (unspecified)) (set! ag2322@annotation-expression (unspecified)) (set! ag2324@scm->fasl (unspecified)) (set! ag2326@fasl-save (unspecified)) (set! ag2328@fasl-load (unspecified)) (set! ag232a@serialize-library (unspecified)) (set! ag232c@load-serialized-library (unspecified)) (set! ag232e@make-record-printer (unspecified)) (set! ag2330@compile-core (unspecified)) (set! ag2332@read-library-source-file (unspecified)) (set! ag2334@make-parameter (unspecified)) (set! ag2336@mosh-cache-dir (unspecified)) (set! ag23cc@file-options-spec (unspecified)) (begin (set! ag2318@library-file-path->cache-path (lambda (ag23cd@x) (call-with-values (lambda () (open-string-output-port)) (lambda (ag23d3@ag23d0 ag23d4@ag23d2) ((lambda (ag23d7@extract ag23d8@p) ((lambda (ag23dc@display-hex) (begin (set! ag23dc@display-hex (lambda (ag23e5@n) (if (<= '0 ag23e5@n '9) (display ag23e5@n ag23d8@p) (display (integer->char (+ (char->integer '#\a) (- ag23e5@n '10))) ag23d8@p)))) (begin ((letrec ((ag23dd@f (lambda (ag23df@ls) (if (not (null? ag23df@ls)) (begin (display '"_" ag23d8@p) (for-each (lambda (ag23e1@c) (if (or (char<=? '#\a ag23e1@c '#\z) (char<=? '#\A ag23e1@c '#\Z) (char<=? '#\0 ag23e1@c '#\9) (memv ag23e1@c '(#\- #\. #\_ #\~))) (display ag23e1@c ag23d8@p) (begin (display '"%" ag23d8@p) ((lambda (ag23e3@n) (begin (ag23dc@display-hex (quotient ag23e3@n '16)) (ag23dc@display-hex (remainder ag23e3@n '16)))) (char->integer ag23e1@c))))) (string->list (car ag23df@ls))) (ag23dd@f (cdr ag23df@ls))) (void))))) ag23dd@f) (string-split ag23cd@x '#\/)) (ag23d7@extract)))) '#f)) ag23d4@ag23d2 ag23d3@ag23d0))))) (set! ag2447@ag2318@library-file-path->cache-path ag2318@library-file-path->cache-path)) (begin (set! ag231a@read-annotated read) (set! ag2448@ag231a@read-annotated ag231a@read-annotated)) (begin (set! ag231c@annotation-stripped (lambda (ag23e7@x) (ag2322@annotation-expression ag23e7@x))) (set! ag2449@ag231c@annotation-stripped ag231c@annotation-stripped)) (begin (set! ag231e@annotation? (lambda (ag23e9@x) (source-info ag23e9@x))) (set! ag244a@ag231e@annotation? ag231e@annotation?)) (begin (set! ag2320@annotation-source (lambda (ag23eb@x) (source-info ag23eb@x))) (set! ag244b@ag2320@annotation-source ag2320@annotation-source)) (begin (set! ag2322@annotation-expression (lambda (ag23ed@x) (if (pair? ag23ed@x) (cons (car ag23ed@x) (cdr ag23ed@x)) (display '"line:46\n")))) (set! ag244c@ag2322@annotation-expression ag2322@annotation-expression)) (begin (set! ag2324@scm->fasl (lambda (ag23ef@filename) (string-append (ag2336@mosh-cache-dir) '"/" (ag2318@library-file-path->cache-path ag23ef@filename) '".mosh-fasl"))) (set! ag244d@ag2324@scm->fasl ag2324@scm->fasl)) (begin (set! ag2326@fasl-save (lambda (ag23f1@filename ag23f2@obj) (call-with-port (open-file-output-port ag23f1@filename) (lambda (ag23f5@port) ((symbol-value 'fasl-write!) ag23f2@obj ag23f5@port))))) (set! ag244e@ag2326@fasl-save ag2326@fasl-save)) (begin (set! ag2328@fasl-load (lambda (ag23f7@filename) (call-with-port (open-file-input-port ag23f7@filename) (symbol-value 'fasl-read!)))) (set! ag244f@ag2328@fasl-load ag2328@fasl-load)) (begin (set! ag232a@serialize-library (lambda (ag23f9@filename ag23fa@obj) (begin ((lambda (ag23fd@expanded2core) ((lambda (ag23ff@compile) ((lambda (ag2401@code) ((lambda (ag2403@pivot) ((lambda (ag2405@visit) ((lambda () (begin (set-car! ag2403@pivot ag2405@visit) ((lambda (ag2407@pivot) ((lambda (ag2409@invoke) ((lambda () (set-car! ag2407@pivot ag2409@invoke)))) (ag23ff@compile (ag23fd@expanded2core (car ag2407@pivot))))) (cdr ag2403@pivot)))))) (ag23ff@compile (ag23fd@expanded2core (car ag2403@pivot))))) (cddddr (cddddr ag2401@code)))) ag23fa@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (ag240b@fasl-file) (begin (if (file-exists? ag240b@fasl-file) (delete-file ag240b@fasl-file) (void)) ((call/cc (lambda (ag240f@ag240d) (lambda () (with-exception-handler (lambda (ag2411@c) ((call/cc (lambda (ag2413@ag240e) (ag240f@ag240d (lambda () (if '#t (begin (format (current-error-port) '"Warning:serialize-library failed " ag23f9@filename) (if (file-exists? ag240b@fasl-file) (delete-file ag240b@fasl-file) (void)) '#f) (ag2413@ag240e (lambda () (raise-continuable ag2411@c)))))))))) (lambda () (ag2326@fasl-save ag240b@fasl-file ag23fa@obj))))))))) (ag2324@scm->fasl ag23f9@filename))))) (set! ag2450@ag232a@serialize-library ag232a@serialize-library)) (begin (set! ag232c@load-serialized-library (lambda (ag2415@filename ag2416@obj) (and (ag2336@mosh-cache-dir) ((lambda (ag2419@fasl-file) (if (and (file-exists? ag2419@fasl-file) ((symbol-value 'file-newer?) ag2419@fasl-file ag2415@filename)) ((lambda (ag241b@expanded2core) ((lambda (ag241d@eval-compiled-core) ((lambda (ag241f@code) ((lambda (ag2421@pivot) ((lambda (ag2423@visit) ((lambda (ag2425@visit-proc) ((lambda () (begin (set-car! ag2421@pivot ag2425@visit-proc) ((lambda (ag2427@pivot) ((lambda (ag2429@invoke) ((lambda () (begin (set-car! ag2427@pivot (lambda () (ag241d@eval-compiled-core ag2429@invoke))) (apply ag2416@obj ag241f@code))))) (car ag2427@pivot))) (cdr ag2421@pivot)))))) (lambda () (ag241d@eval-compiled-core ag2423@visit)))) (car ag2421@pivot))) (cddddr (cddddr ag241f@code)))) (ag2328@fasl-load ag2419@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (ag2324@scm->fasl ag2415@filename))))) (set! ag2451@ag232c@load-serialized-library ag232c@load-serialized-library)) (begin (set! ag232e@make-record-printer (lambda (ag242b@name ag242c@printer) (lambda ag242f@x (begin (display '"record printer") (for-each display ag242f@x))))) (set! ag2452@ag232e@make-record-printer ag232e@make-record-printer)) (begin (set! ag2330@compile-core (lambda ag2431@x (apply error 'comile-core '"not implementated" ag2431@x))) (set! ag2453@ag2330@compile-core ag2330@compile-core)) (begin (set! ag2332@read-library-source-file (lambda (ag2433@file-name) (with-input-from-file ag2433@file-name ag231a@read-annotated))) (set! ag2454@ag2332@read-library-source-file ag2332@read-library-source-file)) (begin (set! ag2334@make-parameter (lambda ag2443 ((lambda (ag2444) (if (= ag2444 '1) (apply (lambda (ag2435@x) (ag2334@make-parameter ag2435@x (lambda (ag2437@x) ag2437@x))) ag2443) (if (= ag2444 '2) (apply (lambda (ag2439@x ag243a@fender) ((lambda (ag243d@x) (lambda ag2441 ((lambda (ag2442) (if (= ag2442 '0) (apply (lambda () ag243d@x) ag2441) (if (= ag2442 '1) (apply (lambda (ag243f@v) (set! ag243d@x (ag243a@fender ag243f@v))) ag2441) (error 'apply '"invalid arg count")))) (length ag2441)))) (ag243a@fender ag2439@x))) ag2443) (error 'apply '"invalid arg count")))) (length ag2443)))) (set! ag2455@ag2334@make-parameter ag2334@make-parameter)) (begin (set! ag2336@mosh-cache-dir (ag2334@make-parameter '#f)) (set! ag2456@ag2336@mosh-cache-dir ag2336@mosh-cache-dir)) (begin (set! ag23cc@file-options-spec (lambda (ag2445@x) ag2445@x)) (set! ag2457@ag23cc@file-options-spec ag23cc@file-options-spec)) (void))
(begin (set! ag245d@current-primitive-locations (unspecified)) (set! ag245f@mutable? (unspecified)) (set! ag2461@rewriter (unspecified)) (set! ag2463@expanded->core (unspecified)) (set! ag2465@compile-core-expr (unspecified)) (set! ag2467@pretty-print (unspecified)) (set! ag2469@compile-core-expr-to-port (unspecified)) (begin (set! ag245d@current-primitive-locations (ag2455@ag2334@make-parameter (lambda (ag246a@x) '#f) (lambda (ag246c@p) ag246c@p))) (set! ag24a8@ag245d@current-primitive-locations ag245d@current-primitive-locations)) (begin (set! ag245f@mutable? (lambda (ag246e@x) (or (pair? ag246e@x) (vector? ag246e@x) (hashtable? ag246e@x)))) (set! ag24a9@ag245f@mutable? ag245f@mutable?)) (begin (set! ag2461@rewriter (lambda (ag2470@quote-hack?) ((lambda (ag2473@f) (begin (set! ag2473@f (lambda (ag2474@x) (if (pair? ag2474@x) ((lambda (ag2476@t) (if (memv ag2476@t '(quote)) (if (and ag2470@quote-hack? (ag245f@mutable? (cadr ag2474@x))) ((lambda (ag2478@g) (begin (set-symbol-value! ag2478@g (cadr ag2474@x)) ag2478@g)) (gensym)) ag2474@x) (if (memv ag2476@t '(case-lambda)) (cons 'case-lambda (map (lambda (ag247a@x) (cons (car ag247a@x) (map ag2473@f (cdr ag247a@x)))) (cdr ag2474@x))) (if (memv ag2476@t '(lambda)) (cons* 'lambda (cadr ag2474@x) (map ag2473@f (cddr ag2474@x))) (if (memv ag2476@t '(letrec)) ((lambda (ag247c@bindings ag247d@body*) ((lambda (ag2480@lhs* ag2481@rhs*) (cons* 'letrec (map list ag2480@lhs* (map ag2473@f ag2481@rhs*)) (map ag2473@f ag247d@body*))) (map car ag247c@bindings) (map cadr ag247c@bindings))) (cadr ag2474@x) (cddr ag2474@x)) (if (memv ag2476@t '(letrec*)) ((lambda (ag2484@bindings ag2485@body*) ((lambda (ag2488@lhs* ag2489@rhs*) (cons* 'letrec* (map list ag2488@lhs* (map ag2473@f ag2489@rhs*)) (map ag2473@f ag2485@body*))) (map car ag2484@bindings) (map cadr ag2484@bindings))) (cadr ag2474@x) (cddr ag2474@x)) (if (memv ag2476@t '(library-letrec*)) ((lambda (ag248c@name ag248d@x) ((lambda (ag2490@bindings ag2491@body*) ((lambda (ag2494@lhs* ag2495@lhs** ag2496@rhs*) (cons* 'library-letrec* ag248c@name (map list ag2494@lhs* ag2495@lhs** (map ag2473@f ag2496@rhs*)) (map ag2473@f ag2491@body*))) (map car ag2490@bindings) (map cadr ag2490@bindings) (map caddr ag2490@bindings))) (cadr ag248d@x) (cddr ag248d@x))) (cadr ag2474@x) (cdr ag2474@x)) (if (memv ag2476@t '(begin)) (cons 'begin (map ag2473@f (cdr ag2474@x))) (if (memv ag2476@t '(set!)) (list 'set! (cadr ag2474@x) (ag2473@f (caddr ag2474@x))) (if (memv ag2476@t '(primitive)) ((lambda (ag249a@op) ((lambda (ag249c@t) (if ag249c@t ((lambda (ag249e@loc) ag249e@loc) ag249c@t) ag249a@op)) ((ag245d@current-primitive-locations) ag249a@op))) (cadr ag2474@x)) (if (memv ag2476@t '(define)) ag2474@x (if (list? ag2474@x) (map ag2473@f ag2474@x) (error 'rewrite '"invalid form ~s ~s" ag2474@x (list? ag2474@x)))))))))))))) (car ag2474@x)) ag2474@x))) ag2473@f)) '#f))) (set! ag24aa@ag2461@rewriter ag2461@rewriter)) (begin (set! ag2463@expanded->core (lambda (ag24a0@x) ((ag2461@rewriter '#f) ag24a0@x))) (set! ag24ab@ag2463@expanded->core ag2463@expanded->core)) (begin (set! ag2465@compile-core-expr (lambda (ag24a2@x) ((ag2461@rewriter '#f) ag24a2@x))) (set! ag24ac@ag2465@compile-core-expr ag2465@compile-core-expr)) (begin (set! ag2467@pretty-print write) (set! ag24ad@ag2467@pretty-print ag2467@pretty-print)) (begin (set! ag2469@compile-core-expr-to-port (lambda (ag24a4@x ag24a5@p) (ag2467@pretty-print ((ag2461@rewriter '#f) ag24a4@x) ag24a5@p))) (set! ag24ae@ag2469@compile-core-expr-to-port ag2469@compile-core-expr-to-port)) (void))
(begin (void))
(begin (set! ag24fd@make-collection (unspecified)) (set! ag24ff@current-library-collection (unspecified)) (set! ag2501@rp (unspecified)) (set! ag250b@library? (unspecified)) (set! ag250d@library-id (unspecified)) (set! ag250f@set-library-id! (unspecified)) (set! ag2511@library-name (unspecified)) (set! ag2513@set-library-name! (unspecified)) (set! ag2515@library-version (unspecified)) (set! ag2517@set-library-version! (unspecified)) (set! ag2519@library-imp* (unspecified)) (set! ag251b@set-library-imp*! (unspecified)) (set! ag251d@library-vis* (unspecified)) (set! ag251f@set-library-vis*! (unspecified)) (set! ag2521@library-inv* (unspecified)) (set! ag2523@set-library-inv*! (unspecified)) (set! ag2525@library-subst (unspecified)) (set! ag2527@set-library-subst! (unspecified)) (set! ag2529@library-env (unspecified)) (set! ag252b@set-library-env! (unspecified)) (set! ag252d@library-visit-state (unspecified)) (set! ag252f@set-library-visit-state! (unspecified)) (set! ag2531@library-invoke-state (unspecified)) (set! ag2533@set-library-invoke-state! (unspecified)) (set! ag2535@library-visit-code (unspecified)) (set! ag2537@set-library-visit-code! (unspecified)) (set! ag2539@library-invoke-code (unspecified)) (set! ag253b@set-library-invoke-code! (unspecified)) (set! ag253d@library-visible? (unspecified)) (set! ag253f@set-library-visible?! (unspecified)) (set! ag2541@library-source-file-name (unspecified)) (set! ag2543@set-library-source-file-name! (unspecified)) (set! ag2545@dummy (unspecified)) (set! ag2547@find-dependencies (unspecified)) (set! ag2549@find-library-by (unspecified)) (set! ag254b@library-path (unspecified)) (set! ag254d@library-extensions (unspecified)) (set! ag254f@library-name->file-name (unspecified)) (set! ag2551@file-locator (unspecified)) (set! ag2553@serialize-all (unspecified)) (set! ag2555@current-precompiled-library-loader (unspecified)) (set! ag2557@try-load-from-file (unspecified)) (set! ag2559@library-loader (unspecified)) (set! ag255b@current-library-expander (unspecified)) (set! ag255d@external-pending-libraries (unspecified)) (set! ag255f@find-external-library (unspecified)) (set! ag2561@find-library-by-name (unspecified)) (set! ag2563@library-exists? (unspecified)) (set! ag2565@find-library-by-spec/die (unspecified)) (set! ag2567@label->binding-table (unspecified)) (set! ag2569@install-library-record (unspecified)) (set! ag256b@install-library (unspecified)) (set! ag256d@imported-label->binding (unspecified)) (set! ag256f@invoke-library (unspecified)) (set! ag2571@visit-library (unspecified)) (set! ag2573@invoke-library-by-spec (unspecified)) (set! ag2575@installed-libraries (unspecified)) (set! ag2577@library-spec (unspecified)) (begin (set! ag24fd@make-collection (lambda () ((lambda (ag2578@set) ((lambda (ag257b@set-cons) (begin (set! ag257b@set-cons (lambda (ag2580@x ag2581@ls) (if (memq ag2580@x ag2581@ls) ag2581@ls (cons ag2580@x ag2581@ls)))) (lambda ag257e ((lambda (ag257f) (if (= ag257f '0) (apply (lambda () ag2578@set) ag257e) (if (= ag257f '1) (apply (lambda (ag257c@x) (set! ag2578@set (ag257b@set-cons ag257c@x ag2578@set))) ag257e) (error 'apply '"invalid arg count")))) (length ag257e))))) '#f)) '()))) (set! ag26ec@ag24fd@make-collection ag24fd@make-collection)) (begin (set! ag24ff@current-library-collection (ag2455@ag2334@make-parameter (ag24fd@make-collection) (lambda (ag2584@x) (begin (if (not (procedure? ag2584@x)) (assertion-violation 'current-library-collection '"not a procedure" ag2584@x) (void)) ag2584@x)))) (set! ag26ed@ag24ff@current-library-collection ag24ff@current-library-collection)) (begin (set! ag2501@rp (ag2452@ag232e@make-record-printer 'library (lambda (ag2586@x ag2587@p ag2588@wr) (begin (if (not (ag250b@library? ag2586@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (ag2515@library-version ag2586@x)) (ag2511@library-name ag2586@x) (append (ag2511@library-name ag2586@x) (list (ag2515@library-version ag2586@x))))) ag2587@p))))) (set! ag26ee@ag2501@rp ag2501@rp)) (begin (set! ag250b@library? (lambda (ag258c@x) (and (simple-struct? ag258c@x) (eq? (simple-struct-name ag258c@x) 'library)))) (set! ag26ef@ag250b@library? ag250b@library?)) (begin (set! ag250d@library-id (lambda (ag258e@x) (simple-struct-ref ag258e@x '0))) (set! ag26f0@ag250d@library-id ag250d@library-id)) (begin (set! ag250f@set-library-id! (lambda (ag2590@x ag2591@val) (simple-struct-set! ag2590@x '0 ag2591@val))) (set! ag26f1@ag250f@set-library-id! ag250f@set-library-id!)) (begin (set! ag2511@library-name (lambda (ag2594@x) (simple-struct-ref ag2594@x '1))) (set! ag26f2@ag2511@library-name ag2511@library-name)) (begin (set! ag2513@set-library-name! (lambda (ag2596@x ag2597@val) (simple-struct-set! ag2596@x '1 ag2597@val))) (set! ag26f3@ag2513@set-library-name! ag2513@set-library-name!)) (begin (set! ag2515@library-version (lambda (ag259a@x) (simple-struct-ref ag259a@x '2))) (set! ag26f4@ag2515@library-version ag2515@library-version)) (begin (set! ag2517@set-library-version! (lambda (ag259c@x ag259d@val) (simple-struct-set! ag259c@x '2 ag259d@val))) (set! ag26f5@ag2517@set-library-version! ag2517@set-library-version!)) (begin (set! ag2519@library-imp* (lambda (ag25a0@x) (simple-struct-ref ag25a0@x '3))) (set! ag26f6@ag2519@library-imp* ag2519@library-imp*)) (begin (set! ag251b@set-library-imp*! (lambda (ag25a2@x ag25a3@val) (simple-struct-set! ag25a2@x '3 ag25a3@val))) (set! ag26f7@ag251b@set-library-imp*! ag251b@set-library-imp*!)) (begin (set! ag251d@library-vis* (lambda (ag25a6@x) (simple-struct-ref ag25a6@x '4))) (set! ag26f8@ag251d@library-vis* ag251d@library-vis*)) (begin (set! ag251f@set-library-vis*! (lambda (ag25a8@x ag25a9@val) (simple-struct-set! ag25a8@x '4 ag25a9@val))) (set! ag26f9@ag251f@set-library-vis*! ag251f@set-library-vis*!)) (begin (set! ag2521@library-inv* (lambda (ag25ac@x) (simple-struct-ref ag25ac@x '5))) (set! ag26fa@ag2521@library-inv* ag2521@library-inv*)) (begin (set! ag2523@set-library-inv*! (lambda (ag25ae@x ag25af@val) (simple-struct-set! ag25ae@x '5 ag25af@val))) (set! ag26fb@ag2523@set-library-inv*! ag2523@set-library-inv*!)) (begin (set! ag2525@library-subst (lambda (ag25b2@x) (simple-struct-ref ag25b2@x '6))) (set! ag26fc@ag2525@library-subst ag2525@library-subst)) (begin (set! ag2527@set-library-subst! (lambda (ag25b4@x ag25b5@val) (simple-struct-set! ag25b4@x '6 ag25b5@val))) (set! ag26fd@ag2527@set-library-subst! ag2527@set-library-subst!)) (begin (set! ag2529@library-env (lambda (ag25b8@x) (simple-struct-ref ag25b8@x '7))) (set! ag26fe@ag2529@library-env ag2529@library-env)) (begin (set! ag252b@set-library-env! (lambda (ag25ba@x ag25bb@val) (simple-struct-set! ag25ba@x '7 ag25bb@val))) (set! ag26ff@ag252b@set-library-env! ag252b@set-library-env!)) (begin (set! ag252d@library-visit-state (lambda (ag25be@x) (simple-struct-ref ag25be@x '8))) (set! ag2700@ag252d@library-visit-state ag252d@library-visit-state)) (begin (set! ag252f@set-library-visit-state! (lambda (ag25c0@x ag25c1@val) (simple-struct-set! ag25c0@x '8 ag25c1@val))) (set! ag2701@ag252f@set-library-visit-state! ag252f@set-library-visit-state!)) (begin (set! ag2531@library-invoke-state (lambda (ag25c4@x) (simple-struct-ref ag25c4@x '9))) (set! ag2702@ag2531@library-invoke-state ag2531@library-invoke-state)) (begin (set! ag2533@set-library-invoke-state! (lambda (ag25c6@x ag25c7@val) (simple-struct-set! ag25c6@x '9 ag25c7@val))) (set! ag2703@ag2533@set-library-invoke-state! ag2533@set-library-invoke-state!)) (begin (set! ag2535@library-visit-code (lambda (ag25ca@x) (simple-struct-ref ag25ca@x '10))) (set! ag2704@ag2535@library-visit-code ag2535@library-visit-code)) (begin (set! ag2537@set-library-visit-code! (lambda (ag25cc@x ag25cd@val) (simple-struct-set! ag25cc@x '10 ag25cd@val))) (set! ag2705@ag2537@set-library-visit-code! ag2537@set-library-visit-code!)) (begin (set! ag2539@library-invoke-code (lambda (ag25d0@x) (simple-struct-ref ag25d0@x '11))) (set! ag2706@ag2539@library-invoke-code ag2539@library-invoke-code)) (begin (set! ag253b@set-library-invoke-code! (lambda (ag25d2@x ag25d3@val) (simple-struct-set! ag25d2@x '11 ag25d3@val))) (set! ag2707@ag253b@set-library-invoke-code! ag253b@set-library-invoke-code!)) (begin (set! ag253d@library-visible? (lambda (ag25d6@x) (simple-struct-ref ag25d6@x '12))) (set! ag2708@ag253d@library-visible? ag253d@library-visible?)) (begin (set! ag253f@set-library-visible?! (lambda (ag25d8@x ag25d9@val) (simple-struct-set! ag25d8@x '12 ag25d9@val))) (set! ag2709@ag253f@set-library-visible?! ag253f@set-library-visible?!)) (begin (set! ag2541@library-source-file-name (lambda (ag25dc@x) (simple-struct-ref ag25dc@x '13))) (set! ag270a@ag2541@library-source-file-name ag2541@library-source-file-name)) (begin (set! ag2543@set-library-source-file-name! (lambda (ag25de@x ag25df@val) (simple-struct-set! ag25de@x '13 ag25df@val))) (set! ag270b@ag2543@set-library-source-file-name! ag2543@set-library-source-file-name!)) (begin (set! ag2545@dummy '3) (set! ag270c@ag2545@dummy ag2545@dummy)) (begin (set! ag2547@find-dependencies (lambda (ag25e2@ls) (if (null? ag25e2@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! ag270d@ag2547@find-dependencies ag2547@find-dependencies)) (begin (set! ag2549@find-library-by (lambda (ag25e4@pred) ((letrec ((ag25e6@f (lambda (ag25e8@ls) (if (null? ag25e8@ls) '#f (if (ag25e4@pred (car ag25e8@ls)) (car ag25e8@ls) (ag25e6@f (cdr ag25e8@ls))))))) ag25e6@f) ((ag24ff@current-library-collection))))) (set! ag270e@ag2549@find-library-by ag2549@find-library-by)) (begin (set! ag254b@library-path (ag2455@ag2334@make-parameter '(".") (lambda (ag25ea@x) (if (and (list? ag25ea@x) (for-all string? ag25ea@x)) (map (lambda (ag25ec@x) ag25ec@x) ag25ea@x) (assertion-violation 'library-path '"not a list of strings" ag25ea@x))))) (set! ag270f@ag254b@library-path ag254b@library-path)) (begin (set! ag254d@library-extensions (ag2455@ag2334@make-parameter '(".sls" ".ss" ".scm") (lambda (ag25ee@x) (if (and (list? ag25ee@x) (for-all string? ag25ee@x)) (map (lambda (ag25f0@x) ag25f0@x) ag25ee@x) (assertion-violation 'library-extensions '"not a list of strings" ag25ee@x))))) (set! ag2710@ag254d@library-extensions ag254d@library-extensions)) (begin (set! ag254f@library-name->file-name (lambda (ag25f2@x) (call-with-values (lambda () (open-string-output-port)) (lambda (ag25f8@ag25f5 ag25f9@ag25f7) ((lambda (ag25fc@extract ag25fd@p) ((lambda (ag2601@display-hex) (begin (set! ag2601@display-hex (lambda (ag260a@n) (if (<= '0 ag260a@n '9) (display ag260a@n ag25fd@p) (display (integer->char (+ (char->integer '#\a) (- ag260a@n '10))) ag25fd@p)))) (begin ((letrec ((ag2602@f (lambda (ag2604@ls) (if (not (null? ag2604@ls)) (begin (display '"/" ag25fd@p) (for-each (lambda (ag2606@c) (if (or (char<=? '#\a ag2606@c '#\z) (char<=? '#\A ag2606@c '#\Z) (char<=? '#\0 ag2606@c '#\9) (memv ag2606@c '(#\- #\. #\_ #\~))) (display ag2606@c ag25fd@p) (begin (display '"%" ag25fd@p) ((lambda (ag2608@n) (begin (ag2601@display-hex (quotient ag2608@n '16)) (ag2601@display-hex (remainder ag2608@n '16)))) (char->integer ag2606@c))))) (string->list (symbol->string (car ag2604@ls)))) (ag2602@f (cdr ag2604@ls))) (void))))) ag2602@f) ag25f2@x) (ag25fc@extract)))) '#f)) ag25f9@ag25f7 ag25f8@ag25f5))))) (set! ag2711@ag254f@library-name->file-name ag254f@library-name->file-name)) (begin (set! ag2551@file-locator (ag2455@ag2334@make-parameter (lambda (ag260c@x) ((lambda (ag260e@str) ((letrec ((ag2610@f (lambda (ag2612@ls ag2613@exts ag2614@failed-list) (if (null? ag2612@ls) ((lambda () ((lambda (ag2620@ag261b ag2622@ag261d ag2624@ag261c ag2627@ag261a ag2629@make-library-resolution-condition ag262b@ag2618 ag262d@ag2619 ag262f@library-resolution-condition? ag2631@condition-library ag2633@condition-files) (begin (set! ag2620@ag261b (make-record-type-descriptor '&library-resolution ag48d9@ag4620@&condition-rtd 'ag261e '#f '#f '#((immutable library) (immutable files)))) (set! ag2622@ag261d '#f) (set! ag2624@ag261c (make-record-constructor-descriptor ag2620@ag261b ag48da@ag4622@&condition-rcd ag2622@ag261d)) (set! ag2627@ag261a (record-predicate ag2620@ag261b)) (set! ag2629@make-library-resolution-condition (record-constructor ag2624@ag261c)) (set! ag262b@ag2618 (record-accessor ag2620@ag261b '0)) (set! ag262d@ag2619 (record-accessor ag2620@ag261b '1)) (set! ag262f@library-resolution-condition? (condition-predicate ag2620@ag261b)) (set! ag2631@condition-library (condition-accessor ag2620@ag261b ag262b@ag2618)) (set! ag2633@condition-files (condition-accessor ag2620@ag261b ag262d@ag2619)) (raise (condition (ag48f9@ag46ba@make-error) (ag491b@ag4716@make-who-condition 'expander) (ag48df@ag4677@make-message-condition '"cannot locate library in library-path") (ag2629@make-library-resolution-condition ag260c@x (reverse ag2614@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? ag2613@exts) (ag2610@f (cdr ag2612@ls) (ag254d@library-extensions) ag2614@failed-list) ((lambda (ag2634@name) (if (file-exists? ag2634@name) ag2634@name (ag2610@f ag2612@ls (cdr ag2613@exts) (cons ag2634@name ag2614@failed-list)))) (string-append (car ag2612@ls) ag260e@str (car ag2613@exts)))))))) ag2610@f) (ag254b@library-path) (ag254d@library-extensions) '())) (ag254f@library-name->file-name ag260c@x))) (lambda (ag2636@f) (if (procedure? ag2636@f) ag2636@f (assertion-violation 'file-locator '"not a procedure" ag2636@f))))) (set! ag2712@ag2551@file-locator ag2551@file-locator)) (begin (set! ag2553@serialize-all (lambda (ag2638@serialize ag2639@compile) ((lambda (ag263d@library-desc) (begin (set! ag263d@library-desc (lambda (ag2640@x) (list (ag250d@library-id ag2640@x) (ag2511@library-name ag2640@x)))) (for-each (lambda (ag263e@x) (if (ag2541@library-source-file-name ag263e@x) (ag2638@serialize (ag2541@library-source-file-name ag263e@x) (list (ag250d@library-id ag263e@x) (ag2511@library-name ag263e@x) (ag2515@library-version ag263e@x) (map ag263d@library-desc (ag2519@library-imp* ag263e@x)) (map ag263d@library-desc (ag251d@library-vis* ag263e@x)) (map ag263d@library-desc (ag2521@library-inv* ag263e@x)) (ag2525@library-subst ag263e@x) (ag2529@library-env ag263e@x) (ag2639@compile (ag2535@library-visit-code ag263e@x)) (ag2639@compile (ag2539@library-invoke-code ag263e@x)) (ag253d@library-visible? ag263e@x))) (void))) ((ag24ff@current-library-collection))))) '#f))) (set! ag2713@ag2553@serialize-all ag2553@serialize-all)) (begin (set! ag2555@current-precompiled-library-loader (ag2455@ag2334@make-parameter (lambda (ag2642@filename ag2643@sk) '#f))) (set! ag2714@ag2555@current-precompiled-library-loader ag2555@current-precompiled-library-loader)) (begin (set! ag2557@try-load-from-file (lambda (ag2646@filename) ((ag2555@current-precompiled-library-loader) ag2646@filename (lambda ag266c ((lambda (ag266d) (if (= ag266d '11) (apply (lambda (ag2648@id ag2649@name ag264a@ver ag264b@imp* ag264c@vis* ag264d@inv* ag264e@exp-subst ag264f@exp-env ag2650@visit-proc ag2651@invoke-proc ag2652@visible?) ((letrec ((ag265e@f (lambda (ag2660@deps) (if (null? ag2660@deps) (begin (ag256b@install-library ag2648@id ag2649@name ag264a@ver ag264b@imp* ag264c@vis* ag264d@inv* ag264e@exp-subst ag264f@exp-env ag2650@visit-proc ag2651@invoke-proc '#f '#f ag2652@visible? '#f) '#t) ((lambda (ag2662@d) ((lambda (ag2664@label ag2665@dname) ((lambda (ag2668@l) (if (and (ag250b@library? ag2668@l) (eq? ag2664@label (ag250d@library-id ag2668@l))) (ag265e@f (cdr ag2660@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" ag2649@name ag2665@dname ag2646@filename ag2668@l ag2664@label (ag250d@library-id ag2668@l)) '#f))) (ag2561@find-library-by-name ag2665@dname))) (car ag2662@d) (cadr ag2662@d))) (car ag2660@deps)))))) ag265e@f) (append ag264b@imp* ag264c@vis* ag264d@inv*))) ag266c) (if (>= ag266d '0) (apply (lambda ag266a@others '#f) ag266c) (error 'apply '"invalid arg count")))) (length ag266c)))))) (set! ag2715@ag2557@try-load-from-file ag2557@try-load-from-file)) (begin (set! ag2559@library-loader (ag2455@ag2334@make-parameter (lambda (ag266e@x) ((lambda (ag2670@file-name) (if (not ag2670@file-name) (assertion-violation '#f '"cannot file library" ag266e@x) (or (ag2557@try-load-from-file ag2670@file-name) ((ag255b@current-library-expander) (ag2454@ag2332@read-library-source-file ag2670@file-name) ag2670@file-name (lambda (ag2672@name) (if (not (fast-equal? ag2672@name ag266e@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (ag2678@ag2675 ag2679@ag2677) ((lambda (ag267c@e ag267d@p) (begin (display '"expected to find library " ag267d@p) (write ag266e@x ag267d@p) (display '" in file " ag267d@p) (display ag2670@file-name ag267d@p) (display '", found " ag267d@p) (write ag2672@name ag267d@p) (display '" instead" ag267d@p) (ag267c@e))) ag2679@ag2677 ag2678@ag2675)))) (void))))))) ((ag2551@file-locator) ag266e@x))) (lambda (ag2680@f) (if (procedure? ag2680@f) ag2680@f (assertion-violation 'library-locator '"not a procedure" ag2680@f))))) (set! ag2716@ag2559@library-loader ag2559@library-loader)) (begin (set! ag255b@current-library-expander (ag2455@ag2334@make-parameter (lambda (ag2682@x) (assertion-violation 'library-expander '"not initialized")) (lambda (ag2684@f) (if (procedure? ag2684@f) ag2684@f (assertion-violation 'library-expander '"not a procedure" ag2684@f))))) (set! ag2717@ag255b@current-library-expander ag255b@current-library-expander)) (begin (set! ag255d@external-pending-libraries (ag2455@ag2334@make-parameter '())) (set! ag2718@ag255d@external-pending-libraries ag255d@external-pending-libraries)) (begin (set! ag255f@find-external-library (lambda (ag2686@name) (begin (if (member ag2686@name (ag255d@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" ag2686@name) (void)) ((lambda (ag268c@ag2689 ag268d@ag268b) ((lambda (ag2690@swap) (dynamic-wind ag2690@swap (lambda () (begin ((ag2559@library-loader) ag2686@name) (or (ag2549@find-library-by (lambda (ag2692@x) (fast-equal? (ag2511@library-name ag2692@x) ag2686@name))) (assertion-violation '#f '"handling external library did not yield the correct library" ag2686@name)))) ag2690@swap)) (lambda () ((lambda (ag2694@t) (begin (ag268c@ag2689 ag268d@ag268b) (set! ag268d@ag268b ag2694@t))) (ag268c@ag2689))))) ag255d@external-pending-libraries (cons ag2686@name (ag255d@external-pending-libraries)))))) (set! ag2719@ag255f@find-external-library ag255f@find-external-library)) (begin (set! ag2561@find-library-by-name (lambda (ag2696@name) (or (ag2549@find-library-by (lambda (ag2698@x) (fast-equal? (ag2511@library-name ag2698@x) ag2696@name))) (ag255f@find-external-library ag2696@name)))) (set! ag271a@ag2561@find-library-by-name ag2561@find-library-by-name)) (begin (set! ag2563@library-exists? (lambda (ag269a@name) (and (ag2549@find-library-by (lambda (ag269c@x) (fast-equal? (ag2511@library-name ag269c@x) ag269a@name))) '#t))) (set! ag271b@ag2563@library-exists? ag2563@library-exists?)) (begin (set! ag2565@find-library-by-spec/die (lambda (ag269e@spec) ((lambda (ag26a0@id) (or (ag2549@find-library-by (lambda (ag26a2@x) (eq? ag26a0@id (ag250d@library-id ag26a2@x)))) (assertion-violation '#f '"cannot find library with required spec" ag269e@spec))) (car ag269e@spec)))) (set! ag271c@ag2565@find-library-by-spec/die ag2565@find-library-by-spec/die)) (begin (set! ag2567@label->binding-table (make-eq-hashtable)) (set! ag271d@ag2567@label->binding-table ag2567@label->binding-table)) (begin (set! ag2569@install-library-record (lambda (ag26a4@lib) (begin ((lambda (ag26a6@exp-env) (for-each (lambda (ag26a8@x) ((lambda (ag26aa@label ag26ab@binding) ((lambda (ag26ae@binding) (begin (if (hashtable-ref ag2567@label->binding-table ag26aa@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" ag26aa@label (hashtable-ref ag2567@label->binding-table ag26aa@label '#f) ag26ae@binding) (exit)) (void)) (hashtable-set! ag2567@label->binding-table ag26aa@label ag26ae@binding))) ((lambda (ag26b0@t) (if (memv ag26b0@t '(global)) (cons 'global (cons ag26a4@lib (cdr ag26ab@binding))) (if (memv ag26b0@t '(global-macro)) (cons 'global-macro (cons ag26a4@lib (cdr ag26ab@binding))) (if (memv ag26b0@t '(global-macro!)) (cons 'global-macro! (cons ag26a4@lib (cdr ag26ab@binding))) ag26ab@binding)))) (car ag26ab@binding)))) (car ag26a8@x) (cdr ag26a8@x))) ag26a6@exp-env)) (ag2529@library-env ag26a4@lib)) ((ag24ff@current-library-collection) ag26a4@lib)))) (set! ag271e@ag2569@install-library-record ag2569@install-library-record)) (begin (set! ag256b@install-library (lambda (ag26b2@id ag26b3@name ag26b4@ver ag26b5@imp* ag26b6@vis* ag26b7@inv* ag26b8@exp-subst ag26b9@exp-env ag26ba@visit-proc ag26bb@invoke-proc ag26bc@visit-code ag26bd@invoke-code ag26be@visible? ag26bf@source-file-name) ((lambda (ag26ce@imp-lib* ag26cf@vis-lib* ag26d0@inv-lib*) (begin (if (not (and (symbol? ag26b2@id) (list? ag26b3@name) (list? ag26b4@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" ag26b2@id ag26b3@name ag26b4@ver) (void)) (if (ag2563@library-exists? ag26b3@name) (assertion-violation 'install-library '"library is already installed" ag26b3@name) (void)) ((lambda (ag26d4@lib) (ag2569@install-library-record ag26d4@lib)) (make-simple-struct 'library '15 (list ag26b2@id ag26b3@name ag26b4@ver ag26ce@imp-lib* ag26cf@vis-lib* ag26d0@inv-lib* ag26b8@exp-subst ag26b9@exp-env ag26ba@visit-proc ag26bb@invoke-proc ag26bc@visit-code ag26bd@invoke-code ag26be@visible? ag26bf@source-file-name))))) (map ag2565@find-library-by-spec/die ag26b5@imp*) (map ag2565@find-library-by-spec/die ag26b6@vis*) (map ag2565@find-library-by-spec/die ag26b7@inv*)))) (set! ag271f@ag256b@install-library ag256b@install-library)) (begin (set! ag256d@imported-label->binding (lambda (ag26d6@lab) (hashtable-ref ag2567@label->binding-table ag26d6@lab '#f))) (set! ag2720@ag256d@imported-label->binding ag256d@imported-label->binding)) (begin (set! ag256f@invoke-library (lambda (ag26d8@lib) ((lambda (ag26da@invoke) (if (procedure? ag26da@invoke) (begin (ag2533@set-library-invoke-state! ag26d8@lib (lambda () (assertion-violation 'invoke '"circularity detected" ag26d8@lib))) (for-each ag256f@invoke-library (ag2521@library-inv* ag26d8@lib)) (ag2533@set-library-invoke-state! ag26d8@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" ag26d8@lib))) (ag26da@invoke) (ag2533@set-library-invoke-state! ag26d8@lib '#t)) (void))) (ag2531@library-invoke-state ag26d8@lib)))) (set! ag2721@ag256f@invoke-library ag256f@invoke-library)) (begin (set! ag2571@visit-library (lambda (ag26dc@lib) ((lambda (ag26de@visit) (if (procedure? ag26de@visit) (begin (ag252f@set-library-visit-state! ag26dc@lib (lambda () (assertion-violation 'visit '"circularity detected" ag26dc@lib))) (for-each ag256f@invoke-library (ag251d@library-vis* ag26dc@lib)) (ag252f@set-library-visit-state! ag26dc@lib (lambda () (assertion-violation 'invoke '"first visit did not return" ag26dc@lib))) (ag26de@visit) (ag252f@set-library-visit-state! ag26dc@lib '#t)) (void))) (ag252d@library-visit-state ag26dc@lib)))) (set! ag2722@ag2571@visit-library ag2571@visit-library)) (begin (set! ag2573@invoke-library-by-spec (lambda (ag26e0@spec) (ag256f@invoke-library (ag2565@find-library-by-spec/die ag26e0@spec)))) (set! ag2723@ag2573@invoke-library-by-spec ag2573@invoke-library-by-spec)) (begin (set! ag2575@installed-libraries (lambda ag26e8 ((lambda (ag26e9) (if (= ag26e9 '1) (apply (lambda (ag26e2@all?) ((letrec ((ag26e4@f (lambda (ag26e6@ls) (if (null? ag26e6@ls) '() (if (or ag26e2@all? (ag253d@library-visible? (car ag26e6@ls))) (cons (car ag26e6@ls) (ag26e4@f (cdr ag26e6@ls))) (ag26e4@f (cdr ag26e6@ls))))))) ag26e4@f) ((ag24ff@current-library-collection)))) ag26e8) (if (= ag26e9 '0) (apply (lambda () (ag2575@installed-libraries '#f)) ag26e8) (error 'apply '"invalid arg count")))) (length ag26e8)))) (set! ag2724@ag2575@installed-libraries ag2575@installed-libraries)) (begin (set! ag2577@library-spec (lambda (ag26ea@x) (begin (if (not (ag250b@library? ag26ea@x)) (assertion-violation 'library-spec '"not a library" ag26ea@x) (void)) (list (ag250d@library-id ag26ea@x) (ag2511@library-name ag26ea@x) (ag2515@library-version ag26ea@x))))) (set! ag2725@ag2577@library-spec ag2577@library-spec)) (void))
(begin (set! ag2729@build-global-define (unspecified)) (set! ag279a@build-lambda (unspecified)) (set! ag279c@build-case-lambda (unspecified)) (set! ag279e@build-let (unspecified)) (set! ag27cc@build-sequence (unspecified)) (set! ag27ce@build-void (unspecified)) (set! ag27d0@build-letrec (unspecified)) (set! ag27d2@build-letrec* (unspecified)) (set! ag27d4@build-library-letrec* (unspecified)) (set! ag27d6@build-receive (unspecified)) (begin (set! ag2729@build-global-define (lambda (ag27d7@x) (ag27ce@build-void))) (set! ag2861@ag2729@build-global-define ag2729@build-global-define)) (begin (set! ag279a@build-lambda (lambda (ag27d9@ae ag27da@vars ag27db@exp) (list 'lambda ag27da@vars ag27db@exp))) (set! ag2862@ag279a@build-lambda ag279a@build-lambda)) (begin (set! ag279c@build-case-lambda (lambda (ag27df@ae ag27e0@vars* ag27e1@exp*) ((lambda (ag27e6@build-error ag27e8@build-pred ag27ea@build-apply ag27ec@expand-case-lambda) (begin (set! ag27e6@build-error (lambda (ag281d@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! ag27e8@build-pred (lambda (ag2805@ae ag2806@n ag2807@vars) (call-with-values (lambda () ((letrec ((ag280f@f (lambda (ag2811@vars ag2812@count) (if (pair? ag2811@vars) (ag280f@f (cdr ag2811@vars) (+ ag2812@count '1)) (if (null? ag2811@vars) (values ag2812@count '=) (values ag2812@count '>=)))))) ag280f@f) ag2807@vars '0)) (lambda (ag2815@ag280c ag2816@ag280e) ((lambda (ag2819@pred ag281a@count) (list (list 'primitive ag2819@pred) ag2806@n (list 'quote ag281a@count))) ag2816@ag280e ag2815@ag280c))))) (set! ag27ea@build-apply (lambda (ag27fd@ae ag27fe@g ag27ff@vars ag2800@exp) (list '(primitive apply) (ag279a@build-lambda ag27fd@ae ag27ff@vars ag2800@exp) ag27fe@g))) (set! ag27ec@expand-case-lambda (lambda (ag27ed@ae ag27ee@vars ag27ef@exp*) ((lambda (ag27f3@g ag27f4@n) (list 'lambda ag27f3@g (ag279e@build-let ag27ed@ae (list ag27f4@n) (list (list '(primitive length) ag27f3@g)) ((letrec ((ag27f7@f (lambda (ag27f9@vars* ag27fa@exp*) (if (null? ag27f9@vars*) (ag27e6@build-error ag27ed@ae) (list 'if (ag27e8@build-pred ag27ed@ae ag27f4@n (car ag27f9@vars*)) (ag27ea@build-apply ag27ed@ae ag27f3@g (car ag27f9@vars*) (car ag27fa@exp*)) (ag27f7@f (cdr ag27f9@vars*) (cdr ag27fa@exp*))))))) ag27f7@f) ag27e0@vars* ag27ef@exp*)))) (gensym) (gensym)))) (if (= (length ag27e1@exp*) '1) (ag279a@build-lambda ag27df@ae (car ag27e0@vars*) (car ag27e1@exp*)) (ag27ec@expand-case-lambda ag27df@ae ag27e0@vars* ag27e1@exp*)))) '#f '#f '#f '#f))) (set! ag2863@ag279c@build-case-lambda ag279c@build-case-lambda)) (begin (set! ag279e@build-let (lambda (ag281f@ae ag2820@lhs* ag2821@rhs* ag2822@body) (cons (ag279a@build-lambda ag281f@ae ag2820@lhs* ag2822@body) ag2821@rhs*))) (set! ag2864@ag279e@build-let ag279e@build-let)) (begin (set! ag27cc@build-sequence (lambda (ag2827@ae ag2828@exps) ((letrec ((ag282b@loop (lambda (ag282d@exps) (if (null? (cdr ag282d@exps)) (car ag282d@exps) (if (equal? (car ag282d@exps) (ag27ce@build-void)) (ag282b@loop (cdr ag282d@exps)) (cons 'begin ag282d@exps)))))) ag282b@loop) ag2828@exps))) (set! ag2865@ag27cc@build-sequence ag27cc@build-sequence)) (begin (set! ag27ce@build-void (lambda () '((primitive void)))) (set! ag2866@ag27ce@build-void ag27ce@build-void)) (begin (set! ag27d0@build-letrec (lambda (ag282f@ae ag2830@vars ag2831@val-exps ag2832@body-exp) (if (null? ag2830@vars) ag2832@body-exp (list 'letrec (map list ag2830@vars ag2831@val-exps) ag2832@body-exp)))) (set! ag2867@ag27d0@build-letrec ag27d0@build-letrec)) (begin (set! ag27d2@build-letrec* (lambda (ag2837@ae ag2838@vars ag2839@val-exps ag283a@body-exp) (if (null? ag2838@vars) ag283a@body-exp (ag279e@build-let ag2837@ae ag2838@vars (map (lambda (ag283f@x) (list 'quote '#f)) ag2838@vars) (ag27cc@build-sequence ag2837@ae (append (map (lambda (ag2841@lhs ag2842@rhs) (list 'set! ag2841@lhs ag2842@rhs)) ag2838@vars ag2839@val-exps) (list ag283a@body-exp))))))) (set! ag2868@ag27d2@build-letrec* ag27d2@build-letrec*)) (begin (set! ag27d4@build-library-letrec* (lambda (ag2845@ae ag2846@name ag2847@vars ag2848@locs ag2849@val-exps ag284a@body-exp) (cons 'begin (append (map (lambda (ag2851@var) (cons 'set! (cons ag2851@var '((unspecified))))) ag2847@vars) (append (map (lambda (ag2853@var ag2854@loc ag2855@val-exp) (list 'begin (list 'set! ag2853@var ag2855@val-exp) (list 'set! ag2854@loc ag2853@var))) ag2847@vars ag2848@locs ag2849@val-exps) (list ag284a@body-exp)))))) (set! ag2869@ag27d4@build-library-letrec* ag27d4@build-library-letrec*)) (begin (set! ag27d6@build-receive (lambda (ag2859@ae ag285a@vars ag285b@producer ag285c@body*) (begin (display '"************** in ") (cons 'receive (cons ag285a@vars (cons ag285b@producer ag285c@body*)))))) (set! ag286a@ag27d6@build-receive ag27d6@build-receive)) (void))
(begin (set! ag2879@file-options-macro (unspecified)) (set! ag287b@set-cons (unspecified)) (set! ag287d@set-union (unspecified)) (set! ag2882@top-mark* (unspecified)) (set! ag2884@top-marked? (unspecified)) (set! ag2886@gen-lexical (unspecified)) (set! ag2888@gen-global (unspecified)) (set! ag288a@gen-label (unspecified)) (set! ag288c@gen-top-level-label (unspecified)) (set! ag288e@gen-define-label+loc (unspecified)) (set! ag2890@gen-define-label (unspecified)) (set! ag289a@rib? (unspecified)) (set! ag289c@rib-sym* (unspecified)) (set! ag289e@set-rib-sym*! (unspecified)) (set! ag28a0@rib-mark** (unspecified)) (set! ag28a2@set-rib-mark**! (unspecified)) (set! ag28a4@rib-label* (unspecified)) (set! ag28a6@set-rib-label*! (unspecified)) (set! ag28a8@rib-sealed/freq (unspecified)) (set! ag28aa@set-rib-sealed/freq! (unspecified)) (set! ag28ac@rib-cache (unspecified)) (set! ag28ae@set-rib-cache! (unspecified)) (set! ag28b0@dummy (unspecified)) (set! ag28b2@make-empty-rib (unspecified)) (set! ag28b4@extend-rib! (unspecified)) (set! ag28b6@extend-rib/nc! (unspecified)) (set! ag28b8@make-rib-map (unspecified)) (set! ag28ba@seal-rib! (unspecified)) (set! ag28bc@unseal-rib! (unspecified)) (set! ag28be@make-full-rib (unspecified)) (set! ag28c0@rp (unspecified)) (set! ag28ca@stx? (unspecified)) (set! ag28cc@stx-expr (unspecified)) (set! ag28ce@set-stx-expr! (unspecified)) (set! ag28d0@stx-mark* (unspecified)) (set! ag28d2@set-stx-mark*! (unspecified)) (set! ag28d4@stx-subst* (unspecified)) (set! ag28d6@set-stx-subst*! (unspecified)) (set! ag28d8@stx-ae* (unspecified)) (set! ag28da@set-stx-ae*! (unspecified)) (set! ag28dc@dummy (unspecified)) (set! ag28de@datum->stx (unspecified)) (set! ag28e0@gen-mark (unspecified)) (set! ag28e2@anti-mark (unspecified)) (set! ag28e4@anti-mark? (unspecified)) (set! ag28e6@mkstx (unspecified)) (set! ag28e8@add-mark (unspecified)) (set! ag28ea@add-subst (unspecified)) (set! ag28ec@syntax-kind? (unspecified)) (set! ag28ee@syntax-vector->list (unspecified)) (set! ag28f0@syntax-pair? (unspecified)) (set! ag28f2@syntax-vector? (unspecified)) (set! ag28f4@syntax-null? (unspecified)) (set! ag28f6@syntax-list? (unspecified)) (set! ag28f8@syntax-car (unspecified)) (set! ag28fa@syntax-cdr (unspecified)) (set! ag28fc@syntax->list (unspecified)) (set! ag28fe@id? (unspecified)) (set! ag2900@id->sym (unspecified)) (set! ag2902@bound-id=? (unspecified)) (set! ag2904@free-id=? (unspecified)) (set! ag2906@valid-bound-ids? (unspecified)) (set! ag2908@distinct-bound-ids? (unspecified)) (set! ag290a@bound-id-member? (unspecified)) (set! ag290c@self-evaluating? (unspecified)) (set! ag290e@strip-annotations (unspecified)) (set! ag2910@strip (unspecified)) (set! ag2912@stx->datum (unspecified)) (set! ag2914@id->label (unspecified)) (set! ag2916@label->binding (unspecified)) (set! ag2918@make-binding (unspecified)) (set! ag291a@binding-type (unspecified)) (set! ag291c@binding-value (unspecified)) (set! ag291e@raise-unbound-error (unspecified)) (set! ag2920@syntax-type (unspecified)) (set! ag292e@sanitize-binding (unspecified)) (set! ag2930@make-variable-transformer (unspecified)) (set! ag2932@variable-transformer? (unspecified)) (set! ag2934@variable-transformer-procedure (unspecified)) (set! ag2936@make-eval-transformer (unspecified)) (set! ag2a87@parse-define (unspecified)) (set! ag2a89@parse-define-syntax (unspecified)) (set! ag2a8b@scheme-stx-hashtable (unspecified)) (set! ag2a8d@scheme-stx (unspecified)) (set! ag2a8f@lexical-var (unspecified)) (set! ag2a91@lexical-mutable? (unspecified)) (set! ag2a93@set-lexical-mutable! (unspecified)) (set! ag2a95@add-lexical (unspecified)) (set! ag2a97@add-lexicals (unspecified)) (set! ag2a99@letrec-helper (unspecified)) (set! ag2a9b@letrec-transformer (unspecified)) (set! ag2a9d@letrec*-transformer (unspecified)) (set! ag2a9f@fluid-let-syntax-transformer (unspecified)) (set! ag2aa1@type-descriptor-transformer (unspecified)) (set! ag2aa3@record-type-descriptor-transformer (unspecified)) (set! ag2aa5@record-constructor-descriptor-transformer (unspecified)) (set! ag2aa7@when-macro (unspecified)) (set! ag2aa9@unless-macro (unspecified)) (set! ag2aab@if-transformer (unspecified)) (set! ag2aad@and-transformer (unspecified)) (set! ag2aaf@or-transformer (unspecified)) (set! ag2ab1@case-macro (unspecified)) (set! ag2ab3@quote-transformer (unspecified)) (set! ag2ab5@case-lambda-transformer (unspecified)) (set! ag2ab7@lambda-transformer (unspecified)) (set! ag2ab9@bless (unspecified)) (set! ag2abb@with-syntax-macro (unspecified)) (set! ag2abd@invalid-fmls-error (unspecified)) (set! ag2abf@let-macro (unspecified)) (set! ag2ac1@let-values-macro (unspecified)) (set! ag2ac3@let*-values-macro (unspecified)) (set! ag2ac5@trace-lambda-macro (unspecified)) (set! ag2ac7@trace-define-macro (unspecified)) (set! ag2ac9@trace-define-syntax-macro (unspecified)) (set! ag2acb@trace-let/rec-syntax (unspecified)) (set! ag2acd@trace-let-syntax-macro (unspecified)) (set! ag2acf@trace-letrec-syntax-macro (unspecified)) (set! ag2ad1@guard-macro (unspecified)) (set! ag2ad3@define-enumeration-macro (unspecified)) (set! ag2ad5@time-macro (unspecified)) (set! ag2ad7@delay-macro (unspecified)) (set! ag2ad9@assert-macro (unspecified)) (set! ag2adb@endianness-macro (unspecified)) (set! ag2add@identifier-syntax-macro (unspecified)) (set! ag2adf@do-macro (unspecified)) (set! ag2ae1@let*-macro (unspecified)) (set! ag2ae3@or-macro (unspecified)) (set! ag2ae5@and-macro (unspecified)) (set! ag2ae7@cond-macro (unspecified)) (set! ag2ae9@do-include (unspecified)) (set! ag2aeb@include-macro (unspecified)) (set! ag2aed@include-into-macro (unspecified)) (set! ag2aef@syntax-rules-macro (unspecified)) (set! ag2af1@quasiquote-macro (unspecified)) (set! ag2af3@quasisyntax-macro (unspecified)) (set! ag2af5@define-struct-macro (unspecified)) (set! ag2af7@define-record-type-macro (unspecified)) (set! ag2af9@define-condition-type-macro (unspecified)) (set! ag2afb@incorrect-usage-macro (unspecified)) (set! ag2afd@parameterize-macro (unspecified)) (set! ag2aff@foreign-call-transformer (unspecified)) (set! ag2b01@convert-pattern (unspecified)) (set! ag2b03@syntax-dispatch (unspecified)) (set! ag2b05@ellipsis? (unspecified)) (set! ag2b07@underscore? (unspecified)) (set! ag2b09@verify-literals (unspecified)) (set! ag2b0b@syntax-case-transformer (unspecified)) (set! ag2b0d@ellipsis-map (unspecified)) (set! ag2b0f@syntax-transformer (unspecified)) (set! ag2b11@core-macro-transformer (unspecified)) (set! ag2b13@symbol-macro (unspecified)) (set! ag2b15@macro-transformer (unspecified)) (set! ag2b17@local-macro-transformer (unspecified)) (set! ag2b19@do-macro-call (unspecified)) (set! ag2b1b@chi-macro (unspecified)) (set! ag2b1d@chi-local-macro (unspecified)) (set! ag2b1f@chi-global-macro (unspecified)) (set! ag2b21@chi-expr* (unspecified)) (set! ag2b23@chi-application (unspecified)) (set! ag2b25@chi-expr (unspecified)) (set! ag2b27@chi-set! (unspecified)) (set! ag2b29@verify-formals (unspecified)) (set! ag2b2b@chi-lambda-clause (unspecified)) (set! ag2b2d@chi-lambda-clause* (unspecified)) (set! ag2b2f@chi-defun (unspecified)) (set! ag2b31@chi-rhs (unspecified)) (set! ag2b33@expand-interaction-rhs*/init* (unspecified)) (set! ag2b35@chi-rhs* (unspecified)) (set! ag2b37@find-bound=? (unspecified)) (set! ag2b39@find-dups (unspecified)) (set! ag2b3b@chi-internal (unspecified)) (set! ag2b3d@parse-module (unspecified)) (set! ag2b47@module-interface? (unspecified)) (set! ag2b49@module-interface-first-mark (unspecified)) (set! ag2b4b@set-module-interface-first-mark! (unspecified)) (set! ag2b4d@module-interface-exp-id-vec (unspecified)) (set! ag2b4f@set-module-interface-exp-id-vec! (unspecified)) (set! ag2b51@module-interface-exp-lab-vec (unspecified)) (set! ag2b53@set-module-interface-exp-lab-vec! (unspecified)) (set! ag2b55@dummy (unspecified)) (set! ag2b57@module-interface-exp-id* (unspecified)) (set! ag2b59@chi-internal-module (unspecified)) (set! ag2b5b@chi-body* (unspecified)) (set! ag2b5d@expand-transformer (unspecified)) (set! ag2b5f@parse-exports (unspecified)) (set! ag2b61@parse-library-name (unspecified)) (set! ag2b63@parse-library (unspecified)) (set! ag2b65@parse-import-spec* (unspecified)) (set! ag2b67@make-top-rib (unspecified)) (set! ag2b69@make-collector (unspecified)) (set! ag2b6b@inv-collector (unspecified)) (set! ag2b6d@vis-collector (unspecified)) (set! ag2b6f@imp-collector (unspecified)) (set! ag2b71@chi-library-internal (unspecified)) (set! ag2b73@chi-interaction-expr (unspecified)) (set! ag2b75@library-body-expander (unspecified)) (set! ag2b77@core-library-expander (unspecified)) (set! ag2b79@parse-top-level-program (unspecified)) (set! ag2b7b@top-level-expander (unspecified)) (set! ag2b7d@rp (unspecified)) (set! ag2b87@env? (unspecified)) (set! ag2b89@env-names (unspecified)) (set! ag2b8b@set-env-names! (unspecified)) (set! ag2b8d@env-labels (unspecified)) (set! ag2b8f@set-env-labels! (unspecified)) (set! ag2b91@env-itc (unspecified)) (set! ag2b93@set-env-itc! (unspecified)) (set! ag2b95@dummy (unspecified)) (set! ag2b97@rp (unspecified)) (set! ag2ba1@interaction-env? (unspecified)) (set! ag2ba3@interaction-env-rib (unspecified)) (set! ag2ba5@set-interaction-env-rib! (unspecified)) (set! ag2ba7@interaction-env-r (unspecified)) (set! ag2ba9@set-interaction-env-r! (unspecified)) (set! ag2bab@interaction-env-locs (unspecified)) (set! ag2bad@set-interaction-env-locs! (unspecified)) (set! ag2baf@dummy (unspecified)) (set! ag2bb1@interaction-environment-symbols (unspecified)) (set! ag2bb3@environment-bindings (unspecified)) (set! ag2bb5@parse-binding (unspecified)) (set! ag2bb7@environment? (unspecified)) (set! ag2bb9@environment-symbols (unspecified)) (set! ag2bbb@environment (unspecified)) (set! ag2bbd@null-environment (unspecified)) (set! ag2bbf@scheme-report-environment (unspecified)) (set! ag2bc1@expand (unspecified)) (set! ag2bc3@eval (unspecified)) (set! ag2bc5@library-expander (unspecified)) (set! ag2bc7@boot-library-expand (unspecified)) (set! ag2bc9@rev-map-append (unspecified)) (set! ag2bcb@build-exports (unspecified)) (set! ag2bcd@make-export-subst (unspecified)) (set! ag2bcf@make-export-env/macros (unspecified)) (set! ag2bd1@generate-temporaries (unspecified)) (set! ag2bd3@free-identifier=? (unspecified)) (set! ag2bd5@bound-identifier=? (unspecified)) (set! ag2bd7@make-source-condition (unspecified)) (set! ag2bd9@extract-position-condition (unspecified)) (set! ag2bdb@expression-position (unspecified)) (set! ag2bdd@assertion-error (unspecified)) (set! ag2bdf@syntax-error (unspecified)) (set! ag2be1@syntax-violation* (unspecified)) (set! ag2be3@syntax-violation (unspecified)) (set! ag2be5@identifier? (unspecified)) (set! ag2be7@datum->syntax (unspecified)) (set! ag2be9@syntax->datum (unspecified)) (set! ag2beb@ungensym-all (unspecified)) (set! ag2bed@compile-r6rs-top-level (unspecified)) (set! ag2bef@pre-compile-r6rs-top-level (unspecified)) (set! ag2bf1@interaction-environment (unspecified)) (set! ag2bf3@top-level-context (unspecified)) (begin (set! ag2879@file-options-macro (lambda (ag2bf4@x) ((lambda (ag2bf7@valid-option?) (begin (set! ag2bf7@valid-option? (lambda (ag2c00@x) (and (ag28fe@id? ag2c00@x) (memq (ag2900@id->sym ag2c00@x) '(no-fail no-create no-truncate))))) ((lambda (ag2bf8@t) ((lambda (ag2bfa@ls/false) (if (and ag2bfa@ls/false (apply (lambda (ag2bfc@opt*) (for-all ag2bf7@valid-option? ag2bfc@opt*)) ag2bfa@ls/false)) (apply (lambda (ag2bfe@opt*) (ag2ab9@bless (list 'make-file-options (list 'quote ag2bfe@opt*)))) ag2bfa@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag2bf8@t))) (ag2b03@syntax-dispatch ag2bf8@t '(_ . each-any)))) ag2bf4@x))) '#f))) (set! ag450c@ag2879@file-options-macro ag2879@file-options-macro)) (begin (set! ag287b@set-cons (lambda (ag2c02@x ag2c03@ls) (if (memq ag2c02@x ag2c03@ls) ag2c03@ls (cons ag2c02@x ag2c03@ls)))) (set! ag450d@ag287b@set-cons ag287b@set-cons)) (begin (set! ag287d@set-union (lambda (ag2c06@ls1 ag2c07@ls2) (if (null? ag2c06@ls1) ag2c07@ls2 (if (memq (car ag2c06@ls1) ag2c07@ls2) (ag287d@set-union (cdr ag2c06@ls1) ag2c07@ls2) (cons (car ag2c06@ls1) (ag287d@set-union (cdr ag2c06@ls1) ag2c07@ls2)))))) (set! ag450e@ag287d@set-union ag287d@set-union)) (begin (set! ag2882@top-mark* '(top)) (set! ag450f@ag2882@top-mark* ag2882@top-mark*)) (begin (set! ag2884@top-marked? (lambda (ag2c0a@m*) (memq 'top ag2c0a@m*))) (set! ag4510@ag2884@top-marked? ag2884@top-marked?)) (begin (set! ag2886@gen-lexical (lambda (ag2c0c@sym) (if (symbol? ag2c0c@sym) (gensym ag2c0c@sym) (if (ag28ca@stx? ag2c0c@sym) (ag2886@gen-lexical (ag2900@id->sym ag2c0c@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" ag2c0c@sym))))) (set! ag4511@ag2886@gen-lexical ag2886@gen-lexical)) (begin (set! ag2888@gen-global (lambda (ag2c0e@x) (ag2886@gen-lexical ag2c0e@x))) (set! ag4512@ag2888@gen-global ag2888@gen-global)) (begin (set! ag288a@gen-label (lambda (ag2c10@_) (gensym))) (set! ag4513@ag288a@gen-label ag288a@gen-label)) (begin (set! ag288c@gen-top-level-label (lambda (ag2c12@id ag2c13@rib) ((lambda (ag2c17@find) (begin (set! ag2c17@find (lambda (ag2c22@sym ag2c23@mark* ag2c24@sym* ag2c25@mark** ag2c26@label*) (and (pair? ag2c24@sym*) (if (and (eq? ag2c22@sym (car ag2c24@sym*)) (same-marks? ag2c23@mark* (car ag2c25@mark**))) (car ag2c26@label*) (ag2c17@find ag2c22@sym ag2c23@mark* (cdr ag2c24@sym*) (cdr ag2c25@mark**) (cdr ag2c26@label*)))))) ((lambda (ag2c18@sym ag2c19@mark*) ((lambda (ag2c1c@sym*) ((lambda (ag2c1e@t) (if ag2c1e@t ((lambda (ag2c20@label) (if (ag2720@ag256d@imported-label->binding ag2c20@label) (gensym) ag2c20@label)) ag2c1e@t) (gensym))) (and (memq ag2c18@sym (ag289c@rib-sym* ag2c13@rib)) (ag2c17@find ag2c18@sym ag2c19@mark* ag2c1c@sym* (ag28a0@rib-mark** ag2c13@rib) (ag28a4@rib-label* ag2c13@rib))))) (ag289c@rib-sym* ag2c13@rib))) (ag2900@id->sym ag2c12@id) (ag28d0@stx-mark* ag2c12@id)))) '#f))) (set! ag4514@ag288c@gen-top-level-label ag288c@gen-top-level-label)) (begin (set! ag288e@gen-define-label+loc (lambda (ag2c2c@id ag2c2d@rib) ((lambda (ag2c30@t) (if ag2c30@t ((lambda (ag2c32@env) ((lambda (ag2c34@label ag2c35@locs) (values ag2c34@label ((lambda (ag2c38@t) (if ag2c38@t (cdr ag2c38@t) ((lambda (ag2c3a@loc) (begin (ag2bad@set-interaction-env-locs! ag2c32@env (cons (cons ag2c34@label ag2c3a@loc) ag2c35@locs)) ag2c3a@loc)) (ag2886@gen-lexical ag2c2c@id)))) (assq ag2c34@label ag2c35@locs)))) (ag288c@gen-top-level-label ag2c2c@id ag2c2d@rib) (ag2bab@interaction-env-locs ag2c32@env))) ag2c30@t) (values (gensym) (ag2886@gen-lexical ag2c2c@id)))) (ag2bf3@top-level-context)))) (set! ag4515@ag288e@gen-define-label+loc ag288e@gen-define-label+loc)) (begin (set! ag2890@gen-define-label (lambda (ag2c3c@id ag2c3d@rib) (if (ag2bf3@top-level-context) (ag288c@gen-top-level-label ag2c3c@id ag2c3d@rib) (gensym)))) (set! ag4516@ag2890@gen-define-label ag2890@gen-define-label)) (begin (set! ag289a@rib? (lambda (ag2c40@x) (and (simple-struct? ag2c40@x) (eq? (simple-struct-name ag2c40@x) 'rib)))) (set! ag4517@ag289a@rib? ag289a@rib?)) (begin (set! ag289c@rib-sym* (lambda (ag2c42@x) (simple-struct-ref ag2c42@x '0))) (set! ag4518@ag289c@rib-sym* ag289c@rib-sym*)) (begin (set! ag289e@set-rib-sym*! (lambda (ag2c44@x ag2c45@val) (simple-struct-set! ag2c44@x '0 ag2c45@val))) (set! ag4519@ag289e@set-rib-sym*! ag289e@set-rib-sym*!)) (begin (set! ag28a0@rib-mark** (lambda (ag2c48@x) (simple-struct-ref ag2c48@x '1))) (set! ag451a@ag28a0@rib-mark** ag28a0@rib-mark**)) (begin (set! ag28a2@set-rib-mark**! (lambda (ag2c4a@x ag2c4b@val) (simple-struct-set! ag2c4a@x '1 ag2c4b@val))) (set! ag451b@ag28a2@set-rib-mark**! ag28a2@set-rib-mark**!)) (begin (set! ag28a4@rib-label* (lambda (ag2c4e@x) (simple-struct-ref ag2c4e@x '2))) (set! ag451c@ag28a4@rib-label* ag28a4@rib-label*)) (begin (set! ag28a6@set-rib-label*! (lambda (ag2c50@x ag2c51@val) (simple-struct-set! ag2c50@x '2 ag2c51@val))) (set! ag451d@ag28a6@set-rib-label*! ag28a6@set-rib-label*!)) (begin (set! ag28a8@rib-sealed/freq (lambda (ag2c54@x) (simple-struct-ref ag2c54@x '3))) (set! ag451e@ag28a8@rib-sealed/freq ag28a8@rib-sealed/freq)) (begin (set! ag28aa@set-rib-sealed/freq! (lambda (ag2c56@x ag2c57@val) (simple-struct-set! ag2c56@x '3 ag2c57@val))) (set! ag451f@ag28aa@set-rib-sealed/freq! ag28aa@set-rib-sealed/freq!)) (begin (set! ag28ac@rib-cache (lambda (ag2c5a@x) (simple-struct-ref ag2c5a@x '4))) (set! ag4520@ag28ac@rib-cache ag28ac@rib-cache)) (begin (set! ag28ae@set-rib-cache! (lambda (ag2c5c@x ag2c5d@val) (simple-struct-set! ag2c5c@x '4 ag2c5d@val))) (set! ag4521@ag28ae@set-rib-cache! ag28ae@set-rib-cache!)) (begin (set! ag28b0@dummy '3) (set! ag4522@ag28b0@dummy ag28b0@dummy)) (begin (set! ag28b2@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! ag4523@ag28b2@make-empty-rib ag28b2@make-empty-rib)) (begin (set! ag28b4@extend-rib! (lambda (ag2c60@rib ag2c61@id ag2c62@label) ((lambda (ag2c67@find) (begin (set! ag2c67@find (lambda (ag2c74@sym ag2c75@mark* ag2c76@sym* ag2c77@mark** ag2c78@label*) (and (pair? ag2c76@sym*) (if (and (eq? ag2c74@sym (car ag2c76@sym*)) (same-marks? ag2c75@mark* (car ag2c77@mark**))) ag2c78@label* (ag2c67@find ag2c74@sym ag2c75@mark* (cdr ag2c76@sym*) (cdr ag2c77@mark**) (cdr ag2c78@label*)))))) (begin (if (ag28a8@rib-sealed/freq ag2c60@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" ag2c60@rib) (void)) ((lambda (ag2c68@sym ag2c69@mark*) ((lambda (ag2c6c@sym*) ((lambda (ag2c6e@t) (if ag2c6e@t ((lambda (ag2c70@p) (if (not (eq? ag2c62@label (car ag2c70@p))) (if (ag2bf3@top-level-context) (set-car! ag2c70@p ag2c62@label) (ag2be3@syntax-violation '#f '"multiple definitions of identifier" ag2c61@id)) (void))) ag2c6e@t) (begin (if (ag28ac@rib-cache ag2c60@rib) (hashtable-update! (ag28ac@rib-cache ag2c60@rib) ag2c68@sym (lambda (ag2c72@e) (cons (cons ag2c69@mark* ag2c62@label) ag2c72@e)) '()) (void)) (ag289e@set-rib-sym*! ag2c60@rib (cons ag2c68@sym ag2c6c@sym*)) (ag28a2@set-rib-mark**! ag2c60@rib (cons ag2c69@mark* (ag28a0@rib-mark** ag2c60@rib))) (ag28a6@set-rib-label*! ag2c60@rib (cons ag2c62@label (ag28a4@rib-label* ag2c60@rib)))))) (and (memq ag2c68@sym (ag289c@rib-sym* ag2c60@rib)) (ag2c67@find ag2c68@sym ag2c69@mark* ag2c6c@sym* (ag28a0@rib-mark** ag2c60@rib) (ag28a4@rib-label* ag2c60@rib))))) (ag289c@rib-sym* ag2c60@rib))) (ag2900@id->sym ag2c61@id) (ag28d0@stx-mark* ag2c61@id))))) '#f))) (set! ag4524@ag28b4@extend-rib! ag28b4@extend-rib!)) (begin (set! ag28b6@extend-rib/nc! (lambda (ag2c7e@rib ag2c7f@id ag2c80@label) ((lambda (ag2c84@sym ag2c85@mark*) ((lambda (ag2c88@sym*) (begin (if (ag28ac@rib-cache ag2c7e@rib) (hashtable-update! (ag28ac@rib-cache ag2c7e@rib) ag2c84@sym (lambda (ag2c8a@e) (cons (cons ag2c85@mark* ag2c80@label) ag2c8a@e)) '()) (void)) (ag289e@set-rib-sym*! ag2c7e@rib (cons ag2c84@sym ag2c88@sym*)) (ag28a2@set-rib-mark**! ag2c7e@rib (cons ag2c85@mark* (ag28a0@rib-mark** ag2c7e@rib))) (ag28a6@set-rib-label*! ag2c7e@rib (cons ag2c80@label (ag28a4@rib-label* ag2c7e@rib))))) (ag289c@rib-sym* ag2c7e@rib))) (ag2900@id->sym ag2c7f@id) (ag28d0@stx-mark* ag2c7f@id)))) (set! ag4525@ag28b6@extend-rib/nc! ag28b6@extend-rib/nc!)) (begin (set! ag28b8@make-rib-map (lambda (ag2c8c@sym*) ((lambda (ag2c8e@ht) ((letrec ((ag2c90@f (lambda (ag2c92@i ag2c93@sym*) (if (null? ag2c93@sym*) ag2c8e@ht (begin (hashtable-update! ag2c8e@ht (car ag2c93@sym*) (lambda (ag2c96@x) (cons ag2c92@i ag2c96@x)) '()) (ag2c90@f (+ ag2c92@i '1) (cdr ag2c93@sym*))))))) ag2c90@f) '0 ag2c8c@sym*)) (make-eq-hashtable)))) (set! ag4526@ag28b8@make-rib-map ag28b8@make-rib-map)) (begin (set! ag28ba@seal-rib! (lambda (ag2c98@rib) ((lambda (ag2c9a@sym*) (if (not (null? ag2c9a@sym*)) (begin (ag289e@set-rib-sym*! ag2c98@rib (list->vector ag2c9a@sym*)) (ag28a2@set-rib-mark**! ag2c98@rib (list->vector (ag28a0@rib-mark** ag2c98@rib))) (ag28a6@set-rib-label*! ag2c98@rib (list->vector (ag28a4@rib-label* ag2c98@rib))) (ag28aa@set-rib-sealed/freq! ag2c98@rib (ag28b8@make-rib-map ag2c9a@sym*))) (void))) (ag289c@rib-sym* ag2c98@rib)))) (set! ag4527@ag28ba@seal-rib! ag28ba@seal-rib!)) (begin (set! ag28bc@unseal-rib! (lambda (ag2c9c@rib) (if (ag28a8@rib-sealed/freq ag2c9c@rib) (begin (ag28aa@set-rib-sealed/freq! ag2c9c@rib '#f) (ag289e@set-rib-sym*! ag2c9c@rib (vector->list (ag289c@rib-sym* ag2c9c@rib))) (ag28a2@set-rib-mark**! ag2c9c@rib (vector->list (ag28a0@rib-mark** ag2c9c@rib))) (ag28a6@set-rib-label*! ag2c9c@rib (vector->list (ag28a4@rib-label* ag2c9c@rib)))) (void)))) (set! ag4528@ag28bc@unseal-rib! ag28bc@unseal-rib!)) (begin (set! ag28be@make-full-rib (lambda (ag2c9e@id* ag2c9f@label*) ((lambda (ag2ca2@r) (begin (ag28ba@seal-rib! ag2ca2@r) ag2ca2@r)) (make-simple-struct 'rib '6 (list (map ag2900@id->sym ag2c9e@id*) (map ag28d0@stx-mark* ag2c9e@id*) ag2c9f@label* '#f '#f))))) (set! ag4529@ag28be@make-full-rib ag28be@make-full-rib)) (begin (set! ag28c0@rp (ag2452@ag232e@make-record-printer 'stx (lambda (ag2ca4@x ag2ca5@p ag2ca6@wr) (begin (display '"#<syntax " ag2ca5@p) (write (ag2912@stx->datum ag2ca4@x) ag2ca5@p) ((lambda (ag2caa@expr) (if (ag244a@ag231e@annotation? ag2caa@expr) ((lambda (ag2cac@src) (if (pair? ag2cac@src) (begin (display '" [" ag2ca5@p) (display (cdr ag2cac@src) ag2ca5@p) (display '" of " ag2ca5@p) (display (car ag2cac@src) ag2ca5@p) (display '"]" ag2ca5@p)) (void))) (ag244b@ag2320@annotation-source ag2caa@expr)) (void))) (ag28cc@stx-expr ag2ca4@x)) (display '">" ag2ca5@p))))) (set! ag452a@ag28c0@rp ag28c0@rp)) (begin (set! ag28ca@stx? (lambda (ag2cae@x) (and (simple-struct? ag2cae@x) (eq? (simple-struct-name ag2cae@x) 'stx)))) (set! ag452b@ag28ca@stx? ag28ca@stx?)) (begin (set! ag28cc@stx-expr (lambda (ag2cb0@x) (simple-struct-ref ag2cb0@x '0))) (set! ag452c@ag28cc@stx-expr ag28cc@stx-expr)) (begin (set! ag28ce@set-stx-expr! (lambda (ag2cb2@x ag2cb3@val) (simple-struct-set! ag2cb2@x '0 ag2cb3@val))) (set! ag452d@ag28ce@set-stx-expr! ag28ce@set-stx-expr!)) (begin (set! ag28d0@stx-mark* (lambda (ag2cb6@x) (simple-struct-ref ag2cb6@x '1))) (set! ag452e@ag28d0@stx-mark* ag28d0@stx-mark*)) (begin (set! ag28d2@set-stx-mark*! (lambda (ag2cb8@x ag2cb9@val) (simple-struct-set! ag2cb8@x '1 ag2cb9@val))) (set! ag452f@ag28d2@set-stx-mark*! ag28d2@set-stx-mark*!)) (begin (set! ag28d4@stx-subst* (lambda (ag2cbc@x) (simple-struct-ref ag2cbc@x '2))) (set! ag4530@ag28d4@stx-subst* ag28d4@stx-subst*)) (begin (set! ag28d6@set-stx-subst*! (lambda (ag2cbe@x ag2cbf@val) (simple-struct-set! ag2cbe@x '2 ag2cbf@val))) (set! ag4531@ag28d6@set-stx-subst*! ag28d6@set-stx-subst*!)) (begin (set! ag28d8@stx-ae* (lambda (ag2cc2@x) (simple-struct-ref ag2cc2@x '3))) (set! ag4532@ag28d8@stx-ae* ag28d8@stx-ae*)) (begin (set! ag28da@set-stx-ae*! (lambda (ag2cc4@x ag2cc5@val) (simple-struct-set! ag2cc4@x '3 ag2cc5@val))) (set! ag4533@ag28da@set-stx-ae*! ag28da@set-stx-ae*!)) (begin (set! ag28dc@dummy '3) (set! ag4534@ag28dc@dummy ag28dc@dummy)) (begin (set! ag28de@datum->stx (lambda (ag2cc8@id ag2cc9@datum) (make-simple-struct 'stx '5 (list ag2cc9@datum (ag28d0@stx-mark* ag2cc8@id) (ag28d4@stx-subst* ag2cc8@id) (ag28d8@stx-ae* ag2cc8@id))))) (set! ag4535@ag28de@datum->stx ag28de@datum->stx)) (begin (set! ag28e0@gen-mark (lambda () (string '#\m))) (set! ag4536@ag28e0@gen-mark ag28e0@gen-mark)) (begin (set! ag28e2@anti-mark '#f) (set! ag4537@ag28e2@anti-mark ag28e2@anti-mark)) (begin (set! ag28e4@anti-mark? not) (set! ag4538@ag28e4@anti-mark? ag28e4@anti-mark?)) (begin (set! ag28e6@mkstx (lambda (ag2ccc@e ag2ccd@m* ag2cce@s* ag2ccf@ae*) (if (and (ag28ca@stx? ag2ccc@e) (not (ag2884@top-marked? ag2ccd@m*))) (call-with-values (lambda () (join-wraps ag2ccd@m* ag2cce@s* ag2ccf@ae* ag2ccc@e)) (lambda (ag2cda@ag2cd5 ag2cdb@ag2cd7 ag2cdc@ag2cd9) ((lambda (ag2ce0@ae* ag2ce1@s* ag2ce2@m*) (make-simple-struct 'stx '5 (list (ag28cc@stx-expr ag2ccc@e) ag2ce2@m* ag2ce1@s* ag2ce0@ae*))) ag2cdc@ag2cd9 ag2cdb@ag2cd7 ag2cda@ag2cd5))) (make-simple-struct 'stx '5 (list ag2ccc@e ag2ccd@m* ag2cce@s* ag2ccf@ae*))))) (set! ag4539@ag28e6@mkstx ag28e6@mkstx)) (begin (set! ag28e8@add-mark (lambda (ag2ce6@m ag2ce7@e ag2ce8@ae) (ag28e6@mkstx ag2ce7@e (list ag2ce6@m) '(shift) (list ag2ce8@ae)))) (set! ag453a@ag28e8@add-mark ag28e8@add-mark)) (begin (set! ag28ea@add-subst (lambda (ag2cec@subst ag2ced@e) (ag28e6@mkstx ag2ced@e '() (list ag2cec@subst) '()))) (set! ag453b@ag28ea@add-subst ag28ea@add-subst)) (begin (set! ag28ec@syntax-kind? (lambda (ag2cf0@x ag2cf1@p?) (if (ag28ca@stx? ag2cf0@x) (ag28ec@syntax-kind? (ag28cc@stx-expr ag2cf0@x) ag2cf1@p?) (if (ag244a@ag231e@annotation? ag2cf0@x) (ag28ec@syntax-kind? (ag244c@ag2322@annotation-expression ag2cf0@x) ag2cf1@p?) (ag2cf1@p? ag2cf0@x))))) (set! ag453c@ag28ec@syntax-kind? ag28ec@syntax-kind?)) (begin (set! ag28ee@syntax-vector->list (lambda (ag2cf4@x) (if (ag28ca@stx? ag2cf4@x) ((lambda (ag2cf6@ls ag2cf7@m* ag2cf8@s* ag2cf9@ae*) (map (lambda (ag2cfe@x) (ag28e6@mkstx ag2cfe@x ag2cf7@m* ag2cf8@s* ag2cf9@ae*)) ag2cf6@ls)) (ag28ee@syntax-vector->list (ag28cc@stx-expr ag2cf4@x)) (ag28d0@stx-mark* ag2cf4@x) (ag28d4@stx-subst* ag2cf4@x) (ag28d8@stx-ae* ag2cf4@x)) (if (ag244a@ag231e@annotation? ag2cf4@x) (ag28ee@syntax-vector->list (ag244c@ag2322@annotation-expression ag2cf4@x)) (if (vector? ag2cf4@x) (vector->list ag2cf4@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" ag2cf4@x)))))) (set! ag453d@ag28ee@syntax-vector->list ag28ee@syntax-vector->list)) (begin (set! ag28f0@syntax-pair? (lambda (ag2d00@x) (ag28ec@syntax-kind? ag2d00@x pair?))) (set! ag453e@ag28f0@syntax-pair? ag28f0@syntax-pair?)) (begin (set! ag28f2@syntax-vector? (lambda (ag2d02@x) (ag28ec@syntax-kind? ag2d02@x vector?))) (set! ag453f@ag28f2@syntax-vector? ag28f2@syntax-vector?)) (begin (set! ag28f4@syntax-null? (lambda (ag2d04@x) (ag28ec@syntax-kind? ag2d04@x null?))) (set! ag4540@ag28f4@syntax-null? ag28f4@syntax-null?)) (begin (set! ag28f6@syntax-list? (lambda (ag2d06@x) (or (ag28f4@syntax-null? ag2d06@x) (and (ag28f0@syntax-pair? ag2d06@x) (ag28f6@syntax-list? (ag28fa@syntax-cdr ag2d06@x)))))) (set! ag4541@ag28f6@syntax-list? ag28f6@syntax-list?)) (begin (set! ag28f8@syntax-car (lambda (ag2d08@x) (if (ag28ca@stx? ag2d08@x) (ag28e6@mkstx (ag28f8@syntax-car (ag28cc@stx-expr ag2d08@x)) (ag28d0@stx-mark* ag2d08@x) (ag28d4@stx-subst* ag2d08@x) (ag28d8@stx-ae* ag2d08@x)) (if (ag244a@ag231e@annotation? ag2d08@x) (ag28f8@syntax-car (ag244c@ag2322@annotation-expression ag2d08@x)) (if (pair? ag2d08@x) (car ag2d08@x) (assertion-violation 'syntax-car '"BUG: not a pair" ag2d08@x)))))) (set! ag4542@ag28f8@syntax-car ag28f8@syntax-car)) (begin (set! ag28fa@syntax-cdr (lambda (ag2d0a@x) (if (ag28ca@stx? ag2d0a@x) (ag28e6@mkstx (ag28fa@syntax-cdr (ag28cc@stx-expr ag2d0a@x)) (ag28d0@stx-mark* ag2d0a@x) (ag28d4@stx-subst* ag2d0a@x) (ag28d8@stx-ae* ag2d0a@x)) (if (ag244a@ag231e@annotation? ag2d0a@x) (ag28fa@syntax-cdr (ag244c@ag2322@annotation-expression ag2d0a@x)) (if (pair? ag2d0a@x) (cdr ag2d0a@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" ag2d0a@x)))))) (set! ag4543@ag28fa@syntax-cdr ag28fa@syntax-cdr)) (begin (set! ag28fc@syntax->list (lambda (ag2d0c@x) (if (ag28f0@syntax-pair? ag2d0c@x) (cons (ag28f8@syntax-car ag2d0c@x) (ag28fc@syntax->list (ag28fa@syntax-cdr ag2d0c@x))) (if (ag28f4@syntax-null? ag2d0c@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" ag2d0c@x))))) (set! ag4544@ag28fc@syntax->list ag28fc@syntax->list)) (begin (set! ag28fe@id? (lambda (ag2d0e@x) (and (ag28ca@stx? ag2d0e@x) (symbol? (ag28cc@stx-expr ag2d0e@x))))) (set! ag4545@ag28fe@id? ag28fe@id?)) (begin (set! ag2900@id->sym (lambda (ag2d10@x) (ag28cc@stx-expr ag2d10@x))) (set! ag4546@ag2900@id->sym ag2900@id->sym)) (begin (set! ag2902@bound-id=? (lambda (ag2d12@x ag2d13@y) (and (eq? (ag2900@id->sym ag2d12@x) (ag2900@id->sym ag2d13@y)) (same-marks? (ag28d0@stx-mark* ag2d12@x) (ag28d0@stx-mark* ag2d13@y))))) (set! ag4547@ag2902@bound-id=? ag2902@bound-id=?)) (begin (set! ag2904@free-id=? (lambda (ag2d16@i ag2d17@j) ((lambda (ag2d1a@t0 ag2d1b@t1) (if (or ag2d1a@t0 ag2d1b@t1) (eq? ag2d1a@t0 ag2d1b@t1) (eq? (ag2900@id->sym ag2d16@i) (ag2900@id->sym ag2d17@j)))) (id->real-label ag2d16@i) (id->real-label ag2d17@j)))) (set! ag4548@ag2904@free-id=? ag2904@free-id=?)) (begin (set! ag2906@valid-bound-ids? (lambda (ag2d1e@id*) (and (for-all ag28fe@id? ag2d1e@id*) (ag2908@distinct-bound-ids? ag2d1e@id*)))) (set! ag4549@ag2906@valid-bound-ids? ag2906@valid-bound-ids?)) (begin (set! ag2908@distinct-bound-ids? (lambda (ag2d20@id*) (or (null? ag2d20@id*) (and (not (ag290a@bound-id-member? (car ag2d20@id*) (cdr ag2d20@id*))) (ag2908@distinct-bound-ids? (cdr ag2d20@id*)))))) (set! ag454a@ag2908@distinct-bound-ids? ag2908@distinct-bound-ids?)) (begin (set! ag290a@bound-id-member? (lambda (ag2d22@id ag2d23@id*) (and (pair? ag2d23@id*) (or (ag2902@bound-id=? ag2d22@id (car ag2d23@id*)) (ag290a@bound-id-member? ag2d22@id (cdr ag2d23@id*)))))) (set! ag454b@ag290a@bound-id-member? ag290a@bound-id-member?)) (begin (set! ag290c@self-evaluating? (lambda (ag2d26@x) (or (number? ag2d26@x) (string? ag2d26@x) (char? ag2d26@x) (boolean? ag2d26@x) (regexp? ag2d26@x) (bytevector? ag2d26@x)))) (set! ag454c@ag290c@self-evaluating? ag290c@self-evaluating?)) (begin (set! ag290e@strip-annotations (lambda (ag2d28@x) (if (pair? ag2d28@x) (cons (ag290e@strip-annotations (car ag2d28@x)) (ag290e@strip-annotations (cdr ag2d28@x))) (if (vector? ag2d28@x) (vector-map ag290e@strip-annotations ag2d28@x) (if (ag244a@ag231e@annotation? ag2d28@x) (ag2449@ag231c@annotation-stripped ag2d28@x) ag2d28@x))))) (set! ag454d@ag290e@strip-annotations ag290e@strip-annotations)) (begin (set! ag2910@strip (lambda (ag2d2a@x ag2d2b@m*) (if (ag2884@top-marked? ag2d2b@m*) (if (or (ag244a@ag231e@annotation? ag2d2a@x) (and (pair? ag2d2a@x) (ag244a@ag231e@annotation? (car ag2d2a@x))) (and (vector? ag2d2a@x) (> (vector-length ag2d2a@x) '0) (ag244a@ag231e@annotation? (vector-ref ag2d2a@x '0)))) (ag290e@strip-annotations ag2d2a@x) ag2d2a@x) ((letrec ((ag2d2e@f (lambda (ag2d30@x) (if (ag28ca@stx? ag2d30@x) (ag2910@strip (ag28cc@stx-expr ag2d30@x) (ag28d0@stx-mark* ag2d30@x)) (if (ag244a@ag231e@annotation? ag2d30@x) (ag2449@ag231c@annotation-stripped ag2d30@x) (if (pair? ag2d30@x) ((lambda (ag2d32@a ag2d33@d) (if (and (eq? ag2d32@a (car ag2d30@x)) (eq? ag2d33@d (cdr ag2d30@x))) ag2d30@x (cons ag2d32@a ag2d33@d))) (ag2d2e@f (car ag2d30@x)) (ag2d2e@f (cdr ag2d30@x))) (if (vector? ag2d30@x) ((lambda (ag2d36@old) ((lambda (ag2d38@new) (if (for-all eq? ag2d36@old ag2d38@new) ag2d30@x (list->vector ag2d38@new))) (map ag2d2e@f ag2d36@old))) (vector->list ag2d30@x)) ag2d30@x))))))) ag2d2e@f) ag2d2a@x)))) (set! ag454e@ag2910@strip ag2910@strip)) (begin (set! ag2912@stx->datum (lambda (ag2d3a@x) (ag2910@strip ag2d3a@x '()))) (set! ag454f@ag2912@stx->datum ag2912@stx->datum)) (begin (set! ag2914@id->label (lambda (ag2d3c@id) (or (id->real-label ag2d3c@id) ((lambda (ag2d3e@t) (if ag2d3e@t ((lambda (ag2d40@env) ((lambda (ag2d42@rib) (call-with-values (lambda () (ag288e@gen-define-label+loc ag2d3c@id ag2d42@rib)) (lambda (ag2d48@ag2d45 ag2d49@ag2d47) ((lambda (ag2d4c@loc_ ag2d4d@lab) (begin (ag28b4@extend-rib! ag2d42@rib ag2d3c@id ag2d4d@lab) ag2d4d@lab)) ag2d49@ag2d47 ag2d48@ag2d45)))) (ag2ba3@interaction-env-rib ag2d40@env))) ag2d3e@t) '#f)) (ag2bf3@top-level-context))))) (set! ag4550@ag2914@id->label ag2914@id->label)) (begin (set! ag2916@label->binding (lambda (ag2d50@x ag2d51@r) ((lambda (ag2d54@t) (if ag2d54@t ((lambda (ag2d56@b) (if (and (pair? ag2d56@b) (eq? (car ag2d56@b) '$core-rtd)) (cons '$rtd (map ag2ab9@bless (cdr ag2d56@b))) (if (and (pair? ag2d56@b) (eq? (car ag2d56@b) 'global-rtd)) ((lambda (ag2d58@lib ag2d59@loc) (cons '$rtd (symbol-value ag2d59@loc))) (cadr ag2d56@b) (cddr ag2d56@b)) ag2d56@b))) ag2d54@t) ((lambda (ag2d5c@t) (if ag2d5c@t (cdr ag2d5c@t) ((lambda (ag2d5e@t) (if ag2d5e@t ((lambda (ag2d60@env) ((lambda (ag2d62@t) (if ag2d62@t ((lambda (ag2d64@p) (cons* 'lexical (cdr ag2d64@p) '#f)) ag2d62@t) '(displaced-lexical . #f))) (assq ag2d50@x (ag2bab@interaction-env-locs ag2d60@env)))) ag2d5e@t) '(displaced-lexical . #f))) (ag2bf3@top-level-context)))) (assq ag2d50@x ag2d51@r)))) (ag2720@ag256d@imported-label->binding ag2d50@x)))) (set! ag4551@ag2916@label->binding ag2916@label->binding)) (begin (set! ag2918@make-binding cons) (set! ag4552@ag2918@make-binding ag2918@make-binding)) (begin (set! ag291a@binding-type car) (set! ag4553@ag291a@binding-type ag291a@binding-type)) (begin (set! ag291c@binding-value cdr) (set! ag4554@ag291c@binding-value ag291c@binding-value)) (begin (set! ag291e@raise-unbound-error (lambda (ag2d66@id) (ag2be1@syntax-violation* '#f '"unbound identifier" ag2d66@id (ag4949@ag478f@make-undefined-violation)))) (set! ag4555@ag291e@raise-unbound-error ag291e@raise-unbound-error)) (begin (set! ag2920@syntax-type (lambda (ag2d68@e ag2d69@r) (if (ag28fe@id? ag2d68@e) ((lambda (ag2d6c@id) ((lambda (ag2d6e@label) ((lambda (ag2d70@b) ((lambda (ag2d72@type) ((lambda () (begin (if (not ag2d6e@label) (ag291e@raise-unbound-error ag2d6c@id) (void)) ((lambda (ag2d74@t) (if (memv ag2d74@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values ag2d72@type (ag291c@binding-value ag2d70@b) ag2d6c@id) (values 'other '#f '#f))) ag2d72@type))))) (ag291a@binding-type ag2d70@b))) (ag2916@label->binding ag2d6e@label ag2d69@r))) (ag2914@id->label ag2d6c@id))) ag2d68@e) (if (ag28f0@syntax-pair? ag2d68@e) ((lambda (ag2d76@id) (if (ag28fe@id? ag2d76@id) ((lambda (ag2d78@label) ((lambda (ag2d7a@b) ((lambda (ag2d7c@type) ((lambda () (begin (if (not ag2d78@label) (ag291e@raise-unbound-error ag2d76@id) (void)) ((lambda (ag2d7e@t) (if (memv ag2d7e@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values ag2d7c@type (ag291c@binding-value ag2d7a@b) ag2d76@id) (values 'call '#f '#f))) ag2d7c@type))))) (ag291a@binding-type ag2d7a@b))) (ag2916@label->binding ag2d78@label ag2d69@r))) (ag2914@id->label ag2d76@id)) (values 'call '#f '#f))) (ag28f8@syntax-car ag2d68@e)) ((lambda (ag2d80@d) (if (ag290c@self-evaluating? ag2d80@d) (values 'constant ag2d80@d '#f) (values 'other '#f '#f))) (ag2912@stx->datum ag2d68@e)))))) (set! ag4556@ag2920@syntax-type ag2920@syntax-type)) (begin (set! ag292e@sanitize-binding (lambda (ag2d82@x ag2d83@src) (if (procedure? ag2d82@x) (cons* 'local-macro ag2d82@x ag2d83@src) (if (and (pair? ag2d82@x) (eq? (car ag2d82@x) 'macro!) (procedure? (cdr ag2d82@x))) (cons* 'local-macro! (cdr ag2d82@x) ag2d83@src) (if (and (pair? ag2d82@x) (eq? (car ag2d82@x) '$rtd)) ag2d82@x (assertion-violation 'expand '"invalid transformer" ag2d82@x)))))) (set! ag4557@ag292e@sanitize-binding ag292e@sanitize-binding)) (begin (set! ag2930@make-variable-transformer (lambda (ag2d86@x) (if (procedure? ag2d86@x) (cons 'macro! ag2d86@x) (assertion-violation 'make-variable-transformer '"not a procedure" ag2d86@x)))) (set! ag4558@ag2930@make-variable-transformer ag2930@make-variable-transformer)) (begin (set! ag2932@variable-transformer? (lambda (ag2d88@x) (and (pair? ag2d88@x) (eq? (car ag2d88@x) 'macro!) (procedure? (cdr ag2d88@x))))) (set! ag4559@ag2932@variable-transformer? ag2932@variable-transformer?)) (begin (set! ag2934@variable-transformer-procedure (lambda (ag2d8a@x) (if (ag2932@variable-transformer? ag2d8a@x) (cdr ag2d8a@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" ag2d8a@x)))) (set! ag455a@ag2934@variable-transformer-procedure ag2934@variable-transformer-procedure)) (begin (set! ag2936@make-eval-transformer (lambda (ag2d8c@x) (ag292e@sanitize-binding (eval-core (ag24ab@ag2463@expanded->core ag2d8c@x)) ag2d8c@x))) (set! ag455b@ag2936@make-eval-transformer ag2936@make-eval-transformer)) (begin (set! ag2a87@parse-define (lambda (ag2d8e@x) ((lambda (ag2d90@t) ((lambda (ag2d92@ls/false) (if (and ag2d92@ls/false (apply (lambda (ag2d94@id ag2d95@fmls ag2d96@b ag2d97@b*) (ag28fe@id? ag2d94@id)) ag2d92@ls/false)) (apply (lambda (ag2d9c@id ag2d9d@fmls ag2d9e@b ag2d9f@b*) (begin (ag2b29@verify-formals ag2d9d@fmls ag2d8e@x) (values ag2d9c@id (cons 'defun (cons ag2d9d@fmls (cons ag2d9e@b ag2d9f@b*)))))) ag2d92@ls/false) ((lambda (ag2da4@t) ((lambda (ag2da6@ls/false) (if (and ag2da6@ls/false (apply (lambda (ag2da8@id ag2da9@val) (ag28fe@id? ag2da8@id)) ag2da6@ls/false)) (apply (lambda (ag2dac@id ag2dad@val) (values ag2dac@id (cons 'expr ag2dad@val))) ag2da6@ls/false) ((lambda (ag2db0@t) ((lambda (ag2db2@ls/false) (if (and ag2db2@ls/false (apply (lambda (ag2db4@id) (ag28fe@id? ag2db4@id)) ag2db2@ls/false)) (apply (lambda (ag2db6@id) (values ag2db6@id (cons 'expr (ag2ab9@bless '(void))))) ag2db2@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag2db0@t))) (ag2b03@syntax-dispatch ag2db0@t '(_ any)))) ag2da4@t))) (ag2b03@syntax-dispatch ag2da4@t '(_ any any)))) ag2d90@t))) (ag2b03@syntax-dispatch ag2d90@t '(_ (any . any) any . each-any)))) ag2d8e@x))) (set! ag455c@ag2a87@parse-define ag2a87@parse-define)) (begin (set! ag2a89@parse-define-syntax (lambda (ag2db8@x) ((lambda (ag2dba@t) ((lambda (ag2dbc@ls/false) (if (and ag2dbc@ls/false (apply (lambda (ag2dbe@id ag2dbf@val) (ag28fe@id? ag2dbe@id)) ag2dbc@ls/false)) (apply (lambda (ag2dc2@id ag2dc3@val) (values ag2dc2@id ag2dc3@val)) ag2dbc@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag2dba@t))) (ag2b03@syntax-dispatch ag2dba@t '(_ any any)))) ag2db8@x))) (set! ag455d@ag2a89@parse-define-syntax ag2a89@parse-define-syntax)) (begin (set! ag2a8b@scheme-stx-hashtable (make-eq-hashtable)) (set! ag455e@ag2a8b@scheme-stx-hashtable ag2a8b@scheme-stx-hashtable)) (begin (set! ag2a8d@scheme-stx (lambda (ag2dc6@sym) (or (hashtable-ref ag2a8b@scheme-stx-hashtable ag2dc6@sym '#f) ((lambda (ag2dc8@subst) ((lambda (ag2dca@stx) ((lambda (ag2dcc@stx) ((lambda () (begin (hashtable-set! ag2a8b@scheme-stx-hashtable ag2dc6@sym ag2dcc@stx) ag2dcc@stx)))) ((lambda (ag2dce@t) (if ag2dce@t ((lambda (ag2dd0@x) ((lambda (ag2dd2@name ag2dd3@label) (ag28ea@add-subst (make-simple-struct 'rib '6 (list (list ag2dd2@name) (list ag2882@top-mark*) (list ag2dd3@label) '#f '#f)) ag2dca@stx)) (car ag2dd0@x) (cdr ag2dd0@x))) ag2dce@t) ag2dca@stx)) (assq ag2dc6@sym ag2dc8@subst)))) (make-simple-struct 'stx '5 (list ag2dc6@sym ag2882@top-mark* '() '())))) (ag26fc@ag2525@library-subst (ag271a@ag2561@find-library-by-name '(psyntax system $all))))))) (set! ag455f@ag2a8d@scheme-stx ag2a8d@scheme-stx)) (begin (set! ag2a8f@lexical-var car) (set! ag4560@ag2a8f@lexical-var ag2a8f@lexical-var)) (begin (set! ag2a91@lexical-mutable? cdr) (set! ag4561@ag2a91@lexical-mutable? ag2a91@lexical-mutable?)) (begin (set! ag2a93@set-lexical-mutable! set-cdr!) (set! ag4562@ag2a93@set-lexical-mutable! ag2a93@set-lexical-mutable!)) (begin (set! ag2a95@add-lexical (lambda (ag2dd6@lab ag2dd7@lex ag2dd8@r) (cons (cons* ag2dd6@lab 'lexical ag2dd7@lex '#f) ag2dd8@r))) (set! ag4563@ag2a95@add-lexical ag2a95@add-lexical)) (begin (set! ag2a97@add-lexicals (lambda (ag2ddc@lab* ag2ddd@lex* ag2dde@r) (if (null? ag2ddc@lab*) ag2dde@r (ag2a97@add-lexicals (cdr ag2ddc@lab*) (cdr ag2ddd@lex*) (ag2a95@add-lexical (car ag2ddc@lab*) (car ag2ddd@lex*) ag2dde@r))))) (set! ag4564@ag2a97@add-lexicals ag2a97@add-lexicals)) (begin (set! ag2a99@letrec-helper (lambda (ag2de2@e ag2de3@r ag2de4@mr ag2de5@build) ((lambda (ag2dea@t) ((lambda (ag2dec@ls/false) (if ag2dec@ls/false (apply (lambda (ag2dee@lhs* ag2def@rhs* ag2df0@b ag2df1@b*) (if (not (ag2906@valid-bound-ids? ag2dee@lhs*)) (ag2abd@invalid-fmls-error ag2de2@e ag2dee@lhs*) ((lambda (ag2df6@lex* ag2df7@lab*) ((lambda (ag2dfa@rib ag2dfb@r) ((lambda (ag2dfe@body ag2dff@rhs*) (ag2de5@build '#f ag2df6@lex* ag2dff@rhs* ag2dfe@body)) (ag2b3b@chi-internal (ag28ea@add-subst ag2dfa@rib (cons ag2df0@b ag2df1@b*)) ag2dfb@r ag2de4@mr) (ag2b21@chi-expr* (map (lambda (ag2e02@x) (ag28ea@add-subst ag2dfa@rib ag2e02@x)) ag2def@rhs*) ag2dfb@r ag2de4@mr))) (ag28be@make-full-rib ag2dee@lhs* ag2df7@lab*) (ag2a97@add-lexicals ag2df7@lab* ag2df6@lex* ag2de3@r))) (map ag2886@gen-lexical ag2dee@lhs*) (map ag288a@gen-label ag2dee@lhs*)))) ag2dec@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag2dea@t))) (ag2b03@syntax-dispatch ag2dea@t '(_ #(each (any any)) any . each-any)))) ag2de2@e))) (set! ag4565@ag2a99@letrec-helper ag2a99@letrec-helper)) (begin (set! ag2a9b@letrec-transformer (lambda (ag2e04@e ag2e05@r ag2e06@mr) (ag2a99@letrec-helper ag2e04@e ag2e05@r ag2e06@mr ag2867@ag27d0@build-letrec))) (set! ag4566@ag2a9b@letrec-transformer ag2a9b@letrec-transformer)) (begin (set! ag2a9d@letrec*-transformer (lambda (ag2e0a@e ag2e0b@r ag2e0c@mr) (ag2a99@letrec-helper ag2e0a@e ag2e0b@r ag2e0c@mr ag2868@ag27d2@build-letrec*))) (set! ag4567@ag2a9d@letrec*-transformer ag2a9d@letrec*-transformer)) (begin (set! ag2a9f@fluid-let-syntax-transformer (lambda (ag2e10@e ag2e11@r ag2e12@mr) ((lambda (ag2e17@lookup) (begin (set! ag2e17@lookup (lambda (ag2e2a@x) (or (ag2914@id->label ag2e2a@x) (ag2be3@syntax-violation '#f '"unbound identifier" ag2e10@e ag2e2a@x)))) ((lambda (ag2e18@t) ((lambda (ag2e1a@ls/false) (if ag2e1a@ls/false (apply (lambda (ag2e1c@lhs* ag2e1d@rhs* ag2e1e@b ag2e1f@b*) (if (not (ag2906@valid-bound-ids? ag2e1c@lhs*)) (ag2abd@invalid-fmls-error ag2e10@e ag2e1c@lhs*) ((lambda (ag2e24@lab* ag2e25@rhs*) (ag2b3b@chi-internal (cons ag2e1e@b ag2e1f@b*) (append (map cons ag2e24@lab* ag2e25@rhs*) ag2e11@r) (append (map cons ag2e24@lab* ag2e25@rhs*) ag2e12@mr))) (map ag2e17@lookup ag2e1c@lhs*) (map (lambda (ag2e28@x) (ag2936@make-eval-transformer (ag2b5d@expand-transformer ag2e28@x ag2e12@mr))) ag2e1d@rhs*)))) ag2e1a@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag2e18@t))) (ag2b03@syntax-dispatch ag2e18@t '(_ #(each (any any)) any . each-any)))) ag2e10@e))) '#f))) (set! ag4568@ag2a9f@fluid-let-syntax-transformer ag2a9f@fluid-let-syntax-transformer)) (begin (set! ag2aa1@type-descriptor-transformer (lambda (ag2e2c@e ag2e2d@r ag2e2e@mr) ((lambda (ag2e32@t) ((lambda (ag2e34@ls/false) (if (and ag2e34@ls/false (apply (lambda (ag2e36@id) (ag28fe@id? ag2e36@id)) ag2e34@ls/false)) (apply (lambda (ag2e38@id) ((lambda (ag2e3a@lab) ((lambda (ag2e3c@b) ((lambda (ag2e3e@type) ((lambda () (begin (if (not ag2e3a@lab) (ag291e@raise-unbound-error ag2e38@id) (void)) (if (not (and (eq? ag2e3e@type '$rtd) (not (list? (ag291c@binding-value ag2e3c@b))))) (ag2be3@syntax-violation '#f '"not a record type" ag2e2c@e) (void)) (list 'quote (ag291c@binding-value ag2e3c@b)))))) (ag291a@binding-type ag2e3c@b))) (ag2916@label->binding ag2e3a@lab ag2e2d@r))) (ag2914@id->label ag2e38@id))) ag2e34@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag2e32@t))) (ag2b03@syntax-dispatch ag2e32@t '(_ any)))) ag2e2c@e))) (set! ag4569@ag2aa1@type-descriptor-transformer ag2aa1@type-descriptor-transformer)) (begin (set! ag2aa3@record-type-descriptor-transformer (lambda (ag2e40@e ag2e41@r ag2e42@mr) ((lambda (ag2e46@t) ((lambda (ag2e48@ls/false) (if (and ag2e48@ls/false (apply (lambda (ag2e4a@id) (ag28fe@id? ag2e4a@id)) ag2e48@ls/false)) (apply (lambda (ag2e4c@id) ((lambda (ag2e4e@lab) ((lambda (ag2e50@b) ((lambda (ag2e52@type) ((lambda () (begin (if (not ag2e4e@lab) (ag291e@raise-unbound-error ag2e4c@id) (void)) (if (not (and (eq? ag2e52@type '$rtd) (list? (ag291c@binding-value ag2e50@b)))) (ag2be3@syntax-violation '#f '"not a record type" ag2e40@e) (void)) (ag2b25@chi-expr (car (ag291c@binding-value ag2e50@b)) ag2e41@r ag2e42@mr))))) (ag291a@binding-type ag2e50@b))) (ag2916@label->binding ag2e4e@lab ag2e41@r))) (ag2914@id->label ag2e4c@id))) ag2e48@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag2e46@t))) (ag2b03@syntax-dispatch ag2e46@t '(_ any)))) ag2e40@e))) (set! ag456a@ag2aa3@record-type-descriptor-transformer ag2aa3@record-type-descriptor-transformer)) (begin (set! ag2aa5@record-constructor-descriptor-transformer (lambda (ag2e54@e ag2e55@r ag2e56@mr) ((lambda (ag2e5a@t) ((lambda (ag2e5c@ls/false) (if (and ag2e5c@ls/false (apply (lambda (ag2e5e@id) (ag28fe@id? ag2e5e@id)) ag2e5c@ls/false)) (apply (lambda (ag2e60@id) ((lambda (ag2e62@lab) ((lambda (ag2e64@b) ((lambda (ag2e66@type) ((lambda () (begin (if (not ag2e62@lab) (ag291e@raise-unbound-error ag2e60@id) (void)) (if (not (and (eq? ag2e66@type '$rtd) (list? (ag291c@binding-value ag2e64@b)))) (ag2be3@syntax-violation '#f '"invalid type" ag2e54@e) (void)) (ag2b25@chi-expr (cadr (ag291c@binding-value ag2e64@b)) ag2e55@r ag2e56@mr))))) (ag291a@binding-type ag2e64@b))) (ag2916@label->binding ag2e62@lab ag2e55@r))) (ag2914@id->label ag2e60@id))) ag2e5c@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag2e5a@t))) (ag2b03@syntax-dispatch ag2e5a@t '(_ any)))) ag2e54@e))) (set! ag456b@ag2aa5@record-constructor-descriptor-transformer ag2aa5@record-constructor-descriptor-transformer)) (begin (set! ag2aa7@when-macro (lambda (ag2e68@e) ((lambda (ag2e6a@t) ((lambda (ag2e6c@ls/false) (if ag2e6c@ls/false (apply (lambda (ag2e6e@test ag2e6f@e ag2e70@e*) (ag2ab9@bless (list 'if ag2e6e@test (cons 'begin (cons ag2e6f@e ag2e70@e*))))) ag2e6c@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag2e6a@t))) (ag2b03@syntax-dispatch ag2e6a@t '(_ any any . each-any)))) ag2e68@e))) (set! ag456c@ag2aa7@when-macro ag2aa7@when-macro)) (begin (set! ag2aa9@unless-macro (lambda (ag2e74@e) ((lambda (ag2e76@t) ((lambda (ag2e78@ls/false) (if ag2e78@ls/false (apply (lambda (ag2e7a@test ag2e7b@e ag2e7c@e*) (ag2ab9@bless (list 'if (list 'not ag2e7a@test) (cons 'begin (cons ag2e7b@e ag2e7c@e*))))) ag2e78@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag2e76@t))) (ag2b03@syntax-dispatch ag2e76@t '(_ any any . each-any)))) ag2e74@e))) (set! ag456d@ag2aa9@unless-macro ag2aa9@unless-macro)) (begin (set! ag2aab@if-transformer (lambda (ag2e80@e ag2e81@r ag2e82@mr) ((lambda (ag2e86@t) ((lambda (ag2e88@ls/false) (if ag2e88@ls/false (apply (lambda (ag2e8a@e0 ag2e8b@e1 ag2e8c@e2) (list 'if (ag2b25@chi-expr ag2e8a@e0 ag2e81@r ag2e82@mr) (ag2b25@chi-expr ag2e8b@e1 ag2e81@r ag2e82@mr) (ag2b25@chi-expr ag2e8c@e2 ag2e81@r ag2e82@mr))) ag2e88@ls/false) ((lambda (ag2e90@t) ((lambda (ag2e92@ls/false) (if ag2e92@ls/false (apply (lambda (ag2e94@e0 ag2e95@e1) (list 'if (ag2b25@chi-expr ag2e94@e0 ag2e81@r ag2e82@mr) (ag2b25@chi-expr ag2e95@e1 ag2e81@r ag2e82@mr) (ag2866@ag27ce@build-void))) ag2e92@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag2e90@t))) (ag2b03@syntax-dispatch ag2e90@t '(_ any any)))) ag2e86@t))) (ag2b03@syntax-dispatch ag2e86@t '(_ any any any)))) ag2e80@e))) (set! ag456e@ag2aab@if-transformer ag2aab@if-transformer)) (begin (set! ag2aad@and-transformer (lambda (ag2e98@e ag2e99@r ag2e9a@mr) ((lambda (ag2e9e@t) ((lambda (ag2ea0@ls/false) (if ag2ea0@ls/false (apply (lambda (ag2ea2@e*) (cons 'and (ag2b21@chi-expr* ag2ea2@e* ag2e99@r ag2e9a@mr))) ag2ea0@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag2e9e@t))) (ag2b03@syntax-dispatch ag2e9e@t '(_ . each-any)))) ag2e98@e))) (set! ag456f@ag2aad@and-transformer ag2aad@and-transformer)) (begin (set! ag2aaf@or-transformer (lambda (ag2ea4@e ag2ea5@r ag2ea6@mr) ((lambda (ag2eaa@t) ((lambda (ag2eac@ls/false) (if ag2eac@ls/false (apply (lambda (ag2eae@e*) (cons 'or (ag2b21@chi-expr* ag2eae@e* ag2ea5@r ag2ea6@mr))) ag2eac@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag2eaa@t))) (ag2b03@syntax-dispatch ag2eaa@t '(_ . each-any)))) ag2ea4@e))) (set! ag4570@ag2aaf@or-transformer ag2aaf@or-transformer)) (begin (set! ag2ab1@case-macro (lambda (ag2eb0@e) ((lambda (ag2eb3@build-last ag2eb5@build-one) (begin (set! ag2eb3@build-last (lambda (ag2eda@cls) ((lambda (ag2edc@t) ((lambda (ag2ede@ls/false) (if ag2ede@ls/false (apply (lambda (ag2ee0@e ag2ee1@e*) (cons 'begin (cons ag2ee0@e ag2ee1@e*))) ag2ede@ls/false) ((lambda (ag2ee4@t) ((lambda (ag2ee6@ls/false) (if ag2ee6@ls/false (apply (lambda () (ag2eb5@build-one ag2eda@cls '(if #f #f))) ag2ee6@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag2ee4@t))) (ag2b03@syntax-dispatch ag2ee4@t '_))) ag2edc@t))) (ag2b03@syntax-dispatch ag2edc@t '(#(scheme-id else) any . each-any)))) ag2eda@cls))) (set! ag2eb5@build-one (lambda (ag2ecc@cls ag2ecd@k) ((lambda (ag2ed0@t) ((lambda (ag2ed2@ls/false) (if ag2ed2@ls/false (apply (lambda (ag2ed4@d* ag2ed5@e ag2ed6@e*) (list 'if (list 'memv 't (list 'quote ag2ed4@d*)) (cons 'begin (cons ag2ed5@e ag2ed6@e*)) ag2ecd@k)) ag2ed2@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag2ed0@t))) (ag2b03@syntax-dispatch ag2ed0@t '(each-any any . each-any)))) ag2ecc@cls))) ((lambda (ag2eb6@t) ((lambda (ag2eb8@ls/false) (if ag2eb8@ls/false (apply (lambda (ag2eba@expr) (ag2ab9@bless (cons 'let (cons (list (list 't ag2eba@expr)) '((if #f #f)))))) ag2eb8@ls/false) ((lambda (ag2ebc@t) ((lambda (ag2ebe@ls/false) (if ag2ebe@ls/false (apply (lambda (ag2ec0@expr ag2ec1@cls ag2ec2@cls*) (ag2ab9@bless (list 'let (list (list 't ag2ec0@expr)) ((letrec ((ag2ec6@f (lambda (ag2ec8@cls ag2ec9@cls*) (if (null? ag2ec9@cls*) (ag2eb3@build-last ag2ec8@cls) (ag2eb5@build-one ag2ec8@cls (ag2ec6@f (car ag2ec9@cls*) (cdr ag2ec9@cls*))))))) ag2ec6@f) ag2ec1@cls ag2ec2@cls*)))) ag2ebe@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag2ebc@t))) (ag2b03@syntax-dispatch ag2ebc@t '(_ any any . each-any)))) ag2eb6@t))) (ag2b03@syntax-dispatch ag2eb6@t '(_ any)))) ag2eb0@e))) '#f '#f))) (set! ag4571@ag2ab1@case-macro ag2ab1@case-macro)) (begin (set! ag2ab3@quote-transformer (lambda (ag2ee8@e ag2ee9@r ag2eea@mr) ((lambda (ag2eee@t) ((lambda (ag2ef0@ls/false) (if ag2ef0@ls/false (apply (lambda (ag2ef2@datum) (list 'quote (ag2912@stx->datum ag2ef2@datum))) ag2ef0@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag2eee@t))) (ag2b03@syntax-dispatch ag2eee@t '(_ any)))) ag2ee8@e))) (set! ag4572@ag2ab3@quote-transformer ag2ab3@quote-transformer)) (begin (set! ag2ab5@case-lambda-transformer (lambda (ag2ef4@e ag2ef5@r ag2ef6@mr) ((lambda (ag2efa@t) ((lambda (ag2efc@ls/false) (if ag2efc@ls/false (apply (lambda (ag2efe@fmls* ag2eff@b* ag2f00@b**) (call-with-values (lambda () (ag2b2d@chi-lambda-clause* ag2ef4@e ag2efe@fmls* (map cons ag2eff@b* ag2f00@b**) ag2ef5@r ag2ef6@mr)) (lambda (ag2f08@ag2f05 ag2f09@ag2f07) ((lambda (ag2f0c@body* ag2f0d@fmls*) (ag2863@ag279c@build-case-lambda '#f ag2f0d@fmls* ag2f0c@body*)) ag2f09@ag2f07 ag2f08@ag2f05)))) ag2efc@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag2efa@t))) (ag2b03@syntax-dispatch ag2efa@t '(_ . #(each (any any . each-any)))))) ag2ef4@e))) (set! ag4573@ag2ab5@case-lambda-transformer ag2ab5@case-lambda-transformer)) (begin (set! ag2ab7@lambda-transformer (lambda (ag2f10@e ag2f11@r ag2f12@mr) ((lambda (ag2f16@t) ((lambda (ag2f18@ls/false) (if ag2f18@ls/false (apply (lambda (ag2f1a@fmls ag2f1b@b ag2f1c@b*) (call-with-values (lambda () (ag2b2b@chi-lambda-clause ag2f10@e ag2f1a@fmls (cons ag2f1b@b ag2f1c@b*) ag2f11@r ag2f12@mr)) (lambda (ag2f24@ag2f21 ag2f25@ag2f23) ((lambda (ag2f28@body ag2f29@fmls) (ag2862@ag279a@build-lambda '#f ag2f29@fmls ag2f28@body)) ag2f25@ag2f23 ag2f24@ag2f21)))) ag2f18@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag2f16@t))) (ag2b03@syntax-dispatch ag2f16@t '(_ any any . each-any)))) ag2f10@e))) (set! ag4574@ag2ab7@lambda-transformer ag2ab7@lambda-transformer)) (begin (set! ag2ab9@bless (lambda (ag2f2c@x) (ag28e6@mkstx ((letrec ((ag2f2e@f (lambda (ag2f30@x) (if (ag28ca@stx? ag2f30@x) ag2f30@x (if (pair? ag2f30@x) (cons (ag2f2e@f (car ag2f30@x)) (ag2f2e@f (cdr ag2f30@x))) (if (symbol? ag2f30@x) (ag2a8d@scheme-stx ag2f30@x) (if (vector? ag2f30@x) (vector-map ag2f2e@f ag2f30@x) ag2f30@x))))))) ag2f2e@f) ag2f2c@x) '() '() '()))) (set! ag4575@ag2ab9@bless ag2ab9@bless)) (begin (set! ag2abb@with-syntax-macro (lambda (ag2f32@e) ((lambda (ag2f34@t) ((lambda (ag2f36@ls/false) (if ag2f36@ls/false (apply (lambda (ag2f38@pat* ag2f39@expr* ag2f3a@b ag2f3b@b*) ((lambda (ag2f40@idn*) (begin (ag2b29@verify-formals (map car ag2f40@idn*) ag2f32@e) ((lambda (ag2f42@t*) (ag2ab9@bless (list 'let (map list ag2f42@t* ag2f39@expr*) ((letrec ((ag2f44@f (lambda (ag2f46@pat* ag2f47@t*) (if (null? ag2f46@pat*) (cons 'begin (cons '#f (cons ag2f3a@b ag2f3b@b*))) (list 'syntax-case (car ag2f47@t*) '() (list (car ag2f46@pat*) (ag2f44@f (cdr ag2f46@pat*) (cdr ag2f47@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car ag2f46@pat*)) (car ag2f47@t*)))))))) ag2f44@f) ag2f38@pat* ag2f42@t*)))) (ag2bd1@generate-temporaries ag2f39@expr*)))) ((letrec ((ag2f4a@f (lambda (ag2f4c@pat*) (if (null? ag2f4c@pat*) '() (call-with-values (lambda () (ag2b01@convert-pattern (car ag2f4c@pat*) '())) (lambda (ag2f52@ag2f4f ag2f53@ag2f51) ((lambda (ag2f56@idn* ag2f57@pat) (append ag2f56@idn* (ag2f4a@f (cdr ag2f4c@pat*)))) ag2f53@ag2f51 ag2f52@ag2f4f))))))) ag2f4a@f) ag2f38@pat*))) ag2f36@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag2f34@t))) (ag2b03@syntax-dispatch ag2f34@t '(_ #(each (any any)) any . each-any)))) ag2f32@e))) (set! ag4576@ag2abb@with-syntax-macro ag2abb@with-syntax-macro)) (begin (set! ag2abd@invalid-fmls-error (lambda (ag2f5a@stx ag2f5b@fmls) ((lambda (ag2f5e@t) ((lambda (ag2f60@ls/false) (if ag2f60@ls/false (apply (lambda (ag2f62@id* ag2f63@last) ((letrec ((ag2f66@f (lambda (ag2f68@id*) (if (null? ag2f68@id*) (values) (if (not (ag28fe@id? (car ag2f68@id*))) (ag2be3@syntax-violation '#f '"not an identifier" ag2f5a@stx (car ag2f68@id*)) (begin (ag2f66@f (cdr ag2f68@id*)) (if (ag290a@bound-id-member? (car ag2f68@id*) (cdr ag2f68@id*)) (ag2be3@syntax-violation '#f '"duplicate binding" ag2f5a@stx (car ag2f68@id*)) (void)))))))) ag2f66@f) (if (ag28fe@id? ag2f63@last) (cons ag2f63@last ag2f62@id*) (if (ag28f4@syntax-null? ag2f63@last) ag2f62@id* (ag2be3@syntax-violation '#f '"not an identifier" ag2f5a@stx ag2f63@last))))) ag2f60@ls/false) ((lambda (ag2f6a@t) ((lambda (ag2f6c@ls/false) (if ag2f6c@ls/false (apply (lambda () (ag2be3@syntax-violation '#f '"malformed binding form" ag2f5a@stx ag2f5b@fmls)) ag2f6c@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag2f6a@t))) (ag2b03@syntax-dispatch ag2f6a@t '_))) ag2f5e@t))) (ag2b03@syntax-dispatch ag2f5e@t '#(each+ any () any)))) ag2f5b@fmls))) (set! ag4577@ag2abd@invalid-fmls-error ag2abd@invalid-fmls-error)) (begin (set! ag2abf@let-macro (lambda (ag2f6e@stx) ((lambda (ag2f70@t) ((lambda (ag2f72@ls/false) (if ag2f72@ls/false (apply (lambda (ag2f74@lhs* ag2f75@rhs* ag2f76@b ag2f77@b*) (if (ag2906@valid-bound-ids? ag2f74@lhs*) (ag2ab9@bless (cons (cons 'lambda (cons ag2f74@lhs* (cons ag2f76@b ag2f77@b*))) ag2f75@rhs*)) (ag2abd@invalid-fmls-error ag2f6e@stx ag2f74@lhs*))) ag2f72@ls/false) ((lambda (ag2f7c@t) ((lambda (ag2f7e@ls/false) (if (and ag2f7e@ls/false (apply (lambda (ag2f80@f ag2f81@lhs* ag2f82@rhs* ag2f83@b ag2f84@b*) (ag28fe@id? ag2f80@f)) ag2f7e@ls/false)) (apply (lambda (ag2f8a@f ag2f8b@lhs* ag2f8c@rhs* ag2f8d@b ag2f8e@b*) (if (ag2906@valid-bound-ids? ag2f8b@lhs*) (ag2ab9@bless (cons (list 'letrec (list (list ag2f8a@f (cons 'lambda (cons ag2f8b@lhs* (cons ag2f8d@b ag2f8e@b*))))) ag2f8a@f) ag2f8c@rhs*)) (ag2abd@invalid-fmls-error ag2f6e@stx ag2f8b@lhs*))) ag2f7e@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag2f7c@t))) (ag2b03@syntax-dispatch ag2f7c@t '(_ any #(each (any any)) any . each-any)))) ag2f70@t))) (ag2b03@syntax-dispatch ag2f70@t '(_ #(each (any any)) any . each-any)))) ag2f6e@stx))) (set! ag4578@ag2abf@let-macro ag2abf@let-macro)) (begin (set! ag2ac1@let-values-macro (lambda (ag2f94@stx) ((lambda (ag2f97@rename ag2f99@rename*) (begin (set! ag2f97@rename (lambda (ag2ffc@x ag2ffd@old* ag2ffe@new*) (begin (if (not (ag28fe@id? ag2ffc@x)) (ag2be3@syntax-violation '#f '"not an indentifier" ag2f94@stx ag2ffc@x) (void)) (if (ag290a@bound-id-member? ag2ffc@x ag2ffd@old*) (ag2be3@syntax-violation '#f '"duplicate binding" ag2f94@stx ag2ffc@x) (void)) ((lambda (ag3002@y) (values ag3002@y (cons ag2ffc@x ag2ffd@old*) (cons ag3002@y ag2ffe@new*))) (gensym (ag2be9@syntax->datum ag2ffc@x)))))) (set! ag2f99@rename* (lambda (ag2fea@x* ag2feb@old* ag2fec@new*) (if (null? ag2fea@x*) (values '() ag2feb@old* ag2fec@new*) (call-with-values (lambda () (ag2f97@rename (car ag2fea@x*) ag2feb@old* ag2fec@new*)) (lambda (ag2ff0@x ag2ff1@old* ag2ff2@new*) (call-with-values (lambda () (ag2f99@rename* (cdr ag2fea@x*) ag2ff1@old* ag2ff2@new*)) (lambda (ag2ff6@x* ag2ff7@old* ag2ff8@new*) (values (cons ag2ff0@x ag2ff6@x*) ag2ff7@old* ag2ff8@new*)))))))) ((lambda (ag2f9a@t) ((lambda (ag2f9c@ls/false) (if ag2f9c@ls/false (apply (lambda (ag2f9e@b ag2f9f@b*) (cons* (ag2ab9@bless 'let) '() ag2f9e@b ag2f9f@b*)) ag2f9c@ls/false) ((lambda (ag2fa2@t) ((lambda (ag2fa4@ls/false) (if ag2fa4@ls/false (apply (lambda (ag2fa6@lhs* ag2fa7@rhs* ag2fa8@b ag2fa9@b*) (ag2ab9@bless ((letrec ((ag2fae@f (lambda (ag2fb0@lhs* ag2fb1@rhs* ag2fb2@old* ag2fb3@new*) (if (null? ag2fb0@lhs*) (cons 'let (cons (map list ag2fb2@old* ag2fb3@new*) (cons ag2fa8@b ag2fa9@b*))) ((lambda (ag2fb8@t) ((lambda (ag2fba@ls/false) (if ag2fba@ls/false (apply (lambda (ag2fbc@x*) (call-with-values (lambda () (ag2f99@rename* ag2fbc@x* ag2fb2@old* ag2fb3@new*)) (lambda (ag2fc4@ag2fbf ag2fc5@ag2fc1 ag2fc6@ag2fc3) ((lambda (ag2fca@new* ag2fcb@old* ag2fcc@y*) (list 'call-with-values (list 'lambda '() (car ag2fb1@rhs*)) (list 'lambda ag2fcc@y* (ag2fae@f (cdr ag2fb0@lhs*) (cdr ag2fb1@rhs*) ag2fcb@old* ag2fca@new*)))) ag2fc6@ag2fc3 ag2fc5@ag2fc1 ag2fc4@ag2fbf)))) ag2fba@ls/false) ((lambda (ag2fd0@t) ((lambda (ag2fd2@ls/false) (if ag2fd2@ls/false (apply (lambda (ag2fd4@x* ag2fd5@x) (call-with-values (lambda () (ag2f97@rename ag2fd5@x ag2fb2@old* ag2fb3@new*)) (lambda (ag2fd8@y ag2fd9@old* ag2fda@new*) (call-with-values (lambda () (ag2f99@rename* ag2fd4@x* ag2fd9@old* ag2fda@new*)) (lambda (ag2fde@y* ag2fdf@old* ag2fe0@new*) (list 'call-with-values (list 'lambda '() (car ag2fb1@rhs*)) (list 'lambda (append ag2fde@y* ag2fd8@y) (ag2fae@f (cdr ag2fb0@lhs*) (cdr ag2fb1@rhs*) ag2fdf@old* ag2fe0@new*)))))))) ag2fd2@ls/false) ((lambda (ag2fe4@t) ((lambda (ag2fe6@ls/false) (if ag2fe6@ls/false (apply (lambda (ag2fe8@others) (ag2be3@syntax-violation '#f '"malformed bindings" ag2f94@stx ag2fe8@others)) ag2fe6@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag2fe4@t))) (ag2b03@syntax-dispatch ag2fe4@t 'any))) ag2fd0@t))) (ag2b03@syntax-dispatch ag2fd0@t '#(each+ any () any)))) ag2fb8@t))) (ag2b03@syntax-dispatch ag2fb8@t 'each-any))) (car ag2fb0@lhs*)))))) ag2fae@f) ag2fa6@lhs* ag2fa7@rhs* '() '()))) ag2fa4@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag2fa2@t))) (ag2b03@syntax-dispatch ag2fa2@t '(_ #(each (any any)) any . each-any)))) ag2f9a@t))) (ag2b03@syntax-dispatch ag2f9a@t '(_ () any . each-any)))) ag2f94@stx))) '#f '#f))) (set! ag4579@ag2ac1@let-values-macro ag2ac1@let-values-macro)) (begin (set! ag2ac3@let*-values-macro (lambda (ag3004@stx) ((lambda (ag3007@check) (begin (set! ag3007@check (lambda (ag3036@x*) (if (not (null? ag3036@x*)) ((lambda (ag3038@x) (begin (if (not (ag28fe@id? ag3038@x)) (ag2be3@syntax-violation '#f '"not an identifier" ag3004@stx ag3038@x) (void)) (ag3007@check (cdr ag3036@x*)) (if (ag290a@bound-id-member? ag3038@x (cdr ag3036@x*)) (ag2be3@syntax-violation '#f '"duplicate identifier" ag3004@stx ag3038@x) (void)))) (car ag3036@x*)) (void)))) ((lambda (ag3008@t) ((lambda (ag300a@ls/false) (if ag300a@ls/false (apply (lambda (ag300c@b ag300d@b*) (cons* (ag2ab9@bless 'let) '() ag300c@b ag300d@b*)) ag300a@ls/false) ((lambda (ag3010@t) ((lambda (ag3012@ls/false) (if ag3012@ls/false (apply (lambda (ag3014@lhs* ag3015@rhs* ag3016@b ag3017@b*) (ag2ab9@bless ((letrec ((ag301c@f (lambda (ag301e@lhs* ag301f@rhs*) (if (null? ag301e@lhs*) (cons 'begin (cons ag3016@b ag3017@b*)) ((lambda (ag3022@t) ((lambda (ag3024@ls/false) (if ag3024@ls/false (apply (lambda (ag3026@x*) (begin (ag3007@check ag3026@x*) (list 'call-with-values (list 'lambda '() (car ag301f@rhs*)) (list 'lambda ag3026@x* (ag301c@f (cdr ag301e@lhs*) (cdr ag301f@rhs*)))))) ag3024@ls/false) ((lambda (ag3028@t) ((lambda (ag302a@ls/false) (if ag302a@ls/false (apply (lambda (ag302c@x* ag302d@x) (begin (ag3007@check (cons ag302d@x ag302c@x*)) (list 'call-with-values (list 'lambda '() (car ag301f@rhs*)) (list 'lambda (append ag302c@x* ag302d@x) (ag301c@f (cdr ag301e@lhs*) (cdr ag301f@rhs*)))))) ag302a@ls/false) ((lambda (ag3030@t) ((lambda (ag3032@ls/false) (if ag3032@ls/false (apply (lambda (ag3034@others) (ag2be3@syntax-violation '#f '"malformed bindings" ag3004@stx ag3034@others)) ag3032@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3030@t))) (ag2b03@syntax-dispatch ag3030@t 'any))) ag3028@t))) (ag2b03@syntax-dispatch ag3028@t '#(each+ any () any)))) ag3022@t))) (ag2b03@syntax-dispatch ag3022@t 'each-any))) (car ag301e@lhs*)))))) ag301c@f) ag3014@lhs* ag3015@rhs*))) ag3012@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3010@t))) (ag2b03@syntax-dispatch ag3010@t '(_ #(each (any any)) any . each-any)))) ag3008@t))) (ag2b03@syntax-dispatch ag3008@t '(_ () any . each-any)))) ag3004@stx))) '#f))) (set! ag457a@ag2ac3@let*-values-macro ag2ac3@let*-values-macro)) (begin (set! ag2ac5@trace-lambda-macro (lambda (ag303a@stx) ((lambda (ag303c@t) ((lambda (ag303e@ls/false) (if ag303e@ls/false (apply (lambda (ag3040@who ag3041@fmls ag3042@b ag3043@b*) (if (ag2906@valid-bound-ids? ag3041@fmls) (ag2ab9@bless (list 'make-traced-procedure (list 'quote ag3040@who) (cons 'lambda (cons ag3041@fmls (cons ag3042@b ag3043@b*))))) (ag2abd@invalid-fmls-error ag303a@stx ag3041@fmls))) ag303e@ls/false) ((lambda (ag3048@t) ((lambda (ag304a@ls/false) (if ag304a@ls/false (apply (lambda (ag304c@who ag304d@fmls ag304e@last ag304f@b ag3050@b*) (if (ag2906@valid-bound-ids? (cons ag304e@last ag304d@fmls)) (ag2ab9@bless (list 'make-traced-procedure (list 'quote ag304c@who) (cons 'lambda (cons (append ag304d@fmls ag304e@last) (cons ag304f@b ag3050@b*))))) (ag2abd@invalid-fmls-error ag303a@stx (append ag304d@fmls ag304e@last)))) ag304a@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3048@t))) (ag2b03@syntax-dispatch ag3048@t '(_ any #(each+ any () any) any . each-any)))) ag303c@t))) (ag2b03@syntax-dispatch ag303c@t '(_ any each-any any . each-any)))) ag303a@stx))) (set! ag457b@ag2ac5@trace-lambda-macro ag2ac5@trace-lambda-macro)) (begin (set! ag2ac7@trace-define-macro (lambda (ag3056@stx) ((lambda (ag3058@t) ((lambda (ag305a@ls/false) (if ag305a@ls/false (apply (lambda (ag305c@who ag305d@fmls ag305e@b ag305f@b*) (if (ag2906@valid-bound-ids? ag305d@fmls) (ag2ab9@bless (list 'define ag305c@who (list 'make-traced-procedure (list 'quote ag305c@who) (cons 'lambda (cons ag305d@fmls (cons ag305e@b ag305f@b*)))))) (ag2abd@invalid-fmls-error ag3056@stx ag305d@fmls))) ag305a@ls/false) ((lambda (ag3064@t) ((lambda (ag3066@ls/false) (if ag3066@ls/false (apply (lambda (ag3068@who ag3069@fmls ag306a@last ag306b@b ag306c@b*) (if (ag2906@valid-bound-ids? (cons ag306a@last ag3069@fmls)) (ag2ab9@bless (list 'define ag3068@who (list 'make-traced-procedure (list 'quote ag3068@who) (cons 'lambda (cons (append ag3069@fmls ag306a@last) (cons ag306b@b ag306c@b*)))))) (ag2abd@invalid-fmls-error ag3056@stx (append ag3069@fmls ag306a@last)))) ag3066@ls/false) ((lambda (ag3072@t) ((lambda (ag3074@ls/false) (if ag3074@ls/false (apply (lambda (ag3076@who ag3077@expr) (if (ag28fe@id? ag3076@who) (ag2ab9@bless (list 'define ag3076@who (list 'let (list (list 'v ag3077@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote ag3076@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (ag2be3@syntax-violation '#f '"invalid name" ag3056@stx))) ag3074@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3072@t))) (ag2b03@syntax-dispatch ag3072@t '(_ any any)))) ag3064@t))) (ag2b03@syntax-dispatch ag3064@t '(_ (any . #(each+ any () any)) any . each-any)))) ag3058@t))) (ag2b03@syntax-dispatch ag3058@t '(_ (any . each-any) any . each-any)))) ag3056@stx))) (set! ag457c@ag2ac7@trace-define-macro ag2ac7@trace-define-macro)) (begin (set! ag2ac9@trace-define-syntax-macro (lambda (ag307a@stx) ((lambda (ag307c@t) ((lambda (ag307e@ls/false) (if ag307e@ls/false (apply (lambda (ag3080@who ag3081@expr) (if (ag28fe@id? ag3080@who) (ag2ab9@bless (list 'define-syntax ag3080@who (list 'make-traced-macro (list 'quote ag3080@who) ag3081@expr))) (ag2be3@syntax-violation '#f '"invalid name" ag307a@stx))) ag307e@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag307c@t))) (ag2b03@syntax-dispatch ag307c@t '(_ any any)))) ag307a@stx))) (set! ag457d@ag2ac9@trace-define-syntax-macro ag2ac9@trace-define-syntax-macro)) (begin (set! ag2acb@trace-let/rec-syntax (lambda (ag3084@who) (lambda (ag3086@stx) ((lambda (ag3088@t) ((lambda (ag308a@ls/false) (if ag308a@ls/false (apply (lambda (ag308c@lhs* ag308d@rhs* ag308e@b ag308f@b*) (if (ag2906@valid-bound-ids? ag308c@lhs*) ((lambda (ag3094@rhs*) (ag2ab9@bless (cons ag3084@who (cons (map list ag308c@lhs* ag3094@rhs*) (cons ag308e@b ag308f@b*))))) (map (lambda (ag3096@lhs ag3097@rhs) (list 'make-traced-macro (list 'quote ag3096@lhs) ag3097@rhs)) ag308c@lhs* ag308d@rhs*)) (ag2abd@invalid-fmls-error ag3086@stx ag308c@lhs*))) ag308a@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3088@t))) (ag2b03@syntax-dispatch ag3088@t '(_ #(each (any any)) any . each-any)))) ag3086@stx)))) (set! ag457e@ag2acb@trace-let/rec-syntax ag2acb@trace-let/rec-syntax)) (begin (set! ag2acd@trace-let-syntax-macro (ag2acb@trace-let/rec-syntax 'let-syntax)) (set! ag457f@ag2acd@trace-let-syntax-macro ag2acd@trace-let-syntax-macro)) (begin (set! ag2acf@trace-letrec-syntax-macro (ag2acb@trace-let/rec-syntax 'letrec-syntax)) (set! ag4580@ag2acf@trace-letrec-syntax-macro ag2acf@trace-letrec-syntax-macro)) (begin (set! ag2ad1@guard-macro (lambda (ag309a@x) ((lambda (ag309d@gen-clauses) (begin (set! ag309d@gen-clauses (lambda (ag30b4@con ag30b5@outerk ag30b6@clause*) ((lambda (ag30bb@f ag30bd@f*) (begin (set! ag30bb@f (lambda (ag30f4@x ag30f5@k) ((lambda (ag30f8@t) ((lambda (ag30fa@ls/false) (if ag30fa@ls/false (apply (lambda (ag30fc@e ag30fd@p) ((lambda (ag3100@t) (list 'let (list (list ag3100@t ag30fc@e)) (list 'if ag3100@t (list ag30fd@p ag3100@t) ag30f5@k))) (gensym))) ag30fa@ls/false) ((lambda (ag3102@t) ((lambda (ag3104@ls/false) (if ag3104@ls/false (apply (lambda (ag3106@e) ((lambda (ag3108@t) (list 'let (list (list ag3108@t ag3106@e)) (list 'if ag3108@t ag3108@t ag30f5@k))) (gensym))) ag3104@ls/false) ((lambda (ag310a@t) ((lambda (ag310c@ls/false) (if ag310c@ls/false (apply (lambda (ag310e@e ag310f@v ag3110@v*) (list 'if ag310e@e (cons 'begin (cons ag310f@v ag3110@v*)) ag30f5@k)) ag310c@ls/false) ((lambda (ag3114@t) ((lambda (ag3116@ls/false) (if ag3116@ls/false (apply (lambda () (ag2be3@syntax-violation '#f '"invalid guard clause" ag30f4@x)) ag3116@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3114@t))) (ag2b03@syntax-dispatch ag3114@t '_))) ag310a@t))) (ag2b03@syntax-dispatch ag310a@t '(any any . each-any)))) ag3102@t))) (ag2b03@syntax-dispatch ag3102@t '(any)))) ag30f8@t))) (ag2b03@syntax-dispatch ag30f8@t '(any #(scheme-id =>) any)))) ag30f4@x))) (set! ag30bd@f* (lambda (ag30ca@x*) ((lambda (ag30cc@t) ((lambda (ag30ce@ls/false) (if ag30ce@ls/false (apply (lambda () ((lambda (ag30d0@g) (values (list ag30d0@g (list 'lambda '() (list 'raise-continuable ag30b4@con))) ag30d0@g)) (gensym))) ag30ce@ls/false) ((lambda (ag30d2@t) ((lambda (ag30d4@ls/false) (if ag30d4@ls/false (apply (lambda (ag30d6@e ag30d7@e*) (values (cons 'begin (cons ag30d6@e ag30d7@e*)) '#f)) ag30d4@ls/false) ((lambda (ag30da@t) ((lambda (ag30dc@ls/false) (if ag30dc@ls/false (apply (lambda (ag30de@cls ag30df@cls*) (call-with-values (lambda () (ag30bd@f* ag30df@cls*)) (lambda (ag30e6@ag30e3 ag30e7@ag30e5) ((lambda (ag30ea@g ag30eb@e) (values (ag30bb@f ag30de@cls ag30eb@e) ag30ea@g)) ag30e7@ag30e5 ag30e6@ag30e3)))) ag30dc@ls/false) ((lambda (ag30ee@t) ((lambda (ag30f0@ls/false) (if ag30f0@ls/false (apply (lambda (ag30f2@others) (ag2be3@syntax-violation '#f '"invalid guard clause" ag30f2@others)) ag30f0@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag30ee@t))) (ag2b03@syntax-dispatch ag30ee@t 'any))) ag30da@t))) (ag2b03@syntax-dispatch ag30da@t '(any . any)))) ag30d2@t))) (ag2b03@syntax-dispatch ag30d2@t '((#(scheme-id else) any . each-any))))) ag30cc@t))) (ag2b03@syntax-dispatch ag30cc@t '()))) ag30ca@x*))) (call-with-values (lambda () (ag30bd@f* ag30b6@clause*)) (lambda (ag30c2@ag30bf ag30c3@ag30c1) ((lambda (ag30c6@raisek ag30c7@code) (if ag30c6@raisek (list (list 'call/cc (list 'lambda (list ag30c6@raisek) (list ag30b5@outerk (list 'lambda '() ag30c7@code))))) (list ag30b5@outerk (list 'lambda '() ag30c7@code)))) ag30c3@ag30c1 ag30c2@ag30bf))))) '#f '#f))) ((lambda (ag309e@t) ((lambda (ag30a0@ls/false) (if (and ag30a0@ls/false (apply (lambda (ag30a2@con ag30a3@clause* ag30a4@b ag30a5@b*) (ag28fe@id? ag30a2@con)) ag30a0@ls/false)) (apply (lambda (ag30aa@con ag30ab@clause* ag30ac@b ag30ad@b*) ((lambda (ag30b2@outerk) (ag2ab9@bless (list (list 'call/cc (list 'lambda (list ag30b2@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list ag30aa@con) (ag309d@gen-clauses ag30aa@con ag30b2@outerk ag30ab@clause*)) (cons 'lambda (cons '() (cons ag30ac@b ag30ad@b*)))))))))) (gensym))) ag30a0@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag309e@t))) (ag2b03@syntax-dispatch ag309e@t '(_ (any . each-any) any . each-any)))) ag309a@x))) '#f))) (set! ag4581@ag2ad1@guard-macro ag2ad1@guard-macro)) (begin (set! ag2ad3@define-enumeration-macro (lambda (ag3118@stx) ((lambda (ag311b@set? ag311d@remove-dups) (begin (set! ag311b@set? (lambda (ag3134@x) (or (null? ag3134@x) (and (not (memq (car ag3134@x) (cdr ag3134@x))) (ag311b@set? (cdr ag3134@x)))))) (set! ag311d@remove-dups (lambda (ag3132@ls) (if (null? ag3132@ls) '() (cons (car ag3132@ls) (ag311d@remove-dups (remq (car ag3132@ls) (cdr ag3132@ls))))))) ((lambda (ag311e@t) ((lambda (ag3120@ls/false) (if (and ag3120@ls/false (apply (lambda (ag3122@name ag3123@id* ag3124@maker) (and (ag28fe@id? ag3122@name) (ag28fe@id? ag3124@maker) (for-all ag28fe@id? ag3123@id*))) ag3120@ls/false)) (apply (lambda (ag3128@name ag3129@id* ag312a@maker) ((lambda (ag312e@name* ag312f@mk) (ag2ab9@bless (list 'begin (list 'define ag312f@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote ag312e@name*)))) (list 'define-syntax ag3128@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote ag312e@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote ag3128@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax ag312a@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote ag312a@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote ag312e@name*)) (cons 'syntax-violation (cons (list 'quote ag312a@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons ag312f@mk '('(n* ...)))))))))))) (ag311d@remove-dups (ag2be9@syntax->datum ag3129@id*)) (gensym))) ag3120@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag311e@t))) (ag2b03@syntax-dispatch ag311e@t '(_ any each-any any)))) ag3118@stx))) '#f '#f))) (set! ag4582@ag2ad3@define-enumeration-macro ag2ad3@define-enumeration-macro)) (begin (set! ag2ad5@time-macro (lambda (ag3136@stx) ((lambda (ag3138@t) ((lambda (ag313a@ls/false) (if ag313a@ls/false (apply (lambda (ag313c@expr) (ag2ab9@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() ag313c@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) ag313a@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3138@t))) (ag2b03@syntax-dispatch ag3138@t '(_ any)))) ag3136@stx))) (set! ag4583@ag2ad5@time-macro ag2ad5@time-macro)) (begin (set! ag2ad7@delay-macro (lambda (ag313e@stx) ((lambda (ag3140@t) ((lambda (ag3142@ls/false) (if ag3142@ls/false (apply (lambda (ag3144@expr) (ag2ab9@bless (list 'make-promise (list 'lambda '() ag3144@expr)))) ag3142@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3140@t))) (ag2b03@syntax-dispatch ag3140@t '(_ any)))) ag313e@stx))) (set! ag4584@ag2ad7@delay-macro ag2ad7@delay-macro)) (begin (set! ag2ad9@assert-macro (lambda (ag3146@stx) ((lambda (ag3148@t) ((lambda (ag314a@ls/false) (if ag314a@ls/false (apply (lambda (ag314c@expr) ((lambda (ag314e@pos) (ag2ab9@bless (list 'unless ag314c@expr (list 'assertion-error (list 'quote ag314c@expr) (list 'quote ag314e@pos))))) (or (ag2bdb@expression-position ag3146@stx) (ag2bdb@expression-position ag314c@expr)))) ag314a@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3148@t))) (ag2b03@syntax-dispatch ag3148@t '(_ any)))) ag3146@stx))) (set! ag4585@ag2ad9@assert-macro ag2ad9@assert-macro)) (begin (set! ag2adb@endianness-macro (lambda (ag3150@stx) ((lambda (ag3152@t) ((lambda (ag3154@ls/false) (if ag3154@ls/false (apply (lambda (ag3156@e) ((lambda (ag3158@t) (if (memv ag3158@t '(little)) (ag2ab9@bless ''little) (if (memv ag3158@t '(big)) (ag2ab9@bless ''big) (ag2be3@syntax-violation '#f '"endianness must be big or little" ag3150@stx)))) (ag2be9@syntax->datum ag3156@e))) ag3154@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3152@t))) (ag2b03@syntax-dispatch ag3152@t '(_ any)))) ag3150@stx))) (set! ag4586@ag2adb@endianness-macro ag2adb@endianness-macro)) (begin (set! ag2add@identifier-syntax-macro (lambda (ag315a@stx) ((lambda (ag315c@t) ((lambda (ag315e@ls/false) (if ag315e@ls/false (apply (lambda (ag3160@expr) (ag2ab9@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax ag3160@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax ag3160@expr) '((syntax (e* ...)))))))))) ag315e@ls/false) ((lambda (ag3162@t) ((lambda (ag3164@ls/false) (if (and ag3164@ls/false (apply (lambda (ag3166@id1 ag3167@expr1 ag3168@id2 ag3169@expr2 ag316a@expr3) (and (ag28fe@id? ag3166@id1) (ag28fe@id? ag3168@id2) (ag28fe@id? ag3169@expr2))) ag3164@ls/false)) (apply (lambda (ag3170@id1 ag3171@expr1 ag3172@id2 ag3173@expr2 ag3174@expr3) (ag2ab9@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax ag3171@expr1)) (list (list 'set! 'id ag3173@expr2) (list 'syntax ag3174@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons ag3171@expr1 '(e* ...))))))))) ag3164@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3162@t))) (ag2b03@syntax-dispatch ag3162@t '(_ (any any) ((#(scheme-id set!) any any) any))))) ag315c@t))) (ag2b03@syntax-dispatch ag315c@t '(_ any)))) ag315a@stx))) (set! ag4587@ag2add@identifier-syntax-macro ag2add@identifier-syntax-macro)) (begin (set! ag2adf@do-macro (lambda (ag317a@stx) ((lambda (ag317d@bind) (begin (set! ag317d@bind (lambda (ag3194@x) ((lambda (ag3196@t) ((lambda (ag3198@ls/false) (if ag3198@ls/false (apply (lambda (ag319a@x ag319b@init) (list ag319a@x ag319b@init ag319a@x)) ag3198@ls/false) ((lambda (ag319e@t) ((lambda (ag31a0@ls/false) (if ag31a0@ls/false (apply (lambda (ag31a2@x ag31a3@init ag31a4@step) (list ag31a2@x ag31a3@init ag31a4@step)) ag31a0@ls/false) ((lambda (ag31a8@t) ((lambda (ag31aa@ls/false) (if ag31aa@ls/false (apply (lambda () (ag2be3@syntax-violation '#f '"invalid binding" ag317a@stx)) ag31aa@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag31a8@t))) (ag2b03@syntax-dispatch ag31a8@t '_))) ag319e@t))) (ag2b03@syntax-dispatch ag319e@t '(any any any)))) ag3196@t))) (ag2b03@syntax-dispatch ag3196@t '(any any)))) ag3194@x))) ((lambda (ag317e@t) ((lambda (ag3180@ls/false) (if ag3180@ls/false (apply (lambda (ag3182@binding* ag3183@test ag3184@expr* ag3185@command*) ((lambda (ag318a@t) ((lambda (ag318c@ls/false) (if ag318c@ls/false (apply (lambda (ag318e@x* ag318f@init* ag3190@step*) (if (ag2906@valid-bound-ids? ag318e@x*) (ag2ab9@bless (list 'letrec (list (list 'loop (list 'lambda ag318e@x* (list 'if ag3183@test (cons 'begin (cons '(if #f #f) ag3184@expr*)) (cons 'begin (append ag3185@command* (list (cons 'loop ag3190@step*)))))))) (cons 'loop ag318f@init*))) (ag2be3@syntax-violation '#f '"invalid bindings" ag317a@stx))) ag318c@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag318a@t))) (ag2b03@syntax-dispatch ag318a@t '#(each (any any any))))) (map ag317d@bind ag3182@binding*))) ag3180@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag317e@t))) (ag2b03@syntax-dispatch ag317e@t '(_ each-any (any . each-any) . each-any)))) ag317a@stx))) '#f))) (set! ag4588@ag2adf@do-macro ag2adf@do-macro)) (begin (set! ag2ae1@let*-macro (lambda (ag31ac@stx) ((lambda (ag31ae@t) ((lambda (ag31b0@ls/false) (if (and ag31b0@ls/false (apply (lambda (ag31b2@lhs* ag31b3@rhs* ag31b4@b ag31b5@b*) (for-all ag28fe@id? ag31b2@lhs*)) ag31b0@ls/false)) (apply (lambda (ag31ba@lhs* ag31bb@rhs* ag31bc@b ag31bd@b*) (ag2ab9@bless ((letrec ((ag31c2@f (lambda (ag31c4@x*) (if (null? ag31c4@x*) (cons 'let (cons '() (cons ag31bc@b ag31bd@b*))) (list 'let (list (car ag31c4@x*)) (ag31c2@f (cdr ag31c4@x*))))))) ag31c2@f) (map list ag31ba@lhs* ag31bb@rhs*)))) ag31b0@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag31ae@t))) (ag2b03@syntax-dispatch ag31ae@t '(_ #(each (any any)) any . each-any)))) ag31ac@stx))) (set! ag4589@ag2ae1@let*-macro ag2ae1@let*-macro)) (begin (set! ag2ae3@or-macro (lambda (ag31c6@stx) ((lambda (ag31c8@t) ((lambda (ag31ca@ls/false) (if ag31ca@ls/false (apply (lambda () '#f) ag31ca@ls/false) ((lambda (ag31cc@t) ((lambda (ag31ce@ls/false) (if ag31ce@ls/false (apply (lambda (ag31d0@e ag31d1@e*) (ag2ab9@bless ((letrec ((ag31d4@f (lambda (ag31d6@e ag31d7@e*) (if (null? ag31d7@e*) (list 'begin '#f ag31d6@e) (list 'let (list (list 't ag31d6@e)) (list 'if 't 't (ag31d4@f (car ag31d7@e*) (cdr ag31d7@e*)))))))) ag31d4@f) ag31d0@e ag31d1@e*))) ag31ce@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag31cc@t))) (ag2b03@syntax-dispatch ag31cc@t '(_ any . each-any)))) ag31c8@t))) (ag2b03@syntax-dispatch ag31c8@t '(_)))) ag31c6@stx))) (set! ag458a@ag2ae3@or-macro ag2ae3@or-macro)) (begin (set! ag2ae5@and-macro (lambda (ag31da@stx) ((lambda (ag31dc@t) ((lambda (ag31de@ls/false) (if ag31de@ls/false (apply (lambda () '#t) ag31de@ls/false) ((lambda (ag31e0@t) ((lambda (ag31e2@ls/false) (if ag31e2@ls/false (apply (lambda (ag31e4@e ag31e5@e*) (ag2ab9@bless ((letrec ((ag31e8@f (lambda (ag31ea@e ag31eb@e*) (if (null? ag31eb@e*) (list 'begin '#f ag31ea@e) (cons 'if (cons ag31ea@e (cons (ag31e8@f (car ag31eb@e*) (cdr ag31eb@e*)) '(#f)))))))) ag31e8@f) ag31e4@e ag31e5@e*))) ag31e2@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag31e0@t))) (ag2b03@syntax-dispatch ag31e0@t '(_ any . each-any)))) ag31dc@t))) (ag2b03@syntax-dispatch ag31dc@t '(_)))) ag31da@stx))) (set! ag458b@ag2ae5@and-macro ag2ae5@and-macro)) (begin (set! ag2ae7@cond-macro (lambda (ag31ee@stx) ((lambda (ag31f0@t) ((lambda (ag31f2@ls/false) (if ag31f2@ls/false (apply (lambda (ag31f4@cls ag31f5@cls*) (ag2ab9@bless ((letrec ((ag31f8@f (lambda (ag31fa@cls ag31fb@cls*) (if (null? ag31fb@cls*) ((lambda (ag31fe@t) ((lambda (ag3200@ls/false) (if ag3200@ls/false (apply (lambda (ag3202@e ag3203@e*) (cons 'begin (cons ag3202@e ag3203@e*))) ag3200@ls/false) ((lambda (ag3206@t) ((lambda (ag3208@ls/false) (if ag3208@ls/false (apply (lambda (ag320a@e ag320b@p) (list 'let (list (list 't ag320a@e)) (list 'if 't (cons ag320b@p '(t))))) ag3208@ls/false) ((lambda (ag320e@t) ((lambda (ag3210@ls/false) (if ag3210@ls/false (apply (lambda (ag3212@e) (cons 'or (cons ag3212@e '((if #f #f))))) ag3210@ls/false) ((lambda (ag3214@t) ((lambda (ag3216@ls/false) (if ag3216@ls/false (apply (lambda (ag3218@e ag3219@e*) (list 'if ag3218@e (cons 'begin ag3219@e*))) ag3216@ls/false) ((lambda (ag321c@t) ((lambda (ag321e@ls/false) (if ag321e@ls/false (apply (lambda () (ag2be3@syntax-violation '#f '"invalid last clause" ag31ee@stx)) ag321e@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag321c@t))) (ag2b03@syntax-dispatch ag321c@t '_))) ag3214@t))) (ag2b03@syntax-dispatch ag3214@t '(any . each-any)))) ag320e@t))) (ag2b03@syntax-dispatch ag320e@t '(any)))) ag3206@t))) (ag2b03@syntax-dispatch ag3206@t '(any #(scheme-id =>) any)))) ag31fe@t))) (ag2b03@syntax-dispatch ag31fe@t '(#(scheme-id else) any . each-any)))) ag31fa@cls) ((lambda (ag3220@t) ((lambda (ag3222@ls/false) (if ag3222@ls/false (apply (lambda (ag3224@e ag3225@e*) (ag2be3@syntax-violation '#f '"incorrect position of keyword else" ag31ee@stx)) ag3222@ls/false) ((lambda (ag3228@t) ((lambda (ag322a@ls/false) (if ag322a@ls/false (apply (lambda (ag322c@e ag322d@p) (list 'let (list (list 't ag322c@e)) (list 'if 't (cons ag322d@p '(t)) (ag31f8@f (car ag31fb@cls*) (cdr ag31fb@cls*))))) ag322a@ls/false) ((lambda (ag3230@t) ((lambda (ag3232@ls/false) (if ag3232@ls/false (apply (lambda (ag3234@e) (list 'or ag3234@e (ag31f8@f (car ag31fb@cls*) (cdr ag31fb@cls*)))) ag3232@ls/false) ((lambda (ag3236@t) ((lambda (ag3238@ls/false) (if ag3238@ls/false (apply (lambda (ag323a@e ag323b@e*) (list 'if ag323a@e (cons 'begin ag323b@e*) (ag31f8@f (car ag31fb@cls*) (cdr ag31fb@cls*)))) ag3238@ls/false) ((lambda (ag323e@t) ((lambda (ag3240@ls/false) (if ag3240@ls/false (apply (lambda () (ag2be3@syntax-violation '#f '"invalid last clause" ag31ee@stx)) ag3240@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag323e@t))) (ag2b03@syntax-dispatch ag323e@t '_))) ag3236@t))) (ag2b03@syntax-dispatch ag3236@t '(any . each-any)))) ag3230@t))) (ag2b03@syntax-dispatch ag3230@t '(any)))) ag3228@t))) (ag2b03@syntax-dispatch ag3228@t '(any #(scheme-id =>) any)))) ag3220@t))) (ag2b03@syntax-dispatch ag3220@t '(#(scheme-id else) any . each-any)))) ag31fa@cls))))) ag31f8@f) ag31f4@cls ag31f5@cls*))) ag31f2@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag31f0@t))) (ag2b03@syntax-dispatch ag31f0@t '(_ any . each-any)))) ag31ee@stx))) (set! ag458c@ag2ae7@cond-macro ag2ae7@cond-macro)) (begin (set! ag2ae9@do-include (lambda (ag3242@stx ag3243@id ag3244@filename) ((lambda (ag3248@filename) (begin (if (not (and (string? ag3248@filename) (ag28fe@id? ag3243@id))) (ag2be3@syntax-violation '#f '"invalid syntax" ag3242@stx) (void)) (cons (ag2ab9@bless 'begin) (with-input-from-file ag3248@filename (lambda () ((letrec ((ag324a@f (lambda (ag324c@ls) ((lambda (ag324e@x) (if (eof-object? ag324e@x) (reverse ag324c@ls) (ag324a@f (cons (ag28de@datum->stx ag3243@id ag324e@x) ag324c@ls)))) (ag2448@ag231a@read-annotated))))) ag324a@f) '())))))) (ag2912@stx->datum ag3244@filename)))) (set! ag458d@ag2ae9@do-include ag2ae9@do-include)) (begin (set! ag2aeb@include-macro (lambda (ag3250@e) ((lambda (ag3252@t) ((lambda (ag3254@ls/false) (if ag3254@ls/false (apply (lambda (ag3256@id ag3257@filename) (ag2ae9@do-include ag3250@e ag3256@id ag3257@filename)) ag3254@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3252@t))) (ag2b03@syntax-dispatch ag3252@t '(any any)))) ag3250@e))) (set! ag458e@ag2aeb@include-macro ag2aeb@include-macro)) (begin (set! ag2aed@include-into-macro (lambda (ag325a@e) ((lambda (ag325c@t) ((lambda (ag325e@ls/false) (if ag325e@ls/false (apply (lambda (ag3260@id ag3261@filename) (ag2ae9@do-include ag325a@e ag3260@id ag3261@filename)) ag325e@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag325c@t))) (ag2b03@syntax-dispatch ag325c@t '(_ any any)))) ag325a@e))) (set! ag458f@ag2aed@include-into-macro ag2aed@include-into-macro)) (begin (set! ag2aef@syntax-rules-macro (lambda (ag3264@e) ((lambda (ag3266@t) ((lambda (ag3268@ls/false) (if ag3268@ls/false (apply (lambda (ag326a@lits ag326b@pat* ag326c@tmp*) (begin (ag2b09@verify-literals ag326a@lits ag3264@e) (ag2ab9@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons ag326a@lits (map (lambda (ag3270@pat ag3271@tmp) ((lambda (ag3274@t) ((lambda (ag3276@ls/false) (if ag3276@ls/false (apply (lambda (ag3278@rest) (list (cons 'g ag3278@rest) (list 'syntax ag3271@tmp))) ag3276@ls/false) ((lambda (ag327a@t) ((lambda (ag327c@ls/false) (if ag327c@ls/false (apply (lambda () (ag2be3@syntax-violation '#f '"invalid syntax-rules pattern" ag3264@e ag3270@pat)) ag327c@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag327a@t))) (ag2b03@syntax-dispatch ag327a@t '_))) ag3274@t))) (ag2b03@syntax-dispatch ag3274@t '(_ . any)))) ag3270@pat)) ag326b@pat* ag326c@tmp*)))))))) ag3268@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3266@t))) (ag2b03@syntax-dispatch ag3266@t '(_ each-any . #(each (any any)))))) ag3264@e))) (set! ag4590@ag2aef@syntax-rules-macro ag2aef@syntax-rules-macro)) (begin (set! ag2af1@quasiquote-macro ((lambda () ((lambda (ag327f@datum ag329b@quasicons* ag329d@quasicons ag329f@quasiappend ag32a1@quasivector ag32a3@vquasi ag32a5@quasi) (begin (set! ag327f@datum (lambda (ag3380@x) (list (ag2a8d@scheme-stx 'quote) (ag28e6@mkstx ag3380@x '() '() '())))) (set! ag329b@quasicons* (lambda (ag3378@x ag3379@y) ((letrec ((ag337c@f (lambda (ag337e@x) (if (null? ag337e@x) ag3379@y (ag329d@quasicons (car ag337e@x) (ag337c@f (cdr ag337e@x))))))) ag337c@f) ag3378@x))) (set! ag329d@quasicons (lambda (ag3352@x ag3353@y) ((lambda (ag3356@t) ((lambda (ag3358@ls/false) (if ag3358@ls/false (apply (lambda (ag335a@dy) ((lambda (ag335c@t) ((lambda (ag335e@ls/false) (if ag335e@ls/false (apply (lambda (ag3360@dx) (list (ag2a8d@scheme-stx 'quote) (cons ag3360@dx ag335a@dy))) ag335e@ls/false) ((lambda (ag3362@t) ((lambda (ag3364@ls/false) (if ag3364@ls/false (apply (lambda () ((lambda (ag3366@t) ((lambda (ag3368@ls/false) (if ag3368@ls/false (apply (lambda () (list (ag2a8d@scheme-stx 'list) ag3352@x)) ag3368@ls/false) ((lambda (ag336a@t) ((lambda (ag336c@ls/false) (if ag336c@ls/false (apply (lambda () (list (ag2a8d@scheme-stx 'cons) ag3352@x ag3353@y)) ag336c@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag336a@t))) (ag2b03@syntax-dispatch ag336a@t '_))) ag3366@t))) (ag2b03@syntax-dispatch ag3366@t '()))) ag335a@dy)) ag3364@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3362@t))) (ag2b03@syntax-dispatch ag3362@t '_))) ag335c@t))) (ag2b03@syntax-dispatch ag335c@t '(#(scheme-id quote) any)))) ag3352@x)) ag3358@ls/false) ((lambda (ag336e@t) ((lambda (ag3370@ls/false) (if ag3370@ls/false (apply (lambda (ag3372@stuff) (cons* (ag2a8d@scheme-stx 'list) ag3352@x ag3372@stuff)) ag3370@ls/false) ((lambda (ag3374@t) ((lambda (ag3376@ls/false) (if ag3376@ls/false (apply (lambda () (list (ag2a8d@scheme-stx 'cons) ag3352@x ag3353@y)) ag3376@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3374@t))) (ag2b03@syntax-dispatch ag3374@t '_))) ag336e@t))) (ag2b03@syntax-dispatch ag336e@t '(#(scheme-id list) . each-any)))) ag3356@t))) (ag2b03@syntax-dispatch ag3356@t '(#(scheme-id quote) any)))) ag3353@y))) (set! ag329f@quasiappend (lambda (ag3338@x ag3339@y) ((lambda (ag333c@ls) (if (null? ag333c@ls) (list (ag2a8d@scheme-stx 'quote) '()) (if (null? (cdr ag333c@ls)) (car ag333c@ls) (cons* (ag2a8d@scheme-stx 'append) ag333c@ls)))) ((letrec ((ag333e@f (lambda (ag3340@x) (if (null? ag3340@x) ((lambda (ag3342@t) ((lambda (ag3344@ls/false) (if ag3344@ls/false (apply (lambda () '()) ag3344@ls/false) ((lambda (ag3346@t) ((lambda (ag3348@ls/false) (if ag3348@ls/false (apply (lambda () (list ag3339@y)) ag3348@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3346@t))) (ag2b03@syntax-dispatch ag3346@t '_))) ag3342@t))) (ag2b03@syntax-dispatch ag3342@t '(#(scheme-id quote) ())))) ag3339@y) ((lambda (ag334a@t) ((lambda (ag334c@ls/false) (if ag334c@ls/false (apply (lambda () (ag333e@f (cdr ag3340@x))) ag334c@ls/false) ((lambda (ag334e@t) ((lambda (ag3350@ls/false) (if ag3350@ls/false (apply (lambda () (cons (car ag3340@x) (ag333e@f (cdr ag3340@x)))) ag3350@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag334e@t))) (ag2b03@syntax-dispatch ag334e@t '_))) ag334a@t))) (ag2b03@syntax-dispatch ag334a@t '(#(scheme-id quote) ())))) (car ag3340@x)))))) ag333e@f) ag3338@x)))) (set! ag32a1@quasivector (lambda (ag3306@x) ((lambda (ag3308@pat-x) ((lambda (ag330a@t) ((lambda (ag330c@ls/false) (if ag330c@ls/false (apply (lambda (ag330e@x*) (list (ag2a8d@scheme-stx 'quote) (list->vector ag330e@x*))) ag330c@ls/false) ((lambda (ag3310@t) ((lambda (ag3312@ls/false) (if ag3312@ls/false (apply (lambda () ((letrec ((ag3314@f (lambda (ag3316@x ag3317@k) ((lambda (ag331a@t) ((lambda (ag331c@ls/false) (if ag331c@ls/false (apply (lambda (ag331e@x*) (ag3317@k (map (lambda (ag3320@x) (list (ag2a8d@scheme-stx 'quote) ag3320@x)) ag331e@x*))) ag331c@ls/false) ((lambda (ag3322@t) ((lambda (ag3324@ls/false) (if ag3324@ls/false (apply (lambda (ag3326@x*) (ag3317@k ag3326@x*)) ag3324@ls/false) ((lambda (ag3328@t) ((lambda (ag332a@ls/false) (if ag332a@ls/false (apply (lambda (ag332c@x ag332d@y) (ag3314@f ag332d@y (lambda (ag3330@ls) (ag3317@k (cons ag332c@x ag3330@ls))))) ag332a@ls/false) ((lambda (ag3332@t) ((lambda (ag3334@ls/false) (if ag3334@ls/false (apply (lambda () (list (ag2a8d@scheme-stx 'list->vector) ag3308@pat-x)) ag3334@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3332@t))) (ag2b03@syntax-dispatch ag3332@t '_))) ag3328@t))) (ag2b03@syntax-dispatch ag3328@t '(#(scheme-id cons) any any)))) ag3322@t))) (ag2b03@syntax-dispatch ag3322@t '(#(scheme-id list) . each-any)))) ag331a@t))) (ag2b03@syntax-dispatch ag331a@t '(#(scheme-id quote) each-any)))) ag3316@x)))) ag3314@f) ag3306@x (lambda (ag3336@ls) (cons* (ag2a8d@scheme-stx 'vector) ag3336@ls)))) ag3312@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3310@t))) (ag2b03@syntax-dispatch ag3310@t '_))) ag330a@t))) (ag2b03@syntax-dispatch ag330a@t '(#(scheme-id quote) each-any)))) ag3308@pat-x)) ag3306@x))) (set! ag32a3@vquasi (lambda (ag32e4@p ag32e5@lev) ((lambda (ag32e8@t) ((lambda (ag32ea@ls/false) (if ag32ea@ls/false (apply (lambda (ag32ec@p ag32ed@q) ((lambda (ag32f0@t) ((lambda (ag32f2@ls/false) (if ag32f2@ls/false (apply (lambda (ag32f4@p) (if (= ag32e5@lev '0) (ag329b@quasicons* ag32f4@p (ag32a3@vquasi ag32ed@q ag32e5@lev)) (ag329d@quasicons (ag329d@quasicons (ag327f@datum 'unquote) (ag32a5@quasi ag32f4@p (- ag32e5@lev '1))) (ag32a3@vquasi ag32ed@q ag32e5@lev)))) ag32f2@ls/false) ((lambda (ag32f6@t) ((lambda (ag32f8@ls/false) (if ag32f8@ls/false (apply (lambda (ag32fa@p) (if (= ag32e5@lev '0) (ag329f@quasiappend ag32fa@p (ag32a3@vquasi ag32ed@q ag32e5@lev)) (ag329d@quasicons (ag329d@quasicons (ag327f@datum 'unquote-splicing) (ag32a5@quasi ag32fa@p (- ag32e5@lev '1))) (ag32a3@vquasi ag32ed@q ag32e5@lev)))) ag32f8@ls/false) ((lambda (ag32fc@t) ((lambda (ag32fe@ls/false) (if ag32fe@ls/false (apply (lambda (ag3300@p) (ag329d@quasicons (ag32a5@quasi ag3300@p ag32e5@lev) (ag32a3@vquasi ag32ed@q ag32e5@lev))) ag32fe@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag32fc@t))) (ag2b03@syntax-dispatch ag32fc@t 'any))) ag32f6@t))) (ag2b03@syntax-dispatch ag32f6@t '(#(scheme-id unquote-splicing) . each-any)))) ag32f0@t))) (ag2b03@syntax-dispatch ag32f0@t '(#(scheme-id unquote) . each-any)))) ag32ec@p)) ag32ea@ls/false) ((lambda (ag3302@t) ((lambda (ag3304@ls/false) (if ag3304@ls/false (apply (lambda () (list (ag2a8d@scheme-stx 'quote) '())) ag3304@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3302@t))) (ag2b03@syntax-dispatch ag3302@t '()))) ag32e8@t))) (ag2b03@syntax-dispatch ag32e8@t '(any . any)))) ag32e4@p))) (set! ag32a5@quasi (lambda (ag32ae@p ag32af@lev) ((lambda (ag32b2@t) ((lambda (ag32b4@ls/false) (if ag32b4@ls/false (apply (lambda (ag32b6@p) (if (= ag32af@lev '0) ag32b6@p (ag329d@quasicons (ag327f@datum 'unquote) (ag32a5@quasi (list ag32b6@p) (- ag32af@lev '1))))) ag32b4@ls/false) ((lambda (ag32b8@t) ((lambda (ag32ba@ls/false) (if ag32ba@ls/false (apply (lambda (ag32bc@p ag32bd@q) (if (= ag32af@lev '0) (ag329b@quasicons* ag32bc@p (ag32a5@quasi ag32bd@q ag32af@lev)) (ag329d@quasicons (ag329d@quasicons (ag327f@datum 'unquote) (ag32a5@quasi ag32bc@p (- ag32af@lev '1))) (ag32a5@quasi ag32bd@q ag32af@lev)))) ag32ba@ls/false) ((lambda (ag32c0@t) ((lambda (ag32c2@ls/false) (if ag32c2@ls/false (apply (lambda (ag32c4@p ag32c5@q) (if (= ag32af@lev '0) (ag329f@quasiappend ag32c4@p (ag32a5@quasi ag32c5@q ag32af@lev)) (ag329d@quasicons (ag329d@quasicons (ag327f@datum 'unquote-splicing) (ag32a5@quasi ag32c4@p (- ag32af@lev '1))) (ag32a5@quasi ag32c5@q ag32af@lev)))) ag32c2@ls/false) ((lambda (ag32c8@t) ((lambda (ag32ca@ls/false) (if ag32ca@ls/false (apply (lambda (ag32cc@p) (ag329d@quasicons (ag327f@datum 'quasiquote) (ag32a5@quasi (list ag32cc@p) (+ ag32af@lev '1)))) ag32ca@ls/false) ((lambda (ag32ce@t) ((lambda (ag32d0@ls/false) (if ag32d0@ls/false (apply (lambda (ag32d2@p ag32d3@q) (ag329d@quasicons (ag32a5@quasi ag32d2@p ag32af@lev) (ag32a5@quasi ag32d3@q ag32af@lev))) ag32d0@ls/false) ((lambda (ag32d6@t) ((lambda (ag32d8@ls/false) (if (and ag32d8@ls/false (apply (lambda (ag32da@x) (not (ag28ca@stx? ag32da@x))) ag32d8@ls/false)) (apply (lambda (ag32dc@x) (ag32a1@quasivector (ag32a3@vquasi ag32dc@x ag32af@lev))) ag32d8@ls/false) ((lambda (ag32de@t) ((lambda (ag32e0@ls/false) (if ag32e0@ls/false (apply (lambda (ag32e2@p) (list (ag2a8d@scheme-stx 'quote) ag32e2@p)) ag32e0@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag32de@t))) (ag2b03@syntax-dispatch ag32de@t 'any))) ag32d6@t))) (ag2b03@syntax-dispatch ag32d6@t '#(vector each-any)))) ag32ce@t))) (ag2b03@syntax-dispatch ag32ce@t '(any . any)))) ag32c8@t))) (ag2b03@syntax-dispatch ag32c8@t '(#(scheme-id quasiquote) any)))) ag32c0@t))) (ag2b03@syntax-dispatch ag32c0@t '((#(scheme-id unquote-splicing) . each-any) . any)))) ag32b8@t))) (ag2b03@syntax-dispatch ag32b8@t '((#(scheme-id unquote) . each-any) . any)))) ag32b2@t))) (ag2b03@syntax-dispatch ag32b2@t '(#(scheme-id unquote) any)))) ag32ae@p))) (lambda (ag32a6@x) ((lambda (ag32a8@t) ((lambda (ag32aa@ls/false) (if ag32aa@ls/false (apply (lambda (ag32ac@e) (ag32a5@quasi ag32ac@e '0)) ag32aa@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag32a8@t))) (ag2b03@syntax-dispatch ag32a8@t '(_ any)))) ag32a6@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! ag4591@ag2af1@quasiquote-macro ag2af1@quasiquote-macro)) (begin (set! ag2af3@quasisyntax-macro ((lambda () ((lambda (ag3383@quasi) (begin (set! ag3383@quasi (lambda (ag339e@p ag339f@lev) ((lambda (ag33a2@t) ((lambda (ag33a4@ls/false) (if ag33a4@ls/false (apply (lambda (ag33a6@p) (if (= ag339f@lev '0) ((lambda (ag33a8@g) (values (list ag33a8@g) (list ag33a6@p) ag33a8@g)) (gensym)) (call-with-values (lambda () (ag3383@quasi ag33a6@p (- ag339f@lev '1))) (lambda (ag33b0@ag33ab ag33b1@ag33ad ag33b2@ag33af) ((lambda (ag33b6@p ag33b7@rhs* ag33b8@lhs*) (values ag33b8@lhs* ag33b7@rhs* (list 'unsyntax ag33b6@p))) ag33b2@ag33af ag33b1@ag33ad ag33b0@ag33ab))))) ag33a4@ls/false) ((lambda (ag33bc@t) ((lambda (ag33be@ls/false) (if (and ag33be@ls/false (apply (lambda () (= ag339f@lev '0)) ag33be@ls/false)) (apply (lambda () (ag2be3@syntax-violation '#f '"incorrect use of unsyntax" ag339e@p)) ag33be@ls/false) ((lambda (ag33c0@t) ((lambda (ag33c2@ls/false) (if ag33c2@ls/false (apply (lambda (ag33c4@p* ag33c5@q) (call-with-values (lambda () (ag3383@quasi ag33c5@q ag339f@lev)) (lambda (ag33ce@ag33c9 ag33cf@ag33cb ag33d0@ag33cd) ((lambda (ag33d4@q ag33d5@rhs* ag33d6@lhs*) (if (= ag339f@lev '0) ((lambda (ag33da@g*) (values (append ag33da@g* ag33d6@lhs*) (append ag33c4@p* ag33d5@rhs*) (append ag33da@g* ag33d4@q))) (map (lambda (ag33dc@x) (gensym)) ag33c4@p*)) (call-with-values (lambda () (ag3383@quasi ag33c4@p* (- ag339f@lev '1))) (lambda (ag33e4@ag33df ag33e5@ag33e1 ag33e6@ag33e3) ((lambda (ag33ea@p* ag33eb@rhs2* ag33ec@lhs2*) (values (append ag33ec@lhs2* ag33d6@lhs*) (append ag33eb@rhs2* ag33d5@rhs*) (cons (cons 'unsyntax ag33ea@p*) ag33d4@q))) ag33e6@ag33e3 ag33e5@ag33e1 ag33e4@ag33df))))) ag33d0@ag33cd ag33cf@ag33cb ag33ce@ag33c9)))) ag33c2@ls/false) ((lambda (ag33f0@t) ((lambda (ag33f2@ls/false) (if ag33f2@ls/false (apply (lambda (ag33f4@p* ag33f5@q) (call-with-values (lambda () (ag3383@quasi ag33f5@q ag339f@lev)) (lambda (ag33fe@ag33f9 ag33ff@ag33fb ag3400@ag33fd) ((lambda (ag3404@q ag3405@rhs* ag3406@lhs*) (if (= ag339f@lev '0) ((lambda (ag340a@g*) (values (append (map (lambda (ag340c@g) (cons ag340c@g '(...))) ag340a@g*) ag3406@lhs*) (append ag33f4@p* ag3405@rhs*) (append (apply append (map (lambda (ag340e@g) (cons ag340e@g '(...))) ag340a@g*)) ag3404@q))) (map (lambda (ag3410@x) (gensym)) ag33f4@p*)) (call-with-values (lambda () (ag3383@quasi ag33f4@p* (- ag339f@lev '1))) (lambda (ag3418@ag3413 ag3419@ag3415 ag341a@ag3417) ((lambda (ag341e@p* ag341f@rhs2* ag3420@lhs2*) (values (append ag3420@lhs2* ag3406@lhs*) (append ag341f@rhs2* ag3405@rhs*) (cons (cons 'unsyntax-splicing ag341e@p*) ag3404@q))) ag341a@ag3417 ag3419@ag3415 ag3418@ag3413))))) ag3400@ag33fd ag33ff@ag33fb ag33fe@ag33f9)))) ag33f2@ls/false) ((lambda (ag3424@t) ((lambda (ag3426@ls/false) (if (and ag3426@ls/false (apply (lambda () (= ag339f@lev '0)) ag3426@ls/false)) (apply (lambda () (ag2be3@syntax-violation '#f '"incorrect use of unsyntax-splicing" ag339e@p)) ag3426@ls/false) ((lambda (ag3428@t) ((lambda (ag342a@ls/false) (if ag342a@ls/false (apply (lambda (ag342c@p) (call-with-values (lambda () (ag3383@quasi ag342c@p (+ ag339f@lev '1))) (lambda (ag3434@ag342f ag3435@ag3431 ag3436@ag3433) ((lambda (ag343a@p ag343b@rhs* ag343c@lhs*) (values ag343c@lhs* ag343b@rhs* (list 'quasisyntax ag343a@p))) ag3436@ag3433 ag3435@ag3431 ag3434@ag342f)))) ag342a@ls/false) ((lambda (ag3440@t) ((lambda (ag3442@ls/false) (if ag3442@ls/false (apply (lambda (ag3444@p ag3445@q) (call-with-values (lambda () (ag3383@quasi ag3444@p ag339f@lev)) (lambda (ag3454@ag3449 ag3455@ag344b ag3456@ag344d) (call-with-values (lambda () (ag3383@quasi ag3445@q ag339f@lev)) (lambda (ag345a@ag344f ag345b@ag3451 ag345c@ag3453) ((lambda (ag3460@q ag3461@rhs2* ag3462@lhs2* ag3463@p ag3464@rhs* ag3465@lhs*) (values (append ag3462@lhs2* ag3465@lhs*) (append ag3461@rhs2* ag3464@rhs*) (cons ag3463@p ag3460@q))) ag345c@ag3453 ag345b@ag3451 ag345a@ag344f ag3456@ag344d ag3455@ag344b ag3454@ag3449)))))) ag3442@ls/false) ((lambda (ag346c@t) ((lambda (ag346e@ls/false) (if ag346e@ls/false (apply (lambda (ag3470@x*) (call-with-values (lambda () (ag3383@quasi ag3470@x* ag339f@lev)) (lambda (ag3478@ag3473 ag3479@ag3475 ag347a@ag3477) ((lambda (ag347e@x* ag347f@rhs* ag3480@lhs*) (values ag3480@lhs* ag347f@rhs* (list->vector ag347e@x*))) ag347a@ag3477 ag3479@ag3475 ag3478@ag3473)))) ag346e@ls/false) ((lambda (ag3484@t) ((lambda (ag3486@ls/false) (if ag3486@ls/false (apply (lambda () (values '() '() ag339e@p)) ag3486@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3484@t))) (ag2b03@syntax-dispatch ag3484@t '_))) ag346c@t))) (ag2b03@syntax-dispatch ag346c@t '#(vector each-any)))) ag3440@t))) (ag2b03@syntax-dispatch ag3440@t '(any . any)))) ag3428@t))) (ag2b03@syntax-dispatch ag3428@t '(#(scheme-id quasisyntax) any)))) ag3424@t))) (ag2b03@syntax-dispatch ag3424@t '#(scheme-id unsyntax-splicing)))) ag33f0@t))) (ag2b03@syntax-dispatch ag33f0@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) ag33c0@t))) (ag2b03@syntax-dispatch ag33c0@t '((#(scheme-id unsyntax) . each-any) . any)))) ag33bc@t))) (ag2b03@syntax-dispatch ag33bc@t '#(scheme-id unsyntax)))) ag33a2@t))) (ag2b03@syntax-dispatch ag33a2@t '(#(scheme-id unsyntax) any)))) ag339e@p))) (lambda (ag3384@x) ((lambda (ag3386@t) ((lambda (ag3388@ls/false) (if ag3388@ls/false (apply (lambda (ag338a@e) (call-with-values (lambda () (ag3383@quasi ag338a@e '0)) (lambda (ag3392@ag338d ag3393@ag338f ag3394@ag3391) ((lambda (ag3398@v ag3399@rhs* ag339a@lhs*) (ag2ab9@bless (list 'syntax-case (cons 'list ag3399@rhs*) '() (list ag339a@lhs* (list 'syntax ag3398@v))))) ag3394@ag3391 ag3393@ag338f ag3392@ag338d)))) ag3388@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3386@t))) (ag2b03@syntax-dispatch ag3386@t '(_ any)))) ag3384@x)))) '#f)))) (set! ag4592@ag2af3@quasisyntax-macro ag2af3@quasisyntax-macro)) (begin (set! ag2af5@define-struct-macro (lambda (ag3488@stx) (ag2be3@syntax-violation '#f '"define-struct not supported" ag3488@stx))) (set! ag4593@ag2af5@define-struct-macro ag2af5@define-struct-macro)) (begin (set! ag2af7@define-record-type-macro (lambda (ag348a@x) ((lambda (ag348d@id ag348f@get-record-name ag3491@get-record-constructor-name ag3493@get-record-predicate-name ag3495@get-clause ag3497@foo-rtd-code ag3499@parent-rtd-code ag349b@parent-rcd-code ag349d@foo-rcd-code ag349f@get-protocol-code ag34a1@get-fields ag34a3@get-mutator-indices ag34a5@get-mutators ag34a7@get-accessors ag34a9@enumerate ag34ab@do-define-record ag34ad@verify-clauses) (begin (set! ag348d@id (lambda (ag3680@ctxt . ag3682@str*) (ag2be7@datum->syntax ag3680@ctxt (string->symbol (apply string-append (map (lambda (ag3684@x) (if (symbol? ag3684@x) (symbol->string ag3684@x) (if (string? ag3684@x) ag3684@x (assertion-violation 'define-record-type '"BUG")))) ag3682@str*)))))) (set! ag348f@get-record-name (lambda (ag366e@spec) ((lambda (ag3670@t) ((lambda (ag3672@ls/false) (if ag3672@ls/false (apply (lambda (ag3674@foo ag3675@make-foo ag3676@foo?) ag3674@foo) ag3672@ls/false) ((lambda (ag367a@t) ((lambda (ag367c@ls/false) (if ag367c@ls/false (apply (lambda (ag367e@foo) ag367e@foo) ag367c@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag367a@t))) (ag2b03@syntax-dispatch ag367a@t 'any))) ag3670@t))) (ag2b03@syntax-dispatch ag3670@t '(any any any)))) ag366e@spec))) (set! ag3491@get-record-constructor-name (lambda (ag365a@spec) ((lambda (ag365c@t) ((lambda (ag365e@ls/false) (if ag365e@ls/false (apply (lambda (ag3660@foo ag3661@make-foo ag3662@foo?) ag3661@make-foo) ag365e@ls/false) ((lambda (ag3666@t) ((lambda (ag3668@ls/false) (if (and ag3668@ls/false (apply (lambda (ag366a@foo) (ag28fe@id? ag366a@foo)) ag3668@ls/false)) (apply (lambda (ag366c@foo) (ag348d@id ag366c@foo '"make-" (ag2912@stx->datum ag366c@foo))) ag3668@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3666@t))) (ag2b03@syntax-dispatch ag3666@t 'any))) ag365c@t))) (ag2b03@syntax-dispatch ag365c@t '(any any any)))) ag365a@spec))) (set! ag3493@get-record-predicate-name (lambda (ag3646@spec) ((lambda (ag3648@t) ((lambda (ag364a@ls/false) (if ag364a@ls/false (apply (lambda (ag364c@foo ag364d@make-foo ag364e@foo?) ag364e@foo?) ag364a@ls/false) ((lambda (ag3652@t) ((lambda (ag3654@ls/false) (if (and ag3654@ls/false (apply (lambda (ag3656@foo) (ag28fe@id? ag3656@foo)) ag3654@ls/false)) (apply (lambda (ag3658@foo) (ag348d@id ag3658@foo (ag2912@stx->datum ag3658@foo) '"?")) ag3654@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3652@t))) (ag2b03@syntax-dispatch ag3652@t 'any))) ag3648@t))) (ag2b03@syntax-dispatch ag3648@t '(any any any)))) ag3646@spec))) (set! ag3495@get-clause (lambda (ag3634@id ag3635@ls) ((lambda (ag3638@t) ((lambda (ag363a@ls/false) (if ag363a@ls/false (apply (lambda () '#f) ag363a@ls/false) ((lambda (ag363c@t) ((lambda (ag363e@ls/false) (if ag363e@ls/false (apply (lambda (ag3640@x ag3641@rest ag3642@ls) (if (ag2904@free-id=? (ag2ab9@bless ag3634@id) ag3640@x) (cons ag3640@x ag3641@rest) (ag3495@get-clause ag3634@id ag3642@ls))) ag363e@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag363c@t))) (ag2b03@syntax-dispatch ag363c@t '((any . any) . any)))) ag3638@t))) (ag2b03@syntax-dispatch ag3638@t '()))) ag3635@ls))) (set! ag3497@foo-rtd-code (lambda (ag35e2@name ag35e3@clause* ag35e4@parent-rtd-code) ((lambda (ag35e9@convert-field-spec*) (begin (set! ag35e9@convert-field-spec* (lambda (ag361a@ls) (list->vector (map (lambda (ag361c@x) ((lambda (ag361e@t) ((lambda (ag3620@ls/false) (if ag3620@ls/false (apply (lambda (ag3622@name ag3623@rest) (list 'mutable ag3622@name)) ag3620@ls/false) ((lambda (ag3626@t) ((lambda (ag3628@ls/false) (if ag3628@ls/false (apply (lambda (ag362a@name ag362b@rest) (list 'immutable ag362a@name)) ag3628@ls/false) ((lambda (ag362e@t) ((lambda (ag3630@ls/false) (if ag3630@ls/false (apply (lambda (ag3632@name) (list 'immutable ag3632@name)) ag3630@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag362e@t))) (ag2b03@syntax-dispatch ag362e@t 'any))) ag3626@t))) (ag2b03@syntax-dispatch ag3626@t '(#(scheme-id immutable) any . any)))) ag361e@t))) (ag2b03@syntax-dispatch ag361e@t '(#(scheme-id mutable) any . any)))) ag361c@x)) ag361a@ls)))) ((lambda (ag35ea@uid-code ag35eb@sealed? ag35ec@opaque? ag35ed@fields) (ag2ab9@bless (list 'make-record-type-descriptor (list 'quote ag35e2@name) ag35e4@parent-rtd-code ag35ea@uid-code ag35eb@sealed? ag35ec@opaque? ag35ed@fields))) ((lambda (ag35f2@t) ((lambda (ag35f4@ls/false) (if ag35f4@ls/false (apply (lambda () (list 'quote (gensym))) ag35f4@ls/false) ((lambda (ag35f6@t) ((lambda (ag35f8@ls/false) (if ag35f8@ls/false (apply (lambda (ag35fa@uid) (list 'quote ag35fa@uid)) ag35f8@ls/false) ((lambda (ag35fc@t) ((lambda (ag35fe@ls/false) (if ag35fe@ls/false (apply (lambda () '#f) ag35fe@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag35fc@t))) (ag2b03@syntax-dispatch ag35fc@t '_))) ag35f6@t))) (ag2b03@syntax-dispatch ag35f6@t '(_ any)))) ag35f2@t))) (ag2b03@syntax-dispatch ag35f2@t '(_)))) (ag3495@get-clause 'nongenerative ag35e3@clause*)) ((lambda (ag3600@t) ((lambda (ag3602@ls/false) (if ag3602@ls/false (apply (lambda () '#t) ag3602@ls/false) ((lambda (ag3604@t) ((lambda (ag3606@ls/false) (if ag3606@ls/false (apply (lambda () '#f) ag3606@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3604@t))) (ag2b03@syntax-dispatch ag3604@t '_))) ag3600@t))) (ag2b03@syntax-dispatch ag3600@t '(_ #(atom #t))))) (ag3495@get-clause 'sealed ag35e3@clause*)) ((lambda (ag3608@t) ((lambda (ag360a@ls/false) (if ag360a@ls/false (apply (lambda () '#t) ag360a@ls/false) ((lambda (ag360c@t) ((lambda (ag360e@ls/false) (if ag360e@ls/false (apply (lambda () '#f) ag360e@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag360c@t))) (ag2b03@syntax-dispatch ag360c@t '_))) ag3608@t))) (ag2b03@syntax-dispatch ag3608@t '(_ #(atom #t))))) (ag3495@get-clause 'opaque ag35e3@clause*)) ((lambda (ag3610@t) ((lambda (ag3612@ls/false) (if ag3612@ls/false (apply (lambda (ag3614@field-spec*) (list 'quote (ag35e9@convert-field-spec* ag3614@field-spec*))) ag3612@ls/false) ((lambda (ag3616@t) ((lambda (ag3618@ls/false) (if ag3618@ls/false (apply (lambda () ''#()) ag3618@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3616@t))) (ag2b03@syntax-dispatch ag3616@t '_))) ag3610@t))) (ag2b03@syntax-dispatch ag3610@t '(_ . each-any)))) (ag3495@get-clause 'fields ag35e3@clause*))))) '#f))) (set! ag3499@parent-rtd-code (lambda (ag35ca@clause*) ((lambda (ag35cc@t) ((lambda (ag35ce@ls/false) (if ag35ce@ls/false (apply (lambda (ag35d0@name) (list 'record-type-descriptor ag35d0@name)) ag35ce@ls/false) ((lambda (ag35d2@t) ((lambda (ag35d4@ls/false) (if ag35d4@ls/false (apply (lambda () ((lambda (ag35d6@t) ((lambda (ag35d8@ls/false) (if ag35d8@ls/false (apply (lambda (ag35da@rtd ag35db@rcd) ag35da@rtd) ag35d8@ls/false) ((lambda (ag35de@t) ((lambda (ag35e0@ls/false) (if ag35e0@ls/false (apply (lambda () '#f) ag35e0@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag35de@t))) (ag2b03@syntax-dispatch ag35de@t '#(atom #f)))) ag35d6@t))) (ag2b03@syntax-dispatch ag35d6@t '(_ any any)))) (ag3495@get-clause 'parent-rtd ag35ca@clause*))) ag35d4@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag35d2@t))) (ag2b03@syntax-dispatch ag35d2@t '#(atom #f)))) ag35cc@t))) (ag2b03@syntax-dispatch ag35cc@t '(_ any)))) (ag3495@get-clause 'parent ag35ca@clause*)))) (set! ag349b@parent-rcd-code (lambda (ag35b2@clause*) ((lambda (ag35b4@t) ((lambda (ag35b6@ls/false) (if ag35b6@ls/false (apply (lambda (ag35b8@name) (list 'record-constructor-descriptor ag35b8@name)) ag35b6@ls/false) ((lambda (ag35ba@t) ((lambda (ag35bc@ls/false) (if ag35bc@ls/false (apply (lambda () ((lambda (ag35be@t) ((lambda (ag35c0@ls/false) (if ag35c0@ls/false (apply (lambda (ag35c2@rtd ag35c3@rcd) ag35c3@rcd) ag35c0@ls/false) ((lambda (ag35c6@t) ((lambda (ag35c8@ls/false) (if ag35c8@ls/false (apply (lambda () '#f) ag35c8@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag35c6@t))) (ag2b03@syntax-dispatch ag35c6@t '#(atom #f)))) ag35be@t))) (ag2b03@syntax-dispatch ag35be@t '(_ any any)))) (ag3495@get-clause 'parent-rtd ag35b2@clause*))) ag35bc@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag35ba@t))) (ag2b03@syntax-dispatch ag35ba@t '#(atom #f)))) ag35b4@t))) (ag2b03@syntax-dispatch ag35b4@t '(_ any)))) (ag3495@get-clause 'parent ag35b2@clause*)))) (set! ag349d@foo-rcd-code (lambda (ag35aa@clause* ag35ab@foo-rtd ag35ac@protocol ag35ad@parent-rcd-code) (list 'make-record-constructor-descriptor ag35ab@foo-rtd ag35ad@parent-rcd-code ag35ac@protocol))) (set! ag349f@get-protocol-code (lambda (ag359e@clause*) ((lambda (ag35a0@t) ((lambda (ag35a2@ls/false) (if ag35a2@ls/false (apply (lambda (ag35a4@expr) ag35a4@expr) ag35a2@ls/false) ((lambda (ag35a6@t) ((lambda (ag35a8@ls/false) (if ag35a8@ls/false (apply (lambda () '#f) ag35a8@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag35a6@t))) (ag2b03@syntax-dispatch ag35a6@t '_))) ag35a0@t))) (ag2b03@syntax-dispatch ag35a0@t '(_ any)))) (ag3495@get-clause 'protocol ag359e@clause*)))) (set! ag34a1@get-fields (lambda (ag358c@clause*) ((lambda (ag358e@t) ((lambda (ag3590@ls/false) (if ag3590@ls/false (apply (lambda () '()) ag3590@ls/false) ((lambda (ag3592@t) ((lambda (ag3594@ls/false) (if ag3594@ls/false (apply (lambda (ag3596@f*) ag3596@f*) ag3594@ls/false) ((lambda (ag3598@t) ((lambda (ag359a@ls/false) (if ag359a@ls/false (apply (lambda (ag359c@rest) (ag34a1@get-fields ag359c@rest)) ag359a@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3598@t))) (ag2b03@syntax-dispatch ag3598@t '(_ . any)))) ag3592@t))) (ag2b03@syntax-dispatch ag3592@t '((#(scheme-id fields) . each-any) . _)))) ag358e@t))) (ag2b03@syntax-dispatch ag358e@t '()))) ag358c@clause*))) (set! ag34a3@get-mutator-indices (lambda (ag3574@fields) ((letrec ((ag3576@f (lambda (ag3578@fields ag3579@i) ((lambda (ag357c@t) ((lambda (ag357e@ls/false) (if ag357e@ls/false (apply (lambda () '()) ag357e@ls/false) ((lambda (ag3580@t) ((lambda (ag3582@ls/false) (if ag3582@ls/false (apply (lambda (ag3584@rest) (cons ag3579@i (ag3576@f ag3584@rest (+ ag3579@i '1)))) ag3582@ls/false) ((lambda (ag3586@t) ((lambda (ag3588@ls/false) (if ag3588@ls/false (apply (lambda (ag358a@rest) (ag3576@f ag358a@rest (+ ag3579@i '1))) ag3588@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3586@t))) (ag2b03@syntax-dispatch ag3586@t '(_ . any)))) ag3580@t))) (ag2b03@syntax-dispatch ag3580@t '((#(scheme-id mutable) . _) . any)))) ag357c@t))) (ag2b03@syntax-dispatch ag357c@t '()))) ag3578@fields)))) ag3576@f) ag3574@fields '0))) (set! ag34a5@get-mutators (lambda (ag354a@foo ag354b@fields) ((lambda (ag354f@gen-name) (begin (set! ag354f@gen-name (lambda (ag3572@x) (ag2be7@datum->syntax ag354a@foo (string->symbol (string-append (symbol->string (ag2be9@syntax->datum ag354a@foo)) '"-" (symbol->string (ag2be9@syntax->datum ag3572@x)) '"-set!"))))) ((letrec ((ag3550@f (lambda (ag3552@fields) ((lambda (ag3554@t) ((lambda (ag3556@ls/false) (if ag3556@ls/false (apply (lambda () '()) ag3556@ls/false) ((lambda (ag3558@t) ((lambda (ag355a@ls/false) (if ag355a@ls/false (apply (lambda (ag355c@name ag355d@accessor ag355e@mutator ag355f@rest) (cons ag355e@mutator (ag3550@f ag355f@rest))) ag355a@ls/false) ((lambda (ag3564@t) ((lambda (ag3566@ls/false) (if ag3566@ls/false (apply (lambda (ag3568@name ag3569@rest) (cons (ag354f@gen-name ag3568@name) (ag3550@f ag3569@rest))) ag3566@ls/false) ((lambda (ag356c@t) ((lambda (ag356e@ls/false) (if ag356e@ls/false (apply (lambda (ag3570@rest) (ag3550@f ag3570@rest)) ag356e@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag356c@t))) (ag2b03@syntax-dispatch ag356c@t '(_ . any)))) ag3564@t))) (ag2b03@syntax-dispatch ag3564@t '((#(scheme-id mutable) any) . any)))) ag3558@t))) (ag2b03@syntax-dispatch ag3558@t '((#(scheme-id mutable) any any any) . any)))) ag3554@t))) (ag2b03@syntax-dispatch ag3554@t '()))) ag3552@fields)))) ag3550@f) ag354b@fields))) '#f))) (set! ag34a7@get-accessors (lambda (ag3506@foo ag3507@fields) ((lambda (ag350b@gen-name) (begin (set! ag350b@gen-name (lambda (ag3548@x) (ag2be7@datum->syntax ag3506@foo (string->symbol (string-append (symbol->string (ag2be9@syntax->datum ag3506@foo)) '"-" (symbol->string (ag2be9@syntax->datum ag3548@x))))))) (map (lambda (ag350c@field) ((lambda (ag350e@t) ((lambda (ag3510@ls/false) (if (and ag3510@ls/false (apply (lambda (ag3512@name ag3513@accessor ag3514@mutator) (ag28fe@id? ag3513@accessor)) ag3510@ls/false)) (apply (lambda (ag3518@name ag3519@accessor ag351a@mutator) ag3519@accessor) ag3510@ls/false) ((lambda (ag351e@t) ((lambda (ag3520@ls/false) (if (and ag3520@ls/false (apply (lambda (ag3522@name ag3523@accessor) (ag28fe@id? ag3523@accessor)) ag3520@ls/false)) (apply (lambda (ag3526@name ag3527@accessor) ag3527@accessor) ag3520@ls/false) ((lambda (ag352a@t) ((lambda (ag352c@ls/false) (if (and ag352c@ls/false (apply (lambda (ag352e@name) (ag28fe@id? ag352e@name)) ag352c@ls/false)) (apply (lambda (ag3530@name) (ag350b@gen-name ag3530@name)) ag352c@ls/false) ((lambda (ag3532@t) ((lambda (ag3534@ls/false) (if (and ag3534@ls/false (apply (lambda (ag3536@name) (ag28fe@id? ag3536@name)) ag3534@ls/false)) (apply (lambda (ag3538@name) (ag350b@gen-name ag3538@name)) ag3534@ls/false) ((lambda (ag353a@t) ((lambda (ag353c@ls/false) (if (and ag353c@ls/false (apply (lambda (ag353e@name) (ag28fe@id? ag353e@name)) ag353c@ls/false)) (apply (lambda (ag3540@name) (ag350b@gen-name ag3540@name)) ag353c@ls/false) ((lambda (ag3542@t) ((lambda (ag3544@ls/false) (if ag3544@ls/false (apply (lambda (ag3546@others) (ag2be3@syntax-violation '#f '"invalid field spec" ag350c@field)) ag3544@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3542@t))) (ag2b03@syntax-dispatch ag3542@t 'any))) ag353a@t))) (ag2b03@syntax-dispatch ag353a@t 'any))) ag3532@t))) (ag2b03@syntax-dispatch ag3532@t '(#(scheme-id immutable) any)))) ag352a@t))) (ag2b03@syntax-dispatch ag352a@t '(#(scheme-id mutable) any)))) ag351e@t))) (ag2b03@syntax-dispatch ag351e@t '(#(scheme-id immutable) any any)))) ag350e@t))) (ag2b03@syntax-dispatch ag350e@t '(#(scheme-id mutable) any any any)))) ag350c@field)) ag3507@fields))) '#f))) (set! ag34a9@enumerate (lambda (ag34fe@ls) ((letrec ((ag3500@f (lambda (ag3502@ls ag3503@i) (if (null? ag3502@ls) '() (cons ag3503@i (ag3500@f (cdr ag3502@ls) (+ ag3503@i '1))))))) ag3500@f) ag34fe@ls '0))) (set! ag34ab@do-define-record (lambda (ag34d6@namespec ag34d7@clause*) ((lambda (ag34da@foo) ((lambda (ag34dc@foo-rtd) ((lambda (ag34de@foo-rcd) ((lambda (ag34e0@protocol) ((lambda (ag34e2@make-foo) ((lambda (ag34e4@fields) ((lambda (ag34e6@idx*) ((lambda (ag34e8@foo-x*) ((lambda (ag34ea@set-foo-x!*) ((lambda (ag34ec@set-foo-idx*) ((lambda (ag34ee@foo?) ((lambda (ag34f0@foo-rtd-code) ((lambda (ag34f2@foo-rcd-code) ((lambda (ag34f4@protocol-code) ((lambda () (ag2ab9@bless (cons 'begin (cons (list 'define ag34dc@foo-rtd ag34f0@foo-rtd-code) (cons (list 'define ag34e0@protocol ag34f4@protocol-code) (cons (list 'define ag34de@foo-rcd ag34f2@foo-rcd-code) (cons (list 'define-syntax ag34da@foo (list 'list ''$rtd (list 'syntax ag34dc@foo-rtd) (list 'syntax ag34de@foo-rcd))) (cons (list 'define ag34ee@foo? (list 'record-predicate ag34dc@foo-rtd)) (cons (list 'define ag34e2@make-foo (list 'record-constructor ag34de@foo-rcd)) (append (map (lambda (ag34f6@foo-x ag34f7@idx) (list 'define ag34f6@foo-x (list 'record-accessor ag34dc@foo-rtd ag34f7@idx))) ag34e8@foo-x* ag34e6@idx*) (map (lambda (ag34fa@set-foo-x! ag34fb@idx) (list 'define ag34fa@set-foo-x! (list 'record-mutator ag34dc@foo-rtd ag34fb@idx))) ag34ea@set-foo-x!* ag34ec@set-foo-idx*))))))))))))) (ag349f@get-protocol-code ag34d7@clause*))) (ag349d@foo-rcd-code ag34d7@clause* ag34dc@foo-rtd ag34e0@protocol (ag349b@parent-rcd-code ag34d7@clause*)))) (ag3497@foo-rtd-code ag34da@foo ag34d7@clause* (ag3499@parent-rtd-code ag34d7@clause*)))) (ag3493@get-record-predicate-name ag34d6@namespec))) (ag34a3@get-mutator-indices ag34e4@fields))) (ag34a5@get-mutators ag34da@foo ag34e4@fields))) (ag34a7@get-accessors ag34da@foo ag34e4@fields))) (ag34a9@enumerate ag34e4@fields))) (ag34a1@get-fields ag34d7@clause*))) (ag3491@get-record-constructor-name ag34d6@namespec))) (gensym))) (gensym))) (gensym))) (ag348f@get-record-name ag34d6@namespec)))) (set! ag34ad@verify-clauses (lambda (ag34b6@x ag34b7@cls*) ((lambda (ag34bb@valid-kwds ag34bd@free-id-member?) (begin (set! ag34bb@valid-kwds (map ag2ab9@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! ag34bd@free-id-member? (lambda (ag34d2@x ag34d3@ls) (and (pair? ag34d3@ls) (or (ag2904@free-id=? ag34d2@x (car ag34d3@ls)) (ag34bd@free-id-member? ag34d2@x (cdr ag34d3@ls)))))) ((letrec ((ag34be@f (lambda (ag34c0@cls* ag34c1@seen*) (if (not (null? ag34c0@cls*)) ((lambda (ag34c4@t) ((lambda (ag34c6@ls/false) (if ag34c6@ls/false (apply (lambda (ag34c8@kwd ag34c9@rest) (if (or (not (ag28fe@id? ag34c8@kwd)) (not (ag34bd@free-id-member? ag34c8@kwd ag34bb@valid-kwds))) (ag2be3@syntax-violation '#f '"not a valid define-record-type keyword" ag34c8@kwd) (if (ag290a@bound-id-member? ag34c8@kwd ag34c1@seen*) (ag2be3@syntax-violation '#f '"duplicate use of keyword " ag34b6@x ag34c8@kwd) (ag34be@f (cdr ag34c0@cls*) (cons ag34c8@kwd ag34c1@seen*))))) ag34c6@ls/false) ((lambda (ag34cc@t) ((lambda (ag34ce@ls/false) (if ag34ce@ls/false (apply (lambda (ag34d0@cls) (ag2be3@syntax-violation '#f '"malformed define-record-type clause" ag34d0@cls)) ag34ce@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag34cc@t))) (ag2b03@syntax-dispatch ag34cc@t 'any))) ag34c4@t))) (ag2b03@syntax-dispatch ag34c4@t '(any . any)))) (car ag34c0@cls*)) (void))))) ag34be@f) ag34b7@cls* '()))) '#f '#f))) ((lambda (ag34ae@t) ((lambda (ag34b0@ls/false) (if ag34b0@ls/false (apply (lambda (ag34b2@namespec ag34b3@clause*) (begin (ag34ad@verify-clauses ag348a@x ag34b3@clause*) (ag34ab@do-define-record ag34b2@namespec ag34b3@clause*))) ag34b0@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag34ae@t))) (ag2b03@syntax-dispatch ag34ae@t '(_ any . each-any)))) ag348a@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! ag4594@ag2af7@define-record-type-macro ag2af7@define-record-type-macro)) (begin (set! ag2af9@define-condition-type-macro (lambda (ag3686@x) ((lambda (ag3689@mkname) (begin (set! ag3689@mkname (lambda (ag36b6@name ag36b7@suffix) (ag2be7@datum->syntax ag36b6@name (string->symbol (string-append (symbol->string (ag2be9@syntax->datum ag36b6@name)) ag36b7@suffix))))) ((lambda (ag368a@t) ((lambda (ag368c@ls/false) (if (and ag368c@ls/false (apply (lambda (ag368e@ctxt ag368f@name ag3690@super ag3691@constructor ag3692@predicate ag3693@field* ag3694@accessor*) (and (ag28fe@id? ag368f@name) (ag28fe@id? ag3690@super) (ag28fe@id? ag3691@constructor) (ag28fe@id? ag3692@predicate) (for-all ag28fe@id? ag3693@field*) (for-all ag28fe@id? ag3694@accessor*))) ag368c@ls/false)) (apply (lambda (ag369c@ctxt ag369d@name ag369e@super ag369f@constructor ag36a0@predicate ag36a1@field* ag36a2@accessor*) ((lambda (ag36aa@aux-accessor*) (ag2ab9@bless (cons 'begin (cons (cons 'define-record-type (cons (list ag369d@name ag369f@constructor (gensym)) (cons (list 'parent ag369e@super) (cons (cons 'fields (map (lambda (ag36ac@field ag36ad@aux) (list 'immutable ag36ac@field ag36ad@aux)) ag36a1@field* ag36aa@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define ag36a0@predicate (list 'condition-predicate (list 'record-type-descriptor ag369d@name))) (map (lambda (ag36b0@accessor ag36b1@aux) (list 'define ag36b0@accessor (list 'condition-accessor (list 'record-type-descriptor ag369d@name) ag36b1@aux))) ag36a2@accessor* ag36aa@aux-accessor*)))))) (map (lambda (ag36b4@x) (gensym)) ag36a2@accessor*))) ag368c@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag368a@t))) (ag2b03@syntax-dispatch ag368a@t '(any any any any any . #(each (any any)))))) ag3686@x))) '#f))) (set! ag4595@ag2af9@define-condition-type-macro ag2af9@define-condition-type-macro)) (begin (set! ag2afb@incorrect-usage-macro (lambda (ag36ba@e) (ag2be3@syntax-violation '#f '"incorrect usage of auxiliary keyword" ag36ba@e))) (set! ag4596@ag2afb@incorrect-usage-macro ag2afb@incorrect-usage-macro)) (begin (set! ag2afd@parameterize-macro (lambda (ag36bc@e) ((lambda (ag36be@t) ((lambda (ag36c0@ls/false) (if ag36c0@ls/false (apply (lambda (ag36c2@b ag36c3@b*) (ag2ab9@bless (cons 'let (cons '() (cons ag36c2@b ag36c3@b*))))) ag36c0@ls/false) ((lambda (ag36c6@t) ((lambda (ag36c8@ls/false) (if ag36c8@ls/false (apply (lambda (ag36ca@olhs* ag36cb@orhs* ag36cc@b ag36cd@b*) ((lambda (ag36d2@lhs* ag36d3@rhs*) (ag2ab9@bless (cons (list 'lambda (append ag36d2@lhs* ag36d3@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (ag36d6@lhs ag36d7@rhs) (list 'let (list (list 't (list ag36d6@lhs))) (list ag36d6@lhs ag36d7@rhs) (cons 'set! (cons ag36d7@rhs '(t))))) ag36d2@lhs* ag36d3@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons ag36cc@b ag36cd@b*))) '(swap)))))) (append ag36ca@olhs* ag36cb@orhs*)))) (ag2bd1@generate-temporaries ag36ca@olhs*) (ag2bd1@generate-temporaries ag36cb@orhs*))) ag36c8@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag36c6@t))) (ag2b03@syntax-dispatch ag36c6@t '(_ #(each (any any)) any . each-any)))) ag36be@t))) (ag2b03@syntax-dispatch ag36be@t '(_ () any . each-any)))) ag36bc@e))) (set! ag4597@ag2afd@parameterize-macro ag2afd@parameterize-macro)) (begin (set! ag2aff@foreign-call-transformer (lambda (ag36da@e ag36db@r ag36dc@mr) ((lambda (ag36e0@t) ((lambda (ag36e2@ls/false) (if ag36e2@ls/false (apply (lambda (ag36e4@name ag36e5@arg*) (cons 'foreign-call (cons (ag2b25@chi-expr ag36e4@name ag36db@r ag36dc@mr) (ag2b21@chi-expr* ag36e5@arg* ag36db@r ag36dc@mr)))) ag36e2@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag36e0@t))) (ag2b03@syntax-dispatch ag36e0@t '(_ any . each-any)))) ag36da@e))) (set! ag4598@ag2aff@foreign-call-transformer ag2aff@foreign-call-transformer)) (begin (set! ag2b01@convert-pattern (lambda (ag36e8@pattern ag36e9@keys) ((lambda (ag36ed@cvt* ag36ef@cvt) (begin (set! ag36ed@cvt* (lambda (ag378c@p* ag378d@n ag378e@ids) (if (null? ag378c@p*) (values '() ag378e@ids) (call-with-values (lambda () (ag36ed@cvt* (cdr ag378c@p*) ag378d@n ag378e@ids)) (lambda (ag3796@ag3793 ag3797@ag3795) ((lambda (ag379a@ids ag379b@y) (call-with-values (lambda () (ag36ef@cvt (car ag378c@p*) ag378d@n ag379a@ids)) (lambda (ag37a2@ag379f ag37a3@ag37a1) ((lambda (ag37a6@ids ag37a7@x) (values (cons ag37a7@x ag379b@y) ag37a6@ids)) ag37a3@ag37a1 ag37a2@ag379f)))) ag3797@ag3795 ag3796@ag3793)))))) (set! ag36ef@cvt (lambda (ag36f0@p ag36f1@n ag36f2@ids) ((lambda (ag36f6@t) ((lambda (ag36f8@ls/false) (if (and ag36f8@ls/false (apply (lambda (ag36fa@id) (ag28fe@id? ag36fa@id)) ag36f8@ls/false)) (apply (lambda (ag36fc@id) (if (ag290a@bound-id-member? ag36f0@p ag36e9@keys) (values (vector 'free-id ag36f0@p) ag36f2@ids) (if (ag2904@free-id=? ag36f0@p (ag2a8d@scheme-stx '_)) (values '_ ag36f2@ids) (values 'any (cons (cons ag36f0@p ag36f1@n) ag36f2@ids))))) ag36f8@ls/false) ((lambda (ag36fe@t) ((lambda (ag3700@ls/false) (if (and ag3700@ls/false (apply (lambda (ag3702@p ag3703@dots) (ag2b05@ellipsis? ag3703@dots)) ag3700@ls/false)) (apply (lambda (ag3706@p ag3707@dots) (call-with-values (lambda () (ag36ef@cvt ag3706@p (+ ag36f1@n '1) ag36f2@ids)) (lambda (ag370e@ag370b ag370f@ag370d) ((lambda (ag3712@ids ag3713@p) (values (if (eq? ag3713@p 'any) 'each-any (vector 'each ag3713@p)) ag3712@ids)) ag370f@ag370d ag370e@ag370b)))) ag3700@ls/false) ((lambda (ag3716@t) ((lambda (ag3718@ls/false) (if (and ag3718@ls/false (apply (lambda (ag371a@x ag371b@dots ag371c@ys ag371d@z) (ag2b05@ellipsis? ag371b@dots)) ag3718@ls/false)) (apply (lambda (ag3722@x ag3723@dots ag3724@ys ag3725@z) (call-with-values (lambda () (ag36ef@cvt ag3725@z ag36f1@n ag36f2@ids)) (lambda (ag372e@ag372b ag372f@ag372d) ((lambda (ag3732@ids ag3733@z) (call-with-values (lambda () (ag36ed@cvt* ag3724@ys ag36f1@n ag3732@ids)) (lambda (ag373a@ag3737 ag373b@ag3739) ((lambda (ag373e@ids ag373f@ys) (call-with-values (lambda () (ag36ef@cvt ag3722@x (+ ag36f1@n '1) ag373e@ids)) (lambda (ag3746@ag3743 ag3747@ag3745) ((lambda (ag374a@ids ag374b@x) (values (vector 'each+ ag374b@x (reverse ag373f@ys) ag3733@z) ag374a@ids)) ag3747@ag3745 ag3746@ag3743)))) ag373b@ag3739 ag373a@ag3737)))) ag372f@ag372d ag372e@ag372b)))) ag3718@ls/false) ((lambda (ag374e@t) ((lambda (ag3750@ls/false) (if ag3750@ls/false (apply (lambda (ag3752@x ag3753@y) (call-with-values (lambda () (ag36ef@cvt ag3753@y ag36f1@n ag36f2@ids)) (lambda (ag375a@ag3757 ag375b@ag3759) ((lambda (ag375e@ids ag375f@y) (call-with-values (lambda () (ag36ef@cvt ag3752@x ag36f1@n ag375e@ids)) (lambda (ag3766@ag3763 ag3767@ag3765) ((lambda (ag376a@ids ag376b@x) (values (cons ag376b@x ag375f@y) ag376a@ids)) ag3767@ag3765 ag3766@ag3763)))) ag375b@ag3759 ag375a@ag3757)))) ag3750@ls/false) ((lambda (ag376e@t) ((lambda (ag3770@ls/false) (if ag3770@ls/false (apply (lambda () (values '() ag36f2@ids)) ag3770@ls/false) ((lambda (ag3772@t) ((lambda (ag3774@ls/false) (if (and ag3774@ls/false (apply (lambda (ag3776@p) (not (ag28ca@stx? ag3776@p))) ag3774@ls/false)) (apply (lambda (ag3778@p) (call-with-values (lambda () (ag36ef@cvt ag3778@p ag36f1@n ag36f2@ids)) (lambda (ag377e@ag377b ag377f@ag377d) ((lambda (ag3782@ids ag3783@p) (values (vector 'vector ag3783@p) ag3782@ids)) ag377f@ag377d ag377e@ag377b)))) ag3774@ls/false) ((lambda (ag3786@t) ((lambda (ag3788@ls/false) (if ag3788@ls/false (apply (lambda (ag378a@datum) (values (vector 'atom (ag2912@stx->datum ag378a@datum)) ag36f2@ids)) ag3788@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3786@t))) (ag2b03@syntax-dispatch ag3786@t 'any))) ag3772@t))) (ag2b03@syntax-dispatch ag3772@t '#(vector each-any)))) ag376e@t))) (ag2b03@syntax-dispatch ag376e@t '()))) ag374e@t))) (ag2b03@syntax-dispatch ag374e@t '(any . any)))) ag3716@t))) (ag2b03@syntax-dispatch ag3716@t '(any any . #(each+ any () any))))) ag36fe@t))) (ag2b03@syntax-dispatch ag36fe@t '(any any)))) ag36f6@t))) (ag2b03@syntax-dispatch ag36f6@t 'any))) ag36f0@p))) (ag36ef@cvt ag36e8@pattern '0 '()))) '#f '#f))) (set! ag4599@ag2b01@convert-pattern ag2b01@convert-pattern)) (begin (set! ag2b03@syntax-dispatch ((lambda () ((lambda (ag37ab@stx^ ag37ad@match-each ag37af@match-each+ ag37b1@match-each-any ag37b3@match-empty ag37b5@combine ag37b7@match* ag37b9@match) (begin (set! ag37ab@stx^ (lambda (ag3886@e ag3887@m* ag3888@s* ag3889@ae*) (if (and (null? ag3887@m*) (null? ag3888@s*) (null? ag3889@ae*)) ag3886@e (ag28e6@mkstx ag3886@e ag3887@m* ag3888@s* ag3889@ae*)))) (set! ag37ad@match-each (lambda (ag3866@e ag3867@p ag3868@m* ag3869@s* ag386a@ae*) (if (pair? ag3866@e) ((lambda (ag3870@first) (and ag3870@first ((lambda (ag3872@rest) (and ag3872@rest (cons ag3870@first ag3872@rest))) (ag37ad@match-each (cdr ag3866@e) ag3867@p ag3868@m* ag3869@s* ag386a@ae*)))) (ag37b9@match (car ag3866@e) ag3867@p ag3868@m* ag3869@s* ag386a@ae* '())) (if (null? ag3866@e) '() (if (ag28ca@stx? ag3866@e) (and (not (ag2884@top-marked? ag3868@m*)) (call-with-values (lambda () (join-wraps ag3868@m* ag3869@s* ag386a@ae* ag3866@e)) (lambda (ag387a@ag3875 ag387b@ag3877 ag387c@ag3879) ((lambda (ag3880@ae* ag3881@s* ag3882@m*) (ag37ad@match-each (ag28cc@stx-expr ag3866@e) ag3867@p ag3882@m* ag3881@s* ag3880@ae*)) ag387c@ag3879 ag387b@ag3877 ag387a@ag3875)))) (if (ag244a@ag231e@annotation? ag3866@e) (ag37ad@match-each (ag244c@ag2322@annotation-expression ag3866@e) ag3867@p ag3868@m* ag3869@s* ag386a@ae*) '#f)))))) (set! ag37af@match-each+ (lambda (ag3826@e ag3827@x-pat ag3828@y-pat ag3829@z-pat ag382a@m* ag382b@s* ag382c@ae* ag382d@r) ((letrec ((ag3836@f (lambda (ag3838@e ag3839@m* ag383a@s* ag383b@ae*) (if (pair? ag3838@e) (call-with-values (lambda () (ag3836@f (cdr ag3838@e) ag3839@m* ag383a@s* ag383b@ae*)) (lambda (ag3846@ag3841 ag3847@ag3843 ag3848@ag3845) ((lambda (ag384c@r ag384d@y-pat ag384e@xr*) (if ag384c@r (if (null? ag384d@y-pat) ((lambda (ag3852@xr) (if ag3852@xr (values (cons ag3852@xr ag384e@xr*) ag384d@y-pat ag384c@r) (values '#f '#f '#f))) (ag37b9@match (car ag3838@e) ag3827@x-pat ag3839@m* ag383a@s* ag383b@ae* '())) (values '() (cdr ag384d@y-pat) (ag37b9@match (car ag3838@e) (car ag384d@y-pat) ag3839@m* ag383a@s* ag383b@ae* ag384c@r))) (values '#f '#f '#f))) ag3848@ag3845 ag3847@ag3843 ag3846@ag3841))) (if (ag28ca@stx? ag3838@e) (if (ag2884@top-marked? ag3839@m*) (values '() ag3828@y-pat (ag37b9@match ag3838@e ag3829@z-pat ag3839@m* ag383a@s* ag383b@ae* ag382d@r)) (call-with-values (lambda () (join-wraps ag3839@m* ag383a@s* ag383b@ae* ag3838@e)) (lambda (ag385a@ag3855 ag385b@ag3857 ag385c@ag3859) ((lambda (ag3860@ae* ag3861@s* ag3862@m*) (ag3836@f (ag28cc@stx-expr ag3838@e) ag3862@m* ag3861@s* ag3860@ae*)) ag385c@ag3859 ag385b@ag3857 ag385a@ag3855)))) (if (ag244a@ag231e@annotation? ag3838@e) (ag3836@f (ag244c@ag2322@annotation-expression ag3838@e) ag3839@m* ag383a@s* ag383b@ae*) (values '() ag3828@y-pat (ag37b9@match ag3838@e ag3829@z-pat ag3839@m* ag383a@s* ag383b@ae* ag382d@r)))))))) ag3836@f) ag3826@e ag382a@m* ag382b@s* ag382c@ae*))) (set! ag37b1@match-each-any (lambda (ag380a@e ag380b@m* ag380c@s* ag380d@ae*) (if (pair? ag380a@e) ((lambda (ag3812@l) (and ag3812@l (cons (ag37ab@stx^ (car ag380a@e) ag380b@m* ag380c@s* ag380d@ae*) ag3812@l))) (ag37b1@match-each-any (cdr ag380a@e) ag380b@m* ag380c@s* ag380d@ae*)) (if (null? ag380a@e) '() (if (ag28ca@stx? ag380a@e) (and (not (ag2884@top-marked? ag380b@m*)) (call-with-values (lambda () (join-wraps ag380b@m* ag380c@s* ag380d@ae* ag380a@e)) (lambda (ag381a@ag3815 ag381b@ag3817 ag381c@ag3819) ((lambda (ag3820@ae* ag3821@s* ag3822@m*) (ag37b1@match-each-any (ag28cc@stx-expr ag380a@e) ag3822@m* ag3821@s* ag3820@ae*)) ag381c@ag3819 ag381b@ag3817 ag381a@ag3815)))) (if (ag244a@ag231e@annotation? ag380a@e) (ag37b1@match-each-any (ag244c@ag2322@annotation-expression ag380a@e) ag380b@m* ag380c@s* ag380d@ae*) '#f)))))) (set! ag37b3@match-empty (lambda (ag3804@p ag3805@r) (if (null? ag3804@p) ag3805@r (if (eq? ag3804@p '_) ag3805@r (if (eq? ag3804@p 'any) (cons '() ag3805@r) (if (pair? ag3804@p) (ag37b3@match-empty (car ag3804@p) (ag37b3@match-empty (cdr ag3804@p) ag3805@r)) (if (eq? ag3804@p 'each-any) (cons '() ag3805@r) ((lambda (ag3808@t) (if (memv ag3808@t '(each)) (ag37b3@match-empty (vector-ref ag3804@p '1) ag3805@r) (if (memv ag3808@t '(each+)) (ag37b3@match-empty (vector-ref ag3804@p '1) (ag37b3@match-empty (reverse (vector-ref ag3804@p '2)) (ag37b3@match-empty (vector-ref ag3804@p '3) ag3805@r))) (if (memv ag3808@t '(free-id atom)) ag3805@r (if (memv ag3808@t '(scheme-id atom)) ag3805@r (if (memv ag3808@t '(vector)) (ag37b3@match-empty (vector-ref ag3804@p '1) ag3805@r) (assertion-violation 'syntax-dispatch '"invalid pattern" ag3804@p))))))) (vector-ref ag3804@p '0))))))))) (set! ag37b5@combine (lambda (ag3800@r* ag3801@r) (if (null? (car ag3800@r*)) ag3801@r (cons (map car ag3800@r*) (ag37b5@combine (map cdr ag3800@r*) ag3801@r))))) (set! ag37b7@match* (lambda (ag37dc@e ag37dd@p ag37de@m* ag37df@s* ag37e0@ae* ag37e1@r) (if (null? ag37dd@p) (and (null? ag37dc@e) ag37e1@r) (if (pair? ag37dd@p) (and (pair? ag37dc@e) (ag37b9@match (car ag37dc@e) (car ag37dd@p) ag37de@m* ag37df@s* ag37e0@ae* (ag37b9@match (cdr ag37dc@e) (cdr ag37dd@p) ag37de@m* ag37df@s* ag37e0@ae* ag37e1@r))) (if (eq? ag37dd@p 'each-any) ((lambda (ag37e8@l) (and ag37e8@l (cons ag37e8@l ag37e1@r))) (ag37b1@match-each-any ag37dc@e ag37de@m* ag37df@s* ag37e0@ae*)) ((lambda (ag37ea@t) (if (memv ag37ea@t '(each)) (if (null? ag37dc@e) (ag37b3@match-empty (vector-ref ag37dd@p '1) ag37e1@r) ((lambda (ag37ec@r*) (and ag37ec@r* (ag37b5@combine ag37ec@r* ag37e1@r))) (ag37ad@match-each ag37dc@e (vector-ref ag37dd@p '1) ag37de@m* ag37df@s* ag37e0@ae*))) (if (memv ag37ea@t '(free-id)) (and (symbol? ag37dc@e) (ag2884@top-marked? ag37de@m*) (ag2904@free-id=? (ag37ab@stx^ ag37dc@e ag37de@m* ag37df@s* ag37e0@ae*) (vector-ref ag37dd@p '1)) ag37e1@r) (if (memv ag37ea@t '(scheme-id)) (and (symbol? ag37dc@e) (ag2884@top-marked? ag37de@m*) (ag2904@free-id=? (ag37ab@stx^ ag37dc@e ag37de@m* ag37df@s* ag37e0@ae*) (ag2a8d@scheme-stx (vector-ref ag37dd@p '1))) ag37e1@r) (if (memv ag37ea@t '(each+)) (call-with-values (lambda () (ag37af@match-each+ ag37dc@e (vector-ref ag37dd@p '1) (vector-ref ag37dd@p '2) (vector-ref ag37dd@p '3) ag37de@m* ag37df@s* ag37e0@ae* ag37e1@r)) (lambda (ag37f4@ag37ef ag37f5@ag37f1 ag37f6@ag37f3) ((lambda (ag37fa@r ag37fb@y-pat ag37fc@xr*) (and ag37fa@r (null? ag37fb@y-pat) (if (null? ag37fc@xr*) (ag37b3@match-empty (vector-ref ag37dd@p '1) ag37fa@r) (ag37b5@combine ag37fc@xr* ag37fa@r)))) ag37f6@ag37f3 ag37f5@ag37f1 ag37f4@ag37ef))) (if (memv ag37ea@t '(atom)) (and (fast-equal? (vector-ref ag37dd@p '1) (ag2910@strip ag37dc@e ag37de@m*)) ag37e1@r) (if (memv ag37ea@t '(vector)) (and (vector? ag37dc@e) (ag37b9@match (vector->list ag37dc@e) (vector-ref ag37dd@p '1) ag37de@m* ag37df@s* ag37e0@ae* ag37e1@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" ag37dd@p)))))))) (vector-ref ag37dd@p '0))))))) (set! ag37b9@match (lambda (ag37be@e ag37bf@p ag37c0@m* ag37c1@s* ag37c2@ae* ag37c3@r) (if (not ag37c3@r) '#f (if (eq? ag37bf@p '_) ag37c3@r (if (eq? ag37bf@p 'any) (cons (ag37ab@stx^ ag37be@e ag37c0@m* ag37c1@s* ag37c2@ae*) ag37c3@r) (if (ag28ca@stx? ag37be@e) (and (not (ag2884@top-marked? ag37c0@m*)) (call-with-values (lambda () (join-wraps ag37c0@m* ag37c1@s* ag37c2@ae* ag37be@e)) (lambda (ag37d0@ag37cb ag37d1@ag37cd ag37d2@ag37cf) ((lambda (ag37d6@ae* ag37d7@s* ag37d8@m*) (ag37b9@match (ag28cc@stx-expr ag37be@e) ag37bf@p ag37d8@m* ag37d7@s* ag37d6@ae* ag37c3@r)) ag37d2@ag37cf ag37d1@ag37cd ag37d0@ag37cb)))) (if (ag244a@ag231e@annotation? ag37be@e) (ag37b9@match (ag244c@ag2322@annotation-expression ag37be@e) ag37bf@p ag37c0@m* ag37c1@s* ag37c2@ae* ag37c3@r) (ag37b7@match* ag37be@e ag37bf@p ag37c0@m* ag37c1@s* ag37c2@ae* ag37c3@r)))))))) (lambda (ag37ba@e ag37bb@p) (ag37b9@match ag37ba@e ag37bb@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! ag459a@ag2b03@syntax-dispatch ag2b03@syntax-dispatch)) (begin (set! ag2b05@ellipsis? (lambda (ag388e@x) (and (ag28fe@id? ag388e@x) (ag2904@free-id=? ag388e@x (ag2a8d@scheme-stx '...))))) (set! ag459b@ag2b05@ellipsis? ag2b05@ellipsis?)) (begin (set! ag2b07@underscore? (lambda (ag3890@x) (and (ag28fe@id? ag3890@x) (ag2904@free-id=? ag3890@x (ag2a8d@scheme-stx '_))))) (set! ag459c@ag2b07@underscore? ag2b07@underscore?)) (begin (set! ag2b09@verify-literals (lambda (ag3892@lits ag3893@expr) (for-each (lambda (ag3896@x) (if (or (not (ag28fe@id? ag3896@x)) (ag2b05@ellipsis? ag3896@x) (ag2b07@underscore? ag3896@x)) (ag2be3@syntax-violation '#f '"invalid literal" ag3893@expr ag3896@x) (void))) ag3892@lits))) (set! ag459d@ag2b09@verify-literals ag2b09@verify-literals)) (begin (set! ag2b0b@syntax-case-transformer ((lambda () ((lambda (ag3899@build-dispatch-call ag389b@invalid-ids-error ag389d@gen-clause ag389f@gen-syntax-case) (begin (set! ag3899@build-dispatch-call (lambda (ag390a@pvars ag390b@expr ag390c@y ag390d@r ag390e@mr) ((lambda (ag3914@ids ag3915@levels) ((lambda (ag3918@labels ag3919@new-vars) ((lambda (ag391c@body) (list '(primitive apply) (ag2862@ag279a@build-lambda '#f ag3919@new-vars ag391c@body) ag390c@y)) (ag2b25@chi-expr (ag28ea@add-subst (ag28be@make-full-rib ag3914@ids ag3918@labels) ag390b@expr) (append (map (lambda (ag391e@label ag391f@var ag3920@level) (cons ag391e@label (ag2918@make-binding 'syntax (cons ag391f@var ag3920@level)))) ag3918@labels ag3919@new-vars (map cdr ag390a@pvars)) ag390d@r) ag390e@mr))) (map ag288a@gen-label ag3914@ids) (map ag2886@gen-lexical ag3914@ids))) (map car ag390a@pvars) (map cdr ag390a@pvars)))) (set! ag389b@invalid-ids-error (lambda (ag38fe@id* ag38ff@e ag3900@class) ((letrec ((ag3904@find (lambda (ag3906@id* ag3907@ok*) (if (null? ag3906@id*) (ag2be3@syntax-violation '#f '"invalid syntax" ag38ff@e) (if (ag28fe@id? (car ag3906@id*)) (if (ag290a@bound-id-member? (car ag3906@id*) ag3907@ok*) (ag2bdf@syntax-error (car ag3906@id*) '"duplicate " ag3900@class) (ag3904@find (cdr ag3906@id*) (cons (car ag3906@id*) ag3907@ok*))) (ag2bdf@syntax-error (car ag3906@id*) '"invalid " ag3900@class)))))) ag3904@find) ag38fe@id* '()))) (set! ag389d@gen-clause (lambda (ag38d6@x ag38d7@keys ag38d8@clauses ag38d9@r ag38da@mr ag38db@pat ag38dc@fender ag38dd@expr) (call-with-values (lambda () (ag2b01@convert-pattern ag38db@pat ag38d7@keys)) (lambda (ag38ea@ag38e7 ag38eb@ag38e9) ((lambda (ag38ee@pvars ag38ef@p) (if (not (ag2908@distinct-bound-ids? (map car ag38ee@pvars))) (ag389b@invalid-ids-error (map car ag38ee@pvars) ag38db@pat '"pattern variable") (if (not (for-all (lambda (ag38f2@x) (not (ag2b05@ellipsis? (car ag38f2@x)))) ag38ee@pvars)) (ag2be3@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" ag38db@pat) ((lambda (ag38f4@y) ((lambda (ag38f6@test) ((lambda (ag38f8@conseq) ((lambda (ag38fa@altern) (list (ag2862@ag279a@build-lambda '#f (list ag38f4@y) (list 'if ag38f6@test ag38f8@conseq ag38fa@altern)) (list '(primitive syntax-dispatch) ag38d6@x (list 'quote ag38ef@p)))) (ag389f@gen-syntax-case ag38d6@x ag38d7@keys ag38d8@clauses ag38d9@r ag38da@mr))) (ag3899@build-dispatch-call ag38ee@pvars ag38dd@expr ag38f4@y ag38d9@r ag38da@mr))) (if (eq? ag38dc@fender '#t) ag38f4@y ((lambda (ag38fc@call) (list 'if ag38f4@y ag38fc@call (list 'quote '#f))) (ag3899@build-dispatch-call ag38ee@pvars ag38dc@fender ag38f4@y ag38d9@r ag38da@mr))))) (ag2886@gen-lexical 'tmp))))) ag38eb@ag38e9 ag38ea@ag38e7))))) (set! ag389f@gen-syntax-case (lambda (ag38b4@x ag38b5@keys ag38b6@clauses ag38b7@r ag38b8@mr) (if (null? ag38b6@clauses) (list '(primitive syntax-error) ag38b4@x) ((lambda (ag38be@t) ((lambda (ag38c0@ls/false) (if ag38c0@ls/false (apply (lambda (ag38c2@pat ag38c3@expr) (if (and (ag28fe@id? ag38c2@pat) (not (ag290a@bound-id-member? ag38c2@pat ag38b5@keys)) (not (ag2b05@ellipsis? ag38c2@pat))) (if (ag2904@free-id=? ag38c2@pat (ag2a8d@scheme-stx '_)) (ag2b25@chi-expr ag38c3@expr ag38b7@r ag38b8@mr) ((lambda (ag38c6@lab ag38c7@lex) ((lambda (ag38ca@body) (list (ag2862@ag279a@build-lambda '#f (list ag38c7@lex) ag38ca@body) ag38b4@x)) (ag2b25@chi-expr (ag28ea@add-subst (ag28be@make-full-rib (list ag38c2@pat) (list ag38c6@lab)) ag38c3@expr) (cons (cons ag38c6@lab (ag2918@make-binding 'syntax (cons ag38c7@lex '0))) ag38b7@r) ag38b8@mr))) (ag288a@gen-label ag38c2@pat) (ag2886@gen-lexical ag38c2@pat))) (ag389d@gen-clause ag38b4@x ag38b5@keys (cdr ag38b6@clauses) ag38b7@r ag38b8@mr ag38c2@pat '#t ag38c3@expr))) ag38c0@ls/false) ((lambda (ag38cc@t) ((lambda (ag38ce@ls/false) (if ag38ce@ls/false (apply (lambda (ag38d0@pat ag38d1@fender ag38d2@expr) (ag389d@gen-clause ag38b4@x ag38b5@keys (cdr ag38b6@clauses) ag38b7@r ag38b8@mr ag38d0@pat ag38d1@fender ag38d2@expr)) ag38ce@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag38cc@t))) (ag2b03@syntax-dispatch ag38cc@t '(any any any)))) ag38be@t))) (ag2b03@syntax-dispatch ag38be@t '(any any)))) (car ag38b6@clauses))))) (lambda (ag38a0@e ag38a1@r ag38a2@mr) ((lambda (ag38a6@t) ((lambda (ag38a8@ls/false) (if ag38a8@ls/false (apply (lambda (ag38aa@expr ag38ab@keys ag38ac@clauses) (begin (ag2b09@verify-literals ag38ab@keys ag38a0@e) ((lambda (ag38b0@x) ((lambda (ag38b2@body) (list (ag2862@ag279a@build-lambda '#f (list ag38b0@x) ag38b2@body) (ag2b25@chi-expr ag38aa@expr ag38a1@r ag38a2@mr))) (ag389f@gen-syntax-case ag38b0@x ag38ab@keys ag38ac@clauses ag38a1@r ag38a2@mr))) (ag2886@gen-lexical 'tmp)))) ag38a8@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag38a6@t))) (ag2b03@syntax-dispatch ag38a6@t '(_ any each-any . each-any)))) ag38a0@e)))) '#f '#f '#f '#f)))) (set! ag459e@ag2b0b@syntax-case-transformer ag2b0b@syntax-case-transformer)) (begin (set! ag2b0d@ellipsis-map (lambda (ag3924@proc ag3925@ls . ag3928@ls*) ((lambda (ag392b@who) (begin (set! ag392b@who '...) (begin (if (not (list? ag3925@ls)) (assertion-violation ag392b@who '"not a list" ag3925@ls) (void)) (if (not (null? ag3928@ls*)) ((lambda (ag392c@n) (for-each (lambda (ag392e@x) (begin (if (not (list? ag392e@x)) (assertion-violation ag392b@who '"not a list" ag392e@x) (void)) (if (not (= (length ag392e@x) ag392c@n)) (assertion-violation ag392b@who '"length mismatch" ag3925@ls ag392e@x) (void)))) ag3928@ls*)) (length ag3925@ls)) (void)) (apply map ag3924@proc ag3925@ls ag3928@ls*)))) '#f))) (set! ag459f@ag2b0d@ellipsis-map ag2b0d@ellipsis-map)) (begin (set! ag2b0f@syntax-transformer ((lambda () ((lambda (ag3931@gen-syntax ag3933@gen-ref ag3935@gen-append ag3937@gen-mappend ag3939@gen-map ag393b@gen-cons ag393d@gen-vector ag393f@regen) (begin (set! ag3931@gen-syntax (lambda (ag39a8@src ag39a9@e ag39aa@r ag39ab@maps ag39ac@ellipsis? ag39ad@vec?) ((lambda (ag39b4@t) ((lambda (ag39b6@ls/false) (if (and ag39b6@ls/false (apply (lambda (ag39b8@dots) (ag39ac@ellipsis? ag39b8@dots)) ag39b6@ls/false)) (apply (lambda (ag39ba@dots) (ag2be3@syntax-violation '#f '"misplaced ellipsis in syntax form" ag39a8@src)) ag39b6@ls/false) ((lambda (ag39bc@t) ((lambda (ag39be@ls/false) (if (and ag39be@ls/false (apply (lambda (ag39c0@id) (ag28fe@id? ag39c0@id)) ag39be@ls/false)) (apply (lambda (ag39c2@id) ((lambda (ag39c4@label) ((lambda (ag39c6@b) ((lambda () (if (eq? (ag291a@binding-type ag39c6@b) 'syntax) (call-with-values (lambda () ((lambda (ag39cc@var.lev) (ag3933@gen-ref ag39a8@src (car ag39cc@var.lev) (cdr ag39cc@var.lev) ag39ab@maps)) (ag291c@binding-value ag39c6@b))) (lambda (ag39ce@ag39c9 ag39cf@ag39cb) ((lambda (ag39d2@maps ag39d3@var) (values (list 'ref ag39d3@var) ag39d2@maps)) ag39cf@ag39cb ag39ce@ag39c9))) (values (list 'quote ag39a9@e) ag39ab@maps))))) (ag2916@label->binding ag39c4@label ag39aa@r))) (ag2914@id->label ag39a9@e))) ag39be@ls/false) ((lambda (ag39d6@t) ((lambda (ag39d8@ls/false) (if (and ag39d8@ls/false (apply (lambda (ag39da@dots ag39db@e) (ag39ac@ellipsis? ag39da@dots)) ag39d8@ls/false)) (apply (lambda (ag39de@dots ag39df@e) (if ag39ad@vec? (ag2be3@syntax-violation '#f '"misplaced ellipsis in syntax form" ag39a8@src) (ag3931@gen-syntax ag39a8@src ag39df@e ag39aa@r ag39ab@maps (lambda (ag39e2@x) '#f) '#f))) ag39d8@ls/false) ((lambda (ag39e4@t) ((lambda (ag39e6@ls/false) (if (and ag39e6@ls/false (apply (lambda (ag39e8@x ag39e9@dots ag39ea@y) (ag39ac@ellipsis? ag39e9@dots)) ag39e6@ls/false)) (apply (lambda (ag39ee@x ag39ef@dots ag39f0@y) ((letrec ((ag39f4@f (lambda (ag39f6@y ag39f7@k) ((lambda (ag39fa@t) ((lambda (ag39fc@ls/false) (if ag39fc@ls/false (apply (lambda () (ag39f7@k ag39ab@maps)) ag39fc@ls/false) ((lambda (ag39fe@t) ((lambda (ag3a00@ls/false) (if (and ag3a00@ls/false (apply (lambda (ag3a02@dots ag3a03@y) (ag39ac@ellipsis? ag3a02@dots)) ag3a00@ls/false)) (apply (lambda (ag3a06@dots ag3a07@y) (ag39f4@f ag3a07@y (lambda (ag3a0a@maps) (call-with-values (lambda () (ag39f7@k (cons '() ag3a0a@maps))) (lambda (ag3a10@ag3a0d ag3a11@ag3a0f) ((lambda (ag3a14@maps ag3a15@x) (if (null? (car ag3a14@maps)) (ag2be3@syntax-violation '#f '"extra ellipsis in syntax form" ag39a8@src) (values (ag3937@gen-mappend ag3a15@x (car ag3a14@maps)) (cdr ag3a14@maps)))) ag3a11@ag3a0f ag3a10@ag3a0d)))))) ag3a00@ls/false) ((lambda (ag3a18@t) ((lambda (ag3a1a@ls/false) (if ag3a1a@ls/false (apply (lambda () (call-with-values (lambda () (ag3931@gen-syntax ag39a8@src ag39f6@y ag39aa@r ag39ab@maps ag39ac@ellipsis? ag39ad@vec?)) (lambda (ag3a20@ag3a1d ag3a21@ag3a1f) ((lambda (ag3a24@maps ag3a25@y) (call-with-values (lambda () (ag39f7@k ag3a24@maps)) (lambda (ag3a2c@ag3a29 ag3a2d@ag3a2b) ((lambda (ag3a30@maps ag3a31@x) (values (ag3935@gen-append ag3a31@x ag3a25@y) ag3a30@maps)) ag3a2d@ag3a2b ag3a2c@ag3a29)))) ag3a21@ag3a1f ag3a20@ag3a1d)))) ag3a1a@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3a18@t))) (ag2b03@syntax-dispatch ag3a18@t '_))) ag39fe@t))) (ag2b03@syntax-dispatch ag39fe@t '(any . any)))) ag39fa@t))) (ag2b03@syntax-dispatch ag39fa@t '()))) ag39f6@y)))) ag39f4@f) ag39f0@y (lambda (ag3a34@maps) (call-with-values (lambda () (ag3931@gen-syntax ag39a8@src ag39ee@x ag39aa@r (cons '() ag3a34@maps) ag39ac@ellipsis? '#f)) (lambda (ag3a3a@ag3a37 ag3a3b@ag3a39) ((lambda (ag3a3e@maps ag3a3f@x) (if (null? (car ag3a3e@maps)) (ag2be3@syntax-violation '#f '"extra ellipsis in syntax form" ag39a8@src) (values (ag3939@gen-map ag3a3f@x (car ag3a3e@maps)) (cdr ag3a3e@maps)))) ag3a3b@ag3a39 ag3a3a@ag3a37)))))) ag39e6@ls/false) ((lambda (ag3a42@t) ((lambda (ag3a44@ls/false) (if ag3a44@ls/false (apply (lambda (ag3a46@x ag3a47@y) (call-with-values (lambda () (ag3931@gen-syntax ag39a8@src ag3a46@x ag39aa@r ag39ab@maps ag39ac@ellipsis? '#f)) (lambda (ag3a4e@ag3a4b ag3a4f@ag3a4d) ((lambda (ag3a52@maps ag3a53@xnew) (call-with-values (lambda () (ag3931@gen-syntax ag39a8@src ag3a47@y ag39aa@r ag3a52@maps ag39ac@ellipsis? ag39ad@vec?)) (lambda (ag3a5a@ag3a57 ag3a5b@ag3a59) ((lambda (ag3a5e@maps ag3a5f@ynew) (values (ag393b@gen-cons ag39a9@e ag3a46@x ag3a47@y ag3a53@xnew ag3a5f@ynew) ag3a5e@maps)) ag3a5b@ag3a59 ag3a5a@ag3a57)))) ag3a4f@ag3a4d ag3a4e@ag3a4b)))) ag3a44@ls/false) ((lambda (ag3a62@t) ((lambda (ag3a64@ls/false) (if ag3a64@ls/false (apply (lambda (ag3a66@ls) (call-with-values (lambda () (ag3931@gen-syntax ag39a8@src ag3a66@ls ag39aa@r ag39ab@maps ag39ac@ellipsis? '#t)) (lambda (ag3a6c@ag3a69 ag3a6d@ag3a6b) ((lambda (ag3a70@maps ag3a71@lsnew) (values (ag393d@gen-vector ag39a9@e ag3a66@ls ag3a71@lsnew) ag3a70@maps)) ag3a6d@ag3a6b ag3a6c@ag3a69)))) ag3a64@ls/false) ((lambda (ag3a74@t) ((lambda (ag3a76@ls/false) (if ag3a76@ls/false (apply (lambda () (values (list 'quote ag39a9@e) ag39ab@maps)) ag3a76@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3a74@t))) (ag2b03@syntax-dispatch ag3a74@t '_))) ag3a62@t))) (ag2b03@syntax-dispatch ag3a62@t '#(vector each-any)))) ag3a42@t))) (ag2b03@syntax-dispatch ag3a42@t '(any . any)))) ag39e4@t))) (ag2b03@syntax-dispatch ag39e4@t '(any any . any)))) ag39d6@t))) (ag2b03@syntax-dispatch ag39d6@t '(any any)))) ag39bc@t))) (ag2b03@syntax-dispatch ag39bc@t 'any))) ag39b4@t))) (ag2b03@syntax-dispatch ag39b4@t 'any))) ag39a9@e))) (set! ag3933@gen-ref (lambda (ag398e@src ag398f@var ag3990@level ag3991@maps) (if (= ag3990@level '0) (values ag398f@var ag3991@maps) (if (null? ag3991@maps) (ag2be3@syntax-violation '#f '"missing ellipsis in syntax form" ag398e@src) (call-with-values (lambda () (ag3933@gen-ref ag398e@src ag398f@var (- ag3990@level '1) (cdr ag3991@maps))) (lambda (ag399a@ag3997 ag399b@ag3999) ((lambda (ag399e@outer-maps ag399f@outer-var) ((lambda (ag39a2@t) (if ag39a2@t ((lambda (ag39a4@b) (values (cdr ag39a4@b) ag3991@maps)) ag39a2@t) ((lambda (ag39a6@inner-var) (values ag39a6@inner-var (cons (cons (cons ag399f@outer-var ag39a6@inner-var) (car ag3991@maps)) ag399e@outer-maps))) (ag2886@gen-lexical 'tmp)))) (assq ag399f@outer-var (car ag3991@maps)))) ag399b@ag3999 ag399a@ag3997))))))) (set! ag3935@gen-append (lambda (ag398a@x ag398b@y) (if (fast-equal? ag398b@y ''()) ag398a@x (list 'append ag398a@x ag398b@y)))) (set! ag3937@gen-mappend (lambda (ag3986@e ag3987@map-env) (list 'apply '(primitive append) (ag3939@gen-map ag3986@e ag3987@map-env)))) (set! ag3939@gen-map (lambda (ag3974@e ag3975@map-env) ((lambda (ag3978@formals ag3979@actuals) (if (eq? (car ag3974@e) 'ref) (car ag3979@actuals) (if (for-all (lambda (ag397c@x) (and (eq? (car ag397c@x) 'ref) (memq (cadr ag397c@x) ag3978@formals))) (cdr ag3974@e)) ((lambda (ag397e@args) (cons 'map (cons (list 'primitive (car ag3974@e)) ag397e@args))) (map ((lambda (ag3980@r) (lambda (ag3982@x) (cdr (assq (cadr ag3982@x) ag3980@r)))) (map cons ag3978@formals ag3979@actuals)) (cdr ag3974@e))) (cons* 'map (list 'lambda ag3978@formals ag3974@e) ag3979@actuals)))) (map cdr ag3975@map-env) (map (lambda (ag3984@x) (list 'ref (car ag3984@x))) ag3975@map-env)))) (set! ag393b@gen-cons (lambda (ag3964@e ag3965@x ag3966@y ag3967@xnew ag3968@ynew) ((lambda (ag396e@t) (if (memv ag396e@t '(quote)) (if (eq? (car ag3967@xnew) 'quote) ((lambda (ag3970@xnew ag3971@ynew) (if (and (eq? ag3970@xnew ag3965@x) (eq? ag3971@ynew ag3966@y)) (list 'quote ag3964@e) (list 'quote (cons ag3970@xnew ag3971@ynew)))) (cadr ag3967@xnew) (cadr ag3968@ynew)) (if (null? (cadr ag3968@ynew)) (list 'list ag3967@xnew) (list 'cons ag3967@xnew ag3968@ynew))) (if (memv ag396e@t '(list)) (cons 'list (cons ag3967@xnew (cdr ag3968@ynew))) (list 'cons ag3967@xnew ag3968@ynew)))) (car ag3968@ynew)))) (set! ag393d@gen-vector (lambda (ag395e@e ag395f@ls ag3960@lsnew) (if (eq? (car ag3960@lsnew) 'quote) (if (eq? (cadr ag3960@lsnew) ag395f@ls) (list 'quote ag395e@e) (list 'quote (list->vector (cadr ag3960@lsnew)))) (if (eq? (car ag3960@lsnew) 'list) (cons 'vector (cdr ag3960@lsnew)) (list 'list->vector ag3960@lsnew))))) (set! ag393f@regen (lambda (ag3958@x) ((lambda (ag395a@t) (if (memv ag395a@t '(ref)) (cadr ag3958@x) (if (memv ag395a@t '(primitive)) (list 'primitive (cadr ag3958@x)) (if (memv ag395a@t '(quote)) (list 'quote (cadr ag3958@x)) (if (memv ag395a@t '(lambda)) (ag2862@ag279a@build-lambda '#f (cadr ag3958@x) (ag393f@regen (caddr ag3958@x))) (if (memv ag395a@t '(map)) ((lambda (ag395c@ls) (cons '(primitive ellipsis-map) ag395c@ls)) (map ag393f@regen (cdr ag3958@x))) (cons (list 'primitive (car ag3958@x)) (map ag393f@regen (cdr ag3958@x))))))))) (car ag3958@x)))) (lambda (ag3940@e ag3941@r ag3942@mr) ((lambda (ag3946@t) ((lambda (ag3948@ls/false) (if ag3948@ls/false (apply (lambda (ag394a@x) (call-with-values (lambda () (ag3931@gen-syntax ag3940@e ag394a@x ag3941@r '() ag2b05@ellipsis? '#f)) (lambda (ag3950@ag394d ag3951@ag394f) ((lambda (ag3954@maps ag3955@e) (ag393f@regen ag3955@e)) ag3951@ag394f ag3950@ag394d)))) ag3948@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3946@t))) (ag2b03@syntax-dispatch ag3946@t '(_ any)))) ag3940@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! ag45a0@ag2b0f@syntax-transformer ag2b0f@syntax-transformer)) (begin (set! ag2b11@core-macro-transformer (lambda (ag3a78@name) ((lambda (ag3a7a@t) (if (memv ag3a7a@t '(quote)) ag2ab3@quote-transformer (if (memv ag3a7a@t '(lambda)) ag2ab7@lambda-transformer (if (memv ag3a7a@t '(case-lambda)) ag2ab5@case-lambda-transformer (if (memv ag3a7a@t '(letrec)) ag2a9b@letrec-transformer (if (memv ag3a7a@t '(letrec*)) ag2a9d@letrec*-transformer (if (memv ag3a7a@t '(if)) ag2aab@if-transformer (if (memv ag3a7a@t '(and)) ag2aad@and-transformer (if (memv ag3a7a@t '(or)) ag2aaf@or-transformer (if (memv ag3a7a@t '(foreign-call)) ag2aff@foreign-call-transformer (if (memv ag3a7a@t '(syntax-case)) ag2b0b@syntax-case-transformer (if (memv ag3a7a@t '(syntax)) ag2b0f@syntax-transformer (if (memv ag3a7a@t '(type-descriptor)) ag2aa1@type-descriptor-transformer (if (memv ag3a7a@t '(record-type-descriptor)) ag2aa3@record-type-descriptor-transformer (if (memv ag3a7a@t '(record-constructor-descriptor)) ag2aa5@record-constructor-descriptor-transformer (if (memv ag3a7a@t '(fluid-let-syntax)) ag2a9f@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" ag3a78@name))))))))))))))))) ag3a78@name))) (set! ag45a1@ag2b11@core-macro-transformer ag2b11@core-macro-transformer)) (begin (set! ag2b13@symbol-macro (lambda (ag3a7c@x ag3a7d@set) ((lambda (ag3a80@t) ((lambda (ag3a82@ls/false) (if (and ag3a82@ls/false (apply (lambda (ag3a84@name) (and (ag28fe@id? ag3a84@name) (memq (ag2900@id->sym ag3a84@name) ag3a7d@set))) ag3a82@ls/false)) (apply (lambda (ag3a86@name) (ag2ab9@bless (list 'quote ag3a86@name))) ag3a82@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3a80@t))) (ag2b03@syntax-dispatch ag3a80@t '(_ any)))) ag3a7c@x))) (set! ag45a2@ag2b13@symbol-macro ag2b13@symbol-macro)) (begin (set! ag2b15@macro-transformer (lambda (ag3a88@x) (if (procedure? ag3a88@x) ag3a88@x (if (symbol? ag3a88@x) ((lambda (ag3a8a@t) (if (memv ag3a8a@t '(define-record-type)) ag2af7@define-record-type-macro (if (memv ag3a8a@t '(define-struct)) ag2af5@define-struct-macro (if (memv ag3a8a@t '(include)) ag2aeb@include-macro (if (memv ag3a8a@t '(cond)) ag2ae7@cond-macro (if (memv ag3a8a@t '(let)) ag2abf@let-macro (if (memv ag3a8a@t '(do)) ag2adf@do-macro (if (memv ag3a8a@t '(or)) ag2ae3@or-macro (if (memv ag3a8a@t '(and)) ag2ae5@and-macro (if (memv ag3a8a@t '(let*)) ag2ae1@let*-macro (if (memv ag3a8a@t '(let-values)) ag2ac1@let-values-macro (if (memv ag3a8a@t '(let*-values)) ag2ac3@let*-values-macro (if (memv ag3a8a@t '(syntax-rules)) ag2aef@syntax-rules-macro (if (memv ag3a8a@t '(quasiquote)) ag2af1@quasiquote-macro (if (memv ag3a8a@t '(quasisyntax)) ag2af3@quasisyntax-macro (if (memv ag3a8a@t '(with-syntax)) ag2abb@with-syntax-macro (if (memv ag3a8a@t '(when)) ag2aa7@when-macro (if (memv ag3a8a@t '(unless)) ag2aa9@unless-macro (if (memv ag3a8a@t '(case)) ag2ab1@case-macro (if (memv ag3a8a@t '(identifier-syntax)) ag2add@identifier-syntax-macro (if (memv ag3a8a@t '(time)) ag2ad5@time-macro (if (memv ag3a8a@t '(delay)) ag2ad7@delay-macro (if (memv ag3a8a@t '(assert)) ag2ad9@assert-macro (if (memv ag3a8a@t '(endianness)) ag2adb@endianness-macro (if (memv ag3a8a@t '(guard)) ag2ad1@guard-macro (if (memv ag3a8a@t '(define-enumeration)) ag2ad3@define-enumeration-macro (if (memv ag3a8a@t '(trace-lambda)) ag2ac5@trace-lambda-macro (if (memv ag3a8a@t '(trace-define)) ag2ac7@trace-define-macro (if (memv ag3a8a@t '(trace-define-syntax)) ag2ac9@trace-define-syntax-macro (if (memv ag3a8a@t '(trace-let-syntax)) ag2acd@trace-let-syntax-macro (if (memv ag3a8a@t '(trace-letrec-syntax)) ag2acf@trace-letrec-syntax-macro (if (memv ag3a8a@t '(define-condition-type)) ag2af9@define-condition-type-macro (if (memv ag3a8a@t '(parameterize)) ag2afd@parameterize-macro (if (memv ag3a8a@t '(include-into)) ag2aed@include-into-macro (if (memv ag3a8a@t '(eol-style)) (lambda (ag3a8c@x) (ag2b13@symbol-macro ag3a8c@x '(none lf cr crlf nel crnel ls))) (if (memv ag3a8a@t '(error-handling-mode)) (lambda (ag3a8e@x) (ag2b13@symbol-macro ag3a8e@x '(ignore raise replace))) (if (memv ag3a8a@t '(buffer-mode)) (lambda (ag3a90@x) (ag2b13@symbol-macro ag3a90@x '(none line block))) (if (memv ag3a8a@t '(file-options)) ag2879@file-options-macro (if (memv ag3a8a@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) ag2afb@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" ag3a88@x)))))))))))))))))))))))))))))))))))))))) ag3a88@x) (error 'core-macro-transformer '"BUG: invalid macro" ag3a88@x))))) (set! ag45a3@ag2b15@macro-transformer ag2b15@macro-transformer)) (begin (set! ag2b17@local-macro-transformer (lambda (ag3a92@x) (car ag3a92@x))) (set! ag45a4@ag2b17@local-macro-transformer ag2b17@local-macro-transformer)) (begin (set! ag2b19@do-macro-call (lambda (ag3a94@transformer ag3a95@expr) ((lambda (ag3a98@out) (begin ((letrec ((ag3a9a@f (lambda (ag3a9c@x) (if (not (ag28ca@stx? ag3a9c@x)) (if (pair? ag3a9c@x) (begin (ag3a9a@f (car ag3a9c@x)) (ag3a9a@f (cdr ag3a9c@x))) (if (vector? ag3a9c@x) (vector-for-each ag3a9a@f ag3a9c@x) (if (symbol? ag3a9c@x) (ag2be3@syntax-violation '#f '"raw symbol encountered in output of macro" ag3a95@expr ag3a9c@x) (void)))) (void))))) ag3a9a@f) ag3a98@out) (ag28e8@add-mark (ag28e0@gen-mark) ag3a98@out ag3a95@expr))) (ag3a94@transformer (ag28e8@add-mark ag28e2@anti-mark ag3a95@expr '#f))))) (set! ag45a5@ag2b19@do-macro-call ag2b19@do-macro-call)) (begin (set! ag2b1b@chi-macro (lambda (ag3a9e@p ag3a9f@e) (ag2b19@do-macro-call (ag2b15@macro-transformer ag3a9e@p) ag3a9f@e))) (set! ag45a6@ag2b1b@chi-macro ag2b1b@chi-macro)) (begin (set! ag2b1d@chi-local-macro (lambda (ag3aa2@p ag3aa3@e) (ag2b19@do-macro-call (ag2b17@local-macro-transformer ag3aa2@p) ag3aa3@e))) (set! ag45a7@ag2b1d@chi-local-macro ag2b1d@chi-local-macro)) (begin (set! ag2b1f@chi-global-macro (lambda (ag3aa6@p ag3aa7@e) ((lambda (ag3aaa@lib ag3aab@loc) (begin (ag2722@ag2571@visit-library ag3aaa@lib) ((lambda (ag3aae@x) ((lambda (ag3ab0@transformer) (ag2b19@do-macro-call ag3ab0@transformer ag3aa7@e)) (if (procedure? ag3aae@x) ag3aae@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" ag3aae@x)))) (symbol-value ag3aab@loc)))) (car ag3aa6@p) (cdr ag3aa6@p)))) (set! ag45a8@ag2b1f@chi-global-macro ag2b1f@chi-global-macro)) (begin (set! ag2b21@chi-expr* (lambda (ag3ab2@e* ag3ab3@r ag3ab4@mr) (if (null? ag3ab2@e*) '() ((lambda (ag3ab8@e) (cons ag3ab8@e (ag2b21@chi-expr* (cdr ag3ab2@e*) ag3ab3@r ag3ab4@mr))) (ag2b25@chi-expr (car ag3ab2@e*) ag3ab3@r ag3ab4@mr))))) (set! ag45a9@ag2b21@chi-expr* ag2b21@chi-expr*)) (begin (set! ag2b23@chi-application (lambda (ag3aba@e ag3abb@r ag3abc@mr) ((lambda (ag3ac0@t) ((lambda (ag3ac2@ls/false) (if ag3ac2@ls/false (apply (lambda (ag3ac4@rator ag3ac5@rands) ((lambda (ag3ac8@rator) (cons ag3ac8@rator (ag2b21@chi-expr* ag3ac5@rands ag3abb@r ag3abc@mr))) (ag2b25@chi-expr ag3ac4@rator ag3abb@r ag3abc@mr))) ag3ac2@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3ac0@t))) (ag2b03@syntax-dispatch ag3ac0@t '(any . each-any)))) ag3aba@e))) (set! ag45aa@ag2b23@chi-application ag2b23@chi-application)) (begin (set! ag2b25@chi-expr (lambda (ag3aca@e ag3acb@r ag3acc@mr) (call-with-values (lambda () (ag2920@syntax-type ag3aca@e ag3acb@r)) (lambda (ag3ad6@ag3ad1 ag3ad7@ag3ad3 ag3ad8@ag3ad5) ((lambda (ag3adc@kwd ag3add@value ag3ade@type) ((lambda (ag3ae2@t) (if (memv ag3ae2@t '(core-macro)) ((lambda (ag3ae4@transformer) (ag3ae4@transformer ag3aca@e ag3acb@r ag3acc@mr)) (ag2b11@core-macro-transformer ag3add@value)) (if (memv ag3ae2@t '(global)) ((lambda (ag3ae6@lib) ((lambda (ag3ae8@loc) ((lambda () (begin ((ag2b6b@inv-collector) ag3ae6@lib) ag3ae8@loc)))) (cdr ag3add@value))) (car ag3add@value)) (if (memv ag3ae2@t '(core-prim)) ((lambda (ag3aea@name) (list 'primitive ag3aea@name)) ag3add@value) (if (memv ag3ae2@t '(call)) (ag2b23@chi-application ag3aca@e ag3acb@r ag3acc@mr) (if (memv ag3ae2@t '(lexical)) ((lambda (ag3aec@lex) ag3aec@lex) (ag2a8f@lexical-var ag3add@value)) (if (memv ag3ae2@t '(global-macro global-macro!)) (ag2b25@chi-expr (ag2b1f@chi-global-macro ag3add@value ag3aca@e) ag3acb@r ag3acc@mr) (if (memv ag3ae2@t '(local-macro local-macro!)) (ag2b25@chi-expr (ag2b1d@chi-local-macro ag3add@value ag3aca@e) ag3acb@r ag3acc@mr) (if (memv ag3ae2@t '(macro macro!)) (ag2b25@chi-expr (ag2b1b@chi-macro ag3add@value ag3aca@e) ag3acb@r ag3acc@mr) (if (memv ag3ae2@t '(constant)) ((lambda (ag3aee@datum) (list 'quote ag3aee@datum)) ag3add@value) (if (memv ag3ae2@t '(set!)) (ag2b27@chi-set! ag3aca@e ag3acb@r ag3acc@mr) (if (memv ag3ae2@t '(begin)) ((lambda (ag3af0@t) ((lambda (ag3af2@ls/false) (if ag3af2@ls/false (apply (lambda (ag3af4@x ag3af5@x*) (ag2865@ag27cc@build-sequence '#f (ag2b21@chi-expr* (cons ag3af4@x ag3af5@x*) ag3acb@r ag3acc@mr))) ag3af2@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3af0@t))) (ag2b03@syntax-dispatch ag3af0@t '(_ any . each-any)))) ag3aca@e) (if (memv ag3ae2@t '(let-syntax letrec-syntax)) ((lambda (ag3af8@t) ((lambda (ag3afa@ls/false) (if (and ag3afa@ls/false (apply (lambda (ag3afc@xlhs* ag3afd@xrhs* ag3afe@xbody ag3aff@xbody*) (if (not (ag2906@valid-bound-ids? ag3afc@xlhs*)) (ag2be3@syntax-violation '#f '"invalid identifiers" ag3aca@e) (void))) ag3afa@ls/false)) (apply (lambda (ag3b04@xlhs* ag3b05@xrhs* ag3b06@xbody ag3b07@xbody*) ((lambda (ag3b0c@xlab*) ((lambda (ag3b0e@xrib) ((lambda (ag3b10@xb*) ((lambda () (ag2865@ag27cc@build-sequence '#f (ag2b21@chi-expr* (map (lambda (ag3b12@x) (ag28ea@add-subst ag3b0e@xrib ag3b12@x)) (cons ag3b06@xbody ag3b07@xbody*)) (append (map cons ag3b0c@xlab* ag3b10@xb*) ag3acb@r) (append (map cons ag3b0c@xlab* ag3b10@xb*) ag3acc@mr)))))) (map (lambda (ag3b14@x) (ag2936@make-eval-transformer (ag2b5d@expand-transformer (if (eq? ag3ade@type 'let-syntax) ag3b14@x (ag28ea@add-subst ag3b0e@xrib ag3b14@x)) ag3acc@mr))) ag3b05@xrhs*))) (ag28be@make-full-rib ag3b04@xlhs* ag3b0c@xlab*))) (map ag288a@gen-label ag3b04@xlhs*))) ag3afa@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3af8@t))) (ag2b03@syntax-dispatch ag3af8@t '(_ #(each (any any)) any . each-any)))) ag3aca@e) (if (memv ag3ae2@t '(displaced-lexical)) (ag2be3@syntax-violation '#f '"identifier out of context" ag3aca@e) (if (memv ag3ae2@t '(syntax)) (ag2be3@syntax-violation '#f '"reference to pattern variable outside a syntax form" ag3aca@e) (if (memv ag3ae2@t '(define define-syntax module import library)) (ag2be3@syntax-violation '#f (string-append ((lambda (ag3b16@t) (if (memv ag3b16@t '(define)) '"a definition" (if (memv ag3b16@t '(define-syntax)) '"a define-syntax" (if (memv ag3b16@t '(module)) '"a module definition" (if (memv ag3b16@t '(library)) '"a library definition" (if (memv ag3b16@t '(import)) '"an import declaration" (if (memv ag3b16@t '(export)) '"an export declaration" '"a non-expression"))))))) ag3ade@type) '" was found where an expression was expected") ag3aca@e) (if (memv ag3ae2@t '(mutable)) (ag2be3@syntax-violation '#f '"attempt to reference an unexportable variable" ag3aca@e) (ag2be3@syntax-violation '#f '"invalid expression" ag3aca@e)))))))))))))))))) ag3ade@type)) ag3ad8@ag3ad5 ag3ad7@ag3ad3 ag3ad6@ag3ad1))))) (set! ag45ab@ag2b25@chi-expr ag2b25@chi-expr)) (begin (set! ag2b27@chi-set! (lambda (ag3b18@e ag3b19@r ag3b1a@mr) ((lambda (ag3b1e@t) ((lambda (ag3b20@ls/false) (if (and ag3b20@ls/false (apply (lambda (ag3b22@x ag3b23@v) (ag28fe@id? ag3b22@x)) ag3b20@ls/false)) (apply (lambda (ag3b26@x ag3b27@v) (call-with-values (lambda () (ag2920@syntax-type ag3b26@x ag3b19@r)) (lambda (ag3b30@ag3b2b ag3b31@ag3b2d ag3b32@ag3b2f) ((lambda (ag3b36@kwd ag3b37@value ag3b38@type) ((lambda (ag3b3c@t) (if (memv ag3b3c@t '(lexical)) (begin (ag2a93@set-lexical-mutable! ag3b37@value '#t) (list 'set! (ag2a8f@lexical-var ag3b37@value) (ag2b25@chi-expr ag3b27@v ag3b19@r ag3b1a@mr))) (if (memv ag3b3c@t '(core-prim)) (ag2be3@syntax-violation '#f '"cannot modify imported core primitive" ag3b18@e) (if (memv ag3b3c@t '(global)) (ag2be3@syntax-violation '#f '"attempt to modify imported binding" ag3b18@e) (if (memv ag3b3c@t '(global-macro!)) (ag2b25@chi-expr (ag2b1f@chi-global-macro ag3b37@value ag3b18@e) ag3b19@r ag3b1a@mr) (if (memv ag3b3c@t '(local-macro!)) (ag2b25@chi-expr (ag2b1d@chi-local-macro ag3b37@value ag3b18@e) ag3b19@r ag3b1a@mr) (if (memv ag3b3c@t '(mutable)) (ag2be3@syntax-violation '#f '"attempt to assign to an unexportable variable" ag3b18@e) (ag2be3@syntax-violation '#f '"invalid syntax" ag3b18@e)))))))) ag3b38@type)) ag3b32@ag3b2f ag3b31@ag3b2d ag3b30@ag3b2b)))) ag3b20@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3b1e@t))) (ag2b03@syntax-dispatch ag3b1e@t '(_ any any)))) ag3b18@e))) (set! ag45ac@ag2b27@chi-set! ag2b27@chi-set!)) (begin (set! ag2b29@verify-formals (lambda (ag3b3e@fmls ag3b3f@stx) ((lambda (ag3b42@t) ((lambda (ag3b44@ls/false) (if ag3b44@ls/false (apply (lambda (ag3b46@x*) (if (not (ag2906@valid-bound-ids? ag3b46@x*)) (ag2abd@invalid-fmls-error ag3b3f@stx ag3b3e@fmls) (void))) ag3b44@ls/false) ((lambda (ag3b48@t) ((lambda (ag3b4a@ls/false) (if ag3b4a@ls/false (apply (lambda (ag3b4c@x* ag3b4d@x) (if (not (ag2906@valid-bound-ids? (cons ag3b4d@x ag3b4c@x*))) (ag2abd@invalid-fmls-error ag3b3f@stx ag3b3e@fmls) (void))) ag3b4a@ls/false) ((lambda (ag3b50@t) ((lambda (ag3b52@ls/false) (if ag3b52@ls/false (apply (lambda () (ag2be3@syntax-violation '#f '"invalid syntax" ag3b3f@stx)) ag3b52@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3b50@t))) (ag2b03@syntax-dispatch ag3b50@t '_))) ag3b48@t))) (ag2b03@syntax-dispatch ag3b48@t '#(each+ any () any)))) ag3b42@t))) (ag2b03@syntax-dispatch ag3b42@t 'each-any))) ag3b3e@fmls))) (set! ag45ad@ag2b29@verify-formals ag2b29@verify-formals)) (begin (set! ag2b2b@chi-lambda-clause (lambda (ag3b54@stx ag3b55@fmls ag3b56@body* ag3b57@r ag3b58@mr) ((lambda (ag3b5e@t) ((lambda (ag3b60@ls/false) (if ag3b60@ls/false (apply (lambda (ag3b62@x*) (begin (ag2b29@verify-formals ag3b55@fmls ag3b54@stx) ((lambda (ag3b64@lex* ag3b65@lab*) (values ag3b64@lex* (ag2b3b@chi-internal (ag28ea@add-subst (ag28be@make-full-rib ag3b62@x* ag3b65@lab*) ag3b56@body*) (ag2a97@add-lexicals ag3b65@lab* ag3b64@lex* ag3b57@r) ag3b58@mr))) (map ag2886@gen-lexical ag3b62@x*) (map ag288a@gen-label ag3b62@x*)))) ag3b60@ls/false) ((lambda (ag3b68@t) ((lambda (ag3b6a@ls/false) (if ag3b6a@ls/false (apply (lambda (ag3b6c@x* ag3b6d@x) (begin (ag2b29@verify-formals ag3b55@fmls ag3b54@stx) ((lambda (ag3b70@lex* ag3b71@lab* ag3b72@lex ag3b73@lab) (values (append ag3b70@lex* ag3b72@lex) (ag2b3b@chi-internal (ag28ea@add-subst (ag28be@make-full-rib (cons ag3b6d@x ag3b6c@x*) (cons ag3b73@lab ag3b71@lab*)) ag3b56@body*) (ag2a97@add-lexicals (cons ag3b73@lab ag3b71@lab*) (cons ag3b72@lex ag3b70@lex*) ag3b57@r) ag3b58@mr))) (map ag2886@gen-lexical ag3b6c@x*) (map ag288a@gen-label ag3b6c@x*) (ag2886@gen-lexical ag3b6d@x) (ag288a@gen-label ag3b6d@x)))) ag3b6a@ls/false) ((lambda (ag3b78@t) ((lambda (ag3b7a@ls/false) (if ag3b7a@ls/false (apply (lambda () (ag2be3@syntax-violation '#f '"invalid syntax" ag3b55@fmls)) ag3b7a@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3b78@t))) (ag2b03@syntax-dispatch ag3b78@t '_))) ag3b68@t))) (ag2b03@syntax-dispatch ag3b68@t '#(each+ any () any)))) ag3b5e@t))) (ag2b03@syntax-dispatch ag3b5e@t 'each-any))) ag3b55@fmls))) (set! ag45ae@ag2b2b@chi-lambda-clause ag2b2b@chi-lambda-clause)) (begin (set! ag2b2d@chi-lambda-clause* (lambda (ag3b7c@stx ag3b7d@fmls* ag3b7e@body** ag3b7f@r ag3b80@mr) (if (null? ag3b7d@fmls*) (values '() '()) (call-with-values (lambda () (ag2b2b@chi-lambda-clause ag3b7c@stx (car ag3b7d@fmls*) (car ag3b7e@body**) ag3b7f@r ag3b80@mr)) (lambda (ag3b8a@ag3b87 ag3b8b@ag3b89) ((lambda (ag3b8e@b ag3b8f@a) (call-with-values (lambda () (ag2b2d@chi-lambda-clause* ag3b7c@stx (cdr ag3b7d@fmls*) (cdr ag3b7e@body**) ag3b7f@r ag3b80@mr)) (lambda (ag3b96@ag3b93 ag3b97@ag3b95) ((lambda (ag3b9a@b* ag3b9b@a*) (values (cons ag3b8f@a ag3b9b@a*) (cons ag3b8e@b ag3b9a@b*))) ag3b97@ag3b95 ag3b96@ag3b93)))) ag3b8b@ag3b89 ag3b8a@ag3b87)))))) (set! ag45af@ag2b2d@chi-lambda-clause* ag2b2d@chi-lambda-clause*)) (begin (set! ag2b2f@chi-defun (lambda (ag3b9e@x ag3b9f@r ag3ba0@mr) ((lambda (ag3ba4@fmls ag3ba5@body*) (call-with-values (lambda () (ag2b2b@chi-lambda-clause ag3ba4@fmls ag3ba4@fmls ag3ba5@body* ag3b9f@r ag3ba0@mr)) (lambda (ag3bac@ag3ba9 ag3bad@ag3bab) ((lambda (ag3bb0@body ag3bb1@fmls) (ag2862@ag279a@build-lambda '#f ag3bb1@fmls ag3bb0@body)) ag3bad@ag3bab ag3bac@ag3ba9)))) (car ag3b9e@x) (cdr ag3b9e@x)))) (set! ag45b0@ag2b2f@chi-defun ag2b2f@chi-defun)) (begin (set! ag2b31@chi-rhs (lambda (ag3bb4@rhs ag3bb5@r ag3bb6@mr) ((lambda (ag3bba@t) (if (memv ag3bba@t '(defun)) (ag2b2f@chi-defun (cdr ag3bb4@rhs) ag3bb5@r ag3bb6@mr) (if (memv ag3bba@t '(expr)) ((lambda (ag3bbc@expr) (ag2b25@chi-expr ag3bbc@expr ag3bb5@r ag3bb6@mr)) (cdr ag3bb4@rhs)) (if (memv ag3bba@t '(top-expr)) ((lambda (ag3bbe@expr) (ag2865@ag27cc@build-sequence '#f (list (ag2b25@chi-expr ag3bbe@expr ag3bb5@r ag3bb6@mr) (ag2866@ag27ce@build-void)))) (cdr ag3bb4@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" ag3bb4@rhs))))) (car ag3bb4@rhs)))) (set! ag45b1@ag2b31@chi-rhs ag2b31@chi-rhs)) (begin (set! ag2b33@expand-interaction-rhs*/init* (lambda (ag3bc0@lhs* ag3bc1@rhs* ag3bc2@init* ag3bc3@r ag3bc4@mr) ((letrec ((ag3bca@f (lambda (ag3bcc@lhs* ag3bcd@rhs*) (if (null? ag3bcc@lhs*) (map (lambda (ag3bd0@x) (ag2b25@chi-expr ag3bd0@x ag3bc3@r ag3bc4@mr)) ag3bc2@init*) ((lambda (ag3bd2@lhs ag3bd3@rhs) ((lambda (ag3bd6@t) (if (memv ag3bd6@t '(defun)) ((lambda (ag3bd8@rhs) (cons (list 'set! ag3bd2@lhs ag3bd8@rhs) (ag3bca@f (cdr ag3bcc@lhs*) (cdr ag3bcd@rhs*)))) (ag2b2f@chi-defun (cdr ag3bd3@rhs) ag3bc3@r ag3bc4@mr)) (if (memv ag3bd6@t '(expr)) ((lambda (ag3bda@rhs) (cons (list 'set! ag3bd2@lhs ag3bda@rhs) (ag3bca@f (cdr ag3bcc@lhs*) (cdr ag3bcd@rhs*)))) (ag2b25@chi-expr (cdr ag3bd3@rhs) ag3bc3@r ag3bc4@mr)) (if (memv ag3bd6@t '(top-expr)) ((lambda (ag3bdc@e) (cons ag3bdc@e (ag3bca@f (cdr ag3bcc@lhs*) (cdr ag3bcd@rhs*)))) (ag2b25@chi-expr (cdr ag3bd3@rhs) ag3bc3@r ag3bc4@mr)) (error 'expand-interaction '"invallid" ag3bd3@rhs))))) (car ag3bd3@rhs))) (car ag3bcc@lhs*) (car ag3bcd@rhs*)))))) ag3bca@f) ag3bc0@lhs* ag3bc1@rhs*))) (set! ag45b2@ag2b33@expand-interaction-rhs*/init* ag2b33@expand-interaction-rhs*/init*)) (begin (set! ag2b35@chi-rhs* (lambda (ag3bde@rhs* ag3bdf@r ag3be0@mr) ((letrec ((ag3be4@f (lambda (ag3be6@ls) (if (null? ag3be6@ls) '() ((lambda (ag3be8@a) (cons ag3be8@a (ag3be4@f (cdr ag3be6@ls)))) (ag2b31@chi-rhs (car ag3be6@ls) ag3bdf@r ag3be0@mr)))))) ag3be4@f) ag3bde@rhs*))) (set! ag45b3@ag2b35@chi-rhs* ag2b35@chi-rhs*)) (begin (set! ag2b37@find-bound=? (lambda (ag3bea@x ag3beb@lhs* ag3bec@rhs*) (if (null? ag3beb@lhs*) '#f (if (ag2902@bound-id=? ag3bea@x (car ag3beb@lhs*)) (car ag3bec@rhs*) (ag2b37@find-bound=? ag3bea@x (cdr ag3beb@lhs*) (cdr ag3bec@rhs*)))))) (set! ag45b4@ag2b37@find-bound=? ag2b37@find-bound=?)) (begin (set! ag2b39@find-dups (lambda (ag3bf0@ls) ((letrec ((ag3bf2@f (lambda (ag3bf4@ls ag3bf5@dups) (if (null? ag3bf4@ls) ag3bf5@dups ((lambda (ag3bf8@t) (if ag3bf8@t ((lambda (ag3bfa@x) (ag3bf2@f (cdr ag3bf4@ls) (cons (list (car ag3bf4@ls) ag3bfa@x) ag3bf5@dups))) ag3bf8@t) (ag3bf2@f (cdr ag3bf4@ls) ag3bf5@dups))) (ag2b37@find-bound=? (car ag3bf4@ls) (cdr ag3bf4@ls) (cdr ag3bf4@ls))))))) ag3bf2@f) ag3bf0@ls '()))) (set! ag45b5@ag2b39@find-dups ag2b39@find-dups)) (begin (set! ag2b3b@chi-internal (lambda (ag3bfc@e* ag3bfd@r ag3bfe@mr) ((lambda (ag3c02@rib) (call-with-values (lambda () (ag2b5b@chi-body* (map (lambda (ag3c14@x) (ag28ea@add-subst ag3c02@rib ag3c14@x)) (ag28fc@syntax->list ag3bfc@e*)) ag3bfd@r ag3bfe@mr '() '() '() '() '() ag3c02@rib '#f)) (lambda (ag3c16@ag3c05 ag3c17@ag3c07 ag3c18@ag3c09 ag3c19@ag3c0b ag3c1a@ag3c0d ag3c1b@ag3c0f ag3c1c@ag3c11 ag3c1d@ag3c13) ((lambda (ag3c26@_exp* ag3c27@kwd* ag3c28@mod** ag3c29@rhs* ag3c2a@lex* ag3c2b@mr ag3c2c@r ag3c2d@e*) (begin (if (null? ag3c2d@e*) (ag2be3@syntax-violation '#f '"no expression in body" ag3c2d@e*) (void)) ((lambda (ag3c36@init*) ((lambda (ag3c38@rhs*) ((lambda () (ag2868@ag27d2@build-letrec* '#f (reverse ag3c2a@lex*) (reverse ag3c38@rhs*) (ag2865@ag27cc@build-sequence '#f ag3c36@init*))))) (ag2b35@chi-rhs* ag3c29@rhs* ag3c2c@r ag3c2b@mr))) (ag2b21@chi-expr* (append (apply append (reverse ag3c28@mod**)) ag3c2d@e*) ag3c2c@r ag3c2b@mr)))) ag3c1d@ag3c13 ag3c1c@ag3c11 ag3c1b@ag3c0f ag3c1a@ag3c0d ag3c19@ag3c0b ag3c18@ag3c09 ag3c17@ag3c07 ag3c16@ag3c05)))) (ag28b2@make-empty-rib)))) (set! ag45b6@ag2b3b@chi-internal ag2b3b@chi-internal)) (begin (set! ag2b3d@parse-module (lambda (ag3c3a@e) ((lambda (ag3c3c@t) ((lambda (ag3c3e@ls/false) (if ag3c3e@ls/false (apply (lambda (ag3c40@export* ag3c41@b*) (begin (if (not (for-all ag28fe@id? ag3c40@export*)) (ag2be3@syntax-violation '#f '"module exports must be identifiers" ag3c3a@e) (void)) (values '#f (list->vector ag3c40@export*) ag3c41@b*))) ag3c3e@ls/false) ((lambda (ag3c44@t) ((lambda (ag3c46@ls/false) (if ag3c46@ls/false (apply (lambda (ag3c48@name ag3c49@export* ag3c4a@b*) (begin (if (not (ag28fe@id? ag3c48@name)) (ag2be3@syntax-violation '#f '"module name must be an identifier" ag3c3a@e) (void)) (if (not (for-all ag28fe@id? ag3c49@export*)) (ag2be3@syntax-violation '#f '"module exports must be identifiers" ag3c3a@e) (void)) (values ag3c48@name (list->vector ag3c49@export*) ag3c4a@b*))) ag3c46@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3c44@t))) (ag2b03@syntax-dispatch ag3c44@t '(_ any each-any . each-any)))) ag3c3c@t))) (ag2b03@syntax-dispatch ag3c3c@t '(_ each-any . each-any)))) ag3c3a@e))) (set! ag45b7@ag2b3d@parse-module ag2b3d@parse-module)) (begin (set! ag2b47@module-interface? (lambda (ag3c4e@x) (and (simple-struct? ag3c4e@x) (eq? (simple-struct-name ag3c4e@x) 'module-interface)))) (set! ag45b8@ag2b47@module-interface? ag2b47@module-interface?)) (begin (set! ag2b49@module-interface-first-mark (lambda (ag3c50@x) (simple-struct-ref ag3c50@x '0))) (set! ag45b9@ag2b49@module-interface-first-mark ag2b49@module-interface-first-mark)) (begin (set! ag2b4b@set-module-interface-first-mark! (lambda (ag3c52@x ag3c53@val) (simple-struct-set! ag3c52@x '0 ag3c53@val))) (set! ag45ba@ag2b4b@set-module-interface-first-mark! ag2b4b@set-module-interface-first-mark!)) (begin (set! ag2b4d@module-interface-exp-id-vec (lambda (ag3c56@x) (simple-struct-ref ag3c56@x '1))) (set! ag45bb@ag2b4d@module-interface-exp-id-vec ag2b4d@module-interface-exp-id-vec)) (begin (set! ag2b4f@set-module-interface-exp-id-vec! (lambda (ag3c58@x ag3c59@val) (simple-struct-set! ag3c58@x '1 ag3c59@val))) (set! ag45bc@ag2b4f@set-module-interface-exp-id-vec! ag2b4f@set-module-interface-exp-id-vec!)) (begin (set! ag2b51@module-interface-exp-lab-vec (lambda (ag3c5c@x) (simple-struct-ref ag3c5c@x '2))) (set! ag45bd@ag2b51@module-interface-exp-lab-vec ag2b51@module-interface-exp-lab-vec)) (begin (set! ag2b53@set-module-interface-exp-lab-vec! (lambda (ag3c5e@x ag3c5f@val) (simple-struct-set! ag3c5e@x '2 ag3c5f@val))) (set! ag45be@ag2b53@set-module-interface-exp-lab-vec! ag2b53@set-module-interface-exp-lab-vec!)) (begin (set! ag2b55@dummy '3) (set! ag45bf@ag2b55@dummy ag2b55@dummy)) (begin (set! ag2b57@module-interface-exp-id* (lambda (ag3c62@iface ag3c63@id) ((lambda (ag3c67@diff-marks) (begin (set! ag3c67@diff-marks (lambda (ag3c6e@ls ag3c6f@x) (begin (if (null? ag3c6e@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (ag3c72@a) (if (eq? ag3c72@a ag3c6f@x) '() (cons ag3c72@a (ag3c67@diff-marks (cdr ag3c6e@ls) ag3c6f@x)))) (car ag3c6e@ls))))) ((lambda (ag3c68@diff ag3c69@id-vec) (if (null? ag3c68@diff) ag3c69@id-vec (vector-map (lambda (ag3c6c@x) (make-simple-struct 'stx '5 (list (ag28cc@stx-expr ag3c6c@x) (append ag3c68@diff (ag28d0@stx-mark* ag3c6c@x)) '() '()))) ag3c69@id-vec))) (ag3c67@diff-marks (ag28d0@stx-mark* ag3c63@id) (ag2b49@module-interface-first-mark ag3c62@iface)) (ag2b4d@module-interface-exp-id-vec ag3c62@iface)))) '#f))) (set! ag45c0@ag2b57@module-interface-exp-id* ag2b57@module-interface-exp-id*)) (begin (set! ag2b59@chi-internal-module (lambda (ag3c74@e ag3c75@r ag3c76@mr ag3c77@lex* ag3c78@rhs* ag3c79@mod** ag3c7a@kwd*) (call-with-values (lambda () (ag2b3d@parse-module ag3c74@e)) (lambda (ag3c88@ag3c83 ag3c89@ag3c85 ag3c8a@ag3c87) ((lambda (ag3c8e@e* ag3c8f@exp-id* ag3c90@name) ((lambda (ag3c94@rib) ((lambda (ag3c96@e*) ((lambda () (call-with-values (lambda () (ag2b5b@chi-body* ag3c96@e* ag3c75@r ag3c76@mr ag3c77@lex* ag3c78@rhs* ag3c79@mod** ag3c7a@kwd* '() ag3c94@rib '#f)) (lambda (ag3ca8@ag3c99 ag3ca9@ag3c9b ag3caa@ag3c9d ag3cab@ag3c9f ag3cac@ag3ca1 ag3cad@ag3ca3 ag3cae@ag3ca5 ag3caf@ag3ca7) ((lambda (ag3cb8@_exp* ag3cb9@kwd* ag3cba@mod** ag3cbb@rhs* ag3cbc@lex* ag3cbd@mr ag3cbe@r ag3cbf@e*) ((lambda (ag3cc8@exp-lab* ag3cc9@mod**) (if (not ag3c90@name) (values ag3cbc@lex* ag3cbb@rhs* ag3c8f@exp-id* ag3cc8@exp-lab* ag3cbe@r ag3cbd@mr ag3cc9@mod** ag3cb9@kwd*) ((lambda (ag3ccc@lab ag3ccd@iface) (values ag3cbc@lex* ag3cbb@rhs* (vector ag3c90@name) (vector ag3ccc@lab) (cons (cons ag3ccc@lab (cons '$module ag3ccd@iface)) ag3cbe@r) (cons (cons ag3ccc@lab (cons '$module ag3ccd@iface)) ag3cbd@mr) ag3cc9@mod** ag3cb9@kwd*)) (ag288a@gen-label 'module) (make-simple-struct 'module-interface '4 (list (car (ag28d0@stx-mark* ag3c90@name)) (vector-map (lambda (ag3cd0@x) (make-simple-struct 'stx '5 (list (ag28cc@stx-expr ag3cd0@x) (ag28d0@stx-mark* ag3cd0@x) '() '()))) ag3c8f@exp-id*) ag3cc8@exp-lab*))))) (vector-map (lambda (ag3cd2@x) (or (ag2914@id->label (make-simple-struct 'stx '5 (list (ag2900@id->sym ag3cd2@x) (ag28d0@stx-mark* ag3cd2@x) (list ag3c94@rib) '()))) (ag2be3@syntax-violation '#f '"cannot find module export" ag3cd2@x))) ag3c8f@exp-id*) (cons ag3cbf@e* ag3cba@mod**))) ag3caf@ag3ca7 ag3cae@ag3ca5 ag3cad@ag3ca3 ag3cac@ag3ca1 ag3cab@ag3c9f ag3caa@ag3c9d ag3ca9@ag3c9b ag3ca8@ag3c99)))))) (map (lambda (ag3cd4@x) (ag28ea@add-subst ag3c94@rib ag3cd4@x)) (ag28fc@syntax->list ag3c8e@e*)))) (ag28b2@make-empty-rib))) ag3c8a@ag3c87 ag3c89@ag3c85 ag3c88@ag3c83))))) (set! ag45c1@ag2b59@chi-internal-module ag2b59@chi-internal-module)) (begin (set! ag2b5b@chi-body* (lambda (ag3cd6@e* ag3cd7@r ag3cd8@mr ag3cd9@lex* ag3cda@rhs* ag3cdb@mod** ag3cdc@kwd* ag3cdd@exp* ag3cde@rib ag3cdf@top?) (if (null? ag3cd6@e*) (values ag3cd6@e* ag3cd7@r ag3cd8@mr ag3cd9@lex* ag3cda@rhs* ag3cdb@mod** ag3cdc@kwd* ag3cdd@exp*) ((lambda (ag3cea@e) (call-with-values (lambda () (ag2920@syntax-type ag3cea@e ag3cd7@r)) (lambda (ag3cf2@ag3ced ag3cf3@ag3cef ag3cf4@ag3cf1) ((lambda (ag3cf8@kwd ag3cf9@value ag3cfa@type) ((lambda (ag3cfe@kwd*) ((lambda (ag3d00@t) (if (memv ag3d00@t '(define)) (call-with-values (lambda () (ag2a87@parse-define ag3cea@e)) (lambda (ag3d06@ag3d03 ag3d07@ag3d05) ((lambda (ag3d0a@rhs ag3d0b@id) (begin (if (ag290a@bound-id-member? ag3d0b@id ag3cfe@kwd*) (ag2be3@syntax-violation '#f '"cannot redefine keyword" ag3cea@e) (void)) (call-with-values (lambda () (ag288e@gen-define-label+loc ag3d0b@id ag3cde@rib)) (lambda (ag3d12@ag3d0f ag3d13@ag3d11) ((lambda (ag3d16@lex ag3d17@lab) (begin (ag28b4@extend-rib! ag3cde@rib ag3d0b@id ag3d17@lab) (ag2b5b@chi-body* (cdr ag3cd6@e*) (ag2a95@add-lexical ag3d17@lab ag3d16@lex ag3cd7@r) ag3cd8@mr (cons ag3d16@lex ag3cd9@lex*) (cons ag3d0a@rhs ag3cda@rhs*) ag3cdb@mod** ag3cfe@kwd* ag3cdd@exp* ag3cde@rib ag3cdf@top?))) ag3d13@ag3d11 ag3d12@ag3d0f))))) ag3d07@ag3d05 ag3d06@ag3d03))) (if (memv ag3d00@t '(define-syntax)) (call-with-values (lambda () (ag2a89@parse-define-syntax ag3cea@e)) (lambda (ag3d1e@ag3d1b ag3d1f@ag3d1d) ((lambda (ag3d22@rhs ag3d23@id) (begin (if (ag290a@bound-id-member? ag3d23@id ag3cfe@kwd*) (ag2be3@syntax-violation '#f '"cannot redefine keyword" ag3cea@e) (void)) ((lambda (ag3d26@lab ag3d27@expanded-rhs) (begin (ag28b4@extend-rib! ag3cde@rib ag3d23@id ag3d26@lab) ((lambda (ag3d2a@b) (ag2b5b@chi-body* (cdr ag3cd6@e*) (cons (cons ag3d26@lab ag3d2a@b) ag3cd7@r) (cons (cons ag3d26@lab ag3d2a@b) ag3cd8@mr) ag3cd9@lex* ag3cda@rhs* ag3cdb@mod** ag3cfe@kwd* ag3cdd@exp* ag3cde@rib ag3cdf@top?)) (ag2936@make-eval-transformer ag3d27@expanded-rhs)))) (ag2890@gen-define-label ag3d23@id ag3cde@rib) (ag2b5d@expand-transformer ag3d22@rhs ag3cd8@mr)))) ag3d1f@ag3d1d ag3d1e@ag3d1b))) (if (memv ag3d00@t '(let-syntax letrec-syntax)) ((lambda (ag3d2c@t) ((lambda (ag3d2e@ls/false) (if (and ag3d2e@ls/false (apply (lambda (ag3d30@xlhs* ag3d31@xrhs* ag3d32@xbody*) (if (not (ag2906@valid-bound-ids? ag3d30@xlhs*)) (ag2be3@syntax-violation '#f '"invalid identifiers" ag3cea@e) (void))) ag3d2e@ls/false)) (apply (lambda (ag3d36@xlhs* ag3d37@xrhs* ag3d38@xbody*) ((lambda (ag3d3c@xlab*) ((lambda (ag3d3e@xrib) ((lambda (ag3d40@xb*) ((lambda () (ag2b5b@chi-body* (append (map (lambda (ag3d42@x) (ag28ea@add-subst ag3d3e@xrib ag3d42@x)) ag3d38@xbody*) (cdr ag3cd6@e*)) (append (map cons ag3d3c@xlab* ag3d40@xb*) ag3cd7@r) (append (map cons ag3d3c@xlab* ag3d40@xb*) ag3cd8@mr) ag3cd9@lex* ag3cda@rhs* ag3cdb@mod** ag3cfe@kwd* ag3cdd@exp* ag3cde@rib ag3cdf@top?)))) (map (lambda (ag3d44@x) (ag2936@make-eval-transformer (ag2b5d@expand-transformer (if (eq? ag3cfa@type 'let-syntax) ag3d44@x (ag28ea@add-subst ag3d3e@xrib ag3d44@x)) ag3cd8@mr))) ag3d37@xrhs*))) (ag28be@make-full-rib ag3d36@xlhs* ag3d3c@xlab*))) (map ag288a@gen-label ag3d36@xlhs*))) ag3d2e@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3d2c@t))) (ag2b03@syntax-dispatch ag3d2c@t '(_ #(each (any any)) . each-any)))) ag3cea@e) (if (memv ag3d00@t '(begin)) ((lambda (ag3d46@t) ((lambda (ag3d48@ls/false) (if ag3d48@ls/false (apply (lambda (ag3d4a@x*) (ag2b5b@chi-body* (append ag3d4a@x* (cdr ag3cd6@e*)) ag3cd7@r ag3cd8@mr ag3cd9@lex* ag3cda@rhs* ag3cdb@mod** ag3cfe@kwd* ag3cdd@exp* ag3cde@rib ag3cdf@top?)) ag3d48@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3d46@t))) (ag2b03@syntax-dispatch ag3d46@t '(_ . each-any)))) ag3cea@e) (if (memv ag3d00@t '(global-macro global-macro!)) (ag2b5b@chi-body* (cons (ag28ea@add-subst ag3cde@rib (ag2b1f@chi-global-macro ag3cf9@value ag3cea@e)) (cdr ag3cd6@e*)) ag3cd7@r ag3cd8@mr ag3cd9@lex* ag3cda@rhs* ag3cdb@mod** ag3cfe@kwd* ag3cdd@exp* ag3cde@rib ag3cdf@top?) (if (memv ag3d00@t '(local-macro local-macro!)) (ag2b5b@chi-body* (cons (ag28ea@add-subst ag3cde@rib (ag2b1d@chi-local-macro ag3cf9@value ag3cea@e)) (cdr ag3cd6@e*)) ag3cd7@r ag3cd8@mr ag3cd9@lex* ag3cda@rhs* ag3cdb@mod** ag3cfe@kwd* ag3cdd@exp* ag3cde@rib ag3cdf@top?) (if (memv ag3d00@t '(macro macro!)) (ag2b5b@chi-body* (cons (ag28ea@add-subst ag3cde@rib (ag2b1b@chi-macro ag3cf9@value ag3cea@e)) (cdr ag3cd6@e*)) ag3cd7@r ag3cd8@mr ag3cd9@lex* ag3cda@rhs* ag3cdb@mod** ag3cfe@kwd* ag3cdd@exp* ag3cde@rib ag3cdf@top?) (if (memv ag3d00@t '(module)) (call-with-values (lambda () (ag2b59@chi-internal-module ag3cea@e ag3cd7@r ag3cd8@mr ag3cd9@lex* ag3cda@rhs* ag3cdb@mod** ag3cfe@kwd*)) (lambda (ag3d5c@ag3d4d ag3d5d@ag3d4f ag3d5e@ag3d51 ag3d5f@ag3d53 ag3d60@ag3d55 ag3d61@ag3d57 ag3d62@ag3d59 ag3d63@ag3d5b) ((lambda (ag3d6c@kwd* ag3d6d@mod** ag3d6e@mr ag3d6f@r ag3d70@m-exp-lab* ag3d71@m-exp-id* ag3d72@rhs* ag3d73@lex*) (begin (vector-for-each (lambda (ag3d7c@id ag3d7d@lab) (ag28b4@extend-rib! ag3cde@rib ag3d7c@id ag3d7d@lab)) ag3d71@m-exp-id* ag3d70@m-exp-lab*) (ag2b5b@chi-body* (cdr ag3cd6@e*) ag3d6f@r ag3d6e@mr ag3d73@lex* ag3d72@rhs* ag3d6d@mod** ag3d6c@kwd* ag3cdd@exp* ag3cde@rib ag3cdf@top?))) ag3d63@ag3d5b ag3d62@ag3d59 ag3d61@ag3d57 ag3d60@ag3d55 ag3d5f@ag3d53 ag3d5e@ag3d51 ag3d5d@ag3d4f ag3d5c@ag3d4d))) (if (memv ag3d00@t '(library)) (begin (ag2bc5@library-expander (ag2912@stx->datum ag3cea@e)) (ag2b5b@chi-body* (cdr ag3cd6@e*) ag3cd7@r ag3cd8@mr ag3cd9@lex* ag3cda@rhs* ag3cdb@mod** ag3cfe@kwd* ag3cdd@exp* ag3cde@rib ag3cdf@top?)) (if (memv ag3d00@t '(export)) ((lambda (ag3d80@t) ((lambda (ag3d82@ls/false) (if ag3d82@ls/false (apply (lambda (ag3d84@exp-decl*) (ag2b5b@chi-body* (cdr ag3cd6@e*) ag3cd7@r ag3cd8@mr ag3cd9@lex* ag3cda@rhs* ag3cdb@mod** ag3cfe@kwd* (append ag3d84@exp-decl* ag3cdd@exp*) ag3cde@rib ag3cdf@top?)) ag3d82@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3d80@t))) (ag2b03@syntax-dispatch ag3d80@t '(_ . each-any)))) ag3cea@e) (if (memv ag3d00@t '(import)) ((lambda () ((lambda (ag3d87@module-import? ag3d89@module-import ag3d8b@library-import) (begin (set! ag3d87@module-import? (lambda (ag3dda@e) ((lambda (ag3ddc@t) ((lambda (ag3dde@ls/false) (if (and ag3dde@ls/false (apply (lambda (ag3de0@id) (ag28fe@id? ag3de0@id)) ag3dde@ls/false)) (apply (lambda (ag3de2@id) '#t) ag3dde@ls/false) ((lambda (ag3de4@t) ((lambda (ag3de6@ls/false) (if ag3de6@ls/false (apply (lambda (ag3de8@imp*) '#f) ag3de6@ls/false) ((lambda (ag3dea@t) ((lambda (ag3dec@ls/false) (if ag3dec@ls/false (apply (lambda () (ag2be3@syntax-violation '#f '"malformed import form" ag3dda@e)) ag3dec@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3dea@t))) (ag2b03@syntax-dispatch ag3dea@t '_))) ag3de4@t))) (ag2b03@syntax-dispatch ag3de4@t '(_ . each-any)))) ag3ddc@t))) (ag2b03@syntax-dispatch ag3ddc@t '(_ any)))) ag3dda@e))) (set! ag3d89@module-import (lambda (ag3db8@e ag3db9@r) ((lambda (ag3dbc@t) ((lambda (ag3dbe@ls/false) (if (and ag3dbe@ls/false (apply (lambda (ag3dc0@id) (ag28fe@id? ag3dc0@id)) ag3dbe@ls/false)) (apply (lambda (ag3dc2@id) (call-with-values (lambda () (ag2920@syntax-type ag3dc2@id ag3db9@r)) (lambda (ag3dca@ag3dc5 ag3dcb@ag3dc7 ag3dcc@ag3dc9) ((lambda (ag3dd0@kwd ag3dd1@value ag3dd2@type) ((lambda (ag3dd6@t) (if (memv ag3dd6@t '($module)) ((lambda (ag3dd8@iface) (values (ag2b57@module-interface-exp-id* ag3dd8@iface ag3dc2@id) (ag2b51@module-interface-exp-lab-vec ag3dd8@iface))) ag3dd1@value) (ag2be3@syntax-violation '#f '"invalid import" ag3db8@e))) ag3dd2@type)) ag3dcc@ag3dc9 ag3dcb@ag3dc7 ag3dca@ag3dc5)))) ag3dbe@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3dbc@t))) (ag2b03@syntax-dispatch ag3dbc@t '(_ any)))) ag3db8@e))) (set! ag3d8b@library-import (lambda (ag3d9c@e) ((lambda (ag3d9e@t) ((lambda (ag3da0@ls/false) (if ag3da0@ls/false (apply (lambda (ag3da2@ctxt ag3da3@imp*) (call-with-values (lambda () (ag2b65@parse-import-spec* (ag2be9@syntax->datum ag3da3@imp*))) (lambda (ag3daa@ag3da7 ag3dab@ag3da9) ((lambda (ag3dae@subst-labels ag3daf@subst-names) (values (vector-map (lambda (ag3db2@name) (ag28de@datum->stx ag3da2@ctxt ag3db2@name)) ag3daf@subst-names) ag3dae@subst-labels)) ag3dab@ag3da9 ag3daa@ag3da7)))) ag3da0@ls/false) ((lambda (ag3db4@t) ((lambda (ag3db6@ls/false) (if ag3db6@ls/false (apply (lambda () (ag2be3@syntax-violation '#f '"invalid import form" ag3d9c@e)) ag3db6@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3db4@t))) (ag2b03@syntax-dispatch ag3db4@t '_))) ag3d9e@t))) (ag2b03@syntax-dispatch ag3d9e@t '(any . each-any)))) ag3d9c@e))) (begin (call-with-values (lambda () (if (ag3d87@module-import? ag3cea@e) (ag3d89@module-import ag3cea@e ag3cd7@r) (ag3d8b@library-import ag3cea@e))) (lambda (ag3d90@ag3d8d ag3d91@ag3d8f) ((lambda (ag3d94@lab* ag3d95@id*) (vector-for-each (lambda (ag3d98@id ag3d99@lab) (ag28b4@extend-rib! ag3cde@rib ag3d98@id ag3d99@lab)) ag3d95@id* ag3d94@lab*)) ag3d91@ag3d8f ag3d90@ag3d8d))) (ag2b5b@chi-body* (cdr ag3cd6@e*) ag3cd7@r ag3cd8@mr ag3cd9@lex* ag3cda@rhs* ag3cdb@mod** ag3cfe@kwd* ag3cdd@exp* ag3cde@rib ag3cdf@top?)))) '#f '#f '#f))) (if ag3cdf@top? (ag2b5b@chi-body* (cdr ag3cd6@e*) ag3cd7@r ag3cd8@mr (cons (ag2886@gen-lexical 'dummy) ag3cd9@lex*) (cons (cons 'top-expr ag3cea@e) ag3cda@rhs*) ag3cdb@mod** ag3cfe@kwd* ag3cdd@exp* ag3cde@rib ag3cdf@top?) (values ag3cd6@e* ag3cd7@r ag3cd8@mr ag3cd9@lex* ag3cda@rhs* ag3cdb@mod** ag3cfe@kwd* ag3cdd@exp*)))))))))))))) ag3cfa@type)) (if (ag28fe@id? ag3cf8@kwd) (cons ag3cf8@kwd ag3cdc@kwd*) ag3cdc@kwd*))) ag3cf4@ag3cf1 ag3cf3@ag3cef ag3cf2@ag3ced)))) (car ag3cd6@e*))))) (set! ag45c2@ag2b5b@chi-body* ag2b5b@chi-body*)) (begin (set! ag2b5d@expand-transformer (lambda (ag3dee@expr ag3def@r) ((lambda (ag3df2@rtc) ((lambda (ag3df4@expanded-rhs) (begin (for-each ((lambda (ag3df6@mark-visit) (lambda (ag3df8@x) (begin (ag2721@ag256f@invoke-library ag3df8@x) (ag3df6@mark-visit ag3df8@x)))) (ag2b6d@vis-collector)) (ag3df2@rtc)) ag3df4@expanded-rhs)) ((lambda (ag3e02@ag3dfb ag3e03@ag3dfd ag3e04@ag3dff ag3e05@ag3e01) ((lambda (ag3e0a@swap) (dynamic-wind ag3e0a@swap (lambda () (ag2b25@chi-expr ag3dee@expr ag3def@r ag3def@r)) ag3e0a@swap)) (lambda () (begin ((lambda (ag3e0c@t) (begin (ag3e02@ag3dfb ag3e04@ag3dff) (set! ag3e04@ag3dff ag3e0c@t))) (ag3e02@ag3dfb)) ((lambda (ag3e0e@t) (begin (ag3e03@ag3dfd ag3e05@ag3e01) (set! ag3e05@ag3e01 ag3e0e@t))) (ag3e03@ag3dfd)))))) ag2b6b@inv-collector ag2b6d@vis-collector ag3df2@rtc (lambda (ag3e10@x) (values))))) (ag2b69@make-collector)))) (set! ag45c3@ag2b5d@expand-transformer ag2b5d@expand-transformer)) (begin (set! ag2b5f@parse-exports (lambda (ag3e12@exp*) ((letrec ((ag3e14@f (lambda (ag3e16@exp* ag3e17@int* ag3e18@ext*) (if (null? ag3e16@exp*) (begin (if (not (ag2906@valid-bound-ids? ag3e18@ext*)) (ag2be3@syntax-violation 'export '"invalid exports" (ag2b39@find-dups ag3e18@ext*)) (void)) (values (map ag2be9@syntax->datum ag3e18@ext*) ag3e17@int*)) ((lambda (ag3e1c@t) ((lambda (ag3e1e@ls/false) (if ag3e1e@ls/false (apply (lambda (ag3e20@rename ag3e21@i* ag3e22@e*) (begin (if (not (and (eq? (ag2be9@syntax->datum ag3e20@rename) 'rename) (for-all ag28fe@id? ag3e21@i*) (for-all ag28fe@id? ag3e22@e*))) (ag2be3@syntax-violation 'export '"invalid export specifier" (car ag3e16@exp*)) (void)) (ag3e14@f (cdr ag3e16@exp*) (append ag3e21@i* ag3e17@int*) (append ag3e22@e* ag3e18@ext*)))) ag3e1e@ls/false) ((lambda (ag3e26@t) ((lambda (ag3e28@ls/false) (if ag3e28@ls/false (apply (lambda (ag3e2a@ie) (begin (if (not (ag28fe@id? ag3e2a@ie)) (ag2be3@syntax-violation 'export '"invalid export" ag3e2a@ie) (void)) (ag3e14@f (cdr ag3e16@exp*) (cons ag3e2a@ie ag3e17@int*) (cons ag3e2a@ie ag3e18@ext*)))) ag3e28@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3e26@t))) (ag2b03@syntax-dispatch ag3e26@t 'any))) ag3e1c@t))) (ag2b03@syntax-dispatch ag3e1c@t '(any . #(each (any any)))))) (car ag3e16@exp*)))))) ag3e14@f) ag3e12@exp* '() '()))) (set! ag45c4@ag2b5f@parse-exports ag2b5f@parse-exports)) (begin (set! ag2b61@parse-library-name (lambda (ag3e2c@spec) ((lambda (ag3e2f@parse) (begin (set! ag3e2f@parse (lambda (ag3e3c@x) ((lambda (ag3e3e@t) ((lambda (ag3e40@ls/false) (if (and ag3e40@ls/false (apply (lambda (ag3e42@v*) (for-all (lambda (ag3e44@x) ((lambda (ag3e46@x) (and (integer? ag3e46@x) (exact? ag3e46@x))) (ag2be9@syntax->datum ag3e44@x))) ag3e42@v*)) ag3e40@ls/false)) (apply (lambda (ag3e48@v*) (values '() (map ag2be9@syntax->datum ag3e48@v*))) ag3e40@ls/false) ((lambda (ag3e4a@t) ((lambda (ag3e4c@ls/false) (if (and ag3e4c@ls/false (apply (lambda (ag3e4e@x ag3e4f@rest) (symbol? (ag2be9@syntax->datum ag3e4e@x))) ag3e4c@ls/false)) (apply (lambda (ag3e52@x ag3e53@rest) (call-with-values (lambda () (ag3e2f@parse ag3e53@rest)) (lambda (ag3e5a@ag3e57 ag3e5b@ag3e59) ((lambda (ag3e5e@v* ag3e5f@x*) (values (cons (ag2be9@syntax->datum ag3e52@x) ag3e5f@x*) ag3e5e@v*)) ag3e5b@ag3e59 ag3e5a@ag3e57)))) ag3e4c@ls/false) ((lambda (ag3e62@t) ((lambda (ag3e64@ls/false) (if ag3e64@ls/false (apply (lambda () (values '() '())) ag3e64@ls/false) ((lambda (ag3e66@t) ((lambda (ag3e68@ls/false) (if ag3e68@ls/false (apply (lambda () (ag2be3@syntax-violation '#f '"invalid library name" ag3e2c@spec)) ag3e68@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3e66@t))) (ag2b03@syntax-dispatch ag3e66@t '_))) ag3e62@t))) (ag2b03@syntax-dispatch ag3e62@t '()))) ag3e4a@t))) (ag2b03@syntax-dispatch ag3e4a@t '(any . any)))) ag3e3e@t))) (ag2b03@syntax-dispatch ag3e3e@t '(each-any)))) ag3e3c@x))) (call-with-values (lambda () (ag3e2f@parse ag3e2c@spec)) (lambda (ag3e34@ag3e31 ag3e35@ag3e33) ((lambda (ag3e38@ver* ag3e39@name*) (begin (if (null? ag3e39@name*) (ag2be3@syntax-violation '#f '"empty library name" ag3e2c@spec) (void)) (values ag3e39@name* ag3e38@ver*))) ag3e35@ag3e33 ag3e34@ag3e31))))) '#f))) (set! ag45c5@ag2b61@parse-library-name ag2b61@parse-library-name)) (begin (set! ag2b63@parse-library (lambda (ag3e6a@e) ((lambda (ag3e6c@t) ((lambda (ag3e6e@ls/false) (if (and ag3e6e@ls/false (apply (lambda (ag3e70@library ag3e71@name* ag3e72@export ag3e73@exp* ag3e74@import ag3e75@imp* ag3e76@b*) (and (eq? (ag2be9@syntax->datum ag3e72@export) 'export) (eq? (ag2be9@syntax->datum ag3e74@import) 'import) (eq? (ag2be9@syntax->datum ag3e70@library) 'library))) ag3e6e@ls/false)) (apply (lambda (ag3e7e@library ag3e7f@name* ag3e80@export ag3e81@exp* ag3e82@import ag3e83@imp* ag3e84@b*) (values ag3e7f@name* ag3e81@exp* ag3e83@imp* ag3e84@b*)) ag3e6e@ls/false) ((lambda (ag3e8c@t) ((lambda (ag3e8e@ls/false) (if ag3e8e@ls/false (apply (lambda () (ag2be3@syntax-violation '#f '"malformed library" ag3e6a@e)) ag3e8e@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3e8c@t))) (ag2b03@syntax-dispatch ag3e8c@t '_))) ag3e6c@t))) (ag2b03@syntax-dispatch ag3e6c@t '(any each-any (any . each-any) (any . each-any) . each-any)))) ag3e6a@e))) (set! ag45c6@ag2b63@parse-library ag2b63@parse-library)) (begin (set! ag2b65@parse-import-spec* ((lambda () ((lambda (ag3e91@idsyn? ag3e93@dup-error ag3e95@merge-substs ag3e97@exclude* ag3e99@find* ag3e9b@rem* ag3e9d@remove-dups ag3e9f@parse-library-name ag3ea1@import-library ag3ea3@get-import ag3ea5@add-imports!) (begin (set! ag3e91@idsyn? (lambda (ag409a@x) (symbol? (ag2be9@syntax->datum ag409a@x)))) (set! ag3e93@dup-error (lambda (ag4098@name) (ag2be3@syntax-violation 'import '"two imports with different bindings" ag4098@name))) (set! ag3e95@merge-substs (lambda (ag4086@s ag4087@subst) ((lambda (ag408b@insert-to-subst) (begin (set! ag408b@insert-to-subst (lambda (ag408c@a ag408d@subst) ((lambda (ag4090@name ag4091@label) ((lambda (ag4094@t) (if ag4094@t ((lambda (ag4096@x) (if (eq? (cdr ag4096@x) ag4091@label) ag408d@subst (ag3e93@dup-error ag4090@name))) ag4094@t) (cons ag408c@a ag408d@subst))) (assq ag4090@name ag408d@subst))) (car ag408c@a) (cdr ag408c@a)))) (if (null? ag4086@s) ag4087@subst (ag408b@insert-to-subst (car ag4086@s) (ag3e95@merge-substs (cdr ag4086@s) ag4087@subst))))) '#f))) (set! ag3e97@exclude* (lambda (ag4056@sym* ag4057@subst) ((lambda (ag405b@exclude) (begin (set! ag405b@exclude (lambda (ag4074@sym ag4075@subst) (if (null? ag4075@subst) (ag2be3@syntax-violation 'import '"cannot rename unbound identifier" ag4074@sym) (if (eq? ag4074@sym (caar ag4075@subst)) (values (cdar ag4075@subst) (cdr ag4075@subst)) ((lambda (ag4078@a) (call-with-values (lambda () (ag405b@exclude ag4074@sym (cdr ag4075@subst))) (lambda (ag407e@ag407b ag407f@ag407d) ((lambda (ag4082@subst ag4083@old) (values ag4083@old (cons ag4078@a ag4082@subst))) ag407f@ag407d ag407e@ag407b)))) (car ag4075@subst)))))) (if (null? ag4056@sym*) (values '() ag4057@subst) (call-with-values (lambda () (ag405b@exclude (car ag4056@sym*) ag4057@subst)) (lambda (ag4060@ag405d ag4061@ag405f) ((lambda (ag4064@subst ag4065@old) (call-with-values (lambda () (ag3e97@exclude* (cdr ag4056@sym*) ag4064@subst)) (lambda (ag406c@ag4069 ag406d@ag406b) ((lambda (ag4070@subst ag4071@old*) (values (cons ag4065@old ag4071@old*) ag4070@subst)) ag406d@ag406b ag406c@ag4069)))) ag4061@ag405f ag4060@ag405d)))))) '#f))) (set! ag3e99@find* (lambda (ag404e@sym* ag404f@subst) (map (lambda (ag4052@x) ((lambda (ag4054@t) (if ag4054@t (cdr ag4054@t) (ag2be3@syntax-violation 'import '"cannot find identifier" ag4052@x))) (assq ag4052@x ag404f@subst))) ag404e@sym*))) (set! ag3e9b@rem* (lambda (ag4046@sym* ag4047@subst) ((letrec ((ag404a@f (lambda (ag404c@subst) (if (null? ag404c@subst) '() (if (memq (caar ag404c@subst) ag4046@sym*) (ag404a@f (cdr ag404c@subst)) (cons (car ag404c@subst) (ag404a@f (cdr ag404c@subst)))))))) ag404a@f) ag4047@subst))) (set! ag3e9d@remove-dups (lambda (ag4044@ls) (if (null? ag4044@ls) '() (if (memq (car ag4044@ls) (cdr ag4044@ls)) (ag3e9d@remove-dups (cdr ag4044@ls)) (cons (car ag4044@ls) (ag3e9d@remove-dups (cdr ag4044@ls))))))) (set! ag3e9f@parse-library-name (lambda (ag3f5c@spec) ((lambda (ag3f5f@subversion? ag3f61@subversion-pred ag3f63@version-pred) (begin (set! ag3f5f@subversion? (lambda (ag4040@x) ((lambda (ag4042@x) (and (integer? ag4042@x) (exact? ag4042@x) (>= ag4042@x '0))) (ag2be9@syntax->datum ag4040@x)))) (set! ag3f61@subversion-pred (lambda (ag3fe0@x*) ((lambda (ag3fe2@t) ((lambda (ag3fe4@ls/false) (if (and ag3fe4@ls/false (apply (lambda (ag3fe6@n) (ag3f5f@subversion? ag3fe6@n)) ag3fe4@ls/false)) (apply (lambda (ag3fe8@n) (lambda (ag3fea@x) (= ag3fea@x (ag2be9@syntax->datum ag3fe8@n)))) ag3fe4@ls/false) ((lambda (ag3fec@t) ((lambda (ag3fee@ls/false) (if (and ag3fee@ls/false (apply (lambda (ag3ff0@p? ag3ff1@sub*) (eq? (ag2be9@syntax->datum ag3ff0@p?) 'and)) ag3fee@ls/false)) (apply (lambda (ag3ff4@p? ag3ff5@sub*) ((lambda (ag3ff8@p*) (lambda (ag3ffa@x) (for-all (lambda (ag3ffc@p) (ag3ffc@p ag3ffa@x)) ag3ff8@p*))) (map ag3f61@subversion-pred ag3ff5@sub*))) ag3fee@ls/false) ((lambda (ag3ffe@t) ((lambda (ag4000@ls/false) (if (and ag4000@ls/false (apply (lambda (ag4002@p? ag4003@sub*) (eq? (ag2be9@syntax->datum ag4002@p?) 'or)) ag4000@ls/false)) (apply (lambda (ag4006@p? ag4007@sub*) ((lambda (ag400a@p*) (lambda (ag400c@x) (exists (lambda (ag400e@p) (ag400e@p ag400c@x)) ag400a@p*))) (map ag3f61@subversion-pred ag4007@sub*))) ag4000@ls/false) ((lambda (ag4010@t) ((lambda (ag4012@ls/false) (if (and ag4012@ls/false (apply (lambda (ag4014@p? ag4015@sub) (eq? (ag2be9@syntax->datum ag4014@p?) 'not)) ag4012@ls/false)) (apply (lambda (ag4018@p? ag4019@sub) ((lambda (ag401c@p) (lambda (ag401e@x) (not (ag401c@p ag401e@x)))) (ag3f61@subversion-pred ag4019@sub))) ag4012@ls/false) ((lambda (ag4020@t) ((lambda (ag4022@ls/false) (if (and ag4022@ls/false (apply (lambda (ag4024@p? ag4025@n) (and (eq? (ag2be9@syntax->datum ag4024@p?) '<=) (ag3f5f@subversion? ag4025@n))) ag4022@ls/false)) (apply (lambda (ag4028@p? ag4029@n) (lambda (ag402c@x) (<= ag402c@x (ag2be9@syntax->datum ag4029@n)))) ag4022@ls/false) ((lambda (ag402e@t) ((lambda (ag4030@ls/false) (if (and ag4030@ls/false (apply (lambda (ag4032@p? ag4033@n) (and (eq? (ag2be9@syntax->datum ag4032@p?) '>=) (ag3f5f@subversion? ag4033@n))) ag4030@ls/false)) (apply (lambda (ag4036@p? ag4037@n) (lambda (ag403a@x) (>= ag403a@x (ag2be9@syntax->datum ag4037@n)))) ag4030@ls/false) ((lambda (ag403c@t) ((lambda (ag403e@ls/false) (if ag403e@ls/false (apply (lambda () (ag2be3@syntax-violation 'import '"invalid sub-version spec" ag3f5c@spec ag3fe0@x*)) ag403e@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag403c@t))) (ag2b03@syntax-dispatch ag403c@t '_))) ag402e@t))) (ag2b03@syntax-dispatch ag402e@t '(any any)))) ag4020@t))) (ag2b03@syntax-dispatch ag4020@t '(any any)))) ag4010@t))) (ag2b03@syntax-dispatch ag4010@t '(any any)))) ag3ffe@t))) (ag2b03@syntax-dispatch ag3ffe@t '(any . each-any)))) ag3fec@t))) (ag2b03@syntax-dispatch ag3fec@t '(any . each-any)))) ag3fe2@t))) (ag2b03@syntax-dispatch ag3fe2@t 'any))) ag3fe0@x*))) (set! ag3f63@version-pred (lambda (ag3f90@x*) ((lambda (ag3f92@t) ((lambda (ag3f94@ls/false) (if ag3f94@ls/false (apply (lambda () (lambda (ag3f96@x) '#t)) ag3f94@ls/false) ((lambda (ag3f98@t) ((lambda (ag3f9a@ls/false) (if (and ag3f9a@ls/false (apply (lambda (ag3f9c@c ag3f9d@ver*) (eq? (ag2be9@syntax->datum ag3f9c@c) 'and)) ag3f9a@ls/false)) (apply (lambda (ag3fa0@c ag3fa1@ver*) ((lambda (ag3fa4@p*) (lambda (ag3fa6@x) (for-all (lambda (ag3fa8@p) (ag3fa8@p ag3fa6@x)) ag3fa4@p*))) (map ag3f63@version-pred ag3fa1@ver*))) ag3f9a@ls/false) ((lambda (ag3faa@t) ((lambda (ag3fac@ls/false) (if (and ag3fac@ls/false (apply (lambda (ag3fae@c ag3faf@ver*) (eq? (ag2be9@syntax->datum ag3fae@c) 'or)) ag3fac@ls/false)) (apply (lambda (ag3fb2@c ag3fb3@ver*) ((lambda (ag3fb6@p*) (lambda (ag3fb8@x) (exists (lambda (ag3fba@p) (ag3fba@p ag3fb8@x)) ag3fb6@p*))) (map ag3f63@version-pred ag3fb3@ver*))) ag3fac@ls/false) ((lambda (ag3fbc@t) ((lambda (ag3fbe@ls/false) (if (and ag3fbe@ls/false (apply (lambda (ag3fc0@c ag3fc1@ver) (eq? (ag2be9@syntax->datum ag3fc0@c) 'not)) ag3fbe@ls/false)) (apply (lambda (ag3fc4@c ag3fc5@ver) ((lambda (ag3fc8@p) (lambda (ag3fca@x) (not (ag3fc8@p ag3fca@x)))) (ag3f63@version-pred ag3fc5@ver))) ag3fbe@ls/false) ((lambda (ag3fcc@t) ((lambda (ag3fce@ls/false) (if ag3fce@ls/false (apply (lambda (ag3fd0@sub*) ((lambda (ag3fd2@p*) (lambda (ag3fd4@x) ((letrec ((ag3fd6@f (lambda (ag3fd8@p* ag3fd9@x) (if (null? ag3fd8@p*) '#t (if (null? ag3fd9@x) '#f (and ((car ag3fd8@p*) (car ag3fd9@x)) (ag3fd6@f (cdr ag3fd8@p*) (cdr ag3fd9@x)))))))) ag3fd6@f) ag3fd2@p* ag3fd4@x))) (map ag3f61@subversion-pred ag3fd0@sub*))) ag3fce@ls/false) ((lambda (ag3fdc@t) ((lambda (ag3fde@ls/false) (if ag3fde@ls/false (apply (lambda () (ag2be3@syntax-violation 'import '"invalid version spec" ag3f5c@spec ag3f90@x*)) ag3fde@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3fdc@t))) (ag2b03@syntax-dispatch ag3fdc@t '_))) ag3fcc@t))) (ag2b03@syntax-dispatch ag3fcc@t 'each-any))) ag3fbc@t))) (ag2b03@syntax-dispatch ag3fbc@t '(any any)))) ag3faa@t))) (ag2b03@syntax-dispatch ag3faa@t '(any . each-any)))) ag3f98@t))) (ag2b03@syntax-dispatch ag3f98@t '(any . each-any)))) ag3f92@t))) (ag2b03@syntax-dispatch ag3f92@t '()))) ag3f90@x*))) ((letrec ((ag3f64@f (lambda (ag3f66@x) ((lambda (ag3f68@t) ((lambda (ag3f6a@ls/false) (if ag3f6a@ls/false (apply (lambda (ag3f6c@version-spec*) (values '() (ag3f63@version-pred ag3f6c@version-spec*))) ag3f6a@ls/false) ((lambda (ag3f6e@t) ((lambda (ag3f70@ls/false) (if (and ag3f70@ls/false (apply (lambda (ag3f72@x ag3f73@x*) (ag3e91@idsyn? ag3f72@x)) ag3f70@ls/false)) (apply (lambda (ag3f76@x ag3f77@x*) (call-with-values (lambda () (ag3f64@f ag3f77@x*)) (lambda (ag3f7e@ag3f7b ag3f7f@ag3f7d) ((lambda (ag3f82@pred ag3f83@name) (values (cons (ag2be9@syntax->datum ag3f76@x) ag3f83@name) ag3f82@pred)) ag3f7f@ag3f7d ag3f7e@ag3f7b)))) ag3f70@ls/false) ((lambda (ag3f86@t) ((lambda (ag3f88@ls/false) (if ag3f88@ls/false (apply (lambda () (values '() (lambda (ag3f8a@x) '#t))) ag3f88@ls/false) ((lambda (ag3f8c@t) ((lambda (ag3f8e@ls/false) (if ag3f8e@ls/false (apply (lambda () (ag2be3@syntax-violation '#f '"invalid import spec" ag3f5c@spec)) ag3f8e@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3f8c@t))) (ag2b03@syntax-dispatch ag3f8c@t '_))) ag3f86@t))) (ag2b03@syntax-dispatch ag3f86@t '()))) ag3f6e@t))) (ag2b03@syntax-dispatch ag3f6e@t '(any . any)))) ag3f68@t))) (ag2b03@syntax-dispatch ag3f68@t '(each-any)))) ag3f66@x)))) ag3f64@f) ag3f5c@spec))) '#f '#f '#f))) (set! ag3ea1@import-library (lambda (ag3f4c@spec*) (call-with-values (lambda () (ag3e9f@parse-library-name ag3f4c@spec*)) (lambda (ag3f52@ag3f4f ag3f53@ag3f51) ((lambda (ag3f56@pred ag3f57@name) (begin (if (null? ag3f57@name) (ag2be3@syntax-violation 'import '"empty library name" ag3f4c@spec*) (void)) ((lambda (ag3f5a@lib) (begin (if (not ag3f5a@lib) (ag2be3@syntax-violation 'import '"cannot find library with required name" ag3f57@name) (void)) (if (not (ag3f56@pred (ag26f4@ag2515@library-version ag3f5a@lib))) (ag2be3@syntax-violation 'import '"library does not satisfy version specification" ag3f4c@spec* ag3f5a@lib) (void)) ((ag2b6f@imp-collector) ag3f5a@lib) (ag26fc@ag2525@library-subst ag3f5a@lib))) (ag271a@ag2561@find-library-by-name ag3f57@name)))) ag3f53@ag3f51 ag3f52@ag3f4f))))) (set! ag3ea3@get-import (lambda (ag3ebe@spec) ((lambda (ag3ec0@t) ((lambda (ag3ec2@ls/false) (if (and ag3ec2@ls/false (apply (lambda (ag3ec4@x ag3ec5@x*) (not (memq (ag2be9@syntax->datum ag3ec4@x) '(for rename except only prefix library)))) ag3ec2@ls/false)) (apply (lambda (ag3ec8@x ag3ec9@x*) (ag3ea1@import-library (cons ag3ec8@x ag3ec9@x*))) ag3ec2@ls/false) ((lambda (ag3ecc@t) ((lambda (ag3ece@ls/false) (if (and ag3ece@ls/false (apply (lambda (ag3ed0@rename ag3ed1@isp ag3ed2@old* ag3ed3@new*) (and (eq? (ag2be9@syntax->datum ag3ed0@rename) 'rename) (for-all ag3e91@idsyn? ag3ed2@old*) (for-all ag3e91@idsyn? ag3ed3@new*))) ag3ece@ls/false)) (apply (lambda (ag3ed8@rename ag3ed9@isp ag3eda@old* ag3edb@new*) ((lambda (ag3ee0@subst ag3ee1@old* ag3ee2@new*) ((lambda (ag3ee6@old-label*) ((lambda (ag3ee8@subst) (ag3e95@merge-substs (map cons ag3ee2@new* ag3ee6@old-label*) ag3ee8@subst)) (ag3e9b@rem* ag3ee1@old* ag3ee0@subst))) (ag3e99@find* ag3ee1@old* ag3ee0@subst))) (ag3ea3@get-import ag3ed9@isp) (map ag2be9@syntax->datum ag3eda@old*) (map ag2be9@syntax->datum ag3edb@new*))) ag3ece@ls/false) ((lambda (ag3eea@t) ((lambda (ag3eec@ls/false) (if (and ag3eec@ls/false (apply (lambda (ag3eee@except ag3eef@isp ag3ef0@sym*) (and (eq? (ag2be9@syntax->datum ag3eee@except) 'except) (for-all ag3e91@idsyn? ag3ef0@sym*))) ag3eec@ls/false)) (apply (lambda (ag3ef4@except ag3ef5@isp ag3ef6@sym*) ((lambda (ag3efa@subst) (ag3e9b@rem* (map ag2be9@syntax->datum ag3ef6@sym*) ag3efa@subst)) (ag3ea3@get-import ag3ef5@isp))) ag3eec@ls/false) ((lambda (ag3efc@t) ((lambda (ag3efe@ls/false) (if (and ag3efe@ls/false (apply (lambda (ag3f00@only ag3f01@isp ag3f02@sym*) (and (eq? (ag2be9@syntax->datum ag3f00@only) 'only) (for-all ag3e91@idsyn? ag3f02@sym*))) ag3efe@ls/false)) (apply (lambda (ag3f06@only ag3f07@isp ag3f08@sym*) ((lambda (ag3f0c@subst ag3f0d@sym*) ((lambda (ag3f10@sym*) ((lambda (ag3f12@lab*) (map cons ag3f10@sym* ag3f12@lab*)) (ag3e99@find* ag3f10@sym* ag3f0c@subst))) (ag3e9d@remove-dups ag3f0d@sym*))) (ag3ea3@get-import ag3f07@isp) (map ag2be9@syntax->datum ag3f08@sym*))) ag3efe@ls/false) ((lambda (ag3f14@t) ((lambda (ag3f16@ls/false) (if (and ag3f16@ls/false (apply (lambda (ag3f18@prefix ag3f19@isp ag3f1a@p) (and (eq? (ag2be9@syntax->datum ag3f18@prefix) 'prefix) (ag3e91@idsyn? ag3f1a@p))) ag3f16@ls/false)) (apply (lambda (ag3f1e@prefix ag3f1f@isp ag3f20@p) ((lambda (ag3f24@subst ag3f25@prefix) (map (lambda (ag3f28@x) (cons (string->symbol (string-append ag3f25@prefix (symbol->string (car ag3f28@x)))) (cdr ag3f28@x))) ag3f24@subst)) (ag3ea3@get-import ag3f1f@isp) (symbol->string (ag2be9@syntax->datum ag3f20@p)))) ag3f16@ls/false) ((lambda (ag3f2a@t) ((lambda (ag3f2c@ls/false) (if (and ag3f2c@ls/false (apply (lambda (ag3f2e@library ag3f2f@spec*) (eq? (ag2be9@syntax->datum ag3f2e@library) 'library)) ag3f2c@ls/false)) (apply (lambda (ag3f32@library ag3f33@spec*) (ag3ea1@import-library ag3f33@spec*)) ag3f2c@ls/false) ((lambda (ag3f36@t) ((lambda (ag3f38@ls/false) (if (and ag3f38@ls/false (apply (lambda (ag3f3a@for ag3f3b@isp ag3f3c@rest) (eq? (ag2be9@syntax->datum ag3f3a@for) 'for)) ag3f38@ls/false)) (apply (lambda (ag3f40@for ag3f41@isp ag3f42@rest) (ag3ea3@get-import ag3f41@isp)) ag3f38@ls/false) ((lambda (ag3f46@t) ((lambda (ag3f48@ls/false) (if ag3f48@ls/false (apply (lambda (ag3f4a@spec) (ag2be3@syntax-violation 'import '"invalid import spec" ag3f4a@spec)) ag3f48@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag3f46@t))) (ag2b03@syntax-dispatch ag3f46@t 'any))) ag3f36@t))) (ag2b03@syntax-dispatch ag3f36@t '(any any . any)))) ag3f2a@t))) (ag2b03@syntax-dispatch ag3f2a@t '(any each-any)))) ag3f14@t))) (ag2b03@syntax-dispatch ag3f14@t '(any any any)))) ag3efc@t))) (ag2b03@syntax-dispatch ag3efc@t '(any any . each-any)))) ag3eea@t))) (ag2b03@syntax-dispatch ag3eea@t '(any any . each-any)))) ag3ecc@t))) (ag2b03@syntax-dispatch ag3ecc@t '(any any . #(each (any any)))))) ag3ec0@t))) (ag2b03@syntax-dispatch ag3ec0@t '(any . each-any)))) ag3ebe@spec))) (set! ag3ea5@add-imports! (lambda (ag3eae@imp ag3eaf@h) ((lambda (ag3eb2@subst) (for-each (lambda (ag3eb4@x) ((lambda (ag3eb6@name ag3eb7@label) ((lambda (ag3eba@t) (if ag3eba@t ((lambda (ag3ebc@l) (if (not (eq? ag3ebc@l ag3eb7@label)) (ag3e93@dup-error ag3eb6@name) (void))) ag3eba@t) (hashtable-set! ag3eaf@h ag3eb6@name ag3eb7@label))) (hashtable-ref ag3eaf@h ag3eb6@name '#f))) (car ag3eb4@x) (cdr ag3eb4@x))) ag3eb2@subst)) (ag3ea3@get-import ag3eae@imp)))) (lambda (ag3ea6@imp*) ((letrec ((ag3ea8@f (lambda (ag3eaa@imp* ag3eab@h) (if (null? ag3eaa@imp*) (hashtable-entries ag3eab@h) (begin (ag3ea5@add-imports! (car ag3eaa@imp*) ag3eab@h) (ag3ea8@f (cdr ag3eaa@imp*) ag3eab@h)))))) ag3ea8@f) ag3ea6@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! ag45c7@ag2b65@parse-import-spec* ag2b65@parse-import-spec*)) (begin (set! ag2b67@make-top-rib (lambda (ag409c@names ag409d@labels) ((lambda (ag40a0@rib) (begin (vector-for-each (lambda (ag40a2@name ag40a3@label) (begin (if (not (symbol? ag40a2@name)) (error 'make-top-rib '"BUG: not a symbol" ag40a2@name) (void)) (ag28b6@extend-rib/nc! ag40a0@rib (make-simple-struct 'stx '5 (list ag40a2@name ag2882@top-mark* '() '())) ag40a3@label))) ag409c@names ag409d@labels) ag40a0@rib)) (ag28b2@make-empty-rib)))) (set! ag45c8@ag2b67@make-top-rib ag2b67@make-top-rib)) (begin (set! ag2b69@make-collector (lambda () ((lambda (ag40a6@ls) (lambda ag40aa ((lambda (ag40ab) (if (= ag40ab '0) (apply (lambda () ag40a6@ls) ag40aa) (if (= ag40ab '1) (apply (lambda (ag40a8@x) (set! ag40a6@ls (ag287b@set-cons ag40a8@x ag40a6@ls))) ag40aa) (error 'apply '"invalid arg count")))) (length ag40aa)))) '()))) (set! ag45c9@ag2b69@make-collector ag2b69@make-collector)) (begin (set! ag2b6b@inv-collector (ag2455@ag2334@make-parameter (lambda ag40ac@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (ag40ae@x) (begin (if (not (procedure? ag40ae@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" ag40ae@x) (void)) ag40ae@x)))) (set! ag45ca@ag2b6b@inv-collector ag2b6b@inv-collector)) (begin (set! ag2b6d@vis-collector (ag2455@ag2334@make-parameter (lambda ag40b0@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (ag40b2@x) (begin (if (not (procedure? ag40b2@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" ag40b2@x) (void)) ag40b2@x)))) (set! ag45cb@ag2b6d@vis-collector ag2b6d@vis-collector)) (begin (set! ag2b6f@imp-collector (ag2455@ag2334@make-parameter (lambda ag40b4@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (ag40b6@x) (begin (if (not (procedure? ag40b6@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" ag40b6@x) (void)) ag40b6@x)))) (set! ag45cc@ag2b6f@imp-collector ag2b6f@imp-collector)) (begin (set! ag2b71@chi-library-internal (lambda (ag40b8@e* ag40b9@rib ag40ba@top?) (call-with-values (lambda () (ag2b5b@chi-body* ag40b8@e* '() '() '() '() '() '() '() ag40b9@rib ag40ba@top?)) (lambda (ag40ce@ag40bf ag40cf@ag40c1 ag40d0@ag40c3 ag40d1@ag40c5 ag40d2@ag40c7 ag40d3@ag40c9 ag40d4@ag40cb ag40d5@ag40cd) ((lambda (ag40de@exp* ag40df@_kwd* ag40e0@mod** ag40e1@rhs* ag40e2@lex* ag40e3@mr ag40e4@r ag40e5@e*) (values (append (apply append (reverse ag40e0@mod**)) ag40e5@e*) ag40e4@r ag40e3@mr (reverse ag40e2@lex*) (reverse ag40e1@rhs*) ag40de@exp*)) ag40d5@ag40cd ag40d4@ag40cb ag40d3@ag40c9 ag40d2@ag40c7 ag40d1@ag40c5 ag40d0@ag40c3 ag40cf@ag40c1 ag40ce@ag40bf))))) (set! ag45cd@ag2b71@chi-library-internal ag2b71@chi-library-internal)) (begin (set! ag2b73@chi-interaction-expr (lambda (ag40ee@e ag40ef@rib ag40f0@r) (call-with-values (lambda () (ag2b5b@chi-body* (list ag40ee@e) ag40f0@r ag40f0@r '() '() '() '() '() ag40ef@rib '#t)) (lambda (ag4104@ag40f5 ag4105@ag40f7 ag4106@ag40f9 ag4107@ag40fb ag4108@ag40fd ag4109@ag40ff ag410a@ag4101 ag410b@ag4103) ((lambda (ag4114@_exp* ag4115@_kwd* ag4116@mod** ag4117@rhs* ag4118@lex* ag4119@mr ag411a@r ag411b@e*) ((lambda (ag4124@e*) ((lambda (ag4126@e) (values ag4126@e ag411a@r)) (if (null? ag4124@e*) (ag2866@ag27ce@build-void) (if (null? (cdr ag4124@e*)) (car ag4124@e*) (ag2865@ag27cc@build-sequence '#f ag4124@e*))))) (ag2b33@expand-interaction-rhs*/init* (reverse ag4118@lex*) (reverse ag4117@rhs*) (append (apply append (reverse ag4116@mod**)) ag411b@e*) ag411a@r ag4119@mr))) ag410b@ag4103 ag410a@ag4101 ag4109@ag40ff ag4108@ag40fd ag4107@ag40fb ag4106@ag40f9 ag4105@ag40f7 ag4104@ag40f5))))) (set! ag45ce@ag2b73@chi-interaction-expr ag2b73@chi-interaction-expr)) (begin (set! ag2b75@library-body-expander (lambda (ag4128@name ag4129@main-exp* ag412a@imp* ag412b@b* ag412c@top?) ((lambda (ag4133@itc) (begin (set! ag4133@itc (ag2b69@make-collector)) ((lambda (ag413c@ag4135 ag413d@ag4137 ag413e@ag4139 ag413f@ag413b) ((lambda (ag4144@swap) (dynamic-wind ag4144@swap (lambda () (call-with-values (lambda () (ag2b65@parse-import-spec* ag412a@imp*)) (lambda (ag414a@ag4147 ag414b@ag4149) ((lambda (ag414e@subst-labels ag414f@subst-names) ((lambda (ag4152@rib) ((lambda (ag4155@wrap) (begin (set! ag4155@wrap (lambda (ag41d0@x) (make-simple-struct 'stx '5 (list ag41d0@x ag2882@top-mark* (list ag4152@rib) '())))) ((lambda (ag4156@b* ag4157@main-exp* ag4158@rtc ag4159@vtc) ((lambda (ag4166@ag415f ag4167@ag4161 ag4168@ag4163 ag4169@ag4165) ((lambda (ag416e@swap) (dynamic-wind ag416e@swap (lambda () (call-with-values (lambda () (ag2b71@chi-library-internal ag4156@b* ag4152@rib ag412c@top?)) (lambda (ag417c@ag4171 ag417d@ag4173 ag417e@ag4175 ag417f@ag4177 ag4180@ag4179 ag4181@ag417b) ((lambda (ag4188@internal-exp* ag4189@rhs* ag418a@lex* ag418b@mr ag418c@r ag418d@init*) (call-with-values (lambda () (ag2b5f@parse-exports (append ag4157@main-exp* ag4188@internal-exp*))) (lambda (ag4198@ag4195 ag4199@ag4197) ((lambda (ag419c@exp-id* ag419d@exp-name*) (begin (ag28ba@seal-rib! ag4152@rib) ((lambda (ag41a0@init*) ((lambda (ag41a2@rhs*) ((lambda () (begin (ag28bc@unseal-rib! ag4152@rib) ((lambda (ag41a4@loc* ag41a5@export-subst) ((lambda (ag41a9@errstr) (begin (set! ag41a9@errstr '"attempt to export mutated variable") (call-with-values (lambda () (ag2bcf@make-export-env/macros ag418a@lex* ag41a4@loc* ag418c@r)) (lambda (ag41b0@ag41ab ag41b1@ag41ad ag41b2@ag41af) ((lambda (ag41b6@macro* ag41b7@global* ag41b8@export-env) (begin (for-each (lambda (ag41bc@s) ((lambda (ag41be@name ag41bf@label) ((lambda (ag41c2@p) (if ag41c2@p ((lambda (ag41c4@b) ((lambda (ag41c6@type) (if (eq? ag41c6@type 'mutable) (ag2be3@syntax-violation 'export ag41a9@errstr ag41be@name) (void))) (car ag41c4@b))) (cdr ag41c2@p)) (void))) (assq ag41bf@label ag41b8@export-env))) (car ag41bc@s) (cdr ag41bc@s))) ag41a5@export-subst) ((lambda (ag41c8@invoke-body ag41c9@invoke-definitions) (values (ag4133@itc) (ag4158@rtc) (ag4159@vtc) (ag2865@ag27cc@build-sequence '#f (append ag41c9@invoke-definitions (list ag41c8@invoke-body))) ag41b6@macro* ag41a5@export-subst ag41b8@export-env)) (ag2869@ag27d4@build-library-letrec* '#f ag4128@name ag418a@lex* ag41a4@loc* ag41a2@rhs* (if (null? ag41a0@init*) (ag2866@ag27ce@build-void) (ag2865@ag27cc@build-sequence '#f ag41a0@init*))) (map ag2861@ag2729@build-global-define (map cdr ag41b7@global*))))) ag41b2@ag41af ag41b1@ag41ad ag41b0@ag41ab))))) '#f)) (map ag2888@gen-global ag418a@lex*) (ag2bcd@make-export-subst ag419d@exp-name* ag419c@exp-id*)))))) (ag2b35@chi-rhs* ag4189@rhs* ag418c@r ag418b@mr))) (ag2b21@chi-expr* ag418d@init* ag418c@r ag418b@mr)))) ag4199@ag4197 ag4198@ag4195)))) ag4181@ag417b ag4180@ag4179 ag417f@ag4177 ag417e@ag4175 ag417d@ag4173 ag417c@ag4171)))) ag416e@swap)) (lambda () (begin ((lambda (ag41cc@t) (begin (ag4166@ag415f ag4168@ag4163) (set! ag4168@ag4163 ag41cc@t))) (ag4166@ag415f)) ((lambda (ag41ce@t) (begin (ag4167@ag4161 ag4169@ag4165) (set! ag4169@ag4165 ag41ce@t))) (ag4167@ag4161)))))) ag2b6b@inv-collector ag2b6d@vis-collector ag4158@rtc ag4159@vtc)) (map ag4155@wrap ag412b@b*) (map ag4155@wrap ag4129@main-exp*) (ag2b69@make-collector) (ag2b69@make-collector)))) '#f)) (ag2b67@make-top-rib ag414f@subst-names ag414e@subst-labels))) ag414b@ag4149 ag414a@ag4147)))) ag4144@swap)) (lambda () (begin ((lambda (ag41d2@t) (begin (ag413c@ag4135 ag413e@ag4139) (set! ag413e@ag4139 ag41d2@t))) (ag413c@ag4135)) ((lambda (ag41d4@t) (begin (ag413d@ag4137 ag413f@ag413b) (set! ag413f@ag413b ag41d4@t))) (ag413d@ag4137)))))) ag2b6f@imp-collector ag2bf3@top-level-context ag4133@itc '#f))) '#f))) (set! ag45cf@ag2b75@library-body-expander ag2b75@library-body-expander)) (begin (set! ag2b77@core-library-expander (lambda (ag41d6@e ag41d7@verify-name) (call-with-values (lambda () (ag2b63@parse-library ag41d6@e)) (lambda (ag41e2@ag41db ag41e3@ag41dd ag41e4@ag41df ag41e5@ag41e1) ((lambda (ag41ea@b* ag41eb@imp* ag41ec@exp* ag41ed@name*) (call-with-values (lambda () (ag2b61@parse-library-name ag41ed@name*)) (lambda (ag41f6@ag41f3 ag41f7@ag41f5) ((lambda (ag41fa@ver ag41fb@name) (begin (ag41d7@verify-name ag41fb@name) (call-with-values (lambda () (ag2b75@library-body-expander ag41fb@name ag41ec@exp* ag41eb@imp* ag41ea@b* '#f)) (lambda (ag420c@ag41ff ag420d@ag4201 ag420e@ag4203 ag420f@ag4205 ag4210@ag4207 ag4211@ag4209 ag4212@ag420b) ((lambda (ag421a@export-env ag421b@export-subst ag421c@visit-code ag421d@invoke-code ag421e@visit-req* ag421f@invoke-req* ag4220@imp*) (values ag41fb@name ag41fa@ver ag4220@imp* ag421f@invoke-req* ag421e@visit-req* ag421d@invoke-code ag421c@visit-code ag421b@export-subst ag421a@export-env)) ag4212@ag420b ag4211@ag4209 ag4210@ag4207 ag420f@ag4205 ag420e@ag4203 ag420d@ag4201 ag420c@ag41ff))))) ag41f7@ag41f5 ag41f6@ag41f3)))) ag41e5@ag41e1 ag41e4@ag41df ag41e3@ag41dd ag41e2@ag41db))))) (set! ag45d0@ag2b77@core-library-expander ag2b77@core-library-expander)) (begin (set! ag2b79@parse-top-level-program (lambda (ag4228@e*) ((lambda (ag422a@t) ((lambda (ag422c@ls/false) (if (and ag422c@ls/false (apply (lambda (ag422e@import ag422f@imp* ag4230@b*) (eq? (ag2be9@syntax->datum ag422e@import) 'import)) ag422c@ls/false)) (apply (lambda (ag4234@import ag4235@imp* ag4236@b*) (values ag4235@imp* ag4236@b*)) ag422c@ls/false) ((lambda (ag423a@t) ((lambda (ag423c@ls/false) (if (and ag423c@ls/false (apply (lambda (ag423e@import ag423f@x ag4240@y) (eq? (ag2be9@syntax->datum ag423e@import) 'import)) ag423c@ls/false)) (apply (lambda (ag4244@import ag4245@x ag4246@y) (ag2be3@syntax-violation 'expander '"invalid syntax of top-level program" (ag28f8@syntax-car ag4228@e*))) ag423c@ls/false) ((lambda (ag424a@t) ((lambda (ag424c@ls/false) (if ag424c@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) ag424c@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag424a@t))) (ag2b03@syntax-dispatch ag424a@t '_))) ag423a@t))) (ag2b03@syntax-dispatch ag423a@t '((any . any) . any)))) ag422a@t))) (ag2b03@syntax-dispatch ag422a@t '((any . each-any) . each-any)))) ag4228@e*))) (set! ag45d1@ag2b79@parse-top-level-program ag2b79@parse-top-level-program)) (begin (set! ag2b7b@top-level-expander (lambda (ag424e@e*) (call-with-values (lambda () (ag2b79@parse-top-level-program ag424e@e*)) (lambda (ag4254@ag4251 ag4255@ag4253) ((lambda (ag4258@b* ag4259@imp*) (call-with-values (lambda () (ag2b75@library-body-expander '() '() ag4259@imp* ag4258@b* '#t)) (lambda (ag426a@ag425d ag426b@ag425f ag426c@ag4261 ag426d@ag4263 ag426e@ag4265 ag426f@ag4267 ag4270@ag4269) ((lambda (ag4278@export-env ag4279@export-subst ag427a@visit-code ag427b@invoke-code ag427c@visit-req* ag427d@invoke-req* ag427e@imp*) (values ag427d@invoke-req* ag427b@invoke-code)) ag4270@ag4269 ag426f@ag4267 ag426e@ag4265 ag426d@ag4263 ag426c@ag4261 ag426b@ag425f ag426a@ag425d)))) ag4255@ag4253 ag4254@ag4251))))) (set! ag45d2@ag2b7b@top-level-expander ag2b7b@top-level-expander)) (begin (set! ag2b7d@rp (ag2452@ag232e@make-record-printer 'env (lambda (ag4286@x ag4287@p ag4288@wr) (display '"#<environment>" ag4287@p)))) (set! ag45d3@ag2b7d@rp ag2b7d@rp)) (begin (set! ag2b87@env? (lambda (ag428c@x) (and (simple-struct? ag428c@x) (eq? (simple-struct-name ag428c@x) 'env)))) (set! ag45d4@ag2b87@env? ag2b87@env?)) (begin (set! ag2b89@env-names (lambda (ag428e@x) (simple-struct-ref ag428e@x '0))) (set! ag45d5@ag2b89@env-names ag2b89@env-names)) (begin (set! ag2b8b@set-env-names! (lambda (ag4290@x ag4291@val) (simple-struct-set! ag4290@x '0 ag4291@val))) (set! ag45d6@ag2b8b@set-env-names! ag2b8b@set-env-names!)) (begin (set! ag2b8d@env-labels (lambda (ag4294@x) (simple-struct-ref ag4294@x '1))) (set! ag45d7@ag2b8d@env-labels ag2b8d@env-labels)) (begin (set! ag2b8f@set-env-labels! (lambda (ag4296@x ag4297@val) (simple-struct-set! ag4296@x '1 ag4297@val))) (set! ag45d8@ag2b8f@set-env-labels! ag2b8f@set-env-labels!)) (begin (set! ag2b91@env-itc (lambda (ag429a@x) (simple-struct-ref ag429a@x '2))) (set! ag45d9@ag2b91@env-itc ag2b91@env-itc)) (begin (set! ag2b93@set-env-itc! (lambda (ag429c@x ag429d@val) (simple-struct-set! ag429c@x '2 ag429d@val))) (set! ag45da@ag2b93@set-env-itc! ag2b93@set-env-itc!)) (begin (set! ag2b95@dummy '3) (set! ag45db@ag2b95@dummy ag2b95@dummy)) (begin (set! ag2b97@rp (ag2452@ag232e@make-record-printer 'interaction-env (lambda (ag42a0@x ag42a1@p ag42a2@wr) (display '"#<environment>" ag42a1@p)))) (set! ag45dc@ag2b97@rp ag2b97@rp)) (begin (set! ag2ba1@interaction-env? (lambda (ag42a6@x) (and (simple-struct? ag42a6@x) (eq? (simple-struct-name ag42a6@x) 'interaction-env)))) (set! ag45dd@ag2ba1@interaction-env? ag2ba1@interaction-env?)) (begin (set! ag2ba3@interaction-env-rib (lambda (ag42a8@x) (simple-struct-ref ag42a8@x '0))) (set! ag45de@ag2ba3@interaction-env-rib ag2ba3@interaction-env-rib)) (begin (set! ag2ba5@set-interaction-env-rib! (lambda (ag42aa@x ag42ab@val) (simple-struct-set! ag42aa@x '0 ag42ab@val))) (set! ag45df@ag2ba5@set-interaction-env-rib! ag2ba5@set-interaction-env-rib!)) (begin (set! ag2ba7@interaction-env-r (lambda (ag42ae@x) (simple-struct-ref ag42ae@x '1))) (set! ag45e0@ag2ba7@interaction-env-r ag2ba7@interaction-env-r)) (begin (set! ag2ba9@set-interaction-env-r! (lambda (ag42b0@x ag42b1@val) (simple-struct-set! ag42b0@x '1 ag42b1@val))) (set! ag45e1@ag2ba9@set-interaction-env-r! ag2ba9@set-interaction-env-r!)) (begin (set! ag2bab@interaction-env-locs (lambda (ag42b4@x) (simple-struct-ref ag42b4@x '2))) (set! ag45e2@ag2bab@interaction-env-locs ag2bab@interaction-env-locs)) (begin (set! ag2bad@set-interaction-env-locs! (lambda (ag42b6@x ag42b7@val) (simple-struct-set! ag42b6@x '2 ag42b7@val))) (set! ag45e3@ag2bad@set-interaction-env-locs! ag2bad@set-interaction-env-locs!)) (begin (set! ag2baf@dummy '3) (set! ag45e4@ag2baf@dummy ag2baf@dummy)) (begin (set! ag2bb1@interaction-environment-symbols (lambda () (ag2bb9@environment-symbols (ag2bf1@interaction-environment)))) (set! ag45e5@ag2bb1@interaction-environment-symbols ag2bb1@interaction-environment-symbols)) (begin (set! ag2bb3@environment-bindings (lambda (ag42ba@e) (vector->list (vector-map (lambda (ag42bc@name ag42bd@label) (ag2bb5@parse-binding (cons ag42bc@name (ag2720@ag256d@imported-label->binding ag42bd@label)))) (ag2b89@env-names ag42ba@e) (ag2b8d@env-labels ag42ba@e))))) (set! ag45e6@ag2bb3@environment-bindings ag2bb3@environment-bindings)) (begin (set! ag2bb5@parse-binding (lambda (ag42c0@b) (cons (car ag42c0@b) ((lambda (ag42c2@t) (if (memv ag42c2@t '(core-prim global)) 'procedure (if (memv ag42c2@t '(core-macro macro global-macro)) 'syntax (if (memv ag42c2@t '($core-rtd)) 'record (if (eq? (car ag42c0@b) (cadr ag42c0@b)) 'syntax 'unknown))))) (cadr ag42c0@b))))) (set! ag45e7@ag2bb5@parse-binding ag2bb5@parse-binding)) (begin (set! ag2bb7@environment? (lambda (ag42c4@x) (or (ag2b87@env? ag42c4@x) (ag2ba1@interaction-env? ag42c4@x)))) (set! ag45e8@ag2bb7@environment? ag2bb7@environment?)) (begin (set! ag2bb9@environment-symbols (lambda (ag42c6@x) (if (ag2b87@env? ag42c6@x) (vector->list (ag2b89@env-names ag42c6@x)) (if (ag2ba1@interaction-env? ag42c6@x) (map values (ag289c@rib-sym* (ag2ba3@interaction-env-rib ag42c6@x))) (assertion-violation 'environment-symbols '"not an environment" ag42c6@x))))) (set! ag45e9@ag2bb9@environment-symbols ag2bb9@environment-symbols)) (begin (set! ag2bbb@environment (lambda ag42c8@imp* ((lambda (ag42ca@itc) ((lambda (ag42d0@ag42cd ag42d1@ag42cf) ((lambda (ag42d4@swap) (dynamic-wind ag42d4@swap (lambda () (call-with-values (lambda () (ag2b65@parse-import-spec* ag42c8@imp*)) (lambda (ag42da@ag42d7 ag42db@ag42d9) ((lambda (ag42de@subst-labels ag42df@subst-names) (make-simple-struct 'env '4 (list ag42df@subst-names ag42de@subst-labels ag42ca@itc))) ag42db@ag42d9 ag42da@ag42d7)))) ag42d4@swap)) (lambda () ((lambda (ag42e2@t) (begin (ag42d0@ag42cd ag42d1@ag42cf) (set! ag42d1@ag42cf ag42e2@t))) (ag42d0@ag42cd))))) ag2b6f@imp-collector ag42ca@itc)) (ag2b69@make-collector)))) (set! ag45ea@ag2bbb@environment ag2bbb@environment)) (begin (set! ag2bbd@null-environment (lambda (ag42e4@n) (begin (if (not (eqv? ag42e4@n '5)) (assertion-violation 'null-environment '"not 5" ag42e4@n) (void)) (ag2bbb@environment '(psyntax null-environment-5))))) (set! ag45eb@ag2bbd@null-environment ag2bbd@null-environment)) (begin (set! ag2bbf@scheme-report-environment (lambda (ag42e6@n) (begin (if (not (eqv? ag42e6@n '5)) (assertion-violation 'scheme-report-environment '"not 5" ag42e6@n) (void)) (ag2bbb@environment '(psyntax scheme-report-environment-5))))) (set! ag45ec@ag2bbf@scheme-report-environment ag2bbf@scheme-report-environment)) (begin (set! ag2bc1@expand (lambda (ag42e8@x ag42e9@env) (if (ag2b87@env? ag42e9@env) ((lambda (ag42ec@rib) ((lambda (ag42ee@x ag42ef@itc ag42f0@rtc ag42f1@vtc) ((lambda (ag42f6@x) (begin (ag28ba@seal-rib! ag42ec@rib) (values ag42f6@x (ag42f0@rtc)))) ((lambda (ag4308@ag42f9 ag4309@ag42fb ag430a@ag42fd ag430b@ag42ff ag430c@ag4301 ag430d@ag4303 ag430e@ag4305 ag430f@ag4307) ((lambda (ag4318@swap) (dynamic-wind ag4318@swap (lambda () (ag2b25@chi-expr ag42ee@x '() '())) ag4318@swap)) (lambda () (begin ((lambda (ag431a@t) (begin (ag4308@ag42f9 ag430c@ag4301) (set! ag430c@ag4301 ag431a@t))) (ag4308@ag42f9)) ((lambda (ag431c@t) (begin (ag4309@ag42fb ag430d@ag4303) (set! ag430d@ag4303 ag431c@t))) (ag4309@ag42fb)) ((lambda (ag431e@t) (begin (ag430a@ag42fd ag430e@ag4305) (set! ag430e@ag4305 ag431e@t))) (ag430a@ag42fd)) ((lambda (ag4320@t) (begin (ag430b@ag42ff ag430f@ag4307) (set! ag430f@ag4307 ag4320@t))) (ag430b@ag42ff)))))) ag2bf3@top-level-context ag2b6b@inv-collector ag2b6d@vis-collector ag2b6f@imp-collector '#f ag42f0@rtc ag42f1@vtc ag42ef@itc))) (make-simple-struct 'stx '5 (list ag42e8@x ag2882@top-mark* (list ag42ec@rib) '())) (ag2b91@env-itc ag42e9@env) (ag2b69@make-collector) (ag2b69@make-collector))) (ag2b67@make-top-rib (ag2b89@env-names ag42e9@env) (ag2b8d@env-labels ag42e9@env))) (if (ag2ba1@interaction-env? ag42e9@env) ((lambda (ag4322@rib ag4323@r ag4324@rtc) ((lambda (ag4328@x) (call-with-values (lambda () ((lambda (ag433e@ag432f ag433f@ag4331 ag4340@ag4333 ag4341@ag4335 ag4342@ag4337 ag4343@ag4339 ag4344@ag433b ag4345@ag433d) ((lambda (ag434e@swap) (dynamic-wind ag434e@swap (lambda () (ag2b73@chi-interaction-expr ag4328@x ag4322@rib ag4323@r)) ag434e@swap)) (lambda () (begin ((lambda (ag4350@t) (begin (ag433e@ag432f ag4342@ag4337) (set! ag4342@ag4337 ag4350@t))) (ag433e@ag432f)) ((lambda (ag4352@t) (begin (ag433f@ag4331 ag4343@ag4339) (set! ag4343@ag4339 ag4352@t))) (ag433f@ag4331)) ((lambda (ag4354@t) (begin (ag4340@ag4333 ag4344@ag433b) (set! ag4344@ag433b ag4354@t))) (ag4340@ag4333)) ((lambda (ag4356@t) (begin (ag4341@ag4335 ag4345@ag433d) (set! ag4345@ag433d ag4356@t))) (ag4341@ag4335)))))) ag2bf3@top-level-context ag2b6b@inv-collector ag2b6d@vis-collector ag2b6f@imp-collector ag42e9@env ag4324@rtc (ag2b69@make-collector) (ag2b69@make-collector))) (lambda (ag4358@ag432b ag4359@ag432d) ((lambda (ag435c@r^ ag435d@e) (begin (ag2ba9@set-interaction-env-r! ag42e9@env ag435c@r^) (values ag435d@e (ag4324@rtc)))) ag4359@ag432d ag4358@ag432b)))) (make-simple-struct 'stx '5 (list ag42e8@x ag2882@top-mark* (list ag4322@rib) '())))) (ag2ba3@interaction-env-rib ag42e9@env) (ag2ba7@interaction-env-r ag42e9@env) (ag2b69@make-collector)) (assertion-violation 'expand '"not an environment" ag42e9@env))))) (set! ag45ed@ag2bc1@expand ag2bc1@expand)) (begin (set! ag2bc3@eval (lambda (ag4360@x ag4361@env) (begin (if (not (ag2bb7@environment? ag4361@env)) (error 'eval '"not an environment" ag4361@env) (void)) (call-with-values (lambda () (ag2bc1@expand ag4360@x ag4361@env)) (lambda (ag4368@ag4365 ag4369@ag4367) ((lambda (ag436c@invoke-req* ag436d@x) (begin (for-each ag2721@ag256f@invoke-library ag436c@invoke-req*) (eval-core (ag24ab@ag2463@expanded->core ag436d@x)))) ag4369@ag4367 ag4368@ag4365)))))) (set! ag45ee@ag2bc3@eval ag2bc3@eval)) (begin (set! ag2bc5@library-expander (lambda ag43de ((lambda (ag43df) (if (= ag43df '3) (apply (lambda (ag4370@x ag4371@filename ag4372@verify-name) ((lambda (ag4377@build-visit-code ag4379@visit!) (begin (set! ag4377@build-visit-code (lambda (ag43cc@macro*) (if (null? ag43cc@macro*) (ag2866@ag27ce@build-void) (ag2865@ag27cc@build-sequence '#f (map (lambda (ag43ce@x) ((lambda (ag43d0@loc ag43d1@src) (list 'set! ag43d0@loc ag43d1@src)) (car ag43ce@x) (cddr ag43ce@x))) ag43cc@macro*))))) (set! ag4379@visit! (lambda (ag43c4@macro*) (for-each (lambda (ag43c6@x) ((lambda (ag43c8@loc ag43c9@proc) (set-symbol-value! ag43c8@loc ag43c9@proc)) (car ag43c6@x) (cadr ag43c6@x))) ag43c4@macro*))) (call-with-values (lambda () (ag2b77@core-library-expander ag4370@x ag4372@verify-name)) (lambda (ag438c@ag437b ag438d@ag437d ag438e@ag437f ag438f@ag4381 ag4390@ag4383 ag4391@ag4385 ag4392@ag4387 ag4393@ag4389 ag4394@ag438b) ((lambda (ag439e@export-env ag439f@export-subst ag43a0@macro* ag43a1@invoke-code ag43a2@vis* ag43a3@inv* ag43a4@imp* ag43a5@ver ag43a6@name) ((lambda (ag43b0@id ag43b1@name ag43b2@ver ag43b3@imp* ag43b4@vis* ag43b5@inv* ag43b6@visit-proc ag43b7@invoke-proc ag43b8@visit-code ag43b9@invoke-code) (begin (ag271f@ag256b@install-library ag43b0@id ag43b1@name ag43b2@ver ag43b3@imp* ag43b4@vis* ag43b5@inv* ag439f@export-subst ag439e@export-env ag43b6@visit-proc ag43b7@invoke-proc ag43b8@visit-code ag43b9@invoke-code '#t ag4371@filename) (values ag43b0@id ag43b1@name ag43b2@ver ag43b3@imp* ag43b4@vis* ag43b5@inv* ag43b9@invoke-code ag43b8@visit-code ag439f@export-subst ag439e@export-env))) (gensym) ag43a6@name ag43a5@ver (map ag2725@ag2577@library-spec ag43a4@imp*) (map ag2725@ag2577@library-spec ag43a2@vis*) (map ag2725@ag2577@library-spec ag43a3@inv*) (lambda () (ag4379@visit! ag43a0@macro*)) (lambda () (eval-core (ag24ab@ag2463@expanded->core ag43a1@invoke-code))) (ag4377@build-visit-code ag43a0@macro*) ag43a1@invoke-code)) ag4394@ag438b ag4393@ag4389 ag4392@ag4387 ag4391@ag4385 ag4390@ag4383 ag438f@ag4381 ag438e@ag437f ag438d@ag437d ag438c@ag437b))))) '#f '#f)) ag43de) (if (= ag43df '2) (apply (lambda (ag43d4@x ag43d5@filename) (ag2bc5@library-expander ag43d4@x ag43d5@filename (lambda (ag43d8@x) (values)))) ag43de) (if (= ag43df '1) (apply (lambda (ag43da@x) (ag2bc5@library-expander ag43da@x '#f (lambda (ag43dc@x) (values)))) ag43de) (error 'apply '"invalid arg count"))))) (length ag43de)))) (set! ag45ef@ag2bc5@library-expander ag2bc5@library-expander)) (begin (set! ag2bc7@boot-library-expand (lambda (ag43e0@x) (call-with-values (lambda () (ag2bc5@library-expander ag43e0@x)) (lambda (ag43f6@ag43e3 ag43f7@ag43e5 ag43f8@ag43e7 ag43f9@ag43e9 ag43fa@ag43eb ag43fb@ag43ed ag43fc@ag43ef ag43fd@ag43f1 ag43fe@ag43f3 ag43ff@ag43f5) ((lambda (ag440a@export-env ag440b@export-subst ag440c@visit-code ag440d@invoke-code ag440e@inv* ag440f@vis* ag4410@imp* ag4411@ver ag4412@name ag4413@id) (values ag4412@name ag440d@invoke-code ag440b@export-subst ag440a@export-env)) ag43ff@ag43f5 ag43fe@ag43f3 ag43fd@ag43f1 ag43fc@ag43ef ag43fb@ag43ed ag43fa@ag43eb ag43f9@ag43e9 ag43f8@ag43e7 ag43f7@ag43e5 ag43f6@ag43e3))))) (set! ag45f0@ag2bc7@boot-library-expand ag2bc7@boot-library-expand)) (begin (set! ag2bc9@rev-map-append (lambda (ag441e@f ag441f@ls ag4420@ac) (if (null? ag441f@ls) ag4420@ac (ag2bc9@rev-map-append ag441e@f (cdr ag441f@ls) (cons (ag441e@f (car ag441f@ls)) ag4420@ac))))) (set! ag45f1@ag2bc9@rev-map-append ag2bc9@rev-map-append)) (begin (set! ag2bcb@build-exports (lambda (ag4424@lex*+loc* ag4425@init*) (ag2865@ag27cc@build-sequence '#f (cons (ag2866@ag27ce@build-void) (ag2bc9@rev-map-append (lambda (ag4428@x) (list 'set! (cdr ag4428@x) (car ag4428@x))) ag4424@lex*+loc* ag4425@init*))))) (set! ag45f2@ag2bcb@build-exports ag2bcb@build-exports)) (begin (set! ag2bcd@make-export-subst (lambda (ag442a@name* ag442b@id*) (map (lambda (ag442e@name ag442f@id) ((lambda (ag4432@label) (begin (if (not ag4432@label) (ag2be3@syntax-violation '#f '"cannot export unbound identifier" ag442f@id) (void)) (cons ag442e@name ag4432@label))) (ag2914@id->label ag442f@id))) ag442a@name* ag442b@id*))) (set! ag45f3@ag2bcd@make-export-subst ag2bcd@make-export-subst)) (begin (set! ag2bcf@make-export-env/macros (lambda (ag4434@lex* ag4435@loc* ag4436@r) ((lambda (ag443b@lookup) (begin (set! ag443b@lookup (lambda (ag4458@x) ((letrec ((ag445a@f (lambda (ag445c@x ag445d@lex* ag445e@loc*) (if (pair? ag445d@lex*) (if (eq? ag445c@x (car ag445d@lex*)) (car ag445e@loc*) (ag445a@f ag445c@x (cdr ag445d@lex*) (cdr ag445e@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) ag445a@f) ag4458@x ag4434@lex* ag4435@loc*))) ((letrec ((ag443c@f (lambda (ag443e@r ag443f@env ag4440@global* ag4441@macro*) (if (null? ag443e@r) (values ag443f@env ag4440@global* ag4441@macro*) ((lambda (ag4446@x) ((lambda (ag4448@label ag4449@b) ((lambda (ag444c@t) (if (memv ag444c@t '(lexical)) ((lambda (ag444e@v) ((lambda (ag4450@loc ag4451@type) (ag443c@f (cdr ag443e@r) (cons (cons* ag4448@label ag4451@type ag4450@loc) ag443f@env) (cons (cons (ag2a8f@lexical-var ag444e@v) ag4450@loc) ag4440@global*) ag4441@macro*)) (ag443b@lookup (ag2a8f@lexical-var ag444e@v)) (if (ag2a91@lexical-mutable? ag444e@v) 'mutable 'global))) (ag291c@binding-value ag4449@b)) (if (memv ag444c@t '(local-macro)) ((lambda (ag4454@loc) (ag443c@f (cdr ag443e@r) (cons (cons* ag4448@label 'global-macro ag4454@loc) ag443f@env) ag4440@global* (cons (cons ag4454@loc (ag291c@binding-value ag4449@b)) ag4441@macro*))) (gensym)) (if (memv ag444c@t '(local-macro!)) ((lambda (ag4456@loc) (ag443c@f (cdr ag443e@r) (cons (cons* ag4448@label 'global-macro! ag4456@loc) ag443f@env) ag4440@global* (cons (cons ag4456@loc (ag291c@binding-value ag4449@b)) ag4441@macro*))) (gensym)) (if (memv ag444c@t '($rtd $module)) (ag443c@f (cdr ag443e@r) (cons ag4446@x ag443f@env) ag4440@global* ag4441@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (ag291a@binding-type ag4449@b) (ag291c@binding-value ag4449@b))))))) (ag291a@binding-type ag4449@b))) (car ag4446@x) (cdr ag4446@x))) (car ag443e@r)))))) ag443c@f) ag4436@r '() '() '()))) '#f))) (set! ag45f4@ag2bcf@make-export-env/macros ag2bcf@make-export-env/macros)) (begin (set! ag2bd1@generate-temporaries (lambda (ag4462@ls) ((lambda (ag4464@t) ((lambda (ag4466@ls/false) (if ag4466@ls/false (apply (lambda (ag4468@ls) (map (lambda (ag446a@x) (make-simple-struct 'stx '5 (list ((lambda (ag446c@x) (if (or (symbol? ag446c@x) (string? ag446c@x)) (gensym ag446c@x) (gensym 't))) (ag2be9@syntax->datum ag446a@x)) ag2882@top-mark* '() '()))) ag4468@ls)) ag4466@ls/false) ((lambda (ag446e@t) ((lambda (ag4470@ls/false) (if ag4470@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) ag4470@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag446e@t))) (ag2b03@syntax-dispatch ag446e@t '_))) ag4464@t))) (ag2b03@syntax-dispatch ag4464@t 'each-any))) ag4462@ls))) (set! ag45f5@ag2bd1@generate-temporaries ag2bd1@generate-temporaries)) (begin (set! ag2bd3@free-identifier=? (lambda (ag4472@x ag4473@y) (if (ag28fe@id? ag4472@x) (if (ag28fe@id? ag4473@y) (ag2904@free-id=? ag4472@x ag4473@y) (assertion-violation 'free-identifier=? '"not an identifier" ag4473@y)) (assertion-violation 'free-identifier=? '"not an identifier" ag4472@x)))) (set! ag45f6@ag2bd3@free-identifier=? ag2bd3@free-identifier=?)) (begin (set! ag2bd5@bound-identifier=? (lambda (ag4476@x ag4477@y) (if (ag28fe@id? ag4476@x) (if (ag28fe@id? ag4477@y) (ag2902@bound-id=? ag4476@x ag4477@y) (assertion-violation 'bound-identifier=? '"not an identifier" ag4477@y)) (assertion-violation 'bound-identifier=? '"not an identifier" ag4476@x)))) (set! ag45f7@ag2bd5@bound-identifier=? ag2bd5@bound-identifier=?)) (begin (set! ag2bd7@make-source-condition (lambda (ag447a@x) ((lambda (ag4484@ag447f ag4486@ag4481 ag4488@ag4480 ag448b@ag447e ag448d@make-source-condition ag448f@ag447c ag4491@ag447d ag4493@source-condition? ag4495@source-filename ag4497@source-character) (begin (set! ag4484@ag447f (make-record-type-descriptor '&source-information ag48d9@ag4620@&condition-rtd 'ag4482 '#f '#f '#((immutable file-name) (immutable character)))) (set! ag4486@ag4481 '#f) (set! ag4488@ag4480 (make-record-constructor-descriptor ag4484@ag447f ag48da@ag4622@&condition-rcd ag4486@ag4481)) (set! ag448b@ag447e (record-predicate ag4484@ag447f)) (set! ag448d@make-source-condition (record-constructor ag4488@ag4480)) (set! ag448f@ag447c (record-accessor ag4484@ag447f '0)) (set! ag4491@ag447d (record-accessor ag4484@ag447f '1)) (set! ag4493@source-condition? (condition-predicate ag4484@ag447f)) (set! ag4495@source-filename (condition-accessor ag4484@ag447f ag448f@ag447c)) (set! ag4497@source-character (condition-accessor ag4484@ag447f ag4491@ag447d)) (if (pair? ag447a@x) (ag448d@make-source-condition (car ag447a@x) (cdr ag447a@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! ag45f8@ag2bd7@make-source-condition ag2bd7@make-source-condition)) (begin (set! ag2bd9@extract-position-condition (lambda (ag4498@x) (ag2bd7@make-source-condition (ag2bdb@expression-position ag4498@x)))) (set! ag45f9@ag2bd9@extract-position-condition ag2bd9@extract-position-condition)) (begin (set! ag2bdb@expression-position (lambda (ag449a@x) (and (ag28ca@stx? ag449a@x) ((lambda (ag449c@x) (and (ag244a@ag231e@annotation? ag449c@x) (ag244b@ag2320@annotation-source ag449c@x))) (ag28cc@stx-expr ag449a@x))))) (set! ag45fa@ag2bdb@expression-position ag2bdb@expression-position)) (begin (set! ag2bdd@assertion-error (lambda (ag449e@expr ag449f@pos) (raise (condition (ag4909@ag46e4@make-assertion-violation) (ag491b@ag4716@make-who-condition 'assert) (ag48df@ag4677@make-message-condition '"assertion failed") (ag4911@ag46fb@make-irritants-condition (list ag449e@expr)) (ag2bd7@make-source-condition ag449f@pos))))) (set! ag45fb@ag2bdd@assertion-error ag2bdd@assertion-error)) (begin (set! ag2bdf@syntax-error (lambda (ag44a2@x . ag44a4@args) (begin (if (not (for-all string? ag44a4@args)) (assertion-violation 'syntax-error '"invalid argument" ag44a4@args) (void)) (raise (condition (ag48df@ag4677@make-message-condition (if (null? ag44a4@args) '"invalid syntax" (apply string-append ag44a4@args))) (ag493d@ag4772@make-syntax-violation (ag2be9@syntax->datum ag44a2@x) '#f) (ag2bd9@extract-position-condition ag44a2@x)))))) (set! ag45fc@ag2bdf@syntax-error ag2bdf@syntax-error)) (begin (set! ag2be1@syntax-violation* (lambda (ag44a6@who ag44a7@msg ag44a8@form ag44a9@condition-object) (begin (if (not (string? ag44a7@msg)) (assertion-violation 'syntax-violation '"message is not a string" ag44a7@msg) (void)) ((lambda (ag44ae@who) (raise (condition (if ag44ae@who (ag491b@ag4716@make-who-condition ag44ae@who) (condition)) (ag48df@ag4677@make-message-condition ag44a7@msg) ag44a9@condition-object (ag2bd9@extract-position-condition ag44a8@form)))) (if (or (string? ag44a6@who) (symbol? ag44a6@who)) ag44a6@who (if (not ag44a6@who) ((lambda (ag44b0@t) ((lambda (ag44b2@ls/false) (if (and ag44b2@ls/false (apply (lambda (ag44b4@id) (ag28fe@id? ag44b4@id)) ag44b2@ls/false)) (apply (lambda (ag44b6@id) (ag2be9@syntax->datum ag44b6@id)) ag44b2@ls/false) ((lambda (ag44b8@t) ((lambda (ag44ba@ls/false) (if (and ag44ba@ls/false (apply (lambda (ag44bc@id ag44bd@rest) (ag28fe@id? ag44bc@id)) ag44ba@ls/false)) (apply (lambda (ag44c0@id ag44c1@rest) (ag2be9@syntax->datum ag44c0@id)) ag44ba@ls/false) ((lambda (ag44c4@t) ((lambda (ag44c6@ls/false) (if ag44c6@ls/false (apply (lambda () '#f) ag44c6@ls/false) (ag2be3@syntax-violation '#f '"invalid syntax" ag44c4@t))) (ag2b03@syntax-dispatch ag44c4@t '_))) ag44b8@t))) (ag2b03@syntax-dispatch ag44b8@t '(any . any)))) ag44b0@t))) (ag2b03@syntax-dispatch ag44b0@t 'any))) ag44a8@form) (assertion-violation 'syntax-violation '"invalid who argument" ag44a6@who))))))) (set! ag45fd@ag2be1@syntax-violation* ag2be1@syntax-violation*)) (begin (set! ag2be3@syntax-violation (lambda ag44d6 ((lambda (ag44d7) (if (= ag44d7 '3) (apply (lambda (ag44c8@who ag44c9@msg ag44ca@form) (ag2be3@syntax-violation ag44c8@who ag44c9@msg ag44ca@form '#f)) ag44d6) (if (= ag44d7 '4) (apply (lambda (ag44ce@who ag44cf@msg ag44d0@form ag44d1@subform) (ag2be1@syntax-violation* ag44ce@who ag44cf@msg ag44d0@form (ag493d@ag4772@make-syntax-violation (ag2be9@syntax->datum ag44d0@form) (ag2be9@syntax->datum ag44d1@subform)))) ag44d6) (error 'apply '"invalid arg count")))) (length ag44d6)))) (set! ag45fe@ag2be3@syntax-violation ag2be3@syntax-violation)) (begin (set! ag2be5@identifier? (lambda (ag44d8@x) (ag28fe@id? ag44d8@x))) (set! ag45ff@ag2be5@identifier? ag2be5@identifier?)) (begin (set! ag2be7@datum->syntax (lambda (ag44da@id ag44db@datum) (if (ag28fe@id? ag44da@id) (ag28de@datum->stx ag44da@id ag44db@datum) (assertion-violation 'datum->syntax '"not an identifier" ag44da@id)))) (set! ag4600@ag2be7@datum->syntax ag2be7@datum->syntax)) (begin (set! ag2be9@syntax->datum (lambda (ag44de@x) (ag2912@stx->datum ag44de@x))) (set! ag4601@ag2be9@syntax->datum ag2be9@syntax->datum)) (begin (set! ag2beb@ungensym-all (lambda (ag44e0@code) (if (pair? ag44e0@code) (cons (ag2beb@ungensym-all (car ag44e0@code)) (ag2beb@ungensym-all (cdr ag44e0@code))) (if (symbol? ag44e0@code) (ungensym ag44e0@code) ag44e0@code)))) (set! ag4602@ag2beb@ungensym-all ag2beb@ungensym-all)) (begin (set! ag2bed@compile-r6rs-top-level (lambda (ag44e2@x*) (call-with-values (lambda () (ag2b7b@top-level-expander ag44e2@x*)) (lambda (ag44e8@ag44e5 ag44e9@ag44e7) ((lambda (ag44ec@invoke-code ag44ed@lib*) (lambda () (begin (for-each ag2721@ag256f@invoke-library ag44ed@lib*) ((lambda (ag44f0@expanded) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (ag2beb@ungensym-all ag44f0@expanded)) (void)) (eval-core ag44f0@expanded))) (ag24ab@ag2463@expanded->core ag44ec@invoke-code))))) ag44e9@ag44e7 ag44e8@ag44e5))))) (set! ag4603@ag2bed@compile-r6rs-top-level ag2bed@compile-r6rs-top-level)) (begin (set! ag2bef@pre-compile-r6rs-top-level (lambda (ag44f2@x*) (call-with-values (lambda () (ag2b7b@top-level-expander ag44f2@x*)) (lambda (ag44f8@ag44f5 ag44f9@ag44f7) ((lambda (ag44fc@invoke-code ag44fd@lib*) (begin (for-each ag2721@ag256f@invoke-library ag44fd@lib*) (ag2453@ag2330@compile-core (ag24ab@ag2463@expanded->core ag44fc@invoke-code)))) ag44f9@ag44f7 ag44f8@ag44f5))))) (set! ag4604@ag2bef@pre-compile-r6rs-top-level ag2bef@pre-compile-r6rs-top-level)) (begin (set! ag2bf1@interaction-environment ((lambda (ag4500@the-env) (lambda () (or ag4500@the-env ((lambda (ag4502@lib ag4503@rib) (begin ((lambda (ag4506@subst) (begin (ag289e@set-rib-sym*! ag4503@rib (map car ag4506@subst)) (ag28a2@set-rib-mark**! ag4503@rib (map (lambda (ag4508@x) ag2882@top-mark*) ag4506@subst)) (ag28a6@set-rib-label*! ag4503@rib (map cdr ag4506@subst)))) (ag26fc@ag2525@library-subst ag4502@lib)) ((lambda (ag450a@env) (begin (set! ag4500@the-env ag450a@env) ag450a@env)) (make-simple-struct 'interaction-env '4 (list ag4503@rib '() '()))))) (ag271a@ag2561@find-library-by-name '(mosh interaction)) (ag28b2@make-empty-rib))))) '#f)) (set! ag4605@ag2bf1@interaction-environment ag2bf1@interaction-environment)) (begin (set! ag2bf3@top-level-context (ag2455@ag2334@make-parameter '#f)) (set! ag4606@ag2bf3@top-level-context ag2bf3@top-level-context)) (ag2717@ag255b@current-library-expander ag2bc5@library-expander))
(begin (set! ag4615@ag4610 (unspecified)) (set! ag4617@ag4612 (unspecified)) (set! ag4619@ag4611 (unspecified)) (set! ag461c@&condition? (unspecified)) (set! ag461e@make-&condition (unspecified)) (set! ag4620@&condition-rtd (unspecified)) (set! ag4622@&condition-rcd (unspecified)) (set! ag466e@ag4669 (unspecified)) (set! ag4670@ag466b (unspecified)) (set! ag4672@ag466a (unspecified)) (set! ag4675@p? (unspecified)) (set! ag4677@make-message-condition (unspecified)) (set! ag4679@ag4668 (unspecified)) (set! ag467b@message-condition? (unspecified)) (set! ag467d@condition-message (unspecified)) (set! ag467f@&message-rtd (unspecified)) (set! ag4681@&message-rcd (unspecified)) (set! ag4687@ag4682 (unspecified)) (set! ag4689@ag4684 (unspecified)) (set! ag468b@ag4683 (unspecified)) (set! ag468e@p? (unspecified)) (set! ag4690@make-warning (unspecified)) (set! ag4692@warning? (unspecified)) (set! ag4694@&warning-rtd (unspecified)) (set! ag4696@&warning-rcd (unspecified)) (set! ag469c@ag4697 (unspecified)) (set! ag469e@ag4699 (unspecified)) (set! ag46a0@ag4698 (unspecified)) (set! ag46a3@p? (unspecified)) (set! ag46a5@make-serious-condition (unspecified)) (set! ag46a7@serious-condition? (unspecified)) (set! ag46a9@&serious-rtd (unspecified)) (set! ag46ab@&serious-rcd (unspecified)) (set! ag46b1@ag46ac (unspecified)) (set! ag46b3@ag46ae (unspecified)) (set! ag46b5@ag46ad (unspecified)) (set! ag46b8@p? (unspecified)) (set! ag46ba@make-error (unspecified)) (set! ag46bc@error? (unspecified)) (set! ag46be@&error-rtd (unspecified)) (set! ag46c0@&error-rcd (unspecified)) (set! ag46c6@ag46c1 (unspecified)) (set! ag46c8@ag46c3 (unspecified)) (set! ag46ca@ag46c2 (unspecified)) (set! ag46cd@p? (unspecified)) (set! ag46cf@make-violation (unspecified)) (set! ag46d1@violation? (unspecified)) (set! ag46d3@&violation-rtd (unspecified)) (set! ag46d5@&violation-rcd (unspecified)) (set! ag46db@ag46d6 (unspecified)) (set! ag46dd@ag46d8 (unspecified)) (set! ag46df@ag46d7 (unspecified)) (set! ag46e2@p? (unspecified)) (set! ag46e4@make-assertion-violation (unspecified)) (set! ag46e6@assertion-violation? (unspecified)) (set! ag46e8@&assertion-rtd (unspecified)) (set! ag46ea@&assertion-rcd (unspecified)) (set! ag46f2@ag46ed (unspecified)) (set! ag46f4@ag46ef (unspecified)) (set! ag46f6@ag46ee (unspecified)) (set! ag46f9@p? (unspecified)) (set! ag46fb@make-irritants-condition (unspecified)) (set! ag46fd@ag46ec (unspecified)) (set! ag46ff@irritants-condition? (unspecified)) (set! ag4701@condition-irritants (unspecified)) (set! ag4703@&irritants-rtd (unspecified)) (set! ag4705@&irritants-rcd (unspecified)) (set! ag470d@ag4708 (unspecified)) (set! ag470f@ag470a (unspecified)) (set! ag4711@ag4709 (unspecified)) (set! ag4714@p? (unspecified)) (set! ag4716@make-who-condition (unspecified)) (set! ag4718@ag4707 (unspecified)) (set! ag471a@who-condition? (unspecified)) (set! ag471c@condition-who (unspecified)) (set! ag471e@&who-rtd (unspecified)) (set! ag4720@&who-rcd (unspecified)) (set! ag4726@ag4721 (unspecified)) (set! ag4728@ag4723 (unspecified)) (set! ag472a@ag4722 (unspecified)) (set! ag472d@p? (unspecified)) (set! ag472f@make-non-continuable-violation (unspecified)) (set! ag4731@non-continuable-violation? (unspecified)) (set! ag4733@&non-continuable-rtd (unspecified)) (set! ag4735@&non-continuable-rcd (unspecified)) (set! ag473b@ag4736 (unspecified)) (set! ag473d@ag4738 (unspecified)) (set! ag473f@ag4737 (unspecified)) (set! ag4742@p? (unspecified)) (set! ag4744@make-implementation-restriction-violation (unspecified)) (set! ag4746@implementation-restriction-violation? (unspecified)) (set! ag4748@&implementation-restriction-rtd (unspecified)) (set! ag474a@&implementation-restriction-rcd (unspecified)) (set! ag4750@ag474b (unspecified)) (set! ag4752@ag474d (unspecified)) (set! ag4754@ag474c (unspecified)) (set! ag4757@p? (unspecified)) (set! ag4759@make-lexical-violation (unspecified)) (set! ag475b@lexical-violation? (unspecified)) (set! ag475d@&lexical-rtd (unspecified)) (set! ag475f@&lexical-rcd (unspecified)) (set! ag4769@ag4764 (unspecified)) (set! ag476b@ag4766 (unspecified)) (set! ag476d@ag4765 (unspecified)) (set! ag4770@p? (unspecified)) (set! ag4772@make-syntax-violation (unspecified)) (set! ag4774@ag4761 (unspecified)) (set! ag4776@ag4763 (unspecified)) (set! ag4778@syntax-violation? (unspecified)) (set! ag477a@syntax-violation-form (unspecified)) (set! ag477c@syntax-violation-subform (unspecified)) (set! ag477e@&syntax-rtd (unspecified)) (set! ag4780@&syntax-rcd (unspecified)) (set! ag4786@ag4781 (unspecified)) (set! ag4788@ag4783 (unspecified)) (set! ag478a@ag4782 (unspecified)) (set! ag478d@p? (unspecified)) (set! ag478f@make-undefined-violation (unspecified)) (set! ag4791@undefined-violation? (unspecified)) (set! ag4793@&undefined-rtd (unspecified)) (set! ag4795@&undefined-rcd (unspecified)) (set! ag479b@ag4796 (unspecified)) (set! ag479d@ag4798 (unspecified)) (set! ag479f@ag4797 (unspecified)) (set! ag47a2@p? (unspecified)) (set! ag47a4@make-i/o-error (unspecified)) (set! ag47a6@i/o-error? (unspecified)) (set! ag47a8@&i/o-rtd (unspecified)) (set! ag47aa@&i/o-rcd (unspecified)) (set! ag47b0@ag47ab (unspecified)) (set! ag47b2@ag47ad (unspecified)) (set! ag47b4@ag47ac (unspecified)) (set! ag47b7@p? (unspecified)) (set! ag47b9@make-i/o-read-error (unspecified)) (set! ag47bb@i/o-read-error? (unspecified)) (set! ag47bd@&i/o-read-rtd (unspecified)) (set! ag47bf@&i/o-read-rcd (unspecified)) (set! ag47c5@ag47c0 (unspecified)) (set! ag47c7@ag47c2 (unspecified)) (set! ag47c9@ag47c1 (unspecified)) (set! ag47cc@p? (unspecified)) (set! ag47ce@make-i/o-write-error (unspecified)) (set! ag47d0@i/o-write-error? (unspecified)) (set! ag47d2@&i/o-write-rtd (unspecified)) (set! ag47d4@&i/o-write-rcd (unspecified)) (set! ag47dc@ag47d7 (unspecified)) (set! ag47de@ag47d9 (unspecified)) (set! ag47e0@ag47d8 (unspecified)) (set! ag47e3@p? (unspecified)) (set! ag47e5@make-i/o-invalid-position-error (unspecified)) (set! ag47e7@ag47d6 (unspecified)) (set! ag47e9@i/o-invalid-position-error? (unspecified)) (set! ag47eb@i/o-error-position (unspecified)) (set! ag47ed@&i/o-invalid-position-rtd (unspecified)) (set! ag47ef@&i/o-invalid-position-rcd (unspecified)) (set! ag47f7@ag47f2 (unspecified)) (set! ag47f9@ag47f4 (unspecified)) (set! ag47fb@ag47f3 (unspecified)) (set! ag47fe@p? (unspecified)) (set! ag4800@make-i/o-filename-error (unspecified)) (set! ag4802@ag47f1 (unspecified)) (set! ag4804@i/o-filename-error? (unspecified)) (set! ag4806@i/o-error-filename (unspecified)) (set! ag4808@&i/o-filename-rtd (unspecified)) (set! ag480a@&i/o-filename-rcd (unspecified)) (set! ag4810@ag480b (unspecified)) (set! ag4812@ag480d (unspecified)) (set! ag4814@ag480c (unspecified)) (set! ag4817@p? (unspecified)) (set! ag4819@make-i/o-file-protection-error (unspecified)) (set! ag481b@i/o-file-protection-error? (unspecified)) (set! ag481d@&i/o-file-protection-rtd (unspecified)) (set! ag481f@&i/o-file-protection-rcd (unspecified)) (set! ag4825@ag4820 (unspecified)) (set! ag4827@ag4822 (unspecified)) (set! ag4829@ag4821 (unspecified)) (set! ag482c@p? (unspecified)) (set! ag482e@make-i/o-file-is-read-only-error (unspecified)) (set! ag4830@i/o-file-is-read-only-error? (unspecified)) (set! ag4832@&i/o-file-is-read-only-rtd (unspecified)) (set! ag4834@&i/o-file-is-read-only-rcd (unspecified)) (set! ag483a@ag4835 (unspecified)) (set! ag483c@ag4837 (unspecified)) (set! ag483e@ag4836 (unspecified)) (set! ag4841@p? (unspecified)) (set! ag4843@make-i/o-file-already-exists-error (unspecified)) (set! ag4845@i/o-file-already-exists-error? (unspecified)) (set! ag4847@&i/o-file-already-exists-rtd (unspecified)) (set! ag4849@&i/o-file-already-exists-rcd (unspecified)) (set! ag484f@ag484a (unspecified)) (set! ag4851@ag484c (unspecified)) (set! ag4853@ag484b (unspecified)) (set! ag4856@p? (unspecified)) (set! ag4858@make-i/o-file-does-not-exist-error (unspecified)) (set! ag485a@i/o-file-does-not-exist-error? (unspecified)) (set! ag485c@&i/o-file-does-not-exist-rtd (unspecified)) (set! ag485e@&i/o-file-does-not-exist-rcd (unspecified)) (set! ag4866@ag4861 (unspecified)) (set! ag4868@ag4863 (unspecified)) (set! ag486a@ag4862 (unspecified)) (set! ag486d@p? (unspecified)) (set! ag486f@make-i/o-port-error (unspecified)) (set! ag4871@ag4860 (unspecified)) (set! ag4873@i/o-port-error? (unspecified)) (set! ag4875@i/o-error-port (unspecified)) (set! ag4877@&i/o-port-rtd (unspecified)) (set! ag4879@&i/o-port-rcd (unspecified)) (set! ag487f@ag487a (unspecified)) (set! ag4881@ag487c (unspecified)) (set! ag4883@ag487b (unspecified)) (set! ag4886@p? (unspecified)) (set! ag4888@make-i/o-decoding-error (unspecified)) (set! ag488a@i/o-decoding-error? (unspecified)) (set! ag488c@&i/o-decoding-rtd (unspecified)) (set! ag488e@&i/o-decoding-rcd (unspecified)) (set! ag4896@ag4891 (unspecified)) (set! ag4898@ag4893 (unspecified)) (set! ag489a@ag4892 (unspecified)) (set! ag489d@p? (unspecified)) (set! ag489f@make-i/o-encoding-error (unspecified)) (set! ag48a1@ag4890 (unspecified)) (set! ag48a3@i/o-encoding-error? (unspecified)) (set! ag48a5@i/o-encoding-error-char (unspecified)) (set! ag48a7@&i/o-encoding-rtd (unspecified)) (set! ag48a9@&i/o-encoding-rcd (unspecified)) (set! ag48af@ag48aa (unspecified)) (set! ag48b1@ag48ac (unspecified)) (set! ag48b3@ag48ab (unspecified)) (set! ag48b6@p? (unspecified)) (set! ag48b8@make-no-infinities-violation (unspecified)) (set! ag48ba@no-infinities-violation? (unspecified)) (set! ag48bc@&no-infinities-rtd (unspecified)) (set! ag48be@&no-infinities-rcd (unspecified)) (set! ag48c4@ag48bf (unspecified)) (set! ag48c6@ag48c1 (unspecified)) (set! ag48c8@ag48c0 (unspecified)) (set! ag48cb@p? (unspecified)) (set! ag48cd@make-no-nans-violation (unspecified)) (set! ag48cf@no-nans-violation? (unspecified)) (set! ag48d1@&no-nans-rtd (unspecified)) (set! ag48d3@&no-nans-rcd (unspecified)) (begin (set! ag4615@ag4610 (make-record-type-descriptor '&condition '#f 'ag4613 '#f '#f '#())) (set! ag48d4@ag4615@ag4610 ag4615@ag4610)) (begin (set! ag4617@ag4612 '#f) (set! ag48d5@ag4617@ag4612 ag4617@ag4612)) (begin (set! ag4619@ag4611 (make-record-constructor-descriptor ag4615@ag4610 '#f ag4617@ag4612)) (set! ag48d6@ag4619@ag4611 ag4619@ag4611)) (begin (set! ag461c@&condition? (record-predicate ag4615@ag4610)) (set! ag48d7@ag461c@&condition? ag461c@&condition?)) (begin (set! ag461e@make-&condition (record-constructor ag4619@ag4611)) (set! ag48d8@ag461e@make-&condition ag461e@make-&condition)) (begin (set! ag4620@&condition-rtd ag4615@ag4610) (set! ag48d9@ag4620@&condition-rtd ag4620@&condition-rtd)) (begin (set! ag4622@&condition-rcd ag4619@ag4611) (set! ag48da@ag4622@&condition-rcd ag4622@&condition-rcd)) (begin (set! ag466e@ag4669 (make-record-type-descriptor '&message ag4615@ag4610 'ag466c '#f '#f '#((immutable message)))) (set! ag48db@ag466e@ag4669 ag466e@ag4669)) (begin (set! ag4670@ag466b '#f) (set! ag48dc@ag4670@ag466b ag4670@ag466b)) (begin (set! ag4672@ag466a (make-record-constructor-descriptor ag466e@ag4669 ag4619@ag4611 ag4670@ag466b)) (set! ag48dd@ag4672@ag466a ag4672@ag466a)) (begin (set! ag4675@p? (record-predicate ag466e@ag4669)) (set! ag48de@ag4675@p? ag4675@p?)) (begin (set! ag4677@make-message-condition (record-constructor ag4672@ag466a)) (set! ag48df@ag4677@make-message-condition ag4677@make-message-condition)) (begin (set! ag4679@ag4668 (record-accessor ag466e@ag4669 '0)) (set! ag48e0@ag4679@ag4668 ag4679@ag4668)) (begin (set! ag467b@message-condition? (condition-predicate ag466e@ag4669)) (set! ag48e1@ag467b@message-condition? ag467b@message-condition?)) (begin (set! ag467d@condition-message (condition-accessor ag466e@ag4669 ag4679@ag4668)) (set! ag48e2@ag467d@condition-message ag467d@condition-message)) (begin (set! ag467f@&message-rtd ag466e@ag4669) (set! ag48e3@ag467f@&message-rtd ag467f@&message-rtd)) (begin (set! ag4681@&message-rcd ag4672@ag466a) (set! ag48e4@ag4681@&message-rcd ag4681@&message-rcd)) (begin (set! ag4687@ag4682 (make-record-type-descriptor '&warning ag4615@ag4610 'ag4685 '#f '#f '#())) (set! ag48e5@ag4687@ag4682 ag4687@ag4682)) (begin (set! ag4689@ag4684 '#f) (set! ag48e6@ag4689@ag4684 ag4689@ag4684)) (begin (set! ag468b@ag4683 (make-record-constructor-descriptor ag4687@ag4682 ag4619@ag4611 ag4689@ag4684)) (set! ag48e7@ag468b@ag4683 ag468b@ag4683)) (begin (set! ag468e@p? (record-predicate ag4687@ag4682)) (set! ag48e8@ag468e@p? ag468e@p?)) (begin (set! ag4690@make-warning (record-constructor ag468b@ag4683)) (set! ag48e9@ag4690@make-warning ag4690@make-warning)) (begin (set! ag4692@warning? (condition-predicate ag4687@ag4682)) (set! ag48ea@ag4692@warning? ag4692@warning?)) (begin (set! ag4694@&warning-rtd ag4687@ag4682) (set! ag48eb@ag4694@&warning-rtd ag4694@&warning-rtd)) (begin (set! ag4696@&warning-rcd ag468b@ag4683) (set! ag48ec@ag4696@&warning-rcd ag4696@&warning-rcd)) (begin (set! ag469c@ag4697 (make-record-type-descriptor '&serious ag4615@ag4610 'ag469a '#f '#f '#())) (set! ag48ed@ag469c@ag4697 ag469c@ag4697)) (begin (set! ag469e@ag4699 '#f) (set! ag48ee@ag469e@ag4699 ag469e@ag4699)) (begin (set! ag46a0@ag4698 (make-record-constructor-descriptor ag469c@ag4697 ag4619@ag4611 ag469e@ag4699)) (set! ag48ef@ag46a0@ag4698 ag46a0@ag4698)) (begin (set! ag46a3@p? (record-predicate ag469c@ag4697)) (set! ag48f0@ag46a3@p? ag46a3@p?)) (begin (set! ag46a5@make-serious-condition (record-constructor ag46a0@ag4698)) (set! ag48f1@ag46a5@make-serious-condition ag46a5@make-serious-condition)) (begin (set! ag46a7@serious-condition? (condition-predicate ag469c@ag4697)) (set! ag48f2@ag46a7@serious-condition? ag46a7@serious-condition?)) (begin (set! ag46a9@&serious-rtd ag469c@ag4697) (set! ag48f3@ag46a9@&serious-rtd ag46a9@&serious-rtd)) (begin (set! ag46ab@&serious-rcd ag46a0@ag4698) (set! ag48f4@ag46ab@&serious-rcd ag46ab@&serious-rcd)) (begin (set! ag46b1@ag46ac (make-record-type-descriptor '&error ag469c@ag4697 'ag46af '#f '#f '#())) (set! ag48f5@ag46b1@ag46ac ag46b1@ag46ac)) (begin (set! ag46b3@ag46ae '#f) (set! ag48f6@ag46b3@ag46ae ag46b3@ag46ae)) (begin (set! ag46b5@ag46ad (make-record-constructor-descriptor ag46b1@ag46ac ag46a0@ag4698 ag46b3@ag46ae)) (set! ag48f7@ag46b5@ag46ad ag46b5@ag46ad)) (begin (set! ag46b8@p? (record-predicate ag46b1@ag46ac)) (set! ag48f8@ag46b8@p? ag46b8@p?)) (begin (set! ag46ba@make-error (record-constructor ag46b5@ag46ad)) (set! ag48f9@ag46ba@make-error ag46ba@make-error)) (begin (set! ag46bc@error? (condition-predicate ag46b1@ag46ac)) (set! ag48fa@ag46bc@error? ag46bc@error?)) (begin (set! ag46be@&error-rtd ag46b1@ag46ac) (set! ag48fb@ag46be@&error-rtd ag46be@&error-rtd)) (begin (set! ag46c0@&error-rcd ag46b5@ag46ad) (set! ag48fc@ag46c0@&error-rcd ag46c0@&error-rcd)) (begin (set! ag46c6@ag46c1 (make-record-type-descriptor '&violation ag469c@ag4697 'ag46c4 '#f '#f '#())) (set! ag48fd@ag46c6@ag46c1 ag46c6@ag46c1)) (begin (set! ag46c8@ag46c3 '#f) (set! ag48fe@ag46c8@ag46c3 ag46c8@ag46c3)) (begin (set! ag46ca@ag46c2 (make-record-constructor-descriptor ag46c6@ag46c1 ag46a0@ag4698 ag46c8@ag46c3)) (set! ag48ff@ag46ca@ag46c2 ag46ca@ag46c2)) (begin (set! ag46cd@p? (record-predicate ag46c6@ag46c1)) (set! ag4900@ag46cd@p? ag46cd@p?)) (begin (set! ag46cf@make-violation (record-constructor ag46ca@ag46c2)) (set! ag4901@ag46cf@make-violation ag46cf@make-violation)) (begin (set! ag46d1@violation? (condition-predicate ag46c6@ag46c1)) (set! ag4902@ag46d1@violation? ag46d1@violation?)) (begin (set! ag46d3@&violation-rtd ag46c6@ag46c1) (set! ag4903@ag46d3@&violation-rtd ag46d3@&violation-rtd)) (begin (set! ag46d5@&violation-rcd ag46ca@ag46c2) (set! ag4904@ag46d5@&violation-rcd ag46d5@&violation-rcd)) (begin (set! ag46db@ag46d6 (make-record-type-descriptor '&assertion ag46c6@ag46c1 'ag46d9 '#f '#f '#())) (set! ag4905@ag46db@ag46d6 ag46db@ag46d6)) (begin (set! ag46dd@ag46d8 '#f) (set! ag4906@ag46dd@ag46d8 ag46dd@ag46d8)) (begin (set! ag46df@ag46d7 (make-record-constructor-descriptor ag46db@ag46d6 ag46ca@ag46c2 ag46dd@ag46d8)) (set! ag4907@ag46df@ag46d7 ag46df@ag46d7)) (begin (set! ag46e2@p? (record-predicate ag46db@ag46d6)) (set! ag4908@ag46e2@p? ag46e2@p?)) (begin (set! ag46e4@make-assertion-violation (record-constructor ag46df@ag46d7)) (set! ag4909@ag46e4@make-assertion-violation ag46e4@make-assertion-violation)) (begin (set! ag46e6@assertion-violation? (condition-predicate ag46db@ag46d6)) (set! ag490a@ag46e6@assertion-violation? ag46e6@assertion-violation?)) (begin (set! ag46e8@&assertion-rtd ag46db@ag46d6) (set! ag490b@ag46e8@&assertion-rtd ag46e8@&assertion-rtd)) (begin (set! ag46ea@&assertion-rcd ag46df@ag46d7) (set! ag490c@ag46ea@&assertion-rcd ag46ea@&assertion-rcd)) (begin (set! ag46f2@ag46ed (make-record-type-descriptor '&irritants ag4615@ag4610 'ag46f0 '#f '#f '#((immutable irritants)))) (set! ag490d@ag46f2@ag46ed ag46f2@ag46ed)) (begin (set! ag46f4@ag46ef '#f) (set! ag490e@ag46f4@ag46ef ag46f4@ag46ef)) (begin (set! ag46f6@ag46ee (make-record-constructor-descriptor ag46f2@ag46ed ag4619@ag4611 ag46f4@ag46ef)) (set! ag490f@ag46f6@ag46ee ag46f6@ag46ee)) (begin (set! ag46f9@p? (record-predicate ag46f2@ag46ed)) (set! ag4910@ag46f9@p? ag46f9@p?)) (begin (set! ag46fb@make-irritants-condition (record-constructor ag46f6@ag46ee)) (set! ag4911@ag46fb@make-irritants-condition ag46fb@make-irritants-condition)) (begin (set! ag46fd@ag46ec (record-accessor ag46f2@ag46ed '0)) (set! ag4912@ag46fd@ag46ec ag46fd@ag46ec)) (begin (set! ag46ff@irritants-condition? (condition-predicate ag46f2@ag46ed)) (set! ag4913@ag46ff@irritants-condition? ag46ff@irritants-condition?)) (begin (set! ag4701@condition-irritants (condition-accessor ag46f2@ag46ed ag46fd@ag46ec)) (set! ag4914@ag4701@condition-irritants ag4701@condition-irritants)) (begin (set! ag4703@&irritants-rtd ag46f2@ag46ed) (set! ag4915@ag4703@&irritants-rtd ag4703@&irritants-rtd)) (begin (set! ag4705@&irritants-rcd ag46f6@ag46ee) (set! ag4916@ag4705@&irritants-rcd ag4705@&irritants-rcd)) (begin (set! ag470d@ag4708 (make-record-type-descriptor '&who ag4615@ag4610 'ag470b '#f '#f '#((immutable who)))) (set! ag4917@ag470d@ag4708 ag470d@ag4708)) (begin (set! ag470f@ag470a '#f) (set! ag4918@ag470f@ag470a ag470f@ag470a)) (begin (set! ag4711@ag4709 (make-record-constructor-descriptor ag470d@ag4708 ag4619@ag4611 ag470f@ag470a)) (set! ag4919@ag4711@ag4709 ag4711@ag4709)) (begin (set! ag4714@p? (record-predicate ag470d@ag4708)) (set! ag491a@ag4714@p? ag4714@p?)) (begin (set! ag4716@make-who-condition (record-constructor ag4711@ag4709)) (set! ag491b@ag4716@make-who-condition ag4716@make-who-condition)) (begin (set! ag4718@ag4707 (record-accessor ag470d@ag4708 '0)) (set! ag491c@ag4718@ag4707 ag4718@ag4707)) (begin (set! ag471a@who-condition? (condition-predicate ag470d@ag4708)) (set! ag491d@ag471a@who-condition? ag471a@who-condition?)) (begin (set! ag471c@condition-who (condition-accessor ag470d@ag4708 ag4718@ag4707)) (set! ag491e@ag471c@condition-who ag471c@condition-who)) (begin (set! ag471e@&who-rtd ag470d@ag4708) (set! ag491f@ag471e@&who-rtd ag471e@&who-rtd)) (begin (set! ag4720@&who-rcd ag4711@ag4709) (set! ag4920@ag4720@&who-rcd ag4720@&who-rcd)) (begin (set! ag4726@ag4721 (make-record-type-descriptor '&non-continuable ag46c6@ag46c1 'ag4724 '#f '#f '#())) (set! ag4921@ag4726@ag4721 ag4726@ag4721)) (begin (set! ag4728@ag4723 '#f) (set! ag4922@ag4728@ag4723 ag4728@ag4723)) (begin (set! ag472a@ag4722 (make-record-constructor-descriptor ag4726@ag4721 ag46ca@ag46c2 ag4728@ag4723)) (set! ag4923@ag472a@ag4722 ag472a@ag4722)) (begin (set! ag472d@p? (record-predicate ag4726@ag4721)) (set! ag4924@ag472d@p? ag472d@p?)) (begin (set! ag472f@make-non-continuable-violation (record-constructor ag472a@ag4722)) (set! ag4925@ag472f@make-non-continuable-violation ag472f@make-non-continuable-violation)) (begin (set! ag4731@non-continuable-violation? (condition-predicate ag4726@ag4721)) (set! ag4926@ag4731@non-continuable-violation? ag4731@non-continuable-violation?)) (begin (set! ag4733@&non-continuable-rtd ag4726@ag4721) (set! ag4927@ag4733@&non-continuable-rtd ag4733@&non-continuable-rtd)) (begin (set! ag4735@&non-continuable-rcd ag472a@ag4722) (set! ag4928@ag4735@&non-continuable-rcd ag4735@&non-continuable-rcd)) (begin (set! ag473b@ag4736 (make-record-type-descriptor '&implementation-restriction ag46c6@ag46c1 'ag4739 '#f '#f '#())) (set! ag4929@ag473b@ag4736 ag473b@ag4736)) (begin (set! ag473d@ag4738 '#f) (set! ag492a@ag473d@ag4738 ag473d@ag4738)) (begin (set! ag473f@ag4737 (make-record-constructor-descriptor ag473b@ag4736 ag46ca@ag46c2 ag473d@ag4738)) (set! ag492b@ag473f@ag4737 ag473f@ag4737)) (begin (set! ag4742@p? (record-predicate ag473b@ag4736)) (set! ag492c@ag4742@p? ag4742@p?)) (begin (set! ag4744@make-implementation-restriction-violation (record-constructor ag473f@ag4737)) (set! ag492d@ag4744@make-implementation-restriction-violation ag4744@make-implementation-restriction-violation)) (begin (set! ag4746@implementation-restriction-violation? (condition-predicate ag473b@ag4736)) (set! ag492e@ag4746@implementation-restriction-violation? ag4746@implementation-restriction-violation?)) (begin (set! ag4748@&implementation-restriction-rtd ag473b@ag4736) (set! ag492f@ag4748@&implementation-restriction-rtd ag4748@&implementation-restriction-rtd)) (begin (set! ag474a@&implementation-restriction-rcd ag473f@ag4737) (set! ag4930@ag474a@&implementation-restriction-rcd ag474a@&implementation-restriction-rcd)) (begin (set! ag4750@ag474b (make-record-type-descriptor '&lexical ag46c6@ag46c1 'ag474e '#f '#f '#())) (set! ag4931@ag4750@ag474b ag4750@ag474b)) (begin (set! ag4752@ag474d '#f) (set! ag4932@ag4752@ag474d ag4752@ag474d)) (begin (set! ag4754@ag474c (make-record-constructor-descriptor ag4750@ag474b ag46ca@ag46c2 ag4752@ag474d)) (set! ag4933@ag4754@ag474c ag4754@ag474c)) (begin (set! ag4757@p? (record-predicate ag4750@ag474b)) (set! ag4934@ag4757@p? ag4757@p?)) (begin (set! ag4759@make-lexical-violation (record-constructor ag4754@ag474c)) (set! ag4935@ag4759@make-lexical-violation ag4759@make-lexical-violation)) (begin (set! ag475b@lexical-violation? (condition-predicate ag4750@ag474b)) (set! ag4936@ag475b@lexical-violation? ag475b@lexical-violation?)) (begin (set! ag475d@&lexical-rtd ag4750@ag474b) (set! ag4937@ag475d@&lexical-rtd ag475d@&lexical-rtd)) (begin (set! ag475f@&lexical-rcd ag4754@ag474c) (set! ag4938@ag475f@&lexical-rcd ag475f@&lexical-rcd)) (begin (set! ag4769@ag4764 (make-record-type-descriptor '&syntax ag46c6@ag46c1 'ag4767 '#f '#f '#((immutable form) (immutable subform)))) (set! ag4939@ag4769@ag4764 ag4769@ag4764)) (begin (set! ag476b@ag4766 '#f) (set! ag493a@ag476b@ag4766 ag476b@ag4766)) (begin (set! ag476d@ag4765 (make-record-constructor-descriptor ag4769@ag4764 ag46ca@ag46c2 ag476b@ag4766)) (set! ag493b@ag476d@ag4765 ag476d@ag4765)) (begin (set! ag4770@p? (record-predicate ag4769@ag4764)) (set! ag493c@ag4770@p? ag4770@p?)) (begin (set! ag4772@make-syntax-violation (record-constructor ag476d@ag4765)) (set! ag493d@ag4772@make-syntax-violation ag4772@make-syntax-violation)) (begin (set! ag4774@ag4761 (record-accessor ag4769@ag4764 '0)) (set! ag493e@ag4774@ag4761 ag4774@ag4761)) (begin (set! ag4776@ag4763 (record-accessor ag4769@ag4764 '1)) (set! ag493f@ag4776@ag4763 ag4776@ag4763)) (begin (set! ag4778@syntax-violation? (condition-predicate ag4769@ag4764)) (set! ag4940@ag4778@syntax-violation? ag4778@syntax-violation?)) (begin (set! ag477a@syntax-violation-form (condition-accessor ag4769@ag4764 ag4774@ag4761)) (set! ag4941@ag477a@syntax-violation-form ag477a@syntax-violation-form)) (begin (set! ag477c@syntax-violation-subform (condition-accessor ag4769@ag4764 ag4776@ag4763)) (set! ag4942@ag477c@syntax-violation-subform ag477c@syntax-violation-subform)) (begin (set! ag477e@&syntax-rtd ag4769@ag4764) (set! ag4943@ag477e@&syntax-rtd ag477e@&syntax-rtd)) (begin (set! ag4780@&syntax-rcd ag476d@ag4765) (set! ag4944@ag4780@&syntax-rcd ag4780@&syntax-rcd)) (begin (set! ag4786@ag4781 (make-record-type-descriptor '&undefined ag46c6@ag46c1 'ag4784 '#f '#f '#())) (set! ag4945@ag4786@ag4781 ag4786@ag4781)) (begin (set! ag4788@ag4783 '#f) (set! ag4946@ag4788@ag4783 ag4788@ag4783)) (begin (set! ag478a@ag4782 (make-record-constructor-descriptor ag4786@ag4781 ag46ca@ag46c2 ag4788@ag4783)) (set! ag4947@ag478a@ag4782 ag478a@ag4782)) (begin (set! ag478d@p? (record-predicate ag4786@ag4781)) (set! ag4948@ag478d@p? ag478d@p?)) (begin (set! ag478f@make-undefined-violation (record-constructor ag478a@ag4782)) (set! ag4949@ag478f@make-undefined-violation ag478f@make-undefined-violation)) (begin (set! ag4791@undefined-violation? (condition-predicate ag4786@ag4781)) (set! ag494a@ag4791@undefined-violation? ag4791@undefined-violation?)) (begin (set! ag4793@&undefined-rtd ag4786@ag4781) (set! ag494b@ag4793@&undefined-rtd ag4793@&undefined-rtd)) (begin (set! ag4795@&undefined-rcd ag478a@ag4782) (set! ag494c@ag4795@&undefined-rcd ag4795@&undefined-rcd)) (begin (set! ag479b@ag4796 (make-record-type-descriptor '&i/o ag46b1@ag46ac 'ag4799 '#f '#f '#())) (set! ag494d@ag479b@ag4796 ag479b@ag4796)) (begin (set! ag479d@ag4798 '#f) (set! ag494e@ag479d@ag4798 ag479d@ag4798)) (begin (set! ag479f@ag4797 (make-record-constructor-descriptor ag479b@ag4796 ag46b5@ag46ad ag479d@ag4798)) (set! ag494f@ag479f@ag4797 ag479f@ag4797)) (begin (set! ag47a2@p? (record-predicate ag479b@ag4796)) (set! ag4950@ag47a2@p? ag47a2@p?)) (begin (set! ag47a4@make-i/o-error (record-constructor ag479f@ag4797)) (set! ag4951@ag47a4@make-i/o-error ag47a4@make-i/o-error)) (begin (set! ag47a6@i/o-error? (condition-predicate ag479b@ag4796)) (set! ag4952@ag47a6@i/o-error? ag47a6@i/o-error?)) (begin (set! ag47a8@&i/o-rtd ag479b@ag4796) (set! ag4953@ag47a8@&i/o-rtd ag47a8@&i/o-rtd)) (begin (set! ag47aa@&i/o-rcd ag479f@ag4797) (set! ag4954@ag47aa@&i/o-rcd ag47aa@&i/o-rcd)) (begin (set! ag47b0@ag47ab (make-record-type-descriptor '&i/o-read ag479b@ag4796 'ag47ae '#f '#f '#())) (set! ag4955@ag47b0@ag47ab ag47b0@ag47ab)) (begin (set! ag47b2@ag47ad '#f) (set! ag4956@ag47b2@ag47ad ag47b2@ag47ad)) (begin (set! ag47b4@ag47ac (make-record-constructor-descriptor ag47b0@ag47ab ag479f@ag4797 ag47b2@ag47ad)) (set! ag4957@ag47b4@ag47ac ag47b4@ag47ac)) (begin (set! ag47b7@p? (record-predicate ag47b0@ag47ab)) (set! ag4958@ag47b7@p? ag47b7@p?)) (begin (set! ag47b9@make-i/o-read-error (record-constructor ag47b4@ag47ac)) (set! ag4959@ag47b9@make-i/o-read-error ag47b9@make-i/o-read-error)) (begin (set! ag47bb@i/o-read-error? (condition-predicate ag47b0@ag47ab)) (set! ag495a@ag47bb@i/o-read-error? ag47bb@i/o-read-error?)) (begin (set! ag47bd@&i/o-read-rtd ag47b0@ag47ab) (set! ag495b@ag47bd@&i/o-read-rtd ag47bd@&i/o-read-rtd)) (begin (set! ag47bf@&i/o-read-rcd ag47b4@ag47ac) (set! ag495c@ag47bf@&i/o-read-rcd ag47bf@&i/o-read-rcd)) (begin (set! ag47c5@ag47c0 (make-record-type-descriptor '&i/o-write ag479b@ag4796 'ag47c3 '#f '#f '#())) (set! ag495d@ag47c5@ag47c0 ag47c5@ag47c0)) (begin (set! ag47c7@ag47c2 '#f) (set! ag495e@ag47c7@ag47c2 ag47c7@ag47c2)) (begin (set! ag47c9@ag47c1 (make-record-constructor-descriptor ag47c5@ag47c0 ag479f@ag4797 ag47c7@ag47c2)) (set! ag495f@ag47c9@ag47c1 ag47c9@ag47c1)) (begin (set! ag47cc@p? (record-predicate ag47c5@ag47c0)) (set! ag4960@ag47cc@p? ag47cc@p?)) (begin (set! ag47ce@make-i/o-write-error (record-constructor ag47c9@ag47c1)) (set! ag4961@ag47ce@make-i/o-write-error ag47ce@make-i/o-write-error)) (begin (set! ag47d0@i/o-write-error? (condition-predicate ag47c5@ag47c0)) (set! ag4962@ag47d0@i/o-write-error? ag47d0@i/o-write-error?)) (begin (set! ag47d2@&i/o-write-rtd ag47c5@ag47c0) (set! ag4963@ag47d2@&i/o-write-rtd ag47d2@&i/o-write-rtd)) (begin (set! ag47d4@&i/o-write-rcd ag47c9@ag47c1) (set! ag4964@ag47d4@&i/o-write-rcd ag47d4@&i/o-write-rcd)) (begin (set! ag47dc@ag47d7 (make-record-type-descriptor '&i/o-invalid-position ag479b@ag4796 'ag47da '#f '#f '#((immutable position)))) (set! ag4965@ag47dc@ag47d7 ag47dc@ag47d7)) (begin (set! ag47de@ag47d9 '#f) (set! ag4966@ag47de@ag47d9 ag47de@ag47d9)) (begin (set! ag47e0@ag47d8 (make-record-constructor-descriptor ag47dc@ag47d7 ag479f@ag4797 ag47de@ag47d9)) (set! ag4967@ag47e0@ag47d8 ag47e0@ag47d8)) (begin (set! ag47e3@p? (record-predicate ag47dc@ag47d7)) (set! ag4968@ag47e3@p? ag47e3@p?)) (begin (set! ag47e5@make-i/o-invalid-position-error (record-constructor ag47e0@ag47d8)) (set! ag4969@ag47e5@make-i/o-invalid-position-error ag47e5@make-i/o-invalid-position-error)) (begin (set! ag47e7@ag47d6 (record-accessor ag47dc@ag47d7 '0)) (set! ag496a@ag47e7@ag47d6 ag47e7@ag47d6)) (begin (set! ag47e9@i/o-invalid-position-error? (condition-predicate ag47dc@ag47d7)) (set! ag496b@ag47e9@i/o-invalid-position-error? ag47e9@i/o-invalid-position-error?)) (begin (set! ag47eb@i/o-error-position (condition-accessor ag47dc@ag47d7 ag47e7@ag47d6)) (set! ag496c@ag47eb@i/o-error-position ag47eb@i/o-error-position)) (begin (set! ag47ed@&i/o-invalid-position-rtd ag47dc@ag47d7) (set! ag496d@ag47ed@&i/o-invalid-position-rtd ag47ed@&i/o-invalid-position-rtd)) (begin (set! ag47ef@&i/o-invalid-position-rcd ag47e0@ag47d8) (set! ag496e@ag47ef@&i/o-invalid-position-rcd ag47ef@&i/o-invalid-position-rcd)) (begin (set! ag47f7@ag47f2 (make-record-type-descriptor '&i/o-filename ag479b@ag4796 'ag47f5 '#f '#f '#((immutable filename)))) (set! ag496f@ag47f7@ag47f2 ag47f7@ag47f2)) (begin (set! ag47f9@ag47f4 '#f) (set! ag4970@ag47f9@ag47f4 ag47f9@ag47f4)) (begin (set! ag47fb@ag47f3 (make-record-constructor-descriptor ag47f7@ag47f2 ag479f@ag4797 ag47f9@ag47f4)) (set! ag4971@ag47fb@ag47f3 ag47fb@ag47f3)) (begin (set! ag47fe@p? (record-predicate ag47f7@ag47f2)) (set! ag4972@ag47fe@p? ag47fe@p?)) (begin (set! ag4800@make-i/o-filename-error (record-constructor ag47fb@ag47f3)) (set! ag4973@ag4800@make-i/o-filename-error ag4800@make-i/o-filename-error)) (begin (set! ag4802@ag47f1 (record-accessor ag47f7@ag47f2 '0)) (set! ag4974@ag4802@ag47f1 ag4802@ag47f1)) (begin (set! ag4804@i/o-filename-error? (condition-predicate ag47f7@ag47f2)) (set! ag4975@ag4804@i/o-filename-error? ag4804@i/o-filename-error?)) (begin (set! ag4806@i/o-error-filename (condition-accessor ag47f7@ag47f2 ag4802@ag47f1)) (set! ag4976@ag4806@i/o-error-filename ag4806@i/o-error-filename)) (begin (set! ag4808@&i/o-filename-rtd ag47f7@ag47f2) (set! ag4977@ag4808@&i/o-filename-rtd ag4808@&i/o-filename-rtd)) (begin (set! ag480a@&i/o-filename-rcd ag47fb@ag47f3) (set! ag4978@ag480a@&i/o-filename-rcd ag480a@&i/o-filename-rcd)) (begin (set! ag4810@ag480b (make-record-type-descriptor '&i/o-file-protection ag47f7@ag47f2 'ag480e '#f '#f '#())) (set! ag4979@ag4810@ag480b ag4810@ag480b)) (begin (set! ag4812@ag480d '#f) (set! ag497a@ag4812@ag480d ag4812@ag480d)) (begin (set! ag4814@ag480c (make-record-constructor-descriptor ag4810@ag480b ag47fb@ag47f3 ag4812@ag480d)) (set! ag497b@ag4814@ag480c ag4814@ag480c)) (begin (set! ag4817@p? (record-predicate ag4810@ag480b)) (set! ag497c@ag4817@p? ag4817@p?)) (begin (set! ag4819@make-i/o-file-protection-error (record-constructor ag4814@ag480c)) (set! ag497d@ag4819@make-i/o-file-protection-error ag4819@make-i/o-file-protection-error)) (begin (set! ag481b@i/o-file-protection-error? (condition-predicate ag4810@ag480b)) (set! ag497e@ag481b@i/o-file-protection-error? ag481b@i/o-file-protection-error?)) (begin (set! ag481d@&i/o-file-protection-rtd ag4810@ag480b) (set! ag497f@ag481d@&i/o-file-protection-rtd ag481d@&i/o-file-protection-rtd)) (begin (set! ag481f@&i/o-file-protection-rcd ag4814@ag480c) (set! ag4980@ag481f@&i/o-file-protection-rcd ag481f@&i/o-file-protection-rcd)) (begin (set! ag4825@ag4820 (make-record-type-descriptor '&i/o-file-is-read-only ag4810@ag480b 'ag4823 '#f '#f '#())) (set! ag4981@ag4825@ag4820 ag4825@ag4820)) (begin (set! ag4827@ag4822 '#f) (set! ag4982@ag4827@ag4822 ag4827@ag4822)) (begin (set! ag4829@ag4821 (make-record-constructor-descriptor ag4825@ag4820 ag4814@ag480c ag4827@ag4822)) (set! ag4983@ag4829@ag4821 ag4829@ag4821)) (begin (set! ag482c@p? (record-predicate ag4825@ag4820)) (set! ag4984@ag482c@p? ag482c@p?)) (begin (set! ag482e@make-i/o-file-is-read-only-error (record-constructor ag4829@ag4821)) (set! ag4985@ag482e@make-i/o-file-is-read-only-error ag482e@make-i/o-file-is-read-only-error)) (begin (set! ag4830@i/o-file-is-read-only-error? (condition-predicate ag4825@ag4820)) (set! ag4986@ag4830@i/o-file-is-read-only-error? ag4830@i/o-file-is-read-only-error?)) (begin (set! ag4832@&i/o-file-is-read-only-rtd ag4825@ag4820) (set! ag4987@ag4832@&i/o-file-is-read-only-rtd ag4832@&i/o-file-is-read-only-rtd)) (begin (set! ag4834@&i/o-file-is-read-only-rcd ag4829@ag4821) (set! ag4988@ag4834@&i/o-file-is-read-only-rcd ag4834@&i/o-file-is-read-only-rcd)) (begin (set! ag483a@ag4835 (make-record-type-descriptor '&i/o-file-already-exists ag47f7@ag47f2 'ag4838 '#f '#f '#())) (set! ag4989@ag483a@ag4835 ag483a@ag4835)) (begin (set! ag483c@ag4837 '#f) (set! ag498a@ag483c@ag4837 ag483c@ag4837)) (begin (set! ag483e@ag4836 (make-record-constructor-descriptor ag483a@ag4835 ag47fb@ag47f3 ag483c@ag4837)) (set! ag498b@ag483e@ag4836 ag483e@ag4836)) (begin (set! ag4841@p? (record-predicate ag483a@ag4835)) (set! ag498c@ag4841@p? ag4841@p?)) (begin (set! ag4843@make-i/o-file-already-exists-error (record-constructor ag483e@ag4836)) (set! ag498d@ag4843@make-i/o-file-already-exists-error ag4843@make-i/o-file-already-exists-error)) (begin (set! ag4845@i/o-file-already-exists-error? (condition-predicate ag483a@ag4835)) (set! ag498e@ag4845@i/o-file-already-exists-error? ag4845@i/o-file-already-exists-error?)) (begin (set! ag4847@&i/o-file-already-exists-rtd ag483a@ag4835) (set! ag498f@ag4847@&i/o-file-already-exists-rtd ag4847@&i/o-file-already-exists-rtd)) (begin (set! ag4849@&i/o-file-already-exists-rcd ag483e@ag4836) (set! ag4990@ag4849@&i/o-file-already-exists-rcd ag4849@&i/o-file-already-exists-rcd)) (begin (set! ag484f@ag484a (make-record-type-descriptor '&i/o-file-does-not-exist ag47f7@ag47f2 'ag484d '#f '#f '#())) (set! ag4991@ag484f@ag484a ag484f@ag484a)) (begin (set! ag4851@ag484c '#f) (set! ag4992@ag4851@ag484c ag4851@ag484c)) (begin (set! ag4853@ag484b (make-record-constructor-descriptor ag484f@ag484a ag47fb@ag47f3 ag4851@ag484c)) (set! ag4993@ag4853@ag484b ag4853@ag484b)) (begin (set! ag4856@p? (record-predicate ag484f@ag484a)) (set! ag4994@ag4856@p? ag4856@p?)) (begin (set! ag4858@make-i/o-file-does-not-exist-error (record-constructor ag4853@ag484b)) (set! ag4995@ag4858@make-i/o-file-does-not-exist-error ag4858@make-i/o-file-does-not-exist-error)) (begin (set! ag485a@i/o-file-does-not-exist-error? (condition-predicate ag484f@ag484a)) (set! ag4996@ag485a@i/o-file-does-not-exist-error? ag485a@i/o-file-does-not-exist-error?)) (begin (set! ag485c@&i/o-file-does-not-exist-rtd ag484f@ag484a) (set! ag4997@ag485c@&i/o-file-does-not-exist-rtd ag485c@&i/o-file-does-not-exist-rtd)) (begin (set! ag485e@&i/o-file-does-not-exist-rcd ag4853@ag484b) (set! ag4998@ag485e@&i/o-file-does-not-exist-rcd ag485e@&i/o-file-does-not-exist-rcd)) (begin (set! ag4866@ag4861 (make-record-type-descriptor '&i/o-port ag479b@ag4796 'ag4864 '#f '#f '#((immutable port)))) (set! ag4999@ag4866@ag4861 ag4866@ag4861)) (begin (set! ag4868@ag4863 '#f) (set! ag499a@ag4868@ag4863 ag4868@ag4863)) (begin (set! ag486a@ag4862 (make-record-constructor-descriptor ag4866@ag4861 ag479f@ag4797 ag4868@ag4863)) (set! ag499b@ag486a@ag4862 ag486a@ag4862)) (begin (set! ag486d@p? (record-predicate ag4866@ag4861)) (set! ag499c@ag486d@p? ag486d@p?)) (begin (set! ag486f@make-i/o-port-error (record-constructor ag486a@ag4862)) (set! ag499d@ag486f@make-i/o-port-error ag486f@make-i/o-port-error)) (begin (set! ag4871@ag4860 (record-accessor ag4866@ag4861 '0)) (set! ag499e@ag4871@ag4860 ag4871@ag4860)) (begin (set! ag4873@i/o-port-error? (condition-predicate ag4866@ag4861)) (set! ag499f@ag4873@i/o-port-error? ag4873@i/o-port-error?)) (begin (set! ag4875@i/o-error-port (condition-accessor ag4866@ag4861 ag4871@ag4860)) (set! ag49a0@ag4875@i/o-error-port ag4875@i/o-error-port)) (begin (set! ag4877@&i/o-port-rtd ag4866@ag4861) (set! ag49a1@ag4877@&i/o-port-rtd ag4877@&i/o-port-rtd)) (begin (set! ag4879@&i/o-port-rcd ag486a@ag4862) (set! ag49a2@ag4879@&i/o-port-rcd ag4879@&i/o-port-rcd)) (begin (set! ag487f@ag487a (make-record-type-descriptor '&i/o-decoding ag4866@ag4861 'ag487d '#f '#f '#())) (set! ag49a3@ag487f@ag487a ag487f@ag487a)) (begin (set! ag4881@ag487c '#f) (set! ag49a4@ag4881@ag487c ag4881@ag487c)) (begin (set! ag4883@ag487b (make-record-constructor-descriptor ag487f@ag487a ag486a@ag4862 ag4881@ag487c)) (set! ag49a5@ag4883@ag487b ag4883@ag487b)) (begin (set! ag4886@p? (record-predicate ag487f@ag487a)) (set! ag49a6@ag4886@p? ag4886@p?)) (begin (set! ag4888@make-i/o-decoding-error (record-constructor ag4883@ag487b)) (set! ag49a7@ag4888@make-i/o-decoding-error ag4888@make-i/o-decoding-error)) (begin (set! ag488a@i/o-decoding-error? (condition-predicate ag487f@ag487a)) (set! ag49a8@ag488a@i/o-decoding-error? ag488a@i/o-decoding-error?)) (begin (set! ag488c@&i/o-decoding-rtd ag487f@ag487a) (set! ag49a9@ag488c@&i/o-decoding-rtd ag488c@&i/o-decoding-rtd)) (begin (set! ag488e@&i/o-decoding-rcd ag4883@ag487b) (set! ag49aa@ag488e@&i/o-decoding-rcd ag488e@&i/o-decoding-rcd)) (begin (set! ag4896@ag4891 (make-record-type-descriptor '&i/o-encoding ag4866@ag4861 'ag4894 '#f '#f '#((immutable char)))) (set! ag49ab@ag4896@ag4891 ag4896@ag4891)) (begin (set! ag4898@ag4893 '#f) (set! ag49ac@ag4898@ag4893 ag4898@ag4893)) (begin (set! ag489a@ag4892 (make-record-constructor-descriptor ag4896@ag4891 ag486a@ag4862 ag4898@ag4893)) (set! ag49ad@ag489a@ag4892 ag489a@ag4892)) (begin (set! ag489d@p? (record-predicate ag4896@ag4891)) (set! ag49ae@ag489d@p? ag489d@p?)) (begin (set! ag489f@make-i/o-encoding-error (record-constructor ag489a@ag4892)) (set! ag49af@ag489f@make-i/o-encoding-error ag489f@make-i/o-encoding-error)) (begin (set! ag48a1@ag4890 (record-accessor ag4896@ag4891 '0)) (set! ag49b0@ag48a1@ag4890 ag48a1@ag4890)) (begin (set! ag48a3@i/o-encoding-error? (condition-predicate ag4896@ag4891)) (set! ag49b1@ag48a3@i/o-encoding-error? ag48a3@i/o-encoding-error?)) (begin (set! ag48a5@i/o-encoding-error-char (condition-accessor ag4896@ag4891 ag48a1@ag4890)) (set! ag49b2@ag48a5@i/o-encoding-error-char ag48a5@i/o-encoding-error-char)) (begin (set! ag48a7@&i/o-encoding-rtd ag4896@ag4891) (set! ag49b3@ag48a7@&i/o-encoding-rtd ag48a7@&i/o-encoding-rtd)) (begin (set! ag48a9@&i/o-encoding-rcd ag489a@ag4892) (set! ag49b4@ag48a9@&i/o-encoding-rcd ag48a9@&i/o-encoding-rcd)) (begin (set! ag48af@ag48aa (make-record-type-descriptor '&no-infinities ag473b@ag4736 'ag48ad '#f '#f '#())) (set! ag49b5@ag48af@ag48aa ag48af@ag48aa)) (begin (set! ag48b1@ag48ac '#f) (set! ag49b6@ag48b1@ag48ac ag48b1@ag48ac)) (begin (set! ag48b3@ag48ab (make-record-constructor-descriptor ag48af@ag48aa ag473f@ag4737 ag48b1@ag48ac)) (set! ag49b7@ag48b3@ag48ab ag48b3@ag48ab)) (begin (set! ag48b6@p? (record-predicate ag48af@ag48aa)) (set! ag49b8@ag48b6@p? ag48b6@p?)) (begin (set! ag48b8@make-no-infinities-violation (record-constructor ag48b3@ag48ab)) (set! ag49b9@ag48b8@make-no-infinities-violation ag48b8@make-no-infinities-violation)) (begin (set! ag48ba@no-infinities-violation? (condition-predicate ag48af@ag48aa)) (set! ag49ba@ag48ba@no-infinities-violation? ag48ba@no-infinities-violation?)) (begin (set! ag48bc@&no-infinities-rtd ag48af@ag48aa) (set! ag49bb@ag48bc@&no-infinities-rtd ag48bc@&no-infinities-rtd)) (begin (set! ag48be@&no-infinities-rcd ag48b3@ag48ab) (set! ag49bc@ag48be@&no-infinities-rcd ag48be@&no-infinities-rcd)) (begin (set! ag48c4@ag48bf (make-record-type-descriptor '&no-nans ag473b@ag4736 'ag48c2 '#f '#f '#())) (set! ag49bd@ag48c4@ag48bf ag48c4@ag48bf)) (begin (set! ag48c6@ag48c1 '#f) (set! ag49be@ag48c6@ag48c1 ag48c6@ag48c1)) (begin (set! ag48c8@ag48c0 (make-record-constructor-descriptor ag48c4@ag48bf ag473f@ag4737 ag48c6@ag48c1)) (set! ag49bf@ag48c8@ag48c0 ag48c8@ag48c0)) (begin (set! ag48cb@p? (record-predicate ag48c4@ag48bf)) (set! ag49c0@ag48cb@p? ag48cb@p?)) (begin (set! ag48cd@make-no-nans-violation (record-constructor ag48c8@ag48c0)) (set! ag49c1@ag48cd@make-no-nans-violation ag48cd@make-no-nans-violation)) (begin (set! ag48cf@no-nans-violation? (condition-predicate ag48c4@ag48bf)) (set! ag49c2@ag48cf@no-nans-violation? ag48cf@no-nans-violation?)) (begin (set! ag48d1@&no-nans-rtd ag48c4@ag48bf) (set! ag49c3@ag48d1@&no-nans-rtd ag48d1@&no-nans-rtd)) (begin (set! ag48d3@&no-nans-rcd ag48c8@ag48c0) (set! ag49c4@ag48d3@&no-nans-rcd ag48d3@&no-nans-rcd)) (void))
(begin (begin (ag24a8@ag245d@current-primitive-locations (lambda (ag4e90@x) ((lambda (ag4e92@t) (if ag4e92@t (cdr ag4e92@t) '#f)) (assq ag4e90@x '((&no-nans-rcd . ag49c4@ag48d3@&no-nans-rcd) (&no-nans-rtd . ag49c3@ag48d1@&no-nans-rtd) (&no-infinities-rcd . ag49bc@ag48be@&no-infinities-rcd) (&no-infinities-rtd . ag49bb@ag48bc@&no-infinities-rtd) (&i/o-encoding-rcd . ag49b4@ag48a9@&i/o-encoding-rcd) (&i/o-encoding-rtd . ag49b3@ag48a7@&i/o-encoding-rtd) (&i/o-decoding-rcd . ag49aa@ag488e@&i/o-decoding-rcd) (&i/o-decoding-rtd . ag49a9@ag488c@&i/o-decoding-rtd) (&i/o-port-rcd . ag49a2@ag4879@&i/o-port-rcd) (&i/o-port-rtd . ag49a1@ag4877@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . ag4998@ag485e@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . ag4997@ag485c@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . ag4990@ag4849@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . ag498f@ag4847@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . ag4988@ag4834@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . ag4987@ag4832@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . ag4980@ag481f@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . ag497f@ag481d@&i/o-file-protection-rtd) (&i/o-filename-rcd . ag4978@ag480a@&i/o-filename-rcd) (&i/o-filename-rtd . ag4977@ag4808@&i/o-filename-rtd) (&i/o-invalid-position-rcd . ag496e@ag47ef@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . ag496d@ag47ed@&i/o-invalid-position-rtd) (&i/o-write-rcd . ag4964@ag47d4@&i/o-write-rcd) (&i/o-write-rtd . ag4963@ag47d2@&i/o-write-rtd) (&i/o-read-rcd . ag495c@ag47bf@&i/o-read-rcd) (&i/o-read-rtd . ag495b@ag47bd@&i/o-read-rtd) (&i/o-rcd . ag4954@ag47aa@&i/o-rcd) (&i/o-rtd . ag4953@ag47a8@&i/o-rtd) (&undefined-rcd . ag494c@ag4795@&undefined-rcd) (&undefined-rtd . ag494b@ag4793@&undefined-rtd) (&syntax-rcd . ag4944@ag4780@&syntax-rcd) (&syntax-rtd . ag4943@ag477e@&syntax-rtd) (&lexical-rcd . ag4938@ag475f@&lexical-rcd) (&lexical-rtd . ag4937@ag475d@&lexical-rtd) (&implementation-restriction-rcd . ag4930@ag474a@&implementation-restriction-rcd) (&implementation-restriction-rtd . ag492f@ag4748@&implementation-restriction-rtd) (&non-continuable-rcd . ag4928@ag4735@&non-continuable-rcd) (&non-continuable-rtd . ag4927@ag4733@&non-continuable-rtd) (&who-rcd . ag4920@ag4720@&who-rcd) (&who-rtd . ag491f@ag471e@&who-rtd) (&irritants-rcd . ag4916@ag4705@&irritants-rcd) (&irritants-rtd . ag4915@ag4703@&irritants-rtd) (&assertion-rcd . ag490c@ag46ea@&assertion-rcd) (&assertion-rtd . ag490b@ag46e8@&assertion-rtd) (&violation-rcd . ag4904@ag46d5@&violation-rcd) (&violation-rtd . ag4903@ag46d3@&violation-rtd) (&error-rcd . ag48fc@ag46c0@&error-rcd) (&error-rtd . ag48fb@ag46be@&error-rtd) (&serious-rcd . ag48f4@ag46ab@&serious-rcd) (&serious-rtd . ag48f3@ag46a9@&serious-rtd) (&warning-rcd . ag48ec@ag4696@&warning-rcd) (&warning-rtd . ag48eb@ag4694@&warning-rtd) (&message-rcd . ag48e4@ag4681@&message-rcd) (&message-rtd . ag48e3@ag467f@&message-rtd) (&condition-rcd . ag48da@ag4622@&condition-rcd) (&condition-rtd . ag48d9@ag4620@&condition-rtd) (syntax-error . ag45fc@ag2bdf@syntax-error) (syntax-dispatch . ag459a@ag2b03@syntax-dispatch) (load . ag4b39@ag49e4@load) (interaction-environment . ag4605@ag2bf1@interaction-environment) (library-path . ag270f@ag254b@library-path) (mosh-cache-dir . ag2456@ag2336@mosh-cache-dir) (make-parameter . ag2455@ag2334@make-parameter) (make-variable-transformer . ag4558@ag2930@make-variable-transformer) (identifier? . ag45ff@ag2be5@identifier?) (generate-temporaries . ag45f5@ag2bd1@generate-temporaries) (free-identifier=? . ag45f6@ag2bd3@free-identifier=?) (syntax->datum . ag4601@ag2be9@syntax->datum) (datum->syntax . ag4600@ag2be7@datum->syntax) (bound-identifier=? . ag45f7@ag2bd5@bound-identifier=?) (make-i/o-write-error . ag4961@ag47ce@make-i/o-write-error) (make-i/o-read-error . ag4959@ag47b9@make-i/o-read-error) (make-i/o-port-error . ag499d@ag486f@make-i/o-port-error) (make-i/o-invalid-position-error . ag4969@ag47e5@make-i/o-invalid-position-error) (make-i/o-filename-error . ag4973@ag4800@make-i/o-filename-error) (make-i/o-file-protection-error . ag497d@ag4819@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . ag4985@ag482e@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . ag4995@ag4858@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . ag498d@ag4843@make-i/o-file-already-exists-error) (make-i/o-error . ag4951@ag47a4@make-i/o-error) (make-i/o-encoding-error . ag49af@ag489f@make-i/o-encoding-error) (make-i/o-decoding-error . ag49a7@ag4888@make-i/o-decoding-error) (i/o-write-error? . ag4962@ag47d0@i/o-write-error?) (i/o-read-error? . ag495a@ag47bb@i/o-read-error?) (i/o-port-error? . ag499f@ag4873@i/o-port-error?) (i/o-invalid-position-error? . ag496b@ag47e9@i/o-invalid-position-error?) (i/o-filename-error? . ag4975@ag4804@i/o-filename-error?) (i/o-file-protection-error? . ag497e@ag481b@i/o-file-protection-error?) (i/o-file-is-read-only-error? . ag4986@ag4830@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . ag4996@ag485a@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . ag498e@ag4845@i/o-file-already-exists-error?) (i/o-error? . ag4952@ag47a6@i/o-error?) (i/o-error-position . ag496c@ag47eb@i/o-error-position) (i/o-error-port . ag49a0@ag4875@i/o-error-port) (i/o-error-filename . ag4976@ag4806@i/o-error-filename) (i/o-encoding-error? . ag49b1@ag48a3@i/o-encoding-error?) (i/o-encoding-error-char . ag49b2@ag48a5@i/o-encoding-error-char) (i/o-decoding-error? . ag49a8@ag488a@i/o-decoding-error?) (scheme-report-environment . ag45ec@ag2bbf@scheme-report-environment) (null-environment . ag45eb@ag2bbd@null-environment) (command-line . ag4b36@ag49de@command-line) (eval . ag45ee@ag2bc3@eval) (environment . ag45ea@ag2bbb@environment) (who-condition? . ag491d@ag471a@who-condition?) (warning? . ag48ea@ag4692@warning?) (violation? . ag4902@ag46d1@violation?) (undefined-violation? . ag494a@ag4791@undefined-violation?) (syntax-violation? . ag4940@ag4778@syntax-violation?) (syntax-violation-subform . ag4942@ag477c@syntax-violation-subform) (syntax-violation-form . ag4941@ag477a@syntax-violation-form) (syntax-violation . ag45fe@ag2be3@syntax-violation) (serious-condition? . ag48f2@ag46a7@serious-condition?) (non-continuable-violation? . ag4926@ag4731@non-continuable-violation?) (message-condition? . ag48e1@ag467b@message-condition?) (make-who-condition . ag491b@ag4716@make-who-condition) (make-warning . ag48e9@ag4690@make-warning) (make-violation . ag4901@ag46cf@make-violation) (make-undefined-violation . ag4949@ag478f@make-undefined-violation) (make-syntax-violation . ag493d@ag4772@make-syntax-violation) (make-serious-condition . ag48f1@ag46a5@make-serious-condition) (make-non-continuable-violation . ag4925@ag472f@make-non-continuable-violation) (make-message-condition . ag48df@ag4677@make-message-condition) (make-lexical-violation . ag4935@ag4759@make-lexical-violation) (make-irritants-condition . ag4911@ag46fb@make-irritants-condition) (make-implementation-restriction-violation . ag492d@ag4744@make-implementation-restriction-violation) (make-error . ag48f9@ag46ba@make-error) (make-assertion-violation . ag4909@ag46e4@make-assertion-violation) (lexical-violation? . ag4936@ag475b@lexical-violation?) (irritants-condition? . ag4913@ag46ff@irritants-condition?) (implementation-restriction-violation? . ag492e@ag4746@implementation-restriction-violation?) (error? . ag48fa@ag46bc@error?) (condition-who . ag491e@ag471c@condition-who) (condition-message . ag48e2@ag467d@condition-message) (condition-irritants . ag4914@ag4701@condition-irritants) (assertion-violation? . ag490a@ag46e6@assertion-violation?) (no-nans-violation? . ag49c2@ag48cf@no-nans-violation?) (no-infinities-violation? . ag49ba@ag48ba@no-infinities-violation?) (make-no-nans-violation . ag49c1@ag48cd@make-no-nans-violation) (make-no-infinities-violation . ag49b9@ag48b8@make-no-infinities-violation) (assertion-error . ag45fb@ag2bdd@assertion-error)))))) (ag271f@ag256b@install-library 'ag4e6d '(mosh interaction) '() '() '() '() '((regexp? . ag4e65) (alist->eq-hash-table . ag4e61) (format . ag4e5e) (string-split . ag4e53) (call-process . ag4e4d) (set-current-directory! . ag4e49) (expand-path . ag4e48) (current-directory . ag4e47) (%spawn . ag4e46) (%waitpid . ag4e45) (simple-struct-name . ag4e44) (simple-struct-set! . ag4e43) (simple-struct-ref . ag4e42) (make-simple-struct . ag4e41) (simple-struct? . ag4e40) (pointer-ref-c-int64 . ag4e3f) (pointer-ref-c-int32 . ag4e3e) (pointer-ref-c-int16 . ag4e3d) (pointer-ref-c-int8 . ag4e3c) (pointer-ref-c-uint64 . ag4e3b) (pointer-ref-c-uint32 . ag4e3a) (pointer-ref-c-uint16 . ag4e39) (pointer-ref-c-uint8 . ag4e38) (pointer-set-c-uint64! . ag4e37) (pointer-set-c-uint32! . ag4e36) (pointer-set-c-uint16! . ag4e35) (pointer-set-c-uint8! . ag4e34) (pointer-set-c-int64! . ag4e33) (pointer-set-c-int32! . ag4e32) (pointer-set-c-int16! . ag4e31) (pointer-set-c-int8! . ag4e30) (pointer-set-c-pointer! . ag4e2f) (pointer-set-c-double! . ag4e2e) (pointer-set-c-float! . ag4e2d) (pointer-set-c-long-long! . ag4e2c) (pointer-set-c-long! . ag4e2b) (pointer-set-c-int! . ag4e2a) (pointer-set-c-short! . ag4e29) (pointer-set-c-char! . ag4e28) (pointer-ref-c-pointer . ag4e27) (pointer-ref-c-double . ag4e26) (pointer-ref-c-float . ag4e25) (pointer-ref-c-unsigned-long-long . ag4e24) (pointer-ref-c-signed-long-long . ag4e23) (pointer-ref-c-unsigned-long . ag4e22) (pointer-ref-c-signed-long . ag4e21) (pointer-ref-c-unsigned-int . ag4e20) (pointer-ref-c-signed-int . ag4e1f) (pointer-ref-c-unsigned-short . ag4e1e) (pointer-ref-c-signed-short . ag4e1d) (pointer-ref-c-unsigned-char . ag4e1c) (pointer-ref-c-signed-char . ag4e1b) (pointer->integer . ag4e1a) (integer->pointer . ag4e19) (pointer? . ag4e18) (shared-errno . ag4e17) (%ffi-supported? . ag4e14) (%ffi-pointer->string . ag4e13) (%ffi-call->string-or-zero . ag4e12) (%ffi-call->double . ag4e11) (%ffi-call->void* . ag4e10) (%ffi-call->void . ag4e0f) (%ffi-call->char . ag4e0e) (%ffi-call->int . ag4e0d) (%ffi-lookup . ag4e0c) (%ffi-open . ag4e0b) (%fork . ag4e0a) (%pipe . ag4e09) (p . ag4e08) (whereis . ag4dec) (register . ag4deb) (vm-join! . ag4dea) (vm-set-value! . ag4de9) (vm? . ag4de8) (main-vm? . ag4de7) (vm-eval . ag4de6) (vm-self . ag4de5) (vm-start! . ag4de4) (make-vm . ag4de3) (mutex-try-lock! . ag4de2) (mutex-unlock! . ag4de1) (mutex-lock! . ag4de0) (mutex? . ag4ddf) (make-mutex . ag4dde) (condition-variable-notify-all! . ag4ddd) (condition-variable-notify! . ag4ddc) (condition-variable-wait! . ag4ddb) (make-condition-variable . ag4dda) (string-upcase . ag4dc2) (string-titlecase . ag4dc1) (string-normalize-nfkd . ag4dc0) (string-normalize-nfkc . ag4dbf) (string-normalize-nfd . ag4dbe) (string-normalize-nfc . ag4dbd) (string-foldcase . ag4dbc) (string-downcase . ag4dbb) (string-ci>? . ag4dba) (string-ci>=? . ag4db9) (string-ci=? . ag4db8) (string-ci<? . ag4db7) (string-ci<=? . ag4db6) (char-whitespace? . ag4db5) (char-upper-case? . ag4db4) (char-title-case? . ag4db3) (char-numeric? . ag4db2) (char-lower-case? . ag4db1) (char-general-category . ag4db0) (char-upcase . ag4daf) (char-titlecase . ag4dae) (char-foldcase . ag4dad) (char-downcase . ag4dac) (char-ci>? . ag4dab) (char-ci>=? . ag4daa) (char-ci=? . ag4da9) (char-ci<? . ag4da8) (char-ci<=? . ag4da7) (char-alphabetic? . ag4da6) (make-variable-transformer . ag292f) (identifier? . ag2be4) (generate-temporaries . ag2bd0) (free-identifier=? . ag2bd2) (syntax->datum . ag2be8) (datum->syntax . ag2be6) (bound-identifier=? . ag2bd4) (record-type-descriptor? . ag4da5) (record-predicate . ag4da4) (record-mutator . ag4da3) (record-constructor . ag4da2) (record-accessor . ag4da1) (make-record-type-descriptor . ag4da0) (make-record-constructor-descriptor . ag4d9f) (record? . ag4d9e) (record-type-uid . ag4d9d) (record-type-sealed? . ag4d9c) (record-type-parent . ag4d9b) (record-type-opaque? . ag4d9a) (record-type-name . ag4d99) (record-type-generative? . ag4d98) (record-type-field-names . ag4d97) (record-rtd . ag4d96) (record-field-mutable? . ag4d95) (delete-file . ag4d94) (file-exists? . ag4d93) (vector-sort! . ag4d92) (vector-sort . ag4d91) (list-sort . ag4d90) (symbol-hash . ag4d8f) (string-ci-hash . ag4d8e) (string-hash . ag4d8d) (equal-hash . ag4d8c) (hashtable-equivalence-function . ag4d8b) (make-hashtable . ag4d8a) (hashtable-hash-function . ag4d89) (make-eqv-hashtable . ag4d88) (make-eq-hashtable . ag4d87) (hashtable? . ag4d86) (hashtable-update! . ag4d85) (hashtable-size . ag4d84) (hashtable-set! . ag4d83) (hashtable-ref . ag4d82) (hashtable-mutable? . ag4d81) (hashtable-keys . ag4d80) (hashtable-entries . ag4d7f) (hashtable-delete! . ag4d7e) (hashtable-copy . ag4d7d) (hashtable-contains? . ag4d7c) (hashtable-clear! . ag4d7b) (call-with-output-file . ag4d7a) (call-with-input-file . ag4d79) (write-char . ag4d78) (write . ag4d77) (with-output-to-file . ag4d76) (with-input-from-file . ag4d75) (read-char . ag4d74) (read . ag4d73) (peek-char . ag4d72) (open-output-file . ag4d71) (open-input-file . ag4d70) (newline . ag4d6f) (display . ag4d6e) (close-output-port . ag4d6d) (close-input-port . ag4d6c) (eof-object? . ag4d6b) (eof-object . ag4d6a) (current-error-port . ag4d69) (current-output-port . ag4d68) (current-input-port . ag4d67) (output-port? . ag4d66) (input-port? . ag4d65) (utf-8-codec . ag4d64) (utf-16-codec . ag4d63) (transcoder-error-handling-mode . ag4d62) (transcoder-eol-style . ag4d61) (transcoder-codec . ag4d60) (transcoded-port . ag4d5f) (textual-port? . ag4d5e) (string->bytevector . ag4d5d) (standard-output-port . ag4d5c) (standard-input-port . ag4d5b) (standard-error-port . ag4d5a) (set-port-position! . ag4d59) (put-u8 . ag4d58) (put-string . ag4d57) (put-datum . ag4d56) (put-char . ag4d55) (put-bytevector . ag4d54) (port? . ag4d53) (port-transcoder . ag4d52) (port-position . ag4d51) (port-has-set-port-position!? . ag4d50) (port-has-port-position? . ag4d4f) (port-eof? . ag4d4e) (output-port-buffer-mode . ag4d4d) (open-string-output-port . ag4d4c) (open-string-input-port . ag4d4b) (open-file-output-port . ag4d4a) (open-file-input/output-port . ag4d49) (open-file-input-port . ag4d48) (open-bytevector-output-port . ag4d47) (open-bytevector-input-port . ag4d46) (native-transcoder . ag4d45) (native-eol-style . ag4d44) (make-transcoder . ag4d43) (latin-1-codec . ag4d42) (make-i/o-write-error . ag47cd) (make-i/o-read-error . ag47b8) (make-i/o-port-error . ag486e) (make-i/o-invalid-position-error . ag47e4) (make-i/o-filename-error . ag47ff) (make-i/o-file-protection-error . ag4818) (make-i/o-file-is-read-only-error . ag482d) (make-i/o-file-does-not-exist-error . ag4857) (make-i/o-file-already-exists-error . ag4842) (make-i/o-error . ag47a3) (make-i/o-encoding-error . ag489e) (make-i/o-decoding-error . ag4887) (make-custom-textual-output-port . ag4d41) (make-custom-textual-input/output-port . ag4d40) (make-custom-textual-input-port . ag4d3f) (make-custom-binary-output-port . ag4d3e) (make-custom-binary-input/output-port . ag4d3d) (make-custom-binary-input-port . ag4d3c) (make-bytevector . ag4d3b) (lookahead-u8 . ag4d3a) (lookahead-char . ag4d39) (i/o-write-error? . ag47cf) (i/o-read-error? . ag47ba) (i/o-port-error? . ag4872) (i/o-invalid-position-error? . ag47e8) (i/o-filename-error? . ag4803) (i/o-file-protection-error? . ag481a) (i/o-file-is-read-only-error? . ag482f) (i/o-file-does-not-exist-error? . ag4859) (i/o-file-already-exists-error? . ag4844) (i/o-error? . ag47a5) (i/o-error-position . ag47ea) (i/o-error-port . ag4874) (i/o-error-filename . ag4805) (i/o-encoding-error? . ag48a2) (i/o-encoding-error-char . ag48a4) (i/o-decoding-error? . ag4889) (get-u8 . ag4d38) (get-string-n! . ag4d37) (get-string-n . ag4d36) (get-string-all . ag4d35) (get-line . ag4d34) (get-datum . ag4d33) (get-char . ag4d32) (get-bytevector-some . ag4d31) (get-bytevector-n! . ag4d30) (get-bytevector-n . ag4d2f) (get-bytevector-all . ag4d2e) (flush-output-port . ag4d2d) (close-port . ag4d2c) (exit . ag4d24) (command-line . ag49dd) (string-fill! . ag4d23) (string-set! . ag4d22) (set-cdr! . ag4d21) (set-car! . ag4d20) (remove . ag4d1f) (remv . ag4d1e) (remp . ag4d1d) (remq . ag4d1c) (partition . ag4d1b) (memv . ag4d1a) (memq . ag4d19) (memp . ag4d18) (member . ag4d17) (exists . ag4d16) (for-all . ag4d15) (fold-right . ag4d14) (fold-left . ag4d13) (find . ag4d12) (filter . ag4d11) (cons* . ag4d10) (assv . ag4d0f) (assq . ag4d0e) (assp . ag4d0d) (assoc . ag4d0c) (call-with-string-output-port . ag4d0b) (call-with-port . ag4d0a) (call-with-bytevector-output-port . ag4d09) (bytevector->string . ag4d08) (buffer-mode? . ag4d07) (binary-port? . ag4d06) (with-exception-handler . ag4d05) (raise-continuable . ag4d04) (raise . ag4d03) (eval . ag2bc2) (environment . ag2bba) (make-enumeration . ag4d02) (enum-set=? . ag4d01) (enum-set-universe . ag4d00) (enum-set-union . ag4cff) (enum-set-subset? . ag4cfe) (enum-set-projection . ag4cfd) (enum-set-member? . ag4cfc) (enum-set-intersection . ag4cfb) (enum-set-indexer . ag4cfa) (enum-set-difference . ag4cf9) (enum-set-constructor . ag4cf8) (enum-set-complement . ag4cf7) (enum-set->list . ag4cf6) (who-condition? . ag4719) (warning? . ag4691) (violation? . ag46d0) (undefined-violation? . ag4790) (syntax-violation? . ag4777) (syntax-violation-subform . ag477b) (syntax-violation-form . ag4779) (syntax-violation . ag2be2) (simple-conditions . ag4cf5) (serious-condition? . ag46a6) (non-continuable-violation? . ag4730) (message-condition? . ag467a) (make-who-condition . ag4715) (make-warning . ag468f) (make-violation . ag46ce) (make-undefined-violation . ag478e) (make-syntax-violation . ag4771) (make-serious-condition . ag46a4) (make-non-continuable-violation . ag472e) (make-message-condition . ag4676) (make-lexical-violation . ag4758) (make-irritants-condition . ag46fa) (make-implementation-restriction-violation . ag4743) (make-error . ag46b9) (make-assertion-violation . ag46e3) (lexical-violation? . ag475a) (irritants-condition? . ag46fe) (implementation-restriction-violation? . ag4745) (error? . ag46bb) (condition-who . ag471b) (condition-predicate . ag4cf4) (condition-message . ag467c) (condition-irritants . ag4700) (condition-accessor . ag4cf3) (condition . ag4cf2) (assertion-violation? . ag46e5) (condition? . ag4cf1) (utf32->string . ag4cf0) (utf16->string . ag4cef) (utf8->string . ag4cee) (uint-list->bytevector . ag4ced) (u8-list->bytevector . ag4cec) (string->utf8 . ag4ceb) (string->utf32 . ag4cea) (string->utf16 . ag4ce9) (sint-list->bytevector . ag4ce8) (native-endianness . ag4ce7) (bytevector? . ag4ce6) (bytevector=? . ag4ce5) (bytevector-uint-set! . ag4ce4) (bytevector-uint-ref . ag4ce3) (bytevector-u8-set! . ag4ce2) (bytevector-u8-ref . ag4ce1) (bytevector-u64-set! . ag4ce0) (bytevector-u64-ref . ag4cdf) (bytevector-u64-native-set! . ag4cde) (bytevector-u64-native-ref . ag4cdd) (bytevector-u32-set! . ag4cdc) (bytevector-u32-ref . ag4cdb) (bytevector-u32-native-set! . ag4cda) (bytevector-u32-native-ref . ag4cd9) (bytevector-u16-set! . ag4cd8) (bytevector-u16-ref . ag4cd7) (bytevector-u16-native-set! . ag4cd6) (bytevector-u16-native-ref . ag4cd5) (bytevector-sint-set! . ag4cd4) (bytevector-sint-ref . ag4cd3) (bytevector-s8-set! . ag4cd2) (bytevector-s8-ref . ag4cd1) (bytevector-s64-set! . ag4cd0) (bytevector-s64-ref . ag4ccf) (bytevector-s64-native-set! . ag4cce) (bytevector-s64-native-ref . ag4ccd) (bytevector-s32-set! . ag4ccc) (bytevector-s32-ref . ag4ccb) (bytevector-s32-native-set! . ag4cca) (bytevector-s32-native-ref . ag4cc9) (bytevector-s16-set! . ag4cc8) (bytevector-s16-ref . ag4cc7) (bytevector-s16-native-set! . ag4cc6) (bytevector-s16-native-ref . ag4cc5) (bytevector-length . ag4cc4) (bytevector-ieee-single-ref . ag4cc3) (bytevector-ieee-single-set! . ag4cc2) (bytevector-ieee-single-native-set! . ag4cc1) (bytevector-ieee-single-native-ref . ag4cc0) (bytevector-ieee-double-set! . ag4cbf) (bytevector-ieee-double-ref . ag4cbe) (bytevector-ieee-double-native-set! . ag4cbd) (bytevector-ieee-double-native-ref . ag4cbc) (bytevector-fill! . ag4cbb) (bytevector-copy! . ag4cba) (bytevector-copy . ag4cb9) (bytevector->uint-list . ag4cb8) (bytevector->u8-list . ag4cb7) (bytevector->sint-list . ag4cb6) (no-nans-violation? . ag48ce) (no-infinities-violation? . ag48b9) (make-no-nans-violation . ag48cc) (make-no-infinities-violation . ag48b7) (real->flonum . ag4cb5) (flzero? . ag4cb4) (fltruncate . ag4cb3) (fltan . ag4cb2) (flsqrt . ag4cb1) (flsin . ag4cb0) (flround . ag4caf) (flpositive? . ag4cae) (flonum? . ag4cad) (flodd? . ag4cac) (flnumerator . ag4cab) (flnegative? . ag4caa) (flnan? . ag4ca9) (flmod0 . ag4ca8) (flmod . ag4ca7) (flmin . ag4ca6) (flmax . ag4ca5) (fllog . ag4ca4) (flinteger? . ag4ca3) (flinfinite? . ag4ca2) (flfloor . ag4ca1) (flfinite? . ag4ca0) (flexpt . ag4c9f) (flexp . ag4c9e) (fleven? . ag4c9d) (fldiv0-and-mod0 . ag4c9c) (fldiv0 . ag4c9b) (fldiv-and-mod . ag4c9a) (fldiv . ag4c99) (fldenominator . ag4c98) (flcos . ag4c97) (flceiling . ag4c96) (flatan . ag4c95) (flasin . ag4c94) (flacos . ag4c93) (flabs . ag4c92) (fl>? . ag4c91) (fl>=? . ag4c90) (fl=? . ag4c8f) (fl<? . ag4c8e) (fl<=? . ag4c8d) (fl/ . ag4c8c) (fl- . ag4c8b) (fl+ . ag4c8a) (fl* . ag4c89) (fixnum->flonum . ag4c88) (fxzero? . ag4c87) (fxxor . ag4c86) (fxrotate-bit-field . ag4c85) (fxreverse-bit-field . ag4c84) (fxpositive? . ag4c83) (fxodd? . ag4c82) (fxnot . ag4c81) (fxnegative? . ag4c80) (fxmod0 . ag4c7f) (fxmod . ag4c7e) (fxmin . ag4c7d) (fxmax . ag4c7c) (fxlength . ag4c7b) (fxior . ag4c7a) (fxif . ag4c79) (fxfirst-bit-set . ag4c78) (fxeven? . ag4c77) (fxdiv0-and-mod0 . ag4c76) (fxdiv0 . ag4c75) (fxdiv-and-mod . ag4c74) (fxdiv . ag4c73) (fxcopy-bit-field . ag4c72) (fxcopy-bit . ag4c71) (fxbit-set? . ag4c70) (fxbit-field . ag4c6f) (fxbit-count . ag4c6e) (fxarithmetic-shift-right . ag4c6d) (fxarithmetic-shift-left . ag4c6c) (fxarithmetic-shift . ag4c6b) (fxand . ag4c6a) (fx>? . ag4c69) (fx>=? . ag4c68) (fx=? . ag4c67) (fx<? . ag4c66) (fx<=? . ag4c65) (fx-/carry . ag4c64) (fx- . ag4c63) (fx+/carry . ag4c62) (fx+ . ag4c61) (fx*/carry . ag4c60) (fx* . ag4c5f) (greatest-fixnum . ag4c5e) (least-fixnum . ag4c5d) (fixnum-width . ag4c5c) (fixnum? . ag4c5b) (bitwise-rotate-bit-field . ag4c5a) (bitwise-reverse-bit-field . ag4c59) (bitwise-length . ag4c58) (bitwise-if . ag4c57) (bitwise-first-bit-set . ag4c56) (bitwise-copy-bit-field . ag4c55) (bitwise-copy-bit . ag4c54) (bitwise-bit-set? . ag4c53) (bitwise-bit-field . ag4c52) (bitwise-bit-count . ag4c51) (bitwise-xor . ag4c50) (bitwise-ior . ag4c4f) (bitwise-and . ag4c4e) (bitwise-not . ag4c4d) (bitwise-arithmetic-shift-right . ag4c4c) (bitwise-arithmetic-shift-left . ag4c4b) (bitwise-arithmetic-shift . ag4c4a) (zero? . ag4c49) (vector? . ag4c48) (vector-set! . ag4c47) (vector-ref . ag4c46) (vector-map . ag4c45) (vector-length . ag4c44) (vector-for-each . ag4c43) (vector-fill! . ag4c42) (vector->list . ag4c41) (vector . ag4c40) (values . ag4c3f) (truncate . ag4c3e) (tan . ag4c3d) (symbol? . ag4c3c) (symbol=? . ag4c3b) (symbol->string . ag4c3a) (substring . ag4c39) (string? . ag4c38) (string>? . ag4c37) (string>=? . ag4c36) (string=? . ag4c35) (string<? . ag4c34) (string<=? . ag4c33) (string-ref . ag4c32) (string-length . ag4c31) (string-for-each . ag4c30) (string-copy . ag4c2f) (string-append . ag4c2e) (string->symbol . ag4c2d) (string->number . ag4c2c) (string->list . ag4c2b) (string . ag4c2a) (sqrt . ag4c29) (sin . ag4c28) (round . ag4c27) (reverse . ag4c26) (real? . ag4c25) (real-valued? . ag4c24) (real-part . ag4c23) (rationalize . ag4c22) (rational? . ag4c21) (rational-valued? . ag4c20) (procedure? . ag4c1f) (positive? . ag4c1e) (pair? . ag4c1d) (odd? . ag4c1c) (numerator . ag4c1b) (number? . ag4c1a) (number->string . ag4c19) (null? . ag4c18) (not . ag4c17) (negative? . ag4c16) (nan? . ag4c15) (min . ag4c14) (max . ag4c13) (map . ag4c12) (make-vector . ag4c11) (make-string . ag4c10) (make-rectangular . ag4c0f) (make-polar . ag4c0e) (magnitude . ag4c0d) (log . ag4c0c) (list? . ag4c0b) (list-tail . ag4c0a) (list-ref . ag4c09) (list->vector . ag4c08) (list->string . ag4c07) (list . ag4c06) (length . ag4c05) (lcm . ag4c04) (integer? . ag4c03) (integer-valued? . ag4c02) (integer->char . ag4c01) (infinite? . ag4c00) (inexact? . ag4bff) (inexact . ag4bfe) (imag-part . ag4bfd) (gcd . ag4bfc) (for-each . ag4bfb) (floor . ag4bfa) (finite? . ag4bf9) (expt . ag4bf8) (exp . ag4bf7) (exact? . ag4bf6) (exact-integer-sqrt . ag4bf5) (exact . ag4bf4) (even? . ag4bf3) (error . ag4bf2) (eqv? . ag4bf1) (equal? . ag4bf0) (eq? . ag4bef) (dynamic-wind . ag4bee) (div0-and-mod0 . ag4bed) (mod0 . ag4bec) (div0 . ag4beb) (div-and-mod . ag4bea) (mod . ag4be9) (div . ag4be8) (denominator . ag4be7) (cos . ag4be6) (cons . ag4be5) (complex? . ag4be4) (char? . ag4be3) (char>? . ag4be2) (char>=? . ag4be1) (char=? . ag4be0) (char<? . ag4bdf) (char<=? . ag4bde) (char->integer . ag4bdd) (ceiling . ag4bdc) (call-with-values . ag4bdb) (call/cc . ag4bda) (call-with-current-continuation . ag4bd9) (cddddr . ag4bd8) (cdddar . ag4bd7) (cddadr . ag4bd6) (cddaar . ag4bd5) (cdaddr . ag4bd4) (cdadar . ag4bd3) (cdaadr . ag4bd2) (cdaaar . ag4bd1) (cadddr . ag4bd0) (caddar . ag4bcf) (cadadr . ag4bce) (cadaar . ag4bcd) (caaddr . ag4bcc) (caadar . ag4bcb) (caaadr . ag4bca) (caaaar . ag4bc9) (cdddr . ag4bc8) (cddar . ag4bc7) (cdadr . ag4bc6) (cdaar . ag4bc5) (caddr . ag4bc4) (cadar . ag4bc3) (caadr . ag4bc2) (caaar . ag4bc1) (cddr . ag4bc0) (cdar . ag4bbf) (cadr . ag4bbe) (caar . ag4bbd) (cdr . ag4bbc) (car . ag4bbb) (boolean? . ag4bba) (boolean=? . ag4bb9) (atan . ag4bb8) (assertion-violation . ag4bb7) (asin . ag4bb6) (apply . ag4bb5) (append . ag4bb4) (angle . ag4bb3) (acos . ag4bb2) (abs . ag4bb1) (/ . ag4bb0) (* . ag4baf) (- . ag4bae) (+ . ag4bad) (>= . ag4bac) (> . ag4bab) (= . ag4baa) (<= . ag4ba9) (< . ag4ba8) (library . ag4ba7) (&no-nans . ag4ba6) (&no-infinities . ag4ba5) (&i/o-encoding . ag4ba4) (&i/o-decoding . ag4ba3) (&i/o-port . ag4ba2) (&i/o-file-does-not-exist . ag4ba1) (&i/o-file-already-exists . ag4ba0) (&i/o-file-is-read-only . ag4b9f) (&i/o-file-protection . ag4b9e) (&i/o-filename . ag4b9d) (&i/o-invalid-position . ag4b9c) (&i/o-write . ag4b9b) (&i/o-read . ag4b9a) (&i/o . ag4b99) (&undefined . ag4b98) (&syntax . ag4b97) (&lexical . ag4b96) (&implementation-restriction . ag4b95) (&non-continuable . ag4b94) (&who . ag4b93) (&irritants . ag4b92) (&assertion . ag4b91) (&violation . ag4b90) (&error . ag4b8f) (&serious . ag4b8e) (&warning . ag4b8d) (&message . ag4b8c) (&condition . ag4b8b) (define-condition-type . ag4b8a) (define-enumeration . ag4b89) (define-record-type . ag4b88) (parent-rtd . ag4b87) (nongenerative . ag4b86) (opaque . ag4b85) (sealed . ag4b84) (protocol . ag4b83) (parent . ag4b82) (immutable . ag4b81) (mutable . ag4b80) (fields . ag4b7f) (error-handling-mode . ag4b7e) (file-options . ag4b7d) (buffer-mode . ag4b7c) (eol-style . ag4b7b) (guard . ag4b7a) (unsyntax-splicing . ag4b77) (unsyntax . ag4b76) (unquote-splicing . ag4b75) (unquote . ag4b74) (_ . ag4b73) (else . ag4b72) (=> . ag4b71) (... . ag4b70) (assert . ag4b6f) (endianness . ag4b6e) (time . ag4b6c) (do . ag4b6b) (cond . ag4b6a) (let* . ag4b69) (let . ag4b68) (let*-values . ag4b67) (let-values . ag4b66) (identifier-syntax . ag4b65) (with-syntax . ag4b64) (quasisyntax . ag4b63) (quasiquote . ag4b62) (syntax-rules . ag4b61) (include . ag4b60) (record-constructor-descriptor . ag4b5e) (record-type-descriptor . ag4b5d) (case . ag4b5c) (unless . ag4b5a) (when . ag4b59) (or . ag4b58) (and . ag4b57) (if . ag4b56) (letrec* . ag4b55) (letrec . ag4b54) (case-lambda . ag4b52) (lambda . ag4b51) (syntax . ag4b50) (syntax-case . ag4b4f) (quote . ag4b4e) (letrec-syntax . ag4b4c) (let-syntax . ag4b4b) (set! . ag4b4a) (import . ag4b49) (begin . ag4b48) (define-syntax . ag4b46) (define . ag4b45)) '() values values '#f '#f '#t '#f) (ag271f@ag256b@install-library 'ag4e6e '(psyntax null-environment-5) '() '() '() '() '((make-promise . ag4d25) (unquote-splicing . ag4b75) (unquote . ag4b74) (_ . ag4b73) (else . ag4b72) (=> . ag4b71) (... . ag4b70) (delay . ag4b6d) (do . ag4b6b) (cond . ag4b6a) (let* . ag4b69) (let . ag4b68) (quasiquote . ag4b62) (syntax-rules . ag4b61) (case . ag4b5c) (or . ag4b58) (and . ag4b57) (if . ag4b56) (letrec . ag4b54) (lambda . ag4b51) (quote . ag4b4e) (letrec-syntax . ag4b4c) (let-syntax . ag4b4b) (set! . ag4b4a) (begin . ag4b48) (define-syntax . ag4b46) (define . ag4b45)) '() values values '#f '#f '#t '#f) (ag271f@ag256b@install-library 'ag4e6f '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . ag4dba) (string-ci>=? . ag4db9) (string-ci=? . ag4db8) (string-ci<? . ag4db7) (string-ci<=? . ag4db6) (char-whitespace? . ag4db5) (char-upper-case? . ag4db4) (char-numeric? . ag4db2) (char-lower-case? . ag4db1) (char-upcase . ag4daf) (char-downcase . ag4dac) (char-ci>? . ag4dab) (char-ci>=? . ag4daa) (char-ci=? . ag4da9) (char-ci<? . ag4da8) (char-ci<=? . ag4da7) (char-alphabetic? . ag4da6) (call-with-output-file . ag4d7a) (call-with-input-file . ag4d79) (write-char . ag4d78) (write . ag4d77) (with-output-to-file . ag4d76) (with-input-from-file . ag4d75) (read-char . ag4d74) (read . ag4d73) (peek-char . ag4d72) (open-output-file . ag4d71) (open-input-file . ag4d70) (newline . ag4d6f) (display . ag4d6e) (close-output-port . ag4d6d) (close-input-port . ag4d6c) (eof-object . ag4d6a) (current-output-port . ag4d68) (current-input-port . ag4d67) (output-port? . ag4d66) (input-port? . ag4d65) (scheme-report-environment . ag2bbe) (quotient . ag4d2b) (null-environment . ag2bbc) (remainder . ag4d2a) (modulo . ag4d29) (inexact->exact . ag4d28) (force . ag4d27) (exact->inexact . ag4d26) (make-promise . ag4d25) (string-fill! . ag4d23) (string-set! . ag4d22) (set-cdr! . ag4d21) (set-car! . ag4d20) (memv . ag4d1a) (memq . ag4d19) (member . ag4d17) (assv . ag4d0f) (assq . ag4d0e) (assoc . ag4d0c) (eval . ag2bc2) (zero? . ag4c49) (vector? . ag4c48) (vector-set! . ag4c47) (vector-ref . ag4c46) (vector-length . ag4c44) (vector-fill! . ag4c42) (vector->list . ag4c41) (vector . ag4c40) (values . ag4c3f) (truncate . ag4c3e) (tan . ag4c3d) (symbol? . ag4c3c) (symbol->string . ag4c3a) (substring . ag4c39) (string? . ag4c38) (string>? . ag4c37) (string>=? . ag4c36) (string=? . ag4c35) (string<? . ag4c34) (string<=? . ag4c33) (string-ref . ag4c32) (string-length . ag4c31) (string-copy . ag4c2f) (string-append . ag4c2e) (string->symbol . ag4c2d) (string->number . ag4c2c) (string->list . ag4c2b) (string . ag4c2a) (sqrt . ag4c29) (sin . ag4c28) (round . ag4c27) (reverse . ag4c26) (real? . ag4c25) (real-part . ag4c23) (rationalize . ag4c22) (rational? . ag4c21) (procedure? . ag4c1f) (positive? . ag4c1e) (pair? . ag4c1d) (odd? . ag4c1c) (numerator . ag4c1b) (number? . ag4c1a) (number->string . ag4c19) (not . ag4c17) (negative? . ag4c16) (min . ag4c14) (max . ag4c13) (map . ag4c12) (make-vector . ag4c11) (make-string . ag4c10) (make-rectangular . ag4c0f) (make-polar . ag4c0e) (magnitude . ag4c0d) (log . ag4c0c) (list? . ag4c0b) (list-tail . ag4c0a) (list-ref . ag4c09) (list->vector . ag4c08) (list->string . ag4c07) (list . ag4c06) (length . ag4c05) (lcm . ag4c04) (integer? . ag4c03) (integer->char . ag4c01) (inexact? . ag4bff) (imag-part . ag4bfd) (gcd . ag4bfc) (for-each . ag4bfb) (floor . ag4bfa) (expt . ag4bf8) (exp . ag4bf7) (exact? . ag4bf6) (even? . ag4bf3) (eqv? . ag4bf1) (equal? . ag4bf0) (eq? . ag4bef) (dynamic-wind . ag4bee) (denominator . ag4be7) (cos . ag4be6) (cons . ag4be5) (complex? . ag4be4) (char? . ag4be3) (char>? . ag4be2) (char>=? . ag4be1) (char=? . ag4be0) (char<? . ag4bdf) (char<=? . ag4bde) (char->integer . ag4bdd) (ceiling . ag4bdc) (call-with-values . ag4bdb) (call-with-current-continuation . ag4bd9) (cddddr . ag4bd8) (cdddar . ag4bd7) (cddadr . ag4bd6) (cddaar . ag4bd5) (cdaddr . ag4bd4) (cdadar . ag4bd3) (cdaadr . ag4bd2) (cdaaar . ag4bd1) (cadddr . ag4bd0) (caddar . ag4bcf) (cadadr . ag4bce) (cadaar . ag4bcd) (caaddr . ag4bcc) (caadar . ag4bcb) (caaadr . ag4bca) (caaaar . ag4bc9) (cdddr . ag4bc8) (cddar . ag4bc7) (cdadr . ag4bc6) (cdaar . ag4bc5) (caddr . ag4bc4) (cadar . ag4bc3) (caadr . ag4bc2) (caaar . ag4bc1) (cddr . ag4bc0) (cdar . ag4bbf) (cadr . ag4bbe) (caar . ag4bbd) (cdr . ag4bbc) (car . ag4bbb) (boolean? . ag4bba) (atan . ag4bb8) (asin . ag4bb6) (apply . ag4bb5) (append . ag4bb4) (angle . ag4bb3) (acos . ag4bb2) (abs . ag4bb1) (/ . ag4bb0) (* . ag4baf) (- . ag4bae) (+ . ag4bad) (>= . ag4bac) (> . ag4bab) (= . ag4baa) (<= . ag4ba9) (< . ag4ba8) (unquote-splicing . ag4b75) (unquote . ag4b74) (else . ag4b72) (=> . ag4b71) (... . ag4b70) (delay . ag4b6d) (do . ag4b6b) (cond . ag4b6a) (let* . ag4b69) (let . ag4b68) (quasiquote . ag4b62) (syntax-rules . ag4b61) (case . ag4b5c) (or . ag4b58) (and . ag4b57) (if . ag4b56) (letrec . ag4b54) (lambda . ag4b51) (quote . ag4b4e) (letrec-syntax . ag4b4c) (let-syntax . ag4b4b) (set! . ag4b4a) (begin . ag4b48) (define-syntax . ag4b46) (define . ag4b45)) '() values values '#f '#f '#t '#f) (ag271f@ag256b@install-library 'ag4e70 '(psyntax modules) '() '() '() '() '((module . ag4b47)) '() values values '#f '#f '#t '#f) (ag271f@ag256b@install-library 'ag4e71 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (ag271f@ag256b@install-library 'ag4e72 '(rnrs) '(6) '() '() '() '((regexp? . ag4e65) (string-upcase . ag4dc2) (string-titlecase . ag4dc1) (string-normalize-nfkd . ag4dc0) (string-normalize-nfkc . ag4dbf) (string-normalize-nfd . ag4dbe) (string-normalize-nfc . ag4dbd) (string-foldcase . ag4dbc) (string-downcase . ag4dbb) (string-ci>? . ag4dba) (string-ci>=? . ag4db9) (string-ci=? . ag4db8) (string-ci<? . ag4db7) (string-ci<=? . ag4db6) (char-whitespace? . ag4db5) (char-upper-case? . ag4db4) (char-title-case? . ag4db3) (char-numeric? . ag4db2) (char-lower-case? . ag4db1) (char-general-category . ag4db0) (char-upcase . ag4daf) (char-titlecase . ag4dae) (char-foldcase . ag4dad) (char-downcase . ag4dac) (char-ci>? . ag4dab) (char-ci>=? . ag4daa) (char-ci=? . ag4da9) (char-ci<? . ag4da8) (char-ci<=? . ag4da7) (char-alphabetic? . ag4da6) (make-variable-transformer . ag292f) (identifier? . ag2be4) (generate-temporaries . ag2bd0) (free-identifier=? . ag2bd2) (syntax->datum . ag2be8) (datum->syntax . ag2be6) (bound-identifier=? . ag2bd4) (record-type-descriptor? . ag4da5) (record-predicate . ag4da4) (record-mutator . ag4da3) (record-constructor . ag4da2) (record-accessor . ag4da1) (make-record-type-descriptor . ag4da0) (make-record-constructor-descriptor . ag4d9f) (record? . ag4d9e) (record-type-uid . ag4d9d) (record-type-sealed? . ag4d9c) (record-type-parent . ag4d9b) (record-type-opaque? . ag4d9a) (record-type-name . ag4d99) (record-type-generative? . ag4d98) (record-type-field-names . ag4d97) (record-rtd . ag4d96) (record-field-mutable? . ag4d95) (delete-file . ag4d94) (file-exists? . ag4d93) (vector-sort! . ag4d92) (vector-sort . ag4d91) (list-sort . ag4d90) (symbol-hash . ag4d8f) (string-ci-hash . ag4d8e) (string-hash . ag4d8d) (equal-hash . ag4d8c) (hashtable-equivalence-function . ag4d8b) (make-hashtable . ag4d8a) (hashtable-hash-function . ag4d89) (make-eqv-hashtable . ag4d88) (make-eq-hashtable . ag4d87) (hashtable? . ag4d86) (hashtable-update! . ag4d85) (hashtable-size . ag4d84) (hashtable-set! . ag4d83) (hashtable-ref . ag4d82) (hashtable-mutable? . ag4d81) (hashtable-keys . ag4d80) (hashtable-entries . ag4d7f) (hashtable-delete! . ag4d7e) (hashtable-copy . ag4d7d) (hashtable-contains? . ag4d7c) (hashtable-clear! . ag4d7b) (call-with-output-file . ag4d7a) (call-with-input-file . ag4d79) (write-char . ag4d78) (write . ag4d77) (with-output-to-file . ag4d76) (with-input-from-file . ag4d75) (read-char . ag4d74) (read . ag4d73) (peek-char . ag4d72) (open-output-file . ag4d71) (open-input-file . ag4d70) (newline . ag4d6f) (display . ag4d6e) (close-output-port . ag4d6d) (close-input-port . ag4d6c) (eof-object? . ag4d6b) (eof-object . ag4d6a) (current-error-port . ag4d69) (current-output-port . ag4d68) (current-input-port . ag4d67) (output-port? . ag4d66) (input-port? . ag4d65) (utf-8-codec . ag4d64) (utf-16-codec . ag4d63) (transcoder-error-handling-mode . ag4d62) (transcoder-eol-style . ag4d61) (transcoder-codec . ag4d60) (transcoded-port . ag4d5f) (textual-port? . ag4d5e) (string->bytevector . ag4d5d) (standard-output-port . ag4d5c) (standard-input-port . ag4d5b) (standard-error-port . ag4d5a) (set-port-position! . ag4d59) (put-u8 . ag4d58) (put-string . ag4d57) (put-datum . ag4d56) (put-char . ag4d55) (put-bytevector . ag4d54) (port? . ag4d53) (port-transcoder . ag4d52) (port-position . ag4d51) (port-has-set-port-position!? . ag4d50) (port-has-port-position? . ag4d4f) (port-eof? . ag4d4e) (output-port-buffer-mode . ag4d4d) (open-string-output-port . ag4d4c) (open-string-input-port . ag4d4b) (open-file-output-port . ag4d4a) (open-file-input/output-port . ag4d49) (open-file-input-port . ag4d48) (open-bytevector-output-port . ag4d47) (open-bytevector-input-port . ag4d46) (native-transcoder . ag4d45) (native-eol-style . ag4d44) (make-transcoder . ag4d43) (latin-1-codec . ag4d42) (make-i/o-write-error . ag47cd) (make-i/o-read-error . ag47b8) (make-i/o-port-error . ag486e) (make-i/o-invalid-position-error . ag47e4) (make-i/o-filename-error . ag47ff) (make-i/o-file-protection-error . ag4818) (make-i/o-file-is-read-only-error . ag482d) (make-i/o-file-does-not-exist-error . ag4857) (make-i/o-file-already-exists-error . ag4842) (make-i/o-error . ag47a3) (make-i/o-encoding-error . ag489e) (make-i/o-decoding-error . ag4887) (make-custom-textual-output-port . ag4d41) (make-custom-textual-input/output-port . ag4d40) (make-custom-textual-input-port . ag4d3f) (make-custom-binary-output-port . ag4d3e) (make-custom-binary-input/output-port . ag4d3d) (make-custom-binary-input-port . ag4d3c) (make-bytevector . ag4d3b) (lookahead-u8 . ag4d3a) (lookahead-char . ag4d39) (i/o-write-error? . ag47cf) (i/o-read-error? . ag47ba) (i/o-port-error? . ag4872) (i/o-invalid-position-error? . ag47e8) (i/o-filename-error? . ag4803) (i/o-file-protection-error? . ag481a) (i/o-file-is-read-only-error? . ag482f) (i/o-file-does-not-exist-error? . ag4859) (i/o-file-already-exists-error? . ag4844) (i/o-error? . ag47a5) (i/o-error-position . ag47ea) (i/o-error-port . ag4874) (i/o-error-filename . ag4805) (i/o-encoding-error? . ag48a2) (i/o-encoding-error-char . ag48a4) (i/o-decoding-error? . ag4889) (get-u8 . ag4d38) (get-string-n! . ag4d37) (get-string-n . ag4d36) (get-string-all . ag4d35) (get-line . ag4d34) (get-datum . ag4d33) (get-char . ag4d32) (get-bytevector-some . ag4d31) (get-bytevector-n! . ag4d30) (get-bytevector-n . ag4d2f) (get-bytevector-all . ag4d2e) (flush-output-port . ag4d2d) (close-port . ag4d2c) (exit . ag4d24) (command-line . ag49dd) (remove . ag4d1f) (remv . ag4d1e) (remp . ag4d1d) (remq . ag4d1c) (partition . ag4d1b) (memv . ag4d1a) (memq . ag4d19) (memp . ag4d18) (member . ag4d17) (exists . ag4d16) (for-all . ag4d15) (fold-right . ag4d14) (fold-left . ag4d13) (find . ag4d12) (filter . ag4d11) (cons* . ag4d10) (assv . ag4d0f) (assq . ag4d0e) (assp . ag4d0d) (assoc . ag4d0c) (call-with-string-output-port . ag4d0b) (call-with-port . ag4d0a) (call-with-bytevector-output-port . ag4d09) (bytevector->string . ag4d08) (buffer-mode? . ag4d07) (binary-port? . ag4d06) (with-exception-handler . ag4d05) (raise-continuable . ag4d04) (raise . ag4d03) (make-enumeration . ag4d02) (enum-set=? . ag4d01) (enum-set-universe . ag4d00) (enum-set-union . ag4cff) (enum-set-subset? . ag4cfe) (enum-set-projection . ag4cfd) (enum-set-member? . ag4cfc) (enum-set-intersection . ag4cfb) (enum-set-indexer . ag4cfa) (enum-set-difference . ag4cf9) (enum-set-constructor . ag4cf8) (enum-set-complement . ag4cf7) (enum-set->list . ag4cf6) (who-condition? . ag4719) (warning? . ag4691) (violation? . ag46d0) (undefined-violation? . ag4790) (syntax-violation? . ag4777) (syntax-violation-subform . ag477b) (syntax-violation-form . ag4779) (syntax-violation . ag2be2) (simple-conditions . ag4cf5) (serious-condition? . ag46a6) (non-continuable-violation? . ag4730) (message-condition? . ag467a) (make-who-condition . ag4715) (make-warning . ag468f) (make-violation . ag46ce) (make-undefined-violation . ag478e) (make-syntax-violation . ag4771) (make-serious-condition . ag46a4) (make-non-continuable-violation . ag472e) (make-message-condition . ag4676) (make-lexical-violation . ag4758) (make-irritants-condition . ag46fa) (make-implementation-restriction-violation . ag4743) (make-error . ag46b9) (make-assertion-violation . ag46e3) (lexical-violation? . ag475a) (irritants-condition? . ag46fe) (implementation-restriction-violation? . ag4745) (error? . ag46bb) (condition-who . ag471b) (condition-predicate . ag4cf4) (condition-message . ag467c) (condition-irritants . ag4700) (condition-accessor . ag4cf3) (condition . ag4cf2) (assertion-violation? . ag46e5) (condition? . ag4cf1) (utf32->string . ag4cf0) (utf16->string . ag4cef) (utf8->string . ag4cee) (uint-list->bytevector . ag4ced) (u8-list->bytevector . ag4cec) (string->utf8 . ag4ceb) (string->utf32 . ag4cea) (string->utf16 . ag4ce9) (sint-list->bytevector . ag4ce8) (native-endianness . ag4ce7) (bytevector? . ag4ce6) (bytevector=? . ag4ce5) (bytevector-uint-set! . ag4ce4) (bytevector-uint-ref . ag4ce3) (bytevector-u8-set! . ag4ce2) (bytevector-u8-ref . ag4ce1) (bytevector-u64-set! . ag4ce0) (bytevector-u64-ref . ag4cdf) (bytevector-u64-native-set! . ag4cde) (bytevector-u64-native-ref . ag4cdd) (bytevector-u32-set! . ag4cdc) (bytevector-u32-ref . ag4cdb) (bytevector-u32-native-set! . ag4cda) (bytevector-u32-native-ref . ag4cd9) (bytevector-u16-set! . ag4cd8) (bytevector-u16-ref . ag4cd7) (bytevector-u16-native-set! . ag4cd6) (bytevector-u16-native-ref . ag4cd5) (bytevector-sint-set! . ag4cd4) (bytevector-sint-ref . ag4cd3) (bytevector-s8-set! . ag4cd2) (bytevector-s8-ref . ag4cd1) (bytevector-s64-set! . ag4cd0) (bytevector-s64-ref . ag4ccf) (bytevector-s64-native-set! . ag4cce) (bytevector-s64-native-ref . ag4ccd) (bytevector-s32-set! . ag4ccc) (bytevector-s32-ref . ag4ccb) (bytevector-s32-native-set! . ag4cca) (bytevector-s32-native-ref . ag4cc9) (bytevector-s16-set! . ag4cc8) (bytevector-s16-ref . ag4cc7) (bytevector-s16-native-set! . ag4cc6) (bytevector-s16-native-ref . ag4cc5) (bytevector-length . ag4cc4) (bytevector-ieee-single-ref . ag4cc3) (bytevector-ieee-single-set! . ag4cc2) (bytevector-ieee-single-native-set! . ag4cc1) (bytevector-ieee-single-native-ref . ag4cc0) (bytevector-ieee-double-set! . ag4cbf) (bytevector-ieee-double-ref . ag4cbe) (bytevector-ieee-double-native-set! . ag4cbd) (bytevector-ieee-double-native-ref . ag4cbc) (bytevector-fill! . ag4cbb) (bytevector-copy! . ag4cba) (bytevector-copy . ag4cb9) (bytevector->uint-list . ag4cb8) (bytevector->u8-list . ag4cb7) (bytevector->sint-list . ag4cb6) (no-nans-violation? . ag48ce) (no-infinities-violation? . ag48b9) (make-no-nans-violation . ag48cc) (make-no-infinities-violation . ag48b7) (real->flonum . ag4cb5) (flzero? . ag4cb4) (fltruncate . ag4cb3) (fltan . ag4cb2) (flsqrt . ag4cb1) (flsin . ag4cb0) (flround . ag4caf) (flpositive? . ag4cae) (flonum? . ag4cad) (flodd? . ag4cac) (flnumerator . ag4cab) (flnegative? . ag4caa) (flnan? . ag4ca9) (flmod0 . ag4ca8) (flmod . ag4ca7) (flmin . ag4ca6) (flmax . ag4ca5) (fllog . ag4ca4) (flinteger? . ag4ca3) (flinfinite? . ag4ca2) (flfloor . ag4ca1) (flfinite? . ag4ca0) (flexpt . ag4c9f) (flexp . ag4c9e) (fleven? . ag4c9d) (fldiv0-and-mod0 . ag4c9c) (fldiv0 . ag4c9b) (fldiv-and-mod . ag4c9a) (fldiv . ag4c99) (fldenominator . ag4c98) (flcos . ag4c97) (flceiling . ag4c96) (flatan . ag4c95) (flasin . ag4c94) (flacos . ag4c93) (flabs . ag4c92) (fl>? . ag4c91) (fl>=? . ag4c90) (fl=? . ag4c8f) (fl<? . ag4c8e) (fl<=? . ag4c8d) (fl/ . ag4c8c) (fl- . ag4c8b) (fl+ . ag4c8a) (fl* . ag4c89) (fixnum->flonum . ag4c88) (fxzero? . ag4c87) (fxxor . ag4c86) (fxrotate-bit-field . ag4c85) (fxreverse-bit-field . ag4c84) (fxpositive? . ag4c83) (fxodd? . ag4c82) (fxnot . ag4c81) (fxnegative? . ag4c80) (fxmod0 . ag4c7f) (fxmod . ag4c7e) (fxmin . ag4c7d) (fxmax . ag4c7c) (fxlength . ag4c7b) (fxior . ag4c7a) (fxif . ag4c79) (fxfirst-bit-set . ag4c78) (fxeven? . ag4c77) (fxdiv0-and-mod0 . ag4c76) (fxdiv0 . ag4c75) (fxdiv-and-mod . ag4c74) (fxdiv . ag4c73) (fxcopy-bit-field . ag4c72) (fxcopy-bit . ag4c71) (fxbit-set? . ag4c70) (fxbit-field . ag4c6f) (fxbit-count . ag4c6e) (fxarithmetic-shift-right . ag4c6d) (fxarithmetic-shift-left . ag4c6c) (fxarithmetic-shift . ag4c6b) (fxand . ag4c6a) (fx>? . ag4c69) (fx>=? . ag4c68) (fx=? . ag4c67) (fx<? . ag4c66) (fx<=? . ag4c65) (fx-/carry . ag4c64) (fx- . ag4c63) (fx+/carry . ag4c62) (fx+ . ag4c61) (fx*/carry . ag4c60) (fx* . ag4c5f) (greatest-fixnum . ag4c5e) (least-fixnum . ag4c5d) (fixnum-width . ag4c5c) (fixnum? . ag4c5b) (bitwise-rotate-bit-field . ag4c5a) (bitwise-reverse-bit-field . ag4c59) (bitwise-length . ag4c58) (bitwise-if . ag4c57) (bitwise-first-bit-set . ag4c56) (bitwise-copy-bit-field . ag4c55) (bitwise-copy-bit . ag4c54) (bitwise-bit-set? . ag4c53) (bitwise-bit-field . ag4c52) (bitwise-bit-count . ag4c51) (bitwise-xor . ag4c50) (bitwise-ior . ag4c4f) (bitwise-and . ag4c4e) (bitwise-not . ag4c4d) (bitwise-arithmetic-shift-right . ag4c4c) (bitwise-arithmetic-shift-left . ag4c4b) (bitwise-arithmetic-shift . ag4c4a) (zero? . ag4c49) (vector? . ag4c48) (vector-set! . ag4c47) (vector-ref . ag4c46) (vector-map . ag4c45) (vector-length . ag4c44) (vector-for-each . ag4c43) (vector-fill! . ag4c42) (vector->list . ag4c41) (vector . ag4c40) (values . ag4c3f) (truncate . ag4c3e) (tan . ag4c3d) (symbol? . ag4c3c) (symbol=? . ag4c3b) (symbol->string . ag4c3a) (substring . ag4c39) (string? . ag4c38) (string>? . ag4c37) (string>=? . ag4c36) (string=? . ag4c35) (string<? . ag4c34) (string<=? . ag4c33) (string-ref . ag4c32) (string-length . ag4c31) (string-for-each . ag4c30) (string-copy . ag4c2f) (string-append . ag4c2e) (string->symbol . ag4c2d) (string->number . ag4c2c) (string->list . ag4c2b) (string . ag4c2a) (sqrt . ag4c29) (sin . ag4c28) (round . ag4c27) (reverse . ag4c26) (real? . ag4c25) (real-valued? . ag4c24) (real-part . ag4c23) (rationalize . ag4c22) (rational? . ag4c21) (rational-valued? . ag4c20) (procedure? . ag4c1f) (positive? . ag4c1e) (pair? . ag4c1d) (odd? . ag4c1c) (numerator . ag4c1b) (number? . ag4c1a) (number->string . ag4c19) (null? . ag4c18) (not . ag4c17) (negative? . ag4c16) (nan? . ag4c15) (min . ag4c14) (max . ag4c13) (map . ag4c12) (make-vector . ag4c11) (make-string . ag4c10) (make-rectangular . ag4c0f) (make-polar . ag4c0e) (magnitude . ag4c0d) (log . ag4c0c) (list? . ag4c0b) (list-tail . ag4c0a) (list-ref . ag4c09) (list->vector . ag4c08) (list->string . ag4c07) (list . ag4c06) (length . ag4c05) (lcm . ag4c04) (integer? . ag4c03) (integer-valued? . ag4c02) (integer->char . ag4c01) (infinite? . ag4c00) (inexact? . ag4bff) (inexact . ag4bfe) (imag-part . ag4bfd) (gcd . ag4bfc) (for-each . ag4bfb) (floor . ag4bfa) (finite? . ag4bf9) (expt . ag4bf8) (exp . ag4bf7) (exact? . ag4bf6) (exact-integer-sqrt . ag4bf5) (exact . ag4bf4) (even? . ag4bf3) (error . ag4bf2) (eqv? . ag4bf1) (equal? . ag4bf0) (eq? . ag4bef) (dynamic-wind . ag4bee) (div0-and-mod0 . ag4bed) (mod0 . ag4bec) (div0 . ag4beb) (div-and-mod . ag4bea) (mod . ag4be9) (div . ag4be8) (denominator . ag4be7) (cos . ag4be6) (cons . ag4be5) (complex? . ag4be4) (char? . ag4be3) (char>? . ag4be2) (char>=? . ag4be1) (char=? . ag4be0) (char<? . ag4bdf) (char<=? . ag4bde) (char->integer . ag4bdd) (ceiling . ag4bdc) (call-with-values . ag4bdb) (call/cc . ag4bda) (call-with-current-continuation . ag4bd9) (cddddr . ag4bd8) (cdddar . ag4bd7) (cddadr . ag4bd6) (cddaar . ag4bd5) (cdaddr . ag4bd4) (cdadar . ag4bd3) (cdaadr . ag4bd2) (cdaaar . ag4bd1) (cadddr . ag4bd0) (caddar . ag4bcf) (cadadr . ag4bce) (cadaar . ag4bcd) (caaddr . ag4bcc) (caadar . ag4bcb) (caaadr . ag4bca) (caaaar . ag4bc9) (cdddr . ag4bc8) (cddar . ag4bc7) (cdadr . ag4bc6) (cdaar . ag4bc5) (caddr . ag4bc4) (cadar . ag4bc3) (caadr . ag4bc2) (caaar . ag4bc1) (cddr . ag4bc0) (cdar . ag4bbf) (cadr . ag4bbe) (caar . ag4bbd) (cdr . ag4bbc) (car . ag4bbb) (boolean? . ag4bba) (boolean=? . ag4bb9) (atan . ag4bb8) (assertion-violation . ag4bb7) (asin . ag4bb6) (apply . ag4bb5) (append . ag4bb4) (angle . ag4bb3) (acos . ag4bb2) (abs . ag4bb1) (/ . ag4bb0) (* . ag4baf) (- . ag4bae) (+ . ag4bad) (>= . ag4bac) (> . ag4bab) (= . ag4baa) (<= . ag4ba9) (< . ag4ba8) (&no-nans . ag4ba6) (&no-infinities . ag4ba5) (&i/o-encoding . ag4ba4) (&i/o-decoding . ag4ba3) (&i/o-port . ag4ba2) (&i/o-file-does-not-exist . ag4ba1) (&i/o-file-already-exists . ag4ba0) (&i/o-file-is-read-only . ag4b9f) (&i/o-file-protection . ag4b9e) (&i/o-filename . ag4b9d) (&i/o-invalid-position . ag4b9c) (&i/o-write . ag4b9b) (&i/o-read . ag4b9a) (&i/o . ag4b99) (&undefined . ag4b98) (&syntax . ag4b97) (&lexical . ag4b96) (&implementation-restriction . ag4b95) (&non-continuable . ag4b94) (&who . ag4b93) (&irritants . ag4b92) (&assertion . ag4b91) (&violation . ag4b90) (&error . ag4b8f) (&serious . ag4b8e) (&warning . ag4b8d) (&message . ag4b8c) (&condition . ag4b8b) (define-condition-type . ag4b8a) (define-enumeration . ag4b89) (define-record-type . ag4b88) (parent-rtd . ag4b87) (nongenerative . ag4b86) (opaque . ag4b85) (sealed . ag4b84) (protocol . ag4b83) (parent . ag4b82) (immutable . ag4b81) (mutable . ag4b80) (fields . ag4b7f) (error-handling-mode . ag4b7e) (file-options . ag4b7d) (buffer-mode . ag4b7c) (eol-style . ag4b7b) (guard . ag4b7a) (unsyntax-splicing . ag4b77) (unsyntax . ag4b76) (unquote-splicing . ag4b75) (unquote . ag4b74) (_ . ag4b73) (else . ag4b72) (=> . ag4b71) (... . ag4b70) (assert . ag4b6f) (endianness . ag4b6e) (do . ag4b6b) (cond . ag4b6a) (let* . ag4b69) (let . ag4b68) (let*-values . ag4b67) (let-values . ag4b66) (identifier-syntax . ag4b65) (with-syntax . ag4b64) (quasisyntax . ag4b63) (quasiquote . ag4b62) (syntax-rules . ag4b61) (record-constructor-descriptor . ag4b5e) (record-type-descriptor . ag4b5d) (case . ag4b5c) (unless . ag4b5a) (when . ag4b59) (or . ag4b58) (and . ag4b57) (if . ag4b56) (letrec* . ag4b55) (letrec . ag4b54) (case-lambda . ag4b52) (lambda . ag4b51) (syntax . ag4b50) (syntax-case . ag4b4f) (quote . ag4b4e) (letrec-syntax . ag4b4c) (let-syntax . ag4b4b) (set! . ag4b4a) (begin . ag4b48) (define-syntax . ag4b46) (define . ag4b45)) '() values values '#f '#f '#t '#f) (ag271f@ag256b@install-library 'ag4e73 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . ag2bbe) (quotient . ag4d2b) (null-environment . ag2bbc) (remainder . ag4d2a) (modulo . ag4d29) (inexact->exact . ag4d28) (force . ag4d27) (exact->inexact . ag4d26) (make-promise . ag4d25) (delay . ag4b6d)) '() values values '#f '#f '#t '#f) (ag271f@ag256b@install-library 'ag4e74 '(rnrs control) '(6) '() '() '() '((do . ag4b6b) (unless . ag4b5a) (when . ag4b59) (case-lambda . ag4b52)) '() values values '#f '#f '#t '#f) (ag271f@ag256b@install-library 'ag4e75 '(rnrs eval) '(6) '() '() '() '((eval . ag2bc2) (environment . ag2bba)) '() values values '#f '#f '#t '#f) (ag271f@ag256b@install-library 'ag4e76 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . ag4d21) (set-car! . ag4d20)) '() values values '#f '#f '#t '#f) (ag271f@ag256b@install-library 'ag4e77 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . ag4d23) (string-set! . ag4d22)) '() values values '#f '#f '#t '#f) (ag271f@ag256b@install-library 'ag4e78 '(rnrs programs) '(6) '() '() '() '((exit . ag4d24) (command-line . ag49dd)) '() values values '#f '#f '#t '#f) (ag271f@ag256b@install-library 'ag4e79 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . ag292f) (identifier? . ag2be4) (generate-temporaries . ag2bd0) (free-identifier=? . ag2bd2) (syntax->datum . ag2be8) (datum->syntax . ag2be6) (bound-identifier=? . ag2bd4) (syntax-violation . ag2be2) (unsyntax-splicing . ag4b77) (unsyntax . ag4b76) (_ . ag4b73) (... . ag4b70) (with-syntax . ag4b64) (quasisyntax . ag4b63) (syntax . ag4b50) (syntax-case . ag4b4f)) '() values values '#f '#f '#t '#f) (ag271f@ag256b@install-library 'ag4e7a '(rnrs files) '(6) '() '() '() '((delete-file . ag4d94) (file-exists? . ag4d93) (make-i/o-write-error . ag47cd) (make-i/o-read-error . ag47b8) (make-i/o-port-error . ag486e) (make-i/o-invalid-position-error . ag47e4) (make-i/o-filename-error . ag47ff) (make-i/o-file-protection-error . ag4818) (make-i/o-file-is-read-only-error . ag482d) (make-i/o-file-does-not-exist-error . ag4857) (make-i/o-file-already-exists-error . ag4842) (make-i/o-error . ag47a3) (i/o-write-error? . ag47cf) (i/o-read-error? . ag47ba) (i/o-port-error? . ag4872) (i/o-invalid-position-error? . ag47e8) (i/o-filename-error? . ag4803) (i/o-file-protection-error? . ag481a) (i/o-file-is-read-only-error? . ag482f) (i/o-file-does-not-exist-error? . ag4859) (i/o-file-already-exists-error? . ag4844) (i/o-error? . ag47a5) (i/o-error-position . ag47ea) (i/o-error-port . ag4874) (i/o-error-filename . ag4805) (&i/o-port . ag4ba2) (&i/o-file-does-not-exist . ag4ba1) (&i/o-file-already-exists . ag4ba0) (&i/o-file-is-read-only . ag4b9f) (&i/o-file-protection . ag4b9e) (&i/o-filename . ag4b9d) (&i/o-invalid-position . ag4b9c) (&i/o-write . ag4b9b) (&i/o-read . ag4b9a) (&i/o . ag4b99)) '() values values '#f '#f '#t '#f) (ag271f@ag256b@install-library 'ag4e7b '(rnrs sorting) '(6) '() '() '() '((vector-sort! . ag4d92) (vector-sort . ag4d91) (list-sort . ag4d90)) '() values values '#f '#f '#t '#f) (ag271f@ag256b@install-library 'ag4e7c '(rnrs base) '(6) '() '() '() '((zero? . ag4c49) (vector? . ag4c48) (vector-set! . ag4c47) (vector-ref . ag4c46) (vector-map . ag4c45) (vector-length . ag4c44) (vector-for-each . ag4c43) (vector-fill! . ag4c42) (vector->list . ag4c41) (vector . ag4c40) (values . ag4c3f) (truncate . ag4c3e) (tan . ag4c3d) (symbol? . ag4c3c) (symbol=? . ag4c3b) (symbol->string . ag4c3a) (substring . ag4c39) (string? . ag4c38) (string>? . ag4c37) (string>=? . ag4c36) (string=? . ag4c35) (string<? . ag4c34) (string<=? . ag4c33) (string-ref . ag4c32) (string-length . ag4c31) (string-for-each . ag4c30) (string-copy . ag4c2f) (string-append . ag4c2e) (string->symbol . ag4c2d) (string->number . ag4c2c) (string->list . ag4c2b) (string . ag4c2a) (sqrt . ag4c29) (sin . ag4c28) (round . ag4c27) (reverse . ag4c26) (real? . ag4c25) (real-valued? . ag4c24) (real-part . ag4c23) (rationalize . ag4c22) (rational? . ag4c21) (rational-valued? . ag4c20) (procedure? . ag4c1f) (positive? . ag4c1e) (pair? . ag4c1d) (odd? . ag4c1c) (numerator . ag4c1b) (number? . ag4c1a) (number->string . ag4c19) (null? . ag4c18) (not . ag4c17) (negative? . ag4c16) (nan? . ag4c15) (min . ag4c14) (max . ag4c13) (map . ag4c12) (make-vector . ag4c11) (make-string . ag4c10) (make-rectangular . ag4c0f) (make-polar . ag4c0e) (magnitude . ag4c0d) (log . ag4c0c) (list? . ag4c0b) (list-tail . ag4c0a) (list-ref . ag4c09) (list->vector . ag4c08) (list->string . ag4c07) (list . ag4c06) (length . ag4c05) (lcm . ag4c04) (integer? . ag4c03) (integer-valued? . ag4c02) (integer->char . ag4c01) (infinite? . ag4c00) (inexact? . ag4bff) (inexact . ag4bfe) (imag-part . ag4bfd) (gcd . ag4bfc) (for-each . ag4bfb) (floor . ag4bfa) (finite? . ag4bf9) (expt . ag4bf8) (exp . ag4bf7) (exact? . ag4bf6) (exact-integer-sqrt . ag4bf5) (exact . ag4bf4) (even? . ag4bf3) (error . ag4bf2) (eqv? . ag4bf1) (equal? . ag4bf0) (eq? . ag4bef) (dynamic-wind . ag4bee) (div0-and-mod0 . ag4bed) (mod0 . ag4bec) (div0 . ag4beb) (div-and-mod . ag4bea) (mod . ag4be9) (div . ag4be8) (denominator . ag4be7) (cos . ag4be6) (cons . ag4be5) (complex? . ag4be4) (char? . ag4be3) (char>? . ag4be2) (char>=? . ag4be1) (char=? . ag4be0) (char<? . ag4bdf) (char<=? . ag4bde) (char->integer . ag4bdd) (ceiling . ag4bdc) (call-with-values . ag4bdb) (call/cc . ag4bda) (call-with-current-continuation . ag4bd9) (cddddr . ag4bd8) (cdddar . ag4bd7) (cddadr . ag4bd6) (cddaar . ag4bd5) (cdaddr . ag4bd4) (cdadar . ag4bd3) (cdaadr . ag4bd2) (cdaaar . ag4bd1) (cadddr . ag4bd0) (caddar . ag4bcf) (cadadr . ag4bce) (cadaar . ag4bcd) (caaddr . ag4bcc) (caadar . ag4bcb) (caaadr . ag4bca) (caaaar . ag4bc9) (cdddr . ag4bc8) (cddar . ag4bc7) (cdadr . ag4bc6) (cdaar . ag4bc5) (caddr . ag4bc4) (cadar . ag4bc3) (caadr . ag4bc2) (caaar . ag4bc1) (cddr . ag4bc0) (cdar . ag4bbf) (cadr . ag4bbe) (caar . ag4bbd) (cdr . ag4bbc) (car . ag4bbb) (boolean? . ag4bba) (boolean=? . ag4bb9) (atan . ag4bb8) (assertion-violation . ag4bb7) (asin . ag4bb6) (apply . ag4bb5) (append . ag4bb4) (angle . ag4bb3) (acos . ag4bb2) (abs . ag4bb1) (/ . ag4bb0) (* . ag4baf) (- . ag4bae) (+ . ag4bad) (>= . ag4bac) (> . ag4bab) (= . ag4baa) (<= . ag4ba9) (< . ag4ba8) (unquote-splicing . ag4b75) (unquote . ag4b74) (_ . ag4b73) (else . ag4b72) (=> . ag4b71) (... . ag4b70) (assert . ag4b6f) (cond . ag4b6a) (let* . ag4b69) (let . ag4b68) (let*-values . ag4b67) (let-values . ag4b66) (identifier-syntax . ag4b65) (quasiquote . ag4b62) (syntax-rules . ag4b61) (case . ag4b5c) (or . ag4b58) (and . ag4b57) (if . ag4b56) (letrec* . ag4b55) (letrec . ag4b54) (lambda . ag4b51) (quote . ag4b4e) (letrec-syntax . ag4b4c) (let-syntax . ag4b4b) (set! . ag4b4a) (begin . ag4b48) (define-syntax . ag4b46) (define . ag4b45)) '() values values '#f '#f '#t '#f) (ag271f@ag256b@install-library 'ag4e7d '(rnrs lists) '(6) '() '() '() '((remove . ag4d1f) (remv . ag4d1e) (remp . ag4d1d) (remq . ag4d1c) (partition . ag4d1b) (memv . ag4d1a) (memq . ag4d19) (memp . ag4d18) (member . ag4d17) (exists . ag4d16) (for-all . ag4d15) (fold-right . ag4d14) (fold-left . ag4d13) (find . ag4d12) (filter . ag4d11) (cons* . ag4d10) (assv . ag4d0f) (assq . ag4d0e) (assp . ag4d0d) (assoc . ag4d0c)) '() values values '#f '#f '#t '#f) (ag271f@ag256b@install-library 'ag4e7e '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . ag4d7a) (call-with-input-file . ag4d79) (write-char . ag4d78) (write . ag4d77) (with-output-to-file . ag4d76) (with-input-from-file . ag4d75) (read-char . ag4d74) (read . ag4d73) (peek-char . ag4d72) (open-output-file . ag4d71) (open-input-file . ag4d70) (newline . ag4d6f) (display . ag4d6e) (close-output-port . ag4d6d) (close-input-port . ag4d6c) (eof-object? . ag4d6b) (eof-object . ag4d6a) (current-error-port . ag4d69) (current-output-port . ag4d68) (current-input-port . ag4d67) (output-port? . ag4d66) (input-port? . ag4d65) (make-i/o-write-error . ag47cd) (make-i/o-read-error . ag47b8) (make-i/o-port-error . ag486e) (make-i/o-invalid-position-error . ag47e4) (make-i/o-filename-error . ag47ff) (make-i/o-file-protection-error . ag4818) (make-i/o-file-is-read-only-error . ag482d) (make-i/o-file-does-not-exist-error . ag4857) (make-i/o-file-already-exists-error . ag4842) (make-i/o-error . ag47a3) (i/o-write-error? . ag47cf) (i/o-read-error? . ag47ba) (i/o-port-error? . ag4872) (i/o-invalid-position-error? . ag47e8) (i/o-filename-error? . ag4803) (i/o-file-protection-error? . ag481a) (i/o-file-is-read-only-error? . ag482f) (i/o-file-does-not-exist-error? . ag4859) (i/o-file-already-exists-error? . ag4844) (i/o-error? . ag47a5) (i/o-error-position . ag47ea) (i/o-error-port . ag4874) (i/o-error-filename . ag4805) (&i/o-port . ag4ba2) (&i/o-file-does-not-exist . ag4ba1) (&i/o-file-already-exists . ag4ba0) (&i/o-file-is-read-only . ag4b9f) (&i/o-file-protection . ag4b9e) (&i/o-filename . ag4b9d) (&i/o-invalid-position . ag4b9c) (&i/o-write . ag4b9b) (&i/o-read . ag4b9a) (&i/o . ag4b99)) '() values values '#f '#f '#t '#f) (ag271f@ag256b@install-library 'ag4e7f '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . ag4d3b) (utf32->string . ag4cf0) (utf16->string . ag4cef) (utf8->string . ag4cee) (uint-list->bytevector . ag4ced) (u8-list->bytevector . ag4cec) (string->utf8 . ag4ceb) (string->utf32 . ag4cea) (string->utf16 . ag4ce9) (sint-list->bytevector . ag4ce8) (native-endianness . ag4ce7) (bytevector? . ag4ce6) (bytevector=? . ag4ce5) (bytevector-uint-set! . ag4ce4) (bytevector-uint-ref . ag4ce3) (bytevector-u8-set! . ag4ce2) (bytevector-u8-ref . ag4ce1) (bytevector-u64-set! . ag4ce0) (bytevector-u64-ref . ag4cdf) (bytevector-u64-native-set! . ag4cde) (bytevector-u64-native-ref . ag4cdd) (bytevector-u32-set! . ag4cdc) (bytevector-u32-ref . ag4cdb) (bytevector-u32-native-set! . ag4cda) (bytevector-u32-native-ref . ag4cd9) (bytevector-u16-set! . ag4cd8) (bytevector-u16-ref . ag4cd7) (bytevector-u16-native-set! . ag4cd6) (bytevector-u16-native-ref . ag4cd5) (bytevector-sint-set! . ag4cd4) (bytevector-sint-ref . ag4cd3) (bytevector-s8-set! . ag4cd2) (bytevector-s8-ref . ag4cd1) (bytevector-s64-set! . ag4cd0) (bytevector-s64-ref . ag4ccf) (bytevector-s64-native-set! . ag4cce) (bytevector-s64-native-ref . ag4ccd) (bytevector-s32-set! . ag4ccc) (bytevector-s32-ref . ag4ccb) (bytevector-s32-native-set! . ag4cca) (bytevector-s32-native-ref . ag4cc9) (bytevector-s16-set! . ag4cc8) (bytevector-s16-ref . ag4cc7) (bytevector-s16-native-set! . ag4cc6) (bytevector-s16-native-ref . ag4cc5) (bytevector-length . ag4cc4) (bytevector-ieee-single-ref . ag4cc3) (bytevector-ieee-single-set! . ag4cc2) (bytevector-ieee-single-native-set! . ag4cc1) (bytevector-ieee-single-native-ref . ag4cc0) (bytevector-ieee-double-set! . ag4cbf) (bytevector-ieee-double-ref . ag4cbe) (bytevector-ieee-double-native-set! . ag4cbd) (bytevector-ieee-double-native-ref . ag4cbc) (bytevector-fill! . ag4cbb) (bytevector-copy! . ag4cba) (bytevector-copy . ag4cb9) (bytevector->uint-list . ag4cb8) (bytevector->u8-list . ag4cb7) (bytevector->sint-list . ag4cb6) (endianness . ag4b6e)) '() values values '#f '#f '#t '#f) (ag271f@ag256b@install-library 'ag4e80 '(rnrs unicode) '(6) '() '() '() '((string-upcase . ag4dc2) (string-titlecase . ag4dc1) (string-normalize-nfkd . ag4dc0) (string-normalize-nfkc . ag4dbf) (string-normalize-nfd . ag4dbe) (string-normalize-nfc . ag4dbd) (string-foldcase . ag4dbc) (string-downcase . ag4dbb) (string-ci>? . ag4dba) (string-ci>=? . ag4db9) (string-ci=? . ag4db8) (string-ci<? . ag4db7) (string-ci<=? . ag4db6) (char-whitespace? . ag4db5) (char-upper-case? . ag4db4) (char-title-case? . ag4db3) (char-numeric? . ag4db2) (char-lower-case? . ag4db1) (char-general-category . ag4db0) (char-upcase . ag4daf) (char-titlecase . ag4dae) (char-foldcase . ag4dad) (char-downcase . ag4dac) (char-ci>? . ag4dab) (char-ci>=? . ag4daa) (char-ci=? . ag4da9) (char-ci<? . ag4da8) (char-ci<=? . ag4da7) (char-alphabetic? . ag4da6)) '() values values '#f '#f '#t '#f) (ag271f@ag256b@install-library 'ag4e81 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . ag4d05) (raise-continuable . ag4d04) (raise . ag4d03) (guard . ag4b7a) (else . ag4b72) (=> . ag4b71)) '() values values '#f '#f '#t '#f) (ag271f@ag256b@install-library 'ag4e82 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . ag4c5a) (bitwise-reverse-bit-field . ag4c59) (bitwise-length . ag4c58) (bitwise-if . ag4c57) (bitwise-first-bit-set . ag4c56) (bitwise-copy-bit-field . ag4c55) (bitwise-copy-bit . ag4c54) (bitwise-bit-set? . ag4c53) (bitwise-bit-field . ag4c52) (bitwise-bit-count . ag4c51) (bitwise-xor . ag4c50) (bitwise-ior . ag4c4f) (bitwise-and . ag4c4e) (bitwise-not . ag4c4d) (bitwise-arithmetic-shift-right . ag4c4c) (bitwise-arithmetic-shift-left . ag4c4b) (bitwise-arithmetic-shift . ag4c4a)) '() values values '#f '#f '#t '#f) (ag271f@ag256b@install-library 'ag4e83 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . ag4c87) (fxxor . ag4c86) (fxrotate-bit-field . ag4c85) (fxreverse-bit-field . ag4c84) (fxpositive? . ag4c83) (fxodd? . ag4c82) (fxnot . ag4c81) (fxnegative? . ag4c80) (fxmod0 . ag4c7f) (fxmod . ag4c7e) (fxmin . ag4c7d) (fxmax . ag4c7c) (fxlength . ag4c7b) (fxior . ag4c7a) (fxif . ag4c79) (fxfirst-bit-set . ag4c78) (fxeven? . ag4c77) (fxdiv0-and-mod0 . ag4c76) (fxdiv0 . ag4c75) (fxdiv-and-mod . ag4c74) (fxdiv . ag4c73) (fxcopy-bit-field . ag4c72) (fxcopy-bit . ag4c71) (fxbit-set? . ag4c70) (fxbit-field . ag4c6f) (fxbit-count . ag4c6e) (fxarithmetic-shift-right . ag4c6d) (fxarithmetic-shift-left . ag4c6c) (fxarithmetic-shift . ag4c6b) (fxand . ag4c6a) (fx>? . ag4c69) (fx>=? . ag4c68) (fx=? . ag4c67) (fx<? . ag4c66) (fx<=? . ag4c65) (fx-/carry . ag4c64) (fx- . ag4c63) (fx+/carry . ag4c62) (fx+ . ag4c61) (fx*/carry . ag4c60) (fx* . ag4c5f) (greatest-fixnum . ag4c5e) (least-fixnum . ag4c5d) (fixnum-width . ag4c5c) (fixnum? . ag4c5b)) '() values values '#f '#f '#t '#f) (ag271f@ag256b@install-library 'ag4e84 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . ag48ce) (no-infinities-violation? . ag48b9) (make-no-nans-violation . ag48cc) (make-no-infinities-violation . ag48b7) (real->flonum . ag4cb5) (flzero? . ag4cb4) (fltruncate . ag4cb3) (fltan . ag4cb2) (flsqrt . ag4cb1) (flsin . ag4cb0) (flround . ag4caf) (flpositive? . ag4cae) (flonum? . ag4cad) (flodd? . ag4cac) (flnumerator . ag4cab) (flnegative? . ag4caa) (flnan? . ag4ca9) (flmod0 . ag4ca8) (flmod . ag4ca7) (flmin . ag4ca6) (flmax . ag4ca5) (fllog . ag4ca4) (flinteger? . ag4ca3) (flinfinite? . ag4ca2) (flfloor . ag4ca1) (flfinite? . ag4ca0) (flexpt . ag4c9f) (flexp . ag4c9e) (fleven? . ag4c9d) (fldiv0-and-mod0 . ag4c9c) (fldiv0 . ag4c9b) (fldiv-and-mod . ag4c9a) (fldiv . ag4c99) (fldenominator . ag4c98) (flcos . ag4c97) (flceiling . ag4c96) (flatan . ag4c95) (flasin . ag4c94) (flacos . ag4c93) (flabs . ag4c92) (fl>? . ag4c91) (fl>=? . ag4c90) (fl=? . ag4c8f) (fl<? . ag4c8e) (fl<=? . ag4c8d) (fl/ . ag4c8c) (fl- . ag4c8b) (fl+ . ag4c8a) (fl* . ag4c89) (fixnum->flonum . ag4c88) (&no-nans . ag4ba6) (&no-infinities . ag4ba5)) '() values values '#f '#f '#t '#f) (ag271f@ag256b@install-library 'ag4e85 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . ag4d8f) (string-ci-hash . ag4d8e) (string-hash . ag4d8d) (equal-hash . ag4d8c) (hashtable-equivalence-function . ag4d8b) (make-hashtable . ag4d8a) (hashtable-hash-function . ag4d89) (make-eqv-hashtable . ag4d88) (make-eq-hashtable . ag4d87) (hashtable? . ag4d86) (hashtable-update! . ag4d85) (hashtable-size . ag4d84) (hashtable-set! . ag4d83) (hashtable-ref . ag4d82) (hashtable-mutable? . ag4d81) (hashtable-keys . ag4d80) (hashtable-entries . ag4d7f) (hashtable-delete! . ag4d7e) (hashtable-copy . ag4d7d) (hashtable-contains? . ag4d7c) (hashtable-clear! . ag4d7b)) '() values values '#f '#f '#t '#f) (ag271f@ag256b@install-library 'ag4e86 '(rnrs io ports) '(6) '() '() '() '((eof-object? . ag4d6b) (eof-object . ag4d6a) (current-error-port . ag4d69) (current-output-port . ag4d68) (current-input-port . ag4d67) (output-port? . ag4d66) (input-port? . ag4d65) (utf-8-codec . ag4d64) (utf-16-codec . ag4d63) (transcoder-error-handling-mode . ag4d62) (transcoder-eol-style . ag4d61) (transcoder-codec . ag4d60) (transcoded-port . ag4d5f) (textual-port? . ag4d5e) (string->bytevector . ag4d5d) (standard-output-port . ag4d5c) (standard-input-port . ag4d5b) (standard-error-port . ag4d5a) (set-port-position! . ag4d59) (put-u8 . ag4d58) (put-string . ag4d57) (put-datum . ag4d56) (put-char . ag4d55) (put-bytevector . ag4d54) (port? . ag4d53) (port-transcoder . ag4d52) (port-position . ag4d51) (port-has-set-port-position!? . ag4d50) (port-has-port-position? . ag4d4f) (port-eof? . ag4d4e) (output-port-buffer-mode . ag4d4d) (open-string-output-port . ag4d4c) (open-string-input-port . ag4d4b) (open-file-output-port . ag4d4a) (open-file-input/output-port . ag4d49) (open-file-input-port . ag4d48) (open-bytevector-output-port . ag4d47) (open-bytevector-input-port . ag4d46) (native-transcoder . ag4d45) (native-eol-style . ag4d44) (make-transcoder . ag4d43) (latin-1-codec . ag4d42) (make-i/o-write-error . ag47cd) (make-i/o-read-error . ag47b8) (make-i/o-port-error . ag486e) (make-i/o-invalid-position-error . ag47e4) (make-i/o-filename-error . ag47ff) (make-i/o-file-protection-error . ag4818) (make-i/o-file-is-read-only-error . ag482d) (make-i/o-file-does-not-exist-error . ag4857) (make-i/o-file-already-exists-error . ag4842) (make-i/o-error . ag47a3) (make-i/o-encoding-error . ag489e) (make-i/o-decoding-error . ag4887) (make-custom-textual-output-port . ag4d41) (make-custom-textual-input/output-port . ag4d40) (make-custom-textual-input-port . ag4d3f) (make-custom-binary-output-port . ag4d3e) (make-custom-binary-input/output-port . ag4d3d) (make-custom-binary-input-port . ag4d3c) (lookahead-u8 . ag4d3a) (lookahead-char . ag4d39) (i/o-write-error? . ag47cf) (i/o-read-error? . ag47ba) (i/o-port-error? . ag4872) (i/o-invalid-position-error? . ag47e8) (i/o-filename-error? . ag4803) (i/o-file-protection-error? . ag481a) (i/o-file-is-read-only-error? . ag482f) (i/o-file-does-not-exist-error? . ag4859) (i/o-file-already-exists-error? . ag4844) (i/o-error? . ag47a5) (i/o-error-position . ag47ea) (i/o-error-port . ag4874) (i/o-error-filename . ag4805) (i/o-encoding-error? . ag48a2) (i/o-encoding-error-char . ag48a4) (i/o-decoding-error? . ag4889) (get-u8 . ag4d38) (get-string-n! . ag4d37) (get-string-n . ag4d36) (get-string-all . ag4d35) (get-line . ag4d34) (get-datum . ag4d33) (get-char . ag4d32) (get-bytevector-some . ag4d31) (get-bytevector-n! . ag4d30) (get-bytevector-n . ag4d2f) (get-bytevector-all . ag4d2e) (flush-output-port . ag4d2d) (close-port . ag4d2c) (call-with-string-output-port . ag4d0b) (call-with-port . ag4d0a) (call-with-bytevector-output-port . ag4d09) (bytevector->string . ag4d08) (buffer-mode? . ag4d07) (binary-port? . ag4d06) (&i/o-encoding . ag4ba4) (&i/o-decoding . ag4ba3) (&i/o-port . ag4ba2) (&i/o-file-does-not-exist . ag4ba1) (&i/o-file-already-exists . ag4ba0) (&i/o-file-is-read-only . ag4b9f) (&i/o-file-protection . ag4b9e) (&i/o-filename . ag4b9d) (&i/o-invalid-position . ag4b9c) (&i/o-write . ag4b9b) (&i/o-read . ag4b9a) (&i/o . ag4b99) (error-handling-mode . ag4b7e) (file-options . ag4b7d) (buffer-mode . ag4b7c) (eol-style . ag4b7b)) '() values values '#f '#f '#t '#f) (ag271f@ag256b@install-library 'ag4e87 '(rnrs enums) '(6) '() '() '() '((make-enumeration . ag4d02) (enum-set=? . ag4d01) (enum-set-universe . ag4d00) (enum-set-union . ag4cff) (enum-set-subset? . ag4cfe) (enum-set-projection . ag4cfd) (enum-set-member? . ag4cfc) (enum-set-intersection . ag4cfb) (enum-set-indexer . ag4cfa) (enum-set-difference . ag4cf9) (enum-set-constructor . ag4cf8) (enum-set-complement . ag4cf7) (enum-set->list . ag4cf6) (define-enumeration . ag4b89)) '() values values '#f '#f '#t '#f) (ag271f@ag256b@install-library 'ag4e88 '(rnrs conditions) '(6) '() '() '() '((who-condition? . ag4719) (warning? . ag4691) (violation? . ag46d0) (undefined-violation? . ag4790) (syntax-violation? . ag4777) (syntax-violation-subform . ag477b) (syntax-violation-form . ag4779) (syntax-violation . ag2be2) (simple-conditions . ag4cf5) (serious-condition? . ag46a6) (non-continuable-violation? . ag4730) (message-condition? . ag467a) (make-who-condition . ag4715) (make-warning . ag468f) (make-violation . ag46ce) (make-undefined-violation . ag478e) (make-syntax-violation . ag4771) (make-serious-condition . ag46a4) (make-non-continuable-violation . ag472e) (make-message-condition . ag4676) (make-lexical-violation . ag4758) (make-irritants-condition . ag46fa) (make-implementation-restriction-violation . ag4743) (make-error . ag46b9) (make-assertion-violation . ag46e3) (lexical-violation? . ag475a) (irritants-condition? . ag46fe) (implementation-restriction-violation? . ag4745) (error? . ag46bb) (condition-who . ag471b) (condition-predicate . ag4cf4) (condition-message . ag467c) (condition-irritants . ag4700) (condition-accessor . ag4cf3) (condition . ag4cf2) (assertion-violation? . ag46e5) (condition? . ag4cf1) (&undefined . ag4b98) (&syntax . ag4b97) (&lexical . ag4b96) (&implementation-restriction . ag4b95) (&non-continuable . ag4b94) (&who . ag4b93) (&irritants . ag4b92) (&assertion . ag4b91) (&violation . ag4b90) (&error . ag4b8f) (&serious . ag4b8e) (&warning . ag4b8d) (&message . ag4b8c) (&condition . ag4b8b) (define-condition-type . ag4b8a)) '() values values '#f '#f '#t '#f) (ag271f@ag256b@install-library 'ag4e89 '(rnrs records inspection) '(6) '() '() '() '((record? . ag4d9e) (record-type-uid . ag4d9d) (record-type-sealed? . ag4d9c) (record-type-parent . ag4d9b) (record-type-opaque? . ag4d9a) (record-type-name . ag4d99) (record-type-generative? . ag4d98) (record-type-field-names . ag4d97) (record-rtd . ag4d96) (record-field-mutable? . ag4d95)) '() values values '#f '#f '#t '#f) (ag271f@ag256b@install-library 'ag4e8a '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . ag4da5) (record-predicate . ag4da4) (record-mutator . ag4da3) (record-constructor . ag4da2) (record-accessor . ag4da1) (make-record-type-descriptor . ag4da0) (make-record-constructor-descriptor . ag4d9f)) '() values values '#f '#f '#t '#f) (ag271f@ag256b@install-library 'ag4e8b '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . ag4b88) (parent-rtd . ag4b87) (nongenerative . ag4b86) (opaque . ag4b85) (sealed . ag4b84) (protocol . ag4b83) (parent . ag4b82) (immutable . ag4b81) (mutable . ag4b80) (fields . ag4b7f) (record-constructor-descriptor . ag4b5e) (record-type-descriptor . ag4b5d)) '() values values '#f '#f '#t '#f) (ag271f@ag256b@install-library 'ag4e8c '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . ag48d2) (&no-nans-rtd . ag48d0) (&no-infinities-rcd . ag48bd) (&no-infinities-rtd . ag48bb) (&i/o-encoding-rcd . ag48a8) (&i/o-encoding-rtd . ag48a6) (&i/o-decoding-rcd . ag488d) (&i/o-decoding-rtd . ag488b) (&i/o-port-rcd . ag4878) (&i/o-port-rtd . ag4876) (&i/o-file-does-not-exist-rcd . ag485d) (&i/o-file-does-not-exist-rtd . ag485b) (&i/o-file-already-exists-rcd . ag4848) (&i/o-file-already-exists-rtd . ag4846) (&i/o-file-is-read-only-rcd . ag4833) (&i/o-file-is-read-only-rtd . ag4831) (&i/o-file-protection-rcd . ag481e) (&i/o-file-protection-rtd . ag481c) (&i/o-filename-rcd . ag4809) (&i/o-filename-rtd . ag4807) (&i/o-invalid-position-rcd . ag47ee) (&i/o-invalid-position-rtd . ag47ec) (&i/o-write-rcd . ag47d3) (&i/o-write-rtd . ag47d1) (&i/o-read-rcd . ag47be) (&i/o-read-rtd . ag47bc) (&i/o-rcd . ag47a9) (&i/o-rtd . ag47a7) (&undefined-rcd . ag4794) (&undefined-rtd . ag4792) (&syntax-rcd . ag477f) (&syntax-rtd . ag477d) (&lexical-rcd . ag475e) (&lexical-rtd . ag475c) (&implementation-restriction-rcd . ag4749) (&implementation-restriction-rtd . ag4747) (&non-continuable-rcd . ag4734) (&non-continuable-rtd . ag4732) (&who-rcd . ag471f) (&who-rtd . ag471d) (&irritants-rcd . ag4704) (&irritants-rtd . ag4702) (&assertion-rcd . ag46e9) (&assertion-rtd . ag46e7) (&violation-rcd . ag46d4) (&violation-rtd . ag46d2) (&error-rcd . ag46bf) (&error-rtd . ag46bd) (&serious-rcd . ag46aa) (&serious-rtd . ag46a8) (&warning-rcd . ag4695) (&warning-rtd . ag4693) (&message-rcd . ag4680) (&message-rtd . ag467e) (&condition-rcd . ag4621) (&condition-rtd . ag461f) (syntax-error . ag2bde) (syntax-dispatch . ag2b02) (pretty-print . ag4e6c) (eval-core . ag4e6b) (set-symbol-value! . ag4e6a) (symbol-value . ag4e69) (gensym . ag4e68) (void . ag4e67) (load . ag49e3) (interaction-environment . ag2bf0) (char-ready? . ag4e66) (regexp? . ag4e65) (read-line . ag4e64) (gensym-prefix-set! . ag4e63) (ungensym . ag4e62) (alist->eq-hash-table . ag4e61) (assoc-ref . ag4e60) (print . ag4e5f) (format . ag4e5e) (host-os . ag4e5d) (library-path . ag254a) (standard-library-path . ag4e5c) (file-newer? . ag4e5b) (stat-mtime . ag4e5a) (write-to-file . ag4e59) (file->list . ag4e58) (file->string . ag4e57) (digit->integer . ag4e56) (call-with-string-input-port . ag4e55) (call-with-string-io . ag4e54) (string-split . ag4e53) (bytevector-for-each . ag4e52) (string->regexp . ag4e51) (rxmatch . ag4e50) (regexp-replace-all . ag4e4f) (hashtable-for-each . ag4e4e) (mosh-cache-dir . ag2335) (call-process . ag4e4d) (local-tz-offset . ag4e4c) (microseconds . ag4e4b) (directory-list . ag4e4a) (set-current-directory! . ag4e49) (expand-path . ag4e48) (current-directory . ag4e47) (%spawn . ag4e46) (%waitpid . ag4e45) (simple-struct-name . ag4e44) (simple-struct-set! . ag4e43) (simple-struct-ref . ag4e42) (make-simple-struct . ag4e41) (simple-struct? . ag4e40) (pointer-ref-c-int64 . ag4e3f) (pointer-ref-c-int32 . ag4e3e) (pointer-ref-c-int16 . ag4e3d) (pointer-ref-c-int8 . ag4e3c) (pointer-ref-c-uint64 . ag4e3b) (pointer-ref-c-uint32 . ag4e3a) (pointer-ref-c-uint16 . ag4e39) (pointer-ref-c-uint8 . ag4e38) (pointer-set-c-uint64! . ag4e37) (pointer-set-c-uint32! . ag4e36) (pointer-set-c-uint16! . ag4e35) (pointer-set-c-uint8! . ag4e34) (pointer-set-c-int64! . ag4e33) (pointer-set-c-int32! . ag4e32) (pointer-set-c-int16! . ag4e31) (pointer-set-c-int8! . ag4e30) (pointer-set-c-pointer! . ag4e2f) (pointer-set-c-double! . ag4e2e) (pointer-set-c-float! . ag4e2d) (pointer-set-c-long-long! . ag4e2c) (pointer-set-c-long! . ag4e2b) (pointer-set-c-int! . ag4e2a) (pointer-set-c-short! . ag4e29) (pointer-set-c-char! . ag4e28) (pointer-ref-c-pointer . ag4e27) (pointer-ref-c-double . ag4e26) (pointer-ref-c-float . ag4e25) (pointer-ref-c-unsigned-long-long . ag4e24) (pointer-ref-c-signed-long-long . ag4e23) (pointer-ref-c-unsigned-long . ag4e22) (pointer-ref-c-signed-long . ag4e21) (pointer-ref-c-unsigned-int . ag4e20) (pointer-ref-c-signed-int . ag4e1f) (pointer-ref-c-unsigned-short . ag4e1e) (pointer-ref-c-signed-short . ag4e1d) (pointer-ref-c-unsigned-char . ag4e1c) (pointer-ref-c-signed-char . ag4e1b) (pointer->integer . ag4e1a) (integer->pointer . ag4e19) (pointer? . ag4e18) (shared-errno . ag4e17) (%ffi-free . ag4e16) (%ffi-malloc . ag4e15) (%ffi-supported? . ag4e14) (%ffi-pointer->string . ag4e13) (%ffi-call->string-or-zero . ag4e12) (%ffi-call->double . ag4e11) (%ffi-call->void* . ag4e10) (%ffi-call->void . ag4e0f) (%ffi-call->char . ag4e0e) (%ffi-call->int . ag4e0d) (%ffi-lookup . ag4e0c) (%ffi-open . ag4e0b) (%fork . ag4e0a) (%pipe . ag4e09) (p . ag4e08) (open-output-string . ag4e07) (get-output-string . ag4e06) (file-stat-ctime . ag4e05) (file-stat-atime . ag4e04) (file-stat-mtime . ag4e03) (file-size-in-bytes . ag4e02) (file-writable? . ag4e01) (file-executable? . ag4e00) (file-readable? . ag4dff) (file-regular? . ag4dfe) (file-symbolic-link? . ag4dfd) (file-directory? . ag4dfc) (create-symbolic-link . ag4dfb) (rename-file . ag4dfa) (delete-directory . ag4df9) (create-directory . ag4df8) (create-mosh-cache-dir . ag4df7) (get-environment-variables . ag4df6) (current-exception-handler . ag4df5) (get-environment-variable . ag4df4) (join-wraps . ag4df3) (id->real-label . ag4df2) (same-marks? . ag4df1) (same-marks*? . ag4df0) (get-timeofday . ag4def) (get-command-line . ag4dee) (sys-display . ag4ded) (whereis . ag4dec) (register . ag4deb) (vm-join! . ag4dea) (vm-set-value! . ag4de9) (vm? . ag4de8) (main-vm? . ag4de7) (vm-eval . ag4de6) (vm-self . ag4de5) (vm-start! . ag4de4) (make-vm . ag4de3) (mutex-try-lock! . ag4de2) (mutex-unlock! . ag4de1) (mutex-lock! . ag4de0) (mutex? . ag4ddf) (make-mutex . ag4dde) (condition-variable-notify-all! . ag4ddd) (condition-variable-notify! . ag4ddc) (condition-variable-wait! . ag4ddb) (make-condition-variable . ag4dda) (mosh-executable-path . ag4dd9) (make-file-options . ag4dd8) (source-info . ag4dd7) (make-compiler-instruction . ag4dd6) (make-instruction . ag4dd5) (set-source-info! . ag4dd4) (bignum? . ag4dd3) (fast-equal? . ag4dd2) (fasl-read . ag4dd1) (fasl-write . ag4dd0) (time-usage . ag4dcf) (os-constant . ag4dce) (disasm . ag4dcd) (make-parameter . ag2333) (socket-port . ag4dcc) (socket-shutdown . ag4dcb) (socket-close . ag4dca) (socket-send . ag4dc9) (socket-recv! . ag4dc8) (socket-recv . ag4dc7) (make-server-socket . ag4dc6) (make-client-socket . ag4dc5) (socket-accept . ag4dc4) (socket? . ag4dc3) (string-upcase . ag4dc2) (string-titlecase . ag4dc1) (string-normalize-nfkd . ag4dc0) (string-normalize-nfkc . ag4dbf) (string-normalize-nfd . ag4dbe) (string-normalize-nfc . ag4dbd) (string-foldcase . ag4dbc) (string-downcase . ag4dbb) (string-ci>? . ag4dba) (string-ci>=? . ag4db9) (string-ci=? . ag4db8) (string-ci<? . ag4db7) (string-ci<=? . ag4db6) (char-whitespace? . ag4db5) (char-upper-case? . ag4db4) (char-title-case? . ag4db3) (char-numeric? . ag4db2) (char-lower-case? . ag4db1) (char-general-category . ag4db0) (char-upcase . ag4daf) (char-titlecase . ag4dae) (char-foldcase . ag4dad) (char-downcase . ag4dac) (char-ci>? . ag4dab) (char-ci>=? . ag4daa) (char-ci=? . ag4da9) (char-ci<? . ag4da8) (char-ci<=? . ag4da7) (char-alphabetic? . ag4da6) (make-variable-transformer . ag292f) (identifier? . ag2be4) (generate-temporaries . ag2bd0) (free-identifier=? . ag2bd2) (syntax->datum . ag2be8) (datum->syntax . ag2be6) (bound-identifier=? . ag2bd4) (record-type-descriptor? . ag4da5) (record-predicate . ag4da4) (record-mutator . ag4da3) (record-constructor . ag4da2) (record-accessor . ag4da1) (make-record-type-descriptor . ag4da0) (make-record-constructor-descriptor . ag4d9f) (record? . ag4d9e) (record-type-uid . ag4d9d) (record-type-sealed? . ag4d9c) (record-type-parent . ag4d9b) (record-type-opaque? . ag4d9a) (record-type-name . ag4d99) (record-type-generative? . ag4d98) (record-type-field-names . ag4d97) (record-rtd . ag4d96) (record-field-mutable? . ag4d95) (delete-file . ag4d94) (file-exists? . ag4d93) (vector-sort! . ag4d92) (vector-sort . ag4d91) (list-sort . ag4d90) (symbol-hash . ag4d8f) (string-ci-hash . ag4d8e) (string-hash . ag4d8d) (equal-hash . ag4d8c) (hashtable-equivalence-function . ag4d8b) (make-hashtable . ag4d8a) (hashtable-hash-function . ag4d89) (make-eqv-hashtable . ag4d88) (make-eq-hashtable . ag4d87) (hashtable? . ag4d86) (hashtable-update! . ag4d85) (hashtable-size . ag4d84) (hashtable-set! . ag4d83) (hashtable-ref . ag4d82) (hashtable-mutable? . ag4d81) (hashtable-keys . ag4d80) (hashtable-entries . ag4d7f) (hashtable-delete! . ag4d7e) (hashtable-copy . ag4d7d) (hashtable-contains? . ag4d7c) (hashtable-clear! . ag4d7b) (call-with-output-file . ag4d7a) (call-with-input-file . ag4d79) (write-char . ag4d78) (write . ag4d77) (with-output-to-file . ag4d76) (with-input-from-file . ag4d75) (read-char . ag4d74) (read . ag4d73) (peek-char . ag4d72) (open-output-file . ag4d71) (open-input-file . ag4d70) (newline . ag4d6f) (display . ag4d6e) (close-output-port . ag4d6d) (close-input-port . ag4d6c) (eof-object? . ag4d6b) (eof-object . ag4d6a) (current-error-port . ag4d69) (current-output-port . ag4d68) (current-input-port . ag4d67) (output-port? . ag4d66) (input-port? . ag4d65) (utf-8-codec . ag4d64) (utf-16-codec . ag4d63) (transcoder-error-handling-mode . ag4d62) (transcoder-eol-style . ag4d61) (transcoder-codec . ag4d60) (transcoded-port . ag4d5f) (textual-port? . ag4d5e) (string->bytevector . ag4d5d) (standard-output-port . ag4d5c) (standard-input-port . ag4d5b) (standard-error-port . ag4d5a) (set-port-position! . ag4d59) (put-u8 . ag4d58) (put-string . ag4d57) (put-datum . ag4d56) (put-char . ag4d55) (put-bytevector . ag4d54) (port? . ag4d53) (port-transcoder . ag4d52) (port-position . ag4d51) (port-has-set-port-position!? . ag4d50) (port-has-port-position? . ag4d4f) (port-eof? . ag4d4e) (output-port-buffer-mode . ag4d4d) (open-string-output-port . ag4d4c) (open-string-input-port . ag4d4b) (open-file-output-port . ag4d4a) (open-file-input/output-port . ag4d49) (open-file-input-port . ag4d48) (open-bytevector-output-port . ag4d47) (open-bytevector-input-port . ag4d46) (native-transcoder . ag4d45) (native-eol-style . ag4d44) (make-transcoder . ag4d43) (latin-1-codec . ag4d42) (make-i/o-write-error . ag47cd) (make-i/o-read-error . ag47b8) (make-i/o-port-error . ag486e) (make-i/o-invalid-position-error . ag47e4) (make-i/o-filename-error . ag47ff) (make-i/o-file-protection-error . ag4818) (make-i/o-file-is-read-only-error . ag482d) (make-i/o-file-does-not-exist-error . ag4857) (make-i/o-file-already-exists-error . ag4842) (make-i/o-error . ag47a3) (make-i/o-encoding-error . ag489e) (make-i/o-decoding-error . ag4887) (make-custom-textual-output-port . ag4d41) (make-custom-textual-input/output-port . ag4d40) (make-custom-textual-input-port . ag4d3f) (make-custom-binary-output-port . ag4d3e) (make-custom-binary-input/output-port . ag4d3d) (make-custom-binary-input-port . ag4d3c) (make-bytevector . ag4d3b) (lookahead-u8 . ag4d3a) (lookahead-char . ag4d39) (i/o-write-error? . ag47cf) (i/o-read-error? . ag47ba) (i/o-port-error? . ag4872) (i/o-invalid-position-error? . ag47e8) (i/o-filename-error? . ag4803) (i/o-file-protection-error? . ag481a) (i/o-file-is-read-only-error? . ag482f) (i/o-file-does-not-exist-error? . ag4859) (i/o-file-already-exists-error? . ag4844) (i/o-error? . ag47a5) (i/o-error-position . ag47ea) (i/o-error-port . ag4874) (i/o-error-filename . ag4805) (i/o-encoding-error? . ag48a2) (i/o-encoding-error-char . ag48a4) (i/o-decoding-error? . ag4889) (get-u8 . ag4d38) (get-string-n! . ag4d37) (get-string-n . ag4d36) (get-string-all . ag4d35) (get-line . ag4d34) (get-datum . ag4d33) (get-char . ag4d32) (get-bytevector-some . ag4d31) (get-bytevector-n! . ag4d30) (get-bytevector-n . ag4d2f) (get-bytevector-all . ag4d2e) (flush-output-port . ag4d2d) (close-port . ag4d2c) (scheme-report-environment . ag2bbe) (quotient . ag4d2b) (null-environment . ag2bbc) (remainder . ag4d2a) (modulo . ag4d29) (inexact->exact . ag4d28) (force . ag4d27) (exact->inexact . ag4d26) (make-promise . ag4d25) (exit . ag4d24) (command-line . ag49dd) (string-fill! . ag4d23) (string-set! . ag4d22) (set-cdr! . ag4d21) (set-car! . ag4d20) (remove . ag4d1f) (remv . ag4d1e) (remp . ag4d1d) (remq . ag4d1c) (partition . ag4d1b) (memv . ag4d1a) (memq . ag4d19) (memp . ag4d18) (member . ag4d17) (exists . ag4d16) (for-all . ag4d15) (fold-right . ag4d14) (fold-left . ag4d13) (find . ag4d12) (filter . ag4d11) (cons* . ag4d10) (assv . ag4d0f) (assq . ag4d0e) (assp . ag4d0d) (assoc . ag4d0c) (call-with-string-output-port . ag4d0b) (call-with-port . ag4d0a) (call-with-bytevector-output-port . ag4d09) (bytevector->string . ag4d08) (buffer-mode? . ag4d07) (binary-port? . ag4d06) (with-exception-handler . ag4d05) (raise-continuable . ag4d04) (raise . ag4d03) (eval . ag2bc2) (environment . ag2bba) (make-enumeration . ag4d02) (enum-set=? . ag4d01) (enum-set-universe . ag4d00) (enum-set-union . ag4cff) (enum-set-subset? . ag4cfe) (enum-set-projection . ag4cfd) (enum-set-member? . ag4cfc) (enum-set-intersection . ag4cfb) (enum-set-indexer . ag4cfa) (enum-set-difference . ag4cf9) (enum-set-constructor . ag4cf8) (enum-set-complement . ag4cf7) (enum-set->list . ag4cf6) (who-condition? . ag4719) (warning? . ag4691) (violation? . ag46d0) (undefined-violation? . ag4790) (syntax-violation? . ag4777) (syntax-violation-subform . ag477b) (syntax-violation-form . ag4779) (syntax-violation . ag2be2) (simple-conditions . ag4cf5) (serious-condition? . ag46a6) (non-continuable-violation? . ag4730) (message-condition? . ag467a) (make-who-condition . ag4715) (make-warning . ag468f) (make-violation . ag46ce) (make-undefined-violation . ag478e) (make-syntax-violation . ag4771) (make-serious-condition . ag46a4) (make-non-continuable-violation . ag472e) (make-message-condition . ag4676) (make-lexical-violation . ag4758) (make-irritants-condition . ag46fa) (make-implementation-restriction-violation . ag4743) (make-error . ag46b9) (make-assertion-violation . ag46e3) (lexical-violation? . ag475a) (irritants-condition? . ag46fe) (implementation-restriction-violation? . ag4745) (error? . ag46bb) (condition-who . ag471b) (condition-predicate . ag4cf4) (condition-message . ag467c) (condition-irritants . ag4700) (condition-accessor . ag4cf3) (condition . ag4cf2) (assertion-violation? . ag46e5) (condition? . ag4cf1) (utf32->string . ag4cf0) (utf16->string . ag4cef) (utf8->string . ag4cee) (uint-list->bytevector . ag4ced) (u8-list->bytevector . ag4cec) (string->utf8 . ag4ceb) (string->utf32 . ag4cea) (string->utf16 . ag4ce9) (sint-list->bytevector . ag4ce8) (native-endianness . ag4ce7) (bytevector? . ag4ce6) (bytevector=? . ag4ce5) (bytevector-uint-set! . ag4ce4) (bytevector-uint-ref . ag4ce3) (bytevector-u8-set! . ag4ce2) (bytevector-u8-ref . ag4ce1) (bytevector-u64-set! . ag4ce0) (bytevector-u64-ref . ag4cdf) (bytevector-u64-native-set! . ag4cde) (bytevector-u64-native-ref . ag4cdd) (bytevector-u32-set! . ag4cdc) (bytevector-u32-ref . ag4cdb) (bytevector-u32-native-set! . ag4cda) (bytevector-u32-native-ref . ag4cd9) (bytevector-u16-set! . ag4cd8) (bytevector-u16-ref . ag4cd7) (bytevector-u16-native-set! . ag4cd6) (bytevector-u16-native-ref . ag4cd5) (bytevector-sint-set! . ag4cd4) (bytevector-sint-ref . ag4cd3) (bytevector-s8-set! . ag4cd2) (bytevector-s8-ref . ag4cd1) (bytevector-s64-set! . ag4cd0) (bytevector-s64-ref . ag4ccf) (bytevector-s64-native-set! . ag4cce) (bytevector-s64-native-ref . ag4ccd) (bytevector-s32-set! . ag4ccc) (bytevector-s32-ref . ag4ccb) (bytevector-s32-native-set! . ag4cca) (bytevector-s32-native-ref . ag4cc9) (bytevector-s16-set! . ag4cc8) (bytevector-s16-ref . ag4cc7) (bytevector-s16-native-set! . ag4cc6) (bytevector-s16-native-ref . ag4cc5) (bytevector-length . ag4cc4) (bytevector-ieee-single-ref . ag4cc3) (bytevector-ieee-single-set! . ag4cc2) (bytevector-ieee-single-native-set! . ag4cc1) (bytevector-ieee-single-native-ref . ag4cc0) (bytevector-ieee-double-set! . ag4cbf) (bytevector-ieee-double-ref . ag4cbe) (bytevector-ieee-double-native-set! . ag4cbd) (bytevector-ieee-double-native-ref . ag4cbc) (bytevector-fill! . ag4cbb) (bytevector-copy! . ag4cba) (bytevector-copy . ag4cb9) (bytevector->uint-list . ag4cb8) (bytevector->u8-list . ag4cb7) (bytevector->sint-list . ag4cb6) (no-nans-violation? . ag48ce) (no-infinities-violation? . ag48b9) (make-no-nans-violation . ag48cc) (make-no-infinities-violation . ag48b7) (real->flonum . ag4cb5) (flzero? . ag4cb4) (fltruncate . ag4cb3) (fltan . ag4cb2) (flsqrt . ag4cb1) (flsin . ag4cb0) (flround . ag4caf) (flpositive? . ag4cae) (flonum? . ag4cad) (flodd? . ag4cac) (flnumerator . ag4cab) (flnegative? . ag4caa) (flnan? . ag4ca9) (flmod0 . ag4ca8) (flmod . ag4ca7) (flmin . ag4ca6) (flmax . ag4ca5) (fllog . ag4ca4) (flinteger? . ag4ca3) (flinfinite? . ag4ca2) (flfloor . ag4ca1) (flfinite? . ag4ca0) (flexpt . ag4c9f) (flexp . ag4c9e) (fleven? . ag4c9d) (fldiv0-and-mod0 . ag4c9c) (fldiv0 . ag4c9b) (fldiv-and-mod . ag4c9a) (fldiv . ag4c99) (fldenominator . ag4c98) (flcos . ag4c97) (flceiling . ag4c96) (flatan . ag4c95) (flasin . ag4c94) (flacos . ag4c93) (flabs . ag4c92) (fl>? . ag4c91) (fl>=? . ag4c90) (fl=? . ag4c8f) (fl<? . ag4c8e) (fl<=? . ag4c8d) (fl/ . ag4c8c) (fl- . ag4c8b) (fl+ . ag4c8a) (fl* . ag4c89) (fixnum->flonum . ag4c88) (fxzero? . ag4c87) (fxxor . ag4c86) (fxrotate-bit-field . ag4c85) (fxreverse-bit-field . ag4c84) (fxpositive? . ag4c83) (fxodd? . ag4c82) (fxnot . ag4c81) (fxnegative? . ag4c80) (fxmod0 . ag4c7f) (fxmod . ag4c7e) (fxmin . ag4c7d) (fxmax . ag4c7c) (fxlength . ag4c7b) (fxior . ag4c7a) (fxif . ag4c79) (fxfirst-bit-set . ag4c78) (fxeven? . ag4c77) (fxdiv0-and-mod0 . ag4c76) (fxdiv0 . ag4c75) (fxdiv-and-mod . ag4c74) (fxdiv . ag4c73) (fxcopy-bit-field . ag4c72) (fxcopy-bit . ag4c71) (fxbit-set? . ag4c70) (fxbit-field . ag4c6f) (fxbit-count . ag4c6e) (fxarithmetic-shift-right . ag4c6d) (fxarithmetic-shift-left . ag4c6c) (fxarithmetic-shift . ag4c6b) (fxand . ag4c6a) (fx>? . ag4c69) (fx>=? . ag4c68) (fx=? . ag4c67) (fx<? . ag4c66) (fx<=? . ag4c65) (fx-/carry . ag4c64) (fx- . ag4c63) (fx+/carry . ag4c62) (fx+ . ag4c61) (fx*/carry . ag4c60) (fx* . ag4c5f) (greatest-fixnum . ag4c5e) (least-fixnum . ag4c5d) (fixnum-width . ag4c5c) (fixnum? . ag4c5b) (bitwise-rotate-bit-field . ag4c5a) (bitwise-reverse-bit-field . ag4c59) (bitwise-length . ag4c58) (bitwise-if . ag4c57) (bitwise-first-bit-set . ag4c56) (bitwise-copy-bit-field . ag4c55) (bitwise-copy-bit . ag4c54) (bitwise-bit-set? . ag4c53) (bitwise-bit-field . ag4c52) (bitwise-bit-count . ag4c51) (bitwise-xor . ag4c50) (bitwise-ior . ag4c4f) (bitwise-and . ag4c4e) (bitwise-not . ag4c4d) (bitwise-arithmetic-shift-right . ag4c4c) (bitwise-arithmetic-shift-left . ag4c4b) (bitwise-arithmetic-shift . ag4c4a) (zero? . ag4c49) (vector? . ag4c48) (vector-set! . ag4c47) (vector-ref . ag4c46) (vector-map . ag4c45) (vector-length . ag4c44) (vector-for-each . ag4c43) (vector-fill! . ag4c42) (vector->list . ag4c41) (vector . ag4c40) (values . ag4c3f) (truncate . ag4c3e) (tan . ag4c3d) (symbol? . ag4c3c) (symbol=? . ag4c3b) (symbol->string . ag4c3a) (substring . ag4c39) (string? . ag4c38) (string>? . ag4c37) (string>=? . ag4c36) (string=? . ag4c35) (string<? . ag4c34) (string<=? . ag4c33) (string-ref . ag4c32) (string-length . ag4c31) (string-for-each . ag4c30) (string-copy . ag4c2f) (string-append . ag4c2e) (string->symbol . ag4c2d) (string->number . ag4c2c) (string->list . ag4c2b) (string . ag4c2a) (sqrt . ag4c29) (sin . ag4c28) (round . ag4c27) (reverse . ag4c26) (real? . ag4c25) (real-valued? . ag4c24) (real-part . ag4c23) (rationalize . ag4c22) (rational? . ag4c21) (rational-valued? . ag4c20) (procedure? . ag4c1f) (positive? . ag4c1e) (pair? . ag4c1d) (odd? . ag4c1c) (numerator . ag4c1b) (number? . ag4c1a) (number->string . ag4c19) (null? . ag4c18) (not . ag4c17) (negative? . ag4c16) (nan? . ag4c15) (min . ag4c14) (max . ag4c13) (map . ag4c12) (make-vector . ag4c11) (make-string . ag4c10) (make-rectangular . ag4c0f) (make-polar . ag4c0e) (magnitude . ag4c0d) (log . ag4c0c) (list? . ag4c0b) (list-tail . ag4c0a) (list-ref . ag4c09) (list->vector . ag4c08) (list->string . ag4c07) (list . ag4c06) (length . ag4c05) (lcm . ag4c04) (integer? . ag4c03) (integer-valued? . ag4c02) (integer->char . ag4c01) (infinite? . ag4c00) (inexact? . ag4bff) (inexact . ag4bfe) (imag-part . ag4bfd) (gcd . ag4bfc) (for-each . ag4bfb) (floor . ag4bfa) (finite? . ag4bf9) (expt . ag4bf8) (exp . ag4bf7) (exact? . ag4bf6) (exact-integer-sqrt . ag4bf5) (exact . ag4bf4) (even? . ag4bf3) (error . ag4bf2) (eqv? . ag4bf1) (equal? . ag4bf0) (eq? . ag4bef) (dynamic-wind . ag4bee) (div0-and-mod0 . ag4bed) (mod0 . ag4bec) (div0 . ag4beb) (div-and-mod . ag4bea) (mod . ag4be9) (div . ag4be8) (denominator . ag4be7) (cos . ag4be6) (cons . ag4be5) (complex? . ag4be4) (char? . ag4be3) (char>? . ag4be2) (char>=? . ag4be1) (char=? . ag4be0) (char<? . ag4bdf) (char<=? . ag4bde) (char->integer . ag4bdd) (ceiling . ag4bdc) (call-with-values . ag4bdb) (call/cc . ag4bda) (call-with-current-continuation . ag4bd9) (cddddr . ag4bd8) (cdddar . ag4bd7) (cddadr . ag4bd6) (cddaar . ag4bd5) (cdaddr . ag4bd4) (cdadar . ag4bd3) (cdaadr . ag4bd2) (cdaaar . ag4bd1) (cadddr . ag4bd0) (caddar . ag4bcf) (cadadr . ag4bce) (cadaar . ag4bcd) (caaddr . ag4bcc) (caadar . ag4bcb) (caaadr . ag4bca) (caaaar . ag4bc9) (cdddr . ag4bc8) (cddar . ag4bc7) (cdadr . ag4bc6) (cdaar . ag4bc5) (caddr . ag4bc4) (cadar . ag4bc3) (caadr . ag4bc2) (caaar . ag4bc1) (cddr . ag4bc0) (cdar . ag4bbf) (cadr . ag4bbe) (caar . ag4bbd) (cdr . ag4bbc) (car . ag4bbb) (boolean? . ag4bba) (boolean=? . ag4bb9) (atan . ag4bb8) (assertion-violation . ag4bb7) (assertion-error . ag2bdc) (asin . ag4bb6) (apply . ag4bb5) (append . ag4bb4) (angle . ag4bb3) (acos . ag4bb2) (abs . ag4bb1) (/ . ag4bb0) (* . ag4baf) (- . ag4bae) (+ . ag4bad) (>= . ag4bac) (> . ag4bab) (= . ag4baa) (<= . ag4ba9) (< . ag4ba8) (library . ag4ba7) (&no-nans . ag4ba6) (&no-infinities . ag4ba5) (&i/o-encoding . ag4ba4) (&i/o-decoding . ag4ba3) (&i/o-port . ag4ba2) (&i/o-file-does-not-exist . ag4ba1) (&i/o-file-already-exists . ag4ba0) (&i/o-file-is-read-only . ag4b9f) (&i/o-file-protection . ag4b9e) (&i/o-filename . ag4b9d) (&i/o-invalid-position . ag4b9c) (&i/o-write . ag4b9b) (&i/o-read . ag4b9a) (&i/o . ag4b99) (&undefined . ag4b98) (&syntax . ag4b97) (&lexical . ag4b96) (&implementation-restriction . ag4b95) (&non-continuable . ag4b94) (&who . ag4b93) (&irritants . ag4b92) (&assertion . ag4b91) (&violation . ag4b90) (&error . ag4b8f) (&serious . ag4b8e) (&warning . ag4b8d) (&message . ag4b8c) (&condition . ag4b8b) (define-condition-type . ag4b8a) (define-enumeration . ag4b89) (define-record-type . ag4b88) (parent-rtd . ag4b87) (nongenerative . ag4b86) (opaque . ag4b85) (sealed . ag4b84) (protocol . ag4b83) (parent . ag4b82) (immutable . ag4b81) (mutable . ag4b80) (fields . ag4b7f) (error-handling-mode . ag4b7e) (file-options . ag4b7d) (buffer-mode . ag4b7c) (eol-style . ag4b7b) (guard . ag4b7a) (trace-define . ag4b79) (trace-lambda . ag4b78) (unsyntax-splicing . ag4b77) (unsyntax . ag4b76) (unquote-splicing . ag4b75) (unquote . ag4b74) (_ . ag4b73) (else . ag4b72) (=> . ag4b71) (... . ag4b70) (assert . ag4b6f) (endianness . ag4b6e) (delay . ag4b6d) (time . ag4b6c) (do . ag4b6b) (cond . ag4b6a) (let* . ag4b69) (let . ag4b68) (let*-values . ag4b67) (let-values . ag4b66) (identifier-syntax . ag4b65) (with-syntax . ag4b64) (quasisyntax . ag4b63) (quasiquote . ag4b62) (syntax-rules . ag4b61) (include . ag4b60) (define-struct . ag4b5f) (record-constructor-descriptor . ag4b5e) (record-type-descriptor . ag4b5d) (case . ag4b5c) (parameterize . ag4b5b) (unless . ag4b5a) (when . ag4b59) (or . ag4b58) (and . ag4b57) (if . ag4b56) (letrec* . ag4b55) (letrec . ag4b54) (type-descriptor . ag4b53) (case-lambda . ag4b52) (lambda . ag4b51) (syntax . ag4b50) (syntax-case . ag4b4f) (quote . ag4b4e) (foreign-call . ag4b4d) (letrec-syntax . ag4b4c) (let-syntax . ag4b4b) (set! . ag4b4a) (import . ag4b49) (begin . ag4b48) (module . ag4b47) (define-syntax . ag4b46) (define . ag4b45)) '((ag48d2 core-prim . &no-nans-rcd) (ag48d0 core-prim . &no-nans-rtd) (ag48bd core-prim . &no-infinities-rcd) (ag48bb core-prim . &no-infinities-rtd) (ag48a8 core-prim . &i/o-encoding-rcd) (ag48a6 core-prim . &i/o-encoding-rtd) (ag488d core-prim . &i/o-decoding-rcd) (ag488b core-prim . &i/o-decoding-rtd) (ag4878 core-prim . &i/o-port-rcd) (ag4876 core-prim . &i/o-port-rtd) (ag485d core-prim . &i/o-file-does-not-exist-rcd) (ag485b core-prim . &i/o-file-does-not-exist-rtd) (ag4848 core-prim . &i/o-file-already-exists-rcd) (ag4846 core-prim . &i/o-file-already-exists-rtd) (ag4833 core-prim . &i/o-file-is-read-only-rcd) (ag4831 core-prim . &i/o-file-is-read-only-rtd) (ag481e core-prim . &i/o-file-protection-rcd) (ag481c core-prim . &i/o-file-protection-rtd) (ag4809 core-prim . &i/o-filename-rcd) (ag4807 core-prim . &i/o-filename-rtd) (ag47ee core-prim . &i/o-invalid-position-rcd) (ag47ec core-prim . &i/o-invalid-position-rtd) (ag47d3 core-prim . &i/o-write-rcd) (ag47d1 core-prim . &i/o-write-rtd) (ag47be core-prim . &i/o-read-rcd) (ag47bc core-prim . &i/o-read-rtd) (ag47a9 core-prim . &i/o-rcd) (ag47a7 core-prim . &i/o-rtd) (ag4794 core-prim . &undefined-rcd) (ag4792 core-prim . &undefined-rtd) (ag477f core-prim . &syntax-rcd) (ag477d core-prim . &syntax-rtd) (ag475e core-prim . &lexical-rcd) (ag475c core-prim . &lexical-rtd) (ag4749 core-prim . &implementation-restriction-rcd) (ag4747 core-prim . &implementation-restriction-rtd) (ag4734 core-prim . &non-continuable-rcd) (ag4732 core-prim . &non-continuable-rtd) (ag471f core-prim . &who-rcd) (ag471d core-prim . &who-rtd) (ag4704 core-prim . &irritants-rcd) (ag4702 core-prim . &irritants-rtd) (ag46e9 core-prim . &assertion-rcd) (ag46e7 core-prim . &assertion-rtd) (ag46d4 core-prim . &violation-rcd) (ag46d2 core-prim . &violation-rtd) (ag46bf core-prim . &error-rcd) (ag46bd core-prim . &error-rtd) (ag46aa core-prim . &serious-rcd) (ag46a8 core-prim . &serious-rtd) (ag4695 core-prim . &warning-rcd) (ag4693 core-prim . &warning-rtd) (ag4680 core-prim . &message-rcd) (ag467e core-prim . &message-rtd) (ag4621 core-prim . &condition-rcd) (ag461f core-prim . &condition-rtd) (ag2bde core-prim . syntax-error) (ag2b02 core-prim . syntax-dispatch) (ag4e6c core-prim . pretty-print) (ag4e6b core-prim . eval-core) (ag4e6a core-prim . set-symbol-value!) (ag4e69 core-prim . symbol-value) (ag4e68 core-prim . gensym) (ag4e67 core-prim . void) (ag49e3 core-prim . load) (ag2bf0 core-prim . interaction-environment) (ag4e66 core-prim . char-ready?) (ag4e65 core-prim . regexp?) (ag4e64 core-prim . read-line) (ag4e63 core-prim . gensym-prefix-set!) (ag4e62 core-prim . ungensym) (ag4e61 core-prim . alist->eq-hash-table) (ag4e60 core-prim . assoc-ref) (ag4e5f core-prim . print) (ag4e5e core-prim . format) (ag4e5d core-prim . host-os) (ag254a core-prim . library-path) (ag4e5c core-prim . standard-library-path) (ag4e5b core-prim . file-newer?) (ag4e5a core-prim . stat-mtime) (ag4e59 core-prim . write-to-file) (ag4e58 core-prim . file->list) (ag4e57 core-prim . file->string) (ag4e56 core-prim . digit->integer) (ag4e55 core-prim . call-with-string-input-port) (ag4e54 core-prim . call-with-string-io) (ag4e53 core-prim . string-split) (ag4e52 core-prim . bytevector-for-each) (ag4e51 core-prim . string->regexp) (ag4e50 core-prim . rxmatch) (ag4e4f core-prim . regexp-replace-all) (ag4e4e core-prim . hashtable-for-each) (ag2335 core-prim . mosh-cache-dir) (ag4e4d core-prim . call-process) (ag4e4c core-prim . local-tz-offset) (ag4e4b core-prim . microseconds) (ag4e4a core-prim . directory-list) (ag4e49 core-prim . set-current-directory!) (ag4e48 core-prim . expand-path) (ag4e47 core-prim . current-directory) (ag4e46 core-prim . %spawn) (ag4e45 core-prim . %waitpid) (ag4e44 core-prim . simple-struct-name) (ag4e43 core-prim . simple-struct-set!) (ag4e42 core-prim . simple-struct-ref) (ag4e41 core-prim . make-simple-struct) (ag4e40 core-prim . simple-struct?) (ag4e3f core-prim . pointer-ref-c-int64) (ag4e3e core-prim . pointer-ref-c-int32) (ag4e3d core-prim . pointer-ref-c-int16) (ag4e3c core-prim . pointer-ref-c-int8) (ag4e3b core-prim . pointer-ref-c-uint64) (ag4e3a core-prim . pointer-ref-c-uint32) (ag4e39 core-prim . pointer-ref-c-uint16) (ag4e38 core-prim . pointer-ref-c-uint8) (ag4e37 core-prim . pointer-set-c-uint64!) (ag4e36 core-prim . pointer-set-c-uint32!) (ag4e35 core-prim . pointer-set-c-uint16!) (ag4e34 core-prim . pointer-set-c-uint8!) (ag4e33 core-prim . pointer-set-c-int64!) (ag4e32 core-prim . pointer-set-c-int32!) (ag4e31 core-prim . pointer-set-c-int16!) (ag4e30 core-prim . pointer-set-c-int8!) (ag4e2f core-prim . pointer-set-c-pointer!) (ag4e2e core-prim . pointer-set-c-double!) (ag4e2d core-prim . pointer-set-c-float!) (ag4e2c core-prim . pointer-set-c-long-long!) (ag4e2b core-prim . pointer-set-c-long!) (ag4e2a core-prim . pointer-set-c-int!) (ag4e29 core-prim . pointer-set-c-short!) (ag4e28 core-prim . pointer-set-c-char!) (ag4e27 core-prim . pointer-ref-c-pointer) (ag4e26 core-prim . pointer-ref-c-double) (ag4e25 core-prim . pointer-ref-c-float) (ag4e24 core-prim . pointer-ref-c-unsigned-long-long) (ag4e23 core-prim . pointer-ref-c-signed-long-long) (ag4e22 core-prim . pointer-ref-c-unsigned-long) (ag4e21 core-prim . pointer-ref-c-signed-long) (ag4e20 core-prim . pointer-ref-c-unsigned-int) (ag4e1f core-prim . pointer-ref-c-signed-int) (ag4e1e core-prim . pointer-ref-c-unsigned-short) (ag4e1d core-prim . pointer-ref-c-signed-short) (ag4e1c core-prim . pointer-ref-c-unsigned-char) (ag4e1b core-prim . pointer-ref-c-signed-char) (ag4e1a core-prim . pointer->integer) (ag4e19 core-prim . integer->pointer) (ag4e18 core-prim . pointer?) (ag4e17 core-prim . shared-errno) (ag4e16 core-prim . %ffi-free) (ag4e15 core-prim . %ffi-malloc) (ag4e14 core-prim . %ffi-supported?) (ag4e13 core-prim . %ffi-pointer->string) (ag4e12 core-prim . %ffi-call->string-or-zero) (ag4e11 core-prim . %ffi-call->double) (ag4e10 core-prim . %ffi-call->void*) (ag4e0f core-prim . %ffi-call->void) (ag4e0e core-prim . %ffi-call->char) (ag4e0d core-prim . %ffi-call->int) (ag4e0c core-prim . %ffi-lookup) (ag4e0b core-prim . %ffi-open) (ag4e0a core-prim . %fork) (ag4e09 core-prim . %pipe) (ag4e08 core-prim . p) (ag4e07 core-prim . open-output-string) (ag4e06 core-prim . get-output-string) (ag4e05 core-prim . file-stat-ctime) (ag4e04 core-prim . file-stat-atime) (ag4e03 core-prim . file-stat-mtime) (ag4e02 core-prim . file-size-in-bytes) (ag4e01 core-prim . file-writable?) (ag4e00 core-prim . file-executable?) (ag4dff core-prim . file-readable?) (ag4dfe core-prim . file-regular?) (ag4dfd core-prim . file-symbolic-link?) (ag4dfc core-prim . file-directory?) (ag4dfb core-prim . create-symbolic-link) (ag4dfa core-prim . rename-file) (ag4df9 core-prim . delete-directory) (ag4df8 core-prim . create-directory) (ag4df7 core-prim . create-mosh-cache-dir) (ag4df6 core-prim . get-environment-variables) (ag4df5 core-prim . current-exception-handler) (ag4df4 core-prim . get-environment-variable) (ag4df3 core-prim . join-wraps) (ag4df2 core-prim . id->real-label) (ag4df1 core-prim . same-marks?) (ag4df0 core-prim . same-marks*?) (ag4def core-prim . get-timeofday) (ag4dee core-prim . get-command-line) (ag4ded core-prim . sys-display) (ag4dec core-prim . whereis) (ag4deb core-prim . register) (ag4dea core-prim . vm-join!) (ag4de9 core-prim . vm-set-value!) (ag4de8 core-prim . vm?) (ag4de7 core-prim . main-vm?) (ag4de6 core-prim . vm-eval) (ag4de5 core-prim . vm-self) (ag4de4 core-prim . vm-start!) (ag4de3 core-prim . make-vm) (ag4de2 core-prim . mutex-try-lock!) (ag4de1 core-prim . mutex-unlock!) (ag4de0 core-prim . mutex-lock!) (ag4ddf core-prim . mutex?) (ag4dde core-prim . make-mutex) (ag4ddd core-prim . condition-variable-notify-all!) (ag4ddc core-prim . condition-variable-notify!) (ag4ddb core-prim . condition-variable-wait!) (ag4dda core-prim . make-condition-variable) (ag4dd9 core-prim . mosh-executable-path) (ag4dd8 core-prim . make-file-options) (ag4dd7 core-prim . source-info) (ag4dd6 core-prim . make-compiler-instruction) (ag4dd5 core-prim . make-instruction) (ag4dd4 core-prim . set-source-info!) (ag4dd3 core-prim . bignum?) (ag4dd2 core-prim . fast-equal?) (ag4dd1 core-prim . fasl-read) (ag4dd0 core-prim . fasl-write) (ag4dcf core-prim . time-usage) (ag4dce core-prim . os-constant) (ag4dcd core-prim . disasm) (ag2333 core-prim . make-parameter) (ag4dcc core-prim . socket-port) (ag4dcb core-prim . socket-shutdown) (ag4dca core-prim . socket-close) (ag4dc9 core-prim . socket-send) (ag4dc8 core-prim . socket-recv!) (ag4dc7 core-prim . socket-recv) (ag4dc6 core-prim . make-server-socket) (ag4dc5 core-prim . make-client-socket) (ag4dc4 core-prim . socket-accept) (ag4dc3 core-prim . socket?) (ag4dc2 core-prim . string-upcase) (ag4dc1 core-prim . string-titlecase) (ag4dc0 core-prim . string-normalize-nfkd) (ag4dbf core-prim . string-normalize-nfkc) (ag4dbe core-prim . string-normalize-nfd) (ag4dbd core-prim . string-normalize-nfc) (ag4dbc core-prim . string-foldcase) (ag4dbb core-prim . string-downcase) (ag4dba core-prim . string-ci>?) (ag4db9 core-prim . string-ci>=?) (ag4db8 core-prim . string-ci=?) (ag4db7 core-prim . string-ci<?) (ag4db6 core-prim . string-ci<=?) (ag4db5 core-prim . char-whitespace?) (ag4db4 core-prim . char-upper-case?) (ag4db3 core-prim . char-title-case?) (ag4db2 core-prim . char-numeric?) (ag4db1 core-prim . char-lower-case?) (ag4db0 core-prim . char-general-category) (ag4daf core-prim . char-upcase) (ag4dae core-prim . char-titlecase) (ag4dad core-prim . char-foldcase) (ag4dac core-prim . char-downcase) (ag4dab core-prim . char-ci>?) (ag4daa core-prim . char-ci>=?) (ag4da9 core-prim . char-ci=?) (ag4da8 core-prim . char-ci<?) (ag4da7 core-prim . char-ci<=?) (ag4da6 core-prim . char-alphabetic?) (ag292f core-prim . make-variable-transformer) (ag2be4 core-prim . identifier?) (ag2bd0 core-prim . generate-temporaries) (ag2bd2 core-prim . free-identifier=?) (ag2be8 core-prim . syntax->datum) (ag2be6 core-prim . datum->syntax) (ag2bd4 core-prim . bound-identifier=?) (ag4da5 core-prim . record-type-descriptor?) (ag4da4 core-prim . record-predicate) (ag4da3 core-prim . record-mutator) (ag4da2 core-prim . record-constructor) (ag4da1 core-prim . record-accessor) (ag4da0 core-prim . make-record-type-descriptor) (ag4d9f core-prim . make-record-constructor-descriptor) (ag4d9e core-prim . record?) (ag4d9d core-prim . record-type-uid) (ag4d9c core-prim . record-type-sealed?) (ag4d9b core-prim . record-type-parent) (ag4d9a core-prim . record-type-opaque?) (ag4d99 core-prim . record-type-name) (ag4d98 core-prim . record-type-generative?) (ag4d97 core-prim . record-type-field-names) (ag4d96 core-prim . record-rtd) (ag4d95 core-prim . record-field-mutable?) (ag4d94 core-prim . delete-file) (ag4d93 core-prim . file-exists?) (ag4d92 core-prim . vector-sort!) (ag4d91 core-prim . vector-sort) (ag4d90 core-prim . list-sort) (ag4d8f core-prim . symbol-hash) (ag4d8e core-prim . string-ci-hash) (ag4d8d core-prim . string-hash) (ag4d8c core-prim . equal-hash) (ag4d8b core-prim . hashtable-equivalence-function) (ag4d8a core-prim . make-hashtable) (ag4d89 core-prim . hashtable-hash-function) (ag4d88 core-prim . make-eqv-hashtable) (ag4d87 core-prim . make-eq-hashtable) (ag4d86 core-prim . hashtable?) (ag4d85 core-prim . hashtable-update!) (ag4d84 core-prim . hashtable-size) (ag4d83 core-prim . hashtable-set!) (ag4d82 core-prim . hashtable-ref) (ag4d81 core-prim . hashtable-mutable?) (ag4d80 core-prim . hashtable-keys) (ag4d7f core-prim . hashtable-entries) (ag4d7e core-prim . hashtable-delete!) (ag4d7d core-prim . hashtable-copy) (ag4d7c core-prim . hashtable-contains?) (ag4d7b core-prim . hashtable-clear!) (ag4d7a core-prim . call-with-output-file) (ag4d79 core-prim . call-with-input-file) (ag4d78 core-prim . write-char) (ag4d77 core-prim . write) (ag4d76 core-prim . with-output-to-file) (ag4d75 core-prim . with-input-from-file) (ag4d74 core-prim . read-char) (ag4d73 core-prim . read) (ag4d72 core-prim . peek-char) (ag4d71 core-prim . open-output-file) (ag4d70 core-prim . open-input-file) (ag4d6f core-prim . newline) (ag4d6e core-prim . display) (ag4d6d core-prim . close-output-port) (ag4d6c core-prim . close-input-port) (ag4d6b core-prim . eof-object?) (ag4d6a core-prim . eof-object) (ag4d69 core-prim . current-error-port) (ag4d68 core-prim . current-output-port) (ag4d67 core-prim . current-input-port) (ag4d66 core-prim . output-port?) (ag4d65 core-prim . input-port?) (ag4d64 core-prim . utf-8-codec) (ag4d63 core-prim . utf-16-codec) (ag4d62 core-prim . transcoder-error-handling-mode) (ag4d61 core-prim . transcoder-eol-style) (ag4d60 core-prim . transcoder-codec) (ag4d5f core-prim . transcoded-port) (ag4d5e core-prim . textual-port?) (ag4d5d core-prim . string->bytevector) (ag4d5c core-prim . standard-output-port) (ag4d5b core-prim . standard-input-port) (ag4d5a core-prim . standard-error-port) (ag4d59 core-prim . set-port-position!) (ag4d58 core-prim . put-u8) (ag4d57 core-prim . put-string) (ag4d56 core-prim . put-datum) (ag4d55 core-prim . put-char) (ag4d54 core-prim . put-bytevector) (ag4d53 core-prim . port?) (ag4d52 core-prim . port-transcoder) (ag4d51 core-prim . port-position) (ag4d50 core-prim . port-has-set-port-position!?) (ag4d4f core-prim . port-has-port-position?) (ag4d4e core-prim . port-eof?) (ag4d4d core-prim . output-port-buffer-mode) (ag4d4c core-prim . open-string-output-port) (ag4d4b core-prim . open-string-input-port) (ag4d4a core-prim . open-file-output-port) (ag4d49 core-prim . open-file-input/output-port) (ag4d48 core-prim . open-file-input-port) (ag4d47 core-prim . open-bytevector-output-port) (ag4d46 core-prim . open-bytevector-input-port) (ag4d45 core-prim . native-transcoder) (ag4d44 core-prim . native-eol-style) (ag4d43 core-prim . make-transcoder) (ag4d42 core-prim . latin-1-codec) (ag47cd core-prim . make-i/o-write-error) (ag47b8 core-prim . make-i/o-read-error) (ag486e core-prim . make-i/o-port-error) (ag47e4 core-prim . make-i/o-invalid-position-error) (ag47ff core-prim . make-i/o-filename-error) (ag4818 core-prim . make-i/o-file-protection-error) (ag482d core-prim . make-i/o-file-is-read-only-error) (ag4857 core-prim . make-i/o-file-does-not-exist-error) (ag4842 core-prim . make-i/o-file-already-exists-error) (ag47a3 core-prim . make-i/o-error) (ag489e core-prim . make-i/o-encoding-error) (ag4887 core-prim . make-i/o-decoding-error) (ag4d41 core-prim . make-custom-textual-output-port) (ag4d40 core-prim . make-custom-textual-input/output-port) (ag4d3f core-prim . make-custom-textual-input-port) (ag4d3e core-prim . make-custom-binary-output-port) (ag4d3d core-prim . make-custom-binary-input/output-port) (ag4d3c core-prim . make-custom-binary-input-port) (ag4d3b core-prim . make-bytevector) (ag4d3a core-prim . lookahead-u8) (ag4d39 core-prim . lookahead-char) (ag47cf core-prim . i/o-write-error?) (ag47ba core-prim . i/o-read-error?) (ag4872 core-prim . i/o-port-error?) (ag47e8 core-prim . i/o-invalid-position-error?) (ag4803 core-prim . i/o-filename-error?) (ag481a core-prim . i/o-file-protection-error?) (ag482f core-prim . i/o-file-is-read-only-error?) (ag4859 core-prim . i/o-file-does-not-exist-error?) (ag4844 core-prim . i/o-file-already-exists-error?) (ag47a5 core-prim . i/o-error?) (ag47ea core-prim . i/o-error-position) (ag4874 core-prim . i/o-error-port) (ag4805 core-prim . i/o-error-filename) (ag48a2 core-prim . i/o-encoding-error?) (ag48a4 core-prim . i/o-encoding-error-char) (ag4889 core-prim . i/o-decoding-error?) (ag4d38 core-prim . get-u8) (ag4d37 core-prim . get-string-n!) (ag4d36 core-prim . get-string-n) (ag4d35 core-prim . get-string-all) (ag4d34 core-prim . get-line) (ag4d33 core-prim . get-datum) (ag4d32 core-prim . get-char) (ag4d31 core-prim . get-bytevector-some) (ag4d30 core-prim . get-bytevector-n!) (ag4d2f core-prim . get-bytevector-n) (ag4d2e core-prim . get-bytevector-all) (ag4d2d core-prim . flush-output-port) (ag4d2c core-prim . close-port) (ag2bbe core-prim . scheme-report-environment) (ag4d2b core-prim . quotient) (ag2bbc core-prim . null-environment) (ag4d2a core-prim . remainder) (ag4d29 core-prim . modulo) (ag4d28 core-prim . inexact->exact) (ag4d27 core-prim . force) (ag4d26 core-prim . exact->inexact) (ag4d25 core-prim . make-promise) (ag4d24 core-prim . exit) (ag49dd core-prim . command-line) (ag4d23 core-prim . string-fill!) (ag4d22 core-prim . string-set!) (ag4d21 core-prim . set-cdr!) (ag4d20 core-prim . set-car!) (ag4d1f core-prim . remove) (ag4d1e core-prim . remv) (ag4d1d core-prim . remp) (ag4d1c core-prim . remq) (ag4d1b core-prim . partition) (ag4d1a core-prim . memv) (ag4d19 core-prim . memq) (ag4d18 core-prim . memp) (ag4d17 core-prim . member) (ag4d16 core-prim . exists) (ag4d15 core-prim . for-all) (ag4d14 core-prim . fold-right) (ag4d13 core-prim . fold-left) (ag4d12 core-prim . find) (ag4d11 core-prim . filter) (ag4d10 core-prim . cons*) (ag4d0f core-prim . assv) (ag4d0e core-prim . assq) (ag4d0d core-prim . assp) (ag4d0c core-prim . assoc) (ag4d0b core-prim . call-with-string-output-port) (ag4d0a core-prim . call-with-port) (ag4d09 core-prim . call-with-bytevector-output-port) (ag4d08 core-prim . bytevector->string) (ag4d07 core-prim . buffer-mode?) (ag4d06 core-prim . binary-port?) (ag4d05 core-prim . with-exception-handler) (ag4d04 core-prim . raise-continuable) (ag4d03 core-prim . raise) (ag2bc2 core-prim . eval) (ag2bba core-prim . environment) (ag4d02 core-prim . make-enumeration) (ag4d01 core-prim . enum-set=?) (ag4d00 core-prim . enum-set-universe) (ag4cff core-prim . enum-set-union) (ag4cfe core-prim . enum-set-subset?) (ag4cfd core-prim . enum-set-projection) (ag4cfc core-prim . enum-set-member?) (ag4cfb core-prim . enum-set-intersection) (ag4cfa core-prim . enum-set-indexer) (ag4cf9 core-prim . enum-set-difference) (ag4cf8 core-prim . enum-set-constructor) (ag4cf7 core-prim . enum-set-complement) (ag4cf6 core-prim . enum-set->list) (ag4719 core-prim . who-condition?) (ag4691 core-prim . warning?) (ag46d0 core-prim . violation?) (ag4790 core-prim . undefined-violation?) (ag4777 core-prim . syntax-violation?) (ag477b core-prim . syntax-violation-subform) (ag4779 core-prim . syntax-violation-form) (ag2be2 core-prim . syntax-violation) (ag4cf5 core-prim . simple-conditions) (ag46a6 core-prim . serious-condition?) (ag4730 core-prim . non-continuable-violation?) (ag467a core-prim . message-condition?) (ag4715 core-prim . make-who-condition) (ag468f core-prim . make-warning) (ag46ce core-prim . make-violation) (ag478e core-prim . make-undefined-violation) (ag4771 core-prim . make-syntax-violation) (ag46a4 core-prim . make-serious-condition) (ag472e core-prim . make-non-continuable-violation) (ag4676 core-prim . make-message-condition) (ag4758 core-prim . make-lexical-violation) (ag46fa core-prim . make-irritants-condition) (ag4743 core-prim . make-implementation-restriction-violation) (ag46b9 core-prim . make-error) (ag46e3 core-prim . make-assertion-violation) (ag475a core-prim . lexical-violation?) (ag46fe core-prim . irritants-condition?) (ag4745 core-prim . implementation-restriction-violation?) (ag46bb core-prim . error?) (ag471b core-prim . condition-who) (ag4cf4 core-prim . condition-predicate) (ag467c core-prim . condition-message) (ag4700 core-prim . condition-irritants) (ag4cf3 core-prim . condition-accessor) (ag4cf2 core-prim . condition) (ag46e5 core-prim . assertion-violation?) (ag4cf1 core-prim . condition?) (ag4cf0 core-prim . utf32->string) (ag4cef core-prim . utf16->string) (ag4cee core-prim . utf8->string) (ag4ced core-prim . uint-list->bytevector) (ag4cec core-prim . u8-list->bytevector) (ag4ceb core-prim . string->utf8) (ag4cea core-prim . string->utf32) (ag4ce9 core-prim . string->utf16) (ag4ce8 core-prim . sint-list->bytevector) (ag4ce7 core-prim . native-endianness) (ag4ce6 core-prim . bytevector?) (ag4ce5 core-prim . bytevector=?) (ag4ce4 core-prim . bytevector-uint-set!) (ag4ce3 core-prim . bytevector-uint-ref) (ag4ce2 core-prim . bytevector-u8-set!) (ag4ce1 core-prim . bytevector-u8-ref) (ag4ce0 core-prim . bytevector-u64-set!) (ag4cdf core-prim . bytevector-u64-ref) (ag4cde core-prim . bytevector-u64-native-set!) (ag4cdd core-prim . bytevector-u64-native-ref) (ag4cdc core-prim . bytevector-u32-set!) (ag4cdb core-prim . bytevector-u32-ref) (ag4cda core-prim . bytevector-u32-native-set!) (ag4cd9 core-prim . bytevector-u32-native-ref) (ag4cd8 core-prim . bytevector-u16-set!) (ag4cd7 core-prim . bytevector-u16-ref) (ag4cd6 core-prim . bytevector-u16-native-set!) (ag4cd5 core-prim . bytevector-u16-native-ref) (ag4cd4 core-prim . bytevector-sint-set!) (ag4cd3 core-prim . bytevector-sint-ref) (ag4cd2 core-prim . bytevector-s8-set!) (ag4cd1 core-prim . bytevector-s8-ref) (ag4cd0 core-prim . bytevector-s64-set!) (ag4ccf core-prim . bytevector-s64-ref) (ag4cce core-prim . bytevector-s64-native-set!) (ag4ccd core-prim . bytevector-s64-native-ref) (ag4ccc core-prim . bytevector-s32-set!) (ag4ccb core-prim . bytevector-s32-ref) (ag4cca core-prim . bytevector-s32-native-set!) (ag4cc9 core-prim . bytevector-s32-native-ref) (ag4cc8 core-prim . bytevector-s16-set!) (ag4cc7 core-prim . bytevector-s16-ref) (ag4cc6 core-prim . bytevector-s16-native-set!) (ag4cc5 core-prim . bytevector-s16-native-ref) (ag4cc4 core-prim . bytevector-length) (ag4cc3 core-prim . bytevector-ieee-single-ref) (ag4cc2 core-prim . bytevector-ieee-single-set!) (ag4cc1 core-prim . bytevector-ieee-single-native-set!) (ag4cc0 core-prim . bytevector-ieee-single-native-ref) (ag4cbf core-prim . bytevector-ieee-double-set!) (ag4cbe core-prim . bytevector-ieee-double-ref) (ag4cbd core-prim . bytevector-ieee-double-native-set!) (ag4cbc core-prim . bytevector-ieee-double-native-ref) (ag4cbb core-prim . bytevector-fill!) (ag4cba core-prim . bytevector-copy!) (ag4cb9 core-prim . bytevector-copy) (ag4cb8 core-prim . bytevector->uint-list) (ag4cb7 core-prim . bytevector->u8-list) (ag4cb6 core-prim . bytevector->sint-list) (ag48ce core-prim . no-nans-violation?) (ag48b9 core-prim . no-infinities-violation?) (ag48cc core-prim . make-no-nans-violation) (ag48b7 core-prim . make-no-infinities-violation) (ag4cb5 core-prim . real->flonum) (ag4cb4 core-prim . flzero?) (ag4cb3 core-prim . fltruncate) (ag4cb2 core-prim . fltan) (ag4cb1 core-prim . flsqrt) (ag4cb0 core-prim . flsin) (ag4caf core-prim . flround) (ag4cae core-prim . flpositive?) (ag4cad core-prim . flonum?) (ag4cac core-prim . flodd?) (ag4cab core-prim . flnumerator) (ag4caa core-prim . flnegative?) (ag4ca9 core-prim . flnan?) (ag4ca8 core-prim . flmod0) (ag4ca7 core-prim . flmod) (ag4ca6 core-prim . flmin) (ag4ca5 core-prim . flmax) (ag4ca4 core-prim . fllog) (ag4ca3 core-prim . flinteger?) (ag4ca2 core-prim . flinfinite?) (ag4ca1 core-prim . flfloor) (ag4ca0 core-prim . flfinite?) (ag4c9f core-prim . flexpt) (ag4c9e core-prim . flexp) (ag4c9d core-prim . fleven?) (ag4c9c core-prim . fldiv0-and-mod0) (ag4c9b core-prim . fldiv0) (ag4c9a core-prim . fldiv-and-mod) (ag4c99 core-prim . fldiv) (ag4c98 core-prim . fldenominator) (ag4c97 core-prim . flcos) (ag4c96 core-prim . flceiling) (ag4c95 core-prim . flatan) (ag4c94 core-prim . flasin) (ag4c93 core-prim . flacos) (ag4c92 core-prim . flabs) (ag4c91 core-prim . fl>?) (ag4c90 core-prim . fl>=?) (ag4c8f core-prim . fl=?) (ag4c8e core-prim . fl<?) (ag4c8d core-prim . fl<=?) (ag4c8c core-prim . fl/) (ag4c8b core-prim . fl-) (ag4c8a core-prim . fl+) (ag4c89 core-prim . fl*) (ag4c88 core-prim . fixnum->flonum) (ag4c87 core-prim . fxzero?) (ag4c86 core-prim . fxxor) (ag4c85 core-prim . fxrotate-bit-field) (ag4c84 core-prim . fxreverse-bit-field) (ag4c83 core-prim . fxpositive?) (ag4c82 core-prim . fxodd?) (ag4c81 core-prim . fxnot) (ag4c80 core-prim . fxnegative?) (ag4c7f core-prim . fxmod0) (ag4c7e core-prim . fxmod) (ag4c7d core-prim . fxmin) (ag4c7c core-prim . fxmax) (ag4c7b core-prim . fxlength) (ag4c7a core-prim . fxior) (ag4c79 core-prim . fxif) (ag4c78 core-prim . fxfirst-bit-set) (ag4c77 core-prim . fxeven?) (ag4c76 core-prim . fxdiv0-and-mod0) (ag4c75 core-prim . fxdiv0) (ag4c74 core-prim . fxdiv-and-mod) (ag4c73 core-prim . fxdiv) (ag4c72 core-prim . fxcopy-bit-field) (ag4c71 core-prim . fxcopy-bit) (ag4c70 core-prim . fxbit-set?) (ag4c6f core-prim . fxbit-field) (ag4c6e core-prim . fxbit-count) (ag4c6d core-prim . fxarithmetic-shift-right) (ag4c6c core-prim . fxarithmetic-shift-left) (ag4c6b core-prim . fxarithmetic-shift) (ag4c6a core-prim . fxand) (ag4c69 core-prim . fx>?) (ag4c68 core-prim . fx>=?) (ag4c67 core-prim . fx=?) (ag4c66 core-prim . fx<?) (ag4c65 core-prim . fx<=?) (ag4c64 core-prim . fx-/carry) (ag4c63 core-prim . fx-) (ag4c62 core-prim . fx+/carry) (ag4c61 core-prim . fx+) (ag4c60 core-prim . fx*/carry) (ag4c5f core-prim . fx*) (ag4c5e core-prim . greatest-fixnum) (ag4c5d core-prim . least-fixnum) (ag4c5c core-prim . fixnum-width) (ag4c5b core-prim . fixnum?) (ag4c5a core-prim . bitwise-rotate-bit-field) (ag4c59 core-prim . bitwise-reverse-bit-field) (ag4c58 core-prim . bitwise-length) (ag4c57 core-prim . bitwise-if) (ag4c56 core-prim . bitwise-first-bit-set) (ag4c55 core-prim . bitwise-copy-bit-field) (ag4c54 core-prim . bitwise-copy-bit) (ag4c53 core-prim . bitwise-bit-set?) (ag4c52 core-prim . bitwise-bit-field) (ag4c51 core-prim . bitwise-bit-count) (ag4c50 core-prim . bitwise-xor) (ag4c4f core-prim . bitwise-ior) (ag4c4e core-prim . bitwise-and) (ag4c4d core-prim . bitwise-not) (ag4c4c core-prim . bitwise-arithmetic-shift-right) (ag4c4b core-prim . bitwise-arithmetic-shift-left) (ag4c4a core-prim . bitwise-arithmetic-shift) (ag4c49 core-prim . zero?) (ag4c48 core-prim . vector?) (ag4c47 core-prim . vector-set!) (ag4c46 core-prim . vector-ref) (ag4c45 core-prim . vector-map) (ag4c44 core-prim . vector-length) (ag4c43 core-prim . vector-for-each) (ag4c42 core-prim . vector-fill!) (ag4c41 core-prim . vector->list) (ag4c40 core-prim . vector) (ag4c3f core-prim . values) (ag4c3e core-prim . truncate) (ag4c3d core-prim . tan) (ag4c3c core-prim . symbol?) (ag4c3b core-prim . symbol=?) (ag4c3a core-prim . symbol->string) (ag4c39 core-prim . substring) (ag4c38 core-prim . string?) (ag4c37 core-prim . string>?) (ag4c36 core-prim . string>=?) (ag4c35 core-prim . string=?) (ag4c34 core-prim . string<?) (ag4c33 core-prim . string<=?) (ag4c32 core-prim . string-ref) (ag4c31 core-prim . string-length) (ag4c30 core-prim . string-for-each) (ag4c2f core-prim . string-copy) (ag4c2e core-prim . string-append) (ag4c2d core-prim . string->symbol) (ag4c2c core-prim . string->number) (ag4c2b core-prim . string->list) (ag4c2a core-prim . string) (ag4c29 core-prim . sqrt) (ag4c28 core-prim . sin) (ag4c27 core-prim . round) (ag4c26 core-prim . reverse) (ag4c25 core-prim . real?) (ag4c24 core-prim . real-valued?) (ag4c23 core-prim . real-part) (ag4c22 core-prim . rationalize) (ag4c21 core-prim . rational?) (ag4c20 core-prim . rational-valued?) (ag4c1f core-prim . procedure?) (ag4c1e core-prim . positive?) (ag4c1d core-prim . pair?) (ag4c1c core-prim . odd?) (ag4c1b core-prim . numerator) (ag4c1a core-prim . number?) (ag4c19 core-prim . number->string) (ag4c18 core-prim . null?) (ag4c17 core-prim . not) (ag4c16 core-prim . negative?) (ag4c15 core-prim . nan?) (ag4c14 core-prim . min) (ag4c13 core-prim . max) (ag4c12 core-prim . map) (ag4c11 core-prim . make-vector) (ag4c10 core-prim . make-string) (ag4c0f core-prim . make-rectangular) (ag4c0e core-prim . make-polar) (ag4c0d core-prim . magnitude) (ag4c0c core-prim . log) (ag4c0b core-prim . list?) (ag4c0a core-prim . list-tail) (ag4c09 core-prim . list-ref) (ag4c08 core-prim . list->vector) (ag4c07 core-prim . list->string) (ag4c06 core-prim . list) (ag4c05 core-prim . length) (ag4c04 core-prim . lcm) (ag4c03 core-prim . integer?) (ag4c02 core-prim . integer-valued?) (ag4c01 core-prim . integer->char) (ag4c00 core-prim . infinite?) (ag4bff core-prim . inexact?) (ag4bfe core-prim . inexact) (ag4bfd core-prim . imag-part) (ag4bfc core-prim . gcd) (ag4bfb core-prim . for-each) (ag4bfa core-prim . floor) (ag4bf9 core-prim . finite?) (ag4bf8 core-prim . expt) (ag4bf7 core-prim . exp) (ag4bf6 core-prim . exact?) (ag4bf5 core-prim . exact-integer-sqrt) (ag4bf4 core-prim . exact) (ag4bf3 core-prim . even?) (ag4bf2 core-prim . error) (ag4bf1 core-prim . eqv?) (ag4bf0 core-prim . equal?) (ag4bef core-prim . eq?) (ag4bee core-prim . dynamic-wind) (ag4bed core-prim . div0-and-mod0) (ag4bec core-prim . mod0) (ag4beb core-prim . div0) (ag4bea core-prim . div-and-mod) (ag4be9 core-prim . mod) (ag4be8 core-prim . div) (ag4be7 core-prim . denominator) (ag4be6 core-prim . cos) (ag4be5 core-prim . cons) (ag4be4 core-prim . complex?) (ag4be3 core-prim . char?) (ag4be2 core-prim . char>?) (ag4be1 core-prim . char>=?) (ag4be0 core-prim . char=?) (ag4bdf core-prim . char<?) (ag4bde core-prim . char<=?) (ag4bdd core-prim . char->integer) (ag4bdc core-prim . ceiling) (ag4bdb core-prim . call-with-values) (ag4bda core-prim . call/cc) (ag4bd9 core-prim . call-with-current-continuation) (ag4bd8 core-prim . cddddr) (ag4bd7 core-prim . cdddar) (ag4bd6 core-prim . cddadr) (ag4bd5 core-prim . cddaar) (ag4bd4 core-prim . cdaddr) (ag4bd3 core-prim . cdadar) (ag4bd2 core-prim . cdaadr) (ag4bd1 core-prim . cdaaar) (ag4bd0 core-prim . cadddr) (ag4bcf core-prim . caddar) (ag4bce core-prim . cadadr) (ag4bcd core-prim . cadaar) (ag4bcc core-prim . caaddr) (ag4bcb core-prim . caadar) (ag4bca core-prim . caaadr) (ag4bc9 core-prim . caaaar) (ag4bc8 core-prim . cdddr) (ag4bc7 core-prim . cddar) (ag4bc6 core-prim . cdadr) (ag4bc5 core-prim . cdaar) (ag4bc4 core-prim . caddr) (ag4bc3 core-prim . cadar) (ag4bc2 core-prim . caadr) (ag4bc1 core-prim . caaar) (ag4bc0 core-prim . cddr) (ag4bbf core-prim . cdar) (ag4bbe core-prim . cadr) (ag4bbd core-prim . caar) (ag4bbc core-prim . cdr) (ag4bbb core-prim . car) (ag4bba core-prim . boolean?) (ag4bb9 core-prim . boolean=?) (ag4bb8 core-prim . atan) (ag4bb7 core-prim . assertion-violation) (ag2bdc core-prim . assertion-error) (ag4bb6 core-prim . asin) (ag4bb5 core-prim . apply) (ag4bb4 core-prim . append) (ag4bb3 core-prim . angle) (ag4bb2 core-prim . acos) (ag4bb1 core-prim . abs) (ag4bb0 core-prim . /) (ag4baf core-prim . *) (ag4bae core-prim . -) (ag4bad core-prim . +) (ag4bac core-prim . >=) (ag4bab core-prim . >) (ag4baa core-prim . =) (ag4ba9 core-prim . <=) (ag4ba8 core-prim . <) (ag4ba7 core-prim . library) (ag4ba6 $core-rtd &no-nans-rtd &no-nans-rcd) (ag4ba5 $core-rtd &no-infinities-rtd &no-infinities-rcd) (ag4ba4 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (ag4ba3 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (ag4ba2 $core-rtd &i/o-port-rtd &i/o-port-rcd) (ag4ba1 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (ag4ba0 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (ag4b9f $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (ag4b9e $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (ag4b9d $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (ag4b9c $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (ag4b9b $core-rtd &i/o-write-rtd &i/o-write-rcd) (ag4b9a $core-rtd &i/o-read-rtd &i/o-read-rcd) (ag4b99 $core-rtd &i/o-rtd &i/o-rcd) (ag4b98 $core-rtd &undefined-rtd &undefined-rcd) (ag4b97 $core-rtd &syntax-rtd &syntax-rcd) (ag4b96 $core-rtd &lexical-rtd &lexical-rcd) (ag4b95 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (ag4b94 $core-rtd &non-continuable-rtd &non-continuable-rcd) (ag4b93 $core-rtd &who-rtd &who-rcd) (ag4b92 $core-rtd &irritants-rtd &irritants-rcd) (ag4b91 $core-rtd &assertion-rtd &assertion-rcd) (ag4b90 $core-rtd &violation-rtd &violation-rcd) (ag4b8f $core-rtd &error-rtd &error-rcd) (ag4b8e $core-rtd &serious-rtd &serious-rcd) (ag4b8d $core-rtd &warning-rtd &warning-rcd) (ag4b8c $core-rtd &message-rtd &message-rcd) (ag4b8b $core-rtd &condition-rtd &condition-rcd) (ag4b8a macro . define-condition-type) (ag4b89 macro . define-enumeration) (ag4b88 macro . define-record-type) (ag4b87 macro . parent-rtd) (ag4b86 macro . nongenerative) (ag4b85 macro . opaque) (ag4b84 macro . sealed) (ag4b83 macro . protocol) (ag4b82 macro . parent) (ag4b81 macro . immutable) (ag4b80 macro . mutable) (ag4b7f macro . fields) (ag4b7e macro . error-handling-mode) (ag4b7d macro . file-options) (ag4b7c macro . buffer-mode) (ag4b7b macro . eol-style) (ag4b7a macro . guard) (ag4b79 macro . trace-define) (ag4b78 macro . trace-lambda) (ag4b77 macro . unsyntax-splicing) (ag4b76 macro . unsyntax) (ag4b75 macro . unquote-splicing) (ag4b74 macro . unquote) (ag4b73 macro . _) (ag4b72 macro . else) (ag4b71 macro . =>) (ag4b70 macro . ...) (ag4b6f macro . assert) (ag4b6e macro . endianness) (ag4b6d macro . delay) (ag4b6c macro . time) (ag4b6b macro . do) (ag4b6a macro . cond) (ag4b69 macro . let*) (ag4b68 macro . let) (ag4b67 macro . let*-values) (ag4b66 macro . let-values) (ag4b65 macro . identifier-syntax) (ag4b64 macro . with-syntax) (ag4b63 macro . quasisyntax) (ag4b62 macro . quasiquote) (ag4b61 macro . syntax-rules) (ag4b60 macro . include) (ag4b5f macro . define-struct) (ag4b5e core-macro . record-constructor-descriptor) (ag4b5d core-macro . record-type-descriptor) (ag4b5c macro . case) (ag4b5b macro . parameterize) (ag4b5a macro . unless) (ag4b59 macro . when) (ag4b58 core-macro . or) (ag4b57 core-macro . and) (ag4b56 core-macro . if) (ag4b55 core-macro . letrec*) (ag4b54 core-macro . letrec) (ag4b53 core-macro . type-descriptor) (ag4b52 core-macro . case-lambda) (ag4b51 core-macro . lambda) (ag4b50 core-macro . syntax) (ag4b4f core-macro . syntax-case) (ag4b4e core-macro . quote) (ag4b4d core-macro . foreign-call) (ag4b4c letrec-syntax) (ag4b4b let-syntax) (ag4b4a set!) (ag4b49 import) (ag4b48 begin) (ag4b47 module) (ag4b46 define-syntax) (ag4b45 define)) values values '#f '#f '#f '#f) (ag271f@ag256b@install-library 'ag4e8d '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . ag4e6c) (eval-core . ag4e6b) (set-symbol-value! . ag4e6a) (symbol-value . ag4e69) (gensym . ag4e68) (void . ag4e67)) '() values values '#f '#f '#f '#f) (ag271f@ag256b@install-library 'ag4e8e '(mosh) '() '() '() '() '((set-symbol-value! . ag4e6a) (symbol-value . ag4e69) (regexp? . ag4e65) (read-line . ag4e64) (ungensym . ag4e62) (alist->eq-hash-table . ag4e61) (assoc-ref . ag4e60) (print . ag4e5f) (format . ag4e5e) (host-os . ag4e5d) (library-path . ag254a) (standard-library-path . ag4e5c) (file-newer? . ag4e5b) (stat-mtime . ag4e5a) (digit->integer . ag4e56) (call-with-string-input-port . ag4e55) (call-with-string-io . ag4e54) (string-split . ag4e53) (bytevector-for-each . ag4e52) (string->regexp . ag4e51) (rxmatch . ag4e50) (regexp-replace-all . ag4e4f) (hashtable-for-each . ag4e4e) (set-current-directory! . ag4e49) (expand-path . ag4e48) (current-directory . ag4e47) (p . ag4e08) (get-timeofday . ag4def) (get-command-line . ag4dee) (sys-display . ag4ded) (whereis . ag4dec) (register . ag4deb) (vm-join! . ag4dea) (vm-set-value! . ag4de9) (vm? . ag4de8) (main-vm? . ag4de7) (vm-eval . ag4de6) (vm-self . ag4de5) (vm-start! . ag4de4) (make-vm . ag4de3) (mutex-try-lock! . ag4de2) (mutex-unlock! . ag4de1) (mutex-lock! . ag4de0) (mutex? . ag4ddf) (make-mutex . ag4dde) (condition-variable-notify-all! . ag4ddd) (condition-variable-notify! . ag4ddc) (condition-variable-wait! . ag4ddb) (make-condition-variable . ag4dda) (mosh-executable-path . ag4dd9) (make-file-options . ag4dd8) (source-info . ag4dd7) (make-compiler-instruction . ag4dd6) (make-instruction . ag4dd5) (set-source-info! . ag4dd4) (bignum? . ag4dd3) (fast-equal? . ag4dd2) (fasl-read . ag4dd1) (fasl-write . ag4dd0) (time-usage . ag4dcf) (os-constant . ag4dce) (time . ag4b6c) (include . ag4b60)) '() values values '#f '#f '#f '#f) (ag271f@ag256b@install-library 'ag4e8f '(system) '() '() '() '() '((gensym-prefix-set! . ag4e63) (write-to-file . ag4e59) (file->list . ag4e58) (file->string . ag4e57) (mosh-cache-dir . ag2335) (call-process . ag4e4d) (local-tz-offset . ag4e4c) (microseconds . ag4e4b) (directory-list . ag4e4a) (expand-path . ag4e48) (%spawn . ag4e46) (%waitpid . ag4e45) (simple-struct-name . ag4e44) (simple-struct-set! . ag4e43) (simple-struct-ref . ag4e42) (make-simple-struct . ag4e41) (simple-struct? . ag4e40) (pointer-ref-c-int64 . ag4e3f) (pointer-ref-c-int32 . ag4e3e) (pointer-ref-c-int16 . ag4e3d) (pointer-ref-c-int8 . ag4e3c) (pointer-ref-c-uint64 . ag4e3b) (pointer-ref-c-uint32 . ag4e3a) (pointer-ref-c-uint16 . ag4e39) (pointer-ref-c-uint8 . ag4e38) (pointer-set-c-uint64! . ag4e37) (pointer-set-c-uint32! . ag4e36) (pointer-set-c-uint16! . ag4e35) (pointer-set-c-uint8! . ag4e34) (pointer-set-c-int64! . ag4e33) (pointer-set-c-int32! . ag4e32) (pointer-set-c-int16! . ag4e31) (pointer-set-c-int8! . ag4e30) (pointer-set-c-pointer! . ag4e2f) (pointer-set-c-double! . ag4e2e) (pointer-set-c-float! . ag4e2d) (pointer-set-c-long-long! . ag4e2c) (pointer-set-c-long! . ag4e2b) (pointer-set-c-int! . ag4e2a) (pointer-set-c-short! . ag4e29) (pointer-set-c-char! . ag4e28) (pointer-ref-c-pointer . ag4e27) (pointer-ref-c-double . ag4e26) (pointer-ref-c-float . ag4e25) (pointer-ref-c-unsigned-long-long . ag4e24) (pointer-ref-c-signed-long-long . ag4e23) (pointer-ref-c-unsigned-long . ag4e22) (pointer-ref-c-signed-long . ag4e21) (pointer-ref-c-unsigned-int . ag4e20) (pointer-ref-c-signed-int . ag4e1f) (pointer-ref-c-unsigned-short . ag4e1e) (pointer-ref-c-signed-short . ag4e1d) (pointer-ref-c-unsigned-char . ag4e1c) (pointer-ref-c-signed-char . ag4e1b) (pointer->integer . ag4e1a) (integer->pointer . ag4e19) (pointer? . ag4e18) (shared-errno . ag4e17) (%ffi-free . ag4e16) (%ffi-malloc . ag4e15) (%ffi-supported? . ag4e14) (%ffi-pointer->string . ag4e13) (%ffi-call->string-or-zero . ag4e12) (%ffi-call->double . ag4e11) (%ffi-call->void* . ag4e10) (%ffi-call->void . ag4e0f) (%ffi-call->char . ag4e0e) (%ffi-call->int . ag4e0d) (%ffi-lookup . ag4e0c) (%ffi-open . ag4e0b) (%fork . ag4e0a) (%pipe . ag4e09) (open-output-string . ag4e07) (get-output-string . ag4e06) (file-stat-ctime . ag4e05) (file-stat-atime . ag4e04) (file-stat-mtime . ag4e03) (file-size-in-bytes . ag4e02) (file-writable? . ag4e01) (file-executable? . ag4e00) (file-readable? . ag4dff) (file-regular? . ag4dfe) (file-symbolic-link? . ag4dfd) (file-directory? . ag4dfc) (create-symbolic-link . ag4dfb) (rename-file . ag4dfa) (delete-directory . ag4df9) (create-directory . ag4df8) (create-mosh-cache-dir . ag4df7) (get-environment-variables . ag4df6) (current-exception-handler . ag4df5) (get-environment-variable . ag4df4) (join-wraps . ag4df3) (id->real-label . ag4df2) (same-marks? . ag4df1) (same-marks*? . ag4df0) (disasm . ag4dcd) (make-parameter . ag2333) (socket-port . ag4dcc) (socket-shutdown . ag4dcb) (socket-close . ag4dca) (socket-send . ag4dc9) (socket-recv! . ag4dc8) (socket-recv . ag4dc7) (make-server-socket . ag4dc6) (make-client-socket . ag4dc5) (socket-accept . ag4dc4) (socket? . ag4dc3) (parameterize . ag4b5b)) '() values values '#f '#f '#f '#f)))
(begin (set! ag49c8@ref (unspecified)) (set! ag49ca@x* (unspecified)) (set! ag49cc@add-library-path! (unspecified)) (set! ag49ce@parse-and-add-library-path (unspecified)) (set! ag49d0@for-each-with-index (unspecified)) (set! ag49d2@rpad (unspecified)) (set! ag49d4@condition-printer (unspecified)) (set! ag49d6@record->field-alist (unspecified)) (set! ag49d8@map-with-index (unspecified)) (set! ag49da@repl (unspecified)) (set! ag49dc@trace-printer (unspecified)) (set! ag49de@command-line (unspecified)) (set! ag49e0@local-library-path (unspecified)) (set! ag49e2@load/args (unspecified)) (set! ag49e4@load (unspecified)) (set! ag49e6@ironscheme-build (unspecified)) (set! ag49e8@eval-top-level (unspecified)) (set! ag49ea@compile-system-libraries (unspecified)) (set! ag49ec@compile (unspecified)) (set! ag49ee@compile->closure (unspecified)) (set! ag49f0@pre-compile-r6rs-file (unspecified)) (set! ag49f2@load-r6rs-top-level (unspecified)) (set! ag49f4@load-r6rs-top-level-sexp (unspecified)) (set! ag49f6@prefix-inc (unspecified)) (set! ag49f8@prefix-inc! (unspecified)) (begin (set! ag49c8@ref (lambda (ag4a33@rtd ag4a34@i ag4a35@x) ((lambda (ag4a39@val) (if (symbol? ag4a39@val) (ungensym ag4a39@val) ag4a39@val)) ((record-accessor ag4a33@rtd ag4a34@i) ag4a35@x)))) (set! ag4b2b@ag49c8@ref ag49c8@ref)) (begin (set! ag49ca@x* '()) (set! ag4b2c@ag49ca@x* ag49ca@x*)) (begin (set! ag49cc@add-library-path! (lambda (ag4a3b@path) (ag270f@ag254b@library-path (append (ag270f@ag254b@library-path) (list ag4a3b@path))))) (set! ag4b2d@ag49cc@add-library-path! ag49cc@add-library-path!)) (begin (set! ag49ce@parse-and-add-library-path (lambda (ag4a3d@paths ag4a3e@message) ((lambda (ag4a42@separator) (begin (set! ag4a42@separator (if (string=? (host-os) '"win32") '#\; '#\:)) ((lambda (ag4a43@t) (if ag4a43@t ((lambda (ag4a45@paths) (for-each (lambda (ag4a47@path) (if (file-exists? ag4a47@path) (ag49cc@add-library-path! (expand-path ag4a47@path)) (format (current-error-port) ag4a3e@message ag4a47@path))) (string-split ag4a45@paths ag4a42@separator))) ag4a43@t) (void))) ag4a3d@paths))) '#f))) (set! ag4b2e@ag49ce@parse-and-add-library-path ag49ce@parse-and-add-library-path)) (begin (set! ag49d0@for-each-with-index (lambda (ag4a49@proc ag4a4a@lst) (letrec ((ag4a4d@loop (lambda (ag4a4f@i ag4a50@lst) (if (null? ag4a50@lst) (if '#f '#f (void)) (begin (ag4a49@proc ag4a4f@i (car ag4a50@lst)) (ag4a4d@loop (+ ag4a4f@i '1) (cdr ag4a50@lst))))))) (ag4a4d@loop '1 ag4a4a@lst)))) (set! ag4b2f@ag49d0@for-each-with-index ag49d0@for-each-with-index)) (begin (set! ag49d2@rpad (lambda (ag4a53@str ag4a54@pad ag4a55@n) ((lambda (ag4a59@rest) ((letrec ((ag4a5b@loop (lambda (ag4a5d@rest ag4a5e@ret) (if (<= ag4a5d@rest '0) ag4a5e@ret (ag4a5b@loop (- ag4a5d@rest '1) (string-append ag4a5e@ret ag4a54@pad)))))) ag4a5b@loop) ag4a59@rest (format '"~a" ag4a53@str))) (- ag4a55@n (string-length (format '"~a" ag4a53@str)))))) (set! ag4b30@ag49d2@rpad ag49d2@rpad)) (begin (set! ag49d4@condition-printer (lambda (ag4a61@e ag4a62@port) ((lambda (ag4a66@max-condition-len) (begin (set! ag4a66@max-condition-len (apply max (map (lambda (ag4a77@c) (string-length (symbol->string (record-type-name (record-rtd ag4a77@c))))) (simple-conditions ag4a61@e)))) (begin (display '" Condition components:\n" ag4a62@port) (ag49d0@for-each-with-index (lambda (ag4a67@i ag4a68@x) ((lambda (ag4a6b@rtd ag4a6c@fields-alist) (begin (format ag4a62@port '" ~d. ~a" ag4a67@i (ag49d2@rpad (symbol->string (record-type-name ag4a6b@rtd)) '" " ag4a66@max-condition-len)) (if (null? ag4a6c@fields-alist) (newline ag4a62@port) (void)) ((letrec ((ag4a6f@loop (lambda (ag4a71@first ag4a72@fields-alist) (if (null? ag4a72@fields-alist) '() ((lambda (ag4a75@field) (begin (if (not ag4a71@first) (display (ag49d2@rpad '"" '" " (+ '4 ag4a66@max-condition-len)) ag4a62@port) (void)) (display '"       " ag4a62@port) (display (car ag4a75@field) ag4a62@port) (display '": " ag4a62@port) (write (cdr ag4a75@field) ag4a62@port) (newline ag4a62@port) (ag4a6f@loop '#f (cdr ag4a72@fields-alist)))) (car ag4a72@fields-alist)))))) ag4a6f@loop) '#t ag4a6c@fields-alist))) (record-rtd ag4a68@x) (ag49d6@record->field-alist ag4a68@x))) (simple-conditions ag4a61@e))))) '#f))) (set! ag4b31@ag49d4@condition-printer ag49d4@condition-printer)) (begin (set! ag49d6@record->field-alist (lambda (ag4a79@r) ((lambda (ag4a7c@ref) (begin (set! ag4a7c@ref (lambda (ag4a87@rtd ag4a88@i ag4a89@x) ((lambda (ag4a8d@val) (if (symbol? ag4a8d@val) (ungensym ag4a8d@val) ag4a8d@val)) ((record-accessor ag4a87@rtd ag4a88@i) ag4a89@x)))) ((letrec ((ag4a7d@loop (lambda (ag4a7f@ret ag4a80@rtd) (if ag4a80@rtd (ag4a7d@loop (append ag4a7f@ret (ag49d8@map-with-index (lambda (ag4a83@i ag4a84@field) (cons ag4a84@field (ag4a7c@ref ag4a80@rtd ag4a83@i ag4a79@r))) (vector->list (record-type-field-names ag4a80@rtd)))) (record-type-parent ag4a80@rtd)) ag4a7f@ret)))) ag4a7d@loop) '() (record-rtd ag4a79@r)))) '#f))) (set! ag4b32@ag49d6@record->field-alist ag49d6@record->field-alist)) (begin (set! ag49d8@map-with-index (lambda (ag4a8f@proc ag4a90@lst) ((letrec ((ag4a93@loop (lambda (ag4a95@i ag4a96@lst ag4a97@ret) (if (null? ag4a96@lst) (reverse ag4a97@ret) (ag4a93@loop (+ ag4a95@i '1) (cdr ag4a96@lst) (cons (ag4a8f@proc ag4a95@i (car ag4a96@lst)) ag4a97@ret)))))) ag4a93@loop) '0 ag4a90@lst '()))) (set! ag4b33@ag49d8@map-with-index ag49d8@map-with-index)) (begin (set! ag49da@repl (lambda ag4a9b@x ((lambda (ag4a9e@rec) (begin (set! ag4a9e@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (ag4aa1@ag4a9f) (lambda () (with-exception-handler (lambda (ag4aa3@e) ((call/cc (lambda (ag4aa5@ag4aa0) (ag4aa1@ag4a9f (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? ag4aa3@e) (ag49d4@condition-printer ag4aa3@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" ag4aa3@e))) (ag4aa5@ag4aa0 (lambda () (raise-continuable ag4aa3@e)))))))))) (lambda () ((letrec ((ag4aa7@loop (lambda (ag4aa9@line ag4aaa@accum) ((lambda (ag4aae@parentheses-ok? ag4ab0@eval-string-print) (begin (set! ag4aae@parentheses-ok? (lambda (ag4ab5@text) ((letrec ((ag4ab7@loop (lambda (ag4ab9@chars ag4aba@p0 ag4abb@p1) (if (null? ag4ab9@chars) (= '0 ag4aba@p0 ag4abb@p1) ((lambda (ag4abf@t) (if (memv ag4abf@t '(#\()) (ag4ab7@loop (cdr ag4ab9@chars) (+ ag4aba@p0 '1) ag4abb@p1) (if (memv ag4abf@t '(#\))) (ag4ab7@loop (cdr ag4ab9@chars) (- ag4aba@p0 '1) ag4abb@p1) (if (memv ag4abf@t '(#\[)) (ag4ab7@loop (cdr ag4ab9@chars) ag4aba@p0 (+ ag4abb@p1 '1)) (if (memv ag4abf@t '(#\])) (ag4ab7@loop (cdr ag4ab9@chars) ag4aba@p0 (- ag4abb@p1 '1)) (ag4ab7@loop (cdr ag4ab9@chars) ag4aba@p0 ag4abb@p1)))))) (car ag4ab9@chars)))))) ag4ab7@loop) (string->list ag4ab5@text) '0 '0))) (set! ag4ab0@eval-string-print (lambda (ag4ab3@text) (if (not (or (string=? '"\n" ag4ab3@text) (= '0 (string-length ag4ab3@text)))) (write (ag49e8@eval-top-level (call-with-port (open-string-input-port ag4ab3@text) read))) (void)))) (if (eof-object? ag4aa9@line) (begin (ag4ab0@eval-string-print ag4aaa@accum) (exit)) ((lambda (ag4ab1@current) (if (ag4aae@parentheses-ok? ag4ab1@current) (ag4ab0@eval-string-print ag4ab1@current) (ag4aa7@loop (get-line (current-input-port)) ag4ab1@current))) (string-append ag4aaa@accum ag4aa9@line))))) '#f '#f)))) ag4aa7@loop) (get-line (current-input-port)) '""))))))) (newline) (ag4a9e@rec)))) (ag4a9e@rec))) '#f))) (set! ag4b34@ag49da@repl ag49da@repl)) (begin (set! ag49dc@trace-printer (ag2455@ag2334@make-parameter write)) (set! ag4b35@ag49dc@trace-printer ag49dc@trace-printer)) (begin (set! ag49de@command-line (ag2455@ag2334@make-parameter (get-command-line))) (set! ag4b36@ag49de@command-line ag49de@command-line)) (begin (set! ag49e0@local-library-path (lambda (ag4ac1@filename) (ag270f@ag254b@library-path))) (set! ag4b37@ag49e0@local-library-path ag49e0@local-library-path)) (begin (set! ag49e2@load/args (lambda (ag4ac3@filename . ag4ac5@args) (begin (apply ag49f2@load-r6rs-top-level ag4ac3@filename 'load ag4ac5@args) (void)))) (set! ag4b38@ag49e2@load/args ag49e2@load/args)) (begin (set! ag49e4@load (lambda (ag4ac7@filename) (begin (apply ag49f2@load-r6rs-top-level ag4ac7@filename 'load (ag49de@command-line)) (void)))) (set! ag4b39@ag49e4@load ag49e4@load)) (begin (set! ag49e6@ironscheme-build (lambda () (ag49e4@load '"ironscheme-buildscript.ss"))) (set! ag4b3a@ag49e6@ironscheme-build ag49e6@ironscheme-build)) (begin (set! ag49e8@eval-top-level (lambda (ag4ac9@x) (ag45ee@ag2bc3@eval ag4ac9@x (ag4605@ag2bf1@interaction-environment)))) (set! ag4b3b@ag49e8@eval-top-level ag49e8@eval-top-level)) (begin (set! ag49ea@compile-system-libraries (lambda () (ag49e8@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! ag4b3c@ag49ea@compile-system-libraries ag49ea@compile-system-libraries)) (begin (set! ag49ec@compile (lambda (ag4acb@filename) (ag49f2@load-r6rs-top-level ag4acb@filename 'compile))) (set! ag4b3d@ag49ec@compile ag49ec@compile)) (begin (set! ag49ee@compile->closure (lambda (ag4acd@filename) (ag49f2@load-r6rs-top-level ag4acd@filename 'closure))) (set! ag4b3e@ag49ee@compile->closure ag49ee@compile->closure)) (begin (set! ag49f0@pre-compile-r6rs-file (lambda (ag4acf@filename) (ag49f2@load-r6rs-top-level ag4acf@filename 'compile))) (set! ag4b3f@ag49f0@pre-compile-r6rs-file ag49f0@pre-compile-r6rs-file)) (begin (set! ag49f2@load-r6rs-top-level (lambda (ag4ad1@filename ag4ad2@how . ag4ad5@args) (begin (ag270f@ag254b@library-path (ag49e0@local-library-path ag4ad1@filename)) ((lambda (ag4ad7@x*) ((lambda (ag4ad9@t) (if (memv ag4ad9@t '(closure)) (ag4604@ag2bef@pre-compile-r6rs-top-level ag4ad7@x*) (if (memv ag4ad9@t '(load)) (begin (ag49de@command-line (cons ag4ad1@filename (car ag4ad5@args))) (ag2456@ag2336@mosh-cache-dir (create-mosh-cache-dir)) (if (ag2456@ag2336@mosh-cache-dir) (gensym-prefix-set! (ag49f8@prefix-inc! (string-append (ag2456@ag2336@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (ag4adb@file) ((call/cc (lambda (ag4adf@ag4add) (lambda () (with-exception-handler (lambda (ag4ae1@c) ((call/cc (lambda (ag4ae3@ag4ade) (ag4adf@ag4add (lambda () (if '#t '#t (ag4ae3@ag4ade (lambda () (raise-continuable ag4ae1@c)))))))))) (lambda () (delete-file (string-append (ag2456@ag2336@mosh-cache-dir) '"/" ag4adb@file))))))))) (directory-list (ag2456@ag2336@mosh-cache-dir))) (void)) ((lambda (ag4ae5@compiled) (begin (if (and (ag2456@ag2336@mosh-cache-dir) (not (symbol-value '%disable-acc))) (ag2713@ag2553@serialize-all ag2450@ag232a@serialize-library ag24ac@ag2465@compile-core-expr) (void)) (ag4ae5@compiled))) (ag4603@ag2bed@compile-r6rs-top-level ag4ad7@x*))) (if (memv ag4ad9@t '(compile)) (begin (ag4603@ag2bed@compile-r6rs-top-level ag4ad7@x*) (ag2713@ag2553@serialize-all ag2450@ag232a@serialize-library ag24ac@ag2465@compile-core-expr)) (if '#f '#f (void)))))) ag4ad2@how)) (with-input-from-file ag4ad1@filename (lambda () ((letrec ((ag4ae7@f (lambda () ((lambda (ag4ae9@x) (if (eof-object? ag4ae9@x) '() (cons ag4ae9@x (ag4ae7@f)))) (ag2448@ag231a@read-annotated))))) ag4ae7@f)))))))) (set! ag4b40@ag49f2@load-r6rs-top-level ag49f2@load-r6rs-top-level)) (begin (set! ag49f4@load-r6rs-top-level-sexp (lambda (ag4aeb@import-spec ag4aec@thunk) ((lambda (ag4af7@ag4af0 ag4af8@ag4af2 ag4af9@ag4af4 ag4afa@ag4af6) ((lambda (ag4aff@swap) (dynamic-wind ag4aff@swap (lambda () (begin (if (ag2456@ag2336@mosh-cache-dir) (gensym-prefix-set! (ag49f8@prefix-inc! (string-append (ag2456@ag2336@mosh-cache-dir) '"/prefix.txt"))) (void)) ((lambda (ag4b05@ag4b02 ag4b06@ag4b04) ((lambda (ag4b09@swap) (dynamic-wind ag4b09@swap (lambda () ((ag4603@ag2bed@compile-r6rs-top-level (list (cons 'import ag4aeb@import-spec) (list ag4aec@thunk))))) ag4b09@swap)) (lambda () ((lambda (ag4b0b@t) (begin (ag4b05@ag4b02 ag4b06@ag4b04) (set! ag4b06@ag4b04 ag4b0b@t))) (ag4b05@ag4b02))))) ag49de@command-line '()))) ag4aff@swap)) (lambda () (begin ((lambda (ag4b0d@t) (begin (ag4af7@ag4af0 ag4af9@ag4af4) (set! ag4af9@ag4af4 ag4b0d@t))) (ag4af7@ag4af0)) ((lambda (ag4b0f@t) (begin (ag4af8@ag4af2 ag4afa@ag4af6) (set! ag4afa@ag4af6 ag4b0f@t))) (ag4af8@ag4af2)))))) ag270f@ag254b@library-path ag2456@ag2336@mosh-cache-dir (ag49e0@local-library-path '"") (create-mosh-cache-dir)))) (set! ag4b41@ag49f4@load-r6rs-top-level-sexp ag49f4@load-r6rs-top-level-sexp)) (begin (set! ag49f6@prefix-inc (lambda (ag4b11@prefix-string) ((lambda (ag4b13@prefix) ((lambda (ag4b15@len) ((lambda () ((letrec ((ag4b17@loop (lambda (ag4b19@i ag4b1a@carry? ag4b1b@accum) (if (< ag4b19@i '0) (string->symbol (list->string (if ag4b1a@carry? (cons '#\a ag4b1b@accum) ag4b1b@accum))) (if ag4b1a@carry? ((lambda (ag4b1f@next-integer) (if (= ag4b1f@next-integer '123) (ag4b17@loop (- ag4b19@i '1) '#f (cons '#\A ag4b1b@accum)) (if (= ag4b1f@next-integer '91) (ag4b17@loop (- ag4b19@i '1) '#t (cons '#\a ag4b1b@accum)) (ag4b17@loop (- ag4b19@i '1) '#f (cons (integer->char ag4b1f@next-integer) ag4b1b@accum))))) (+ '1 (char->integer (string-ref ag4b13@prefix ag4b19@i)))) (ag4b17@loop (- ag4b19@i '1) '#f (cons (string-ref ag4b13@prefix ag4b19@i) ag4b1b@accum))))))) ag4b17@loop) (- ag4b15@len '1) '#t '())))) (string-length ag4b13@prefix))) (symbol->string ag4b11@prefix-string)))) (set! ag4b42@ag49f6@prefix-inc ag49f6@prefix-inc)) (begin (set! ag49f8@prefix-inc! (lambda (ag4b21@file) (begin (if (not (file-exists? ag4b21@file)) (call-with-output-file ag4b21@file (lambda (ag4b23@port) (write 'd ag4b23@port))) (void)) ((lambda (ag4b25@prefix) ((lambda (ag4b27@next-prefix) ((lambda () (begin (call-with-port (open-file-output-port ag4b21@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (ag4b29@port) (write ag4b27@next-prefix ag4b29@port))) ag4b25@prefix)))) (ag49f6@prefix-inc ag4b25@prefix))) (call-with-input-file ag4b21@file read))))) (set! ag4b43@ag49f8@prefix-inc! ag49f8@prefix-inc!)) (begin (ag2714@ag2555@current-precompiled-library-loader ag2451@ag232c@load-serialized-library) (set-symbol-value! 'load ag49e4@load) (set-symbol-value! 'pre-compile-r6rs-file ag49f0@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs ag49e8@eval-top-level) (set-symbol-value! 'int-env-syms ag45e5@ag2bb1@interaction-environment-symbols) (set-symbol-value! 'expanded2core ag24ab@ag2463@expanded->core) (set-symbol-value! 'trace-printer ag49dc@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (ag49f9@c) (condition (ag4925@ag472f@make-non-continuable-violation) (ag491b@ag4716@make-who-condition 'raise) (ag48df@ag4677@make-message-condition '"returned from non-continuable exception") (ag4911@ag46fb@make-irritants-condition (list ag49f9@c))))) (ag49ce@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (ag49ce@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (ag49cc@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (ag49cc@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (ag49cc@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) ((lambda (ag49fb@prefix) (ag2710@ag254d@library-extensions (ag49fb@prefix '".mosh" (ag2710@ag254d@library-extensions)))) (lambda (ag49fd@ext ag49fe@ls) (append (map (lambda (ag4a01@x) (string-append ag49fd@ext ag4a01@x)) ag49fe@ls) ag49fe@ls))) (current-exception-handler (lambda (ag4a03@c) (if (condition? ag4a03@c) (ag49d4@condition-printer ag4a03@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" ag4a03@c)))) (if ((call/cc (lambda (ag4a07@ag4a05) (lambda () (with-exception-handler (lambda (ag4a09@c) ((call/cc (lambda (ag4a0b@ag4a06) (ag4a07@ag4a05 (lambda () (if '#t '#f (ag4a0b@ag4a06 (lambda () (raise-continuable ag4a09@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (ag49f4@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (ag49de@command-line)) ((lambda (ag4a15@ag4a0e ag4a16@ag4a10 ag4a17@ag4a12 ag4a18@ag4a14) ((lambda (ag4a1d@swap) (dynamic-wind ag4a1d@swap (lambda () (begin (if (ag2456@ag2336@mosh-cache-dir) (gensym-prefix-set! (ag49f8@prefix-inc! (string-append (ag2456@ag2336@mosh-cache-dir) '"/prefix.txt"))) (void)) (ag49da@repl))) ag4a1d@swap)) (lambda () (begin ((lambda (ag4a1f@t) (begin (ag4a15@ag4a0e ag4a17@ag4a12) (set! ag4a17@ag4a12 ag4a1f@t))) (ag4a15@ag4a0e)) ((lambda (ag4a21@t) (begin (ag4a16@ag4a10 ag4a18@ag4a14) (set! ag4a18@ag4a14 ag4a21@t))) (ag4a16@ag4a10)))))) ag49de@command-line ag2456@ag2336@mosh-cache-dir '() (create-mosh-cache-dir)) (begin (ag270f@ag254b@library-path (ag49e0@local-library-path (car (ag49de@command-line)))) (set! ag49ca@x* (with-input-from-file (car (ag49de@command-line)) (lambda () ((letrec ((ag4a23@f (lambda () ((lambda (ag4a25@x) (if (eof-object? ag4a25@x) '() (cons ag4a25@x (ag4a23@f)))) (ag2448@ag231a@read-annotated))))) ag4a23@f))))) (ag49de@command-line (cons (car (ag49de@command-line)) (cdr (ag49de@command-line)))) (ag2456@ag2336@mosh-cache-dir (create-mosh-cache-dir)) (if (ag2456@ag2336@mosh-cache-dir) (gensym-prefix-set! (ag49f8@prefix-inc! (string-append (ag2456@ag2336@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (ag4a27@file) ((call/cc (lambda (ag4a2b@ag4a29) (lambda () (with-exception-handler (lambda (ag4a2d@c) ((call/cc (lambda (ag4a2f@ag4a2a) (ag4a2b@ag4a29 (lambda () (if '#t '#t (ag4a2f@ag4a2a (lambda () (raise-continuable ag4a2d@c)))))))))) (lambda () (delete-file (string-append (ag2456@ag2336@mosh-cache-dir) '"/" ag4a27@file))))))))) (directory-list (ag2456@ag2336@mosh-cache-dir))) (void)) ((lambda (ag4a31@compiled) (begin (if (and (ag2456@ag2336@mosh-cache-dir) (not (symbol-value '%disable-acc))) (ag2713@ag2553@serialize-all ag2450@ag232a@serialize-library ag24ac@ag2465@compile-core-expr) (void)) (ag4a31@compiled))) (ag4603@ag2bed@compile-r6rs-top-level ag49ca@x*)))))))
