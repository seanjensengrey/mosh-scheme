;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (k2844@read-annotated k2846@annotation-stripped k2848@annotation? k284a@annotation-source k284c@annotation-expression k284e@scm->fasl k2850@fasl-save k2852@fasl-load k2854@serialize-library k2856@load-serialized-library k2858@make-record-printer k285a@compile-core k285c@read-library-source-file k285e@make-parameter k28f4@file-options-spec) (begin (set! k2844@read-annotated read) (set! k2846@annotation-stripped (lambda (k28f5@x) (k284c@annotation-expression k28f5@x))) (set! k2848@annotation? (lambda (k28f7@x) (source-info k28f7@x))) (set! k284a@annotation-source (lambda (k28f9@x) (source-info k28f9@x))) (set! k284c@annotation-expression (lambda (k28fb@x) (if (pair? k28fb@x) (cons (car k28fb@x) (cdr k28fb@x)) (display '"line:46\n")))) (set! k284e@scm->fasl (lambda (k28fd@filename) (string-append k28fd@filename '".mosh-fasl"))) (set! k2850@fasl-save (lambda (k28ff@filename k2900@obj) (call-with-port (open-file-output-port k28ff@filename) (lambda (k2903@port) ((symbol-value 'fasl-write!) k2900@obj k2903@port))))) (set! k2852@fasl-load (lambda (k2905@filename) (call-with-port (open-file-input-port k2905@filename) (symbol-value 'fasl-read!)))) (set! k2854@serialize-library (lambda (k2907@filename k2908@obj) (begin (format '#t '"serialize-library ~a\n..." k2907@filename) ((lambda (k290b@expanded2core) ((lambda (k290d@compile) ((lambda (k290f@code) ((lambda (k2911@pivot) ((lambda (k2913@visit) ((lambda () (begin (set-car! k2911@pivot k2913@visit) ((lambda (k2915@pivot) ((lambda (k2917@invoke) ((lambda () (set-car! k2915@pivot k2917@invoke)))) (k290d@compile (k290b@expanded2core (car k2915@pivot))))) (cdr k2911@pivot)))))) (k290d@compile (k290b@expanded2core (car k2911@pivot))))) (cddddr (cddddr k290f@code)))) k2908@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (k2919@fasl-file) (begin (if (file-exists? k2919@fasl-file) (delete-file k2919@fasl-file) (void)) ((call/cc (lambda (k291d@k291b) (lambda () (with-exception-handler (lambda (k291f@c) ((call/cc (lambda (k2921@k291c) (k291d@k291b (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " k2907@filename) (if (file-exists? k2919@fasl-file) (delete-file k2919@fasl-file) (void)) '#f) (k2921@k291c (lambda () (raise-continuable k291f@c)))))))))) (lambda () (begin (k2850@fasl-save k2919@fasl-file k2908@obj) (display '"OK\n")))))))))) (k284e@scm->fasl k2907@filename))))) (set! k2856@load-serialized-library (lambda (k2923@filename k2924@obj) ((lambda (k2927@fasl-file) (if (and (file-exists? k2927@fasl-file) ((symbol-value 'file-newer?) k2927@fasl-file k2923@filename)) ((lambda (k2929@expanded2core) ((lambda (k292b@eval-compiled-core) ((lambda (k292d@code) ((lambda (k292f@pivot) ((lambda (k2931@visit) ((lambda (k2933@visit-proc) ((lambda () (begin (set-car! k292f@pivot k2933@visit-proc) ((lambda (k2935@pivot) ((lambda (k2937@invoke) ((lambda () (begin (set-car! k2935@pivot (lambda () (k292b@eval-compiled-core k2937@invoke))) (apply k2924@obj k292d@code))))) (car k2935@pivot))) (cdr k292f@pivot)) '#t)))) (lambda () (k292b@eval-compiled-core k2931@visit)))) (car k292f@pivot))) (cddddr (cddddr k292d@code)))) (k2852@fasl-load k2927@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (k284e@scm->fasl k2923@filename)))) (set! k2858@make-record-printer (lambda (k2939@name k293a@printer) (lambda k293d@x (begin (display '"record printer") (for-each display k293d@x))))) (set! k285a@compile-core (lambda k293f@x (apply error 'comile-core '"not implementated" k293f@x))) (set! k285c@read-library-source-file (lambda (k2941@file-name) (with-input-from-file k2941@file-name k2844@read-annotated))) (set! k285e@make-parameter (lambda k2951 ((lambda (k2952) (if (= k2952 '1) (apply (lambda (k2943@x) (k285e@make-parameter k2943@x (lambda (k2945@x) k2945@x))) k2951) (if (= k2952 '2) (apply (lambda (k2947@x k2948@fender) ((lambda (k294b@x) (lambda k294f ((lambda (k2950) (if (= k2950 '0) (apply (lambda () k294b@x) k294f) (if (= k2950 '1) (apply (lambda (k294d@v) (set! k294b@x (k2948@fender k294d@v))) k294f) (error 'apply '"invalid arg count")))) (length k294f)))) (k2948@fender k2947@x))) k2951) (error 'apply '"invalid arg count")))) (length k2951)))) (set! k28f4@file-options-spec (lambda (k2953@x) k2953@x)) (begin (set! k2963@k28f4@file-options-spec k28f4@file-options-spec) (set! k2962@k285e@make-parameter k285e@make-parameter) (set! k2961@k285c@read-library-source-file k285c@read-library-source-file) (set! k2960@k285a@compile-core k285a@compile-core) (set! k295f@k2858@make-record-printer k2858@make-record-printer) (set! k295e@k2856@load-serialized-library k2856@load-serialized-library) (set! k295d@k2854@serialize-library k2854@serialize-library) (set! k295c@k2852@fasl-load k2852@fasl-load) (set! k295b@k2850@fasl-save k2850@fasl-save) (set! k295a@k284e@scm->fasl k284e@scm->fasl) (set! k2959@k284c@annotation-expression k284c@annotation-expression) (set! k2958@k284a@annotation-source k284a@annotation-source) (set! k2957@k2848@annotation? k2848@annotation?) (set! k2956@k2846@annotation-stripped k2846@annotation-stripped) (set! k2955@k2844@read-annotated k2844@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (k2969@current-primitive-locations k296b@mutable? k296d@rewriter k296f@expanded->core k2971@compile-core-expr k2973@pretty-print k2975@compile-core-expr-to-port) (begin (set! k2969@current-primitive-locations (k2962@k285e@make-parameter (lambda (k2976@x) '#f) (lambda (k2978@p) k2978@p))) (set! k296b@mutable? (lambda (k297a@x) (or (pair? k297a@x) (vector? k297a@x) (hashtable? k297a@x)))) (set! k296d@rewriter (lambda (k297c@quote-hack?) ((lambda (k297f@f) (begin (set! k297f@f (lambda (k2980@x) (if (pair? k2980@x) ((lambda (k2982@t) (if (memv k2982@t '(quote)) (if (and k297c@quote-hack? (k296b@mutable? (cadr k2980@x))) ((lambda (k2984@g) (begin (set-symbol-value! k2984@g (cadr k2980@x)) k2984@g)) (gensym)) k2980@x) (if (memv k2982@t '(case-lambda)) (cons 'case-lambda (map (lambda (k2986@x) (cons (car k2986@x) (map k297f@f (cdr k2986@x)))) (cdr k2980@x))) (if (memv k2982@t '(lambda)) (cons* 'lambda (cadr k2980@x) (map k297f@f (cddr k2980@x))) (if (memv k2982@t '(letrec)) ((lambda (k2988@bindings k2989@body*) ((lambda (k298c@lhs* k298d@rhs*) (cons* 'letrec (map list k298c@lhs* (map k297f@f k298d@rhs*)) (map k297f@f k2989@body*))) (map car k2988@bindings) (map cadr k2988@bindings))) (cadr k2980@x) (cddr k2980@x)) (if (memv k2982@t '(letrec*)) ((lambda (k2990@bindings k2991@body*) ((lambda (k2994@lhs* k2995@rhs*) (cons* 'letrec* (map list k2994@lhs* (map k297f@f k2995@rhs*)) (map k297f@f k2991@body*))) (map car k2990@bindings) (map cadr k2990@bindings))) (cadr k2980@x) (cddr k2980@x)) (if (memv k2982@t '(library-letrec*)) ((lambda (k2998@name k2999@x) ((lambda (k299c@bindings k299d@body*) ((lambda (k29a0@lhs* k29a1@lhs** k29a2@rhs*) (cons* 'library-letrec* k2998@name (map list k29a0@lhs* k29a1@lhs** (map k297f@f k29a2@rhs*)) (map k297f@f k299d@body*))) (map car k299c@bindings) (map cadr k299c@bindings) (map caddr k299c@bindings))) (cadr k2999@x) (cddr k2999@x))) (cadr k2980@x) (cdr k2980@x)) (if (memv k2982@t '(begin)) (cons 'begin (map k297f@f (cdr k2980@x))) (if (memv k2982@t '(set!)) (list 'set! (cadr k2980@x) (k297f@f (caddr k2980@x))) (if (memv k2982@t '(primitive)) ((lambda (k29a6@op) ((lambda (k29a8@t) (if k29a8@t ((lambda (k29aa@loc) k29aa@loc) k29a8@t) k29a6@op)) ((k2969@current-primitive-locations) k29a6@op))) (cadr k2980@x)) (if (memv k2982@t '(define)) k2980@x (if (list? k2980@x) (map k297f@f k2980@x) (error 'rewrite '"invalid form ~s ~s" k2980@x (list? k2980@x)))))))))))))) (car k2980@x)) k2980@x))) k297f@f)) '#f))) (set! k296f@expanded->core (lambda (k29ac@x) ((k296d@rewriter '#f) k29ac@x))) (set! k2971@compile-core-expr (lambda (k29ae@x) ((k296d@rewriter '#f) k29ae@x))) (set! k2973@pretty-print write) (set! k2975@compile-core-expr-to-port (lambda (k29b0@x k29b1@p) (k2973@pretty-print ((k296d@rewriter '#f) k29b0@x) k29b1@p))) (begin (set! k29ba@k2975@compile-core-expr-to-port k2975@compile-core-expr-to-port) (set! k29b9@k2973@pretty-print k2973@pretty-print) (set! k29b8@k2971@compile-core-expr k2971@compile-core-expr) (set! k29b7@k296f@expanded->core k296f@expanded->core) (set! k29b6@k296d@rewriter k296d@rewriter) (set! k29b5@k296b@mutable? k296b@mutable?) (set! k29b4@k2969@current-primitive-locations k2969@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (k2a09@make-collection k2a0b@current-library-collection k2a0d@rp k2a17@library? k2a19@library-id k2a1b@set-library-id! k2a1d@library-name k2a1f@set-library-name! k2a21@library-version k2a23@set-library-version! k2a25@library-imp* k2a27@set-library-imp*! k2a29@library-vis* k2a2b@set-library-vis*! k2a2d@library-inv* k2a2f@set-library-inv*! k2a31@library-subst k2a33@set-library-subst! k2a35@library-env k2a37@set-library-env! k2a39@library-visit-state k2a3b@set-library-visit-state! k2a3d@library-invoke-state k2a3f@set-library-invoke-state! k2a41@library-visit-code k2a43@set-library-visit-code! k2a45@library-invoke-code k2a47@set-library-invoke-code! k2a49@library-visible? k2a4b@set-library-visible?! k2a4d@library-source-file-name k2a4f@set-library-source-file-name! k2a51@dummy k2a53@find-dependencies k2a55@find-library-by k2a57@library-path k2a59@library-extensions k2a5b@library-name->file-name k2a5d@file-locator k2a5f@serialize-all k2a61@current-precompiled-library-loader k2a63@try-load-from-file k2a65@library-loader k2a67@current-library-expander k2a69@external-pending-libraries k2a6b@find-external-library k2a6d@find-library-by-name k2a6f@library-exists? k2a71@find-library-by-spec/die k2a73@label->binding-table k2a75@install-library-record k2a77@install-library k2a79@imported-label->binding k2a7b@invoke-library k2a7d@visit-library k2a7f@invoke-library-by-spec k2a81@installed-libraries k2a83@library-spec) (begin (set! k2a09@make-collection (lambda () ((lambda (k2a84@set) ((lambda (k2a87@set-cons) (begin (set! k2a87@set-cons (lambda (k2a8c@x k2a8d@ls) (if (memq k2a8c@x k2a8d@ls) k2a8d@ls (cons k2a8c@x k2a8d@ls)))) (lambda k2a8a ((lambda (k2a8b) (if (= k2a8b '0) (apply (lambda () k2a84@set) k2a8a) (if (= k2a8b '1) (apply (lambda (k2a88@x) (set! k2a84@set (k2a87@set-cons k2a88@x k2a84@set))) k2a8a) (error 'apply '"invalid arg count")))) (length k2a8a))))) '#f)) '()))) (set! k2a0b@current-library-collection (k2962@k285e@make-parameter (k2a09@make-collection) (lambda (k2a90@x) (begin (if (not (procedure? k2a90@x)) (assertion-violation 'current-library-collection '"not a procedure" k2a90@x) (void)) k2a90@x)))) (set! k2a0d@rp (k295f@k2858@make-record-printer 'library (lambda (k2a92@x k2a93@p k2a94@wr) (begin (if (not (k2a17@library? k2a92@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (k2a21@library-version k2a92@x)) (k2a1d@library-name k2a92@x) (append (k2a1d@library-name k2a92@x) (list (k2a21@library-version k2a92@x))))) k2a93@p))))) (set! k2a17@library? (lambda (k2a98@x) (and (simple-struct? k2a98@x) (eq? (simple-struct-name k2a98@x) 'library)))) (set! k2a19@library-id (lambda (k2a9a@x) (simple-struct-ref k2a9a@x '0))) (set! k2a1b@set-library-id! (lambda (k2a9c@x k2a9d@val) (simple-struct-set! k2a9c@x '0 k2a9d@val))) (set! k2a1d@library-name (lambda (k2aa0@x) (simple-struct-ref k2aa0@x '1))) (set! k2a1f@set-library-name! (lambda (k2aa2@x k2aa3@val) (simple-struct-set! k2aa2@x '1 k2aa3@val))) (set! k2a21@library-version (lambda (k2aa6@x) (simple-struct-ref k2aa6@x '2))) (set! k2a23@set-library-version! (lambda (k2aa8@x k2aa9@val) (simple-struct-set! k2aa8@x '2 k2aa9@val))) (set! k2a25@library-imp* (lambda (k2aac@x) (simple-struct-ref k2aac@x '3))) (set! k2a27@set-library-imp*! (lambda (k2aae@x k2aaf@val) (simple-struct-set! k2aae@x '3 k2aaf@val))) (set! k2a29@library-vis* (lambda (k2ab2@x) (simple-struct-ref k2ab2@x '4))) (set! k2a2b@set-library-vis*! (lambda (k2ab4@x k2ab5@val) (simple-struct-set! k2ab4@x '4 k2ab5@val))) (set! k2a2d@library-inv* (lambda (k2ab8@x) (simple-struct-ref k2ab8@x '5))) (set! k2a2f@set-library-inv*! (lambda (k2aba@x k2abb@val) (simple-struct-set! k2aba@x '5 k2abb@val))) (set! k2a31@library-subst (lambda (k2abe@x) (simple-struct-ref k2abe@x '6))) (set! k2a33@set-library-subst! (lambda (k2ac0@x k2ac1@val) (simple-struct-set! k2ac0@x '6 k2ac1@val))) (set! k2a35@library-env (lambda (k2ac4@x) (simple-struct-ref k2ac4@x '7))) (set! k2a37@set-library-env! (lambda (k2ac6@x k2ac7@val) (simple-struct-set! k2ac6@x '7 k2ac7@val))) (set! k2a39@library-visit-state (lambda (k2aca@x) (simple-struct-ref k2aca@x '8))) (set! k2a3b@set-library-visit-state! (lambda (k2acc@x k2acd@val) (simple-struct-set! k2acc@x '8 k2acd@val))) (set! k2a3d@library-invoke-state (lambda (k2ad0@x) (simple-struct-ref k2ad0@x '9))) (set! k2a3f@set-library-invoke-state! (lambda (k2ad2@x k2ad3@val) (simple-struct-set! k2ad2@x '9 k2ad3@val))) (set! k2a41@library-visit-code (lambda (k2ad6@x) (simple-struct-ref k2ad6@x '10))) (set! k2a43@set-library-visit-code! (lambda (k2ad8@x k2ad9@val) (simple-struct-set! k2ad8@x '10 k2ad9@val))) (set! k2a45@library-invoke-code (lambda (k2adc@x) (simple-struct-ref k2adc@x '11))) (set! k2a47@set-library-invoke-code! (lambda (k2ade@x k2adf@val) (simple-struct-set! k2ade@x '11 k2adf@val))) (set! k2a49@library-visible? (lambda (k2ae2@x) (simple-struct-ref k2ae2@x '12))) (set! k2a4b@set-library-visible?! (lambda (k2ae4@x k2ae5@val) (simple-struct-set! k2ae4@x '12 k2ae5@val))) (set! k2a4d@library-source-file-name (lambda (k2ae8@x) (simple-struct-ref k2ae8@x '13))) (set! k2a4f@set-library-source-file-name! (lambda (k2aea@x k2aeb@val) (simple-struct-set! k2aea@x '13 k2aeb@val))) (set! k2a51@dummy '3) (set! k2a53@find-dependencies (lambda (k2aee@ls) (if (null? k2aee@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! k2a55@find-library-by (lambda (k2af0@pred) ((letrec ((k2af2@f (lambda (k2af4@ls) (if (null? k2af4@ls) '#f (if (k2af0@pred (car k2af4@ls)) (car k2af4@ls) (k2af2@f (cdr k2af4@ls))))))) k2af2@f) ((k2a0b@current-library-collection))))) (set! k2a57@library-path (k2962@k285e@make-parameter '(".") (lambda (k2af6@x) (if (and (list? k2af6@x) (for-all string? k2af6@x)) (map (lambda (k2af8@x) k2af8@x) k2af6@x) (assertion-violation 'library-path '"not a list of strings" k2af6@x))))) (set! k2a59@library-extensions (k2962@k285e@make-parameter '(".sls" ".ss" ".scm") (lambda (k2afa@x) (if (and (list? k2afa@x) (for-all string? k2afa@x)) (map (lambda (k2afc@x) k2afc@x) k2afa@x) (assertion-violation 'library-extensions '"not a list of strings" k2afa@x))))) (set! k2a5b@library-name->file-name (lambda (k2afe@x) (call-with-values (lambda () (open-string-output-port)) (lambda (k2b04@k2b01 k2b05@k2b03) ((lambda (k2b08@extract k2b09@p) ((lambda (k2b0d@display-hex) (begin (set! k2b0d@display-hex (lambda (k2b16@n) (if (<= '0 k2b16@n '9) (display k2b16@n k2b09@p) (display (integer->char (+ (char->integer '#\a) (- k2b16@n '10))) k2b09@p)))) (begin ((letrec ((k2b0e@f (lambda (k2b10@ls) (if (not (null? k2b10@ls)) (begin (display '"/" k2b09@p) (for-each (lambda (k2b12@c) (if (or (char<=? '#\a k2b12@c '#\z) (char<=? '#\A k2b12@c '#\Z) (char<=? '#\0 k2b12@c '#\9) (memv k2b12@c '(#\- #\. #\_ #\~))) (display k2b12@c k2b09@p) (begin (display '"%" k2b09@p) ((lambda (k2b14@n) (begin (k2b0d@display-hex (quotient k2b14@n '16)) (k2b0d@display-hex (remainder k2b14@n '16)))) (char->integer k2b12@c))))) (string->list (symbol->string (car k2b10@ls)))) (k2b0e@f (cdr k2b10@ls))) (void))))) k2b0e@f) k2afe@x) (k2b08@extract)))) '#f)) k2b05@k2b03 k2b04@k2b01))))) (set! k2a5d@file-locator (k2962@k285e@make-parameter (lambda (k2b18@x) ((lambda (k2b1a@str) ((letrec ((k2b1c@f (lambda (k2b1e@ls k2b1f@exts k2b20@failed-list) (if (null? k2b1e@ls) ((lambda () ((lambda (k2b2c@k2b27 k2b2e@k2b29 k2b30@k2b28 k2b33@k2b26 k2b35@make-library-resolution-condition k2b37@k2b24 k2b39@k2b25 k2b3b@library-resolution-condition? k2b3d@condition-library k2b3f@condition-files) (begin (set! k2b2c@k2b27 (make-record-type-descriptor '&library-resolution k4dd6@k4b1d@&condition-rtd 'k2b2a '#f '#f '#((immutable library) (immutable files)))) (set! k2b2e@k2b29 '#f) (set! k2b30@k2b28 (make-record-constructor-descriptor k2b2c@k2b27 k4dd7@k4b1f@&condition-rcd k2b2e@k2b29)) (set! k2b33@k2b26 (record-predicate k2b2c@k2b27)) (set! k2b35@make-library-resolution-condition (record-constructor k2b30@k2b28)) (set! k2b37@k2b24 (record-accessor k2b2c@k2b27 '0)) (set! k2b39@k2b25 (record-accessor k2b2c@k2b27 '1)) (set! k2b3b@library-resolution-condition? (condition-predicate k2b2c@k2b27)) (set! k2b3d@condition-library (condition-accessor k2b2c@k2b27 k2b37@k2b24)) (set! k2b3f@condition-files (condition-accessor k2b2c@k2b27 k2b39@k2b25)) (raise (condition (k4df6@k4bb7@make-error) (k4e18@k4c13@make-who-condition 'expander) (k4ddc@k4b74@make-message-condition '"cannot locate library in library-path") (k2b35@make-library-resolution-condition k2b18@x (reverse k2b20@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? k2b1f@exts) (k2b1c@f (cdr k2b1e@ls) (k2a59@library-extensions) k2b20@failed-list) ((lambda (k2b40@name) (if (file-exists? k2b40@name) k2b40@name (k2b1c@f k2b1e@ls (cdr k2b1f@exts) (cons k2b40@name k2b20@failed-list)))) (string-append (car k2b1e@ls) k2b1a@str (car k2b1f@exts)))))))) k2b1c@f) (k2a57@library-path) (k2a59@library-extensions) '())) (k2a5b@library-name->file-name k2b18@x))) (lambda (k2b42@f) (if (procedure? k2b42@f) k2b42@f (assertion-violation 'file-locator '"not a procedure" k2b42@f))))) (set! k2a5f@serialize-all (lambda (k2b44@serialize k2b45@compile) ((lambda (k2b49@library-desc) (begin (set! k2b49@library-desc (lambda (k2b4c@x) (list (k2a19@library-id k2b4c@x) (k2a1d@library-name k2b4c@x)))) (for-each (lambda (k2b4a@x) (if (k2a4d@library-source-file-name k2b4a@x) (k2b44@serialize (k2a4d@library-source-file-name k2b4a@x) (list (k2a19@library-id k2b4a@x) (k2a1d@library-name k2b4a@x) (k2a21@library-version k2b4a@x) (map k2b49@library-desc (k2a25@library-imp* k2b4a@x)) (map k2b49@library-desc (k2a29@library-vis* k2b4a@x)) (map k2b49@library-desc (k2a2d@library-inv* k2b4a@x)) (k2a31@library-subst k2b4a@x) (k2a35@library-env k2b4a@x) (k2b45@compile (k2a41@library-visit-code k2b4a@x)) (k2b45@compile (k2a45@library-invoke-code k2b4a@x)) (k2a49@library-visible? k2b4a@x))) (void))) ((k2a0b@current-library-collection))))) '#f))) (set! k2a61@current-precompiled-library-loader (k2962@k285e@make-parameter (lambda (k2b4e@filename k2b4f@sk) '#f))) (set! k2a63@try-load-from-file (lambda (k2b52@filename) ((k2a61@current-precompiled-library-loader) k2b52@filename (lambda k2b78 ((lambda (k2b79) (if (= k2b79 '11) (apply (lambda (k2b54@id k2b55@name k2b56@ver k2b57@imp* k2b58@vis* k2b59@inv* k2b5a@exp-subst k2b5b@exp-env k2b5c@visit-proc k2b5d@invoke-proc k2b5e@visible?) ((letrec ((k2b6a@f (lambda (k2b6c@deps) (if (null? k2b6c@deps) (begin (k2a77@install-library k2b54@id k2b55@name k2b56@ver k2b57@imp* k2b58@vis* k2b59@inv* k2b5a@exp-subst k2b5b@exp-env k2b5c@visit-proc k2b5d@invoke-proc '#f '#f k2b5e@visible? '#f) '#t) ((lambda (k2b6e@d) ((lambda (k2b70@label k2b71@dname) ((lambda (k2b74@l) (if (and (k2a17@library? k2b74@l) (eq? k2b70@label (k2a19@library-id k2b74@l))) (k2b6a@f (cdr k2b6c@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" k2b55@name k2b71@dname k2b52@filename k2b74@l k2b70@label (k2a19@library-id k2b74@l)) '#f))) (k2a6d@find-library-by-name k2b71@dname))) (car k2b6e@d) (cadr k2b6e@d))) (car k2b6c@deps)))))) k2b6a@f) (append k2b57@imp* k2b58@vis* k2b59@inv*))) k2b78) (if (>= k2b79 '0) (apply (lambda k2b76@others '#f) k2b78) (error 'apply '"invalid arg count")))) (length k2b78)))))) (set! k2a65@library-loader (k2962@k285e@make-parameter (lambda (k2b7a@x) ((lambda (k2b7c@file-name) (if (not k2b7c@file-name) (assertion-violation '#f '"cannot file library" k2b7a@x) (or (k2a63@try-load-from-file k2b7c@file-name) ((k2a67@current-library-expander) (k2961@k285c@read-library-source-file k2b7c@file-name) k2b7c@file-name (lambda (k2b7e@name) (if (not (fast-equal? k2b7e@name k2b7a@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (k2b84@k2b81 k2b85@k2b83) ((lambda (k2b88@e k2b89@p) (begin (display '"expected to find library " k2b89@p) (write k2b7a@x k2b89@p) (display '" in file " k2b89@p) (display k2b7c@file-name k2b89@p) (display '", found " k2b89@p) (write k2b7e@name k2b89@p) (display '" instead" k2b89@p) (k2b88@e))) k2b85@k2b83 k2b84@k2b81)))) (void))))))) ((k2a5d@file-locator) k2b7a@x))) (lambda (k2b8c@f) (if (procedure? k2b8c@f) k2b8c@f (assertion-violation 'library-locator '"not a procedure" k2b8c@f))))) (set! k2a67@current-library-expander (k2962@k285e@make-parameter (lambda (k2b8e@x) (assertion-violation 'library-expander '"not initialized")) (lambda (k2b90@f) (if (procedure? k2b90@f) k2b90@f (assertion-violation 'library-expander '"not a procedure" k2b90@f))))) (set! k2a69@external-pending-libraries (k2962@k285e@make-parameter '())) (set! k2a6b@find-external-library (lambda (k2b92@name) (begin (if (member k2b92@name (k2a69@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" k2b92@name) (void)) ((lambda (k2b98@k2b95 k2b99@k2b97) ((lambda (k2b9c@swap) (dynamic-wind k2b9c@swap (lambda () (begin ((k2a65@library-loader) k2b92@name) (or (k2a55@find-library-by (lambda (k2b9e@x) (fast-equal? (k2a1d@library-name k2b9e@x) k2b92@name))) (assertion-violation '#f '"handling external library did not yield the correct library" k2b92@name)))) k2b9c@swap)) (lambda () ((lambda (k2ba0@t) (begin (k2b98@k2b95 k2b99@k2b97) (set! k2b99@k2b97 k2ba0@t))) (k2b98@k2b95))))) k2a69@external-pending-libraries (cons k2b92@name (k2a69@external-pending-libraries)))))) (set! k2a6d@find-library-by-name (lambda (k2ba2@name) (or (k2a55@find-library-by (lambda (k2ba4@x) (fast-equal? (k2a1d@library-name k2ba4@x) k2ba2@name))) (k2a6b@find-external-library k2ba2@name)))) (set! k2a6f@library-exists? (lambda (k2ba6@name) (and (k2a55@find-library-by (lambda (k2ba8@x) (fast-equal? (k2a1d@library-name k2ba8@x) k2ba6@name))) '#t))) (set! k2a71@find-library-by-spec/die (lambda (k2baa@spec) ((lambda (k2bac@id) (or (k2a55@find-library-by (lambda (k2bae@x) (eq? k2bac@id (k2a19@library-id k2bae@x)))) (assertion-violation '#f '"cannot find library with required spec" k2baa@spec))) (car k2baa@spec)))) (set! k2a73@label->binding-table (make-eq-hashtable)) (set! k2a75@install-library-record (lambda (k2bb0@lib) (begin ((lambda (k2bb2@exp-env) (for-each (lambda (k2bb4@x) ((lambda (k2bb6@label k2bb7@binding) ((lambda (k2bba@binding) (begin (if (hashtable-ref k2a73@label->binding-table k2bb6@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" k2bb6@label (hashtable-ref k2a73@label->binding-table k2bb6@label '#f) k2bba@binding) (exit)) (void)) (hashtable-set! k2a73@label->binding-table k2bb6@label k2bba@binding))) ((lambda (k2bbc@t) (if (memv k2bbc@t '(global)) (cons 'global (cons k2bb0@lib (cdr k2bb7@binding))) (if (memv k2bbc@t '(global-macro)) (cons 'global-macro (cons k2bb0@lib (cdr k2bb7@binding))) (if (memv k2bbc@t '(global-macro!)) (cons 'global-macro! (cons k2bb0@lib (cdr k2bb7@binding))) k2bb7@binding)))) (car k2bb7@binding)))) (car k2bb4@x) (cdr k2bb4@x))) k2bb2@exp-env)) (k2a35@library-env k2bb0@lib)) ((k2a0b@current-library-collection) k2bb0@lib)))) (set! k2a77@install-library (lambda (k2bbe@id k2bbf@name k2bc0@ver k2bc1@imp* k2bc2@vis* k2bc3@inv* k2bc4@exp-subst k2bc5@exp-env k2bc6@visit-proc k2bc7@invoke-proc k2bc8@visit-code k2bc9@invoke-code k2bca@visible? k2bcb@source-file-name) ((lambda (k2bda@imp-lib* k2bdb@vis-lib* k2bdc@inv-lib*) (begin (if (not (and (symbol? k2bbe@id) (list? k2bbf@name) (list? k2bc0@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" k2bbe@id k2bbf@name k2bc0@ver) (void)) (if (k2a6f@library-exists? k2bbf@name) (assertion-violation 'install-library '"library is already installed" k2bbf@name) (void)) ((lambda (k2be0@lib) (k2a75@install-library-record k2be0@lib)) (make-simple-struct 'library '15 (list k2bbe@id k2bbf@name k2bc0@ver k2bda@imp-lib* k2bdb@vis-lib* k2bdc@inv-lib* k2bc4@exp-subst k2bc5@exp-env k2bc6@visit-proc k2bc7@invoke-proc k2bc8@visit-code k2bc9@invoke-code k2bca@visible? k2bcb@source-file-name))))) (map k2a71@find-library-by-spec/die k2bc1@imp*) (map k2a71@find-library-by-spec/die k2bc2@vis*) (map k2a71@find-library-by-spec/die k2bc3@inv*)))) (set! k2a79@imported-label->binding (lambda (k2be2@lab) (hashtable-ref k2a73@label->binding-table k2be2@lab '#f))) (set! k2a7b@invoke-library (lambda (k2be4@lib) ((lambda (k2be6@invoke) (if (procedure? k2be6@invoke) (begin (k2a3f@set-library-invoke-state! k2be4@lib (lambda () (assertion-violation 'invoke '"circularity detected" k2be4@lib))) (for-each k2a7b@invoke-library (k2a2d@library-inv* k2be4@lib)) (k2a3f@set-library-invoke-state! k2be4@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" k2be4@lib))) (k2be6@invoke) (k2a3f@set-library-invoke-state! k2be4@lib '#t)) (void))) (k2a3d@library-invoke-state k2be4@lib)))) (set! k2a7d@visit-library (lambda (k2be8@lib) ((lambda (k2bea@visit) (if (procedure? k2bea@visit) (begin (k2a3b@set-library-visit-state! k2be8@lib (lambda () (assertion-violation 'visit '"circularity detected" k2be8@lib))) (for-each k2a7b@invoke-library (k2a29@library-vis* k2be8@lib)) (k2a3b@set-library-visit-state! k2be8@lib (lambda () (assertion-violation 'invoke '"first visit did not return" k2be8@lib))) (k2bea@visit) (k2a3b@set-library-visit-state! k2be8@lib '#t)) (void))) (k2a39@library-visit-state k2be8@lib)))) (set! k2a7f@invoke-library-by-spec (lambda (k2bec@spec) (k2a7b@invoke-library (k2a71@find-library-by-spec/die k2bec@spec)))) (set! k2a81@installed-libraries (lambda k2bf4 ((lambda (k2bf5) (if (= k2bf5 '1) (apply (lambda (k2bee@all?) ((letrec ((k2bf0@f (lambda (k2bf2@ls) (if (null? k2bf2@ls) '() (if (or k2bee@all? (k2a49@library-visible? (car k2bf2@ls))) (cons (car k2bf2@ls) (k2bf0@f (cdr k2bf2@ls))) (k2bf0@f (cdr k2bf2@ls))))))) k2bf0@f) ((k2a0b@current-library-collection)))) k2bf4) (if (= k2bf5 '0) (apply (lambda () (k2a81@installed-libraries '#f)) k2bf4) (error 'apply '"invalid arg count")))) (length k2bf4)))) (set! k2a83@library-spec (lambda (k2bf6@x) (begin (if (not (k2a17@library? k2bf6@x)) (assertion-violation 'library-spec '"not a library" k2bf6@x) (void)) (list (k2a19@library-id k2bf6@x) (k2a1d@library-name k2bf6@x) (k2a21@library-version k2bf6@x))))) (begin (set! k2c31@k2a83@library-spec k2a83@library-spec) (set! k2c30@k2a81@installed-libraries k2a81@installed-libraries) (set! k2c2f@k2a7f@invoke-library-by-spec k2a7f@invoke-library-by-spec) (set! k2c2e@k2a7d@visit-library k2a7d@visit-library) (set! k2c2d@k2a7b@invoke-library k2a7b@invoke-library) (set! k2c2c@k2a79@imported-label->binding k2a79@imported-label->binding) (set! k2c2b@k2a77@install-library k2a77@install-library) (set! k2c2a@k2a75@install-library-record k2a75@install-library-record) (set! k2c29@k2a73@label->binding-table k2a73@label->binding-table) (set! k2c28@k2a71@find-library-by-spec/die k2a71@find-library-by-spec/die) (set! k2c27@k2a6f@library-exists? k2a6f@library-exists?) (set! k2c26@k2a6d@find-library-by-name k2a6d@find-library-by-name) (set! k2c25@k2a6b@find-external-library k2a6b@find-external-library) (set! k2c24@k2a69@external-pending-libraries k2a69@external-pending-libraries) (set! k2c23@k2a67@current-library-expander k2a67@current-library-expander) (set! k2c22@k2a65@library-loader k2a65@library-loader) (set! k2c21@k2a63@try-load-from-file k2a63@try-load-from-file) (set! k2c20@k2a61@current-precompiled-library-loader k2a61@current-precompiled-library-loader) (set! k2c1f@k2a5f@serialize-all k2a5f@serialize-all) (set! k2c1e@k2a5d@file-locator k2a5d@file-locator) (set! k2c1d@k2a5b@library-name->file-name k2a5b@library-name->file-name) (set! k2c1c@k2a59@library-extensions k2a59@library-extensions) (set! k2c1b@k2a57@library-path k2a57@library-path) (set! k2c1a@k2a55@find-library-by k2a55@find-library-by) (set! k2c19@k2a53@find-dependencies k2a53@find-dependencies) (set! k2c18@k2a51@dummy k2a51@dummy) (set! k2c17@k2a4f@set-library-source-file-name! k2a4f@set-library-source-file-name!) (set! k2c16@k2a4d@library-source-file-name k2a4d@library-source-file-name) (set! k2c15@k2a4b@set-library-visible?! k2a4b@set-library-visible?!) (set! k2c14@k2a49@library-visible? k2a49@library-visible?) (set! k2c13@k2a47@set-library-invoke-code! k2a47@set-library-invoke-code!) (set! k2c12@k2a45@library-invoke-code k2a45@library-invoke-code) (set! k2c11@k2a43@set-library-visit-code! k2a43@set-library-visit-code!) (set! k2c10@k2a41@library-visit-code k2a41@library-visit-code) (set! k2c0f@k2a3f@set-library-invoke-state! k2a3f@set-library-invoke-state!) (set! k2c0e@k2a3d@library-invoke-state k2a3d@library-invoke-state) (set! k2c0d@k2a3b@set-library-visit-state! k2a3b@set-library-visit-state!) (set! k2c0c@k2a39@library-visit-state k2a39@library-visit-state) (set! k2c0b@k2a37@set-library-env! k2a37@set-library-env!) (set! k2c0a@k2a35@library-env k2a35@library-env) (set! k2c09@k2a33@set-library-subst! k2a33@set-library-subst!) (set! k2c08@k2a31@library-subst k2a31@library-subst) (set! k2c07@k2a2f@set-library-inv*! k2a2f@set-library-inv*!) (set! k2c06@k2a2d@library-inv* k2a2d@library-inv*) (set! k2c05@k2a2b@set-library-vis*! k2a2b@set-library-vis*!) (set! k2c04@k2a29@library-vis* k2a29@library-vis*) (set! k2c03@k2a27@set-library-imp*! k2a27@set-library-imp*!) (set! k2c02@k2a25@library-imp* k2a25@library-imp*) (set! k2c01@k2a23@set-library-version! k2a23@set-library-version!) (set! k2c00@k2a21@library-version k2a21@library-version) (set! k2bff@k2a1f@set-library-name! k2a1f@set-library-name!) (set! k2bfe@k2a1d@library-name k2a1d@library-name) (set! k2bfd@k2a1b@set-library-id! k2a1b@set-library-id!) (set! k2bfc@k2a19@library-id k2a19@library-id) (set! k2bfb@k2a17@library? k2a17@library?) (set! k2bfa@k2a0d@rp k2a0d@rp) (set! k2bf9@k2a0b@current-library-collection k2a0b@current-library-collection) (set! k2bf8@k2a09@make-collection k2a09@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (k2c35@build-global-define k2ca6@build-lambda k2ca8@build-case-lambda k2caa@build-let k2cd8@build-sequence k2cda@build-void k2cdc@build-letrec k2cde@build-letrec* k2ce0@build-library-letrec* k2ce2@build-receive) (begin (set! k2c35@build-global-define (lambda (k2ce3@x) (k2cda@build-void))) (set! k2ca6@build-lambda (lambda (k2ce5@ae k2ce6@vars k2ce7@exp) (list 'lambda k2ce6@vars k2ce7@exp))) (set! k2ca8@build-case-lambda (lambda (k2ceb@ae k2cec@vars* k2ced@exp*) ((lambda (k2cf2@build-error k2cf4@build-pred k2cf6@build-apply k2cf8@expand-case-lambda) (begin (set! k2cf2@build-error (lambda (k2d29@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! k2cf4@build-pred (lambda (k2d11@ae k2d12@n k2d13@vars) (call-with-values (lambda () ((letrec ((k2d1b@f (lambda (k2d1d@vars k2d1e@count) (if (pair? k2d1d@vars) (k2d1b@f (cdr k2d1d@vars) (+ k2d1e@count '1)) (if (null? k2d1d@vars) (values k2d1e@count '=) (values k2d1e@count '>=)))))) k2d1b@f) k2d13@vars '0)) (lambda (k2d21@k2d18 k2d22@k2d1a) ((lambda (k2d25@pred k2d26@count) (list (list 'primitive k2d25@pred) k2d12@n (list 'quote k2d26@count))) k2d22@k2d1a k2d21@k2d18))))) (set! k2cf6@build-apply (lambda (k2d09@ae k2d0a@g k2d0b@vars k2d0c@exp) (list '(primitive apply) (k2ca6@build-lambda k2d09@ae k2d0b@vars k2d0c@exp) k2d0a@g))) (set! k2cf8@expand-case-lambda (lambda (k2cf9@ae k2cfa@vars k2cfb@exp*) ((lambda (k2cff@g k2d00@n) (list 'lambda k2cff@g (k2caa@build-let k2cf9@ae (list k2d00@n) (list (list '(primitive length) k2cff@g)) ((letrec ((k2d03@f (lambda (k2d05@vars* k2d06@exp*) (if (null? k2d05@vars*) (k2cf2@build-error k2cf9@ae) (list 'if (k2cf4@build-pred k2cf9@ae k2d00@n (car k2d05@vars*)) (k2cf6@build-apply k2cf9@ae k2cff@g (car k2d05@vars*) (car k2d06@exp*)) (k2d03@f (cdr k2d05@vars*) (cdr k2d06@exp*))))))) k2d03@f) k2cec@vars* k2cfb@exp*)))) (gensym) (gensym)))) (if (= (length k2ced@exp*) '1) (k2ca6@build-lambda k2ceb@ae (car k2cec@vars*) (car k2ced@exp*)) (k2cf8@expand-case-lambda k2ceb@ae k2cec@vars* k2ced@exp*)))) '#f '#f '#f '#f))) (set! k2caa@build-let (lambda (k2d2b@ae k2d2c@lhs* k2d2d@rhs* k2d2e@body) (cons (k2ca6@build-lambda k2d2b@ae k2d2c@lhs* k2d2e@body) k2d2d@rhs*))) (set! k2cd8@build-sequence (lambda (k2d33@ae k2d34@exps) ((letrec ((k2d37@loop (lambda (k2d39@exps) (if (null? (cdr k2d39@exps)) (car k2d39@exps) (if (equal? (car k2d39@exps) (k2cda@build-void)) (k2d37@loop (cdr k2d39@exps)) (cons 'begin k2d39@exps)))))) k2d37@loop) k2d34@exps))) (set! k2cda@build-void (lambda () '((primitive void)))) (set! k2cdc@build-letrec (lambda (k2d3b@ae k2d3c@vars k2d3d@val-exps k2d3e@body-exp) (if (null? k2d3c@vars) k2d3e@body-exp (list 'letrec (map list k2d3c@vars k2d3d@val-exps) k2d3e@body-exp)))) (set! k2cde@build-letrec* (lambda (k2d43@ae k2d44@vars k2d45@val-exps k2d46@body-exp) (if (null? k2d44@vars) k2d46@body-exp (k2caa@build-let k2d43@ae k2d44@vars (map (lambda (k2d4b@x) (list 'quote '#f)) k2d44@vars) (k2cd8@build-sequence k2d43@ae (append (map (lambda (k2d4d@lhs k2d4e@rhs) (list 'set! k2d4d@lhs k2d4e@rhs)) k2d44@vars k2d45@val-exps) (list k2d46@body-exp))))))) (set! k2ce0@build-library-letrec* (lambda (k2d51@ae k2d52@name k2d53@vars k2d54@locs k2d55@val-exps k2d56@body-exp) (list 'library-letrec* k2d52@name (map list k2d53@vars k2d54@locs k2d55@val-exps) k2d56@body-exp))) (set! k2ce2@build-receive (lambda (k2d5d@ae k2d5e@vars k2d5f@producer k2d60@body*) (begin (display '"************** in ") (cons 'receive (cons k2d5e@vars (cons k2d5f@producer k2d60@body*)))))) (begin (set! k2d6e@k2ce2@build-receive k2ce2@build-receive) (set! k2d6d@k2ce0@build-library-letrec* k2ce0@build-library-letrec*) (set! k2d6c@k2cde@build-letrec* k2cde@build-letrec*) (set! k2d6b@k2cdc@build-letrec k2cdc@build-letrec) (set! k2d6a@k2cda@build-void k2cda@build-void) (set! k2d69@k2cd8@build-sequence k2cd8@build-sequence) (set! k2d68@k2caa@build-let k2caa@build-let) (set! k2d67@k2ca8@build-case-lambda k2ca8@build-case-lambda) (set! k2d66@k2ca6@build-lambda k2ca6@build-lambda) (set! k2d65@k2c35@build-global-define k2c35@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (k2d7d@file-options-macro k2d7f@set-cons k2d81@set-union k2d86@top-mark* k2d88@top-marked? k2d8a@gen-lexical k2d8c@gen-global k2d8e@gen-label k2d90@gen-top-level-label k2d92@gen-define-label+loc k2d94@gen-define-label k2d9e@rib? k2da0@rib-sym* k2da2@set-rib-sym*! k2da4@rib-mark** k2da6@set-rib-mark**! k2da8@rib-label* k2daa@set-rib-label*! k2dac@rib-sealed/freq k2dae@set-rib-sealed/freq! k2db0@rib-cache k2db2@set-rib-cache! k2db4@dummy k2db6@make-empty-rib k2db8@extend-rib! k2dba@extend-rib/nc! k2dbc@make-rib-map k2dbe@seal-rib! k2dc0@unseal-rib! k2dc2@make-full-rib k2dc4@rp k2dce@stx? k2dd0@stx-expr k2dd2@set-stx-expr! k2dd4@stx-mark* k2dd6@set-stx-mark*! k2dd8@stx-subst* k2dda@set-stx-subst*! k2ddc@stx-ae* k2dde@set-stx-ae*! k2de0@dummy k2de2@datum->stx k2de4@gen-mark k2de6@anti-mark k2de8@anti-mark? k2dea@mkstx k2dec@add-mark k2dee@add-subst k2df0@syntax-kind? k2df2@syntax-vector->list k2df4@syntax-pair? k2df6@syntax-vector? k2df8@syntax-null? k2dfa@syntax-list? k2dfc@syntax-car k2dfe@syntax-cdr k2e00@syntax->list k2e02@id? k2e04@id->sym k2e06@bound-id=? k2e08@free-id=? k2e0a@valid-bound-ids? k2e0c@distinct-bound-ids? k2e0e@bound-id-member? k2e10@self-evaluating? k2e12@strip-annotations k2e14@strip k2e16@stx->datum k2e18@id->label k2e1a@label->binding k2e1c@make-binding k2e1e@binding-type k2e20@binding-value k2e22@raise-unbound-error k2e24@syntax-type k2e32@sanitize-binding k2e34@make-variable-transformer k2e36@variable-transformer? k2e38@variable-transformer-procedure k2e3a@make-eval-transformer k2f8b@parse-define k2f8d@parse-define-syntax k2f8f@scheme-stx-hashtable k2f91@scheme-stx k2f93@lexical-var k2f95@lexical-mutable? k2f97@set-lexical-mutable! k2f99@add-lexical k2f9b@add-lexicals k2f9d@letrec-helper k2f9f@letrec-transformer k2fa1@letrec*-transformer k2fa3@fluid-let-syntax-transformer k2fa5@type-descriptor-transformer k2fa7@record-type-descriptor-transformer k2fa9@record-constructor-descriptor-transformer k2fab@when-macro k2fad@unless-macro k2faf@if-transformer k2fb1@and-transformer k2fb3@or-transformer k2fb5@case-macro k2fb7@quote-transformer k2fb9@case-lambda-transformer k2fbb@lambda-transformer k2fbd@bless k2fbf@with-syntax-macro k2fc1@invalid-fmls-error k2fc3@let-macro k2fc5@let-values-macro k2fc7@let*-values-macro k2fc9@trace-lambda-macro k2fcb@trace-define-macro k2fcd@trace-define-syntax-macro k2fcf@trace-let/rec-syntax k2fd1@trace-let-syntax-macro k2fd3@trace-letrec-syntax-macro k2fd5@guard-macro k2fd7@define-enumeration-macro k2fd9@time-macro k2fdb@delay-macro k2fdd@assert-macro k2fdf@endianness-macro k2fe1@identifier-syntax-macro k2fe3@do-macro k2fe5@let*-macro k2fe7@or-macro k2fe9@and-macro k2feb@cond-macro k2fed@do-include k2fef@include-macro k2ff1@include-into-macro k2ff3@syntax-rules-macro k2ff5@quasiquote-macro k2ff7@quasisyntax-macro k2ff9@define-struct-macro k2ffb@define-record-type-macro k2ffd@define-condition-type-macro k2fff@incorrect-usage-macro k3001@parameterize-macro k3003@foreign-call-transformer k3005@convert-pattern k3007@syntax-dispatch k3009@ellipsis? k300b@underscore? k300d@verify-literals k300f@syntax-case-transformer k3011@ellipsis-map k3013@syntax-transformer k3015@core-macro-transformer k3017@symbol-macro k3019@macro-transformer k301b@local-macro-transformer k301d@do-macro-call k301f@chi-macro k3021@chi-local-macro k3023@chi-global-macro k3025@chi-expr* k3027@chi-application k3029@chi-expr k302b@chi-set! k302d@verify-formals k302f@chi-lambda-clause k3031@chi-lambda-clause* k3033@chi-defun k3035@chi-rhs k3037@expand-interaction-rhs*/init* k3039@chi-rhs* k303b@find-bound=? k303d@find-dups k303f@chi-internal k3041@parse-module k304b@module-interface? k304d@module-interface-first-mark k304f@set-module-interface-first-mark! k3051@module-interface-exp-id-vec k3053@set-module-interface-exp-id-vec! k3055@module-interface-exp-lab-vec k3057@set-module-interface-exp-lab-vec! k3059@dummy k305b@module-interface-exp-id* k305d@chi-internal-module k305f@chi-body* k3061@expand-transformer k3063@parse-exports k3065@parse-library-name k3067@parse-library k3069@parse-import-spec* k306b@make-top-rib k306d@make-collector k306f@inv-collector k3071@vis-collector k3073@imp-collector k3075@chi-library-internal k3077@chi-interaction-expr k3079@library-body-expander k307b@core-library-expander k307d@parse-top-level-program k307f@top-level-expander k3081@rp k308b@env? k308d@env-names k308f@set-env-names! k3091@env-labels k3093@set-env-labels! k3095@env-itc k3097@set-env-itc! k3099@dummy k309b@rp k30a5@interaction-env? k30a7@interaction-env-rib k30a9@set-interaction-env-rib! k30ab@interaction-env-r k30ad@set-interaction-env-r! k30af@interaction-env-locs k30b1@set-interaction-env-locs! k30b3@dummy k30b5@interaction-environment-symbols k30b7@environment-bindings k30b9@parse-binding k30bb@environment? k30bd@environment-symbols k30bf@environment k30c1@null-environment k30c3@scheme-report-environment k30c5@expand k30c7@eval k30c9@library-expander k30cb@boot-library-expand k30cd@rev-map-append k30cf@build-exports k30d1@make-export-subst k30d3@make-export-env/macros k30d5@generate-temporaries k30d7@free-identifier=? k30d9@bound-identifier=? k30db@make-source-condition k30dd@extract-position-condition k30df@expression-position k30e1@assertion-error k30e3@syntax-error k30e5@syntax-violation* k30e7@syntax-violation k30e9@identifier? k30eb@datum->syntax k30ed@syntax->datum k30ef@compile-r6rs-top-level k30f1@pre-compile-r6rs-top-level k30f3@interaction-environment k30f5@top-level-context) (begin (set! k2d7d@file-options-macro (lambda (k30f6@x) ((lambda (k30f9@valid-option?) (begin (set! k30f9@valid-option? (lambda (k3102@x) (and (k2e02@id? k3102@x) (memq (k2e04@id->sym k3102@x) '(no-fail no-create no-truncate))))) ((lambda (k30fa@t) ((lambda (k30fc@ls/false) (if (and k30fc@ls/false (apply (lambda (k30fe@opt*) (for-all k30f9@valid-option? k30fe@opt*)) k30fc@ls/false)) (apply (lambda (k3100@opt*) (k2fbd@bless (list 'make-file-options (list 'quote k3100@opt*)))) k30fc@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k30fa@t))) (k3007@syntax-dispatch k30fa@t '(_ . each-any)))) k30f6@x))) '#f))) (set! k2d7f@set-cons (lambda (k3104@x k3105@ls) (if (memq k3104@x k3105@ls) k3105@ls (cons k3104@x k3105@ls)))) (set! k2d81@set-union (lambda (k3108@ls1 k3109@ls2) (if (null? k3108@ls1) k3109@ls2 (if (memq (car k3108@ls1) k3109@ls2) (k2d81@set-union (cdr k3108@ls1) k3109@ls2) (cons (car k3108@ls1) (k2d81@set-union (cdr k3108@ls1) k3109@ls2)))))) (set! k2d86@top-mark* '(top)) (set! k2d88@top-marked? (lambda (k310c@m*) (memq 'top k310c@m*))) (set! k2d8a@gen-lexical (lambda (k310e@sym) (if (symbol? k310e@sym) (gensym k310e@sym) (if (k2dce@stx? k310e@sym) (k2d8a@gen-lexical (k2e04@id->sym k310e@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" k310e@sym))))) (set! k2d8c@gen-global (lambda (k3110@x) (k2d8a@gen-lexical k3110@x))) (set! k2d8e@gen-label (lambda (k3112@_) (gensym))) (set! k2d90@gen-top-level-label (lambda (k3114@id k3115@rib) ((lambda (k3119@find) (begin (set! k3119@find (lambda (k3124@sym k3125@mark* k3126@sym* k3127@mark** k3128@label*) (and (pair? k3126@sym*) (if (and (eq? k3124@sym (car k3126@sym*)) (same-marks? k3125@mark* (car k3127@mark**))) (car k3128@label*) (k3119@find k3124@sym k3125@mark* (cdr k3126@sym*) (cdr k3127@mark**) (cdr k3128@label*)))))) ((lambda (k311a@sym k311b@mark*) ((lambda (k311e@sym*) ((lambda (k3120@t) (if k3120@t ((lambda (k3122@label) (if (k2c2c@k2a79@imported-label->binding k3122@label) (gensym) k3122@label)) k3120@t) (gensym))) (and (memq k311a@sym (k2da0@rib-sym* k3115@rib)) (k3119@find k311a@sym k311b@mark* k311e@sym* (k2da4@rib-mark** k3115@rib) (k2da8@rib-label* k3115@rib))))) (k2da0@rib-sym* k3115@rib))) (k2e04@id->sym k3114@id) (k2dd4@stx-mark* k3114@id)))) '#f))) (set! k2d92@gen-define-label+loc (lambda (k312e@id k312f@rib) ((lambda (k3132@t) (if k3132@t ((lambda (k3134@env) ((lambda (k3136@label k3137@locs) (values k3136@label ((lambda (k313a@t) (if k313a@t (cdr k313a@t) ((lambda (k313c@loc) (begin (k30b1@set-interaction-env-locs! k3134@env (cons (cons k3136@label k313c@loc) k3137@locs)) k313c@loc)) (k2d8a@gen-lexical k312e@id)))) (assq k3136@label k3137@locs)))) (k2d90@gen-top-level-label k312e@id k312f@rib) (k30af@interaction-env-locs k3134@env))) k3132@t) (values (gensym) (k2d8a@gen-lexical k312e@id)))) (k30f5@top-level-context)))) (set! k2d94@gen-define-label (lambda (k313e@id k313f@rib) (if (k30f5@top-level-context) (k2d90@gen-top-level-label k313e@id k313f@rib) (gensym)))) (set! k2d9e@rib? (lambda (k3142@x) (and (simple-struct? k3142@x) (eq? (simple-struct-name k3142@x) 'rib)))) (set! k2da0@rib-sym* (lambda (k3144@x) (simple-struct-ref k3144@x '0))) (set! k2da2@set-rib-sym*! (lambda (k3146@x k3147@val) (simple-struct-set! k3146@x '0 k3147@val))) (set! k2da4@rib-mark** (lambda (k314a@x) (simple-struct-ref k314a@x '1))) (set! k2da6@set-rib-mark**! (lambda (k314c@x k314d@val) (simple-struct-set! k314c@x '1 k314d@val))) (set! k2da8@rib-label* (lambda (k3150@x) (simple-struct-ref k3150@x '2))) (set! k2daa@set-rib-label*! (lambda (k3152@x k3153@val) (simple-struct-set! k3152@x '2 k3153@val))) (set! k2dac@rib-sealed/freq (lambda (k3156@x) (simple-struct-ref k3156@x '3))) (set! k2dae@set-rib-sealed/freq! (lambda (k3158@x k3159@val) (simple-struct-set! k3158@x '3 k3159@val))) (set! k2db0@rib-cache (lambda (k315c@x) (simple-struct-ref k315c@x '4))) (set! k2db2@set-rib-cache! (lambda (k315e@x k315f@val) (simple-struct-set! k315e@x '4 k315f@val))) (set! k2db4@dummy '3) (set! k2db6@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! k2db8@extend-rib! (lambda (k3162@rib k3163@id k3164@label) ((lambda (k3169@find) (begin (set! k3169@find (lambda (k3176@sym k3177@mark* k3178@sym* k3179@mark** k317a@label*) (and (pair? k3178@sym*) (if (and (eq? k3176@sym (car k3178@sym*)) (same-marks? k3177@mark* (car k3179@mark**))) k317a@label* (k3169@find k3176@sym k3177@mark* (cdr k3178@sym*) (cdr k3179@mark**) (cdr k317a@label*)))))) (begin (if (k2dac@rib-sealed/freq k3162@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" k3162@rib) (void)) ((lambda (k316a@sym k316b@mark*) ((lambda (k316e@sym*) ((lambda (k3170@t) (if k3170@t ((lambda (k3172@p) (if (not (eq? k3164@label (car k3172@p))) (if (k30f5@top-level-context) (set-car! k3172@p k3164@label) (k30e7@syntax-violation '#f '"multiple definitions of identifier" k3163@id)) (void))) k3170@t) (begin (if (k2db0@rib-cache k3162@rib) (hashtable-update! (k2db0@rib-cache k3162@rib) k316a@sym (lambda (k3174@e) (cons (cons k316b@mark* k3164@label) k3174@e)) '()) (void)) (k2da2@set-rib-sym*! k3162@rib (cons k316a@sym k316e@sym*)) (k2da6@set-rib-mark**! k3162@rib (cons k316b@mark* (k2da4@rib-mark** k3162@rib))) (k2daa@set-rib-label*! k3162@rib (cons k3164@label (k2da8@rib-label* k3162@rib)))))) (and (memq k316a@sym (k2da0@rib-sym* k3162@rib)) (k3169@find k316a@sym k316b@mark* k316e@sym* (k2da4@rib-mark** k3162@rib) (k2da8@rib-label* k3162@rib))))) (k2da0@rib-sym* k3162@rib))) (k2e04@id->sym k3163@id) (k2dd4@stx-mark* k3163@id))))) '#f))) (set! k2dba@extend-rib/nc! (lambda (k3180@rib k3181@id k3182@label) ((lambda (k3186@sym k3187@mark*) ((lambda (k318a@sym*) (begin (if (k2db0@rib-cache k3180@rib) (hashtable-update! (k2db0@rib-cache k3180@rib) k3186@sym (lambda (k318c@e) (cons (cons k3187@mark* k3182@label) k318c@e)) '()) (void)) (k2da2@set-rib-sym*! k3180@rib (cons k3186@sym k318a@sym*)) (k2da6@set-rib-mark**! k3180@rib (cons k3187@mark* (k2da4@rib-mark** k3180@rib))) (k2daa@set-rib-label*! k3180@rib (cons k3182@label (k2da8@rib-label* k3180@rib))))) (k2da0@rib-sym* k3180@rib))) (k2e04@id->sym k3181@id) (k2dd4@stx-mark* k3181@id)))) (set! k2dbc@make-rib-map (lambda (k318e@sym*) ((lambda (k3190@ht) ((letrec ((k3192@f (lambda (k3194@i k3195@sym*) (if (null? k3195@sym*) k3190@ht (begin (hashtable-update! k3190@ht (car k3195@sym*) (lambda (k3198@x) (cons k3194@i k3198@x)) '()) (k3192@f (+ k3194@i '1) (cdr k3195@sym*))))))) k3192@f) '0 k318e@sym*)) (make-eq-hashtable)))) (set! k2dbe@seal-rib! (lambda (k319a@rib) ((lambda (k319c@sym*) (if (not (null? k319c@sym*)) (begin (k2da2@set-rib-sym*! k319a@rib (list->vector k319c@sym*)) (k2da6@set-rib-mark**! k319a@rib (list->vector (k2da4@rib-mark** k319a@rib))) (k2daa@set-rib-label*! k319a@rib (list->vector (k2da8@rib-label* k319a@rib))) (k2dae@set-rib-sealed/freq! k319a@rib (k2dbc@make-rib-map k319c@sym*))) (void))) (k2da0@rib-sym* k319a@rib)))) (set! k2dc0@unseal-rib! (lambda (k319e@rib) (if (k2dac@rib-sealed/freq k319e@rib) (begin (k2dae@set-rib-sealed/freq! k319e@rib '#f) (k2da2@set-rib-sym*! k319e@rib (vector->list (k2da0@rib-sym* k319e@rib))) (k2da6@set-rib-mark**! k319e@rib (vector->list (k2da4@rib-mark** k319e@rib))) (k2daa@set-rib-label*! k319e@rib (vector->list (k2da8@rib-label* k319e@rib)))) (void)))) (set! k2dc2@make-full-rib (lambda (k31a0@id* k31a1@label*) ((lambda (k31a4@r) (begin (k2dbe@seal-rib! k31a4@r) k31a4@r)) (make-simple-struct 'rib '6 (list (map k2e04@id->sym k31a0@id*) (map k2dd4@stx-mark* k31a0@id*) k31a1@label* '#f '#f))))) (set! k2dc4@rp (k295f@k2858@make-record-printer 'stx (lambda (k31a6@x k31a7@p k31a8@wr) (begin (display '"#<syntax " k31a7@p) (write (k2e16@stx->datum k31a6@x) k31a7@p) ((lambda (k31ac@expr) (if (k2957@k2848@annotation? k31ac@expr) ((lambda (k31ae@src) (if (pair? k31ae@src) (begin (display '" [" k31a7@p) (display (cdr k31ae@src) k31a7@p) (display '" of " k31a7@p) (display (car k31ae@src) k31a7@p) (display '"]" k31a7@p)) (void))) (k2958@k284a@annotation-source k31ac@expr)) (void))) (k2dd0@stx-expr k31a6@x)) (display '">" k31a7@p))))) (set! k2dce@stx? (lambda (k31b0@x) (and (simple-struct? k31b0@x) (eq? (simple-struct-name k31b0@x) 'stx)))) (set! k2dd0@stx-expr (lambda (k31b2@x) (simple-struct-ref k31b2@x '0))) (set! k2dd2@set-stx-expr! (lambda (k31b4@x k31b5@val) (simple-struct-set! k31b4@x '0 k31b5@val))) (set! k2dd4@stx-mark* (lambda (k31b8@x) (simple-struct-ref k31b8@x '1))) (set! k2dd6@set-stx-mark*! (lambda (k31ba@x k31bb@val) (simple-struct-set! k31ba@x '1 k31bb@val))) (set! k2dd8@stx-subst* (lambda (k31be@x) (simple-struct-ref k31be@x '2))) (set! k2dda@set-stx-subst*! (lambda (k31c0@x k31c1@val) (simple-struct-set! k31c0@x '2 k31c1@val))) (set! k2ddc@stx-ae* (lambda (k31c4@x) (simple-struct-ref k31c4@x '3))) (set! k2dde@set-stx-ae*! (lambda (k31c6@x k31c7@val) (simple-struct-set! k31c6@x '3 k31c7@val))) (set! k2de0@dummy '3) (set! k2de2@datum->stx (lambda (k31ca@id k31cb@datum) (make-simple-struct 'stx '5 (list k31cb@datum (k2dd4@stx-mark* k31ca@id) (k2dd8@stx-subst* k31ca@id) (k2ddc@stx-ae* k31ca@id))))) (set! k2de4@gen-mark (lambda () (string '#\m))) (set! k2de6@anti-mark '#f) (set! k2de8@anti-mark? not) (set! k2dea@mkstx (lambda (k31ce@e k31cf@m* k31d0@s* k31d1@ae*) (if (and (k2dce@stx? k31ce@e) (not (k2d88@top-marked? k31cf@m*))) (call-with-values (lambda () (join-wraps k31cf@m* k31d0@s* k31d1@ae* k31ce@e)) (lambda (k31dc@k31d7 k31dd@k31d9 k31de@k31db) ((lambda (k31e2@ae* k31e3@s* k31e4@m*) (make-simple-struct 'stx '5 (list (k2dd0@stx-expr k31ce@e) k31e4@m* k31e3@s* k31e2@ae*))) k31de@k31db k31dd@k31d9 k31dc@k31d7))) (make-simple-struct 'stx '5 (list k31ce@e k31cf@m* k31d0@s* k31d1@ae*))))) (set! k2dec@add-mark (lambda (k31e8@m k31e9@e k31ea@ae) (k2dea@mkstx k31e9@e (list k31e8@m) '(shift) (list k31ea@ae)))) (set! k2dee@add-subst (lambda (k31ee@subst k31ef@e) (k2dea@mkstx k31ef@e '() (list k31ee@subst) '()))) (set! k2df0@syntax-kind? (lambda (k31f2@x k31f3@p?) (if (k2dce@stx? k31f2@x) (k2df0@syntax-kind? (k2dd0@stx-expr k31f2@x) k31f3@p?) (if (k2957@k2848@annotation? k31f2@x) (k2df0@syntax-kind? (k2959@k284c@annotation-expression k31f2@x) k31f3@p?) (k31f3@p? k31f2@x))))) (set! k2df2@syntax-vector->list (lambda (k31f6@x) (if (k2dce@stx? k31f6@x) ((lambda (k31f8@ls k31f9@m* k31fa@s* k31fb@ae*) (map (lambda (k3200@x) (k2dea@mkstx k3200@x k31f9@m* k31fa@s* k31fb@ae*)) k31f8@ls)) (k2df2@syntax-vector->list (k2dd0@stx-expr k31f6@x)) (k2dd4@stx-mark* k31f6@x) (k2dd8@stx-subst* k31f6@x) (k2ddc@stx-ae* k31f6@x)) (if (k2957@k2848@annotation? k31f6@x) (k2df2@syntax-vector->list (k2959@k284c@annotation-expression k31f6@x)) (if (vector? k31f6@x) (vector->list k31f6@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" k31f6@x)))))) (set! k2df4@syntax-pair? (lambda (k3202@x) (k2df0@syntax-kind? k3202@x pair?))) (set! k2df6@syntax-vector? (lambda (k3204@x) (k2df0@syntax-kind? k3204@x vector?))) (set! k2df8@syntax-null? (lambda (k3206@x) (k2df0@syntax-kind? k3206@x null?))) (set! k2dfa@syntax-list? (lambda (k3208@x) (or (k2df8@syntax-null? k3208@x) (and (k2df4@syntax-pair? k3208@x) (k2dfa@syntax-list? (k2dfe@syntax-cdr k3208@x)))))) (set! k2dfc@syntax-car (lambda (k320a@x) (if (k2dce@stx? k320a@x) (k2dea@mkstx (k2dfc@syntax-car (k2dd0@stx-expr k320a@x)) (k2dd4@stx-mark* k320a@x) (k2dd8@stx-subst* k320a@x) (k2ddc@stx-ae* k320a@x)) (if (k2957@k2848@annotation? k320a@x) (k2dfc@syntax-car (k2959@k284c@annotation-expression k320a@x)) (if (pair? k320a@x) (car k320a@x) (assertion-violation 'syntax-car '"BUG: not a pair" k320a@x)))))) (set! k2dfe@syntax-cdr (lambda (k320c@x) (if (k2dce@stx? k320c@x) (k2dea@mkstx (k2dfe@syntax-cdr (k2dd0@stx-expr k320c@x)) (k2dd4@stx-mark* k320c@x) (k2dd8@stx-subst* k320c@x) (k2ddc@stx-ae* k320c@x)) (if (k2957@k2848@annotation? k320c@x) (k2dfe@syntax-cdr (k2959@k284c@annotation-expression k320c@x)) (if (pair? k320c@x) (cdr k320c@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" k320c@x)))))) (set! k2e00@syntax->list (lambda (k320e@x) (if (k2df4@syntax-pair? k320e@x) (cons (k2dfc@syntax-car k320e@x) (k2e00@syntax->list (k2dfe@syntax-cdr k320e@x))) (if (k2df8@syntax-null? k320e@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" k320e@x))))) (set! k2e02@id? (lambda (k3210@x) (and (k2dce@stx? k3210@x) (symbol? (k2dd0@stx-expr k3210@x))))) (set! k2e04@id->sym (lambda (k3212@x) (k2dd0@stx-expr k3212@x))) (set! k2e06@bound-id=? (lambda (k3214@x k3215@y) (and (eq? (k2e04@id->sym k3214@x) (k2e04@id->sym k3215@y)) (same-marks? (k2dd4@stx-mark* k3214@x) (k2dd4@stx-mark* k3215@y))))) (set! k2e08@free-id=? (lambda (k3218@i k3219@j) ((lambda (k321c@t0 k321d@t1) (if (or k321c@t0 k321d@t1) (eq? k321c@t0 k321d@t1) (eq? (k2e04@id->sym k3218@i) (k2e04@id->sym k3219@j)))) (id->real-label k3218@i) (id->real-label k3219@j)))) (set! k2e0a@valid-bound-ids? (lambda (k3220@id*) (and (for-all k2e02@id? k3220@id*) (k2e0c@distinct-bound-ids? k3220@id*)))) (set! k2e0c@distinct-bound-ids? (lambda (k3222@id*) (or (null? k3222@id*) (and (not (k2e0e@bound-id-member? (car k3222@id*) (cdr k3222@id*))) (k2e0c@distinct-bound-ids? (cdr k3222@id*)))))) (set! k2e0e@bound-id-member? (lambda (k3224@id k3225@id*) (and (pair? k3225@id*) (or (k2e06@bound-id=? k3224@id (car k3225@id*)) (k2e0e@bound-id-member? k3224@id (cdr k3225@id*)))))) (set! k2e10@self-evaluating? (lambda (k3228@x) (or (number? k3228@x) (string? k3228@x) (char? k3228@x) (boolean? k3228@x) (regexp? k3228@x) (bytevector? k3228@x)))) (set! k2e12@strip-annotations (lambda (k322a@x) (if (pair? k322a@x) (cons (k2e12@strip-annotations (car k322a@x)) (k2e12@strip-annotations (cdr k322a@x))) (if (vector? k322a@x) (vector-map k2e12@strip-annotations k322a@x) (if (k2957@k2848@annotation? k322a@x) (k2956@k2846@annotation-stripped k322a@x) k322a@x))))) (set! k2e14@strip (lambda (k322c@x k322d@m*) (if (k2d88@top-marked? k322d@m*) (if (or (k2957@k2848@annotation? k322c@x) (and (pair? k322c@x) (k2957@k2848@annotation? (car k322c@x))) (and (vector? k322c@x) (> (vector-length k322c@x) '0) (k2957@k2848@annotation? (vector-ref k322c@x '0)))) (k2e12@strip-annotations k322c@x) k322c@x) ((letrec ((k3230@f (lambda (k3232@x) (if (k2dce@stx? k3232@x) (k2e14@strip (k2dd0@stx-expr k3232@x) (k2dd4@stx-mark* k3232@x)) (if (k2957@k2848@annotation? k3232@x) (k2956@k2846@annotation-stripped k3232@x) (if (pair? k3232@x) ((lambda (k3234@a k3235@d) (if (and (eq? k3234@a (car k3232@x)) (eq? k3235@d (cdr k3232@x))) k3232@x (cons k3234@a k3235@d))) (k3230@f (car k3232@x)) (k3230@f (cdr k3232@x))) (if (vector? k3232@x) ((lambda (k3238@old) ((lambda (k323a@new) (if (for-all eq? k3238@old k323a@new) k3232@x (list->vector k323a@new))) (map k3230@f k3238@old))) (vector->list k3232@x)) k3232@x))))))) k3230@f) k322c@x)))) (set! k2e16@stx->datum (lambda (k323c@x) (k2e14@strip k323c@x '()))) (set! k2e18@id->label (lambda (k323e@id) (or (id->real-label k323e@id) ((lambda (k3240@t) (if k3240@t ((lambda (k3242@env) ((lambda (k3244@rib) (call-with-values (lambda () (k2d92@gen-define-label+loc k323e@id k3244@rib)) (lambda (k324a@k3247 k324b@k3249) ((lambda (k324e@loc_ k324f@lab) (begin (k2db8@extend-rib! k3244@rib k323e@id k324f@lab) k324f@lab)) k324b@k3249 k324a@k3247)))) (k30a7@interaction-env-rib k3242@env))) k3240@t) '#f)) (k30f5@top-level-context))))) (set! k2e1a@label->binding (lambda (k3252@x k3253@r) ((lambda (k3256@t) (if k3256@t ((lambda (k3258@b) (if (and (pair? k3258@b) (eq? (car k3258@b) '$core-rtd)) (cons '$rtd (map k2fbd@bless (cdr k3258@b))) (if (and (pair? k3258@b) (eq? (car k3258@b) 'global-rtd)) ((lambda (k325a@lib k325b@loc) (cons '$rtd (symbol-value k325b@loc))) (cadr k3258@b) (cddr k3258@b)) k3258@b))) k3256@t) ((lambda (k325e@t) (if k325e@t (cdr k325e@t) ((lambda (k3260@t) (if k3260@t ((lambda (k3262@env) ((lambda (k3264@t) (if k3264@t ((lambda (k3266@p) (cons* 'lexical (cdr k3266@p) '#f)) k3264@t) '(displaced-lexical . #f))) (assq k3252@x (k30af@interaction-env-locs k3262@env)))) k3260@t) '(displaced-lexical . #f))) (k30f5@top-level-context)))) (assq k3252@x k3253@r)))) (k2c2c@k2a79@imported-label->binding k3252@x)))) (set! k2e1c@make-binding cons) (set! k2e1e@binding-type car) (set! k2e20@binding-value cdr) (set! k2e22@raise-unbound-error (lambda (k3268@id) (k30e5@syntax-violation* '#f '"unbound identifier" k3268@id (k4e46@k4c8c@make-undefined-violation)))) (set! k2e24@syntax-type (lambda (k326a@e k326b@r) (if (k2e02@id? k326a@e) ((lambda (k326e@id) ((lambda (k3270@label) ((lambda (k3272@b) ((lambda (k3274@type) ((lambda () (begin (if (not k3270@label) (k2e22@raise-unbound-error k326e@id) (void)) ((lambda (k3276@t) (if (memv k3276@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values k3274@type (k2e20@binding-value k3272@b) k326e@id) (values 'other '#f '#f))) k3274@type))))) (k2e1e@binding-type k3272@b))) (k2e1a@label->binding k3270@label k326b@r))) (k2e18@id->label k326e@id))) k326a@e) (if (k2df4@syntax-pair? k326a@e) ((lambda (k3278@id) (if (k2e02@id? k3278@id) ((lambda (k327a@label) ((lambda (k327c@b) ((lambda (k327e@type) ((lambda () (begin (if (not k327a@label) (k2e22@raise-unbound-error k3278@id) (void)) ((lambda (k3280@t) (if (memv k3280@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values k327e@type (k2e20@binding-value k327c@b) k3278@id) (values 'call '#f '#f))) k327e@type))))) (k2e1e@binding-type k327c@b))) (k2e1a@label->binding k327a@label k326b@r))) (k2e18@id->label k3278@id)) (values 'call '#f '#f))) (k2dfc@syntax-car k326a@e)) ((lambda (k3282@d) (if (k2e10@self-evaluating? k3282@d) (values 'constant k3282@d '#f) (values 'other '#f '#f))) (k2e16@stx->datum k326a@e)))))) (set! k2e32@sanitize-binding (lambda (k3284@x k3285@src) (if (procedure? k3284@x) (cons* 'local-macro k3284@x k3285@src) (if (and (pair? k3284@x) (eq? (car k3284@x) 'macro!) (procedure? (cdr k3284@x))) (cons* 'local-macro! (cdr k3284@x) k3285@src) (if (and (pair? k3284@x) (eq? (car k3284@x) '$rtd)) k3284@x (assertion-violation 'expand '"invalid transformer" k3284@x)))))) (set! k2e34@make-variable-transformer (lambda (k3288@x) (if (procedure? k3288@x) (cons 'macro! k3288@x) (assertion-violation 'make-variable-transformer '"not a procedure" k3288@x)))) (set! k2e36@variable-transformer? (lambda (k328a@x) (and (pair? k328a@x) (eq? (car k328a@x) 'macro!) (procedure? (cdr k328a@x))))) (set! k2e38@variable-transformer-procedure (lambda (k328c@x) (if (k2e36@variable-transformer? k328c@x) (cdr k328c@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" k328c@x)))) (set! k2e3a@make-eval-transformer (lambda (k328e@x) (k2e32@sanitize-binding (eval-core (k29b7@k296f@expanded->core k328e@x)) k328e@x))) (set! k2f8b@parse-define (lambda (k3290@x) ((lambda (k3292@t) ((lambda (k3294@ls/false) (if (and k3294@ls/false (apply (lambda (k3296@id k3297@fmls k3298@b k3299@b*) (k2e02@id? k3296@id)) k3294@ls/false)) (apply (lambda (k329e@id k329f@fmls k32a0@b k32a1@b*) (begin (k302d@verify-formals k329f@fmls k3290@x) (values k329e@id (cons 'defun (cons k329f@fmls (cons k32a0@b k32a1@b*)))))) k3294@ls/false) ((lambda (k32a6@t) ((lambda (k32a8@ls/false) (if (and k32a8@ls/false (apply (lambda (k32aa@id k32ab@val) (k2e02@id? k32aa@id)) k32a8@ls/false)) (apply (lambda (k32ae@id k32af@val) (values k32ae@id (cons 'expr k32af@val))) k32a8@ls/false) ((lambda (k32b2@t) ((lambda (k32b4@ls/false) (if (and k32b4@ls/false (apply (lambda (k32b6@id) (k2e02@id? k32b6@id)) k32b4@ls/false)) (apply (lambda (k32b8@id) (values k32b8@id (cons 'expr (k2fbd@bless '(void))))) k32b4@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k32b2@t))) (k3007@syntax-dispatch k32b2@t '(_ any)))) k32a6@t))) (k3007@syntax-dispatch k32a6@t '(_ any any)))) k3292@t))) (k3007@syntax-dispatch k3292@t '(_ (any . any) any . each-any)))) k3290@x))) (set! k2f8d@parse-define-syntax (lambda (k32ba@x) ((lambda (k32bc@t) ((lambda (k32be@ls/false) (if (and k32be@ls/false (apply (lambda (k32c0@id k32c1@val) (k2e02@id? k32c0@id)) k32be@ls/false)) (apply (lambda (k32c4@id k32c5@val) (values k32c4@id k32c5@val)) k32be@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k32bc@t))) (k3007@syntax-dispatch k32bc@t '(_ any any)))) k32ba@x))) (set! k2f8f@scheme-stx-hashtable (make-eq-hashtable)) (set! k2f91@scheme-stx (lambda (k32c8@sym) (or (hashtable-ref k2f8f@scheme-stx-hashtable k32c8@sym '#f) ((lambda (k32ca@subst) ((lambda (k32cc@stx) ((lambda (k32ce@stx) ((lambda () (begin (hashtable-set! k2f8f@scheme-stx-hashtable k32c8@sym k32ce@stx) k32ce@stx)))) ((lambda (k32d0@t) (if k32d0@t ((lambda (k32d2@x) ((lambda (k32d4@name k32d5@label) (k2dee@add-subst (make-simple-struct 'rib '6 (list (list k32d4@name) (list k2d86@top-mark*) (list k32d5@label) '#f '#f)) k32cc@stx)) (car k32d2@x) (cdr k32d2@x))) k32d0@t) k32cc@stx)) (assq k32c8@sym k32ca@subst)))) (make-simple-struct 'stx '5 (list k32c8@sym k2d86@top-mark* '() '())))) (k2c08@k2a31@library-subst (k2c26@k2a6d@find-library-by-name '(psyntax system $all))))))) (set! k2f93@lexical-var car) (set! k2f95@lexical-mutable? cdr) (set! k2f97@set-lexical-mutable! set-cdr!) (set! k2f99@add-lexical (lambda (k32d8@lab k32d9@lex k32da@r) (cons (cons* k32d8@lab 'lexical k32d9@lex '#f) k32da@r))) (set! k2f9b@add-lexicals (lambda (k32de@lab* k32df@lex* k32e0@r) (if (null? k32de@lab*) k32e0@r (k2f9b@add-lexicals (cdr k32de@lab*) (cdr k32df@lex*) (k2f99@add-lexical (car k32de@lab*) (car k32df@lex*) k32e0@r))))) (set! k2f9d@letrec-helper (lambda (k32e4@e k32e5@r k32e6@mr k32e7@build) ((lambda (k32ec@t) ((lambda (k32ee@ls/false) (if k32ee@ls/false (apply (lambda (k32f0@lhs* k32f1@rhs* k32f2@b k32f3@b*) (if (not (k2e0a@valid-bound-ids? k32f0@lhs*)) (k2fc1@invalid-fmls-error k32e4@e k32f0@lhs*) ((lambda (k32f8@lex* k32f9@lab*) ((lambda (k32fc@rib k32fd@r) ((lambda (k3300@body k3301@rhs*) (k32e7@build '#f k32f8@lex* k3301@rhs* k3300@body)) (k303f@chi-internal (k2dee@add-subst k32fc@rib (cons k32f2@b k32f3@b*)) k32fd@r k32e6@mr) (k3025@chi-expr* (map (lambda (k3304@x) (k2dee@add-subst k32fc@rib k3304@x)) k32f1@rhs*) k32fd@r k32e6@mr))) (k2dc2@make-full-rib k32f0@lhs* k32f9@lab*) (k2f9b@add-lexicals k32f9@lab* k32f8@lex* k32e5@r))) (map k2d8a@gen-lexical k32f0@lhs*) (map k2d8e@gen-label k32f0@lhs*)))) k32ee@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k32ec@t))) (k3007@syntax-dispatch k32ec@t '(_ #(each (any any)) any . each-any)))) k32e4@e))) (set! k2f9f@letrec-transformer (lambda (k3306@e k3307@r k3308@mr) (k2f9d@letrec-helper k3306@e k3307@r k3308@mr k2d6b@k2cdc@build-letrec))) (set! k2fa1@letrec*-transformer (lambda (k330c@e k330d@r k330e@mr) (k2f9d@letrec-helper k330c@e k330d@r k330e@mr k2d6c@k2cde@build-letrec*))) (set! k2fa3@fluid-let-syntax-transformer (lambda (k3312@e k3313@r k3314@mr) ((lambda (k3319@lookup) (begin (set! k3319@lookup (lambda (k332c@x) (or (k2e18@id->label k332c@x) (k30e7@syntax-violation '#f '"unbound identifier" k3312@e k332c@x)))) ((lambda (k331a@t) ((lambda (k331c@ls/false) (if k331c@ls/false (apply (lambda (k331e@lhs* k331f@rhs* k3320@b k3321@b*) (if (not (k2e0a@valid-bound-ids? k331e@lhs*)) (k2fc1@invalid-fmls-error k3312@e k331e@lhs*) ((lambda (k3326@lab* k3327@rhs*) (k303f@chi-internal (cons k3320@b k3321@b*) (append (map cons k3326@lab* k3327@rhs*) k3313@r) (append (map cons k3326@lab* k3327@rhs*) k3314@mr))) (map k3319@lookup k331e@lhs*) (map (lambda (k332a@x) (k2e3a@make-eval-transformer (k3061@expand-transformer k332a@x k3314@mr))) k331f@rhs*)))) k331c@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k331a@t))) (k3007@syntax-dispatch k331a@t '(_ #(each (any any)) any . each-any)))) k3312@e))) '#f))) (set! k2fa5@type-descriptor-transformer (lambda (k332e@e k332f@r k3330@mr) ((lambda (k3334@t) ((lambda (k3336@ls/false) (if (and k3336@ls/false (apply (lambda (k3338@id) (k2e02@id? k3338@id)) k3336@ls/false)) (apply (lambda (k333a@id) ((lambda (k333c@lab) ((lambda (k333e@b) ((lambda (k3340@type) ((lambda () (begin (if (not k333c@lab) (k2e22@raise-unbound-error k333a@id) (void)) (if (not (and (eq? k3340@type '$rtd) (not (list? (k2e20@binding-value k333e@b))))) (k30e7@syntax-violation '#f '"not a record type" k332e@e) (void)) (list 'quote (k2e20@binding-value k333e@b)))))) (k2e1e@binding-type k333e@b))) (k2e1a@label->binding k333c@lab k332f@r))) (k2e18@id->label k333a@id))) k3336@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3334@t))) (k3007@syntax-dispatch k3334@t '(_ any)))) k332e@e))) (set! k2fa7@record-type-descriptor-transformer (lambda (k3342@e k3343@r k3344@mr) ((lambda (k3348@t) ((lambda (k334a@ls/false) (if (and k334a@ls/false (apply (lambda (k334c@id) (k2e02@id? k334c@id)) k334a@ls/false)) (apply (lambda (k334e@id) ((lambda (k3350@lab) ((lambda (k3352@b) ((lambda (k3354@type) ((lambda () (begin (if (not k3350@lab) (k2e22@raise-unbound-error k334e@id) (void)) (if (not (and (eq? k3354@type '$rtd) (list? (k2e20@binding-value k3352@b)))) (k30e7@syntax-violation '#f '"not a record type" k3342@e) (void)) (k3029@chi-expr (car (k2e20@binding-value k3352@b)) k3343@r k3344@mr))))) (k2e1e@binding-type k3352@b))) (k2e1a@label->binding k3350@lab k3343@r))) (k2e18@id->label k334e@id))) k334a@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3348@t))) (k3007@syntax-dispatch k3348@t '(_ any)))) k3342@e))) (set! k2fa9@record-constructor-descriptor-transformer (lambda (k3356@e k3357@r k3358@mr) ((lambda (k335c@t) ((lambda (k335e@ls/false) (if (and k335e@ls/false (apply (lambda (k3360@id) (k2e02@id? k3360@id)) k335e@ls/false)) (apply (lambda (k3362@id) ((lambda (k3364@lab) ((lambda (k3366@b) ((lambda (k3368@type) ((lambda () (begin (if (not k3364@lab) (k2e22@raise-unbound-error k3362@id) (void)) (if (not (and (eq? k3368@type '$rtd) (list? (k2e20@binding-value k3366@b)))) (k30e7@syntax-violation '#f '"invalid type" k3356@e) (void)) (k3029@chi-expr (cadr (k2e20@binding-value k3366@b)) k3357@r k3358@mr))))) (k2e1e@binding-type k3366@b))) (k2e1a@label->binding k3364@lab k3357@r))) (k2e18@id->label k3362@id))) k335e@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k335c@t))) (k3007@syntax-dispatch k335c@t '(_ any)))) k3356@e))) (set! k2fab@when-macro (lambda (k336a@e) ((lambda (k336c@t) ((lambda (k336e@ls/false) (if k336e@ls/false (apply (lambda (k3370@test k3371@e k3372@e*) (k2fbd@bless (list 'if k3370@test (cons 'begin (cons k3371@e k3372@e*))))) k336e@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k336c@t))) (k3007@syntax-dispatch k336c@t '(_ any any . each-any)))) k336a@e))) (set! k2fad@unless-macro (lambda (k3376@e) ((lambda (k3378@t) ((lambda (k337a@ls/false) (if k337a@ls/false (apply (lambda (k337c@test k337d@e k337e@e*) (k2fbd@bless (list 'if (list 'not k337c@test) (cons 'begin (cons k337d@e k337e@e*))))) k337a@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3378@t))) (k3007@syntax-dispatch k3378@t '(_ any any . each-any)))) k3376@e))) (set! k2faf@if-transformer (lambda (k3382@e k3383@r k3384@mr) ((lambda (k3388@t) ((lambda (k338a@ls/false) (if k338a@ls/false (apply (lambda (k338c@e0 k338d@e1 k338e@e2) (list 'if (k3029@chi-expr k338c@e0 k3383@r k3384@mr) (k3029@chi-expr k338d@e1 k3383@r k3384@mr) (k3029@chi-expr k338e@e2 k3383@r k3384@mr))) k338a@ls/false) ((lambda (k3392@t) ((lambda (k3394@ls/false) (if k3394@ls/false (apply (lambda (k3396@e0 k3397@e1) (list 'if (k3029@chi-expr k3396@e0 k3383@r k3384@mr) (k3029@chi-expr k3397@e1 k3383@r k3384@mr) (k2d6a@k2cda@build-void))) k3394@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3392@t))) (k3007@syntax-dispatch k3392@t '(_ any any)))) k3388@t))) (k3007@syntax-dispatch k3388@t '(_ any any any)))) k3382@e))) (set! k2fb1@and-transformer (lambda (k339a@e k339b@r k339c@mr) ((lambda (k33a0@t) ((lambda (k33a2@ls/false) (if k33a2@ls/false (apply (lambda (k33a4@e*) (cons 'and (k3025@chi-expr* k33a4@e* k339b@r k339c@mr))) k33a2@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k33a0@t))) (k3007@syntax-dispatch k33a0@t '(_ . each-any)))) k339a@e))) (set! k2fb3@or-transformer (lambda (k33a6@e k33a7@r k33a8@mr) ((lambda (k33ac@t) ((lambda (k33ae@ls/false) (if k33ae@ls/false (apply (lambda (k33b0@e*) (cons 'or (k3025@chi-expr* k33b0@e* k33a7@r k33a8@mr))) k33ae@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k33ac@t))) (k3007@syntax-dispatch k33ac@t '(_ . each-any)))) k33a6@e))) (set! k2fb5@case-macro (lambda (k33b2@e) ((lambda (k33b5@build-last k33b7@build-one) (begin (set! k33b5@build-last (lambda (k33dc@cls) ((lambda (k33de@t) ((lambda (k33e0@ls/false) (if k33e0@ls/false (apply (lambda (k33e2@e k33e3@e*) (cons 'begin (cons k33e2@e k33e3@e*))) k33e0@ls/false) ((lambda (k33e6@t) ((lambda (k33e8@ls/false) (if k33e8@ls/false (apply (lambda () (k33b7@build-one k33dc@cls '(if #f #f))) k33e8@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k33e6@t))) (k3007@syntax-dispatch k33e6@t '_))) k33de@t))) (k3007@syntax-dispatch k33de@t '(#(scheme-id else) any . each-any)))) k33dc@cls))) (set! k33b7@build-one (lambda (k33ce@cls k33cf@k) ((lambda (k33d2@t) ((lambda (k33d4@ls/false) (if k33d4@ls/false (apply (lambda (k33d6@d* k33d7@e k33d8@e*) (list 'if (list 'memv 't (list 'quote k33d6@d*)) (cons 'begin (cons k33d7@e k33d8@e*)) k33cf@k)) k33d4@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k33d2@t))) (k3007@syntax-dispatch k33d2@t '(each-any any . each-any)))) k33ce@cls))) ((lambda (k33b8@t) ((lambda (k33ba@ls/false) (if k33ba@ls/false (apply (lambda (k33bc@expr) (k2fbd@bless (cons 'let (cons (list (list 't k33bc@expr)) '((if #f #f)))))) k33ba@ls/false) ((lambda (k33be@t) ((lambda (k33c0@ls/false) (if k33c0@ls/false (apply (lambda (k33c2@expr k33c3@cls k33c4@cls*) (k2fbd@bless (list 'let (list (list 't k33c2@expr)) ((letrec ((k33c8@f (lambda (k33ca@cls k33cb@cls*) (if (null? k33cb@cls*) (k33b5@build-last k33ca@cls) (k33b7@build-one k33ca@cls (k33c8@f (car k33cb@cls*) (cdr k33cb@cls*))))))) k33c8@f) k33c3@cls k33c4@cls*)))) k33c0@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k33be@t))) (k3007@syntax-dispatch k33be@t '(_ any any . each-any)))) k33b8@t))) (k3007@syntax-dispatch k33b8@t '(_ any)))) k33b2@e))) '#f '#f))) (set! k2fb7@quote-transformer (lambda (k33ea@e k33eb@r k33ec@mr) ((lambda (k33f0@t) ((lambda (k33f2@ls/false) (if k33f2@ls/false (apply (lambda (k33f4@datum) (list 'quote (k2e16@stx->datum k33f4@datum))) k33f2@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k33f0@t))) (k3007@syntax-dispatch k33f0@t '(_ any)))) k33ea@e))) (set! k2fb9@case-lambda-transformer (lambda (k33f6@e k33f7@r k33f8@mr) ((lambda (k33fc@t) ((lambda (k33fe@ls/false) (if k33fe@ls/false (apply (lambda (k3400@fmls* k3401@b* k3402@b**) (call-with-values (lambda () (k3031@chi-lambda-clause* k33f6@e k3400@fmls* (map cons k3401@b* k3402@b**) k33f7@r k33f8@mr)) (lambda (k340a@k3407 k340b@k3409) ((lambda (k340e@body* k340f@fmls*) (k2d67@k2ca8@build-case-lambda '#f k340f@fmls* k340e@body*)) k340b@k3409 k340a@k3407)))) k33fe@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k33fc@t))) (k3007@syntax-dispatch k33fc@t '(_ . #(each (any any . each-any)))))) k33f6@e))) (set! k2fbb@lambda-transformer (lambda (k3412@e k3413@r k3414@mr) ((lambda (k3418@t) ((lambda (k341a@ls/false) (if k341a@ls/false (apply (lambda (k341c@fmls k341d@b k341e@b*) (call-with-values (lambda () (k302f@chi-lambda-clause k3412@e k341c@fmls (cons k341d@b k341e@b*) k3413@r k3414@mr)) (lambda (k3426@k3423 k3427@k3425) ((lambda (k342a@body k342b@fmls) (k2d66@k2ca6@build-lambda '#f k342b@fmls k342a@body)) k3427@k3425 k3426@k3423)))) k341a@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3418@t))) (k3007@syntax-dispatch k3418@t '(_ any any . each-any)))) k3412@e))) (set! k2fbd@bless (lambda (k342e@x) (k2dea@mkstx ((letrec ((k3430@f (lambda (k3432@x) (if (k2dce@stx? k3432@x) k3432@x (if (pair? k3432@x) (cons (k3430@f (car k3432@x)) (k3430@f (cdr k3432@x))) (if (symbol? k3432@x) (k2f91@scheme-stx k3432@x) (if (vector? k3432@x) (vector-map k3430@f k3432@x) k3432@x))))))) k3430@f) k342e@x) '() '() '()))) (set! k2fbf@with-syntax-macro (lambda (k3434@e) ((lambda (k3436@t) ((lambda (k3438@ls/false) (if k3438@ls/false (apply (lambda (k343a@pat* k343b@expr* k343c@b k343d@b*) ((lambda (k3442@idn*) (begin (k302d@verify-formals (map car k3442@idn*) k3434@e) ((lambda (k3444@t*) (k2fbd@bless (list 'let (map list k3444@t* k343b@expr*) ((letrec ((k3446@f (lambda (k3448@pat* k3449@t*) (if (null? k3448@pat*) (cons 'begin (cons '#f (cons k343c@b k343d@b*))) (list 'syntax-case (car k3449@t*) '() (list (car k3448@pat*) (k3446@f (cdr k3448@pat*) (cdr k3449@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car k3448@pat*)) (car k3449@t*)))))))) k3446@f) k343a@pat* k3444@t*)))) (k30d5@generate-temporaries k343b@expr*)))) ((letrec ((k344c@f (lambda (k344e@pat*) (if (null? k344e@pat*) '() (call-with-values (lambda () (k3005@convert-pattern (car k344e@pat*) '())) (lambda (k3454@k3451 k3455@k3453) ((lambda (k3458@idn* k3459@pat) (append k3458@idn* (k344c@f (cdr k344e@pat*)))) k3455@k3453 k3454@k3451))))))) k344c@f) k343a@pat*))) k3438@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3436@t))) (k3007@syntax-dispatch k3436@t '(_ #(each (any any)) any . each-any)))) k3434@e))) (set! k2fc1@invalid-fmls-error (lambda (k345c@stx k345d@fmls) ((lambda (k3460@t) ((lambda (k3462@ls/false) (if k3462@ls/false (apply (lambda (k3464@id* k3465@last) ((letrec ((k3468@f (lambda (k346a@id*) (if (null? k346a@id*) (values) (if (not (k2e02@id? (car k346a@id*))) (k30e7@syntax-violation '#f '"not an identifier" k345c@stx (car k346a@id*)) (begin (k3468@f (cdr k346a@id*)) (if (k2e0e@bound-id-member? (car k346a@id*) (cdr k346a@id*)) (k30e7@syntax-violation '#f '"duplicate binding" k345c@stx (car k346a@id*)) (void)))))))) k3468@f) (if (k2e02@id? k3465@last) (cons k3465@last k3464@id*) (if (k2df8@syntax-null? k3465@last) k3464@id* (k30e7@syntax-violation '#f '"not an identifier" k345c@stx k3465@last))))) k3462@ls/false) ((lambda (k346c@t) ((lambda (k346e@ls/false) (if k346e@ls/false (apply (lambda () (k30e7@syntax-violation '#f '"malformed binding form" k345c@stx k345d@fmls)) k346e@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k346c@t))) (k3007@syntax-dispatch k346c@t '_))) k3460@t))) (k3007@syntax-dispatch k3460@t '#(each+ any () any)))) k345d@fmls))) (set! k2fc3@let-macro (lambda (k3470@stx) ((lambda (k3472@t) ((lambda (k3474@ls/false) (if k3474@ls/false (apply (lambda (k3476@lhs* k3477@rhs* k3478@b k3479@b*) (if (k2e0a@valid-bound-ids? k3476@lhs*) (k2fbd@bless (cons (cons 'lambda (cons k3476@lhs* (cons k3478@b k3479@b*))) k3477@rhs*)) (k2fc1@invalid-fmls-error k3470@stx k3476@lhs*))) k3474@ls/false) ((lambda (k347e@t) ((lambda (k3480@ls/false) (if (and k3480@ls/false (apply (lambda (k3482@f k3483@lhs* k3484@rhs* k3485@b k3486@b*) (k2e02@id? k3482@f)) k3480@ls/false)) (apply (lambda (k348c@f k348d@lhs* k348e@rhs* k348f@b k3490@b*) (if (k2e0a@valid-bound-ids? k348d@lhs*) (k2fbd@bless (cons (list 'letrec (list (list k348c@f (cons 'lambda (cons k348d@lhs* (cons k348f@b k3490@b*))))) k348c@f) k348e@rhs*)) (k2fc1@invalid-fmls-error k3470@stx k348d@lhs*))) k3480@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k347e@t))) (k3007@syntax-dispatch k347e@t '(_ any #(each (any any)) any . each-any)))) k3472@t))) (k3007@syntax-dispatch k3472@t '(_ #(each (any any)) any . each-any)))) k3470@stx))) (set! k2fc5@let-values-macro (lambda (k3496@stx) ((lambda (k3499@rename k349b@rename*) (begin (set! k3499@rename (lambda (k34fe@x k34ff@old* k3500@new*) (begin (if (not (k2e02@id? k34fe@x)) (k30e7@syntax-violation '#f '"not an indentifier" k3496@stx k34fe@x) (void)) (if (k2e0e@bound-id-member? k34fe@x k34ff@old*) (k30e7@syntax-violation '#f '"duplicate binding" k3496@stx k34fe@x) (void)) ((lambda (k3504@y) (values k3504@y (cons k34fe@x k34ff@old*) (cons k3504@y k3500@new*))) (gensym (k30ed@syntax->datum k34fe@x)))))) (set! k349b@rename* (lambda (k34ec@x* k34ed@old* k34ee@new*) (if (null? k34ec@x*) (values '() k34ed@old* k34ee@new*) (call-with-values (lambda () (k3499@rename (car k34ec@x*) k34ed@old* k34ee@new*)) (lambda (k34f2@x k34f3@old* k34f4@new*) (call-with-values (lambda () (k349b@rename* (cdr k34ec@x*) k34f3@old* k34f4@new*)) (lambda (k34f8@x* k34f9@old* k34fa@new*) (values (cons k34f2@x k34f8@x*) k34f9@old* k34fa@new*)))))))) ((lambda (k349c@t) ((lambda (k349e@ls/false) (if k349e@ls/false (apply (lambda (k34a0@b k34a1@b*) (cons* (k2fbd@bless 'let) '() k34a0@b k34a1@b*)) k349e@ls/false) ((lambda (k34a4@t) ((lambda (k34a6@ls/false) (if k34a6@ls/false (apply (lambda (k34a8@lhs* k34a9@rhs* k34aa@b k34ab@b*) (k2fbd@bless ((letrec ((k34b0@f (lambda (k34b2@lhs* k34b3@rhs* k34b4@old* k34b5@new*) (if (null? k34b2@lhs*) (cons 'let (cons (map list k34b4@old* k34b5@new*) (cons k34aa@b k34ab@b*))) ((lambda (k34ba@t) ((lambda (k34bc@ls/false) (if k34bc@ls/false (apply (lambda (k34be@x*) (call-with-values (lambda () (k349b@rename* k34be@x* k34b4@old* k34b5@new*)) (lambda (k34c6@k34c1 k34c7@k34c3 k34c8@k34c5) ((lambda (k34cc@new* k34cd@old* k34ce@y*) (list 'call-with-values (list 'lambda '() (car k34b3@rhs*)) (list 'lambda k34ce@y* (k34b0@f (cdr k34b2@lhs*) (cdr k34b3@rhs*) k34cd@old* k34cc@new*)))) k34c8@k34c5 k34c7@k34c3 k34c6@k34c1)))) k34bc@ls/false) ((lambda (k34d2@t) ((lambda (k34d4@ls/false) (if k34d4@ls/false (apply (lambda (k34d6@x* k34d7@x) (call-with-values (lambda () (k3499@rename k34d7@x k34b4@old* k34b5@new*)) (lambda (k34da@y k34db@old* k34dc@new*) (call-with-values (lambda () (k349b@rename* k34d6@x* k34db@old* k34dc@new*)) (lambda (k34e0@y* k34e1@old* k34e2@new*) (list 'call-with-values (list 'lambda '() (car k34b3@rhs*)) (list 'lambda (append k34e0@y* k34da@y) (k34b0@f (cdr k34b2@lhs*) (cdr k34b3@rhs*) k34e1@old* k34e2@new*)))))))) k34d4@ls/false) ((lambda (k34e6@t) ((lambda (k34e8@ls/false) (if k34e8@ls/false (apply (lambda (k34ea@others) (k30e7@syntax-violation '#f '"malformed bindings" k3496@stx k34ea@others)) k34e8@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k34e6@t))) (k3007@syntax-dispatch k34e6@t 'any))) k34d2@t))) (k3007@syntax-dispatch k34d2@t '#(each+ any () any)))) k34ba@t))) (k3007@syntax-dispatch k34ba@t 'each-any))) (car k34b2@lhs*)))))) k34b0@f) k34a8@lhs* k34a9@rhs* '() '()))) k34a6@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k34a4@t))) (k3007@syntax-dispatch k34a4@t '(_ #(each (any any)) any . each-any)))) k349c@t))) (k3007@syntax-dispatch k349c@t '(_ () any . each-any)))) k3496@stx))) '#f '#f))) (set! k2fc7@let*-values-macro (lambda (k3506@stx) ((lambda (k3509@check) (begin (set! k3509@check (lambda (k3538@x*) (if (not (null? k3538@x*)) ((lambda (k353a@x) (begin (if (not (k2e02@id? k353a@x)) (k30e7@syntax-violation '#f '"not an identifier" k3506@stx k353a@x) (void)) (k3509@check (cdr k3538@x*)) (if (k2e0e@bound-id-member? k353a@x (cdr k3538@x*)) (k30e7@syntax-violation '#f '"duplicate identifier" k3506@stx k353a@x) (void)))) (car k3538@x*)) (void)))) ((lambda (k350a@t) ((lambda (k350c@ls/false) (if k350c@ls/false (apply (lambda (k350e@b k350f@b*) (cons* (k2fbd@bless 'let) '() k350e@b k350f@b*)) k350c@ls/false) ((lambda (k3512@t) ((lambda (k3514@ls/false) (if k3514@ls/false (apply (lambda (k3516@lhs* k3517@rhs* k3518@b k3519@b*) (k2fbd@bless ((letrec ((k351e@f (lambda (k3520@lhs* k3521@rhs*) (if (null? k3520@lhs*) (cons 'begin (cons k3518@b k3519@b*)) ((lambda (k3524@t) ((lambda (k3526@ls/false) (if k3526@ls/false (apply (lambda (k3528@x*) (begin (k3509@check k3528@x*) (list 'call-with-values (list 'lambda '() (car k3521@rhs*)) (list 'lambda k3528@x* (k351e@f (cdr k3520@lhs*) (cdr k3521@rhs*)))))) k3526@ls/false) ((lambda (k352a@t) ((lambda (k352c@ls/false) (if k352c@ls/false (apply (lambda (k352e@x* k352f@x) (begin (k3509@check (cons k352f@x k352e@x*)) (list 'call-with-values (list 'lambda '() (car k3521@rhs*)) (list 'lambda (append k352e@x* k352f@x) (k351e@f (cdr k3520@lhs*) (cdr k3521@rhs*)))))) k352c@ls/false) ((lambda (k3532@t) ((lambda (k3534@ls/false) (if k3534@ls/false (apply (lambda (k3536@others) (k30e7@syntax-violation '#f '"malformed bindings" k3506@stx k3536@others)) k3534@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3532@t))) (k3007@syntax-dispatch k3532@t 'any))) k352a@t))) (k3007@syntax-dispatch k352a@t '#(each+ any () any)))) k3524@t))) (k3007@syntax-dispatch k3524@t 'each-any))) (car k3520@lhs*)))))) k351e@f) k3516@lhs* k3517@rhs*))) k3514@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3512@t))) (k3007@syntax-dispatch k3512@t '(_ #(each (any any)) any . each-any)))) k350a@t))) (k3007@syntax-dispatch k350a@t '(_ () any . each-any)))) k3506@stx))) '#f))) (set! k2fc9@trace-lambda-macro (lambda (k353c@stx) ((lambda (k353e@t) ((lambda (k3540@ls/false) (if k3540@ls/false (apply (lambda (k3542@who k3543@fmls k3544@b k3545@b*) (if (k2e0a@valid-bound-ids? k3543@fmls) (k2fbd@bless (list 'make-traced-procedure (list 'quote k3542@who) (cons 'lambda (cons k3543@fmls (cons k3544@b k3545@b*))))) (k2fc1@invalid-fmls-error k353c@stx k3543@fmls))) k3540@ls/false) ((lambda (k354a@t) ((lambda (k354c@ls/false) (if k354c@ls/false (apply (lambda (k354e@who k354f@fmls k3550@last k3551@b k3552@b*) (if (k2e0a@valid-bound-ids? (cons k3550@last k354f@fmls)) (k2fbd@bless (list 'make-traced-procedure (list 'quote k354e@who) (cons 'lambda (cons (append k354f@fmls k3550@last) (cons k3551@b k3552@b*))))) (k2fc1@invalid-fmls-error k353c@stx (append k354f@fmls k3550@last)))) k354c@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k354a@t))) (k3007@syntax-dispatch k354a@t '(_ any #(each+ any () any) any . each-any)))) k353e@t))) (k3007@syntax-dispatch k353e@t '(_ any each-any any . each-any)))) k353c@stx))) (set! k2fcb@trace-define-macro (lambda (k3558@stx) ((lambda (k355a@t) ((lambda (k355c@ls/false) (if k355c@ls/false (apply (lambda (k355e@who k355f@fmls k3560@b k3561@b*) (if (k2e0a@valid-bound-ids? k355f@fmls) (k2fbd@bless (list 'define k355e@who (list 'make-traced-procedure (list 'quote k355e@who) (cons 'lambda (cons k355f@fmls (cons k3560@b k3561@b*)))))) (k2fc1@invalid-fmls-error k3558@stx k355f@fmls))) k355c@ls/false) ((lambda (k3566@t) ((lambda (k3568@ls/false) (if k3568@ls/false (apply (lambda (k356a@who k356b@fmls k356c@last k356d@b k356e@b*) (if (k2e0a@valid-bound-ids? (cons k356c@last k356b@fmls)) (k2fbd@bless (list 'define k356a@who (list 'make-traced-procedure (list 'quote k356a@who) (cons 'lambda (cons (append k356b@fmls k356c@last) (cons k356d@b k356e@b*)))))) (k2fc1@invalid-fmls-error k3558@stx (append k356b@fmls k356c@last)))) k3568@ls/false) ((lambda (k3574@t) ((lambda (k3576@ls/false) (if k3576@ls/false (apply (lambda (k3578@who k3579@expr) (if (k2e02@id? k3578@who) (k2fbd@bless (list 'define k3578@who (list 'let (list (list 'v k3579@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote k3578@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (k30e7@syntax-violation '#f '"invalid name" k3558@stx))) k3576@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3574@t))) (k3007@syntax-dispatch k3574@t '(_ any any)))) k3566@t))) (k3007@syntax-dispatch k3566@t '(_ (any . #(each+ any () any)) any . each-any)))) k355a@t))) (k3007@syntax-dispatch k355a@t '(_ (any . each-any) any . each-any)))) k3558@stx))) (set! k2fcd@trace-define-syntax-macro (lambda (k357c@stx) ((lambda (k357e@t) ((lambda (k3580@ls/false) (if k3580@ls/false (apply (lambda (k3582@who k3583@expr) (if (k2e02@id? k3582@who) (k2fbd@bless (list 'define-syntax k3582@who (list 'make-traced-macro (list 'quote k3582@who) k3583@expr))) (k30e7@syntax-violation '#f '"invalid name" k357c@stx))) k3580@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k357e@t))) (k3007@syntax-dispatch k357e@t '(_ any any)))) k357c@stx))) (set! k2fcf@trace-let/rec-syntax (lambda (k3586@who) (lambda (k3588@stx) ((lambda (k358a@t) ((lambda (k358c@ls/false) (if k358c@ls/false (apply (lambda (k358e@lhs* k358f@rhs* k3590@b k3591@b*) (if (k2e0a@valid-bound-ids? k358e@lhs*) ((lambda (k3596@rhs*) (k2fbd@bless (cons k3586@who (cons (map list k358e@lhs* k3596@rhs*) (cons k3590@b k3591@b*))))) (map (lambda (k3598@lhs k3599@rhs) (list 'make-traced-macro (list 'quote k3598@lhs) k3599@rhs)) k358e@lhs* k358f@rhs*)) (k2fc1@invalid-fmls-error k3588@stx k358e@lhs*))) k358c@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k358a@t))) (k3007@syntax-dispatch k358a@t '(_ #(each (any any)) any . each-any)))) k3588@stx)))) (set! k2fd1@trace-let-syntax-macro (k2fcf@trace-let/rec-syntax 'let-syntax)) (set! k2fd3@trace-letrec-syntax-macro (k2fcf@trace-let/rec-syntax 'letrec-syntax)) (set! k2fd5@guard-macro (lambda (k359c@x) ((lambda (k359f@gen-clauses) (begin (set! k359f@gen-clauses (lambda (k35b6@con k35b7@outerk k35b8@clause*) ((lambda (k35bd@f k35bf@f*) (begin (set! k35bd@f (lambda (k35f6@x k35f7@k) ((lambda (k35fa@t) ((lambda (k35fc@ls/false) (if k35fc@ls/false (apply (lambda (k35fe@e k35ff@p) ((lambda (k3602@t) (list 'let (list (list k3602@t k35fe@e)) (list 'if k3602@t (list k35ff@p k3602@t) k35f7@k))) (gensym))) k35fc@ls/false) ((lambda (k3604@t) ((lambda (k3606@ls/false) (if k3606@ls/false (apply (lambda (k3608@e) ((lambda (k360a@t) (list 'let (list (list k360a@t k3608@e)) (list 'if k360a@t k360a@t k35f7@k))) (gensym))) k3606@ls/false) ((lambda (k360c@t) ((lambda (k360e@ls/false) (if k360e@ls/false (apply (lambda (k3610@e k3611@v k3612@v*) (list 'if k3610@e (cons 'begin (cons k3611@v k3612@v*)) k35f7@k)) k360e@ls/false) ((lambda (k3616@t) ((lambda (k3618@ls/false) (if k3618@ls/false (apply (lambda () (k30e7@syntax-violation '#f '"invalid guard clause" k35f6@x)) k3618@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3616@t))) (k3007@syntax-dispatch k3616@t '_))) k360c@t))) (k3007@syntax-dispatch k360c@t '(any any . each-any)))) k3604@t))) (k3007@syntax-dispatch k3604@t '(any)))) k35fa@t))) (k3007@syntax-dispatch k35fa@t '(any #(scheme-id =>) any)))) k35f6@x))) (set! k35bf@f* (lambda (k35cc@x*) ((lambda (k35ce@t) ((lambda (k35d0@ls/false) (if k35d0@ls/false (apply (lambda () ((lambda (k35d2@g) (values (list k35d2@g (list 'lambda '() (list 'raise-continuable k35b6@con))) k35d2@g)) (gensym))) k35d0@ls/false) ((lambda (k35d4@t) ((lambda (k35d6@ls/false) (if k35d6@ls/false (apply (lambda (k35d8@e k35d9@e*) (values (cons 'begin (cons k35d8@e k35d9@e*)) '#f)) k35d6@ls/false) ((lambda (k35dc@t) ((lambda (k35de@ls/false) (if k35de@ls/false (apply (lambda (k35e0@cls k35e1@cls*) (call-with-values (lambda () (k35bf@f* k35e1@cls*)) (lambda (k35e8@k35e5 k35e9@k35e7) ((lambda (k35ec@g k35ed@e) (values (k35bd@f k35e0@cls k35ed@e) k35ec@g)) k35e9@k35e7 k35e8@k35e5)))) k35de@ls/false) ((lambda (k35f0@t) ((lambda (k35f2@ls/false) (if k35f2@ls/false (apply (lambda (k35f4@others) (k30e7@syntax-violation '#f '"invalid guard clause" k35f4@others)) k35f2@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k35f0@t))) (k3007@syntax-dispatch k35f0@t 'any))) k35dc@t))) (k3007@syntax-dispatch k35dc@t '(any . any)))) k35d4@t))) (k3007@syntax-dispatch k35d4@t '((#(scheme-id else) any . each-any))))) k35ce@t))) (k3007@syntax-dispatch k35ce@t '()))) k35cc@x*))) (call-with-values (lambda () (k35bf@f* k35b8@clause*)) (lambda (k35c4@k35c1 k35c5@k35c3) ((lambda (k35c8@raisek k35c9@code) (if k35c8@raisek (list (list 'call/cc (list 'lambda (list k35c8@raisek) (list k35b7@outerk (list 'lambda '() k35c9@code))))) (list k35b7@outerk (list 'lambda '() k35c9@code)))) k35c5@k35c3 k35c4@k35c1))))) '#f '#f))) ((lambda (k35a0@t) ((lambda (k35a2@ls/false) (if (and k35a2@ls/false (apply (lambda (k35a4@con k35a5@clause* k35a6@b k35a7@b*) (k2e02@id? k35a4@con)) k35a2@ls/false)) (apply (lambda (k35ac@con k35ad@clause* k35ae@b k35af@b*) ((lambda (k35b4@outerk) (k2fbd@bless (list (list 'call/cc (list 'lambda (list k35b4@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list k35ac@con) (k359f@gen-clauses k35ac@con k35b4@outerk k35ad@clause*)) (cons 'lambda (cons '() (cons k35ae@b k35af@b*)))))))))) (gensym))) k35a2@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k35a0@t))) (k3007@syntax-dispatch k35a0@t '(_ (any . each-any) any . each-any)))) k359c@x))) '#f))) (set! k2fd7@define-enumeration-macro (lambda (k361a@stx) ((lambda (k361d@set? k361f@remove-dups) (begin (set! k361d@set? (lambda (k3636@x) (or (null? k3636@x) (and (not (memq (car k3636@x) (cdr k3636@x))) (k361d@set? (cdr k3636@x)))))) (set! k361f@remove-dups (lambda (k3634@ls) (if (null? k3634@ls) '() (cons (car k3634@ls) (k361f@remove-dups (remq (car k3634@ls) (cdr k3634@ls))))))) ((lambda (k3620@t) ((lambda (k3622@ls/false) (if (and k3622@ls/false (apply (lambda (k3624@name k3625@id* k3626@maker) (and (k2e02@id? k3624@name) (k2e02@id? k3626@maker) (for-all k2e02@id? k3625@id*))) k3622@ls/false)) (apply (lambda (k362a@name k362b@id* k362c@maker) ((lambda (k3630@name* k3631@mk) (k2fbd@bless (list 'begin (list 'define k3631@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote k3630@name*)))) (list 'define-syntax k362a@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote k3630@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote k362a@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax k362c@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote k362c@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote k3630@name*)) (cons 'syntax-violation (cons (list 'quote k362c@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons k3631@mk '('(n* ...)))))))))))) (k361f@remove-dups (k30ed@syntax->datum k362b@id*)) (gensym))) k3622@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3620@t))) (k3007@syntax-dispatch k3620@t '(_ any each-any any)))) k361a@stx))) '#f '#f))) (set! k2fd9@time-macro (lambda (k3638@stx) ((lambda (k363a@t) ((lambda (k363c@ls/false) (if k363c@ls/false (apply (lambda (k363e@expr) (k2fbd@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() k363e@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) k363c@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k363a@t))) (k3007@syntax-dispatch k363a@t '(_ any)))) k3638@stx))) (set! k2fdb@delay-macro (lambda (k3640@stx) ((lambda (k3642@t) ((lambda (k3644@ls/false) (if k3644@ls/false (apply (lambda (k3646@expr) (k2fbd@bless (list 'make-promise (list 'lambda '() k3646@expr)))) k3644@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3642@t))) (k3007@syntax-dispatch k3642@t '(_ any)))) k3640@stx))) (set! k2fdd@assert-macro (lambda (k3648@stx) ((lambda (k364a@t) ((lambda (k364c@ls/false) (if k364c@ls/false (apply (lambda (k364e@expr) ((lambda (k3650@pos) (k2fbd@bless (list 'unless k364e@expr (list 'assertion-error (list 'quote k364e@expr) (list 'quote k3650@pos))))) (or (k30df@expression-position k3648@stx) (k30df@expression-position k364e@expr)))) k364c@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k364a@t))) (k3007@syntax-dispatch k364a@t '(_ any)))) k3648@stx))) (set! k2fdf@endianness-macro (lambda (k3652@stx) ((lambda (k3654@t) ((lambda (k3656@ls/false) (if k3656@ls/false (apply (lambda (k3658@e) ((lambda (k365a@t) (if (memv k365a@t '(little)) (k2fbd@bless ''little) (if (memv k365a@t '(big)) (k2fbd@bless ''big) (k30e7@syntax-violation '#f '"endianness must be big or little" k3652@stx)))) (k30ed@syntax->datum k3658@e))) k3656@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3654@t))) (k3007@syntax-dispatch k3654@t '(_ any)))) k3652@stx))) (set! k2fe1@identifier-syntax-macro (lambda (k365c@stx) ((lambda (k365e@t) ((lambda (k3660@ls/false) (if k3660@ls/false (apply (lambda (k3662@expr) (k2fbd@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax k3662@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax k3662@expr) '((syntax (e* ...)))))))))) k3660@ls/false) ((lambda (k3664@t) ((lambda (k3666@ls/false) (if (and k3666@ls/false (apply (lambda (k3668@id1 k3669@expr1 k366a@id2 k366b@expr2 k366c@expr3) (and (k2e02@id? k3668@id1) (k2e02@id? k366a@id2) (k2e02@id? k366b@expr2))) k3666@ls/false)) (apply (lambda (k3672@id1 k3673@expr1 k3674@id2 k3675@expr2 k3676@expr3) (k2fbd@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax k3673@expr1)) (list (list 'set! 'id k3675@expr2) (list 'syntax k3676@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons k3673@expr1 '(e* ...))))))))) k3666@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3664@t))) (k3007@syntax-dispatch k3664@t '(_ (any any) ((#(scheme-id set!) any any) any))))) k365e@t))) (k3007@syntax-dispatch k365e@t '(_ any)))) k365c@stx))) (set! k2fe3@do-macro (lambda (k367c@stx) ((lambda (k367f@bind) (begin (set! k367f@bind (lambda (k3696@x) ((lambda (k3698@t) ((lambda (k369a@ls/false) (if k369a@ls/false (apply (lambda (k369c@x k369d@init) (list k369c@x k369d@init k369c@x)) k369a@ls/false) ((lambda (k36a0@t) ((lambda (k36a2@ls/false) (if k36a2@ls/false (apply (lambda (k36a4@x k36a5@init k36a6@step) (list k36a4@x k36a5@init k36a6@step)) k36a2@ls/false) ((lambda (k36aa@t) ((lambda (k36ac@ls/false) (if k36ac@ls/false (apply (lambda () (k30e7@syntax-violation '#f '"invalid binding" k367c@stx)) k36ac@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k36aa@t))) (k3007@syntax-dispatch k36aa@t '_))) k36a0@t))) (k3007@syntax-dispatch k36a0@t '(any any any)))) k3698@t))) (k3007@syntax-dispatch k3698@t '(any any)))) k3696@x))) ((lambda (k3680@t) ((lambda (k3682@ls/false) (if k3682@ls/false (apply (lambda (k3684@binding* k3685@test k3686@expr* k3687@command*) ((lambda (k368c@t) ((lambda (k368e@ls/false) (if k368e@ls/false (apply (lambda (k3690@x* k3691@init* k3692@step*) (if (k2e0a@valid-bound-ids? k3690@x*) (k2fbd@bless (list 'letrec (list (list 'loop (list 'lambda k3690@x* (list 'if k3685@test (cons 'begin (cons '(if #f #f) k3686@expr*)) (cons 'begin (append k3687@command* (list (cons 'loop k3692@step*)))))))) (cons 'loop k3691@init*))) (k30e7@syntax-violation '#f '"invalid bindings" k367c@stx))) k368e@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k368c@t))) (k3007@syntax-dispatch k368c@t '#(each (any any any))))) (map k367f@bind k3684@binding*))) k3682@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3680@t))) (k3007@syntax-dispatch k3680@t '(_ each-any (any . each-any) . each-any)))) k367c@stx))) '#f))) (set! k2fe5@let*-macro (lambda (k36ae@stx) ((lambda (k36b0@t) ((lambda (k36b2@ls/false) (if (and k36b2@ls/false (apply (lambda (k36b4@lhs* k36b5@rhs* k36b6@b k36b7@b*) (for-all k2e02@id? k36b4@lhs*)) k36b2@ls/false)) (apply (lambda (k36bc@lhs* k36bd@rhs* k36be@b k36bf@b*) (k2fbd@bless ((letrec ((k36c4@f (lambda (k36c6@x*) (if (null? k36c6@x*) (cons 'let (cons '() (cons k36be@b k36bf@b*))) (list 'let (list (car k36c6@x*)) (k36c4@f (cdr k36c6@x*))))))) k36c4@f) (map list k36bc@lhs* k36bd@rhs*)))) k36b2@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k36b0@t))) (k3007@syntax-dispatch k36b0@t '(_ #(each (any any)) any . each-any)))) k36ae@stx))) (set! k2fe7@or-macro (lambda (k36c8@stx) ((lambda (k36ca@t) ((lambda (k36cc@ls/false) (if k36cc@ls/false (apply (lambda () '#f) k36cc@ls/false) ((lambda (k36ce@t) ((lambda (k36d0@ls/false) (if k36d0@ls/false (apply (lambda (k36d2@e k36d3@e*) (k2fbd@bless ((letrec ((k36d6@f (lambda (k36d8@e k36d9@e*) (if (null? k36d9@e*) (list 'begin '#f k36d8@e) (list 'let (list (list 't k36d8@e)) (list 'if 't 't (k36d6@f (car k36d9@e*) (cdr k36d9@e*)))))))) k36d6@f) k36d2@e k36d3@e*))) k36d0@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k36ce@t))) (k3007@syntax-dispatch k36ce@t '(_ any . each-any)))) k36ca@t))) (k3007@syntax-dispatch k36ca@t '(_)))) k36c8@stx))) (set! k2fe9@and-macro (lambda (k36dc@stx) ((lambda (k36de@t) ((lambda (k36e0@ls/false) (if k36e0@ls/false (apply (lambda () '#t) k36e0@ls/false) ((lambda (k36e2@t) ((lambda (k36e4@ls/false) (if k36e4@ls/false (apply (lambda (k36e6@e k36e7@e*) (k2fbd@bless ((letrec ((k36ea@f (lambda (k36ec@e k36ed@e*) (if (null? k36ed@e*) (list 'begin '#f k36ec@e) (cons 'if (cons k36ec@e (cons (k36ea@f (car k36ed@e*) (cdr k36ed@e*)) '(#f)))))))) k36ea@f) k36e6@e k36e7@e*))) k36e4@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k36e2@t))) (k3007@syntax-dispatch k36e2@t '(_ any . each-any)))) k36de@t))) (k3007@syntax-dispatch k36de@t '(_)))) k36dc@stx))) (set! k2feb@cond-macro (lambda (k36f0@stx) ((lambda (k36f2@t) ((lambda (k36f4@ls/false) (if k36f4@ls/false (apply (lambda (k36f6@cls k36f7@cls*) (k2fbd@bless ((letrec ((k36fa@f (lambda (k36fc@cls k36fd@cls*) (if (null? k36fd@cls*) ((lambda (k3700@t) ((lambda (k3702@ls/false) (if k3702@ls/false (apply (lambda (k3704@e k3705@e*) (cons 'begin (cons k3704@e k3705@e*))) k3702@ls/false) ((lambda (k3708@t) ((lambda (k370a@ls/false) (if k370a@ls/false (apply (lambda (k370c@e k370d@p) (list 'let (list (list 't k370c@e)) (list 'if 't (cons k370d@p '(t))))) k370a@ls/false) ((lambda (k3710@t) ((lambda (k3712@ls/false) (if k3712@ls/false (apply (lambda (k3714@e) (cons 'or (cons k3714@e '((if #f #f))))) k3712@ls/false) ((lambda (k3716@t) ((lambda (k3718@ls/false) (if k3718@ls/false (apply (lambda (k371a@e k371b@e*) (list 'if k371a@e (cons 'begin k371b@e*))) k3718@ls/false) ((lambda (k371e@t) ((lambda (k3720@ls/false) (if k3720@ls/false (apply (lambda () (k30e7@syntax-violation '#f '"invalid last clause" k36f0@stx)) k3720@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k371e@t))) (k3007@syntax-dispatch k371e@t '_))) k3716@t))) (k3007@syntax-dispatch k3716@t '(any . each-any)))) k3710@t))) (k3007@syntax-dispatch k3710@t '(any)))) k3708@t))) (k3007@syntax-dispatch k3708@t '(any #(scheme-id =>) any)))) k3700@t))) (k3007@syntax-dispatch k3700@t '(#(scheme-id else) any . each-any)))) k36fc@cls) ((lambda (k3722@t) ((lambda (k3724@ls/false) (if k3724@ls/false (apply (lambda (k3726@e k3727@e*) (k30e7@syntax-violation '#f '"incorrect position of keyword else" k36f0@stx)) k3724@ls/false) ((lambda (k372a@t) ((lambda (k372c@ls/false) (if k372c@ls/false (apply (lambda (k372e@e k372f@p) (list 'let (list (list 't k372e@e)) (list 'if 't (cons k372f@p '(t)) (k36fa@f (car k36fd@cls*) (cdr k36fd@cls*))))) k372c@ls/false) ((lambda (k3732@t) ((lambda (k3734@ls/false) (if k3734@ls/false (apply (lambda (k3736@e) (list 'or k3736@e (k36fa@f (car k36fd@cls*) (cdr k36fd@cls*)))) k3734@ls/false) ((lambda (k3738@t) ((lambda (k373a@ls/false) (if k373a@ls/false (apply (lambda (k373c@e k373d@e*) (list 'if k373c@e (cons 'begin k373d@e*) (k36fa@f (car k36fd@cls*) (cdr k36fd@cls*)))) k373a@ls/false) ((lambda (k3740@t) ((lambda (k3742@ls/false) (if k3742@ls/false (apply (lambda () (k30e7@syntax-violation '#f '"invalid last clause" k36f0@stx)) k3742@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3740@t))) (k3007@syntax-dispatch k3740@t '_))) k3738@t))) (k3007@syntax-dispatch k3738@t '(any . each-any)))) k3732@t))) (k3007@syntax-dispatch k3732@t '(any)))) k372a@t))) (k3007@syntax-dispatch k372a@t '(any #(scheme-id =>) any)))) k3722@t))) (k3007@syntax-dispatch k3722@t '(#(scheme-id else) any . each-any)))) k36fc@cls))))) k36fa@f) k36f6@cls k36f7@cls*))) k36f4@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k36f2@t))) (k3007@syntax-dispatch k36f2@t '(_ any . each-any)))) k36f0@stx))) (set! k2fed@do-include (lambda (k3744@stx k3745@id k3746@filename) ((lambda (k374a@filename) (begin (if (not (and (string? k374a@filename) (k2e02@id? k3745@id))) (k30e7@syntax-violation '#f '"invalid syntax" k3744@stx) (void)) (cons (k2fbd@bless 'begin) (with-input-from-file k374a@filename (lambda () ((letrec ((k374c@f (lambda (k374e@ls) ((lambda (k3750@x) (if (eof-object? k3750@x) (reverse k374e@ls) (k374c@f (cons (k2de2@datum->stx k3745@id k3750@x) k374e@ls)))) (k2955@k2844@read-annotated))))) k374c@f) '())))))) (k2e16@stx->datum k3746@filename)))) (set! k2fef@include-macro (lambda (k3752@e) ((lambda (k3754@t) ((lambda (k3756@ls/false) (if k3756@ls/false (apply (lambda (k3758@id k3759@filename) (k2fed@do-include k3752@e k3758@id k3759@filename)) k3756@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3754@t))) (k3007@syntax-dispatch k3754@t '(any any)))) k3752@e))) (set! k2ff1@include-into-macro (lambda (k375c@e) ((lambda (k375e@t) ((lambda (k3760@ls/false) (if k3760@ls/false (apply (lambda (k3762@id k3763@filename) (k2fed@do-include k375c@e k3762@id k3763@filename)) k3760@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k375e@t))) (k3007@syntax-dispatch k375e@t '(_ any any)))) k375c@e))) (set! k2ff3@syntax-rules-macro (lambda (k3766@e) ((lambda (k3768@t) ((lambda (k376a@ls/false) (if k376a@ls/false (apply (lambda (k376c@lits k376d@pat* k376e@tmp*) (begin (k300d@verify-literals k376c@lits k3766@e) (k2fbd@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons k376c@lits (map (lambda (k3772@pat k3773@tmp) ((lambda (k3776@t) ((lambda (k3778@ls/false) (if k3778@ls/false (apply (lambda (k377a@rest) (list (cons 'g k377a@rest) (list 'syntax k3773@tmp))) k3778@ls/false) ((lambda (k377c@t) ((lambda (k377e@ls/false) (if k377e@ls/false (apply (lambda () (k30e7@syntax-violation '#f '"invalid syntax-rules pattern" k3766@e k3772@pat)) k377e@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k377c@t))) (k3007@syntax-dispatch k377c@t '_))) k3776@t))) (k3007@syntax-dispatch k3776@t '(_ . any)))) k3772@pat)) k376d@pat* k376e@tmp*)))))))) k376a@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3768@t))) (k3007@syntax-dispatch k3768@t '(_ each-any . #(each (any any)))))) k3766@e))) (set! k2ff5@quasiquote-macro ((lambda () ((lambda (k3781@datum k379d@quasicons* k379f@quasicons k37a1@quasiappend k37a3@quasivector k37a5@vquasi k37a7@quasi) (begin (set! k3781@datum (lambda (k3882@x) (list (k2f91@scheme-stx 'quote) (k2dea@mkstx k3882@x '() '() '())))) (set! k379d@quasicons* (lambda (k387a@x k387b@y) ((letrec ((k387e@f (lambda (k3880@x) (if (null? k3880@x) k387b@y (k379f@quasicons (car k3880@x) (k387e@f (cdr k3880@x))))))) k387e@f) k387a@x))) (set! k379f@quasicons (lambda (k3854@x k3855@y) ((lambda (k3858@t) ((lambda (k385a@ls/false) (if k385a@ls/false (apply (lambda (k385c@dy) ((lambda (k385e@t) ((lambda (k3860@ls/false) (if k3860@ls/false (apply (lambda (k3862@dx) (list (k2f91@scheme-stx 'quote) (cons k3862@dx k385c@dy))) k3860@ls/false) ((lambda (k3864@t) ((lambda (k3866@ls/false) (if k3866@ls/false (apply (lambda () ((lambda (k3868@t) ((lambda (k386a@ls/false) (if k386a@ls/false (apply (lambda () (list (k2f91@scheme-stx 'list) k3854@x)) k386a@ls/false) ((lambda (k386c@t) ((lambda (k386e@ls/false) (if k386e@ls/false (apply (lambda () (list (k2f91@scheme-stx 'cons) k3854@x k3855@y)) k386e@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k386c@t))) (k3007@syntax-dispatch k386c@t '_))) k3868@t))) (k3007@syntax-dispatch k3868@t '()))) k385c@dy)) k3866@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3864@t))) (k3007@syntax-dispatch k3864@t '_))) k385e@t))) (k3007@syntax-dispatch k385e@t '(#(scheme-id quote) any)))) k3854@x)) k385a@ls/false) ((lambda (k3870@t) ((lambda (k3872@ls/false) (if k3872@ls/false (apply (lambda (k3874@stuff) (cons* (k2f91@scheme-stx 'list) k3854@x k3874@stuff)) k3872@ls/false) ((lambda (k3876@t) ((lambda (k3878@ls/false) (if k3878@ls/false (apply (lambda () (list (k2f91@scheme-stx 'cons) k3854@x k3855@y)) k3878@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3876@t))) (k3007@syntax-dispatch k3876@t '_))) k3870@t))) (k3007@syntax-dispatch k3870@t '(#(scheme-id list) . each-any)))) k3858@t))) (k3007@syntax-dispatch k3858@t '(#(scheme-id quote) any)))) k3855@y))) (set! k37a1@quasiappend (lambda (k383a@x k383b@y) ((lambda (k383e@ls) (if (null? k383e@ls) (list (k2f91@scheme-stx 'quote) '()) (if (null? (cdr k383e@ls)) (car k383e@ls) (cons* (k2f91@scheme-stx 'append) k383e@ls)))) ((letrec ((k3840@f (lambda (k3842@x) (if (null? k3842@x) ((lambda (k3844@t) ((lambda (k3846@ls/false) (if k3846@ls/false (apply (lambda () '()) k3846@ls/false) ((lambda (k3848@t) ((lambda (k384a@ls/false) (if k384a@ls/false (apply (lambda () (list k383b@y)) k384a@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3848@t))) (k3007@syntax-dispatch k3848@t '_))) k3844@t))) (k3007@syntax-dispatch k3844@t '(#(scheme-id quote) ())))) k383b@y) ((lambda (k384c@t) ((lambda (k384e@ls/false) (if k384e@ls/false (apply (lambda () (k3840@f (cdr k3842@x))) k384e@ls/false) ((lambda (k3850@t) ((lambda (k3852@ls/false) (if k3852@ls/false (apply (lambda () (cons (car k3842@x) (k3840@f (cdr k3842@x)))) k3852@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3850@t))) (k3007@syntax-dispatch k3850@t '_))) k384c@t))) (k3007@syntax-dispatch k384c@t '(#(scheme-id quote) ())))) (car k3842@x)))))) k3840@f) k383a@x)))) (set! k37a3@quasivector (lambda (k3808@x) ((lambda (k380a@pat-x) ((lambda (k380c@t) ((lambda (k380e@ls/false) (if k380e@ls/false (apply (lambda (k3810@x*) (list (k2f91@scheme-stx 'quote) (list->vector k3810@x*))) k380e@ls/false) ((lambda (k3812@t) ((lambda (k3814@ls/false) (if k3814@ls/false (apply (lambda () ((letrec ((k3816@f (lambda (k3818@x k3819@k) ((lambda (k381c@t) ((lambda (k381e@ls/false) (if k381e@ls/false (apply (lambda (k3820@x*) (k3819@k (map (lambda (k3822@x) (list (k2f91@scheme-stx 'quote) k3822@x)) k3820@x*))) k381e@ls/false) ((lambda (k3824@t) ((lambda (k3826@ls/false) (if k3826@ls/false (apply (lambda (k3828@x*) (k3819@k k3828@x*)) k3826@ls/false) ((lambda (k382a@t) ((lambda (k382c@ls/false) (if k382c@ls/false (apply (lambda (k382e@x k382f@y) (k3816@f k382f@y (lambda (k3832@ls) (k3819@k (cons k382e@x k3832@ls))))) k382c@ls/false) ((lambda (k3834@t) ((lambda (k3836@ls/false) (if k3836@ls/false (apply (lambda () (list (k2f91@scheme-stx 'list->vector) k380a@pat-x)) k3836@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3834@t))) (k3007@syntax-dispatch k3834@t '_))) k382a@t))) (k3007@syntax-dispatch k382a@t '(#(scheme-id cons) any any)))) k3824@t))) (k3007@syntax-dispatch k3824@t '(#(scheme-id list) . each-any)))) k381c@t))) (k3007@syntax-dispatch k381c@t '(#(scheme-id quote) each-any)))) k3818@x)))) k3816@f) k3808@x (lambda (k3838@ls) (cons* (k2f91@scheme-stx 'vector) k3838@ls)))) k3814@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3812@t))) (k3007@syntax-dispatch k3812@t '_))) k380c@t))) (k3007@syntax-dispatch k380c@t '(#(scheme-id quote) each-any)))) k380a@pat-x)) k3808@x))) (set! k37a5@vquasi (lambda (k37e6@p k37e7@lev) ((lambda (k37ea@t) ((lambda (k37ec@ls/false) (if k37ec@ls/false (apply (lambda (k37ee@p k37ef@q) ((lambda (k37f2@t) ((lambda (k37f4@ls/false) (if k37f4@ls/false (apply (lambda (k37f6@p) (if (= k37e7@lev '0) (k379d@quasicons* k37f6@p (k37a5@vquasi k37ef@q k37e7@lev)) (k379f@quasicons (k379f@quasicons (k3781@datum 'unquote) (k37a7@quasi k37f6@p (- k37e7@lev '1))) (k37a5@vquasi k37ef@q k37e7@lev)))) k37f4@ls/false) ((lambda (k37f8@t) ((lambda (k37fa@ls/false) (if k37fa@ls/false (apply (lambda (k37fc@p) (if (= k37e7@lev '0) (k37a1@quasiappend k37fc@p (k37a5@vquasi k37ef@q k37e7@lev)) (k379f@quasicons (k379f@quasicons (k3781@datum 'unquote-splicing) (k37a7@quasi k37fc@p (- k37e7@lev '1))) (k37a5@vquasi k37ef@q k37e7@lev)))) k37fa@ls/false) ((lambda (k37fe@t) ((lambda (k3800@ls/false) (if k3800@ls/false (apply (lambda (k3802@p) (k379f@quasicons (k37a7@quasi k3802@p k37e7@lev) (k37a5@vquasi k37ef@q k37e7@lev))) k3800@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k37fe@t))) (k3007@syntax-dispatch k37fe@t 'any))) k37f8@t))) (k3007@syntax-dispatch k37f8@t '(#(scheme-id unquote-splicing) . each-any)))) k37f2@t))) (k3007@syntax-dispatch k37f2@t '(#(scheme-id unquote) . each-any)))) k37ee@p)) k37ec@ls/false) ((lambda (k3804@t) ((lambda (k3806@ls/false) (if k3806@ls/false (apply (lambda () (list (k2f91@scheme-stx 'quote) '())) k3806@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3804@t))) (k3007@syntax-dispatch k3804@t '()))) k37ea@t))) (k3007@syntax-dispatch k37ea@t '(any . any)))) k37e6@p))) (set! k37a7@quasi (lambda (k37b0@p k37b1@lev) ((lambda (k37b4@t) ((lambda (k37b6@ls/false) (if k37b6@ls/false (apply (lambda (k37b8@p) (if (= k37b1@lev '0) k37b8@p (k379f@quasicons (k3781@datum 'unquote) (k37a7@quasi (list k37b8@p) (- k37b1@lev '1))))) k37b6@ls/false) ((lambda (k37ba@t) ((lambda (k37bc@ls/false) (if k37bc@ls/false (apply (lambda (k37be@p k37bf@q) (if (= k37b1@lev '0) (k379d@quasicons* k37be@p (k37a7@quasi k37bf@q k37b1@lev)) (k379f@quasicons (k379f@quasicons (k3781@datum 'unquote) (k37a7@quasi k37be@p (- k37b1@lev '1))) (k37a7@quasi k37bf@q k37b1@lev)))) k37bc@ls/false) ((lambda (k37c2@t) ((lambda (k37c4@ls/false) (if k37c4@ls/false (apply (lambda (k37c6@p k37c7@q) (if (= k37b1@lev '0) (k37a1@quasiappend k37c6@p (k37a7@quasi k37c7@q k37b1@lev)) (k379f@quasicons (k379f@quasicons (k3781@datum 'unquote-splicing) (k37a7@quasi k37c6@p (- k37b1@lev '1))) (k37a7@quasi k37c7@q k37b1@lev)))) k37c4@ls/false) ((lambda (k37ca@t) ((lambda (k37cc@ls/false) (if k37cc@ls/false (apply (lambda (k37ce@p) (k379f@quasicons (k3781@datum 'quasiquote) (k37a7@quasi (list k37ce@p) (+ k37b1@lev '1)))) k37cc@ls/false) ((lambda (k37d0@t) ((lambda (k37d2@ls/false) (if k37d2@ls/false (apply (lambda (k37d4@p k37d5@q) (k379f@quasicons (k37a7@quasi k37d4@p k37b1@lev) (k37a7@quasi k37d5@q k37b1@lev))) k37d2@ls/false) ((lambda (k37d8@t) ((lambda (k37da@ls/false) (if (and k37da@ls/false (apply (lambda (k37dc@x) (not (k2dce@stx? k37dc@x))) k37da@ls/false)) (apply (lambda (k37de@x) (k37a3@quasivector (k37a5@vquasi k37de@x k37b1@lev))) k37da@ls/false) ((lambda (k37e0@t) ((lambda (k37e2@ls/false) (if k37e2@ls/false (apply (lambda (k37e4@p) (list (k2f91@scheme-stx 'quote) k37e4@p)) k37e2@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k37e0@t))) (k3007@syntax-dispatch k37e0@t 'any))) k37d8@t))) (k3007@syntax-dispatch k37d8@t '#(vector each-any)))) k37d0@t))) (k3007@syntax-dispatch k37d0@t '(any . any)))) k37ca@t))) (k3007@syntax-dispatch k37ca@t '(#(scheme-id quasiquote) any)))) k37c2@t))) (k3007@syntax-dispatch k37c2@t '((#(scheme-id unquote-splicing) . each-any) . any)))) k37ba@t))) (k3007@syntax-dispatch k37ba@t '((#(scheme-id unquote) . each-any) . any)))) k37b4@t))) (k3007@syntax-dispatch k37b4@t '(#(scheme-id unquote) any)))) k37b0@p))) (lambda (k37a8@x) ((lambda (k37aa@t) ((lambda (k37ac@ls/false) (if k37ac@ls/false (apply (lambda (k37ae@e) (k37a7@quasi k37ae@e '0)) k37ac@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k37aa@t))) (k3007@syntax-dispatch k37aa@t '(_ any)))) k37a8@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! k2ff7@quasisyntax-macro ((lambda () ((lambda (k3885@quasi) (begin (set! k3885@quasi (lambda (k38a0@p k38a1@lev) ((lambda (k38a4@t) ((lambda (k38a6@ls/false) (if k38a6@ls/false (apply (lambda (k38a8@p) (if (= k38a1@lev '0) ((lambda (k38aa@g) (values (list k38aa@g) (list k38a8@p) k38aa@g)) (gensym)) (call-with-values (lambda () (k3885@quasi k38a8@p (- k38a1@lev '1))) (lambda (k38b2@k38ad k38b3@k38af k38b4@k38b1) ((lambda (k38b8@p k38b9@rhs* k38ba@lhs*) (values k38ba@lhs* k38b9@rhs* (list 'unsyntax k38b8@p))) k38b4@k38b1 k38b3@k38af k38b2@k38ad))))) k38a6@ls/false) ((lambda (k38be@t) ((lambda (k38c0@ls/false) (if (and k38c0@ls/false (apply (lambda () (= k38a1@lev '0)) k38c0@ls/false)) (apply (lambda () (k30e7@syntax-violation '#f '"incorrect use of unsyntax" k38a0@p)) k38c0@ls/false) ((lambda (k38c2@t) ((lambda (k38c4@ls/false) (if k38c4@ls/false (apply (lambda (k38c6@p* k38c7@q) (call-with-values (lambda () (k3885@quasi k38c7@q k38a1@lev)) (lambda (k38d0@k38cb k38d1@k38cd k38d2@k38cf) ((lambda (k38d6@q k38d7@rhs* k38d8@lhs*) (if (= k38a1@lev '0) ((lambda (k38dc@g*) (values (append k38dc@g* k38d8@lhs*) (append k38c6@p* k38d7@rhs*) (append k38dc@g* k38d6@q))) (map (lambda (k38de@x) (gensym)) k38c6@p*)) (call-with-values (lambda () (k3885@quasi k38c6@p* (- k38a1@lev '1))) (lambda (k38e6@k38e1 k38e7@k38e3 k38e8@k38e5) ((lambda (k38ec@p* k38ed@rhs2* k38ee@lhs2*) (values (append k38ee@lhs2* k38d8@lhs*) (append k38ed@rhs2* k38d7@rhs*) (cons (cons 'unsyntax k38ec@p*) k38d6@q))) k38e8@k38e5 k38e7@k38e3 k38e6@k38e1))))) k38d2@k38cf k38d1@k38cd k38d0@k38cb)))) k38c4@ls/false) ((lambda (k38f2@t) ((lambda (k38f4@ls/false) (if k38f4@ls/false (apply (lambda (k38f6@p* k38f7@q) (call-with-values (lambda () (k3885@quasi k38f7@q k38a1@lev)) (lambda (k3900@k38fb k3901@k38fd k3902@k38ff) ((lambda (k3906@q k3907@rhs* k3908@lhs*) (if (= k38a1@lev '0) ((lambda (k390c@g*) (values (append (map (lambda (k390e@g) (cons k390e@g '(...))) k390c@g*) k3908@lhs*) (append k38f6@p* k3907@rhs*) (append (apply append (map (lambda (k3910@g) (cons k3910@g '(...))) k390c@g*)) k3906@q))) (map (lambda (k3912@x) (gensym)) k38f6@p*)) (call-with-values (lambda () (k3885@quasi k38f6@p* (- k38a1@lev '1))) (lambda (k391a@k3915 k391b@k3917 k391c@k3919) ((lambda (k3920@p* k3921@rhs2* k3922@lhs2*) (values (append k3922@lhs2* k3908@lhs*) (append k3921@rhs2* k3907@rhs*) (cons (cons 'unsyntax-splicing k3920@p*) k3906@q))) k391c@k3919 k391b@k3917 k391a@k3915))))) k3902@k38ff k3901@k38fd k3900@k38fb)))) k38f4@ls/false) ((lambda (k3926@t) ((lambda (k3928@ls/false) (if (and k3928@ls/false (apply (lambda () (= k38a1@lev '0)) k3928@ls/false)) (apply (lambda () (k30e7@syntax-violation '#f '"incorrect use of unsyntax-splicing" k38a0@p)) k3928@ls/false) ((lambda (k392a@t) ((lambda (k392c@ls/false) (if k392c@ls/false (apply (lambda (k392e@p) (call-with-values (lambda () (k3885@quasi k392e@p (+ k38a1@lev '1))) (lambda (k3936@k3931 k3937@k3933 k3938@k3935) ((lambda (k393c@p k393d@rhs* k393e@lhs*) (values k393e@lhs* k393d@rhs* (list 'quasisyntax k393c@p))) k3938@k3935 k3937@k3933 k3936@k3931)))) k392c@ls/false) ((lambda (k3942@t) ((lambda (k3944@ls/false) (if k3944@ls/false (apply (lambda (k3946@p k3947@q) (call-with-values (lambda () (k3885@quasi k3946@p k38a1@lev)) (lambda (k3956@k394b k3957@k394d k3958@k394f) (call-with-values (lambda () (k3885@quasi k3947@q k38a1@lev)) (lambda (k395c@k3951 k395d@k3953 k395e@k3955) ((lambda (k3962@q k3963@rhs2* k3964@lhs2* k3965@p k3966@rhs* k3967@lhs*) (values (append k3964@lhs2* k3967@lhs*) (append k3963@rhs2* k3966@rhs*) (cons k3965@p k3962@q))) k395e@k3955 k395d@k3953 k395c@k3951 k3958@k394f k3957@k394d k3956@k394b)))))) k3944@ls/false) ((lambda (k396e@t) ((lambda (k3970@ls/false) (if k3970@ls/false (apply (lambda (k3972@x*) (call-with-values (lambda () (k3885@quasi k3972@x* k38a1@lev)) (lambda (k397a@k3975 k397b@k3977 k397c@k3979) ((lambda (k3980@x* k3981@rhs* k3982@lhs*) (values k3982@lhs* k3981@rhs* (list->vector k3980@x*))) k397c@k3979 k397b@k3977 k397a@k3975)))) k3970@ls/false) ((lambda (k3986@t) ((lambda (k3988@ls/false) (if k3988@ls/false (apply (lambda () (values '() '() k38a0@p)) k3988@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3986@t))) (k3007@syntax-dispatch k3986@t '_))) k396e@t))) (k3007@syntax-dispatch k396e@t '#(vector each-any)))) k3942@t))) (k3007@syntax-dispatch k3942@t '(any . any)))) k392a@t))) (k3007@syntax-dispatch k392a@t '(#(scheme-id quasisyntax) any)))) k3926@t))) (k3007@syntax-dispatch k3926@t '#(scheme-id unsyntax-splicing)))) k38f2@t))) (k3007@syntax-dispatch k38f2@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) k38c2@t))) (k3007@syntax-dispatch k38c2@t '((#(scheme-id unsyntax) . each-any) . any)))) k38be@t))) (k3007@syntax-dispatch k38be@t '#(scheme-id unsyntax)))) k38a4@t))) (k3007@syntax-dispatch k38a4@t '(#(scheme-id unsyntax) any)))) k38a0@p))) (lambda (k3886@x) ((lambda (k3888@t) ((lambda (k388a@ls/false) (if k388a@ls/false (apply (lambda (k388c@e) (call-with-values (lambda () (k3885@quasi k388c@e '0)) (lambda (k3894@k388f k3895@k3891 k3896@k3893) ((lambda (k389a@v k389b@rhs* k389c@lhs*) (k2fbd@bless (list 'syntax-case (cons 'list k389b@rhs*) '() (list k389c@lhs* (list 'syntax k389a@v))))) k3896@k3893 k3895@k3891 k3894@k388f)))) k388a@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3888@t))) (k3007@syntax-dispatch k3888@t '(_ any)))) k3886@x)))) '#f)))) (set! k2ff9@define-struct-macro (lambda (k398a@stx) (k30e7@syntax-violation '#f '"define-struct not supported" k398a@stx))) (set! k2ffb@define-record-type-macro (lambda (k398c@x) ((lambda (k398f@id k3991@get-record-name k3993@get-record-constructor-name k3995@get-record-predicate-name k3997@get-clause k3999@foo-rtd-code k399b@parent-rtd-code k399d@parent-rcd-code k399f@foo-rcd-code k39a1@get-protocol-code k39a3@get-fields k39a5@get-mutator-indices k39a7@get-mutators k39a9@get-accessors k39ab@enumerate k39ad@do-define-record k39af@verify-clauses) (begin (set! k398f@id (lambda (k3b82@ctxt . k3b84@str*) (k30eb@datum->syntax k3b82@ctxt (string->symbol (apply string-append (map (lambda (k3b86@x) (if (symbol? k3b86@x) (symbol->string k3b86@x) (if (string? k3b86@x) k3b86@x (assertion-violation 'define-record-type '"BUG")))) k3b84@str*)))))) (set! k3991@get-record-name (lambda (k3b70@spec) ((lambda (k3b72@t) ((lambda (k3b74@ls/false) (if k3b74@ls/false (apply (lambda (k3b76@foo k3b77@make-foo k3b78@foo?) k3b76@foo) k3b74@ls/false) ((lambda (k3b7c@t) ((lambda (k3b7e@ls/false) (if k3b7e@ls/false (apply (lambda (k3b80@foo) k3b80@foo) k3b7e@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3b7c@t))) (k3007@syntax-dispatch k3b7c@t 'any))) k3b72@t))) (k3007@syntax-dispatch k3b72@t '(any any any)))) k3b70@spec))) (set! k3993@get-record-constructor-name (lambda (k3b5c@spec) ((lambda (k3b5e@t) ((lambda (k3b60@ls/false) (if k3b60@ls/false (apply (lambda (k3b62@foo k3b63@make-foo k3b64@foo?) k3b63@make-foo) k3b60@ls/false) ((lambda (k3b68@t) ((lambda (k3b6a@ls/false) (if (and k3b6a@ls/false (apply (lambda (k3b6c@foo) (k2e02@id? k3b6c@foo)) k3b6a@ls/false)) (apply (lambda (k3b6e@foo) (k398f@id k3b6e@foo '"make-" (k2e16@stx->datum k3b6e@foo))) k3b6a@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3b68@t))) (k3007@syntax-dispatch k3b68@t 'any))) k3b5e@t))) (k3007@syntax-dispatch k3b5e@t '(any any any)))) k3b5c@spec))) (set! k3995@get-record-predicate-name (lambda (k3b48@spec) ((lambda (k3b4a@t) ((lambda (k3b4c@ls/false) (if k3b4c@ls/false (apply (lambda (k3b4e@foo k3b4f@make-foo k3b50@foo?) k3b50@foo?) k3b4c@ls/false) ((lambda (k3b54@t) ((lambda (k3b56@ls/false) (if (and k3b56@ls/false (apply (lambda (k3b58@foo) (k2e02@id? k3b58@foo)) k3b56@ls/false)) (apply (lambda (k3b5a@foo) (k398f@id k3b5a@foo (k2e16@stx->datum k3b5a@foo) '"?")) k3b56@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3b54@t))) (k3007@syntax-dispatch k3b54@t 'any))) k3b4a@t))) (k3007@syntax-dispatch k3b4a@t '(any any any)))) k3b48@spec))) (set! k3997@get-clause (lambda (k3b36@id k3b37@ls) ((lambda (k3b3a@t) ((lambda (k3b3c@ls/false) (if k3b3c@ls/false (apply (lambda () '#f) k3b3c@ls/false) ((lambda (k3b3e@t) ((lambda (k3b40@ls/false) (if k3b40@ls/false (apply (lambda (k3b42@x k3b43@rest k3b44@ls) (if (k2e08@free-id=? (k2fbd@bless k3b36@id) k3b42@x) (cons k3b42@x k3b43@rest) (k3997@get-clause k3b36@id k3b44@ls))) k3b40@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3b3e@t))) (k3007@syntax-dispatch k3b3e@t '((any . any) . any)))) k3b3a@t))) (k3007@syntax-dispatch k3b3a@t '()))) k3b37@ls))) (set! k3999@foo-rtd-code (lambda (k3ae4@name k3ae5@clause* k3ae6@parent-rtd-code) ((lambda (k3aeb@convert-field-spec*) (begin (set! k3aeb@convert-field-spec* (lambda (k3b1c@ls) (list->vector (map (lambda (k3b1e@x) ((lambda (k3b20@t) ((lambda (k3b22@ls/false) (if k3b22@ls/false (apply (lambda (k3b24@name k3b25@rest) (list 'mutable k3b24@name)) k3b22@ls/false) ((lambda (k3b28@t) ((lambda (k3b2a@ls/false) (if k3b2a@ls/false (apply (lambda (k3b2c@name k3b2d@rest) (list 'immutable k3b2c@name)) k3b2a@ls/false) ((lambda (k3b30@t) ((lambda (k3b32@ls/false) (if k3b32@ls/false (apply (lambda (k3b34@name) (list 'immutable k3b34@name)) k3b32@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3b30@t))) (k3007@syntax-dispatch k3b30@t 'any))) k3b28@t))) (k3007@syntax-dispatch k3b28@t '(#(scheme-id immutable) any . any)))) k3b20@t))) (k3007@syntax-dispatch k3b20@t '(#(scheme-id mutable) any . any)))) k3b1e@x)) k3b1c@ls)))) ((lambda (k3aec@uid-code k3aed@sealed? k3aee@opaque? k3aef@fields) (k2fbd@bless (list 'make-record-type-descriptor (list 'quote k3ae4@name) k3ae6@parent-rtd-code k3aec@uid-code k3aed@sealed? k3aee@opaque? k3aef@fields))) ((lambda (k3af4@t) ((lambda (k3af6@ls/false) (if k3af6@ls/false (apply (lambda () (list 'quote (gensym))) k3af6@ls/false) ((lambda (k3af8@t) ((lambda (k3afa@ls/false) (if k3afa@ls/false (apply (lambda (k3afc@uid) (list 'quote k3afc@uid)) k3afa@ls/false) ((lambda (k3afe@t) ((lambda (k3b00@ls/false) (if k3b00@ls/false (apply (lambda () '#f) k3b00@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3afe@t))) (k3007@syntax-dispatch k3afe@t '_))) k3af8@t))) (k3007@syntax-dispatch k3af8@t '(_ any)))) k3af4@t))) (k3007@syntax-dispatch k3af4@t '(_)))) (k3997@get-clause 'nongenerative k3ae5@clause*)) ((lambda (k3b02@t) ((lambda (k3b04@ls/false) (if k3b04@ls/false (apply (lambda () '#t) k3b04@ls/false) ((lambda (k3b06@t) ((lambda (k3b08@ls/false) (if k3b08@ls/false (apply (lambda () '#f) k3b08@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3b06@t))) (k3007@syntax-dispatch k3b06@t '_))) k3b02@t))) (k3007@syntax-dispatch k3b02@t '(_ #(atom #t))))) (k3997@get-clause 'sealed k3ae5@clause*)) ((lambda (k3b0a@t) ((lambda (k3b0c@ls/false) (if k3b0c@ls/false (apply (lambda () '#t) k3b0c@ls/false) ((lambda (k3b0e@t) ((lambda (k3b10@ls/false) (if k3b10@ls/false (apply (lambda () '#f) k3b10@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3b0e@t))) (k3007@syntax-dispatch k3b0e@t '_))) k3b0a@t))) (k3007@syntax-dispatch k3b0a@t '(_ #(atom #t))))) (k3997@get-clause 'opaque k3ae5@clause*)) ((lambda (k3b12@t) ((lambda (k3b14@ls/false) (if k3b14@ls/false (apply (lambda (k3b16@field-spec*) (list 'quote (k3aeb@convert-field-spec* k3b16@field-spec*))) k3b14@ls/false) ((lambda (k3b18@t) ((lambda (k3b1a@ls/false) (if k3b1a@ls/false (apply (lambda () ''#()) k3b1a@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3b18@t))) (k3007@syntax-dispatch k3b18@t '_))) k3b12@t))) (k3007@syntax-dispatch k3b12@t '(_ . each-any)))) (k3997@get-clause 'fields k3ae5@clause*))))) '#f))) (set! k399b@parent-rtd-code (lambda (k3acc@clause*) ((lambda (k3ace@t) ((lambda (k3ad0@ls/false) (if k3ad0@ls/false (apply (lambda (k3ad2@name) (list 'record-type-descriptor k3ad2@name)) k3ad0@ls/false) ((lambda (k3ad4@t) ((lambda (k3ad6@ls/false) (if k3ad6@ls/false (apply (lambda () ((lambda (k3ad8@t) ((lambda (k3ada@ls/false) (if k3ada@ls/false (apply (lambda (k3adc@rtd k3add@rcd) k3adc@rtd) k3ada@ls/false) ((lambda (k3ae0@t) ((lambda (k3ae2@ls/false) (if k3ae2@ls/false (apply (lambda () '#f) k3ae2@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3ae0@t))) (k3007@syntax-dispatch k3ae0@t '#(atom #f)))) k3ad8@t))) (k3007@syntax-dispatch k3ad8@t '(_ any any)))) (k3997@get-clause 'parent-rtd k3acc@clause*))) k3ad6@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3ad4@t))) (k3007@syntax-dispatch k3ad4@t '#(atom #f)))) k3ace@t))) (k3007@syntax-dispatch k3ace@t '(_ any)))) (k3997@get-clause 'parent k3acc@clause*)))) (set! k399d@parent-rcd-code (lambda (k3ab4@clause*) ((lambda (k3ab6@t) ((lambda (k3ab8@ls/false) (if k3ab8@ls/false (apply (lambda (k3aba@name) (list 'record-constructor-descriptor k3aba@name)) k3ab8@ls/false) ((lambda (k3abc@t) ((lambda (k3abe@ls/false) (if k3abe@ls/false (apply (lambda () ((lambda (k3ac0@t) ((lambda (k3ac2@ls/false) (if k3ac2@ls/false (apply (lambda (k3ac4@rtd k3ac5@rcd) k3ac5@rcd) k3ac2@ls/false) ((lambda (k3ac8@t) ((lambda (k3aca@ls/false) (if k3aca@ls/false (apply (lambda () '#f) k3aca@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3ac8@t))) (k3007@syntax-dispatch k3ac8@t '#(atom #f)))) k3ac0@t))) (k3007@syntax-dispatch k3ac0@t '(_ any any)))) (k3997@get-clause 'parent-rtd k3ab4@clause*))) k3abe@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3abc@t))) (k3007@syntax-dispatch k3abc@t '#(atom #f)))) k3ab6@t))) (k3007@syntax-dispatch k3ab6@t '(_ any)))) (k3997@get-clause 'parent k3ab4@clause*)))) (set! k399f@foo-rcd-code (lambda (k3aac@clause* k3aad@foo-rtd k3aae@protocol k3aaf@parent-rcd-code) (list 'make-record-constructor-descriptor k3aad@foo-rtd k3aaf@parent-rcd-code k3aae@protocol))) (set! k39a1@get-protocol-code (lambda (k3aa0@clause*) ((lambda (k3aa2@t) ((lambda (k3aa4@ls/false) (if k3aa4@ls/false (apply (lambda (k3aa6@expr) k3aa6@expr) k3aa4@ls/false) ((lambda (k3aa8@t) ((lambda (k3aaa@ls/false) (if k3aaa@ls/false (apply (lambda () '#f) k3aaa@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3aa8@t))) (k3007@syntax-dispatch k3aa8@t '_))) k3aa2@t))) (k3007@syntax-dispatch k3aa2@t '(_ any)))) (k3997@get-clause 'protocol k3aa0@clause*)))) (set! k39a3@get-fields (lambda (k3a8e@clause*) ((lambda (k3a90@t) ((lambda (k3a92@ls/false) (if k3a92@ls/false (apply (lambda () '()) k3a92@ls/false) ((lambda (k3a94@t) ((lambda (k3a96@ls/false) (if k3a96@ls/false (apply (lambda (k3a98@f*) k3a98@f*) k3a96@ls/false) ((lambda (k3a9a@t) ((lambda (k3a9c@ls/false) (if k3a9c@ls/false (apply (lambda (k3a9e@rest) (k39a3@get-fields k3a9e@rest)) k3a9c@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3a9a@t))) (k3007@syntax-dispatch k3a9a@t '(_ . any)))) k3a94@t))) (k3007@syntax-dispatch k3a94@t '((#(scheme-id fields) . each-any) . _)))) k3a90@t))) (k3007@syntax-dispatch k3a90@t '()))) k3a8e@clause*))) (set! k39a5@get-mutator-indices (lambda (k3a76@fields) ((letrec ((k3a78@f (lambda (k3a7a@fields k3a7b@i) ((lambda (k3a7e@t) ((lambda (k3a80@ls/false) (if k3a80@ls/false (apply (lambda () '()) k3a80@ls/false) ((lambda (k3a82@t) ((lambda (k3a84@ls/false) (if k3a84@ls/false (apply (lambda (k3a86@rest) (cons k3a7b@i (k3a78@f k3a86@rest (+ k3a7b@i '1)))) k3a84@ls/false) ((lambda (k3a88@t) ((lambda (k3a8a@ls/false) (if k3a8a@ls/false (apply (lambda (k3a8c@rest) (k3a78@f k3a8c@rest (+ k3a7b@i '1))) k3a8a@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3a88@t))) (k3007@syntax-dispatch k3a88@t '(_ . any)))) k3a82@t))) (k3007@syntax-dispatch k3a82@t '((#(scheme-id mutable) . _) . any)))) k3a7e@t))) (k3007@syntax-dispatch k3a7e@t '()))) k3a7a@fields)))) k3a78@f) k3a76@fields '0))) (set! k39a7@get-mutators (lambda (k3a4c@foo k3a4d@fields) ((lambda (k3a51@gen-name) (begin (set! k3a51@gen-name (lambda (k3a74@x) (k30eb@datum->syntax k3a4c@foo (string->symbol (string-append (symbol->string (k30ed@syntax->datum k3a4c@foo)) '"-" (symbol->string (k30ed@syntax->datum k3a74@x)) '"-set!"))))) ((letrec ((k3a52@f (lambda (k3a54@fields) ((lambda (k3a56@t) ((lambda (k3a58@ls/false) (if k3a58@ls/false (apply (lambda () '()) k3a58@ls/false) ((lambda (k3a5a@t) ((lambda (k3a5c@ls/false) (if k3a5c@ls/false (apply (lambda (k3a5e@name k3a5f@accessor k3a60@mutator k3a61@rest) (cons k3a60@mutator (k3a52@f k3a61@rest))) k3a5c@ls/false) ((lambda (k3a66@t) ((lambda (k3a68@ls/false) (if k3a68@ls/false (apply (lambda (k3a6a@name k3a6b@rest) (cons (k3a51@gen-name k3a6a@name) (k3a52@f k3a6b@rest))) k3a68@ls/false) ((lambda (k3a6e@t) ((lambda (k3a70@ls/false) (if k3a70@ls/false (apply (lambda (k3a72@rest) (k3a52@f k3a72@rest)) k3a70@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3a6e@t))) (k3007@syntax-dispatch k3a6e@t '(_ . any)))) k3a66@t))) (k3007@syntax-dispatch k3a66@t '((#(scheme-id mutable) any) . any)))) k3a5a@t))) (k3007@syntax-dispatch k3a5a@t '((#(scheme-id mutable) any any any) . any)))) k3a56@t))) (k3007@syntax-dispatch k3a56@t '()))) k3a54@fields)))) k3a52@f) k3a4d@fields))) '#f))) (set! k39a9@get-accessors (lambda (k3a08@foo k3a09@fields) ((lambda (k3a0d@gen-name) (begin (set! k3a0d@gen-name (lambda (k3a4a@x) (k30eb@datum->syntax k3a08@foo (string->symbol (string-append (symbol->string (k30ed@syntax->datum k3a08@foo)) '"-" (symbol->string (k30ed@syntax->datum k3a4a@x))))))) (map (lambda (k3a0e@field) ((lambda (k3a10@t) ((lambda (k3a12@ls/false) (if (and k3a12@ls/false (apply (lambda (k3a14@name k3a15@accessor k3a16@mutator) (k2e02@id? k3a15@accessor)) k3a12@ls/false)) (apply (lambda (k3a1a@name k3a1b@accessor k3a1c@mutator) k3a1b@accessor) k3a12@ls/false) ((lambda (k3a20@t) ((lambda (k3a22@ls/false) (if (and k3a22@ls/false (apply (lambda (k3a24@name k3a25@accessor) (k2e02@id? k3a25@accessor)) k3a22@ls/false)) (apply (lambda (k3a28@name k3a29@accessor) k3a29@accessor) k3a22@ls/false) ((lambda (k3a2c@t) ((lambda (k3a2e@ls/false) (if (and k3a2e@ls/false (apply (lambda (k3a30@name) (k2e02@id? k3a30@name)) k3a2e@ls/false)) (apply (lambda (k3a32@name) (k3a0d@gen-name k3a32@name)) k3a2e@ls/false) ((lambda (k3a34@t) ((lambda (k3a36@ls/false) (if (and k3a36@ls/false (apply (lambda (k3a38@name) (k2e02@id? k3a38@name)) k3a36@ls/false)) (apply (lambda (k3a3a@name) (k3a0d@gen-name k3a3a@name)) k3a36@ls/false) ((lambda (k3a3c@t) ((lambda (k3a3e@ls/false) (if (and k3a3e@ls/false (apply (lambda (k3a40@name) (k2e02@id? k3a40@name)) k3a3e@ls/false)) (apply (lambda (k3a42@name) (k3a0d@gen-name k3a42@name)) k3a3e@ls/false) ((lambda (k3a44@t) ((lambda (k3a46@ls/false) (if k3a46@ls/false (apply (lambda (k3a48@others) (k30e7@syntax-violation '#f '"invalid field spec" k3a0e@field)) k3a46@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3a44@t))) (k3007@syntax-dispatch k3a44@t 'any))) k3a3c@t))) (k3007@syntax-dispatch k3a3c@t 'any))) k3a34@t))) (k3007@syntax-dispatch k3a34@t '(#(scheme-id immutable) any)))) k3a2c@t))) (k3007@syntax-dispatch k3a2c@t '(#(scheme-id mutable) any)))) k3a20@t))) (k3007@syntax-dispatch k3a20@t '(#(scheme-id immutable) any any)))) k3a10@t))) (k3007@syntax-dispatch k3a10@t '(#(scheme-id mutable) any any any)))) k3a0e@field)) k3a09@fields))) '#f))) (set! k39ab@enumerate (lambda (k3a00@ls) ((letrec ((k3a02@f (lambda (k3a04@ls k3a05@i) (if (null? k3a04@ls) '() (cons k3a05@i (k3a02@f (cdr k3a04@ls) (+ k3a05@i '1))))))) k3a02@f) k3a00@ls '0))) (set! k39ad@do-define-record (lambda (k39d8@namespec k39d9@clause*) ((lambda (k39dc@foo) ((lambda (k39de@foo-rtd) ((lambda (k39e0@foo-rcd) ((lambda (k39e2@protocol) ((lambda (k39e4@make-foo) ((lambda (k39e6@fields) ((lambda (k39e8@idx*) ((lambda (k39ea@foo-x*) ((lambda (k39ec@set-foo-x!*) ((lambda (k39ee@set-foo-idx*) ((lambda (k39f0@foo?) ((lambda (k39f2@foo-rtd-code) ((lambda (k39f4@foo-rcd-code) ((lambda (k39f6@protocol-code) ((lambda () (k2fbd@bless (cons 'begin (cons (list 'define k39de@foo-rtd k39f2@foo-rtd-code) (cons (list 'define k39e2@protocol k39f6@protocol-code) (cons (list 'define k39e0@foo-rcd k39f4@foo-rcd-code) (cons (list 'define-syntax k39dc@foo (list 'list ''$rtd (list 'syntax k39de@foo-rtd) (list 'syntax k39e0@foo-rcd))) (cons (list 'define k39f0@foo? (list 'record-predicate k39de@foo-rtd)) (cons (list 'define k39e4@make-foo (list 'record-constructor k39e0@foo-rcd)) (append (map (lambda (k39f8@foo-x k39f9@idx) (list 'define k39f8@foo-x (list 'record-accessor k39de@foo-rtd k39f9@idx))) k39ea@foo-x* k39e8@idx*) (map (lambda (k39fc@set-foo-x! k39fd@idx) (list 'define k39fc@set-foo-x! (list 'record-mutator k39de@foo-rtd k39fd@idx))) k39ec@set-foo-x!* k39ee@set-foo-idx*))))))))))))) (k39a1@get-protocol-code k39d9@clause*))) (k399f@foo-rcd-code k39d9@clause* k39de@foo-rtd k39e2@protocol (k399d@parent-rcd-code k39d9@clause*)))) (k3999@foo-rtd-code k39dc@foo k39d9@clause* (k399b@parent-rtd-code k39d9@clause*)))) (k3995@get-record-predicate-name k39d8@namespec))) (k39a5@get-mutator-indices k39e6@fields))) (k39a7@get-mutators k39dc@foo k39e6@fields))) (k39a9@get-accessors k39dc@foo k39e6@fields))) (k39ab@enumerate k39e6@fields))) (k39a3@get-fields k39d9@clause*))) (k3993@get-record-constructor-name k39d8@namespec))) (gensym))) (gensym))) (gensym))) (k3991@get-record-name k39d8@namespec)))) (set! k39af@verify-clauses (lambda (k39b8@x k39b9@cls*) ((lambda (k39bd@valid-kwds k39bf@free-id-member?) (begin (set! k39bd@valid-kwds (map k2fbd@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! k39bf@free-id-member? (lambda (k39d4@x k39d5@ls) (and (pair? k39d5@ls) (or (k2e08@free-id=? k39d4@x (car k39d5@ls)) (k39bf@free-id-member? k39d4@x (cdr k39d5@ls)))))) ((letrec ((k39c0@f (lambda (k39c2@cls* k39c3@seen*) (if (not (null? k39c2@cls*)) ((lambda (k39c6@t) ((lambda (k39c8@ls/false) (if k39c8@ls/false (apply (lambda (k39ca@kwd k39cb@rest) (if (or (not (k2e02@id? k39ca@kwd)) (not (k39bf@free-id-member? k39ca@kwd k39bd@valid-kwds))) (k30e7@syntax-violation '#f '"not a valid define-record-type keyword" k39ca@kwd) (if (k2e0e@bound-id-member? k39ca@kwd k39c3@seen*) (k30e7@syntax-violation '#f '"duplicate use of keyword " k39b8@x k39ca@kwd) (k39c0@f (cdr k39c2@cls*) (cons k39ca@kwd k39c3@seen*))))) k39c8@ls/false) ((lambda (k39ce@t) ((lambda (k39d0@ls/false) (if k39d0@ls/false (apply (lambda (k39d2@cls) (k30e7@syntax-violation '#f '"malformed define-record-type clause" k39d2@cls)) k39d0@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k39ce@t))) (k3007@syntax-dispatch k39ce@t 'any))) k39c6@t))) (k3007@syntax-dispatch k39c6@t '(any . any)))) (car k39c2@cls*)) (void))))) k39c0@f) k39b9@cls* '()))) '#f '#f))) ((lambda (k39b0@t) ((lambda (k39b2@ls/false) (if k39b2@ls/false (apply (lambda (k39b4@namespec k39b5@clause*) (begin (k39af@verify-clauses k398c@x k39b5@clause*) (k39ad@do-define-record k39b4@namespec k39b5@clause*))) k39b2@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k39b0@t))) (k3007@syntax-dispatch k39b0@t '(_ any . each-any)))) k398c@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! k2ffd@define-condition-type-macro (lambda (k3b88@x) ((lambda (k3b8b@mkname) (begin (set! k3b8b@mkname (lambda (k3bb8@name k3bb9@suffix) (k30eb@datum->syntax k3bb8@name (string->symbol (string-append (symbol->string (k30ed@syntax->datum k3bb8@name)) k3bb9@suffix))))) ((lambda (k3b8c@t) ((lambda (k3b8e@ls/false) (if (and k3b8e@ls/false (apply (lambda (k3b90@ctxt k3b91@name k3b92@super k3b93@constructor k3b94@predicate k3b95@field* k3b96@accessor*) (and (k2e02@id? k3b91@name) (k2e02@id? k3b92@super) (k2e02@id? k3b93@constructor) (k2e02@id? k3b94@predicate) (for-all k2e02@id? k3b95@field*) (for-all k2e02@id? k3b96@accessor*))) k3b8e@ls/false)) (apply (lambda (k3b9e@ctxt k3b9f@name k3ba0@super k3ba1@constructor k3ba2@predicate k3ba3@field* k3ba4@accessor*) ((lambda (k3bac@aux-accessor*) (k2fbd@bless (cons 'begin (cons (cons 'define-record-type (cons (list k3b9f@name k3ba1@constructor (gensym)) (cons (list 'parent k3ba0@super) (cons (cons 'fields (map (lambda (k3bae@field k3baf@aux) (list 'immutable k3bae@field k3baf@aux)) k3ba3@field* k3bac@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define k3ba2@predicate (list 'condition-predicate (list 'record-type-descriptor k3b9f@name))) (map (lambda (k3bb2@accessor k3bb3@aux) (list 'define k3bb2@accessor (list 'condition-accessor (list 'record-type-descriptor k3b9f@name) k3bb3@aux))) k3ba4@accessor* k3bac@aux-accessor*)))))) (map (lambda (k3bb6@x) (gensym)) k3ba4@accessor*))) k3b8e@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3b8c@t))) (k3007@syntax-dispatch k3b8c@t '(any any any any any . #(each (any any)))))) k3b88@x))) '#f))) (set! k2fff@incorrect-usage-macro (lambda (k3bbc@e) (k30e7@syntax-violation '#f '"incorrect usage of auxiliary keyword" k3bbc@e))) (set! k3001@parameterize-macro (lambda (k3bbe@e) ((lambda (k3bc0@t) ((lambda (k3bc2@ls/false) (if k3bc2@ls/false (apply (lambda (k3bc4@b k3bc5@b*) (k2fbd@bless (cons 'let (cons '() (cons k3bc4@b k3bc5@b*))))) k3bc2@ls/false) ((lambda (k3bc8@t) ((lambda (k3bca@ls/false) (if k3bca@ls/false (apply (lambda (k3bcc@olhs* k3bcd@orhs* k3bce@b k3bcf@b*) ((lambda (k3bd4@lhs* k3bd5@rhs*) (k2fbd@bless (cons (list 'lambda (append k3bd4@lhs* k3bd5@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (k3bd8@lhs k3bd9@rhs) (list 'let (list (list 't (list k3bd8@lhs))) (list k3bd8@lhs k3bd9@rhs) (cons 'set! (cons k3bd9@rhs '(t))))) k3bd4@lhs* k3bd5@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons k3bce@b k3bcf@b*))) '(swap)))))) (append k3bcc@olhs* k3bcd@orhs*)))) (k30d5@generate-temporaries k3bcc@olhs*) (k30d5@generate-temporaries k3bcd@orhs*))) k3bca@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3bc8@t))) (k3007@syntax-dispatch k3bc8@t '(_ #(each (any any)) any . each-any)))) k3bc0@t))) (k3007@syntax-dispatch k3bc0@t '(_ () any . each-any)))) k3bbe@e))) (set! k3003@foreign-call-transformer (lambda (k3bdc@e k3bdd@r k3bde@mr) ((lambda (k3be2@t) ((lambda (k3be4@ls/false) (if k3be4@ls/false (apply (lambda (k3be6@name k3be7@arg*) (cons 'foreign-call (cons (k3029@chi-expr k3be6@name k3bdd@r k3bde@mr) (k3025@chi-expr* k3be7@arg* k3bdd@r k3bde@mr)))) k3be4@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3be2@t))) (k3007@syntax-dispatch k3be2@t '(_ any . each-any)))) k3bdc@e))) (set! k3005@convert-pattern (lambda (k3bea@pattern k3beb@keys) ((lambda (k3bef@cvt* k3bf1@cvt) (begin (set! k3bef@cvt* (lambda (k3c8e@p* k3c8f@n k3c90@ids) (if (null? k3c8e@p*) (values '() k3c90@ids) (call-with-values (lambda () (k3bef@cvt* (cdr k3c8e@p*) k3c8f@n k3c90@ids)) (lambda (k3c98@k3c95 k3c99@k3c97) ((lambda (k3c9c@ids k3c9d@y) (call-with-values (lambda () (k3bf1@cvt (car k3c8e@p*) k3c8f@n k3c9c@ids)) (lambda (k3ca4@k3ca1 k3ca5@k3ca3) ((lambda (k3ca8@ids k3ca9@x) (values (cons k3ca9@x k3c9d@y) k3ca8@ids)) k3ca5@k3ca3 k3ca4@k3ca1)))) k3c99@k3c97 k3c98@k3c95)))))) (set! k3bf1@cvt (lambda (k3bf2@p k3bf3@n k3bf4@ids) ((lambda (k3bf8@t) ((lambda (k3bfa@ls/false) (if (and k3bfa@ls/false (apply (lambda (k3bfc@id) (k2e02@id? k3bfc@id)) k3bfa@ls/false)) (apply (lambda (k3bfe@id) (if (k2e0e@bound-id-member? k3bf2@p k3beb@keys) (values (vector 'free-id k3bf2@p) k3bf4@ids) (if (k2e08@free-id=? k3bf2@p (k2f91@scheme-stx '_)) (values '_ k3bf4@ids) (values 'any (cons (cons k3bf2@p k3bf3@n) k3bf4@ids))))) k3bfa@ls/false) ((lambda (k3c00@t) ((lambda (k3c02@ls/false) (if (and k3c02@ls/false (apply (lambda (k3c04@p k3c05@dots) (k3009@ellipsis? k3c05@dots)) k3c02@ls/false)) (apply (lambda (k3c08@p k3c09@dots) (call-with-values (lambda () (k3bf1@cvt k3c08@p (+ k3bf3@n '1) k3bf4@ids)) (lambda (k3c10@k3c0d k3c11@k3c0f) ((lambda (k3c14@ids k3c15@p) (values (if (eq? k3c15@p 'any) 'each-any (vector 'each k3c15@p)) k3c14@ids)) k3c11@k3c0f k3c10@k3c0d)))) k3c02@ls/false) ((lambda (k3c18@t) ((lambda (k3c1a@ls/false) (if (and k3c1a@ls/false (apply (lambda (k3c1c@x k3c1d@dots k3c1e@ys k3c1f@z) (k3009@ellipsis? k3c1d@dots)) k3c1a@ls/false)) (apply (lambda (k3c24@x k3c25@dots k3c26@ys k3c27@z) (call-with-values (lambda () (k3bf1@cvt k3c27@z k3bf3@n k3bf4@ids)) (lambda (k3c30@k3c2d k3c31@k3c2f) ((lambda (k3c34@ids k3c35@z) (call-with-values (lambda () (k3bef@cvt* k3c26@ys k3bf3@n k3c34@ids)) (lambda (k3c3c@k3c39 k3c3d@k3c3b) ((lambda (k3c40@ids k3c41@ys) (call-with-values (lambda () (k3bf1@cvt k3c24@x (+ k3bf3@n '1) k3c40@ids)) (lambda (k3c48@k3c45 k3c49@k3c47) ((lambda (k3c4c@ids k3c4d@x) (values (vector 'each+ k3c4d@x (reverse k3c41@ys) k3c35@z) k3c4c@ids)) k3c49@k3c47 k3c48@k3c45)))) k3c3d@k3c3b k3c3c@k3c39)))) k3c31@k3c2f k3c30@k3c2d)))) k3c1a@ls/false) ((lambda (k3c50@t) ((lambda (k3c52@ls/false) (if k3c52@ls/false (apply (lambda (k3c54@x k3c55@y) (call-with-values (lambda () (k3bf1@cvt k3c55@y k3bf3@n k3bf4@ids)) (lambda (k3c5c@k3c59 k3c5d@k3c5b) ((lambda (k3c60@ids k3c61@y) (call-with-values (lambda () (k3bf1@cvt k3c54@x k3bf3@n k3c60@ids)) (lambda (k3c68@k3c65 k3c69@k3c67) ((lambda (k3c6c@ids k3c6d@x) (values (cons k3c6d@x k3c61@y) k3c6c@ids)) k3c69@k3c67 k3c68@k3c65)))) k3c5d@k3c5b k3c5c@k3c59)))) k3c52@ls/false) ((lambda (k3c70@t) ((lambda (k3c72@ls/false) (if k3c72@ls/false (apply (lambda () (values '() k3bf4@ids)) k3c72@ls/false) ((lambda (k3c74@t) ((lambda (k3c76@ls/false) (if (and k3c76@ls/false (apply (lambda (k3c78@p) (not (k2dce@stx? k3c78@p))) k3c76@ls/false)) (apply (lambda (k3c7a@p) (call-with-values (lambda () (k3bf1@cvt k3c7a@p k3bf3@n k3bf4@ids)) (lambda (k3c80@k3c7d k3c81@k3c7f) ((lambda (k3c84@ids k3c85@p) (values (vector 'vector k3c85@p) k3c84@ids)) k3c81@k3c7f k3c80@k3c7d)))) k3c76@ls/false) ((lambda (k3c88@t) ((lambda (k3c8a@ls/false) (if k3c8a@ls/false (apply (lambda (k3c8c@datum) (values (vector 'atom (k2e16@stx->datum k3c8c@datum)) k3bf4@ids)) k3c8a@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3c88@t))) (k3007@syntax-dispatch k3c88@t 'any))) k3c74@t))) (k3007@syntax-dispatch k3c74@t '#(vector each-any)))) k3c70@t))) (k3007@syntax-dispatch k3c70@t '()))) k3c50@t))) (k3007@syntax-dispatch k3c50@t '(any . any)))) k3c18@t))) (k3007@syntax-dispatch k3c18@t '(any any . #(each+ any () any))))) k3c00@t))) (k3007@syntax-dispatch k3c00@t '(any any)))) k3bf8@t))) (k3007@syntax-dispatch k3bf8@t 'any))) k3bf2@p))) (k3bf1@cvt k3bea@pattern '0 '()))) '#f '#f))) (set! k3007@syntax-dispatch ((lambda () ((lambda (k3cad@stx^ k3caf@match-each k3cb1@match-each+ k3cb3@match-each-any k3cb5@match-empty k3cb7@combine k3cb9@match* k3cbb@match) (begin (set! k3cad@stx^ (lambda (k3d88@e k3d89@m* k3d8a@s* k3d8b@ae*) (if (and (null? k3d89@m*) (null? k3d8a@s*) (null? k3d8b@ae*)) k3d88@e (k2dea@mkstx k3d88@e k3d89@m* k3d8a@s* k3d8b@ae*)))) (set! k3caf@match-each (lambda (k3d68@e k3d69@p k3d6a@m* k3d6b@s* k3d6c@ae*) (if (pair? k3d68@e) ((lambda (k3d72@first) (and k3d72@first ((lambda (k3d74@rest) (and k3d74@rest (cons k3d72@first k3d74@rest))) (k3caf@match-each (cdr k3d68@e) k3d69@p k3d6a@m* k3d6b@s* k3d6c@ae*)))) (k3cbb@match (car k3d68@e) k3d69@p k3d6a@m* k3d6b@s* k3d6c@ae* '())) (if (null? k3d68@e) '() (if (k2dce@stx? k3d68@e) (and (not (k2d88@top-marked? k3d6a@m*)) (call-with-values (lambda () (join-wraps k3d6a@m* k3d6b@s* k3d6c@ae* k3d68@e)) (lambda (k3d7c@k3d77 k3d7d@k3d79 k3d7e@k3d7b) ((lambda (k3d82@ae* k3d83@s* k3d84@m*) (k3caf@match-each (k2dd0@stx-expr k3d68@e) k3d69@p k3d84@m* k3d83@s* k3d82@ae*)) k3d7e@k3d7b k3d7d@k3d79 k3d7c@k3d77)))) (if (k2957@k2848@annotation? k3d68@e) (k3caf@match-each (k2959@k284c@annotation-expression k3d68@e) k3d69@p k3d6a@m* k3d6b@s* k3d6c@ae*) '#f)))))) (set! k3cb1@match-each+ (lambda (k3d28@e k3d29@x-pat k3d2a@y-pat k3d2b@z-pat k3d2c@m* k3d2d@s* k3d2e@ae* k3d2f@r) ((letrec ((k3d38@f (lambda (k3d3a@e k3d3b@m* k3d3c@s* k3d3d@ae*) (if (pair? k3d3a@e) (call-with-values (lambda () (k3d38@f (cdr k3d3a@e) k3d3b@m* k3d3c@s* k3d3d@ae*)) (lambda (k3d48@k3d43 k3d49@k3d45 k3d4a@k3d47) ((lambda (k3d4e@r k3d4f@y-pat k3d50@xr*) (if k3d4e@r (if (null? k3d4f@y-pat) ((lambda (k3d54@xr) (if k3d54@xr (values (cons k3d54@xr k3d50@xr*) k3d4f@y-pat k3d4e@r) (values '#f '#f '#f))) (k3cbb@match (car k3d3a@e) k3d29@x-pat k3d3b@m* k3d3c@s* k3d3d@ae* '())) (values '() (cdr k3d4f@y-pat) (k3cbb@match (car k3d3a@e) (car k3d4f@y-pat) k3d3b@m* k3d3c@s* k3d3d@ae* k3d4e@r))) (values '#f '#f '#f))) k3d4a@k3d47 k3d49@k3d45 k3d48@k3d43))) (if (k2dce@stx? k3d3a@e) (if (k2d88@top-marked? k3d3b@m*) (values '() k3d2a@y-pat (k3cbb@match k3d3a@e k3d2b@z-pat k3d3b@m* k3d3c@s* k3d3d@ae* k3d2f@r)) (call-with-values (lambda () (join-wraps k3d3b@m* k3d3c@s* k3d3d@ae* k3d3a@e)) (lambda (k3d5c@k3d57 k3d5d@k3d59 k3d5e@k3d5b) ((lambda (k3d62@ae* k3d63@s* k3d64@m*) (k3d38@f (k2dd0@stx-expr k3d3a@e) k3d64@m* k3d63@s* k3d62@ae*)) k3d5e@k3d5b k3d5d@k3d59 k3d5c@k3d57)))) (if (k2957@k2848@annotation? k3d3a@e) (k3d38@f (k2959@k284c@annotation-expression k3d3a@e) k3d3b@m* k3d3c@s* k3d3d@ae*) (values '() k3d2a@y-pat (k3cbb@match k3d3a@e k3d2b@z-pat k3d3b@m* k3d3c@s* k3d3d@ae* k3d2f@r)))))))) k3d38@f) k3d28@e k3d2c@m* k3d2d@s* k3d2e@ae*))) (set! k3cb3@match-each-any (lambda (k3d0c@e k3d0d@m* k3d0e@s* k3d0f@ae*) (if (pair? k3d0c@e) ((lambda (k3d14@l) (and k3d14@l (cons (k3cad@stx^ (car k3d0c@e) k3d0d@m* k3d0e@s* k3d0f@ae*) k3d14@l))) (k3cb3@match-each-any (cdr k3d0c@e) k3d0d@m* k3d0e@s* k3d0f@ae*)) (if (null? k3d0c@e) '() (if (k2dce@stx? k3d0c@e) (and (not (k2d88@top-marked? k3d0d@m*)) (call-with-values (lambda () (join-wraps k3d0d@m* k3d0e@s* k3d0f@ae* k3d0c@e)) (lambda (k3d1c@k3d17 k3d1d@k3d19 k3d1e@k3d1b) ((lambda (k3d22@ae* k3d23@s* k3d24@m*) (k3cb3@match-each-any (k2dd0@stx-expr k3d0c@e) k3d24@m* k3d23@s* k3d22@ae*)) k3d1e@k3d1b k3d1d@k3d19 k3d1c@k3d17)))) (if (k2957@k2848@annotation? k3d0c@e) (k3cb3@match-each-any (k2959@k284c@annotation-expression k3d0c@e) k3d0d@m* k3d0e@s* k3d0f@ae*) '#f)))))) (set! k3cb5@match-empty (lambda (k3d06@p k3d07@r) (if (null? k3d06@p) k3d07@r (if (eq? k3d06@p '_) k3d07@r (if (eq? k3d06@p 'any) (cons '() k3d07@r) (if (pair? k3d06@p) (k3cb5@match-empty (car k3d06@p) (k3cb5@match-empty (cdr k3d06@p) k3d07@r)) (if (eq? k3d06@p 'each-any) (cons '() k3d07@r) ((lambda (k3d0a@t) (if (memv k3d0a@t '(each)) (k3cb5@match-empty (vector-ref k3d06@p '1) k3d07@r) (if (memv k3d0a@t '(each+)) (k3cb5@match-empty (vector-ref k3d06@p '1) (k3cb5@match-empty (reverse (vector-ref k3d06@p '2)) (k3cb5@match-empty (vector-ref k3d06@p '3) k3d07@r))) (if (memv k3d0a@t '(free-id atom)) k3d07@r (if (memv k3d0a@t '(scheme-id atom)) k3d07@r (if (memv k3d0a@t '(vector)) (k3cb5@match-empty (vector-ref k3d06@p '1) k3d07@r) (assertion-violation 'syntax-dispatch '"invalid pattern" k3d06@p))))))) (vector-ref k3d06@p '0))))))))) (set! k3cb7@combine (lambda (k3d02@r* k3d03@r) (if (null? (car k3d02@r*)) k3d03@r (cons (map car k3d02@r*) (k3cb7@combine (map cdr k3d02@r*) k3d03@r))))) (set! k3cb9@match* (lambda (k3cde@e k3cdf@p k3ce0@m* k3ce1@s* k3ce2@ae* k3ce3@r) (if (null? k3cdf@p) (and (null? k3cde@e) k3ce3@r) (if (pair? k3cdf@p) (and (pair? k3cde@e) (k3cbb@match (car k3cde@e) (car k3cdf@p) k3ce0@m* k3ce1@s* k3ce2@ae* (k3cbb@match (cdr k3cde@e) (cdr k3cdf@p) k3ce0@m* k3ce1@s* k3ce2@ae* k3ce3@r))) (if (eq? k3cdf@p 'each-any) ((lambda (k3cea@l) (and k3cea@l (cons k3cea@l k3ce3@r))) (k3cb3@match-each-any k3cde@e k3ce0@m* k3ce1@s* k3ce2@ae*)) ((lambda (k3cec@t) (if (memv k3cec@t '(each)) (if (null? k3cde@e) (k3cb5@match-empty (vector-ref k3cdf@p '1) k3ce3@r) ((lambda (k3cee@r*) (and k3cee@r* (k3cb7@combine k3cee@r* k3ce3@r))) (k3caf@match-each k3cde@e (vector-ref k3cdf@p '1) k3ce0@m* k3ce1@s* k3ce2@ae*))) (if (memv k3cec@t '(free-id)) (and (symbol? k3cde@e) (k2d88@top-marked? k3ce0@m*) (k2e08@free-id=? (k3cad@stx^ k3cde@e k3ce0@m* k3ce1@s* k3ce2@ae*) (vector-ref k3cdf@p '1)) k3ce3@r) (if (memv k3cec@t '(scheme-id)) (and (symbol? k3cde@e) (k2d88@top-marked? k3ce0@m*) (k2e08@free-id=? (k3cad@stx^ k3cde@e k3ce0@m* k3ce1@s* k3ce2@ae*) (k2f91@scheme-stx (vector-ref k3cdf@p '1))) k3ce3@r) (if (memv k3cec@t '(each+)) (call-with-values (lambda () (k3cb1@match-each+ k3cde@e (vector-ref k3cdf@p '1) (vector-ref k3cdf@p '2) (vector-ref k3cdf@p '3) k3ce0@m* k3ce1@s* k3ce2@ae* k3ce3@r)) (lambda (k3cf6@k3cf1 k3cf7@k3cf3 k3cf8@k3cf5) ((lambda (k3cfc@r k3cfd@y-pat k3cfe@xr*) (and k3cfc@r (null? k3cfd@y-pat) (if (null? k3cfe@xr*) (k3cb5@match-empty (vector-ref k3cdf@p '1) k3cfc@r) (k3cb7@combine k3cfe@xr* k3cfc@r)))) k3cf8@k3cf5 k3cf7@k3cf3 k3cf6@k3cf1))) (if (memv k3cec@t '(atom)) (and (fast-equal? (vector-ref k3cdf@p '1) (k2e14@strip k3cde@e k3ce0@m*)) k3ce3@r) (if (memv k3cec@t '(vector)) (and (vector? k3cde@e) (k3cbb@match (vector->list k3cde@e) (vector-ref k3cdf@p '1) k3ce0@m* k3ce1@s* k3ce2@ae* k3ce3@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" k3cdf@p)))))))) (vector-ref k3cdf@p '0))))))) (set! k3cbb@match (lambda (k3cc0@e k3cc1@p k3cc2@m* k3cc3@s* k3cc4@ae* k3cc5@r) (if (not k3cc5@r) '#f (if (eq? k3cc1@p '_) k3cc5@r (if (eq? k3cc1@p 'any) (cons (k3cad@stx^ k3cc0@e k3cc2@m* k3cc3@s* k3cc4@ae*) k3cc5@r) (if (k2dce@stx? k3cc0@e) (and (not (k2d88@top-marked? k3cc2@m*)) (call-with-values (lambda () (join-wraps k3cc2@m* k3cc3@s* k3cc4@ae* k3cc0@e)) (lambda (k3cd2@k3ccd k3cd3@k3ccf k3cd4@k3cd1) ((lambda (k3cd8@ae* k3cd9@s* k3cda@m*) (k3cbb@match (k2dd0@stx-expr k3cc0@e) k3cc1@p k3cda@m* k3cd9@s* k3cd8@ae* k3cc5@r)) k3cd4@k3cd1 k3cd3@k3ccf k3cd2@k3ccd)))) (if (k2957@k2848@annotation? k3cc0@e) (k3cbb@match (k2959@k284c@annotation-expression k3cc0@e) k3cc1@p k3cc2@m* k3cc3@s* k3cc4@ae* k3cc5@r) (k3cb9@match* k3cc0@e k3cc1@p k3cc2@m* k3cc3@s* k3cc4@ae* k3cc5@r)))))))) (lambda (k3cbc@e k3cbd@p) (k3cbb@match k3cbc@e k3cbd@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! k3009@ellipsis? (lambda (k3d90@x) (and (k2e02@id? k3d90@x) (k2e08@free-id=? k3d90@x (k2f91@scheme-stx '...))))) (set! k300b@underscore? (lambda (k3d92@x) (and (k2e02@id? k3d92@x) (k2e08@free-id=? k3d92@x (k2f91@scheme-stx '_))))) (set! k300d@verify-literals (lambda (k3d94@lits k3d95@expr) (for-each (lambda (k3d98@x) (if (or (not (k2e02@id? k3d98@x)) (k3009@ellipsis? k3d98@x) (k300b@underscore? k3d98@x)) (k30e7@syntax-violation '#f '"invalid literal" k3d95@expr k3d98@x) (void))) k3d94@lits))) (set! k300f@syntax-case-transformer ((lambda () ((lambda (k3d9b@build-dispatch-call k3d9d@invalid-ids-error k3d9f@gen-clause k3da1@gen-syntax-case) (begin (set! k3d9b@build-dispatch-call (lambda (k3e0c@pvars k3e0d@expr k3e0e@y k3e0f@r k3e10@mr) ((lambda (k3e16@ids k3e17@levels) ((lambda (k3e1a@labels k3e1b@new-vars) ((lambda (k3e1e@body) (list '(primitive apply) (k2d66@k2ca6@build-lambda '#f k3e1b@new-vars k3e1e@body) k3e0e@y)) (k3029@chi-expr (k2dee@add-subst (k2dc2@make-full-rib k3e16@ids k3e1a@labels) k3e0d@expr) (append (map (lambda (k3e20@label k3e21@var k3e22@level) (cons k3e20@label (k2e1c@make-binding 'syntax (cons k3e21@var k3e22@level)))) k3e1a@labels k3e1b@new-vars (map cdr k3e0c@pvars)) k3e0f@r) k3e10@mr))) (map k2d8e@gen-label k3e16@ids) (map k2d8a@gen-lexical k3e16@ids))) (map car k3e0c@pvars) (map cdr k3e0c@pvars)))) (set! k3d9d@invalid-ids-error (lambda (k3e00@id* k3e01@e k3e02@class) ((letrec ((k3e06@find (lambda (k3e08@id* k3e09@ok*) (if (null? k3e08@id*) (k30e7@syntax-violation '#f '"invalid syntax" k3e01@e) (if (k2e02@id? (car k3e08@id*)) (if (k2e0e@bound-id-member? (car k3e08@id*) k3e09@ok*) (k30e3@syntax-error (car k3e08@id*) '"duplicate " k3e02@class) (k3e06@find (cdr k3e08@id*) (cons (car k3e08@id*) k3e09@ok*))) (k30e3@syntax-error (car k3e08@id*) '"invalid " k3e02@class)))))) k3e06@find) k3e00@id* '()))) (set! k3d9f@gen-clause (lambda (k3dd8@x k3dd9@keys k3dda@clauses k3ddb@r k3ddc@mr k3ddd@pat k3dde@fender k3ddf@expr) (call-with-values (lambda () (k3005@convert-pattern k3ddd@pat k3dd9@keys)) (lambda (k3dec@k3de9 k3ded@k3deb) ((lambda (k3df0@pvars k3df1@p) (if (not (k2e0c@distinct-bound-ids? (map car k3df0@pvars))) (k3d9d@invalid-ids-error (map car k3df0@pvars) k3ddd@pat '"pattern variable") (if (not (for-all (lambda (k3df4@x) (not (k3009@ellipsis? (car k3df4@x)))) k3df0@pvars)) (k30e7@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" k3ddd@pat) ((lambda (k3df6@y) ((lambda (k3df8@test) ((lambda (k3dfa@conseq) ((lambda (k3dfc@altern) (list (k2d66@k2ca6@build-lambda '#f (list k3df6@y) (list 'if k3df8@test k3dfa@conseq k3dfc@altern)) (list '(primitive syntax-dispatch) k3dd8@x (list 'quote k3df1@p)))) (k3da1@gen-syntax-case k3dd8@x k3dd9@keys k3dda@clauses k3ddb@r k3ddc@mr))) (k3d9b@build-dispatch-call k3df0@pvars k3ddf@expr k3df6@y k3ddb@r k3ddc@mr))) (if (eq? k3dde@fender '#t) k3df6@y ((lambda (k3dfe@call) (list 'if k3df6@y k3dfe@call (list 'quote '#f))) (k3d9b@build-dispatch-call k3df0@pvars k3dde@fender k3df6@y k3ddb@r k3ddc@mr))))) (k2d8a@gen-lexical 'tmp))))) k3ded@k3deb k3dec@k3de9))))) (set! k3da1@gen-syntax-case (lambda (k3db6@x k3db7@keys k3db8@clauses k3db9@r k3dba@mr) (if (null? k3db8@clauses) (list '(primitive syntax-error) k3db6@x) ((lambda (k3dc0@t) ((lambda (k3dc2@ls/false) (if k3dc2@ls/false (apply (lambda (k3dc4@pat k3dc5@expr) (if (and (k2e02@id? k3dc4@pat) (not (k2e0e@bound-id-member? k3dc4@pat k3db7@keys)) (not (k3009@ellipsis? k3dc4@pat))) (if (k2e08@free-id=? k3dc4@pat (k2f91@scheme-stx '_)) (k3029@chi-expr k3dc5@expr k3db9@r k3dba@mr) ((lambda (k3dc8@lab k3dc9@lex) ((lambda (k3dcc@body) (list (k2d66@k2ca6@build-lambda '#f (list k3dc9@lex) k3dcc@body) k3db6@x)) (k3029@chi-expr (k2dee@add-subst (k2dc2@make-full-rib (list k3dc4@pat) (list k3dc8@lab)) k3dc5@expr) (cons (cons k3dc8@lab (k2e1c@make-binding 'syntax (cons k3dc9@lex '0))) k3db9@r) k3dba@mr))) (k2d8e@gen-label k3dc4@pat) (k2d8a@gen-lexical k3dc4@pat))) (k3d9f@gen-clause k3db6@x k3db7@keys (cdr k3db8@clauses) k3db9@r k3dba@mr k3dc4@pat '#t k3dc5@expr))) k3dc2@ls/false) ((lambda (k3dce@t) ((lambda (k3dd0@ls/false) (if k3dd0@ls/false (apply (lambda (k3dd2@pat k3dd3@fender k3dd4@expr) (k3d9f@gen-clause k3db6@x k3db7@keys (cdr k3db8@clauses) k3db9@r k3dba@mr k3dd2@pat k3dd3@fender k3dd4@expr)) k3dd0@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3dce@t))) (k3007@syntax-dispatch k3dce@t '(any any any)))) k3dc0@t))) (k3007@syntax-dispatch k3dc0@t '(any any)))) (car k3db8@clauses))))) (lambda (k3da2@e k3da3@r k3da4@mr) ((lambda (k3da8@t) ((lambda (k3daa@ls/false) (if k3daa@ls/false (apply (lambda (k3dac@expr k3dad@keys k3dae@clauses) (begin (k300d@verify-literals k3dad@keys k3da2@e) ((lambda (k3db2@x) ((lambda (k3db4@body) (list (k2d66@k2ca6@build-lambda '#f (list k3db2@x) k3db4@body) (k3029@chi-expr k3dac@expr k3da3@r k3da4@mr))) (k3da1@gen-syntax-case k3db2@x k3dad@keys k3dae@clauses k3da3@r k3da4@mr))) (k2d8a@gen-lexical 'tmp)))) k3daa@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3da8@t))) (k3007@syntax-dispatch k3da8@t '(_ any each-any . each-any)))) k3da2@e)))) '#f '#f '#f '#f)))) (set! k3011@ellipsis-map (lambda (k3e26@proc k3e27@ls . k3e2a@ls*) ((lambda (k3e2d@who) (begin (set! k3e2d@who '...) (begin (if (not (list? k3e27@ls)) (assertion-violation k3e2d@who '"not a list" k3e27@ls) (void)) (if (not (null? k3e2a@ls*)) ((lambda (k3e2e@n) (for-each (lambda (k3e30@x) (begin (if (not (list? k3e30@x)) (assertion-violation k3e2d@who '"not a list" k3e30@x) (void)) (if (not (= (length k3e30@x) k3e2e@n)) (assertion-violation k3e2d@who '"length mismatch" k3e27@ls k3e30@x) (void)))) k3e2a@ls*)) (length k3e27@ls)) (void)) (apply map k3e26@proc k3e27@ls k3e2a@ls*)))) '#f))) (set! k3013@syntax-transformer ((lambda () ((lambda (k3e33@gen-syntax k3e35@gen-ref k3e37@gen-append k3e39@gen-mappend k3e3b@gen-map k3e3d@gen-cons k3e3f@gen-vector k3e41@regen) (begin (set! k3e33@gen-syntax (lambda (k3eaa@src k3eab@e k3eac@r k3ead@maps k3eae@ellipsis? k3eaf@vec?) ((lambda (k3eb6@t) ((lambda (k3eb8@ls/false) (if (and k3eb8@ls/false (apply (lambda (k3eba@dots) (k3eae@ellipsis? k3eba@dots)) k3eb8@ls/false)) (apply (lambda (k3ebc@dots) (k30e7@syntax-violation '#f '"misplaced ellipsis in syntax form" k3eaa@src)) k3eb8@ls/false) ((lambda (k3ebe@t) ((lambda (k3ec0@ls/false) (if (and k3ec0@ls/false (apply (lambda (k3ec2@id) (k2e02@id? k3ec2@id)) k3ec0@ls/false)) (apply (lambda (k3ec4@id) ((lambda (k3ec6@label) ((lambda (k3ec8@b) ((lambda () (if (eq? (k2e1e@binding-type k3ec8@b) 'syntax) (call-with-values (lambda () ((lambda (k3ece@var.lev) (k3e35@gen-ref k3eaa@src (car k3ece@var.lev) (cdr k3ece@var.lev) k3ead@maps)) (k2e20@binding-value k3ec8@b))) (lambda (k3ed0@k3ecb k3ed1@k3ecd) ((lambda (k3ed4@maps k3ed5@var) (values (list 'ref k3ed5@var) k3ed4@maps)) k3ed1@k3ecd k3ed0@k3ecb))) (values (list 'quote k3eab@e) k3ead@maps))))) (k2e1a@label->binding k3ec6@label k3eac@r))) (k2e18@id->label k3eab@e))) k3ec0@ls/false) ((lambda (k3ed8@t) ((lambda (k3eda@ls/false) (if (and k3eda@ls/false (apply (lambda (k3edc@dots k3edd@e) (k3eae@ellipsis? k3edc@dots)) k3eda@ls/false)) (apply (lambda (k3ee0@dots k3ee1@e) (if k3eaf@vec? (k30e7@syntax-violation '#f '"misplaced ellipsis in syntax form" k3eaa@src) (k3e33@gen-syntax k3eaa@src k3ee1@e k3eac@r k3ead@maps (lambda (k3ee4@x) '#f) '#f))) k3eda@ls/false) ((lambda (k3ee6@t) ((lambda (k3ee8@ls/false) (if (and k3ee8@ls/false (apply (lambda (k3eea@x k3eeb@dots k3eec@y) (k3eae@ellipsis? k3eeb@dots)) k3ee8@ls/false)) (apply (lambda (k3ef0@x k3ef1@dots k3ef2@y) ((letrec ((k3ef6@f (lambda (k3ef8@y k3ef9@k) ((lambda (k3efc@t) ((lambda (k3efe@ls/false) (if k3efe@ls/false (apply (lambda () (k3ef9@k k3ead@maps)) k3efe@ls/false) ((lambda (k3f00@t) ((lambda (k3f02@ls/false) (if (and k3f02@ls/false (apply (lambda (k3f04@dots k3f05@y) (k3eae@ellipsis? k3f04@dots)) k3f02@ls/false)) (apply (lambda (k3f08@dots k3f09@y) (k3ef6@f k3f09@y (lambda (k3f0c@maps) (call-with-values (lambda () (k3ef9@k (cons '() k3f0c@maps))) (lambda (k3f12@k3f0f k3f13@k3f11) ((lambda (k3f16@maps k3f17@x) (if (null? (car k3f16@maps)) (k30e7@syntax-violation '#f '"extra ellipsis in syntax form" k3eaa@src) (values (k3e39@gen-mappend k3f17@x (car k3f16@maps)) (cdr k3f16@maps)))) k3f13@k3f11 k3f12@k3f0f)))))) k3f02@ls/false) ((lambda (k3f1a@t) ((lambda (k3f1c@ls/false) (if k3f1c@ls/false (apply (lambda () (call-with-values (lambda () (k3e33@gen-syntax k3eaa@src k3ef8@y k3eac@r k3ead@maps k3eae@ellipsis? k3eaf@vec?)) (lambda (k3f22@k3f1f k3f23@k3f21) ((lambda (k3f26@maps k3f27@y) (call-with-values (lambda () (k3ef9@k k3f26@maps)) (lambda (k3f2e@k3f2b k3f2f@k3f2d) ((lambda (k3f32@maps k3f33@x) (values (k3e37@gen-append k3f33@x k3f27@y) k3f32@maps)) k3f2f@k3f2d k3f2e@k3f2b)))) k3f23@k3f21 k3f22@k3f1f)))) k3f1c@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3f1a@t))) (k3007@syntax-dispatch k3f1a@t '_))) k3f00@t))) (k3007@syntax-dispatch k3f00@t '(any . any)))) k3efc@t))) (k3007@syntax-dispatch k3efc@t '()))) k3ef8@y)))) k3ef6@f) k3ef2@y (lambda (k3f36@maps) (call-with-values (lambda () (k3e33@gen-syntax k3eaa@src k3ef0@x k3eac@r (cons '() k3f36@maps) k3eae@ellipsis? '#f)) (lambda (k3f3c@k3f39 k3f3d@k3f3b) ((lambda (k3f40@maps k3f41@x) (if (null? (car k3f40@maps)) (k30e7@syntax-violation '#f '"extra ellipsis in syntax form" k3eaa@src) (values (k3e3b@gen-map k3f41@x (car k3f40@maps)) (cdr k3f40@maps)))) k3f3d@k3f3b k3f3c@k3f39)))))) k3ee8@ls/false) ((lambda (k3f44@t) ((lambda (k3f46@ls/false) (if k3f46@ls/false (apply (lambda (k3f48@x k3f49@y) (call-with-values (lambda () (k3e33@gen-syntax k3eaa@src k3f48@x k3eac@r k3ead@maps k3eae@ellipsis? '#f)) (lambda (k3f50@k3f4d k3f51@k3f4f) ((lambda (k3f54@maps k3f55@xnew) (call-with-values (lambda () (k3e33@gen-syntax k3eaa@src k3f49@y k3eac@r k3f54@maps k3eae@ellipsis? k3eaf@vec?)) (lambda (k3f5c@k3f59 k3f5d@k3f5b) ((lambda (k3f60@maps k3f61@ynew) (values (k3e3d@gen-cons k3eab@e k3f48@x k3f49@y k3f55@xnew k3f61@ynew) k3f60@maps)) k3f5d@k3f5b k3f5c@k3f59)))) k3f51@k3f4f k3f50@k3f4d)))) k3f46@ls/false) ((lambda (k3f64@t) ((lambda (k3f66@ls/false) (if k3f66@ls/false (apply (lambda (k3f68@ls) (call-with-values (lambda () (k3e33@gen-syntax k3eaa@src k3f68@ls k3eac@r k3ead@maps k3eae@ellipsis? '#t)) (lambda (k3f6e@k3f6b k3f6f@k3f6d) ((lambda (k3f72@maps k3f73@lsnew) (values (k3e3f@gen-vector k3eab@e k3f68@ls k3f73@lsnew) k3f72@maps)) k3f6f@k3f6d k3f6e@k3f6b)))) k3f66@ls/false) ((lambda (k3f76@t) ((lambda (k3f78@ls/false) (if k3f78@ls/false (apply (lambda () (values (list 'quote k3eab@e) k3ead@maps)) k3f78@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3f76@t))) (k3007@syntax-dispatch k3f76@t '_))) k3f64@t))) (k3007@syntax-dispatch k3f64@t '#(vector each-any)))) k3f44@t))) (k3007@syntax-dispatch k3f44@t '(any . any)))) k3ee6@t))) (k3007@syntax-dispatch k3ee6@t '(any any . any)))) k3ed8@t))) (k3007@syntax-dispatch k3ed8@t '(any any)))) k3ebe@t))) (k3007@syntax-dispatch k3ebe@t 'any))) k3eb6@t))) (k3007@syntax-dispatch k3eb6@t 'any))) k3eab@e))) (set! k3e35@gen-ref (lambda (k3e90@src k3e91@var k3e92@level k3e93@maps) (if (= k3e92@level '0) (values k3e91@var k3e93@maps) (if (null? k3e93@maps) (k30e7@syntax-violation '#f '"missing ellipsis in syntax form" k3e90@src) (call-with-values (lambda () (k3e35@gen-ref k3e90@src k3e91@var (- k3e92@level '1) (cdr k3e93@maps))) (lambda (k3e9c@k3e99 k3e9d@k3e9b) ((lambda (k3ea0@outer-maps k3ea1@outer-var) ((lambda (k3ea4@t) (if k3ea4@t ((lambda (k3ea6@b) (values (cdr k3ea6@b) k3e93@maps)) k3ea4@t) ((lambda (k3ea8@inner-var) (values k3ea8@inner-var (cons (cons (cons k3ea1@outer-var k3ea8@inner-var) (car k3e93@maps)) k3ea0@outer-maps))) (k2d8a@gen-lexical 'tmp)))) (assq k3ea1@outer-var (car k3e93@maps)))) k3e9d@k3e9b k3e9c@k3e99))))))) (set! k3e37@gen-append (lambda (k3e8c@x k3e8d@y) (if (fast-equal? k3e8d@y ''()) k3e8c@x (list 'append k3e8c@x k3e8d@y)))) (set! k3e39@gen-mappend (lambda (k3e88@e k3e89@map-env) (list 'apply '(primitive append) (k3e3b@gen-map k3e88@e k3e89@map-env)))) (set! k3e3b@gen-map (lambda (k3e76@e k3e77@map-env) ((lambda (k3e7a@formals k3e7b@actuals) (if (eq? (car k3e76@e) 'ref) (car k3e7b@actuals) (if (for-all (lambda (k3e7e@x) (and (eq? (car k3e7e@x) 'ref) (memq (cadr k3e7e@x) k3e7a@formals))) (cdr k3e76@e)) ((lambda (k3e80@args) (cons 'map (cons (list 'primitive (car k3e76@e)) k3e80@args))) (map ((lambda (k3e82@r) (lambda (k3e84@x) (cdr (assq (cadr k3e84@x) k3e82@r)))) (map cons k3e7a@formals k3e7b@actuals)) (cdr k3e76@e))) (cons* 'map (list 'lambda k3e7a@formals k3e76@e) k3e7b@actuals)))) (map cdr k3e77@map-env) (map (lambda (k3e86@x) (list 'ref (car k3e86@x))) k3e77@map-env)))) (set! k3e3d@gen-cons (lambda (k3e66@e k3e67@x k3e68@y k3e69@xnew k3e6a@ynew) ((lambda (k3e70@t) (if (memv k3e70@t '(quote)) (if (eq? (car k3e69@xnew) 'quote) ((lambda (k3e72@xnew k3e73@ynew) (if (and (eq? k3e72@xnew k3e67@x) (eq? k3e73@ynew k3e68@y)) (list 'quote k3e66@e) (list 'quote (cons k3e72@xnew k3e73@ynew)))) (cadr k3e69@xnew) (cadr k3e6a@ynew)) (if (null? (cadr k3e6a@ynew)) (list 'list k3e69@xnew) (list 'cons k3e69@xnew k3e6a@ynew))) (if (memv k3e70@t '(list)) (cons 'list (cons k3e69@xnew (cdr k3e6a@ynew))) (list 'cons k3e69@xnew k3e6a@ynew)))) (car k3e6a@ynew)))) (set! k3e3f@gen-vector (lambda (k3e60@e k3e61@ls k3e62@lsnew) (if (eq? (car k3e62@lsnew) 'quote) (if (eq? (cadr k3e62@lsnew) k3e61@ls) (list 'quote k3e60@e) (list 'quote (list->vector (cadr k3e62@lsnew)))) (if (eq? (car k3e62@lsnew) 'list) (cons 'vector (cdr k3e62@lsnew)) (list 'list->vector k3e62@lsnew))))) (set! k3e41@regen (lambda (k3e5a@x) ((lambda (k3e5c@t) (if (memv k3e5c@t '(ref)) (cadr k3e5a@x) (if (memv k3e5c@t '(primitive)) (list 'primitive (cadr k3e5a@x)) (if (memv k3e5c@t '(quote)) (list 'quote (cadr k3e5a@x)) (if (memv k3e5c@t '(lambda)) (k2d66@k2ca6@build-lambda '#f (cadr k3e5a@x) (k3e41@regen (caddr k3e5a@x))) (if (memv k3e5c@t '(map)) ((lambda (k3e5e@ls) (cons '(primitive ellipsis-map) k3e5e@ls)) (map k3e41@regen (cdr k3e5a@x))) (cons (list 'primitive (car k3e5a@x)) (map k3e41@regen (cdr k3e5a@x))))))))) (car k3e5a@x)))) (lambda (k3e42@e k3e43@r k3e44@mr) ((lambda (k3e48@t) ((lambda (k3e4a@ls/false) (if k3e4a@ls/false (apply (lambda (k3e4c@x) (call-with-values (lambda () (k3e33@gen-syntax k3e42@e k3e4c@x k3e43@r '() k3009@ellipsis? '#f)) (lambda (k3e52@k3e4f k3e53@k3e51) ((lambda (k3e56@maps k3e57@e) (k3e41@regen k3e57@e)) k3e53@k3e51 k3e52@k3e4f)))) k3e4a@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3e48@t))) (k3007@syntax-dispatch k3e48@t '(_ any)))) k3e42@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! k3015@core-macro-transformer (lambda (k3f7a@name) ((lambda (k3f7c@t) (if (memv k3f7c@t '(quote)) k2fb7@quote-transformer (if (memv k3f7c@t '(lambda)) k2fbb@lambda-transformer (if (memv k3f7c@t '(case-lambda)) k2fb9@case-lambda-transformer (if (memv k3f7c@t '(letrec)) k2f9f@letrec-transformer (if (memv k3f7c@t '(letrec*)) k2fa1@letrec*-transformer (if (memv k3f7c@t '(if)) k2faf@if-transformer (if (memv k3f7c@t '(and)) k2fb1@and-transformer (if (memv k3f7c@t '(or)) k2fb3@or-transformer (if (memv k3f7c@t '(foreign-call)) k3003@foreign-call-transformer (if (memv k3f7c@t '(syntax-case)) k300f@syntax-case-transformer (if (memv k3f7c@t '(syntax)) k3013@syntax-transformer (if (memv k3f7c@t '(type-descriptor)) k2fa5@type-descriptor-transformer (if (memv k3f7c@t '(record-type-descriptor)) k2fa7@record-type-descriptor-transformer (if (memv k3f7c@t '(record-constructor-descriptor)) k2fa9@record-constructor-descriptor-transformer (if (memv k3f7c@t '(fluid-let-syntax)) k2fa3@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" k3f7a@name))))))))))))))))) k3f7a@name))) (set! k3017@symbol-macro (lambda (k3f7e@x k3f7f@set) ((lambda (k3f82@t) ((lambda (k3f84@ls/false) (if (and k3f84@ls/false (apply (lambda (k3f86@name) (and (k2e02@id? k3f86@name) (memq (k2e04@id->sym k3f86@name) k3f7f@set))) k3f84@ls/false)) (apply (lambda (k3f88@name) (k2fbd@bless (list 'quote k3f88@name))) k3f84@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3f82@t))) (k3007@syntax-dispatch k3f82@t '(_ any)))) k3f7e@x))) (set! k3019@macro-transformer (lambda (k3f8a@x) (if (procedure? k3f8a@x) k3f8a@x (if (symbol? k3f8a@x) ((lambda (k3f8c@t) (if (memv k3f8c@t '(define-record-type)) k2ffb@define-record-type-macro (if (memv k3f8c@t '(define-struct)) k2ff9@define-struct-macro (if (memv k3f8c@t '(include)) k2fef@include-macro (if (memv k3f8c@t '(cond)) k2feb@cond-macro (if (memv k3f8c@t '(let)) k2fc3@let-macro (if (memv k3f8c@t '(do)) k2fe3@do-macro (if (memv k3f8c@t '(or)) k2fe7@or-macro (if (memv k3f8c@t '(and)) k2fe9@and-macro (if (memv k3f8c@t '(let*)) k2fe5@let*-macro (if (memv k3f8c@t '(let-values)) k2fc5@let-values-macro (if (memv k3f8c@t '(let*-values)) k2fc7@let*-values-macro (if (memv k3f8c@t '(syntax-rules)) k2ff3@syntax-rules-macro (if (memv k3f8c@t '(quasiquote)) k2ff5@quasiquote-macro (if (memv k3f8c@t '(quasisyntax)) k2ff7@quasisyntax-macro (if (memv k3f8c@t '(with-syntax)) k2fbf@with-syntax-macro (if (memv k3f8c@t '(when)) k2fab@when-macro (if (memv k3f8c@t '(unless)) k2fad@unless-macro (if (memv k3f8c@t '(case)) k2fb5@case-macro (if (memv k3f8c@t '(identifier-syntax)) k2fe1@identifier-syntax-macro (if (memv k3f8c@t '(time)) k2fd9@time-macro (if (memv k3f8c@t '(delay)) k2fdb@delay-macro (if (memv k3f8c@t '(assert)) k2fdd@assert-macro (if (memv k3f8c@t '(endianness)) k2fdf@endianness-macro (if (memv k3f8c@t '(guard)) k2fd5@guard-macro (if (memv k3f8c@t '(define-enumeration)) k2fd7@define-enumeration-macro (if (memv k3f8c@t '(trace-lambda)) k2fc9@trace-lambda-macro (if (memv k3f8c@t '(trace-define)) k2fcb@trace-define-macro (if (memv k3f8c@t '(trace-define-syntax)) k2fcd@trace-define-syntax-macro (if (memv k3f8c@t '(trace-let-syntax)) k2fd1@trace-let-syntax-macro (if (memv k3f8c@t '(trace-letrec-syntax)) k2fd3@trace-letrec-syntax-macro (if (memv k3f8c@t '(define-condition-type)) k2ffd@define-condition-type-macro (if (memv k3f8c@t '(parameterize)) k3001@parameterize-macro (if (memv k3f8c@t '(include-into)) k2ff1@include-into-macro (if (memv k3f8c@t '(eol-style)) (lambda (k3f8e@x) (k3017@symbol-macro k3f8e@x '(none lf cr crlf nel crnel ls))) (if (memv k3f8c@t '(error-handling-mode)) (lambda (k3f90@x) (k3017@symbol-macro k3f90@x '(ignore raise replace))) (if (memv k3f8c@t '(buffer-mode)) (lambda (k3f92@x) (k3017@symbol-macro k3f92@x '(none line block))) (if (memv k3f8c@t '(file-options)) k2d7d@file-options-macro (if (memv k3f8c@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) k2fff@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" k3f8a@x)))))))))))))))))))))))))))))))))))))))) k3f8a@x) (error 'core-macro-transformer '"BUG: invalid macro" k3f8a@x))))) (set! k301b@local-macro-transformer (lambda (k3f94@x) (car k3f94@x))) (set! k301d@do-macro-call (lambda (k3f96@transformer k3f97@expr) ((lambda (k3f9a@out) (begin ((letrec ((k3f9c@f (lambda (k3f9e@x) (if (not (k2dce@stx? k3f9e@x)) (if (pair? k3f9e@x) (begin (k3f9c@f (car k3f9e@x)) (k3f9c@f (cdr k3f9e@x))) (if (vector? k3f9e@x) (vector-for-each k3f9c@f k3f9e@x) (if (symbol? k3f9e@x) (k30e7@syntax-violation '#f '"raw symbol encountered in output of macro" k3f97@expr k3f9e@x) (void)))) (void))))) k3f9c@f) k3f9a@out) (k2dec@add-mark (k2de4@gen-mark) k3f9a@out k3f97@expr))) (k3f96@transformer (k2dec@add-mark k2de6@anti-mark k3f97@expr '#f))))) (set! k301f@chi-macro (lambda (k3fa0@p k3fa1@e) (k301d@do-macro-call (k3019@macro-transformer k3fa0@p) k3fa1@e))) (set! k3021@chi-local-macro (lambda (k3fa4@p k3fa5@e) (k301d@do-macro-call (k301b@local-macro-transformer k3fa4@p) k3fa5@e))) (set! k3023@chi-global-macro (lambda (k3fa8@p k3fa9@e) ((lambda (k3fac@lib k3fad@loc) (begin (k2c2e@k2a7d@visit-library k3fac@lib) ((lambda (k3fb0@x) ((lambda (k3fb2@transformer) (k301d@do-macro-call k3fb2@transformer k3fa9@e)) (if (procedure? k3fb0@x) k3fb0@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" k3fb0@x)))) (symbol-value k3fad@loc)))) (car k3fa8@p) (cdr k3fa8@p)))) (set! k3025@chi-expr* (lambda (k3fb4@e* k3fb5@r k3fb6@mr) (if (null? k3fb4@e*) '() ((lambda (k3fba@e) (cons k3fba@e (k3025@chi-expr* (cdr k3fb4@e*) k3fb5@r k3fb6@mr))) (k3029@chi-expr (car k3fb4@e*) k3fb5@r k3fb6@mr))))) (set! k3027@chi-application (lambda (k3fbc@e k3fbd@r k3fbe@mr) ((lambda (k3fc2@t) ((lambda (k3fc4@ls/false) (if k3fc4@ls/false (apply (lambda (k3fc6@rator k3fc7@rands) ((lambda (k3fca@rator) (cons k3fca@rator (k3025@chi-expr* k3fc7@rands k3fbd@r k3fbe@mr))) (k3029@chi-expr k3fc6@rator k3fbd@r k3fbe@mr))) k3fc4@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3fc2@t))) (k3007@syntax-dispatch k3fc2@t '(any . each-any)))) k3fbc@e))) (set! k3029@chi-expr (lambda (k3fcc@e k3fcd@r k3fce@mr) (call-with-values (lambda () (k2e24@syntax-type k3fcc@e k3fcd@r)) (lambda (k3fd8@k3fd3 k3fd9@k3fd5 k3fda@k3fd7) ((lambda (k3fde@kwd k3fdf@value k3fe0@type) ((lambda (k3fe4@t) (if (memv k3fe4@t '(core-macro)) ((lambda (k3fe6@transformer) (k3fe6@transformer k3fcc@e k3fcd@r k3fce@mr)) (k3015@core-macro-transformer k3fdf@value)) (if (memv k3fe4@t '(global)) ((lambda (k3fe8@lib) ((lambda (k3fea@loc) ((lambda () (begin ((k306f@inv-collector) k3fe8@lib) k3fea@loc)))) (cdr k3fdf@value))) (car k3fdf@value)) (if (memv k3fe4@t '(core-prim)) ((lambda (k3fec@name) (list 'primitive k3fec@name)) k3fdf@value) (if (memv k3fe4@t '(call)) (k3027@chi-application k3fcc@e k3fcd@r k3fce@mr) (if (memv k3fe4@t '(lexical)) ((lambda (k3fee@lex) k3fee@lex) (k2f93@lexical-var k3fdf@value)) (if (memv k3fe4@t '(global-macro global-macro!)) (k3029@chi-expr (k3023@chi-global-macro k3fdf@value k3fcc@e) k3fcd@r k3fce@mr) (if (memv k3fe4@t '(local-macro local-macro!)) (k3029@chi-expr (k3021@chi-local-macro k3fdf@value k3fcc@e) k3fcd@r k3fce@mr) (if (memv k3fe4@t '(macro macro!)) (k3029@chi-expr (k301f@chi-macro k3fdf@value k3fcc@e) k3fcd@r k3fce@mr) (if (memv k3fe4@t '(constant)) ((lambda (k3ff0@datum) (list 'quote k3ff0@datum)) k3fdf@value) (if (memv k3fe4@t '(set!)) (k302b@chi-set! k3fcc@e k3fcd@r k3fce@mr) (if (memv k3fe4@t '(begin)) ((lambda (k3ff2@t) ((lambda (k3ff4@ls/false) (if k3ff4@ls/false (apply (lambda (k3ff6@x k3ff7@x*) (k2d69@k2cd8@build-sequence '#f (k3025@chi-expr* (cons k3ff6@x k3ff7@x*) k3fcd@r k3fce@mr))) k3ff4@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3ff2@t))) (k3007@syntax-dispatch k3ff2@t '(_ any . each-any)))) k3fcc@e) (if (memv k3fe4@t '(let-syntax letrec-syntax)) ((lambda (k3ffa@t) ((lambda (k3ffc@ls/false) (if (and k3ffc@ls/false (apply (lambda (k3ffe@xlhs* k3fff@xrhs* k4000@xbody k4001@xbody*) (if (not (k2e0a@valid-bound-ids? k3ffe@xlhs*)) (k30e7@syntax-violation '#f '"invalid identifiers" k3fcc@e) (void))) k3ffc@ls/false)) (apply (lambda (k4006@xlhs* k4007@xrhs* k4008@xbody k4009@xbody*) ((lambda (k400e@xlab*) ((lambda (k4010@xrib) ((lambda (k4012@xb*) ((lambda () (k2d69@k2cd8@build-sequence '#f (k3025@chi-expr* (map (lambda (k4014@x) (k2dee@add-subst k4010@xrib k4014@x)) (cons k4008@xbody k4009@xbody*)) (append (map cons k400e@xlab* k4012@xb*) k3fcd@r) (append (map cons k400e@xlab* k4012@xb*) k3fce@mr)))))) (map (lambda (k4016@x) (k2e3a@make-eval-transformer (k3061@expand-transformer (if (eq? k3fe0@type 'let-syntax) k4016@x (k2dee@add-subst k4010@xrib k4016@x)) k3fce@mr))) k4007@xrhs*))) (k2dc2@make-full-rib k4006@xlhs* k400e@xlab*))) (map k2d8e@gen-label k4006@xlhs*))) k3ffc@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k3ffa@t))) (k3007@syntax-dispatch k3ffa@t '(_ #(each (any any)) any . each-any)))) k3fcc@e) (if (memv k3fe4@t '(displaced-lexical)) (k30e7@syntax-violation '#f '"identifier out of context" k3fcc@e) (if (memv k3fe4@t '(syntax)) (k30e7@syntax-violation '#f '"reference to pattern variable outside a syntax form" k3fcc@e) (if (memv k3fe4@t '(define define-syntax module import library)) (k30e7@syntax-violation '#f (string-append ((lambda (k4018@t) (if (memv k4018@t '(define)) '"a definition" (if (memv k4018@t '(define-syntax)) '"a define-syntax" (if (memv k4018@t '(module)) '"a module definition" (if (memv k4018@t '(library)) '"a library definition" (if (memv k4018@t '(import)) '"an import declaration" (if (memv k4018@t '(export)) '"an export declaration" '"a non-expression"))))))) k3fe0@type) '" was found where an expression was expected") k3fcc@e) (if (memv k3fe4@t '(mutable)) (k30e7@syntax-violation '#f '"attempt to reference an unexportable variable" k3fcc@e) (k30e7@syntax-violation '#f '"invalid expression" k3fcc@e)))))))))))))))))) k3fe0@type)) k3fda@k3fd7 k3fd9@k3fd5 k3fd8@k3fd3))))) (set! k302b@chi-set! (lambda (k401a@e k401b@r k401c@mr) ((lambda (k4020@t) ((lambda (k4022@ls/false) (if (and k4022@ls/false (apply (lambda (k4024@x k4025@v) (k2e02@id? k4024@x)) k4022@ls/false)) (apply (lambda (k4028@x k4029@v) (call-with-values (lambda () (k2e24@syntax-type k4028@x k401b@r)) (lambda (k4032@k402d k4033@k402f k4034@k4031) ((lambda (k4038@kwd k4039@value k403a@type) ((lambda (k403e@t) (if (memv k403e@t '(lexical)) (begin (k2f97@set-lexical-mutable! k4039@value '#t) (list 'set! (k2f93@lexical-var k4039@value) (k3029@chi-expr k4029@v k401b@r k401c@mr))) (if (memv k403e@t '(core-prim)) (k30e7@syntax-violation '#f '"cannot modify imported core primitive" k401a@e) (if (memv k403e@t '(global)) (k30e7@syntax-violation '#f '"attempt to modify imported binding" k401a@e) (if (memv k403e@t '(global-macro!)) (k3029@chi-expr (k3023@chi-global-macro k4039@value k401a@e) k401b@r k401c@mr) (if (memv k403e@t '(local-macro!)) (k3029@chi-expr (k3021@chi-local-macro k4039@value k401a@e) k401b@r k401c@mr) (if (memv k403e@t '(mutable)) (k30e7@syntax-violation '#f '"attempt to assign to an unexportable variable" k401a@e) (k30e7@syntax-violation '#f '"invalid syntax" k401a@e)))))))) k403a@type)) k4034@k4031 k4033@k402f k4032@k402d)))) k4022@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k4020@t))) (k3007@syntax-dispatch k4020@t '(_ any any)))) k401a@e))) (set! k302d@verify-formals (lambda (k4040@fmls k4041@stx) ((lambda (k4044@t) ((lambda (k4046@ls/false) (if k4046@ls/false (apply (lambda (k4048@x*) (if (not (k2e0a@valid-bound-ids? k4048@x*)) (k2fc1@invalid-fmls-error k4041@stx k4040@fmls) (void))) k4046@ls/false) ((lambda (k404a@t) ((lambda (k404c@ls/false) (if k404c@ls/false (apply (lambda (k404e@x* k404f@x) (if (not (k2e0a@valid-bound-ids? (cons k404f@x k404e@x*))) (k2fc1@invalid-fmls-error k4041@stx k4040@fmls) (void))) k404c@ls/false) ((lambda (k4052@t) ((lambda (k4054@ls/false) (if k4054@ls/false (apply (lambda () (k30e7@syntax-violation '#f '"invalid syntax" k4041@stx)) k4054@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k4052@t))) (k3007@syntax-dispatch k4052@t '_))) k404a@t))) (k3007@syntax-dispatch k404a@t '#(each+ any () any)))) k4044@t))) (k3007@syntax-dispatch k4044@t 'each-any))) k4040@fmls))) (set! k302f@chi-lambda-clause (lambda (k4056@stx k4057@fmls k4058@body* k4059@r k405a@mr) ((lambda (k4060@t) ((lambda (k4062@ls/false) (if k4062@ls/false (apply (lambda (k4064@x*) (begin (k302d@verify-formals k4057@fmls k4056@stx) ((lambda (k4066@lex* k4067@lab*) (values k4066@lex* (k303f@chi-internal (k2dee@add-subst (k2dc2@make-full-rib k4064@x* k4067@lab*) k4058@body*) (k2f9b@add-lexicals k4067@lab* k4066@lex* k4059@r) k405a@mr))) (map k2d8a@gen-lexical k4064@x*) (map k2d8e@gen-label k4064@x*)))) k4062@ls/false) ((lambda (k406a@t) ((lambda (k406c@ls/false) (if k406c@ls/false (apply (lambda (k406e@x* k406f@x) (begin (k302d@verify-formals k4057@fmls k4056@stx) ((lambda (k4072@lex* k4073@lab* k4074@lex k4075@lab) (values (append k4072@lex* k4074@lex) (k303f@chi-internal (k2dee@add-subst (k2dc2@make-full-rib (cons k406f@x k406e@x*) (cons k4075@lab k4073@lab*)) k4058@body*) (k2f9b@add-lexicals (cons k4075@lab k4073@lab*) (cons k4074@lex k4072@lex*) k4059@r) k405a@mr))) (map k2d8a@gen-lexical k406e@x*) (map k2d8e@gen-label k406e@x*) (k2d8a@gen-lexical k406f@x) (k2d8e@gen-label k406f@x)))) k406c@ls/false) ((lambda (k407a@t) ((lambda (k407c@ls/false) (if k407c@ls/false (apply (lambda () (k30e7@syntax-violation '#f '"invalid syntax" k4057@fmls)) k407c@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k407a@t))) (k3007@syntax-dispatch k407a@t '_))) k406a@t))) (k3007@syntax-dispatch k406a@t '#(each+ any () any)))) k4060@t))) (k3007@syntax-dispatch k4060@t 'each-any))) k4057@fmls))) (set! k3031@chi-lambda-clause* (lambda (k407e@stx k407f@fmls* k4080@body** k4081@r k4082@mr) (if (null? k407f@fmls*) (values '() '()) (call-with-values (lambda () (k302f@chi-lambda-clause k407e@stx (car k407f@fmls*) (car k4080@body**) k4081@r k4082@mr)) (lambda (k408c@k4089 k408d@k408b) ((lambda (k4090@b k4091@a) (call-with-values (lambda () (k3031@chi-lambda-clause* k407e@stx (cdr k407f@fmls*) (cdr k4080@body**) k4081@r k4082@mr)) (lambda (k4098@k4095 k4099@k4097) ((lambda (k409c@b* k409d@a*) (values (cons k4091@a k409d@a*) (cons k4090@b k409c@b*))) k4099@k4097 k4098@k4095)))) k408d@k408b k408c@k4089)))))) (set! k3033@chi-defun (lambda (k40a0@x k40a1@r k40a2@mr) ((lambda (k40a6@fmls k40a7@body*) (call-with-values (lambda () (k302f@chi-lambda-clause k40a6@fmls k40a6@fmls k40a7@body* k40a1@r k40a2@mr)) (lambda (k40ae@k40ab k40af@k40ad) ((lambda (k40b2@body k40b3@fmls) (k2d66@k2ca6@build-lambda '#f k40b3@fmls k40b2@body)) k40af@k40ad k40ae@k40ab)))) (car k40a0@x) (cdr k40a0@x)))) (set! k3035@chi-rhs (lambda (k40b6@rhs k40b7@r k40b8@mr) ((lambda (k40bc@t) (if (memv k40bc@t '(defun)) (k3033@chi-defun (cdr k40b6@rhs) k40b7@r k40b8@mr) (if (memv k40bc@t '(expr)) ((lambda (k40be@expr) (k3029@chi-expr k40be@expr k40b7@r k40b8@mr)) (cdr k40b6@rhs)) (if (memv k40bc@t '(top-expr)) ((lambda (k40c0@expr) (k2d69@k2cd8@build-sequence '#f (list (k3029@chi-expr k40c0@expr k40b7@r k40b8@mr) (k2d6a@k2cda@build-void)))) (cdr k40b6@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" k40b6@rhs))))) (car k40b6@rhs)))) (set! k3037@expand-interaction-rhs*/init* (lambda (k40c2@lhs* k40c3@rhs* k40c4@init* k40c5@r k40c6@mr) ((letrec ((k40cc@f (lambda (k40ce@lhs* k40cf@rhs*) (if (null? k40ce@lhs*) (map (lambda (k40d2@x) (k3029@chi-expr k40d2@x k40c5@r k40c6@mr)) k40c4@init*) ((lambda (k40d4@lhs k40d5@rhs) ((lambda (k40d8@t) (if (memv k40d8@t '(defun)) ((lambda (k40da@rhs) (cons (list 'set! k40d4@lhs k40da@rhs) (k40cc@f (cdr k40ce@lhs*) (cdr k40cf@rhs*)))) (k3033@chi-defun (cdr k40d5@rhs) k40c5@r k40c6@mr)) (if (memv k40d8@t '(expr)) ((lambda (k40dc@rhs) (cons (list 'set! k40d4@lhs k40dc@rhs) (k40cc@f (cdr k40ce@lhs*) (cdr k40cf@rhs*)))) (k3029@chi-expr (cdr k40d5@rhs) k40c5@r k40c6@mr)) (if (memv k40d8@t '(top-expr)) ((lambda (k40de@e) (cons k40de@e (k40cc@f (cdr k40ce@lhs*) (cdr k40cf@rhs*)))) (k3029@chi-expr (cdr k40d5@rhs) k40c5@r k40c6@mr)) (error 'expand-interaction '"invallid" k40d5@rhs))))) (car k40d5@rhs))) (car k40ce@lhs*) (car k40cf@rhs*)))))) k40cc@f) k40c2@lhs* k40c3@rhs*))) (set! k3039@chi-rhs* (lambda (k40e0@rhs* k40e1@r k40e2@mr) ((letrec ((k40e6@f (lambda (k40e8@ls) (if (null? k40e8@ls) '() ((lambda (k40ea@a) (cons k40ea@a (k40e6@f (cdr k40e8@ls)))) (k3035@chi-rhs (car k40e8@ls) k40e1@r k40e2@mr)))))) k40e6@f) k40e0@rhs*))) (set! k303b@find-bound=? (lambda (k40ec@x k40ed@lhs* k40ee@rhs*) (if (null? k40ed@lhs*) '#f (if (k2e06@bound-id=? k40ec@x (car k40ed@lhs*)) (car k40ee@rhs*) (k303b@find-bound=? k40ec@x (cdr k40ed@lhs*) (cdr k40ee@rhs*)))))) (set! k303d@find-dups (lambda (k40f2@ls) ((letrec ((k40f4@f (lambda (k40f6@ls k40f7@dups) (if (null? k40f6@ls) k40f7@dups ((lambda (k40fa@t) (if k40fa@t ((lambda (k40fc@x) (k40f4@f (cdr k40f6@ls) (cons (list (car k40f6@ls) k40fc@x) k40f7@dups))) k40fa@t) (k40f4@f (cdr k40f6@ls) k40f7@dups))) (k303b@find-bound=? (car k40f6@ls) (cdr k40f6@ls) (cdr k40f6@ls))))))) k40f4@f) k40f2@ls '()))) (set! k303f@chi-internal (lambda (k40fe@e* k40ff@r k4100@mr) ((lambda (k4104@rib) (call-with-values (lambda () (k305f@chi-body* (map (lambda (k4116@x) (k2dee@add-subst k4104@rib k4116@x)) (k2e00@syntax->list k40fe@e*)) k40ff@r k4100@mr '() '() '() '() '() k4104@rib '#f)) (lambda (k4118@k4107 k4119@k4109 k411a@k410b k411b@k410d k411c@k410f k411d@k4111 k411e@k4113 k411f@k4115) ((lambda (k4128@_exp* k4129@kwd* k412a@mod** k412b@rhs* k412c@lex* k412d@mr k412e@r k412f@e*) (begin (if (null? k412f@e*) (k30e7@syntax-violation '#f '"no expression in body" k412f@e*) (void)) ((lambda (k4138@init*) ((lambda (k413a@rhs*) ((lambda () (k2d6c@k2cde@build-letrec* '#f (reverse k412c@lex*) (reverse k413a@rhs*) (k2d69@k2cd8@build-sequence '#f k4138@init*))))) (k3039@chi-rhs* k412b@rhs* k412e@r k412d@mr))) (k3025@chi-expr* (append (apply append (reverse k412a@mod**)) k412f@e*) k412e@r k412d@mr)))) k411f@k4115 k411e@k4113 k411d@k4111 k411c@k410f k411b@k410d k411a@k410b k4119@k4109 k4118@k4107)))) (k2db6@make-empty-rib)))) (set! k3041@parse-module (lambda (k413c@e) ((lambda (k413e@t) ((lambda (k4140@ls/false) (if k4140@ls/false (apply (lambda (k4142@export* k4143@b*) (begin (if (not (for-all k2e02@id? k4142@export*)) (k30e7@syntax-violation '#f '"module exports must be identifiers" k413c@e) (void)) (values '#f (list->vector k4142@export*) k4143@b*))) k4140@ls/false) ((lambda (k4146@t) ((lambda (k4148@ls/false) (if k4148@ls/false (apply (lambda (k414a@name k414b@export* k414c@b*) (begin (if (not (k2e02@id? k414a@name)) (k30e7@syntax-violation '#f '"module name must be an identifier" k413c@e) (void)) (if (not (for-all k2e02@id? k414b@export*)) (k30e7@syntax-violation '#f '"module exports must be identifiers" k413c@e) (void)) (values k414a@name (list->vector k414b@export*) k414c@b*))) k4148@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k4146@t))) (k3007@syntax-dispatch k4146@t '(_ any each-any . each-any)))) k413e@t))) (k3007@syntax-dispatch k413e@t '(_ each-any . each-any)))) k413c@e))) (set! k304b@module-interface? (lambda (k4150@x) (and (simple-struct? k4150@x) (eq? (simple-struct-name k4150@x) 'module-interface)))) (set! k304d@module-interface-first-mark (lambda (k4152@x) (simple-struct-ref k4152@x '0))) (set! k304f@set-module-interface-first-mark! (lambda (k4154@x k4155@val) (simple-struct-set! k4154@x '0 k4155@val))) (set! k3051@module-interface-exp-id-vec (lambda (k4158@x) (simple-struct-ref k4158@x '1))) (set! k3053@set-module-interface-exp-id-vec! (lambda (k415a@x k415b@val) (simple-struct-set! k415a@x '1 k415b@val))) (set! k3055@module-interface-exp-lab-vec (lambda (k415e@x) (simple-struct-ref k415e@x '2))) (set! k3057@set-module-interface-exp-lab-vec! (lambda (k4160@x k4161@val) (simple-struct-set! k4160@x '2 k4161@val))) (set! k3059@dummy '3) (set! k305b@module-interface-exp-id* (lambda (k4164@iface k4165@id) ((lambda (k4169@diff-marks) (begin (set! k4169@diff-marks (lambda (k4170@ls k4171@x) (begin (if (null? k4170@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (k4174@a) (if (eq? k4174@a k4171@x) '() (cons k4174@a (k4169@diff-marks (cdr k4170@ls) k4171@x)))) (car k4170@ls))))) ((lambda (k416a@diff k416b@id-vec) (if (null? k416a@diff) k416b@id-vec (vector-map (lambda (k416e@x) (make-simple-struct 'stx '5 (list (k2dd0@stx-expr k416e@x) (append k416a@diff (k2dd4@stx-mark* k416e@x)) '() '()))) k416b@id-vec))) (k4169@diff-marks (k2dd4@stx-mark* k4165@id) (k304d@module-interface-first-mark k4164@iface)) (k3051@module-interface-exp-id-vec k4164@iface)))) '#f))) (set! k305d@chi-internal-module (lambda (k4176@e k4177@r k4178@mr k4179@lex* k417a@rhs* k417b@mod** k417c@kwd*) (call-with-values (lambda () (k3041@parse-module k4176@e)) (lambda (k418a@k4185 k418b@k4187 k418c@k4189) ((lambda (k4190@e* k4191@exp-id* k4192@name) ((lambda (k4196@rib) ((lambda (k4198@e*) ((lambda () (call-with-values (lambda () (k305f@chi-body* k4198@e* k4177@r k4178@mr k4179@lex* k417a@rhs* k417b@mod** k417c@kwd* '() k4196@rib '#f)) (lambda (k41aa@k419b k41ab@k419d k41ac@k419f k41ad@k41a1 k41ae@k41a3 k41af@k41a5 k41b0@k41a7 k41b1@k41a9) ((lambda (k41ba@_exp* k41bb@kwd* k41bc@mod** k41bd@rhs* k41be@lex* k41bf@mr k41c0@r k41c1@e*) ((lambda (k41ca@exp-lab* k41cb@mod**) (if (not k4192@name) (values k41be@lex* k41bd@rhs* k4191@exp-id* k41ca@exp-lab* k41c0@r k41bf@mr k41cb@mod** k41bb@kwd*) ((lambda (k41ce@lab k41cf@iface) (values k41be@lex* k41bd@rhs* (vector k4192@name) (vector k41ce@lab) (cons (cons k41ce@lab (cons '$module k41cf@iface)) k41c0@r) (cons (cons k41ce@lab (cons '$module k41cf@iface)) k41bf@mr) k41cb@mod** k41bb@kwd*)) (k2d8e@gen-label 'module) (make-simple-struct 'module-interface '4 (list (car (k2dd4@stx-mark* k4192@name)) (vector-map (lambda (k41d2@x) (make-simple-struct 'stx '5 (list (k2dd0@stx-expr k41d2@x) (k2dd4@stx-mark* k41d2@x) '() '()))) k4191@exp-id*) k41ca@exp-lab*))))) (vector-map (lambda (k41d4@x) (or (k2e18@id->label (make-simple-struct 'stx '5 (list (k2e04@id->sym k41d4@x) (k2dd4@stx-mark* k41d4@x) (list k4196@rib) '()))) (k30e7@syntax-violation '#f '"cannot find module export" k41d4@x))) k4191@exp-id*) (cons k41c1@e* k41bc@mod**))) k41b1@k41a9 k41b0@k41a7 k41af@k41a5 k41ae@k41a3 k41ad@k41a1 k41ac@k419f k41ab@k419d k41aa@k419b)))))) (map (lambda (k41d6@x) (k2dee@add-subst k4196@rib k41d6@x)) (k2e00@syntax->list k4190@e*)))) (k2db6@make-empty-rib))) k418c@k4189 k418b@k4187 k418a@k4185))))) (set! k305f@chi-body* (lambda (k41d8@e* k41d9@r k41da@mr k41db@lex* k41dc@rhs* k41dd@mod** k41de@kwd* k41df@exp* k41e0@rib k41e1@top?) (if (null? k41d8@e*) (values k41d8@e* k41d9@r k41da@mr k41db@lex* k41dc@rhs* k41dd@mod** k41de@kwd* k41df@exp*) ((lambda (k41ec@e) (call-with-values (lambda () (k2e24@syntax-type k41ec@e k41d9@r)) (lambda (k41f4@k41ef k41f5@k41f1 k41f6@k41f3) ((lambda (k41fa@kwd k41fb@value k41fc@type) ((lambda (k4200@kwd*) ((lambda (k4202@t) (if (memv k4202@t '(define)) (call-with-values (lambda () (k2f8b@parse-define k41ec@e)) (lambda (k4208@k4205 k4209@k4207) ((lambda (k420c@rhs k420d@id) (begin (if (k2e0e@bound-id-member? k420d@id k4200@kwd*) (k30e7@syntax-violation '#f '"cannot redefine keyword" k41ec@e) (void)) (call-with-values (lambda () (k2d92@gen-define-label+loc k420d@id k41e0@rib)) (lambda (k4214@k4211 k4215@k4213) ((lambda (k4218@lex k4219@lab) (begin (k2db8@extend-rib! k41e0@rib k420d@id k4219@lab) (k305f@chi-body* (cdr k41d8@e*) (k2f99@add-lexical k4219@lab k4218@lex k41d9@r) k41da@mr (cons k4218@lex k41db@lex*) (cons k420c@rhs k41dc@rhs*) k41dd@mod** k4200@kwd* k41df@exp* k41e0@rib k41e1@top?))) k4215@k4213 k4214@k4211))))) k4209@k4207 k4208@k4205))) (if (memv k4202@t '(define-syntax)) (call-with-values (lambda () (k2f8d@parse-define-syntax k41ec@e)) (lambda (k4220@k421d k4221@k421f) ((lambda (k4224@rhs k4225@id) (begin (if (k2e0e@bound-id-member? k4225@id k4200@kwd*) (k30e7@syntax-violation '#f '"cannot redefine keyword" k41ec@e) (void)) ((lambda (k4228@lab k4229@expanded-rhs) (begin (k2db8@extend-rib! k41e0@rib k4225@id k4228@lab) ((lambda (k422c@b) (k305f@chi-body* (cdr k41d8@e*) (cons (cons k4228@lab k422c@b) k41d9@r) (cons (cons k4228@lab k422c@b) k41da@mr) k41db@lex* k41dc@rhs* k41dd@mod** k4200@kwd* k41df@exp* k41e0@rib k41e1@top?)) (k2e3a@make-eval-transformer k4229@expanded-rhs)))) (k2d94@gen-define-label k4225@id k41e0@rib) (k3061@expand-transformer k4224@rhs k41da@mr)))) k4221@k421f k4220@k421d))) (if (memv k4202@t '(let-syntax letrec-syntax)) ((lambda (k422e@t) ((lambda (k4230@ls/false) (if (and k4230@ls/false (apply (lambda (k4232@xlhs* k4233@xrhs* k4234@xbody*) (if (not (k2e0a@valid-bound-ids? k4232@xlhs*)) (k30e7@syntax-violation '#f '"invalid identifiers" k41ec@e) (void))) k4230@ls/false)) (apply (lambda (k4238@xlhs* k4239@xrhs* k423a@xbody*) ((lambda (k423e@xlab*) ((lambda (k4240@xrib) ((lambda (k4242@xb*) ((lambda () (k305f@chi-body* (append (map (lambda (k4244@x) (k2dee@add-subst k4240@xrib k4244@x)) k423a@xbody*) (cdr k41d8@e*)) (append (map cons k423e@xlab* k4242@xb*) k41d9@r) (append (map cons k423e@xlab* k4242@xb*) k41da@mr) k41db@lex* k41dc@rhs* k41dd@mod** k4200@kwd* k41df@exp* k41e0@rib k41e1@top?)))) (map (lambda (k4246@x) (k2e3a@make-eval-transformer (k3061@expand-transformer (if (eq? k41fc@type 'let-syntax) k4246@x (k2dee@add-subst k4240@xrib k4246@x)) k41da@mr))) k4239@xrhs*))) (k2dc2@make-full-rib k4238@xlhs* k423e@xlab*))) (map k2d8e@gen-label k4238@xlhs*))) k4230@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k422e@t))) (k3007@syntax-dispatch k422e@t '(_ #(each (any any)) . each-any)))) k41ec@e) (if (memv k4202@t '(begin)) ((lambda (k4248@t) ((lambda (k424a@ls/false) (if k424a@ls/false (apply (lambda (k424c@x*) (k305f@chi-body* (append k424c@x* (cdr k41d8@e*)) k41d9@r k41da@mr k41db@lex* k41dc@rhs* k41dd@mod** k4200@kwd* k41df@exp* k41e0@rib k41e1@top?)) k424a@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k4248@t))) (k3007@syntax-dispatch k4248@t '(_ . each-any)))) k41ec@e) (if (memv k4202@t '(global-macro global-macro!)) (k305f@chi-body* (cons (k2dee@add-subst k41e0@rib (k3023@chi-global-macro k41fb@value k41ec@e)) (cdr k41d8@e*)) k41d9@r k41da@mr k41db@lex* k41dc@rhs* k41dd@mod** k4200@kwd* k41df@exp* k41e0@rib k41e1@top?) (if (memv k4202@t '(local-macro local-macro!)) (k305f@chi-body* (cons (k2dee@add-subst k41e0@rib (k3021@chi-local-macro k41fb@value k41ec@e)) (cdr k41d8@e*)) k41d9@r k41da@mr k41db@lex* k41dc@rhs* k41dd@mod** k4200@kwd* k41df@exp* k41e0@rib k41e1@top?) (if (memv k4202@t '(macro macro!)) (k305f@chi-body* (cons (k2dee@add-subst k41e0@rib (k301f@chi-macro k41fb@value k41ec@e)) (cdr k41d8@e*)) k41d9@r k41da@mr k41db@lex* k41dc@rhs* k41dd@mod** k4200@kwd* k41df@exp* k41e0@rib k41e1@top?) (if (memv k4202@t '(module)) (call-with-values (lambda () (k305d@chi-internal-module k41ec@e k41d9@r k41da@mr k41db@lex* k41dc@rhs* k41dd@mod** k4200@kwd*)) (lambda (k425e@k424f k425f@k4251 k4260@k4253 k4261@k4255 k4262@k4257 k4263@k4259 k4264@k425b k4265@k425d) ((lambda (k426e@kwd* k426f@mod** k4270@mr k4271@r k4272@m-exp-lab* k4273@m-exp-id* k4274@rhs* k4275@lex*) (begin (vector-for-each (lambda (k427e@id k427f@lab) (k2db8@extend-rib! k41e0@rib k427e@id k427f@lab)) k4273@m-exp-id* k4272@m-exp-lab*) (k305f@chi-body* (cdr k41d8@e*) k4271@r k4270@mr k4275@lex* k4274@rhs* k426f@mod** k426e@kwd* k41df@exp* k41e0@rib k41e1@top?))) k4265@k425d k4264@k425b k4263@k4259 k4262@k4257 k4261@k4255 k4260@k4253 k425f@k4251 k425e@k424f))) (if (memv k4202@t '(library)) (begin (k30c9@library-expander (k2e16@stx->datum k41ec@e)) (k305f@chi-body* (cdr k41d8@e*) k41d9@r k41da@mr k41db@lex* k41dc@rhs* k41dd@mod** k4200@kwd* k41df@exp* k41e0@rib k41e1@top?)) (if (memv k4202@t '(export)) ((lambda (k4282@t) ((lambda (k4284@ls/false) (if k4284@ls/false (apply (lambda (k4286@exp-decl*) (k305f@chi-body* (cdr k41d8@e*) k41d9@r k41da@mr k41db@lex* k41dc@rhs* k41dd@mod** k4200@kwd* (append k4286@exp-decl* k41df@exp*) k41e0@rib k41e1@top?)) k4284@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k4282@t))) (k3007@syntax-dispatch k4282@t '(_ . each-any)))) k41ec@e) (if (memv k4202@t '(import)) ((lambda () ((lambda (k4289@module-import? k428b@module-import k428d@library-import) (begin (set! k4289@module-import? (lambda (k42dc@e) ((lambda (k42de@t) ((lambda (k42e0@ls/false) (if (and k42e0@ls/false (apply (lambda (k42e2@id) (k2e02@id? k42e2@id)) k42e0@ls/false)) (apply (lambda (k42e4@id) '#t) k42e0@ls/false) ((lambda (k42e6@t) ((lambda (k42e8@ls/false) (if k42e8@ls/false (apply (lambda (k42ea@imp*) '#f) k42e8@ls/false) ((lambda (k42ec@t) ((lambda (k42ee@ls/false) (if k42ee@ls/false (apply (lambda () (k30e7@syntax-violation '#f '"malformed import form" k42dc@e)) k42ee@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k42ec@t))) (k3007@syntax-dispatch k42ec@t '_))) k42e6@t))) (k3007@syntax-dispatch k42e6@t '(_ . each-any)))) k42de@t))) (k3007@syntax-dispatch k42de@t '(_ any)))) k42dc@e))) (set! k428b@module-import (lambda (k42ba@e k42bb@r) ((lambda (k42be@t) ((lambda (k42c0@ls/false) (if (and k42c0@ls/false (apply (lambda (k42c2@id) (k2e02@id? k42c2@id)) k42c0@ls/false)) (apply (lambda (k42c4@id) (call-with-values (lambda () (k2e24@syntax-type k42c4@id k42bb@r)) (lambda (k42cc@k42c7 k42cd@k42c9 k42ce@k42cb) ((lambda (k42d2@kwd k42d3@value k42d4@type) ((lambda (k42d8@t) (if (memv k42d8@t '($module)) ((lambda (k42da@iface) (values (k305b@module-interface-exp-id* k42da@iface k42c4@id) (k3055@module-interface-exp-lab-vec k42da@iface))) k42d3@value) (k30e7@syntax-violation '#f '"invalid import" k42ba@e))) k42d4@type)) k42ce@k42cb k42cd@k42c9 k42cc@k42c7)))) k42c0@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k42be@t))) (k3007@syntax-dispatch k42be@t '(_ any)))) k42ba@e))) (set! k428d@library-import (lambda (k429e@e) ((lambda (k42a0@t) ((lambda (k42a2@ls/false) (if k42a2@ls/false (apply (lambda (k42a4@ctxt k42a5@imp*) (call-with-values (lambda () (k3069@parse-import-spec* (k30ed@syntax->datum k42a5@imp*))) (lambda (k42ac@k42a9 k42ad@k42ab) ((lambda (k42b0@subst-labels k42b1@subst-names) (values (vector-map (lambda (k42b4@name) (k2de2@datum->stx k42a4@ctxt k42b4@name)) k42b1@subst-names) k42b0@subst-labels)) k42ad@k42ab k42ac@k42a9)))) k42a2@ls/false) ((lambda (k42b6@t) ((lambda (k42b8@ls/false) (if k42b8@ls/false (apply (lambda () (k30e7@syntax-violation '#f '"invalid import form" k429e@e)) k42b8@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k42b6@t))) (k3007@syntax-dispatch k42b6@t '_))) k42a0@t))) (k3007@syntax-dispatch k42a0@t '(any . each-any)))) k429e@e))) (begin (call-with-values (lambda () (if (k4289@module-import? k41ec@e) (k428b@module-import k41ec@e k41d9@r) (k428d@library-import k41ec@e))) (lambda (k4292@k428f k4293@k4291) ((lambda (k4296@lab* k4297@id*) (vector-for-each (lambda (k429a@id k429b@lab) (k2db8@extend-rib! k41e0@rib k429a@id k429b@lab)) k4297@id* k4296@lab*)) k4293@k4291 k4292@k428f))) (k305f@chi-body* (cdr k41d8@e*) k41d9@r k41da@mr k41db@lex* k41dc@rhs* k41dd@mod** k4200@kwd* k41df@exp* k41e0@rib k41e1@top?)))) '#f '#f '#f))) (if k41e1@top? (k305f@chi-body* (cdr k41d8@e*) k41d9@r k41da@mr (cons (k2d8a@gen-lexical 'dummy) k41db@lex*) (cons (cons 'top-expr k41ec@e) k41dc@rhs*) k41dd@mod** k4200@kwd* k41df@exp* k41e0@rib k41e1@top?) (values k41d8@e* k41d9@r k41da@mr k41db@lex* k41dc@rhs* k41dd@mod** k4200@kwd* k41df@exp*)))))))))))))) k41fc@type)) (if (k2e02@id? k41fa@kwd) (cons k41fa@kwd k41de@kwd*) k41de@kwd*))) k41f6@k41f3 k41f5@k41f1 k41f4@k41ef)))) (car k41d8@e*))))) (set! k3061@expand-transformer (lambda (k42f0@expr k42f1@r) ((lambda (k42f4@rtc) ((lambda (k42f6@expanded-rhs) (begin (for-each ((lambda (k42f8@mark-visit) (lambda (k42fa@x) (begin (k2c2d@k2a7b@invoke-library k42fa@x) (k42f8@mark-visit k42fa@x)))) (k3071@vis-collector)) (k42f4@rtc)) k42f6@expanded-rhs)) ((lambda (k4304@k42fd k4305@k42ff k4306@k4301 k4307@k4303) ((lambda (k430c@swap) (dynamic-wind k430c@swap (lambda () (k3029@chi-expr k42f0@expr k42f1@r k42f1@r)) k430c@swap)) (lambda () (begin ((lambda (k430e@t) (begin (k4304@k42fd k4306@k4301) (set! k4306@k4301 k430e@t))) (k4304@k42fd)) ((lambda (k4310@t) (begin (k4305@k42ff k4307@k4303) (set! k4307@k4303 k4310@t))) (k4305@k42ff)))))) k306f@inv-collector k3071@vis-collector k42f4@rtc (lambda (k4312@x) (values))))) (k306d@make-collector)))) (set! k3063@parse-exports (lambda (k4314@exp*) ((letrec ((k4316@f (lambda (k4318@exp* k4319@int* k431a@ext*) (if (null? k4318@exp*) (begin (if (not (k2e0a@valid-bound-ids? k431a@ext*)) (k30e7@syntax-violation 'export '"invalid exports" (k303d@find-dups k431a@ext*)) (void)) (values (map k30ed@syntax->datum k431a@ext*) k4319@int*)) ((lambda (k431e@t) ((lambda (k4320@ls/false) (if k4320@ls/false (apply (lambda (k4322@rename k4323@i* k4324@e*) (begin (if (not (and (eq? (k30ed@syntax->datum k4322@rename) 'rename) (for-all k2e02@id? k4323@i*) (for-all k2e02@id? k4324@e*))) (k30e7@syntax-violation 'export '"invalid export specifier" (car k4318@exp*)) (void)) (k4316@f (cdr k4318@exp*) (append k4323@i* k4319@int*) (append k4324@e* k431a@ext*)))) k4320@ls/false) ((lambda (k4328@t) ((lambda (k432a@ls/false) (if k432a@ls/false (apply (lambda (k432c@ie) (begin (if (not (k2e02@id? k432c@ie)) (k30e7@syntax-violation 'export '"invalid export" k432c@ie) (void)) (k4316@f (cdr k4318@exp*) (cons k432c@ie k4319@int*) (cons k432c@ie k431a@ext*)))) k432a@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k4328@t))) (k3007@syntax-dispatch k4328@t 'any))) k431e@t))) (k3007@syntax-dispatch k431e@t '(any . #(each (any any)))))) (car k4318@exp*)))))) k4316@f) k4314@exp* '() '()))) (set! k3065@parse-library-name (lambda (k432e@spec) ((lambda (k4331@parse) (begin (set! k4331@parse (lambda (k433e@x) ((lambda (k4340@t) ((lambda (k4342@ls/false) (if (and k4342@ls/false (apply (lambda (k4344@v*) (for-all (lambda (k4346@x) ((lambda (k4348@x) (and (integer? k4348@x) (exact? k4348@x))) (k30ed@syntax->datum k4346@x))) k4344@v*)) k4342@ls/false)) (apply (lambda (k434a@v*) (values '() (map k30ed@syntax->datum k434a@v*))) k4342@ls/false) ((lambda (k434c@t) ((lambda (k434e@ls/false) (if (and k434e@ls/false (apply (lambda (k4350@x k4351@rest) (symbol? (k30ed@syntax->datum k4350@x))) k434e@ls/false)) (apply (lambda (k4354@x k4355@rest) (call-with-values (lambda () (k4331@parse k4355@rest)) (lambda (k435c@k4359 k435d@k435b) ((lambda (k4360@v* k4361@x*) (values (cons (k30ed@syntax->datum k4354@x) k4361@x*) k4360@v*)) k435d@k435b k435c@k4359)))) k434e@ls/false) ((lambda (k4364@t) ((lambda (k4366@ls/false) (if k4366@ls/false (apply (lambda () (values '() '())) k4366@ls/false) ((lambda (k4368@t) ((lambda (k436a@ls/false) (if k436a@ls/false (apply (lambda () (k30e7@syntax-violation '#f '"invalid library name" k432e@spec)) k436a@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k4368@t))) (k3007@syntax-dispatch k4368@t '_))) k4364@t))) (k3007@syntax-dispatch k4364@t '()))) k434c@t))) (k3007@syntax-dispatch k434c@t '(any . any)))) k4340@t))) (k3007@syntax-dispatch k4340@t '(each-any)))) k433e@x))) (call-with-values (lambda () (k4331@parse k432e@spec)) (lambda (k4336@k4333 k4337@k4335) ((lambda (k433a@ver* k433b@name*) (begin (if (null? k433b@name*) (k30e7@syntax-violation '#f '"empty library name" k432e@spec) (void)) (values k433b@name* k433a@ver*))) k4337@k4335 k4336@k4333))))) '#f))) (set! k3067@parse-library (lambda (k436c@e) ((lambda (k436e@t) ((lambda (k4370@ls/false) (if (and k4370@ls/false (apply (lambda (k4372@library k4373@name* k4374@export k4375@exp* k4376@import k4377@imp* k4378@b*) (and (eq? (k30ed@syntax->datum k4374@export) 'export) (eq? (k30ed@syntax->datum k4376@import) 'import) (eq? (k30ed@syntax->datum k4372@library) 'library))) k4370@ls/false)) (apply (lambda (k4380@library k4381@name* k4382@export k4383@exp* k4384@import k4385@imp* k4386@b*) (values k4381@name* k4383@exp* k4385@imp* k4386@b*)) k4370@ls/false) ((lambda (k438e@t) ((lambda (k4390@ls/false) (if k4390@ls/false (apply (lambda () (k30e7@syntax-violation '#f '"malformed library" k436c@e)) k4390@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k438e@t))) (k3007@syntax-dispatch k438e@t '_))) k436e@t))) (k3007@syntax-dispatch k436e@t '(any each-any (any . each-any) (any . each-any) . each-any)))) k436c@e))) (set! k3069@parse-import-spec* ((lambda () ((lambda (k4393@idsyn? k4395@dup-error k4397@merge-substs k4399@exclude* k439b@find* k439d@rem* k439f@remove-dups k43a1@parse-library-name k43a3@import-library k43a5@get-import k43a7@add-imports!) (begin (set! k4393@idsyn? (lambda (k459c@x) (symbol? (k30ed@syntax->datum k459c@x)))) (set! k4395@dup-error (lambda (k459a@name) (k30e7@syntax-violation 'import '"two imports with different bindings" k459a@name))) (set! k4397@merge-substs (lambda (k4588@s k4589@subst) ((lambda (k458d@insert-to-subst) (begin (set! k458d@insert-to-subst (lambda (k458e@a k458f@subst) ((lambda (k4592@name k4593@label) ((lambda (k4596@t) (if k4596@t ((lambda (k4598@x) (if (eq? (cdr k4598@x) k4593@label) k458f@subst (k4395@dup-error k4592@name))) k4596@t) (cons k458e@a k458f@subst))) (assq k4592@name k458f@subst))) (car k458e@a) (cdr k458e@a)))) (if (null? k4588@s) k4589@subst (k458d@insert-to-subst (car k4588@s) (k4397@merge-substs (cdr k4588@s) k4589@subst))))) '#f))) (set! k4399@exclude* (lambda (k4558@sym* k4559@subst) ((lambda (k455d@exclude) (begin (set! k455d@exclude (lambda (k4576@sym k4577@subst) (if (null? k4577@subst) (k30e7@syntax-violation 'import '"cannot rename unbound identifier" k4576@sym) (if (eq? k4576@sym (caar k4577@subst)) (values (cdar k4577@subst) (cdr k4577@subst)) ((lambda (k457a@a) (call-with-values (lambda () (k455d@exclude k4576@sym (cdr k4577@subst))) (lambda (k4580@k457d k4581@k457f) ((lambda (k4584@subst k4585@old) (values k4585@old (cons k457a@a k4584@subst))) k4581@k457f k4580@k457d)))) (car k4577@subst)))))) (if (null? k4558@sym*) (values '() k4559@subst) (call-with-values (lambda () (k455d@exclude (car k4558@sym*) k4559@subst)) (lambda (k4562@k455f k4563@k4561) ((lambda (k4566@subst k4567@old) (call-with-values (lambda () (k4399@exclude* (cdr k4558@sym*) k4566@subst)) (lambda (k456e@k456b k456f@k456d) ((lambda (k4572@subst k4573@old*) (values (cons k4567@old k4573@old*) k4572@subst)) k456f@k456d k456e@k456b)))) k4563@k4561 k4562@k455f)))))) '#f))) (set! k439b@find* (lambda (k4550@sym* k4551@subst) (map (lambda (k4554@x) ((lambda (k4556@t) (if k4556@t (cdr k4556@t) (k30e7@syntax-violation 'import '"cannot find identifier" k4554@x))) (assq k4554@x k4551@subst))) k4550@sym*))) (set! k439d@rem* (lambda (k4548@sym* k4549@subst) ((letrec ((k454c@f (lambda (k454e@subst) (if (null? k454e@subst) '() (if (memq (caar k454e@subst) k4548@sym*) (k454c@f (cdr k454e@subst)) (cons (car k454e@subst) (k454c@f (cdr k454e@subst)))))))) k454c@f) k4549@subst))) (set! k439f@remove-dups (lambda (k4546@ls) (if (null? k4546@ls) '() (if (memq (car k4546@ls) (cdr k4546@ls)) (k439f@remove-dups (cdr k4546@ls)) (cons (car k4546@ls) (k439f@remove-dups (cdr k4546@ls))))))) (set! k43a1@parse-library-name (lambda (k445e@spec) ((lambda (k4461@subversion? k4463@subversion-pred k4465@version-pred) (begin (set! k4461@subversion? (lambda (k4542@x) ((lambda (k4544@x) (and (integer? k4544@x) (exact? k4544@x) (>= k4544@x '0))) (k30ed@syntax->datum k4542@x)))) (set! k4463@subversion-pred (lambda (k44e2@x*) ((lambda (k44e4@t) ((lambda (k44e6@ls/false) (if (and k44e6@ls/false (apply (lambda (k44e8@n) (k4461@subversion? k44e8@n)) k44e6@ls/false)) (apply (lambda (k44ea@n) (lambda (k44ec@x) (= k44ec@x (k30ed@syntax->datum k44ea@n)))) k44e6@ls/false) ((lambda (k44ee@t) ((lambda (k44f0@ls/false) (if (and k44f0@ls/false (apply (lambda (k44f2@p? k44f3@sub*) (eq? (k30ed@syntax->datum k44f2@p?) 'and)) k44f0@ls/false)) (apply (lambda (k44f6@p? k44f7@sub*) ((lambda (k44fa@p*) (lambda (k44fc@x) (for-all (lambda (k44fe@p) (k44fe@p k44fc@x)) k44fa@p*))) (map k4463@subversion-pred k44f7@sub*))) k44f0@ls/false) ((lambda (k4500@t) ((lambda (k4502@ls/false) (if (and k4502@ls/false (apply (lambda (k4504@p? k4505@sub*) (eq? (k30ed@syntax->datum k4504@p?) 'or)) k4502@ls/false)) (apply (lambda (k4508@p? k4509@sub*) ((lambda (k450c@p*) (lambda (k450e@x) (exists (lambda (k4510@p) (k4510@p k450e@x)) k450c@p*))) (map k4463@subversion-pred k4509@sub*))) k4502@ls/false) ((lambda (k4512@t) ((lambda (k4514@ls/false) (if (and k4514@ls/false (apply (lambda (k4516@p? k4517@sub) (eq? (k30ed@syntax->datum k4516@p?) 'not)) k4514@ls/false)) (apply (lambda (k451a@p? k451b@sub) ((lambda (k451e@p) (lambda (k4520@x) (not (k451e@p k4520@x)))) (k4463@subversion-pred k451b@sub))) k4514@ls/false) ((lambda (k4522@t) ((lambda (k4524@ls/false) (if (and k4524@ls/false (apply (lambda (k4526@p? k4527@n) (and (eq? (k30ed@syntax->datum k4526@p?) '<=) (k4461@subversion? k4527@n))) k4524@ls/false)) (apply (lambda (k452a@p? k452b@n) (lambda (k452e@x) (<= k452e@x (k30ed@syntax->datum k452b@n)))) k4524@ls/false) ((lambda (k4530@t) ((lambda (k4532@ls/false) (if (and k4532@ls/false (apply (lambda (k4534@p? k4535@n) (and (eq? (k30ed@syntax->datum k4534@p?) '>=) (k4461@subversion? k4535@n))) k4532@ls/false)) (apply (lambda (k4538@p? k4539@n) (lambda (k453c@x) (>= k453c@x (k30ed@syntax->datum k4539@n)))) k4532@ls/false) ((lambda (k453e@t) ((lambda (k4540@ls/false) (if k4540@ls/false (apply (lambda () (k30e7@syntax-violation 'import '"invalid sub-version spec" k445e@spec k44e2@x*)) k4540@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k453e@t))) (k3007@syntax-dispatch k453e@t '_))) k4530@t))) (k3007@syntax-dispatch k4530@t '(any any)))) k4522@t))) (k3007@syntax-dispatch k4522@t '(any any)))) k4512@t))) (k3007@syntax-dispatch k4512@t '(any any)))) k4500@t))) (k3007@syntax-dispatch k4500@t '(any . each-any)))) k44ee@t))) (k3007@syntax-dispatch k44ee@t '(any . each-any)))) k44e4@t))) (k3007@syntax-dispatch k44e4@t 'any))) k44e2@x*))) (set! k4465@version-pred (lambda (k4492@x*) ((lambda (k4494@t) ((lambda (k4496@ls/false) (if k4496@ls/false (apply (lambda () (lambda (k4498@x) '#t)) k4496@ls/false) ((lambda (k449a@t) ((lambda (k449c@ls/false) (if (and k449c@ls/false (apply (lambda (k449e@c k449f@ver*) (eq? (k30ed@syntax->datum k449e@c) 'and)) k449c@ls/false)) (apply (lambda (k44a2@c k44a3@ver*) ((lambda (k44a6@p*) (lambda (k44a8@x) (for-all (lambda (k44aa@p) (k44aa@p k44a8@x)) k44a6@p*))) (map k4465@version-pred k44a3@ver*))) k449c@ls/false) ((lambda (k44ac@t) ((lambda (k44ae@ls/false) (if (and k44ae@ls/false (apply (lambda (k44b0@c k44b1@ver*) (eq? (k30ed@syntax->datum k44b0@c) 'or)) k44ae@ls/false)) (apply (lambda (k44b4@c k44b5@ver*) ((lambda (k44b8@p*) (lambda (k44ba@x) (exists (lambda (k44bc@p) (k44bc@p k44ba@x)) k44b8@p*))) (map k4465@version-pred k44b5@ver*))) k44ae@ls/false) ((lambda (k44be@t) ((lambda (k44c0@ls/false) (if (and k44c0@ls/false (apply (lambda (k44c2@c k44c3@ver) (eq? (k30ed@syntax->datum k44c2@c) 'not)) k44c0@ls/false)) (apply (lambda (k44c6@c k44c7@ver) ((lambda (k44ca@p) (lambda (k44cc@x) (not (k44ca@p k44cc@x)))) (k4465@version-pred k44c7@ver))) k44c0@ls/false) ((lambda (k44ce@t) ((lambda (k44d0@ls/false) (if k44d0@ls/false (apply (lambda (k44d2@sub*) ((lambda (k44d4@p*) (lambda (k44d6@x) ((letrec ((k44d8@f (lambda (k44da@p* k44db@x) (if (null? k44da@p*) '#t (if (null? k44db@x) '#f (and ((car k44da@p*) (car k44db@x)) (k44d8@f (cdr k44da@p*) (cdr k44db@x)))))))) k44d8@f) k44d4@p* k44d6@x))) (map k4463@subversion-pred k44d2@sub*))) k44d0@ls/false) ((lambda (k44de@t) ((lambda (k44e0@ls/false) (if k44e0@ls/false (apply (lambda () (k30e7@syntax-violation 'import '"invalid version spec" k445e@spec k4492@x*)) k44e0@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k44de@t))) (k3007@syntax-dispatch k44de@t '_))) k44ce@t))) (k3007@syntax-dispatch k44ce@t 'each-any))) k44be@t))) (k3007@syntax-dispatch k44be@t '(any any)))) k44ac@t))) (k3007@syntax-dispatch k44ac@t '(any . each-any)))) k449a@t))) (k3007@syntax-dispatch k449a@t '(any . each-any)))) k4494@t))) (k3007@syntax-dispatch k4494@t '()))) k4492@x*))) ((letrec ((k4466@f (lambda (k4468@x) ((lambda (k446a@t) ((lambda (k446c@ls/false) (if k446c@ls/false (apply (lambda (k446e@version-spec*) (values '() (k4465@version-pred k446e@version-spec*))) k446c@ls/false) ((lambda (k4470@t) ((lambda (k4472@ls/false) (if (and k4472@ls/false (apply (lambda (k4474@x k4475@x*) (k4393@idsyn? k4474@x)) k4472@ls/false)) (apply (lambda (k4478@x k4479@x*) (call-with-values (lambda () (k4466@f k4479@x*)) (lambda (k4480@k447d k4481@k447f) ((lambda (k4484@pred k4485@name) (values (cons (k30ed@syntax->datum k4478@x) k4485@name) k4484@pred)) k4481@k447f k4480@k447d)))) k4472@ls/false) ((lambda (k4488@t) ((lambda (k448a@ls/false) (if k448a@ls/false (apply (lambda () (values '() (lambda (k448c@x) '#t))) k448a@ls/false) ((lambda (k448e@t) ((lambda (k4490@ls/false) (if k4490@ls/false (apply (lambda () (k30e7@syntax-violation '#f '"invalid import spec" k445e@spec)) k4490@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k448e@t))) (k3007@syntax-dispatch k448e@t '_))) k4488@t))) (k3007@syntax-dispatch k4488@t '()))) k4470@t))) (k3007@syntax-dispatch k4470@t '(any . any)))) k446a@t))) (k3007@syntax-dispatch k446a@t '(each-any)))) k4468@x)))) k4466@f) k445e@spec))) '#f '#f '#f))) (set! k43a3@import-library (lambda (k444e@spec*) (call-with-values (lambda () (k43a1@parse-library-name k444e@spec*)) (lambda (k4454@k4451 k4455@k4453) ((lambda (k4458@pred k4459@name) (begin (if (null? k4459@name) (k30e7@syntax-violation 'import '"empty library name" k444e@spec*) (void)) ((lambda (k445c@lib) (begin (if (not k445c@lib) (k30e7@syntax-violation 'import '"cannot find library with required name" k4459@name) (void)) (if (not (k4458@pred (k2c00@k2a21@library-version k445c@lib))) (k30e7@syntax-violation 'import '"library does not satisfy version specification" k444e@spec* k445c@lib) (void)) ((k3073@imp-collector) k445c@lib) (k2c08@k2a31@library-subst k445c@lib))) (k2c26@k2a6d@find-library-by-name k4459@name)))) k4455@k4453 k4454@k4451))))) (set! k43a5@get-import (lambda (k43c0@spec) ((lambda (k43c2@t) ((lambda (k43c4@ls/false) (if (and k43c4@ls/false (apply (lambda (k43c6@x k43c7@x*) (not (memq (k30ed@syntax->datum k43c6@x) '(for rename except only prefix library)))) k43c4@ls/false)) (apply (lambda (k43ca@x k43cb@x*) (k43a3@import-library (cons k43ca@x k43cb@x*))) k43c4@ls/false) ((lambda (k43ce@t) ((lambda (k43d0@ls/false) (if (and k43d0@ls/false (apply (lambda (k43d2@rename k43d3@isp k43d4@old* k43d5@new*) (and (eq? (k30ed@syntax->datum k43d2@rename) 'rename) (for-all k4393@idsyn? k43d4@old*) (for-all k4393@idsyn? k43d5@new*))) k43d0@ls/false)) (apply (lambda (k43da@rename k43db@isp k43dc@old* k43dd@new*) ((lambda (k43e2@subst k43e3@old* k43e4@new*) ((lambda (k43e8@old-label*) ((lambda (k43ea@subst) (k4397@merge-substs (map cons k43e4@new* k43e8@old-label*) k43ea@subst)) (k439d@rem* k43e3@old* k43e2@subst))) (k439b@find* k43e3@old* k43e2@subst))) (k43a5@get-import k43db@isp) (map k30ed@syntax->datum k43dc@old*) (map k30ed@syntax->datum k43dd@new*))) k43d0@ls/false) ((lambda (k43ec@t) ((lambda (k43ee@ls/false) (if (and k43ee@ls/false (apply (lambda (k43f0@except k43f1@isp k43f2@sym*) (and (eq? (k30ed@syntax->datum k43f0@except) 'except) (for-all k4393@idsyn? k43f2@sym*))) k43ee@ls/false)) (apply (lambda (k43f6@except k43f7@isp k43f8@sym*) ((lambda (k43fc@subst) (k439d@rem* (map k30ed@syntax->datum k43f8@sym*) k43fc@subst)) (k43a5@get-import k43f7@isp))) k43ee@ls/false) ((lambda (k43fe@t) ((lambda (k4400@ls/false) (if (and k4400@ls/false (apply (lambda (k4402@only k4403@isp k4404@sym*) (and (eq? (k30ed@syntax->datum k4402@only) 'only) (for-all k4393@idsyn? k4404@sym*))) k4400@ls/false)) (apply (lambda (k4408@only k4409@isp k440a@sym*) ((lambda (k440e@subst k440f@sym*) ((lambda (k4412@sym*) ((lambda (k4414@lab*) (map cons k4412@sym* k4414@lab*)) (k439b@find* k4412@sym* k440e@subst))) (k439f@remove-dups k440f@sym*))) (k43a5@get-import k4409@isp) (map k30ed@syntax->datum k440a@sym*))) k4400@ls/false) ((lambda (k4416@t) ((lambda (k4418@ls/false) (if (and k4418@ls/false (apply (lambda (k441a@prefix k441b@isp k441c@p) (and (eq? (k30ed@syntax->datum k441a@prefix) 'prefix) (k4393@idsyn? k441c@p))) k4418@ls/false)) (apply (lambda (k4420@prefix k4421@isp k4422@p) ((lambda (k4426@subst k4427@prefix) (map (lambda (k442a@x) (cons (string->symbol (string-append k4427@prefix (symbol->string (car k442a@x)))) (cdr k442a@x))) k4426@subst)) (k43a5@get-import k4421@isp) (symbol->string (k30ed@syntax->datum k4422@p)))) k4418@ls/false) ((lambda (k442c@t) ((lambda (k442e@ls/false) (if (and k442e@ls/false (apply (lambda (k4430@library k4431@spec*) (eq? (k30ed@syntax->datum k4430@library) 'library)) k442e@ls/false)) (apply (lambda (k4434@library k4435@spec*) (k43a3@import-library k4435@spec*)) k442e@ls/false) ((lambda (k4438@t) ((lambda (k443a@ls/false) (if (and k443a@ls/false (apply (lambda (k443c@for k443d@isp k443e@rest) (eq? (k30ed@syntax->datum k443c@for) 'for)) k443a@ls/false)) (apply (lambda (k4442@for k4443@isp k4444@rest) (k43a5@get-import k4443@isp)) k443a@ls/false) ((lambda (k4448@t) ((lambda (k444a@ls/false) (if k444a@ls/false (apply (lambda (k444c@spec) (k30e7@syntax-violation 'import '"invalid import spec" k444c@spec)) k444a@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k4448@t))) (k3007@syntax-dispatch k4448@t 'any))) k4438@t))) (k3007@syntax-dispatch k4438@t '(any any . any)))) k442c@t))) (k3007@syntax-dispatch k442c@t '(any each-any)))) k4416@t))) (k3007@syntax-dispatch k4416@t '(any any any)))) k43fe@t))) (k3007@syntax-dispatch k43fe@t '(any any . each-any)))) k43ec@t))) (k3007@syntax-dispatch k43ec@t '(any any . each-any)))) k43ce@t))) (k3007@syntax-dispatch k43ce@t '(any any . #(each (any any)))))) k43c2@t))) (k3007@syntax-dispatch k43c2@t '(any . each-any)))) k43c0@spec))) (set! k43a7@add-imports! (lambda (k43b0@imp k43b1@h) ((lambda (k43b4@subst) (for-each (lambda (k43b6@x) ((lambda (k43b8@name k43b9@label) ((lambda (k43bc@t) (if k43bc@t ((lambda (k43be@l) (if (not (eq? k43be@l k43b9@label)) (k4395@dup-error k43b8@name) (void))) k43bc@t) (hashtable-set! k43b1@h k43b8@name k43b9@label))) (hashtable-ref k43b1@h k43b8@name '#f))) (car k43b6@x) (cdr k43b6@x))) k43b4@subst)) (k43a5@get-import k43b0@imp)))) (lambda (k43a8@imp*) ((letrec ((k43aa@f (lambda (k43ac@imp* k43ad@h) (if (null? k43ac@imp*) (hashtable-entries k43ad@h) (begin (k43a7@add-imports! (car k43ac@imp*) k43ad@h) (k43aa@f (cdr k43ac@imp*) k43ad@h)))))) k43aa@f) k43a8@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! k306b@make-top-rib (lambda (k459e@names k459f@labels) ((lambda (k45a2@rib) (begin (vector-for-each (lambda (k45a4@name k45a5@label) (begin (if (not (symbol? k45a4@name)) (error 'make-top-rib '"BUG: not a symbol" k45a4@name) (void)) (k2dba@extend-rib/nc! k45a2@rib (make-simple-struct 'stx '5 (list k45a4@name k2d86@top-mark* '() '())) k45a5@label))) k459e@names k459f@labels) k45a2@rib)) (k2db6@make-empty-rib)))) (set! k306d@make-collector (lambda () ((lambda (k45a8@ls) (lambda k45ac ((lambda (k45ad) (if (= k45ad '0) (apply (lambda () k45a8@ls) k45ac) (if (= k45ad '1) (apply (lambda (k45aa@x) (set! k45a8@ls (k2d7f@set-cons k45aa@x k45a8@ls))) k45ac) (error 'apply '"invalid arg count")))) (length k45ac)))) '()))) (set! k306f@inv-collector (k2962@k285e@make-parameter (lambda k45ae@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (k45b0@x) (begin (if (not (procedure? k45b0@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" k45b0@x) (void)) k45b0@x)))) (set! k3071@vis-collector (k2962@k285e@make-parameter (lambda k45b2@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (k45b4@x) (begin (if (not (procedure? k45b4@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" k45b4@x) (void)) k45b4@x)))) (set! k3073@imp-collector (k2962@k285e@make-parameter (lambda k45b6@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (k45b8@x) (begin (if (not (procedure? k45b8@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" k45b8@x) (void)) k45b8@x)))) (set! k3075@chi-library-internal (lambda (k45ba@e* k45bb@rib k45bc@top?) (call-with-values (lambda () (k305f@chi-body* k45ba@e* '() '() '() '() '() '() '() k45bb@rib k45bc@top?)) (lambda (k45d0@k45c1 k45d1@k45c3 k45d2@k45c5 k45d3@k45c7 k45d4@k45c9 k45d5@k45cb k45d6@k45cd k45d7@k45cf) ((lambda (k45e0@exp* k45e1@_kwd* k45e2@mod** k45e3@rhs* k45e4@lex* k45e5@mr k45e6@r k45e7@e*) (values (append (apply append (reverse k45e2@mod**)) k45e7@e*) k45e6@r k45e5@mr (reverse k45e4@lex*) (reverse k45e3@rhs*) k45e0@exp*)) k45d7@k45cf k45d6@k45cd k45d5@k45cb k45d4@k45c9 k45d3@k45c7 k45d2@k45c5 k45d1@k45c3 k45d0@k45c1))))) (set! k3077@chi-interaction-expr (lambda (k45f0@e k45f1@rib k45f2@r) (call-with-values (lambda () (k305f@chi-body* (list k45f0@e) k45f2@r k45f2@r '() '() '() '() '() k45f1@rib '#t)) (lambda (k4606@k45f7 k4607@k45f9 k4608@k45fb k4609@k45fd k460a@k45ff k460b@k4601 k460c@k4603 k460d@k4605) ((lambda (k4616@_exp* k4617@_kwd* k4618@mod** k4619@rhs* k461a@lex* k461b@mr k461c@r k461d@e*) ((lambda (k4626@e*) ((lambda (k4628@e) (values k4628@e k461c@r)) (if (null? k4626@e*) (k2d6a@k2cda@build-void) (if (null? (cdr k4626@e*)) (car k4626@e*) (k2d69@k2cd8@build-sequence '#f k4626@e*))))) (k3037@expand-interaction-rhs*/init* (reverse k461a@lex*) (reverse k4619@rhs*) (append (apply append (reverse k4618@mod**)) k461d@e*) k461c@r k461b@mr))) k460d@k4605 k460c@k4603 k460b@k4601 k460a@k45ff k4609@k45fd k4608@k45fb k4607@k45f9 k4606@k45f7))))) (set! k3079@library-body-expander (lambda (k462a@name k462b@main-exp* k462c@imp* k462d@b* k462e@top?) ((lambda (k4635@itc) (begin (set! k4635@itc (k306d@make-collector)) ((lambda (k463e@k4637 k463f@k4639 k4640@k463b k4641@k463d) ((lambda (k4646@swap) (dynamic-wind k4646@swap (lambda () (call-with-values (lambda () (k3069@parse-import-spec* k462c@imp*)) (lambda (k464c@k4649 k464d@k464b) ((lambda (k4650@subst-labels k4651@subst-names) ((lambda (k4654@rib) ((lambda (k4657@wrap) (begin (set! k4657@wrap (lambda (k46d2@x) (make-simple-struct 'stx '5 (list k46d2@x k2d86@top-mark* (list k4654@rib) '())))) ((lambda (k4658@b* k4659@main-exp* k465a@rtc k465b@vtc) ((lambda (k4668@k4661 k4669@k4663 k466a@k4665 k466b@k4667) ((lambda (k4670@swap) (dynamic-wind k4670@swap (lambda () (call-with-values (lambda () (k3075@chi-library-internal k4658@b* k4654@rib k462e@top?)) (lambda (k467e@k4673 k467f@k4675 k4680@k4677 k4681@k4679 k4682@k467b k4683@k467d) ((lambda (k468a@internal-exp* k468b@rhs* k468c@lex* k468d@mr k468e@r k468f@init*) (call-with-values (lambda () (k3063@parse-exports (append k4659@main-exp* k468a@internal-exp*))) (lambda (k469a@k4697 k469b@k4699) ((lambda (k469e@exp-id* k469f@exp-name*) (begin (k2dbe@seal-rib! k4654@rib) ((lambda (k46a2@init*) ((lambda (k46a4@rhs*) ((lambda () (begin (k2dc0@unseal-rib! k4654@rib) ((lambda (k46a6@loc* k46a7@export-subst) ((lambda (k46ab@errstr) (begin (set! k46ab@errstr '"attempt to export mutated variable") (call-with-values (lambda () (k30d3@make-export-env/macros k468c@lex* k46a6@loc* k468e@r)) (lambda (k46b2@k46ad k46b3@k46af k46b4@k46b1) ((lambda (k46b8@macro* k46b9@global* k46ba@export-env) (begin (for-each (lambda (k46be@s) ((lambda (k46c0@name k46c1@label) ((lambda (k46c4@p) (if k46c4@p ((lambda (k46c6@b) ((lambda (k46c8@type) (if (eq? k46c8@type 'mutable) (k30e7@syntax-violation 'export k46ab@errstr k46c0@name) (void))) (car k46c6@b))) (cdr k46c4@p)) (void))) (assq k46c1@label k46ba@export-env))) (car k46be@s) (cdr k46be@s))) k46a7@export-subst) ((lambda (k46ca@invoke-body k46cb@invoke-definitions) (values (k4635@itc) (k465a@rtc) (k465b@vtc) (k2d69@k2cd8@build-sequence '#f (append k46cb@invoke-definitions (list k46ca@invoke-body))) k46b8@macro* k46a7@export-subst k46ba@export-env)) (k2d6c@k2cde@build-letrec* '#f k468c@lex* k46a4@rhs* (k30cf@build-exports k46b9@global* k46a2@init*)) (map k2d65@k2c35@build-global-define (map cdr k46b9@global*))))) k46b4@k46b1 k46b3@k46af k46b2@k46ad))))) '#f)) (map k2d8c@gen-global k468c@lex*) (k30d1@make-export-subst k469f@exp-name* k469e@exp-id*)))))) (k3039@chi-rhs* k468b@rhs* k468e@r k468d@mr))) (k3025@chi-expr* k468f@init* k468e@r k468d@mr)))) k469b@k4699 k469a@k4697)))) k4683@k467d k4682@k467b k4681@k4679 k4680@k4677 k467f@k4675 k467e@k4673)))) k4670@swap)) (lambda () (begin ((lambda (k46ce@t) (begin (k4668@k4661 k466a@k4665) (set! k466a@k4665 k46ce@t))) (k4668@k4661)) ((lambda (k46d0@t) (begin (k4669@k4663 k466b@k4667) (set! k466b@k4667 k46d0@t))) (k4669@k4663)))))) k306f@inv-collector k3071@vis-collector k465a@rtc k465b@vtc)) (map k4657@wrap k462d@b*) (map k4657@wrap k462b@main-exp*) (k306d@make-collector) (k306d@make-collector)))) '#f)) (k306b@make-top-rib k4651@subst-names k4650@subst-labels))) k464d@k464b k464c@k4649)))) k4646@swap)) (lambda () (begin ((lambda (k46d4@t) (begin (k463e@k4637 k4640@k463b) (set! k4640@k463b k46d4@t))) (k463e@k4637)) ((lambda (k46d6@t) (begin (k463f@k4639 k4641@k463d) (set! k4641@k463d k46d6@t))) (k463f@k4639)))))) k3073@imp-collector k30f5@top-level-context k4635@itc '#f))) '#f))) (set! k307b@core-library-expander (lambda (k46d8@e k46d9@verify-name) (call-with-values (lambda () (k3067@parse-library k46d8@e)) (lambda (k46e4@k46dd k46e5@k46df k46e6@k46e1 k46e7@k46e3) ((lambda (k46ec@b* k46ed@imp* k46ee@exp* k46ef@name*) (call-with-values (lambda () (k3065@parse-library-name k46ef@name*)) (lambda (k46f8@k46f5 k46f9@k46f7) ((lambda (k46fc@ver k46fd@name) (begin (k46d9@verify-name k46fd@name) (call-with-values (lambda () (k3079@library-body-expander k46fd@name k46ee@exp* k46ed@imp* k46ec@b* '#f)) (lambda (k470e@k4701 k470f@k4703 k4710@k4705 k4711@k4707 k4712@k4709 k4713@k470b k4714@k470d) ((lambda (k471c@export-env k471d@export-subst k471e@visit-code k471f@invoke-code k4720@visit-req* k4721@invoke-req* k4722@imp*) (values k46fd@name k46fc@ver k4722@imp* k4721@invoke-req* k4720@visit-req* k471f@invoke-code k471e@visit-code k471d@export-subst k471c@export-env)) k4714@k470d k4713@k470b k4712@k4709 k4711@k4707 k4710@k4705 k470f@k4703 k470e@k4701))))) k46f9@k46f7 k46f8@k46f5)))) k46e7@k46e3 k46e6@k46e1 k46e5@k46df k46e4@k46dd))))) (set! k307d@parse-top-level-program (lambda (k472a@e*) ((lambda (k472c@t) ((lambda (k472e@ls/false) (if (and k472e@ls/false (apply (lambda (k4730@import k4731@imp* k4732@b*) (eq? (k30ed@syntax->datum k4730@import) 'import)) k472e@ls/false)) (apply (lambda (k4736@import k4737@imp* k4738@b*) (values k4737@imp* k4738@b*)) k472e@ls/false) ((lambda (k473c@t) ((lambda (k473e@ls/false) (if (and k473e@ls/false (apply (lambda (k4740@import k4741@x k4742@y) (eq? (k30ed@syntax->datum k4740@import) 'import)) k473e@ls/false)) (apply (lambda (k4746@import k4747@x k4748@y) (k30e7@syntax-violation 'expander '"invalid syntax of top-level program" (k2dfc@syntax-car k472a@e*))) k473e@ls/false) ((lambda (k474c@t) ((lambda (k474e@ls/false) (if k474e@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) k474e@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k474c@t))) (k3007@syntax-dispatch k474c@t '_))) k473c@t))) (k3007@syntax-dispatch k473c@t '((any . any) . any)))) k472c@t))) (k3007@syntax-dispatch k472c@t '((any . each-any) . each-any)))) k472a@e*))) (set! k307f@top-level-expander (lambda (k4750@e*) (call-with-values (lambda () (k307d@parse-top-level-program k4750@e*)) (lambda (k4756@k4753 k4757@k4755) ((lambda (k475a@b* k475b@imp*) (call-with-values (lambda () (k3079@library-body-expander '() '() k475b@imp* k475a@b* '#t)) (lambda (k476c@k475f k476d@k4761 k476e@k4763 k476f@k4765 k4770@k4767 k4771@k4769 k4772@k476b) ((lambda (k477a@export-env k477b@export-subst k477c@visit-code k477d@invoke-code k477e@visit-req* k477f@invoke-req* k4780@imp*) (values k477f@invoke-req* k477d@invoke-code)) k4772@k476b k4771@k4769 k4770@k4767 k476f@k4765 k476e@k4763 k476d@k4761 k476c@k475f)))) k4757@k4755 k4756@k4753))))) (set! k3081@rp (k295f@k2858@make-record-printer 'env (lambda (k4788@x k4789@p k478a@wr) (display '"#<environment>" k4789@p)))) (set! k308b@env? (lambda (k478e@x) (and (simple-struct? k478e@x) (eq? (simple-struct-name k478e@x) 'env)))) (set! k308d@env-names (lambda (k4790@x) (simple-struct-ref k4790@x '0))) (set! k308f@set-env-names! (lambda (k4792@x k4793@val) (simple-struct-set! k4792@x '0 k4793@val))) (set! k3091@env-labels (lambda (k4796@x) (simple-struct-ref k4796@x '1))) (set! k3093@set-env-labels! (lambda (k4798@x k4799@val) (simple-struct-set! k4798@x '1 k4799@val))) (set! k3095@env-itc (lambda (k479c@x) (simple-struct-ref k479c@x '2))) (set! k3097@set-env-itc! (lambda (k479e@x k479f@val) (simple-struct-set! k479e@x '2 k479f@val))) (set! k3099@dummy '3) (set! k309b@rp (k295f@k2858@make-record-printer 'interaction-env (lambda (k47a2@x k47a3@p k47a4@wr) (display '"#<environment>" k47a3@p)))) (set! k30a5@interaction-env? (lambda (k47a8@x) (and (simple-struct? k47a8@x) (eq? (simple-struct-name k47a8@x) 'interaction-env)))) (set! k30a7@interaction-env-rib (lambda (k47aa@x) (simple-struct-ref k47aa@x '0))) (set! k30a9@set-interaction-env-rib! (lambda (k47ac@x k47ad@val) (simple-struct-set! k47ac@x '0 k47ad@val))) (set! k30ab@interaction-env-r (lambda (k47b0@x) (simple-struct-ref k47b0@x '1))) (set! k30ad@set-interaction-env-r! (lambda (k47b2@x k47b3@val) (simple-struct-set! k47b2@x '1 k47b3@val))) (set! k30af@interaction-env-locs (lambda (k47b6@x) (simple-struct-ref k47b6@x '2))) (set! k30b1@set-interaction-env-locs! (lambda (k47b8@x k47b9@val) (simple-struct-set! k47b8@x '2 k47b9@val))) (set! k30b3@dummy '3) (set! k30b5@interaction-environment-symbols (lambda () (k30bd@environment-symbols (k30f3@interaction-environment)))) (set! k30b7@environment-bindings (lambda (k47bc@e) (vector->list (vector-map (lambda (k47be@name k47bf@label) (k30b9@parse-binding (cons k47be@name (k2c2c@k2a79@imported-label->binding k47bf@label)))) (k308d@env-names k47bc@e) (k3091@env-labels k47bc@e))))) (set! k30b9@parse-binding (lambda (k47c2@b) (cons (car k47c2@b) ((lambda (k47c4@t) (if (memv k47c4@t '(core-prim global)) 'procedure (if (memv k47c4@t '(core-macro macro global-macro)) 'syntax (if (memv k47c4@t '($core-rtd)) 'record (if (eq? (car k47c2@b) (cadr k47c2@b)) 'syntax 'unknown))))) (cadr k47c2@b))))) (set! k30bb@environment? (lambda (k47c6@x) (or (k308b@env? k47c6@x) (k30a5@interaction-env? k47c6@x)))) (set! k30bd@environment-symbols (lambda (k47c8@x) (if (k308b@env? k47c8@x) (vector->list (k308d@env-names k47c8@x)) (if (k30a5@interaction-env? k47c8@x) (map values (k2da0@rib-sym* (k30a7@interaction-env-rib k47c8@x))) (assertion-violation 'environment-symbols '"not an environment" k47c8@x))))) (set! k30bf@environment (lambda k47ca@imp* ((lambda (k47cc@itc) ((lambda (k47d2@k47cf k47d3@k47d1) ((lambda (k47d6@swap) (dynamic-wind k47d6@swap (lambda () (call-with-values (lambda () (k3069@parse-import-spec* k47ca@imp*)) (lambda (k47dc@k47d9 k47dd@k47db) ((lambda (k47e0@subst-labels k47e1@subst-names) (make-simple-struct 'env '4 (list k47e1@subst-names k47e0@subst-labels k47cc@itc))) k47dd@k47db k47dc@k47d9)))) k47d6@swap)) (lambda () ((lambda (k47e4@t) (begin (k47d2@k47cf k47d3@k47d1) (set! k47d3@k47d1 k47e4@t))) (k47d2@k47cf))))) k3073@imp-collector k47cc@itc)) (k306d@make-collector)))) (set! k30c1@null-environment (lambda (k47e6@n) (begin (if (not (eqv? k47e6@n '5)) (assertion-violation 'null-environment '"not 5" k47e6@n) (void)) (k30bf@environment '(psyntax null-environment-5))))) (set! k30c3@scheme-report-environment (lambda (k47e8@n) (begin (if (not (eqv? k47e8@n '5)) (assertion-violation 'scheme-report-environment '"not 5" k47e8@n) (void)) (k30bf@environment '(psyntax scheme-report-environment-5))))) (set! k30c5@expand (lambda (k47ea@x k47eb@env) (if (k308b@env? k47eb@env) ((lambda (k47ee@rib) ((lambda (k47f0@x k47f1@itc k47f2@rtc k47f3@vtc) ((lambda (k47f8@x) (begin (k2dbe@seal-rib! k47ee@rib) (values k47f8@x (k47f2@rtc)))) ((lambda (k480a@k47fb k480b@k47fd k480c@k47ff k480d@k4801 k480e@k4803 k480f@k4805 k4810@k4807 k4811@k4809) ((lambda (k481a@swap) (dynamic-wind k481a@swap (lambda () (k3029@chi-expr k47f0@x '() '())) k481a@swap)) (lambda () (begin ((lambda (k481c@t) (begin (k480a@k47fb k480e@k4803) (set! k480e@k4803 k481c@t))) (k480a@k47fb)) ((lambda (k481e@t) (begin (k480b@k47fd k480f@k4805) (set! k480f@k4805 k481e@t))) (k480b@k47fd)) ((lambda (k4820@t) (begin (k480c@k47ff k4810@k4807) (set! k4810@k4807 k4820@t))) (k480c@k47ff)) ((lambda (k4822@t) (begin (k480d@k4801 k4811@k4809) (set! k4811@k4809 k4822@t))) (k480d@k4801)))))) k30f5@top-level-context k306f@inv-collector k3071@vis-collector k3073@imp-collector '#f k47f2@rtc k47f3@vtc k47f1@itc))) (make-simple-struct 'stx '5 (list k47ea@x k2d86@top-mark* (list k47ee@rib) '())) (k3095@env-itc k47eb@env) (k306d@make-collector) (k306d@make-collector))) (k306b@make-top-rib (k308d@env-names k47eb@env) (k3091@env-labels k47eb@env))) (if (k30a5@interaction-env? k47eb@env) ((lambda (k4824@rib k4825@r k4826@rtc) ((lambda (k482a@x) (call-with-values (lambda () ((lambda (k4840@k4831 k4841@k4833 k4842@k4835 k4843@k4837 k4844@k4839 k4845@k483b k4846@k483d k4847@k483f) ((lambda (k4850@swap) (dynamic-wind k4850@swap (lambda () (k3077@chi-interaction-expr k482a@x k4824@rib k4825@r)) k4850@swap)) (lambda () (begin ((lambda (k4852@t) (begin (k4840@k4831 k4844@k4839) (set! k4844@k4839 k4852@t))) (k4840@k4831)) ((lambda (k4854@t) (begin (k4841@k4833 k4845@k483b) (set! k4845@k483b k4854@t))) (k4841@k4833)) ((lambda (k4856@t) (begin (k4842@k4835 k4846@k483d) (set! k4846@k483d k4856@t))) (k4842@k4835)) ((lambda (k4858@t) (begin (k4843@k4837 k4847@k483f) (set! k4847@k483f k4858@t))) (k4843@k4837)))))) k30f5@top-level-context k306f@inv-collector k3071@vis-collector k3073@imp-collector k47eb@env k4826@rtc (k306d@make-collector) (k306d@make-collector))) (lambda (k485a@k482d k485b@k482f) ((lambda (k485e@r^ k485f@e) (begin (k30ad@set-interaction-env-r! k47eb@env k485e@r^) (values k485f@e (k4826@rtc)))) k485b@k482f k485a@k482d)))) (make-simple-struct 'stx '5 (list k47ea@x k2d86@top-mark* (list k4824@rib) '())))) (k30a7@interaction-env-rib k47eb@env) (k30ab@interaction-env-r k47eb@env) (k306d@make-collector)) (assertion-violation 'expand '"not an environment" k47eb@env))))) (set! k30c7@eval (lambda (k4862@x k4863@env) (begin (if (not (k30bb@environment? k4863@env)) (error 'eval '"not an environment" k4863@env) (void)) (call-with-values (lambda () (k30c5@expand k4862@x k4863@env)) (lambda (k486a@k4867 k486b@k4869) ((lambda (k486e@invoke-req* k486f@x) (begin (for-each k2c2d@k2a7b@invoke-library k486e@invoke-req*) (eval-core (k29b7@k296f@expanded->core k486f@x)))) k486b@k4869 k486a@k4867)))))) (set! k30c9@library-expander (lambda k48e0 ((lambda (k48e1) (if (= k48e1 '3) (apply (lambda (k4872@x k4873@filename k4874@verify-name) ((lambda (k4879@build-visit-code k487b@visit!) (begin (set! k4879@build-visit-code (lambda (k48ce@macro*) (if (null? k48ce@macro*) (k2d6a@k2cda@build-void) (k2d69@k2cd8@build-sequence '#f (map (lambda (k48d0@x) ((lambda (k48d2@loc k48d3@src) (list 'set! k48d2@loc k48d3@src)) (car k48d0@x) (cddr k48d0@x))) k48ce@macro*))))) (set! k487b@visit! (lambda (k48c6@macro*) (for-each (lambda (k48c8@x) ((lambda (k48ca@loc k48cb@proc) (set-symbol-value! k48ca@loc k48cb@proc)) (car k48c8@x) (cadr k48c8@x))) k48c6@macro*))) (call-with-values (lambda () (k307b@core-library-expander k4872@x k4874@verify-name)) (lambda (k488e@k487d k488f@k487f k4890@k4881 k4891@k4883 k4892@k4885 k4893@k4887 k4894@k4889 k4895@k488b k4896@k488d) ((lambda (k48a0@export-env k48a1@export-subst k48a2@macro* k48a3@invoke-code k48a4@vis* k48a5@inv* k48a6@imp* k48a7@ver k48a8@name) ((lambda (k48b2@id k48b3@name k48b4@ver k48b5@imp* k48b6@vis* k48b7@inv* k48b8@visit-proc k48b9@invoke-proc k48ba@visit-code k48bb@invoke-code) (begin (k2c2b@k2a77@install-library k48b2@id k48b3@name k48b4@ver k48b5@imp* k48b6@vis* k48b7@inv* k48a1@export-subst k48a0@export-env k48b8@visit-proc k48b9@invoke-proc k48ba@visit-code k48bb@invoke-code '#t k4873@filename) (values k48b2@id k48b3@name k48b4@ver k48b5@imp* k48b6@vis* k48b7@inv* k48bb@invoke-code k48ba@visit-code k48a1@export-subst k48a0@export-env))) (gensym) k48a8@name k48a7@ver (map k2c31@k2a83@library-spec k48a6@imp*) (map k2c31@k2a83@library-spec k48a4@vis*) (map k2c31@k2a83@library-spec k48a5@inv*) (lambda () (k487b@visit! k48a2@macro*)) (lambda () (eval-core (k29b7@k296f@expanded->core k48a3@invoke-code))) (k4879@build-visit-code k48a2@macro*) k48a3@invoke-code)) k4896@k488d k4895@k488b k4894@k4889 k4893@k4887 k4892@k4885 k4891@k4883 k4890@k4881 k488f@k487f k488e@k487d))))) '#f '#f)) k48e0) (if (= k48e1 '2) (apply (lambda (k48d6@x k48d7@filename) (k30c9@library-expander k48d6@x k48d7@filename (lambda (k48da@x) (values)))) k48e0) (if (= k48e1 '1) (apply (lambda (k48dc@x) (k30c9@library-expander k48dc@x '#f (lambda (k48de@x) (values)))) k48e0) (error 'apply '"invalid arg count"))))) (length k48e0)))) (set! k30cb@boot-library-expand (lambda (k48e2@x) (call-with-values (lambda () (k30c9@library-expander k48e2@x)) (lambda (k48f8@k48e5 k48f9@k48e7 k48fa@k48e9 k48fb@k48eb k48fc@k48ed k48fd@k48ef k48fe@k48f1 k48ff@k48f3 k4900@k48f5 k4901@k48f7) ((lambda (k490c@export-env k490d@export-subst k490e@visit-code k490f@invoke-code k4910@inv* k4911@vis* k4912@imp* k4913@ver k4914@name k4915@id) (values k4914@name k490f@invoke-code k490d@export-subst k490c@export-env)) k4901@k48f7 k4900@k48f5 k48ff@k48f3 k48fe@k48f1 k48fd@k48ef k48fc@k48ed k48fb@k48eb k48fa@k48e9 k48f9@k48e7 k48f8@k48e5))))) (set! k30cd@rev-map-append (lambda (k4920@f k4921@ls k4922@ac) (if (null? k4921@ls) k4922@ac (k30cd@rev-map-append k4920@f (cdr k4921@ls) (cons (k4920@f (car k4921@ls)) k4922@ac))))) (set! k30cf@build-exports (lambda (k4926@lex*+loc* k4927@init*) (k2d69@k2cd8@build-sequence '#f (cons (k2d6a@k2cda@build-void) (k30cd@rev-map-append (lambda (k492a@x) (list 'set! (cdr k492a@x) (car k492a@x))) k4926@lex*+loc* k4927@init*))))) (set! k30d1@make-export-subst (lambda (k492c@name* k492d@id*) (map (lambda (k4930@name k4931@id) ((lambda (k4934@label) (begin (if (not k4934@label) (k30e7@syntax-violation '#f '"cannot export unbound identifier" k4931@id) (void)) (cons k4930@name k4934@label))) (k2e18@id->label k4931@id))) k492c@name* k492d@id*))) (set! k30d3@make-export-env/macros (lambda (k4936@lex* k4937@loc* k4938@r) ((lambda (k493d@lookup) (begin (set! k493d@lookup (lambda (k495a@x) ((letrec ((k495c@f (lambda (k495e@x k495f@lex* k4960@loc*) (if (pair? k495f@lex*) (if (eq? k495e@x (car k495f@lex*)) (car k4960@loc*) (k495c@f k495e@x (cdr k495f@lex*) (cdr k4960@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) k495c@f) k495a@x k4936@lex* k4937@loc*))) ((letrec ((k493e@f (lambda (k4940@r k4941@env k4942@global* k4943@macro*) (if (null? k4940@r) (values k4941@env k4942@global* k4943@macro*) ((lambda (k4948@x) ((lambda (k494a@label k494b@b) ((lambda (k494e@t) (if (memv k494e@t '(lexical)) ((lambda (k4950@v) ((lambda (k4952@loc k4953@type) (k493e@f (cdr k4940@r) (cons (cons* k494a@label k4953@type k4952@loc) k4941@env) (cons (cons (k2f93@lexical-var k4950@v) k4952@loc) k4942@global*) k4943@macro*)) (k493d@lookup (k2f93@lexical-var k4950@v)) (if (k2f95@lexical-mutable? k4950@v) 'mutable 'global))) (k2e20@binding-value k494b@b)) (if (memv k494e@t '(local-macro)) ((lambda (k4956@loc) (k493e@f (cdr k4940@r) (cons (cons* k494a@label 'global-macro k4956@loc) k4941@env) k4942@global* (cons (cons k4956@loc (k2e20@binding-value k494b@b)) k4943@macro*))) (gensym)) (if (memv k494e@t '(local-macro!)) ((lambda (k4958@loc) (k493e@f (cdr k4940@r) (cons (cons* k494a@label 'global-macro! k4958@loc) k4941@env) k4942@global* (cons (cons k4958@loc (k2e20@binding-value k494b@b)) k4943@macro*))) (gensym)) (if (memv k494e@t '($rtd $module)) (k493e@f (cdr k4940@r) (cons k4948@x k4941@env) k4942@global* k4943@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (k2e1e@binding-type k494b@b) (k2e20@binding-value k494b@b))))))) (k2e1e@binding-type k494b@b))) (car k4948@x) (cdr k4948@x))) (car k4940@r)))))) k493e@f) k4938@r '() '() '()))) '#f))) (set! k30d5@generate-temporaries (lambda (k4964@ls) ((lambda (k4966@t) ((lambda (k4968@ls/false) (if k4968@ls/false (apply (lambda (k496a@ls) (map (lambda (k496c@x) (make-simple-struct 'stx '5 (list ((lambda (k496e@x) (if (or (symbol? k496e@x) (string? k496e@x)) (gensym k496e@x) (gensym 't))) (k30ed@syntax->datum k496c@x)) k2d86@top-mark* '() '()))) k496a@ls)) k4968@ls/false) ((lambda (k4970@t) ((lambda (k4972@ls/false) (if k4972@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) k4972@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k4970@t))) (k3007@syntax-dispatch k4970@t '_))) k4966@t))) (k3007@syntax-dispatch k4966@t 'each-any))) k4964@ls))) (set! k30d7@free-identifier=? (lambda (k4974@x k4975@y) (if (k2e02@id? k4974@x) (if (k2e02@id? k4975@y) (k2e08@free-id=? k4974@x k4975@y) (assertion-violation 'free-identifier=? '"not an identifier" k4975@y)) (assertion-violation 'free-identifier=? '"not an identifier" k4974@x)))) (set! k30d9@bound-identifier=? (lambda (k4978@x k4979@y) (if (k2e02@id? k4978@x) (if (k2e02@id? k4979@y) (k2e06@bound-id=? k4978@x k4979@y) (assertion-violation 'bound-identifier=? '"not an identifier" k4979@y)) (assertion-violation 'bound-identifier=? '"not an identifier" k4978@x)))) (set! k30db@make-source-condition (lambda (k497c@x) ((lambda (k4986@k4981 k4988@k4983 k498a@k4982 k498d@k4980 k498f@make-source-condition k4991@k497e k4993@k497f k4995@source-condition? k4997@source-filename k4999@source-character) (begin (set! k4986@k4981 (make-record-type-descriptor '&source-information k4dd6@k4b1d@&condition-rtd 'k4984 '#f '#f '#((immutable file-name) (immutable character)))) (set! k4988@k4983 '#f) (set! k498a@k4982 (make-record-constructor-descriptor k4986@k4981 k4dd7@k4b1f@&condition-rcd k4988@k4983)) (set! k498d@k4980 (record-predicate k4986@k4981)) (set! k498f@make-source-condition (record-constructor k498a@k4982)) (set! k4991@k497e (record-accessor k4986@k4981 '0)) (set! k4993@k497f (record-accessor k4986@k4981 '1)) (set! k4995@source-condition? (condition-predicate k4986@k4981)) (set! k4997@source-filename (condition-accessor k4986@k4981 k4991@k497e)) (set! k4999@source-character (condition-accessor k4986@k4981 k4993@k497f)) (if (pair? k497c@x) (k498f@make-source-condition (car k497c@x) (cdr k497c@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! k30dd@extract-position-condition (lambda (k499a@x) (k30db@make-source-condition (k30df@expression-position k499a@x)))) (set! k30df@expression-position (lambda (k499c@x) (and (k2dce@stx? k499c@x) ((lambda (k499e@x) (and (k2957@k2848@annotation? k499e@x) (k2958@k284a@annotation-source k499e@x))) (k2dd0@stx-expr k499c@x))))) (set! k30e1@assertion-error (lambda (k49a0@expr k49a1@pos) (raise (condition (k4e06@k4be1@make-assertion-violation) (k4e18@k4c13@make-who-condition 'assert) (k4ddc@k4b74@make-message-condition '"assertion failed") (k4e0e@k4bf8@make-irritants-condition (list k49a0@expr)) (k30db@make-source-condition k49a1@pos))))) (set! k30e3@syntax-error (lambda (k49a4@x . k49a6@args) (begin (if (not (for-all string? k49a6@args)) (assertion-violation 'syntax-error '"invalid argument" k49a6@args) (void)) (raise (condition (k4ddc@k4b74@make-message-condition (if (null? k49a6@args) '"invalid syntax" (apply string-append k49a6@args))) (k4e3a@k4c6f@make-syntax-violation (k30ed@syntax->datum k49a4@x) '#f) (k30dd@extract-position-condition k49a4@x)))))) (set! k30e5@syntax-violation* (lambda (k49a8@who k49a9@msg k49aa@form k49ab@condition-object) (begin (if (not (string? k49a9@msg)) (assertion-violation 'syntax-violation '"message is not a string" k49a9@msg) (void)) ((lambda (k49b0@who) (raise (condition (if k49b0@who (k4e18@k4c13@make-who-condition k49b0@who) (condition)) (k4ddc@k4b74@make-message-condition k49a9@msg) k49ab@condition-object (k30dd@extract-position-condition k49aa@form)))) (if (or (string? k49a8@who) (symbol? k49a8@who)) k49a8@who (if (not k49a8@who) ((lambda (k49b2@t) ((lambda (k49b4@ls/false) (if (and k49b4@ls/false (apply (lambda (k49b6@id) (k2e02@id? k49b6@id)) k49b4@ls/false)) (apply (lambda (k49b8@id) (k30ed@syntax->datum k49b8@id)) k49b4@ls/false) ((lambda (k49ba@t) ((lambda (k49bc@ls/false) (if (and k49bc@ls/false (apply (lambda (k49be@id k49bf@rest) (k2e02@id? k49be@id)) k49bc@ls/false)) (apply (lambda (k49c2@id k49c3@rest) (k30ed@syntax->datum k49c2@id)) k49bc@ls/false) ((lambda (k49c6@t) ((lambda (k49c8@ls/false) (if k49c8@ls/false (apply (lambda () '#f) k49c8@ls/false) (k30e7@syntax-violation '#f '"invalid syntax" k49c6@t))) (k3007@syntax-dispatch k49c6@t '_))) k49ba@t))) (k3007@syntax-dispatch k49ba@t '(any . any)))) k49b2@t))) (k3007@syntax-dispatch k49b2@t 'any))) k49aa@form) (assertion-violation 'syntax-violation '"invalid who argument" k49a8@who))))))) (set! k30e7@syntax-violation (lambda k49d8 ((lambda (k49d9) (if (= k49d9 '3) (apply (lambda (k49ca@who k49cb@msg k49cc@form) (k30e7@syntax-violation k49ca@who k49cb@msg k49cc@form '#f)) k49d8) (if (= k49d9 '4) (apply (lambda (k49d0@who k49d1@msg k49d2@form k49d3@subform) (k30e5@syntax-violation* k49d0@who k49d1@msg k49d2@form (k4e3a@k4c6f@make-syntax-violation (k30ed@syntax->datum k49d2@form) (k30ed@syntax->datum k49d3@subform)))) k49d8) (error 'apply '"invalid arg count")))) (length k49d8)))) (set! k30e9@identifier? (lambda (k49da@x) (k2e02@id? k49da@x))) (set! k30eb@datum->syntax (lambda (k49dc@id k49dd@datum) (if (k2e02@id? k49dc@id) (k2de2@datum->stx k49dc@id k49dd@datum) (assertion-violation 'datum->syntax '"not an identifier" k49dc@id)))) (set! k30ed@syntax->datum (lambda (k49e0@x) (k2e16@stx->datum k49e0@x))) (set! k30ef@compile-r6rs-top-level (lambda (k49e2@x*) (call-with-values (lambda () (k307f@top-level-expander k49e2@x*)) (lambda (k49e8@k49e5 k49e9@k49e7) ((lambda (k49ec@invoke-code k49ed@lib*) (lambda () (begin (for-each k2c2d@k2a7b@invoke-library k49ed@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (k29b7@k296f@expanded->core k49ec@invoke-code)) (void)) (eval-core (k29b7@k296f@expanded->core k49ec@invoke-code))))) k49e9@k49e7 k49e8@k49e5))))) (set! k30f1@pre-compile-r6rs-top-level (lambda (k49f0@x*) (call-with-values (lambda () (k307f@top-level-expander k49f0@x*)) (lambda (k49f6@k49f3 k49f7@k49f5) ((lambda (k49fa@invoke-code k49fb@lib*) (begin (for-each k2c2d@k2a7b@invoke-library k49fb@lib*) (k2960@k285a@compile-core (k29b7@k296f@expanded->core k49fa@invoke-code)))) k49f7@k49f5 k49f6@k49f3))))) (set! k30f3@interaction-environment ((lambda (k49fe@the-env) (lambda () (or k49fe@the-env ((lambda (k4a00@lib k4a01@rib) (begin ((lambda (k4a04@subst) (begin (k2da2@set-rib-sym*! k4a01@rib (map car k4a04@subst)) (k2da6@set-rib-mark**! k4a01@rib (map (lambda (k4a06@x) k2d86@top-mark*) k4a04@subst)) (k2daa@set-rib-label*! k4a01@rib (map cdr k4a04@subst)))) (k2c08@k2a31@library-subst k4a00@lib)) ((lambda (k4a08@env) (begin (set! k49fe@the-env k4a08@env) k4a08@env)) (make-simple-struct 'interaction-env '4 (list k4a01@rib '() '()))))) (k2c26@k2a6d@find-library-by-name '(mosh interaction)) (k2db6@make-empty-rib))))) '#f)) (set! k30f5@top-level-context (k2962@k285e@make-parameter '#f)) (begin (set! k4b03@k30f5@top-level-context k30f5@top-level-context) (set! k4b02@k30f3@interaction-environment k30f3@interaction-environment) (set! k4b01@k30f1@pre-compile-r6rs-top-level k30f1@pre-compile-r6rs-top-level) (set! k4b00@k30ef@compile-r6rs-top-level k30ef@compile-r6rs-top-level) (set! k4aff@k30ed@syntax->datum k30ed@syntax->datum) (set! k4afe@k30eb@datum->syntax k30eb@datum->syntax) (set! k4afd@k30e9@identifier? k30e9@identifier?) (set! k4afc@k30e7@syntax-violation k30e7@syntax-violation) (set! k4afb@k30e5@syntax-violation* k30e5@syntax-violation*) (set! k4afa@k30e3@syntax-error k30e3@syntax-error) (set! k4af9@k30e1@assertion-error k30e1@assertion-error) (set! k4af8@k30df@expression-position k30df@expression-position) (set! k4af7@k30dd@extract-position-condition k30dd@extract-position-condition) (set! k4af6@k30db@make-source-condition k30db@make-source-condition) (set! k4af5@k30d9@bound-identifier=? k30d9@bound-identifier=?) (set! k4af4@k30d7@free-identifier=? k30d7@free-identifier=?) (set! k4af3@k30d5@generate-temporaries k30d5@generate-temporaries) (set! k4af2@k30d3@make-export-env/macros k30d3@make-export-env/macros) (set! k4af1@k30d1@make-export-subst k30d1@make-export-subst) (set! k4af0@k30cf@build-exports k30cf@build-exports) (set! k4aef@k30cd@rev-map-append k30cd@rev-map-append) (set! k4aee@k30cb@boot-library-expand k30cb@boot-library-expand) (set! k4aed@k30c9@library-expander k30c9@library-expander) (set! k4aec@k30c7@eval k30c7@eval) (set! k4aeb@k30c5@expand k30c5@expand) (set! k4aea@k30c3@scheme-report-environment k30c3@scheme-report-environment) (set! k4ae9@k30c1@null-environment k30c1@null-environment) (set! k4ae8@k30bf@environment k30bf@environment) (set! k4ae7@k30bd@environment-symbols k30bd@environment-symbols) (set! k4ae6@k30bb@environment? k30bb@environment?) (set! k4ae5@k30b9@parse-binding k30b9@parse-binding) (set! k4ae4@k30b7@environment-bindings k30b7@environment-bindings) (set! k4ae3@k30b5@interaction-environment-symbols k30b5@interaction-environment-symbols) (set! k4ae2@k30b3@dummy k30b3@dummy) (set! k4ae1@k30b1@set-interaction-env-locs! k30b1@set-interaction-env-locs!) (set! k4ae0@k30af@interaction-env-locs k30af@interaction-env-locs) (set! k4adf@k30ad@set-interaction-env-r! k30ad@set-interaction-env-r!) (set! k4ade@k30ab@interaction-env-r k30ab@interaction-env-r) (set! k4add@k30a9@set-interaction-env-rib! k30a9@set-interaction-env-rib!) (set! k4adc@k30a7@interaction-env-rib k30a7@interaction-env-rib) (set! k4adb@k30a5@interaction-env? k30a5@interaction-env?) (set! k4ada@k309b@rp k309b@rp) (set! k4ad9@k3099@dummy k3099@dummy) (set! k4ad8@k3097@set-env-itc! k3097@set-env-itc!) (set! k4ad7@k3095@env-itc k3095@env-itc) (set! k4ad6@k3093@set-env-labels! k3093@set-env-labels!) (set! k4ad5@k3091@env-labels k3091@env-labels) (set! k4ad4@k308f@set-env-names! k308f@set-env-names!) (set! k4ad3@k308d@env-names k308d@env-names) (set! k4ad2@k308b@env? k308b@env?) (set! k4ad1@k3081@rp k3081@rp) (set! k4ad0@k307f@top-level-expander k307f@top-level-expander) (set! k4acf@k307d@parse-top-level-program k307d@parse-top-level-program) (set! k4ace@k307b@core-library-expander k307b@core-library-expander) (set! k4acd@k3079@library-body-expander k3079@library-body-expander) (set! k4acc@k3077@chi-interaction-expr k3077@chi-interaction-expr) (set! k4acb@k3075@chi-library-internal k3075@chi-library-internal) (set! k4aca@k3073@imp-collector k3073@imp-collector) (set! k4ac9@k3071@vis-collector k3071@vis-collector) (set! k4ac8@k306f@inv-collector k306f@inv-collector) (set! k4ac7@k306d@make-collector k306d@make-collector) (set! k4ac6@k306b@make-top-rib k306b@make-top-rib) (set! k4ac5@k3069@parse-import-spec* k3069@parse-import-spec*) (set! k4ac4@k3067@parse-library k3067@parse-library) (set! k4ac3@k3065@parse-library-name k3065@parse-library-name) (set! k4ac2@k3063@parse-exports k3063@parse-exports) (set! k4ac1@k3061@expand-transformer k3061@expand-transformer) (set! k4ac0@k305f@chi-body* k305f@chi-body*) (set! k4abf@k305d@chi-internal-module k305d@chi-internal-module) (set! k4abe@k305b@module-interface-exp-id* k305b@module-interface-exp-id*) (set! k4abd@k3059@dummy k3059@dummy) (set! k4abc@k3057@set-module-interface-exp-lab-vec! k3057@set-module-interface-exp-lab-vec!) (set! k4abb@k3055@module-interface-exp-lab-vec k3055@module-interface-exp-lab-vec) (set! k4aba@k3053@set-module-interface-exp-id-vec! k3053@set-module-interface-exp-id-vec!) (set! k4ab9@k3051@module-interface-exp-id-vec k3051@module-interface-exp-id-vec) (set! k4ab8@k304f@set-module-interface-first-mark! k304f@set-module-interface-first-mark!) (set! k4ab7@k304d@module-interface-first-mark k304d@module-interface-first-mark) (set! k4ab6@k304b@module-interface? k304b@module-interface?) (set! k4ab5@k3041@parse-module k3041@parse-module) (set! k4ab4@k303f@chi-internal k303f@chi-internal) (set! k4ab3@k303d@find-dups k303d@find-dups) (set! k4ab2@k303b@find-bound=? k303b@find-bound=?) (set! k4ab1@k3039@chi-rhs* k3039@chi-rhs*) (set! k4ab0@k3037@expand-interaction-rhs*/init* k3037@expand-interaction-rhs*/init*) (set! k4aaf@k3035@chi-rhs k3035@chi-rhs) (set! k4aae@k3033@chi-defun k3033@chi-defun) (set! k4aad@k3031@chi-lambda-clause* k3031@chi-lambda-clause*) (set! k4aac@k302f@chi-lambda-clause k302f@chi-lambda-clause) (set! k4aab@k302d@verify-formals k302d@verify-formals) (set! k4aaa@k302b@chi-set! k302b@chi-set!) (set! k4aa9@k3029@chi-expr k3029@chi-expr) (set! k4aa8@k3027@chi-application k3027@chi-application) (set! k4aa7@k3025@chi-expr* k3025@chi-expr*) (set! k4aa6@k3023@chi-global-macro k3023@chi-global-macro) (set! k4aa5@k3021@chi-local-macro k3021@chi-local-macro) (set! k4aa4@k301f@chi-macro k301f@chi-macro) (set! k4aa3@k301d@do-macro-call k301d@do-macro-call) (set! k4aa2@k301b@local-macro-transformer k301b@local-macro-transformer) (set! k4aa1@k3019@macro-transformer k3019@macro-transformer) (set! k4aa0@k3017@symbol-macro k3017@symbol-macro) (set! k4a9f@k3015@core-macro-transformer k3015@core-macro-transformer) (set! k4a9e@k3013@syntax-transformer k3013@syntax-transformer) (set! k4a9d@k3011@ellipsis-map k3011@ellipsis-map) (set! k4a9c@k300f@syntax-case-transformer k300f@syntax-case-transformer) (set! k4a9b@k300d@verify-literals k300d@verify-literals) (set! k4a9a@k300b@underscore? k300b@underscore?) (set! k4a99@k3009@ellipsis? k3009@ellipsis?) (set! k4a98@k3007@syntax-dispatch k3007@syntax-dispatch) (set! k4a97@k3005@convert-pattern k3005@convert-pattern) (set! k4a96@k3003@foreign-call-transformer k3003@foreign-call-transformer) (set! k4a95@k3001@parameterize-macro k3001@parameterize-macro) (set! k4a94@k2fff@incorrect-usage-macro k2fff@incorrect-usage-macro) (set! k4a93@k2ffd@define-condition-type-macro k2ffd@define-condition-type-macro) (set! k4a92@k2ffb@define-record-type-macro k2ffb@define-record-type-macro) (set! k4a91@k2ff9@define-struct-macro k2ff9@define-struct-macro) (set! k4a90@k2ff7@quasisyntax-macro k2ff7@quasisyntax-macro) (set! k4a8f@k2ff5@quasiquote-macro k2ff5@quasiquote-macro) (set! k4a8e@k2ff3@syntax-rules-macro k2ff3@syntax-rules-macro) (set! k4a8d@k2ff1@include-into-macro k2ff1@include-into-macro) (set! k4a8c@k2fef@include-macro k2fef@include-macro) (set! k4a8b@k2fed@do-include k2fed@do-include) (set! k4a8a@k2feb@cond-macro k2feb@cond-macro) (set! k4a89@k2fe9@and-macro k2fe9@and-macro) (set! k4a88@k2fe7@or-macro k2fe7@or-macro) (set! k4a87@k2fe5@let*-macro k2fe5@let*-macro) (set! k4a86@k2fe3@do-macro k2fe3@do-macro) (set! k4a85@k2fe1@identifier-syntax-macro k2fe1@identifier-syntax-macro) (set! k4a84@k2fdf@endianness-macro k2fdf@endianness-macro) (set! k4a83@k2fdd@assert-macro k2fdd@assert-macro) (set! k4a82@k2fdb@delay-macro k2fdb@delay-macro) (set! k4a81@k2fd9@time-macro k2fd9@time-macro) (set! k4a80@k2fd7@define-enumeration-macro k2fd7@define-enumeration-macro) (set! k4a7f@k2fd5@guard-macro k2fd5@guard-macro) (set! k4a7e@k2fd3@trace-letrec-syntax-macro k2fd3@trace-letrec-syntax-macro) (set! k4a7d@k2fd1@trace-let-syntax-macro k2fd1@trace-let-syntax-macro) (set! k4a7c@k2fcf@trace-let/rec-syntax k2fcf@trace-let/rec-syntax) (set! k4a7b@k2fcd@trace-define-syntax-macro k2fcd@trace-define-syntax-macro) (set! k4a7a@k2fcb@trace-define-macro k2fcb@trace-define-macro) (set! k4a79@k2fc9@trace-lambda-macro k2fc9@trace-lambda-macro) (set! k4a78@k2fc7@let*-values-macro k2fc7@let*-values-macro) (set! k4a77@k2fc5@let-values-macro k2fc5@let-values-macro) (set! k4a76@k2fc3@let-macro k2fc3@let-macro) (set! k4a75@k2fc1@invalid-fmls-error k2fc1@invalid-fmls-error) (set! k4a74@k2fbf@with-syntax-macro k2fbf@with-syntax-macro) (set! k4a73@k2fbd@bless k2fbd@bless) (set! k4a72@k2fbb@lambda-transformer k2fbb@lambda-transformer) (set! k4a71@k2fb9@case-lambda-transformer k2fb9@case-lambda-transformer) (set! k4a70@k2fb7@quote-transformer k2fb7@quote-transformer) (set! k4a6f@k2fb5@case-macro k2fb5@case-macro) (set! k4a6e@k2fb3@or-transformer k2fb3@or-transformer) (set! k4a6d@k2fb1@and-transformer k2fb1@and-transformer) (set! k4a6c@k2faf@if-transformer k2faf@if-transformer) (set! k4a6b@k2fad@unless-macro k2fad@unless-macro) (set! k4a6a@k2fab@when-macro k2fab@when-macro) (set! k4a69@k2fa9@record-constructor-descriptor-transformer k2fa9@record-constructor-descriptor-transformer) (set! k4a68@k2fa7@record-type-descriptor-transformer k2fa7@record-type-descriptor-transformer) (set! k4a67@k2fa5@type-descriptor-transformer k2fa5@type-descriptor-transformer) (set! k4a66@k2fa3@fluid-let-syntax-transformer k2fa3@fluid-let-syntax-transformer) (set! k4a65@k2fa1@letrec*-transformer k2fa1@letrec*-transformer) (set! k4a64@k2f9f@letrec-transformer k2f9f@letrec-transformer) (set! k4a63@k2f9d@letrec-helper k2f9d@letrec-helper) (set! k4a62@k2f9b@add-lexicals k2f9b@add-lexicals) (set! k4a61@k2f99@add-lexical k2f99@add-lexical) (set! k4a60@k2f97@set-lexical-mutable! k2f97@set-lexical-mutable!) (set! k4a5f@k2f95@lexical-mutable? k2f95@lexical-mutable?) (set! k4a5e@k2f93@lexical-var k2f93@lexical-var) (set! k4a5d@k2f91@scheme-stx k2f91@scheme-stx) (set! k4a5c@k2f8f@scheme-stx-hashtable k2f8f@scheme-stx-hashtable) (set! k4a5b@k2f8d@parse-define-syntax k2f8d@parse-define-syntax) (set! k4a5a@k2f8b@parse-define k2f8b@parse-define) (set! k4a59@k2e3a@make-eval-transformer k2e3a@make-eval-transformer) (set! k4a58@k2e38@variable-transformer-procedure k2e38@variable-transformer-procedure) (set! k4a57@k2e36@variable-transformer? k2e36@variable-transformer?) (set! k4a56@k2e34@make-variable-transformer k2e34@make-variable-transformer) (set! k4a55@k2e32@sanitize-binding k2e32@sanitize-binding) (set! k4a54@k2e24@syntax-type k2e24@syntax-type) (set! k4a53@k2e22@raise-unbound-error k2e22@raise-unbound-error) (set! k4a52@k2e20@binding-value k2e20@binding-value) (set! k4a51@k2e1e@binding-type k2e1e@binding-type) (set! k4a50@k2e1c@make-binding k2e1c@make-binding) (set! k4a4f@k2e1a@label->binding k2e1a@label->binding) (set! k4a4e@k2e18@id->label k2e18@id->label) (set! k4a4d@k2e16@stx->datum k2e16@stx->datum) (set! k4a4c@k2e14@strip k2e14@strip) (set! k4a4b@k2e12@strip-annotations k2e12@strip-annotations) (set! k4a4a@k2e10@self-evaluating? k2e10@self-evaluating?) (set! k4a49@k2e0e@bound-id-member? k2e0e@bound-id-member?) (set! k4a48@k2e0c@distinct-bound-ids? k2e0c@distinct-bound-ids?) (set! k4a47@k2e0a@valid-bound-ids? k2e0a@valid-bound-ids?) (set! k4a46@k2e08@free-id=? k2e08@free-id=?) (set! k4a45@k2e06@bound-id=? k2e06@bound-id=?) (set! k4a44@k2e04@id->sym k2e04@id->sym) (set! k4a43@k2e02@id? k2e02@id?) (set! k4a42@k2e00@syntax->list k2e00@syntax->list) (set! k4a41@k2dfe@syntax-cdr k2dfe@syntax-cdr) (set! k4a40@k2dfc@syntax-car k2dfc@syntax-car) (set! k4a3f@k2dfa@syntax-list? k2dfa@syntax-list?) (set! k4a3e@k2df8@syntax-null? k2df8@syntax-null?) (set! k4a3d@k2df6@syntax-vector? k2df6@syntax-vector?) (set! k4a3c@k2df4@syntax-pair? k2df4@syntax-pair?) (set! k4a3b@k2df2@syntax-vector->list k2df2@syntax-vector->list) (set! k4a3a@k2df0@syntax-kind? k2df0@syntax-kind?) (set! k4a39@k2dee@add-subst k2dee@add-subst) (set! k4a38@k2dec@add-mark k2dec@add-mark) (set! k4a37@k2dea@mkstx k2dea@mkstx) (set! k4a36@k2de8@anti-mark? k2de8@anti-mark?) (set! k4a35@k2de6@anti-mark k2de6@anti-mark) (set! k4a34@k2de4@gen-mark k2de4@gen-mark) (set! k4a33@k2de2@datum->stx k2de2@datum->stx) (set! k4a32@k2de0@dummy k2de0@dummy) (set! k4a31@k2dde@set-stx-ae*! k2dde@set-stx-ae*!) (set! k4a30@k2ddc@stx-ae* k2ddc@stx-ae*) (set! k4a2f@k2dda@set-stx-subst*! k2dda@set-stx-subst*!) (set! k4a2e@k2dd8@stx-subst* k2dd8@stx-subst*) (set! k4a2d@k2dd6@set-stx-mark*! k2dd6@set-stx-mark*!) (set! k4a2c@k2dd4@stx-mark* k2dd4@stx-mark*) (set! k4a2b@k2dd2@set-stx-expr! k2dd2@set-stx-expr!) (set! k4a2a@k2dd0@stx-expr k2dd0@stx-expr) (set! k4a29@k2dce@stx? k2dce@stx?) (set! k4a28@k2dc4@rp k2dc4@rp) (set! k4a27@k2dc2@make-full-rib k2dc2@make-full-rib) (set! k4a26@k2dc0@unseal-rib! k2dc0@unseal-rib!) (set! k4a25@k2dbe@seal-rib! k2dbe@seal-rib!) (set! k4a24@k2dbc@make-rib-map k2dbc@make-rib-map) (set! k4a23@k2dba@extend-rib/nc! k2dba@extend-rib/nc!) (set! k4a22@k2db8@extend-rib! k2db8@extend-rib!) (set! k4a21@k2db6@make-empty-rib k2db6@make-empty-rib) (set! k4a20@k2db4@dummy k2db4@dummy) (set! k4a1f@k2db2@set-rib-cache! k2db2@set-rib-cache!) (set! k4a1e@k2db0@rib-cache k2db0@rib-cache) (set! k4a1d@k2dae@set-rib-sealed/freq! k2dae@set-rib-sealed/freq!) (set! k4a1c@k2dac@rib-sealed/freq k2dac@rib-sealed/freq) (set! k4a1b@k2daa@set-rib-label*! k2daa@set-rib-label*!) (set! k4a1a@k2da8@rib-label* k2da8@rib-label*) (set! k4a19@k2da6@set-rib-mark**! k2da6@set-rib-mark**!) (set! k4a18@k2da4@rib-mark** k2da4@rib-mark**) (set! k4a17@k2da2@set-rib-sym*! k2da2@set-rib-sym*!) (set! k4a16@k2da0@rib-sym* k2da0@rib-sym*) (set! k4a15@k2d9e@rib? k2d9e@rib?) (set! k4a14@k2d94@gen-define-label k2d94@gen-define-label) (set! k4a13@k2d92@gen-define-label+loc k2d92@gen-define-label+loc) (set! k4a12@k2d90@gen-top-level-label k2d90@gen-top-level-label) (set! k4a11@k2d8e@gen-label k2d8e@gen-label) (set! k4a10@k2d8c@gen-global k2d8c@gen-global) (set! k4a0f@k2d8a@gen-lexical k2d8a@gen-lexical) (set! k4a0e@k2d88@top-marked? k2d88@top-marked?) (set! k4a0d@k2d86@top-mark* k2d86@top-mark*) (set! k4a0c@k2d81@set-union k2d81@set-union) (set! k4a0b@k2d7f@set-cons k2d7f@set-cons) (set! k4a0a@k2d7d@file-options-macro k2d7d@file-options-macro) (k2c23@k2a67@current-library-expander k30c9@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (k4b12@k4b0d k4b14@k4b0f k4b16@k4b0e k4b19@&condition? k4b1b@make-&condition k4b1d@&condition-rtd k4b1f@&condition-rcd k4b6b@k4b66 k4b6d@k4b68 k4b6f@k4b67 k4b72@p? k4b74@make-message-condition k4b76@k4b65 k4b78@message-condition? k4b7a@condition-message k4b7c@&message-rtd k4b7e@&message-rcd k4b84@k4b7f k4b86@k4b81 k4b88@k4b80 k4b8b@p? k4b8d@make-warning k4b8f@warning? k4b91@&warning-rtd k4b93@&warning-rcd k4b99@k4b94 k4b9b@k4b96 k4b9d@k4b95 k4ba0@p? k4ba2@make-serious-condition k4ba4@serious-condition? k4ba6@&serious-rtd k4ba8@&serious-rcd k4bae@k4ba9 k4bb0@k4bab k4bb2@k4baa k4bb5@p? k4bb7@make-error k4bb9@error? k4bbb@&error-rtd k4bbd@&error-rcd k4bc3@k4bbe k4bc5@k4bc0 k4bc7@k4bbf k4bca@p? k4bcc@make-violation k4bce@violation? k4bd0@&violation-rtd k4bd2@&violation-rcd k4bd8@k4bd3 k4bda@k4bd5 k4bdc@k4bd4 k4bdf@p? k4be1@make-assertion-violation k4be3@assertion-violation? k4be5@&assertion-rtd k4be7@&assertion-rcd k4bef@k4bea k4bf1@k4bec k4bf3@k4beb k4bf6@p? k4bf8@make-irritants-condition k4bfa@k4be9 k4bfc@irritants-condition? k4bfe@condition-irritants k4c00@&irritants-rtd k4c02@&irritants-rcd k4c0a@k4c05 k4c0c@k4c07 k4c0e@k4c06 k4c11@p? k4c13@make-who-condition k4c15@k4c04 k4c17@who-condition? k4c19@condition-who k4c1b@&who-rtd k4c1d@&who-rcd k4c23@k4c1e k4c25@k4c20 k4c27@k4c1f k4c2a@p? k4c2c@make-non-continuable-violation k4c2e@non-continuable-violation? k4c30@&non-continuable-rtd k4c32@&non-continuable-rcd k4c38@k4c33 k4c3a@k4c35 k4c3c@k4c34 k4c3f@p? k4c41@make-implementation-restriction-violation k4c43@implementation-restriction-violation? k4c45@&implementation-restriction-rtd k4c47@&implementation-restriction-rcd k4c4d@k4c48 k4c4f@k4c4a k4c51@k4c49 k4c54@p? k4c56@make-lexical-violation k4c58@lexical-violation? k4c5a@&lexical-rtd k4c5c@&lexical-rcd k4c66@k4c61 k4c68@k4c63 k4c6a@k4c62 k4c6d@p? k4c6f@make-syntax-violation k4c71@k4c5e k4c73@k4c60 k4c75@syntax-violation? k4c77@syntax-violation-form k4c79@syntax-violation-subform k4c7b@&syntax-rtd k4c7d@&syntax-rcd k4c83@k4c7e k4c85@k4c80 k4c87@k4c7f k4c8a@p? k4c8c@make-undefined-violation k4c8e@undefined-violation? k4c90@&undefined-rtd k4c92@&undefined-rcd k4c98@k4c93 k4c9a@k4c95 k4c9c@k4c94 k4c9f@p? k4ca1@make-i/o-error k4ca3@i/o-error? k4ca5@&i/o-rtd k4ca7@&i/o-rcd k4cad@k4ca8 k4caf@k4caa k4cb1@k4ca9 k4cb4@p? k4cb6@make-i/o-read-error k4cb8@i/o-read-error? k4cba@&i/o-read-rtd k4cbc@&i/o-read-rcd k4cc2@k4cbd k4cc4@k4cbf k4cc6@k4cbe k4cc9@p? k4ccb@make-i/o-write-error k4ccd@i/o-write-error? k4ccf@&i/o-write-rtd k4cd1@&i/o-write-rcd k4cd9@k4cd4 k4cdb@k4cd6 k4cdd@k4cd5 k4ce0@p? k4ce2@make-i/o-invalid-position-error k4ce4@k4cd3 k4ce6@i/o-invalid-position-error? k4ce8@i/o-error-position k4cea@&i/o-invalid-position-rtd k4cec@&i/o-invalid-position-rcd k4cf4@k4cef k4cf6@k4cf1 k4cf8@k4cf0 k4cfb@p? k4cfd@make-i/o-filename-error k4cff@k4cee k4d01@i/o-filename-error? k4d03@i/o-error-filename k4d05@&i/o-filename-rtd k4d07@&i/o-filename-rcd k4d0d@k4d08 k4d0f@k4d0a k4d11@k4d09 k4d14@p? k4d16@make-i/o-file-protection-error k4d18@i/o-file-protection-error? k4d1a@&i/o-file-protection-rtd k4d1c@&i/o-file-protection-rcd k4d22@k4d1d k4d24@k4d1f k4d26@k4d1e k4d29@p? k4d2b@make-i/o-file-is-read-only-error k4d2d@i/o-file-is-read-only-error? k4d2f@&i/o-file-is-read-only-rtd k4d31@&i/o-file-is-read-only-rcd k4d37@k4d32 k4d39@k4d34 k4d3b@k4d33 k4d3e@p? k4d40@make-i/o-file-already-exists-error k4d42@i/o-file-already-exists-error? k4d44@&i/o-file-already-exists-rtd k4d46@&i/o-file-already-exists-rcd k4d4c@k4d47 k4d4e@k4d49 k4d50@k4d48 k4d53@p? k4d55@make-i/o-file-does-not-exist-error k4d57@i/o-file-does-not-exist-error? k4d59@&i/o-file-does-not-exist-rtd k4d5b@&i/o-file-does-not-exist-rcd k4d63@k4d5e k4d65@k4d60 k4d67@k4d5f k4d6a@p? k4d6c@make-i/o-port-error k4d6e@k4d5d k4d70@i/o-port-error? k4d72@i/o-error-port k4d74@&i/o-port-rtd k4d76@&i/o-port-rcd k4d7c@k4d77 k4d7e@k4d79 k4d80@k4d78 k4d83@p? k4d85@make-i/o-decoding-error k4d87@i/o-decoding-error? k4d89@&i/o-decoding-rtd k4d8b@&i/o-decoding-rcd k4d93@k4d8e k4d95@k4d90 k4d97@k4d8f k4d9a@p? k4d9c@make-i/o-encoding-error k4d9e@k4d8d k4da0@i/o-encoding-error? k4da2@i/o-encoding-error-char k4da4@&i/o-encoding-rtd k4da6@&i/o-encoding-rcd k4dac@k4da7 k4dae@k4da9 k4db0@k4da8 k4db3@p? k4db5@make-no-infinities-violation k4db7@no-infinities-violation? k4db9@&no-infinities-rtd k4dbb@&no-infinities-rcd k4dc1@k4dbc k4dc3@k4dbe k4dc5@k4dbd k4dc8@p? k4dca@make-no-nans-violation k4dcc@no-nans-violation? k4dce@&no-nans-rtd k4dd0@&no-nans-rcd) (begin (set! k4b12@k4b0d (make-record-type-descriptor '&condition '#f 'k4b10 '#f '#f '#())) (set! k4b14@k4b0f '#f) (set! k4b16@k4b0e (make-record-constructor-descriptor k4b12@k4b0d '#f k4b14@k4b0f)) (set! k4b19@&condition? (record-predicate k4b12@k4b0d)) (set! k4b1b@make-&condition (record-constructor k4b16@k4b0e)) (set! k4b1d@&condition-rtd k4b12@k4b0d) (set! k4b1f@&condition-rcd k4b16@k4b0e) (set! k4b6b@k4b66 (make-record-type-descriptor '&message k4b12@k4b0d 'k4b69 '#f '#f '#((immutable message)))) (set! k4b6d@k4b68 '#f) (set! k4b6f@k4b67 (make-record-constructor-descriptor k4b6b@k4b66 k4b16@k4b0e k4b6d@k4b68)) (set! k4b72@p? (record-predicate k4b6b@k4b66)) (set! k4b74@make-message-condition (record-constructor k4b6f@k4b67)) (set! k4b76@k4b65 (record-accessor k4b6b@k4b66 '0)) (set! k4b78@message-condition? (condition-predicate k4b6b@k4b66)) (set! k4b7a@condition-message (condition-accessor k4b6b@k4b66 k4b76@k4b65)) (set! k4b7c@&message-rtd k4b6b@k4b66) (set! k4b7e@&message-rcd k4b6f@k4b67) (set! k4b84@k4b7f (make-record-type-descriptor '&warning k4b12@k4b0d 'k4b82 '#f '#f '#())) (set! k4b86@k4b81 '#f) (set! k4b88@k4b80 (make-record-constructor-descriptor k4b84@k4b7f k4b16@k4b0e k4b86@k4b81)) (set! k4b8b@p? (record-predicate k4b84@k4b7f)) (set! k4b8d@make-warning (record-constructor k4b88@k4b80)) (set! k4b8f@warning? (condition-predicate k4b84@k4b7f)) (set! k4b91@&warning-rtd k4b84@k4b7f) (set! k4b93@&warning-rcd k4b88@k4b80) (set! k4b99@k4b94 (make-record-type-descriptor '&serious k4b12@k4b0d 'k4b97 '#f '#f '#())) (set! k4b9b@k4b96 '#f) (set! k4b9d@k4b95 (make-record-constructor-descriptor k4b99@k4b94 k4b16@k4b0e k4b9b@k4b96)) (set! k4ba0@p? (record-predicate k4b99@k4b94)) (set! k4ba2@make-serious-condition (record-constructor k4b9d@k4b95)) (set! k4ba4@serious-condition? (condition-predicate k4b99@k4b94)) (set! k4ba6@&serious-rtd k4b99@k4b94) (set! k4ba8@&serious-rcd k4b9d@k4b95) (set! k4bae@k4ba9 (make-record-type-descriptor '&error k4b99@k4b94 'k4bac '#f '#f '#())) (set! k4bb0@k4bab '#f) (set! k4bb2@k4baa (make-record-constructor-descriptor k4bae@k4ba9 k4b9d@k4b95 k4bb0@k4bab)) (set! k4bb5@p? (record-predicate k4bae@k4ba9)) (set! k4bb7@make-error (record-constructor k4bb2@k4baa)) (set! k4bb9@error? (condition-predicate k4bae@k4ba9)) (set! k4bbb@&error-rtd k4bae@k4ba9) (set! k4bbd@&error-rcd k4bb2@k4baa) (set! k4bc3@k4bbe (make-record-type-descriptor '&violation k4b99@k4b94 'k4bc1 '#f '#f '#())) (set! k4bc5@k4bc0 '#f) (set! k4bc7@k4bbf (make-record-constructor-descriptor k4bc3@k4bbe k4b9d@k4b95 k4bc5@k4bc0)) (set! k4bca@p? (record-predicate k4bc3@k4bbe)) (set! k4bcc@make-violation (record-constructor k4bc7@k4bbf)) (set! k4bce@violation? (condition-predicate k4bc3@k4bbe)) (set! k4bd0@&violation-rtd k4bc3@k4bbe) (set! k4bd2@&violation-rcd k4bc7@k4bbf) (set! k4bd8@k4bd3 (make-record-type-descriptor '&assertion k4bc3@k4bbe 'k4bd6 '#f '#f '#())) (set! k4bda@k4bd5 '#f) (set! k4bdc@k4bd4 (make-record-constructor-descriptor k4bd8@k4bd3 k4bc7@k4bbf k4bda@k4bd5)) (set! k4bdf@p? (record-predicate k4bd8@k4bd3)) (set! k4be1@make-assertion-violation (record-constructor k4bdc@k4bd4)) (set! k4be3@assertion-violation? (condition-predicate k4bd8@k4bd3)) (set! k4be5@&assertion-rtd k4bd8@k4bd3) (set! k4be7@&assertion-rcd k4bdc@k4bd4) (set! k4bef@k4bea (make-record-type-descriptor '&irritants k4b12@k4b0d 'k4bed '#f '#f '#((immutable irritants)))) (set! k4bf1@k4bec '#f) (set! k4bf3@k4beb (make-record-constructor-descriptor k4bef@k4bea k4b16@k4b0e k4bf1@k4bec)) (set! k4bf6@p? (record-predicate k4bef@k4bea)) (set! k4bf8@make-irritants-condition (record-constructor k4bf3@k4beb)) (set! k4bfa@k4be9 (record-accessor k4bef@k4bea '0)) (set! k4bfc@irritants-condition? (condition-predicate k4bef@k4bea)) (set! k4bfe@condition-irritants (condition-accessor k4bef@k4bea k4bfa@k4be9)) (set! k4c00@&irritants-rtd k4bef@k4bea) (set! k4c02@&irritants-rcd k4bf3@k4beb) (set! k4c0a@k4c05 (make-record-type-descriptor '&who k4b12@k4b0d 'k4c08 '#f '#f '#((immutable who)))) (set! k4c0c@k4c07 '#f) (set! k4c0e@k4c06 (make-record-constructor-descriptor k4c0a@k4c05 k4b16@k4b0e k4c0c@k4c07)) (set! k4c11@p? (record-predicate k4c0a@k4c05)) (set! k4c13@make-who-condition (record-constructor k4c0e@k4c06)) (set! k4c15@k4c04 (record-accessor k4c0a@k4c05 '0)) (set! k4c17@who-condition? (condition-predicate k4c0a@k4c05)) (set! k4c19@condition-who (condition-accessor k4c0a@k4c05 k4c15@k4c04)) (set! k4c1b@&who-rtd k4c0a@k4c05) (set! k4c1d@&who-rcd k4c0e@k4c06) (set! k4c23@k4c1e (make-record-type-descriptor '&non-continuable k4bc3@k4bbe 'k4c21 '#f '#f '#())) (set! k4c25@k4c20 '#f) (set! k4c27@k4c1f (make-record-constructor-descriptor k4c23@k4c1e k4bc7@k4bbf k4c25@k4c20)) (set! k4c2a@p? (record-predicate k4c23@k4c1e)) (set! k4c2c@make-non-continuable-violation (record-constructor k4c27@k4c1f)) (set! k4c2e@non-continuable-violation? (condition-predicate k4c23@k4c1e)) (set! k4c30@&non-continuable-rtd k4c23@k4c1e) (set! k4c32@&non-continuable-rcd k4c27@k4c1f) (set! k4c38@k4c33 (make-record-type-descriptor '&implementation-restriction k4bc3@k4bbe 'k4c36 '#f '#f '#())) (set! k4c3a@k4c35 '#f) (set! k4c3c@k4c34 (make-record-constructor-descriptor k4c38@k4c33 k4bc7@k4bbf k4c3a@k4c35)) (set! k4c3f@p? (record-predicate k4c38@k4c33)) (set! k4c41@make-implementation-restriction-violation (record-constructor k4c3c@k4c34)) (set! k4c43@implementation-restriction-violation? (condition-predicate k4c38@k4c33)) (set! k4c45@&implementation-restriction-rtd k4c38@k4c33) (set! k4c47@&implementation-restriction-rcd k4c3c@k4c34) (set! k4c4d@k4c48 (make-record-type-descriptor '&lexical k4bc3@k4bbe 'k4c4b '#f '#f '#())) (set! k4c4f@k4c4a '#f) (set! k4c51@k4c49 (make-record-constructor-descriptor k4c4d@k4c48 k4bc7@k4bbf k4c4f@k4c4a)) (set! k4c54@p? (record-predicate k4c4d@k4c48)) (set! k4c56@make-lexical-violation (record-constructor k4c51@k4c49)) (set! k4c58@lexical-violation? (condition-predicate k4c4d@k4c48)) (set! k4c5a@&lexical-rtd k4c4d@k4c48) (set! k4c5c@&lexical-rcd k4c51@k4c49) (set! k4c66@k4c61 (make-record-type-descriptor '&syntax k4bc3@k4bbe 'k4c64 '#f '#f '#((immutable form) (immutable subform)))) (set! k4c68@k4c63 '#f) (set! k4c6a@k4c62 (make-record-constructor-descriptor k4c66@k4c61 k4bc7@k4bbf k4c68@k4c63)) (set! k4c6d@p? (record-predicate k4c66@k4c61)) (set! k4c6f@make-syntax-violation (record-constructor k4c6a@k4c62)) (set! k4c71@k4c5e (record-accessor k4c66@k4c61 '0)) (set! k4c73@k4c60 (record-accessor k4c66@k4c61 '1)) (set! k4c75@syntax-violation? (condition-predicate k4c66@k4c61)) (set! k4c77@syntax-violation-form (condition-accessor k4c66@k4c61 k4c71@k4c5e)) (set! k4c79@syntax-violation-subform (condition-accessor k4c66@k4c61 k4c73@k4c60)) (set! k4c7b@&syntax-rtd k4c66@k4c61) (set! k4c7d@&syntax-rcd k4c6a@k4c62) (set! k4c83@k4c7e (make-record-type-descriptor '&undefined k4bc3@k4bbe 'k4c81 '#f '#f '#())) (set! k4c85@k4c80 '#f) (set! k4c87@k4c7f (make-record-constructor-descriptor k4c83@k4c7e k4bc7@k4bbf k4c85@k4c80)) (set! k4c8a@p? (record-predicate k4c83@k4c7e)) (set! k4c8c@make-undefined-violation (record-constructor k4c87@k4c7f)) (set! k4c8e@undefined-violation? (condition-predicate k4c83@k4c7e)) (set! k4c90@&undefined-rtd k4c83@k4c7e) (set! k4c92@&undefined-rcd k4c87@k4c7f) (set! k4c98@k4c93 (make-record-type-descriptor '&i/o k4bae@k4ba9 'k4c96 '#f '#f '#())) (set! k4c9a@k4c95 '#f) (set! k4c9c@k4c94 (make-record-constructor-descriptor k4c98@k4c93 k4bb2@k4baa k4c9a@k4c95)) (set! k4c9f@p? (record-predicate k4c98@k4c93)) (set! k4ca1@make-i/o-error (record-constructor k4c9c@k4c94)) (set! k4ca3@i/o-error? (condition-predicate k4c98@k4c93)) (set! k4ca5@&i/o-rtd k4c98@k4c93) (set! k4ca7@&i/o-rcd k4c9c@k4c94) (set! k4cad@k4ca8 (make-record-type-descriptor '&i/o-read k4c98@k4c93 'k4cab '#f '#f '#())) (set! k4caf@k4caa '#f) (set! k4cb1@k4ca9 (make-record-constructor-descriptor k4cad@k4ca8 k4c9c@k4c94 k4caf@k4caa)) (set! k4cb4@p? (record-predicate k4cad@k4ca8)) (set! k4cb6@make-i/o-read-error (record-constructor k4cb1@k4ca9)) (set! k4cb8@i/o-read-error? (condition-predicate k4cad@k4ca8)) (set! k4cba@&i/o-read-rtd k4cad@k4ca8) (set! k4cbc@&i/o-read-rcd k4cb1@k4ca9) (set! k4cc2@k4cbd (make-record-type-descriptor '&i/o-write k4c98@k4c93 'k4cc0 '#f '#f '#())) (set! k4cc4@k4cbf '#f) (set! k4cc6@k4cbe (make-record-constructor-descriptor k4cc2@k4cbd k4c9c@k4c94 k4cc4@k4cbf)) (set! k4cc9@p? (record-predicate k4cc2@k4cbd)) (set! k4ccb@make-i/o-write-error (record-constructor k4cc6@k4cbe)) (set! k4ccd@i/o-write-error? (condition-predicate k4cc2@k4cbd)) (set! k4ccf@&i/o-write-rtd k4cc2@k4cbd) (set! k4cd1@&i/o-write-rcd k4cc6@k4cbe) (set! k4cd9@k4cd4 (make-record-type-descriptor '&i/o-invalid-position k4c98@k4c93 'k4cd7 '#f '#f '#((immutable position)))) (set! k4cdb@k4cd6 '#f) (set! k4cdd@k4cd5 (make-record-constructor-descriptor k4cd9@k4cd4 k4c9c@k4c94 k4cdb@k4cd6)) (set! k4ce0@p? (record-predicate k4cd9@k4cd4)) (set! k4ce2@make-i/o-invalid-position-error (record-constructor k4cdd@k4cd5)) (set! k4ce4@k4cd3 (record-accessor k4cd9@k4cd4 '0)) (set! k4ce6@i/o-invalid-position-error? (condition-predicate k4cd9@k4cd4)) (set! k4ce8@i/o-error-position (condition-accessor k4cd9@k4cd4 k4ce4@k4cd3)) (set! k4cea@&i/o-invalid-position-rtd k4cd9@k4cd4) (set! k4cec@&i/o-invalid-position-rcd k4cdd@k4cd5) (set! k4cf4@k4cef (make-record-type-descriptor '&i/o-filename k4c98@k4c93 'k4cf2 '#f '#f '#((immutable filename)))) (set! k4cf6@k4cf1 '#f) (set! k4cf8@k4cf0 (make-record-constructor-descriptor k4cf4@k4cef k4c9c@k4c94 k4cf6@k4cf1)) (set! k4cfb@p? (record-predicate k4cf4@k4cef)) (set! k4cfd@make-i/o-filename-error (record-constructor k4cf8@k4cf0)) (set! k4cff@k4cee (record-accessor k4cf4@k4cef '0)) (set! k4d01@i/o-filename-error? (condition-predicate k4cf4@k4cef)) (set! k4d03@i/o-error-filename (condition-accessor k4cf4@k4cef k4cff@k4cee)) (set! k4d05@&i/o-filename-rtd k4cf4@k4cef) (set! k4d07@&i/o-filename-rcd k4cf8@k4cf0) (set! k4d0d@k4d08 (make-record-type-descriptor '&i/o-file-protection k4cf4@k4cef 'k4d0b '#f '#f '#())) (set! k4d0f@k4d0a '#f) (set! k4d11@k4d09 (make-record-constructor-descriptor k4d0d@k4d08 k4cf8@k4cf0 k4d0f@k4d0a)) (set! k4d14@p? (record-predicate k4d0d@k4d08)) (set! k4d16@make-i/o-file-protection-error (record-constructor k4d11@k4d09)) (set! k4d18@i/o-file-protection-error? (condition-predicate k4d0d@k4d08)) (set! k4d1a@&i/o-file-protection-rtd k4d0d@k4d08) (set! k4d1c@&i/o-file-protection-rcd k4d11@k4d09) (set! k4d22@k4d1d (make-record-type-descriptor '&i/o-file-is-read-only k4d0d@k4d08 'k4d20 '#f '#f '#())) (set! k4d24@k4d1f '#f) (set! k4d26@k4d1e (make-record-constructor-descriptor k4d22@k4d1d k4d11@k4d09 k4d24@k4d1f)) (set! k4d29@p? (record-predicate k4d22@k4d1d)) (set! k4d2b@make-i/o-file-is-read-only-error (record-constructor k4d26@k4d1e)) (set! k4d2d@i/o-file-is-read-only-error? (condition-predicate k4d22@k4d1d)) (set! k4d2f@&i/o-file-is-read-only-rtd k4d22@k4d1d) (set! k4d31@&i/o-file-is-read-only-rcd k4d26@k4d1e) (set! k4d37@k4d32 (make-record-type-descriptor '&i/o-file-already-exists k4cf4@k4cef 'k4d35 '#f '#f '#())) (set! k4d39@k4d34 '#f) (set! k4d3b@k4d33 (make-record-constructor-descriptor k4d37@k4d32 k4cf8@k4cf0 k4d39@k4d34)) (set! k4d3e@p? (record-predicate k4d37@k4d32)) (set! k4d40@make-i/o-file-already-exists-error (record-constructor k4d3b@k4d33)) (set! k4d42@i/o-file-already-exists-error? (condition-predicate k4d37@k4d32)) (set! k4d44@&i/o-file-already-exists-rtd k4d37@k4d32) (set! k4d46@&i/o-file-already-exists-rcd k4d3b@k4d33) (set! k4d4c@k4d47 (make-record-type-descriptor '&i/o-file-does-not-exist k4cf4@k4cef 'k4d4a '#f '#f '#())) (set! k4d4e@k4d49 '#f) (set! k4d50@k4d48 (make-record-constructor-descriptor k4d4c@k4d47 k4cf8@k4cf0 k4d4e@k4d49)) (set! k4d53@p? (record-predicate k4d4c@k4d47)) (set! k4d55@make-i/o-file-does-not-exist-error (record-constructor k4d50@k4d48)) (set! k4d57@i/o-file-does-not-exist-error? (condition-predicate k4d4c@k4d47)) (set! k4d59@&i/o-file-does-not-exist-rtd k4d4c@k4d47) (set! k4d5b@&i/o-file-does-not-exist-rcd k4d50@k4d48) (set! k4d63@k4d5e (make-record-type-descriptor '&i/o-port k4c98@k4c93 'k4d61 '#f '#f '#((immutable port)))) (set! k4d65@k4d60 '#f) (set! k4d67@k4d5f (make-record-constructor-descriptor k4d63@k4d5e k4c9c@k4c94 k4d65@k4d60)) (set! k4d6a@p? (record-predicate k4d63@k4d5e)) (set! k4d6c@make-i/o-port-error (record-constructor k4d67@k4d5f)) (set! k4d6e@k4d5d (record-accessor k4d63@k4d5e '0)) (set! k4d70@i/o-port-error? (condition-predicate k4d63@k4d5e)) (set! k4d72@i/o-error-port (condition-accessor k4d63@k4d5e k4d6e@k4d5d)) (set! k4d74@&i/o-port-rtd k4d63@k4d5e) (set! k4d76@&i/o-port-rcd k4d67@k4d5f) (set! k4d7c@k4d77 (make-record-type-descriptor '&i/o-decoding k4d63@k4d5e 'k4d7a '#f '#f '#())) (set! k4d7e@k4d79 '#f) (set! k4d80@k4d78 (make-record-constructor-descriptor k4d7c@k4d77 k4d67@k4d5f k4d7e@k4d79)) (set! k4d83@p? (record-predicate k4d7c@k4d77)) (set! k4d85@make-i/o-decoding-error (record-constructor k4d80@k4d78)) (set! k4d87@i/o-decoding-error? (condition-predicate k4d7c@k4d77)) (set! k4d89@&i/o-decoding-rtd k4d7c@k4d77) (set! k4d8b@&i/o-decoding-rcd k4d80@k4d78) (set! k4d93@k4d8e (make-record-type-descriptor '&i/o-encoding k4d63@k4d5e 'k4d91 '#f '#f '#((immutable char)))) (set! k4d95@k4d90 '#f) (set! k4d97@k4d8f (make-record-constructor-descriptor k4d93@k4d8e k4d67@k4d5f k4d95@k4d90)) (set! k4d9a@p? (record-predicate k4d93@k4d8e)) (set! k4d9c@make-i/o-encoding-error (record-constructor k4d97@k4d8f)) (set! k4d9e@k4d8d (record-accessor k4d93@k4d8e '0)) (set! k4da0@i/o-encoding-error? (condition-predicate k4d93@k4d8e)) (set! k4da2@i/o-encoding-error-char (condition-accessor k4d93@k4d8e k4d9e@k4d8d)) (set! k4da4@&i/o-encoding-rtd k4d93@k4d8e) (set! k4da6@&i/o-encoding-rcd k4d97@k4d8f) (set! k4dac@k4da7 (make-record-type-descriptor '&no-infinities k4c38@k4c33 'k4daa '#f '#f '#())) (set! k4dae@k4da9 '#f) (set! k4db0@k4da8 (make-record-constructor-descriptor k4dac@k4da7 k4c3c@k4c34 k4dae@k4da9)) (set! k4db3@p? (record-predicate k4dac@k4da7)) (set! k4db5@make-no-infinities-violation (record-constructor k4db0@k4da8)) (set! k4db7@no-infinities-violation? (condition-predicate k4dac@k4da7)) (set! k4db9@&no-infinities-rtd k4dac@k4da7) (set! k4dbb@&no-infinities-rcd k4db0@k4da8) (set! k4dc1@k4dbc (make-record-type-descriptor '&no-nans k4c38@k4c33 'k4dbf '#f '#f '#())) (set! k4dc3@k4dbe '#f) (set! k4dc5@k4dbd (make-record-constructor-descriptor k4dc1@k4dbc k4c3c@k4c34 k4dc3@k4dbe)) (set! k4dc8@p? (record-predicate k4dc1@k4dbc)) (set! k4dca@make-no-nans-violation (record-constructor k4dc5@k4dbd)) (set! k4dcc@no-nans-violation? (condition-predicate k4dc1@k4dbc)) (set! k4dce@&no-nans-rtd k4dc1@k4dbc) (set! k4dd0@&no-nans-rcd k4dc5@k4dbd) (begin (set! k4ec1@k4dd0@&no-nans-rcd k4dd0@&no-nans-rcd) (set! k4ec0@k4dce@&no-nans-rtd k4dce@&no-nans-rtd) (set! k4ebf@k4dcc@no-nans-violation? k4dcc@no-nans-violation?) (set! k4ebe@k4dca@make-no-nans-violation k4dca@make-no-nans-violation) (set! k4ebd@k4dc8@p? k4dc8@p?) (set! k4ebc@k4dc5@k4dbd k4dc5@k4dbd) (set! k4ebb@k4dc3@k4dbe k4dc3@k4dbe) (set! k4eba@k4dc1@k4dbc k4dc1@k4dbc) (set! k4eb9@k4dbb@&no-infinities-rcd k4dbb@&no-infinities-rcd) (set! k4eb8@k4db9@&no-infinities-rtd k4db9@&no-infinities-rtd) (set! k4eb7@k4db7@no-infinities-violation? k4db7@no-infinities-violation?) (set! k4eb6@k4db5@make-no-infinities-violation k4db5@make-no-infinities-violation) (set! k4eb5@k4db3@p? k4db3@p?) (set! k4eb4@k4db0@k4da8 k4db0@k4da8) (set! k4eb3@k4dae@k4da9 k4dae@k4da9) (set! k4eb2@k4dac@k4da7 k4dac@k4da7) (set! k4eb1@k4da6@&i/o-encoding-rcd k4da6@&i/o-encoding-rcd) (set! k4eb0@k4da4@&i/o-encoding-rtd k4da4@&i/o-encoding-rtd) (set! k4eaf@k4da2@i/o-encoding-error-char k4da2@i/o-encoding-error-char) (set! k4eae@k4da0@i/o-encoding-error? k4da0@i/o-encoding-error?) (set! k4ead@k4d9e@k4d8d k4d9e@k4d8d) (set! k4eac@k4d9c@make-i/o-encoding-error k4d9c@make-i/o-encoding-error) (set! k4eab@k4d9a@p? k4d9a@p?) (set! k4eaa@k4d97@k4d8f k4d97@k4d8f) (set! k4ea9@k4d95@k4d90 k4d95@k4d90) (set! k4ea8@k4d93@k4d8e k4d93@k4d8e) (set! k4ea7@k4d8b@&i/o-decoding-rcd k4d8b@&i/o-decoding-rcd) (set! k4ea6@k4d89@&i/o-decoding-rtd k4d89@&i/o-decoding-rtd) (set! k4ea5@k4d87@i/o-decoding-error? k4d87@i/o-decoding-error?) (set! k4ea4@k4d85@make-i/o-decoding-error k4d85@make-i/o-decoding-error) (set! k4ea3@k4d83@p? k4d83@p?) (set! k4ea2@k4d80@k4d78 k4d80@k4d78) (set! k4ea1@k4d7e@k4d79 k4d7e@k4d79) (set! k4ea0@k4d7c@k4d77 k4d7c@k4d77) (set! k4e9f@k4d76@&i/o-port-rcd k4d76@&i/o-port-rcd) (set! k4e9e@k4d74@&i/o-port-rtd k4d74@&i/o-port-rtd) (set! k4e9d@k4d72@i/o-error-port k4d72@i/o-error-port) (set! k4e9c@k4d70@i/o-port-error? k4d70@i/o-port-error?) (set! k4e9b@k4d6e@k4d5d k4d6e@k4d5d) (set! k4e9a@k4d6c@make-i/o-port-error k4d6c@make-i/o-port-error) (set! k4e99@k4d6a@p? k4d6a@p?) (set! k4e98@k4d67@k4d5f k4d67@k4d5f) (set! k4e97@k4d65@k4d60 k4d65@k4d60) (set! k4e96@k4d63@k4d5e k4d63@k4d5e) (set! k4e95@k4d5b@&i/o-file-does-not-exist-rcd k4d5b@&i/o-file-does-not-exist-rcd) (set! k4e94@k4d59@&i/o-file-does-not-exist-rtd k4d59@&i/o-file-does-not-exist-rtd) (set! k4e93@k4d57@i/o-file-does-not-exist-error? k4d57@i/o-file-does-not-exist-error?) (set! k4e92@k4d55@make-i/o-file-does-not-exist-error k4d55@make-i/o-file-does-not-exist-error) (set! k4e91@k4d53@p? k4d53@p?) (set! k4e90@k4d50@k4d48 k4d50@k4d48) (set! k4e8f@k4d4e@k4d49 k4d4e@k4d49) (set! k4e8e@k4d4c@k4d47 k4d4c@k4d47) (set! k4e8d@k4d46@&i/o-file-already-exists-rcd k4d46@&i/o-file-already-exists-rcd) (set! k4e8c@k4d44@&i/o-file-already-exists-rtd k4d44@&i/o-file-already-exists-rtd) (set! k4e8b@k4d42@i/o-file-already-exists-error? k4d42@i/o-file-already-exists-error?) (set! k4e8a@k4d40@make-i/o-file-already-exists-error k4d40@make-i/o-file-already-exists-error) (set! k4e89@k4d3e@p? k4d3e@p?) (set! k4e88@k4d3b@k4d33 k4d3b@k4d33) (set! k4e87@k4d39@k4d34 k4d39@k4d34) (set! k4e86@k4d37@k4d32 k4d37@k4d32) (set! k4e85@k4d31@&i/o-file-is-read-only-rcd k4d31@&i/o-file-is-read-only-rcd) (set! k4e84@k4d2f@&i/o-file-is-read-only-rtd k4d2f@&i/o-file-is-read-only-rtd) (set! k4e83@k4d2d@i/o-file-is-read-only-error? k4d2d@i/o-file-is-read-only-error?) (set! k4e82@k4d2b@make-i/o-file-is-read-only-error k4d2b@make-i/o-file-is-read-only-error) (set! k4e81@k4d29@p? k4d29@p?) (set! k4e80@k4d26@k4d1e k4d26@k4d1e) (set! k4e7f@k4d24@k4d1f k4d24@k4d1f) (set! k4e7e@k4d22@k4d1d k4d22@k4d1d) (set! k4e7d@k4d1c@&i/o-file-protection-rcd k4d1c@&i/o-file-protection-rcd) (set! k4e7c@k4d1a@&i/o-file-protection-rtd k4d1a@&i/o-file-protection-rtd) (set! k4e7b@k4d18@i/o-file-protection-error? k4d18@i/o-file-protection-error?) (set! k4e7a@k4d16@make-i/o-file-protection-error k4d16@make-i/o-file-protection-error) (set! k4e79@k4d14@p? k4d14@p?) (set! k4e78@k4d11@k4d09 k4d11@k4d09) (set! k4e77@k4d0f@k4d0a k4d0f@k4d0a) (set! k4e76@k4d0d@k4d08 k4d0d@k4d08) (set! k4e75@k4d07@&i/o-filename-rcd k4d07@&i/o-filename-rcd) (set! k4e74@k4d05@&i/o-filename-rtd k4d05@&i/o-filename-rtd) (set! k4e73@k4d03@i/o-error-filename k4d03@i/o-error-filename) (set! k4e72@k4d01@i/o-filename-error? k4d01@i/o-filename-error?) (set! k4e71@k4cff@k4cee k4cff@k4cee) (set! k4e70@k4cfd@make-i/o-filename-error k4cfd@make-i/o-filename-error) (set! k4e6f@k4cfb@p? k4cfb@p?) (set! k4e6e@k4cf8@k4cf0 k4cf8@k4cf0) (set! k4e6d@k4cf6@k4cf1 k4cf6@k4cf1) (set! k4e6c@k4cf4@k4cef k4cf4@k4cef) (set! k4e6b@k4cec@&i/o-invalid-position-rcd k4cec@&i/o-invalid-position-rcd) (set! k4e6a@k4cea@&i/o-invalid-position-rtd k4cea@&i/o-invalid-position-rtd) (set! k4e69@k4ce8@i/o-error-position k4ce8@i/o-error-position) (set! k4e68@k4ce6@i/o-invalid-position-error? k4ce6@i/o-invalid-position-error?) (set! k4e67@k4ce4@k4cd3 k4ce4@k4cd3) (set! k4e66@k4ce2@make-i/o-invalid-position-error k4ce2@make-i/o-invalid-position-error) (set! k4e65@k4ce0@p? k4ce0@p?) (set! k4e64@k4cdd@k4cd5 k4cdd@k4cd5) (set! k4e63@k4cdb@k4cd6 k4cdb@k4cd6) (set! k4e62@k4cd9@k4cd4 k4cd9@k4cd4) (set! k4e61@k4cd1@&i/o-write-rcd k4cd1@&i/o-write-rcd) (set! k4e60@k4ccf@&i/o-write-rtd k4ccf@&i/o-write-rtd) (set! k4e5f@k4ccd@i/o-write-error? k4ccd@i/o-write-error?) (set! k4e5e@k4ccb@make-i/o-write-error k4ccb@make-i/o-write-error) (set! k4e5d@k4cc9@p? k4cc9@p?) (set! k4e5c@k4cc6@k4cbe k4cc6@k4cbe) (set! k4e5b@k4cc4@k4cbf k4cc4@k4cbf) (set! k4e5a@k4cc2@k4cbd k4cc2@k4cbd) (set! k4e59@k4cbc@&i/o-read-rcd k4cbc@&i/o-read-rcd) (set! k4e58@k4cba@&i/o-read-rtd k4cba@&i/o-read-rtd) (set! k4e57@k4cb8@i/o-read-error? k4cb8@i/o-read-error?) (set! k4e56@k4cb6@make-i/o-read-error k4cb6@make-i/o-read-error) (set! k4e55@k4cb4@p? k4cb4@p?) (set! k4e54@k4cb1@k4ca9 k4cb1@k4ca9) (set! k4e53@k4caf@k4caa k4caf@k4caa) (set! k4e52@k4cad@k4ca8 k4cad@k4ca8) (set! k4e51@k4ca7@&i/o-rcd k4ca7@&i/o-rcd) (set! k4e50@k4ca5@&i/o-rtd k4ca5@&i/o-rtd) (set! k4e4f@k4ca3@i/o-error? k4ca3@i/o-error?) (set! k4e4e@k4ca1@make-i/o-error k4ca1@make-i/o-error) (set! k4e4d@k4c9f@p? k4c9f@p?) (set! k4e4c@k4c9c@k4c94 k4c9c@k4c94) (set! k4e4b@k4c9a@k4c95 k4c9a@k4c95) (set! k4e4a@k4c98@k4c93 k4c98@k4c93) (set! k4e49@k4c92@&undefined-rcd k4c92@&undefined-rcd) (set! k4e48@k4c90@&undefined-rtd k4c90@&undefined-rtd) (set! k4e47@k4c8e@undefined-violation? k4c8e@undefined-violation?) (set! k4e46@k4c8c@make-undefined-violation k4c8c@make-undefined-violation) (set! k4e45@k4c8a@p? k4c8a@p?) (set! k4e44@k4c87@k4c7f k4c87@k4c7f) (set! k4e43@k4c85@k4c80 k4c85@k4c80) (set! k4e42@k4c83@k4c7e k4c83@k4c7e) (set! k4e41@k4c7d@&syntax-rcd k4c7d@&syntax-rcd) (set! k4e40@k4c7b@&syntax-rtd k4c7b@&syntax-rtd) (set! k4e3f@k4c79@syntax-violation-subform k4c79@syntax-violation-subform) (set! k4e3e@k4c77@syntax-violation-form k4c77@syntax-violation-form) (set! k4e3d@k4c75@syntax-violation? k4c75@syntax-violation?) (set! k4e3c@k4c73@k4c60 k4c73@k4c60) (set! k4e3b@k4c71@k4c5e k4c71@k4c5e) (set! k4e3a@k4c6f@make-syntax-violation k4c6f@make-syntax-violation) (set! k4e39@k4c6d@p? k4c6d@p?) (set! k4e38@k4c6a@k4c62 k4c6a@k4c62) (set! k4e37@k4c68@k4c63 k4c68@k4c63) (set! k4e36@k4c66@k4c61 k4c66@k4c61) (set! k4e35@k4c5c@&lexical-rcd k4c5c@&lexical-rcd) (set! k4e34@k4c5a@&lexical-rtd k4c5a@&lexical-rtd) (set! k4e33@k4c58@lexical-violation? k4c58@lexical-violation?) (set! k4e32@k4c56@make-lexical-violation k4c56@make-lexical-violation) (set! k4e31@k4c54@p? k4c54@p?) (set! k4e30@k4c51@k4c49 k4c51@k4c49) (set! k4e2f@k4c4f@k4c4a k4c4f@k4c4a) (set! k4e2e@k4c4d@k4c48 k4c4d@k4c48) (set! k4e2d@k4c47@&implementation-restriction-rcd k4c47@&implementation-restriction-rcd) (set! k4e2c@k4c45@&implementation-restriction-rtd k4c45@&implementation-restriction-rtd) (set! k4e2b@k4c43@implementation-restriction-violation? k4c43@implementation-restriction-violation?) (set! k4e2a@k4c41@make-implementation-restriction-violation k4c41@make-implementation-restriction-violation) (set! k4e29@k4c3f@p? k4c3f@p?) (set! k4e28@k4c3c@k4c34 k4c3c@k4c34) (set! k4e27@k4c3a@k4c35 k4c3a@k4c35) (set! k4e26@k4c38@k4c33 k4c38@k4c33) (set! k4e25@k4c32@&non-continuable-rcd k4c32@&non-continuable-rcd) (set! k4e24@k4c30@&non-continuable-rtd k4c30@&non-continuable-rtd) (set! k4e23@k4c2e@non-continuable-violation? k4c2e@non-continuable-violation?) (set! k4e22@k4c2c@make-non-continuable-violation k4c2c@make-non-continuable-violation) (set! k4e21@k4c2a@p? k4c2a@p?) (set! k4e20@k4c27@k4c1f k4c27@k4c1f) (set! k4e1f@k4c25@k4c20 k4c25@k4c20) (set! k4e1e@k4c23@k4c1e k4c23@k4c1e) (set! k4e1d@k4c1d@&who-rcd k4c1d@&who-rcd) (set! k4e1c@k4c1b@&who-rtd k4c1b@&who-rtd) (set! k4e1b@k4c19@condition-who k4c19@condition-who) (set! k4e1a@k4c17@who-condition? k4c17@who-condition?) (set! k4e19@k4c15@k4c04 k4c15@k4c04) (set! k4e18@k4c13@make-who-condition k4c13@make-who-condition) (set! k4e17@k4c11@p? k4c11@p?) (set! k4e16@k4c0e@k4c06 k4c0e@k4c06) (set! k4e15@k4c0c@k4c07 k4c0c@k4c07) (set! k4e14@k4c0a@k4c05 k4c0a@k4c05) (set! k4e13@k4c02@&irritants-rcd k4c02@&irritants-rcd) (set! k4e12@k4c00@&irritants-rtd k4c00@&irritants-rtd) (set! k4e11@k4bfe@condition-irritants k4bfe@condition-irritants) (set! k4e10@k4bfc@irritants-condition? k4bfc@irritants-condition?) (set! k4e0f@k4bfa@k4be9 k4bfa@k4be9) (set! k4e0e@k4bf8@make-irritants-condition k4bf8@make-irritants-condition) (set! k4e0d@k4bf6@p? k4bf6@p?) (set! k4e0c@k4bf3@k4beb k4bf3@k4beb) (set! k4e0b@k4bf1@k4bec k4bf1@k4bec) (set! k4e0a@k4bef@k4bea k4bef@k4bea) (set! k4e09@k4be7@&assertion-rcd k4be7@&assertion-rcd) (set! k4e08@k4be5@&assertion-rtd k4be5@&assertion-rtd) (set! k4e07@k4be3@assertion-violation? k4be3@assertion-violation?) (set! k4e06@k4be1@make-assertion-violation k4be1@make-assertion-violation) (set! k4e05@k4bdf@p? k4bdf@p?) (set! k4e04@k4bdc@k4bd4 k4bdc@k4bd4) (set! k4e03@k4bda@k4bd5 k4bda@k4bd5) (set! k4e02@k4bd8@k4bd3 k4bd8@k4bd3) (set! k4e01@k4bd2@&violation-rcd k4bd2@&violation-rcd) (set! k4e00@k4bd0@&violation-rtd k4bd0@&violation-rtd) (set! k4dff@k4bce@violation? k4bce@violation?) (set! k4dfe@k4bcc@make-violation k4bcc@make-violation) (set! k4dfd@k4bca@p? k4bca@p?) (set! k4dfc@k4bc7@k4bbf k4bc7@k4bbf) (set! k4dfb@k4bc5@k4bc0 k4bc5@k4bc0) (set! k4dfa@k4bc3@k4bbe k4bc3@k4bbe) (set! k4df9@k4bbd@&error-rcd k4bbd@&error-rcd) (set! k4df8@k4bbb@&error-rtd k4bbb@&error-rtd) (set! k4df7@k4bb9@error? k4bb9@error?) (set! k4df6@k4bb7@make-error k4bb7@make-error) (set! k4df5@k4bb5@p? k4bb5@p?) (set! k4df4@k4bb2@k4baa k4bb2@k4baa) (set! k4df3@k4bb0@k4bab k4bb0@k4bab) (set! k4df2@k4bae@k4ba9 k4bae@k4ba9) (set! k4df1@k4ba8@&serious-rcd k4ba8@&serious-rcd) (set! k4df0@k4ba6@&serious-rtd k4ba6@&serious-rtd) (set! k4def@k4ba4@serious-condition? k4ba4@serious-condition?) (set! k4dee@k4ba2@make-serious-condition k4ba2@make-serious-condition) (set! k4ded@k4ba0@p? k4ba0@p?) (set! k4dec@k4b9d@k4b95 k4b9d@k4b95) (set! k4deb@k4b9b@k4b96 k4b9b@k4b96) (set! k4dea@k4b99@k4b94 k4b99@k4b94) (set! k4de9@k4b93@&warning-rcd k4b93@&warning-rcd) (set! k4de8@k4b91@&warning-rtd k4b91@&warning-rtd) (set! k4de7@k4b8f@warning? k4b8f@warning?) (set! k4de6@k4b8d@make-warning k4b8d@make-warning) (set! k4de5@k4b8b@p? k4b8b@p?) (set! k4de4@k4b88@k4b80 k4b88@k4b80) (set! k4de3@k4b86@k4b81 k4b86@k4b81) (set! k4de2@k4b84@k4b7f k4b84@k4b7f) (set! k4de1@k4b7e@&message-rcd k4b7e@&message-rcd) (set! k4de0@k4b7c@&message-rtd k4b7c@&message-rtd) (set! k4ddf@k4b7a@condition-message k4b7a@condition-message) (set! k4dde@k4b78@message-condition? k4b78@message-condition?) (set! k4ddd@k4b76@k4b65 k4b76@k4b65) (set! k4ddc@k4b74@make-message-condition k4b74@make-message-condition) (set! k4ddb@k4b72@p? k4b72@p?) (set! k4dda@k4b6f@k4b67 k4b6f@k4b67) (set! k4dd9@k4b6d@k4b68 k4b6d@k4b68) (set! k4dd8@k4b6b@k4b66 k4b6b@k4b66) (set! k4dd7@k4b1f@&condition-rcd k4b1f@&condition-rcd) (set! k4dd6@k4b1d@&condition-rtd k4b1d@&condition-rtd) (set! k4dd5@k4b1b@make-&condition k4b1b@make-&condition) (set! k4dd4@k4b19@&condition? k4b19@&condition?) (set! k4dd3@k4b16@k4b0e k4b16@k4b0e) (set! k4dd2@k4b14@k4b0f k4b14@k4b0f) (set! k4dd1@k4b12@k4b0d k4b12@k4b0d)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (k29b4@k2969@current-primitive-locations (lambda (k5342@x) ((lambda (k5344@t) (if k5344@t (cdr k5344@t) '#f)) (assq k5342@x '((&no-nans-rcd . k4ec1@k4dd0@&no-nans-rcd) (&no-nans-rtd . k4ec0@k4dce@&no-nans-rtd) (&no-infinities-rcd . k4eb9@k4dbb@&no-infinities-rcd) (&no-infinities-rtd . k4eb8@k4db9@&no-infinities-rtd) (&i/o-encoding-rcd . k4eb1@k4da6@&i/o-encoding-rcd) (&i/o-encoding-rtd . k4eb0@k4da4@&i/o-encoding-rtd) (&i/o-decoding-rcd . k4ea7@k4d8b@&i/o-decoding-rcd) (&i/o-decoding-rtd . k4ea6@k4d89@&i/o-decoding-rtd) (&i/o-port-rcd . k4e9f@k4d76@&i/o-port-rcd) (&i/o-port-rtd . k4e9e@k4d74@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . k4e95@k4d5b@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . k4e94@k4d59@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . k4e8d@k4d46@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . k4e8c@k4d44@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . k4e85@k4d31@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . k4e84@k4d2f@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . k4e7d@k4d1c@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . k4e7c@k4d1a@&i/o-file-protection-rtd) (&i/o-filename-rcd . k4e75@k4d07@&i/o-filename-rcd) (&i/o-filename-rtd . k4e74@k4d05@&i/o-filename-rtd) (&i/o-invalid-position-rcd . k4e6b@k4cec@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . k4e6a@k4cea@&i/o-invalid-position-rtd) (&i/o-write-rcd . k4e61@k4cd1@&i/o-write-rcd) (&i/o-write-rtd . k4e60@k4ccf@&i/o-write-rtd) (&i/o-read-rcd . k4e59@k4cbc@&i/o-read-rcd) (&i/o-read-rtd . k4e58@k4cba@&i/o-read-rtd) (&i/o-rcd . k4e51@k4ca7@&i/o-rcd) (&i/o-rtd . k4e50@k4ca5@&i/o-rtd) (&undefined-rcd . k4e49@k4c92@&undefined-rcd) (&undefined-rtd . k4e48@k4c90@&undefined-rtd) (&syntax-rcd . k4e41@k4c7d@&syntax-rcd) (&syntax-rtd . k4e40@k4c7b@&syntax-rtd) (&lexical-rcd . k4e35@k4c5c@&lexical-rcd) (&lexical-rtd . k4e34@k4c5a@&lexical-rtd) (&implementation-restriction-rcd . k4e2d@k4c47@&implementation-restriction-rcd) (&implementation-restriction-rtd . k4e2c@k4c45@&implementation-restriction-rtd) (&non-continuable-rcd . k4e25@k4c32@&non-continuable-rcd) (&non-continuable-rtd . k4e24@k4c30@&non-continuable-rtd) (&who-rcd . k4e1d@k4c1d@&who-rcd) (&who-rtd . k4e1c@k4c1b@&who-rtd) (&irritants-rcd . k4e13@k4c02@&irritants-rcd) (&irritants-rtd . k4e12@k4c00@&irritants-rtd) (&assertion-rcd . k4e09@k4be7@&assertion-rcd) (&assertion-rtd . k4e08@k4be5@&assertion-rtd) (&violation-rcd . k4e01@k4bd2@&violation-rcd) (&violation-rtd . k4e00@k4bd0@&violation-rtd) (&error-rcd . k4df9@k4bbd@&error-rcd) (&error-rtd . k4df8@k4bbb@&error-rtd) (&serious-rcd . k4df1@k4ba8@&serious-rcd) (&serious-rtd . k4df0@k4ba6@&serious-rtd) (&warning-rcd . k4de9@k4b93@&warning-rcd) (&warning-rtd . k4de8@k4b91@&warning-rtd) (&message-rcd . k4de1@k4b7e@&message-rcd) (&message-rtd . k4de0@k4b7c@&message-rtd) (&condition-rcd . k4dd7@k4b1f@&condition-rcd) (&condition-rtd . k4dd6@k4b1d@&condition-rtd) (syntax-error . k4afa@k30e3@syntax-error) (syntax-dispatch . k4a98@k3007@syntax-dispatch) (load . k4ff2@k4edd@load) (interaction-environment . k4b02@k30f3@interaction-environment) (library-path . k2c1b@k2a57@library-path) (make-parameter . k2962@k285e@make-parameter) (make-variable-transformer . k4a56@k2e34@make-variable-transformer) (identifier? . k4afd@k30e9@identifier?) (generate-temporaries . k4af3@k30d5@generate-temporaries) (free-identifier=? . k4af4@k30d7@free-identifier=?) (syntax->datum . k4aff@k30ed@syntax->datum) (datum->syntax . k4afe@k30eb@datum->syntax) (bound-identifier=? . k4af5@k30d9@bound-identifier=?) (make-i/o-write-error . k4e5e@k4ccb@make-i/o-write-error) (make-i/o-read-error . k4e56@k4cb6@make-i/o-read-error) (make-i/o-port-error . k4e9a@k4d6c@make-i/o-port-error) (make-i/o-invalid-position-error . k4e66@k4ce2@make-i/o-invalid-position-error) (make-i/o-filename-error . k4e70@k4cfd@make-i/o-filename-error) (make-i/o-file-protection-error . k4e7a@k4d16@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . k4e82@k4d2b@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . k4e92@k4d55@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . k4e8a@k4d40@make-i/o-file-already-exists-error) (make-i/o-error . k4e4e@k4ca1@make-i/o-error) (make-i/o-encoding-error . k4eac@k4d9c@make-i/o-encoding-error) (make-i/o-decoding-error . k4ea4@k4d85@make-i/o-decoding-error) (i/o-write-error? . k4e5f@k4ccd@i/o-write-error?) (i/o-read-error? . k4e57@k4cb8@i/o-read-error?) (i/o-port-error? . k4e9c@k4d70@i/o-port-error?) (i/o-invalid-position-error? . k4e68@k4ce6@i/o-invalid-position-error?) (i/o-filename-error? . k4e72@k4d01@i/o-filename-error?) (i/o-file-protection-error? . k4e7b@k4d18@i/o-file-protection-error?) (i/o-file-is-read-only-error? . k4e83@k4d2d@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . k4e93@k4d57@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . k4e8b@k4d42@i/o-file-already-exists-error?) (i/o-error? . k4e4f@k4ca3@i/o-error?) (i/o-error-position . k4e69@k4ce8@i/o-error-position) (i/o-error-port . k4e9d@k4d72@i/o-error-port) (i/o-error-filename . k4e73@k4d03@i/o-error-filename) (i/o-encoding-error? . k4eae@k4da0@i/o-encoding-error?) (i/o-encoding-error-char . k4eaf@k4da2@i/o-encoding-error-char) (i/o-decoding-error? . k4ea5@k4d87@i/o-decoding-error?) (scheme-report-environment . k4aea@k30c3@scheme-report-environment) (null-environment . k4ae9@k30c1@null-environment) (command-line . k4fef@k4ed7@command-line) (eval . k4aec@k30c7@eval) (environment . k4ae8@k30bf@environment) (who-condition? . k4e1a@k4c17@who-condition?) (warning? . k4de7@k4b8f@warning?) (violation? . k4dff@k4bce@violation?) (undefined-violation? . k4e47@k4c8e@undefined-violation?) (syntax-violation? . k4e3d@k4c75@syntax-violation?) (syntax-violation-subform . k4e3f@k4c79@syntax-violation-subform) (syntax-violation-form . k4e3e@k4c77@syntax-violation-form) (syntax-violation . k4afc@k30e7@syntax-violation) (serious-condition? . k4def@k4ba4@serious-condition?) (non-continuable-violation? . k4e23@k4c2e@non-continuable-violation?) (message-condition? . k4dde@k4b78@message-condition?) (make-who-condition . k4e18@k4c13@make-who-condition) (make-warning . k4de6@k4b8d@make-warning) (make-violation . k4dfe@k4bcc@make-violation) (make-undefined-violation . k4e46@k4c8c@make-undefined-violation) (make-syntax-violation . k4e3a@k4c6f@make-syntax-violation) (make-serious-condition . k4dee@k4ba2@make-serious-condition) (make-non-continuable-violation . k4e22@k4c2c@make-non-continuable-violation) (make-message-condition . k4ddc@k4b74@make-message-condition) (make-lexical-violation . k4e32@k4c56@make-lexical-violation) (make-irritants-condition . k4e0e@k4bf8@make-irritants-condition) (make-implementation-restriction-violation . k4e2a@k4c41@make-implementation-restriction-violation) (make-error . k4df6@k4bb7@make-error) (make-assertion-violation . k4e06@k4be1@make-assertion-violation) (lexical-violation? . k4e33@k4c58@lexical-violation?) (irritants-condition? . k4e10@k4bfc@irritants-condition?) (implementation-restriction-violation? . k4e2b@k4c43@implementation-restriction-violation?) (error? . k4df7@k4bb9@error?) (condition-who . k4e1b@k4c19@condition-who) (condition-message . k4ddf@k4b7a@condition-message) (condition-irritants . k4e11@k4bfe@condition-irritants) (assertion-violation? . k4e07@k4be3@assertion-violation?) (no-nans-violation? . k4ebf@k4dcc@no-nans-violation?) (no-infinities-violation? . k4eb7@k4db7@no-infinities-violation?) (make-no-nans-violation . k4ebe@k4dca@make-no-nans-violation) (make-no-infinities-violation . k4eb6@k4db5@make-no-infinities-violation) (assertion-error . k4af9@k30e1@assertion-error)))))) (k2c2b@k2a77@install-library 'k531f '(mosh interaction) '() '() '() '() '((regexp? . k5317) (alist->eq-hash-table . k5314) (format . k5311) (string-split . k5306) (call-process . k5300) (set-current-directory! . k52fc) (expand-path . k52fb) (current-directory . k52fa) (%spawn . k52f9) (%waitpid . k52f8) (simple-struct-name . k52f7) (simple-struct-set! . k52f6) (simple-struct-ref . k52f5) (make-simple-struct . k52f4) (simple-struct? . k52f3) (pointer-ref-c-int64 . k52f2) (pointer-ref-c-int32 . k52f1) (pointer-ref-c-int16 . k52f0) (pointer-ref-c-int8 . k52ef) (pointer-ref-c-uint64 . k52ee) (pointer-ref-c-uint32 . k52ed) (pointer-ref-c-uint16 . k52ec) (pointer-ref-c-uint8 . k52eb) (pointer-set-c-uint64! . k52ea) (pointer-set-c-uint32! . k52e9) (pointer-set-c-uint16! . k52e8) (pointer-set-c-uint8! . k52e7) (pointer-set-c-int64! . k52e6) (pointer-set-c-int32! . k52e5) (pointer-set-c-int16! . k52e4) (pointer-set-c-int8! . k52e3) (pointer-set-c-pointer! . k52e2) (pointer-set-c-double! . k52e1) (pointer-set-c-float! . k52e0) (pointer-set-c-long-long! . k52df) (pointer-set-c-long! . k52de) (pointer-set-c-int! . k52dd) (pointer-set-c-short! . k52dc) (pointer-set-c-char! . k52db) (pointer-ref-c-pointer . k52da) (pointer-ref-c-double . k52d9) (pointer-ref-c-float . k52d8) (pointer-ref-c-unsigned-long-long . k52d7) (pointer-ref-c-signed-long-long . k52d6) (pointer-ref-c-unsigned-long . k52d5) (pointer-ref-c-signed-long . k52d4) (pointer-ref-c-unsigned-int . k52d3) (pointer-ref-c-signed-int . k52d2) (pointer-ref-c-unsigned-short . k52d1) (pointer-ref-c-signed-short . k52d0) (pointer-ref-c-unsigned-char . k52cf) (pointer-ref-c-signed-char . k52ce) (pointer->integer . k52cd) (integer->pointer . k52cc) (pointer? . k52cb) (shared-errno . k52ca) (%ffi-supported? . k52c9) (%ffi-pointer->string . k52c8) (%ffi-call->string-or-zero . k52c7) (%ffi-call->double . k52c6) (%ffi-call->void* . k52c5) (%ffi-call->void . k52c4) (%ffi-call->char . k52c3) (%ffi-call->int . k52c2) (%ffi-lookup . k52c1) (%ffi-open . k52c0) (%fork . k52bf) (%pipe . k52be) (p . k52bd) (whereis . k52a2) (register . k52a1) (vm-join! . k52a0) (vm-set-value! . k529f) (vm? . k529e) (main-vm? . k529d) (vm-eval . k529c) (vm-self . k529b) (vm-start! . k529a) (make-vm . k5299) (mutex-try-lock! . k5298) (mutex-unlock! . k5297) (mutex-lock! . k5296) (mutex? . k5295) (make-mutex . k5294) (condition-variable-notify-all! . k5293) (condition-variable-notify! . k5292) (condition-variable-wait! . k5291) (make-condition-variable . k5290) (string-upcase . k5279) (string-titlecase . k5278) (string-normalize-nfkd . k5277) (string-normalize-nfkc . k5276) (string-normalize-nfd . k5275) (string-normalize-nfc . k5274) (string-foldcase . k5273) (string-downcase . k5272) (string-ci>? . k5271) (string-ci>=? . k5270) (string-ci=? . k526f) (string-ci<? . k526e) (string-ci<=? . k526d) (char-whitespace? . k526c) (char-upper-case? . k526b) (char-title-case? . k526a) (char-numeric? . k5269) (char-lower-case? . k5268) (char-general-category . k5267) (char-upcase . k5266) (char-titlecase . k5265) (char-foldcase . k5264) (char-downcase . k5263) (char-ci>? . k5262) (char-ci>=? . k5261) (char-ci=? . k5260) (char-ci<? . k525f) (char-ci<=? . k525e) (char-alphabetic? . k525d) (make-variable-transformer . k2e33) (identifier? . k30e8) (generate-temporaries . k30d4) (free-identifier=? . k30d6) (syntax->datum . k30ec) (datum->syntax . k30ea) (bound-identifier=? . k30d8) (record-type-descriptor? . k525c) (record-predicate . k525b) (record-mutator . k525a) (record-constructor . k5259) (record-accessor . k5258) (make-record-type-descriptor . k5257) (make-record-constructor-descriptor . k5256) (record? . k5255) (record-type-uid . k5254) (record-type-sealed? . k5253) (record-type-parent . k5252) (record-type-opaque? . k5251) (record-type-name . k5250) (record-type-generative? . k524f) (record-type-field-names . k524e) (record-rtd . k524d) (record-field-mutable? . k524c) (delete-file . k524b) (file-exists? . k524a) (vector-sort! . k5249) (vector-sort . k5248) (list-sort . k5247) (symbol-hash . k5246) (string-ci-hash . k5245) (string-hash . k5244) (equal-hash . k5243) (hashtable-equivalence-function . k5242) (make-hashtable . k5241) (hashtable-hash-function . k5240) (make-eqv-hashtable . k523f) (make-eq-hashtable . k523e) (hashtable? . k523d) (hashtable-update! . k523c) (hashtable-size . k523b) (hashtable-set! . k523a) (hashtable-ref . k5239) (hashtable-mutable? . k5238) (hashtable-keys . k5237) (hashtable-entries . k5236) (hashtable-delete! . k5235) (hashtable-copy . k5234) (hashtable-contains? . k5233) (hashtable-clear! . k5232) (call-with-output-file . k5231) (call-with-input-file . k5230) (write-char . k522f) (write . k522e) (with-output-to-file . k522d) (with-input-from-file . k522c) (read-char . k522b) (read . k522a) (peek-char . k5229) (open-output-file . k5228) (open-input-file . k5227) (newline . k5226) (display . k5225) (close-output-port . k5224) (close-input-port . k5223) (eof-object? . k5222) (eof-object . k5221) (current-error-port . k5220) (current-output-port . k521f) (current-input-port . k521e) (output-port? . k521d) (input-port? . k521c) (utf-8-codec . k521b) (utf-16-codec . k521a) (transcoder-error-handling-mode . k5219) (transcoder-eol-style . k5218) (transcoder-codec . k5217) (transcoded-port . k5216) (textual-port? . k5215) (string->bytevector . k5214) (standard-output-port . k5213) (standard-input-port . k5212) (standard-error-port . k5211) (set-port-position! . k5210) (put-u8 . k520f) (put-string . k520e) (put-datum . k520d) (put-char . k520c) (put-bytevector . k520b) (port? . k520a) (port-transcoder . k5209) (port-position . k5208) (port-has-set-port-position!? . k5207) (port-has-port-position? . k5206) (port-eof? . k5205) (output-port-buffer-mode . k5204) (open-string-output-port . k5203) (open-string-input-port . k5202) (open-file-output-port . k5201) (open-file-input/output-port . k5200) (open-file-input-port . k51ff) (open-bytevector-output-port . k51fe) (open-bytevector-input-port . k51fd) (native-transcoder . k51fc) (native-eol-style . k51fb) (make-transcoder . k51fa) (latin-1-codec . k51f9) (make-i/o-write-error . k4cca) (make-i/o-read-error . k4cb5) (make-i/o-port-error . k4d6b) (make-i/o-invalid-position-error . k4ce1) (make-i/o-filename-error . k4cfc) (make-i/o-file-protection-error . k4d15) (make-i/o-file-is-read-only-error . k4d2a) (make-i/o-file-does-not-exist-error . k4d54) (make-i/o-file-already-exists-error . k4d3f) (make-i/o-error . k4ca0) (make-i/o-encoding-error . k4d9b) (make-i/o-decoding-error . k4d84) (make-custom-textual-output-port . k51f8) (make-custom-textual-input/output-port . k51f7) (make-custom-textual-input-port . k51f6) (make-custom-binary-output-port . k51f5) (make-custom-binary-input/output-port . k51f4) (make-custom-binary-input-port . k51f3) (make-bytevector . k51f2) (lookahead-u8 . k51f1) (lookahead-char . k51f0) (i/o-write-error? . k4ccc) (i/o-read-error? . k4cb7) (i/o-port-error? . k4d6f) (i/o-invalid-position-error? . k4ce5) (i/o-filename-error? . k4d00) (i/o-file-protection-error? . k4d17) (i/o-file-is-read-only-error? . k4d2c) (i/o-file-does-not-exist-error? . k4d56) (i/o-file-already-exists-error? . k4d41) (i/o-error? . k4ca2) (i/o-error-position . k4ce7) (i/o-error-port . k4d71) (i/o-error-filename . k4d02) (i/o-encoding-error? . k4d9f) (i/o-encoding-error-char . k4da1) (i/o-decoding-error? . k4d86) (get-u8 . k51ef) (get-string-n! . k51ee) (get-string-n . k51ed) (get-string-all . k51ec) (get-line . k51eb) (get-datum . k51ea) (get-char . k51e9) (get-bytevector-some . k51e8) (get-bytevector-n! . k51e7) (get-bytevector-n . k51e6) (get-bytevector-all . k51e5) (flush-output-port . k51e4) (close-port . k51e3) (exit . k51db) (command-line . k4ed6) (string-fill! . k51da) (string-set! . k51d9) (set-cdr! . k51d8) (set-car! . k51d7) (remove . k51d6) (remv . k51d5) (remp . k51d4) (remq . k51d3) (partition . k51d2) (memv . k51d1) (memq . k51d0) (memp . k51cf) (member . k51ce) (exists . k51cd) (for-all . k51cc) (fold-right . k51cb) (fold-left . k51ca) (find . k51c9) (filter . k51c8) (cons* . k51c7) (assv . k51c6) (assq . k51c5) (assp . k51c4) (assoc . k51c3) (call-with-string-output-port . k51c2) (call-with-port . k51c1) (call-with-bytevector-output-port . k51c0) (bytevector->string . k51bf) (buffer-mode? . k51be) (binary-port? . k51bd) (with-exception-handler . k51bc) (raise-continuable . k51bb) (raise . k51ba) (eval . k30c6) (environment . k30be) (make-enumeration . k51b9) (enum-set=? . k51b8) (enum-set-universe . k51b7) (enum-set-union . k51b6) (enum-set-subset? . k51b5) (enum-set-projection . k51b4) (enum-set-member? . k51b3) (enum-set-intersection . k51b2) (enum-set-indexer . k51b1) (enum-set-difference . k51b0) (enum-set-constructor . k51af) (enum-set-complement . k51ae) (enum-set->list . k51ad) (who-condition? . k4c16) (warning? . k4b8e) (violation? . k4bcd) (undefined-violation? . k4c8d) (syntax-violation? . k4c74) (syntax-violation-subform . k4c78) (syntax-violation-form . k4c76) (syntax-violation . k30e6) (simple-conditions . k51ac) (serious-condition? . k4ba3) (non-continuable-violation? . k4c2d) (message-condition? . k4b77) (make-who-condition . k4c12) (make-warning . k4b8c) (make-violation . k4bcb) (make-undefined-violation . k4c8b) (make-syntax-violation . k4c6e) (make-serious-condition . k4ba1) (make-non-continuable-violation . k4c2b) (make-message-condition . k4b73) (make-lexical-violation . k4c55) (make-irritants-condition . k4bf7) (make-implementation-restriction-violation . k4c40) (make-error . k4bb6) (make-assertion-violation . k4be0) (lexical-violation? . k4c57) (irritants-condition? . k4bfb) (implementation-restriction-violation? . k4c42) (error? . k4bb8) (condition-who . k4c18) (condition-predicate . k51ab) (condition-message . k4b79) (condition-irritants . k4bfd) (condition-accessor . k51aa) (condition . k51a9) (assertion-violation? . k4be2) (condition? . k51a8) (utf32->string . k51a7) (utf16->string . k51a6) (utf8->string . k51a5) (uint-list->bytevector . k51a4) (u8-list->bytevector . k51a3) (string->utf8 . k51a2) (string->utf32 . k51a1) (string->utf16 . k51a0) (sint-list->bytevector . k519f) (native-endianness . k519e) (bytevector? . k519d) (bytevector=? . k519c) (bytevector-uint-set! . k519b) (bytevector-uint-ref . k519a) (bytevector-u8-set! . k5199) (bytevector-u8-ref . k5198) (bytevector-u64-set! . k5197) (bytevector-u64-ref . k5196) (bytevector-u64-native-set! . k5195) (bytevector-u64-native-ref . k5194) (bytevector-u32-set! . k5193) (bytevector-u32-ref . k5192) (bytevector-u32-native-set! . k5191) (bytevector-u32-native-ref . k5190) (bytevector-u16-set! . k518f) (bytevector-u16-ref . k518e) (bytevector-u16-native-set! . k518d) (bytevector-u16-native-ref . k518c) (bytevector-sint-set! . k518b) (bytevector-sint-ref . k518a) (bytevector-s8-set! . k5189) (bytevector-s8-ref . k5188) (bytevector-s64-set! . k5187) (bytevector-s64-ref . k5186) (bytevector-s64-native-set! . k5185) (bytevector-s64-native-ref . k5184) (bytevector-s32-set! . k5183) (bytevector-s32-ref . k5182) (bytevector-s32-native-set! . k5181) (bytevector-s32-native-ref . k5180) (bytevector-s16-set! . k517f) (bytevector-s16-ref . k517e) (bytevector-s16-native-set! . k517d) (bytevector-s16-native-ref . k517c) (bytevector-length . k517b) (bytevector-ieee-single-ref . k517a) (bytevector-ieee-single-set! . k5179) (bytevector-ieee-single-native-set! . k5178) (bytevector-ieee-single-native-ref . k5177) (bytevector-ieee-double-set! . k5176) (bytevector-ieee-double-ref . k5175) (bytevector-ieee-double-native-set! . k5174) (bytevector-ieee-double-native-ref . k5173) (bytevector-fill! . k5172) (bytevector-copy! . k5171) (bytevector-copy . k5170) (bytevector->uint-list . k516f) (bytevector->u8-list . k516e) (bytevector->sint-list . k516d) (no-nans-violation? . k4dcb) (no-infinities-violation? . k4db6) (make-no-nans-violation . k4dc9) (make-no-infinities-violation . k4db4) (real->flonum . k516c) (flzero? . k516b) (fltruncate . k516a) (fltan . k5169) (flsqrt . k5168) (flsin . k5167) (flround . k5166) (flpositive? . k5165) (flonum? . k5164) (flodd? . k5163) (flnumerator . k5162) (flnegative? . k5161) (flnan? . k5160) (flmod0 . k515f) (flmod . k515e) (flmin . k515d) (flmax . k515c) (fllog . k515b) (flinteger? . k515a) (flinfinite? . k5159) (flfloor . k5158) (flfinite? . k5157) (flexpt . k5156) (flexp . k5155) (fleven? . k5154) (fldiv0-and-mod0 . k5153) (fldiv0 . k5152) (fldiv-and-mod . k5151) (fldiv . k5150) (fldenominator . k514f) (flcos . k514e) (flceiling . k514d) (flatan . k514c) (flasin . k514b) (flacos . k514a) (flabs . k5149) (fl>? . k5148) (fl>=? . k5147) (fl=? . k5146) (fl<? . k5145) (fl<=? . k5144) (fl/ . k5143) (fl- . k5142) (fl+ . k5141) (fl* . k5140) (fixnum->flonum . k513f) (fxzero? . k513e) (fxxor . k513d) (fxrotate-bit-field . k513c) (fxreverse-bit-field . k513b) (fxpositive? . k513a) (fxodd? . k5139) (fxnot . k5138) (fxnegative? . k5137) (fxmod0 . k5136) (fxmod . k5135) (fxmin . k5134) (fxmax . k5133) (fxlength . k5132) (fxior . k5131) (fxif . k5130) (fxfirst-bit-set . k512f) (fxeven? . k512e) (fxdiv0-and-mod0 . k512d) (fxdiv0 . k512c) (fxdiv-and-mod . k512b) (fxdiv . k512a) (fxcopy-bit-field . k5129) (fxcopy-bit . k5128) (fxbit-set? . k5127) (fxbit-field . k5126) (fxbit-count . k5125) (fxarithmetic-shift-right . k5124) (fxarithmetic-shift-left . k5123) (fxarithmetic-shift . k5122) (fxand . k5121) (fx>? . k5120) (fx>=? . k511f) (fx=? . k511e) (fx<? . k511d) (fx<=? . k511c) (fx-/carry . k511b) (fx- . k511a) (fx+/carry . k5119) (fx+ . k5118) (fx*/carry . k5117) (fx* . k5116) (greatest-fixnum . k5115) (least-fixnum . k5114) (fixnum-width . k5113) (fixnum? . k5112) (bitwise-rotate-bit-field . k5111) (bitwise-reverse-bit-field . k5110) (bitwise-length . k510f) (bitwise-if . k510e) (bitwise-first-bit-set . k510d) (bitwise-copy-bit-field . k510c) (bitwise-copy-bit . k510b) (bitwise-bit-set? . k510a) (bitwise-bit-field . k5109) (bitwise-bit-count . k5108) (bitwise-xor . k5107) (bitwise-ior . k5106) (bitwise-and . k5105) (bitwise-not . k5104) (bitwise-arithmetic-shift-right . k5103) (bitwise-arithmetic-shift-left . k5102) (bitwise-arithmetic-shift . k5101) (zero? . k5100) (vector? . k50ff) (vector-set! . k50fe) (vector-ref . k50fd) (vector-map . k50fc) (vector-length . k50fb) (vector-for-each . k50fa) (vector-fill! . k50f9) (vector->list . k50f8) (vector . k50f7) (values . k50f6) (truncate . k50f5) (tan . k50f4) (symbol? . k50f3) (symbol=? . k50f2) (symbol->string . k50f1) (substring . k50f0) (string? . k50ef) (string>? . k50ee) (string>=? . k50ed) (string=? . k50ec) (string<? . k50eb) (string<=? . k50ea) (string-ref . k50e9) (string-length . k50e8) (string-for-each . k50e7) (string-copy . k50e6) (string-append . k50e5) (string->symbol . k50e4) (string->number . k50e3) (string->list . k50e2) (string . k50e1) (sqrt . k50e0) (sin . k50df) (round . k50de) (reverse . k50dd) (real? . k50dc) (real-valued? . k50db) (real-part . k50da) (rationalize . k50d9) (rational? . k50d8) (rational-valued? . k50d7) (procedure? . k50d6) (positive? . k50d5) (pair? . k50d4) (odd? . k50d3) (numerator . k50d2) (number? . k50d1) (number->string . k50d0) (null? . k50cf) (not . k50ce) (negative? . k50cd) (nan? . k50cc) (min . k50cb) (max . k50ca) (map . k50c9) (make-vector . k50c8) (make-string . k50c7) (make-rectangular . k50c6) (make-polar . k50c5) (magnitude . k50c4) (log . k50c3) (list? . k50c2) (list-tail . k50c1) (list-ref . k50c0) (list->vector . k50bf) (list->string . k50be) (list . k50bd) (length . k50bc) (lcm . k50bb) (integer? . k50ba) (integer-valued? . k50b9) (integer->char . k50b8) (infinite? . k50b7) (inexact? . k50b6) (inexact . k50b5) (imag-part . k50b4) (gcd . k50b3) (for-each . k50b2) (floor . k50b1) (finite? . k50b0) (expt . k50af) (exp . k50ae) (exact? . k50ad) (exact-integer-sqrt . k50ac) (exact . k50ab) (even? . k50aa) (error . k50a9) (eqv? . k50a8) (equal? . k50a7) (eq? . k50a6) (dynamic-wind . k50a5) (div0-and-mod0 . k50a4) (mod0 . k50a3) (div0 . k50a2) (div-and-mod . k50a1) (mod . k50a0) (div . k509f) (denominator . k509e) (cos . k509d) (cons . k509c) (complex? . k509b) (char? . k509a) (char>? . k5099) (char>=? . k5098) (char=? . k5097) (char<? . k5096) (char<=? . k5095) (char->integer . k5094) (ceiling . k5093) (call-with-values . k5092) (call/cc . k5091) (call-with-current-continuation . k5090) (cddddr . k508f) (cdddar . k508e) (cddadr . k508d) (cddaar . k508c) (cdaddr . k508b) (cdadar . k508a) (cdaadr . k5089) (cdaaar . k5088) (cadddr . k5087) (caddar . k5086) (cadadr . k5085) (cadaar . k5084) (caaddr . k5083) (caadar . k5082) (caaadr . k5081) (caaaar . k5080) (cdddr . k507f) (cddar . k507e) (cdadr . k507d) (cdaar . k507c) (caddr . k507b) (cadar . k507a) (caadr . k5079) (caaar . k5078) (cddr . k5077) (cdar . k5076) (cadr . k5075) (caar . k5074) (cdr . k5073) (car . k5072) (boolean? . k5071) (boolean=? . k5070) (atan . k506f) (assertion-violation . k506e) (asin . k506d) (apply . k506c) (append . k506b) (angle . k506a) (acos . k5069) (abs . k5068) (/ . k5067) (* . k5066) (- . k5065) (+ . k5064) (>= . k5063) (> . k5062) (= . k5061) (<= . k5060) (< . k505f) (library . k505e) (&no-nans . k505d) (&no-infinities . k505c) (&i/o-encoding . k505b) (&i/o-decoding . k505a) (&i/o-port . k5059) (&i/o-file-does-not-exist . k5058) (&i/o-file-already-exists . k5057) (&i/o-file-is-read-only . k5056) (&i/o-file-protection . k5055) (&i/o-filename . k5054) (&i/o-invalid-position . k5053) (&i/o-write . k5052) (&i/o-read . k5051) (&i/o . k5050) (&undefined . k504f) (&syntax . k504e) (&lexical . k504d) (&implementation-restriction . k504c) (&non-continuable . k504b) (&who . k504a) (&irritants . k5049) (&assertion . k5048) (&violation . k5047) (&error . k5046) (&serious . k5045) (&warning . k5044) (&message . k5043) (&condition . k5042) (define-condition-type . k5041) (define-enumeration . k5040) (define-record-type . k503f) (parent-rtd . k503e) (nongenerative . k503d) (opaque . k503c) (sealed . k503b) (protocol . k503a) (parent . k5039) (immutable . k5038) (mutable . k5037) (fields . k5036) (error-handling-mode . k5035) (file-options . k5034) (buffer-mode . k5033) (eol-style . k5032) (guard . k5031) (unsyntax-splicing . k502e) (unsyntax . k502d) (unquote-splicing . k502c) (unquote . k502b) (_ . k502a) (else . k5029) (=> . k5028) (... . k5027) (assert . k5026) (endianness . k5025) (time . k5023) (do . k5022) (cond . k5021) (let* . k5020) (let . k501f) (let*-values . k501e) (let-values . k501d) (identifier-syntax . k501c) (with-syntax . k501b) (quasisyntax . k501a) (quasiquote . k5019) (syntax-rules . k5018) (include . k5017) (record-constructor-descriptor . k5015) (record-type-descriptor . k5014) (case . k5013) (unless . k5011) (when . k5010) (or . k500f) (and . k500e) (if . k500d) (letrec* . k500c) (letrec . k500b) (case-lambda . k5009) (lambda . k5008) (syntax . k5007) (syntax-case . k5006) (quote . k5005) (letrec-syntax . k5003) (let-syntax . k5002) (set! . k5001) (import . k5000) (begin . k4fff) (define-syntax . k4ffd) (define . k4ffc)) '() values values '#f '#f '#t '#f) (k2c2b@k2a77@install-library 'k5320 '(psyntax null-environment-5) '() '() '() '() '((make-promise . k51dc) (unquote-splicing . k502c) (unquote . k502b) (_ . k502a) (else . k5029) (=> . k5028) (... . k5027) (delay . k5024) (do . k5022) (cond . k5021) (let* . k5020) (let . k501f) (quasiquote . k5019) (syntax-rules . k5018) (case . k5013) (or . k500f) (and . k500e) (if . k500d) (letrec . k500b) (lambda . k5008) (quote . k5005) (letrec-syntax . k5003) (let-syntax . k5002) (set! . k5001) (begin . k4fff) (define-syntax . k4ffd) (define . k4ffc)) '() values values '#f '#f '#t '#f) (k2c2b@k2a77@install-library 'k5321 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . k5271) (string-ci>=? . k5270) (string-ci=? . k526f) (string-ci<? . k526e) (string-ci<=? . k526d) (char-whitespace? . k526c) (char-upper-case? . k526b) (char-numeric? . k5269) (char-lower-case? . k5268) (char-upcase . k5266) (char-downcase . k5263) (char-ci>? . k5262) (char-ci>=? . k5261) (char-ci=? . k5260) (char-ci<? . k525f) (char-ci<=? . k525e) (char-alphabetic? . k525d) (call-with-output-file . k5231) (call-with-input-file . k5230) (write-char . k522f) (write . k522e) (with-output-to-file . k522d) (with-input-from-file . k522c) (read-char . k522b) (read . k522a) (peek-char . k5229) (open-output-file . k5228) (open-input-file . k5227) (newline . k5226) (display . k5225) (close-output-port . k5224) (close-input-port . k5223) (eof-object . k5221) (current-output-port . k521f) (current-input-port . k521e) (output-port? . k521d) (input-port? . k521c) (scheme-report-environment . k30c2) (quotient . k51e2) (null-environment . k30c0) (remainder . k51e1) (modulo . k51e0) (inexact->exact . k51df) (force . k51de) (exact->inexact . k51dd) (make-promise . k51dc) (string-fill! . k51da) (string-set! . k51d9) (set-cdr! . k51d8) (set-car! . k51d7) (memv . k51d1) (memq . k51d0) (member . k51ce) (assv . k51c6) (assq . k51c5) (assoc . k51c3) (eval . k30c6) (zero? . k5100) (vector? . k50ff) (vector-set! . k50fe) (vector-ref . k50fd) (vector-length . k50fb) (vector-fill! . k50f9) (vector->list . k50f8) (vector . k50f7) (values . k50f6) (truncate . k50f5) (tan . k50f4) (symbol? . k50f3) (symbol->string . k50f1) (substring . k50f0) (string? . k50ef) (string>? . k50ee) (string>=? . k50ed) (string=? . k50ec) (string<? . k50eb) (string<=? . k50ea) (string-ref . k50e9) (string-length . k50e8) (string-copy . k50e6) (string-append . k50e5) (string->symbol . k50e4) (string->number . k50e3) (string->list . k50e2) (string . k50e1) (sqrt . k50e0) (sin . k50df) (round . k50de) (reverse . k50dd) (real? . k50dc) (real-part . k50da) (rationalize . k50d9) (rational? . k50d8) (procedure? . k50d6) (positive? . k50d5) (pair? . k50d4) (odd? . k50d3) (numerator . k50d2) (number? . k50d1) (number->string . k50d0) (not . k50ce) (negative? . k50cd) (min . k50cb) (max . k50ca) (map . k50c9) (make-vector . k50c8) (make-string . k50c7) (make-rectangular . k50c6) (make-polar . k50c5) (magnitude . k50c4) (log . k50c3) (list? . k50c2) (list-tail . k50c1) (list-ref . k50c0) (list->vector . k50bf) (list->string . k50be) (list . k50bd) (length . k50bc) (lcm . k50bb) (integer? . k50ba) (integer->char . k50b8) (inexact? . k50b6) (imag-part . k50b4) (gcd . k50b3) (for-each . k50b2) (floor . k50b1) (expt . k50af) (exp . k50ae) (exact? . k50ad) (even? . k50aa) (eqv? . k50a8) (equal? . k50a7) (eq? . k50a6) (dynamic-wind . k50a5) (denominator . k509e) (cos . k509d) (cons . k509c) (complex? . k509b) (char? . k509a) (char>? . k5099) (char>=? . k5098) (char=? . k5097) (char<? . k5096) (char<=? . k5095) (char->integer . k5094) (ceiling . k5093) (call-with-values . k5092) (call-with-current-continuation . k5090) (cddddr . k508f) (cdddar . k508e) (cddadr . k508d) (cddaar . k508c) (cdaddr . k508b) (cdadar . k508a) (cdaadr . k5089) (cdaaar . k5088) (cadddr . k5087) (caddar . k5086) (cadadr . k5085) (cadaar . k5084) (caaddr . k5083) (caadar . k5082) (caaadr . k5081) (caaaar . k5080) (cdddr . k507f) (cddar . k507e) (cdadr . k507d) (cdaar . k507c) (caddr . k507b) (cadar . k507a) (caadr . k5079) (caaar . k5078) (cddr . k5077) (cdar . k5076) (cadr . k5075) (caar . k5074) (cdr . k5073) (car . k5072) (boolean? . k5071) (atan . k506f) (asin . k506d) (apply . k506c) (append . k506b) (angle . k506a) (acos . k5069) (abs . k5068) (/ . k5067) (* . k5066) (- . k5065) (+ . k5064) (>= . k5063) (> . k5062) (= . k5061) (<= . k5060) (< . k505f) (unquote-splicing . k502c) (unquote . k502b) (else . k5029) (=> . k5028) (... . k5027) (delay . k5024) (do . k5022) (cond . k5021) (let* . k5020) (let . k501f) (quasiquote . k5019) (syntax-rules . k5018) (case . k5013) (or . k500f) (and . k500e) (if . k500d) (letrec . k500b) (lambda . k5008) (quote . k5005) (letrec-syntax . k5003) (let-syntax . k5002) (set! . k5001) (begin . k4fff) (define-syntax . k4ffd) (define . k4ffc)) '() values values '#f '#f '#t '#f) (k2c2b@k2a77@install-library 'k5322 '(psyntax modules) '() '() '() '() '((module . k4ffe)) '() values values '#f '#f '#t '#f) (k2c2b@k2a77@install-library 'k5323 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (k2c2b@k2a77@install-library 'k5324 '(rnrs) '(6) '() '() '() '((regexp? . k5317) (string-upcase . k5279) (string-titlecase . k5278) (string-normalize-nfkd . k5277) (string-normalize-nfkc . k5276) (string-normalize-nfd . k5275) (string-normalize-nfc . k5274) (string-foldcase . k5273) (string-downcase . k5272) (string-ci>? . k5271) (string-ci>=? . k5270) (string-ci=? . k526f) (string-ci<? . k526e) (string-ci<=? . k526d) (char-whitespace? . k526c) (char-upper-case? . k526b) (char-title-case? . k526a) (char-numeric? . k5269) (char-lower-case? . k5268) (char-general-category . k5267) (char-upcase . k5266) (char-titlecase . k5265) (char-foldcase . k5264) (char-downcase . k5263) (char-ci>? . k5262) (char-ci>=? . k5261) (char-ci=? . k5260) (char-ci<? . k525f) (char-ci<=? . k525e) (char-alphabetic? . k525d) (make-variable-transformer . k2e33) (identifier? . k30e8) (generate-temporaries . k30d4) (free-identifier=? . k30d6) (syntax->datum . k30ec) (datum->syntax . k30ea) (bound-identifier=? . k30d8) (record-type-descriptor? . k525c) (record-predicate . k525b) (record-mutator . k525a) (record-constructor . k5259) (record-accessor . k5258) (make-record-type-descriptor . k5257) (make-record-constructor-descriptor . k5256) (record? . k5255) (record-type-uid . k5254) (record-type-sealed? . k5253) (record-type-parent . k5252) (record-type-opaque? . k5251) (record-type-name . k5250) (record-type-generative? . k524f) (record-type-field-names . k524e) (record-rtd . k524d) (record-field-mutable? . k524c) (delete-file . k524b) (file-exists? . k524a) (vector-sort! . k5249) (vector-sort . k5248) (list-sort . k5247) (symbol-hash . k5246) (string-ci-hash . k5245) (string-hash . k5244) (equal-hash . k5243) (hashtable-equivalence-function . k5242) (make-hashtable . k5241) (hashtable-hash-function . k5240) (make-eqv-hashtable . k523f) (make-eq-hashtable . k523e) (hashtable? . k523d) (hashtable-update! . k523c) (hashtable-size . k523b) (hashtable-set! . k523a) (hashtable-ref . k5239) (hashtable-mutable? . k5238) (hashtable-keys . k5237) (hashtable-entries . k5236) (hashtable-delete! . k5235) (hashtable-copy . k5234) (hashtable-contains? . k5233) (hashtable-clear! . k5232) (call-with-output-file . k5231) (call-with-input-file . k5230) (write-char . k522f) (write . k522e) (with-output-to-file . k522d) (with-input-from-file . k522c) (read-char . k522b) (read . k522a) (peek-char . k5229) (open-output-file . k5228) (open-input-file . k5227) (newline . k5226) (display . k5225) (close-output-port . k5224) (close-input-port . k5223) (eof-object? . k5222) (eof-object . k5221) (current-error-port . k5220) (current-output-port . k521f) (current-input-port . k521e) (output-port? . k521d) (input-port? . k521c) (utf-8-codec . k521b) (utf-16-codec . k521a) (transcoder-error-handling-mode . k5219) (transcoder-eol-style . k5218) (transcoder-codec . k5217) (transcoded-port . k5216) (textual-port? . k5215) (string->bytevector . k5214) (standard-output-port . k5213) (standard-input-port . k5212) (standard-error-port . k5211) (set-port-position! . k5210) (put-u8 . k520f) (put-string . k520e) (put-datum . k520d) (put-char . k520c) (put-bytevector . k520b) (port? . k520a) (port-transcoder . k5209) (port-position . k5208) (port-has-set-port-position!? . k5207) (port-has-port-position? . k5206) (port-eof? . k5205) (output-port-buffer-mode . k5204) (open-string-output-port . k5203) (open-string-input-port . k5202) (open-file-output-port . k5201) (open-file-input/output-port . k5200) (open-file-input-port . k51ff) (open-bytevector-output-port . k51fe) (open-bytevector-input-port . k51fd) (native-transcoder . k51fc) (native-eol-style . k51fb) (make-transcoder . k51fa) (latin-1-codec . k51f9) (make-i/o-write-error . k4cca) (make-i/o-read-error . k4cb5) (make-i/o-port-error . k4d6b) (make-i/o-invalid-position-error . k4ce1) (make-i/o-filename-error . k4cfc) (make-i/o-file-protection-error . k4d15) (make-i/o-file-is-read-only-error . k4d2a) (make-i/o-file-does-not-exist-error . k4d54) (make-i/o-file-already-exists-error . k4d3f) (make-i/o-error . k4ca0) (make-i/o-encoding-error . k4d9b) (make-i/o-decoding-error . k4d84) (make-custom-textual-output-port . k51f8) (make-custom-textual-input/output-port . k51f7) (make-custom-textual-input-port . k51f6) (make-custom-binary-output-port . k51f5) (make-custom-binary-input/output-port . k51f4) (make-custom-binary-input-port . k51f3) (make-bytevector . k51f2) (lookahead-u8 . k51f1) (lookahead-char . k51f0) (i/o-write-error? . k4ccc) (i/o-read-error? . k4cb7) (i/o-port-error? . k4d6f) (i/o-invalid-position-error? . k4ce5) (i/o-filename-error? . k4d00) (i/o-file-protection-error? . k4d17) (i/o-file-is-read-only-error? . k4d2c) (i/o-file-does-not-exist-error? . k4d56) (i/o-file-already-exists-error? . k4d41) (i/o-error? . k4ca2) (i/o-error-position . k4ce7) (i/o-error-port . k4d71) (i/o-error-filename . k4d02) (i/o-encoding-error? . k4d9f) (i/o-encoding-error-char . k4da1) (i/o-decoding-error? . k4d86) (get-u8 . k51ef) (get-string-n! . k51ee) (get-string-n . k51ed) (get-string-all . k51ec) (get-line . k51eb) (get-datum . k51ea) (get-char . k51e9) (get-bytevector-some . k51e8) (get-bytevector-n! . k51e7) (get-bytevector-n . k51e6) (get-bytevector-all . k51e5) (flush-output-port . k51e4) (close-port . k51e3) (exit . k51db) (command-line . k4ed6) (remove . k51d6) (remv . k51d5) (remp . k51d4) (remq . k51d3) (partition . k51d2) (memv . k51d1) (memq . k51d0) (memp . k51cf) (member . k51ce) (exists . k51cd) (for-all . k51cc) (fold-right . k51cb) (fold-left . k51ca) (find . k51c9) (filter . k51c8) (cons* . k51c7) (assv . k51c6) (assq . k51c5) (assp . k51c4) (assoc . k51c3) (call-with-string-output-port . k51c2) (call-with-port . k51c1) (call-with-bytevector-output-port . k51c0) (bytevector->string . k51bf) (buffer-mode? . k51be) (binary-port? . k51bd) (with-exception-handler . k51bc) (raise-continuable . k51bb) (raise . k51ba) (make-enumeration . k51b9) (enum-set=? . k51b8) (enum-set-universe . k51b7) (enum-set-union . k51b6) (enum-set-subset? . k51b5) (enum-set-projection . k51b4) (enum-set-member? . k51b3) (enum-set-intersection . k51b2) (enum-set-indexer . k51b1) (enum-set-difference . k51b0) (enum-set-constructor . k51af) (enum-set-complement . k51ae) (enum-set->list . k51ad) (who-condition? . k4c16) (warning? . k4b8e) (violation? . k4bcd) (undefined-violation? . k4c8d) (syntax-violation? . k4c74) (syntax-violation-subform . k4c78) (syntax-violation-form . k4c76) (syntax-violation . k30e6) (simple-conditions . k51ac) (serious-condition? . k4ba3) (non-continuable-violation? . k4c2d) (message-condition? . k4b77) (make-who-condition . k4c12) (make-warning . k4b8c) (make-violation . k4bcb) (make-undefined-violation . k4c8b) (make-syntax-violation . k4c6e) (make-serious-condition . k4ba1) (make-non-continuable-violation . k4c2b) (make-message-condition . k4b73) (make-lexical-violation . k4c55) (make-irritants-condition . k4bf7) (make-implementation-restriction-violation . k4c40) (make-error . k4bb6) (make-assertion-violation . k4be0) (lexical-violation? . k4c57) (irritants-condition? . k4bfb) (implementation-restriction-violation? . k4c42) (error? . k4bb8) (condition-who . k4c18) (condition-predicate . k51ab) (condition-message . k4b79) (condition-irritants . k4bfd) (condition-accessor . k51aa) (condition . k51a9) (assertion-violation? . k4be2) (condition? . k51a8) (utf32->string . k51a7) (utf16->string . k51a6) (utf8->string . k51a5) (uint-list->bytevector . k51a4) (u8-list->bytevector . k51a3) (string->utf8 . k51a2) (string->utf32 . k51a1) (string->utf16 . k51a0) (sint-list->bytevector . k519f) (native-endianness . k519e) (bytevector? . k519d) (bytevector=? . k519c) (bytevector-uint-set! . k519b) (bytevector-uint-ref . k519a) (bytevector-u8-set! . k5199) (bytevector-u8-ref . k5198) (bytevector-u64-set! . k5197) (bytevector-u64-ref . k5196) (bytevector-u64-native-set! . k5195) (bytevector-u64-native-ref . k5194) (bytevector-u32-set! . k5193) (bytevector-u32-ref . k5192) (bytevector-u32-native-set! . k5191) (bytevector-u32-native-ref . k5190) (bytevector-u16-set! . k518f) (bytevector-u16-ref . k518e) (bytevector-u16-native-set! . k518d) (bytevector-u16-native-ref . k518c) (bytevector-sint-set! . k518b) (bytevector-sint-ref . k518a) (bytevector-s8-set! . k5189) (bytevector-s8-ref . k5188) (bytevector-s64-set! . k5187) (bytevector-s64-ref . k5186) (bytevector-s64-native-set! . k5185) (bytevector-s64-native-ref . k5184) (bytevector-s32-set! . k5183) (bytevector-s32-ref . k5182) (bytevector-s32-native-set! . k5181) (bytevector-s32-native-ref . k5180) (bytevector-s16-set! . k517f) (bytevector-s16-ref . k517e) (bytevector-s16-native-set! . k517d) (bytevector-s16-native-ref . k517c) (bytevector-length . k517b) (bytevector-ieee-single-ref . k517a) (bytevector-ieee-single-set! . k5179) (bytevector-ieee-single-native-set! . k5178) (bytevector-ieee-single-native-ref . k5177) (bytevector-ieee-double-set! . k5176) (bytevector-ieee-double-ref . k5175) (bytevector-ieee-double-native-set! . k5174) (bytevector-ieee-double-native-ref . k5173) (bytevector-fill! . k5172) (bytevector-copy! . k5171) (bytevector-copy . k5170) (bytevector->uint-list . k516f) (bytevector->u8-list . k516e) (bytevector->sint-list . k516d) (no-nans-violation? . k4dcb) (no-infinities-violation? . k4db6) (make-no-nans-violation . k4dc9) (make-no-infinities-violation . k4db4) (real->flonum . k516c) (flzero? . k516b) (fltruncate . k516a) (fltan . k5169) (flsqrt . k5168) (flsin . k5167) (flround . k5166) (flpositive? . k5165) (flonum? . k5164) (flodd? . k5163) (flnumerator . k5162) (flnegative? . k5161) (flnan? . k5160) (flmod0 . k515f) (flmod . k515e) (flmin . k515d) (flmax . k515c) (fllog . k515b) (flinteger? . k515a) (flinfinite? . k5159) (flfloor . k5158) (flfinite? . k5157) (flexpt . k5156) (flexp . k5155) (fleven? . k5154) (fldiv0-and-mod0 . k5153) (fldiv0 . k5152) (fldiv-and-mod . k5151) (fldiv . k5150) (fldenominator . k514f) (flcos . k514e) (flceiling . k514d) (flatan . k514c) (flasin . k514b) (flacos . k514a) (flabs . k5149) (fl>? . k5148) (fl>=? . k5147) (fl=? . k5146) (fl<? . k5145) (fl<=? . k5144) (fl/ . k5143) (fl- . k5142) (fl+ . k5141) (fl* . k5140) (fixnum->flonum . k513f) (fxzero? . k513e) (fxxor . k513d) (fxrotate-bit-field . k513c) (fxreverse-bit-field . k513b) (fxpositive? . k513a) (fxodd? . k5139) (fxnot . k5138) (fxnegative? . k5137) (fxmod0 . k5136) (fxmod . k5135) (fxmin . k5134) (fxmax . k5133) (fxlength . k5132) (fxior . k5131) (fxif . k5130) (fxfirst-bit-set . k512f) (fxeven? . k512e) (fxdiv0-and-mod0 . k512d) (fxdiv0 . k512c) (fxdiv-and-mod . k512b) (fxdiv . k512a) (fxcopy-bit-field . k5129) (fxcopy-bit . k5128) (fxbit-set? . k5127) (fxbit-field . k5126) (fxbit-count . k5125) (fxarithmetic-shift-right . k5124) (fxarithmetic-shift-left . k5123) (fxarithmetic-shift . k5122) (fxand . k5121) (fx>? . k5120) (fx>=? . k511f) (fx=? . k511e) (fx<? . k511d) (fx<=? . k511c) (fx-/carry . k511b) (fx- . k511a) (fx+/carry . k5119) (fx+ . k5118) (fx*/carry . k5117) (fx* . k5116) (greatest-fixnum . k5115) (least-fixnum . k5114) (fixnum-width . k5113) (fixnum? . k5112) (bitwise-rotate-bit-field . k5111) (bitwise-reverse-bit-field . k5110) (bitwise-length . k510f) (bitwise-if . k510e) (bitwise-first-bit-set . k510d) (bitwise-copy-bit-field . k510c) (bitwise-copy-bit . k510b) (bitwise-bit-set? . k510a) (bitwise-bit-field . k5109) (bitwise-bit-count . k5108) (bitwise-xor . k5107) (bitwise-ior . k5106) (bitwise-and . k5105) (bitwise-not . k5104) (bitwise-arithmetic-shift-right . k5103) (bitwise-arithmetic-shift-left . k5102) (bitwise-arithmetic-shift . k5101) (zero? . k5100) (vector? . k50ff) (vector-set! . k50fe) (vector-ref . k50fd) (vector-map . k50fc) (vector-length . k50fb) (vector-for-each . k50fa) (vector-fill! . k50f9) (vector->list . k50f8) (vector . k50f7) (values . k50f6) (truncate . k50f5) (tan . k50f4) (symbol? . k50f3) (symbol=? . k50f2) (symbol->string . k50f1) (substring . k50f0) (string? . k50ef) (string>? . k50ee) (string>=? . k50ed) (string=? . k50ec) (string<? . k50eb) (string<=? . k50ea) (string-ref . k50e9) (string-length . k50e8) (string-for-each . k50e7) (string-copy . k50e6) (string-append . k50e5) (string->symbol . k50e4) (string->number . k50e3) (string->list . k50e2) (string . k50e1) (sqrt . k50e0) (sin . k50df) (round . k50de) (reverse . k50dd) (real? . k50dc) (real-valued? . k50db) (real-part . k50da) (rationalize . k50d9) (rational? . k50d8) (rational-valued? . k50d7) (procedure? . k50d6) (positive? . k50d5) (pair? . k50d4) (odd? . k50d3) (numerator . k50d2) (number? . k50d1) (number->string . k50d0) (null? . k50cf) (not . k50ce) (negative? . k50cd) (nan? . k50cc) (min . k50cb) (max . k50ca) (map . k50c9) (make-vector . k50c8) (make-string . k50c7) (make-rectangular . k50c6) (make-polar . k50c5) (magnitude . k50c4) (log . k50c3) (list? . k50c2) (list-tail . k50c1) (list-ref . k50c0) (list->vector . k50bf) (list->string . k50be) (list . k50bd) (length . k50bc) (lcm . k50bb) (integer? . k50ba) (integer-valued? . k50b9) (integer->char . k50b8) (infinite? . k50b7) (inexact? . k50b6) (inexact . k50b5) (imag-part . k50b4) (gcd . k50b3) (for-each . k50b2) (floor . k50b1) (finite? . k50b0) (expt . k50af) (exp . k50ae) (exact? . k50ad) (exact-integer-sqrt . k50ac) (exact . k50ab) (even? . k50aa) (error . k50a9) (eqv? . k50a8) (equal? . k50a7) (eq? . k50a6) (dynamic-wind . k50a5) (div0-and-mod0 . k50a4) (mod0 . k50a3) (div0 . k50a2) (div-and-mod . k50a1) (mod . k50a0) (div . k509f) (denominator . k509e) (cos . k509d) (cons . k509c) (complex? . k509b) (char? . k509a) (char>? . k5099) (char>=? . k5098) (char=? . k5097) (char<? . k5096) (char<=? . k5095) (char->integer . k5094) (ceiling . k5093) (call-with-values . k5092) (call/cc . k5091) (call-with-current-continuation . k5090) (cddddr . k508f) (cdddar . k508e) (cddadr . k508d) (cddaar . k508c) (cdaddr . k508b) (cdadar . k508a) (cdaadr . k5089) (cdaaar . k5088) (cadddr . k5087) (caddar . k5086) (cadadr . k5085) (cadaar . k5084) (caaddr . k5083) (caadar . k5082) (caaadr . k5081) (caaaar . k5080) (cdddr . k507f) (cddar . k507e) (cdadr . k507d) (cdaar . k507c) (caddr . k507b) (cadar . k507a) (caadr . k5079) (caaar . k5078) (cddr . k5077) (cdar . k5076) (cadr . k5075) (caar . k5074) (cdr . k5073) (car . k5072) (boolean? . k5071) (boolean=? . k5070) (atan . k506f) (assertion-violation . k506e) (asin . k506d) (apply . k506c) (append . k506b) (angle . k506a) (acos . k5069) (abs . k5068) (/ . k5067) (* . k5066) (- . k5065) (+ . k5064) (>= . k5063) (> . k5062) (= . k5061) (<= . k5060) (< . k505f) (&no-nans . k505d) (&no-infinities . k505c) (&i/o-encoding . k505b) (&i/o-decoding . k505a) (&i/o-port . k5059) (&i/o-file-does-not-exist . k5058) (&i/o-file-already-exists . k5057) (&i/o-file-is-read-only . k5056) (&i/o-file-protection . k5055) (&i/o-filename . k5054) (&i/o-invalid-position . k5053) (&i/o-write . k5052) (&i/o-read . k5051) (&i/o . k5050) (&undefined . k504f) (&syntax . k504e) (&lexical . k504d) (&implementation-restriction . k504c) (&non-continuable . k504b) (&who . k504a) (&irritants . k5049) (&assertion . k5048) (&violation . k5047) (&error . k5046) (&serious . k5045) (&warning . k5044) (&message . k5043) (&condition . k5042) (define-condition-type . k5041) (define-enumeration . k5040) (define-record-type . k503f) (parent-rtd . k503e) (nongenerative . k503d) (opaque . k503c) (sealed . k503b) (protocol . k503a) (parent . k5039) (immutable . k5038) (mutable . k5037) (fields . k5036) (error-handling-mode . k5035) (file-options . k5034) (buffer-mode . k5033) (eol-style . k5032) (guard . k5031) (unsyntax-splicing . k502e) (unsyntax . k502d) (unquote-splicing . k502c) (unquote . k502b) (_ . k502a) (else . k5029) (=> . k5028) (... . k5027) (assert . k5026) (endianness . k5025) (do . k5022) (cond . k5021) (let* . k5020) (let . k501f) (let*-values . k501e) (let-values . k501d) (identifier-syntax . k501c) (with-syntax . k501b) (quasisyntax . k501a) (quasiquote . k5019) (syntax-rules . k5018) (record-constructor-descriptor . k5015) (record-type-descriptor . k5014) (case . k5013) (unless . k5011) (when . k5010) (or . k500f) (and . k500e) (if . k500d) (letrec* . k500c) (letrec . k500b) (case-lambda . k5009) (lambda . k5008) (syntax . k5007) (syntax-case . k5006) (quote . k5005) (letrec-syntax . k5003) (let-syntax . k5002) (set! . k5001) (begin . k4fff) (define-syntax . k4ffd) (define . k4ffc)) '() values values '#f '#f '#t '#f) (k2c2b@k2a77@install-library 'k5325 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . k30c2) (quotient . k51e2) (null-environment . k30c0) (remainder . k51e1) (modulo . k51e0) (inexact->exact . k51df) (force . k51de) (exact->inexact . k51dd) (make-promise . k51dc) (delay . k5024)) '() values values '#f '#f '#t '#f) (k2c2b@k2a77@install-library 'k5326 '(rnrs control) '(6) '() '() '() '((do . k5022) (unless . k5011) (when . k5010) (case-lambda . k5009)) '() values values '#f '#f '#t '#f) (k2c2b@k2a77@install-library 'k5327 '(rnrs eval) '(6) '() '() '() '((eval . k30c6) (environment . k30be)) '() values values '#f '#f '#t '#f) (k2c2b@k2a77@install-library 'k5328 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . k51d8) (set-car! . k51d7)) '() values values '#f '#f '#t '#f) (k2c2b@k2a77@install-library 'k5329 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . k51da) (string-set! . k51d9)) '() values values '#f '#f '#t '#f) (k2c2b@k2a77@install-library 'k532a '(rnrs programs) '(6) '() '() '() '((exit . k51db) (command-line . k4ed6)) '() values values '#f '#f '#t '#f) (k2c2b@k2a77@install-library 'k532b '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . k2e33) (identifier? . k30e8) (generate-temporaries . k30d4) (free-identifier=? . k30d6) (syntax->datum . k30ec) (datum->syntax . k30ea) (bound-identifier=? . k30d8) (syntax-violation . k30e6) (unsyntax-splicing . k502e) (unsyntax . k502d) (_ . k502a) (... . k5027) (with-syntax . k501b) (quasisyntax . k501a) (syntax . k5007) (syntax-case . k5006)) '() values values '#f '#f '#t '#f) (k2c2b@k2a77@install-library 'k532c '(rnrs files) '(6) '() '() '() '((delete-file . k524b) (file-exists? . k524a) (make-i/o-write-error . k4cca) (make-i/o-read-error . k4cb5) (make-i/o-port-error . k4d6b) (make-i/o-invalid-position-error . k4ce1) (make-i/o-filename-error . k4cfc) (make-i/o-file-protection-error . k4d15) (make-i/o-file-is-read-only-error . k4d2a) (make-i/o-file-does-not-exist-error . k4d54) (make-i/o-file-already-exists-error . k4d3f) (make-i/o-error . k4ca0) (i/o-write-error? . k4ccc) (i/o-read-error? . k4cb7) (i/o-port-error? . k4d6f) (i/o-invalid-position-error? . k4ce5) (i/o-filename-error? . k4d00) (i/o-file-protection-error? . k4d17) (i/o-file-is-read-only-error? . k4d2c) (i/o-file-does-not-exist-error? . k4d56) (i/o-file-already-exists-error? . k4d41) (i/o-error? . k4ca2) (i/o-error-position . k4ce7) (i/o-error-port . k4d71) (i/o-error-filename . k4d02) (&i/o-port . k5059) (&i/o-file-does-not-exist . k5058) (&i/o-file-already-exists . k5057) (&i/o-file-is-read-only . k5056) (&i/o-file-protection . k5055) (&i/o-filename . k5054) (&i/o-invalid-position . k5053) (&i/o-write . k5052) (&i/o-read . k5051) (&i/o . k5050)) '() values values '#f '#f '#t '#f) (k2c2b@k2a77@install-library 'k532d '(rnrs sorting) '(6) '() '() '() '((vector-sort! . k5249) (vector-sort . k5248) (list-sort . k5247)) '() values values '#f '#f '#t '#f) (k2c2b@k2a77@install-library 'k532e '(rnrs base) '(6) '() '() '() '((zero? . k5100) (vector? . k50ff) (vector-set! . k50fe) (vector-ref . k50fd) (vector-map . k50fc) (vector-length . k50fb) (vector-for-each . k50fa) (vector-fill! . k50f9) (vector->list . k50f8) (vector . k50f7) (values . k50f6) (truncate . k50f5) (tan . k50f4) (symbol? . k50f3) (symbol=? . k50f2) (symbol->string . k50f1) (substring . k50f0) (string? . k50ef) (string>? . k50ee) (string>=? . k50ed) (string=? . k50ec) (string<? . k50eb) (string<=? . k50ea) (string-ref . k50e9) (string-length . k50e8) (string-for-each . k50e7) (string-copy . k50e6) (string-append . k50e5) (string->symbol . k50e4) (string->number . k50e3) (string->list . k50e2) (string . k50e1) (sqrt . k50e0) (sin . k50df) (round . k50de) (reverse . k50dd) (real? . k50dc) (real-valued? . k50db) (real-part . k50da) (rationalize . k50d9) (rational? . k50d8) (rational-valued? . k50d7) (procedure? . k50d6) (positive? . k50d5) (pair? . k50d4) (odd? . k50d3) (numerator . k50d2) (number? . k50d1) (number->string . k50d0) (null? . k50cf) (not . k50ce) (negative? . k50cd) (nan? . k50cc) (min . k50cb) (max . k50ca) (map . k50c9) (make-vector . k50c8) (make-string . k50c7) (make-rectangular . k50c6) (make-polar . k50c5) (magnitude . k50c4) (log . k50c3) (list? . k50c2) (list-tail . k50c1) (list-ref . k50c0) (list->vector . k50bf) (list->string . k50be) (list . k50bd) (length . k50bc) (lcm . k50bb) (integer? . k50ba) (integer-valued? . k50b9) (integer->char . k50b8) (infinite? . k50b7) (inexact? . k50b6) (inexact . k50b5) (imag-part . k50b4) (gcd . k50b3) (for-each . k50b2) (floor . k50b1) (finite? . k50b0) (expt . k50af) (exp . k50ae) (exact? . k50ad) (exact-integer-sqrt . k50ac) (exact . k50ab) (even? . k50aa) (error . k50a9) (eqv? . k50a8) (equal? . k50a7) (eq? . k50a6) (dynamic-wind . k50a5) (div0-and-mod0 . k50a4) (mod0 . k50a3) (div0 . k50a2) (div-and-mod . k50a1) (mod . k50a0) (div . k509f) (denominator . k509e) (cos . k509d) (cons . k509c) (complex? . k509b) (char? . k509a) (char>? . k5099) (char>=? . k5098) (char=? . k5097) (char<? . k5096) (char<=? . k5095) (char->integer . k5094) (ceiling . k5093) (call-with-values . k5092) (call/cc . k5091) (call-with-current-continuation . k5090) (cddddr . k508f) (cdddar . k508e) (cddadr . k508d) (cddaar . k508c) (cdaddr . k508b) (cdadar . k508a) (cdaadr . k5089) (cdaaar . k5088) (cadddr . k5087) (caddar . k5086) (cadadr . k5085) (cadaar . k5084) (caaddr . k5083) (caadar . k5082) (caaadr . k5081) (caaaar . k5080) (cdddr . k507f) (cddar . k507e) (cdadr . k507d) (cdaar . k507c) (caddr . k507b) (cadar . k507a) (caadr . k5079) (caaar . k5078) (cddr . k5077) (cdar . k5076) (cadr . k5075) (caar . k5074) (cdr . k5073) (car . k5072) (boolean? . k5071) (boolean=? . k5070) (atan . k506f) (assertion-violation . k506e) (asin . k506d) (apply . k506c) (append . k506b) (angle . k506a) (acos . k5069) (abs . k5068) (/ . k5067) (* . k5066) (- . k5065) (+ . k5064) (>= . k5063) (> . k5062) (= . k5061) (<= . k5060) (< . k505f) (unquote-splicing . k502c) (unquote . k502b) (_ . k502a) (else . k5029) (=> . k5028) (... . k5027) (assert . k5026) (cond . k5021) (let* . k5020) (let . k501f) (let*-values . k501e) (let-values . k501d) (identifier-syntax . k501c) (quasiquote . k5019) (syntax-rules . k5018) (case . k5013) (or . k500f) (and . k500e) (if . k500d) (letrec* . k500c) (letrec . k500b) (lambda . k5008) (quote . k5005) (letrec-syntax . k5003) (let-syntax . k5002) (set! . k5001) (begin . k4fff) (define-syntax . k4ffd) (define . k4ffc)) '() values values '#f '#f '#t '#f) (k2c2b@k2a77@install-library 'k532f '(rnrs lists) '(6) '() '() '() '((remove . k51d6) (remv . k51d5) (remp . k51d4) (remq . k51d3) (partition . k51d2) (memv . k51d1) (memq . k51d0) (memp . k51cf) (member . k51ce) (exists . k51cd) (for-all . k51cc) (fold-right . k51cb) (fold-left . k51ca) (find . k51c9) (filter . k51c8) (cons* . k51c7) (assv . k51c6) (assq . k51c5) (assp . k51c4) (assoc . k51c3)) '() values values '#f '#f '#t '#f) (k2c2b@k2a77@install-library 'k5330 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . k5231) (call-with-input-file . k5230) (write-char . k522f) (write . k522e) (with-output-to-file . k522d) (with-input-from-file . k522c) (read-char . k522b) (read . k522a) (peek-char . k5229) (open-output-file . k5228) (open-input-file . k5227) (newline . k5226) (display . k5225) (close-output-port . k5224) (close-input-port . k5223) (eof-object? . k5222) (eof-object . k5221) (current-error-port . k5220) (current-output-port . k521f) (current-input-port . k521e) (output-port? . k521d) (input-port? . k521c) (make-i/o-write-error . k4cca) (make-i/o-read-error . k4cb5) (make-i/o-port-error . k4d6b) (make-i/o-invalid-position-error . k4ce1) (make-i/o-filename-error . k4cfc) (make-i/o-file-protection-error . k4d15) (make-i/o-file-is-read-only-error . k4d2a) (make-i/o-file-does-not-exist-error . k4d54) (make-i/o-file-already-exists-error . k4d3f) (make-i/o-error . k4ca0) (i/o-write-error? . k4ccc) (i/o-read-error? . k4cb7) (i/o-port-error? . k4d6f) (i/o-invalid-position-error? . k4ce5) (i/o-filename-error? . k4d00) (i/o-file-protection-error? . k4d17) (i/o-file-is-read-only-error? . k4d2c) (i/o-file-does-not-exist-error? . k4d56) (i/o-file-already-exists-error? . k4d41) (i/o-error? . k4ca2) (i/o-error-position . k4ce7) (i/o-error-port . k4d71) (i/o-error-filename . k4d02) (&i/o-port . k5059) (&i/o-file-does-not-exist . k5058) (&i/o-file-already-exists . k5057) (&i/o-file-is-read-only . k5056) (&i/o-file-protection . k5055) (&i/o-filename . k5054) (&i/o-invalid-position . k5053) (&i/o-write . k5052) (&i/o-read . k5051) (&i/o . k5050)) '() values values '#f '#f '#t '#f) (k2c2b@k2a77@install-library 'k5331 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . k51f2) (utf32->string . k51a7) (utf16->string . k51a6) (utf8->string . k51a5) (uint-list->bytevector . k51a4) (u8-list->bytevector . k51a3) (string->utf8 . k51a2) (string->utf32 . k51a1) (string->utf16 . k51a0) (sint-list->bytevector . k519f) (native-endianness . k519e) (bytevector? . k519d) (bytevector=? . k519c) (bytevector-uint-set! . k519b) (bytevector-uint-ref . k519a) (bytevector-u8-set! . k5199) (bytevector-u8-ref . k5198) (bytevector-u64-set! . k5197) (bytevector-u64-ref . k5196) (bytevector-u64-native-set! . k5195) (bytevector-u64-native-ref . k5194) (bytevector-u32-set! . k5193) (bytevector-u32-ref . k5192) (bytevector-u32-native-set! . k5191) (bytevector-u32-native-ref . k5190) (bytevector-u16-set! . k518f) (bytevector-u16-ref . k518e) (bytevector-u16-native-set! . k518d) (bytevector-u16-native-ref . k518c) (bytevector-sint-set! . k518b) (bytevector-sint-ref . k518a) (bytevector-s8-set! . k5189) (bytevector-s8-ref . k5188) (bytevector-s64-set! . k5187) (bytevector-s64-ref . k5186) (bytevector-s64-native-set! . k5185) (bytevector-s64-native-ref . k5184) (bytevector-s32-set! . k5183) (bytevector-s32-ref . k5182) (bytevector-s32-native-set! . k5181) (bytevector-s32-native-ref . k5180) (bytevector-s16-set! . k517f) (bytevector-s16-ref . k517e) (bytevector-s16-native-set! . k517d) (bytevector-s16-native-ref . k517c) (bytevector-length . k517b) (bytevector-ieee-single-ref . k517a) (bytevector-ieee-single-set! . k5179) (bytevector-ieee-single-native-set! . k5178) (bytevector-ieee-single-native-ref . k5177) (bytevector-ieee-double-set! . k5176) (bytevector-ieee-double-ref . k5175) (bytevector-ieee-double-native-set! . k5174) (bytevector-ieee-double-native-ref . k5173) (bytevector-fill! . k5172) (bytevector-copy! . k5171) (bytevector-copy . k5170) (bytevector->uint-list . k516f) (bytevector->u8-list . k516e) (bytevector->sint-list . k516d) (endianness . k5025)) '() values values '#f '#f '#t '#f) (k2c2b@k2a77@install-library 'k5332 '(rnrs unicode) '(6) '() '() '() '((string-upcase . k5279) (string-titlecase . k5278) (string-normalize-nfkd . k5277) (string-normalize-nfkc . k5276) (string-normalize-nfd . k5275) (string-normalize-nfc . k5274) (string-foldcase . k5273) (string-downcase . k5272) (string-ci>? . k5271) (string-ci>=? . k5270) (string-ci=? . k526f) (string-ci<? . k526e) (string-ci<=? . k526d) (char-whitespace? . k526c) (char-upper-case? . k526b) (char-title-case? . k526a) (char-numeric? . k5269) (char-lower-case? . k5268) (char-general-category . k5267) (char-upcase . k5266) (char-titlecase . k5265) (char-foldcase . k5264) (char-downcase . k5263) (char-ci>? . k5262) (char-ci>=? . k5261) (char-ci=? . k5260) (char-ci<? . k525f) (char-ci<=? . k525e) (char-alphabetic? . k525d)) '() values values '#f '#f '#t '#f) (k2c2b@k2a77@install-library 'k5333 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . k51bc) (raise-continuable . k51bb) (raise . k51ba) (guard . k5031) (else . k5029) (=> . k5028)) '() values values '#f '#f '#t '#f) (k2c2b@k2a77@install-library 'k5334 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . k5111) (bitwise-reverse-bit-field . k5110) (bitwise-length . k510f) (bitwise-if . k510e) (bitwise-first-bit-set . k510d) (bitwise-copy-bit-field . k510c) (bitwise-copy-bit . k510b) (bitwise-bit-set? . k510a) (bitwise-bit-field . k5109) (bitwise-bit-count . k5108) (bitwise-xor . k5107) (bitwise-ior . k5106) (bitwise-and . k5105) (bitwise-not . k5104) (bitwise-arithmetic-shift-right . k5103) (bitwise-arithmetic-shift-left . k5102) (bitwise-arithmetic-shift . k5101)) '() values values '#f '#f '#t '#f) (k2c2b@k2a77@install-library 'k5335 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . k513e) (fxxor . k513d) (fxrotate-bit-field . k513c) (fxreverse-bit-field . k513b) (fxpositive? . k513a) (fxodd? . k5139) (fxnot . k5138) (fxnegative? . k5137) (fxmod0 . k5136) (fxmod . k5135) (fxmin . k5134) (fxmax . k5133) (fxlength . k5132) (fxior . k5131) (fxif . k5130) (fxfirst-bit-set . k512f) (fxeven? . k512e) (fxdiv0-and-mod0 . k512d) (fxdiv0 . k512c) (fxdiv-and-mod . k512b) (fxdiv . k512a) (fxcopy-bit-field . k5129) (fxcopy-bit . k5128) (fxbit-set? . k5127) (fxbit-field . k5126) (fxbit-count . k5125) (fxarithmetic-shift-right . k5124) (fxarithmetic-shift-left . k5123) (fxarithmetic-shift . k5122) (fxand . k5121) (fx>? . k5120) (fx>=? . k511f) (fx=? . k511e) (fx<? . k511d) (fx<=? . k511c) (fx-/carry . k511b) (fx- . k511a) (fx+/carry . k5119) (fx+ . k5118) (fx*/carry . k5117) (fx* . k5116) (greatest-fixnum . k5115) (least-fixnum . k5114) (fixnum-width . k5113) (fixnum? . k5112)) '() values values '#f '#f '#t '#f) (k2c2b@k2a77@install-library 'k5336 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . k4dcb) (no-infinities-violation? . k4db6) (make-no-nans-violation . k4dc9) (make-no-infinities-violation . k4db4) (real->flonum . k516c) (flzero? . k516b) (fltruncate . k516a) (fltan . k5169) (flsqrt . k5168) (flsin . k5167) (flround . k5166) (flpositive? . k5165) (flonum? . k5164) (flodd? . k5163) (flnumerator . k5162) (flnegative? . k5161) (flnan? . k5160) (flmod0 . k515f) (flmod . k515e) (flmin . k515d) (flmax . k515c) (fllog . k515b) (flinteger? . k515a) (flinfinite? . k5159) (flfloor . k5158) (flfinite? . k5157) (flexpt . k5156) (flexp . k5155) (fleven? . k5154) (fldiv0-and-mod0 . k5153) (fldiv0 . k5152) (fldiv-and-mod . k5151) (fldiv . k5150) (fldenominator . k514f) (flcos . k514e) (flceiling . k514d) (flatan . k514c) (flasin . k514b) (flacos . k514a) (flabs . k5149) (fl>? . k5148) (fl>=? . k5147) (fl=? . k5146) (fl<? . k5145) (fl<=? . k5144) (fl/ . k5143) (fl- . k5142) (fl+ . k5141) (fl* . k5140) (fixnum->flonum . k513f) (&no-nans . k505d) (&no-infinities . k505c)) '() values values '#f '#f '#t '#f) (k2c2b@k2a77@install-library 'k5337 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . k5246) (string-ci-hash . k5245) (string-hash . k5244) (equal-hash . k5243) (hashtable-equivalence-function . k5242) (make-hashtable . k5241) (hashtable-hash-function . k5240) (make-eqv-hashtable . k523f) (make-eq-hashtable . k523e) (hashtable? . k523d) (hashtable-update! . k523c) (hashtable-size . k523b) (hashtable-set! . k523a) (hashtable-ref . k5239) (hashtable-mutable? . k5238) (hashtable-keys . k5237) (hashtable-entries . k5236) (hashtable-delete! . k5235) (hashtable-copy . k5234) (hashtable-contains? . k5233) (hashtable-clear! . k5232)) '() values values '#f '#f '#t '#f) (k2c2b@k2a77@install-library 'k5338 '(rnrs io ports) '(6) '() '() '() '((eof-object? . k5222) (eof-object . k5221) (current-error-port . k5220) (current-output-port . k521f) (current-input-port . k521e) (output-port? . k521d) (input-port? . k521c) (utf-8-codec . k521b) (utf-16-codec . k521a) (transcoder-error-handling-mode . k5219) (transcoder-eol-style . k5218) (transcoder-codec . k5217) (transcoded-port . k5216) (textual-port? . k5215) (string->bytevector . k5214) (standard-output-port . k5213) (standard-input-port . k5212) (standard-error-port . k5211) (set-port-position! . k5210) (put-u8 . k520f) (put-string . k520e) (put-datum . k520d) (put-char . k520c) (put-bytevector . k520b) (port? . k520a) (port-transcoder . k5209) (port-position . k5208) (port-has-set-port-position!? . k5207) (port-has-port-position? . k5206) (port-eof? . k5205) (output-port-buffer-mode . k5204) (open-string-output-port . k5203) (open-string-input-port . k5202) (open-file-output-port . k5201) (open-file-input/output-port . k5200) (open-file-input-port . k51ff) (open-bytevector-output-port . k51fe) (open-bytevector-input-port . k51fd) (native-transcoder . k51fc) (native-eol-style . k51fb) (make-transcoder . k51fa) (latin-1-codec . k51f9) (make-i/o-write-error . k4cca) (make-i/o-read-error . k4cb5) (make-i/o-port-error . k4d6b) (make-i/o-invalid-position-error . k4ce1) (make-i/o-filename-error . k4cfc) (make-i/o-file-protection-error . k4d15) (make-i/o-file-is-read-only-error . k4d2a) (make-i/o-file-does-not-exist-error . k4d54) (make-i/o-file-already-exists-error . k4d3f) (make-i/o-error . k4ca0) (make-i/o-encoding-error . k4d9b) (make-i/o-decoding-error . k4d84) (make-custom-textual-output-port . k51f8) (make-custom-textual-input/output-port . k51f7) (make-custom-textual-input-port . k51f6) (make-custom-binary-output-port . k51f5) (make-custom-binary-input/output-port . k51f4) (make-custom-binary-input-port . k51f3) (lookahead-u8 . k51f1) (lookahead-char . k51f0) (i/o-write-error? . k4ccc) (i/o-read-error? . k4cb7) (i/o-port-error? . k4d6f) (i/o-invalid-position-error? . k4ce5) (i/o-filename-error? . k4d00) (i/o-file-protection-error? . k4d17) (i/o-file-is-read-only-error? . k4d2c) (i/o-file-does-not-exist-error? . k4d56) (i/o-file-already-exists-error? . k4d41) (i/o-error? . k4ca2) (i/o-error-position . k4ce7) (i/o-error-port . k4d71) (i/o-error-filename . k4d02) (i/o-encoding-error? . k4d9f) (i/o-encoding-error-char . k4da1) (i/o-decoding-error? . k4d86) (get-u8 . k51ef) (get-string-n! . k51ee) (get-string-n . k51ed) (get-string-all . k51ec) (get-line . k51eb) (get-datum . k51ea) (get-char . k51e9) (get-bytevector-some . k51e8) (get-bytevector-n! . k51e7) (get-bytevector-n . k51e6) (get-bytevector-all . k51e5) (flush-output-port . k51e4) (close-port . k51e3) (call-with-string-output-port . k51c2) (call-with-port . k51c1) (call-with-bytevector-output-port . k51c0) (bytevector->string . k51bf) (buffer-mode? . k51be) (binary-port? . k51bd) (&i/o-encoding . k505b) (&i/o-decoding . k505a) (&i/o-port . k5059) (&i/o-file-does-not-exist . k5058) (&i/o-file-already-exists . k5057) (&i/o-file-is-read-only . k5056) (&i/o-file-protection . k5055) (&i/o-filename . k5054) (&i/o-invalid-position . k5053) (&i/o-write . k5052) (&i/o-read . k5051) (&i/o . k5050) (error-handling-mode . k5035) (file-options . k5034) (buffer-mode . k5033) (eol-style . k5032)) '() values values '#f '#f '#t '#f) (k2c2b@k2a77@install-library 'k5339 '(rnrs enums) '(6) '() '() '() '((make-enumeration . k51b9) (enum-set=? . k51b8) (enum-set-universe . k51b7) (enum-set-union . k51b6) (enum-set-subset? . k51b5) (enum-set-projection . k51b4) (enum-set-member? . k51b3) (enum-set-intersection . k51b2) (enum-set-indexer . k51b1) (enum-set-difference . k51b0) (enum-set-constructor . k51af) (enum-set-complement . k51ae) (enum-set->list . k51ad) (define-enumeration . k5040)) '() values values '#f '#f '#t '#f) (k2c2b@k2a77@install-library 'k533a '(rnrs conditions) '(6) '() '() '() '((who-condition? . k4c16) (warning? . k4b8e) (violation? . k4bcd) (undefined-violation? . k4c8d) (syntax-violation? . k4c74) (syntax-violation-subform . k4c78) (syntax-violation-form . k4c76) (syntax-violation . k30e6) (simple-conditions . k51ac) (serious-condition? . k4ba3) (non-continuable-violation? . k4c2d) (message-condition? . k4b77) (make-who-condition . k4c12) (make-warning . k4b8c) (make-violation . k4bcb) (make-undefined-violation . k4c8b) (make-syntax-violation . k4c6e) (make-serious-condition . k4ba1) (make-non-continuable-violation . k4c2b) (make-message-condition . k4b73) (make-lexical-violation . k4c55) (make-irritants-condition . k4bf7) (make-implementation-restriction-violation . k4c40) (make-error . k4bb6) (make-assertion-violation . k4be0) (lexical-violation? . k4c57) (irritants-condition? . k4bfb) (implementation-restriction-violation? . k4c42) (error? . k4bb8) (condition-who . k4c18) (condition-predicate . k51ab) (condition-message . k4b79) (condition-irritants . k4bfd) (condition-accessor . k51aa) (condition . k51a9) (assertion-violation? . k4be2) (condition? . k51a8) (&undefined . k504f) (&syntax . k504e) (&lexical . k504d) (&implementation-restriction . k504c) (&non-continuable . k504b) (&who . k504a) (&irritants . k5049) (&assertion . k5048) (&violation . k5047) (&error . k5046) (&serious . k5045) (&warning . k5044) (&message . k5043) (&condition . k5042) (define-condition-type . k5041)) '() values values '#f '#f '#t '#f) (k2c2b@k2a77@install-library 'k533b '(rnrs records inspection) '(6) '() '() '() '((record? . k5255) (record-type-uid . k5254) (record-type-sealed? . k5253) (record-type-parent . k5252) (record-type-opaque? . k5251) (record-type-name . k5250) (record-type-generative? . k524f) (record-type-field-names . k524e) (record-rtd . k524d) (record-field-mutable? . k524c)) '() values values '#f '#f '#t '#f) (k2c2b@k2a77@install-library 'k533c '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . k525c) (record-predicate . k525b) (record-mutator . k525a) (record-constructor . k5259) (record-accessor . k5258) (make-record-type-descriptor . k5257) (make-record-constructor-descriptor . k5256)) '() values values '#f '#f '#t '#f) (k2c2b@k2a77@install-library 'k533d '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . k503f) (parent-rtd . k503e) (nongenerative . k503d) (opaque . k503c) (sealed . k503b) (protocol . k503a) (parent . k5039) (immutable . k5038) (mutable . k5037) (fields . k5036) (record-constructor-descriptor . k5015) (record-type-descriptor . k5014)) '() values values '#f '#f '#t '#f) (k2c2b@k2a77@install-library 'k533e '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . k4dcf) (&no-nans-rtd . k4dcd) (&no-infinities-rcd . k4dba) (&no-infinities-rtd . k4db8) (&i/o-encoding-rcd . k4da5) (&i/o-encoding-rtd . k4da3) (&i/o-decoding-rcd . k4d8a) (&i/o-decoding-rtd . k4d88) (&i/o-port-rcd . k4d75) (&i/o-port-rtd . k4d73) (&i/o-file-does-not-exist-rcd . k4d5a) (&i/o-file-does-not-exist-rtd . k4d58) (&i/o-file-already-exists-rcd . k4d45) (&i/o-file-already-exists-rtd . k4d43) (&i/o-file-is-read-only-rcd . k4d30) (&i/o-file-is-read-only-rtd . k4d2e) (&i/o-file-protection-rcd . k4d1b) (&i/o-file-protection-rtd . k4d19) (&i/o-filename-rcd . k4d06) (&i/o-filename-rtd . k4d04) (&i/o-invalid-position-rcd . k4ceb) (&i/o-invalid-position-rtd . k4ce9) (&i/o-write-rcd . k4cd0) (&i/o-write-rtd . k4cce) (&i/o-read-rcd . k4cbb) (&i/o-read-rtd . k4cb9) (&i/o-rcd . k4ca6) (&i/o-rtd . k4ca4) (&undefined-rcd . k4c91) (&undefined-rtd . k4c8f) (&syntax-rcd . k4c7c) (&syntax-rtd . k4c7a) (&lexical-rcd . k4c5b) (&lexical-rtd . k4c59) (&implementation-restriction-rcd . k4c46) (&implementation-restriction-rtd . k4c44) (&non-continuable-rcd . k4c31) (&non-continuable-rtd . k4c2f) (&who-rcd . k4c1c) (&who-rtd . k4c1a) (&irritants-rcd . k4c01) (&irritants-rtd . k4bff) (&assertion-rcd . k4be6) (&assertion-rtd . k4be4) (&violation-rcd . k4bd1) (&violation-rtd . k4bcf) (&error-rcd . k4bbc) (&error-rtd . k4bba) (&serious-rcd . k4ba7) (&serious-rtd . k4ba5) (&warning-rcd . k4b92) (&warning-rtd . k4b90) (&message-rcd . k4b7d) (&message-rtd . k4b7b) (&condition-rcd . k4b1e) (&condition-rtd . k4b1c) (syntax-error . k30e2) (syntax-dispatch . k3006) (pretty-print . k531e) (eval-core . k531d) (set-symbol-value! . k531c) (symbol-value . k531b) (gensym . k531a) (void . k5319) (load . k4edc) (interaction-environment . k30f2) (char-ready? . k5318) (regexp? . k5317) (read-line . k5316) (ungensym . k5315) (alist->eq-hash-table . k5314) (assoc-ref . k5313) (print . k5312) (format . k5311) (host-os . k5310) (library-path . k2a56) (standard-library-path . k530f) (file-newer? . k530e) (stat-mtime . k530d) (write-to-file . k530c) (file->list . k530b) (file->string . k530a) (digit->integer . k5309) (call-with-string-input-port . k5308) (call-with-string-io . k5307) (string-split . k5306) (bytevector-for-each . k5305) (string->regexp . k5304) (rxmatch . k5303) (regexp-replace-all . k5302) (hashtable-for-each . k5301) (call-process . k5300) (local-tz-offset . k52ff) (microseconds . k52fe) (directory-list . k52fd) (set-current-directory! . k52fc) (expand-path . k52fb) (current-directory . k52fa) (%spawn . k52f9) (%waitpid . k52f8) (simple-struct-name . k52f7) (simple-struct-set! . k52f6) (simple-struct-ref . k52f5) (make-simple-struct . k52f4) (simple-struct? . k52f3) (pointer-ref-c-int64 . k52f2) (pointer-ref-c-int32 . k52f1) (pointer-ref-c-int16 . k52f0) (pointer-ref-c-int8 . k52ef) (pointer-ref-c-uint64 . k52ee) (pointer-ref-c-uint32 . k52ed) (pointer-ref-c-uint16 . k52ec) (pointer-ref-c-uint8 . k52eb) (pointer-set-c-uint64! . k52ea) (pointer-set-c-uint32! . k52e9) (pointer-set-c-uint16! . k52e8) (pointer-set-c-uint8! . k52e7) (pointer-set-c-int64! . k52e6) (pointer-set-c-int32! . k52e5) (pointer-set-c-int16! . k52e4) (pointer-set-c-int8! . k52e3) (pointer-set-c-pointer! . k52e2) (pointer-set-c-double! . k52e1) (pointer-set-c-float! . k52e0) (pointer-set-c-long-long! . k52df) (pointer-set-c-long! . k52de) (pointer-set-c-int! . k52dd) (pointer-set-c-short! . k52dc) (pointer-set-c-char! . k52db) (pointer-ref-c-pointer . k52da) (pointer-ref-c-double . k52d9) (pointer-ref-c-float . k52d8) (pointer-ref-c-unsigned-long-long . k52d7) (pointer-ref-c-signed-long-long . k52d6) (pointer-ref-c-unsigned-long . k52d5) (pointer-ref-c-signed-long . k52d4) (pointer-ref-c-unsigned-int . k52d3) (pointer-ref-c-signed-int . k52d2) (pointer-ref-c-unsigned-short . k52d1) (pointer-ref-c-signed-short . k52d0) (pointer-ref-c-unsigned-char . k52cf) (pointer-ref-c-signed-char . k52ce) (pointer->integer . k52cd) (integer->pointer . k52cc) (pointer? . k52cb) (shared-errno . k52ca) (%ffi-supported? . k52c9) (%ffi-pointer->string . k52c8) (%ffi-call->string-or-zero . k52c7) (%ffi-call->double . k52c6) (%ffi-call->void* . k52c5) (%ffi-call->void . k52c4) (%ffi-call->char . k52c3) (%ffi-call->int . k52c2) (%ffi-lookup . k52c1) (%ffi-open . k52c0) (%fork . k52bf) (%pipe . k52be) (p . k52bd) (open-output-string . k52bc) (get-output-string . k52bb) (file-stat-ctime . k52ba) (file-stat-atime . k52b9) (file-stat-mtime . k52b8) (file-size-in-bytes . k52b7) (file-writable? . k52b6) (file-executable? . k52b5) (file-readable? . k52b4) (file-regular? . k52b3) (file-symbolic-link? . k52b2) (file-directory? . k52b1) (create-symbolic-link . k52b0) (rename-file . k52af) (delete-directory . k52ae) (create-directory . k52ad) (get-environment-variables . k52ac) (get-environment-variable . k52ab) (mkstx . k52aa) (join-wraps . k52a9) (id->real-label . k52a8) (same-marks? . k52a7) (same-marks*? . k52a6) (get-timeofday . k52a5) (get-command-line . k52a4) (sys-display . k52a3) (whereis . k52a2) (register . k52a1) (vm-join! . k52a0) (vm-set-value! . k529f) (vm? . k529e) (main-vm? . k529d) (vm-eval . k529c) (vm-self . k529b) (vm-start! . k529a) (make-vm . k5299) (mutex-try-lock! . k5298) (mutex-unlock! . k5297) (mutex-lock! . k5296) (mutex? . k5295) (make-mutex . k5294) (condition-variable-notify-all! . k5293) (condition-variable-notify! . k5292) (condition-variable-wait! . k5291) (make-condition-variable . k5290) (mosh-executable-path . k528f) (make-file-options . k528e) (source-info . k528d) (make-compiler-instruction . k528c) (make-instruction . k528b) (set-source-info! . k528a) (bignum? . k5289) (fast-equal? . k5288) (fasl-read . k5287) (fasl-write . k5286) (time-usage . k5285) (os-constant . k5284) (make-parameter . k285d) (socket-port . k5283) (socket-shutdown . k5282) (socket-close . k5281) (socket-send . k5280) (socket-recv! . k527f) (socket-recv . k527e) (make-server-socket . k527d) (make-client-socket . k527c) (socket-accept . k527b) (socket? . k527a) (string-upcase . k5279) (string-titlecase . k5278) (string-normalize-nfkd . k5277) (string-normalize-nfkc . k5276) (string-normalize-nfd . k5275) (string-normalize-nfc . k5274) (string-foldcase . k5273) (string-downcase . k5272) (string-ci>? . k5271) (string-ci>=? . k5270) (string-ci=? . k526f) (string-ci<? . k526e) (string-ci<=? . k526d) (char-whitespace? . k526c) (char-upper-case? . k526b) (char-title-case? . k526a) (char-numeric? . k5269) (char-lower-case? . k5268) (char-general-category . k5267) (char-upcase . k5266) (char-titlecase . k5265) (char-foldcase . k5264) (char-downcase . k5263) (char-ci>? . k5262) (char-ci>=? . k5261) (char-ci=? . k5260) (char-ci<? . k525f) (char-ci<=? . k525e) (char-alphabetic? . k525d) (make-variable-transformer . k2e33) (identifier? . k30e8) (generate-temporaries . k30d4) (free-identifier=? . k30d6) (syntax->datum . k30ec) (datum->syntax . k30ea) (bound-identifier=? . k30d8) (record-type-descriptor? . k525c) (record-predicate . k525b) (record-mutator . k525a) (record-constructor . k5259) (record-accessor . k5258) (make-record-type-descriptor . k5257) (make-record-constructor-descriptor . k5256) (record? . k5255) (record-type-uid . k5254) (record-type-sealed? . k5253) (record-type-parent . k5252) (record-type-opaque? . k5251) (record-type-name . k5250) (record-type-generative? . k524f) (record-type-field-names . k524e) (record-rtd . k524d) (record-field-mutable? . k524c) (delete-file . k524b) (file-exists? . k524a) (vector-sort! . k5249) (vector-sort . k5248) (list-sort . k5247) (symbol-hash . k5246) (string-ci-hash . k5245) (string-hash . k5244) (equal-hash . k5243) (hashtable-equivalence-function . k5242) (make-hashtable . k5241) (hashtable-hash-function . k5240) (make-eqv-hashtable . k523f) (make-eq-hashtable . k523e) (hashtable? . k523d) (hashtable-update! . k523c) (hashtable-size . k523b) (hashtable-set! . k523a) (hashtable-ref . k5239) (hashtable-mutable? . k5238) (hashtable-keys . k5237) (hashtable-entries . k5236) (hashtable-delete! . k5235) (hashtable-copy . k5234) (hashtable-contains? . k5233) (hashtable-clear! . k5232) (call-with-output-file . k5231) (call-with-input-file . k5230) (write-char . k522f) (write . k522e) (with-output-to-file . k522d) (with-input-from-file . k522c) (read-char . k522b) (read . k522a) (peek-char . k5229) (open-output-file . k5228) (open-input-file . k5227) (newline . k5226) (display . k5225) (close-output-port . k5224) (close-input-port . k5223) (eof-object? . k5222) (eof-object . k5221) (current-error-port . k5220) (current-output-port . k521f) (current-input-port . k521e) (output-port? . k521d) (input-port? . k521c) (utf-8-codec . k521b) (utf-16-codec . k521a) (transcoder-error-handling-mode . k5219) (transcoder-eol-style . k5218) (transcoder-codec . k5217) (transcoded-port . k5216) (textual-port? . k5215) (string->bytevector . k5214) (standard-output-port . k5213) (standard-input-port . k5212) (standard-error-port . k5211) (set-port-position! . k5210) (put-u8 . k520f) (put-string . k520e) (put-datum . k520d) (put-char . k520c) (put-bytevector . k520b) (port? . k520a) (port-transcoder . k5209) (port-position . k5208) (port-has-set-port-position!? . k5207) (port-has-port-position? . k5206) (port-eof? . k5205) (output-port-buffer-mode . k5204) (open-string-output-port . k5203) (open-string-input-port . k5202) (open-file-output-port . k5201) (open-file-input/output-port . k5200) (open-file-input-port . k51ff) (open-bytevector-output-port . k51fe) (open-bytevector-input-port . k51fd) (native-transcoder . k51fc) (native-eol-style . k51fb) (make-transcoder . k51fa) (latin-1-codec . k51f9) (make-i/o-write-error . k4cca) (make-i/o-read-error . k4cb5) (make-i/o-port-error . k4d6b) (make-i/o-invalid-position-error . k4ce1) (make-i/o-filename-error . k4cfc) (make-i/o-file-protection-error . k4d15) (make-i/o-file-is-read-only-error . k4d2a) (make-i/o-file-does-not-exist-error . k4d54) (make-i/o-file-already-exists-error . k4d3f) (make-i/o-error . k4ca0) (make-i/o-encoding-error . k4d9b) (make-i/o-decoding-error . k4d84) (make-custom-textual-output-port . k51f8) (make-custom-textual-input/output-port . k51f7) (make-custom-textual-input-port . k51f6) (make-custom-binary-output-port . k51f5) (make-custom-binary-input/output-port . k51f4) (make-custom-binary-input-port . k51f3) (make-bytevector . k51f2) (lookahead-u8 . k51f1) (lookahead-char . k51f0) (i/o-write-error? . k4ccc) (i/o-read-error? . k4cb7) (i/o-port-error? . k4d6f) (i/o-invalid-position-error? . k4ce5) (i/o-filename-error? . k4d00) (i/o-file-protection-error? . k4d17) (i/o-file-is-read-only-error? . k4d2c) (i/o-file-does-not-exist-error? . k4d56) (i/o-file-already-exists-error? . k4d41) (i/o-error? . k4ca2) (i/o-error-position . k4ce7) (i/o-error-port . k4d71) (i/o-error-filename . k4d02) (i/o-encoding-error? . k4d9f) (i/o-encoding-error-char . k4da1) (i/o-decoding-error? . k4d86) (get-u8 . k51ef) (get-string-n! . k51ee) (get-string-n . k51ed) (get-string-all . k51ec) (get-line . k51eb) (get-datum . k51ea) (get-char . k51e9) (get-bytevector-some . k51e8) (get-bytevector-n! . k51e7) (get-bytevector-n . k51e6) (get-bytevector-all . k51e5) (flush-output-port . k51e4) (close-port . k51e3) (scheme-report-environment . k30c2) (quotient . k51e2) (null-environment . k30c0) (remainder . k51e1) (modulo . k51e0) (inexact->exact . k51df) (force . k51de) (exact->inexact . k51dd) (make-promise . k51dc) (exit . k51db) (command-line . k4ed6) (string-fill! . k51da) (string-set! . k51d9) (set-cdr! . k51d8) (set-car! . k51d7) (remove . k51d6) (remv . k51d5) (remp . k51d4) (remq . k51d3) (partition . k51d2) (memv . k51d1) (memq . k51d0) (memp . k51cf) (member . k51ce) (exists . k51cd) (for-all . k51cc) (fold-right . k51cb) (fold-left . k51ca) (find . k51c9) (filter . k51c8) (cons* . k51c7) (assv . k51c6) (assq . k51c5) (assp . k51c4) (assoc . k51c3) (call-with-string-output-port . k51c2) (call-with-port . k51c1) (call-with-bytevector-output-port . k51c0) (bytevector->string . k51bf) (buffer-mode? . k51be) (binary-port? . k51bd) (with-exception-handler . k51bc) (raise-continuable . k51bb) (raise . k51ba) (eval . k30c6) (environment . k30be) (make-enumeration . k51b9) (enum-set=? . k51b8) (enum-set-universe . k51b7) (enum-set-union . k51b6) (enum-set-subset? . k51b5) (enum-set-projection . k51b4) (enum-set-member? . k51b3) (enum-set-intersection . k51b2) (enum-set-indexer . k51b1) (enum-set-difference . k51b0) (enum-set-constructor . k51af) (enum-set-complement . k51ae) (enum-set->list . k51ad) (who-condition? . k4c16) (warning? . k4b8e) (violation? . k4bcd) (undefined-violation? . k4c8d) (syntax-violation? . k4c74) (syntax-violation-subform . k4c78) (syntax-violation-form . k4c76) (syntax-violation . k30e6) (simple-conditions . k51ac) (serious-condition? . k4ba3) (non-continuable-violation? . k4c2d) (message-condition? . k4b77) (make-who-condition . k4c12) (make-warning . k4b8c) (make-violation . k4bcb) (make-undefined-violation . k4c8b) (make-syntax-violation . k4c6e) (make-serious-condition . k4ba1) (make-non-continuable-violation . k4c2b) (make-message-condition . k4b73) (make-lexical-violation . k4c55) (make-irritants-condition . k4bf7) (make-implementation-restriction-violation . k4c40) (make-error . k4bb6) (make-assertion-violation . k4be0) (lexical-violation? . k4c57) (irritants-condition? . k4bfb) (implementation-restriction-violation? . k4c42) (error? . k4bb8) (condition-who . k4c18) (condition-predicate . k51ab) (condition-message . k4b79) (condition-irritants . k4bfd) (condition-accessor . k51aa) (condition . k51a9) (assertion-violation? . k4be2) (condition? . k51a8) (utf32->string . k51a7) (utf16->string . k51a6) (utf8->string . k51a5) (uint-list->bytevector . k51a4) (u8-list->bytevector . k51a3) (string->utf8 . k51a2) (string->utf32 . k51a1) (string->utf16 . k51a0) (sint-list->bytevector . k519f) (native-endianness . k519e) (bytevector? . k519d) (bytevector=? . k519c) (bytevector-uint-set! . k519b) (bytevector-uint-ref . k519a) (bytevector-u8-set! . k5199) (bytevector-u8-ref . k5198) (bytevector-u64-set! . k5197) (bytevector-u64-ref . k5196) (bytevector-u64-native-set! . k5195) (bytevector-u64-native-ref . k5194) (bytevector-u32-set! . k5193) (bytevector-u32-ref . k5192) (bytevector-u32-native-set! . k5191) (bytevector-u32-native-ref . k5190) (bytevector-u16-set! . k518f) (bytevector-u16-ref . k518e) (bytevector-u16-native-set! . k518d) (bytevector-u16-native-ref . k518c) (bytevector-sint-set! . k518b) (bytevector-sint-ref . k518a) (bytevector-s8-set! . k5189) (bytevector-s8-ref . k5188) (bytevector-s64-set! . k5187) (bytevector-s64-ref . k5186) (bytevector-s64-native-set! . k5185) (bytevector-s64-native-ref . k5184) (bytevector-s32-set! . k5183) (bytevector-s32-ref . k5182) (bytevector-s32-native-set! . k5181) (bytevector-s32-native-ref . k5180) (bytevector-s16-set! . k517f) (bytevector-s16-ref . k517e) (bytevector-s16-native-set! . k517d) (bytevector-s16-native-ref . k517c) (bytevector-length . k517b) (bytevector-ieee-single-ref . k517a) (bytevector-ieee-single-set! . k5179) (bytevector-ieee-single-native-set! . k5178) (bytevector-ieee-single-native-ref . k5177) (bytevector-ieee-double-set! . k5176) (bytevector-ieee-double-ref . k5175) (bytevector-ieee-double-native-set! . k5174) (bytevector-ieee-double-native-ref . k5173) (bytevector-fill! . k5172) (bytevector-copy! . k5171) (bytevector-copy . k5170) (bytevector->uint-list . k516f) (bytevector->u8-list . k516e) (bytevector->sint-list . k516d) (no-nans-violation? . k4dcb) (no-infinities-violation? . k4db6) (make-no-nans-violation . k4dc9) (make-no-infinities-violation . k4db4) (real->flonum . k516c) (flzero? . k516b) (fltruncate . k516a) (fltan . k5169) (flsqrt . k5168) (flsin . k5167) (flround . k5166) (flpositive? . k5165) (flonum? . k5164) (flodd? . k5163) (flnumerator . k5162) (flnegative? . k5161) (flnan? . k5160) (flmod0 . k515f) (flmod . k515e) (flmin . k515d) (flmax . k515c) (fllog . k515b) (flinteger? . k515a) (flinfinite? . k5159) (flfloor . k5158) (flfinite? . k5157) (flexpt . k5156) (flexp . k5155) (fleven? . k5154) (fldiv0-and-mod0 . k5153) (fldiv0 . k5152) (fldiv-and-mod . k5151) (fldiv . k5150) (fldenominator . k514f) (flcos . k514e) (flceiling . k514d) (flatan . k514c) (flasin . k514b) (flacos . k514a) (flabs . k5149) (fl>? . k5148) (fl>=? . k5147) (fl=? . k5146) (fl<? . k5145) (fl<=? . k5144) (fl/ . k5143) (fl- . k5142) (fl+ . k5141) (fl* . k5140) (fixnum->flonum . k513f) (fxzero? . k513e) (fxxor . k513d) (fxrotate-bit-field . k513c) (fxreverse-bit-field . k513b) (fxpositive? . k513a) (fxodd? . k5139) (fxnot . k5138) (fxnegative? . k5137) (fxmod0 . k5136) (fxmod . k5135) (fxmin . k5134) (fxmax . k5133) (fxlength . k5132) (fxior . k5131) (fxif . k5130) (fxfirst-bit-set . k512f) (fxeven? . k512e) (fxdiv0-and-mod0 . k512d) (fxdiv0 . k512c) (fxdiv-and-mod . k512b) (fxdiv . k512a) (fxcopy-bit-field . k5129) (fxcopy-bit . k5128) (fxbit-set? . k5127) (fxbit-field . k5126) (fxbit-count . k5125) (fxarithmetic-shift-right . k5124) (fxarithmetic-shift-left . k5123) (fxarithmetic-shift . k5122) (fxand . k5121) (fx>? . k5120) (fx>=? . k511f) (fx=? . k511e) (fx<? . k511d) (fx<=? . k511c) (fx-/carry . k511b) (fx- . k511a) (fx+/carry . k5119) (fx+ . k5118) (fx*/carry . k5117) (fx* . k5116) (greatest-fixnum . k5115) (least-fixnum . k5114) (fixnum-width . k5113) (fixnum? . k5112) (bitwise-rotate-bit-field . k5111) (bitwise-reverse-bit-field . k5110) (bitwise-length . k510f) (bitwise-if . k510e) (bitwise-first-bit-set . k510d) (bitwise-copy-bit-field . k510c) (bitwise-copy-bit . k510b) (bitwise-bit-set? . k510a) (bitwise-bit-field . k5109) (bitwise-bit-count . k5108) (bitwise-xor . k5107) (bitwise-ior . k5106) (bitwise-and . k5105) (bitwise-not . k5104) (bitwise-arithmetic-shift-right . k5103) (bitwise-arithmetic-shift-left . k5102) (bitwise-arithmetic-shift . k5101) (zero? . k5100) (vector? . k50ff) (vector-set! . k50fe) (vector-ref . k50fd) (vector-map . k50fc) (vector-length . k50fb) (vector-for-each . k50fa) (vector-fill! . k50f9) (vector->list . k50f8) (vector . k50f7) (values . k50f6) (truncate . k50f5) (tan . k50f4) (symbol? . k50f3) (symbol=? . k50f2) (symbol->string . k50f1) (substring . k50f0) (string? . k50ef) (string>? . k50ee) (string>=? . k50ed) (string=? . k50ec) (string<? . k50eb) (string<=? . k50ea) (string-ref . k50e9) (string-length . k50e8) (string-for-each . k50e7) (string-copy . k50e6) (string-append . k50e5) (string->symbol . k50e4) (string->number . k50e3) (string->list . k50e2) (string . k50e1) (sqrt . k50e0) (sin . k50df) (round . k50de) (reverse . k50dd) (real? . k50dc) (real-valued? . k50db) (real-part . k50da) (rationalize . k50d9) (rational? . k50d8) (rational-valued? . k50d7) (procedure? . k50d6) (positive? . k50d5) (pair? . k50d4) (odd? . k50d3) (numerator . k50d2) (number? . k50d1) (number->string . k50d0) (null? . k50cf) (not . k50ce) (negative? . k50cd) (nan? . k50cc) (min . k50cb) (max . k50ca) (map . k50c9) (make-vector . k50c8) (make-string . k50c7) (make-rectangular . k50c6) (make-polar . k50c5) (magnitude . k50c4) (log . k50c3) (list? . k50c2) (list-tail . k50c1) (list-ref . k50c0) (list->vector . k50bf) (list->string . k50be) (list . k50bd) (length . k50bc) (lcm . k50bb) (integer? . k50ba) (integer-valued? . k50b9) (integer->char . k50b8) (infinite? . k50b7) (inexact? . k50b6) (inexact . k50b5) (imag-part . k50b4) (gcd . k50b3) (for-each . k50b2) (floor . k50b1) (finite? . k50b0) (expt . k50af) (exp . k50ae) (exact? . k50ad) (exact-integer-sqrt . k50ac) (exact . k50ab) (even? . k50aa) (error . k50a9) (eqv? . k50a8) (equal? . k50a7) (eq? . k50a6) (dynamic-wind . k50a5) (div0-and-mod0 . k50a4) (mod0 . k50a3) (div0 . k50a2) (div-and-mod . k50a1) (mod . k50a0) (div . k509f) (denominator . k509e) (cos . k509d) (cons . k509c) (complex? . k509b) (char? . k509a) (char>? . k5099) (char>=? . k5098) (char=? . k5097) (char<? . k5096) (char<=? . k5095) (char->integer . k5094) (ceiling . k5093) (call-with-values . k5092) (call/cc . k5091) (call-with-current-continuation . k5090) (cddddr . k508f) (cdddar . k508e) (cddadr . k508d) (cddaar . k508c) (cdaddr . k508b) (cdadar . k508a) (cdaadr . k5089) (cdaaar . k5088) (cadddr . k5087) (caddar . k5086) (cadadr . k5085) (cadaar . k5084) (caaddr . k5083) (caadar . k5082) (caaadr . k5081) (caaaar . k5080) (cdddr . k507f) (cddar . k507e) (cdadr . k507d) (cdaar . k507c) (caddr . k507b) (cadar . k507a) (caadr . k5079) (caaar . k5078) (cddr . k5077) (cdar . k5076) (cadr . k5075) (caar . k5074) (cdr . k5073) (car . k5072) (boolean? . k5071) (boolean=? . k5070) (atan . k506f) (assertion-violation . k506e) (assertion-error . k30e0) (asin . k506d) (apply . k506c) (append . k506b) (angle . k506a) (acos . k5069) (abs . k5068) (/ . k5067) (* . k5066) (- . k5065) (+ . k5064) (>= . k5063) (> . k5062) (= . k5061) (<= . k5060) (< . k505f) (library . k505e) (&no-nans . k505d) (&no-infinities . k505c) (&i/o-encoding . k505b) (&i/o-decoding . k505a) (&i/o-port . k5059) (&i/o-file-does-not-exist . k5058) (&i/o-file-already-exists . k5057) (&i/o-file-is-read-only . k5056) (&i/o-file-protection . k5055) (&i/o-filename . k5054) (&i/o-invalid-position . k5053) (&i/o-write . k5052) (&i/o-read . k5051) (&i/o . k5050) (&undefined . k504f) (&syntax . k504e) (&lexical . k504d) (&implementation-restriction . k504c) (&non-continuable . k504b) (&who . k504a) (&irritants . k5049) (&assertion . k5048) (&violation . k5047) (&error . k5046) (&serious . k5045) (&warning . k5044) (&message . k5043) (&condition . k5042) (define-condition-type . k5041) (define-enumeration . k5040) (define-record-type . k503f) (parent-rtd . k503e) (nongenerative . k503d) (opaque . k503c) (sealed . k503b) (protocol . k503a) (parent . k5039) (immutable . k5038) (mutable . k5037) (fields . k5036) (error-handling-mode . k5035) (file-options . k5034) (buffer-mode . k5033) (eol-style . k5032) (guard . k5031) (trace-define . k5030) (trace-lambda . k502f) (unsyntax-splicing . k502e) (unsyntax . k502d) (unquote-splicing . k502c) (unquote . k502b) (_ . k502a) (else . k5029) (=> . k5028) (... . k5027) (assert . k5026) (endianness . k5025) (delay . k5024) (time . k5023) (do . k5022) (cond . k5021) (let* . k5020) (let . k501f) (let*-values . k501e) (let-values . k501d) (identifier-syntax . k501c) (with-syntax . k501b) (quasisyntax . k501a) (quasiquote . k5019) (syntax-rules . k5018) (include . k5017) (define-struct . k5016) (record-constructor-descriptor . k5015) (record-type-descriptor . k5014) (case . k5013) (parameterize . k5012) (unless . k5011) (when . k5010) (or . k500f) (and . k500e) (if . k500d) (letrec* . k500c) (letrec . k500b) (type-descriptor . k500a) (case-lambda . k5009) (lambda . k5008) (syntax . k5007) (syntax-case . k5006) (quote . k5005) (foreign-call . k5004) (letrec-syntax . k5003) (let-syntax . k5002) (set! . k5001) (import . k5000) (begin . k4fff) (module . k4ffe) (define-syntax . k4ffd) (define . k4ffc)) '((k4dcf core-prim . &no-nans-rcd) (k4dcd core-prim . &no-nans-rtd) (k4dba core-prim . &no-infinities-rcd) (k4db8 core-prim . &no-infinities-rtd) (k4da5 core-prim . &i/o-encoding-rcd) (k4da3 core-prim . &i/o-encoding-rtd) (k4d8a core-prim . &i/o-decoding-rcd) (k4d88 core-prim . &i/o-decoding-rtd) (k4d75 core-prim . &i/o-port-rcd) (k4d73 core-prim . &i/o-port-rtd) (k4d5a core-prim . &i/o-file-does-not-exist-rcd) (k4d58 core-prim . &i/o-file-does-not-exist-rtd) (k4d45 core-prim . &i/o-file-already-exists-rcd) (k4d43 core-prim . &i/o-file-already-exists-rtd) (k4d30 core-prim . &i/o-file-is-read-only-rcd) (k4d2e core-prim . &i/o-file-is-read-only-rtd) (k4d1b core-prim . &i/o-file-protection-rcd) (k4d19 core-prim . &i/o-file-protection-rtd) (k4d06 core-prim . &i/o-filename-rcd) (k4d04 core-prim . &i/o-filename-rtd) (k4ceb core-prim . &i/o-invalid-position-rcd) (k4ce9 core-prim . &i/o-invalid-position-rtd) (k4cd0 core-prim . &i/o-write-rcd) (k4cce core-prim . &i/o-write-rtd) (k4cbb core-prim . &i/o-read-rcd) (k4cb9 core-prim . &i/o-read-rtd) (k4ca6 core-prim . &i/o-rcd) (k4ca4 core-prim . &i/o-rtd) (k4c91 core-prim . &undefined-rcd) (k4c8f core-prim . &undefined-rtd) (k4c7c core-prim . &syntax-rcd) (k4c7a core-prim . &syntax-rtd) (k4c5b core-prim . &lexical-rcd) (k4c59 core-prim . &lexical-rtd) (k4c46 core-prim . &implementation-restriction-rcd) (k4c44 core-prim . &implementation-restriction-rtd) (k4c31 core-prim . &non-continuable-rcd) (k4c2f core-prim . &non-continuable-rtd) (k4c1c core-prim . &who-rcd) (k4c1a core-prim . &who-rtd) (k4c01 core-prim . &irritants-rcd) (k4bff core-prim . &irritants-rtd) (k4be6 core-prim . &assertion-rcd) (k4be4 core-prim . &assertion-rtd) (k4bd1 core-prim . &violation-rcd) (k4bcf core-prim . &violation-rtd) (k4bbc core-prim . &error-rcd) (k4bba core-prim . &error-rtd) (k4ba7 core-prim . &serious-rcd) (k4ba5 core-prim . &serious-rtd) (k4b92 core-prim . &warning-rcd) (k4b90 core-prim . &warning-rtd) (k4b7d core-prim . &message-rcd) (k4b7b core-prim . &message-rtd) (k4b1e core-prim . &condition-rcd) (k4b1c core-prim . &condition-rtd) (k30e2 core-prim . syntax-error) (k3006 core-prim . syntax-dispatch) (k531e core-prim . pretty-print) (k531d core-prim . eval-core) (k531c core-prim . set-symbol-value!) (k531b core-prim . symbol-value) (k531a core-prim . gensym) (k5319 core-prim . void) (k4edc core-prim . load) (k30f2 core-prim . interaction-environment) (k5318 core-prim . char-ready?) (k5317 core-prim . regexp?) (k5316 core-prim . read-line) (k5315 core-prim . ungensym) (k5314 core-prim . alist->eq-hash-table) (k5313 core-prim . assoc-ref) (k5312 core-prim . print) (k5311 core-prim . format) (k5310 core-prim . host-os) (k2a56 core-prim . library-path) (k530f core-prim . standard-library-path) (k530e core-prim . file-newer?) (k530d core-prim . stat-mtime) (k530c core-prim . write-to-file) (k530b core-prim . file->list) (k530a core-prim . file->string) (k5309 core-prim . digit->integer) (k5308 core-prim . call-with-string-input-port) (k5307 core-prim . call-with-string-io) (k5306 core-prim . string-split) (k5305 core-prim . bytevector-for-each) (k5304 core-prim . string->regexp) (k5303 core-prim . rxmatch) (k5302 core-prim . regexp-replace-all) (k5301 core-prim . hashtable-for-each) (k5300 core-prim . call-process) (k52ff core-prim . local-tz-offset) (k52fe core-prim . microseconds) (k52fd core-prim . directory-list) (k52fc core-prim . set-current-directory!) (k52fb core-prim . expand-path) (k52fa core-prim . current-directory) (k52f9 core-prim . %spawn) (k52f8 core-prim . %waitpid) (k52f7 core-prim . simple-struct-name) (k52f6 core-prim . simple-struct-set!) (k52f5 core-prim . simple-struct-ref) (k52f4 core-prim . make-simple-struct) (k52f3 core-prim . simple-struct?) (k52f2 core-prim . pointer-ref-c-int64) (k52f1 core-prim . pointer-ref-c-int32) (k52f0 core-prim . pointer-ref-c-int16) (k52ef core-prim . pointer-ref-c-int8) (k52ee core-prim . pointer-ref-c-uint64) (k52ed core-prim . pointer-ref-c-uint32) (k52ec core-prim . pointer-ref-c-uint16) (k52eb core-prim . pointer-ref-c-uint8) (k52ea core-prim . pointer-set-c-uint64!) (k52e9 core-prim . pointer-set-c-uint32!) (k52e8 core-prim . pointer-set-c-uint16!) (k52e7 core-prim . pointer-set-c-uint8!) (k52e6 core-prim . pointer-set-c-int64!) (k52e5 core-prim . pointer-set-c-int32!) (k52e4 core-prim . pointer-set-c-int16!) (k52e3 core-prim . pointer-set-c-int8!) (k52e2 core-prim . pointer-set-c-pointer!) (k52e1 core-prim . pointer-set-c-double!) (k52e0 core-prim . pointer-set-c-float!) (k52df core-prim . pointer-set-c-long-long!) (k52de core-prim . pointer-set-c-long!) (k52dd core-prim . pointer-set-c-int!) (k52dc core-prim . pointer-set-c-short!) (k52db core-prim . pointer-set-c-char!) (k52da core-prim . pointer-ref-c-pointer) (k52d9 core-prim . pointer-ref-c-double) (k52d8 core-prim . pointer-ref-c-float) (k52d7 core-prim . pointer-ref-c-unsigned-long-long) (k52d6 core-prim . pointer-ref-c-signed-long-long) (k52d5 core-prim . pointer-ref-c-unsigned-long) (k52d4 core-prim . pointer-ref-c-signed-long) (k52d3 core-prim . pointer-ref-c-unsigned-int) (k52d2 core-prim . pointer-ref-c-signed-int) (k52d1 core-prim . pointer-ref-c-unsigned-short) (k52d0 core-prim . pointer-ref-c-signed-short) (k52cf core-prim . pointer-ref-c-unsigned-char) (k52ce core-prim . pointer-ref-c-signed-char) (k52cd core-prim . pointer->integer) (k52cc core-prim . integer->pointer) (k52cb core-prim . pointer?) (k52ca core-prim . shared-errno) (k52c9 core-prim . %ffi-supported?) (k52c8 core-prim . %ffi-pointer->string) (k52c7 core-prim . %ffi-call->string-or-zero) (k52c6 core-prim . %ffi-call->double) (k52c5 core-prim . %ffi-call->void*) (k52c4 core-prim . %ffi-call->void) (k52c3 core-prim . %ffi-call->char) (k52c2 core-prim . %ffi-call->int) (k52c1 core-prim . %ffi-lookup) (k52c0 core-prim . %ffi-open) (k52bf core-prim . %fork) (k52be core-prim . %pipe) (k52bd core-prim . p) (k52bc core-prim . open-output-string) (k52bb core-prim . get-output-string) (k52ba core-prim . file-stat-ctime) (k52b9 core-prim . file-stat-atime) (k52b8 core-prim . file-stat-mtime) (k52b7 core-prim . file-size-in-bytes) (k52b6 core-prim . file-writable?) (k52b5 core-prim . file-executable?) (k52b4 core-prim . file-readable?) (k52b3 core-prim . file-regular?) (k52b2 core-prim . file-symbolic-link?) (k52b1 core-prim . file-directory?) (k52b0 core-prim . create-symbolic-link) (k52af core-prim . rename-file) (k52ae core-prim . delete-directory) (k52ad core-prim . create-directory) (k52ac core-prim . get-environment-variables) (k52ab core-prim . get-environment-variable) (k52aa core-prim . mkstx) (k52a9 core-prim . join-wraps) (k52a8 core-prim . id->real-label) (k52a7 core-prim . same-marks?) (k52a6 core-prim . same-marks*?) (k52a5 core-prim . get-timeofday) (k52a4 core-prim . get-command-line) (k52a3 core-prim . sys-display) (k52a2 core-prim . whereis) (k52a1 core-prim . register) (k52a0 core-prim . vm-join!) (k529f core-prim . vm-set-value!) (k529e core-prim . vm?) (k529d core-prim . main-vm?) (k529c core-prim . vm-eval) (k529b core-prim . vm-self) (k529a core-prim . vm-start!) (k5299 core-prim . make-vm) (k5298 core-prim . mutex-try-lock!) (k5297 core-prim . mutex-unlock!) (k5296 core-prim . mutex-lock!) (k5295 core-prim . mutex?) (k5294 core-prim . make-mutex) (k5293 core-prim . condition-variable-notify-all!) (k5292 core-prim . condition-variable-notify!) (k5291 core-prim . condition-variable-wait!) (k5290 core-prim . make-condition-variable) (k528f core-prim . mosh-executable-path) (k528e core-prim . make-file-options) (k528d core-prim . source-info) (k528c core-prim . make-compiler-instruction) (k528b core-prim . make-instruction) (k528a core-prim . set-source-info!) (k5289 core-prim . bignum?) (k5288 core-prim . fast-equal?) (k5287 core-prim . fasl-read) (k5286 core-prim . fasl-write) (k5285 core-prim . time-usage) (k5284 core-prim . os-constant) (k285d core-prim . make-parameter) (k5283 core-prim . socket-port) (k5282 core-prim . socket-shutdown) (k5281 core-prim . socket-close) (k5280 core-prim . socket-send) (k527f core-prim . socket-recv!) (k527e core-prim . socket-recv) (k527d core-prim . make-server-socket) (k527c core-prim . make-client-socket) (k527b core-prim . socket-accept) (k527a core-prim . socket?) (k5279 core-prim . string-upcase) (k5278 core-prim . string-titlecase) (k5277 core-prim . string-normalize-nfkd) (k5276 core-prim . string-normalize-nfkc) (k5275 core-prim . string-normalize-nfd) (k5274 core-prim . string-normalize-nfc) (k5273 core-prim . string-foldcase) (k5272 core-prim . string-downcase) (k5271 core-prim . string-ci>?) (k5270 core-prim . string-ci>=?) (k526f core-prim . string-ci=?) (k526e core-prim . string-ci<?) (k526d core-prim . string-ci<=?) (k526c core-prim . char-whitespace?) (k526b core-prim . char-upper-case?) (k526a core-prim . char-title-case?) (k5269 core-prim . char-numeric?) (k5268 core-prim . char-lower-case?) (k5267 core-prim . char-general-category) (k5266 core-prim . char-upcase) (k5265 core-prim . char-titlecase) (k5264 core-prim . char-foldcase) (k5263 core-prim . char-downcase) (k5262 core-prim . char-ci>?) (k5261 core-prim . char-ci>=?) (k5260 core-prim . char-ci=?) (k525f core-prim . char-ci<?) (k525e core-prim . char-ci<=?) (k525d core-prim . char-alphabetic?) (k2e33 core-prim . make-variable-transformer) (k30e8 core-prim . identifier?) (k30d4 core-prim . generate-temporaries) (k30d6 core-prim . free-identifier=?) (k30ec core-prim . syntax->datum) (k30ea core-prim . datum->syntax) (k30d8 core-prim . bound-identifier=?) (k525c core-prim . record-type-descriptor?) (k525b core-prim . record-predicate) (k525a core-prim . record-mutator) (k5259 core-prim . record-constructor) (k5258 core-prim . record-accessor) (k5257 core-prim . make-record-type-descriptor) (k5256 core-prim . make-record-constructor-descriptor) (k5255 core-prim . record?) (k5254 core-prim . record-type-uid) (k5253 core-prim . record-type-sealed?) (k5252 core-prim . record-type-parent) (k5251 core-prim . record-type-opaque?) (k5250 core-prim . record-type-name) (k524f core-prim . record-type-generative?) (k524e core-prim . record-type-field-names) (k524d core-prim . record-rtd) (k524c core-prim . record-field-mutable?) (k524b core-prim . delete-file) (k524a core-prim . file-exists?) (k5249 core-prim . vector-sort!) (k5248 core-prim . vector-sort) (k5247 core-prim . list-sort) (k5246 core-prim . symbol-hash) (k5245 core-prim . string-ci-hash) (k5244 core-prim . string-hash) (k5243 core-prim . equal-hash) (k5242 core-prim . hashtable-equivalence-function) (k5241 core-prim . make-hashtable) (k5240 core-prim . hashtable-hash-function) (k523f core-prim . make-eqv-hashtable) (k523e core-prim . make-eq-hashtable) (k523d core-prim . hashtable?) (k523c core-prim . hashtable-update!) (k523b core-prim . hashtable-size) (k523a core-prim . hashtable-set!) (k5239 core-prim . hashtable-ref) (k5238 core-prim . hashtable-mutable?) (k5237 core-prim . hashtable-keys) (k5236 core-prim . hashtable-entries) (k5235 core-prim . hashtable-delete!) (k5234 core-prim . hashtable-copy) (k5233 core-prim . hashtable-contains?) (k5232 core-prim . hashtable-clear!) (k5231 core-prim . call-with-output-file) (k5230 core-prim . call-with-input-file) (k522f core-prim . write-char) (k522e core-prim . write) (k522d core-prim . with-output-to-file) (k522c core-prim . with-input-from-file) (k522b core-prim . read-char) (k522a core-prim . read) (k5229 core-prim . peek-char) (k5228 core-prim . open-output-file) (k5227 core-prim . open-input-file) (k5226 core-prim . newline) (k5225 core-prim . display) (k5224 core-prim . close-output-port) (k5223 core-prim . close-input-port) (k5222 core-prim . eof-object?) (k5221 core-prim . eof-object) (k5220 core-prim . current-error-port) (k521f core-prim . current-output-port) (k521e core-prim . current-input-port) (k521d core-prim . output-port?) (k521c core-prim . input-port?) (k521b core-prim . utf-8-codec) (k521a core-prim . utf-16-codec) (k5219 core-prim . transcoder-error-handling-mode) (k5218 core-prim . transcoder-eol-style) (k5217 core-prim . transcoder-codec) (k5216 core-prim . transcoded-port) (k5215 core-prim . textual-port?) (k5214 core-prim . string->bytevector) (k5213 core-prim . standard-output-port) (k5212 core-prim . standard-input-port) (k5211 core-prim . standard-error-port) (k5210 core-prim . set-port-position!) (k520f core-prim . put-u8) (k520e core-prim . put-string) (k520d core-prim . put-datum) (k520c core-prim . put-char) (k520b core-prim . put-bytevector) (k520a core-prim . port?) (k5209 core-prim . port-transcoder) (k5208 core-prim . port-position) (k5207 core-prim . port-has-set-port-position!?) (k5206 core-prim . port-has-port-position?) (k5205 core-prim . port-eof?) (k5204 core-prim . output-port-buffer-mode) (k5203 core-prim . open-string-output-port) (k5202 core-prim . open-string-input-port) (k5201 core-prim . open-file-output-port) (k5200 core-prim . open-file-input/output-port) (k51ff core-prim . open-file-input-port) (k51fe core-prim . open-bytevector-output-port) (k51fd core-prim . open-bytevector-input-port) (k51fc core-prim . native-transcoder) (k51fb core-prim . native-eol-style) (k51fa core-prim . make-transcoder) (k51f9 core-prim . latin-1-codec) (k4cca core-prim . make-i/o-write-error) (k4cb5 core-prim . make-i/o-read-error) (k4d6b core-prim . make-i/o-port-error) (k4ce1 core-prim . make-i/o-invalid-position-error) (k4cfc core-prim . make-i/o-filename-error) (k4d15 core-prim . make-i/o-file-protection-error) (k4d2a core-prim . make-i/o-file-is-read-only-error) (k4d54 core-prim . make-i/o-file-does-not-exist-error) (k4d3f core-prim . make-i/o-file-already-exists-error) (k4ca0 core-prim . make-i/o-error) (k4d9b core-prim . make-i/o-encoding-error) (k4d84 core-prim . make-i/o-decoding-error) (k51f8 core-prim . make-custom-textual-output-port) (k51f7 core-prim . make-custom-textual-input/output-port) (k51f6 core-prim . make-custom-textual-input-port) (k51f5 core-prim . make-custom-binary-output-port) (k51f4 core-prim . make-custom-binary-input/output-port) (k51f3 core-prim . make-custom-binary-input-port) (k51f2 core-prim . make-bytevector) (k51f1 core-prim . lookahead-u8) (k51f0 core-prim . lookahead-char) (k4ccc core-prim . i/o-write-error?) (k4cb7 core-prim . i/o-read-error?) (k4d6f core-prim . i/o-port-error?) (k4ce5 core-prim . i/o-invalid-position-error?) (k4d00 core-prim . i/o-filename-error?) (k4d17 core-prim . i/o-file-protection-error?) (k4d2c core-prim . i/o-file-is-read-only-error?) (k4d56 core-prim . i/o-file-does-not-exist-error?) (k4d41 core-prim . i/o-file-already-exists-error?) (k4ca2 core-prim . i/o-error?) (k4ce7 core-prim . i/o-error-position) (k4d71 core-prim . i/o-error-port) (k4d02 core-prim . i/o-error-filename) (k4d9f core-prim . i/o-encoding-error?) (k4da1 core-prim . i/o-encoding-error-char) (k4d86 core-prim . i/o-decoding-error?) (k51ef core-prim . get-u8) (k51ee core-prim . get-string-n!) (k51ed core-prim . get-string-n) (k51ec core-prim . get-string-all) (k51eb core-prim . get-line) (k51ea core-prim . get-datum) (k51e9 core-prim . get-char) (k51e8 core-prim . get-bytevector-some) (k51e7 core-prim . get-bytevector-n!) (k51e6 core-prim . get-bytevector-n) (k51e5 core-prim . get-bytevector-all) (k51e4 core-prim . flush-output-port) (k51e3 core-prim . close-port) (k30c2 core-prim . scheme-report-environment) (k51e2 core-prim . quotient) (k30c0 core-prim . null-environment) (k51e1 core-prim . remainder) (k51e0 core-prim . modulo) (k51df core-prim . inexact->exact) (k51de core-prim . force) (k51dd core-prim . exact->inexact) (k51dc core-prim . make-promise) (k51db core-prim . exit) (k4ed6 core-prim . command-line) (k51da core-prim . string-fill!) (k51d9 core-prim . string-set!) (k51d8 core-prim . set-cdr!) (k51d7 core-prim . set-car!) (k51d6 core-prim . remove) (k51d5 core-prim . remv) (k51d4 core-prim . remp) (k51d3 core-prim . remq) (k51d2 core-prim . partition) (k51d1 core-prim . memv) (k51d0 core-prim . memq) (k51cf core-prim . memp) (k51ce core-prim . member) (k51cd core-prim . exists) (k51cc core-prim . for-all) (k51cb core-prim . fold-right) (k51ca core-prim . fold-left) (k51c9 core-prim . find) (k51c8 core-prim . filter) (k51c7 core-prim . cons*) (k51c6 core-prim . assv) (k51c5 core-prim . assq) (k51c4 core-prim . assp) (k51c3 core-prim . assoc) (k51c2 core-prim . call-with-string-output-port) (k51c1 core-prim . call-with-port) (k51c0 core-prim . call-with-bytevector-output-port) (k51bf core-prim . bytevector->string) (k51be core-prim . buffer-mode?) (k51bd core-prim . binary-port?) (k51bc core-prim . with-exception-handler) (k51bb core-prim . raise-continuable) (k51ba core-prim . raise) (k30c6 core-prim . eval) (k30be core-prim . environment) (k51b9 core-prim . make-enumeration) (k51b8 core-prim . enum-set=?) (k51b7 core-prim . enum-set-universe) (k51b6 core-prim . enum-set-union) (k51b5 core-prim . enum-set-subset?) (k51b4 core-prim . enum-set-projection) (k51b3 core-prim . enum-set-member?) (k51b2 core-prim . enum-set-intersection) (k51b1 core-prim . enum-set-indexer) (k51b0 core-prim . enum-set-difference) (k51af core-prim . enum-set-constructor) (k51ae core-prim . enum-set-complement) (k51ad core-prim . enum-set->list) (k4c16 core-prim . who-condition?) (k4b8e core-prim . warning?) (k4bcd core-prim . violation?) (k4c8d core-prim . undefined-violation?) (k4c74 core-prim . syntax-violation?) (k4c78 core-prim . syntax-violation-subform) (k4c76 core-prim . syntax-violation-form) (k30e6 core-prim . syntax-violation) (k51ac core-prim . simple-conditions) (k4ba3 core-prim . serious-condition?) (k4c2d core-prim . non-continuable-violation?) (k4b77 core-prim . message-condition?) (k4c12 core-prim . make-who-condition) (k4b8c core-prim . make-warning) (k4bcb core-prim . make-violation) (k4c8b core-prim . make-undefined-violation) (k4c6e core-prim . make-syntax-violation) (k4ba1 core-prim . make-serious-condition) (k4c2b core-prim . make-non-continuable-violation) (k4b73 core-prim . make-message-condition) (k4c55 core-prim . make-lexical-violation) (k4bf7 core-prim . make-irritants-condition) (k4c40 core-prim . make-implementation-restriction-violation) (k4bb6 core-prim . make-error) (k4be0 core-prim . make-assertion-violation) (k4c57 core-prim . lexical-violation?) (k4bfb core-prim . irritants-condition?) (k4c42 core-prim . implementation-restriction-violation?) (k4bb8 core-prim . error?) (k4c18 core-prim . condition-who) (k51ab core-prim . condition-predicate) (k4b79 core-prim . condition-message) (k4bfd core-prim . condition-irritants) (k51aa core-prim . condition-accessor) (k51a9 core-prim . condition) (k4be2 core-prim . assertion-violation?) (k51a8 core-prim . condition?) (k51a7 core-prim . utf32->string) (k51a6 core-prim . utf16->string) (k51a5 core-prim . utf8->string) (k51a4 core-prim . uint-list->bytevector) (k51a3 core-prim . u8-list->bytevector) (k51a2 core-prim . string->utf8) (k51a1 core-prim . string->utf32) (k51a0 core-prim . string->utf16) (k519f core-prim . sint-list->bytevector) (k519e core-prim . native-endianness) (k519d core-prim . bytevector?) (k519c core-prim . bytevector=?) (k519b core-prim . bytevector-uint-set!) (k519a core-prim . bytevector-uint-ref) (k5199 core-prim . bytevector-u8-set!) (k5198 core-prim . bytevector-u8-ref) (k5197 core-prim . bytevector-u64-set!) (k5196 core-prim . bytevector-u64-ref) (k5195 core-prim . bytevector-u64-native-set!) (k5194 core-prim . bytevector-u64-native-ref) (k5193 core-prim . bytevector-u32-set!) (k5192 core-prim . bytevector-u32-ref) (k5191 core-prim . bytevector-u32-native-set!) (k5190 core-prim . bytevector-u32-native-ref) (k518f core-prim . bytevector-u16-set!) (k518e core-prim . bytevector-u16-ref) (k518d core-prim . bytevector-u16-native-set!) (k518c core-prim . bytevector-u16-native-ref) (k518b core-prim . bytevector-sint-set!) (k518a core-prim . bytevector-sint-ref) (k5189 core-prim . bytevector-s8-set!) (k5188 core-prim . bytevector-s8-ref) (k5187 core-prim . bytevector-s64-set!) (k5186 core-prim . bytevector-s64-ref) (k5185 core-prim . bytevector-s64-native-set!) (k5184 core-prim . bytevector-s64-native-ref) (k5183 core-prim . bytevector-s32-set!) (k5182 core-prim . bytevector-s32-ref) (k5181 core-prim . bytevector-s32-native-set!) (k5180 core-prim . bytevector-s32-native-ref) (k517f core-prim . bytevector-s16-set!) (k517e core-prim . bytevector-s16-ref) (k517d core-prim . bytevector-s16-native-set!) (k517c core-prim . bytevector-s16-native-ref) (k517b core-prim . bytevector-length) (k517a core-prim . bytevector-ieee-single-ref) (k5179 core-prim . bytevector-ieee-single-set!) (k5178 core-prim . bytevector-ieee-single-native-set!) (k5177 core-prim . bytevector-ieee-single-native-ref) (k5176 core-prim . bytevector-ieee-double-set!) (k5175 core-prim . bytevector-ieee-double-ref) (k5174 core-prim . bytevector-ieee-double-native-set!) (k5173 core-prim . bytevector-ieee-double-native-ref) (k5172 core-prim . bytevector-fill!) (k5171 core-prim . bytevector-copy!) (k5170 core-prim . bytevector-copy) (k516f core-prim . bytevector->uint-list) (k516e core-prim . bytevector->u8-list) (k516d core-prim . bytevector->sint-list) (k4dcb core-prim . no-nans-violation?) (k4db6 core-prim . no-infinities-violation?) (k4dc9 core-prim . make-no-nans-violation) (k4db4 core-prim . make-no-infinities-violation) (k516c core-prim . real->flonum) (k516b core-prim . flzero?) (k516a core-prim . fltruncate) (k5169 core-prim . fltan) (k5168 core-prim . flsqrt) (k5167 core-prim . flsin) (k5166 core-prim . flround) (k5165 core-prim . flpositive?) (k5164 core-prim . flonum?) (k5163 core-prim . flodd?) (k5162 core-prim . flnumerator) (k5161 core-prim . flnegative?) (k5160 core-prim . flnan?) (k515f core-prim . flmod0) (k515e core-prim . flmod) (k515d core-prim . flmin) (k515c core-prim . flmax) (k515b core-prim . fllog) (k515a core-prim . flinteger?) (k5159 core-prim . flinfinite?) (k5158 core-prim . flfloor) (k5157 core-prim . flfinite?) (k5156 core-prim . flexpt) (k5155 core-prim . flexp) (k5154 core-prim . fleven?) (k5153 core-prim . fldiv0-and-mod0) (k5152 core-prim . fldiv0) (k5151 core-prim . fldiv-and-mod) (k5150 core-prim . fldiv) (k514f core-prim . fldenominator) (k514e core-prim . flcos) (k514d core-prim . flceiling) (k514c core-prim . flatan) (k514b core-prim . flasin) (k514a core-prim . flacos) (k5149 core-prim . flabs) (k5148 core-prim . fl>?) (k5147 core-prim . fl>=?) (k5146 core-prim . fl=?) (k5145 core-prim . fl<?) (k5144 core-prim . fl<=?) (k5143 core-prim . fl/) (k5142 core-prim . fl-) (k5141 core-prim . fl+) (k5140 core-prim . fl*) (k513f core-prim . fixnum->flonum) (k513e core-prim . fxzero?) (k513d core-prim . fxxor) (k513c core-prim . fxrotate-bit-field) (k513b core-prim . fxreverse-bit-field) (k513a core-prim . fxpositive?) (k5139 core-prim . fxodd?) (k5138 core-prim . fxnot) (k5137 core-prim . fxnegative?) (k5136 core-prim . fxmod0) (k5135 core-prim . fxmod) (k5134 core-prim . fxmin) (k5133 core-prim . fxmax) (k5132 core-prim . fxlength) (k5131 core-prim . fxior) (k5130 core-prim . fxif) (k512f core-prim . fxfirst-bit-set) (k512e core-prim . fxeven?) (k512d core-prim . fxdiv0-and-mod0) (k512c core-prim . fxdiv0) (k512b core-prim . fxdiv-and-mod) (k512a core-prim . fxdiv) (k5129 core-prim . fxcopy-bit-field) (k5128 core-prim . fxcopy-bit) (k5127 core-prim . fxbit-set?) (k5126 core-prim . fxbit-field) (k5125 core-prim . fxbit-count) (k5124 core-prim . fxarithmetic-shift-right) (k5123 core-prim . fxarithmetic-shift-left) (k5122 core-prim . fxarithmetic-shift) (k5121 core-prim . fxand) (k5120 core-prim . fx>?) (k511f core-prim . fx>=?) (k511e core-prim . fx=?) (k511d core-prim . fx<?) (k511c core-prim . fx<=?) (k511b core-prim . fx-/carry) (k511a core-prim . fx-) (k5119 core-prim . fx+/carry) (k5118 core-prim . fx+) (k5117 core-prim . fx*/carry) (k5116 core-prim . fx*) (k5115 core-prim . greatest-fixnum) (k5114 core-prim . least-fixnum) (k5113 core-prim . fixnum-width) (k5112 core-prim . fixnum?) (k5111 core-prim . bitwise-rotate-bit-field) (k5110 core-prim . bitwise-reverse-bit-field) (k510f core-prim . bitwise-length) (k510e core-prim . bitwise-if) (k510d core-prim . bitwise-first-bit-set) (k510c core-prim . bitwise-copy-bit-field) (k510b core-prim . bitwise-copy-bit) (k510a core-prim . bitwise-bit-set?) (k5109 core-prim . bitwise-bit-field) (k5108 core-prim . bitwise-bit-count) (k5107 core-prim . bitwise-xor) (k5106 core-prim . bitwise-ior) (k5105 core-prim . bitwise-and) (k5104 core-prim . bitwise-not) (k5103 core-prim . bitwise-arithmetic-shift-right) (k5102 core-prim . bitwise-arithmetic-shift-left) (k5101 core-prim . bitwise-arithmetic-shift) (k5100 core-prim . zero?) (k50ff core-prim . vector?) (k50fe core-prim . vector-set!) (k50fd core-prim . vector-ref) (k50fc core-prim . vector-map) (k50fb core-prim . vector-length) (k50fa core-prim . vector-for-each) (k50f9 core-prim . vector-fill!) (k50f8 core-prim . vector->list) (k50f7 core-prim . vector) (k50f6 core-prim . values) (k50f5 core-prim . truncate) (k50f4 core-prim . tan) (k50f3 core-prim . symbol?) (k50f2 core-prim . symbol=?) (k50f1 core-prim . symbol->string) (k50f0 core-prim . substring) (k50ef core-prim . string?) (k50ee core-prim . string>?) (k50ed core-prim . string>=?) (k50ec core-prim . string=?) (k50eb core-prim . string<?) (k50ea core-prim . string<=?) (k50e9 core-prim . string-ref) (k50e8 core-prim . string-length) (k50e7 core-prim . string-for-each) (k50e6 core-prim . string-copy) (k50e5 core-prim . string-append) (k50e4 core-prim . string->symbol) (k50e3 core-prim . string->number) (k50e2 core-prim . string->list) (k50e1 core-prim . string) (k50e0 core-prim . sqrt) (k50df core-prim . sin) (k50de core-prim . round) (k50dd core-prim . reverse) (k50dc core-prim . real?) (k50db core-prim . real-valued?) (k50da core-prim . real-part) (k50d9 core-prim . rationalize) (k50d8 core-prim . rational?) (k50d7 core-prim . rational-valued?) (k50d6 core-prim . procedure?) (k50d5 core-prim . positive?) (k50d4 core-prim . pair?) (k50d3 core-prim . odd?) (k50d2 core-prim . numerator) (k50d1 core-prim . number?) (k50d0 core-prim . number->string) (k50cf core-prim . null?) (k50ce core-prim . not) (k50cd core-prim . negative?) (k50cc core-prim . nan?) (k50cb core-prim . min) (k50ca core-prim . max) (k50c9 core-prim . map) (k50c8 core-prim . make-vector) (k50c7 core-prim . make-string) (k50c6 core-prim . make-rectangular) (k50c5 core-prim . make-polar) (k50c4 core-prim . magnitude) (k50c3 core-prim . log) (k50c2 core-prim . list?) (k50c1 core-prim . list-tail) (k50c0 core-prim . list-ref) (k50bf core-prim . list->vector) (k50be core-prim . list->string) (k50bd core-prim . list) (k50bc core-prim . length) (k50bb core-prim . lcm) (k50ba core-prim . integer?) (k50b9 core-prim . integer-valued?) (k50b8 core-prim . integer->char) (k50b7 core-prim . infinite?) (k50b6 core-prim . inexact?) (k50b5 core-prim . inexact) (k50b4 core-prim . imag-part) (k50b3 core-prim . gcd) (k50b2 core-prim . for-each) (k50b1 core-prim . floor) (k50b0 core-prim . finite?) (k50af core-prim . expt) (k50ae core-prim . exp) (k50ad core-prim . exact?) (k50ac core-prim . exact-integer-sqrt) (k50ab core-prim . exact) (k50aa core-prim . even?) (k50a9 core-prim . error) (k50a8 core-prim . eqv?) (k50a7 core-prim . equal?) (k50a6 core-prim . eq?) (k50a5 core-prim . dynamic-wind) (k50a4 core-prim . div0-and-mod0) (k50a3 core-prim . mod0) (k50a2 core-prim . div0) (k50a1 core-prim . div-and-mod) (k50a0 core-prim . mod) (k509f core-prim . div) (k509e core-prim . denominator) (k509d core-prim . cos) (k509c core-prim . cons) (k509b core-prim . complex?) (k509a core-prim . char?) (k5099 core-prim . char>?) (k5098 core-prim . char>=?) (k5097 core-prim . char=?) (k5096 core-prim . char<?) (k5095 core-prim . char<=?) (k5094 core-prim . char->integer) (k5093 core-prim . ceiling) (k5092 core-prim . call-with-values) (k5091 core-prim . call/cc) (k5090 core-prim . call-with-current-continuation) (k508f core-prim . cddddr) (k508e core-prim . cdddar) (k508d core-prim . cddadr) (k508c core-prim . cddaar) (k508b core-prim . cdaddr) (k508a core-prim . cdadar) (k5089 core-prim . cdaadr) (k5088 core-prim . cdaaar) (k5087 core-prim . cadddr) (k5086 core-prim . caddar) (k5085 core-prim . cadadr) (k5084 core-prim . cadaar) (k5083 core-prim . caaddr) (k5082 core-prim . caadar) (k5081 core-prim . caaadr) (k5080 core-prim . caaaar) (k507f core-prim . cdddr) (k507e core-prim . cddar) (k507d core-prim . cdadr) (k507c core-prim . cdaar) (k507b core-prim . caddr) (k507a core-prim . cadar) (k5079 core-prim . caadr) (k5078 core-prim . caaar) (k5077 core-prim . cddr) (k5076 core-prim . cdar) (k5075 core-prim . cadr) (k5074 core-prim . caar) (k5073 core-prim . cdr) (k5072 core-prim . car) (k5071 core-prim . boolean?) (k5070 core-prim . boolean=?) (k506f core-prim . atan) (k506e core-prim . assertion-violation) (k30e0 core-prim . assertion-error) (k506d core-prim . asin) (k506c core-prim . apply) (k506b core-prim . append) (k506a core-prim . angle) (k5069 core-prim . acos) (k5068 core-prim . abs) (k5067 core-prim . /) (k5066 core-prim . *) (k5065 core-prim . -) (k5064 core-prim . +) (k5063 core-prim . >=) (k5062 core-prim . >) (k5061 core-prim . =) (k5060 core-prim . <=) (k505f core-prim . <) (k505e core-prim . library) (k505d $core-rtd &no-nans-rtd &no-nans-rcd) (k505c $core-rtd &no-infinities-rtd &no-infinities-rcd) (k505b $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (k505a $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (k5059 $core-rtd &i/o-port-rtd &i/o-port-rcd) (k5058 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (k5057 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (k5056 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (k5055 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (k5054 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (k5053 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (k5052 $core-rtd &i/o-write-rtd &i/o-write-rcd) (k5051 $core-rtd &i/o-read-rtd &i/o-read-rcd) (k5050 $core-rtd &i/o-rtd &i/o-rcd) (k504f $core-rtd &undefined-rtd &undefined-rcd) (k504e $core-rtd &syntax-rtd &syntax-rcd) (k504d $core-rtd &lexical-rtd &lexical-rcd) (k504c $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (k504b $core-rtd &non-continuable-rtd &non-continuable-rcd) (k504a $core-rtd &who-rtd &who-rcd) (k5049 $core-rtd &irritants-rtd &irritants-rcd) (k5048 $core-rtd &assertion-rtd &assertion-rcd) (k5047 $core-rtd &violation-rtd &violation-rcd) (k5046 $core-rtd &error-rtd &error-rcd) (k5045 $core-rtd &serious-rtd &serious-rcd) (k5044 $core-rtd &warning-rtd &warning-rcd) (k5043 $core-rtd &message-rtd &message-rcd) (k5042 $core-rtd &condition-rtd &condition-rcd) (k5041 macro . define-condition-type) (k5040 macro . define-enumeration) (k503f macro . define-record-type) (k503e macro . parent-rtd) (k503d macro . nongenerative) (k503c macro . opaque) (k503b macro . sealed) (k503a macro . protocol) (k5039 macro . parent) (k5038 macro . immutable) (k5037 macro . mutable) (k5036 macro . fields) (k5035 macro . error-handling-mode) (k5034 macro . file-options) (k5033 macro . buffer-mode) (k5032 macro . eol-style) (k5031 macro . guard) (k5030 macro . trace-define) (k502f macro . trace-lambda) (k502e macro . unsyntax-splicing) (k502d macro . unsyntax) (k502c macro . unquote-splicing) (k502b macro . unquote) (k502a macro . _) (k5029 macro . else) (k5028 macro . =>) (k5027 macro . ...) (k5026 macro . assert) (k5025 macro . endianness) (k5024 macro . delay) (k5023 macro . time) (k5022 macro . do) (k5021 macro . cond) (k5020 macro . let*) (k501f macro . let) (k501e macro . let*-values) (k501d macro . let-values) (k501c macro . identifier-syntax) (k501b macro . with-syntax) (k501a macro . quasisyntax) (k5019 macro . quasiquote) (k5018 macro . syntax-rules) (k5017 macro . include) (k5016 macro . define-struct) (k5015 core-macro . record-constructor-descriptor) (k5014 core-macro . record-type-descriptor) (k5013 macro . case) (k5012 macro . parameterize) (k5011 macro . unless) (k5010 macro . when) (k500f core-macro . or) (k500e core-macro . and) (k500d core-macro . if) (k500c core-macro . letrec*) (k500b core-macro . letrec) (k500a core-macro . type-descriptor) (k5009 core-macro . case-lambda) (k5008 core-macro . lambda) (k5007 core-macro . syntax) (k5006 core-macro . syntax-case) (k5005 core-macro . quote) (k5004 core-macro . foreign-call) (k5003 letrec-syntax) (k5002 let-syntax) (k5001 set!) (k5000 import) (k4fff begin) (k4ffe module) (k4ffd define-syntax) (k4ffc define)) values values '#f '#f '#f '#f) (k2c2b@k2a77@install-library 'k533f '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . k531e) (eval-core . k531d) (set-symbol-value! . k531c) (symbol-value . k531b) (gensym . k531a) (void . k5319)) '() values values '#f '#f '#f '#f) (k2c2b@k2a77@install-library 'k5340 '(mosh) '() '() '() '() '((set-symbol-value! . k531c) (symbol-value . k531b) (regexp? . k5317) (read-line . k5316) (ungensym . k5315) (alist->eq-hash-table . k5314) (assoc-ref . k5313) (print . k5312) (format . k5311) (host-os . k5310) (library-path . k2a56) (standard-library-path . k530f) (file-newer? . k530e) (stat-mtime . k530d) (digit->integer . k5309) (call-with-string-input-port . k5308) (call-with-string-io . k5307) (string-split . k5306) (bytevector-for-each . k5305) (string->regexp . k5304) (rxmatch . k5303) (regexp-replace-all . k5302) (hashtable-for-each . k5301) (set-current-directory! . k52fc) (expand-path . k52fb) (current-directory . k52fa) (p . k52bd) (get-timeofday . k52a5) (get-command-line . k52a4) (sys-display . k52a3) (whereis . k52a2) (register . k52a1) (vm-join! . k52a0) (vm-set-value! . k529f) (vm? . k529e) (main-vm? . k529d) (vm-eval . k529c) (vm-self . k529b) (vm-start! . k529a) (make-vm . k5299) (mutex-try-lock! . k5298) (mutex-unlock! . k5297) (mutex-lock! . k5296) (mutex? . k5295) (make-mutex . k5294) (condition-variable-notify-all! . k5293) (condition-variable-notify! . k5292) (condition-variable-wait! . k5291) (make-condition-variable . k5290) (mosh-executable-path . k528f) (make-file-options . k528e) (source-info . k528d) (make-compiler-instruction . k528c) (make-instruction . k528b) (set-source-info! . k528a) (bignum? . k5289) (fast-equal? . k5288) (fasl-read . k5287) (fasl-write . k5286) (time-usage . k5285) (os-constant . k5284) (time . k5023) (include . k5017)) '() values values '#f '#f '#f '#f) (k2c2b@k2a77@install-library 'k5341 '(system) '() '() '() '() '((write-to-file . k530c) (file->list . k530b) (file->string . k530a) (call-process . k5300) (local-tz-offset . k52ff) (microseconds . k52fe) (directory-list . k52fd) (expand-path . k52fb) (%spawn . k52f9) (%waitpid . k52f8) (simple-struct-name . k52f7) (simple-struct-set! . k52f6) (simple-struct-ref . k52f5) (make-simple-struct . k52f4) (simple-struct? . k52f3) (pointer-ref-c-int64 . k52f2) (pointer-ref-c-int32 . k52f1) (pointer-ref-c-int16 . k52f0) (pointer-ref-c-int8 . k52ef) (pointer-ref-c-uint64 . k52ee) (pointer-ref-c-uint32 . k52ed) (pointer-ref-c-uint16 . k52ec) (pointer-ref-c-uint8 . k52eb) (pointer-set-c-uint64! . k52ea) (pointer-set-c-uint32! . k52e9) (pointer-set-c-uint16! . k52e8) (pointer-set-c-uint8! . k52e7) (pointer-set-c-int64! . k52e6) (pointer-set-c-int32! . k52e5) (pointer-set-c-int16! . k52e4) (pointer-set-c-int8! . k52e3) (pointer-set-c-pointer! . k52e2) (pointer-set-c-double! . k52e1) (pointer-set-c-float! . k52e0) (pointer-set-c-long-long! . k52df) (pointer-set-c-long! . k52de) (pointer-set-c-int! . k52dd) (pointer-set-c-short! . k52dc) (pointer-set-c-char! . k52db) (pointer-ref-c-pointer . k52da) (pointer-ref-c-double . k52d9) (pointer-ref-c-float . k52d8) (pointer-ref-c-unsigned-long-long . k52d7) (pointer-ref-c-signed-long-long . k52d6) (pointer-ref-c-unsigned-long . k52d5) (pointer-ref-c-signed-long . k52d4) (pointer-ref-c-unsigned-int . k52d3) (pointer-ref-c-signed-int . k52d2) (pointer-ref-c-unsigned-short . k52d1) (pointer-ref-c-signed-short . k52d0) (pointer-ref-c-unsigned-char . k52cf) (pointer-ref-c-signed-char . k52ce) (pointer->integer . k52cd) (integer->pointer . k52cc) (pointer? . k52cb) (shared-errno . k52ca) (%ffi-supported? . k52c9) (%ffi-pointer->string . k52c8) (%ffi-call->string-or-zero . k52c7) (%ffi-call->double . k52c6) (%ffi-call->void* . k52c5) (%ffi-call->void . k52c4) (%ffi-call->char . k52c3) (%ffi-call->int . k52c2) (%ffi-lookup . k52c1) (%ffi-open . k52c0) (%fork . k52bf) (%pipe . k52be) (open-output-string . k52bc) (get-output-string . k52bb) (file-stat-ctime . k52ba) (file-stat-atime . k52b9) (file-stat-mtime . k52b8) (file-size-in-bytes . k52b7) (file-writable? . k52b6) (file-executable? . k52b5) (file-readable? . k52b4) (file-regular? . k52b3) (file-symbolic-link? . k52b2) (file-directory? . k52b1) (create-symbolic-link . k52b0) (rename-file . k52af) (delete-directory . k52ae) (create-directory . k52ad) (get-environment-variables . k52ac) (get-environment-variable . k52ab) (mkstx . k52aa) (join-wraps . k52a9) (id->real-label . k52a8) (same-marks? . k52a7) (same-marks*? . k52a6) (make-parameter . k285d) (socket-port . k5283) (socket-shutdown . k5282) (socket-close . k5281) (socket-send . k5280) (socket-recv! . k527f) (socket-recv . k527e) (make-server-socket . k527d) (make-client-socket . k527c) (socket-accept . k527b) (socket? . k527a) (parameterize . k5012)) '() values values '#f '#f '#f '#f))
((lambda (k4ec5@add-library-path! k4ec7@parse-and-add-library-path k4ec9@for-each-with-index k4ecb@rpad k4ecd@condition-printer k4ecf@record->field-alist k4ed1@map-with-index k4ed3@repl k4ed5@trace-printer k4ed7@command-line k4ed9@local-library-path k4edb@load/args k4edd@load k4edf@ironscheme-build k4ee1@eval-top-level k4ee3@compile-system-libraries k4ee5@compile k4ee7@compile->closure k4ee9@pre-compile-r6rs-file k4eeb@load-r6rs-top-level k4eed@load-r6rs-top-level-sexp) (begin (set! k4ec5@add-library-path! (lambda (k4f10@path) (k2c1b@k2a57@library-path (append (k2c1b@k2a57@library-path) (list k4f10@path))))) (set! k4ec7@parse-and-add-library-path (lambda (k4f12@paths k4f13@message) ((lambda (k4f16@t) (if k4f16@t ((lambda (k4f18@paths) (for-each (lambda (k4f1a@path) (if (file-exists? k4f1a@path) (k4ec5@add-library-path! (expand-path k4f1a@path)) (format (current-error-port) k4f13@message k4f1a@path))) (string-split k4f18@paths '#\:))) k4f16@t) (void))) k4f12@paths))) (set! k4ec9@for-each-with-index (lambda (k4f1c@proc k4f1d@lst) (letrec ((k4f20@loop (lambda (k4f22@i k4f23@lst) (if (null? k4f23@lst) (if '#f '#f (void)) (begin (k4f1c@proc k4f22@i (car k4f23@lst)) (k4f20@loop (+ k4f22@i '1) (cdr k4f23@lst))))))) (k4f20@loop '1 k4f1d@lst)))) (set! k4ecb@rpad (lambda (k4f26@str k4f27@pad k4f28@n) ((lambda (k4f2c@rest) ((letrec ((k4f2e@loop (lambda (k4f30@rest k4f31@ret) (if (<= k4f30@rest '0) k4f31@ret (k4f2e@loop (- k4f30@rest '1) (string-append k4f31@ret k4f27@pad)))))) k4f2e@loop) k4f2c@rest (format '"~a" k4f26@str))) (- k4f28@n (string-length (format '"~a" k4f26@str)))))) (set! k4ecd@condition-printer (lambda (k4f34@e k4f35@port) ((lambda (k4f39@max-condition-len) (begin (set! k4f39@max-condition-len (apply max (map (lambda (k4f4a@c) (string-length (symbol->string (record-type-name (record-rtd k4f4a@c))))) (simple-conditions k4f34@e)))) (begin (display '" Condition components:\n" k4f35@port) (k4ec9@for-each-with-index (lambda (k4f3a@i k4f3b@x) ((lambda (k4f3e@rtd k4f3f@fields-alist) (begin (format k4f35@port '" ~d. ~a" k4f3a@i (k4ecb@rpad (symbol->string (record-type-name k4f3e@rtd)) '" " k4f39@max-condition-len)) (if (null? k4f3f@fields-alist) (newline k4f35@port) (void)) ((letrec ((k4f42@loop (lambda (k4f44@first k4f45@fields-alist) (if (null? k4f45@fields-alist) '() ((lambda (k4f48@field) (begin (if (not k4f44@first) (display (k4ecb@rpad '"" '" " (+ '4 k4f39@max-condition-len)) k4f35@port) (void)) (display '"       " k4f35@port) (display (car k4f48@field) k4f35@port) (display '": " k4f35@port) (write (cdr k4f48@field) k4f35@port) (newline k4f35@port) (k4f42@loop '#f (cdr k4f45@fields-alist)))) (car k4f45@fields-alist)))))) k4f42@loop) '#t k4f3f@fields-alist))) (record-rtd k4f3b@x) (k4ecf@record->field-alist k4f3b@x))) (simple-conditions k4f34@e))))) '#f))) (set! k4ecf@record->field-alist (lambda (k4f4c@r) ((lambda (k4f4f@ref) (begin (set! k4f4f@ref (lambda (k4f5a@rtd k4f5b@i k4f5c@x) ((lambda (k4f60@val) (if (symbol? k4f60@val) (ungensym k4f60@val) k4f60@val)) ((record-accessor k4f5a@rtd k4f5b@i) k4f5c@x)))) ((letrec ((k4f50@loop (lambda (k4f52@ret k4f53@rtd) (if k4f53@rtd (k4f50@loop (append k4f52@ret (k4ed1@map-with-index (lambda (k4f56@i k4f57@field) (cons k4f57@field (k4f4f@ref k4f53@rtd k4f56@i k4f4c@r))) (vector->list (record-type-field-names k4f53@rtd)))) (record-type-parent k4f53@rtd)) k4f52@ret)))) k4f50@loop) '() (record-rtd k4f4c@r)))) '#f))) (set! k4ed1@map-with-index (lambda (k4f62@proc k4f63@lst) ((letrec ((k4f66@loop (lambda (k4f68@i k4f69@lst k4f6a@ret) (if (null? k4f69@lst) (reverse k4f6a@ret) (k4f66@loop (+ k4f68@i '1) (cdr k4f69@lst) (cons (k4f62@proc k4f68@i (car k4f69@lst)) k4f6a@ret)))))) k4f66@loop) '0 k4f63@lst '()))) (set! k4ed3@repl (lambda k4f6e@x ((lambda (k4f71@rec) (begin (set! k4f71@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (k4f74@k4f72) (lambda () (with-exception-handler (lambda (k4f76@e) ((call/cc (lambda (k4f78@k4f73) (k4f74@k4f72 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? k4f76@e) (k4ecd@condition-printer k4f76@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" k4f76@e))) (k4f78@k4f73 (lambda () (raise-continuable k4f76@e)))))))))) (lambda () ((letrec ((k4f7a@loop (lambda (k4f7c@line k4f7d@accum) ((lambda (k4f81@parentheses-ok? k4f83@eval-string-print) (begin (set! k4f81@parentheses-ok? (lambda (k4f88@text) ((letrec ((k4f8a@loop (lambda (k4f8c@chars k4f8d@p0 k4f8e@p1) (if (null? k4f8c@chars) (= '0 k4f8d@p0 k4f8e@p1) ((lambda (k4f92@t) (if (memv k4f92@t '(#\()) (k4f8a@loop (cdr k4f8c@chars) (+ k4f8d@p0 '1) k4f8e@p1) (if (memv k4f92@t '(#\))) (k4f8a@loop (cdr k4f8c@chars) (- k4f8d@p0 '1) k4f8e@p1) (if (memv k4f92@t '(#\[)) (k4f8a@loop (cdr k4f8c@chars) k4f8d@p0 (+ k4f8e@p1 '1)) (if (memv k4f92@t '(#\])) (k4f8a@loop (cdr k4f8c@chars) k4f8d@p0 (- k4f8e@p1 '1)) (k4f8a@loop (cdr k4f8c@chars) k4f8d@p0 k4f8e@p1)))))) (car k4f8c@chars)))))) k4f8a@loop) (string->list k4f88@text) '0 '0))) (set! k4f83@eval-string-print (lambda (k4f86@text) (if (not (or (string=? '"\n" k4f86@text) (= '0 (string-length k4f86@text)))) (write (k4ee1@eval-top-level (call-with-port (open-string-input-port k4f86@text) read))) (void)))) (if (eof-object? k4f7c@line) (begin (k4f83@eval-string-print k4f7d@accum) (exit)) ((lambda (k4f84@current) (if (k4f81@parentheses-ok? k4f84@current) (k4f83@eval-string-print k4f84@current) (k4f7a@loop (get-line (current-input-port)) k4f84@current))) (string-append k4f7d@accum k4f7c@line))))) '#f '#f)))) k4f7a@loop) (get-line (current-input-port)) '""))))))) (newline) (k4f71@rec)))) (k4f71@rec))) '#f))) (set! k4ed5@trace-printer (k2962@k285e@make-parameter write)) (set! k4ed7@command-line (k2962@k285e@make-parameter (get-command-line))) (set! k4ed9@local-library-path (lambda (k4f94@filename) (k2c1b@k2a57@library-path))) (set! k4edb@load/args (lambda (k4f96@filename . k4f98@args) (begin (apply k4eeb@load-r6rs-top-level k4f96@filename 'load k4f98@args) (void)))) (set! k4edd@load (lambda (k4f9a@filename) (begin (apply k4eeb@load-r6rs-top-level k4f9a@filename 'load (k4ed7@command-line)) (void)))) (set! k4edf@ironscheme-build (lambda () (k4edd@load '"ironscheme-buildscript.ss"))) (set! k4ee1@eval-top-level (lambda (k4f9c@x) (k4aec@k30c7@eval k4f9c@x (k4b02@k30f3@interaction-environment)))) (set! k4ee3@compile-system-libraries (lambda () (k4ee1@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! k4ee5@compile (lambda (k4f9e@filename) (k4eeb@load-r6rs-top-level k4f9e@filename 'compile))) (set! k4ee7@compile->closure (lambda (k4fa0@filename) (k4eeb@load-r6rs-top-level k4fa0@filename 'closure))) (set! k4ee9@pre-compile-r6rs-file (lambda (k4fa2@filename) (k4eeb@load-r6rs-top-level k4fa2@filename 'compile))) (set! k4eeb@load-r6rs-top-level (lambda (k4fa4@filename k4fa5@how . k4fa8@args) ((lambda (k4fae@k4fab k4faf@k4fad) ((lambda (k4fb2@swap) (dynamic-wind k4fb2@swap (lambda () ((lambda (k4fb4@x*) ((lambda (k4fb6@t) (if (memv k4fb6@t '(closure)) (k4b01@k30f1@pre-compile-r6rs-top-level k4fb4@x*) (if (memv k4fb6@t '(load)) ((lambda (k4fbc@k4fb9 k4fbd@k4fbb) ((lambda (k4fc0@swap) (dynamic-wind k4fc0@swap (lambda () ((k4b00@k30ef@compile-r6rs-top-level k4fb4@x*))) k4fc0@swap)) (lambda () ((lambda (k4fc2@t) (begin (k4fbc@k4fb9 k4fbd@k4fbb) (set! k4fbd@k4fbb k4fc2@t))) (k4fbc@k4fb9))))) k4ed7@command-line (cons k4fa4@filename (car k4fa8@args))) (if (memv k4fb6@t '(compile)) (begin (k4b00@k30ef@compile-r6rs-top-level k4fb4@x*) (k2c1f@k2a5f@serialize-all k295d@k2854@serialize-library k29b8@k2971@compile-core-expr)) (if '#f '#f (void)))))) k4fa5@how)) (with-input-from-file k4fa4@filename (lambda () ((letrec ((k4fc4@f (lambda () ((lambda (k4fc6@x) (if (eof-object? k4fc6@x) '() (cons k4fc6@x (k4fc4@f)))) (k2955@k2844@read-annotated))))) k4fc4@f)))))) k4fb2@swap)) (lambda () ((lambda (k4fc8@t) (begin (k4fae@k4fab k4faf@k4fad) (set! k4faf@k4fad k4fc8@t))) (k4fae@k4fab))))) k2c1b@k2a57@library-path (k4ed9@local-library-path k4fa4@filename)))) (set! k4eed@load-r6rs-top-level-sexp (lambda (k4fca@import-spec k4fcb@thunk) ((lambda (k4fd2@k4fcf k4fd3@k4fd1) ((lambda (k4fd6@swap) (dynamic-wind k4fd6@swap (lambda () ((lambda (k4fdc@k4fd9 k4fdd@k4fdb) ((lambda (k4fe0@swap) (dynamic-wind k4fe0@swap (lambda () ((k4b00@k30ef@compile-r6rs-top-level (list (cons 'import k4fca@import-spec) (list k4fcb@thunk))))) k4fe0@swap)) (lambda () ((lambda (k4fe2@t) (begin (k4fdc@k4fd9 k4fdd@k4fdb) (set! k4fdd@k4fdb k4fe2@t))) (k4fdc@k4fd9))))) k4ed7@command-line '())) k4fd6@swap)) (lambda () ((lambda (k4fe4@t) (begin (k4fd2@k4fcf k4fd3@k4fd1) (set! k4fd3@k4fd1 k4fe4@t))) (k4fd2@k4fcf))))) k2c1b@k2a57@library-path (k4ed9@local-library-path '"")))) (begin (set! k4ffa@k4eed@load-r6rs-top-level-sexp k4eed@load-r6rs-top-level-sexp) (set! k4ff9@k4eeb@load-r6rs-top-level k4eeb@load-r6rs-top-level) (set! k4ff8@k4ee9@pre-compile-r6rs-file k4ee9@pre-compile-r6rs-file) (set! k4ff7@k4ee7@compile->closure k4ee7@compile->closure) (set! k4ff6@k4ee5@compile k4ee5@compile) (set! k4ff5@k4ee3@compile-system-libraries k4ee3@compile-system-libraries) (set! k4ff4@k4ee1@eval-top-level k4ee1@eval-top-level) (set! k4ff3@k4edf@ironscheme-build k4edf@ironscheme-build) (set! k4ff2@k4edd@load k4edd@load) (set! k4ff1@k4edb@load/args k4edb@load/args) (set! k4ff0@k4ed9@local-library-path k4ed9@local-library-path) (set! k4fef@k4ed7@command-line k4ed7@command-line) (set! k4fee@k4ed5@trace-printer k4ed5@trace-printer) (set! k4fed@k4ed3@repl k4ed3@repl) (set! k4fec@k4ed1@map-with-index k4ed1@map-with-index) (set! k4feb@k4ecf@record->field-alist k4ecf@record->field-alist) (set! k4fea@k4ecd@condition-printer k4ecd@condition-printer) (set! k4fe9@k4ecb@rpad k4ecb@rpad) (set! k4fe8@k4ec9@for-each-with-index k4ec9@for-each-with-index) (set! k4fe7@k4ec7@parse-and-add-library-path k4ec7@parse-and-add-library-path) (set! k4fe6@k4ec5@add-library-path! k4ec5@add-library-path!) (k2c20@k2a61@current-precompiled-library-loader k295e@k2856@load-serialized-library) (set-symbol-value! 'load k4edd@load) (set-symbol-value! 'pre-compile-r6rs-file k4ee9@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs k4ee1@eval-top-level) (set-symbol-value! 'int-env-syms k4ae3@k30b5@interaction-environment-symbols) (set-symbol-value! 'expanded2core k29b7@k296f@expanded->core) (set-symbol-value! 'trace-printer k4ed5@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (k4eee@c) (condition (k4e22@k4c2c@make-non-continuable-violation) (k4e18@k4c13@make-who-condition 'raise) (k4ddc@k4b74@make-message-condition '"returned from non-continuable exception") (k4e0e@k4bf8@make-irritants-condition (list k4eee@c))))) (k4ec7@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (k4ec7@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (k4ec5@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (k4ec5@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (k4ec5@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) ((lambda (k4ef0@prefix) (k2c1c@k2a59@library-extensions (k4ef0@prefix '".mosh" (k2c1c@k2a59@library-extensions)))) (lambda (k4ef2@ext k4ef3@ls) (append (map (lambda (k4ef6@x) (string-append k4ef2@ext k4ef6@x)) k4ef3@ls) k4ef3@ls))) ((lambda (k4ef8@args k4ef9@port) ((lambda (k4efd@ref) (begin (set! k4efd@ref (lambda (k4f08@rtd k4f09@i k4f0a@x) ((lambda (k4f0e@val) (if (symbol? k4f0e@val) (ungensym k4f0e@val) k4f0e@val)) ((record-accessor k4f08@rtd k4f09@i) k4f0a@x)))) (with-exception-handler (lambda (k4efe@c) (if (condition? k4efe@c) (k4ecd@condition-printer k4efe@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" k4efe@c))) (lambda () (if ((call/cc (lambda (k4f02@k4f00) (lambda () (with-exception-handler (lambda (k4f04@c) ((call/cc (lambda (k4f06@k4f01) (k4f02@k4f00 (lambda () (if '#t '#f (k4f06@k4f01 (lambda () (raise-continuable k4f04@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (k4eed@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? k4ef8@args) (k4ed3@repl) (k4eeb@load-r6rs-top-level (car k4ef8@args) 'load (cdr k4ef8@args)))))))) '#f)) (k4ed7@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
