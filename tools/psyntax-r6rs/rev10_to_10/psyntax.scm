;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! lT580@library-file-path->cache-path (unspecified)) (set! lT582@read-annotated (unspecified)) (set! lT584@annotation-stripped (unspecified)) (set! lT586@annotation? (unspecified)) (set! lT588@annotation-source (unspecified)) (set! lT58a@annotation-expression (unspecified)) (set! lT58c@scm->fasl (unspecified)) (set! lT58e@fasl-save (unspecified)) (set! lT590@fasl-load (unspecified)) (set! lT592@serialize-library (unspecified)) (set! lT594@load-serialized-library (unspecified)) (set! lT596@make-record-printer (unspecified)) (set! lT598@compile-core (unspecified)) (set! lT59a@read-library-source-file (unspecified)) (set! lT59c@make-parameter (unspecified)) (set! lT59e@mosh-cache-dir (unspecified)) (set! lT634@file-options-spec (unspecified)) (begin (set! lT580@library-file-path->cache-path (lambda (lT635@x) (call-with-values (lambda () (open-string-output-port)) (lambda (lT63b@lT638 lT63c@lT63a) (let ((lT63f@extract lT63c@lT63a) (lT640@p lT63b@lT638)) (let ((lT644@display-hex '#f)) (begin (set! lT644@display-hex (lambda (lT64d@n) (if (<= '0 lT64d@n '9) (display lT64d@n lT640@p) (display (integer->char (+ (char->integer '#\a) (- lT64d@n '10))) lT640@p)))) (begin (let lT647@f ((lT645@ls (string-split lT635@x '#\/))) (if (not (null? lT645@ls)) (begin (display '"_" lT640@p) (for-each (lambda (lT649@c) (if (or (char<=? '#\a lT649@c '#\z) (char<=? '#\A lT649@c '#\Z) (char<=? '#\0 lT649@c '#\9) (memv lT649@c '(#\- #\. #\_ #\~))) (display lT649@c lT640@p) (begin (display '"%" lT640@p) (let ((lT64b@n (char->integer lT649@c))) (begin (lT644@display-hex (quotient lT64b@n '16)) (lT644@display-hex (remainder lT64b@n '16))))))) (string->list (car lT645@ls))) (lT647@f (cdr lT645@ls))) (void))) (lT63f@extract))))))))) (set! lT6af@lT580@library-file-path->cache-path lT580@library-file-path->cache-path)) (begin (set! lT582@read-annotated read) (set! lT6b0@lT582@read-annotated lT582@read-annotated)) (begin (set! lT584@annotation-stripped (lambda (lT64f@x) (lT58a@annotation-expression lT64f@x))) (set! lT6b1@lT584@annotation-stripped lT584@annotation-stripped)) (begin (set! lT586@annotation? (lambda (lT651@x) (source-info lT651@x))) (set! lT6b2@lT586@annotation? lT586@annotation?)) (begin (set! lT588@annotation-source (lambda (lT653@x) (source-info lT653@x))) (set! lT6b3@lT588@annotation-source lT588@annotation-source)) (begin (set! lT58a@annotation-expression (lambda (lT655@x) (if (pair? lT655@x) (cons (car lT655@x) (cdr lT655@x)) (display '"line:46\n")))) (set! lT6b4@lT58a@annotation-expression lT58a@annotation-expression)) (begin (set! lT58c@scm->fasl (lambda (lT657@filename) (string-append (lT59e@mosh-cache-dir) '"/" (lT580@library-file-path->cache-path lT657@filename) '".mosh-fasl"))) (set! lT6b5@lT58c@scm->fasl lT58c@scm->fasl)) (begin (set! lT58e@fasl-save (lambda (lT659@filename lT65a@obj) (call-with-port (open-file-output-port lT659@filename) (lambda (lT65d@port) ((symbol-value 'fasl-write!) lT65a@obj lT65d@port))))) (set! lT6b6@lT58e@fasl-save lT58e@fasl-save)) (begin (set! lT590@fasl-load (lambda (lT65f@filename) (call-with-port (open-file-input-port lT65f@filename) (symbol-value 'fasl-read!)))) (set! lT6b7@lT590@fasl-load lT590@fasl-load)) (begin (set! lT592@serialize-library (lambda (lT661@filename lT662@obj) (begin (let ((lT665@expanded2core (symbol-value 'expanded2core))) (let ((lT667@compile (symbol-value 'compile-w/o-halt))) (let ((lT669@code lT662@obj)) (let ((lT66b@pivot (cddddr (cddddr lT669@code)))) (let ((lT66d@visit (lT667@compile (lT665@expanded2core (car lT66b@pivot))))) (begin (set-car! lT66b@pivot lT66d@visit) (let ((lT66f@pivot (cdr lT66b@pivot))) (let ((lT671@invoke (lT667@compile (lT665@expanded2core (car lT66f@pivot))))) (set-car! lT66f@pivot lT671@invoke))))))))) (let ((lT673@fasl-file (lT58c@scm->fasl lT661@filename))) (begin (if (file-exists? lT673@fasl-file) (delete-file lT673@fasl-file) (void)) ((call/cc (lambda (lT677@lT675) (lambda () (with-exception-handler (lambda (lT679@c) ((call/cc (lambda (lT67b@lT676) (lT677@lT675 (lambda () (if '#t (begin (format (current-error-port) '"Warning:serialize-library failed " lT661@filename) (if (file-exists? lT673@fasl-file) (delete-file lT673@fasl-file) (void)) '#f) (lT67b@lT676 (lambda () (raise-continuable lT679@c)))))))))) (lambda () (lT58e@fasl-save lT673@fasl-file lT662@obj)))))))))))) (set! lT6b8@lT592@serialize-library lT592@serialize-library)) (begin (set! lT594@load-serialized-library (lambda (lT67d@filename lT67e@obj) (and (lT59e@mosh-cache-dir) (let ((lT681@fasl-file (lT58c@scm->fasl lT67d@filename))) (if (and (file-exists? lT681@fasl-file) ((symbol-value 'file-newer?) lT681@fasl-file lT67d@filename)) (let ((lT683@expanded2core (symbol-value 'expanded2core))) (let ((lT685@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((lT687@code (lT590@fasl-load lT681@fasl-file))) (let ((lT689@pivot (cddddr (cddddr lT687@code)))) (let ((lT68b@visit (car lT689@pivot))) (let ((lT68d@visit-proc (lambda () (lT685@eval-compiled-core lT68b@visit)))) (begin (set-car! lT689@pivot lT68d@visit-proc) (let ((lT68f@pivot (cdr lT689@pivot))) (let ((lT691@invoke (car lT68f@pivot))) (begin (set-car! lT68f@pivot (lambda () (lT685@eval-compiled-core lT691@invoke))) (apply lT67e@obj lT687@code))))))))))) '#f))))) (set! lT6b9@lT594@load-serialized-library lT594@load-serialized-library)) (begin (set! lT596@make-record-printer (lambda (lT693@name lT694@printer) (lambda lT697@x (begin (display '"record printer") (for-each display lT697@x))))) (set! lT6ba@lT596@make-record-printer lT596@make-record-printer)) (begin (set! lT598@compile-core (lambda lT699@x (apply error 'comile-core '"not implementated" lT699@x))) (set! lT6bb@lT598@compile-core lT598@compile-core)) (begin (set! lT59a@read-library-source-file (lambda (lT69b@file-name) (with-input-from-file lT69b@file-name lT582@read-annotated))) (set! lT6bc@lT59a@read-library-source-file lT59a@read-library-source-file)) (begin (set! lT59c@make-parameter (lambda lT6ab (let ((lT6ac (length lT6ab))) (if (= lT6ac '1) (apply (lambda (lT69d@x) (lT59c@make-parameter lT69d@x (lambda (lT69f@x) lT69f@x))) lT6ab) (if (= lT6ac '2) (apply (lambda (lT6a1@x lT6a2@fender) (let ((lT6a5@x (lT6a2@fender lT6a1@x))) (lambda lT6a9 (let ((lT6aa (length lT6a9))) (if (= lT6aa '0) (apply (lambda () lT6a5@x) lT6a9) (if (= lT6aa '1) (apply (lambda (lT6a7@v) (set! lT6a5@x (lT6a2@fender lT6a7@v))) lT6a9) (error 'apply '"invalid arg count"))))))) lT6ab) (error 'apply '"invalid arg count")))))) (set! lT6bd@lT59c@make-parameter lT59c@make-parameter)) (begin (set! lT59e@mosh-cache-dir (lT59c@make-parameter '#f)) (set! lT6be@lT59e@mosh-cache-dir lT59e@mosh-cache-dir)) (begin (set! lT634@file-options-spec (lambda (lT6ad@x) lT6ad@x)) (set! lT6bf@lT634@file-options-spec lT634@file-options-spec)) (void))
(begin (set! lT6c5@current-primitive-locations (unspecified)) (set! lT6c7@mutable? (unspecified)) (set! lT6c9@rewriter (unspecified)) (set! lT6cb@expanded->core (unspecified)) (set! lT6cd@compile-core-expr (unspecified)) (set! lT6cf@pretty-print (unspecified)) (set! lT6d1@compile-core-expr-to-port (unspecified)) (begin (set! lT6c5@current-primitive-locations (lT6bd@lT59c@make-parameter (lambda (lT6d2@x) '#f) (lambda (lT6d4@p) lT6d4@p))) (set! lT710@lT6c5@current-primitive-locations lT6c5@current-primitive-locations)) (begin (set! lT6c7@mutable? (lambda (lT6d6@x) (or (pair? lT6d6@x) (vector? lT6d6@x) (hashtable? lT6d6@x)))) (set! lT711@lT6c7@mutable? lT6c7@mutable?)) (begin (set! lT6c9@rewriter (lambda (lT6d8@quote-hack?) (let ((lT6db@f '#f)) (begin (set! lT6db@f (lambda (lT6dc@x) (if (pair? lT6dc@x) (let ((lT6de@t (car lT6dc@x))) (if (memv lT6de@t '(quote)) (if (and lT6d8@quote-hack? (lT6c7@mutable? (cadr lT6dc@x))) (let ((lT6e0@g (gensym))) (begin (set-symbol-value! lT6e0@g (cadr lT6dc@x)) lT6e0@g)) lT6dc@x) (if (memv lT6de@t '(case-lambda)) (cons 'case-lambda (map (lambda (lT6e2@x) (cons (car lT6e2@x) (map lT6db@f (cdr lT6e2@x)))) (cdr lT6dc@x))) (if (memv lT6de@t '(lambda)) (cons* 'lambda (cadr lT6dc@x) (map lT6db@f (cddr lT6dc@x))) (if (memv lT6de@t '(letrec)) (let ((lT6e4@bindings (cadr lT6dc@x)) (lT6e5@body* (cddr lT6dc@x))) (let ((lT6e8@lhs* (map car lT6e4@bindings)) (lT6e9@rhs* (map cadr lT6e4@bindings))) (cons* 'letrec (map list lT6e8@lhs* (map lT6db@f lT6e9@rhs*)) (map lT6db@f lT6e5@body*)))) (if (memv lT6de@t '(letrec*)) (let ((lT6ec@bindings (cadr lT6dc@x)) (lT6ed@body* (cddr lT6dc@x))) (let ((lT6f0@lhs* (map car lT6ec@bindings)) (lT6f1@rhs* (map cadr lT6ec@bindings))) (cons* 'letrec* (map list lT6f0@lhs* (map lT6db@f lT6f1@rhs*)) (map lT6db@f lT6ed@body*)))) (if (memv lT6de@t '(library-letrec*)) (let ((lT6f4@name (cadr lT6dc@x)) (lT6f5@x (cdr lT6dc@x))) (let ((lT6f8@bindings (cadr lT6f5@x)) (lT6f9@body* (cddr lT6f5@x))) (let ((lT6fc@lhs* (map car lT6f8@bindings)) (lT6fd@lhs** (map cadr lT6f8@bindings)) (lT6fe@rhs* (map caddr lT6f8@bindings))) (cons* 'library-letrec* lT6f4@name (map list lT6fc@lhs* lT6fd@lhs** (map lT6db@f lT6fe@rhs*)) (map lT6db@f lT6f9@body*))))) (if (memv lT6de@t '(begin)) (cons 'begin (map lT6db@f (cdr lT6dc@x))) (if (memv lT6de@t '(set!)) (list 'set! (cadr lT6dc@x) (lT6db@f (caddr lT6dc@x))) (if (memv lT6de@t '(primitive)) (let ((lT702@op (cadr lT6dc@x))) (let ((lT704@t ((lT6c5@current-primitive-locations) lT702@op))) (if lT704@t ((lambda (lT706@loc) lT706@loc) lT704@t) lT702@op))) (if (memv lT6de@t '(define)) lT6dc@x (if (list? lT6dc@x) (map lT6db@f lT6dc@x) (error 'rewrite '"invalid form ~s ~s" lT6dc@x (list? lT6dc@x)))))))))))))) lT6dc@x))) lT6db@f)))) (set! lT712@lT6c9@rewriter lT6c9@rewriter)) (begin (set! lT6cb@expanded->core (lambda (lT708@x) ((lT6c9@rewriter '#f) lT708@x))) (set! lT713@lT6cb@expanded->core lT6cb@expanded->core)) (begin (set! lT6cd@compile-core-expr (lambda (lT70a@x) ((lT6c9@rewriter '#f) lT70a@x))) (set! lT714@lT6cd@compile-core-expr lT6cd@compile-core-expr)) (begin (set! lT6cf@pretty-print write) (set! lT715@lT6cf@pretty-print lT6cf@pretty-print)) (begin (set! lT6d1@compile-core-expr-to-port (lambda (lT70c@x lT70d@p) (lT6cf@pretty-print ((lT6c9@rewriter '#f) lT70c@x) lT70d@p))) (set! lT716@lT6d1@compile-core-expr-to-port lT6d1@compile-core-expr-to-port)) (void))
(begin (void))
(begin (set! lT765@make-collection (unspecified)) (set! lT767@current-library-collection (unspecified)) (set! lT769@rp (unspecified)) (set! lT773@library? (unspecified)) (set! lT775@library-id (unspecified)) (set! lT777@set-library-id! (unspecified)) (set! lT779@library-name (unspecified)) (set! lT77b@set-library-name! (unspecified)) (set! lT77d@library-version (unspecified)) (set! lT77f@set-library-version! (unspecified)) (set! lT781@library-imp* (unspecified)) (set! lT783@set-library-imp*! (unspecified)) (set! lT785@library-vis* (unspecified)) (set! lT787@set-library-vis*! (unspecified)) (set! lT789@library-inv* (unspecified)) (set! lT78b@set-library-inv*! (unspecified)) (set! lT78d@library-subst (unspecified)) (set! lT78f@set-library-subst! (unspecified)) (set! lT791@library-env (unspecified)) (set! lT793@set-library-env! (unspecified)) (set! lT795@library-visit-state (unspecified)) (set! lT797@set-library-visit-state! (unspecified)) (set! lT799@library-invoke-state (unspecified)) (set! lT79b@set-library-invoke-state! (unspecified)) (set! lT79d@library-visit-code (unspecified)) (set! lT79f@set-library-visit-code! (unspecified)) (set! lT7a1@library-invoke-code (unspecified)) (set! lT7a3@set-library-invoke-code! (unspecified)) (set! lT7a5@library-visible? (unspecified)) (set! lT7a7@set-library-visible?! (unspecified)) (set! lT7a9@library-source-file-name (unspecified)) (set! lT7ab@set-library-source-file-name! (unspecified)) (set! lT7ad@dummy (unspecified)) (set! lT7af@find-dependencies (unspecified)) (set! lT7b1@find-library-by (unspecified)) (set! lT7b3@library-path (unspecified)) (set! lT7b5@library-extensions (unspecified)) (set! lT7b7@library-name->file-name (unspecified)) (set! lT7b9@file-locator (unspecified)) (set! lT7bb@serialize-all (unspecified)) (set! lT7bd@current-precompiled-library-loader (unspecified)) (set! lT7bf@try-load-from-file (unspecified)) (set! lT7c1@library-loader (unspecified)) (set! lT7c3@current-library-expander (unspecified)) (set! lT7c5@external-pending-libraries (unspecified)) (set! lT7c7@find-external-library (unspecified)) (set! lT7c9@find-library-by-name (unspecified)) (set! lT7cb@library-exists? (unspecified)) (set! lT7cd@find-library-by-spec/die (unspecified)) (set! lT7cf@label->binding-table (unspecified)) (set! lT7d1@install-library-record (unspecified)) (set! lT7d3@install-library (unspecified)) (set! lT7d5@imported-label->binding (unspecified)) (set! lT7d7@invoke-library (unspecified)) (set! lT7d9@visit-library (unspecified)) (set! lT7db@invoke-library-by-spec (unspecified)) (set! lT7dd@installed-libraries (unspecified)) (set! lT7df@library-spec (unspecified)) (begin (set! lT765@make-collection (lambda () (let ((lT7e0@set '())) (let ((lT7e3@set-cons '#f)) (begin (set! lT7e3@set-cons (lambda (lT7e8@x lT7e9@ls) (if (memq lT7e8@x lT7e9@ls) lT7e9@ls (cons lT7e8@x lT7e9@ls)))) (lambda lT7e6 (let ((lT7e7 (length lT7e6))) (if (= lT7e7 '0) (apply (lambda () lT7e0@set) lT7e6) (if (= lT7e7 '1) (apply (lambda (lT7e4@x) (set! lT7e0@set (lT7e3@set-cons lT7e4@x lT7e0@set))) lT7e6) (error 'apply '"invalid arg count")))))))))) (set! lT954@lT765@make-collection lT765@make-collection)) (begin (set! lT767@current-library-collection (lT6bd@lT59c@make-parameter (lT765@make-collection) (lambda (lT7ec@x) (begin (if (not (procedure? lT7ec@x)) (assertion-violation 'current-library-collection '"not a procedure" lT7ec@x) (void)) lT7ec@x)))) (set! lT955@lT767@current-library-collection lT767@current-library-collection)) (begin (set! lT769@rp (lT6ba@lT596@make-record-printer 'library (lambda (lT7ee@x lT7ef@p lT7f0@wr) (begin (if (not (lT773@library? lT7ee@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (lT77d@library-version lT7ee@x)) (lT779@library-name lT7ee@x) (append (lT779@library-name lT7ee@x) (list (lT77d@library-version lT7ee@x))))) lT7ef@p))))) (set! lT956@lT769@rp lT769@rp)) (begin (set! lT773@library? (lambda (lT7f4@x) (and (simple-struct? lT7f4@x) (eq? (simple-struct-name lT7f4@x) 'library)))) (set! lT957@lT773@library? lT773@library?)) (begin (set! lT775@library-id (lambda (lT7f6@x) (simple-struct-ref lT7f6@x '0))) (set! lT958@lT775@library-id lT775@library-id)) (begin (set! lT777@set-library-id! (lambda (lT7f8@x lT7f9@val) (simple-struct-set! lT7f8@x '0 lT7f9@val))) (set! lT959@lT777@set-library-id! lT777@set-library-id!)) (begin (set! lT779@library-name (lambda (lT7fc@x) (simple-struct-ref lT7fc@x '1))) (set! lT95a@lT779@library-name lT779@library-name)) (begin (set! lT77b@set-library-name! (lambda (lT7fe@x lT7ff@val) (simple-struct-set! lT7fe@x '1 lT7ff@val))) (set! lT95b@lT77b@set-library-name! lT77b@set-library-name!)) (begin (set! lT77d@library-version (lambda (lT802@x) (simple-struct-ref lT802@x '2))) (set! lT95c@lT77d@library-version lT77d@library-version)) (begin (set! lT77f@set-library-version! (lambda (lT804@x lT805@val) (simple-struct-set! lT804@x '2 lT805@val))) (set! lT95d@lT77f@set-library-version! lT77f@set-library-version!)) (begin (set! lT781@library-imp* (lambda (lT808@x) (simple-struct-ref lT808@x '3))) (set! lT95e@lT781@library-imp* lT781@library-imp*)) (begin (set! lT783@set-library-imp*! (lambda (lT80a@x lT80b@val) (simple-struct-set! lT80a@x '3 lT80b@val))) (set! lT95f@lT783@set-library-imp*! lT783@set-library-imp*!)) (begin (set! lT785@library-vis* (lambda (lT80e@x) (simple-struct-ref lT80e@x '4))) (set! lT960@lT785@library-vis* lT785@library-vis*)) (begin (set! lT787@set-library-vis*! (lambda (lT810@x lT811@val) (simple-struct-set! lT810@x '4 lT811@val))) (set! lT961@lT787@set-library-vis*! lT787@set-library-vis*!)) (begin (set! lT789@library-inv* (lambda (lT814@x) (simple-struct-ref lT814@x '5))) (set! lT962@lT789@library-inv* lT789@library-inv*)) (begin (set! lT78b@set-library-inv*! (lambda (lT816@x lT817@val) (simple-struct-set! lT816@x '5 lT817@val))) (set! lT963@lT78b@set-library-inv*! lT78b@set-library-inv*!)) (begin (set! lT78d@library-subst (lambda (lT81a@x) (simple-struct-ref lT81a@x '6))) (set! lT964@lT78d@library-subst lT78d@library-subst)) (begin (set! lT78f@set-library-subst! (lambda (lT81c@x lT81d@val) (simple-struct-set! lT81c@x '6 lT81d@val))) (set! lT965@lT78f@set-library-subst! lT78f@set-library-subst!)) (begin (set! lT791@library-env (lambda (lT820@x) (simple-struct-ref lT820@x '7))) (set! lT966@lT791@library-env lT791@library-env)) (begin (set! lT793@set-library-env! (lambda (lT822@x lT823@val) (simple-struct-set! lT822@x '7 lT823@val))) (set! lT967@lT793@set-library-env! lT793@set-library-env!)) (begin (set! lT795@library-visit-state (lambda (lT826@x) (simple-struct-ref lT826@x '8))) (set! lT968@lT795@library-visit-state lT795@library-visit-state)) (begin (set! lT797@set-library-visit-state! (lambda (lT828@x lT829@val) (simple-struct-set! lT828@x '8 lT829@val))) (set! lT969@lT797@set-library-visit-state! lT797@set-library-visit-state!)) (begin (set! lT799@library-invoke-state (lambda (lT82c@x) (simple-struct-ref lT82c@x '9))) (set! lT96a@lT799@library-invoke-state lT799@library-invoke-state)) (begin (set! lT79b@set-library-invoke-state! (lambda (lT82e@x lT82f@val) (simple-struct-set! lT82e@x '9 lT82f@val))) (set! lT96b@lT79b@set-library-invoke-state! lT79b@set-library-invoke-state!)) (begin (set! lT79d@library-visit-code (lambda (lT832@x) (simple-struct-ref lT832@x '10))) (set! lT96c@lT79d@library-visit-code lT79d@library-visit-code)) (begin (set! lT79f@set-library-visit-code! (lambda (lT834@x lT835@val) (simple-struct-set! lT834@x '10 lT835@val))) (set! lT96d@lT79f@set-library-visit-code! lT79f@set-library-visit-code!)) (begin (set! lT7a1@library-invoke-code (lambda (lT838@x) (simple-struct-ref lT838@x '11))) (set! lT96e@lT7a1@library-invoke-code lT7a1@library-invoke-code)) (begin (set! lT7a3@set-library-invoke-code! (lambda (lT83a@x lT83b@val) (simple-struct-set! lT83a@x '11 lT83b@val))) (set! lT96f@lT7a3@set-library-invoke-code! lT7a3@set-library-invoke-code!)) (begin (set! lT7a5@library-visible? (lambda (lT83e@x) (simple-struct-ref lT83e@x '12))) (set! lT970@lT7a5@library-visible? lT7a5@library-visible?)) (begin (set! lT7a7@set-library-visible?! (lambda (lT840@x lT841@val) (simple-struct-set! lT840@x '12 lT841@val))) (set! lT971@lT7a7@set-library-visible?! lT7a7@set-library-visible?!)) (begin (set! lT7a9@library-source-file-name (lambda (lT844@x) (simple-struct-ref lT844@x '13))) (set! lT972@lT7a9@library-source-file-name lT7a9@library-source-file-name)) (begin (set! lT7ab@set-library-source-file-name! (lambda (lT846@x lT847@val) (simple-struct-set! lT846@x '13 lT847@val))) (set! lT973@lT7ab@set-library-source-file-name! lT7ab@set-library-source-file-name!)) (begin (set! lT7ad@dummy '3) (set! lT974@lT7ad@dummy lT7ad@dummy)) (begin (set! lT7af@find-dependencies (lambda (lT84a@ls) (if (null? lT84a@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! lT975@lT7af@find-dependencies lT7af@find-dependencies)) (begin (set! lT7b1@find-library-by (lambda (lT84c@pred) (let lT850@f ((lT84e@ls ((lT767@current-library-collection)))) (if (null? lT84e@ls) '#f (if (lT84c@pred (car lT84e@ls)) (car lT84e@ls) (lT850@f (cdr lT84e@ls))))))) (set! lT976@lT7b1@find-library-by lT7b1@find-library-by)) (begin (set! lT7b3@library-path (lT6bd@lT59c@make-parameter '(".") (lambda (lT852@x) (if (and (list? lT852@x) (for-all string? lT852@x)) (map (lambda (lT854@x) lT854@x) lT852@x) (assertion-violation 'library-path '"not a list of strings" lT852@x))))) (set! lT977@lT7b3@library-path lT7b3@library-path)) (begin (set! lT7b5@library-extensions (lT6bd@lT59c@make-parameter '(".sls" ".ss" ".scm") (lambda (lT856@x) (if (and (list? lT856@x) (for-all string? lT856@x)) (map (lambda (lT858@x) lT858@x) lT856@x) (assertion-violation 'library-extensions '"not a list of strings" lT856@x))))) (set! lT978@lT7b5@library-extensions lT7b5@library-extensions)) (begin (set! lT7b7@library-name->file-name (lambda (lT85a@x) (call-with-values (lambda () (open-string-output-port)) (lambda (lT860@lT85d lT861@lT85f) (let ((lT864@extract lT861@lT85f) (lT865@p lT860@lT85d)) (let ((lT869@display-hex '#f)) (begin (set! lT869@display-hex (lambda (lT872@n) (if (<= '0 lT872@n '9) (display lT872@n lT865@p) (display (integer->char (+ (char->integer '#\a) (- lT872@n '10))) lT865@p)))) (begin (let lT86c@f ((lT86a@ls lT85a@x)) (if (not (null? lT86a@ls)) (begin (display '"/" lT865@p) (for-each (lambda (lT86e@c) (if (or (char<=? '#\a lT86e@c '#\z) (char<=? '#\A lT86e@c '#\Z) (char<=? '#\0 lT86e@c '#\9) (memv lT86e@c '(#\- #\. #\_ #\~))) (display lT86e@c lT865@p) (begin (display '"%" lT865@p) (let ((lT870@n (char->integer lT86e@c))) (begin (lT869@display-hex (quotient lT870@n '16)) (lT869@display-hex (remainder lT870@n '16))))))) (string->list (symbol->string (car lT86a@ls)))) (lT86c@f (cdr lT86a@ls))) (void))) (lT864@extract))))))))) (set! lT979@lT7b7@library-name->file-name lT7b7@library-name->file-name)) (begin (set! lT7b9@file-locator (lT6bd@lT59c@make-parameter (lambda (lT874@x) (let ((lT876@str (lT7b7@library-name->file-name lT874@x))) (let lT87e@f ((lT878@ls (lT7b3@library-path)) (lT879@exts (lT7b5@library-extensions)) (lT87a@failed-list '())) (if (null? lT878@ls) (let ((lT888@lT883 '#f) (lT88a@lT885 '#f) (lT88c@lT884 '#f) (lT88f@lT882 '#f) (lT891@make-library-resolution-condition '#f) (lT893@lT880 '#f) (lT895@lT881 '#f) (lT897@library-resolution-condition? '#f) (lT899@condition-library '#f) (lT89b@condition-files '#f)) (begin (set! lT888@lT883 (make-record-type-descriptor '&library-resolution lT2b8d@lT28d4@&condition-rtd 'lT886 '#f '#f '#((immutable library) (immutable files)))) (set! lT88a@lT885 '#f) (set! lT88c@lT884 (make-record-constructor-descriptor lT888@lT883 lT2b8e@lT28d6@&condition-rcd lT88a@lT885)) (set! lT88f@lT882 (record-predicate lT888@lT883)) (set! lT891@make-library-resolution-condition (record-constructor lT88c@lT884)) (set! lT893@lT880 (record-accessor lT888@lT883 '0)) (set! lT895@lT881 (record-accessor lT888@lT883 '1)) (set! lT897@library-resolution-condition? (condition-predicate lT888@lT883)) (set! lT899@condition-library (condition-accessor lT888@lT883 lT893@lT880)) (set! lT89b@condition-files (condition-accessor lT888@lT883 lT895@lT881)) (raise (condition (lT2bad@lT296e@make-error) (lT2bcf@lT29ca@make-who-condition 'expander) (lT2b93@lT292b@make-message-condition '"cannot locate library in library-path") (lT891@make-library-resolution-condition lT874@x (reverse lT87a@failed-list)))))) (if (null? lT879@exts) (lT87e@f (cdr lT878@ls) (lT7b5@library-extensions) lT87a@failed-list) (let ((lT89c@name (string-append (car lT878@ls) lT876@str (car lT879@exts)))) (if (file-exists? lT89c@name) lT89c@name (lT87e@f lT878@ls (cdr lT879@exts) (cons lT89c@name lT87a@failed-list))))))))) (lambda (lT89e@f) (if (procedure? lT89e@f) lT89e@f (assertion-violation 'file-locator '"not a procedure" lT89e@f))))) (set! lT97a@lT7b9@file-locator lT7b9@file-locator)) (begin (set! lT7bb@serialize-all (lambda (lT8a0@serialize lT8a1@compile) (let ((lT8a5@library-desc '#f)) (begin (set! lT8a5@library-desc (lambda (lT8a8@x) (list (lT775@library-id lT8a8@x) (lT779@library-name lT8a8@x)))) (for-each (lambda (lT8a6@x) (if (lT7a9@library-source-file-name lT8a6@x) (lT8a0@serialize (lT7a9@library-source-file-name lT8a6@x) (list (lT775@library-id lT8a6@x) (lT779@library-name lT8a6@x) (lT77d@library-version lT8a6@x) (map lT8a5@library-desc (lT781@library-imp* lT8a6@x)) (map lT8a5@library-desc (lT785@library-vis* lT8a6@x)) (map lT8a5@library-desc (lT789@library-inv* lT8a6@x)) (lT78d@library-subst lT8a6@x) (lT791@library-env lT8a6@x) (lT8a1@compile (lT79d@library-visit-code lT8a6@x)) (lT8a1@compile (lT7a1@library-invoke-code lT8a6@x)) (lT7a5@library-visible? lT8a6@x))) (void))) ((lT767@current-library-collection))))))) (set! lT97b@lT7bb@serialize-all lT7bb@serialize-all)) (begin (set! lT7bd@current-precompiled-library-loader (lT6bd@lT59c@make-parameter (lambda (lT8aa@filename lT8ab@sk) '#f))) (set! lT97c@lT7bd@current-precompiled-library-loader lT7bd@current-precompiled-library-loader)) (begin (set! lT7bf@try-load-from-file (lambda (lT8ae@filename) ((lT7bd@current-precompiled-library-loader) lT8ae@filename (lambda lT8d4 (let ((lT8d5 (length lT8d4))) (if (= lT8d5 '11) (apply (lambda (lT8b0@id lT8b1@name lT8b2@ver lT8b3@imp* lT8b4@vis* lT8b5@inv* lT8b6@exp-subst lT8b7@exp-env lT8b8@visit-proc lT8b9@invoke-proc lT8ba@visible?) (let lT8c8@f ((lT8c6@deps (append lT8b3@imp* lT8b4@vis* lT8b5@inv*))) (if (null? lT8c6@deps) (begin (lT7d3@install-library lT8b0@id lT8b1@name lT8b2@ver lT8b3@imp* lT8b4@vis* lT8b5@inv* lT8b6@exp-subst lT8b7@exp-env lT8b8@visit-proc lT8b9@invoke-proc '#f '#f lT8ba@visible? '#f) '#t) (let ((lT8ca@d (car lT8c6@deps))) (let ((lT8cc@label (car lT8ca@d)) (lT8cd@dname (cadr lT8ca@d))) (let ((lT8d0@l (lT7c9@find-library-by-name lT8cd@dname))) (if (and (lT773@library? lT8d0@l) (eq? lT8cc@label (lT775@library-id lT8d0@l))) (lT8c8@f (cdr lT8c6@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" lT8b1@name lT8cd@dname lT8ae@filename lT8d0@l lT8cc@label (lT775@library-id lT8d0@l)) '#f)))))))) lT8d4) (if (>= lT8d5 '0) (apply (lambda lT8d2@others '#f) lT8d4) (error 'apply '"invalid arg count")))))))) (set! lT97d@lT7bf@try-load-from-file lT7bf@try-load-from-file)) (begin (set! lT7c1@library-loader (lT6bd@lT59c@make-parameter (lambda (lT8d6@x) (let ((lT8d8@file-name ((lT7b9@file-locator) lT8d6@x))) (if (not lT8d8@file-name) (assertion-violation '#f '"cannot file library" lT8d6@x) (or (lT7bf@try-load-from-file lT8d8@file-name) ((lT7c3@current-library-expander) (lT6bc@lT59a@read-library-source-file lT8d8@file-name) lT8d8@file-name (lambda (lT8da@name) (if (not (fast-equal? lT8da@name lT8d6@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (lT8e0@lT8dd lT8e1@lT8df) (let ((lT8e4@e lT8e1@lT8df) (lT8e5@p lT8e0@lT8dd)) (begin (display '"expected to find library " lT8e5@p) (write lT8d6@x lT8e5@p) (display '" in file " lT8e5@p) (display lT8d8@file-name lT8e5@p) (display '", found " lT8e5@p) (write lT8da@name lT8e5@p) (display '" instead" lT8e5@p) (lT8e4@e)))))) (void)))))))) (lambda (lT8e8@f) (if (procedure? lT8e8@f) lT8e8@f (assertion-violation 'library-locator '"not a procedure" lT8e8@f))))) (set! lT97e@lT7c1@library-loader lT7c1@library-loader)) (begin (set! lT7c3@current-library-expander (lT6bd@lT59c@make-parameter (lambda (lT8ea@x) (assertion-violation 'library-expander '"not initialized")) (lambda (lT8ec@f) (if (procedure? lT8ec@f) lT8ec@f (assertion-violation 'library-expander '"not a procedure" lT8ec@f))))) (set! lT97f@lT7c3@current-library-expander lT7c3@current-library-expander)) (begin (set! lT7c5@external-pending-libraries (lT6bd@lT59c@make-parameter '())) (set! lT980@lT7c5@external-pending-libraries lT7c5@external-pending-libraries)) (begin (set! lT7c7@find-external-library (lambda (lT8ee@name) (begin (if (member lT8ee@name (lT7c5@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" lT8ee@name) (void)) (let ((lT8f4@lT8f1 lT7c5@external-pending-libraries) (lT8f5@lT8f3 (cons lT8ee@name (lT7c5@external-pending-libraries)))) (let ((lT8f8@swap (lambda () (let ((lT8fa@t (lT8f4@lT8f1))) (begin (lT8f4@lT8f1 lT8f5@lT8f3) (set! lT8f5@lT8f3 lT8fa@t)))))) (dynamic-wind lT8f8@swap (lambda () (begin ((lT7c1@library-loader) lT8ee@name) (or (lT7b1@find-library-by (lambda (lT8fc@x) (fast-equal? (lT779@library-name lT8fc@x) lT8ee@name))) (assertion-violation '#f '"handling external library did not yield the correct library" lT8ee@name)))) lT8f8@swap)))))) (set! lT981@lT7c7@find-external-library lT7c7@find-external-library)) (begin (set! lT7c9@find-library-by-name (lambda (lT8fe@name) (or (lT7b1@find-library-by (lambda (lT900@x) (fast-equal? (lT779@library-name lT900@x) lT8fe@name))) (lT7c7@find-external-library lT8fe@name)))) (set! lT982@lT7c9@find-library-by-name lT7c9@find-library-by-name)) (begin (set! lT7cb@library-exists? (lambda (lT902@name) (and (lT7b1@find-library-by (lambda (lT904@x) (fast-equal? (lT779@library-name lT904@x) lT902@name))) '#t))) (set! lT983@lT7cb@library-exists? lT7cb@library-exists?)) (begin (set! lT7cd@find-library-by-spec/die (lambda (lT906@spec) (let ((lT908@id (car lT906@spec))) (or (lT7b1@find-library-by (lambda (lT90a@x) (eq? lT908@id (lT775@library-id lT90a@x)))) (assertion-violation '#f '"cannot find library with required spec" lT906@spec))))) (set! lT984@lT7cd@find-library-by-spec/die lT7cd@find-library-by-spec/die)) (begin (set! lT7cf@label->binding-table (make-eq-hashtable)) (set! lT985@lT7cf@label->binding-table lT7cf@label->binding-table)) (begin (set! lT7d1@install-library-record (lambda (lT90c@lib) (begin (let ((lT90e@exp-env (lT791@library-env lT90c@lib))) (for-each (lambda (lT910@x) (let ((lT912@label (car lT910@x)) (lT913@binding (cdr lT910@x))) (let ((lT916@binding (let ((lT918@t (car lT913@binding))) (if (memv lT918@t '(global)) (cons 'global (cons lT90c@lib (cdr lT913@binding))) (if (memv lT918@t '(global-macro)) (cons 'global-macro (cons lT90c@lib (cdr lT913@binding))) (if (memv lT918@t '(global-macro!)) (cons 'global-macro! (cons lT90c@lib (cdr lT913@binding))) lT913@binding)))))) (begin (if (hashtable-ref lT7cf@label->binding-table lT912@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" lT912@label (hashtable-ref lT7cf@label->binding-table lT912@label '#f) lT916@binding) (exit)) (void)) (hashtable-set! lT7cf@label->binding-table lT912@label lT916@binding))))) lT90e@exp-env)) ((lT767@current-library-collection) lT90c@lib)))) (set! lT986@lT7d1@install-library-record lT7d1@install-library-record)) (begin (set! lT7d3@install-library (lambda (lT91a@id lT91b@name lT91c@ver lT91d@imp* lT91e@vis* lT91f@inv* lT920@exp-subst lT921@exp-env lT922@visit-proc lT923@invoke-proc lT924@visit-code lT925@invoke-code lT926@visible? lT927@source-file-name) (let ((lT936@imp-lib* (map lT7cd@find-library-by-spec/die lT91d@imp*)) (lT937@vis-lib* (map lT7cd@find-library-by-spec/die lT91e@vis*)) (lT938@inv-lib* (map lT7cd@find-library-by-spec/die lT91f@inv*))) (begin (if (not (and (symbol? lT91a@id) (list? lT91b@name) (list? lT91c@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" lT91a@id lT91b@name lT91c@ver) (void)) (if (lT7cb@library-exists? lT91b@name) (assertion-violation 'install-library '"library is already installed" lT91b@name) (void)) (let ((lT93c@lib (make-simple-struct 'library '15 (list lT91a@id lT91b@name lT91c@ver lT936@imp-lib* lT937@vis-lib* lT938@inv-lib* lT920@exp-subst lT921@exp-env lT922@visit-proc lT923@invoke-proc lT924@visit-code lT925@invoke-code lT926@visible? lT927@source-file-name)))) (lT7d1@install-library-record lT93c@lib)))))) (set! lT987@lT7d3@install-library lT7d3@install-library)) (begin (set! lT7d5@imported-label->binding (lambda (lT93e@lab) (hashtable-ref lT7cf@label->binding-table lT93e@lab '#f))) (set! lT988@lT7d5@imported-label->binding lT7d5@imported-label->binding)) (begin (set! lT7d7@invoke-library (lambda (lT940@lib) (let ((lT942@invoke (lT799@library-invoke-state lT940@lib))) (if (procedure? lT942@invoke) (begin (lT79b@set-library-invoke-state! lT940@lib (lambda () (assertion-violation 'invoke '"circularity detected" lT940@lib))) (for-each lT7d7@invoke-library (lT789@library-inv* lT940@lib)) (lT79b@set-library-invoke-state! lT940@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" lT940@lib))) (lT942@invoke) (lT79b@set-library-invoke-state! lT940@lib '#t)) (void))))) (set! lT989@lT7d7@invoke-library lT7d7@invoke-library)) (begin (set! lT7d9@visit-library (lambda (lT944@lib) (let ((lT946@visit (lT795@library-visit-state lT944@lib))) (if (procedure? lT946@visit) (begin (lT797@set-library-visit-state! lT944@lib (lambda () (assertion-violation 'visit '"circularity detected" lT944@lib))) (for-each lT7d7@invoke-library (lT785@library-vis* lT944@lib)) (lT797@set-library-visit-state! lT944@lib (lambda () (assertion-violation 'invoke '"first visit did not return" lT944@lib))) (lT946@visit) (lT797@set-library-visit-state! lT944@lib '#t)) (void))))) (set! lT98a@lT7d9@visit-library lT7d9@visit-library)) (begin (set! lT7db@invoke-library-by-spec (lambda (lT948@spec) (lT7d7@invoke-library (lT7cd@find-library-by-spec/die lT948@spec)))) (set! lT98b@lT7db@invoke-library-by-spec lT7db@invoke-library-by-spec)) (begin (set! lT7dd@installed-libraries (lambda lT950 (let ((lT951 (length lT950))) (if (= lT951 '1) (apply (lambda (lT94a@all?) (let lT94e@f ((lT94c@ls ((lT767@current-library-collection)))) (if (null? lT94c@ls) '() (if (or lT94a@all? (lT7a5@library-visible? (car lT94c@ls))) (cons (car lT94c@ls) (lT94e@f (cdr lT94c@ls))) (lT94e@f (cdr lT94c@ls)))))) lT950) (if (= lT951 '0) (apply (lambda () (lT7dd@installed-libraries '#f)) lT950) (error 'apply '"invalid arg count")))))) (set! lT98c@lT7dd@installed-libraries lT7dd@installed-libraries)) (begin (set! lT7df@library-spec (lambda (lT952@x) (begin (if (not (lT773@library? lT952@x)) (assertion-violation 'library-spec '"not a library" lT952@x) (void)) (list (lT775@library-id lT952@x) (lT779@library-name lT952@x) (lT77d@library-version lT952@x))))) (set! lT98d@lT7df@library-spec lT7df@library-spec)) (void))
(begin (set! lT991@build-global-define (unspecified)) (set! lTa02@build-lambda (unspecified)) (set! lTa04@build-case-lambda (unspecified)) (set! lTa32@build-sequence (unspecified)) (set! lTa34@build-void (unspecified)) (set! lTa36@build-letrec (unspecified)) (set! lTa38@build-let (unspecified)) (set! lTa3a@build-named-let (unspecified)) (set! lTa3c@build-letrec* (unspecified)) (set! lTa3e@build-library-letrec* (unspecified)) (set! lTa40@build-receive (unspecified)) (begin (set! lT991@build-global-define (lambda (lTa41@x) (lTa34@build-void))) (set! lTad5@lT991@build-global-define lT991@build-global-define)) (begin (set! lTa02@build-lambda (lambda (lTa43@ae lTa44@vars lTa45@exp) (list 'lambda lTa44@vars lTa45@exp))) (set! lTad6@lTa02@build-lambda lTa02@build-lambda)) (begin (set! lTa04@build-case-lambda (lambda (lTa49@ae lTa4a@vars* lTa4b@exp*) (let ((lTa50@build-error '#f) (lTa52@build-pred '#f) (lTa54@build-apply '#f) (lTa56@expand-case-lambda '#f)) (begin (set! lTa50@build-error (lambda (lTa87@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! lTa52@build-pred (lambda (lTa6f@ae lTa70@n lTa71@vars) (call-with-values (lambda () (let lTa7d@f3 ((lTa79@vars lTa71@vars) (lTa7a@count '0)) (if (pair? lTa79@vars) (lTa7d@f3 (cdr lTa79@vars) (+ lTa7a@count '1)) (if (null? lTa79@vars) (values lTa7a@count '=) (values lTa7a@count '>=))))) (lambda (lTa7f@lTa76 lTa80@lTa78) (let ((lTa83@pred lTa80@lTa78) (lTa84@count lTa7f@lTa76)) (list (list 'primitive lTa83@pred) lTa70@n (list 'quote lTa84@count))))))) (set! lTa54@build-apply (lambda (lTa67@ae lTa68@g lTa69@vars lTa6a@exp) (list '(primitive apply) (lTa02@build-lambda lTa67@ae lTa69@vars lTa6a@exp) lTa68@g))) (set! lTa56@expand-case-lambda (lambda (lTa57@ae lTa58@vars lTa59@exp*) (let ((lTa5d@g (gensym)) (lTa5e@n (gensym))) (list 'lambda lTa5d@g (lTa38@build-let lTa57@ae (list lTa5e@n) (list (list '(primitive length) lTa5d@g)) (let lTa65@f4 ((lTa61@vars* lTa4a@vars*) (lTa62@exp* lTa59@exp*)) (if (null? lTa61@vars*) (lTa50@build-error lTa57@ae) (list 'if (lTa52@build-pred lTa57@ae lTa5e@n (car lTa61@vars*)) (lTa54@build-apply lTa57@ae lTa5d@g (car lTa61@vars*) (car lTa62@exp*)) (lTa65@f4 (cdr lTa61@vars*) (cdr lTa62@exp*)))))))))) (if (= (length lTa4b@exp*) '1) (lTa02@build-lambda lTa49@ae (car lTa4a@vars*) (car lTa4b@exp*)) (lTa56@expand-case-lambda lTa49@ae lTa4a@vars* lTa4b@exp*)))))) (set! lTad7@lTa04@build-case-lambda lTa04@build-case-lambda)) (begin (set! lTa32@build-sequence (lambda (lTa89@ae lTa8a@exps) (let lTa8f@loop ((lTa8d@exps lTa8a@exps)) (if (null? (cdr lTa8d@exps)) (car lTa8d@exps) (if (equal? (car lTa8d@exps) (lTa34@build-void)) (lTa8f@loop (cdr lTa8d@exps)) (cons 'begin lTa8d@exps)))))) (set! lTad8@lTa32@build-sequence lTa32@build-sequence)) (begin (set! lTa34@build-void (lambda () '((primitive void)))) (set! lTad9@lTa34@build-void lTa34@build-void)) (begin (set! lTa36@build-letrec (lambda (lTa91@ae lTa92@vars lTa93@val-exps lTa94@body-exp) (if (null? lTa92@vars) lTa94@body-exp (list 'letrec (map list lTa92@vars lTa93@val-exps) lTa94@body-exp)))) (set! lTada@lTa36@build-letrec lTa36@build-letrec)) (begin (set! lTa38@build-let (lambda (lTa99@ae lTa9a@vars lTa9b@val-exps lTa9c@body-exp) (if (null? lTa9a@vars) lTa9c@body-exp (list 'let (map list lTa9a@vars lTa9b@val-exps) lTa9c@body-exp)))) (set! lTadb@lTa38@build-let lTa38@build-let)) (begin (set! lTa3a@build-named-let (lambda (lTaa1@ae lTaa2@name lTaa3@vars lTaa4@val-exps lTaa5@body-exp) (begin (display (list 'let lTaa2@name (map list lTaa3@vars lTaa4@val-exps) lTaa5@body-exp) (current-error-port)) (if (null? lTaa3@vars) lTaa5@body-exp (list 'let lTaa2@name (map list lTaa3@vars lTaa4@val-exps) lTaa5@body-exp))))) (set! lTadc@lTa3a@build-named-let lTa3a@build-named-let)) (begin (set! lTa3c@build-letrec* (lambda (lTaab@ae lTaac@vars lTaad@val-exps lTaae@body-exp) (if (null? lTaac@vars) lTaae@body-exp (lTa38@build-let lTaab@ae lTaac@vars (map (lambda (lTab3@x) (list 'quote '#f)) lTaac@vars) (lTa32@build-sequence lTaab@ae (append (map (lambda (lTab5@lhs lTab6@rhs) (list 'set! lTab5@lhs lTab6@rhs)) lTaac@vars lTaad@val-exps) (list lTaae@body-exp))))))) (set! lTadd@lTa3c@build-letrec* lTa3c@build-letrec*)) (begin (set! lTa3e@build-library-letrec* (lambda (lTab9@ae lTaba@name lTabb@vars lTabc@locs lTabd@val-exps lTabe@body-exp) (cons 'begin (append (map (lambda (lTac5@var) (cons 'set! (cons lTac5@var '((unspecified))))) lTabb@vars) (append (map (lambda (lTac7@var lTac8@loc lTac9@val-exp) (list 'begin (list 'set! lTac7@var lTac9@val-exp) (list 'set! lTac8@loc lTac7@var))) lTabb@vars lTabc@locs lTabd@val-exps) (list lTabe@body-exp)))))) (set! lTade@lTa3e@build-library-letrec* lTa3e@build-library-letrec*)) (begin (set! lTa40@build-receive (lambda (lTacd@ae lTace@vars lTacf@producer lTad0@body*) (begin (display '"************** in ") (cons 'receive (cons lTace@vars (cons lTacf@producer lTad0@body*)))))) (set! lTadf@lTa40@build-receive lTa40@build-receive)) (void))
(begin (set! lTaee@file-options-macro (unspecified)) (set! lTaf0@set-cons (unspecified)) (set! lTaf2@set-union (unspecified)) (set! lTaf7@top-mark* (unspecified)) (set! lTaf9@top-marked? (unspecified)) (set! lTafb@gen-lexical (unspecified)) (set! lTafd@gen-global (unspecified)) (set! lTaff@gen-label (unspecified)) (set! lTb01@gen-top-level-label (unspecified)) (set! lTb03@gen-define-label+loc (unspecified)) (set! lTb05@gen-define-label (unspecified)) (set! lTb0f@rib? (unspecified)) (set! lTb11@rib-sym* (unspecified)) (set! lTb13@set-rib-sym*! (unspecified)) (set! lTb15@rib-mark** (unspecified)) (set! lTb17@set-rib-mark**! (unspecified)) (set! lTb19@rib-label* (unspecified)) (set! lTb1b@set-rib-label*! (unspecified)) (set! lTb1d@rib-sealed/freq (unspecified)) (set! lTb1f@set-rib-sealed/freq! (unspecified)) (set! lTb21@rib-cache (unspecified)) (set! lTb23@set-rib-cache! (unspecified)) (set! lTb25@dummy (unspecified)) (set! lTb27@make-empty-rib (unspecified)) (set! lTb29@extend-rib! (unspecified)) (set! lTb2b@extend-rib/nc! (unspecified)) (set! lTb2d@make-rib-map (unspecified)) (set! lTb2f@seal-rib! (unspecified)) (set! lTb31@unseal-rib! (unspecified)) (set! lTb33@make-full-rib (unspecified)) (set! lTb35@rp (unspecified)) (set! lTb3f@stx? (unspecified)) (set! lTb41@stx-expr (unspecified)) (set! lTb43@set-stx-expr! (unspecified)) (set! lTb45@stx-mark* (unspecified)) (set! lTb47@set-stx-mark*! (unspecified)) (set! lTb49@stx-subst* (unspecified)) (set! lTb4b@set-stx-subst*! (unspecified)) (set! lTb4d@stx-ae* (unspecified)) (set! lTb4f@set-stx-ae*! (unspecified)) (set! lTb51@dummy (unspecified)) (set! lTb53@datum->stx (unspecified)) (set! lTb55@gen-mark (unspecified)) (set! lTb57@anti-mark (unspecified)) (set! lTb59@anti-mark? (unspecified)) (set! lTb5b@mkstx (unspecified)) (set! lTb5d@add-mark (unspecified)) (set! lTb5f@add-subst (unspecified)) (set! lTb61@syntax-kind? (unspecified)) (set! lTb63@syntax-vector->list (unspecified)) (set! lTb65@syntax-pair? (unspecified)) (set! lTb67@syntax-vector? (unspecified)) (set! lTb69@syntax-null? (unspecified)) (set! lTb6b@syntax-list? (unspecified)) (set! lTb6d@syntax-car (unspecified)) (set! lTb6f@syntax-cdr (unspecified)) (set! lTb71@syntax->list (unspecified)) (set! lTb73@id? (unspecified)) (set! lTb75@id->sym (unspecified)) (set! lTb77@bound-id=? (unspecified)) (set! lTb79@free-id=? (unspecified)) (set! lTb7b@valid-bound-ids? (unspecified)) (set! lTb7d@distinct-bound-ids? (unspecified)) (set! lTb7f@bound-id-member? (unspecified)) (set! lTb81@self-evaluating? (unspecified)) (set! lTb83@strip-annotations (unspecified)) (set! lTb85@strip (unspecified)) (set! lTb87@stx->datum (unspecified)) (set! lTb89@id->label (unspecified)) (set! lTb8b@label->binding (unspecified)) (set! lTb8d@make-binding (unspecified)) (set! lTb8f@binding-type (unspecified)) (set! lTb91@binding-value (unspecified)) (set! lTb93@raise-unbound-error (unspecified)) (set! lTb95@syntax-type (unspecified)) (set! lTba3@sanitize-binding (unspecified)) (set! lTba5@make-variable-transformer (unspecified)) (set! lTba7@variable-transformer? (unspecified)) (set! lTba9@variable-transformer-procedure (unspecified)) (set! lTbab@make-eval-transformer (unspecified)) (set! lTcfc@parse-define (unspecified)) (set! lTcfe@parse-define-syntax (unspecified)) (set! lTd00@scheme-stx-hashtable (unspecified)) (set! lTd02@scheme-stx (unspecified)) (set! lTd04@lexical-var (unspecified)) (set! lTd06@lexical-mutable? (unspecified)) (set! lTd08@set-lexical-mutable! (unspecified)) (set! lTd0a@add-lexical (unspecified)) (set! lTd0c@add-lexicals (unspecified)) (set! lTd0e@letrec-helper (unspecified)) (set! lTd10@let-transformer (unspecified)) (set! lTd12@letrec-transformer (unspecified)) (set! lTd14@letrec*-transformer (unspecified)) (set! lTd16@fluid-let-syntax-transformer (unspecified)) (set! lTd18@type-descriptor-transformer (unspecified)) (set! lTd1a@record-type-descriptor-transformer (unspecified)) (set! lTd1c@record-constructor-descriptor-transformer (unspecified)) (set! lTd1e@when-macro (unspecified)) (set! lTd20@unless-macro (unspecified)) (set! lTd22@if-transformer (unspecified)) (set! lTd24@and-transformer (unspecified)) (set! lTd26@or-transformer (unspecified)) (set! lTd28@case-macro (unspecified)) (set! lTd2a@quote-transformer (unspecified)) (set! lTd2c@case-lambda-transformer (unspecified)) (set! lTd2e@lambda-transformer (unspecified)) (set! lTd30@bless (unspecified)) (set! lTd32@with-syntax-macro (unspecified)) (set! lTd34@invalid-fmls-error (unspecified)) (set! lTd36@let-macro (unspecified)) (set! lTd38@let-values-macro (unspecified)) (set! lTd3a@let*-values-macro (unspecified)) (set! lTd3c@trace-lambda-macro (unspecified)) (set! lTd3e@trace-define-macro (unspecified)) (set! lTd40@trace-define-syntax-macro (unspecified)) (set! lTd42@trace-let/rec-syntax (unspecified)) (set! lTd44@trace-let-syntax-macro (unspecified)) (set! lTd46@trace-letrec-syntax-macro (unspecified)) (set! lTd48@guard-macro (unspecified)) (set! lTd4a@define-enumeration-macro (unspecified)) (set! lTd4c@time-macro (unspecified)) (set! lTd4e@delay-macro (unspecified)) (set! lTd50@assert-macro (unspecified)) (set! lTd52@endianness-macro (unspecified)) (set! lTd54@identifier-syntax-macro (unspecified)) (set! lTd56@do-macro (unspecified)) (set! lTd58@let*-macro (unspecified)) (set! lTd5a@or-macro (unspecified)) (set! lTd5c@and-macro (unspecified)) (set! lTd5e@cond-macro (unspecified)) (set! lTd60@do-include (unspecified)) (set! lTd62@include-macro (unspecified)) (set! lTd64@include-into-macro (unspecified)) (set! lTd66@syntax-rules-macro (unspecified)) (set! lTd68@quasiquote-macro (unspecified)) (set! lTd6a@quasisyntax-macro (unspecified)) (set! lTd6c@define-struct-macro (unspecified)) (set! lTd6e@define-record-type-macro (unspecified)) (set! lTd70@define-condition-type-macro (unspecified)) (set! lTd72@incorrect-usage-macro (unspecified)) (set! lTd74@parameterize-macro (unspecified)) (set! lTd76@foreign-call-transformer (unspecified)) (set! lTd78@convert-pattern (unspecified)) (set! lTd7a@syntax-dispatch (unspecified)) (set! lTd7c@ellipsis? (unspecified)) (set! lTd7e@underscore? (unspecified)) (set! lTd80@verify-literals (unspecified)) (set! lTd82@syntax-case-transformer (unspecified)) (set! lTd84@ellipsis-map (unspecified)) (set! lTd86@syntax-transformer (unspecified)) (set! lTd88@core-macro-transformer (unspecified)) (set! lTd8a@symbol-macro (unspecified)) (set! lTd8c@macro-transformer (unspecified)) (set! lTd8e@local-macro-transformer (unspecified)) (set! lTd90@do-macro-call (unspecified)) (set! lTd92@chi-macro (unspecified)) (set! lTd94@chi-local-macro (unspecified)) (set! lTd96@chi-global-macro (unspecified)) (set! lTd98@chi-expr* (unspecified)) (set! lTd9a@chi-application (unspecified)) (set! lTd9c@chi-expr (unspecified)) (set! lTd9e@chi-set! (unspecified)) (set! lTda0@verify-formals (unspecified)) (set! lTda2@chi-lambda-clause (unspecified)) (set! lTda4@chi-lambda-clause* (unspecified)) (set! lTda6@chi-defun (unspecified)) (set! lTda8@chi-rhs (unspecified)) (set! lTdaa@expand-interaction-rhs*/init* (unspecified)) (set! lTdac@chi-rhs* (unspecified)) (set! lTdae@find-bound=? (unspecified)) (set! lTdb0@find-dups (unspecified)) (set! lTdb2@chi-internal (unspecified)) (set! lTdb4@parse-module (unspecified)) (set! lTdbe@module-interface? (unspecified)) (set! lTdc0@module-interface-first-mark (unspecified)) (set! lTdc2@set-module-interface-first-mark! (unspecified)) (set! lTdc4@module-interface-exp-id-vec (unspecified)) (set! lTdc6@set-module-interface-exp-id-vec! (unspecified)) (set! lTdc8@module-interface-exp-lab-vec (unspecified)) (set! lTdca@set-module-interface-exp-lab-vec! (unspecified)) (set! lTdcc@dummy (unspecified)) (set! lTdce@module-interface-exp-id* (unspecified)) (set! lTdd0@chi-internal-module (unspecified)) (set! lTdd2@chi-body* (unspecified)) (set! lTdd4@expand-transformer (unspecified)) (set! lTdd6@parse-exports (unspecified)) (set! lTdd8@parse-library-name (unspecified)) (set! lTdda@parse-library (unspecified)) (set! lTddc@parse-import-spec* (unspecified)) (set! lTdde@make-top-rib (unspecified)) (set! lTde0@make-collector (unspecified)) (set! lTde2@inv-collector (unspecified)) (set! lTde4@vis-collector (unspecified)) (set! lTde6@imp-collector (unspecified)) (set! lTde8@chi-library-internal (unspecified)) (set! lTdea@chi-interaction-expr (unspecified)) (set! lTdec@library-body-expander (unspecified)) (set! lTdee@core-library-expander (unspecified)) (set! lTdf0@parse-top-level-program (unspecified)) (set! lTdf2@top-level-expander (unspecified)) (set! lTdf4@rp (unspecified)) (set! lTdfe@env? (unspecified)) (set! lTe00@env-names (unspecified)) (set! lTe02@set-env-names! (unspecified)) (set! lTe04@env-labels (unspecified)) (set! lTe06@set-env-labels! (unspecified)) (set! lTe08@env-itc (unspecified)) (set! lTe0a@set-env-itc! (unspecified)) (set! lTe0c@dummy (unspecified)) (set! lTe0e@rp (unspecified)) (set! lTe18@interaction-env? (unspecified)) (set! lTe1a@interaction-env-rib (unspecified)) (set! lTe1c@set-interaction-env-rib! (unspecified)) (set! lTe1e@interaction-env-r (unspecified)) (set! lTe20@set-interaction-env-r! (unspecified)) (set! lTe22@interaction-env-locs (unspecified)) (set! lTe24@set-interaction-env-locs! (unspecified)) (set! lTe26@dummy (unspecified)) (set! lTe28@interaction-environment-symbols (unspecified)) (set! lTe2a@environment-bindings (unspecified)) (set! lTe2c@parse-binding (unspecified)) (set! lTe2e@environment? (unspecified)) (set! lTe30@environment-symbols (unspecified)) (set! lTe32@environment (unspecified)) (set! lTe34@null-environment (unspecified)) (set! lTe36@scheme-report-environment (unspecified)) (set! lTe38@expand (unspecified)) (set! lTe3a@eval (unspecified)) (set! lTe3c@library-expander (unspecified)) (set! lTe3e@boot-library-expand (unspecified)) (set! lTe40@rev-map-append (unspecified)) (set! lTe42@build-exports (unspecified)) (set! lTe44@make-export-subst (unspecified)) (set! lTe46@make-export-env/macros (unspecified)) (set! lTe48@generate-temporaries (unspecified)) (set! lTe4a@free-identifier=? (unspecified)) (set! lTe4c@bound-identifier=? (unspecified)) (set! lTe4e@make-source-condition (unspecified)) (set! lTe50@extract-position-condition (unspecified)) (set! lTe52@expression-position (unspecified)) (set! lTe54@assertion-error (unspecified)) (set! lTe56@syntax-error (unspecified)) (set! lTe58@syntax-violation* (unspecified)) (set! lTe5a@syntax-violation (unspecified)) (set! lTe5c@identifier? (unspecified)) (set! lTe5e@datum->syntax (unspecified)) (set! lTe60@syntax->datum (unspecified)) (set! lTe62@ungensym-all (unspecified)) (set! lTe64@compile-r6rs-top-level (unspecified)) (set! lTe66@pre-compile-r6rs-top-level (unspecified)) (set! lTe68@interaction-environment (unspecified)) (set! lTe6a@top-level-context (unspecified)) (begin (set! lTaee@file-options-macro (lambda (lTe6b@x) (let ((lTe6e@valid-option? '#f)) (begin (set! lTe6e@valid-option? (lambda (lTe77@x) (and (lTb73@id? lTe77@x) (memq (lTb75@id->sym lTe77@x) '(no-fail no-create no-truncate))))) (let ((lTe6f@t lTe6b@x)) (let ((lTe71@ls/false (lTd7a@syntax-dispatch lTe6f@t '(_ . each-any)))) (if (and lTe71@ls/false (apply (lambda (lTe73@opt*) (for-all lTe6e@valid-option? lTe73@opt*)) lTe71@ls/false)) (apply (lambda (lTe75@opt*) (lTd30@bless (list 'make-file-options (list 'quote lTe75@opt*)))) lTe71@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lTe6f@t)))))))) (set! lT27bf@lTaee@file-options-macro lTaee@file-options-macro)) (begin (set! lTaf0@set-cons (lambda (lTe79@x lTe7a@ls) (if (memq lTe79@x lTe7a@ls) lTe7a@ls (cons lTe79@x lTe7a@ls)))) (set! lT27c0@lTaf0@set-cons lTaf0@set-cons)) (begin (set! lTaf2@set-union (lambda (lTe7d@ls1 lTe7e@ls2) (if (null? lTe7d@ls1) lTe7e@ls2 (if (memq (car lTe7d@ls1) lTe7e@ls2) (lTaf2@set-union (cdr lTe7d@ls1) lTe7e@ls2) (cons (car lTe7d@ls1) (lTaf2@set-union (cdr lTe7d@ls1) lTe7e@ls2)))))) (set! lT27c1@lTaf2@set-union lTaf2@set-union)) (begin (set! lTaf7@top-mark* '(top)) (set! lT27c2@lTaf7@top-mark* lTaf7@top-mark*)) (begin (set! lTaf9@top-marked? (lambda (lTe81@m*) (memq 'top lTe81@m*))) (set! lT27c3@lTaf9@top-marked? lTaf9@top-marked?)) (begin (set! lTafb@gen-lexical (lambda (lTe83@sym) (if (symbol? lTe83@sym) (gensym lTe83@sym) (if (lTb3f@stx? lTe83@sym) (lTafb@gen-lexical (lTb75@id->sym lTe83@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" lTe83@sym))))) (set! lT27c4@lTafb@gen-lexical lTafb@gen-lexical)) (begin (set! lTafd@gen-global (lambda (lTe85@x) (lTafb@gen-lexical lTe85@x))) (set! lT27c5@lTafd@gen-global lTafd@gen-global)) (begin (set! lTaff@gen-label (lambda (lTe87@_) (gensym))) (set! lT27c6@lTaff@gen-label lTaff@gen-label)) (begin (set! lTb01@gen-top-level-label (lambda (lTe89@id lTe8a@rib) (let ((lTe8e@find '#f)) (begin (set! lTe8e@find (lambda (lTe99@sym lTe9a@mark* lTe9b@sym* lTe9c@mark** lTe9d@label*) (and (pair? lTe9b@sym*) (if (and (eq? lTe99@sym (car lTe9b@sym*)) (same-marks? lTe9a@mark* (car lTe9c@mark**))) (car lTe9d@label*) (lTe8e@find lTe99@sym lTe9a@mark* (cdr lTe9b@sym*) (cdr lTe9c@mark**) (cdr lTe9d@label*)))))) (let ((lTe8f@sym (lTb75@id->sym lTe89@id)) (lTe90@mark* (lTb45@stx-mark* lTe89@id))) (let ((lTe93@sym* (lTb11@rib-sym* lTe8a@rib))) (let ((lTe95@t (and (memq lTe8f@sym (lTb11@rib-sym* lTe8a@rib)) (lTe8e@find lTe8f@sym lTe90@mark* lTe93@sym* (lTb15@rib-mark** lTe8a@rib) (lTb19@rib-label* lTe8a@rib))))) (if lTe95@t ((lambda (lTe97@label) (if (lT988@lT7d5@imported-label->binding lTe97@label) (gensym) lTe97@label)) lTe95@t) (gensym))))))))) (set! lT27c7@lTb01@gen-top-level-label lTb01@gen-top-level-label)) (begin (set! lTb03@gen-define-label+loc (lambda (lTea3@id lTea4@rib) (let ((lTea7@t (lTe6a@top-level-context))) (if lTea7@t ((lambda (lTea9@env) (let ((lTeab@label (lTb01@gen-top-level-label lTea3@id lTea4@rib)) (lTeac@locs (lTe22@interaction-env-locs lTea9@env))) (values lTeab@label (let ((lTeaf@t (assq lTeab@label lTeac@locs))) (if lTeaf@t (cdr lTeaf@t) (let ((lTeb1@loc (lTafb@gen-lexical lTea3@id))) (begin (lTe24@set-interaction-env-locs! lTea9@env (cons (cons lTeab@label lTeb1@loc) lTeac@locs)) lTeb1@loc))))))) lTea7@t) (values (gensym) (lTafb@gen-lexical lTea3@id)))))) (set! lT27c8@lTb03@gen-define-label+loc lTb03@gen-define-label+loc)) (begin (set! lTb05@gen-define-label (lambda (lTeb3@id lTeb4@rib) (if (lTe6a@top-level-context) (lTb01@gen-top-level-label lTeb3@id lTeb4@rib) (gensym)))) (set! lT27c9@lTb05@gen-define-label lTb05@gen-define-label)) (begin (set! lTb0f@rib? (lambda (lTeb7@x) (and (simple-struct? lTeb7@x) (eq? (simple-struct-name lTeb7@x) 'rib)))) (set! lT27ca@lTb0f@rib? lTb0f@rib?)) (begin (set! lTb11@rib-sym* (lambda (lTeb9@x) (simple-struct-ref lTeb9@x '0))) (set! lT27cb@lTb11@rib-sym* lTb11@rib-sym*)) (begin (set! lTb13@set-rib-sym*! (lambda (lTebb@x lTebc@val) (simple-struct-set! lTebb@x '0 lTebc@val))) (set! lT27cc@lTb13@set-rib-sym*! lTb13@set-rib-sym*!)) (begin (set! lTb15@rib-mark** (lambda (lTebf@x) (simple-struct-ref lTebf@x '1))) (set! lT27cd@lTb15@rib-mark** lTb15@rib-mark**)) (begin (set! lTb17@set-rib-mark**! (lambda (lTec1@x lTec2@val) (simple-struct-set! lTec1@x '1 lTec2@val))) (set! lT27ce@lTb17@set-rib-mark**! lTb17@set-rib-mark**!)) (begin (set! lTb19@rib-label* (lambda (lTec5@x) (simple-struct-ref lTec5@x '2))) (set! lT27cf@lTb19@rib-label* lTb19@rib-label*)) (begin (set! lTb1b@set-rib-label*! (lambda (lTec7@x lTec8@val) (simple-struct-set! lTec7@x '2 lTec8@val))) (set! lT27d0@lTb1b@set-rib-label*! lTb1b@set-rib-label*!)) (begin (set! lTb1d@rib-sealed/freq (lambda (lTecb@x) (simple-struct-ref lTecb@x '3))) (set! lT27d1@lTb1d@rib-sealed/freq lTb1d@rib-sealed/freq)) (begin (set! lTb1f@set-rib-sealed/freq! (lambda (lTecd@x lTece@val) (simple-struct-set! lTecd@x '3 lTece@val))) (set! lT27d2@lTb1f@set-rib-sealed/freq! lTb1f@set-rib-sealed/freq!)) (begin (set! lTb21@rib-cache (lambda (lTed1@x) (simple-struct-ref lTed1@x '4))) (set! lT27d3@lTb21@rib-cache lTb21@rib-cache)) (begin (set! lTb23@set-rib-cache! (lambda (lTed3@x lTed4@val) (simple-struct-set! lTed3@x '4 lTed4@val))) (set! lT27d4@lTb23@set-rib-cache! lTb23@set-rib-cache!)) (begin (set! lTb25@dummy '3) (set! lT27d5@lTb25@dummy lTb25@dummy)) (begin (set! lTb27@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! lT27d6@lTb27@make-empty-rib lTb27@make-empty-rib)) (begin (set! lTb29@extend-rib! (lambda (lTed7@rib lTed8@id lTed9@label) (let ((lTede@find '#f)) (begin (set! lTede@find (lambda (lTeeb@sym lTeec@mark* lTeed@sym* lTeee@mark** lTeef@label*) (and (pair? lTeed@sym*) (if (and (eq? lTeeb@sym (car lTeed@sym*)) (same-marks? lTeec@mark* (car lTeee@mark**))) lTeef@label* (lTede@find lTeeb@sym lTeec@mark* (cdr lTeed@sym*) (cdr lTeee@mark**) (cdr lTeef@label*)))))) (begin (if (lTb1d@rib-sealed/freq lTed7@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" lTed7@rib) (void)) (let ((lTedf@sym (lTb75@id->sym lTed8@id)) (lTee0@mark* (lTb45@stx-mark* lTed8@id))) (let ((lTee3@sym* (lTb11@rib-sym* lTed7@rib))) (let ((lTee5@t (and (memq lTedf@sym (lTb11@rib-sym* lTed7@rib)) (lTede@find lTedf@sym lTee0@mark* lTee3@sym* (lTb15@rib-mark** lTed7@rib) (lTb19@rib-label* lTed7@rib))))) (if lTee5@t ((lambda (lTee7@p) (if (not (eq? lTed9@label (car lTee7@p))) (if (lTe6a@top-level-context) (set-car! lTee7@p lTed9@label) (lTe5a@syntax-violation '#f '"multiple definitions of identifier" lTed8@id)) (void))) lTee5@t) (begin (if (lTb21@rib-cache lTed7@rib) (hashtable-update! (lTb21@rib-cache lTed7@rib) lTedf@sym (lambda (lTee9@e) (cons (cons lTee0@mark* lTed9@label) lTee9@e)) '()) (void)) (lTb13@set-rib-sym*! lTed7@rib (cons lTedf@sym lTee3@sym*)) (lTb17@set-rib-mark**! lTed7@rib (cons lTee0@mark* (lTb15@rib-mark** lTed7@rib))) (lTb1b@set-rib-label*! lTed7@rib (cons lTed9@label (lTb19@rib-label* lTed7@rib))))))))))))) (set! lT27d7@lTb29@extend-rib! lTb29@extend-rib!)) (begin (set! lTb2b@extend-rib/nc! (lambda (lTef5@rib lTef6@id lTef7@label) (let ((lTefb@sym (lTb75@id->sym lTef6@id)) (lTefc@mark* (lTb45@stx-mark* lTef6@id))) (let ((lTeff@sym* (lTb11@rib-sym* lTef5@rib))) (begin (if (lTb21@rib-cache lTef5@rib) (hashtable-update! (lTb21@rib-cache lTef5@rib) lTefb@sym (lambda (lTf01@e) (cons (cons lTefc@mark* lTef7@label) lTf01@e)) '()) (void)) (lTb13@set-rib-sym*! lTef5@rib (cons lTefb@sym lTeff@sym*)) (lTb17@set-rib-mark**! lTef5@rib (cons lTefc@mark* (lTb15@rib-mark** lTef5@rib))) (lTb1b@set-rib-label*! lTef5@rib (cons lTef7@label (lTb19@rib-label* lTef5@rib)))))))) (set! lT27d8@lTb2b@extend-rib/nc! lTb2b@extend-rib/nc!)) (begin (set! lTb2d@make-rib-map (lambda (lTf03@sym*) (let ((lTf05@ht (make-eq-hashtable))) (let lTf0b@f ((lTf07@i '0) (lTf08@sym* lTf03@sym*)) (if (null? lTf08@sym*) lTf05@ht (begin (hashtable-update! lTf05@ht (car lTf08@sym*) (lambda (lTf0d@x) (cons lTf07@i lTf0d@x)) '()) (lTf0b@f (+ lTf07@i '1) (cdr lTf08@sym*)))))))) (set! lT27d9@lTb2d@make-rib-map lTb2d@make-rib-map)) (begin (set! lTb2f@seal-rib! (lambda (lTf0f@rib) (let ((lTf11@sym* (lTb11@rib-sym* lTf0f@rib))) (if (not (null? lTf11@sym*)) (begin (lTb13@set-rib-sym*! lTf0f@rib (list->vector lTf11@sym*)) (lTb17@set-rib-mark**! lTf0f@rib (list->vector (lTb15@rib-mark** lTf0f@rib))) (lTb1b@set-rib-label*! lTf0f@rib (list->vector (lTb19@rib-label* lTf0f@rib))) (lTb1f@set-rib-sealed/freq! lTf0f@rib (lTb2d@make-rib-map lTf11@sym*))) (void))))) (set! lT27da@lTb2f@seal-rib! lTb2f@seal-rib!)) (begin (set! lTb31@unseal-rib! (lambda (lTf13@rib) (if (lTb1d@rib-sealed/freq lTf13@rib) (begin (lTb1f@set-rib-sealed/freq! lTf13@rib '#f) (lTb13@set-rib-sym*! lTf13@rib (vector->list (lTb11@rib-sym* lTf13@rib))) (lTb17@set-rib-mark**! lTf13@rib (vector->list (lTb15@rib-mark** lTf13@rib))) (lTb1b@set-rib-label*! lTf13@rib (vector->list (lTb19@rib-label* lTf13@rib)))) (void)))) (set! lT27db@lTb31@unseal-rib! lTb31@unseal-rib!)) (begin (set! lTb33@make-full-rib (lambda (lTf15@id* lTf16@label*) (let ((lTf19@r (make-simple-struct 'rib '6 (list (map lTb75@id->sym lTf15@id*) (map lTb45@stx-mark* lTf15@id*) lTf16@label* '#f '#f)))) (begin (lTb2f@seal-rib! lTf19@r) lTf19@r)))) (set! lT27dc@lTb33@make-full-rib lTb33@make-full-rib)) (begin (set! lTb35@rp (lT6ba@lT596@make-record-printer 'stx (lambda (lTf1b@x lTf1c@p lTf1d@wr) (begin (display '"#<syntax " lTf1c@p) (write (lTb87@stx->datum lTf1b@x) lTf1c@p) (let ((lTf21@expr (lTb41@stx-expr lTf1b@x))) (if (lT6b2@lT586@annotation? lTf21@expr) (let ((lTf23@src (lT6b3@lT588@annotation-source lTf21@expr))) (if (pair? lTf23@src) (begin (display '" [" lTf1c@p) (display (cdr lTf23@src) lTf1c@p) (display '" of " lTf1c@p) (display (car lTf23@src) lTf1c@p) (display '"]" lTf1c@p)) (void))) (void))) (display '">" lTf1c@p))))) (set! lT27dd@lTb35@rp lTb35@rp)) (begin (set! lTb3f@stx? (lambda (lTf25@x) (and (simple-struct? lTf25@x) (eq? (simple-struct-name lTf25@x) 'stx)))) (set! lT27de@lTb3f@stx? lTb3f@stx?)) (begin (set! lTb41@stx-expr (lambda (lTf27@x) (simple-struct-ref lTf27@x '0))) (set! lT27df@lTb41@stx-expr lTb41@stx-expr)) (begin (set! lTb43@set-stx-expr! (lambda (lTf29@x lTf2a@val) (simple-struct-set! lTf29@x '0 lTf2a@val))) (set! lT27e0@lTb43@set-stx-expr! lTb43@set-stx-expr!)) (begin (set! lTb45@stx-mark* (lambda (lTf2d@x) (simple-struct-ref lTf2d@x '1))) (set! lT27e1@lTb45@stx-mark* lTb45@stx-mark*)) (begin (set! lTb47@set-stx-mark*! (lambda (lTf2f@x lTf30@val) (simple-struct-set! lTf2f@x '1 lTf30@val))) (set! lT27e2@lTb47@set-stx-mark*! lTb47@set-stx-mark*!)) (begin (set! lTb49@stx-subst* (lambda (lTf33@x) (simple-struct-ref lTf33@x '2))) (set! lT27e3@lTb49@stx-subst* lTb49@stx-subst*)) (begin (set! lTb4b@set-stx-subst*! (lambda (lTf35@x lTf36@val) (simple-struct-set! lTf35@x '2 lTf36@val))) (set! lT27e4@lTb4b@set-stx-subst*! lTb4b@set-stx-subst*!)) (begin (set! lTb4d@stx-ae* (lambda (lTf39@x) (simple-struct-ref lTf39@x '3))) (set! lT27e5@lTb4d@stx-ae* lTb4d@stx-ae*)) (begin (set! lTb4f@set-stx-ae*! (lambda (lTf3b@x lTf3c@val) (simple-struct-set! lTf3b@x '3 lTf3c@val))) (set! lT27e6@lTb4f@set-stx-ae*! lTb4f@set-stx-ae*!)) (begin (set! lTb51@dummy '3) (set! lT27e7@lTb51@dummy lTb51@dummy)) (begin (set! lTb53@datum->stx (lambda (lTf3f@id lTf40@datum) (make-simple-struct 'stx '5 (list lTf40@datum (lTb45@stx-mark* lTf3f@id) (lTb49@stx-subst* lTf3f@id) (lTb4d@stx-ae* lTf3f@id))))) (set! lT27e8@lTb53@datum->stx lTb53@datum->stx)) (begin (set! lTb55@gen-mark (lambda () (string '#\m))) (set! lT27e9@lTb55@gen-mark lTb55@gen-mark)) (begin (set! lTb57@anti-mark '#f) (set! lT27ea@lTb57@anti-mark lTb57@anti-mark)) (begin (set! lTb59@anti-mark? not) (set! lT27eb@lTb59@anti-mark? lTb59@anti-mark?)) (begin (set! lTb5b@mkstx (lambda (lTf43@e lTf44@m* lTf45@s* lTf46@ae*) (if (and (lTb3f@stx? lTf43@e) (not (lTaf9@top-marked? lTf44@m*))) (call-with-values (lambda () (join-wraps lTf44@m* lTf45@s* lTf46@ae* lTf43@e)) (lambda (lTf51@lTf4c lTf52@lTf4e lTf53@lTf50) (let ((lTf57@ae* lTf53@lTf50) (lTf58@s* lTf52@lTf4e) (lTf59@m* lTf51@lTf4c)) (make-simple-struct 'stx '5 (list (lTb41@stx-expr lTf43@e) lTf59@m* lTf58@s* lTf57@ae*))))) (make-simple-struct 'stx '5 (list lTf43@e lTf44@m* lTf45@s* lTf46@ae*))))) (set! lT27ec@lTb5b@mkstx lTb5b@mkstx)) (begin (set! lTb5d@add-mark (lambda (lTf5d@m lTf5e@e lTf5f@ae) (lTb5b@mkstx lTf5e@e (list lTf5d@m) '(shift) (list lTf5f@ae)))) (set! lT27ed@lTb5d@add-mark lTb5d@add-mark)) (begin (set! lTb5f@add-subst (lambda (lTf63@subst lTf64@e) (lTb5b@mkstx lTf64@e '() (list lTf63@subst) '()))) (set! lT27ee@lTb5f@add-subst lTb5f@add-subst)) (begin (set! lTb61@syntax-kind? (lambda (lTf67@x lTf68@p?) (if (lTb3f@stx? lTf67@x) (lTb61@syntax-kind? (lTb41@stx-expr lTf67@x) lTf68@p?) (if (lT6b2@lT586@annotation? lTf67@x) (lTb61@syntax-kind? (lT6b4@lT58a@annotation-expression lTf67@x) lTf68@p?) (lTf68@p? lTf67@x))))) (set! lT27ef@lTb61@syntax-kind? lTb61@syntax-kind?)) (begin (set! lTb63@syntax-vector->list (lambda (lTf6b@x) (if (lTb3f@stx? lTf6b@x) (let ((lTf6d@ls (lTb63@syntax-vector->list (lTb41@stx-expr lTf6b@x))) (lTf6e@m* (lTb45@stx-mark* lTf6b@x)) (lTf6f@s* (lTb49@stx-subst* lTf6b@x)) (lTf70@ae* (lTb4d@stx-ae* lTf6b@x))) (map (lambda (lTf75@x) (lTb5b@mkstx lTf75@x lTf6e@m* lTf6f@s* lTf70@ae*)) lTf6d@ls)) (if (lT6b2@lT586@annotation? lTf6b@x) (lTb63@syntax-vector->list (lT6b4@lT58a@annotation-expression lTf6b@x)) (if (vector? lTf6b@x) (vector->list lTf6b@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" lTf6b@x)))))) (set! lT27f0@lTb63@syntax-vector->list lTb63@syntax-vector->list)) (begin (set! lTb65@syntax-pair? (lambda (lTf77@x) (lTb61@syntax-kind? lTf77@x pair?))) (set! lT27f1@lTb65@syntax-pair? lTb65@syntax-pair?)) (begin (set! lTb67@syntax-vector? (lambda (lTf79@x) (lTb61@syntax-kind? lTf79@x vector?))) (set! lT27f2@lTb67@syntax-vector? lTb67@syntax-vector?)) (begin (set! lTb69@syntax-null? (lambda (lTf7b@x) (lTb61@syntax-kind? lTf7b@x null?))) (set! lT27f3@lTb69@syntax-null? lTb69@syntax-null?)) (begin (set! lTb6b@syntax-list? (lambda (lTf7d@x) (or (lTb69@syntax-null? lTf7d@x) (and (lTb65@syntax-pair? lTf7d@x) (lTb6b@syntax-list? (lTb6f@syntax-cdr lTf7d@x)))))) (set! lT27f4@lTb6b@syntax-list? lTb6b@syntax-list?)) (begin (set! lTb6d@syntax-car (lambda (lTf7f@x) (if (lTb3f@stx? lTf7f@x) (lTb5b@mkstx (lTb6d@syntax-car (lTb41@stx-expr lTf7f@x)) (lTb45@stx-mark* lTf7f@x) (lTb49@stx-subst* lTf7f@x) (lTb4d@stx-ae* lTf7f@x)) (if (lT6b2@lT586@annotation? lTf7f@x) (lTb6d@syntax-car (lT6b4@lT58a@annotation-expression lTf7f@x)) (if (pair? lTf7f@x) (car lTf7f@x) (assertion-violation 'syntax-car '"BUG: not a pair" lTf7f@x)))))) (set! lT27f5@lTb6d@syntax-car lTb6d@syntax-car)) (begin (set! lTb6f@syntax-cdr (lambda (lTf81@x) (if (lTb3f@stx? lTf81@x) (lTb5b@mkstx (lTb6f@syntax-cdr (lTb41@stx-expr lTf81@x)) (lTb45@stx-mark* lTf81@x) (lTb49@stx-subst* lTf81@x) (lTb4d@stx-ae* lTf81@x)) (if (lT6b2@lT586@annotation? lTf81@x) (lTb6f@syntax-cdr (lT6b4@lT58a@annotation-expression lTf81@x)) (if (pair? lTf81@x) (cdr lTf81@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" lTf81@x)))))) (set! lT27f6@lTb6f@syntax-cdr lTb6f@syntax-cdr)) (begin (set! lTb71@syntax->list (lambda (lTf83@x) (if (lTb65@syntax-pair? lTf83@x) (cons (lTb6d@syntax-car lTf83@x) (lTb71@syntax->list (lTb6f@syntax-cdr lTf83@x))) (if (lTb69@syntax-null? lTf83@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" lTf83@x))))) (set! lT27f7@lTb71@syntax->list lTb71@syntax->list)) (begin (set! lTb73@id? (lambda (lTf85@x) (and (lTb3f@stx? lTf85@x) (symbol? (lTb41@stx-expr lTf85@x))))) (set! lT27f8@lTb73@id? lTb73@id?)) (begin (set! lTb75@id->sym (lambda (lTf87@x) (lTb41@stx-expr lTf87@x))) (set! lT27f9@lTb75@id->sym lTb75@id->sym)) (begin (set! lTb77@bound-id=? (lambda (lTf89@x lTf8a@y) (and (eq? (lTb75@id->sym lTf89@x) (lTb75@id->sym lTf8a@y)) (same-marks? (lTb45@stx-mark* lTf89@x) (lTb45@stx-mark* lTf8a@y))))) (set! lT27fa@lTb77@bound-id=? lTb77@bound-id=?)) (begin (set! lTb79@free-id=? (lambda (lTf8d@i lTf8e@j) (let ((lTf91@t0 (id->real-label lTf8d@i)) (lTf92@t1 (id->real-label lTf8e@j))) (if (or lTf91@t0 lTf92@t1) (eq? lTf91@t0 lTf92@t1) (eq? (lTb75@id->sym lTf8d@i) (lTb75@id->sym lTf8e@j)))))) (set! lT27fb@lTb79@free-id=? lTb79@free-id=?)) (begin (set! lTb7b@valid-bound-ids? (lambda (lTf95@id*) (and (for-all lTb73@id? lTf95@id*) (lTb7d@distinct-bound-ids? lTf95@id*)))) (set! lT27fc@lTb7b@valid-bound-ids? lTb7b@valid-bound-ids?)) (begin (set! lTb7d@distinct-bound-ids? (lambda (lTf97@id*) (or (null? lTf97@id*) (and (not (lTb7f@bound-id-member? (car lTf97@id*) (cdr lTf97@id*))) (lTb7d@distinct-bound-ids? (cdr lTf97@id*)))))) (set! lT27fd@lTb7d@distinct-bound-ids? lTb7d@distinct-bound-ids?)) (begin (set! lTb7f@bound-id-member? (lambda (lTf99@id lTf9a@id*) (and (pair? lTf9a@id*) (or (lTb77@bound-id=? lTf99@id (car lTf9a@id*)) (lTb7f@bound-id-member? lTf99@id (cdr lTf9a@id*)))))) (set! lT27fe@lTb7f@bound-id-member? lTb7f@bound-id-member?)) (begin (set! lTb81@self-evaluating? (lambda (lTf9d@x) (or (number? lTf9d@x) (string? lTf9d@x) (char? lTf9d@x) (boolean? lTf9d@x) (regexp? lTf9d@x) (bytevector? lTf9d@x)))) (set! lT27ff@lTb81@self-evaluating? lTb81@self-evaluating?)) (begin (set! lTb83@strip-annotations (lambda (lTf9f@x) (if (pair? lTf9f@x) (cons (lTb83@strip-annotations (car lTf9f@x)) (lTb83@strip-annotations (cdr lTf9f@x))) (if (vector? lTf9f@x) (vector-map lTb83@strip-annotations lTf9f@x) (if (lT6b2@lT586@annotation? lTf9f@x) (lT6b1@lT584@annotation-stripped lTf9f@x) lTf9f@x))))) (set! lT2800@lTb83@strip-annotations lTb83@strip-annotations)) (begin (set! lTb85@strip (lambda (lTfa1@x lTfa2@m*) (if (lTaf9@top-marked? lTfa2@m*) (if (or (lT6b2@lT586@annotation? lTfa1@x) (and (pair? lTfa1@x) (lT6b2@lT586@annotation? (car lTfa1@x))) (and (vector? lTfa1@x) (> (vector-length lTfa1@x) '0) (lT6b2@lT586@annotation? (vector-ref lTfa1@x '0)))) (lTb83@strip-annotations lTfa1@x) lTfa1@x) (let lTfa7@f ((lTfa5@x lTfa1@x)) (if (lTb3f@stx? lTfa5@x) (lTb85@strip (lTb41@stx-expr lTfa5@x) (lTb45@stx-mark* lTfa5@x)) (if (lT6b2@lT586@annotation? lTfa5@x) (lT6b1@lT584@annotation-stripped lTfa5@x) (if (pair? lTfa5@x) (let ((lTfa9@a (lTfa7@f (car lTfa5@x))) (lTfaa@d (lTfa7@f (cdr lTfa5@x)))) (if (and (eq? lTfa9@a (car lTfa5@x)) (eq? lTfaa@d (cdr lTfa5@x))) lTfa5@x (cons lTfa9@a lTfaa@d))) (if (vector? lTfa5@x) (let ((lTfad@old (vector->list lTfa5@x))) (let ((lTfaf@new (map lTfa7@f lTfad@old))) (if (for-all eq? lTfad@old lTfaf@new) lTfa5@x (list->vector lTfaf@new)))) lTfa5@x)))))))) (set! lT2801@lTb85@strip lTb85@strip)) (begin (set! lTb87@stx->datum (lambda (lTfb1@x) (lTb85@strip lTfb1@x '()))) (set! lT2802@lTb87@stx->datum lTb87@stx->datum)) (begin (set! lTb89@id->label (lambda (lTfb3@id) (or (id->real-label lTfb3@id) (let ((lTfb5@t (lTe6a@top-level-context))) (if lTfb5@t ((lambda (lTfb7@env) (let ((lTfb9@rib (lTe1a@interaction-env-rib lTfb7@env))) (call-with-values (lambda () (lTb03@gen-define-label+loc lTfb3@id lTfb9@rib)) (lambda (lTfbf@lTfbc lTfc0@lTfbe) (let ((lTfc3@loc_ lTfc0@lTfbe) (lTfc4@lab lTfbf@lTfbc)) (begin (lTb29@extend-rib! lTfb9@rib lTfb3@id lTfc4@lab) lTfc4@lab)))))) lTfb5@t) '#f))))) (set! lT2803@lTb89@id->label lTb89@id->label)) (begin (set! lTb8b@label->binding (lambda (lTfc7@x lTfc8@r) (let ((lTfcb@t (lT988@lT7d5@imported-label->binding lTfc7@x))) (if lTfcb@t ((lambda (lTfcd@b) (if (and (pair? lTfcd@b) (eq? (car lTfcd@b) '$core-rtd)) (cons '$rtd (map lTd30@bless (cdr lTfcd@b))) (if (and (pair? lTfcd@b) (eq? (car lTfcd@b) 'global-rtd)) (let ((lTfcf@lib (cadr lTfcd@b)) (lTfd0@loc (cddr lTfcd@b))) (cons '$rtd (symbol-value lTfd0@loc))) lTfcd@b))) lTfcb@t) (let ((lTfd3@t (assq lTfc7@x lTfc8@r))) (if lTfd3@t (cdr lTfd3@t) (let ((lTfd5@t (lTe6a@top-level-context))) (if lTfd5@t ((lambda (lTfd7@env) (let ((lTfd9@t (assq lTfc7@x (lTe22@interaction-env-locs lTfd7@env)))) (if lTfd9@t ((lambda (lTfdb@p) (cons* 'lexical (cdr lTfdb@p) '#f)) lTfd9@t) '(displaced-lexical . #f)))) lTfd5@t) '(displaced-lexical . #f))))))))) (set! lT2804@lTb8b@label->binding lTb8b@label->binding)) (begin (set! lTb8d@make-binding cons) (set! lT2805@lTb8d@make-binding lTb8d@make-binding)) (begin (set! lTb8f@binding-type car) (set! lT2806@lTb8f@binding-type lTb8f@binding-type)) (begin (set! lTb91@binding-value cdr) (set! lT2807@lTb91@binding-value lTb91@binding-value)) (begin (set! lTb93@raise-unbound-error (lambda (lTfdd@id) (lTe58@syntax-violation* '#f '"unbound identifier" lTfdd@id (lT2bfd@lT2a43@make-undefined-violation)))) (set! lT2808@lTb93@raise-unbound-error lTb93@raise-unbound-error)) (begin (set! lTb95@syntax-type (lambda (lTfdf@e lTfe0@r) (if (lTb73@id? lTfdf@e) (let ((lTfe3@id lTfdf@e)) (let ((lTfe5@label (lTb89@id->label lTfe3@id))) (let ((lTfe7@b (lTb8b@label->binding lTfe5@label lTfe0@r))) (let ((lTfe9@type (lTb8f@binding-type lTfe7@b))) (begin (if (not lTfe5@label) (lTb93@raise-unbound-error lTfe3@id) (void)) (let ((lTfeb@t lTfe9@type)) (if (memv lTfeb@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values lTfe9@type (lTb91@binding-value lTfe7@b) lTfe3@id) (values 'other '#f '#f)))))))) (if (lTb65@syntax-pair? lTfdf@e) (let ((lTfed@id (lTb6d@syntax-car lTfdf@e))) (if (lTb73@id? lTfed@id) (let ((lTfef@label (lTb89@id->label lTfed@id))) (let ((lTff1@b (lTb8b@label->binding lTfef@label lTfe0@r))) (let ((lTff3@type (lTb8f@binding-type lTff1@b))) (begin (if (not lTfef@label) (lTb93@raise-unbound-error lTfed@id) (void)) (let ((lTff5@t lTff3@type)) (if (memv lTff5@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values lTff3@type (lTb91@binding-value lTff1@b) lTfed@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((lTff7@d (lTb87@stx->datum lTfdf@e))) (if (lTb81@self-evaluating? lTff7@d) (values 'constant lTff7@d '#f) (values 'other '#f '#f))))))) (set! lT2809@lTb95@syntax-type lTb95@syntax-type)) (begin (set! lTba3@sanitize-binding (lambda (lTff9@x lTffa@src) (if (procedure? lTff9@x) (cons* 'local-macro lTff9@x lTffa@src) (if (and (pair? lTff9@x) (eq? (car lTff9@x) 'macro!) (procedure? (cdr lTff9@x))) (cons* 'local-macro! (cdr lTff9@x) lTffa@src) (if (and (pair? lTff9@x) (eq? (car lTff9@x) '$rtd)) lTff9@x (assertion-violation 'expand '"invalid transformer" lTff9@x)))))) (set! lT280a@lTba3@sanitize-binding lTba3@sanitize-binding)) (begin (set! lTba5@make-variable-transformer (lambda (lTffd@x) (if (procedure? lTffd@x) (cons 'macro! lTffd@x) (assertion-violation 'make-variable-transformer '"not a procedure" lTffd@x)))) (set! lT280b@lTba5@make-variable-transformer lTba5@make-variable-transformer)) (begin (set! lTba7@variable-transformer? (lambda (lTfff@x) (and (pair? lTfff@x) (eq? (car lTfff@x) 'macro!) (procedure? (cdr lTfff@x))))) (set! lT280c@lTba7@variable-transformer? lTba7@variable-transformer?)) (begin (set! lTba9@variable-transformer-procedure (lambda (lT1001@x) (if (lTba7@variable-transformer? lT1001@x) (cdr lT1001@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" lT1001@x)))) (set! lT280d@lTba9@variable-transformer-procedure lTba9@variable-transformer-procedure)) (begin (set! lTbab@make-eval-transformer (lambda (lT1003@x) (lTba3@sanitize-binding (eval-core (lT713@lT6cb@expanded->core lT1003@x)) lT1003@x))) (set! lT280e@lTbab@make-eval-transformer lTbab@make-eval-transformer)) (begin (set! lTcfc@parse-define (lambda (lT1005@x) (let ((lT1007@t lT1005@x)) (let ((lT1009@ls/false (lTd7a@syntax-dispatch lT1007@t '(_ (any . any) any . each-any)))) (if (and lT1009@ls/false (apply (lambda (lT100b@id lT100c@fmls lT100d@b lT100e@b*) (lTb73@id? lT100b@id)) lT1009@ls/false)) (apply (lambda (lT1013@id lT1014@fmls lT1015@b lT1016@b*) (begin (lTda0@verify-formals lT1014@fmls lT1005@x) (values lT1013@id (cons 'defun (cons lT1014@fmls (cons lT1015@b lT1016@b*)))))) lT1009@ls/false) (let ((lT101b@t lT1007@t)) (let ((lT101d@ls/false (lTd7a@syntax-dispatch lT101b@t '(_ any any)))) (if (and lT101d@ls/false (apply (lambda (lT101f@id lT1020@val) (lTb73@id? lT101f@id)) lT101d@ls/false)) (apply (lambda (lT1023@id lT1024@val) (values lT1023@id (cons 'expr lT1024@val))) lT101d@ls/false) (let ((lT1027@t lT101b@t)) (let ((lT1029@ls/false (lTd7a@syntax-dispatch lT1027@t '(_ any)))) (if (and lT1029@ls/false (apply (lambda (lT102b@id) (lTb73@id? lT102b@id)) lT1029@ls/false)) (apply (lambda (lT102d@id) (values lT102d@id (cons 'expr (lTd30@bless '(void))))) lT1029@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1027@t)))))))))))) (set! lT280f@lTcfc@parse-define lTcfc@parse-define)) (begin (set! lTcfe@parse-define-syntax (lambda (lT102f@x) (let ((lT1031@t lT102f@x)) (let ((lT1033@ls/false (lTd7a@syntax-dispatch lT1031@t '(_ any any)))) (if (and lT1033@ls/false (apply (lambda (lT1035@id lT1036@val) (lTb73@id? lT1035@id)) lT1033@ls/false)) (apply (lambda (lT1039@id lT103a@val) (values lT1039@id lT103a@val)) lT1033@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1031@t)))))) (set! lT2810@lTcfe@parse-define-syntax lTcfe@parse-define-syntax)) (begin (set! lTd00@scheme-stx-hashtable (make-eq-hashtable)) (set! lT2811@lTd00@scheme-stx-hashtable lTd00@scheme-stx-hashtable)) (begin (set! lTd02@scheme-stx (lambda (lT103d@sym) (or (hashtable-ref lTd00@scheme-stx-hashtable lT103d@sym '#f) (let ((lT103f@subst (lT964@lT78d@library-subst (lT982@lT7c9@find-library-by-name '(psyntax system $all))))) (let ((lT1041@stx (make-simple-struct 'stx '5 (list lT103d@sym lTaf7@top-mark* '() '())))) (let ((lT1043@stx (let ((lT1045@t (assq lT103d@sym lT103f@subst))) (if lT1045@t ((lambda (lT1047@x) (let ((lT1049@name (car lT1047@x)) (lT104a@label (cdr lT1047@x))) (lTb5f@add-subst (make-simple-struct 'rib '6 (list (list lT1049@name) (list lTaf7@top-mark*) (list lT104a@label) '#f '#f)) lT1041@stx))) lT1045@t) lT1041@stx)))) (begin (hashtable-set! lTd00@scheme-stx-hashtable lT103d@sym lT1043@stx) lT1043@stx))))))) (set! lT2812@lTd02@scheme-stx lTd02@scheme-stx)) (begin (set! lTd04@lexical-var car) (set! lT2813@lTd04@lexical-var lTd04@lexical-var)) (begin (set! lTd06@lexical-mutable? cdr) (set! lT2814@lTd06@lexical-mutable? lTd06@lexical-mutable?)) (begin (set! lTd08@set-lexical-mutable! set-cdr!) (set! lT2815@lTd08@set-lexical-mutable! lTd08@set-lexical-mutable!)) (begin (set! lTd0a@add-lexical (lambda (lT104d@lab lT104e@lex lT104f@r) (cons (cons* lT104d@lab 'lexical lT104e@lex '#f) lT104f@r))) (set! lT2816@lTd0a@add-lexical lTd0a@add-lexical)) (begin (set! lTd0c@add-lexicals (lambda (lT1053@lab* lT1054@lex* lT1055@r) (if (null? lT1053@lab*) lT1055@r (lTd0c@add-lexicals (cdr lT1053@lab*) (cdr lT1054@lex*) (lTd0a@add-lexical (car lT1053@lab*) (car lT1054@lex*) lT1055@r))))) (set! lT2817@lTd0c@add-lexicals lTd0c@add-lexicals)) (begin (set! lTd0e@letrec-helper (lambda (lT1059@e lT105a@r lT105b@mr lT105c@build) (let ((lT1061@t lT1059@e)) (let ((lT1063@ls/false (lTd7a@syntax-dispatch lT1061@t '(_ #(each (any any)) any . each-any)))) (if lT1063@ls/false (apply (lambda (lT1065@lhs* lT1066@rhs* lT1067@b lT1068@b*) (if (not (lTb7b@valid-bound-ids? lT1065@lhs*)) (lTd34@invalid-fmls-error lT1059@e lT1065@lhs*) (let ((lT106d@lex* (map lTafb@gen-lexical lT1065@lhs*)) (lT106e@lab* (map lTaff@gen-label lT1065@lhs*))) (let ((lT1071@rib (lTb33@make-full-rib lT1065@lhs* lT106e@lab*)) (lT1072@r (lTd0c@add-lexicals lT106e@lab* lT106d@lex* lT105a@r))) (let ((lT1075@body (lTdb2@chi-internal (lTb5f@add-subst lT1071@rib (cons lT1067@b lT1068@b*)) lT1072@r lT105b@mr)) (lT1076@rhs* (lTd98@chi-expr* (map (lambda (lT1079@x) (lTb5f@add-subst lT1071@rib lT1079@x)) lT1066@rhs*) lT1072@r lT105b@mr))) (lT105c@build '#f lT106d@lex* lT1076@rhs* lT1075@body)))))) lT1063@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1061@t)))))) (set! lT2818@lTd0e@letrec-helper lTd0e@letrec-helper)) (begin (set! lTd10@let-transformer (lambda (lT107b@e lT107c@r lT107d@mr) (let ((lT1081@t lT107b@e)) (let ((lT1083@ls/false (lTd7a@syntax-dispatch lT1081@t '(_ #(each (any any)) any . each-any)))) (if lT1083@ls/false (apply (lambda (lT1085@lhs* lT1086@rhs* lT1087@b lT1088@b*) (if (not (lTb7b@valid-bound-ids? lT1085@lhs*)) (lTd34@invalid-fmls-error lT107b@e lT1085@lhs*) (let ((lT108d@lex* (map lTafb@gen-lexical lT1085@lhs*)) (lT108e@lab* (map lTaff@gen-label lT1085@lhs*)) (lT108f@rhs* (lTd98@chi-expr* lT1086@rhs* lT107c@r lT107d@mr))) (let ((lT1093@rib (lTb33@make-full-rib lT1085@lhs* lT108e@lab*)) (lT1094@r (lTd0c@add-lexicals lT108e@lab* lT108d@lex* lT107c@r))) (let ((lT1097@body (lTdb2@chi-internal (lTb5f@add-subst lT1093@rib (cons lT1087@b lT1088@b*)) lT1094@r lT107d@mr))) (lTadb@lTa38@build-let '#f lT108d@lex* lT108f@rhs* lT1097@body)))))) lT1083@ls/false) (let ((lT1099@t lT1081@t)) (let ((lT109b@ls/false (lTd7a@syntax-dispatch lT1099@t '(_ any #(each (any any)) any . each-any)))) (if lT109b@ls/false (apply (lambda (lT109d@loop lT109e@lhs* lT109f@rhs* lT10a0@b lT10a1@b*) (if (not (lTb7b@valid-bound-ids? lT109e@lhs*)) (lTd34@invalid-fmls-error lT107b@e lT109e@lhs*) (let ((lT10a7@lex* (map lTafb@gen-lexical lT109e@lhs*)) (lT10a8@lab* (map lTaff@gen-label lT109e@lhs*)) (lT10a9@rhs* (lTd98@chi-expr* lT109f@rhs* lT107c@r lT107d@mr)) (lT10aa@loop-lex (lTafb@gen-lexical lT109d@loop)) (lT10ab@loop-lab (lTaff@gen-label lT109d@loop))) (let ((lT10b1@rib (lTb33@make-full-rib (cons lT109d@loop lT109e@lhs*) (cons lT10ab@loop-lab lT10a8@lab*))) (lT10b2@r (lTd0c@add-lexicals (cons lT10ab@loop-lab lT10a8@lab*) (cons lT10aa@loop-lex lT10a7@lex*) lT107c@r))) (let ((lT10b5@body (lTdb2@chi-internal (lTb5f@add-subst lT10b1@rib (cons lT10a0@b lT10a1@b*)) lT10b2@r lT107d@mr))) (lTadc@lTa3a@build-named-let '#f lT10aa@loop-lex lT10a7@lex* lT10a9@rhs* lT10b5@body)))))) lT109b@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1099@t))))))))) (set! lT2819@lTd10@let-transformer lTd10@let-transformer)) (begin (set! lTd12@letrec-transformer (lambda (lT10b7@e lT10b8@r lT10b9@mr) (lTd0e@letrec-helper lT10b7@e lT10b8@r lT10b9@mr lTada@lTa36@build-letrec))) (set! lT281a@lTd12@letrec-transformer lTd12@letrec-transformer)) (begin (set! lTd14@letrec*-transformer (lambda (lT10bd@e lT10be@r lT10bf@mr) (lTd0e@letrec-helper lT10bd@e lT10be@r lT10bf@mr lTadd@lTa3c@build-letrec*))) (set! lT281b@lTd14@letrec*-transformer lTd14@letrec*-transformer)) (begin (set! lTd16@fluid-let-syntax-transformer (lambda (lT10c3@e lT10c4@r lT10c5@mr) (let ((lT10ca@lookup '#f)) (begin (set! lT10ca@lookup (lambda (lT10dd@x) (or (lTb89@id->label lT10dd@x) (lTe5a@syntax-violation '#f '"unbound identifier" lT10c3@e lT10dd@x)))) (let ((lT10cb@t lT10c3@e)) (let ((lT10cd@ls/false (lTd7a@syntax-dispatch lT10cb@t '(_ #(each (any any)) any . each-any)))) (if lT10cd@ls/false (apply (lambda (lT10cf@lhs* lT10d0@rhs* lT10d1@b lT10d2@b*) (if (not (lTb7b@valid-bound-ids? lT10cf@lhs*)) (lTd34@invalid-fmls-error lT10c3@e lT10cf@lhs*) (let ((lT10d7@lab* (map lT10ca@lookup lT10cf@lhs*)) (lT10d8@rhs* (map (lambda (lT10db@x) (lTbab@make-eval-transformer (lTdd4@expand-transformer lT10db@x lT10c5@mr))) lT10d0@rhs*))) (lTdb2@chi-internal (cons lT10d1@b lT10d2@b*) (append (map cons lT10d7@lab* lT10d8@rhs*) lT10c4@r) (append (map cons lT10d7@lab* lT10d8@rhs*) lT10c5@mr))))) lT10cd@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT10cb@t)))))))) (set! lT281c@lTd16@fluid-let-syntax-transformer lTd16@fluid-let-syntax-transformer)) (begin (set! lTd18@type-descriptor-transformer (lambda (lT10df@e lT10e0@r lT10e1@mr) (let ((lT10e5@t lT10df@e)) (let ((lT10e7@ls/false (lTd7a@syntax-dispatch lT10e5@t '(_ any)))) (if (and lT10e7@ls/false (apply (lambda (lT10e9@id) (lTb73@id? lT10e9@id)) lT10e7@ls/false)) (apply (lambda (lT10eb@id) (let ((lT10ed@lab (lTb89@id->label lT10eb@id))) (let ((lT10ef@b (lTb8b@label->binding lT10ed@lab lT10e0@r))) (let ((lT10f1@type (lTb8f@binding-type lT10ef@b))) (begin (if (not lT10ed@lab) (lTb93@raise-unbound-error lT10eb@id) (void)) (if (not (and (eq? lT10f1@type '$rtd) (not (list? (lTb91@binding-value lT10ef@b))))) (lTe5a@syntax-violation '#f '"not a record type" lT10df@e) (void)) (list 'quote (lTb91@binding-value lT10ef@b))))))) lT10e7@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT10e5@t)))))) (set! lT281d@lTd18@type-descriptor-transformer lTd18@type-descriptor-transformer)) (begin (set! lTd1a@record-type-descriptor-transformer (lambda (lT10f3@e lT10f4@r lT10f5@mr) (let ((lT10f9@t lT10f3@e)) (let ((lT10fb@ls/false (lTd7a@syntax-dispatch lT10f9@t '(_ any)))) (if (and lT10fb@ls/false (apply (lambda (lT10fd@id) (lTb73@id? lT10fd@id)) lT10fb@ls/false)) (apply (lambda (lT10ff@id) (let ((lT1101@lab (lTb89@id->label lT10ff@id))) (let ((lT1103@b (lTb8b@label->binding lT1101@lab lT10f4@r))) (let ((lT1105@type (lTb8f@binding-type lT1103@b))) (begin (if (not lT1101@lab) (lTb93@raise-unbound-error lT10ff@id) (void)) (if (not (and (eq? lT1105@type '$rtd) (list? (lTb91@binding-value lT1103@b)))) (lTe5a@syntax-violation '#f '"not a record type" lT10f3@e) (void)) (lTd9c@chi-expr (car (lTb91@binding-value lT1103@b)) lT10f4@r lT10f5@mr)))))) lT10fb@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT10f9@t)))))) (set! lT281e@lTd1a@record-type-descriptor-transformer lTd1a@record-type-descriptor-transformer)) (begin (set! lTd1c@record-constructor-descriptor-transformer (lambda (lT1107@e lT1108@r lT1109@mr) (let ((lT110d@t lT1107@e)) (let ((lT110f@ls/false (lTd7a@syntax-dispatch lT110d@t '(_ any)))) (if (and lT110f@ls/false (apply (lambda (lT1111@id) (lTb73@id? lT1111@id)) lT110f@ls/false)) (apply (lambda (lT1113@id) (let ((lT1115@lab (lTb89@id->label lT1113@id))) (let ((lT1117@b (lTb8b@label->binding lT1115@lab lT1108@r))) (let ((lT1119@type (lTb8f@binding-type lT1117@b))) (begin (if (not lT1115@lab) (lTb93@raise-unbound-error lT1113@id) (void)) (if (not (and (eq? lT1119@type '$rtd) (list? (lTb91@binding-value lT1117@b)))) (lTe5a@syntax-violation '#f '"invalid type" lT1107@e) (void)) (lTd9c@chi-expr (cadr (lTb91@binding-value lT1117@b)) lT1108@r lT1109@mr)))))) lT110f@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT110d@t)))))) (set! lT281f@lTd1c@record-constructor-descriptor-transformer lTd1c@record-constructor-descriptor-transformer)) (begin (set! lTd1e@when-macro (lambda (lT111b@e) (let ((lT111d@t lT111b@e)) (let ((lT111f@ls/false (lTd7a@syntax-dispatch lT111d@t '(_ any any . each-any)))) (if lT111f@ls/false (apply (lambda (lT1121@test lT1122@e lT1123@e*) (lTd30@bless (list 'if lT1121@test (cons 'begin (cons lT1122@e lT1123@e*))))) lT111f@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT111d@t)))))) (set! lT2820@lTd1e@when-macro lTd1e@when-macro)) (begin (set! lTd20@unless-macro (lambda (lT1127@e) (let ((lT1129@t lT1127@e)) (let ((lT112b@ls/false (lTd7a@syntax-dispatch lT1129@t '(_ any any . each-any)))) (if lT112b@ls/false (apply (lambda (lT112d@test lT112e@e lT112f@e*) (lTd30@bless (list 'if (list 'not lT112d@test) (cons 'begin (cons lT112e@e lT112f@e*))))) lT112b@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1129@t)))))) (set! lT2821@lTd20@unless-macro lTd20@unless-macro)) (begin (set! lTd22@if-transformer (lambda (lT1133@e lT1134@r lT1135@mr) (let ((lT1139@t lT1133@e)) (let ((lT113b@ls/false (lTd7a@syntax-dispatch lT1139@t '(_ any any any)))) (if lT113b@ls/false (apply (lambda (lT113d@e0 lT113e@e1 lT113f@e2) (list 'if (lTd9c@chi-expr lT113d@e0 lT1134@r lT1135@mr) (lTd9c@chi-expr lT113e@e1 lT1134@r lT1135@mr) (lTd9c@chi-expr lT113f@e2 lT1134@r lT1135@mr))) lT113b@ls/false) (let ((lT1143@t lT1139@t)) (let ((lT1145@ls/false (lTd7a@syntax-dispatch lT1143@t '(_ any any)))) (if lT1145@ls/false (apply (lambda (lT1147@e0 lT1148@e1) (list 'if (lTd9c@chi-expr lT1147@e0 lT1134@r lT1135@mr) (lTd9c@chi-expr lT1148@e1 lT1134@r lT1135@mr) (lTad9@lTa34@build-void))) lT1145@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1143@t))))))))) (set! lT2822@lTd22@if-transformer lTd22@if-transformer)) (begin (set! lTd24@and-transformer (lambda (lT114b@e lT114c@r lT114d@mr) (let ((lT1151@t lT114b@e)) (let ((lT1153@ls/false (lTd7a@syntax-dispatch lT1151@t '(_ . each-any)))) (if lT1153@ls/false (apply (lambda (lT1155@e*) (cons 'and (lTd98@chi-expr* lT1155@e* lT114c@r lT114d@mr))) lT1153@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1151@t)))))) (set! lT2823@lTd24@and-transformer lTd24@and-transformer)) (begin (set! lTd26@or-transformer (lambda (lT1157@e lT1158@r lT1159@mr) (let ((lT115d@t lT1157@e)) (let ((lT115f@ls/false (lTd7a@syntax-dispatch lT115d@t '(_ . each-any)))) (if lT115f@ls/false (apply (lambda (lT1161@e*) (cons 'or (lTd98@chi-expr* lT1161@e* lT1158@r lT1159@mr))) lT115f@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT115d@t)))))) (set! lT2824@lTd26@or-transformer lTd26@or-transformer)) (begin (set! lTd28@case-macro (lambda (lT1163@e) (let ((lT1166@build-last '#f) (lT1168@build-one '#f)) (begin (set! lT1166@build-last (lambda (lT118d@cls) (let ((lT118f@t lT118d@cls)) (let ((lT1191@ls/false (lTd7a@syntax-dispatch lT118f@t '(#(scheme-id else) any . each-any)))) (if lT1191@ls/false (apply (lambda (lT1193@e lT1194@e*) (cons 'begin (cons lT1193@e lT1194@e*))) lT1191@ls/false) (let ((lT1197@t lT118f@t)) (let ((lT1199@ls/false (lTd7a@syntax-dispatch lT1197@t '_))) (if lT1199@ls/false (apply (lambda () (lT1168@build-one lT118d@cls '(if #f #f))) lT1199@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1197@t))))))))) (set! lT1168@build-one (lambda (lT117f@cls lT1180@k) (let ((lT1183@t lT117f@cls)) (let ((lT1185@ls/false (lTd7a@syntax-dispatch lT1183@t '(each-any any . each-any)))) (if lT1185@ls/false (apply (lambda (lT1187@d* lT1188@e lT1189@e*) (list 'if (list 'memv 't (list 'quote lT1187@d*)) (cons 'begin (cons lT1188@e lT1189@e*)) lT1180@k)) lT1185@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1183@t)))))) (let ((lT1169@t lT1163@e)) (let ((lT116b@ls/false (lTd7a@syntax-dispatch lT1169@t '(_ any)))) (if lT116b@ls/false (apply (lambda (lT116d@expr) (lTd30@bless (cons 'let (cons (list (list 't lT116d@expr)) '((if #f #f)))))) lT116b@ls/false) (let ((lT116f@t lT1169@t)) (let ((lT1171@ls/false (lTd7a@syntax-dispatch lT116f@t '(_ any any . each-any)))) (if lT1171@ls/false (apply (lambda (lT1173@expr lT1174@cls lT1175@cls*) (lTd30@bless (list 'let (list (list 't lT1173@expr)) (let lT117d@f ((lT1179@cls lT1174@cls) (lT117a@cls* lT1175@cls*)) (if (null? lT117a@cls*) (lT1166@build-last lT1179@cls) (lT1168@build-one lT1179@cls (lT117d@f (car lT117a@cls*) (cdr lT117a@cls*)))))))) lT1171@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT116f@t))))))))))) (set! lT2825@lTd28@case-macro lTd28@case-macro)) (begin (set! lTd2a@quote-transformer (lambda (lT119b@e lT119c@r lT119d@mr) (let ((lT11a1@t lT119b@e)) (let ((lT11a3@ls/false (lTd7a@syntax-dispatch lT11a1@t '(_ any)))) (if lT11a3@ls/false (apply (lambda (lT11a5@datum) (list 'quote (lTb87@stx->datum lT11a5@datum))) lT11a3@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT11a1@t)))))) (set! lT2826@lTd2a@quote-transformer lTd2a@quote-transformer)) (begin (set! lTd2c@case-lambda-transformer (lambda (lT11a7@e lT11a8@r lT11a9@mr) (let ((lT11ad@t lT11a7@e)) (let ((lT11af@ls/false (lTd7a@syntax-dispatch lT11ad@t '(_ . #(each (any any . each-any)))))) (if lT11af@ls/false (apply (lambda (lT11b1@fmls* lT11b2@b* lT11b3@b**) (call-with-values (lambda () (lTda4@chi-lambda-clause* lT11a7@e lT11b1@fmls* (map cons lT11b2@b* lT11b3@b**) lT11a8@r lT11a9@mr)) (lambda (lT11bb@lT11b8 lT11bc@lT11ba) (let ((lT11bf@body* lT11bc@lT11ba) (lT11c0@fmls* lT11bb@lT11b8)) (lTad7@lTa04@build-case-lambda '#f lT11c0@fmls* lT11bf@body*))))) lT11af@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT11ad@t)))))) (set! lT2827@lTd2c@case-lambda-transformer lTd2c@case-lambda-transformer)) (begin (set! lTd2e@lambda-transformer (lambda (lT11c3@e lT11c4@r lT11c5@mr) (let ((lT11c9@t lT11c3@e)) (let ((lT11cb@ls/false (lTd7a@syntax-dispatch lT11c9@t '(_ any any . each-any)))) (if lT11cb@ls/false (apply (lambda (lT11cd@fmls lT11ce@b lT11cf@b*) (call-with-values (lambda () (lTda2@chi-lambda-clause lT11c3@e lT11cd@fmls (cons lT11ce@b lT11cf@b*) lT11c4@r lT11c5@mr)) (lambda (lT11d7@lT11d4 lT11d8@lT11d6) (let ((lT11db@body lT11d8@lT11d6) (lT11dc@fmls lT11d7@lT11d4)) (lTad6@lTa02@build-lambda '#f lT11dc@fmls lT11db@body))))) lT11cb@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT11c9@t)))))) (set! lT2828@lTd2e@lambda-transformer lTd2e@lambda-transformer)) (begin (set! lTd30@bless (lambda (lT11df@x) (lTb5b@mkstx (let lT11e3@f ((lT11e1@x lT11df@x)) (if (lTb3f@stx? lT11e1@x) lT11e1@x (if (pair? lT11e1@x) (cons (lT11e3@f (car lT11e1@x)) (lT11e3@f (cdr lT11e1@x))) (if (symbol? lT11e1@x) (lTd02@scheme-stx lT11e1@x) (if (vector? lT11e1@x) (vector-map lT11e3@f lT11e1@x) lT11e1@x))))) '() '() '()))) (set! lT2829@lTd30@bless lTd30@bless)) (begin (set! lTd32@with-syntax-macro (lambda (lT11e5@e) (let ((lT11e7@t lT11e5@e)) (let ((lT11e9@ls/false (lTd7a@syntax-dispatch lT11e7@t '(_ #(each (any any)) any . each-any)))) (if lT11e9@ls/false (apply (lambda (lT11eb@pat* lT11ec@expr* lT11ed@b lT11ee@b*) (let ((lT11f3@idn* (let lT11f7@f ((lT11f5@pat* lT11eb@pat*)) (if (null? lT11f5@pat*) '() (call-with-values (lambda () (lTd78@convert-pattern (car lT11f5@pat*) '())) (lambda (lT11fd@lT11fa lT11fe@lT11fc) (let ((lT1201@idn* lT11fe@lT11fc) (lT1202@pat lT11fd@lT11fa)) (append lT1201@idn* (lT11f7@f (cdr lT11f5@pat*)))))))))) (begin (lTda0@verify-formals (map car lT11f3@idn*) lT11e5@e) (let ((lT1205@t* (lTe48@generate-temporaries lT11ec@expr*))) (lTd30@bless (list 'let (map list lT1205@t* lT11ec@expr*) (let lT120b@f ((lT1207@pat* lT11eb@pat*) (lT1208@t* lT1205@t*)) (if (null? lT1207@pat*) (cons 'begin (cons '#f (cons lT11ed@b lT11ee@b*))) (list 'syntax-case (car lT1208@t*) '() (list (car lT1207@pat*) (lT120b@f (cdr lT1207@pat*) (cdr lT1208@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car lT1207@pat*)) (car lT1208@t*)))))))))))) lT11e9@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT11e7@t)))))) (set! lT282a@lTd32@with-syntax-macro lTd32@with-syntax-macro)) (begin (set! lTd34@invalid-fmls-error (lambda (lT120d@stx lT120e@fmls) (let ((lT1211@t lT120e@fmls)) (let ((lT1213@ls/false (lTd7a@syntax-dispatch lT1211@t '#(each+ any () any)))) (if lT1213@ls/false (apply (lambda (lT1215@id* lT1216@last) (let lT121b@f ((lT1219@id* (if (lTb73@id? lT1216@last) (cons lT1216@last lT1215@id*) (if (lTb69@syntax-null? lT1216@last) lT1215@id* (lTe5a@syntax-violation '#f '"not an identifier" lT120d@stx lT1216@last))))) (if (null? lT1219@id*) (values) (if (not (lTb73@id? (car lT1219@id*))) (lTe5a@syntax-violation '#f '"not an identifier" lT120d@stx (car lT1219@id*)) (begin (lT121b@f (cdr lT1219@id*)) (if (lTb7f@bound-id-member? (car lT1219@id*) (cdr lT1219@id*)) (lTe5a@syntax-violation '#f '"duplicate binding" lT120d@stx (car lT1219@id*)) (void))))))) lT1213@ls/false) (let ((lT121d@t lT1211@t)) (let ((lT121f@ls/false (lTd7a@syntax-dispatch lT121d@t '_))) (if lT121f@ls/false (apply (lambda () (lTe5a@syntax-violation '#f '"malformed binding form" lT120d@stx lT120e@fmls)) lT121f@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT121d@t))))))))) (set! lT282b@lTd34@invalid-fmls-error lTd34@invalid-fmls-error)) (begin (set! lTd36@let-macro (lambda (lT1221@stx) (let ((lT1223@t lT1221@stx)) (let ((lT1225@ls/false (lTd7a@syntax-dispatch lT1223@t '(_ #(each (any any)) any . each-any)))) (if lT1225@ls/false (apply (lambda (lT1227@lhs* lT1228@rhs* lT1229@b lT122a@b*) (if (lTb7b@valid-bound-ids? lT1227@lhs*) (lTd30@bless (cons (cons 'lambda (cons lT1227@lhs* (cons lT1229@b lT122a@b*))) lT1228@rhs*)) (lTd34@invalid-fmls-error lT1221@stx lT1227@lhs*))) lT1225@ls/false) (let ((lT122f@t lT1223@t)) (let ((lT1231@ls/false (lTd7a@syntax-dispatch lT122f@t '(_ any #(each (any any)) any . each-any)))) (if (and lT1231@ls/false (apply (lambda (lT1233@f lT1234@lhs* lT1235@rhs* lT1236@b lT1237@b*) (lTb73@id? lT1233@f)) lT1231@ls/false)) (apply (lambda (lT123d@f lT123e@lhs* lT123f@rhs* lT1240@b lT1241@b*) (if (lTb7b@valid-bound-ids? lT123e@lhs*) (lTd30@bless (cons (list 'letrec (list (list lT123d@f (cons 'lambda (cons lT123e@lhs* (cons lT1240@b lT1241@b*))))) lT123d@f) lT123f@rhs*)) (lTd34@invalid-fmls-error lT1221@stx lT123e@lhs*))) lT1231@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT122f@t))))))))) (set! lT282c@lTd36@let-macro lTd36@let-macro)) (begin (set! lTd38@let-values-macro (lambda (lT1247@stx) (let ((lT124a@rename '#f) (lT124c@rename* '#f)) (begin (set! lT124a@rename (lambda (lT12af@x lT12b0@old* lT12b1@new*) (begin (if (not (lTb73@id? lT12af@x)) (lTe5a@syntax-violation '#f '"not an indentifier" lT1247@stx lT12af@x) (void)) (if (lTb7f@bound-id-member? lT12af@x lT12b0@old*) (lTe5a@syntax-violation '#f '"duplicate binding" lT1247@stx lT12af@x) (void)) (let ((lT12b5@y (gensym (lTe60@syntax->datum lT12af@x)))) (values lT12b5@y (cons lT12af@x lT12b0@old*) (cons lT12b5@y lT12b1@new*)))))) (set! lT124c@rename* (lambda (lT129d@x* lT129e@old* lT129f@new*) (if (null? lT129d@x*) (values '() lT129e@old* lT129f@new*) (call-with-values (lambda () (lT124a@rename (car lT129d@x*) lT129e@old* lT129f@new*)) (lambda (lT12a3@x lT12a4@old* lT12a5@new*) (call-with-values (lambda () (lT124c@rename* (cdr lT129d@x*) lT12a4@old* lT12a5@new*)) (lambda (lT12a9@x* lT12aa@old* lT12ab@new*) (values (cons lT12a3@x lT12a9@x*) lT12aa@old* lT12ab@new*)))))))) (let ((lT124d@t lT1247@stx)) (let ((lT124f@ls/false (lTd7a@syntax-dispatch lT124d@t '(_ () any . each-any)))) (if lT124f@ls/false (apply (lambda (lT1251@b lT1252@b*) (cons* (lTd30@bless 'let) '() lT1251@b lT1252@b*)) lT124f@ls/false) (let ((lT1255@t lT124d@t)) (let ((lT1257@ls/false (lTd7a@syntax-dispatch lT1255@t '(_ #(each (any any)) any . each-any)))) (if lT1257@ls/false (apply (lambda (lT1259@lhs* lT125a@rhs* lT125b@b lT125c@b*) (lTd30@bless (let lT1269@f ((lT1261@lhs* lT1259@lhs*) (lT1262@rhs* lT125a@rhs*) (lT1263@old* '()) (lT1264@new* '())) (if (null? lT1261@lhs*) (cons 'let (cons (map list lT1263@old* lT1264@new*) (cons lT125b@b lT125c@b*))) (let ((lT126b@t (car lT1261@lhs*))) (let ((lT126d@ls/false (lTd7a@syntax-dispatch lT126b@t 'each-any))) (if lT126d@ls/false (apply (lambda (lT126f@x*) (call-with-values (lambda () (lT124c@rename* lT126f@x* lT1263@old* lT1264@new*)) (lambda (lT1277@lT1272 lT1278@lT1274 lT1279@lT1276) (let ((lT127d@new* lT1279@lT1276) (lT127e@old* lT1278@lT1274) (lT127f@y* lT1277@lT1272)) (list 'call-with-values (list 'lambda '() (car lT1262@rhs*)) (list 'lambda lT127f@y* (lT1269@f (cdr lT1261@lhs*) (cdr lT1262@rhs*) lT127e@old* lT127d@new*))))))) lT126d@ls/false) (let ((lT1283@t lT126b@t)) (let ((lT1285@ls/false (lTd7a@syntax-dispatch lT1283@t '#(each+ any () any)))) (if lT1285@ls/false (apply (lambda (lT1287@x* lT1288@x) (call-with-values (lambda () (lT124a@rename lT1288@x lT1263@old* lT1264@new*)) (lambda (lT128b@y lT128c@old* lT128d@new*) (call-with-values (lambda () (lT124c@rename* lT1287@x* lT128c@old* lT128d@new*)) (lambda (lT1291@y* lT1292@old* lT1293@new*) (list 'call-with-values (list 'lambda '() (car lT1262@rhs*)) (list 'lambda (append lT1291@y* lT128b@y) (lT1269@f (cdr lT1261@lhs*) (cdr lT1262@rhs*) lT1292@old* lT1293@new*)))))))) lT1285@ls/false) (let ((lT1297@t lT1283@t)) (let ((lT1299@ls/false (lTd7a@syntax-dispatch lT1297@t 'any))) (if lT1299@ls/false (apply (lambda (lT129b@others) (lTe5a@syntax-violation '#f '"malformed bindings" lT1247@stx lT129b@others)) lT1299@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1297@t)))))))))))))) lT1257@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1255@t))))))))))) (set! lT282d@lTd38@let-values-macro lTd38@let-values-macro)) (begin (set! lTd3a@let*-values-macro (lambda (lT12b7@stx) (let ((lT12ba@check '#f)) (begin (set! lT12ba@check (lambda (lT12e9@x*) (if (not (null? lT12e9@x*)) (let ((lT12eb@x (car lT12e9@x*))) (begin (if (not (lTb73@id? lT12eb@x)) (lTe5a@syntax-violation '#f '"not an identifier" lT12b7@stx lT12eb@x) (void)) (lT12ba@check (cdr lT12e9@x*)) (if (lTb7f@bound-id-member? lT12eb@x (cdr lT12e9@x*)) (lTe5a@syntax-violation '#f '"duplicate identifier" lT12b7@stx lT12eb@x) (void)))) (void)))) (let ((lT12bb@t lT12b7@stx)) (let ((lT12bd@ls/false (lTd7a@syntax-dispatch lT12bb@t '(_ () any . each-any)))) (if lT12bd@ls/false (apply (lambda (lT12bf@b lT12c0@b*) (cons* (lTd30@bless 'let) '() lT12bf@b lT12c0@b*)) lT12bd@ls/false) (let ((lT12c3@t lT12bb@t)) (let ((lT12c5@ls/false (lTd7a@syntax-dispatch lT12c3@t '(_ #(each (any any)) any . each-any)))) (if lT12c5@ls/false (apply (lambda (lT12c7@lhs* lT12c8@rhs* lT12c9@b lT12ca@b*) (lTd30@bless (let lT12d3@f ((lT12cf@lhs* lT12c7@lhs*) (lT12d0@rhs* lT12c8@rhs*)) (if (null? lT12cf@lhs*) (cons 'begin (cons lT12c9@b lT12ca@b*)) (let ((lT12d5@t (car lT12cf@lhs*))) (let ((lT12d7@ls/false (lTd7a@syntax-dispatch lT12d5@t 'each-any))) (if lT12d7@ls/false (apply (lambda (lT12d9@x*) (begin (lT12ba@check lT12d9@x*) (list 'call-with-values (list 'lambda '() (car lT12d0@rhs*)) (list 'lambda lT12d9@x* (lT12d3@f (cdr lT12cf@lhs*) (cdr lT12d0@rhs*)))))) lT12d7@ls/false) (let ((lT12db@t lT12d5@t)) (let ((lT12dd@ls/false (lTd7a@syntax-dispatch lT12db@t '#(each+ any () any)))) (if lT12dd@ls/false (apply (lambda (lT12df@x* lT12e0@x) (begin (lT12ba@check (cons lT12e0@x lT12df@x*)) (list 'call-with-values (list 'lambda '() (car lT12d0@rhs*)) (list 'lambda (append lT12df@x* lT12e0@x) (lT12d3@f (cdr lT12cf@lhs*) (cdr lT12d0@rhs*)))))) lT12dd@ls/false) (let ((lT12e3@t lT12db@t)) (let ((lT12e5@ls/false (lTd7a@syntax-dispatch lT12e3@t 'any))) (if lT12e5@ls/false (apply (lambda (lT12e7@others) (lTe5a@syntax-violation '#f '"malformed bindings" lT12b7@stx lT12e7@others)) lT12e5@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT12e3@t)))))))))))))) lT12c5@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT12c3@t))))))))))) (set! lT282e@lTd3a@let*-values-macro lTd3a@let*-values-macro)) (begin (set! lTd3c@trace-lambda-macro (lambda (lT12ed@stx) (let ((lT12ef@t lT12ed@stx)) (let ((lT12f1@ls/false (lTd7a@syntax-dispatch lT12ef@t '(_ any each-any any . each-any)))) (if lT12f1@ls/false (apply (lambda (lT12f3@who lT12f4@fmls lT12f5@b lT12f6@b*) (if (lTb7b@valid-bound-ids? lT12f4@fmls) (lTd30@bless (list 'make-traced-procedure (list 'quote lT12f3@who) (cons 'lambda (cons lT12f4@fmls (cons lT12f5@b lT12f6@b*))))) (lTd34@invalid-fmls-error lT12ed@stx lT12f4@fmls))) lT12f1@ls/false) (let ((lT12fb@t lT12ef@t)) (let ((lT12fd@ls/false (lTd7a@syntax-dispatch lT12fb@t '(_ any #(each+ any () any) any . each-any)))) (if lT12fd@ls/false (apply (lambda (lT12ff@who lT1300@fmls lT1301@last lT1302@b lT1303@b*) (if (lTb7b@valid-bound-ids? (cons lT1301@last lT1300@fmls)) (lTd30@bless (list 'make-traced-procedure (list 'quote lT12ff@who) (cons 'lambda (cons (append lT1300@fmls lT1301@last) (cons lT1302@b lT1303@b*))))) (lTd34@invalid-fmls-error lT12ed@stx (append lT1300@fmls lT1301@last)))) lT12fd@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT12fb@t))))))))) (set! lT282f@lTd3c@trace-lambda-macro lTd3c@trace-lambda-macro)) (begin (set! lTd3e@trace-define-macro (lambda (lT1309@stx) (let ((lT130b@t lT1309@stx)) (let ((lT130d@ls/false (lTd7a@syntax-dispatch lT130b@t '(_ (any . each-any) any . each-any)))) (if lT130d@ls/false (apply (lambda (lT130f@who lT1310@fmls lT1311@b lT1312@b*) (if (lTb7b@valid-bound-ids? lT1310@fmls) (lTd30@bless (list 'define lT130f@who (list 'make-traced-procedure (list 'quote lT130f@who) (cons 'lambda (cons lT1310@fmls (cons lT1311@b lT1312@b*)))))) (lTd34@invalid-fmls-error lT1309@stx lT1310@fmls))) lT130d@ls/false) (let ((lT1317@t lT130b@t)) (let ((lT1319@ls/false (lTd7a@syntax-dispatch lT1317@t '(_ (any . #(each+ any () any)) any . each-any)))) (if lT1319@ls/false (apply (lambda (lT131b@who lT131c@fmls lT131d@last lT131e@b lT131f@b*) (if (lTb7b@valid-bound-ids? (cons lT131d@last lT131c@fmls)) (lTd30@bless (list 'define lT131b@who (list 'make-traced-procedure (list 'quote lT131b@who) (cons 'lambda (cons (append lT131c@fmls lT131d@last) (cons lT131e@b lT131f@b*)))))) (lTd34@invalid-fmls-error lT1309@stx (append lT131c@fmls lT131d@last)))) lT1319@ls/false) (let ((lT1325@t lT1317@t)) (let ((lT1327@ls/false (lTd7a@syntax-dispatch lT1325@t '(_ any any)))) (if lT1327@ls/false (apply (lambda (lT1329@who lT132a@expr) (if (lTb73@id? lT1329@who) (lTd30@bless (list 'define lT1329@who (list 'let (list (list 'v lT132a@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote lT1329@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (lTe5a@syntax-violation '#f '"invalid name" lT1309@stx))) lT1327@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1325@t)))))))))))) (set! lT2830@lTd3e@trace-define-macro lTd3e@trace-define-macro)) (begin (set! lTd40@trace-define-syntax-macro (lambda (lT132d@stx) (let ((lT132f@t lT132d@stx)) (let ((lT1331@ls/false (lTd7a@syntax-dispatch lT132f@t '(_ any any)))) (if lT1331@ls/false (apply (lambda (lT1333@who lT1334@expr) (if (lTb73@id? lT1333@who) (lTd30@bless (list 'define-syntax lT1333@who (list 'make-traced-macro (list 'quote lT1333@who) lT1334@expr))) (lTe5a@syntax-violation '#f '"invalid name" lT132d@stx))) lT1331@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT132f@t)))))) (set! lT2831@lTd40@trace-define-syntax-macro lTd40@trace-define-syntax-macro)) (begin (set! lTd42@trace-let/rec-syntax (lambda (lT1337@who) (lambda (lT1339@stx) (let ((lT133b@t lT1339@stx)) (let ((lT133d@ls/false (lTd7a@syntax-dispatch lT133b@t '(_ #(each (any any)) any . each-any)))) (if lT133d@ls/false (apply (lambda (lT133f@lhs* lT1340@rhs* lT1341@b lT1342@b*) (if (lTb7b@valid-bound-ids? lT133f@lhs*) (let ((lT1347@rhs* (map (lambda (lT1349@lhs lT134a@rhs) (list 'make-traced-macro (list 'quote lT1349@lhs) lT134a@rhs)) lT133f@lhs* lT1340@rhs*))) (lTd30@bless (cons lT1337@who (cons (map list lT133f@lhs* lT1347@rhs*) (cons lT1341@b lT1342@b*))))) (lTd34@invalid-fmls-error lT1339@stx lT133f@lhs*))) lT133d@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT133b@t))))))) (set! lT2832@lTd42@trace-let/rec-syntax lTd42@trace-let/rec-syntax)) (begin (set! lTd44@trace-let-syntax-macro (lTd42@trace-let/rec-syntax 'let-syntax)) (set! lT2833@lTd44@trace-let-syntax-macro lTd44@trace-let-syntax-macro)) (begin (set! lTd46@trace-letrec-syntax-macro (lTd42@trace-let/rec-syntax 'letrec-syntax)) (set! lT2834@lTd46@trace-letrec-syntax-macro lTd46@trace-letrec-syntax-macro)) (begin (set! lTd48@guard-macro (lambda (lT134d@x) (let ((lT1350@gen-clauses '#f)) (begin (set! lT1350@gen-clauses (lambda (lT1367@con lT1368@outerk lT1369@clause*) (let ((lT136e@f '#f) (lT1370@f* '#f)) (begin (set! lT136e@f (lambda (lT13a7@x lT13a8@k) (let ((lT13ab@t lT13a7@x)) (let ((lT13ad@ls/false (lTd7a@syntax-dispatch lT13ab@t '(any #(scheme-id =>) any)))) (if lT13ad@ls/false (apply (lambda (lT13af@e lT13b0@p) (let ((lT13b3@t (gensym))) (list 'let (list (list lT13b3@t lT13af@e)) (list 'if lT13b3@t (list lT13b0@p lT13b3@t) lT13a8@k)))) lT13ad@ls/false) (let ((lT13b5@t lT13ab@t)) (let ((lT13b7@ls/false (lTd7a@syntax-dispatch lT13b5@t '(any)))) (if lT13b7@ls/false (apply (lambda (lT13b9@e) (let ((lT13bb@t (gensym))) (list 'let (list (list lT13bb@t lT13b9@e)) (list 'if lT13bb@t lT13bb@t lT13a8@k)))) lT13b7@ls/false) (let ((lT13bd@t lT13b5@t)) (let ((lT13bf@ls/false (lTd7a@syntax-dispatch lT13bd@t '(any any . each-any)))) (if lT13bf@ls/false (apply (lambda (lT13c1@e lT13c2@v lT13c3@v*) (list 'if lT13c1@e (cons 'begin (cons lT13c2@v lT13c3@v*)) lT13a8@k)) lT13bf@ls/false) (let ((lT13c7@t lT13bd@t)) (let ((lT13c9@ls/false (lTd7a@syntax-dispatch lT13c7@t '_))) (if lT13c9@ls/false (apply (lambda () (lTe5a@syntax-violation '#f '"invalid guard clause" lT13a7@x)) lT13c9@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT13c7@t))))))))))))))) (set! lT1370@f* (lambda (lT137d@x*) (let ((lT137f@t lT137d@x*)) (let ((lT1381@ls/false (lTd7a@syntax-dispatch lT137f@t '()))) (if lT1381@ls/false (apply (lambda () (let ((lT1383@g (gensym))) (values (list lT1383@g (list 'lambda '() (list 'raise-continuable lT1367@con))) lT1383@g))) lT1381@ls/false) (let ((lT1385@t lT137f@t)) (let ((lT1387@ls/false (lTd7a@syntax-dispatch lT1385@t '((#(scheme-id else) any . each-any))))) (if lT1387@ls/false (apply (lambda (lT1389@e lT138a@e*) (values (cons 'begin (cons lT1389@e lT138a@e*)) '#f)) lT1387@ls/false) (let ((lT138d@t lT1385@t)) (let ((lT138f@ls/false (lTd7a@syntax-dispatch lT138d@t '(any . any)))) (if lT138f@ls/false (apply (lambda (lT1391@cls lT1392@cls*) (call-with-values (lambda () (lT1370@f* lT1392@cls*)) (lambda (lT1399@lT1396 lT139a@lT1398) (let ((lT139d@g lT139a@lT1398) (lT139e@e lT1399@lT1396)) (values (lT136e@f lT1391@cls lT139e@e) lT139d@g))))) lT138f@ls/false) (let ((lT13a1@t lT138d@t)) (let ((lT13a3@ls/false (lTd7a@syntax-dispatch lT13a1@t 'any))) (if lT13a3@ls/false (apply (lambda (lT13a5@others) (lTe5a@syntax-violation '#f '"invalid guard clause" lT13a5@others)) lT13a3@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT13a1@t))))))))))))))) (call-with-values (lambda () (lT1370@f* lT1369@clause*)) (lambda (lT1375@lT1372 lT1376@lT1374) (let ((lT1379@raisek lT1376@lT1374) (lT137a@code lT1375@lT1372)) (if lT1379@raisek (list (list 'call/cc (list 'lambda (list lT1379@raisek) (list lT1368@outerk (list 'lambda '() lT137a@code))))) (list lT1368@outerk (list 'lambda '() lT137a@code)))))))))) (let ((lT1351@t lT134d@x)) (let ((lT1353@ls/false (lTd7a@syntax-dispatch lT1351@t '(_ (any . each-any) any . each-any)))) (if (and lT1353@ls/false (apply (lambda (lT1355@con lT1356@clause* lT1357@b lT1358@b*) (lTb73@id? lT1355@con)) lT1353@ls/false)) (apply (lambda (lT135d@con lT135e@clause* lT135f@b lT1360@b*) (let ((lT1365@outerk (gensym))) (lTd30@bless (list (list 'call/cc (list 'lambda (list lT1365@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list lT135d@con) (lT1350@gen-clauses lT135d@con lT1365@outerk lT135e@clause*)) (cons 'lambda (cons '() (cons lT135f@b lT1360@b*))))))))))) lT1353@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1351@t)))))))) (set! lT2835@lTd48@guard-macro lTd48@guard-macro)) (begin (set! lTd4a@define-enumeration-macro (lambda (lT13cb@stx) (let ((lT13ce@set? '#f) (lT13d0@remove-dups '#f)) (begin (set! lT13ce@set? (lambda (lT13e7@x) (or (null? lT13e7@x) (and (not (memq (car lT13e7@x) (cdr lT13e7@x))) (lT13ce@set? (cdr lT13e7@x)))))) (set! lT13d0@remove-dups (lambda (lT13e5@ls) (if (null? lT13e5@ls) '() (cons (car lT13e5@ls) (lT13d0@remove-dups (remq (car lT13e5@ls) (cdr lT13e5@ls))))))) (let ((lT13d1@t lT13cb@stx)) (let ((lT13d3@ls/false (lTd7a@syntax-dispatch lT13d1@t '(_ any each-any any)))) (if (and lT13d3@ls/false (apply (lambda (lT13d5@name lT13d6@id* lT13d7@maker) (and (lTb73@id? lT13d5@name) (lTb73@id? lT13d7@maker) (for-all lTb73@id? lT13d6@id*))) lT13d3@ls/false)) (apply (lambda (lT13db@name lT13dc@id* lT13dd@maker) (let ((lT13e1@name* (lT13d0@remove-dups (lTe60@syntax->datum lT13dc@id*))) (lT13e2@mk (gensym))) (lTd30@bless (list 'begin (list 'define lT13e2@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote lT13e1@name*)))) (list 'define-syntax lT13db@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote lT13e1@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote lT13db@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax lT13dd@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote lT13dd@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote lT13e1@name*)) (cons 'syntax-violation (cons (list 'quote lT13dd@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons lT13e2@mk '('(n* ...))))))))))))) lT13d3@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT13d1@t)))))))) (set! lT2836@lTd4a@define-enumeration-macro lTd4a@define-enumeration-macro)) (begin (set! lTd4c@time-macro (lambda (lT13e9@stx) (let ((lT13eb@t lT13e9@stx)) (let ((lT13ed@ls/false (lTd7a@syntax-dispatch lT13eb@t '(_ any)))) (if lT13ed@ls/false (apply (lambda (lT13ef@expr) (lTd30@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() lT13ef@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) lT13ed@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT13eb@t)))))) (set! lT2837@lTd4c@time-macro lTd4c@time-macro)) (begin (set! lTd4e@delay-macro (lambda (lT13f1@stx) (let ((lT13f3@t lT13f1@stx)) (let ((lT13f5@ls/false (lTd7a@syntax-dispatch lT13f3@t '(_ any)))) (if lT13f5@ls/false (apply (lambda (lT13f7@expr) (lTd30@bless (list 'make-promise (list 'lambda '() lT13f7@expr)))) lT13f5@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT13f3@t)))))) (set! lT2838@lTd4e@delay-macro lTd4e@delay-macro)) (begin (set! lTd50@assert-macro (lambda (lT13f9@stx) (let ((lT13fb@t lT13f9@stx)) (let ((lT13fd@ls/false (lTd7a@syntax-dispatch lT13fb@t '(_ any)))) (if lT13fd@ls/false (apply (lambda (lT13ff@expr) (let ((lT1401@pos (or (lTe52@expression-position lT13f9@stx) (lTe52@expression-position lT13ff@expr)))) (lTd30@bless (list 'unless lT13ff@expr (list 'assertion-error (list 'quote lT13ff@expr) (list 'quote lT1401@pos)))))) lT13fd@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT13fb@t)))))) (set! lT2839@lTd50@assert-macro lTd50@assert-macro)) (begin (set! lTd52@endianness-macro (lambda (lT1403@stx) (let ((lT1405@t lT1403@stx)) (let ((lT1407@ls/false (lTd7a@syntax-dispatch lT1405@t '(_ any)))) (if lT1407@ls/false (apply (lambda (lT1409@e) (let ((lT140b@t (lTe60@syntax->datum lT1409@e))) (if (memv lT140b@t '(little)) (lTd30@bless ''little) (if (memv lT140b@t '(big)) (lTd30@bless ''big) (lTe5a@syntax-violation '#f '"endianness must be big or little" lT1403@stx))))) lT1407@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1405@t)))))) (set! lT283a@lTd52@endianness-macro lTd52@endianness-macro)) (begin (set! lTd54@identifier-syntax-macro (lambda (lT140d@stx) (let ((lT140f@t lT140d@stx)) (let ((lT1411@ls/false (lTd7a@syntax-dispatch lT140f@t '(_ any)))) (if lT1411@ls/false (apply (lambda (lT1413@expr) (lTd30@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax lT1413@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax lT1413@expr) '((syntax (e* ...)))))))))) lT1411@ls/false) (let ((lT1415@t lT140f@t)) (let ((lT1417@ls/false (lTd7a@syntax-dispatch lT1415@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and lT1417@ls/false (apply (lambda (lT1419@id1 lT141a@expr1 lT141b@id2 lT141c@expr2 lT141d@expr3) (and (lTb73@id? lT1419@id1) (lTb73@id? lT141b@id2) (lTb73@id? lT141c@expr2))) lT1417@ls/false)) (apply (lambda (lT1423@id1 lT1424@expr1 lT1425@id2 lT1426@expr2 lT1427@expr3) (lTd30@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax lT1424@expr1)) (list (list 'set! 'id lT1426@expr2) (list 'syntax lT1427@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons lT1424@expr1 '(e* ...))))))))) lT1417@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1415@t))))))))) (set! lT283b@lTd54@identifier-syntax-macro lTd54@identifier-syntax-macro)) (begin (set! lTd56@do-macro (lambda (lT142d@stx) (let ((lT1430@bind '#f)) (begin (set! lT1430@bind (lambda (lT1447@x) (let ((lT1449@t lT1447@x)) (let ((lT144b@ls/false (lTd7a@syntax-dispatch lT1449@t '(any any)))) (if lT144b@ls/false (apply (lambda (lT144d@x lT144e@init) (list lT144d@x lT144e@init lT144d@x)) lT144b@ls/false) (let ((lT1451@t lT1449@t)) (let ((lT1453@ls/false (lTd7a@syntax-dispatch lT1451@t '(any any any)))) (if lT1453@ls/false (apply (lambda (lT1455@x lT1456@init lT1457@step) (list lT1455@x lT1456@init lT1457@step)) lT1453@ls/false) (let ((lT145b@t lT1451@t)) (let ((lT145d@ls/false (lTd7a@syntax-dispatch lT145b@t '_))) (if lT145d@ls/false (apply (lambda () (lTe5a@syntax-violation '#f '"invalid binding" lT142d@stx)) lT145d@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT145b@t)))))))))))) (let ((lT1431@t lT142d@stx)) (let ((lT1433@ls/false (lTd7a@syntax-dispatch lT1431@t '(_ each-any (any . each-any) . each-any)))) (if lT1433@ls/false (apply (lambda (lT1435@binding* lT1436@test lT1437@expr* lT1438@command*) (let ((lT143d@t (map lT1430@bind lT1435@binding*))) (let ((lT143f@ls/false (lTd7a@syntax-dispatch lT143d@t '#(each (any any any))))) (if lT143f@ls/false (apply (lambda (lT1441@x* lT1442@init* lT1443@step*) (if (lTb7b@valid-bound-ids? lT1441@x*) (lTd30@bless (list 'letrec (list (list 'loop (list 'lambda lT1441@x* (list 'if lT1436@test (cons 'begin (cons '(if #f #f) lT1437@expr*)) (cons 'begin (append lT1438@command* (list (cons 'loop lT1443@step*)))))))) (cons 'loop lT1442@init*))) (lTe5a@syntax-violation '#f '"invalid bindings" lT142d@stx))) lT143f@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT143d@t))))) lT1433@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1431@t)))))))) (set! lT283c@lTd56@do-macro lTd56@do-macro)) (begin (set! lTd58@let*-macro (lambda (lT145f@stx) (let ((lT1461@t lT145f@stx)) (let ((lT1463@ls/false (lTd7a@syntax-dispatch lT1461@t '(_ #(each (any any)) any . each-any)))) (if (and lT1463@ls/false (apply (lambda (lT1465@lhs* lT1466@rhs* lT1467@b lT1468@b*) (for-all lTb73@id? lT1465@lhs*)) lT1463@ls/false)) (apply (lambda (lT146d@lhs* lT146e@rhs* lT146f@b lT1470@b*) (lTd30@bless (let lT1477@f ((lT1475@x* (map list lT146d@lhs* lT146e@rhs*))) (if (null? lT1475@x*) (cons 'let (cons '() (cons lT146f@b lT1470@b*))) (list 'let (list (car lT1475@x*)) (lT1477@f (cdr lT1475@x*))))))) lT1463@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1461@t)))))) (set! lT283d@lTd58@let*-macro lTd58@let*-macro)) (begin (set! lTd5a@or-macro (lambda (lT1479@stx) (let ((lT147b@t lT1479@stx)) (let ((lT147d@ls/false (lTd7a@syntax-dispatch lT147b@t '(_)))) (if lT147d@ls/false (apply (lambda () '#f) lT147d@ls/false) (let ((lT147f@t lT147b@t)) (let ((lT1481@ls/false (lTd7a@syntax-dispatch lT147f@t '(_ any . each-any)))) (if lT1481@ls/false (apply (lambda (lT1483@e lT1484@e*) (lTd30@bless (let lT148b@f ((lT1487@e lT1483@e) (lT1488@e* lT1484@e*)) (if (null? lT1488@e*) (list 'begin '#f lT1487@e) (list 'let (list (list 't lT1487@e)) (list 'if 't 't (lT148b@f (car lT1488@e*) (cdr lT1488@e*)))))))) lT1481@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT147f@t))))))))) (set! lT283e@lTd5a@or-macro lTd5a@or-macro)) (begin (set! lTd5c@and-macro (lambda (lT148d@stx) (let ((lT148f@t lT148d@stx)) (let ((lT1491@ls/false (lTd7a@syntax-dispatch lT148f@t '(_)))) (if lT1491@ls/false (apply (lambda () '#t) lT1491@ls/false) (let ((lT1493@t lT148f@t)) (let ((lT1495@ls/false (lTd7a@syntax-dispatch lT1493@t '(_ any . each-any)))) (if lT1495@ls/false (apply (lambda (lT1497@e lT1498@e*) (lTd30@bless (let lT149f@f ((lT149b@e lT1497@e) (lT149c@e* lT1498@e*)) (if (null? lT149c@e*) (list 'begin '#f lT149b@e) (cons 'if (cons lT149b@e (cons (lT149f@f (car lT149c@e*) (cdr lT149c@e*)) '(#f)))))))) lT1495@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1493@t))))))))) (set! lT283f@lTd5c@and-macro lTd5c@and-macro)) (begin (set! lTd5e@cond-macro (lambda (lT14a1@stx) (let ((lT14a3@t lT14a1@stx)) (let ((lT14a5@ls/false (lTd7a@syntax-dispatch lT14a3@t '(_ any . each-any)))) (if lT14a5@ls/false (apply (lambda (lT14a7@cls lT14a8@cls*) (lTd30@bless (let lT14af@f ((lT14ab@cls lT14a7@cls) (lT14ac@cls* lT14a8@cls*)) (if (null? lT14ac@cls*) (let ((lT14b1@t lT14ab@cls)) (let ((lT14b3@ls/false (lTd7a@syntax-dispatch lT14b1@t '(#(scheme-id else) any . each-any)))) (if lT14b3@ls/false (apply (lambda (lT14b5@e lT14b6@e*) (cons 'begin (cons lT14b5@e lT14b6@e*))) lT14b3@ls/false) (let ((lT14b9@t lT14b1@t)) (let ((lT14bb@ls/false (lTd7a@syntax-dispatch lT14b9@t '(any #(scheme-id =>) any)))) (if lT14bb@ls/false (apply (lambda (lT14bd@e lT14be@p) (list 'let (list (list 't lT14bd@e)) (list 'if 't (cons lT14be@p '(t))))) lT14bb@ls/false) (let ((lT14c1@t lT14b9@t)) (let ((lT14c3@ls/false (lTd7a@syntax-dispatch lT14c1@t '(any)))) (if lT14c3@ls/false (apply (lambda (lT14c5@e) (cons 'or (cons lT14c5@e '((if #f #f))))) lT14c3@ls/false) (let ((lT14c7@t lT14c1@t)) (let ((lT14c9@ls/false (lTd7a@syntax-dispatch lT14c7@t '(any . each-any)))) (if lT14c9@ls/false (apply (lambda (lT14cb@e lT14cc@e*) (list 'if lT14cb@e (cons 'begin lT14cc@e*))) lT14c9@ls/false) (let ((lT14cf@t lT14c7@t)) (let ((lT14d1@ls/false (lTd7a@syntax-dispatch lT14cf@t '_))) (if lT14d1@ls/false (apply (lambda () (lTe5a@syntax-violation '#f '"invalid last clause" lT14a1@stx)) lT14d1@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT14cf@t)))))))))))))))) (let ((lT14d3@t lT14ab@cls)) (let ((lT14d5@ls/false (lTd7a@syntax-dispatch lT14d3@t '(#(scheme-id else) any . each-any)))) (if lT14d5@ls/false (apply (lambda (lT14d7@e lT14d8@e*) (lTe5a@syntax-violation '#f '"incorrect position of keyword else" lT14a1@stx)) lT14d5@ls/false) (let ((lT14db@t lT14d3@t)) (let ((lT14dd@ls/false (lTd7a@syntax-dispatch lT14db@t '(any #(scheme-id =>) any)))) (if lT14dd@ls/false (apply (lambda (lT14df@e lT14e0@p) (list 'let (list (list 't lT14df@e)) (list 'if 't (cons lT14e0@p '(t)) (lT14af@f (car lT14ac@cls*) (cdr lT14ac@cls*))))) lT14dd@ls/false) (let ((lT14e3@t lT14db@t)) (let ((lT14e5@ls/false (lTd7a@syntax-dispatch lT14e3@t '(any)))) (if lT14e5@ls/false (apply (lambda (lT14e7@e) (list 'or lT14e7@e (lT14af@f (car lT14ac@cls*) (cdr lT14ac@cls*)))) lT14e5@ls/false) (let ((lT14e9@t lT14e3@t)) (let ((lT14eb@ls/false (lTd7a@syntax-dispatch lT14e9@t '(any . each-any)))) (if lT14eb@ls/false (apply (lambda (lT14ed@e lT14ee@e*) (list 'if lT14ed@e (cons 'begin lT14ee@e*) (lT14af@f (car lT14ac@cls*) (cdr lT14ac@cls*)))) lT14eb@ls/false) (let ((lT14f1@t lT14e9@t)) (let ((lT14f3@ls/false (lTd7a@syntax-dispatch lT14f1@t '_))) (if lT14f3@ls/false (apply (lambda () (lTe5a@syntax-violation '#f '"invalid last clause" lT14a1@stx)) lT14f3@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT14f1@t)))))))))))))))))))) lT14a5@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT14a3@t)))))) (set! lT2840@lTd5e@cond-macro lTd5e@cond-macro)) (begin (set! lTd60@do-include (lambda (lT14f5@stx lT14f6@id lT14f7@filename) (let ((lT14fb@filename (lTb87@stx->datum lT14f7@filename))) (begin (if (not (and (string? lT14fb@filename) (lTb73@id? lT14f6@id))) (lTe5a@syntax-violation '#f '"invalid syntax" lT14f5@stx) (void)) (cons (lTd30@bless 'begin) (with-input-from-file lT14fb@filename (lambda () (let lT14ff@f ((lT14fd@ls '())) (let ((lT1501@x (lT6b0@lT582@read-annotated))) (if (eof-object? lT1501@x) (reverse lT14fd@ls) (lT14ff@f (cons (lTb53@datum->stx lT14f6@id lT1501@x) lT14fd@ls)))))))))))) (set! lT2841@lTd60@do-include lTd60@do-include)) (begin (set! lTd62@include-macro (lambda (lT1503@e) (let ((lT1505@t lT1503@e)) (let ((lT1507@ls/false (lTd7a@syntax-dispatch lT1505@t '(any any)))) (if lT1507@ls/false (apply (lambda (lT1509@id lT150a@filename) (lTd60@do-include lT1503@e lT1509@id lT150a@filename)) lT1507@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1505@t)))))) (set! lT2842@lTd62@include-macro lTd62@include-macro)) (begin (set! lTd64@include-into-macro (lambda (lT150d@e) (let ((lT150f@t lT150d@e)) (let ((lT1511@ls/false (lTd7a@syntax-dispatch lT150f@t '(_ any any)))) (if lT1511@ls/false (apply (lambda (lT1513@id lT1514@filename) (lTd60@do-include lT150d@e lT1513@id lT1514@filename)) lT1511@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT150f@t)))))) (set! lT2843@lTd64@include-into-macro lTd64@include-into-macro)) (begin (set! lTd66@syntax-rules-macro (lambda (lT1517@e) (let ((lT1519@t lT1517@e)) (let ((lT151b@ls/false (lTd7a@syntax-dispatch lT1519@t '(_ each-any . #(each (any any)))))) (if lT151b@ls/false (apply (lambda (lT151d@lits lT151e@pat* lT151f@tmp*) (begin (lTd80@verify-literals lT151d@lits lT1517@e) (lTd30@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons lT151d@lits (map (lambda (lT1523@pat lT1524@tmp) (let ((lT1527@t lT1523@pat)) (let ((lT1529@ls/false (lTd7a@syntax-dispatch lT1527@t '(_ . any)))) (if lT1529@ls/false (apply (lambda (lT152b@rest) (list (cons 'g lT152b@rest) (list 'syntax lT1524@tmp))) lT1529@ls/false) (let ((lT152d@t lT1527@t)) (let ((lT152f@ls/false (lTd7a@syntax-dispatch lT152d@t '_))) (if lT152f@ls/false (apply (lambda () (lTe5a@syntax-violation '#f '"invalid syntax-rules pattern" lT1517@e lT1523@pat)) lT152f@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT152d@t)))))))) lT151e@pat* lT151f@tmp*)))))))) lT151b@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1519@t)))))) (set! lT2844@lTd66@syntax-rules-macro lTd66@syntax-rules-macro)) (begin (set! lTd68@quasiquote-macro (let ((lT1532@datum '#f) (lT154e@quasicons* '#f) (lT1550@quasicons '#f) (lT1552@quasiappend '#f) (lT1554@quasivector '#f) (lT1556@vquasi '#f) (lT1558@quasi '#f)) (begin (set! lT1532@datum (lambda (lT1633@x) (list (lTd02@scheme-stx 'quote) (lTb5b@mkstx lT1633@x '() '() '())))) (set! lT154e@quasicons* (lambda (lT162b@x lT162c@y) (let lT1631@f ((lT162f@x lT162b@x)) (if (null? lT162f@x) lT162c@y (lT1550@quasicons (car lT162f@x) (lT1631@f (cdr lT162f@x))))))) (set! lT1550@quasicons (lambda (lT1605@x lT1606@y) (let ((lT1609@t lT1606@y)) (let ((lT160b@ls/false (lTd7a@syntax-dispatch lT1609@t '(#(scheme-id quote) any)))) (if lT160b@ls/false (apply (lambda (lT160d@dy) (let ((lT160f@t lT1605@x)) (let ((lT1611@ls/false (lTd7a@syntax-dispatch lT160f@t '(#(scheme-id quote) any)))) (if lT1611@ls/false (apply (lambda (lT1613@dx) (list (lTd02@scheme-stx 'quote) (cons lT1613@dx lT160d@dy))) lT1611@ls/false) (let ((lT1615@t lT160f@t)) (let ((lT1617@ls/false (lTd7a@syntax-dispatch lT1615@t '_))) (if lT1617@ls/false (apply (lambda () (let ((lT1619@t lT160d@dy)) (let ((lT161b@ls/false (lTd7a@syntax-dispatch lT1619@t '()))) (if lT161b@ls/false (apply (lambda () (list (lTd02@scheme-stx 'list) lT1605@x)) lT161b@ls/false) (let ((lT161d@t lT1619@t)) (let ((lT161f@ls/false (lTd7a@syntax-dispatch lT161d@t '_))) (if lT161f@ls/false (apply (lambda () (list (lTd02@scheme-stx 'cons) lT1605@x lT1606@y)) lT161f@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT161d@t)))))))) lT1617@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1615@t)))))))) lT160b@ls/false) (let ((lT1621@t lT1609@t)) (let ((lT1623@ls/false (lTd7a@syntax-dispatch lT1621@t '(#(scheme-id list) . each-any)))) (if lT1623@ls/false (apply (lambda (lT1625@stuff) (cons* (lTd02@scheme-stx 'list) lT1605@x lT1625@stuff)) lT1623@ls/false) (let ((lT1627@t lT1621@t)) (let ((lT1629@ls/false (lTd7a@syntax-dispatch lT1627@t '_))) (if lT1629@ls/false (apply (lambda () (list (lTd02@scheme-stx 'cons) lT1605@x lT1606@y)) lT1629@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1627@t)))))))))))) (set! lT1552@quasiappend (lambda (lT15eb@x lT15ec@y) (let ((lT15ef@ls (let lT15f3@f ((lT15f1@x lT15eb@x)) (if (null? lT15f1@x) (let ((lT15f5@t lT15ec@y)) (let ((lT15f7@ls/false (lTd7a@syntax-dispatch lT15f5@t '(#(scheme-id quote) ())))) (if lT15f7@ls/false (apply (lambda () '()) lT15f7@ls/false) (let ((lT15f9@t lT15f5@t)) (let ((lT15fb@ls/false (lTd7a@syntax-dispatch lT15f9@t '_))) (if lT15fb@ls/false (apply (lambda () (list lT15ec@y)) lT15fb@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT15f9@t))))))) (let ((lT15fd@t (car lT15f1@x))) (let ((lT15ff@ls/false (lTd7a@syntax-dispatch lT15fd@t '(#(scheme-id quote) ())))) (if lT15ff@ls/false (apply (lambda () (lT15f3@f (cdr lT15f1@x))) lT15ff@ls/false) (let ((lT1601@t lT15fd@t)) (let ((lT1603@ls/false (lTd7a@syntax-dispatch lT1601@t '_))) (if lT1603@ls/false (apply (lambda () (cons (car lT15f1@x) (lT15f3@f (cdr lT15f1@x)))) lT1603@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1601@t))))))))))) (if (null? lT15ef@ls) (list (lTd02@scheme-stx 'quote) '()) (if (null? (cdr lT15ef@ls)) (car lT15ef@ls) (cons* (lTd02@scheme-stx 'append) lT15ef@ls)))))) (set! lT1554@quasivector (lambda (lT15b9@x) (let ((lT15bb@pat-x lT15b9@x)) (let ((lT15bd@t lT15bb@pat-x)) (let ((lT15bf@ls/false (lTd7a@syntax-dispatch lT15bd@t '(#(scheme-id quote) each-any)))) (if lT15bf@ls/false (apply (lambda (lT15c1@x*) (list (lTd02@scheme-stx 'quote) (list->vector lT15c1@x*))) lT15bf@ls/false) (let ((lT15c3@t lT15bd@t)) (let ((lT15c5@ls/false (lTd7a@syntax-dispatch lT15c3@t '_))) (if lT15c5@ls/false (apply (lambda () (let lT15cd@f ((lT15c7@x lT15b9@x) (lT15c8@k (lambda (lT15cb@ls) (cons* (lTd02@scheme-stx 'vector) lT15cb@ls)))) (let ((lT15cf@t lT15c7@x)) (let ((lT15d1@ls/false (lTd7a@syntax-dispatch lT15cf@t '(#(scheme-id quote) each-any)))) (if lT15d1@ls/false (apply (lambda (lT15d3@x*) (lT15c8@k (map (lambda (lT15d5@x) (list (lTd02@scheme-stx 'quote) lT15d5@x)) lT15d3@x*))) lT15d1@ls/false) (let ((lT15d7@t lT15cf@t)) (let ((lT15d9@ls/false (lTd7a@syntax-dispatch lT15d7@t '(#(scheme-id list) . each-any)))) (if lT15d9@ls/false (apply (lambda (lT15db@x*) (lT15c8@k lT15db@x*)) lT15d9@ls/false) (let ((lT15dd@t lT15d7@t)) (let ((lT15df@ls/false (lTd7a@syntax-dispatch lT15dd@t '(#(scheme-id cons) any any)))) (if lT15df@ls/false (apply (lambda (lT15e1@x lT15e2@y) (lT15cd@f lT15e2@y (lambda (lT15e5@ls) (lT15c8@k (cons lT15e1@x lT15e5@ls))))) lT15df@ls/false) (let ((lT15e7@t lT15dd@t)) (let ((lT15e9@ls/false (lTd7a@syntax-dispatch lT15e7@t '_))) (if lT15e9@ls/false (apply (lambda () (list (lTd02@scheme-stx 'list->vector) lT15bb@pat-x)) lT15e9@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT15e7@t))))))))))))))) lT15c5@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT15c3@t)))))))))) (set! lT1556@vquasi (lambda (lT1597@p lT1598@lev) (let ((lT159b@t lT1597@p)) (let ((lT159d@ls/false (lTd7a@syntax-dispatch lT159b@t '(any . any)))) (if lT159d@ls/false (apply (lambda (lT159f@p lT15a0@q) (let ((lT15a3@t lT159f@p)) (let ((lT15a5@ls/false (lTd7a@syntax-dispatch lT15a3@t '(#(scheme-id unquote) . each-any)))) (if lT15a5@ls/false (apply (lambda (lT15a7@p) (if (= lT1598@lev '0) (lT154e@quasicons* lT15a7@p (lT1556@vquasi lT15a0@q lT1598@lev)) (lT1550@quasicons (lT1550@quasicons (lT1532@datum 'unquote) (lT1558@quasi lT15a7@p (- lT1598@lev '1))) (lT1556@vquasi lT15a0@q lT1598@lev)))) lT15a5@ls/false) (let ((lT15a9@t lT15a3@t)) (let ((lT15ab@ls/false (lTd7a@syntax-dispatch lT15a9@t '(#(scheme-id unquote-splicing) . each-any)))) (if lT15ab@ls/false (apply (lambda (lT15ad@p) (if (= lT1598@lev '0) (lT1552@quasiappend lT15ad@p (lT1556@vquasi lT15a0@q lT1598@lev)) (lT1550@quasicons (lT1550@quasicons (lT1532@datum 'unquote-splicing) (lT1558@quasi lT15ad@p (- lT1598@lev '1))) (lT1556@vquasi lT15a0@q lT1598@lev)))) lT15ab@ls/false) (let ((lT15af@t lT15a9@t)) (let ((lT15b1@ls/false (lTd7a@syntax-dispatch lT15af@t 'any))) (if lT15b1@ls/false (apply (lambda (lT15b3@p) (lT1550@quasicons (lT1558@quasi lT15b3@p lT1598@lev) (lT1556@vquasi lT15a0@q lT1598@lev))) lT15b1@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT15af@t))))))))))) lT159d@ls/false) (let ((lT15b5@t lT159b@t)) (let ((lT15b7@ls/false (lTd7a@syntax-dispatch lT15b5@t '()))) (if lT15b7@ls/false (apply (lambda () (list (lTd02@scheme-stx 'quote) '())) lT15b7@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT15b5@t))))))))) (set! lT1558@quasi (lambda (lT1561@p lT1562@lev) (let ((lT1565@t lT1561@p)) (let ((lT1567@ls/false (lTd7a@syntax-dispatch lT1565@t '(#(scheme-id unquote) any)))) (if lT1567@ls/false (apply (lambda (lT1569@p) (if (= lT1562@lev '0) lT1569@p (lT1550@quasicons (lT1532@datum 'unquote) (lT1558@quasi (list lT1569@p) (- lT1562@lev '1))))) lT1567@ls/false) (let ((lT156b@t lT1565@t)) (let ((lT156d@ls/false (lTd7a@syntax-dispatch lT156b@t '((#(scheme-id unquote) . each-any) . any)))) (if lT156d@ls/false (apply (lambda (lT156f@p lT1570@q) (if (= lT1562@lev '0) (lT154e@quasicons* lT156f@p (lT1558@quasi lT1570@q lT1562@lev)) (lT1550@quasicons (lT1550@quasicons (lT1532@datum 'unquote) (lT1558@quasi lT156f@p (- lT1562@lev '1))) (lT1558@quasi lT1570@q lT1562@lev)))) lT156d@ls/false) (let ((lT1573@t lT156b@t)) (let ((lT1575@ls/false (lTd7a@syntax-dispatch lT1573@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if lT1575@ls/false (apply (lambda (lT1577@p lT1578@q) (if (= lT1562@lev '0) (lT1552@quasiappend lT1577@p (lT1558@quasi lT1578@q lT1562@lev)) (lT1550@quasicons (lT1550@quasicons (lT1532@datum 'unquote-splicing) (lT1558@quasi lT1577@p (- lT1562@lev '1))) (lT1558@quasi lT1578@q lT1562@lev)))) lT1575@ls/false) (let ((lT157b@t lT1573@t)) (let ((lT157d@ls/false (lTd7a@syntax-dispatch lT157b@t '(#(scheme-id quasiquote) any)))) (if lT157d@ls/false (apply (lambda (lT157f@p) (lT1550@quasicons (lT1532@datum 'quasiquote) (lT1558@quasi (list lT157f@p) (+ lT1562@lev '1)))) lT157d@ls/false) (let ((lT1581@t lT157b@t)) (let ((lT1583@ls/false (lTd7a@syntax-dispatch lT1581@t '(any . any)))) (if lT1583@ls/false (apply (lambda (lT1585@p lT1586@q) (lT1550@quasicons (lT1558@quasi lT1585@p lT1562@lev) (lT1558@quasi lT1586@q lT1562@lev))) lT1583@ls/false) (let ((lT1589@t lT1581@t)) (let ((lT158b@ls/false (lTd7a@syntax-dispatch lT1589@t '#(vector each-any)))) (if (and lT158b@ls/false (apply (lambda (lT158d@x) (not (lTb3f@stx? lT158d@x))) lT158b@ls/false)) (apply (lambda (lT158f@x) (lT1554@quasivector (lT1556@vquasi lT158f@x lT1562@lev))) lT158b@ls/false) (let ((lT1591@t lT1589@t)) (let ((lT1593@ls/false (lTd7a@syntax-dispatch lT1591@t 'any))) (if lT1593@ls/false (apply (lambda (lT1595@p) (list (lTd02@scheme-stx 'quote) lT1595@p)) lT1593@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1591@t)))))))))))))))))))))))) (lambda (lT1559@x) (let ((lT155b@t lT1559@x)) (let ((lT155d@ls/false (lTd7a@syntax-dispatch lT155b@t '(_ any)))) (if lT155d@ls/false (apply (lambda (lT155f@e) (lT1558@quasi lT155f@e '0)) lT155d@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT155b@t)))))))) (set! lT2845@lTd68@quasiquote-macro lTd68@quasiquote-macro)) (begin (set! lTd6a@quasisyntax-macro (let ((lT1636@quasi '#f)) (begin (set! lT1636@quasi (lambda (lT1651@p lT1652@lev) (let ((lT1655@t lT1651@p)) (let ((lT1657@ls/false (lTd7a@syntax-dispatch lT1655@t '(#(scheme-id unsyntax) any)))) (if lT1657@ls/false (apply (lambda (lT1659@p) (if (= lT1652@lev '0) (let ((lT165b@g (gensym))) (values (list lT165b@g) (list lT1659@p) lT165b@g)) (call-with-values (lambda () (lT1636@quasi lT1659@p (- lT1652@lev '1))) (lambda (lT1663@lT165e lT1664@lT1660 lT1665@lT1662) (let ((lT1669@p lT1665@lT1662) (lT166a@rhs* lT1664@lT1660) (lT166b@lhs* lT1663@lT165e)) (values lT166b@lhs* lT166a@rhs* (list 'unsyntax lT1669@p))))))) lT1657@ls/false) (let ((lT166f@t lT1655@t)) (let ((lT1671@ls/false (lTd7a@syntax-dispatch lT166f@t '#(scheme-id unsyntax)))) (if (and lT1671@ls/false (apply (lambda () (= lT1652@lev '0)) lT1671@ls/false)) (apply (lambda () (lTe5a@syntax-violation '#f '"incorrect use of unsyntax" lT1651@p)) lT1671@ls/false) (let ((lT1673@t lT166f@t)) (let ((lT1675@ls/false (lTd7a@syntax-dispatch lT1673@t '((#(scheme-id unsyntax) . each-any) . any)))) (if lT1675@ls/false (apply (lambda (lT1677@p* lT1678@q) (call-with-values (lambda () (lT1636@quasi lT1678@q lT1652@lev)) (lambda (lT1681@lT167c lT1682@lT167e lT1683@lT1680) (let ((lT1687@q lT1683@lT1680) (lT1688@rhs* lT1682@lT167e) (lT1689@lhs* lT1681@lT167c)) (if (= lT1652@lev '0) (let ((lT168d@g* (map (lambda (lT168f@x) (gensym)) lT1677@p*))) (values (append lT168d@g* lT1689@lhs*) (append lT1677@p* lT1688@rhs*) (append lT168d@g* lT1687@q))) (call-with-values (lambda () (lT1636@quasi lT1677@p* (- lT1652@lev '1))) (lambda (lT1697@lT1692 lT1698@lT1694 lT1699@lT1696) (let ((lT169d@p* lT1699@lT1696) (lT169e@rhs2* lT1698@lT1694) (lT169f@lhs2* lT1697@lT1692)) (values (append lT169f@lhs2* lT1689@lhs*) (append lT169e@rhs2* lT1688@rhs*) (cons (cons 'unsyntax lT169d@p*) lT1687@q)))))))))) lT1675@ls/false) (let ((lT16a3@t lT1673@t)) (let ((lT16a5@ls/false (lTd7a@syntax-dispatch lT16a3@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if lT16a5@ls/false (apply (lambda (lT16a7@p* lT16a8@q) (call-with-values (lambda () (lT1636@quasi lT16a8@q lT1652@lev)) (lambda (lT16b1@lT16ac lT16b2@lT16ae lT16b3@lT16b0) (let ((lT16b7@q lT16b3@lT16b0) (lT16b8@rhs* lT16b2@lT16ae) (lT16b9@lhs* lT16b1@lT16ac)) (if (= lT1652@lev '0) (let ((lT16bd@g* (map (lambda (lT16bf@x) (gensym)) lT16a7@p*))) (values (append (map (lambda (lT16c1@g) (cons lT16c1@g '(...))) lT16bd@g*) lT16b9@lhs*) (append lT16a7@p* lT16b8@rhs*) (append (apply append (map (lambda (lT16c3@g) (cons lT16c3@g '(...))) lT16bd@g*)) lT16b7@q))) (call-with-values (lambda () (lT1636@quasi lT16a7@p* (- lT1652@lev '1))) (lambda (lT16cb@lT16c6 lT16cc@lT16c8 lT16cd@lT16ca) (let ((lT16d1@p* lT16cd@lT16ca) (lT16d2@rhs2* lT16cc@lT16c8) (lT16d3@lhs2* lT16cb@lT16c6)) (values (append lT16d3@lhs2* lT16b9@lhs*) (append lT16d2@rhs2* lT16b8@rhs*) (cons (cons 'unsyntax-splicing lT16d1@p*) lT16b7@q)))))))))) lT16a5@ls/false) (let ((lT16d7@t lT16a3@t)) (let ((lT16d9@ls/false (lTd7a@syntax-dispatch lT16d7@t '#(scheme-id unsyntax-splicing)))) (if (and lT16d9@ls/false (apply (lambda () (= lT1652@lev '0)) lT16d9@ls/false)) (apply (lambda () (lTe5a@syntax-violation '#f '"incorrect use of unsyntax-splicing" lT1651@p)) lT16d9@ls/false) (let ((lT16db@t lT16d7@t)) (let ((lT16dd@ls/false (lTd7a@syntax-dispatch lT16db@t '(#(scheme-id quasisyntax) any)))) (if lT16dd@ls/false (apply (lambda (lT16df@p) (call-with-values (lambda () (lT1636@quasi lT16df@p (+ lT1652@lev '1))) (lambda (lT16e7@lT16e2 lT16e8@lT16e4 lT16e9@lT16e6) (let ((lT16ed@p lT16e9@lT16e6) (lT16ee@rhs* lT16e8@lT16e4) (lT16ef@lhs* lT16e7@lT16e2)) (values lT16ef@lhs* lT16ee@rhs* (list 'quasisyntax lT16ed@p)))))) lT16dd@ls/false) (let ((lT16f3@t lT16db@t)) (let ((lT16f5@ls/false (lTd7a@syntax-dispatch lT16f3@t '(any . any)))) (if lT16f5@ls/false (apply (lambda (lT16f7@p lT16f8@q) (call-with-values (lambda () (lT1636@quasi lT16f7@p lT1652@lev)) (lambda (lT1707@lT16fc lT1708@lT16fe lT1709@lT1700) (call-with-values (lambda () (lT1636@quasi lT16f8@q lT1652@lev)) (lambda (lT170d@lT1702 lT170e@lT1704 lT170f@lT1706) (let ((lT1713@q lT170f@lT1706) (lT1714@rhs2* lT170e@lT1704) (lT1715@lhs2* lT170d@lT1702) (lT1716@p lT1709@lT1700) (lT1717@rhs* lT1708@lT16fe) (lT1718@lhs* lT1707@lT16fc)) (values (append lT1715@lhs2* lT1718@lhs*) (append lT1714@rhs2* lT1717@rhs*) (cons lT1716@p lT1713@q)))))))) lT16f5@ls/false) (let ((lT171f@t lT16f3@t)) (let ((lT1721@ls/false (lTd7a@syntax-dispatch lT171f@t '#(vector each-any)))) (if lT1721@ls/false (apply (lambda (lT1723@x*) (call-with-values (lambda () (lT1636@quasi lT1723@x* lT1652@lev)) (lambda (lT172b@lT1726 lT172c@lT1728 lT172d@lT172a) (let ((lT1731@x* lT172d@lT172a) (lT1732@rhs* lT172c@lT1728) (lT1733@lhs* lT172b@lT1726)) (values lT1733@lhs* lT1732@rhs* (list->vector lT1731@x*)))))) lT1721@ls/false) (let ((lT1737@t lT171f@t)) (let ((lT1739@ls/false (lTd7a@syntax-dispatch lT1737@t '_))) (if lT1739@ls/false (apply (lambda () (values '() '() lT1651@p)) lT1739@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1737@t)))))))))))))))))))))))))))))) (lambda (lT1637@x) (let ((lT1639@t lT1637@x)) (let ((lT163b@ls/false (lTd7a@syntax-dispatch lT1639@t '(_ any)))) (if lT163b@ls/false (apply (lambda (lT163d@e) (call-with-values (lambda () (lT1636@quasi lT163d@e '0)) (lambda (lT1645@lT1640 lT1646@lT1642 lT1647@lT1644) (let ((lT164b@v lT1647@lT1644) (lT164c@rhs* lT1646@lT1642) (lT164d@lhs* lT1645@lT1640)) (lTd30@bless (list 'syntax-case (cons 'list lT164c@rhs*) '() (list lT164d@lhs* (list 'syntax lT164b@v)))))))) lT163b@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1639@t)))))))) (set! lT2846@lTd6a@quasisyntax-macro lTd6a@quasisyntax-macro)) (begin (set! lTd6c@define-struct-macro (lambda (lT173b@stx) (lTe5a@syntax-violation '#f '"define-struct not supported" lT173b@stx))) (set! lT2847@lTd6c@define-struct-macro lTd6c@define-struct-macro)) (begin (set! lTd6e@define-record-type-macro (lambda (lT173d@x) (let ((lT1740@id '#f) (lT1742@get-record-name '#f) (lT1744@get-record-constructor-name '#f) (lT1746@get-record-predicate-name '#f) (lT1748@get-clause '#f) (lT174a@foo-rtd-code '#f) (lT174c@parent-rtd-code '#f) (lT174e@parent-rcd-code '#f) (lT1750@foo-rcd-code '#f) (lT1752@get-protocol-code '#f) (lT1754@get-fields '#f) (lT1756@get-mutator-indices '#f) (lT1758@get-mutators '#f) (lT175a@get-accessors '#f) (lT175c@enumerate '#f) (lT175e@do-define-record '#f) (lT1760@verify-clauses '#f)) (begin (set! lT1740@id (lambda (lT1933@ctxt . lT1935@str*) (lTe5e@datum->syntax lT1933@ctxt (string->symbol (apply string-append (map (lambda (lT1937@x) (if (symbol? lT1937@x) (symbol->string lT1937@x) (if (string? lT1937@x) lT1937@x (assertion-violation 'define-record-type '"BUG")))) lT1935@str*)))))) (set! lT1742@get-record-name (lambda (lT1921@spec) (let ((lT1923@t lT1921@spec)) (let ((lT1925@ls/false (lTd7a@syntax-dispatch lT1923@t '(any any any)))) (if lT1925@ls/false (apply (lambda (lT1927@foo lT1928@make-foo lT1929@foo?) lT1927@foo) lT1925@ls/false) (let ((lT192d@t lT1923@t)) (let ((lT192f@ls/false (lTd7a@syntax-dispatch lT192d@t 'any))) (if lT192f@ls/false (apply (lambda (lT1931@foo) lT1931@foo) lT192f@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT192d@t))))))))) (set! lT1744@get-record-constructor-name (lambda (lT190d@spec) (let ((lT190f@t lT190d@spec)) (let ((lT1911@ls/false (lTd7a@syntax-dispatch lT190f@t '(any any any)))) (if lT1911@ls/false (apply (lambda (lT1913@foo lT1914@make-foo lT1915@foo?) lT1914@make-foo) lT1911@ls/false) (let ((lT1919@t lT190f@t)) (let ((lT191b@ls/false (lTd7a@syntax-dispatch lT1919@t 'any))) (if (and lT191b@ls/false (apply (lambda (lT191d@foo) (lTb73@id? lT191d@foo)) lT191b@ls/false)) (apply (lambda (lT191f@foo) (lT1740@id lT191f@foo '"make-" (lTb87@stx->datum lT191f@foo))) lT191b@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1919@t))))))))) (set! lT1746@get-record-predicate-name (lambda (lT18f9@spec) (let ((lT18fb@t lT18f9@spec)) (let ((lT18fd@ls/false (lTd7a@syntax-dispatch lT18fb@t '(any any any)))) (if lT18fd@ls/false (apply (lambda (lT18ff@foo lT1900@make-foo lT1901@foo?) lT1901@foo?) lT18fd@ls/false) (let ((lT1905@t lT18fb@t)) (let ((lT1907@ls/false (lTd7a@syntax-dispatch lT1905@t 'any))) (if (and lT1907@ls/false (apply (lambda (lT1909@foo) (lTb73@id? lT1909@foo)) lT1907@ls/false)) (apply (lambda (lT190b@foo) (lT1740@id lT190b@foo (lTb87@stx->datum lT190b@foo) '"?")) lT1907@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1905@t))))))))) (set! lT1748@get-clause (lambda (lT18e7@id lT18e8@ls) (let ((lT18eb@t lT18e8@ls)) (let ((lT18ed@ls/false (lTd7a@syntax-dispatch lT18eb@t '()))) (if lT18ed@ls/false (apply (lambda () '#f) lT18ed@ls/false) (let ((lT18ef@t lT18eb@t)) (let ((lT18f1@ls/false (lTd7a@syntax-dispatch lT18ef@t '((any . any) . any)))) (if lT18f1@ls/false (apply (lambda (lT18f3@x lT18f4@rest lT18f5@ls) (if (lTb79@free-id=? (lTd30@bless lT18e7@id) lT18f3@x) (cons lT18f3@x lT18f4@rest) (lT1748@get-clause lT18e7@id lT18f5@ls))) lT18f1@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT18ef@t))))))))) (set! lT174a@foo-rtd-code (lambda (lT1895@name lT1896@clause* lT1897@parent-rtd-code) (let ((lT189c@convert-field-spec* '#f)) (begin (set! lT189c@convert-field-spec* (lambda (lT18cd@ls) (list->vector (map (lambda (lT18cf@x) (let ((lT18d1@t lT18cf@x)) (let ((lT18d3@ls/false (lTd7a@syntax-dispatch lT18d1@t '(#(scheme-id mutable) any . any)))) (if lT18d3@ls/false (apply (lambda (lT18d5@name lT18d6@rest) (list 'mutable lT18d5@name)) lT18d3@ls/false) (let ((lT18d9@t lT18d1@t)) (let ((lT18db@ls/false (lTd7a@syntax-dispatch lT18d9@t '(#(scheme-id immutable) any . any)))) (if lT18db@ls/false (apply (lambda (lT18dd@name lT18de@rest) (list 'immutable lT18dd@name)) lT18db@ls/false) (let ((lT18e1@t lT18d9@t)) (let ((lT18e3@ls/false (lTd7a@syntax-dispatch lT18e1@t 'any))) (if lT18e3@ls/false (apply (lambda (lT18e5@name) (list 'immutable lT18e5@name)) lT18e3@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT18e1@t))))))))))) lT18cd@ls)))) (let ((lT189d@uid-code (let ((lT18a5@t (lT1748@get-clause 'nongenerative lT1896@clause*))) (let ((lT18a7@ls/false (lTd7a@syntax-dispatch lT18a5@t '(_)))) (if lT18a7@ls/false (apply (lambda () (list 'quote (gensym))) lT18a7@ls/false) (let ((lT18a9@t lT18a5@t)) (let ((lT18ab@ls/false (lTd7a@syntax-dispatch lT18a9@t '(_ any)))) (if lT18ab@ls/false (apply (lambda (lT18ad@uid) (list 'quote lT18ad@uid)) lT18ab@ls/false) (let ((lT18af@t lT18a9@t)) (let ((lT18b1@ls/false (lTd7a@syntax-dispatch lT18af@t '_))) (if lT18b1@ls/false (apply (lambda () '#f) lT18b1@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT18af@t))))))))))) (lT189e@sealed? (let ((lT18b3@t (lT1748@get-clause 'sealed lT1896@clause*))) (let ((lT18b5@ls/false (lTd7a@syntax-dispatch lT18b3@t '(_ #(atom #t))))) (if lT18b5@ls/false (apply (lambda () '#t) lT18b5@ls/false) (let ((lT18b7@t lT18b3@t)) (let ((lT18b9@ls/false (lTd7a@syntax-dispatch lT18b7@t '_))) (if lT18b9@ls/false (apply (lambda () '#f) lT18b9@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT18b7@t)))))))) (lT189f@opaque? (let ((lT18bb@t (lT1748@get-clause 'opaque lT1896@clause*))) (let ((lT18bd@ls/false (lTd7a@syntax-dispatch lT18bb@t '(_ #(atom #t))))) (if lT18bd@ls/false (apply (lambda () '#t) lT18bd@ls/false) (let ((lT18bf@t lT18bb@t)) (let ((lT18c1@ls/false (lTd7a@syntax-dispatch lT18bf@t '_))) (if lT18c1@ls/false (apply (lambda () '#f) lT18c1@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT18bf@t)))))))) (lT18a0@fields (let ((lT18c3@t (lT1748@get-clause 'fields lT1896@clause*))) (let ((lT18c5@ls/false (lTd7a@syntax-dispatch lT18c3@t '(_ . each-any)))) (if lT18c5@ls/false (apply (lambda (lT18c7@field-spec*) (list 'quote (lT189c@convert-field-spec* lT18c7@field-spec*))) lT18c5@ls/false) (let ((lT18c9@t lT18c3@t)) (let ((lT18cb@ls/false (lTd7a@syntax-dispatch lT18c9@t '_))) (if lT18cb@ls/false (apply (lambda () ''#()) lT18cb@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT18c9@t))))))))) (lTd30@bless (list 'make-record-type-descriptor (list 'quote lT1895@name) lT1897@parent-rtd-code lT189d@uid-code lT189e@sealed? lT189f@opaque? lT18a0@fields))))))) (set! lT174c@parent-rtd-code (lambda (lT187d@clause*) (let ((lT187f@t (lT1748@get-clause 'parent lT187d@clause*))) (let ((lT1881@ls/false (lTd7a@syntax-dispatch lT187f@t '(_ any)))) (if lT1881@ls/false (apply (lambda (lT1883@name) (list 'record-type-descriptor lT1883@name)) lT1881@ls/false) (let ((lT1885@t lT187f@t)) (let ((lT1887@ls/false (lTd7a@syntax-dispatch lT1885@t '#(atom #f)))) (if lT1887@ls/false (apply (lambda () (let ((lT1889@t (lT1748@get-clause 'parent-rtd lT187d@clause*))) (let ((lT188b@ls/false (lTd7a@syntax-dispatch lT1889@t '(_ any any)))) (if lT188b@ls/false (apply (lambda (lT188d@rtd lT188e@rcd) lT188d@rtd) lT188b@ls/false) (let ((lT1891@t lT1889@t)) (let ((lT1893@ls/false (lTd7a@syntax-dispatch lT1891@t '#(atom #f)))) (if lT1893@ls/false (apply (lambda () '#f) lT1893@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1891@t)))))))) lT1887@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1885@t))))))))) (set! lT174e@parent-rcd-code (lambda (lT1865@clause*) (let ((lT1867@t (lT1748@get-clause 'parent lT1865@clause*))) (let ((lT1869@ls/false (lTd7a@syntax-dispatch lT1867@t '(_ any)))) (if lT1869@ls/false (apply (lambda (lT186b@name) (list 'record-constructor-descriptor lT186b@name)) lT1869@ls/false) (let ((lT186d@t lT1867@t)) (let ((lT186f@ls/false (lTd7a@syntax-dispatch lT186d@t '#(atom #f)))) (if lT186f@ls/false (apply (lambda () (let ((lT1871@t (lT1748@get-clause 'parent-rtd lT1865@clause*))) (let ((lT1873@ls/false (lTd7a@syntax-dispatch lT1871@t '(_ any any)))) (if lT1873@ls/false (apply (lambda (lT1875@rtd lT1876@rcd) lT1876@rcd) lT1873@ls/false) (let ((lT1879@t lT1871@t)) (let ((lT187b@ls/false (lTd7a@syntax-dispatch lT1879@t '#(atom #f)))) (if lT187b@ls/false (apply (lambda () '#f) lT187b@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1879@t)))))))) lT186f@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT186d@t))))))))) (set! lT1750@foo-rcd-code (lambda (lT185d@clause* lT185e@foo-rtd lT185f@protocol lT1860@parent-rcd-code) (list 'make-record-constructor-descriptor lT185e@foo-rtd lT1860@parent-rcd-code lT185f@protocol))) (set! lT1752@get-protocol-code (lambda (lT1851@clause*) (let ((lT1853@t (lT1748@get-clause 'protocol lT1851@clause*))) (let ((lT1855@ls/false (lTd7a@syntax-dispatch lT1853@t '(_ any)))) (if lT1855@ls/false (apply (lambda (lT1857@expr) lT1857@expr) lT1855@ls/false) (let ((lT1859@t lT1853@t)) (let ((lT185b@ls/false (lTd7a@syntax-dispatch lT1859@t '_))) (if lT185b@ls/false (apply (lambda () '#f) lT185b@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1859@t))))))))) (set! lT1754@get-fields (lambda (lT183f@clause*) (let ((lT1841@t lT183f@clause*)) (let ((lT1843@ls/false (lTd7a@syntax-dispatch lT1841@t '()))) (if lT1843@ls/false (apply (lambda () '()) lT1843@ls/false) (let ((lT1845@t lT1841@t)) (let ((lT1847@ls/false (lTd7a@syntax-dispatch lT1845@t '((#(scheme-id fields) . each-any) . _)))) (if lT1847@ls/false (apply (lambda (lT1849@f*) lT1849@f*) lT1847@ls/false) (let ((lT184b@t lT1845@t)) (let ((lT184d@ls/false (lTd7a@syntax-dispatch lT184b@t '(_ . any)))) (if lT184d@ls/false (apply (lambda (lT184f@rest) (lT1754@get-fields lT184f@rest)) lT184d@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT184b@t)))))))))))) (set! lT1756@get-mutator-indices (lambda (lT1827@fields) (let lT182d@f ((lT1829@fields lT1827@fields) (lT182a@i '0)) (let ((lT182f@t lT1829@fields)) (let ((lT1831@ls/false (lTd7a@syntax-dispatch lT182f@t '()))) (if lT1831@ls/false (apply (lambda () '()) lT1831@ls/false) (let ((lT1833@t lT182f@t)) (let ((lT1835@ls/false (lTd7a@syntax-dispatch lT1833@t '((#(scheme-id mutable) . _) . any)))) (if lT1835@ls/false (apply (lambda (lT1837@rest) (cons lT182a@i (lT182d@f lT1837@rest (+ lT182a@i '1)))) lT1835@ls/false) (let ((lT1839@t lT1833@t)) (let ((lT183b@ls/false (lTd7a@syntax-dispatch lT1839@t '(_ . any)))) (if lT183b@ls/false (apply (lambda (lT183d@rest) (lT182d@f lT183d@rest (+ lT182a@i '1))) lT183b@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1839@t))))))))))))) (set! lT1758@get-mutators (lambda (lT17fd@foo lT17fe@fields) (let ((lT1802@gen-name '#f)) (begin (set! lT1802@gen-name (lambda (lT1825@x) (lTe5e@datum->syntax lT17fd@foo (string->symbol (string-append (symbol->string (lTe60@syntax->datum lT17fd@foo)) '"-" (symbol->string (lTe60@syntax->datum lT1825@x)) '"-set!"))))) (let lT1805@f ((lT1803@fields lT17fe@fields)) (let ((lT1807@t lT1803@fields)) (let ((lT1809@ls/false (lTd7a@syntax-dispatch lT1807@t '()))) (if lT1809@ls/false (apply (lambda () '()) lT1809@ls/false) (let ((lT180b@t lT1807@t)) (let ((lT180d@ls/false (lTd7a@syntax-dispatch lT180b@t '((#(scheme-id mutable) any any any) . any)))) (if lT180d@ls/false (apply (lambda (lT180f@name lT1810@accessor lT1811@mutator lT1812@rest) (cons lT1811@mutator (lT1805@f lT1812@rest))) lT180d@ls/false) (let ((lT1817@t lT180b@t)) (let ((lT1819@ls/false (lTd7a@syntax-dispatch lT1817@t '((#(scheme-id mutable) any) . any)))) (if lT1819@ls/false (apply (lambda (lT181b@name lT181c@rest) (cons (lT1802@gen-name lT181b@name) (lT1805@f lT181c@rest))) lT1819@ls/false) (let ((lT181f@t lT1817@t)) (let ((lT1821@ls/false (lTd7a@syntax-dispatch lT181f@t '(_ . any)))) (if lT1821@ls/false (apply (lambda (lT1823@rest) (lT1805@f lT1823@rest)) lT1821@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT181f@t)))))))))))))))))) (set! lT175a@get-accessors (lambda (lT17b9@foo lT17ba@fields) (let ((lT17be@gen-name '#f)) (begin (set! lT17be@gen-name (lambda (lT17fb@x) (lTe5e@datum->syntax lT17b9@foo (string->symbol (string-append (symbol->string (lTe60@syntax->datum lT17b9@foo)) '"-" (symbol->string (lTe60@syntax->datum lT17fb@x))))))) (map (lambda (lT17bf@field) (let ((lT17c1@t lT17bf@field)) (let ((lT17c3@ls/false (lTd7a@syntax-dispatch lT17c1@t '(#(scheme-id mutable) any any any)))) (if (and lT17c3@ls/false (apply (lambda (lT17c5@name lT17c6@accessor lT17c7@mutator) (lTb73@id? lT17c6@accessor)) lT17c3@ls/false)) (apply (lambda (lT17cb@name lT17cc@accessor lT17cd@mutator) lT17cc@accessor) lT17c3@ls/false) (let ((lT17d1@t lT17c1@t)) (let ((lT17d3@ls/false (lTd7a@syntax-dispatch lT17d1@t '(#(scheme-id immutable) any any)))) (if (and lT17d3@ls/false (apply (lambda (lT17d5@name lT17d6@accessor) (lTb73@id? lT17d6@accessor)) lT17d3@ls/false)) (apply (lambda (lT17d9@name lT17da@accessor) lT17da@accessor) lT17d3@ls/false) (let ((lT17dd@t lT17d1@t)) (let ((lT17df@ls/false (lTd7a@syntax-dispatch lT17dd@t '(#(scheme-id mutable) any)))) (if (and lT17df@ls/false (apply (lambda (lT17e1@name) (lTb73@id? lT17e1@name)) lT17df@ls/false)) (apply (lambda (lT17e3@name) (lT17be@gen-name lT17e3@name)) lT17df@ls/false) (let ((lT17e5@t lT17dd@t)) (let ((lT17e7@ls/false (lTd7a@syntax-dispatch lT17e5@t '(#(scheme-id immutable) any)))) (if (and lT17e7@ls/false (apply (lambda (lT17e9@name) (lTb73@id? lT17e9@name)) lT17e7@ls/false)) (apply (lambda (lT17eb@name) (lT17be@gen-name lT17eb@name)) lT17e7@ls/false) (let ((lT17ed@t lT17e5@t)) (let ((lT17ef@ls/false (lTd7a@syntax-dispatch lT17ed@t 'any))) (if (and lT17ef@ls/false (apply (lambda (lT17f1@name) (lTb73@id? lT17f1@name)) lT17ef@ls/false)) (apply (lambda (lT17f3@name) (lT17be@gen-name lT17f3@name)) lT17ef@ls/false) (let ((lT17f5@t lT17ed@t)) (let ((lT17f7@ls/false (lTd7a@syntax-dispatch lT17f5@t 'any))) (if lT17f7@ls/false (apply (lambda (lT17f9@others) (lTe5a@syntax-violation '#f '"invalid field spec" lT17bf@field)) lT17f7@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT17f5@t)))))))))))))))))))) lT17ba@fields))))) (set! lT175c@enumerate (lambda (lT17b1@ls) (let lT17b7@f ((lT17b3@ls lT17b1@ls) (lT17b4@i '0)) (if (null? lT17b3@ls) '() (cons lT17b4@i (lT17b7@f (cdr lT17b3@ls) (+ lT17b4@i '1))))))) (set! lT175e@do-define-record (lambda (lT1789@namespec lT178a@clause*) (let ((lT178d@foo (lT1742@get-record-name lT1789@namespec))) (let ((lT178f@foo-rtd (gensym))) (let ((lT1791@foo-rcd (gensym))) (let ((lT1793@protocol (gensym))) (let ((lT1795@make-foo (lT1744@get-record-constructor-name lT1789@namespec))) (let ((lT1797@fields (lT1754@get-fields lT178a@clause*))) (let ((lT1799@idx* (lT175c@enumerate lT1797@fields))) (let ((lT179b@foo-x* (lT175a@get-accessors lT178d@foo lT1797@fields))) (let ((lT179d@set-foo-x!* (lT1758@get-mutators lT178d@foo lT1797@fields))) (let ((lT179f@set-foo-idx* (lT1756@get-mutator-indices lT1797@fields))) (let ((lT17a1@foo? (lT1746@get-record-predicate-name lT1789@namespec))) (let ((lT17a3@foo-rtd-code (lT174a@foo-rtd-code lT178d@foo lT178a@clause* (lT174c@parent-rtd-code lT178a@clause*)))) (let ((lT17a5@foo-rcd-code (lT1750@foo-rcd-code lT178a@clause* lT178f@foo-rtd lT1793@protocol (lT174e@parent-rcd-code lT178a@clause*)))) (let ((lT17a7@protocol-code (lT1752@get-protocol-code lT178a@clause*))) (lTd30@bless (cons 'begin (cons (list 'define lT178f@foo-rtd lT17a3@foo-rtd-code) (cons (list 'define lT1793@protocol lT17a7@protocol-code) (cons (list 'define lT1791@foo-rcd lT17a5@foo-rcd-code) (cons (list 'define-syntax lT178d@foo (list 'list ''$rtd (list 'syntax lT178f@foo-rtd) (list 'syntax lT1791@foo-rcd))) (cons (list 'define lT17a1@foo? (list 'record-predicate lT178f@foo-rtd)) (cons (list 'define lT1795@make-foo (list 'record-constructor lT1791@foo-rcd)) (append (map (lambda (lT17a9@foo-x lT17aa@idx) (list 'define lT17a9@foo-x (list 'record-accessor lT178f@foo-rtd lT17aa@idx))) lT179b@foo-x* lT1799@idx*) (map (lambda (lT17ad@set-foo-x! lT17ae@idx) (list 'define lT17ad@set-foo-x! (list 'record-mutator lT178f@foo-rtd lT17ae@idx))) lT179d@set-foo-x!* lT179f@set-foo-idx*)))))))))))))))))))))))))) (set! lT1760@verify-clauses (lambda (lT1769@x lT176a@cls*) (let ((lT176e@valid-kwds '#f) (lT1770@free-id-member? '#f)) (begin (set! lT176e@valid-kwds (map lTd30@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! lT1770@free-id-member? (lambda (lT1785@x lT1786@ls) (and (pair? lT1786@ls) (or (lTb79@free-id=? lT1785@x (car lT1786@ls)) (lT1770@free-id-member? lT1785@x (cdr lT1786@ls)))))) (let lT1775@f ((lT1771@cls* lT176a@cls*) (lT1772@seen* '())) (if (not (null? lT1771@cls*)) (let ((lT1777@t (car lT1771@cls*))) (let ((lT1779@ls/false (lTd7a@syntax-dispatch lT1777@t '(any . any)))) (if lT1779@ls/false (apply (lambda (lT177b@kwd lT177c@rest) (if (or (not (lTb73@id? lT177b@kwd)) (not (lT1770@free-id-member? lT177b@kwd lT176e@valid-kwds))) (lTe5a@syntax-violation '#f '"not a valid define-record-type keyword" lT177b@kwd) (if (lTb7f@bound-id-member? lT177b@kwd lT1772@seen*) (lTe5a@syntax-violation '#f '"duplicate use of keyword " lT1769@x lT177b@kwd) (lT1775@f (cdr lT1771@cls*) (cons lT177b@kwd lT1772@seen*))))) lT1779@ls/false) (let ((lT177f@t lT1777@t)) (let ((lT1781@ls/false (lTd7a@syntax-dispatch lT177f@t 'any))) (if lT1781@ls/false (apply (lambda (lT1783@cls) (lTe5a@syntax-violation '#f '"malformed define-record-type clause" lT1783@cls)) lT1781@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT177f@t))))))) (void))))))) (let ((lT1761@t lT173d@x)) (let ((lT1763@ls/false (lTd7a@syntax-dispatch lT1761@t '(_ any . each-any)))) (if lT1763@ls/false (apply (lambda (lT1765@namespec lT1766@clause*) (begin (lT1760@verify-clauses lT173d@x lT1766@clause*) (lT175e@do-define-record lT1765@namespec lT1766@clause*))) lT1763@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1761@t)))))))) (set! lT2848@lTd6e@define-record-type-macro lTd6e@define-record-type-macro)) (begin (set! lTd70@define-condition-type-macro (lambda (lT1939@x) (let ((lT193c@mkname '#f)) (begin (set! lT193c@mkname (lambda (lT1969@name lT196a@suffix) (lTe5e@datum->syntax lT1969@name (string->symbol (string-append (symbol->string (lTe60@syntax->datum lT1969@name)) lT196a@suffix))))) (let ((lT193d@t lT1939@x)) (let ((lT193f@ls/false (lTd7a@syntax-dispatch lT193d@t '(any any any any any . #(each (any any)))))) (if (and lT193f@ls/false (apply (lambda (lT1941@ctxt lT1942@name lT1943@super lT1944@constructor lT1945@predicate lT1946@field* lT1947@accessor*) (and (lTb73@id? lT1942@name) (lTb73@id? lT1943@super) (lTb73@id? lT1944@constructor) (lTb73@id? lT1945@predicate) (for-all lTb73@id? lT1946@field*) (for-all lTb73@id? lT1947@accessor*))) lT193f@ls/false)) (apply (lambda (lT194f@ctxt lT1950@name lT1951@super lT1952@constructor lT1953@predicate lT1954@field* lT1955@accessor*) (let ((lT195d@aux-accessor* (map (lambda (lT195f@x) (gensym)) lT1955@accessor*))) (lTd30@bless (cons 'begin (cons (cons 'define-record-type (cons (list lT1950@name lT1952@constructor (gensym)) (cons (list 'parent lT1951@super) (cons (cons 'fields (map (lambda (lT1961@field lT1962@aux) (list 'immutable lT1961@field lT1962@aux)) lT1954@field* lT195d@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define lT1953@predicate (list 'condition-predicate (list 'record-type-descriptor lT1950@name))) (map (lambda (lT1965@accessor lT1966@aux) (list 'define lT1965@accessor (list 'condition-accessor (list 'record-type-descriptor lT1950@name) lT1966@aux))) lT1955@accessor* lT195d@aux-accessor*))))))) lT193f@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT193d@t)))))))) (set! lT2849@lTd70@define-condition-type-macro lTd70@define-condition-type-macro)) (begin (set! lTd72@incorrect-usage-macro (lambda (lT196d@e) (lTe5a@syntax-violation '#f '"incorrect usage of auxiliary keyword" lT196d@e))) (set! lT284a@lTd72@incorrect-usage-macro lTd72@incorrect-usage-macro)) (begin (set! lTd74@parameterize-macro (lambda (lT196f@e) (let ((lT1971@t lT196f@e)) (let ((lT1973@ls/false (lTd7a@syntax-dispatch lT1971@t '(_ () any . each-any)))) (if lT1973@ls/false (apply (lambda (lT1975@b lT1976@b*) (lTd30@bless (cons 'let (cons '() (cons lT1975@b lT1976@b*))))) lT1973@ls/false) (let ((lT1979@t lT1971@t)) (let ((lT197b@ls/false (lTd7a@syntax-dispatch lT1979@t '(_ #(each (any any)) any . each-any)))) (if lT197b@ls/false (apply (lambda (lT197d@olhs* lT197e@orhs* lT197f@b lT1980@b*) (let ((lT1985@lhs* (lTe48@generate-temporaries lT197d@olhs*)) (lT1986@rhs* (lTe48@generate-temporaries lT197e@orhs*))) (lTd30@bless (cons (list 'lambda (append lT1985@lhs* lT1986@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (lT1989@lhs lT198a@rhs) (list 'let (list (list 't (list lT1989@lhs))) (list lT1989@lhs lT198a@rhs) (cons 'set! (cons lT198a@rhs '(t))))) lT1985@lhs* lT1986@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons lT197f@b lT1980@b*))) '(swap)))))) (append lT197d@olhs* lT197e@orhs*))))) lT197b@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1979@t))))))))) (set! lT284b@lTd74@parameterize-macro lTd74@parameterize-macro)) (begin (set! lTd76@foreign-call-transformer (lambda (lT198d@e lT198e@r lT198f@mr) (let ((lT1993@t lT198d@e)) (let ((lT1995@ls/false (lTd7a@syntax-dispatch lT1993@t '(_ any . each-any)))) (if lT1995@ls/false (apply (lambda (lT1997@name lT1998@arg*) (cons 'foreign-call (cons (lTd9c@chi-expr lT1997@name lT198e@r lT198f@mr) (lTd98@chi-expr* lT1998@arg* lT198e@r lT198f@mr)))) lT1995@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1993@t)))))) (set! lT284c@lTd76@foreign-call-transformer lTd76@foreign-call-transformer)) (begin (set! lTd78@convert-pattern (lambda (lT199b@pattern lT199c@keys) (let ((lT19a0@cvt* '#f) (lT19a2@cvt '#f)) (begin (set! lT19a0@cvt* (lambda (lT1a3f@p* lT1a40@n lT1a41@ids) (if (null? lT1a3f@p*) (values '() lT1a41@ids) (call-with-values (lambda () (lT19a0@cvt* (cdr lT1a3f@p*) lT1a40@n lT1a41@ids)) (lambda (lT1a49@lT1a46 lT1a4a@lT1a48) (let ((lT1a4d@ids lT1a4a@lT1a48) (lT1a4e@y lT1a49@lT1a46)) (call-with-values (lambda () (lT19a2@cvt (car lT1a3f@p*) lT1a40@n lT1a4d@ids)) (lambda (lT1a55@lT1a52 lT1a56@lT1a54) (let ((lT1a59@ids lT1a56@lT1a54) (lT1a5a@x lT1a55@lT1a52)) (values (cons lT1a5a@x lT1a4e@y) lT1a59@ids)))))))))) (set! lT19a2@cvt (lambda (lT19a3@p lT19a4@n lT19a5@ids) (let ((lT19a9@t lT19a3@p)) (let ((lT19ab@ls/false (lTd7a@syntax-dispatch lT19a9@t 'any))) (if (and lT19ab@ls/false (apply (lambda (lT19ad@id) (lTb73@id? lT19ad@id)) lT19ab@ls/false)) (apply (lambda (lT19af@id) (if (lTb7f@bound-id-member? lT19a3@p lT199c@keys) (values (vector 'free-id lT19a3@p) lT19a5@ids) (if (lTb79@free-id=? lT19a3@p (lTd02@scheme-stx '_)) (values '_ lT19a5@ids) (values 'any (cons (cons lT19a3@p lT19a4@n) lT19a5@ids))))) lT19ab@ls/false) (let ((lT19b1@t lT19a9@t)) (let ((lT19b3@ls/false (lTd7a@syntax-dispatch lT19b1@t '(any any)))) (if (and lT19b3@ls/false (apply (lambda (lT19b5@p lT19b6@dots) (lTd7c@ellipsis? lT19b6@dots)) lT19b3@ls/false)) (apply (lambda (lT19b9@p lT19ba@dots) (call-with-values (lambda () (lT19a2@cvt lT19b9@p (+ lT19a4@n '1) lT19a5@ids)) (lambda (lT19c1@lT19be lT19c2@lT19c0) (let ((lT19c5@ids lT19c2@lT19c0) (lT19c6@p lT19c1@lT19be)) (values (if (eq? lT19c6@p 'any) 'each-any (vector 'each lT19c6@p)) lT19c5@ids))))) lT19b3@ls/false) (let ((lT19c9@t lT19b1@t)) (let ((lT19cb@ls/false (lTd7a@syntax-dispatch lT19c9@t '(any any . #(each+ any () any))))) (if (and lT19cb@ls/false (apply (lambda (lT19cd@x lT19ce@dots lT19cf@ys lT19d0@z) (lTd7c@ellipsis? lT19ce@dots)) lT19cb@ls/false)) (apply (lambda (lT19d5@x lT19d6@dots lT19d7@ys lT19d8@z) (call-with-values (lambda () (lT19a2@cvt lT19d8@z lT19a4@n lT19a5@ids)) (lambda (lT19e1@lT19de lT19e2@lT19e0) (let ((lT19e5@ids lT19e2@lT19e0) (lT19e6@z lT19e1@lT19de)) (call-with-values (lambda () (lT19a0@cvt* lT19d7@ys lT19a4@n lT19e5@ids)) (lambda (lT19ed@lT19ea lT19ee@lT19ec) (let ((lT19f1@ids lT19ee@lT19ec) (lT19f2@ys lT19ed@lT19ea)) (call-with-values (lambda () (lT19a2@cvt lT19d5@x (+ lT19a4@n '1) lT19f1@ids)) (lambda (lT19f9@lT19f6 lT19fa@lT19f8) (let ((lT19fd@ids lT19fa@lT19f8) (lT19fe@x lT19f9@lT19f6)) (values (vector 'each+ lT19fe@x (reverse lT19f2@ys) lT19e6@z) lT19fd@ids))))))))))) lT19cb@ls/false) (let ((lT1a01@t lT19c9@t)) (let ((lT1a03@ls/false (lTd7a@syntax-dispatch lT1a01@t '(any . any)))) (if lT1a03@ls/false (apply (lambda (lT1a05@x lT1a06@y) (call-with-values (lambda () (lT19a2@cvt lT1a06@y lT19a4@n lT19a5@ids)) (lambda (lT1a0d@lT1a0a lT1a0e@lT1a0c) (let ((lT1a11@ids lT1a0e@lT1a0c) (lT1a12@y lT1a0d@lT1a0a)) (call-with-values (lambda () (lT19a2@cvt lT1a05@x lT19a4@n lT1a11@ids)) (lambda (lT1a19@lT1a16 lT1a1a@lT1a18) (let ((lT1a1d@ids lT1a1a@lT1a18) (lT1a1e@x lT1a19@lT1a16)) (values (cons lT1a1e@x lT1a12@y) lT1a1d@ids)))))))) lT1a03@ls/false) (let ((lT1a21@t lT1a01@t)) (let ((lT1a23@ls/false (lTd7a@syntax-dispatch lT1a21@t '()))) (if lT1a23@ls/false (apply (lambda () (values '() lT19a5@ids)) lT1a23@ls/false) (let ((lT1a25@t lT1a21@t)) (let ((lT1a27@ls/false (lTd7a@syntax-dispatch lT1a25@t '#(vector each-any)))) (if (and lT1a27@ls/false (apply (lambda (lT1a29@p) (not (lTb3f@stx? lT1a29@p))) lT1a27@ls/false)) (apply (lambda (lT1a2b@p) (call-with-values (lambda () (lT19a2@cvt lT1a2b@p lT19a4@n lT19a5@ids)) (lambda (lT1a31@lT1a2e lT1a32@lT1a30) (let ((lT1a35@ids lT1a32@lT1a30) (lT1a36@p lT1a31@lT1a2e)) (values (vector 'vector lT1a36@p) lT1a35@ids))))) lT1a27@ls/false) (let ((lT1a39@t lT1a25@t)) (let ((lT1a3b@ls/false (lTd7a@syntax-dispatch lT1a39@t 'any))) (if lT1a3b@ls/false (apply (lambda (lT1a3d@datum) (values (vector 'atom (lTb87@stx->datum lT1a3d@datum)) lT19a5@ids)) lT1a3b@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1a39@t)))))))))))))))))))))))) (lT19a2@cvt lT199b@pattern '0 '()))))) (set! lT284d@lTd78@convert-pattern lTd78@convert-pattern)) (begin (set! lTd7a@syntax-dispatch (let ((lT1a5e@stx^ '#f) (lT1a60@match-each '#f) (lT1a62@match-each+ '#f) (lT1a64@match-each-any '#f) (lT1a66@match-empty '#f) (lT1a68@combine '#f) (lT1a6a@match* '#f) (lT1a6c@match '#f)) (begin (set! lT1a5e@stx^ (lambda (lT1b39@e lT1b3a@m* lT1b3b@s* lT1b3c@ae*) (if (and (null? lT1b3a@m*) (null? lT1b3b@s*) (null? lT1b3c@ae*)) lT1b39@e (lTb5b@mkstx lT1b39@e lT1b3a@m* lT1b3b@s* lT1b3c@ae*)))) (set! lT1a60@match-each (lambda (lT1b19@e lT1b1a@p lT1b1b@m* lT1b1c@s* lT1b1d@ae*) (if (pair? lT1b19@e) (let ((lT1b23@first (lT1a6c@match (car lT1b19@e) lT1b1a@p lT1b1b@m* lT1b1c@s* lT1b1d@ae* '()))) (and lT1b23@first (let ((lT1b25@rest (lT1a60@match-each (cdr lT1b19@e) lT1b1a@p lT1b1b@m* lT1b1c@s* lT1b1d@ae*))) (and lT1b25@rest (cons lT1b23@first lT1b25@rest))))) (if (null? lT1b19@e) '() (if (lTb3f@stx? lT1b19@e) (and (not (lTaf9@top-marked? lT1b1b@m*)) (call-with-values (lambda () (join-wraps lT1b1b@m* lT1b1c@s* lT1b1d@ae* lT1b19@e)) (lambda (lT1b2d@lT1b28 lT1b2e@lT1b2a lT1b2f@lT1b2c) (let ((lT1b33@ae* lT1b2f@lT1b2c) (lT1b34@s* lT1b2e@lT1b2a) (lT1b35@m* lT1b2d@lT1b28)) (lT1a60@match-each (lTb41@stx-expr lT1b19@e) lT1b1a@p lT1b35@m* lT1b34@s* lT1b33@ae*))))) (if (lT6b2@lT586@annotation? lT1b19@e) (lT1a60@match-each (lT6b4@lT58a@annotation-expression lT1b19@e) lT1b1a@p lT1b1b@m* lT1b1c@s* lT1b1d@ae*) '#f)))))) (set! lT1a62@match-each+ (lambda (lT1ad9@e lT1ada@x-pat lT1adb@y-pat lT1adc@z-pat lT1add@m* lT1ade@s* lT1adf@ae* lT1ae0@r) (let lT1af1@f ((lT1ae9@e lT1ad9@e) (lT1aea@m* lT1add@m*) (lT1aeb@s* lT1ade@s*) (lT1aec@ae* lT1adf@ae*)) (if (pair? lT1ae9@e) (call-with-values (lambda () (lT1af1@f (cdr lT1ae9@e) lT1aea@m* lT1aeb@s* lT1aec@ae*)) (lambda (lT1af9@lT1af4 lT1afa@lT1af6 lT1afb@lT1af8) (let ((lT1aff@r lT1afb@lT1af8) (lT1b00@y-pat lT1afa@lT1af6) (lT1b01@xr* lT1af9@lT1af4)) (if lT1aff@r (if (null? lT1b00@y-pat) (let ((lT1b05@xr (lT1a6c@match (car lT1ae9@e) lT1ada@x-pat lT1aea@m* lT1aeb@s* lT1aec@ae* '()))) (if lT1b05@xr (values (cons lT1b05@xr lT1b01@xr*) lT1b00@y-pat lT1aff@r) (values '#f '#f '#f))) (values '() (cdr lT1b00@y-pat) (lT1a6c@match (car lT1ae9@e) (car lT1b00@y-pat) lT1aea@m* lT1aeb@s* lT1aec@ae* lT1aff@r))) (values '#f '#f '#f))))) (if (lTb3f@stx? lT1ae9@e) (if (lTaf9@top-marked? lT1aea@m*) (values '() lT1adb@y-pat (lT1a6c@match lT1ae9@e lT1adc@z-pat lT1aea@m* lT1aeb@s* lT1aec@ae* lT1ae0@r)) (call-with-values (lambda () (join-wraps lT1aea@m* lT1aeb@s* lT1aec@ae* lT1ae9@e)) (lambda (lT1b0d@lT1b08 lT1b0e@lT1b0a lT1b0f@lT1b0c) (let ((lT1b13@ae* lT1b0f@lT1b0c) (lT1b14@s* lT1b0e@lT1b0a) (lT1b15@m* lT1b0d@lT1b08)) (lT1af1@f (lTb41@stx-expr lT1ae9@e) lT1b15@m* lT1b14@s* lT1b13@ae*))))) (if (lT6b2@lT586@annotation? lT1ae9@e) (lT1af1@f (lT6b4@lT58a@annotation-expression lT1ae9@e) lT1aea@m* lT1aeb@s* lT1aec@ae*) (values '() lT1adb@y-pat (lT1a6c@match lT1ae9@e lT1adc@z-pat lT1aea@m* lT1aeb@s* lT1aec@ae* lT1ae0@r)))))))) (set! lT1a64@match-each-any (lambda (lT1abd@e lT1abe@m* lT1abf@s* lT1ac0@ae*) (if (pair? lT1abd@e) (let ((lT1ac5@l (lT1a64@match-each-any (cdr lT1abd@e) lT1abe@m* lT1abf@s* lT1ac0@ae*))) (and lT1ac5@l (cons (lT1a5e@stx^ (car lT1abd@e) lT1abe@m* lT1abf@s* lT1ac0@ae*) lT1ac5@l))) (if (null? lT1abd@e) '() (if (lTb3f@stx? lT1abd@e) (and (not (lTaf9@top-marked? lT1abe@m*)) (call-with-values (lambda () (join-wraps lT1abe@m* lT1abf@s* lT1ac0@ae* lT1abd@e)) (lambda (lT1acd@lT1ac8 lT1ace@lT1aca lT1acf@lT1acc) (let ((lT1ad3@ae* lT1acf@lT1acc) (lT1ad4@s* lT1ace@lT1aca) (lT1ad5@m* lT1acd@lT1ac8)) (lT1a64@match-each-any (lTb41@stx-expr lT1abd@e) lT1ad5@m* lT1ad4@s* lT1ad3@ae*))))) (if (lT6b2@lT586@annotation? lT1abd@e) (lT1a64@match-each-any (lT6b4@lT58a@annotation-expression lT1abd@e) lT1abe@m* lT1abf@s* lT1ac0@ae*) '#f)))))) (set! lT1a66@match-empty (lambda (lT1ab7@p lT1ab8@r) (if (null? lT1ab7@p) lT1ab8@r (if (eq? lT1ab7@p '_) lT1ab8@r (if (eq? lT1ab7@p 'any) (cons '() lT1ab8@r) (if (pair? lT1ab7@p) (lT1a66@match-empty (car lT1ab7@p) (lT1a66@match-empty (cdr lT1ab7@p) lT1ab8@r)) (if (eq? lT1ab7@p 'each-any) (cons '() lT1ab8@r) (let ((lT1abb@t (vector-ref lT1ab7@p '0))) (if (memv lT1abb@t '(each)) (lT1a66@match-empty (vector-ref lT1ab7@p '1) lT1ab8@r) (if (memv lT1abb@t '(each+)) (lT1a66@match-empty (vector-ref lT1ab7@p '1) (lT1a66@match-empty (reverse (vector-ref lT1ab7@p '2)) (lT1a66@match-empty (vector-ref lT1ab7@p '3) lT1ab8@r))) (if (memv lT1abb@t '(free-id atom)) lT1ab8@r (if (memv lT1abb@t '(scheme-id atom)) lT1ab8@r (if (memv lT1abb@t '(vector)) (lT1a66@match-empty (vector-ref lT1ab7@p '1) lT1ab8@r) (assertion-violation 'syntax-dispatch '"invalid pattern" lT1ab7@p)))))))))))))) (set! lT1a68@combine (lambda (lT1ab3@r* lT1ab4@r) (if (null? (car lT1ab3@r*)) lT1ab4@r (cons (map car lT1ab3@r*) (lT1a68@combine (map cdr lT1ab3@r*) lT1ab4@r))))) (set! lT1a6a@match* (lambda (lT1a8f@e lT1a90@p lT1a91@m* lT1a92@s* lT1a93@ae* lT1a94@r) (if (null? lT1a90@p) (and (null? lT1a8f@e) lT1a94@r) (if (pair? lT1a90@p) (and (pair? lT1a8f@e) (lT1a6c@match (car lT1a8f@e) (car lT1a90@p) lT1a91@m* lT1a92@s* lT1a93@ae* (lT1a6c@match (cdr lT1a8f@e) (cdr lT1a90@p) lT1a91@m* lT1a92@s* lT1a93@ae* lT1a94@r))) (if (eq? lT1a90@p 'each-any) (let ((lT1a9b@l (lT1a64@match-each-any lT1a8f@e lT1a91@m* lT1a92@s* lT1a93@ae*))) (and lT1a9b@l (cons lT1a9b@l lT1a94@r))) (let ((lT1a9d@t (vector-ref lT1a90@p '0))) (if (memv lT1a9d@t '(each)) (if (null? lT1a8f@e) (lT1a66@match-empty (vector-ref lT1a90@p '1) lT1a94@r) (let ((lT1a9f@r* (lT1a60@match-each lT1a8f@e (vector-ref lT1a90@p '1) lT1a91@m* lT1a92@s* lT1a93@ae*))) (and lT1a9f@r* (lT1a68@combine lT1a9f@r* lT1a94@r)))) (if (memv lT1a9d@t '(free-id)) (and (symbol? lT1a8f@e) (lTaf9@top-marked? lT1a91@m*) (lTb79@free-id=? (lT1a5e@stx^ lT1a8f@e lT1a91@m* lT1a92@s* lT1a93@ae*) (vector-ref lT1a90@p '1)) lT1a94@r) (if (memv lT1a9d@t '(scheme-id)) (and (symbol? lT1a8f@e) (lTaf9@top-marked? lT1a91@m*) (lTb79@free-id=? (lT1a5e@stx^ lT1a8f@e lT1a91@m* lT1a92@s* lT1a93@ae*) (lTd02@scheme-stx (vector-ref lT1a90@p '1))) lT1a94@r) (if (memv lT1a9d@t '(each+)) (call-with-values (lambda () (lT1a62@match-each+ lT1a8f@e (vector-ref lT1a90@p '1) (vector-ref lT1a90@p '2) (vector-ref lT1a90@p '3) lT1a91@m* lT1a92@s* lT1a93@ae* lT1a94@r)) (lambda (lT1aa7@lT1aa2 lT1aa8@lT1aa4 lT1aa9@lT1aa6) (let ((lT1aad@r lT1aa9@lT1aa6) (lT1aae@y-pat lT1aa8@lT1aa4) (lT1aaf@xr* lT1aa7@lT1aa2)) (and lT1aad@r (null? lT1aae@y-pat) (if (null? lT1aaf@xr*) (lT1a66@match-empty (vector-ref lT1a90@p '1) lT1aad@r) (lT1a68@combine lT1aaf@xr* lT1aad@r)))))) (if (memv lT1a9d@t '(atom)) (and (fast-equal? (vector-ref lT1a90@p '1) (lTb85@strip lT1a8f@e lT1a91@m*)) lT1a94@r) (if (memv lT1a9d@t '(vector)) (and (vector? lT1a8f@e) (lT1a6c@match (vector->list lT1a8f@e) (vector-ref lT1a90@p '1) lT1a91@m* lT1a92@s* lT1a93@ae* lT1a94@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" lT1a90@p))))))))))))) (set! lT1a6c@match (lambda (lT1a71@e lT1a72@p lT1a73@m* lT1a74@s* lT1a75@ae* lT1a76@r) (if (not lT1a76@r) '#f (if (eq? lT1a72@p '_) lT1a76@r (if (eq? lT1a72@p 'any) (cons (lT1a5e@stx^ lT1a71@e lT1a73@m* lT1a74@s* lT1a75@ae*) lT1a76@r) (if (lTb3f@stx? lT1a71@e) (and (not (lTaf9@top-marked? lT1a73@m*)) (call-with-values (lambda () (join-wraps lT1a73@m* lT1a74@s* lT1a75@ae* lT1a71@e)) (lambda (lT1a83@lT1a7e lT1a84@lT1a80 lT1a85@lT1a82) (let ((lT1a89@ae* lT1a85@lT1a82) (lT1a8a@s* lT1a84@lT1a80) (lT1a8b@m* lT1a83@lT1a7e)) (lT1a6c@match (lTb41@stx-expr lT1a71@e) lT1a72@p lT1a8b@m* lT1a8a@s* lT1a89@ae* lT1a76@r))))) (if (lT6b2@lT586@annotation? lT1a71@e) (lT1a6c@match (lT6b4@lT58a@annotation-expression lT1a71@e) lT1a72@p lT1a73@m* lT1a74@s* lT1a75@ae* lT1a76@r) (lT1a6a@match* lT1a71@e lT1a72@p lT1a73@m* lT1a74@s* lT1a75@ae* lT1a76@r)))))))) (lambda (lT1a6d@e lT1a6e@p) (lT1a6c@match lT1a6d@e lT1a6e@p '() '() '() '()))))) (set! lT284e@lTd7a@syntax-dispatch lTd7a@syntax-dispatch)) (begin (set! lTd7c@ellipsis? (lambda (lT1b41@x) (and (lTb73@id? lT1b41@x) (lTb79@free-id=? lT1b41@x (lTd02@scheme-stx '...))))) (set! lT284f@lTd7c@ellipsis? lTd7c@ellipsis?)) (begin (set! lTd7e@underscore? (lambda (lT1b43@x) (and (lTb73@id? lT1b43@x) (lTb79@free-id=? lT1b43@x (lTd02@scheme-stx '_))))) (set! lT2850@lTd7e@underscore? lTd7e@underscore?)) (begin (set! lTd80@verify-literals (lambda (lT1b45@lits lT1b46@expr) (for-each (lambda (lT1b49@x) (if (or (not (lTb73@id? lT1b49@x)) (lTd7c@ellipsis? lT1b49@x) (lTd7e@underscore? lT1b49@x)) (lTe5a@syntax-violation '#f '"invalid literal" lT1b46@expr lT1b49@x) (void))) lT1b45@lits))) (set! lT2851@lTd80@verify-literals lTd80@verify-literals)) (begin (set! lTd82@syntax-case-transformer (let ((lT1b4c@build-dispatch-call '#f) (lT1b4e@invalid-ids-error '#f) (lT1b50@gen-clause '#f) (lT1b52@gen-syntax-case '#f)) (begin (set! lT1b4c@build-dispatch-call (lambda (lT1bbd@pvars lT1bbe@expr lT1bbf@y lT1bc0@r lT1bc1@mr) (let ((lT1bc7@ids (map car lT1bbd@pvars)) (lT1bc8@levels (map cdr lT1bbd@pvars))) (let ((lT1bcb@labels (map lTaff@gen-label lT1bc7@ids)) (lT1bcc@new-vars (map lTafb@gen-lexical lT1bc7@ids))) (let ((lT1bcf@body (lTd9c@chi-expr (lTb5f@add-subst (lTb33@make-full-rib lT1bc7@ids lT1bcb@labels) lT1bbe@expr) (append (map (lambda (lT1bd1@label lT1bd2@var lT1bd3@level) (cons lT1bd1@label (lTb8d@make-binding 'syntax (cons lT1bd2@var lT1bd3@level)))) lT1bcb@labels lT1bcc@new-vars (map cdr lT1bbd@pvars)) lT1bc0@r) lT1bc1@mr))) (list '(primitive apply) (lTad6@lTa02@build-lambda '#f lT1bcc@new-vars lT1bcf@body) lT1bbf@y)))))) (set! lT1b4e@invalid-ids-error (lambda (lT1bb1@id* lT1bb2@e lT1bb3@class) (let lT1bbb@find ((lT1bb7@id* lT1bb1@id*) (lT1bb8@ok* '())) (if (null? lT1bb7@id*) (lTe5a@syntax-violation '#f '"invalid syntax" lT1bb2@e) (if (lTb73@id? (car lT1bb7@id*)) (if (lTb7f@bound-id-member? (car lT1bb7@id*) lT1bb8@ok*) (lTe56@syntax-error (car lT1bb7@id*) '"duplicate " lT1bb3@class) (lT1bbb@find (cdr lT1bb7@id*) (cons (car lT1bb7@id*) lT1bb8@ok*))) (lTe56@syntax-error (car lT1bb7@id*) '"invalid " lT1bb3@class)))))) (set! lT1b50@gen-clause (lambda (lT1b89@x lT1b8a@keys lT1b8b@clauses lT1b8c@r lT1b8d@mr lT1b8e@pat lT1b8f@fender lT1b90@expr) (call-with-values (lambda () (lTd78@convert-pattern lT1b8e@pat lT1b8a@keys)) (lambda (lT1b9d@lT1b9a lT1b9e@lT1b9c) (let ((lT1ba1@pvars lT1b9e@lT1b9c) (lT1ba2@p lT1b9d@lT1b9a)) (if (not (lTb7d@distinct-bound-ids? (map car lT1ba1@pvars))) (lT1b4e@invalid-ids-error (map car lT1ba1@pvars) lT1b8e@pat '"pattern variable") (if (not (for-all (lambda (lT1ba5@x) (not (lTd7c@ellipsis? (car lT1ba5@x)))) lT1ba1@pvars)) (lTe5a@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" lT1b8e@pat) (let ((lT1ba7@y (lTafb@gen-lexical 'tmp))) (let ((lT1ba9@test (if (eq? lT1b8f@fender '#t) lT1ba7@y (let ((lT1bab@call (lT1b4c@build-dispatch-call lT1ba1@pvars lT1b8f@fender lT1ba7@y lT1b8c@r lT1b8d@mr))) (list 'if lT1ba7@y lT1bab@call (list 'quote '#f)))))) (let ((lT1bad@conseq (lT1b4c@build-dispatch-call lT1ba1@pvars lT1b90@expr lT1ba7@y lT1b8c@r lT1b8d@mr))) (let ((lT1baf@altern (lT1b52@gen-syntax-case lT1b89@x lT1b8a@keys lT1b8b@clauses lT1b8c@r lT1b8d@mr))) (list (lTad6@lTa02@build-lambda '#f (list lT1ba7@y) (list 'if lT1ba9@test lT1bad@conseq lT1baf@altern)) (list '(primitive syntax-dispatch) lT1b89@x (list 'quote lT1ba2@p)))))))))))))) (set! lT1b52@gen-syntax-case (lambda (lT1b67@x lT1b68@keys lT1b69@clauses lT1b6a@r lT1b6b@mr) (if (null? lT1b69@clauses) (list '(primitive syntax-error) lT1b67@x) (let ((lT1b71@t (car lT1b69@clauses))) (let ((lT1b73@ls/false (lTd7a@syntax-dispatch lT1b71@t '(any any)))) (if lT1b73@ls/false (apply (lambda (lT1b75@pat lT1b76@expr) (if (and (lTb73@id? lT1b75@pat) (not (lTb7f@bound-id-member? lT1b75@pat lT1b68@keys)) (not (lTd7c@ellipsis? lT1b75@pat))) (if (lTb79@free-id=? lT1b75@pat (lTd02@scheme-stx '_)) (lTd9c@chi-expr lT1b76@expr lT1b6a@r lT1b6b@mr) (let ((lT1b79@lab (lTaff@gen-label lT1b75@pat)) (lT1b7a@lex (lTafb@gen-lexical lT1b75@pat))) (let ((lT1b7d@body (lTd9c@chi-expr (lTb5f@add-subst (lTb33@make-full-rib (list lT1b75@pat) (list lT1b79@lab)) lT1b76@expr) (cons (cons lT1b79@lab (lTb8d@make-binding 'syntax (cons lT1b7a@lex '0))) lT1b6a@r) lT1b6b@mr))) (list (lTad6@lTa02@build-lambda '#f (list lT1b7a@lex) lT1b7d@body) lT1b67@x)))) (lT1b50@gen-clause lT1b67@x lT1b68@keys (cdr lT1b69@clauses) lT1b6a@r lT1b6b@mr lT1b75@pat '#t lT1b76@expr))) lT1b73@ls/false) (let ((lT1b7f@t lT1b71@t)) (let ((lT1b81@ls/false (lTd7a@syntax-dispatch lT1b7f@t '(any any any)))) (if lT1b81@ls/false (apply (lambda (lT1b83@pat lT1b84@fender lT1b85@expr) (lT1b50@gen-clause lT1b67@x lT1b68@keys (cdr lT1b69@clauses) lT1b6a@r lT1b6b@mr lT1b83@pat lT1b84@fender lT1b85@expr)) lT1b81@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1b7f@t)))))))))) (lambda (lT1b53@e lT1b54@r lT1b55@mr) (let ((lT1b59@t lT1b53@e)) (let ((lT1b5b@ls/false (lTd7a@syntax-dispatch lT1b59@t '(_ any each-any . each-any)))) (if lT1b5b@ls/false (apply (lambda (lT1b5d@expr lT1b5e@keys lT1b5f@clauses) (begin (lTd80@verify-literals lT1b5e@keys lT1b53@e) (let ((lT1b63@x (lTafb@gen-lexical 'tmp))) (let ((lT1b65@body (lT1b52@gen-syntax-case lT1b63@x lT1b5e@keys lT1b5f@clauses lT1b54@r lT1b55@mr))) (list (lTad6@lTa02@build-lambda '#f (list lT1b63@x) lT1b65@body) (lTd9c@chi-expr lT1b5d@expr lT1b54@r lT1b55@mr)))))) lT1b5b@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1b59@t)))))))) (set! lT2852@lTd82@syntax-case-transformer lTd82@syntax-case-transformer)) (begin (set! lTd84@ellipsis-map (lambda (lT1bd7@proc lT1bd8@ls . lT1bdb@ls*) (let ((lT1bde@who '#f)) (begin (set! lT1bde@who '...) (begin (if (not (list? lT1bd8@ls)) (assertion-violation lT1bde@who '"not a list" lT1bd8@ls) (void)) (if (not (null? lT1bdb@ls*)) (let ((lT1bdf@n (length lT1bd8@ls))) (for-each (lambda (lT1be1@x) (begin (if (not (list? lT1be1@x)) (assertion-violation lT1bde@who '"not a list" lT1be1@x) (void)) (if (not (= (length lT1be1@x) lT1bdf@n)) (assertion-violation lT1bde@who '"length mismatch" lT1bd8@ls lT1be1@x) (void)))) lT1bdb@ls*)) (void)) (apply map lT1bd7@proc lT1bd8@ls lT1bdb@ls*)))))) (set! lT2853@lTd84@ellipsis-map lTd84@ellipsis-map)) (begin (set! lTd86@syntax-transformer (let ((lT1be4@gen-syntax '#f) (lT1be6@gen-ref '#f) (lT1be8@gen-append '#f) (lT1bea@gen-mappend '#f) (lT1bec@gen-map '#f) (lT1bee@gen-cons '#f) (lT1bf0@gen-vector '#f) (lT1bf2@regen '#f)) (begin (set! lT1be4@gen-syntax (lambda (lT1c5b@src lT1c5c@e lT1c5d@r lT1c5e@maps lT1c5f@ellipsis? lT1c60@vec?) (let ((lT1c67@t lT1c5c@e)) (let ((lT1c69@ls/false (lTd7a@syntax-dispatch lT1c67@t 'any))) (if (and lT1c69@ls/false (apply (lambda (lT1c6b@dots) (lT1c5f@ellipsis? lT1c6b@dots)) lT1c69@ls/false)) (apply (lambda (lT1c6d@dots) (lTe5a@syntax-violation '#f '"misplaced ellipsis in syntax form" lT1c5b@src)) lT1c69@ls/false) (let ((lT1c6f@t lT1c67@t)) (let ((lT1c71@ls/false (lTd7a@syntax-dispatch lT1c6f@t 'any))) (if (and lT1c71@ls/false (apply (lambda (lT1c73@id) (lTb73@id? lT1c73@id)) lT1c71@ls/false)) (apply (lambda (lT1c75@id) (let ((lT1c77@label (lTb89@id->label lT1c5c@e))) (let ((lT1c79@b (lTb8b@label->binding lT1c77@label lT1c5d@r))) (if (eq? (lTb8f@binding-type lT1c79@b) 'syntax) (call-with-values (lambda () (let ((lT1c7f@var.lev (lTb91@binding-value lT1c79@b))) (lT1be6@gen-ref lT1c5b@src (car lT1c7f@var.lev) (cdr lT1c7f@var.lev) lT1c5e@maps))) (lambda (lT1c81@lT1c7c lT1c82@lT1c7e) (let ((lT1c85@maps lT1c82@lT1c7e) (lT1c86@var lT1c81@lT1c7c)) (values (list 'ref lT1c86@var) lT1c85@maps)))) (values (list 'quote lT1c5c@e) lT1c5e@maps))))) lT1c71@ls/false) (let ((lT1c89@t lT1c6f@t)) (let ((lT1c8b@ls/false (lTd7a@syntax-dispatch lT1c89@t '(any any)))) (if (and lT1c8b@ls/false (apply (lambda (lT1c8d@dots lT1c8e@e) (lT1c5f@ellipsis? lT1c8d@dots)) lT1c8b@ls/false)) (apply (lambda (lT1c91@dots lT1c92@e) (if lT1c60@vec? (lTe5a@syntax-violation '#f '"misplaced ellipsis in syntax form" lT1c5b@src) (lT1be4@gen-syntax lT1c5b@src lT1c92@e lT1c5d@r lT1c5e@maps (lambda (lT1c95@x) '#f) '#f))) lT1c8b@ls/false) (let ((lT1c97@t lT1c89@t)) (let ((lT1c99@ls/false (lTd7a@syntax-dispatch lT1c97@t '(any any . any)))) (if (and lT1c99@ls/false (apply (lambda (lT1c9b@x lT1c9c@dots lT1c9d@y) (lT1c5f@ellipsis? lT1c9c@dots)) lT1c99@ls/false)) (apply (lambda (lT1ca1@x lT1ca2@dots lT1ca3@y) (let lT1cb9@f ((lT1ca7@y lT1ca3@y) (lT1ca8@k (lambda (lT1cab@maps) (call-with-values (lambda () (lT1be4@gen-syntax lT1c5b@src lT1ca1@x lT1c5d@r (cons '() lT1cab@maps) lT1c5f@ellipsis? '#f)) (lambda (lT1cb1@lT1cae lT1cb2@lT1cb0) (let ((lT1cb5@maps lT1cb2@lT1cb0) (lT1cb6@x lT1cb1@lT1cae)) (if (null? (car lT1cb5@maps)) (lTe5a@syntax-violation '#f '"extra ellipsis in syntax form" lT1c5b@src) (values (lT1bec@gen-map lT1cb6@x (car lT1cb5@maps)) (cdr lT1cb5@maps))))))))) (let ((lT1cbb@t lT1ca7@y)) (let ((lT1cbd@ls/false (lTd7a@syntax-dispatch lT1cbb@t '()))) (if lT1cbd@ls/false (apply (lambda () (lT1ca8@k lT1c5e@maps)) lT1cbd@ls/false) (let ((lT1cbf@t lT1cbb@t)) (let ((lT1cc1@ls/false (lTd7a@syntax-dispatch lT1cbf@t '(any . any)))) (if (and lT1cc1@ls/false (apply (lambda (lT1cc3@dots lT1cc4@y) (lT1c5f@ellipsis? lT1cc3@dots)) lT1cc1@ls/false)) (apply (lambda (lT1cc7@dots lT1cc8@y) (lT1cb9@f lT1cc8@y (lambda (lT1ccb@maps) (call-with-values (lambda () (lT1ca8@k (cons '() lT1ccb@maps))) (lambda (lT1cd1@lT1cce lT1cd2@lT1cd0) (let ((lT1cd5@maps lT1cd2@lT1cd0) (lT1cd6@x lT1cd1@lT1cce)) (if (null? (car lT1cd5@maps)) (lTe5a@syntax-violation '#f '"extra ellipsis in syntax form" lT1c5b@src) (values (lT1bea@gen-mappend lT1cd6@x (car lT1cd5@maps)) (cdr lT1cd5@maps))))))))) lT1cc1@ls/false) (let ((lT1cd9@t lT1cbf@t)) (let ((lT1cdb@ls/false (lTd7a@syntax-dispatch lT1cd9@t '_))) (if lT1cdb@ls/false (apply (lambda () (call-with-values (lambda () (lT1be4@gen-syntax lT1c5b@src lT1ca7@y lT1c5d@r lT1c5e@maps lT1c5f@ellipsis? lT1c60@vec?)) (lambda (lT1ce1@lT1cde lT1ce2@lT1ce0) (let ((lT1ce5@maps lT1ce2@lT1ce0) (lT1ce6@y lT1ce1@lT1cde)) (call-with-values (lambda () (lT1ca8@k lT1ce5@maps)) (lambda (lT1ced@lT1cea lT1cee@lT1cec) (let ((lT1cf1@maps lT1cee@lT1cec) (lT1cf2@x lT1ced@lT1cea)) (values (lT1be8@gen-append lT1cf2@x lT1ce6@y) lT1cf1@maps)))))))) lT1cdb@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1cd9@t)))))))))))) lT1c99@ls/false) (let ((lT1cf5@t lT1c97@t)) (let ((lT1cf7@ls/false (lTd7a@syntax-dispatch lT1cf5@t '(any . any)))) (if lT1cf7@ls/false (apply (lambda (lT1cf9@x lT1cfa@y) (call-with-values (lambda () (lT1be4@gen-syntax lT1c5b@src lT1cf9@x lT1c5d@r lT1c5e@maps lT1c5f@ellipsis? '#f)) (lambda (lT1d01@lT1cfe lT1d02@lT1d00) (let ((lT1d05@maps lT1d02@lT1d00) (lT1d06@xnew lT1d01@lT1cfe)) (call-with-values (lambda () (lT1be4@gen-syntax lT1c5b@src lT1cfa@y lT1c5d@r lT1d05@maps lT1c5f@ellipsis? lT1c60@vec?)) (lambda (lT1d0d@lT1d0a lT1d0e@lT1d0c) (let ((lT1d11@maps lT1d0e@lT1d0c) (lT1d12@ynew lT1d0d@lT1d0a)) (values (lT1bee@gen-cons lT1c5c@e lT1cf9@x lT1cfa@y lT1d06@xnew lT1d12@ynew) lT1d11@maps)))))))) lT1cf7@ls/false) (let ((lT1d15@t lT1cf5@t)) (let ((lT1d17@ls/false (lTd7a@syntax-dispatch lT1d15@t '#(vector each-any)))) (if lT1d17@ls/false (apply (lambda (lT1d19@ls) (call-with-values (lambda () (lT1be4@gen-syntax lT1c5b@src lT1d19@ls lT1c5d@r lT1c5e@maps lT1c5f@ellipsis? '#t)) (lambda (lT1d1f@lT1d1c lT1d20@lT1d1e) (let ((lT1d23@maps lT1d20@lT1d1e) (lT1d24@lsnew lT1d1f@lT1d1c)) (values (lT1bf0@gen-vector lT1c5c@e lT1d19@ls lT1d24@lsnew) lT1d23@maps))))) lT1d17@ls/false) (let ((lT1d27@t lT1d15@t)) (let ((lT1d29@ls/false (lTd7a@syntax-dispatch lT1d27@t '_))) (if lT1d29@ls/false (apply (lambda () (values (list 'quote lT1c5c@e) lT1c5e@maps)) lT1d29@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1d27@t)))))))))))))))))))))))) (set! lT1be6@gen-ref (lambda (lT1c41@src lT1c42@var lT1c43@level lT1c44@maps) (if (= lT1c43@level '0) (values lT1c42@var lT1c44@maps) (if (null? lT1c44@maps) (lTe5a@syntax-violation '#f '"missing ellipsis in syntax form" lT1c41@src) (call-with-values (lambda () (lT1be6@gen-ref lT1c41@src lT1c42@var (- lT1c43@level '1) (cdr lT1c44@maps))) (lambda (lT1c4d@lT1c4a lT1c4e@lT1c4c) (let ((lT1c51@outer-maps lT1c4e@lT1c4c) (lT1c52@outer-var lT1c4d@lT1c4a)) (let ((lT1c55@t (assq lT1c52@outer-var (car lT1c44@maps)))) (if lT1c55@t ((lambda (lT1c57@b) (values (cdr lT1c57@b) lT1c44@maps)) lT1c55@t) (let ((lT1c59@inner-var (lTafb@gen-lexical 'tmp))) (values lT1c59@inner-var (cons (cons (cons lT1c52@outer-var lT1c59@inner-var) (car lT1c44@maps)) lT1c51@outer-maps)))))))))))) (set! lT1be8@gen-append (lambda (lT1c3d@x lT1c3e@y) (if (fast-equal? lT1c3e@y ''()) lT1c3d@x (list 'append lT1c3d@x lT1c3e@y)))) (set! lT1bea@gen-mappend (lambda (lT1c39@e lT1c3a@map-env) (list 'apply '(primitive append) (lT1bec@gen-map lT1c39@e lT1c3a@map-env)))) (set! lT1bec@gen-map (lambda (lT1c27@e lT1c28@map-env) (let ((lT1c2b@formals (map cdr lT1c28@map-env)) (lT1c2c@actuals (map (lambda (lT1c2f@x) (list 'ref (car lT1c2f@x))) lT1c28@map-env))) (if (eq? (car lT1c27@e) 'ref) (car lT1c2c@actuals) (if (for-all (lambda (lT1c31@x) (and (eq? (car lT1c31@x) 'ref) (memq (cadr lT1c31@x) lT1c2b@formals))) (cdr lT1c27@e)) (let ((lT1c33@args (map (let ((lT1c35@r (map cons lT1c2b@formals lT1c2c@actuals))) (lambda (lT1c37@x) (cdr (assq (cadr lT1c37@x) lT1c35@r)))) (cdr lT1c27@e)))) (cons 'map (cons (list 'primitive (car lT1c27@e)) lT1c33@args))) (cons* 'map (list 'lambda lT1c2b@formals lT1c27@e) lT1c2c@actuals)))))) (set! lT1bee@gen-cons (lambda (lT1c17@e lT1c18@x lT1c19@y lT1c1a@xnew lT1c1b@ynew) (let ((lT1c21@t (car lT1c1b@ynew))) (if (memv lT1c21@t '(quote)) (if (eq? (car lT1c1a@xnew) 'quote) (let ((lT1c23@xnew (cadr lT1c1a@xnew)) (lT1c24@ynew (cadr lT1c1b@ynew))) (if (and (eq? lT1c23@xnew lT1c18@x) (eq? lT1c24@ynew lT1c19@y)) (list 'quote lT1c17@e) (list 'quote (cons lT1c23@xnew lT1c24@ynew)))) (if (null? (cadr lT1c1b@ynew)) (list 'list lT1c1a@xnew) (list 'cons lT1c1a@xnew lT1c1b@ynew))) (if (memv lT1c21@t '(list)) (cons 'list (cons lT1c1a@xnew (cdr lT1c1b@ynew))) (list 'cons lT1c1a@xnew lT1c1b@ynew)))))) (set! lT1bf0@gen-vector (lambda (lT1c11@e lT1c12@ls lT1c13@lsnew) (if (eq? (car lT1c13@lsnew) 'quote) (if (eq? (cadr lT1c13@lsnew) lT1c12@ls) (list 'quote lT1c11@e) (list 'quote (list->vector (cadr lT1c13@lsnew)))) (if (eq? (car lT1c13@lsnew) 'list) (cons 'vector (cdr lT1c13@lsnew)) (list 'list->vector lT1c13@lsnew))))) (set! lT1bf2@regen (lambda (lT1c0b@x) (let ((lT1c0d@t (car lT1c0b@x))) (if (memv lT1c0d@t '(ref)) (cadr lT1c0b@x) (if (memv lT1c0d@t '(primitive)) (list 'primitive (cadr lT1c0b@x)) (if (memv lT1c0d@t '(quote)) (list 'quote (cadr lT1c0b@x)) (if (memv lT1c0d@t '(lambda)) (lTad6@lTa02@build-lambda '#f (cadr lT1c0b@x) (lT1bf2@regen (caddr lT1c0b@x))) (if (memv lT1c0d@t '(map)) (let ((lT1c0f@ls (map lT1bf2@regen (cdr lT1c0b@x)))) (cons '(primitive ellipsis-map) lT1c0f@ls)) (cons (list 'primitive (car lT1c0b@x)) (map lT1bf2@regen (cdr lT1c0b@x))))))))))) (lambda (lT1bf3@e lT1bf4@r lT1bf5@mr) (let ((lT1bf9@t lT1bf3@e)) (let ((lT1bfb@ls/false (lTd7a@syntax-dispatch lT1bf9@t '(_ any)))) (if lT1bfb@ls/false (apply (lambda (lT1bfd@x) (call-with-values (lambda () (lT1be4@gen-syntax lT1bf3@e lT1bfd@x lT1bf4@r '() lTd7c@ellipsis? '#f)) (lambda (lT1c03@lT1c00 lT1c04@lT1c02) (let ((lT1c07@maps lT1c04@lT1c02) (lT1c08@e lT1c03@lT1c00)) (lT1bf2@regen lT1c08@e))))) lT1bfb@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1bf9@t)))))))) (set! lT2854@lTd86@syntax-transformer lTd86@syntax-transformer)) (begin (set! lTd88@core-macro-transformer (lambda (lT1d2b@name) (let ((lT1d2d@t lT1d2b@name)) (if (memv lT1d2d@t '(quote)) lTd2a@quote-transformer (if (memv lT1d2d@t '(lambda)) lTd2e@lambda-transformer (if (memv lT1d2d@t '(case-lambda)) lTd2c@case-lambda-transformer (if (memv lT1d2d@t '(letrec)) lTd12@letrec-transformer (if (memv lT1d2d@t '(letrec*)) lTd14@letrec*-transformer (if (memv lT1d2d@t '(let)) lTd10@let-transformer (if (memv lT1d2d@t '(if)) lTd22@if-transformer (if (memv lT1d2d@t '(and)) lTd24@and-transformer (if (memv lT1d2d@t '(or)) lTd26@or-transformer (if (memv lT1d2d@t '(foreign-call)) lTd76@foreign-call-transformer (if (memv lT1d2d@t '(syntax-case)) lTd82@syntax-case-transformer (if (memv lT1d2d@t '(syntax)) lTd86@syntax-transformer (if (memv lT1d2d@t '(type-descriptor)) lTd18@type-descriptor-transformer (if (memv lT1d2d@t '(record-type-descriptor)) lTd1a@record-type-descriptor-transformer (if (memv lT1d2d@t '(record-constructor-descriptor)) lTd1c@record-constructor-descriptor-transformer (if (memv lT1d2d@t '(fluid-let-syntax)) lTd16@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" lT1d2b@name)))))))))))))))))))) (set! lT2855@lTd88@core-macro-transformer lTd88@core-macro-transformer)) (begin (set! lTd8a@symbol-macro (lambda (lT1d2f@x lT1d30@set) (let ((lT1d33@t lT1d2f@x)) (let ((lT1d35@ls/false (lTd7a@syntax-dispatch lT1d33@t '(_ any)))) (if (and lT1d35@ls/false (apply (lambda (lT1d37@name) (and (lTb73@id? lT1d37@name) (memq (lTb75@id->sym lT1d37@name) lT1d30@set))) lT1d35@ls/false)) (apply (lambda (lT1d39@name) (lTd30@bless (list 'quote lT1d39@name))) lT1d35@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1d33@t)))))) (set! lT2856@lTd8a@symbol-macro lTd8a@symbol-macro)) (begin (set! lTd8c@macro-transformer (lambda (lT1d3b@x) (if (procedure? lT1d3b@x) lT1d3b@x (if (symbol? lT1d3b@x) (let ((lT1d3d@t lT1d3b@x)) (if (memv lT1d3d@t '(define-record-type)) lTd6e@define-record-type-macro (if (memv lT1d3d@t '(define-struct)) lTd6c@define-struct-macro (if (memv lT1d3d@t '(include)) lTd62@include-macro (if (memv lT1d3d@t '(cond)) lTd5e@cond-macro (if (memv lT1d3d@t '(let)) lTd36@let-macro (if (memv lT1d3d@t '(do)) lTd56@do-macro (if (memv lT1d3d@t '(or)) lTd5a@or-macro (if (memv lT1d3d@t '(and)) lTd5c@and-macro (if (memv lT1d3d@t '(let*)) lTd58@let*-macro (if (memv lT1d3d@t '(let-values)) lTd38@let-values-macro (if (memv lT1d3d@t '(let*-values)) lTd3a@let*-values-macro (if (memv lT1d3d@t '(syntax-rules)) lTd66@syntax-rules-macro (if (memv lT1d3d@t '(quasiquote)) lTd68@quasiquote-macro (if (memv lT1d3d@t '(quasisyntax)) lTd6a@quasisyntax-macro (if (memv lT1d3d@t '(with-syntax)) lTd32@with-syntax-macro (if (memv lT1d3d@t '(when)) lTd1e@when-macro (if (memv lT1d3d@t '(unless)) lTd20@unless-macro (if (memv lT1d3d@t '(case)) lTd28@case-macro (if (memv lT1d3d@t '(identifier-syntax)) lTd54@identifier-syntax-macro (if (memv lT1d3d@t '(time)) lTd4c@time-macro (if (memv lT1d3d@t '(delay)) lTd4e@delay-macro (if (memv lT1d3d@t '(assert)) lTd50@assert-macro (if (memv lT1d3d@t '(endianness)) lTd52@endianness-macro (if (memv lT1d3d@t '(guard)) lTd48@guard-macro (if (memv lT1d3d@t '(define-enumeration)) lTd4a@define-enumeration-macro (if (memv lT1d3d@t '(trace-lambda)) lTd3c@trace-lambda-macro (if (memv lT1d3d@t '(trace-define)) lTd3e@trace-define-macro (if (memv lT1d3d@t '(trace-define-syntax)) lTd40@trace-define-syntax-macro (if (memv lT1d3d@t '(trace-let-syntax)) lTd44@trace-let-syntax-macro (if (memv lT1d3d@t '(trace-letrec-syntax)) lTd46@trace-letrec-syntax-macro (if (memv lT1d3d@t '(define-condition-type)) lTd70@define-condition-type-macro (if (memv lT1d3d@t '(parameterize)) lTd74@parameterize-macro (if (memv lT1d3d@t '(include-into)) lTd64@include-into-macro (if (memv lT1d3d@t '(eol-style)) (lambda (lT1d3f@x) (lTd8a@symbol-macro lT1d3f@x '(none lf cr crlf nel crnel ls))) (if (memv lT1d3d@t '(error-handling-mode)) (lambda (lT1d41@x) (lTd8a@symbol-macro lT1d41@x '(ignore raise replace))) (if (memv lT1d3d@t '(buffer-mode)) (lambda (lT1d43@x) (lTd8a@symbol-macro lT1d43@x '(none line block))) (if (memv lT1d3d@t '(file-options)) lTaee@file-options-macro (if (memv lT1d3d@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) lTd72@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" lT1d3b@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" lT1d3b@x))))) (set! lT2857@lTd8c@macro-transformer lTd8c@macro-transformer)) (begin (set! lTd8e@local-macro-transformer (lambda (lT1d45@x) (car lT1d45@x))) (set! lT2858@lTd8e@local-macro-transformer lTd8e@local-macro-transformer)) (begin (set! lTd90@do-macro-call (lambda (lT1d47@transformer lT1d48@expr) (let ((lT1d4b@out (lT1d47@transformer (lTb5d@add-mark lTb57@anti-mark lT1d48@expr '#f)))) (begin (let lT1d4f@f ((lT1d4d@x lT1d4b@out)) (if (not (lTb3f@stx? lT1d4d@x)) (if (pair? lT1d4d@x) (begin (lT1d4f@f (car lT1d4d@x)) (lT1d4f@f (cdr lT1d4d@x))) (if (vector? lT1d4d@x) (vector-for-each lT1d4f@f lT1d4d@x) (if (symbol? lT1d4d@x) (lTe5a@syntax-violation '#f '"raw symbol encountered in output of macro" lT1d48@expr lT1d4d@x) (void)))) (void))) (lTb5d@add-mark (lTb55@gen-mark) lT1d4b@out lT1d48@expr))))) (set! lT2859@lTd90@do-macro-call lTd90@do-macro-call)) (begin (set! lTd92@chi-macro (lambda (lT1d51@p lT1d52@e) (lTd90@do-macro-call (lTd8c@macro-transformer lT1d51@p) lT1d52@e))) (set! lT285a@lTd92@chi-macro lTd92@chi-macro)) (begin (set! lTd94@chi-local-macro (lambda (lT1d55@p lT1d56@e) (lTd90@do-macro-call (lTd8e@local-macro-transformer lT1d55@p) lT1d56@e))) (set! lT285b@lTd94@chi-local-macro lTd94@chi-local-macro)) (begin (set! lTd96@chi-global-macro (lambda (lT1d59@p lT1d5a@e) (let ((lT1d5d@lib (car lT1d59@p)) (lT1d5e@loc (cdr lT1d59@p))) (begin (lT98a@lT7d9@visit-library lT1d5d@lib) (let ((lT1d61@x (symbol-value lT1d5e@loc))) (let ((lT1d63@transformer (if (procedure? lT1d61@x) lT1d61@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" lT1d61@x)))) (lTd90@do-macro-call lT1d63@transformer lT1d5a@e))))))) (set! lT285c@lTd96@chi-global-macro lTd96@chi-global-macro)) (begin (set! lTd98@chi-expr* (lambda (lT1d65@e* lT1d66@r lT1d67@mr) (if (null? lT1d65@e*) '() (let ((lT1d6b@e (lTd9c@chi-expr (car lT1d65@e*) lT1d66@r lT1d67@mr))) (cons lT1d6b@e (lTd98@chi-expr* (cdr lT1d65@e*) lT1d66@r lT1d67@mr)))))) (set! lT285d@lTd98@chi-expr* lTd98@chi-expr*)) (begin (set! lTd9a@chi-application (lambda (lT1d6d@e lT1d6e@r lT1d6f@mr) (let ((lT1d73@t lT1d6d@e)) (let ((lT1d75@ls/false (lTd7a@syntax-dispatch lT1d73@t '(any . each-any)))) (if lT1d75@ls/false (apply (lambda (lT1d77@rator lT1d78@rands) (let ((lT1d7b@rator (lTd9c@chi-expr lT1d77@rator lT1d6e@r lT1d6f@mr))) (cons lT1d7b@rator (lTd98@chi-expr* lT1d78@rands lT1d6e@r lT1d6f@mr)))) lT1d75@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1d73@t)))))) (set! lT285e@lTd9a@chi-application lTd9a@chi-application)) (begin (set! lTd9c@chi-expr (lambda (lT1d7d@e lT1d7e@r lT1d7f@mr) (call-with-values (lambda () (lTb95@syntax-type lT1d7d@e lT1d7e@r)) (lambda (lT1d89@lT1d84 lT1d8a@lT1d86 lT1d8b@lT1d88) (let ((lT1d8f@kwd lT1d8b@lT1d88) (lT1d90@value lT1d8a@lT1d86) (lT1d91@type lT1d89@lT1d84)) (let ((lT1d95@t lT1d91@type)) (if (memv lT1d95@t '(core-macro)) (let ((lT1d97@transformer (lTd88@core-macro-transformer lT1d90@value))) (lT1d97@transformer lT1d7d@e lT1d7e@r lT1d7f@mr)) (if (memv lT1d95@t '(global)) (let ((lT1d99@lib (car lT1d90@value))) (let ((lT1d9b@loc (cdr lT1d90@value))) (begin ((lTde2@inv-collector) lT1d99@lib) lT1d9b@loc))) (if (memv lT1d95@t '(core-prim)) (let ((lT1d9d@name lT1d90@value)) (list 'primitive lT1d9d@name)) (if (memv lT1d95@t '(call)) (lTd9a@chi-application lT1d7d@e lT1d7e@r lT1d7f@mr) (if (memv lT1d95@t '(lexical)) (let ((lT1d9f@lex (lTd04@lexical-var lT1d90@value))) lT1d9f@lex) (if (memv lT1d95@t '(global-macro global-macro!)) (lTd9c@chi-expr (lTd96@chi-global-macro lT1d90@value lT1d7d@e) lT1d7e@r lT1d7f@mr) (if (memv lT1d95@t '(local-macro local-macro!)) (lTd9c@chi-expr (lTd94@chi-local-macro lT1d90@value lT1d7d@e) lT1d7e@r lT1d7f@mr) (if (memv lT1d95@t '(macro macro!)) (lTd9c@chi-expr (lTd92@chi-macro lT1d90@value lT1d7d@e) lT1d7e@r lT1d7f@mr) (if (memv lT1d95@t '(constant)) (let ((lT1da1@datum lT1d90@value)) (list 'quote lT1da1@datum)) (if (memv lT1d95@t '(set!)) (lTd9e@chi-set! lT1d7d@e lT1d7e@r lT1d7f@mr) (if (memv lT1d95@t '(begin)) (let ((lT1da3@t lT1d7d@e)) (let ((lT1da5@ls/false (lTd7a@syntax-dispatch lT1da3@t '(_ any . each-any)))) (if lT1da5@ls/false (apply (lambda (lT1da7@x lT1da8@x*) (lTad8@lTa32@build-sequence '#f (lTd98@chi-expr* (cons lT1da7@x lT1da8@x*) lT1d7e@r lT1d7f@mr))) lT1da5@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1da3@t)))) (if (memv lT1d95@t '(let-syntax letrec-syntax)) (let ((lT1dab@t lT1d7d@e)) (let ((lT1dad@ls/false (lTd7a@syntax-dispatch lT1dab@t '(_ #(each (any any)) any . each-any)))) (if (and lT1dad@ls/false (apply (lambda (lT1daf@xlhs* lT1db0@xrhs* lT1db1@xbody lT1db2@xbody*) (if (not (lTb7b@valid-bound-ids? lT1daf@xlhs*)) (lTe5a@syntax-violation '#f '"invalid identifiers" lT1d7d@e) (void))) lT1dad@ls/false)) (apply (lambda (lT1db7@xlhs* lT1db8@xrhs* lT1db9@xbody lT1dba@xbody*) (let ((lT1dbf@xlab* (map lTaff@gen-label lT1db7@xlhs*))) (let ((lT1dc1@xrib (lTb33@make-full-rib lT1db7@xlhs* lT1dbf@xlab*))) (let ((lT1dc3@xb* (map (lambda (lT1dc5@x) (lTbab@make-eval-transformer (lTdd4@expand-transformer (if (eq? lT1d91@type 'let-syntax) lT1dc5@x (lTb5f@add-subst lT1dc1@xrib lT1dc5@x)) lT1d7f@mr))) lT1db8@xrhs*))) (lTad8@lTa32@build-sequence '#f (lTd98@chi-expr* (map (lambda (lT1dc7@x) (lTb5f@add-subst lT1dc1@xrib lT1dc7@x)) (cons lT1db9@xbody lT1dba@xbody*)) (append (map cons lT1dbf@xlab* lT1dc3@xb*) lT1d7e@r) (append (map cons lT1dbf@xlab* lT1dc3@xb*) lT1d7f@mr))))))) lT1dad@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1dab@t)))) (if (memv lT1d95@t '(displaced-lexical)) (lTe5a@syntax-violation '#f '"identifier out of context" lT1d7d@e) (if (memv lT1d95@t '(syntax)) (lTe5a@syntax-violation '#f '"reference to pattern variable outside a syntax form" lT1d7d@e) (if (memv lT1d95@t '(define define-syntax module import library)) (lTe5a@syntax-violation '#f (string-append (let ((lT1dc9@t lT1d91@type)) (if (memv lT1dc9@t '(define)) '"a definition" (if (memv lT1dc9@t '(define-syntax)) '"a define-syntax" (if (memv lT1dc9@t '(module)) '"a module definition" (if (memv lT1dc9@t '(library)) '"a library definition" (if (memv lT1dc9@t '(import)) '"an import declaration" (if (memv lT1dc9@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") lT1d7d@e) (if (memv lT1d95@t '(mutable)) (lTe5a@syntax-violation '#f '"attempt to reference an unexportable variable" lT1d7d@e) (lTe5a@syntax-violation '#f '"invalid expression" lT1d7d@e))))))))))))))))))))))) (set! lT285f@lTd9c@chi-expr lTd9c@chi-expr)) (begin (set! lTd9e@chi-set! (lambda (lT1dcb@e lT1dcc@r lT1dcd@mr) (let ((lT1dd1@t lT1dcb@e)) (let ((lT1dd3@ls/false (lTd7a@syntax-dispatch lT1dd1@t '(_ any any)))) (if (and lT1dd3@ls/false (apply (lambda (lT1dd5@x lT1dd6@v) (lTb73@id? lT1dd5@x)) lT1dd3@ls/false)) (apply (lambda (lT1dd9@x lT1dda@v) (call-with-values (lambda () (lTb95@syntax-type lT1dd9@x lT1dcc@r)) (lambda (lT1de3@lT1dde lT1de4@lT1de0 lT1de5@lT1de2) (let ((lT1de9@kwd lT1de5@lT1de2) (lT1dea@value lT1de4@lT1de0) (lT1deb@type lT1de3@lT1dde)) (let ((lT1def@t lT1deb@type)) (if (memv lT1def@t '(lexical)) (begin (lTd08@set-lexical-mutable! lT1dea@value '#t) (list 'set! (lTd04@lexical-var lT1dea@value) (lTd9c@chi-expr lT1dda@v lT1dcc@r lT1dcd@mr))) (if (memv lT1def@t '(core-prim)) (lTe5a@syntax-violation '#f '"cannot modify imported core primitive" lT1dcb@e) (if (memv lT1def@t '(global)) (lTe5a@syntax-violation '#f '"attempt to modify imported binding" lT1dcb@e) (if (memv lT1def@t '(global-macro!)) (lTd9c@chi-expr (lTd96@chi-global-macro lT1dea@value lT1dcb@e) lT1dcc@r lT1dcd@mr) (if (memv lT1def@t '(local-macro!)) (lTd9c@chi-expr (lTd94@chi-local-macro lT1dea@value lT1dcb@e) lT1dcc@r lT1dcd@mr) (if (memv lT1def@t '(mutable)) (lTe5a@syntax-violation '#f '"attempt to assign to an unexportable variable" lT1dcb@e) (lTe5a@syntax-violation '#f '"invalid syntax" lT1dcb@e)))))))))))) lT1dd3@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1dd1@t)))))) (set! lT2860@lTd9e@chi-set! lTd9e@chi-set!)) (begin (set! lTda0@verify-formals (lambda (lT1df1@fmls lT1df2@stx) (let ((lT1df5@t lT1df1@fmls)) (let ((lT1df7@ls/false (lTd7a@syntax-dispatch lT1df5@t 'each-any))) (if lT1df7@ls/false (apply (lambda (lT1df9@x*) (if (not (lTb7b@valid-bound-ids? lT1df9@x*)) (lTd34@invalid-fmls-error lT1df2@stx lT1df1@fmls) (void))) lT1df7@ls/false) (let ((lT1dfb@t lT1df5@t)) (let ((lT1dfd@ls/false (lTd7a@syntax-dispatch lT1dfb@t '#(each+ any () any)))) (if lT1dfd@ls/false (apply (lambda (lT1dff@x* lT1e00@x) (if (not (lTb7b@valid-bound-ids? (cons lT1e00@x lT1dff@x*))) (lTd34@invalid-fmls-error lT1df2@stx lT1df1@fmls) (void))) lT1dfd@ls/false) (let ((lT1e03@t lT1dfb@t)) (let ((lT1e05@ls/false (lTd7a@syntax-dispatch lT1e03@t '_))) (if lT1e05@ls/false (apply (lambda () (lTe5a@syntax-violation '#f '"invalid syntax" lT1df2@stx)) lT1e05@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1e03@t)))))))))))) (set! lT2861@lTda0@verify-formals lTda0@verify-formals)) (begin (set! lTda2@chi-lambda-clause (lambda (lT1e07@stx lT1e08@fmls lT1e09@body* lT1e0a@r lT1e0b@mr) (let ((lT1e11@t lT1e08@fmls)) (let ((lT1e13@ls/false (lTd7a@syntax-dispatch lT1e11@t 'each-any))) (if lT1e13@ls/false (apply (lambda (lT1e15@x*) (begin (lTda0@verify-formals lT1e08@fmls lT1e07@stx) (let ((lT1e17@lex* (map lTafb@gen-lexical lT1e15@x*)) (lT1e18@lab* (map lTaff@gen-label lT1e15@x*))) (values lT1e17@lex* (lTdb2@chi-internal (lTb5f@add-subst (lTb33@make-full-rib lT1e15@x* lT1e18@lab*) lT1e09@body*) (lTd0c@add-lexicals lT1e18@lab* lT1e17@lex* lT1e0a@r) lT1e0b@mr))))) lT1e13@ls/false) (let ((lT1e1b@t lT1e11@t)) (let ((lT1e1d@ls/false (lTd7a@syntax-dispatch lT1e1b@t '#(each+ any () any)))) (if lT1e1d@ls/false (apply (lambda (lT1e1f@x* lT1e20@x) (begin (lTda0@verify-formals lT1e08@fmls lT1e07@stx) (let ((lT1e23@lex* (map lTafb@gen-lexical lT1e1f@x*)) (lT1e24@lab* (map lTaff@gen-label lT1e1f@x*)) (lT1e25@lex (lTafb@gen-lexical lT1e20@x)) (lT1e26@lab (lTaff@gen-label lT1e20@x))) (values (append lT1e23@lex* lT1e25@lex) (lTdb2@chi-internal (lTb5f@add-subst (lTb33@make-full-rib (cons lT1e20@x lT1e1f@x*) (cons lT1e26@lab lT1e24@lab*)) lT1e09@body*) (lTd0c@add-lexicals (cons lT1e26@lab lT1e24@lab*) (cons lT1e25@lex lT1e23@lex*) lT1e0a@r) lT1e0b@mr))))) lT1e1d@ls/false) (let ((lT1e2b@t lT1e1b@t)) (let ((lT1e2d@ls/false (lTd7a@syntax-dispatch lT1e2b@t '_))) (if lT1e2d@ls/false (apply (lambda () (lTe5a@syntax-violation '#f '"invalid syntax" lT1e08@fmls)) lT1e2d@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1e2b@t)))))))))))) (set! lT2862@lTda2@chi-lambda-clause lTda2@chi-lambda-clause)) (begin (set! lTda4@chi-lambda-clause* (lambda (lT1e2f@stx lT1e30@fmls* lT1e31@body** lT1e32@r lT1e33@mr) (if (null? lT1e30@fmls*) (values '() '()) (call-with-values (lambda () (lTda2@chi-lambda-clause lT1e2f@stx (car lT1e30@fmls*) (car lT1e31@body**) lT1e32@r lT1e33@mr)) (lambda (lT1e3d@lT1e3a lT1e3e@lT1e3c) (let ((lT1e41@b lT1e3e@lT1e3c) (lT1e42@a lT1e3d@lT1e3a)) (call-with-values (lambda () (lTda4@chi-lambda-clause* lT1e2f@stx (cdr lT1e30@fmls*) (cdr lT1e31@body**) lT1e32@r lT1e33@mr)) (lambda (lT1e49@lT1e46 lT1e4a@lT1e48) (let ((lT1e4d@b* lT1e4a@lT1e48) (lT1e4e@a* lT1e49@lT1e46)) (values (cons lT1e42@a lT1e4e@a*) (cons lT1e41@b lT1e4d@b*))))))))))) (set! lT2863@lTda4@chi-lambda-clause* lTda4@chi-lambda-clause*)) (begin (set! lTda6@chi-defun (lambda (lT1e51@x lT1e52@r lT1e53@mr) (let ((lT1e57@fmls (car lT1e51@x)) (lT1e58@body* (cdr lT1e51@x))) (call-with-values (lambda () (lTda2@chi-lambda-clause lT1e57@fmls lT1e57@fmls lT1e58@body* lT1e52@r lT1e53@mr)) (lambda (lT1e5f@lT1e5c lT1e60@lT1e5e) (let ((lT1e63@body lT1e60@lT1e5e) (lT1e64@fmls lT1e5f@lT1e5c)) (lTad6@lTa02@build-lambda '#f lT1e64@fmls lT1e63@body))))))) (set! lT2864@lTda6@chi-defun lTda6@chi-defun)) (begin (set! lTda8@chi-rhs (lambda (lT1e67@rhs lT1e68@r lT1e69@mr) (let ((lT1e6d@t (car lT1e67@rhs))) (if (memv lT1e6d@t '(defun)) (lTda6@chi-defun (cdr lT1e67@rhs) lT1e68@r lT1e69@mr) (if (memv lT1e6d@t '(expr)) (let ((lT1e6f@expr (cdr lT1e67@rhs))) (lTd9c@chi-expr lT1e6f@expr lT1e68@r lT1e69@mr)) (if (memv lT1e6d@t '(top-expr)) (let ((lT1e71@expr (cdr lT1e67@rhs))) (lTad8@lTa32@build-sequence '#f (list (lTd9c@chi-expr lT1e71@expr lT1e68@r lT1e69@mr) (lTad9@lTa34@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" lT1e67@rhs))))))) (set! lT2865@lTda8@chi-rhs lTda8@chi-rhs)) (begin (set! lTdaa@expand-interaction-rhs*/init* (lambda (lT1e73@lhs* lT1e74@rhs* lT1e75@init* lT1e76@r lT1e77@mr) (let lT1e81@f ((lT1e7d@lhs* lT1e73@lhs*) (lT1e7e@rhs* lT1e74@rhs*)) (if (null? lT1e7d@lhs*) (map (lambda (lT1e83@x) (lTd9c@chi-expr lT1e83@x lT1e76@r lT1e77@mr)) lT1e75@init*) (let ((lT1e85@lhs (car lT1e7d@lhs*)) (lT1e86@rhs (car lT1e7e@rhs*))) (let ((lT1e89@t (car lT1e86@rhs))) (if (memv lT1e89@t '(defun)) (let ((lT1e8b@rhs (lTda6@chi-defun (cdr lT1e86@rhs) lT1e76@r lT1e77@mr))) (cons (list 'set! lT1e85@lhs lT1e8b@rhs) (lT1e81@f (cdr lT1e7d@lhs*) (cdr lT1e7e@rhs*)))) (if (memv lT1e89@t '(expr)) (let ((lT1e8d@rhs (lTd9c@chi-expr (cdr lT1e86@rhs) lT1e76@r lT1e77@mr))) (cons (list 'set! lT1e85@lhs lT1e8d@rhs) (lT1e81@f (cdr lT1e7d@lhs*) (cdr lT1e7e@rhs*)))) (if (memv lT1e89@t '(top-expr)) (let ((lT1e8f@e (lTd9c@chi-expr (cdr lT1e86@rhs) lT1e76@r lT1e77@mr))) (cons lT1e8f@e (lT1e81@f (cdr lT1e7d@lhs*) (cdr lT1e7e@rhs*)))) (error 'expand-interaction '"invallid" lT1e86@rhs)))))))))) (set! lT2866@lTdaa@expand-interaction-rhs*/init* lTdaa@expand-interaction-rhs*/init*)) (begin (set! lTdac@chi-rhs* (lambda (lT1e91@rhs* lT1e92@r lT1e93@mr) (let lT1e99@f ((lT1e97@ls lT1e91@rhs*)) (if (null? lT1e97@ls) '() (let ((lT1e9b@a (lTda8@chi-rhs (car lT1e97@ls) lT1e92@r lT1e93@mr))) (cons lT1e9b@a (lT1e99@f (cdr lT1e97@ls)))))))) (set! lT2867@lTdac@chi-rhs* lTdac@chi-rhs*)) (begin (set! lTdae@find-bound=? (lambda (lT1e9d@x lT1e9e@lhs* lT1e9f@rhs*) (if (null? lT1e9e@lhs*) '#f (if (lTb77@bound-id=? lT1e9d@x (car lT1e9e@lhs*)) (car lT1e9f@rhs*) (lTdae@find-bound=? lT1e9d@x (cdr lT1e9e@lhs*) (cdr lT1e9f@rhs*)))))) (set! lT2868@lTdae@find-bound=? lTdae@find-bound=?)) (begin (set! lTdb0@find-dups (lambda (lT1ea3@ls) (let lT1ea9@f ((lT1ea5@ls lT1ea3@ls) (lT1ea6@dups '())) (if (null? lT1ea5@ls) lT1ea6@dups (let ((lT1eab@t (lTdae@find-bound=? (car lT1ea5@ls) (cdr lT1ea5@ls) (cdr lT1ea5@ls)))) (if lT1eab@t ((lambda (lT1ead@x) (lT1ea9@f (cdr lT1ea5@ls) (cons (list (car lT1ea5@ls) lT1ead@x) lT1ea6@dups))) lT1eab@t) (lT1ea9@f (cdr lT1ea5@ls) lT1ea6@dups))))))) (set! lT2869@lTdb0@find-dups lTdb0@find-dups)) (begin (set! lTdb2@chi-internal (lambda (lT1eaf@e* lT1eb0@r lT1eb1@mr) (let ((lT1eb5@rib (lTb27@make-empty-rib))) (call-with-values (lambda () (lTdd2@chi-body* (map (lambda (lT1ec7@x) (lTb5f@add-subst lT1eb5@rib lT1ec7@x)) (lTb71@syntax->list lT1eaf@e*)) lT1eb0@r lT1eb1@mr '() '() '() '() '() lT1eb5@rib '#f)) (lambda (lT1ec9@lT1eb8 lT1eca@lT1eba lT1ecb@lT1ebc lT1ecc@lT1ebe lT1ecd@lT1ec0 lT1ece@lT1ec2 lT1ecf@lT1ec4 lT1ed0@lT1ec6) (let ((lT1ed9@_exp* lT1ed0@lT1ec6) (lT1eda@kwd* lT1ecf@lT1ec4) (lT1edb@mod** lT1ece@lT1ec2) (lT1edc@rhs* lT1ecd@lT1ec0) (lT1edd@lex* lT1ecc@lT1ebe) (lT1ede@mr lT1ecb@lT1ebc) (lT1edf@r lT1eca@lT1eba) (lT1ee0@e* lT1ec9@lT1eb8)) (begin (if (null? lT1ee0@e*) (lTe5a@syntax-violation '#f '"no expression in body" lT1ee0@e*) (void)) (let ((lT1ee9@init* (lTd98@chi-expr* (append (apply append (reverse lT1edb@mod**)) lT1ee0@e*) lT1edf@r lT1ede@mr))) (let ((lT1eeb@rhs* (lTdac@chi-rhs* lT1edc@rhs* lT1edf@r lT1ede@mr))) (lTadd@lTa3c@build-letrec* '#f (reverse lT1edd@lex*) (reverse lT1eeb@rhs*) (lTad8@lTa32@build-sequence '#f lT1ee9@init*))))))))))) (set! lT286a@lTdb2@chi-internal lTdb2@chi-internal)) (begin (set! lTdb4@parse-module (lambda (lT1eed@e) (let ((lT1eef@t lT1eed@e)) (let ((lT1ef1@ls/false (lTd7a@syntax-dispatch lT1eef@t '(_ each-any . each-any)))) (if lT1ef1@ls/false (apply (lambda (lT1ef3@export* lT1ef4@b*) (begin (if (not (for-all lTb73@id? lT1ef3@export*)) (lTe5a@syntax-violation '#f '"module exports must be identifiers" lT1eed@e) (void)) (values '#f (list->vector lT1ef3@export*) lT1ef4@b*))) lT1ef1@ls/false) (let ((lT1ef7@t lT1eef@t)) (let ((lT1ef9@ls/false (lTd7a@syntax-dispatch lT1ef7@t '(_ any each-any . each-any)))) (if lT1ef9@ls/false (apply (lambda (lT1efb@name lT1efc@export* lT1efd@b*) (begin (if (not (lTb73@id? lT1efb@name)) (lTe5a@syntax-violation '#f '"module name must be an identifier" lT1eed@e) (void)) (if (not (for-all lTb73@id? lT1efc@export*)) (lTe5a@syntax-violation '#f '"module exports must be identifiers" lT1eed@e) (void)) (values lT1efb@name (list->vector lT1efc@export*) lT1efd@b*))) lT1ef9@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1ef7@t))))))))) (set! lT286b@lTdb4@parse-module lTdb4@parse-module)) (begin (set! lTdbe@module-interface? (lambda (lT1f01@x) (and (simple-struct? lT1f01@x) (eq? (simple-struct-name lT1f01@x) 'module-interface)))) (set! lT286c@lTdbe@module-interface? lTdbe@module-interface?)) (begin (set! lTdc0@module-interface-first-mark (lambda (lT1f03@x) (simple-struct-ref lT1f03@x '0))) (set! lT286d@lTdc0@module-interface-first-mark lTdc0@module-interface-first-mark)) (begin (set! lTdc2@set-module-interface-first-mark! (lambda (lT1f05@x lT1f06@val) (simple-struct-set! lT1f05@x '0 lT1f06@val))) (set! lT286e@lTdc2@set-module-interface-first-mark! lTdc2@set-module-interface-first-mark!)) (begin (set! lTdc4@module-interface-exp-id-vec (lambda (lT1f09@x) (simple-struct-ref lT1f09@x '1))) (set! lT286f@lTdc4@module-interface-exp-id-vec lTdc4@module-interface-exp-id-vec)) (begin (set! lTdc6@set-module-interface-exp-id-vec! (lambda (lT1f0b@x lT1f0c@val) (simple-struct-set! lT1f0b@x '1 lT1f0c@val))) (set! lT2870@lTdc6@set-module-interface-exp-id-vec! lTdc6@set-module-interface-exp-id-vec!)) (begin (set! lTdc8@module-interface-exp-lab-vec (lambda (lT1f0f@x) (simple-struct-ref lT1f0f@x '2))) (set! lT2871@lTdc8@module-interface-exp-lab-vec lTdc8@module-interface-exp-lab-vec)) (begin (set! lTdca@set-module-interface-exp-lab-vec! (lambda (lT1f11@x lT1f12@val) (simple-struct-set! lT1f11@x '2 lT1f12@val))) (set! lT2872@lTdca@set-module-interface-exp-lab-vec! lTdca@set-module-interface-exp-lab-vec!)) (begin (set! lTdcc@dummy '3) (set! lT2873@lTdcc@dummy lTdcc@dummy)) (begin (set! lTdce@module-interface-exp-id* (lambda (lT1f15@iface lT1f16@id) (let ((lT1f1a@diff-marks '#f)) (begin (set! lT1f1a@diff-marks (lambda (lT1f21@ls lT1f22@x) (begin (if (null? lT1f21@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((lT1f25@a (car lT1f21@ls))) (if (eq? lT1f25@a lT1f22@x) '() (cons lT1f25@a (lT1f1a@diff-marks (cdr lT1f21@ls) lT1f22@x))))))) (let ((lT1f1b@diff (lT1f1a@diff-marks (lTb45@stx-mark* lT1f16@id) (lTdc0@module-interface-first-mark lT1f15@iface))) (lT1f1c@id-vec (lTdc4@module-interface-exp-id-vec lT1f15@iface))) (if (null? lT1f1b@diff) lT1f1c@id-vec (vector-map (lambda (lT1f1f@x) (make-simple-struct 'stx '5 (list (lTb41@stx-expr lT1f1f@x) (append lT1f1b@diff (lTb45@stx-mark* lT1f1f@x)) '() '()))) lT1f1c@id-vec))))))) (set! lT2874@lTdce@module-interface-exp-id* lTdce@module-interface-exp-id*)) (begin (set! lTdd0@chi-internal-module (lambda (lT1f27@e lT1f28@r lT1f29@mr lT1f2a@lex* lT1f2b@rhs* lT1f2c@mod** lT1f2d@kwd*) (call-with-values (lambda () (lTdb4@parse-module lT1f27@e)) (lambda (lT1f3b@lT1f36 lT1f3c@lT1f38 lT1f3d@lT1f3a) (let ((lT1f41@e* lT1f3d@lT1f3a) (lT1f42@exp-id* lT1f3c@lT1f38) (lT1f43@name lT1f3b@lT1f36)) (let ((lT1f47@rib (lTb27@make-empty-rib))) (let ((lT1f49@e* (map (lambda (lT1f4b@x) (lTb5f@add-subst lT1f47@rib lT1f4b@x)) (lTb71@syntax->list lT1f41@e*)))) (call-with-values (lambda () (lTdd2@chi-body* lT1f49@e* lT1f28@r lT1f29@mr lT1f2a@lex* lT1f2b@rhs* lT1f2c@mod** lT1f2d@kwd* '() lT1f47@rib '#f)) (lambda (lT1f5d@lT1f4e lT1f5e@lT1f50 lT1f5f@lT1f52 lT1f60@lT1f54 lT1f61@lT1f56 lT1f62@lT1f58 lT1f63@lT1f5a lT1f64@lT1f5c) (let ((lT1f6d@_exp* lT1f64@lT1f5c) (lT1f6e@kwd* lT1f63@lT1f5a) (lT1f6f@mod** lT1f62@lT1f58) (lT1f70@rhs* lT1f61@lT1f56) (lT1f71@lex* lT1f60@lT1f54) (lT1f72@mr lT1f5f@lT1f52) (lT1f73@r lT1f5e@lT1f50) (lT1f74@e* lT1f5d@lT1f4e)) (let ((lT1f7d@exp-lab* (vector-map (lambda (lT1f81@x) (or (lTb89@id->label (make-simple-struct 'stx '5 (list (lTb75@id->sym lT1f81@x) (lTb45@stx-mark* lT1f81@x) (list lT1f47@rib) '()))) (lTe5a@syntax-violation '#f '"cannot find module export" lT1f81@x))) lT1f42@exp-id*)) (lT1f7e@mod** (cons lT1f74@e* lT1f6f@mod**))) (if (not lT1f43@name) (values lT1f71@lex* lT1f70@rhs* lT1f42@exp-id* lT1f7d@exp-lab* lT1f73@r lT1f72@mr lT1f7e@mod** lT1f6e@kwd*) (let ((lT1f83@lab (lTaff@gen-label 'module)) (lT1f84@iface (make-simple-struct 'module-interface '4 (list (car (lTb45@stx-mark* lT1f43@name)) (vector-map (lambda (lT1f87@x) (make-simple-struct 'stx '5 (list (lTb41@stx-expr lT1f87@x) (lTb45@stx-mark* lT1f87@x) '() '()))) lT1f42@exp-id*) lT1f7d@exp-lab*)))) (values lT1f71@lex* lT1f70@rhs* (vector lT1f43@name) (vector lT1f83@lab) (cons (cons lT1f83@lab (cons '$module lT1f84@iface)) lT1f73@r) (cons (cons lT1f83@lab (cons '$module lT1f84@iface)) lT1f72@mr) lT1f7e@mod** lT1f6e@kwd*)))))))))))))) (set! lT2875@lTdd0@chi-internal-module lTdd0@chi-internal-module)) (begin (set! lTdd2@chi-body* (lambda (lT1f89@e* lT1f8a@r lT1f8b@mr lT1f8c@lex* lT1f8d@rhs* lT1f8e@mod** lT1f8f@kwd* lT1f90@exp* lT1f91@rib lT1f92@top?) (if (null? lT1f89@e*) (values lT1f89@e* lT1f8a@r lT1f8b@mr lT1f8c@lex* lT1f8d@rhs* lT1f8e@mod** lT1f8f@kwd* lT1f90@exp*) (let ((lT1f9d@e (car lT1f89@e*))) (call-with-values (lambda () (lTb95@syntax-type lT1f9d@e lT1f8a@r)) (lambda (lT1fa5@lT1fa0 lT1fa6@lT1fa2 lT1fa7@lT1fa4) (let ((lT1fab@kwd lT1fa7@lT1fa4) (lT1fac@value lT1fa6@lT1fa2) (lT1fad@type lT1fa5@lT1fa0)) (let ((lT1fb1@kwd* (if (lTb73@id? lT1fab@kwd) (cons lT1fab@kwd lT1f8f@kwd*) lT1f8f@kwd*))) (let ((lT1fb3@t lT1fad@type)) (if (memv lT1fb3@t '(define)) (call-with-values (lambda () (lTcfc@parse-define lT1f9d@e)) (lambda (lT1fb9@lT1fb6 lT1fba@lT1fb8) (let ((lT1fbd@rhs lT1fba@lT1fb8) (lT1fbe@id lT1fb9@lT1fb6)) (begin (if (lTb7f@bound-id-member? lT1fbe@id lT1fb1@kwd*) (lTe5a@syntax-violation '#f '"cannot redefine keyword" lT1f9d@e) (void)) (call-with-values (lambda () (lTb03@gen-define-label+loc lT1fbe@id lT1f91@rib)) (lambda (lT1fc5@lT1fc2 lT1fc6@lT1fc4) (let ((lT1fc9@lex lT1fc6@lT1fc4) (lT1fca@lab lT1fc5@lT1fc2)) (begin (lTb29@extend-rib! lT1f91@rib lT1fbe@id lT1fca@lab) (lTdd2@chi-body* (cdr lT1f89@e*) (lTd0a@add-lexical lT1fca@lab lT1fc9@lex lT1f8a@r) lT1f8b@mr (cons lT1fc9@lex lT1f8c@lex*) (cons lT1fbd@rhs lT1f8d@rhs*) lT1f8e@mod** lT1fb1@kwd* lT1f90@exp* lT1f91@rib lT1f92@top?))))))))) (if (memv lT1fb3@t '(define-syntax)) (call-with-values (lambda () (lTcfe@parse-define-syntax lT1f9d@e)) (lambda (lT1fd1@lT1fce lT1fd2@lT1fd0) (let ((lT1fd5@rhs lT1fd2@lT1fd0) (lT1fd6@id lT1fd1@lT1fce)) (begin (if (lTb7f@bound-id-member? lT1fd6@id lT1fb1@kwd*) (lTe5a@syntax-violation '#f '"cannot redefine keyword" lT1f9d@e) (void)) (let ((lT1fd9@lab (lTb05@gen-define-label lT1fd6@id lT1f91@rib)) (lT1fda@expanded-rhs (lTdd4@expand-transformer lT1fd5@rhs lT1f8b@mr))) (begin (lTb29@extend-rib! lT1f91@rib lT1fd6@id lT1fd9@lab) (let ((lT1fdd@b (lTbab@make-eval-transformer lT1fda@expanded-rhs))) (lTdd2@chi-body* (cdr lT1f89@e*) (cons (cons lT1fd9@lab lT1fdd@b) lT1f8a@r) (cons (cons lT1fd9@lab lT1fdd@b) lT1f8b@mr) lT1f8c@lex* lT1f8d@rhs* lT1f8e@mod** lT1fb1@kwd* lT1f90@exp* lT1f91@rib lT1f92@top?)))))))) (if (memv lT1fb3@t '(let-syntax letrec-syntax)) (let ((lT1fdf@t lT1f9d@e)) (let ((lT1fe1@ls/false (lTd7a@syntax-dispatch lT1fdf@t '(_ #(each (any any)) . each-any)))) (if (and lT1fe1@ls/false (apply (lambda (lT1fe3@xlhs* lT1fe4@xrhs* lT1fe5@xbody*) (if (not (lTb7b@valid-bound-ids? lT1fe3@xlhs*)) (lTe5a@syntax-violation '#f '"invalid identifiers" lT1f9d@e) (void))) lT1fe1@ls/false)) (apply (lambda (lT1fe9@xlhs* lT1fea@xrhs* lT1feb@xbody*) (let ((lT1fef@xlab* (map lTaff@gen-label lT1fe9@xlhs*))) (let ((lT1ff1@xrib (lTb33@make-full-rib lT1fe9@xlhs* lT1fef@xlab*))) (let ((lT1ff3@xb* (map (lambda (lT1ff5@x) (lTbab@make-eval-transformer (lTdd4@expand-transformer (if (eq? lT1fad@type 'let-syntax) lT1ff5@x (lTb5f@add-subst lT1ff1@xrib lT1ff5@x)) lT1f8b@mr))) lT1fea@xrhs*))) (lTdd2@chi-body* (append (map (lambda (lT1ff7@x) (lTb5f@add-subst lT1ff1@xrib lT1ff7@x)) lT1feb@xbody*) (cdr lT1f89@e*)) (append (map cons lT1fef@xlab* lT1ff3@xb*) lT1f8a@r) (append (map cons lT1fef@xlab* lT1ff3@xb*) lT1f8b@mr) lT1f8c@lex* lT1f8d@rhs* lT1f8e@mod** lT1fb1@kwd* lT1f90@exp* lT1f91@rib lT1f92@top?))))) lT1fe1@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1fdf@t)))) (if (memv lT1fb3@t '(begin)) (let ((lT1ff9@t lT1f9d@e)) (let ((lT1ffb@ls/false (lTd7a@syntax-dispatch lT1ff9@t '(_ . each-any)))) (if lT1ffb@ls/false (apply (lambda (lT1ffd@x*) (lTdd2@chi-body* (append lT1ffd@x* (cdr lT1f89@e*)) lT1f8a@r lT1f8b@mr lT1f8c@lex* lT1f8d@rhs* lT1f8e@mod** lT1fb1@kwd* lT1f90@exp* lT1f91@rib lT1f92@top?)) lT1ffb@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT1ff9@t)))) (if (memv lT1fb3@t '(global-macro global-macro!)) (lTdd2@chi-body* (cons (lTb5f@add-subst lT1f91@rib (lTd96@chi-global-macro lT1fac@value lT1f9d@e)) (cdr lT1f89@e*)) lT1f8a@r lT1f8b@mr lT1f8c@lex* lT1f8d@rhs* lT1f8e@mod** lT1fb1@kwd* lT1f90@exp* lT1f91@rib lT1f92@top?) (if (memv lT1fb3@t '(local-macro local-macro!)) (lTdd2@chi-body* (cons (lTb5f@add-subst lT1f91@rib (lTd94@chi-local-macro lT1fac@value lT1f9d@e)) (cdr lT1f89@e*)) lT1f8a@r lT1f8b@mr lT1f8c@lex* lT1f8d@rhs* lT1f8e@mod** lT1fb1@kwd* lT1f90@exp* lT1f91@rib lT1f92@top?) (if (memv lT1fb3@t '(macro macro!)) (lTdd2@chi-body* (cons (lTb5f@add-subst lT1f91@rib (lTd92@chi-macro lT1fac@value lT1f9d@e)) (cdr lT1f89@e*)) lT1f8a@r lT1f8b@mr lT1f8c@lex* lT1f8d@rhs* lT1f8e@mod** lT1fb1@kwd* lT1f90@exp* lT1f91@rib lT1f92@top?) (if (memv lT1fb3@t '(module)) (call-with-values (lambda () (lTdd0@chi-internal-module lT1f9d@e lT1f8a@r lT1f8b@mr lT1f8c@lex* lT1f8d@rhs* lT1f8e@mod** lT1fb1@kwd*)) (lambda (lT200f@lT2000 lT2010@lT2002 lT2011@lT2004 lT2012@lT2006 lT2013@lT2008 lT2014@lT200a lT2015@lT200c lT2016@lT200e) (let ((lT201f@kwd* lT2016@lT200e) (lT2020@mod** lT2015@lT200c) (lT2021@mr lT2014@lT200a) (lT2022@r lT2013@lT2008) (lT2023@m-exp-lab* lT2012@lT2006) (lT2024@m-exp-id* lT2011@lT2004) (lT2025@rhs* lT2010@lT2002) (lT2026@lex* lT200f@lT2000)) (begin (vector-for-each (lambda (lT202f@id lT2030@lab) (lTb29@extend-rib! lT1f91@rib lT202f@id lT2030@lab)) lT2024@m-exp-id* lT2023@m-exp-lab*) (lTdd2@chi-body* (cdr lT1f89@e*) lT2022@r lT2021@mr lT2026@lex* lT2025@rhs* lT2020@mod** lT201f@kwd* lT1f90@exp* lT1f91@rib lT1f92@top?))))) (if (memv lT1fb3@t '(library)) (begin (lTe3c@library-expander (lTb87@stx->datum lT1f9d@e)) (lTdd2@chi-body* (cdr lT1f89@e*) lT1f8a@r lT1f8b@mr lT1f8c@lex* lT1f8d@rhs* lT1f8e@mod** lT1fb1@kwd* lT1f90@exp* lT1f91@rib lT1f92@top?)) (if (memv lT1fb3@t '(export)) (let ((lT2033@t lT1f9d@e)) (let ((lT2035@ls/false (lTd7a@syntax-dispatch lT2033@t '(_ . each-any)))) (if lT2035@ls/false (apply (lambda (lT2037@exp-decl*) (lTdd2@chi-body* (cdr lT1f89@e*) lT1f8a@r lT1f8b@mr lT1f8c@lex* lT1f8d@rhs* lT1f8e@mod** lT1fb1@kwd* (append lT2037@exp-decl* lT1f90@exp*) lT1f91@rib lT1f92@top?)) lT2035@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT2033@t)))) (if (memv lT1fb3@t '(import)) (let ((lT203a@module-import? '#f) (lT203c@module-import '#f) (lT203e@library-import '#f)) (begin (set! lT203a@module-import? (lambda (lT208d@e) (let ((lT208f@t lT208d@e)) (let ((lT2091@ls/false (lTd7a@syntax-dispatch lT208f@t '(_ any)))) (if (and lT2091@ls/false (apply (lambda (lT2093@id) (lTb73@id? lT2093@id)) lT2091@ls/false)) (apply (lambda (lT2095@id) '#t) lT2091@ls/false) (let ((lT2097@t lT208f@t)) (let ((lT2099@ls/false (lTd7a@syntax-dispatch lT2097@t '(_ . each-any)))) (if lT2099@ls/false (apply (lambda (lT209b@imp*) '#f) lT2099@ls/false) (let ((lT209d@t lT2097@t)) (let ((lT209f@ls/false (lTd7a@syntax-dispatch lT209d@t '_))) (if lT209f@ls/false (apply (lambda () (lTe5a@syntax-violation '#f '"malformed import form" lT208d@e)) lT209f@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT209d@t)))))))))))) (set! lT203c@module-import (lambda (lT206b@e lT206c@r) (let ((lT206f@t lT206b@e)) (let ((lT2071@ls/false (lTd7a@syntax-dispatch lT206f@t '(_ any)))) (if (and lT2071@ls/false (apply (lambda (lT2073@id) (lTb73@id? lT2073@id)) lT2071@ls/false)) (apply (lambda (lT2075@id) (call-with-values (lambda () (lTb95@syntax-type lT2075@id lT206c@r)) (lambda (lT207d@lT2078 lT207e@lT207a lT207f@lT207c) (let ((lT2083@kwd lT207f@lT207c) (lT2084@value lT207e@lT207a) (lT2085@type lT207d@lT2078)) (let ((lT2089@t lT2085@type)) (if (memv lT2089@t '($module)) (let ((lT208b@iface lT2084@value)) (values (lTdce@module-interface-exp-id* lT208b@iface lT2075@id) (lTdc8@module-interface-exp-lab-vec lT208b@iface))) (lTe5a@syntax-violation '#f '"invalid import" lT206b@e))))))) lT2071@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT206f@t)))))) (set! lT203e@library-import (lambda (lT204f@e) (let ((lT2051@t lT204f@e)) (let ((lT2053@ls/false (lTd7a@syntax-dispatch lT2051@t '(any . each-any)))) (if lT2053@ls/false (apply (lambda (lT2055@ctxt lT2056@imp*) (call-with-values (lambda () (lTddc@parse-import-spec* (lTe60@syntax->datum lT2056@imp*))) (lambda (lT205d@lT205a lT205e@lT205c) (let ((lT2061@subst-labels lT205e@lT205c) (lT2062@subst-names lT205d@lT205a)) (values (vector-map (lambda (lT2065@name) (lTb53@datum->stx lT2055@ctxt lT2065@name)) lT2062@subst-names) lT2061@subst-labels))))) lT2053@ls/false) (let ((lT2067@t lT2051@t)) (let ((lT2069@ls/false (lTd7a@syntax-dispatch lT2067@t '_))) (if lT2069@ls/false (apply (lambda () (lTe5a@syntax-violation '#f '"invalid import form" lT204f@e)) lT2069@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT2067@t))))))))) (begin (call-with-values (lambda () (if (lT203a@module-import? lT1f9d@e) (lT203c@module-import lT1f9d@e lT1f8a@r) (lT203e@library-import lT1f9d@e))) (lambda (lT2043@lT2040 lT2044@lT2042) (let ((lT2047@lab* lT2044@lT2042) (lT2048@id* lT2043@lT2040)) (vector-for-each (lambda (lT204b@id lT204c@lab) (lTb29@extend-rib! lT1f91@rib lT204b@id lT204c@lab)) lT2048@id* lT2047@lab*)))) (lTdd2@chi-body* (cdr lT1f89@e*) lT1f8a@r lT1f8b@mr lT1f8c@lex* lT1f8d@rhs* lT1f8e@mod** lT1fb1@kwd* lT1f90@exp* lT1f91@rib lT1f92@top?)))) (if lT1f92@top? (lTdd2@chi-body* (cdr lT1f89@e*) lT1f8a@r lT1f8b@mr (cons (lTafb@gen-lexical 'dummy) lT1f8c@lex*) (cons (cons 'top-expr lT1f9d@e) lT1f8d@rhs*) lT1f8e@mod** lT1fb1@kwd* lT1f90@exp* lT1f91@rib lT1f92@top?) (values lT1f89@e* lT1f8a@r lT1f8b@mr lT1f8c@lex* lT1f8d@rhs* lT1f8e@mod** lT1fb1@kwd* lT1f90@exp*)))))))))))))))))))))) (set! lT2876@lTdd2@chi-body* lTdd2@chi-body*)) (begin (set! lTdd4@expand-transformer (lambda (lT20a1@expr lT20a2@r) (let ((lT20a5@rtc (lTde0@make-collector))) (let ((lT20a7@expanded-rhs (let ((lT20b1@lT20aa lTde2@inv-collector) (lT20b2@lT20ac lTde4@vis-collector) (lT20b3@lT20ae lT20a5@rtc) (lT20b4@lT20b0 (lambda (lT20b9@x) (values)))) (let ((lT20bb@swap (lambda () (begin (let ((lT20bd@t (lT20b1@lT20aa))) (begin (lT20b1@lT20aa lT20b3@lT20ae) (set! lT20b3@lT20ae lT20bd@t))) (let ((lT20bf@t (lT20b2@lT20ac))) (begin (lT20b2@lT20ac lT20b4@lT20b0) (set! lT20b4@lT20b0 lT20bf@t))))))) (dynamic-wind lT20bb@swap (lambda () (lTd9c@chi-expr lT20a1@expr lT20a2@r lT20a2@r)) lT20bb@swap))))) (begin (for-each (let ((lT20c1@mark-visit (lTde4@vis-collector))) (lambda (lT20c3@x) (begin (lT989@lT7d7@invoke-library lT20c3@x) (lT20c1@mark-visit lT20c3@x)))) (lT20a5@rtc)) lT20a7@expanded-rhs))))) (set! lT2877@lTdd4@expand-transformer lTdd4@expand-transformer)) (begin (set! lTdd6@parse-exports (lambda (lT20c5@exp*) (let lT20cd@f ((lT20c7@exp* lT20c5@exp*) (lT20c8@int* '()) (lT20c9@ext* '())) (if (null? lT20c7@exp*) (begin (if (not (lTb7b@valid-bound-ids? lT20c9@ext*)) (lTe5a@syntax-violation 'export '"invalid exports" (lTdb0@find-dups lT20c9@ext*)) (void)) (values (map lTe60@syntax->datum lT20c9@ext*) lT20c8@int*)) (let ((lT20cf@t (car lT20c7@exp*))) (let ((lT20d1@ls/false (lTd7a@syntax-dispatch lT20cf@t '(any . #(each (any any)))))) (if lT20d1@ls/false (apply (lambda (lT20d3@rename lT20d4@i* lT20d5@e*) (begin (if (not (and (eq? (lTe60@syntax->datum lT20d3@rename) 'rename) (for-all lTb73@id? lT20d4@i*) (for-all lTb73@id? lT20d5@e*))) (lTe5a@syntax-violation 'export '"invalid export specifier" (car lT20c7@exp*)) (void)) (lT20cd@f (cdr lT20c7@exp*) (append lT20d4@i* lT20c8@int*) (append lT20d5@e* lT20c9@ext*)))) lT20d1@ls/false) (let ((lT20d9@t lT20cf@t)) (let ((lT20db@ls/false (lTd7a@syntax-dispatch lT20d9@t 'any))) (if lT20db@ls/false (apply (lambda (lT20dd@ie) (begin (if (not (lTb73@id? lT20dd@ie)) (lTe5a@syntax-violation 'export '"invalid export" lT20dd@ie) (void)) (lT20cd@f (cdr lT20c7@exp*) (cons lT20dd@ie lT20c8@int*) (cons lT20dd@ie lT20c9@ext*)))) lT20db@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT20d9@t))))))))))) (set! lT2878@lTdd6@parse-exports lTdd6@parse-exports)) (begin (set! lTdd8@parse-library-name (lambda (lT20df@spec) (let ((lT20e2@parse '#f)) (begin (set! lT20e2@parse (lambda (lT20ef@x) (let ((lT20f1@t lT20ef@x)) (let ((lT20f3@ls/false (lTd7a@syntax-dispatch lT20f1@t '(each-any)))) (if (and lT20f3@ls/false (apply (lambda (lT20f5@v*) (for-all (lambda (lT20f7@x) (let ((lT20f9@x (lTe60@syntax->datum lT20f7@x))) (and (integer? lT20f9@x) (exact? lT20f9@x)))) lT20f5@v*)) lT20f3@ls/false)) (apply (lambda (lT20fb@v*) (values '() (map lTe60@syntax->datum lT20fb@v*))) lT20f3@ls/false) (let ((lT20fd@t lT20f1@t)) (let ((lT20ff@ls/false (lTd7a@syntax-dispatch lT20fd@t '(any . any)))) (if (and lT20ff@ls/false (apply (lambda (lT2101@x lT2102@rest) (symbol? (lTe60@syntax->datum lT2101@x))) lT20ff@ls/false)) (apply (lambda (lT2105@x lT2106@rest) (call-with-values (lambda () (lT20e2@parse lT2106@rest)) (lambda (lT210d@lT210a lT210e@lT210c) (let ((lT2111@v* lT210e@lT210c) (lT2112@x* lT210d@lT210a)) (values (cons (lTe60@syntax->datum lT2105@x) lT2112@x*) lT2111@v*))))) lT20ff@ls/false) (let ((lT2115@t lT20fd@t)) (let ((lT2117@ls/false (lTd7a@syntax-dispatch lT2115@t '()))) (if lT2117@ls/false (apply (lambda () (values '() '())) lT2117@ls/false) (let ((lT2119@t lT2115@t)) (let ((lT211b@ls/false (lTd7a@syntax-dispatch lT2119@t '_))) (if lT211b@ls/false (apply (lambda () (lTe5a@syntax-violation '#f '"invalid library name" lT20df@spec)) lT211b@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT2119@t))))))))))))))) (call-with-values (lambda () (lT20e2@parse lT20df@spec)) (lambda (lT20e7@lT20e4 lT20e8@lT20e6) (let ((lT20eb@ver* lT20e8@lT20e6) (lT20ec@name* lT20e7@lT20e4)) (begin (if (null? lT20ec@name*) (lTe5a@syntax-violation '#f '"empty library name" lT20df@spec) (void)) (values lT20ec@name* lT20eb@ver*))))))))) (set! lT2879@lTdd8@parse-library-name lTdd8@parse-library-name)) (begin (set! lTdda@parse-library (lambda (lT211d@e) (let ((lT211f@t lT211d@e)) (let ((lT2121@ls/false (lTd7a@syntax-dispatch lT211f@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and lT2121@ls/false (apply (lambda (lT2123@library lT2124@name* lT2125@export lT2126@exp* lT2127@import lT2128@imp* lT2129@b*) (and (eq? (lTe60@syntax->datum lT2125@export) 'export) (eq? (lTe60@syntax->datum lT2127@import) 'import) (eq? (lTe60@syntax->datum lT2123@library) 'library))) lT2121@ls/false)) (apply (lambda (lT2131@library lT2132@name* lT2133@export lT2134@exp* lT2135@import lT2136@imp* lT2137@b*) (values lT2132@name* lT2134@exp* lT2136@imp* lT2137@b*)) lT2121@ls/false) (let ((lT213f@t lT211f@t)) (let ((lT2141@ls/false (lTd7a@syntax-dispatch lT213f@t '_))) (if lT2141@ls/false (apply (lambda () (lTe5a@syntax-violation '#f '"malformed library" lT211d@e)) lT2141@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT213f@t))))))))) (set! lT287a@lTdda@parse-library lTdda@parse-library)) (begin (set! lTddc@parse-import-spec* (let ((lT2144@idsyn? '#f) (lT2146@dup-error '#f) (lT2148@merge-substs '#f) (lT214a@exclude* '#f) (lT214c@find* '#f) (lT214e@rem* '#f) (lT2150@remove-dups '#f) (lT2152@parse-library-name '#f) (lT2154@import-library '#f) (lT2156@get-import '#f) (lT2158@add-imports! '#f)) (begin (set! lT2144@idsyn? (lambda (lT234d@x) (symbol? (lTe60@syntax->datum lT234d@x)))) (set! lT2146@dup-error (lambda (lT234b@name) (lTe5a@syntax-violation 'import '"two imports with different bindings" lT234b@name))) (set! lT2148@merge-substs (lambda (lT2339@s lT233a@subst) (let ((lT233e@insert-to-subst '#f)) (begin (set! lT233e@insert-to-subst (lambda (lT233f@a lT2340@subst) (let ((lT2343@name (car lT233f@a)) (lT2344@label (cdr lT233f@a))) (let ((lT2347@t (assq lT2343@name lT2340@subst))) (if lT2347@t ((lambda (lT2349@x) (if (eq? (cdr lT2349@x) lT2344@label) lT2340@subst (lT2146@dup-error lT2343@name))) lT2347@t) (cons lT233f@a lT2340@subst)))))) (if (null? lT2339@s) lT233a@subst (lT233e@insert-to-subst (car lT2339@s) (lT2148@merge-substs (cdr lT2339@s) lT233a@subst))))))) (set! lT214a@exclude* (lambda (lT2309@sym* lT230a@subst) (let ((lT230e@exclude '#f)) (begin (set! lT230e@exclude (lambda (lT2327@sym lT2328@subst) (if (null? lT2328@subst) (lTe5a@syntax-violation 'import '"cannot rename unbound identifier" lT2327@sym) (if (eq? lT2327@sym (caar lT2328@subst)) (values (cdar lT2328@subst) (cdr lT2328@subst)) (let ((lT232b@a (car lT2328@subst))) (call-with-values (lambda () (lT230e@exclude lT2327@sym (cdr lT2328@subst))) (lambda (lT2331@lT232e lT2332@lT2330) (let ((lT2335@subst lT2332@lT2330) (lT2336@old lT2331@lT232e)) (values lT2336@old (cons lT232b@a lT2335@subst)))))))))) (if (null? lT2309@sym*) (values '() lT230a@subst) (call-with-values (lambda () (lT230e@exclude (car lT2309@sym*) lT230a@subst)) (lambda (lT2313@lT2310 lT2314@lT2312) (let ((lT2317@subst lT2314@lT2312) (lT2318@old lT2313@lT2310)) (call-with-values (lambda () (lT214a@exclude* (cdr lT2309@sym*) lT2317@subst)) (lambda (lT231f@lT231c lT2320@lT231e) (let ((lT2323@subst lT2320@lT231e) (lT2324@old* lT231f@lT231c)) (values (cons lT2318@old lT2324@old*) lT2323@subst)))))))))))) (set! lT214c@find* (lambda (lT2301@sym* lT2302@subst) (map (lambda (lT2305@x) (let ((lT2307@t (assq lT2305@x lT2302@subst))) (if lT2307@t (cdr lT2307@t) (lTe5a@syntax-violation 'import '"cannot find identifier" lT2305@x)))) lT2301@sym*))) (set! lT214e@rem* (lambda (lT22f9@sym* lT22fa@subst) (let lT22ff@f ((lT22fd@subst lT22fa@subst)) (if (null? lT22fd@subst) '() (if (memq (caar lT22fd@subst) lT22f9@sym*) (lT22ff@f (cdr lT22fd@subst)) (cons (car lT22fd@subst) (lT22ff@f (cdr lT22fd@subst)))))))) (set! lT2150@remove-dups (lambda (lT22f7@ls) (if (null? lT22f7@ls) '() (if (memq (car lT22f7@ls) (cdr lT22f7@ls)) (lT2150@remove-dups (cdr lT22f7@ls)) (cons (car lT22f7@ls) (lT2150@remove-dups (cdr lT22f7@ls))))))) (set! lT2152@parse-library-name (lambda (lT220f@spec) (let ((lT2212@subversion? '#f) (lT2214@subversion-pred '#f) (lT2216@version-pred '#f)) (begin (set! lT2212@subversion? (lambda (lT22f3@x) (let ((lT22f5@x (lTe60@syntax->datum lT22f3@x))) (and (integer? lT22f5@x) (exact? lT22f5@x) (>= lT22f5@x '0))))) (set! lT2214@subversion-pred (lambda (lT2293@x*) (let ((lT2295@t lT2293@x*)) (let ((lT2297@ls/false (lTd7a@syntax-dispatch lT2295@t 'any))) (if (and lT2297@ls/false (apply (lambda (lT2299@n) (lT2212@subversion? lT2299@n)) lT2297@ls/false)) (apply (lambda (lT229b@n) (lambda (lT229d@x) (= lT229d@x (lTe60@syntax->datum lT229b@n)))) lT2297@ls/false) (let ((lT229f@t lT2295@t)) (let ((lT22a1@ls/false (lTd7a@syntax-dispatch lT229f@t '(any . each-any)))) (if (and lT22a1@ls/false (apply (lambda (lT22a3@p? lT22a4@sub*) (eq? (lTe60@syntax->datum lT22a3@p?) 'and)) lT22a1@ls/false)) (apply (lambda (lT22a7@p? lT22a8@sub*) (let ((lT22ab@p* (map lT2214@subversion-pred lT22a8@sub*))) (lambda (lT22ad@x) (for-all (lambda (lT22af@p) (lT22af@p lT22ad@x)) lT22ab@p*)))) lT22a1@ls/false) (let ((lT22b1@t lT229f@t)) (let ((lT22b3@ls/false (lTd7a@syntax-dispatch lT22b1@t '(any . each-any)))) (if (and lT22b3@ls/false (apply (lambda (lT22b5@p? lT22b6@sub*) (eq? (lTe60@syntax->datum lT22b5@p?) 'or)) lT22b3@ls/false)) (apply (lambda (lT22b9@p? lT22ba@sub*) (let ((lT22bd@p* (map lT2214@subversion-pred lT22ba@sub*))) (lambda (lT22bf@x) (exists (lambda (lT22c1@p) (lT22c1@p lT22bf@x)) lT22bd@p*)))) lT22b3@ls/false) (let ((lT22c3@t lT22b1@t)) (let ((lT22c5@ls/false (lTd7a@syntax-dispatch lT22c3@t '(any any)))) (if (and lT22c5@ls/false (apply (lambda (lT22c7@p? lT22c8@sub) (eq? (lTe60@syntax->datum lT22c7@p?) 'not)) lT22c5@ls/false)) (apply (lambda (lT22cb@p? lT22cc@sub) (let ((lT22cf@p (lT2214@subversion-pred lT22cc@sub))) (lambda (lT22d1@x) (not (lT22cf@p lT22d1@x))))) lT22c5@ls/false) (let ((lT22d3@t lT22c3@t)) (let ((lT22d5@ls/false (lTd7a@syntax-dispatch lT22d3@t '(any any)))) (if (and lT22d5@ls/false (apply (lambda (lT22d7@p? lT22d8@n) (and (eq? (lTe60@syntax->datum lT22d7@p?) '<=) (lT2212@subversion? lT22d8@n))) lT22d5@ls/false)) (apply (lambda (lT22db@p? lT22dc@n) (lambda (lT22df@x) (<= lT22df@x (lTe60@syntax->datum lT22dc@n)))) lT22d5@ls/false) (let ((lT22e1@t lT22d3@t)) (let ((lT22e3@ls/false (lTd7a@syntax-dispatch lT22e1@t '(any any)))) (if (and lT22e3@ls/false (apply (lambda (lT22e5@p? lT22e6@n) (and (eq? (lTe60@syntax->datum lT22e5@p?) '>=) (lT2212@subversion? lT22e6@n))) lT22e3@ls/false)) (apply (lambda (lT22e9@p? lT22ea@n) (lambda (lT22ed@x) (>= lT22ed@x (lTe60@syntax->datum lT22ea@n)))) lT22e3@ls/false) (let ((lT22ef@t lT22e1@t)) (let ((lT22f1@ls/false (lTd7a@syntax-dispatch lT22ef@t '_))) (if lT22f1@ls/false (apply (lambda () (lTe5a@syntax-violation 'import '"invalid sub-version spec" lT220f@spec lT2293@x*)) lT22f1@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT22ef@t)))))))))))))))))))))))) (set! lT2216@version-pred (lambda (lT2243@x*) (let ((lT2245@t lT2243@x*)) (let ((lT2247@ls/false (lTd7a@syntax-dispatch lT2245@t '()))) (if lT2247@ls/false (apply (lambda () (lambda (lT2249@x) '#t)) lT2247@ls/false) (let ((lT224b@t lT2245@t)) (let ((lT224d@ls/false (lTd7a@syntax-dispatch lT224b@t '(any . each-any)))) (if (and lT224d@ls/false (apply (lambda (lT224f@c lT2250@ver*) (eq? (lTe60@syntax->datum lT224f@c) 'and)) lT224d@ls/false)) (apply (lambda (lT2253@c lT2254@ver*) (let ((lT2257@p* (map lT2216@version-pred lT2254@ver*))) (lambda (lT2259@x) (for-all (lambda (lT225b@p) (lT225b@p lT2259@x)) lT2257@p*)))) lT224d@ls/false) (let ((lT225d@t lT224b@t)) (let ((lT225f@ls/false (lTd7a@syntax-dispatch lT225d@t '(any . each-any)))) (if (and lT225f@ls/false (apply (lambda (lT2261@c lT2262@ver*) (eq? (lTe60@syntax->datum lT2261@c) 'or)) lT225f@ls/false)) (apply (lambda (lT2265@c lT2266@ver*) (let ((lT2269@p* (map lT2216@version-pred lT2266@ver*))) (lambda (lT226b@x) (exists (lambda (lT226d@p) (lT226d@p lT226b@x)) lT2269@p*)))) lT225f@ls/false) (let ((lT226f@t lT225d@t)) (let ((lT2271@ls/false (lTd7a@syntax-dispatch lT226f@t '(any any)))) (if (and lT2271@ls/false (apply (lambda (lT2273@c lT2274@ver) (eq? (lTe60@syntax->datum lT2273@c) 'not)) lT2271@ls/false)) (apply (lambda (lT2277@c lT2278@ver) (let ((lT227b@p (lT2216@version-pred lT2278@ver))) (lambda (lT227d@x) (not (lT227b@p lT227d@x))))) lT2271@ls/false) (let ((lT227f@t lT226f@t)) (let ((lT2281@ls/false (lTd7a@syntax-dispatch lT227f@t 'each-any))) (if lT2281@ls/false (apply (lambda (lT2283@sub*) (let ((lT2285@p* (map lT2214@subversion-pred lT2283@sub*))) (lambda (lT2287@x) (let lT228d@f ((lT2289@p* lT2285@p*) (lT228a@x lT2287@x)) (if (null? lT2289@p*) '#t (if (null? lT228a@x) '#f (and ((car lT2289@p*) (car lT228a@x)) (lT228d@f (cdr lT2289@p*) (cdr lT228a@x))))))))) lT2281@ls/false) (let ((lT228f@t lT227f@t)) (let ((lT2291@ls/false (lTd7a@syntax-dispatch lT228f@t '_))) (if lT2291@ls/false (apply (lambda () (lTe5a@syntax-violation 'import '"invalid version spec" lT220f@spec lT2243@x*)) lT2291@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT228f@t))))))))))))))))))))) (let lT2219@f ((lT2217@x lT220f@spec)) (let ((lT221b@t lT2217@x)) (let ((lT221d@ls/false (lTd7a@syntax-dispatch lT221b@t '(each-any)))) (if lT221d@ls/false (apply (lambda (lT221f@version-spec*) (values '() (lT2216@version-pred lT221f@version-spec*))) lT221d@ls/false) (let ((lT2221@t lT221b@t)) (let ((lT2223@ls/false (lTd7a@syntax-dispatch lT2221@t '(any . any)))) (if (and lT2223@ls/false (apply (lambda (lT2225@x lT2226@x*) (lT2144@idsyn? lT2225@x)) lT2223@ls/false)) (apply (lambda (lT2229@x lT222a@x*) (call-with-values (lambda () (lT2219@f lT222a@x*)) (lambda (lT2231@lT222e lT2232@lT2230) (let ((lT2235@pred lT2232@lT2230) (lT2236@name lT2231@lT222e)) (values (cons (lTe60@syntax->datum lT2229@x) lT2236@name) lT2235@pred))))) lT2223@ls/false) (let ((lT2239@t lT2221@t)) (let ((lT223b@ls/false (lTd7a@syntax-dispatch lT2239@t '()))) (if lT223b@ls/false (apply (lambda () (values '() (lambda (lT223d@x) '#t))) lT223b@ls/false) (let ((lT223f@t lT2239@t)) (let ((lT2241@ls/false (lTd7a@syntax-dispatch lT223f@t '_))) (if lT2241@ls/false (apply (lambda () (lTe5a@syntax-violation '#f '"invalid import spec" lT220f@spec)) lT2241@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT223f@t)))))))))))))))))) (set! lT2154@import-library (lambda (lT21ff@spec*) (call-with-values (lambda () (lT2152@parse-library-name lT21ff@spec*)) (lambda (lT2205@lT2202 lT2206@lT2204) (let ((lT2209@pred lT2206@lT2204) (lT220a@name lT2205@lT2202)) (begin (if (null? lT220a@name) (lTe5a@syntax-violation 'import '"empty library name" lT21ff@spec*) (void)) (let ((lT220d@lib (lT982@lT7c9@find-library-by-name lT220a@name))) (begin (if (not lT220d@lib) (lTe5a@syntax-violation 'import '"cannot find library with required name" lT220a@name) (void)) (if (not (lT2209@pred (lT95c@lT77d@library-version lT220d@lib))) (lTe5a@syntax-violation 'import '"library does not satisfy version specification" lT21ff@spec* lT220d@lib) (void)) ((lTde6@imp-collector) lT220d@lib) (lT964@lT78d@library-subst lT220d@lib))))))))) (set! lT2156@get-import (lambda (lT2171@spec) (let ((lT2173@t lT2171@spec)) (let ((lT2175@ls/false (lTd7a@syntax-dispatch lT2173@t '(any . each-any)))) (if (and lT2175@ls/false (apply (lambda (lT2177@x lT2178@x*) (not (memq (lTe60@syntax->datum lT2177@x) '(for rename except only prefix library)))) lT2175@ls/false)) (apply (lambda (lT217b@x lT217c@x*) (lT2154@import-library (cons lT217b@x lT217c@x*))) lT2175@ls/false) (let ((lT217f@t lT2173@t)) (let ((lT2181@ls/false (lTd7a@syntax-dispatch lT217f@t '(any any . #(each (any any)))))) (if (and lT2181@ls/false (apply (lambda (lT2183@rename lT2184@isp lT2185@old* lT2186@new*) (and (eq? (lTe60@syntax->datum lT2183@rename) 'rename) (for-all lT2144@idsyn? lT2185@old*) (for-all lT2144@idsyn? lT2186@new*))) lT2181@ls/false)) (apply (lambda (lT218b@rename lT218c@isp lT218d@old* lT218e@new*) (let ((lT2193@subst (lT2156@get-import lT218c@isp)) (lT2194@old* (map lTe60@syntax->datum lT218d@old*)) (lT2195@new* (map lTe60@syntax->datum lT218e@new*))) (let ((lT2199@old-label* (lT214c@find* lT2194@old* lT2193@subst))) (let ((lT219b@subst (lT214e@rem* lT2194@old* lT2193@subst))) (lT2148@merge-substs (map cons lT2195@new* lT2199@old-label*) lT219b@subst))))) lT2181@ls/false) (let ((lT219d@t lT217f@t)) (let ((lT219f@ls/false (lTd7a@syntax-dispatch lT219d@t '(any any . each-any)))) (if (and lT219f@ls/false (apply (lambda (lT21a1@except lT21a2@isp lT21a3@sym*) (and (eq? (lTe60@syntax->datum lT21a1@except) 'except) (for-all lT2144@idsyn? lT21a3@sym*))) lT219f@ls/false)) (apply (lambda (lT21a7@except lT21a8@isp lT21a9@sym*) (let ((lT21ad@subst (lT2156@get-import lT21a8@isp))) (lT214e@rem* (map lTe60@syntax->datum lT21a9@sym*) lT21ad@subst))) lT219f@ls/false) (let ((lT21af@t lT219d@t)) (let ((lT21b1@ls/false (lTd7a@syntax-dispatch lT21af@t '(any any . each-any)))) (if (and lT21b1@ls/false (apply (lambda (lT21b3@only lT21b4@isp lT21b5@sym*) (and (eq? (lTe60@syntax->datum lT21b3@only) 'only) (for-all lT2144@idsyn? lT21b5@sym*))) lT21b1@ls/false)) (apply (lambda (lT21b9@only lT21ba@isp lT21bb@sym*) (let ((lT21bf@subst (lT2156@get-import lT21ba@isp)) (lT21c0@sym* (map lTe60@syntax->datum lT21bb@sym*))) (let ((lT21c3@sym* (lT2150@remove-dups lT21c0@sym*))) (let ((lT21c5@lab* (lT214c@find* lT21c3@sym* lT21bf@subst))) (map cons lT21c3@sym* lT21c5@lab*))))) lT21b1@ls/false) (let ((lT21c7@t lT21af@t)) (let ((lT21c9@ls/false (lTd7a@syntax-dispatch lT21c7@t '(any any any)))) (if (and lT21c9@ls/false (apply (lambda (lT21cb@prefix lT21cc@isp lT21cd@p) (and (eq? (lTe60@syntax->datum lT21cb@prefix) 'prefix) (lT2144@idsyn? lT21cd@p))) lT21c9@ls/false)) (apply (lambda (lT21d1@prefix lT21d2@isp lT21d3@p) (let ((lT21d7@subst (lT2156@get-import lT21d2@isp)) (lT21d8@prefix (symbol->string (lTe60@syntax->datum lT21d3@p)))) (map (lambda (lT21db@x) (cons (string->symbol (string-append lT21d8@prefix (symbol->string (car lT21db@x)))) (cdr lT21db@x))) lT21d7@subst))) lT21c9@ls/false) (let ((lT21dd@t lT21c7@t)) (let ((lT21df@ls/false (lTd7a@syntax-dispatch lT21dd@t '(any each-any)))) (if (and lT21df@ls/false (apply (lambda (lT21e1@library lT21e2@spec*) (eq? (lTe60@syntax->datum lT21e1@library) 'library)) lT21df@ls/false)) (apply (lambda (lT21e5@library lT21e6@spec*) (lT2154@import-library lT21e6@spec*)) lT21df@ls/false) (let ((lT21e9@t lT21dd@t)) (let ((lT21eb@ls/false (lTd7a@syntax-dispatch lT21e9@t '(any any . any)))) (if (and lT21eb@ls/false (apply (lambda (lT21ed@for lT21ee@isp lT21ef@rest) (eq? (lTe60@syntax->datum lT21ed@for) 'for)) lT21eb@ls/false)) (apply (lambda (lT21f3@for lT21f4@isp lT21f5@rest) (lT2156@get-import lT21f4@isp)) lT21eb@ls/false) (let ((lT21f9@t lT21e9@t)) (let ((lT21fb@ls/false (lTd7a@syntax-dispatch lT21f9@t 'any))) (if lT21fb@ls/false (apply (lambda (lT21fd@spec) (lTe5a@syntax-violation 'import '"invalid import spec" lT21fd@spec)) lT21fb@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT21f9@t))))))))))))))))))))))))))) (set! lT2158@add-imports! (lambda (lT2161@imp lT2162@h) (let ((lT2165@subst (lT2156@get-import lT2161@imp))) (for-each (lambda (lT2167@x) (let ((lT2169@name (car lT2167@x)) (lT216a@label (cdr lT2167@x))) (let ((lT216d@t (hashtable-ref lT2162@h lT2169@name '#f))) (if lT216d@t ((lambda (lT216f@l) (if (not (eq? lT216f@l lT216a@label)) (lT2146@dup-error lT2169@name) (void))) lT216d@t) (hashtable-set! lT2162@h lT2169@name lT216a@label))))) lT2165@subst)))) (lambda (lT2159@imp*) (let lT215f@f ((lT215b@imp* lT2159@imp*) (lT215c@h (make-eq-hashtable))) (if (null? lT215b@imp*) (hashtable-entries lT215c@h) (begin (lT2158@add-imports! (car lT215b@imp*) lT215c@h) (lT215f@f (cdr lT215b@imp*) lT215c@h)))))))) (set! lT287b@lTddc@parse-import-spec* lTddc@parse-import-spec*)) (begin (set! lTdde@make-top-rib (lambda (lT234f@names lT2350@labels) (let ((lT2353@rib (lTb27@make-empty-rib))) (begin (vector-for-each (lambda (lT2355@name lT2356@label) (begin (if (not (symbol? lT2355@name)) (error 'make-top-rib '"BUG: not a symbol" lT2355@name) (void)) (lTb2b@extend-rib/nc! lT2353@rib (make-simple-struct 'stx '5 (list lT2355@name lTaf7@top-mark* '() '())) lT2356@label))) lT234f@names lT2350@labels) lT2353@rib)))) (set! lT287c@lTdde@make-top-rib lTdde@make-top-rib)) (begin (set! lTde0@make-collector (lambda () (let ((lT2359@ls '())) (lambda lT235d (let ((lT235e (length lT235d))) (if (= lT235e '0) (apply (lambda () lT2359@ls) lT235d) (if (= lT235e '1) (apply (lambda (lT235b@x) (set! lT2359@ls (lTaf0@set-cons lT235b@x lT2359@ls))) lT235d) (error 'apply '"invalid arg count")))))))) (set! lT287d@lTde0@make-collector lTde0@make-collector)) (begin (set! lTde2@inv-collector (lT6bd@lT59c@make-parameter (lambda lT235f@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (lT2361@x) (begin (if (not (procedure? lT2361@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" lT2361@x) (void)) lT2361@x)))) (set! lT287e@lTde2@inv-collector lTde2@inv-collector)) (begin (set! lTde4@vis-collector (lT6bd@lT59c@make-parameter (lambda lT2363@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (lT2365@x) (begin (if (not (procedure? lT2365@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" lT2365@x) (void)) lT2365@x)))) (set! lT287f@lTde4@vis-collector lTde4@vis-collector)) (begin (set! lTde6@imp-collector (lT6bd@lT59c@make-parameter (lambda lT2367@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (lT2369@x) (begin (if (not (procedure? lT2369@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" lT2369@x) (void)) lT2369@x)))) (set! lT2880@lTde6@imp-collector lTde6@imp-collector)) (begin (set! lTde8@chi-library-internal (lambda (lT236b@e* lT236c@rib lT236d@top?) (call-with-values (lambda () (lTdd2@chi-body* lT236b@e* '() '() '() '() '() '() '() lT236c@rib lT236d@top?)) (lambda (lT2381@lT2372 lT2382@lT2374 lT2383@lT2376 lT2384@lT2378 lT2385@lT237a lT2386@lT237c lT2387@lT237e lT2388@lT2380) (let ((lT2391@exp* lT2388@lT2380) (lT2392@_kwd* lT2387@lT237e) (lT2393@mod** lT2386@lT237c) (lT2394@rhs* lT2385@lT237a) (lT2395@lex* lT2384@lT2378) (lT2396@mr lT2383@lT2376) (lT2397@r lT2382@lT2374) (lT2398@e* lT2381@lT2372)) (values (append (apply append (reverse lT2393@mod**)) lT2398@e*) lT2397@r lT2396@mr (reverse lT2395@lex*) (reverse lT2394@rhs*) lT2391@exp*)))))) (set! lT2881@lTde8@chi-library-internal lTde8@chi-library-internal)) (begin (set! lTdea@chi-interaction-expr (lambda (lT23a1@e lT23a2@rib lT23a3@r) (call-with-values (lambda () (lTdd2@chi-body* (list lT23a1@e) lT23a3@r lT23a3@r '() '() '() '() '() lT23a2@rib '#t)) (lambda (lT23b7@lT23a8 lT23b8@lT23aa lT23b9@lT23ac lT23ba@lT23ae lT23bb@lT23b0 lT23bc@lT23b2 lT23bd@lT23b4 lT23be@lT23b6) (let ((lT23c7@_exp* lT23be@lT23b6) (lT23c8@_kwd* lT23bd@lT23b4) (lT23c9@mod** lT23bc@lT23b2) (lT23ca@rhs* lT23bb@lT23b0) (lT23cb@lex* lT23ba@lT23ae) (lT23cc@mr lT23b9@lT23ac) (lT23cd@r lT23b8@lT23aa) (lT23ce@e* lT23b7@lT23a8)) (let ((lT23d7@e* (lTdaa@expand-interaction-rhs*/init* (reverse lT23cb@lex*) (reverse lT23ca@rhs*) (append (apply append (reverse lT23c9@mod**)) lT23ce@e*) lT23cd@r lT23cc@mr))) (let ((lT23d9@e (if (null? lT23d7@e*) (lTad9@lTa34@build-void) (if (null? (cdr lT23d7@e*)) (car lT23d7@e*) (lTad8@lTa32@build-sequence '#f lT23d7@e*))))) (values lT23d9@e lT23cd@r)))))))) (set! lT2882@lTdea@chi-interaction-expr lTdea@chi-interaction-expr)) (begin (set! lTdec@library-body-expander (lambda (lT23db@name lT23dc@main-exp* lT23dd@imp* lT23de@b* lT23df@top?) (let ((lT23e6@itc '#f)) (begin (set! lT23e6@itc (lTde0@make-collector)) (let ((lT23ef@lT23e8 lTde6@imp-collector) (lT23f0@lT23ea lTe6a@top-level-context) (lT23f1@lT23ec lT23e6@itc) (lT23f2@lT23ee '#f)) (let ((lT23f7@swap (lambda () (begin (let ((lT23f9@t (lT23ef@lT23e8))) (begin (lT23ef@lT23e8 lT23f1@lT23ec) (set! lT23f1@lT23ec lT23f9@t))) (let ((lT23fb@t (lT23f0@lT23ea))) (begin (lT23f0@lT23ea lT23f2@lT23ee) (set! lT23f2@lT23ee lT23fb@t))))))) (dynamic-wind lT23f7@swap (lambda () (call-with-values (lambda () (lTddc@parse-import-spec* lT23dd@imp*)) (lambda (lT2401@lT23fe lT2402@lT2400) (let ((lT2405@subst-labels lT2402@lT2400) (lT2406@subst-names lT2401@lT23fe)) (let ((lT2409@rib (lTdde@make-top-rib lT2406@subst-names lT2405@subst-labels))) (let ((lT240c@wrap '#f)) (begin (set! lT240c@wrap (lambda (lT2487@x) (make-simple-struct 'stx '5 (list lT2487@x lTaf7@top-mark* (list lT2409@rib) '())))) (let ((lT240d@b* (map lT240c@wrap lT23de@b*)) (lT240e@main-exp* (map lT240c@wrap lT23dc@main-exp*)) (lT240f@rtc (lTde0@make-collector)) (lT2410@vtc (lTde0@make-collector))) (let ((lT241d@lT2416 lTde2@inv-collector) (lT241e@lT2418 lTde4@vis-collector) (lT241f@lT241a lT240f@rtc) (lT2420@lT241c lT2410@vtc)) (let ((lT2425@swap (lambda () (begin (let ((lT2427@t (lT241d@lT2416))) (begin (lT241d@lT2416 lT241f@lT241a) (set! lT241f@lT241a lT2427@t))) (let ((lT2429@t (lT241e@lT2418))) (begin (lT241e@lT2418 lT2420@lT241c) (set! lT2420@lT241c lT2429@t))))))) (dynamic-wind lT2425@swap (lambda () (call-with-values (lambda () (lTde8@chi-library-internal lT240d@b* lT2409@rib lT23df@top?)) (lambda (lT2437@lT242c lT2438@lT242e lT2439@lT2430 lT243a@lT2432 lT243b@lT2434 lT243c@lT2436) (let ((lT2443@internal-exp* lT243c@lT2436) (lT2444@rhs* lT243b@lT2434) (lT2445@lex* lT243a@lT2432) (lT2446@mr lT2439@lT2430) (lT2447@r lT2438@lT242e) (lT2448@init* lT2437@lT242c)) (call-with-values (lambda () (lTdd6@parse-exports (append lT240e@main-exp* lT2443@internal-exp*))) (lambda (lT2453@lT2450 lT2454@lT2452) (let ((lT2457@exp-id* lT2454@lT2452) (lT2458@exp-name* lT2453@lT2450)) (begin (lTb2f@seal-rib! lT2409@rib) (let ((lT245b@init* (lTd98@chi-expr* lT2448@init* lT2447@r lT2446@mr))) (let ((lT245d@rhs* (lTdac@chi-rhs* lT2444@rhs* lT2447@r lT2446@mr))) (begin (lTb31@unseal-rib! lT2409@rib) (let ((lT245f@loc* (map lTafd@gen-global lT2445@lex*)) (lT2460@export-subst (lTe44@make-export-subst lT2458@exp-name* lT2457@exp-id*))) (let ((lT2464@errstr '#f)) (begin (set! lT2464@errstr '"attempt to export mutated variable") (call-with-values (lambda () (lTe46@make-export-env/macros lT2445@lex* lT245f@loc* lT2447@r)) (lambda (lT246b@lT2466 lT246c@lT2468 lT246d@lT246a) (let ((lT2471@macro* lT246d@lT246a) (lT2472@global* lT246c@lT2468) (lT2473@export-env lT246b@lT2466)) (begin (for-each (lambda (lT2477@s) (let ((lT2479@name (car lT2477@s)) (lT247a@label (cdr lT2477@s))) (let ((lT247d@p (assq lT247a@label lT2473@export-env))) (if lT247d@p (let ((lT247f@b (cdr lT247d@p))) (let ((lT2481@type (car lT247f@b))) (if (eq? lT2481@type 'mutable) (lTe5a@syntax-violation 'export lT2464@errstr lT2479@name) (void)))) (void))))) lT2460@export-subst) (let ((lT2483@invoke-body (lTade@lTa3e@build-library-letrec* '#f lT23db@name lT2445@lex* lT245f@loc* lT245d@rhs* (if (null? lT245b@init*) (lTad9@lTa34@build-void) (lTad8@lTa32@build-sequence '#f lT245b@init*)))) (lT2484@invoke-definitions (map lTad5@lT991@build-global-define (map cdr lT2472@global*)))) (values (lT23e6@itc) (lT240f@rtc) (lT2410@vtc) (lTad8@lTa32@build-sequence '#f (append lT2484@invoke-definitions (list lT2483@invoke-body))) lT2471@macro* lT2460@export-subst lT2473@export-env)))))))))))))))))))) lT2425@swap))))))))))) lT23f7@swap))))))) (set! lT2883@lTdec@library-body-expander lTdec@library-body-expander)) (begin (set! lTdee@core-library-expander (lambda (lT2489@e lT248a@verify-name) (call-with-values (lambda () (lTdda@parse-library lT2489@e)) (lambda (lT2495@lT248e lT2496@lT2490 lT2497@lT2492 lT2498@lT2494) (let ((lT249d@b* lT2498@lT2494) (lT249e@imp* lT2497@lT2492) (lT249f@exp* lT2496@lT2490) (lT24a0@name* lT2495@lT248e)) (call-with-values (lambda () (lTdd8@parse-library-name lT24a0@name*)) (lambda (lT24a9@lT24a6 lT24aa@lT24a8) (let ((lT24ad@ver lT24aa@lT24a8) (lT24ae@name lT24a9@lT24a6)) (begin (lT248a@verify-name lT24ae@name) (call-with-values (lambda () (lTdec@library-body-expander lT24ae@name lT249f@exp* lT249e@imp* lT249d@b* '#f)) (lambda (lT24bf@lT24b2 lT24c0@lT24b4 lT24c1@lT24b6 lT24c2@lT24b8 lT24c3@lT24ba lT24c4@lT24bc lT24c5@lT24be) (let ((lT24cd@export-env lT24c5@lT24be) (lT24ce@export-subst lT24c4@lT24bc) (lT24cf@visit-code lT24c3@lT24ba) (lT24d0@invoke-code lT24c2@lT24b8) (lT24d1@visit-req* lT24c1@lT24b6) (lT24d2@invoke-req* lT24c0@lT24b4) (lT24d3@imp* lT24bf@lT24b2)) (values lT24ae@name lT24ad@ver lT24d3@imp* lT24d2@invoke-req* lT24d1@visit-req* lT24d0@invoke-code lT24cf@visit-code lT24ce@export-subst lT24cd@export-env))))))))))))) (set! lT2884@lTdee@core-library-expander lTdee@core-library-expander)) (begin (set! lTdf0@parse-top-level-program (lambda (lT24db@e*) (let ((lT24dd@t lT24db@e*)) (let ((lT24df@ls/false (lTd7a@syntax-dispatch lT24dd@t '((any . each-any) . each-any)))) (if (and lT24df@ls/false (apply (lambda (lT24e1@import lT24e2@imp* lT24e3@b*) (eq? (lTe60@syntax->datum lT24e1@import) 'import)) lT24df@ls/false)) (apply (lambda (lT24e7@import lT24e8@imp* lT24e9@b*) (values lT24e8@imp* lT24e9@b*)) lT24df@ls/false) (let ((lT24ed@t lT24dd@t)) (let ((lT24ef@ls/false (lTd7a@syntax-dispatch lT24ed@t '((any . any) . any)))) (if (and lT24ef@ls/false (apply (lambda (lT24f1@import lT24f2@x lT24f3@y) (eq? (lTe60@syntax->datum lT24f1@import) 'import)) lT24ef@ls/false)) (apply (lambda (lT24f7@import lT24f8@x lT24f9@y) (lTe5a@syntax-violation 'expander '"invalid syntax of top-level program" (lTb6d@syntax-car lT24db@e*))) lT24ef@ls/false) (let ((lT24fd@t lT24ed@t)) (let ((lT24ff@ls/false (lTd7a@syntax-dispatch lT24fd@t '_))) (if lT24ff@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) lT24ff@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT24fd@t)))))))))))) (set! lT2885@lTdf0@parse-top-level-program lTdf0@parse-top-level-program)) (begin (set! lTdf2@top-level-expander (lambda (lT2501@e*) (call-with-values (lambda () (lTdf0@parse-top-level-program lT2501@e*)) (lambda (lT2507@lT2504 lT2508@lT2506) (let ((lT250b@b* lT2508@lT2506) (lT250c@imp* lT2507@lT2504)) (call-with-values (lambda () (lTdec@library-body-expander '() '() lT250c@imp* lT250b@b* '#t)) (lambda (lT251d@lT2510 lT251e@lT2512 lT251f@lT2514 lT2520@lT2516 lT2521@lT2518 lT2522@lT251a lT2523@lT251c) (let ((lT252b@export-env lT2523@lT251c) (lT252c@export-subst lT2522@lT251a) (lT252d@visit-code lT2521@lT2518) (lT252e@invoke-code lT2520@lT2516) (lT252f@visit-req* lT251f@lT2514) (lT2530@invoke-req* lT251e@lT2512) (lT2531@imp* lT251d@lT2510)) (values lT2530@invoke-req* lT252e@invoke-code))))))))) (set! lT2886@lTdf2@top-level-expander lTdf2@top-level-expander)) (begin (set! lTdf4@rp (lT6ba@lT596@make-record-printer 'env (lambda (lT2539@x lT253a@p lT253b@wr) (display '"#<environment>" lT253a@p)))) (set! lT2887@lTdf4@rp lTdf4@rp)) (begin (set! lTdfe@env? (lambda (lT253f@x) (and (simple-struct? lT253f@x) (eq? (simple-struct-name lT253f@x) 'env)))) (set! lT2888@lTdfe@env? lTdfe@env?)) (begin (set! lTe00@env-names (lambda (lT2541@x) (simple-struct-ref lT2541@x '0))) (set! lT2889@lTe00@env-names lTe00@env-names)) (begin (set! lTe02@set-env-names! (lambda (lT2543@x lT2544@val) (simple-struct-set! lT2543@x '0 lT2544@val))) (set! lT288a@lTe02@set-env-names! lTe02@set-env-names!)) (begin (set! lTe04@env-labels (lambda (lT2547@x) (simple-struct-ref lT2547@x '1))) (set! lT288b@lTe04@env-labels lTe04@env-labels)) (begin (set! lTe06@set-env-labels! (lambda (lT2549@x lT254a@val) (simple-struct-set! lT2549@x '1 lT254a@val))) (set! lT288c@lTe06@set-env-labels! lTe06@set-env-labels!)) (begin (set! lTe08@env-itc (lambda (lT254d@x) (simple-struct-ref lT254d@x '2))) (set! lT288d@lTe08@env-itc lTe08@env-itc)) (begin (set! lTe0a@set-env-itc! (lambda (lT254f@x lT2550@val) (simple-struct-set! lT254f@x '2 lT2550@val))) (set! lT288e@lTe0a@set-env-itc! lTe0a@set-env-itc!)) (begin (set! lTe0c@dummy '3) (set! lT288f@lTe0c@dummy lTe0c@dummy)) (begin (set! lTe0e@rp (lT6ba@lT596@make-record-printer 'interaction-env (lambda (lT2553@x lT2554@p lT2555@wr) (display '"#<environment>" lT2554@p)))) (set! lT2890@lTe0e@rp lTe0e@rp)) (begin (set! lTe18@interaction-env? (lambda (lT2559@x) (and (simple-struct? lT2559@x) (eq? (simple-struct-name lT2559@x) 'interaction-env)))) (set! lT2891@lTe18@interaction-env? lTe18@interaction-env?)) (begin (set! lTe1a@interaction-env-rib (lambda (lT255b@x) (simple-struct-ref lT255b@x '0))) (set! lT2892@lTe1a@interaction-env-rib lTe1a@interaction-env-rib)) (begin (set! lTe1c@set-interaction-env-rib! (lambda (lT255d@x lT255e@val) (simple-struct-set! lT255d@x '0 lT255e@val))) (set! lT2893@lTe1c@set-interaction-env-rib! lTe1c@set-interaction-env-rib!)) (begin (set! lTe1e@interaction-env-r (lambda (lT2561@x) (simple-struct-ref lT2561@x '1))) (set! lT2894@lTe1e@interaction-env-r lTe1e@interaction-env-r)) (begin (set! lTe20@set-interaction-env-r! (lambda (lT2563@x lT2564@val) (simple-struct-set! lT2563@x '1 lT2564@val))) (set! lT2895@lTe20@set-interaction-env-r! lTe20@set-interaction-env-r!)) (begin (set! lTe22@interaction-env-locs (lambda (lT2567@x) (simple-struct-ref lT2567@x '2))) (set! lT2896@lTe22@interaction-env-locs lTe22@interaction-env-locs)) (begin (set! lTe24@set-interaction-env-locs! (lambda (lT2569@x lT256a@val) (simple-struct-set! lT2569@x '2 lT256a@val))) (set! lT2897@lTe24@set-interaction-env-locs! lTe24@set-interaction-env-locs!)) (begin (set! lTe26@dummy '3) (set! lT2898@lTe26@dummy lTe26@dummy)) (begin (set! lTe28@interaction-environment-symbols (lambda () (lTe30@environment-symbols (lTe68@interaction-environment)))) (set! lT2899@lTe28@interaction-environment-symbols lTe28@interaction-environment-symbols)) (begin (set! lTe2a@environment-bindings (lambda (lT256d@e) (vector->list (vector-map (lambda (lT256f@name lT2570@label) (lTe2c@parse-binding (cons lT256f@name (lT988@lT7d5@imported-label->binding lT2570@label)))) (lTe00@env-names lT256d@e) (lTe04@env-labels lT256d@e))))) (set! lT289a@lTe2a@environment-bindings lTe2a@environment-bindings)) (begin (set! lTe2c@parse-binding (lambda (lT2573@b) (cons (car lT2573@b) (let ((lT2575@t (cadr lT2573@b))) (if (memv lT2575@t '(core-prim global)) 'procedure (if (memv lT2575@t '(core-macro macro global-macro)) 'syntax (if (memv lT2575@t '($core-rtd)) 'record (if (eq? (car lT2573@b) (cadr lT2573@b)) 'syntax 'unknown)))))))) (set! lT289b@lTe2c@parse-binding lTe2c@parse-binding)) (begin (set! lTe2e@environment? (lambda (lT2577@x) (or (lTdfe@env? lT2577@x) (lTe18@interaction-env? lT2577@x)))) (set! lT289c@lTe2e@environment? lTe2e@environment?)) (begin (set! lTe30@environment-symbols (lambda (lT2579@x) (if (lTdfe@env? lT2579@x) (vector->list (lTe00@env-names lT2579@x)) (if (lTe18@interaction-env? lT2579@x) (map values (lTb11@rib-sym* (lTe1a@interaction-env-rib lT2579@x))) (assertion-violation 'environment-symbols '"not an environment" lT2579@x))))) (set! lT289d@lTe30@environment-symbols lTe30@environment-symbols)) (begin (set! lTe32@environment (lambda lT257b@imp* (let ((lT257d@itc (lTde0@make-collector))) (let ((lT2583@lT2580 lTde6@imp-collector) (lT2584@lT2582 lT257d@itc)) (let ((lT2587@swap (lambda () (let ((lT2589@t (lT2583@lT2580))) (begin (lT2583@lT2580 lT2584@lT2582) (set! lT2584@lT2582 lT2589@t)))))) (dynamic-wind lT2587@swap (lambda () (call-with-values (lambda () (lTddc@parse-import-spec* lT257b@imp*)) (lambda (lT258f@lT258c lT2590@lT258e) (let ((lT2593@subst-labels lT2590@lT258e) (lT2594@subst-names lT258f@lT258c)) (make-simple-struct 'env '4 (list lT2594@subst-names lT2593@subst-labels lT257d@itc)))))) lT2587@swap)))))) (set! lT289e@lTe32@environment lTe32@environment)) (begin (set! lTe34@null-environment (lambda (lT2597@n) (begin (if (not (eqv? lT2597@n '5)) (assertion-violation 'null-environment '"not 5" lT2597@n) (void)) (lTe32@environment '(psyntax null-environment-5))))) (set! lT289f@lTe34@null-environment lTe34@null-environment)) (begin (set! lTe36@scheme-report-environment (lambda (lT2599@n) (begin (if (not (eqv? lT2599@n '5)) (assertion-violation 'scheme-report-environment '"not 5" lT2599@n) (void)) (lTe32@environment '(psyntax scheme-report-environment-5))))) (set! lT28a0@lTe36@scheme-report-environment lTe36@scheme-report-environment)) (begin (set! lTe38@expand (lambda (lT259b@x lT259c@env) (if (lTdfe@env? lT259c@env) (let ((lT259f@rib (lTdde@make-top-rib (lTe00@env-names lT259c@env) (lTe04@env-labels lT259c@env)))) (let ((lT25a1@x (make-simple-struct 'stx '5 (list lT259b@x lTaf7@top-mark* (list lT259f@rib) '()))) (lT25a2@itc (lTe08@env-itc lT259c@env)) (lT25a3@rtc (lTde0@make-collector)) (lT25a4@vtc (lTde0@make-collector))) (let ((lT25a9@x (let ((lT25bb@lT25ac lTe6a@top-level-context) (lT25bc@lT25ae lTde2@inv-collector) (lT25bd@lT25b0 lTde4@vis-collector) (lT25be@lT25b2 lTde6@imp-collector) (lT25bf@lT25b4 '#f) (lT25c0@lT25b6 lT25a3@rtc) (lT25c1@lT25b8 lT25a4@vtc) (lT25c2@lT25ba lT25a2@itc)) (let ((lT25cb@swap (lambda () (begin (let ((lT25cd@t (lT25bb@lT25ac))) (begin (lT25bb@lT25ac lT25bf@lT25b4) (set! lT25bf@lT25b4 lT25cd@t))) (let ((lT25cf@t (lT25bc@lT25ae))) (begin (lT25bc@lT25ae lT25c0@lT25b6) (set! lT25c0@lT25b6 lT25cf@t))) (let ((lT25d1@t (lT25bd@lT25b0))) (begin (lT25bd@lT25b0 lT25c1@lT25b8) (set! lT25c1@lT25b8 lT25d1@t))) (let ((lT25d3@t (lT25be@lT25b2))) (begin (lT25be@lT25b2 lT25c2@lT25ba) (set! lT25c2@lT25ba lT25d3@t))))))) (dynamic-wind lT25cb@swap (lambda () (lTd9c@chi-expr lT25a1@x '() '())) lT25cb@swap))))) (begin (lTb2f@seal-rib! lT259f@rib) (values lT25a9@x (lT25a3@rtc)))))) (if (lTe18@interaction-env? lT259c@env) (let ((lT25d5@rib (lTe1a@interaction-env-rib lT259c@env)) (lT25d6@r (lTe1e@interaction-env-r lT259c@env)) (lT25d7@rtc (lTde0@make-collector))) (let ((lT25db@x (make-simple-struct 'stx '5 (list lT259b@x lTaf7@top-mark* (list lT25d5@rib) '())))) (call-with-values (lambda () (let ((lT25f1@lT25e2 lTe6a@top-level-context) (lT25f2@lT25e4 lTde2@inv-collector) (lT25f3@lT25e6 lTde4@vis-collector) (lT25f4@lT25e8 lTde6@imp-collector) (lT25f5@lT25ea lT259c@env) (lT25f6@lT25ec lT25d7@rtc) (lT25f7@lT25ee (lTde0@make-collector)) (lT25f8@lT25f0 (lTde0@make-collector))) (let ((lT2601@swap (lambda () (begin (let ((lT2603@t (lT25f1@lT25e2))) (begin (lT25f1@lT25e2 lT25f5@lT25ea) (set! lT25f5@lT25ea lT2603@t))) (let ((lT2605@t (lT25f2@lT25e4))) (begin (lT25f2@lT25e4 lT25f6@lT25ec) (set! lT25f6@lT25ec lT2605@t))) (let ((lT2607@t (lT25f3@lT25e6))) (begin (lT25f3@lT25e6 lT25f7@lT25ee) (set! lT25f7@lT25ee lT2607@t))) (let ((lT2609@t (lT25f4@lT25e8))) (begin (lT25f4@lT25e8 lT25f8@lT25f0) (set! lT25f8@lT25f0 lT2609@t))))))) (dynamic-wind lT2601@swap (lambda () (lTdea@chi-interaction-expr lT25db@x lT25d5@rib lT25d6@r)) lT2601@swap)))) (lambda (lT260b@lT25de lT260c@lT25e0) (let ((lT260f@r^ lT260c@lT25e0) (lT2610@e lT260b@lT25de)) (begin (lTe20@set-interaction-env-r! lT259c@env lT260f@r^) (values lT2610@e (lT25d7@rtc)))))))) (assertion-violation 'expand '"not an environment" lT259c@env))))) (set! lT28a1@lTe38@expand lTe38@expand)) (begin (set! lTe3a@eval (lambda (lT2613@x lT2614@env) (begin (if (not (lTe2e@environment? lT2614@env)) (error 'eval '"not an environment" lT2614@env) (void)) (call-with-values (lambda () (lTe38@expand lT2613@x lT2614@env)) (lambda (lT261b@lT2618 lT261c@lT261a) (let ((lT261f@invoke-req* lT261c@lT261a) (lT2620@x lT261b@lT2618)) (begin (for-each lT989@lT7d7@invoke-library lT261f@invoke-req*) (eval-core (lT713@lT6cb@expanded->core lT2620@x))))))))) (set! lT28a2@lTe3a@eval lTe3a@eval)) (begin (set! lTe3c@library-expander (lambda lT2691 (let ((lT2692 (length lT2691))) (if (= lT2692 '3) (apply (lambda (lT2623@x lT2624@filename lT2625@verify-name) (let ((lT262a@build-visit-code '#f) (lT262c@visit! '#f)) (begin (set! lT262a@build-visit-code (lambda (lT267f@macro*) (if (null? lT267f@macro*) (lTad9@lTa34@build-void) (lTad8@lTa32@build-sequence '#f (map (lambda (lT2681@x) (let ((lT2683@loc (car lT2681@x)) (lT2684@src (cddr lT2681@x))) (list 'set! lT2683@loc lT2684@src))) lT267f@macro*))))) (set! lT262c@visit! (lambda (lT2677@macro*) (for-each (lambda (lT2679@x) (let ((lT267b@loc (car lT2679@x)) (lT267c@proc (cadr lT2679@x))) (set-symbol-value! lT267b@loc lT267c@proc))) lT2677@macro*))) (call-with-values (lambda () (lTdee@core-library-expander lT2623@x lT2625@verify-name)) (lambda (lT263f@lT262e lT2640@lT2630 lT2641@lT2632 lT2642@lT2634 lT2643@lT2636 lT2644@lT2638 lT2645@lT263a lT2646@lT263c lT2647@lT263e) (let ((lT2651@export-env lT2647@lT263e) (lT2652@export-subst lT2646@lT263c) (lT2653@macro* lT2645@lT263a) (lT2654@invoke-code lT2644@lT2638) (lT2655@vis* lT2643@lT2636) (lT2656@inv* lT2642@lT2634) (lT2657@imp* lT2641@lT2632) (lT2658@ver lT2640@lT2630) (lT2659@name lT263f@lT262e)) (let ((lT2663@id (gensym)) (lT2664@name lT2659@name) (lT2665@ver lT2658@ver) (lT2666@imp* (map lT98d@lT7df@library-spec lT2657@imp*)) (lT2667@vis* (map lT98d@lT7df@library-spec lT2655@vis*)) (lT2668@inv* (map lT98d@lT7df@library-spec lT2656@inv*)) (lT2669@visit-proc (lambda () (lT262c@visit! lT2653@macro*))) (lT266a@invoke-proc (lambda () (eval-core (lT713@lT6cb@expanded->core lT2654@invoke-code)))) (lT266b@visit-code (lT262a@build-visit-code lT2653@macro*)) (lT266c@invoke-code lT2654@invoke-code)) (begin (lT987@lT7d3@install-library lT2663@id lT2664@name lT2665@ver lT2666@imp* lT2667@vis* lT2668@inv* lT2652@export-subst lT2651@export-env lT2669@visit-proc lT266a@invoke-proc lT266b@visit-code lT266c@invoke-code '#t lT2624@filename) (values lT2663@id lT2664@name lT2665@ver lT2666@imp* lT2667@vis* lT2668@inv* lT266c@invoke-code lT266b@visit-code lT2652@export-subst lT2651@export-env))))))))) lT2691) (if (= lT2692 '2) (apply (lambda (lT2687@x lT2688@filename) (lTe3c@library-expander lT2687@x lT2688@filename (lambda (lT268b@x) (values)))) lT2691) (if (= lT2692 '1) (apply (lambda (lT268d@x) (lTe3c@library-expander lT268d@x '#f (lambda (lT268f@x) (values)))) lT2691) (error 'apply '"invalid arg count"))))))) (set! lT28a3@lTe3c@library-expander lTe3c@library-expander)) (begin (set! lTe3e@boot-library-expand (lambda (lT2693@x) (call-with-values (lambda () (lTe3c@library-expander lT2693@x)) (lambda (lT26a9@lT2696 lT26aa@lT2698 lT26ab@lT269a lT26ac@lT269c lT26ad@lT269e lT26ae@lT26a0 lT26af@lT26a2 lT26b0@lT26a4 lT26b1@lT26a6 lT26b2@lT26a8) (let ((lT26bd@export-env lT26b2@lT26a8) (lT26be@export-subst lT26b1@lT26a6) (lT26bf@visit-code lT26b0@lT26a4) (lT26c0@invoke-code lT26af@lT26a2) (lT26c1@inv* lT26ae@lT26a0) (lT26c2@vis* lT26ad@lT269e) (lT26c3@imp* lT26ac@lT269c) (lT26c4@ver lT26ab@lT269a) (lT26c5@name lT26aa@lT2698) (lT26c6@id lT26a9@lT2696)) (values lT26c5@name lT26c0@invoke-code lT26be@export-subst lT26bd@export-env)))))) (set! lT28a4@lTe3e@boot-library-expand lTe3e@boot-library-expand)) (begin (set! lTe40@rev-map-append (lambda (lT26d1@f lT26d2@ls lT26d3@ac) (if (null? lT26d2@ls) lT26d3@ac (lTe40@rev-map-append lT26d1@f (cdr lT26d2@ls) (cons (lT26d1@f (car lT26d2@ls)) lT26d3@ac))))) (set! lT28a5@lTe40@rev-map-append lTe40@rev-map-append)) (begin (set! lTe42@build-exports (lambda (lT26d7@lex*+loc* lT26d8@init*) (lTad8@lTa32@build-sequence '#f (cons (lTad9@lTa34@build-void) (lTe40@rev-map-append (lambda (lT26db@x) (list 'set! (cdr lT26db@x) (car lT26db@x))) lT26d7@lex*+loc* lT26d8@init*))))) (set! lT28a6@lTe42@build-exports lTe42@build-exports)) (begin (set! lTe44@make-export-subst (lambda (lT26dd@name* lT26de@id*) (map (lambda (lT26e1@name lT26e2@id) (let ((lT26e5@label (lTb89@id->label lT26e2@id))) (begin (if (not lT26e5@label) (lTe5a@syntax-violation '#f '"cannot export unbound identifier" lT26e2@id) (void)) (cons lT26e1@name lT26e5@label)))) lT26dd@name* lT26de@id*))) (set! lT28a7@lTe44@make-export-subst lTe44@make-export-subst)) (begin (set! lTe46@make-export-env/macros (lambda (lT26e7@lex* lT26e8@loc* lT26e9@r) (let ((lT26ee@lookup '#f)) (begin (set! lT26ee@lookup (lambda (lT270b@x) (let lT2713@f ((lT270d@x lT270b@x) (lT270e@lex* lT26e7@lex*) (lT270f@loc* lT26e8@loc*)) (if (pair? lT270e@lex*) (if (eq? lT270d@x (car lT270e@lex*)) (car lT270f@loc*) (lT2713@f lT270d@x (cdr lT270e@lex*) (cdr lT270f@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let lT26f7@f ((lT26ef@r lT26e9@r) (lT26f0@env '()) (lT26f1@global* '()) (lT26f2@macro* '())) (if (null? lT26ef@r) (values lT26f0@env lT26f1@global* lT26f2@macro*) (let ((lT26f9@x (car lT26ef@r))) (let ((lT26fb@label (car lT26f9@x)) (lT26fc@b (cdr lT26f9@x))) (let ((lT26ff@t (lTb8f@binding-type lT26fc@b))) (if (memv lT26ff@t '(lexical)) (let ((lT2701@v (lTb91@binding-value lT26fc@b))) (let ((lT2703@loc (lT26ee@lookup (lTd04@lexical-var lT2701@v))) (lT2704@type (if (lTd06@lexical-mutable? lT2701@v) 'mutable 'global))) (lT26f7@f (cdr lT26ef@r) (cons (cons* lT26fb@label lT2704@type lT2703@loc) lT26f0@env) (cons (cons (lTd04@lexical-var lT2701@v) lT2703@loc) lT26f1@global*) lT26f2@macro*))) (if (memv lT26ff@t '(local-macro)) (let ((lT2707@loc (gensym))) (lT26f7@f (cdr lT26ef@r) (cons (cons* lT26fb@label 'global-macro lT2707@loc) lT26f0@env) lT26f1@global* (cons (cons lT2707@loc (lTb91@binding-value lT26fc@b)) lT26f2@macro*))) (if (memv lT26ff@t '(local-macro!)) (let ((lT2709@loc (gensym))) (lT26f7@f (cdr lT26ef@r) (cons (cons* lT26fb@label 'global-macro! lT2709@loc) lT26f0@env) lT26f1@global* (cons (cons lT2709@loc (lTb91@binding-value lT26fc@b)) lT26f2@macro*))) (if (memv lT26ff@t '($rtd $module)) (lT26f7@f (cdr lT26ef@r) (cons lT26f9@x lT26f0@env) lT26f1@global* lT26f2@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (lTb8f@binding-type lT26fc@b) (lTb91@binding-value lT26fc@b))))))))))))))) (set! lT28a8@lTe46@make-export-env/macros lTe46@make-export-env/macros)) (begin (set! lTe48@generate-temporaries (lambda (lT2715@ls) (let ((lT2717@t lT2715@ls)) (let ((lT2719@ls/false (lTd7a@syntax-dispatch lT2717@t 'each-any))) (if lT2719@ls/false (apply (lambda (lT271b@ls) (map (lambda (lT271d@x) (make-simple-struct 'stx '5 (list (let ((lT271f@x (lTe60@syntax->datum lT271d@x))) (if (or (symbol? lT271f@x) (string? lT271f@x)) (gensym lT271f@x) (gensym 't))) lTaf7@top-mark* '() '()))) lT271b@ls)) lT2719@ls/false) (let ((lT2721@t lT2717@t)) (let ((lT2723@ls/false (lTd7a@syntax-dispatch lT2721@t '_))) (if lT2723@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) lT2723@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT2721@t))))))))) (set! lT28a9@lTe48@generate-temporaries lTe48@generate-temporaries)) (begin (set! lTe4a@free-identifier=? (lambda (lT2725@x lT2726@y) (if (lTb73@id? lT2725@x) (if (lTb73@id? lT2726@y) (lTb79@free-id=? lT2725@x lT2726@y) (assertion-violation 'free-identifier=? '"not an identifier" lT2726@y)) (assertion-violation 'free-identifier=? '"not an identifier" lT2725@x)))) (set! lT28aa@lTe4a@free-identifier=? lTe4a@free-identifier=?)) (begin (set! lTe4c@bound-identifier=? (lambda (lT2729@x lT272a@y) (if (lTb73@id? lT2729@x) (if (lTb73@id? lT272a@y) (lTb77@bound-id=? lT2729@x lT272a@y) (assertion-violation 'bound-identifier=? '"not an identifier" lT272a@y)) (assertion-violation 'bound-identifier=? '"not an identifier" lT2729@x)))) (set! lT28ab@lTe4c@bound-identifier=? lTe4c@bound-identifier=?)) (begin (set! lTe4e@make-source-condition (lambda (lT272d@x) (let ((lT2737@lT2732 '#f) (lT2739@lT2734 '#f) (lT273b@lT2733 '#f) (lT273e@lT2731 '#f) (lT2740@make-source-condition '#f) (lT2742@lT272f '#f) (lT2744@lT2730 '#f) (lT2746@source-condition? '#f) (lT2748@source-filename '#f) (lT274a@source-character '#f)) (begin (set! lT2737@lT2732 (make-record-type-descriptor '&source-information lT2b8d@lT28d4@&condition-rtd 'lT2735 '#f '#f '#((immutable file-name) (immutable character)))) (set! lT2739@lT2734 '#f) (set! lT273b@lT2733 (make-record-constructor-descriptor lT2737@lT2732 lT2b8e@lT28d6@&condition-rcd lT2739@lT2734)) (set! lT273e@lT2731 (record-predicate lT2737@lT2732)) (set! lT2740@make-source-condition (record-constructor lT273b@lT2733)) (set! lT2742@lT272f (record-accessor lT2737@lT2732 '0)) (set! lT2744@lT2730 (record-accessor lT2737@lT2732 '1)) (set! lT2746@source-condition? (condition-predicate lT2737@lT2732)) (set! lT2748@source-filename (condition-accessor lT2737@lT2732 lT2742@lT272f)) (set! lT274a@source-character (condition-accessor lT2737@lT2732 lT2744@lT2730)) (if (pair? lT272d@x) (lT2740@make-source-condition (car lT272d@x) (cdr lT272d@x)) (condition)))))) (set! lT28ac@lTe4e@make-source-condition lTe4e@make-source-condition)) (begin (set! lTe50@extract-position-condition (lambda (lT274b@x) (lTe4e@make-source-condition (lTe52@expression-position lT274b@x)))) (set! lT28ad@lTe50@extract-position-condition lTe50@extract-position-condition)) (begin (set! lTe52@expression-position (lambda (lT274d@x) (and (lTb3f@stx? lT274d@x) (let ((lT274f@x (lTb41@stx-expr lT274d@x))) (and (lT6b2@lT586@annotation? lT274f@x) (lT6b3@lT588@annotation-source lT274f@x)))))) (set! lT28ae@lTe52@expression-position lTe52@expression-position)) (begin (set! lTe54@assertion-error (lambda (lT2751@expr lT2752@pos) (raise (condition (lT2bbd@lT2998@make-assertion-violation) (lT2bcf@lT29ca@make-who-condition 'assert) (lT2b93@lT292b@make-message-condition '"assertion failed") (lT2bc5@lT29af@make-irritants-condition (list lT2751@expr)) (lTe4e@make-source-condition lT2752@pos))))) (set! lT28af@lTe54@assertion-error lTe54@assertion-error)) (begin (set! lTe56@syntax-error (lambda (lT2755@x . lT2757@args) (begin (if (not (for-all string? lT2757@args)) (assertion-violation 'syntax-error '"invalid argument" lT2757@args) (void)) (raise (condition (lT2b93@lT292b@make-message-condition (if (null? lT2757@args) '"invalid syntax" (apply string-append lT2757@args))) (lT2bf1@lT2a26@make-syntax-violation (lTe60@syntax->datum lT2755@x) '#f) (lTe50@extract-position-condition lT2755@x)))))) (set! lT28b0@lTe56@syntax-error lTe56@syntax-error)) (begin (set! lTe58@syntax-violation* (lambda (lT2759@who lT275a@msg lT275b@form lT275c@condition-object) (begin (if (not (string? lT275a@msg)) (assertion-violation 'syntax-violation '"message is not a string" lT275a@msg) (void)) (let ((lT2761@who (if (or (string? lT2759@who) (symbol? lT2759@who)) lT2759@who (if (not lT2759@who) (let ((lT2763@t lT275b@form)) (let ((lT2765@ls/false (lTd7a@syntax-dispatch lT2763@t 'any))) (if (and lT2765@ls/false (apply (lambda (lT2767@id) (lTb73@id? lT2767@id)) lT2765@ls/false)) (apply (lambda (lT2769@id) (lTe60@syntax->datum lT2769@id)) lT2765@ls/false) (let ((lT276b@t lT2763@t)) (let ((lT276d@ls/false (lTd7a@syntax-dispatch lT276b@t '(any . any)))) (if (and lT276d@ls/false (apply (lambda (lT276f@id lT2770@rest) (lTb73@id? lT276f@id)) lT276d@ls/false)) (apply (lambda (lT2773@id lT2774@rest) (lTe60@syntax->datum lT2773@id)) lT276d@ls/false) (let ((lT2777@t lT276b@t)) (let ((lT2779@ls/false (lTd7a@syntax-dispatch lT2777@t '_))) (if lT2779@ls/false (apply (lambda () '#f) lT2779@ls/false) (lTe5a@syntax-violation '#f '"invalid syntax" lT2777@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" lT2759@who))))) (raise (condition (if lT2761@who (lT2bcf@lT29ca@make-who-condition lT2761@who) (condition)) (lT2b93@lT292b@make-message-condition lT275a@msg) lT275c@condition-object (lTe50@extract-position-condition lT275b@form))))))) (set! lT28b1@lTe58@syntax-violation* lTe58@syntax-violation*)) (begin (set! lTe5a@syntax-violation (lambda lT2789 (let ((lT278a (length lT2789))) (if (= lT278a '3) (apply (lambda (lT277b@who lT277c@msg lT277d@form) (lTe5a@syntax-violation lT277b@who lT277c@msg lT277d@form '#f)) lT2789) (if (= lT278a '4) (apply (lambda (lT2781@who lT2782@msg lT2783@form lT2784@subform) (lTe58@syntax-violation* lT2781@who lT2782@msg lT2783@form (lT2bf1@lT2a26@make-syntax-violation (lTe60@syntax->datum lT2783@form) (lTe60@syntax->datum lT2784@subform)))) lT2789) (error 'apply '"invalid arg count")))))) (set! lT28b2@lTe5a@syntax-violation lTe5a@syntax-violation)) (begin (set! lTe5c@identifier? (lambda (lT278b@x) (lTb73@id? lT278b@x))) (set! lT28b3@lTe5c@identifier? lTe5c@identifier?)) (begin (set! lTe5e@datum->syntax (lambda (lT278d@id lT278e@datum) (if (lTb73@id? lT278d@id) (lTb53@datum->stx lT278d@id lT278e@datum) (assertion-violation 'datum->syntax '"not an identifier" lT278d@id)))) (set! lT28b4@lTe5e@datum->syntax lTe5e@datum->syntax)) (begin (set! lTe60@syntax->datum (lambda (lT2791@x) (lTb87@stx->datum lT2791@x))) (set! lT28b5@lTe60@syntax->datum lTe60@syntax->datum)) (begin (set! lTe62@ungensym-all (lambda (lT2793@code) (if (pair? lT2793@code) (cons (lTe62@ungensym-all (car lT2793@code)) (lTe62@ungensym-all (cdr lT2793@code))) (if (symbol? lT2793@code) (ungensym lT2793@code) lT2793@code)))) (set! lT28b6@lTe62@ungensym-all lTe62@ungensym-all)) (begin (set! lTe64@compile-r6rs-top-level (lambda (lT2795@x*) (call-with-values (lambda () (lTdf2@top-level-expander lT2795@x*)) (lambda (lT279b@lT2798 lT279c@lT279a) (let ((lT279f@invoke-code lT279c@lT279a) (lT27a0@lib* lT279b@lT2798)) (lambda () (begin (for-each lT989@lT7d7@invoke-library lT27a0@lib*) (let ((lT27a3@expanded (lT713@lT6cb@expanded->core lT279f@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (lTe62@ungensym-all lT27a3@expanded)) (void)) (eval-core lT27a3@expanded)))))))))) (set! lT28b7@lTe64@compile-r6rs-top-level lTe64@compile-r6rs-top-level)) (begin (set! lTe66@pre-compile-r6rs-top-level (lambda (lT27a5@x*) (call-with-values (lambda () (lTdf2@top-level-expander lT27a5@x*)) (lambda (lT27ab@lT27a8 lT27ac@lT27aa) (let ((lT27af@invoke-code lT27ac@lT27aa) (lT27b0@lib* lT27ab@lT27a8)) (begin (for-each lT989@lT7d7@invoke-library lT27b0@lib*) (lT6bb@lT598@compile-core (lT713@lT6cb@expanded->core lT27af@invoke-code)))))))) (set! lT28b8@lTe66@pre-compile-r6rs-top-level lTe66@pre-compile-r6rs-top-level)) (begin (set! lTe68@interaction-environment (let ((lT27b3@the-env '#f)) (lambda () (or lT27b3@the-env (let ((lT27b5@lib (lT982@lT7c9@find-library-by-name '(mosh interaction))) (lT27b6@rib (lTb27@make-empty-rib))) (begin (let ((lT27b9@subst (lT964@lT78d@library-subst lT27b5@lib))) (begin (lTb13@set-rib-sym*! lT27b6@rib (map car lT27b9@subst)) (lTb17@set-rib-mark**! lT27b6@rib (map (lambda (lT27bb@x) lTaf7@top-mark*) lT27b9@subst)) (lTb1b@set-rib-label*! lT27b6@rib (map cdr lT27b9@subst)))) (let ((lT27bd@env (make-simple-struct 'interaction-env '4 (list lT27b6@rib '() '())))) (begin (set! lT27b3@the-env lT27bd@env) lT27bd@env)))))))) (set! lT28b9@lTe68@interaction-environment lTe68@interaction-environment)) (begin (set! lTe6a@top-level-context (lT6bd@lT59c@make-parameter '#f)) (set! lT28ba@lTe6a@top-level-context lTe6a@top-level-context)) (lT97f@lT7c3@current-library-expander lTe3c@library-expander))
(begin (set! lT28c9@lT28c4 (unspecified)) (set! lT28cb@lT28c6 (unspecified)) (set! lT28cd@lT28c5 (unspecified)) (set! lT28d0@&condition? (unspecified)) (set! lT28d2@make-&condition (unspecified)) (set! lT28d4@&condition-rtd (unspecified)) (set! lT28d6@&condition-rcd (unspecified)) (set! lT2922@lT291d (unspecified)) (set! lT2924@lT291f (unspecified)) (set! lT2926@lT291e (unspecified)) (set! lT2929@p? (unspecified)) (set! lT292b@make-message-condition (unspecified)) (set! lT292d@lT291c (unspecified)) (set! lT292f@message-condition? (unspecified)) (set! lT2931@condition-message (unspecified)) (set! lT2933@&message-rtd (unspecified)) (set! lT2935@&message-rcd (unspecified)) (set! lT293b@lT2936 (unspecified)) (set! lT293d@lT2938 (unspecified)) (set! lT293f@lT2937 (unspecified)) (set! lT2942@p? (unspecified)) (set! lT2944@make-warning (unspecified)) (set! lT2946@warning? (unspecified)) (set! lT2948@&warning-rtd (unspecified)) (set! lT294a@&warning-rcd (unspecified)) (set! lT2950@lT294b (unspecified)) (set! lT2952@lT294d (unspecified)) (set! lT2954@lT294c (unspecified)) (set! lT2957@p? (unspecified)) (set! lT2959@make-serious-condition (unspecified)) (set! lT295b@serious-condition? (unspecified)) (set! lT295d@&serious-rtd (unspecified)) (set! lT295f@&serious-rcd (unspecified)) (set! lT2965@lT2960 (unspecified)) (set! lT2967@lT2962 (unspecified)) (set! lT2969@lT2961 (unspecified)) (set! lT296c@p? (unspecified)) (set! lT296e@make-error (unspecified)) (set! lT2970@error? (unspecified)) (set! lT2972@&error-rtd (unspecified)) (set! lT2974@&error-rcd (unspecified)) (set! lT297a@lT2975 (unspecified)) (set! lT297c@lT2977 (unspecified)) (set! lT297e@lT2976 (unspecified)) (set! lT2981@p? (unspecified)) (set! lT2983@make-violation (unspecified)) (set! lT2985@violation? (unspecified)) (set! lT2987@&violation-rtd (unspecified)) (set! lT2989@&violation-rcd (unspecified)) (set! lT298f@lT298a (unspecified)) (set! lT2991@lT298c (unspecified)) (set! lT2993@lT298b (unspecified)) (set! lT2996@p? (unspecified)) (set! lT2998@make-assertion-violation (unspecified)) (set! lT299a@assertion-violation? (unspecified)) (set! lT299c@&assertion-rtd (unspecified)) (set! lT299e@&assertion-rcd (unspecified)) (set! lT29a6@lT29a1 (unspecified)) (set! lT29a8@lT29a3 (unspecified)) (set! lT29aa@lT29a2 (unspecified)) (set! lT29ad@p? (unspecified)) (set! lT29af@make-irritants-condition (unspecified)) (set! lT29b1@lT29a0 (unspecified)) (set! lT29b3@irritants-condition? (unspecified)) (set! lT29b5@condition-irritants (unspecified)) (set! lT29b7@&irritants-rtd (unspecified)) (set! lT29b9@&irritants-rcd (unspecified)) (set! lT29c1@lT29bc (unspecified)) (set! lT29c3@lT29be (unspecified)) (set! lT29c5@lT29bd (unspecified)) (set! lT29c8@p? (unspecified)) (set! lT29ca@make-who-condition (unspecified)) (set! lT29cc@lT29bb (unspecified)) (set! lT29ce@who-condition? (unspecified)) (set! lT29d0@condition-who (unspecified)) (set! lT29d2@&who-rtd (unspecified)) (set! lT29d4@&who-rcd (unspecified)) (set! lT29da@lT29d5 (unspecified)) (set! lT29dc@lT29d7 (unspecified)) (set! lT29de@lT29d6 (unspecified)) (set! lT29e1@p? (unspecified)) (set! lT29e3@make-non-continuable-violation (unspecified)) (set! lT29e5@non-continuable-violation? (unspecified)) (set! lT29e7@&non-continuable-rtd (unspecified)) (set! lT29e9@&non-continuable-rcd (unspecified)) (set! lT29ef@lT29ea (unspecified)) (set! lT29f1@lT29ec (unspecified)) (set! lT29f3@lT29eb (unspecified)) (set! lT29f6@p? (unspecified)) (set! lT29f8@make-implementation-restriction-violation (unspecified)) (set! lT29fa@implementation-restriction-violation? (unspecified)) (set! lT29fc@&implementation-restriction-rtd (unspecified)) (set! lT29fe@&implementation-restriction-rcd (unspecified)) (set! lT2a04@lT29ff (unspecified)) (set! lT2a06@lT2a01 (unspecified)) (set! lT2a08@lT2a00 (unspecified)) (set! lT2a0b@p? (unspecified)) (set! lT2a0d@make-lexical-violation (unspecified)) (set! lT2a0f@lexical-violation? (unspecified)) (set! lT2a11@&lexical-rtd (unspecified)) (set! lT2a13@&lexical-rcd (unspecified)) (set! lT2a1d@lT2a18 (unspecified)) (set! lT2a1f@lT2a1a (unspecified)) (set! lT2a21@lT2a19 (unspecified)) (set! lT2a24@p? (unspecified)) (set! lT2a26@make-syntax-violation (unspecified)) (set! lT2a28@lT2a15 (unspecified)) (set! lT2a2a@lT2a17 (unspecified)) (set! lT2a2c@syntax-violation? (unspecified)) (set! lT2a2e@syntax-violation-form (unspecified)) (set! lT2a30@syntax-violation-subform (unspecified)) (set! lT2a32@&syntax-rtd (unspecified)) (set! lT2a34@&syntax-rcd (unspecified)) (set! lT2a3a@lT2a35 (unspecified)) (set! lT2a3c@lT2a37 (unspecified)) (set! lT2a3e@lT2a36 (unspecified)) (set! lT2a41@p? (unspecified)) (set! lT2a43@make-undefined-violation (unspecified)) (set! lT2a45@undefined-violation? (unspecified)) (set! lT2a47@&undefined-rtd (unspecified)) (set! lT2a49@&undefined-rcd (unspecified)) (set! lT2a4f@lT2a4a (unspecified)) (set! lT2a51@lT2a4c (unspecified)) (set! lT2a53@lT2a4b (unspecified)) (set! lT2a56@p? (unspecified)) (set! lT2a58@make-i/o-error (unspecified)) (set! lT2a5a@i/o-error? (unspecified)) (set! lT2a5c@&i/o-rtd (unspecified)) (set! lT2a5e@&i/o-rcd (unspecified)) (set! lT2a64@lT2a5f (unspecified)) (set! lT2a66@lT2a61 (unspecified)) (set! lT2a68@lT2a60 (unspecified)) (set! lT2a6b@p? (unspecified)) (set! lT2a6d@make-i/o-read-error (unspecified)) (set! lT2a6f@i/o-read-error? (unspecified)) (set! lT2a71@&i/o-read-rtd (unspecified)) (set! lT2a73@&i/o-read-rcd (unspecified)) (set! lT2a79@lT2a74 (unspecified)) (set! lT2a7b@lT2a76 (unspecified)) (set! lT2a7d@lT2a75 (unspecified)) (set! lT2a80@p? (unspecified)) (set! lT2a82@make-i/o-write-error (unspecified)) (set! lT2a84@i/o-write-error? (unspecified)) (set! lT2a86@&i/o-write-rtd (unspecified)) (set! lT2a88@&i/o-write-rcd (unspecified)) (set! lT2a90@lT2a8b (unspecified)) (set! lT2a92@lT2a8d (unspecified)) (set! lT2a94@lT2a8c (unspecified)) (set! lT2a97@p? (unspecified)) (set! lT2a99@make-i/o-invalid-position-error (unspecified)) (set! lT2a9b@lT2a8a (unspecified)) (set! lT2a9d@i/o-invalid-position-error? (unspecified)) (set! lT2a9f@i/o-error-position (unspecified)) (set! lT2aa1@&i/o-invalid-position-rtd (unspecified)) (set! lT2aa3@&i/o-invalid-position-rcd (unspecified)) (set! lT2aab@lT2aa6 (unspecified)) (set! lT2aad@lT2aa8 (unspecified)) (set! lT2aaf@lT2aa7 (unspecified)) (set! lT2ab2@p? (unspecified)) (set! lT2ab4@make-i/o-filename-error (unspecified)) (set! lT2ab6@lT2aa5 (unspecified)) (set! lT2ab8@i/o-filename-error? (unspecified)) (set! lT2aba@i/o-error-filename (unspecified)) (set! lT2abc@&i/o-filename-rtd (unspecified)) (set! lT2abe@&i/o-filename-rcd (unspecified)) (set! lT2ac4@lT2abf (unspecified)) (set! lT2ac6@lT2ac1 (unspecified)) (set! lT2ac8@lT2ac0 (unspecified)) (set! lT2acb@p? (unspecified)) (set! lT2acd@make-i/o-file-protection-error (unspecified)) (set! lT2acf@i/o-file-protection-error? (unspecified)) (set! lT2ad1@&i/o-file-protection-rtd (unspecified)) (set! lT2ad3@&i/o-file-protection-rcd (unspecified)) (set! lT2ad9@lT2ad4 (unspecified)) (set! lT2adb@lT2ad6 (unspecified)) (set! lT2add@lT2ad5 (unspecified)) (set! lT2ae0@p? (unspecified)) (set! lT2ae2@make-i/o-file-is-read-only-error (unspecified)) (set! lT2ae4@i/o-file-is-read-only-error? (unspecified)) (set! lT2ae6@&i/o-file-is-read-only-rtd (unspecified)) (set! lT2ae8@&i/o-file-is-read-only-rcd (unspecified)) (set! lT2aee@lT2ae9 (unspecified)) (set! lT2af0@lT2aeb (unspecified)) (set! lT2af2@lT2aea (unspecified)) (set! lT2af5@p? (unspecified)) (set! lT2af7@make-i/o-file-already-exists-error (unspecified)) (set! lT2af9@i/o-file-already-exists-error? (unspecified)) (set! lT2afb@&i/o-file-already-exists-rtd (unspecified)) (set! lT2afd@&i/o-file-already-exists-rcd (unspecified)) (set! lT2b03@lT2afe (unspecified)) (set! lT2b05@lT2b00 (unspecified)) (set! lT2b07@lT2aff (unspecified)) (set! lT2b0a@p? (unspecified)) (set! lT2b0c@make-i/o-file-does-not-exist-error (unspecified)) (set! lT2b0e@i/o-file-does-not-exist-error? (unspecified)) (set! lT2b10@&i/o-file-does-not-exist-rtd (unspecified)) (set! lT2b12@&i/o-file-does-not-exist-rcd (unspecified)) (set! lT2b1a@lT2b15 (unspecified)) (set! lT2b1c@lT2b17 (unspecified)) (set! lT2b1e@lT2b16 (unspecified)) (set! lT2b21@p? (unspecified)) (set! lT2b23@make-i/o-port-error (unspecified)) (set! lT2b25@lT2b14 (unspecified)) (set! lT2b27@i/o-port-error? (unspecified)) (set! lT2b29@i/o-error-port (unspecified)) (set! lT2b2b@&i/o-port-rtd (unspecified)) (set! lT2b2d@&i/o-port-rcd (unspecified)) (set! lT2b33@lT2b2e (unspecified)) (set! lT2b35@lT2b30 (unspecified)) (set! lT2b37@lT2b2f (unspecified)) (set! lT2b3a@p? (unspecified)) (set! lT2b3c@make-i/o-decoding-error (unspecified)) (set! lT2b3e@i/o-decoding-error? (unspecified)) (set! lT2b40@&i/o-decoding-rtd (unspecified)) (set! lT2b42@&i/o-decoding-rcd (unspecified)) (set! lT2b4a@lT2b45 (unspecified)) (set! lT2b4c@lT2b47 (unspecified)) (set! lT2b4e@lT2b46 (unspecified)) (set! lT2b51@p? (unspecified)) (set! lT2b53@make-i/o-encoding-error (unspecified)) (set! lT2b55@lT2b44 (unspecified)) (set! lT2b57@i/o-encoding-error? (unspecified)) (set! lT2b59@i/o-encoding-error-char (unspecified)) (set! lT2b5b@&i/o-encoding-rtd (unspecified)) (set! lT2b5d@&i/o-encoding-rcd (unspecified)) (set! lT2b63@lT2b5e (unspecified)) (set! lT2b65@lT2b60 (unspecified)) (set! lT2b67@lT2b5f (unspecified)) (set! lT2b6a@p? (unspecified)) (set! lT2b6c@make-no-infinities-violation (unspecified)) (set! lT2b6e@no-infinities-violation? (unspecified)) (set! lT2b70@&no-infinities-rtd (unspecified)) (set! lT2b72@&no-infinities-rcd (unspecified)) (set! lT2b78@lT2b73 (unspecified)) (set! lT2b7a@lT2b75 (unspecified)) (set! lT2b7c@lT2b74 (unspecified)) (set! lT2b7f@p? (unspecified)) (set! lT2b81@make-no-nans-violation (unspecified)) (set! lT2b83@no-nans-violation? (unspecified)) (set! lT2b85@&no-nans-rtd (unspecified)) (set! lT2b87@&no-nans-rcd (unspecified)) (begin (set! lT28c9@lT28c4 (make-record-type-descriptor '&condition '#f 'lT28c7 '#f '#f '#())) (set! lT2b88@lT28c9@lT28c4 lT28c9@lT28c4)) (begin (set! lT28cb@lT28c6 '#f) (set! lT2b89@lT28cb@lT28c6 lT28cb@lT28c6)) (begin (set! lT28cd@lT28c5 (make-record-constructor-descriptor lT28c9@lT28c4 '#f lT28cb@lT28c6)) (set! lT2b8a@lT28cd@lT28c5 lT28cd@lT28c5)) (begin (set! lT28d0@&condition? (record-predicate lT28c9@lT28c4)) (set! lT2b8b@lT28d0@&condition? lT28d0@&condition?)) (begin (set! lT28d2@make-&condition (record-constructor lT28cd@lT28c5)) (set! lT2b8c@lT28d2@make-&condition lT28d2@make-&condition)) (begin (set! lT28d4@&condition-rtd lT28c9@lT28c4) (set! lT2b8d@lT28d4@&condition-rtd lT28d4@&condition-rtd)) (begin (set! lT28d6@&condition-rcd lT28cd@lT28c5) (set! lT2b8e@lT28d6@&condition-rcd lT28d6@&condition-rcd)) (begin (set! lT2922@lT291d (make-record-type-descriptor '&message lT28c9@lT28c4 'lT2920 '#f '#f '#((immutable message)))) (set! lT2b8f@lT2922@lT291d lT2922@lT291d)) (begin (set! lT2924@lT291f '#f) (set! lT2b90@lT2924@lT291f lT2924@lT291f)) (begin (set! lT2926@lT291e (make-record-constructor-descriptor lT2922@lT291d lT28cd@lT28c5 lT2924@lT291f)) (set! lT2b91@lT2926@lT291e lT2926@lT291e)) (begin (set! lT2929@p? (record-predicate lT2922@lT291d)) (set! lT2b92@lT2929@p? lT2929@p?)) (begin (set! lT292b@make-message-condition (record-constructor lT2926@lT291e)) (set! lT2b93@lT292b@make-message-condition lT292b@make-message-condition)) (begin (set! lT292d@lT291c (record-accessor lT2922@lT291d '0)) (set! lT2b94@lT292d@lT291c lT292d@lT291c)) (begin (set! lT292f@message-condition? (condition-predicate lT2922@lT291d)) (set! lT2b95@lT292f@message-condition? lT292f@message-condition?)) (begin (set! lT2931@condition-message (condition-accessor lT2922@lT291d lT292d@lT291c)) (set! lT2b96@lT2931@condition-message lT2931@condition-message)) (begin (set! lT2933@&message-rtd lT2922@lT291d) (set! lT2b97@lT2933@&message-rtd lT2933@&message-rtd)) (begin (set! lT2935@&message-rcd lT2926@lT291e) (set! lT2b98@lT2935@&message-rcd lT2935@&message-rcd)) (begin (set! lT293b@lT2936 (make-record-type-descriptor '&warning lT28c9@lT28c4 'lT2939 '#f '#f '#())) (set! lT2b99@lT293b@lT2936 lT293b@lT2936)) (begin (set! lT293d@lT2938 '#f) (set! lT2b9a@lT293d@lT2938 lT293d@lT2938)) (begin (set! lT293f@lT2937 (make-record-constructor-descriptor lT293b@lT2936 lT28cd@lT28c5 lT293d@lT2938)) (set! lT2b9b@lT293f@lT2937 lT293f@lT2937)) (begin (set! lT2942@p? (record-predicate lT293b@lT2936)) (set! lT2b9c@lT2942@p? lT2942@p?)) (begin (set! lT2944@make-warning (record-constructor lT293f@lT2937)) (set! lT2b9d@lT2944@make-warning lT2944@make-warning)) (begin (set! lT2946@warning? (condition-predicate lT293b@lT2936)) (set! lT2b9e@lT2946@warning? lT2946@warning?)) (begin (set! lT2948@&warning-rtd lT293b@lT2936) (set! lT2b9f@lT2948@&warning-rtd lT2948@&warning-rtd)) (begin (set! lT294a@&warning-rcd lT293f@lT2937) (set! lT2ba0@lT294a@&warning-rcd lT294a@&warning-rcd)) (begin (set! lT2950@lT294b (make-record-type-descriptor '&serious lT28c9@lT28c4 'lT294e '#f '#f '#())) (set! lT2ba1@lT2950@lT294b lT2950@lT294b)) (begin (set! lT2952@lT294d '#f) (set! lT2ba2@lT2952@lT294d lT2952@lT294d)) (begin (set! lT2954@lT294c (make-record-constructor-descriptor lT2950@lT294b lT28cd@lT28c5 lT2952@lT294d)) (set! lT2ba3@lT2954@lT294c lT2954@lT294c)) (begin (set! lT2957@p? (record-predicate lT2950@lT294b)) (set! lT2ba4@lT2957@p? lT2957@p?)) (begin (set! lT2959@make-serious-condition (record-constructor lT2954@lT294c)) (set! lT2ba5@lT2959@make-serious-condition lT2959@make-serious-condition)) (begin (set! lT295b@serious-condition? (condition-predicate lT2950@lT294b)) (set! lT2ba6@lT295b@serious-condition? lT295b@serious-condition?)) (begin (set! lT295d@&serious-rtd lT2950@lT294b) (set! lT2ba7@lT295d@&serious-rtd lT295d@&serious-rtd)) (begin (set! lT295f@&serious-rcd lT2954@lT294c) (set! lT2ba8@lT295f@&serious-rcd lT295f@&serious-rcd)) (begin (set! lT2965@lT2960 (make-record-type-descriptor '&error lT2950@lT294b 'lT2963 '#f '#f '#())) (set! lT2ba9@lT2965@lT2960 lT2965@lT2960)) (begin (set! lT2967@lT2962 '#f) (set! lT2baa@lT2967@lT2962 lT2967@lT2962)) (begin (set! lT2969@lT2961 (make-record-constructor-descriptor lT2965@lT2960 lT2954@lT294c lT2967@lT2962)) (set! lT2bab@lT2969@lT2961 lT2969@lT2961)) (begin (set! lT296c@p? (record-predicate lT2965@lT2960)) (set! lT2bac@lT296c@p? lT296c@p?)) (begin (set! lT296e@make-error (record-constructor lT2969@lT2961)) (set! lT2bad@lT296e@make-error lT296e@make-error)) (begin (set! lT2970@error? (condition-predicate lT2965@lT2960)) (set! lT2bae@lT2970@error? lT2970@error?)) (begin (set! lT2972@&error-rtd lT2965@lT2960) (set! lT2baf@lT2972@&error-rtd lT2972@&error-rtd)) (begin (set! lT2974@&error-rcd lT2969@lT2961) (set! lT2bb0@lT2974@&error-rcd lT2974@&error-rcd)) (begin (set! lT297a@lT2975 (make-record-type-descriptor '&violation lT2950@lT294b 'lT2978 '#f '#f '#())) (set! lT2bb1@lT297a@lT2975 lT297a@lT2975)) (begin (set! lT297c@lT2977 '#f) (set! lT2bb2@lT297c@lT2977 lT297c@lT2977)) (begin (set! lT297e@lT2976 (make-record-constructor-descriptor lT297a@lT2975 lT2954@lT294c lT297c@lT2977)) (set! lT2bb3@lT297e@lT2976 lT297e@lT2976)) (begin (set! lT2981@p? (record-predicate lT297a@lT2975)) (set! lT2bb4@lT2981@p? lT2981@p?)) (begin (set! lT2983@make-violation (record-constructor lT297e@lT2976)) (set! lT2bb5@lT2983@make-violation lT2983@make-violation)) (begin (set! lT2985@violation? (condition-predicate lT297a@lT2975)) (set! lT2bb6@lT2985@violation? lT2985@violation?)) (begin (set! lT2987@&violation-rtd lT297a@lT2975) (set! lT2bb7@lT2987@&violation-rtd lT2987@&violation-rtd)) (begin (set! lT2989@&violation-rcd lT297e@lT2976) (set! lT2bb8@lT2989@&violation-rcd lT2989@&violation-rcd)) (begin (set! lT298f@lT298a (make-record-type-descriptor '&assertion lT297a@lT2975 'lT298d '#f '#f '#())) (set! lT2bb9@lT298f@lT298a lT298f@lT298a)) (begin (set! lT2991@lT298c '#f) (set! lT2bba@lT2991@lT298c lT2991@lT298c)) (begin (set! lT2993@lT298b (make-record-constructor-descriptor lT298f@lT298a lT297e@lT2976 lT2991@lT298c)) (set! lT2bbb@lT2993@lT298b lT2993@lT298b)) (begin (set! lT2996@p? (record-predicate lT298f@lT298a)) (set! lT2bbc@lT2996@p? lT2996@p?)) (begin (set! lT2998@make-assertion-violation (record-constructor lT2993@lT298b)) (set! lT2bbd@lT2998@make-assertion-violation lT2998@make-assertion-violation)) (begin (set! lT299a@assertion-violation? (condition-predicate lT298f@lT298a)) (set! lT2bbe@lT299a@assertion-violation? lT299a@assertion-violation?)) (begin (set! lT299c@&assertion-rtd lT298f@lT298a) (set! lT2bbf@lT299c@&assertion-rtd lT299c@&assertion-rtd)) (begin (set! lT299e@&assertion-rcd lT2993@lT298b) (set! lT2bc0@lT299e@&assertion-rcd lT299e@&assertion-rcd)) (begin (set! lT29a6@lT29a1 (make-record-type-descriptor '&irritants lT28c9@lT28c4 'lT29a4 '#f '#f '#((immutable irritants)))) (set! lT2bc1@lT29a6@lT29a1 lT29a6@lT29a1)) (begin (set! lT29a8@lT29a3 '#f) (set! lT2bc2@lT29a8@lT29a3 lT29a8@lT29a3)) (begin (set! lT29aa@lT29a2 (make-record-constructor-descriptor lT29a6@lT29a1 lT28cd@lT28c5 lT29a8@lT29a3)) (set! lT2bc3@lT29aa@lT29a2 lT29aa@lT29a2)) (begin (set! lT29ad@p? (record-predicate lT29a6@lT29a1)) (set! lT2bc4@lT29ad@p? lT29ad@p?)) (begin (set! lT29af@make-irritants-condition (record-constructor lT29aa@lT29a2)) (set! lT2bc5@lT29af@make-irritants-condition lT29af@make-irritants-condition)) (begin (set! lT29b1@lT29a0 (record-accessor lT29a6@lT29a1 '0)) (set! lT2bc6@lT29b1@lT29a0 lT29b1@lT29a0)) (begin (set! lT29b3@irritants-condition? (condition-predicate lT29a6@lT29a1)) (set! lT2bc7@lT29b3@irritants-condition? lT29b3@irritants-condition?)) (begin (set! lT29b5@condition-irritants (condition-accessor lT29a6@lT29a1 lT29b1@lT29a0)) (set! lT2bc8@lT29b5@condition-irritants lT29b5@condition-irritants)) (begin (set! lT29b7@&irritants-rtd lT29a6@lT29a1) (set! lT2bc9@lT29b7@&irritants-rtd lT29b7@&irritants-rtd)) (begin (set! lT29b9@&irritants-rcd lT29aa@lT29a2) (set! lT2bca@lT29b9@&irritants-rcd lT29b9@&irritants-rcd)) (begin (set! lT29c1@lT29bc (make-record-type-descriptor '&who lT28c9@lT28c4 'lT29bf '#f '#f '#((immutable who)))) (set! lT2bcb@lT29c1@lT29bc lT29c1@lT29bc)) (begin (set! lT29c3@lT29be '#f) (set! lT2bcc@lT29c3@lT29be lT29c3@lT29be)) (begin (set! lT29c5@lT29bd (make-record-constructor-descriptor lT29c1@lT29bc lT28cd@lT28c5 lT29c3@lT29be)) (set! lT2bcd@lT29c5@lT29bd lT29c5@lT29bd)) (begin (set! lT29c8@p? (record-predicate lT29c1@lT29bc)) (set! lT2bce@lT29c8@p? lT29c8@p?)) (begin (set! lT29ca@make-who-condition (record-constructor lT29c5@lT29bd)) (set! lT2bcf@lT29ca@make-who-condition lT29ca@make-who-condition)) (begin (set! lT29cc@lT29bb (record-accessor lT29c1@lT29bc '0)) (set! lT2bd0@lT29cc@lT29bb lT29cc@lT29bb)) (begin (set! lT29ce@who-condition? (condition-predicate lT29c1@lT29bc)) (set! lT2bd1@lT29ce@who-condition? lT29ce@who-condition?)) (begin (set! lT29d0@condition-who (condition-accessor lT29c1@lT29bc lT29cc@lT29bb)) (set! lT2bd2@lT29d0@condition-who lT29d0@condition-who)) (begin (set! lT29d2@&who-rtd lT29c1@lT29bc) (set! lT2bd3@lT29d2@&who-rtd lT29d2@&who-rtd)) (begin (set! lT29d4@&who-rcd lT29c5@lT29bd) (set! lT2bd4@lT29d4@&who-rcd lT29d4@&who-rcd)) (begin (set! lT29da@lT29d5 (make-record-type-descriptor '&non-continuable lT297a@lT2975 'lT29d8 '#f '#f '#())) (set! lT2bd5@lT29da@lT29d5 lT29da@lT29d5)) (begin (set! lT29dc@lT29d7 '#f) (set! lT2bd6@lT29dc@lT29d7 lT29dc@lT29d7)) (begin (set! lT29de@lT29d6 (make-record-constructor-descriptor lT29da@lT29d5 lT297e@lT2976 lT29dc@lT29d7)) (set! lT2bd7@lT29de@lT29d6 lT29de@lT29d6)) (begin (set! lT29e1@p? (record-predicate lT29da@lT29d5)) (set! lT2bd8@lT29e1@p? lT29e1@p?)) (begin (set! lT29e3@make-non-continuable-violation (record-constructor lT29de@lT29d6)) (set! lT2bd9@lT29e3@make-non-continuable-violation lT29e3@make-non-continuable-violation)) (begin (set! lT29e5@non-continuable-violation? (condition-predicate lT29da@lT29d5)) (set! lT2bda@lT29e5@non-continuable-violation? lT29e5@non-continuable-violation?)) (begin (set! lT29e7@&non-continuable-rtd lT29da@lT29d5) (set! lT2bdb@lT29e7@&non-continuable-rtd lT29e7@&non-continuable-rtd)) (begin (set! lT29e9@&non-continuable-rcd lT29de@lT29d6) (set! lT2bdc@lT29e9@&non-continuable-rcd lT29e9@&non-continuable-rcd)) (begin (set! lT29ef@lT29ea (make-record-type-descriptor '&implementation-restriction lT297a@lT2975 'lT29ed '#f '#f '#())) (set! lT2bdd@lT29ef@lT29ea lT29ef@lT29ea)) (begin (set! lT29f1@lT29ec '#f) (set! lT2bde@lT29f1@lT29ec lT29f1@lT29ec)) (begin (set! lT29f3@lT29eb (make-record-constructor-descriptor lT29ef@lT29ea lT297e@lT2976 lT29f1@lT29ec)) (set! lT2bdf@lT29f3@lT29eb lT29f3@lT29eb)) (begin (set! lT29f6@p? (record-predicate lT29ef@lT29ea)) (set! lT2be0@lT29f6@p? lT29f6@p?)) (begin (set! lT29f8@make-implementation-restriction-violation (record-constructor lT29f3@lT29eb)) (set! lT2be1@lT29f8@make-implementation-restriction-violation lT29f8@make-implementation-restriction-violation)) (begin (set! lT29fa@implementation-restriction-violation? (condition-predicate lT29ef@lT29ea)) (set! lT2be2@lT29fa@implementation-restriction-violation? lT29fa@implementation-restriction-violation?)) (begin (set! lT29fc@&implementation-restriction-rtd lT29ef@lT29ea) (set! lT2be3@lT29fc@&implementation-restriction-rtd lT29fc@&implementation-restriction-rtd)) (begin (set! lT29fe@&implementation-restriction-rcd lT29f3@lT29eb) (set! lT2be4@lT29fe@&implementation-restriction-rcd lT29fe@&implementation-restriction-rcd)) (begin (set! lT2a04@lT29ff (make-record-type-descriptor '&lexical lT297a@lT2975 'lT2a02 '#f '#f '#())) (set! lT2be5@lT2a04@lT29ff lT2a04@lT29ff)) (begin (set! lT2a06@lT2a01 '#f) (set! lT2be6@lT2a06@lT2a01 lT2a06@lT2a01)) (begin (set! lT2a08@lT2a00 (make-record-constructor-descriptor lT2a04@lT29ff lT297e@lT2976 lT2a06@lT2a01)) (set! lT2be7@lT2a08@lT2a00 lT2a08@lT2a00)) (begin (set! lT2a0b@p? (record-predicate lT2a04@lT29ff)) (set! lT2be8@lT2a0b@p? lT2a0b@p?)) (begin (set! lT2a0d@make-lexical-violation (record-constructor lT2a08@lT2a00)) (set! lT2be9@lT2a0d@make-lexical-violation lT2a0d@make-lexical-violation)) (begin (set! lT2a0f@lexical-violation? (condition-predicate lT2a04@lT29ff)) (set! lT2bea@lT2a0f@lexical-violation? lT2a0f@lexical-violation?)) (begin (set! lT2a11@&lexical-rtd lT2a04@lT29ff) (set! lT2beb@lT2a11@&lexical-rtd lT2a11@&lexical-rtd)) (begin (set! lT2a13@&lexical-rcd lT2a08@lT2a00) (set! lT2bec@lT2a13@&lexical-rcd lT2a13@&lexical-rcd)) (begin (set! lT2a1d@lT2a18 (make-record-type-descriptor '&syntax lT297a@lT2975 'lT2a1b '#f '#f '#((immutable form) (immutable subform)))) (set! lT2bed@lT2a1d@lT2a18 lT2a1d@lT2a18)) (begin (set! lT2a1f@lT2a1a '#f) (set! lT2bee@lT2a1f@lT2a1a lT2a1f@lT2a1a)) (begin (set! lT2a21@lT2a19 (make-record-constructor-descriptor lT2a1d@lT2a18 lT297e@lT2976 lT2a1f@lT2a1a)) (set! lT2bef@lT2a21@lT2a19 lT2a21@lT2a19)) (begin (set! lT2a24@p? (record-predicate lT2a1d@lT2a18)) (set! lT2bf0@lT2a24@p? lT2a24@p?)) (begin (set! lT2a26@make-syntax-violation (record-constructor lT2a21@lT2a19)) (set! lT2bf1@lT2a26@make-syntax-violation lT2a26@make-syntax-violation)) (begin (set! lT2a28@lT2a15 (record-accessor lT2a1d@lT2a18 '0)) (set! lT2bf2@lT2a28@lT2a15 lT2a28@lT2a15)) (begin (set! lT2a2a@lT2a17 (record-accessor lT2a1d@lT2a18 '1)) (set! lT2bf3@lT2a2a@lT2a17 lT2a2a@lT2a17)) (begin (set! lT2a2c@syntax-violation? (condition-predicate lT2a1d@lT2a18)) (set! lT2bf4@lT2a2c@syntax-violation? lT2a2c@syntax-violation?)) (begin (set! lT2a2e@syntax-violation-form (condition-accessor lT2a1d@lT2a18 lT2a28@lT2a15)) (set! lT2bf5@lT2a2e@syntax-violation-form lT2a2e@syntax-violation-form)) (begin (set! lT2a30@syntax-violation-subform (condition-accessor lT2a1d@lT2a18 lT2a2a@lT2a17)) (set! lT2bf6@lT2a30@syntax-violation-subform lT2a30@syntax-violation-subform)) (begin (set! lT2a32@&syntax-rtd lT2a1d@lT2a18) (set! lT2bf7@lT2a32@&syntax-rtd lT2a32@&syntax-rtd)) (begin (set! lT2a34@&syntax-rcd lT2a21@lT2a19) (set! lT2bf8@lT2a34@&syntax-rcd lT2a34@&syntax-rcd)) (begin (set! lT2a3a@lT2a35 (make-record-type-descriptor '&undefined lT297a@lT2975 'lT2a38 '#f '#f '#())) (set! lT2bf9@lT2a3a@lT2a35 lT2a3a@lT2a35)) (begin (set! lT2a3c@lT2a37 '#f) (set! lT2bfa@lT2a3c@lT2a37 lT2a3c@lT2a37)) (begin (set! lT2a3e@lT2a36 (make-record-constructor-descriptor lT2a3a@lT2a35 lT297e@lT2976 lT2a3c@lT2a37)) (set! lT2bfb@lT2a3e@lT2a36 lT2a3e@lT2a36)) (begin (set! lT2a41@p? (record-predicate lT2a3a@lT2a35)) (set! lT2bfc@lT2a41@p? lT2a41@p?)) (begin (set! lT2a43@make-undefined-violation (record-constructor lT2a3e@lT2a36)) (set! lT2bfd@lT2a43@make-undefined-violation lT2a43@make-undefined-violation)) (begin (set! lT2a45@undefined-violation? (condition-predicate lT2a3a@lT2a35)) (set! lT2bfe@lT2a45@undefined-violation? lT2a45@undefined-violation?)) (begin (set! lT2a47@&undefined-rtd lT2a3a@lT2a35) (set! lT2bff@lT2a47@&undefined-rtd lT2a47@&undefined-rtd)) (begin (set! lT2a49@&undefined-rcd lT2a3e@lT2a36) (set! lT2c00@lT2a49@&undefined-rcd lT2a49@&undefined-rcd)) (begin (set! lT2a4f@lT2a4a (make-record-type-descriptor '&i/o lT2965@lT2960 'lT2a4d '#f '#f '#())) (set! lT2c01@lT2a4f@lT2a4a lT2a4f@lT2a4a)) (begin (set! lT2a51@lT2a4c '#f) (set! lT2c02@lT2a51@lT2a4c lT2a51@lT2a4c)) (begin (set! lT2a53@lT2a4b (make-record-constructor-descriptor lT2a4f@lT2a4a lT2969@lT2961 lT2a51@lT2a4c)) (set! lT2c03@lT2a53@lT2a4b lT2a53@lT2a4b)) (begin (set! lT2a56@p? (record-predicate lT2a4f@lT2a4a)) (set! lT2c04@lT2a56@p? lT2a56@p?)) (begin (set! lT2a58@make-i/o-error (record-constructor lT2a53@lT2a4b)) (set! lT2c05@lT2a58@make-i/o-error lT2a58@make-i/o-error)) (begin (set! lT2a5a@i/o-error? (condition-predicate lT2a4f@lT2a4a)) (set! lT2c06@lT2a5a@i/o-error? lT2a5a@i/o-error?)) (begin (set! lT2a5c@&i/o-rtd lT2a4f@lT2a4a) (set! lT2c07@lT2a5c@&i/o-rtd lT2a5c@&i/o-rtd)) (begin (set! lT2a5e@&i/o-rcd lT2a53@lT2a4b) (set! lT2c08@lT2a5e@&i/o-rcd lT2a5e@&i/o-rcd)) (begin (set! lT2a64@lT2a5f (make-record-type-descriptor '&i/o-read lT2a4f@lT2a4a 'lT2a62 '#f '#f '#())) (set! lT2c09@lT2a64@lT2a5f lT2a64@lT2a5f)) (begin (set! lT2a66@lT2a61 '#f) (set! lT2c0a@lT2a66@lT2a61 lT2a66@lT2a61)) (begin (set! lT2a68@lT2a60 (make-record-constructor-descriptor lT2a64@lT2a5f lT2a53@lT2a4b lT2a66@lT2a61)) (set! lT2c0b@lT2a68@lT2a60 lT2a68@lT2a60)) (begin (set! lT2a6b@p? (record-predicate lT2a64@lT2a5f)) (set! lT2c0c@lT2a6b@p? lT2a6b@p?)) (begin (set! lT2a6d@make-i/o-read-error (record-constructor lT2a68@lT2a60)) (set! lT2c0d@lT2a6d@make-i/o-read-error lT2a6d@make-i/o-read-error)) (begin (set! lT2a6f@i/o-read-error? (condition-predicate lT2a64@lT2a5f)) (set! lT2c0e@lT2a6f@i/o-read-error? lT2a6f@i/o-read-error?)) (begin (set! lT2a71@&i/o-read-rtd lT2a64@lT2a5f) (set! lT2c0f@lT2a71@&i/o-read-rtd lT2a71@&i/o-read-rtd)) (begin (set! lT2a73@&i/o-read-rcd lT2a68@lT2a60) (set! lT2c10@lT2a73@&i/o-read-rcd lT2a73@&i/o-read-rcd)) (begin (set! lT2a79@lT2a74 (make-record-type-descriptor '&i/o-write lT2a4f@lT2a4a 'lT2a77 '#f '#f '#())) (set! lT2c11@lT2a79@lT2a74 lT2a79@lT2a74)) (begin (set! lT2a7b@lT2a76 '#f) (set! lT2c12@lT2a7b@lT2a76 lT2a7b@lT2a76)) (begin (set! lT2a7d@lT2a75 (make-record-constructor-descriptor lT2a79@lT2a74 lT2a53@lT2a4b lT2a7b@lT2a76)) (set! lT2c13@lT2a7d@lT2a75 lT2a7d@lT2a75)) (begin (set! lT2a80@p? (record-predicate lT2a79@lT2a74)) (set! lT2c14@lT2a80@p? lT2a80@p?)) (begin (set! lT2a82@make-i/o-write-error (record-constructor lT2a7d@lT2a75)) (set! lT2c15@lT2a82@make-i/o-write-error lT2a82@make-i/o-write-error)) (begin (set! lT2a84@i/o-write-error? (condition-predicate lT2a79@lT2a74)) (set! lT2c16@lT2a84@i/o-write-error? lT2a84@i/o-write-error?)) (begin (set! lT2a86@&i/o-write-rtd lT2a79@lT2a74) (set! lT2c17@lT2a86@&i/o-write-rtd lT2a86@&i/o-write-rtd)) (begin (set! lT2a88@&i/o-write-rcd lT2a7d@lT2a75) (set! lT2c18@lT2a88@&i/o-write-rcd lT2a88@&i/o-write-rcd)) (begin (set! lT2a90@lT2a8b (make-record-type-descriptor '&i/o-invalid-position lT2a4f@lT2a4a 'lT2a8e '#f '#f '#((immutable position)))) (set! lT2c19@lT2a90@lT2a8b lT2a90@lT2a8b)) (begin (set! lT2a92@lT2a8d '#f) (set! lT2c1a@lT2a92@lT2a8d lT2a92@lT2a8d)) (begin (set! lT2a94@lT2a8c (make-record-constructor-descriptor lT2a90@lT2a8b lT2a53@lT2a4b lT2a92@lT2a8d)) (set! lT2c1b@lT2a94@lT2a8c lT2a94@lT2a8c)) (begin (set! lT2a97@p? (record-predicate lT2a90@lT2a8b)) (set! lT2c1c@lT2a97@p? lT2a97@p?)) (begin (set! lT2a99@make-i/o-invalid-position-error (record-constructor lT2a94@lT2a8c)) (set! lT2c1d@lT2a99@make-i/o-invalid-position-error lT2a99@make-i/o-invalid-position-error)) (begin (set! lT2a9b@lT2a8a (record-accessor lT2a90@lT2a8b '0)) (set! lT2c1e@lT2a9b@lT2a8a lT2a9b@lT2a8a)) (begin (set! lT2a9d@i/o-invalid-position-error? (condition-predicate lT2a90@lT2a8b)) (set! lT2c1f@lT2a9d@i/o-invalid-position-error? lT2a9d@i/o-invalid-position-error?)) (begin (set! lT2a9f@i/o-error-position (condition-accessor lT2a90@lT2a8b lT2a9b@lT2a8a)) (set! lT2c20@lT2a9f@i/o-error-position lT2a9f@i/o-error-position)) (begin (set! lT2aa1@&i/o-invalid-position-rtd lT2a90@lT2a8b) (set! lT2c21@lT2aa1@&i/o-invalid-position-rtd lT2aa1@&i/o-invalid-position-rtd)) (begin (set! lT2aa3@&i/o-invalid-position-rcd lT2a94@lT2a8c) (set! lT2c22@lT2aa3@&i/o-invalid-position-rcd lT2aa3@&i/o-invalid-position-rcd)) (begin (set! lT2aab@lT2aa6 (make-record-type-descriptor '&i/o-filename lT2a4f@lT2a4a 'lT2aa9 '#f '#f '#((immutable filename)))) (set! lT2c23@lT2aab@lT2aa6 lT2aab@lT2aa6)) (begin (set! lT2aad@lT2aa8 '#f) (set! lT2c24@lT2aad@lT2aa8 lT2aad@lT2aa8)) (begin (set! lT2aaf@lT2aa7 (make-record-constructor-descriptor lT2aab@lT2aa6 lT2a53@lT2a4b lT2aad@lT2aa8)) (set! lT2c25@lT2aaf@lT2aa7 lT2aaf@lT2aa7)) (begin (set! lT2ab2@p? (record-predicate lT2aab@lT2aa6)) (set! lT2c26@lT2ab2@p? lT2ab2@p?)) (begin (set! lT2ab4@make-i/o-filename-error (record-constructor lT2aaf@lT2aa7)) (set! lT2c27@lT2ab4@make-i/o-filename-error lT2ab4@make-i/o-filename-error)) (begin (set! lT2ab6@lT2aa5 (record-accessor lT2aab@lT2aa6 '0)) (set! lT2c28@lT2ab6@lT2aa5 lT2ab6@lT2aa5)) (begin (set! lT2ab8@i/o-filename-error? (condition-predicate lT2aab@lT2aa6)) (set! lT2c29@lT2ab8@i/o-filename-error? lT2ab8@i/o-filename-error?)) (begin (set! lT2aba@i/o-error-filename (condition-accessor lT2aab@lT2aa6 lT2ab6@lT2aa5)) (set! lT2c2a@lT2aba@i/o-error-filename lT2aba@i/o-error-filename)) (begin (set! lT2abc@&i/o-filename-rtd lT2aab@lT2aa6) (set! lT2c2b@lT2abc@&i/o-filename-rtd lT2abc@&i/o-filename-rtd)) (begin (set! lT2abe@&i/o-filename-rcd lT2aaf@lT2aa7) (set! lT2c2c@lT2abe@&i/o-filename-rcd lT2abe@&i/o-filename-rcd)) (begin (set! lT2ac4@lT2abf (make-record-type-descriptor '&i/o-file-protection lT2aab@lT2aa6 'lT2ac2 '#f '#f '#())) (set! lT2c2d@lT2ac4@lT2abf lT2ac4@lT2abf)) (begin (set! lT2ac6@lT2ac1 '#f) (set! lT2c2e@lT2ac6@lT2ac1 lT2ac6@lT2ac1)) (begin (set! lT2ac8@lT2ac0 (make-record-constructor-descriptor lT2ac4@lT2abf lT2aaf@lT2aa7 lT2ac6@lT2ac1)) (set! lT2c2f@lT2ac8@lT2ac0 lT2ac8@lT2ac0)) (begin (set! lT2acb@p? (record-predicate lT2ac4@lT2abf)) (set! lT2c30@lT2acb@p? lT2acb@p?)) (begin (set! lT2acd@make-i/o-file-protection-error (record-constructor lT2ac8@lT2ac0)) (set! lT2c31@lT2acd@make-i/o-file-protection-error lT2acd@make-i/o-file-protection-error)) (begin (set! lT2acf@i/o-file-protection-error? (condition-predicate lT2ac4@lT2abf)) (set! lT2c32@lT2acf@i/o-file-protection-error? lT2acf@i/o-file-protection-error?)) (begin (set! lT2ad1@&i/o-file-protection-rtd lT2ac4@lT2abf) (set! lT2c33@lT2ad1@&i/o-file-protection-rtd lT2ad1@&i/o-file-protection-rtd)) (begin (set! lT2ad3@&i/o-file-protection-rcd lT2ac8@lT2ac0) (set! lT2c34@lT2ad3@&i/o-file-protection-rcd lT2ad3@&i/o-file-protection-rcd)) (begin (set! lT2ad9@lT2ad4 (make-record-type-descriptor '&i/o-file-is-read-only lT2ac4@lT2abf 'lT2ad7 '#f '#f '#())) (set! lT2c35@lT2ad9@lT2ad4 lT2ad9@lT2ad4)) (begin (set! lT2adb@lT2ad6 '#f) (set! lT2c36@lT2adb@lT2ad6 lT2adb@lT2ad6)) (begin (set! lT2add@lT2ad5 (make-record-constructor-descriptor lT2ad9@lT2ad4 lT2ac8@lT2ac0 lT2adb@lT2ad6)) (set! lT2c37@lT2add@lT2ad5 lT2add@lT2ad5)) (begin (set! lT2ae0@p? (record-predicate lT2ad9@lT2ad4)) (set! lT2c38@lT2ae0@p? lT2ae0@p?)) (begin (set! lT2ae2@make-i/o-file-is-read-only-error (record-constructor lT2add@lT2ad5)) (set! lT2c39@lT2ae2@make-i/o-file-is-read-only-error lT2ae2@make-i/o-file-is-read-only-error)) (begin (set! lT2ae4@i/o-file-is-read-only-error? (condition-predicate lT2ad9@lT2ad4)) (set! lT2c3a@lT2ae4@i/o-file-is-read-only-error? lT2ae4@i/o-file-is-read-only-error?)) (begin (set! lT2ae6@&i/o-file-is-read-only-rtd lT2ad9@lT2ad4) (set! lT2c3b@lT2ae6@&i/o-file-is-read-only-rtd lT2ae6@&i/o-file-is-read-only-rtd)) (begin (set! lT2ae8@&i/o-file-is-read-only-rcd lT2add@lT2ad5) (set! lT2c3c@lT2ae8@&i/o-file-is-read-only-rcd lT2ae8@&i/o-file-is-read-only-rcd)) (begin (set! lT2aee@lT2ae9 (make-record-type-descriptor '&i/o-file-already-exists lT2aab@lT2aa6 'lT2aec '#f '#f '#())) (set! lT2c3d@lT2aee@lT2ae9 lT2aee@lT2ae9)) (begin (set! lT2af0@lT2aeb '#f) (set! lT2c3e@lT2af0@lT2aeb lT2af0@lT2aeb)) (begin (set! lT2af2@lT2aea (make-record-constructor-descriptor lT2aee@lT2ae9 lT2aaf@lT2aa7 lT2af0@lT2aeb)) (set! lT2c3f@lT2af2@lT2aea lT2af2@lT2aea)) (begin (set! lT2af5@p? (record-predicate lT2aee@lT2ae9)) (set! lT2c40@lT2af5@p? lT2af5@p?)) (begin (set! lT2af7@make-i/o-file-already-exists-error (record-constructor lT2af2@lT2aea)) (set! lT2c41@lT2af7@make-i/o-file-already-exists-error lT2af7@make-i/o-file-already-exists-error)) (begin (set! lT2af9@i/o-file-already-exists-error? (condition-predicate lT2aee@lT2ae9)) (set! lT2c42@lT2af9@i/o-file-already-exists-error? lT2af9@i/o-file-already-exists-error?)) (begin (set! lT2afb@&i/o-file-already-exists-rtd lT2aee@lT2ae9) (set! lT2c43@lT2afb@&i/o-file-already-exists-rtd lT2afb@&i/o-file-already-exists-rtd)) (begin (set! lT2afd@&i/o-file-already-exists-rcd lT2af2@lT2aea) (set! lT2c44@lT2afd@&i/o-file-already-exists-rcd lT2afd@&i/o-file-already-exists-rcd)) (begin (set! lT2b03@lT2afe (make-record-type-descriptor '&i/o-file-does-not-exist lT2aab@lT2aa6 'lT2b01 '#f '#f '#())) (set! lT2c45@lT2b03@lT2afe lT2b03@lT2afe)) (begin (set! lT2b05@lT2b00 '#f) (set! lT2c46@lT2b05@lT2b00 lT2b05@lT2b00)) (begin (set! lT2b07@lT2aff (make-record-constructor-descriptor lT2b03@lT2afe lT2aaf@lT2aa7 lT2b05@lT2b00)) (set! lT2c47@lT2b07@lT2aff lT2b07@lT2aff)) (begin (set! lT2b0a@p? (record-predicate lT2b03@lT2afe)) (set! lT2c48@lT2b0a@p? lT2b0a@p?)) (begin (set! lT2b0c@make-i/o-file-does-not-exist-error (record-constructor lT2b07@lT2aff)) (set! lT2c49@lT2b0c@make-i/o-file-does-not-exist-error lT2b0c@make-i/o-file-does-not-exist-error)) (begin (set! lT2b0e@i/o-file-does-not-exist-error? (condition-predicate lT2b03@lT2afe)) (set! lT2c4a@lT2b0e@i/o-file-does-not-exist-error? lT2b0e@i/o-file-does-not-exist-error?)) (begin (set! lT2b10@&i/o-file-does-not-exist-rtd lT2b03@lT2afe) (set! lT2c4b@lT2b10@&i/o-file-does-not-exist-rtd lT2b10@&i/o-file-does-not-exist-rtd)) (begin (set! lT2b12@&i/o-file-does-not-exist-rcd lT2b07@lT2aff) (set! lT2c4c@lT2b12@&i/o-file-does-not-exist-rcd lT2b12@&i/o-file-does-not-exist-rcd)) (begin (set! lT2b1a@lT2b15 (make-record-type-descriptor '&i/o-port lT2a4f@lT2a4a 'lT2b18 '#f '#f '#((immutable port)))) (set! lT2c4d@lT2b1a@lT2b15 lT2b1a@lT2b15)) (begin (set! lT2b1c@lT2b17 '#f) (set! lT2c4e@lT2b1c@lT2b17 lT2b1c@lT2b17)) (begin (set! lT2b1e@lT2b16 (make-record-constructor-descriptor lT2b1a@lT2b15 lT2a53@lT2a4b lT2b1c@lT2b17)) (set! lT2c4f@lT2b1e@lT2b16 lT2b1e@lT2b16)) (begin (set! lT2b21@p? (record-predicate lT2b1a@lT2b15)) (set! lT2c50@lT2b21@p? lT2b21@p?)) (begin (set! lT2b23@make-i/o-port-error (record-constructor lT2b1e@lT2b16)) (set! lT2c51@lT2b23@make-i/o-port-error lT2b23@make-i/o-port-error)) (begin (set! lT2b25@lT2b14 (record-accessor lT2b1a@lT2b15 '0)) (set! lT2c52@lT2b25@lT2b14 lT2b25@lT2b14)) (begin (set! lT2b27@i/o-port-error? (condition-predicate lT2b1a@lT2b15)) (set! lT2c53@lT2b27@i/o-port-error? lT2b27@i/o-port-error?)) (begin (set! lT2b29@i/o-error-port (condition-accessor lT2b1a@lT2b15 lT2b25@lT2b14)) (set! lT2c54@lT2b29@i/o-error-port lT2b29@i/o-error-port)) (begin (set! lT2b2b@&i/o-port-rtd lT2b1a@lT2b15) (set! lT2c55@lT2b2b@&i/o-port-rtd lT2b2b@&i/o-port-rtd)) (begin (set! lT2b2d@&i/o-port-rcd lT2b1e@lT2b16) (set! lT2c56@lT2b2d@&i/o-port-rcd lT2b2d@&i/o-port-rcd)) (begin (set! lT2b33@lT2b2e (make-record-type-descriptor '&i/o-decoding lT2b1a@lT2b15 'lT2b31 '#f '#f '#())) (set! lT2c57@lT2b33@lT2b2e lT2b33@lT2b2e)) (begin (set! lT2b35@lT2b30 '#f) (set! lT2c58@lT2b35@lT2b30 lT2b35@lT2b30)) (begin (set! lT2b37@lT2b2f (make-record-constructor-descriptor lT2b33@lT2b2e lT2b1e@lT2b16 lT2b35@lT2b30)) (set! lT2c59@lT2b37@lT2b2f lT2b37@lT2b2f)) (begin (set! lT2b3a@p? (record-predicate lT2b33@lT2b2e)) (set! lT2c5a@lT2b3a@p? lT2b3a@p?)) (begin (set! lT2b3c@make-i/o-decoding-error (record-constructor lT2b37@lT2b2f)) (set! lT2c5b@lT2b3c@make-i/o-decoding-error lT2b3c@make-i/o-decoding-error)) (begin (set! lT2b3e@i/o-decoding-error? (condition-predicate lT2b33@lT2b2e)) (set! lT2c5c@lT2b3e@i/o-decoding-error? lT2b3e@i/o-decoding-error?)) (begin (set! lT2b40@&i/o-decoding-rtd lT2b33@lT2b2e) (set! lT2c5d@lT2b40@&i/o-decoding-rtd lT2b40@&i/o-decoding-rtd)) (begin (set! lT2b42@&i/o-decoding-rcd lT2b37@lT2b2f) (set! lT2c5e@lT2b42@&i/o-decoding-rcd lT2b42@&i/o-decoding-rcd)) (begin (set! lT2b4a@lT2b45 (make-record-type-descriptor '&i/o-encoding lT2b1a@lT2b15 'lT2b48 '#f '#f '#((immutable char)))) (set! lT2c5f@lT2b4a@lT2b45 lT2b4a@lT2b45)) (begin (set! lT2b4c@lT2b47 '#f) (set! lT2c60@lT2b4c@lT2b47 lT2b4c@lT2b47)) (begin (set! lT2b4e@lT2b46 (make-record-constructor-descriptor lT2b4a@lT2b45 lT2b1e@lT2b16 lT2b4c@lT2b47)) (set! lT2c61@lT2b4e@lT2b46 lT2b4e@lT2b46)) (begin (set! lT2b51@p? (record-predicate lT2b4a@lT2b45)) (set! lT2c62@lT2b51@p? lT2b51@p?)) (begin (set! lT2b53@make-i/o-encoding-error (record-constructor lT2b4e@lT2b46)) (set! lT2c63@lT2b53@make-i/o-encoding-error lT2b53@make-i/o-encoding-error)) (begin (set! lT2b55@lT2b44 (record-accessor lT2b4a@lT2b45 '0)) (set! lT2c64@lT2b55@lT2b44 lT2b55@lT2b44)) (begin (set! lT2b57@i/o-encoding-error? (condition-predicate lT2b4a@lT2b45)) (set! lT2c65@lT2b57@i/o-encoding-error? lT2b57@i/o-encoding-error?)) (begin (set! lT2b59@i/o-encoding-error-char (condition-accessor lT2b4a@lT2b45 lT2b55@lT2b44)) (set! lT2c66@lT2b59@i/o-encoding-error-char lT2b59@i/o-encoding-error-char)) (begin (set! lT2b5b@&i/o-encoding-rtd lT2b4a@lT2b45) (set! lT2c67@lT2b5b@&i/o-encoding-rtd lT2b5b@&i/o-encoding-rtd)) (begin (set! lT2b5d@&i/o-encoding-rcd lT2b4e@lT2b46) (set! lT2c68@lT2b5d@&i/o-encoding-rcd lT2b5d@&i/o-encoding-rcd)) (begin (set! lT2b63@lT2b5e (make-record-type-descriptor '&no-infinities lT29ef@lT29ea 'lT2b61 '#f '#f '#())) (set! lT2c69@lT2b63@lT2b5e lT2b63@lT2b5e)) (begin (set! lT2b65@lT2b60 '#f) (set! lT2c6a@lT2b65@lT2b60 lT2b65@lT2b60)) (begin (set! lT2b67@lT2b5f (make-record-constructor-descriptor lT2b63@lT2b5e lT29f3@lT29eb lT2b65@lT2b60)) (set! lT2c6b@lT2b67@lT2b5f lT2b67@lT2b5f)) (begin (set! lT2b6a@p? (record-predicate lT2b63@lT2b5e)) (set! lT2c6c@lT2b6a@p? lT2b6a@p?)) (begin (set! lT2b6c@make-no-infinities-violation (record-constructor lT2b67@lT2b5f)) (set! lT2c6d@lT2b6c@make-no-infinities-violation lT2b6c@make-no-infinities-violation)) (begin (set! lT2b6e@no-infinities-violation? (condition-predicate lT2b63@lT2b5e)) (set! lT2c6e@lT2b6e@no-infinities-violation? lT2b6e@no-infinities-violation?)) (begin (set! lT2b70@&no-infinities-rtd lT2b63@lT2b5e) (set! lT2c6f@lT2b70@&no-infinities-rtd lT2b70@&no-infinities-rtd)) (begin (set! lT2b72@&no-infinities-rcd lT2b67@lT2b5f) (set! lT2c70@lT2b72@&no-infinities-rcd lT2b72@&no-infinities-rcd)) (begin (set! lT2b78@lT2b73 (make-record-type-descriptor '&no-nans lT29ef@lT29ea 'lT2b76 '#f '#f '#())) (set! lT2c71@lT2b78@lT2b73 lT2b78@lT2b73)) (begin (set! lT2b7a@lT2b75 '#f) (set! lT2c72@lT2b7a@lT2b75 lT2b7a@lT2b75)) (begin (set! lT2b7c@lT2b74 (make-record-constructor-descriptor lT2b78@lT2b73 lT29f3@lT29eb lT2b7a@lT2b75)) (set! lT2c73@lT2b7c@lT2b74 lT2b7c@lT2b74)) (begin (set! lT2b7f@p? (record-predicate lT2b78@lT2b73)) (set! lT2c74@lT2b7f@p? lT2b7f@p?)) (begin (set! lT2b81@make-no-nans-violation (record-constructor lT2b7c@lT2b74)) (set! lT2c75@lT2b81@make-no-nans-violation lT2b81@make-no-nans-violation)) (begin (set! lT2b83@no-nans-violation? (condition-predicate lT2b78@lT2b73)) (set! lT2c76@lT2b83@no-nans-violation? lT2b83@no-nans-violation?)) (begin (set! lT2b85@&no-nans-rtd lT2b78@lT2b73) (set! lT2c77@lT2b85@&no-nans-rtd lT2b85@&no-nans-rtd)) (begin (set! lT2b87@&no-nans-rcd lT2b7c@lT2b74) (set! lT2c78@lT2b87@&no-nans-rcd lT2b87@&no-nans-rcd)) (void))
(begin (begin (lT710@lT6c5@current-primitive-locations (lambda (lT3145@x) (let ((lT3147@t (assq lT3145@x '((&no-nans-rcd . lT2c78@lT2b87@&no-nans-rcd) (&no-nans-rtd . lT2c77@lT2b85@&no-nans-rtd) (&no-infinities-rcd . lT2c70@lT2b72@&no-infinities-rcd) (&no-infinities-rtd . lT2c6f@lT2b70@&no-infinities-rtd) (&i/o-encoding-rcd . lT2c68@lT2b5d@&i/o-encoding-rcd) (&i/o-encoding-rtd . lT2c67@lT2b5b@&i/o-encoding-rtd) (&i/o-decoding-rcd . lT2c5e@lT2b42@&i/o-decoding-rcd) (&i/o-decoding-rtd . lT2c5d@lT2b40@&i/o-decoding-rtd) (&i/o-port-rcd . lT2c56@lT2b2d@&i/o-port-rcd) (&i/o-port-rtd . lT2c55@lT2b2b@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . lT2c4c@lT2b12@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . lT2c4b@lT2b10@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . lT2c44@lT2afd@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . lT2c43@lT2afb@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . lT2c3c@lT2ae8@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . lT2c3b@lT2ae6@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . lT2c34@lT2ad3@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . lT2c33@lT2ad1@&i/o-file-protection-rtd) (&i/o-filename-rcd . lT2c2c@lT2abe@&i/o-filename-rcd) (&i/o-filename-rtd . lT2c2b@lT2abc@&i/o-filename-rtd) (&i/o-invalid-position-rcd . lT2c22@lT2aa3@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . lT2c21@lT2aa1@&i/o-invalid-position-rtd) (&i/o-write-rcd . lT2c18@lT2a88@&i/o-write-rcd) (&i/o-write-rtd . lT2c17@lT2a86@&i/o-write-rtd) (&i/o-read-rcd . lT2c10@lT2a73@&i/o-read-rcd) (&i/o-read-rtd . lT2c0f@lT2a71@&i/o-read-rtd) (&i/o-rcd . lT2c08@lT2a5e@&i/o-rcd) (&i/o-rtd . lT2c07@lT2a5c@&i/o-rtd) (&undefined-rcd . lT2c00@lT2a49@&undefined-rcd) (&undefined-rtd . lT2bff@lT2a47@&undefined-rtd) (&syntax-rcd . lT2bf8@lT2a34@&syntax-rcd) (&syntax-rtd . lT2bf7@lT2a32@&syntax-rtd) (&lexical-rcd . lT2bec@lT2a13@&lexical-rcd) (&lexical-rtd . lT2beb@lT2a11@&lexical-rtd) (&implementation-restriction-rcd . lT2be4@lT29fe@&implementation-restriction-rcd) (&implementation-restriction-rtd . lT2be3@lT29fc@&implementation-restriction-rtd) (&non-continuable-rcd . lT2bdc@lT29e9@&non-continuable-rcd) (&non-continuable-rtd . lT2bdb@lT29e7@&non-continuable-rtd) (&who-rcd . lT2bd4@lT29d4@&who-rcd) (&who-rtd . lT2bd3@lT29d2@&who-rtd) (&irritants-rcd . lT2bca@lT29b9@&irritants-rcd) (&irritants-rtd . lT2bc9@lT29b7@&irritants-rtd) (&assertion-rcd . lT2bc0@lT299e@&assertion-rcd) (&assertion-rtd . lT2bbf@lT299c@&assertion-rtd) (&violation-rcd . lT2bb8@lT2989@&violation-rcd) (&violation-rtd . lT2bb7@lT2987@&violation-rtd) (&error-rcd . lT2bb0@lT2974@&error-rcd) (&error-rtd . lT2baf@lT2972@&error-rtd) (&serious-rcd . lT2ba8@lT295f@&serious-rcd) (&serious-rtd . lT2ba7@lT295d@&serious-rtd) (&warning-rcd . lT2ba0@lT294a@&warning-rcd) (&warning-rtd . lT2b9f@lT2948@&warning-rtd) (&message-rcd . lT2b98@lT2935@&message-rcd) (&message-rtd . lT2b97@lT2933@&message-rtd) (&condition-rcd . lT2b8e@lT28d6@&condition-rcd) (&condition-rtd . lT2b8d@lT28d4@&condition-rtd) (syntax-error . lT28b0@lTe56@syntax-error) (syntax-dispatch . lT284e@lTd7a@syntax-dispatch) (load . lT2ded@lT2c98@load) (interaction-environment . lT28b9@lTe68@interaction-environment) (library-path . lT977@lT7b3@library-path) (mosh-cache-dir . lT6be@lT59e@mosh-cache-dir) (make-parameter . lT6bd@lT59c@make-parameter) (make-variable-transformer . lT280b@lTba5@make-variable-transformer) (identifier? . lT28b3@lTe5c@identifier?) (generate-temporaries . lT28a9@lTe48@generate-temporaries) (free-identifier=? . lT28aa@lTe4a@free-identifier=?) (syntax->datum . lT28b5@lTe60@syntax->datum) (datum->syntax . lT28b4@lTe5e@datum->syntax) (bound-identifier=? . lT28ab@lTe4c@bound-identifier=?) (make-i/o-write-error . lT2c15@lT2a82@make-i/o-write-error) (make-i/o-read-error . lT2c0d@lT2a6d@make-i/o-read-error) (make-i/o-port-error . lT2c51@lT2b23@make-i/o-port-error) (make-i/o-invalid-position-error . lT2c1d@lT2a99@make-i/o-invalid-position-error) (make-i/o-filename-error . lT2c27@lT2ab4@make-i/o-filename-error) (make-i/o-file-protection-error . lT2c31@lT2acd@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . lT2c39@lT2ae2@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . lT2c49@lT2b0c@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . lT2c41@lT2af7@make-i/o-file-already-exists-error) (make-i/o-error . lT2c05@lT2a58@make-i/o-error) (make-i/o-encoding-error . lT2c63@lT2b53@make-i/o-encoding-error) (make-i/o-decoding-error . lT2c5b@lT2b3c@make-i/o-decoding-error) (i/o-write-error? . lT2c16@lT2a84@i/o-write-error?) (i/o-read-error? . lT2c0e@lT2a6f@i/o-read-error?) (i/o-port-error? . lT2c53@lT2b27@i/o-port-error?) (i/o-invalid-position-error? . lT2c1f@lT2a9d@i/o-invalid-position-error?) (i/o-filename-error? . lT2c29@lT2ab8@i/o-filename-error?) (i/o-file-protection-error? . lT2c32@lT2acf@i/o-file-protection-error?) (i/o-file-is-read-only-error? . lT2c3a@lT2ae4@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . lT2c4a@lT2b0e@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . lT2c42@lT2af9@i/o-file-already-exists-error?) (i/o-error? . lT2c06@lT2a5a@i/o-error?) (i/o-error-position . lT2c20@lT2a9f@i/o-error-position) (i/o-error-port . lT2c54@lT2b29@i/o-error-port) (i/o-error-filename . lT2c2a@lT2aba@i/o-error-filename) (i/o-encoding-error? . lT2c65@lT2b57@i/o-encoding-error?) (i/o-encoding-error-char . lT2c66@lT2b59@i/o-encoding-error-char) (i/o-decoding-error? . lT2c5c@lT2b3e@i/o-decoding-error?) (scheme-report-environment . lT28a0@lTe36@scheme-report-environment) (null-environment . lT289f@lTe34@null-environment) (command-line . lT2dea@lT2c92@command-line) (eval . lT28a2@lTe3a@eval) (environment . lT289e@lTe32@environment) (who-condition? . lT2bd1@lT29ce@who-condition?) (warning? . lT2b9e@lT2946@warning?) (violation? . lT2bb6@lT2985@violation?) (undefined-violation? . lT2bfe@lT2a45@undefined-violation?) (syntax-violation? . lT2bf4@lT2a2c@syntax-violation?) (syntax-violation-subform . lT2bf6@lT2a30@syntax-violation-subform) (syntax-violation-form . lT2bf5@lT2a2e@syntax-violation-form) (syntax-violation . lT28b2@lTe5a@syntax-violation) (serious-condition? . lT2ba6@lT295b@serious-condition?) (non-continuable-violation? . lT2bda@lT29e5@non-continuable-violation?) (message-condition? . lT2b95@lT292f@message-condition?) (make-who-condition . lT2bcf@lT29ca@make-who-condition) (make-warning . lT2b9d@lT2944@make-warning) (make-violation . lT2bb5@lT2983@make-violation) (make-undefined-violation . lT2bfd@lT2a43@make-undefined-violation) (make-syntax-violation . lT2bf1@lT2a26@make-syntax-violation) (make-serious-condition . lT2ba5@lT2959@make-serious-condition) (make-non-continuable-violation . lT2bd9@lT29e3@make-non-continuable-violation) (make-message-condition . lT2b93@lT292b@make-message-condition) (make-lexical-violation . lT2be9@lT2a0d@make-lexical-violation) (make-irritants-condition . lT2bc5@lT29af@make-irritants-condition) (make-implementation-restriction-violation . lT2be1@lT29f8@make-implementation-restriction-violation) (make-error . lT2bad@lT296e@make-error) (make-assertion-violation . lT2bbd@lT2998@make-assertion-violation) (lexical-violation? . lT2bea@lT2a0f@lexical-violation?) (irritants-condition? . lT2bc7@lT29b3@irritants-condition?) (implementation-restriction-violation? . lT2be2@lT29fa@implementation-restriction-violation?) (error? . lT2bae@lT2970@error?) (condition-who . lT2bd2@lT29d0@condition-who) (condition-message . lT2b96@lT2931@condition-message) (condition-irritants . lT2bc8@lT29b5@condition-irritants) (assertion-violation? . lT2bbe@lT299a@assertion-violation?) (no-nans-violation? . lT2c76@lT2b83@no-nans-violation?) (no-infinities-violation? . lT2c6e@lT2b6e@no-infinities-violation?) (make-no-nans-violation . lT2c75@lT2b81@make-no-nans-violation) (make-no-infinities-violation . lT2c6d@lT2b6c@make-no-infinities-violation) (assertion-error . lT28af@lTe54@assertion-error))))) (if lT3147@t (cdr lT3147@t) '#f)))) (lT987@lT7d3@install-library 'lT3122 '(mosh interaction) '() '() '() '() '((regexp? . lT311a) (alist->eq-hash-table . lT3116) (format . lT3113) (string-split . lT3108) (call-process . lT3102) (set-current-directory! . lT30fe) (expand-path . lT30fd) (current-directory . lT30fc) (%spawn . lT30fb) (%waitpid . lT30fa) (simple-struct-name . lT30f9) (simple-struct-set! . lT30f8) (simple-struct-ref . lT30f7) (make-simple-struct . lT30f6) (simple-struct? . lT30f5) (pointer-ref-c-int64 . lT30f4) (pointer-ref-c-int32 . lT30f3) (pointer-ref-c-int16 . lT30f2) (pointer-ref-c-int8 . lT30f1) (pointer-ref-c-uint64 . lT30f0) (pointer-ref-c-uint32 . lT30ef) (pointer-ref-c-uint16 . lT30ee) (pointer-ref-c-uint8 . lT30ed) (pointer-set-c-uint64! . lT30ec) (pointer-set-c-uint32! . lT30eb) (pointer-set-c-uint16! . lT30ea) (pointer-set-c-uint8! . lT30e9) (pointer-set-c-int64! . lT30e8) (pointer-set-c-int32! . lT30e7) (pointer-set-c-int16! . lT30e6) (pointer-set-c-int8! . lT30e5) (pointer-set-c-pointer! . lT30e4) (pointer-set-c-double! . lT30e3) (pointer-set-c-float! . lT30e2) (pointer-set-c-long-long! . lT30e1) (pointer-set-c-long! . lT30e0) (pointer-set-c-int! . lT30df) (pointer-set-c-short! . lT30de) (pointer-set-c-char! . lT30dd) (pointer-ref-c-pointer . lT30dc) (pointer-ref-c-double . lT30db) (pointer-ref-c-float . lT30da) (pointer-ref-c-unsigned-long-long . lT30d9) (pointer-ref-c-signed-long-long . lT30d8) (pointer-ref-c-unsigned-long . lT30d7) (pointer-ref-c-signed-long . lT30d6) (pointer-ref-c-unsigned-int . lT30d5) (pointer-ref-c-signed-int . lT30d4) (pointer-ref-c-unsigned-short . lT30d3) (pointer-ref-c-signed-short . lT30d2) (pointer-ref-c-unsigned-char . lT30d1) (pointer-ref-c-signed-char . lT30d0) (pointer->integer . lT30cf) (integer->pointer . lT30ce) (pointer? . lT30cd) (shared-errno . lT30cc) (%ffi-supported? . lT30c9) (%ffi-pointer->string . lT30c8) (%ffi-call->string-or-zero . lT30c7) (%ffi-call->double . lT30c6) (%ffi-call->void* . lT30c5) (%ffi-call->void . lT30c4) (%ffi-call->char . lT30c3) (%ffi-call->int . lT30c2) (%ffi-lookup . lT30c1) (%ffi-open . lT30c0) (%fork . lT30bf) (%pipe . lT30be) (p . lT30bd) (whereis . lT30a1) (register . lT30a0) (vm-join! . lT309f) (vm-set-value! . lT309e) (vm? . lT309d) (main-vm? . lT309c) (vm-eval . lT309b) (vm-self . lT309a) (vm-start! . lT3099) (make-vm . lT3098) (mutex-try-lock! . lT3097) (mutex-unlock! . lT3096) (mutex-lock! . lT3095) (mutex? . lT3094) (make-mutex . lT3093) (condition-variable-notify-all! . lT3092) (condition-variable-notify! . lT3091) (condition-variable-wait! . lT3090) (make-condition-variable . lT308f) (string-upcase . lT3077) (string-titlecase . lT3076) (string-normalize-nfkd . lT3075) (string-normalize-nfkc . lT3074) (string-normalize-nfd . lT3073) (string-normalize-nfc . lT3072) (string-foldcase . lT3071) (string-downcase . lT3070) (string-ci>? . lT306f) (string-ci>=? . lT306e) (string-ci=? . lT306d) (string-ci<? . lT306c) (string-ci<=? . lT306b) (char-whitespace? . lT306a) (char-upper-case? . lT3069) (char-title-case? . lT3068) (char-numeric? . lT3067) (char-lower-case? . lT3066) (char-general-category . lT3065) (char-upcase . lT3064) (char-titlecase . lT3063) (char-foldcase . lT3062) (char-downcase . lT3061) (char-ci>? . lT3060) (char-ci>=? . lT305f) (char-ci=? . lT305e) (char-ci<? . lT305d) (char-ci<=? . lT305c) (char-alphabetic? . lT305b) (make-variable-transformer . lTba4) (identifier? . lTe5b) (generate-temporaries . lTe47) (free-identifier=? . lTe49) (syntax->datum . lTe5f) (datum->syntax . lTe5d) (bound-identifier=? . lTe4b) (record-type-descriptor? . lT305a) (record-predicate . lT3059) (record-mutator . lT3058) (record-constructor . lT3057) (record-accessor . lT3056) (make-record-type-descriptor . lT3055) (make-record-constructor-descriptor . lT3054) (record? . lT3053) (record-type-uid . lT3052) (record-type-sealed? . lT3051) (record-type-parent . lT3050) (record-type-opaque? . lT304f) (record-type-name . lT304e) (record-type-generative? . lT304d) (record-type-field-names . lT304c) (record-rtd . lT304b) (record-field-mutable? . lT304a) (delete-file . lT3049) (file-exists? . lT3048) (vector-sort! . lT3047) (vector-sort . lT3046) (list-sort . lT3045) (symbol-hash . lT3044) (string-ci-hash . lT3043) (string-hash . lT3042) (equal-hash . lT3041) (hashtable-equivalence-function . lT3040) (make-hashtable . lT303f) (hashtable-hash-function . lT303e) (make-eqv-hashtable . lT303d) (make-eq-hashtable . lT303c) (hashtable? . lT303b) (hashtable-update! . lT303a) (hashtable-size . lT3039) (hashtable-set! . lT3038) (hashtable-ref . lT3037) (hashtable-mutable? . lT3036) (hashtable-keys . lT3035) (hashtable-entries . lT3034) (hashtable-delete! . lT3033) (hashtable-copy . lT3032) (hashtable-contains? . lT3031) (hashtable-clear! . lT3030) (call-with-output-file . lT302f) (call-with-input-file . lT302e) (write-char . lT302d) (write . lT302c) (with-output-to-file . lT302b) (with-input-from-file . lT302a) (read-char . lT3029) (read . lT3028) (peek-char . lT3027) (open-output-file . lT3026) (open-input-file . lT3025) (newline . lT3024) (display . lT3023) (close-output-port . lT3022) (close-input-port . lT3021) (eof-object? . lT3020) (eof-object . lT301f) (current-error-port . lT301e) (current-output-port . lT301d) (current-input-port . lT301c) (output-port? . lT301b) (input-port? . lT301a) (utf-8-codec . lT3019) (utf-16-codec . lT3018) (transcoder-error-handling-mode . lT3017) (transcoder-eol-style . lT3016) (transcoder-codec . lT3015) (transcoded-port . lT3014) (textual-port? . lT3013) (string->bytevector . lT3012) (standard-output-port . lT3011) (standard-input-port . lT3010) (standard-error-port . lT300f) (set-port-position! . lT300e) (put-u8 . lT300d) (put-string . lT300c) (put-datum . lT300b) (put-char . lT300a) (put-bytevector . lT3009) (port? . lT3008) (port-transcoder . lT3007) (port-position . lT3006) (port-has-set-port-position!? . lT3005) (port-has-port-position? . lT3004) (port-eof? . lT3003) (output-port-buffer-mode . lT3002) (open-string-output-port . lT3001) (open-string-input-port . lT3000) (open-file-output-port . lT2fff) (open-file-input/output-port . lT2ffe) (open-file-input-port . lT2ffd) (open-bytevector-output-port . lT2ffc) (open-bytevector-input-port . lT2ffb) (native-transcoder . lT2ffa) (native-eol-style . lT2ff9) (make-transcoder . lT2ff8) (latin-1-codec . lT2ff7) (make-i/o-write-error . lT2a81) (make-i/o-read-error . lT2a6c) (make-i/o-port-error . lT2b22) (make-i/o-invalid-position-error . lT2a98) (make-i/o-filename-error . lT2ab3) (make-i/o-file-protection-error . lT2acc) (make-i/o-file-is-read-only-error . lT2ae1) (make-i/o-file-does-not-exist-error . lT2b0b) (make-i/o-file-already-exists-error . lT2af6) (make-i/o-error . lT2a57) (make-i/o-encoding-error . lT2b52) (make-i/o-decoding-error . lT2b3b) (make-custom-textual-output-port . lT2ff6) (make-custom-textual-input/output-port . lT2ff5) (make-custom-textual-input-port . lT2ff4) (make-custom-binary-output-port . lT2ff3) (make-custom-binary-input/output-port . lT2ff2) (make-custom-binary-input-port . lT2ff1) (make-bytevector . lT2ff0) (lookahead-u8 . lT2fef) (lookahead-char . lT2fee) (i/o-write-error? . lT2a83) (i/o-read-error? . lT2a6e) (i/o-port-error? . lT2b26) (i/o-invalid-position-error? . lT2a9c) (i/o-filename-error? . lT2ab7) (i/o-file-protection-error? . lT2ace) (i/o-file-is-read-only-error? . lT2ae3) (i/o-file-does-not-exist-error? . lT2b0d) (i/o-file-already-exists-error? . lT2af8) (i/o-error? . lT2a59) (i/o-error-position . lT2a9e) (i/o-error-port . lT2b28) (i/o-error-filename . lT2ab9) (i/o-encoding-error? . lT2b56) (i/o-encoding-error-char . lT2b58) (i/o-decoding-error? . lT2b3d) (get-u8 . lT2fed) (get-string-n! . lT2fec) (get-string-n . lT2feb) (get-string-all . lT2fea) (get-line . lT2fe9) (get-datum . lT2fe8) (get-char . lT2fe7) (get-bytevector-some . lT2fe6) (get-bytevector-n! . lT2fe5) (get-bytevector-n . lT2fe4) (get-bytevector-all . lT2fe3) (flush-output-port . lT2fe2) (close-port . lT2fe1) (exit . lT2fd9) (command-line . lT2c91) (string-fill! . lT2fd8) (string-set! . lT2fd7) (set-cdr! . lT2fd6) (set-car! . lT2fd5) (remove . lT2fd4) (remv . lT2fd3) (remp . lT2fd2) (remq . lT2fd1) (partition . lT2fd0) (memv . lT2fcf) (memq . lT2fce) (memp . lT2fcd) (member . lT2fcc) (exists . lT2fcb) (for-all . lT2fca) (fold-right . lT2fc9) (fold-left . lT2fc8) (find . lT2fc7) (filter . lT2fc6) (cons* . lT2fc5) (assv . lT2fc4) (assq . lT2fc3) (assp . lT2fc2) (assoc . lT2fc1) (call-with-string-output-port . lT2fc0) (call-with-port . lT2fbf) (call-with-bytevector-output-port . lT2fbe) (bytevector->string . lT2fbd) (buffer-mode? . lT2fbc) (binary-port? . lT2fbb) (with-exception-handler . lT2fba) (raise-continuable . lT2fb9) (raise . lT2fb8) (eval . lTe39) (environment . lTe31) (make-enumeration . lT2fb7) (enum-set=? . lT2fb6) (enum-set-universe . lT2fb5) (enum-set-union . lT2fb4) (enum-set-subset? . lT2fb3) (enum-set-projection . lT2fb2) (enum-set-member? . lT2fb1) (enum-set-intersection . lT2fb0) (enum-set-indexer . lT2faf) (enum-set-difference . lT2fae) (enum-set-constructor . lT2fad) (enum-set-complement . lT2fac) (enum-set->list . lT2fab) (who-condition? . lT29cd) (warning? . lT2945) (violation? . lT2984) (undefined-violation? . lT2a44) (syntax-violation? . lT2a2b) (syntax-violation-subform . lT2a2f) (syntax-violation-form . lT2a2d) (syntax-violation . lTe59) (simple-conditions . lT2faa) (serious-condition? . lT295a) (non-continuable-violation? . lT29e4) (message-condition? . lT292e) (make-who-condition . lT29c9) (make-warning . lT2943) (make-violation . lT2982) (make-undefined-violation . lT2a42) (make-syntax-violation . lT2a25) (make-serious-condition . lT2958) (make-non-continuable-violation . lT29e2) (make-message-condition . lT292a) (make-lexical-violation . lT2a0c) (make-irritants-condition . lT29ae) (make-implementation-restriction-violation . lT29f7) (make-error . lT296d) (make-assertion-violation . lT2997) (lexical-violation? . lT2a0e) (irritants-condition? . lT29b2) (implementation-restriction-violation? . lT29f9) (error? . lT296f) (condition-who . lT29cf) (condition-predicate . lT2fa9) (condition-message . lT2930) (condition-irritants . lT29b4) (condition-accessor . lT2fa8) (condition . lT2fa7) (assertion-violation? . lT2999) (condition? . lT2fa6) (utf32->string . lT2fa5) (utf16->string . lT2fa4) (utf8->string . lT2fa3) (uint-list->bytevector . lT2fa2) (u8-list->bytevector . lT2fa1) (string->utf8 . lT2fa0) (string->utf32 . lT2f9f) (string->utf16 . lT2f9e) (sint-list->bytevector . lT2f9d) (native-endianness . lT2f9c) (bytevector? . lT2f9b) (bytevector=? . lT2f9a) (bytevector-uint-set! . lT2f99) (bytevector-uint-ref . lT2f98) (bytevector-u8-set! . lT2f97) (bytevector-u8-ref . lT2f96) (bytevector-u64-set! . lT2f95) (bytevector-u64-ref . lT2f94) (bytevector-u64-native-set! . lT2f93) (bytevector-u64-native-ref . lT2f92) (bytevector-u32-set! . lT2f91) (bytevector-u32-ref . lT2f90) (bytevector-u32-native-set! . lT2f8f) (bytevector-u32-native-ref . lT2f8e) (bytevector-u16-set! . lT2f8d) (bytevector-u16-ref . lT2f8c) (bytevector-u16-native-set! . lT2f8b) (bytevector-u16-native-ref . lT2f8a) (bytevector-sint-set! . lT2f89) (bytevector-sint-ref . lT2f88) (bytevector-s8-set! . lT2f87) (bytevector-s8-ref . lT2f86) (bytevector-s64-set! . lT2f85) (bytevector-s64-ref . lT2f84) (bytevector-s64-native-set! . lT2f83) (bytevector-s64-native-ref . lT2f82) (bytevector-s32-set! . lT2f81) (bytevector-s32-ref . lT2f80) (bytevector-s32-native-set! . lT2f7f) (bytevector-s32-native-ref . lT2f7e) (bytevector-s16-set! . lT2f7d) (bytevector-s16-ref . lT2f7c) (bytevector-s16-native-set! . lT2f7b) (bytevector-s16-native-ref . lT2f7a) (bytevector-length . lT2f79) (bytevector-ieee-single-ref . lT2f78) (bytevector-ieee-single-set! . lT2f77) (bytevector-ieee-single-native-set! . lT2f76) (bytevector-ieee-single-native-ref . lT2f75) (bytevector-ieee-double-set! . lT2f74) (bytevector-ieee-double-ref . lT2f73) (bytevector-ieee-double-native-set! . lT2f72) (bytevector-ieee-double-native-ref . lT2f71) (bytevector-fill! . lT2f70) (bytevector-copy! . lT2f6f) (bytevector-copy . lT2f6e) (bytevector->uint-list . lT2f6d) (bytevector->u8-list . lT2f6c) (bytevector->sint-list . lT2f6b) (no-nans-violation? . lT2b82) (no-infinities-violation? . lT2b6d) (make-no-nans-violation . lT2b80) (make-no-infinities-violation . lT2b6b) (real->flonum . lT2f6a) (flzero? . lT2f69) (fltruncate . lT2f68) (fltan . lT2f67) (flsqrt . lT2f66) (flsin . lT2f65) (flround . lT2f64) (flpositive? . lT2f63) (flonum? . lT2f62) (flodd? . lT2f61) (flnumerator . lT2f60) (flnegative? . lT2f5f) (flnan? . lT2f5e) (flmod0 . lT2f5d) (flmod . lT2f5c) (flmin . lT2f5b) (flmax . lT2f5a) (fllog . lT2f59) (flinteger? . lT2f58) (flinfinite? . lT2f57) (flfloor . lT2f56) (flfinite? . lT2f55) (flexpt . lT2f54) (flexp . lT2f53) (fleven? . lT2f52) (fldiv0-and-mod0 . lT2f51) (fldiv0 . lT2f50) (fldiv-and-mod . lT2f4f) (fldiv . lT2f4e) (fldenominator . lT2f4d) (flcos . lT2f4c) (flceiling . lT2f4b) (flatan . lT2f4a) (flasin . lT2f49) (flacos . lT2f48) (flabs . lT2f47) (fl>? . lT2f46) (fl>=? . lT2f45) (fl=? . lT2f44) (fl<? . lT2f43) (fl<=? . lT2f42) (fl/ . lT2f41) (fl- . lT2f40) (fl+ . lT2f3f) (fl* . lT2f3e) (fixnum->flonum . lT2f3d) (fxzero? . lT2f3c) (fxxor . lT2f3b) (fxrotate-bit-field . lT2f3a) (fxreverse-bit-field . lT2f39) (fxpositive? . lT2f38) (fxodd? . lT2f37) (fxnot . lT2f36) (fxnegative? . lT2f35) (fxmod0 . lT2f34) (fxmod . lT2f33) (fxmin . lT2f32) (fxmax . lT2f31) (fxlength . lT2f30) (fxior . lT2f2f) (fxif . lT2f2e) (fxfirst-bit-set . lT2f2d) (fxeven? . lT2f2c) (fxdiv0-and-mod0 . lT2f2b) (fxdiv0 . lT2f2a) (fxdiv-and-mod . lT2f29) (fxdiv . lT2f28) (fxcopy-bit-field . lT2f27) (fxcopy-bit . lT2f26) (fxbit-set? . lT2f25) (fxbit-field . lT2f24) (fxbit-count . lT2f23) (fxarithmetic-shift-right . lT2f22) (fxarithmetic-shift-left . lT2f21) (fxarithmetic-shift . lT2f20) (fxand . lT2f1f) (fx>? . lT2f1e) (fx>=? . lT2f1d) (fx=? . lT2f1c) (fx<? . lT2f1b) (fx<=? . lT2f1a) (fx-/carry . lT2f19) (fx- . lT2f18) (fx+/carry . lT2f17) (fx+ . lT2f16) (fx*/carry . lT2f15) (fx* . lT2f14) (greatest-fixnum . lT2f13) (least-fixnum . lT2f12) (fixnum-width . lT2f11) (fixnum? . lT2f10) (bitwise-rotate-bit-field . lT2f0f) (bitwise-reverse-bit-field . lT2f0e) (bitwise-length . lT2f0d) (bitwise-if . lT2f0c) (bitwise-first-bit-set . lT2f0b) (bitwise-copy-bit-field . lT2f0a) (bitwise-copy-bit . lT2f09) (bitwise-bit-set? . lT2f08) (bitwise-bit-field . lT2f07) (bitwise-bit-count . lT2f06) (bitwise-xor . lT2f05) (bitwise-ior . lT2f04) (bitwise-and . lT2f03) (bitwise-not . lT2f02) (bitwise-arithmetic-shift-right . lT2f01) (bitwise-arithmetic-shift-left . lT2f00) (bitwise-arithmetic-shift . lT2eff) (zero? . lT2efe) (vector? . lT2efd) (vector-set! . lT2efc) (vector-ref . lT2efb) (vector-map . lT2efa) (vector-length . lT2ef9) (vector-for-each . lT2ef8) (vector-fill! . lT2ef7) (vector->list . lT2ef6) (vector . lT2ef5) (values . lT2ef4) (truncate . lT2ef3) (tan . lT2ef2) (symbol? . lT2ef1) (symbol=? . lT2ef0) (symbol->string . lT2eef) (substring . lT2eee) (string? . lT2eed) (string>? . lT2eec) (string>=? . lT2eeb) (string=? . lT2eea) (string<? . lT2ee9) (string<=? . lT2ee8) (string-ref . lT2ee7) (string-length . lT2ee6) (string-for-each . lT2ee5) (string-copy . lT2ee4) (string-append . lT2ee3) (string->symbol . lT2ee2) (string->number . lT2ee1) (string->list . lT2ee0) (string . lT2edf) (sqrt . lT2ede) (sin . lT2edd) (round . lT2edc) (reverse . lT2edb) (real? . lT2eda) (real-valued? . lT2ed9) (real-part . lT2ed8) (rationalize . lT2ed7) (rational? . lT2ed6) (rational-valued? . lT2ed5) (procedure? . lT2ed4) (positive? . lT2ed3) (pair? . lT2ed2) (odd? . lT2ed1) (numerator . lT2ed0) (number? . lT2ecf) (number->string . lT2ece) (null? . lT2ecd) (not . lT2ecc) (negative? . lT2ecb) (nan? . lT2eca) (min . lT2ec9) (max . lT2ec8) (map . lT2ec7) (make-vector . lT2ec6) (make-string . lT2ec5) (make-rectangular . lT2ec4) (make-polar . lT2ec3) (magnitude . lT2ec2) (log . lT2ec1) (list? . lT2ec0) (list-tail . lT2ebf) (list-ref . lT2ebe) (list->vector . lT2ebd) (list->string . lT2ebc) (list . lT2ebb) (length . lT2eba) (lcm . lT2eb9) (integer? . lT2eb8) (integer-valued? . lT2eb7) (integer->char . lT2eb6) (infinite? . lT2eb5) (inexact? . lT2eb4) (inexact . lT2eb3) (imag-part . lT2eb2) (gcd . lT2eb1) (for-each . lT2eb0) (floor . lT2eaf) (finite? . lT2eae) (expt . lT2ead) (exp . lT2eac) (exact? . lT2eab) (exact-integer-sqrt . lT2eaa) (exact . lT2ea9) (even? . lT2ea8) (error . lT2ea7) (eqv? . lT2ea6) (equal? . lT2ea5) (eq? . lT2ea4) (dynamic-wind . lT2ea3) (div0-and-mod0 . lT2ea2) (mod0 . lT2ea1) (div0 . lT2ea0) (div-and-mod . lT2e9f) (mod . lT2e9e) (div . lT2e9d) (denominator . lT2e9c) (cos . lT2e9b) (cons . lT2e9a) (complex? . lT2e99) (char? . lT2e98) (char>? . lT2e97) (char>=? . lT2e96) (char=? . lT2e95) (char<? . lT2e94) (char<=? . lT2e93) (char->integer . lT2e92) (ceiling . lT2e91) (call-with-values . lT2e90) (call/cc . lT2e8f) (call-with-current-continuation . lT2e8e) (cddddr . lT2e8d) (cdddar . lT2e8c) (cddadr . lT2e8b) (cddaar . lT2e8a) (cdaddr . lT2e89) (cdadar . lT2e88) (cdaadr . lT2e87) (cdaaar . lT2e86) (cadddr . lT2e85) (caddar . lT2e84) (cadadr . lT2e83) (cadaar . lT2e82) (caaddr . lT2e81) (caadar . lT2e80) (caaadr . lT2e7f) (caaaar . lT2e7e) (cdddr . lT2e7d) (cddar . lT2e7c) (cdadr . lT2e7b) (cdaar . lT2e7a) (caddr . lT2e79) (cadar . lT2e78) (caadr . lT2e77) (caaar . lT2e76) (cddr . lT2e75) (cdar . lT2e74) (cadr . lT2e73) (caar . lT2e72) (cdr . lT2e71) (car . lT2e70) (boolean? . lT2e6f) (boolean=? . lT2e6e) (atan . lT2e6d) (assertion-violation . lT2e6c) (asin . lT2e6b) (apply . lT2e6a) (append . lT2e69) (angle . lT2e68) (acos . lT2e67) (abs . lT2e66) (/ . lT2e65) (* . lT2e64) (- . lT2e63) (+ . lT2e62) (>= . lT2e61) (> . lT2e60) (= . lT2e5f) (<= . lT2e5e) (< . lT2e5d) (library . lT2e5c) (&no-nans . lT2e5b) (&no-infinities . lT2e5a) (&i/o-encoding . lT2e59) (&i/o-decoding . lT2e58) (&i/o-port . lT2e57) (&i/o-file-does-not-exist . lT2e56) (&i/o-file-already-exists . lT2e55) (&i/o-file-is-read-only . lT2e54) (&i/o-file-protection . lT2e53) (&i/o-filename . lT2e52) (&i/o-invalid-position . lT2e51) (&i/o-write . lT2e50) (&i/o-read . lT2e4f) (&i/o . lT2e4e) (&undefined . lT2e4d) (&syntax . lT2e4c) (&lexical . lT2e4b) (&implementation-restriction . lT2e4a) (&non-continuable . lT2e49) (&who . lT2e48) (&irritants . lT2e47) (&assertion . lT2e46) (&violation . lT2e45) (&error . lT2e44) (&serious . lT2e43) (&warning . lT2e42) (&message . lT2e41) (&condition . lT2e40) (define-condition-type . lT2e3f) (define-enumeration . lT2e3e) (define-record-type . lT2e3d) (parent-rtd . lT2e3c) (nongenerative . lT2e3b) (opaque . lT2e3a) (sealed . lT2e39) (protocol . lT2e38) (parent . lT2e37) (immutable . lT2e36) (mutable . lT2e35) (fields . lT2e34) (error-handling-mode . lT2e33) (file-options . lT2e32) (buffer-mode . lT2e31) (eol-style . lT2e30) (guard . lT2e2f) (unsyntax-splicing . lT2e2c) (unsyntax . lT2e2b) (unquote-splicing . lT2e2a) (unquote . lT2e29) (_ . lT2e28) (else . lT2e27) (=> . lT2e26) (... . lT2e25) (assert . lT2e24) (endianness . lT2e23) (time . lT2e21) (do . lT2e20) (cond . lT2e1f) (let* . lT2e1e) (let . lT2e1d) (let*-values . lT2e1c) (let-values . lT2e1b) (identifier-syntax . lT2e1a) (with-syntax . lT2e19) (quasisyntax . lT2e18) (quasiquote . lT2e17) (syntax-rules . lT2e16) (include . lT2e15) (record-constructor-descriptor . lT2e13) (record-type-descriptor . lT2e12) (case . lT2e11) (unless . lT2e0f) (when . lT2e0e) (or . lT2e0d) (and . lT2e0c) (if . lT2e0b) (let . lT2e0a) (letrec* . lT2e09) (letrec . lT2e08) (case-lambda . lT2e06) (lambda . lT2e05) (syntax . lT2e04) (syntax-case . lT2e03) (quote . lT2e02) (letrec-syntax . lT2e00) (let-syntax . lT2dff) (set! . lT2dfe) (import . lT2dfd) (begin . lT2dfc) (define-syntax . lT2dfa) (define . lT2df9)) '() values values '#f '#f '#t '#f) (lT987@lT7d3@install-library 'lT3123 '(psyntax null-environment-5) '() '() '() '() '((make-promise . lT2fda) (unquote-splicing . lT2e2a) (unquote . lT2e29) (_ . lT2e28) (else . lT2e27) (=> . lT2e26) (... . lT2e25) (delay . lT2e22) (do . lT2e20) (cond . lT2e1f) (let* . lT2e1e) (let . lT2e1d) (quasiquote . lT2e17) (syntax-rules . lT2e16) (case . lT2e11) (or . lT2e0d) (and . lT2e0c) (if . lT2e0b) (let . lT2e0a) (letrec . lT2e08) (lambda . lT2e05) (quote . lT2e02) (letrec-syntax . lT2e00) (let-syntax . lT2dff) (set! . lT2dfe) (begin . lT2dfc) (define-syntax . lT2dfa) (define . lT2df9)) '() values values '#f '#f '#t '#f) (lT987@lT7d3@install-library 'lT3124 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . lT306f) (string-ci>=? . lT306e) (string-ci=? . lT306d) (string-ci<? . lT306c) (string-ci<=? . lT306b) (char-whitespace? . lT306a) (char-upper-case? . lT3069) (char-numeric? . lT3067) (char-lower-case? . lT3066) (char-upcase . lT3064) (char-downcase . lT3061) (char-ci>? . lT3060) (char-ci>=? . lT305f) (char-ci=? . lT305e) (char-ci<? . lT305d) (char-ci<=? . lT305c) (char-alphabetic? . lT305b) (call-with-output-file . lT302f) (call-with-input-file . lT302e) (write-char . lT302d) (write . lT302c) (with-output-to-file . lT302b) (with-input-from-file . lT302a) (read-char . lT3029) (read . lT3028) (peek-char . lT3027) (open-output-file . lT3026) (open-input-file . lT3025) (newline . lT3024) (display . lT3023) (close-output-port . lT3022) (close-input-port . lT3021) (eof-object . lT301f) (current-output-port . lT301d) (current-input-port . lT301c) (output-port? . lT301b) (input-port? . lT301a) (scheme-report-environment . lTe35) (quotient . lT2fe0) (null-environment . lTe33) (remainder . lT2fdf) (modulo . lT2fde) (inexact->exact . lT2fdd) (force . lT2fdc) (exact->inexact . lT2fdb) (make-promise . lT2fda) (string-fill! . lT2fd8) (string-set! . lT2fd7) (set-cdr! . lT2fd6) (set-car! . lT2fd5) (memv . lT2fcf) (memq . lT2fce) (member . lT2fcc) (assv . lT2fc4) (assq . lT2fc3) (assoc . lT2fc1) (eval . lTe39) (zero? . lT2efe) (vector? . lT2efd) (vector-set! . lT2efc) (vector-ref . lT2efb) (vector-length . lT2ef9) (vector-fill! . lT2ef7) (vector->list . lT2ef6) (vector . lT2ef5) (values . lT2ef4) (truncate . lT2ef3) (tan . lT2ef2) (symbol? . lT2ef1) (symbol->string . lT2eef) (substring . lT2eee) (string? . lT2eed) (string>? . lT2eec) (string>=? . lT2eeb) (string=? . lT2eea) (string<? . lT2ee9) (string<=? . lT2ee8) (string-ref . lT2ee7) (string-length . lT2ee6) (string-copy . lT2ee4) (string-append . lT2ee3) (string->symbol . lT2ee2) (string->number . lT2ee1) (string->list . lT2ee0) (string . lT2edf) (sqrt . lT2ede) (sin . lT2edd) (round . lT2edc) (reverse . lT2edb) (real? . lT2eda) (real-part . lT2ed8) (rationalize . lT2ed7) (rational? . lT2ed6) (procedure? . lT2ed4) (positive? . lT2ed3) (pair? . lT2ed2) (odd? . lT2ed1) (numerator . lT2ed0) (number? . lT2ecf) (number->string . lT2ece) (not . lT2ecc) (negative? . lT2ecb) (min . lT2ec9) (max . lT2ec8) (map . lT2ec7) (make-vector . lT2ec6) (make-string . lT2ec5) (make-rectangular . lT2ec4) (make-polar . lT2ec3) (magnitude . lT2ec2) (log . lT2ec1) (list? . lT2ec0) (list-tail . lT2ebf) (list-ref . lT2ebe) (list->vector . lT2ebd) (list->string . lT2ebc) (list . lT2ebb) (length . lT2eba) (lcm . lT2eb9) (integer? . lT2eb8) (integer->char . lT2eb6) (inexact? . lT2eb4) (imag-part . lT2eb2) (gcd . lT2eb1) (for-each . lT2eb0) (floor . lT2eaf) (expt . lT2ead) (exp . lT2eac) (exact? . lT2eab) (even? . lT2ea8) (eqv? . lT2ea6) (equal? . lT2ea5) (eq? . lT2ea4) (dynamic-wind . lT2ea3) (denominator . lT2e9c) (cos . lT2e9b) (cons . lT2e9a) (complex? . lT2e99) (char? . lT2e98) (char>? . lT2e97) (char>=? . lT2e96) (char=? . lT2e95) (char<? . lT2e94) (char<=? . lT2e93) (char->integer . lT2e92) (ceiling . lT2e91) (call-with-values . lT2e90) (call-with-current-continuation . lT2e8e) (cddddr . lT2e8d) (cdddar . lT2e8c) (cddadr . lT2e8b) (cddaar . lT2e8a) (cdaddr . lT2e89) (cdadar . lT2e88) (cdaadr . lT2e87) (cdaaar . lT2e86) (cadddr . lT2e85) (caddar . lT2e84) (cadadr . lT2e83) (cadaar . lT2e82) (caaddr . lT2e81) (caadar . lT2e80) (caaadr . lT2e7f) (caaaar . lT2e7e) (cdddr . lT2e7d) (cddar . lT2e7c) (cdadr . lT2e7b) (cdaar . lT2e7a) (caddr . lT2e79) (cadar . lT2e78) (caadr . lT2e77) (caaar . lT2e76) (cddr . lT2e75) (cdar . lT2e74) (cadr . lT2e73) (caar . lT2e72) (cdr . lT2e71) (car . lT2e70) (boolean? . lT2e6f) (atan . lT2e6d) (asin . lT2e6b) (apply . lT2e6a) (append . lT2e69) (angle . lT2e68) (acos . lT2e67) (abs . lT2e66) (/ . lT2e65) (* . lT2e64) (- . lT2e63) (+ . lT2e62) (>= . lT2e61) (> . lT2e60) (= . lT2e5f) (<= . lT2e5e) (< . lT2e5d) (unquote-splicing . lT2e2a) (unquote . lT2e29) (else . lT2e27) (=> . lT2e26) (... . lT2e25) (delay . lT2e22) (do . lT2e20) (cond . lT2e1f) (let* . lT2e1e) (let . lT2e1d) (quasiquote . lT2e17) (syntax-rules . lT2e16) (case . lT2e11) (or . lT2e0d) (and . lT2e0c) (if . lT2e0b) (let . lT2e0a) (letrec . lT2e08) (lambda . lT2e05) (quote . lT2e02) (letrec-syntax . lT2e00) (let-syntax . lT2dff) (set! . lT2dfe) (begin . lT2dfc) (define-syntax . lT2dfa) (define . lT2df9)) '() values values '#f '#f '#t '#f) (lT987@lT7d3@install-library 'lT3125 '(psyntax modules) '() '() '() '() '((module . lT2dfb)) '() values values '#f '#f '#t '#f) (lT987@lT7d3@install-library 'lT3126 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (lT987@lT7d3@install-library 'lT3127 '(rnrs) '(6) '() '() '() '((regexp? . lT311a) (string-upcase . lT3077) (string-titlecase . lT3076) (string-normalize-nfkd . lT3075) (string-normalize-nfkc . lT3074) (string-normalize-nfd . lT3073) (string-normalize-nfc . lT3072) (string-foldcase . lT3071) (string-downcase . lT3070) (string-ci>? . lT306f) (string-ci>=? . lT306e) (string-ci=? . lT306d) (string-ci<? . lT306c) (string-ci<=? . lT306b) (char-whitespace? . lT306a) (char-upper-case? . lT3069) (char-title-case? . lT3068) (char-numeric? . lT3067) (char-lower-case? . lT3066) (char-general-category . lT3065) (char-upcase . lT3064) (char-titlecase . lT3063) (char-foldcase . lT3062) (char-downcase . lT3061) (char-ci>? . lT3060) (char-ci>=? . lT305f) (char-ci=? . lT305e) (char-ci<? . lT305d) (char-ci<=? . lT305c) (char-alphabetic? . lT305b) (make-variable-transformer . lTba4) (identifier? . lTe5b) (generate-temporaries . lTe47) (free-identifier=? . lTe49) (syntax->datum . lTe5f) (datum->syntax . lTe5d) (bound-identifier=? . lTe4b) (record-type-descriptor? . lT305a) (record-predicate . lT3059) (record-mutator . lT3058) (record-constructor . lT3057) (record-accessor . lT3056) (make-record-type-descriptor . lT3055) (make-record-constructor-descriptor . lT3054) (record? . lT3053) (record-type-uid . lT3052) (record-type-sealed? . lT3051) (record-type-parent . lT3050) (record-type-opaque? . lT304f) (record-type-name . lT304e) (record-type-generative? . lT304d) (record-type-field-names . lT304c) (record-rtd . lT304b) (record-field-mutable? . lT304a) (delete-file . lT3049) (file-exists? . lT3048) (vector-sort! . lT3047) (vector-sort . lT3046) (list-sort . lT3045) (symbol-hash . lT3044) (string-ci-hash . lT3043) (string-hash . lT3042) (equal-hash . lT3041) (hashtable-equivalence-function . lT3040) (make-hashtable . lT303f) (hashtable-hash-function . lT303e) (make-eqv-hashtable . lT303d) (make-eq-hashtable . lT303c) (hashtable? . lT303b) (hashtable-update! . lT303a) (hashtable-size . lT3039) (hashtable-set! . lT3038) (hashtable-ref . lT3037) (hashtable-mutable? . lT3036) (hashtable-keys . lT3035) (hashtable-entries . lT3034) (hashtable-delete! . lT3033) (hashtable-copy . lT3032) (hashtable-contains? . lT3031) (hashtable-clear! . lT3030) (call-with-output-file . lT302f) (call-with-input-file . lT302e) (write-char . lT302d) (write . lT302c) (with-output-to-file . lT302b) (with-input-from-file . lT302a) (read-char . lT3029) (read . lT3028) (peek-char . lT3027) (open-output-file . lT3026) (open-input-file . lT3025) (newline . lT3024) (display . lT3023) (close-output-port . lT3022) (close-input-port . lT3021) (eof-object? . lT3020) (eof-object . lT301f) (current-error-port . lT301e) (current-output-port . lT301d) (current-input-port . lT301c) (output-port? . lT301b) (input-port? . lT301a) (utf-8-codec . lT3019) (utf-16-codec . lT3018) (transcoder-error-handling-mode . lT3017) (transcoder-eol-style . lT3016) (transcoder-codec . lT3015) (transcoded-port . lT3014) (textual-port? . lT3013) (string->bytevector . lT3012) (standard-output-port . lT3011) (standard-input-port . lT3010) (standard-error-port . lT300f) (set-port-position! . lT300e) (put-u8 . lT300d) (put-string . lT300c) (put-datum . lT300b) (put-char . lT300a) (put-bytevector . lT3009) (port? . lT3008) (port-transcoder . lT3007) (port-position . lT3006) (port-has-set-port-position!? . lT3005) (port-has-port-position? . lT3004) (port-eof? . lT3003) (output-port-buffer-mode . lT3002) (open-string-output-port . lT3001) (open-string-input-port . lT3000) (open-file-output-port . lT2fff) (open-file-input/output-port . lT2ffe) (open-file-input-port . lT2ffd) (open-bytevector-output-port . lT2ffc) (open-bytevector-input-port . lT2ffb) (native-transcoder . lT2ffa) (native-eol-style . lT2ff9) (make-transcoder . lT2ff8) (latin-1-codec . lT2ff7) (make-i/o-write-error . lT2a81) (make-i/o-read-error . lT2a6c) (make-i/o-port-error . lT2b22) (make-i/o-invalid-position-error . lT2a98) (make-i/o-filename-error . lT2ab3) (make-i/o-file-protection-error . lT2acc) (make-i/o-file-is-read-only-error . lT2ae1) (make-i/o-file-does-not-exist-error . lT2b0b) (make-i/o-file-already-exists-error . lT2af6) (make-i/o-error . lT2a57) (make-i/o-encoding-error . lT2b52) (make-i/o-decoding-error . lT2b3b) (make-custom-textual-output-port . lT2ff6) (make-custom-textual-input/output-port . lT2ff5) (make-custom-textual-input-port . lT2ff4) (make-custom-binary-output-port . lT2ff3) (make-custom-binary-input/output-port . lT2ff2) (make-custom-binary-input-port . lT2ff1) (make-bytevector . lT2ff0) (lookahead-u8 . lT2fef) (lookahead-char . lT2fee) (i/o-write-error? . lT2a83) (i/o-read-error? . lT2a6e) (i/o-port-error? . lT2b26) (i/o-invalid-position-error? . lT2a9c) (i/o-filename-error? . lT2ab7) (i/o-file-protection-error? . lT2ace) (i/o-file-is-read-only-error? . lT2ae3) (i/o-file-does-not-exist-error? . lT2b0d) (i/o-file-already-exists-error? . lT2af8) (i/o-error? . lT2a59) (i/o-error-position . lT2a9e) (i/o-error-port . lT2b28) (i/o-error-filename . lT2ab9) (i/o-encoding-error? . lT2b56) (i/o-encoding-error-char . lT2b58) (i/o-decoding-error? . lT2b3d) (get-u8 . lT2fed) (get-string-n! . lT2fec) (get-string-n . lT2feb) (get-string-all . lT2fea) (get-line . lT2fe9) (get-datum . lT2fe8) (get-char . lT2fe7) (get-bytevector-some . lT2fe6) (get-bytevector-n! . lT2fe5) (get-bytevector-n . lT2fe4) (get-bytevector-all . lT2fe3) (flush-output-port . lT2fe2) (close-port . lT2fe1) (exit . lT2fd9) (command-line . lT2c91) (remove . lT2fd4) (remv . lT2fd3) (remp . lT2fd2) (remq . lT2fd1) (partition . lT2fd0) (memv . lT2fcf) (memq . lT2fce) (memp . lT2fcd) (member . lT2fcc) (exists . lT2fcb) (for-all . lT2fca) (fold-right . lT2fc9) (fold-left . lT2fc8) (find . lT2fc7) (filter . lT2fc6) (cons* . lT2fc5) (assv . lT2fc4) (assq . lT2fc3) (assp . lT2fc2) (assoc . lT2fc1) (call-with-string-output-port . lT2fc0) (call-with-port . lT2fbf) (call-with-bytevector-output-port . lT2fbe) (bytevector->string . lT2fbd) (buffer-mode? . lT2fbc) (binary-port? . lT2fbb) (with-exception-handler . lT2fba) (raise-continuable . lT2fb9) (raise . lT2fb8) (make-enumeration . lT2fb7) (enum-set=? . lT2fb6) (enum-set-universe . lT2fb5) (enum-set-union . lT2fb4) (enum-set-subset? . lT2fb3) (enum-set-projection . lT2fb2) (enum-set-member? . lT2fb1) (enum-set-intersection . lT2fb0) (enum-set-indexer . lT2faf) (enum-set-difference . lT2fae) (enum-set-constructor . lT2fad) (enum-set-complement . lT2fac) (enum-set->list . lT2fab) (who-condition? . lT29cd) (warning? . lT2945) (violation? . lT2984) (undefined-violation? . lT2a44) (syntax-violation? . lT2a2b) (syntax-violation-subform . lT2a2f) (syntax-violation-form . lT2a2d) (syntax-violation . lTe59) (simple-conditions . lT2faa) (serious-condition? . lT295a) (non-continuable-violation? . lT29e4) (message-condition? . lT292e) (make-who-condition . lT29c9) (make-warning . lT2943) (make-violation . lT2982) (make-undefined-violation . lT2a42) (make-syntax-violation . lT2a25) (make-serious-condition . lT2958) (make-non-continuable-violation . lT29e2) (make-message-condition . lT292a) (make-lexical-violation . lT2a0c) (make-irritants-condition . lT29ae) (make-implementation-restriction-violation . lT29f7) (make-error . lT296d) (make-assertion-violation . lT2997) (lexical-violation? . lT2a0e) (irritants-condition? . lT29b2) (implementation-restriction-violation? . lT29f9) (error? . lT296f) (condition-who . lT29cf) (condition-predicate . lT2fa9) (condition-message . lT2930) (condition-irritants . lT29b4) (condition-accessor . lT2fa8) (condition . lT2fa7) (assertion-violation? . lT2999) (condition? . lT2fa6) (utf32->string . lT2fa5) (utf16->string . lT2fa4) (utf8->string . lT2fa3) (uint-list->bytevector . lT2fa2) (u8-list->bytevector . lT2fa1) (string->utf8 . lT2fa0) (string->utf32 . lT2f9f) (string->utf16 . lT2f9e) (sint-list->bytevector . lT2f9d) (native-endianness . lT2f9c) (bytevector? . lT2f9b) (bytevector=? . lT2f9a) (bytevector-uint-set! . lT2f99) (bytevector-uint-ref . lT2f98) (bytevector-u8-set! . lT2f97) (bytevector-u8-ref . lT2f96) (bytevector-u64-set! . lT2f95) (bytevector-u64-ref . lT2f94) (bytevector-u64-native-set! . lT2f93) (bytevector-u64-native-ref . lT2f92) (bytevector-u32-set! . lT2f91) (bytevector-u32-ref . lT2f90) (bytevector-u32-native-set! . lT2f8f) (bytevector-u32-native-ref . lT2f8e) (bytevector-u16-set! . lT2f8d) (bytevector-u16-ref . lT2f8c) (bytevector-u16-native-set! . lT2f8b) (bytevector-u16-native-ref . lT2f8a) (bytevector-sint-set! . lT2f89) (bytevector-sint-ref . lT2f88) (bytevector-s8-set! . lT2f87) (bytevector-s8-ref . lT2f86) (bytevector-s64-set! . lT2f85) (bytevector-s64-ref . lT2f84) (bytevector-s64-native-set! . lT2f83) (bytevector-s64-native-ref . lT2f82) (bytevector-s32-set! . lT2f81) (bytevector-s32-ref . lT2f80) (bytevector-s32-native-set! . lT2f7f) (bytevector-s32-native-ref . lT2f7e) (bytevector-s16-set! . lT2f7d) (bytevector-s16-ref . lT2f7c) (bytevector-s16-native-set! . lT2f7b) (bytevector-s16-native-ref . lT2f7a) (bytevector-length . lT2f79) (bytevector-ieee-single-ref . lT2f78) (bytevector-ieee-single-set! . lT2f77) (bytevector-ieee-single-native-set! . lT2f76) (bytevector-ieee-single-native-ref . lT2f75) (bytevector-ieee-double-set! . lT2f74) (bytevector-ieee-double-ref . lT2f73) (bytevector-ieee-double-native-set! . lT2f72) (bytevector-ieee-double-native-ref . lT2f71) (bytevector-fill! . lT2f70) (bytevector-copy! . lT2f6f) (bytevector-copy . lT2f6e) (bytevector->uint-list . lT2f6d) (bytevector->u8-list . lT2f6c) (bytevector->sint-list . lT2f6b) (no-nans-violation? . lT2b82) (no-infinities-violation? . lT2b6d) (make-no-nans-violation . lT2b80) (make-no-infinities-violation . lT2b6b) (real->flonum . lT2f6a) (flzero? . lT2f69) (fltruncate . lT2f68) (fltan . lT2f67) (flsqrt . lT2f66) (flsin . lT2f65) (flround . lT2f64) (flpositive? . lT2f63) (flonum? . lT2f62) (flodd? . lT2f61) (flnumerator . lT2f60) (flnegative? . lT2f5f) (flnan? . lT2f5e) (flmod0 . lT2f5d) (flmod . lT2f5c) (flmin . lT2f5b) (flmax . lT2f5a) (fllog . lT2f59) (flinteger? . lT2f58) (flinfinite? . lT2f57) (flfloor . lT2f56) (flfinite? . lT2f55) (flexpt . lT2f54) (flexp . lT2f53) (fleven? . lT2f52) (fldiv0-and-mod0 . lT2f51) (fldiv0 . lT2f50) (fldiv-and-mod . lT2f4f) (fldiv . lT2f4e) (fldenominator . lT2f4d) (flcos . lT2f4c) (flceiling . lT2f4b) (flatan . lT2f4a) (flasin . lT2f49) (flacos . lT2f48) (flabs . lT2f47) (fl>? . lT2f46) (fl>=? . lT2f45) (fl=? . lT2f44) (fl<? . lT2f43) (fl<=? . lT2f42) (fl/ . lT2f41) (fl- . lT2f40) (fl+ . lT2f3f) (fl* . lT2f3e) (fixnum->flonum . lT2f3d) (fxzero? . lT2f3c) (fxxor . lT2f3b) (fxrotate-bit-field . lT2f3a) (fxreverse-bit-field . lT2f39) (fxpositive? . lT2f38) (fxodd? . lT2f37) (fxnot . lT2f36) (fxnegative? . lT2f35) (fxmod0 . lT2f34) (fxmod . lT2f33) (fxmin . lT2f32) (fxmax . lT2f31) (fxlength . lT2f30) (fxior . lT2f2f) (fxif . lT2f2e) (fxfirst-bit-set . lT2f2d) (fxeven? . lT2f2c) (fxdiv0-and-mod0 . lT2f2b) (fxdiv0 . lT2f2a) (fxdiv-and-mod . lT2f29) (fxdiv . lT2f28) (fxcopy-bit-field . lT2f27) (fxcopy-bit . lT2f26) (fxbit-set? . lT2f25) (fxbit-field . lT2f24) (fxbit-count . lT2f23) (fxarithmetic-shift-right . lT2f22) (fxarithmetic-shift-left . lT2f21) (fxarithmetic-shift . lT2f20) (fxand . lT2f1f) (fx>? . lT2f1e) (fx>=? . lT2f1d) (fx=? . lT2f1c) (fx<? . lT2f1b) (fx<=? . lT2f1a) (fx-/carry . lT2f19) (fx- . lT2f18) (fx+/carry . lT2f17) (fx+ . lT2f16) (fx*/carry . lT2f15) (fx* . lT2f14) (greatest-fixnum . lT2f13) (least-fixnum . lT2f12) (fixnum-width . lT2f11) (fixnum? . lT2f10) (bitwise-rotate-bit-field . lT2f0f) (bitwise-reverse-bit-field . lT2f0e) (bitwise-length . lT2f0d) (bitwise-if . lT2f0c) (bitwise-first-bit-set . lT2f0b) (bitwise-copy-bit-field . lT2f0a) (bitwise-copy-bit . lT2f09) (bitwise-bit-set? . lT2f08) (bitwise-bit-field . lT2f07) (bitwise-bit-count . lT2f06) (bitwise-xor . lT2f05) (bitwise-ior . lT2f04) (bitwise-and . lT2f03) (bitwise-not . lT2f02) (bitwise-arithmetic-shift-right . lT2f01) (bitwise-arithmetic-shift-left . lT2f00) (bitwise-arithmetic-shift . lT2eff) (zero? . lT2efe) (vector? . lT2efd) (vector-set! . lT2efc) (vector-ref . lT2efb) (vector-map . lT2efa) (vector-length . lT2ef9) (vector-for-each . lT2ef8) (vector-fill! . lT2ef7) (vector->list . lT2ef6) (vector . lT2ef5) (values . lT2ef4) (truncate . lT2ef3) (tan . lT2ef2) (symbol? . lT2ef1) (symbol=? . lT2ef0) (symbol->string . lT2eef) (substring . lT2eee) (string? . lT2eed) (string>? . lT2eec) (string>=? . lT2eeb) (string=? . lT2eea) (string<? . lT2ee9) (string<=? . lT2ee8) (string-ref . lT2ee7) (string-length . lT2ee6) (string-for-each . lT2ee5) (string-copy . lT2ee4) (string-append . lT2ee3) (string->symbol . lT2ee2) (string->number . lT2ee1) (string->list . lT2ee0) (string . lT2edf) (sqrt . lT2ede) (sin . lT2edd) (round . lT2edc) (reverse . lT2edb) (real? . lT2eda) (real-valued? . lT2ed9) (real-part . lT2ed8) (rationalize . lT2ed7) (rational? . lT2ed6) (rational-valued? . lT2ed5) (procedure? . lT2ed4) (positive? . lT2ed3) (pair? . lT2ed2) (odd? . lT2ed1) (numerator . lT2ed0) (number? . lT2ecf) (number->string . lT2ece) (null? . lT2ecd) (not . lT2ecc) (negative? . lT2ecb) (nan? . lT2eca) (min . lT2ec9) (max . lT2ec8) (map . lT2ec7) (make-vector . lT2ec6) (make-string . lT2ec5) (make-rectangular . lT2ec4) (make-polar . lT2ec3) (magnitude . lT2ec2) (log . lT2ec1) (list? . lT2ec0) (list-tail . lT2ebf) (list-ref . lT2ebe) (list->vector . lT2ebd) (list->string . lT2ebc) (list . lT2ebb) (length . lT2eba) (lcm . lT2eb9) (integer? . lT2eb8) (integer-valued? . lT2eb7) (integer->char . lT2eb6) (infinite? . lT2eb5) (inexact? . lT2eb4) (inexact . lT2eb3) (imag-part . lT2eb2) (gcd . lT2eb1) (for-each . lT2eb0) (floor . lT2eaf) (finite? . lT2eae) (expt . lT2ead) (exp . lT2eac) (exact? . lT2eab) (exact-integer-sqrt . lT2eaa) (exact . lT2ea9) (even? . lT2ea8) (error . lT2ea7) (eqv? . lT2ea6) (equal? . lT2ea5) (eq? . lT2ea4) (dynamic-wind . lT2ea3) (div0-and-mod0 . lT2ea2) (mod0 . lT2ea1) (div0 . lT2ea0) (div-and-mod . lT2e9f) (mod . lT2e9e) (div . lT2e9d) (denominator . lT2e9c) (cos . lT2e9b) (cons . lT2e9a) (complex? . lT2e99) (char? . lT2e98) (char>? . lT2e97) (char>=? . lT2e96) (char=? . lT2e95) (char<? . lT2e94) (char<=? . lT2e93) (char->integer . lT2e92) (ceiling . lT2e91) (call-with-values . lT2e90) (call/cc . lT2e8f) (call-with-current-continuation . lT2e8e) (cddddr . lT2e8d) (cdddar . lT2e8c) (cddadr . lT2e8b) (cddaar . lT2e8a) (cdaddr . lT2e89) (cdadar . lT2e88) (cdaadr . lT2e87) (cdaaar . lT2e86) (cadddr . lT2e85) (caddar . lT2e84) (cadadr . lT2e83) (cadaar . lT2e82) (caaddr . lT2e81) (caadar . lT2e80) (caaadr . lT2e7f) (caaaar . lT2e7e) (cdddr . lT2e7d) (cddar . lT2e7c) (cdadr . lT2e7b) (cdaar . lT2e7a) (caddr . lT2e79) (cadar . lT2e78) (caadr . lT2e77) (caaar . lT2e76) (cddr . lT2e75) (cdar . lT2e74) (cadr . lT2e73) (caar . lT2e72) (cdr . lT2e71) (car . lT2e70) (boolean? . lT2e6f) (boolean=? . lT2e6e) (atan . lT2e6d) (assertion-violation . lT2e6c) (asin . lT2e6b) (apply . lT2e6a) (append . lT2e69) (angle . lT2e68) (acos . lT2e67) (abs . lT2e66) (/ . lT2e65) (* . lT2e64) (- . lT2e63) (+ . lT2e62) (>= . lT2e61) (> . lT2e60) (= . lT2e5f) (<= . lT2e5e) (< . lT2e5d) (&no-nans . lT2e5b) (&no-infinities . lT2e5a) (&i/o-encoding . lT2e59) (&i/o-decoding . lT2e58) (&i/o-port . lT2e57) (&i/o-file-does-not-exist . lT2e56) (&i/o-file-already-exists . lT2e55) (&i/o-file-is-read-only . lT2e54) (&i/o-file-protection . lT2e53) (&i/o-filename . lT2e52) (&i/o-invalid-position . lT2e51) (&i/o-write . lT2e50) (&i/o-read . lT2e4f) (&i/o . lT2e4e) (&undefined . lT2e4d) (&syntax . lT2e4c) (&lexical . lT2e4b) (&implementation-restriction . lT2e4a) (&non-continuable . lT2e49) (&who . lT2e48) (&irritants . lT2e47) (&assertion . lT2e46) (&violation . lT2e45) (&error . lT2e44) (&serious . lT2e43) (&warning . lT2e42) (&message . lT2e41) (&condition . lT2e40) (define-condition-type . lT2e3f) (define-enumeration . lT2e3e) (define-record-type . lT2e3d) (parent-rtd . lT2e3c) (nongenerative . lT2e3b) (opaque . lT2e3a) (sealed . lT2e39) (protocol . lT2e38) (parent . lT2e37) (immutable . lT2e36) (mutable . lT2e35) (fields . lT2e34) (error-handling-mode . lT2e33) (file-options . lT2e32) (buffer-mode . lT2e31) (eol-style . lT2e30) (guard . lT2e2f) (unsyntax-splicing . lT2e2c) (unsyntax . lT2e2b) (unquote-splicing . lT2e2a) (unquote . lT2e29) (_ . lT2e28) (else . lT2e27) (=> . lT2e26) (... . lT2e25) (assert . lT2e24) (endianness . lT2e23) (do . lT2e20) (cond . lT2e1f) (let* . lT2e1e) (let . lT2e1d) (let*-values . lT2e1c) (let-values . lT2e1b) (identifier-syntax . lT2e1a) (with-syntax . lT2e19) (quasisyntax . lT2e18) (quasiquote . lT2e17) (syntax-rules . lT2e16) (record-constructor-descriptor . lT2e13) (record-type-descriptor . lT2e12) (case . lT2e11) (unless . lT2e0f) (when . lT2e0e) (or . lT2e0d) (and . lT2e0c) (if . lT2e0b) (let . lT2e0a) (letrec* . lT2e09) (letrec . lT2e08) (case-lambda . lT2e06) (lambda . lT2e05) (syntax . lT2e04) (syntax-case . lT2e03) (quote . lT2e02) (letrec-syntax . lT2e00) (let-syntax . lT2dff) (set! . lT2dfe) (begin . lT2dfc) (define-syntax . lT2dfa) (define . lT2df9)) '() values values '#f '#f '#t '#f) (lT987@lT7d3@install-library 'lT3128 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . lTe35) (quotient . lT2fe0) (null-environment . lTe33) (remainder . lT2fdf) (modulo . lT2fde) (inexact->exact . lT2fdd) (force . lT2fdc) (exact->inexact . lT2fdb) (make-promise . lT2fda) (delay . lT2e22)) '() values values '#f '#f '#t '#f) (lT987@lT7d3@install-library 'lT3129 '(rnrs control) '(6) '() '() '() '((do . lT2e20) (unless . lT2e0f) (when . lT2e0e) (case-lambda . lT2e06)) '() values values '#f '#f '#t '#f) (lT987@lT7d3@install-library 'lT312a '(rnrs eval) '(6) '() '() '() '((eval . lTe39) (environment . lTe31)) '() values values '#f '#f '#t '#f) (lT987@lT7d3@install-library 'lT312b '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . lT2fd6) (set-car! . lT2fd5)) '() values values '#f '#f '#t '#f) (lT987@lT7d3@install-library 'lT312c '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . lT2fd8) (string-set! . lT2fd7)) '() values values '#f '#f '#t '#f) (lT987@lT7d3@install-library 'lT312d '(rnrs programs) '(6) '() '() '() '((exit . lT2fd9) (command-line . lT2c91)) '() values values '#f '#f '#t '#f) (lT987@lT7d3@install-library 'lT312e '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . lTba4) (identifier? . lTe5b) (generate-temporaries . lTe47) (free-identifier=? . lTe49) (syntax->datum . lTe5f) (datum->syntax . lTe5d) (bound-identifier=? . lTe4b) (syntax-violation . lTe59) (unsyntax-splicing . lT2e2c) (unsyntax . lT2e2b) (_ . lT2e28) (... . lT2e25) (with-syntax . lT2e19) (quasisyntax . lT2e18) (syntax . lT2e04) (syntax-case . lT2e03)) '() values values '#f '#f '#t '#f) (lT987@lT7d3@install-library 'lT312f '(rnrs files) '(6) '() '() '() '((delete-file . lT3049) (file-exists? . lT3048) (make-i/o-write-error . lT2a81) (make-i/o-read-error . lT2a6c) (make-i/o-port-error . lT2b22) (make-i/o-invalid-position-error . lT2a98) (make-i/o-filename-error . lT2ab3) (make-i/o-file-protection-error . lT2acc) (make-i/o-file-is-read-only-error . lT2ae1) (make-i/o-file-does-not-exist-error . lT2b0b) (make-i/o-file-already-exists-error . lT2af6) (make-i/o-error . lT2a57) (i/o-write-error? . lT2a83) (i/o-read-error? . lT2a6e) (i/o-port-error? . lT2b26) (i/o-invalid-position-error? . lT2a9c) (i/o-filename-error? . lT2ab7) (i/o-file-protection-error? . lT2ace) (i/o-file-is-read-only-error? . lT2ae3) (i/o-file-does-not-exist-error? . lT2b0d) (i/o-file-already-exists-error? . lT2af8) (i/o-error? . lT2a59) (i/o-error-position . lT2a9e) (i/o-error-port . lT2b28) (i/o-error-filename . lT2ab9) (&i/o-port . lT2e57) (&i/o-file-does-not-exist . lT2e56) (&i/o-file-already-exists . lT2e55) (&i/o-file-is-read-only . lT2e54) (&i/o-file-protection . lT2e53) (&i/o-filename . lT2e52) (&i/o-invalid-position . lT2e51) (&i/o-write . lT2e50) (&i/o-read . lT2e4f) (&i/o . lT2e4e)) '() values values '#f '#f '#t '#f) (lT987@lT7d3@install-library 'lT3130 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . lT3047) (vector-sort . lT3046) (list-sort . lT3045)) '() values values '#f '#f '#t '#f) (lT987@lT7d3@install-library 'lT3131 '(rnrs base) '(6) '() '() '() '((zero? . lT2efe) (vector? . lT2efd) (vector-set! . lT2efc) (vector-ref . lT2efb) (vector-map . lT2efa) (vector-length . lT2ef9) (vector-for-each . lT2ef8) (vector-fill! . lT2ef7) (vector->list . lT2ef6) (vector . lT2ef5) (values . lT2ef4) (truncate . lT2ef3) (tan . lT2ef2) (symbol? . lT2ef1) (symbol=? . lT2ef0) (symbol->string . lT2eef) (substring . lT2eee) (string? . lT2eed) (string>? . lT2eec) (string>=? . lT2eeb) (string=? . lT2eea) (string<? . lT2ee9) (string<=? . lT2ee8) (string-ref . lT2ee7) (string-length . lT2ee6) (string-for-each . lT2ee5) (string-copy . lT2ee4) (string-append . lT2ee3) (string->symbol . lT2ee2) (string->number . lT2ee1) (string->list . lT2ee0) (string . lT2edf) (sqrt . lT2ede) (sin . lT2edd) (round . lT2edc) (reverse . lT2edb) (real? . lT2eda) (real-valued? . lT2ed9) (real-part . lT2ed8) (rationalize . lT2ed7) (rational? . lT2ed6) (rational-valued? . lT2ed5) (procedure? . lT2ed4) (positive? . lT2ed3) (pair? . lT2ed2) (odd? . lT2ed1) (numerator . lT2ed0) (number? . lT2ecf) (number->string . lT2ece) (null? . lT2ecd) (not . lT2ecc) (negative? . lT2ecb) (nan? . lT2eca) (min . lT2ec9) (max . lT2ec8) (map . lT2ec7) (make-vector . lT2ec6) (make-string . lT2ec5) (make-rectangular . lT2ec4) (make-polar . lT2ec3) (magnitude . lT2ec2) (log . lT2ec1) (list? . lT2ec0) (list-tail . lT2ebf) (list-ref . lT2ebe) (list->vector . lT2ebd) (list->string . lT2ebc) (list . lT2ebb) (length . lT2eba) (lcm . lT2eb9) (integer? . lT2eb8) (integer-valued? . lT2eb7) (integer->char . lT2eb6) (infinite? . lT2eb5) (inexact? . lT2eb4) (inexact . lT2eb3) (imag-part . lT2eb2) (gcd . lT2eb1) (for-each . lT2eb0) (floor . lT2eaf) (finite? . lT2eae) (expt . lT2ead) (exp . lT2eac) (exact? . lT2eab) (exact-integer-sqrt . lT2eaa) (exact . lT2ea9) (even? . lT2ea8) (error . lT2ea7) (eqv? . lT2ea6) (equal? . lT2ea5) (eq? . lT2ea4) (dynamic-wind . lT2ea3) (div0-and-mod0 . lT2ea2) (mod0 . lT2ea1) (div0 . lT2ea0) (div-and-mod . lT2e9f) (mod . lT2e9e) (div . lT2e9d) (denominator . lT2e9c) (cos . lT2e9b) (cons . lT2e9a) (complex? . lT2e99) (char? . lT2e98) (char>? . lT2e97) (char>=? . lT2e96) (char=? . lT2e95) (char<? . lT2e94) (char<=? . lT2e93) (char->integer . lT2e92) (ceiling . lT2e91) (call-with-values . lT2e90) (call/cc . lT2e8f) (call-with-current-continuation . lT2e8e) (cddddr . lT2e8d) (cdddar . lT2e8c) (cddadr . lT2e8b) (cddaar . lT2e8a) (cdaddr . lT2e89) (cdadar . lT2e88) (cdaadr . lT2e87) (cdaaar . lT2e86) (cadddr . lT2e85) (caddar . lT2e84) (cadadr . lT2e83) (cadaar . lT2e82) (caaddr . lT2e81) (caadar . lT2e80) (caaadr . lT2e7f) (caaaar . lT2e7e) (cdddr . lT2e7d) (cddar . lT2e7c) (cdadr . lT2e7b) (cdaar . lT2e7a) (caddr . lT2e79) (cadar . lT2e78) (caadr . lT2e77) (caaar . lT2e76) (cddr . lT2e75) (cdar . lT2e74) (cadr . lT2e73) (caar . lT2e72) (cdr . lT2e71) (car . lT2e70) (boolean? . lT2e6f) (boolean=? . lT2e6e) (atan . lT2e6d) (assertion-violation . lT2e6c) (asin . lT2e6b) (apply . lT2e6a) (append . lT2e69) (angle . lT2e68) (acos . lT2e67) (abs . lT2e66) (/ . lT2e65) (* . lT2e64) (- . lT2e63) (+ . lT2e62) (>= . lT2e61) (> . lT2e60) (= . lT2e5f) (<= . lT2e5e) (< . lT2e5d) (unquote-splicing . lT2e2a) (unquote . lT2e29) (_ . lT2e28) (else . lT2e27) (=> . lT2e26) (... . lT2e25) (assert . lT2e24) (cond . lT2e1f) (let* . lT2e1e) (let . lT2e1d) (let*-values . lT2e1c) (let-values . lT2e1b) (identifier-syntax . lT2e1a) (quasiquote . lT2e17) (syntax-rules . lT2e16) (case . lT2e11) (or . lT2e0d) (and . lT2e0c) (if . lT2e0b) (let . lT2e0a) (letrec* . lT2e09) (letrec . lT2e08) (lambda . lT2e05) (quote . lT2e02) (letrec-syntax . lT2e00) (let-syntax . lT2dff) (set! . lT2dfe) (begin . lT2dfc) (define-syntax . lT2dfa) (define . lT2df9)) '() values values '#f '#f '#t '#f) (lT987@lT7d3@install-library 'lT3132 '(rnrs lists) '(6) '() '() '() '((remove . lT2fd4) (remv . lT2fd3) (remp . lT2fd2) (remq . lT2fd1) (partition . lT2fd0) (memv . lT2fcf) (memq . lT2fce) (memp . lT2fcd) (member . lT2fcc) (exists . lT2fcb) (for-all . lT2fca) (fold-right . lT2fc9) (fold-left . lT2fc8) (find . lT2fc7) (filter . lT2fc6) (cons* . lT2fc5) (assv . lT2fc4) (assq . lT2fc3) (assp . lT2fc2) (assoc . lT2fc1)) '() values values '#f '#f '#t '#f) (lT987@lT7d3@install-library 'lT3133 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . lT302f) (call-with-input-file . lT302e) (write-char . lT302d) (write . lT302c) (with-output-to-file . lT302b) (with-input-from-file . lT302a) (read-char . lT3029) (read . lT3028) (peek-char . lT3027) (open-output-file . lT3026) (open-input-file . lT3025) (newline . lT3024) (display . lT3023) (close-output-port . lT3022) (close-input-port . lT3021) (eof-object? . lT3020) (eof-object . lT301f) (current-error-port . lT301e) (current-output-port . lT301d) (current-input-port . lT301c) (output-port? . lT301b) (input-port? . lT301a) (make-i/o-write-error . lT2a81) (make-i/o-read-error . lT2a6c) (make-i/o-port-error . lT2b22) (make-i/o-invalid-position-error . lT2a98) (make-i/o-filename-error . lT2ab3) (make-i/o-file-protection-error . lT2acc) (make-i/o-file-is-read-only-error . lT2ae1) (make-i/o-file-does-not-exist-error . lT2b0b) (make-i/o-file-already-exists-error . lT2af6) (make-i/o-error . lT2a57) (i/o-write-error? . lT2a83) (i/o-read-error? . lT2a6e) (i/o-port-error? . lT2b26) (i/o-invalid-position-error? . lT2a9c) (i/o-filename-error? . lT2ab7) (i/o-file-protection-error? . lT2ace) (i/o-file-is-read-only-error? . lT2ae3) (i/o-file-does-not-exist-error? . lT2b0d) (i/o-file-already-exists-error? . lT2af8) (i/o-error? . lT2a59) (i/o-error-position . lT2a9e) (i/o-error-port . lT2b28) (i/o-error-filename . lT2ab9) (&i/o-port . lT2e57) (&i/o-file-does-not-exist . lT2e56) (&i/o-file-already-exists . lT2e55) (&i/o-file-is-read-only . lT2e54) (&i/o-file-protection . lT2e53) (&i/o-filename . lT2e52) (&i/o-invalid-position . lT2e51) (&i/o-write . lT2e50) (&i/o-read . lT2e4f) (&i/o . lT2e4e)) '() values values '#f '#f '#t '#f) (lT987@lT7d3@install-library 'lT3134 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . lT2ff0) (utf32->string . lT2fa5) (utf16->string . lT2fa4) (utf8->string . lT2fa3) (uint-list->bytevector . lT2fa2) (u8-list->bytevector . lT2fa1) (string->utf8 . lT2fa0) (string->utf32 . lT2f9f) (string->utf16 . lT2f9e) (sint-list->bytevector . lT2f9d) (native-endianness . lT2f9c) (bytevector? . lT2f9b) (bytevector=? . lT2f9a) (bytevector-uint-set! . lT2f99) (bytevector-uint-ref . lT2f98) (bytevector-u8-set! . lT2f97) (bytevector-u8-ref . lT2f96) (bytevector-u64-set! . lT2f95) (bytevector-u64-ref . lT2f94) (bytevector-u64-native-set! . lT2f93) (bytevector-u64-native-ref . lT2f92) (bytevector-u32-set! . lT2f91) (bytevector-u32-ref . lT2f90) (bytevector-u32-native-set! . lT2f8f) (bytevector-u32-native-ref . lT2f8e) (bytevector-u16-set! . lT2f8d) (bytevector-u16-ref . lT2f8c) (bytevector-u16-native-set! . lT2f8b) (bytevector-u16-native-ref . lT2f8a) (bytevector-sint-set! . lT2f89) (bytevector-sint-ref . lT2f88) (bytevector-s8-set! . lT2f87) (bytevector-s8-ref . lT2f86) (bytevector-s64-set! . lT2f85) (bytevector-s64-ref . lT2f84) (bytevector-s64-native-set! . lT2f83) (bytevector-s64-native-ref . lT2f82) (bytevector-s32-set! . lT2f81) (bytevector-s32-ref . lT2f80) (bytevector-s32-native-set! . lT2f7f) (bytevector-s32-native-ref . lT2f7e) (bytevector-s16-set! . lT2f7d) (bytevector-s16-ref . lT2f7c) (bytevector-s16-native-set! . lT2f7b) (bytevector-s16-native-ref . lT2f7a) (bytevector-length . lT2f79) (bytevector-ieee-single-ref . lT2f78) (bytevector-ieee-single-set! . lT2f77) (bytevector-ieee-single-native-set! . lT2f76) (bytevector-ieee-single-native-ref . lT2f75) (bytevector-ieee-double-set! . lT2f74) (bytevector-ieee-double-ref . lT2f73) (bytevector-ieee-double-native-set! . lT2f72) (bytevector-ieee-double-native-ref . lT2f71) (bytevector-fill! . lT2f70) (bytevector-copy! . lT2f6f) (bytevector-copy . lT2f6e) (bytevector->uint-list . lT2f6d) (bytevector->u8-list . lT2f6c) (bytevector->sint-list . lT2f6b) (endianness . lT2e23)) '() values values '#f '#f '#t '#f) (lT987@lT7d3@install-library 'lT3135 '(rnrs unicode) '(6) '() '() '() '((string-upcase . lT3077) (string-titlecase . lT3076) (string-normalize-nfkd . lT3075) (string-normalize-nfkc . lT3074) (string-normalize-nfd . lT3073) (string-normalize-nfc . lT3072) (string-foldcase . lT3071) (string-downcase . lT3070) (string-ci>? . lT306f) (string-ci>=? . lT306e) (string-ci=? . lT306d) (string-ci<? . lT306c) (string-ci<=? . lT306b) (char-whitespace? . lT306a) (char-upper-case? . lT3069) (char-title-case? . lT3068) (char-numeric? . lT3067) (char-lower-case? . lT3066) (char-general-category . lT3065) (char-upcase . lT3064) (char-titlecase . lT3063) (char-foldcase . lT3062) (char-downcase . lT3061) (char-ci>? . lT3060) (char-ci>=? . lT305f) (char-ci=? . lT305e) (char-ci<? . lT305d) (char-ci<=? . lT305c) (char-alphabetic? . lT305b)) '() values values '#f '#f '#t '#f) (lT987@lT7d3@install-library 'lT3136 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . lT2fba) (raise-continuable . lT2fb9) (raise . lT2fb8) (guard . lT2e2f) (else . lT2e27) (=> . lT2e26)) '() values values '#f '#f '#t '#f) (lT987@lT7d3@install-library 'lT3137 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . lT2f0f) (bitwise-reverse-bit-field . lT2f0e) (bitwise-length . lT2f0d) (bitwise-if . lT2f0c) (bitwise-first-bit-set . lT2f0b) (bitwise-copy-bit-field . lT2f0a) (bitwise-copy-bit . lT2f09) (bitwise-bit-set? . lT2f08) (bitwise-bit-field . lT2f07) (bitwise-bit-count . lT2f06) (bitwise-xor . lT2f05) (bitwise-ior . lT2f04) (bitwise-and . lT2f03) (bitwise-not . lT2f02) (bitwise-arithmetic-shift-right . lT2f01) (bitwise-arithmetic-shift-left . lT2f00) (bitwise-arithmetic-shift . lT2eff)) '() values values '#f '#f '#t '#f) (lT987@lT7d3@install-library 'lT3138 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . lT2f3c) (fxxor . lT2f3b) (fxrotate-bit-field . lT2f3a) (fxreverse-bit-field . lT2f39) (fxpositive? . lT2f38) (fxodd? . lT2f37) (fxnot . lT2f36) (fxnegative? . lT2f35) (fxmod0 . lT2f34) (fxmod . lT2f33) (fxmin . lT2f32) (fxmax . lT2f31) (fxlength . lT2f30) (fxior . lT2f2f) (fxif . lT2f2e) (fxfirst-bit-set . lT2f2d) (fxeven? . lT2f2c) (fxdiv0-and-mod0 . lT2f2b) (fxdiv0 . lT2f2a) (fxdiv-and-mod . lT2f29) (fxdiv . lT2f28) (fxcopy-bit-field . lT2f27) (fxcopy-bit . lT2f26) (fxbit-set? . lT2f25) (fxbit-field . lT2f24) (fxbit-count . lT2f23) (fxarithmetic-shift-right . lT2f22) (fxarithmetic-shift-left . lT2f21) (fxarithmetic-shift . lT2f20) (fxand . lT2f1f) (fx>? . lT2f1e) (fx>=? . lT2f1d) (fx=? . lT2f1c) (fx<? . lT2f1b) (fx<=? . lT2f1a) (fx-/carry . lT2f19) (fx- . lT2f18) (fx+/carry . lT2f17) (fx+ . lT2f16) (fx*/carry . lT2f15) (fx* . lT2f14) (greatest-fixnum . lT2f13) (least-fixnum . lT2f12) (fixnum-width . lT2f11) (fixnum? . lT2f10)) '() values values '#f '#f '#t '#f) (lT987@lT7d3@install-library 'lT3139 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . lT2b82) (no-infinities-violation? . lT2b6d) (make-no-nans-violation . lT2b80) (make-no-infinities-violation . lT2b6b) (real->flonum . lT2f6a) (flzero? . lT2f69) (fltruncate . lT2f68) (fltan . lT2f67) (flsqrt . lT2f66) (flsin . lT2f65) (flround . lT2f64) (flpositive? . lT2f63) (flonum? . lT2f62) (flodd? . lT2f61) (flnumerator . lT2f60) (flnegative? . lT2f5f) (flnan? . lT2f5e) (flmod0 . lT2f5d) (flmod . lT2f5c) (flmin . lT2f5b) (flmax . lT2f5a) (fllog . lT2f59) (flinteger? . lT2f58) (flinfinite? . lT2f57) (flfloor . lT2f56) (flfinite? . lT2f55) (flexpt . lT2f54) (flexp . lT2f53) (fleven? . lT2f52) (fldiv0-and-mod0 . lT2f51) (fldiv0 . lT2f50) (fldiv-and-mod . lT2f4f) (fldiv . lT2f4e) (fldenominator . lT2f4d) (flcos . lT2f4c) (flceiling . lT2f4b) (flatan . lT2f4a) (flasin . lT2f49) (flacos . lT2f48) (flabs . lT2f47) (fl>? . lT2f46) (fl>=? . lT2f45) (fl=? . lT2f44) (fl<? . lT2f43) (fl<=? . lT2f42) (fl/ . lT2f41) (fl- . lT2f40) (fl+ . lT2f3f) (fl* . lT2f3e) (fixnum->flonum . lT2f3d) (&no-nans . lT2e5b) (&no-infinities . lT2e5a)) '() values values '#f '#f '#t '#f) (lT987@lT7d3@install-library 'lT313a '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . lT3044) (string-ci-hash . lT3043) (string-hash . lT3042) (equal-hash . lT3041) (hashtable-equivalence-function . lT3040) (make-hashtable . lT303f) (hashtable-hash-function . lT303e) (make-eqv-hashtable . lT303d) (make-eq-hashtable . lT303c) (hashtable? . lT303b) (hashtable-update! . lT303a) (hashtable-size . lT3039) (hashtable-set! . lT3038) (hashtable-ref . lT3037) (hashtable-mutable? . lT3036) (hashtable-keys . lT3035) (hashtable-entries . lT3034) (hashtable-delete! . lT3033) (hashtable-copy . lT3032) (hashtable-contains? . lT3031) (hashtable-clear! . lT3030)) '() values values '#f '#f '#t '#f) (lT987@lT7d3@install-library 'lT313b '(rnrs io ports) '(6) '() '() '() '((eof-object? . lT3020) (eof-object . lT301f) (current-error-port . lT301e) (current-output-port . lT301d) (current-input-port . lT301c) (output-port? . lT301b) (input-port? . lT301a) (utf-8-codec . lT3019) (utf-16-codec . lT3018) (transcoder-error-handling-mode . lT3017) (transcoder-eol-style . lT3016) (transcoder-codec . lT3015) (transcoded-port . lT3014) (textual-port? . lT3013) (string->bytevector . lT3012) (standard-output-port . lT3011) (standard-input-port . lT3010) (standard-error-port . lT300f) (set-port-position! . lT300e) (put-u8 . lT300d) (put-string . lT300c) (put-datum . lT300b) (put-char . lT300a) (put-bytevector . lT3009) (port? . lT3008) (port-transcoder . lT3007) (port-position . lT3006) (port-has-set-port-position!? . lT3005) (port-has-port-position? . lT3004) (port-eof? . lT3003) (output-port-buffer-mode . lT3002) (open-string-output-port . lT3001) (open-string-input-port . lT3000) (open-file-output-port . lT2fff) (open-file-input/output-port . lT2ffe) (open-file-input-port . lT2ffd) (open-bytevector-output-port . lT2ffc) (open-bytevector-input-port . lT2ffb) (native-transcoder . lT2ffa) (native-eol-style . lT2ff9) (make-transcoder . lT2ff8) (latin-1-codec . lT2ff7) (make-i/o-write-error . lT2a81) (make-i/o-read-error . lT2a6c) (make-i/o-port-error . lT2b22) (make-i/o-invalid-position-error . lT2a98) (make-i/o-filename-error . lT2ab3) (make-i/o-file-protection-error . lT2acc) (make-i/o-file-is-read-only-error . lT2ae1) (make-i/o-file-does-not-exist-error . lT2b0b) (make-i/o-file-already-exists-error . lT2af6) (make-i/o-error . lT2a57) (make-i/o-encoding-error . lT2b52) (make-i/o-decoding-error . lT2b3b) (make-custom-textual-output-port . lT2ff6) (make-custom-textual-input/output-port . lT2ff5) (make-custom-textual-input-port . lT2ff4) (make-custom-binary-output-port . lT2ff3) (make-custom-binary-input/output-port . lT2ff2) (make-custom-binary-input-port . lT2ff1) (lookahead-u8 . lT2fef) (lookahead-char . lT2fee) (i/o-write-error? . lT2a83) (i/o-read-error? . lT2a6e) (i/o-port-error? . lT2b26) (i/o-invalid-position-error? . lT2a9c) (i/o-filename-error? . lT2ab7) (i/o-file-protection-error? . lT2ace) (i/o-file-is-read-only-error? . lT2ae3) (i/o-file-does-not-exist-error? . lT2b0d) (i/o-file-already-exists-error? . lT2af8) (i/o-error? . lT2a59) (i/o-error-position . lT2a9e) (i/o-error-port . lT2b28) (i/o-error-filename . lT2ab9) (i/o-encoding-error? . lT2b56) (i/o-encoding-error-char . lT2b58) (i/o-decoding-error? . lT2b3d) (get-u8 . lT2fed) (get-string-n! . lT2fec) (get-string-n . lT2feb) (get-string-all . lT2fea) (get-line . lT2fe9) (get-datum . lT2fe8) (get-char . lT2fe7) (get-bytevector-some . lT2fe6) (get-bytevector-n! . lT2fe5) (get-bytevector-n . lT2fe4) (get-bytevector-all . lT2fe3) (flush-output-port . lT2fe2) (close-port . lT2fe1) (call-with-string-output-port . lT2fc0) (call-with-port . lT2fbf) (call-with-bytevector-output-port . lT2fbe) (bytevector->string . lT2fbd) (buffer-mode? . lT2fbc) (binary-port? . lT2fbb) (&i/o-encoding . lT2e59) (&i/o-decoding . lT2e58) (&i/o-port . lT2e57) (&i/o-file-does-not-exist . lT2e56) (&i/o-file-already-exists . lT2e55) (&i/o-file-is-read-only . lT2e54) (&i/o-file-protection . lT2e53) (&i/o-filename . lT2e52) (&i/o-invalid-position . lT2e51) (&i/o-write . lT2e50) (&i/o-read . lT2e4f) (&i/o . lT2e4e) (error-handling-mode . lT2e33) (file-options . lT2e32) (buffer-mode . lT2e31) (eol-style . lT2e30)) '() values values '#f '#f '#t '#f) (lT987@lT7d3@install-library 'lT313c '(rnrs enums) '(6) '() '() '() '((make-enumeration . lT2fb7) (enum-set=? . lT2fb6) (enum-set-universe . lT2fb5) (enum-set-union . lT2fb4) (enum-set-subset? . lT2fb3) (enum-set-projection . lT2fb2) (enum-set-member? . lT2fb1) (enum-set-intersection . lT2fb0) (enum-set-indexer . lT2faf) (enum-set-difference . lT2fae) (enum-set-constructor . lT2fad) (enum-set-complement . lT2fac) (enum-set->list . lT2fab) (define-enumeration . lT2e3e)) '() values values '#f '#f '#t '#f) (lT987@lT7d3@install-library 'lT313d '(rnrs conditions) '(6) '() '() '() '((who-condition? . lT29cd) (warning? . lT2945) (violation? . lT2984) (undefined-violation? . lT2a44) (syntax-violation? . lT2a2b) (syntax-violation-subform . lT2a2f) (syntax-violation-form . lT2a2d) (syntax-violation . lTe59) (simple-conditions . lT2faa) (serious-condition? . lT295a) (non-continuable-violation? . lT29e4) (message-condition? . lT292e) (make-who-condition . lT29c9) (make-warning . lT2943) (make-violation . lT2982) (make-undefined-violation . lT2a42) (make-syntax-violation . lT2a25) (make-serious-condition . lT2958) (make-non-continuable-violation . lT29e2) (make-message-condition . lT292a) (make-lexical-violation . lT2a0c) (make-irritants-condition . lT29ae) (make-implementation-restriction-violation . lT29f7) (make-error . lT296d) (make-assertion-violation . lT2997) (lexical-violation? . lT2a0e) (irritants-condition? . lT29b2) (implementation-restriction-violation? . lT29f9) (error? . lT296f) (condition-who . lT29cf) (condition-predicate . lT2fa9) (condition-message . lT2930) (condition-irritants . lT29b4) (condition-accessor . lT2fa8) (condition . lT2fa7) (assertion-violation? . lT2999) (condition? . lT2fa6) (&undefined . lT2e4d) (&syntax . lT2e4c) (&lexical . lT2e4b) (&implementation-restriction . lT2e4a) (&non-continuable . lT2e49) (&who . lT2e48) (&irritants . lT2e47) (&assertion . lT2e46) (&violation . lT2e45) (&error . lT2e44) (&serious . lT2e43) (&warning . lT2e42) (&message . lT2e41) (&condition . lT2e40) (define-condition-type . lT2e3f)) '() values values '#f '#f '#t '#f) (lT987@lT7d3@install-library 'lT313e '(rnrs records inspection) '(6) '() '() '() '((record? . lT3053) (record-type-uid . lT3052) (record-type-sealed? . lT3051) (record-type-parent . lT3050) (record-type-opaque? . lT304f) (record-type-name . lT304e) (record-type-generative? . lT304d) (record-type-field-names . lT304c) (record-rtd . lT304b) (record-field-mutable? . lT304a)) '() values values '#f '#f '#t '#f) (lT987@lT7d3@install-library 'lT313f '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . lT305a) (record-predicate . lT3059) (record-mutator . lT3058) (record-constructor . lT3057) (record-accessor . lT3056) (make-record-type-descriptor . lT3055) (make-record-constructor-descriptor . lT3054)) '() values values '#f '#f '#t '#f) (lT987@lT7d3@install-library 'lT3140 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . lT2e3d) (parent-rtd . lT2e3c) (nongenerative . lT2e3b) (opaque . lT2e3a) (sealed . lT2e39) (protocol . lT2e38) (parent . lT2e37) (immutable . lT2e36) (mutable . lT2e35) (fields . lT2e34) (record-constructor-descriptor . lT2e13) (record-type-descriptor . lT2e12)) '() values values '#f '#f '#t '#f) (lT987@lT7d3@install-library 'lT3141 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . lT2b86) (&no-nans-rtd . lT2b84) (&no-infinities-rcd . lT2b71) (&no-infinities-rtd . lT2b6f) (&i/o-encoding-rcd . lT2b5c) (&i/o-encoding-rtd . lT2b5a) (&i/o-decoding-rcd . lT2b41) (&i/o-decoding-rtd . lT2b3f) (&i/o-port-rcd . lT2b2c) (&i/o-port-rtd . lT2b2a) (&i/o-file-does-not-exist-rcd . lT2b11) (&i/o-file-does-not-exist-rtd . lT2b0f) (&i/o-file-already-exists-rcd . lT2afc) (&i/o-file-already-exists-rtd . lT2afa) (&i/o-file-is-read-only-rcd . lT2ae7) (&i/o-file-is-read-only-rtd . lT2ae5) (&i/o-file-protection-rcd . lT2ad2) (&i/o-file-protection-rtd . lT2ad0) (&i/o-filename-rcd . lT2abd) (&i/o-filename-rtd . lT2abb) (&i/o-invalid-position-rcd . lT2aa2) (&i/o-invalid-position-rtd . lT2aa0) (&i/o-write-rcd . lT2a87) (&i/o-write-rtd . lT2a85) (&i/o-read-rcd . lT2a72) (&i/o-read-rtd . lT2a70) (&i/o-rcd . lT2a5d) (&i/o-rtd . lT2a5b) (&undefined-rcd . lT2a48) (&undefined-rtd . lT2a46) (&syntax-rcd . lT2a33) (&syntax-rtd . lT2a31) (&lexical-rcd . lT2a12) (&lexical-rtd . lT2a10) (&implementation-restriction-rcd . lT29fd) (&implementation-restriction-rtd . lT29fb) (&non-continuable-rcd . lT29e8) (&non-continuable-rtd . lT29e6) (&who-rcd . lT29d3) (&who-rtd . lT29d1) (&irritants-rcd . lT29b8) (&irritants-rtd . lT29b6) (&assertion-rcd . lT299d) (&assertion-rtd . lT299b) (&violation-rcd . lT2988) (&violation-rtd . lT2986) (&error-rcd . lT2973) (&error-rtd . lT2971) (&serious-rcd . lT295e) (&serious-rtd . lT295c) (&warning-rcd . lT2949) (&warning-rtd . lT2947) (&message-rcd . lT2934) (&message-rtd . lT2932) (&condition-rcd . lT28d5) (&condition-rtd . lT28d3) (syntax-error . lTe55) (syntax-dispatch . lTd79) (pretty-print . lT3121) (eval-core . lT3120) (set-symbol-value! . lT311f) (symbol-value . lT311e) (gensym . lT311d) (void . lT311c) (load . lT2c97) (interaction-environment . lTe67) (char-ready? . lT311b) (regexp? . lT311a) (read-line . lT3119) (gensym-prefix-set! . lT3118) (ungensym . lT3117) (alist->eq-hash-table . lT3116) (assoc-ref . lT3115) (print . lT3114) (format . lT3113) (host-os . lT3112) (library-path . lT7b2) (standard-library-path . lT3111) (file-newer? . lT3110) (stat-mtime . lT310f) (write-to-file . lT310e) (file->list . lT310d) (file->string . lT310c) (digit->integer . lT310b) (call-with-string-input-port . lT310a) (call-with-string-io . lT3109) (string-split . lT3108) (bytevector-for-each . lT3107) (string->regexp . lT3106) (rxmatch . lT3105) (regexp-replace-all . lT3104) (hashtable-for-each . lT3103) (mosh-cache-dir . lT59d) (call-process . lT3102) (local-tz-offset . lT3101) (microseconds . lT3100) (directory-list . lT30ff) (set-current-directory! . lT30fe) (expand-path . lT30fd) (current-directory . lT30fc) (%spawn . lT30fb) (%waitpid . lT30fa) (simple-struct-name . lT30f9) (simple-struct-set! . lT30f8) (simple-struct-ref . lT30f7) (make-simple-struct . lT30f6) (simple-struct? . lT30f5) (pointer-ref-c-int64 . lT30f4) (pointer-ref-c-int32 . lT30f3) (pointer-ref-c-int16 . lT30f2) (pointer-ref-c-int8 . lT30f1) (pointer-ref-c-uint64 . lT30f0) (pointer-ref-c-uint32 . lT30ef) (pointer-ref-c-uint16 . lT30ee) (pointer-ref-c-uint8 . lT30ed) (pointer-set-c-uint64! . lT30ec) (pointer-set-c-uint32! . lT30eb) (pointer-set-c-uint16! . lT30ea) (pointer-set-c-uint8! . lT30e9) (pointer-set-c-int64! . lT30e8) (pointer-set-c-int32! . lT30e7) (pointer-set-c-int16! . lT30e6) (pointer-set-c-int8! . lT30e5) (pointer-set-c-pointer! . lT30e4) (pointer-set-c-double! . lT30e3) (pointer-set-c-float! . lT30e2) (pointer-set-c-long-long! . lT30e1) (pointer-set-c-long! . lT30e0) (pointer-set-c-int! . lT30df) (pointer-set-c-short! . lT30de) (pointer-set-c-char! . lT30dd) (pointer-ref-c-pointer . lT30dc) (pointer-ref-c-double . lT30db) (pointer-ref-c-float . lT30da) (pointer-ref-c-unsigned-long-long . lT30d9) (pointer-ref-c-signed-long-long . lT30d8) (pointer-ref-c-unsigned-long . lT30d7) (pointer-ref-c-signed-long . lT30d6) (pointer-ref-c-unsigned-int . lT30d5) (pointer-ref-c-signed-int . lT30d4) (pointer-ref-c-unsigned-short . lT30d3) (pointer-ref-c-signed-short . lT30d2) (pointer-ref-c-unsigned-char . lT30d1) (pointer-ref-c-signed-char . lT30d0) (pointer->integer . lT30cf) (integer->pointer . lT30ce) (pointer? . lT30cd) (shared-errno . lT30cc) (%ffi-free . lT30cb) (%ffi-malloc . lT30ca) (%ffi-supported? . lT30c9) (%ffi-pointer->string . lT30c8) (%ffi-call->string-or-zero . lT30c7) (%ffi-call->double . lT30c6) (%ffi-call->void* . lT30c5) (%ffi-call->void . lT30c4) (%ffi-call->char . lT30c3) (%ffi-call->int . lT30c2) (%ffi-lookup . lT30c1) (%ffi-open . lT30c0) (%fork . lT30bf) (%pipe . lT30be) (p . lT30bd) (open-output-string . lT30bc) (get-output-string . lT30bb) (file-stat-ctime . lT30ba) (file-stat-atime . lT30b9) (file-stat-mtime . lT30b8) (file-size-in-bytes . lT30b7) (file-writable? . lT30b6) (file-executable? . lT30b5) (file-readable? . lT30b4) (file-regular? . lT30b3) (file-symbolic-link? . lT30b2) (file-directory? . lT30b1) (create-symbolic-link . lT30b0) (rename-file . lT30af) (delete-directory . lT30ae) (create-directory . lT30ad) (create-mosh-cache-dir . lT30ac) (get-environment-variables . lT30ab) (current-exception-handler . lT30aa) (get-environment-variable . lT30a9) (join-wraps . lT30a8) (id->real-label . lT30a7) (same-marks? . lT30a6) (same-marks*? . lT30a5) (get-timeofday . lT30a4) (get-command-line . lT30a3) (sys-display . lT30a2) (whereis . lT30a1) (register . lT30a0) (vm-join! . lT309f) (vm-set-value! . lT309e) (vm? . lT309d) (main-vm? . lT309c) (vm-eval . lT309b) (vm-self . lT309a) (vm-start! . lT3099) (make-vm . lT3098) (mutex-try-lock! . lT3097) (mutex-unlock! . lT3096) (mutex-lock! . lT3095) (mutex? . lT3094) (make-mutex . lT3093) (condition-variable-notify-all! . lT3092) (condition-variable-notify! . lT3091) (condition-variable-wait! . lT3090) (make-condition-variable . lT308f) (mosh-executable-path . lT308e) (make-file-options . lT308d) (source-info . lT308c) (make-compiler-instruction . lT308b) (make-instruction . lT308a) (set-source-info! . lT3089) (bignum? . lT3088) (fast-equal? . lT3087) (fasl-read . lT3086) (fasl-write . lT3085) (time-usage . lT3084) (os-constant . lT3083) (disasm . lT3082) (make-parameter . lT59b) (socket-port . lT3081) (socket-shutdown . lT3080) (socket-close . lT307f) (socket-send . lT307e) (socket-recv! . lT307d) (socket-recv . lT307c) (make-server-socket . lT307b) (make-client-socket . lT307a) (socket-accept . lT3079) (socket? . lT3078) (string-upcase . lT3077) (string-titlecase . lT3076) (string-normalize-nfkd . lT3075) (string-normalize-nfkc . lT3074) (string-normalize-nfd . lT3073) (string-normalize-nfc . lT3072) (string-foldcase . lT3071) (string-downcase . lT3070) (string-ci>? . lT306f) (string-ci>=? . lT306e) (string-ci=? . lT306d) (string-ci<? . lT306c) (string-ci<=? . lT306b) (char-whitespace? . lT306a) (char-upper-case? . lT3069) (char-title-case? . lT3068) (char-numeric? . lT3067) (char-lower-case? . lT3066) (char-general-category . lT3065) (char-upcase . lT3064) (char-titlecase . lT3063) (char-foldcase . lT3062) (char-downcase . lT3061) (char-ci>? . lT3060) (char-ci>=? . lT305f) (char-ci=? . lT305e) (char-ci<? . lT305d) (char-ci<=? . lT305c) (char-alphabetic? . lT305b) (make-variable-transformer . lTba4) (identifier? . lTe5b) (generate-temporaries . lTe47) (free-identifier=? . lTe49) (syntax->datum . lTe5f) (datum->syntax . lTe5d) (bound-identifier=? . lTe4b) (record-type-descriptor? . lT305a) (record-predicate . lT3059) (record-mutator . lT3058) (record-constructor . lT3057) (record-accessor . lT3056) (make-record-type-descriptor . lT3055) (make-record-constructor-descriptor . lT3054) (record? . lT3053) (record-type-uid . lT3052) (record-type-sealed? . lT3051) (record-type-parent . lT3050) (record-type-opaque? . lT304f) (record-type-name . lT304e) (record-type-generative? . lT304d) (record-type-field-names . lT304c) (record-rtd . lT304b) (record-field-mutable? . lT304a) (delete-file . lT3049) (file-exists? . lT3048) (vector-sort! . lT3047) (vector-sort . lT3046) (list-sort . lT3045) (symbol-hash . lT3044) (string-ci-hash . lT3043) (string-hash . lT3042) (equal-hash . lT3041) (hashtable-equivalence-function . lT3040) (make-hashtable . lT303f) (hashtable-hash-function . lT303e) (make-eqv-hashtable . lT303d) (make-eq-hashtable . lT303c) (hashtable? . lT303b) (hashtable-update! . lT303a) (hashtable-size . lT3039) (hashtable-set! . lT3038) (hashtable-ref . lT3037) (hashtable-mutable? . lT3036) (hashtable-keys . lT3035) (hashtable-entries . lT3034) (hashtable-delete! . lT3033) (hashtable-copy . lT3032) (hashtable-contains? . lT3031) (hashtable-clear! . lT3030) (call-with-output-file . lT302f) (call-with-input-file . lT302e) (write-char . lT302d) (write . lT302c) (with-output-to-file . lT302b) (with-input-from-file . lT302a) (read-char . lT3029) (read . lT3028) (peek-char . lT3027) (open-output-file . lT3026) (open-input-file . lT3025) (newline . lT3024) (display . lT3023) (close-output-port . lT3022) (close-input-port . lT3021) (eof-object? . lT3020) (eof-object . lT301f) (current-error-port . lT301e) (current-output-port . lT301d) (current-input-port . lT301c) (output-port? . lT301b) (input-port? . lT301a) (utf-8-codec . lT3019) (utf-16-codec . lT3018) (transcoder-error-handling-mode . lT3017) (transcoder-eol-style . lT3016) (transcoder-codec . lT3015) (transcoded-port . lT3014) (textual-port? . lT3013) (string->bytevector . lT3012) (standard-output-port . lT3011) (standard-input-port . lT3010) (standard-error-port . lT300f) (set-port-position! . lT300e) (put-u8 . lT300d) (put-string . lT300c) (put-datum . lT300b) (put-char . lT300a) (put-bytevector . lT3009) (port? . lT3008) (port-transcoder . lT3007) (port-position . lT3006) (port-has-set-port-position!? . lT3005) (port-has-port-position? . lT3004) (port-eof? . lT3003) (output-port-buffer-mode . lT3002) (open-string-output-port . lT3001) (open-string-input-port . lT3000) (open-file-output-port . lT2fff) (open-file-input/output-port . lT2ffe) (open-file-input-port . lT2ffd) (open-bytevector-output-port . lT2ffc) (open-bytevector-input-port . lT2ffb) (native-transcoder . lT2ffa) (native-eol-style . lT2ff9) (make-transcoder . lT2ff8) (latin-1-codec . lT2ff7) (make-i/o-write-error . lT2a81) (make-i/o-read-error . lT2a6c) (make-i/o-port-error . lT2b22) (make-i/o-invalid-position-error . lT2a98) (make-i/o-filename-error . lT2ab3) (make-i/o-file-protection-error . lT2acc) (make-i/o-file-is-read-only-error . lT2ae1) (make-i/o-file-does-not-exist-error . lT2b0b) (make-i/o-file-already-exists-error . lT2af6) (make-i/o-error . lT2a57) (make-i/o-encoding-error . lT2b52) (make-i/o-decoding-error . lT2b3b) (make-custom-textual-output-port . lT2ff6) (make-custom-textual-input/output-port . lT2ff5) (make-custom-textual-input-port . lT2ff4) (make-custom-binary-output-port . lT2ff3) (make-custom-binary-input/output-port . lT2ff2) (make-custom-binary-input-port . lT2ff1) (make-bytevector . lT2ff0) (lookahead-u8 . lT2fef) (lookahead-char . lT2fee) (i/o-write-error? . lT2a83) (i/o-read-error? . lT2a6e) (i/o-port-error? . lT2b26) (i/o-invalid-position-error? . lT2a9c) (i/o-filename-error? . lT2ab7) (i/o-file-protection-error? . lT2ace) (i/o-file-is-read-only-error? . lT2ae3) (i/o-file-does-not-exist-error? . lT2b0d) (i/o-file-already-exists-error? . lT2af8) (i/o-error? . lT2a59) (i/o-error-position . lT2a9e) (i/o-error-port . lT2b28) (i/o-error-filename . lT2ab9) (i/o-encoding-error? . lT2b56) (i/o-encoding-error-char . lT2b58) (i/o-decoding-error? . lT2b3d) (get-u8 . lT2fed) (get-string-n! . lT2fec) (get-string-n . lT2feb) (get-string-all . lT2fea) (get-line . lT2fe9) (get-datum . lT2fe8) (get-char . lT2fe7) (get-bytevector-some . lT2fe6) (get-bytevector-n! . lT2fe5) (get-bytevector-n . lT2fe4) (get-bytevector-all . lT2fe3) (flush-output-port . lT2fe2) (close-port . lT2fe1) (scheme-report-environment . lTe35) (quotient . lT2fe0) (null-environment . lTe33) (remainder . lT2fdf) (modulo . lT2fde) (inexact->exact . lT2fdd) (force . lT2fdc) (exact->inexact . lT2fdb) (make-promise . lT2fda) (exit . lT2fd9) (command-line . lT2c91) (string-fill! . lT2fd8) (string-set! . lT2fd7) (set-cdr! . lT2fd6) (set-car! . lT2fd5) (remove . lT2fd4) (remv . lT2fd3) (remp . lT2fd2) (remq . lT2fd1) (partition . lT2fd0) (memv . lT2fcf) (memq . lT2fce) (memp . lT2fcd) (member . lT2fcc) (exists . lT2fcb) (for-all . lT2fca) (fold-right . lT2fc9) (fold-left . lT2fc8) (find . lT2fc7) (filter . lT2fc6) (cons* . lT2fc5) (assv . lT2fc4) (assq . lT2fc3) (assp . lT2fc2) (assoc . lT2fc1) (call-with-string-output-port . lT2fc0) (call-with-port . lT2fbf) (call-with-bytevector-output-port . lT2fbe) (bytevector->string . lT2fbd) (buffer-mode? . lT2fbc) (binary-port? . lT2fbb) (with-exception-handler . lT2fba) (raise-continuable . lT2fb9) (raise . lT2fb8) (eval . lTe39) (environment . lTe31) (make-enumeration . lT2fb7) (enum-set=? . lT2fb6) (enum-set-universe . lT2fb5) (enum-set-union . lT2fb4) (enum-set-subset? . lT2fb3) (enum-set-projection . lT2fb2) (enum-set-member? . lT2fb1) (enum-set-intersection . lT2fb0) (enum-set-indexer . lT2faf) (enum-set-difference . lT2fae) (enum-set-constructor . lT2fad) (enum-set-complement . lT2fac) (enum-set->list . lT2fab) (who-condition? . lT29cd) (warning? . lT2945) (violation? . lT2984) (undefined-violation? . lT2a44) (syntax-violation? . lT2a2b) (syntax-violation-subform . lT2a2f) (syntax-violation-form . lT2a2d) (syntax-violation . lTe59) (simple-conditions . lT2faa) (serious-condition? . lT295a) (non-continuable-violation? . lT29e4) (message-condition? . lT292e) (make-who-condition . lT29c9) (make-warning . lT2943) (make-violation . lT2982) (make-undefined-violation . lT2a42) (make-syntax-violation . lT2a25) (make-serious-condition . lT2958) (make-non-continuable-violation . lT29e2) (make-message-condition . lT292a) (make-lexical-violation . lT2a0c) (make-irritants-condition . lT29ae) (make-implementation-restriction-violation . lT29f7) (make-error . lT296d) (make-assertion-violation . lT2997) (lexical-violation? . lT2a0e) (irritants-condition? . lT29b2) (implementation-restriction-violation? . lT29f9) (error? . lT296f) (condition-who . lT29cf) (condition-predicate . lT2fa9) (condition-message . lT2930) (condition-irritants . lT29b4) (condition-accessor . lT2fa8) (condition . lT2fa7) (assertion-violation? . lT2999) (condition? . lT2fa6) (utf32->string . lT2fa5) (utf16->string . lT2fa4) (utf8->string . lT2fa3) (uint-list->bytevector . lT2fa2) (u8-list->bytevector . lT2fa1) (string->utf8 . lT2fa0) (string->utf32 . lT2f9f) (string->utf16 . lT2f9e) (sint-list->bytevector . lT2f9d) (native-endianness . lT2f9c) (bytevector? . lT2f9b) (bytevector=? . lT2f9a) (bytevector-uint-set! . lT2f99) (bytevector-uint-ref . lT2f98) (bytevector-u8-set! . lT2f97) (bytevector-u8-ref . lT2f96) (bytevector-u64-set! . lT2f95) (bytevector-u64-ref . lT2f94) (bytevector-u64-native-set! . lT2f93) (bytevector-u64-native-ref . lT2f92) (bytevector-u32-set! . lT2f91) (bytevector-u32-ref . lT2f90) (bytevector-u32-native-set! . lT2f8f) (bytevector-u32-native-ref . lT2f8e) (bytevector-u16-set! . lT2f8d) (bytevector-u16-ref . lT2f8c) (bytevector-u16-native-set! . lT2f8b) (bytevector-u16-native-ref . lT2f8a) (bytevector-sint-set! . lT2f89) (bytevector-sint-ref . lT2f88) (bytevector-s8-set! . lT2f87) (bytevector-s8-ref . lT2f86) (bytevector-s64-set! . lT2f85) (bytevector-s64-ref . lT2f84) (bytevector-s64-native-set! . lT2f83) (bytevector-s64-native-ref . lT2f82) (bytevector-s32-set! . lT2f81) (bytevector-s32-ref . lT2f80) (bytevector-s32-native-set! . lT2f7f) (bytevector-s32-native-ref . lT2f7e) (bytevector-s16-set! . lT2f7d) (bytevector-s16-ref . lT2f7c) (bytevector-s16-native-set! . lT2f7b) (bytevector-s16-native-ref . lT2f7a) (bytevector-length . lT2f79) (bytevector-ieee-single-ref . lT2f78) (bytevector-ieee-single-set! . lT2f77) (bytevector-ieee-single-native-set! . lT2f76) (bytevector-ieee-single-native-ref . lT2f75) (bytevector-ieee-double-set! . lT2f74) (bytevector-ieee-double-ref . lT2f73) (bytevector-ieee-double-native-set! . lT2f72) (bytevector-ieee-double-native-ref . lT2f71) (bytevector-fill! . lT2f70) (bytevector-copy! . lT2f6f) (bytevector-copy . lT2f6e) (bytevector->uint-list . lT2f6d) (bytevector->u8-list . lT2f6c) (bytevector->sint-list . lT2f6b) (no-nans-violation? . lT2b82) (no-infinities-violation? . lT2b6d) (make-no-nans-violation . lT2b80) (make-no-infinities-violation . lT2b6b) (real->flonum . lT2f6a) (flzero? . lT2f69) (fltruncate . lT2f68) (fltan . lT2f67) (flsqrt . lT2f66) (flsin . lT2f65) (flround . lT2f64) (flpositive? . lT2f63) (flonum? . lT2f62) (flodd? . lT2f61) (flnumerator . lT2f60) (flnegative? . lT2f5f) (flnan? . lT2f5e) (flmod0 . lT2f5d) (flmod . lT2f5c) (flmin . lT2f5b) (flmax . lT2f5a) (fllog . lT2f59) (flinteger? . lT2f58) (flinfinite? . lT2f57) (flfloor . lT2f56) (flfinite? . lT2f55) (flexpt . lT2f54) (flexp . lT2f53) (fleven? . lT2f52) (fldiv0-and-mod0 . lT2f51) (fldiv0 . lT2f50) (fldiv-and-mod . lT2f4f) (fldiv . lT2f4e) (fldenominator . lT2f4d) (flcos . lT2f4c) (flceiling . lT2f4b) (flatan . lT2f4a) (flasin . lT2f49) (flacos . lT2f48) (flabs . lT2f47) (fl>? . lT2f46) (fl>=? . lT2f45) (fl=? . lT2f44) (fl<? . lT2f43) (fl<=? . lT2f42) (fl/ . lT2f41) (fl- . lT2f40) (fl+ . lT2f3f) (fl* . lT2f3e) (fixnum->flonum . lT2f3d) (fxzero? . lT2f3c) (fxxor . lT2f3b) (fxrotate-bit-field . lT2f3a) (fxreverse-bit-field . lT2f39) (fxpositive? . lT2f38) (fxodd? . lT2f37) (fxnot . lT2f36) (fxnegative? . lT2f35) (fxmod0 . lT2f34) (fxmod . lT2f33) (fxmin . lT2f32) (fxmax . lT2f31) (fxlength . lT2f30) (fxior . lT2f2f) (fxif . lT2f2e) (fxfirst-bit-set . lT2f2d) (fxeven? . lT2f2c) (fxdiv0-and-mod0 . lT2f2b) (fxdiv0 . lT2f2a) (fxdiv-and-mod . lT2f29) (fxdiv . lT2f28) (fxcopy-bit-field . lT2f27) (fxcopy-bit . lT2f26) (fxbit-set? . lT2f25) (fxbit-field . lT2f24) (fxbit-count . lT2f23) (fxarithmetic-shift-right . lT2f22) (fxarithmetic-shift-left . lT2f21) (fxarithmetic-shift . lT2f20) (fxand . lT2f1f) (fx>? . lT2f1e) (fx>=? . lT2f1d) (fx=? . lT2f1c) (fx<? . lT2f1b) (fx<=? . lT2f1a) (fx-/carry . lT2f19) (fx- . lT2f18) (fx+/carry . lT2f17) (fx+ . lT2f16) (fx*/carry . lT2f15) (fx* . lT2f14) (greatest-fixnum . lT2f13) (least-fixnum . lT2f12) (fixnum-width . lT2f11) (fixnum? . lT2f10) (bitwise-rotate-bit-field . lT2f0f) (bitwise-reverse-bit-field . lT2f0e) (bitwise-length . lT2f0d) (bitwise-if . lT2f0c) (bitwise-first-bit-set . lT2f0b) (bitwise-copy-bit-field . lT2f0a) (bitwise-copy-bit . lT2f09) (bitwise-bit-set? . lT2f08) (bitwise-bit-field . lT2f07) (bitwise-bit-count . lT2f06) (bitwise-xor . lT2f05) (bitwise-ior . lT2f04) (bitwise-and . lT2f03) (bitwise-not . lT2f02) (bitwise-arithmetic-shift-right . lT2f01) (bitwise-arithmetic-shift-left . lT2f00) (bitwise-arithmetic-shift . lT2eff) (zero? . lT2efe) (vector? . lT2efd) (vector-set! . lT2efc) (vector-ref . lT2efb) (vector-map . lT2efa) (vector-length . lT2ef9) (vector-for-each . lT2ef8) (vector-fill! . lT2ef7) (vector->list . lT2ef6) (vector . lT2ef5) (values . lT2ef4) (truncate . lT2ef3) (tan . lT2ef2) (symbol? . lT2ef1) (symbol=? . lT2ef0) (symbol->string . lT2eef) (substring . lT2eee) (string? . lT2eed) (string>? . lT2eec) (string>=? . lT2eeb) (string=? . lT2eea) (string<? . lT2ee9) (string<=? . lT2ee8) (string-ref . lT2ee7) (string-length . lT2ee6) (string-for-each . lT2ee5) (string-copy . lT2ee4) (string-append . lT2ee3) (string->symbol . lT2ee2) (string->number . lT2ee1) (string->list . lT2ee0) (string . lT2edf) (sqrt . lT2ede) (sin . lT2edd) (round . lT2edc) (reverse . lT2edb) (real? . lT2eda) (real-valued? . lT2ed9) (real-part . lT2ed8) (rationalize . lT2ed7) (rational? . lT2ed6) (rational-valued? . lT2ed5) (procedure? . lT2ed4) (positive? . lT2ed3) (pair? . lT2ed2) (odd? . lT2ed1) (numerator . lT2ed0) (number? . lT2ecf) (number->string . lT2ece) (null? . lT2ecd) (not . lT2ecc) (negative? . lT2ecb) (nan? . lT2eca) (min . lT2ec9) (max . lT2ec8) (map . lT2ec7) (make-vector . lT2ec6) (make-string . lT2ec5) (make-rectangular . lT2ec4) (make-polar . lT2ec3) (magnitude . lT2ec2) (log . lT2ec1) (list? . lT2ec0) (list-tail . lT2ebf) (list-ref . lT2ebe) (list->vector . lT2ebd) (list->string . lT2ebc) (list . lT2ebb) (length . lT2eba) (lcm . lT2eb9) (integer? . lT2eb8) (integer-valued? . lT2eb7) (integer->char . lT2eb6) (infinite? . lT2eb5) (inexact? . lT2eb4) (inexact . lT2eb3) (imag-part . lT2eb2) (gcd . lT2eb1) (for-each . lT2eb0) (floor . lT2eaf) (finite? . lT2eae) (expt . lT2ead) (exp . lT2eac) (exact? . lT2eab) (exact-integer-sqrt . lT2eaa) (exact . lT2ea9) (even? . lT2ea8) (error . lT2ea7) (eqv? . lT2ea6) (equal? . lT2ea5) (eq? . lT2ea4) (dynamic-wind . lT2ea3) (div0-and-mod0 . lT2ea2) (mod0 . lT2ea1) (div0 . lT2ea0) (div-and-mod . lT2e9f) (mod . lT2e9e) (div . lT2e9d) (denominator . lT2e9c) (cos . lT2e9b) (cons . lT2e9a) (complex? . lT2e99) (char? . lT2e98) (char>? . lT2e97) (char>=? . lT2e96) (char=? . lT2e95) (char<? . lT2e94) (char<=? . lT2e93) (char->integer . lT2e92) (ceiling . lT2e91) (call-with-values . lT2e90) (call/cc . lT2e8f) (call-with-current-continuation . lT2e8e) (cddddr . lT2e8d) (cdddar . lT2e8c) (cddadr . lT2e8b) (cddaar . lT2e8a) (cdaddr . lT2e89) (cdadar . lT2e88) (cdaadr . lT2e87) (cdaaar . lT2e86) (cadddr . lT2e85) (caddar . lT2e84) (cadadr . lT2e83) (cadaar . lT2e82) (caaddr . lT2e81) (caadar . lT2e80) (caaadr . lT2e7f) (caaaar . lT2e7e) (cdddr . lT2e7d) (cddar . lT2e7c) (cdadr . lT2e7b) (cdaar . lT2e7a) (caddr . lT2e79) (cadar . lT2e78) (caadr . lT2e77) (caaar . lT2e76) (cddr . lT2e75) (cdar . lT2e74) (cadr . lT2e73) (caar . lT2e72) (cdr . lT2e71) (car . lT2e70) (boolean? . lT2e6f) (boolean=? . lT2e6e) (atan . lT2e6d) (assertion-violation . lT2e6c) (assertion-error . lTe53) (asin . lT2e6b) (apply . lT2e6a) (append . lT2e69) (angle . lT2e68) (acos . lT2e67) (abs . lT2e66) (/ . lT2e65) (* . lT2e64) (- . lT2e63) (+ . lT2e62) (>= . lT2e61) (> . lT2e60) (= . lT2e5f) (<= . lT2e5e) (< . lT2e5d) (library . lT2e5c) (&no-nans . lT2e5b) (&no-infinities . lT2e5a) (&i/o-encoding . lT2e59) (&i/o-decoding . lT2e58) (&i/o-port . lT2e57) (&i/o-file-does-not-exist . lT2e56) (&i/o-file-already-exists . lT2e55) (&i/o-file-is-read-only . lT2e54) (&i/o-file-protection . lT2e53) (&i/o-filename . lT2e52) (&i/o-invalid-position . lT2e51) (&i/o-write . lT2e50) (&i/o-read . lT2e4f) (&i/o . lT2e4e) (&undefined . lT2e4d) (&syntax . lT2e4c) (&lexical . lT2e4b) (&implementation-restriction . lT2e4a) (&non-continuable . lT2e49) (&who . lT2e48) (&irritants . lT2e47) (&assertion . lT2e46) (&violation . lT2e45) (&error . lT2e44) (&serious . lT2e43) (&warning . lT2e42) (&message . lT2e41) (&condition . lT2e40) (define-condition-type . lT2e3f) (define-enumeration . lT2e3e) (define-record-type . lT2e3d) (parent-rtd . lT2e3c) (nongenerative . lT2e3b) (opaque . lT2e3a) (sealed . lT2e39) (protocol . lT2e38) (parent . lT2e37) (immutable . lT2e36) (mutable . lT2e35) (fields . lT2e34) (error-handling-mode . lT2e33) (file-options . lT2e32) (buffer-mode . lT2e31) (eol-style . lT2e30) (guard . lT2e2f) (trace-define . lT2e2e) (trace-lambda . lT2e2d) (unsyntax-splicing . lT2e2c) (unsyntax . lT2e2b) (unquote-splicing . lT2e2a) (unquote . lT2e29) (_ . lT2e28) (else . lT2e27) (=> . lT2e26) (... . lT2e25) (assert . lT2e24) (endianness . lT2e23) (delay . lT2e22) (time . lT2e21) (do . lT2e20) (cond . lT2e1f) (let* . lT2e1e) (let . lT2e1d) (let*-values . lT2e1c) (let-values . lT2e1b) (identifier-syntax . lT2e1a) (with-syntax . lT2e19) (quasisyntax . lT2e18) (quasiquote . lT2e17) (syntax-rules . lT2e16) (include . lT2e15) (define-struct . lT2e14) (record-constructor-descriptor . lT2e13) (record-type-descriptor . lT2e12) (case . lT2e11) (parameterize . lT2e10) (unless . lT2e0f) (when . lT2e0e) (or . lT2e0d) (and . lT2e0c) (if . lT2e0b) (let . lT2e0a) (letrec* . lT2e09) (letrec . lT2e08) (type-descriptor . lT2e07) (case-lambda . lT2e06) (lambda . lT2e05) (syntax . lT2e04) (syntax-case . lT2e03) (quote . lT2e02) (foreign-call . lT2e01) (letrec-syntax . lT2e00) (let-syntax . lT2dff) (set! . lT2dfe) (import . lT2dfd) (begin . lT2dfc) (module . lT2dfb) (define-syntax . lT2dfa) (define . lT2df9)) '((lT2b86 core-prim . &no-nans-rcd) (lT2b84 core-prim . &no-nans-rtd) (lT2b71 core-prim . &no-infinities-rcd) (lT2b6f core-prim . &no-infinities-rtd) (lT2b5c core-prim . &i/o-encoding-rcd) (lT2b5a core-prim . &i/o-encoding-rtd) (lT2b41 core-prim . &i/o-decoding-rcd) (lT2b3f core-prim . &i/o-decoding-rtd) (lT2b2c core-prim . &i/o-port-rcd) (lT2b2a core-prim . &i/o-port-rtd) (lT2b11 core-prim . &i/o-file-does-not-exist-rcd) (lT2b0f core-prim . &i/o-file-does-not-exist-rtd) (lT2afc core-prim . &i/o-file-already-exists-rcd) (lT2afa core-prim . &i/o-file-already-exists-rtd) (lT2ae7 core-prim . &i/o-file-is-read-only-rcd) (lT2ae5 core-prim . &i/o-file-is-read-only-rtd) (lT2ad2 core-prim . &i/o-file-protection-rcd) (lT2ad0 core-prim . &i/o-file-protection-rtd) (lT2abd core-prim . &i/o-filename-rcd) (lT2abb core-prim . &i/o-filename-rtd) (lT2aa2 core-prim . &i/o-invalid-position-rcd) (lT2aa0 core-prim . &i/o-invalid-position-rtd) (lT2a87 core-prim . &i/o-write-rcd) (lT2a85 core-prim . &i/o-write-rtd) (lT2a72 core-prim . &i/o-read-rcd) (lT2a70 core-prim . &i/o-read-rtd) (lT2a5d core-prim . &i/o-rcd) (lT2a5b core-prim . &i/o-rtd) (lT2a48 core-prim . &undefined-rcd) (lT2a46 core-prim . &undefined-rtd) (lT2a33 core-prim . &syntax-rcd) (lT2a31 core-prim . &syntax-rtd) (lT2a12 core-prim . &lexical-rcd) (lT2a10 core-prim . &lexical-rtd) (lT29fd core-prim . &implementation-restriction-rcd) (lT29fb core-prim . &implementation-restriction-rtd) (lT29e8 core-prim . &non-continuable-rcd) (lT29e6 core-prim . &non-continuable-rtd) (lT29d3 core-prim . &who-rcd) (lT29d1 core-prim . &who-rtd) (lT29b8 core-prim . &irritants-rcd) (lT29b6 core-prim . &irritants-rtd) (lT299d core-prim . &assertion-rcd) (lT299b core-prim . &assertion-rtd) (lT2988 core-prim . &violation-rcd) (lT2986 core-prim . &violation-rtd) (lT2973 core-prim . &error-rcd) (lT2971 core-prim . &error-rtd) (lT295e core-prim . &serious-rcd) (lT295c core-prim . &serious-rtd) (lT2949 core-prim . &warning-rcd) (lT2947 core-prim . &warning-rtd) (lT2934 core-prim . &message-rcd) (lT2932 core-prim . &message-rtd) (lT28d5 core-prim . &condition-rcd) (lT28d3 core-prim . &condition-rtd) (lTe55 core-prim . syntax-error) (lTd79 core-prim . syntax-dispatch) (lT3121 core-prim . pretty-print) (lT3120 core-prim . eval-core) (lT311f core-prim . set-symbol-value!) (lT311e core-prim . symbol-value) (lT311d core-prim . gensym) (lT311c core-prim . void) (lT2c97 core-prim . load) (lTe67 core-prim . interaction-environment) (lT311b core-prim . char-ready?) (lT311a core-prim . regexp?) (lT3119 core-prim . read-line) (lT3118 core-prim . gensym-prefix-set!) (lT3117 core-prim . ungensym) (lT3116 core-prim . alist->eq-hash-table) (lT3115 core-prim . assoc-ref) (lT3114 core-prim . print) (lT3113 core-prim . format) (lT3112 core-prim . host-os) (lT7b2 core-prim . library-path) (lT3111 core-prim . standard-library-path) (lT3110 core-prim . file-newer?) (lT310f core-prim . stat-mtime) (lT310e core-prim . write-to-file) (lT310d core-prim . file->list) (lT310c core-prim . file->string) (lT310b core-prim . digit->integer) (lT310a core-prim . call-with-string-input-port) (lT3109 core-prim . call-with-string-io) (lT3108 core-prim . string-split) (lT3107 core-prim . bytevector-for-each) (lT3106 core-prim . string->regexp) (lT3105 core-prim . rxmatch) (lT3104 core-prim . regexp-replace-all) (lT3103 core-prim . hashtable-for-each) (lT59d core-prim . mosh-cache-dir) (lT3102 core-prim . call-process) (lT3101 core-prim . local-tz-offset) (lT3100 core-prim . microseconds) (lT30ff core-prim . directory-list) (lT30fe core-prim . set-current-directory!) (lT30fd core-prim . expand-path) (lT30fc core-prim . current-directory) (lT30fb core-prim . %spawn) (lT30fa core-prim . %waitpid) (lT30f9 core-prim . simple-struct-name) (lT30f8 core-prim . simple-struct-set!) (lT30f7 core-prim . simple-struct-ref) (lT30f6 core-prim . make-simple-struct) (lT30f5 core-prim . simple-struct?) (lT30f4 core-prim . pointer-ref-c-int64) (lT30f3 core-prim . pointer-ref-c-int32) (lT30f2 core-prim . pointer-ref-c-int16) (lT30f1 core-prim . pointer-ref-c-int8) (lT30f0 core-prim . pointer-ref-c-uint64) (lT30ef core-prim . pointer-ref-c-uint32) (lT30ee core-prim . pointer-ref-c-uint16) (lT30ed core-prim . pointer-ref-c-uint8) (lT30ec core-prim . pointer-set-c-uint64!) (lT30eb core-prim . pointer-set-c-uint32!) (lT30ea core-prim . pointer-set-c-uint16!) (lT30e9 core-prim . pointer-set-c-uint8!) (lT30e8 core-prim . pointer-set-c-int64!) (lT30e7 core-prim . pointer-set-c-int32!) (lT30e6 core-prim . pointer-set-c-int16!) (lT30e5 core-prim . pointer-set-c-int8!) (lT30e4 core-prim . pointer-set-c-pointer!) (lT30e3 core-prim . pointer-set-c-double!) (lT30e2 core-prim . pointer-set-c-float!) (lT30e1 core-prim . pointer-set-c-long-long!) (lT30e0 core-prim . pointer-set-c-long!) (lT30df core-prim . pointer-set-c-int!) (lT30de core-prim . pointer-set-c-short!) (lT30dd core-prim . pointer-set-c-char!) (lT30dc core-prim . pointer-ref-c-pointer) (lT30db core-prim . pointer-ref-c-double) (lT30da core-prim . pointer-ref-c-float) (lT30d9 core-prim . pointer-ref-c-unsigned-long-long) (lT30d8 core-prim . pointer-ref-c-signed-long-long) (lT30d7 core-prim . pointer-ref-c-unsigned-long) (lT30d6 core-prim . pointer-ref-c-signed-long) (lT30d5 core-prim . pointer-ref-c-unsigned-int) (lT30d4 core-prim . pointer-ref-c-signed-int) (lT30d3 core-prim . pointer-ref-c-unsigned-short) (lT30d2 core-prim . pointer-ref-c-signed-short) (lT30d1 core-prim . pointer-ref-c-unsigned-char) (lT30d0 core-prim . pointer-ref-c-signed-char) (lT30cf core-prim . pointer->integer) (lT30ce core-prim . integer->pointer) (lT30cd core-prim . pointer?) (lT30cc core-prim . shared-errno) (lT30cb core-prim . %ffi-free) (lT30ca core-prim . %ffi-malloc) (lT30c9 core-prim . %ffi-supported?) (lT30c8 core-prim . %ffi-pointer->string) (lT30c7 core-prim . %ffi-call->string-or-zero) (lT30c6 core-prim . %ffi-call->double) (lT30c5 core-prim . %ffi-call->void*) (lT30c4 core-prim . %ffi-call->void) (lT30c3 core-prim . %ffi-call->char) (lT30c2 core-prim . %ffi-call->int) (lT30c1 core-prim . %ffi-lookup) (lT30c0 core-prim . %ffi-open) (lT30bf core-prim . %fork) (lT30be core-prim . %pipe) (lT30bd core-prim . p) (lT30bc core-prim . open-output-string) (lT30bb core-prim . get-output-string) (lT30ba core-prim . file-stat-ctime) (lT30b9 core-prim . file-stat-atime) (lT30b8 core-prim . file-stat-mtime) (lT30b7 core-prim . file-size-in-bytes) (lT30b6 core-prim . file-writable?) (lT30b5 core-prim . file-executable?) (lT30b4 core-prim . file-readable?) (lT30b3 core-prim . file-regular?) (lT30b2 core-prim . file-symbolic-link?) (lT30b1 core-prim . file-directory?) (lT30b0 core-prim . create-symbolic-link) (lT30af core-prim . rename-file) (lT30ae core-prim . delete-directory) (lT30ad core-prim . create-directory) (lT30ac core-prim . create-mosh-cache-dir) (lT30ab core-prim . get-environment-variables) (lT30aa core-prim . current-exception-handler) (lT30a9 core-prim . get-environment-variable) (lT30a8 core-prim . join-wraps) (lT30a7 core-prim . id->real-label) (lT30a6 core-prim . same-marks?) (lT30a5 core-prim . same-marks*?) (lT30a4 core-prim . get-timeofday) (lT30a3 core-prim . get-command-line) (lT30a2 core-prim . sys-display) (lT30a1 core-prim . whereis) (lT30a0 core-prim . register) (lT309f core-prim . vm-join!) (lT309e core-prim . vm-set-value!) (lT309d core-prim . vm?) (lT309c core-prim . main-vm?) (lT309b core-prim . vm-eval) (lT309a core-prim . vm-self) (lT3099 core-prim . vm-start!) (lT3098 core-prim . make-vm) (lT3097 core-prim . mutex-try-lock!) (lT3096 core-prim . mutex-unlock!) (lT3095 core-prim . mutex-lock!) (lT3094 core-prim . mutex?) (lT3093 core-prim . make-mutex) (lT3092 core-prim . condition-variable-notify-all!) (lT3091 core-prim . condition-variable-notify!) (lT3090 core-prim . condition-variable-wait!) (lT308f core-prim . make-condition-variable) (lT308e core-prim . mosh-executable-path) (lT308d core-prim . make-file-options) (lT308c core-prim . source-info) (lT308b core-prim . make-compiler-instruction) (lT308a core-prim . make-instruction) (lT3089 core-prim . set-source-info!) (lT3088 core-prim . bignum?) (lT3087 core-prim . fast-equal?) (lT3086 core-prim . fasl-read) (lT3085 core-prim . fasl-write) (lT3084 core-prim . time-usage) (lT3083 core-prim . os-constant) (lT3082 core-prim . disasm) (lT59b core-prim . make-parameter) (lT3081 core-prim . socket-port) (lT3080 core-prim . socket-shutdown) (lT307f core-prim . socket-close) (lT307e core-prim . socket-send) (lT307d core-prim . socket-recv!) (lT307c core-prim . socket-recv) (lT307b core-prim . make-server-socket) (lT307a core-prim . make-client-socket) (lT3079 core-prim . socket-accept) (lT3078 core-prim . socket?) (lT3077 core-prim . string-upcase) (lT3076 core-prim . string-titlecase) (lT3075 core-prim . string-normalize-nfkd) (lT3074 core-prim . string-normalize-nfkc) (lT3073 core-prim . string-normalize-nfd) (lT3072 core-prim . string-normalize-nfc) (lT3071 core-prim . string-foldcase) (lT3070 core-prim . string-downcase) (lT306f core-prim . string-ci>?) (lT306e core-prim . string-ci>=?) (lT306d core-prim . string-ci=?) (lT306c core-prim . string-ci<?) (lT306b core-prim . string-ci<=?) (lT306a core-prim . char-whitespace?) (lT3069 core-prim . char-upper-case?) (lT3068 core-prim . char-title-case?) (lT3067 core-prim . char-numeric?) (lT3066 core-prim . char-lower-case?) (lT3065 core-prim . char-general-category) (lT3064 core-prim . char-upcase) (lT3063 core-prim . char-titlecase) (lT3062 core-prim . char-foldcase) (lT3061 core-prim . char-downcase) (lT3060 core-prim . char-ci>?) (lT305f core-prim . char-ci>=?) (lT305e core-prim . char-ci=?) (lT305d core-prim . char-ci<?) (lT305c core-prim . char-ci<=?) (lT305b core-prim . char-alphabetic?) (lTba4 core-prim . make-variable-transformer) (lTe5b core-prim . identifier?) (lTe47 core-prim . generate-temporaries) (lTe49 core-prim . free-identifier=?) (lTe5f core-prim . syntax->datum) (lTe5d core-prim . datum->syntax) (lTe4b core-prim . bound-identifier=?) (lT305a core-prim . record-type-descriptor?) (lT3059 core-prim . record-predicate) (lT3058 core-prim . record-mutator) (lT3057 core-prim . record-constructor) (lT3056 core-prim . record-accessor) (lT3055 core-prim . make-record-type-descriptor) (lT3054 core-prim . make-record-constructor-descriptor) (lT3053 core-prim . record?) (lT3052 core-prim . record-type-uid) (lT3051 core-prim . record-type-sealed?) (lT3050 core-prim . record-type-parent) (lT304f core-prim . record-type-opaque?) (lT304e core-prim . record-type-name) (lT304d core-prim . record-type-generative?) (lT304c core-prim . record-type-field-names) (lT304b core-prim . record-rtd) (lT304a core-prim . record-field-mutable?) (lT3049 core-prim . delete-file) (lT3048 core-prim . file-exists?) (lT3047 core-prim . vector-sort!) (lT3046 core-prim . vector-sort) (lT3045 core-prim . list-sort) (lT3044 core-prim . symbol-hash) (lT3043 core-prim . string-ci-hash) (lT3042 core-prim . string-hash) (lT3041 core-prim . equal-hash) (lT3040 core-prim . hashtable-equivalence-function) (lT303f core-prim . make-hashtable) (lT303e core-prim . hashtable-hash-function) (lT303d core-prim . make-eqv-hashtable) (lT303c core-prim . make-eq-hashtable) (lT303b core-prim . hashtable?) (lT303a core-prim . hashtable-update!) (lT3039 core-prim . hashtable-size) (lT3038 core-prim . hashtable-set!) (lT3037 core-prim . hashtable-ref) (lT3036 core-prim . hashtable-mutable?) (lT3035 core-prim . hashtable-keys) (lT3034 core-prim . hashtable-entries) (lT3033 core-prim . hashtable-delete!) (lT3032 core-prim . hashtable-copy) (lT3031 core-prim . hashtable-contains?) (lT3030 core-prim . hashtable-clear!) (lT302f core-prim . call-with-output-file) (lT302e core-prim . call-with-input-file) (lT302d core-prim . write-char) (lT302c core-prim . write) (lT302b core-prim . with-output-to-file) (lT302a core-prim . with-input-from-file) (lT3029 core-prim . read-char) (lT3028 core-prim . read) (lT3027 core-prim . peek-char) (lT3026 core-prim . open-output-file) (lT3025 core-prim . open-input-file) (lT3024 core-prim . newline) (lT3023 core-prim . display) (lT3022 core-prim . close-output-port) (lT3021 core-prim . close-input-port) (lT3020 core-prim . eof-object?) (lT301f core-prim . eof-object) (lT301e core-prim . current-error-port) (lT301d core-prim . current-output-port) (lT301c core-prim . current-input-port) (lT301b core-prim . output-port?) (lT301a core-prim . input-port?) (lT3019 core-prim . utf-8-codec) (lT3018 core-prim . utf-16-codec) (lT3017 core-prim . transcoder-error-handling-mode) (lT3016 core-prim . transcoder-eol-style) (lT3015 core-prim . transcoder-codec) (lT3014 core-prim . transcoded-port) (lT3013 core-prim . textual-port?) (lT3012 core-prim . string->bytevector) (lT3011 core-prim . standard-output-port) (lT3010 core-prim . standard-input-port) (lT300f core-prim . standard-error-port) (lT300e core-prim . set-port-position!) (lT300d core-prim . put-u8) (lT300c core-prim . put-string) (lT300b core-prim . put-datum) (lT300a core-prim . put-char) (lT3009 core-prim . put-bytevector) (lT3008 core-prim . port?) (lT3007 core-prim . port-transcoder) (lT3006 core-prim . port-position) (lT3005 core-prim . port-has-set-port-position!?) (lT3004 core-prim . port-has-port-position?) (lT3003 core-prim . port-eof?) (lT3002 core-prim . output-port-buffer-mode) (lT3001 core-prim . open-string-output-port) (lT3000 core-prim . open-string-input-port) (lT2fff core-prim . open-file-output-port) (lT2ffe core-prim . open-file-input/output-port) (lT2ffd core-prim . open-file-input-port) (lT2ffc core-prim . open-bytevector-output-port) (lT2ffb core-prim . open-bytevector-input-port) (lT2ffa core-prim . native-transcoder) (lT2ff9 core-prim . native-eol-style) (lT2ff8 core-prim . make-transcoder) (lT2ff7 core-prim . latin-1-codec) (lT2a81 core-prim . make-i/o-write-error) (lT2a6c core-prim . make-i/o-read-error) (lT2b22 core-prim . make-i/o-port-error) (lT2a98 core-prim . make-i/o-invalid-position-error) (lT2ab3 core-prim . make-i/o-filename-error) (lT2acc core-prim . make-i/o-file-protection-error) (lT2ae1 core-prim . make-i/o-file-is-read-only-error) (lT2b0b core-prim . make-i/o-file-does-not-exist-error) (lT2af6 core-prim . make-i/o-file-already-exists-error) (lT2a57 core-prim . make-i/o-error) (lT2b52 core-prim . make-i/o-encoding-error) (lT2b3b core-prim . make-i/o-decoding-error) (lT2ff6 core-prim . make-custom-textual-output-port) (lT2ff5 core-prim . make-custom-textual-input/output-port) (lT2ff4 core-prim . make-custom-textual-input-port) (lT2ff3 core-prim . make-custom-binary-output-port) (lT2ff2 core-prim . make-custom-binary-input/output-port) (lT2ff1 core-prim . make-custom-binary-input-port) (lT2ff0 core-prim . make-bytevector) (lT2fef core-prim . lookahead-u8) (lT2fee core-prim . lookahead-char) (lT2a83 core-prim . i/o-write-error?) (lT2a6e core-prim . i/o-read-error?) (lT2b26 core-prim . i/o-port-error?) (lT2a9c core-prim . i/o-invalid-position-error?) (lT2ab7 core-prim . i/o-filename-error?) (lT2ace core-prim . i/o-file-protection-error?) (lT2ae3 core-prim . i/o-file-is-read-only-error?) (lT2b0d core-prim . i/o-file-does-not-exist-error?) (lT2af8 core-prim . i/o-file-already-exists-error?) (lT2a59 core-prim . i/o-error?) (lT2a9e core-prim . i/o-error-position) (lT2b28 core-prim . i/o-error-port) (lT2ab9 core-prim . i/o-error-filename) (lT2b56 core-prim . i/o-encoding-error?) (lT2b58 core-prim . i/o-encoding-error-char) (lT2b3d core-prim . i/o-decoding-error?) (lT2fed core-prim . get-u8) (lT2fec core-prim . get-string-n!) (lT2feb core-prim . get-string-n) (lT2fea core-prim . get-string-all) (lT2fe9 core-prim . get-line) (lT2fe8 core-prim . get-datum) (lT2fe7 core-prim . get-char) (lT2fe6 core-prim . get-bytevector-some) (lT2fe5 core-prim . get-bytevector-n!) (lT2fe4 core-prim . get-bytevector-n) (lT2fe3 core-prim . get-bytevector-all) (lT2fe2 core-prim . flush-output-port) (lT2fe1 core-prim . close-port) (lTe35 core-prim . scheme-report-environment) (lT2fe0 core-prim . quotient) (lTe33 core-prim . null-environment) (lT2fdf core-prim . remainder) (lT2fde core-prim . modulo) (lT2fdd core-prim . inexact->exact) (lT2fdc core-prim . force) (lT2fdb core-prim . exact->inexact) (lT2fda core-prim . make-promise) (lT2fd9 core-prim . exit) (lT2c91 core-prim . command-line) (lT2fd8 core-prim . string-fill!) (lT2fd7 core-prim . string-set!) (lT2fd6 core-prim . set-cdr!) (lT2fd5 core-prim . set-car!) (lT2fd4 core-prim . remove) (lT2fd3 core-prim . remv) (lT2fd2 core-prim . remp) (lT2fd1 core-prim . remq) (lT2fd0 core-prim . partition) (lT2fcf core-prim . memv) (lT2fce core-prim . memq) (lT2fcd core-prim . memp) (lT2fcc core-prim . member) (lT2fcb core-prim . exists) (lT2fca core-prim . for-all) (lT2fc9 core-prim . fold-right) (lT2fc8 core-prim . fold-left) (lT2fc7 core-prim . find) (lT2fc6 core-prim . filter) (lT2fc5 core-prim . cons*) (lT2fc4 core-prim . assv) (lT2fc3 core-prim . assq) (lT2fc2 core-prim . assp) (lT2fc1 core-prim . assoc) (lT2fc0 core-prim . call-with-string-output-port) (lT2fbf core-prim . call-with-port) (lT2fbe core-prim . call-with-bytevector-output-port) (lT2fbd core-prim . bytevector->string) (lT2fbc core-prim . buffer-mode?) (lT2fbb core-prim . binary-port?) (lT2fba core-prim . with-exception-handler) (lT2fb9 core-prim . raise-continuable) (lT2fb8 core-prim . raise) (lTe39 core-prim . eval) (lTe31 core-prim . environment) (lT2fb7 core-prim . make-enumeration) (lT2fb6 core-prim . enum-set=?) (lT2fb5 core-prim . enum-set-universe) (lT2fb4 core-prim . enum-set-union) (lT2fb3 core-prim . enum-set-subset?) (lT2fb2 core-prim . enum-set-projection) (lT2fb1 core-prim . enum-set-member?) (lT2fb0 core-prim . enum-set-intersection) (lT2faf core-prim . enum-set-indexer) (lT2fae core-prim . enum-set-difference) (lT2fad core-prim . enum-set-constructor) (lT2fac core-prim . enum-set-complement) (lT2fab core-prim . enum-set->list) (lT29cd core-prim . who-condition?) (lT2945 core-prim . warning?) (lT2984 core-prim . violation?) (lT2a44 core-prim . undefined-violation?) (lT2a2b core-prim . syntax-violation?) (lT2a2f core-prim . syntax-violation-subform) (lT2a2d core-prim . syntax-violation-form) (lTe59 core-prim . syntax-violation) (lT2faa core-prim . simple-conditions) (lT295a core-prim . serious-condition?) (lT29e4 core-prim . non-continuable-violation?) (lT292e core-prim . message-condition?) (lT29c9 core-prim . make-who-condition) (lT2943 core-prim . make-warning) (lT2982 core-prim . make-violation) (lT2a42 core-prim . make-undefined-violation) (lT2a25 core-prim . make-syntax-violation) (lT2958 core-prim . make-serious-condition) (lT29e2 core-prim . make-non-continuable-violation) (lT292a core-prim . make-message-condition) (lT2a0c core-prim . make-lexical-violation) (lT29ae core-prim . make-irritants-condition) (lT29f7 core-prim . make-implementation-restriction-violation) (lT296d core-prim . make-error) (lT2997 core-prim . make-assertion-violation) (lT2a0e core-prim . lexical-violation?) (lT29b2 core-prim . irritants-condition?) (lT29f9 core-prim . implementation-restriction-violation?) (lT296f core-prim . error?) (lT29cf core-prim . condition-who) (lT2fa9 core-prim . condition-predicate) (lT2930 core-prim . condition-message) (lT29b4 core-prim . condition-irritants) (lT2fa8 core-prim . condition-accessor) (lT2fa7 core-prim . condition) (lT2999 core-prim . assertion-violation?) (lT2fa6 core-prim . condition?) (lT2fa5 core-prim . utf32->string) (lT2fa4 core-prim . utf16->string) (lT2fa3 core-prim . utf8->string) (lT2fa2 core-prim . uint-list->bytevector) (lT2fa1 core-prim . u8-list->bytevector) (lT2fa0 core-prim . string->utf8) (lT2f9f core-prim . string->utf32) (lT2f9e core-prim . string->utf16) (lT2f9d core-prim . sint-list->bytevector) (lT2f9c core-prim . native-endianness) (lT2f9b core-prim . bytevector?) (lT2f9a core-prim . bytevector=?) (lT2f99 core-prim . bytevector-uint-set!) (lT2f98 core-prim . bytevector-uint-ref) (lT2f97 core-prim . bytevector-u8-set!) (lT2f96 core-prim . bytevector-u8-ref) (lT2f95 core-prim . bytevector-u64-set!) (lT2f94 core-prim . bytevector-u64-ref) (lT2f93 core-prim . bytevector-u64-native-set!) (lT2f92 core-prim . bytevector-u64-native-ref) (lT2f91 core-prim . bytevector-u32-set!) (lT2f90 core-prim . bytevector-u32-ref) (lT2f8f core-prim . bytevector-u32-native-set!) (lT2f8e core-prim . bytevector-u32-native-ref) (lT2f8d core-prim . bytevector-u16-set!) (lT2f8c core-prim . bytevector-u16-ref) (lT2f8b core-prim . bytevector-u16-native-set!) (lT2f8a core-prim . bytevector-u16-native-ref) (lT2f89 core-prim . bytevector-sint-set!) (lT2f88 core-prim . bytevector-sint-ref) (lT2f87 core-prim . bytevector-s8-set!) (lT2f86 core-prim . bytevector-s8-ref) (lT2f85 core-prim . bytevector-s64-set!) (lT2f84 core-prim . bytevector-s64-ref) (lT2f83 core-prim . bytevector-s64-native-set!) (lT2f82 core-prim . bytevector-s64-native-ref) (lT2f81 core-prim . bytevector-s32-set!) (lT2f80 core-prim . bytevector-s32-ref) (lT2f7f core-prim . bytevector-s32-native-set!) (lT2f7e core-prim . bytevector-s32-native-ref) (lT2f7d core-prim . bytevector-s16-set!) (lT2f7c core-prim . bytevector-s16-ref) (lT2f7b core-prim . bytevector-s16-native-set!) (lT2f7a core-prim . bytevector-s16-native-ref) (lT2f79 core-prim . bytevector-length) (lT2f78 core-prim . bytevector-ieee-single-ref) (lT2f77 core-prim . bytevector-ieee-single-set!) (lT2f76 core-prim . bytevector-ieee-single-native-set!) (lT2f75 core-prim . bytevector-ieee-single-native-ref) (lT2f74 core-prim . bytevector-ieee-double-set!) (lT2f73 core-prim . bytevector-ieee-double-ref) (lT2f72 core-prim . bytevector-ieee-double-native-set!) (lT2f71 core-prim . bytevector-ieee-double-native-ref) (lT2f70 core-prim . bytevector-fill!) (lT2f6f core-prim . bytevector-copy!) (lT2f6e core-prim . bytevector-copy) (lT2f6d core-prim . bytevector->uint-list) (lT2f6c core-prim . bytevector->u8-list) (lT2f6b core-prim . bytevector->sint-list) (lT2b82 core-prim . no-nans-violation?) (lT2b6d core-prim . no-infinities-violation?) (lT2b80 core-prim . make-no-nans-violation) (lT2b6b core-prim . make-no-infinities-violation) (lT2f6a core-prim . real->flonum) (lT2f69 core-prim . flzero?) (lT2f68 core-prim . fltruncate) (lT2f67 core-prim . fltan) (lT2f66 core-prim . flsqrt) (lT2f65 core-prim . flsin) (lT2f64 core-prim . flround) (lT2f63 core-prim . flpositive?) (lT2f62 core-prim . flonum?) (lT2f61 core-prim . flodd?) (lT2f60 core-prim . flnumerator) (lT2f5f core-prim . flnegative?) (lT2f5e core-prim . flnan?) (lT2f5d core-prim . flmod0) (lT2f5c core-prim . flmod) (lT2f5b core-prim . flmin) (lT2f5a core-prim . flmax) (lT2f59 core-prim . fllog) (lT2f58 core-prim . flinteger?) (lT2f57 core-prim . flinfinite?) (lT2f56 core-prim . flfloor) (lT2f55 core-prim . flfinite?) (lT2f54 core-prim . flexpt) (lT2f53 core-prim . flexp) (lT2f52 core-prim . fleven?) (lT2f51 core-prim . fldiv0-and-mod0) (lT2f50 core-prim . fldiv0) (lT2f4f core-prim . fldiv-and-mod) (lT2f4e core-prim . fldiv) (lT2f4d core-prim . fldenominator) (lT2f4c core-prim . flcos) (lT2f4b core-prim . flceiling) (lT2f4a core-prim . flatan) (lT2f49 core-prim . flasin) (lT2f48 core-prim . flacos) (lT2f47 core-prim . flabs) (lT2f46 core-prim . fl>?) (lT2f45 core-prim . fl>=?) (lT2f44 core-prim . fl=?) (lT2f43 core-prim . fl<?) (lT2f42 core-prim . fl<=?) (lT2f41 core-prim . fl/) (lT2f40 core-prim . fl-) (lT2f3f core-prim . fl+) (lT2f3e core-prim . fl*) (lT2f3d core-prim . fixnum->flonum) (lT2f3c core-prim . fxzero?) (lT2f3b core-prim . fxxor) (lT2f3a core-prim . fxrotate-bit-field) (lT2f39 core-prim . fxreverse-bit-field) (lT2f38 core-prim . fxpositive?) (lT2f37 core-prim . fxodd?) (lT2f36 core-prim . fxnot) (lT2f35 core-prim . fxnegative?) (lT2f34 core-prim . fxmod0) (lT2f33 core-prim . fxmod) (lT2f32 core-prim . fxmin) (lT2f31 core-prim . fxmax) (lT2f30 core-prim . fxlength) (lT2f2f core-prim . fxior) (lT2f2e core-prim . fxif) (lT2f2d core-prim . fxfirst-bit-set) (lT2f2c core-prim . fxeven?) (lT2f2b core-prim . fxdiv0-and-mod0) (lT2f2a core-prim . fxdiv0) (lT2f29 core-prim . fxdiv-and-mod) (lT2f28 core-prim . fxdiv) (lT2f27 core-prim . fxcopy-bit-field) (lT2f26 core-prim . fxcopy-bit) (lT2f25 core-prim . fxbit-set?) (lT2f24 core-prim . fxbit-field) (lT2f23 core-prim . fxbit-count) (lT2f22 core-prim . fxarithmetic-shift-right) (lT2f21 core-prim . fxarithmetic-shift-left) (lT2f20 core-prim . fxarithmetic-shift) (lT2f1f core-prim . fxand) (lT2f1e core-prim . fx>?) (lT2f1d core-prim . fx>=?) (lT2f1c core-prim . fx=?) (lT2f1b core-prim . fx<?) (lT2f1a core-prim . fx<=?) (lT2f19 core-prim . fx-/carry) (lT2f18 core-prim . fx-) (lT2f17 core-prim . fx+/carry) (lT2f16 core-prim . fx+) (lT2f15 core-prim . fx*/carry) (lT2f14 core-prim . fx*) (lT2f13 core-prim . greatest-fixnum) (lT2f12 core-prim . least-fixnum) (lT2f11 core-prim . fixnum-width) (lT2f10 core-prim . fixnum?) (lT2f0f core-prim . bitwise-rotate-bit-field) (lT2f0e core-prim . bitwise-reverse-bit-field) (lT2f0d core-prim . bitwise-length) (lT2f0c core-prim . bitwise-if) (lT2f0b core-prim . bitwise-first-bit-set) (lT2f0a core-prim . bitwise-copy-bit-field) (lT2f09 core-prim . bitwise-copy-bit) (lT2f08 core-prim . bitwise-bit-set?) (lT2f07 core-prim . bitwise-bit-field) (lT2f06 core-prim . bitwise-bit-count) (lT2f05 core-prim . bitwise-xor) (lT2f04 core-prim . bitwise-ior) (lT2f03 core-prim . bitwise-and) (lT2f02 core-prim . bitwise-not) (lT2f01 core-prim . bitwise-arithmetic-shift-right) (lT2f00 core-prim . bitwise-arithmetic-shift-left) (lT2eff core-prim . bitwise-arithmetic-shift) (lT2efe core-prim . zero?) (lT2efd core-prim . vector?) (lT2efc core-prim . vector-set!) (lT2efb core-prim . vector-ref) (lT2efa core-prim . vector-map) (lT2ef9 core-prim . vector-length) (lT2ef8 core-prim . vector-for-each) (lT2ef7 core-prim . vector-fill!) (lT2ef6 core-prim . vector->list) (lT2ef5 core-prim . vector) (lT2ef4 core-prim . values) (lT2ef3 core-prim . truncate) (lT2ef2 core-prim . tan) (lT2ef1 core-prim . symbol?) (lT2ef0 core-prim . symbol=?) (lT2eef core-prim . symbol->string) (lT2eee core-prim . substring) (lT2eed core-prim . string?) (lT2eec core-prim . string>?) (lT2eeb core-prim . string>=?) (lT2eea core-prim . string=?) (lT2ee9 core-prim . string<?) (lT2ee8 core-prim . string<=?) (lT2ee7 core-prim . string-ref) (lT2ee6 core-prim . string-length) (lT2ee5 core-prim . string-for-each) (lT2ee4 core-prim . string-copy) (lT2ee3 core-prim . string-append) (lT2ee2 core-prim . string->symbol) (lT2ee1 core-prim . string->number) (lT2ee0 core-prim . string->list) (lT2edf core-prim . string) (lT2ede core-prim . sqrt) (lT2edd core-prim . sin) (lT2edc core-prim . round) (lT2edb core-prim . reverse) (lT2eda core-prim . real?) (lT2ed9 core-prim . real-valued?) (lT2ed8 core-prim . real-part) (lT2ed7 core-prim . rationalize) (lT2ed6 core-prim . rational?) (lT2ed5 core-prim . rational-valued?) (lT2ed4 core-prim . procedure?) (lT2ed3 core-prim . positive?) (lT2ed2 core-prim . pair?) (lT2ed1 core-prim . odd?) (lT2ed0 core-prim . numerator) (lT2ecf core-prim . number?) (lT2ece core-prim . number->string) (lT2ecd core-prim . null?) (lT2ecc core-prim . not) (lT2ecb core-prim . negative?) (lT2eca core-prim . nan?) (lT2ec9 core-prim . min) (lT2ec8 core-prim . max) (lT2ec7 core-prim . map) (lT2ec6 core-prim . make-vector) (lT2ec5 core-prim . make-string) (lT2ec4 core-prim . make-rectangular) (lT2ec3 core-prim . make-polar) (lT2ec2 core-prim . magnitude) (lT2ec1 core-prim . log) (lT2ec0 core-prim . list?) (lT2ebf core-prim . list-tail) (lT2ebe core-prim . list-ref) (lT2ebd core-prim . list->vector) (lT2ebc core-prim . list->string) (lT2ebb core-prim . list) (lT2eba core-prim . length) (lT2eb9 core-prim . lcm) (lT2eb8 core-prim . integer?) (lT2eb7 core-prim . integer-valued?) (lT2eb6 core-prim . integer->char) (lT2eb5 core-prim . infinite?) (lT2eb4 core-prim . inexact?) (lT2eb3 core-prim . inexact) (lT2eb2 core-prim . imag-part) (lT2eb1 core-prim . gcd) (lT2eb0 core-prim . for-each) (lT2eaf core-prim . floor) (lT2eae core-prim . finite?) (lT2ead core-prim . expt) (lT2eac core-prim . exp) (lT2eab core-prim . exact?) (lT2eaa core-prim . exact-integer-sqrt) (lT2ea9 core-prim . exact) (lT2ea8 core-prim . even?) (lT2ea7 core-prim . error) (lT2ea6 core-prim . eqv?) (lT2ea5 core-prim . equal?) (lT2ea4 core-prim . eq?) (lT2ea3 core-prim . dynamic-wind) (lT2ea2 core-prim . div0-and-mod0) (lT2ea1 core-prim . mod0) (lT2ea0 core-prim . div0) (lT2e9f core-prim . div-and-mod) (lT2e9e core-prim . mod) (lT2e9d core-prim . div) (lT2e9c core-prim . denominator) (lT2e9b core-prim . cos) (lT2e9a core-prim . cons) (lT2e99 core-prim . complex?) (lT2e98 core-prim . char?) (lT2e97 core-prim . char>?) (lT2e96 core-prim . char>=?) (lT2e95 core-prim . char=?) (lT2e94 core-prim . char<?) (lT2e93 core-prim . char<=?) (lT2e92 core-prim . char->integer) (lT2e91 core-prim . ceiling) (lT2e90 core-prim . call-with-values) (lT2e8f core-prim . call/cc) (lT2e8e core-prim . call-with-current-continuation) (lT2e8d core-prim . cddddr) (lT2e8c core-prim . cdddar) (lT2e8b core-prim . cddadr) (lT2e8a core-prim . cddaar) (lT2e89 core-prim . cdaddr) (lT2e88 core-prim . cdadar) (lT2e87 core-prim . cdaadr) (lT2e86 core-prim . cdaaar) (lT2e85 core-prim . cadddr) (lT2e84 core-prim . caddar) (lT2e83 core-prim . cadadr) (lT2e82 core-prim . cadaar) (lT2e81 core-prim . caaddr) (lT2e80 core-prim . caadar) (lT2e7f core-prim . caaadr) (lT2e7e core-prim . caaaar) (lT2e7d core-prim . cdddr) (lT2e7c core-prim . cddar) (lT2e7b core-prim . cdadr) (lT2e7a core-prim . cdaar) (lT2e79 core-prim . caddr) (lT2e78 core-prim . cadar) (lT2e77 core-prim . caadr) (lT2e76 core-prim . caaar) (lT2e75 core-prim . cddr) (lT2e74 core-prim . cdar) (lT2e73 core-prim . cadr) (lT2e72 core-prim . caar) (lT2e71 core-prim . cdr) (lT2e70 core-prim . car) (lT2e6f core-prim . boolean?) (lT2e6e core-prim . boolean=?) (lT2e6d core-prim . atan) (lT2e6c core-prim . assertion-violation) (lTe53 core-prim . assertion-error) (lT2e6b core-prim . asin) (lT2e6a core-prim . apply) (lT2e69 core-prim . append) (lT2e68 core-prim . angle) (lT2e67 core-prim . acos) (lT2e66 core-prim . abs) (lT2e65 core-prim . /) (lT2e64 core-prim . *) (lT2e63 core-prim . -) (lT2e62 core-prim . +) (lT2e61 core-prim . >=) (lT2e60 core-prim . >) (lT2e5f core-prim . =) (lT2e5e core-prim . <=) (lT2e5d core-prim . <) (lT2e5c core-prim . library) (lT2e5b $core-rtd &no-nans-rtd &no-nans-rcd) (lT2e5a $core-rtd &no-infinities-rtd &no-infinities-rcd) (lT2e59 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (lT2e58 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (lT2e57 $core-rtd &i/o-port-rtd &i/o-port-rcd) (lT2e56 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (lT2e55 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (lT2e54 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (lT2e53 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (lT2e52 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (lT2e51 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (lT2e50 $core-rtd &i/o-write-rtd &i/o-write-rcd) (lT2e4f $core-rtd &i/o-read-rtd &i/o-read-rcd) (lT2e4e $core-rtd &i/o-rtd &i/o-rcd) (lT2e4d $core-rtd &undefined-rtd &undefined-rcd) (lT2e4c $core-rtd &syntax-rtd &syntax-rcd) (lT2e4b $core-rtd &lexical-rtd &lexical-rcd) (lT2e4a $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (lT2e49 $core-rtd &non-continuable-rtd &non-continuable-rcd) (lT2e48 $core-rtd &who-rtd &who-rcd) (lT2e47 $core-rtd &irritants-rtd &irritants-rcd) (lT2e46 $core-rtd &assertion-rtd &assertion-rcd) (lT2e45 $core-rtd &violation-rtd &violation-rcd) (lT2e44 $core-rtd &error-rtd &error-rcd) (lT2e43 $core-rtd &serious-rtd &serious-rcd) (lT2e42 $core-rtd &warning-rtd &warning-rcd) (lT2e41 $core-rtd &message-rtd &message-rcd) (lT2e40 $core-rtd &condition-rtd &condition-rcd) (lT2e3f macro . define-condition-type) (lT2e3e macro . define-enumeration) (lT2e3d macro . define-record-type) (lT2e3c macro . parent-rtd) (lT2e3b macro . nongenerative) (lT2e3a macro . opaque) (lT2e39 macro . sealed) (lT2e38 macro . protocol) (lT2e37 macro . parent) (lT2e36 macro . immutable) (lT2e35 macro . mutable) (lT2e34 macro . fields) (lT2e33 macro . error-handling-mode) (lT2e32 macro . file-options) (lT2e31 macro . buffer-mode) (lT2e30 macro . eol-style) (lT2e2f macro . guard) (lT2e2e macro . trace-define) (lT2e2d macro . trace-lambda) (lT2e2c macro . unsyntax-splicing) (lT2e2b macro . unsyntax) (lT2e2a macro . unquote-splicing) (lT2e29 macro . unquote) (lT2e28 macro . _) (lT2e27 macro . else) (lT2e26 macro . =>) (lT2e25 macro . ...) (lT2e24 macro . assert) (lT2e23 macro . endianness) (lT2e22 macro . delay) (lT2e21 macro . time) (lT2e20 macro . do) (lT2e1f macro . cond) (lT2e1e macro . let*) (lT2e1d macro . let) (lT2e1c macro . let*-values) (lT2e1b macro . let-values) (lT2e1a macro . identifier-syntax) (lT2e19 macro . with-syntax) (lT2e18 macro . quasisyntax) (lT2e17 macro . quasiquote) (lT2e16 macro . syntax-rules) (lT2e15 macro . include) (lT2e14 macro . define-struct) (lT2e13 core-macro . record-constructor-descriptor) (lT2e12 core-macro . record-type-descriptor) (lT2e11 macro . case) (lT2e10 macro . parameterize) (lT2e0f macro . unless) (lT2e0e macro . when) (lT2e0d core-macro . or) (lT2e0c core-macro . and) (lT2e0b core-macro . if) (lT2e0a core-macro . let) (lT2e09 core-macro . letrec*) (lT2e08 core-macro . letrec) (lT2e07 core-macro . type-descriptor) (lT2e06 core-macro . case-lambda) (lT2e05 core-macro . lambda) (lT2e04 core-macro . syntax) (lT2e03 core-macro . syntax-case) (lT2e02 core-macro . quote) (lT2e01 core-macro . foreign-call) (lT2e00 letrec-syntax) (lT2dff let-syntax) (lT2dfe set!) (lT2dfd import) (lT2dfc begin) (lT2dfb module) (lT2dfa define-syntax) (lT2df9 define)) values values '#f '#f '#f '#f) (lT987@lT7d3@install-library 'lT3142 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . lT3121) (eval-core . lT3120) (set-symbol-value! . lT311f) (symbol-value . lT311e) (gensym . lT311d) (void . lT311c)) '() values values '#f '#f '#f '#f) (lT987@lT7d3@install-library 'lT3143 '(mosh) '() '() '() '() '((set-symbol-value! . lT311f) (symbol-value . lT311e) (regexp? . lT311a) (read-line . lT3119) (ungensym . lT3117) (alist->eq-hash-table . lT3116) (assoc-ref . lT3115) (print . lT3114) (format . lT3113) (host-os . lT3112) (library-path . lT7b2) (standard-library-path . lT3111) (file-newer? . lT3110) (stat-mtime . lT310f) (digit->integer . lT310b) (call-with-string-input-port . lT310a) (call-with-string-io . lT3109) (string-split . lT3108) (bytevector-for-each . lT3107) (string->regexp . lT3106) (rxmatch . lT3105) (regexp-replace-all . lT3104) (hashtable-for-each . lT3103) (set-current-directory! . lT30fe) (expand-path . lT30fd) (current-directory . lT30fc) (p . lT30bd) (get-timeofday . lT30a4) (get-command-line . lT30a3) (sys-display . lT30a2) (whereis . lT30a1) (register . lT30a0) (vm-join! . lT309f) (vm-set-value! . lT309e) (vm? . lT309d) (main-vm? . lT309c) (vm-eval . lT309b) (vm-self . lT309a) (vm-start! . lT3099) (make-vm . lT3098) (mutex-try-lock! . lT3097) (mutex-unlock! . lT3096) (mutex-lock! . lT3095) (mutex? . lT3094) (make-mutex . lT3093) (condition-variable-notify-all! . lT3092) (condition-variable-notify! . lT3091) (condition-variable-wait! . lT3090) (make-condition-variable . lT308f) (mosh-executable-path . lT308e) (make-file-options . lT308d) (source-info . lT308c) (make-compiler-instruction . lT308b) (make-instruction . lT308a) (set-source-info! . lT3089) (bignum? . lT3088) (fast-equal? . lT3087) (fasl-read . lT3086) (fasl-write . lT3085) (time-usage . lT3084) (os-constant . lT3083) (time . lT2e21) (include . lT2e15)) '() values values '#f '#f '#f '#f) (lT987@lT7d3@install-library 'lT3144 '(system) '() '() '() '() '((gensym-prefix-set! . lT3118) (write-to-file . lT310e) (file->list . lT310d) (file->string . lT310c) (mosh-cache-dir . lT59d) (call-process . lT3102) (local-tz-offset . lT3101) (microseconds . lT3100) (directory-list . lT30ff) (expand-path . lT30fd) (%spawn . lT30fb) (%waitpid . lT30fa) (simple-struct-name . lT30f9) (simple-struct-set! . lT30f8) (simple-struct-ref . lT30f7) (make-simple-struct . lT30f6) (simple-struct? . lT30f5) (pointer-ref-c-int64 . lT30f4) (pointer-ref-c-int32 . lT30f3) (pointer-ref-c-int16 . lT30f2) (pointer-ref-c-int8 . lT30f1) (pointer-ref-c-uint64 . lT30f0) (pointer-ref-c-uint32 . lT30ef) (pointer-ref-c-uint16 . lT30ee) (pointer-ref-c-uint8 . lT30ed) (pointer-set-c-uint64! . lT30ec) (pointer-set-c-uint32! . lT30eb) (pointer-set-c-uint16! . lT30ea) (pointer-set-c-uint8! . lT30e9) (pointer-set-c-int64! . lT30e8) (pointer-set-c-int32! . lT30e7) (pointer-set-c-int16! . lT30e6) (pointer-set-c-int8! . lT30e5) (pointer-set-c-pointer! . lT30e4) (pointer-set-c-double! . lT30e3) (pointer-set-c-float! . lT30e2) (pointer-set-c-long-long! . lT30e1) (pointer-set-c-long! . lT30e0) (pointer-set-c-int! . lT30df) (pointer-set-c-short! . lT30de) (pointer-set-c-char! . lT30dd) (pointer-ref-c-pointer . lT30dc) (pointer-ref-c-double . lT30db) (pointer-ref-c-float . lT30da) (pointer-ref-c-unsigned-long-long . lT30d9) (pointer-ref-c-signed-long-long . lT30d8) (pointer-ref-c-unsigned-long . lT30d7) (pointer-ref-c-signed-long . lT30d6) (pointer-ref-c-unsigned-int . lT30d5) (pointer-ref-c-signed-int . lT30d4) (pointer-ref-c-unsigned-short . lT30d3) (pointer-ref-c-signed-short . lT30d2) (pointer-ref-c-unsigned-char . lT30d1) (pointer-ref-c-signed-char . lT30d0) (pointer->integer . lT30cf) (integer->pointer . lT30ce) (pointer? . lT30cd) (shared-errno . lT30cc) (%ffi-free . lT30cb) (%ffi-malloc . lT30ca) (%ffi-supported? . lT30c9) (%ffi-pointer->string . lT30c8) (%ffi-call->string-or-zero . lT30c7) (%ffi-call->double . lT30c6) (%ffi-call->void* . lT30c5) (%ffi-call->void . lT30c4) (%ffi-call->char . lT30c3) (%ffi-call->int . lT30c2) (%ffi-lookup . lT30c1) (%ffi-open . lT30c0) (%fork . lT30bf) (%pipe . lT30be) (open-output-string . lT30bc) (get-output-string . lT30bb) (file-stat-ctime . lT30ba) (file-stat-atime . lT30b9) (file-stat-mtime . lT30b8) (file-size-in-bytes . lT30b7) (file-writable? . lT30b6) (file-executable? . lT30b5) (file-readable? . lT30b4) (file-regular? . lT30b3) (file-symbolic-link? . lT30b2) (file-directory? . lT30b1) (create-symbolic-link . lT30b0) (rename-file . lT30af) (delete-directory . lT30ae) (create-directory . lT30ad) (create-mosh-cache-dir . lT30ac) (get-environment-variables . lT30ab) (current-exception-handler . lT30aa) (get-environment-variable . lT30a9) (join-wraps . lT30a8) (id->real-label . lT30a7) (same-marks? . lT30a6) (same-marks*? . lT30a5) (disasm . lT3082) (make-parameter . lT59b) (socket-port . lT3081) (socket-shutdown . lT3080) (socket-close . lT307f) (socket-send . lT307e) (socket-recv! . lT307d) (socket-recv . lT307c) (make-server-socket . lT307b) (make-client-socket . lT307a) (socket-accept . lT3079) (socket? . lT3078) (parameterize . lT2e10)) '() values values '#f '#f '#f '#f)))
(begin (set! lT2c7c@ref (unspecified)) (set! lT2c7e@x* (unspecified)) (set! lT2c80@add-library-path! (unspecified)) (set! lT2c82@parse-and-add-library-path (unspecified)) (set! lT2c84@for-each-with-index (unspecified)) (set! lT2c86@rpad (unspecified)) (set! lT2c88@condition-printer (unspecified)) (set! lT2c8a@record->field-alist (unspecified)) (set! lT2c8c@map-with-index (unspecified)) (set! lT2c8e@repl (unspecified)) (set! lT2c90@trace-printer (unspecified)) (set! lT2c92@command-line (unspecified)) (set! lT2c94@local-library-path (unspecified)) (set! lT2c96@load/args (unspecified)) (set! lT2c98@load (unspecified)) (set! lT2c9a@ironscheme-build (unspecified)) (set! lT2c9c@eval-top-level (unspecified)) (set! lT2c9e@compile-system-libraries (unspecified)) (set! lT2ca0@compile (unspecified)) (set! lT2ca2@compile->closure (unspecified)) (set! lT2ca4@pre-compile-r6rs-file (unspecified)) (set! lT2ca6@load-r6rs-top-level (unspecified)) (set! lT2ca8@load-r6rs-top-level-sexp (unspecified)) (set! lT2caa@prefix-inc (unspecified)) (set! lT2cac@prefix-inc! (unspecified)) (begin (set! lT2c7c@ref (lambda (lT2ce7@rtd lT2ce8@i lT2ce9@x) (let ((lT2ced@val ((record-accessor lT2ce7@rtd lT2ce8@i) lT2ce9@x))) (if (symbol? lT2ced@val) (ungensym lT2ced@val) lT2ced@val)))) (set! lT2ddf@lT2c7c@ref lT2c7c@ref)) (begin (set! lT2c7e@x* '()) (set! lT2de0@lT2c7e@x* lT2c7e@x*)) (begin (set! lT2c80@add-library-path! (lambda (lT2cef@path) (lT977@lT7b3@library-path (append (lT977@lT7b3@library-path) (list lT2cef@path))))) (set! lT2de1@lT2c80@add-library-path! lT2c80@add-library-path!)) (begin (set! lT2c82@parse-and-add-library-path (lambda (lT2cf1@paths lT2cf2@message) (let ((lT2cf6@separator '#f)) (begin (set! lT2cf6@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((lT2cf7@t lT2cf1@paths)) (if lT2cf7@t ((lambda (lT2cf9@paths) (for-each (lambda (lT2cfb@path) (if (file-exists? lT2cfb@path) (lT2c80@add-library-path! (expand-path lT2cfb@path)) (format (current-error-port) lT2cf2@message lT2cfb@path))) (string-split lT2cf9@paths lT2cf6@separator))) lT2cf7@t) (void))))))) (set! lT2de2@lT2c82@parse-and-add-library-path lT2c82@parse-and-add-library-path)) (begin (set! lT2c84@for-each-with-index (lambda (lT2cfd@proc lT2cfe@lst) (letrec ((lT2d01@loop (lambda (lT2d03@i lT2d04@lst) (if (null? lT2d04@lst) (if '#f '#f (void)) (begin (lT2cfd@proc lT2d03@i (car lT2d04@lst)) (lT2d01@loop (+ lT2d03@i '1) (cdr lT2d04@lst))))))) (lT2d01@loop '1 lT2cfe@lst)))) (set! lT2de3@lT2c84@for-each-with-index lT2c84@for-each-with-index)) (begin (set! lT2c86@rpad (lambda (lT2d07@str lT2d08@pad lT2d09@n) (let ((lT2d0d@rest (- lT2d09@n (string-length (format '"~a" lT2d07@str))))) (let lT2d13@loop ((lT2d0f@rest lT2d0d@rest) (lT2d10@ret (format '"~a" lT2d07@str))) (if (<= lT2d0f@rest '0) lT2d10@ret (lT2d13@loop (- lT2d0f@rest '1) (string-append lT2d10@ret lT2d08@pad))))))) (set! lT2de4@lT2c86@rpad lT2c86@rpad)) (begin (set! lT2c88@condition-printer (lambda (lT2d15@e lT2d16@port) (let ((lT2d1a@max-condition-len '#f)) (begin (set! lT2d1a@max-condition-len (apply max (map (lambda (lT2d2b@c) (string-length (symbol->string (record-type-name (record-rtd lT2d2b@c))))) (simple-conditions lT2d15@e)))) (begin (display '" Condition components:\n" lT2d16@port) (lT2c84@for-each-with-index (lambda (lT2d1b@i lT2d1c@x) (let ((lT2d1f@rtd (record-rtd lT2d1c@x)) (lT2d20@fields-alist (lT2c8a@record->field-alist lT2d1c@x))) (begin (format lT2d16@port '" ~d. ~a" lT2d1b@i (lT2c86@rpad (symbol->string (record-type-name lT2d1f@rtd)) '" " lT2d1a@max-condition-len)) (if (null? lT2d20@fields-alist) (newline lT2d16@port) (void)) (let lT2d27@loop ((lT2d23@first '#t) (lT2d24@fields-alist lT2d20@fields-alist)) (if (null? lT2d24@fields-alist) '() (let ((lT2d29@field (car lT2d24@fields-alist))) (begin (if (not lT2d23@first) (display (lT2c86@rpad '"" '" " (+ '4 lT2d1a@max-condition-len)) lT2d16@port) (void)) (display '"       " lT2d16@port) (display (car lT2d29@field) lT2d16@port) (display '": " lT2d16@port) (write (cdr lT2d29@field) lT2d16@port) (newline lT2d16@port) (lT2d27@loop '#f (cdr lT2d24@fields-alist))))))))) (simple-conditions lT2d15@e))))))) (set! lT2de5@lT2c88@condition-printer lT2c88@condition-printer)) (begin (set! lT2c8a@record->field-alist (lambda (lT2d2d@r) (let ((lT2d30@ref '#f)) (begin (set! lT2d30@ref (lambda (lT2d3b@rtd lT2d3c@i lT2d3d@x) (let ((lT2d41@val ((record-accessor lT2d3b@rtd lT2d3c@i) lT2d3d@x))) (if (symbol? lT2d41@val) (ungensym lT2d41@val) lT2d41@val)))) (let lT2d35@loop ((lT2d31@ret '()) (lT2d32@rtd (record-rtd lT2d2d@r))) (if lT2d32@rtd (lT2d35@loop (append lT2d31@ret (lT2c8c@map-with-index (lambda (lT2d37@i lT2d38@field) (cons lT2d38@field (lT2d30@ref lT2d32@rtd lT2d37@i lT2d2d@r))) (vector->list (record-type-field-names lT2d32@rtd)))) (record-type-parent lT2d32@rtd)) lT2d31@ret)))))) (set! lT2de6@lT2c8a@record->field-alist lT2c8a@record->field-alist)) (begin (set! lT2c8c@map-with-index (lambda (lT2d43@proc lT2d44@lst) (let lT2d4d@loop ((lT2d47@i '0) (lT2d48@lst lT2d44@lst) (lT2d49@ret '())) (if (null? lT2d48@lst) (reverse lT2d49@ret) (lT2d4d@loop (+ lT2d47@i '1) (cdr lT2d48@lst) (cons (lT2d43@proc lT2d47@i (car lT2d48@lst)) lT2d49@ret)))))) (set! lT2de7@lT2c8c@map-with-index lT2c8c@map-with-index)) (begin (set! lT2c8e@repl (lambda lT2d4f@x (let ((lT2d52@rec '#f)) (begin (set! lT2d52@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (lT2d55@lT2d53) (lambda () (with-exception-handler (lambda (lT2d57@e) ((call/cc (lambda (lT2d59@lT2d54) (lT2d55@lT2d53 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? lT2d57@e) (lT2c88@condition-printer lT2d57@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" lT2d57@e))) (lT2d59@lT2d54 (lambda () (raise-continuable lT2d57@e)))))))))) (lambda () (let lT2d5f@loop ((lT2d5b@line (get-line (current-input-port))) (lT2d5c@accum '"")) (let ((lT2d62@parentheses-ok? '#f) (lT2d64@eval-string-print '#f)) (begin (set! lT2d62@parentheses-ok? (lambda (lT2d69@text) (let lT2d71@loop ((lT2d6b@chars (string->list lT2d69@text)) (lT2d6c@p0 '0) (lT2d6d@p1 '0)) (if (null? lT2d6b@chars) (= '0 lT2d6c@p0 lT2d6d@p1) (let ((lT2d73@t (car lT2d6b@chars))) (if (memv lT2d73@t '(#\()) (lT2d71@loop (cdr lT2d6b@chars) (+ lT2d6c@p0 '1) lT2d6d@p1) (if (memv lT2d73@t '(#\))) (lT2d71@loop (cdr lT2d6b@chars) (- lT2d6c@p0 '1) lT2d6d@p1) (if (memv lT2d73@t '(#\[)) (lT2d71@loop (cdr lT2d6b@chars) lT2d6c@p0 (+ lT2d6d@p1 '1)) (if (memv lT2d73@t '(#\])) (lT2d71@loop (cdr lT2d6b@chars) lT2d6c@p0 (- lT2d6d@p1 '1)) (lT2d71@loop (cdr lT2d6b@chars) lT2d6c@p0 lT2d6d@p1)))))))))) (set! lT2d64@eval-string-print (lambda (lT2d67@text) (if (not (or (string=? '"\n" lT2d67@text) (= '0 (string-length lT2d67@text)))) (write (lT2c9c@eval-top-level (call-with-port (open-string-input-port lT2d67@text) read))) (void)))) (if (eof-object? lT2d5b@line) (begin (lT2d64@eval-string-print lT2d5c@accum) (exit)) (let ((lT2d65@current (string-append lT2d5c@accum lT2d5b@line))) (if (lT2d62@parentheses-ok? lT2d65@current) (lT2d64@eval-string-print lT2d65@current) (lT2d5f@loop (get-line (current-input-port)) lT2d65@current))))))))))))) (newline) (lT2d52@rec)))) (lT2d52@rec))))) (set! lT2de8@lT2c8e@repl lT2c8e@repl)) (begin (set! lT2c90@trace-printer (lT6bd@lT59c@make-parameter write)) (set! lT2de9@lT2c90@trace-printer lT2c90@trace-printer)) (begin (set! lT2c92@command-line (lT6bd@lT59c@make-parameter (get-command-line))) (set! lT2dea@lT2c92@command-line lT2c92@command-line)) (begin (set! lT2c94@local-library-path (lambda (lT2d75@filename) (lT977@lT7b3@library-path))) (set! lT2deb@lT2c94@local-library-path lT2c94@local-library-path)) (begin (set! lT2c96@load/args (lambda (lT2d77@filename . lT2d79@args) (begin (apply lT2ca6@load-r6rs-top-level lT2d77@filename 'load lT2d79@args) (void)))) (set! lT2dec@lT2c96@load/args lT2c96@load/args)) (begin (set! lT2c98@load (lambda (lT2d7b@filename) (begin (apply lT2ca6@load-r6rs-top-level lT2d7b@filename 'load (lT2c92@command-line)) (void)))) (set! lT2ded@lT2c98@load lT2c98@load)) (begin (set! lT2c9a@ironscheme-build (lambda () (lT2c98@load '"ironscheme-buildscript.ss"))) (set! lT2dee@lT2c9a@ironscheme-build lT2c9a@ironscheme-build)) (begin (set! lT2c9c@eval-top-level (lambda (lT2d7d@x) (lT28a2@lTe3a@eval lT2d7d@x (lT28b9@lTe68@interaction-environment)))) (set! lT2def@lT2c9c@eval-top-level lT2c9c@eval-top-level)) (begin (set! lT2c9e@compile-system-libraries (lambda () (lT2c9c@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! lT2df0@lT2c9e@compile-system-libraries lT2c9e@compile-system-libraries)) (begin (set! lT2ca0@compile (lambda (lT2d7f@filename) (lT2ca6@load-r6rs-top-level lT2d7f@filename 'compile))) (set! lT2df1@lT2ca0@compile lT2ca0@compile)) (begin (set! lT2ca2@compile->closure (lambda (lT2d81@filename) (lT2ca6@load-r6rs-top-level lT2d81@filename 'closure))) (set! lT2df2@lT2ca2@compile->closure lT2ca2@compile->closure)) (begin (set! lT2ca4@pre-compile-r6rs-file (lambda (lT2d83@filename) (lT2ca6@load-r6rs-top-level lT2d83@filename 'compile))) (set! lT2df3@lT2ca4@pre-compile-r6rs-file lT2ca4@pre-compile-r6rs-file)) (begin (set! lT2ca6@load-r6rs-top-level (lambda (lT2d85@filename lT2d86@how . lT2d89@args) (begin (lT977@lT7b3@library-path (lT2c94@local-library-path lT2d85@filename)) (let ((lT2d8b@x* (with-input-from-file lT2d85@filename (lambda () (let ((lT2d8f@x (lT6b0@lT582@read-annotated))) (if (eof-object? lT2d8f@x) '() (cons lT2d8f@x (lT2d8d@f1)))))))) (let ((lT2d91@t lT2d86@how)) (if (memv lT2d91@t '(closure)) (lT28b8@lTe66@pre-compile-r6rs-top-level lT2d8b@x*) (if (memv lT2d91@t '(load)) (begin (lT2c92@command-line (cons lT2d85@filename (car lT2d89@args))) (lT6be@lT59e@mosh-cache-dir (create-mosh-cache-dir)) (if (lT6be@lT59e@mosh-cache-dir) (gensym-prefix-set! (lT2cac@prefix-inc! (string-append (lT6be@lT59e@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (lT2d93@file) ((call/cc (lambda (lT2d97@lT2d95) (lambda () (with-exception-handler (lambda (lT2d99@c) ((call/cc (lambda (lT2d9b@lT2d96) (lT2d97@lT2d95 (lambda () (if '#t '#t (lT2d9b@lT2d96 (lambda () (raise-continuable lT2d99@c)))))))))) (lambda () (delete-file (string-append (lT6be@lT59e@mosh-cache-dir) '"/" lT2d93@file))))))))) (directory-list (lT6be@lT59e@mosh-cache-dir))) (void)) (let ((lT2d9d@compiled (lT28b7@lTe64@compile-r6rs-top-level lT2d8b@x*))) (begin (if (and (lT6be@lT59e@mosh-cache-dir) (not (symbol-value '%disable-acc))) (lT97b@lT7bb@serialize-all lT6b8@lT592@serialize-library lT714@lT6cd@compile-core-expr) (void)) (lT2d9d@compiled)))) (if (memv lT2d91@t '(compile)) (begin (lT28b7@lTe64@compile-r6rs-top-level lT2d8b@x*) (lT97b@lT7bb@serialize-all lT6b8@lT592@serialize-library lT714@lT6cd@compile-core-expr)) (if '#f '#f (void)))))))))) (set! lT2df4@lT2ca6@load-r6rs-top-level lT2ca6@load-r6rs-top-level)) (begin (set! lT2ca8@load-r6rs-top-level-sexp (lambda (lT2d9f@import-spec lT2da0@thunk) (let ((lT2dab@lT2da4 lT977@lT7b3@library-path) (lT2dac@lT2da6 lT6be@lT59e@mosh-cache-dir) (lT2dad@lT2da8 (lT2c94@local-library-path '"")) (lT2dae@lT2daa (create-mosh-cache-dir))) (let ((lT2db3@swap (lambda () (begin (let ((lT2db5@t (lT2dab@lT2da4))) (begin (lT2dab@lT2da4 lT2dad@lT2da8) (set! lT2dad@lT2da8 lT2db5@t))) (let ((lT2db7@t (lT2dac@lT2da6))) (begin (lT2dac@lT2da6 lT2dae@lT2daa) (set! lT2dae@lT2daa lT2db7@t))))))) (dynamic-wind lT2db3@swap (lambda () (begin (if (lT6be@lT59e@mosh-cache-dir) (gensym-prefix-set! (lT2cac@prefix-inc! (string-append (lT6be@lT59e@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((lT2dbd@lT2dba lT2c92@command-line) (lT2dbe@lT2dbc '())) (let ((lT2dc1@swap (lambda () (let ((lT2dc3@t (lT2dbd@lT2dba))) (begin (lT2dbd@lT2dba lT2dbe@lT2dbc) (set! lT2dbe@lT2dbc lT2dc3@t)))))) (dynamic-wind lT2dc1@swap (lambda () ((lT28b7@lTe64@compile-r6rs-top-level (list (cons 'import lT2d9f@import-spec) (list lT2da0@thunk))))) lT2dc1@swap))))) lT2db3@swap))))) (set! lT2df5@lT2ca8@load-r6rs-top-level-sexp lT2ca8@load-r6rs-top-level-sexp)) (begin (set! lT2caa@prefix-inc (lambda (lT2dc5@prefix-string) (let ((lT2dc7@prefix (symbol->string lT2dc5@prefix-string))) (let ((lT2dc9@len (string-length lT2dc7@prefix))) (let lT2dd1@loop ((lT2dcb@i (- lT2dc9@len '1)) (lT2dcc@carry? '#t) (lT2dcd@accum '())) (if (< lT2dcb@i '0) (string->symbol (list->string (if lT2dcc@carry? (cons '#\a lT2dcd@accum) lT2dcd@accum))) (if lT2dcc@carry? (let ((lT2dd3@next-integer (+ '1 (char->integer (string-ref lT2dc7@prefix lT2dcb@i))))) (if (= lT2dd3@next-integer '123) (lT2dd1@loop (- lT2dcb@i '1) '#f (cons '#\A lT2dcd@accum)) (if (= lT2dd3@next-integer '91) (lT2dd1@loop (- lT2dcb@i '1) '#t (cons '#\a lT2dcd@accum)) (lT2dd1@loop (- lT2dcb@i '1) '#f (cons (integer->char lT2dd3@next-integer) lT2dcd@accum))))) (lT2dd1@loop (- lT2dcb@i '1) '#f (cons (string-ref lT2dc7@prefix lT2dcb@i) lT2dcd@accum))))))))) (set! lT2df6@lT2caa@prefix-inc lT2caa@prefix-inc)) (begin (set! lT2cac@prefix-inc! (lambda (lT2dd5@file) (begin (if (not (file-exists? lT2dd5@file)) (call-with-output-file lT2dd5@file (lambda (lT2dd7@port) (write 'd lT2dd7@port))) (void)) (let ((lT2dd9@prefix (call-with-input-file lT2dd5@file read))) (let ((lT2ddb@next-prefix (lT2caa@prefix-inc lT2dd9@prefix))) (begin (call-with-port (open-file-output-port lT2dd5@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (lT2ddd@port) (write lT2ddb@next-prefix lT2ddd@port))) lT2dd9@prefix)))))) (set! lT2df7@lT2cac@prefix-inc! lT2cac@prefix-inc!)) (begin (lT97c@lT7bd@current-precompiled-library-loader lT6b9@lT594@load-serialized-library) (set-symbol-value! 'load lT2c98@load) (set-symbol-value! 'pre-compile-r6rs-file lT2ca4@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs lT2c9c@eval-top-level) (set-symbol-value! 'int-env-syms lT2899@lTe28@interaction-environment-symbols) (set-symbol-value! 'expanded2core lT713@lT6cb@expanded->core) (set-symbol-value! 'trace-printer lT2c90@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (lT2cad@c) (condition (lT2bd9@lT29e3@make-non-continuable-violation) (lT2bcf@lT29ca@make-who-condition 'raise) (lT2b93@lT292b@make-message-condition '"returned from non-continuable exception") (lT2bc5@lT29af@make-irritants-condition (list lT2cad@c))))) (lT2c82@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (lT2c82@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (lT2c80@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (lT2c80@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (lT2c80@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((lT2caf@prefix (lambda (lT2cb1@ext lT2cb2@ls) (append (map (lambda (lT2cb5@x) (string-append lT2cb1@ext lT2cb5@x)) lT2cb2@ls) lT2cb2@ls)))) (lT978@lT7b5@library-extensions (lT2caf@prefix '".mosh" (lT978@lT7b5@library-extensions)))) (current-exception-handler (lambda (lT2cb7@c) (if (condition? lT2cb7@c) (lT2c88@condition-printer lT2cb7@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" lT2cb7@c)))) (if ((call/cc (lambda (lT2cbb@lT2cb9) (lambda () (with-exception-handler (lambda (lT2cbd@c) ((call/cc (lambda (lT2cbf@lT2cba) (lT2cbb@lT2cb9 (lambda () (if '#t '#f (lT2cbf@lT2cba (lambda () (raise-continuable lT2cbd@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (lT2ca8@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (lT2c92@command-line)) (let ((lT2cc9@lT2cc2 lT2c92@command-line) (lT2cca@lT2cc4 lT6be@lT59e@mosh-cache-dir) (lT2ccb@lT2cc6 '()) (lT2ccc@lT2cc8 (create-mosh-cache-dir))) (let ((lT2cd1@swap (lambda () (begin (let ((lT2cd3@t (lT2cc9@lT2cc2))) (begin (lT2cc9@lT2cc2 lT2ccb@lT2cc6) (set! lT2ccb@lT2cc6 lT2cd3@t))) (let ((lT2cd5@t (lT2cca@lT2cc4))) (begin (lT2cca@lT2cc4 lT2ccc@lT2cc8) (set! lT2ccc@lT2cc8 lT2cd5@t))))))) (dynamic-wind lT2cd1@swap (lambda () (begin (if (lT6be@lT59e@mosh-cache-dir) (gensym-prefix-set! (lT2cac@prefix-inc! (string-append (lT6be@lT59e@mosh-cache-dir) '"/prefix.txt"))) (void)) (lT2c8e@repl))) lT2cd1@swap))) (begin (lT977@lT7b3@library-path (lT2c94@local-library-path (car (lT2c92@command-line)))) (set! lT2c7e@x* (with-input-from-file (car (lT2c92@command-line)) (lambda () (let ((lT2cd9@x (lT6b0@lT582@read-annotated))) (if (eof-object? lT2cd9@x) '() (cons lT2cd9@x (lT2cd7@f2))))))) (lT2c92@command-line (cons (car (lT2c92@command-line)) (cdr (lT2c92@command-line)))) (lT6be@lT59e@mosh-cache-dir (create-mosh-cache-dir)) (if (lT6be@lT59e@mosh-cache-dir) (gensym-prefix-set! (lT2cac@prefix-inc! (string-append (lT6be@lT59e@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (lT2cdb@file) ((call/cc (lambda (lT2cdf@lT2cdd) (lambda () (with-exception-handler (lambda (lT2ce1@c) ((call/cc (lambda (lT2ce3@lT2cde) (lT2cdf@lT2cdd (lambda () (if '#t '#t (lT2ce3@lT2cde (lambda () (raise-continuable lT2ce1@c)))))))))) (lambda () (delete-file (string-append (lT6be@lT59e@mosh-cache-dir) '"/" lT2cdb@file))))))))) (directory-list (lT6be@lT59e@mosh-cache-dir))) (void)) (let ((lT2ce5@compiled (lT28b7@lTe64@compile-r6rs-top-level lT2c7e@x*))) (begin (if (and (lT6be@lT59e@mosh-cache-dir) (not (symbol-value '%disable-acc))) (lT97b@lT7bb@serialize-all lT6b8@lT592@serialize-library lT714@lT6cd@compile-core-expr) (void)) (lT2ce5@compiled))))))))
