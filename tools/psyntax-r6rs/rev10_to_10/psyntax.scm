;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (v27aa@read-annotated v27ac@annotation-stripped v27ae@annotation? v27b0@annotation-source v27b2@annotation-expression v27b4@scm->fasl v27b6@fasl-save v27b8@fasl-load v27ba@serialize-library v27bc@load-serialized-library v27be@make-record-printer v27c0@compile-core v27c2@read-library-source-file v27c4@make-parameter v282c@file-options-spec) (begin (set! v27aa@read-annotated read) (set! v27ac@annotation-stripped (lambda (v282d@x) (v27b2@annotation-expression v282d@x))) (set! v27ae@annotation? (lambda (v282f@x) (source-info v282f@x))) (set! v27b0@annotation-source (lambda (v2831@x) (source-info v2831@x))) (set! v27b2@annotation-expression (lambda (v2833@x) (if (pair? v2833@x) (cons (car v2833@x) (cdr v2833@x)) (display '"line:46\n")))) (set! v27b4@scm->fasl (lambda (v2835@filename) (string-append v2835@filename '".mosh-fasl"))) (set! v27b6@fasl-save (lambda (v2837@filename v2838@obj) (call-with-port (open-file-output-port v2837@filename) (lambda (v283b@port) ((symbol-value 'fasl-write!) v2838@obj v283b@port))))) (set! v27b8@fasl-load (lambda (v283d@filename) (call-with-port (open-file-input-port v283d@filename) (symbol-value 'fasl-read!)))) (set! v27ba@serialize-library (lambda (v283f@filename v2840@obj) (begin (format '#t '"serialize-library ~a\n..." v283f@filename) ((lambda (v2843@expanded2core) ((lambda (v2845@compile) ((lambda (v2847@code) ((lambda (v2849@pivot) ((lambda (v284b@visit) ((lambda () (begin (set-car! v2849@pivot v284b@visit) ((lambda (v284d@pivot) ((lambda (v284f@invoke) ((lambda () (set-car! v284d@pivot v284f@invoke)))) (v2845@compile (v2843@expanded2core (car v284d@pivot))))) (cdr v2849@pivot)))))) (v2845@compile (v2843@expanded2core (car v2849@pivot))))) (cddddr (cddddr v2847@code)))) v2840@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (v2851@fasl-file) (begin (if (file-exists? v2851@fasl-file) (delete-file v2851@fasl-file) (void)) ((call/cc (lambda (v2855@v2853) (lambda () (with-exception-handler (lambda (v2857@c) ((call/cc (lambda (v2859@v2854) (v2855@v2853 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " v283f@filename) (if (file-exists? v2851@fasl-file) (delete-file v2851@fasl-file) (void)) '#f) (v2859@v2854 (lambda () (raise-continuable v2857@c)))))))))) (lambda () (begin (v27b6@fasl-save v2851@fasl-file v2840@obj) (display '"OK\n")))))))))) (v27b4@scm->fasl v283f@filename))))) (set! v27bc@load-serialized-library (lambda (v285b@filename v285c@obj) ((lambda (v285f@fasl-file) (if (and (file-exists? v285f@fasl-file) ((symbol-value 'file-newer?) v285f@fasl-file v285b@filename)) ((lambda (v2861@expanded2core) ((lambda (v2863@eval-compiled-core) ((lambda (v2865@code) ((lambda (v2867@pivot) ((lambda (v2869@visit) ((lambda (v286b@visit-proc) ((lambda () (begin (set-car! v2867@pivot v286b@visit-proc) ((lambda (v286d@pivot) ((lambda (v286f@invoke) ((lambda () (begin (set-car! v286d@pivot (lambda () (v2863@eval-compiled-core v286f@invoke))) (apply v285c@obj v2865@code))))) (car v286d@pivot))) (cdr v2867@pivot)) '#t)))) (lambda () (v2863@eval-compiled-core v2869@visit)))) (car v2867@pivot))) (cddddr (cddddr v2865@code)))) (v27b8@fasl-load v285f@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (v27b4@scm->fasl v285b@filename)))) (set! v27be@make-record-printer (lambda (v2871@name v2872@printer) (lambda v2875@x (begin (display '"record printer") (for-each display v2875@x))))) (set! v27c0@compile-core (lambda v2877@x (apply error 'comile-core '"not implementated" v2877@x))) (set! v27c2@read-library-source-file (lambda (v2879@file-name) (with-input-from-file v2879@file-name v27aa@read-annotated))) (set! v27c4@make-parameter (lambda v2889 ((lambda (v288a) (if (= v288a '1) (apply (lambda (v287b@x) (v27c4@make-parameter v287b@x (lambda (v287d@x) v287d@x))) v2889) (if (= v288a '2) (apply (lambda (v287f@x v2880@fender) ((lambda (v2883@x) (lambda v2887 ((lambda (v2888) (if (= v2888 '0) (apply (lambda () v2883@x) v2887) (if (= v2888 '1) (apply (lambda (v2885@v) (set! v2883@x (v2880@fender v2885@v))) v2887) (error 'apply '"invalid arg count")))) (length v2887)))) (v2880@fender v287f@x))) v2889) (error 'apply '"invalid arg count")))) (length v2889)))) (set! v282c@file-options-spec (lambda (v288b@x) v288b@x)) (begin (set! v289b@v282c@file-options-spec v282c@file-options-spec) (set! v289a@v27c4@make-parameter v27c4@make-parameter) (set! v2899@v27c2@read-library-source-file v27c2@read-library-source-file) (set! v2898@v27c0@compile-core v27c0@compile-core) (set! v2897@v27be@make-record-printer v27be@make-record-printer) (set! v2896@v27bc@load-serialized-library v27bc@load-serialized-library) (set! v2895@v27ba@serialize-library v27ba@serialize-library) (set! v2894@v27b8@fasl-load v27b8@fasl-load) (set! v2893@v27b6@fasl-save v27b6@fasl-save) (set! v2892@v27b4@scm->fasl v27b4@scm->fasl) (set! v2891@v27b2@annotation-expression v27b2@annotation-expression) (set! v2890@v27b0@annotation-source v27b0@annotation-source) (set! v288f@v27ae@annotation? v27ae@annotation?) (set! v288e@v27ac@annotation-stripped v27ac@annotation-stripped) (set! v288d@v27aa@read-annotated v27aa@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (v28a0@current-primitive-locations v28a2@mutable? v28a4@rewriter v28a6@expanded->core v28a8@compile-core-expr v28aa@pretty-print v28ac@compile-core-expr-to-port) (begin (set! v28a0@current-primitive-locations (v289a@v27c4@make-parameter (lambda (v28ad@x) '#f) (lambda (v28af@p) v28af@p))) (set! v28a2@mutable? (lambda (v28b1@x) (or (pair? v28b1@x) (vector? v28b1@x) (hashtable? v28b1@x)))) (set! v28a4@rewriter (lambda (v28b3@quote-hack?) ((lambda (v28b6@f) (begin (set! v28b6@f (lambda (v28b7@x) (if (pair? v28b7@x) ((lambda (v28b9@t) (if (memv v28b9@t '(quote)) (if (and v28b3@quote-hack? (v28a2@mutable? (cadr v28b7@x))) ((lambda (v28bb@g) (begin (set-symbol-value! v28bb@g (cadr v28b7@x)) v28bb@g)) (gensym)) v28b7@x) (if (memv v28b9@t '(case-lambda)) (cons 'case-lambda (map (lambda (v28bd@x) (cons (car v28bd@x) (map v28b6@f (cdr v28bd@x)))) (cdr v28b7@x))) (if (memv v28b9@t '(lambda)) (cons* 'lambda (cadr v28b7@x) (map v28b6@f (cddr v28b7@x))) (if (memv v28b9@t '(letrec)) ((lambda (v28bf@bindings v28c0@body*) ((lambda (v28c3@lhs* v28c4@rhs*) (cons* 'letrec (map list v28c3@lhs* (map v28b6@f v28c4@rhs*)) (map v28b6@f v28c0@body*))) (map car v28bf@bindings) (map cadr v28bf@bindings))) (cadr v28b7@x) (cddr v28b7@x)) (if (memv v28b9@t '(letrec*)) ((lambda (v28c7@bindings v28c8@body*) ((lambda (v28cb@lhs* v28cc@rhs*) (cons* 'letrec* (map list v28cb@lhs* (map v28b6@f v28cc@rhs*)) (map v28b6@f v28c8@body*))) (map car v28c7@bindings) (map cadr v28c7@bindings))) (cadr v28b7@x) (cddr v28b7@x)) (if (memv v28b9@t '(library-letrec*)) ((lambda (v28cf@name v28d0@x) ((lambda (v28d3@bindings v28d4@body*) ((lambda (v28d7@lhs* v28d8@lhs** v28d9@rhs*) (cons* 'library-letrec* v28cf@name (map list v28d7@lhs* v28d8@lhs** (map v28b6@f v28d9@rhs*)) (map v28b6@f v28d4@body*))) (map car v28d3@bindings) (map cadr v28d3@bindings) (map caddr v28d3@bindings))) (cadr v28d0@x) (cddr v28d0@x))) (cadr v28b7@x) (cdr v28b7@x)) (if (memv v28b9@t '(begin)) (cons 'begin (map v28b6@f (cdr v28b7@x))) (if (memv v28b9@t '(set!)) (list 'set! (cadr v28b7@x) (v28b6@f (caddr v28b7@x))) (if (memv v28b9@t '(primitive)) ((lambda (v28dd@op) ((lambda (v28df@t) (if v28df@t ((lambda (v28e1@loc) v28e1@loc) v28df@t) v28dd@op)) ((v28a0@current-primitive-locations) v28dd@op))) (cadr v28b7@x)) (if (memv v28b9@t '(define)) v28b7@x (if (list? v28b7@x) (map v28b6@f v28b7@x) (error 'rewrite '"invalid form ~s ~s" v28b7@x (list? v28b7@x)))))))))))))) (car v28b7@x)) v28b7@x))) v28b6@f)) '#f))) (set! v28a6@expanded->core (lambda (v28e3@x) ((v28a4@rewriter '#f) v28e3@x))) (set! v28a8@compile-core-expr (lambda (v28e5@x) ((v28a4@rewriter '#f) v28e5@x))) (set! v28aa@pretty-print write) (set! v28ac@compile-core-expr-to-port (lambda (v28e7@x v28e8@p) (v28aa@pretty-print ((v28a4@rewriter '#f) v28e7@x) v28e8@p))) (begin (set! v28f1@v28ac@compile-core-expr-to-port v28ac@compile-core-expr-to-port) (set! v28f0@v28aa@pretty-print v28aa@pretty-print) (set! v28ef@v28a8@compile-core-expr v28a8@compile-core-expr) (set! v28ee@v28a6@expanded->core v28a6@expanded->core) (set! v28ed@v28a4@rewriter v28a4@rewriter) (set! v28ec@v28a2@mutable? v28a2@mutable?) (set! v28eb@v28a0@current-primitive-locations v28a0@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (v2940@make-collection v2942@current-library-collection v2948@v2943 v294a@v2945 v294c@v2944 v294f@library? v2951@make-library v2953@library-id v2955@library-name v2957@library-version v2959@library-imp* v295b@library-vis* v295d@library-inv* v295f@library-subst v2961@library-env v2963@library-visit-state v2965@library-invoke-state v2967@library-visit-code v2969@library-invoke-code v296b@library-visible? v296d@library-source-file-name v296f@set-library-id! v2971@set-library-name! v2973@set-library-version! v2975@set-library-imp*! v2977@set-library-vis*! v2979@set-library-inv*! v297b@set-library-subst! v297d@set-library-env! v297f@set-library-visit-state! v2981@set-library-invoke-state! v2983@set-library-visit-code! v2985@set-library-invoke-code! v2987@set-library-visible?! v2989@set-library-source-file-name! v298b@rp v298d@find-dependencies v298f@find-library-by v2991@library-path v2993@library-extensions v2995@library-name->file-name v2997@file-locator v2999@serialize-all v299b@current-precompiled-library-loader v299d@try-load-from-file v299f@library-loader v29a1@current-library-expander v29a3@external-pending-libraries v29a5@find-external-library v29a7@find-library-by-name v29a9@library-exists? v29ab@find-library-by-spec/die v29ad@label->binding-table v29af@install-library-record v29b1@install-library v29b3@imported-label->binding v29b5@invoke-library v29b7@visit-library v29b9@invoke-library-by-spec v29bb@installed-libraries v29bd@library-spec) (begin (set! v2940@make-collection (lambda () ((lambda (v29be@set) ((lambda (v29c1@set-cons) (begin (set! v29c1@set-cons (lambda (v29c6@x v29c7@ls) (if (memq v29c6@x v29c7@ls) v29c7@ls (cons v29c6@x v29c7@ls)))) (lambda v29c4 ((lambda (v29c5) (if (= v29c5 '0) (apply (lambda () v29be@set) v29c4) (if (= v29c5 '1) (apply (lambda (v29c2@x) (set! v29be@set (v29c1@set-cons v29c2@x v29be@set))) v29c4) (error 'apply '"invalid arg count")))) (length v29c4))))) '#f)) '()))) (set! v2942@current-library-collection (v289a@v27c4@make-parameter (v2940@make-collection) (lambda (v29ca@x) (begin (if (not (procedure? v29ca@x)) (assertion-violation 'current-library-collection '"not a procedure" v29ca@x) (void)) v29ca@x)))) (set! v2948@v2943 (make-record-type-descriptor 'library '#f 'v2946 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! v294a@v2945 '#f) (set! v294c@v2944 (make-record-constructor-descriptor v2948@v2943 '#f v294a@v2945)) (set! v294f@library? (record-predicate v2948@v2943)) (set! v2951@make-library (record-constructor v294c@v2944)) (set! v2953@library-id (record-accessor v2948@v2943 '0)) (set! v2955@library-name (record-accessor v2948@v2943 '1)) (set! v2957@library-version (record-accessor v2948@v2943 '2)) (set! v2959@library-imp* (record-accessor v2948@v2943 '3)) (set! v295b@library-vis* (record-accessor v2948@v2943 '4)) (set! v295d@library-inv* (record-accessor v2948@v2943 '5)) (set! v295f@library-subst (record-accessor v2948@v2943 '6)) (set! v2961@library-env (record-accessor v2948@v2943 '7)) (set! v2963@library-visit-state (record-accessor v2948@v2943 '8)) (set! v2965@library-invoke-state (record-accessor v2948@v2943 '9)) (set! v2967@library-visit-code (record-accessor v2948@v2943 '10)) (set! v2969@library-invoke-code (record-accessor v2948@v2943 '11)) (set! v296b@library-visible? (record-accessor v2948@v2943 '12)) (set! v296d@library-source-file-name (record-accessor v2948@v2943 '13)) (set! v296f@set-library-id! (record-mutator v2948@v2943 '0)) (set! v2971@set-library-name! (record-mutator v2948@v2943 '1)) (set! v2973@set-library-version! (record-mutator v2948@v2943 '2)) (set! v2975@set-library-imp*! (record-mutator v2948@v2943 '3)) (set! v2977@set-library-vis*! (record-mutator v2948@v2943 '4)) (set! v2979@set-library-inv*! (record-mutator v2948@v2943 '5)) (set! v297b@set-library-subst! (record-mutator v2948@v2943 '6)) (set! v297d@set-library-env! (record-mutator v2948@v2943 '7)) (set! v297f@set-library-visit-state! (record-mutator v2948@v2943 '8)) (set! v2981@set-library-invoke-state! (record-mutator v2948@v2943 '9)) (set! v2983@set-library-visit-code! (record-mutator v2948@v2943 '10)) (set! v2985@set-library-invoke-code! (record-mutator v2948@v2943 '11)) (set! v2987@set-library-visible?! (record-mutator v2948@v2943 '12)) (set! v2989@set-library-source-file-name! (record-mutator v2948@v2943 '13)) (set! v298b@rp (v2897@v27be@make-record-printer 'library (lambda (v29cc@x v29cd@p v29ce@wr) (begin (if (not (v294f@library? v29cc@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (v2957@library-version v29cc@x)) (v2955@library-name v29cc@x) (append (v2955@library-name v29cc@x) (list (v2957@library-version v29cc@x))))) v29cd@p))))) (set! v298d@find-dependencies (lambda (v29d2@ls) (if (null? v29d2@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! v298f@find-library-by (lambda (v29d4@pred) ((letrec ((v29d6@f (lambda (v29d8@ls) (if (null? v29d8@ls) '#f (if (v29d4@pred (car v29d8@ls)) (car v29d8@ls) (v29d6@f (cdr v29d8@ls))))))) v29d6@f) ((v2942@current-library-collection))))) (set! v2991@library-path (v289a@v27c4@make-parameter '(".") (lambda (v29da@x) (if (and (list? v29da@x) (for-all string? v29da@x)) (map (lambda (v29dc@x) v29dc@x) v29da@x) (assertion-violation 'library-path '"not a list of strings" v29da@x))))) (set! v2993@library-extensions (v289a@v27c4@make-parameter '(".sls" ".ss" ".scm") (lambda (v29de@x) (if (and (list? v29de@x) (for-all string? v29de@x)) (map (lambda (v29e0@x) v29e0@x) v29de@x) (assertion-violation 'library-extensions '"not a list of strings" v29de@x))))) (set! v2995@library-name->file-name (lambda (v29e2@x) (call-with-values (lambda () (open-string-output-port)) (lambda (v29e8@v29e5 v29e9@v29e7) ((lambda (v29ec@extract v29ed@p) ((lambda (v29f1@display-hex) (begin (set! v29f1@display-hex (lambda (v29fa@n) (if (<= '0 v29fa@n '9) (display v29fa@n v29ed@p) (display (integer->char (+ (char->integer '#\a) (- v29fa@n '10))) v29ed@p)))) (begin ((letrec ((v29f2@f (lambda (v29f4@ls) (if (not (null? v29f4@ls)) (begin (display '"/" v29ed@p) (for-each (lambda (v29f6@c) (if (or (char<=? '#\a v29f6@c '#\z) (char<=? '#\A v29f6@c '#\Z) (char<=? '#\0 v29f6@c '#\9) (memv v29f6@c '(#\- #\. #\_ #\~))) (display v29f6@c v29ed@p) (begin (display '"%" v29ed@p) ((lambda (v29f8@n) (begin (v29f1@display-hex (quotient v29f8@n '16)) (v29f1@display-hex (remainder v29f8@n '16)))) (char->integer v29f6@c))))) (string->list (symbol->string (car v29f4@ls)))) (v29f2@f (cdr v29f4@ls))) (void))))) v29f2@f) v29e2@x) (v29ec@extract)))) '#f)) v29e9@v29e7 v29e8@v29e5))))) (set! v2997@file-locator (v289a@v27c4@make-parameter (lambda (v29fc@x) ((lambda (v29fe@str) ((letrec ((v2a00@f (lambda (v2a02@ls v2a03@exts v2a04@failed-list) (if (null? v2a02@ls) ((lambda () ((lambda (v2a10@v2a0b v2a12@v2a0d v2a14@v2a0c v2a17@v2a0a v2a19@make-library-resolution-condition v2a1b@v2a08 v2a1d@v2a09 v2a1f@library-resolution-condition? v2a21@condition-library v2a23@condition-files) (begin (set! v2a10@v2a0b (make-record-type-descriptor '&library-resolution v4cb1@v49f8@&condition-rtd 'v2a0e '#f '#f '#((immutable library) (immutable files)))) (set! v2a12@v2a0d '#f) (set! v2a14@v2a0c (make-record-constructor-descriptor v2a10@v2a0b v4cb2@v49fa@&condition-rcd v2a12@v2a0d)) (set! v2a17@v2a0a (record-predicate v2a10@v2a0b)) (set! v2a19@make-library-resolution-condition (record-constructor v2a14@v2a0c)) (set! v2a1b@v2a08 (record-accessor v2a10@v2a0b '0)) (set! v2a1d@v2a09 (record-accessor v2a10@v2a0b '1)) (set! v2a1f@library-resolution-condition? (condition-predicate v2a10@v2a0b)) (set! v2a21@condition-library (condition-accessor v2a10@v2a0b v2a1b@v2a08)) (set! v2a23@condition-files (condition-accessor v2a10@v2a0b v2a1d@v2a09)) (raise (condition (v4cd1@v4a92@make-error) (v4cf3@v4aee@make-who-condition 'expander) (v4cb7@v4a4f@make-message-condition '"cannot locate library in library-path") (v2a19@make-library-resolution-condition v29fc@x (reverse v2a04@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? v2a03@exts) (v2a00@f (cdr v2a02@ls) (v2993@library-extensions) v2a04@failed-list) ((lambda (v2a24@name) (if (file-exists? v2a24@name) v2a24@name (v2a00@f v2a02@ls (cdr v2a03@exts) (cons v2a24@name v2a04@failed-list)))) (string-append (car v2a02@ls) v29fe@str (car v2a03@exts)))))))) v2a00@f) (v2991@library-path) (v2993@library-extensions) '())) (v2995@library-name->file-name v29fc@x))) (lambda (v2a26@f) (if (procedure? v2a26@f) v2a26@f (assertion-violation 'file-locator '"not a procedure" v2a26@f))))) (set! v2999@serialize-all (lambda (v2a28@serialize v2a29@compile) ((lambda (v2a2d@library-desc) (begin (set! v2a2d@library-desc (lambda (v2a30@x) (list (v2953@library-id v2a30@x) (v2955@library-name v2a30@x)))) (for-each (lambda (v2a2e@x) (if (v296d@library-source-file-name v2a2e@x) (v2a28@serialize (v296d@library-source-file-name v2a2e@x) (list (v2953@library-id v2a2e@x) (v2955@library-name v2a2e@x) (v2957@library-version v2a2e@x) (map v2a2d@library-desc (v2959@library-imp* v2a2e@x)) (map v2a2d@library-desc (v295b@library-vis* v2a2e@x)) (map v2a2d@library-desc (v295d@library-inv* v2a2e@x)) (v295f@library-subst v2a2e@x) (v2961@library-env v2a2e@x) (v2a29@compile (v2967@library-visit-code v2a2e@x)) (v2a29@compile (v2969@library-invoke-code v2a2e@x)) (v296b@library-visible? v2a2e@x))) (void))) ((v2942@current-library-collection))))) '#f))) (set! v299b@current-precompiled-library-loader (v289a@v27c4@make-parameter (lambda (v2a32@filename v2a33@sk) '#f))) (set! v299d@try-load-from-file (lambda (v2a36@filename) ((v299b@current-precompiled-library-loader) v2a36@filename (lambda v2a5c ((lambda (v2a5d) (if (= v2a5d '11) (apply (lambda (v2a38@id v2a39@name v2a3a@ver v2a3b@imp* v2a3c@vis* v2a3d@inv* v2a3e@exp-subst v2a3f@exp-env v2a40@visit-proc v2a41@invoke-proc v2a42@visible?) ((letrec ((v2a4e@f (lambda (v2a50@deps) (if (null? v2a50@deps) (begin (v29b1@install-library v2a38@id v2a39@name v2a3a@ver v2a3b@imp* v2a3c@vis* v2a3d@inv* v2a3e@exp-subst v2a3f@exp-env v2a40@visit-proc v2a41@invoke-proc '#f '#f v2a42@visible? '#f) '#t) ((lambda (v2a52@d) ((lambda (v2a54@label v2a55@dname) ((lambda (v2a58@l) (if (and (v294f@library? v2a58@l) (eq? v2a54@label (v2953@library-id v2a58@l))) (v2a4e@f (cdr v2a50@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" v2a39@name v2a55@dname v2a36@filename v2a58@l v2a54@label (v2953@library-id v2a58@l)) '#f))) (v29a7@find-library-by-name v2a55@dname))) (car v2a52@d) (cadr v2a52@d))) (car v2a50@deps)))))) v2a4e@f) (append v2a3b@imp* v2a3c@vis* v2a3d@inv*))) v2a5c) (if (>= v2a5d '0) (apply (lambda v2a5a@others '#f) v2a5c) (error 'apply '"invalid arg count")))) (length v2a5c)))))) (set! v299f@library-loader (v289a@v27c4@make-parameter (lambda (v2a5e@x) ((lambda (v2a60@file-name) (if (not v2a60@file-name) (assertion-violation '#f '"cannot file library" v2a5e@x) (or (v299d@try-load-from-file v2a60@file-name) ((v29a1@current-library-expander) (v2899@v27c2@read-library-source-file v2a60@file-name) v2a60@file-name (lambda (v2a62@name) (if (not (fast-equal? v2a62@name v2a5e@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (v2a68@v2a65 v2a69@v2a67) ((lambda (v2a6c@e v2a6d@p) (begin (display '"expected to find library " v2a6d@p) (write v2a5e@x v2a6d@p) (display '" in file " v2a6d@p) (display v2a60@file-name v2a6d@p) (display '", found " v2a6d@p) (write v2a62@name v2a6d@p) (display '" instead" v2a6d@p) (v2a6c@e))) v2a69@v2a67 v2a68@v2a65)))) (void))))))) ((v2997@file-locator) v2a5e@x))) (lambda (v2a70@f) (if (procedure? v2a70@f) v2a70@f (assertion-violation 'library-locator '"not a procedure" v2a70@f))))) (set! v29a1@current-library-expander (v289a@v27c4@make-parameter (lambda (v2a72@x) (assertion-violation 'library-expander '"not initialized")) (lambda (v2a74@f) (if (procedure? v2a74@f) v2a74@f (assertion-violation 'library-expander '"not a procedure" v2a74@f))))) (set! v29a3@external-pending-libraries (v289a@v27c4@make-parameter '())) (set! v29a5@find-external-library (lambda (v2a76@name) (begin (if (member v2a76@name (v29a3@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" v2a76@name) (void)) ((lambda (v2a7c@v2a79 v2a7d@v2a7b) ((lambda (v2a80@swap) (dynamic-wind v2a80@swap (lambda () (begin ((v299f@library-loader) v2a76@name) (or (v298f@find-library-by (lambda (v2a82@x) (fast-equal? (v2955@library-name v2a82@x) v2a76@name))) (assertion-violation '#f '"handling external library did not yield the correct library" v2a76@name)))) v2a80@swap)) (lambda () ((lambda (v2a84@t) (begin (v2a7c@v2a79 v2a7d@v2a7b) (set! v2a7d@v2a7b v2a84@t))) (v2a7c@v2a79))))) v29a3@external-pending-libraries (cons v2a76@name (v29a3@external-pending-libraries)))))) (set! v29a7@find-library-by-name (lambda (v2a86@name) (or (v298f@find-library-by (lambda (v2a88@x) (fast-equal? (v2955@library-name v2a88@x) v2a86@name))) (v29a5@find-external-library v2a86@name)))) (set! v29a9@library-exists? (lambda (v2a8a@name) (and (v298f@find-library-by (lambda (v2a8c@x) (fast-equal? (v2955@library-name v2a8c@x) v2a8a@name))) '#t))) (set! v29ab@find-library-by-spec/die (lambda (v2a8e@spec) ((lambda (v2a90@id) (or (v298f@find-library-by (lambda (v2a92@x) (eq? v2a90@id (v2953@library-id v2a92@x)))) (assertion-violation '#f '"cannot find library with required spec" v2a8e@spec))) (car v2a8e@spec)))) (set! v29ad@label->binding-table (make-eq-hashtable)) (set! v29af@install-library-record (lambda (v2a94@lib) (begin ((lambda (v2a96@exp-env) (for-each (lambda (v2a98@x) ((lambda (v2a9a@label v2a9b@binding) ((lambda (v2a9e@binding) (begin (if (hashtable-ref v29ad@label->binding-table v2a9a@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" v2a9a@label (hashtable-ref v29ad@label->binding-table v2a9a@label '#f) v2a9e@binding) (exit)) (void)) (hashtable-set! v29ad@label->binding-table v2a9a@label v2a9e@binding))) ((lambda (v2aa0@t) (if (memv v2aa0@t '(global)) (cons 'global (cons v2a94@lib (cdr v2a9b@binding))) (if (memv v2aa0@t '(global-macro)) (cons 'global-macro (cons v2a94@lib (cdr v2a9b@binding))) (if (memv v2aa0@t '(global-macro!)) (cons 'global-macro! (cons v2a94@lib (cdr v2a9b@binding))) v2a9b@binding)))) (car v2a9b@binding)))) (car v2a98@x) (cdr v2a98@x))) v2a96@exp-env)) (v2961@library-env v2a94@lib)) ((v2942@current-library-collection) v2a94@lib)))) (set! v29b1@install-library (lambda (v2aa2@id v2aa3@name v2aa4@ver v2aa5@imp* v2aa6@vis* v2aa7@inv* v2aa8@exp-subst v2aa9@exp-env v2aaa@visit-proc v2aab@invoke-proc v2aac@visit-code v2aad@invoke-code v2aae@visible? v2aaf@source-file-name) ((lambda (v2abe@imp-lib* v2abf@vis-lib* v2ac0@inv-lib*) (begin (if (not (and (symbol? v2aa2@id) (list? v2aa3@name) (list? v2aa4@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" v2aa2@id v2aa3@name v2aa4@ver) (void)) (if (v29a9@library-exists? v2aa3@name) (assertion-violation 'install-library '"library is already installed" v2aa3@name) (void)) ((lambda (v2ac4@lib) (v29af@install-library-record v2ac4@lib)) (v2951@make-library v2aa2@id v2aa3@name v2aa4@ver v2abe@imp-lib* v2abf@vis-lib* v2ac0@inv-lib* v2aa8@exp-subst v2aa9@exp-env v2aaa@visit-proc v2aab@invoke-proc v2aac@visit-code v2aad@invoke-code v2aae@visible? v2aaf@source-file-name)))) (map v29ab@find-library-by-spec/die v2aa5@imp*) (map v29ab@find-library-by-spec/die v2aa6@vis*) (map v29ab@find-library-by-spec/die v2aa7@inv*)))) (set! v29b3@imported-label->binding (lambda (v2ac6@lab) (hashtable-ref v29ad@label->binding-table v2ac6@lab '#f))) (set! v29b5@invoke-library (lambda (v2ac8@lib) ((lambda (v2aca@invoke) (if (procedure? v2aca@invoke) (begin (v2981@set-library-invoke-state! v2ac8@lib (lambda () (assertion-violation 'invoke '"circularity detected" v2ac8@lib))) (for-each v29b5@invoke-library (v295d@library-inv* v2ac8@lib)) (v2981@set-library-invoke-state! v2ac8@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" v2ac8@lib))) (v2aca@invoke) (v2981@set-library-invoke-state! v2ac8@lib '#t)) (void))) (v2965@library-invoke-state v2ac8@lib)))) (set! v29b7@visit-library (lambda (v2acc@lib) ((lambda (v2ace@visit) (if (procedure? v2ace@visit) (begin (v297f@set-library-visit-state! v2acc@lib (lambda () (assertion-violation 'visit '"circularity detected" v2acc@lib))) (for-each v29b5@invoke-library (v295b@library-vis* v2acc@lib)) (v297f@set-library-visit-state! v2acc@lib (lambda () (assertion-violation 'invoke '"first visit did not return" v2acc@lib))) (v2ace@visit) (v297f@set-library-visit-state! v2acc@lib '#t)) (void))) (v2963@library-visit-state v2acc@lib)))) (set! v29b9@invoke-library-by-spec (lambda (v2ad0@spec) (v29b5@invoke-library (v29ab@find-library-by-spec/die v2ad0@spec)))) (set! v29bb@installed-libraries (lambda v2ad8 ((lambda (v2ad9) (if (= v2ad9 '1) (apply (lambda (v2ad2@all?) ((letrec ((v2ad4@f (lambda (v2ad6@ls) (if (null? v2ad6@ls) '() (if (or v2ad2@all? (v296b@library-visible? (car v2ad6@ls))) (cons (car v2ad6@ls) (v2ad4@f (cdr v2ad6@ls))) (v2ad4@f (cdr v2ad6@ls))))))) v2ad4@f) ((v2942@current-library-collection)))) v2ad8) (if (= v2ad9 '0) (apply (lambda () (v29bb@installed-libraries '#f)) v2ad8) (error 'apply '"invalid arg count")))) (length v2ad8)))) (set! v29bd@library-spec (lambda (v2ada@x) (begin (if (not (v294f@library? v2ada@x)) (assertion-violation 'library-spec '"not a library" v2ada@x) (void)) (list (v2953@library-id v2ada@x) (v2955@library-name v2ada@x) (v2957@library-version v2ada@x))))) (begin (set! v2b18@v29bd@library-spec v29bd@library-spec) (set! v2b17@v29bb@installed-libraries v29bb@installed-libraries) (set! v2b16@v29b9@invoke-library-by-spec v29b9@invoke-library-by-spec) (set! v2b15@v29b7@visit-library v29b7@visit-library) (set! v2b14@v29b5@invoke-library v29b5@invoke-library) (set! v2b13@v29b3@imported-label->binding v29b3@imported-label->binding) (set! v2b12@v29b1@install-library v29b1@install-library) (set! v2b11@v29af@install-library-record v29af@install-library-record) (set! v2b10@v29ad@label->binding-table v29ad@label->binding-table) (set! v2b0f@v29ab@find-library-by-spec/die v29ab@find-library-by-spec/die) (set! v2b0e@v29a9@library-exists? v29a9@library-exists?) (set! v2b0d@v29a7@find-library-by-name v29a7@find-library-by-name) (set! v2b0c@v29a5@find-external-library v29a5@find-external-library) (set! v2b0b@v29a3@external-pending-libraries v29a3@external-pending-libraries) (set! v2b0a@v29a1@current-library-expander v29a1@current-library-expander) (set! v2b09@v299f@library-loader v299f@library-loader) (set! v2b08@v299d@try-load-from-file v299d@try-load-from-file) (set! v2b07@v299b@current-precompiled-library-loader v299b@current-precompiled-library-loader) (set! v2b06@v2999@serialize-all v2999@serialize-all) (set! v2b05@v2997@file-locator v2997@file-locator) (set! v2b04@v2995@library-name->file-name v2995@library-name->file-name) (set! v2b03@v2993@library-extensions v2993@library-extensions) (set! v2b02@v2991@library-path v2991@library-path) (set! v2b01@v298f@find-library-by v298f@find-library-by) (set! v2b00@v298d@find-dependencies v298d@find-dependencies) (set! v2aff@v298b@rp v298b@rp) (set! v2afe@v2989@set-library-source-file-name! v2989@set-library-source-file-name!) (set! v2afd@v2987@set-library-visible?! v2987@set-library-visible?!) (set! v2afc@v2985@set-library-invoke-code! v2985@set-library-invoke-code!) (set! v2afb@v2983@set-library-visit-code! v2983@set-library-visit-code!) (set! v2afa@v2981@set-library-invoke-state! v2981@set-library-invoke-state!) (set! v2af9@v297f@set-library-visit-state! v297f@set-library-visit-state!) (set! v2af8@v297d@set-library-env! v297d@set-library-env!) (set! v2af7@v297b@set-library-subst! v297b@set-library-subst!) (set! v2af6@v2979@set-library-inv*! v2979@set-library-inv*!) (set! v2af5@v2977@set-library-vis*! v2977@set-library-vis*!) (set! v2af4@v2975@set-library-imp*! v2975@set-library-imp*!) (set! v2af3@v2973@set-library-version! v2973@set-library-version!) (set! v2af2@v2971@set-library-name! v2971@set-library-name!) (set! v2af1@v296f@set-library-id! v296f@set-library-id!) (set! v2af0@v296d@library-source-file-name v296d@library-source-file-name) (set! v2aef@v296b@library-visible? v296b@library-visible?) (set! v2aee@v2969@library-invoke-code v2969@library-invoke-code) (set! v2aed@v2967@library-visit-code v2967@library-visit-code) (set! v2aec@v2965@library-invoke-state v2965@library-invoke-state) (set! v2aeb@v2963@library-visit-state v2963@library-visit-state) (set! v2aea@v2961@library-env v2961@library-env) (set! v2ae9@v295f@library-subst v295f@library-subst) (set! v2ae8@v295d@library-inv* v295d@library-inv*) (set! v2ae7@v295b@library-vis* v295b@library-vis*) (set! v2ae6@v2959@library-imp* v2959@library-imp*) (set! v2ae5@v2957@library-version v2957@library-version) (set! v2ae4@v2955@library-name v2955@library-name) (set! v2ae3@v2953@library-id v2953@library-id) (set! v2ae2@v2951@make-library v2951@make-library) (set! v2ae1@v294f@library? v294f@library?) (set! v2ae0@v294c@v2944 v294c@v2944) (set! v2adf@v294a@v2945 v294a@v2945) (set! v2ade@v2948@v2943 v2948@v2943) (set! v2add@v2942@current-library-collection v2942@current-library-collection) (set! v2adc@v2940@make-collection v2940@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (v2b1b@build-global-define v2b8c@build-lambda v2b8e@build-case-lambda v2b90@build-let v2bbe@build-sequence v2bc0@build-void v2bc2@build-letrec v2bc4@build-letrec* v2bc6@build-library-letrec* v2bc8@build-receive) (begin (set! v2b1b@build-global-define (lambda (v2bc9@x) (v2bc0@build-void))) (set! v2b8c@build-lambda (lambda (v2bcb@ae v2bcc@vars v2bcd@exp) (list 'lambda v2bcc@vars v2bcd@exp))) (set! v2b8e@build-case-lambda (lambda (v2bd1@ae v2bd2@vars* v2bd3@exp*) ((lambda (v2bd8@build-error v2bda@build-pred v2bdc@build-apply v2bde@expand-case-lambda) (begin (set! v2bd8@build-error (lambda (v2c0f@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! v2bda@build-pred (lambda (v2bf7@ae v2bf8@n v2bf9@vars) (call-with-values (lambda () ((letrec ((v2c01@f (lambda (v2c03@vars v2c04@count) (if (pair? v2c03@vars) (v2c01@f (cdr v2c03@vars) (+ v2c04@count '1)) (if (null? v2c03@vars) (values v2c04@count '=) (values v2c04@count '>=)))))) v2c01@f) v2bf9@vars '0)) (lambda (v2c07@v2bfe v2c08@v2c00) ((lambda (v2c0b@pred v2c0c@count) (list (list 'primitive v2c0b@pred) v2bf8@n (list 'quote v2c0c@count))) v2c08@v2c00 v2c07@v2bfe))))) (set! v2bdc@build-apply (lambda (v2bef@ae v2bf0@g v2bf1@vars v2bf2@exp) (list '(primitive apply) (v2b8c@build-lambda v2bef@ae v2bf1@vars v2bf2@exp) v2bf0@g))) (set! v2bde@expand-case-lambda (lambda (v2bdf@ae v2be0@vars v2be1@exp*) ((lambda (v2be5@g v2be6@n) (list 'lambda v2be5@g (v2b90@build-let v2bdf@ae (list v2be6@n) (list (list '(primitive length) v2be5@g)) ((letrec ((v2be9@f (lambda (v2beb@vars* v2bec@exp*) (if (null? v2beb@vars*) (v2bd8@build-error v2bdf@ae) (list 'if (v2bda@build-pred v2bdf@ae v2be6@n (car v2beb@vars*)) (v2bdc@build-apply v2bdf@ae v2be5@g (car v2beb@vars*) (car v2bec@exp*)) (v2be9@f (cdr v2beb@vars*) (cdr v2bec@exp*))))))) v2be9@f) v2bd2@vars* v2be1@exp*)))) (gensym) (gensym)))) (if (= (length v2bd3@exp*) '1) (v2b8c@build-lambda v2bd1@ae (car v2bd2@vars*) (car v2bd3@exp*)) (v2bde@expand-case-lambda v2bd1@ae v2bd2@vars* v2bd3@exp*)))) '#f '#f '#f '#f))) (set! v2b90@build-let (lambda (v2c11@ae v2c12@lhs* v2c13@rhs* v2c14@body) (cons (v2b8c@build-lambda v2c11@ae v2c12@lhs* v2c14@body) v2c13@rhs*))) (set! v2bbe@build-sequence (lambda (v2c19@ae v2c1a@exps) ((letrec ((v2c1d@loop (lambda (v2c1f@exps) (if (null? (cdr v2c1f@exps)) (car v2c1f@exps) (if (equal? (car v2c1f@exps) (v2bc0@build-void)) (v2c1d@loop (cdr v2c1f@exps)) (cons 'begin v2c1f@exps)))))) v2c1d@loop) v2c1a@exps))) (set! v2bc0@build-void (lambda () '((primitive void)))) (set! v2bc2@build-letrec (lambda (v2c21@ae v2c22@vars v2c23@val-exps v2c24@body-exp) (if (null? v2c22@vars) v2c24@body-exp (list 'letrec (map list v2c22@vars v2c23@val-exps) v2c24@body-exp)))) (set! v2bc4@build-letrec* (lambda (v2c29@ae v2c2a@vars v2c2b@val-exps v2c2c@body-exp) (if (null? v2c2a@vars) v2c2c@body-exp (v2b90@build-let v2c29@ae v2c2a@vars (map (lambda (v2c31@x) (list 'quote '#f)) v2c2a@vars) (v2bbe@build-sequence v2c29@ae (append (map (lambda (v2c33@lhs v2c34@rhs) (list 'set! v2c33@lhs v2c34@rhs)) v2c2a@vars v2c2b@val-exps) (list v2c2c@body-exp))))))) (set! v2bc6@build-library-letrec* (lambda (v2c37@ae v2c38@name v2c39@vars v2c3a@locs v2c3b@val-exps v2c3c@body-exp) (list 'library-letrec* v2c38@name (map list v2c39@vars v2c3a@locs v2c3b@val-exps) v2c3c@body-exp))) (set! v2bc8@build-receive (lambda (v2c43@ae v2c44@vars v2c45@producer v2c46@body*) (begin (display '"************** in ") (cons 'receive (cons v2c44@vars (cons v2c45@producer v2c46@body*)))))) (begin (set! v2c54@v2bc8@build-receive v2bc8@build-receive) (set! v2c53@v2bc6@build-library-letrec* v2bc6@build-library-letrec*) (set! v2c52@v2bc4@build-letrec* v2bc4@build-letrec*) (set! v2c51@v2bc2@build-letrec v2bc2@build-letrec) (set! v2c50@v2bc0@build-void v2bc0@build-void) (set! v2c4f@v2bbe@build-sequence v2bbe@build-sequence) (set! v2c4e@v2b90@build-let v2b90@build-let) (set! v2c4d@v2b8e@build-case-lambda v2b8e@build-case-lambda) (set! v2c4c@v2b8c@build-lambda v2b8c@build-lambda) (set! v2c4b@v2b1b@build-global-define v2b1b@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (v2c63@file-options-macro v2c65@set-cons v2c67@set-union v2c6c@top-mark* v2c6e@top-marked? v2c70@gen-lexical v2c72@gen-global v2c74@gen-label v2c76@gen-top-level-label v2c78@gen-define-label+loc v2c7a@gen-define-label v2c80@v2c7b v2c82@v2c7d v2c84@v2c7c v2c87@rib? v2c89@make-rib v2c8b@rib-sym* v2c8d@rib-mark** v2c8f@rib-label* v2c91@rib-sealed/freq v2c93@rib-cache v2c95@set-rib-sym*! v2c97@set-rib-mark**! v2c99@set-rib-label*! v2c9b@set-rib-sealed/freq! v2c9d@set-rib-cache! v2c9f@make-empty-rib v2ca1@extend-rib! v2ca3@extend-rib/nc! v2ca5@make-rib-map v2ca7@seal-rib! v2ca9@unseal-rib! v2cab@make-full-rib v2cb1@v2cac v2cb3@v2cae v2cb5@v2cad v2cb8@stx? v2cba@make-stx v2cbc@stx-expr v2cbe@stx-mark* v2cc0@stx-subst* v2cc2@stx-ae* v2cc4@set-stx-expr! v2cc6@set-stx-mark*! v2cc8@set-stx-subst*! v2cca@set-stx-ae*! v2ccc@rp v2cce@datum->stx v2cd0@gen-mark v2cd2@anti-mark v2cd4@anti-mark? v2cd6@join-wraps v2cd8@mkstx v2cda@add-mark v2cdc@add-subst v2cde@syntax-kind? v2ce0@syntax-vector->list v2ce2@syntax-pair? v2ce4@syntax-vector? v2ce6@syntax-null? v2ce8@syntax-list? v2cea@syntax-car v2cec@syntax-cdr v2cee@syntax->list v2cf0@id? v2cf2@id->sym v2cf4@same-marks? v2cf6@bound-id=? v2cf8@free-id=? v2cfa@valid-bound-ids? v2cfc@distinct-bound-ids? v2cfe@bound-id-member? v2d00@self-evaluating? v2d02@strip-annotations v2d04@strip v2d06@stx->datum v2d08@same-marks*? v2d0a@id->label v2d0c@id->real-label v2d0e@label->binding v2d10@make-binding v2d12@binding-type v2d14@binding-value v2d16@raise-unbound-error v2d18@syntax-type v2d26@sanitize-binding v2d28@make-variable-transformer v2d2a@variable-transformer? v2d2c@variable-transformer-procedure v2d2e@make-eval-transformer v2e7f@parse-define v2e81@parse-define-syntax v2e83@scheme-stx-hashtable v2e85@scheme-stx v2e87@lexical-var v2e89@lexical-mutable? v2e8b@set-lexical-mutable! v2e8d@add-lexical v2e8f@add-lexicals v2e91@letrec-helper v2e93@letrec-transformer v2e95@letrec*-transformer v2e97@fluid-let-syntax-transformer v2e99@type-descriptor-transformer v2e9b@record-type-descriptor-transformer v2e9d@record-constructor-descriptor-transformer v2e9f@when-macro v2ea1@unless-macro v2ea3@if-transformer v2ea5@and-transformer v2ea7@or-transformer v2ea9@case-macro v2eab@quote-transformer v2ead@case-lambda-transformer v2eaf@lambda-transformer v2eb1@bless v2eb3@with-syntax-macro v2eb5@invalid-fmls-error v2eb7@let-macro v2eb9@let-values-macro v2ebb@let*-values-macro v2ebd@trace-lambda-macro v2ebf@trace-define-macro v2ec1@trace-define-syntax-macro v2ec3@trace-let/rec-syntax v2ec5@trace-let-syntax-macro v2ec7@trace-letrec-syntax-macro v2ec9@guard-macro v2ecb@define-enumeration-macro v2ecd@time-macro v2ecf@delay-macro v2ed1@assert-macro v2ed3@endianness-macro v2ed5@identifier-syntax-macro v2ed7@do-macro v2ed9@let*-macro v2edb@or-macro v2edd@and-macro v2edf@cond-macro v2ee1@do-include v2ee3@include-macro v2ee5@include-into-macro v2ee7@syntax-rules-macro v2ee9@quasiquote-macro v2eeb@quasisyntax-macro v2eed@define-struct-macro v2eef@define-record-type-macro v2ef1@define-condition-type-macro v2ef3@incorrect-usage-macro v2ef5@parameterize-macro v2ef7@foreign-call-transformer v2ef9@convert-pattern v2efb@syntax-dispatch v2efd@ellipsis? v2eff@underscore? v2f01@verify-literals v2f03@syntax-case-transformer v2f05@ellipsis-map v2f07@syntax-transformer v2f09@core-macro-transformer v2f0b@symbol-macro v2f0d@macro-transformer v2f0f@local-macro-transformer v2f11@do-macro-call v2f13@chi-macro v2f15@chi-local-macro v2f17@chi-global-macro v2f19@chi-expr* v2f1b@chi-application v2f1d@chi-expr v2f1f@chi-set! v2f21@verify-formals v2f23@chi-lambda-clause v2f25@chi-lambda-clause* v2f27@chi-defun v2f29@chi-rhs v2f2b@expand-interaction-rhs*/init* v2f2d@chi-rhs* v2f2f@find-bound=? v2f31@find-dups v2f33@chi-internal v2f35@parse-module v2f3b@v2f36 v2f3d@v2f38 v2f3f@v2f37 v2f42@module-interface? v2f44@make-module-interface v2f46@module-interface-first-mark v2f48@module-interface-exp-id-vec v2f4a@module-interface-exp-lab-vec v2f4c@set-module-interface-first-mark! v2f4e@set-module-interface-exp-id-vec! v2f50@set-module-interface-exp-lab-vec! v2f52@module-interface-exp-id* v2f54@chi-internal-module v2f56@chi-body* v2f58@expand-transformer v2f5a@parse-exports v2f5c@parse-library-name v2f5e@parse-library v2f60@parse-import-spec* v2f62@make-top-rib v2f64@make-collector v2f66@inv-collector v2f68@vis-collector v2f6a@imp-collector v2f6c@chi-library-internal v2f6e@chi-interaction-expr v2f70@library-body-expander v2f72@core-library-expander v2f74@parse-top-level-program v2f76@top-level-expander v2f7c@v2f77 v2f7e@v2f79 v2f80@v2f78 v2f83@env? v2f85@make-env v2f87@env-names v2f89@env-labels v2f8b@env-itc v2f8d@set-env-names! v2f8f@set-env-labels! v2f91@set-env-itc! v2f93@rp v2f99@v2f94 v2f9b@v2f96 v2f9d@v2f95 v2fa0@interaction-env? v2fa2@make-interaction-env v2fa4@interaction-env-rib v2fa6@interaction-env-r v2fa8@interaction-env-locs v2faa@set-interaction-env-rib! v2fac@set-interaction-env-r! v2fae@set-interaction-env-locs! v2fb0@rp v2fb2@interaction-environment-symbols v2fb4@environment-bindings v2fb6@parse-binding v2fb8@environment? v2fba@environment-symbols v2fbc@environment v2fbe@null-environment v2fc0@scheme-report-environment v2fc2@expand v2fc4@eval v2fc6@library-expander v2fc8@boot-library-expand v2fca@rev-map-append v2fcc@build-exports v2fce@make-export-subst v2fd0@make-export-env/macros v2fd2@generate-temporaries v2fd4@free-identifier=? v2fd6@bound-identifier=? v2fd8@make-source-condition v2fda@extract-position-condition v2fdc@expression-position v2fde@assertion-error v2fe0@syntax-error v2fe2@syntax-violation* v2fe4@syntax-violation v2fe6@identifier? v2fe8@datum->syntax v2fea@syntax->datum v2fec@compile-r6rs-top-level v2fee@pre-compile-r6rs-top-level v2ff0@interaction-environment v2ff2@top-level-context) (begin (set! v2c63@file-options-macro (lambda (v2ff3@x) ((lambda (v2ff6@valid-option?) (begin (set! v2ff6@valid-option? (lambda (v2fff@x) (and (v2cf0@id? v2fff@x) (memq (v2cf2@id->sym v2fff@x) '(no-fail no-create no-truncate))))) ((lambda (v2ff7@t) ((lambda (v2ff9@ls/false) (if (and v2ff9@ls/false (apply (lambda (v2ffb@opt*) (for-all v2ff6@valid-option? v2ffb@opt*)) v2ff9@ls/false)) (apply (lambda (v2ffd@opt*) (v2eb1@bless (list 'make-file-options (list 'quote v2ffd@opt*)))) v2ff9@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v2ff7@t))) (v2efb@syntax-dispatch v2ff7@t '(_ . each-any)))) v2ff3@x))) '#f))) (set! v2c65@set-cons (lambda (v3001@x v3002@ls) (if (memq v3001@x v3002@ls) v3002@ls (cons v3001@x v3002@ls)))) (set! v2c67@set-union (lambda (v3005@ls1 v3006@ls2) (if (null? v3005@ls1) v3006@ls2 (if (memq (car v3005@ls1) v3006@ls2) (v2c67@set-union (cdr v3005@ls1) v3006@ls2) (cons (car v3005@ls1) (v2c67@set-union (cdr v3005@ls1) v3006@ls2)))))) (set! v2c6c@top-mark* '(top)) (set! v2c6e@top-marked? (lambda (v3009@m*) (memq 'top v3009@m*))) (set! v2c70@gen-lexical (lambda (v300b@sym) (if (symbol? v300b@sym) (gensym v300b@sym) (if (v2cb8@stx? v300b@sym) (v2c70@gen-lexical (v2cf2@id->sym v300b@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" v300b@sym))))) (set! v2c72@gen-global (lambda (v300d@x) (v2c70@gen-lexical v300d@x))) (set! v2c74@gen-label (lambda (v300f@_) (gensym))) (set! v2c76@gen-top-level-label (lambda (v3011@id v3012@rib) ((lambda (v3016@find) (begin (set! v3016@find (lambda (v3021@sym v3022@mark* v3023@sym* v3024@mark** v3025@label*) (and (pair? v3023@sym*) (if (and (eq? v3021@sym (car v3023@sym*)) (v2cf4@same-marks? v3022@mark* (car v3024@mark**))) (car v3025@label*) (v3016@find v3021@sym v3022@mark* (cdr v3023@sym*) (cdr v3024@mark**) (cdr v3025@label*)))))) ((lambda (v3017@sym v3018@mark*) ((lambda (v301b@sym*) ((lambda (v301d@t) (if v301d@t ((lambda (v301f@label) (if (v2b13@v29b3@imported-label->binding v301f@label) (gensym) v301f@label)) v301d@t) (gensym))) (and (memq v3017@sym (v2c8b@rib-sym* v3012@rib)) (v3016@find v3017@sym v3018@mark* v301b@sym* (v2c8d@rib-mark** v3012@rib) (v2c8f@rib-label* v3012@rib))))) (v2c8b@rib-sym* v3012@rib))) (v2cf2@id->sym v3011@id) (v2cbe@stx-mark* v3011@id)))) '#f))) (set! v2c78@gen-define-label+loc (lambda (v302b@id v302c@rib) ((lambda (v302f@t) (if v302f@t ((lambda (v3031@env) ((lambda (v3033@label v3034@locs) (values v3033@label ((lambda (v3037@t) (if v3037@t (cdr v3037@t) ((lambda (v3039@loc) (begin (v2fae@set-interaction-env-locs! v3031@env (cons (cons v3033@label v3039@loc) v3034@locs)) v3039@loc)) (v2c70@gen-lexical v302b@id)))) (assq v3033@label v3034@locs)))) (v2c76@gen-top-level-label v302b@id v302c@rib) (v2fa8@interaction-env-locs v3031@env))) v302f@t) (values (gensym) (v2c70@gen-lexical v302b@id)))) (v2ff2@top-level-context)))) (set! v2c7a@gen-define-label (lambda (v303b@id v303c@rib) (if (v2ff2@top-level-context) (v2c76@gen-top-level-label v303b@id v303c@rib) (gensym)))) (set! v2c80@v2c7b (make-record-type-descriptor 'rib '#f 'v2c7e '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! v2c82@v2c7d '#f) (set! v2c84@v2c7c (make-record-constructor-descriptor v2c80@v2c7b '#f v2c82@v2c7d)) (set! v2c87@rib? (record-predicate v2c80@v2c7b)) (set! v2c89@make-rib (record-constructor v2c84@v2c7c)) (set! v2c8b@rib-sym* (record-accessor v2c80@v2c7b '0)) (set! v2c8d@rib-mark** (record-accessor v2c80@v2c7b '1)) (set! v2c8f@rib-label* (record-accessor v2c80@v2c7b '2)) (set! v2c91@rib-sealed/freq (record-accessor v2c80@v2c7b '3)) (set! v2c93@rib-cache (record-accessor v2c80@v2c7b '4)) (set! v2c95@set-rib-sym*! (record-mutator v2c80@v2c7b '0)) (set! v2c97@set-rib-mark**! (record-mutator v2c80@v2c7b '1)) (set! v2c99@set-rib-label*! (record-mutator v2c80@v2c7b '2)) (set! v2c9b@set-rib-sealed/freq! (record-mutator v2c80@v2c7b '3)) (set! v2c9d@set-rib-cache! (record-mutator v2c80@v2c7b '4)) (set! v2c9f@make-empty-rib (lambda () (v2c89@make-rib '() '() '() '#f '#f))) (set! v2ca1@extend-rib! (lambda (v303f@rib v3040@id v3041@label) ((lambda (v3046@find) (begin (set! v3046@find (lambda (v3053@sym v3054@mark* v3055@sym* v3056@mark** v3057@label*) (and (pair? v3055@sym*) (if (and (eq? v3053@sym (car v3055@sym*)) (v2cf4@same-marks? v3054@mark* (car v3056@mark**))) v3057@label* (v3046@find v3053@sym v3054@mark* (cdr v3055@sym*) (cdr v3056@mark**) (cdr v3057@label*)))))) (begin (if (v2c91@rib-sealed/freq v303f@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" v303f@rib) (void)) ((lambda (v3047@sym v3048@mark*) ((lambda (v304b@sym*) ((lambda (v304d@t) (if v304d@t ((lambda (v304f@p) (if (not (eq? v3041@label (car v304f@p))) (if (v2ff2@top-level-context) (set-car! v304f@p v3041@label) (v2fe4@syntax-violation '#f '"multiple definitions of identifier" v3040@id)) (void))) v304d@t) (begin (if (v2c93@rib-cache v303f@rib) (hashtable-update! (v2c93@rib-cache v303f@rib) v3047@sym (lambda (v3051@e) (cons (cons v3048@mark* v3041@label) v3051@e)) '()) (void)) (v2c95@set-rib-sym*! v303f@rib (cons v3047@sym v304b@sym*)) (v2c97@set-rib-mark**! v303f@rib (cons v3048@mark* (v2c8d@rib-mark** v303f@rib))) (v2c99@set-rib-label*! v303f@rib (cons v3041@label (v2c8f@rib-label* v303f@rib)))))) (and (memq v3047@sym (v2c8b@rib-sym* v303f@rib)) (v3046@find v3047@sym v3048@mark* v304b@sym* (v2c8d@rib-mark** v303f@rib) (v2c8f@rib-label* v303f@rib))))) (v2c8b@rib-sym* v303f@rib))) (v2cf2@id->sym v3040@id) (v2cbe@stx-mark* v3040@id))))) '#f))) (set! v2ca3@extend-rib/nc! (lambda (v305d@rib v305e@id v305f@label) ((lambda (v3063@sym v3064@mark*) ((lambda (v3067@sym*) (begin (if (v2c93@rib-cache v305d@rib) (hashtable-update! (v2c93@rib-cache v305d@rib) v3063@sym (lambda (v3069@e) (cons (cons v3064@mark* v305f@label) v3069@e)) '()) (void)) (v2c95@set-rib-sym*! v305d@rib (cons v3063@sym v3067@sym*)) (v2c97@set-rib-mark**! v305d@rib (cons v3064@mark* (v2c8d@rib-mark** v305d@rib))) (v2c99@set-rib-label*! v305d@rib (cons v305f@label (v2c8f@rib-label* v305d@rib))))) (v2c8b@rib-sym* v305d@rib))) (v2cf2@id->sym v305e@id) (v2cbe@stx-mark* v305e@id)))) (set! v2ca5@make-rib-map (lambda (v306b@sym*) ((lambda (v306d@ht) ((letrec ((v306f@f (lambda (v3071@i v3072@sym*) (if (null? v3072@sym*) v306d@ht (begin (hashtable-update! v306d@ht (car v3072@sym*) (lambda (v3075@x) (cons v3071@i v3075@x)) '()) (v306f@f (+ v3071@i '1) (cdr v3072@sym*))))))) v306f@f) '0 v306b@sym*)) (make-eq-hashtable)))) (set! v2ca7@seal-rib! (lambda (v3077@rib) ((lambda (v3079@sym*) (if (not (null? v3079@sym*)) (begin (v2c95@set-rib-sym*! v3077@rib (list->vector v3079@sym*)) (v2c97@set-rib-mark**! v3077@rib (list->vector (v2c8d@rib-mark** v3077@rib))) (v2c99@set-rib-label*! v3077@rib (list->vector (v2c8f@rib-label* v3077@rib))) (v2c9b@set-rib-sealed/freq! v3077@rib (v2ca5@make-rib-map v3079@sym*))) (void))) (v2c8b@rib-sym* v3077@rib)))) (set! v2ca9@unseal-rib! (lambda (v307b@rib) (if (v2c91@rib-sealed/freq v307b@rib) (begin (v2c9b@set-rib-sealed/freq! v307b@rib '#f) (v2c95@set-rib-sym*! v307b@rib (vector->list (v2c8b@rib-sym* v307b@rib))) (v2c97@set-rib-mark**! v307b@rib (vector->list (v2c8d@rib-mark** v307b@rib))) (v2c99@set-rib-label*! v307b@rib (vector->list (v2c8f@rib-label* v307b@rib)))) (void)))) (set! v2cab@make-full-rib (lambda (v307d@id* v307e@label*) ((lambda (v3081@r) (begin (v2ca7@seal-rib! v3081@r) v3081@r)) (v2c89@make-rib (map v2cf2@id->sym v307d@id*) (map v2cbe@stx-mark* v307d@id*) v307e@label* '#f '#f)))) (set! v2cb1@v2cac (make-record-type-descriptor 'stx '#f 'v2caf '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! v2cb3@v2cae '#f) (set! v2cb5@v2cad (make-record-constructor-descriptor v2cb1@v2cac '#f v2cb3@v2cae)) (set! v2cb8@stx? (record-predicate v2cb1@v2cac)) (set! v2cba@make-stx (record-constructor v2cb5@v2cad)) (set! v2cbc@stx-expr (record-accessor v2cb1@v2cac '0)) (set! v2cbe@stx-mark* (record-accessor v2cb1@v2cac '1)) (set! v2cc0@stx-subst* (record-accessor v2cb1@v2cac '2)) (set! v2cc2@stx-ae* (record-accessor v2cb1@v2cac '3)) (set! v2cc4@set-stx-expr! (record-mutator v2cb1@v2cac '0)) (set! v2cc6@set-stx-mark*! (record-mutator v2cb1@v2cac '1)) (set! v2cc8@set-stx-subst*! (record-mutator v2cb1@v2cac '2)) (set! v2cca@set-stx-ae*! (record-mutator v2cb1@v2cac '3)) (set! v2ccc@rp (v2897@v27be@make-record-printer 'stx (lambda (v3083@x v3084@p v3085@wr) (begin (display '"#<syntax " v3084@p) (write (v2d06@stx->datum v3083@x) v3084@p) ((lambda (v3089@expr) (if (v288f@v27ae@annotation? v3089@expr) ((lambda (v308b@src) (if (pair? v308b@src) (begin (display '" [" v3084@p) (display (cdr v308b@src) v3084@p) (display '" of " v3084@p) (display (car v308b@src) v3084@p) (display '"]" v3084@p)) (void))) (v2890@v27b0@annotation-source v3089@expr)) (void))) (v2cbc@stx-expr v3083@x)) (display '">" v3084@p))))) (set! v2cce@datum->stx (lambda (v308d@id v308e@datum) (v2cba@make-stx v308e@datum (v2cbe@stx-mark* v308d@id) (v2cc0@stx-subst* v308d@id) (v2cc2@stx-ae* v308d@id)))) (set! v2cd0@gen-mark (lambda () (string '#\m))) (set! v2cd2@anti-mark '#f) (set! v2cd4@anti-mark? not) (set! v2cd6@join-wraps (lambda (v3091@m1* v3092@s1* v3093@ae1* v3094@e) ((lambda (v309a@cancel) (begin (set! v309a@cancel (lambda (v30a1@ls1 v30a2@ls2) ((letrec ((v30a5@f (lambda (v30a7@x v30a8@ls1) (if (null? v30a8@ls1) (cdr v30a2@ls2) (cons v30a7@x (v30a5@f (car v30a8@ls1) (cdr v30a8@ls1))))))) v30a5@f) (car v30a1@ls1) (cdr v30a1@ls1)))) ((lambda (v309b@m2* v309c@s2* v309d@ae2*) (if (and (not (null? v3091@m1*)) (not (null? v309b@m2*)) (v2cd4@anti-mark? (car v309b@m2*))) (values (v309a@cancel v3091@m1* v309b@m2*) (v309a@cancel v3092@s1* v309c@s2*) (v309a@cancel v3093@ae1* v309d@ae2*)) (values (append v3091@m1* v309b@m2*) (append v3092@s1* v309c@s2*) (append v3093@ae1* v309d@ae2*)))) (v2cbe@stx-mark* v3094@e) (v2cc0@stx-subst* v3094@e) (v2cc2@stx-ae* v3094@e)))) '#f))) (set! v2cd8@mkstx (lambda (v30ab@e v30ac@m* v30ad@s* v30ae@ae*) (if (and (v2cb8@stx? v30ab@e) (not (v2c6e@top-marked? v30ac@m*))) (call-with-values (lambda () (v2cd6@join-wraps v30ac@m* v30ad@s* v30ae@ae* v30ab@e)) (lambda (v30b9@v30b4 v30ba@v30b6 v30bb@v30b8) ((lambda (v30bf@ae* v30c0@s* v30c1@m*) (v2cba@make-stx (v2cbc@stx-expr v30ab@e) v30c1@m* v30c0@s* v30bf@ae*)) v30bb@v30b8 v30ba@v30b6 v30b9@v30b4))) (v2cba@make-stx v30ab@e v30ac@m* v30ad@s* v30ae@ae*)))) (set! v2cda@add-mark (lambda (v30c5@m v30c6@e v30c7@ae) (v2cd8@mkstx v30c6@e (list v30c5@m) '(shift) (list v30c7@ae)))) (set! v2cdc@add-subst (lambda (v30cb@subst v30cc@e) (v2cd8@mkstx v30cc@e '() (list v30cb@subst) '()))) (set! v2cde@syntax-kind? (lambda (v30cf@x v30d0@p?) (if (v2cb8@stx? v30cf@x) (v2cde@syntax-kind? (v2cbc@stx-expr v30cf@x) v30d0@p?) (if (v288f@v27ae@annotation? v30cf@x) (v2cde@syntax-kind? (v2891@v27b2@annotation-expression v30cf@x) v30d0@p?) (v30d0@p? v30cf@x))))) (set! v2ce0@syntax-vector->list (lambda (v30d3@x) (if (v2cb8@stx? v30d3@x) ((lambda (v30d5@ls v30d6@m* v30d7@s* v30d8@ae*) (map (lambda (v30dd@x) (v2cd8@mkstx v30dd@x v30d6@m* v30d7@s* v30d8@ae*)) v30d5@ls)) (v2ce0@syntax-vector->list (v2cbc@stx-expr v30d3@x)) (v2cbe@stx-mark* v30d3@x) (v2cc0@stx-subst* v30d3@x) (v2cc2@stx-ae* v30d3@x)) (if (v288f@v27ae@annotation? v30d3@x) (v2ce0@syntax-vector->list (v2891@v27b2@annotation-expression v30d3@x)) (if (vector? v30d3@x) (vector->list v30d3@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" v30d3@x)))))) (set! v2ce2@syntax-pair? (lambda (v30df@x) (v2cde@syntax-kind? v30df@x pair?))) (set! v2ce4@syntax-vector? (lambda (v30e1@x) (v2cde@syntax-kind? v30e1@x vector?))) (set! v2ce6@syntax-null? (lambda (v30e3@x) (v2cde@syntax-kind? v30e3@x null?))) (set! v2ce8@syntax-list? (lambda (v30e5@x) (or (v2ce6@syntax-null? v30e5@x) (and (v2ce2@syntax-pair? v30e5@x) (v2ce8@syntax-list? (v2cec@syntax-cdr v30e5@x)))))) (set! v2cea@syntax-car (lambda (v30e7@x) (if (v2cb8@stx? v30e7@x) (v2cd8@mkstx (v2cea@syntax-car (v2cbc@stx-expr v30e7@x)) (v2cbe@stx-mark* v30e7@x) (v2cc0@stx-subst* v30e7@x) (v2cc2@stx-ae* v30e7@x)) (if (v288f@v27ae@annotation? v30e7@x) (v2cea@syntax-car (v2891@v27b2@annotation-expression v30e7@x)) (if (pair? v30e7@x) (car v30e7@x) (assertion-violation 'syntax-car '"BUG: not a pair" v30e7@x)))))) (set! v2cec@syntax-cdr (lambda (v30e9@x) (if (v2cb8@stx? v30e9@x) (v2cd8@mkstx (v2cec@syntax-cdr (v2cbc@stx-expr v30e9@x)) (v2cbe@stx-mark* v30e9@x) (v2cc0@stx-subst* v30e9@x) (v2cc2@stx-ae* v30e9@x)) (if (v288f@v27ae@annotation? v30e9@x) (v2cec@syntax-cdr (v2891@v27b2@annotation-expression v30e9@x)) (if (pair? v30e9@x) (cdr v30e9@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" v30e9@x)))))) (set! v2cee@syntax->list (lambda (v30eb@x) (if (v2ce2@syntax-pair? v30eb@x) (cons (v2cea@syntax-car v30eb@x) (v2cee@syntax->list (v2cec@syntax-cdr v30eb@x))) (if (v2ce6@syntax-null? v30eb@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" v30eb@x))))) (set! v2cf0@id? (lambda (v30ed@x) (and (v2cb8@stx? v30ed@x) ((lambda (v30ef@expr) (symbol? (if (v288f@v27ae@annotation? v30ef@expr) (v288e@v27ac@annotation-stripped v30ef@expr) v30ef@expr))) (v2cbc@stx-expr v30ed@x))))) (set! v2cf2@id->sym (lambda (v30f1@x) (begin (if (not (v2cb8@stx? v30f1@x)) (error 'id->sym '"BUG in ikarus: not an id" v30f1@x) (void)) ((lambda (v30f3@expr) ((lambda (v30f5@sym) (if (symbol? v30f5@sym) v30f5@sym (error 'id->sym '"BUG in ikarus: not an id" v30f1@x))) (if (v288f@v27ae@annotation? v30f3@expr) (v288e@v27ac@annotation-stripped v30f3@expr) v30f3@expr))) (v2cbc@stx-expr v30f1@x))))) (set! v2cf4@same-marks? (lambda (v30f7@x v30f8@y) (or (and (null? v30f7@x) (null? v30f8@y)) (and (pair? v30f7@x) (pair? v30f8@y) (eq? (car v30f7@x) (car v30f8@y)) (v2cf4@same-marks? (cdr v30f7@x) (cdr v30f8@y)))))) (set! v2cf6@bound-id=? (lambda (v30fb@x v30fc@y) (and (eq? (v2cf2@id->sym v30fb@x) (v2cf2@id->sym v30fc@y)) (v2cf4@same-marks? (v2cbe@stx-mark* v30fb@x) (v2cbe@stx-mark* v30fc@y))))) (set! v2cf8@free-id=? (lambda (v30ff@i v3100@j) ((lambda (v3103@t0 v3104@t1) (if (or v3103@t0 v3104@t1) (eq? v3103@t0 v3104@t1) (eq? (v2cf2@id->sym v30ff@i) (v2cf2@id->sym v3100@j)))) (v2d0c@id->real-label v30ff@i) (v2d0c@id->real-label v3100@j)))) (set! v2cfa@valid-bound-ids? (lambda (v3107@id*) (and (for-all v2cf0@id? v3107@id*) (v2cfc@distinct-bound-ids? v3107@id*)))) (set! v2cfc@distinct-bound-ids? (lambda (v3109@id*) (or (null? v3109@id*) (and (not (v2cfe@bound-id-member? (car v3109@id*) (cdr v3109@id*))) (v2cfc@distinct-bound-ids? (cdr v3109@id*)))))) (set! v2cfe@bound-id-member? (lambda (v310b@id v310c@id*) (and (pair? v310c@id*) (or (v2cf6@bound-id=? v310b@id (car v310c@id*)) (v2cfe@bound-id-member? v310b@id (cdr v310c@id*)))))) (set! v2d00@self-evaluating? (lambda (v310f@x) (or (number? v310f@x) (string? v310f@x) (char? v310f@x) (boolean? v310f@x) (regexp? v310f@x) (bytevector? v310f@x)))) (set! v2d02@strip-annotations (lambda (v3111@x) (if (pair? v3111@x) (cons (v2d02@strip-annotations (car v3111@x)) (v2d02@strip-annotations (cdr v3111@x))) (if (vector? v3111@x) (vector-map v2d02@strip-annotations v3111@x) (if (v288f@v27ae@annotation? v3111@x) (v288e@v27ac@annotation-stripped v3111@x) v3111@x))))) (set! v2d04@strip (lambda (v3113@x v3114@m*) (if (v2c6e@top-marked? v3114@m*) (if (or (v288f@v27ae@annotation? v3113@x) (and (pair? v3113@x) (v288f@v27ae@annotation? (car v3113@x))) (and (vector? v3113@x) (> (vector-length v3113@x) '0) (v288f@v27ae@annotation? (vector-ref v3113@x '0)))) (v2d02@strip-annotations v3113@x) v3113@x) ((letrec ((v3117@f (lambda (v3119@x) (if (v2cb8@stx? v3119@x) (v2d04@strip (v2cbc@stx-expr v3119@x) (v2cbe@stx-mark* v3119@x)) (if (v288f@v27ae@annotation? v3119@x) (v288e@v27ac@annotation-stripped v3119@x) (if (pair? v3119@x) ((lambda (v311b@a v311c@d) (if (and (eq? v311b@a (car v3119@x)) (eq? v311c@d (cdr v3119@x))) v3119@x (cons v311b@a v311c@d))) (v3117@f (car v3119@x)) (v3117@f (cdr v3119@x))) (if (vector? v3119@x) ((lambda (v311f@old) ((lambda (v3121@new) (if (for-all eq? v311f@old v3121@new) v3119@x (list->vector v3121@new))) (map v3117@f v311f@old))) (vector->list v3119@x)) v3119@x))))))) v3117@f) v3113@x)))) (set! v2d06@stx->datum (lambda (v3123@x) (v2d04@strip v3123@x '()))) (set! v2d08@same-marks*? (lambda (v3125@mark* v3126@mark** v3127@si) (if (null? v3127@si) '#f (if (v2cf4@same-marks? v3125@mark* (vector-ref v3126@mark** (car v3127@si))) (car v3127@si) (v2d08@same-marks*? v3125@mark* v3126@mark** (cdr v3127@si)))))) (set! v2d0a@id->label (lambda (v312b@id) (or (v2d0c@id->real-label v312b@id) ((lambda (v312d@t) (if v312d@t ((lambda (v312f@env) ((lambda (v3131@rib) (call-with-values (lambda () (v2c78@gen-define-label+loc v312b@id v3131@rib)) (lambda (v3137@v3134 v3138@v3136) ((lambda (v313b@loc_ v313c@lab) (begin (v2ca1@extend-rib! v3131@rib v312b@id v313c@lab) v313c@lab)) v3138@v3136 v3137@v3134)))) (v2fa4@interaction-env-rib v312f@env))) v312d@t) '#f)) (v2ff2@top-level-context))))) (set! v2d0c@id->real-label (lambda (v313f@id) ((lambda (v3141@sym) ((letrec ((v3143@search (lambda (v3145@subst* v3146@mark*) (if (null? v3145@subst*) '#f (if (eq? (car v3145@subst*) 'shift) (v3143@search (cdr v3145@subst*) (cdr v3146@mark*)) ((lambda (v3149@rib) ((lambda (v314b@t) (if v314b@t ((lambda (v314d@ht) ((lambda (v314f@si) ((lambda (v3151@i) (if v3151@i (vector-ref (v2c8f@rib-label* v3149@rib) v3151@i) (v3143@search (cdr v3145@subst*) v3146@mark*))) (and v314f@si (v2d08@same-marks*? v3146@mark* (v2c8d@rib-mark** v3149@rib) (reverse v314f@si))))) (hashtable-ref v314d@ht v3141@sym '#f))) v314b@t) ((letrec ((v3153@f (lambda (v3155@sym* v3156@mark** v3157@label*) (if (null? v3155@sym*) (v3143@search (cdr v3145@subst*) v3146@mark*) (if (and (eq? (car v3155@sym*) v3141@sym) (v2cf4@same-marks? (car v3156@mark**) v3146@mark*)) (car v3157@label*) (v3153@f (cdr v3155@sym*) (cdr v3156@mark**) (cdr v3157@label*))))))) v3153@f) (v2c8b@rib-sym* v3149@rib) (v2c8d@rib-mark** v3149@rib) (v2c8f@rib-label* v3149@rib)))) (v2c91@rib-sealed/freq v3149@rib))) (car v3145@subst*))))))) v3143@search) (v2cc0@stx-subst* v313f@id) (v2cbe@stx-mark* v313f@id))) (v2cf2@id->sym v313f@id)))) (set! v2d0e@label->binding (lambda (v315b@x v315c@r) ((lambda (v315f@t) (if v315f@t ((lambda (v3161@b) (if (and (pair? v3161@b) (eq? (car v3161@b) '$core-rtd)) (cons '$rtd (map v2eb1@bless (cdr v3161@b))) (if (and (pair? v3161@b) (eq? (car v3161@b) 'global-rtd)) ((lambda (v3163@lib v3164@loc) (cons '$rtd (symbol-value v3164@loc))) (cadr v3161@b) (cddr v3161@b)) v3161@b))) v315f@t) ((lambda (v3167@t) (if v3167@t (cdr v3167@t) ((lambda (v3169@t) (if v3169@t ((lambda (v316b@env) ((lambda (v316d@t) (if v316d@t ((lambda (v316f@p) (cons* 'lexical (cdr v316f@p) '#f)) v316d@t) '(displaced-lexical . #f))) (assq v315b@x (v2fa8@interaction-env-locs v316b@env)))) v3169@t) '(displaced-lexical . #f))) (v2ff2@top-level-context)))) (assq v315b@x v315c@r)))) (v2b13@v29b3@imported-label->binding v315b@x)))) (set! v2d10@make-binding cons) (set! v2d12@binding-type car) (set! v2d14@binding-value cdr) (set! v2d16@raise-unbound-error (lambda (v3171@id) (v2fe2@syntax-violation* '#f '"unbound identifier" v3171@id (v4d21@v4b67@make-undefined-violation)))) (set! v2d18@syntax-type (lambda (v3173@e v3174@r) (if (v2cf0@id? v3173@e) ((lambda (v3177@id) ((lambda (v3179@label) ((lambda (v317b@b) ((lambda (v317d@type) ((lambda () (begin (if (not v3179@label) (v2d16@raise-unbound-error v3177@id) (void)) ((lambda (v317f@t) (if (memv v317f@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values v317d@type (v2d14@binding-value v317b@b) v3177@id) (values 'other '#f '#f))) v317d@type))))) (v2d12@binding-type v317b@b))) (v2d0e@label->binding v3179@label v3174@r))) (v2d0a@id->label v3177@id))) v3173@e) (if (v2ce2@syntax-pair? v3173@e) ((lambda (v3181@id) (if (v2cf0@id? v3181@id) ((lambda (v3183@label) ((lambda (v3185@b) ((lambda (v3187@type) ((lambda () (begin (if (not v3183@label) (v2d16@raise-unbound-error v3181@id) (void)) ((lambda (v3189@t) (if (memv v3189@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values v3187@type (v2d14@binding-value v3185@b) v3181@id) (values 'call '#f '#f))) v3187@type))))) (v2d12@binding-type v3185@b))) (v2d0e@label->binding v3183@label v3174@r))) (v2d0a@id->label v3181@id)) (values 'call '#f '#f))) (v2cea@syntax-car v3173@e)) ((lambda (v318b@d) (if (v2d00@self-evaluating? v318b@d) (values 'constant v318b@d '#f) (values 'other '#f '#f))) (v2d06@stx->datum v3173@e)))))) (set! v2d26@sanitize-binding (lambda (v318d@x v318e@src) (if (procedure? v318d@x) (cons* 'local-macro v318d@x v318e@src) (if (and (pair? v318d@x) (eq? (car v318d@x) 'macro!) (procedure? (cdr v318d@x))) (cons* 'local-macro! (cdr v318d@x) v318e@src) (if (and (pair? v318d@x) (eq? (car v318d@x) '$rtd)) v318d@x (assertion-violation 'expand '"invalid transformer" v318d@x)))))) (set! v2d28@make-variable-transformer (lambda (v3191@x) (if (procedure? v3191@x) (cons 'macro! v3191@x) (assertion-violation 'make-variable-transformer '"not a procedure" v3191@x)))) (set! v2d2a@variable-transformer? (lambda (v3193@x) (and (pair? v3193@x) (eq? (car v3193@x) 'macro!) (procedure? (cdr v3193@x))))) (set! v2d2c@variable-transformer-procedure (lambda (v3195@x) (if (v2d2a@variable-transformer? v3195@x) (cdr v3195@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" v3195@x)))) (set! v2d2e@make-eval-transformer (lambda (v3197@x) (v2d26@sanitize-binding (eval-core (v28ee@v28a6@expanded->core v3197@x)) v3197@x))) (set! v2e7f@parse-define (lambda (v3199@x) ((lambda (v319b@t) ((lambda (v319d@ls/false) (if (and v319d@ls/false (apply (lambda (v319f@id v31a0@fmls v31a1@b v31a2@b*) (v2cf0@id? v319f@id)) v319d@ls/false)) (apply (lambda (v31a7@id v31a8@fmls v31a9@b v31aa@b*) (begin (v2f21@verify-formals v31a8@fmls v3199@x) (values v31a7@id (cons 'defun (cons v31a8@fmls (cons v31a9@b v31aa@b*)))))) v319d@ls/false) ((lambda (v31af@t) ((lambda (v31b1@ls/false) (if (and v31b1@ls/false (apply (lambda (v31b3@id v31b4@val) (v2cf0@id? v31b3@id)) v31b1@ls/false)) (apply (lambda (v31b7@id v31b8@val) (values v31b7@id (cons 'expr v31b8@val))) v31b1@ls/false) ((lambda (v31bb@t) ((lambda (v31bd@ls/false) (if (and v31bd@ls/false (apply (lambda (v31bf@id) (v2cf0@id? v31bf@id)) v31bd@ls/false)) (apply (lambda (v31c1@id) (values v31c1@id (cons 'expr (v2eb1@bless '(void))))) v31bd@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v31bb@t))) (v2efb@syntax-dispatch v31bb@t '(_ any)))) v31af@t))) (v2efb@syntax-dispatch v31af@t '(_ any any)))) v319b@t))) (v2efb@syntax-dispatch v319b@t '(_ (any . any) any . each-any)))) v3199@x))) (set! v2e81@parse-define-syntax (lambda (v31c3@x) ((lambda (v31c5@t) ((lambda (v31c7@ls/false) (if (and v31c7@ls/false (apply (lambda (v31c9@id v31ca@val) (v2cf0@id? v31c9@id)) v31c7@ls/false)) (apply (lambda (v31cd@id v31ce@val) (values v31cd@id v31ce@val)) v31c7@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v31c5@t))) (v2efb@syntax-dispatch v31c5@t '(_ any any)))) v31c3@x))) (set! v2e83@scheme-stx-hashtable (make-eq-hashtable)) (set! v2e85@scheme-stx (lambda (v31d1@sym) (or (hashtable-ref v2e83@scheme-stx-hashtable v31d1@sym '#f) ((lambda (v31d3@subst) ((lambda (v31d5@stx) ((lambda (v31d7@stx) ((lambda () (begin (hashtable-set! v2e83@scheme-stx-hashtable v31d1@sym v31d7@stx) v31d7@stx)))) ((lambda (v31d9@t) (if v31d9@t ((lambda (v31db@x) ((lambda (v31dd@name v31de@label) (v2cdc@add-subst (v2c89@make-rib (list v31dd@name) (list v2c6c@top-mark*) (list v31de@label) '#f '#f) v31d5@stx)) (car v31db@x) (cdr v31db@x))) v31d9@t) v31d5@stx)) (assq v31d1@sym v31d3@subst)))) (v2cba@make-stx v31d1@sym v2c6c@top-mark* '() '()))) (v2ae9@v295f@library-subst (v2b0d@v29a7@find-library-by-name '(psyntax system $all))))))) (set! v2e87@lexical-var car) (set! v2e89@lexical-mutable? cdr) (set! v2e8b@set-lexical-mutable! set-cdr!) (set! v2e8d@add-lexical (lambda (v31e1@lab v31e2@lex v31e3@r) (cons (cons* v31e1@lab 'lexical v31e2@lex '#f) v31e3@r))) (set! v2e8f@add-lexicals (lambda (v31e7@lab* v31e8@lex* v31e9@r) (if (null? v31e7@lab*) v31e9@r (v2e8f@add-lexicals (cdr v31e7@lab*) (cdr v31e8@lex*) (v2e8d@add-lexical (car v31e7@lab*) (car v31e8@lex*) v31e9@r))))) (set! v2e91@letrec-helper (lambda (v31ed@e v31ee@r v31ef@mr v31f0@build) ((lambda (v31f5@t) ((lambda (v31f7@ls/false) (if v31f7@ls/false (apply (lambda (v31f9@lhs* v31fa@rhs* v31fb@b v31fc@b*) (if (not (v2cfa@valid-bound-ids? v31f9@lhs*)) (v2eb5@invalid-fmls-error v31ed@e v31f9@lhs*) ((lambda (v3201@lex* v3202@lab*) ((lambda (v3205@rib v3206@r) ((lambda (v3209@body v320a@rhs*) (v31f0@build '#f v3201@lex* v320a@rhs* v3209@body)) (v2f33@chi-internal (v2cdc@add-subst v3205@rib (cons v31fb@b v31fc@b*)) v3206@r v31ef@mr) (v2f19@chi-expr* (map (lambda (v320d@x) (v2cdc@add-subst v3205@rib v320d@x)) v31fa@rhs*) v3206@r v31ef@mr))) (v2cab@make-full-rib v31f9@lhs* v3202@lab*) (v2e8f@add-lexicals v3202@lab* v3201@lex* v31ee@r))) (map v2c70@gen-lexical v31f9@lhs*) (map v2c74@gen-label v31f9@lhs*)))) v31f7@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v31f5@t))) (v2efb@syntax-dispatch v31f5@t '(_ #(each (any any)) any . each-any)))) v31ed@e))) (set! v2e93@letrec-transformer (lambda (v320f@e v3210@r v3211@mr) (v2e91@letrec-helper v320f@e v3210@r v3211@mr v2c51@v2bc2@build-letrec))) (set! v2e95@letrec*-transformer (lambda (v3215@e v3216@r v3217@mr) (v2e91@letrec-helper v3215@e v3216@r v3217@mr v2c52@v2bc4@build-letrec*))) (set! v2e97@fluid-let-syntax-transformer (lambda (v321b@e v321c@r v321d@mr) ((lambda (v3222@lookup) (begin (set! v3222@lookup (lambda (v3235@x) (or (v2d0a@id->label v3235@x) (v2fe4@syntax-violation '#f '"unbound identifier" v321b@e v3235@x)))) ((lambda (v3223@t) ((lambda (v3225@ls/false) (if v3225@ls/false (apply (lambda (v3227@lhs* v3228@rhs* v3229@b v322a@b*) (if (not (v2cfa@valid-bound-ids? v3227@lhs*)) (v2eb5@invalid-fmls-error v321b@e v3227@lhs*) ((lambda (v322f@lab* v3230@rhs*) (v2f33@chi-internal (cons v3229@b v322a@b*) (append (map cons v322f@lab* v3230@rhs*) v321c@r) (append (map cons v322f@lab* v3230@rhs*) v321d@mr))) (map v3222@lookup v3227@lhs*) (map (lambda (v3233@x) (v2d2e@make-eval-transformer (v2f58@expand-transformer v3233@x v321d@mr))) v3228@rhs*)))) v3225@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3223@t))) (v2efb@syntax-dispatch v3223@t '(_ #(each (any any)) any . each-any)))) v321b@e))) '#f))) (set! v2e99@type-descriptor-transformer (lambda (v3237@e v3238@r v3239@mr) ((lambda (v323d@t) ((lambda (v323f@ls/false) (if (and v323f@ls/false (apply (lambda (v3241@id) (v2cf0@id? v3241@id)) v323f@ls/false)) (apply (lambda (v3243@id) ((lambda (v3245@lab) ((lambda (v3247@b) ((lambda (v3249@type) ((lambda () (begin (if (not v3245@lab) (v2d16@raise-unbound-error v3243@id) (void)) (if (not (and (eq? v3249@type '$rtd) (not (list? (v2d14@binding-value v3247@b))))) (v2fe4@syntax-violation '#f '"not a record type" v3237@e) (void)) (list 'quote (v2d14@binding-value v3247@b)))))) (v2d12@binding-type v3247@b))) (v2d0e@label->binding v3245@lab v3238@r))) (v2d0a@id->label v3243@id))) v323f@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v323d@t))) (v2efb@syntax-dispatch v323d@t '(_ any)))) v3237@e))) (set! v2e9b@record-type-descriptor-transformer (lambda (v324b@e v324c@r v324d@mr) ((lambda (v3251@t) ((lambda (v3253@ls/false) (if (and v3253@ls/false (apply (lambda (v3255@id) (v2cf0@id? v3255@id)) v3253@ls/false)) (apply (lambda (v3257@id) ((lambda (v3259@lab) ((lambda (v325b@b) ((lambda (v325d@type) ((lambda () (begin (if (not v3259@lab) (v2d16@raise-unbound-error v3257@id) (void)) (if (not (and (eq? v325d@type '$rtd) (list? (v2d14@binding-value v325b@b)))) (v2fe4@syntax-violation '#f '"not a record type" v324b@e) (void)) (v2f1d@chi-expr (car (v2d14@binding-value v325b@b)) v324c@r v324d@mr))))) (v2d12@binding-type v325b@b))) (v2d0e@label->binding v3259@lab v324c@r))) (v2d0a@id->label v3257@id))) v3253@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3251@t))) (v2efb@syntax-dispatch v3251@t '(_ any)))) v324b@e))) (set! v2e9d@record-constructor-descriptor-transformer (lambda (v325f@e v3260@r v3261@mr) ((lambda (v3265@t) ((lambda (v3267@ls/false) (if (and v3267@ls/false (apply (lambda (v3269@id) (v2cf0@id? v3269@id)) v3267@ls/false)) (apply (lambda (v326b@id) ((lambda (v326d@lab) ((lambda (v326f@b) ((lambda (v3271@type) ((lambda () (begin (if (not v326d@lab) (v2d16@raise-unbound-error v326b@id) (void)) (if (not (and (eq? v3271@type '$rtd) (list? (v2d14@binding-value v326f@b)))) (v2fe4@syntax-violation '#f '"invalid type" v325f@e) (void)) (v2f1d@chi-expr (cadr (v2d14@binding-value v326f@b)) v3260@r v3261@mr))))) (v2d12@binding-type v326f@b))) (v2d0e@label->binding v326d@lab v3260@r))) (v2d0a@id->label v326b@id))) v3267@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3265@t))) (v2efb@syntax-dispatch v3265@t '(_ any)))) v325f@e))) (set! v2e9f@when-macro (lambda (v3273@e) ((lambda (v3275@t) ((lambda (v3277@ls/false) (if v3277@ls/false (apply (lambda (v3279@test v327a@e v327b@e*) (v2eb1@bless (list 'if v3279@test (cons 'begin (cons v327a@e v327b@e*))))) v3277@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3275@t))) (v2efb@syntax-dispatch v3275@t '(_ any any . each-any)))) v3273@e))) (set! v2ea1@unless-macro (lambda (v327f@e) ((lambda (v3281@t) ((lambda (v3283@ls/false) (if v3283@ls/false (apply (lambda (v3285@test v3286@e v3287@e*) (v2eb1@bless (list 'if (list 'not v3285@test) (cons 'begin (cons v3286@e v3287@e*))))) v3283@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3281@t))) (v2efb@syntax-dispatch v3281@t '(_ any any . each-any)))) v327f@e))) (set! v2ea3@if-transformer (lambda (v328b@e v328c@r v328d@mr) ((lambda (v3291@t) ((lambda (v3293@ls/false) (if v3293@ls/false (apply (lambda (v3295@e0 v3296@e1 v3297@e2) (list 'if (v2f1d@chi-expr v3295@e0 v328c@r v328d@mr) (v2f1d@chi-expr v3296@e1 v328c@r v328d@mr) (v2f1d@chi-expr v3297@e2 v328c@r v328d@mr))) v3293@ls/false) ((lambda (v329b@t) ((lambda (v329d@ls/false) (if v329d@ls/false (apply (lambda (v329f@e0 v32a0@e1) (list 'if (v2f1d@chi-expr v329f@e0 v328c@r v328d@mr) (v2f1d@chi-expr v32a0@e1 v328c@r v328d@mr) (v2c50@v2bc0@build-void))) v329d@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v329b@t))) (v2efb@syntax-dispatch v329b@t '(_ any any)))) v3291@t))) (v2efb@syntax-dispatch v3291@t '(_ any any any)))) v328b@e))) (set! v2ea5@and-transformer (lambda (v32a3@e v32a4@r v32a5@mr) ((lambda (v32a9@t) ((lambda (v32ab@ls/false) (if v32ab@ls/false (apply (lambda (v32ad@e*) (cons 'and (v2f19@chi-expr* v32ad@e* v32a4@r v32a5@mr))) v32ab@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v32a9@t))) (v2efb@syntax-dispatch v32a9@t '(_ . each-any)))) v32a3@e))) (set! v2ea7@or-transformer (lambda (v32af@e v32b0@r v32b1@mr) ((lambda (v32b5@t) ((lambda (v32b7@ls/false) (if v32b7@ls/false (apply (lambda (v32b9@e*) (cons 'or (v2f19@chi-expr* v32b9@e* v32b0@r v32b1@mr))) v32b7@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v32b5@t))) (v2efb@syntax-dispatch v32b5@t '(_ . each-any)))) v32af@e))) (set! v2ea9@case-macro (lambda (v32bb@e) ((lambda (v32be@build-last v32c0@build-one) (begin (set! v32be@build-last (lambda (v32e5@cls) ((lambda (v32e7@t) ((lambda (v32e9@ls/false) (if v32e9@ls/false (apply (lambda (v32eb@e v32ec@e*) (cons 'begin (cons v32eb@e v32ec@e*))) v32e9@ls/false) ((lambda (v32ef@t) ((lambda (v32f1@ls/false) (if v32f1@ls/false (apply (lambda () (v32c0@build-one v32e5@cls '(if #f #f))) v32f1@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v32ef@t))) (v2efb@syntax-dispatch v32ef@t '_))) v32e7@t))) (v2efb@syntax-dispatch v32e7@t '(#(scheme-id else) any . each-any)))) v32e5@cls))) (set! v32c0@build-one (lambda (v32d7@cls v32d8@k) ((lambda (v32db@t) ((lambda (v32dd@ls/false) (if v32dd@ls/false (apply (lambda (v32df@d* v32e0@e v32e1@e*) (list 'if (list 'memv 't (list 'quote v32df@d*)) (cons 'begin (cons v32e0@e v32e1@e*)) v32d8@k)) v32dd@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v32db@t))) (v2efb@syntax-dispatch v32db@t '(each-any any . each-any)))) v32d7@cls))) ((lambda (v32c1@t) ((lambda (v32c3@ls/false) (if v32c3@ls/false (apply (lambda (v32c5@expr) (v2eb1@bless (cons 'let (cons (list (list 't v32c5@expr)) '((if #f #f)))))) v32c3@ls/false) ((lambda (v32c7@t) ((lambda (v32c9@ls/false) (if v32c9@ls/false (apply (lambda (v32cb@expr v32cc@cls v32cd@cls*) (v2eb1@bless (list 'let (list (list 't v32cb@expr)) ((letrec ((v32d1@f (lambda (v32d3@cls v32d4@cls*) (if (null? v32d4@cls*) (v32be@build-last v32d3@cls) (v32c0@build-one v32d3@cls (v32d1@f (car v32d4@cls*) (cdr v32d4@cls*))))))) v32d1@f) v32cc@cls v32cd@cls*)))) v32c9@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v32c7@t))) (v2efb@syntax-dispatch v32c7@t '(_ any any . each-any)))) v32c1@t))) (v2efb@syntax-dispatch v32c1@t '(_ any)))) v32bb@e))) '#f '#f))) (set! v2eab@quote-transformer (lambda (v32f3@e v32f4@r v32f5@mr) ((lambda (v32f9@t) ((lambda (v32fb@ls/false) (if v32fb@ls/false (apply (lambda (v32fd@datum) (list 'quote (v2d06@stx->datum v32fd@datum))) v32fb@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v32f9@t))) (v2efb@syntax-dispatch v32f9@t '(_ any)))) v32f3@e))) (set! v2ead@case-lambda-transformer (lambda (v32ff@e v3300@r v3301@mr) ((lambda (v3305@t) ((lambda (v3307@ls/false) (if v3307@ls/false (apply (lambda (v3309@fmls* v330a@b* v330b@b**) (call-with-values (lambda () (v2f25@chi-lambda-clause* v32ff@e v3309@fmls* (map cons v330a@b* v330b@b**) v3300@r v3301@mr)) (lambda (v3313@v3310 v3314@v3312) ((lambda (v3317@body* v3318@fmls*) (v2c4d@v2b8e@build-case-lambda '#f v3318@fmls* v3317@body*)) v3314@v3312 v3313@v3310)))) v3307@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3305@t))) (v2efb@syntax-dispatch v3305@t '(_ . #(each (any any . each-any)))))) v32ff@e))) (set! v2eaf@lambda-transformer (lambda (v331b@e v331c@r v331d@mr) ((lambda (v3321@t) ((lambda (v3323@ls/false) (if v3323@ls/false (apply (lambda (v3325@fmls v3326@b v3327@b*) (call-with-values (lambda () (v2f23@chi-lambda-clause v331b@e v3325@fmls (cons v3326@b v3327@b*) v331c@r v331d@mr)) (lambda (v332f@v332c v3330@v332e) ((lambda (v3333@body v3334@fmls) (v2c4c@v2b8c@build-lambda '#f v3334@fmls v3333@body)) v3330@v332e v332f@v332c)))) v3323@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3321@t))) (v2efb@syntax-dispatch v3321@t '(_ any any . each-any)))) v331b@e))) (set! v2eb1@bless (lambda (v3337@x) (v2cd8@mkstx ((letrec ((v3339@f (lambda (v333b@x) (if (v2cb8@stx? v333b@x) v333b@x (if (pair? v333b@x) (cons (v3339@f (car v333b@x)) (v3339@f (cdr v333b@x))) (if (symbol? v333b@x) (v2e85@scheme-stx v333b@x) (if (vector? v333b@x) (vector-map v3339@f v333b@x) v333b@x))))))) v3339@f) v3337@x) '() '() '()))) (set! v2eb3@with-syntax-macro (lambda (v333d@e) ((lambda (v333f@t) ((lambda (v3341@ls/false) (if v3341@ls/false (apply (lambda (v3343@pat* v3344@expr* v3345@b v3346@b*) ((lambda (v334b@idn*) (begin (v2f21@verify-formals (map car v334b@idn*) v333d@e) ((lambda (v334d@t*) (v2eb1@bless (list 'let (map list v334d@t* v3344@expr*) ((letrec ((v334f@f (lambda (v3351@pat* v3352@t*) (if (null? v3351@pat*) (cons 'begin (cons '#f (cons v3345@b v3346@b*))) (list 'syntax-case (car v3352@t*) '() (list (car v3351@pat*) (v334f@f (cdr v3351@pat*) (cdr v3352@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car v3351@pat*)) (car v3352@t*)))))))) v334f@f) v3343@pat* v334d@t*)))) (v2fd2@generate-temporaries v3344@expr*)))) ((letrec ((v3355@f (lambda (v3357@pat*) (if (null? v3357@pat*) '() (call-with-values (lambda () (v2ef9@convert-pattern (car v3357@pat*) '())) (lambda (v335d@v335a v335e@v335c) ((lambda (v3361@idn* v3362@pat) (append v3361@idn* (v3355@f (cdr v3357@pat*)))) v335e@v335c v335d@v335a))))))) v3355@f) v3343@pat*))) v3341@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v333f@t))) (v2efb@syntax-dispatch v333f@t '(_ #(each (any any)) any . each-any)))) v333d@e))) (set! v2eb5@invalid-fmls-error (lambda (v3365@stx v3366@fmls) ((lambda (v3369@t) ((lambda (v336b@ls/false) (if v336b@ls/false (apply (lambda (v336d@id* v336e@last) ((letrec ((v3371@f (lambda (v3373@id*) (if (null? v3373@id*) (values) (if (not (v2cf0@id? (car v3373@id*))) (v2fe4@syntax-violation '#f '"not an identifier" v3365@stx (car v3373@id*)) (begin (v3371@f (cdr v3373@id*)) (if (v2cfe@bound-id-member? (car v3373@id*) (cdr v3373@id*)) (v2fe4@syntax-violation '#f '"duplicate binding" v3365@stx (car v3373@id*)) (void)))))))) v3371@f) (if (v2cf0@id? v336e@last) (cons v336e@last v336d@id*) (if (v2ce6@syntax-null? v336e@last) v336d@id* (v2fe4@syntax-violation '#f '"not an identifier" v3365@stx v336e@last))))) v336b@ls/false) ((lambda (v3375@t) ((lambda (v3377@ls/false) (if v3377@ls/false (apply (lambda () (v2fe4@syntax-violation '#f '"malformed binding form" v3365@stx v3366@fmls)) v3377@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3375@t))) (v2efb@syntax-dispatch v3375@t '_))) v3369@t))) (v2efb@syntax-dispatch v3369@t '#(each+ any () any)))) v3366@fmls))) (set! v2eb7@let-macro (lambda (v3379@stx) ((lambda (v337b@t) ((lambda (v337d@ls/false) (if v337d@ls/false (apply (lambda (v337f@lhs* v3380@rhs* v3381@b v3382@b*) (if (v2cfa@valid-bound-ids? v337f@lhs*) (v2eb1@bless (cons (cons 'lambda (cons v337f@lhs* (cons v3381@b v3382@b*))) v3380@rhs*)) (v2eb5@invalid-fmls-error v3379@stx v337f@lhs*))) v337d@ls/false) ((lambda (v3387@t) ((lambda (v3389@ls/false) (if (and v3389@ls/false (apply (lambda (v338b@f v338c@lhs* v338d@rhs* v338e@b v338f@b*) (v2cf0@id? v338b@f)) v3389@ls/false)) (apply (lambda (v3395@f v3396@lhs* v3397@rhs* v3398@b v3399@b*) (if (v2cfa@valid-bound-ids? v3396@lhs*) (v2eb1@bless (cons (list 'letrec (list (list v3395@f (cons 'lambda (cons v3396@lhs* (cons v3398@b v3399@b*))))) v3395@f) v3397@rhs*)) (v2eb5@invalid-fmls-error v3379@stx v3396@lhs*))) v3389@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3387@t))) (v2efb@syntax-dispatch v3387@t '(_ any #(each (any any)) any . each-any)))) v337b@t))) (v2efb@syntax-dispatch v337b@t '(_ #(each (any any)) any . each-any)))) v3379@stx))) (set! v2eb9@let-values-macro (lambda (v339f@stx) ((lambda (v33a2@rename v33a4@rename*) (begin (set! v33a2@rename (lambda (v3407@x v3408@old* v3409@new*) (begin (if (not (v2cf0@id? v3407@x)) (v2fe4@syntax-violation '#f '"not an indentifier" v339f@stx v3407@x) (void)) (if (v2cfe@bound-id-member? v3407@x v3408@old*) (v2fe4@syntax-violation '#f '"duplicate binding" v339f@stx v3407@x) (void)) ((lambda (v340d@y) (values v340d@y (cons v3407@x v3408@old*) (cons v340d@y v3409@new*))) (gensym (v2fea@syntax->datum v3407@x)))))) (set! v33a4@rename* (lambda (v33f5@x* v33f6@old* v33f7@new*) (if (null? v33f5@x*) (values '() v33f6@old* v33f7@new*) (call-with-values (lambda () (v33a2@rename (car v33f5@x*) v33f6@old* v33f7@new*)) (lambda (v33fb@x v33fc@old* v33fd@new*) (call-with-values (lambda () (v33a4@rename* (cdr v33f5@x*) v33fc@old* v33fd@new*)) (lambda (v3401@x* v3402@old* v3403@new*) (values (cons v33fb@x v3401@x*) v3402@old* v3403@new*)))))))) ((lambda (v33a5@t) ((lambda (v33a7@ls/false) (if v33a7@ls/false (apply (lambda (v33a9@b v33aa@b*) (cons* (v2eb1@bless 'let) '() v33a9@b v33aa@b*)) v33a7@ls/false) ((lambda (v33ad@t) ((lambda (v33af@ls/false) (if v33af@ls/false (apply (lambda (v33b1@lhs* v33b2@rhs* v33b3@b v33b4@b*) (v2eb1@bless ((letrec ((v33b9@f (lambda (v33bb@lhs* v33bc@rhs* v33bd@old* v33be@new*) (if (null? v33bb@lhs*) (cons 'let (cons (map list v33bd@old* v33be@new*) (cons v33b3@b v33b4@b*))) ((lambda (v33c3@t) ((lambda (v33c5@ls/false) (if v33c5@ls/false (apply (lambda (v33c7@x*) (call-with-values (lambda () (v33a4@rename* v33c7@x* v33bd@old* v33be@new*)) (lambda (v33cf@v33ca v33d0@v33cc v33d1@v33ce) ((lambda (v33d5@new* v33d6@old* v33d7@y*) (list 'call-with-values (list 'lambda '() (car v33bc@rhs*)) (list 'lambda v33d7@y* (v33b9@f (cdr v33bb@lhs*) (cdr v33bc@rhs*) v33d6@old* v33d5@new*)))) v33d1@v33ce v33d0@v33cc v33cf@v33ca)))) v33c5@ls/false) ((lambda (v33db@t) ((lambda (v33dd@ls/false) (if v33dd@ls/false (apply (lambda (v33df@x* v33e0@x) (call-with-values (lambda () (v33a2@rename v33e0@x v33bd@old* v33be@new*)) (lambda (v33e3@y v33e4@old* v33e5@new*) (call-with-values (lambda () (v33a4@rename* v33df@x* v33e4@old* v33e5@new*)) (lambda (v33e9@y* v33ea@old* v33eb@new*) (list 'call-with-values (list 'lambda '() (car v33bc@rhs*)) (list 'lambda (append v33e9@y* v33e3@y) (v33b9@f (cdr v33bb@lhs*) (cdr v33bc@rhs*) v33ea@old* v33eb@new*)))))))) v33dd@ls/false) ((lambda (v33ef@t) ((lambda (v33f1@ls/false) (if v33f1@ls/false (apply (lambda (v33f3@others) (v2fe4@syntax-violation '#f '"malformed bindings" v339f@stx v33f3@others)) v33f1@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v33ef@t))) (v2efb@syntax-dispatch v33ef@t 'any))) v33db@t))) (v2efb@syntax-dispatch v33db@t '#(each+ any () any)))) v33c3@t))) (v2efb@syntax-dispatch v33c3@t 'each-any))) (car v33bb@lhs*)))))) v33b9@f) v33b1@lhs* v33b2@rhs* '() '()))) v33af@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v33ad@t))) (v2efb@syntax-dispatch v33ad@t '(_ #(each (any any)) any . each-any)))) v33a5@t))) (v2efb@syntax-dispatch v33a5@t '(_ () any . each-any)))) v339f@stx))) '#f '#f))) (set! v2ebb@let*-values-macro (lambda (v340f@stx) ((lambda (v3412@check) (begin (set! v3412@check (lambda (v3441@x*) (if (not (null? v3441@x*)) ((lambda (v3443@x) (begin (if (not (v2cf0@id? v3443@x)) (v2fe4@syntax-violation '#f '"not an identifier" v340f@stx v3443@x) (void)) (v3412@check (cdr v3441@x*)) (if (v2cfe@bound-id-member? v3443@x (cdr v3441@x*)) (v2fe4@syntax-violation '#f '"duplicate identifier" v340f@stx v3443@x) (void)))) (car v3441@x*)) (void)))) ((lambda (v3413@t) ((lambda (v3415@ls/false) (if v3415@ls/false (apply (lambda (v3417@b v3418@b*) (cons* (v2eb1@bless 'let) '() v3417@b v3418@b*)) v3415@ls/false) ((lambda (v341b@t) ((lambda (v341d@ls/false) (if v341d@ls/false (apply (lambda (v341f@lhs* v3420@rhs* v3421@b v3422@b*) (v2eb1@bless ((letrec ((v3427@f (lambda (v3429@lhs* v342a@rhs*) (if (null? v3429@lhs*) (cons 'begin (cons v3421@b v3422@b*)) ((lambda (v342d@t) ((lambda (v342f@ls/false) (if v342f@ls/false (apply (lambda (v3431@x*) (begin (v3412@check v3431@x*) (list 'call-with-values (list 'lambda '() (car v342a@rhs*)) (list 'lambda v3431@x* (v3427@f (cdr v3429@lhs*) (cdr v342a@rhs*)))))) v342f@ls/false) ((lambda (v3433@t) ((lambda (v3435@ls/false) (if v3435@ls/false (apply (lambda (v3437@x* v3438@x) (begin (v3412@check (cons v3438@x v3437@x*)) (list 'call-with-values (list 'lambda '() (car v342a@rhs*)) (list 'lambda (append v3437@x* v3438@x) (v3427@f (cdr v3429@lhs*) (cdr v342a@rhs*)))))) v3435@ls/false) ((lambda (v343b@t) ((lambda (v343d@ls/false) (if v343d@ls/false (apply (lambda (v343f@others) (v2fe4@syntax-violation '#f '"malformed bindings" v340f@stx v343f@others)) v343d@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v343b@t))) (v2efb@syntax-dispatch v343b@t 'any))) v3433@t))) (v2efb@syntax-dispatch v3433@t '#(each+ any () any)))) v342d@t))) (v2efb@syntax-dispatch v342d@t 'each-any))) (car v3429@lhs*)))))) v3427@f) v341f@lhs* v3420@rhs*))) v341d@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v341b@t))) (v2efb@syntax-dispatch v341b@t '(_ #(each (any any)) any . each-any)))) v3413@t))) (v2efb@syntax-dispatch v3413@t '(_ () any . each-any)))) v340f@stx))) '#f))) (set! v2ebd@trace-lambda-macro (lambda (v3445@stx) ((lambda (v3447@t) ((lambda (v3449@ls/false) (if v3449@ls/false (apply (lambda (v344b@who v344c@fmls v344d@b v344e@b*) (if (v2cfa@valid-bound-ids? v344c@fmls) (v2eb1@bless (list 'make-traced-procedure (list 'quote v344b@who) (cons 'lambda (cons v344c@fmls (cons v344d@b v344e@b*))))) (v2eb5@invalid-fmls-error v3445@stx v344c@fmls))) v3449@ls/false) ((lambda (v3453@t) ((lambda (v3455@ls/false) (if v3455@ls/false (apply (lambda (v3457@who v3458@fmls v3459@last v345a@b v345b@b*) (if (v2cfa@valid-bound-ids? (cons v3459@last v3458@fmls)) (v2eb1@bless (list 'make-traced-procedure (list 'quote v3457@who) (cons 'lambda (cons (append v3458@fmls v3459@last) (cons v345a@b v345b@b*))))) (v2eb5@invalid-fmls-error v3445@stx (append v3458@fmls v3459@last)))) v3455@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3453@t))) (v2efb@syntax-dispatch v3453@t '(_ any #(each+ any () any) any . each-any)))) v3447@t))) (v2efb@syntax-dispatch v3447@t '(_ any each-any any . each-any)))) v3445@stx))) (set! v2ebf@trace-define-macro (lambda (v3461@stx) ((lambda (v3463@t) ((lambda (v3465@ls/false) (if v3465@ls/false (apply (lambda (v3467@who v3468@fmls v3469@b v346a@b*) (if (v2cfa@valid-bound-ids? v3468@fmls) (v2eb1@bless (list 'define v3467@who (list 'make-traced-procedure (list 'quote v3467@who) (cons 'lambda (cons v3468@fmls (cons v3469@b v346a@b*)))))) (v2eb5@invalid-fmls-error v3461@stx v3468@fmls))) v3465@ls/false) ((lambda (v346f@t) ((lambda (v3471@ls/false) (if v3471@ls/false (apply (lambda (v3473@who v3474@fmls v3475@last v3476@b v3477@b*) (if (v2cfa@valid-bound-ids? (cons v3475@last v3474@fmls)) (v2eb1@bless (list 'define v3473@who (list 'make-traced-procedure (list 'quote v3473@who) (cons 'lambda (cons (append v3474@fmls v3475@last) (cons v3476@b v3477@b*)))))) (v2eb5@invalid-fmls-error v3461@stx (append v3474@fmls v3475@last)))) v3471@ls/false) ((lambda (v347d@t) ((lambda (v347f@ls/false) (if v347f@ls/false (apply (lambda (v3481@who v3482@expr) (if (v2cf0@id? v3481@who) (v2eb1@bless (list 'define v3481@who (list 'let (list (list 'v v3482@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote v3481@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (v2fe4@syntax-violation '#f '"invalid name" v3461@stx))) v347f@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v347d@t))) (v2efb@syntax-dispatch v347d@t '(_ any any)))) v346f@t))) (v2efb@syntax-dispatch v346f@t '(_ (any . #(each+ any () any)) any . each-any)))) v3463@t))) (v2efb@syntax-dispatch v3463@t '(_ (any . each-any) any . each-any)))) v3461@stx))) (set! v2ec1@trace-define-syntax-macro (lambda (v3485@stx) ((lambda (v3487@t) ((lambda (v3489@ls/false) (if v3489@ls/false (apply (lambda (v348b@who v348c@expr) (if (v2cf0@id? v348b@who) (v2eb1@bless (list 'define-syntax v348b@who (list 'make-traced-macro (list 'quote v348b@who) v348c@expr))) (v2fe4@syntax-violation '#f '"invalid name" v3485@stx))) v3489@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3487@t))) (v2efb@syntax-dispatch v3487@t '(_ any any)))) v3485@stx))) (set! v2ec3@trace-let/rec-syntax (lambda (v348f@who) (lambda (v3491@stx) ((lambda (v3493@t) ((lambda (v3495@ls/false) (if v3495@ls/false (apply (lambda (v3497@lhs* v3498@rhs* v3499@b v349a@b*) (if (v2cfa@valid-bound-ids? v3497@lhs*) ((lambda (v349f@rhs*) (v2eb1@bless (cons v348f@who (cons (map list v3497@lhs* v349f@rhs*) (cons v3499@b v349a@b*))))) (map (lambda (v34a1@lhs v34a2@rhs) (list 'make-traced-macro (list 'quote v34a1@lhs) v34a2@rhs)) v3497@lhs* v3498@rhs*)) (v2eb5@invalid-fmls-error v3491@stx v3497@lhs*))) v3495@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3493@t))) (v2efb@syntax-dispatch v3493@t '(_ #(each (any any)) any . each-any)))) v3491@stx)))) (set! v2ec5@trace-let-syntax-macro (v2ec3@trace-let/rec-syntax 'let-syntax)) (set! v2ec7@trace-letrec-syntax-macro (v2ec3@trace-let/rec-syntax 'letrec-syntax)) (set! v2ec9@guard-macro (lambda (v34a5@x) ((lambda (v34a8@gen-clauses) (begin (set! v34a8@gen-clauses (lambda (v34bf@con v34c0@outerk v34c1@clause*) ((lambda (v34c6@f v34c8@f*) (begin (set! v34c6@f (lambda (v34ff@x v3500@k) ((lambda (v3503@t) ((lambda (v3505@ls/false) (if v3505@ls/false (apply (lambda (v3507@e v3508@p) ((lambda (v350b@t) (list 'let (list (list v350b@t v3507@e)) (list 'if v350b@t (list v3508@p v350b@t) v3500@k))) (gensym))) v3505@ls/false) ((lambda (v350d@t) ((lambda (v350f@ls/false) (if v350f@ls/false (apply (lambda (v3511@e) ((lambda (v3513@t) (list 'let (list (list v3513@t v3511@e)) (list 'if v3513@t v3513@t v3500@k))) (gensym))) v350f@ls/false) ((lambda (v3515@t) ((lambda (v3517@ls/false) (if v3517@ls/false (apply (lambda (v3519@e v351a@v v351b@v*) (list 'if v3519@e (cons 'begin (cons v351a@v v351b@v*)) v3500@k)) v3517@ls/false) ((lambda (v351f@t) ((lambda (v3521@ls/false) (if v3521@ls/false (apply (lambda () (v2fe4@syntax-violation '#f '"invalid guard clause" v34ff@x)) v3521@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v351f@t))) (v2efb@syntax-dispatch v351f@t '_))) v3515@t))) (v2efb@syntax-dispatch v3515@t '(any any . each-any)))) v350d@t))) (v2efb@syntax-dispatch v350d@t '(any)))) v3503@t))) (v2efb@syntax-dispatch v3503@t '(any #(scheme-id =>) any)))) v34ff@x))) (set! v34c8@f* (lambda (v34d5@x*) ((lambda (v34d7@t) ((lambda (v34d9@ls/false) (if v34d9@ls/false (apply (lambda () ((lambda (v34db@g) (values (list v34db@g (list 'lambda '() (list 'raise-continuable v34bf@con))) v34db@g)) (gensym))) v34d9@ls/false) ((lambda (v34dd@t) ((lambda (v34df@ls/false) (if v34df@ls/false (apply (lambda (v34e1@e v34e2@e*) (values (cons 'begin (cons v34e1@e v34e2@e*)) '#f)) v34df@ls/false) ((lambda (v34e5@t) ((lambda (v34e7@ls/false) (if v34e7@ls/false (apply (lambda (v34e9@cls v34ea@cls*) (call-with-values (lambda () (v34c8@f* v34ea@cls*)) (lambda (v34f1@v34ee v34f2@v34f0) ((lambda (v34f5@g v34f6@e) (values (v34c6@f v34e9@cls v34f6@e) v34f5@g)) v34f2@v34f0 v34f1@v34ee)))) v34e7@ls/false) ((lambda (v34f9@t) ((lambda (v34fb@ls/false) (if v34fb@ls/false (apply (lambda (v34fd@others) (v2fe4@syntax-violation '#f '"invalid guard clause" v34fd@others)) v34fb@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v34f9@t))) (v2efb@syntax-dispatch v34f9@t 'any))) v34e5@t))) (v2efb@syntax-dispatch v34e5@t '(any . any)))) v34dd@t))) (v2efb@syntax-dispatch v34dd@t '((#(scheme-id else) any . each-any))))) v34d7@t))) (v2efb@syntax-dispatch v34d7@t '()))) v34d5@x*))) (call-with-values (lambda () (v34c8@f* v34c1@clause*)) (lambda (v34cd@v34ca v34ce@v34cc) ((lambda (v34d1@raisek v34d2@code) (if v34d1@raisek (list (list 'call/cc (list 'lambda (list v34d1@raisek) (list v34c0@outerk (list 'lambda '() v34d2@code))))) (list v34c0@outerk (list 'lambda '() v34d2@code)))) v34ce@v34cc v34cd@v34ca))))) '#f '#f))) ((lambda (v34a9@t) ((lambda (v34ab@ls/false) (if (and v34ab@ls/false (apply (lambda (v34ad@con v34ae@clause* v34af@b v34b0@b*) (v2cf0@id? v34ad@con)) v34ab@ls/false)) (apply (lambda (v34b5@con v34b6@clause* v34b7@b v34b8@b*) ((lambda (v34bd@outerk) (v2eb1@bless (list (list 'call/cc (list 'lambda (list v34bd@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list v34b5@con) (v34a8@gen-clauses v34b5@con v34bd@outerk v34b6@clause*)) (cons 'lambda (cons '() (cons v34b7@b v34b8@b*)))))))))) (gensym))) v34ab@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v34a9@t))) (v2efb@syntax-dispatch v34a9@t '(_ (any . each-any) any . each-any)))) v34a5@x))) '#f))) (set! v2ecb@define-enumeration-macro (lambda (v3523@stx) ((lambda (v3526@set? v3528@remove-dups) (begin (set! v3526@set? (lambda (v353f@x) (or (null? v353f@x) (and (not (memq (car v353f@x) (cdr v353f@x))) (v3526@set? (cdr v353f@x)))))) (set! v3528@remove-dups (lambda (v353d@ls) (if (null? v353d@ls) '() (cons (car v353d@ls) (v3528@remove-dups (remq (car v353d@ls) (cdr v353d@ls))))))) ((lambda (v3529@t) ((lambda (v352b@ls/false) (if (and v352b@ls/false (apply (lambda (v352d@name v352e@id* v352f@maker) (and (v2cf0@id? v352d@name) (v2cf0@id? v352f@maker) (for-all v2cf0@id? v352e@id*))) v352b@ls/false)) (apply (lambda (v3533@name v3534@id* v3535@maker) ((lambda (v3539@name* v353a@mk) (v2eb1@bless (list 'begin (list 'define v353a@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote v3539@name*)))) (list 'define-syntax v3533@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote v3539@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote v3533@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax v3535@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote v3535@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote v3539@name*)) (cons 'syntax-violation (cons (list 'quote v3535@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons v353a@mk '('(n* ...)))))))))))) (v3528@remove-dups (v2fea@syntax->datum v3534@id*)) (gensym))) v352b@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3529@t))) (v2efb@syntax-dispatch v3529@t '(_ any each-any any)))) v3523@stx))) '#f '#f))) (set! v2ecd@time-macro (lambda (v3541@stx) ((lambda (v3543@t) ((lambda (v3545@ls/false) (if v3545@ls/false (apply (lambda (v3547@expr) (v2eb1@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() v3547@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) v3545@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3543@t))) (v2efb@syntax-dispatch v3543@t '(_ any)))) v3541@stx))) (set! v2ecf@delay-macro (lambda (v3549@stx) ((lambda (v354b@t) ((lambda (v354d@ls/false) (if v354d@ls/false (apply (lambda (v354f@expr) (v2eb1@bless (list 'make-promise (list 'lambda '() v354f@expr)))) v354d@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v354b@t))) (v2efb@syntax-dispatch v354b@t '(_ any)))) v3549@stx))) (set! v2ed1@assert-macro (lambda (v3551@stx) ((lambda (v3553@t) ((lambda (v3555@ls/false) (if v3555@ls/false (apply (lambda (v3557@expr) ((lambda (v3559@pos) (v2eb1@bless (list 'unless v3557@expr (list 'assertion-error (list 'quote v3557@expr) (list 'quote v3559@pos))))) (or (v2fdc@expression-position v3551@stx) (v2fdc@expression-position v3557@expr)))) v3555@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3553@t))) (v2efb@syntax-dispatch v3553@t '(_ any)))) v3551@stx))) (set! v2ed3@endianness-macro (lambda (v355b@stx) ((lambda (v355d@t) ((lambda (v355f@ls/false) (if v355f@ls/false (apply (lambda (v3561@e) ((lambda (v3563@t) (if (memv v3563@t '(little)) (v2eb1@bless ''little) (if (memv v3563@t '(big)) (v2eb1@bless ''big) (v2fe4@syntax-violation '#f '"endianness must be big or little" v355b@stx)))) (v2fea@syntax->datum v3561@e))) v355f@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v355d@t))) (v2efb@syntax-dispatch v355d@t '(_ any)))) v355b@stx))) (set! v2ed5@identifier-syntax-macro (lambda (v3565@stx) ((lambda (v3567@t) ((lambda (v3569@ls/false) (if v3569@ls/false (apply (lambda (v356b@expr) (v2eb1@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax v356b@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax v356b@expr) '((syntax (e* ...)))))))))) v3569@ls/false) ((lambda (v356d@t) ((lambda (v356f@ls/false) (if (and v356f@ls/false (apply (lambda (v3571@id1 v3572@expr1 v3573@id2 v3574@expr2 v3575@expr3) (and (v2cf0@id? v3571@id1) (v2cf0@id? v3573@id2) (v2cf0@id? v3574@expr2))) v356f@ls/false)) (apply (lambda (v357b@id1 v357c@expr1 v357d@id2 v357e@expr2 v357f@expr3) (v2eb1@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax v357c@expr1)) (list (list 'set! 'id v357e@expr2) (list 'syntax v357f@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons v357c@expr1 '(e* ...))))))))) v356f@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v356d@t))) (v2efb@syntax-dispatch v356d@t '(_ (any any) ((#(scheme-id set!) any any) any))))) v3567@t))) (v2efb@syntax-dispatch v3567@t '(_ any)))) v3565@stx))) (set! v2ed7@do-macro (lambda (v3585@stx) ((lambda (v3588@bind) (begin (set! v3588@bind (lambda (v359f@x) ((lambda (v35a1@t) ((lambda (v35a3@ls/false) (if v35a3@ls/false (apply (lambda (v35a5@x v35a6@init) (list v35a5@x v35a6@init v35a5@x)) v35a3@ls/false) ((lambda (v35a9@t) ((lambda (v35ab@ls/false) (if v35ab@ls/false (apply (lambda (v35ad@x v35ae@init v35af@step) (list v35ad@x v35ae@init v35af@step)) v35ab@ls/false) ((lambda (v35b3@t) ((lambda (v35b5@ls/false) (if v35b5@ls/false (apply (lambda () (v2fe4@syntax-violation '#f '"invalid binding" v3585@stx)) v35b5@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v35b3@t))) (v2efb@syntax-dispatch v35b3@t '_))) v35a9@t))) (v2efb@syntax-dispatch v35a9@t '(any any any)))) v35a1@t))) (v2efb@syntax-dispatch v35a1@t '(any any)))) v359f@x))) ((lambda (v3589@t) ((lambda (v358b@ls/false) (if v358b@ls/false (apply (lambda (v358d@binding* v358e@test v358f@expr* v3590@command*) ((lambda (v3595@t) ((lambda (v3597@ls/false) (if v3597@ls/false (apply (lambda (v3599@x* v359a@init* v359b@step*) (if (v2cfa@valid-bound-ids? v3599@x*) (v2eb1@bless (list 'letrec (list (list 'loop (list 'lambda v3599@x* (list 'if v358e@test (cons 'begin (cons '(if #f #f) v358f@expr*)) (cons 'begin (append v3590@command* (list (cons 'loop v359b@step*)))))))) (cons 'loop v359a@init*))) (v2fe4@syntax-violation '#f '"invalid bindings" v3585@stx))) v3597@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3595@t))) (v2efb@syntax-dispatch v3595@t '#(each (any any any))))) (map v3588@bind v358d@binding*))) v358b@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3589@t))) (v2efb@syntax-dispatch v3589@t '(_ each-any (any . each-any) . each-any)))) v3585@stx))) '#f))) (set! v2ed9@let*-macro (lambda (v35b7@stx) ((lambda (v35b9@t) ((lambda (v35bb@ls/false) (if (and v35bb@ls/false (apply (lambda (v35bd@lhs* v35be@rhs* v35bf@b v35c0@b*) (for-all v2cf0@id? v35bd@lhs*)) v35bb@ls/false)) (apply (lambda (v35c5@lhs* v35c6@rhs* v35c7@b v35c8@b*) (v2eb1@bless ((letrec ((v35cd@f (lambda (v35cf@x*) (if (null? v35cf@x*) (cons 'let (cons '() (cons v35c7@b v35c8@b*))) (list 'let (list (car v35cf@x*)) (v35cd@f (cdr v35cf@x*))))))) v35cd@f) (map list v35c5@lhs* v35c6@rhs*)))) v35bb@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v35b9@t))) (v2efb@syntax-dispatch v35b9@t '(_ #(each (any any)) any . each-any)))) v35b7@stx))) (set! v2edb@or-macro (lambda (v35d1@stx) ((lambda (v35d3@t) ((lambda (v35d5@ls/false) (if v35d5@ls/false (apply (lambda () '#f) v35d5@ls/false) ((lambda (v35d7@t) ((lambda (v35d9@ls/false) (if v35d9@ls/false (apply (lambda (v35db@e v35dc@e*) (v2eb1@bless ((letrec ((v35df@f (lambda (v35e1@e v35e2@e*) (if (null? v35e2@e*) (list 'begin '#f v35e1@e) (list 'let (list (list 't v35e1@e)) (list 'if 't 't (v35df@f (car v35e2@e*) (cdr v35e2@e*)))))))) v35df@f) v35db@e v35dc@e*))) v35d9@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v35d7@t))) (v2efb@syntax-dispatch v35d7@t '(_ any . each-any)))) v35d3@t))) (v2efb@syntax-dispatch v35d3@t '(_)))) v35d1@stx))) (set! v2edd@and-macro (lambda (v35e5@stx) ((lambda (v35e7@t) ((lambda (v35e9@ls/false) (if v35e9@ls/false (apply (lambda () '#t) v35e9@ls/false) ((lambda (v35eb@t) ((lambda (v35ed@ls/false) (if v35ed@ls/false (apply (lambda (v35ef@e v35f0@e*) (v2eb1@bless ((letrec ((v35f3@f (lambda (v35f5@e v35f6@e*) (if (null? v35f6@e*) (list 'begin '#f v35f5@e) (cons 'if (cons v35f5@e (cons (v35f3@f (car v35f6@e*) (cdr v35f6@e*)) '(#f)))))))) v35f3@f) v35ef@e v35f0@e*))) v35ed@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v35eb@t))) (v2efb@syntax-dispatch v35eb@t '(_ any . each-any)))) v35e7@t))) (v2efb@syntax-dispatch v35e7@t '(_)))) v35e5@stx))) (set! v2edf@cond-macro (lambda (v35f9@stx) ((lambda (v35fb@t) ((lambda (v35fd@ls/false) (if v35fd@ls/false (apply (lambda (v35ff@cls v3600@cls*) (v2eb1@bless ((letrec ((v3603@f (lambda (v3605@cls v3606@cls*) (if (null? v3606@cls*) ((lambda (v3609@t) ((lambda (v360b@ls/false) (if v360b@ls/false (apply (lambda (v360d@e v360e@e*) (cons 'begin (cons v360d@e v360e@e*))) v360b@ls/false) ((lambda (v3611@t) ((lambda (v3613@ls/false) (if v3613@ls/false (apply (lambda (v3615@e v3616@p) (list 'let (list (list 't v3615@e)) (list 'if 't (cons v3616@p '(t))))) v3613@ls/false) ((lambda (v3619@t) ((lambda (v361b@ls/false) (if v361b@ls/false (apply (lambda (v361d@e) (cons 'or (cons v361d@e '((if #f #f))))) v361b@ls/false) ((lambda (v361f@t) ((lambda (v3621@ls/false) (if v3621@ls/false (apply (lambda (v3623@e v3624@e*) (list 'if v3623@e (cons 'begin v3624@e*))) v3621@ls/false) ((lambda (v3627@t) ((lambda (v3629@ls/false) (if v3629@ls/false (apply (lambda () (v2fe4@syntax-violation '#f '"invalid last clause" v35f9@stx)) v3629@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3627@t))) (v2efb@syntax-dispatch v3627@t '_))) v361f@t))) (v2efb@syntax-dispatch v361f@t '(any . each-any)))) v3619@t))) (v2efb@syntax-dispatch v3619@t '(any)))) v3611@t))) (v2efb@syntax-dispatch v3611@t '(any #(scheme-id =>) any)))) v3609@t))) (v2efb@syntax-dispatch v3609@t '(#(scheme-id else) any . each-any)))) v3605@cls) ((lambda (v362b@t) ((lambda (v362d@ls/false) (if v362d@ls/false (apply (lambda (v362f@e v3630@e*) (v2fe4@syntax-violation '#f '"incorrect position of keyword else" v35f9@stx)) v362d@ls/false) ((lambda (v3633@t) ((lambda (v3635@ls/false) (if v3635@ls/false (apply (lambda (v3637@e v3638@p) (list 'let (list (list 't v3637@e)) (list 'if 't (cons v3638@p '(t)) (v3603@f (car v3606@cls*) (cdr v3606@cls*))))) v3635@ls/false) ((lambda (v363b@t) ((lambda (v363d@ls/false) (if v363d@ls/false (apply (lambda (v363f@e) (list 'or v363f@e (v3603@f (car v3606@cls*) (cdr v3606@cls*)))) v363d@ls/false) ((lambda (v3641@t) ((lambda (v3643@ls/false) (if v3643@ls/false (apply (lambda (v3645@e v3646@e*) (list 'if v3645@e (cons 'begin v3646@e*) (v3603@f (car v3606@cls*) (cdr v3606@cls*)))) v3643@ls/false) ((lambda (v3649@t) ((lambda (v364b@ls/false) (if v364b@ls/false (apply (lambda () (v2fe4@syntax-violation '#f '"invalid last clause" v35f9@stx)) v364b@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3649@t))) (v2efb@syntax-dispatch v3649@t '_))) v3641@t))) (v2efb@syntax-dispatch v3641@t '(any . each-any)))) v363b@t))) (v2efb@syntax-dispatch v363b@t '(any)))) v3633@t))) (v2efb@syntax-dispatch v3633@t '(any #(scheme-id =>) any)))) v362b@t))) (v2efb@syntax-dispatch v362b@t '(#(scheme-id else) any . each-any)))) v3605@cls))))) v3603@f) v35ff@cls v3600@cls*))) v35fd@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v35fb@t))) (v2efb@syntax-dispatch v35fb@t '(_ any . each-any)))) v35f9@stx))) (set! v2ee1@do-include (lambda (v364d@stx v364e@id v364f@filename) ((lambda (v3653@filename) (begin (if (not (and (string? v3653@filename) (v2cf0@id? v364e@id))) (v2fe4@syntax-violation '#f '"invalid syntax" v364d@stx) (void)) (cons (v2eb1@bless 'begin) (with-input-from-file v3653@filename (lambda () ((letrec ((v3655@f (lambda (v3657@ls) ((lambda (v3659@x) (if (eof-object? v3659@x) (reverse v3657@ls) (v3655@f (cons (v2cce@datum->stx v364e@id v3659@x) v3657@ls)))) (v288d@v27aa@read-annotated))))) v3655@f) '())))))) (v2d06@stx->datum v364f@filename)))) (set! v2ee3@include-macro (lambda (v365b@e) ((lambda (v365d@t) ((lambda (v365f@ls/false) (if v365f@ls/false (apply (lambda (v3661@id v3662@filename) (v2ee1@do-include v365b@e v3661@id v3662@filename)) v365f@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v365d@t))) (v2efb@syntax-dispatch v365d@t '(any any)))) v365b@e))) (set! v2ee5@include-into-macro (lambda (v3665@e) ((lambda (v3667@t) ((lambda (v3669@ls/false) (if v3669@ls/false (apply (lambda (v366b@id v366c@filename) (v2ee1@do-include v3665@e v366b@id v366c@filename)) v3669@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3667@t))) (v2efb@syntax-dispatch v3667@t '(_ any any)))) v3665@e))) (set! v2ee7@syntax-rules-macro (lambda (v366f@e) ((lambda (v3671@t) ((lambda (v3673@ls/false) (if v3673@ls/false (apply (lambda (v3675@lits v3676@pat* v3677@tmp*) (begin (v2f01@verify-literals v3675@lits v366f@e) (v2eb1@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons v3675@lits (map (lambda (v367b@pat v367c@tmp) ((lambda (v367f@t) ((lambda (v3681@ls/false) (if v3681@ls/false (apply (lambda (v3683@rest) (list (cons 'g v3683@rest) (list 'syntax v367c@tmp))) v3681@ls/false) ((lambda (v3685@t) ((lambda (v3687@ls/false) (if v3687@ls/false (apply (lambda () (v2fe4@syntax-violation '#f '"invalid syntax-rules pattern" v366f@e v367b@pat)) v3687@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3685@t))) (v2efb@syntax-dispatch v3685@t '_))) v367f@t))) (v2efb@syntax-dispatch v367f@t '(_ . any)))) v367b@pat)) v3676@pat* v3677@tmp*)))))))) v3673@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3671@t))) (v2efb@syntax-dispatch v3671@t '(_ each-any . #(each (any any)))))) v366f@e))) (set! v2ee9@quasiquote-macro ((lambda () ((lambda (v368a@datum v36a6@quasicons* v36a8@quasicons v36aa@quasiappend v36ac@quasivector v36ae@vquasi v36b0@quasi) (begin (set! v368a@datum (lambda (v378b@x) (list (v2e85@scheme-stx 'quote) (v2cd8@mkstx v378b@x '() '() '())))) (set! v36a6@quasicons* (lambda (v3783@x v3784@y) ((letrec ((v3787@f (lambda (v3789@x) (if (null? v3789@x) v3784@y (v36a8@quasicons (car v3789@x) (v3787@f (cdr v3789@x))))))) v3787@f) v3783@x))) (set! v36a8@quasicons (lambda (v375d@x v375e@y) ((lambda (v3761@t) ((lambda (v3763@ls/false) (if v3763@ls/false (apply (lambda (v3765@dy) ((lambda (v3767@t) ((lambda (v3769@ls/false) (if v3769@ls/false (apply (lambda (v376b@dx) (list (v2e85@scheme-stx 'quote) (cons v376b@dx v3765@dy))) v3769@ls/false) ((lambda (v376d@t) ((lambda (v376f@ls/false) (if v376f@ls/false (apply (lambda () ((lambda (v3771@t) ((lambda (v3773@ls/false) (if v3773@ls/false (apply (lambda () (list (v2e85@scheme-stx 'list) v375d@x)) v3773@ls/false) ((lambda (v3775@t) ((lambda (v3777@ls/false) (if v3777@ls/false (apply (lambda () (list (v2e85@scheme-stx 'cons) v375d@x v375e@y)) v3777@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3775@t))) (v2efb@syntax-dispatch v3775@t '_))) v3771@t))) (v2efb@syntax-dispatch v3771@t '()))) v3765@dy)) v376f@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v376d@t))) (v2efb@syntax-dispatch v376d@t '_))) v3767@t))) (v2efb@syntax-dispatch v3767@t '(#(scheme-id quote) any)))) v375d@x)) v3763@ls/false) ((lambda (v3779@t) ((lambda (v377b@ls/false) (if v377b@ls/false (apply (lambda (v377d@stuff) (cons* (v2e85@scheme-stx 'list) v375d@x v377d@stuff)) v377b@ls/false) ((lambda (v377f@t) ((lambda (v3781@ls/false) (if v3781@ls/false (apply (lambda () (list (v2e85@scheme-stx 'cons) v375d@x v375e@y)) v3781@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v377f@t))) (v2efb@syntax-dispatch v377f@t '_))) v3779@t))) (v2efb@syntax-dispatch v3779@t '(#(scheme-id list) . each-any)))) v3761@t))) (v2efb@syntax-dispatch v3761@t '(#(scheme-id quote) any)))) v375e@y))) (set! v36aa@quasiappend (lambda (v3743@x v3744@y) ((lambda (v3747@ls) (if (null? v3747@ls) (list (v2e85@scheme-stx 'quote) '()) (if (null? (cdr v3747@ls)) (car v3747@ls) (cons* (v2e85@scheme-stx 'append) v3747@ls)))) ((letrec ((v3749@f (lambda (v374b@x) (if (null? v374b@x) ((lambda (v374d@t) ((lambda (v374f@ls/false) (if v374f@ls/false (apply (lambda () '()) v374f@ls/false) ((lambda (v3751@t) ((lambda (v3753@ls/false) (if v3753@ls/false (apply (lambda () (list v3744@y)) v3753@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3751@t))) (v2efb@syntax-dispatch v3751@t '_))) v374d@t))) (v2efb@syntax-dispatch v374d@t '(#(scheme-id quote) ())))) v3744@y) ((lambda (v3755@t) ((lambda (v3757@ls/false) (if v3757@ls/false (apply (lambda () (v3749@f (cdr v374b@x))) v3757@ls/false) ((lambda (v3759@t) ((lambda (v375b@ls/false) (if v375b@ls/false (apply (lambda () (cons (car v374b@x) (v3749@f (cdr v374b@x)))) v375b@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3759@t))) (v2efb@syntax-dispatch v3759@t '_))) v3755@t))) (v2efb@syntax-dispatch v3755@t '(#(scheme-id quote) ())))) (car v374b@x)))))) v3749@f) v3743@x)))) (set! v36ac@quasivector (lambda (v3711@x) ((lambda (v3713@pat-x) ((lambda (v3715@t) ((lambda (v3717@ls/false) (if v3717@ls/false (apply (lambda (v3719@x*) (list (v2e85@scheme-stx 'quote) (list->vector v3719@x*))) v3717@ls/false) ((lambda (v371b@t) ((lambda (v371d@ls/false) (if v371d@ls/false (apply (lambda () ((letrec ((v371f@f (lambda (v3721@x v3722@k) ((lambda (v3725@t) ((lambda (v3727@ls/false) (if v3727@ls/false (apply (lambda (v3729@x*) (v3722@k (map (lambda (v372b@x) (list (v2e85@scheme-stx 'quote) v372b@x)) v3729@x*))) v3727@ls/false) ((lambda (v372d@t) ((lambda (v372f@ls/false) (if v372f@ls/false (apply (lambda (v3731@x*) (v3722@k v3731@x*)) v372f@ls/false) ((lambda (v3733@t) ((lambda (v3735@ls/false) (if v3735@ls/false (apply (lambda (v3737@x v3738@y) (v371f@f v3738@y (lambda (v373b@ls) (v3722@k (cons v3737@x v373b@ls))))) v3735@ls/false) ((lambda (v373d@t) ((lambda (v373f@ls/false) (if v373f@ls/false (apply (lambda () (list (v2e85@scheme-stx 'list->vector) v3713@pat-x)) v373f@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v373d@t))) (v2efb@syntax-dispatch v373d@t '_))) v3733@t))) (v2efb@syntax-dispatch v3733@t '(#(scheme-id cons) any any)))) v372d@t))) (v2efb@syntax-dispatch v372d@t '(#(scheme-id list) . each-any)))) v3725@t))) (v2efb@syntax-dispatch v3725@t '(#(scheme-id quote) each-any)))) v3721@x)))) v371f@f) v3711@x (lambda (v3741@ls) (cons* (v2e85@scheme-stx 'vector) v3741@ls)))) v371d@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v371b@t))) (v2efb@syntax-dispatch v371b@t '_))) v3715@t))) (v2efb@syntax-dispatch v3715@t '(#(scheme-id quote) each-any)))) v3713@pat-x)) v3711@x))) (set! v36ae@vquasi (lambda (v36ef@p v36f0@lev) ((lambda (v36f3@t) ((lambda (v36f5@ls/false) (if v36f5@ls/false (apply (lambda (v36f7@p v36f8@q) ((lambda (v36fb@t) ((lambda (v36fd@ls/false) (if v36fd@ls/false (apply (lambda (v36ff@p) (if (= v36f0@lev '0) (v36a6@quasicons* v36ff@p (v36ae@vquasi v36f8@q v36f0@lev)) (v36a8@quasicons (v36a8@quasicons (v368a@datum 'unquote) (v36b0@quasi v36ff@p (- v36f0@lev '1))) (v36ae@vquasi v36f8@q v36f0@lev)))) v36fd@ls/false) ((lambda (v3701@t) ((lambda (v3703@ls/false) (if v3703@ls/false (apply (lambda (v3705@p) (if (= v36f0@lev '0) (v36aa@quasiappend v3705@p (v36ae@vquasi v36f8@q v36f0@lev)) (v36a8@quasicons (v36a8@quasicons (v368a@datum 'unquote-splicing) (v36b0@quasi v3705@p (- v36f0@lev '1))) (v36ae@vquasi v36f8@q v36f0@lev)))) v3703@ls/false) ((lambda (v3707@t) ((lambda (v3709@ls/false) (if v3709@ls/false (apply (lambda (v370b@p) (v36a8@quasicons (v36b0@quasi v370b@p v36f0@lev) (v36ae@vquasi v36f8@q v36f0@lev))) v3709@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3707@t))) (v2efb@syntax-dispatch v3707@t 'any))) v3701@t))) (v2efb@syntax-dispatch v3701@t '(#(scheme-id unquote-splicing) . each-any)))) v36fb@t))) (v2efb@syntax-dispatch v36fb@t '(#(scheme-id unquote) . each-any)))) v36f7@p)) v36f5@ls/false) ((lambda (v370d@t) ((lambda (v370f@ls/false) (if v370f@ls/false (apply (lambda () (list (v2e85@scheme-stx 'quote) '())) v370f@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v370d@t))) (v2efb@syntax-dispatch v370d@t '()))) v36f3@t))) (v2efb@syntax-dispatch v36f3@t '(any . any)))) v36ef@p))) (set! v36b0@quasi (lambda (v36b9@p v36ba@lev) ((lambda (v36bd@t) ((lambda (v36bf@ls/false) (if v36bf@ls/false (apply (lambda (v36c1@p) (if (= v36ba@lev '0) v36c1@p (v36a8@quasicons (v368a@datum 'unquote) (v36b0@quasi (list v36c1@p) (- v36ba@lev '1))))) v36bf@ls/false) ((lambda (v36c3@t) ((lambda (v36c5@ls/false) (if v36c5@ls/false (apply (lambda (v36c7@p v36c8@q) (if (= v36ba@lev '0) (v36a6@quasicons* v36c7@p (v36b0@quasi v36c8@q v36ba@lev)) (v36a8@quasicons (v36a8@quasicons (v368a@datum 'unquote) (v36b0@quasi v36c7@p (- v36ba@lev '1))) (v36b0@quasi v36c8@q v36ba@lev)))) v36c5@ls/false) ((lambda (v36cb@t) ((lambda (v36cd@ls/false) (if v36cd@ls/false (apply (lambda (v36cf@p v36d0@q) (if (= v36ba@lev '0) (v36aa@quasiappend v36cf@p (v36b0@quasi v36d0@q v36ba@lev)) (v36a8@quasicons (v36a8@quasicons (v368a@datum 'unquote-splicing) (v36b0@quasi v36cf@p (- v36ba@lev '1))) (v36b0@quasi v36d0@q v36ba@lev)))) v36cd@ls/false) ((lambda (v36d3@t) ((lambda (v36d5@ls/false) (if v36d5@ls/false (apply (lambda (v36d7@p) (v36a8@quasicons (v368a@datum 'quasiquote) (v36b0@quasi (list v36d7@p) (+ v36ba@lev '1)))) v36d5@ls/false) ((lambda (v36d9@t) ((lambda (v36db@ls/false) (if v36db@ls/false (apply (lambda (v36dd@p v36de@q) (v36a8@quasicons (v36b0@quasi v36dd@p v36ba@lev) (v36b0@quasi v36de@q v36ba@lev))) v36db@ls/false) ((lambda (v36e1@t) ((lambda (v36e3@ls/false) (if (and v36e3@ls/false (apply (lambda (v36e5@x) (not (v2cb8@stx? v36e5@x))) v36e3@ls/false)) (apply (lambda (v36e7@x) (v36ac@quasivector (v36ae@vquasi v36e7@x v36ba@lev))) v36e3@ls/false) ((lambda (v36e9@t) ((lambda (v36eb@ls/false) (if v36eb@ls/false (apply (lambda (v36ed@p) (list (v2e85@scheme-stx 'quote) v36ed@p)) v36eb@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v36e9@t))) (v2efb@syntax-dispatch v36e9@t 'any))) v36e1@t))) (v2efb@syntax-dispatch v36e1@t '#(vector each-any)))) v36d9@t))) (v2efb@syntax-dispatch v36d9@t '(any . any)))) v36d3@t))) (v2efb@syntax-dispatch v36d3@t '(#(scheme-id quasiquote) any)))) v36cb@t))) (v2efb@syntax-dispatch v36cb@t '((#(scheme-id unquote-splicing) . each-any) . any)))) v36c3@t))) (v2efb@syntax-dispatch v36c3@t '((#(scheme-id unquote) . each-any) . any)))) v36bd@t))) (v2efb@syntax-dispatch v36bd@t '(#(scheme-id unquote) any)))) v36b9@p))) (lambda (v36b1@x) ((lambda (v36b3@t) ((lambda (v36b5@ls/false) (if v36b5@ls/false (apply (lambda (v36b7@e) (v36b0@quasi v36b7@e '0)) v36b5@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v36b3@t))) (v2efb@syntax-dispatch v36b3@t '(_ any)))) v36b1@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! v2eeb@quasisyntax-macro ((lambda () ((lambda (v378e@quasi) (begin (set! v378e@quasi (lambda (v37a9@p v37aa@lev) ((lambda (v37ad@t) ((lambda (v37af@ls/false) (if v37af@ls/false (apply (lambda (v37b1@p) (if (= v37aa@lev '0) ((lambda (v37b3@g) (values (list v37b3@g) (list v37b1@p) v37b3@g)) (gensym)) (call-with-values (lambda () (v378e@quasi v37b1@p (- v37aa@lev '1))) (lambda (v37bb@v37b6 v37bc@v37b8 v37bd@v37ba) ((lambda (v37c1@p v37c2@rhs* v37c3@lhs*) (values v37c3@lhs* v37c2@rhs* (list 'unsyntax v37c1@p))) v37bd@v37ba v37bc@v37b8 v37bb@v37b6))))) v37af@ls/false) ((lambda (v37c7@t) ((lambda (v37c9@ls/false) (if (and v37c9@ls/false (apply (lambda () (= v37aa@lev '0)) v37c9@ls/false)) (apply (lambda () (v2fe4@syntax-violation '#f '"incorrect use of unsyntax" v37a9@p)) v37c9@ls/false) ((lambda (v37cb@t) ((lambda (v37cd@ls/false) (if v37cd@ls/false (apply (lambda (v37cf@p* v37d0@q) (call-with-values (lambda () (v378e@quasi v37d0@q v37aa@lev)) (lambda (v37d9@v37d4 v37da@v37d6 v37db@v37d8) ((lambda (v37df@q v37e0@rhs* v37e1@lhs*) (if (= v37aa@lev '0) ((lambda (v37e5@g*) (values (append v37e5@g* v37e1@lhs*) (append v37cf@p* v37e0@rhs*) (append v37e5@g* v37df@q))) (map (lambda (v37e7@x) (gensym)) v37cf@p*)) (call-with-values (lambda () (v378e@quasi v37cf@p* (- v37aa@lev '1))) (lambda (v37ef@v37ea v37f0@v37ec v37f1@v37ee) ((lambda (v37f5@p* v37f6@rhs2* v37f7@lhs2*) (values (append v37f7@lhs2* v37e1@lhs*) (append v37f6@rhs2* v37e0@rhs*) (cons (cons 'unsyntax v37f5@p*) v37df@q))) v37f1@v37ee v37f0@v37ec v37ef@v37ea))))) v37db@v37d8 v37da@v37d6 v37d9@v37d4)))) v37cd@ls/false) ((lambda (v37fb@t) ((lambda (v37fd@ls/false) (if v37fd@ls/false (apply (lambda (v37ff@p* v3800@q) (call-with-values (lambda () (v378e@quasi v3800@q v37aa@lev)) (lambda (v3809@v3804 v380a@v3806 v380b@v3808) ((lambda (v380f@q v3810@rhs* v3811@lhs*) (if (= v37aa@lev '0) ((lambda (v3815@g*) (values (append (map (lambda (v3817@g) (cons v3817@g '(...))) v3815@g*) v3811@lhs*) (append v37ff@p* v3810@rhs*) (append (apply append (map (lambda (v3819@g) (cons v3819@g '(...))) v3815@g*)) v380f@q))) (map (lambda (v381b@x) (gensym)) v37ff@p*)) (call-with-values (lambda () (v378e@quasi v37ff@p* (- v37aa@lev '1))) (lambda (v3823@v381e v3824@v3820 v3825@v3822) ((lambda (v3829@p* v382a@rhs2* v382b@lhs2*) (values (append v382b@lhs2* v3811@lhs*) (append v382a@rhs2* v3810@rhs*) (cons (cons 'unsyntax-splicing v3829@p*) v380f@q))) v3825@v3822 v3824@v3820 v3823@v381e))))) v380b@v3808 v380a@v3806 v3809@v3804)))) v37fd@ls/false) ((lambda (v382f@t) ((lambda (v3831@ls/false) (if (and v3831@ls/false (apply (lambda () (= v37aa@lev '0)) v3831@ls/false)) (apply (lambda () (v2fe4@syntax-violation '#f '"incorrect use of unsyntax-splicing" v37a9@p)) v3831@ls/false) ((lambda (v3833@t) ((lambda (v3835@ls/false) (if v3835@ls/false (apply (lambda (v3837@p) (call-with-values (lambda () (v378e@quasi v3837@p (+ v37aa@lev '1))) (lambda (v383f@v383a v3840@v383c v3841@v383e) ((lambda (v3845@p v3846@rhs* v3847@lhs*) (values v3847@lhs* v3846@rhs* (list 'quasisyntax v3845@p))) v3841@v383e v3840@v383c v383f@v383a)))) v3835@ls/false) ((lambda (v384b@t) ((lambda (v384d@ls/false) (if v384d@ls/false (apply (lambda (v384f@p v3850@q) (call-with-values (lambda () (v378e@quasi v384f@p v37aa@lev)) (lambda (v385f@v3854 v3860@v3856 v3861@v3858) (call-with-values (lambda () (v378e@quasi v3850@q v37aa@lev)) (lambda (v3865@v385a v3866@v385c v3867@v385e) ((lambda (v386b@q v386c@rhs2* v386d@lhs2* v386e@p v386f@rhs* v3870@lhs*) (values (append v386d@lhs2* v3870@lhs*) (append v386c@rhs2* v386f@rhs*) (cons v386e@p v386b@q))) v3867@v385e v3866@v385c v3865@v385a v3861@v3858 v3860@v3856 v385f@v3854)))))) v384d@ls/false) ((lambda (v3877@t) ((lambda (v3879@ls/false) (if v3879@ls/false (apply (lambda (v387b@x*) (call-with-values (lambda () (v378e@quasi v387b@x* v37aa@lev)) (lambda (v3883@v387e v3884@v3880 v3885@v3882) ((lambda (v3889@x* v388a@rhs* v388b@lhs*) (values v388b@lhs* v388a@rhs* (list->vector v3889@x*))) v3885@v3882 v3884@v3880 v3883@v387e)))) v3879@ls/false) ((lambda (v388f@t) ((lambda (v3891@ls/false) (if v3891@ls/false (apply (lambda () (values '() '() v37a9@p)) v3891@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v388f@t))) (v2efb@syntax-dispatch v388f@t '_))) v3877@t))) (v2efb@syntax-dispatch v3877@t '#(vector each-any)))) v384b@t))) (v2efb@syntax-dispatch v384b@t '(any . any)))) v3833@t))) (v2efb@syntax-dispatch v3833@t '(#(scheme-id quasisyntax) any)))) v382f@t))) (v2efb@syntax-dispatch v382f@t '#(scheme-id unsyntax-splicing)))) v37fb@t))) (v2efb@syntax-dispatch v37fb@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) v37cb@t))) (v2efb@syntax-dispatch v37cb@t '((#(scheme-id unsyntax) . each-any) . any)))) v37c7@t))) (v2efb@syntax-dispatch v37c7@t '#(scheme-id unsyntax)))) v37ad@t))) (v2efb@syntax-dispatch v37ad@t '(#(scheme-id unsyntax) any)))) v37a9@p))) (lambda (v378f@x) ((lambda (v3791@t) ((lambda (v3793@ls/false) (if v3793@ls/false (apply (lambda (v3795@e) (call-with-values (lambda () (v378e@quasi v3795@e '0)) (lambda (v379d@v3798 v379e@v379a v379f@v379c) ((lambda (v37a3@v v37a4@rhs* v37a5@lhs*) (v2eb1@bless (list 'syntax-case (cons 'list v37a4@rhs*) '() (list v37a5@lhs* (list 'syntax v37a3@v))))) v379f@v379c v379e@v379a v379d@v3798)))) v3793@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3791@t))) (v2efb@syntax-dispatch v3791@t '(_ any)))) v378f@x)))) '#f)))) (set! v2eed@define-struct-macro (lambda (v3893@stx) (v2fe4@syntax-violation '#f '"define-struct not supported" v3893@stx))) (set! v2eef@define-record-type-macro (lambda (v3895@x) ((lambda (v3898@id v389a@get-record-name v389c@get-record-constructor-name v389e@get-record-predicate-name v38a0@get-clause v38a2@foo-rtd-code v38a4@parent-rtd-code v38a6@parent-rcd-code v38a8@foo-rcd-code v38aa@get-protocol-code v38ac@get-fields v38ae@get-mutator-indices v38b0@get-mutators v38b2@get-accessors v38b4@enumerate v38b6@do-define-record v38b8@verify-clauses) (begin (set! v3898@id (lambda (v3a8b@ctxt . v3a8d@str*) (v2fe8@datum->syntax v3a8b@ctxt (string->symbol (apply string-append (map (lambda (v3a8f@x) (if (symbol? v3a8f@x) (symbol->string v3a8f@x) (if (string? v3a8f@x) v3a8f@x (assertion-violation 'define-record-type '"BUG")))) v3a8d@str*)))))) (set! v389a@get-record-name (lambda (v3a79@spec) ((lambda (v3a7b@t) ((lambda (v3a7d@ls/false) (if v3a7d@ls/false (apply (lambda (v3a7f@foo v3a80@make-foo v3a81@foo?) v3a7f@foo) v3a7d@ls/false) ((lambda (v3a85@t) ((lambda (v3a87@ls/false) (if v3a87@ls/false (apply (lambda (v3a89@foo) v3a89@foo) v3a87@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3a85@t))) (v2efb@syntax-dispatch v3a85@t 'any))) v3a7b@t))) (v2efb@syntax-dispatch v3a7b@t '(any any any)))) v3a79@spec))) (set! v389c@get-record-constructor-name (lambda (v3a65@spec) ((lambda (v3a67@t) ((lambda (v3a69@ls/false) (if v3a69@ls/false (apply (lambda (v3a6b@foo v3a6c@make-foo v3a6d@foo?) v3a6c@make-foo) v3a69@ls/false) ((lambda (v3a71@t) ((lambda (v3a73@ls/false) (if (and v3a73@ls/false (apply (lambda (v3a75@foo) (v2cf0@id? v3a75@foo)) v3a73@ls/false)) (apply (lambda (v3a77@foo) (v3898@id v3a77@foo '"make-" (v2d06@stx->datum v3a77@foo))) v3a73@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3a71@t))) (v2efb@syntax-dispatch v3a71@t 'any))) v3a67@t))) (v2efb@syntax-dispatch v3a67@t '(any any any)))) v3a65@spec))) (set! v389e@get-record-predicate-name (lambda (v3a51@spec) ((lambda (v3a53@t) ((lambda (v3a55@ls/false) (if v3a55@ls/false (apply (lambda (v3a57@foo v3a58@make-foo v3a59@foo?) v3a59@foo?) v3a55@ls/false) ((lambda (v3a5d@t) ((lambda (v3a5f@ls/false) (if (and v3a5f@ls/false (apply (lambda (v3a61@foo) (v2cf0@id? v3a61@foo)) v3a5f@ls/false)) (apply (lambda (v3a63@foo) (v3898@id v3a63@foo (v2d06@stx->datum v3a63@foo) '"?")) v3a5f@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3a5d@t))) (v2efb@syntax-dispatch v3a5d@t 'any))) v3a53@t))) (v2efb@syntax-dispatch v3a53@t '(any any any)))) v3a51@spec))) (set! v38a0@get-clause (lambda (v3a3f@id v3a40@ls) ((lambda (v3a43@t) ((lambda (v3a45@ls/false) (if v3a45@ls/false (apply (lambda () '#f) v3a45@ls/false) ((lambda (v3a47@t) ((lambda (v3a49@ls/false) (if v3a49@ls/false (apply (lambda (v3a4b@x v3a4c@rest v3a4d@ls) (if (v2cf8@free-id=? (v2eb1@bless v3a3f@id) v3a4b@x) (cons v3a4b@x v3a4c@rest) (v38a0@get-clause v3a3f@id v3a4d@ls))) v3a49@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3a47@t))) (v2efb@syntax-dispatch v3a47@t '((any . any) . any)))) v3a43@t))) (v2efb@syntax-dispatch v3a43@t '()))) v3a40@ls))) (set! v38a2@foo-rtd-code (lambda (v39ed@name v39ee@clause* v39ef@parent-rtd-code) ((lambda (v39f4@convert-field-spec*) (begin (set! v39f4@convert-field-spec* (lambda (v3a25@ls) (list->vector (map (lambda (v3a27@x) ((lambda (v3a29@t) ((lambda (v3a2b@ls/false) (if v3a2b@ls/false (apply (lambda (v3a2d@name v3a2e@rest) (list 'mutable v3a2d@name)) v3a2b@ls/false) ((lambda (v3a31@t) ((lambda (v3a33@ls/false) (if v3a33@ls/false (apply (lambda (v3a35@name v3a36@rest) (list 'immutable v3a35@name)) v3a33@ls/false) ((lambda (v3a39@t) ((lambda (v3a3b@ls/false) (if v3a3b@ls/false (apply (lambda (v3a3d@name) (list 'immutable v3a3d@name)) v3a3b@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3a39@t))) (v2efb@syntax-dispatch v3a39@t 'any))) v3a31@t))) (v2efb@syntax-dispatch v3a31@t '(#(scheme-id immutable) any . any)))) v3a29@t))) (v2efb@syntax-dispatch v3a29@t '(#(scheme-id mutable) any . any)))) v3a27@x)) v3a25@ls)))) ((lambda (v39f5@uid-code v39f6@sealed? v39f7@opaque? v39f8@fields) (v2eb1@bless (list 'make-record-type-descriptor (list 'quote v39ed@name) v39ef@parent-rtd-code v39f5@uid-code v39f6@sealed? v39f7@opaque? v39f8@fields))) ((lambda (v39fd@t) ((lambda (v39ff@ls/false) (if v39ff@ls/false (apply (lambda () (list 'quote (gensym))) v39ff@ls/false) ((lambda (v3a01@t) ((lambda (v3a03@ls/false) (if v3a03@ls/false (apply (lambda (v3a05@uid) (list 'quote v3a05@uid)) v3a03@ls/false) ((lambda (v3a07@t) ((lambda (v3a09@ls/false) (if v3a09@ls/false (apply (lambda () '#f) v3a09@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3a07@t))) (v2efb@syntax-dispatch v3a07@t '_))) v3a01@t))) (v2efb@syntax-dispatch v3a01@t '(_ any)))) v39fd@t))) (v2efb@syntax-dispatch v39fd@t '(_)))) (v38a0@get-clause 'nongenerative v39ee@clause*)) ((lambda (v3a0b@t) ((lambda (v3a0d@ls/false) (if v3a0d@ls/false (apply (lambda () '#t) v3a0d@ls/false) ((lambda (v3a0f@t) ((lambda (v3a11@ls/false) (if v3a11@ls/false (apply (lambda () '#f) v3a11@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3a0f@t))) (v2efb@syntax-dispatch v3a0f@t '_))) v3a0b@t))) (v2efb@syntax-dispatch v3a0b@t '(_ #(atom #t))))) (v38a0@get-clause 'sealed v39ee@clause*)) ((lambda (v3a13@t) ((lambda (v3a15@ls/false) (if v3a15@ls/false (apply (lambda () '#t) v3a15@ls/false) ((lambda (v3a17@t) ((lambda (v3a19@ls/false) (if v3a19@ls/false (apply (lambda () '#f) v3a19@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3a17@t))) (v2efb@syntax-dispatch v3a17@t '_))) v3a13@t))) (v2efb@syntax-dispatch v3a13@t '(_ #(atom #t))))) (v38a0@get-clause 'opaque v39ee@clause*)) ((lambda (v3a1b@t) ((lambda (v3a1d@ls/false) (if v3a1d@ls/false (apply (lambda (v3a1f@field-spec*) (list 'quote (v39f4@convert-field-spec* v3a1f@field-spec*))) v3a1d@ls/false) ((lambda (v3a21@t) ((lambda (v3a23@ls/false) (if v3a23@ls/false (apply (lambda () ''#()) v3a23@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3a21@t))) (v2efb@syntax-dispatch v3a21@t '_))) v3a1b@t))) (v2efb@syntax-dispatch v3a1b@t '(_ . each-any)))) (v38a0@get-clause 'fields v39ee@clause*))))) '#f))) (set! v38a4@parent-rtd-code (lambda (v39d5@clause*) ((lambda (v39d7@t) ((lambda (v39d9@ls/false) (if v39d9@ls/false (apply (lambda (v39db@name) (list 'record-type-descriptor v39db@name)) v39d9@ls/false) ((lambda (v39dd@t) ((lambda (v39df@ls/false) (if v39df@ls/false (apply (lambda () ((lambda (v39e1@t) ((lambda (v39e3@ls/false) (if v39e3@ls/false (apply (lambda (v39e5@rtd v39e6@rcd) v39e5@rtd) v39e3@ls/false) ((lambda (v39e9@t) ((lambda (v39eb@ls/false) (if v39eb@ls/false (apply (lambda () '#f) v39eb@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v39e9@t))) (v2efb@syntax-dispatch v39e9@t '#(atom #f)))) v39e1@t))) (v2efb@syntax-dispatch v39e1@t '(_ any any)))) (v38a0@get-clause 'parent-rtd v39d5@clause*))) v39df@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v39dd@t))) (v2efb@syntax-dispatch v39dd@t '#(atom #f)))) v39d7@t))) (v2efb@syntax-dispatch v39d7@t '(_ any)))) (v38a0@get-clause 'parent v39d5@clause*)))) (set! v38a6@parent-rcd-code (lambda (v39bd@clause*) ((lambda (v39bf@t) ((lambda (v39c1@ls/false) (if v39c1@ls/false (apply (lambda (v39c3@name) (list 'record-constructor-descriptor v39c3@name)) v39c1@ls/false) ((lambda (v39c5@t) ((lambda (v39c7@ls/false) (if v39c7@ls/false (apply (lambda () ((lambda (v39c9@t) ((lambda (v39cb@ls/false) (if v39cb@ls/false (apply (lambda (v39cd@rtd v39ce@rcd) v39ce@rcd) v39cb@ls/false) ((lambda (v39d1@t) ((lambda (v39d3@ls/false) (if v39d3@ls/false (apply (lambda () '#f) v39d3@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v39d1@t))) (v2efb@syntax-dispatch v39d1@t '#(atom #f)))) v39c9@t))) (v2efb@syntax-dispatch v39c9@t '(_ any any)))) (v38a0@get-clause 'parent-rtd v39bd@clause*))) v39c7@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v39c5@t))) (v2efb@syntax-dispatch v39c5@t '#(atom #f)))) v39bf@t))) (v2efb@syntax-dispatch v39bf@t '(_ any)))) (v38a0@get-clause 'parent v39bd@clause*)))) (set! v38a8@foo-rcd-code (lambda (v39b5@clause* v39b6@foo-rtd v39b7@protocol v39b8@parent-rcd-code) (list 'make-record-constructor-descriptor v39b6@foo-rtd v39b8@parent-rcd-code v39b7@protocol))) (set! v38aa@get-protocol-code (lambda (v39a9@clause*) ((lambda (v39ab@t) ((lambda (v39ad@ls/false) (if v39ad@ls/false (apply (lambda (v39af@expr) v39af@expr) v39ad@ls/false) ((lambda (v39b1@t) ((lambda (v39b3@ls/false) (if v39b3@ls/false (apply (lambda () '#f) v39b3@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v39b1@t))) (v2efb@syntax-dispatch v39b1@t '_))) v39ab@t))) (v2efb@syntax-dispatch v39ab@t '(_ any)))) (v38a0@get-clause 'protocol v39a9@clause*)))) (set! v38ac@get-fields (lambda (v3997@clause*) ((lambda (v3999@t) ((lambda (v399b@ls/false) (if v399b@ls/false (apply (lambda () '()) v399b@ls/false) ((lambda (v399d@t) ((lambda (v399f@ls/false) (if v399f@ls/false (apply (lambda (v39a1@f*) v39a1@f*) v399f@ls/false) ((lambda (v39a3@t) ((lambda (v39a5@ls/false) (if v39a5@ls/false (apply (lambda (v39a7@rest) (v38ac@get-fields v39a7@rest)) v39a5@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v39a3@t))) (v2efb@syntax-dispatch v39a3@t '(_ . any)))) v399d@t))) (v2efb@syntax-dispatch v399d@t '((#(scheme-id fields) . each-any) . _)))) v3999@t))) (v2efb@syntax-dispatch v3999@t '()))) v3997@clause*))) (set! v38ae@get-mutator-indices (lambda (v397f@fields) ((letrec ((v3981@f (lambda (v3983@fields v3984@i) ((lambda (v3987@t) ((lambda (v3989@ls/false) (if v3989@ls/false (apply (lambda () '()) v3989@ls/false) ((lambda (v398b@t) ((lambda (v398d@ls/false) (if v398d@ls/false (apply (lambda (v398f@rest) (cons v3984@i (v3981@f v398f@rest (+ v3984@i '1)))) v398d@ls/false) ((lambda (v3991@t) ((lambda (v3993@ls/false) (if v3993@ls/false (apply (lambda (v3995@rest) (v3981@f v3995@rest (+ v3984@i '1))) v3993@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3991@t))) (v2efb@syntax-dispatch v3991@t '(_ . any)))) v398b@t))) (v2efb@syntax-dispatch v398b@t '((#(scheme-id mutable) . _) . any)))) v3987@t))) (v2efb@syntax-dispatch v3987@t '()))) v3983@fields)))) v3981@f) v397f@fields '0))) (set! v38b0@get-mutators (lambda (v3955@foo v3956@fields) ((lambda (v395a@gen-name) (begin (set! v395a@gen-name (lambda (v397d@x) (v2fe8@datum->syntax v3955@foo (string->symbol (string-append (symbol->string (v2fea@syntax->datum v3955@foo)) '"-" (symbol->string (v2fea@syntax->datum v397d@x)) '"-set!"))))) ((letrec ((v395b@f (lambda (v395d@fields) ((lambda (v395f@t) ((lambda (v3961@ls/false) (if v3961@ls/false (apply (lambda () '()) v3961@ls/false) ((lambda (v3963@t) ((lambda (v3965@ls/false) (if v3965@ls/false (apply (lambda (v3967@name v3968@accessor v3969@mutator v396a@rest) (cons v3969@mutator (v395b@f v396a@rest))) v3965@ls/false) ((lambda (v396f@t) ((lambda (v3971@ls/false) (if v3971@ls/false (apply (lambda (v3973@name v3974@rest) (cons (v395a@gen-name v3973@name) (v395b@f v3974@rest))) v3971@ls/false) ((lambda (v3977@t) ((lambda (v3979@ls/false) (if v3979@ls/false (apply (lambda (v397b@rest) (v395b@f v397b@rest)) v3979@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3977@t))) (v2efb@syntax-dispatch v3977@t '(_ . any)))) v396f@t))) (v2efb@syntax-dispatch v396f@t '((#(scheme-id mutable) any) . any)))) v3963@t))) (v2efb@syntax-dispatch v3963@t '((#(scheme-id mutable) any any any) . any)))) v395f@t))) (v2efb@syntax-dispatch v395f@t '()))) v395d@fields)))) v395b@f) v3956@fields))) '#f))) (set! v38b2@get-accessors (lambda (v3911@foo v3912@fields) ((lambda (v3916@gen-name) (begin (set! v3916@gen-name (lambda (v3953@x) (v2fe8@datum->syntax v3911@foo (string->symbol (string-append (symbol->string (v2fea@syntax->datum v3911@foo)) '"-" (symbol->string (v2fea@syntax->datum v3953@x))))))) (map (lambda (v3917@field) ((lambda (v3919@t) ((lambda (v391b@ls/false) (if (and v391b@ls/false (apply (lambda (v391d@name v391e@accessor v391f@mutator) (v2cf0@id? v391e@accessor)) v391b@ls/false)) (apply (lambda (v3923@name v3924@accessor v3925@mutator) v3924@accessor) v391b@ls/false) ((lambda (v3929@t) ((lambda (v392b@ls/false) (if (and v392b@ls/false (apply (lambda (v392d@name v392e@accessor) (v2cf0@id? v392e@accessor)) v392b@ls/false)) (apply (lambda (v3931@name v3932@accessor) v3932@accessor) v392b@ls/false) ((lambda (v3935@t) ((lambda (v3937@ls/false) (if (and v3937@ls/false (apply (lambda (v3939@name) (v2cf0@id? v3939@name)) v3937@ls/false)) (apply (lambda (v393b@name) (v3916@gen-name v393b@name)) v3937@ls/false) ((lambda (v393d@t) ((lambda (v393f@ls/false) (if (and v393f@ls/false (apply (lambda (v3941@name) (v2cf0@id? v3941@name)) v393f@ls/false)) (apply (lambda (v3943@name) (v3916@gen-name v3943@name)) v393f@ls/false) ((lambda (v3945@t) ((lambda (v3947@ls/false) (if (and v3947@ls/false (apply (lambda (v3949@name) (v2cf0@id? v3949@name)) v3947@ls/false)) (apply (lambda (v394b@name) (v3916@gen-name v394b@name)) v3947@ls/false) ((lambda (v394d@t) ((lambda (v394f@ls/false) (if v394f@ls/false (apply (lambda (v3951@others) (v2fe4@syntax-violation '#f '"invalid field spec" v3917@field)) v394f@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v394d@t))) (v2efb@syntax-dispatch v394d@t 'any))) v3945@t))) (v2efb@syntax-dispatch v3945@t 'any))) v393d@t))) (v2efb@syntax-dispatch v393d@t '(#(scheme-id immutable) any)))) v3935@t))) (v2efb@syntax-dispatch v3935@t '(#(scheme-id mutable) any)))) v3929@t))) (v2efb@syntax-dispatch v3929@t '(#(scheme-id immutable) any any)))) v3919@t))) (v2efb@syntax-dispatch v3919@t '(#(scheme-id mutable) any any any)))) v3917@field)) v3912@fields))) '#f))) (set! v38b4@enumerate (lambda (v3909@ls) ((letrec ((v390b@f (lambda (v390d@ls v390e@i) (if (null? v390d@ls) '() (cons v390e@i (v390b@f (cdr v390d@ls) (+ v390e@i '1))))))) v390b@f) v3909@ls '0))) (set! v38b6@do-define-record (lambda (v38e1@namespec v38e2@clause*) ((lambda (v38e5@foo) ((lambda (v38e7@foo-rtd) ((lambda (v38e9@foo-rcd) ((lambda (v38eb@protocol) ((lambda (v38ed@make-foo) ((lambda (v38ef@fields) ((lambda (v38f1@idx*) ((lambda (v38f3@foo-x*) ((lambda (v38f5@set-foo-x!*) ((lambda (v38f7@set-foo-idx*) ((lambda (v38f9@foo?) ((lambda (v38fb@foo-rtd-code) ((lambda (v38fd@foo-rcd-code) ((lambda (v38ff@protocol-code) ((lambda () (v2eb1@bless (cons 'begin (cons (list 'define v38e7@foo-rtd v38fb@foo-rtd-code) (cons (list 'define v38eb@protocol v38ff@protocol-code) (cons (list 'define v38e9@foo-rcd v38fd@foo-rcd-code) (cons (list 'define-syntax v38e5@foo (list 'list ''$rtd (list 'syntax v38e7@foo-rtd) (list 'syntax v38e9@foo-rcd))) (cons (list 'define v38f9@foo? (list 'record-predicate v38e7@foo-rtd)) (cons (list 'define v38ed@make-foo (list 'record-constructor v38e9@foo-rcd)) (append (map (lambda (v3901@foo-x v3902@idx) (list 'define v3901@foo-x (list 'record-accessor v38e7@foo-rtd v3902@idx))) v38f3@foo-x* v38f1@idx*) (map (lambda (v3905@set-foo-x! v3906@idx) (list 'define v3905@set-foo-x! (list 'record-mutator v38e7@foo-rtd v3906@idx))) v38f5@set-foo-x!* v38f7@set-foo-idx*))))))))))))) (v38aa@get-protocol-code v38e2@clause*))) (v38a8@foo-rcd-code v38e2@clause* v38e7@foo-rtd v38eb@protocol (v38a6@parent-rcd-code v38e2@clause*)))) (v38a2@foo-rtd-code v38e5@foo v38e2@clause* (v38a4@parent-rtd-code v38e2@clause*)))) (v389e@get-record-predicate-name v38e1@namespec))) (v38ae@get-mutator-indices v38ef@fields))) (v38b0@get-mutators v38e5@foo v38ef@fields))) (v38b2@get-accessors v38e5@foo v38ef@fields))) (v38b4@enumerate v38ef@fields))) (v38ac@get-fields v38e2@clause*))) (v389c@get-record-constructor-name v38e1@namespec))) (gensym))) (gensym))) (gensym))) (v389a@get-record-name v38e1@namespec)))) (set! v38b8@verify-clauses (lambda (v38c1@x v38c2@cls*) ((lambda (v38c6@valid-kwds v38c8@free-id-member?) (begin (set! v38c6@valid-kwds (map v2eb1@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! v38c8@free-id-member? (lambda (v38dd@x v38de@ls) (and (pair? v38de@ls) (or (v2cf8@free-id=? v38dd@x (car v38de@ls)) (v38c8@free-id-member? v38dd@x (cdr v38de@ls)))))) ((letrec ((v38c9@f (lambda (v38cb@cls* v38cc@seen*) (if (not (null? v38cb@cls*)) ((lambda (v38cf@t) ((lambda (v38d1@ls/false) (if v38d1@ls/false (apply (lambda (v38d3@kwd v38d4@rest) (if (or (not (v2cf0@id? v38d3@kwd)) (not (v38c8@free-id-member? v38d3@kwd v38c6@valid-kwds))) (v2fe4@syntax-violation '#f '"not a valid define-record-type keyword" v38d3@kwd) (if (v2cfe@bound-id-member? v38d3@kwd v38cc@seen*) (v2fe4@syntax-violation '#f '"duplicate use of keyword " v38c1@x v38d3@kwd) (v38c9@f (cdr v38cb@cls*) (cons v38d3@kwd v38cc@seen*))))) v38d1@ls/false) ((lambda (v38d7@t) ((lambda (v38d9@ls/false) (if v38d9@ls/false (apply (lambda (v38db@cls) (v2fe4@syntax-violation '#f '"malformed define-record-type clause" v38db@cls)) v38d9@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v38d7@t))) (v2efb@syntax-dispatch v38d7@t 'any))) v38cf@t))) (v2efb@syntax-dispatch v38cf@t '(any . any)))) (car v38cb@cls*)) (void))))) v38c9@f) v38c2@cls* '()))) '#f '#f))) ((lambda (v38b9@t) ((lambda (v38bb@ls/false) (if v38bb@ls/false (apply (lambda (v38bd@namespec v38be@clause*) (begin (v38b8@verify-clauses v3895@x v38be@clause*) (v38b6@do-define-record v38bd@namespec v38be@clause*))) v38bb@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v38b9@t))) (v2efb@syntax-dispatch v38b9@t '(_ any . each-any)))) v3895@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! v2ef1@define-condition-type-macro (lambda (v3a91@x) ((lambda (v3a94@mkname) (begin (set! v3a94@mkname (lambda (v3ac1@name v3ac2@suffix) (v2fe8@datum->syntax v3ac1@name (string->symbol (string-append (symbol->string (v2fea@syntax->datum v3ac1@name)) v3ac2@suffix))))) ((lambda (v3a95@t) ((lambda (v3a97@ls/false) (if (and v3a97@ls/false (apply (lambda (v3a99@ctxt v3a9a@name v3a9b@super v3a9c@constructor v3a9d@predicate v3a9e@field* v3a9f@accessor*) (and (v2cf0@id? v3a9a@name) (v2cf0@id? v3a9b@super) (v2cf0@id? v3a9c@constructor) (v2cf0@id? v3a9d@predicate) (for-all v2cf0@id? v3a9e@field*) (for-all v2cf0@id? v3a9f@accessor*))) v3a97@ls/false)) (apply (lambda (v3aa7@ctxt v3aa8@name v3aa9@super v3aaa@constructor v3aab@predicate v3aac@field* v3aad@accessor*) ((lambda (v3ab5@aux-accessor*) (v2eb1@bless (cons 'begin (cons (cons 'define-record-type (cons (list v3aa8@name v3aaa@constructor (gensym)) (cons (list 'parent v3aa9@super) (cons (cons 'fields (map (lambda (v3ab7@field v3ab8@aux) (list 'immutable v3ab7@field v3ab8@aux)) v3aac@field* v3ab5@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define v3aab@predicate (list 'condition-predicate (list 'record-type-descriptor v3aa8@name))) (map (lambda (v3abb@accessor v3abc@aux) (list 'define v3abb@accessor (list 'condition-accessor (list 'record-type-descriptor v3aa8@name) v3abc@aux))) v3aad@accessor* v3ab5@aux-accessor*)))))) (map (lambda (v3abf@x) (gensym)) v3aad@accessor*))) v3a97@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3a95@t))) (v2efb@syntax-dispatch v3a95@t '(any any any any any . #(each (any any)))))) v3a91@x))) '#f))) (set! v2ef3@incorrect-usage-macro (lambda (v3ac5@e) (v2fe4@syntax-violation '#f '"incorrect usage of auxiliary keyword" v3ac5@e))) (set! v2ef5@parameterize-macro (lambda (v3ac7@e) ((lambda (v3ac9@t) ((lambda (v3acb@ls/false) (if v3acb@ls/false (apply (lambda (v3acd@b v3ace@b*) (v2eb1@bless (cons 'let (cons '() (cons v3acd@b v3ace@b*))))) v3acb@ls/false) ((lambda (v3ad1@t) ((lambda (v3ad3@ls/false) (if v3ad3@ls/false (apply (lambda (v3ad5@olhs* v3ad6@orhs* v3ad7@b v3ad8@b*) ((lambda (v3add@lhs* v3ade@rhs*) (v2eb1@bless (cons (list 'lambda (append v3add@lhs* v3ade@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (v3ae1@lhs v3ae2@rhs) (list 'let (list (list 't (list v3ae1@lhs))) (list v3ae1@lhs v3ae2@rhs) (cons 'set! (cons v3ae2@rhs '(t))))) v3add@lhs* v3ade@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons v3ad7@b v3ad8@b*))) '(swap)))))) (append v3ad5@olhs* v3ad6@orhs*)))) (v2fd2@generate-temporaries v3ad5@olhs*) (v2fd2@generate-temporaries v3ad6@orhs*))) v3ad3@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3ad1@t))) (v2efb@syntax-dispatch v3ad1@t '(_ #(each (any any)) any . each-any)))) v3ac9@t))) (v2efb@syntax-dispatch v3ac9@t '(_ () any . each-any)))) v3ac7@e))) (set! v2ef7@foreign-call-transformer (lambda (v3ae5@e v3ae6@r v3ae7@mr) ((lambda (v3aeb@t) ((lambda (v3aed@ls/false) (if v3aed@ls/false (apply (lambda (v3aef@name v3af0@arg*) (cons 'foreign-call (cons (v2f1d@chi-expr v3aef@name v3ae6@r v3ae7@mr) (v2f19@chi-expr* v3af0@arg* v3ae6@r v3ae7@mr)))) v3aed@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3aeb@t))) (v2efb@syntax-dispatch v3aeb@t '(_ any . each-any)))) v3ae5@e))) (set! v2ef9@convert-pattern (lambda (v3af3@pattern v3af4@keys) ((lambda (v3af8@cvt* v3afa@cvt) (begin (set! v3af8@cvt* (lambda (v3b97@p* v3b98@n v3b99@ids) (if (null? v3b97@p*) (values '() v3b99@ids) (call-with-values (lambda () (v3af8@cvt* (cdr v3b97@p*) v3b98@n v3b99@ids)) (lambda (v3ba1@v3b9e v3ba2@v3ba0) ((lambda (v3ba5@ids v3ba6@y) (call-with-values (lambda () (v3afa@cvt (car v3b97@p*) v3b98@n v3ba5@ids)) (lambda (v3bad@v3baa v3bae@v3bac) ((lambda (v3bb1@ids v3bb2@x) (values (cons v3bb2@x v3ba6@y) v3bb1@ids)) v3bae@v3bac v3bad@v3baa)))) v3ba2@v3ba0 v3ba1@v3b9e)))))) (set! v3afa@cvt (lambda (v3afb@p v3afc@n v3afd@ids) ((lambda (v3b01@t) ((lambda (v3b03@ls/false) (if (and v3b03@ls/false (apply (lambda (v3b05@id) (v2cf0@id? v3b05@id)) v3b03@ls/false)) (apply (lambda (v3b07@id) (if (v2cfe@bound-id-member? v3afb@p v3af4@keys) (values (vector 'free-id v3afb@p) v3afd@ids) (if (v2cf8@free-id=? v3afb@p (v2e85@scheme-stx '_)) (values '_ v3afd@ids) (values 'any (cons (cons v3afb@p v3afc@n) v3afd@ids))))) v3b03@ls/false) ((lambda (v3b09@t) ((lambda (v3b0b@ls/false) (if (and v3b0b@ls/false (apply (lambda (v3b0d@p v3b0e@dots) (v2efd@ellipsis? v3b0e@dots)) v3b0b@ls/false)) (apply (lambda (v3b11@p v3b12@dots) (call-with-values (lambda () (v3afa@cvt v3b11@p (+ v3afc@n '1) v3afd@ids)) (lambda (v3b19@v3b16 v3b1a@v3b18) ((lambda (v3b1d@ids v3b1e@p) (values (if (eq? v3b1e@p 'any) 'each-any (vector 'each v3b1e@p)) v3b1d@ids)) v3b1a@v3b18 v3b19@v3b16)))) v3b0b@ls/false) ((lambda (v3b21@t) ((lambda (v3b23@ls/false) (if (and v3b23@ls/false (apply (lambda (v3b25@x v3b26@dots v3b27@ys v3b28@z) (v2efd@ellipsis? v3b26@dots)) v3b23@ls/false)) (apply (lambda (v3b2d@x v3b2e@dots v3b2f@ys v3b30@z) (call-with-values (lambda () (v3afa@cvt v3b30@z v3afc@n v3afd@ids)) (lambda (v3b39@v3b36 v3b3a@v3b38) ((lambda (v3b3d@ids v3b3e@z) (call-with-values (lambda () (v3af8@cvt* v3b2f@ys v3afc@n v3b3d@ids)) (lambda (v3b45@v3b42 v3b46@v3b44) ((lambda (v3b49@ids v3b4a@ys) (call-with-values (lambda () (v3afa@cvt v3b2d@x (+ v3afc@n '1) v3b49@ids)) (lambda (v3b51@v3b4e v3b52@v3b50) ((lambda (v3b55@ids v3b56@x) (values (vector 'each+ v3b56@x (reverse v3b4a@ys) v3b3e@z) v3b55@ids)) v3b52@v3b50 v3b51@v3b4e)))) v3b46@v3b44 v3b45@v3b42)))) v3b3a@v3b38 v3b39@v3b36)))) v3b23@ls/false) ((lambda (v3b59@t) ((lambda (v3b5b@ls/false) (if v3b5b@ls/false (apply (lambda (v3b5d@x v3b5e@y) (call-with-values (lambda () (v3afa@cvt v3b5e@y v3afc@n v3afd@ids)) (lambda (v3b65@v3b62 v3b66@v3b64) ((lambda (v3b69@ids v3b6a@y) (call-with-values (lambda () (v3afa@cvt v3b5d@x v3afc@n v3b69@ids)) (lambda (v3b71@v3b6e v3b72@v3b70) ((lambda (v3b75@ids v3b76@x) (values (cons v3b76@x v3b6a@y) v3b75@ids)) v3b72@v3b70 v3b71@v3b6e)))) v3b66@v3b64 v3b65@v3b62)))) v3b5b@ls/false) ((lambda (v3b79@t) ((lambda (v3b7b@ls/false) (if v3b7b@ls/false (apply (lambda () (values '() v3afd@ids)) v3b7b@ls/false) ((lambda (v3b7d@t) ((lambda (v3b7f@ls/false) (if (and v3b7f@ls/false (apply (lambda (v3b81@p) (not (v2cb8@stx? v3b81@p))) v3b7f@ls/false)) (apply (lambda (v3b83@p) (call-with-values (lambda () (v3afa@cvt v3b83@p v3afc@n v3afd@ids)) (lambda (v3b89@v3b86 v3b8a@v3b88) ((lambda (v3b8d@ids v3b8e@p) (values (vector 'vector v3b8e@p) v3b8d@ids)) v3b8a@v3b88 v3b89@v3b86)))) v3b7f@ls/false) ((lambda (v3b91@t) ((lambda (v3b93@ls/false) (if v3b93@ls/false (apply (lambda (v3b95@datum) (values (vector 'atom (v2d06@stx->datum v3b95@datum)) v3afd@ids)) v3b93@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3b91@t))) (v2efb@syntax-dispatch v3b91@t 'any))) v3b7d@t))) (v2efb@syntax-dispatch v3b7d@t '#(vector each-any)))) v3b79@t))) (v2efb@syntax-dispatch v3b79@t '()))) v3b59@t))) (v2efb@syntax-dispatch v3b59@t '(any . any)))) v3b21@t))) (v2efb@syntax-dispatch v3b21@t '(any any . #(each+ any () any))))) v3b09@t))) (v2efb@syntax-dispatch v3b09@t '(any any)))) v3b01@t))) (v2efb@syntax-dispatch v3b01@t 'any))) v3afb@p))) (v3afa@cvt v3af3@pattern '0 '()))) '#f '#f))) (set! v2efb@syntax-dispatch ((lambda () ((lambda (v3bb6@stx^ v3bb8@match-each v3bba@match-each+ v3bbc@match-each-any v3bbe@match-empty v3bc0@combine v3bc2@match* v3bc4@match) (begin (set! v3bb6@stx^ (lambda (v3c91@e v3c92@m* v3c93@s* v3c94@ae*) (if (and (null? v3c92@m*) (null? v3c93@s*) (null? v3c94@ae*)) v3c91@e (v2cd8@mkstx v3c91@e v3c92@m* v3c93@s* v3c94@ae*)))) (set! v3bb8@match-each (lambda (v3c71@e v3c72@p v3c73@m* v3c74@s* v3c75@ae*) (if (pair? v3c71@e) ((lambda (v3c7b@first) (and v3c7b@first ((lambda (v3c7d@rest) (and v3c7d@rest (cons v3c7b@first v3c7d@rest))) (v3bb8@match-each (cdr v3c71@e) v3c72@p v3c73@m* v3c74@s* v3c75@ae*)))) (v3bc4@match (car v3c71@e) v3c72@p v3c73@m* v3c74@s* v3c75@ae* '())) (if (null? v3c71@e) '() (if (v2cb8@stx? v3c71@e) (and (not (v2c6e@top-marked? v3c73@m*)) (call-with-values (lambda () (v2cd6@join-wraps v3c73@m* v3c74@s* v3c75@ae* v3c71@e)) (lambda (v3c85@v3c80 v3c86@v3c82 v3c87@v3c84) ((lambda (v3c8b@ae* v3c8c@s* v3c8d@m*) (v3bb8@match-each (v2cbc@stx-expr v3c71@e) v3c72@p v3c8d@m* v3c8c@s* v3c8b@ae*)) v3c87@v3c84 v3c86@v3c82 v3c85@v3c80)))) (if (v288f@v27ae@annotation? v3c71@e) (v3bb8@match-each (v2891@v27b2@annotation-expression v3c71@e) v3c72@p v3c73@m* v3c74@s* v3c75@ae*) '#f)))))) (set! v3bba@match-each+ (lambda (v3c31@e v3c32@x-pat v3c33@y-pat v3c34@z-pat v3c35@m* v3c36@s* v3c37@ae* v3c38@r) ((letrec ((v3c41@f (lambda (v3c43@e v3c44@m* v3c45@s* v3c46@ae*) (if (pair? v3c43@e) (call-with-values (lambda () (v3c41@f (cdr v3c43@e) v3c44@m* v3c45@s* v3c46@ae*)) (lambda (v3c51@v3c4c v3c52@v3c4e v3c53@v3c50) ((lambda (v3c57@r v3c58@y-pat v3c59@xr*) (if v3c57@r (if (null? v3c58@y-pat) ((lambda (v3c5d@xr) (if v3c5d@xr (values (cons v3c5d@xr v3c59@xr*) v3c58@y-pat v3c57@r) (values '#f '#f '#f))) (v3bc4@match (car v3c43@e) v3c32@x-pat v3c44@m* v3c45@s* v3c46@ae* '())) (values '() (cdr v3c58@y-pat) (v3bc4@match (car v3c43@e) (car v3c58@y-pat) v3c44@m* v3c45@s* v3c46@ae* v3c57@r))) (values '#f '#f '#f))) v3c53@v3c50 v3c52@v3c4e v3c51@v3c4c))) (if (v2cb8@stx? v3c43@e) (if (v2c6e@top-marked? v3c44@m*) (values '() v3c33@y-pat (v3bc4@match v3c43@e v3c34@z-pat v3c44@m* v3c45@s* v3c46@ae* v3c38@r)) (call-with-values (lambda () (v2cd6@join-wraps v3c44@m* v3c45@s* v3c46@ae* v3c43@e)) (lambda (v3c65@v3c60 v3c66@v3c62 v3c67@v3c64) ((lambda (v3c6b@ae* v3c6c@s* v3c6d@m*) (v3c41@f (v2cbc@stx-expr v3c43@e) v3c6d@m* v3c6c@s* v3c6b@ae*)) v3c67@v3c64 v3c66@v3c62 v3c65@v3c60)))) (if (v288f@v27ae@annotation? v3c43@e) (v3c41@f (v2891@v27b2@annotation-expression v3c43@e) v3c44@m* v3c45@s* v3c46@ae*) (values '() v3c33@y-pat (v3bc4@match v3c43@e v3c34@z-pat v3c44@m* v3c45@s* v3c46@ae* v3c38@r)))))))) v3c41@f) v3c31@e v3c35@m* v3c36@s* v3c37@ae*))) (set! v3bbc@match-each-any (lambda (v3c15@e v3c16@m* v3c17@s* v3c18@ae*) (if (pair? v3c15@e) ((lambda (v3c1d@l) (and v3c1d@l (cons (v3bb6@stx^ (car v3c15@e) v3c16@m* v3c17@s* v3c18@ae*) v3c1d@l))) (v3bbc@match-each-any (cdr v3c15@e) v3c16@m* v3c17@s* v3c18@ae*)) (if (null? v3c15@e) '() (if (v2cb8@stx? v3c15@e) (and (not (v2c6e@top-marked? v3c16@m*)) (call-with-values (lambda () (v2cd6@join-wraps v3c16@m* v3c17@s* v3c18@ae* v3c15@e)) (lambda (v3c25@v3c20 v3c26@v3c22 v3c27@v3c24) ((lambda (v3c2b@ae* v3c2c@s* v3c2d@m*) (v3bbc@match-each-any (v2cbc@stx-expr v3c15@e) v3c2d@m* v3c2c@s* v3c2b@ae*)) v3c27@v3c24 v3c26@v3c22 v3c25@v3c20)))) (if (v288f@v27ae@annotation? v3c15@e) (v3bbc@match-each-any (v2891@v27b2@annotation-expression v3c15@e) v3c16@m* v3c17@s* v3c18@ae*) '#f)))))) (set! v3bbe@match-empty (lambda (v3c0f@p v3c10@r) (if (null? v3c0f@p) v3c10@r (if (eq? v3c0f@p '_) v3c10@r (if (eq? v3c0f@p 'any) (cons '() v3c10@r) (if (pair? v3c0f@p) (v3bbe@match-empty (car v3c0f@p) (v3bbe@match-empty (cdr v3c0f@p) v3c10@r)) (if (eq? v3c0f@p 'each-any) (cons '() v3c10@r) ((lambda (v3c13@t) (if (memv v3c13@t '(each)) (v3bbe@match-empty (vector-ref v3c0f@p '1) v3c10@r) (if (memv v3c13@t '(each+)) (v3bbe@match-empty (vector-ref v3c0f@p '1) (v3bbe@match-empty (reverse (vector-ref v3c0f@p '2)) (v3bbe@match-empty (vector-ref v3c0f@p '3) v3c10@r))) (if (memv v3c13@t '(free-id atom)) v3c10@r (if (memv v3c13@t '(scheme-id atom)) v3c10@r (if (memv v3c13@t '(vector)) (v3bbe@match-empty (vector-ref v3c0f@p '1) v3c10@r) (assertion-violation 'syntax-dispatch '"invalid pattern" v3c0f@p))))))) (vector-ref v3c0f@p '0))))))))) (set! v3bc0@combine (lambda (v3c0b@r* v3c0c@r) (if (null? (car v3c0b@r*)) v3c0c@r (cons (map car v3c0b@r*) (v3bc0@combine (map cdr v3c0b@r*) v3c0c@r))))) (set! v3bc2@match* (lambda (v3be7@e v3be8@p v3be9@m* v3bea@s* v3beb@ae* v3bec@r) (if (null? v3be8@p) (and (null? v3be7@e) v3bec@r) (if (pair? v3be8@p) (and (pair? v3be7@e) (v3bc4@match (car v3be7@e) (car v3be8@p) v3be9@m* v3bea@s* v3beb@ae* (v3bc4@match (cdr v3be7@e) (cdr v3be8@p) v3be9@m* v3bea@s* v3beb@ae* v3bec@r))) (if (eq? v3be8@p 'each-any) ((lambda (v3bf3@l) (and v3bf3@l (cons v3bf3@l v3bec@r))) (v3bbc@match-each-any v3be7@e v3be9@m* v3bea@s* v3beb@ae*)) ((lambda (v3bf5@t) (if (memv v3bf5@t '(each)) (if (null? v3be7@e) (v3bbe@match-empty (vector-ref v3be8@p '1) v3bec@r) ((lambda (v3bf7@r*) (and v3bf7@r* (v3bc0@combine v3bf7@r* v3bec@r))) (v3bb8@match-each v3be7@e (vector-ref v3be8@p '1) v3be9@m* v3bea@s* v3beb@ae*))) (if (memv v3bf5@t '(free-id)) (and (symbol? v3be7@e) (v2c6e@top-marked? v3be9@m*) (v2cf8@free-id=? (v3bb6@stx^ v3be7@e v3be9@m* v3bea@s* v3beb@ae*) (vector-ref v3be8@p '1)) v3bec@r) (if (memv v3bf5@t '(scheme-id)) (and (symbol? v3be7@e) (v2c6e@top-marked? v3be9@m*) (v2cf8@free-id=? (v3bb6@stx^ v3be7@e v3be9@m* v3bea@s* v3beb@ae*) (v2e85@scheme-stx (vector-ref v3be8@p '1))) v3bec@r) (if (memv v3bf5@t '(each+)) (call-with-values (lambda () (v3bba@match-each+ v3be7@e (vector-ref v3be8@p '1) (vector-ref v3be8@p '2) (vector-ref v3be8@p '3) v3be9@m* v3bea@s* v3beb@ae* v3bec@r)) (lambda (v3bff@v3bfa v3c00@v3bfc v3c01@v3bfe) ((lambda (v3c05@r v3c06@y-pat v3c07@xr*) (and v3c05@r (null? v3c06@y-pat) (if (null? v3c07@xr*) (v3bbe@match-empty (vector-ref v3be8@p '1) v3c05@r) (v3bc0@combine v3c07@xr* v3c05@r)))) v3c01@v3bfe v3c00@v3bfc v3bff@v3bfa))) (if (memv v3bf5@t '(atom)) (and (fast-equal? (vector-ref v3be8@p '1) (v2d04@strip v3be7@e v3be9@m*)) v3bec@r) (if (memv v3bf5@t '(vector)) (and (vector? v3be7@e) (v3bc4@match (vector->list v3be7@e) (vector-ref v3be8@p '1) v3be9@m* v3bea@s* v3beb@ae* v3bec@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" v3be8@p)))))))) (vector-ref v3be8@p '0))))))) (set! v3bc4@match (lambda (v3bc9@e v3bca@p v3bcb@m* v3bcc@s* v3bcd@ae* v3bce@r) (if (not v3bce@r) '#f (if (eq? v3bca@p '_) v3bce@r (if (eq? v3bca@p 'any) (cons (v3bb6@stx^ v3bc9@e v3bcb@m* v3bcc@s* v3bcd@ae*) v3bce@r) (if (v2cb8@stx? v3bc9@e) (and (not (v2c6e@top-marked? v3bcb@m*)) (call-with-values (lambda () (v2cd6@join-wraps v3bcb@m* v3bcc@s* v3bcd@ae* v3bc9@e)) (lambda (v3bdb@v3bd6 v3bdc@v3bd8 v3bdd@v3bda) ((lambda (v3be1@ae* v3be2@s* v3be3@m*) (v3bc4@match (v2cbc@stx-expr v3bc9@e) v3bca@p v3be3@m* v3be2@s* v3be1@ae* v3bce@r)) v3bdd@v3bda v3bdc@v3bd8 v3bdb@v3bd6)))) (if (v288f@v27ae@annotation? v3bc9@e) (v3bc4@match (v2891@v27b2@annotation-expression v3bc9@e) v3bca@p v3bcb@m* v3bcc@s* v3bcd@ae* v3bce@r) (v3bc2@match* v3bc9@e v3bca@p v3bcb@m* v3bcc@s* v3bcd@ae* v3bce@r)))))))) (lambda (v3bc5@e v3bc6@p) (v3bc4@match v3bc5@e v3bc6@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! v2efd@ellipsis? (lambda (v3c99@x) (and (v2cf0@id? v3c99@x) (v2cf8@free-id=? v3c99@x (v2e85@scheme-stx '...))))) (set! v2eff@underscore? (lambda (v3c9b@x) (and (v2cf0@id? v3c9b@x) (v2cf8@free-id=? v3c9b@x (v2e85@scheme-stx '_))))) (set! v2f01@verify-literals (lambda (v3c9d@lits v3c9e@expr) (for-each (lambda (v3ca1@x) (if (or (not (v2cf0@id? v3ca1@x)) (v2efd@ellipsis? v3ca1@x) (v2eff@underscore? v3ca1@x)) (v2fe4@syntax-violation '#f '"invalid literal" v3c9e@expr v3ca1@x) (void))) v3c9d@lits))) (set! v2f03@syntax-case-transformer ((lambda () ((lambda (v3ca4@build-dispatch-call v3ca6@invalid-ids-error v3ca8@gen-clause v3caa@gen-syntax-case) (begin (set! v3ca4@build-dispatch-call (lambda (v3d15@pvars v3d16@expr v3d17@y v3d18@r v3d19@mr) ((lambda (v3d1f@ids v3d20@levels) ((lambda (v3d23@labels v3d24@new-vars) ((lambda (v3d27@body) (list '(primitive apply) (v2c4c@v2b8c@build-lambda '#f v3d24@new-vars v3d27@body) v3d17@y)) (v2f1d@chi-expr (v2cdc@add-subst (v2cab@make-full-rib v3d1f@ids v3d23@labels) v3d16@expr) (append (map (lambda (v3d29@label v3d2a@var v3d2b@level) (cons v3d29@label (v2d10@make-binding 'syntax (cons v3d2a@var v3d2b@level)))) v3d23@labels v3d24@new-vars (map cdr v3d15@pvars)) v3d18@r) v3d19@mr))) (map v2c74@gen-label v3d1f@ids) (map v2c70@gen-lexical v3d1f@ids))) (map car v3d15@pvars) (map cdr v3d15@pvars)))) (set! v3ca6@invalid-ids-error (lambda (v3d09@id* v3d0a@e v3d0b@class) ((letrec ((v3d0f@find (lambda (v3d11@id* v3d12@ok*) (if (null? v3d11@id*) (v2fe4@syntax-violation '#f '"invalid syntax" v3d0a@e) (if (v2cf0@id? (car v3d11@id*)) (if (v2cfe@bound-id-member? (car v3d11@id*) v3d12@ok*) (v2fe0@syntax-error (car v3d11@id*) '"duplicate " v3d0b@class) (v3d0f@find (cdr v3d11@id*) (cons (car v3d11@id*) v3d12@ok*))) (v2fe0@syntax-error (car v3d11@id*) '"invalid " v3d0b@class)))))) v3d0f@find) v3d09@id* '()))) (set! v3ca8@gen-clause (lambda (v3ce1@x v3ce2@keys v3ce3@clauses v3ce4@r v3ce5@mr v3ce6@pat v3ce7@fender v3ce8@expr) (call-with-values (lambda () (v2ef9@convert-pattern v3ce6@pat v3ce2@keys)) (lambda (v3cf5@v3cf2 v3cf6@v3cf4) ((lambda (v3cf9@pvars v3cfa@p) (if (not (v2cfc@distinct-bound-ids? (map car v3cf9@pvars))) (v3ca6@invalid-ids-error (map car v3cf9@pvars) v3ce6@pat '"pattern variable") (if (not (for-all (lambda (v3cfd@x) (not (v2efd@ellipsis? (car v3cfd@x)))) v3cf9@pvars)) (v2fe4@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" v3ce6@pat) ((lambda (v3cff@y) ((lambda (v3d01@test) ((lambda (v3d03@conseq) ((lambda (v3d05@altern) (list (v2c4c@v2b8c@build-lambda '#f (list v3cff@y) (list 'if v3d01@test v3d03@conseq v3d05@altern)) (list '(primitive syntax-dispatch) v3ce1@x (list 'quote v3cfa@p)))) (v3caa@gen-syntax-case v3ce1@x v3ce2@keys v3ce3@clauses v3ce4@r v3ce5@mr))) (v3ca4@build-dispatch-call v3cf9@pvars v3ce8@expr v3cff@y v3ce4@r v3ce5@mr))) (if (eq? v3ce7@fender '#t) v3cff@y ((lambda (v3d07@call) (list 'if v3cff@y v3d07@call (list 'quote '#f))) (v3ca4@build-dispatch-call v3cf9@pvars v3ce7@fender v3cff@y v3ce4@r v3ce5@mr))))) (v2c70@gen-lexical 'tmp))))) v3cf6@v3cf4 v3cf5@v3cf2))))) (set! v3caa@gen-syntax-case (lambda (v3cbf@x v3cc0@keys v3cc1@clauses v3cc2@r v3cc3@mr) (if (null? v3cc1@clauses) (list '(primitive syntax-error) v3cbf@x) ((lambda (v3cc9@t) ((lambda (v3ccb@ls/false) (if v3ccb@ls/false (apply (lambda (v3ccd@pat v3cce@expr) (if (and (v2cf0@id? v3ccd@pat) (not (v2cfe@bound-id-member? v3ccd@pat v3cc0@keys)) (not (v2efd@ellipsis? v3ccd@pat))) (if (v2cf8@free-id=? v3ccd@pat (v2e85@scheme-stx '_)) (v2f1d@chi-expr v3cce@expr v3cc2@r v3cc3@mr) ((lambda (v3cd1@lab v3cd2@lex) ((lambda (v3cd5@body) (list (v2c4c@v2b8c@build-lambda '#f (list v3cd2@lex) v3cd5@body) v3cbf@x)) (v2f1d@chi-expr (v2cdc@add-subst (v2cab@make-full-rib (list v3ccd@pat) (list v3cd1@lab)) v3cce@expr) (cons (cons v3cd1@lab (v2d10@make-binding 'syntax (cons v3cd2@lex '0))) v3cc2@r) v3cc3@mr))) (v2c74@gen-label v3ccd@pat) (v2c70@gen-lexical v3ccd@pat))) (v3ca8@gen-clause v3cbf@x v3cc0@keys (cdr v3cc1@clauses) v3cc2@r v3cc3@mr v3ccd@pat '#t v3cce@expr))) v3ccb@ls/false) ((lambda (v3cd7@t) ((lambda (v3cd9@ls/false) (if v3cd9@ls/false (apply (lambda (v3cdb@pat v3cdc@fender v3cdd@expr) (v3ca8@gen-clause v3cbf@x v3cc0@keys (cdr v3cc1@clauses) v3cc2@r v3cc3@mr v3cdb@pat v3cdc@fender v3cdd@expr)) v3cd9@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3cd7@t))) (v2efb@syntax-dispatch v3cd7@t '(any any any)))) v3cc9@t))) (v2efb@syntax-dispatch v3cc9@t '(any any)))) (car v3cc1@clauses))))) (lambda (v3cab@e v3cac@r v3cad@mr) ((lambda (v3cb1@t) ((lambda (v3cb3@ls/false) (if v3cb3@ls/false (apply (lambda (v3cb5@expr v3cb6@keys v3cb7@clauses) (begin (v2f01@verify-literals v3cb6@keys v3cab@e) ((lambda (v3cbb@x) ((lambda (v3cbd@body) (list (v2c4c@v2b8c@build-lambda '#f (list v3cbb@x) v3cbd@body) (v2f1d@chi-expr v3cb5@expr v3cac@r v3cad@mr))) (v3caa@gen-syntax-case v3cbb@x v3cb6@keys v3cb7@clauses v3cac@r v3cad@mr))) (v2c70@gen-lexical 'tmp)))) v3cb3@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3cb1@t))) (v2efb@syntax-dispatch v3cb1@t '(_ any each-any . each-any)))) v3cab@e)))) '#f '#f '#f '#f)))) (set! v2f05@ellipsis-map (lambda (v3d2f@proc v3d30@ls . v3d33@ls*) ((lambda (v3d36@who) (begin (set! v3d36@who '...) (begin (if (not (list? v3d30@ls)) (assertion-violation v3d36@who '"not a list" v3d30@ls) (void)) (if (not (null? v3d33@ls*)) ((lambda (v3d37@n) (for-each (lambda (v3d39@x) (begin (if (not (list? v3d39@x)) (assertion-violation v3d36@who '"not a list" v3d39@x) (void)) (if (not (= (length v3d39@x) v3d37@n)) (assertion-violation v3d36@who '"length mismatch" v3d30@ls v3d39@x) (void)))) v3d33@ls*)) (length v3d30@ls)) (void)) (apply map v3d2f@proc v3d30@ls v3d33@ls*)))) '#f))) (set! v2f07@syntax-transformer ((lambda () ((lambda (v3d3c@gen-syntax v3d3e@gen-ref v3d40@gen-append v3d42@gen-mappend v3d44@gen-map v3d46@gen-cons v3d48@gen-vector v3d4a@regen) (begin (set! v3d3c@gen-syntax (lambda (v3db3@src v3db4@e v3db5@r v3db6@maps v3db7@ellipsis? v3db8@vec?) ((lambda (v3dbf@t) ((lambda (v3dc1@ls/false) (if (and v3dc1@ls/false (apply (lambda (v3dc3@dots) (v3db7@ellipsis? v3dc3@dots)) v3dc1@ls/false)) (apply (lambda (v3dc5@dots) (v2fe4@syntax-violation '#f '"misplaced ellipsis in syntax form" v3db3@src)) v3dc1@ls/false) ((lambda (v3dc7@t) ((lambda (v3dc9@ls/false) (if (and v3dc9@ls/false (apply (lambda (v3dcb@id) (v2cf0@id? v3dcb@id)) v3dc9@ls/false)) (apply (lambda (v3dcd@id) ((lambda (v3dcf@label) ((lambda (v3dd1@b) ((lambda () (if (eq? (v2d12@binding-type v3dd1@b) 'syntax) (call-with-values (lambda () ((lambda (v3dd7@var.lev) (v3d3e@gen-ref v3db3@src (car v3dd7@var.lev) (cdr v3dd7@var.lev) v3db6@maps)) (v2d14@binding-value v3dd1@b))) (lambda (v3dd9@v3dd4 v3dda@v3dd6) ((lambda (v3ddd@maps v3dde@var) (values (list 'ref v3dde@var) v3ddd@maps)) v3dda@v3dd6 v3dd9@v3dd4))) (values (list 'quote v3db4@e) v3db6@maps))))) (v2d0e@label->binding v3dcf@label v3db5@r))) (v2d0a@id->label v3db4@e))) v3dc9@ls/false) ((lambda (v3de1@t) ((lambda (v3de3@ls/false) (if (and v3de3@ls/false (apply (lambda (v3de5@dots v3de6@e) (v3db7@ellipsis? v3de5@dots)) v3de3@ls/false)) (apply (lambda (v3de9@dots v3dea@e) (if v3db8@vec? (v2fe4@syntax-violation '#f '"misplaced ellipsis in syntax form" v3db3@src) (v3d3c@gen-syntax v3db3@src v3dea@e v3db5@r v3db6@maps (lambda (v3ded@x) '#f) '#f))) v3de3@ls/false) ((lambda (v3def@t) ((lambda (v3df1@ls/false) (if (and v3df1@ls/false (apply (lambda (v3df3@x v3df4@dots v3df5@y) (v3db7@ellipsis? v3df4@dots)) v3df1@ls/false)) (apply (lambda (v3df9@x v3dfa@dots v3dfb@y) ((letrec ((v3dff@f (lambda (v3e01@y v3e02@k) ((lambda (v3e05@t) ((lambda (v3e07@ls/false) (if v3e07@ls/false (apply (lambda () (v3e02@k v3db6@maps)) v3e07@ls/false) ((lambda (v3e09@t) ((lambda (v3e0b@ls/false) (if (and v3e0b@ls/false (apply (lambda (v3e0d@dots v3e0e@y) (v3db7@ellipsis? v3e0d@dots)) v3e0b@ls/false)) (apply (lambda (v3e11@dots v3e12@y) (v3dff@f v3e12@y (lambda (v3e15@maps) (call-with-values (lambda () (v3e02@k (cons '() v3e15@maps))) (lambda (v3e1b@v3e18 v3e1c@v3e1a) ((lambda (v3e1f@maps v3e20@x) (if (null? (car v3e1f@maps)) (v2fe4@syntax-violation '#f '"extra ellipsis in syntax form" v3db3@src) (values (v3d42@gen-mappend v3e20@x (car v3e1f@maps)) (cdr v3e1f@maps)))) v3e1c@v3e1a v3e1b@v3e18)))))) v3e0b@ls/false) ((lambda (v3e23@t) ((lambda (v3e25@ls/false) (if v3e25@ls/false (apply (lambda () (call-with-values (lambda () (v3d3c@gen-syntax v3db3@src v3e01@y v3db5@r v3db6@maps v3db7@ellipsis? v3db8@vec?)) (lambda (v3e2b@v3e28 v3e2c@v3e2a) ((lambda (v3e2f@maps v3e30@y) (call-with-values (lambda () (v3e02@k v3e2f@maps)) (lambda (v3e37@v3e34 v3e38@v3e36) ((lambda (v3e3b@maps v3e3c@x) (values (v3d40@gen-append v3e3c@x v3e30@y) v3e3b@maps)) v3e38@v3e36 v3e37@v3e34)))) v3e2c@v3e2a v3e2b@v3e28)))) v3e25@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3e23@t))) (v2efb@syntax-dispatch v3e23@t '_))) v3e09@t))) (v2efb@syntax-dispatch v3e09@t '(any . any)))) v3e05@t))) (v2efb@syntax-dispatch v3e05@t '()))) v3e01@y)))) v3dff@f) v3dfb@y (lambda (v3e3f@maps) (call-with-values (lambda () (v3d3c@gen-syntax v3db3@src v3df9@x v3db5@r (cons '() v3e3f@maps) v3db7@ellipsis? '#f)) (lambda (v3e45@v3e42 v3e46@v3e44) ((lambda (v3e49@maps v3e4a@x) (if (null? (car v3e49@maps)) (v2fe4@syntax-violation '#f '"extra ellipsis in syntax form" v3db3@src) (values (v3d44@gen-map v3e4a@x (car v3e49@maps)) (cdr v3e49@maps)))) v3e46@v3e44 v3e45@v3e42)))))) v3df1@ls/false) ((lambda (v3e4d@t) ((lambda (v3e4f@ls/false) (if v3e4f@ls/false (apply (lambda (v3e51@x v3e52@y) (call-with-values (lambda () (v3d3c@gen-syntax v3db3@src v3e51@x v3db5@r v3db6@maps v3db7@ellipsis? '#f)) (lambda (v3e59@v3e56 v3e5a@v3e58) ((lambda (v3e5d@maps v3e5e@xnew) (call-with-values (lambda () (v3d3c@gen-syntax v3db3@src v3e52@y v3db5@r v3e5d@maps v3db7@ellipsis? v3db8@vec?)) (lambda (v3e65@v3e62 v3e66@v3e64) ((lambda (v3e69@maps v3e6a@ynew) (values (v3d46@gen-cons v3db4@e v3e51@x v3e52@y v3e5e@xnew v3e6a@ynew) v3e69@maps)) v3e66@v3e64 v3e65@v3e62)))) v3e5a@v3e58 v3e59@v3e56)))) v3e4f@ls/false) ((lambda (v3e6d@t) ((lambda (v3e6f@ls/false) (if v3e6f@ls/false (apply (lambda (v3e71@ls) (call-with-values (lambda () (v3d3c@gen-syntax v3db3@src v3e71@ls v3db5@r v3db6@maps v3db7@ellipsis? '#t)) (lambda (v3e77@v3e74 v3e78@v3e76) ((lambda (v3e7b@maps v3e7c@lsnew) (values (v3d48@gen-vector v3db4@e v3e71@ls v3e7c@lsnew) v3e7b@maps)) v3e78@v3e76 v3e77@v3e74)))) v3e6f@ls/false) ((lambda (v3e7f@t) ((lambda (v3e81@ls/false) (if v3e81@ls/false (apply (lambda () (values (list 'quote v3db4@e) v3db6@maps)) v3e81@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3e7f@t))) (v2efb@syntax-dispatch v3e7f@t '_))) v3e6d@t))) (v2efb@syntax-dispatch v3e6d@t '#(vector each-any)))) v3e4d@t))) (v2efb@syntax-dispatch v3e4d@t '(any . any)))) v3def@t))) (v2efb@syntax-dispatch v3def@t '(any any . any)))) v3de1@t))) (v2efb@syntax-dispatch v3de1@t '(any any)))) v3dc7@t))) (v2efb@syntax-dispatch v3dc7@t 'any))) v3dbf@t))) (v2efb@syntax-dispatch v3dbf@t 'any))) v3db4@e))) (set! v3d3e@gen-ref (lambda (v3d99@src v3d9a@var v3d9b@level v3d9c@maps) (if (= v3d9b@level '0) (values v3d9a@var v3d9c@maps) (if (null? v3d9c@maps) (v2fe4@syntax-violation '#f '"missing ellipsis in syntax form" v3d99@src) (call-with-values (lambda () (v3d3e@gen-ref v3d99@src v3d9a@var (- v3d9b@level '1) (cdr v3d9c@maps))) (lambda (v3da5@v3da2 v3da6@v3da4) ((lambda (v3da9@outer-maps v3daa@outer-var) ((lambda (v3dad@t) (if v3dad@t ((lambda (v3daf@b) (values (cdr v3daf@b) v3d9c@maps)) v3dad@t) ((lambda (v3db1@inner-var) (values v3db1@inner-var (cons (cons (cons v3daa@outer-var v3db1@inner-var) (car v3d9c@maps)) v3da9@outer-maps))) (v2c70@gen-lexical 'tmp)))) (assq v3daa@outer-var (car v3d9c@maps)))) v3da6@v3da4 v3da5@v3da2))))))) (set! v3d40@gen-append (lambda (v3d95@x v3d96@y) (if (fast-equal? v3d96@y ''()) v3d95@x (list 'append v3d95@x v3d96@y)))) (set! v3d42@gen-mappend (lambda (v3d91@e v3d92@map-env) (list 'apply '(primitive append) (v3d44@gen-map v3d91@e v3d92@map-env)))) (set! v3d44@gen-map (lambda (v3d7f@e v3d80@map-env) ((lambda (v3d83@formals v3d84@actuals) (if (eq? (car v3d7f@e) 'ref) (car v3d84@actuals) (if (for-all (lambda (v3d87@x) (and (eq? (car v3d87@x) 'ref) (memq (cadr v3d87@x) v3d83@formals))) (cdr v3d7f@e)) ((lambda (v3d89@args) (cons 'map (cons (list 'primitive (car v3d7f@e)) v3d89@args))) (map ((lambda (v3d8b@r) (lambda (v3d8d@x) (cdr (assq (cadr v3d8d@x) v3d8b@r)))) (map cons v3d83@formals v3d84@actuals)) (cdr v3d7f@e))) (cons* 'map (list 'lambda v3d83@formals v3d7f@e) v3d84@actuals)))) (map cdr v3d80@map-env) (map (lambda (v3d8f@x) (list 'ref (car v3d8f@x))) v3d80@map-env)))) (set! v3d46@gen-cons (lambda (v3d6f@e v3d70@x v3d71@y v3d72@xnew v3d73@ynew) ((lambda (v3d79@t) (if (memv v3d79@t '(quote)) (if (eq? (car v3d72@xnew) 'quote) ((lambda (v3d7b@xnew v3d7c@ynew) (if (and (eq? v3d7b@xnew v3d70@x) (eq? v3d7c@ynew v3d71@y)) (list 'quote v3d6f@e) (list 'quote (cons v3d7b@xnew v3d7c@ynew)))) (cadr v3d72@xnew) (cadr v3d73@ynew)) (if (null? (cadr v3d73@ynew)) (list 'list v3d72@xnew) (list 'cons v3d72@xnew v3d73@ynew))) (if (memv v3d79@t '(list)) (cons 'list (cons v3d72@xnew (cdr v3d73@ynew))) (list 'cons v3d72@xnew v3d73@ynew)))) (car v3d73@ynew)))) (set! v3d48@gen-vector (lambda (v3d69@e v3d6a@ls v3d6b@lsnew) (if (eq? (car v3d6b@lsnew) 'quote) (if (eq? (cadr v3d6b@lsnew) v3d6a@ls) (list 'quote v3d69@e) (list 'quote (list->vector (cadr v3d6b@lsnew)))) (if (eq? (car v3d6b@lsnew) 'list) (cons 'vector (cdr v3d6b@lsnew)) (list 'list->vector v3d6b@lsnew))))) (set! v3d4a@regen (lambda (v3d63@x) ((lambda (v3d65@t) (if (memv v3d65@t '(ref)) (cadr v3d63@x) (if (memv v3d65@t '(primitive)) (list 'primitive (cadr v3d63@x)) (if (memv v3d65@t '(quote)) (list 'quote (cadr v3d63@x)) (if (memv v3d65@t '(lambda)) (v2c4c@v2b8c@build-lambda '#f (cadr v3d63@x) (v3d4a@regen (caddr v3d63@x))) (if (memv v3d65@t '(map)) ((lambda (v3d67@ls) (cons '(primitive ellipsis-map) v3d67@ls)) (map v3d4a@regen (cdr v3d63@x))) (cons (list 'primitive (car v3d63@x)) (map v3d4a@regen (cdr v3d63@x))))))))) (car v3d63@x)))) (lambda (v3d4b@e v3d4c@r v3d4d@mr) ((lambda (v3d51@t) ((lambda (v3d53@ls/false) (if v3d53@ls/false (apply (lambda (v3d55@x) (call-with-values (lambda () (v3d3c@gen-syntax v3d4b@e v3d55@x v3d4c@r '() v2efd@ellipsis? '#f)) (lambda (v3d5b@v3d58 v3d5c@v3d5a) ((lambda (v3d5f@maps v3d60@e) (v3d4a@regen v3d60@e)) v3d5c@v3d5a v3d5b@v3d58)))) v3d53@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3d51@t))) (v2efb@syntax-dispatch v3d51@t '(_ any)))) v3d4b@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! v2f09@core-macro-transformer (lambda (v3e83@name) ((lambda (v3e85@t) (if (memv v3e85@t '(quote)) v2eab@quote-transformer (if (memv v3e85@t '(lambda)) v2eaf@lambda-transformer (if (memv v3e85@t '(case-lambda)) v2ead@case-lambda-transformer (if (memv v3e85@t '(letrec)) v2e93@letrec-transformer (if (memv v3e85@t '(letrec*)) v2e95@letrec*-transformer (if (memv v3e85@t '(if)) v2ea3@if-transformer (if (memv v3e85@t '(and)) v2ea5@and-transformer (if (memv v3e85@t '(or)) v2ea7@or-transformer (if (memv v3e85@t '(foreign-call)) v2ef7@foreign-call-transformer (if (memv v3e85@t '(syntax-case)) v2f03@syntax-case-transformer (if (memv v3e85@t '(syntax)) v2f07@syntax-transformer (if (memv v3e85@t '(type-descriptor)) v2e99@type-descriptor-transformer (if (memv v3e85@t '(record-type-descriptor)) v2e9b@record-type-descriptor-transformer (if (memv v3e85@t '(record-constructor-descriptor)) v2e9d@record-constructor-descriptor-transformer (if (memv v3e85@t '(fluid-let-syntax)) v2e97@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" v3e83@name))))))))))))))))) v3e83@name))) (set! v2f0b@symbol-macro (lambda (v3e87@x v3e88@set) ((lambda (v3e8b@t) ((lambda (v3e8d@ls/false) (if (and v3e8d@ls/false (apply (lambda (v3e8f@name) (and (v2cf0@id? v3e8f@name) (memq (v2cf2@id->sym v3e8f@name) v3e88@set))) v3e8d@ls/false)) (apply (lambda (v3e91@name) (v2eb1@bless (list 'quote v3e91@name))) v3e8d@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3e8b@t))) (v2efb@syntax-dispatch v3e8b@t '(_ any)))) v3e87@x))) (set! v2f0d@macro-transformer (lambda (v3e93@x) (if (procedure? v3e93@x) v3e93@x (if (symbol? v3e93@x) ((lambda (v3e95@t) (if (memv v3e95@t '(define-record-type)) v2eef@define-record-type-macro (if (memv v3e95@t '(define-struct)) v2eed@define-struct-macro (if (memv v3e95@t '(include)) v2ee3@include-macro (if (memv v3e95@t '(cond)) v2edf@cond-macro (if (memv v3e95@t '(let)) v2eb7@let-macro (if (memv v3e95@t '(do)) v2ed7@do-macro (if (memv v3e95@t '(or)) v2edb@or-macro (if (memv v3e95@t '(and)) v2edd@and-macro (if (memv v3e95@t '(let*)) v2ed9@let*-macro (if (memv v3e95@t '(let-values)) v2eb9@let-values-macro (if (memv v3e95@t '(let*-values)) v2ebb@let*-values-macro (if (memv v3e95@t '(syntax-rules)) v2ee7@syntax-rules-macro (if (memv v3e95@t '(quasiquote)) v2ee9@quasiquote-macro (if (memv v3e95@t '(quasisyntax)) v2eeb@quasisyntax-macro (if (memv v3e95@t '(with-syntax)) v2eb3@with-syntax-macro (if (memv v3e95@t '(when)) v2e9f@when-macro (if (memv v3e95@t '(unless)) v2ea1@unless-macro (if (memv v3e95@t '(case)) v2ea9@case-macro (if (memv v3e95@t '(identifier-syntax)) v2ed5@identifier-syntax-macro (if (memv v3e95@t '(time)) v2ecd@time-macro (if (memv v3e95@t '(delay)) v2ecf@delay-macro (if (memv v3e95@t '(assert)) v2ed1@assert-macro (if (memv v3e95@t '(endianness)) v2ed3@endianness-macro (if (memv v3e95@t '(guard)) v2ec9@guard-macro (if (memv v3e95@t '(define-enumeration)) v2ecb@define-enumeration-macro (if (memv v3e95@t '(trace-lambda)) v2ebd@trace-lambda-macro (if (memv v3e95@t '(trace-define)) v2ebf@trace-define-macro (if (memv v3e95@t '(trace-define-syntax)) v2ec1@trace-define-syntax-macro (if (memv v3e95@t '(trace-let-syntax)) v2ec5@trace-let-syntax-macro (if (memv v3e95@t '(trace-letrec-syntax)) v2ec7@trace-letrec-syntax-macro (if (memv v3e95@t '(define-condition-type)) v2ef1@define-condition-type-macro (if (memv v3e95@t '(parameterize)) v2ef5@parameterize-macro (if (memv v3e95@t '(include-into)) v2ee5@include-into-macro (if (memv v3e95@t '(eol-style)) (lambda (v3e97@x) (v2f0b@symbol-macro v3e97@x '(none lf cr crlf nel crnel ls))) (if (memv v3e95@t '(error-handling-mode)) (lambda (v3e99@x) (v2f0b@symbol-macro v3e99@x '(ignore raise replace))) (if (memv v3e95@t '(buffer-mode)) (lambda (v3e9b@x) (v2f0b@symbol-macro v3e9b@x '(none line block))) (if (memv v3e95@t '(file-options)) v2c63@file-options-macro (if (memv v3e95@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) v2ef3@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" v3e93@x)))))))))))))))))))))))))))))))))))))))) v3e93@x) (error 'core-macro-transformer '"BUG: invalid macro" v3e93@x))))) (set! v2f0f@local-macro-transformer (lambda (v3e9d@x) (car v3e9d@x))) (set! v2f11@do-macro-call (lambda (v3e9f@transformer v3ea0@expr) ((lambda (v3ea3@out) (begin ((letrec ((v3ea5@f (lambda (v3ea7@x) (if (not (v2cb8@stx? v3ea7@x)) (if (pair? v3ea7@x) (begin (v3ea5@f (car v3ea7@x)) (v3ea5@f (cdr v3ea7@x))) (if (vector? v3ea7@x) (vector-for-each v3ea5@f v3ea7@x) (if (symbol? v3ea7@x) (v2fe4@syntax-violation '#f '"raw symbol encountered in output of macro" v3ea0@expr v3ea7@x) (void)))) (void))))) v3ea5@f) v3ea3@out) (v2cda@add-mark (v2cd0@gen-mark) v3ea3@out v3ea0@expr))) (v3e9f@transformer (v2cda@add-mark v2cd2@anti-mark v3ea0@expr '#f))))) (set! v2f13@chi-macro (lambda (v3ea9@p v3eaa@e) (v2f11@do-macro-call (v2f0d@macro-transformer v3ea9@p) v3eaa@e))) (set! v2f15@chi-local-macro (lambda (v3ead@p v3eae@e) (v2f11@do-macro-call (v2f0f@local-macro-transformer v3ead@p) v3eae@e))) (set! v2f17@chi-global-macro (lambda (v3eb1@p v3eb2@e) ((lambda (v3eb5@lib v3eb6@loc) (begin (v2b15@v29b7@visit-library v3eb5@lib) ((lambda (v3eb9@x) ((lambda (v3ebb@transformer) (v2f11@do-macro-call v3ebb@transformer v3eb2@e)) (if (procedure? v3eb9@x) v3eb9@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" v3eb9@x)))) (symbol-value v3eb6@loc)))) (car v3eb1@p) (cdr v3eb1@p)))) (set! v2f19@chi-expr* (lambda (v3ebd@e* v3ebe@r v3ebf@mr) (if (null? v3ebd@e*) '() ((lambda (v3ec3@e) (cons v3ec3@e (v2f19@chi-expr* (cdr v3ebd@e*) v3ebe@r v3ebf@mr))) (v2f1d@chi-expr (car v3ebd@e*) v3ebe@r v3ebf@mr))))) (set! v2f1b@chi-application (lambda (v3ec5@e v3ec6@r v3ec7@mr) ((lambda (v3ecb@t) ((lambda (v3ecd@ls/false) (if v3ecd@ls/false (apply (lambda (v3ecf@rator v3ed0@rands) ((lambda (v3ed3@rator) (cons v3ed3@rator (v2f19@chi-expr* v3ed0@rands v3ec6@r v3ec7@mr))) (v2f1d@chi-expr v3ecf@rator v3ec6@r v3ec7@mr))) v3ecd@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3ecb@t))) (v2efb@syntax-dispatch v3ecb@t '(any . each-any)))) v3ec5@e))) (set! v2f1d@chi-expr (lambda (v3ed5@e v3ed6@r v3ed7@mr) (call-with-values (lambda () (v2d18@syntax-type v3ed5@e v3ed6@r)) (lambda (v3ee1@v3edc v3ee2@v3ede v3ee3@v3ee0) ((lambda (v3ee7@kwd v3ee8@value v3ee9@type) ((lambda (v3eed@t) (if (memv v3eed@t '(core-macro)) ((lambda (v3eef@transformer) (v3eef@transformer v3ed5@e v3ed6@r v3ed7@mr)) (v2f09@core-macro-transformer v3ee8@value)) (if (memv v3eed@t '(global)) ((lambda (v3ef1@lib) ((lambda (v3ef3@loc) ((lambda () (begin ((v2f66@inv-collector) v3ef1@lib) v3ef3@loc)))) (cdr v3ee8@value))) (car v3ee8@value)) (if (memv v3eed@t '(core-prim)) ((lambda (v3ef5@name) (list 'primitive v3ef5@name)) v3ee8@value) (if (memv v3eed@t '(call)) (v2f1b@chi-application v3ed5@e v3ed6@r v3ed7@mr) (if (memv v3eed@t '(lexical)) ((lambda (v3ef7@lex) v3ef7@lex) (v2e87@lexical-var v3ee8@value)) (if (memv v3eed@t '(global-macro global-macro!)) (v2f1d@chi-expr (v2f17@chi-global-macro v3ee8@value v3ed5@e) v3ed6@r v3ed7@mr) (if (memv v3eed@t '(local-macro local-macro!)) (v2f1d@chi-expr (v2f15@chi-local-macro v3ee8@value v3ed5@e) v3ed6@r v3ed7@mr) (if (memv v3eed@t '(macro macro!)) (v2f1d@chi-expr (v2f13@chi-macro v3ee8@value v3ed5@e) v3ed6@r v3ed7@mr) (if (memv v3eed@t '(constant)) ((lambda (v3ef9@datum) (list 'quote v3ef9@datum)) v3ee8@value) (if (memv v3eed@t '(set!)) (v2f1f@chi-set! v3ed5@e v3ed6@r v3ed7@mr) (if (memv v3eed@t '(begin)) ((lambda (v3efb@t) ((lambda (v3efd@ls/false) (if v3efd@ls/false (apply (lambda (v3eff@x v3f00@x*) (v2c4f@v2bbe@build-sequence '#f (v2f19@chi-expr* (cons v3eff@x v3f00@x*) v3ed6@r v3ed7@mr))) v3efd@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3efb@t))) (v2efb@syntax-dispatch v3efb@t '(_ any . each-any)))) v3ed5@e) (if (memv v3eed@t '(let-syntax letrec-syntax)) ((lambda (v3f03@t) ((lambda (v3f05@ls/false) (if (and v3f05@ls/false (apply (lambda (v3f07@xlhs* v3f08@xrhs* v3f09@xbody v3f0a@xbody*) (if (not (v2cfa@valid-bound-ids? v3f07@xlhs*)) (v2fe4@syntax-violation '#f '"invalid identifiers" v3ed5@e) (void))) v3f05@ls/false)) (apply (lambda (v3f0f@xlhs* v3f10@xrhs* v3f11@xbody v3f12@xbody*) ((lambda (v3f17@xlab*) ((lambda (v3f19@xrib) ((lambda (v3f1b@xb*) ((lambda () (v2c4f@v2bbe@build-sequence '#f (v2f19@chi-expr* (map (lambda (v3f1d@x) (v2cdc@add-subst v3f19@xrib v3f1d@x)) (cons v3f11@xbody v3f12@xbody*)) (append (map cons v3f17@xlab* v3f1b@xb*) v3ed6@r) (append (map cons v3f17@xlab* v3f1b@xb*) v3ed7@mr)))))) (map (lambda (v3f1f@x) (v2d2e@make-eval-transformer (v2f58@expand-transformer (if (eq? v3ee9@type 'let-syntax) v3f1f@x (v2cdc@add-subst v3f19@xrib v3f1f@x)) v3ed7@mr))) v3f10@xrhs*))) (v2cab@make-full-rib v3f0f@xlhs* v3f17@xlab*))) (map v2c74@gen-label v3f0f@xlhs*))) v3f05@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3f03@t))) (v2efb@syntax-dispatch v3f03@t '(_ #(each (any any)) any . each-any)))) v3ed5@e) (if (memv v3eed@t '(displaced-lexical)) (v2fe4@syntax-violation '#f '"identifier out of context" v3ed5@e) (if (memv v3eed@t '(syntax)) (v2fe4@syntax-violation '#f '"reference to pattern variable outside a syntax form" v3ed5@e) (if (memv v3eed@t '(define define-syntax module import library)) (v2fe4@syntax-violation '#f (string-append ((lambda (v3f21@t) (if (memv v3f21@t '(define)) '"a definition" (if (memv v3f21@t '(define-syntax)) '"a define-syntax" (if (memv v3f21@t '(module)) '"a module definition" (if (memv v3f21@t '(library)) '"a library definition" (if (memv v3f21@t '(import)) '"an import declaration" (if (memv v3f21@t '(export)) '"an export declaration" '"a non-expression"))))))) v3ee9@type) '" was found where an expression was expected") v3ed5@e) (if (memv v3eed@t '(mutable)) (v2fe4@syntax-violation '#f '"attempt to reference an unexportable variable" v3ed5@e) (v2fe4@syntax-violation '#f '"invalid expression" v3ed5@e)))))))))))))))))) v3ee9@type)) v3ee3@v3ee0 v3ee2@v3ede v3ee1@v3edc))))) (set! v2f1f@chi-set! (lambda (v3f23@e v3f24@r v3f25@mr) ((lambda (v3f29@t) ((lambda (v3f2b@ls/false) (if (and v3f2b@ls/false (apply (lambda (v3f2d@x v3f2e@v) (v2cf0@id? v3f2d@x)) v3f2b@ls/false)) (apply (lambda (v3f31@x v3f32@v) (call-with-values (lambda () (v2d18@syntax-type v3f31@x v3f24@r)) (lambda (v3f3b@v3f36 v3f3c@v3f38 v3f3d@v3f3a) ((lambda (v3f41@kwd v3f42@value v3f43@type) ((lambda (v3f47@t) (if (memv v3f47@t '(lexical)) (begin (v2e8b@set-lexical-mutable! v3f42@value '#t) (list 'set! (v2e87@lexical-var v3f42@value) (v2f1d@chi-expr v3f32@v v3f24@r v3f25@mr))) (if (memv v3f47@t '(core-prim)) (v2fe4@syntax-violation '#f '"cannot modify imported core primitive" v3f23@e) (if (memv v3f47@t '(global)) (v2fe4@syntax-violation '#f '"attempt to modify imported binding" v3f23@e) (if (memv v3f47@t '(global-macro!)) (v2f1d@chi-expr (v2f17@chi-global-macro v3f42@value v3f23@e) v3f24@r v3f25@mr) (if (memv v3f47@t '(local-macro!)) (v2f1d@chi-expr (v2f15@chi-local-macro v3f42@value v3f23@e) v3f24@r v3f25@mr) (if (memv v3f47@t '(mutable)) (v2fe4@syntax-violation '#f '"attempt to assign to an unexportable variable" v3f23@e) (v2fe4@syntax-violation '#f '"invalid syntax" v3f23@e)))))))) v3f43@type)) v3f3d@v3f3a v3f3c@v3f38 v3f3b@v3f36)))) v3f2b@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3f29@t))) (v2efb@syntax-dispatch v3f29@t '(_ any any)))) v3f23@e))) (set! v2f21@verify-formals (lambda (v3f49@fmls v3f4a@stx) ((lambda (v3f4d@t) ((lambda (v3f4f@ls/false) (if v3f4f@ls/false (apply (lambda (v3f51@x*) (if (not (v2cfa@valid-bound-ids? v3f51@x*)) (v2eb5@invalid-fmls-error v3f4a@stx v3f49@fmls) (void))) v3f4f@ls/false) ((lambda (v3f53@t) ((lambda (v3f55@ls/false) (if v3f55@ls/false (apply (lambda (v3f57@x* v3f58@x) (if (not (v2cfa@valid-bound-ids? (cons v3f58@x v3f57@x*))) (v2eb5@invalid-fmls-error v3f4a@stx v3f49@fmls) (void))) v3f55@ls/false) ((lambda (v3f5b@t) ((lambda (v3f5d@ls/false) (if v3f5d@ls/false (apply (lambda () (v2fe4@syntax-violation '#f '"invalid syntax" v3f4a@stx)) v3f5d@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3f5b@t))) (v2efb@syntax-dispatch v3f5b@t '_))) v3f53@t))) (v2efb@syntax-dispatch v3f53@t '#(each+ any () any)))) v3f4d@t))) (v2efb@syntax-dispatch v3f4d@t 'each-any))) v3f49@fmls))) (set! v2f23@chi-lambda-clause (lambda (v3f5f@stx v3f60@fmls v3f61@body* v3f62@r v3f63@mr) ((lambda (v3f69@t) ((lambda (v3f6b@ls/false) (if v3f6b@ls/false (apply (lambda (v3f6d@x*) (begin (v2f21@verify-formals v3f60@fmls v3f5f@stx) ((lambda (v3f6f@lex* v3f70@lab*) (values v3f6f@lex* (v2f33@chi-internal (v2cdc@add-subst (v2cab@make-full-rib v3f6d@x* v3f70@lab*) v3f61@body*) (v2e8f@add-lexicals v3f70@lab* v3f6f@lex* v3f62@r) v3f63@mr))) (map v2c70@gen-lexical v3f6d@x*) (map v2c74@gen-label v3f6d@x*)))) v3f6b@ls/false) ((lambda (v3f73@t) ((lambda (v3f75@ls/false) (if v3f75@ls/false (apply (lambda (v3f77@x* v3f78@x) (begin (v2f21@verify-formals v3f60@fmls v3f5f@stx) ((lambda (v3f7b@lex* v3f7c@lab* v3f7d@lex v3f7e@lab) (values (append v3f7b@lex* v3f7d@lex) (v2f33@chi-internal (v2cdc@add-subst (v2cab@make-full-rib (cons v3f78@x v3f77@x*) (cons v3f7e@lab v3f7c@lab*)) v3f61@body*) (v2e8f@add-lexicals (cons v3f7e@lab v3f7c@lab*) (cons v3f7d@lex v3f7b@lex*) v3f62@r) v3f63@mr))) (map v2c70@gen-lexical v3f77@x*) (map v2c74@gen-label v3f77@x*) (v2c70@gen-lexical v3f78@x) (v2c74@gen-label v3f78@x)))) v3f75@ls/false) ((lambda (v3f83@t) ((lambda (v3f85@ls/false) (if v3f85@ls/false (apply (lambda () (v2fe4@syntax-violation '#f '"invalid syntax" v3f60@fmls)) v3f85@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v3f83@t))) (v2efb@syntax-dispatch v3f83@t '_))) v3f73@t))) (v2efb@syntax-dispatch v3f73@t '#(each+ any () any)))) v3f69@t))) (v2efb@syntax-dispatch v3f69@t 'each-any))) v3f60@fmls))) (set! v2f25@chi-lambda-clause* (lambda (v3f87@stx v3f88@fmls* v3f89@body** v3f8a@r v3f8b@mr) (if (null? v3f88@fmls*) (values '() '()) (call-with-values (lambda () (v2f23@chi-lambda-clause v3f87@stx (car v3f88@fmls*) (car v3f89@body**) v3f8a@r v3f8b@mr)) (lambda (v3f95@v3f92 v3f96@v3f94) ((lambda (v3f99@b v3f9a@a) (call-with-values (lambda () (v2f25@chi-lambda-clause* v3f87@stx (cdr v3f88@fmls*) (cdr v3f89@body**) v3f8a@r v3f8b@mr)) (lambda (v3fa1@v3f9e v3fa2@v3fa0) ((lambda (v3fa5@b* v3fa6@a*) (values (cons v3f9a@a v3fa6@a*) (cons v3f99@b v3fa5@b*))) v3fa2@v3fa0 v3fa1@v3f9e)))) v3f96@v3f94 v3f95@v3f92)))))) (set! v2f27@chi-defun (lambda (v3fa9@x v3faa@r v3fab@mr) ((lambda (v3faf@fmls v3fb0@body*) (call-with-values (lambda () (v2f23@chi-lambda-clause v3faf@fmls v3faf@fmls v3fb0@body* v3faa@r v3fab@mr)) (lambda (v3fb7@v3fb4 v3fb8@v3fb6) ((lambda (v3fbb@body v3fbc@fmls) (v2c4c@v2b8c@build-lambda '#f v3fbc@fmls v3fbb@body)) v3fb8@v3fb6 v3fb7@v3fb4)))) (car v3fa9@x) (cdr v3fa9@x)))) (set! v2f29@chi-rhs (lambda (v3fbf@rhs v3fc0@r v3fc1@mr) ((lambda (v3fc5@t) (if (memv v3fc5@t '(defun)) (v2f27@chi-defun (cdr v3fbf@rhs) v3fc0@r v3fc1@mr) (if (memv v3fc5@t '(expr)) ((lambda (v3fc7@expr) (v2f1d@chi-expr v3fc7@expr v3fc0@r v3fc1@mr)) (cdr v3fbf@rhs)) (if (memv v3fc5@t '(top-expr)) ((lambda (v3fc9@expr) (v2c4f@v2bbe@build-sequence '#f (list (v2f1d@chi-expr v3fc9@expr v3fc0@r v3fc1@mr) (v2c50@v2bc0@build-void)))) (cdr v3fbf@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" v3fbf@rhs))))) (car v3fbf@rhs)))) (set! v2f2b@expand-interaction-rhs*/init* (lambda (v3fcb@lhs* v3fcc@rhs* v3fcd@init* v3fce@r v3fcf@mr) ((letrec ((v3fd5@f (lambda (v3fd7@lhs* v3fd8@rhs*) (if (null? v3fd7@lhs*) (map (lambda (v3fdb@x) (v2f1d@chi-expr v3fdb@x v3fce@r v3fcf@mr)) v3fcd@init*) ((lambda (v3fdd@lhs v3fde@rhs) ((lambda (v3fe1@t) (if (memv v3fe1@t '(defun)) ((lambda (v3fe3@rhs) (cons (list 'set! v3fdd@lhs v3fe3@rhs) (v3fd5@f (cdr v3fd7@lhs*) (cdr v3fd8@rhs*)))) (v2f27@chi-defun (cdr v3fde@rhs) v3fce@r v3fcf@mr)) (if (memv v3fe1@t '(expr)) ((lambda (v3fe5@rhs) (cons (list 'set! v3fdd@lhs v3fe5@rhs) (v3fd5@f (cdr v3fd7@lhs*) (cdr v3fd8@rhs*)))) (v2f1d@chi-expr (cdr v3fde@rhs) v3fce@r v3fcf@mr)) (if (memv v3fe1@t '(top-expr)) ((lambda (v3fe7@e) (cons v3fe7@e (v3fd5@f (cdr v3fd7@lhs*) (cdr v3fd8@rhs*)))) (v2f1d@chi-expr (cdr v3fde@rhs) v3fce@r v3fcf@mr)) (error 'expand-interaction '"invallid" v3fde@rhs))))) (car v3fde@rhs))) (car v3fd7@lhs*) (car v3fd8@rhs*)))))) v3fd5@f) v3fcb@lhs* v3fcc@rhs*))) (set! v2f2d@chi-rhs* (lambda (v3fe9@rhs* v3fea@r v3feb@mr) ((letrec ((v3fef@f (lambda (v3ff1@ls) (if (null? v3ff1@ls) '() ((lambda (v3ff3@a) (cons v3ff3@a (v3fef@f (cdr v3ff1@ls)))) (v2f29@chi-rhs (car v3ff1@ls) v3fea@r v3feb@mr)))))) v3fef@f) v3fe9@rhs*))) (set! v2f2f@find-bound=? (lambda (v3ff5@x v3ff6@lhs* v3ff7@rhs*) (if (null? v3ff6@lhs*) '#f (if (v2cf6@bound-id=? v3ff5@x (car v3ff6@lhs*)) (car v3ff7@rhs*) (v2f2f@find-bound=? v3ff5@x (cdr v3ff6@lhs*) (cdr v3ff7@rhs*)))))) (set! v2f31@find-dups (lambda (v3ffb@ls) ((letrec ((v3ffd@f (lambda (v3fff@ls v4000@dups) (if (null? v3fff@ls) v4000@dups ((lambda (v4003@t) (if v4003@t ((lambda (v4005@x) (v3ffd@f (cdr v3fff@ls) (cons (list (car v3fff@ls) v4005@x) v4000@dups))) v4003@t) (v3ffd@f (cdr v3fff@ls) v4000@dups))) (v2f2f@find-bound=? (car v3fff@ls) (cdr v3fff@ls) (cdr v3fff@ls))))))) v3ffd@f) v3ffb@ls '()))) (set! v2f33@chi-internal (lambda (v4007@e* v4008@r v4009@mr) ((lambda (v400d@rib) (call-with-values (lambda () (v2f56@chi-body* (map (lambda (v401f@x) (v2cdc@add-subst v400d@rib v401f@x)) (v2cee@syntax->list v4007@e*)) v4008@r v4009@mr '() '() '() '() '() v400d@rib '#f)) (lambda (v4021@v4010 v4022@v4012 v4023@v4014 v4024@v4016 v4025@v4018 v4026@v401a v4027@v401c v4028@v401e) ((lambda (v4031@_exp* v4032@kwd* v4033@mod** v4034@rhs* v4035@lex* v4036@mr v4037@r v4038@e*) (begin (if (null? v4038@e*) (v2fe4@syntax-violation '#f '"no expression in body" v4038@e*) (void)) ((lambda (v4041@init*) ((lambda (v4043@rhs*) ((lambda () (v2c52@v2bc4@build-letrec* '#f (reverse v4035@lex*) (reverse v4043@rhs*) (v2c4f@v2bbe@build-sequence '#f v4041@init*))))) (v2f2d@chi-rhs* v4034@rhs* v4037@r v4036@mr))) (v2f19@chi-expr* (append (apply append (reverse v4033@mod**)) v4038@e*) v4037@r v4036@mr)))) v4028@v401e v4027@v401c v4026@v401a v4025@v4018 v4024@v4016 v4023@v4014 v4022@v4012 v4021@v4010)))) (v2c9f@make-empty-rib)))) (set! v2f35@parse-module (lambda (v4045@e) ((lambda (v4047@t) ((lambda (v4049@ls/false) (if v4049@ls/false (apply (lambda (v404b@export* v404c@b*) (begin (if (not (for-all v2cf0@id? v404b@export*)) (v2fe4@syntax-violation '#f '"module exports must be identifiers" v4045@e) (void)) (values '#f (list->vector v404b@export*) v404c@b*))) v4049@ls/false) ((lambda (v404f@t) ((lambda (v4051@ls/false) (if v4051@ls/false (apply (lambda (v4053@name v4054@export* v4055@b*) (begin (if (not (v2cf0@id? v4053@name)) (v2fe4@syntax-violation '#f '"module name must be an identifier" v4045@e) (void)) (if (not (for-all v2cf0@id? v4054@export*)) (v2fe4@syntax-violation '#f '"module exports must be identifiers" v4045@e) (void)) (values v4053@name (list->vector v4054@export*) v4055@b*))) v4051@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v404f@t))) (v2efb@syntax-dispatch v404f@t '(_ any each-any . each-any)))) v4047@t))) (v2efb@syntax-dispatch v4047@t '(_ each-any . each-any)))) v4045@e))) (set! v2f3b@v2f36 (make-record-type-descriptor 'module-interface '#f 'v2f39 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! v2f3d@v2f38 '#f) (set! v2f3f@v2f37 (make-record-constructor-descriptor v2f3b@v2f36 '#f v2f3d@v2f38)) (set! v2f42@module-interface? (record-predicate v2f3b@v2f36)) (set! v2f44@make-module-interface (record-constructor v2f3f@v2f37)) (set! v2f46@module-interface-first-mark (record-accessor v2f3b@v2f36 '0)) (set! v2f48@module-interface-exp-id-vec (record-accessor v2f3b@v2f36 '1)) (set! v2f4a@module-interface-exp-lab-vec (record-accessor v2f3b@v2f36 '2)) (set! v2f4c@set-module-interface-first-mark! (record-mutator v2f3b@v2f36 '0)) (set! v2f4e@set-module-interface-exp-id-vec! (record-mutator v2f3b@v2f36 '1)) (set! v2f50@set-module-interface-exp-lab-vec! (record-mutator v2f3b@v2f36 '2)) (set! v2f52@module-interface-exp-id* (lambda (v4059@iface v405a@id) ((lambda (v405e@diff-marks) (begin (set! v405e@diff-marks (lambda (v4065@ls v4066@x) (begin (if (null? v4065@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (v4069@a) (if (eq? v4069@a v4066@x) '() (cons v4069@a (v405e@diff-marks (cdr v4065@ls) v4066@x)))) (car v4065@ls))))) ((lambda (v405f@diff v4060@id-vec) (if (null? v405f@diff) v4060@id-vec (vector-map (lambda (v4063@x) (v2cba@make-stx (v2cbc@stx-expr v4063@x) (append v405f@diff (v2cbe@stx-mark* v4063@x)) '() '())) v4060@id-vec))) (v405e@diff-marks (v2cbe@stx-mark* v405a@id) (v2f46@module-interface-first-mark v4059@iface)) (v2f48@module-interface-exp-id-vec v4059@iface)))) '#f))) (set! v2f54@chi-internal-module (lambda (v406b@e v406c@r v406d@mr v406e@lex* v406f@rhs* v4070@mod** v4071@kwd*) (call-with-values (lambda () (v2f35@parse-module v406b@e)) (lambda (v407f@v407a v4080@v407c v4081@v407e) ((lambda (v4085@e* v4086@exp-id* v4087@name) ((lambda (v408b@rib) ((lambda (v408d@e*) ((lambda () (call-with-values (lambda () (v2f56@chi-body* v408d@e* v406c@r v406d@mr v406e@lex* v406f@rhs* v4070@mod** v4071@kwd* '() v408b@rib '#f)) (lambda (v409f@v4090 v40a0@v4092 v40a1@v4094 v40a2@v4096 v40a3@v4098 v40a4@v409a v40a5@v409c v40a6@v409e) ((lambda (v40af@_exp* v40b0@kwd* v40b1@mod** v40b2@rhs* v40b3@lex* v40b4@mr v40b5@r v40b6@e*) ((lambda (v40bf@exp-lab* v40c0@mod**) (if (not v4087@name) (values v40b3@lex* v40b2@rhs* v4086@exp-id* v40bf@exp-lab* v40b5@r v40b4@mr v40c0@mod** v40b0@kwd*) ((lambda (v40c3@lab v40c4@iface) (values v40b3@lex* v40b2@rhs* (vector v4087@name) (vector v40c3@lab) (cons (cons v40c3@lab (cons '$module v40c4@iface)) v40b5@r) (cons (cons v40c3@lab (cons '$module v40c4@iface)) v40b4@mr) v40c0@mod** v40b0@kwd*)) (v2c74@gen-label 'module) (v2f44@make-module-interface (car (v2cbe@stx-mark* v4087@name)) (vector-map (lambda (v40c7@x) (v2cba@make-stx (v2cbc@stx-expr v40c7@x) (v2cbe@stx-mark* v40c7@x) '() '())) v4086@exp-id*) v40bf@exp-lab*)))) (vector-map (lambda (v40c9@x) (or (v2d0a@id->label (v2cba@make-stx (v2cf2@id->sym v40c9@x) (v2cbe@stx-mark* v40c9@x) (list v408b@rib) '())) (v2fe4@syntax-violation '#f '"cannot find module export" v40c9@x))) v4086@exp-id*) (cons v40b6@e* v40b1@mod**))) v40a6@v409e v40a5@v409c v40a4@v409a v40a3@v4098 v40a2@v4096 v40a1@v4094 v40a0@v4092 v409f@v4090)))))) (map (lambda (v40cb@x) (v2cdc@add-subst v408b@rib v40cb@x)) (v2cee@syntax->list v4085@e*)))) (v2c9f@make-empty-rib))) v4081@v407e v4080@v407c v407f@v407a))))) (set! v2f56@chi-body* (lambda (v40cd@e* v40ce@r v40cf@mr v40d0@lex* v40d1@rhs* v40d2@mod** v40d3@kwd* v40d4@exp* v40d5@rib v40d6@top?) (if (null? v40cd@e*) (values v40cd@e* v40ce@r v40cf@mr v40d0@lex* v40d1@rhs* v40d2@mod** v40d3@kwd* v40d4@exp*) ((lambda (v40e1@e) (call-with-values (lambda () (v2d18@syntax-type v40e1@e v40ce@r)) (lambda (v40e9@v40e4 v40ea@v40e6 v40eb@v40e8) ((lambda (v40ef@kwd v40f0@value v40f1@type) ((lambda (v40f5@kwd*) ((lambda (v40f7@t) (if (memv v40f7@t '(define)) (call-with-values (lambda () (v2e7f@parse-define v40e1@e)) (lambda (v40fd@v40fa v40fe@v40fc) ((lambda (v4101@rhs v4102@id) (begin (if (v2cfe@bound-id-member? v4102@id v40f5@kwd*) (v2fe4@syntax-violation '#f '"cannot redefine keyword" v40e1@e) (void)) (call-with-values (lambda () (v2c78@gen-define-label+loc v4102@id v40d5@rib)) (lambda (v4109@v4106 v410a@v4108) ((lambda (v410d@lex v410e@lab) (begin (v2ca1@extend-rib! v40d5@rib v4102@id v410e@lab) (v2f56@chi-body* (cdr v40cd@e*) (v2e8d@add-lexical v410e@lab v410d@lex v40ce@r) v40cf@mr (cons v410d@lex v40d0@lex*) (cons v4101@rhs v40d1@rhs*) v40d2@mod** v40f5@kwd* v40d4@exp* v40d5@rib v40d6@top?))) v410a@v4108 v4109@v4106))))) v40fe@v40fc v40fd@v40fa))) (if (memv v40f7@t '(define-syntax)) (call-with-values (lambda () (v2e81@parse-define-syntax v40e1@e)) (lambda (v4115@v4112 v4116@v4114) ((lambda (v4119@rhs v411a@id) (begin (if (v2cfe@bound-id-member? v411a@id v40f5@kwd*) (v2fe4@syntax-violation '#f '"cannot redefine keyword" v40e1@e) (void)) ((lambda (v411d@lab v411e@expanded-rhs) (begin (v2ca1@extend-rib! v40d5@rib v411a@id v411d@lab) ((lambda (v4121@b) (v2f56@chi-body* (cdr v40cd@e*) (cons (cons v411d@lab v4121@b) v40ce@r) (cons (cons v411d@lab v4121@b) v40cf@mr) v40d0@lex* v40d1@rhs* v40d2@mod** v40f5@kwd* v40d4@exp* v40d5@rib v40d6@top?)) (v2d2e@make-eval-transformer v411e@expanded-rhs)))) (v2c7a@gen-define-label v411a@id v40d5@rib) (v2f58@expand-transformer v4119@rhs v40cf@mr)))) v4116@v4114 v4115@v4112))) (if (memv v40f7@t '(let-syntax letrec-syntax)) ((lambda (v4123@t) ((lambda (v4125@ls/false) (if (and v4125@ls/false (apply (lambda (v4127@xlhs* v4128@xrhs* v4129@xbody*) (if (not (v2cfa@valid-bound-ids? v4127@xlhs*)) (v2fe4@syntax-violation '#f '"invalid identifiers" v40e1@e) (void))) v4125@ls/false)) (apply (lambda (v412d@xlhs* v412e@xrhs* v412f@xbody*) ((lambda (v4133@xlab*) ((lambda (v4135@xrib) ((lambda (v4137@xb*) ((lambda () (v2f56@chi-body* (append (map (lambda (v4139@x) (v2cdc@add-subst v4135@xrib v4139@x)) v412f@xbody*) (cdr v40cd@e*)) (append (map cons v4133@xlab* v4137@xb*) v40ce@r) (append (map cons v4133@xlab* v4137@xb*) v40cf@mr) v40d0@lex* v40d1@rhs* v40d2@mod** v40f5@kwd* v40d4@exp* v40d5@rib v40d6@top?)))) (map (lambda (v413b@x) (v2d2e@make-eval-transformer (v2f58@expand-transformer (if (eq? v40f1@type 'let-syntax) v413b@x (v2cdc@add-subst v4135@xrib v413b@x)) v40cf@mr))) v412e@xrhs*))) (v2cab@make-full-rib v412d@xlhs* v4133@xlab*))) (map v2c74@gen-label v412d@xlhs*))) v4125@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v4123@t))) (v2efb@syntax-dispatch v4123@t '(_ #(each (any any)) . each-any)))) v40e1@e) (if (memv v40f7@t '(begin)) ((lambda (v413d@t) ((lambda (v413f@ls/false) (if v413f@ls/false (apply (lambda (v4141@x*) (v2f56@chi-body* (append v4141@x* (cdr v40cd@e*)) v40ce@r v40cf@mr v40d0@lex* v40d1@rhs* v40d2@mod** v40f5@kwd* v40d4@exp* v40d5@rib v40d6@top?)) v413f@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v413d@t))) (v2efb@syntax-dispatch v413d@t '(_ . each-any)))) v40e1@e) (if (memv v40f7@t '(global-macro global-macro!)) (v2f56@chi-body* (cons (v2cdc@add-subst v40d5@rib (v2f17@chi-global-macro v40f0@value v40e1@e)) (cdr v40cd@e*)) v40ce@r v40cf@mr v40d0@lex* v40d1@rhs* v40d2@mod** v40f5@kwd* v40d4@exp* v40d5@rib v40d6@top?) (if (memv v40f7@t '(local-macro local-macro!)) (v2f56@chi-body* (cons (v2cdc@add-subst v40d5@rib (v2f15@chi-local-macro v40f0@value v40e1@e)) (cdr v40cd@e*)) v40ce@r v40cf@mr v40d0@lex* v40d1@rhs* v40d2@mod** v40f5@kwd* v40d4@exp* v40d5@rib v40d6@top?) (if (memv v40f7@t '(macro macro!)) (v2f56@chi-body* (cons (v2cdc@add-subst v40d5@rib (v2f13@chi-macro v40f0@value v40e1@e)) (cdr v40cd@e*)) v40ce@r v40cf@mr v40d0@lex* v40d1@rhs* v40d2@mod** v40f5@kwd* v40d4@exp* v40d5@rib v40d6@top?) (if (memv v40f7@t '(module)) (call-with-values (lambda () (v2f54@chi-internal-module v40e1@e v40ce@r v40cf@mr v40d0@lex* v40d1@rhs* v40d2@mod** v40f5@kwd*)) (lambda (v4153@v4144 v4154@v4146 v4155@v4148 v4156@v414a v4157@v414c v4158@v414e v4159@v4150 v415a@v4152) ((lambda (v4163@kwd* v4164@mod** v4165@mr v4166@r v4167@m-exp-lab* v4168@m-exp-id* v4169@rhs* v416a@lex*) (begin (vector-for-each (lambda (v4173@id v4174@lab) (v2ca1@extend-rib! v40d5@rib v4173@id v4174@lab)) v4168@m-exp-id* v4167@m-exp-lab*) (v2f56@chi-body* (cdr v40cd@e*) v4166@r v4165@mr v416a@lex* v4169@rhs* v4164@mod** v4163@kwd* v40d4@exp* v40d5@rib v40d6@top?))) v415a@v4152 v4159@v4150 v4158@v414e v4157@v414c v4156@v414a v4155@v4148 v4154@v4146 v4153@v4144))) (if (memv v40f7@t '(library)) (begin (v2fc6@library-expander (v2d06@stx->datum v40e1@e)) (v2f56@chi-body* (cdr v40cd@e*) v40ce@r v40cf@mr v40d0@lex* v40d1@rhs* v40d2@mod** v40f5@kwd* v40d4@exp* v40d5@rib v40d6@top?)) (if (memv v40f7@t '(export)) ((lambda (v4177@t) ((lambda (v4179@ls/false) (if v4179@ls/false (apply (lambda (v417b@exp-decl*) (v2f56@chi-body* (cdr v40cd@e*) v40ce@r v40cf@mr v40d0@lex* v40d1@rhs* v40d2@mod** v40f5@kwd* (append v417b@exp-decl* v40d4@exp*) v40d5@rib v40d6@top?)) v4179@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v4177@t))) (v2efb@syntax-dispatch v4177@t '(_ . each-any)))) v40e1@e) (if (memv v40f7@t '(import)) ((lambda () ((lambda (v417e@module-import? v4180@module-import v4182@library-import) (begin (set! v417e@module-import? (lambda (v41d1@e) ((lambda (v41d3@t) ((lambda (v41d5@ls/false) (if (and v41d5@ls/false (apply (lambda (v41d7@id) (v2cf0@id? v41d7@id)) v41d5@ls/false)) (apply (lambda (v41d9@id) '#t) v41d5@ls/false) ((lambda (v41db@t) ((lambda (v41dd@ls/false) (if v41dd@ls/false (apply (lambda (v41df@imp*) '#f) v41dd@ls/false) ((lambda (v41e1@t) ((lambda (v41e3@ls/false) (if v41e3@ls/false (apply (lambda () (v2fe4@syntax-violation '#f '"malformed import form" v41d1@e)) v41e3@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v41e1@t))) (v2efb@syntax-dispatch v41e1@t '_))) v41db@t))) (v2efb@syntax-dispatch v41db@t '(_ . each-any)))) v41d3@t))) (v2efb@syntax-dispatch v41d3@t '(_ any)))) v41d1@e))) (set! v4180@module-import (lambda (v41af@e v41b0@r) ((lambda (v41b3@t) ((lambda (v41b5@ls/false) (if (and v41b5@ls/false (apply (lambda (v41b7@id) (v2cf0@id? v41b7@id)) v41b5@ls/false)) (apply (lambda (v41b9@id) (call-with-values (lambda () (v2d18@syntax-type v41b9@id v41b0@r)) (lambda (v41c1@v41bc v41c2@v41be v41c3@v41c0) ((lambda (v41c7@kwd v41c8@value v41c9@type) ((lambda (v41cd@t) (if (memv v41cd@t '($module)) ((lambda (v41cf@iface) (values (v2f52@module-interface-exp-id* v41cf@iface v41b9@id) (v2f4a@module-interface-exp-lab-vec v41cf@iface))) v41c8@value) (v2fe4@syntax-violation '#f '"invalid import" v41af@e))) v41c9@type)) v41c3@v41c0 v41c2@v41be v41c1@v41bc)))) v41b5@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v41b3@t))) (v2efb@syntax-dispatch v41b3@t '(_ any)))) v41af@e))) (set! v4182@library-import (lambda (v4193@e) ((lambda (v4195@t) ((lambda (v4197@ls/false) (if v4197@ls/false (apply (lambda (v4199@ctxt v419a@imp*) (call-with-values (lambda () (v2f60@parse-import-spec* (v2fea@syntax->datum v419a@imp*))) (lambda (v41a1@v419e v41a2@v41a0) ((lambda (v41a5@subst-labels v41a6@subst-names) (values (vector-map (lambda (v41a9@name) (v2cce@datum->stx v4199@ctxt v41a9@name)) v41a6@subst-names) v41a5@subst-labels)) v41a2@v41a0 v41a1@v419e)))) v4197@ls/false) ((lambda (v41ab@t) ((lambda (v41ad@ls/false) (if v41ad@ls/false (apply (lambda () (v2fe4@syntax-violation '#f '"invalid import form" v4193@e)) v41ad@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v41ab@t))) (v2efb@syntax-dispatch v41ab@t '_))) v4195@t))) (v2efb@syntax-dispatch v4195@t '(any . each-any)))) v4193@e))) (begin (call-with-values (lambda () (if (v417e@module-import? v40e1@e) (v4180@module-import v40e1@e v40ce@r) (v4182@library-import v40e1@e))) (lambda (v4187@v4184 v4188@v4186) ((lambda (v418b@lab* v418c@id*) (vector-for-each (lambda (v418f@id v4190@lab) (v2ca1@extend-rib! v40d5@rib v418f@id v4190@lab)) v418c@id* v418b@lab*)) v4188@v4186 v4187@v4184))) (v2f56@chi-body* (cdr v40cd@e*) v40ce@r v40cf@mr v40d0@lex* v40d1@rhs* v40d2@mod** v40f5@kwd* v40d4@exp* v40d5@rib v40d6@top?)))) '#f '#f '#f))) (if v40d6@top? (v2f56@chi-body* (cdr v40cd@e*) v40ce@r v40cf@mr (cons (v2c70@gen-lexical 'dummy) v40d0@lex*) (cons (cons 'top-expr v40e1@e) v40d1@rhs*) v40d2@mod** v40f5@kwd* v40d4@exp* v40d5@rib v40d6@top?) (values v40cd@e* v40ce@r v40cf@mr v40d0@lex* v40d1@rhs* v40d2@mod** v40f5@kwd* v40d4@exp*)))))))))))))) v40f1@type)) (if (v2cf0@id? v40ef@kwd) (cons v40ef@kwd v40d3@kwd*) v40d3@kwd*))) v40eb@v40e8 v40ea@v40e6 v40e9@v40e4)))) (car v40cd@e*))))) (set! v2f58@expand-transformer (lambda (v41e5@expr v41e6@r) ((lambda (v41e9@rtc) ((lambda (v41eb@expanded-rhs) (begin (for-each ((lambda (v41ed@mark-visit) (lambda (v41ef@x) (begin (v2b14@v29b5@invoke-library v41ef@x) (v41ed@mark-visit v41ef@x)))) (v2f68@vis-collector)) (v41e9@rtc)) v41eb@expanded-rhs)) ((lambda (v41f9@v41f2 v41fa@v41f4 v41fb@v41f6 v41fc@v41f8) ((lambda (v4201@swap) (dynamic-wind v4201@swap (lambda () (v2f1d@chi-expr v41e5@expr v41e6@r v41e6@r)) v4201@swap)) (lambda () (begin ((lambda (v4203@t) (begin (v41f9@v41f2 v41fb@v41f6) (set! v41fb@v41f6 v4203@t))) (v41f9@v41f2)) ((lambda (v4205@t) (begin (v41fa@v41f4 v41fc@v41f8) (set! v41fc@v41f8 v4205@t))) (v41fa@v41f4)))))) v2f66@inv-collector v2f68@vis-collector v41e9@rtc (lambda (v4207@x) (values))))) (v2f64@make-collector)))) (set! v2f5a@parse-exports (lambda (v4209@exp*) ((letrec ((v420b@f (lambda (v420d@exp* v420e@int* v420f@ext*) (if (null? v420d@exp*) (begin (if (not (v2cfa@valid-bound-ids? v420f@ext*)) (v2fe4@syntax-violation 'export '"invalid exports" (v2f31@find-dups v420f@ext*)) (void)) (values (map v2fea@syntax->datum v420f@ext*) v420e@int*)) ((lambda (v4213@t) ((lambda (v4215@ls/false) (if v4215@ls/false (apply (lambda (v4217@rename v4218@i* v4219@e*) (begin (if (not (and (eq? (v2fea@syntax->datum v4217@rename) 'rename) (for-all v2cf0@id? v4218@i*) (for-all v2cf0@id? v4219@e*))) (v2fe4@syntax-violation 'export '"invalid export specifier" (car v420d@exp*)) (void)) (v420b@f (cdr v420d@exp*) (append v4218@i* v420e@int*) (append v4219@e* v420f@ext*)))) v4215@ls/false) ((lambda (v421d@t) ((lambda (v421f@ls/false) (if v421f@ls/false (apply (lambda (v4221@ie) (begin (if (not (v2cf0@id? v4221@ie)) (v2fe4@syntax-violation 'export '"invalid export" v4221@ie) (void)) (v420b@f (cdr v420d@exp*) (cons v4221@ie v420e@int*) (cons v4221@ie v420f@ext*)))) v421f@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v421d@t))) (v2efb@syntax-dispatch v421d@t 'any))) v4213@t))) (v2efb@syntax-dispatch v4213@t '(any . #(each (any any)))))) (car v420d@exp*)))))) v420b@f) v4209@exp* '() '()))) (set! v2f5c@parse-library-name (lambda (v4223@spec) ((lambda (v4226@parse) (begin (set! v4226@parse (lambda (v4233@x) ((lambda (v4235@t) ((lambda (v4237@ls/false) (if (and v4237@ls/false (apply (lambda (v4239@v*) (for-all (lambda (v423b@x) ((lambda (v423d@x) (and (integer? v423d@x) (exact? v423d@x))) (v2fea@syntax->datum v423b@x))) v4239@v*)) v4237@ls/false)) (apply (lambda (v423f@v*) (values '() (map v2fea@syntax->datum v423f@v*))) v4237@ls/false) ((lambda (v4241@t) ((lambda (v4243@ls/false) (if (and v4243@ls/false (apply (lambda (v4245@x v4246@rest) (symbol? (v2fea@syntax->datum v4245@x))) v4243@ls/false)) (apply (lambda (v4249@x v424a@rest) (call-with-values (lambda () (v4226@parse v424a@rest)) (lambda (v4251@v424e v4252@v4250) ((lambda (v4255@v* v4256@x*) (values (cons (v2fea@syntax->datum v4249@x) v4256@x*) v4255@v*)) v4252@v4250 v4251@v424e)))) v4243@ls/false) ((lambda (v4259@t) ((lambda (v425b@ls/false) (if v425b@ls/false (apply (lambda () (values '() '())) v425b@ls/false) ((lambda (v425d@t) ((lambda (v425f@ls/false) (if v425f@ls/false (apply (lambda () (v2fe4@syntax-violation '#f '"invalid library name" v4223@spec)) v425f@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v425d@t))) (v2efb@syntax-dispatch v425d@t '_))) v4259@t))) (v2efb@syntax-dispatch v4259@t '()))) v4241@t))) (v2efb@syntax-dispatch v4241@t '(any . any)))) v4235@t))) (v2efb@syntax-dispatch v4235@t '(each-any)))) v4233@x))) (call-with-values (lambda () (v4226@parse v4223@spec)) (lambda (v422b@v4228 v422c@v422a) ((lambda (v422f@ver* v4230@name*) (begin (if (null? v4230@name*) (v2fe4@syntax-violation '#f '"empty library name" v4223@spec) (void)) (values v4230@name* v422f@ver*))) v422c@v422a v422b@v4228))))) '#f))) (set! v2f5e@parse-library (lambda (v4261@e) ((lambda (v4263@t) ((lambda (v4265@ls/false) (if (and v4265@ls/false (apply (lambda (v4267@library v4268@name* v4269@export v426a@exp* v426b@import v426c@imp* v426d@b*) (and (eq? (v2fea@syntax->datum v4269@export) 'export) (eq? (v2fea@syntax->datum v426b@import) 'import) (eq? (v2fea@syntax->datum v4267@library) 'library))) v4265@ls/false)) (apply (lambda (v4275@library v4276@name* v4277@export v4278@exp* v4279@import v427a@imp* v427b@b*) (values v4276@name* v4278@exp* v427a@imp* v427b@b*)) v4265@ls/false) ((lambda (v4283@t) ((lambda (v4285@ls/false) (if v4285@ls/false (apply (lambda () (v2fe4@syntax-violation '#f '"malformed library" v4261@e)) v4285@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v4283@t))) (v2efb@syntax-dispatch v4283@t '_))) v4263@t))) (v2efb@syntax-dispatch v4263@t '(any each-any (any . each-any) (any . each-any) . each-any)))) v4261@e))) (set! v2f60@parse-import-spec* ((lambda () ((lambda (v4288@idsyn? v428a@dup-error v428c@merge-substs v428e@exclude* v4290@find* v4292@rem* v4294@remove-dups v4296@parse-library-name v4298@import-library v429a@get-import v429c@add-imports!) (begin (set! v4288@idsyn? (lambda (v4491@x) (symbol? (v2fea@syntax->datum v4491@x)))) (set! v428a@dup-error (lambda (v448f@name) (v2fe4@syntax-violation 'import '"two imports with different bindings" v448f@name))) (set! v428c@merge-substs (lambda (v447d@s v447e@subst) ((lambda (v4482@insert-to-subst) (begin (set! v4482@insert-to-subst (lambda (v4483@a v4484@subst) ((lambda (v4487@name v4488@label) ((lambda (v448b@t) (if v448b@t ((lambda (v448d@x) (if (eq? (cdr v448d@x) v4488@label) v4484@subst (v428a@dup-error v4487@name))) v448b@t) (cons v4483@a v4484@subst))) (assq v4487@name v4484@subst))) (car v4483@a) (cdr v4483@a)))) (if (null? v447d@s) v447e@subst (v4482@insert-to-subst (car v447d@s) (v428c@merge-substs (cdr v447d@s) v447e@subst))))) '#f))) (set! v428e@exclude* (lambda (v444d@sym* v444e@subst) ((lambda (v4452@exclude) (begin (set! v4452@exclude (lambda (v446b@sym v446c@subst) (if (null? v446c@subst) (v2fe4@syntax-violation 'import '"cannot rename unbound identifier" v446b@sym) (if (eq? v446b@sym (caar v446c@subst)) (values (cdar v446c@subst) (cdr v446c@subst)) ((lambda (v446f@a) (call-with-values (lambda () (v4452@exclude v446b@sym (cdr v446c@subst))) (lambda (v4475@v4472 v4476@v4474) ((lambda (v4479@subst v447a@old) (values v447a@old (cons v446f@a v4479@subst))) v4476@v4474 v4475@v4472)))) (car v446c@subst)))))) (if (null? v444d@sym*) (values '() v444e@subst) (call-with-values (lambda () (v4452@exclude (car v444d@sym*) v444e@subst)) (lambda (v4457@v4454 v4458@v4456) ((lambda (v445b@subst v445c@old) (call-with-values (lambda () (v428e@exclude* (cdr v444d@sym*) v445b@subst)) (lambda (v4463@v4460 v4464@v4462) ((lambda (v4467@subst v4468@old*) (values (cons v445c@old v4468@old*) v4467@subst)) v4464@v4462 v4463@v4460)))) v4458@v4456 v4457@v4454)))))) '#f))) (set! v4290@find* (lambda (v4445@sym* v4446@subst) (map (lambda (v4449@x) ((lambda (v444b@t) (if v444b@t (cdr v444b@t) (v2fe4@syntax-violation 'import '"cannot find identifier" v4449@x))) (assq v4449@x v4446@subst))) v4445@sym*))) (set! v4292@rem* (lambda (v443d@sym* v443e@subst) ((letrec ((v4441@f (lambda (v4443@subst) (if (null? v4443@subst) '() (if (memq (caar v4443@subst) v443d@sym*) (v4441@f (cdr v4443@subst)) (cons (car v4443@subst) (v4441@f (cdr v4443@subst)))))))) v4441@f) v443e@subst))) (set! v4294@remove-dups (lambda (v443b@ls) (if (null? v443b@ls) '() (if (memq (car v443b@ls) (cdr v443b@ls)) (v4294@remove-dups (cdr v443b@ls)) (cons (car v443b@ls) (v4294@remove-dups (cdr v443b@ls))))))) (set! v4296@parse-library-name (lambda (v4353@spec) ((lambda (v4356@subversion? v4358@subversion-pred v435a@version-pred) (begin (set! v4356@subversion? (lambda (v4437@x) ((lambda (v4439@x) (and (integer? v4439@x) (exact? v4439@x) (>= v4439@x '0))) (v2fea@syntax->datum v4437@x)))) (set! v4358@subversion-pred (lambda (v43d7@x*) ((lambda (v43d9@t) ((lambda (v43db@ls/false) (if (and v43db@ls/false (apply (lambda (v43dd@n) (v4356@subversion? v43dd@n)) v43db@ls/false)) (apply (lambda (v43df@n) (lambda (v43e1@x) (= v43e1@x (v2fea@syntax->datum v43df@n)))) v43db@ls/false) ((lambda (v43e3@t) ((lambda (v43e5@ls/false) (if (and v43e5@ls/false (apply (lambda (v43e7@p? v43e8@sub*) (eq? (v2fea@syntax->datum v43e7@p?) 'and)) v43e5@ls/false)) (apply (lambda (v43eb@p? v43ec@sub*) ((lambda (v43ef@p*) (lambda (v43f1@x) (for-all (lambda (v43f3@p) (v43f3@p v43f1@x)) v43ef@p*))) (map v4358@subversion-pred v43ec@sub*))) v43e5@ls/false) ((lambda (v43f5@t) ((lambda (v43f7@ls/false) (if (and v43f7@ls/false (apply (lambda (v43f9@p? v43fa@sub*) (eq? (v2fea@syntax->datum v43f9@p?) 'or)) v43f7@ls/false)) (apply (lambda (v43fd@p? v43fe@sub*) ((lambda (v4401@p*) (lambda (v4403@x) (exists (lambda (v4405@p) (v4405@p v4403@x)) v4401@p*))) (map v4358@subversion-pred v43fe@sub*))) v43f7@ls/false) ((lambda (v4407@t) ((lambda (v4409@ls/false) (if (and v4409@ls/false (apply (lambda (v440b@p? v440c@sub) (eq? (v2fea@syntax->datum v440b@p?) 'not)) v4409@ls/false)) (apply (lambda (v440f@p? v4410@sub) ((lambda (v4413@p) (lambda (v4415@x) (not (v4413@p v4415@x)))) (v4358@subversion-pred v4410@sub))) v4409@ls/false) ((lambda (v4417@t) ((lambda (v4419@ls/false) (if (and v4419@ls/false (apply (lambda (v441b@p? v441c@n) (and (eq? (v2fea@syntax->datum v441b@p?) '<=) (v4356@subversion? v441c@n))) v4419@ls/false)) (apply (lambda (v441f@p? v4420@n) (lambda (v4423@x) (<= v4423@x (v2fea@syntax->datum v4420@n)))) v4419@ls/false) ((lambda (v4425@t) ((lambda (v4427@ls/false) (if (and v4427@ls/false (apply (lambda (v4429@p? v442a@n) (and (eq? (v2fea@syntax->datum v4429@p?) '>=) (v4356@subversion? v442a@n))) v4427@ls/false)) (apply (lambda (v442d@p? v442e@n) (lambda (v4431@x) (>= v4431@x (v2fea@syntax->datum v442e@n)))) v4427@ls/false) ((lambda (v4433@t) ((lambda (v4435@ls/false) (if v4435@ls/false (apply (lambda () (v2fe4@syntax-violation 'import '"invalid sub-version spec" v4353@spec v43d7@x*)) v4435@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v4433@t))) (v2efb@syntax-dispatch v4433@t '_))) v4425@t))) (v2efb@syntax-dispatch v4425@t '(any any)))) v4417@t))) (v2efb@syntax-dispatch v4417@t '(any any)))) v4407@t))) (v2efb@syntax-dispatch v4407@t '(any any)))) v43f5@t))) (v2efb@syntax-dispatch v43f5@t '(any . each-any)))) v43e3@t))) (v2efb@syntax-dispatch v43e3@t '(any . each-any)))) v43d9@t))) (v2efb@syntax-dispatch v43d9@t 'any))) v43d7@x*))) (set! v435a@version-pred (lambda (v4387@x*) ((lambda (v4389@t) ((lambda (v438b@ls/false) (if v438b@ls/false (apply (lambda () (lambda (v438d@x) '#t)) v438b@ls/false) ((lambda (v438f@t) ((lambda (v4391@ls/false) (if (and v4391@ls/false (apply (lambda (v4393@c v4394@ver*) (eq? (v2fea@syntax->datum v4393@c) 'and)) v4391@ls/false)) (apply (lambda (v4397@c v4398@ver*) ((lambda (v439b@p*) (lambda (v439d@x) (for-all (lambda (v439f@p) (v439f@p v439d@x)) v439b@p*))) (map v435a@version-pred v4398@ver*))) v4391@ls/false) ((lambda (v43a1@t) ((lambda (v43a3@ls/false) (if (and v43a3@ls/false (apply (lambda (v43a5@c v43a6@ver*) (eq? (v2fea@syntax->datum v43a5@c) 'or)) v43a3@ls/false)) (apply (lambda (v43a9@c v43aa@ver*) ((lambda (v43ad@p*) (lambda (v43af@x) (exists (lambda (v43b1@p) (v43b1@p v43af@x)) v43ad@p*))) (map v435a@version-pred v43aa@ver*))) v43a3@ls/false) ((lambda (v43b3@t) ((lambda (v43b5@ls/false) (if (and v43b5@ls/false (apply (lambda (v43b7@c v43b8@ver) (eq? (v2fea@syntax->datum v43b7@c) 'not)) v43b5@ls/false)) (apply (lambda (v43bb@c v43bc@ver) ((lambda (v43bf@p) (lambda (v43c1@x) (not (v43bf@p v43c1@x)))) (v435a@version-pred v43bc@ver))) v43b5@ls/false) ((lambda (v43c3@t) ((lambda (v43c5@ls/false) (if v43c5@ls/false (apply (lambda (v43c7@sub*) ((lambda (v43c9@p*) (lambda (v43cb@x) ((letrec ((v43cd@f (lambda (v43cf@p* v43d0@x) (if (null? v43cf@p*) '#t (if (null? v43d0@x) '#f (and ((car v43cf@p*) (car v43d0@x)) (v43cd@f (cdr v43cf@p*) (cdr v43d0@x)))))))) v43cd@f) v43c9@p* v43cb@x))) (map v4358@subversion-pred v43c7@sub*))) v43c5@ls/false) ((lambda (v43d3@t) ((lambda (v43d5@ls/false) (if v43d5@ls/false (apply (lambda () (v2fe4@syntax-violation 'import '"invalid version spec" v4353@spec v4387@x*)) v43d5@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v43d3@t))) (v2efb@syntax-dispatch v43d3@t '_))) v43c3@t))) (v2efb@syntax-dispatch v43c3@t 'each-any))) v43b3@t))) (v2efb@syntax-dispatch v43b3@t '(any any)))) v43a1@t))) (v2efb@syntax-dispatch v43a1@t '(any . each-any)))) v438f@t))) (v2efb@syntax-dispatch v438f@t '(any . each-any)))) v4389@t))) (v2efb@syntax-dispatch v4389@t '()))) v4387@x*))) ((letrec ((v435b@f (lambda (v435d@x) ((lambda (v435f@t) ((lambda (v4361@ls/false) (if v4361@ls/false (apply (lambda (v4363@version-spec*) (values '() (v435a@version-pred v4363@version-spec*))) v4361@ls/false) ((lambda (v4365@t) ((lambda (v4367@ls/false) (if (and v4367@ls/false (apply (lambda (v4369@x v436a@x*) (v4288@idsyn? v4369@x)) v4367@ls/false)) (apply (lambda (v436d@x v436e@x*) (call-with-values (lambda () (v435b@f v436e@x*)) (lambda (v4375@v4372 v4376@v4374) ((lambda (v4379@pred v437a@name) (values (cons (v2fea@syntax->datum v436d@x) v437a@name) v4379@pred)) v4376@v4374 v4375@v4372)))) v4367@ls/false) ((lambda (v437d@t) ((lambda (v437f@ls/false) (if v437f@ls/false (apply (lambda () (values '() (lambda (v4381@x) '#t))) v437f@ls/false) ((lambda (v4383@t) ((lambda (v4385@ls/false) (if v4385@ls/false (apply (lambda () (v2fe4@syntax-violation '#f '"invalid import spec" v4353@spec)) v4385@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v4383@t))) (v2efb@syntax-dispatch v4383@t '_))) v437d@t))) (v2efb@syntax-dispatch v437d@t '()))) v4365@t))) (v2efb@syntax-dispatch v4365@t '(any . any)))) v435f@t))) (v2efb@syntax-dispatch v435f@t '(each-any)))) v435d@x)))) v435b@f) v4353@spec))) '#f '#f '#f))) (set! v4298@import-library (lambda (v4343@spec*) (call-with-values (lambda () (v4296@parse-library-name v4343@spec*)) (lambda (v4349@v4346 v434a@v4348) ((lambda (v434d@pred v434e@name) (begin (if (null? v434e@name) (v2fe4@syntax-violation 'import '"empty library name" v4343@spec*) (void)) ((lambda (v4351@lib) (begin (if (not v4351@lib) (v2fe4@syntax-violation 'import '"cannot find library with required name" v434e@name) (void)) (if (not (v434d@pred (v2ae5@v2957@library-version v4351@lib))) (v2fe4@syntax-violation 'import '"library does not satisfy version specification" v4343@spec* v4351@lib) (void)) ((v2f6a@imp-collector) v4351@lib) (v2ae9@v295f@library-subst v4351@lib))) (v2b0d@v29a7@find-library-by-name v434e@name)))) v434a@v4348 v4349@v4346))))) (set! v429a@get-import (lambda (v42b5@spec) ((lambda (v42b7@t) ((lambda (v42b9@ls/false) (if (and v42b9@ls/false (apply (lambda (v42bb@x v42bc@x*) (not (memq (v2fea@syntax->datum v42bb@x) '(for rename except only prefix library)))) v42b9@ls/false)) (apply (lambda (v42bf@x v42c0@x*) (v4298@import-library (cons v42bf@x v42c0@x*))) v42b9@ls/false) ((lambda (v42c3@t) ((lambda (v42c5@ls/false) (if (and v42c5@ls/false (apply (lambda (v42c7@rename v42c8@isp v42c9@old* v42ca@new*) (and (eq? (v2fea@syntax->datum v42c7@rename) 'rename) (for-all v4288@idsyn? v42c9@old*) (for-all v4288@idsyn? v42ca@new*))) v42c5@ls/false)) (apply (lambda (v42cf@rename v42d0@isp v42d1@old* v42d2@new*) ((lambda (v42d7@subst v42d8@old* v42d9@new*) ((lambda (v42dd@old-label*) ((lambda (v42df@subst) (v428c@merge-substs (map cons v42d9@new* v42dd@old-label*) v42df@subst)) (v4292@rem* v42d8@old* v42d7@subst))) (v4290@find* v42d8@old* v42d7@subst))) (v429a@get-import v42d0@isp) (map v2fea@syntax->datum v42d1@old*) (map v2fea@syntax->datum v42d2@new*))) v42c5@ls/false) ((lambda (v42e1@t) ((lambda (v42e3@ls/false) (if (and v42e3@ls/false (apply (lambda (v42e5@except v42e6@isp v42e7@sym*) (and (eq? (v2fea@syntax->datum v42e5@except) 'except) (for-all v4288@idsyn? v42e7@sym*))) v42e3@ls/false)) (apply (lambda (v42eb@except v42ec@isp v42ed@sym*) ((lambda (v42f1@subst) (v4292@rem* (map v2fea@syntax->datum v42ed@sym*) v42f1@subst)) (v429a@get-import v42ec@isp))) v42e3@ls/false) ((lambda (v42f3@t) ((lambda (v42f5@ls/false) (if (and v42f5@ls/false (apply (lambda (v42f7@only v42f8@isp v42f9@sym*) (and (eq? (v2fea@syntax->datum v42f7@only) 'only) (for-all v4288@idsyn? v42f9@sym*))) v42f5@ls/false)) (apply (lambda (v42fd@only v42fe@isp v42ff@sym*) ((lambda (v4303@subst v4304@sym*) ((lambda (v4307@sym*) ((lambda (v4309@lab*) (map cons v4307@sym* v4309@lab*)) (v4290@find* v4307@sym* v4303@subst))) (v4294@remove-dups v4304@sym*))) (v429a@get-import v42fe@isp) (map v2fea@syntax->datum v42ff@sym*))) v42f5@ls/false) ((lambda (v430b@t) ((lambda (v430d@ls/false) (if (and v430d@ls/false (apply (lambda (v430f@prefix v4310@isp v4311@p) (and (eq? (v2fea@syntax->datum v430f@prefix) 'prefix) (v4288@idsyn? v4311@p))) v430d@ls/false)) (apply (lambda (v4315@prefix v4316@isp v4317@p) ((lambda (v431b@subst v431c@prefix) (map (lambda (v431f@x) (cons (string->symbol (string-append v431c@prefix (symbol->string (car v431f@x)))) (cdr v431f@x))) v431b@subst)) (v429a@get-import v4316@isp) (symbol->string (v2fea@syntax->datum v4317@p)))) v430d@ls/false) ((lambda (v4321@t) ((lambda (v4323@ls/false) (if (and v4323@ls/false (apply (lambda (v4325@library v4326@spec*) (eq? (v2fea@syntax->datum v4325@library) 'library)) v4323@ls/false)) (apply (lambda (v4329@library v432a@spec*) (v4298@import-library v432a@spec*)) v4323@ls/false) ((lambda (v432d@t) ((lambda (v432f@ls/false) (if (and v432f@ls/false (apply (lambda (v4331@for v4332@isp v4333@rest) (eq? (v2fea@syntax->datum v4331@for) 'for)) v432f@ls/false)) (apply (lambda (v4337@for v4338@isp v4339@rest) (v429a@get-import v4338@isp)) v432f@ls/false) ((lambda (v433d@t) ((lambda (v433f@ls/false) (if v433f@ls/false (apply (lambda (v4341@spec) (v2fe4@syntax-violation 'import '"invalid import spec" v4341@spec)) v433f@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v433d@t))) (v2efb@syntax-dispatch v433d@t 'any))) v432d@t))) (v2efb@syntax-dispatch v432d@t '(any any . any)))) v4321@t))) (v2efb@syntax-dispatch v4321@t '(any each-any)))) v430b@t))) (v2efb@syntax-dispatch v430b@t '(any any any)))) v42f3@t))) (v2efb@syntax-dispatch v42f3@t '(any any . each-any)))) v42e1@t))) (v2efb@syntax-dispatch v42e1@t '(any any . each-any)))) v42c3@t))) (v2efb@syntax-dispatch v42c3@t '(any any . #(each (any any)))))) v42b7@t))) (v2efb@syntax-dispatch v42b7@t '(any . each-any)))) v42b5@spec))) (set! v429c@add-imports! (lambda (v42a5@imp v42a6@h) ((lambda (v42a9@subst) (for-each (lambda (v42ab@x) ((lambda (v42ad@name v42ae@label) ((lambda (v42b1@t) (if v42b1@t ((lambda (v42b3@l) (if (not (eq? v42b3@l v42ae@label)) (v428a@dup-error v42ad@name) (void))) v42b1@t) (hashtable-set! v42a6@h v42ad@name v42ae@label))) (hashtable-ref v42a6@h v42ad@name '#f))) (car v42ab@x) (cdr v42ab@x))) v42a9@subst)) (v429a@get-import v42a5@imp)))) (lambda (v429d@imp*) ((letrec ((v429f@f (lambda (v42a1@imp* v42a2@h) (if (null? v42a1@imp*) (hashtable-entries v42a2@h) (begin (v429c@add-imports! (car v42a1@imp*) v42a2@h) (v429f@f (cdr v42a1@imp*) v42a2@h)))))) v429f@f) v429d@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! v2f62@make-top-rib (lambda (v4493@names v4494@labels) ((lambda (v4497@rib) (begin (vector-for-each (lambda (v4499@name v449a@label) (begin (if (not (symbol? v4499@name)) (error 'make-top-rib '"BUG: not a symbol" v4499@name) (void)) (v2ca3@extend-rib/nc! v4497@rib (v2cba@make-stx v4499@name v2c6c@top-mark* '() '()) v449a@label))) v4493@names v4494@labels) v4497@rib)) (v2c9f@make-empty-rib)))) (set! v2f64@make-collector (lambda () ((lambda (v449d@ls) (lambda v44a1 ((lambda (v44a2) (if (= v44a2 '0) (apply (lambda () v449d@ls) v44a1) (if (= v44a2 '1) (apply (lambda (v449f@x) (set! v449d@ls (v2c65@set-cons v449f@x v449d@ls))) v44a1) (error 'apply '"invalid arg count")))) (length v44a1)))) '()))) (set! v2f66@inv-collector (v289a@v27c4@make-parameter (lambda v44a3@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (v44a5@x) (begin (if (not (procedure? v44a5@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" v44a5@x) (void)) v44a5@x)))) (set! v2f68@vis-collector (v289a@v27c4@make-parameter (lambda v44a7@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (v44a9@x) (begin (if (not (procedure? v44a9@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" v44a9@x) (void)) v44a9@x)))) (set! v2f6a@imp-collector (v289a@v27c4@make-parameter (lambda v44ab@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (v44ad@x) (begin (if (not (procedure? v44ad@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" v44ad@x) (void)) v44ad@x)))) (set! v2f6c@chi-library-internal (lambda (v44af@e* v44b0@rib v44b1@top?) (call-with-values (lambda () (v2f56@chi-body* v44af@e* '() '() '() '() '() '() '() v44b0@rib v44b1@top?)) (lambda (v44c5@v44b6 v44c6@v44b8 v44c7@v44ba v44c8@v44bc v44c9@v44be v44ca@v44c0 v44cb@v44c2 v44cc@v44c4) ((lambda (v44d5@exp* v44d6@_kwd* v44d7@mod** v44d8@rhs* v44d9@lex* v44da@mr v44db@r v44dc@e*) (values (append (apply append (reverse v44d7@mod**)) v44dc@e*) v44db@r v44da@mr (reverse v44d9@lex*) (reverse v44d8@rhs*) v44d5@exp*)) v44cc@v44c4 v44cb@v44c2 v44ca@v44c0 v44c9@v44be v44c8@v44bc v44c7@v44ba v44c6@v44b8 v44c5@v44b6))))) (set! v2f6e@chi-interaction-expr (lambda (v44e5@e v44e6@rib v44e7@r) (call-with-values (lambda () (v2f56@chi-body* (list v44e5@e) v44e7@r v44e7@r '() '() '() '() '() v44e6@rib '#t)) (lambda (v44fb@v44ec v44fc@v44ee v44fd@v44f0 v44fe@v44f2 v44ff@v44f4 v4500@v44f6 v4501@v44f8 v4502@v44fa) ((lambda (v450b@_exp* v450c@_kwd* v450d@mod** v450e@rhs* v450f@lex* v4510@mr v4511@r v4512@e*) ((lambda (v451b@e*) ((lambda (v451d@e) (values v451d@e v4511@r)) (if (null? v451b@e*) (v2c50@v2bc0@build-void) (if (null? (cdr v451b@e*)) (car v451b@e*) (v2c4f@v2bbe@build-sequence '#f v451b@e*))))) (v2f2b@expand-interaction-rhs*/init* (reverse v450f@lex*) (reverse v450e@rhs*) (append (apply append (reverse v450d@mod**)) v4512@e*) v4511@r v4510@mr))) v4502@v44fa v4501@v44f8 v4500@v44f6 v44ff@v44f4 v44fe@v44f2 v44fd@v44f0 v44fc@v44ee v44fb@v44ec))))) (set! v2f70@library-body-expander (lambda (v451f@name v4520@main-exp* v4521@imp* v4522@b* v4523@top?) ((lambda (v452a@itc) (begin (set! v452a@itc (v2f64@make-collector)) ((lambda (v4533@v452c v4534@v452e v4535@v4530 v4536@v4532) ((lambda (v453b@swap) (dynamic-wind v453b@swap (lambda () (call-with-values (lambda () (v2f60@parse-import-spec* v4521@imp*)) (lambda (v4541@v453e v4542@v4540) ((lambda (v4545@subst-labels v4546@subst-names) ((lambda (v4549@rib) ((lambda (v454c@wrap) (begin (set! v454c@wrap (lambda (v45c7@x) (v2cba@make-stx v45c7@x v2c6c@top-mark* (list v4549@rib) '()))) ((lambda (v454d@b* v454e@main-exp* v454f@rtc v4550@vtc) ((lambda (v455d@v4556 v455e@v4558 v455f@v455a v4560@v455c) ((lambda (v4565@swap) (dynamic-wind v4565@swap (lambda () (call-with-values (lambda () (v2f6c@chi-library-internal v454d@b* v4549@rib v4523@top?)) (lambda (v4573@v4568 v4574@v456a v4575@v456c v4576@v456e v4577@v4570 v4578@v4572) ((lambda (v457f@internal-exp* v4580@rhs* v4581@lex* v4582@mr v4583@r v4584@init*) (call-with-values (lambda () (v2f5a@parse-exports (append v454e@main-exp* v457f@internal-exp*))) (lambda (v458f@v458c v4590@v458e) ((lambda (v4593@exp-id* v4594@exp-name*) (begin (v2ca7@seal-rib! v4549@rib) ((lambda (v4597@init*) ((lambda (v4599@rhs*) ((lambda () (begin (v2ca9@unseal-rib! v4549@rib) ((lambda (v459b@loc* v459c@export-subst) ((lambda (v45a0@errstr) (begin (set! v45a0@errstr '"attempt to export mutated variable") (call-with-values (lambda () (v2fd0@make-export-env/macros v4581@lex* v459b@loc* v4583@r)) (lambda (v45a7@v45a2 v45a8@v45a4 v45a9@v45a6) ((lambda (v45ad@macro* v45ae@global* v45af@export-env) (begin (for-each (lambda (v45b3@s) ((lambda (v45b5@name v45b6@label) ((lambda (v45b9@p) (if v45b9@p ((lambda (v45bb@b) ((lambda (v45bd@type) (if (eq? v45bd@type 'mutable) (v2fe4@syntax-violation 'export v45a0@errstr v45b5@name) (void))) (car v45bb@b))) (cdr v45b9@p)) (void))) (assq v45b6@label v45af@export-env))) (car v45b3@s) (cdr v45b3@s))) v459c@export-subst) ((lambda (v45bf@invoke-body v45c0@invoke-definitions) (values (v452a@itc) (v454f@rtc) (v4550@vtc) (v2c4f@v2bbe@build-sequence '#f (append v45c0@invoke-definitions (list v45bf@invoke-body))) v45ad@macro* v459c@export-subst v45af@export-env)) (v2c52@v2bc4@build-letrec* '#f v4581@lex* v4599@rhs* (v2fcc@build-exports v45ae@global* v4597@init*)) (map v2c4b@v2b1b@build-global-define (map cdr v45ae@global*))))) v45a9@v45a6 v45a8@v45a4 v45a7@v45a2))))) '#f)) (map v2c72@gen-global v4581@lex*) (v2fce@make-export-subst v4594@exp-name* v4593@exp-id*)))))) (v2f2d@chi-rhs* v4580@rhs* v4583@r v4582@mr))) (v2f19@chi-expr* v4584@init* v4583@r v4582@mr)))) v4590@v458e v458f@v458c)))) v4578@v4572 v4577@v4570 v4576@v456e v4575@v456c v4574@v456a v4573@v4568)))) v4565@swap)) (lambda () (begin ((lambda (v45c3@t) (begin (v455d@v4556 v455f@v455a) (set! v455f@v455a v45c3@t))) (v455d@v4556)) ((lambda (v45c5@t) (begin (v455e@v4558 v4560@v455c) (set! v4560@v455c v45c5@t))) (v455e@v4558)))))) v2f66@inv-collector v2f68@vis-collector v454f@rtc v4550@vtc)) (map v454c@wrap v4522@b*) (map v454c@wrap v4520@main-exp*) (v2f64@make-collector) (v2f64@make-collector)))) '#f)) (v2f62@make-top-rib v4546@subst-names v4545@subst-labels))) v4542@v4540 v4541@v453e)))) v453b@swap)) (lambda () (begin ((lambda (v45c9@t) (begin (v4533@v452c v4535@v4530) (set! v4535@v4530 v45c9@t))) (v4533@v452c)) ((lambda (v45cb@t) (begin (v4534@v452e v4536@v4532) (set! v4536@v4532 v45cb@t))) (v4534@v452e)))))) v2f6a@imp-collector v2ff2@top-level-context v452a@itc '#f))) '#f))) (set! v2f72@core-library-expander (lambda (v45cd@e v45ce@verify-name) (call-with-values (lambda () (v2f5e@parse-library v45cd@e)) (lambda (v45d9@v45d2 v45da@v45d4 v45db@v45d6 v45dc@v45d8) ((lambda (v45e1@b* v45e2@imp* v45e3@exp* v45e4@name*) (call-with-values (lambda () (v2f5c@parse-library-name v45e4@name*)) (lambda (v45ed@v45ea v45ee@v45ec) ((lambda (v45f1@ver v45f2@name) (begin (v45ce@verify-name v45f2@name) (call-with-values (lambda () (v2f70@library-body-expander v45f2@name v45e3@exp* v45e2@imp* v45e1@b* '#f)) (lambda (v4603@v45f6 v4604@v45f8 v4605@v45fa v4606@v45fc v4607@v45fe v4608@v4600 v4609@v4602) ((lambda (v4611@export-env v4612@export-subst v4613@visit-code v4614@invoke-code v4615@visit-req* v4616@invoke-req* v4617@imp*) (values v45f2@name v45f1@ver v4617@imp* v4616@invoke-req* v4615@visit-req* v4614@invoke-code v4613@visit-code v4612@export-subst v4611@export-env)) v4609@v4602 v4608@v4600 v4607@v45fe v4606@v45fc v4605@v45fa v4604@v45f8 v4603@v45f6))))) v45ee@v45ec v45ed@v45ea)))) v45dc@v45d8 v45db@v45d6 v45da@v45d4 v45d9@v45d2))))) (set! v2f74@parse-top-level-program (lambda (v461f@e*) ((lambda (v4621@t) ((lambda (v4623@ls/false) (if (and v4623@ls/false (apply (lambda (v4625@import v4626@imp* v4627@b*) (eq? (v2fea@syntax->datum v4625@import) 'import)) v4623@ls/false)) (apply (lambda (v462b@import v462c@imp* v462d@b*) (values v462c@imp* v462d@b*)) v4623@ls/false) ((lambda (v4631@t) ((lambda (v4633@ls/false) (if (and v4633@ls/false (apply (lambda (v4635@import v4636@x v4637@y) (eq? (v2fea@syntax->datum v4635@import) 'import)) v4633@ls/false)) (apply (lambda (v463b@import v463c@x v463d@y) (v2fe4@syntax-violation 'expander '"invalid syntax of top-level program" (v2cea@syntax-car v461f@e*))) v4633@ls/false) ((lambda (v4641@t) ((lambda (v4643@ls/false) (if v4643@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) v4643@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v4641@t))) (v2efb@syntax-dispatch v4641@t '_))) v4631@t))) (v2efb@syntax-dispatch v4631@t '((any . any) . any)))) v4621@t))) (v2efb@syntax-dispatch v4621@t '((any . each-any) . each-any)))) v461f@e*))) (set! v2f76@top-level-expander (lambda (v4645@e*) (call-with-values (lambda () (v2f74@parse-top-level-program v4645@e*)) (lambda (v464b@v4648 v464c@v464a) ((lambda (v464f@b* v4650@imp*) (call-with-values (lambda () (v2f70@library-body-expander '() '() v4650@imp* v464f@b* '#t)) (lambda (v4661@v4654 v4662@v4656 v4663@v4658 v4664@v465a v4665@v465c v4666@v465e v4667@v4660) ((lambda (v466f@export-env v4670@export-subst v4671@visit-code v4672@invoke-code v4673@visit-req* v4674@invoke-req* v4675@imp*) (values v4674@invoke-req* v4672@invoke-code)) v4667@v4660 v4666@v465e v4665@v465c v4664@v465a v4663@v4658 v4662@v4656 v4661@v4654)))) v464c@v464a v464b@v4648))))) (set! v2f7c@v2f77 (make-record-type-descriptor 'env '#f 'v2f7a '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! v2f7e@v2f79 '#f) (set! v2f80@v2f78 (make-record-constructor-descriptor v2f7c@v2f77 '#f v2f7e@v2f79)) (set! v2f83@env? (record-predicate v2f7c@v2f77)) (set! v2f85@make-env (record-constructor v2f80@v2f78)) (set! v2f87@env-names (record-accessor v2f7c@v2f77 '0)) (set! v2f89@env-labels (record-accessor v2f7c@v2f77 '1)) (set! v2f8b@env-itc (record-accessor v2f7c@v2f77 '2)) (set! v2f8d@set-env-names! (record-mutator v2f7c@v2f77 '0)) (set! v2f8f@set-env-labels! (record-mutator v2f7c@v2f77 '1)) (set! v2f91@set-env-itc! (record-mutator v2f7c@v2f77 '2)) (set! v2f93@rp (v2897@v27be@make-record-printer 'env (lambda (v467d@x v467e@p v467f@wr) (display '"#<environment>" v467e@p)))) (set! v2f99@v2f94 (make-record-type-descriptor 'interaction-env '#f 'v2f97 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! v2f9b@v2f96 '#f) (set! v2f9d@v2f95 (make-record-constructor-descriptor v2f99@v2f94 '#f v2f9b@v2f96)) (set! v2fa0@interaction-env? (record-predicate v2f99@v2f94)) (set! v2fa2@make-interaction-env (record-constructor v2f9d@v2f95)) (set! v2fa4@interaction-env-rib (record-accessor v2f99@v2f94 '0)) (set! v2fa6@interaction-env-r (record-accessor v2f99@v2f94 '1)) (set! v2fa8@interaction-env-locs (record-accessor v2f99@v2f94 '2)) (set! v2faa@set-interaction-env-rib! (record-mutator v2f99@v2f94 '0)) (set! v2fac@set-interaction-env-r! (record-mutator v2f99@v2f94 '1)) (set! v2fae@set-interaction-env-locs! (record-mutator v2f99@v2f94 '2)) (set! v2fb0@rp (v2897@v27be@make-record-printer 'interaction-env (lambda (v4683@x v4684@p v4685@wr) (display '"#<environment>" v4684@p)))) (set! v2fb2@interaction-environment-symbols (lambda () (v2fba@environment-symbols (v2ff0@interaction-environment)))) (set! v2fb4@environment-bindings (lambda (v4689@e) (vector->list (vector-map (lambda (v468b@name v468c@label) (v2fb6@parse-binding (cons v468b@name (v2b13@v29b3@imported-label->binding v468c@label)))) (v2f87@env-names v4689@e) (v2f89@env-labels v4689@e))))) (set! v2fb6@parse-binding (lambda (v468f@b) (cons (car v468f@b) ((lambda (v4691@t) (if (memv v4691@t '(core-prim global)) 'procedure (if (memv v4691@t '(core-macro macro global-macro)) 'syntax (if (memv v4691@t '($core-rtd)) 'record (if (eq? (car v468f@b) (cadr v468f@b)) 'syntax 'unknown))))) (cadr v468f@b))))) (set! v2fb8@environment? (lambda (v4693@x) (or (v2f83@env? v4693@x) (v2fa0@interaction-env? v4693@x)))) (set! v2fba@environment-symbols (lambda (v4695@x) (if (v2f83@env? v4695@x) (vector->list (v2f87@env-names v4695@x)) (if (v2fa0@interaction-env? v4695@x) (map values (v2c8b@rib-sym* (v2fa4@interaction-env-rib v4695@x))) (assertion-violation 'environment-symbols '"not an environment" v4695@x))))) (set! v2fbc@environment (lambda v4697@imp* ((lambda (v4699@itc) ((lambda (v469f@v469c v46a0@v469e) ((lambda (v46a3@swap) (dynamic-wind v46a3@swap (lambda () (call-with-values (lambda () (v2f60@parse-import-spec* v4697@imp*)) (lambda (v46a9@v46a6 v46aa@v46a8) ((lambda (v46ad@subst-labels v46ae@subst-names) (v2f85@make-env v46ae@subst-names v46ad@subst-labels v4699@itc)) v46aa@v46a8 v46a9@v46a6)))) v46a3@swap)) (lambda () ((lambda (v46b1@t) (begin (v469f@v469c v46a0@v469e) (set! v46a0@v469e v46b1@t))) (v469f@v469c))))) v2f6a@imp-collector v4699@itc)) (v2f64@make-collector)))) (set! v2fbe@null-environment (lambda (v46b3@n) (begin (if (not (eqv? v46b3@n '5)) (assertion-violation 'null-environment '"not 5" v46b3@n) (void)) (v2fbc@environment '(psyntax null-environment-5))))) (set! v2fc0@scheme-report-environment (lambda (v46b5@n) (begin (if (not (eqv? v46b5@n '5)) (assertion-violation 'scheme-report-environment '"not 5" v46b5@n) (void)) (v2fbc@environment '(psyntax scheme-report-environment-5))))) (set! v2fc2@expand (lambda (v46b7@x v46b8@env) (if (v2f83@env? v46b8@env) ((lambda (v46bb@rib) ((lambda (v46bd@x v46be@itc v46bf@rtc v46c0@vtc) ((lambda (v46c5@x) (begin (v2ca7@seal-rib! v46bb@rib) (values v46c5@x (v46bf@rtc)))) ((lambda (v46d7@v46c8 v46d8@v46ca v46d9@v46cc v46da@v46ce v46db@v46d0 v46dc@v46d2 v46dd@v46d4 v46de@v46d6) ((lambda (v46e7@swap) (dynamic-wind v46e7@swap (lambda () (v2f1d@chi-expr v46bd@x '() '())) v46e7@swap)) (lambda () (begin ((lambda (v46e9@t) (begin (v46d7@v46c8 v46db@v46d0) (set! v46db@v46d0 v46e9@t))) (v46d7@v46c8)) ((lambda (v46eb@t) (begin (v46d8@v46ca v46dc@v46d2) (set! v46dc@v46d2 v46eb@t))) (v46d8@v46ca)) ((lambda (v46ed@t) (begin (v46d9@v46cc v46dd@v46d4) (set! v46dd@v46d4 v46ed@t))) (v46d9@v46cc)) ((lambda (v46ef@t) (begin (v46da@v46ce v46de@v46d6) (set! v46de@v46d6 v46ef@t))) (v46da@v46ce)))))) v2ff2@top-level-context v2f66@inv-collector v2f68@vis-collector v2f6a@imp-collector '#f v46bf@rtc v46c0@vtc v46be@itc))) (v2cba@make-stx v46b7@x v2c6c@top-mark* (list v46bb@rib) '()) (v2f8b@env-itc v46b8@env) (v2f64@make-collector) (v2f64@make-collector))) (v2f62@make-top-rib (v2f87@env-names v46b8@env) (v2f89@env-labels v46b8@env))) (if (v2fa0@interaction-env? v46b8@env) ((lambda (v46f1@rib v46f2@r v46f3@rtc) ((lambda (v46f7@x) (call-with-values (lambda () ((lambda (v470d@v46fe v470e@v4700 v470f@v4702 v4710@v4704 v4711@v4706 v4712@v4708 v4713@v470a v4714@v470c) ((lambda (v471d@swap) (dynamic-wind v471d@swap (lambda () (v2f6e@chi-interaction-expr v46f7@x v46f1@rib v46f2@r)) v471d@swap)) (lambda () (begin ((lambda (v471f@t) (begin (v470d@v46fe v4711@v4706) (set! v4711@v4706 v471f@t))) (v470d@v46fe)) ((lambda (v4721@t) (begin (v470e@v4700 v4712@v4708) (set! v4712@v4708 v4721@t))) (v470e@v4700)) ((lambda (v4723@t) (begin (v470f@v4702 v4713@v470a) (set! v4713@v470a v4723@t))) (v470f@v4702)) ((lambda (v4725@t) (begin (v4710@v4704 v4714@v470c) (set! v4714@v470c v4725@t))) (v4710@v4704)))))) v2ff2@top-level-context v2f66@inv-collector v2f68@vis-collector v2f6a@imp-collector v46b8@env v46f3@rtc (v2f64@make-collector) (v2f64@make-collector))) (lambda (v4727@v46fa v4728@v46fc) ((lambda (v472b@r^ v472c@e) (begin (v2fac@set-interaction-env-r! v46b8@env v472b@r^) (values v472c@e (v46f3@rtc)))) v4728@v46fc v4727@v46fa)))) (v2cba@make-stx v46b7@x v2c6c@top-mark* (list v46f1@rib) '()))) (v2fa4@interaction-env-rib v46b8@env) (v2fa6@interaction-env-r v46b8@env) (v2f64@make-collector)) (assertion-violation 'expand '"not an environment" v46b8@env))))) (set! v2fc4@eval (lambda (v472f@x v4730@env) (begin (if (not (v2fb8@environment? v4730@env)) (error 'eval '"not an environment" v4730@env) (void)) (call-with-values (lambda () (v2fc2@expand v472f@x v4730@env)) (lambda (v4737@v4734 v4738@v4736) ((lambda (v473b@invoke-req* v473c@x) (begin (for-each v2b14@v29b5@invoke-library v473b@invoke-req*) (eval-core (v28ee@v28a6@expanded->core v473c@x)))) v4738@v4736 v4737@v4734)))))) (set! v2fc6@library-expander (lambda v47ad ((lambda (v47ae) (if (= v47ae '3) (apply (lambda (v473f@x v4740@filename v4741@verify-name) ((lambda (v4746@build-visit-code v4748@visit!) (begin (set! v4746@build-visit-code (lambda (v479b@macro*) (if (null? v479b@macro*) (v2c50@v2bc0@build-void) (v2c4f@v2bbe@build-sequence '#f (map (lambda (v479d@x) ((lambda (v479f@loc v47a0@src) (list 'set! v479f@loc v47a0@src)) (car v479d@x) (cddr v479d@x))) v479b@macro*))))) (set! v4748@visit! (lambda (v4793@macro*) (for-each (lambda (v4795@x) ((lambda (v4797@loc v4798@proc) (set-symbol-value! v4797@loc v4798@proc)) (car v4795@x) (cadr v4795@x))) v4793@macro*))) (call-with-values (lambda () (v2f72@core-library-expander v473f@x v4741@verify-name)) (lambda (v475b@v474a v475c@v474c v475d@v474e v475e@v4750 v475f@v4752 v4760@v4754 v4761@v4756 v4762@v4758 v4763@v475a) ((lambda (v476d@export-env v476e@export-subst v476f@macro* v4770@invoke-code v4771@vis* v4772@inv* v4773@imp* v4774@ver v4775@name) ((lambda (v477f@id v4780@name v4781@ver v4782@imp* v4783@vis* v4784@inv* v4785@visit-proc v4786@invoke-proc v4787@visit-code v4788@invoke-code) (begin (v2b12@v29b1@install-library v477f@id v4780@name v4781@ver v4782@imp* v4783@vis* v4784@inv* v476e@export-subst v476d@export-env v4785@visit-proc v4786@invoke-proc v4787@visit-code v4788@invoke-code '#t v4740@filename) (values v477f@id v4780@name v4781@ver v4782@imp* v4783@vis* v4784@inv* v4788@invoke-code v4787@visit-code v476e@export-subst v476d@export-env))) (gensym) v4775@name v4774@ver (map v2b18@v29bd@library-spec v4773@imp*) (map v2b18@v29bd@library-spec v4771@vis*) (map v2b18@v29bd@library-spec v4772@inv*) (lambda () (v4748@visit! v476f@macro*)) (lambda () (eval-core (v28ee@v28a6@expanded->core v4770@invoke-code))) (v4746@build-visit-code v476f@macro*) v4770@invoke-code)) v4763@v475a v4762@v4758 v4761@v4756 v4760@v4754 v475f@v4752 v475e@v4750 v475d@v474e v475c@v474c v475b@v474a))))) '#f '#f)) v47ad) (if (= v47ae '2) (apply (lambda (v47a3@x v47a4@filename) (v2fc6@library-expander v47a3@x v47a4@filename (lambda (v47a7@x) (values)))) v47ad) (if (= v47ae '1) (apply (lambda (v47a9@x) (v2fc6@library-expander v47a9@x '#f (lambda (v47ab@x) (values)))) v47ad) (error 'apply '"invalid arg count"))))) (length v47ad)))) (set! v2fc8@boot-library-expand (lambda (v47af@x) (call-with-values (lambda () (v2fc6@library-expander v47af@x)) (lambda (v47c5@v47b2 v47c6@v47b4 v47c7@v47b6 v47c8@v47b8 v47c9@v47ba v47ca@v47bc v47cb@v47be v47cc@v47c0 v47cd@v47c2 v47ce@v47c4) ((lambda (v47d9@export-env v47da@export-subst v47db@visit-code v47dc@invoke-code v47dd@inv* v47de@vis* v47df@imp* v47e0@ver v47e1@name v47e2@id) (values v47e1@name v47dc@invoke-code v47da@export-subst v47d9@export-env)) v47ce@v47c4 v47cd@v47c2 v47cc@v47c0 v47cb@v47be v47ca@v47bc v47c9@v47ba v47c8@v47b8 v47c7@v47b6 v47c6@v47b4 v47c5@v47b2))))) (set! v2fca@rev-map-append (lambda (v47ed@f v47ee@ls v47ef@ac) (if (null? v47ee@ls) v47ef@ac (v2fca@rev-map-append v47ed@f (cdr v47ee@ls) (cons (v47ed@f (car v47ee@ls)) v47ef@ac))))) (set! v2fcc@build-exports (lambda (v47f3@lex*+loc* v47f4@init*) (v2c4f@v2bbe@build-sequence '#f (cons (v2c50@v2bc0@build-void) (v2fca@rev-map-append (lambda (v47f7@x) (list 'set! (cdr v47f7@x) (car v47f7@x))) v47f3@lex*+loc* v47f4@init*))))) (set! v2fce@make-export-subst (lambda (v47f9@name* v47fa@id*) (map (lambda (v47fd@name v47fe@id) ((lambda (v4801@label) (begin (if (not v4801@label) (v2fe4@syntax-violation '#f '"cannot export unbound identifier" v47fe@id) (void)) (cons v47fd@name v4801@label))) (v2d0a@id->label v47fe@id))) v47f9@name* v47fa@id*))) (set! v2fd0@make-export-env/macros (lambda (v4803@lex* v4804@loc* v4805@r) ((lambda (v480a@lookup) (begin (set! v480a@lookup (lambda (v4827@x) ((letrec ((v4829@f (lambda (v482b@x v482c@lex* v482d@loc*) (if (pair? v482c@lex*) (if (eq? v482b@x (car v482c@lex*)) (car v482d@loc*) (v4829@f v482b@x (cdr v482c@lex*) (cdr v482d@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) v4829@f) v4827@x v4803@lex* v4804@loc*))) ((letrec ((v480b@f (lambda (v480d@r v480e@env v480f@global* v4810@macro*) (if (null? v480d@r) (values v480e@env v480f@global* v4810@macro*) ((lambda (v4815@x) ((lambda (v4817@label v4818@b) ((lambda (v481b@t) (if (memv v481b@t '(lexical)) ((lambda (v481d@v) ((lambda (v481f@loc v4820@type) (v480b@f (cdr v480d@r) (cons (cons* v4817@label v4820@type v481f@loc) v480e@env) (cons (cons (v2e87@lexical-var v481d@v) v481f@loc) v480f@global*) v4810@macro*)) (v480a@lookup (v2e87@lexical-var v481d@v)) (if (v2e89@lexical-mutable? v481d@v) 'mutable 'global))) (v2d14@binding-value v4818@b)) (if (memv v481b@t '(local-macro)) ((lambda (v4823@loc) (v480b@f (cdr v480d@r) (cons (cons* v4817@label 'global-macro v4823@loc) v480e@env) v480f@global* (cons (cons v4823@loc (v2d14@binding-value v4818@b)) v4810@macro*))) (gensym)) (if (memv v481b@t '(local-macro!)) ((lambda (v4825@loc) (v480b@f (cdr v480d@r) (cons (cons* v4817@label 'global-macro! v4825@loc) v480e@env) v480f@global* (cons (cons v4825@loc (v2d14@binding-value v4818@b)) v4810@macro*))) (gensym)) (if (memv v481b@t '($rtd $module)) (v480b@f (cdr v480d@r) (cons v4815@x v480e@env) v480f@global* v4810@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (v2d12@binding-type v4818@b) (v2d14@binding-value v4818@b))))))) (v2d12@binding-type v4818@b))) (car v4815@x) (cdr v4815@x))) (car v480d@r)))))) v480b@f) v4805@r '() '() '()))) '#f))) (set! v2fd2@generate-temporaries (lambda (v4831@ls) ((lambda (v4833@t) ((lambda (v4835@ls/false) (if v4835@ls/false (apply (lambda (v4837@ls) (map (lambda (v4839@x) (v2cba@make-stx ((lambda (v483b@x) (if (or (symbol? v483b@x) (string? v483b@x)) (gensym v483b@x) (gensym 't))) (v2fea@syntax->datum v4839@x)) v2c6c@top-mark* '() '())) v4837@ls)) v4835@ls/false) ((lambda (v483d@t) ((lambda (v483f@ls/false) (if v483f@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) v483f@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v483d@t))) (v2efb@syntax-dispatch v483d@t '_))) v4833@t))) (v2efb@syntax-dispatch v4833@t 'each-any))) v4831@ls))) (set! v2fd4@free-identifier=? (lambda (v4841@x v4842@y) (if (v2cf0@id? v4841@x) (if (v2cf0@id? v4842@y) (v2cf8@free-id=? v4841@x v4842@y) (assertion-violation 'free-identifier=? '"not an identifier" v4842@y)) (assertion-violation 'free-identifier=? '"not an identifier" v4841@x)))) (set! v2fd6@bound-identifier=? (lambda (v4845@x v4846@y) (if (v2cf0@id? v4845@x) (if (v2cf0@id? v4846@y) (v2cf6@bound-id=? v4845@x v4846@y) (assertion-violation 'bound-identifier=? '"not an identifier" v4846@y)) (assertion-violation 'bound-identifier=? '"not an identifier" v4845@x)))) (set! v2fd8@make-source-condition (lambda (v4849@x) ((lambda (v4853@v484e v4855@v4850 v4857@v484f v485a@v484d v485c@make-source-condition v485e@v484b v4860@v484c v4862@source-condition? v4864@source-filename v4866@source-character) (begin (set! v4853@v484e (make-record-type-descriptor '&source-information v4cb1@v49f8@&condition-rtd 'v4851 '#f '#f '#((immutable file-name) (immutable character)))) (set! v4855@v4850 '#f) (set! v4857@v484f (make-record-constructor-descriptor v4853@v484e v4cb2@v49fa@&condition-rcd v4855@v4850)) (set! v485a@v484d (record-predicate v4853@v484e)) (set! v485c@make-source-condition (record-constructor v4857@v484f)) (set! v485e@v484b (record-accessor v4853@v484e '0)) (set! v4860@v484c (record-accessor v4853@v484e '1)) (set! v4862@source-condition? (condition-predicate v4853@v484e)) (set! v4864@source-filename (condition-accessor v4853@v484e v485e@v484b)) (set! v4866@source-character (condition-accessor v4853@v484e v4860@v484c)) (if (pair? v4849@x) (v485c@make-source-condition (car v4849@x) (cdr v4849@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! v2fda@extract-position-condition (lambda (v4867@x) (v2fd8@make-source-condition (v2fdc@expression-position v4867@x)))) (set! v2fdc@expression-position (lambda (v4869@x) (and (v2cb8@stx? v4869@x) ((lambda (v486b@x) (and (v288f@v27ae@annotation? v486b@x) (v2890@v27b0@annotation-source v486b@x))) (v2cbc@stx-expr v4869@x))))) (set! v2fde@assertion-error (lambda (v486d@expr v486e@pos) (raise (condition (v4ce1@v4abc@make-assertion-violation) (v4cf3@v4aee@make-who-condition 'assert) (v4cb7@v4a4f@make-message-condition '"assertion failed") (v4ce9@v4ad3@make-irritants-condition (list v486d@expr)) (v2fd8@make-source-condition v486e@pos))))) (set! v2fe0@syntax-error (lambda (v4871@x . v4873@args) (begin (if (not (for-all string? v4873@args)) (assertion-violation 'syntax-error '"invalid argument" v4873@args) (void)) (raise (condition (v4cb7@v4a4f@make-message-condition (if (null? v4873@args) '"invalid syntax" (apply string-append v4873@args))) (v4d15@v4b4a@make-syntax-violation (v2fea@syntax->datum v4871@x) '#f) (v2fda@extract-position-condition v4871@x)))))) (set! v2fe2@syntax-violation* (lambda (v4875@who v4876@msg v4877@form v4878@condition-object) (begin (if (not (string? v4876@msg)) (assertion-violation 'syntax-violation '"message is not a string" v4876@msg) (void)) ((lambda (v487d@who) (raise (condition (if v487d@who (v4cf3@v4aee@make-who-condition v487d@who) (condition)) (v4cb7@v4a4f@make-message-condition v4876@msg) v4878@condition-object (v2fda@extract-position-condition v4877@form)))) (if (or (string? v4875@who) (symbol? v4875@who)) v4875@who (if (not v4875@who) ((lambda (v487f@t) ((lambda (v4881@ls/false) (if (and v4881@ls/false (apply (lambda (v4883@id) (v2cf0@id? v4883@id)) v4881@ls/false)) (apply (lambda (v4885@id) (v2fea@syntax->datum v4885@id)) v4881@ls/false) ((lambda (v4887@t) ((lambda (v4889@ls/false) (if (and v4889@ls/false (apply (lambda (v488b@id v488c@rest) (v2cf0@id? v488b@id)) v4889@ls/false)) (apply (lambda (v488f@id v4890@rest) (v2fea@syntax->datum v488f@id)) v4889@ls/false) ((lambda (v4893@t) ((lambda (v4895@ls/false) (if v4895@ls/false (apply (lambda () '#f) v4895@ls/false) (v2fe4@syntax-violation '#f '"invalid syntax" v4893@t))) (v2efb@syntax-dispatch v4893@t '_))) v4887@t))) (v2efb@syntax-dispatch v4887@t '(any . any)))) v487f@t))) (v2efb@syntax-dispatch v487f@t 'any))) v4877@form) (assertion-violation 'syntax-violation '"invalid who argument" v4875@who))))))) (set! v2fe4@syntax-violation (lambda v48a5 ((lambda (v48a6) (if (= v48a6 '3) (apply (lambda (v4897@who v4898@msg v4899@form) (v2fe4@syntax-violation v4897@who v4898@msg v4899@form '#f)) v48a5) (if (= v48a6 '4) (apply (lambda (v489d@who v489e@msg v489f@form v48a0@subform) (v2fe2@syntax-violation* v489d@who v489e@msg v489f@form (v4d15@v4b4a@make-syntax-violation (v2fea@syntax->datum v489f@form) (v2fea@syntax->datum v48a0@subform)))) v48a5) (error 'apply '"invalid arg count")))) (length v48a5)))) (set! v2fe6@identifier? (lambda (v48a7@x) (v2cf0@id? v48a7@x))) (set! v2fe8@datum->syntax (lambda (v48a9@id v48aa@datum) (if (v2cf0@id? v48a9@id) (v2cce@datum->stx v48a9@id v48aa@datum) (assertion-violation 'datum->syntax '"not an identifier" v48a9@id)))) (set! v2fea@syntax->datum (lambda (v48ad@x) (v2d06@stx->datum v48ad@x))) (set! v2fec@compile-r6rs-top-level (lambda (v48af@x*) (call-with-values (lambda () (v2f76@top-level-expander v48af@x*)) (lambda (v48b5@v48b2 v48b6@v48b4) ((lambda (v48b9@invoke-code v48ba@lib*) (lambda () (begin (for-each v2b14@v29b5@invoke-library v48ba@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (v28ee@v28a6@expanded->core v48b9@invoke-code)) (void)) (eval-core (v28ee@v28a6@expanded->core v48b9@invoke-code))))) v48b6@v48b4 v48b5@v48b2))))) (set! v2fee@pre-compile-r6rs-top-level (lambda (v48bd@x*) (call-with-values (lambda () (v2f76@top-level-expander v48bd@x*)) (lambda (v48c3@v48c0 v48c4@v48c2) ((lambda (v48c7@invoke-code v48c8@lib*) (begin (for-each v2b14@v29b5@invoke-library v48c8@lib*) (v2898@v27c0@compile-core (v28ee@v28a6@expanded->core v48c7@invoke-code)))) v48c4@v48c2 v48c3@v48c0))))) (set! v2ff0@interaction-environment ((lambda (v48cb@the-env) (lambda () (or v48cb@the-env ((lambda (v48cd@lib v48ce@rib) (begin ((lambda (v48d1@subst) (begin (v2c95@set-rib-sym*! v48ce@rib (map car v48d1@subst)) (v2c97@set-rib-mark**! v48ce@rib (map (lambda (v48d3@x) v2c6c@top-mark*) v48d1@subst)) (v2c99@set-rib-label*! v48ce@rib (map cdr v48d1@subst)))) (v2ae9@v295f@library-subst v48cd@lib)) ((lambda (v48d5@env) (begin (set! v48cb@the-env v48d5@env) v48d5@env)) (v2fa2@make-interaction-env v48ce@rib '() '())))) (v2b0d@v29a7@find-library-by-name '(mosh interaction)) (v2c9f@make-empty-rib))))) '#f)) (set! v2ff2@top-level-context (v289a@v27c4@make-parameter '#f)) (begin (set! v49e3@v2ff2@top-level-context v2ff2@top-level-context) (set! v49e2@v2ff0@interaction-environment v2ff0@interaction-environment) (set! v49e1@v2fee@pre-compile-r6rs-top-level v2fee@pre-compile-r6rs-top-level) (set! v49e0@v2fec@compile-r6rs-top-level v2fec@compile-r6rs-top-level) (set! v49df@v2fea@syntax->datum v2fea@syntax->datum) (set! v49de@v2fe8@datum->syntax v2fe8@datum->syntax) (set! v49dd@v2fe6@identifier? v2fe6@identifier?) (set! v49dc@v2fe4@syntax-violation v2fe4@syntax-violation) (set! v49db@v2fe2@syntax-violation* v2fe2@syntax-violation*) (set! v49da@v2fe0@syntax-error v2fe0@syntax-error) (set! v49d9@v2fde@assertion-error v2fde@assertion-error) (set! v49d8@v2fdc@expression-position v2fdc@expression-position) (set! v49d7@v2fda@extract-position-condition v2fda@extract-position-condition) (set! v49d6@v2fd8@make-source-condition v2fd8@make-source-condition) (set! v49d5@v2fd6@bound-identifier=? v2fd6@bound-identifier=?) (set! v49d4@v2fd4@free-identifier=? v2fd4@free-identifier=?) (set! v49d3@v2fd2@generate-temporaries v2fd2@generate-temporaries) (set! v49d2@v2fd0@make-export-env/macros v2fd0@make-export-env/macros) (set! v49d1@v2fce@make-export-subst v2fce@make-export-subst) (set! v49d0@v2fcc@build-exports v2fcc@build-exports) (set! v49cf@v2fca@rev-map-append v2fca@rev-map-append) (set! v49ce@v2fc8@boot-library-expand v2fc8@boot-library-expand) (set! v49cd@v2fc6@library-expander v2fc6@library-expander) (set! v49cc@v2fc4@eval v2fc4@eval) (set! v49cb@v2fc2@expand v2fc2@expand) (set! v49ca@v2fc0@scheme-report-environment v2fc0@scheme-report-environment) (set! v49c9@v2fbe@null-environment v2fbe@null-environment) (set! v49c8@v2fbc@environment v2fbc@environment) (set! v49c7@v2fba@environment-symbols v2fba@environment-symbols) (set! v49c6@v2fb8@environment? v2fb8@environment?) (set! v49c5@v2fb6@parse-binding v2fb6@parse-binding) (set! v49c4@v2fb4@environment-bindings v2fb4@environment-bindings) (set! v49c3@v2fb2@interaction-environment-symbols v2fb2@interaction-environment-symbols) (set! v49c2@v2fb0@rp v2fb0@rp) (set! v49c1@v2fae@set-interaction-env-locs! v2fae@set-interaction-env-locs!) (set! v49c0@v2fac@set-interaction-env-r! v2fac@set-interaction-env-r!) (set! v49bf@v2faa@set-interaction-env-rib! v2faa@set-interaction-env-rib!) (set! v49be@v2fa8@interaction-env-locs v2fa8@interaction-env-locs) (set! v49bd@v2fa6@interaction-env-r v2fa6@interaction-env-r) (set! v49bc@v2fa4@interaction-env-rib v2fa4@interaction-env-rib) (set! v49bb@v2fa2@make-interaction-env v2fa2@make-interaction-env) (set! v49ba@v2fa0@interaction-env? v2fa0@interaction-env?) (set! v49b9@v2f9d@v2f95 v2f9d@v2f95) (set! v49b8@v2f9b@v2f96 v2f9b@v2f96) (set! v49b7@v2f99@v2f94 v2f99@v2f94) (set! v49b6@v2f93@rp v2f93@rp) (set! v49b5@v2f91@set-env-itc! v2f91@set-env-itc!) (set! v49b4@v2f8f@set-env-labels! v2f8f@set-env-labels!) (set! v49b3@v2f8d@set-env-names! v2f8d@set-env-names!) (set! v49b2@v2f8b@env-itc v2f8b@env-itc) (set! v49b1@v2f89@env-labels v2f89@env-labels) (set! v49b0@v2f87@env-names v2f87@env-names) (set! v49af@v2f85@make-env v2f85@make-env) (set! v49ae@v2f83@env? v2f83@env?) (set! v49ad@v2f80@v2f78 v2f80@v2f78) (set! v49ac@v2f7e@v2f79 v2f7e@v2f79) (set! v49ab@v2f7c@v2f77 v2f7c@v2f77) (set! v49aa@v2f76@top-level-expander v2f76@top-level-expander) (set! v49a9@v2f74@parse-top-level-program v2f74@parse-top-level-program) (set! v49a8@v2f72@core-library-expander v2f72@core-library-expander) (set! v49a7@v2f70@library-body-expander v2f70@library-body-expander) (set! v49a6@v2f6e@chi-interaction-expr v2f6e@chi-interaction-expr) (set! v49a5@v2f6c@chi-library-internal v2f6c@chi-library-internal) (set! v49a4@v2f6a@imp-collector v2f6a@imp-collector) (set! v49a3@v2f68@vis-collector v2f68@vis-collector) (set! v49a2@v2f66@inv-collector v2f66@inv-collector) (set! v49a1@v2f64@make-collector v2f64@make-collector) (set! v49a0@v2f62@make-top-rib v2f62@make-top-rib) (set! v499f@v2f60@parse-import-spec* v2f60@parse-import-spec*) (set! v499e@v2f5e@parse-library v2f5e@parse-library) (set! v499d@v2f5c@parse-library-name v2f5c@parse-library-name) (set! v499c@v2f5a@parse-exports v2f5a@parse-exports) (set! v499b@v2f58@expand-transformer v2f58@expand-transformer) (set! v499a@v2f56@chi-body* v2f56@chi-body*) (set! v4999@v2f54@chi-internal-module v2f54@chi-internal-module) (set! v4998@v2f52@module-interface-exp-id* v2f52@module-interface-exp-id*) (set! v4997@v2f50@set-module-interface-exp-lab-vec! v2f50@set-module-interface-exp-lab-vec!) (set! v4996@v2f4e@set-module-interface-exp-id-vec! v2f4e@set-module-interface-exp-id-vec!) (set! v4995@v2f4c@set-module-interface-first-mark! v2f4c@set-module-interface-first-mark!) (set! v4994@v2f4a@module-interface-exp-lab-vec v2f4a@module-interface-exp-lab-vec) (set! v4993@v2f48@module-interface-exp-id-vec v2f48@module-interface-exp-id-vec) (set! v4992@v2f46@module-interface-first-mark v2f46@module-interface-first-mark) (set! v4991@v2f44@make-module-interface v2f44@make-module-interface) (set! v4990@v2f42@module-interface? v2f42@module-interface?) (set! v498f@v2f3f@v2f37 v2f3f@v2f37) (set! v498e@v2f3d@v2f38 v2f3d@v2f38) (set! v498d@v2f3b@v2f36 v2f3b@v2f36) (set! v498c@v2f35@parse-module v2f35@parse-module) (set! v498b@v2f33@chi-internal v2f33@chi-internal) (set! v498a@v2f31@find-dups v2f31@find-dups) (set! v4989@v2f2f@find-bound=? v2f2f@find-bound=?) (set! v4988@v2f2d@chi-rhs* v2f2d@chi-rhs*) (set! v4987@v2f2b@expand-interaction-rhs*/init* v2f2b@expand-interaction-rhs*/init*) (set! v4986@v2f29@chi-rhs v2f29@chi-rhs) (set! v4985@v2f27@chi-defun v2f27@chi-defun) (set! v4984@v2f25@chi-lambda-clause* v2f25@chi-lambda-clause*) (set! v4983@v2f23@chi-lambda-clause v2f23@chi-lambda-clause) (set! v4982@v2f21@verify-formals v2f21@verify-formals) (set! v4981@v2f1f@chi-set! v2f1f@chi-set!) (set! v4980@v2f1d@chi-expr v2f1d@chi-expr) (set! v497f@v2f1b@chi-application v2f1b@chi-application) (set! v497e@v2f19@chi-expr* v2f19@chi-expr*) (set! v497d@v2f17@chi-global-macro v2f17@chi-global-macro) (set! v497c@v2f15@chi-local-macro v2f15@chi-local-macro) (set! v497b@v2f13@chi-macro v2f13@chi-macro) (set! v497a@v2f11@do-macro-call v2f11@do-macro-call) (set! v4979@v2f0f@local-macro-transformer v2f0f@local-macro-transformer) (set! v4978@v2f0d@macro-transformer v2f0d@macro-transformer) (set! v4977@v2f0b@symbol-macro v2f0b@symbol-macro) (set! v4976@v2f09@core-macro-transformer v2f09@core-macro-transformer) (set! v4975@v2f07@syntax-transformer v2f07@syntax-transformer) (set! v4974@v2f05@ellipsis-map v2f05@ellipsis-map) (set! v4973@v2f03@syntax-case-transformer v2f03@syntax-case-transformer) (set! v4972@v2f01@verify-literals v2f01@verify-literals) (set! v4971@v2eff@underscore? v2eff@underscore?) (set! v4970@v2efd@ellipsis? v2efd@ellipsis?) (set! v496f@v2efb@syntax-dispatch v2efb@syntax-dispatch) (set! v496e@v2ef9@convert-pattern v2ef9@convert-pattern) (set! v496d@v2ef7@foreign-call-transformer v2ef7@foreign-call-transformer) (set! v496c@v2ef5@parameterize-macro v2ef5@parameterize-macro) (set! v496b@v2ef3@incorrect-usage-macro v2ef3@incorrect-usage-macro) (set! v496a@v2ef1@define-condition-type-macro v2ef1@define-condition-type-macro) (set! v4969@v2eef@define-record-type-macro v2eef@define-record-type-macro) (set! v4968@v2eed@define-struct-macro v2eed@define-struct-macro) (set! v4967@v2eeb@quasisyntax-macro v2eeb@quasisyntax-macro) (set! v4966@v2ee9@quasiquote-macro v2ee9@quasiquote-macro) (set! v4965@v2ee7@syntax-rules-macro v2ee7@syntax-rules-macro) (set! v4964@v2ee5@include-into-macro v2ee5@include-into-macro) (set! v4963@v2ee3@include-macro v2ee3@include-macro) (set! v4962@v2ee1@do-include v2ee1@do-include) (set! v4961@v2edf@cond-macro v2edf@cond-macro) (set! v4960@v2edd@and-macro v2edd@and-macro) (set! v495f@v2edb@or-macro v2edb@or-macro) (set! v495e@v2ed9@let*-macro v2ed9@let*-macro) (set! v495d@v2ed7@do-macro v2ed7@do-macro) (set! v495c@v2ed5@identifier-syntax-macro v2ed5@identifier-syntax-macro) (set! v495b@v2ed3@endianness-macro v2ed3@endianness-macro) (set! v495a@v2ed1@assert-macro v2ed1@assert-macro) (set! v4959@v2ecf@delay-macro v2ecf@delay-macro) (set! v4958@v2ecd@time-macro v2ecd@time-macro) (set! v4957@v2ecb@define-enumeration-macro v2ecb@define-enumeration-macro) (set! v4956@v2ec9@guard-macro v2ec9@guard-macro) (set! v4955@v2ec7@trace-letrec-syntax-macro v2ec7@trace-letrec-syntax-macro) (set! v4954@v2ec5@trace-let-syntax-macro v2ec5@trace-let-syntax-macro) (set! v4953@v2ec3@trace-let/rec-syntax v2ec3@trace-let/rec-syntax) (set! v4952@v2ec1@trace-define-syntax-macro v2ec1@trace-define-syntax-macro) (set! v4951@v2ebf@trace-define-macro v2ebf@trace-define-macro) (set! v4950@v2ebd@trace-lambda-macro v2ebd@trace-lambda-macro) (set! v494f@v2ebb@let*-values-macro v2ebb@let*-values-macro) (set! v494e@v2eb9@let-values-macro v2eb9@let-values-macro) (set! v494d@v2eb7@let-macro v2eb7@let-macro) (set! v494c@v2eb5@invalid-fmls-error v2eb5@invalid-fmls-error) (set! v494b@v2eb3@with-syntax-macro v2eb3@with-syntax-macro) (set! v494a@v2eb1@bless v2eb1@bless) (set! v4949@v2eaf@lambda-transformer v2eaf@lambda-transformer) (set! v4948@v2ead@case-lambda-transformer v2ead@case-lambda-transformer) (set! v4947@v2eab@quote-transformer v2eab@quote-transformer) (set! v4946@v2ea9@case-macro v2ea9@case-macro) (set! v4945@v2ea7@or-transformer v2ea7@or-transformer) (set! v4944@v2ea5@and-transformer v2ea5@and-transformer) (set! v4943@v2ea3@if-transformer v2ea3@if-transformer) (set! v4942@v2ea1@unless-macro v2ea1@unless-macro) (set! v4941@v2e9f@when-macro v2e9f@when-macro) (set! v4940@v2e9d@record-constructor-descriptor-transformer v2e9d@record-constructor-descriptor-transformer) (set! v493f@v2e9b@record-type-descriptor-transformer v2e9b@record-type-descriptor-transformer) (set! v493e@v2e99@type-descriptor-transformer v2e99@type-descriptor-transformer) (set! v493d@v2e97@fluid-let-syntax-transformer v2e97@fluid-let-syntax-transformer) (set! v493c@v2e95@letrec*-transformer v2e95@letrec*-transformer) (set! v493b@v2e93@letrec-transformer v2e93@letrec-transformer) (set! v493a@v2e91@letrec-helper v2e91@letrec-helper) (set! v4939@v2e8f@add-lexicals v2e8f@add-lexicals) (set! v4938@v2e8d@add-lexical v2e8d@add-lexical) (set! v4937@v2e8b@set-lexical-mutable! v2e8b@set-lexical-mutable!) (set! v4936@v2e89@lexical-mutable? v2e89@lexical-mutable?) (set! v4935@v2e87@lexical-var v2e87@lexical-var) (set! v4934@v2e85@scheme-stx v2e85@scheme-stx) (set! v4933@v2e83@scheme-stx-hashtable v2e83@scheme-stx-hashtable) (set! v4932@v2e81@parse-define-syntax v2e81@parse-define-syntax) (set! v4931@v2e7f@parse-define v2e7f@parse-define) (set! v4930@v2d2e@make-eval-transformer v2d2e@make-eval-transformer) (set! v492f@v2d2c@variable-transformer-procedure v2d2c@variable-transformer-procedure) (set! v492e@v2d2a@variable-transformer? v2d2a@variable-transformer?) (set! v492d@v2d28@make-variable-transformer v2d28@make-variable-transformer) (set! v492c@v2d26@sanitize-binding v2d26@sanitize-binding) (set! v492b@v2d18@syntax-type v2d18@syntax-type) (set! v492a@v2d16@raise-unbound-error v2d16@raise-unbound-error) (set! v4929@v2d14@binding-value v2d14@binding-value) (set! v4928@v2d12@binding-type v2d12@binding-type) (set! v4927@v2d10@make-binding v2d10@make-binding) (set! v4926@v2d0e@label->binding v2d0e@label->binding) (set! v4925@v2d0c@id->real-label v2d0c@id->real-label) (set! v4924@v2d0a@id->label v2d0a@id->label) (set! v4923@v2d08@same-marks*? v2d08@same-marks*?) (set! v4922@v2d06@stx->datum v2d06@stx->datum) (set! v4921@v2d04@strip v2d04@strip) (set! v4920@v2d02@strip-annotations v2d02@strip-annotations) (set! v491f@v2d00@self-evaluating? v2d00@self-evaluating?) (set! v491e@v2cfe@bound-id-member? v2cfe@bound-id-member?) (set! v491d@v2cfc@distinct-bound-ids? v2cfc@distinct-bound-ids?) (set! v491c@v2cfa@valid-bound-ids? v2cfa@valid-bound-ids?) (set! v491b@v2cf8@free-id=? v2cf8@free-id=?) (set! v491a@v2cf6@bound-id=? v2cf6@bound-id=?) (set! v4919@v2cf4@same-marks? v2cf4@same-marks?) (set! v4918@v2cf2@id->sym v2cf2@id->sym) (set! v4917@v2cf0@id? v2cf0@id?) (set! v4916@v2cee@syntax->list v2cee@syntax->list) (set! v4915@v2cec@syntax-cdr v2cec@syntax-cdr) (set! v4914@v2cea@syntax-car v2cea@syntax-car) (set! v4913@v2ce8@syntax-list? v2ce8@syntax-list?) (set! v4912@v2ce6@syntax-null? v2ce6@syntax-null?) (set! v4911@v2ce4@syntax-vector? v2ce4@syntax-vector?) (set! v4910@v2ce2@syntax-pair? v2ce2@syntax-pair?) (set! v490f@v2ce0@syntax-vector->list v2ce0@syntax-vector->list) (set! v490e@v2cde@syntax-kind? v2cde@syntax-kind?) (set! v490d@v2cdc@add-subst v2cdc@add-subst) (set! v490c@v2cda@add-mark v2cda@add-mark) (set! v490b@v2cd8@mkstx v2cd8@mkstx) (set! v490a@v2cd6@join-wraps v2cd6@join-wraps) (set! v4909@v2cd4@anti-mark? v2cd4@anti-mark?) (set! v4908@v2cd2@anti-mark v2cd2@anti-mark) (set! v4907@v2cd0@gen-mark v2cd0@gen-mark) (set! v4906@v2cce@datum->stx v2cce@datum->stx) (set! v4905@v2ccc@rp v2ccc@rp) (set! v4904@v2cca@set-stx-ae*! v2cca@set-stx-ae*!) (set! v4903@v2cc8@set-stx-subst*! v2cc8@set-stx-subst*!) (set! v4902@v2cc6@set-stx-mark*! v2cc6@set-stx-mark*!) (set! v4901@v2cc4@set-stx-expr! v2cc4@set-stx-expr!) (set! v4900@v2cc2@stx-ae* v2cc2@stx-ae*) (set! v48ff@v2cc0@stx-subst* v2cc0@stx-subst*) (set! v48fe@v2cbe@stx-mark* v2cbe@stx-mark*) (set! v48fd@v2cbc@stx-expr v2cbc@stx-expr) (set! v48fc@v2cba@make-stx v2cba@make-stx) (set! v48fb@v2cb8@stx? v2cb8@stx?) (set! v48fa@v2cb5@v2cad v2cb5@v2cad) (set! v48f9@v2cb3@v2cae v2cb3@v2cae) (set! v48f8@v2cb1@v2cac v2cb1@v2cac) (set! v48f7@v2cab@make-full-rib v2cab@make-full-rib) (set! v48f6@v2ca9@unseal-rib! v2ca9@unseal-rib!) (set! v48f5@v2ca7@seal-rib! v2ca7@seal-rib!) (set! v48f4@v2ca5@make-rib-map v2ca5@make-rib-map) (set! v48f3@v2ca3@extend-rib/nc! v2ca3@extend-rib/nc!) (set! v48f2@v2ca1@extend-rib! v2ca1@extend-rib!) (set! v48f1@v2c9f@make-empty-rib v2c9f@make-empty-rib) (set! v48f0@v2c9d@set-rib-cache! v2c9d@set-rib-cache!) (set! v48ef@v2c9b@set-rib-sealed/freq! v2c9b@set-rib-sealed/freq!) (set! v48ee@v2c99@set-rib-label*! v2c99@set-rib-label*!) (set! v48ed@v2c97@set-rib-mark**! v2c97@set-rib-mark**!) (set! v48ec@v2c95@set-rib-sym*! v2c95@set-rib-sym*!) (set! v48eb@v2c93@rib-cache v2c93@rib-cache) (set! v48ea@v2c91@rib-sealed/freq v2c91@rib-sealed/freq) (set! v48e9@v2c8f@rib-label* v2c8f@rib-label*) (set! v48e8@v2c8d@rib-mark** v2c8d@rib-mark**) (set! v48e7@v2c8b@rib-sym* v2c8b@rib-sym*) (set! v48e6@v2c89@make-rib v2c89@make-rib) (set! v48e5@v2c87@rib? v2c87@rib?) (set! v48e4@v2c84@v2c7c v2c84@v2c7c) (set! v48e3@v2c82@v2c7d v2c82@v2c7d) (set! v48e2@v2c80@v2c7b v2c80@v2c7b) (set! v48e1@v2c7a@gen-define-label v2c7a@gen-define-label) (set! v48e0@v2c78@gen-define-label+loc v2c78@gen-define-label+loc) (set! v48df@v2c76@gen-top-level-label v2c76@gen-top-level-label) (set! v48de@v2c74@gen-label v2c74@gen-label) (set! v48dd@v2c72@gen-global v2c72@gen-global) (set! v48dc@v2c70@gen-lexical v2c70@gen-lexical) (set! v48db@v2c6e@top-marked? v2c6e@top-marked?) (set! v48da@v2c6c@top-mark* v2c6c@top-mark*) (set! v48d9@v2c67@set-union v2c67@set-union) (set! v48d8@v2c65@set-cons v2c65@set-cons) (set! v48d7@v2c63@file-options-macro v2c63@file-options-macro) (v2b0a@v29a1@current-library-expander v2fc6@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (v49ed@v49e8 v49ef@v49ea v49f1@v49e9 v49f4@&condition? v49f6@make-&condition v49f8@&condition-rtd v49fa@&condition-rcd v4a46@v4a41 v4a48@v4a43 v4a4a@v4a42 v4a4d@p? v4a4f@make-message-condition v4a51@v4a40 v4a53@message-condition? v4a55@condition-message v4a57@&message-rtd v4a59@&message-rcd v4a5f@v4a5a v4a61@v4a5c v4a63@v4a5b v4a66@p? v4a68@make-warning v4a6a@warning? v4a6c@&warning-rtd v4a6e@&warning-rcd v4a74@v4a6f v4a76@v4a71 v4a78@v4a70 v4a7b@p? v4a7d@make-serious-condition v4a7f@serious-condition? v4a81@&serious-rtd v4a83@&serious-rcd v4a89@v4a84 v4a8b@v4a86 v4a8d@v4a85 v4a90@p? v4a92@make-error v4a94@error? v4a96@&error-rtd v4a98@&error-rcd v4a9e@v4a99 v4aa0@v4a9b v4aa2@v4a9a v4aa5@p? v4aa7@make-violation v4aa9@violation? v4aab@&violation-rtd v4aad@&violation-rcd v4ab3@v4aae v4ab5@v4ab0 v4ab7@v4aaf v4aba@p? v4abc@make-assertion-violation v4abe@assertion-violation? v4ac0@&assertion-rtd v4ac2@&assertion-rcd v4aca@v4ac5 v4acc@v4ac7 v4ace@v4ac6 v4ad1@p? v4ad3@make-irritants-condition v4ad5@v4ac4 v4ad7@irritants-condition? v4ad9@condition-irritants v4adb@&irritants-rtd v4add@&irritants-rcd v4ae5@v4ae0 v4ae7@v4ae2 v4ae9@v4ae1 v4aec@p? v4aee@make-who-condition v4af0@v4adf v4af2@who-condition? v4af4@condition-who v4af6@&who-rtd v4af8@&who-rcd v4afe@v4af9 v4b00@v4afb v4b02@v4afa v4b05@p? v4b07@make-non-continuable-violation v4b09@non-continuable-violation? v4b0b@&non-continuable-rtd v4b0d@&non-continuable-rcd v4b13@v4b0e v4b15@v4b10 v4b17@v4b0f v4b1a@p? v4b1c@make-implementation-restriction-violation v4b1e@implementation-restriction-violation? v4b20@&implementation-restriction-rtd v4b22@&implementation-restriction-rcd v4b28@v4b23 v4b2a@v4b25 v4b2c@v4b24 v4b2f@p? v4b31@make-lexical-violation v4b33@lexical-violation? v4b35@&lexical-rtd v4b37@&lexical-rcd v4b41@v4b3c v4b43@v4b3e v4b45@v4b3d v4b48@p? v4b4a@make-syntax-violation v4b4c@v4b39 v4b4e@v4b3b v4b50@syntax-violation? v4b52@syntax-violation-form v4b54@syntax-violation-subform v4b56@&syntax-rtd v4b58@&syntax-rcd v4b5e@v4b59 v4b60@v4b5b v4b62@v4b5a v4b65@p? v4b67@make-undefined-violation v4b69@undefined-violation? v4b6b@&undefined-rtd v4b6d@&undefined-rcd v4b73@v4b6e v4b75@v4b70 v4b77@v4b6f v4b7a@p? v4b7c@make-i/o-error v4b7e@i/o-error? v4b80@&i/o-rtd v4b82@&i/o-rcd v4b88@v4b83 v4b8a@v4b85 v4b8c@v4b84 v4b8f@p? v4b91@make-i/o-read-error v4b93@i/o-read-error? v4b95@&i/o-read-rtd v4b97@&i/o-read-rcd v4b9d@v4b98 v4b9f@v4b9a v4ba1@v4b99 v4ba4@p? v4ba6@make-i/o-write-error v4ba8@i/o-write-error? v4baa@&i/o-write-rtd v4bac@&i/o-write-rcd v4bb4@v4baf v4bb6@v4bb1 v4bb8@v4bb0 v4bbb@p? v4bbd@make-i/o-invalid-position-error v4bbf@v4bae v4bc1@i/o-invalid-position-error? v4bc3@i/o-error-position v4bc5@&i/o-invalid-position-rtd v4bc7@&i/o-invalid-position-rcd v4bcf@v4bca v4bd1@v4bcc v4bd3@v4bcb v4bd6@p? v4bd8@make-i/o-filename-error v4bda@v4bc9 v4bdc@i/o-filename-error? v4bde@i/o-error-filename v4be0@&i/o-filename-rtd v4be2@&i/o-filename-rcd v4be8@v4be3 v4bea@v4be5 v4bec@v4be4 v4bef@p? v4bf1@make-i/o-file-protection-error v4bf3@i/o-file-protection-error? v4bf5@&i/o-file-protection-rtd v4bf7@&i/o-file-protection-rcd v4bfd@v4bf8 v4bff@v4bfa v4c01@v4bf9 v4c04@p? v4c06@make-i/o-file-is-read-only-error v4c08@i/o-file-is-read-only-error? v4c0a@&i/o-file-is-read-only-rtd v4c0c@&i/o-file-is-read-only-rcd v4c12@v4c0d v4c14@v4c0f v4c16@v4c0e v4c19@p? v4c1b@make-i/o-file-already-exists-error v4c1d@i/o-file-already-exists-error? v4c1f@&i/o-file-already-exists-rtd v4c21@&i/o-file-already-exists-rcd v4c27@v4c22 v4c29@v4c24 v4c2b@v4c23 v4c2e@p? v4c30@make-i/o-file-does-not-exist-error v4c32@i/o-file-does-not-exist-error? v4c34@&i/o-file-does-not-exist-rtd v4c36@&i/o-file-does-not-exist-rcd v4c3e@v4c39 v4c40@v4c3b v4c42@v4c3a v4c45@p? v4c47@make-i/o-port-error v4c49@v4c38 v4c4b@i/o-port-error? v4c4d@i/o-error-port v4c4f@&i/o-port-rtd v4c51@&i/o-port-rcd v4c57@v4c52 v4c59@v4c54 v4c5b@v4c53 v4c5e@p? v4c60@make-i/o-decoding-error v4c62@i/o-decoding-error? v4c64@&i/o-decoding-rtd v4c66@&i/o-decoding-rcd v4c6e@v4c69 v4c70@v4c6b v4c72@v4c6a v4c75@p? v4c77@make-i/o-encoding-error v4c79@v4c68 v4c7b@i/o-encoding-error? v4c7d@i/o-encoding-error-char v4c7f@&i/o-encoding-rtd v4c81@&i/o-encoding-rcd v4c87@v4c82 v4c89@v4c84 v4c8b@v4c83 v4c8e@p? v4c90@make-no-infinities-violation v4c92@no-infinities-violation? v4c94@&no-infinities-rtd v4c96@&no-infinities-rcd v4c9c@v4c97 v4c9e@v4c99 v4ca0@v4c98 v4ca3@p? v4ca5@make-no-nans-violation v4ca7@no-nans-violation? v4ca9@&no-nans-rtd v4cab@&no-nans-rcd) (begin (set! v49ed@v49e8 (make-record-type-descriptor '&condition '#f 'v49eb '#f '#f '#())) (set! v49ef@v49ea '#f) (set! v49f1@v49e9 (make-record-constructor-descriptor v49ed@v49e8 '#f v49ef@v49ea)) (set! v49f4@&condition? (record-predicate v49ed@v49e8)) (set! v49f6@make-&condition (record-constructor v49f1@v49e9)) (set! v49f8@&condition-rtd v49ed@v49e8) (set! v49fa@&condition-rcd v49f1@v49e9) (set! v4a46@v4a41 (make-record-type-descriptor '&message v49ed@v49e8 'v4a44 '#f '#f '#((immutable message)))) (set! v4a48@v4a43 '#f) (set! v4a4a@v4a42 (make-record-constructor-descriptor v4a46@v4a41 v49f1@v49e9 v4a48@v4a43)) (set! v4a4d@p? (record-predicate v4a46@v4a41)) (set! v4a4f@make-message-condition (record-constructor v4a4a@v4a42)) (set! v4a51@v4a40 (record-accessor v4a46@v4a41 '0)) (set! v4a53@message-condition? (condition-predicate v4a46@v4a41)) (set! v4a55@condition-message (condition-accessor v4a46@v4a41 v4a51@v4a40)) (set! v4a57@&message-rtd v4a46@v4a41) (set! v4a59@&message-rcd v4a4a@v4a42) (set! v4a5f@v4a5a (make-record-type-descriptor '&warning v49ed@v49e8 'v4a5d '#f '#f '#())) (set! v4a61@v4a5c '#f) (set! v4a63@v4a5b (make-record-constructor-descriptor v4a5f@v4a5a v49f1@v49e9 v4a61@v4a5c)) (set! v4a66@p? (record-predicate v4a5f@v4a5a)) (set! v4a68@make-warning (record-constructor v4a63@v4a5b)) (set! v4a6a@warning? (condition-predicate v4a5f@v4a5a)) (set! v4a6c@&warning-rtd v4a5f@v4a5a) (set! v4a6e@&warning-rcd v4a63@v4a5b) (set! v4a74@v4a6f (make-record-type-descriptor '&serious v49ed@v49e8 'v4a72 '#f '#f '#())) (set! v4a76@v4a71 '#f) (set! v4a78@v4a70 (make-record-constructor-descriptor v4a74@v4a6f v49f1@v49e9 v4a76@v4a71)) (set! v4a7b@p? (record-predicate v4a74@v4a6f)) (set! v4a7d@make-serious-condition (record-constructor v4a78@v4a70)) (set! v4a7f@serious-condition? (condition-predicate v4a74@v4a6f)) (set! v4a81@&serious-rtd v4a74@v4a6f) (set! v4a83@&serious-rcd v4a78@v4a70) (set! v4a89@v4a84 (make-record-type-descriptor '&error v4a74@v4a6f 'v4a87 '#f '#f '#())) (set! v4a8b@v4a86 '#f) (set! v4a8d@v4a85 (make-record-constructor-descriptor v4a89@v4a84 v4a78@v4a70 v4a8b@v4a86)) (set! v4a90@p? (record-predicate v4a89@v4a84)) (set! v4a92@make-error (record-constructor v4a8d@v4a85)) (set! v4a94@error? (condition-predicate v4a89@v4a84)) (set! v4a96@&error-rtd v4a89@v4a84) (set! v4a98@&error-rcd v4a8d@v4a85) (set! v4a9e@v4a99 (make-record-type-descriptor '&violation v4a74@v4a6f 'v4a9c '#f '#f '#())) (set! v4aa0@v4a9b '#f) (set! v4aa2@v4a9a (make-record-constructor-descriptor v4a9e@v4a99 v4a78@v4a70 v4aa0@v4a9b)) (set! v4aa5@p? (record-predicate v4a9e@v4a99)) (set! v4aa7@make-violation (record-constructor v4aa2@v4a9a)) (set! v4aa9@violation? (condition-predicate v4a9e@v4a99)) (set! v4aab@&violation-rtd v4a9e@v4a99) (set! v4aad@&violation-rcd v4aa2@v4a9a) (set! v4ab3@v4aae (make-record-type-descriptor '&assertion v4a9e@v4a99 'v4ab1 '#f '#f '#())) (set! v4ab5@v4ab0 '#f) (set! v4ab7@v4aaf (make-record-constructor-descriptor v4ab3@v4aae v4aa2@v4a9a v4ab5@v4ab0)) (set! v4aba@p? (record-predicate v4ab3@v4aae)) (set! v4abc@make-assertion-violation (record-constructor v4ab7@v4aaf)) (set! v4abe@assertion-violation? (condition-predicate v4ab3@v4aae)) (set! v4ac0@&assertion-rtd v4ab3@v4aae) (set! v4ac2@&assertion-rcd v4ab7@v4aaf) (set! v4aca@v4ac5 (make-record-type-descriptor '&irritants v49ed@v49e8 'v4ac8 '#f '#f '#((immutable irritants)))) (set! v4acc@v4ac7 '#f) (set! v4ace@v4ac6 (make-record-constructor-descriptor v4aca@v4ac5 v49f1@v49e9 v4acc@v4ac7)) (set! v4ad1@p? (record-predicate v4aca@v4ac5)) (set! v4ad3@make-irritants-condition (record-constructor v4ace@v4ac6)) (set! v4ad5@v4ac4 (record-accessor v4aca@v4ac5 '0)) (set! v4ad7@irritants-condition? (condition-predicate v4aca@v4ac5)) (set! v4ad9@condition-irritants (condition-accessor v4aca@v4ac5 v4ad5@v4ac4)) (set! v4adb@&irritants-rtd v4aca@v4ac5) (set! v4add@&irritants-rcd v4ace@v4ac6) (set! v4ae5@v4ae0 (make-record-type-descriptor '&who v49ed@v49e8 'v4ae3 '#f '#f '#((immutable who)))) (set! v4ae7@v4ae2 '#f) (set! v4ae9@v4ae1 (make-record-constructor-descriptor v4ae5@v4ae0 v49f1@v49e9 v4ae7@v4ae2)) (set! v4aec@p? (record-predicate v4ae5@v4ae0)) (set! v4aee@make-who-condition (record-constructor v4ae9@v4ae1)) (set! v4af0@v4adf (record-accessor v4ae5@v4ae0 '0)) (set! v4af2@who-condition? (condition-predicate v4ae5@v4ae0)) (set! v4af4@condition-who (condition-accessor v4ae5@v4ae0 v4af0@v4adf)) (set! v4af6@&who-rtd v4ae5@v4ae0) (set! v4af8@&who-rcd v4ae9@v4ae1) (set! v4afe@v4af9 (make-record-type-descriptor '&non-continuable v4a9e@v4a99 'v4afc '#f '#f '#())) (set! v4b00@v4afb '#f) (set! v4b02@v4afa (make-record-constructor-descriptor v4afe@v4af9 v4aa2@v4a9a v4b00@v4afb)) (set! v4b05@p? (record-predicate v4afe@v4af9)) (set! v4b07@make-non-continuable-violation (record-constructor v4b02@v4afa)) (set! v4b09@non-continuable-violation? (condition-predicate v4afe@v4af9)) (set! v4b0b@&non-continuable-rtd v4afe@v4af9) (set! v4b0d@&non-continuable-rcd v4b02@v4afa) (set! v4b13@v4b0e (make-record-type-descriptor '&implementation-restriction v4a9e@v4a99 'v4b11 '#f '#f '#())) (set! v4b15@v4b10 '#f) (set! v4b17@v4b0f (make-record-constructor-descriptor v4b13@v4b0e v4aa2@v4a9a v4b15@v4b10)) (set! v4b1a@p? (record-predicate v4b13@v4b0e)) (set! v4b1c@make-implementation-restriction-violation (record-constructor v4b17@v4b0f)) (set! v4b1e@implementation-restriction-violation? (condition-predicate v4b13@v4b0e)) (set! v4b20@&implementation-restriction-rtd v4b13@v4b0e) (set! v4b22@&implementation-restriction-rcd v4b17@v4b0f) (set! v4b28@v4b23 (make-record-type-descriptor '&lexical v4a9e@v4a99 'v4b26 '#f '#f '#())) (set! v4b2a@v4b25 '#f) (set! v4b2c@v4b24 (make-record-constructor-descriptor v4b28@v4b23 v4aa2@v4a9a v4b2a@v4b25)) (set! v4b2f@p? (record-predicate v4b28@v4b23)) (set! v4b31@make-lexical-violation (record-constructor v4b2c@v4b24)) (set! v4b33@lexical-violation? (condition-predicate v4b28@v4b23)) (set! v4b35@&lexical-rtd v4b28@v4b23) (set! v4b37@&lexical-rcd v4b2c@v4b24) (set! v4b41@v4b3c (make-record-type-descriptor '&syntax v4a9e@v4a99 'v4b3f '#f '#f '#((immutable form) (immutable subform)))) (set! v4b43@v4b3e '#f) (set! v4b45@v4b3d (make-record-constructor-descriptor v4b41@v4b3c v4aa2@v4a9a v4b43@v4b3e)) (set! v4b48@p? (record-predicate v4b41@v4b3c)) (set! v4b4a@make-syntax-violation (record-constructor v4b45@v4b3d)) (set! v4b4c@v4b39 (record-accessor v4b41@v4b3c '0)) (set! v4b4e@v4b3b (record-accessor v4b41@v4b3c '1)) (set! v4b50@syntax-violation? (condition-predicate v4b41@v4b3c)) (set! v4b52@syntax-violation-form (condition-accessor v4b41@v4b3c v4b4c@v4b39)) (set! v4b54@syntax-violation-subform (condition-accessor v4b41@v4b3c v4b4e@v4b3b)) (set! v4b56@&syntax-rtd v4b41@v4b3c) (set! v4b58@&syntax-rcd v4b45@v4b3d) (set! v4b5e@v4b59 (make-record-type-descriptor '&undefined v4a9e@v4a99 'v4b5c '#f '#f '#())) (set! v4b60@v4b5b '#f) (set! v4b62@v4b5a (make-record-constructor-descriptor v4b5e@v4b59 v4aa2@v4a9a v4b60@v4b5b)) (set! v4b65@p? (record-predicate v4b5e@v4b59)) (set! v4b67@make-undefined-violation (record-constructor v4b62@v4b5a)) (set! v4b69@undefined-violation? (condition-predicate v4b5e@v4b59)) (set! v4b6b@&undefined-rtd v4b5e@v4b59) (set! v4b6d@&undefined-rcd v4b62@v4b5a) (set! v4b73@v4b6e (make-record-type-descriptor '&i/o v4a89@v4a84 'v4b71 '#f '#f '#())) (set! v4b75@v4b70 '#f) (set! v4b77@v4b6f (make-record-constructor-descriptor v4b73@v4b6e v4a8d@v4a85 v4b75@v4b70)) (set! v4b7a@p? (record-predicate v4b73@v4b6e)) (set! v4b7c@make-i/o-error (record-constructor v4b77@v4b6f)) (set! v4b7e@i/o-error? (condition-predicate v4b73@v4b6e)) (set! v4b80@&i/o-rtd v4b73@v4b6e) (set! v4b82@&i/o-rcd v4b77@v4b6f) (set! v4b88@v4b83 (make-record-type-descriptor '&i/o-read v4b73@v4b6e 'v4b86 '#f '#f '#())) (set! v4b8a@v4b85 '#f) (set! v4b8c@v4b84 (make-record-constructor-descriptor v4b88@v4b83 v4b77@v4b6f v4b8a@v4b85)) (set! v4b8f@p? (record-predicate v4b88@v4b83)) (set! v4b91@make-i/o-read-error (record-constructor v4b8c@v4b84)) (set! v4b93@i/o-read-error? (condition-predicate v4b88@v4b83)) (set! v4b95@&i/o-read-rtd v4b88@v4b83) (set! v4b97@&i/o-read-rcd v4b8c@v4b84) (set! v4b9d@v4b98 (make-record-type-descriptor '&i/o-write v4b73@v4b6e 'v4b9b '#f '#f '#())) (set! v4b9f@v4b9a '#f) (set! v4ba1@v4b99 (make-record-constructor-descriptor v4b9d@v4b98 v4b77@v4b6f v4b9f@v4b9a)) (set! v4ba4@p? (record-predicate v4b9d@v4b98)) (set! v4ba6@make-i/o-write-error (record-constructor v4ba1@v4b99)) (set! v4ba8@i/o-write-error? (condition-predicate v4b9d@v4b98)) (set! v4baa@&i/o-write-rtd v4b9d@v4b98) (set! v4bac@&i/o-write-rcd v4ba1@v4b99) (set! v4bb4@v4baf (make-record-type-descriptor '&i/o-invalid-position v4b73@v4b6e 'v4bb2 '#f '#f '#((immutable position)))) (set! v4bb6@v4bb1 '#f) (set! v4bb8@v4bb0 (make-record-constructor-descriptor v4bb4@v4baf v4b77@v4b6f v4bb6@v4bb1)) (set! v4bbb@p? (record-predicate v4bb4@v4baf)) (set! v4bbd@make-i/o-invalid-position-error (record-constructor v4bb8@v4bb0)) (set! v4bbf@v4bae (record-accessor v4bb4@v4baf '0)) (set! v4bc1@i/o-invalid-position-error? (condition-predicate v4bb4@v4baf)) (set! v4bc3@i/o-error-position (condition-accessor v4bb4@v4baf v4bbf@v4bae)) (set! v4bc5@&i/o-invalid-position-rtd v4bb4@v4baf) (set! v4bc7@&i/o-invalid-position-rcd v4bb8@v4bb0) (set! v4bcf@v4bca (make-record-type-descriptor '&i/o-filename v4b73@v4b6e 'v4bcd '#f '#f '#((immutable filename)))) (set! v4bd1@v4bcc '#f) (set! v4bd3@v4bcb (make-record-constructor-descriptor v4bcf@v4bca v4b77@v4b6f v4bd1@v4bcc)) (set! v4bd6@p? (record-predicate v4bcf@v4bca)) (set! v4bd8@make-i/o-filename-error (record-constructor v4bd3@v4bcb)) (set! v4bda@v4bc9 (record-accessor v4bcf@v4bca '0)) (set! v4bdc@i/o-filename-error? (condition-predicate v4bcf@v4bca)) (set! v4bde@i/o-error-filename (condition-accessor v4bcf@v4bca v4bda@v4bc9)) (set! v4be0@&i/o-filename-rtd v4bcf@v4bca) (set! v4be2@&i/o-filename-rcd v4bd3@v4bcb) (set! v4be8@v4be3 (make-record-type-descriptor '&i/o-file-protection v4bcf@v4bca 'v4be6 '#f '#f '#())) (set! v4bea@v4be5 '#f) (set! v4bec@v4be4 (make-record-constructor-descriptor v4be8@v4be3 v4bd3@v4bcb v4bea@v4be5)) (set! v4bef@p? (record-predicate v4be8@v4be3)) (set! v4bf1@make-i/o-file-protection-error (record-constructor v4bec@v4be4)) (set! v4bf3@i/o-file-protection-error? (condition-predicate v4be8@v4be3)) (set! v4bf5@&i/o-file-protection-rtd v4be8@v4be3) (set! v4bf7@&i/o-file-protection-rcd v4bec@v4be4) (set! v4bfd@v4bf8 (make-record-type-descriptor '&i/o-file-is-read-only v4be8@v4be3 'v4bfb '#f '#f '#())) (set! v4bff@v4bfa '#f) (set! v4c01@v4bf9 (make-record-constructor-descriptor v4bfd@v4bf8 v4bec@v4be4 v4bff@v4bfa)) (set! v4c04@p? (record-predicate v4bfd@v4bf8)) (set! v4c06@make-i/o-file-is-read-only-error (record-constructor v4c01@v4bf9)) (set! v4c08@i/o-file-is-read-only-error? (condition-predicate v4bfd@v4bf8)) (set! v4c0a@&i/o-file-is-read-only-rtd v4bfd@v4bf8) (set! v4c0c@&i/o-file-is-read-only-rcd v4c01@v4bf9) (set! v4c12@v4c0d (make-record-type-descriptor '&i/o-file-already-exists v4bcf@v4bca 'v4c10 '#f '#f '#())) (set! v4c14@v4c0f '#f) (set! v4c16@v4c0e (make-record-constructor-descriptor v4c12@v4c0d v4bd3@v4bcb v4c14@v4c0f)) (set! v4c19@p? (record-predicate v4c12@v4c0d)) (set! v4c1b@make-i/o-file-already-exists-error (record-constructor v4c16@v4c0e)) (set! v4c1d@i/o-file-already-exists-error? (condition-predicate v4c12@v4c0d)) (set! v4c1f@&i/o-file-already-exists-rtd v4c12@v4c0d) (set! v4c21@&i/o-file-already-exists-rcd v4c16@v4c0e) (set! v4c27@v4c22 (make-record-type-descriptor '&i/o-file-does-not-exist v4bcf@v4bca 'v4c25 '#f '#f '#())) (set! v4c29@v4c24 '#f) (set! v4c2b@v4c23 (make-record-constructor-descriptor v4c27@v4c22 v4bd3@v4bcb v4c29@v4c24)) (set! v4c2e@p? (record-predicate v4c27@v4c22)) (set! v4c30@make-i/o-file-does-not-exist-error (record-constructor v4c2b@v4c23)) (set! v4c32@i/o-file-does-not-exist-error? (condition-predicate v4c27@v4c22)) (set! v4c34@&i/o-file-does-not-exist-rtd v4c27@v4c22) (set! v4c36@&i/o-file-does-not-exist-rcd v4c2b@v4c23) (set! v4c3e@v4c39 (make-record-type-descriptor '&i/o-port v4b73@v4b6e 'v4c3c '#f '#f '#((immutable port)))) (set! v4c40@v4c3b '#f) (set! v4c42@v4c3a (make-record-constructor-descriptor v4c3e@v4c39 v4b77@v4b6f v4c40@v4c3b)) (set! v4c45@p? (record-predicate v4c3e@v4c39)) (set! v4c47@make-i/o-port-error (record-constructor v4c42@v4c3a)) (set! v4c49@v4c38 (record-accessor v4c3e@v4c39 '0)) (set! v4c4b@i/o-port-error? (condition-predicate v4c3e@v4c39)) (set! v4c4d@i/o-error-port (condition-accessor v4c3e@v4c39 v4c49@v4c38)) (set! v4c4f@&i/o-port-rtd v4c3e@v4c39) (set! v4c51@&i/o-port-rcd v4c42@v4c3a) (set! v4c57@v4c52 (make-record-type-descriptor '&i/o-decoding v4c3e@v4c39 'v4c55 '#f '#f '#())) (set! v4c59@v4c54 '#f) (set! v4c5b@v4c53 (make-record-constructor-descriptor v4c57@v4c52 v4c42@v4c3a v4c59@v4c54)) (set! v4c5e@p? (record-predicate v4c57@v4c52)) (set! v4c60@make-i/o-decoding-error (record-constructor v4c5b@v4c53)) (set! v4c62@i/o-decoding-error? (condition-predicate v4c57@v4c52)) (set! v4c64@&i/o-decoding-rtd v4c57@v4c52) (set! v4c66@&i/o-decoding-rcd v4c5b@v4c53) (set! v4c6e@v4c69 (make-record-type-descriptor '&i/o-encoding v4c3e@v4c39 'v4c6c '#f '#f '#((immutable char)))) (set! v4c70@v4c6b '#f) (set! v4c72@v4c6a (make-record-constructor-descriptor v4c6e@v4c69 v4c42@v4c3a v4c70@v4c6b)) (set! v4c75@p? (record-predicate v4c6e@v4c69)) (set! v4c77@make-i/o-encoding-error (record-constructor v4c72@v4c6a)) (set! v4c79@v4c68 (record-accessor v4c6e@v4c69 '0)) (set! v4c7b@i/o-encoding-error? (condition-predicate v4c6e@v4c69)) (set! v4c7d@i/o-encoding-error-char (condition-accessor v4c6e@v4c69 v4c79@v4c68)) (set! v4c7f@&i/o-encoding-rtd v4c6e@v4c69) (set! v4c81@&i/o-encoding-rcd v4c72@v4c6a) (set! v4c87@v4c82 (make-record-type-descriptor '&no-infinities v4b13@v4b0e 'v4c85 '#f '#f '#())) (set! v4c89@v4c84 '#f) (set! v4c8b@v4c83 (make-record-constructor-descriptor v4c87@v4c82 v4b17@v4b0f v4c89@v4c84)) (set! v4c8e@p? (record-predicate v4c87@v4c82)) (set! v4c90@make-no-infinities-violation (record-constructor v4c8b@v4c83)) (set! v4c92@no-infinities-violation? (condition-predicate v4c87@v4c82)) (set! v4c94@&no-infinities-rtd v4c87@v4c82) (set! v4c96@&no-infinities-rcd v4c8b@v4c83) (set! v4c9c@v4c97 (make-record-type-descriptor '&no-nans v4b13@v4b0e 'v4c9a '#f '#f '#())) (set! v4c9e@v4c99 '#f) (set! v4ca0@v4c98 (make-record-constructor-descriptor v4c9c@v4c97 v4b17@v4b0f v4c9e@v4c99)) (set! v4ca3@p? (record-predicate v4c9c@v4c97)) (set! v4ca5@make-no-nans-violation (record-constructor v4ca0@v4c98)) (set! v4ca7@no-nans-violation? (condition-predicate v4c9c@v4c97)) (set! v4ca9@&no-nans-rtd v4c9c@v4c97) (set! v4cab@&no-nans-rcd v4ca0@v4c98) (begin (set! v4d9c@v4cab@&no-nans-rcd v4cab@&no-nans-rcd) (set! v4d9b@v4ca9@&no-nans-rtd v4ca9@&no-nans-rtd) (set! v4d9a@v4ca7@no-nans-violation? v4ca7@no-nans-violation?) (set! v4d99@v4ca5@make-no-nans-violation v4ca5@make-no-nans-violation) (set! v4d98@v4ca3@p? v4ca3@p?) (set! v4d97@v4ca0@v4c98 v4ca0@v4c98) (set! v4d96@v4c9e@v4c99 v4c9e@v4c99) (set! v4d95@v4c9c@v4c97 v4c9c@v4c97) (set! v4d94@v4c96@&no-infinities-rcd v4c96@&no-infinities-rcd) (set! v4d93@v4c94@&no-infinities-rtd v4c94@&no-infinities-rtd) (set! v4d92@v4c92@no-infinities-violation? v4c92@no-infinities-violation?) (set! v4d91@v4c90@make-no-infinities-violation v4c90@make-no-infinities-violation) (set! v4d90@v4c8e@p? v4c8e@p?) (set! v4d8f@v4c8b@v4c83 v4c8b@v4c83) (set! v4d8e@v4c89@v4c84 v4c89@v4c84) (set! v4d8d@v4c87@v4c82 v4c87@v4c82) (set! v4d8c@v4c81@&i/o-encoding-rcd v4c81@&i/o-encoding-rcd) (set! v4d8b@v4c7f@&i/o-encoding-rtd v4c7f@&i/o-encoding-rtd) (set! v4d8a@v4c7d@i/o-encoding-error-char v4c7d@i/o-encoding-error-char) (set! v4d89@v4c7b@i/o-encoding-error? v4c7b@i/o-encoding-error?) (set! v4d88@v4c79@v4c68 v4c79@v4c68) (set! v4d87@v4c77@make-i/o-encoding-error v4c77@make-i/o-encoding-error) (set! v4d86@v4c75@p? v4c75@p?) (set! v4d85@v4c72@v4c6a v4c72@v4c6a) (set! v4d84@v4c70@v4c6b v4c70@v4c6b) (set! v4d83@v4c6e@v4c69 v4c6e@v4c69) (set! v4d82@v4c66@&i/o-decoding-rcd v4c66@&i/o-decoding-rcd) (set! v4d81@v4c64@&i/o-decoding-rtd v4c64@&i/o-decoding-rtd) (set! v4d80@v4c62@i/o-decoding-error? v4c62@i/o-decoding-error?) (set! v4d7f@v4c60@make-i/o-decoding-error v4c60@make-i/o-decoding-error) (set! v4d7e@v4c5e@p? v4c5e@p?) (set! v4d7d@v4c5b@v4c53 v4c5b@v4c53) (set! v4d7c@v4c59@v4c54 v4c59@v4c54) (set! v4d7b@v4c57@v4c52 v4c57@v4c52) (set! v4d7a@v4c51@&i/o-port-rcd v4c51@&i/o-port-rcd) (set! v4d79@v4c4f@&i/o-port-rtd v4c4f@&i/o-port-rtd) (set! v4d78@v4c4d@i/o-error-port v4c4d@i/o-error-port) (set! v4d77@v4c4b@i/o-port-error? v4c4b@i/o-port-error?) (set! v4d76@v4c49@v4c38 v4c49@v4c38) (set! v4d75@v4c47@make-i/o-port-error v4c47@make-i/o-port-error) (set! v4d74@v4c45@p? v4c45@p?) (set! v4d73@v4c42@v4c3a v4c42@v4c3a) (set! v4d72@v4c40@v4c3b v4c40@v4c3b) (set! v4d71@v4c3e@v4c39 v4c3e@v4c39) (set! v4d70@v4c36@&i/o-file-does-not-exist-rcd v4c36@&i/o-file-does-not-exist-rcd) (set! v4d6f@v4c34@&i/o-file-does-not-exist-rtd v4c34@&i/o-file-does-not-exist-rtd) (set! v4d6e@v4c32@i/o-file-does-not-exist-error? v4c32@i/o-file-does-not-exist-error?) (set! v4d6d@v4c30@make-i/o-file-does-not-exist-error v4c30@make-i/o-file-does-not-exist-error) (set! v4d6c@v4c2e@p? v4c2e@p?) (set! v4d6b@v4c2b@v4c23 v4c2b@v4c23) (set! v4d6a@v4c29@v4c24 v4c29@v4c24) (set! v4d69@v4c27@v4c22 v4c27@v4c22) (set! v4d68@v4c21@&i/o-file-already-exists-rcd v4c21@&i/o-file-already-exists-rcd) (set! v4d67@v4c1f@&i/o-file-already-exists-rtd v4c1f@&i/o-file-already-exists-rtd) (set! v4d66@v4c1d@i/o-file-already-exists-error? v4c1d@i/o-file-already-exists-error?) (set! v4d65@v4c1b@make-i/o-file-already-exists-error v4c1b@make-i/o-file-already-exists-error) (set! v4d64@v4c19@p? v4c19@p?) (set! v4d63@v4c16@v4c0e v4c16@v4c0e) (set! v4d62@v4c14@v4c0f v4c14@v4c0f) (set! v4d61@v4c12@v4c0d v4c12@v4c0d) (set! v4d60@v4c0c@&i/o-file-is-read-only-rcd v4c0c@&i/o-file-is-read-only-rcd) (set! v4d5f@v4c0a@&i/o-file-is-read-only-rtd v4c0a@&i/o-file-is-read-only-rtd) (set! v4d5e@v4c08@i/o-file-is-read-only-error? v4c08@i/o-file-is-read-only-error?) (set! v4d5d@v4c06@make-i/o-file-is-read-only-error v4c06@make-i/o-file-is-read-only-error) (set! v4d5c@v4c04@p? v4c04@p?) (set! v4d5b@v4c01@v4bf9 v4c01@v4bf9) (set! v4d5a@v4bff@v4bfa v4bff@v4bfa) (set! v4d59@v4bfd@v4bf8 v4bfd@v4bf8) (set! v4d58@v4bf7@&i/o-file-protection-rcd v4bf7@&i/o-file-protection-rcd) (set! v4d57@v4bf5@&i/o-file-protection-rtd v4bf5@&i/o-file-protection-rtd) (set! v4d56@v4bf3@i/o-file-protection-error? v4bf3@i/o-file-protection-error?) (set! v4d55@v4bf1@make-i/o-file-protection-error v4bf1@make-i/o-file-protection-error) (set! v4d54@v4bef@p? v4bef@p?) (set! v4d53@v4bec@v4be4 v4bec@v4be4) (set! v4d52@v4bea@v4be5 v4bea@v4be5) (set! v4d51@v4be8@v4be3 v4be8@v4be3) (set! v4d50@v4be2@&i/o-filename-rcd v4be2@&i/o-filename-rcd) (set! v4d4f@v4be0@&i/o-filename-rtd v4be0@&i/o-filename-rtd) (set! v4d4e@v4bde@i/o-error-filename v4bde@i/o-error-filename) (set! v4d4d@v4bdc@i/o-filename-error? v4bdc@i/o-filename-error?) (set! v4d4c@v4bda@v4bc9 v4bda@v4bc9) (set! v4d4b@v4bd8@make-i/o-filename-error v4bd8@make-i/o-filename-error) (set! v4d4a@v4bd6@p? v4bd6@p?) (set! v4d49@v4bd3@v4bcb v4bd3@v4bcb) (set! v4d48@v4bd1@v4bcc v4bd1@v4bcc) (set! v4d47@v4bcf@v4bca v4bcf@v4bca) (set! v4d46@v4bc7@&i/o-invalid-position-rcd v4bc7@&i/o-invalid-position-rcd) (set! v4d45@v4bc5@&i/o-invalid-position-rtd v4bc5@&i/o-invalid-position-rtd) (set! v4d44@v4bc3@i/o-error-position v4bc3@i/o-error-position) (set! v4d43@v4bc1@i/o-invalid-position-error? v4bc1@i/o-invalid-position-error?) (set! v4d42@v4bbf@v4bae v4bbf@v4bae) (set! v4d41@v4bbd@make-i/o-invalid-position-error v4bbd@make-i/o-invalid-position-error) (set! v4d40@v4bbb@p? v4bbb@p?) (set! v4d3f@v4bb8@v4bb0 v4bb8@v4bb0) (set! v4d3e@v4bb6@v4bb1 v4bb6@v4bb1) (set! v4d3d@v4bb4@v4baf v4bb4@v4baf) (set! v4d3c@v4bac@&i/o-write-rcd v4bac@&i/o-write-rcd) (set! v4d3b@v4baa@&i/o-write-rtd v4baa@&i/o-write-rtd) (set! v4d3a@v4ba8@i/o-write-error? v4ba8@i/o-write-error?) (set! v4d39@v4ba6@make-i/o-write-error v4ba6@make-i/o-write-error) (set! v4d38@v4ba4@p? v4ba4@p?) (set! v4d37@v4ba1@v4b99 v4ba1@v4b99) (set! v4d36@v4b9f@v4b9a v4b9f@v4b9a) (set! v4d35@v4b9d@v4b98 v4b9d@v4b98) (set! v4d34@v4b97@&i/o-read-rcd v4b97@&i/o-read-rcd) (set! v4d33@v4b95@&i/o-read-rtd v4b95@&i/o-read-rtd) (set! v4d32@v4b93@i/o-read-error? v4b93@i/o-read-error?) (set! v4d31@v4b91@make-i/o-read-error v4b91@make-i/o-read-error) (set! v4d30@v4b8f@p? v4b8f@p?) (set! v4d2f@v4b8c@v4b84 v4b8c@v4b84) (set! v4d2e@v4b8a@v4b85 v4b8a@v4b85) (set! v4d2d@v4b88@v4b83 v4b88@v4b83) (set! v4d2c@v4b82@&i/o-rcd v4b82@&i/o-rcd) (set! v4d2b@v4b80@&i/o-rtd v4b80@&i/o-rtd) (set! v4d2a@v4b7e@i/o-error? v4b7e@i/o-error?) (set! v4d29@v4b7c@make-i/o-error v4b7c@make-i/o-error) (set! v4d28@v4b7a@p? v4b7a@p?) (set! v4d27@v4b77@v4b6f v4b77@v4b6f) (set! v4d26@v4b75@v4b70 v4b75@v4b70) (set! v4d25@v4b73@v4b6e v4b73@v4b6e) (set! v4d24@v4b6d@&undefined-rcd v4b6d@&undefined-rcd) (set! v4d23@v4b6b@&undefined-rtd v4b6b@&undefined-rtd) (set! v4d22@v4b69@undefined-violation? v4b69@undefined-violation?) (set! v4d21@v4b67@make-undefined-violation v4b67@make-undefined-violation) (set! v4d20@v4b65@p? v4b65@p?) (set! v4d1f@v4b62@v4b5a v4b62@v4b5a) (set! v4d1e@v4b60@v4b5b v4b60@v4b5b) (set! v4d1d@v4b5e@v4b59 v4b5e@v4b59) (set! v4d1c@v4b58@&syntax-rcd v4b58@&syntax-rcd) (set! v4d1b@v4b56@&syntax-rtd v4b56@&syntax-rtd) (set! v4d1a@v4b54@syntax-violation-subform v4b54@syntax-violation-subform) (set! v4d19@v4b52@syntax-violation-form v4b52@syntax-violation-form) (set! v4d18@v4b50@syntax-violation? v4b50@syntax-violation?) (set! v4d17@v4b4e@v4b3b v4b4e@v4b3b) (set! v4d16@v4b4c@v4b39 v4b4c@v4b39) (set! v4d15@v4b4a@make-syntax-violation v4b4a@make-syntax-violation) (set! v4d14@v4b48@p? v4b48@p?) (set! v4d13@v4b45@v4b3d v4b45@v4b3d) (set! v4d12@v4b43@v4b3e v4b43@v4b3e) (set! v4d11@v4b41@v4b3c v4b41@v4b3c) (set! v4d10@v4b37@&lexical-rcd v4b37@&lexical-rcd) (set! v4d0f@v4b35@&lexical-rtd v4b35@&lexical-rtd) (set! v4d0e@v4b33@lexical-violation? v4b33@lexical-violation?) (set! v4d0d@v4b31@make-lexical-violation v4b31@make-lexical-violation) (set! v4d0c@v4b2f@p? v4b2f@p?) (set! v4d0b@v4b2c@v4b24 v4b2c@v4b24) (set! v4d0a@v4b2a@v4b25 v4b2a@v4b25) (set! v4d09@v4b28@v4b23 v4b28@v4b23) (set! v4d08@v4b22@&implementation-restriction-rcd v4b22@&implementation-restriction-rcd) (set! v4d07@v4b20@&implementation-restriction-rtd v4b20@&implementation-restriction-rtd) (set! v4d06@v4b1e@implementation-restriction-violation? v4b1e@implementation-restriction-violation?) (set! v4d05@v4b1c@make-implementation-restriction-violation v4b1c@make-implementation-restriction-violation) (set! v4d04@v4b1a@p? v4b1a@p?) (set! v4d03@v4b17@v4b0f v4b17@v4b0f) (set! v4d02@v4b15@v4b10 v4b15@v4b10) (set! v4d01@v4b13@v4b0e v4b13@v4b0e) (set! v4d00@v4b0d@&non-continuable-rcd v4b0d@&non-continuable-rcd) (set! v4cff@v4b0b@&non-continuable-rtd v4b0b@&non-continuable-rtd) (set! v4cfe@v4b09@non-continuable-violation? v4b09@non-continuable-violation?) (set! v4cfd@v4b07@make-non-continuable-violation v4b07@make-non-continuable-violation) (set! v4cfc@v4b05@p? v4b05@p?) (set! v4cfb@v4b02@v4afa v4b02@v4afa) (set! v4cfa@v4b00@v4afb v4b00@v4afb) (set! v4cf9@v4afe@v4af9 v4afe@v4af9) (set! v4cf8@v4af8@&who-rcd v4af8@&who-rcd) (set! v4cf7@v4af6@&who-rtd v4af6@&who-rtd) (set! v4cf6@v4af4@condition-who v4af4@condition-who) (set! v4cf5@v4af2@who-condition? v4af2@who-condition?) (set! v4cf4@v4af0@v4adf v4af0@v4adf) (set! v4cf3@v4aee@make-who-condition v4aee@make-who-condition) (set! v4cf2@v4aec@p? v4aec@p?) (set! v4cf1@v4ae9@v4ae1 v4ae9@v4ae1) (set! v4cf0@v4ae7@v4ae2 v4ae7@v4ae2) (set! v4cef@v4ae5@v4ae0 v4ae5@v4ae0) (set! v4cee@v4add@&irritants-rcd v4add@&irritants-rcd) (set! v4ced@v4adb@&irritants-rtd v4adb@&irritants-rtd) (set! v4cec@v4ad9@condition-irritants v4ad9@condition-irritants) (set! v4ceb@v4ad7@irritants-condition? v4ad7@irritants-condition?) (set! v4cea@v4ad5@v4ac4 v4ad5@v4ac4) (set! v4ce9@v4ad3@make-irritants-condition v4ad3@make-irritants-condition) (set! v4ce8@v4ad1@p? v4ad1@p?) (set! v4ce7@v4ace@v4ac6 v4ace@v4ac6) (set! v4ce6@v4acc@v4ac7 v4acc@v4ac7) (set! v4ce5@v4aca@v4ac5 v4aca@v4ac5) (set! v4ce4@v4ac2@&assertion-rcd v4ac2@&assertion-rcd) (set! v4ce3@v4ac0@&assertion-rtd v4ac0@&assertion-rtd) (set! v4ce2@v4abe@assertion-violation? v4abe@assertion-violation?) (set! v4ce1@v4abc@make-assertion-violation v4abc@make-assertion-violation) (set! v4ce0@v4aba@p? v4aba@p?) (set! v4cdf@v4ab7@v4aaf v4ab7@v4aaf) (set! v4cde@v4ab5@v4ab0 v4ab5@v4ab0) (set! v4cdd@v4ab3@v4aae v4ab3@v4aae) (set! v4cdc@v4aad@&violation-rcd v4aad@&violation-rcd) (set! v4cdb@v4aab@&violation-rtd v4aab@&violation-rtd) (set! v4cda@v4aa9@violation? v4aa9@violation?) (set! v4cd9@v4aa7@make-violation v4aa7@make-violation) (set! v4cd8@v4aa5@p? v4aa5@p?) (set! v4cd7@v4aa2@v4a9a v4aa2@v4a9a) (set! v4cd6@v4aa0@v4a9b v4aa0@v4a9b) (set! v4cd5@v4a9e@v4a99 v4a9e@v4a99) (set! v4cd4@v4a98@&error-rcd v4a98@&error-rcd) (set! v4cd3@v4a96@&error-rtd v4a96@&error-rtd) (set! v4cd2@v4a94@error? v4a94@error?) (set! v4cd1@v4a92@make-error v4a92@make-error) (set! v4cd0@v4a90@p? v4a90@p?) (set! v4ccf@v4a8d@v4a85 v4a8d@v4a85) (set! v4cce@v4a8b@v4a86 v4a8b@v4a86) (set! v4ccd@v4a89@v4a84 v4a89@v4a84) (set! v4ccc@v4a83@&serious-rcd v4a83@&serious-rcd) (set! v4ccb@v4a81@&serious-rtd v4a81@&serious-rtd) (set! v4cca@v4a7f@serious-condition? v4a7f@serious-condition?) (set! v4cc9@v4a7d@make-serious-condition v4a7d@make-serious-condition) (set! v4cc8@v4a7b@p? v4a7b@p?) (set! v4cc7@v4a78@v4a70 v4a78@v4a70) (set! v4cc6@v4a76@v4a71 v4a76@v4a71) (set! v4cc5@v4a74@v4a6f v4a74@v4a6f) (set! v4cc4@v4a6e@&warning-rcd v4a6e@&warning-rcd) (set! v4cc3@v4a6c@&warning-rtd v4a6c@&warning-rtd) (set! v4cc2@v4a6a@warning? v4a6a@warning?) (set! v4cc1@v4a68@make-warning v4a68@make-warning) (set! v4cc0@v4a66@p? v4a66@p?) (set! v4cbf@v4a63@v4a5b v4a63@v4a5b) (set! v4cbe@v4a61@v4a5c v4a61@v4a5c) (set! v4cbd@v4a5f@v4a5a v4a5f@v4a5a) (set! v4cbc@v4a59@&message-rcd v4a59@&message-rcd) (set! v4cbb@v4a57@&message-rtd v4a57@&message-rtd) (set! v4cba@v4a55@condition-message v4a55@condition-message) (set! v4cb9@v4a53@message-condition? v4a53@message-condition?) (set! v4cb8@v4a51@v4a40 v4a51@v4a40) (set! v4cb7@v4a4f@make-message-condition v4a4f@make-message-condition) (set! v4cb6@v4a4d@p? v4a4d@p?) (set! v4cb5@v4a4a@v4a42 v4a4a@v4a42) (set! v4cb4@v4a48@v4a43 v4a48@v4a43) (set! v4cb3@v4a46@v4a41 v4a46@v4a41) (set! v4cb2@v49fa@&condition-rcd v49fa@&condition-rcd) (set! v4cb1@v49f8@&condition-rtd v49f8@&condition-rtd) (set! v4cb0@v49f6@make-&condition v49f6@make-&condition) (set! v4caf@v49f4@&condition? v49f4@&condition?) (set! v4cae@v49f1@v49e9 v49f1@v49e9) (set! v4cad@v49ef@v49ea v49ef@v49ea) (set! v4cac@v49ed@v49e8 v49ed@v49e8)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (v28eb@v28a0@current-primitive-locations (lambda (v520e@x) ((lambda (v5210@t) (if v5210@t (cdr v5210@t) '#f)) (assq v520e@x '((&no-nans-rcd . v4d9c@v4cab@&no-nans-rcd) (&no-nans-rtd . v4d9b@v4ca9@&no-nans-rtd) (&no-infinities-rcd . v4d94@v4c96@&no-infinities-rcd) (&no-infinities-rtd . v4d93@v4c94@&no-infinities-rtd) (&i/o-encoding-rcd . v4d8c@v4c81@&i/o-encoding-rcd) (&i/o-encoding-rtd . v4d8b@v4c7f@&i/o-encoding-rtd) (&i/o-decoding-rcd . v4d82@v4c66@&i/o-decoding-rcd) (&i/o-decoding-rtd . v4d81@v4c64@&i/o-decoding-rtd) (&i/o-port-rcd . v4d7a@v4c51@&i/o-port-rcd) (&i/o-port-rtd . v4d79@v4c4f@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . v4d70@v4c36@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . v4d6f@v4c34@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . v4d68@v4c21@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . v4d67@v4c1f@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . v4d60@v4c0c@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . v4d5f@v4c0a@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . v4d58@v4bf7@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . v4d57@v4bf5@&i/o-file-protection-rtd) (&i/o-filename-rcd . v4d50@v4be2@&i/o-filename-rcd) (&i/o-filename-rtd . v4d4f@v4be0@&i/o-filename-rtd) (&i/o-invalid-position-rcd . v4d46@v4bc7@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . v4d45@v4bc5@&i/o-invalid-position-rtd) (&i/o-write-rcd . v4d3c@v4bac@&i/o-write-rcd) (&i/o-write-rtd . v4d3b@v4baa@&i/o-write-rtd) (&i/o-read-rcd . v4d34@v4b97@&i/o-read-rcd) (&i/o-read-rtd . v4d33@v4b95@&i/o-read-rtd) (&i/o-rcd . v4d2c@v4b82@&i/o-rcd) (&i/o-rtd . v4d2b@v4b80@&i/o-rtd) (&undefined-rcd . v4d24@v4b6d@&undefined-rcd) (&undefined-rtd . v4d23@v4b6b@&undefined-rtd) (&syntax-rcd . v4d1c@v4b58@&syntax-rcd) (&syntax-rtd . v4d1b@v4b56@&syntax-rtd) (&lexical-rcd . v4d10@v4b37@&lexical-rcd) (&lexical-rtd . v4d0f@v4b35@&lexical-rtd) (&implementation-restriction-rcd . v4d08@v4b22@&implementation-restriction-rcd) (&implementation-restriction-rtd . v4d07@v4b20@&implementation-restriction-rtd) (&non-continuable-rcd . v4d00@v4b0d@&non-continuable-rcd) (&non-continuable-rtd . v4cff@v4b0b@&non-continuable-rtd) (&who-rcd . v4cf8@v4af8@&who-rcd) (&who-rtd . v4cf7@v4af6@&who-rtd) (&irritants-rcd . v4cee@v4add@&irritants-rcd) (&irritants-rtd . v4ced@v4adb@&irritants-rtd) (&assertion-rcd . v4ce4@v4ac2@&assertion-rcd) (&assertion-rtd . v4ce3@v4ac0@&assertion-rtd) (&violation-rcd . v4cdc@v4aad@&violation-rcd) (&violation-rtd . v4cdb@v4aab@&violation-rtd) (&error-rcd . v4cd4@v4a98@&error-rcd) (&error-rtd . v4cd3@v4a96@&error-rtd) (&serious-rcd . v4ccc@v4a83@&serious-rcd) (&serious-rtd . v4ccb@v4a81@&serious-rtd) (&warning-rcd . v4cc4@v4a6e@&warning-rcd) (&warning-rtd . v4cc3@v4a6c@&warning-rtd) (&message-rcd . v4cbc@v4a59@&message-rcd) (&message-rtd . v4cbb@v4a57@&message-rtd) (&condition-rcd . v4cb2@v49fa@&condition-rcd) (&condition-rtd . v4cb1@v49f8@&condition-rtd) (syntax-error . v49da@v2fe0@syntax-error) (syntax-dispatch . v496f@v2efb@syntax-dispatch) (load . v4ecd@v4db8@load) (interaction-environment . v49e2@v2ff0@interaction-environment) (library-path . v2b02@v2991@library-path) (make-parameter . v289a@v27c4@make-parameter) (make-variable-transformer . v492d@v2d28@make-variable-transformer) (identifier? . v49dd@v2fe6@identifier?) (generate-temporaries . v49d3@v2fd2@generate-temporaries) (free-identifier=? . v49d4@v2fd4@free-identifier=?) (syntax->datum . v49df@v2fea@syntax->datum) (datum->syntax . v49de@v2fe8@datum->syntax) (bound-identifier=? . v49d5@v2fd6@bound-identifier=?) (make-i/o-write-error . v4d39@v4ba6@make-i/o-write-error) (make-i/o-read-error . v4d31@v4b91@make-i/o-read-error) (make-i/o-port-error . v4d75@v4c47@make-i/o-port-error) (make-i/o-invalid-position-error . v4d41@v4bbd@make-i/o-invalid-position-error) (make-i/o-filename-error . v4d4b@v4bd8@make-i/o-filename-error) (make-i/o-file-protection-error . v4d55@v4bf1@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . v4d5d@v4c06@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . v4d6d@v4c30@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . v4d65@v4c1b@make-i/o-file-already-exists-error) (make-i/o-error . v4d29@v4b7c@make-i/o-error) (make-i/o-encoding-error . v4d87@v4c77@make-i/o-encoding-error) (make-i/o-decoding-error . v4d7f@v4c60@make-i/o-decoding-error) (i/o-write-error? . v4d3a@v4ba8@i/o-write-error?) (i/o-read-error? . v4d32@v4b93@i/o-read-error?) (i/o-port-error? . v4d77@v4c4b@i/o-port-error?) (i/o-invalid-position-error? . v4d43@v4bc1@i/o-invalid-position-error?) (i/o-filename-error? . v4d4d@v4bdc@i/o-filename-error?) (i/o-file-protection-error? . v4d56@v4bf3@i/o-file-protection-error?) (i/o-file-is-read-only-error? . v4d5e@v4c08@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . v4d6e@v4c32@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . v4d66@v4c1d@i/o-file-already-exists-error?) (i/o-error? . v4d2a@v4b7e@i/o-error?) (i/o-error-position . v4d44@v4bc3@i/o-error-position) (i/o-error-port . v4d78@v4c4d@i/o-error-port) (i/o-error-filename . v4d4e@v4bde@i/o-error-filename) (i/o-encoding-error? . v4d89@v4c7b@i/o-encoding-error?) (i/o-encoding-error-char . v4d8a@v4c7d@i/o-encoding-error-char) (i/o-decoding-error? . v4d80@v4c62@i/o-decoding-error?) (scheme-report-environment . v49ca@v2fc0@scheme-report-environment) (null-environment . v49c9@v2fbe@null-environment) (command-line . v4eca@v4db2@command-line) (eval . v49cc@v2fc4@eval) (environment . v49c8@v2fbc@environment) (who-condition? . v4cf5@v4af2@who-condition?) (warning? . v4cc2@v4a6a@warning?) (violation? . v4cda@v4aa9@violation?) (undefined-violation? . v4d22@v4b69@undefined-violation?) (syntax-violation? . v4d18@v4b50@syntax-violation?) (syntax-violation-subform . v4d1a@v4b54@syntax-violation-subform) (syntax-violation-form . v4d19@v4b52@syntax-violation-form) (syntax-violation . v49dc@v2fe4@syntax-violation) (serious-condition? . v4cca@v4a7f@serious-condition?) (non-continuable-violation? . v4cfe@v4b09@non-continuable-violation?) (message-condition? . v4cb9@v4a53@message-condition?) (make-who-condition . v4cf3@v4aee@make-who-condition) (make-warning . v4cc1@v4a68@make-warning) (make-violation . v4cd9@v4aa7@make-violation) (make-undefined-violation . v4d21@v4b67@make-undefined-violation) (make-syntax-violation . v4d15@v4b4a@make-syntax-violation) (make-serious-condition . v4cc9@v4a7d@make-serious-condition) (make-non-continuable-violation . v4cfd@v4b07@make-non-continuable-violation) (make-message-condition . v4cb7@v4a4f@make-message-condition) (make-lexical-violation . v4d0d@v4b31@make-lexical-violation) (make-irritants-condition . v4ce9@v4ad3@make-irritants-condition) (make-implementation-restriction-violation . v4d05@v4b1c@make-implementation-restriction-violation) (make-error . v4cd1@v4a92@make-error) (make-assertion-violation . v4ce1@v4abc@make-assertion-violation) (lexical-violation? . v4d0e@v4b33@lexical-violation?) (irritants-condition? . v4ceb@v4ad7@irritants-condition?) (implementation-restriction-violation? . v4d06@v4b1e@implementation-restriction-violation?) (error? . v4cd2@v4a94@error?) (condition-who . v4cf6@v4af4@condition-who) (condition-message . v4cba@v4a55@condition-message) (condition-irritants . v4cec@v4ad9@condition-irritants) (assertion-violation? . v4ce2@v4abe@assertion-violation?) (no-nans-violation? . v4d9a@v4ca7@no-nans-violation?) (no-infinities-violation? . v4d92@v4c92@no-infinities-violation?) (make-no-nans-violation . v4d99@v4ca5@make-no-nans-violation) (make-no-infinities-violation . v4d91@v4c90@make-no-infinities-violation) (assertion-error . v49d9@v2fde@assertion-error)))))) (v2b12@v29b1@install-library 'v51eb '(mosh interaction) '() '() '() '() '((regexp? . v51e3) (alist->eq-hash-table . v51e0) (format . v51dd) (string-split . v51d2) (call-process . v51cc) (set-current-directory! . v51c8) (expand-path . v51c7) (current-directory . v51c6) (%spawn . v51c5) (%waitpid . v51c4) (pointer-ref-c-int64 . v51c3) (pointer-ref-c-int32 . v51c2) (pointer-ref-c-int16 . v51c1) (pointer-ref-c-int8 . v51c0) (pointer-ref-c-uint64 . v51bf) (pointer-ref-c-uint32 . v51be) (pointer-ref-c-uint16 . v51bd) (pointer-ref-c-uint8 . v51bc) (pointer-set-c-int64! . v51bb) (pointer-set-c-int32! . v51ba) (pointer-set-c-int16! . v51b9) (pointer-set-c-int8! . v51b8) (pointer-set-c-pointer! . v51b7) (pointer-set-c-double! . v51b6) (pointer-set-c-float! . v51b5) (pointer-set-c-long-long! . v51b4) (pointer-set-c-long! . v51b3) (pointer-set-c-int! . v51b2) (pointer-set-c-short! . v51b1) (pointer-set-c-char! . v51b0) (pointer-ref-c-pointer . v51af) (pointer-ref-c-double . v51ae) (pointer-ref-c-float . v51ad) (pointer-ref-c-unsigned-long-long . v51ac) (pointer-ref-c-signed-long-long . v51ab) (pointer-ref-c-unsigned-long . v51aa) (pointer-ref-c-signed-long . v51a9) (pointer-ref-c-unsigned-int . v51a8) (pointer-ref-c-signed-int . v51a7) (pointer-ref-c-unsigned-short . v51a6) (pointer-ref-c-signed-short . v51a5) (pointer-ref-c-unsigned-char . v51a4) (pointer-ref-c-signed-char . v51a3) (pointer->integer . v51a2) (integer->pointer . v51a1) (pointer? . v51a0) (%ffi-supported? . v519f) (%ffi-pointer-ref . v519e) (%ffi-pointer->string . v519d) (%ffi-call->string-or-zero . v519c) (%ffi-call->double . v519b) (%ffi-call->void* . v519a) (%ffi-call->void . v5199) (%ffi-call->int . v5198) (%ffi-lookup . v5197) (%ffi-open . v5196) (%fork . v5195) (%pipe . v5194) (p . v5193) (whereis . v517d) (register . v517c) (vm-join! . v517b) (vm-set-value! . v517a) (vm? . v5179) (main-vm? . v5178) (vm-eval . v5177) (vm-self . v5176) (vm-start! . v5175) (make-vm . v5174) (mutex-try-lock! . v5173) (mutex-unlock! . v5172) (mutex-lock! . v5171) (mutex? . v5170) (make-mutex . v516f) (condition-variable-notify-all! . v516e) (condition-variable-notify! . v516d) (condition-variable-wait! . v516c) (make-condition-variable . v516b) (string-upcase . v5154) (string-titlecase . v5153) (string-normalize-nfkd . v5152) (string-normalize-nfkc . v5151) (string-normalize-nfd . v5150) (string-normalize-nfc . v514f) (string-foldcase . v514e) (string-downcase . v514d) (string-ci>? . v514c) (string-ci>=? . v514b) (string-ci=? . v514a) (string-ci<? . v5149) (string-ci<=? . v5148) (char-whitespace? . v5147) (char-upper-case? . v5146) (char-title-case? . v5145) (char-numeric? . v5144) (char-lower-case? . v5143) (char-general-category . v5142) (char-upcase . v5141) (char-titlecase . v5140) (char-foldcase . v513f) (char-downcase . v513e) (char-ci>? . v513d) (char-ci>=? . v513c) (char-ci=? . v513b) (char-ci<? . v513a) (char-ci<=? . v5139) (char-alphabetic? . v5138) (make-variable-transformer . v2d27) (identifier? . v2fe5) (generate-temporaries . v2fd1) (free-identifier=? . v2fd3) (syntax->datum . v2fe9) (datum->syntax . v2fe7) (bound-identifier=? . v2fd5) (record-type-descriptor? . v5137) (record-predicate . v5136) (record-mutator . v5135) (record-constructor . v5134) (record-accessor . v5133) (make-record-type-descriptor . v5132) (make-record-constructor-descriptor . v5131) (record? . v5130) (record-type-uid . v512f) (record-type-sealed? . v512e) (record-type-parent . v512d) (record-type-opaque? . v512c) (record-type-name . v512b) (record-type-generative? . v512a) (record-type-field-names . v5129) (record-rtd . v5128) (record-field-mutable? . v5127) (delete-file . v5126) (file-exists? . v5125) (vector-sort! . v5124) (vector-sort . v5123) (list-sort . v5122) (symbol-hash . v5121) (string-ci-hash . v5120) (string-hash . v511f) (equal-hash . v511e) (hashtable-equivalence-function . v511d) (make-hashtable . v511c) (hashtable-hash-function . v511b) (make-eqv-hashtable . v511a) (make-eq-hashtable . v5119) (hashtable? . v5118) (hashtable-update! . v5117) (hashtable-size . v5116) (hashtable-set! . v5115) (hashtable-ref . v5114) (hashtable-mutable? . v5113) (hashtable-keys . v5112) (hashtable-entries . v5111) (hashtable-delete! . v5110) (hashtable-copy . v510f) (hashtable-contains? . v510e) (hashtable-clear! . v510d) (call-with-output-file . v510c) (call-with-input-file . v510b) (write-char . v510a) (write . v5109) (with-output-to-file . v5108) (with-input-from-file . v5107) (read-char . v5106) (read . v5105) (peek-char . v5104) (open-output-file . v5103) (open-input-file . v5102) (newline . v5101) (display . v5100) (close-output-port . v50ff) (close-input-port . v50fe) (eof-object? . v50fd) (eof-object . v50fc) (current-error-port . v50fb) (current-output-port . v50fa) (current-input-port . v50f9) (output-port? . v50f8) (input-port? . v50f7) (utf-8-codec . v50f6) (utf-16-codec . v50f5) (transcoder-error-handling-mode . v50f4) (transcoder-eol-style . v50f3) (transcoder-codec . v50f2) (transcoded-port . v50f1) (textual-port? . v50f0) (string->bytevector . v50ef) (standard-output-port . v50ee) (standard-input-port . v50ed) (standard-error-port . v50ec) (set-port-position! . v50eb) (put-u8 . v50ea) (put-string . v50e9) (put-datum . v50e8) (put-char . v50e7) (put-bytevector . v50e6) (port? . v50e5) (port-transcoder . v50e4) (port-position . v50e3) (port-has-set-port-position!? . v50e2) (port-has-port-position? . v50e1) (port-eof? . v50e0) (output-port-buffer-mode . v50df) (open-string-output-port . v50de) (open-string-input-port . v50dd) (open-file-output-port . v50dc) (open-file-input/output-port . v50db) (open-file-input-port . v50da) (open-bytevector-output-port . v50d9) (open-bytevector-input-port . v50d8) (native-transcoder . v50d7) (native-eol-style . v50d6) (make-transcoder . v50d5) (latin-1-codec . v50d4) (make-i/o-write-error . v4ba5) (make-i/o-read-error . v4b90) (make-i/o-port-error . v4c46) (make-i/o-invalid-position-error . v4bbc) (make-i/o-filename-error . v4bd7) (make-i/o-file-protection-error . v4bf0) (make-i/o-file-is-read-only-error . v4c05) (make-i/o-file-does-not-exist-error . v4c2f) (make-i/o-file-already-exists-error . v4c1a) (make-i/o-error . v4b7b) (make-i/o-encoding-error . v4c76) (make-i/o-decoding-error . v4c5f) (make-custom-textual-output-port . v50d3) (make-custom-textual-input/output-port . v50d2) (make-custom-textual-input-port . v50d1) (make-custom-binary-output-port . v50d0) (make-custom-binary-input/output-port . v50cf) (make-custom-binary-input-port . v50ce) (make-bytevector . v50cd) (lookahead-u8 . v50cc) (lookahead-char . v50cb) (i/o-write-error? . v4ba7) (i/o-read-error? . v4b92) (i/o-port-error? . v4c4a) (i/o-invalid-position-error? . v4bc0) (i/o-filename-error? . v4bdb) (i/o-file-protection-error? . v4bf2) (i/o-file-is-read-only-error? . v4c07) (i/o-file-does-not-exist-error? . v4c31) (i/o-file-already-exists-error? . v4c1c) (i/o-error? . v4b7d) (i/o-error-position . v4bc2) (i/o-error-port . v4c4c) (i/o-error-filename . v4bdd) (i/o-encoding-error? . v4c7a) (i/o-encoding-error-char . v4c7c) (i/o-decoding-error? . v4c61) (get-u8 . v50ca) (get-string-n! . v50c9) (get-string-n . v50c8) (get-string-all . v50c7) (get-line . v50c6) (get-datum . v50c5) (get-char . v50c4) (get-bytevector-some . v50c3) (get-bytevector-n! . v50c2) (get-bytevector-n . v50c1) (get-bytevector-all . v50c0) (flush-output-port . v50bf) (close-port . v50be) (exit . v50b6) (command-line . v4db1) (string-fill! . v50b5) (string-set! . v50b4) (set-cdr! . v50b3) (set-car! . v50b2) (remove . v50b1) (remv . v50b0) (remp . v50af) (remq . v50ae) (partition . v50ad) (memv . v50ac) (memq . v50ab) (memp . v50aa) (member . v50a9) (exists . v50a8) (for-all . v50a7) (fold-right . v50a6) (fold-left . v50a5) (find . v50a4) (filter . v50a3) (cons* . v50a2) (assv . v50a1) (assq . v50a0) (assp . v509f) (assoc . v509e) (call-with-string-output-port . v509d) (call-with-port . v509c) (call-with-bytevector-output-port . v509b) (bytevector->string . v509a) (buffer-mode? . v5099) (binary-port? . v5098) (with-exception-handler . v5097) (raise-continuable . v5096) (raise . v5095) (eval . v2fc3) (environment . v2fbb) (make-enumeration . v5094) (enum-set=? . v5093) (enum-set-universe . v5092) (enum-set-union . v5091) (enum-set-subset? . v5090) (enum-set-projection . v508f) (enum-set-member? . v508e) (enum-set-intersection . v508d) (enum-set-indexer . v508c) (enum-set-difference . v508b) (enum-set-constructor . v508a) (enum-set-complement . v5089) (enum-set->list . v5088) (who-condition? . v4af1) (warning? . v4a69) (violation? . v4aa8) (undefined-violation? . v4b68) (syntax-violation? . v4b4f) (syntax-violation-subform . v4b53) (syntax-violation-form . v4b51) (syntax-violation . v2fe3) (simple-conditions . v5087) (serious-condition? . v4a7e) (non-continuable-violation? . v4b08) (message-condition? . v4a52) (make-who-condition . v4aed) (make-warning . v4a67) (make-violation . v4aa6) (make-undefined-violation . v4b66) (make-syntax-violation . v4b49) (make-serious-condition . v4a7c) (make-non-continuable-violation . v4b06) (make-message-condition . v4a4e) (make-lexical-violation . v4b30) (make-irritants-condition . v4ad2) (make-implementation-restriction-violation . v4b1b) (make-error . v4a91) (make-assertion-violation . v4abb) (lexical-violation? . v4b32) (irritants-condition? . v4ad6) (implementation-restriction-violation? . v4b1d) (error? . v4a93) (condition-who . v4af3) (condition-predicate . v5086) (condition-message . v4a54) (condition-irritants . v4ad8) (condition-accessor . v5085) (condition . v5084) (assertion-violation? . v4abd) (condition? . v5083) (utf32->string . v5082) (utf16->string . v5081) (utf8->string . v5080) (uint-list->bytevector . v507f) (u8-list->bytevector . v507e) (string->utf8 . v507d) (string->utf32 . v507c) (string->utf16 . v507b) (sint-list->bytevector . v507a) (native-endianness . v5079) (bytevector? . v5078) (bytevector=? . v5077) (bytevector-uint-set! . v5076) (bytevector-uint-ref . v5075) (bytevector-u8-set! . v5074) (bytevector-u8-ref . v5073) (bytevector-u64-set! . v5072) (bytevector-u64-ref . v5071) (bytevector-u64-native-set! . v5070) (bytevector-u64-native-ref . v506f) (bytevector-u32-set! . v506e) (bytevector-u32-ref . v506d) (bytevector-u32-native-set! . v506c) (bytevector-u32-native-ref . v506b) (bytevector-u16-set! . v506a) (bytevector-u16-ref . v5069) (bytevector-u16-native-set! . v5068) (bytevector-u16-native-ref . v5067) (bytevector-sint-set! . v5066) (bytevector-sint-ref . v5065) (bytevector-s8-set! . v5064) (bytevector-s8-ref . v5063) (bytevector-s64-set! . v5062) (bytevector-s64-ref . v5061) (bytevector-s64-native-set! . v5060) (bytevector-s64-native-ref . v505f) (bytevector-s32-set! . v505e) (bytevector-s32-ref . v505d) (bytevector-s32-native-set! . v505c) (bytevector-s32-native-ref . v505b) (bytevector-s16-set! . v505a) (bytevector-s16-ref . v5059) (bytevector-s16-native-set! . v5058) (bytevector-s16-native-ref . v5057) (bytevector-length . v5056) (bytevector-ieee-single-ref . v5055) (bytevector-ieee-single-set! . v5054) (bytevector-ieee-single-native-set! . v5053) (bytevector-ieee-single-native-ref . v5052) (bytevector-ieee-double-set! . v5051) (bytevector-ieee-double-ref . v5050) (bytevector-ieee-double-native-set! . v504f) (bytevector-ieee-double-native-ref . v504e) (bytevector-fill! . v504d) (bytevector-copy! . v504c) (bytevector-copy . v504b) (bytevector->uint-list . v504a) (bytevector->u8-list . v5049) (bytevector->sint-list . v5048) (no-nans-violation? . v4ca6) (no-infinities-violation? . v4c91) (make-no-nans-violation . v4ca4) (make-no-infinities-violation . v4c8f) (real->flonum . v5047) (flzero? . v5046) (fltruncate . v5045) (fltan . v5044) (flsqrt . v5043) (flsin . v5042) (flround . v5041) (flpositive? . v5040) (flonum? . v503f) (flodd? . v503e) (flnumerator . v503d) (flnegative? . v503c) (flnan? . v503b) (flmod0 . v503a) (flmod . v5039) (flmin . v5038) (flmax . v5037) (fllog . v5036) (flinteger? . v5035) (flinfinite? . v5034) (flfloor . v5033) (flfinite? . v5032) (flexpt . v5031) (flexp . v5030) (fleven? . v502f) (fldiv0-and-mod0 . v502e) (fldiv0 . v502d) (fldiv-and-mod . v502c) (fldiv . v502b) (fldenominator . v502a) (flcos . v5029) (flceiling . v5028) (flatan . v5027) (flasin . v5026) (flacos . v5025) (flabs . v5024) (fl>? . v5023) (fl>=? . v5022) (fl=? . v5021) (fl<? . v5020) (fl<=? . v501f) (fl/ . v501e) (fl- . v501d) (fl+ . v501c) (fl* . v501b) (fixnum->flonum . v501a) (fxzero? . v5019) (fxxor . v5018) (fxrotate-bit-field . v5017) (fxreverse-bit-field . v5016) (fxpositive? . v5015) (fxodd? . v5014) (fxnot . v5013) (fxnegative? . v5012) (fxmod0 . v5011) (fxmod . v5010) (fxmin . v500f) (fxmax . v500e) (fxlength . v500d) (fxior . v500c) (fxif . v500b) (fxfirst-bit-set . v500a) (fxeven? . v5009) (fxdiv0-and-mod0 . v5008) (fxdiv0 . v5007) (fxdiv-and-mod . v5006) (fxdiv . v5005) (fxcopy-bit-field . v5004) (fxcopy-bit . v5003) (fxbit-set? . v5002) (fxbit-field . v5001) (fxbit-count . v5000) (fxarithmetic-shift-right . v4fff) (fxarithmetic-shift-left . v4ffe) (fxarithmetic-shift . v4ffd) (fxand . v4ffc) (fx>? . v4ffb) (fx>=? . v4ffa) (fx=? . v4ff9) (fx<? . v4ff8) (fx<=? . v4ff7) (fx-/carry . v4ff6) (fx- . v4ff5) (fx+/carry . v4ff4) (fx+ . v4ff3) (fx*/carry . v4ff2) (fx* . v4ff1) (greatest-fixnum . v4ff0) (least-fixnum . v4fef) (fixnum-width . v4fee) (fixnum? . v4fed) (bitwise-rotate-bit-field . v4fec) (bitwise-reverse-bit-field . v4feb) (bitwise-length . v4fea) (bitwise-if . v4fe9) (bitwise-first-bit-set . v4fe8) (bitwise-copy-bit-field . v4fe7) (bitwise-copy-bit . v4fe6) (bitwise-bit-set? . v4fe5) (bitwise-bit-field . v4fe4) (bitwise-bit-count . v4fe3) (bitwise-xor . v4fe2) (bitwise-ior . v4fe1) (bitwise-and . v4fe0) (bitwise-not . v4fdf) (bitwise-arithmetic-shift-right . v4fde) (bitwise-arithmetic-shift-left . v4fdd) (bitwise-arithmetic-shift . v4fdc) (zero? . v4fdb) (vector? . v4fda) (vector-set! . v4fd9) (vector-ref . v4fd8) (vector-map . v4fd7) (vector-length . v4fd6) (vector-for-each . v4fd5) (vector-fill! . v4fd4) (vector->list . v4fd3) (vector . v4fd2) (values . v4fd1) (truncate . v4fd0) (tan . v4fcf) (symbol? . v4fce) (symbol=? . v4fcd) (symbol->string . v4fcc) (substring . v4fcb) (string? . v4fca) (string>? . v4fc9) (string>=? . v4fc8) (string=? . v4fc7) (string<? . v4fc6) (string<=? . v4fc5) (string-ref . v4fc4) (string-length . v4fc3) (string-for-each . v4fc2) (string-copy . v4fc1) (string-append . v4fc0) (string->symbol . v4fbf) (string->number . v4fbe) (string->list . v4fbd) (string . v4fbc) (sqrt . v4fbb) (sin . v4fba) (round . v4fb9) (reverse . v4fb8) (real? . v4fb7) (real-valued? . v4fb6) (real-part . v4fb5) (rationalize . v4fb4) (rational? . v4fb3) (rational-valued? . v4fb2) (procedure? . v4fb1) (positive? . v4fb0) (pair? . v4faf) (odd? . v4fae) (numerator . v4fad) (number? . v4fac) (number->string . v4fab) (null? . v4faa) (not . v4fa9) (negative? . v4fa8) (nan? . v4fa7) (min . v4fa6) (max . v4fa5) (map . v4fa4) (make-vector . v4fa3) (make-string . v4fa2) (make-rectangular . v4fa1) (make-polar . v4fa0) (magnitude . v4f9f) (log . v4f9e) (list? . v4f9d) (list-tail . v4f9c) (list-ref . v4f9b) (list->vector . v4f9a) (list->string . v4f99) (list . v4f98) (length . v4f97) (lcm . v4f96) (integer? . v4f95) (integer-valued? . v4f94) (integer->char . v4f93) (infinite? . v4f92) (inexact? . v4f91) (inexact . v4f90) (imag-part . v4f8f) (gcd . v4f8e) (for-each . v4f8d) (floor . v4f8c) (finite? . v4f8b) (expt . v4f8a) (exp . v4f89) (exact? . v4f88) (exact-integer-sqrt . v4f87) (exact . v4f86) (even? . v4f85) (error . v4f84) (eqv? . v4f83) (equal? . v4f82) (eq? . v4f81) (dynamic-wind . v4f80) (div0-and-mod0 . v4f7f) (mod0 . v4f7e) (div0 . v4f7d) (div-and-mod . v4f7c) (mod . v4f7b) (div . v4f7a) (denominator . v4f79) (cos . v4f78) (cons . v4f77) (complex? . v4f76) (char? . v4f75) (char>? . v4f74) (char>=? . v4f73) (char=? . v4f72) (char<? . v4f71) (char<=? . v4f70) (char->integer . v4f6f) (ceiling . v4f6e) (call-with-values . v4f6d) (call/cc . v4f6c) (call-with-current-continuation . v4f6b) (cddddr . v4f6a) (cdddar . v4f69) (cddadr . v4f68) (cddaar . v4f67) (cdaddr . v4f66) (cdadar . v4f65) (cdaadr . v4f64) (cdaaar . v4f63) (cadddr . v4f62) (caddar . v4f61) (cadadr . v4f60) (cadaar . v4f5f) (caaddr . v4f5e) (caadar . v4f5d) (caaadr . v4f5c) (caaaar . v4f5b) (cdddr . v4f5a) (cddar . v4f59) (cdadr . v4f58) (cdaar . v4f57) (caddr . v4f56) (cadar . v4f55) (caadr . v4f54) (caaar . v4f53) (cddr . v4f52) (cdar . v4f51) (cadr . v4f50) (caar . v4f4f) (cdr . v4f4e) (car . v4f4d) (boolean? . v4f4c) (boolean=? . v4f4b) (atan . v4f4a) (assertion-violation . v4f49) (asin . v4f48) (apply . v4f47) (append . v4f46) (angle . v4f45) (acos . v4f44) (abs . v4f43) (/ . v4f42) (* . v4f41) (- . v4f40) (+ . v4f3f) (>= . v4f3e) (> . v4f3d) (= . v4f3c) (<= . v4f3b) (< . v4f3a) (library . v4f39) (&no-nans . v4f38) (&no-infinities . v4f37) (&i/o-encoding . v4f36) (&i/o-decoding . v4f35) (&i/o-port . v4f34) (&i/o-file-does-not-exist . v4f33) (&i/o-file-already-exists . v4f32) (&i/o-file-is-read-only . v4f31) (&i/o-file-protection . v4f30) (&i/o-filename . v4f2f) (&i/o-invalid-position . v4f2e) (&i/o-write . v4f2d) (&i/o-read . v4f2c) (&i/o . v4f2b) (&undefined . v4f2a) (&syntax . v4f29) (&lexical . v4f28) (&implementation-restriction . v4f27) (&non-continuable . v4f26) (&who . v4f25) (&irritants . v4f24) (&assertion . v4f23) (&violation . v4f22) (&error . v4f21) (&serious . v4f20) (&warning . v4f1f) (&message . v4f1e) (&condition . v4f1d) (define-condition-type . v4f1c) (define-enumeration . v4f1b) (define-record-type . v4f1a) (parent-rtd . v4f19) (nongenerative . v4f18) (opaque . v4f17) (sealed . v4f16) (protocol . v4f15) (parent . v4f14) (immutable . v4f13) (mutable . v4f12) (fields . v4f11) (error-handling-mode . v4f10) (file-options . v4f0f) (buffer-mode . v4f0e) (eol-style . v4f0d) (guard . v4f0c) (unsyntax-splicing . v4f09) (unsyntax . v4f08) (unquote-splicing . v4f07) (unquote . v4f06) (_ . v4f05) (else . v4f04) (=> . v4f03) (... . v4f02) (assert . v4f01) (endianness . v4f00) (time . v4efe) (do . v4efd) (cond . v4efc) (let* . v4efb) (let . v4efa) (let*-values . v4ef9) (let-values . v4ef8) (identifier-syntax . v4ef7) (with-syntax . v4ef6) (quasisyntax . v4ef5) (quasiquote . v4ef4) (syntax-rules . v4ef3) (include . v4ef2) (record-constructor-descriptor . v4ef0) (record-type-descriptor . v4eef) (case . v4eee) (unless . v4eec) (when . v4eeb) (or . v4eea) (and . v4ee9) (if . v4ee8) (letrec* . v4ee7) (letrec . v4ee6) (case-lambda . v4ee4) (lambda . v4ee3) (syntax . v4ee2) (syntax-case . v4ee1) (quote . v4ee0) (letrec-syntax . v4ede) (let-syntax . v4edd) (set! . v4edc) (import . v4edb) (begin . v4eda) (define-syntax . v4ed8) (define . v4ed7)) '() values values '#f '#f '#t '#f) (v2b12@v29b1@install-library 'v51ec '(psyntax null-environment-5) '() '() '() '() '((make-promise . v50b7) (unquote-splicing . v4f07) (unquote . v4f06) (_ . v4f05) (else . v4f04) (=> . v4f03) (... . v4f02) (delay . v4eff) (do . v4efd) (cond . v4efc) (let* . v4efb) (let . v4efa) (quasiquote . v4ef4) (syntax-rules . v4ef3) (case . v4eee) (or . v4eea) (and . v4ee9) (if . v4ee8) (letrec . v4ee6) (lambda . v4ee3) (quote . v4ee0) (letrec-syntax . v4ede) (let-syntax . v4edd) (set! . v4edc) (begin . v4eda) (define-syntax . v4ed8) (define . v4ed7)) '() values values '#f '#f '#t '#f) (v2b12@v29b1@install-library 'v51ed '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . v514c) (string-ci>=? . v514b) (string-ci=? . v514a) (string-ci<? . v5149) (string-ci<=? . v5148) (char-whitespace? . v5147) (char-upper-case? . v5146) (char-numeric? . v5144) (char-lower-case? . v5143) (char-upcase . v5141) (char-downcase . v513e) (char-ci>? . v513d) (char-ci>=? . v513c) (char-ci=? . v513b) (char-ci<? . v513a) (char-ci<=? . v5139) (char-alphabetic? . v5138) (call-with-output-file . v510c) (call-with-input-file . v510b) (write-char . v510a) (write . v5109) (with-output-to-file . v5108) (with-input-from-file . v5107) (read-char . v5106) (read . v5105) (peek-char . v5104) (open-output-file . v5103) (open-input-file . v5102) (newline . v5101) (display . v5100) (close-output-port . v50ff) (close-input-port . v50fe) (eof-object . v50fc) (current-output-port . v50fa) (current-input-port . v50f9) (output-port? . v50f8) (input-port? . v50f7) (scheme-report-environment . v2fbf) (quotient . v50bd) (null-environment . v2fbd) (remainder . v50bc) (modulo . v50bb) (inexact->exact . v50ba) (force . v50b9) (exact->inexact . v50b8) (make-promise . v50b7) (string-fill! . v50b5) (string-set! . v50b4) (set-cdr! . v50b3) (set-car! . v50b2) (memv . v50ac) (memq . v50ab) (member . v50a9) (assv . v50a1) (assq . v50a0) (assoc . v509e) (eval . v2fc3) (zero? . v4fdb) (vector? . v4fda) (vector-set! . v4fd9) (vector-ref . v4fd8) (vector-length . v4fd6) (vector-fill! . v4fd4) (vector->list . v4fd3) (vector . v4fd2) (values . v4fd1) (truncate . v4fd0) (tan . v4fcf) (symbol? . v4fce) (symbol->string . v4fcc) (substring . v4fcb) (string? . v4fca) (string>? . v4fc9) (string>=? . v4fc8) (string=? . v4fc7) (string<? . v4fc6) (string<=? . v4fc5) (string-ref . v4fc4) (string-length . v4fc3) (string-copy . v4fc1) (string-append . v4fc0) (string->symbol . v4fbf) (string->number . v4fbe) (string->list . v4fbd) (string . v4fbc) (sqrt . v4fbb) (sin . v4fba) (round . v4fb9) (reverse . v4fb8) (real? . v4fb7) (real-part . v4fb5) (rationalize . v4fb4) (rational? . v4fb3) (procedure? . v4fb1) (positive? . v4fb0) (pair? . v4faf) (odd? . v4fae) (numerator . v4fad) (number? . v4fac) (number->string . v4fab) (not . v4fa9) (negative? . v4fa8) (min . v4fa6) (max . v4fa5) (map . v4fa4) (make-vector . v4fa3) (make-string . v4fa2) (make-rectangular . v4fa1) (make-polar . v4fa0) (magnitude . v4f9f) (log . v4f9e) (list? . v4f9d) (list-tail . v4f9c) (list-ref . v4f9b) (list->vector . v4f9a) (list->string . v4f99) (list . v4f98) (length . v4f97) (lcm . v4f96) (integer? . v4f95) (integer->char . v4f93) (inexact? . v4f91) (imag-part . v4f8f) (gcd . v4f8e) (for-each . v4f8d) (floor . v4f8c) (expt . v4f8a) (exp . v4f89) (exact? . v4f88) (even? . v4f85) (eqv? . v4f83) (equal? . v4f82) (eq? . v4f81) (dynamic-wind . v4f80) (denominator . v4f79) (cos . v4f78) (cons . v4f77) (complex? . v4f76) (char? . v4f75) (char>? . v4f74) (char>=? . v4f73) (char=? . v4f72) (char<? . v4f71) (char<=? . v4f70) (char->integer . v4f6f) (ceiling . v4f6e) (call-with-values . v4f6d) (call-with-current-continuation . v4f6b) (cddddr . v4f6a) (cdddar . v4f69) (cddadr . v4f68) (cddaar . v4f67) (cdaddr . v4f66) (cdadar . v4f65) (cdaadr . v4f64) (cdaaar . v4f63) (cadddr . v4f62) (caddar . v4f61) (cadadr . v4f60) (cadaar . v4f5f) (caaddr . v4f5e) (caadar . v4f5d) (caaadr . v4f5c) (caaaar . v4f5b) (cdddr . v4f5a) (cddar . v4f59) (cdadr . v4f58) (cdaar . v4f57) (caddr . v4f56) (cadar . v4f55) (caadr . v4f54) (caaar . v4f53) (cddr . v4f52) (cdar . v4f51) (cadr . v4f50) (caar . v4f4f) (cdr . v4f4e) (car . v4f4d) (boolean? . v4f4c) (atan . v4f4a) (asin . v4f48) (apply . v4f47) (append . v4f46) (angle . v4f45) (acos . v4f44) (abs . v4f43) (/ . v4f42) (* . v4f41) (- . v4f40) (+ . v4f3f) (>= . v4f3e) (> . v4f3d) (= . v4f3c) (<= . v4f3b) (< . v4f3a) (unquote-splicing . v4f07) (unquote . v4f06) (else . v4f04) (=> . v4f03) (... . v4f02) (delay . v4eff) (do . v4efd) (cond . v4efc) (let* . v4efb) (let . v4efa) (quasiquote . v4ef4) (syntax-rules . v4ef3) (case . v4eee) (or . v4eea) (and . v4ee9) (if . v4ee8) (letrec . v4ee6) (lambda . v4ee3) (quote . v4ee0) (letrec-syntax . v4ede) (let-syntax . v4edd) (set! . v4edc) (begin . v4eda) (define-syntax . v4ed8) (define . v4ed7)) '() values values '#f '#f '#t '#f) (v2b12@v29b1@install-library 'v51ee '(psyntax modules) '() '() '() '() '((module . v4ed9)) '() values values '#f '#f '#t '#f) (v2b12@v29b1@install-library 'v51ef '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (v2b12@v29b1@install-library 'v51f0 '(rnrs) '(6) '() '() '() '((regexp? . v51e3) (string-upcase . v5154) (string-titlecase . v5153) (string-normalize-nfkd . v5152) (string-normalize-nfkc . v5151) (string-normalize-nfd . v5150) (string-normalize-nfc . v514f) (string-foldcase . v514e) (string-downcase . v514d) (string-ci>? . v514c) (string-ci>=? . v514b) (string-ci=? . v514a) (string-ci<? . v5149) (string-ci<=? . v5148) (char-whitespace? . v5147) (char-upper-case? . v5146) (char-title-case? . v5145) (char-numeric? . v5144) (char-lower-case? . v5143) (char-general-category . v5142) (char-upcase . v5141) (char-titlecase . v5140) (char-foldcase . v513f) (char-downcase . v513e) (char-ci>? . v513d) (char-ci>=? . v513c) (char-ci=? . v513b) (char-ci<? . v513a) (char-ci<=? . v5139) (char-alphabetic? . v5138) (make-variable-transformer . v2d27) (identifier? . v2fe5) (generate-temporaries . v2fd1) (free-identifier=? . v2fd3) (syntax->datum . v2fe9) (datum->syntax . v2fe7) (bound-identifier=? . v2fd5) (record-type-descriptor? . v5137) (record-predicate . v5136) (record-mutator . v5135) (record-constructor . v5134) (record-accessor . v5133) (make-record-type-descriptor . v5132) (make-record-constructor-descriptor . v5131) (record? . v5130) (record-type-uid . v512f) (record-type-sealed? . v512e) (record-type-parent . v512d) (record-type-opaque? . v512c) (record-type-name . v512b) (record-type-generative? . v512a) (record-type-field-names . v5129) (record-rtd . v5128) (record-field-mutable? . v5127) (delete-file . v5126) (file-exists? . v5125) (vector-sort! . v5124) (vector-sort . v5123) (list-sort . v5122) (symbol-hash . v5121) (string-ci-hash . v5120) (string-hash . v511f) (equal-hash . v511e) (hashtable-equivalence-function . v511d) (make-hashtable . v511c) (hashtable-hash-function . v511b) (make-eqv-hashtable . v511a) (make-eq-hashtable . v5119) (hashtable? . v5118) (hashtable-update! . v5117) (hashtable-size . v5116) (hashtable-set! . v5115) (hashtable-ref . v5114) (hashtable-mutable? . v5113) (hashtable-keys . v5112) (hashtable-entries . v5111) (hashtable-delete! . v5110) (hashtable-copy . v510f) (hashtable-contains? . v510e) (hashtable-clear! . v510d) (call-with-output-file . v510c) (call-with-input-file . v510b) (write-char . v510a) (write . v5109) (with-output-to-file . v5108) (with-input-from-file . v5107) (read-char . v5106) (read . v5105) (peek-char . v5104) (open-output-file . v5103) (open-input-file . v5102) (newline . v5101) (display . v5100) (close-output-port . v50ff) (close-input-port . v50fe) (eof-object? . v50fd) (eof-object . v50fc) (current-error-port . v50fb) (current-output-port . v50fa) (current-input-port . v50f9) (output-port? . v50f8) (input-port? . v50f7) (utf-8-codec . v50f6) (utf-16-codec . v50f5) (transcoder-error-handling-mode . v50f4) (transcoder-eol-style . v50f3) (transcoder-codec . v50f2) (transcoded-port . v50f1) (textual-port? . v50f0) (string->bytevector . v50ef) (standard-output-port . v50ee) (standard-input-port . v50ed) (standard-error-port . v50ec) (set-port-position! . v50eb) (put-u8 . v50ea) (put-string . v50e9) (put-datum . v50e8) (put-char . v50e7) (put-bytevector . v50e6) (port? . v50e5) (port-transcoder . v50e4) (port-position . v50e3) (port-has-set-port-position!? . v50e2) (port-has-port-position? . v50e1) (port-eof? . v50e0) (output-port-buffer-mode . v50df) (open-string-output-port . v50de) (open-string-input-port . v50dd) (open-file-output-port . v50dc) (open-file-input/output-port . v50db) (open-file-input-port . v50da) (open-bytevector-output-port . v50d9) (open-bytevector-input-port . v50d8) (native-transcoder . v50d7) (native-eol-style . v50d6) (make-transcoder . v50d5) (latin-1-codec . v50d4) (make-i/o-write-error . v4ba5) (make-i/o-read-error . v4b90) (make-i/o-port-error . v4c46) (make-i/o-invalid-position-error . v4bbc) (make-i/o-filename-error . v4bd7) (make-i/o-file-protection-error . v4bf0) (make-i/o-file-is-read-only-error . v4c05) (make-i/o-file-does-not-exist-error . v4c2f) (make-i/o-file-already-exists-error . v4c1a) (make-i/o-error . v4b7b) (make-i/o-encoding-error . v4c76) (make-i/o-decoding-error . v4c5f) (make-custom-textual-output-port . v50d3) (make-custom-textual-input/output-port . v50d2) (make-custom-textual-input-port . v50d1) (make-custom-binary-output-port . v50d0) (make-custom-binary-input/output-port . v50cf) (make-custom-binary-input-port . v50ce) (make-bytevector . v50cd) (lookahead-u8 . v50cc) (lookahead-char . v50cb) (i/o-write-error? . v4ba7) (i/o-read-error? . v4b92) (i/o-port-error? . v4c4a) (i/o-invalid-position-error? . v4bc0) (i/o-filename-error? . v4bdb) (i/o-file-protection-error? . v4bf2) (i/o-file-is-read-only-error? . v4c07) (i/o-file-does-not-exist-error? . v4c31) (i/o-file-already-exists-error? . v4c1c) (i/o-error? . v4b7d) (i/o-error-position . v4bc2) (i/o-error-port . v4c4c) (i/o-error-filename . v4bdd) (i/o-encoding-error? . v4c7a) (i/o-encoding-error-char . v4c7c) (i/o-decoding-error? . v4c61) (get-u8 . v50ca) (get-string-n! . v50c9) (get-string-n . v50c8) (get-string-all . v50c7) (get-line . v50c6) (get-datum . v50c5) (get-char . v50c4) (get-bytevector-some . v50c3) (get-bytevector-n! . v50c2) (get-bytevector-n . v50c1) (get-bytevector-all . v50c0) (flush-output-port . v50bf) (close-port . v50be) (exit . v50b6) (command-line . v4db1) (remove . v50b1) (remv . v50b0) (remp . v50af) (remq . v50ae) (partition . v50ad) (memv . v50ac) (memq . v50ab) (memp . v50aa) (member . v50a9) (exists . v50a8) (for-all . v50a7) (fold-right . v50a6) (fold-left . v50a5) (find . v50a4) (filter . v50a3) (cons* . v50a2) (assv . v50a1) (assq . v50a0) (assp . v509f) (assoc . v509e) (call-with-string-output-port . v509d) (call-with-port . v509c) (call-with-bytevector-output-port . v509b) (bytevector->string . v509a) (buffer-mode? . v5099) (binary-port? . v5098) (with-exception-handler . v5097) (raise-continuable . v5096) (raise . v5095) (make-enumeration . v5094) (enum-set=? . v5093) (enum-set-universe . v5092) (enum-set-union . v5091) (enum-set-subset? . v5090) (enum-set-projection . v508f) (enum-set-member? . v508e) (enum-set-intersection . v508d) (enum-set-indexer . v508c) (enum-set-difference . v508b) (enum-set-constructor . v508a) (enum-set-complement . v5089) (enum-set->list . v5088) (who-condition? . v4af1) (warning? . v4a69) (violation? . v4aa8) (undefined-violation? . v4b68) (syntax-violation? . v4b4f) (syntax-violation-subform . v4b53) (syntax-violation-form . v4b51) (syntax-violation . v2fe3) (simple-conditions . v5087) (serious-condition? . v4a7e) (non-continuable-violation? . v4b08) (message-condition? . v4a52) (make-who-condition . v4aed) (make-warning . v4a67) (make-violation . v4aa6) (make-undefined-violation . v4b66) (make-syntax-violation . v4b49) (make-serious-condition . v4a7c) (make-non-continuable-violation . v4b06) (make-message-condition . v4a4e) (make-lexical-violation . v4b30) (make-irritants-condition . v4ad2) (make-implementation-restriction-violation . v4b1b) (make-error . v4a91) (make-assertion-violation . v4abb) (lexical-violation? . v4b32) (irritants-condition? . v4ad6) (implementation-restriction-violation? . v4b1d) (error? . v4a93) (condition-who . v4af3) (condition-predicate . v5086) (condition-message . v4a54) (condition-irritants . v4ad8) (condition-accessor . v5085) (condition . v5084) (assertion-violation? . v4abd) (condition? . v5083) (utf32->string . v5082) (utf16->string . v5081) (utf8->string . v5080) (uint-list->bytevector . v507f) (u8-list->bytevector . v507e) (string->utf8 . v507d) (string->utf32 . v507c) (string->utf16 . v507b) (sint-list->bytevector . v507a) (native-endianness . v5079) (bytevector? . v5078) (bytevector=? . v5077) (bytevector-uint-set! . v5076) (bytevector-uint-ref . v5075) (bytevector-u8-set! . v5074) (bytevector-u8-ref . v5073) (bytevector-u64-set! . v5072) (bytevector-u64-ref . v5071) (bytevector-u64-native-set! . v5070) (bytevector-u64-native-ref . v506f) (bytevector-u32-set! . v506e) (bytevector-u32-ref . v506d) (bytevector-u32-native-set! . v506c) (bytevector-u32-native-ref . v506b) (bytevector-u16-set! . v506a) (bytevector-u16-ref . v5069) (bytevector-u16-native-set! . v5068) (bytevector-u16-native-ref . v5067) (bytevector-sint-set! . v5066) (bytevector-sint-ref . v5065) (bytevector-s8-set! . v5064) (bytevector-s8-ref . v5063) (bytevector-s64-set! . v5062) (bytevector-s64-ref . v5061) (bytevector-s64-native-set! . v5060) (bytevector-s64-native-ref . v505f) (bytevector-s32-set! . v505e) (bytevector-s32-ref . v505d) (bytevector-s32-native-set! . v505c) (bytevector-s32-native-ref . v505b) (bytevector-s16-set! . v505a) (bytevector-s16-ref . v5059) (bytevector-s16-native-set! . v5058) (bytevector-s16-native-ref . v5057) (bytevector-length . v5056) (bytevector-ieee-single-ref . v5055) (bytevector-ieee-single-set! . v5054) (bytevector-ieee-single-native-set! . v5053) (bytevector-ieee-single-native-ref . v5052) (bytevector-ieee-double-set! . v5051) (bytevector-ieee-double-ref . v5050) (bytevector-ieee-double-native-set! . v504f) (bytevector-ieee-double-native-ref . v504e) (bytevector-fill! . v504d) (bytevector-copy! . v504c) (bytevector-copy . v504b) (bytevector->uint-list . v504a) (bytevector->u8-list . v5049) (bytevector->sint-list . v5048) (no-nans-violation? . v4ca6) (no-infinities-violation? . v4c91) (make-no-nans-violation . v4ca4) (make-no-infinities-violation . v4c8f) (real->flonum . v5047) (flzero? . v5046) (fltruncate . v5045) (fltan . v5044) (flsqrt . v5043) (flsin . v5042) (flround . v5041) (flpositive? . v5040) (flonum? . v503f) (flodd? . v503e) (flnumerator . v503d) (flnegative? . v503c) (flnan? . v503b) (flmod0 . v503a) (flmod . v5039) (flmin . v5038) (flmax . v5037) (fllog . v5036) (flinteger? . v5035) (flinfinite? . v5034) (flfloor . v5033) (flfinite? . v5032) (flexpt . v5031) (flexp . v5030) (fleven? . v502f) (fldiv0-and-mod0 . v502e) (fldiv0 . v502d) (fldiv-and-mod . v502c) (fldiv . v502b) (fldenominator . v502a) (flcos . v5029) (flceiling . v5028) (flatan . v5027) (flasin . v5026) (flacos . v5025) (flabs . v5024) (fl>? . v5023) (fl>=? . v5022) (fl=? . v5021) (fl<? . v5020) (fl<=? . v501f) (fl/ . v501e) (fl- . v501d) (fl+ . v501c) (fl* . v501b) (fixnum->flonum . v501a) (fxzero? . v5019) (fxxor . v5018) (fxrotate-bit-field . v5017) (fxreverse-bit-field . v5016) (fxpositive? . v5015) (fxodd? . v5014) (fxnot . v5013) (fxnegative? . v5012) (fxmod0 . v5011) (fxmod . v5010) (fxmin . v500f) (fxmax . v500e) (fxlength . v500d) (fxior . v500c) (fxif . v500b) (fxfirst-bit-set . v500a) (fxeven? . v5009) (fxdiv0-and-mod0 . v5008) (fxdiv0 . v5007) (fxdiv-and-mod . v5006) (fxdiv . v5005) (fxcopy-bit-field . v5004) (fxcopy-bit . v5003) (fxbit-set? . v5002) (fxbit-field . v5001) (fxbit-count . v5000) (fxarithmetic-shift-right . v4fff) (fxarithmetic-shift-left . v4ffe) (fxarithmetic-shift . v4ffd) (fxand . v4ffc) (fx>? . v4ffb) (fx>=? . v4ffa) (fx=? . v4ff9) (fx<? . v4ff8) (fx<=? . v4ff7) (fx-/carry . v4ff6) (fx- . v4ff5) (fx+/carry . v4ff4) (fx+ . v4ff3) (fx*/carry . v4ff2) (fx* . v4ff1) (greatest-fixnum . v4ff0) (least-fixnum . v4fef) (fixnum-width . v4fee) (fixnum? . v4fed) (bitwise-rotate-bit-field . v4fec) (bitwise-reverse-bit-field . v4feb) (bitwise-length . v4fea) (bitwise-if . v4fe9) (bitwise-first-bit-set . v4fe8) (bitwise-copy-bit-field . v4fe7) (bitwise-copy-bit . v4fe6) (bitwise-bit-set? . v4fe5) (bitwise-bit-field . v4fe4) (bitwise-bit-count . v4fe3) (bitwise-xor . v4fe2) (bitwise-ior . v4fe1) (bitwise-and . v4fe0) (bitwise-not . v4fdf) (bitwise-arithmetic-shift-right . v4fde) (bitwise-arithmetic-shift-left . v4fdd) (bitwise-arithmetic-shift . v4fdc) (zero? . v4fdb) (vector? . v4fda) (vector-set! . v4fd9) (vector-ref . v4fd8) (vector-map . v4fd7) (vector-length . v4fd6) (vector-for-each . v4fd5) (vector-fill! . v4fd4) (vector->list . v4fd3) (vector . v4fd2) (values . v4fd1) (truncate . v4fd0) (tan . v4fcf) (symbol? . v4fce) (symbol=? . v4fcd) (symbol->string . v4fcc) (substring . v4fcb) (string? . v4fca) (string>? . v4fc9) (string>=? . v4fc8) (string=? . v4fc7) (string<? . v4fc6) (string<=? . v4fc5) (string-ref . v4fc4) (string-length . v4fc3) (string-for-each . v4fc2) (string-copy . v4fc1) (string-append . v4fc0) (string->symbol . v4fbf) (string->number . v4fbe) (string->list . v4fbd) (string . v4fbc) (sqrt . v4fbb) (sin . v4fba) (round . v4fb9) (reverse . v4fb8) (real? . v4fb7) (real-valued? . v4fb6) (real-part . v4fb5) (rationalize . v4fb4) (rational? . v4fb3) (rational-valued? . v4fb2) (procedure? . v4fb1) (positive? . v4fb0) (pair? . v4faf) (odd? . v4fae) (numerator . v4fad) (number? . v4fac) (number->string . v4fab) (null? . v4faa) (not . v4fa9) (negative? . v4fa8) (nan? . v4fa7) (min . v4fa6) (max . v4fa5) (map . v4fa4) (make-vector . v4fa3) (make-string . v4fa2) (make-rectangular . v4fa1) (make-polar . v4fa0) (magnitude . v4f9f) (log . v4f9e) (list? . v4f9d) (list-tail . v4f9c) (list-ref . v4f9b) (list->vector . v4f9a) (list->string . v4f99) (list . v4f98) (length . v4f97) (lcm . v4f96) (integer? . v4f95) (integer-valued? . v4f94) (integer->char . v4f93) (infinite? . v4f92) (inexact? . v4f91) (inexact . v4f90) (imag-part . v4f8f) (gcd . v4f8e) (for-each . v4f8d) (floor . v4f8c) (finite? . v4f8b) (expt . v4f8a) (exp . v4f89) (exact? . v4f88) (exact-integer-sqrt . v4f87) (exact . v4f86) (even? . v4f85) (error . v4f84) (eqv? . v4f83) (equal? . v4f82) (eq? . v4f81) (dynamic-wind . v4f80) (div0-and-mod0 . v4f7f) (mod0 . v4f7e) (div0 . v4f7d) (div-and-mod . v4f7c) (mod . v4f7b) (div . v4f7a) (denominator . v4f79) (cos . v4f78) (cons . v4f77) (complex? . v4f76) (char? . v4f75) (char>? . v4f74) (char>=? . v4f73) (char=? . v4f72) (char<? . v4f71) (char<=? . v4f70) (char->integer . v4f6f) (ceiling . v4f6e) (call-with-values . v4f6d) (call/cc . v4f6c) (call-with-current-continuation . v4f6b) (cddddr . v4f6a) (cdddar . v4f69) (cddadr . v4f68) (cddaar . v4f67) (cdaddr . v4f66) (cdadar . v4f65) (cdaadr . v4f64) (cdaaar . v4f63) (cadddr . v4f62) (caddar . v4f61) (cadadr . v4f60) (cadaar . v4f5f) (caaddr . v4f5e) (caadar . v4f5d) (caaadr . v4f5c) (caaaar . v4f5b) (cdddr . v4f5a) (cddar . v4f59) (cdadr . v4f58) (cdaar . v4f57) (caddr . v4f56) (cadar . v4f55) (caadr . v4f54) (caaar . v4f53) (cddr . v4f52) (cdar . v4f51) (cadr . v4f50) (caar . v4f4f) (cdr . v4f4e) (car . v4f4d) (boolean? . v4f4c) (boolean=? . v4f4b) (atan . v4f4a) (assertion-violation . v4f49) (asin . v4f48) (apply . v4f47) (append . v4f46) (angle . v4f45) (acos . v4f44) (abs . v4f43) (/ . v4f42) (* . v4f41) (- . v4f40) (+ . v4f3f) (>= . v4f3e) (> . v4f3d) (= . v4f3c) (<= . v4f3b) (< . v4f3a) (&no-nans . v4f38) (&no-infinities . v4f37) (&i/o-encoding . v4f36) (&i/o-decoding . v4f35) (&i/o-port . v4f34) (&i/o-file-does-not-exist . v4f33) (&i/o-file-already-exists . v4f32) (&i/o-file-is-read-only . v4f31) (&i/o-file-protection . v4f30) (&i/o-filename . v4f2f) (&i/o-invalid-position . v4f2e) (&i/o-write . v4f2d) (&i/o-read . v4f2c) (&i/o . v4f2b) (&undefined . v4f2a) (&syntax . v4f29) (&lexical . v4f28) (&implementation-restriction . v4f27) (&non-continuable . v4f26) (&who . v4f25) (&irritants . v4f24) (&assertion . v4f23) (&violation . v4f22) (&error . v4f21) (&serious . v4f20) (&warning . v4f1f) (&message . v4f1e) (&condition . v4f1d) (define-condition-type . v4f1c) (define-enumeration . v4f1b) (define-record-type . v4f1a) (parent-rtd . v4f19) (nongenerative . v4f18) (opaque . v4f17) (sealed . v4f16) (protocol . v4f15) (parent . v4f14) (immutable . v4f13) (mutable . v4f12) (fields . v4f11) (error-handling-mode . v4f10) (file-options . v4f0f) (buffer-mode . v4f0e) (eol-style . v4f0d) (guard . v4f0c) (unsyntax-splicing . v4f09) (unsyntax . v4f08) (unquote-splicing . v4f07) (unquote . v4f06) (_ . v4f05) (else . v4f04) (=> . v4f03) (... . v4f02) (assert . v4f01) (endianness . v4f00) (do . v4efd) (cond . v4efc) (let* . v4efb) (let . v4efa) (let*-values . v4ef9) (let-values . v4ef8) (identifier-syntax . v4ef7) (with-syntax . v4ef6) (quasisyntax . v4ef5) (quasiquote . v4ef4) (syntax-rules . v4ef3) (record-constructor-descriptor . v4ef0) (record-type-descriptor . v4eef) (case . v4eee) (unless . v4eec) (when . v4eeb) (or . v4eea) (and . v4ee9) (if . v4ee8) (letrec* . v4ee7) (letrec . v4ee6) (case-lambda . v4ee4) (lambda . v4ee3) (syntax . v4ee2) (syntax-case . v4ee1) (quote . v4ee0) (letrec-syntax . v4ede) (let-syntax . v4edd) (set! . v4edc) (begin . v4eda) (define-syntax . v4ed8) (define . v4ed7)) '() values values '#f '#f '#t '#f) (v2b12@v29b1@install-library 'v51f1 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . v2fbf) (quotient . v50bd) (null-environment . v2fbd) (remainder . v50bc) (modulo . v50bb) (inexact->exact . v50ba) (force . v50b9) (exact->inexact . v50b8) (make-promise . v50b7) (delay . v4eff)) '() values values '#f '#f '#t '#f) (v2b12@v29b1@install-library 'v51f2 '(rnrs control) '(6) '() '() '() '((do . v4efd) (unless . v4eec) (when . v4eeb) (case-lambda . v4ee4)) '() values values '#f '#f '#t '#f) (v2b12@v29b1@install-library 'v51f3 '(rnrs eval) '(6) '() '() '() '((eval . v2fc3) (environment . v2fbb)) '() values values '#f '#f '#t '#f) (v2b12@v29b1@install-library 'v51f4 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . v50b3) (set-car! . v50b2)) '() values values '#f '#f '#t '#f) (v2b12@v29b1@install-library 'v51f5 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . v50b5) (string-set! . v50b4)) '() values values '#f '#f '#t '#f) (v2b12@v29b1@install-library 'v51f6 '(rnrs programs) '(6) '() '() '() '((exit . v50b6) (command-line . v4db1)) '() values values '#f '#f '#t '#f) (v2b12@v29b1@install-library 'v51f7 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . v2d27) (identifier? . v2fe5) (generate-temporaries . v2fd1) (free-identifier=? . v2fd3) (syntax->datum . v2fe9) (datum->syntax . v2fe7) (bound-identifier=? . v2fd5) (syntax-violation . v2fe3) (unsyntax-splicing . v4f09) (unsyntax . v4f08) (_ . v4f05) (... . v4f02) (with-syntax . v4ef6) (quasisyntax . v4ef5) (syntax . v4ee2) (syntax-case . v4ee1)) '() values values '#f '#f '#t '#f) (v2b12@v29b1@install-library 'v51f8 '(rnrs files) '(6) '() '() '() '((delete-file . v5126) (file-exists? . v5125) (make-i/o-write-error . v4ba5) (make-i/o-read-error . v4b90) (make-i/o-port-error . v4c46) (make-i/o-invalid-position-error . v4bbc) (make-i/o-filename-error . v4bd7) (make-i/o-file-protection-error . v4bf0) (make-i/o-file-is-read-only-error . v4c05) (make-i/o-file-does-not-exist-error . v4c2f) (make-i/o-file-already-exists-error . v4c1a) (make-i/o-error . v4b7b) (i/o-write-error? . v4ba7) (i/o-read-error? . v4b92) (i/o-port-error? . v4c4a) (i/o-invalid-position-error? . v4bc0) (i/o-filename-error? . v4bdb) (i/o-file-protection-error? . v4bf2) (i/o-file-is-read-only-error? . v4c07) (i/o-file-does-not-exist-error? . v4c31) (i/o-file-already-exists-error? . v4c1c) (i/o-error? . v4b7d) (i/o-error-position . v4bc2) (i/o-error-port . v4c4c) (i/o-error-filename . v4bdd) (&i/o-port . v4f34) (&i/o-file-does-not-exist . v4f33) (&i/o-file-already-exists . v4f32) (&i/o-file-is-read-only . v4f31) (&i/o-file-protection . v4f30) (&i/o-filename . v4f2f) (&i/o-invalid-position . v4f2e) (&i/o-write . v4f2d) (&i/o-read . v4f2c) (&i/o . v4f2b)) '() values values '#f '#f '#t '#f) (v2b12@v29b1@install-library 'v51f9 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . v5124) (vector-sort . v5123) (list-sort . v5122)) '() values values '#f '#f '#t '#f) (v2b12@v29b1@install-library 'v51fa '(rnrs base) '(6) '() '() '() '((zero? . v4fdb) (vector? . v4fda) (vector-set! . v4fd9) (vector-ref . v4fd8) (vector-map . v4fd7) (vector-length . v4fd6) (vector-for-each . v4fd5) (vector-fill! . v4fd4) (vector->list . v4fd3) (vector . v4fd2) (values . v4fd1) (truncate . v4fd0) (tan . v4fcf) (symbol? . v4fce) (symbol=? . v4fcd) (symbol->string . v4fcc) (substring . v4fcb) (string? . v4fca) (string>? . v4fc9) (string>=? . v4fc8) (string=? . v4fc7) (string<? . v4fc6) (string<=? . v4fc5) (string-ref . v4fc4) (string-length . v4fc3) (string-for-each . v4fc2) (string-copy . v4fc1) (string-append . v4fc0) (string->symbol . v4fbf) (string->number . v4fbe) (string->list . v4fbd) (string . v4fbc) (sqrt . v4fbb) (sin . v4fba) (round . v4fb9) (reverse . v4fb8) (real? . v4fb7) (real-valued? . v4fb6) (real-part . v4fb5) (rationalize . v4fb4) (rational? . v4fb3) (rational-valued? . v4fb2) (procedure? . v4fb1) (positive? . v4fb0) (pair? . v4faf) (odd? . v4fae) (numerator . v4fad) (number? . v4fac) (number->string . v4fab) (null? . v4faa) (not . v4fa9) (negative? . v4fa8) (nan? . v4fa7) (min . v4fa6) (max . v4fa5) (map . v4fa4) (make-vector . v4fa3) (make-string . v4fa2) (make-rectangular . v4fa1) (make-polar . v4fa0) (magnitude . v4f9f) (log . v4f9e) (list? . v4f9d) (list-tail . v4f9c) (list-ref . v4f9b) (list->vector . v4f9a) (list->string . v4f99) (list . v4f98) (length . v4f97) (lcm . v4f96) (integer? . v4f95) (integer-valued? . v4f94) (integer->char . v4f93) (infinite? . v4f92) (inexact? . v4f91) (inexact . v4f90) (imag-part . v4f8f) (gcd . v4f8e) (for-each . v4f8d) (floor . v4f8c) (finite? . v4f8b) (expt . v4f8a) (exp . v4f89) (exact? . v4f88) (exact-integer-sqrt . v4f87) (exact . v4f86) (even? . v4f85) (error . v4f84) (eqv? . v4f83) (equal? . v4f82) (eq? . v4f81) (dynamic-wind . v4f80) (div0-and-mod0 . v4f7f) (mod0 . v4f7e) (div0 . v4f7d) (div-and-mod . v4f7c) (mod . v4f7b) (div . v4f7a) (denominator . v4f79) (cos . v4f78) (cons . v4f77) (complex? . v4f76) (char? . v4f75) (char>? . v4f74) (char>=? . v4f73) (char=? . v4f72) (char<? . v4f71) (char<=? . v4f70) (char->integer . v4f6f) (ceiling . v4f6e) (call-with-values . v4f6d) (call/cc . v4f6c) (call-with-current-continuation . v4f6b) (cddddr . v4f6a) (cdddar . v4f69) (cddadr . v4f68) (cddaar . v4f67) (cdaddr . v4f66) (cdadar . v4f65) (cdaadr . v4f64) (cdaaar . v4f63) (cadddr . v4f62) (caddar . v4f61) (cadadr . v4f60) (cadaar . v4f5f) (caaddr . v4f5e) (caadar . v4f5d) (caaadr . v4f5c) (caaaar . v4f5b) (cdddr . v4f5a) (cddar . v4f59) (cdadr . v4f58) (cdaar . v4f57) (caddr . v4f56) (cadar . v4f55) (caadr . v4f54) (caaar . v4f53) (cddr . v4f52) (cdar . v4f51) (cadr . v4f50) (caar . v4f4f) (cdr . v4f4e) (car . v4f4d) (boolean? . v4f4c) (boolean=? . v4f4b) (atan . v4f4a) (assertion-violation . v4f49) (asin . v4f48) (apply . v4f47) (append . v4f46) (angle . v4f45) (acos . v4f44) (abs . v4f43) (/ . v4f42) (* . v4f41) (- . v4f40) (+ . v4f3f) (>= . v4f3e) (> . v4f3d) (= . v4f3c) (<= . v4f3b) (< . v4f3a) (unquote-splicing . v4f07) (unquote . v4f06) (_ . v4f05) (else . v4f04) (=> . v4f03) (... . v4f02) (assert . v4f01) (cond . v4efc) (let* . v4efb) (let . v4efa) (let*-values . v4ef9) (let-values . v4ef8) (identifier-syntax . v4ef7) (quasiquote . v4ef4) (syntax-rules . v4ef3) (case . v4eee) (or . v4eea) (and . v4ee9) (if . v4ee8) (letrec* . v4ee7) (letrec . v4ee6) (lambda . v4ee3) (quote . v4ee0) (letrec-syntax . v4ede) (let-syntax . v4edd) (set! . v4edc) (begin . v4eda) (define-syntax . v4ed8) (define . v4ed7)) '() values values '#f '#f '#t '#f) (v2b12@v29b1@install-library 'v51fb '(rnrs lists) '(6) '() '() '() '((remove . v50b1) (remv . v50b0) (remp . v50af) (remq . v50ae) (partition . v50ad) (memv . v50ac) (memq . v50ab) (memp . v50aa) (member . v50a9) (exists . v50a8) (for-all . v50a7) (fold-right . v50a6) (fold-left . v50a5) (find . v50a4) (filter . v50a3) (cons* . v50a2) (assv . v50a1) (assq . v50a0) (assp . v509f) (assoc . v509e)) '() values values '#f '#f '#t '#f) (v2b12@v29b1@install-library 'v51fc '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . v510c) (call-with-input-file . v510b) (write-char . v510a) (write . v5109) (with-output-to-file . v5108) (with-input-from-file . v5107) (read-char . v5106) (read . v5105) (peek-char . v5104) (open-output-file . v5103) (open-input-file . v5102) (newline . v5101) (display . v5100) (close-output-port . v50ff) (close-input-port . v50fe) (eof-object? . v50fd) (eof-object . v50fc) (current-error-port . v50fb) (current-output-port . v50fa) (current-input-port . v50f9) (output-port? . v50f8) (input-port? . v50f7) (make-i/o-write-error . v4ba5) (make-i/o-read-error . v4b90) (make-i/o-port-error . v4c46) (make-i/o-invalid-position-error . v4bbc) (make-i/o-filename-error . v4bd7) (make-i/o-file-protection-error . v4bf0) (make-i/o-file-is-read-only-error . v4c05) (make-i/o-file-does-not-exist-error . v4c2f) (make-i/o-file-already-exists-error . v4c1a) (make-i/o-error . v4b7b) (i/o-write-error? . v4ba7) (i/o-read-error? . v4b92) (i/o-port-error? . v4c4a) (i/o-invalid-position-error? . v4bc0) (i/o-filename-error? . v4bdb) (i/o-file-protection-error? . v4bf2) (i/o-file-is-read-only-error? . v4c07) (i/o-file-does-not-exist-error? . v4c31) (i/o-file-already-exists-error? . v4c1c) (i/o-error? . v4b7d) (i/o-error-position . v4bc2) (i/o-error-port . v4c4c) (i/o-error-filename . v4bdd) (&i/o-port . v4f34) (&i/o-file-does-not-exist . v4f33) (&i/o-file-already-exists . v4f32) (&i/o-file-is-read-only . v4f31) (&i/o-file-protection . v4f30) (&i/o-filename . v4f2f) (&i/o-invalid-position . v4f2e) (&i/o-write . v4f2d) (&i/o-read . v4f2c) (&i/o . v4f2b)) '() values values '#f '#f '#t '#f) (v2b12@v29b1@install-library 'v51fd '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . v50cd) (utf32->string . v5082) (utf16->string . v5081) (utf8->string . v5080) (uint-list->bytevector . v507f) (u8-list->bytevector . v507e) (string->utf8 . v507d) (string->utf32 . v507c) (string->utf16 . v507b) (sint-list->bytevector . v507a) (native-endianness . v5079) (bytevector? . v5078) (bytevector=? . v5077) (bytevector-uint-set! . v5076) (bytevector-uint-ref . v5075) (bytevector-u8-set! . v5074) (bytevector-u8-ref . v5073) (bytevector-u64-set! . v5072) (bytevector-u64-ref . v5071) (bytevector-u64-native-set! . v5070) (bytevector-u64-native-ref . v506f) (bytevector-u32-set! . v506e) (bytevector-u32-ref . v506d) (bytevector-u32-native-set! . v506c) (bytevector-u32-native-ref . v506b) (bytevector-u16-set! . v506a) (bytevector-u16-ref . v5069) (bytevector-u16-native-set! . v5068) (bytevector-u16-native-ref . v5067) (bytevector-sint-set! . v5066) (bytevector-sint-ref . v5065) (bytevector-s8-set! . v5064) (bytevector-s8-ref . v5063) (bytevector-s64-set! . v5062) (bytevector-s64-ref . v5061) (bytevector-s64-native-set! . v5060) (bytevector-s64-native-ref . v505f) (bytevector-s32-set! . v505e) (bytevector-s32-ref . v505d) (bytevector-s32-native-set! . v505c) (bytevector-s32-native-ref . v505b) (bytevector-s16-set! . v505a) (bytevector-s16-ref . v5059) (bytevector-s16-native-set! . v5058) (bytevector-s16-native-ref . v5057) (bytevector-length . v5056) (bytevector-ieee-single-ref . v5055) (bytevector-ieee-single-set! . v5054) (bytevector-ieee-single-native-set! . v5053) (bytevector-ieee-single-native-ref . v5052) (bytevector-ieee-double-set! . v5051) (bytevector-ieee-double-ref . v5050) (bytevector-ieee-double-native-set! . v504f) (bytevector-ieee-double-native-ref . v504e) (bytevector-fill! . v504d) (bytevector-copy! . v504c) (bytevector-copy . v504b) (bytevector->uint-list . v504a) (bytevector->u8-list . v5049) (bytevector->sint-list . v5048) (endianness . v4f00)) '() values values '#f '#f '#t '#f) (v2b12@v29b1@install-library 'v51fe '(rnrs unicode) '(6) '() '() '() '((string-upcase . v5154) (string-titlecase . v5153) (string-normalize-nfkd . v5152) (string-normalize-nfkc . v5151) (string-normalize-nfd . v5150) (string-normalize-nfc . v514f) (string-foldcase . v514e) (string-downcase . v514d) (string-ci>? . v514c) (string-ci>=? . v514b) (string-ci=? . v514a) (string-ci<? . v5149) (string-ci<=? . v5148) (char-whitespace? . v5147) (char-upper-case? . v5146) (char-title-case? . v5145) (char-numeric? . v5144) (char-lower-case? . v5143) (char-general-category . v5142) (char-upcase . v5141) (char-titlecase . v5140) (char-foldcase . v513f) (char-downcase . v513e) (char-ci>? . v513d) (char-ci>=? . v513c) (char-ci=? . v513b) (char-ci<? . v513a) (char-ci<=? . v5139) (char-alphabetic? . v5138)) '() values values '#f '#f '#t '#f) (v2b12@v29b1@install-library 'v51ff '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . v5097) (raise-continuable . v5096) (raise . v5095) (guard . v4f0c) (else . v4f04) (=> . v4f03)) '() values values '#f '#f '#t '#f) (v2b12@v29b1@install-library 'v5200 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . v4fec) (bitwise-reverse-bit-field . v4feb) (bitwise-length . v4fea) (bitwise-if . v4fe9) (bitwise-first-bit-set . v4fe8) (bitwise-copy-bit-field . v4fe7) (bitwise-copy-bit . v4fe6) (bitwise-bit-set? . v4fe5) (bitwise-bit-field . v4fe4) (bitwise-bit-count . v4fe3) (bitwise-xor . v4fe2) (bitwise-ior . v4fe1) (bitwise-and . v4fe0) (bitwise-not . v4fdf) (bitwise-arithmetic-shift-right . v4fde) (bitwise-arithmetic-shift-left . v4fdd) (bitwise-arithmetic-shift . v4fdc)) '() values values '#f '#f '#t '#f) (v2b12@v29b1@install-library 'v5201 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . v5019) (fxxor . v5018) (fxrotate-bit-field . v5017) (fxreverse-bit-field . v5016) (fxpositive? . v5015) (fxodd? . v5014) (fxnot . v5013) (fxnegative? . v5012) (fxmod0 . v5011) (fxmod . v5010) (fxmin . v500f) (fxmax . v500e) (fxlength . v500d) (fxior . v500c) (fxif . v500b) (fxfirst-bit-set . v500a) (fxeven? . v5009) (fxdiv0-and-mod0 . v5008) (fxdiv0 . v5007) (fxdiv-and-mod . v5006) (fxdiv . v5005) (fxcopy-bit-field . v5004) (fxcopy-bit . v5003) (fxbit-set? . v5002) (fxbit-field . v5001) (fxbit-count . v5000) (fxarithmetic-shift-right . v4fff) (fxarithmetic-shift-left . v4ffe) (fxarithmetic-shift . v4ffd) (fxand . v4ffc) (fx>? . v4ffb) (fx>=? . v4ffa) (fx=? . v4ff9) (fx<? . v4ff8) (fx<=? . v4ff7) (fx-/carry . v4ff6) (fx- . v4ff5) (fx+/carry . v4ff4) (fx+ . v4ff3) (fx*/carry . v4ff2) (fx* . v4ff1) (greatest-fixnum . v4ff0) (least-fixnum . v4fef) (fixnum-width . v4fee) (fixnum? . v4fed)) '() values values '#f '#f '#t '#f) (v2b12@v29b1@install-library 'v5202 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . v4ca6) (no-infinities-violation? . v4c91) (make-no-nans-violation . v4ca4) (make-no-infinities-violation . v4c8f) (real->flonum . v5047) (flzero? . v5046) (fltruncate . v5045) (fltan . v5044) (flsqrt . v5043) (flsin . v5042) (flround . v5041) (flpositive? . v5040) (flonum? . v503f) (flodd? . v503e) (flnumerator . v503d) (flnegative? . v503c) (flnan? . v503b) (flmod0 . v503a) (flmod . v5039) (flmin . v5038) (flmax . v5037) (fllog . v5036) (flinteger? . v5035) (flinfinite? . v5034) (flfloor . v5033) (flfinite? . v5032) (flexpt . v5031) (flexp . v5030) (fleven? . v502f) (fldiv0-and-mod0 . v502e) (fldiv0 . v502d) (fldiv-and-mod . v502c) (fldiv . v502b) (fldenominator . v502a) (flcos . v5029) (flceiling . v5028) (flatan . v5027) (flasin . v5026) (flacos . v5025) (flabs . v5024) (fl>? . v5023) (fl>=? . v5022) (fl=? . v5021) (fl<? . v5020) (fl<=? . v501f) (fl/ . v501e) (fl- . v501d) (fl+ . v501c) (fl* . v501b) (fixnum->flonum . v501a) (&no-nans . v4f38) (&no-infinities . v4f37)) '() values values '#f '#f '#t '#f) (v2b12@v29b1@install-library 'v5203 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . v5121) (string-ci-hash . v5120) (string-hash . v511f) (equal-hash . v511e) (hashtable-equivalence-function . v511d) (make-hashtable . v511c) (hashtable-hash-function . v511b) (make-eqv-hashtable . v511a) (make-eq-hashtable . v5119) (hashtable? . v5118) (hashtable-update! . v5117) (hashtable-size . v5116) (hashtable-set! . v5115) (hashtable-ref . v5114) (hashtable-mutable? . v5113) (hashtable-keys . v5112) (hashtable-entries . v5111) (hashtable-delete! . v5110) (hashtable-copy . v510f) (hashtable-contains? . v510e) (hashtable-clear! . v510d)) '() values values '#f '#f '#t '#f) (v2b12@v29b1@install-library 'v5204 '(rnrs io ports) '(6) '() '() '() '((eof-object? . v50fd) (eof-object . v50fc) (current-error-port . v50fb) (current-output-port . v50fa) (current-input-port . v50f9) (output-port? . v50f8) (input-port? . v50f7) (utf-8-codec . v50f6) (utf-16-codec . v50f5) (transcoder-error-handling-mode . v50f4) (transcoder-eol-style . v50f3) (transcoder-codec . v50f2) (transcoded-port . v50f1) (textual-port? . v50f0) (string->bytevector . v50ef) (standard-output-port . v50ee) (standard-input-port . v50ed) (standard-error-port . v50ec) (set-port-position! . v50eb) (put-u8 . v50ea) (put-string . v50e9) (put-datum . v50e8) (put-char . v50e7) (put-bytevector . v50e6) (port? . v50e5) (port-transcoder . v50e4) (port-position . v50e3) (port-has-set-port-position!? . v50e2) (port-has-port-position? . v50e1) (port-eof? . v50e0) (output-port-buffer-mode . v50df) (open-string-output-port . v50de) (open-string-input-port . v50dd) (open-file-output-port . v50dc) (open-file-input/output-port . v50db) (open-file-input-port . v50da) (open-bytevector-output-port . v50d9) (open-bytevector-input-port . v50d8) (native-transcoder . v50d7) (native-eol-style . v50d6) (make-transcoder . v50d5) (latin-1-codec . v50d4) (make-i/o-write-error . v4ba5) (make-i/o-read-error . v4b90) (make-i/o-port-error . v4c46) (make-i/o-invalid-position-error . v4bbc) (make-i/o-filename-error . v4bd7) (make-i/o-file-protection-error . v4bf0) (make-i/o-file-is-read-only-error . v4c05) (make-i/o-file-does-not-exist-error . v4c2f) (make-i/o-file-already-exists-error . v4c1a) (make-i/o-error . v4b7b) (make-i/o-encoding-error . v4c76) (make-i/o-decoding-error . v4c5f) (make-custom-textual-output-port . v50d3) (make-custom-textual-input/output-port . v50d2) (make-custom-textual-input-port . v50d1) (make-custom-binary-output-port . v50d0) (make-custom-binary-input/output-port . v50cf) (make-custom-binary-input-port . v50ce) (lookahead-u8 . v50cc) (lookahead-char . v50cb) (i/o-write-error? . v4ba7) (i/o-read-error? . v4b92) (i/o-port-error? . v4c4a) (i/o-invalid-position-error? . v4bc0) (i/o-filename-error? . v4bdb) (i/o-file-protection-error? . v4bf2) (i/o-file-is-read-only-error? . v4c07) (i/o-file-does-not-exist-error? . v4c31) (i/o-file-already-exists-error? . v4c1c) (i/o-error? . v4b7d) (i/o-error-position . v4bc2) (i/o-error-port . v4c4c) (i/o-error-filename . v4bdd) (i/o-encoding-error? . v4c7a) (i/o-encoding-error-char . v4c7c) (i/o-decoding-error? . v4c61) (get-u8 . v50ca) (get-string-n! . v50c9) (get-string-n . v50c8) (get-string-all . v50c7) (get-line . v50c6) (get-datum . v50c5) (get-char . v50c4) (get-bytevector-some . v50c3) (get-bytevector-n! . v50c2) (get-bytevector-n . v50c1) (get-bytevector-all . v50c0) (flush-output-port . v50bf) (close-port . v50be) (call-with-string-output-port . v509d) (call-with-port . v509c) (call-with-bytevector-output-port . v509b) (bytevector->string . v509a) (buffer-mode? . v5099) (binary-port? . v5098) (&i/o-encoding . v4f36) (&i/o-decoding . v4f35) (&i/o-port . v4f34) (&i/o-file-does-not-exist . v4f33) (&i/o-file-already-exists . v4f32) (&i/o-file-is-read-only . v4f31) (&i/o-file-protection . v4f30) (&i/o-filename . v4f2f) (&i/o-invalid-position . v4f2e) (&i/o-write . v4f2d) (&i/o-read . v4f2c) (&i/o . v4f2b) (error-handling-mode . v4f10) (file-options . v4f0f) (buffer-mode . v4f0e) (eol-style . v4f0d)) '() values values '#f '#f '#t '#f) (v2b12@v29b1@install-library 'v5205 '(rnrs enums) '(6) '() '() '() '((make-enumeration . v5094) (enum-set=? . v5093) (enum-set-universe . v5092) (enum-set-union . v5091) (enum-set-subset? . v5090) (enum-set-projection . v508f) (enum-set-member? . v508e) (enum-set-intersection . v508d) (enum-set-indexer . v508c) (enum-set-difference . v508b) (enum-set-constructor . v508a) (enum-set-complement . v5089) (enum-set->list . v5088) (define-enumeration . v4f1b)) '() values values '#f '#f '#t '#f) (v2b12@v29b1@install-library 'v5206 '(rnrs conditions) '(6) '() '() '() '((who-condition? . v4af1) (warning? . v4a69) (violation? . v4aa8) (undefined-violation? . v4b68) (syntax-violation? . v4b4f) (syntax-violation-subform . v4b53) (syntax-violation-form . v4b51) (syntax-violation . v2fe3) (simple-conditions . v5087) (serious-condition? . v4a7e) (non-continuable-violation? . v4b08) (message-condition? . v4a52) (make-who-condition . v4aed) (make-warning . v4a67) (make-violation . v4aa6) (make-undefined-violation . v4b66) (make-syntax-violation . v4b49) (make-serious-condition . v4a7c) (make-non-continuable-violation . v4b06) (make-message-condition . v4a4e) (make-lexical-violation . v4b30) (make-irritants-condition . v4ad2) (make-implementation-restriction-violation . v4b1b) (make-error . v4a91) (make-assertion-violation . v4abb) (lexical-violation? . v4b32) (irritants-condition? . v4ad6) (implementation-restriction-violation? . v4b1d) (error? . v4a93) (condition-who . v4af3) (condition-predicate . v5086) (condition-message . v4a54) (condition-irritants . v4ad8) (condition-accessor . v5085) (condition . v5084) (assertion-violation? . v4abd) (condition? . v5083) (&undefined . v4f2a) (&syntax . v4f29) (&lexical . v4f28) (&implementation-restriction . v4f27) (&non-continuable . v4f26) (&who . v4f25) (&irritants . v4f24) (&assertion . v4f23) (&violation . v4f22) (&error . v4f21) (&serious . v4f20) (&warning . v4f1f) (&message . v4f1e) (&condition . v4f1d) (define-condition-type . v4f1c)) '() values values '#f '#f '#t '#f) (v2b12@v29b1@install-library 'v5207 '(rnrs records inspection) '(6) '() '() '() '((record? . v5130) (record-type-uid . v512f) (record-type-sealed? . v512e) (record-type-parent . v512d) (record-type-opaque? . v512c) (record-type-name . v512b) (record-type-generative? . v512a) (record-type-field-names . v5129) (record-rtd . v5128) (record-field-mutable? . v5127)) '() values values '#f '#f '#t '#f) (v2b12@v29b1@install-library 'v5208 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . v5137) (record-predicate . v5136) (record-mutator . v5135) (record-constructor . v5134) (record-accessor . v5133) (make-record-type-descriptor . v5132) (make-record-constructor-descriptor . v5131)) '() values values '#f '#f '#t '#f) (v2b12@v29b1@install-library 'v5209 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . v4f1a) (parent-rtd . v4f19) (nongenerative . v4f18) (opaque . v4f17) (sealed . v4f16) (protocol . v4f15) (parent . v4f14) (immutable . v4f13) (mutable . v4f12) (fields . v4f11) (record-constructor-descriptor . v4ef0) (record-type-descriptor . v4eef)) '() values values '#f '#f '#t '#f) (v2b12@v29b1@install-library 'v520a '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . v4caa) (&no-nans-rtd . v4ca8) (&no-infinities-rcd . v4c95) (&no-infinities-rtd . v4c93) (&i/o-encoding-rcd . v4c80) (&i/o-encoding-rtd . v4c7e) (&i/o-decoding-rcd . v4c65) (&i/o-decoding-rtd . v4c63) (&i/o-port-rcd . v4c50) (&i/o-port-rtd . v4c4e) (&i/o-file-does-not-exist-rcd . v4c35) (&i/o-file-does-not-exist-rtd . v4c33) (&i/o-file-already-exists-rcd . v4c20) (&i/o-file-already-exists-rtd . v4c1e) (&i/o-file-is-read-only-rcd . v4c0b) (&i/o-file-is-read-only-rtd . v4c09) (&i/o-file-protection-rcd . v4bf6) (&i/o-file-protection-rtd . v4bf4) (&i/o-filename-rcd . v4be1) (&i/o-filename-rtd . v4bdf) (&i/o-invalid-position-rcd . v4bc6) (&i/o-invalid-position-rtd . v4bc4) (&i/o-write-rcd . v4bab) (&i/o-write-rtd . v4ba9) (&i/o-read-rcd . v4b96) (&i/o-read-rtd . v4b94) (&i/o-rcd . v4b81) (&i/o-rtd . v4b7f) (&undefined-rcd . v4b6c) (&undefined-rtd . v4b6a) (&syntax-rcd . v4b57) (&syntax-rtd . v4b55) (&lexical-rcd . v4b36) (&lexical-rtd . v4b34) (&implementation-restriction-rcd . v4b21) (&implementation-restriction-rtd . v4b1f) (&non-continuable-rcd . v4b0c) (&non-continuable-rtd . v4b0a) (&who-rcd . v4af7) (&who-rtd . v4af5) (&irritants-rcd . v4adc) (&irritants-rtd . v4ada) (&assertion-rcd . v4ac1) (&assertion-rtd . v4abf) (&violation-rcd . v4aac) (&violation-rtd . v4aaa) (&error-rcd . v4a97) (&error-rtd . v4a95) (&serious-rcd . v4a82) (&serious-rtd . v4a80) (&warning-rcd . v4a6d) (&warning-rtd . v4a6b) (&message-rcd . v4a58) (&message-rtd . v4a56) (&condition-rcd . v49f9) (&condition-rtd . v49f7) (syntax-error . v2fdf) (syntax-dispatch . v2efa) (pretty-print . v51ea) (eval-core . v51e9) (set-symbol-value! . v51e8) (symbol-value . v51e7) (gensym . v51e6) (void . v51e5) (load . v4db7) (interaction-environment . v2fef) (char-ready? . v51e4) (regexp? . v51e3) (read-line . v51e2) (ungensym . v51e1) (alist->eq-hash-table . v51e0) (assoc-ref . v51df) (print . v51de) (format . v51dd) (host-os . v51dc) (library-path . v2990) (standard-library-path . v51db) (file-newer? . v51da) (stat-mtime . v51d9) (write-to-file . v51d8) (file->list . v51d7) (file->string . v51d6) (digit->integer . v51d5) (call-with-string-input-port . v51d4) (call-with-string-io . v51d3) (string-split . v51d2) (bytevector-for-each . v51d1) (string->regexp . v51d0) (rxmatch . v51cf) (regexp-replace-all . v51ce) (hashtable-for-each . v51cd) (call-process . v51cc) (local-tz-offset . v51cb) (microseconds . v51ca) (directory-list . v51c9) (set-current-directory! . v51c8) (expand-path . v51c7) (current-directory . v51c6) (%spawn . v51c5) (%waitpid . v51c4) (pointer-ref-c-int64 . v51c3) (pointer-ref-c-int32 . v51c2) (pointer-ref-c-int16 . v51c1) (pointer-ref-c-int8 . v51c0) (pointer-ref-c-uint64 . v51bf) (pointer-ref-c-uint32 . v51be) (pointer-ref-c-uint16 . v51bd) (pointer-ref-c-uint8 . v51bc) (pointer-set-c-int64! . v51bb) (pointer-set-c-int32! . v51ba) (pointer-set-c-int16! . v51b9) (pointer-set-c-int8! . v51b8) (pointer-set-c-pointer! . v51b7) (pointer-set-c-double! . v51b6) (pointer-set-c-float! . v51b5) (pointer-set-c-long-long! . v51b4) (pointer-set-c-long! . v51b3) (pointer-set-c-int! . v51b2) (pointer-set-c-short! . v51b1) (pointer-set-c-char! . v51b0) (pointer-ref-c-pointer . v51af) (pointer-ref-c-double . v51ae) (pointer-ref-c-float . v51ad) (pointer-ref-c-unsigned-long-long . v51ac) (pointer-ref-c-signed-long-long . v51ab) (pointer-ref-c-unsigned-long . v51aa) (pointer-ref-c-signed-long . v51a9) (pointer-ref-c-unsigned-int . v51a8) (pointer-ref-c-signed-int . v51a7) (pointer-ref-c-unsigned-short . v51a6) (pointer-ref-c-signed-short . v51a5) (pointer-ref-c-unsigned-char . v51a4) (pointer-ref-c-signed-char . v51a3) (pointer->integer . v51a2) (integer->pointer . v51a1) (pointer? . v51a0) (%ffi-supported? . v519f) (%ffi-pointer-ref . v519e) (%ffi-pointer->string . v519d) (%ffi-call->string-or-zero . v519c) (%ffi-call->double . v519b) (%ffi-call->void* . v519a) (%ffi-call->void . v5199) (%ffi-call->int . v5198) (%ffi-lookup . v5197) (%ffi-open . v5196) (%fork . v5195) (%pipe . v5194) (p . v5193) (open-output-string . v5192) (get-output-string . v5191) (file-stat-ctime . v5190) (file-stat-atime . v518f) (file-stat-mtime . v518e) (file-size-in-bytes . v518d) (file-writable? . v518c) (file-executable? . v518b) (file-readable? . v518a) (file-regular? . v5189) (file-symbolic-link? . v5188) (file-directory? . v5187) (create-symbolic-link . v5186) (rename-file . v5185) (delete-directory . v5184) (create-directory . v5183) (get-environment-variables . v5182) (get-environment-variable . v5181) (get-timeofday . v5180) (get-command-line . v517f) (sys-display . v517e) (whereis . v517d) (register . v517c) (vm-join! . v517b) (vm-set-value! . v517a) (vm? . v5179) (main-vm? . v5178) (vm-eval . v5177) (vm-self . v5176) (vm-start! . v5175) (make-vm . v5174) (mutex-try-lock! . v5173) (mutex-unlock! . v5172) (mutex-lock! . v5171) (mutex? . v5170) (make-mutex . v516f) (condition-variable-notify-all! . v516e) (condition-variable-notify! . v516d) (condition-variable-wait! . v516c) (make-condition-variable . v516b) (mosh-executable-path . v516a) (make-file-options . v5169) (source-info . v5168) (make-compiler-instruction . v5167) (make-instruction . v5166) (set-source-info! . v5165) (bignum? . v5164) (fast-equal? . v5163) (fasl-read . v5162) (fasl-write . v5161) (time-usage . v5160) (os-constant . v515f) (make-parameter . v27c3) (socket-port . v515e) (socket-shutdown . v515d) (socket-close . v515c) (socket-send . v515b) (socket-recv! . v515a) (socket-recv . v5159) (make-server-socket . v5158) (make-client-socket . v5157) (socket-accept . v5156) (socket? . v5155) (string-upcase . v5154) (string-titlecase . v5153) (string-normalize-nfkd . v5152) (string-normalize-nfkc . v5151) (string-normalize-nfd . v5150) (string-normalize-nfc . v514f) (string-foldcase . v514e) (string-downcase . v514d) (string-ci>? . v514c) (string-ci>=? . v514b) (string-ci=? . v514a) (string-ci<? . v5149) (string-ci<=? . v5148) (char-whitespace? . v5147) (char-upper-case? . v5146) (char-title-case? . v5145) (char-numeric? . v5144) (char-lower-case? . v5143) (char-general-category . v5142) (char-upcase . v5141) (char-titlecase . v5140) (char-foldcase . v513f) (char-downcase . v513e) (char-ci>? . v513d) (char-ci>=? . v513c) (char-ci=? . v513b) (char-ci<? . v513a) (char-ci<=? . v5139) (char-alphabetic? . v5138) (make-variable-transformer . v2d27) (identifier? . v2fe5) (generate-temporaries . v2fd1) (free-identifier=? . v2fd3) (syntax->datum . v2fe9) (datum->syntax . v2fe7) (bound-identifier=? . v2fd5) (record-type-descriptor? . v5137) (record-predicate . v5136) (record-mutator . v5135) (record-constructor . v5134) (record-accessor . v5133) (make-record-type-descriptor . v5132) (make-record-constructor-descriptor . v5131) (record? . v5130) (record-type-uid . v512f) (record-type-sealed? . v512e) (record-type-parent . v512d) (record-type-opaque? . v512c) (record-type-name . v512b) (record-type-generative? . v512a) (record-type-field-names . v5129) (record-rtd . v5128) (record-field-mutable? . v5127) (delete-file . v5126) (file-exists? . v5125) (vector-sort! . v5124) (vector-sort . v5123) (list-sort . v5122) (symbol-hash . v5121) (string-ci-hash . v5120) (string-hash . v511f) (equal-hash . v511e) (hashtable-equivalence-function . v511d) (make-hashtable . v511c) (hashtable-hash-function . v511b) (make-eqv-hashtable . v511a) (make-eq-hashtable . v5119) (hashtable? . v5118) (hashtable-update! . v5117) (hashtable-size . v5116) (hashtable-set! . v5115) (hashtable-ref . v5114) (hashtable-mutable? . v5113) (hashtable-keys . v5112) (hashtable-entries . v5111) (hashtable-delete! . v5110) (hashtable-copy . v510f) (hashtable-contains? . v510e) (hashtable-clear! . v510d) (call-with-output-file . v510c) (call-with-input-file . v510b) (write-char . v510a) (write . v5109) (with-output-to-file . v5108) (with-input-from-file . v5107) (read-char . v5106) (read . v5105) (peek-char . v5104) (open-output-file . v5103) (open-input-file . v5102) (newline . v5101) (display . v5100) (close-output-port . v50ff) (close-input-port . v50fe) (eof-object? . v50fd) (eof-object . v50fc) (current-error-port . v50fb) (current-output-port . v50fa) (current-input-port . v50f9) (output-port? . v50f8) (input-port? . v50f7) (utf-8-codec . v50f6) (utf-16-codec . v50f5) (transcoder-error-handling-mode . v50f4) (transcoder-eol-style . v50f3) (transcoder-codec . v50f2) (transcoded-port . v50f1) (textual-port? . v50f0) (string->bytevector . v50ef) (standard-output-port . v50ee) (standard-input-port . v50ed) (standard-error-port . v50ec) (set-port-position! . v50eb) (put-u8 . v50ea) (put-string . v50e9) (put-datum . v50e8) (put-char . v50e7) (put-bytevector . v50e6) (port? . v50e5) (port-transcoder . v50e4) (port-position . v50e3) (port-has-set-port-position!? . v50e2) (port-has-port-position? . v50e1) (port-eof? . v50e0) (output-port-buffer-mode . v50df) (open-string-output-port . v50de) (open-string-input-port . v50dd) (open-file-output-port . v50dc) (open-file-input/output-port . v50db) (open-file-input-port . v50da) (open-bytevector-output-port . v50d9) (open-bytevector-input-port . v50d8) (native-transcoder . v50d7) (native-eol-style . v50d6) (make-transcoder . v50d5) (latin-1-codec . v50d4) (make-i/o-write-error . v4ba5) (make-i/o-read-error . v4b90) (make-i/o-port-error . v4c46) (make-i/o-invalid-position-error . v4bbc) (make-i/o-filename-error . v4bd7) (make-i/o-file-protection-error . v4bf0) (make-i/o-file-is-read-only-error . v4c05) (make-i/o-file-does-not-exist-error . v4c2f) (make-i/o-file-already-exists-error . v4c1a) (make-i/o-error . v4b7b) (make-i/o-encoding-error . v4c76) (make-i/o-decoding-error . v4c5f) (make-custom-textual-output-port . v50d3) (make-custom-textual-input/output-port . v50d2) (make-custom-textual-input-port . v50d1) (make-custom-binary-output-port . v50d0) (make-custom-binary-input/output-port . v50cf) (make-custom-binary-input-port . v50ce) (make-bytevector . v50cd) (lookahead-u8 . v50cc) (lookahead-char . v50cb) (i/o-write-error? . v4ba7) (i/o-read-error? . v4b92) (i/o-port-error? . v4c4a) (i/o-invalid-position-error? . v4bc0) (i/o-filename-error? . v4bdb) (i/o-file-protection-error? . v4bf2) (i/o-file-is-read-only-error? . v4c07) (i/o-file-does-not-exist-error? . v4c31) (i/o-file-already-exists-error? . v4c1c) (i/o-error? . v4b7d) (i/o-error-position . v4bc2) (i/o-error-port . v4c4c) (i/o-error-filename . v4bdd) (i/o-encoding-error? . v4c7a) (i/o-encoding-error-char . v4c7c) (i/o-decoding-error? . v4c61) (get-u8 . v50ca) (get-string-n! . v50c9) (get-string-n . v50c8) (get-string-all . v50c7) (get-line . v50c6) (get-datum . v50c5) (get-char . v50c4) (get-bytevector-some . v50c3) (get-bytevector-n! . v50c2) (get-bytevector-n . v50c1) (get-bytevector-all . v50c0) (flush-output-port . v50bf) (close-port . v50be) (scheme-report-environment . v2fbf) (quotient . v50bd) (null-environment . v2fbd) (remainder . v50bc) (modulo . v50bb) (inexact->exact . v50ba) (force . v50b9) (exact->inexact . v50b8) (make-promise . v50b7) (exit . v50b6) (command-line . v4db1) (string-fill! . v50b5) (string-set! . v50b4) (set-cdr! . v50b3) (set-car! . v50b2) (remove . v50b1) (remv . v50b0) (remp . v50af) (remq . v50ae) (partition . v50ad) (memv . v50ac) (memq . v50ab) (memp . v50aa) (member . v50a9) (exists . v50a8) (for-all . v50a7) (fold-right . v50a6) (fold-left . v50a5) (find . v50a4) (filter . v50a3) (cons* . v50a2) (assv . v50a1) (assq . v50a0) (assp . v509f) (assoc . v509e) (call-with-string-output-port . v509d) (call-with-port . v509c) (call-with-bytevector-output-port . v509b) (bytevector->string . v509a) (buffer-mode? . v5099) (binary-port? . v5098) (with-exception-handler . v5097) (raise-continuable . v5096) (raise . v5095) (eval . v2fc3) (environment . v2fbb) (make-enumeration . v5094) (enum-set=? . v5093) (enum-set-universe . v5092) (enum-set-union . v5091) (enum-set-subset? . v5090) (enum-set-projection . v508f) (enum-set-member? . v508e) (enum-set-intersection . v508d) (enum-set-indexer . v508c) (enum-set-difference . v508b) (enum-set-constructor . v508a) (enum-set-complement . v5089) (enum-set->list . v5088) (who-condition? . v4af1) (warning? . v4a69) (violation? . v4aa8) (undefined-violation? . v4b68) (syntax-violation? . v4b4f) (syntax-violation-subform . v4b53) (syntax-violation-form . v4b51) (syntax-violation . v2fe3) (simple-conditions . v5087) (serious-condition? . v4a7e) (non-continuable-violation? . v4b08) (message-condition? . v4a52) (make-who-condition . v4aed) (make-warning . v4a67) (make-violation . v4aa6) (make-undefined-violation . v4b66) (make-syntax-violation . v4b49) (make-serious-condition . v4a7c) (make-non-continuable-violation . v4b06) (make-message-condition . v4a4e) (make-lexical-violation . v4b30) (make-irritants-condition . v4ad2) (make-implementation-restriction-violation . v4b1b) (make-error . v4a91) (make-assertion-violation . v4abb) (lexical-violation? . v4b32) (irritants-condition? . v4ad6) (implementation-restriction-violation? . v4b1d) (error? . v4a93) (condition-who . v4af3) (condition-predicate . v5086) (condition-message . v4a54) (condition-irritants . v4ad8) (condition-accessor . v5085) (condition . v5084) (assertion-violation? . v4abd) (condition? . v5083) (utf32->string . v5082) (utf16->string . v5081) (utf8->string . v5080) (uint-list->bytevector . v507f) (u8-list->bytevector . v507e) (string->utf8 . v507d) (string->utf32 . v507c) (string->utf16 . v507b) (sint-list->bytevector . v507a) (native-endianness . v5079) (bytevector? . v5078) (bytevector=? . v5077) (bytevector-uint-set! . v5076) (bytevector-uint-ref . v5075) (bytevector-u8-set! . v5074) (bytevector-u8-ref . v5073) (bytevector-u64-set! . v5072) (bytevector-u64-ref . v5071) (bytevector-u64-native-set! . v5070) (bytevector-u64-native-ref . v506f) (bytevector-u32-set! . v506e) (bytevector-u32-ref . v506d) (bytevector-u32-native-set! . v506c) (bytevector-u32-native-ref . v506b) (bytevector-u16-set! . v506a) (bytevector-u16-ref . v5069) (bytevector-u16-native-set! . v5068) (bytevector-u16-native-ref . v5067) (bytevector-sint-set! . v5066) (bytevector-sint-ref . v5065) (bytevector-s8-set! . v5064) (bytevector-s8-ref . v5063) (bytevector-s64-set! . v5062) (bytevector-s64-ref . v5061) (bytevector-s64-native-set! . v5060) (bytevector-s64-native-ref . v505f) (bytevector-s32-set! . v505e) (bytevector-s32-ref . v505d) (bytevector-s32-native-set! . v505c) (bytevector-s32-native-ref . v505b) (bytevector-s16-set! . v505a) (bytevector-s16-ref . v5059) (bytevector-s16-native-set! . v5058) (bytevector-s16-native-ref . v5057) (bytevector-length . v5056) (bytevector-ieee-single-ref . v5055) (bytevector-ieee-single-set! . v5054) (bytevector-ieee-single-native-set! . v5053) (bytevector-ieee-single-native-ref . v5052) (bytevector-ieee-double-set! . v5051) (bytevector-ieee-double-ref . v5050) (bytevector-ieee-double-native-set! . v504f) (bytevector-ieee-double-native-ref . v504e) (bytevector-fill! . v504d) (bytevector-copy! . v504c) (bytevector-copy . v504b) (bytevector->uint-list . v504a) (bytevector->u8-list . v5049) (bytevector->sint-list . v5048) (no-nans-violation? . v4ca6) (no-infinities-violation? . v4c91) (make-no-nans-violation . v4ca4) (make-no-infinities-violation . v4c8f) (real->flonum . v5047) (flzero? . v5046) (fltruncate . v5045) (fltan . v5044) (flsqrt . v5043) (flsin . v5042) (flround . v5041) (flpositive? . v5040) (flonum? . v503f) (flodd? . v503e) (flnumerator . v503d) (flnegative? . v503c) (flnan? . v503b) (flmod0 . v503a) (flmod . v5039) (flmin . v5038) (flmax . v5037) (fllog . v5036) (flinteger? . v5035) (flinfinite? . v5034) (flfloor . v5033) (flfinite? . v5032) (flexpt . v5031) (flexp . v5030) (fleven? . v502f) (fldiv0-and-mod0 . v502e) (fldiv0 . v502d) (fldiv-and-mod . v502c) (fldiv . v502b) (fldenominator . v502a) (flcos . v5029) (flceiling . v5028) (flatan . v5027) (flasin . v5026) (flacos . v5025) (flabs . v5024) (fl>? . v5023) (fl>=? . v5022) (fl=? . v5021) (fl<? . v5020) (fl<=? . v501f) (fl/ . v501e) (fl- . v501d) (fl+ . v501c) (fl* . v501b) (fixnum->flonum . v501a) (fxzero? . v5019) (fxxor . v5018) (fxrotate-bit-field . v5017) (fxreverse-bit-field . v5016) (fxpositive? . v5015) (fxodd? . v5014) (fxnot . v5013) (fxnegative? . v5012) (fxmod0 . v5011) (fxmod . v5010) (fxmin . v500f) (fxmax . v500e) (fxlength . v500d) (fxior . v500c) (fxif . v500b) (fxfirst-bit-set . v500a) (fxeven? . v5009) (fxdiv0-and-mod0 . v5008) (fxdiv0 . v5007) (fxdiv-and-mod . v5006) (fxdiv . v5005) (fxcopy-bit-field . v5004) (fxcopy-bit . v5003) (fxbit-set? . v5002) (fxbit-field . v5001) (fxbit-count . v5000) (fxarithmetic-shift-right . v4fff) (fxarithmetic-shift-left . v4ffe) (fxarithmetic-shift . v4ffd) (fxand . v4ffc) (fx>? . v4ffb) (fx>=? . v4ffa) (fx=? . v4ff9) (fx<? . v4ff8) (fx<=? . v4ff7) (fx-/carry . v4ff6) (fx- . v4ff5) (fx+/carry . v4ff4) (fx+ . v4ff3) (fx*/carry . v4ff2) (fx* . v4ff1) (greatest-fixnum . v4ff0) (least-fixnum . v4fef) (fixnum-width . v4fee) (fixnum? . v4fed) (bitwise-rotate-bit-field . v4fec) (bitwise-reverse-bit-field . v4feb) (bitwise-length . v4fea) (bitwise-if . v4fe9) (bitwise-first-bit-set . v4fe8) (bitwise-copy-bit-field . v4fe7) (bitwise-copy-bit . v4fe6) (bitwise-bit-set? . v4fe5) (bitwise-bit-field . v4fe4) (bitwise-bit-count . v4fe3) (bitwise-xor . v4fe2) (bitwise-ior . v4fe1) (bitwise-and . v4fe0) (bitwise-not . v4fdf) (bitwise-arithmetic-shift-right . v4fde) (bitwise-arithmetic-shift-left . v4fdd) (bitwise-arithmetic-shift . v4fdc) (zero? . v4fdb) (vector? . v4fda) (vector-set! . v4fd9) (vector-ref . v4fd8) (vector-map . v4fd7) (vector-length . v4fd6) (vector-for-each . v4fd5) (vector-fill! . v4fd4) (vector->list . v4fd3) (vector . v4fd2) (values . v4fd1) (truncate . v4fd0) (tan . v4fcf) (symbol? . v4fce) (symbol=? . v4fcd) (symbol->string . v4fcc) (substring . v4fcb) (string? . v4fca) (string>? . v4fc9) (string>=? . v4fc8) (string=? . v4fc7) (string<? . v4fc6) (string<=? . v4fc5) (string-ref . v4fc4) (string-length . v4fc3) (string-for-each . v4fc2) (string-copy . v4fc1) (string-append . v4fc0) (string->symbol . v4fbf) (string->number . v4fbe) (string->list . v4fbd) (string . v4fbc) (sqrt . v4fbb) (sin . v4fba) (round . v4fb9) (reverse . v4fb8) (real? . v4fb7) (real-valued? . v4fb6) (real-part . v4fb5) (rationalize . v4fb4) (rational? . v4fb3) (rational-valued? . v4fb2) (procedure? . v4fb1) (positive? . v4fb0) (pair? . v4faf) (odd? . v4fae) (numerator . v4fad) (number? . v4fac) (number->string . v4fab) (null? . v4faa) (not . v4fa9) (negative? . v4fa8) (nan? . v4fa7) (min . v4fa6) (max . v4fa5) (map . v4fa4) (make-vector . v4fa3) (make-string . v4fa2) (make-rectangular . v4fa1) (make-polar . v4fa0) (magnitude . v4f9f) (log . v4f9e) (list? . v4f9d) (list-tail . v4f9c) (list-ref . v4f9b) (list->vector . v4f9a) (list->string . v4f99) (list . v4f98) (length . v4f97) (lcm . v4f96) (integer? . v4f95) (integer-valued? . v4f94) (integer->char . v4f93) (infinite? . v4f92) (inexact? . v4f91) (inexact . v4f90) (imag-part . v4f8f) (gcd . v4f8e) (for-each . v4f8d) (floor . v4f8c) (finite? . v4f8b) (expt . v4f8a) (exp . v4f89) (exact? . v4f88) (exact-integer-sqrt . v4f87) (exact . v4f86) (even? . v4f85) (error . v4f84) (eqv? . v4f83) (equal? . v4f82) (eq? . v4f81) (dynamic-wind . v4f80) (div0-and-mod0 . v4f7f) (mod0 . v4f7e) (div0 . v4f7d) (div-and-mod . v4f7c) (mod . v4f7b) (div . v4f7a) (denominator . v4f79) (cos . v4f78) (cons . v4f77) (complex? . v4f76) (char? . v4f75) (char>? . v4f74) (char>=? . v4f73) (char=? . v4f72) (char<? . v4f71) (char<=? . v4f70) (char->integer . v4f6f) (ceiling . v4f6e) (call-with-values . v4f6d) (call/cc . v4f6c) (call-with-current-continuation . v4f6b) (cddddr . v4f6a) (cdddar . v4f69) (cddadr . v4f68) (cddaar . v4f67) (cdaddr . v4f66) (cdadar . v4f65) (cdaadr . v4f64) (cdaaar . v4f63) (cadddr . v4f62) (caddar . v4f61) (cadadr . v4f60) (cadaar . v4f5f) (caaddr . v4f5e) (caadar . v4f5d) (caaadr . v4f5c) (caaaar . v4f5b) (cdddr . v4f5a) (cddar . v4f59) (cdadr . v4f58) (cdaar . v4f57) (caddr . v4f56) (cadar . v4f55) (caadr . v4f54) (caaar . v4f53) (cddr . v4f52) (cdar . v4f51) (cadr . v4f50) (caar . v4f4f) (cdr . v4f4e) (car . v4f4d) (boolean? . v4f4c) (boolean=? . v4f4b) (atan . v4f4a) (assertion-violation . v4f49) (assertion-error . v2fdd) (asin . v4f48) (apply . v4f47) (append . v4f46) (angle . v4f45) (acos . v4f44) (abs . v4f43) (/ . v4f42) (* . v4f41) (- . v4f40) (+ . v4f3f) (>= . v4f3e) (> . v4f3d) (= . v4f3c) (<= . v4f3b) (< . v4f3a) (library . v4f39) (&no-nans . v4f38) (&no-infinities . v4f37) (&i/o-encoding . v4f36) (&i/o-decoding . v4f35) (&i/o-port . v4f34) (&i/o-file-does-not-exist . v4f33) (&i/o-file-already-exists . v4f32) (&i/o-file-is-read-only . v4f31) (&i/o-file-protection . v4f30) (&i/o-filename . v4f2f) (&i/o-invalid-position . v4f2e) (&i/o-write . v4f2d) (&i/o-read . v4f2c) (&i/o . v4f2b) (&undefined . v4f2a) (&syntax . v4f29) (&lexical . v4f28) (&implementation-restriction . v4f27) (&non-continuable . v4f26) (&who . v4f25) (&irritants . v4f24) (&assertion . v4f23) (&violation . v4f22) (&error . v4f21) (&serious . v4f20) (&warning . v4f1f) (&message . v4f1e) (&condition . v4f1d) (define-condition-type . v4f1c) (define-enumeration . v4f1b) (define-record-type . v4f1a) (parent-rtd . v4f19) (nongenerative . v4f18) (opaque . v4f17) (sealed . v4f16) (protocol . v4f15) (parent . v4f14) (immutable . v4f13) (mutable . v4f12) (fields . v4f11) (error-handling-mode . v4f10) (file-options . v4f0f) (buffer-mode . v4f0e) (eol-style . v4f0d) (guard . v4f0c) (trace-define . v4f0b) (trace-lambda . v4f0a) (unsyntax-splicing . v4f09) (unsyntax . v4f08) (unquote-splicing . v4f07) (unquote . v4f06) (_ . v4f05) (else . v4f04) (=> . v4f03) (... . v4f02) (assert . v4f01) (endianness . v4f00) (delay . v4eff) (time . v4efe) (do . v4efd) (cond . v4efc) (let* . v4efb) (let . v4efa) (let*-values . v4ef9) (let-values . v4ef8) (identifier-syntax . v4ef7) (with-syntax . v4ef6) (quasisyntax . v4ef5) (quasiquote . v4ef4) (syntax-rules . v4ef3) (include . v4ef2) (define-struct . v4ef1) (record-constructor-descriptor . v4ef0) (record-type-descriptor . v4eef) (case . v4eee) (parameterize . v4eed) (unless . v4eec) (when . v4eeb) (or . v4eea) (and . v4ee9) (if . v4ee8) (letrec* . v4ee7) (letrec . v4ee6) (type-descriptor . v4ee5) (case-lambda . v4ee4) (lambda . v4ee3) (syntax . v4ee2) (syntax-case . v4ee1) (quote . v4ee0) (foreign-call . v4edf) (letrec-syntax . v4ede) (let-syntax . v4edd) (set! . v4edc) (import . v4edb) (begin . v4eda) (module . v4ed9) (define-syntax . v4ed8) (define . v4ed7)) '((v4caa core-prim . &no-nans-rcd) (v4ca8 core-prim . &no-nans-rtd) (v4c95 core-prim . &no-infinities-rcd) (v4c93 core-prim . &no-infinities-rtd) (v4c80 core-prim . &i/o-encoding-rcd) (v4c7e core-prim . &i/o-encoding-rtd) (v4c65 core-prim . &i/o-decoding-rcd) (v4c63 core-prim . &i/o-decoding-rtd) (v4c50 core-prim . &i/o-port-rcd) (v4c4e core-prim . &i/o-port-rtd) (v4c35 core-prim . &i/o-file-does-not-exist-rcd) (v4c33 core-prim . &i/o-file-does-not-exist-rtd) (v4c20 core-prim . &i/o-file-already-exists-rcd) (v4c1e core-prim . &i/o-file-already-exists-rtd) (v4c0b core-prim . &i/o-file-is-read-only-rcd) (v4c09 core-prim . &i/o-file-is-read-only-rtd) (v4bf6 core-prim . &i/o-file-protection-rcd) (v4bf4 core-prim . &i/o-file-protection-rtd) (v4be1 core-prim . &i/o-filename-rcd) (v4bdf core-prim . &i/o-filename-rtd) (v4bc6 core-prim . &i/o-invalid-position-rcd) (v4bc4 core-prim . &i/o-invalid-position-rtd) (v4bab core-prim . &i/o-write-rcd) (v4ba9 core-prim . &i/o-write-rtd) (v4b96 core-prim . &i/o-read-rcd) (v4b94 core-prim . &i/o-read-rtd) (v4b81 core-prim . &i/o-rcd) (v4b7f core-prim . &i/o-rtd) (v4b6c core-prim . &undefined-rcd) (v4b6a core-prim . &undefined-rtd) (v4b57 core-prim . &syntax-rcd) (v4b55 core-prim . &syntax-rtd) (v4b36 core-prim . &lexical-rcd) (v4b34 core-prim . &lexical-rtd) (v4b21 core-prim . &implementation-restriction-rcd) (v4b1f core-prim . &implementation-restriction-rtd) (v4b0c core-prim . &non-continuable-rcd) (v4b0a core-prim . &non-continuable-rtd) (v4af7 core-prim . &who-rcd) (v4af5 core-prim . &who-rtd) (v4adc core-prim . &irritants-rcd) (v4ada core-prim . &irritants-rtd) (v4ac1 core-prim . &assertion-rcd) (v4abf core-prim . &assertion-rtd) (v4aac core-prim . &violation-rcd) (v4aaa core-prim . &violation-rtd) (v4a97 core-prim . &error-rcd) (v4a95 core-prim . &error-rtd) (v4a82 core-prim . &serious-rcd) (v4a80 core-prim . &serious-rtd) (v4a6d core-prim . &warning-rcd) (v4a6b core-prim . &warning-rtd) (v4a58 core-prim . &message-rcd) (v4a56 core-prim . &message-rtd) (v49f9 core-prim . &condition-rcd) (v49f7 core-prim . &condition-rtd) (v2fdf core-prim . syntax-error) (v2efa core-prim . syntax-dispatch) (v51ea core-prim . pretty-print) (v51e9 core-prim . eval-core) (v51e8 core-prim . set-symbol-value!) (v51e7 core-prim . symbol-value) (v51e6 core-prim . gensym) (v51e5 core-prim . void) (v4db7 core-prim . load) (v2fef core-prim . interaction-environment) (v51e4 core-prim . char-ready?) (v51e3 core-prim . regexp?) (v51e2 core-prim . read-line) (v51e1 core-prim . ungensym) (v51e0 core-prim . alist->eq-hash-table) (v51df core-prim . assoc-ref) (v51de core-prim . print) (v51dd core-prim . format) (v51dc core-prim . host-os) (v2990 core-prim . library-path) (v51db core-prim . standard-library-path) (v51da core-prim . file-newer?) (v51d9 core-prim . stat-mtime) (v51d8 core-prim . write-to-file) (v51d7 core-prim . file->list) (v51d6 core-prim . file->string) (v51d5 core-prim . digit->integer) (v51d4 core-prim . call-with-string-input-port) (v51d3 core-prim . call-with-string-io) (v51d2 core-prim . string-split) (v51d1 core-prim . bytevector-for-each) (v51d0 core-prim . string->regexp) (v51cf core-prim . rxmatch) (v51ce core-prim . regexp-replace-all) (v51cd core-prim . hashtable-for-each) (v51cc core-prim . call-process) (v51cb core-prim . local-tz-offset) (v51ca core-prim . microseconds) (v51c9 core-prim . directory-list) (v51c8 core-prim . set-current-directory!) (v51c7 core-prim . expand-path) (v51c6 core-prim . current-directory) (v51c5 core-prim . %spawn) (v51c4 core-prim . %waitpid) (v51c3 core-prim . pointer-ref-c-int64) (v51c2 core-prim . pointer-ref-c-int32) (v51c1 core-prim . pointer-ref-c-int16) (v51c0 core-prim . pointer-ref-c-int8) (v51bf core-prim . pointer-ref-c-uint64) (v51be core-prim . pointer-ref-c-uint32) (v51bd core-prim . pointer-ref-c-uint16) (v51bc core-prim . pointer-ref-c-uint8) (v51bb core-prim . pointer-set-c-int64!) (v51ba core-prim . pointer-set-c-int32!) (v51b9 core-prim . pointer-set-c-int16!) (v51b8 core-prim . pointer-set-c-int8!) (v51b7 core-prim . pointer-set-c-pointer!) (v51b6 core-prim . pointer-set-c-double!) (v51b5 core-prim . pointer-set-c-float!) (v51b4 core-prim . pointer-set-c-long-long!) (v51b3 core-prim . pointer-set-c-long!) (v51b2 core-prim . pointer-set-c-int!) (v51b1 core-prim . pointer-set-c-short!) (v51b0 core-prim . pointer-set-c-char!) (v51af core-prim . pointer-ref-c-pointer) (v51ae core-prim . pointer-ref-c-double) (v51ad core-prim . pointer-ref-c-float) (v51ac core-prim . pointer-ref-c-unsigned-long-long) (v51ab core-prim . pointer-ref-c-signed-long-long) (v51aa core-prim . pointer-ref-c-unsigned-long) (v51a9 core-prim . pointer-ref-c-signed-long) (v51a8 core-prim . pointer-ref-c-unsigned-int) (v51a7 core-prim . pointer-ref-c-signed-int) (v51a6 core-prim . pointer-ref-c-unsigned-short) (v51a5 core-prim . pointer-ref-c-signed-short) (v51a4 core-prim . pointer-ref-c-unsigned-char) (v51a3 core-prim . pointer-ref-c-signed-char) (v51a2 core-prim . pointer->integer) (v51a1 core-prim . integer->pointer) (v51a0 core-prim . pointer?) (v519f core-prim . %ffi-supported?) (v519e core-prim . %ffi-pointer-ref) (v519d core-prim . %ffi-pointer->string) (v519c core-prim . %ffi-call->string-or-zero) (v519b core-prim . %ffi-call->double) (v519a core-prim . %ffi-call->void*) (v5199 core-prim . %ffi-call->void) (v5198 core-prim . %ffi-call->int) (v5197 core-prim . %ffi-lookup) (v5196 core-prim . %ffi-open) (v5195 core-prim . %fork) (v5194 core-prim . %pipe) (v5193 core-prim . p) (v5192 core-prim . open-output-string) (v5191 core-prim . get-output-string) (v5190 core-prim . file-stat-ctime) (v518f core-prim . file-stat-atime) (v518e core-prim . file-stat-mtime) (v518d core-prim . file-size-in-bytes) (v518c core-prim . file-writable?) (v518b core-prim . file-executable?) (v518a core-prim . file-readable?) (v5189 core-prim . file-regular?) (v5188 core-prim . file-symbolic-link?) (v5187 core-prim . file-directory?) (v5186 core-prim . create-symbolic-link) (v5185 core-prim . rename-file) (v5184 core-prim . delete-directory) (v5183 core-prim . create-directory) (v5182 core-prim . get-environment-variables) (v5181 core-prim . get-environment-variable) (v5180 core-prim . get-timeofday) (v517f core-prim . get-command-line) (v517e core-prim . sys-display) (v517d core-prim . whereis) (v517c core-prim . register) (v517b core-prim . vm-join!) (v517a core-prim . vm-set-value!) (v5179 core-prim . vm?) (v5178 core-prim . main-vm?) (v5177 core-prim . vm-eval) (v5176 core-prim . vm-self) (v5175 core-prim . vm-start!) (v5174 core-prim . make-vm) (v5173 core-prim . mutex-try-lock!) (v5172 core-prim . mutex-unlock!) (v5171 core-prim . mutex-lock!) (v5170 core-prim . mutex?) (v516f core-prim . make-mutex) (v516e core-prim . condition-variable-notify-all!) (v516d core-prim . condition-variable-notify!) (v516c core-prim . condition-variable-wait!) (v516b core-prim . make-condition-variable) (v516a core-prim . mosh-executable-path) (v5169 core-prim . make-file-options) (v5168 core-prim . source-info) (v5167 core-prim . make-compiler-instruction) (v5166 core-prim . make-instruction) (v5165 core-prim . set-source-info!) (v5164 core-prim . bignum?) (v5163 core-prim . fast-equal?) (v5162 core-prim . fasl-read) (v5161 core-prim . fasl-write) (v5160 core-prim . time-usage) (v515f core-prim . os-constant) (v27c3 core-prim . make-parameter) (v515e core-prim . socket-port) (v515d core-prim . socket-shutdown) (v515c core-prim . socket-close) (v515b core-prim . socket-send) (v515a core-prim . socket-recv!) (v5159 core-prim . socket-recv) (v5158 core-prim . make-server-socket) (v5157 core-prim . make-client-socket) (v5156 core-prim . socket-accept) (v5155 core-prim . socket?) (v5154 core-prim . string-upcase) (v5153 core-prim . string-titlecase) (v5152 core-prim . string-normalize-nfkd) (v5151 core-prim . string-normalize-nfkc) (v5150 core-prim . string-normalize-nfd) (v514f core-prim . string-normalize-nfc) (v514e core-prim . string-foldcase) (v514d core-prim . string-downcase) (v514c core-prim . string-ci>?) (v514b core-prim . string-ci>=?) (v514a core-prim . string-ci=?) (v5149 core-prim . string-ci<?) (v5148 core-prim . string-ci<=?) (v5147 core-prim . char-whitespace?) (v5146 core-prim . char-upper-case?) (v5145 core-prim . char-title-case?) (v5144 core-prim . char-numeric?) (v5143 core-prim . char-lower-case?) (v5142 core-prim . char-general-category) (v5141 core-prim . char-upcase) (v5140 core-prim . char-titlecase) (v513f core-prim . char-foldcase) (v513e core-prim . char-downcase) (v513d core-prim . char-ci>?) (v513c core-prim . char-ci>=?) (v513b core-prim . char-ci=?) (v513a core-prim . char-ci<?) (v5139 core-prim . char-ci<=?) (v5138 core-prim . char-alphabetic?) (v2d27 core-prim . make-variable-transformer) (v2fe5 core-prim . identifier?) (v2fd1 core-prim . generate-temporaries) (v2fd3 core-prim . free-identifier=?) (v2fe9 core-prim . syntax->datum) (v2fe7 core-prim . datum->syntax) (v2fd5 core-prim . bound-identifier=?) (v5137 core-prim . record-type-descriptor?) (v5136 core-prim . record-predicate) (v5135 core-prim . record-mutator) (v5134 core-prim . record-constructor) (v5133 core-prim . record-accessor) (v5132 core-prim . make-record-type-descriptor) (v5131 core-prim . make-record-constructor-descriptor) (v5130 core-prim . record?) (v512f core-prim . record-type-uid) (v512e core-prim . record-type-sealed?) (v512d core-prim . record-type-parent) (v512c core-prim . record-type-opaque?) (v512b core-prim . record-type-name) (v512a core-prim . record-type-generative?) (v5129 core-prim . record-type-field-names) (v5128 core-prim . record-rtd) (v5127 core-prim . record-field-mutable?) (v5126 core-prim . delete-file) (v5125 core-prim . file-exists?) (v5124 core-prim . vector-sort!) (v5123 core-prim . vector-sort) (v5122 core-prim . list-sort) (v5121 core-prim . symbol-hash) (v5120 core-prim . string-ci-hash) (v511f core-prim . string-hash) (v511e core-prim . equal-hash) (v511d core-prim . hashtable-equivalence-function) (v511c core-prim . make-hashtable) (v511b core-prim . hashtable-hash-function) (v511a core-prim . make-eqv-hashtable) (v5119 core-prim . make-eq-hashtable) (v5118 core-prim . hashtable?) (v5117 core-prim . hashtable-update!) (v5116 core-prim . hashtable-size) (v5115 core-prim . hashtable-set!) (v5114 core-prim . hashtable-ref) (v5113 core-prim . hashtable-mutable?) (v5112 core-prim . hashtable-keys) (v5111 core-prim . hashtable-entries) (v5110 core-prim . hashtable-delete!) (v510f core-prim . hashtable-copy) (v510e core-prim . hashtable-contains?) (v510d core-prim . hashtable-clear!) (v510c core-prim . call-with-output-file) (v510b core-prim . call-with-input-file) (v510a core-prim . write-char) (v5109 core-prim . write) (v5108 core-prim . with-output-to-file) (v5107 core-prim . with-input-from-file) (v5106 core-prim . read-char) (v5105 core-prim . read) (v5104 core-prim . peek-char) (v5103 core-prim . open-output-file) (v5102 core-prim . open-input-file) (v5101 core-prim . newline) (v5100 core-prim . display) (v50ff core-prim . close-output-port) (v50fe core-prim . close-input-port) (v50fd core-prim . eof-object?) (v50fc core-prim . eof-object) (v50fb core-prim . current-error-port) (v50fa core-prim . current-output-port) (v50f9 core-prim . current-input-port) (v50f8 core-prim . output-port?) (v50f7 core-prim . input-port?) (v50f6 core-prim . utf-8-codec) (v50f5 core-prim . utf-16-codec) (v50f4 core-prim . transcoder-error-handling-mode) (v50f3 core-prim . transcoder-eol-style) (v50f2 core-prim . transcoder-codec) (v50f1 core-prim . transcoded-port) (v50f0 core-prim . textual-port?) (v50ef core-prim . string->bytevector) (v50ee core-prim . standard-output-port) (v50ed core-prim . standard-input-port) (v50ec core-prim . standard-error-port) (v50eb core-prim . set-port-position!) (v50ea core-prim . put-u8) (v50e9 core-prim . put-string) (v50e8 core-prim . put-datum) (v50e7 core-prim . put-char) (v50e6 core-prim . put-bytevector) (v50e5 core-prim . port?) (v50e4 core-prim . port-transcoder) (v50e3 core-prim . port-position) (v50e2 core-prim . port-has-set-port-position!?) (v50e1 core-prim . port-has-port-position?) (v50e0 core-prim . port-eof?) (v50df core-prim . output-port-buffer-mode) (v50de core-prim . open-string-output-port) (v50dd core-prim . open-string-input-port) (v50dc core-prim . open-file-output-port) (v50db core-prim . open-file-input/output-port) (v50da core-prim . open-file-input-port) (v50d9 core-prim . open-bytevector-output-port) (v50d8 core-prim . open-bytevector-input-port) (v50d7 core-prim . native-transcoder) (v50d6 core-prim . native-eol-style) (v50d5 core-prim . make-transcoder) (v50d4 core-prim . latin-1-codec) (v4ba5 core-prim . make-i/o-write-error) (v4b90 core-prim . make-i/o-read-error) (v4c46 core-prim . make-i/o-port-error) (v4bbc core-prim . make-i/o-invalid-position-error) (v4bd7 core-prim . make-i/o-filename-error) (v4bf0 core-prim . make-i/o-file-protection-error) (v4c05 core-prim . make-i/o-file-is-read-only-error) (v4c2f core-prim . make-i/o-file-does-not-exist-error) (v4c1a core-prim . make-i/o-file-already-exists-error) (v4b7b core-prim . make-i/o-error) (v4c76 core-prim . make-i/o-encoding-error) (v4c5f core-prim . make-i/o-decoding-error) (v50d3 core-prim . make-custom-textual-output-port) (v50d2 core-prim . make-custom-textual-input/output-port) (v50d1 core-prim . make-custom-textual-input-port) (v50d0 core-prim . make-custom-binary-output-port) (v50cf core-prim . make-custom-binary-input/output-port) (v50ce core-prim . make-custom-binary-input-port) (v50cd core-prim . make-bytevector) (v50cc core-prim . lookahead-u8) (v50cb core-prim . lookahead-char) (v4ba7 core-prim . i/o-write-error?) (v4b92 core-prim . i/o-read-error?) (v4c4a core-prim . i/o-port-error?) (v4bc0 core-prim . i/o-invalid-position-error?) (v4bdb core-prim . i/o-filename-error?) (v4bf2 core-prim . i/o-file-protection-error?) (v4c07 core-prim . i/o-file-is-read-only-error?) (v4c31 core-prim . i/o-file-does-not-exist-error?) (v4c1c core-prim . i/o-file-already-exists-error?) (v4b7d core-prim . i/o-error?) (v4bc2 core-prim . i/o-error-position) (v4c4c core-prim . i/o-error-port) (v4bdd core-prim . i/o-error-filename) (v4c7a core-prim . i/o-encoding-error?) (v4c7c core-prim . i/o-encoding-error-char) (v4c61 core-prim . i/o-decoding-error?) (v50ca core-prim . get-u8) (v50c9 core-prim . get-string-n!) (v50c8 core-prim . get-string-n) (v50c7 core-prim . get-string-all) (v50c6 core-prim . get-line) (v50c5 core-prim . get-datum) (v50c4 core-prim . get-char) (v50c3 core-prim . get-bytevector-some) (v50c2 core-prim . get-bytevector-n!) (v50c1 core-prim . get-bytevector-n) (v50c0 core-prim . get-bytevector-all) (v50bf core-prim . flush-output-port) (v50be core-prim . close-port) (v2fbf core-prim . scheme-report-environment) (v50bd core-prim . quotient) (v2fbd core-prim . null-environment) (v50bc core-prim . remainder) (v50bb core-prim . modulo) (v50ba core-prim . inexact->exact) (v50b9 core-prim . force) (v50b8 core-prim . exact->inexact) (v50b7 core-prim . make-promise) (v50b6 core-prim . exit) (v4db1 core-prim . command-line) (v50b5 core-prim . string-fill!) (v50b4 core-prim . string-set!) (v50b3 core-prim . set-cdr!) (v50b2 core-prim . set-car!) (v50b1 core-prim . remove) (v50b0 core-prim . remv) (v50af core-prim . remp) (v50ae core-prim . remq) (v50ad core-prim . partition) (v50ac core-prim . memv) (v50ab core-prim . memq) (v50aa core-prim . memp) (v50a9 core-prim . member) (v50a8 core-prim . exists) (v50a7 core-prim . for-all) (v50a6 core-prim . fold-right) (v50a5 core-prim . fold-left) (v50a4 core-prim . find) (v50a3 core-prim . filter) (v50a2 core-prim . cons*) (v50a1 core-prim . assv) (v50a0 core-prim . assq) (v509f core-prim . assp) (v509e core-prim . assoc) (v509d core-prim . call-with-string-output-port) (v509c core-prim . call-with-port) (v509b core-prim . call-with-bytevector-output-port) (v509a core-prim . bytevector->string) (v5099 core-prim . buffer-mode?) (v5098 core-prim . binary-port?) (v5097 core-prim . with-exception-handler) (v5096 core-prim . raise-continuable) (v5095 core-prim . raise) (v2fc3 core-prim . eval) (v2fbb core-prim . environment) (v5094 core-prim . make-enumeration) (v5093 core-prim . enum-set=?) (v5092 core-prim . enum-set-universe) (v5091 core-prim . enum-set-union) (v5090 core-prim . enum-set-subset?) (v508f core-prim . enum-set-projection) (v508e core-prim . enum-set-member?) (v508d core-prim . enum-set-intersection) (v508c core-prim . enum-set-indexer) (v508b core-prim . enum-set-difference) (v508a core-prim . enum-set-constructor) (v5089 core-prim . enum-set-complement) (v5088 core-prim . enum-set->list) (v4af1 core-prim . who-condition?) (v4a69 core-prim . warning?) (v4aa8 core-prim . violation?) (v4b68 core-prim . undefined-violation?) (v4b4f core-prim . syntax-violation?) (v4b53 core-prim . syntax-violation-subform) (v4b51 core-prim . syntax-violation-form) (v2fe3 core-prim . syntax-violation) (v5087 core-prim . simple-conditions) (v4a7e core-prim . serious-condition?) (v4b08 core-prim . non-continuable-violation?) (v4a52 core-prim . message-condition?) (v4aed core-prim . make-who-condition) (v4a67 core-prim . make-warning) (v4aa6 core-prim . make-violation) (v4b66 core-prim . make-undefined-violation) (v4b49 core-prim . make-syntax-violation) (v4a7c core-prim . make-serious-condition) (v4b06 core-prim . make-non-continuable-violation) (v4a4e core-prim . make-message-condition) (v4b30 core-prim . make-lexical-violation) (v4ad2 core-prim . make-irritants-condition) (v4b1b core-prim . make-implementation-restriction-violation) (v4a91 core-prim . make-error) (v4abb core-prim . make-assertion-violation) (v4b32 core-prim . lexical-violation?) (v4ad6 core-prim . irritants-condition?) (v4b1d core-prim . implementation-restriction-violation?) (v4a93 core-prim . error?) (v4af3 core-prim . condition-who) (v5086 core-prim . condition-predicate) (v4a54 core-prim . condition-message) (v4ad8 core-prim . condition-irritants) (v5085 core-prim . condition-accessor) (v5084 core-prim . condition) (v4abd core-prim . assertion-violation?) (v5083 core-prim . condition?) (v5082 core-prim . utf32->string) (v5081 core-prim . utf16->string) (v5080 core-prim . utf8->string) (v507f core-prim . uint-list->bytevector) (v507e core-prim . u8-list->bytevector) (v507d core-prim . string->utf8) (v507c core-prim . string->utf32) (v507b core-prim . string->utf16) (v507a core-prim . sint-list->bytevector) (v5079 core-prim . native-endianness) (v5078 core-prim . bytevector?) (v5077 core-prim . bytevector=?) (v5076 core-prim . bytevector-uint-set!) (v5075 core-prim . bytevector-uint-ref) (v5074 core-prim . bytevector-u8-set!) (v5073 core-prim . bytevector-u8-ref) (v5072 core-prim . bytevector-u64-set!) (v5071 core-prim . bytevector-u64-ref) (v5070 core-prim . bytevector-u64-native-set!) (v506f core-prim . bytevector-u64-native-ref) (v506e core-prim . bytevector-u32-set!) (v506d core-prim . bytevector-u32-ref) (v506c core-prim . bytevector-u32-native-set!) (v506b core-prim . bytevector-u32-native-ref) (v506a core-prim . bytevector-u16-set!) (v5069 core-prim . bytevector-u16-ref) (v5068 core-prim . bytevector-u16-native-set!) (v5067 core-prim . bytevector-u16-native-ref) (v5066 core-prim . bytevector-sint-set!) (v5065 core-prim . bytevector-sint-ref) (v5064 core-prim . bytevector-s8-set!) (v5063 core-prim . bytevector-s8-ref) (v5062 core-prim . bytevector-s64-set!) (v5061 core-prim . bytevector-s64-ref) (v5060 core-prim . bytevector-s64-native-set!) (v505f core-prim . bytevector-s64-native-ref) (v505e core-prim . bytevector-s32-set!) (v505d core-prim . bytevector-s32-ref) (v505c core-prim . bytevector-s32-native-set!) (v505b core-prim . bytevector-s32-native-ref) (v505a core-prim . bytevector-s16-set!) (v5059 core-prim . bytevector-s16-ref) (v5058 core-prim . bytevector-s16-native-set!) (v5057 core-prim . bytevector-s16-native-ref) (v5056 core-prim . bytevector-length) (v5055 core-prim . bytevector-ieee-single-ref) (v5054 core-prim . bytevector-ieee-single-set!) (v5053 core-prim . bytevector-ieee-single-native-set!) (v5052 core-prim . bytevector-ieee-single-native-ref) (v5051 core-prim . bytevector-ieee-double-set!) (v5050 core-prim . bytevector-ieee-double-ref) (v504f core-prim . bytevector-ieee-double-native-set!) (v504e core-prim . bytevector-ieee-double-native-ref) (v504d core-prim . bytevector-fill!) (v504c core-prim . bytevector-copy!) (v504b core-prim . bytevector-copy) (v504a core-prim . bytevector->uint-list) (v5049 core-prim . bytevector->u8-list) (v5048 core-prim . bytevector->sint-list) (v4ca6 core-prim . no-nans-violation?) (v4c91 core-prim . no-infinities-violation?) (v4ca4 core-prim . make-no-nans-violation) (v4c8f core-prim . make-no-infinities-violation) (v5047 core-prim . real->flonum) (v5046 core-prim . flzero?) (v5045 core-prim . fltruncate) (v5044 core-prim . fltan) (v5043 core-prim . flsqrt) (v5042 core-prim . flsin) (v5041 core-prim . flround) (v5040 core-prim . flpositive?) (v503f core-prim . flonum?) (v503e core-prim . flodd?) (v503d core-prim . flnumerator) (v503c core-prim . flnegative?) (v503b core-prim . flnan?) (v503a core-prim . flmod0) (v5039 core-prim . flmod) (v5038 core-prim . flmin) (v5037 core-prim . flmax) (v5036 core-prim . fllog) (v5035 core-prim . flinteger?) (v5034 core-prim . flinfinite?) (v5033 core-prim . flfloor) (v5032 core-prim . flfinite?) (v5031 core-prim . flexpt) (v5030 core-prim . flexp) (v502f core-prim . fleven?) (v502e core-prim . fldiv0-and-mod0) (v502d core-prim . fldiv0) (v502c core-prim . fldiv-and-mod) (v502b core-prim . fldiv) (v502a core-prim . fldenominator) (v5029 core-prim . flcos) (v5028 core-prim . flceiling) (v5027 core-prim . flatan) (v5026 core-prim . flasin) (v5025 core-prim . flacos) (v5024 core-prim . flabs) (v5023 core-prim . fl>?) (v5022 core-prim . fl>=?) (v5021 core-prim . fl=?) (v5020 core-prim . fl<?) (v501f core-prim . fl<=?) (v501e core-prim . fl/) (v501d core-prim . fl-) (v501c core-prim . fl+) (v501b core-prim . fl*) (v501a core-prim . fixnum->flonum) (v5019 core-prim . fxzero?) (v5018 core-prim . fxxor) (v5017 core-prim . fxrotate-bit-field) (v5016 core-prim . fxreverse-bit-field) (v5015 core-prim . fxpositive?) (v5014 core-prim . fxodd?) (v5013 core-prim . fxnot) (v5012 core-prim . fxnegative?) (v5011 core-prim . fxmod0) (v5010 core-prim . fxmod) (v500f core-prim . fxmin) (v500e core-prim . fxmax) (v500d core-prim . fxlength) (v500c core-prim . fxior) (v500b core-prim . fxif) (v500a core-prim . fxfirst-bit-set) (v5009 core-prim . fxeven?) (v5008 core-prim . fxdiv0-and-mod0) (v5007 core-prim . fxdiv0) (v5006 core-prim . fxdiv-and-mod) (v5005 core-prim . fxdiv) (v5004 core-prim . fxcopy-bit-field) (v5003 core-prim . fxcopy-bit) (v5002 core-prim . fxbit-set?) (v5001 core-prim . fxbit-field) (v5000 core-prim . fxbit-count) (v4fff core-prim . fxarithmetic-shift-right) (v4ffe core-prim . fxarithmetic-shift-left) (v4ffd core-prim . fxarithmetic-shift) (v4ffc core-prim . fxand) (v4ffb core-prim . fx>?) (v4ffa core-prim . fx>=?) (v4ff9 core-prim . fx=?) (v4ff8 core-prim . fx<?) (v4ff7 core-prim . fx<=?) (v4ff6 core-prim . fx-/carry) (v4ff5 core-prim . fx-) (v4ff4 core-prim . fx+/carry) (v4ff3 core-prim . fx+) (v4ff2 core-prim . fx*/carry) (v4ff1 core-prim . fx*) (v4ff0 core-prim . greatest-fixnum) (v4fef core-prim . least-fixnum) (v4fee core-prim . fixnum-width) (v4fed core-prim . fixnum?) (v4fec core-prim . bitwise-rotate-bit-field) (v4feb core-prim . bitwise-reverse-bit-field) (v4fea core-prim . bitwise-length) (v4fe9 core-prim . bitwise-if) (v4fe8 core-prim . bitwise-first-bit-set) (v4fe7 core-prim . bitwise-copy-bit-field) (v4fe6 core-prim . bitwise-copy-bit) (v4fe5 core-prim . bitwise-bit-set?) (v4fe4 core-prim . bitwise-bit-field) (v4fe3 core-prim . bitwise-bit-count) (v4fe2 core-prim . bitwise-xor) (v4fe1 core-prim . bitwise-ior) (v4fe0 core-prim . bitwise-and) (v4fdf core-prim . bitwise-not) (v4fde core-prim . bitwise-arithmetic-shift-right) (v4fdd core-prim . bitwise-arithmetic-shift-left) (v4fdc core-prim . bitwise-arithmetic-shift) (v4fdb core-prim . zero?) (v4fda core-prim . vector?) (v4fd9 core-prim . vector-set!) (v4fd8 core-prim . vector-ref) (v4fd7 core-prim . vector-map) (v4fd6 core-prim . vector-length) (v4fd5 core-prim . vector-for-each) (v4fd4 core-prim . vector-fill!) (v4fd3 core-prim . vector->list) (v4fd2 core-prim . vector) (v4fd1 core-prim . values) (v4fd0 core-prim . truncate) (v4fcf core-prim . tan) (v4fce core-prim . symbol?) (v4fcd core-prim . symbol=?) (v4fcc core-prim . symbol->string) (v4fcb core-prim . substring) (v4fca core-prim . string?) (v4fc9 core-prim . string>?) (v4fc8 core-prim . string>=?) (v4fc7 core-prim . string=?) (v4fc6 core-prim . string<?) (v4fc5 core-prim . string<=?) (v4fc4 core-prim . string-ref) (v4fc3 core-prim . string-length) (v4fc2 core-prim . string-for-each) (v4fc1 core-prim . string-copy) (v4fc0 core-prim . string-append) (v4fbf core-prim . string->symbol) (v4fbe core-prim . string->number) (v4fbd core-prim . string->list) (v4fbc core-prim . string) (v4fbb core-prim . sqrt) (v4fba core-prim . sin) (v4fb9 core-prim . round) (v4fb8 core-prim . reverse) (v4fb7 core-prim . real?) (v4fb6 core-prim . real-valued?) (v4fb5 core-prim . real-part) (v4fb4 core-prim . rationalize) (v4fb3 core-prim . rational?) (v4fb2 core-prim . rational-valued?) (v4fb1 core-prim . procedure?) (v4fb0 core-prim . positive?) (v4faf core-prim . pair?) (v4fae core-prim . odd?) (v4fad core-prim . numerator) (v4fac core-prim . number?) (v4fab core-prim . number->string) (v4faa core-prim . null?) (v4fa9 core-prim . not) (v4fa8 core-prim . negative?) (v4fa7 core-prim . nan?) (v4fa6 core-prim . min) (v4fa5 core-prim . max) (v4fa4 core-prim . map) (v4fa3 core-prim . make-vector) (v4fa2 core-prim . make-string) (v4fa1 core-prim . make-rectangular) (v4fa0 core-prim . make-polar) (v4f9f core-prim . magnitude) (v4f9e core-prim . log) (v4f9d core-prim . list?) (v4f9c core-prim . list-tail) (v4f9b core-prim . list-ref) (v4f9a core-prim . list->vector) (v4f99 core-prim . list->string) (v4f98 core-prim . list) (v4f97 core-prim . length) (v4f96 core-prim . lcm) (v4f95 core-prim . integer?) (v4f94 core-prim . integer-valued?) (v4f93 core-prim . integer->char) (v4f92 core-prim . infinite?) (v4f91 core-prim . inexact?) (v4f90 core-prim . inexact) (v4f8f core-prim . imag-part) (v4f8e core-prim . gcd) (v4f8d core-prim . for-each) (v4f8c core-prim . floor) (v4f8b core-prim . finite?) (v4f8a core-prim . expt) (v4f89 core-prim . exp) (v4f88 core-prim . exact?) (v4f87 core-prim . exact-integer-sqrt) (v4f86 core-prim . exact) (v4f85 core-prim . even?) (v4f84 core-prim . error) (v4f83 core-prim . eqv?) (v4f82 core-prim . equal?) (v4f81 core-prim . eq?) (v4f80 core-prim . dynamic-wind) (v4f7f core-prim . div0-and-mod0) (v4f7e core-prim . mod0) (v4f7d core-prim . div0) (v4f7c core-prim . div-and-mod) (v4f7b core-prim . mod) (v4f7a core-prim . div) (v4f79 core-prim . denominator) (v4f78 core-prim . cos) (v4f77 core-prim . cons) (v4f76 core-prim . complex?) (v4f75 core-prim . char?) (v4f74 core-prim . char>?) (v4f73 core-prim . char>=?) (v4f72 core-prim . char=?) (v4f71 core-prim . char<?) (v4f70 core-prim . char<=?) (v4f6f core-prim . char->integer) (v4f6e core-prim . ceiling) (v4f6d core-prim . call-with-values) (v4f6c core-prim . call/cc) (v4f6b core-prim . call-with-current-continuation) (v4f6a core-prim . cddddr) (v4f69 core-prim . cdddar) (v4f68 core-prim . cddadr) (v4f67 core-prim . cddaar) (v4f66 core-prim . cdaddr) (v4f65 core-prim . cdadar) (v4f64 core-prim . cdaadr) (v4f63 core-prim . cdaaar) (v4f62 core-prim . cadddr) (v4f61 core-prim . caddar) (v4f60 core-prim . cadadr) (v4f5f core-prim . cadaar) (v4f5e core-prim . caaddr) (v4f5d core-prim . caadar) (v4f5c core-prim . caaadr) (v4f5b core-prim . caaaar) (v4f5a core-prim . cdddr) (v4f59 core-prim . cddar) (v4f58 core-prim . cdadr) (v4f57 core-prim . cdaar) (v4f56 core-prim . caddr) (v4f55 core-prim . cadar) (v4f54 core-prim . caadr) (v4f53 core-prim . caaar) (v4f52 core-prim . cddr) (v4f51 core-prim . cdar) (v4f50 core-prim . cadr) (v4f4f core-prim . caar) (v4f4e core-prim . cdr) (v4f4d core-prim . car) (v4f4c core-prim . boolean?) (v4f4b core-prim . boolean=?) (v4f4a core-prim . atan) (v4f49 core-prim . assertion-violation) (v2fdd core-prim . assertion-error) (v4f48 core-prim . asin) (v4f47 core-prim . apply) (v4f46 core-prim . append) (v4f45 core-prim . angle) (v4f44 core-prim . acos) (v4f43 core-prim . abs) (v4f42 core-prim . /) (v4f41 core-prim . *) (v4f40 core-prim . -) (v4f3f core-prim . +) (v4f3e core-prim . >=) (v4f3d core-prim . >) (v4f3c core-prim . =) (v4f3b core-prim . <=) (v4f3a core-prim . <) (v4f39 core-prim . library) (v4f38 $core-rtd &no-nans-rtd &no-nans-rcd) (v4f37 $core-rtd &no-infinities-rtd &no-infinities-rcd) (v4f36 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (v4f35 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (v4f34 $core-rtd &i/o-port-rtd &i/o-port-rcd) (v4f33 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (v4f32 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (v4f31 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (v4f30 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (v4f2f $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (v4f2e $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (v4f2d $core-rtd &i/o-write-rtd &i/o-write-rcd) (v4f2c $core-rtd &i/o-read-rtd &i/o-read-rcd) (v4f2b $core-rtd &i/o-rtd &i/o-rcd) (v4f2a $core-rtd &undefined-rtd &undefined-rcd) (v4f29 $core-rtd &syntax-rtd &syntax-rcd) (v4f28 $core-rtd &lexical-rtd &lexical-rcd) (v4f27 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (v4f26 $core-rtd &non-continuable-rtd &non-continuable-rcd) (v4f25 $core-rtd &who-rtd &who-rcd) (v4f24 $core-rtd &irritants-rtd &irritants-rcd) (v4f23 $core-rtd &assertion-rtd &assertion-rcd) (v4f22 $core-rtd &violation-rtd &violation-rcd) (v4f21 $core-rtd &error-rtd &error-rcd) (v4f20 $core-rtd &serious-rtd &serious-rcd) (v4f1f $core-rtd &warning-rtd &warning-rcd) (v4f1e $core-rtd &message-rtd &message-rcd) (v4f1d $core-rtd &condition-rtd &condition-rcd) (v4f1c macro . define-condition-type) (v4f1b macro . define-enumeration) (v4f1a macro . define-record-type) (v4f19 macro . parent-rtd) (v4f18 macro . nongenerative) (v4f17 macro . opaque) (v4f16 macro . sealed) (v4f15 macro . protocol) (v4f14 macro . parent) (v4f13 macro . immutable) (v4f12 macro . mutable) (v4f11 macro . fields) (v4f10 macro . error-handling-mode) (v4f0f macro . file-options) (v4f0e macro . buffer-mode) (v4f0d macro . eol-style) (v4f0c macro . guard) (v4f0b macro . trace-define) (v4f0a macro . trace-lambda) (v4f09 macro . unsyntax-splicing) (v4f08 macro . unsyntax) (v4f07 macro . unquote-splicing) (v4f06 macro . unquote) (v4f05 macro . _) (v4f04 macro . else) (v4f03 macro . =>) (v4f02 macro . ...) (v4f01 macro . assert) (v4f00 macro . endianness) (v4eff macro . delay) (v4efe macro . time) (v4efd macro . do) (v4efc macro . cond) (v4efb macro . let*) (v4efa macro . let) (v4ef9 macro . let*-values) (v4ef8 macro . let-values) (v4ef7 macro . identifier-syntax) (v4ef6 macro . with-syntax) (v4ef5 macro . quasisyntax) (v4ef4 macro . quasiquote) (v4ef3 macro . syntax-rules) (v4ef2 macro . include) (v4ef1 macro . define-struct) (v4ef0 core-macro . record-constructor-descriptor) (v4eef core-macro . record-type-descriptor) (v4eee macro . case) (v4eed macro . parameterize) (v4eec macro . unless) (v4eeb macro . when) (v4eea core-macro . or) (v4ee9 core-macro . and) (v4ee8 core-macro . if) (v4ee7 core-macro . letrec*) (v4ee6 core-macro . letrec) (v4ee5 core-macro . type-descriptor) (v4ee4 core-macro . case-lambda) (v4ee3 core-macro . lambda) (v4ee2 core-macro . syntax) (v4ee1 core-macro . syntax-case) (v4ee0 core-macro . quote) (v4edf core-macro . foreign-call) (v4ede letrec-syntax) (v4edd let-syntax) (v4edc set!) (v4edb import) (v4eda begin) (v4ed9 module) (v4ed8 define-syntax) (v4ed7 define)) values values '#f '#f '#f '#f) (v2b12@v29b1@install-library 'v520b '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . v51ea) (eval-core . v51e9) (set-symbol-value! . v51e8) (symbol-value . v51e7) (gensym . v51e6) (void . v51e5)) '() values values '#f '#f '#f '#f) (v2b12@v29b1@install-library 'v520c '(mosh) '() '() '() '() '((set-symbol-value! . v51e8) (symbol-value . v51e7) (regexp? . v51e3) (read-line . v51e2) (ungensym . v51e1) (alist->eq-hash-table . v51e0) (assoc-ref . v51df) (print . v51de) (format . v51dd) (host-os . v51dc) (library-path . v2990) (standard-library-path . v51db) (file-newer? . v51da) (stat-mtime . v51d9) (digit->integer . v51d5) (call-with-string-input-port . v51d4) (call-with-string-io . v51d3) (string-split . v51d2) (bytevector-for-each . v51d1) (string->regexp . v51d0) (rxmatch . v51cf) (regexp-replace-all . v51ce) (hashtable-for-each . v51cd) (set-current-directory! . v51c8) (expand-path . v51c7) (current-directory . v51c6) (p . v5193) (get-timeofday . v5180) (get-command-line . v517f) (sys-display . v517e) (whereis . v517d) (register . v517c) (vm-join! . v517b) (vm-set-value! . v517a) (vm? . v5179) (main-vm? . v5178) (vm-eval . v5177) (vm-self . v5176) (vm-start! . v5175) (make-vm . v5174) (mutex-try-lock! . v5173) (mutex-unlock! . v5172) (mutex-lock! . v5171) (mutex? . v5170) (make-mutex . v516f) (condition-variable-notify-all! . v516e) (condition-variable-notify! . v516d) (condition-variable-wait! . v516c) (make-condition-variable . v516b) (mosh-executable-path . v516a) (make-file-options . v5169) (source-info . v5168) (make-compiler-instruction . v5167) (make-instruction . v5166) (set-source-info! . v5165) (bignum? . v5164) (fast-equal? . v5163) (fasl-read . v5162) (fasl-write . v5161) (time-usage . v5160) (os-constant . v515f) (time . v4efe) (include . v4ef2)) '() values values '#f '#f '#f '#f) (v2b12@v29b1@install-library 'v520d '(system) '() '() '() '() '((write-to-file . v51d8) (file->list . v51d7) (file->string . v51d6) (call-process . v51cc) (local-tz-offset . v51cb) (microseconds . v51ca) (directory-list . v51c9) (expand-path . v51c7) (%spawn . v51c5) (%waitpid . v51c4) (pointer-ref-c-int64 . v51c3) (pointer-ref-c-int32 . v51c2) (pointer-ref-c-int16 . v51c1) (pointer-ref-c-int8 . v51c0) (pointer-ref-c-uint64 . v51bf) (pointer-ref-c-uint32 . v51be) (pointer-ref-c-uint16 . v51bd) (pointer-ref-c-uint8 . v51bc) (pointer-set-c-int64! . v51bb) (pointer-set-c-int32! . v51ba) (pointer-set-c-int16! . v51b9) (pointer-set-c-int8! . v51b8) (pointer-set-c-pointer! . v51b7) (pointer-set-c-double! . v51b6) (pointer-set-c-float! . v51b5) (pointer-set-c-long-long! . v51b4) (pointer-set-c-long! . v51b3) (pointer-set-c-int! . v51b2) (pointer-set-c-short! . v51b1) (pointer-set-c-char! . v51b0) (pointer-ref-c-pointer . v51af) (pointer-ref-c-double . v51ae) (pointer-ref-c-float . v51ad) (pointer-ref-c-unsigned-long-long . v51ac) (pointer-ref-c-signed-long-long . v51ab) (pointer-ref-c-unsigned-long . v51aa) (pointer-ref-c-signed-long . v51a9) (pointer-ref-c-unsigned-int . v51a8) (pointer-ref-c-signed-int . v51a7) (pointer-ref-c-unsigned-short . v51a6) (pointer-ref-c-signed-short . v51a5) (pointer-ref-c-unsigned-char . v51a4) (pointer-ref-c-signed-char . v51a3) (pointer->integer . v51a2) (integer->pointer . v51a1) (pointer? . v51a0) (%ffi-supported? . v519f) (%ffi-pointer-ref . v519e) (%ffi-pointer->string . v519d) (%ffi-call->string-or-zero . v519c) (%ffi-call->double . v519b) (%ffi-call->void* . v519a) (%ffi-call->void . v5199) (%ffi-call->int . v5198) (%ffi-lookup . v5197) (%ffi-open . v5196) (%fork . v5195) (%pipe . v5194) (open-output-string . v5192) (get-output-string . v5191) (file-stat-ctime . v5190) (file-stat-atime . v518f) (file-stat-mtime . v518e) (file-size-in-bytes . v518d) (file-writable? . v518c) (file-executable? . v518b) (file-readable? . v518a) (file-regular? . v5189) (file-symbolic-link? . v5188) (file-directory? . v5187) (create-symbolic-link . v5186) (rename-file . v5185) (delete-directory . v5184) (create-directory . v5183) (get-environment-variables . v5182) (get-environment-variable . v5181) (make-parameter . v27c3) (socket-port . v515e) (socket-shutdown . v515d) (socket-close . v515c) (socket-send . v515b) (socket-recv! . v515a) (socket-recv . v5159) (make-server-socket . v5158) (make-client-socket . v5157) (socket-accept . v5156) (socket? . v5155) (parameterize . v4eed)) '() values values '#f '#f '#f '#f))
((lambda (v4da0@add-library-path! v4da2@parse-and-add-library-path v4da4@for-each-with-index v4da6@rpad v4da8@condition-printer v4daa@record->field-alist v4dac@map-with-index v4dae@repl v4db0@trace-printer v4db2@command-line v4db4@local-library-path v4db6@load/args v4db8@load v4dba@ironscheme-build v4dbc@eval-top-level v4dbe@compile-system-libraries v4dc0@compile v4dc2@compile->closure v4dc4@pre-compile-r6rs-file v4dc6@load-r6rs-top-level v4dc8@load-r6rs-top-level-sexp) (begin (set! v4da0@add-library-path! (lambda (v4deb@path) (v2b02@v2991@library-path (append (v2b02@v2991@library-path) (list v4deb@path))))) (set! v4da2@parse-and-add-library-path (lambda (v4ded@paths v4dee@message) ((lambda (v4df1@t) (if v4df1@t ((lambda (v4df3@paths) (for-each (lambda (v4df5@path) (if (file-exists? v4df5@path) (v4da0@add-library-path! (expand-path v4df5@path)) (format (current-error-port) v4dee@message v4df5@path))) (string-split v4df3@paths '#\:))) v4df1@t) (void))) v4ded@paths))) (set! v4da4@for-each-with-index (lambda (v4df7@proc v4df8@lst) (letrec ((v4dfb@loop (lambda (v4dfd@i v4dfe@lst) (if (null? v4dfe@lst) (if '#f '#f (void)) (begin (v4df7@proc v4dfd@i (car v4dfe@lst)) (v4dfb@loop (+ v4dfd@i '1) (cdr v4dfe@lst))))))) (v4dfb@loop '1 v4df8@lst)))) (set! v4da6@rpad (lambda (v4e01@str v4e02@pad v4e03@n) ((lambda (v4e07@rest) ((letrec ((v4e09@loop (lambda (v4e0b@rest v4e0c@ret) (if (<= v4e0b@rest '0) v4e0c@ret (v4e09@loop (- v4e0b@rest '1) (string-append v4e0c@ret v4e02@pad)))))) v4e09@loop) v4e07@rest (format '"~a" v4e01@str))) (- v4e03@n (string-length (format '"~a" v4e01@str)))))) (set! v4da8@condition-printer (lambda (v4e0f@e v4e10@port) ((lambda (v4e14@max-condition-len) (begin (set! v4e14@max-condition-len (apply max (map (lambda (v4e25@c) (string-length (symbol->string (record-type-name (record-rtd v4e25@c))))) (simple-conditions v4e0f@e)))) (begin (display '" Condition components:\n" v4e10@port) (v4da4@for-each-with-index (lambda (v4e15@i v4e16@x) ((lambda (v4e19@rtd v4e1a@fields-alist) (begin (format v4e10@port '" ~d. ~a" v4e15@i (v4da6@rpad (symbol->string (record-type-name v4e19@rtd)) '" " v4e14@max-condition-len)) (if (null? v4e1a@fields-alist) (newline v4e10@port) (void)) ((letrec ((v4e1d@loop (lambda (v4e1f@first v4e20@fields-alist) (if (null? v4e20@fields-alist) '() ((lambda (v4e23@field) (begin (if (not v4e1f@first) (display (v4da6@rpad '"" '" " (+ '4 v4e14@max-condition-len)) v4e10@port) (void)) (display '"       " v4e10@port) (display (car v4e23@field) v4e10@port) (display '": " v4e10@port) (write (cdr v4e23@field) v4e10@port) (newline v4e10@port) (v4e1d@loop '#f (cdr v4e20@fields-alist)))) (car v4e20@fields-alist)))))) v4e1d@loop) '#t v4e1a@fields-alist))) (record-rtd v4e16@x) (v4daa@record->field-alist v4e16@x))) (simple-conditions v4e0f@e))))) '#f))) (set! v4daa@record->field-alist (lambda (v4e27@r) ((lambda (v4e2a@ref) (begin (set! v4e2a@ref (lambda (v4e35@rtd v4e36@i v4e37@x) ((lambda (v4e3b@val) (if (symbol? v4e3b@val) (ungensym v4e3b@val) v4e3b@val)) ((record-accessor v4e35@rtd v4e36@i) v4e37@x)))) ((letrec ((v4e2b@loop (lambda (v4e2d@ret v4e2e@rtd) (if v4e2e@rtd (v4e2b@loop (append v4e2d@ret (v4dac@map-with-index (lambda (v4e31@i v4e32@field) (cons v4e32@field (v4e2a@ref v4e2e@rtd v4e31@i v4e27@r))) (vector->list (record-type-field-names v4e2e@rtd)))) (record-type-parent v4e2e@rtd)) v4e2d@ret)))) v4e2b@loop) '() (record-rtd v4e27@r)))) '#f))) (set! v4dac@map-with-index (lambda (v4e3d@proc v4e3e@lst) ((letrec ((v4e41@loop (lambda (v4e43@i v4e44@lst v4e45@ret) (if (null? v4e44@lst) (reverse v4e45@ret) (v4e41@loop (+ v4e43@i '1) (cdr v4e44@lst) (cons (v4e3d@proc v4e43@i (car v4e44@lst)) v4e45@ret)))))) v4e41@loop) '0 v4e3e@lst '()))) (set! v4dae@repl (lambda v4e49@x ((lambda (v4e4c@rec) (begin (set! v4e4c@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (v4e4f@v4e4d) (lambda () (with-exception-handler (lambda (v4e51@e) ((call/cc (lambda (v4e53@v4e4e) (v4e4f@v4e4d (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? v4e51@e) (v4da8@condition-printer v4e51@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" v4e51@e))) (v4e53@v4e4e (lambda () (raise-continuable v4e51@e)))))))))) (lambda () ((letrec ((v4e55@loop (lambda (v4e57@line v4e58@accum) ((lambda (v4e5c@parentheses-ok? v4e5e@eval-string-print) (begin (set! v4e5c@parentheses-ok? (lambda (v4e63@text) ((letrec ((v4e65@loop (lambda (v4e67@chars v4e68@p0 v4e69@p1) (if (null? v4e67@chars) (= '0 v4e68@p0 v4e69@p1) ((lambda (v4e6d@t) (if (memv v4e6d@t '(#\()) (v4e65@loop (cdr v4e67@chars) (+ v4e68@p0 '1) v4e69@p1) (if (memv v4e6d@t '(#\))) (v4e65@loop (cdr v4e67@chars) (- v4e68@p0 '1) v4e69@p1) (if (memv v4e6d@t '(#\[)) (v4e65@loop (cdr v4e67@chars) v4e68@p0 (+ v4e69@p1 '1)) (if (memv v4e6d@t '(#\])) (v4e65@loop (cdr v4e67@chars) v4e68@p0 (- v4e69@p1 '1)) (v4e65@loop (cdr v4e67@chars) v4e68@p0 v4e69@p1)))))) (car v4e67@chars)))))) v4e65@loop) (string->list v4e63@text) '0 '0))) (set! v4e5e@eval-string-print (lambda (v4e61@text) (if (not (or (string=? '"\n" v4e61@text) (= '0 (string-length v4e61@text)))) (write (v4dbc@eval-top-level (call-with-port (open-string-input-port v4e61@text) read))) (void)))) (if (eof-object? v4e57@line) (begin (v4e5e@eval-string-print v4e58@accum) (exit)) ((lambda (v4e5f@current) (if (v4e5c@parentheses-ok? v4e5f@current) (v4e5e@eval-string-print v4e5f@current) (v4e55@loop (get-line (current-input-port)) v4e5f@current))) (string-append v4e58@accum v4e57@line))))) '#f '#f)))) v4e55@loop) (get-line (current-input-port)) '""))))))) (newline) (v4e4c@rec)))) (v4e4c@rec))) '#f))) (set! v4db0@trace-printer (v289a@v27c4@make-parameter write)) (set! v4db2@command-line (v289a@v27c4@make-parameter (get-command-line))) (set! v4db4@local-library-path (lambda (v4e6f@filename) (v2b02@v2991@library-path))) (set! v4db6@load/args (lambda (v4e71@filename . v4e73@args) (begin (apply v4dc6@load-r6rs-top-level v4e71@filename 'load v4e73@args) (void)))) (set! v4db8@load (lambda (v4e75@filename) (begin (apply v4dc6@load-r6rs-top-level v4e75@filename 'load (v4db2@command-line)) (void)))) (set! v4dba@ironscheme-build (lambda () (v4db8@load '"ironscheme-buildscript.ss"))) (set! v4dbc@eval-top-level (lambda (v4e77@x) (v49cc@v2fc4@eval v4e77@x (v49e2@v2ff0@interaction-environment)))) (set! v4dbe@compile-system-libraries (lambda () (v4dbc@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! v4dc0@compile (lambda (v4e79@filename) (v4dc6@load-r6rs-top-level v4e79@filename 'compile))) (set! v4dc2@compile->closure (lambda (v4e7b@filename) (v4dc6@load-r6rs-top-level v4e7b@filename 'closure))) (set! v4dc4@pre-compile-r6rs-file (lambda (v4e7d@filename) (v4dc6@load-r6rs-top-level v4e7d@filename 'compile))) (set! v4dc6@load-r6rs-top-level (lambda (v4e7f@filename v4e80@how . v4e83@args) ((lambda (v4e89@v4e86 v4e8a@v4e88) ((lambda (v4e8d@swap) (dynamic-wind v4e8d@swap (lambda () ((lambda (v4e8f@x*) ((lambda (v4e91@t) (if (memv v4e91@t '(closure)) (v49e1@v2fee@pre-compile-r6rs-top-level v4e8f@x*) (if (memv v4e91@t '(load)) ((lambda (v4e97@v4e94 v4e98@v4e96) ((lambda (v4e9b@swap) (dynamic-wind v4e9b@swap (lambda () ((v49e0@v2fec@compile-r6rs-top-level v4e8f@x*))) v4e9b@swap)) (lambda () ((lambda (v4e9d@t) (begin (v4e97@v4e94 v4e98@v4e96) (set! v4e98@v4e96 v4e9d@t))) (v4e97@v4e94))))) v4db2@command-line (cons v4e7f@filename (car v4e83@args))) (if (memv v4e91@t '(compile)) (begin (v49e0@v2fec@compile-r6rs-top-level v4e8f@x*) (v2b06@v2999@serialize-all v2895@v27ba@serialize-library v28ef@v28a8@compile-core-expr)) (if '#f '#f (void)))))) v4e80@how)) (with-input-from-file v4e7f@filename (lambda () ((letrec ((v4e9f@f (lambda () ((lambda (v4ea1@x) (if (eof-object? v4ea1@x) '() (cons v4ea1@x (v4e9f@f)))) (v288d@v27aa@read-annotated))))) v4e9f@f)))))) v4e8d@swap)) (lambda () ((lambda (v4ea3@t) (begin (v4e89@v4e86 v4e8a@v4e88) (set! v4e8a@v4e88 v4ea3@t))) (v4e89@v4e86))))) v2b02@v2991@library-path (v4db4@local-library-path v4e7f@filename)))) (set! v4dc8@load-r6rs-top-level-sexp (lambda (v4ea5@import-spec v4ea6@thunk) ((lambda (v4ead@v4eaa v4eae@v4eac) ((lambda (v4eb1@swap) (dynamic-wind v4eb1@swap (lambda () ((lambda (v4eb7@v4eb4 v4eb8@v4eb6) ((lambda (v4ebb@swap) (dynamic-wind v4ebb@swap (lambda () ((v49e0@v2fec@compile-r6rs-top-level (list (cons 'import v4ea5@import-spec) (list v4ea6@thunk))))) v4ebb@swap)) (lambda () ((lambda (v4ebd@t) (begin (v4eb7@v4eb4 v4eb8@v4eb6) (set! v4eb8@v4eb6 v4ebd@t))) (v4eb7@v4eb4))))) v4db2@command-line '())) v4eb1@swap)) (lambda () ((lambda (v4ebf@t) (begin (v4ead@v4eaa v4eae@v4eac) (set! v4eae@v4eac v4ebf@t))) (v4ead@v4eaa))))) v2b02@v2991@library-path (v4db4@local-library-path '"")))) (begin (set! v4ed5@v4dc8@load-r6rs-top-level-sexp v4dc8@load-r6rs-top-level-sexp) (set! v4ed4@v4dc6@load-r6rs-top-level v4dc6@load-r6rs-top-level) (set! v4ed3@v4dc4@pre-compile-r6rs-file v4dc4@pre-compile-r6rs-file) (set! v4ed2@v4dc2@compile->closure v4dc2@compile->closure) (set! v4ed1@v4dc0@compile v4dc0@compile) (set! v4ed0@v4dbe@compile-system-libraries v4dbe@compile-system-libraries) (set! v4ecf@v4dbc@eval-top-level v4dbc@eval-top-level) (set! v4ece@v4dba@ironscheme-build v4dba@ironscheme-build) (set! v4ecd@v4db8@load v4db8@load) (set! v4ecc@v4db6@load/args v4db6@load/args) (set! v4ecb@v4db4@local-library-path v4db4@local-library-path) (set! v4eca@v4db2@command-line v4db2@command-line) (set! v4ec9@v4db0@trace-printer v4db0@trace-printer) (set! v4ec8@v4dae@repl v4dae@repl) (set! v4ec7@v4dac@map-with-index v4dac@map-with-index) (set! v4ec6@v4daa@record->field-alist v4daa@record->field-alist) (set! v4ec5@v4da8@condition-printer v4da8@condition-printer) (set! v4ec4@v4da6@rpad v4da6@rpad) (set! v4ec3@v4da4@for-each-with-index v4da4@for-each-with-index) (set! v4ec2@v4da2@parse-and-add-library-path v4da2@parse-and-add-library-path) (set! v4ec1@v4da0@add-library-path! v4da0@add-library-path!) (v2b07@v299b@current-precompiled-library-loader v2896@v27bc@load-serialized-library) (set-symbol-value! 'load v4db8@load) (set-symbol-value! 'pre-compile-r6rs-file v4dc4@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs v4dbc@eval-top-level) (set-symbol-value! 'int-env-syms v49c3@v2fb2@interaction-environment-symbols) (set-symbol-value! 'expanded2core v28ee@v28a6@expanded->core) (set-symbol-value! 'trace-printer v4db0@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (v4dc9@c) (condition (v4cfd@v4b07@make-non-continuable-violation) (v4cf3@v4aee@make-who-condition 'raise) (v4cb7@v4a4f@make-message-condition '"returned from non-continuable exception") (v4ce9@v4ad3@make-irritants-condition (list v4dc9@c))))) (v4da2@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (v4da2@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (v4da0@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (v4da0@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (v4da0@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) ((lambda (v4dcb@prefix) (v2b03@v2993@library-extensions (v4dcb@prefix '".mosh" (v2b03@v2993@library-extensions)))) (lambda (v4dcd@ext v4dce@ls) (append (map (lambda (v4dd1@x) (string-append v4dcd@ext v4dd1@x)) v4dce@ls) v4dce@ls))) ((lambda (v4dd3@args v4dd4@port) ((lambda (v4dd8@ref) (begin (set! v4dd8@ref (lambda (v4de3@rtd v4de4@i v4de5@x) ((lambda (v4de9@val) (if (symbol? v4de9@val) (ungensym v4de9@val) v4de9@val)) ((record-accessor v4de3@rtd v4de4@i) v4de5@x)))) (with-exception-handler (lambda (v4dd9@c) (if (condition? v4dd9@c) (v4da8@condition-printer v4dd9@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" v4dd9@c))) (lambda () (if ((call/cc (lambda (v4ddd@v4ddb) (lambda () (with-exception-handler (lambda (v4ddf@c) ((call/cc (lambda (v4de1@v4ddc) (v4ddd@v4ddb (lambda () (if '#t '#f (v4de1@v4ddc (lambda () (raise-continuable v4ddf@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (v4dc8@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? v4dd3@args) (v4dae@repl) (v4dc6@load-r6rs-top-level (car v4dd3@args) 'load (cdr v4dd3@args)))))))) '#f)) (v4db2@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
