;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! oU585@library-file-path->cache-path (unspecified)) (set! oU587@read-annotated (unspecified)) (set! oU589@annotation-stripped (unspecified)) (set! oU58b@annotation? (unspecified)) (set! oU58d@annotation-source (unspecified)) (set! oU58f@annotation-expression (unspecified)) (set! oU591@scm->fasl (unspecified)) (set! oU593@fasl-save (unspecified)) (set! oU595@fasl-load (unspecified)) (set! oU597@serialize-library (unspecified)) (set! oU599@load-serialized-library (unspecified)) (set! oU59b@make-record-printer (unspecified)) (set! oU59d@compile-core (unspecified)) (set! oU59f@read-library-source-file (unspecified)) (set! oU5a1@make-parameter (unspecified)) (set! oU5a3@mosh-cache-dir (unspecified)) (set! oU639@file-options-spec (unspecified)) (set! oU585@library-file-path->cache-path (lambda (oU63a@x) (call-with-values (lambda () (open-string-output-port)) (lambda (oU640@oU63d oU641@oU63f) (let ((oU644@extract oU641@oU63f) (oU645@p oU640@oU63d)) (let ((oU649@display-hex '#f)) (begin (set! oU649@display-hex (lambda (oU652@n) (if (<= '0 oU652@n '9) (display oU652@n oU645@p) (display (integer->char (+ (char->integer '#\a) (- oU652@n '10))) oU645@p)))) (begin (let oU64c@f ((oU64a@ls (string-split oU63a@x '#\/))) (if (not (null? oU64a@ls)) (begin (display '"_" oU645@p) (for-each (lambda (oU64e@c) (if (or (char<=? '#\a oU64e@c '#\z) (char<=? '#\A oU64e@c '#\Z) (char<=? '#\0 oU64e@c '#\9) (memv oU64e@c '(#\- #\. #\_ #\~))) (display oU64e@c oU645@p) (begin (display '"%" oU645@p) (let ((oU650@n (char->integer oU64e@c))) (begin (oU649@display-hex (quotient oU650@n '16)) (oU649@display-hex (remainder oU650@n '16))))))) (string->list (car oU64a@ls))) (oU64c@f (cdr oU64a@ls))) (void))) (oU644@extract))))))))) (set! oU6b4@oU585@library-file-path->cache-path oU585@library-file-path->cache-path) (set! oU587@read-annotated read) (set! oU6b5@oU587@read-annotated oU587@read-annotated) (set! oU589@annotation-stripped (lambda (oU654@x) (oU58f@annotation-expression oU654@x))) (set! oU6b6@oU589@annotation-stripped oU589@annotation-stripped) (set! oU58b@annotation? (lambda (oU656@x) (source-info oU656@x))) (set! oU6b7@oU58b@annotation? oU58b@annotation?) (set! oU58d@annotation-source (lambda (oU658@x) (source-info oU658@x))) (set! oU6b8@oU58d@annotation-source oU58d@annotation-source) (set! oU58f@annotation-expression (lambda (oU65a@x) (if (pair? oU65a@x) (cons (car oU65a@x) (cdr oU65a@x)) (display '"line:46\n")))) (set! oU6b9@oU58f@annotation-expression oU58f@annotation-expression) (set! oU591@scm->fasl (lambda (oU65c@filename) (string-append (oU5a3@mosh-cache-dir) '"/" (oU585@library-file-path->cache-path oU65c@filename) '".mosh-fasl"))) (set! oU6ba@oU591@scm->fasl oU591@scm->fasl) (set! oU593@fasl-save (lambda (oU65e@filename oU65f@obj) (call-with-port (open-file-output-port oU65e@filename) (lambda (oU662@port) ((symbol-value 'fasl-write!) oU65f@obj oU662@port))))) (set! oU6bb@oU593@fasl-save oU593@fasl-save) (set! oU595@fasl-load (lambda (oU664@filename) (call-with-port (open-file-input-port oU664@filename) (symbol-value 'fasl-read!)))) (set! oU6bc@oU595@fasl-load oU595@fasl-load) (set! oU597@serialize-library (lambda (oU666@filename oU667@obj) (begin (let ((oU66a@expanded2core (symbol-value 'expanded2core))) (let ((oU66c@compile (symbol-value 'compile-w/o-halt))) (let ((oU66e@code oU667@obj)) (let ((oU670@pivot (cddddr (cddddr oU66e@code)))) (let ((oU672@visit (oU66c@compile (oU66a@expanded2core (car oU670@pivot))))) (begin (set-car! oU670@pivot oU672@visit) (let ((oU674@pivot (cdr oU670@pivot))) (let ((oU676@invoke (oU66c@compile (oU66a@expanded2core (car oU674@pivot))))) (set-car! oU674@pivot oU676@invoke))))))))) (let ((oU678@fasl-file (oU591@scm->fasl oU666@filename))) (begin (if (file-exists? oU678@fasl-file) (delete-file oU678@fasl-file) (void)) ((call/cc (lambda (oU67c@oU67a) (lambda () (with-exception-handler (lambda (oU67e@c) ((call/cc (lambda (oU680@oU67b) (oU67c@oU67a (lambda () (if '#t (begin (format (current-error-port) '"Warning:serialize-library failed " oU666@filename) (if (file-exists? oU678@fasl-file) (delete-file oU678@fasl-file) (void)) '#f) (oU680@oU67b (lambda () (raise-continuable oU67e@c)))))))))) (lambda () (oU593@fasl-save oU678@fasl-file oU667@obj)))))))))))) (set! oU6bd@oU597@serialize-library oU597@serialize-library) (set! oU599@load-serialized-library (lambda (oU682@filename oU683@obj) (and (oU5a3@mosh-cache-dir) (let ((oU686@fasl-file (oU591@scm->fasl oU682@filename))) (if (and (file-exists? oU686@fasl-file) ((symbol-value 'file-newer?) oU686@fasl-file oU682@filename)) (let ((oU688@expanded2core (symbol-value 'expanded2core))) (let ((oU68a@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((oU68c@code (oU595@fasl-load oU686@fasl-file))) (let ((oU68e@pivot (cddddr (cddddr oU68c@code)))) (let ((oU690@visit (car oU68e@pivot))) (let ((oU692@visit-proc (lambda () (oU68a@eval-compiled-core oU690@visit)))) (begin (set-car! oU68e@pivot oU692@visit-proc) (let ((oU694@pivot (cdr oU68e@pivot))) (let ((oU696@invoke (car oU694@pivot))) (begin (set-car! oU694@pivot (lambda () (oU68a@eval-compiled-core oU696@invoke))) (apply oU683@obj oU68c@code))))))))))) '#f))))) (set! oU6be@oU599@load-serialized-library oU599@load-serialized-library) (set! oU59b@make-record-printer (lambda (oU698@name oU699@printer) (lambda oU69c@x (begin (display '"record printer") (for-each display oU69c@x))))) (set! oU6bf@oU59b@make-record-printer oU59b@make-record-printer) (set! oU59d@compile-core (lambda oU69e@x (apply error 'comile-core '"not implementated" oU69e@x))) (set! oU6c0@oU59d@compile-core oU59d@compile-core) (set! oU59f@read-library-source-file (lambda (oU6a0@file-name) (with-input-from-file oU6a0@file-name oU587@read-annotated))) (set! oU6c1@oU59f@read-library-source-file oU59f@read-library-source-file) (set! oU5a1@make-parameter (lambda oU6b0 (let ((oU6b1 (length oU6b0))) (if (= oU6b1 '1) (apply (lambda (oU6a2@x) (oU5a1@make-parameter oU6a2@x (lambda (oU6a4@x) oU6a4@x))) oU6b0) (if (= oU6b1 '2) (apply (lambda (oU6a6@x oU6a7@fender) (let ((oU6aa@x (oU6a7@fender oU6a6@x))) (lambda oU6ae (let ((oU6af (length oU6ae))) (if (= oU6af '0) (apply (lambda () oU6aa@x) oU6ae) (if (= oU6af '1) (apply (lambda (oU6ac@v) (set! oU6aa@x (oU6a7@fender oU6ac@v))) oU6ae) (error 'apply '"invalid arg count"))))))) oU6b0) (error 'apply '"invalid arg count")))))) (set! oU6c2@oU5a1@make-parameter oU5a1@make-parameter) (set! oU5a3@mosh-cache-dir (oU5a1@make-parameter '#f)) (set! oU6c3@oU5a3@mosh-cache-dir oU5a3@mosh-cache-dir) (set! oU639@file-options-spec (lambda (oU6b2@x) oU6b2@x)) (set! oU6c4@oU639@file-options-spec oU639@file-options-spec) (void))
(begin (set! oU6ca@current-primitive-locations (unspecified)) (set! oU6cc@mutable? (unspecified)) (set! oU6ce@rewriter (unspecified)) (set! oU6d0@expanded->core (unspecified)) (set! oU6d2@compile-core-expr (unspecified)) (set! oU6d4@pretty-print (unspecified)) (set! oU6d6@compile-core-expr-to-port (unspecified)) (set! oU6ca@current-primitive-locations (oU6c2@oU5a1@make-parameter (lambda (oU6d7@x) '#f) (lambda (oU6d9@p) oU6d9@p))) (set! oU715@oU6ca@current-primitive-locations oU6ca@current-primitive-locations) (set! oU6cc@mutable? (lambda (oU6db@x) (or (pair? oU6db@x) (vector? oU6db@x) (hashtable? oU6db@x)))) (set! oU716@oU6cc@mutable? oU6cc@mutable?) (set! oU6ce@rewriter (lambda (oU6dd@quote-hack?) (let ((oU6e0@f '#f)) (begin (set! oU6e0@f (lambda (oU6e1@x) (if (pair? oU6e1@x) (let ((oU6e3@t (car oU6e1@x))) (if (memv oU6e3@t '(quote)) (if (and oU6dd@quote-hack? (oU6cc@mutable? (cadr oU6e1@x))) (let ((oU6e5@g (gensym))) (begin (set-symbol-value! oU6e5@g (cadr oU6e1@x)) oU6e5@g)) oU6e1@x) (if (memv oU6e3@t '(case-lambda)) (cons 'case-lambda (map (lambda (oU6e7@x) (cons (car oU6e7@x) (map oU6e0@f (cdr oU6e7@x)))) (cdr oU6e1@x))) (if (memv oU6e3@t '(lambda)) (cons* 'lambda (cadr oU6e1@x) (map oU6e0@f (cddr oU6e1@x))) (if (memv oU6e3@t '(letrec)) (let ((oU6e9@bindings (cadr oU6e1@x)) (oU6ea@body* (cddr oU6e1@x))) (let ((oU6ed@lhs* (map car oU6e9@bindings)) (oU6ee@rhs* (map cadr oU6e9@bindings))) (cons* 'letrec (map list oU6ed@lhs* (map oU6e0@f oU6ee@rhs*)) (map oU6e0@f oU6ea@body*)))) (if (memv oU6e3@t '(letrec*)) (let ((oU6f1@bindings (cadr oU6e1@x)) (oU6f2@body* (cddr oU6e1@x))) (let ((oU6f5@lhs* (map car oU6f1@bindings)) (oU6f6@rhs* (map cadr oU6f1@bindings))) (cons* 'letrec* (map list oU6f5@lhs* (map oU6e0@f oU6f6@rhs*)) (map oU6e0@f oU6f2@body*)))) (if (memv oU6e3@t '(library-letrec*)) (let ((oU6f9@name (cadr oU6e1@x)) (oU6fa@x (cdr oU6e1@x))) (let ((oU6fd@bindings (cadr oU6fa@x)) (oU6fe@body* (cddr oU6fa@x))) (let ((oU701@lhs* (map car oU6fd@bindings)) (oU702@lhs** (map cadr oU6fd@bindings)) (oU703@rhs* (map caddr oU6fd@bindings))) (cons* 'library-letrec* oU6f9@name (map list oU701@lhs* oU702@lhs** (map oU6e0@f oU703@rhs*)) (map oU6e0@f oU6fe@body*))))) (if (memv oU6e3@t '(begin)) (cons 'begin (map oU6e0@f (cdr oU6e1@x))) (if (memv oU6e3@t '(set!)) (list 'set! (cadr oU6e1@x) (oU6e0@f (caddr oU6e1@x))) (if (memv oU6e3@t '(primitive)) (let ((oU707@op (cadr oU6e1@x))) (let ((oU709@t ((oU6ca@current-primitive-locations) oU707@op))) (if oU709@t ((lambda (oU70b@loc) oU70b@loc) oU709@t) oU707@op))) (if (memv oU6e3@t '(define)) oU6e1@x (if (list? oU6e1@x) (map oU6e0@f oU6e1@x) (error 'rewrite '"invalid form ~s ~s" oU6e1@x (list? oU6e1@x)))))))))))))) oU6e1@x))) oU6e0@f)))) (set! oU717@oU6ce@rewriter oU6ce@rewriter) (set! oU6d0@expanded->core (lambda (oU70d@x) ((oU6ce@rewriter '#f) oU70d@x))) (set! oU718@oU6d0@expanded->core oU6d0@expanded->core) (set! oU6d2@compile-core-expr (lambda (oU70f@x) ((oU6ce@rewriter '#f) oU70f@x))) (set! oU719@oU6d2@compile-core-expr oU6d2@compile-core-expr) (set! oU6d4@pretty-print write) (set! oU71a@oU6d4@pretty-print oU6d4@pretty-print) (set! oU6d6@compile-core-expr-to-port (lambda (oU711@x oU712@p) (oU6d4@pretty-print ((oU6ce@rewriter '#f) oU711@x) oU712@p))) (set! oU71b@oU6d6@compile-core-expr-to-port oU6d6@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! oU76a@make-collection (unspecified)) (set! oU76c@current-library-collection (unspecified)) (set! oU76e@rp (unspecified)) (set! oU778@library? (unspecified)) (set! oU77a@library-id (unspecified)) (set! oU77c@set-library-id! (unspecified)) (set! oU77e@library-name (unspecified)) (set! oU780@set-library-name! (unspecified)) (set! oU782@library-version (unspecified)) (set! oU784@set-library-version! (unspecified)) (set! oU786@library-imp* (unspecified)) (set! oU788@set-library-imp*! (unspecified)) (set! oU78a@library-vis* (unspecified)) (set! oU78c@set-library-vis*! (unspecified)) (set! oU78e@library-inv* (unspecified)) (set! oU790@set-library-inv*! (unspecified)) (set! oU792@library-subst (unspecified)) (set! oU794@set-library-subst! (unspecified)) (set! oU796@library-env (unspecified)) (set! oU798@set-library-env! (unspecified)) (set! oU79a@library-visit-state (unspecified)) (set! oU79c@set-library-visit-state! (unspecified)) (set! oU79e@library-invoke-state (unspecified)) (set! oU7a0@set-library-invoke-state! (unspecified)) (set! oU7a2@library-visit-code (unspecified)) (set! oU7a4@set-library-visit-code! (unspecified)) (set! oU7a6@library-invoke-code (unspecified)) (set! oU7a8@set-library-invoke-code! (unspecified)) (set! oU7aa@library-visible? (unspecified)) (set! oU7ac@set-library-visible?! (unspecified)) (set! oU7ae@library-source-file-name (unspecified)) (set! oU7b0@set-library-source-file-name! (unspecified)) (set! oU7b2@dummy (unspecified)) (set! oU7b4@find-dependencies (unspecified)) (set! oU7b6@find-library-by (unspecified)) (set! oU7b8@library-path (unspecified)) (set! oU7ba@library-extensions (unspecified)) (set! oU7bc@library-name->file-name (unspecified)) (set! oU7be@file-locator (unspecified)) (set! oU7c0@serialize-all (unspecified)) (set! oU7c2@current-precompiled-library-loader (unspecified)) (set! oU7c4@try-load-from-file (unspecified)) (set! oU7c6@library-loader (unspecified)) (set! oU7c8@current-library-expander (unspecified)) (set! oU7ca@external-pending-libraries (unspecified)) (set! oU7cc@find-external-library (unspecified)) (set! oU7ce@find-library-by-name (unspecified)) (set! oU7d0@library-exists? (unspecified)) (set! oU7d2@find-library-by-spec/die (unspecified)) (set! oU7d4@label->binding-table (unspecified)) (set! oU7d6@install-library-record (unspecified)) (set! oU7d8@install-library (unspecified)) (set! oU7da@imported-label->binding (unspecified)) (set! oU7dc@invoke-library (unspecified)) (set! oU7de@visit-library (unspecified)) (set! oU7e0@invoke-library-by-spec (unspecified)) (set! oU7e2@installed-libraries (unspecified)) (set! oU7e4@library-spec (unspecified)) (set! oU76a@make-collection (lambda () (let ((oU7e5@set '())) (let ((oU7e8@set-cons '#f)) (begin (set! oU7e8@set-cons (lambda (oU7ed@x oU7ee@ls) (if (memq oU7ed@x oU7ee@ls) oU7ee@ls (cons oU7ed@x oU7ee@ls)))) (lambda oU7eb (let ((oU7ec (length oU7eb))) (if (= oU7ec '0) (apply (lambda () oU7e5@set) oU7eb) (if (= oU7ec '1) (apply (lambda (oU7e9@x) (set! oU7e5@set (oU7e8@set-cons oU7e9@x oU7e5@set))) oU7eb) (error 'apply '"invalid arg count")))))))))) (set! oU959@oU76a@make-collection oU76a@make-collection) (set! oU76c@current-library-collection (oU6c2@oU5a1@make-parameter (oU76a@make-collection) (lambda (oU7f1@x) (begin (if (not (procedure? oU7f1@x)) (assertion-violation 'current-library-collection '"not a procedure" oU7f1@x) (void)) oU7f1@x)))) (set! oU95a@oU76c@current-library-collection oU76c@current-library-collection) (set! oU76e@rp (oU6bf@oU59b@make-record-printer 'library (lambda (oU7f3@x oU7f4@p oU7f5@wr) (begin (if (not (oU778@library? oU7f3@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (oU782@library-version oU7f3@x)) (oU77e@library-name oU7f3@x) (append (oU77e@library-name oU7f3@x) (list (oU782@library-version oU7f3@x))))) oU7f4@p))))) (set! oU95b@oU76e@rp oU76e@rp) (set! oU778@library? (lambda (oU7f9@x) (and (simple-struct? oU7f9@x) (eq? (simple-struct-name oU7f9@x) 'library)))) (set! oU95c@oU778@library? oU778@library?) (set! oU77a@library-id (lambda (oU7fb@x) (simple-struct-ref oU7fb@x '0))) (set! oU95d@oU77a@library-id oU77a@library-id) (set! oU77c@set-library-id! (lambda (oU7fd@x oU7fe@val) (simple-struct-set! oU7fd@x '0 oU7fe@val))) (set! oU95e@oU77c@set-library-id! oU77c@set-library-id!) (set! oU77e@library-name (lambda (oU801@x) (simple-struct-ref oU801@x '1))) (set! oU95f@oU77e@library-name oU77e@library-name) (set! oU780@set-library-name! (lambda (oU803@x oU804@val) (simple-struct-set! oU803@x '1 oU804@val))) (set! oU960@oU780@set-library-name! oU780@set-library-name!) (set! oU782@library-version (lambda (oU807@x) (simple-struct-ref oU807@x '2))) (set! oU961@oU782@library-version oU782@library-version) (set! oU784@set-library-version! (lambda (oU809@x oU80a@val) (simple-struct-set! oU809@x '2 oU80a@val))) (set! oU962@oU784@set-library-version! oU784@set-library-version!) (set! oU786@library-imp* (lambda (oU80d@x) (simple-struct-ref oU80d@x '3))) (set! oU963@oU786@library-imp* oU786@library-imp*) (set! oU788@set-library-imp*! (lambda (oU80f@x oU810@val) (simple-struct-set! oU80f@x '3 oU810@val))) (set! oU964@oU788@set-library-imp*! oU788@set-library-imp*!) (set! oU78a@library-vis* (lambda (oU813@x) (simple-struct-ref oU813@x '4))) (set! oU965@oU78a@library-vis* oU78a@library-vis*) (set! oU78c@set-library-vis*! (lambda (oU815@x oU816@val) (simple-struct-set! oU815@x '4 oU816@val))) (set! oU966@oU78c@set-library-vis*! oU78c@set-library-vis*!) (set! oU78e@library-inv* (lambda (oU819@x) (simple-struct-ref oU819@x '5))) (set! oU967@oU78e@library-inv* oU78e@library-inv*) (set! oU790@set-library-inv*! (lambda (oU81b@x oU81c@val) (simple-struct-set! oU81b@x '5 oU81c@val))) (set! oU968@oU790@set-library-inv*! oU790@set-library-inv*!) (set! oU792@library-subst (lambda (oU81f@x) (simple-struct-ref oU81f@x '6))) (set! oU969@oU792@library-subst oU792@library-subst) (set! oU794@set-library-subst! (lambda (oU821@x oU822@val) (simple-struct-set! oU821@x '6 oU822@val))) (set! oU96a@oU794@set-library-subst! oU794@set-library-subst!) (set! oU796@library-env (lambda (oU825@x) (simple-struct-ref oU825@x '7))) (set! oU96b@oU796@library-env oU796@library-env) (set! oU798@set-library-env! (lambda (oU827@x oU828@val) (simple-struct-set! oU827@x '7 oU828@val))) (set! oU96c@oU798@set-library-env! oU798@set-library-env!) (set! oU79a@library-visit-state (lambda (oU82b@x) (simple-struct-ref oU82b@x '8))) (set! oU96d@oU79a@library-visit-state oU79a@library-visit-state) (set! oU79c@set-library-visit-state! (lambda (oU82d@x oU82e@val) (simple-struct-set! oU82d@x '8 oU82e@val))) (set! oU96e@oU79c@set-library-visit-state! oU79c@set-library-visit-state!) (set! oU79e@library-invoke-state (lambda (oU831@x) (simple-struct-ref oU831@x '9))) (set! oU96f@oU79e@library-invoke-state oU79e@library-invoke-state) (set! oU7a0@set-library-invoke-state! (lambda (oU833@x oU834@val) (simple-struct-set! oU833@x '9 oU834@val))) (set! oU970@oU7a0@set-library-invoke-state! oU7a0@set-library-invoke-state!) (set! oU7a2@library-visit-code (lambda (oU837@x) (simple-struct-ref oU837@x '10))) (set! oU971@oU7a2@library-visit-code oU7a2@library-visit-code) (set! oU7a4@set-library-visit-code! (lambda (oU839@x oU83a@val) (simple-struct-set! oU839@x '10 oU83a@val))) (set! oU972@oU7a4@set-library-visit-code! oU7a4@set-library-visit-code!) (set! oU7a6@library-invoke-code (lambda (oU83d@x) (simple-struct-ref oU83d@x '11))) (set! oU973@oU7a6@library-invoke-code oU7a6@library-invoke-code) (set! oU7a8@set-library-invoke-code! (lambda (oU83f@x oU840@val) (simple-struct-set! oU83f@x '11 oU840@val))) (set! oU974@oU7a8@set-library-invoke-code! oU7a8@set-library-invoke-code!) (set! oU7aa@library-visible? (lambda (oU843@x) (simple-struct-ref oU843@x '12))) (set! oU975@oU7aa@library-visible? oU7aa@library-visible?) (set! oU7ac@set-library-visible?! (lambda (oU845@x oU846@val) (simple-struct-set! oU845@x '12 oU846@val))) (set! oU976@oU7ac@set-library-visible?! oU7ac@set-library-visible?!) (set! oU7ae@library-source-file-name (lambda (oU849@x) (simple-struct-ref oU849@x '13))) (set! oU977@oU7ae@library-source-file-name oU7ae@library-source-file-name) (set! oU7b0@set-library-source-file-name! (lambda (oU84b@x oU84c@val) (simple-struct-set! oU84b@x '13 oU84c@val))) (set! oU978@oU7b0@set-library-source-file-name! oU7b0@set-library-source-file-name!) (set! oU7b2@dummy '3) (set! oU979@oU7b2@dummy oU7b2@dummy) (set! oU7b4@find-dependencies (lambda (oU84f@ls) (if (null? oU84f@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! oU97a@oU7b4@find-dependencies oU7b4@find-dependencies) (set! oU7b6@find-library-by (lambda (oU851@pred) (let oU855@f ((oU853@ls ((oU76c@current-library-collection)))) (if (null? oU853@ls) '#f (if (oU851@pred (car oU853@ls)) (car oU853@ls) (oU855@f (cdr oU853@ls))))))) (set! oU97b@oU7b6@find-library-by oU7b6@find-library-by) (set! oU7b8@library-path (oU6c2@oU5a1@make-parameter '(".") (lambda (oU857@x) (if (and (list? oU857@x) (for-all string? oU857@x)) (map (lambda (oU859@x) oU859@x) oU857@x) (assertion-violation 'library-path '"not a list of strings" oU857@x))))) (set! oU97c@oU7b8@library-path oU7b8@library-path) (set! oU7ba@library-extensions (oU6c2@oU5a1@make-parameter '(".sls" ".ss" ".scm") (lambda (oU85b@x) (if (and (list? oU85b@x) (for-all string? oU85b@x)) (map (lambda (oU85d@x) oU85d@x) oU85b@x) (assertion-violation 'library-extensions '"not a list of strings" oU85b@x))))) (set! oU97d@oU7ba@library-extensions oU7ba@library-extensions) (set! oU7bc@library-name->file-name (lambda (oU85f@x) (call-with-values (lambda () (open-string-output-port)) (lambda (oU865@oU862 oU866@oU864) (let ((oU869@extract oU866@oU864) (oU86a@p oU865@oU862)) (let ((oU86e@display-hex '#f)) (begin (set! oU86e@display-hex (lambda (oU877@n) (if (<= '0 oU877@n '9) (display oU877@n oU86a@p) (display (integer->char (+ (char->integer '#\a) (- oU877@n '10))) oU86a@p)))) (begin (let oU871@f ((oU86f@ls oU85f@x)) (if (not (null? oU86f@ls)) (begin (display '"/" oU86a@p) (for-each (lambda (oU873@c) (if (or (char<=? '#\a oU873@c '#\z) (char<=? '#\A oU873@c '#\Z) (char<=? '#\0 oU873@c '#\9) (memv oU873@c '(#\- #\. #\_ #\~))) (display oU873@c oU86a@p) (begin (display '"%" oU86a@p) (let ((oU875@n (char->integer oU873@c))) (begin (oU86e@display-hex (quotient oU875@n '16)) (oU86e@display-hex (remainder oU875@n '16))))))) (string->list (symbol->string (car oU86f@ls)))) (oU871@f (cdr oU86f@ls))) (void))) (oU869@extract))))))))) (set! oU97e@oU7bc@library-name->file-name oU7bc@library-name->file-name) (set! oU7be@file-locator (oU6c2@oU5a1@make-parameter (lambda (oU879@x) (let ((oU87b@str (oU7bc@library-name->file-name oU879@x))) (let oU883@f ((oU87d@ls (oU7b8@library-path)) (oU87e@exts (oU7ba@library-extensions)) (oU87f@failed-list '())) (if (null? oU87d@ls) (let ((oU88d@oU888 '#f) (oU88f@oU88a '#f) (oU891@oU889 '#f) (oU894@oU887 '#f) (oU896@make-library-resolution-condition '#f) (oU898@oU885 '#f) (oU89a@oU886 '#f) (oU89c@library-resolution-condition? '#f) (oU89e@condition-library '#f) (oU8a0@condition-files '#f)) (begin (set! oU88d@oU888 (make-record-type-descriptor '&library-resolution oU2b94@oU28db@&condition-rtd 'oU88b '#f '#f '#((immutable library) (immutable files)))) (set! oU88f@oU88a '#f) (set! oU891@oU889 (make-record-constructor-descriptor oU88d@oU888 oU2b95@oU28dd@&condition-rcd oU88f@oU88a)) (set! oU894@oU887 (record-predicate oU88d@oU888)) (set! oU896@make-library-resolution-condition (record-constructor oU891@oU889)) (set! oU898@oU885 (record-accessor oU88d@oU888 '0)) (set! oU89a@oU886 (record-accessor oU88d@oU888 '1)) (set! oU89c@library-resolution-condition? (condition-predicate oU88d@oU888)) (set! oU89e@condition-library (condition-accessor oU88d@oU888 oU898@oU885)) (set! oU8a0@condition-files (condition-accessor oU88d@oU888 oU89a@oU886)) (raise (condition (oU2bb4@oU2975@make-error) (oU2bd6@oU29d1@make-who-condition 'expander) (oU2b9a@oU2932@make-message-condition '"cannot locate library in library-path") (oU896@make-library-resolution-condition oU879@x (reverse oU87f@failed-list)))))) (if (null? oU87e@exts) (oU883@f (cdr oU87d@ls) (oU7ba@library-extensions) oU87f@failed-list) (let ((oU8a1@name (string-append (car oU87d@ls) oU87b@str (car oU87e@exts)))) (if (file-exists? oU8a1@name) oU8a1@name (oU883@f oU87d@ls (cdr oU87e@exts) (cons oU8a1@name oU87f@failed-list))))))))) (lambda (oU8a3@f) (if (procedure? oU8a3@f) oU8a3@f (assertion-violation 'file-locator '"not a procedure" oU8a3@f))))) (set! oU97f@oU7be@file-locator oU7be@file-locator) (set! oU7c0@serialize-all (lambda (oU8a5@serialize oU8a6@compile) (let ((oU8aa@library-desc '#f)) (begin (set! oU8aa@library-desc (lambda (oU8ad@x) (list (oU77a@library-id oU8ad@x) (oU77e@library-name oU8ad@x)))) (for-each (lambda (oU8ab@x) (if (oU7ae@library-source-file-name oU8ab@x) (oU8a5@serialize (oU7ae@library-source-file-name oU8ab@x) (list (oU77a@library-id oU8ab@x) (oU77e@library-name oU8ab@x) (oU782@library-version oU8ab@x) (map oU8aa@library-desc (oU786@library-imp* oU8ab@x)) (map oU8aa@library-desc (oU78a@library-vis* oU8ab@x)) (map oU8aa@library-desc (oU78e@library-inv* oU8ab@x)) (oU792@library-subst oU8ab@x) (oU796@library-env oU8ab@x) (oU8a6@compile (oU7a2@library-visit-code oU8ab@x)) (oU8a6@compile (oU7a6@library-invoke-code oU8ab@x)) (oU7aa@library-visible? oU8ab@x))) (void))) ((oU76c@current-library-collection))))))) (set! oU980@oU7c0@serialize-all oU7c0@serialize-all) (set! oU7c2@current-precompiled-library-loader (oU6c2@oU5a1@make-parameter (lambda (oU8af@filename oU8b0@sk) '#f))) (set! oU981@oU7c2@current-precompiled-library-loader oU7c2@current-precompiled-library-loader) (set! oU7c4@try-load-from-file (lambda (oU8b3@filename) ((oU7c2@current-precompiled-library-loader) oU8b3@filename (lambda oU8d9 (let ((oU8da (length oU8d9))) (if (= oU8da '11) (apply (lambda (oU8b5@id oU8b6@name oU8b7@ver oU8b8@imp* oU8b9@vis* oU8ba@inv* oU8bb@exp-subst oU8bc@exp-env oU8bd@visit-proc oU8be@invoke-proc oU8bf@visible?) (let oU8cd@f ((oU8cb@deps (append oU8b8@imp* oU8b9@vis* oU8ba@inv*))) (if (null? oU8cb@deps) (begin (oU7d8@install-library oU8b5@id oU8b6@name oU8b7@ver oU8b8@imp* oU8b9@vis* oU8ba@inv* oU8bb@exp-subst oU8bc@exp-env oU8bd@visit-proc oU8be@invoke-proc '#f '#f oU8bf@visible? '#f) '#t) (let ((oU8cf@d (car oU8cb@deps))) (let ((oU8d1@label (car oU8cf@d)) (oU8d2@dname (cadr oU8cf@d))) (let ((oU8d5@l (oU7ce@find-library-by-name oU8d2@dname))) (if (and (oU778@library? oU8d5@l) (eq? oU8d1@label (oU77a@library-id oU8d5@l))) (oU8cd@f (cdr oU8cb@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" oU8b6@name oU8d2@dname oU8b3@filename oU8d5@l oU8d1@label (oU77a@library-id oU8d5@l)) '#f)))))))) oU8d9) (if (>= oU8da '0) (apply (lambda oU8d7@others '#f) oU8d9) (error 'apply '"invalid arg count")))))))) (set! oU982@oU7c4@try-load-from-file oU7c4@try-load-from-file) (set! oU7c6@library-loader (oU6c2@oU5a1@make-parameter (lambda (oU8db@x) (let ((oU8dd@file-name ((oU7be@file-locator) oU8db@x))) (if (not oU8dd@file-name) (assertion-violation '#f '"cannot file library" oU8db@x) (or (oU7c4@try-load-from-file oU8dd@file-name) ((oU7c8@current-library-expander) (oU6c1@oU59f@read-library-source-file oU8dd@file-name) oU8dd@file-name (lambda (oU8df@name) (if (not (fast-equal? oU8df@name oU8db@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (oU8e5@oU8e2 oU8e6@oU8e4) (let ((oU8e9@e oU8e6@oU8e4) (oU8ea@p oU8e5@oU8e2)) (begin (display '"expected to find library " oU8ea@p) (write oU8db@x oU8ea@p) (display '" in file " oU8ea@p) (display oU8dd@file-name oU8ea@p) (display '", found " oU8ea@p) (write oU8df@name oU8ea@p) (display '" instead" oU8ea@p) (oU8e9@e)))))) (void)))))))) (lambda (oU8ed@f) (if (procedure? oU8ed@f) oU8ed@f (assertion-violation 'library-locator '"not a procedure" oU8ed@f))))) (set! oU983@oU7c6@library-loader oU7c6@library-loader) (set! oU7c8@current-library-expander (oU6c2@oU5a1@make-parameter (lambda (oU8ef@x) (assertion-violation 'library-expander '"not initialized")) (lambda (oU8f1@f) (if (procedure? oU8f1@f) oU8f1@f (assertion-violation 'library-expander '"not a procedure" oU8f1@f))))) (set! oU984@oU7c8@current-library-expander oU7c8@current-library-expander) (set! oU7ca@external-pending-libraries (oU6c2@oU5a1@make-parameter '())) (set! oU985@oU7ca@external-pending-libraries oU7ca@external-pending-libraries) (set! oU7cc@find-external-library (lambda (oU8f3@name) (begin (if (member oU8f3@name (oU7ca@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" oU8f3@name) (void)) (let ((oU8f9@oU8f6 oU7ca@external-pending-libraries) (oU8fa@oU8f8 (cons oU8f3@name (oU7ca@external-pending-libraries)))) (let ((oU8fd@swap (lambda () (let ((oU8ff@t (oU8f9@oU8f6))) (begin (oU8f9@oU8f6 oU8fa@oU8f8) (set! oU8fa@oU8f8 oU8ff@t)))))) (dynamic-wind oU8fd@swap (lambda () (begin ((oU7c6@library-loader) oU8f3@name) (or (oU7b6@find-library-by (lambda (oU901@x) (fast-equal? (oU77e@library-name oU901@x) oU8f3@name))) (assertion-violation '#f '"handling external library did not yield the correct library" oU8f3@name)))) oU8fd@swap)))))) (set! oU986@oU7cc@find-external-library oU7cc@find-external-library) (set! oU7ce@find-library-by-name (lambda (oU903@name) (or (oU7b6@find-library-by (lambda (oU905@x) (fast-equal? (oU77e@library-name oU905@x) oU903@name))) (oU7cc@find-external-library oU903@name)))) (set! oU987@oU7ce@find-library-by-name oU7ce@find-library-by-name) (set! oU7d0@library-exists? (lambda (oU907@name) (and (oU7b6@find-library-by (lambda (oU909@x) (fast-equal? (oU77e@library-name oU909@x) oU907@name))) '#t))) (set! oU988@oU7d0@library-exists? oU7d0@library-exists?) (set! oU7d2@find-library-by-spec/die (lambda (oU90b@spec) (let ((oU90d@id (car oU90b@spec))) (or (oU7b6@find-library-by (lambda (oU90f@x) (eq? oU90d@id (oU77a@library-id oU90f@x)))) (assertion-violation '#f '"cannot find library with required spec" oU90b@spec))))) (set! oU989@oU7d2@find-library-by-spec/die oU7d2@find-library-by-spec/die) (set! oU7d4@label->binding-table (make-eq-hashtable)) (set! oU98a@oU7d4@label->binding-table oU7d4@label->binding-table) (set! oU7d6@install-library-record (lambda (oU911@lib) (begin (let ((oU913@exp-env (oU796@library-env oU911@lib))) (for-each (lambda (oU915@x) (let ((oU917@label (car oU915@x)) (oU918@binding (cdr oU915@x))) (let ((oU91b@binding (let ((oU91d@t (car oU918@binding))) (if (memv oU91d@t '(global)) (cons 'global (cons oU911@lib (cdr oU918@binding))) (if (memv oU91d@t '(global-macro)) (cons 'global-macro (cons oU911@lib (cdr oU918@binding))) (if (memv oU91d@t '(global-macro!)) (cons 'global-macro! (cons oU911@lib (cdr oU918@binding))) oU918@binding)))))) (begin (if (hashtable-ref oU7d4@label->binding-table oU917@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" oU917@label (hashtable-ref oU7d4@label->binding-table oU917@label '#f) oU91b@binding) (exit)) (void)) (hashtable-set! oU7d4@label->binding-table oU917@label oU91b@binding))))) oU913@exp-env)) ((oU76c@current-library-collection) oU911@lib)))) (set! oU98b@oU7d6@install-library-record oU7d6@install-library-record) (set! oU7d8@install-library (lambda (oU91f@id oU920@name oU921@ver oU922@imp* oU923@vis* oU924@inv* oU925@exp-subst oU926@exp-env oU927@visit-proc oU928@invoke-proc oU929@visit-code oU92a@invoke-code oU92b@visible? oU92c@source-file-name) (let ((oU93b@imp-lib* (map oU7d2@find-library-by-spec/die oU922@imp*)) (oU93c@vis-lib* (map oU7d2@find-library-by-spec/die oU923@vis*)) (oU93d@inv-lib* (map oU7d2@find-library-by-spec/die oU924@inv*))) (begin (if (not (and (symbol? oU91f@id) (list? oU920@name) (list? oU921@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" oU91f@id oU920@name oU921@ver) (void)) (if (oU7d0@library-exists? oU920@name) (assertion-violation 'install-library '"library is already installed" oU920@name) (void)) (let ((oU941@lib (make-simple-struct 'library '15 (list oU91f@id oU920@name oU921@ver oU93b@imp-lib* oU93c@vis-lib* oU93d@inv-lib* oU925@exp-subst oU926@exp-env oU927@visit-proc oU928@invoke-proc oU929@visit-code oU92a@invoke-code oU92b@visible? oU92c@source-file-name)))) (oU7d6@install-library-record oU941@lib)))))) (set! oU98c@oU7d8@install-library oU7d8@install-library) (set! oU7da@imported-label->binding (lambda (oU943@lab) (hashtable-ref oU7d4@label->binding-table oU943@lab '#f))) (set! oU98d@oU7da@imported-label->binding oU7da@imported-label->binding) (set! oU7dc@invoke-library (lambda (oU945@lib) (let ((oU947@invoke (oU79e@library-invoke-state oU945@lib))) (if (procedure? oU947@invoke) (begin (oU7a0@set-library-invoke-state! oU945@lib (lambda () (assertion-violation 'invoke '"circularity detected" oU945@lib))) (for-each oU7dc@invoke-library (oU78e@library-inv* oU945@lib)) (oU7a0@set-library-invoke-state! oU945@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" oU945@lib))) (oU947@invoke) (oU7a0@set-library-invoke-state! oU945@lib '#t)) (void))))) (set! oU98e@oU7dc@invoke-library oU7dc@invoke-library) (set! oU7de@visit-library (lambda (oU949@lib) (let ((oU94b@visit (oU79a@library-visit-state oU949@lib))) (if (procedure? oU94b@visit) (begin (oU79c@set-library-visit-state! oU949@lib (lambda () (assertion-violation 'visit '"circularity detected" oU949@lib))) (for-each oU7dc@invoke-library (oU78a@library-vis* oU949@lib)) (oU79c@set-library-visit-state! oU949@lib (lambda () (assertion-violation 'invoke '"first visit did not return" oU949@lib))) (oU94b@visit) (oU79c@set-library-visit-state! oU949@lib '#t)) (void))))) (set! oU98f@oU7de@visit-library oU7de@visit-library) (set! oU7e0@invoke-library-by-spec (lambda (oU94d@spec) (oU7dc@invoke-library (oU7d2@find-library-by-spec/die oU94d@spec)))) (set! oU990@oU7e0@invoke-library-by-spec oU7e0@invoke-library-by-spec) (set! oU7e2@installed-libraries (lambda oU955 (let ((oU956 (length oU955))) (if (= oU956 '1) (apply (lambda (oU94f@all?) (let oU953@f ((oU951@ls ((oU76c@current-library-collection)))) (if (null? oU951@ls) '() (if (or oU94f@all? (oU7aa@library-visible? (car oU951@ls))) (cons (car oU951@ls) (oU953@f (cdr oU951@ls))) (oU953@f (cdr oU951@ls)))))) oU955) (if (= oU956 '0) (apply (lambda () (oU7e2@installed-libraries '#f)) oU955) (error 'apply '"invalid arg count")))))) (set! oU991@oU7e2@installed-libraries oU7e2@installed-libraries) (set! oU7e4@library-spec (lambda (oU957@x) (begin (if (not (oU778@library? oU957@x)) (assertion-violation 'library-spec '"not a library" oU957@x) (void)) (list (oU77a@library-id oU957@x) (oU77e@library-name oU957@x) (oU782@library-version oU957@x))))) (set! oU992@oU7e4@library-spec oU7e4@library-spec) (void))
(begin (set! oU996@build-global-define (unspecified)) (set! oUa07@build-lambda (unspecified)) (set! oUa09@build-case-lambda (unspecified)) (set! oUa37@build-sequence (unspecified)) (set! oUa39@build-void (unspecified)) (set! oUa3b@build-letrec (unspecified)) (set! oUa3d@build-let (unspecified)) (set! oUa3f@build-named-let (unspecified)) (set! oUa41@build-letrec* (unspecified)) (set! oUa43@build-library-letrec* (unspecified)) (set! oUa45@build-receive (unspecified)) (set! oU996@build-global-define (lambda (oUa46@x) (oUa39@build-void))) (set! oUada@oU996@build-global-define oU996@build-global-define) (set! oUa07@build-lambda (lambda (oUa48@ae oUa49@vars oUa4a@exp) (list 'lambda oUa49@vars oUa4a@exp))) (set! oUadb@oUa07@build-lambda oUa07@build-lambda) (set! oUa09@build-case-lambda (lambda (oUa4e@ae oUa4f@vars* oUa50@exp*) (let ((oUa55@build-error '#f) (oUa57@build-pred '#f) (oUa59@build-apply '#f) (oUa5b@expand-case-lambda '#f)) (begin (set! oUa55@build-error (lambda (oUa8c@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! oUa57@build-pred (lambda (oUa74@ae oUa75@n oUa76@vars) (call-with-values (lambda () (let oUa82@f ((oUa7e@vars oUa76@vars) (oUa7f@count '0)) (if (pair? oUa7e@vars) (oUa82@f (cdr oUa7e@vars) (+ oUa7f@count '1)) (if (null? oUa7e@vars) (values oUa7f@count '=) (values oUa7f@count '>=))))) (lambda (oUa84@oUa7b oUa85@oUa7d) (let ((oUa88@pred oUa85@oUa7d) (oUa89@count oUa84@oUa7b)) (list (list 'primitive oUa88@pred) oUa75@n (list 'quote oUa89@count))))))) (set! oUa59@build-apply (lambda (oUa6c@ae oUa6d@g oUa6e@vars oUa6f@exp) (list '(primitive apply) (oUa07@build-lambda oUa6c@ae oUa6e@vars oUa6f@exp) oUa6d@g))) (set! oUa5b@expand-case-lambda (lambda (oUa5c@ae oUa5d@vars oUa5e@exp*) (let ((oUa62@g (gensym)) (oUa63@n (gensym))) (list 'lambda oUa62@g (oUa3d@build-let oUa5c@ae (list oUa63@n) (list (list '(primitive length) oUa62@g)) (let oUa6a@f ((oUa66@vars* oUa4f@vars*) (oUa67@exp* oUa5e@exp*)) (if (null? oUa66@vars*) (oUa55@build-error oUa5c@ae) (list 'if (oUa57@build-pred oUa5c@ae oUa63@n (car oUa66@vars*)) (oUa59@build-apply oUa5c@ae oUa62@g (car oUa66@vars*) (car oUa67@exp*)) (oUa6a@f (cdr oUa66@vars*) (cdr oUa67@exp*)))))))))) (if (= (length oUa50@exp*) '1) (oUa07@build-lambda oUa4e@ae (car oUa4f@vars*) (car oUa50@exp*)) (oUa5b@expand-case-lambda oUa4e@ae oUa4f@vars* oUa50@exp*)))))) (set! oUadc@oUa09@build-case-lambda oUa09@build-case-lambda) (set! oUa37@build-sequence (lambda (oUa8e@ae oUa8f@exps) (let oUa94@loop ((oUa92@exps oUa8f@exps)) (if (null? (cdr oUa92@exps)) (car oUa92@exps) (if (equal? (car oUa92@exps) (oUa39@build-void)) (oUa94@loop (cdr oUa92@exps)) (cons 'begin oUa92@exps)))))) (set! oUadd@oUa37@build-sequence oUa37@build-sequence) (set! oUa39@build-void (lambda () '((primitive void)))) (set! oUade@oUa39@build-void oUa39@build-void) (set! oUa3b@build-letrec (lambda (oUa96@ae oUa97@vars oUa98@val-exps oUa99@body-exp) (if (null? oUa97@vars) oUa99@body-exp (list 'letrec (map list oUa97@vars oUa98@val-exps) oUa99@body-exp)))) (set! oUadf@oUa3b@build-letrec oUa3b@build-letrec) (set! oUa3d@build-let (lambda (oUa9e@ae oUa9f@vars oUaa0@val-exps oUaa1@body-exp) (if (null? oUa9f@vars) oUaa1@body-exp (list 'let (map list oUa9f@vars oUaa0@val-exps) oUaa1@body-exp)))) (set! oUae0@oUa3d@build-let oUa3d@build-let) (set! oUa3f@build-named-let (lambda (oUaa6@ae oUaa7@name oUaa8@vars oUaa9@val-exps oUaaa@body-exp) (list 'let oUaa7@name (map list oUaa8@vars oUaa9@val-exps) oUaaa@body-exp))) (set! oUae1@oUa3f@build-named-let oUa3f@build-named-let) (set! oUa41@build-letrec* (lambda (oUab0@ae oUab1@vars oUab2@val-exps oUab3@body-exp) (if (null? oUab1@vars) oUab3@body-exp (oUa3d@build-let oUab0@ae oUab1@vars (map (lambda (oUab8@x) (list 'quote '#f)) oUab1@vars) (oUa37@build-sequence oUab0@ae (append (map (lambda (oUaba@lhs oUabb@rhs) (list 'set! oUaba@lhs oUabb@rhs)) oUab1@vars oUab2@val-exps) (list oUab3@body-exp))))))) (set! oUae2@oUa41@build-letrec* oUa41@build-letrec*) (set! oUa43@build-library-letrec* (lambda (oUabe@ae oUabf@name oUac0@vars oUac1@locs oUac2@val-exps oUac3@body-exp) (cons 'begin (append (map (lambda (oUaca@var) (cons 'set! (cons oUaca@var '((unspecified))))) oUac0@vars) (append (apply append (map (lambda (oUacc@var oUacd@loc oUace@val-exp) (list (list 'set! oUacc@var oUace@val-exp) (list 'set! oUacd@loc oUacc@var))) oUac0@vars oUac1@locs oUac2@val-exps)) (list oUac3@body-exp)))))) (set! oUae3@oUa43@build-library-letrec* oUa43@build-library-letrec*) (set! oUa45@build-receive (lambda (oUad2@ae oUad3@vars oUad4@producer oUad5@body*) (begin (display '"************** in ") (cons 'receive (cons oUad3@vars (cons oUad4@producer oUad5@body*)))))) (set! oUae4@oUa45@build-receive oUa45@build-receive) (void))
(begin (set! oUaf3@file-options-macro (unspecified)) (set! oUaf5@set-cons (unspecified)) (set! oUaf7@set-union (unspecified)) (set! oUafc@top-mark* (unspecified)) (set! oUafe@top-marked? (unspecified)) (set! oUb00@gen-lexical (unspecified)) (set! oUb02@gen-global (unspecified)) (set! oUb04@gen-label (unspecified)) (set! oUb06@gen-top-level-label (unspecified)) (set! oUb08@gen-define-label+loc (unspecified)) (set! oUb0a@gen-define-label (unspecified)) (set! oUb14@rib? (unspecified)) (set! oUb16@rib-sym* (unspecified)) (set! oUb18@set-rib-sym*! (unspecified)) (set! oUb1a@rib-mark** (unspecified)) (set! oUb1c@set-rib-mark**! (unspecified)) (set! oUb1e@rib-label* (unspecified)) (set! oUb20@set-rib-label*! (unspecified)) (set! oUb22@rib-sealed/freq (unspecified)) (set! oUb24@set-rib-sealed/freq! (unspecified)) (set! oUb26@rib-cache (unspecified)) (set! oUb28@set-rib-cache! (unspecified)) (set! oUb2a@dummy (unspecified)) (set! oUb2c@make-empty-rib (unspecified)) (set! oUb2e@extend-rib! (unspecified)) (set! oUb30@extend-rib/nc! (unspecified)) (set! oUb32@make-rib-map (unspecified)) (set! oUb34@seal-rib! (unspecified)) (set! oUb36@unseal-rib! (unspecified)) (set! oUb38@make-full-rib (unspecified)) (set! oUb3a@rp (unspecified)) (set! oUb44@stx? (unspecified)) (set! oUb46@stx-expr (unspecified)) (set! oUb48@set-stx-expr! (unspecified)) (set! oUb4a@stx-mark* (unspecified)) (set! oUb4c@set-stx-mark*! (unspecified)) (set! oUb4e@stx-subst* (unspecified)) (set! oUb50@set-stx-subst*! (unspecified)) (set! oUb52@stx-ae* (unspecified)) (set! oUb54@set-stx-ae*! (unspecified)) (set! oUb56@dummy (unspecified)) (set! oUb58@datum->stx (unspecified)) (set! oUb5a@gen-mark (unspecified)) (set! oUb5c@anti-mark (unspecified)) (set! oUb5e@anti-mark? (unspecified)) (set! oUb60@mkstx (unspecified)) (set! oUb62@add-mark (unspecified)) (set! oUb64@add-subst (unspecified)) (set! oUb66@syntax-kind? (unspecified)) (set! oUb68@syntax-vector->list (unspecified)) (set! oUb6a@syntax-pair? (unspecified)) (set! oUb6c@syntax-vector? (unspecified)) (set! oUb6e@syntax-null? (unspecified)) (set! oUb70@syntax-list? (unspecified)) (set! oUb72@syntax-car (unspecified)) (set! oUb74@syntax-cdr (unspecified)) (set! oUb76@syntax->list (unspecified)) (set! oUb78@id? (unspecified)) (set! oUb7a@id->sym (unspecified)) (set! oUb7c@bound-id=? (unspecified)) (set! oUb7e@free-id=? (unspecified)) (set! oUb80@valid-bound-ids? (unspecified)) (set! oUb82@distinct-bound-ids? (unspecified)) (set! oUb84@bound-id-member? (unspecified)) (set! oUb86@self-evaluating? (unspecified)) (set! oUb88@strip-annotations (unspecified)) (set! oUb8a@strip (unspecified)) (set! oUb8c@stx->datum (unspecified)) (set! oUb8e@id->label (unspecified)) (set! oUb90@label->binding (unspecified)) (set! oUb92@make-binding (unspecified)) (set! oUb94@binding-type (unspecified)) (set! oUb96@binding-value (unspecified)) (set! oUb98@raise-unbound-error (unspecified)) (set! oUb9a@syntax-type (unspecified)) (set! oUba8@sanitize-binding (unspecified)) (set! oUbaa@make-variable-transformer (unspecified)) (set! oUbac@variable-transformer? (unspecified)) (set! oUbae@variable-transformer-procedure (unspecified)) (set! oUbb0@make-eval-transformer (unspecified)) (set! oUd01@parse-define (unspecified)) (set! oUd03@parse-define-syntax (unspecified)) (set! oUd05@scheme-stx-hashtable (unspecified)) (set! oUd07@scheme-stx (unspecified)) (set! oUd09@lexical-var (unspecified)) (set! oUd0b@lexical-mutable? (unspecified)) (set! oUd0d@set-lexical-mutable! (unspecified)) (set! oUd0f@add-lexical (unspecified)) (set! oUd11@add-lexicals (unspecified)) (set! oUd13@letrec-helper (unspecified)) (set! oUd15@let-transformer (unspecified)) (set! oUd17@letrec-transformer (unspecified)) (set! oUd19@letrec*-transformer (unspecified)) (set! oUd1b@fluid-let-syntax-transformer (unspecified)) (set! oUd1d@type-descriptor-transformer (unspecified)) (set! oUd1f@record-type-descriptor-transformer (unspecified)) (set! oUd21@record-constructor-descriptor-transformer (unspecified)) (set! oUd23@when-macro (unspecified)) (set! oUd25@unless-macro (unspecified)) (set! oUd27@if-transformer (unspecified)) (set! oUd29@and-transformer (unspecified)) (set! oUd2b@or-transformer (unspecified)) (set! oUd2d@case-macro (unspecified)) (set! oUd2f@quote-transformer (unspecified)) (set! oUd31@case-lambda-transformer (unspecified)) (set! oUd33@lambda-transformer (unspecified)) (set! oUd35@bless (unspecified)) (set! oUd37@with-syntax-macro (unspecified)) (set! oUd39@invalid-fmls-error (unspecified)) (set! oUd3b@let-macro (unspecified)) (set! oUd3d@let-values-macro (unspecified)) (set! oUd3f@let*-values-macro (unspecified)) (set! oUd41@trace-lambda-macro (unspecified)) (set! oUd43@trace-define-macro (unspecified)) (set! oUd45@trace-define-syntax-macro (unspecified)) (set! oUd47@trace-let/rec-syntax (unspecified)) (set! oUd49@trace-let-syntax-macro (unspecified)) (set! oUd4b@trace-letrec-syntax-macro (unspecified)) (set! oUd4d@guard-macro (unspecified)) (set! oUd4f@define-enumeration-macro (unspecified)) (set! oUd51@time-macro (unspecified)) (set! oUd53@delay-macro (unspecified)) (set! oUd55@assert-macro (unspecified)) (set! oUd57@endianness-macro (unspecified)) (set! oUd59@identifier-syntax-macro (unspecified)) (set! oUd5b@do-macro (unspecified)) (set! oUd5d@let*-macro (unspecified)) (set! oUd5f@or-macro (unspecified)) (set! oUd61@and-macro (unspecified)) (set! oUd63@cond-macro (unspecified)) (set! oUd65@do-include (unspecified)) (set! oUd67@include-macro (unspecified)) (set! oUd69@include-into-macro (unspecified)) (set! oUd6b@syntax-rules-macro (unspecified)) (set! oUd6d@quasiquote-macro (unspecified)) (set! oUd6f@quasisyntax-macro (unspecified)) (set! oUd71@define-struct-macro (unspecified)) (set! oUd73@define-record-type-macro (unspecified)) (set! oUd75@define-condition-type-macro (unspecified)) (set! oUd77@incorrect-usage-macro (unspecified)) (set! oUd79@parameterize-macro (unspecified)) (set! oUd7b@foreign-call-transformer (unspecified)) (set! oUd7d@convert-pattern (unspecified)) (set! oUd7f@syntax-dispatch (unspecified)) (set! oUd81@ellipsis? (unspecified)) (set! oUd83@underscore? (unspecified)) (set! oUd85@verify-literals (unspecified)) (set! oUd87@syntax-case-transformer (unspecified)) (set! oUd89@ellipsis-map (unspecified)) (set! oUd8b@syntax-transformer (unspecified)) (set! oUd8d@core-macro-transformer (unspecified)) (set! oUd8f@symbol-macro (unspecified)) (set! oUd91@macro-transformer (unspecified)) (set! oUd93@local-macro-transformer (unspecified)) (set! oUd95@do-macro-call (unspecified)) (set! oUd97@chi-macro (unspecified)) (set! oUd99@chi-local-macro (unspecified)) (set! oUd9b@chi-global-macro (unspecified)) (set! oUd9d@chi-expr* (unspecified)) (set! oUd9f@chi-application (unspecified)) (set! oUda1@chi-expr (unspecified)) (set! oUda3@chi-set! (unspecified)) (set! oUda5@verify-formals (unspecified)) (set! oUda7@chi-lambda-clause (unspecified)) (set! oUda9@chi-lambda-clause* (unspecified)) (set! oUdab@chi-defun (unspecified)) (set! oUdad@chi-rhs (unspecified)) (set! oUdaf@expand-interaction-rhs*/init* (unspecified)) (set! oUdb1@chi-rhs* (unspecified)) (set! oUdb3@find-bound=? (unspecified)) (set! oUdb5@find-dups (unspecified)) (set! oUdb7@chi-internal (unspecified)) (set! oUdb9@parse-module (unspecified)) (set! oUdc3@module-interface? (unspecified)) (set! oUdc5@module-interface-first-mark (unspecified)) (set! oUdc7@set-module-interface-first-mark! (unspecified)) (set! oUdc9@module-interface-exp-id-vec (unspecified)) (set! oUdcb@set-module-interface-exp-id-vec! (unspecified)) (set! oUdcd@module-interface-exp-lab-vec (unspecified)) (set! oUdcf@set-module-interface-exp-lab-vec! (unspecified)) (set! oUdd1@dummy (unspecified)) (set! oUdd3@module-interface-exp-id* (unspecified)) (set! oUdd5@chi-internal-module (unspecified)) (set! oUdd7@chi-body* (unspecified)) (set! oUdd9@expand-transformer (unspecified)) (set! oUddb@parse-exports (unspecified)) (set! oUddd@parse-library-name (unspecified)) (set! oUddf@parse-library (unspecified)) (set! oUde1@parse-import-spec* (unspecified)) (set! oUde3@make-top-rib (unspecified)) (set! oUde5@make-collector (unspecified)) (set! oUde7@inv-collector (unspecified)) (set! oUde9@vis-collector (unspecified)) (set! oUdeb@imp-collector (unspecified)) (set! oUded@chi-library-internal (unspecified)) (set! oUdef@chi-interaction-expr (unspecified)) (set! oUdf1@library-body-expander (unspecified)) (set! oUdf3@core-library-expander (unspecified)) (set! oUdf5@parse-top-level-program (unspecified)) (set! oUdf7@top-level-expander (unspecified)) (set! oUdf9@rp (unspecified)) (set! oUe03@env? (unspecified)) (set! oUe05@env-names (unspecified)) (set! oUe07@set-env-names! (unspecified)) (set! oUe09@env-labels (unspecified)) (set! oUe0b@set-env-labels! (unspecified)) (set! oUe0d@env-itc (unspecified)) (set! oUe0f@set-env-itc! (unspecified)) (set! oUe11@dummy (unspecified)) (set! oUe13@rp (unspecified)) (set! oUe1d@interaction-env? (unspecified)) (set! oUe1f@interaction-env-rib (unspecified)) (set! oUe21@set-interaction-env-rib! (unspecified)) (set! oUe23@interaction-env-r (unspecified)) (set! oUe25@set-interaction-env-r! (unspecified)) (set! oUe27@interaction-env-locs (unspecified)) (set! oUe29@set-interaction-env-locs! (unspecified)) (set! oUe2b@dummy (unspecified)) (set! oUe2d@interaction-environment-symbols (unspecified)) (set! oUe2f@environment-bindings (unspecified)) (set! oUe31@parse-binding (unspecified)) (set! oUe33@environment? (unspecified)) (set! oUe35@environment-symbols (unspecified)) (set! oUe37@environment (unspecified)) (set! oUe39@null-environment (unspecified)) (set! oUe3b@scheme-report-environment (unspecified)) (set! oUe3d@expand (unspecified)) (set! oUe3f@eval (unspecified)) (set! oUe41@library-expander (unspecified)) (set! oUe43@boot-library-expand (unspecified)) (set! oUe45@rev-map-append (unspecified)) (set! oUe47@build-exports (unspecified)) (set! oUe49@make-export-subst (unspecified)) (set! oUe4b@make-export-env/macros (unspecified)) (set! oUe4d@generate-temporaries (unspecified)) (set! oUe4f@free-identifier=? (unspecified)) (set! oUe51@bound-identifier=? (unspecified)) (set! oUe53@make-source-condition (unspecified)) (set! oUe55@extract-position-condition (unspecified)) (set! oUe57@expression-position (unspecified)) (set! oUe59@assertion-error (unspecified)) (set! oUe5b@syntax-error (unspecified)) (set! oUe5d@syntax-violation* (unspecified)) (set! oUe5f@syntax-violation (unspecified)) (set! oUe61@identifier? (unspecified)) (set! oUe63@datum->syntax (unspecified)) (set! oUe65@syntax->datum (unspecified)) (set! oUe67@ungensym-all (unspecified)) (set! oUe69@compile-r6rs-top-level (unspecified)) (set! oUe6b@pre-compile-r6rs-top-level (unspecified)) (set! oUe6d@interaction-environment (unspecified)) (set! oUe6f@top-level-context (unspecified)) (set! oUaf3@file-options-macro (lambda (oUe70@x) (let ((oUe73@valid-option? '#f)) (begin (set! oUe73@valid-option? (lambda (oUe7c@x) (and (oUb78@id? oUe7c@x) (memq (oUb7a@id->sym oUe7c@x) '(no-fail no-create no-truncate))))) (let ((oUe74@t oUe70@x)) (let ((oUe76@ls/false (oUd7f@syntax-dispatch oUe74@t '(_ . each-any)))) (if (and oUe76@ls/false (apply (lambda (oUe78@opt*) (for-all oUe73@valid-option? oUe78@opt*)) oUe76@ls/false)) (apply (lambda (oUe7a@opt*) (oUd35@bless (list 'make-file-options (list 'quote oUe7a@opt*)))) oUe76@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oUe74@t)))))))) (set! oU27c6@oUaf3@file-options-macro oUaf3@file-options-macro) (set! oUaf5@set-cons (lambda (oUe7e@x oUe7f@ls) (if (memq oUe7e@x oUe7f@ls) oUe7f@ls (cons oUe7e@x oUe7f@ls)))) (set! oU27c7@oUaf5@set-cons oUaf5@set-cons) (set! oUaf7@set-union (lambda (oUe82@ls1 oUe83@ls2) (if (null? oUe82@ls1) oUe83@ls2 (if (memq (car oUe82@ls1) oUe83@ls2) (oUaf7@set-union (cdr oUe82@ls1) oUe83@ls2) (cons (car oUe82@ls1) (oUaf7@set-union (cdr oUe82@ls1) oUe83@ls2)))))) (set! oU27c8@oUaf7@set-union oUaf7@set-union) (set! oUafc@top-mark* '(top)) (set! oU27c9@oUafc@top-mark* oUafc@top-mark*) (set! oUafe@top-marked? (lambda (oUe86@m*) (memq 'top oUe86@m*))) (set! oU27ca@oUafe@top-marked? oUafe@top-marked?) (set! oUb00@gen-lexical (lambda (oUe88@sym) (if (symbol? oUe88@sym) (gensym oUe88@sym) (if (oUb44@stx? oUe88@sym) (oUb00@gen-lexical (oUb7a@id->sym oUe88@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" oUe88@sym))))) (set! oU27cb@oUb00@gen-lexical oUb00@gen-lexical) (set! oUb02@gen-global (lambda (oUe8a@x) (oUb00@gen-lexical oUe8a@x))) (set! oU27cc@oUb02@gen-global oUb02@gen-global) (set! oUb04@gen-label (lambda (oUe8c@_) (gensym))) (set! oU27cd@oUb04@gen-label oUb04@gen-label) (set! oUb06@gen-top-level-label (lambda (oUe8e@id oUe8f@rib) (let ((oUe93@find '#f)) (begin (set! oUe93@find (lambda (oUe9e@sym oUe9f@mark* oUea0@sym* oUea1@mark** oUea2@label*) (and (pair? oUea0@sym*) (if (and (eq? oUe9e@sym (car oUea0@sym*)) (same-marks? oUe9f@mark* (car oUea1@mark**))) (car oUea2@label*) (oUe93@find oUe9e@sym oUe9f@mark* (cdr oUea0@sym*) (cdr oUea1@mark**) (cdr oUea2@label*)))))) (let ((oUe94@sym (oUb7a@id->sym oUe8e@id)) (oUe95@mark* (oUb4a@stx-mark* oUe8e@id))) (let ((oUe98@sym* (oUb16@rib-sym* oUe8f@rib))) (let ((oUe9a@t (and (memq oUe94@sym (oUb16@rib-sym* oUe8f@rib)) (oUe93@find oUe94@sym oUe95@mark* oUe98@sym* (oUb1a@rib-mark** oUe8f@rib) (oUb1e@rib-label* oUe8f@rib))))) (if oUe9a@t ((lambda (oUe9c@label) (if (oU98d@oU7da@imported-label->binding oUe9c@label) (gensym) oUe9c@label)) oUe9a@t) (gensym))))))))) (set! oU27ce@oUb06@gen-top-level-label oUb06@gen-top-level-label) (set! oUb08@gen-define-label+loc (lambda (oUea8@id oUea9@rib) (let ((oUeac@t (oUe6f@top-level-context))) (if oUeac@t ((lambda (oUeae@env) (let ((oUeb0@label (oUb06@gen-top-level-label oUea8@id oUea9@rib)) (oUeb1@locs (oUe27@interaction-env-locs oUeae@env))) (values oUeb0@label (let ((oUeb4@t (assq oUeb0@label oUeb1@locs))) (if oUeb4@t (cdr oUeb4@t) (let ((oUeb6@loc (oUb00@gen-lexical oUea8@id))) (begin (oUe29@set-interaction-env-locs! oUeae@env (cons (cons oUeb0@label oUeb6@loc) oUeb1@locs)) oUeb6@loc))))))) oUeac@t) (values (gensym) (oUb00@gen-lexical oUea8@id)))))) (set! oU27cf@oUb08@gen-define-label+loc oUb08@gen-define-label+loc) (set! oUb0a@gen-define-label (lambda (oUeb8@id oUeb9@rib) (if (oUe6f@top-level-context) (oUb06@gen-top-level-label oUeb8@id oUeb9@rib) (gensym)))) (set! oU27d0@oUb0a@gen-define-label oUb0a@gen-define-label) (set! oUb14@rib? (lambda (oUebc@x) (and (simple-struct? oUebc@x) (eq? (simple-struct-name oUebc@x) 'rib)))) (set! oU27d1@oUb14@rib? oUb14@rib?) (set! oUb16@rib-sym* (lambda (oUebe@x) (simple-struct-ref oUebe@x '0))) (set! oU27d2@oUb16@rib-sym* oUb16@rib-sym*) (set! oUb18@set-rib-sym*! (lambda (oUec0@x oUec1@val) (simple-struct-set! oUec0@x '0 oUec1@val))) (set! oU27d3@oUb18@set-rib-sym*! oUb18@set-rib-sym*!) (set! oUb1a@rib-mark** (lambda (oUec4@x) (simple-struct-ref oUec4@x '1))) (set! oU27d4@oUb1a@rib-mark** oUb1a@rib-mark**) (set! oUb1c@set-rib-mark**! (lambda (oUec6@x oUec7@val) (simple-struct-set! oUec6@x '1 oUec7@val))) (set! oU27d5@oUb1c@set-rib-mark**! oUb1c@set-rib-mark**!) (set! oUb1e@rib-label* (lambda (oUeca@x) (simple-struct-ref oUeca@x '2))) (set! oU27d6@oUb1e@rib-label* oUb1e@rib-label*) (set! oUb20@set-rib-label*! (lambda (oUecc@x oUecd@val) (simple-struct-set! oUecc@x '2 oUecd@val))) (set! oU27d7@oUb20@set-rib-label*! oUb20@set-rib-label*!) (set! oUb22@rib-sealed/freq (lambda (oUed0@x) (simple-struct-ref oUed0@x '3))) (set! oU27d8@oUb22@rib-sealed/freq oUb22@rib-sealed/freq) (set! oUb24@set-rib-sealed/freq! (lambda (oUed2@x oUed3@val) (simple-struct-set! oUed2@x '3 oUed3@val))) (set! oU27d9@oUb24@set-rib-sealed/freq! oUb24@set-rib-sealed/freq!) (set! oUb26@rib-cache (lambda (oUed6@x) (simple-struct-ref oUed6@x '4))) (set! oU27da@oUb26@rib-cache oUb26@rib-cache) (set! oUb28@set-rib-cache! (lambda (oUed8@x oUed9@val) (simple-struct-set! oUed8@x '4 oUed9@val))) (set! oU27db@oUb28@set-rib-cache! oUb28@set-rib-cache!) (set! oUb2a@dummy '3) (set! oU27dc@oUb2a@dummy oUb2a@dummy) (set! oUb2c@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! oU27dd@oUb2c@make-empty-rib oUb2c@make-empty-rib) (set! oUb2e@extend-rib! (lambda (oUedc@rib oUedd@id oUede@label) (let ((oUee3@find '#f)) (begin (set! oUee3@find (lambda (oUef0@sym oUef1@mark* oUef2@sym* oUef3@mark** oUef4@label*) (and (pair? oUef2@sym*) (if (and (eq? oUef0@sym (car oUef2@sym*)) (same-marks? oUef1@mark* (car oUef3@mark**))) oUef4@label* (oUee3@find oUef0@sym oUef1@mark* (cdr oUef2@sym*) (cdr oUef3@mark**) (cdr oUef4@label*)))))) (begin (if (oUb22@rib-sealed/freq oUedc@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" oUedc@rib) (void)) (let ((oUee4@sym (oUb7a@id->sym oUedd@id)) (oUee5@mark* (oUb4a@stx-mark* oUedd@id))) (let ((oUee8@sym* (oUb16@rib-sym* oUedc@rib))) (let ((oUeea@t (and (memq oUee4@sym (oUb16@rib-sym* oUedc@rib)) (oUee3@find oUee4@sym oUee5@mark* oUee8@sym* (oUb1a@rib-mark** oUedc@rib) (oUb1e@rib-label* oUedc@rib))))) (if oUeea@t ((lambda (oUeec@p) (if (not (eq? oUede@label (car oUeec@p))) (if (oUe6f@top-level-context) (set-car! oUeec@p oUede@label) (oUe5f@syntax-violation '#f '"multiple definitions of identifier" oUedd@id)) (void))) oUeea@t) (begin (if (oUb26@rib-cache oUedc@rib) (hashtable-update! (oUb26@rib-cache oUedc@rib) oUee4@sym (lambda (oUeee@e) (cons (cons oUee5@mark* oUede@label) oUeee@e)) '()) (void)) (oUb18@set-rib-sym*! oUedc@rib (cons oUee4@sym oUee8@sym*)) (oUb1c@set-rib-mark**! oUedc@rib (cons oUee5@mark* (oUb1a@rib-mark** oUedc@rib))) (oUb20@set-rib-label*! oUedc@rib (cons oUede@label (oUb1e@rib-label* oUedc@rib))))))))))))) (set! oU27de@oUb2e@extend-rib! oUb2e@extend-rib!) (set! oUb30@extend-rib/nc! (lambda (oUefa@rib oUefb@id oUefc@label) (let ((oUf00@sym (oUb7a@id->sym oUefb@id)) (oUf01@mark* (oUb4a@stx-mark* oUefb@id))) (let ((oUf04@sym* (oUb16@rib-sym* oUefa@rib))) (begin (if (oUb26@rib-cache oUefa@rib) (hashtable-update! (oUb26@rib-cache oUefa@rib) oUf00@sym (lambda (oUf06@e) (cons (cons oUf01@mark* oUefc@label) oUf06@e)) '()) (void)) (oUb18@set-rib-sym*! oUefa@rib (cons oUf00@sym oUf04@sym*)) (oUb1c@set-rib-mark**! oUefa@rib (cons oUf01@mark* (oUb1a@rib-mark** oUefa@rib))) (oUb20@set-rib-label*! oUefa@rib (cons oUefc@label (oUb1e@rib-label* oUefa@rib)))))))) (set! oU27df@oUb30@extend-rib/nc! oUb30@extend-rib/nc!) (set! oUb32@make-rib-map (lambda (oUf08@sym*) (let ((oUf0a@ht (make-eq-hashtable))) (let oUf10@f ((oUf0c@i '0) (oUf0d@sym* oUf08@sym*)) (if (null? oUf0d@sym*) oUf0a@ht (begin (hashtable-update! oUf0a@ht (car oUf0d@sym*) (lambda (oUf12@x) (cons oUf0c@i oUf12@x)) '()) (oUf10@f (+ oUf0c@i '1) (cdr oUf0d@sym*)))))))) (set! oU27e0@oUb32@make-rib-map oUb32@make-rib-map) (set! oUb34@seal-rib! (lambda (oUf14@rib) (let ((oUf16@sym* (oUb16@rib-sym* oUf14@rib))) (if (not (null? oUf16@sym*)) (begin (oUb18@set-rib-sym*! oUf14@rib (list->vector oUf16@sym*)) (oUb1c@set-rib-mark**! oUf14@rib (list->vector (oUb1a@rib-mark** oUf14@rib))) (oUb20@set-rib-label*! oUf14@rib (list->vector (oUb1e@rib-label* oUf14@rib))) (oUb24@set-rib-sealed/freq! oUf14@rib (oUb32@make-rib-map oUf16@sym*))) (void))))) (set! oU27e1@oUb34@seal-rib! oUb34@seal-rib!) (set! oUb36@unseal-rib! (lambda (oUf18@rib) (if (oUb22@rib-sealed/freq oUf18@rib) (begin (oUb24@set-rib-sealed/freq! oUf18@rib '#f) (oUb18@set-rib-sym*! oUf18@rib (vector->list (oUb16@rib-sym* oUf18@rib))) (oUb1c@set-rib-mark**! oUf18@rib (vector->list (oUb1a@rib-mark** oUf18@rib))) (oUb20@set-rib-label*! oUf18@rib (vector->list (oUb1e@rib-label* oUf18@rib)))) (void)))) (set! oU27e2@oUb36@unseal-rib! oUb36@unseal-rib!) (set! oUb38@make-full-rib (lambda (oUf1a@id* oUf1b@label*) (let ((oUf1e@r (make-simple-struct 'rib '6 (list (map oUb7a@id->sym oUf1a@id*) (map oUb4a@stx-mark* oUf1a@id*) oUf1b@label* '#f '#f)))) (begin (oUb34@seal-rib! oUf1e@r) oUf1e@r)))) (set! oU27e3@oUb38@make-full-rib oUb38@make-full-rib) (set! oUb3a@rp (oU6bf@oU59b@make-record-printer 'stx (lambda (oUf20@x oUf21@p oUf22@wr) (begin (display '"#<syntax " oUf21@p) (write (oUb8c@stx->datum oUf20@x) oUf21@p) (let ((oUf26@expr (oUb46@stx-expr oUf20@x))) (if (oU6b7@oU58b@annotation? oUf26@expr) (let ((oUf28@src (oU6b8@oU58d@annotation-source oUf26@expr))) (if (pair? oUf28@src) (begin (display '" [" oUf21@p) (display (cdr oUf28@src) oUf21@p) (display '" of " oUf21@p) (display (car oUf28@src) oUf21@p) (display '"]" oUf21@p)) (void))) (void))) (display '">" oUf21@p))))) (set! oU27e4@oUb3a@rp oUb3a@rp) (set! oUb44@stx? (lambda (oUf2a@x) (and (simple-struct? oUf2a@x) (eq? (simple-struct-name oUf2a@x) 'stx)))) (set! oU27e5@oUb44@stx? oUb44@stx?) (set! oUb46@stx-expr (lambda (oUf2c@x) (simple-struct-ref oUf2c@x '0))) (set! oU27e6@oUb46@stx-expr oUb46@stx-expr) (set! oUb48@set-stx-expr! (lambda (oUf2e@x oUf2f@val) (simple-struct-set! oUf2e@x '0 oUf2f@val))) (set! oU27e7@oUb48@set-stx-expr! oUb48@set-stx-expr!) (set! oUb4a@stx-mark* (lambda (oUf32@x) (simple-struct-ref oUf32@x '1))) (set! oU27e8@oUb4a@stx-mark* oUb4a@stx-mark*) (set! oUb4c@set-stx-mark*! (lambda (oUf34@x oUf35@val) (simple-struct-set! oUf34@x '1 oUf35@val))) (set! oU27e9@oUb4c@set-stx-mark*! oUb4c@set-stx-mark*!) (set! oUb4e@stx-subst* (lambda (oUf38@x) (simple-struct-ref oUf38@x '2))) (set! oU27ea@oUb4e@stx-subst* oUb4e@stx-subst*) (set! oUb50@set-stx-subst*! (lambda (oUf3a@x oUf3b@val) (simple-struct-set! oUf3a@x '2 oUf3b@val))) (set! oU27eb@oUb50@set-stx-subst*! oUb50@set-stx-subst*!) (set! oUb52@stx-ae* (lambda (oUf3e@x) (simple-struct-ref oUf3e@x '3))) (set! oU27ec@oUb52@stx-ae* oUb52@stx-ae*) (set! oUb54@set-stx-ae*! (lambda (oUf40@x oUf41@val) (simple-struct-set! oUf40@x '3 oUf41@val))) (set! oU27ed@oUb54@set-stx-ae*! oUb54@set-stx-ae*!) (set! oUb56@dummy '3) (set! oU27ee@oUb56@dummy oUb56@dummy) (set! oUb58@datum->stx (lambda (oUf44@id oUf45@datum) (make-simple-struct 'stx '5 (list oUf45@datum (oUb4a@stx-mark* oUf44@id) (oUb4e@stx-subst* oUf44@id) (oUb52@stx-ae* oUf44@id))))) (set! oU27ef@oUb58@datum->stx oUb58@datum->stx) (set! oUb5a@gen-mark (lambda () (string '#\m))) (set! oU27f0@oUb5a@gen-mark oUb5a@gen-mark) (set! oUb5c@anti-mark '#f) (set! oU27f1@oUb5c@anti-mark oUb5c@anti-mark) (set! oUb5e@anti-mark? not) (set! oU27f2@oUb5e@anti-mark? oUb5e@anti-mark?) (set! oUb60@mkstx (lambda (oUf48@e oUf49@m* oUf4a@s* oUf4b@ae*) (if (and (oUb44@stx? oUf48@e) (not (oUafe@top-marked? oUf49@m*))) (call-with-values (lambda () (join-wraps oUf49@m* oUf4a@s* oUf4b@ae* oUf48@e)) (lambda (oUf56@oUf51 oUf57@oUf53 oUf58@oUf55) (let ((oUf5c@ae* oUf58@oUf55) (oUf5d@s* oUf57@oUf53) (oUf5e@m* oUf56@oUf51)) (make-simple-struct 'stx '5 (list (oUb46@stx-expr oUf48@e) oUf5e@m* oUf5d@s* oUf5c@ae*))))) (make-simple-struct 'stx '5 (list oUf48@e oUf49@m* oUf4a@s* oUf4b@ae*))))) (set! oU27f3@oUb60@mkstx oUb60@mkstx) (set! oUb62@add-mark (lambda (oUf62@m oUf63@e oUf64@ae) (oUb60@mkstx oUf63@e (list oUf62@m) '(shift) (list oUf64@ae)))) (set! oU27f4@oUb62@add-mark oUb62@add-mark) (set! oUb64@add-subst (lambda (oUf68@subst oUf69@e) (oUb60@mkstx oUf69@e '() (list oUf68@subst) '()))) (set! oU27f5@oUb64@add-subst oUb64@add-subst) (set! oUb66@syntax-kind? (lambda (oUf6c@x oUf6d@p?) (if (oUb44@stx? oUf6c@x) (oUb66@syntax-kind? (oUb46@stx-expr oUf6c@x) oUf6d@p?) (if (oU6b7@oU58b@annotation? oUf6c@x) (oUb66@syntax-kind? (oU6b9@oU58f@annotation-expression oUf6c@x) oUf6d@p?) (oUf6d@p? oUf6c@x))))) (set! oU27f6@oUb66@syntax-kind? oUb66@syntax-kind?) (set! oUb68@syntax-vector->list (lambda (oUf70@x) (if (oUb44@stx? oUf70@x) (let ((oUf72@ls (oUb68@syntax-vector->list (oUb46@stx-expr oUf70@x))) (oUf73@m* (oUb4a@stx-mark* oUf70@x)) (oUf74@s* (oUb4e@stx-subst* oUf70@x)) (oUf75@ae* (oUb52@stx-ae* oUf70@x))) (map (lambda (oUf7a@x) (oUb60@mkstx oUf7a@x oUf73@m* oUf74@s* oUf75@ae*)) oUf72@ls)) (if (oU6b7@oU58b@annotation? oUf70@x) (oUb68@syntax-vector->list (oU6b9@oU58f@annotation-expression oUf70@x)) (if (vector? oUf70@x) (vector->list oUf70@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" oUf70@x)))))) (set! oU27f7@oUb68@syntax-vector->list oUb68@syntax-vector->list) (set! oUb6a@syntax-pair? (lambda (oUf7c@x) (oUb66@syntax-kind? oUf7c@x pair?))) (set! oU27f8@oUb6a@syntax-pair? oUb6a@syntax-pair?) (set! oUb6c@syntax-vector? (lambda (oUf7e@x) (oUb66@syntax-kind? oUf7e@x vector?))) (set! oU27f9@oUb6c@syntax-vector? oUb6c@syntax-vector?) (set! oUb6e@syntax-null? (lambda (oUf80@x) (oUb66@syntax-kind? oUf80@x null?))) (set! oU27fa@oUb6e@syntax-null? oUb6e@syntax-null?) (set! oUb70@syntax-list? (lambda (oUf82@x) (or (oUb6e@syntax-null? oUf82@x) (and (oUb6a@syntax-pair? oUf82@x) (oUb70@syntax-list? (oUb74@syntax-cdr oUf82@x)))))) (set! oU27fb@oUb70@syntax-list? oUb70@syntax-list?) (set! oUb72@syntax-car (lambda (oUf84@x) (if (oUb44@stx? oUf84@x) (oUb60@mkstx (oUb72@syntax-car (oUb46@stx-expr oUf84@x)) (oUb4a@stx-mark* oUf84@x) (oUb4e@stx-subst* oUf84@x) (oUb52@stx-ae* oUf84@x)) (if (oU6b7@oU58b@annotation? oUf84@x) (oUb72@syntax-car (oU6b9@oU58f@annotation-expression oUf84@x)) (if (pair? oUf84@x) (car oUf84@x) (assertion-violation 'syntax-car '"BUG: not a pair" oUf84@x)))))) (set! oU27fc@oUb72@syntax-car oUb72@syntax-car) (set! oUb74@syntax-cdr (lambda (oUf86@x) (if (oUb44@stx? oUf86@x) (oUb60@mkstx (oUb74@syntax-cdr (oUb46@stx-expr oUf86@x)) (oUb4a@stx-mark* oUf86@x) (oUb4e@stx-subst* oUf86@x) (oUb52@stx-ae* oUf86@x)) (if (oU6b7@oU58b@annotation? oUf86@x) (oUb74@syntax-cdr (oU6b9@oU58f@annotation-expression oUf86@x)) (if (pair? oUf86@x) (cdr oUf86@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" oUf86@x)))))) (set! oU27fd@oUb74@syntax-cdr oUb74@syntax-cdr) (set! oUb76@syntax->list (lambda (oUf88@x) (if (oUb6a@syntax-pair? oUf88@x) (cons (oUb72@syntax-car oUf88@x) (oUb76@syntax->list (oUb74@syntax-cdr oUf88@x))) (if (oUb6e@syntax-null? oUf88@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" oUf88@x))))) (set! oU27fe@oUb76@syntax->list oUb76@syntax->list) (set! oUb78@id? (lambda (oUf8a@x) (and (oUb44@stx? oUf8a@x) (symbol? (oUb46@stx-expr oUf8a@x))))) (set! oU27ff@oUb78@id? oUb78@id?) (set! oUb7a@id->sym (lambda (oUf8c@x) (oUb46@stx-expr oUf8c@x))) (set! oU2800@oUb7a@id->sym oUb7a@id->sym) (set! oUb7c@bound-id=? (lambda (oUf8e@x oUf8f@y) (and (eq? (oUb7a@id->sym oUf8e@x) (oUb7a@id->sym oUf8f@y)) (same-marks? (oUb4a@stx-mark* oUf8e@x) (oUb4a@stx-mark* oUf8f@y))))) (set! oU2801@oUb7c@bound-id=? oUb7c@bound-id=?) (set! oUb7e@free-id=? (lambda (oUf92@i oUf93@j) (let ((oUf96@t0 (id->real-label oUf92@i)) (oUf97@t1 (id->real-label oUf93@j))) (if (or oUf96@t0 oUf97@t1) (eq? oUf96@t0 oUf97@t1) (eq? (oUb7a@id->sym oUf92@i) (oUb7a@id->sym oUf93@j)))))) (set! oU2802@oUb7e@free-id=? oUb7e@free-id=?) (set! oUb80@valid-bound-ids? (lambda (oUf9a@id*) (and (for-all oUb78@id? oUf9a@id*) (oUb82@distinct-bound-ids? oUf9a@id*)))) (set! oU2803@oUb80@valid-bound-ids? oUb80@valid-bound-ids?) (set! oUb82@distinct-bound-ids? (lambda (oUf9c@id*) (or (null? oUf9c@id*) (and (not (oUb84@bound-id-member? (car oUf9c@id*) (cdr oUf9c@id*))) (oUb82@distinct-bound-ids? (cdr oUf9c@id*)))))) (set! oU2804@oUb82@distinct-bound-ids? oUb82@distinct-bound-ids?) (set! oUb84@bound-id-member? (lambda (oUf9e@id oUf9f@id*) (and (pair? oUf9f@id*) (or (oUb7c@bound-id=? oUf9e@id (car oUf9f@id*)) (oUb84@bound-id-member? oUf9e@id (cdr oUf9f@id*)))))) (set! oU2805@oUb84@bound-id-member? oUb84@bound-id-member?) (set! oUb86@self-evaluating? (lambda (oUfa2@x) (or (number? oUfa2@x) (string? oUfa2@x) (char? oUfa2@x) (boolean? oUfa2@x) (regexp? oUfa2@x) (bytevector? oUfa2@x)))) (set! oU2806@oUb86@self-evaluating? oUb86@self-evaluating?) (set! oUb88@strip-annotations (lambda (oUfa4@x) (if (pair? oUfa4@x) (cons (oUb88@strip-annotations (car oUfa4@x)) (oUb88@strip-annotations (cdr oUfa4@x))) (if (vector? oUfa4@x) (vector-map oUb88@strip-annotations oUfa4@x) (if (oU6b7@oU58b@annotation? oUfa4@x) (oU6b6@oU589@annotation-stripped oUfa4@x) oUfa4@x))))) (set! oU2807@oUb88@strip-annotations oUb88@strip-annotations) (set! oUb8a@strip (lambda (oUfa6@x oUfa7@m*) (if (oUafe@top-marked? oUfa7@m*) (if (or (oU6b7@oU58b@annotation? oUfa6@x) (and (pair? oUfa6@x) (oU6b7@oU58b@annotation? (car oUfa6@x))) (and (vector? oUfa6@x) (> (vector-length oUfa6@x) '0) (oU6b7@oU58b@annotation? (vector-ref oUfa6@x '0)))) (oUb88@strip-annotations oUfa6@x) oUfa6@x) (let oUfac@f ((oUfaa@x oUfa6@x)) (if (oUb44@stx? oUfaa@x) (oUb8a@strip (oUb46@stx-expr oUfaa@x) (oUb4a@stx-mark* oUfaa@x)) (if (oU6b7@oU58b@annotation? oUfaa@x) (oU6b6@oU589@annotation-stripped oUfaa@x) (if (pair? oUfaa@x) (let ((oUfae@a (oUfac@f (car oUfaa@x))) (oUfaf@d (oUfac@f (cdr oUfaa@x)))) (if (and (eq? oUfae@a (car oUfaa@x)) (eq? oUfaf@d (cdr oUfaa@x))) oUfaa@x (cons oUfae@a oUfaf@d))) (if (vector? oUfaa@x) (let ((oUfb2@old (vector->list oUfaa@x))) (let ((oUfb4@new (map oUfac@f oUfb2@old))) (if (for-all eq? oUfb2@old oUfb4@new) oUfaa@x (list->vector oUfb4@new)))) oUfaa@x)))))))) (set! oU2808@oUb8a@strip oUb8a@strip) (set! oUb8c@stx->datum (lambda (oUfb6@x) (oUb8a@strip oUfb6@x '()))) (set! oU2809@oUb8c@stx->datum oUb8c@stx->datum) (set! oUb8e@id->label (lambda (oUfb8@id) (or (id->real-label oUfb8@id) (let ((oUfba@t (oUe6f@top-level-context))) (if oUfba@t ((lambda (oUfbc@env) (let ((oUfbe@rib (oUe1f@interaction-env-rib oUfbc@env))) (call-with-values (lambda () (oUb08@gen-define-label+loc oUfb8@id oUfbe@rib)) (lambda (oUfc4@oUfc1 oUfc5@oUfc3) (let ((oUfc8@loc_ oUfc5@oUfc3) (oUfc9@lab oUfc4@oUfc1)) (begin (oUb2e@extend-rib! oUfbe@rib oUfb8@id oUfc9@lab) oUfc9@lab)))))) oUfba@t) '#f))))) (set! oU280a@oUb8e@id->label oUb8e@id->label) (set! oUb90@label->binding (lambda (oUfcc@x oUfcd@r) (let ((oUfd0@t (oU98d@oU7da@imported-label->binding oUfcc@x))) (if oUfd0@t ((lambda (oUfd2@b) (if (and (pair? oUfd2@b) (eq? (car oUfd2@b) '$core-rtd)) (cons '$rtd (map oUd35@bless (cdr oUfd2@b))) (if (and (pair? oUfd2@b) (eq? (car oUfd2@b) 'global-rtd)) (let ((oUfd4@lib (cadr oUfd2@b)) (oUfd5@loc (cddr oUfd2@b))) (cons '$rtd (symbol-value oUfd5@loc))) oUfd2@b))) oUfd0@t) (let ((oUfd8@t (assq oUfcc@x oUfcd@r))) (if oUfd8@t (cdr oUfd8@t) (let ((oUfda@t (oUe6f@top-level-context))) (if oUfda@t ((lambda (oUfdc@env) (let ((oUfde@t (assq oUfcc@x (oUe27@interaction-env-locs oUfdc@env)))) (if oUfde@t ((lambda (oUfe0@p) (cons* 'lexical (cdr oUfe0@p) '#f)) oUfde@t) '(displaced-lexical . #f)))) oUfda@t) '(displaced-lexical . #f))))))))) (set! oU280b@oUb90@label->binding oUb90@label->binding) (set! oUb92@make-binding cons) (set! oU280c@oUb92@make-binding oUb92@make-binding) (set! oUb94@binding-type car) (set! oU280d@oUb94@binding-type oUb94@binding-type) (set! oUb96@binding-value cdr) (set! oU280e@oUb96@binding-value oUb96@binding-value) (set! oUb98@raise-unbound-error (lambda (oUfe2@id) (oUe5d@syntax-violation* '#f '"unbound identifier" oUfe2@id (oU2c04@oU2a4a@make-undefined-violation)))) (set! oU280f@oUb98@raise-unbound-error oUb98@raise-unbound-error) (set! oUb9a@syntax-type (lambda (oUfe4@e oUfe5@r) (if (oUb78@id? oUfe4@e) (let ((oUfe8@id oUfe4@e)) (let ((oUfea@label (oUb8e@id->label oUfe8@id))) (let ((oUfec@b (oUb90@label->binding oUfea@label oUfe5@r))) (let ((oUfee@type (oUb94@binding-type oUfec@b))) (begin (if (not oUfea@label) (oUb98@raise-unbound-error oUfe8@id) (void)) (let ((oUff0@t oUfee@type)) (if (memv oUff0@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values oUfee@type (oUb96@binding-value oUfec@b) oUfe8@id) (values 'other '#f '#f)))))))) (if (oUb6a@syntax-pair? oUfe4@e) (let ((oUff2@id (oUb72@syntax-car oUfe4@e))) (if (oUb78@id? oUff2@id) (let ((oUff4@label (oUb8e@id->label oUff2@id))) (let ((oUff6@b (oUb90@label->binding oUff4@label oUfe5@r))) (let ((oUff8@type (oUb94@binding-type oUff6@b))) (begin (if (not oUff4@label) (oUb98@raise-unbound-error oUff2@id) (void)) (let ((oUffa@t oUff8@type)) (if (memv oUffa@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values oUff8@type (oUb96@binding-value oUff6@b) oUff2@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((oUffc@d (oUb8c@stx->datum oUfe4@e))) (if (oUb86@self-evaluating? oUffc@d) (values 'constant oUffc@d '#f) (values 'other '#f '#f))))))) (set! oU2810@oUb9a@syntax-type oUb9a@syntax-type) (set! oUba8@sanitize-binding (lambda (oUffe@x oUfff@src) (if (procedure? oUffe@x) (cons* 'local-macro oUffe@x oUfff@src) (if (and (pair? oUffe@x) (eq? (car oUffe@x) 'macro!) (procedure? (cdr oUffe@x))) (cons* 'local-macro! (cdr oUffe@x) oUfff@src) (if (and (pair? oUffe@x) (eq? (car oUffe@x) '$rtd)) oUffe@x (assertion-violation 'expand '"invalid transformer" oUffe@x)))))) (set! oU2811@oUba8@sanitize-binding oUba8@sanitize-binding) (set! oUbaa@make-variable-transformer (lambda (oU1002@x) (if (procedure? oU1002@x) (cons 'macro! oU1002@x) (assertion-violation 'make-variable-transformer '"not a procedure" oU1002@x)))) (set! oU2812@oUbaa@make-variable-transformer oUbaa@make-variable-transformer) (set! oUbac@variable-transformer? (lambda (oU1004@x) (and (pair? oU1004@x) (eq? (car oU1004@x) 'macro!) (procedure? (cdr oU1004@x))))) (set! oU2813@oUbac@variable-transformer? oUbac@variable-transformer?) (set! oUbae@variable-transformer-procedure (lambda (oU1006@x) (if (oUbac@variable-transformer? oU1006@x) (cdr oU1006@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" oU1006@x)))) (set! oU2814@oUbae@variable-transformer-procedure oUbae@variable-transformer-procedure) (set! oUbb0@make-eval-transformer (lambda (oU1008@x) (oUba8@sanitize-binding (eval-core (oU718@oU6d0@expanded->core oU1008@x)) oU1008@x))) (set! oU2815@oUbb0@make-eval-transformer oUbb0@make-eval-transformer) (set! oUd01@parse-define (lambda (oU100a@x) (let ((oU100c@t oU100a@x)) (let ((oU100e@ls/false (oUd7f@syntax-dispatch oU100c@t '(_ (any . any) any . each-any)))) (if (and oU100e@ls/false (apply (lambda (oU1010@id oU1011@fmls oU1012@b oU1013@b*) (oUb78@id? oU1010@id)) oU100e@ls/false)) (apply (lambda (oU1018@id oU1019@fmls oU101a@b oU101b@b*) (begin (oUda5@verify-formals oU1019@fmls oU100a@x) (values oU1018@id (cons 'defun (cons oU1019@fmls (cons oU101a@b oU101b@b*)))))) oU100e@ls/false) (let ((oU1020@t oU100c@t)) (let ((oU1022@ls/false (oUd7f@syntax-dispatch oU1020@t '(_ any any)))) (if (and oU1022@ls/false (apply (lambda (oU1024@id oU1025@val) (oUb78@id? oU1024@id)) oU1022@ls/false)) (apply (lambda (oU1028@id oU1029@val) (values oU1028@id (cons 'expr oU1029@val))) oU1022@ls/false) (let ((oU102c@t oU1020@t)) (let ((oU102e@ls/false (oUd7f@syntax-dispatch oU102c@t '(_ any)))) (if (and oU102e@ls/false (apply (lambda (oU1030@id) (oUb78@id? oU1030@id)) oU102e@ls/false)) (apply (lambda (oU1032@id) (values oU1032@id (cons 'expr (oUd35@bless '(void))))) oU102e@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU102c@t)))))))))))) (set! oU2816@oUd01@parse-define oUd01@parse-define) (set! oUd03@parse-define-syntax (lambda (oU1034@x) (let ((oU1036@t oU1034@x)) (let ((oU1038@ls/false (oUd7f@syntax-dispatch oU1036@t '(_ any any)))) (if (and oU1038@ls/false (apply (lambda (oU103a@id oU103b@val) (oUb78@id? oU103a@id)) oU1038@ls/false)) (apply (lambda (oU103e@id oU103f@val) (values oU103e@id oU103f@val)) oU1038@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1036@t)))))) (set! oU2817@oUd03@parse-define-syntax oUd03@parse-define-syntax) (set! oUd05@scheme-stx-hashtable (make-eq-hashtable)) (set! oU2818@oUd05@scheme-stx-hashtable oUd05@scheme-stx-hashtable) (set! oUd07@scheme-stx (lambda (oU1042@sym) (or (hashtable-ref oUd05@scheme-stx-hashtable oU1042@sym '#f) (let ((oU1044@subst (oU969@oU792@library-subst (oU987@oU7ce@find-library-by-name '(psyntax system $all))))) (let ((oU1046@stx (make-simple-struct 'stx '5 (list oU1042@sym oUafc@top-mark* '() '())))) (let ((oU1048@stx (let ((oU104a@t (assq oU1042@sym oU1044@subst))) (if oU104a@t ((lambda (oU104c@x) (let ((oU104e@name (car oU104c@x)) (oU104f@label (cdr oU104c@x))) (oUb64@add-subst (make-simple-struct 'rib '6 (list (list oU104e@name) (list oUafc@top-mark*) (list oU104f@label) '#f '#f)) oU1046@stx))) oU104a@t) oU1046@stx)))) (begin (hashtable-set! oUd05@scheme-stx-hashtable oU1042@sym oU1048@stx) oU1048@stx))))))) (set! oU2819@oUd07@scheme-stx oUd07@scheme-stx) (set! oUd09@lexical-var car) (set! oU281a@oUd09@lexical-var oUd09@lexical-var) (set! oUd0b@lexical-mutable? cdr) (set! oU281b@oUd0b@lexical-mutable? oUd0b@lexical-mutable?) (set! oUd0d@set-lexical-mutable! set-cdr!) (set! oU281c@oUd0d@set-lexical-mutable! oUd0d@set-lexical-mutable!) (set! oUd0f@add-lexical (lambda (oU1052@lab oU1053@lex oU1054@r) (cons (cons* oU1052@lab 'lexical oU1053@lex '#f) oU1054@r))) (set! oU281d@oUd0f@add-lexical oUd0f@add-lexical) (set! oUd11@add-lexicals (lambda (oU1058@lab* oU1059@lex* oU105a@r) (if (null? oU1058@lab*) oU105a@r (oUd11@add-lexicals (cdr oU1058@lab*) (cdr oU1059@lex*) (oUd0f@add-lexical (car oU1058@lab*) (car oU1059@lex*) oU105a@r))))) (set! oU281e@oUd11@add-lexicals oUd11@add-lexicals) (set! oUd13@letrec-helper (lambda (oU105e@e oU105f@r oU1060@mr oU1061@build) (let ((oU1066@t oU105e@e)) (let ((oU1068@ls/false (oUd7f@syntax-dispatch oU1066@t '(_ #(each (any any)) any . each-any)))) (if oU1068@ls/false (apply (lambda (oU106a@lhs* oU106b@rhs* oU106c@b oU106d@b*) (if (not (oUb80@valid-bound-ids? oU106a@lhs*)) (oUd39@invalid-fmls-error oU105e@e oU106a@lhs*) (let ((oU1072@lex* (map oUb00@gen-lexical oU106a@lhs*)) (oU1073@lab* (map oUb04@gen-label oU106a@lhs*))) (let ((oU1076@rib (oUb38@make-full-rib oU106a@lhs* oU1073@lab*)) (oU1077@r (oUd11@add-lexicals oU1073@lab* oU1072@lex* oU105f@r))) (let ((oU107a@body (oUdb7@chi-internal (oUb64@add-subst oU1076@rib (cons oU106c@b oU106d@b*)) oU1077@r oU1060@mr)) (oU107b@rhs* (oUd9d@chi-expr* (map (lambda (oU107e@x) (oUb64@add-subst oU1076@rib oU107e@x)) oU106b@rhs*) oU1077@r oU1060@mr))) (oU1061@build '#f oU1072@lex* oU107b@rhs* oU107a@body)))))) oU1068@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1066@t)))))) (set! oU281f@oUd13@letrec-helper oUd13@letrec-helper) (set! oUd15@let-transformer (lambda (oU1080@e oU1081@r oU1082@mr) (let ((oU1086@t oU1080@e)) (let ((oU1088@ls/false (oUd7f@syntax-dispatch oU1086@t '(_ #(each (any any)) any . each-any)))) (if oU1088@ls/false (apply (lambda (oU108a@lhs* oU108b@rhs* oU108c@b oU108d@b*) (if (not (oUb80@valid-bound-ids? oU108a@lhs*)) (oUd39@invalid-fmls-error oU1080@e oU108a@lhs*) (let ((oU1092@lex* (map oUb00@gen-lexical oU108a@lhs*)) (oU1093@lab* (map oUb04@gen-label oU108a@lhs*)) (oU1094@rhs* (oUd9d@chi-expr* oU108b@rhs* oU1081@r oU1082@mr))) (let ((oU1098@rib (oUb38@make-full-rib oU108a@lhs* oU1093@lab*)) (oU1099@r (oUd11@add-lexicals oU1093@lab* oU1092@lex* oU1081@r))) (let ((oU109c@body (oUdb7@chi-internal (oUb64@add-subst oU1098@rib (cons oU108c@b oU108d@b*)) oU1099@r oU1082@mr))) (oUae0@oUa3d@build-let '#f oU1092@lex* oU1094@rhs* oU109c@body)))))) oU1088@ls/false) (let ((oU109e@t oU1086@t)) (let ((oU10a0@ls/false (oUd7f@syntax-dispatch oU109e@t '(_ any #(each (any any)) any . each-any)))) (if oU10a0@ls/false (apply (lambda (oU10a2@loop oU10a3@lhs* oU10a4@rhs* oU10a5@b oU10a6@b*) (if (not (oUb80@valid-bound-ids? oU10a3@lhs*)) (oUd39@invalid-fmls-error oU1080@e oU10a3@lhs*) (let ((oU10ac@lex* (map oUb00@gen-lexical oU10a3@lhs*)) (oU10ad@lab* (map oUb04@gen-label oU10a3@lhs*)) (oU10ae@rhs* (oUd9d@chi-expr* oU10a4@rhs* oU1081@r oU1082@mr)) (oU10af@loop-lex (oUb00@gen-lexical oU10a2@loop)) (oU10b0@loop-lab (oUb04@gen-label oU10a2@loop))) (let ((oU10b6@loop-rib (oUb38@make-full-rib (list oU10a2@loop) (list oU10b0@loop-lab))) (oU10b7@rib (oUb38@make-full-rib oU10a3@lhs* oU10ad@lab*)) (oU10b8@r (oUd11@add-lexicals (cons oU10b0@loop-lab oU10ad@lab*) (cons oU10af@loop-lex oU10ac@lex*) oU1081@r))) (let ((oU10bc@body (oUdb7@chi-internal (oUb64@add-subst oU10b6@loop-rib (oUb64@add-subst oU10b7@rib (cons oU10a5@b oU10a6@b*))) oU10b8@r oU1082@mr))) (oUae1@oUa3f@build-named-let '#f oU10af@loop-lex oU10ac@lex* oU10ae@rhs* oU10bc@body)))))) oU10a0@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU109e@t))))))))) (set! oU2820@oUd15@let-transformer oUd15@let-transformer) (set! oUd17@letrec-transformer (lambda (oU10be@e oU10bf@r oU10c0@mr) (oUd13@letrec-helper oU10be@e oU10bf@r oU10c0@mr oUadf@oUa3b@build-letrec))) (set! oU2821@oUd17@letrec-transformer oUd17@letrec-transformer) (set! oUd19@letrec*-transformer (lambda (oU10c4@e oU10c5@r oU10c6@mr) (oUd13@letrec-helper oU10c4@e oU10c5@r oU10c6@mr oUae2@oUa41@build-letrec*))) (set! oU2822@oUd19@letrec*-transformer oUd19@letrec*-transformer) (set! oUd1b@fluid-let-syntax-transformer (lambda (oU10ca@e oU10cb@r oU10cc@mr) (let ((oU10d1@lookup '#f)) (begin (set! oU10d1@lookup (lambda (oU10e4@x) (or (oUb8e@id->label oU10e4@x) (oUe5f@syntax-violation '#f '"unbound identifier" oU10ca@e oU10e4@x)))) (let ((oU10d2@t oU10ca@e)) (let ((oU10d4@ls/false (oUd7f@syntax-dispatch oU10d2@t '(_ #(each (any any)) any . each-any)))) (if oU10d4@ls/false (apply (lambda (oU10d6@lhs* oU10d7@rhs* oU10d8@b oU10d9@b*) (if (not (oUb80@valid-bound-ids? oU10d6@lhs*)) (oUd39@invalid-fmls-error oU10ca@e oU10d6@lhs*) (let ((oU10de@lab* (map oU10d1@lookup oU10d6@lhs*)) (oU10df@rhs* (map (lambda (oU10e2@x) (oUbb0@make-eval-transformer (oUdd9@expand-transformer oU10e2@x oU10cc@mr))) oU10d7@rhs*))) (oUdb7@chi-internal (cons oU10d8@b oU10d9@b*) (append (map cons oU10de@lab* oU10df@rhs*) oU10cb@r) (append (map cons oU10de@lab* oU10df@rhs*) oU10cc@mr))))) oU10d4@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU10d2@t)))))))) (set! oU2823@oUd1b@fluid-let-syntax-transformer oUd1b@fluid-let-syntax-transformer) (set! oUd1d@type-descriptor-transformer (lambda (oU10e6@e oU10e7@r oU10e8@mr) (let ((oU10ec@t oU10e6@e)) (let ((oU10ee@ls/false (oUd7f@syntax-dispatch oU10ec@t '(_ any)))) (if (and oU10ee@ls/false (apply (lambda (oU10f0@id) (oUb78@id? oU10f0@id)) oU10ee@ls/false)) (apply (lambda (oU10f2@id) (let ((oU10f4@lab (oUb8e@id->label oU10f2@id))) (let ((oU10f6@b (oUb90@label->binding oU10f4@lab oU10e7@r))) (let ((oU10f8@type (oUb94@binding-type oU10f6@b))) (begin (if (not oU10f4@lab) (oUb98@raise-unbound-error oU10f2@id) (void)) (if (not (and (eq? oU10f8@type '$rtd) (not (list? (oUb96@binding-value oU10f6@b))))) (oUe5f@syntax-violation '#f '"not a record type" oU10e6@e) (void)) (list 'quote (oUb96@binding-value oU10f6@b))))))) oU10ee@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU10ec@t)))))) (set! oU2824@oUd1d@type-descriptor-transformer oUd1d@type-descriptor-transformer) (set! oUd1f@record-type-descriptor-transformer (lambda (oU10fa@e oU10fb@r oU10fc@mr) (let ((oU1100@t oU10fa@e)) (let ((oU1102@ls/false (oUd7f@syntax-dispatch oU1100@t '(_ any)))) (if (and oU1102@ls/false (apply (lambda (oU1104@id) (oUb78@id? oU1104@id)) oU1102@ls/false)) (apply (lambda (oU1106@id) (let ((oU1108@lab (oUb8e@id->label oU1106@id))) (let ((oU110a@b (oUb90@label->binding oU1108@lab oU10fb@r))) (let ((oU110c@type (oUb94@binding-type oU110a@b))) (begin (if (not oU1108@lab) (oUb98@raise-unbound-error oU1106@id) (void)) (if (not (and (eq? oU110c@type '$rtd) (list? (oUb96@binding-value oU110a@b)))) (oUe5f@syntax-violation '#f '"not a record type" oU10fa@e) (void)) (oUda1@chi-expr (car (oUb96@binding-value oU110a@b)) oU10fb@r oU10fc@mr)))))) oU1102@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1100@t)))))) (set! oU2825@oUd1f@record-type-descriptor-transformer oUd1f@record-type-descriptor-transformer) (set! oUd21@record-constructor-descriptor-transformer (lambda (oU110e@e oU110f@r oU1110@mr) (let ((oU1114@t oU110e@e)) (let ((oU1116@ls/false (oUd7f@syntax-dispatch oU1114@t '(_ any)))) (if (and oU1116@ls/false (apply (lambda (oU1118@id) (oUb78@id? oU1118@id)) oU1116@ls/false)) (apply (lambda (oU111a@id) (let ((oU111c@lab (oUb8e@id->label oU111a@id))) (let ((oU111e@b (oUb90@label->binding oU111c@lab oU110f@r))) (let ((oU1120@type (oUb94@binding-type oU111e@b))) (begin (if (not oU111c@lab) (oUb98@raise-unbound-error oU111a@id) (void)) (if (not (and (eq? oU1120@type '$rtd) (list? (oUb96@binding-value oU111e@b)))) (oUe5f@syntax-violation '#f '"invalid type" oU110e@e) (void)) (oUda1@chi-expr (cadr (oUb96@binding-value oU111e@b)) oU110f@r oU1110@mr)))))) oU1116@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1114@t)))))) (set! oU2826@oUd21@record-constructor-descriptor-transformer oUd21@record-constructor-descriptor-transformer) (set! oUd23@when-macro (lambda (oU1122@e) (let ((oU1124@t oU1122@e)) (let ((oU1126@ls/false (oUd7f@syntax-dispatch oU1124@t '(_ any any . each-any)))) (if oU1126@ls/false (apply (lambda (oU1128@test oU1129@e oU112a@e*) (oUd35@bless (list 'if oU1128@test (cons 'begin (cons oU1129@e oU112a@e*))))) oU1126@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1124@t)))))) (set! oU2827@oUd23@when-macro oUd23@when-macro) (set! oUd25@unless-macro (lambda (oU112e@e) (let ((oU1130@t oU112e@e)) (let ((oU1132@ls/false (oUd7f@syntax-dispatch oU1130@t '(_ any any . each-any)))) (if oU1132@ls/false (apply (lambda (oU1134@test oU1135@e oU1136@e*) (oUd35@bless (list 'if (list 'not oU1134@test) (cons 'begin (cons oU1135@e oU1136@e*))))) oU1132@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1130@t)))))) (set! oU2828@oUd25@unless-macro oUd25@unless-macro) (set! oUd27@if-transformer (lambda (oU113a@e oU113b@r oU113c@mr) (let ((oU1140@t oU113a@e)) (let ((oU1142@ls/false (oUd7f@syntax-dispatch oU1140@t '(_ any any any)))) (if oU1142@ls/false (apply (lambda (oU1144@e0 oU1145@e1 oU1146@e2) (list 'if (oUda1@chi-expr oU1144@e0 oU113b@r oU113c@mr) (oUda1@chi-expr oU1145@e1 oU113b@r oU113c@mr) (oUda1@chi-expr oU1146@e2 oU113b@r oU113c@mr))) oU1142@ls/false) (let ((oU114a@t oU1140@t)) (let ((oU114c@ls/false (oUd7f@syntax-dispatch oU114a@t '(_ any any)))) (if oU114c@ls/false (apply (lambda (oU114e@e0 oU114f@e1) (list 'if (oUda1@chi-expr oU114e@e0 oU113b@r oU113c@mr) (oUda1@chi-expr oU114f@e1 oU113b@r oU113c@mr) (oUade@oUa39@build-void))) oU114c@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU114a@t))))))))) (set! oU2829@oUd27@if-transformer oUd27@if-transformer) (set! oUd29@and-transformer (lambda (oU1152@e oU1153@r oU1154@mr) (let ((oU1158@t oU1152@e)) (let ((oU115a@ls/false (oUd7f@syntax-dispatch oU1158@t '(_ . each-any)))) (if oU115a@ls/false (apply (lambda (oU115c@e*) (cons 'and (oUd9d@chi-expr* oU115c@e* oU1153@r oU1154@mr))) oU115a@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1158@t)))))) (set! oU282a@oUd29@and-transformer oUd29@and-transformer) (set! oUd2b@or-transformer (lambda (oU115e@e oU115f@r oU1160@mr) (let ((oU1164@t oU115e@e)) (let ((oU1166@ls/false (oUd7f@syntax-dispatch oU1164@t '(_ . each-any)))) (if oU1166@ls/false (apply (lambda (oU1168@e*) (cons 'or (oUd9d@chi-expr* oU1168@e* oU115f@r oU1160@mr))) oU1166@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1164@t)))))) (set! oU282b@oUd2b@or-transformer oUd2b@or-transformer) (set! oUd2d@case-macro (lambda (oU116a@e) (let ((oU116d@build-last '#f) (oU116f@build-one '#f)) (begin (set! oU116d@build-last (lambda (oU1194@cls) (let ((oU1196@t oU1194@cls)) (let ((oU1198@ls/false (oUd7f@syntax-dispatch oU1196@t '(#(scheme-id else) any . each-any)))) (if oU1198@ls/false (apply (lambda (oU119a@e oU119b@e*) (cons 'begin (cons oU119a@e oU119b@e*))) oU1198@ls/false) (let ((oU119e@t oU1196@t)) (let ((oU11a0@ls/false (oUd7f@syntax-dispatch oU119e@t '_))) (if oU11a0@ls/false (apply (lambda () (oU116f@build-one oU1194@cls '(if #f #f))) oU11a0@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU119e@t))))))))) (set! oU116f@build-one (lambda (oU1186@cls oU1187@k) (let ((oU118a@t oU1186@cls)) (let ((oU118c@ls/false (oUd7f@syntax-dispatch oU118a@t '(each-any any . each-any)))) (if oU118c@ls/false (apply (lambda (oU118e@d* oU118f@e oU1190@e*) (list 'if (list 'memv 't (list 'quote oU118e@d*)) (cons 'begin (cons oU118f@e oU1190@e*)) oU1187@k)) oU118c@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU118a@t)))))) (let ((oU1170@t oU116a@e)) (let ((oU1172@ls/false (oUd7f@syntax-dispatch oU1170@t '(_ any)))) (if oU1172@ls/false (apply (lambda (oU1174@expr) (oUd35@bless (cons 'let (cons (list (list 't oU1174@expr)) '((if #f #f)))))) oU1172@ls/false) (let ((oU1176@t oU1170@t)) (let ((oU1178@ls/false (oUd7f@syntax-dispatch oU1176@t '(_ any any . each-any)))) (if oU1178@ls/false (apply (lambda (oU117a@expr oU117b@cls oU117c@cls*) (oUd35@bless (list 'let (list (list 't oU117a@expr)) (let oU1184@f ((oU1180@cls oU117b@cls) (oU1181@cls* oU117c@cls*)) (if (null? oU1181@cls*) (oU116d@build-last oU1180@cls) (oU116f@build-one oU1180@cls (oU1184@f (car oU1181@cls*) (cdr oU1181@cls*)))))))) oU1178@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1176@t))))))))))) (set! oU282c@oUd2d@case-macro oUd2d@case-macro) (set! oUd2f@quote-transformer (lambda (oU11a2@e oU11a3@r oU11a4@mr) (let ((oU11a8@t oU11a2@e)) (let ((oU11aa@ls/false (oUd7f@syntax-dispatch oU11a8@t '(_ any)))) (if oU11aa@ls/false (apply (lambda (oU11ac@datum) (list 'quote (oUb8c@stx->datum oU11ac@datum))) oU11aa@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU11a8@t)))))) (set! oU282d@oUd2f@quote-transformer oUd2f@quote-transformer) (set! oUd31@case-lambda-transformer (lambda (oU11ae@e oU11af@r oU11b0@mr) (let ((oU11b4@t oU11ae@e)) (let ((oU11b6@ls/false (oUd7f@syntax-dispatch oU11b4@t '(_ . #(each (any any . each-any)))))) (if oU11b6@ls/false (apply (lambda (oU11b8@fmls* oU11b9@b* oU11ba@b**) (call-with-values (lambda () (oUda9@chi-lambda-clause* oU11ae@e oU11b8@fmls* (map cons oU11b9@b* oU11ba@b**) oU11af@r oU11b0@mr)) (lambda (oU11c2@oU11bf oU11c3@oU11c1) (let ((oU11c6@body* oU11c3@oU11c1) (oU11c7@fmls* oU11c2@oU11bf)) (oUadc@oUa09@build-case-lambda '#f oU11c7@fmls* oU11c6@body*))))) oU11b6@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU11b4@t)))))) (set! oU282e@oUd31@case-lambda-transformer oUd31@case-lambda-transformer) (set! oUd33@lambda-transformer (lambda (oU11ca@e oU11cb@r oU11cc@mr) (let ((oU11d0@t oU11ca@e)) (let ((oU11d2@ls/false (oUd7f@syntax-dispatch oU11d0@t '(_ any any . each-any)))) (if oU11d2@ls/false (apply (lambda (oU11d4@fmls oU11d5@b oU11d6@b*) (call-with-values (lambda () (oUda7@chi-lambda-clause oU11ca@e oU11d4@fmls (cons oU11d5@b oU11d6@b*) oU11cb@r oU11cc@mr)) (lambda (oU11de@oU11db oU11df@oU11dd) (let ((oU11e2@body oU11df@oU11dd) (oU11e3@fmls oU11de@oU11db)) (oUadb@oUa07@build-lambda '#f oU11e3@fmls oU11e2@body))))) oU11d2@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU11d0@t)))))) (set! oU282f@oUd33@lambda-transformer oUd33@lambda-transformer) (set! oUd35@bless (lambda (oU11e6@x) (oUb60@mkstx (let oU11ea@f ((oU11e8@x oU11e6@x)) (if (oUb44@stx? oU11e8@x) oU11e8@x (if (pair? oU11e8@x) (cons (oU11ea@f (car oU11e8@x)) (oU11ea@f (cdr oU11e8@x))) (if (symbol? oU11e8@x) (oUd07@scheme-stx oU11e8@x) (if (vector? oU11e8@x) (vector-map oU11ea@f oU11e8@x) oU11e8@x))))) '() '() '()))) (set! oU2830@oUd35@bless oUd35@bless) (set! oUd37@with-syntax-macro (lambda (oU11ec@e) (let ((oU11ee@t oU11ec@e)) (let ((oU11f0@ls/false (oUd7f@syntax-dispatch oU11ee@t '(_ #(each (any any)) any . each-any)))) (if oU11f0@ls/false (apply (lambda (oU11f2@pat* oU11f3@expr* oU11f4@b oU11f5@b*) (let ((oU11fa@idn* (let oU11fe@f ((oU11fc@pat* oU11f2@pat*)) (if (null? oU11fc@pat*) '() (call-with-values (lambda () (oUd7d@convert-pattern (car oU11fc@pat*) '())) (lambda (oU1204@oU1201 oU1205@oU1203) (let ((oU1208@idn* oU1205@oU1203) (oU1209@pat oU1204@oU1201)) (append oU1208@idn* (oU11fe@f (cdr oU11fc@pat*)))))))))) (begin (oUda5@verify-formals (map car oU11fa@idn*) oU11ec@e) (let ((oU120c@t* (oUe4d@generate-temporaries oU11f3@expr*))) (oUd35@bless (list 'let (map list oU120c@t* oU11f3@expr*) (let oU1212@f ((oU120e@pat* oU11f2@pat*) (oU120f@t* oU120c@t*)) (if (null? oU120e@pat*) (cons 'begin (cons '#f (cons oU11f4@b oU11f5@b*))) (list 'syntax-case (car oU120f@t*) '() (list (car oU120e@pat*) (oU1212@f (cdr oU120e@pat*) (cdr oU120f@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car oU120e@pat*)) (car oU120f@t*)))))))))))) oU11f0@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU11ee@t)))))) (set! oU2831@oUd37@with-syntax-macro oUd37@with-syntax-macro) (set! oUd39@invalid-fmls-error (lambda (oU1214@stx oU1215@fmls) (let ((oU1218@t oU1215@fmls)) (let ((oU121a@ls/false (oUd7f@syntax-dispatch oU1218@t '#(each+ any () any)))) (if oU121a@ls/false (apply (lambda (oU121c@id* oU121d@last) (let oU1222@f ((oU1220@id* (if (oUb78@id? oU121d@last) (cons oU121d@last oU121c@id*) (if (oUb6e@syntax-null? oU121d@last) oU121c@id* (oUe5f@syntax-violation '#f '"not an identifier" oU1214@stx oU121d@last))))) (if (null? oU1220@id*) (values) (if (not (oUb78@id? (car oU1220@id*))) (oUe5f@syntax-violation '#f '"not an identifier" oU1214@stx (car oU1220@id*)) (begin (oU1222@f (cdr oU1220@id*)) (if (oUb84@bound-id-member? (car oU1220@id*) (cdr oU1220@id*)) (oUe5f@syntax-violation '#f '"duplicate binding" oU1214@stx (car oU1220@id*)) (void))))))) oU121a@ls/false) (let ((oU1224@t oU1218@t)) (let ((oU1226@ls/false (oUd7f@syntax-dispatch oU1224@t '_))) (if oU1226@ls/false (apply (lambda () (oUe5f@syntax-violation '#f '"malformed binding form" oU1214@stx oU1215@fmls)) oU1226@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1224@t))))))))) (set! oU2832@oUd39@invalid-fmls-error oUd39@invalid-fmls-error) (set! oUd3b@let-macro (lambda (oU1228@stx) (let ((oU122a@t oU1228@stx)) (let ((oU122c@ls/false (oUd7f@syntax-dispatch oU122a@t '(_ #(each (any any)) any . each-any)))) (if oU122c@ls/false (apply (lambda (oU122e@lhs* oU122f@rhs* oU1230@b oU1231@b*) (if (oUb80@valid-bound-ids? oU122e@lhs*) (oUd35@bless (cons (cons 'lambda (cons oU122e@lhs* (cons oU1230@b oU1231@b*))) oU122f@rhs*)) (oUd39@invalid-fmls-error oU1228@stx oU122e@lhs*))) oU122c@ls/false) (let ((oU1236@t oU122a@t)) (let ((oU1238@ls/false (oUd7f@syntax-dispatch oU1236@t '(_ any #(each (any any)) any . each-any)))) (if (and oU1238@ls/false (apply (lambda (oU123a@f oU123b@lhs* oU123c@rhs* oU123d@b oU123e@b*) (oUb78@id? oU123a@f)) oU1238@ls/false)) (apply (lambda (oU1244@f oU1245@lhs* oU1246@rhs* oU1247@b oU1248@b*) (if (oUb80@valid-bound-ids? oU1245@lhs*) (oUd35@bless (cons (list 'letrec (list (list oU1244@f (cons 'lambda (cons oU1245@lhs* (cons oU1247@b oU1248@b*))))) oU1244@f) oU1246@rhs*)) (oUd39@invalid-fmls-error oU1228@stx oU1245@lhs*))) oU1238@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1236@t))))))))) (set! oU2833@oUd3b@let-macro oUd3b@let-macro) (set! oUd3d@let-values-macro (lambda (oU124e@stx) (let ((oU1251@rename '#f) (oU1253@rename* '#f)) (begin (set! oU1251@rename (lambda (oU12b6@x oU12b7@old* oU12b8@new*) (begin (if (not (oUb78@id? oU12b6@x)) (oUe5f@syntax-violation '#f '"not an indentifier" oU124e@stx oU12b6@x) (void)) (if (oUb84@bound-id-member? oU12b6@x oU12b7@old*) (oUe5f@syntax-violation '#f '"duplicate binding" oU124e@stx oU12b6@x) (void)) (let ((oU12bc@y (gensym (oUe65@syntax->datum oU12b6@x)))) (values oU12bc@y (cons oU12b6@x oU12b7@old*) (cons oU12bc@y oU12b8@new*)))))) (set! oU1253@rename* (lambda (oU12a4@x* oU12a5@old* oU12a6@new*) (if (null? oU12a4@x*) (values '() oU12a5@old* oU12a6@new*) (call-with-values (lambda () (oU1251@rename (car oU12a4@x*) oU12a5@old* oU12a6@new*)) (lambda (oU12aa@x oU12ab@old* oU12ac@new*) (call-with-values (lambda () (oU1253@rename* (cdr oU12a4@x*) oU12ab@old* oU12ac@new*)) (lambda (oU12b0@x* oU12b1@old* oU12b2@new*) (values (cons oU12aa@x oU12b0@x*) oU12b1@old* oU12b2@new*)))))))) (let ((oU1254@t oU124e@stx)) (let ((oU1256@ls/false (oUd7f@syntax-dispatch oU1254@t '(_ () any . each-any)))) (if oU1256@ls/false (apply (lambda (oU1258@b oU1259@b*) (cons* (oUd35@bless 'let) '() oU1258@b oU1259@b*)) oU1256@ls/false) (let ((oU125c@t oU1254@t)) (let ((oU125e@ls/false (oUd7f@syntax-dispatch oU125c@t '(_ #(each (any any)) any . each-any)))) (if oU125e@ls/false (apply (lambda (oU1260@lhs* oU1261@rhs* oU1262@b oU1263@b*) (oUd35@bless (let oU1270@f ((oU1268@lhs* oU1260@lhs*) (oU1269@rhs* oU1261@rhs*) (oU126a@old* '()) (oU126b@new* '())) (if (null? oU1268@lhs*) (cons 'let (cons (map list oU126a@old* oU126b@new*) (cons oU1262@b oU1263@b*))) (let ((oU1272@t (car oU1268@lhs*))) (let ((oU1274@ls/false (oUd7f@syntax-dispatch oU1272@t 'each-any))) (if oU1274@ls/false (apply (lambda (oU1276@x*) (call-with-values (lambda () (oU1253@rename* oU1276@x* oU126a@old* oU126b@new*)) (lambda (oU127e@oU1279 oU127f@oU127b oU1280@oU127d) (let ((oU1284@new* oU1280@oU127d) (oU1285@old* oU127f@oU127b) (oU1286@y* oU127e@oU1279)) (list 'call-with-values (list 'lambda '() (car oU1269@rhs*)) (list 'lambda oU1286@y* (oU1270@f (cdr oU1268@lhs*) (cdr oU1269@rhs*) oU1285@old* oU1284@new*))))))) oU1274@ls/false) (let ((oU128a@t oU1272@t)) (let ((oU128c@ls/false (oUd7f@syntax-dispatch oU128a@t '#(each+ any () any)))) (if oU128c@ls/false (apply (lambda (oU128e@x* oU128f@x) (call-with-values (lambda () (oU1251@rename oU128f@x oU126a@old* oU126b@new*)) (lambda (oU1292@y oU1293@old* oU1294@new*) (call-with-values (lambda () (oU1253@rename* oU128e@x* oU1293@old* oU1294@new*)) (lambda (oU1298@y* oU1299@old* oU129a@new*) (list 'call-with-values (list 'lambda '() (car oU1269@rhs*)) (list 'lambda (append oU1298@y* oU1292@y) (oU1270@f (cdr oU1268@lhs*) (cdr oU1269@rhs*) oU1299@old* oU129a@new*)))))))) oU128c@ls/false) (let ((oU129e@t oU128a@t)) (let ((oU12a0@ls/false (oUd7f@syntax-dispatch oU129e@t 'any))) (if oU12a0@ls/false (apply (lambda (oU12a2@others) (oUe5f@syntax-violation '#f '"malformed bindings" oU124e@stx oU12a2@others)) oU12a0@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU129e@t)))))))))))))) oU125e@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU125c@t))))))))))) (set! oU2834@oUd3d@let-values-macro oUd3d@let-values-macro) (set! oUd3f@let*-values-macro (lambda (oU12be@stx) (let ((oU12c1@check '#f)) (begin (set! oU12c1@check (lambda (oU12f0@x*) (if (not (null? oU12f0@x*)) (let ((oU12f2@x (car oU12f0@x*))) (begin (if (not (oUb78@id? oU12f2@x)) (oUe5f@syntax-violation '#f '"not an identifier" oU12be@stx oU12f2@x) (void)) (oU12c1@check (cdr oU12f0@x*)) (if (oUb84@bound-id-member? oU12f2@x (cdr oU12f0@x*)) (oUe5f@syntax-violation '#f '"duplicate identifier" oU12be@stx oU12f2@x) (void)))) (void)))) (let ((oU12c2@t oU12be@stx)) (let ((oU12c4@ls/false (oUd7f@syntax-dispatch oU12c2@t '(_ () any . each-any)))) (if oU12c4@ls/false (apply (lambda (oU12c6@b oU12c7@b*) (cons* (oUd35@bless 'let) '() oU12c6@b oU12c7@b*)) oU12c4@ls/false) (let ((oU12ca@t oU12c2@t)) (let ((oU12cc@ls/false (oUd7f@syntax-dispatch oU12ca@t '(_ #(each (any any)) any . each-any)))) (if oU12cc@ls/false (apply (lambda (oU12ce@lhs* oU12cf@rhs* oU12d0@b oU12d1@b*) (oUd35@bless (let oU12da@f ((oU12d6@lhs* oU12ce@lhs*) (oU12d7@rhs* oU12cf@rhs*)) (if (null? oU12d6@lhs*) (cons 'begin (cons oU12d0@b oU12d1@b*)) (let ((oU12dc@t (car oU12d6@lhs*))) (let ((oU12de@ls/false (oUd7f@syntax-dispatch oU12dc@t 'each-any))) (if oU12de@ls/false (apply (lambda (oU12e0@x*) (begin (oU12c1@check oU12e0@x*) (list 'call-with-values (list 'lambda '() (car oU12d7@rhs*)) (list 'lambda oU12e0@x* (oU12da@f (cdr oU12d6@lhs*) (cdr oU12d7@rhs*)))))) oU12de@ls/false) (let ((oU12e2@t oU12dc@t)) (let ((oU12e4@ls/false (oUd7f@syntax-dispatch oU12e2@t '#(each+ any () any)))) (if oU12e4@ls/false (apply (lambda (oU12e6@x* oU12e7@x) (begin (oU12c1@check (cons oU12e7@x oU12e6@x*)) (list 'call-with-values (list 'lambda '() (car oU12d7@rhs*)) (list 'lambda (append oU12e6@x* oU12e7@x) (oU12da@f (cdr oU12d6@lhs*) (cdr oU12d7@rhs*)))))) oU12e4@ls/false) (let ((oU12ea@t oU12e2@t)) (let ((oU12ec@ls/false (oUd7f@syntax-dispatch oU12ea@t 'any))) (if oU12ec@ls/false (apply (lambda (oU12ee@others) (oUe5f@syntax-violation '#f '"malformed bindings" oU12be@stx oU12ee@others)) oU12ec@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU12ea@t)))))))))))))) oU12cc@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU12ca@t))))))))))) (set! oU2835@oUd3f@let*-values-macro oUd3f@let*-values-macro) (set! oUd41@trace-lambda-macro (lambda (oU12f4@stx) (let ((oU12f6@t oU12f4@stx)) (let ((oU12f8@ls/false (oUd7f@syntax-dispatch oU12f6@t '(_ any each-any any . each-any)))) (if oU12f8@ls/false (apply (lambda (oU12fa@who oU12fb@fmls oU12fc@b oU12fd@b*) (if (oUb80@valid-bound-ids? oU12fb@fmls) (oUd35@bless (list 'make-traced-procedure (list 'quote oU12fa@who) (cons 'lambda (cons oU12fb@fmls (cons oU12fc@b oU12fd@b*))))) (oUd39@invalid-fmls-error oU12f4@stx oU12fb@fmls))) oU12f8@ls/false) (let ((oU1302@t oU12f6@t)) (let ((oU1304@ls/false (oUd7f@syntax-dispatch oU1302@t '(_ any #(each+ any () any) any . each-any)))) (if oU1304@ls/false (apply (lambda (oU1306@who oU1307@fmls oU1308@last oU1309@b oU130a@b*) (if (oUb80@valid-bound-ids? (cons oU1308@last oU1307@fmls)) (oUd35@bless (list 'make-traced-procedure (list 'quote oU1306@who) (cons 'lambda (cons (append oU1307@fmls oU1308@last) (cons oU1309@b oU130a@b*))))) (oUd39@invalid-fmls-error oU12f4@stx (append oU1307@fmls oU1308@last)))) oU1304@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1302@t))))))))) (set! oU2836@oUd41@trace-lambda-macro oUd41@trace-lambda-macro) (set! oUd43@trace-define-macro (lambda (oU1310@stx) (let ((oU1312@t oU1310@stx)) (let ((oU1314@ls/false (oUd7f@syntax-dispatch oU1312@t '(_ (any . each-any) any . each-any)))) (if oU1314@ls/false (apply (lambda (oU1316@who oU1317@fmls oU1318@b oU1319@b*) (if (oUb80@valid-bound-ids? oU1317@fmls) (oUd35@bless (list 'define oU1316@who (list 'make-traced-procedure (list 'quote oU1316@who) (cons 'lambda (cons oU1317@fmls (cons oU1318@b oU1319@b*)))))) (oUd39@invalid-fmls-error oU1310@stx oU1317@fmls))) oU1314@ls/false) (let ((oU131e@t oU1312@t)) (let ((oU1320@ls/false (oUd7f@syntax-dispatch oU131e@t '(_ (any . #(each+ any () any)) any . each-any)))) (if oU1320@ls/false (apply (lambda (oU1322@who oU1323@fmls oU1324@last oU1325@b oU1326@b*) (if (oUb80@valid-bound-ids? (cons oU1324@last oU1323@fmls)) (oUd35@bless (list 'define oU1322@who (list 'make-traced-procedure (list 'quote oU1322@who) (cons 'lambda (cons (append oU1323@fmls oU1324@last) (cons oU1325@b oU1326@b*)))))) (oUd39@invalid-fmls-error oU1310@stx (append oU1323@fmls oU1324@last)))) oU1320@ls/false) (let ((oU132c@t oU131e@t)) (let ((oU132e@ls/false (oUd7f@syntax-dispatch oU132c@t '(_ any any)))) (if oU132e@ls/false (apply (lambda (oU1330@who oU1331@expr) (if (oUb78@id? oU1330@who) (oUd35@bless (list 'define oU1330@who (list 'let (list (list 'v oU1331@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote oU1330@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (oUe5f@syntax-violation '#f '"invalid name" oU1310@stx))) oU132e@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU132c@t)))))))))))) (set! oU2837@oUd43@trace-define-macro oUd43@trace-define-macro) (set! oUd45@trace-define-syntax-macro (lambda (oU1334@stx) (let ((oU1336@t oU1334@stx)) (let ((oU1338@ls/false (oUd7f@syntax-dispatch oU1336@t '(_ any any)))) (if oU1338@ls/false (apply (lambda (oU133a@who oU133b@expr) (if (oUb78@id? oU133a@who) (oUd35@bless (list 'define-syntax oU133a@who (list 'make-traced-macro (list 'quote oU133a@who) oU133b@expr))) (oUe5f@syntax-violation '#f '"invalid name" oU1334@stx))) oU1338@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1336@t)))))) (set! oU2838@oUd45@trace-define-syntax-macro oUd45@trace-define-syntax-macro) (set! oUd47@trace-let/rec-syntax (lambda (oU133e@who) (lambda (oU1340@stx) (let ((oU1342@t oU1340@stx)) (let ((oU1344@ls/false (oUd7f@syntax-dispatch oU1342@t '(_ #(each (any any)) any . each-any)))) (if oU1344@ls/false (apply (lambda (oU1346@lhs* oU1347@rhs* oU1348@b oU1349@b*) (if (oUb80@valid-bound-ids? oU1346@lhs*) (let ((oU134e@rhs* (map (lambda (oU1350@lhs oU1351@rhs) (list 'make-traced-macro (list 'quote oU1350@lhs) oU1351@rhs)) oU1346@lhs* oU1347@rhs*))) (oUd35@bless (cons oU133e@who (cons (map list oU1346@lhs* oU134e@rhs*) (cons oU1348@b oU1349@b*))))) (oUd39@invalid-fmls-error oU1340@stx oU1346@lhs*))) oU1344@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1342@t))))))) (set! oU2839@oUd47@trace-let/rec-syntax oUd47@trace-let/rec-syntax) (set! oUd49@trace-let-syntax-macro (oUd47@trace-let/rec-syntax 'let-syntax)) (set! oU283a@oUd49@trace-let-syntax-macro oUd49@trace-let-syntax-macro) (set! oUd4b@trace-letrec-syntax-macro (oUd47@trace-let/rec-syntax 'letrec-syntax)) (set! oU283b@oUd4b@trace-letrec-syntax-macro oUd4b@trace-letrec-syntax-macro) (set! oUd4d@guard-macro (lambda (oU1354@x) (let ((oU1357@gen-clauses '#f)) (begin (set! oU1357@gen-clauses (lambda (oU136e@con oU136f@outerk oU1370@clause*) (let ((oU1375@f '#f) (oU1377@f* '#f)) (begin (set! oU1375@f (lambda (oU13ae@x oU13af@k) (let ((oU13b2@t oU13ae@x)) (let ((oU13b4@ls/false (oUd7f@syntax-dispatch oU13b2@t '(any #(scheme-id =>) any)))) (if oU13b4@ls/false (apply (lambda (oU13b6@e oU13b7@p) (let ((oU13ba@t (gensym))) (list 'let (list (list oU13ba@t oU13b6@e)) (list 'if oU13ba@t (list oU13b7@p oU13ba@t) oU13af@k)))) oU13b4@ls/false) (let ((oU13bc@t oU13b2@t)) (let ((oU13be@ls/false (oUd7f@syntax-dispatch oU13bc@t '(any)))) (if oU13be@ls/false (apply (lambda (oU13c0@e) (let ((oU13c2@t (gensym))) (list 'let (list (list oU13c2@t oU13c0@e)) (list 'if oU13c2@t oU13c2@t oU13af@k)))) oU13be@ls/false) (let ((oU13c4@t oU13bc@t)) (let ((oU13c6@ls/false (oUd7f@syntax-dispatch oU13c4@t '(any any . each-any)))) (if oU13c6@ls/false (apply (lambda (oU13c8@e oU13c9@v oU13ca@v*) (list 'if oU13c8@e (cons 'begin (cons oU13c9@v oU13ca@v*)) oU13af@k)) oU13c6@ls/false) (let ((oU13ce@t oU13c4@t)) (let ((oU13d0@ls/false (oUd7f@syntax-dispatch oU13ce@t '_))) (if oU13d0@ls/false (apply (lambda () (oUe5f@syntax-violation '#f '"invalid guard clause" oU13ae@x)) oU13d0@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU13ce@t))))))))))))))) (set! oU1377@f* (lambda (oU1384@x*) (let ((oU1386@t oU1384@x*)) (let ((oU1388@ls/false (oUd7f@syntax-dispatch oU1386@t '()))) (if oU1388@ls/false (apply (lambda () (let ((oU138a@g (gensym))) (values (list oU138a@g (list 'lambda '() (list 'raise-continuable oU136e@con))) oU138a@g))) oU1388@ls/false) (let ((oU138c@t oU1386@t)) (let ((oU138e@ls/false (oUd7f@syntax-dispatch oU138c@t '((#(scheme-id else) any . each-any))))) (if oU138e@ls/false (apply (lambda (oU1390@e oU1391@e*) (values (cons 'begin (cons oU1390@e oU1391@e*)) '#f)) oU138e@ls/false) (let ((oU1394@t oU138c@t)) (let ((oU1396@ls/false (oUd7f@syntax-dispatch oU1394@t '(any . any)))) (if oU1396@ls/false (apply (lambda (oU1398@cls oU1399@cls*) (call-with-values (lambda () (oU1377@f* oU1399@cls*)) (lambda (oU13a0@oU139d oU13a1@oU139f) (let ((oU13a4@g oU13a1@oU139f) (oU13a5@e oU13a0@oU139d)) (values (oU1375@f oU1398@cls oU13a5@e) oU13a4@g))))) oU1396@ls/false) (let ((oU13a8@t oU1394@t)) (let ((oU13aa@ls/false (oUd7f@syntax-dispatch oU13a8@t 'any))) (if oU13aa@ls/false (apply (lambda (oU13ac@others) (oUe5f@syntax-violation '#f '"invalid guard clause" oU13ac@others)) oU13aa@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU13a8@t))))))))))))))) (call-with-values (lambda () (oU1377@f* oU1370@clause*)) (lambda (oU137c@oU1379 oU137d@oU137b) (let ((oU1380@raisek oU137d@oU137b) (oU1381@code oU137c@oU1379)) (if oU1380@raisek (list (list 'call/cc (list 'lambda (list oU1380@raisek) (list oU136f@outerk (list 'lambda '() oU1381@code))))) (list oU136f@outerk (list 'lambda '() oU1381@code)))))))))) (let ((oU1358@t oU1354@x)) (let ((oU135a@ls/false (oUd7f@syntax-dispatch oU1358@t '(_ (any . each-any) any . each-any)))) (if (and oU135a@ls/false (apply (lambda (oU135c@con oU135d@clause* oU135e@b oU135f@b*) (oUb78@id? oU135c@con)) oU135a@ls/false)) (apply (lambda (oU1364@con oU1365@clause* oU1366@b oU1367@b*) (let ((oU136c@outerk (gensym))) (oUd35@bless (list (list 'call/cc (list 'lambda (list oU136c@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list oU1364@con) (oU1357@gen-clauses oU1364@con oU136c@outerk oU1365@clause*)) (cons 'lambda (cons '() (cons oU1366@b oU1367@b*))))))))))) oU135a@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1358@t)))))))) (set! oU283c@oUd4d@guard-macro oUd4d@guard-macro) (set! oUd4f@define-enumeration-macro (lambda (oU13d2@stx) (let ((oU13d5@set? '#f) (oU13d7@remove-dups '#f)) (begin (set! oU13d5@set? (lambda (oU13ee@x) (or (null? oU13ee@x) (and (not (memq (car oU13ee@x) (cdr oU13ee@x))) (oU13d5@set? (cdr oU13ee@x)))))) (set! oU13d7@remove-dups (lambda (oU13ec@ls) (if (null? oU13ec@ls) '() (cons (car oU13ec@ls) (oU13d7@remove-dups (remq (car oU13ec@ls) (cdr oU13ec@ls))))))) (let ((oU13d8@t oU13d2@stx)) (let ((oU13da@ls/false (oUd7f@syntax-dispatch oU13d8@t '(_ any each-any any)))) (if (and oU13da@ls/false (apply (lambda (oU13dc@name oU13dd@id* oU13de@maker) (and (oUb78@id? oU13dc@name) (oUb78@id? oU13de@maker) (for-all oUb78@id? oU13dd@id*))) oU13da@ls/false)) (apply (lambda (oU13e2@name oU13e3@id* oU13e4@maker) (let ((oU13e8@name* (oU13d7@remove-dups (oUe65@syntax->datum oU13e3@id*))) (oU13e9@mk (gensym))) (oUd35@bless (list 'begin (list 'define oU13e9@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote oU13e8@name*)))) (list 'define-syntax oU13e2@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote oU13e8@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote oU13e2@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax oU13e4@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote oU13e4@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote oU13e8@name*)) (cons 'syntax-violation (cons (list 'quote oU13e4@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons oU13e9@mk '('(n* ...))))))))))))) oU13da@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU13d8@t)))))))) (set! oU283d@oUd4f@define-enumeration-macro oUd4f@define-enumeration-macro) (set! oUd51@time-macro (lambda (oU13f0@stx) (let ((oU13f2@t oU13f0@stx)) (let ((oU13f4@ls/false (oUd7f@syntax-dispatch oU13f2@t '(_ any)))) (if oU13f4@ls/false (apply (lambda (oU13f6@expr) (oUd35@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() oU13f6@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) oU13f4@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU13f2@t)))))) (set! oU283e@oUd51@time-macro oUd51@time-macro) (set! oUd53@delay-macro (lambda (oU13f8@stx) (let ((oU13fa@t oU13f8@stx)) (let ((oU13fc@ls/false (oUd7f@syntax-dispatch oU13fa@t '(_ any)))) (if oU13fc@ls/false (apply (lambda (oU13fe@expr) (oUd35@bless (list 'make-promise (list 'lambda '() oU13fe@expr)))) oU13fc@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU13fa@t)))))) (set! oU283f@oUd53@delay-macro oUd53@delay-macro) (set! oUd55@assert-macro (lambda (oU1400@stx) (let ((oU1402@t oU1400@stx)) (let ((oU1404@ls/false (oUd7f@syntax-dispatch oU1402@t '(_ any)))) (if oU1404@ls/false (apply (lambda (oU1406@expr) (let ((oU1408@pos (or (oUe57@expression-position oU1400@stx) (oUe57@expression-position oU1406@expr)))) (oUd35@bless (list 'unless oU1406@expr (list 'assertion-error (list 'quote oU1406@expr) (list 'quote oU1408@pos)))))) oU1404@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1402@t)))))) (set! oU2840@oUd55@assert-macro oUd55@assert-macro) (set! oUd57@endianness-macro (lambda (oU140a@stx) (let ((oU140c@t oU140a@stx)) (let ((oU140e@ls/false (oUd7f@syntax-dispatch oU140c@t '(_ any)))) (if oU140e@ls/false (apply (lambda (oU1410@e) (let ((oU1412@t (oUe65@syntax->datum oU1410@e))) (if (memv oU1412@t '(little)) (oUd35@bless ''little) (if (memv oU1412@t '(big)) (oUd35@bless ''big) (oUe5f@syntax-violation '#f '"endianness must be big or little" oU140a@stx))))) oU140e@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU140c@t)))))) (set! oU2841@oUd57@endianness-macro oUd57@endianness-macro) (set! oUd59@identifier-syntax-macro (lambda (oU1414@stx) (let ((oU1416@t oU1414@stx)) (let ((oU1418@ls/false (oUd7f@syntax-dispatch oU1416@t '(_ any)))) (if oU1418@ls/false (apply (lambda (oU141a@expr) (oUd35@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax oU141a@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax oU141a@expr) '((syntax (e* ...)))))))))) oU1418@ls/false) (let ((oU141c@t oU1416@t)) (let ((oU141e@ls/false (oUd7f@syntax-dispatch oU141c@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and oU141e@ls/false (apply (lambda (oU1420@id1 oU1421@expr1 oU1422@id2 oU1423@expr2 oU1424@expr3) (and (oUb78@id? oU1420@id1) (oUb78@id? oU1422@id2) (oUb78@id? oU1423@expr2))) oU141e@ls/false)) (apply (lambda (oU142a@id1 oU142b@expr1 oU142c@id2 oU142d@expr2 oU142e@expr3) (oUd35@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax oU142b@expr1)) (list (list 'set! 'id oU142d@expr2) (list 'syntax oU142e@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons oU142b@expr1 '(e* ...))))))))) oU141e@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU141c@t))))))))) (set! oU2842@oUd59@identifier-syntax-macro oUd59@identifier-syntax-macro) (set! oUd5b@do-macro (lambda (oU1434@stx) (let ((oU1437@bind '#f)) (begin (set! oU1437@bind (lambda (oU144e@x) (let ((oU1450@t oU144e@x)) (let ((oU1452@ls/false (oUd7f@syntax-dispatch oU1450@t '(any any)))) (if oU1452@ls/false (apply (lambda (oU1454@x oU1455@init) (list oU1454@x oU1455@init oU1454@x)) oU1452@ls/false) (let ((oU1458@t oU1450@t)) (let ((oU145a@ls/false (oUd7f@syntax-dispatch oU1458@t '(any any any)))) (if oU145a@ls/false (apply (lambda (oU145c@x oU145d@init oU145e@step) (list oU145c@x oU145d@init oU145e@step)) oU145a@ls/false) (let ((oU1462@t oU1458@t)) (let ((oU1464@ls/false (oUd7f@syntax-dispatch oU1462@t '_))) (if oU1464@ls/false (apply (lambda () (oUe5f@syntax-violation '#f '"invalid binding" oU1434@stx)) oU1464@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1462@t)))))))))))) (let ((oU1438@t oU1434@stx)) (let ((oU143a@ls/false (oUd7f@syntax-dispatch oU1438@t '(_ each-any (any . each-any) . each-any)))) (if oU143a@ls/false (apply (lambda (oU143c@binding* oU143d@test oU143e@expr* oU143f@command*) (let ((oU1444@t (map oU1437@bind oU143c@binding*))) (let ((oU1446@ls/false (oUd7f@syntax-dispatch oU1444@t '#(each (any any any))))) (if oU1446@ls/false (apply (lambda (oU1448@x* oU1449@init* oU144a@step*) (if (oUb80@valid-bound-ids? oU1448@x*) (oUd35@bless (list 'letrec (list (list 'loop (list 'lambda oU1448@x* (list 'if oU143d@test (cons 'begin (cons '(if #f #f) oU143e@expr*)) (cons 'begin (append oU143f@command* (list (cons 'loop oU144a@step*)))))))) (cons 'loop oU1449@init*))) (oUe5f@syntax-violation '#f '"invalid bindings" oU1434@stx))) oU1446@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1444@t))))) oU143a@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1438@t)))))))) (set! oU2843@oUd5b@do-macro oUd5b@do-macro) (set! oUd5d@let*-macro (lambda (oU1466@stx) (let ((oU1468@t oU1466@stx)) (let ((oU146a@ls/false (oUd7f@syntax-dispatch oU1468@t '(_ #(each (any any)) any . each-any)))) (if (and oU146a@ls/false (apply (lambda (oU146c@lhs* oU146d@rhs* oU146e@b oU146f@b*) (for-all oUb78@id? oU146c@lhs*)) oU146a@ls/false)) (apply (lambda (oU1474@lhs* oU1475@rhs* oU1476@b oU1477@b*) (oUd35@bless (let oU147e@f ((oU147c@x* (map list oU1474@lhs* oU1475@rhs*))) (if (null? oU147c@x*) (cons 'let (cons '() (cons oU1476@b oU1477@b*))) (list 'let (list (car oU147c@x*)) (oU147e@f (cdr oU147c@x*))))))) oU146a@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1468@t)))))) (set! oU2844@oUd5d@let*-macro oUd5d@let*-macro) (set! oUd5f@or-macro (lambda (oU1480@stx) (let ((oU1482@t oU1480@stx)) (let ((oU1484@ls/false (oUd7f@syntax-dispatch oU1482@t '(_)))) (if oU1484@ls/false (apply (lambda () '#f) oU1484@ls/false) (let ((oU1486@t oU1482@t)) (let ((oU1488@ls/false (oUd7f@syntax-dispatch oU1486@t '(_ any . each-any)))) (if oU1488@ls/false (apply (lambda (oU148a@e oU148b@e*) (oUd35@bless (let oU1492@f ((oU148e@e oU148a@e) (oU148f@e* oU148b@e*)) (if (null? oU148f@e*) (list 'begin '#f oU148e@e) (list 'let (list (list 't oU148e@e)) (list 'if 't 't (oU1492@f (car oU148f@e*) (cdr oU148f@e*)))))))) oU1488@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1486@t))))))))) (set! oU2845@oUd5f@or-macro oUd5f@or-macro) (set! oUd61@and-macro (lambda (oU1494@stx) (let ((oU1496@t oU1494@stx)) (let ((oU1498@ls/false (oUd7f@syntax-dispatch oU1496@t '(_)))) (if oU1498@ls/false (apply (lambda () '#t) oU1498@ls/false) (let ((oU149a@t oU1496@t)) (let ((oU149c@ls/false (oUd7f@syntax-dispatch oU149a@t '(_ any . each-any)))) (if oU149c@ls/false (apply (lambda (oU149e@e oU149f@e*) (oUd35@bless (let oU14a6@f ((oU14a2@e oU149e@e) (oU14a3@e* oU149f@e*)) (if (null? oU14a3@e*) (list 'begin '#f oU14a2@e) (cons 'if (cons oU14a2@e (cons (oU14a6@f (car oU14a3@e*) (cdr oU14a3@e*)) '(#f)))))))) oU149c@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU149a@t))))))))) (set! oU2846@oUd61@and-macro oUd61@and-macro) (set! oUd63@cond-macro (lambda (oU14a8@stx) (let ((oU14aa@t oU14a8@stx)) (let ((oU14ac@ls/false (oUd7f@syntax-dispatch oU14aa@t '(_ any . each-any)))) (if oU14ac@ls/false (apply (lambda (oU14ae@cls oU14af@cls*) (oUd35@bless (let oU14b6@f ((oU14b2@cls oU14ae@cls) (oU14b3@cls* oU14af@cls*)) (if (null? oU14b3@cls*) (let ((oU14b8@t oU14b2@cls)) (let ((oU14ba@ls/false (oUd7f@syntax-dispatch oU14b8@t '(#(scheme-id else) any . each-any)))) (if oU14ba@ls/false (apply (lambda (oU14bc@e oU14bd@e*) (cons 'begin (cons oU14bc@e oU14bd@e*))) oU14ba@ls/false) (let ((oU14c0@t oU14b8@t)) (let ((oU14c2@ls/false (oUd7f@syntax-dispatch oU14c0@t '(any #(scheme-id =>) any)))) (if oU14c2@ls/false (apply (lambda (oU14c4@e oU14c5@p) (list 'let (list (list 't oU14c4@e)) (list 'if 't (cons oU14c5@p '(t))))) oU14c2@ls/false) (let ((oU14c8@t oU14c0@t)) (let ((oU14ca@ls/false (oUd7f@syntax-dispatch oU14c8@t '(any)))) (if oU14ca@ls/false (apply (lambda (oU14cc@e) (cons 'or (cons oU14cc@e '((if #f #f))))) oU14ca@ls/false) (let ((oU14ce@t oU14c8@t)) (let ((oU14d0@ls/false (oUd7f@syntax-dispatch oU14ce@t '(any . each-any)))) (if oU14d0@ls/false (apply (lambda (oU14d2@e oU14d3@e*) (list 'if oU14d2@e (cons 'begin oU14d3@e*))) oU14d0@ls/false) (let ((oU14d6@t oU14ce@t)) (let ((oU14d8@ls/false (oUd7f@syntax-dispatch oU14d6@t '_))) (if oU14d8@ls/false (apply (lambda () (oUe5f@syntax-violation '#f '"invalid last clause" oU14a8@stx)) oU14d8@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU14d6@t)))))))))))))))) (let ((oU14da@t oU14b2@cls)) (let ((oU14dc@ls/false (oUd7f@syntax-dispatch oU14da@t '(#(scheme-id else) any . each-any)))) (if oU14dc@ls/false (apply (lambda (oU14de@e oU14df@e*) (oUe5f@syntax-violation '#f '"incorrect position of keyword else" oU14a8@stx)) oU14dc@ls/false) (let ((oU14e2@t oU14da@t)) (let ((oU14e4@ls/false (oUd7f@syntax-dispatch oU14e2@t '(any #(scheme-id =>) any)))) (if oU14e4@ls/false (apply (lambda (oU14e6@e oU14e7@p) (list 'let (list (list 't oU14e6@e)) (list 'if 't (cons oU14e7@p '(t)) (oU14b6@f (car oU14b3@cls*) (cdr oU14b3@cls*))))) oU14e4@ls/false) (let ((oU14ea@t oU14e2@t)) (let ((oU14ec@ls/false (oUd7f@syntax-dispatch oU14ea@t '(any)))) (if oU14ec@ls/false (apply (lambda (oU14ee@e) (list 'or oU14ee@e (oU14b6@f (car oU14b3@cls*) (cdr oU14b3@cls*)))) oU14ec@ls/false) (let ((oU14f0@t oU14ea@t)) (let ((oU14f2@ls/false (oUd7f@syntax-dispatch oU14f0@t '(any . each-any)))) (if oU14f2@ls/false (apply (lambda (oU14f4@e oU14f5@e*) (list 'if oU14f4@e (cons 'begin oU14f5@e*) (oU14b6@f (car oU14b3@cls*) (cdr oU14b3@cls*)))) oU14f2@ls/false) (let ((oU14f8@t oU14f0@t)) (let ((oU14fa@ls/false (oUd7f@syntax-dispatch oU14f8@t '_))) (if oU14fa@ls/false (apply (lambda () (oUe5f@syntax-violation '#f '"invalid last clause" oU14a8@stx)) oU14fa@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU14f8@t)))))))))))))))))))) oU14ac@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU14aa@t)))))) (set! oU2847@oUd63@cond-macro oUd63@cond-macro) (set! oUd65@do-include (lambda (oU14fc@stx oU14fd@id oU14fe@filename) (let ((oU1502@filename (oUb8c@stx->datum oU14fe@filename))) (begin (if (not (and (string? oU1502@filename) (oUb78@id? oU14fd@id))) (oUe5f@syntax-violation '#f '"invalid syntax" oU14fc@stx) (void)) (cons (oUd35@bless 'begin) (with-input-from-file oU1502@filename (lambda () (let oU1506@f ((oU1504@ls '())) (let ((oU1508@x (oU6b5@oU587@read-annotated))) (if (eof-object? oU1508@x) (reverse oU1504@ls) (oU1506@f (cons (oUb58@datum->stx oU14fd@id oU1508@x) oU1504@ls)))))))))))) (set! oU2848@oUd65@do-include oUd65@do-include) (set! oUd67@include-macro (lambda (oU150a@e) (let ((oU150c@t oU150a@e)) (let ((oU150e@ls/false (oUd7f@syntax-dispatch oU150c@t '(any any)))) (if oU150e@ls/false (apply (lambda (oU1510@id oU1511@filename) (oUd65@do-include oU150a@e oU1510@id oU1511@filename)) oU150e@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU150c@t)))))) (set! oU2849@oUd67@include-macro oUd67@include-macro) (set! oUd69@include-into-macro (lambda (oU1514@e) (let ((oU1516@t oU1514@e)) (let ((oU1518@ls/false (oUd7f@syntax-dispatch oU1516@t '(_ any any)))) (if oU1518@ls/false (apply (lambda (oU151a@id oU151b@filename) (oUd65@do-include oU1514@e oU151a@id oU151b@filename)) oU1518@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1516@t)))))) (set! oU284a@oUd69@include-into-macro oUd69@include-into-macro) (set! oUd6b@syntax-rules-macro (lambda (oU151e@e) (let ((oU1520@t oU151e@e)) (let ((oU1522@ls/false (oUd7f@syntax-dispatch oU1520@t '(_ each-any . #(each (any any)))))) (if oU1522@ls/false (apply (lambda (oU1524@lits oU1525@pat* oU1526@tmp*) (begin (oUd85@verify-literals oU1524@lits oU151e@e) (oUd35@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons oU1524@lits (map (lambda (oU152a@pat oU152b@tmp) (let ((oU152e@t oU152a@pat)) (let ((oU1530@ls/false (oUd7f@syntax-dispatch oU152e@t '(_ . any)))) (if oU1530@ls/false (apply (lambda (oU1532@rest) (list (cons 'g oU1532@rest) (list 'syntax oU152b@tmp))) oU1530@ls/false) (let ((oU1534@t oU152e@t)) (let ((oU1536@ls/false (oUd7f@syntax-dispatch oU1534@t '_))) (if oU1536@ls/false (apply (lambda () (oUe5f@syntax-violation '#f '"invalid syntax-rules pattern" oU151e@e oU152a@pat)) oU1536@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1534@t)))))))) oU1525@pat* oU1526@tmp*)))))))) oU1522@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1520@t)))))) (set! oU284b@oUd6b@syntax-rules-macro oUd6b@syntax-rules-macro) (set! oUd6d@quasiquote-macro (let ((oU1539@datum '#f) (oU1555@quasicons* '#f) (oU1557@quasicons '#f) (oU1559@quasiappend '#f) (oU155b@quasivector '#f) (oU155d@vquasi '#f) (oU155f@quasi '#f)) (begin (set! oU1539@datum (lambda (oU163a@x) (list (oUd07@scheme-stx 'quote) (oUb60@mkstx oU163a@x '() '() '())))) (set! oU1555@quasicons* (lambda (oU1632@x oU1633@y) (let oU1638@f ((oU1636@x oU1632@x)) (if (null? oU1636@x) oU1633@y (oU1557@quasicons (car oU1636@x) (oU1638@f (cdr oU1636@x))))))) (set! oU1557@quasicons (lambda (oU160c@x oU160d@y) (let ((oU1610@t oU160d@y)) (let ((oU1612@ls/false (oUd7f@syntax-dispatch oU1610@t '(#(scheme-id quote) any)))) (if oU1612@ls/false (apply (lambda (oU1614@dy) (let ((oU1616@t oU160c@x)) (let ((oU1618@ls/false (oUd7f@syntax-dispatch oU1616@t '(#(scheme-id quote) any)))) (if oU1618@ls/false (apply (lambda (oU161a@dx) (list (oUd07@scheme-stx 'quote) (cons oU161a@dx oU1614@dy))) oU1618@ls/false) (let ((oU161c@t oU1616@t)) (let ((oU161e@ls/false (oUd7f@syntax-dispatch oU161c@t '_))) (if oU161e@ls/false (apply (lambda () (let ((oU1620@t oU1614@dy)) (let ((oU1622@ls/false (oUd7f@syntax-dispatch oU1620@t '()))) (if oU1622@ls/false (apply (lambda () (list (oUd07@scheme-stx 'list) oU160c@x)) oU1622@ls/false) (let ((oU1624@t oU1620@t)) (let ((oU1626@ls/false (oUd7f@syntax-dispatch oU1624@t '_))) (if oU1626@ls/false (apply (lambda () (list (oUd07@scheme-stx 'cons) oU160c@x oU160d@y)) oU1626@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1624@t)))))))) oU161e@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU161c@t)))))))) oU1612@ls/false) (let ((oU1628@t oU1610@t)) (let ((oU162a@ls/false (oUd7f@syntax-dispatch oU1628@t '(#(scheme-id list) . each-any)))) (if oU162a@ls/false (apply (lambda (oU162c@stuff) (cons* (oUd07@scheme-stx 'list) oU160c@x oU162c@stuff)) oU162a@ls/false) (let ((oU162e@t oU1628@t)) (let ((oU1630@ls/false (oUd7f@syntax-dispatch oU162e@t '_))) (if oU1630@ls/false (apply (lambda () (list (oUd07@scheme-stx 'cons) oU160c@x oU160d@y)) oU1630@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU162e@t)))))))))))) (set! oU1559@quasiappend (lambda (oU15f2@x oU15f3@y) (let ((oU15f6@ls (let oU15fa@f ((oU15f8@x oU15f2@x)) (if (null? oU15f8@x) (let ((oU15fc@t oU15f3@y)) (let ((oU15fe@ls/false (oUd7f@syntax-dispatch oU15fc@t '(#(scheme-id quote) ())))) (if oU15fe@ls/false (apply (lambda () '()) oU15fe@ls/false) (let ((oU1600@t oU15fc@t)) (let ((oU1602@ls/false (oUd7f@syntax-dispatch oU1600@t '_))) (if oU1602@ls/false (apply (lambda () (list oU15f3@y)) oU1602@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1600@t))))))) (let ((oU1604@t (car oU15f8@x))) (let ((oU1606@ls/false (oUd7f@syntax-dispatch oU1604@t '(#(scheme-id quote) ())))) (if oU1606@ls/false (apply (lambda () (oU15fa@f (cdr oU15f8@x))) oU1606@ls/false) (let ((oU1608@t oU1604@t)) (let ((oU160a@ls/false (oUd7f@syntax-dispatch oU1608@t '_))) (if oU160a@ls/false (apply (lambda () (cons (car oU15f8@x) (oU15fa@f (cdr oU15f8@x)))) oU160a@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1608@t))))))))))) (if (null? oU15f6@ls) (list (oUd07@scheme-stx 'quote) '()) (if (null? (cdr oU15f6@ls)) (car oU15f6@ls) (cons* (oUd07@scheme-stx 'append) oU15f6@ls)))))) (set! oU155b@quasivector (lambda (oU15c0@x) (let ((oU15c2@pat-x oU15c0@x)) (let ((oU15c4@t oU15c2@pat-x)) (let ((oU15c6@ls/false (oUd7f@syntax-dispatch oU15c4@t '(#(scheme-id quote) each-any)))) (if oU15c6@ls/false (apply (lambda (oU15c8@x*) (list (oUd07@scheme-stx 'quote) (list->vector oU15c8@x*))) oU15c6@ls/false) (let ((oU15ca@t oU15c4@t)) (let ((oU15cc@ls/false (oUd7f@syntax-dispatch oU15ca@t '_))) (if oU15cc@ls/false (apply (lambda () (let oU15d4@f ((oU15ce@x oU15c0@x) (oU15cf@k (lambda (oU15d2@ls) (cons* (oUd07@scheme-stx 'vector) oU15d2@ls)))) (let ((oU15d6@t oU15ce@x)) (let ((oU15d8@ls/false (oUd7f@syntax-dispatch oU15d6@t '(#(scheme-id quote) each-any)))) (if oU15d8@ls/false (apply (lambda (oU15da@x*) (oU15cf@k (map (lambda (oU15dc@x) (list (oUd07@scheme-stx 'quote) oU15dc@x)) oU15da@x*))) oU15d8@ls/false) (let ((oU15de@t oU15d6@t)) (let ((oU15e0@ls/false (oUd7f@syntax-dispatch oU15de@t '(#(scheme-id list) . each-any)))) (if oU15e0@ls/false (apply (lambda (oU15e2@x*) (oU15cf@k oU15e2@x*)) oU15e0@ls/false) (let ((oU15e4@t oU15de@t)) (let ((oU15e6@ls/false (oUd7f@syntax-dispatch oU15e4@t '(#(scheme-id cons) any any)))) (if oU15e6@ls/false (apply (lambda (oU15e8@x oU15e9@y) (oU15d4@f oU15e9@y (lambda (oU15ec@ls) (oU15cf@k (cons oU15e8@x oU15ec@ls))))) oU15e6@ls/false) (let ((oU15ee@t oU15e4@t)) (let ((oU15f0@ls/false (oUd7f@syntax-dispatch oU15ee@t '_))) (if oU15f0@ls/false (apply (lambda () (list (oUd07@scheme-stx 'list->vector) oU15c2@pat-x)) oU15f0@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU15ee@t))))))))))))))) oU15cc@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU15ca@t)))))))))) (set! oU155d@vquasi (lambda (oU159e@p oU159f@lev) (let ((oU15a2@t oU159e@p)) (let ((oU15a4@ls/false (oUd7f@syntax-dispatch oU15a2@t '(any . any)))) (if oU15a4@ls/false (apply (lambda (oU15a6@p oU15a7@q) (let ((oU15aa@t oU15a6@p)) (let ((oU15ac@ls/false (oUd7f@syntax-dispatch oU15aa@t '(#(scheme-id unquote) . each-any)))) (if oU15ac@ls/false (apply (lambda (oU15ae@p) (if (= oU159f@lev '0) (oU1555@quasicons* oU15ae@p (oU155d@vquasi oU15a7@q oU159f@lev)) (oU1557@quasicons (oU1557@quasicons (oU1539@datum 'unquote) (oU155f@quasi oU15ae@p (- oU159f@lev '1))) (oU155d@vquasi oU15a7@q oU159f@lev)))) oU15ac@ls/false) (let ((oU15b0@t oU15aa@t)) (let ((oU15b2@ls/false (oUd7f@syntax-dispatch oU15b0@t '(#(scheme-id unquote-splicing) . each-any)))) (if oU15b2@ls/false (apply (lambda (oU15b4@p) (if (= oU159f@lev '0) (oU1559@quasiappend oU15b4@p (oU155d@vquasi oU15a7@q oU159f@lev)) (oU1557@quasicons (oU1557@quasicons (oU1539@datum 'unquote-splicing) (oU155f@quasi oU15b4@p (- oU159f@lev '1))) (oU155d@vquasi oU15a7@q oU159f@lev)))) oU15b2@ls/false) (let ((oU15b6@t oU15b0@t)) (let ((oU15b8@ls/false (oUd7f@syntax-dispatch oU15b6@t 'any))) (if oU15b8@ls/false (apply (lambda (oU15ba@p) (oU1557@quasicons (oU155f@quasi oU15ba@p oU159f@lev) (oU155d@vquasi oU15a7@q oU159f@lev))) oU15b8@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU15b6@t))))))))))) oU15a4@ls/false) (let ((oU15bc@t oU15a2@t)) (let ((oU15be@ls/false (oUd7f@syntax-dispatch oU15bc@t '()))) (if oU15be@ls/false (apply (lambda () (list (oUd07@scheme-stx 'quote) '())) oU15be@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU15bc@t))))))))) (set! oU155f@quasi (lambda (oU1568@p oU1569@lev) (let ((oU156c@t oU1568@p)) (let ((oU156e@ls/false (oUd7f@syntax-dispatch oU156c@t '(#(scheme-id unquote) any)))) (if oU156e@ls/false (apply (lambda (oU1570@p) (if (= oU1569@lev '0) oU1570@p (oU1557@quasicons (oU1539@datum 'unquote) (oU155f@quasi (list oU1570@p) (- oU1569@lev '1))))) oU156e@ls/false) (let ((oU1572@t oU156c@t)) (let ((oU1574@ls/false (oUd7f@syntax-dispatch oU1572@t '((#(scheme-id unquote) . each-any) . any)))) (if oU1574@ls/false (apply (lambda (oU1576@p oU1577@q) (if (= oU1569@lev '0) (oU1555@quasicons* oU1576@p (oU155f@quasi oU1577@q oU1569@lev)) (oU1557@quasicons (oU1557@quasicons (oU1539@datum 'unquote) (oU155f@quasi oU1576@p (- oU1569@lev '1))) (oU155f@quasi oU1577@q oU1569@lev)))) oU1574@ls/false) (let ((oU157a@t oU1572@t)) (let ((oU157c@ls/false (oUd7f@syntax-dispatch oU157a@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if oU157c@ls/false (apply (lambda (oU157e@p oU157f@q) (if (= oU1569@lev '0) (oU1559@quasiappend oU157e@p (oU155f@quasi oU157f@q oU1569@lev)) (oU1557@quasicons (oU1557@quasicons (oU1539@datum 'unquote-splicing) (oU155f@quasi oU157e@p (- oU1569@lev '1))) (oU155f@quasi oU157f@q oU1569@lev)))) oU157c@ls/false) (let ((oU1582@t oU157a@t)) (let ((oU1584@ls/false (oUd7f@syntax-dispatch oU1582@t '(#(scheme-id quasiquote) any)))) (if oU1584@ls/false (apply (lambda (oU1586@p) (oU1557@quasicons (oU1539@datum 'quasiquote) (oU155f@quasi (list oU1586@p) (+ oU1569@lev '1)))) oU1584@ls/false) (let ((oU1588@t oU1582@t)) (let ((oU158a@ls/false (oUd7f@syntax-dispatch oU1588@t '(any . any)))) (if oU158a@ls/false (apply (lambda (oU158c@p oU158d@q) (oU1557@quasicons (oU155f@quasi oU158c@p oU1569@lev) (oU155f@quasi oU158d@q oU1569@lev))) oU158a@ls/false) (let ((oU1590@t oU1588@t)) (let ((oU1592@ls/false (oUd7f@syntax-dispatch oU1590@t '#(vector each-any)))) (if (and oU1592@ls/false (apply (lambda (oU1594@x) (not (oUb44@stx? oU1594@x))) oU1592@ls/false)) (apply (lambda (oU1596@x) (oU155b@quasivector (oU155d@vquasi oU1596@x oU1569@lev))) oU1592@ls/false) (let ((oU1598@t oU1590@t)) (let ((oU159a@ls/false (oUd7f@syntax-dispatch oU1598@t 'any))) (if oU159a@ls/false (apply (lambda (oU159c@p) (list (oUd07@scheme-stx 'quote) oU159c@p)) oU159a@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1598@t)))))))))))))))))))))))) (lambda (oU1560@x) (let ((oU1562@t oU1560@x)) (let ((oU1564@ls/false (oUd7f@syntax-dispatch oU1562@t '(_ any)))) (if oU1564@ls/false (apply (lambda (oU1566@e) (oU155f@quasi oU1566@e '0)) oU1564@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1562@t)))))))) (set! oU284c@oUd6d@quasiquote-macro oUd6d@quasiquote-macro) (set! oUd6f@quasisyntax-macro (let ((oU163d@quasi '#f)) (begin (set! oU163d@quasi (lambda (oU1658@p oU1659@lev) (let ((oU165c@t oU1658@p)) (let ((oU165e@ls/false (oUd7f@syntax-dispatch oU165c@t '(#(scheme-id unsyntax) any)))) (if oU165e@ls/false (apply (lambda (oU1660@p) (if (= oU1659@lev '0) (let ((oU1662@g (gensym))) (values (list oU1662@g) (list oU1660@p) oU1662@g)) (call-with-values (lambda () (oU163d@quasi oU1660@p (- oU1659@lev '1))) (lambda (oU166a@oU1665 oU166b@oU1667 oU166c@oU1669) (let ((oU1670@p oU166c@oU1669) (oU1671@rhs* oU166b@oU1667) (oU1672@lhs* oU166a@oU1665)) (values oU1672@lhs* oU1671@rhs* (list 'unsyntax oU1670@p))))))) oU165e@ls/false) (let ((oU1676@t oU165c@t)) (let ((oU1678@ls/false (oUd7f@syntax-dispatch oU1676@t '#(scheme-id unsyntax)))) (if (and oU1678@ls/false (apply (lambda () (= oU1659@lev '0)) oU1678@ls/false)) (apply (lambda () (oUe5f@syntax-violation '#f '"incorrect use of unsyntax" oU1658@p)) oU1678@ls/false) (let ((oU167a@t oU1676@t)) (let ((oU167c@ls/false (oUd7f@syntax-dispatch oU167a@t '((#(scheme-id unsyntax) . each-any) . any)))) (if oU167c@ls/false (apply (lambda (oU167e@p* oU167f@q) (call-with-values (lambda () (oU163d@quasi oU167f@q oU1659@lev)) (lambda (oU1688@oU1683 oU1689@oU1685 oU168a@oU1687) (let ((oU168e@q oU168a@oU1687) (oU168f@rhs* oU1689@oU1685) (oU1690@lhs* oU1688@oU1683)) (if (= oU1659@lev '0) (let ((oU1694@g* (map (lambda (oU1696@x) (gensym)) oU167e@p*))) (values (append oU1694@g* oU1690@lhs*) (append oU167e@p* oU168f@rhs*) (append oU1694@g* oU168e@q))) (call-with-values (lambda () (oU163d@quasi oU167e@p* (- oU1659@lev '1))) (lambda (oU169e@oU1699 oU169f@oU169b oU16a0@oU169d) (let ((oU16a4@p* oU16a0@oU169d) (oU16a5@rhs2* oU169f@oU169b) (oU16a6@lhs2* oU169e@oU1699)) (values (append oU16a6@lhs2* oU1690@lhs*) (append oU16a5@rhs2* oU168f@rhs*) (cons (cons 'unsyntax oU16a4@p*) oU168e@q)))))))))) oU167c@ls/false) (let ((oU16aa@t oU167a@t)) (let ((oU16ac@ls/false (oUd7f@syntax-dispatch oU16aa@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if oU16ac@ls/false (apply (lambda (oU16ae@p* oU16af@q) (call-with-values (lambda () (oU163d@quasi oU16af@q oU1659@lev)) (lambda (oU16b8@oU16b3 oU16b9@oU16b5 oU16ba@oU16b7) (let ((oU16be@q oU16ba@oU16b7) (oU16bf@rhs* oU16b9@oU16b5) (oU16c0@lhs* oU16b8@oU16b3)) (if (= oU1659@lev '0) (let ((oU16c4@g* (map (lambda (oU16c6@x) (gensym)) oU16ae@p*))) (values (append (map (lambda (oU16c8@g) (cons oU16c8@g '(...))) oU16c4@g*) oU16c0@lhs*) (append oU16ae@p* oU16bf@rhs*) (append (apply append (map (lambda (oU16ca@g) (cons oU16ca@g '(...))) oU16c4@g*)) oU16be@q))) (call-with-values (lambda () (oU163d@quasi oU16ae@p* (- oU1659@lev '1))) (lambda (oU16d2@oU16cd oU16d3@oU16cf oU16d4@oU16d1) (let ((oU16d8@p* oU16d4@oU16d1) (oU16d9@rhs2* oU16d3@oU16cf) (oU16da@lhs2* oU16d2@oU16cd)) (values (append oU16da@lhs2* oU16c0@lhs*) (append oU16d9@rhs2* oU16bf@rhs*) (cons (cons 'unsyntax-splicing oU16d8@p*) oU16be@q)))))))))) oU16ac@ls/false) (let ((oU16de@t oU16aa@t)) (let ((oU16e0@ls/false (oUd7f@syntax-dispatch oU16de@t '#(scheme-id unsyntax-splicing)))) (if (and oU16e0@ls/false (apply (lambda () (= oU1659@lev '0)) oU16e0@ls/false)) (apply (lambda () (oUe5f@syntax-violation '#f '"incorrect use of unsyntax-splicing" oU1658@p)) oU16e0@ls/false) (let ((oU16e2@t oU16de@t)) (let ((oU16e4@ls/false (oUd7f@syntax-dispatch oU16e2@t '(#(scheme-id quasisyntax) any)))) (if oU16e4@ls/false (apply (lambda (oU16e6@p) (call-with-values (lambda () (oU163d@quasi oU16e6@p (+ oU1659@lev '1))) (lambda (oU16ee@oU16e9 oU16ef@oU16eb oU16f0@oU16ed) (let ((oU16f4@p oU16f0@oU16ed) (oU16f5@rhs* oU16ef@oU16eb) (oU16f6@lhs* oU16ee@oU16e9)) (values oU16f6@lhs* oU16f5@rhs* (list 'quasisyntax oU16f4@p)))))) oU16e4@ls/false) (let ((oU16fa@t oU16e2@t)) (let ((oU16fc@ls/false (oUd7f@syntax-dispatch oU16fa@t '(any . any)))) (if oU16fc@ls/false (apply (lambda (oU16fe@p oU16ff@q) (call-with-values (lambda () (oU163d@quasi oU16fe@p oU1659@lev)) (lambda (oU170e@oU1703 oU170f@oU1705 oU1710@oU1707) (call-with-values (lambda () (oU163d@quasi oU16ff@q oU1659@lev)) (lambda (oU1714@oU1709 oU1715@oU170b oU1716@oU170d) (let ((oU171a@q oU1716@oU170d) (oU171b@rhs2* oU1715@oU170b) (oU171c@lhs2* oU1714@oU1709) (oU171d@p oU1710@oU1707) (oU171e@rhs* oU170f@oU1705) (oU171f@lhs* oU170e@oU1703)) (values (append oU171c@lhs2* oU171f@lhs*) (append oU171b@rhs2* oU171e@rhs*) (cons oU171d@p oU171a@q)))))))) oU16fc@ls/false) (let ((oU1726@t oU16fa@t)) (let ((oU1728@ls/false (oUd7f@syntax-dispatch oU1726@t '#(vector each-any)))) (if oU1728@ls/false (apply (lambda (oU172a@x*) (call-with-values (lambda () (oU163d@quasi oU172a@x* oU1659@lev)) (lambda (oU1732@oU172d oU1733@oU172f oU1734@oU1731) (let ((oU1738@x* oU1734@oU1731) (oU1739@rhs* oU1733@oU172f) (oU173a@lhs* oU1732@oU172d)) (values oU173a@lhs* oU1739@rhs* (list->vector oU1738@x*)))))) oU1728@ls/false) (let ((oU173e@t oU1726@t)) (let ((oU1740@ls/false (oUd7f@syntax-dispatch oU173e@t '_))) (if oU1740@ls/false (apply (lambda () (values '() '() oU1658@p)) oU1740@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU173e@t)))))))))))))))))))))))))))))) (lambda (oU163e@x) (let ((oU1640@t oU163e@x)) (let ((oU1642@ls/false (oUd7f@syntax-dispatch oU1640@t '(_ any)))) (if oU1642@ls/false (apply (lambda (oU1644@e) (call-with-values (lambda () (oU163d@quasi oU1644@e '0)) (lambda (oU164c@oU1647 oU164d@oU1649 oU164e@oU164b) (let ((oU1652@v oU164e@oU164b) (oU1653@rhs* oU164d@oU1649) (oU1654@lhs* oU164c@oU1647)) (oUd35@bless (list 'syntax-case (cons 'list oU1653@rhs*) '() (list oU1654@lhs* (list 'syntax oU1652@v)))))))) oU1642@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1640@t)))))))) (set! oU284d@oUd6f@quasisyntax-macro oUd6f@quasisyntax-macro) (set! oUd71@define-struct-macro (lambda (oU1742@stx) (oUe5f@syntax-violation '#f '"define-struct not supported" oU1742@stx))) (set! oU284e@oUd71@define-struct-macro oUd71@define-struct-macro) (set! oUd73@define-record-type-macro (lambda (oU1744@x) (let ((oU1747@id '#f) (oU1749@get-record-name '#f) (oU174b@get-record-constructor-name '#f) (oU174d@get-record-predicate-name '#f) (oU174f@get-clause '#f) (oU1751@foo-rtd-code '#f) (oU1753@parent-rtd-code '#f) (oU1755@parent-rcd-code '#f) (oU1757@foo-rcd-code '#f) (oU1759@get-protocol-code '#f) (oU175b@get-fields '#f) (oU175d@get-mutator-indices '#f) (oU175f@get-mutators '#f) (oU1761@get-accessors '#f) (oU1763@enumerate '#f) (oU1765@do-define-record '#f) (oU1767@verify-clauses '#f)) (begin (set! oU1747@id (lambda (oU193a@ctxt . oU193c@str*) (oUe63@datum->syntax oU193a@ctxt (string->symbol (apply string-append (map (lambda (oU193e@x) (if (symbol? oU193e@x) (symbol->string oU193e@x) (if (string? oU193e@x) oU193e@x (assertion-violation 'define-record-type '"BUG")))) oU193c@str*)))))) (set! oU1749@get-record-name (lambda (oU1928@spec) (let ((oU192a@t oU1928@spec)) (let ((oU192c@ls/false (oUd7f@syntax-dispatch oU192a@t '(any any any)))) (if oU192c@ls/false (apply (lambda (oU192e@foo oU192f@make-foo oU1930@foo?) oU192e@foo) oU192c@ls/false) (let ((oU1934@t oU192a@t)) (let ((oU1936@ls/false (oUd7f@syntax-dispatch oU1934@t 'any))) (if oU1936@ls/false (apply (lambda (oU1938@foo) oU1938@foo) oU1936@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1934@t))))))))) (set! oU174b@get-record-constructor-name (lambda (oU1914@spec) (let ((oU1916@t oU1914@spec)) (let ((oU1918@ls/false (oUd7f@syntax-dispatch oU1916@t '(any any any)))) (if oU1918@ls/false (apply (lambda (oU191a@foo oU191b@make-foo oU191c@foo?) oU191b@make-foo) oU1918@ls/false) (let ((oU1920@t oU1916@t)) (let ((oU1922@ls/false (oUd7f@syntax-dispatch oU1920@t 'any))) (if (and oU1922@ls/false (apply (lambda (oU1924@foo) (oUb78@id? oU1924@foo)) oU1922@ls/false)) (apply (lambda (oU1926@foo) (oU1747@id oU1926@foo '"make-" (oUb8c@stx->datum oU1926@foo))) oU1922@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1920@t))))))))) (set! oU174d@get-record-predicate-name (lambda (oU1900@spec) (let ((oU1902@t oU1900@spec)) (let ((oU1904@ls/false (oUd7f@syntax-dispatch oU1902@t '(any any any)))) (if oU1904@ls/false (apply (lambda (oU1906@foo oU1907@make-foo oU1908@foo?) oU1908@foo?) oU1904@ls/false) (let ((oU190c@t oU1902@t)) (let ((oU190e@ls/false (oUd7f@syntax-dispatch oU190c@t 'any))) (if (and oU190e@ls/false (apply (lambda (oU1910@foo) (oUb78@id? oU1910@foo)) oU190e@ls/false)) (apply (lambda (oU1912@foo) (oU1747@id oU1912@foo (oUb8c@stx->datum oU1912@foo) '"?")) oU190e@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU190c@t))))))))) (set! oU174f@get-clause (lambda (oU18ee@id oU18ef@ls) (let ((oU18f2@t oU18ef@ls)) (let ((oU18f4@ls/false (oUd7f@syntax-dispatch oU18f2@t '()))) (if oU18f4@ls/false (apply (lambda () '#f) oU18f4@ls/false) (let ((oU18f6@t oU18f2@t)) (let ((oU18f8@ls/false (oUd7f@syntax-dispatch oU18f6@t '((any . any) . any)))) (if oU18f8@ls/false (apply (lambda (oU18fa@x oU18fb@rest oU18fc@ls) (if (oUb7e@free-id=? (oUd35@bless oU18ee@id) oU18fa@x) (cons oU18fa@x oU18fb@rest) (oU174f@get-clause oU18ee@id oU18fc@ls))) oU18f8@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU18f6@t))))))))) (set! oU1751@foo-rtd-code (lambda (oU189c@name oU189d@clause* oU189e@parent-rtd-code) (let ((oU18a3@convert-field-spec* '#f)) (begin (set! oU18a3@convert-field-spec* (lambda (oU18d4@ls) (list->vector (map (lambda (oU18d6@x) (let ((oU18d8@t oU18d6@x)) (let ((oU18da@ls/false (oUd7f@syntax-dispatch oU18d8@t '(#(scheme-id mutable) any . any)))) (if oU18da@ls/false (apply (lambda (oU18dc@name oU18dd@rest) (list 'mutable oU18dc@name)) oU18da@ls/false) (let ((oU18e0@t oU18d8@t)) (let ((oU18e2@ls/false (oUd7f@syntax-dispatch oU18e0@t '(#(scheme-id immutable) any . any)))) (if oU18e2@ls/false (apply (lambda (oU18e4@name oU18e5@rest) (list 'immutable oU18e4@name)) oU18e2@ls/false) (let ((oU18e8@t oU18e0@t)) (let ((oU18ea@ls/false (oUd7f@syntax-dispatch oU18e8@t 'any))) (if oU18ea@ls/false (apply (lambda (oU18ec@name) (list 'immutable oU18ec@name)) oU18ea@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU18e8@t))))))))))) oU18d4@ls)))) (let ((oU18a4@uid-code (let ((oU18ac@t (oU174f@get-clause 'nongenerative oU189d@clause*))) (let ((oU18ae@ls/false (oUd7f@syntax-dispatch oU18ac@t '(_)))) (if oU18ae@ls/false (apply (lambda () (list 'quote (gensym))) oU18ae@ls/false) (let ((oU18b0@t oU18ac@t)) (let ((oU18b2@ls/false (oUd7f@syntax-dispatch oU18b0@t '(_ any)))) (if oU18b2@ls/false (apply (lambda (oU18b4@uid) (list 'quote oU18b4@uid)) oU18b2@ls/false) (let ((oU18b6@t oU18b0@t)) (let ((oU18b8@ls/false (oUd7f@syntax-dispatch oU18b6@t '_))) (if oU18b8@ls/false (apply (lambda () '#f) oU18b8@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU18b6@t))))))))))) (oU18a5@sealed? (let ((oU18ba@t (oU174f@get-clause 'sealed oU189d@clause*))) (let ((oU18bc@ls/false (oUd7f@syntax-dispatch oU18ba@t '(_ #(atom #t))))) (if oU18bc@ls/false (apply (lambda () '#t) oU18bc@ls/false) (let ((oU18be@t oU18ba@t)) (let ((oU18c0@ls/false (oUd7f@syntax-dispatch oU18be@t '_))) (if oU18c0@ls/false (apply (lambda () '#f) oU18c0@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU18be@t)))))))) (oU18a6@opaque? (let ((oU18c2@t (oU174f@get-clause 'opaque oU189d@clause*))) (let ((oU18c4@ls/false (oUd7f@syntax-dispatch oU18c2@t '(_ #(atom #t))))) (if oU18c4@ls/false (apply (lambda () '#t) oU18c4@ls/false) (let ((oU18c6@t oU18c2@t)) (let ((oU18c8@ls/false (oUd7f@syntax-dispatch oU18c6@t '_))) (if oU18c8@ls/false (apply (lambda () '#f) oU18c8@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU18c6@t)))))))) (oU18a7@fields (let ((oU18ca@t (oU174f@get-clause 'fields oU189d@clause*))) (let ((oU18cc@ls/false (oUd7f@syntax-dispatch oU18ca@t '(_ . each-any)))) (if oU18cc@ls/false (apply (lambda (oU18ce@field-spec*) (list 'quote (oU18a3@convert-field-spec* oU18ce@field-spec*))) oU18cc@ls/false) (let ((oU18d0@t oU18ca@t)) (let ((oU18d2@ls/false (oUd7f@syntax-dispatch oU18d0@t '_))) (if oU18d2@ls/false (apply (lambda () ''#()) oU18d2@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU18d0@t))))))))) (oUd35@bless (list 'make-record-type-descriptor (list 'quote oU189c@name) oU189e@parent-rtd-code oU18a4@uid-code oU18a5@sealed? oU18a6@opaque? oU18a7@fields))))))) (set! oU1753@parent-rtd-code (lambda (oU1884@clause*) (let ((oU1886@t (oU174f@get-clause 'parent oU1884@clause*))) (let ((oU1888@ls/false (oUd7f@syntax-dispatch oU1886@t '(_ any)))) (if oU1888@ls/false (apply (lambda (oU188a@name) (list 'record-type-descriptor oU188a@name)) oU1888@ls/false) (let ((oU188c@t oU1886@t)) (let ((oU188e@ls/false (oUd7f@syntax-dispatch oU188c@t '#(atom #f)))) (if oU188e@ls/false (apply (lambda () (let ((oU1890@t (oU174f@get-clause 'parent-rtd oU1884@clause*))) (let ((oU1892@ls/false (oUd7f@syntax-dispatch oU1890@t '(_ any any)))) (if oU1892@ls/false (apply (lambda (oU1894@rtd oU1895@rcd) oU1894@rtd) oU1892@ls/false) (let ((oU1898@t oU1890@t)) (let ((oU189a@ls/false (oUd7f@syntax-dispatch oU1898@t '#(atom #f)))) (if oU189a@ls/false (apply (lambda () '#f) oU189a@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1898@t)))))))) oU188e@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU188c@t))))))))) (set! oU1755@parent-rcd-code (lambda (oU186c@clause*) (let ((oU186e@t (oU174f@get-clause 'parent oU186c@clause*))) (let ((oU1870@ls/false (oUd7f@syntax-dispatch oU186e@t '(_ any)))) (if oU1870@ls/false (apply (lambda (oU1872@name) (list 'record-constructor-descriptor oU1872@name)) oU1870@ls/false) (let ((oU1874@t oU186e@t)) (let ((oU1876@ls/false (oUd7f@syntax-dispatch oU1874@t '#(atom #f)))) (if oU1876@ls/false (apply (lambda () (let ((oU1878@t (oU174f@get-clause 'parent-rtd oU186c@clause*))) (let ((oU187a@ls/false (oUd7f@syntax-dispatch oU1878@t '(_ any any)))) (if oU187a@ls/false (apply (lambda (oU187c@rtd oU187d@rcd) oU187d@rcd) oU187a@ls/false) (let ((oU1880@t oU1878@t)) (let ((oU1882@ls/false (oUd7f@syntax-dispatch oU1880@t '#(atom #f)))) (if oU1882@ls/false (apply (lambda () '#f) oU1882@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1880@t)))))))) oU1876@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1874@t))))))))) (set! oU1757@foo-rcd-code (lambda (oU1864@clause* oU1865@foo-rtd oU1866@protocol oU1867@parent-rcd-code) (list 'make-record-constructor-descriptor oU1865@foo-rtd oU1867@parent-rcd-code oU1866@protocol))) (set! oU1759@get-protocol-code (lambda (oU1858@clause*) (let ((oU185a@t (oU174f@get-clause 'protocol oU1858@clause*))) (let ((oU185c@ls/false (oUd7f@syntax-dispatch oU185a@t '(_ any)))) (if oU185c@ls/false (apply (lambda (oU185e@expr) oU185e@expr) oU185c@ls/false) (let ((oU1860@t oU185a@t)) (let ((oU1862@ls/false (oUd7f@syntax-dispatch oU1860@t '_))) (if oU1862@ls/false (apply (lambda () '#f) oU1862@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1860@t))))))))) (set! oU175b@get-fields (lambda (oU1846@clause*) (let ((oU1848@t oU1846@clause*)) (let ((oU184a@ls/false (oUd7f@syntax-dispatch oU1848@t '()))) (if oU184a@ls/false (apply (lambda () '()) oU184a@ls/false) (let ((oU184c@t oU1848@t)) (let ((oU184e@ls/false (oUd7f@syntax-dispatch oU184c@t '((#(scheme-id fields) . each-any) . _)))) (if oU184e@ls/false (apply (lambda (oU1850@f*) oU1850@f*) oU184e@ls/false) (let ((oU1852@t oU184c@t)) (let ((oU1854@ls/false (oUd7f@syntax-dispatch oU1852@t '(_ . any)))) (if oU1854@ls/false (apply (lambda (oU1856@rest) (oU175b@get-fields oU1856@rest)) oU1854@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1852@t)))))))))))) (set! oU175d@get-mutator-indices (lambda (oU182e@fields) (let oU1834@f ((oU1830@fields oU182e@fields) (oU1831@i '0)) (let ((oU1836@t oU1830@fields)) (let ((oU1838@ls/false (oUd7f@syntax-dispatch oU1836@t '()))) (if oU1838@ls/false (apply (lambda () '()) oU1838@ls/false) (let ((oU183a@t oU1836@t)) (let ((oU183c@ls/false (oUd7f@syntax-dispatch oU183a@t '((#(scheme-id mutable) . _) . any)))) (if oU183c@ls/false (apply (lambda (oU183e@rest) (cons oU1831@i (oU1834@f oU183e@rest (+ oU1831@i '1)))) oU183c@ls/false) (let ((oU1840@t oU183a@t)) (let ((oU1842@ls/false (oUd7f@syntax-dispatch oU1840@t '(_ . any)))) (if oU1842@ls/false (apply (lambda (oU1844@rest) (oU1834@f oU1844@rest (+ oU1831@i '1))) oU1842@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1840@t))))))))))))) (set! oU175f@get-mutators (lambda (oU1804@foo oU1805@fields) (let ((oU1809@gen-name '#f)) (begin (set! oU1809@gen-name (lambda (oU182c@x) (oUe63@datum->syntax oU1804@foo (string->symbol (string-append (symbol->string (oUe65@syntax->datum oU1804@foo)) '"-" (symbol->string (oUe65@syntax->datum oU182c@x)) '"-set!"))))) (let oU180c@f ((oU180a@fields oU1805@fields)) (let ((oU180e@t oU180a@fields)) (let ((oU1810@ls/false (oUd7f@syntax-dispatch oU180e@t '()))) (if oU1810@ls/false (apply (lambda () '()) oU1810@ls/false) (let ((oU1812@t oU180e@t)) (let ((oU1814@ls/false (oUd7f@syntax-dispatch oU1812@t '((#(scheme-id mutable) any any any) . any)))) (if oU1814@ls/false (apply (lambda (oU1816@name oU1817@accessor oU1818@mutator oU1819@rest) (cons oU1818@mutator (oU180c@f oU1819@rest))) oU1814@ls/false) (let ((oU181e@t oU1812@t)) (let ((oU1820@ls/false (oUd7f@syntax-dispatch oU181e@t '((#(scheme-id mutable) any) . any)))) (if oU1820@ls/false (apply (lambda (oU1822@name oU1823@rest) (cons (oU1809@gen-name oU1822@name) (oU180c@f oU1823@rest))) oU1820@ls/false) (let ((oU1826@t oU181e@t)) (let ((oU1828@ls/false (oUd7f@syntax-dispatch oU1826@t '(_ . any)))) (if oU1828@ls/false (apply (lambda (oU182a@rest) (oU180c@f oU182a@rest)) oU1828@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1826@t)))))))))))))))))) (set! oU1761@get-accessors (lambda (oU17c0@foo oU17c1@fields) (let ((oU17c5@gen-name '#f)) (begin (set! oU17c5@gen-name (lambda (oU1802@x) (oUe63@datum->syntax oU17c0@foo (string->symbol (string-append (symbol->string (oUe65@syntax->datum oU17c0@foo)) '"-" (symbol->string (oUe65@syntax->datum oU1802@x))))))) (map (lambda (oU17c6@field) (let ((oU17c8@t oU17c6@field)) (let ((oU17ca@ls/false (oUd7f@syntax-dispatch oU17c8@t '(#(scheme-id mutable) any any any)))) (if (and oU17ca@ls/false (apply (lambda (oU17cc@name oU17cd@accessor oU17ce@mutator) (oUb78@id? oU17cd@accessor)) oU17ca@ls/false)) (apply (lambda (oU17d2@name oU17d3@accessor oU17d4@mutator) oU17d3@accessor) oU17ca@ls/false) (let ((oU17d8@t oU17c8@t)) (let ((oU17da@ls/false (oUd7f@syntax-dispatch oU17d8@t '(#(scheme-id immutable) any any)))) (if (and oU17da@ls/false (apply (lambda (oU17dc@name oU17dd@accessor) (oUb78@id? oU17dd@accessor)) oU17da@ls/false)) (apply (lambda (oU17e0@name oU17e1@accessor) oU17e1@accessor) oU17da@ls/false) (let ((oU17e4@t oU17d8@t)) (let ((oU17e6@ls/false (oUd7f@syntax-dispatch oU17e4@t '(#(scheme-id mutable) any)))) (if (and oU17e6@ls/false (apply (lambda (oU17e8@name) (oUb78@id? oU17e8@name)) oU17e6@ls/false)) (apply (lambda (oU17ea@name) (oU17c5@gen-name oU17ea@name)) oU17e6@ls/false) (let ((oU17ec@t oU17e4@t)) (let ((oU17ee@ls/false (oUd7f@syntax-dispatch oU17ec@t '(#(scheme-id immutable) any)))) (if (and oU17ee@ls/false (apply (lambda (oU17f0@name) (oUb78@id? oU17f0@name)) oU17ee@ls/false)) (apply (lambda (oU17f2@name) (oU17c5@gen-name oU17f2@name)) oU17ee@ls/false) (let ((oU17f4@t oU17ec@t)) (let ((oU17f6@ls/false (oUd7f@syntax-dispatch oU17f4@t 'any))) (if (and oU17f6@ls/false (apply (lambda (oU17f8@name) (oUb78@id? oU17f8@name)) oU17f6@ls/false)) (apply (lambda (oU17fa@name) (oU17c5@gen-name oU17fa@name)) oU17f6@ls/false) (let ((oU17fc@t oU17f4@t)) (let ((oU17fe@ls/false (oUd7f@syntax-dispatch oU17fc@t 'any))) (if oU17fe@ls/false (apply (lambda (oU1800@others) (oUe5f@syntax-violation '#f '"invalid field spec" oU17c6@field)) oU17fe@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU17fc@t)))))))))))))))))))) oU17c1@fields))))) (set! oU1763@enumerate (lambda (oU17b8@ls) (let oU17be@f ((oU17ba@ls oU17b8@ls) (oU17bb@i '0)) (if (null? oU17ba@ls) '() (cons oU17bb@i (oU17be@f (cdr oU17ba@ls) (+ oU17bb@i '1))))))) (set! oU1765@do-define-record (lambda (oU1790@namespec oU1791@clause*) (let ((oU1794@foo (oU1749@get-record-name oU1790@namespec))) (let ((oU1796@foo-rtd (gensym))) (let ((oU1798@foo-rcd (gensym))) (let ((oU179a@protocol (gensym))) (let ((oU179c@make-foo (oU174b@get-record-constructor-name oU1790@namespec))) (let ((oU179e@fields (oU175b@get-fields oU1791@clause*))) (let ((oU17a0@idx* (oU1763@enumerate oU179e@fields))) (let ((oU17a2@foo-x* (oU1761@get-accessors oU1794@foo oU179e@fields))) (let ((oU17a4@set-foo-x!* (oU175f@get-mutators oU1794@foo oU179e@fields))) (let ((oU17a6@set-foo-idx* (oU175d@get-mutator-indices oU179e@fields))) (let ((oU17a8@foo? (oU174d@get-record-predicate-name oU1790@namespec))) (let ((oU17aa@foo-rtd-code (oU1751@foo-rtd-code oU1794@foo oU1791@clause* (oU1753@parent-rtd-code oU1791@clause*)))) (let ((oU17ac@foo-rcd-code (oU1757@foo-rcd-code oU1791@clause* oU1796@foo-rtd oU179a@protocol (oU1755@parent-rcd-code oU1791@clause*)))) (let ((oU17ae@protocol-code (oU1759@get-protocol-code oU1791@clause*))) (oUd35@bless (cons 'begin (cons (list 'define oU1796@foo-rtd oU17aa@foo-rtd-code) (cons (list 'define oU179a@protocol oU17ae@protocol-code) (cons (list 'define oU1798@foo-rcd oU17ac@foo-rcd-code) (cons (list 'define-syntax oU1794@foo (list 'list ''$rtd (list 'syntax oU1796@foo-rtd) (list 'syntax oU1798@foo-rcd))) (cons (list 'define oU17a8@foo? (list 'record-predicate oU1796@foo-rtd)) (cons (list 'define oU179c@make-foo (list 'record-constructor oU1798@foo-rcd)) (append (map (lambda (oU17b0@foo-x oU17b1@idx) (list 'define oU17b0@foo-x (list 'record-accessor oU1796@foo-rtd oU17b1@idx))) oU17a2@foo-x* oU17a0@idx*) (map (lambda (oU17b4@set-foo-x! oU17b5@idx) (list 'define oU17b4@set-foo-x! (list 'record-mutator oU1796@foo-rtd oU17b5@idx))) oU17a4@set-foo-x!* oU17a6@set-foo-idx*)))))))))))))))))))))))))) (set! oU1767@verify-clauses (lambda (oU1770@x oU1771@cls*) (let ((oU1775@valid-kwds '#f) (oU1777@free-id-member? '#f)) (begin (set! oU1775@valid-kwds (map oUd35@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! oU1777@free-id-member? (lambda (oU178c@x oU178d@ls) (and (pair? oU178d@ls) (or (oUb7e@free-id=? oU178c@x (car oU178d@ls)) (oU1777@free-id-member? oU178c@x (cdr oU178d@ls)))))) (let oU177c@f ((oU1778@cls* oU1771@cls*) (oU1779@seen* '())) (if (not (null? oU1778@cls*)) (let ((oU177e@t (car oU1778@cls*))) (let ((oU1780@ls/false (oUd7f@syntax-dispatch oU177e@t '(any . any)))) (if oU1780@ls/false (apply (lambda (oU1782@kwd oU1783@rest) (if (or (not (oUb78@id? oU1782@kwd)) (not (oU1777@free-id-member? oU1782@kwd oU1775@valid-kwds))) (oUe5f@syntax-violation '#f '"not a valid define-record-type keyword" oU1782@kwd) (if (oUb84@bound-id-member? oU1782@kwd oU1779@seen*) (oUe5f@syntax-violation '#f '"duplicate use of keyword " oU1770@x oU1782@kwd) (oU177c@f (cdr oU1778@cls*) (cons oU1782@kwd oU1779@seen*))))) oU1780@ls/false) (let ((oU1786@t oU177e@t)) (let ((oU1788@ls/false (oUd7f@syntax-dispatch oU1786@t 'any))) (if oU1788@ls/false (apply (lambda (oU178a@cls) (oUe5f@syntax-violation '#f '"malformed define-record-type clause" oU178a@cls)) oU1788@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1786@t))))))) (void))))))) (let ((oU1768@t oU1744@x)) (let ((oU176a@ls/false (oUd7f@syntax-dispatch oU1768@t '(_ any . each-any)))) (if oU176a@ls/false (apply (lambda (oU176c@namespec oU176d@clause*) (begin (oU1767@verify-clauses oU1744@x oU176d@clause*) (oU1765@do-define-record oU176c@namespec oU176d@clause*))) oU176a@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1768@t)))))))) (set! oU284f@oUd73@define-record-type-macro oUd73@define-record-type-macro) (set! oUd75@define-condition-type-macro (lambda (oU1940@x) (let ((oU1943@mkname '#f)) (begin (set! oU1943@mkname (lambda (oU1970@name oU1971@suffix) (oUe63@datum->syntax oU1970@name (string->symbol (string-append (symbol->string (oUe65@syntax->datum oU1970@name)) oU1971@suffix))))) (let ((oU1944@t oU1940@x)) (let ((oU1946@ls/false (oUd7f@syntax-dispatch oU1944@t '(any any any any any . #(each (any any)))))) (if (and oU1946@ls/false (apply (lambda (oU1948@ctxt oU1949@name oU194a@super oU194b@constructor oU194c@predicate oU194d@field* oU194e@accessor*) (and (oUb78@id? oU1949@name) (oUb78@id? oU194a@super) (oUb78@id? oU194b@constructor) (oUb78@id? oU194c@predicate) (for-all oUb78@id? oU194d@field*) (for-all oUb78@id? oU194e@accessor*))) oU1946@ls/false)) (apply (lambda (oU1956@ctxt oU1957@name oU1958@super oU1959@constructor oU195a@predicate oU195b@field* oU195c@accessor*) (let ((oU1964@aux-accessor* (map (lambda (oU1966@x) (gensym)) oU195c@accessor*))) (oUd35@bless (cons 'begin (cons (cons 'define-record-type (cons (list oU1957@name oU1959@constructor (gensym)) (cons (list 'parent oU1958@super) (cons (cons 'fields (map (lambda (oU1968@field oU1969@aux) (list 'immutable oU1968@field oU1969@aux)) oU195b@field* oU1964@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define oU195a@predicate (list 'condition-predicate (list 'record-type-descriptor oU1957@name))) (map (lambda (oU196c@accessor oU196d@aux) (list 'define oU196c@accessor (list 'condition-accessor (list 'record-type-descriptor oU1957@name) oU196d@aux))) oU195c@accessor* oU1964@aux-accessor*))))))) oU1946@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1944@t)))))))) (set! oU2850@oUd75@define-condition-type-macro oUd75@define-condition-type-macro) (set! oUd77@incorrect-usage-macro (lambda (oU1974@e) (oUe5f@syntax-violation '#f '"incorrect usage of auxiliary keyword" oU1974@e))) (set! oU2851@oUd77@incorrect-usage-macro oUd77@incorrect-usage-macro) (set! oUd79@parameterize-macro (lambda (oU1976@e) (let ((oU1978@t oU1976@e)) (let ((oU197a@ls/false (oUd7f@syntax-dispatch oU1978@t '(_ () any . each-any)))) (if oU197a@ls/false (apply (lambda (oU197c@b oU197d@b*) (oUd35@bless (cons 'let (cons '() (cons oU197c@b oU197d@b*))))) oU197a@ls/false) (let ((oU1980@t oU1978@t)) (let ((oU1982@ls/false (oUd7f@syntax-dispatch oU1980@t '(_ #(each (any any)) any . each-any)))) (if oU1982@ls/false (apply (lambda (oU1984@olhs* oU1985@orhs* oU1986@b oU1987@b*) (let ((oU198c@lhs* (oUe4d@generate-temporaries oU1984@olhs*)) (oU198d@rhs* (oUe4d@generate-temporaries oU1985@orhs*))) (oUd35@bless (cons (list 'lambda (append oU198c@lhs* oU198d@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (oU1990@lhs oU1991@rhs) (list 'let (list (list 't (list oU1990@lhs))) (list oU1990@lhs oU1991@rhs) (cons 'set! (cons oU1991@rhs '(t))))) oU198c@lhs* oU198d@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons oU1986@b oU1987@b*))) '(swap)))))) (append oU1984@olhs* oU1985@orhs*))))) oU1982@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1980@t))))))))) (set! oU2852@oUd79@parameterize-macro oUd79@parameterize-macro) (set! oUd7b@foreign-call-transformer (lambda (oU1994@e oU1995@r oU1996@mr) (let ((oU199a@t oU1994@e)) (let ((oU199c@ls/false (oUd7f@syntax-dispatch oU199a@t '(_ any . each-any)))) (if oU199c@ls/false (apply (lambda (oU199e@name oU199f@arg*) (cons 'foreign-call (cons (oUda1@chi-expr oU199e@name oU1995@r oU1996@mr) (oUd9d@chi-expr* oU199f@arg* oU1995@r oU1996@mr)))) oU199c@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU199a@t)))))) (set! oU2853@oUd7b@foreign-call-transformer oUd7b@foreign-call-transformer) (set! oUd7d@convert-pattern (lambda (oU19a2@pattern oU19a3@keys) (let ((oU19a7@cvt* '#f) (oU19a9@cvt '#f)) (begin (set! oU19a7@cvt* (lambda (oU1a46@p* oU1a47@n oU1a48@ids) (if (null? oU1a46@p*) (values '() oU1a48@ids) (call-with-values (lambda () (oU19a7@cvt* (cdr oU1a46@p*) oU1a47@n oU1a48@ids)) (lambda (oU1a50@oU1a4d oU1a51@oU1a4f) (let ((oU1a54@ids oU1a51@oU1a4f) (oU1a55@y oU1a50@oU1a4d)) (call-with-values (lambda () (oU19a9@cvt (car oU1a46@p*) oU1a47@n oU1a54@ids)) (lambda (oU1a5c@oU1a59 oU1a5d@oU1a5b) (let ((oU1a60@ids oU1a5d@oU1a5b) (oU1a61@x oU1a5c@oU1a59)) (values (cons oU1a61@x oU1a55@y) oU1a60@ids)))))))))) (set! oU19a9@cvt (lambda (oU19aa@p oU19ab@n oU19ac@ids) (let ((oU19b0@t oU19aa@p)) (let ((oU19b2@ls/false (oUd7f@syntax-dispatch oU19b0@t 'any))) (if (and oU19b2@ls/false (apply (lambda (oU19b4@id) (oUb78@id? oU19b4@id)) oU19b2@ls/false)) (apply (lambda (oU19b6@id) (if (oUb84@bound-id-member? oU19aa@p oU19a3@keys) (values (vector 'free-id oU19aa@p) oU19ac@ids) (if (oUb7e@free-id=? oU19aa@p (oUd07@scheme-stx '_)) (values '_ oU19ac@ids) (values 'any (cons (cons oU19aa@p oU19ab@n) oU19ac@ids))))) oU19b2@ls/false) (let ((oU19b8@t oU19b0@t)) (let ((oU19ba@ls/false (oUd7f@syntax-dispatch oU19b8@t '(any any)))) (if (and oU19ba@ls/false (apply (lambda (oU19bc@p oU19bd@dots) (oUd81@ellipsis? oU19bd@dots)) oU19ba@ls/false)) (apply (lambda (oU19c0@p oU19c1@dots) (call-with-values (lambda () (oU19a9@cvt oU19c0@p (+ oU19ab@n '1) oU19ac@ids)) (lambda (oU19c8@oU19c5 oU19c9@oU19c7) (let ((oU19cc@ids oU19c9@oU19c7) (oU19cd@p oU19c8@oU19c5)) (values (if (eq? oU19cd@p 'any) 'each-any (vector 'each oU19cd@p)) oU19cc@ids))))) oU19ba@ls/false) (let ((oU19d0@t oU19b8@t)) (let ((oU19d2@ls/false (oUd7f@syntax-dispatch oU19d0@t '(any any . #(each+ any () any))))) (if (and oU19d2@ls/false (apply (lambda (oU19d4@x oU19d5@dots oU19d6@ys oU19d7@z) (oUd81@ellipsis? oU19d5@dots)) oU19d2@ls/false)) (apply (lambda (oU19dc@x oU19dd@dots oU19de@ys oU19df@z) (call-with-values (lambda () (oU19a9@cvt oU19df@z oU19ab@n oU19ac@ids)) (lambda (oU19e8@oU19e5 oU19e9@oU19e7) (let ((oU19ec@ids oU19e9@oU19e7) (oU19ed@z oU19e8@oU19e5)) (call-with-values (lambda () (oU19a7@cvt* oU19de@ys oU19ab@n oU19ec@ids)) (lambda (oU19f4@oU19f1 oU19f5@oU19f3) (let ((oU19f8@ids oU19f5@oU19f3) (oU19f9@ys oU19f4@oU19f1)) (call-with-values (lambda () (oU19a9@cvt oU19dc@x (+ oU19ab@n '1) oU19f8@ids)) (lambda (oU1a00@oU19fd oU1a01@oU19ff) (let ((oU1a04@ids oU1a01@oU19ff) (oU1a05@x oU1a00@oU19fd)) (values (vector 'each+ oU1a05@x (reverse oU19f9@ys) oU19ed@z) oU1a04@ids))))))))))) oU19d2@ls/false) (let ((oU1a08@t oU19d0@t)) (let ((oU1a0a@ls/false (oUd7f@syntax-dispatch oU1a08@t '(any . any)))) (if oU1a0a@ls/false (apply (lambda (oU1a0c@x oU1a0d@y) (call-with-values (lambda () (oU19a9@cvt oU1a0d@y oU19ab@n oU19ac@ids)) (lambda (oU1a14@oU1a11 oU1a15@oU1a13) (let ((oU1a18@ids oU1a15@oU1a13) (oU1a19@y oU1a14@oU1a11)) (call-with-values (lambda () (oU19a9@cvt oU1a0c@x oU19ab@n oU1a18@ids)) (lambda (oU1a20@oU1a1d oU1a21@oU1a1f) (let ((oU1a24@ids oU1a21@oU1a1f) (oU1a25@x oU1a20@oU1a1d)) (values (cons oU1a25@x oU1a19@y) oU1a24@ids)))))))) oU1a0a@ls/false) (let ((oU1a28@t oU1a08@t)) (let ((oU1a2a@ls/false (oUd7f@syntax-dispatch oU1a28@t '()))) (if oU1a2a@ls/false (apply (lambda () (values '() oU19ac@ids)) oU1a2a@ls/false) (let ((oU1a2c@t oU1a28@t)) (let ((oU1a2e@ls/false (oUd7f@syntax-dispatch oU1a2c@t '#(vector each-any)))) (if (and oU1a2e@ls/false (apply (lambda (oU1a30@p) (not (oUb44@stx? oU1a30@p))) oU1a2e@ls/false)) (apply (lambda (oU1a32@p) (call-with-values (lambda () (oU19a9@cvt oU1a32@p oU19ab@n oU19ac@ids)) (lambda (oU1a38@oU1a35 oU1a39@oU1a37) (let ((oU1a3c@ids oU1a39@oU1a37) (oU1a3d@p oU1a38@oU1a35)) (values (vector 'vector oU1a3d@p) oU1a3c@ids))))) oU1a2e@ls/false) (let ((oU1a40@t oU1a2c@t)) (let ((oU1a42@ls/false (oUd7f@syntax-dispatch oU1a40@t 'any))) (if oU1a42@ls/false (apply (lambda (oU1a44@datum) (values (vector 'atom (oUb8c@stx->datum oU1a44@datum)) oU19ac@ids)) oU1a42@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1a40@t)))))))))))))))))))))))) (oU19a9@cvt oU19a2@pattern '0 '()))))) (set! oU2854@oUd7d@convert-pattern oUd7d@convert-pattern) (set! oUd7f@syntax-dispatch (let ((oU1a65@stx^ '#f) (oU1a67@match-each '#f) (oU1a69@match-each+ '#f) (oU1a6b@match-each-any '#f) (oU1a6d@match-empty '#f) (oU1a6f@combine '#f) (oU1a71@match* '#f) (oU1a73@match '#f)) (begin (set! oU1a65@stx^ (lambda (oU1b40@e oU1b41@m* oU1b42@s* oU1b43@ae*) (if (and (null? oU1b41@m*) (null? oU1b42@s*) (null? oU1b43@ae*)) oU1b40@e (oUb60@mkstx oU1b40@e oU1b41@m* oU1b42@s* oU1b43@ae*)))) (set! oU1a67@match-each (lambda (oU1b20@e oU1b21@p oU1b22@m* oU1b23@s* oU1b24@ae*) (if (pair? oU1b20@e) (let ((oU1b2a@first (oU1a73@match (car oU1b20@e) oU1b21@p oU1b22@m* oU1b23@s* oU1b24@ae* '()))) (and oU1b2a@first (let ((oU1b2c@rest (oU1a67@match-each (cdr oU1b20@e) oU1b21@p oU1b22@m* oU1b23@s* oU1b24@ae*))) (and oU1b2c@rest (cons oU1b2a@first oU1b2c@rest))))) (if (null? oU1b20@e) '() (if (oUb44@stx? oU1b20@e) (and (not (oUafe@top-marked? oU1b22@m*)) (call-with-values (lambda () (join-wraps oU1b22@m* oU1b23@s* oU1b24@ae* oU1b20@e)) (lambda (oU1b34@oU1b2f oU1b35@oU1b31 oU1b36@oU1b33) (let ((oU1b3a@ae* oU1b36@oU1b33) (oU1b3b@s* oU1b35@oU1b31) (oU1b3c@m* oU1b34@oU1b2f)) (oU1a67@match-each (oUb46@stx-expr oU1b20@e) oU1b21@p oU1b3c@m* oU1b3b@s* oU1b3a@ae*))))) (if (oU6b7@oU58b@annotation? oU1b20@e) (oU1a67@match-each (oU6b9@oU58f@annotation-expression oU1b20@e) oU1b21@p oU1b22@m* oU1b23@s* oU1b24@ae*) '#f)))))) (set! oU1a69@match-each+ (lambda (oU1ae0@e oU1ae1@x-pat oU1ae2@y-pat oU1ae3@z-pat oU1ae4@m* oU1ae5@s* oU1ae6@ae* oU1ae7@r) (let oU1af8@f ((oU1af0@e oU1ae0@e) (oU1af1@m* oU1ae4@m*) (oU1af2@s* oU1ae5@s*) (oU1af3@ae* oU1ae6@ae*)) (if (pair? oU1af0@e) (call-with-values (lambda () (oU1af8@f (cdr oU1af0@e) oU1af1@m* oU1af2@s* oU1af3@ae*)) (lambda (oU1b00@oU1afb oU1b01@oU1afd oU1b02@oU1aff) (let ((oU1b06@r oU1b02@oU1aff) (oU1b07@y-pat oU1b01@oU1afd) (oU1b08@xr* oU1b00@oU1afb)) (if oU1b06@r (if (null? oU1b07@y-pat) (let ((oU1b0c@xr (oU1a73@match (car oU1af0@e) oU1ae1@x-pat oU1af1@m* oU1af2@s* oU1af3@ae* '()))) (if oU1b0c@xr (values (cons oU1b0c@xr oU1b08@xr*) oU1b07@y-pat oU1b06@r) (values '#f '#f '#f))) (values '() (cdr oU1b07@y-pat) (oU1a73@match (car oU1af0@e) (car oU1b07@y-pat) oU1af1@m* oU1af2@s* oU1af3@ae* oU1b06@r))) (values '#f '#f '#f))))) (if (oUb44@stx? oU1af0@e) (if (oUafe@top-marked? oU1af1@m*) (values '() oU1ae2@y-pat (oU1a73@match oU1af0@e oU1ae3@z-pat oU1af1@m* oU1af2@s* oU1af3@ae* oU1ae7@r)) (call-with-values (lambda () (join-wraps oU1af1@m* oU1af2@s* oU1af3@ae* oU1af0@e)) (lambda (oU1b14@oU1b0f oU1b15@oU1b11 oU1b16@oU1b13) (let ((oU1b1a@ae* oU1b16@oU1b13) (oU1b1b@s* oU1b15@oU1b11) (oU1b1c@m* oU1b14@oU1b0f)) (oU1af8@f (oUb46@stx-expr oU1af0@e) oU1b1c@m* oU1b1b@s* oU1b1a@ae*))))) (if (oU6b7@oU58b@annotation? oU1af0@e) (oU1af8@f (oU6b9@oU58f@annotation-expression oU1af0@e) oU1af1@m* oU1af2@s* oU1af3@ae*) (values '() oU1ae2@y-pat (oU1a73@match oU1af0@e oU1ae3@z-pat oU1af1@m* oU1af2@s* oU1af3@ae* oU1ae7@r)))))))) (set! oU1a6b@match-each-any (lambda (oU1ac4@e oU1ac5@m* oU1ac6@s* oU1ac7@ae*) (if (pair? oU1ac4@e) (let ((oU1acc@l (oU1a6b@match-each-any (cdr oU1ac4@e) oU1ac5@m* oU1ac6@s* oU1ac7@ae*))) (and oU1acc@l (cons (oU1a65@stx^ (car oU1ac4@e) oU1ac5@m* oU1ac6@s* oU1ac7@ae*) oU1acc@l))) (if (null? oU1ac4@e) '() (if (oUb44@stx? oU1ac4@e) (and (not (oUafe@top-marked? oU1ac5@m*)) (call-with-values (lambda () (join-wraps oU1ac5@m* oU1ac6@s* oU1ac7@ae* oU1ac4@e)) (lambda (oU1ad4@oU1acf oU1ad5@oU1ad1 oU1ad6@oU1ad3) (let ((oU1ada@ae* oU1ad6@oU1ad3) (oU1adb@s* oU1ad5@oU1ad1) (oU1adc@m* oU1ad4@oU1acf)) (oU1a6b@match-each-any (oUb46@stx-expr oU1ac4@e) oU1adc@m* oU1adb@s* oU1ada@ae*))))) (if (oU6b7@oU58b@annotation? oU1ac4@e) (oU1a6b@match-each-any (oU6b9@oU58f@annotation-expression oU1ac4@e) oU1ac5@m* oU1ac6@s* oU1ac7@ae*) '#f)))))) (set! oU1a6d@match-empty (lambda (oU1abe@p oU1abf@r) (if (null? oU1abe@p) oU1abf@r (if (eq? oU1abe@p '_) oU1abf@r (if (eq? oU1abe@p 'any) (cons '() oU1abf@r) (if (pair? oU1abe@p) (oU1a6d@match-empty (car oU1abe@p) (oU1a6d@match-empty (cdr oU1abe@p) oU1abf@r)) (if (eq? oU1abe@p 'each-any) (cons '() oU1abf@r) (let ((oU1ac2@t (vector-ref oU1abe@p '0))) (if (memv oU1ac2@t '(each)) (oU1a6d@match-empty (vector-ref oU1abe@p '1) oU1abf@r) (if (memv oU1ac2@t '(each+)) (oU1a6d@match-empty (vector-ref oU1abe@p '1) (oU1a6d@match-empty (reverse (vector-ref oU1abe@p '2)) (oU1a6d@match-empty (vector-ref oU1abe@p '3) oU1abf@r))) (if (memv oU1ac2@t '(free-id atom)) oU1abf@r (if (memv oU1ac2@t '(scheme-id atom)) oU1abf@r (if (memv oU1ac2@t '(vector)) (oU1a6d@match-empty (vector-ref oU1abe@p '1) oU1abf@r) (assertion-violation 'syntax-dispatch '"invalid pattern" oU1abe@p)))))))))))))) (set! oU1a6f@combine (lambda (oU1aba@r* oU1abb@r) (if (null? (car oU1aba@r*)) oU1abb@r (cons (map car oU1aba@r*) (oU1a6f@combine (map cdr oU1aba@r*) oU1abb@r))))) (set! oU1a71@match* (lambda (oU1a96@e oU1a97@p oU1a98@m* oU1a99@s* oU1a9a@ae* oU1a9b@r) (if (null? oU1a97@p) (and (null? oU1a96@e) oU1a9b@r) (if (pair? oU1a97@p) (and (pair? oU1a96@e) (oU1a73@match (car oU1a96@e) (car oU1a97@p) oU1a98@m* oU1a99@s* oU1a9a@ae* (oU1a73@match (cdr oU1a96@e) (cdr oU1a97@p) oU1a98@m* oU1a99@s* oU1a9a@ae* oU1a9b@r))) (if (eq? oU1a97@p 'each-any) (let ((oU1aa2@l (oU1a6b@match-each-any oU1a96@e oU1a98@m* oU1a99@s* oU1a9a@ae*))) (and oU1aa2@l (cons oU1aa2@l oU1a9b@r))) (let ((oU1aa4@t (vector-ref oU1a97@p '0))) (if (memv oU1aa4@t '(each)) (if (null? oU1a96@e) (oU1a6d@match-empty (vector-ref oU1a97@p '1) oU1a9b@r) (let ((oU1aa6@r* (oU1a67@match-each oU1a96@e (vector-ref oU1a97@p '1) oU1a98@m* oU1a99@s* oU1a9a@ae*))) (and oU1aa6@r* (oU1a6f@combine oU1aa6@r* oU1a9b@r)))) (if (memv oU1aa4@t '(free-id)) (and (symbol? oU1a96@e) (oUafe@top-marked? oU1a98@m*) (oUb7e@free-id=? (oU1a65@stx^ oU1a96@e oU1a98@m* oU1a99@s* oU1a9a@ae*) (vector-ref oU1a97@p '1)) oU1a9b@r) (if (memv oU1aa4@t '(scheme-id)) (and (symbol? oU1a96@e) (oUafe@top-marked? oU1a98@m*) (oUb7e@free-id=? (oU1a65@stx^ oU1a96@e oU1a98@m* oU1a99@s* oU1a9a@ae*) (oUd07@scheme-stx (vector-ref oU1a97@p '1))) oU1a9b@r) (if (memv oU1aa4@t '(each+)) (call-with-values (lambda () (oU1a69@match-each+ oU1a96@e (vector-ref oU1a97@p '1) (vector-ref oU1a97@p '2) (vector-ref oU1a97@p '3) oU1a98@m* oU1a99@s* oU1a9a@ae* oU1a9b@r)) (lambda (oU1aae@oU1aa9 oU1aaf@oU1aab oU1ab0@oU1aad) (let ((oU1ab4@r oU1ab0@oU1aad) (oU1ab5@y-pat oU1aaf@oU1aab) (oU1ab6@xr* oU1aae@oU1aa9)) (and oU1ab4@r (null? oU1ab5@y-pat) (if (null? oU1ab6@xr*) (oU1a6d@match-empty (vector-ref oU1a97@p '1) oU1ab4@r) (oU1a6f@combine oU1ab6@xr* oU1ab4@r)))))) (if (memv oU1aa4@t '(atom)) (and (fast-equal? (vector-ref oU1a97@p '1) (oUb8a@strip oU1a96@e oU1a98@m*)) oU1a9b@r) (if (memv oU1aa4@t '(vector)) (and (vector? oU1a96@e) (oU1a73@match (vector->list oU1a96@e) (vector-ref oU1a97@p '1) oU1a98@m* oU1a99@s* oU1a9a@ae* oU1a9b@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" oU1a97@p))))))))))))) (set! oU1a73@match (lambda (oU1a78@e oU1a79@p oU1a7a@m* oU1a7b@s* oU1a7c@ae* oU1a7d@r) (if (not oU1a7d@r) '#f (if (eq? oU1a79@p '_) oU1a7d@r (if (eq? oU1a79@p 'any) (cons (oU1a65@stx^ oU1a78@e oU1a7a@m* oU1a7b@s* oU1a7c@ae*) oU1a7d@r) (if (oUb44@stx? oU1a78@e) (and (not (oUafe@top-marked? oU1a7a@m*)) (call-with-values (lambda () (join-wraps oU1a7a@m* oU1a7b@s* oU1a7c@ae* oU1a78@e)) (lambda (oU1a8a@oU1a85 oU1a8b@oU1a87 oU1a8c@oU1a89) (let ((oU1a90@ae* oU1a8c@oU1a89) (oU1a91@s* oU1a8b@oU1a87) (oU1a92@m* oU1a8a@oU1a85)) (oU1a73@match (oUb46@stx-expr oU1a78@e) oU1a79@p oU1a92@m* oU1a91@s* oU1a90@ae* oU1a7d@r))))) (if (oU6b7@oU58b@annotation? oU1a78@e) (oU1a73@match (oU6b9@oU58f@annotation-expression oU1a78@e) oU1a79@p oU1a7a@m* oU1a7b@s* oU1a7c@ae* oU1a7d@r) (oU1a71@match* oU1a78@e oU1a79@p oU1a7a@m* oU1a7b@s* oU1a7c@ae* oU1a7d@r)))))))) (lambda (oU1a74@e oU1a75@p) (oU1a73@match oU1a74@e oU1a75@p '() '() '() '()))))) (set! oU2855@oUd7f@syntax-dispatch oUd7f@syntax-dispatch) (set! oUd81@ellipsis? (lambda (oU1b48@x) (and (oUb78@id? oU1b48@x) (oUb7e@free-id=? oU1b48@x (oUd07@scheme-stx '...))))) (set! oU2856@oUd81@ellipsis? oUd81@ellipsis?) (set! oUd83@underscore? (lambda (oU1b4a@x) (and (oUb78@id? oU1b4a@x) (oUb7e@free-id=? oU1b4a@x (oUd07@scheme-stx '_))))) (set! oU2857@oUd83@underscore? oUd83@underscore?) (set! oUd85@verify-literals (lambda (oU1b4c@lits oU1b4d@expr) (for-each (lambda (oU1b50@x) (if (or (not (oUb78@id? oU1b50@x)) (oUd81@ellipsis? oU1b50@x) (oUd83@underscore? oU1b50@x)) (oUe5f@syntax-violation '#f '"invalid literal" oU1b4d@expr oU1b50@x) (void))) oU1b4c@lits))) (set! oU2858@oUd85@verify-literals oUd85@verify-literals) (set! oUd87@syntax-case-transformer (let ((oU1b53@build-dispatch-call '#f) (oU1b55@invalid-ids-error '#f) (oU1b57@gen-clause '#f) (oU1b59@gen-syntax-case '#f)) (begin (set! oU1b53@build-dispatch-call (lambda (oU1bc4@pvars oU1bc5@expr oU1bc6@y oU1bc7@r oU1bc8@mr) (let ((oU1bce@ids (map car oU1bc4@pvars)) (oU1bcf@levels (map cdr oU1bc4@pvars))) (let ((oU1bd2@labels (map oUb04@gen-label oU1bce@ids)) (oU1bd3@new-vars (map oUb00@gen-lexical oU1bce@ids))) (let ((oU1bd6@body (oUda1@chi-expr (oUb64@add-subst (oUb38@make-full-rib oU1bce@ids oU1bd2@labels) oU1bc5@expr) (append (map (lambda (oU1bd8@label oU1bd9@var oU1bda@level) (cons oU1bd8@label (oUb92@make-binding 'syntax (cons oU1bd9@var oU1bda@level)))) oU1bd2@labels oU1bd3@new-vars (map cdr oU1bc4@pvars)) oU1bc7@r) oU1bc8@mr))) (list '(primitive apply) (oUadb@oUa07@build-lambda '#f oU1bd3@new-vars oU1bd6@body) oU1bc6@y)))))) (set! oU1b55@invalid-ids-error (lambda (oU1bb8@id* oU1bb9@e oU1bba@class) (let oU1bc2@find ((oU1bbe@id* oU1bb8@id*) (oU1bbf@ok* '())) (if (null? oU1bbe@id*) (oUe5f@syntax-violation '#f '"invalid syntax" oU1bb9@e) (if (oUb78@id? (car oU1bbe@id*)) (if (oUb84@bound-id-member? (car oU1bbe@id*) oU1bbf@ok*) (oUe5b@syntax-error (car oU1bbe@id*) '"duplicate " oU1bba@class) (oU1bc2@find (cdr oU1bbe@id*) (cons (car oU1bbe@id*) oU1bbf@ok*))) (oUe5b@syntax-error (car oU1bbe@id*) '"invalid " oU1bba@class)))))) (set! oU1b57@gen-clause (lambda (oU1b90@x oU1b91@keys oU1b92@clauses oU1b93@r oU1b94@mr oU1b95@pat oU1b96@fender oU1b97@expr) (call-with-values (lambda () (oUd7d@convert-pattern oU1b95@pat oU1b91@keys)) (lambda (oU1ba4@oU1ba1 oU1ba5@oU1ba3) (let ((oU1ba8@pvars oU1ba5@oU1ba3) (oU1ba9@p oU1ba4@oU1ba1)) (if (not (oUb82@distinct-bound-ids? (map car oU1ba8@pvars))) (oU1b55@invalid-ids-error (map car oU1ba8@pvars) oU1b95@pat '"pattern variable") (if (not (for-all (lambda (oU1bac@x) (not (oUd81@ellipsis? (car oU1bac@x)))) oU1ba8@pvars)) (oUe5f@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" oU1b95@pat) (let ((oU1bae@y (oUb00@gen-lexical 'tmp))) (let ((oU1bb0@test (if (eq? oU1b96@fender '#t) oU1bae@y (let ((oU1bb2@call (oU1b53@build-dispatch-call oU1ba8@pvars oU1b96@fender oU1bae@y oU1b93@r oU1b94@mr))) (list 'if oU1bae@y oU1bb2@call (list 'quote '#f)))))) (let ((oU1bb4@conseq (oU1b53@build-dispatch-call oU1ba8@pvars oU1b97@expr oU1bae@y oU1b93@r oU1b94@mr))) (let ((oU1bb6@altern (oU1b59@gen-syntax-case oU1b90@x oU1b91@keys oU1b92@clauses oU1b93@r oU1b94@mr))) (list (oUadb@oUa07@build-lambda '#f (list oU1bae@y) (list 'if oU1bb0@test oU1bb4@conseq oU1bb6@altern)) (list '(primitive syntax-dispatch) oU1b90@x (list 'quote oU1ba9@p)))))))))))))) (set! oU1b59@gen-syntax-case (lambda (oU1b6e@x oU1b6f@keys oU1b70@clauses oU1b71@r oU1b72@mr) (if (null? oU1b70@clauses) (list '(primitive syntax-error) oU1b6e@x) (let ((oU1b78@t (car oU1b70@clauses))) (let ((oU1b7a@ls/false (oUd7f@syntax-dispatch oU1b78@t '(any any)))) (if oU1b7a@ls/false (apply (lambda (oU1b7c@pat oU1b7d@expr) (if (and (oUb78@id? oU1b7c@pat) (not (oUb84@bound-id-member? oU1b7c@pat oU1b6f@keys)) (not (oUd81@ellipsis? oU1b7c@pat))) (if (oUb7e@free-id=? oU1b7c@pat (oUd07@scheme-stx '_)) (oUda1@chi-expr oU1b7d@expr oU1b71@r oU1b72@mr) (let ((oU1b80@lab (oUb04@gen-label oU1b7c@pat)) (oU1b81@lex (oUb00@gen-lexical oU1b7c@pat))) (let ((oU1b84@body (oUda1@chi-expr (oUb64@add-subst (oUb38@make-full-rib (list oU1b7c@pat) (list oU1b80@lab)) oU1b7d@expr) (cons (cons oU1b80@lab (oUb92@make-binding 'syntax (cons oU1b81@lex '0))) oU1b71@r) oU1b72@mr))) (list (oUadb@oUa07@build-lambda '#f (list oU1b81@lex) oU1b84@body) oU1b6e@x)))) (oU1b57@gen-clause oU1b6e@x oU1b6f@keys (cdr oU1b70@clauses) oU1b71@r oU1b72@mr oU1b7c@pat '#t oU1b7d@expr))) oU1b7a@ls/false) (let ((oU1b86@t oU1b78@t)) (let ((oU1b88@ls/false (oUd7f@syntax-dispatch oU1b86@t '(any any any)))) (if oU1b88@ls/false (apply (lambda (oU1b8a@pat oU1b8b@fender oU1b8c@expr) (oU1b57@gen-clause oU1b6e@x oU1b6f@keys (cdr oU1b70@clauses) oU1b71@r oU1b72@mr oU1b8a@pat oU1b8b@fender oU1b8c@expr)) oU1b88@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1b86@t)))))))))) (lambda (oU1b5a@e oU1b5b@r oU1b5c@mr) (let ((oU1b60@t oU1b5a@e)) (let ((oU1b62@ls/false (oUd7f@syntax-dispatch oU1b60@t '(_ any each-any . each-any)))) (if oU1b62@ls/false (apply (lambda (oU1b64@expr oU1b65@keys oU1b66@clauses) (begin (oUd85@verify-literals oU1b65@keys oU1b5a@e) (let ((oU1b6a@x (oUb00@gen-lexical 'tmp))) (let ((oU1b6c@body (oU1b59@gen-syntax-case oU1b6a@x oU1b65@keys oU1b66@clauses oU1b5b@r oU1b5c@mr))) (list (oUadb@oUa07@build-lambda '#f (list oU1b6a@x) oU1b6c@body) (oUda1@chi-expr oU1b64@expr oU1b5b@r oU1b5c@mr)))))) oU1b62@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1b60@t)))))))) (set! oU2859@oUd87@syntax-case-transformer oUd87@syntax-case-transformer) (set! oUd89@ellipsis-map (lambda (oU1bde@proc oU1bdf@ls . oU1be2@ls*) (let ((oU1be5@who '#f)) (begin (set! oU1be5@who '...) (begin (if (not (list? oU1bdf@ls)) (assertion-violation oU1be5@who '"not a list" oU1bdf@ls) (void)) (if (not (null? oU1be2@ls*)) (let ((oU1be6@n (length oU1bdf@ls))) (for-each (lambda (oU1be8@x) (begin (if (not (list? oU1be8@x)) (assertion-violation oU1be5@who '"not a list" oU1be8@x) (void)) (if (not (= (length oU1be8@x) oU1be6@n)) (assertion-violation oU1be5@who '"length mismatch" oU1bdf@ls oU1be8@x) (void)))) oU1be2@ls*)) (void)) (apply map oU1bde@proc oU1bdf@ls oU1be2@ls*)))))) (set! oU285a@oUd89@ellipsis-map oUd89@ellipsis-map) (set! oUd8b@syntax-transformer (let ((oU1beb@gen-syntax '#f) (oU1bed@gen-ref '#f) (oU1bef@gen-append '#f) (oU1bf1@gen-mappend '#f) (oU1bf3@gen-map '#f) (oU1bf5@gen-cons '#f) (oU1bf7@gen-vector '#f) (oU1bf9@regen '#f)) (begin (set! oU1beb@gen-syntax (lambda (oU1c62@src oU1c63@e oU1c64@r oU1c65@maps oU1c66@ellipsis? oU1c67@vec?) (let ((oU1c6e@t oU1c63@e)) (let ((oU1c70@ls/false (oUd7f@syntax-dispatch oU1c6e@t 'any))) (if (and oU1c70@ls/false (apply (lambda (oU1c72@dots) (oU1c66@ellipsis? oU1c72@dots)) oU1c70@ls/false)) (apply (lambda (oU1c74@dots) (oUe5f@syntax-violation '#f '"misplaced ellipsis in syntax form" oU1c62@src)) oU1c70@ls/false) (let ((oU1c76@t oU1c6e@t)) (let ((oU1c78@ls/false (oUd7f@syntax-dispatch oU1c76@t 'any))) (if (and oU1c78@ls/false (apply (lambda (oU1c7a@id) (oUb78@id? oU1c7a@id)) oU1c78@ls/false)) (apply (lambda (oU1c7c@id) (let ((oU1c7e@label (oUb8e@id->label oU1c63@e))) (let ((oU1c80@b (oUb90@label->binding oU1c7e@label oU1c64@r))) (if (eq? (oUb94@binding-type oU1c80@b) 'syntax) (call-with-values (lambda () (let ((oU1c86@var.lev (oUb96@binding-value oU1c80@b))) (oU1bed@gen-ref oU1c62@src (car oU1c86@var.lev) (cdr oU1c86@var.lev) oU1c65@maps))) (lambda (oU1c88@oU1c83 oU1c89@oU1c85) (let ((oU1c8c@maps oU1c89@oU1c85) (oU1c8d@var oU1c88@oU1c83)) (values (list 'ref oU1c8d@var) oU1c8c@maps)))) (values (list 'quote oU1c63@e) oU1c65@maps))))) oU1c78@ls/false) (let ((oU1c90@t oU1c76@t)) (let ((oU1c92@ls/false (oUd7f@syntax-dispatch oU1c90@t '(any any)))) (if (and oU1c92@ls/false (apply (lambda (oU1c94@dots oU1c95@e) (oU1c66@ellipsis? oU1c94@dots)) oU1c92@ls/false)) (apply (lambda (oU1c98@dots oU1c99@e) (if oU1c67@vec? (oUe5f@syntax-violation '#f '"misplaced ellipsis in syntax form" oU1c62@src) (oU1beb@gen-syntax oU1c62@src oU1c99@e oU1c64@r oU1c65@maps (lambda (oU1c9c@x) '#f) '#f))) oU1c92@ls/false) (let ((oU1c9e@t oU1c90@t)) (let ((oU1ca0@ls/false (oUd7f@syntax-dispatch oU1c9e@t '(any any . any)))) (if (and oU1ca0@ls/false (apply (lambda (oU1ca2@x oU1ca3@dots oU1ca4@y) (oU1c66@ellipsis? oU1ca3@dots)) oU1ca0@ls/false)) (apply (lambda (oU1ca8@x oU1ca9@dots oU1caa@y) (let oU1cc0@f ((oU1cae@y oU1caa@y) (oU1caf@k (lambda (oU1cb2@maps) (call-with-values (lambda () (oU1beb@gen-syntax oU1c62@src oU1ca8@x oU1c64@r (cons '() oU1cb2@maps) oU1c66@ellipsis? '#f)) (lambda (oU1cb8@oU1cb5 oU1cb9@oU1cb7) (let ((oU1cbc@maps oU1cb9@oU1cb7) (oU1cbd@x oU1cb8@oU1cb5)) (if (null? (car oU1cbc@maps)) (oUe5f@syntax-violation '#f '"extra ellipsis in syntax form" oU1c62@src) (values (oU1bf3@gen-map oU1cbd@x (car oU1cbc@maps)) (cdr oU1cbc@maps))))))))) (let ((oU1cc2@t oU1cae@y)) (let ((oU1cc4@ls/false (oUd7f@syntax-dispatch oU1cc2@t '()))) (if oU1cc4@ls/false (apply (lambda () (oU1caf@k oU1c65@maps)) oU1cc4@ls/false) (let ((oU1cc6@t oU1cc2@t)) (let ((oU1cc8@ls/false (oUd7f@syntax-dispatch oU1cc6@t '(any . any)))) (if (and oU1cc8@ls/false (apply (lambda (oU1cca@dots oU1ccb@y) (oU1c66@ellipsis? oU1cca@dots)) oU1cc8@ls/false)) (apply (lambda (oU1cce@dots oU1ccf@y) (oU1cc0@f oU1ccf@y (lambda (oU1cd2@maps) (call-with-values (lambda () (oU1caf@k (cons '() oU1cd2@maps))) (lambda (oU1cd8@oU1cd5 oU1cd9@oU1cd7) (let ((oU1cdc@maps oU1cd9@oU1cd7) (oU1cdd@x oU1cd8@oU1cd5)) (if (null? (car oU1cdc@maps)) (oUe5f@syntax-violation '#f '"extra ellipsis in syntax form" oU1c62@src) (values (oU1bf1@gen-mappend oU1cdd@x (car oU1cdc@maps)) (cdr oU1cdc@maps))))))))) oU1cc8@ls/false) (let ((oU1ce0@t oU1cc6@t)) (let ((oU1ce2@ls/false (oUd7f@syntax-dispatch oU1ce0@t '_))) (if oU1ce2@ls/false (apply (lambda () (call-with-values (lambda () (oU1beb@gen-syntax oU1c62@src oU1cae@y oU1c64@r oU1c65@maps oU1c66@ellipsis? oU1c67@vec?)) (lambda (oU1ce8@oU1ce5 oU1ce9@oU1ce7) (let ((oU1cec@maps oU1ce9@oU1ce7) (oU1ced@y oU1ce8@oU1ce5)) (call-with-values (lambda () (oU1caf@k oU1cec@maps)) (lambda (oU1cf4@oU1cf1 oU1cf5@oU1cf3) (let ((oU1cf8@maps oU1cf5@oU1cf3) (oU1cf9@x oU1cf4@oU1cf1)) (values (oU1bef@gen-append oU1cf9@x oU1ced@y) oU1cf8@maps)))))))) oU1ce2@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1ce0@t)))))))))))) oU1ca0@ls/false) (let ((oU1cfc@t oU1c9e@t)) (let ((oU1cfe@ls/false (oUd7f@syntax-dispatch oU1cfc@t '(any . any)))) (if oU1cfe@ls/false (apply (lambda (oU1d00@x oU1d01@y) (call-with-values (lambda () (oU1beb@gen-syntax oU1c62@src oU1d00@x oU1c64@r oU1c65@maps oU1c66@ellipsis? '#f)) (lambda (oU1d08@oU1d05 oU1d09@oU1d07) (let ((oU1d0c@maps oU1d09@oU1d07) (oU1d0d@xnew oU1d08@oU1d05)) (call-with-values (lambda () (oU1beb@gen-syntax oU1c62@src oU1d01@y oU1c64@r oU1d0c@maps oU1c66@ellipsis? oU1c67@vec?)) (lambda (oU1d14@oU1d11 oU1d15@oU1d13) (let ((oU1d18@maps oU1d15@oU1d13) (oU1d19@ynew oU1d14@oU1d11)) (values (oU1bf5@gen-cons oU1c63@e oU1d00@x oU1d01@y oU1d0d@xnew oU1d19@ynew) oU1d18@maps)))))))) oU1cfe@ls/false) (let ((oU1d1c@t oU1cfc@t)) (let ((oU1d1e@ls/false (oUd7f@syntax-dispatch oU1d1c@t '#(vector each-any)))) (if oU1d1e@ls/false (apply (lambda (oU1d20@ls) (call-with-values (lambda () (oU1beb@gen-syntax oU1c62@src oU1d20@ls oU1c64@r oU1c65@maps oU1c66@ellipsis? '#t)) (lambda (oU1d26@oU1d23 oU1d27@oU1d25) (let ((oU1d2a@maps oU1d27@oU1d25) (oU1d2b@lsnew oU1d26@oU1d23)) (values (oU1bf7@gen-vector oU1c63@e oU1d20@ls oU1d2b@lsnew) oU1d2a@maps))))) oU1d1e@ls/false) (let ((oU1d2e@t oU1d1c@t)) (let ((oU1d30@ls/false (oUd7f@syntax-dispatch oU1d2e@t '_))) (if oU1d30@ls/false (apply (lambda () (values (list 'quote oU1c63@e) oU1c65@maps)) oU1d30@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1d2e@t)))))))))))))))))))))))) (set! oU1bed@gen-ref (lambda (oU1c48@src oU1c49@var oU1c4a@level oU1c4b@maps) (if (= oU1c4a@level '0) (values oU1c49@var oU1c4b@maps) (if (null? oU1c4b@maps) (oUe5f@syntax-violation '#f '"missing ellipsis in syntax form" oU1c48@src) (call-with-values (lambda () (oU1bed@gen-ref oU1c48@src oU1c49@var (- oU1c4a@level '1) (cdr oU1c4b@maps))) (lambda (oU1c54@oU1c51 oU1c55@oU1c53) (let ((oU1c58@outer-maps oU1c55@oU1c53) (oU1c59@outer-var oU1c54@oU1c51)) (let ((oU1c5c@t (assq oU1c59@outer-var (car oU1c4b@maps)))) (if oU1c5c@t ((lambda (oU1c5e@b) (values (cdr oU1c5e@b) oU1c4b@maps)) oU1c5c@t) (let ((oU1c60@inner-var (oUb00@gen-lexical 'tmp))) (values oU1c60@inner-var (cons (cons (cons oU1c59@outer-var oU1c60@inner-var) (car oU1c4b@maps)) oU1c58@outer-maps)))))))))))) (set! oU1bef@gen-append (lambda (oU1c44@x oU1c45@y) (if (fast-equal? oU1c45@y ''()) oU1c44@x (list 'append oU1c44@x oU1c45@y)))) (set! oU1bf1@gen-mappend (lambda (oU1c40@e oU1c41@map-env) (list 'apply '(primitive append) (oU1bf3@gen-map oU1c40@e oU1c41@map-env)))) (set! oU1bf3@gen-map (lambda (oU1c2e@e oU1c2f@map-env) (let ((oU1c32@formals (map cdr oU1c2f@map-env)) (oU1c33@actuals (map (lambda (oU1c36@x) (list 'ref (car oU1c36@x))) oU1c2f@map-env))) (if (eq? (car oU1c2e@e) 'ref) (car oU1c33@actuals) (if (for-all (lambda (oU1c38@x) (and (eq? (car oU1c38@x) 'ref) (memq (cadr oU1c38@x) oU1c32@formals))) (cdr oU1c2e@e)) (let ((oU1c3a@args (map (let ((oU1c3c@r (map cons oU1c32@formals oU1c33@actuals))) (lambda (oU1c3e@x) (cdr (assq (cadr oU1c3e@x) oU1c3c@r)))) (cdr oU1c2e@e)))) (cons 'map (cons (list 'primitive (car oU1c2e@e)) oU1c3a@args))) (cons* 'map (list 'lambda oU1c32@formals oU1c2e@e) oU1c33@actuals)))))) (set! oU1bf5@gen-cons (lambda (oU1c1e@e oU1c1f@x oU1c20@y oU1c21@xnew oU1c22@ynew) (let ((oU1c28@t (car oU1c22@ynew))) (if (memv oU1c28@t '(quote)) (if (eq? (car oU1c21@xnew) 'quote) (let ((oU1c2a@xnew (cadr oU1c21@xnew)) (oU1c2b@ynew (cadr oU1c22@ynew))) (if (and (eq? oU1c2a@xnew oU1c1f@x) (eq? oU1c2b@ynew oU1c20@y)) (list 'quote oU1c1e@e) (list 'quote (cons oU1c2a@xnew oU1c2b@ynew)))) (if (null? (cadr oU1c22@ynew)) (list 'list oU1c21@xnew) (list 'cons oU1c21@xnew oU1c22@ynew))) (if (memv oU1c28@t '(list)) (cons 'list (cons oU1c21@xnew (cdr oU1c22@ynew))) (list 'cons oU1c21@xnew oU1c22@ynew)))))) (set! oU1bf7@gen-vector (lambda (oU1c18@e oU1c19@ls oU1c1a@lsnew) (if (eq? (car oU1c1a@lsnew) 'quote) (if (eq? (cadr oU1c1a@lsnew) oU1c19@ls) (list 'quote oU1c18@e) (list 'quote (list->vector (cadr oU1c1a@lsnew)))) (if (eq? (car oU1c1a@lsnew) 'list) (cons 'vector (cdr oU1c1a@lsnew)) (list 'list->vector oU1c1a@lsnew))))) (set! oU1bf9@regen (lambda (oU1c12@x) (let ((oU1c14@t (car oU1c12@x))) (if (memv oU1c14@t '(ref)) (cadr oU1c12@x) (if (memv oU1c14@t '(primitive)) (list 'primitive (cadr oU1c12@x)) (if (memv oU1c14@t '(quote)) (list 'quote (cadr oU1c12@x)) (if (memv oU1c14@t '(lambda)) (oUadb@oUa07@build-lambda '#f (cadr oU1c12@x) (oU1bf9@regen (caddr oU1c12@x))) (if (memv oU1c14@t '(map)) (let ((oU1c16@ls (map oU1bf9@regen (cdr oU1c12@x)))) (cons '(primitive ellipsis-map) oU1c16@ls)) (cons (list 'primitive (car oU1c12@x)) (map oU1bf9@regen (cdr oU1c12@x))))))))))) (lambda (oU1bfa@e oU1bfb@r oU1bfc@mr) (let ((oU1c00@t oU1bfa@e)) (let ((oU1c02@ls/false (oUd7f@syntax-dispatch oU1c00@t '(_ any)))) (if oU1c02@ls/false (apply (lambda (oU1c04@x) (call-with-values (lambda () (oU1beb@gen-syntax oU1bfa@e oU1c04@x oU1bfb@r '() oUd81@ellipsis? '#f)) (lambda (oU1c0a@oU1c07 oU1c0b@oU1c09) (let ((oU1c0e@maps oU1c0b@oU1c09) (oU1c0f@e oU1c0a@oU1c07)) (oU1bf9@regen oU1c0f@e))))) oU1c02@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1c00@t)))))))) (set! oU285b@oUd8b@syntax-transformer oUd8b@syntax-transformer) (set! oUd8d@core-macro-transformer (lambda (oU1d32@name) (let ((oU1d34@t oU1d32@name)) (if (memv oU1d34@t '(quote)) oUd2f@quote-transformer (if (memv oU1d34@t '(lambda)) oUd33@lambda-transformer (if (memv oU1d34@t '(case-lambda)) oUd31@case-lambda-transformer (if (memv oU1d34@t '(letrec)) oUd17@letrec-transformer (if (memv oU1d34@t '(letrec*)) oUd19@letrec*-transformer (if (memv oU1d34@t '(let)) oUd15@let-transformer (if (memv oU1d34@t '(if)) oUd27@if-transformer (if (memv oU1d34@t '(and)) oUd29@and-transformer (if (memv oU1d34@t '(or)) oUd2b@or-transformer (if (memv oU1d34@t '(foreign-call)) oUd7b@foreign-call-transformer (if (memv oU1d34@t '(syntax-case)) oUd87@syntax-case-transformer (if (memv oU1d34@t '(syntax)) oUd8b@syntax-transformer (if (memv oU1d34@t '(type-descriptor)) oUd1d@type-descriptor-transformer (if (memv oU1d34@t '(record-type-descriptor)) oUd1f@record-type-descriptor-transformer (if (memv oU1d34@t '(record-constructor-descriptor)) oUd21@record-constructor-descriptor-transformer (if (memv oU1d34@t '(fluid-let-syntax)) oUd1b@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" oU1d32@name)))))))))))))))))))) (set! oU285c@oUd8d@core-macro-transformer oUd8d@core-macro-transformer) (set! oUd8f@symbol-macro (lambda (oU1d36@x oU1d37@set) (let ((oU1d3a@t oU1d36@x)) (let ((oU1d3c@ls/false (oUd7f@syntax-dispatch oU1d3a@t '(_ any)))) (if (and oU1d3c@ls/false (apply (lambda (oU1d3e@name) (and (oUb78@id? oU1d3e@name) (memq (oUb7a@id->sym oU1d3e@name) oU1d37@set))) oU1d3c@ls/false)) (apply (lambda (oU1d40@name) (oUd35@bless (list 'quote oU1d40@name))) oU1d3c@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1d3a@t)))))) (set! oU285d@oUd8f@symbol-macro oUd8f@symbol-macro) (set! oUd91@macro-transformer (lambda (oU1d42@x) (if (procedure? oU1d42@x) oU1d42@x (if (symbol? oU1d42@x) (let ((oU1d44@t oU1d42@x)) (if (memv oU1d44@t '(define-record-type)) oUd73@define-record-type-macro (if (memv oU1d44@t '(define-struct)) oUd71@define-struct-macro (if (memv oU1d44@t '(include)) oUd67@include-macro (if (memv oU1d44@t '(cond)) oUd63@cond-macro (if (memv oU1d44@t '(let)) oUd3b@let-macro (if (memv oU1d44@t '(do)) oUd5b@do-macro (if (memv oU1d44@t '(or)) oUd5f@or-macro (if (memv oU1d44@t '(and)) oUd61@and-macro (if (memv oU1d44@t '(let*)) oUd5d@let*-macro (if (memv oU1d44@t '(let-values)) oUd3d@let-values-macro (if (memv oU1d44@t '(let*-values)) oUd3f@let*-values-macro (if (memv oU1d44@t '(syntax-rules)) oUd6b@syntax-rules-macro (if (memv oU1d44@t '(quasiquote)) oUd6d@quasiquote-macro (if (memv oU1d44@t '(quasisyntax)) oUd6f@quasisyntax-macro (if (memv oU1d44@t '(with-syntax)) oUd37@with-syntax-macro (if (memv oU1d44@t '(when)) oUd23@when-macro (if (memv oU1d44@t '(unless)) oUd25@unless-macro (if (memv oU1d44@t '(case)) oUd2d@case-macro (if (memv oU1d44@t '(identifier-syntax)) oUd59@identifier-syntax-macro (if (memv oU1d44@t '(time)) oUd51@time-macro (if (memv oU1d44@t '(delay)) oUd53@delay-macro (if (memv oU1d44@t '(assert)) oUd55@assert-macro (if (memv oU1d44@t '(endianness)) oUd57@endianness-macro (if (memv oU1d44@t '(guard)) oUd4d@guard-macro (if (memv oU1d44@t '(define-enumeration)) oUd4f@define-enumeration-macro (if (memv oU1d44@t '(trace-lambda)) oUd41@trace-lambda-macro (if (memv oU1d44@t '(trace-define)) oUd43@trace-define-macro (if (memv oU1d44@t '(trace-define-syntax)) oUd45@trace-define-syntax-macro (if (memv oU1d44@t '(trace-let-syntax)) oUd49@trace-let-syntax-macro (if (memv oU1d44@t '(trace-letrec-syntax)) oUd4b@trace-letrec-syntax-macro (if (memv oU1d44@t '(define-condition-type)) oUd75@define-condition-type-macro (if (memv oU1d44@t '(parameterize)) oUd79@parameterize-macro (if (memv oU1d44@t '(include-into)) oUd69@include-into-macro (if (memv oU1d44@t '(eol-style)) (lambda (oU1d46@x) (oUd8f@symbol-macro oU1d46@x '(none lf cr crlf nel crnel ls))) (if (memv oU1d44@t '(error-handling-mode)) (lambda (oU1d48@x) (oUd8f@symbol-macro oU1d48@x '(ignore raise replace))) (if (memv oU1d44@t '(buffer-mode)) (lambda (oU1d4a@x) (oUd8f@symbol-macro oU1d4a@x '(none line block))) (if (memv oU1d44@t '(file-options)) oUaf3@file-options-macro (if (memv oU1d44@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) oUd77@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" oU1d42@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" oU1d42@x))))) (set! oU285e@oUd91@macro-transformer oUd91@macro-transformer) (set! oUd93@local-macro-transformer (lambda (oU1d4c@x) (car oU1d4c@x))) (set! oU285f@oUd93@local-macro-transformer oUd93@local-macro-transformer) (set! oUd95@do-macro-call (lambda (oU1d4e@transformer oU1d4f@expr) (let ((oU1d52@out (oU1d4e@transformer (oUb62@add-mark oUb5c@anti-mark oU1d4f@expr '#f)))) (begin (let oU1d56@f ((oU1d54@x oU1d52@out)) (if (not (oUb44@stx? oU1d54@x)) (if (pair? oU1d54@x) (begin (oU1d56@f (car oU1d54@x)) (oU1d56@f (cdr oU1d54@x))) (if (vector? oU1d54@x) (vector-for-each oU1d56@f oU1d54@x) (if (symbol? oU1d54@x) (oUe5f@syntax-violation '#f '"raw symbol encountered in output of macro" oU1d4f@expr oU1d54@x) (void)))) (void))) (oUb62@add-mark (oUb5a@gen-mark) oU1d52@out oU1d4f@expr))))) (set! oU2860@oUd95@do-macro-call oUd95@do-macro-call) (set! oUd97@chi-macro (lambda (oU1d58@p oU1d59@e) (oUd95@do-macro-call (oUd91@macro-transformer oU1d58@p) oU1d59@e))) (set! oU2861@oUd97@chi-macro oUd97@chi-macro) (set! oUd99@chi-local-macro (lambda (oU1d5c@p oU1d5d@e) (oUd95@do-macro-call (oUd93@local-macro-transformer oU1d5c@p) oU1d5d@e))) (set! oU2862@oUd99@chi-local-macro oUd99@chi-local-macro) (set! oUd9b@chi-global-macro (lambda (oU1d60@p oU1d61@e) (let ((oU1d64@lib (car oU1d60@p)) (oU1d65@loc (cdr oU1d60@p))) (begin (oU98f@oU7de@visit-library oU1d64@lib) (let ((oU1d68@x (symbol-value oU1d65@loc))) (let ((oU1d6a@transformer (if (procedure? oU1d68@x) oU1d68@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" oU1d68@x)))) (oUd95@do-macro-call oU1d6a@transformer oU1d61@e))))))) (set! oU2863@oUd9b@chi-global-macro oUd9b@chi-global-macro) (set! oUd9d@chi-expr* (lambda (oU1d6c@e* oU1d6d@r oU1d6e@mr) (if (null? oU1d6c@e*) '() (let ((oU1d72@e (oUda1@chi-expr (car oU1d6c@e*) oU1d6d@r oU1d6e@mr))) (cons oU1d72@e (oUd9d@chi-expr* (cdr oU1d6c@e*) oU1d6d@r oU1d6e@mr)))))) (set! oU2864@oUd9d@chi-expr* oUd9d@chi-expr*) (set! oUd9f@chi-application (lambda (oU1d74@e oU1d75@r oU1d76@mr) (let ((oU1d7a@t oU1d74@e)) (let ((oU1d7c@ls/false (oUd7f@syntax-dispatch oU1d7a@t '(any . each-any)))) (if oU1d7c@ls/false (apply (lambda (oU1d7e@rator oU1d7f@rands) (let ((oU1d82@rator (oUda1@chi-expr oU1d7e@rator oU1d75@r oU1d76@mr))) (cons oU1d82@rator (oUd9d@chi-expr* oU1d7f@rands oU1d75@r oU1d76@mr)))) oU1d7c@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1d7a@t)))))) (set! oU2865@oUd9f@chi-application oUd9f@chi-application) (set! oUda1@chi-expr (lambda (oU1d84@e oU1d85@r oU1d86@mr) (call-with-values (lambda () (oUb9a@syntax-type oU1d84@e oU1d85@r)) (lambda (oU1d90@oU1d8b oU1d91@oU1d8d oU1d92@oU1d8f) (let ((oU1d96@kwd oU1d92@oU1d8f) (oU1d97@value oU1d91@oU1d8d) (oU1d98@type oU1d90@oU1d8b)) (let ((oU1d9c@t oU1d98@type)) (if (memv oU1d9c@t '(core-macro)) (let ((oU1d9e@transformer (oUd8d@core-macro-transformer oU1d97@value))) (oU1d9e@transformer oU1d84@e oU1d85@r oU1d86@mr)) (if (memv oU1d9c@t '(global)) (let ((oU1da0@lib (car oU1d97@value))) (let ((oU1da2@loc (cdr oU1d97@value))) (begin ((oUde7@inv-collector) oU1da0@lib) oU1da2@loc))) (if (memv oU1d9c@t '(core-prim)) (let ((oU1da4@name oU1d97@value)) (list 'primitive oU1da4@name)) (if (memv oU1d9c@t '(call)) (oUd9f@chi-application oU1d84@e oU1d85@r oU1d86@mr) (if (memv oU1d9c@t '(lexical)) (let ((oU1da6@lex (oUd09@lexical-var oU1d97@value))) oU1da6@lex) (if (memv oU1d9c@t '(global-macro global-macro!)) (oUda1@chi-expr (oUd9b@chi-global-macro oU1d97@value oU1d84@e) oU1d85@r oU1d86@mr) (if (memv oU1d9c@t '(local-macro local-macro!)) (oUda1@chi-expr (oUd99@chi-local-macro oU1d97@value oU1d84@e) oU1d85@r oU1d86@mr) (if (memv oU1d9c@t '(macro macro!)) (oUda1@chi-expr (oUd97@chi-macro oU1d97@value oU1d84@e) oU1d85@r oU1d86@mr) (if (memv oU1d9c@t '(constant)) (let ((oU1da8@datum oU1d97@value)) (list 'quote oU1da8@datum)) (if (memv oU1d9c@t '(set!)) (oUda3@chi-set! oU1d84@e oU1d85@r oU1d86@mr) (if (memv oU1d9c@t '(begin)) (let ((oU1daa@t oU1d84@e)) (let ((oU1dac@ls/false (oUd7f@syntax-dispatch oU1daa@t '(_ any . each-any)))) (if oU1dac@ls/false (apply (lambda (oU1dae@x oU1daf@x*) (oUadd@oUa37@build-sequence '#f (oUd9d@chi-expr* (cons oU1dae@x oU1daf@x*) oU1d85@r oU1d86@mr))) oU1dac@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1daa@t)))) (if (memv oU1d9c@t '(let-syntax letrec-syntax)) (let ((oU1db2@t oU1d84@e)) (let ((oU1db4@ls/false (oUd7f@syntax-dispatch oU1db2@t '(_ #(each (any any)) any . each-any)))) (if (and oU1db4@ls/false (apply (lambda (oU1db6@xlhs* oU1db7@xrhs* oU1db8@xbody oU1db9@xbody*) (if (not (oUb80@valid-bound-ids? oU1db6@xlhs*)) (oUe5f@syntax-violation '#f '"invalid identifiers" oU1d84@e) (void))) oU1db4@ls/false)) (apply (lambda (oU1dbe@xlhs* oU1dbf@xrhs* oU1dc0@xbody oU1dc1@xbody*) (let ((oU1dc6@xlab* (map oUb04@gen-label oU1dbe@xlhs*))) (let ((oU1dc8@xrib (oUb38@make-full-rib oU1dbe@xlhs* oU1dc6@xlab*))) (let ((oU1dca@xb* (map (lambda (oU1dcc@x) (oUbb0@make-eval-transformer (oUdd9@expand-transformer (if (eq? oU1d98@type 'let-syntax) oU1dcc@x (oUb64@add-subst oU1dc8@xrib oU1dcc@x)) oU1d86@mr))) oU1dbf@xrhs*))) (oUadd@oUa37@build-sequence '#f (oUd9d@chi-expr* (map (lambda (oU1dce@x) (oUb64@add-subst oU1dc8@xrib oU1dce@x)) (cons oU1dc0@xbody oU1dc1@xbody*)) (append (map cons oU1dc6@xlab* oU1dca@xb*) oU1d85@r) (append (map cons oU1dc6@xlab* oU1dca@xb*) oU1d86@mr))))))) oU1db4@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1db2@t)))) (if (memv oU1d9c@t '(displaced-lexical)) (oUe5f@syntax-violation '#f '"identifier out of context" oU1d84@e) (if (memv oU1d9c@t '(syntax)) (oUe5f@syntax-violation '#f '"reference to pattern variable outside a syntax form" oU1d84@e) (if (memv oU1d9c@t '(define define-syntax module import library)) (oUe5f@syntax-violation '#f (string-append (let ((oU1dd0@t oU1d98@type)) (if (memv oU1dd0@t '(define)) '"a definition" (if (memv oU1dd0@t '(define-syntax)) '"a define-syntax" (if (memv oU1dd0@t '(module)) '"a module definition" (if (memv oU1dd0@t '(library)) '"a library definition" (if (memv oU1dd0@t '(import)) '"an import declaration" (if (memv oU1dd0@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") oU1d84@e) (if (memv oU1d9c@t '(mutable)) (oUe5f@syntax-violation '#f '"attempt to reference an unexportable variable" oU1d84@e) (oUe5f@syntax-violation '#f '"invalid expression" oU1d84@e))))))))))))))))))))))) (set! oU2866@oUda1@chi-expr oUda1@chi-expr) (set! oUda3@chi-set! (lambda (oU1dd2@e oU1dd3@r oU1dd4@mr) (let ((oU1dd8@t oU1dd2@e)) (let ((oU1dda@ls/false (oUd7f@syntax-dispatch oU1dd8@t '(_ any any)))) (if (and oU1dda@ls/false (apply (lambda (oU1ddc@x oU1ddd@v) (oUb78@id? oU1ddc@x)) oU1dda@ls/false)) (apply (lambda (oU1de0@x oU1de1@v) (call-with-values (lambda () (oUb9a@syntax-type oU1de0@x oU1dd3@r)) (lambda (oU1dea@oU1de5 oU1deb@oU1de7 oU1dec@oU1de9) (let ((oU1df0@kwd oU1dec@oU1de9) (oU1df1@value oU1deb@oU1de7) (oU1df2@type oU1dea@oU1de5)) (let ((oU1df6@t oU1df2@type)) (if (memv oU1df6@t '(lexical)) (begin (oUd0d@set-lexical-mutable! oU1df1@value '#t) (list 'set! (oUd09@lexical-var oU1df1@value) (oUda1@chi-expr oU1de1@v oU1dd3@r oU1dd4@mr))) (if (memv oU1df6@t '(core-prim)) (oUe5f@syntax-violation '#f '"cannot modify imported core primitive" oU1dd2@e) (if (memv oU1df6@t '(global)) (oUe5f@syntax-violation '#f '"attempt to modify imported binding" oU1dd2@e) (if (memv oU1df6@t '(global-macro!)) (oUda1@chi-expr (oUd9b@chi-global-macro oU1df1@value oU1dd2@e) oU1dd3@r oU1dd4@mr) (if (memv oU1df6@t '(local-macro!)) (oUda1@chi-expr (oUd99@chi-local-macro oU1df1@value oU1dd2@e) oU1dd3@r oU1dd4@mr) (if (memv oU1df6@t '(mutable)) (oUe5f@syntax-violation '#f '"attempt to assign to an unexportable variable" oU1dd2@e) (oUe5f@syntax-violation '#f '"invalid syntax" oU1dd2@e)))))))))))) oU1dda@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1dd8@t)))))) (set! oU2867@oUda3@chi-set! oUda3@chi-set!) (set! oUda5@verify-formals (lambda (oU1df8@fmls oU1df9@stx) (let ((oU1dfc@t oU1df8@fmls)) (let ((oU1dfe@ls/false (oUd7f@syntax-dispatch oU1dfc@t 'each-any))) (if oU1dfe@ls/false (apply (lambda (oU1e00@x*) (if (not (oUb80@valid-bound-ids? oU1e00@x*)) (oUd39@invalid-fmls-error oU1df9@stx oU1df8@fmls) (void))) oU1dfe@ls/false) (let ((oU1e02@t oU1dfc@t)) (let ((oU1e04@ls/false (oUd7f@syntax-dispatch oU1e02@t '#(each+ any () any)))) (if oU1e04@ls/false (apply (lambda (oU1e06@x* oU1e07@x) (if (not (oUb80@valid-bound-ids? (cons oU1e07@x oU1e06@x*))) (oUd39@invalid-fmls-error oU1df9@stx oU1df8@fmls) (void))) oU1e04@ls/false) (let ((oU1e0a@t oU1e02@t)) (let ((oU1e0c@ls/false (oUd7f@syntax-dispatch oU1e0a@t '_))) (if oU1e0c@ls/false (apply (lambda () (oUe5f@syntax-violation '#f '"invalid syntax" oU1df9@stx)) oU1e0c@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1e0a@t)))))))))))) (set! oU2868@oUda5@verify-formals oUda5@verify-formals) (set! oUda7@chi-lambda-clause (lambda (oU1e0e@stx oU1e0f@fmls oU1e10@body* oU1e11@r oU1e12@mr) (let ((oU1e18@t oU1e0f@fmls)) (let ((oU1e1a@ls/false (oUd7f@syntax-dispatch oU1e18@t 'each-any))) (if oU1e1a@ls/false (apply (lambda (oU1e1c@x*) (begin (oUda5@verify-formals oU1e0f@fmls oU1e0e@stx) (let ((oU1e1e@lex* (map oUb00@gen-lexical oU1e1c@x*)) (oU1e1f@lab* (map oUb04@gen-label oU1e1c@x*))) (values oU1e1e@lex* (oUdb7@chi-internal (oUb64@add-subst (oUb38@make-full-rib oU1e1c@x* oU1e1f@lab*) oU1e10@body*) (oUd11@add-lexicals oU1e1f@lab* oU1e1e@lex* oU1e11@r) oU1e12@mr))))) oU1e1a@ls/false) (let ((oU1e22@t oU1e18@t)) (let ((oU1e24@ls/false (oUd7f@syntax-dispatch oU1e22@t '#(each+ any () any)))) (if oU1e24@ls/false (apply (lambda (oU1e26@x* oU1e27@x) (begin (oUda5@verify-formals oU1e0f@fmls oU1e0e@stx) (let ((oU1e2a@lex* (map oUb00@gen-lexical oU1e26@x*)) (oU1e2b@lab* (map oUb04@gen-label oU1e26@x*)) (oU1e2c@lex (oUb00@gen-lexical oU1e27@x)) (oU1e2d@lab (oUb04@gen-label oU1e27@x))) (values (append oU1e2a@lex* oU1e2c@lex) (oUdb7@chi-internal (oUb64@add-subst (oUb38@make-full-rib (cons oU1e27@x oU1e26@x*) (cons oU1e2d@lab oU1e2b@lab*)) oU1e10@body*) (oUd11@add-lexicals (cons oU1e2d@lab oU1e2b@lab*) (cons oU1e2c@lex oU1e2a@lex*) oU1e11@r) oU1e12@mr))))) oU1e24@ls/false) (let ((oU1e32@t oU1e22@t)) (let ((oU1e34@ls/false (oUd7f@syntax-dispatch oU1e32@t '_))) (if oU1e34@ls/false (apply (lambda () (oUe5f@syntax-violation '#f '"invalid syntax" oU1e0f@fmls)) oU1e34@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1e32@t)))))))))))) (set! oU2869@oUda7@chi-lambda-clause oUda7@chi-lambda-clause) (set! oUda9@chi-lambda-clause* (lambda (oU1e36@stx oU1e37@fmls* oU1e38@body** oU1e39@r oU1e3a@mr) (if (null? oU1e37@fmls*) (values '() '()) (call-with-values (lambda () (oUda7@chi-lambda-clause oU1e36@stx (car oU1e37@fmls*) (car oU1e38@body**) oU1e39@r oU1e3a@mr)) (lambda (oU1e44@oU1e41 oU1e45@oU1e43) (let ((oU1e48@b oU1e45@oU1e43) (oU1e49@a oU1e44@oU1e41)) (call-with-values (lambda () (oUda9@chi-lambda-clause* oU1e36@stx (cdr oU1e37@fmls*) (cdr oU1e38@body**) oU1e39@r oU1e3a@mr)) (lambda (oU1e50@oU1e4d oU1e51@oU1e4f) (let ((oU1e54@b* oU1e51@oU1e4f) (oU1e55@a* oU1e50@oU1e4d)) (values (cons oU1e49@a oU1e55@a*) (cons oU1e48@b oU1e54@b*))))))))))) (set! oU286a@oUda9@chi-lambda-clause* oUda9@chi-lambda-clause*) (set! oUdab@chi-defun (lambda (oU1e58@x oU1e59@r oU1e5a@mr) (let ((oU1e5e@fmls (car oU1e58@x)) (oU1e5f@body* (cdr oU1e58@x))) (call-with-values (lambda () (oUda7@chi-lambda-clause oU1e5e@fmls oU1e5e@fmls oU1e5f@body* oU1e59@r oU1e5a@mr)) (lambda (oU1e66@oU1e63 oU1e67@oU1e65) (let ((oU1e6a@body oU1e67@oU1e65) (oU1e6b@fmls oU1e66@oU1e63)) (oUadb@oUa07@build-lambda '#f oU1e6b@fmls oU1e6a@body))))))) (set! oU286b@oUdab@chi-defun oUdab@chi-defun) (set! oUdad@chi-rhs (lambda (oU1e6e@rhs oU1e6f@r oU1e70@mr) (let ((oU1e74@t (car oU1e6e@rhs))) (if (memv oU1e74@t '(defun)) (oUdab@chi-defun (cdr oU1e6e@rhs) oU1e6f@r oU1e70@mr) (if (memv oU1e74@t '(expr)) (let ((oU1e76@expr (cdr oU1e6e@rhs))) (oUda1@chi-expr oU1e76@expr oU1e6f@r oU1e70@mr)) (if (memv oU1e74@t '(top-expr)) (let ((oU1e78@expr (cdr oU1e6e@rhs))) (oUadd@oUa37@build-sequence '#f (list (oUda1@chi-expr oU1e78@expr oU1e6f@r oU1e70@mr) (oUade@oUa39@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" oU1e6e@rhs))))))) (set! oU286c@oUdad@chi-rhs oUdad@chi-rhs) (set! oUdaf@expand-interaction-rhs*/init* (lambda (oU1e7a@lhs* oU1e7b@rhs* oU1e7c@init* oU1e7d@r oU1e7e@mr) (let oU1e88@f ((oU1e84@lhs* oU1e7a@lhs*) (oU1e85@rhs* oU1e7b@rhs*)) (if (null? oU1e84@lhs*) (map (lambda (oU1e8a@x) (oUda1@chi-expr oU1e8a@x oU1e7d@r oU1e7e@mr)) oU1e7c@init*) (let ((oU1e8c@lhs (car oU1e84@lhs*)) (oU1e8d@rhs (car oU1e85@rhs*))) (let ((oU1e90@t (car oU1e8d@rhs))) (if (memv oU1e90@t '(defun)) (let ((oU1e92@rhs (oUdab@chi-defun (cdr oU1e8d@rhs) oU1e7d@r oU1e7e@mr))) (cons (list 'set! oU1e8c@lhs oU1e92@rhs) (oU1e88@f (cdr oU1e84@lhs*) (cdr oU1e85@rhs*)))) (if (memv oU1e90@t '(expr)) (let ((oU1e94@rhs (oUda1@chi-expr (cdr oU1e8d@rhs) oU1e7d@r oU1e7e@mr))) (cons (list 'set! oU1e8c@lhs oU1e94@rhs) (oU1e88@f (cdr oU1e84@lhs*) (cdr oU1e85@rhs*)))) (if (memv oU1e90@t '(top-expr)) (let ((oU1e96@e (oUda1@chi-expr (cdr oU1e8d@rhs) oU1e7d@r oU1e7e@mr))) (cons oU1e96@e (oU1e88@f (cdr oU1e84@lhs*) (cdr oU1e85@rhs*)))) (error 'expand-interaction '"invallid" oU1e8d@rhs)))))))))) (set! oU286d@oUdaf@expand-interaction-rhs*/init* oUdaf@expand-interaction-rhs*/init*) (set! oUdb1@chi-rhs* (lambda (oU1e98@rhs* oU1e99@r oU1e9a@mr) (let oU1ea0@f ((oU1e9e@ls oU1e98@rhs*)) (if (null? oU1e9e@ls) '() (let ((oU1ea2@a (oUdad@chi-rhs (car oU1e9e@ls) oU1e99@r oU1e9a@mr))) (cons oU1ea2@a (oU1ea0@f (cdr oU1e9e@ls)))))))) (set! oU286e@oUdb1@chi-rhs* oUdb1@chi-rhs*) (set! oUdb3@find-bound=? (lambda (oU1ea4@x oU1ea5@lhs* oU1ea6@rhs*) (if (null? oU1ea5@lhs*) '#f (if (oUb7c@bound-id=? oU1ea4@x (car oU1ea5@lhs*)) (car oU1ea6@rhs*) (oUdb3@find-bound=? oU1ea4@x (cdr oU1ea5@lhs*) (cdr oU1ea6@rhs*)))))) (set! oU286f@oUdb3@find-bound=? oUdb3@find-bound=?) (set! oUdb5@find-dups (lambda (oU1eaa@ls) (let oU1eb0@f ((oU1eac@ls oU1eaa@ls) (oU1ead@dups '())) (if (null? oU1eac@ls) oU1ead@dups (let ((oU1eb2@t (oUdb3@find-bound=? (car oU1eac@ls) (cdr oU1eac@ls) (cdr oU1eac@ls)))) (if oU1eb2@t ((lambda (oU1eb4@x) (oU1eb0@f (cdr oU1eac@ls) (cons (list (car oU1eac@ls) oU1eb4@x) oU1ead@dups))) oU1eb2@t) (oU1eb0@f (cdr oU1eac@ls) oU1ead@dups))))))) (set! oU2870@oUdb5@find-dups oUdb5@find-dups) (set! oUdb7@chi-internal (lambda (oU1eb6@e* oU1eb7@r oU1eb8@mr) (let ((oU1ebc@rib (oUb2c@make-empty-rib))) (call-with-values (lambda () (oUdd7@chi-body* (map (lambda (oU1ece@x) (oUb64@add-subst oU1ebc@rib oU1ece@x)) (oUb76@syntax->list oU1eb6@e*)) oU1eb7@r oU1eb8@mr '() '() '() '() '() oU1ebc@rib '#f)) (lambda (oU1ed0@oU1ebf oU1ed1@oU1ec1 oU1ed2@oU1ec3 oU1ed3@oU1ec5 oU1ed4@oU1ec7 oU1ed5@oU1ec9 oU1ed6@oU1ecb oU1ed7@oU1ecd) (let ((oU1ee0@_exp* oU1ed7@oU1ecd) (oU1ee1@kwd* oU1ed6@oU1ecb) (oU1ee2@mod** oU1ed5@oU1ec9) (oU1ee3@rhs* oU1ed4@oU1ec7) (oU1ee4@lex* oU1ed3@oU1ec5) (oU1ee5@mr oU1ed2@oU1ec3) (oU1ee6@r oU1ed1@oU1ec1) (oU1ee7@e* oU1ed0@oU1ebf)) (begin (if (null? oU1ee7@e*) (oUe5f@syntax-violation '#f '"no expression in body" oU1ee7@e*) (void)) (let ((oU1ef0@init* (oUd9d@chi-expr* (append (apply append (reverse oU1ee2@mod**)) oU1ee7@e*) oU1ee6@r oU1ee5@mr))) (let ((oU1ef2@rhs* (oUdb1@chi-rhs* oU1ee3@rhs* oU1ee6@r oU1ee5@mr))) (oUae2@oUa41@build-letrec* '#f (reverse oU1ee4@lex*) (reverse oU1ef2@rhs*) (oUadd@oUa37@build-sequence '#f oU1ef0@init*))))))))))) (set! oU2871@oUdb7@chi-internal oUdb7@chi-internal) (set! oUdb9@parse-module (lambda (oU1ef4@e) (let ((oU1ef6@t oU1ef4@e)) (let ((oU1ef8@ls/false (oUd7f@syntax-dispatch oU1ef6@t '(_ each-any . each-any)))) (if oU1ef8@ls/false (apply (lambda (oU1efa@export* oU1efb@b*) (begin (if (not (for-all oUb78@id? oU1efa@export*)) (oUe5f@syntax-violation '#f '"module exports must be identifiers" oU1ef4@e) (void)) (values '#f (list->vector oU1efa@export*) oU1efb@b*))) oU1ef8@ls/false) (let ((oU1efe@t oU1ef6@t)) (let ((oU1f00@ls/false (oUd7f@syntax-dispatch oU1efe@t '(_ any each-any . each-any)))) (if oU1f00@ls/false (apply (lambda (oU1f02@name oU1f03@export* oU1f04@b*) (begin (if (not (oUb78@id? oU1f02@name)) (oUe5f@syntax-violation '#f '"module name must be an identifier" oU1ef4@e) (void)) (if (not (for-all oUb78@id? oU1f03@export*)) (oUe5f@syntax-violation '#f '"module exports must be identifiers" oU1ef4@e) (void)) (values oU1f02@name (list->vector oU1f03@export*) oU1f04@b*))) oU1f00@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1efe@t))))))))) (set! oU2872@oUdb9@parse-module oUdb9@parse-module) (set! oUdc3@module-interface? (lambda (oU1f08@x) (and (simple-struct? oU1f08@x) (eq? (simple-struct-name oU1f08@x) 'module-interface)))) (set! oU2873@oUdc3@module-interface? oUdc3@module-interface?) (set! oUdc5@module-interface-first-mark (lambda (oU1f0a@x) (simple-struct-ref oU1f0a@x '0))) (set! oU2874@oUdc5@module-interface-first-mark oUdc5@module-interface-first-mark) (set! oUdc7@set-module-interface-first-mark! (lambda (oU1f0c@x oU1f0d@val) (simple-struct-set! oU1f0c@x '0 oU1f0d@val))) (set! oU2875@oUdc7@set-module-interface-first-mark! oUdc7@set-module-interface-first-mark!) (set! oUdc9@module-interface-exp-id-vec (lambda (oU1f10@x) (simple-struct-ref oU1f10@x '1))) (set! oU2876@oUdc9@module-interface-exp-id-vec oUdc9@module-interface-exp-id-vec) (set! oUdcb@set-module-interface-exp-id-vec! (lambda (oU1f12@x oU1f13@val) (simple-struct-set! oU1f12@x '1 oU1f13@val))) (set! oU2877@oUdcb@set-module-interface-exp-id-vec! oUdcb@set-module-interface-exp-id-vec!) (set! oUdcd@module-interface-exp-lab-vec (lambda (oU1f16@x) (simple-struct-ref oU1f16@x '2))) (set! oU2878@oUdcd@module-interface-exp-lab-vec oUdcd@module-interface-exp-lab-vec) (set! oUdcf@set-module-interface-exp-lab-vec! (lambda (oU1f18@x oU1f19@val) (simple-struct-set! oU1f18@x '2 oU1f19@val))) (set! oU2879@oUdcf@set-module-interface-exp-lab-vec! oUdcf@set-module-interface-exp-lab-vec!) (set! oUdd1@dummy '3) (set! oU287a@oUdd1@dummy oUdd1@dummy) (set! oUdd3@module-interface-exp-id* (lambda (oU1f1c@iface oU1f1d@id) (let ((oU1f21@diff-marks '#f)) (begin (set! oU1f21@diff-marks (lambda (oU1f28@ls oU1f29@x) (begin (if (null? oU1f28@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((oU1f2c@a (car oU1f28@ls))) (if (eq? oU1f2c@a oU1f29@x) '() (cons oU1f2c@a (oU1f21@diff-marks (cdr oU1f28@ls) oU1f29@x))))))) (let ((oU1f22@diff (oU1f21@diff-marks (oUb4a@stx-mark* oU1f1d@id) (oUdc5@module-interface-first-mark oU1f1c@iface))) (oU1f23@id-vec (oUdc9@module-interface-exp-id-vec oU1f1c@iface))) (if (null? oU1f22@diff) oU1f23@id-vec (vector-map (lambda (oU1f26@x) (make-simple-struct 'stx '5 (list (oUb46@stx-expr oU1f26@x) (append oU1f22@diff (oUb4a@stx-mark* oU1f26@x)) '() '()))) oU1f23@id-vec))))))) (set! oU287b@oUdd3@module-interface-exp-id* oUdd3@module-interface-exp-id*) (set! oUdd5@chi-internal-module (lambda (oU1f2e@e oU1f2f@r oU1f30@mr oU1f31@lex* oU1f32@rhs* oU1f33@mod** oU1f34@kwd*) (call-with-values (lambda () (oUdb9@parse-module oU1f2e@e)) (lambda (oU1f42@oU1f3d oU1f43@oU1f3f oU1f44@oU1f41) (let ((oU1f48@e* oU1f44@oU1f41) (oU1f49@exp-id* oU1f43@oU1f3f) (oU1f4a@name oU1f42@oU1f3d)) (let ((oU1f4e@rib (oUb2c@make-empty-rib))) (let ((oU1f50@e* (map (lambda (oU1f52@x) (oUb64@add-subst oU1f4e@rib oU1f52@x)) (oUb76@syntax->list oU1f48@e*)))) (call-with-values (lambda () (oUdd7@chi-body* oU1f50@e* oU1f2f@r oU1f30@mr oU1f31@lex* oU1f32@rhs* oU1f33@mod** oU1f34@kwd* '() oU1f4e@rib '#f)) (lambda (oU1f64@oU1f55 oU1f65@oU1f57 oU1f66@oU1f59 oU1f67@oU1f5b oU1f68@oU1f5d oU1f69@oU1f5f oU1f6a@oU1f61 oU1f6b@oU1f63) (let ((oU1f74@_exp* oU1f6b@oU1f63) (oU1f75@kwd* oU1f6a@oU1f61) (oU1f76@mod** oU1f69@oU1f5f) (oU1f77@rhs* oU1f68@oU1f5d) (oU1f78@lex* oU1f67@oU1f5b) (oU1f79@mr oU1f66@oU1f59) (oU1f7a@r oU1f65@oU1f57) (oU1f7b@e* oU1f64@oU1f55)) (let ((oU1f84@exp-lab* (vector-map (lambda (oU1f88@x) (or (oUb8e@id->label (make-simple-struct 'stx '5 (list (oUb7a@id->sym oU1f88@x) (oUb4a@stx-mark* oU1f88@x) (list oU1f4e@rib) '()))) (oUe5f@syntax-violation '#f '"cannot find module export" oU1f88@x))) oU1f49@exp-id*)) (oU1f85@mod** (cons oU1f7b@e* oU1f76@mod**))) (if (not oU1f4a@name) (values oU1f78@lex* oU1f77@rhs* oU1f49@exp-id* oU1f84@exp-lab* oU1f7a@r oU1f79@mr oU1f85@mod** oU1f75@kwd*) (let ((oU1f8a@lab (oUb04@gen-label 'module)) (oU1f8b@iface (make-simple-struct 'module-interface '4 (list (car (oUb4a@stx-mark* oU1f4a@name)) (vector-map (lambda (oU1f8e@x) (make-simple-struct 'stx '5 (list (oUb46@stx-expr oU1f8e@x) (oUb4a@stx-mark* oU1f8e@x) '() '()))) oU1f49@exp-id*) oU1f84@exp-lab*)))) (values oU1f78@lex* oU1f77@rhs* (vector oU1f4a@name) (vector oU1f8a@lab) (cons (cons oU1f8a@lab (cons '$module oU1f8b@iface)) oU1f7a@r) (cons (cons oU1f8a@lab (cons '$module oU1f8b@iface)) oU1f79@mr) oU1f85@mod** oU1f75@kwd*)))))))))))))) (set! oU287c@oUdd5@chi-internal-module oUdd5@chi-internal-module) (set! oUdd7@chi-body* (lambda (oU1f90@e* oU1f91@r oU1f92@mr oU1f93@lex* oU1f94@rhs* oU1f95@mod** oU1f96@kwd* oU1f97@exp* oU1f98@rib oU1f99@top?) (if (null? oU1f90@e*) (values oU1f90@e* oU1f91@r oU1f92@mr oU1f93@lex* oU1f94@rhs* oU1f95@mod** oU1f96@kwd* oU1f97@exp*) (let ((oU1fa4@e (car oU1f90@e*))) (call-with-values (lambda () (oUb9a@syntax-type oU1fa4@e oU1f91@r)) (lambda (oU1fac@oU1fa7 oU1fad@oU1fa9 oU1fae@oU1fab) (let ((oU1fb2@kwd oU1fae@oU1fab) (oU1fb3@value oU1fad@oU1fa9) (oU1fb4@type oU1fac@oU1fa7)) (let ((oU1fb8@kwd* (if (oUb78@id? oU1fb2@kwd) (cons oU1fb2@kwd oU1f96@kwd*) oU1f96@kwd*))) (let ((oU1fba@t oU1fb4@type)) (if (memv oU1fba@t '(define)) (call-with-values (lambda () (oUd01@parse-define oU1fa4@e)) (lambda (oU1fc0@oU1fbd oU1fc1@oU1fbf) (let ((oU1fc4@rhs oU1fc1@oU1fbf) (oU1fc5@id oU1fc0@oU1fbd)) (begin (if (oUb84@bound-id-member? oU1fc5@id oU1fb8@kwd*) (oUe5f@syntax-violation '#f '"cannot redefine keyword" oU1fa4@e) (void)) (call-with-values (lambda () (oUb08@gen-define-label+loc oU1fc5@id oU1f98@rib)) (lambda (oU1fcc@oU1fc9 oU1fcd@oU1fcb) (let ((oU1fd0@lex oU1fcd@oU1fcb) (oU1fd1@lab oU1fcc@oU1fc9)) (begin (oUb2e@extend-rib! oU1f98@rib oU1fc5@id oU1fd1@lab) (oUdd7@chi-body* (cdr oU1f90@e*) (oUd0f@add-lexical oU1fd1@lab oU1fd0@lex oU1f91@r) oU1f92@mr (cons oU1fd0@lex oU1f93@lex*) (cons oU1fc4@rhs oU1f94@rhs*) oU1f95@mod** oU1fb8@kwd* oU1f97@exp* oU1f98@rib oU1f99@top?))))))))) (if (memv oU1fba@t '(define-syntax)) (call-with-values (lambda () (oUd03@parse-define-syntax oU1fa4@e)) (lambda (oU1fd8@oU1fd5 oU1fd9@oU1fd7) (let ((oU1fdc@rhs oU1fd9@oU1fd7) (oU1fdd@id oU1fd8@oU1fd5)) (begin (if (oUb84@bound-id-member? oU1fdd@id oU1fb8@kwd*) (oUe5f@syntax-violation '#f '"cannot redefine keyword" oU1fa4@e) (void)) (let ((oU1fe0@lab (oUb0a@gen-define-label oU1fdd@id oU1f98@rib)) (oU1fe1@expanded-rhs (oUdd9@expand-transformer oU1fdc@rhs oU1f92@mr))) (begin (oUb2e@extend-rib! oU1f98@rib oU1fdd@id oU1fe0@lab) (let ((oU1fe4@b (oUbb0@make-eval-transformer oU1fe1@expanded-rhs))) (oUdd7@chi-body* (cdr oU1f90@e*) (cons (cons oU1fe0@lab oU1fe4@b) oU1f91@r) (cons (cons oU1fe0@lab oU1fe4@b) oU1f92@mr) oU1f93@lex* oU1f94@rhs* oU1f95@mod** oU1fb8@kwd* oU1f97@exp* oU1f98@rib oU1f99@top?)))))))) (if (memv oU1fba@t '(let-syntax letrec-syntax)) (let ((oU1fe6@t oU1fa4@e)) (let ((oU1fe8@ls/false (oUd7f@syntax-dispatch oU1fe6@t '(_ #(each (any any)) . each-any)))) (if (and oU1fe8@ls/false (apply (lambda (oU1fea@xlhs* oU1feb@xrhs* oU1fec@xbody*) (if (not (oUb80@valid-bound-ids? oU1fea@xlhs*)) (oUe5f@syntax-violation '#f '"invalid identifiers" oU1fa4@e) (void))) oU1fe8@ls/false)) (apply (lambda (oU1ff0@xlhs* oU1ff1@xrhs* oU1ff2@xbody*) (let ((oU1ff6@xlab* (map oUb04@gen-label oU1ff0@xlhs*))) (let ((oU1ff8@xrib (oUb38@make-full-rib oU1ff0@xlhs* oU1ff6@xlab*))) (let ((oU1ffa@xb* (map (lambda (oU1ffc@x) (oUbb0@make-eval-transformer (oUdd9@expand-transformer (if (eq? oU1fb4@type 'let-syntax) oU1ffc@x (oUb64@add-subst oU1ff8@xrib oU1ffc@x)) oU1f92@mr))) oU1ff1@xrhs*))) (oUdd7@chi-body* (append (map (lambda (oU1ffe@x) (oUb64@add-subst oU1ff8@xrib oU1ffe@x)) oU1ff2@xbody*) (cdr oU1f90@e*)) (append (map cons oU1ff6@xlab* oU1ffa@xb*) oU1f91@r) (append (map cons oU1ff6@xlab* oU1ffa@xb*) oU1f92@mr) oU1f93@lex* oU1f94@rhs* oU1f95@mod** oU1fb8@kwd* oU1f97@exp* oU1f98@rib oU1f99@top?))))) oU1fe8@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU1fe6@t)))) (if (memv oU1fba@t '(begin)) (let ((oU2000@t oU1fa4@e)) (let ((oU2002@ls/false (oUd7f@syntax-dispatch oU2000@t '(_ . each-any)))) (if oU2002@ls/false (apply (lambda (oU2004@x*) (oUdd7@chi-body* (append oU2004@x* (cdr oU1f90@e*)) oU1f91@r oU1f92@mr oU1f93@lex* oU1f94@rhs* oU1f95@mod** oU1fb8@kwd* oU1f97@exp* oU1f98@rib oU1f99@top?)) oU2002@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU2000@t)))) (if (memv oU1fba@t '(global-macro global-macro!)) (oUdd7@chi-body* (cons (oUb64@add-subst oU1f98@rib (oUd9b@chi-global-macro oU1fb3@value oU1fa4@e)) (cdr oU1f90@e*)) oU1f91@r oU1f92@mr oU1f93@lex* oU1f94@rhs* oU1f95@mod** oU1fb8@kwd* oU1f97@exp* oU1f98@rib oU1f99@top?) (if (memv oU1fba@t '(local-macro local-macro!)) (oUdd7@chi-body* (cons (oUb64@add-subst oU1f98@rib (oUd99@chi-local-macro oU1fb3@value oU1fa4@e)) (cdr oU1f90@e*)) oU1f91@r oU1f92@mr oU1f93@lex* oU1f94@rhs* oU1f95@mod** oU1fb8@kwd* oU1f97@exp* oU1f98@rib oU1f99@top?) (if (memv oU1fba@t '(macro macro!)) (oUdd7@chi-body* (cons (oUb64@add-subst oU1f98@rib (oUd97@chi-macro oU1fb3@value oU1fa4@e)) (cdr oU1f90@e*)) oU1f91@r oU1f92@mr oU1f93@lex* oU1f94@rhs* oU1f95@mod** oU1fb8@kwd* oU1f97@exp* oU1f98@rib oU1f99@top?) (if (memv oU1fba@t '(module)) (call-with-values (lambda () (oUdd5@chi-internal-module oU1fa4@e oU1f91@r oU1f92@mr oU1f93@lex* oU1f94@rhs* oU1f95@mod** oU1fb8@kwd*)) (lambda (oU2016@oU2007 oU2017@oU2009 oU2018@oU200b oU2019@oU200d oU201a@oU200f oU201b@oU2011 oU201c@oU2013 oU201d@oU2015) (let ((oU2026@kwd* oU201d@oU2015) (oU2027@mod** oU201c@oU2013) (oU2028@mr oU201b@oU2011) (oU2029@r oU201a@oU200f) (oU202a@m-exp-lab* oU2019@oU200d) (oU202b@m-exp-id* oU2018@oU200b) (oU202c@rhs* oU2017@oU2009) (oU202d@lex* oU2016@oU2007)) (begin (vector-for-each (lambda (oU2036@id oU2037@lab) (oUb2e@extend-rib! oU1f98@rib oU2036@id oU2037@lab)) oU202b@m-exp-id* oU202a@m-exp-lab*) (oUdd7@chi-body* (cdr oU1f90@e*) oU2029@r oU2028@mr oU202d@lex* oU202c@rhs* oU2027@mod** oU2026@kwd* oU1f97@exp* oU1f98@rib oU1f99@top?))))) (if (memv oU1fba@t '(library)) (begin (oUe41@library-expander (oUb8c@stx->datum oU1fa4@e)) (oUdd7@chi-body* (cdr oU1f90@e*) oU1f91@r oU1f92@mr oU1f93@lex* oU1f94@rhs* oU1f95@mod** oU1fb8@kwd* oU1f97@exp* oU1f98@rib oU1f99@top?)) (if (memv oU1fba@t '(export)) (let ((oU203a@t oU1fa4@e)) (let ((oU203c@ls/false (oUd7f@syntax-dispatch oU203a@t '(_ . each-any)))) (if oU203c@ls/false (apply (lambda (oU203e@exp-decl*) (oUdd7@chi-body* (cdr oU1f90@e*) oU1f91@r oU1f92@mr oU1f93@lex* oU1f94@rhs* oU1f95@mod** oU1fb8@kwd* (append oU203e@exp-decl* oU1f97@exp*) oU1f98@rib oU1f99@top?)) oU203c@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU203a@t)))) (if (memv oU1fba@t '(import)) (let ((oU2041@module-import? '#f) (oU2043@module-import '#f) (oU2045@library-import '#f)) (begin (set! oU2041@module-import? (lambda (oU2094@e) (let ((oU2096@t oU2094@e)) (let ((oU2098@ls/false (oUd7f@syntax-dispatch oU2096@t '(_ any)))) (if (and oU2098@ls/false (apply (lambda (oU209a@id) (oUb78@id? oU209a@id)) oU2098@ls/false)) (apply (lambda (oU209c@id) '#t) oU2098@ls/false) (let ((oU209e@t oU2096@t)) (let ((oU20a0@ls/false (oUd7f@syntax-dispatch oU209e@t '(_ . each-any)))) (if oU20a0@ls/false (apply (lambda (oU20a2@imp*) '#f) oU20a0@ls/false) (let ((oU20a4@t oU209e@t)) (let ((oU20a6@ls/false (oUd7f@syntax-dispatch oU20a4@t '_))) (if oU20a6@ls/false (apply (lambda () (oUe5f@syntax-violation '#f '"malformed import form" oU2094@e)) oU20a6@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU20a4@t)))))))))))) (set! oU2043@module-import (lambda (oU2072@e oU2073@r) (let ((oU2076@t oU2072@e)) (let ((oU2078@ls/false (oUd7f@syntax-dispatch oU2076@t '(_ any)))) (if (and oU2078@ls/false (apply (lambda (oU207a@id) (oUb78@id? oU207a@id)) oU2078@ls/false)) (apply (lambda (oU207c@id) (call-with-values (lambda () (oUb9a@syntax-type oU207c@id oU2073@r)) (lambda (oU2084@oU207f oU2085@oU2081 oU2086@oU2083) (let ((oU208a@kwd oU2086@oU2083) (oU208b@value oU2085@oU2081) (oU208c@type oU2084@oU207f)) (let ((oU2090@t oU208c@type)) (if (memv oU2090@t '($module)) (let ((oU2092@iface oU208b@value)) (values (oUdd3@module-interface-exp-id* oU2092@iface oU207c@id) (oUdcd@module-interface-exp-lab-vec oU2092@iface))) (oUe5f@syntax-violation '#f '"invalid import" oU2072@e))))))) oU2078@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU2076@t)))))) (set! oU2045@library-import (lambda (oU2056@e) (let ((oU2058@t oU2056@e)) (let ((oU205a@ls/false (oUd7f@syntax-dispatch oU2058@t '(any . each-any)))) (if oU205a@ls/false (apply (lambda (oU205c@ctxt oU205d@imp*) (call-with-values (lambda () (oUde1@parse-import-spec* (oUe65@syntax->datum oU205d@imp*))) (lambda (oU2064@oU2061 oU2065@oU2063) (let ((oU2068@subst-labels oU2065@oU2063) (oU2069@subst-names oU2064@oU2061)) (values (vector-map (lambda (oU206c@name) (oUb58@datum->stx oU205c@ctxt oU206c@name)) oU2069@subst-names) oU2068@subst-labels))))) oU205a@ls/false) (let ((oU206e@t oU2058@t)) (let ((oU2070@ls/false (oUd7f@syntax-dispatch oU206e@t '_))) (if oU2070@ls/false (apply (lambda () (oUe5f@syntax-violation '#f '"invalid import form" oU2056@e)) oU2070@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU206e@t))))))))) (begin (call-with-values (lambda () (if (oU2041@module-import? oU1fa4@e) (oU2043@module-import oU1fa4@e oU1f91@r) (oU2045@library-import oU1fa4@e))) (lambda (oU204a@oU2047 oU204b@oU2049) (let ((oU204e@lab* oU204b@oU2049) (oU204f@id* oU204a@oU2047)) (vector-for-each (lambda (oU2052@id oU2053@lab) (oUb2e@extend-rib! oU1f98@rib oU2052@id oU2053@lab)) oU204f@id* oU204e@lab*)))) (oUdd7@chi-body* (cdr oU1f90@e*) oU1f91@r oU1f92@mr oU1f93@lex* oU1f94@rhs* oU1f95@mod** oU1fb8@kwd* oU1f97@exp* oU1f98@rib oU1f99@top?)))) (if oU1f99@top? (oUdd7@chi-body* (cdr oU1f90@e*) oU1f91@r oU1f92@mr (cons (oUb00@gen-lexical 'dummy) oU1f93@lex*) (cons (cons 'top-expr oU1fa4@e) oU1f94@rhs*) oU1f95@mod** oU1fb8@kwd* oU1f97@exp* oU1f98@rib oU1f99@top?) (values oU1f90@e* oU1f91@r oU1f92@mr oU1f93@lex* oU1f94@rhs* oU1f95@mod** oU1fb8@kwd* oU1f97@exp*)))))))))))))))))))))) (set! oU287d@oUdd7@chi-body* oUdd7@chi-body*) (set! oUdd9@expand-transformer (lambda (oU20a8@expr oU20a9@r) (let ((oU20ac@rtc (oUde5@make-collector))) (let ((oU20ae@expanded-rhs (let ((oU20b8@oU20b1 oUde7@inv-collector) (oU20b9@oU20b3 oUde9@vis-collector) (oU20ba@oU20b5 oU20ac@rtc) (oU20bb@oU20b7 (lambda (oU20c0@x) (values)))) (let ((oU20c2@swap (lambda () (begin (let ((oU20c4@t (oU20b8@oU20b1))) (begin (oU20b8@oU20b1 oU20ba@oU20b5) (set! oU20ba@oU20b5 oU20c4@t))) (let ((oU20c6@t (oU20b9@oU20b3))) (begin (oU20b9@oU20b3 oU20bb@oU20b7) (set! oU20bb@oU20b7 oU20c6@t))))))) (dynamic-wind oU20c2@swap (lambda () (oUda1@chi-expr oU20a8@expr oU20a9@r oU20a9@r)) oU20c2@swap))))) (begin (for-each (let ((oU20c8@mark-visit (oUde9@vis-collector))) (lambda (oU20ca@x) (begin (oU98e@oU7dc@invoke-library oU20ca@x) (oU20c8@mark-visit oU20ca@x)))) (oU20ac@rtc)) oU20ae@expanded-rhs))))) (set! oU287e@oUdd9@expand-transformer oUdd9@expand-transformer) (set! oUddb@parse-exports (lambda (oU20cc@exp*) (let oU20d4@f ((oU20ce@exp* oU20cc@exp*) (oU20cf@int* '()) (oU20d0@ext* '())) (if (null? oU20ce@exp*) (begin (if (not (oUb80@valid-bound-ids? oU20d0@ext*)) (oUe5f@syntax-violation 'export '"invalid exports" (oUdb5@find-dups oU20d0@ext*)) (void)) (values (map oUe65@syntax->datum oU20d0@ext*) oU20cf@int*)) (let ((oU20d6@t (car oU20ce@exp*))) (let ((oU20d8@ls/false (oUd7f@syntax-dispatch oU20d6@t '(any . #(each (any any)))))) (if oU20d8@ls/false (apply (lambda (oU20da@rename oU20db@i* oU20dc@e*) (begin (if (not (and (eq? (oUe65@syntax->datum oU20da@rename) 'rename) (for-all oUb78@id? oU20db@i*) (for-all oUb78@id? oU20dc@e*))) (oUe5f@syntax-violation 'export '"invalid export specifier" (car oU20ce@exp*)) (void)) (oU20d4@f (cdr oU20ce@exp*) (append oU20db@i* oU20cf@int*) (append oU20dc@e* oU20d0@ext*)))) oU20d8@ls/false) (let ((oU20e0@t oU20d6@t)) (let ((oU20e2@ls/false (oUd7f@syntax-dispatch oU20e0@t 'any))) (if oU20e2@ls/false (apply (lambda (oU20e4@ie) (begin (if (not (oUb78@id? oU20e4@ie)) (oUe5f@syntax-violation 'export '"invalid export" oU20e4@ie) (void)) (oU20d4@f (cdr oU20ce@exp*) (cons oU20e4@ie oU20cf@int*) (cons oU20e4@ie oU20d0@ext*)))) oU20e2@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU20e0@t))))))))))) (set! oU287f@oUddb@parse-exports oUddb@parse-exports) (set! oUddd@parse-library-name (lambda (oU20e6@spec) (let ((oU20e9@parse '#f)) (begin (set! oU20e9@parse (lambda (oU20f6@x) (let ((oU20f8@t oU20f6@x)) (let ((oU20fa@ls/false (oUd7f@syntax-dispatch oU20f8@t '(each-any)))) (if (and oU20fa@ls/false (apply (lambda (oU20fc@v*) (for-all (lambda (oU20fe@x) (let ((oU2100@x (oUe65@syntax->datum oU20fe@x))) (and (integer? oU2100@x) (exact? oU2100@x)))) oU20fc@v*)) oU20fa@ls/false)) (apply (lambda (oU2102@v*) (values '() (map oUe65@syntax->datum oU2102@v*))) oU20fa@ls/false) (let ((oU2104@t oU20f8@t)) (let ((oU2106@ls/false (oUd7f@syntax-dispatch oU2104@t '(any . any)))) (if (and oU2106@ls/false (apply (lambda (oU2108@x oU2109@rest) (symbol? (oUe65@syntax->datum oU2108@x))) oU2106@ls/false)) (apply (lambda (oU210c@x oU210d@rest) (call-with-values (lambda () (oU20e9@parse oU210d@rest)) (lambda (oU2114@oU2111 oU2115@oU2113) (let ((oU2118@v* oU2115@oU2113) (oU2119@x* oU2114@oU2111)) (values (cons (oUe65@syntax->datum oU210c@x) oU2119@x*) oU2118@v*))))) oU2106@ls/false) (let ((oU211c@t oU2104@t)) (let ((oU211e@ls/false (oUd7f@syntax-dispatch oU211c@t '()))) (if oU211e@ls/false (apply (lambda () (values '() '())) oU211e@ls/false) (let ((oU2120@t oU211c@t)) (let ((oU2122@ls/false (oUd7f@syntax-dispatch oU2120@t '_))) (if oU2122@ls/false (apply (lambda () (oUe5f@syntax-violation '#f '"invalid library name" oU20e6@spec)) oU2122@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU2120@t))))))))))))))) (call-with-values (lambda () (oU20e9@parse oU20e6@spec)) (lambda (oU20ee@oU20eb oU20ef@oU20ed) (let ((oU20f2@ver* oU20ef@oU20ed) (oU20f3@name* oU20ee@oU20eb)) (begin (if (null? oU20f3@name*) (oUe5f@syntax-violation '#f '"empty library name" oU20e6@spec) (void)) (values oU20f3@name* oU20f2@ver*))))))))) (set! oU2880@oUddd@parse-library-name oUddd@parse-library-name) (set! oUddf@parse-library (lambda (oU2124@e) (let ((oU2126@t oU2124@e)) (let ((oU2128@ls/false (oUd7f@syntax-dispatch oU2126@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and oU2128@ls/false (apply (lambda (oU212a@library oU212b@name* oU212c@export oU212d@exp* oU212e@import oU212f@imp* oU2130@b*) (and (eq? (oUe65@syntax->datum oU212c@export) 'export) (eq? (oUe65@syntax->datum oU212e@import) 'import) (eq? (oUe65@syntax->datum oU212a@library) 'library))) oU2128@ls/false)) (apply (lambda (oU2138@library oU2139@name* oU213a@export oU213b@exp* oU213c@import oU213d@imp* oU213e@b*) (values oU2139@name* oU213b@exp* oU213d@imp* oU213e@b*)) oU2128@ls/false) (let ((oU2146@t oU2126@t)) (let ((oU2148@ls/false (oUd7f@syntax-dispatch oU2146@t '_))) (if oU2148@ls/false (apply (lambda () (oUe5f@syntax-violation '#f '"malformed library" oU2124@e)) oU2148@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU2146@t))))))))) (set! oU2881@oUddf@parse-library oUddf@parse-library) (set! oUde1@parse-import-spec* (let ((oU214b@idsyn? '#f) (oU214d@dup-error '#f) (oU214f@merge-substs '#f) (oU2151@exclude* '#f) (oU2153@find* '#f) (oU2155@rem* '#f) (oU2157@remove-dups '#f) (oU2159@parse-library-name '#f) (oU215b@import-library '#f) (oU215d@get-import '#f) (oU215f@add-imports! '#f)) (begin (set! oU214b@idsyn? (lambda (oU2354@x) (symbol? (oUe65@syntax->datum oU2354@x)))) (set! oU214d@dup-error (lambda (oU2352@name) (oUe5f@syntax-violation 'import '"two imports with different bindings" oU2352@name))) (set! oU214f@merge-substs (lambda (oU2340@s oU2341@subst) (let ((oU2345@insert-to-subst '#f)) (begin (set! oU2345@insert-to-subst (lambda (oU2346@a oU2347@subst) (let ((oU234a@name (car oU2346@a)) (oU234b@label (cdr oU2346@a))) (let ((oU234e@t (assq oU234a@name oU2347@subst))) (if oU234e@t ((lambda (oU2350@x) (if (eq? (cdr oU2350@x) oU234b@label) oU2347@subst (oU214d@dup-error oU234a@name))) oU234e@t) (cons oU2346@a oU2347@subst)))))) (if (null? oU2340@s) oU2341@subst (oU2345@insert-to-subst (car oU2340@s) (oU214f@merge-substs (cdr oU2340@s) oU2341@subst))))))) (set! oU2151@exclude* (lambda (oU2310@sym* oU2311@subst) (let ((oU2315@exclude '#f)) (begin (set! oU2315@exclude (lambda (oU232e@sym oU232f@subst) (if (null? oU232f@subst) (oUe5f@syntax-violation 'import '"cannot rename unbound identifier" oU232e@sym) (if (eq? oU232e@sym (caar oU232f@subst)) (values (cdar oU232f@subst) (cdr oU232f@subst)) (let ((oU2332@a (car oU232f@subst))) (call-with-values (lambda () (oU2315@exclude oU232e@sym (cdr oU232f@subst))) (lambda (oU2338@oU2335 oU2339@oU2337) (let ((oU233c@subst oU2339@oU2337) (oU233d@old oU2338@oU2335)) (values oU233d@old (cons oU2332@a oU233c@subst)))))))))) (if (null? oU2310@sym*) (values '() oU2311@subst) (call-with-values (lambda () (oU2315@exclude (car oU2310@sym*) oU2311@subst)) (lambda (oU231a@oU2317 oU231b@oU2319) (let ((oU231e@subst oU231b@oU2319) (oU231f@old oU231a@oU2317)) (call-with-values (lambda () (oU2151@exclude* (cdr oU2310@sym*) oU231e@subst)) (lambda (oU2326@oU2323 oU2327@oU2325) (let ((oU232a@subst oU2327@oU2325) (oU232b@old* oU2326@oU2323)) (values (cons oU231f@old oU232b@old*) oU232a@subst)))))))))))) (set! oU2153@find* (lambda (oU2308@sym* oU2309@subst) (map (lambda (oU230c@x) (let ((oU230e@t (assq oU230c@x oU2309@subst))) (if oU230e@t (cdr oU230e@t) (oUe5f@syntax-violation 'import '"cannot find identifier" oU230c@x)))) oU2308@sym*))) (set! oU2155@rem* (lambda (oU2300@sym* oU2301@subst) (let oU2306@f ((oU2304@subst oU2301@subst)) (if (null? oU2304@subst) '() (if (memq (caar oU2304@subst) oU2300@sym*) (oU2306@f (cdr oU2304@subst)) (cons (car oU2304@subst) (oU2306@f (cdr oU2304@subst)))))))) (set! oU2157@remove-dups (lambda (oU22fe@ls) (if (null? oU22fe@ls) '() (if (memq (car oU22fe@ls) (cdr oU22fe@ls)) (oU2157@remove-dups (cdr oU22fe@ls)) (cons (car oU22fe@ls) (oU2157@remove-dups (cdr oU22fe@ls))))))) (set! oU2159@parse-library-name (lambda (oU2216@spec) (let ((oU2219@subversion? '#f) (oU221b@subversion-pred '#f) (oU221d@version-pred '#f)) (begin (set! oU2219@subversion? (lambda (oU22fa@x) (let ((oU22fc@x (oUe65@syntax->datum oU22fa@x))) (and (integer? oU22fc@x) (exact? oU22fc@x) (>= oU22fc@x '0))))) (set! oU221b@subversion-pred (lambda (oU229a@x*) (let ((oU229c@t oU229a@x*)) (let ((oU229e@ls/false (oUd7f@syntax-dispatch oU229c@t 'any))) (if (and oU229e@ls/false (apply (lambda (oU22a0@n) (oU2219@subversion? oU22a0@n)) oU229e@ls/false)) (apply (lambda (oU22a2@n) (lambda (oU22a4@x) (= oU22a4@x (oUe65@syntax->datum oU22a2@n)))) oU229e@ls/false) (let ((oU22a6@t oU229c@t)) (let ((oU22a8@ls/false (oUd7f@syntax-dispatch oU22a6@t '(any . each-any)))) (if (and oU22a8@ls/false (apply (lambda (oU22aa@p? oU22ab@sub*) (eq? (oUe65@syntax->datum oU22aa@p?) 'and)) oU22a8@ls/false)) (apply (lambda (oU22ae@p? oU22af@sub*) (let ((oU22b2@p* (map oU221b@subversion-pred oU22af@sub*))) (lambda (oU22b4@x) (for-all (lambda (oU22b6@p) (oU22b6@p oU22b4@x)) oU22b2@p*)))) oU22a8@ls/false) (let ((oU22b8@t oU22a6@t)) (let ((oU22ba@ls/false (oUd7f@syntax-dispatch oU22b8@t '(any . each-any)))) (if (and oU22ba@ls/false (apply (lambda (oU22bc@p? oU22bd@sub*) (eq? (oUe65@syntax->datum oU22bc@p?) 'or)) oU22ba@ls/false)) (apply (lambda (oU22c0@p? oU22c1@sub*) (let ((oU22c4@p* (map oU221b@subversion-pred oU22c1@sub*))) (lambda (oU22c6@x) (exists (lambda (oU22c8@p) (oU22c8@p oU22c6@x)) oU22c4@p*)))) oU22ba@ls/false) (let ((oU22ca@t oU22b8@t)) (let ((oU22cc@ls/false (oUd7f@syntax-dispatch oU22ca@t '(any any)))) (if (and oU22cc@ls/false (apply (lambda (oU22ce@p? oU22cf@sub) (eq? (oUe65@syntax->datum oU22ce@p?) 'not)) oU22cc@ls/false)) (apply (lambda (oU22d2@p? oU22d3@sub) (let ((oU22d6@p (oU221b@subversion-pred oU22d3@sub))) (lambda (oU22d8@x) (not (oU22d6@p oU22d8@x))))) oU22cc@ls/false) (let ((oU22da@t oU22ca@t)) (let ((oU22dc@ls/false (oUd7f@syntax-dispatch oU22da@t '(any any)))) (if (and oU22dc@ls/false (apply (lambda (oU22de@p? oU22df@n) (and (eq? (oUe65@syntax->datum oU22de@p?) '<=) (oU2219@subversion? oU22df@n))) oU22dc@ls/false)) (apply (lambda (oU22e2@p? oU22e3@n) (lambda (oU22e6@x) (<= oU22e6@x (oUe65@syntax->datum oU22e3@n)))) oU22dc@ls/false) (let ((oU22e8@t oU22da@t)) (let ((oU22ea@ls/false (oUd7f@syntax-dispatch oU22e8@t '(any any)))) (if (and oU22ea@ls/false (apply (lambda (oU22ec@p? oU22ed@n) (and (eq? (oUe65@syntax->datum oU22ec@p?) '>=) (oU2219@subversion? oU22ed@n))) oU22ea@ls/false)) (apply (lambda (oU22f0@p? oU22f1@n) (lambda (oU22f4@x) (>= oU22f4@x (oUe65@syntax->datum oU22f1@n)))) oU22ea@ls/false) (let ((oU22f6@t oU22e8@t)) (let ((oU22f8@ls/false (oUd7f@syntax-dispatch oU22f6@t '_))) (if oU22f8@ls/false (apply (lambda () (oUe5f@syntax-violation 'import '"invalid sub-version spec" oU2216@spec oU229a@x*)) oU22f8@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU22f6@t)))))))))))))))))))))))) (set! oU221d@version-pred (lambda (oU224a@x*) (let ((oU224c@t oU224a@x*)) (let ((oU224e@ls/false (oUd7f@syntax-dispatch oU224c@t '()))) (if oU224e@ls/false (apply (lambda () (lambda (oU2250@x) '#t)) oU224e@ls/false) (let ((oU2252@t oU224c@t)) (let ((oU2254@ls/false (oUd7f@syntax-dispatch oU2252@t '(any . each-any)))) (if (and oU2254@ls/false (apply (lambda (oU2256@c oU2257@ver*) (eq? (oUe65@syntax->datum oU2256@c) 'and)) oU2254@ls/false)) (apply (lambda (oU225a@c oU225b@ver*) (let ((oU225e@p* (map oU221d@version-pred oU225b@ver*))) (lambda (oU2260@x) (for-all (lambda (oU2262@p) (oU2262@p oU2260@x)) oU225e@p*)))) oU2254@ls/false) (let ((oU2264@t oU2252@t)) (let ((oU2266@ls/false (oUd7f@syntax-dispatch oU2264@t '(any . each-any)))) (if (and oU2266@ls/false (apply (lambda (oU2268@c oU2269@ver*) (eq? (oUe65@syntax->datum oU2268@c) 'or)) oU2266@ls/false)) (apply (lambda (oU226c@c oU226d@ver*) (let ((oU2270@p* (map oU221d@version-pred oU226d@ver*))) (lambda (oU2272@x) (exists (lambda (oU2274@p) (oU2274@p oU2272@x)) oU2270@p*)))) oU2266@ls/false) (let ((oU2276@t oU2264@t)) (let ((oU2278@ls/false (oUd7f@syntax-dispatch oU2276@t '(any any)))) (if (and oU2278@ls/false (apply (lambda (oU227a@c oU227b@ver) (eq? (oUe65@syntax->datum oU227a@c) 'not)) oU2278@ls/false)) (apply (lambda (oU227e@c oU227f@ver) (let ((oU2282@p (oU221d@version-pred oU227f@ver))) (lambda (oU2284@x) (not (oU2282@p oU2284@x))))) oU2278@ls/false) (let ((oU2286@t oU2276@t)) (let ((oU2288@ls/false (oUd7f@syntax-dispatch oU2286@t 'each-any))) (if oU2288@ls/false (apply (lambda (oU228a@sub*) (let ((oU228c@p* (map oU221b@subversion-pred oU228a@sub*))) (lambda (oU228e@x) (let oU2294@f ((oU2290@p* oU228c@p*) (oU2291@x oU228e@x)) (if (null? oU2290@p*) '#t (if (null? oU2291@x) '#f (and ((car oU2290@p*) (car oU2291@x)) (oU2294@f (cdr oU2290@p*) (cdr oU2291@x))))))))) oU2288@ls/false) (let ((oU2296@t oU2286@t)) (let ((oU2298@ls/false (oUd7f@syntax-dispatch oU2296@t '_))) (if oU2298@ls/false (apply (lambda () (oUe5f@syntax-violation 'import '"invalid version spec" oU2216@spec oU224a@x*)) oU2298@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU2296@t))))))))))))))))))))) (let oU2220@f ((oU221e@x oU2216@spec)) (let ((oU2222@t oU221e@x)) (let ((oU2224@ls/false (oUd7f@syntax-dispatch oU2222@t '(each-any)))) (if oU2224@ls/false (apply (lambda (oU2226@version-spec*) (values '() (oU221d@version-pred oU2226@version-spec*))) oU2224@ls/false) (let ((oU2228@t oU2222@t)) (let ((oU222a@ls/false (oUd7f@syntax-dispatch oU2228@t '(any . any)))) (if (and oU222a@ls/false (apply (lambda (oU222c@x oU222d@x*) (oU214b@idsyn? oU222c@x)) oU222a@ls/false)) (apply (lambda (oU2230@x oU2231@x*) (call-with-values (lambda () (oU2220@f oU2231@x*)) (lambda (oU2238@oU2235 oU2239@oU2237) (let ((oU223c@pred oU2239@oU2237) (oU223d@name oU2238@oU2235)) (values (cons (oUe65@syntax->datum oU2230@x) oU223d@name) oU223c@pred))))) oU222a@ls/false) (let ((oU2240@t oU2228@t)) (let ((oU2242@ls/false (oUd7f@syntax-dispatch oU2240@t '()))) (if oU2242@ls/false (apply (lambda () (values '() (lambda (oU2244@x) '#t))) oU2242@ls/false) (let ((oU2246@t oU2240@t)) (let ((oU2248@ls/false (oUd7f@syntax-dispatch oU2246@t '_))) (if oU2248@ls/false (apply (lambda () (oUe5f@syntax-violation '#f '"invalid import spec" oU2216@spec)) oU2248@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU2246@t)))))))))))))))))) (set! oU215b@import-library (lambda (oU2206@spec*) (call-with-values (lambda () (oU2159@parse-library-name oU2206@spec*)) (lambda (oU220c@oU2209 oU220d@oU220b) (let ((oU2210@pred oU220d@oU220b) (oU2211@name oU220c@oU2209)) (begin (if (null? oU2211@name) (oUe5f@syntax-violation 'import '"empty library name" oU2206@spec*) (void)) (let ((oU2214@lib (oU987@oU7ce@find-library-by-name oU2211@name))) (begin (if (not oU2214@lib) (oUe5f@syntax-violation 'import '"cannot find library with required name" oU2211@name) (void)) (if (not (oU2210@pred (oU961@oU782@library-version oU2214@lib))) (oUe5f@syntax-violation 'import '"library does not satisfy version specification" oU2206@spec* oU2214@lib) (void)) ((oUdeb@imp-collector) oU2214@lib) (oU969@oU792@library-subst oU2214@lib))))))))) (set! oU215d@get-import (lambda (oU2178@spec) (let ((oU217a@t oU2178@spec)) (let ((oU217c@ls/false (oUd7f@syntax-dispatch oU217a@t '(any . each-any)))) (if (and oU217c@ls/false (apply (lambda (oU217e@x oU217f@x*) (not (memq (oUe65@syntax->datum oU217e@x) '(for rename except only prefix library)))) oU217c@ls/false)) (apply (lambda (oU2182@x oU2183@x*) (oU215b@import-library (cons oU2182@x oU2183@x*))) oU217c@ls/false) (let ((oU2186@t oU217a@t)) (let ((oU2188@ls/false (oUd7f@syntax-dispatch oU2186@t '(any any . #(each (any any)))))) (if (and oU2188@ls/false (apply (lambda (oU218a@rename oU218b@isp oU218c@old* oU218d@new*) (and (eq? (oUe65@syntax->datum oU218a@rename) 'rename) (for-all oU214b@idsyn? oU218c@old*) (for-all oU214b@idsyn? oU218d@new*))) oU2188@ls/false)) (apply (lambda (oU2192@rename oU2193@isp oU2194@old* oU2195@new*) (let ((oU219a@subst (oU215d@get-import oU2193@isp)) (oU219b@old* (map oUe65@syntax->datum oU2194@old*)) (oU219c@new* (map oUe65@syntax->datum oU2195@new*))) (let ((oU21a0@old-label* (oU2153@find* oU219b@old* oU219a@subst))) (let ((oU21a2@subst (oU2155@rem* oU219b@old* oU219a@subst))) (oU214f@merge-substs (map cons oU219c@new* oU21a0@old-label*) oU21a2@subst))))) oU2188@ls/false) (let ((oU21a4@t oU2186@t)) (let ((oU21a6@ls/false (oUd7f@syntax-dispatch oU21a4@t '(any any . each-any)))) (if (and oU21a6@ls/false (apply (lambda (oU21a8@except oU21a9@isp oU21aa@sym*) (and (eq? (oUe65@syntax->datum oU21a8@except) 'except) (for-all oU214b@idsyn? oU21aa@sym*))) oU21a6@ls/false)) (apply (lambda (oU21ae@except oU21af@isp oU21b0@sym*) (let ((oU21b4@subst (oU215d@get-import oU21af@isp))) (oU2155@rem* (map oUe65@syntax->datum oU21b0@sym*) oU21b4@subst))) oU21a6@ls/false) (let ((oU21b6@t oU21a4@t)) (let ((oU21b8@ls/false (oUd7f@syntax-dispatch oU21b6@t '(any any . each-any)))) (if (and oU21b8@ls/false (apply (lambda (oU21ba@only oU21bb@isp oU21bc@sym*) (and (eq? (oUe65@syntax->datum oU21ba@only) 'only) (for-all oU214b@idsyn? oU21bc@sym*))) oU21b8@ls/false)) (apply (lambda (oU21c0@only oU21c1@isp oU21c2@sym*) (let ((oU21c6@subst (oU215d@get-import oU21c1@isp)) (oU21c7@sym* (map oUe65@syntax->datum oU21c2@sym*))) (let ((oU21ca@sym* (oU2157@remove-dups oU21c7@sym*))) (let ((oU21cc@lab* (oU2153@find* oU21ca@sym* oU21c6@subst))) (map cons oU21ca@sym* oU21cc@lab*))))) oU21b8@ls/false) (let ((oU21ce@t oU21b6@t)) (let ((oU21d0@ls/false (oUd7f@syntax-dispatch oU21ce@t '(any any any)))) (if (and oU21d0@ls/false (apply (lambda (oU21d2@prefix oU21d3@isp oU21d4@p) (and (eq? (oUe65@syntax->datum oU21d2@prefix) 'prefix) (oU214b@idsyn? oU21d4@p))) oU21d0@ls/false)) (apply (lambda (oU21d8@prefix oU21d9@isp oU21da@p) (let ((oU21de@subst (oU215d@get-import oU21d9@isp)) (oU21df@prefix (symbol->string (oUe65@syntax->datum oU21da@p)))) (map (lambda (oU21e2@x) (cons (string->symbol (string-append oU21df@prefix (symbol->string (car oU21e2@x)))) (cdr oU21e2@x))) oU21de@subst))) oU21d0@ls/false) (let ((oU21e4@t oU21ce@t)) (let ((oU21e6@ls/false (oUd7f@syntax-dispatch oU21e4@t '(any each-any)))) (if (and oU21e6@ls/false (apply (lambda (oU21e8@library oU21e9@spec*) (eq? (oUe65@syntax->datum oU21e8@library) 'library)) oU21e6@ls/false)) (apply (lambda (oU21ec@library oU21ed@spec*) (oU215b@import-library oU21ed@spec*)) oU21e6@ls/false) (let ((oU21f0@t oU21e4@t)) (let ((oU21f2@ls/false (oUd7f@syntax-dispatch oU21f0@t '(any any . any)))) (if (and oU21f2@ls/false (apply (lambda (oU21f4@for oU21f5@isp oU21f6@rest) (eq? (oUe65@syntax->datum oU21f4@for) 'for)) oU21f2@ls/false)) (apply (lambda (oU21fa@for oU21fb@isp oU21fc@rest) (oU215d@get-import oU21fb@isp)) oU21f2@ls/false) (let ((oU2200@t oU21f0@t)) (let ((oU2202@ls/false (oUd7f@syntax-dispatch oU2200@t 'any))) (if oU2202@ls/false (apply (lambda (oU2204@spec) (oUe5f@syntax-violation 'import '"invalid import spec" oU2204@spec)) oU2202@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU2200@t))))))))))))))))))))))))))) (set! oU215f@add-imports! (lambda (oU2168@imp oU2169@h) (let ((oU216c@subst (oU215d@get-import oU2168@imp))) (for-each (lambda (oU216e@x) (let ((oU2170@name (car oU216e@x)) (oU2171@label (cdr oU216e@x))) (let ((oU2174@t (hashtable-ref oU2169@h oU2170@name '#f))) (if oU2174@t ((lambda (oU2176@l) (if (not (eq? oU2176@l oU2171@label)) (oU214d@dup-error oU2170@name) (void))) oU2174@t) (hashtable-set! oU2169@h oU2170@name oU2171@label))))) oU216c@subst)))) (lambda (oU2160@imp*) (let oU2166@f ((oU2162@imp* oU2160@imp*) (oU2163@h (make-eq-hashtable))) (if (null? oU2162@imp*) (hashtable-entries oU2163@h) (begin (oU215f@add-imports! (car oU2162@imp*) oU2163@h) (oU2166@f (cdr oU2162@imp*) oU2163@h)))))))) (set! oU2882@oUde1@parse-import-spec* oUde1@parse-import-spec*) (set! oUde3@make-top-rib (lambda (oU2356@names oU2357@labels) (let ((oU235a@rib (oUb2c@make-empty-rib))) (begin (vector-for-each (lambda (oU235c@name oU235d@label) (begin (if (not (symbol? oU235c@name)) (error 'make-top-rib '"BUG: not a symbol" oU235c@name) (void)) (oUb30@extend-rib/nc! oU235a@rib (make-simple-struct 'stx '5 (list oU235c@name oUafc@top-mark* '() '())) oU235d@label))) oU2356@names oU2357@labels) oU235a@rib)))) (set! oU2883@oUde3@make-top-rib oUde3@make-top-rib) (set! oUde5@make-collector (lambda () (let ((oU2360@ls '())) (lambda oU2364 (let ((oU2365 (length oU2364))) (if (= oU2365 '0) (apply (lambda () oU2360@ls) oU2364) (if (= oU2365 '1) (apply (lambda (oU2362@x) (set! oU2360@ls (oUaf5@set-cons oU2362@x oU2360@ls))) oU2364) (error 'apply '"invalid arg count")))))))) (set! oU2884@oUde5@make-collector oUde5@make-collector) (set! oUde7@inv-collector (oU6c2@oU5a1@make-parameter (lambda oU2366@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (oU2368@x) (begin (if (not (procedure? oU2368@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" oU2368@x) (void)) oU2368@x)))) (set! oU2885@oUde7@inv-collector oUde7@inv-collector) (set! oUde9@vis-collector (oU6c2@oU5a1@make-parameter (lambda oU236a@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (oU236c@x) (begin (if (not (procedure? oU236c@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" oU236c@x) (void)) oU236c@x)))) (set! oU2886@oUde9@vis-collector oUde9@vis-collector) (set! oUdeb@imp-collector (oU6c2@oU5a1@make-parameter (lambda oU236e@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (oU2370@x) (begin (if (not (procedure? oU2370@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" oU2370@x) (void)) oU2370@x)))) (set! oU2887@oUdeb@imp-collector oUdeb@imp-collector) (set! oUded@chi-library-internal (lambda (oU2372@e* oU2373@rib oU2374@top?) (call-with-values (lambda () (oUdd7@chi-body* oU2372@e* '() '() '() '() '() '() '() oU2373@rib oU2374@top?)) (lambda (oU2388@oU2379 oU2389@oU237b oU238a@oU237d oU238b@oU237f oU238c@oU2381 oU238d@oU2383 oU238e@oU2385 oU238f@oU2387) (let ((oU2398@exp* oU238f@oU2387) (oU2399@_kwd* oU238e@oU2385) (oU239a@mod** oU238d@oU2383) (oU239b@rhs* oU238c@oU2381) (oU239c@lex* oU238b@oU237f) (oU239d@mr oU238a@oU237d) (oU239e@r oU2389@oU237b) (oU239f@e* oU2388@oU2379)) (values (append (apply append (reverse oU239a@mod**)) oU239f@e*) oU239e@r oU239d@mr (reverse oU239c@lex*) (reverse oU239b@rhs*) oU2398@exp*)))))) (set! oU2888@oUded@chi-library-internal oUded@chi-library-internal) (set! oUdef@chi-interaction-expr (lambda (oU23a8@e oU23a9@rib oU23aa@r) (call-with-values (lambda () (oUdd7@chi-body* (list oU23a8@e) oU23aa@r oU23aa@r '() '() '() '() '() oU23a9@rib '#t)) (lambda (oU23be@oU23af oU23bf@oU23b1 oU23c0@oU23b3 oU23c1@oU23b5 oU23c2@oU23b7 oU23c3@oU23b9 oU23c4@oU23bb oU23c5@oU23bd) (let ((oU23ce@_exp* oU23c5@oU23bd) (oU23cf@_kwd* oU23c4@oU23bb) (oU23d0@mod** oU23c3@oU23b9) (oU23d1@rhs* oU23c2@oU23b7) (oU23d2@lex* oU23c1@oU23b5) (oU23d3@mr oU23c0@oU23b3) (oU23d4@r oU23bf@oU23b1) (oU23d5@e* oU23be@oU23af)) (let ((oU23de@e* (oUdaf@expand-interaction-rhs*/init* (reverse oU23d2@lex*) (reverse oU23d1@rhs*) (append (apply append (reverse oU23d0@mod**)) oU23d5@e*) oU23d4@r oU23d3@mr))) (let ((oU23e0@e (if (null? oU23de@e*) (oUade@oUa39@build-void) (if (null? (cdr oU23de@e*)) (car oU23de@e*) (oUadd@oUa37@build-sequence '#f oU23de@e*))))) (values oU23e0@e oU23d4@r)))))))) (set! oU2889@oUdef@chi-interaction-expr oUdef@chi-interaction-expr) (set! oUdf1@library-body-expander (lambda (oU23e2@name oU23e3@main-exp* oU23e4@imp* oU23e5@b* oU23e6@top?) (let ((oU23ed@itc '#f)) (begin (set! oU23ed@itc (oUde5@make-collector)) (let ((oU23f6@oU23ef oUdeb@imp-collector) (oU23f7@oU23f1 oUe6f@top-level-context) (oU23f8@oU23f3 oU23ed@itc) (oU23f9@oU23f5 '#f)) (let ((oU23fe@swap (lambda () (begin (let ((oU2400@t (oU23f6@oU23ef))) (begin (oU23f6@oU23ef oU23f8@oU23f3) (set! oU23f8@oU23f3 oU2400@t))) (let ((oU2402@t (oU23f7@oU23f1))) (begin (oU23f7@oU23f1 oU23f9@oU23f5) (set! oU23f9@oU23f5 oU2402@t))))))) (dynamic-wind oU23fe@swap (lambda () (call-with-values (lambda () (oUde1@parse-import-spec* oU23e4@imp*)) (lambda (oU2408@oU2405 oU2409@oU2407) (let ((oU240c@subst-labels oU2409@oU2407) (oU240d@subst-names oU2408@oU2405)) (let ((oU2410@rib (oUde3@make-top-rib oU240d@subst-names oU240c@subst-labels))) (let ((oU2413@wrap '#f)) (begin (set! oU2413@wrap (lambda (oU248e@x) (make-simple-struct 'stx '5 (list oU248e@x oUafc@top-mark* (list oU2410@rib) '())))) (let ((oU2414@b* (map oU2413@wrap oU23e5@b*)) (oU2415@main-exp* (map oU2413@wrap oU23e3@main-exp*)) (oU2416@rtc (oUde5@make-collector)) (oU2417@vtc (oUde5@make-collector))) (let ((oU2424@oU241d oUde7@inv-collector) (oU2425@oU241f oUde9@vis-collector) (oU2426@oU2421 oU2416@rtc) (oU2427@oU2423 oU2417@vtc)) (let ((oU242c@swap (lambda () (begin (let ((oU242e@t (oU2424@oU241d))) (begin (oU2424@oU241d oU2426@oU2421) (set! oU2426@oU2421 oU242e@t))) (let ((oU2430@t (oU2425@oU241f))) (begin (oU2425@oU241f oU2427@oU2423) (set! oU2427@oU2423 oU2430@t))))))) (dynamic-wind oU242c@swap (lambda () (call-with-values (lambda () (oUded@chi-library-internal oU2414@b* oU2410@rib oU23e6@top?)) (lambda (oU243e@oU2433 oU243f@oU2435 oU2440@oU2437 oU2441@oU2439 oU2442@oU243b oU2443@oU243d) (let ((oU244a@internal-exp* oU2443@oU243d) (oU244b@rhs* oU2442@oU243b) (oU244c@lex* oU2441@oU2439) (oU244d@mr oU2440@oU2437) (oU244e@r oU243f@oU2435) (oU244f@init* oU243e@oU2433)) (call-with-values (lambda () (oUddb@parse-exports (append oU2415@main-exp* oU244a@internal-exp*))) (lambda (oU245a@oU2457 oU245b@oU2459) (let ((oU245e@exp-id* oU245b@oU2459) (oU245f@exp-name* oU245a@oU2457)) (begin (oUb34@seal-rib! oU2410@rib) (let ((oU2462@init* (oUd9d@chi-expr* oU244f@init* oU244e@r oU244d@mr))) (let ((oU2464@rhs* (oUdb1@chi-rhs* oU244b@rhs* oU244e@r oU244d@mr))) (begin (oUb36@unseal-rib! oU2410@rib) (let ((oU2466@loc* (map oUb02@gen-global oU244c@lex*)) (oU2467@export-subst (oUe49@make-export-subst oU245f@exp-name* oU245e@exp-id*))) (let ((oU246b@errstr '#f)) (begin (set! oU246b@errstr '"attempt to export mutated variable") (call-with-values (lambda () (oUe4b@make-export-env/macros oU244c@lex* oU2466@loc* oU244e@r)) (lambda (oU2472@oU246d oU2473@oU246f oU2474@oU2471) (let ((oU2478@macro* oU2474@oU2471) (oU2479@global* oU2473@oU246f) (oU247a@export-env oU2472@oU246d)) (begin (for-each (lambda (oU247e@s) (let ((oU2480@name (car oU247e@s)) (oU2481@label (cdr oU247e@s))) (let ((oU2484@p (assq oU2481@label oU247a@export-env))) (if oU2484@p (let ((oU2486@b (cdr oU2484@p))) (let ((oU2488@type (car oU2486@b))) (if (eq? oU2488@type 'mutable) (oUe5f@syntax-violation 'export oU246b@errstr oU2480@name) (void)))) (void))))) oU2467@export-subst) (let ((oU248a@invoke-body (oUae3@oUa43@build-library-letrec* '#f oU23e2@name oU244c@lex* oU2466@loc* oU2464@rhs* (if (null? oU2462@init*) (oUade@oUa39@build-void) (oUadd@oUa37@build-sequence '#f oU2462@init*)))) (oU248b@invoke-definitions (map oUada@oU996@build-global-define (map cdr oU2479@global*)))) (values (oU23ed@itc) (oU2416@rtc) (oU2417@vtc) (oUadd@oUa37@build-sequence '#f (append oU248b@invoke-definitions (list oU248a@invoke-body))) oU2478@macro* oU2467@export-subst oU247a@export-env)))))))))))))))))))) oU242c@swap))))))))))) oU23fe@swap))))))) (set! oU288a@oUdf1@library-body-expander oUdf1@library-body-expander) (set! oUdf3@core-library-expander (lambda (oU2490@e oU2491@verify-name) (call-with-values (lambda () (oUddf@parse-library oU2490@e)) (lambda (oU249c@oU2495 oU249d@oU2497 oU249e@oU2499 oU249f@oU249b) (let ((oU24a4@b* oU249f@oU249b) (oU24a5@imp* oU249e@oU2499) (oU24a6@exp* oU249d@oU2497) (oU24a7@name* oU249c@oU2495)) (call-with-values (lambda () (oUddd@parse-library-name oU24a7@name*)) (lambda (oU24b0@oU24ad oU24b1@oU24af) (let ((oU24b4@ver oU24b1@oU24af) (oU24b5@name oU24b0@oU24ad)) (begin (oU2491@verify-name oU24b5@name) (call-with-values (lambda () (oUdf1@library-body-expander oU24b5@name oU24a6@exp* oU24a5@imp* oU24a4@b* '#f)) (lambda (oU24c6@oU24b9 oU24c7@oU24bb oU24c8@oU24bd oU24c9@oU24bf oU24ca@oU24c1 oU24cb@oU24c3 oU24cc@oU24c5) (let ((oU24d4@export-env oU24cc@oU24c5) (oU24d5@export-subst oU24cb@oU24c3) (oU24d6@visit-code oU24ca@oU24c1) (oU24d7@invoke-code oU24c9@oU24bf) (oU24d8@visit-req* oU24c8@oU24bd) (oU24d9@invoke-req* oU24c7@oU24bb) (oU24da@imp* oU24c6@oU24b9)) (values oU24b5@name oU24b4@ver oU24da@imp* oU24d9@invoke-req* oU24d8@visit-req* oU24d7@invoke-code oU24d6@visit-code oU24d5@export-subst oU24d4@export-env))))))))))))) (set! oU288b@oUdf3@core-library-expander oUdf3@core-library-expander) (set! oUdf5@parse-top-level-program (lambda (oU24e2@e*) (let ((oU24e4@t oU24e2@e*)) (let ((oU24e6@ls/false (oUd7f@syntax-dispatch oU24e4@t '((any . each-any) . each-any)))) (if (and oU24e6@ls/false (apply (lambda (oU24e8@import oU24e9@imp* oU24ea@b*) (eq? (oUe65@syntax->datum oU24e8@import) 'import)) oU24e6@ls/false)) (apply (lambda (oU24ee@import oU24ef@imp* oU24f0@b*) (values oU24ef@imp* oU24f0@b*)) oU24e6@ls/false) (let ((oU24f4@t oU24e4@t)) (let ((oU24f6@ls/false (oUd7f@syntax-dispatch oU24f4@t '((any . any) . any)))) (if (and oU24f6@ls/false (apply (lambda (oU24f8@import oU24f9@x oU24fa@y) (eq? (oUe65@syntax->datum oU24f8@import) 'import)) oU24f6@ls/false)) (apply (lambda (oU24fe@import oU24ff@x oU2500@y) (oUe5f@syntax-violation 'expander '"invalid syntax of top-level program" (oUb72@syntax-car oU24e2@e*))) oU24f6@ls/false) (let ((oU2504@t oU24f4@t)) (let ((oU2506@ls/false (oUd7f@syntax-dispatch oU2504@t '_))) (if oU2506@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) oU2506@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU2504@t)))))))))))) (set! oU288c@oUdf5@parse-top-level-program oUdf5@parse-top-level-program) (set! oUdf7@top-level-expander (lambda (oU2508@e*) (call-with-values (lambda () (oUdf5@parse-top-level-program oU2508@e*)) (lambda (oU250e@oU250b oU250f@oU250d) (let ((oU2512@b* oU250f@oU250d) (oU2513@imp* oU250e@oU250b)) (call-with-values (lambda () (oUdf1@library-body-expander '() '() oU2513@imp* oU2512@b* '#t)) (lambda (oU2524@oU2517 oU2525@oU2519 oU2526@oU251b oU2527@oU251d oU2528@oU251f oU2529@oU2521 oU252a@oU2523) (let ((oU2532@export-env oU252a@oU2523) (oU2533@export-subst oU2529@oU2521) (oU2534@visit-code oU2528@oU251f) (oU2535@invoke-code oU2527@oU251d) (oU2536@visit-req* oU2526@oU251b) (oU2537@invoke-req* oU2525@oU2519) (oU2538@imp* oU2524@oU2517)) (values oU2537@invoke-req* oU2535@invoke-code))))))))) (set! oU288d@oUdf7@top-level-expander oUdf7@top-level-expander) (set! oUdf9@rp (oU6bf@oU59b@make-record-printer 'env (lambda (oU2540@x oU2541@p oU2542@wr) (display '"#<environment>" oU2541@p)))) (set! oU288e@oUdf9@rp oUdf9@rp) (set! oUe03@env? (lambda (oU2546@x) (and (simple-struct? oU2546@x) (eq? (simple-struct-name oU2546@x) 'env)))) (set! oU288f@oUe03@env? oUe03@env?) (set! oUe05@env-names (lambda (oU2548@x) (simple-struct-ref oU2548@x '0))) (set! oU2890@oUe05@env-names oUe05@env-names) (set! oUe07@set-env-names! (lambda (oU254a@x oU254b@val) (simple-struct-set! oU254a@x '0 oU254b@val))) (set! oU2891@oUe07@set-env-names! oUe07@set-env-names!) (set! oUe09@env-labels (lambda (oU254e@x) (simple-struct-ref oU254e@x '1))) (set! oU2892@oUe09@env-labels oUe09@env-labels) (set! oUe0b@set-env-labels! (lambda (oU2550@x oU2551@val) (simple-struct-set! oU2550@x '1 oU2551@val))) (set! oU2893@oUe0b@set-env-labels! oUe0b@set-env-labels!) (set! oUe0d@env-itc (lambda (oU2554@x) (simple-struct-ref oU2554@x '2))) (set! oU2894@oUe0d@env-itc oUe0d@env-itc) (set! oUe0f@set-env-itc! (lambda (oU2556@x oU2557@val) (simple-struct-set! oU2556@x '2 oU2557@val))) (set! oU2895@oUe0f@set-env-itc! oUe0f@set-env-itc!) (set! oUe11@dummy '3) (set! oU2896@oUe11@dummy oUe11@dummy) (set! oUe13@rp (oU6bf@oU59b@make-record-printer 'interaction-env (lambda (oU255a@x oU255b@p oU255c@wr) (display '"#<environment>" oU255b@p)))) (set! oU2897@oUe13@rp oUe13@rp) (set! oUe1d@interaction-env? (lambda (oU2560@x) (and (simple-struct? oU2560@x) (eq? (simple-struct-name oU2560@x) 'interaction-env)))) (set! oU2898@oUe1d@interaction-env? oUe1d@interaction-env?) (set! oUe1f@interaction-env-rib (lambda (oU2562@x) (simple-struct-ref oU2562@x '0))) (set! oU2899@oUe1f@interaction-env-rib oUe1f@interaction-env-rib) (set! oUe21@set-interaction-env-rib! (lambda (oU2564@x oU2565@val) (simple-struct-set! oU2564@x '0 oU2565@val))) (set! oU289a@oUe21@set-interaction-env-rib! oUe21@set-interaction-env-rib!) (set! oUe23@interaction-env-r (lambda (oU2568@x) (simple-struct-ref oU2568@x '1))) (set! oU289b@oUe23@interaction-env-r oUe23@interaction-env-r) (set! oUe25@set-interaction-env-r! (lambda (oU256a@x oU256b@val) (simple-struct-set! oU256a@x '1 oU256b@val))) (set! oU289c@oUe25@set-interaction-env-r! oUe25@set-interaction-env-r!) (set! oUe27@interaction-env-locs (lambda (oU256e@x) (simple-struct-ref oU256e@x '2))) (set! oU289d@oUe27@interaction-env-locs oUe27@interaction-env-locs) (set! oUe29@set-interaction-env-locs! (lambda (oU2570@x oU2571@val) (simple-struct-set! oU2570@x '2 oU2571@val))) (set! oU289e@oUe29@set-interaction-env-locs! oUe29@set-interaction-env-locs!) (set! oUe2b@dummy '3) (set! oU289f@oUe2b@dummy oUe2b@dummy) (set! oUe2d@interaction-environment-symbols (lambda () (oUe35@environment-symbols (oUe6d@interaction-environment)))) (set! oU28a0@oUe2d@interaction-environment-symbols oUe2d@interaction-environment-symbols) (set! oUe2f@environment-bindings (lambda (oU2574@e) (vector->list (vector-map (lambda (oU2576@name oU2577@label) (oUe31@parse-binding (cons oU2576@name (oU98d@oU7da@imported-label->binding oU2577@label)))) (oUe05@env-names oU2574@e) (oUe09@env-labels oU2574@e))))) (set! oU28a1@oUe2f@environment-bindings oUe2f@environment-bindings) (set! oUe31@parse-binding (lambda (oU257a@b) (cons (car oU257a@b) (let ((oU257c@t (cadr oU257a@b))) (if (memv oU257c@t '(core-prim global)) 'procedure (if (memv oU257c@t '(core-macro macro global-macro)) 'syntax (if (memv oU257c@t '($core-rtd)) 'record (if (eq? (car oU257a@b) (cadr oU257a@b)) 'syntax 'unknown)))))))) (set! oU28a2@oUe31@parse-binding oUe31@parse-binding) (set! oUe33@environment? (lambda (oU257e@x) (or (oUe03@env? oU257e@x) (oUe1d@interaction-env? oU257e@x)))) (set! oU28a3@oUe33@environment? oUe33@environment?) (set! oUe35@environment-symbols (lambda (oU2580@x) (if (oUe03@env? oU2580@x) (vector->list (oUe05@env-names oU2580@x)) (if (oUe1d@interaction-env? oU2580@x) (map values (oUb16@rib-sym* (oUe1f@interaction-env-rib oU2580@x))) (assertion-violation 'environment-symbols '"not an environment" oU2580@x))))) (set! oU28a4@oUe35@environment-symbols oUe35@environment-symbols) (set! oUe37@environment (lambda oU2582@imp* (let ((oU2584@itc (oUde5@make-collector))) (let ((oU258a@oU2587 oUdeb@imp-collector) (oU258b@oU2589 oU2584@itc)) (let ((oU258e@swap (lambda () (let ((oU2590@t (oU258a@oU2587))) (begin (oU258a@oU2587 oU258b@oU2589) (set! oU258b@oU2589 oU2590@t)))))) (dynamic-wind oU258e@swap (lambda () (call-with-values (lambda () (oUde1@parse-import-spec* oU2582@imp*)) (lambda (oU2596@oU2593 oU2597@oU2595) (let ((oU259a@subst-labels oU2597@oU2595) (oU259b@subst-names oU2596@oU2593)) (make-simple-struct 'env '4 (list oU259b@subst-names oU259a@subst-labels oU2584@itc)))))) oU258e@swap)))))) (set! oU28a5@oUe37@environment oUe37@environment) (set! oUe39@null-environment (lambda (oU259e@n) (begin (if (not (eqv? oU259e@n '5)) (assertion-violation 'null-environment '"not 5" oU259e@n) (void)) (oUe37@environment '(psyntax null-environment-5))))) (set! oU28a6@oUe39@null-environment oUe39@null-environment) (set! oUe3b@scheme-report-environment (lambda (oU25a0@n) (begin (if (not (eqv? oU25a0@n '5)) (assertion-violation 'scheme-report-environment '"not 5" oU25a0@n) (void)) (oUe37@environment '(psyntax scheme-report-environment-5))))) (set! oU28a7@oUe3b@scheme-report-environment oUe3b@scheme-report-environment) (set! oUe3d@expand (lambda (oU25a2@x oU25a3@env) (if (oUe03@env? oU25a3@env) (let ((oU25a6@rib (oUde3@make-top-rib (oUe05@env-names oU25a3@env) (oUe09@env-labels oU25a3@env)))) (let ((oU25a8@x (make-simple-struct 'stx '5 (list oU25a2@x oUafc@top-mark* (list oU25a6@rib) '()))) (oU25a9@itc (oUe0d@env-itc oU25a3@env)) (oU25aa@rtc (oUde5@make-collector)) (oU25ab@vtc (oUde5@make-collector))) (let ((oU25b0@x (let ((oU25c2@oU25b3 oUe6f@top-level-context) (oU25c3@oU25b5 oUde7@inv-collector) (oU25c4@oU25b7 oUde9@vis-collector) (oU25c5@oU25b9 oUdeb@imp-collector) (oU25c6@oU25bb '#f) (oU25c7@oU25bd oU25aa@rtc) (oU25c8@oU25bf oU25ab@vtc) (oU25c9@oU25c1 oU25a9@itc)) (let ((oU25d2@swap (lambda () (begin (let ((oU25d4@t (oU25c2@oU25b3))) (begin (oU25c2@oU25b3 oU25c6@oU25bb) (set! oU25c6@oU25bb oU25d4@t))) (let ((oU25d6@t (oU25c3@oU25b5))) (begin (oU25c3@oU25b5 oU25c7@oU25bd) (set! oU25c7@oU25bd oU25d6@t))) (let ((oU25d8@t (oU25c4@oU25b7))) (begin (oU25c4@oU25b7 oU25c8@oU25bf) (set! oU25c8@oU25bf oU25d8@t))) (let ((oU25da@t (oU25c5@oU25b9))) (begin (oU25c5@oU25b9 oU25c9@oU25c1) (set! oU25c9@oU25c1 oU25da@t))))))) (dynamic-wind oU25d2@swap (lambda () (oUda1@chi-expr oU25a8@x '() '())) oU25d2@swap))))) (begin (oUb34@seal-rib! oU25a6@rib) (values oU25b0@x (oU25aa@rtc)))))) (if (oUe1d@interaction-env? oU25a3@env) (let ((oU25dc@rib (oUe1f@interaction-env-rib oU25a3@env)) (oU25dd@r (oUe23@interaction-env-r oU25a3@env)) (oU25de@rtc (oUde5@make-collector))) (let ((oU25e2@x (make-simple-struct 'stx '5 (list oU25a2@x oUafc@top-mark* (list oU25dc@rib) '())))) (call-with-values (lambda () (let ((oU25f8@oU25e9 oUe6f@top-level-context) (oU25f9@oU25eb oUde7@inv-collector) (oU25fa@oU25ed oUde9@vis-collector) (oU25fb@oU25ef oUdeb@imp-collector) (oU25fc@oU25f1 oU25a3@env) (oU25fd@oU25f3 oU25de@rtc) (oU25fe@oU25f5 (oUde5@make-collector)) (oU25ff@oU25f7 (oUde5@make-collector))) (let ((oU2608@swap (lambda () (begin (let ((oU260a@t (oU25f8@oU25e9))) (begin (oU25f8@oU25e9 oU25fc@oU25f1) (set! oU25fc@oU25f1 oU260a@t))) (let ((oU260c@t (oU25f9@oU25eb))) (begin (oU25f9@oU25eb oU25fd@oU25f3) (set! oU25fd@oU25f3 oU260c@t))) (let ((oU260e@t (oU25fa@oU25ed))) (begin (oU25fa@oU25ed oU25fe@oU25f5) (set! oU25fe@oU25f5 oU260e@t))) (let ((oU2610@t (oU25fb@oU25ef))) (begin (oU25fb@oU25ef oU25ff@oU25f7) (set! oU25ff@oU25f7 oU2610@t))))))) (dynamic-wind oU2608@swap (lambda () (oUdef@chi-interaction-expr oU25e2@x oU25dc@rib oU25dd@r)) oU2608@swap)))) (lambda (oU2612@oU25e5 oU2613@oU25e7) (let ((oU2616@r^ oU2613@oU25e7) (oU2617@e oU2612@oU25e5)) (begin (oUe25@set-interaction-env-r! oU25a3@env oU2616@r^) (values oU2617@e (oU25de@rtc)))))))) (assertion-violation 'expand '"not an environment" oU25a3@env))))) (set! oU28a8@oUe3d@expand oUe3d@expand) (set! oUe3f@eval (lambda (oU261a@x oU261b@env) (begin (if (not (oUe33@environment? oU261b@env)) (error 'eval '"not an environment" oU261b@env) (void)) (call-with-values (lambda () (oUe3d@expand oU261a@x oU261b@env)) (lambda (oU2622@oU261f oU2623@oU2621) (let ((oU2626@invoke-req* oU2623@oU2621) (oU2627@x oU2622@oU261f)) (begin (for-each oU98e@oU7dc@invoke-library oU2626@invoke-req*) (eval-core (oU718@oU6d0@expanded->core oU2627@x))))))))) (set! oU28a9@oUe3f@eval oUe3f@eval) (set! oUe41@library-expander (lambda oU2698 (let ((oU2699 (length oU2698))) (if (= oU2699 '3) (apply (lambda (oU262a@x oU262b@filename oU262c@verify-name) (let ((oU2631@build-visit-code '#f) (oU2633@visit! '#f)) (begin (set! oU2631@build-visit-code (lambda (oU2686@macro*) (if (null? oU2686@macro*) (oUade@oUa39@build-void) (oUadd@oUa37@build-sequence '#f (map (lambda (oU2688@x) (let ((oU268a@loc (car oU2688@x)) (oU268b@src (cddr oU2688@x))) (list 'set! oU268a@loc oU268b@src))) oU2686@macro*))))) (set! oU2633@visit! (lambda (oU267e@macro*) (for-each (lambda (oU2680@x) (let ((oU2682@loc (car oU2680@x)) (oU2683@proc (cadr oU2680@x))) (set-symbol-value! oU2682@loc oU2683@proc))) oU267e@macro*))) (call-with-values (lambda () (oUdf3@core-library-expander oU262a@x oU262c@verify-name)) (lambda (oU2646@oU2635 oU2647@oU2637 oU2648@oU2639 oU2649@oU263b oU264a@oU263d oU264b@oU263f oU264c@oU2641 oU264d@oU2643 oU264e@oU2645) (let ((oU2658@export-env oU264e@oU2645) (oU2659@export-subst oU264d@oU2643) (oU265a@macro* oU264c@oU2641) (oU265b@invoke-code oU264b@oU263f) (oU265c@vis* oU264a@oU263d) (oU265d@inv* oU2649@oU263b) (oU265e@imp* oU2648@oU2639) (oU265f@ver oU2647@oU2637) (oU2660@name oU2646@oU2635)) (let ((oU266a@id (gensym)) (oU266b@name oU2660@name) (oU266c@ver oU265f@ver) (oU266d@imp* (map oU992@oU7e4@library-spec oU265e@imp*)) (oU266e@vis* (map oU992@oU7e4@library-spec oU265c@vis*)) (oU266f@inv* (map oU992@oU7e4@library-spec oU265d@inv*)) (oU2670@visit-proc (lambda () (oU2633@visit! oU265a@macro*))) (oU2671@invoke-proc (lambda () (eval-core (oU718@oU6d0@expanded->core oU265b@invoke-code)))) (oU2672@visit-code (oU2631@build-visit-code oU265a@macro*)) (oU2673@invoke-code oU265b@invoke-code)) (begin (oU98c@oU7d8@install-library oU266a@id oU266b@name oU266c@ver oU266d@imp* oU266e@vis* oU266f@inv* oU2659@export-subst oU2658@export-env oU2670@visit-proc oU2671@invoke-proc oU2672@visit-code oU2673@invoke-code '#t oU262b@filename) (values oU266a@id oU266b@name oU266c@ver oU266d@imp* oU266e@vis* oU266f@inv* oU2673@invoke-code oU2672@visit-code oU2659@export-subst oU2658@export-env))))))))) oU2698) (if (= oU2699 '2) (apply (lambda (oU268e@x oU268f@filename) (oUe41@library-expander oU268e@x oU268f@filename (lambda (oU2692@x) (values)))) oU2698) (if (= oU2699 '1) (apply (lambda (oU2694@x) (oUe41@library-expander oU2694@x '#f (lambda (oU2696@x) (values)))) oU2698) (error 'apply '"invalid arg count"))))))) (set! oU28aa@oUe41@library-expander oUe41@library-expander) (set! oUe43@boot-library-expand (lambda (oU269a@x) (call-with-values (lambda () (oUe41@library-expander oU269a@x)) (lambda (oU26b0@oU269d oU26b1@oU269f oU26b2@oU26a1 oU26b3@oU26a3 oU26b4@oU26a5 oU26b5@oU26a7 oU26b6@oU26a9 oU26b7@oU26ab oU26b8@oU26ad oU26b9@oU26af) (let ((oU26c4@export-env oU26b9@oU26af) (oU26c5@export-subst oU26b8@oU26ad) (oU26c6@visit-code oU26b7@oU26ab) (oU26c7@invoke-code oU26b6@oU26a9) (oU26c8@inv* oU26b5@oU26a7) (oU26c9@vis* oU26b4@oU26a5) (oU26ca@imp* oU26b3@oU26a3) (oU26cb@ver oU26b2@oU26a1) (oU26cc@name oU26b1@oU269f) (oU26cd@id oU26b0@oU269d)) (values oU26cc@name oU26c7@invoke-code oU26c5@export-subst oU26c4@export-env)))))) (set! oU28ab@oUe43@boot-library-expand oUe43@boot-library-expand) (set! oUe45@rev-map-append (lambda (oU26d8@f oU26d9@ls oU26da@ac) (if (null? oU26d9@ls) oU26da@ac (oUe45@rev-map-append oU26d8@f (cdr oU26d9@ls) (cons (oU26d8@f (car oU26d9@ls)) oU26da@ac))))) (set! oU28ac@oUe45@rev-map-append oUe45@rev-map-append) (set! oUe47@build-exports (lambda (oU26de@lex*+loc* oU26df@init*) (oUadd@oUa37@build-sequence '#f (cons (oUade@oUa39@build-void) (oUe45@rev-map-append (lambda (oU26e2@x) (list 'set! (cdr oU26e2@x) (car oU26e2@x))) oU26de@lex*+loc* oU26df@init*))))) (set! oU28ad@oUe47@build-exports oUe47@build-exports) (set! oUe49@make-export-subst (lambda (oU26e4@name* oU26e5@id*) (map (lambda (oU26e8@name oU26e9@id) (let ((oU26ec@label (oUb8e@id->label oU26e9@id))) (begin (if (not oU26ec@label) (oUe5f@syntax-violation '#f '"cannot export unbound identifier" oU26e9@id) (void)) (cons oU26e8@name oU26ec@label)))) oU26e4@name* oU26e5@id*))) (set! oU28ae@oUe49@make-export-subst oUe49@make-export-subst) (set! oUe4b@make-export-env/macros (lambda (oU26ee@lex* oU26ef@loc* oU26f0@r) (let ((oU26f5@lookup '#f)) (begin (set! oU26f5@lookup (lambda (oU2712@x) (let oU271a@f ((oU2714@x oU2712@x) (oU2715@lex* oU26ee@lex*) (oU2716@loc* oU26ef@loc*)) (if (pair? oU2715@lex*) (if (eq? oU2714@x (car oU2715@lex*)) (car oU2716@loc*) (oU271a@f oU2714@x (cdr oU2715@lex*) (cdr oU2716@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let oU26fe@f ((oU26f6@r oU26f0@r) (oU26f7@env '()) (oU26f8@global* '()) (oU26f9@macro* '())) (if (null? oU26f6@r) (values oU26f7@env oU26f8@global* oU26f9@macro*) (let ((oU2700@x (car oU26f6@r))) (let ((oU2702@label (car oU2700@x)) (oU2703@b (cdr oU2700@x))) (let ((oU2706@t (oUb94@binding-type oU2703@b))) (if (memv oU2706@t '(lexical)) (let ((oU2708@v (oUb96@binding-value oU2703@b))) (let ((oU270a@loc (oU26f5@lookup (oUd09@lexical-var oU2708@v))) (oU270b@type (if (oUd0b@lexical-mutable? oU2708@v) 'mutable 'global))) (oU26fe@f (cdr oU26f6@r) (cons (cons* oU2702@label oU270b@type oU270a@loc) oU26f7@env) (cons (cons (oUd09@lexical-var oU2708@v) oU270a@loc) oU26f8@global*) oU26f9@macro*))) (if (memv oU2706@t '(local-macro)) (let ((oU270e@loc (gensym))) (oU26fe@f (cdr oU26f6@r) (cons (cons* oU2702@label 'global-macro oU270e@loc) oU26f7@env) oU26f8@global* (cons (cons oU270e@loc (oUb96@binding-value oU2703@b)) oU26f9@macro*))) (if (memv oU2706@t '(local-macro!)) (let ((oU2710@loc (gensym))) (oU26fe@f (cdr oU26f6@r) (cons (cons* oU2702@label 'global-macro! oU2710@loc) oU26f7@env) oU26f8@global* (cons (cons oU2710@loc (oUb96@binding-value oU2703@b)) oU26f9@macro*))) (if (memv oU2706@t '($rtd $module)) (oU26fe@f (cdr oU26f6@r) (cons oU2700@x oU26f7@env) oU26f8@global* oU26f9@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (oUb94@binding-type oU2703@b) (oUb96@binding-value oU2703@b))))))))))))))) (set! oU28af@oUe4b@make-export-env/macros oUe4b@make-export-env/macros) (set! oUe4d@generate-temporaries (lambda (oU271c@ls) (let ((oU271e@t oU271c@ls)) (let ((oU2720@ls/false (oUd7f@syntax-dispatch oU271e@t 'each-any))) (if oU2720@ls/false (apply (lambda (oU2722@ls) (map (lambda (oU2724@x) (make-simple-struct 'stx '5 (list (let ((oU2726@x (oUe65@syntax->datum oU2724@x))) (if (or (symbol? oU2726@x) (string? oU2726@x)) (gensym oU2726@x) (gensym 't))) oUafc@top-mark* '() '()))) oU2722@ls)) oU2720@ls/false) (let ((oU2728@t oU271e@t)) (let ((oU272a@ls/false (oUd7f@syntax-dispatch oU2728@t '_))) (if oU272a@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) oU272a@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU2728@t))))))))) (set! oU28b0@oUe4d@generate-temporaries oUe4d@generate-temporaries) (set! oUe4f@free-identifier=? (lambda (oU272c@x oU272d@y) (if (oUb78@id? oU272c@x) (if (oUb78@id? oU272d@y) (oUb7e@free-id=? oU272c@x oU272d@y) (assertion-violation 'free-identifier=? '"not an identifier" oU272d@y)) (assertion-violation 'free-identifier=? '"not an identifier" oU272c@x)))) (set! oU28b1@oUe4f@free-identifier=? oUe4f@free-identifier=?) (set! oUe51@bound-identifier=? (lambda (oU2730@x oU2731@y) (if (oUb78@id? oU2730@x) (if (oUb78@id? oU2731@y) (oUb7c@bound-id=? oU2730@x oU2731@y) (assertion-violation 'bound-identifier=? '"not an identifier" oU2731@y)) (assertion-violation 'bound-identifier=? '"not an identifier" oU2730@x)))) (set! oU28b2@oUe51@bound-identifier=? oUe51@bound-identifier=?) (set! oUe53@make-source-condition (lambda (oU2734@x) (let ((oU273e@oU2739 '#f) (oU2740@oU273b '#f) (oU2742@oU273a '#f) (oU2745@oU2738 '#f) (oU2747@make-source-condition '#f) (oU2749@oU2736 '#f) (oU274b@oU2737 '#f) (oU274d@source-condition? '#f) (oU274f@source-filename '#f) (oU2751@source-character '#f)) (begin (set! oU273e@oU2739 (make-record-type-descriptor '&source-information oU2b94@oU28db@&condition-rtd 'oU273c '#f '#f '#((immutable file-name) (immutable character)))) (set! oU2740@oU273b '#f) (set! oU2742@oU273a (make-record-constructor-descriptor oU273e@oU2739 oU2b95@oU28dd@&condition-rcd oU2740@oU273b)) (set! oU2745@oU2738 (record-predicate oU273e@oU2739)) (set! oU2747@make-source-condition (record-constructor oU2742@oU273a)) (set! oU2749@oU2736 (record-accessor oU273e@oU2739 '0)) (set! oU274b@oU2737 (record-accessor oU273e@oU2739 '1)) (set! oU274d@source-condition? (condition-predicate oU273e@oU2739)) (set! oU274f@source-filename (condition-accessor oU273e@oU2739 oU2749@oU2736)) (set! oU2751@source-character (condition-accessor oU273e@oU2739 oU274b@oU2737)) (if (pair? oU2734@x) (oU2747@make-source-condition (car oU2734@x) (cdr oU2734@x)) (condition)))))) (set! oU28b3@oUe53@make-source-condition oUe53@make-source-condition) (set! oUe55@extract-position-condition (lambda (oU2752@x) (oUe53@make-source-condition (oUe57@expression-position oU2752@x)))) (set! oU28b4@oUe55@extract-position-condition oUe55@extract-position-condition) (set! oUe57@expression-position (lambda (oU2754@x) (and (oUb44@stx? oU2754@x) (let ((oU2756@x (oUb46@stx-expr oU2754@x))) (and (oU6b7@oU58b@annotation? oU2756@x) (oU6b8@oU58d@annotation-source oU2756@x)))))) (set! oU28b5@oUe57@expression-position oUe57@expression-position) (set! oUe59@assertion-error (lambda (oU2758@expr oU2759@pos) (raise (condition (oU2bc4@oU299f@make-assertion-violation) (oU2bd6@oU29d1@make-who-condition 'assert) (oU2b9a@oU2932@make-message-condition '"assertion failed") (oU2bcc@oU29b6@make-irritants-condition (list oU2758@expr)) (oUe53@make-source-condition oU2759@pos))))) (set! oU28b6@oUe59@assertion-error oUe59@assertion-error) (set! oUe5b@syntax-error (lambda (oU275c@x . oU275e@args) (begin (if (not (for-all string? oU275e@args)) (assertion-violation 'syntax-error '"invalid argument" oU275e@args) (void)) (raise (condition (oU2b9a@oU2932@make-message-condition (if (null? oU275e@args) '"invalid syntax" (apply string-append oU275e@args))) (oU2bf8@oU2a2d@make-syntax-violation (oUe65@syntax->datum oU275c@x) '#f) (oUe55@extract-position-condition oU275c@x)))))) (set! oU28b7@oUe5b@syntax-error oUe5b@syntax-error) (set! oUe5d@syntax-violation* (lambda (oU2760@who oU2761@msg oU2762@form oU2763@condition-object) (begin (if (not (string? oU2761@msg)) (assertion-violation 'syntax-violation '"message is not a string" oU2761@msg) (void)) (let ((oU2768@who (if (or (string? oU2760@who) (symbol? oU2760@who)) oU2760@who (if (not oU2760@who) (let ((oU276a@t oU2762@form)) (let ((oU276c@ls/false (oUd7f@syntax-dispatch oU276a@t 'any))) (if (and oU276c@ls/false (apply (lambda (oU276e@id) (oUb78@id? oU276e@id)) oU276c@ls/false)) (apply (lambda (oU2770@id) (oUe65@syntax->datum oU2770@id)) oU276c@ls/false) (let ((oU2772@t oU276a@t)) (let ((oU2774@ls/false (oUd7f@syntax-dispatch oU2772@t '(any . any)))) (if (and oU2774@ls/false (apply (lambda (oU2776@id oU2777@rest) (oUb78@id? oU2776@id)) oU2774@ls/false)) (apply (lambda (oU277a@id oU277b@rest) (oUe65@syntax->datum oU277a@id)) oU2774@ls/false) (let ((oU277e@t oU2772@t)) (let ((oU2780@ls/false (oUd7f@syntax-dispatch oU277e@t '_))) (if oU2780@ls/false (apply (lambda () '#f) oU2780@ls/false) (oUe5f@syntax-violation '#f '"invalid syntax" oU277e@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" oU2760@who))))) (raise (condition (if oU2768@who (oU2bd6@oU29d1@make-who-condition oU2768@who) (condition)) (oU2b9a@oU2932@make-message-condition oU2761@msg) oU2763@condition-object (oUe55@extract-position-condition oU2762@form))))))) (set! oU28b8@oUe5d@syntax-violation* oUe5d@syntax-violation*) (set! oUe5f@syntax-violation (lambda oU2790 (let ((oU2791 (length oU2790))) (if (= oU2791 '3) (apply (lambda (oU2782@who oU2783@msg oU2784@form) (oUe5f@syntax-violation oU2782@who oU2783@msg oU2784@form '#f)) oU2790) (if (= oU2791 '4) (apply (lambda (oU2788@who oU2789@msg oU278a@form oU278b@subform) (oUe5d@syntax-violation* oU2788@who oU2789@msg oU278a@form (oU2bf8@oU2a2d@make-syntax-violation (oUe65@syntax->datum oU278a@form) (oUe65@syntax->datum oU278b@subform)))) oU2790) (error 'apply '"invalid arg count")))))) (set! oU28b9@oUe5f@syntax-violation oUe5f@syntax-violation) (set! oUe61@identifier? (lambda (oU2792@x) (oUb78@id? oU2792@x))) (set! oU28ba@oUe61@identifier? oUe61@identifier?) (set! oUe63@datum->syntax (lambda (oU2794@id oU2795@datum) (if (oUb78@id? oU2794@id) (oUb58@datum->stx oU2794@id oU2795@datum) (assertion-violation 'datum->syntax '"not an identifier" oU2794@id)))) (set! oU28bb@oUe63@datum->syntax oUe63@datum->syntax) (set! oUe65@syntax->datum (lambda (oU2798@x) (oUb8c@stx->datum oU2798@x))) (set! oU28bc@oUe65@syntax->datum oUe65@syntax->datum) (set! oUe67@ungensym-all (lambda (oU279a@code) (if (pair? oU279a@code) (cons (oUe67@ungensym-all (car oU279a@code)) (oUe67@ungensym-all (cdr oU279a@code))) (if (symbol? oU279a@code) (ungensym oU279a@code) oU279a@code)))) (set! oU28bd@oUe67@ungensym-all oUe67@ungensym-all) (set! oUe69@compile-r6rs-top-level (lambda (oU279c@x*) (call-with-values (lambda () (oUdf7@top-level-expander oU279c@x*)) (lambda (oU27a2@oU279f oU27a3@oU27a1) (let ((oU27a6@invoke-code oU27a3@oU27a1) (oU27a7@lib* oU27a2@oU279f)) (lambda () (begin (for-each oU98e@oU7dc@invoke-library oU27a7@lib*) (let ((oU27aa@expanded (oU718@oU6d0@expanded->core oU27a6@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (oUe67@ungensym-all oU27aa@expanded)) (void)) (eval-core oU27aa@expanded)))))))))) (set! oU28be@oUe69@compile-r6rs-top-level oUe69@compile-r6rs-top-level) (set! oUe6b@pre-compile-r6rs-top-level (lambda (oU27ac@x*) (call-with-values (lambda () (oUdf7@top-level-expander oU27ac@x*)) (lambda (oU27b2@oU27af oU27b3@oU27b1) (let ((oU27b6@invoke-code oU27b3@oU27b1) (oU27b7@lib* oU27b2@oU27af)) (begin (for-each oU98e@oU7dc@invoke-library oU27b7@lib*) (oU6c0@oU59d@compile-core (oU718@oU6d0@expanded->core oU27b6@invoke-code)))))))) (set! oU28bf@oUe6b@pre-compile-r6rs-top-level oUe6b@pre-compile-r6rs-top-level) (set! oUe6d@interaction-environment (let ((oU27ba@the-env '#f)) (lambda () (or oU27ba@the-env (let ((oU27bc@lib (oU987@oU7ce@find-library-by-name '(mosh interaction))) (oU27bd@rib (oUb2c@make-empty-rib))) (begin (let ((oU27c0@subst (oU969@oU792@library-subst oU27bc@lib))) (begin (oUb18@set-rib-sym*! oU27bd@rib (map car oU27c0@subst)) (oUb1c@set-rib-mark**! oU27bd@rib (map (lambda (oU27c2@x) oUafc@top-mark*) oU27c0@subst)) (oUb20@set-rib-label*! oU27bd@rib (map cdr oU27c0@subst)))) (let ((oU27c4@env (make-simple-struct 'interaction-env '4 (list oU27bd@rib '() '())))) (begin (set! oU27ba@the-env oU27c4@env) oU27c4@env)))))))) (set! oU28c0@oUe6d@interaction-environment oUe6d@interaction-environment) (set! oUe6f@top-level-context (oU6c2@oU5a1@make-parameter '#f)) (set! oU28c1@oUe6f@top-level-context oUe6f@top-level-context) (oU984@oU7c8@current-library-expander oUe41@library-expander))
(begin (set! oU28d0@oU28cb (unspecified)) (set! oU28d2@oU28cd (unspecified)) (set! oU28d4@oU28cc (unspecified)) (set! oU28d7@&condition? (unspecified)) (set! oU28d9@make-&condition (unspecified)) (set! oU28db@&condition-rtd (unspecified)) (set! oU28dd@&condition-rcd (unspecified)) (set! oU2929@oU2924 (unspecified)) (set! oU292b@oU2926 (unspecified)) (set! oU292d@oU2925 (unspecified)) (set! oU2930@p? (unspecified)) (set! oU2932@make-message-condition (unspecified)) (set! oU2934@oU2923 (unspecified)) (set! oU2936@message-condition? (unspecified)) (set! oU2938@condition-message (unspecified)) (set! oU293a@&message-rtd (unspecified)) (set! oU293c@&message-rcd (unspecified)) (set! oU2942@oU293d (unspecified)) (set! oU2944@oU293f (unspecified)) (set! oU2946@oU293e (unspecified)) (set! oU2949@p? (unspecified)) (set! oU294b@make-warning (unspecified)) (set! oU294d@warning? (unspecified)) (set! oU294f@&warning-rtd (unspecified)) (set! oU2951@&warning-rcd (unspecified)) (set! oU2957@oU2952 (unspecified)) (set! oU2959@oU2954 (unspecified)) (set! oU295b@oU2953 (unspecified)) (set! oU295e@p? (unspecified)) (set! oU2960@make-serious-condition (unspecified)) (set! oU2962@serious-condition? (unspecified)) (set! oU2964@&serious-rtd (unspecified)) (set! oU2966@&serious-rcd (unspecified)) (set! oU296c@oU2967 (unspecified)) (set! oU296e@oU2969 (unspecified)) (set! oU2970@oU2968 (unspecified)) (set! oU2973@p? (unspecified)) (set! oU2975@make-error (unspecified)) (set! oU2977@error? (unspecified)) (set! oU2979@&error-rtd (unspecified)) (set! oU297b@&error-rcd (unspecified)) (set! oU2981@oU297c (unspecified)) (set! oU2983@oU297e (unspecified)) (set! oU2985@oU297d (unspecified)) (set! oU2988@p? (unspecified)) (set! oU298a@make-violation (unspecified)) (set! oU298c@violation? (unspecified)) (set! oU298e@&violation-rtd (unspecified)) (set! oU2990@&violation-rcd (unspecified)) (set! oU2996@oU2991 (unspecified)) (set! oU2998@oU2993 (unspecified)) (set! oU299a@oU2992 (unspecified)) (set! oU299d@p? (unspecified)) (set! oU299f@make-assertion-violation (unspecified)) (set! oU29a1@assertion-violation? (unspecified)) (set! oU29a3@&assertion-rtd (unspecified)) (set! oU29a5@&assertion-rcd (unspecified)) (set! oU29ad@oU29a8 (unspecified)) (set! oU29af@oU29aa (unspecified)) (set! oU29b1@oU29a9 (unspecified)) (set! oU29b4@p? (unspecified)) (set! oU29b6@make-irritants-condition (unspecified)) (set! oU29b8@oU29a7 (unspecified)) (set! oU29ba@irritants-condition? (unspecified)) (set! oU29bc@condition-irritants (unspecified)) (set! oU29be@&irritants-rtd (unspecified)) (set! oU29c0@&irritants-rcd (unspecified)) (set! oU29c8@oU29c3 (unspecified)) (set! oU29ca@oU29c5 (unspecified)) (set! oU29cc@oU29c4 (unspecified)) (set! oU29cf@p? (unspecified)) (set! oU29d1@make-who-condition (unspecified)) (set! oU29d3@oU29c2 (unspecified)) (set! oU29d5@who-condition? (unspecified)) (set! oU29d7@condition-who (unspecified)) (set! oU29d9@&who-rtd (unspecified)) (set! oU29db@&who-rcd (unspecified)) (set! oU29e1@oU29dc (unspecified)) (set! oU29e3@oU29de (unspecified)) (set! oU29e5@oU29dd (unspecified)) (set! oU29e8@p? (unspecified)) (set! oU29ea@make-non-continuable-violation (unspecified)) (set! oU29ec@non-continuable-violation? (unspecified)) (set! oU29ee@&non-continuable-rtd (unspecified)) (set! oU29f0@&non-continuable-rcd (unspecified)) (set! oU29f6@oU29f1 (unspecified)) (set! oU29f8@oU29f3 (unspecified)) (set! oU29fa@oU29f2 (unspecified)) (set! oU29fd@p? (unspecified)) (set! oU29ff@make-implementation-restriction-violation (unspecified)) (set! oU2a01@implementation-restriction-violation? (unspecified)) (set! oU2a03@&implementation-restriction-rtd (unspecified)) (set! oU2a05@&implementation-restriction-rcd (unspecified)) (set! oU2a0b@oU2a06 (unspecified)) (set! oU2a0d@oU2a08 (unspecified)) (set! oU2a0f@oU2a07 (unspecified)) (set! oU2a12@p? (unspecified)) (set! oU2a14@make-lexical-violation (unspecified)) (set! oU2a16@lexical-violation? (unspecified)) (set! oU2a18@&lexical-rtd (unspecified)) (set! oU2a1a@&lexical-rcd (unspecified)) (set! oU2a24@oU2a1f (unspecified)) (set! oU2a26@oU2a21 (unspecified)) (set! oU2a28@oU2a20 (unspecified)) (set! oU2a2b@p? (unspecified)) (set! oU2a2d@make-syntax-violation (unspecified)) (set! oU2a2f@oU2a1c (unspecified)) (set! oU2a31@oU2a1e (unspecified)) (set! oU2a33@syntax-violation? (unspecified)) (set! oU2a35@syntax-violation-form (unspecified)) (set! oU2a37@syntax-violation-subform (unspecified)) (set! oU2a39@&syntax-rtd (unspecified)) (set! oU2a3b@&syntax-rcd (unspecified)) (set! oU2a41@oU2a3c (unspecified)) (set! oU2a43@oU2a3e (unspecified)) (set! oU2a45@oU2a3d (unspecified)) (set! oU2a48@p? (unspecified)) (set! oU2a4a@make-undefined-violation (unspecified)) (set! oU2a4c@undefined-violation? (unspecified)) (set! oU2a4e@&undefined-rtd (unspecified)) (set! oU2a50@&undefined-rcd (unspecified)) (set! oU2a56@oU2a51 (unspecified)) (set! oU2a58@oU2a53 (unspecified)) (set! oU2a5a@oU2a52 (unspecified)) (set! oU2a5d@p? (unspecified)) (set! oU2a5f@make-i/o-error (unspecified)) (set! oU2a61@i/o-error? (unspecified)) (set! oU2a63@&i/o-rtd (unspecified)) (set! oU2a65@&i/o-rcd (unspecified)) (set! oU2a6b@oU2a66 (unspecified)) (set! oU2a6d@oU2a68 (unspecified)) (set! oU2a6f@oU2a67 (unspecified)) (set! oU2a72@p? (unspecified)) (set! oU2a74@make-i/o-read-error (unspecified)) (set! oU2a76@i/o-read-error? (unspecified)) (set! oU2a78@&i/o-read-rtd (unspecified)) (set! oU2a7a@&i/o-read-rcd (unspecified)) (set! oU2a80@oU2a7b (unspecified)) (set! oU2a82@oU2a7d (unspecified)) (set! oU2a84@oU2a7c (unspecified)) (set! oU2a87@p? (unspecified)) (set! oU2a89@make-i/o-write-error (unspecified)) (set! oU2a8b@i/o-write-error? (unspecified)) (set! oU2a8d@&i/o-write-rtd (unspecified)) (set! oU2a8f@&i/o-write-rcd (unspecified)) (set! oU2a97@oU2a92 (unspecified)) (set! oU2a99@oU2a94 (unspecified)) (set! oU2a9b@oU2a93 (unspecified)) (set! oU2a9e@p? (unspecified)) (set! oU2aa0@make-i/o-invalid-position-error (unspecified)) (set! oU2aa2@oU2a91 (unspecified)) (set! oU2aa4@i/o-invalid-position-error? (unspecified)) (set! oU2aa6@i/o-error-position (unspecified)) (set! oU2aa8@&i/o-invalid-position-rtd (unspecified)) (set! oU2aaa@&i/o-invalid-position-rcd (unspecified)) (set! oU2ab2@oU2aad (unspecified)) (set! oU2ab4@oU2aaf (unspecified)) (set! oU2ab6@oU2aae (unspecified)) (set! oU2ab9@p? (unspecified)) (set! oU2abb@make-i/o-filename-error (unspecified)) (set! oU2abd@oU2aac (unspecified)) (set! oU2abf@i/o-filename-error? (unspecified)) (set! oU2ac1@i/o-error-filename (unspecified)) (set! oU2ac3@&i/o-filename-rtd (unspecified)) (set! oU2ac5@&i/o-filename-rcd (unspecified)) (set! oU2acb@oU2ac6 (unspecified)) (set! oU2acd@oU2ac8 (unspecified)) (set! oU2acf@oU2ac7 (unspecified)) (set! oU2ad2@p? (unspecified)) (set! oU2ad4@make-i/o-file-protection-error (unspecified)) (set! oU2ad6@i/o-file-protection-error? (unspecified)) (set! oU2ad8@&i/o-file-protection-rtd (unspecified)) (set! oU2ada@&i/o-file-protection-rcd (unspecified)) (set! oU2ae0@oU2adb (unspecified)) (set! oU2ae2@oU2add (unspecified)) (set! oU2ae4@oU2adc (unspecified)) (set! oU2ae7@p? (unspecified)) (set! oU2ae9@make-i/o-file-is-read-only-error (unspecified)) (set! oU2aeb@i/o-file-is-read-only-error? (unspecified)) (set! oU2aed@&i/o-file-is-read-only-rtd (unspecified)) (set! oU2aef@&i/o-file-is-read-only-rcd (unspecified)) (set! oU2af5@oU2af0 (unspecified)) (set! oU2af7@oU2af2 (unspecified)) (set! oU2af9@oU2af1 (unspecified)) (set! oU2afc@p? (unspecified)) (set! oU2afe@make-i/o-file-already-exists-error (unspecified)) (set! oU2b00@i/o-file-already-exists-error? (unspecified)) (set! oU2b02@&i/o-file-already-exists-rtd (unspecified)) (set! oU2b04@&i/o-file-already-exists-rcd (unspecified)) (set! oU2b0a@oU2b05 (unspecified)) (set! oU2b0c@oU2b07 (unspecified)) (set! oU2b0e@oU2b06 (unspecified)) (set! oU2b11@p? (unspecified)) (set! oU2b13@make-i/o-file-does-not-exist-error (unspecified)) (set! oU2b15@i/o-file-does-not-exist-error? (unspecified)) (set! oU2b17@&i/o-file-does-not-exist-rtd (unspecified)) (set! oU2b19@&i/o-file-does-not-exist-rcd (unspecified)) (set! oU2b21@oU2b1c (unspecified)) (set! oU2b23@oU2b1e (unspecified)) (set! oU2b25@oU2b1d (unspecified)) (set! oU2b28@p? (unspecified)) (set! oU2b2a@make-i/o-port-error (unspecified)) (set! oU2b2c@oU2b1b (unspecified)) (set! oU2b2e@i/o-port-error? (unspecified)) (set! oU2b30@i/o-error-port (unspecified)) (set! oU2b32@&i/o-port-rtd (unspecified)) (set! oU2b34@&i/o-port-rcd (unspecified)) (set! oU2b3a@oU2b35 (unspecified)) (set! oU2b3c@oU2b37 (unspecified)) (set! oU2b3e@oU2b36 (unspecified)) (set! oU2b41@p? (unspecified)) (set! oU2b43@make-i/o-decoding-error (unspecified)) (set! oU2b45@i/o-decoding-error? (unspecified)) (set! oU2b47@&i/o-decoding-rtd (unspecified)) (set! oU2b49@&i/o-decoding-rcd (unspecified)) (set! oU2b51@oU2b4c (unspecified)) (set! oU2b53@oU2b4e (unspecified)) (set! oU2b55@oU2b4d (unspecified)) (set! oU2b58@p? (unspecified)) (set! oU2b5a@make-i/o-encoding-error (unspecified)) (set! oU2b5c@oU2b4b (unspecified)) (set! oU2b5e@i/o-encoding-error? (unspecified)) (set! oU2b60@i/o-encoding-error-char (unspecified)) (set! oU2b62@&i/o-encoding-rtd (unspecified)) (set! oU2b64@&i/o-encoding-rcd (unspecified)) (set! oU2b6a@oU2b65 (unspecified)) (set! oU2b6c@oU2b67 (unspecified)) (set! oU2b6e@oU2b66 (unspecified)) (set! oU2b71@p? (unspecified)) (set! oU2b73@make-no-infinities-violation (unspecified)) (set! oU2b75@no-infinities-violation? (unspecified)) (set! oU2b77@&no-infinities-rtd (unspecified)) (set! oU2b79@&no-infinities-rcd (unspecified)) (set! oU2b7f@oU2b7a (unspecified)) (set! oU2b81@oU2b7c (unspecified)) (set! oU2b83@oU2b7b (unspecified)) (set! oU2b86@p? (unspecified)) (set! oU2b88@make-no-nans-violation (unspecified)) (set! oU2b8a@no-nans-violation? (unspecified)) (set! oU2b8c@&no-nans-rtd (unspecified)) (set! oU2b8e@&no-nans-rcd (unspecified)) (set! oU28d0@oU28cb (make-record-type-descriptor '&condition '#f 'oU28ce '#f '#f '#())) (set! oU2b8f@oU28d0@oU28cb oU28d0@oU28cb) (set! oU28d2@oU28cd '#f) (set! oU2b90@oU28d2@oU28cd oU28d2@oU28cd) (set! oU28d4@oU28cc (make-record-constructor-descriptor oU28d0@oU28cb '#f oU28d2@oU28cd)) (set! oU2b91@oU28d4@oU28cc oU28d4@oU28cc) (set! oU28d7@&condition? (record-predicate oU28d0@oU28cb)) (set! oU2b92@oU28d7@&condition? oU28d7@&condition?) (set! oU28d9@make-&condition (record-constructor oU28d4@oU28cc)) (set! oU2b93@oU28d9@make-&condition oU28d9@make-&condition) (set! oU28db@&condition-rtd oU28d0@oU28cb) (set! oU2b94@oU28db@&condition-rtd oU28db@&condition-rtd) (set! oU28dd@&condition-rcd oU28d4@oU28cc) (set! oU2b95@oU28dd@&condition-rcd oU28dd@&condition-rcd) (set! oU2929@oU2924 (make-record-type-descriptor '&message oU28d0@oU28cb 'oU2927 '#f '#f '#((immutable message)))) (set! oU2b96@oU2929@oU2924 oU2929@oU2924) (set! oU292b@oU2926 '#f) (set! oU2b97@oU292b@oU2926 oU292b@oU2926) (set! oU292d@oU2925 (make-record-constructor-descriptor oU2929@oU2924 oU28d4@oU28cc oU292b@oU2926)) (set! oU2b98@oU292d@oU2925 oU292d@oU2925) (set! oU2930@p? (record-predicate oU2929@oU2924)) (set! oU2b99@oU2930@p? oU2930@p?) (set! oU2932@make-message-condition (record-constructor oU292d@oU2925)) (set! oU2b9a@oU2932@make-message-condition oU2932@make-message-condition) (set! oU2934@oU2923 (record-accessor oU2929@oU2924 '0)) (set! oU2b9b@oU2934@oU2923 oU2934@oU2923) (set! oU2936@message-condition? (condition-predicate oU2929@oU2924)) (set! oU2b9c@oU2936@message-condition? oU2936@message-condition?) (set! oU2938@condition-message (condition-accessor oU2929@oU2924 oU2934@oU2923)) (set! oU2b9d@oU2938@condition-message oU2938@condition-message) (set! oU293a@&message-rtd oU2929@oU2924) (set! oU2b9e@oU293a@&message-rtd oU293a@&message-rtd) (set! oU293c@&message-rcd oU292d@oU2925) (set! oU2b9f@oU293c@&message-rcd oU293c@&message-rcd) (set! oU2942@oU293d (make-record-type-descriptor '&warning oU28d0@oU28cb 'oU2940 '#f '#f '#())) (set! oU2ba0@oU2942@oU293d oU2942@oU293d) (set! oU2944@oU293f '#f) (set! oU2ba1@oU2944@oU293f oU2944@oU293f) (set! oU2946@oU293e (make-record-constructor-descriptor oU2942@oU293d oU28d4@oU28cc oU2944@oU293f)) (set! oU2ba2@oU2946@oU293e oU2946@oU293e) (set! oU2949@p? (record-predicate oU2942@oU293d)) (set! oU2ba3@oU2949@p? oU2949@p?) (set! oU294b@make-warning (record-constructor oU2946@oU293e)) (set! oU2ba4@oU294b@make-warning oU294b@make-warning) (set! oU294d@warning? (condition-predicate oU2942@oU293d)) (set! oU2ba5@oU294d@warning? oU294d@warning?) (set! oU294f@&warning-rtd oU2942@oU293d) (set! oU2ba6@oU294f@&warning-rtd oU294f@&warning-rtd) (set! oU2951@&warning-rcd oU2946@oU293e) (set! oU2ba7@oU2951@&warning-rcd oU2951@&warning-rcd) (set! oU2957@oU2952 (make-record-type-descriptor '&serious oU28d0@oU28cb 'oU2955 '#f '#f '#())) (set! oU2ba8@oU2957@oU2952 oU2957@oU2952) (set! oU2959@oU2954 '#f) (set! oU2ba9@oU2959@oU2954 oU2959@oU2954) (set! oU295b@oU2953 (make-record-constructor-descriptor oU2957@oU2952 oU28d4@oU28cc oU2959@oU2954)) (set! oU2baa@oU295b@oU2953 oU295b@oU2953) (set! oU295e@p? (record-predicate oU2957@oU2952)) (set! oU2bab@oU295e@p? oU295e@p?) (set! oU2960@make-serious-condition (record-constructor oU295b@oU2953)) (set! oU2bac@oU2960@make-serious-condition oU2960@make-serious-condition) (set! oU2962@serious-condition? (condition-predicate oU2957@oU2952)) (set! oU2bad@oU2962@serious-condition? oU2962@serious-condition?) (set! oU2964@&serious-rtd oU2957@oU2952) (set! oU2bae@oU2964@&serious-rtd oU2964@&serious-rtd) (set! oU2966@&serious-rcd oU295b@oU2953) (set! oU2baf@oU2966@&serious-rcd oU2966@&serious-rcd) (set! oU296c@oU2967 (make-record-type-descriptor '&error oU2957@oU2952 'oU296a '#f '#f '#())) (set! oU2bb0@oU296c@oU2967 oU296c@oU2967) (set! oU296e@oU2969 '#f) (set! oU2bb1@oU296e@oU2969 oU296e@oU2969) (set! oU2970@oU2968 (make-record-constructor-descriptor oU296c@oU2967 oU295b@oU2953 oU296e@oU2969)) (set! oU2bb2@oU2970@oU2968 oU2970@oU2968) (set! oU2973@p? (record-predicate oU296c@oU2967)) (set! oU2bb3@oU2973@p? oU2973@p?) (set! oU2975@make-error (record-constructor oU2970@oU2968)) (set! oU2bb4@oU2975@make-error oU2975@make-error) (set! oU2977@error? (condition-predicate oU296c@oU2967)) (set! oU2bb5@oU2977@error? oU2977@error?) (set! oU2979@&error-rtd oU296c@oU2967) (set! oU2bb6@oU2979@&error-rtd oU2979@&error-rtd) (set! oU297b@&error-rcd oU2970@oU2968) (set! oU2bb7@oU297b@&error-rcd oU297b@&error-rcd) (set! oU2981@oU297c (make-record-type-descriptor '&violation oU2957@oU2952 'oU297f '#f '#f '#())) (set! oU2bb8@oU2981@oU297c oU2981@oU297c) (set! oU2983@oU297e '#f) (set! oU2bb9@oU2983@oU297e oU2983@oU297e) (set! oU2985@oU297d (make-record-constructor-descriptor oU2981@oU297c oU295b@oU2953 oU2983@oU297e)) (set! oU2bba@oU2985@oU297d oU2985@oU297d) (set! oU2988@p? (record-predicate oU2981@oU297c)) (set! oU2bbb@oU2988@p? oU2988@p?) (set! oU298a@make-violation (record-constructor oU2985@oU297d)) (set! oU2bbc@oU298a@make-violation oU298a@make-violation) (set! oU298c@violation? (condition-predicate oU2981@oU297c)) (set! oU2bbd@oU298c@violation? oU298c@violation?) (set! oU298e@&violation-rtd oU2981@oU297c) (set! oU2bbe@oU298e@&violation-rtd oU298e@&violation-rtd) (set! oU2990@&violation-rcd oU2985@oU297d) (set! oU2bbf@oU2990@&violation-rcd oU2990@&violation-rcd) (set! oU2996@oU2991 (make-record-type-descriptor '&assertion oU2981@oU297c 'oU2994 '#f '#f '#())) (set! oU2bc0@oU2996@oU2991 oU2996@oU2991) (set! oU2998@oU2993 '#f) (set! oU2bc1@oU2998@oU2993 oU2998@oU2993) (set! oU299a@oU2992 (make-record-constructor-descriptor oU2996@oU2991 oU2985@oU297d oU2998@oU2993)) (set! oU2bc2@oU299a@oU2992 oU299a@oU2992) (set! oU299d@p? (record-predicate oU2996@oU2991)) (set! oU2bc3@oU299d@p? oU299d@p?) (set! oU299f@make-assertion-violation (record-constructor oU299a@oU2992)) (set! oU2bc4@oU299f@make-assertion-violation oU299f@make-assertion-violation) (set! oU29a1@assertion-violation? (condition-predicate oU2996@oU2991)) (set! oU2bc5@oU29a1@assertion-violation? oU29a1@assertion-violation?) (set! oU29a3@&assertion-rtd oU2996@oU2991) (set! oU2bc6@oU29a3@&assertion-rtd oU29a3@&assertion-rtd) (set! oU29a5@&assertion-rcd oU299a@oU2992) (set! oU2bc7@oU29a5@&assertion-rcd oU29a5@&assertion-rcd) (set! oU29ad@oU29a8 (make-record-type-descriptor '&irritants oU28d0@oU28cb 'oU29ab '#f '#f '#((immutable irritants)))) (set! oU2bc8@oU29ad@oU29a8 oU29ad@oU29a8) (set! oU29af@oU29aa '#f) (set! oU2bc9@oU29af@oU29aa oU29af@oU29aa) (set! oU29b1@oU29a9 (make-record-constructor-descriptor oU29ad@oU29a8 oU28d4@oU28cc oU29af@oU29aa)) (set! oU2bca@oU29b1@oU29a9 oU29b1@oU29a9) (set! oU29b4@p? (record-predicate oU29ad@oU29a8)) (set! oU2bcb@oU29b4@p? oU29b4@p?) (set! oU29b6@make-irritants-condition (record-constructor oU29b1@oU29a9)) (set! oU2bcc@oU29b6@make-irritants-condition oU29b6@make-irritants-condition) (set! oU29b8@oU29a7 (record-accessor oU29ad@oU29a8 '0)) (set! oU2bcd@oU29b8@oU29a7 oU29b8@oU29a7) (set! oU29ba@irritants-condition? (condition-predicate oU29ad@oU29a8)) (set! oU2bce@oU29ba@irritants-condition? oU29ba@irritants-condition?) (set! oU29bc@condition-irritants (condition-accessor oU29ad@oU29a8 oU29b8@oU29a7)) (set! oU2bcf@oU29bc@condition-irritants oU29bc@condition-irritants) (set! oU29be@&irritants-rtd oU29ad@oU29a8) (set! oU2bd0@oU29be@&irritants-rtd oU29be@&irritants-rtd) (set! oU29c0@&irritants-rcd oU29b1@oU29a9) (set! oU2bd1@oU29c0@&irritants-rcd oU29c0@&irritants-rcd) (set! oU29c8@oU29c3 (make-record-type-descriptor '&who oU28d0@oU28cb 'oU29c6 '#f '#f '#((immutable who)))) (set! oU2bd2@oU29c8@oU29c3 oU29c8@oU29c3) (set! oU29ca@oU29c5 '#f) (set! oU2bd3@oU29ca@oU29c5 oU29ca@oU29c5) (set! oU29cc@oU29c4 (make-record-constructor-descriptor oU29c8@oU29c3 oU28d4@oU28cc oU29ca@oU29c5)) (set! oU2bd4@oU29cc@oU29c4 oU29cc@oU29c4) (set! oU29cf@p? (record-predicate oU29c8@oU29c3)) (set! oU2bd5@oU29cf@p? oU29cf@p?) (set! oU29d1@make-who-condition (record-constructor oU29cc@oU29c4)) (set! oU2bd6@oU29d1@make-who-condition oU29d1@make-who-condition) (set! oU29d3@oU29c2 (record-accessor oU29c8@oU29c3 '0)) (set! oU2bd7@oU29d3@oU29c2 oU29d3@oU29c2) (set! oU29d5@who-condition? (condition-predicate oU29c8@oU29c3)) (set! oU2bd8@oU29d5@who-condition? oU29d5@who-condition?) (set! oU29d7@condition-who (condition-accessor oU29c8@oU29c3 oU29d3@oU29c2)) (set! oU2bd9@oU29d7@condition-who oU29d7@condition-who) (set! oU29d9@&who-rtd oU29c8@oU29c3) (set! oU2bda@oU29d9@&who-rtd oU29d9@&who-rtd) (set! oU29db@&who-rcd oU29cc@oU29c4) (set! oU2bdb@oU29db@&who-rcd oU29db@&who-rcd) (set! oU29e1@oU29dc (make-record-type-descriptor '&non-continuable oU2981@oU297c 'oU29df '#f '#f '#())) (set! oU2bdc@oU29e1@oU29dc oU29e1@oU29dc) (set! oU29e3@oU29de '#f) (set! oU2bdd@oU29e3@oU29de oU29e3@oU29de) (set! oU29e5@oU29dd (make-record-constructor-descriptor oU29e1@oU29dc oU2985@oU297d oU29e3@oU29de)) (set! oU2bde@oU29e5@oU29dd oU29e5@oU29dd) (set! oU29e8@p? (record-predicate oU29e1@oU29dc)) (set! oU2bdf@oU29e8@p? oU29e8@p?) (set! oU29ea@make-non-continuable-violation (record-constructor oU29e5@oU29dd)) (set! oU2be0@oU29ea@make-non-continuable-violation oU29ea@make-non-continuable-violation) (set! oU29ec@non-continuable-violation? (condition-predicate oU29e1@oU29dc)) (set! oU2be1@oU29ec@non-continuable-violation? oU29ec@non-continuable-violation?) (set! oU29ee@&non-continuable-rtd oU29e1@oU29dc) (set! oU2be2@oU29ee@&non-continuable-rtd oU29ee@&non-continuable-rtd) (set! oU29f0@&non-continuable-rcd oU29e5@oU29dd) (set! oU2be3@oU29f0@&non-continuable-rcd oU29f0@&non-continuable-rcd) (set! oU29f6@oU29f1 (make-record-type-descriptor '&implementation-restriction oU2981@oU297c 'oU29f4 '#f '#f '#())) (set! oU2be4@oU29f6@oU29f1 oU29f6@oU29f1) (set! oU29f8@oU29f3 '#f) (set! oU2be5@oU29f8@oU29f3 oU29f8@oU29f3) (set! oU29fa@oU29f2 (make-record-constructor-descriptor oU29f6@oU29f1 oU2985@oU297d oU29f8@oU29f3)) (set! oU2be6@oU29fa@oU29f2 oU29fa@oU29f2) (set! oU29fd@p? (record-predicate oU29f6@oU29f1)) (set! oU2be7@oU29fd@p? oU29fd@p?) (set! oU29ff@make-implementation-restriction-violation (record-constructor oU29fa@oU29f2)) (set! oU2be8@oU29ff@make-implementation-restriction-violation oU29ff@make-implementation-restriction-violation) (set! oU2a01@implementation-restriction-violation? (condition-predicate oU29f6@oU29f1)) (set! oU2be9@oU2a01@implementation-restriction-violation? oU2a01@implementation-restriction-violation?) (set! oU2a03@&implementation-restriction-rtd oU29f6@oU29f1) (set! oU2bea@oU2a03@&implementation-restriction-rtd oU2a03@&implementation-restriction-rtd) (set! oU2a05@&implementation-restriction-rcd oU29fa@oU29f2) (set! oU2beb@oU2a05@&implementation-restriction-rcd oU2a05@&implementation-restriction-rcd) (set! oU2a0b@oU2a06 (make-record-type-descriptor '&lexical oU2981@oU297c 'oU2a09 '#f '#f '#())) (set! oU2bec@oU2a0b@oU2a06 oU2a0b@oU2a06) (set! oU2a0d@oU2a08 '#f) (set! oU2bed@oU2a0d@oU2a08 oU2a0d@oU2a08) (set! oU2a0f@oU2a07 (make-record-constructor-descriptor oU2a0b@oU2a06 oU2985@oU297d oU2a0d@oU2a08)) (set! oU2bee@oU2a0f@oU2a07 oU2a0f@oU2a07) (set! oU2a12@p? (record-predicate oU2a0b@oU2a06)) (set! oU2bef@oU2a12@p? oU2a12@p?) (set! oU2a14@make-lexical-violation (record-constructor oU2a0f@oU2a07)) (set! oU2bf0@oU2a14@make-lexical-violation oU2a14@make-lexical-violation) (set! oU2a16@lexical-violation? (condition-predicate oU2a0b@oU2a06)) (set! oU2bf1@oU2a16@lexical-violation? oU2a16@lexical-violation?) (set! oU2a18@&lexical-rtd oU2a0b@oU2a06) (set! oU2bf2@oU2a18@&lexical-rtd oU2a18@&lexical-rtd) (set! oU2a1a@&lexical-rcd oU2a0f@oU2a07) (set! oU2bf3@oU2a1a@&lexical-rcd oU2a1a@&lexical-rcd) (set! oU2a24@oU2a1f (make-record-type-descriptor '&syntax oU2981@oU297c 'oU2a22 '#f '#f '#((immutable form) (immutable subform)))) (set! oU2bf4@oU2a24@oU2a1f oU2a24@oU2a1f) (set! oU2a26@oU2a21 '#f) (set! oU2bf5@oU2a26@oU2a21 oU2a26@oU2a21) (set! oU2a28@oU2a20 (make-record-constructor-descriptor oU2a24@oU2a1f oU2985@oU297d oU2a26@oU2a21)) (set! oU2bf6@oU2a28@oU2a20 oU2a28@oU2a20) (set! oU2a2b@p? (record-predicate oU2a24@oU2a1f)) (set! oU2bf7@oU2a2b@p? oU2a2b@p?) (set! oU2a2d@make-syntax-violation (record-constructor oU2a28@oU2a20)) (set! oU2bf8@oU2a2d@make-syntax-violation oU2a2d@make-syntax-violation) (set! oU2a2f@oU2a1c (record-accessor oU2a24@oU2a1f '0)) (set! oU2bf9@oU2a2f@oU2a1c oU2a2f@oU2a1c) (set! oU2a31@oU2a1e (record-accessor oU2a24@oU2a1f '1)) (set! oU2bfa@oU2a31@oU2a1e oU2a31@oU2a1e) (set! oU2a33@syntax-violation? (condition-predicate oU2a24@oU2a1f)) (set! oU2bfb@oU2a33@syntax-violation? oU2a33@syntax-violation?) (set! oU2a35@syntax-violation-form (condition-accessor oU2a24@oU2a1f oU2a2f@oU2a1c)) (set! oU2bfc@oU2a35@syntax-violation-form oU2a35@syntax-violation-form) (set! oU2a37@syntax-violation-subform (condition-accessor oU2a24@oU2a1f oU2a31@oU2a1e)) (set! oU2bfd@oU2a37@syntax-violation-subform oU2a37@syntax-violation-subform) (set! oU2a39@&syntax-rtd oU2a24@oU2a1f) (set! oU2bfe@oU2a39@&syntax-rtd oU2a39@&syntax-rtd) (set! oU2a3b@&syntax-rcd oU2a28@oU2a20) (set! oU2bff@oU2a3b@&syntax-rcd oU2a3b@&syntax-rcd) (set! oU2a41@oU2a3c (make-record-type-descriptor '&undefined oU2981@oU297c 'oU2a3f '#f '#f '#())) (set! oU2c00@oU2a41@oU2a3c oU2a41@oU2a3c) (set! oU2a43@oU2a3e '#f) (set! oU2c01@oU2a43@oU2a3e oU2a43@oU2a3e) (set! oU2a45@oU2a3d (make-record-constructor-descriptor oU2a41@oU2a3c oU2985@oU297d oU2a43@oU2a3e)) (set! oU2c02@oU2a45@oU2a3d oU2a45@oU2a3d) (set! oU2a48@p? (record-predicate oU2a41@oU2a3c)) (set! oU2c03@oU2a48@p? oU2a48@p?) (set! oU2a4a@make-undefined-violation (record-constructor oU2a45@oU2a3d)) (set! oU2c04@oU2a4a@make-undefined-violation oU2a4a@make-undefined-violation) (set! oU2a4c@undefined-violation? (condition-predicate oU2a41@oU2a3c)) (set! oU2c05@oU2a4c@undefined-violation? oU2a4c@undefined-violation?) (set! oU2a4e@&undefined-rtd oU2a41@oU2a3c) (set! oU2c06@oU2a4e@&undefined-rtd oU2a4e@&undefined-rtd) (set! oU2a50@&undefined-rcd oU2a45@oU2a3d) (set! oU2c07@oU2a50@&undefined-rcd oU2a50@&undefined-rcd) (set! oU2a56@oU2a51 (make-record-type-descriptor '&i/o oU296c@oU2967 'oU2a54 '#f '#f '#())) (set! oU2c08@oU2a56@oU2a51 oU2a56@oU2a51) (set! oU2a58@oU2a53 '#f) (set! oU2c09@oU2a58@oU2a53 oU2a58@oU2a53) (set! oU2a5a@oU2a52 (make-record-constructor-descriptor oU2a56@oU2a51 oU2970@oU2968 oU2a58@oU2a53)) (set! oU2c0a@oU2a5a@oU2a52 oU2a5a@oU2a52) (set! oU2a5d@p? (record-predicate oU2a56@oU2a51)) (set! oU2c0b@oU2a5d@p? oU2a5d@p?) (set! oU2a5f@make-i/o-error (record-constructor oU2a5a@oU2a52)) (set! oU2c0c@oU2a5f@make-i/o-error oU2a5f@make-i/o-error) (set! oU2a61@i/o-error? (condition-predicate oU2a56@oU2a51)) (set! oU2c0d@oU2a61@i/o-error? oU2a61@i/o-error?) (set! oU2a63@&i/o-rtd oU2a56@oU2a51) (set! oU2c0e@oU2a63@&i/o-rtd oU2a63@&i/o-rtd) (set! oU2a65@&i/o-rcd oU2a5a@oU2a52) (set! oU2c0f@oU2a65@&i/o-rcd oU2a65@&i/o-rcd) (set! oU2a6b@oU2a66 (make-record-type-descriptor '&i/o-read oU2a56@oU2a51 'oU2a69 '#f '#f '#())) (set! oU2c10@oU2a6b@oU2a66 oU2a6b@oU2a66) (set! oU2a6d@oU2a68 '#f) (set! oU2c11@oU2a6d@oU2a68 oU2a6d@oU2a68) (set! oU2a6f@oU2a67 (make-record-constructor-descriptor oU2a6b@oU2a66 oU2a5a@oU2a52 oU2a6d@oU2a68)) (set! oU2c12@oU2a6f@oU2a67 oU2a6f@oU2a67) (set! oU2a72@p? (record-predicate oU2a6b@oU2a66)) (set! oU2c13@oU2a72@p? oU2a72@p?) (set! oU2a74@make-i/o-read-error (record-constructor oU2a6f@oU2a67)) (set! oU2c14@oU2a74@make-i/o-read-error oU2a74@make-i/o-read-error) (set! oU2a76@i/o-read-error? (condition-predicate oU2a6b@oU2a66)) (set! oU2c15@oU2a76@i/o-read-error? oU2a76@i/o-read-error?) (set! oU2a78@&i/o-read-rtd oU2a6b@oU2a66) (set! oU2c16@oU2a78@&i/o-read-rtd oU2a78@&i/o-read-rtd) (set! oU2a7a@&i/o-read-rcd oU2a6f@oU2a67) (set! oU2c17@oU2a7a@&i/o-read-rcd oU2a7a@&i/o-read-rcd) (set! oU2a80@oU2a7b (make-record-type-descriptor '&i/o-write oU2a56@oU2a51 'oU2a7e '#f '#f '#())) (set! oU2c18@oU2a80@oU2a7b oU2a80@oU2a7b) (set! oU2a82@oU2a7d '#f) (set! oU2c19@oU2a82@oU2a7d oU2a82@oU2a7d) (set! oU2a84@oU2a7c (make-record-constructor-descriptor oU2a80@oU2a7b oU2a5a@oU2a52 oU2a82@oU2a7d)) (set! oU2c1a@oU2a84@oU2a7c oU2a84@oU2a7c) (set! oU2a87@p? (record-predicate oU2a80@oU2a7b)) (set! oU2c1b@oU2a87@p? oU2a87@p?) (set! oU2a89@make-i/o-write-error (record-constructor oU2a84@oU2a7c)) (set! oU2c1c@oU2a89@make-i/o-write-error oU2a89@make-i/o-write-error) (set! oU2a8b@i/o-write-error? (condition-predicate oU2a80@oU2a7b)) (set! oU2c1d@oU2a8b@i/o-write-error? oU2a8b@i/o-write-error?) (set! oU2a8d@&i/o-write-rtd oU2a80@oU2a7b) (set! oU2c1e@oU2a8d@&i/o-write-rtd oU2a8d@&i/o-write-rtd) (set! oU2a8f@&i/o-write-rcd oU2a84@oU2a7c) (set! oU2c1f@oU2a8f@&i/o-write-rcd oU2a8f@&i/o-write-rcd) (set! oU2a97@oU2a92 (make-record-type-descriptor '&i/o-invalid-position oU2a56@oU2a51 'oU2a95 '#f '#f '#((immutable position)))) (set! oU2c20@oU2a97@oU2a92 oU2a97@oU2a92) (set! oU2a99@oU2a94 '#f) (set! oU2c21@oU2a99@oU2a94 oU2a99@oU2a94) (set! oU2a9b@oU2a93 (make-record-constructor-descriptor oU2a97@oU2a92 oU2a5a@oU2a52 oU2a99@oU2a94)) (set! oU2c22@oU2a9b@oU2a93 oU2a9b@oU2a93) (set! oU2a9e@p? (record-predicate oU2a97@oU2a92)) (set! oU2c23@oU2a9e@p? oU2a9e@p?) (set! oU2aa0@make-i/o-invalid-position-error (record-constructor oU2a9b@oU2a93)) (set! oU2c24@oU2aa0@make-i/o-invalid-position-error oU2aa0@make-i/o-invalid-position-error) (set! oU2aa2@oU2a91 (record-accessor oU2a97@oU2a92 '0)) (set! oU2c25@oU2aa2@oU2a91 oU2aa2@oU2a91) (set! oU2aa4@i/o-invalid-position-error? (condition-predicate oU2a97@oU2a92)) (set! oU2c26@oU2aa4@i/o-invalid-position-error? oU2aa4@i/o-invalid-position-error?) (set! oU2aa6@i/o-error-position (condition-accessor oU2a97@oU2a92 oU2aa2@oU2a91)) (set! oU2c27@oU2aa6@i/o-error-position oU2aa6@i/o-error-position) (set! oU2aa8@&i/o-invalid-position-rtd oU2a97@oU2a92) (set! oU2c28@oU2aa8@&i/o-invalid-position-rtd oU2aa8@&i/o-invalid-position-rtd) (set! oU2aaa@&i/o-invalid-position-rcd oU2a9b@oU2a93) (set! oU2c29@oU2aaa@&i/o-invalid-position-rcd oU2aaa@&i/o-invalid-position-rcd) (set! oU2ab2@oU2aad (make-record-type-descriptor '&i/o-filename oU2a56@oU2a51 'oU2ab0 '#f '#f '#((immutable filename)))) (set! oU2c2a@oU2ab2@oU2aad oU2ab2@oU2aad) (set! oU2ab4@oU2aaf '#f) (set! oU2c2b@oU2ab4@oU2aaf oU2ab4@oU2aaf) (set! oU2ab6@oU2aae (make-record-constructor-descriptor oU2ab2@oU2aad oU2a5a@oU2a52 oU2ab4@oU2aaf)) (set! oU2c2c@oU2ab6@oU2aae oU2ab6@oU2aae) (set! oU2ab9@p? (record-predicate oU2ab2@oU2aad)) (set! oU2c2d@oU2ab9@p? oU2ab9@p?) (set! oU2abb@make-i/o-filename-error (record-constructor oU2ab6@oU2aae)) (set! oU2c2e@oU2abb@make-i/o-filename-error oU2abb@make-i/o-filename-error) (set! oU2abd@oU2aac (record-accessor oU2ab2@oU2aad '0)) (set! oU2c2f@oU2abd@oU2aac oU2abd@oU2aac) (set! oU2abf@i/o-filename-error? (condition-predicate oU2ab2@oU2aad)) (set! oU2c30@oU2abf@i/o-filename-error? oU2abf@i/o-filename-error?) (set! oU2ac1@i/o-error-filename (condition-accessor oU2ab2@oU2aad oU2abd@oU2aac)) (set! oU2c31@oU2ac1@i/o-error-filename oU2ac1@i/o-error-filename) (set! oU2ac3@&i/o-filename-rtd oU2ab2@oU2aad) (set! oU2c32@oU2ac3@&i/o-filename-rtd oU2ac3@&i/o-filename-rtd) (set! oU2ac5@&i/o-filename-rcd oU2ab6@oU2aae) (set! oU2c33@oU2ac5@&i/o-filename-rcd oU2ac5@&i/o-filename-rcd) (set! oU2acb@oU2ac6 (make-record-type-descriptor '&i/o-file-protection oU2ab2@oU2aad 'oU2ac9 '#f '#f '#())) (set! oU2c34@oU2acb@oU2ac6 oU2acb@oU2ac6) (set! oU2acd@oU2ac8 '#f) (set! oU2c35@oU2acd@oU2ac8 oU2acd@oU2ac8) (set! oU2acf@oU2ac7 (make-record-constructor-descriptor oU2acb@oU2ac6 oU2ab6@oU2aae oU2acd@oU2ac8)) (set! oU2c36@oU2acf@oU2ac7 oU2acf@oU2ac7) (set! oU2ad2@p? (record-predicate oU2acb@oU2ac6)) (set! oU2c37@oU2ad2@p? oU2ad2@p?) (set! oU2ad4@make-i/o-file-protection-error (record-constructor oU2acf@oU2ac7)) (set! oU2c38@oU2ad4@make-i/o-file-protection-error oU2ad4@make-i/o-file-protection-error) (set! oU2ad6@i/o-file-protection-error? (condition-predicate oU2acb@oU2ac6)) (set! oU2c39@oU2ad6@i/o-file-protection-error? oU2ad6@i/o-file-protection-error?) (set! oU2ad8@&i/o-file-protection-rtd oU2acb@oU2ac6) (set! oU2c3a@oU2ad8@&i/o-file-protection-rtd oU2ad8@&i/o-file-protection-rtd) (set! oU2ada@&i/o-file-protection-rcd oU2acf@oU2ac7) (set! oU2c3b@oU2ada@&i/o-file-protection-rcd oU2ada@&i/o-file-protection-rcd) (set! oU2ae0@oU2adb (make-record-type-descriptor '&i/o-file-is-read-only oU2acb@oU2ac6 'oU2ade '#f '#f '#())) (set! oU2c3c@oU2ae0@oU2adb oU2ae0@oU2adb) (set! oU2ae2@oU2add '#f) (set! oU2c3d@oU2ae2@oU2add oU2ae2@oU2add) (set! oU2ae4@oU2adc (make-record-constructor-descriptor oU2ae0@oU2adb oU2acf@oU2ac7 oU2ae2@oU2add)) (set! oU2c3e@oU2ae4@oU2adc oU2ae4@oU2adc) (set! oU2ae7@p? (record-predicate oU2ae0@oU2adb)) (set! oU2c3f@oU2ae7@p? oU2ae7@p?) (set! oU2ae9@make-i/o-file-is-read-only-error (record-constructor oU2ae4@oU2adc)) (set! oU2c40@oU2ae9@make-i/o-file-is-read-only-error oU2ae9@make-i/o-file-is-read-only-error) (set! oU2aeb@i/o-file-is-read-only-error? (condition-predicate oU2ae0@oU2adb)) (set! oU2c41@oU2aeb@i/o-file-is-read-only-error? oU2aeb@i/o-file-is-read-only-error?) (set! oU2aed@&i/o-file-is-read-only-rtd oU2ae0@oU2adb) (set! oU2c42@oU2aed@&i/o-file-is-read-only-rtd oU2aed@&i/o-file-is-read-only-rtd) (set! oU2aef@&i/o-file-is-read-only-rcd oU2ae4@oU2adc) (set! oU2c43@oU2aef@&i/o-file-is-read-only-rcd oU2aef@&i/o-file-is-read-only-rcd) (set! oU2af5@oU2af0 (make-record-type-descriptor '&i/o-file-already-exists oU2ab2@oU2aad 'oU2af3 '#f '#f '#())) (set! oU2c44@oU2af5@oU2af0 oU2af5@oU2af0) (set! oU2af7@oU2af2 '#f) (set! oU2c45@oU2af7@oU2af2 oU2af7@oU2af2) (set! oU2af9@oU2af1 (make-record-constructor-descriptor oU2af5@oU2af0 oU2ab6@oU2aae oU2af7@oU2af2)) (set! oU2c46@oU2af9@oU2af1 oU2af9@oU2af1) (set! oU2afc@p? (record-predicate oU2af5@oU2af0)) (set! oU2c47@oU2afc@p? oU2afc@p?) (set! oU2afe@make-i/o-file-already-exists-error (record-constructor oU2af9@oU2af1)) (set! oU2c48@oU2afe@make-i/o-file-already-exists-error oU2afe@make-i/o-file-already-exists-error) (set! oU2b00@i/o-file-already-exists-error? (condition-predicate oU2af5@oU2af0)) (set! oU2c49@oU2b00@i/o-file-already-exists-error? oU2b00@i/o-file-already-exists-error?) (set! oU2b02@&i/o-file-already-exists-rtd oU2af5@oU2af0) (set! oU2c4a@oU2b02@&i/o-file-already-exists-rtd oU2b02@&i/o-file-already-exists-rtd) (set! oU2b04@&i/o-file-already-exists-rcd oU2af9@oU2af1) (set! oU2c4b@oU2b04@&i/o-file-already-exists-rcd oU2b04@&i/o-file-already-exists-rcd) (set! oU2b0a@oU2b05 (make-record-type-descriptor '&i/o-file-does-not-exist oU2ab2@oU2aad 'oU2b08 '#f '#f '#())) (set! oU2c4c@oU2b0a@oU2b05 oU2b0a@oU2b05) (set! oU2b0c@oU2b07 '#f) (set! oU2c4d@oU2b0c@oU2b07 oU2b0c@oU2b07) (set! oU2b0e@oU2b06 (make-record-constructor-descriptor oU2b0a@oU2b05 oU2ab6@oU2aae oU2b0c@oU2b07)) (set! oU2c4e@oU2b0e@oU2b06 oU2b0e@oU2b06) (set! oU2b11@p? (record-predicate oU2b0a@oU2b05)) (set! oU2c4f@oU2b11@p? oU2b11@p?) (set! oU2b13@make-i/o-file-does-not-exist-error (record-constructor oU2b0e@oU2b06)) (set! oU2c50@oU2b13@make-i/o-file-does-not-exist-error oU2b13@make-i/o-file-does-not-exist-error) (set! oU2b15@i/o-file-does-not-exist-error? (condition-predicate oU2b0a@oU2b05)) (set! oU2c51@oU2b15@i/o-file-does-not-exist-error? oU2b15@i/o-file-does-not-exist-error?) (set! oU2b17@&i/o-file-does-not-exist-rtd oU2b0a@oU2b05) (set! oU2c52@oU2b17@&i/o-file-does-not-exist-rtd oU2b17@&i/o-file-does-not-exist-rtd) (set! oU2b19@&i/o-file-does-not-exist-rcd oU2b0e@oU2b06) (set! oU2c53@oU2b19@&i/o-file-does-not-exist-rcd oU2b19@&i/o-file-does-not-exist-rcd) (set! oU2b21@oU2b1c (make-record-type-descriptor '&i/o-port oU2a56@oU2a51 'oU2b1f '#f '#f '#((immutable port)))) (set! oU2c54@oU2b21@oU2b1c oU2b21@oU2b1c) (set! oU2b23@oU2b1e '#f) (set! oU2c55@oU2b23@oU2b1e oU2b23@oU2b1e) (set! oU2b25@oU2b1d (make-record-constructor-descriptor oU2b21@oU2b1c oU2a5a@oU2a52 oU2b23@oU2b1e)) (set! oU2c56@oU2b25@oU2b1d oU2b25@oU2b1d) (set! oU2b28@p? (record-predicate oU2b21@oU2b1c)) (set! oU2c57@oU2b28@p? oU2b28@p?) (set! oU2b2a@make-i/o-port-error (record-constructor oU2b25@oU2b1d)) (set! oU2c58@oU2b2a@make-i/o-port-error oU2b2a@make-i/o-port-error) (set! oU2b2c@oU2b1b (record-accessor oU2b21@oU2b1c '0)) (set! oU2c59@oU2b2c@oU2b1b oU2b2c@oU2b1b) (set! oU2b2e@i/o-port-error? (condition-predicate oU2b21@oU2b1c)) (set! oU2c5a@oU2b2e@i/o-port-error? oU2b2e@i/o-port-error?) (set! oU2b30@i/o-error-port (condition-accessor oU2b21@oU2b1c oU2b2c@oU2b1b)) (set! oU2c5b@oU2b30@i/o-error-port oU2b30@i/o-error-port) (set! oU2b32@&i/o-port-rtd oU2b21@oU2b1c) (set! oU2c5c@oU2b32@&i/o-port-rtd oU2b32@&i/o-port-rtd) (set! oU2b34@&i/o-port-rcd oU2b25@oU2b1d) (set! oU2c5d@oU2b34@&i/o-port-rcd oU2b34@&i/o-port-rcd) (set! oU2b3a@oU2b35 (make-record-type-descriptor '&i/o-decoding oU2b21@oU2b1c 'oU2b38 '#f '#f '#())) (set! oU2c5e@oU2b3a@oU2b35 oU2b3a@oU2b35) (set! oU2b3c@oU2b37 '#f) (set! oU2c5f@oU2b3c@oU2b37 oU2b3c@oU2b37) (set! oU2b3e@oU2b36 (make-record-constructor-descriptor oU2b3a@oU2b35 oU2b25@oU2b1d oU2b3c@oU2b37)) (set! oU2c60@oU2b3e@oU2b36 oU2b3e@oU2b36) (set! oU2b41@p? (record-predicate oU2b3a@oU2b35)) (set! oU2c61@oU2b41@p? oU2b41@p?) (set! oU2b43@make-i/o-decoding-error (record-constructor oU2b3e@oU2b36)) (set! oU2c62@oU2b43@make-i/o-decoding-error oU2b43@make-i/o-decoding-error) (set! oU2b45@i/o-decoding-error? (condition-predicate oU2b3a@oU2b35)) (set! oU2c63@oU2b45@i/o-decoding-error? oU2b45@i/o-decoding-error?) (set! oU2b47@&i/o-decoding-rtd oU2b3a@oU2b35) (set! oU2c64@oU2b47@&i/o-decoding-rtd oU2b47@&i/o-decoding-rtd) (set! oU2b49@&i/o-decoding-rcd oU2b3e@oU2b36) (set! oU2c65@oU2b49@&i/o-decoding-rcd oU2b49@&i/o-decoding-rcd) (set! oU2b51@oU2b4c (make-record-type-descriptor '&i/o-encoding oU2b21@oU2b1c 'oU2b4f '#f '#f '#((immutable char)))) (set! oU2c66@oU2b51@oU2b4c oU2b51@oU2b4c) (set! oU2b53@oU2b4e '#f) (set! oU2c67@oU2b53@oU2b4e oU2b53@oU2b4e) (set! oU2b55@oU2b4d (make-record-constructor-descriptor oU2b51@oU2b4c oU2b25@oU2b1d oU2b53@oU2b4e)) (set! oU2c68@oU2b55@oU2b4d oU2b55@oU2b4d) (set! oU2b58@p? (record-predicate oU2b51@oU2b4c)) (set! oU2c69@oU2b58@p? oU2b58@p?) (set! oU2b5a@make-i/o-encoding-error (record-constructor oU2b55@oU2b4d)) (set! oU2c6a@oU2b5a@make-i/o-encoding-error oU2b5a@make-i/o-encoding-error) (set! oU2b5c@oU2b4b (record-accessor oU2b51@oU2b4c '0)) (set! oU2c6b@oU2b5c@oU2b4b oU2b5c@oU2b4b) (set! oU2b5e@i/o-encoding-error? (condition-predicate oU2b51@oU2b4c)) (set! oU2c6c@oU2b5e@i/o-encoding-error? oU2b5e@i/o-encoding-error?) (set! oU2b60@i/o-encoding-error-char (condition-accessor oU2b51@oU2b4c oU2b5c@oU2b4b)) (set! oU2c6d@oU2b60@i/o-encoding-error-char oU2b60@i/o-encoding-error-char) (set! oU2b62@&i/o-encoding-rtd oU2b51@oU2b4c) (set! oU2c6e@oU2b62@&i/o-encoding-rtd oU2b62@&i/o-encoding-rtd) (set! oU2b64@&i/o-encoding-rcd oU2b55@oU2b4d) (set! oU2c6f@oU2b64@&i/o-encoding-rcd oU2b64@&i/o-encoding-rcd) (set! oU2b6a@oU2b65 (make-record-type-descriptor '&no-infinities oU29f6@oU29f1 'oU2b68 '#f '#f '#())) (set! oU2c70@oU2b6a@oU2b65 oU2b6a@oU2b65) (set! oU2b6c@oU2b67 '#f) (set! oU2c71@oU2b6c@oU2b67 oU2b6c@oU2b67) (set! oU2b6e@oU2b66 (make-record-constructor-descriptor oU2b6a@oU2b65 oU29fa@oU29f2 oU2b6c@oU2b67)) (set! oU2c72@oU2b6e@oU2b66 oU2b6e@oU2b66) (set! oU2b71@p? (record-predicate oU2b6a@oU2b65)) (set! oU2c73@oU2b71@p? oU2b71@p?) (set! oU2b73@make-no-infinities-violation (record-constructor oU2b6e@oU2b66)) (set! oU2c74@oU2b73@make-no-infinities-violation oU2b73@make-no-infinities-violation) (set! oU2b75@no-infinities-violation? (condition-predicate oU2b6a@oU2b65)) (set! oU2c75@oU2b75@no-infinities-violation? oU2b75@no-infinities-violation?) (set! oU2b77@&no-infinities-rtd oU2b6a@oU2b65) (set! oU2c76@oU2b77@&no-infinities-rtd oU2b77@&no-infinities-rtd) (set! oU2b79@&no-infinities-rcd oU2b6e@oU2b66) (set! oU2c77@oU2b79@&no-infinities-rcd oU2b79@&no-infinities-rcd) (set! oU2b7f@oU2b7a (make-record-type-descriptor '&no-nans oU29f6@oU29f1 'oU2b7d '#f '#f '#())) (set! oU2c78@oU2b7f@oU2b7a oU2b7f@oU2b7a) (set! oU2b81@oU2b7c '#f) (set! oU2c79@oU2b81@oU2b7c oU2b81@oU2b7c) (set! oU2b83@oU2b7b (make-record-constructor-descriptor oU2b7f@oU2b7a oU29fa@oU29f2 oU2b81@oU2b7c)) (set! oU2c7a@oU2b83@oU2b7b oU2b83@oU2b7b) (set! oU2b86@p? (record-predicate oU2b7f@oU2b7a)) (set! oU2c7b@oU2b86@p? oU2b86@p?) (set! oU2b88@make-no-nans-violation (record-constructor oU2b83@oU2b7b)) (set! oU2c7c@oU2b88@make-no-nans-violation oU2b88@make-no-nans-violation) (set! oU2b8a@no-nans-violation? (condition-predicate oU2b7f@oU2b7a)) (set! oU2c7d@oU2b8a@no-nans-violation? oU2b8a@no-nans-violation?) (set! oU2b8c@&no-nans-rtd oU2b7f@oU2b7a) (set! oU2c7e@oU2b8c@&no-nans-rtd oU2b8c@&no-nans-rtd) (set! oU2b8e@&no-nans-rcd oU2b83@oU2b7b) (set! oU2c7f@oU2b8e@&no-nans-rcd oU2b8e@&no-nans-rcd) (void))
(begin (begin (oU715@oU6ca@current-primitive-locations (lambda (oU3150@x) (let ((oU3152@t (assq oU3150@x '((&no-nans-rcd . oU2c7f@oU2b8e@&no-nans-rcd) (&no-nans-rtd . oU2c7e@oU2b8c@&no-nans-rtd) (&no-infinities-rcd . oU2c77@oU2b79@&no-infinities-rcd) (&no-infinities-rtd . oU2c76@oU2b77@&no-infinities-rtd) (&i/o-encoding-rcd . oU2c6f@oU2b64@&i/o-encoding-rcd) (&i/o-encoding-rtd . oU2c6e@oU2b62@&i/o-encoding-rtd) (&i/o-decoding-rcd . oU2c65@oU2b49@&i/o-decoding-rcd) (&i/o-decoding-rtd . oU2c64@oU2b47@&i/o-decoding-rtd) (&i/o-port-rcd . oU2c5d@oU2b34@&i/o-port-rcd) (&i/o-port-rtd . oU2c5c@oU2b32@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . oU2c53@oU2b19@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . oU2c52@oU2b17@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . oU2c4b@oU2b04@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . oU2c4a@oU2b02@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . oU2c43@oU2aef@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . oU2c42@oU2aed@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . oU2c3b@oU2ada@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . oU2c3a@oU2ad8@&i/o-file-protection-rtd) (&i/o-filename-rcd . oU2c33@oU2ac5@&i/o-filename-rcd) (&i/o-filename-rtd . oU2c32@oU2ac3@&i/o-filename-rtd) (&i/o-invalid-position-rcd . oU2c29@oU2aaa@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . oU2c28@oU2aa8@&i/o-invalid-position-rtd) (&i/o-write-rcd . oU2c1f@oU2a8f@&i/o-write-rcd) (&i/o-write-rtd . oU2c1e@oU2a8d@&i/o-write-rtd) (&i/o-read-rcd . oU2c17@oU2a7a@&i/o-read-rcd) (&i/o-read-rtd . oU2c16@oU2a78@&i/o-read-rtd) (&i/o-rcd . oU2c0f@oU2a65@&i/o-rcd) (&i/o-rtd . oU2c0e@oU2a63@&i/o-rtd) (&undefined-rcd . oU2c07@oU2a50@&undefined-rcd) (&undefined-rtd . oU2c06@oU2a4e@&undefined-rtd) (&syntax-rcd . oU2bff@oU2a3b@&syntax-rcd) (&syntax-rtd . oU2bfe@oU2a39@&syntax-rtd) (&lexical-rcd . oU2bf3@oU2a1a@&lexical-rcd) (&lexical-rtd . oU2bf2@oU2a18@&lexical-rtd) (&implementation-restriction-rcd . oU2beb@oU2a05@&implementation-restriction-rcd) (&implementation-restriction-rtd . oU2bea@oU2a03@&implementation-restriction-rtd) (&non-continuable-rcd . oU2be3@oU29f0@&non-continuable-rcd) (&non-continuable-rtd . oU2be2@oU29ee@&non-continuable-rtd) (&who-rcd . oU2bdb@oU29db@&who-rcd) (&who-rtd . oU2bda@oU29d9@&who-rtd) (&irritants-rcd . oU2bd1@oU29c0@&irritants-rcd) (&irritants-rtd . oU2bd0@oU29be@&irritants-rtd) (&assertion-rcd . oU2bc7@oU29a5@&assertion-rcd) (&assertion-rtd . oU2bc6@oU29a3@&assertion-rtd) (&violation-rcd . oU2bbf@oU2990@&violation-rcd) (&violation-rtd . oU2bbe@oU298e@&violation-rtd) (&error-rcd . oU2bb7@oU297b@&error-rcd) (&error-rtd . oU2bb6@oU2979@&error-rtd) (&serious-rcd . oU2baf@oU2966@&serious-rcd) (&serious-rtd . oU2bae@oU2964@&serious-rtd) (&warning-rcd . oU2ba7@oU2951@&warning-rcd) (&warning-rtd . oU2ba6@oU294f@&warning-rtd) (&message-rcd . oU2b9f@oU293c@&message-rcd) (&message-rtd . oU2b9e@oU293a@&message-rtd) (&condition-rcd . oU2b95@oU28dd@&condition-rcd) (&condition-rtd . oU2b94@oU28db@&condition-rtd) (syntax-error . oU28b7@oUe5b@syntax-error) (syntax-dispatch . oU2855@oUd7f@syntax-dispatch) (load . oU2df4@oU2c9f@load) (interaction-environment . oU28c0@oUe6d@interaction-environment) (library-path . oU97c@oU7b8@library-path) (mosh-cache-dir . oU6c3@oU5a3@mosh-cache-dir) (make-parameter . oU6c2@oU5a1@make-parameter) (make-variable-transformer . oU2812@oUbaa@make-variable-transformer) (identifier? . oU28ba@oUe61@identifier?) (generate-temporaries . oU28b0@oUe4d@generate-temporaries) (free-identifier=? . oU28b1@oUe4f@free-identifier=?) (syntax->datum . oU28bc@oUe65@syntax->datum) (datum->syntax . oU28bb@oUe63@datum->syntax) (bound-identifier=? . oU28b2@oUe51@bound-identifier=?) (make-i/o-write-error . oU2c1c@oU2a89@make-i/o-write-error) (make-i/o-read-error . oU2c14@oU2a74@make-i/o-read-error) (make-i/o-port-error . oU2c58@oU2b2a@make-i/o-port-error) (make-i/o-invalid-position-error . oU2c24@oU2aa0@make-i/o-invalid-position-error) (make-i/o-filename-error . oU2c2e@oU2abb@make-i/o-filename-error) (make-i/o-file-protection-error . oU2c38@oU2ad4@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . oU2c40@oU2ae9@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . oU2c50@oU2b13@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . oU2c48@oU2afe@make-i/o-file-already-exists-error) (make-i/o-error . oU2c0c@oU2a5f@make-i/o-error) (make-i/o-encoding-error . oU2c6a@oU2b5a@make-i/o-encoding-error) (make-i/o-decoding-error . oU2c62@oU2b43@make-i/o-decoding-error) (i/o-write-error? . oU2c1d@oU2a8b@i/o-write-error?) (i/o-read-error? . oU2c15@oU2a76@i/o-read-error?) (i/o-port-error? . oU2c5a@oU2b2e@i/o-port-error?) (i/o-invalid-position-error? . oU2c26@oU2aa4@i/o-invalid-position-error?) (i/o-filename-error? . oU2c30@oU2abf@i/o-filename-error?) (i/o-file-protection-error? . oU2c39@oU2ad6@i/o-file-protection-error?) (i/o-file-is-read-only-error? . oU2c41@oU2aeb@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . oU2c51@oU2b15@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . oU2c49@oU2b00@i/o-file-already-exists-error?) (i/o-error? . oU2c0d@oU2a61@i/o-error?) (i/o-error-position . oU2c27@oU2aa6@i/o-error-position) (i/o-error-port . oU2c5b@oU2b30@i/o-error-port) (i/o-error-filename . oU2c31@oU2ac1@i/o-error-filename) (i/o-encoding-error? . oU2c6c@oU2b5e@i/o-encoding-error?) (i/o-encoding-error-char . oU2c6d@oU2b60@i/o-encoding-error-char) (i/o-decoding-error? . oU2c63@oU2b45@i/o-decoding-error?) (scheme-report-environment . oU28a7@oUe3b@scheme-report-environment) (null-environment . oU28a6@oUe39@null-environment) (command-line . oU2df1@oU2c99@command-line) (eval . oU28a9@oUe3f@eval) (environment . oU28a5@oUe37@environment) (who-condition? . oU2bd8@oU29d5@who-condition?) (warning? . oU2ba5@oU294d@warning?) (violation? . oU2bbd@oU298c@violation?) (undefined-violation? . oU2c05@oU2a4c@undefined-violation?) (syntax-violation? . oU2bfb@oU2a33@syntax-violation?) (syntax-violation-subform . oU2bfd@oU2a37@syntax-violation-subform) (syntax-violation-form . oU2bfc@oU2a35@syntax-violation-form) (syntax-violation . oU28b9@oUe5f@syntax-violation) (serious-condition? . oU2bad@oU2962@serious-condition?) (non-continuable-violation? . oU2be1@oU29ec@non-continuable-violation?) (message-condition? . oU2b9c@oU2936@message-condition?) (make-who-condition . oU2bd6@oU29d1@make-who-condition) (make-warning . oU2ba4@oU294b@make-warning) (make-violation . oU2bbc@oU298a@make-violation) (make-undefined-violation . oU2c04@oU2a4a@make-undefined-violation) (make-syntax-violation . oU2bf8@oU2a2d@make-syntax-violation) (make-serious-condition . oU2bac@oU2960@make-serious-condition) (make-non-continuable-violation . oU2be0@oU29ea@make-non-continuable-violation) (make-message-condition . oU2b9a@oU2932@make-message-condition) (make-lexical-violation . oU2bf0@oU2a14@make-lexical-violation) (make-irritants-condition . oU2bcc@oU29b6@make-irritants-condition) (make-implementation-restriction-violation . oU2be8@oU29ff@make-implementation-restriction-violation) (make-error . oU2bb4@oU2975@make-error) (make-assertion-violation . oU2bc4@oU299f@make-assertion-violation) (lexical-violation? . oU2bf1@oU2a16@lexical-violation?) (irritants-condition? . oU2bce@oU29ba@irritants-condition?) (implementation-restriction-violation? . oU2be9@oU2a01@implementation-restriction-violation?) (error? . oU2bb5@oU2977@error?) (condition-who . oU2bd9@oU29d7@condition-who) (condition-message . oU2b9d@oU2938@condition-message) (condition-irritants . oU2bcf@oU29bc@condition-irritants) (assertion-violation? . oU2bc5@oU29a1@assertion-violation?) (no-nans-violation? . oU2c7d@oU2b8a@no-nans-violation?) (no-infinities-violation? . oU2c75@oU2b75@no-infinities-violation?) (make-no-nans-violation . oU2c7c@oU2b88@make-no-nans-violation) (make-no-infinities-violation . oU2c74@oU2b73@make-no-infinities-violation) (assertion-error . oU28b6@oUe59@assertion-error))))) (if oU3152@t (cdr oU3152@t) '#f)))) (oU98c@oU7d8@install-library 'oU312d '(mosh interaction) '() '() '() '() '((regexp? . oU3125) (alist->eq-hash-table . oU3121) (format . oU311e) (string-split . oU3113) (call-process . oU310d) (set-current-directory! . oU3109) (expand-path . oU3108) (current-directory . oU3107) (%spawn . oU3106) (%waitpid . oU3105) (simple-struct-name . oU3104) (simple-struct-set! . oU3103) (simple-struct-ref . oU3102) (make-simple-struct . oU3101) (simple-struct? . oU3100) (pointer-ref-c-int64 . oU30ff) (pointer-ref-c-int32 . oU30fe) (pointer-ref-c-int16 . oU30fd) (pointer-ref-c-int8 . oU30fc) (pointer-ref-c-uint64 . oU30fb) (pointer-ref-c-uint32 . oU30fa) (pointer-ref-c-uint16 . oU30f9) (pointer-ref-c-uint8 . oU30f8) (pointer-set-c-uint64! . oU30f7) (pointer-set-c-uint32! . oU30f6) (pointer-set-c-uint16! . oU30f5) (pointer-set-c-uint8! . oU30f4) (pointer-set-c-int64! . oU30f3) (pointer-set-c-int32! . oU30f2) (pointer-set-c-int16! . oU30f1) (pointer-set-c-int8! . oU30f0) (pointer-set-c-pointer! . oU30ef) (pointer-set-c-double! . oU30ee) (pointer-set-c-float! . oU30ed) (pointer-set-c-long-long! . oU30ec) (pointer-set-c-long! . oU30eb) (pointer-set-c-int! . oU30ea) (pointer-set-c-short! . oU30e9) (pointer-set-c-char! . oU30e8) (pointer-ref-c-pointer . oU30e7) (pointer-ref-c-double . oU30e6) (pointer-ref-c-float . oU30e5) (pointer-ref-c-unsigned-long-long . oU30e4) (pointer-ref-c-signed-long-long . oU30e3) (pointer-ref-c-unsigned-long . oU30e2) (pointer-ref-c-signed-long . oU30e1) (pointer-ref-c-unsigned-int . oU30e0) (pointer-ref-c-signed-int . oU30df) (pointer-ref-c-unsigned-short . oU30de) (pointer-ref-c-signed-short . oU30dd) (pointer-ref-c-unsigned-char . oU30dc) (pointer-ref-c-signed-char . oU30db) (pointer->integer . oU30da) (integer->pointer . oU30d9) (pointer? . oU30d8) (shared-errno . oU30d7) (%ffi-supported? . oU30cf) (%ffi-pointer->string . oU30ce) (%ffi-call->string-or-zero . oU30cd) (%ffi-call->double . oU30cc) (%ffi-call->void* . oU30cb) (%ffi-call->void . oU30ca) (%ffi-call->char . oU30c9) (%ffi-call->int . oU30c8) (%ffi-lookup . oU30c7) (%ffi-open . oU30c6) (%fork . oU30c5) (%pipe . oU30c4) (p . oU30c3) (whereis . oU30a7) (register . oU30a6) (vm-join! . oU30a5) (vm-set-value! . oU30a4) (vm? . oU30a3) (main-vm? . oU30a2) (vm-eval . oU30a1) (vm-self . oU30a0) (vm-start! . oU309f) (make-vm . oU309e) (mutex-try-lock! . oU309d) (mutex-unlock! . oU309c) (mutex-lock! . oU309b) (mutex? . oU309a) (make-mutex . oU3099) (condition-variable-notify-all! . oU3098) (condition-variable-notify! . oU3097) (condition-variable-wait! . oU3096) (make-condition-variable . oU3095) (string-upcase . oU307d) (string-titlecase . oU307c) (string-normalize-nfkd . oU307b) (string-normalize-nfkc . oU307a) (string-normalize-nfd . oU3079) (string-normalize-nfc . oU3078) (string-foldcase . oU3077) (string-downcase . oU3076) (string-ci>? . oU3075) (string-ci>=? . oU3074) (string-ci=? . oU3073) (string-ci<? . oU3072) (string-ci<=? . oU3071) (char-whitespace? . oU3070) (char-upper-case? . oU306f) (char-title-case? . oU306e) (char-numeric? . oU306d) (char-lower-case? . oU306c) (char-general-category . oU306b) (char-upcase . oU306a) (char-titlecase . oU3069) (char-foldcase . oU3068) (char-downcase . oU3067) (char-ci>? . oU3066) (char-ci>=? . oU3065) (char-ci=? . oU3064) (char-ci<? . oU3063) (char-ci<=? . oU3062) (char-alphabetic? . oU3061) (make-variable-transformer . oUba9) (identifier? . oUe60) (generate-temporaries . oUe4c) (free-identifier=? . oUe4e) (syntax->datum . oUe64) (datum->syntax . oUe62) (bound-identifier=? . oUe50) (record-type-descriptor? . oU3060) (record-predicate . oU305f) (record-mutator . oU305e) (record-constructor . oU305d) (record-accessor . oU305c) (make-record-type-descriptor . oU305b) (make-record-constructor-descriptor . oU305a) (record? . oU3059) (record-type-uid . oU3058) (record-type-sealed? . oU3057) (record-type-parent . oU3056) (record-type-opaque? . oU3055) (record-type-name . oU3054) (record-type-generative? . oU3053) (record-type-field-names . oU3052) (record-rtd . oU3051) (record-field-mutable? . oU3050) (delete-file . oU304f) (file-exists? . oU304e) (vector-sort! . oU304d) (vector-sort . oU304c) (list-sort . oU304b) (symbol-hash . oU304a) (string-ci-hash . oU3049) (string-hash . oU3048) (equal-hash . oU3047) (hashtable-equivalence-function . oU3046) (make-hashtable . oU3045) (hashtable-hash-function . oU3044) (make-eqv-hashtable . oU3043) (make-eq-hashtable . oU3042) (hashtable? . oU3041) (hashtable-update! . oU3040) (hashtable-size . oU303f) (hashtable-set! . oU303e) (hashtable-ref . oU303d) (hashtable-mutable? . oU303c) (hashtable-keys . oU303b) (hashtable-entries . oU303a) (hashtable-delete! . oU3039) (hashtable-copy . oU3038) (hashtable-contains? . oU3037) (hashtable-clear! . oU3036) (call-with-output-file . oU3035) (call-with-input-file . oU3034) (write-char . oU3033) (write . oU3032) (with-output-to-file . oU3031) (with-input-from-file . oU3030) (read-char . oU302f) (read . oU302e) (peek-char . oU302d) (open-output-file . oU302c) (open-input-file . oU302b) (newline . oU302a) (display . oU3029) (close-output-port . oU3028) (close-input-port . oU3027) (eof-object? . oU3026) (eof-object . oU3025) (current-error-port . oU3024) (current-output-port . oU3023) (current-input-port . oU3022) (output-port? . oU3021) (input-port? . oU3020) (utf-8-codec . oU301f) (utf-16-codec . oU301e) (transcoder-error-handling-mode . oU301d) (transcoder-eol-style . oU301c) (transcoder-codec . oU301b) (transcoded-port . oU301a) (textual-port? . oU3019) (string->bytevector . oU3018) (standard-output-port . oU3017) (standard-input-port . oU3016) (standard-error-port . oU3015) (set-port-position! . oU3014) (put-u8 . oU3013) (put-string . oU3012) (put-datum . oU3011) (put-char . oU3010) (put-bytevector . oU300f) (port? . oU300e) (port-transcoder . oU300d) (port-position . oU300c) (port-has-set-port-position!? . oU300b) (port-has-port-position? . oU300a) (port-eof? . oU3009) (output-port-buffer-mode . oU3008) (open-string-output-port . oU3007) (open-string-input-port . oU3006) (open-file-output-port . oU3005) (open-file-input/output-port . oU3004) (open-file-input-port . oU3003) (open-bytevector-output-port . oU3002) (open-bytevector-input-port . oU3001) (native-transcoder . oU3000) (native-eol-style . oU2fff) (make-transcoder . oU2ffe) (latin-1-codec . oU2ffd) (make-i/o-write-error . oU2a88) (make-i/o-read-error . oU2a73) (make-i/o-port-error . oU2b29) (make-i/o-invalid-position-error . oU2a9f) (make-i/o-filename-error . oU2aba) (make-i/o-file-protection-error . oU2ad3) (make-i/o-file-is-read-only-error . oU2ae8) (make-i/o-file-does-not-exist-error . oU2b12) (make-i/o-file-already-exists-error . oU2afd) (make-i/o-error . oU2a5e) (make-i/o-encoding-error . oU2b59) (make-i/o-decoding-error . oU2b42) (make-custom-textual-output-port . oU2ffc) (make-custom-textual-input/output-port . oU2ffb) (make-custom-textual-input-port . oU2ffa) (make-custom-binary-output-port . oU2ff9) (make-custom-binary-input/output-port . oU2ff8) (make-custom-binary-input-port . oU2ff7) (make-bytevector . oU2ff6) (lookahead-u8 . oU2ff5) (lookahead-char . oU2ff4) (i/o-write-error? . oU2a8a) (i/o-read-error? . oU2a75) (i/o-port-error? . oU2b2d) (i/o-invalid-position-error? . oU2aa3) (i/o-filename-error? . oU2abe) (i/o-file-protection-error? . oU2ad5) (i/o-file-is-read-only-error? . oU2aea) (i/o-file-does-not-exist-error? . oU2b14) (i/o-file-already-exists-error? . oU2aff) (i/o-error? . oU2a60) (i/o-error-position . oU2aa5) (i/o-error-port . oU2b2f) (i/o-error-filename . oU2ac0) (i/o-encoding-error? . oU2b5d) (i/o-encoding-error-char . oU2b5f) (i/o-decoding-error? . oU2b44) (get-u8 . oU2ff3) (get-string-n! . oU2ff2) (get-string-n . oU2ff1) (get-string-all . oU2ff0) (get-line . oU2fef) (get-datum . oU2fee) (get-char . oU2fed) (get-bytevector-some . oU2fec) (get-bytevector-n! . oU2feb) (get-bytevector-n . oU2fea) (get-bytevector-all . oU2fe9) (flush-output-port . oU2fe8) (close-port . oU2fe7) (exit . oU2fdf) (command-line . oU2c98) (string-fill! . oU2fde) (string-set! . oU2fdd) (set-cdr! . oU2fdc) (set-car! . oU2fdb) (remove . oU2fda) (remv . oU2fd9) (remp . oU2fd8) (remq . oU2fd7) (partition . oU2fd6) (memv . oU2fd5) (memq . oU2fd4) (memp . oU2fd3) (member . oU2fd2) (exists . oU2fd1) (for-all . oU2fd0) (fold-right . oU2fcf) (fold-left . oU2fce) (find . oU2fcd) (filter . oU2fcc) (cons* . oU2fcb) (assv . oU2fca) (assq . oU2fc9) (assp . oU2fc8) (assoc . oU2fc7) (call-with-string-output-port . oU2fc6) (call-with-port . oU2fc5) (call-with-bytevector-output-port . oU2fc4) (bytevector->string . oU2fc3) (buffer-mode? . oU2fc2) (binary-port? . oU2fc1) (with-exception-handler . oU2fc0) (raise-continuable . oU2fbf) (raise . oU2fbe) (eval . oUe3e) (environment . oUe36) (make-enumeration . oU2fbd) (enum-set=? . oU2fbc) (enum-set-universe . oU2fbb) (enum-set-union . oU2fba) (enum-set-subset? . oU2fb9) (enum-set-projection . oU2fb8) (enum-set-member? . oU2fb7) (enum-set-intersection . oU2fb6) (enum-set-indexer . oU2fb5) (enum-set-difference . oU2fb4) (enum-set-constructor . oU2fb3) (enum-set-complement . oU2fb2) (enum-set->list . oU2fb1) (who-condition? . oU29d4) (warning? . oU294c) (violation? . oU298b) (undefined-violation? . oU2a4b) (syntax-violation? . oU2a32) (syntax-violation-subform . oU2a36) (syntax-violation-form . oU2a34) (syntax-violation . oUe5e) (simple-conditions . oU2fb0) (serious-condition? . oU2961) (non-continuable-violation? . oU29eb) (message-condition? . oU2935) (make-who-condition . oU29d0) (make-warning . oU294a) (make-violation . oU2989) (make-undefined-violation . oU2a49) (make-syntax-violation . oU2a2c) (make-serious-condition . oU295f) (make-non-continuable-violation . oU29e9) (make-message-condition . oU2931) (make-lexical-violation . oU2a13) (make-irritants-condition . oU29b5) (make-implementation-restriction-violation . oU29fe) (make-error . oU2974) (make-assertion-violation . oU299e) (lexical-violation? . oU2a15) (irritants-condition? . oU29b9) (implementation-restriction-violation? . oU2a00) (error? . oU2976) (condition-who . oU29d6) (condition-predicate . oU2faf) (condition-message . oU2937) (condition-irritants . oU29bb) (condition-accessor . oU2fae) (condition . oU2fad) (assertion-violation? . oU29a0) (condition? . oU2fac) (utf32->string . oU2fab) (utf16->string . oU2faa) (utf8->string . oU2fa9) (uint-list->bytevector . oU2fa8) (u8-list->bytevector . oU2fa7) (string->utf8 . oU2fa6) (string->utf32 . oU2fa5) (string->utf16 . oU2fa4) (sint-list->bytevector . oU2fa3) (native-endianness . oU2fa2) (bytevector? . oU2fa1) (bytevector=? . oU2fa0) (bytevector-uint-set! . oU2f9f) (bytevector-uint-ref . oU2f9e) (bytevector-u8-set! . oU2f9d) (bytevector-u8-ref . oU2f9c) (bytevector-u64-set! . oU2f9b) (bytevector-u64-ref . oU2f9a) (bytevector-u64-native-set! . oU2f99) (bytevector-u64-native-ref . oU2f98) (bytevector-u32-set! . oU2f97) (bytevector-u32-ref . oU2f96) (bytevector-u32-native-set! . oU2f95) (bytevector-u32-native-ref . oU2f94) (bytevector-u16-set! . oU2f93) (bytevector-u16-ref . oU2f92) (bytevector-u16-native-set! . oU2f91) (bytevector-u16-native-ref . oU2f90) (bytevector-sint-set! . oU2f8f) (bytevector-sint-ref . oU2f8e) (bytevector-s8-set! . oU2f8d) (bytevector-s8-ref . oU2f8c) (bytevector-s64-set! . oU2f8b) (bytevector-s64-ref . oU2f8a) (bytevector-s64-native-set! . oU2f89) (bytevector-s64-native-ref . oU2f88) (bytevector-s32-set! . oU2f87) (bytevector-s32-ref . oU2f86) (bytevector-s32-native-set! . oU2f85) (bytevector-s32-native-ref . oU2f84) (bytevector-s16-set! . oU2f83) (bytevector-s16-ref . oU2f82) (bytevector-s16-native-set! . oU2f81) (bytevector-s16-native-ref . oU2f80) (bytevector-length . oU2f7f) (bytevector-ieee-single-ref . oU2f7e) (bytevector-ieee-single-set! . oU2f7d) (bytevector-ieee-single-native-set! . oU2f7c) (bytevector-ieee-single-native-ref . oU2f7b) (bytevector-ieee-double-set! . oU2f7a) (bytevector-ieee-double-ref . oU2f79) (bytevector-ieee-double-native-set! . oU2f78) (bytevector-ieee-double-native-ref . oU2f77) (bytevector-fill! . oU2f76) (bytevector-copy! . oU2f75) (bytevector-copy . oU2f74) (bytevector->uint-list . oU2f73) (bytevector->u8-list . oU2f72) (bytevector->sint-list . oU2f71) (no-nans-violation? . oU2b89) (no-infinities-violation? . oU2b74) (make-no-nans-violation . oU2b87) (make-no-infinities-violation . oU2b72) (real->flonum . oU2f70) (flzero? . oU2f6f) (fltruncate . oU2f6e) (fltan . oU2f6d) (flsqrt . oU2f6c) (flsin . oU2f6b) (flround . oU2f6a) (flpositive? . oU2f69) (flonum? . oU2f68) (flodd? . oU2f67) (flnumerator . oU2f66) (flnegative? . oU2f65) (flnan? . oU2f64) (flmod0 . oU2f63) (flmod . oU2f62) (flmin . oU2f61) (flmax . oU2f60) (fllog . oU2f5f) (flinteger? . oU2f5e) (flinfinite? . oU2f5d) (flfloor . oU2f5c) (flfinite? . oU2f5b) (flexpt . oU2f5a) (flexp . oU2f59) (fleven? . oU2f58) (fldiv0-and-mod0 . oU2f57) (fldiv0 . oU2f56) (fldiv-and-mod . oU2f55) (fldiv . oU2f54) (fldenominator . oU2f53) (flcos . oU2f52) (flceiling . oU2f51) (flatan . oU2f50) (flasin . oU2f4f) (flacos . oU2f4e) (flabs . oU2f4d) (fl>? . oU2f4c) (fl>=? . oU2f4b) (fl=? . oU2f4a) (fl<? . oU2f49) (fl<=? . oU2f48) (fl/ . oU2f47) (fl- . oU2f46) (fl+ . oU2f45) (fl* . oU2f44) (fixnum->flonum . oU2f43) (fxzero? . oU2f42) (fxxor . oU2f41) (fxrotate-bit-field . oU2f40) (fxreverse-bit-field . oU2f3f) (fxpositive? . oU2f3e) (fxodd? . oU2f3d) (fxnot . oU2f3c) (fxnegative? . oU2f3b) (fxmod0 . oU2f3a) (fxmod . oU2f39) (fxmin . oU2f38) (fxmax . oU2f37) (fxlength . oU2f36) (fxior . oU2f35) (fxif . oU2f34) (fxfirst-bit-set . oU2f33) (fxeven? . oU2f32) (fxdiv0-and-mod0 . oU2f31) (fxdiv0 . oU2f30) (fxdiv-and-mod . oU2f2f) (fxdiv . oU2f2e) (fxcopy-bit-field . oU2f2d) (fxcopy-bit . oU2f2c) (fxbit-set? . oU2f2b) (fxbit-field . oU2f2a) (fxbit-count . oU2f29) (fxarithmetic-shift-right . oU2f28) (fxarithmetic-shift-left . oU2f27) (fxarithmetic-shift . oU2f26) (fxand . oU2f25) (fx>? . oU2f24) (fx>=? . oU2f23) (fx=? . oU2f22) (fx<? . oU2f21) (fx<=? . oU2f20) (fx-/carry . oU2f1f) (fx- . oU2f1e) (fx+/carry . oU2f1d) (fx+ . oU2f1c) (fx*/carry . oU2f1b) (fx* . oU2f1a) (greatest-fixnum . oU2f19) (least-fixnum . oU2f18) (fixnum-width . oU2f17) (fixnum? . oU2f16) (bitwise-rotate-bit-field . oU2f15) (bitwise-reverse-bit-field . oU2f14) (bitwise-length . oU2f13) (bitwise-if . oU2f12) (bitwise-first-bit-set . oU2f11) (bitwise-copy-bit-field . oU2f10) (bitwise-copy-bit . oU2f0f) (bitwise-bit-set? . oU2f0e) (bitwise-bit-field . oU2f0d) (bitwise-bit-count . oU2f0c) (bitwise-xor . oU2f0b) (bitwise-ior . oU2f0a) (bitwise-and . oU2f09) (bitwise-not . oU2f08) (bitwise-arithmetic-shift-right . oU2f07) (bitwise-arithmetic-shift-left . oU2f06) (bitwise-arithmetic-shift . oU2f05) (zero? . oU2f04) (vector? . oU2f03) (vector-set! . oU2f02) (vector-ref . oU2f01) (vector-map . oU2f00) (vector-length . oU2eff) (vector-for-each . oU2efe) (vector-fill! . oU2efd) (vector->list . oU2efc) (vector . oU2efb) (values . oU2efa) (truncate . oU2ef9) (tan . oU2ef8) (symbol? . oU2ef7) (symbol=? . oU2ef6) (symbol->string . oU2ef5) (substring . oU2ef4) (string? . oU2ef3) (string>? . oU2ef2) (string>=? . oU2ef1) (string=? . oU2ef0) (string<? . oU2eef) (string<=? . oU2eee) (string-ref . oU2eed) (string-length . oU2eec) (string-for-each . oU2eeb) (string-copy . oU2eea) (string-append . oU2ee9) (string->symbol . oU2ee8) (string->number . oU2ee7) (string->list . oU2ee6) (string . oU2ee5) (sqrt . oU2ee4) (sin . oU2ee3) (round . oU2ee2) (reverse . oU2ee1) (real? . oU2ee0) (real-valued? . oU2edf) (real-part . oU2ede) (rationalize . oU2edd) (rational? . oU2edc) (rational-valued? . oU2edb) (procedure? . oU2eda) (positive? . oU2ed9) (pair? . oU2ed8) (odd? . oU2ed7) (numerator . oU2ed6) (number? . oU2ed5) (number->string . oU2ed4) (null? . oU2ed3) (not . oU2ed2) (negative? . oU2ed1) (nan? . oU2ed0) (min . oU2ecf) (max . oU2ece) (map . oU2ecd) (make-vector . oU2ecc) (make-string . oU2ecb) (make-rectangular . oU2eca) (make-polar . oU2ec9) (magnitude . oU2ec8) (log . oU2ec7) (list? . oU2ec6) (list-tail . oU2ec5) (list-ref . oU2ec4) (list->vector . oU2ec3) (list->string . oU2ec2) (list . oU2ec1) (length . oU2ec0) (lcm . oU2ebf) (integer? . oU2ebe) (integer-valued? . oU2ebd) (integer->char . oU2ebc) (infinite? . oU2ebb) (inexact? . oU2eba) (inexact . oU2eb9) (imag-part . oU2eb8) (gcd . oU2eb7) (for-each . oU2eb6) (floor . oU2eb5) (finite? . oU2eb4) (expt . oU2eb3) (exp . oU2eb2) (exact? . oU2eb1) (exact-integer-sqrt . oU2eb0) (exact . oU2eaf) (even? . oU2eae) (error . oU2ead) (eqv? . oU2eac) (equal? . oU2eab) (eq? . oU2eaa) (dynamic-wind . oU2ea9) (div0-and-mod0 . oU2ea8) (mod0 . oU2ea7) (div0 . oU2ea6) (div-and-mod . oU2ea5) (mod . oU2ea4) (div . oU2ea3) (denominator . oU2ea2) (cos . oU2ea1) (cons . oU2ea0) (complex? . oU2e9f) (char? . oU2e9e) (char>? . oU2e9d) (char>=? . oU2e9c) (char=? . oU2e9b) (char<? . oU2e9a) (char<=? . oU2e99) (char->integer . oU2e98) (ceiling . oU2e97) (call-with-values . oU2e96) (call/cc . oU2e95) (call-with-current-continuation . oU2e94) (cddddr . oU2e93) (cdddar . oU2e92) (cddadr . oU2e91) (cddaar . oU2e90) (cdaddr . oU2e8f) (cdadar . oU2e8e) (cdaadr . oU2e8d) (cdaaar . oU2e8c) (cadddr . oU2e8b) (caddar . oU2e8a) (cadadr . oU2e89) (cadaar . oU2e88) (caaddr . oU2e87) (caadar . oU2e86) (caaadr . oU2e85) (caaaar . oU2e84) (cdddr . oU2e83) (cddar . oU2e82) (cdadr . oU2e81) (cdaar . oU2e80) (caddr . oU2e7f) (cadar . oU2e7e) (caadr . oU2e7d) (caaar . oU2e7c) (cddr . oU2e7b) (cdar . oU2e7a) (cadr . oU2e79) (caar . oU2e78) (cdr . oU2e77) (car . oU2e76) (boolean? . oU2e75) (boolean=? . oU2e74) (atan . oU2e73) (assertion-violation . oU2e72) (asin . oU2e71) (apply . oU2e70) (append . oU2e6f) (angle . oU2e6e) (acos . oU2e6d) (abs . oU2e6c) (/ . oU2e6b) (* . oU2e6a) (- . oU2e69) (+ . oU2e68) (>= . oU2e67) (> . oU2e66) (= . oU2e65) (<= . oU2e64) (< . oU2e63) (library . oU2e62) (&no-nans . oU2e61) (&no-infinities . oU2e60) (&i/o-encoding . oU2e5f) (&i/o-decoding . oU2e5e) (&i/o-port . oU2e5d) (&i/o-file-does-not-exist . oU2e5c) (&i/o-file-already-exists . oU2e5b) (&i/o-file-is-read-only . oU2e5a) (&i/o-file-protection . oU2e59) (&i/o-filename . oU2e58) (&i/o-invalid-position . oU2e57) (&i/o-write . oU2e56) (&i/o-read . oU2e55) (&i/o . oU2e54) (&undefined . oU2e53) (&syntax . oU2e52) (&lexical . oU2e51) (&implementation-restriction . oU2e50) (&non-continuable . oU2e4f) (&who . oU2e4e) (&irritants . oU2e4d) (&assertion . oU2e4c) (&violation . oU2e4b) (&error . oU2e4a) (&serious . oU2e49) (&warning . oU2e48) (&message . oU2e47) (&condition . oU2e46) (define-condition-type . oU2e45) (define-enumeration . oU2e44) (define-record-type . oU2e43) (parent-rtd . oU2e42) (nongenerative . oU2e41) (opaque . oU2e40) (sealed . oU2e3f) (protocol . oU2e3e) (parent . oU2e3d) (immutable . oU2e3c) (mutable . oU2e3b) (fields . oU2e3a) (error-handling-mode . oU2e39) (file-options . oU2e38) (buffer-mode . oU2e37) (eol-style . oU2e36) (guard . oU2e35) (unsyntax-splicing . oU2e32) (unsyntax . oU2e31) (unquote-splicing . oU2e30) (unquote . oU2e2f) (_ . oU2e2e) (else . oU2e2d) (=> . oU2e2c) (... . oU2e2b) (assert . oU2e2a) (endianness . oU2e29) (time . oU2e27) (do . oU2e26) (cond . oU2e25) (let* . oU2e24) (let*-values . oU2e23) (let-values . oU2e22) (identifier-syntax . oU2e21) (with-syntax . oU2e20) (quasisyntax . oU2e1f) (quasiquote . oU2e1e) (syntax-rules . oU2e1d) (include . oU2e1c) (record-constructor-descriptor . oU2e1a) (record-type-descriptor . oU2e19) (case . oU2e18) (unless . oU2e16) (when . oU2e15) (or . oU2e14) (and . oU2e13) (if . oU2e12) (let . oU2e11) (letrec* . oU2e10) (letrec . oU2e0f) (case-lambda . oU2e0d) (lambda . oU2e0c) (syntax . oU2e0b) (syntax-case . oU2e0a) (quote . oU2e09) (letrec-syntax . oU2e07) (let-syntax . oU2e06) (set! . oU2e05) (import . oU2e04) (begin . oU2e03) (define-syntax . oU2e01) (define . oU2e00)) '() values values '#f '#f '#t '#f) (oU98c@oU7d8@install-library 'oU312e '(psyntax null-environment-5) '() '() '() '() '((make-promise . oU2fe0) (unquote-splicing . oU2e30) (unquote . oU2e2f) (_ . oU2e2e) (else . oU2e2d) (=> . oU2e2c) (... . oU2e2b) (delay . oU2e28) (do . oU2e26) (cond . oU2e25) (let* . oU2e24) (quasiquote . oU2e1e) (syntax-rules . oU2e1d) (case . oU2e18) (or . oU2e14) (and . oU2e13) (if . oU2e12) (let . oU2e11) (letrec . oU2e0f) (lambda . oU2e0c) (quote . oU2e09) (letrec-syntax . oU2e07) (let-syntax . oU2e06) (set! . oU2e05) (begin . oU2e03) (define-syntax . oU2e01) (define . oU2e00)) '() values values '#f '#f '#t '#f) (oU98c@oU7d8@install-library 'oU312f '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . oU3075) (string-ci>=? . oU3074) (string-ci=? . oU3073) (string-ci<? . oU3072) (string-ci<=? . oU3071) (char-whitespace? . oU3070) (char-upper-case? . oU306f) (char-numeric? . oU306d) (char-lower-case? . oU306c) (char-upcase . oU306a) (char-downcase . oU3067) (char-ci>? . oU3066) (char-ci>=? . oU3065) (char-ci=? . oU3064) (char-ci<? . oU3063) (char-ci<=? . oU3062) (char-alphabetic? . oU3061) (call-with-output-file . oU3035) (call-with-input-file . oU3034) (write-char . oU3033) (write . oU3032) (with-output-to-file . oU3031) (with-input-from-file . oU3030) (read-char . oU302f) (read . oU302e) (peek-char . oU302d) (open-output-file . oU302c) (open-input-file . oU302b) (newline . oU302a) (display . oU3029) (close-output-port . oU3028) (close-input-port . oU3027) (eof-object . oU3025) (current-output-port . oU3023) (current-input-port . oU3022) (output-port? . oU3021) (input-port? . oU3020) (scheme-report-environment . oUe3a) (quotient . oU2fe6) (null-environment . oUe38) (remainder . oU2fe5) (modulo . oU2fe4) (inexact->exact . oU2fe3) (force . oU2fe2) (exact->inexact . oU2fe1) (make-promise . oU2fe0) (string-fill! . oU2fde) (string-set! . oU2fdd) (set-cdr! . oU2fdc) (set-car! . oU2fdb) (memv . oU2fd5) (memq . oU2fd4) (member . oU2fd2) (assv . oU2fca) (assq . oU2fc9) (assoc . oU2fc7) (eval . oUe3e) (zero? . oU2f04) (vector? . oU2f03) (vector-set! . oU2f02) (vector-ref . oU2f01) (vector-length . oU2eff) (vector-fill! . oU2efd) (vector->list . oU2efc) (vector . oU2efb) (values . oU2efa) (truncate . oU2ef9) (tan . oU2ef8) (symbol? . oU2ef7) (symbol->string . oU2ef5) (substring . oU2ef4) (string? . oU2ef3) (string>? . oU2ef2) (string>=? . oU2ef1) (string=? . oU2ef0) (string<? . oU2eef) (string<=? . oU2eee) (string-ref . oU2eed) (string-length . oU2eec) (string-copy . oU2eea) (string-append . oU2ee9) (string->symbol . oU2ee8) (string->number . oU2ee7) (string->list . oU2ee6) (string . oU2ee5) (sqrt . oU2ee4) (sin . oU2ee3) (round . oU2ee2) (reverse . oU2ee1) (real? . oU2ee0) (real-part . oU2ede) (rationalize . oU2edd) (rational? . oU2edc) (procedure? . oU2eda) (positive? . oU2ed9) (pair? . oU2ed8) (odd? . oU2ed7) (numerator . oU2ed6) (number? . oU2ed5) (number->string . oU2ed4) (not . oU2ed2) (negative? . oU2ed1) (min . oU2ecf) (max . oU2ece) (map . oU2ecd) (make-vector . oU2ecc) (make-string . oU2ecb) (make-rectangular . oU2eca) (make-polar . oU2ec9) (magnitude . oU2ec8) (log . oU2ec7) (list? . oU2ec6) (list-tail . oU2ec5) (list-ref . oU2ec4) (list->vector . oU2ec3) (list->string . oU2ec2) (list . oU2ec1) (length . oU2ec0) (lcm . oU2ebf) (integer? . oU2ebe) (integer->char . oU2ebc) (inexact? . oU2eba) (imag-part . oU2eb8) (gcd . oU2eb7) (for-each . oU2eb6) (floor . oU2eb5) (expt . oU2eb3) (exp . oU2eb2) (exact? . oU2eb1) (even? . oU2eae) (eqv? . oU2eac) (equal? . oU2eab) (eq? . oU2eaa) (dynamic-wind . oU2ea9) (denominator . oU2ea2) (cos . oU2ea1) (cons . oU2ea0) (complex? . oU2e9f) (char? . oU2e9e) (char>? . oU2e9d) (char>=? . oU2e9c) (char=? . oU2e9b) (char<? . oU2e9a) (char<=? . oU2e99) (char->integer . oU2e98) (ceiling . oU2e97) (call-with-values . oU2e96) (call-with-current-continuation . oU2e94) (cddddr . oU2e93) (cdddar . oU2e92) (cddadr . oU2e91) (cddaar . oU2e90) (cdaddr . oU2e8f) (cdadar . oU2e8e) (cdaadr . oU2e8d) (cdaaar . oU2e8c) (cadddr . oU2e8b) (caddar . oU2e8a) (cadadr . oU2e89) (cadaar . oU2e88) (caaddr . oU2e87) (caadar . oU2e86) (caaadr . oU2e85) (caaaar . oU2e84) (cdddr . oU2e83) (cddar . oU2e82) (cdadr . oU2e81) (cdaar . oU2e80) (caddr . oU2e7f) (cadar . oU2e7e) (caadr . oU2e7d) (caaar . oU2e7c) (cddr . oU2e7b) (cdar . oU2e7a) (cadr . oU2e79) (caar . oU2e78) (cdr . oU2e77) (car . oU2e76) (boolean? . oU2e75) (atan . oU2e73) (asin . oU2e71) (apply . oU2e70) (append . oU2e6f) (angle . oU2e6e) (acos . oU2e6d) (abs . oU2e6c) (/ . oU2e6b) (* . oU2e6a) (- . oU2e69) (+ . oU2e68) (>= . oU2e67) (> . oU2e66) (= . oU2e65) (<= . oU2e64) (< . oU2e63) (unquote-splicing . oU2e30) (unquote . oU2e2f) (else . oU2e2d) (=> . oU2e2c) (... . oU2e2b) (delay . oU2e28) (do . oU2e26) (cond . oU2e25) (let* . oU2e24) (quasiquote . oU2e1e) (syntax-rules . oU2e1d) (case . oU2e18) (or . oU2e14) (and . oU2e13) (if . oU2e12) (let . oU2e11) (letrec . oU2e0f) (lambda . oU2e0c) (quote . oU2e09) (letrec-syntax . oU2e07) (let-syntax . oU2e06) (set! . oU2e05) (begin . oU2e03) (define-syntax . oU2e01) (define . oU2e00)) '() values values '#f '#f '#t '#f) (oU98c@oU7d8@install-library 'oU3130 '(psyntax modules) '() '() '() '() '((module . oU2e02)) '() values values '#f '#f '#t '#f) (oU98c@oU7d8@install-library 'oU3131 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (oU98c@oU7d8@install-library 'oU3132 '(rnrs) '(6) '() '() '() '((regexp? . oU3125) (string-upcase . oU307d) (string-titlecase . oU307c) (string-normalize-nfkd . oU307b) (string-normalize-nfkc . oU307a) (string-normalize-nfd . oU3079) (string-normalize-nfc . oU3078) (string-foldcase . oU3077) (string-downcase . oU3076) (string-ci>? . oU3075) (string-ci>=? . oU3074) (string-ci=? . oU3073) (string-ci<? . oU3072) (string-ci<=? . oU3071) (char-whitespace? . oU3070) (char-upper-case? . oU306f) (char-title-case? . oU306e) (char-numeric? . oU306d) (char-lower-case? . oU306c) (char-general-category . oU306b) (char-upcase . oU306a) (char-titlecase . oU3069) (char-foldcase . oU3068) (char-downcase . oU3067) (char-ci>? . oU3066) (char-ci>=? . oU3065) (char-ci=? . oU3064) (char-ci<? . oU3063) (char-ci<=? . oU3062) (char-alphabetic? . oU3061) (make-variable-transformer . oUba9) (identifier? . oUe60) (generate-temporaries . oUe4c) (free-identifier=? . oUe4e) (syntax->datum . oUe64) (datum->syntax . oUe62) (bound-identifier=? . oUe50) (record-type-descriptor? . oU3060) (record-predicate . oU305f) (record-mutator . oU305e) (record-constructor . oU305d) (record-accessor . oU305c) (make-record-type-descriptor . oU305b) (make-record-constructor-descriptor . oU305a) (record? . oU3059) (record-type-uid . oU3058) (record-type-sealed? . oU3057) (record-type-parent . oU3056) (record-type-opaque? . oU3055) (record-type-name . oU3054) (record-type-generative? . oU3053) (record-type-field-names . oU3052) (record-rtd . oU3051) (record-field-mutable? . oU3050) (delete-file . oU304f) (file-exists? . oU304e) (vector-sort! . oU304d) (vector-sort . oU304c) (list-sort . oU304b) (symbol-hash . oU304a) (string-ci-hash . oU3049) (string-hash . oU3048) (equal-hash . oU3047) (hashtable-equivalence-function . oU3046) (make-hashtable . oU3045) (hashtable-hash-function . oU3044) (make-eqv-hashtable . oU3043) (make-eq-hashtable . oU3042) (hashtable? . oU3041) (hashtable-update! . oU3040) (hashtable-size . oU303f) (hashtable-set! . oU303e) (hashtable-ref . oU303d) (hashtable-mutable? . oU303c) (hashtable-keys . oU303b) (hashtable-entries . oU303a) (hashtable-delete! . oU3039) (hashtable-copy . oU3038) (hashtable-contains? . oU3037) (hashtable-clear! . oU3036) (call-with-output-file . oU3035) (call-with-input-file . oU3034) (write-char . oU3033) (write . oU3032) (with-output-to-file . oU3031) (with-input-from-file . oU3030) (read-char . oU302f) (read . oU302e) (peek-char . oU302d) (open-output-file . oU302c) (open-input-file . oU302b) (newline . oU302a) (display . oU3029) (close-output-port . oU3028) (close-input-port . oU3027) (eof-object? . oU3026) (eof-object . oU3025) (current-error-port . oU3024) (current-output-port . oU3023) (current-input-port . oU3022) (output-port? . oU3021) (input-port? . oU3020) (utf-8-codec . oU301f) (utf-16-codec . oU301e) (transcoder-error-handling-mode . oU301d) (transcoder-eol-style . oU301c) (transcoder-codec . oU301b) (transcoded-port . oU301a) (textual-port? . oU3019) (string->bytevector . oU3018) (standard-output-port . oU3017) (standard-input-port . oU3016) (standard-error-port . oU3015) (set-port-position! . oU3014) (put-u8 . oU3013) (put-string . oU3012) (put-datum . oU3011) (put-char . oU3010) (put-bytevector . oU300f) (port? . oU300e) (port-transcoder . oU300d) (port-position . oU300c) (port-has-set-port-position!? . oU300b) (port-has-port-position? . oU300a) (port-eof? . oU3009) (output-port-buffer-mode . oU3008) (open-string-output-port . oU3007) (open-string-input-port . oU3006) (open-file-output-port . oU3005) (open-file-input/output-port . oU3004) (open-file-input-port . oU3003) (open-bytevector-output-port . oU3002) (open-bytevector-input-port . oU3001) (native-transcoder . oU3000) (native-eol-style . oU2fff) (make-transcoder . oU2ffe) (latin-1-codec . oU2ffd) (make-i/o-write-error . oU2a88) (make-i/o-read-error . oU2a73) (make-i/o-port-error . oU2b29) (make-i/o-invalid-position-error . oU2a9f) (make-i/o-filename-error . oU2aba) (make-i/o-file-protection-error . oU2ad3) (make-i/o-file-is-read-only-error . oU2ae8) (make-i/o-file-does-not-exist-error . oU2b12) (make-i/o-file-already-exists-error . oU2afd) (make-i/o-error . oU2a5e) (make-i/o-encoding-error . oU2b59) (make-i/o-decoding-error . oU2b42) (make-custom-textual-output-port . oU2ffc) (make-custom-textual-input/output-port . oU2ffb) (make-custom-textual-input-port . oU2ffa) (make-custom-binary-output-port . oU2ff9) (make-custom-binary-input/output-port . oU2ff8) (make-custom-binary-input-port . oU2ff7) (make-bytevector . oU2ff6) (lookahead-u8 . oU2ff5) (lookahead-char . oU2ff4) (i/o-write-error? . oU2a8a) (i/o-read-error? . oU2a75) (i/o-port-error? . oU2b2d) (i/o-invalid-position-error? . oU2aa3) (i/o-filename-error? . oU2abe) (i/o-file-protection-error? . oU2ad5) (i/o-file-is-read-only-error? . oU2aea) (i/o-file-does-not-exist-error? . oU2b14) (i/o-file-already-exists-error? . oU2aff) (i/o-error? . oU2a60) (i/o-error-position . oU2aa5) (i/o-error-port . oU2b2f) (i/o-error-filename . oU2ac0) (i/o-encoding-error? . oU2b5d) (i/o-encoding-error-char . oU2b5f) (i/o-decoding-error? . oU2b44) (get-u8 . oU2ff3) (get-string-n! . oU2ff2) (get-string-n . oU2ff1) (get-string-all . oU2ff0) (get-line . oU2fef) (get-datum . oU2fee) (get-char . oU2fed) (get-bytevector-some . oU2fec) (get-bytevector-n! . oU2feb) (get-bytevector-n . oU2fea) (get-bytevector-all . oU2fe9) (flush-output-port . oU2fe8) (close-port . oU2fe7) (exit . oU2fdf) (command-line . oU2c98) (remove . oU2fda) (remv . oU2fd9) (remp . oU2fd8) (remq . oU2fd7) (partition . oU2fd6) (memv . oU2fd5) (memq . oU2fd4) (memp . oU2fd3) (member . oU2fd2) (exists . oU2fd1) (for-all . oU2fd0) (fold-right . oU2fcf) (fold-left . oU2fce) (find . oU2fcd) (filter . oU2fcc) (cons* . oU2fcb) (assv . oU2fca) (assq . oU2fc9) (assp . oU2fc8) (assoc . oU2fc7) (call-with-string-output-port . oU2fc6) (call-with-port . oU2fc5) (call-with-bytevector-output-port . oU2fc4) (bytevector->string . oU2fc3) (buffer-mode? . oU2fc2) (binary-port? . oU2fc1) (with-exception-handler . oU2fc0) (raise-continuable . oU2fbf) (raise . oU2fbe) (make-enumeration . oU2fbd) (enum-set=? . oU2fbc) (enum-set-universe . oU2fbb) (enum-set-union . oU2fba) (enum-set-subset? . oU2fb9) (enum-set-projection . oU2fb8) (enum-set-member? . oU2fb7) (enum-set-intersection . oU2fb6) (enum-set-indexer . oU2fb5) (enum-set-difference . oU2fb4) (enum-set-constructor . oU2fb3) (enum-set-complement . oU2fb2) (enum-set->list . oU2fb1) (who-condition? . oU29d4) (warning? . oU294c) (violation? . oU298b) (undefined-violation? . oU2a4b) (syntax-violation? . oU2a32) (syntax-violation-subform . oU2a36) (syntax-violation-form . oU2a34) (syntax-violation . oUe5e) (simple-conditions . oU2fb0) (serious-condition? . oU2961) (non-continuable-violation? . oU29eb) (message-condition? . oU2935) (make-who-condition . oU29d0) (make-warning . oU294a) (make-violation . oU2989) (make-undefined-violation . oU2a49) (make-syntax-violation . oU2a2c) (make-serious-condition . oU295f) (make-non-continuable-violation . oU29e9) (make-message-condition . oU2931) (make-lexical-violation . oU2a13) (make-irritants-condition . oU29b5) (make-implementation-restriction-violation . oU29fe) (make-error . oU2974) (make-assertion-violation . oU299e) (lexical-violation? . oU2a15) (irritants-condition? . oU29b9) (implementation-restriction-violation? . oU2a00) (error? . oU2976) (condition-who . oU29d6) (condition-predicate . oU2faf) (condition-message . oU2937) (condition-irritants . oU29bb) (condition-accessor . oU2fae) (condition . oU2fad) (assertion-violation? . oU29a0) (condition? . oU2fac) (utf32->string . oU2fab) (utf16->string . oU2faa) (utf8->string . oU2fa9) (uint-list->bytevector . oU2fa8) (u8-list->bytevector . oU2fa7) (string->utf8 . oU2fa6) (string->utf32 . oU2fa5) (string->utf16 . oU2fa4) (sint-list->bytevector . oU2fa3) (native-endianness . oU2fa2) (bytevector? . oU2fa1) (bytevector=? . oU2fa0) (bytevector-uint-set! . oU2f9f) (bytevector-uint-ref . oU2f9e) (bytevector-u8-set! . oU2f9d) (bytevector-u8-ref . oU2f9c) (bytevector-u64-set! . oU2f9b) (bytevector-u64-ref . oU2f9a) (bytevector-u64-native-set! . oU2f99) (bytevector-u64-native-ref . oU2f98) (bytevector-u32-set! . oU2f97) (bytevector-u32-ref . oU2f96) (bytevector-u32-native-set! . oU2f95) (bytevector-u32-native-ref . oU2f94) (bytevector-u16-set! . oU2f93) (bytevector-u16-ref . oU2f92) (bytevector-u16-native-set! . oU2f91) (bytevector-u16-native-ref . oU2f90) (bytevector-sint-set! . oU2f8f) (bytevector-sint-ref . oU2f8e) (bytevector-s8-set! . oU2f8d) (bytevector-s8-ref . oU2f8c) (bytevector-s64-set! . oU2f8b) (bytevector-s64-ref . oU2f8a) (bytevector-s64-native-set! . oU2f89) (bytevector-s64-native-ref . oU2f88) (bytevector-s32-set! . oU2f87) (bytevector-s32-ref . oU2f86) (bytevector-s32-native-set! . oU2f85) (bytevector-s32-native-ref . oU2f84) (bytevector-s16-set! . oU2f83) (bytevector-s16-ref . oU2f82) (bytevector-s16-native-set! . oU2f81) (bytevector-s16-native-ref . oU2f80) (bytevector-length . oU2f7f) (bytevector-ieee-single-ref . oU2f7e) (bytevector-ieee-single-set! . oU2f7d) (bytevector-ieee-single-native-set! . oU2f7c) (bytevector-ieee-single-native-ref . oU2f7b) (bytevector-ieee-double-set! . oU2f7a) (bytevector-ieee-double-ref . oU2f79) (bytevector-ieee-double-native-set! . oU2f78) (bytevector-ieee-double-native-ref . oU2f77) (bytevector-fill! . oU2f76) (bytevector-copy! . oU2f75) (bytevector-copy . oU2f74) (bytevector->uint-list . oU2f73) (bytevector->u8-list . oU2f72) (bytevector->sint-list . oU2f71) (no-nans-violation? . oU2b89) (no-infinities-violation? . oU2b74) (make-no-nans-violation . oU2b87) (make-no-infinities-violation . oU2b72) (real->flonum . oU2f70) (flzero? . oU2f6f) (fltruncate . oU2f6e) (fltan . oU2f6d) (flsqrt . oU2f6c) (flsin . oU2f6b) (flround . oU2f6a) (flpositive? . oU2f69) (flonum? . oU2f68) (flodd? . oU2f67) (flnumerator . oU2f66) (flnegative? . oU2f65) (flnan? . oU2f64) (flmod0 . oU2f63) (flmod . oU2f62) (flmin . oU2f61) (flmax . oU2f60) (fllog . oU2f5f) (flinteger? . oU2f5e) (flinfinite? . oU2f5d) (flfloor . oU2f5c) (flfinite? . oU2f5b) (flexpt . oU2f5a) (flexp . oU2f59) (fleven? . oU2f58) (fldiv0-and-mod0 . oU2f57) (fldiv0 . oU2f56) (fldiv-and-mod . oU2f55) (fldiv . oU2f54) (fldenominator . oU2f53) (flcos . oU2f52) (flceiling . oU2f51) (flatan . oU2f50) (flasin . oU2f4f) (flacos . oU2f4e) (flabs . oU2f4d) (fl>? . oU2f4c) (fl>=? . oU2f4b) (fl=? . oU2f4a) (fl<? . oU2f49) (fl<=? . oU2f48) (fl/ . oU2f47) (fl- . oU2f46) (fl+ . oU2f45) (fl* . oU2f44) (fixnum->flonum . oU2f43) (fxzero? . oU2f42) (fxxor . oU2f41) (fxrotate-bit-field . oU2f40) (fxreverse-bit-field . oU2f3f) (fxpositive? . oU2f3e) (fxodd? . oU2f3d) (fxnot . oU2f3c) (fxnegative? . oU2f3b) (fxmod0 . oU2f3a) (fxmod . oU2f39) (fxmin . oU2f38) (fxmax . oU2f37) (fxlength . oU2f36) (fxior . oU2f35) (fxif . oU2f34) (fxfirst-bit-set . oU2f33) (fxeven? . oU2f32) (fxdiv0-and-mod0 . oU2f31) (fxdiv0 . oU2f30) (fxdiv-and-mod . oU2f2f) (fxdiv . oU2f2e) (fxcopy-bit-field . oU2f2d) (fxcopy-bit . oU2f2c) (fxbit-set? . oU2f2b) (fxbit-field . oU2f2a) (fxbit-count . oU2f29) (fxarithmetic-shift-right . oU2f28) (fxarithmetic-shift-left . oU2f27) (fxarithmetic-shift . oU2f26) (fxand . oU2f25) (fx>? . oU2f24) (fx>=? . oU2f23) (fx=? . oU2f22) (fx<? . oU2f21) (fx<=? . oU2f20) (fx-/carry . oU2f1f) (fx- . oU2f1e) (fx+/carry . oU2f1d) (fx+ . oU2f1c) (fx*/carry . oU2f1b) (fx* . oU2f1a) (greatest-fixnum . oU2f19) (least-fixnum . oU2f18) (fixnum-width . oU2f17) (fixnum? . oU2f16) (bitwise-rotate-bit-field . oU2f15) (bitwise-reverse-bit-field . oU2f14) (bitwise-length . oU2f13) (bitwise-if . oU2f12) (bitwise-first-bit-set . oU2f11) (bitwise-copy-bit-field . oU2f10) (bitwise-copy-bit . oU2f0f) (bitwise-bit-set? . oU2f0e) (bitwise-bit-field . oU2f0d) (bitwise-bit-count . oU2f0c) (bitwise-xor . oU2f0b) (bitwise-ior . oU2f0a) (bitwise-and . oU2f09) (bitwise-not . oU2f08) (bitwise-arithmetic-shift-right . oU2f07) (bitwise-arithmetic-shift-left . oU2f06) (bitwise-arithmetic-shift . oU2f05) (zero? . oU2f04) (vector? . oU2f03) (vector-set! . oU2f02) (vector-ref . oU2f01) (vector-map . oU2f00) (vector-length . oU2eff) (vector-for-each . oU2efe) (vector-fill! . oU2efd) (vector->list . oU2efc) (vector . oU2efb) (values . oU2efa) (truncate . oU2ef9) (tan . oU2ef8) (symbol? . oU2ef7) (symbol=? . oU2ef6) (symbol->string . oU2ef5) (substring . oU2ef4) (string? . oU2ef3) (string>? . oU2ef2) (string>=? . oU2ef1) (string=? . oU2ef0) (string<? . oU2eef) (string<=? . oU2eee) (string-ref . oU2eed) (string-length . oU2eec) (string-for-each . oU2eeb) (string-copy . oU2eea) (string-append . oU2ee9) (string->symbol . oU2ee8) (string->number . oU2ee7) (string->list . oU2ee6) (string . oU2ee5) (sqrt . oU2ee4) (sin . oU2ee3) (round . oU2ee2) (reverse . oU2ee1) (real? . oU2ee0) (real-valued? . oU2edf) (real-part . oU2ede) (rationalize . oU2edd) (rational? . oU2edc) (rational-valued? . oU2edb) (procedure? . oU2eda) (positive? . oU2ed9) (pair? . oU2ed8) (odd? . oU2ed7) (numerator . oU2ed6) (number? . oU2ed5) (number->string . oU2ed4) (null? . oU2ed3) (not . oU2ed2) (negative? . oU2ed1) (nan? . oU2ed0) (min . oU2ecf) (max . oU2ece) (map . oU2ecd) (make-vector . oU2ecc) (make-string . oU2ecb) (make-rectangular . oU2eca) (make-polar . oU2ec9) (magnitude . oU2ec8) (log . oU2ec7) (list? . oU2ec6) (list-tail . oU2ec5) (list-ref . oU2ec4) (list->vector . oU2ec3) (list->string . oU2ec2) (list . oU2ec1) (length . oU2ec0) (lcm . oU2ebf) (integer? . oU2ebe) (integer-valued? . oU2ebd) (integer->char . oU2ebc) (infinite? . oU2ebb) (inexact? . oU2eba) (inexact . oU2eb9) (imag-part . oU2eb8) (gcd . oU2eb7) (for-each . oU2eb6) (floor . oU2eb5) (finite? . oU2eb4) (expt . oU2eb3) (exp . oU2eb2) (exact? . oU2eb1) (exact-integer-sqrt . oU2eb0) (exact . oU2eaf) (even? . oU2eae) (error . oU2ead) (eqv? . oU2eac) (equal? . oU2eab) (eq? . oU2eaa) (dynamic-wind . oU2ea9) (div0-and-mod0 . oU2ea8) (mod0 . oU2ea7) (div0 . oU2ea6) (div-and-mod . oU2ea5) (mod . oU2ea4) (div . oU2ea3) (denominator . oU2ea2) (cos . oU2ea1) (cons . oU2ea0) (complex? . oU2e9f) (char? . oU2e9e) (char>? . oU2e9d) (char>=? . oU2e9c) (char=? . oU2e9b) (char<? . oU2e9a) (char<=? . oU2e99) (char->integer . oU2e98) (ceiling . oU2e97) (call-with-values . oU2e96) (call/cc . oU2e95) (call-with-current-continuation . oU2e94) (cddddr . oU2e93) (cdddar . oU2e92) (cddadr . oU2e91) (cddaar . oU2e90) (cdaddr . oU2e8f) (cdadar . oU2e8e) (cdaadr . oU2e8d) (cdaaar . oU2e8c) (cadddr . oU2e8b) (caddar . oU2e8a) (cadadr . oU2e89) (cadaar . oU2e88) (caaddr . oU2e87) (caadar . oU2e86) (caaadr . oU2e85) (caaaar . oU2e84) (cdddr . oU2e83) (cddar . oU2e82) (cdadr . oU2e81) (cdaar . oU2e80) (caddr . oU2e7f) (cadar . oU2e7e) (caadr . oU2e7d) (caaar . oU2e7c) (cddr . oU2e7b) (cdar . oU2e7a) (cadr . oU2e79) (caar . oU2e78) (cdr . oU2e77) (car . oU2e76) (boolean? . oU2e75) (boolean=? . oU2e74) (atan . oU2e73) (assertion-violation . oU2e72) (asin . oU2e71) (apply . oU2e70) (append . oU2e6f) (angle . oU2e6e) (acos . oU2e6d) (abs . oU2e6c) (/ . oU2e6b) (* . oU2e6a) (- . oU2e69) (+ . oU2e68) (>= . oU2e67) (> . oU2e66) (= . oU2e65) (<= . oU2e64) (< . oU2e63) (&no-nans . oU2e61) (&no-infinities . oU2e60) (&i/o-encoding . oU2e5f) (&i/o-decoding . oU2e5e) (&i/o-port . oU2e5d) (&i/o-file-does-not-exist . oU2e5c) (&i/o-file-already-exists . oU2e5b) (&i/o-file-is-read-only . oU2e5a) (&i/o-file-protection . oU2e59) (&i/o-filename . oU2e58) (&i/o-invalid-position . oU2e57) (&i/o-write . oU2e56) (&i/o-read . oU2e55) (&i/o . oU2e54) (&undefined . oU2e53) (&syntax . oU2e52) (&lexical . oU2e51) (&implementation-restriction . oU2e50) (&non-continuable . oU2e4f) (&who . oU2e4e) (&irritants . oU2e4d) (&assertion . oU2e4c) (&violation . oU2e4b) (&error . oU2e4a) (&serious . oU2e49) (&warning . oU2e48) (&message . oU2e47) (&condition . oU2e46) (define-condition-type . oU2e45) (define-enumeration . oU2e44) (define-record-type . oU2e43) (parent-rtd . oU2e42) (nongenerative . oU2e41) (opaque . oU2e40) (sealed . oU2e3f) (protocol . oU2e3e) (parent . oU2e3d) (immutable . oU2e3c) (mutable . oU2e3b) (fields . oU2e3a) (error-handling-mode . oU2e39) (file-options . oU2e38) (buffer-mode . oU2e37) (eol-style . oU2e36) (guard . oU2e35) (unsyntax-splicing . oU2e32) (unsyntax . oU2e31) (unquote-splicing . oU2e30) (unquote . oU2e2f) (_ . oU2e2e) (else . oU2e2d) (=> . oU2e2c) (... . oU2e2b) (assert . oU2e2a) (endianness . oU2e29) (do . oU2e26) (cond . oU2e25) (let* . oU2e24) (let*-values . oU2e23) (let-values . oU2e22) (identifier-syntax . oU2e21) (with-syntax . oU2e20) (quasisyntax . oU2e1f) (quasiquote . oU2e1e) (syntax-rules . oU2e1d) (record-constructor-descriptor . oU2e1a) (record-type-descriptor . oU2e19) (case . oU2e18) (unless . oU2e16) (when . oU2e15) (or . oU2e14) (and . oU2e13) (if . oU2e12) (let . oU2e11) (letrec* . oU2e10) (letrec . oU2e0f) (case-lambda . oU2e0d) (lambda . oU2e0c) (syntax . oU2e0b) (syntax-case . oU2e0a) (quote . oU2e09) (letrec-syntax . oU2e07) (let-syntax . oU2e06) (set! . oU2e05) (begin . oU2e03) (define-syntax . oU2e01) (define . oU2e00)) '() values values '#f '#f '#t '#f) (oU98c@oU7d8@install-library 'oU3133 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . oUe3a) (quotient . oU2fe6) (null-environment . oUe38) (remainder . oU2fe5) (modulo . oU2fe4) (inexact->exact . oU2fe3) (force . oU2fe2) (exact->inexact . oU2fe1) (make-promise . oU2fe0) (delay . oU2e28)) '() values values '#f '#f '#t '#f) (oU98c@oU7d8@install-library 'oU3134 '(rnrs control) '(6) '() '() '() '((do . oU2e26) (unless . oU2e16) (when . oU2e15) (case-lambda . oU2e0d)) '() values values '#f '#f '#t '#f) (oU98c@oU7d8@install-library 'oU3135 '(rnrs eval) '(6) '() '() '() '((eval . oUe3e) (environment . oUe36)) '() values values '#f '#f '#t '#f) (oU98c@oU7d8@install-library 'oU3136 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . oU2fdc) (set-car! . oU2fdb)) '() values values '#f '#f '#t '#f) (oU98c@oU7d8@install-library 'oU3137 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . oU2fde) (string-set! . oU2fdd)) '() values values '#f '#f '#t '#f) (oU98c@oU7d8@install-library 'oU3138 '(rnrs programs) '(6) '() '() '() '((exit . oU2fdf) (command-line . oU2c98)) '() values values '#f '#f '#t '#f) (oU98c@oU7d8@install-library 'oU3139 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . oUba9) (identifier? . oUe60) (generate-temporaries . oUe4c) (free-identifier=? . oUe4e) (syntax->datum . oUe64) (datum->syntax . oUe62) (bound-identifier=? . oUe50) (syntax-violation . oUe5e) (unsyntax-splicing . oU2e32) (unsyntax . oU2e31) (_ . oU2e2e) (... . oU2e2b) (with-syntax . oU2e20) (quasisyntax . oU2e1f) (syntax . oU2e0b) (syntax-case . oU2e0a)) '() values values '#f '#f '#t '#f) (oU98c@oU7d8@install-library 'oU313a '(rnrs files) '(6) '() '() '() '((delete-file . oU304f) (file-exists? . oU304e) (make-i/o-write-error . oU2a88) (make-i/o-read-error . oU2a73) (make-i/o-port-error . oU2b29) (make-i/o-invalid-position-error . oU2a9f) (make-i/o-filename-error . oU2aba) (make-i/o-file-protection-error . oU2ad3) (make-i/o-file-is-read-only-error . oU2ae8) (make-i/o-file-does-not-exist-error . oU2b12) (make-i/o-file-already-exists-error . oU2afd) (make-i/o-error . oU2a5e) (i/o-write-error? . oU2a8a) (i/o-read-error? . oU2a75) (i/o-port-error? . oU2b2d) (i/o-invalid-position-error? . oU2aa3) (i/o-filename-error? . oU2abe) (i/o-file-protection-error? . oU2ad5) (i/o-file-is-read-only-error? . oU2aea) (i/o-file-does-not-exist-error? . oU2b14) (i/o-file-already-exists-error? . oU2aff) (i/o-error? . oU2a60) (i/o-error-position . oU2aa5) (i/o-error-port . oU2b2f) (i/o-error-filename . oU2ac0) (&i/o-port . oU2e5d) (&i/o-file-does-not-exist . oU2e5c) (&i/o-file-already-exists . oU2e5b) (&i/o-file-is-read-only . oU2e5a) (&i/o-file-protection . oU2e59) (&i/o-filename . oU2e58) (&i/o-invalid-position . oU2e57) (&i/o-write . oU2e56) (&i/o-read . oU2e55) (&i/o . oU2e54)) '() values values '#f '#f '#t '#f) (oU98c@oU7d8@install-library 'oU313b '(rnrs sorting) '(6) '() '() '() '((vector-sort! . oU304d) (vector-sort . oU304c) (list-sort . oU304b)) '() values values '#f '#f '#t '#f) (oU98c@oU7d8@install-library 'oU313c '(rnrs base) '(6) '() '() '() '((zero? . oU2f04) (vector? . oU2f03) (vector-set! . oU2f02) (vector-ref . oU2f01) (vector-map . oU2f00) (vector-length . oU2eff) (vector-for-each . oU2efe) (vector-fill! . oU2efd) (vector->list . oU2efc) (vector . oU2efb) (values . oU2efa) (truncate . oU2ef9) (tan . oU2ef8) (symbol? . oU2ef7) (symbol=? . oU2ef6) (symbol->string . oU2ef5) (substring . oU2ef4) (string? . oU2ef3) (string>? . oU2ef2) (string>=? . oU2ef1) (string=? . oU2ef0) (string<? . oU2eef) (string<=? . oU2eee) (string-ref . oU2eed) (string-length . oU2eec) (string-for-each . oU2eeb) (string-copy . oU2eea) (string-append . oU2ee9) (string->symbol . oU2ee8) (string->number . oU2ee7) (string->list . oU2ee6) (string . oU2ee5) (sqrt . oU2ee4) (sin . oU2ee3) (round . oU2ee2) (reverse . oU2ee1) (real? . oU2ee0) (real-valued? . oU2edf) (real-part . oU2ede) (rationalize . oU2edd) (rational? . oU2edc) (rational-valued? . oU2edb) (procedure? . oU2eda) (positive? . oU2ed9) (pair? . oU2ed8) (odd? . oU2ed7) (numerator . oU2ed6) (number? . oU2ed5) (number->string . oU2ed4) (null? . oU2ed3) (not . oU2ed2) (negative? . oU2ed1) (nan? . oU2ed0) (min . oU2ecf) (max . oU2ece) (map . oU2ecd) (make-vector . oU2ecc) (make-string . oU2ecb) (make-rectangular . oU2eca) (make-polar . oU2ec9) (magnitude . oU2ec8) (log . oU2ec7) (list? . oU2ec6) (list-tail . oU2ec5) (list-ref . oU2ec4) (list->vector . oU2ec3) (list->string . oU2ec2) (list . oU2ec1) (length . oU2ec0) (lcm . oU2ebf) (integer? . oU2ebe) (integer-valued? . oU2ebd) (integer->char . oU2ebc) (infinite? . oU2ebb) (inexact? . oU2eba) (inexact . oU2eb9) (imag-part . oU2eb8) (gcd . oU2eb7) (for-each . oU2eb6) (floor . oU2eb5) (finite? . oU2eb4) (expt . oU2eb3) (exp . oU2eb2) (exact? . oU2eb1) (exact-integer-sqrt . oU2eb0) (exact . oU2eaf) (even? . oU2eae) (error . oU2ead) (eqv? . oU2eac) (equal? . oU2eab) (eq? . oU2eaa) (dynamic-wind . oU2ea9) (div0-and-mod0 . oU2ea8) (mod0 . oU2ea7) (div0 . oU2ea6) (div-and-mod . oU2ea5) (mod . oU2ea4) (div . oU2ea3) (denominator . oU2ea2) (cos . oU2ea1) (cons . oU2ea0) (complex? . oU2e9f) (char? . oU2e9e) (char>? . oU2e9d) (char>=? . oU2e9c) (char=? . oU2e9b) (char<? . oU2e9a) (char<=? . oU2e99) (char->integer . oU2e98) (ceiling . oU2e97) (call-with-values . oU2e96) (call/cc . oU2e95) (call-with-current-continuation . oU2e94) (cddddr . oU2e93) (cdddar . oU2e92) (cddadr . oU2e91) (cddaar . oU2e90) (cdaddr . oU2e8f) (cdadar . oU2e8e) (cdaadr . oU2e8d) (cdaaar . oU2e8c) (cadddr . oU2e8b) (caddar . oU2e8a) (cadadr . oU2e89) (cadaar . oU2e88) (caaddr . oU2e87) (caadar . oU2e86) (caaadr . oU2e85) (caaaar . oU2e84) (cdddr . oU2e83) (cddar . oU2e82) (cdadr . oU2e81) (cdaar . oU2e80) (caddr . oU2e7f) (cadar . oU2e7e) (caadr . oU2e7d) (caaar . oU2e7c) (cddr . oU2e7b) (cdar . oU2e7a) (cadr . oU2e79) (caar . oU2e78) (cdr . oU2e77) (car . oU2e76) (boolean? . oU2e75) (boolean=? . oU2e74) (atan . oU2e73) (assertion-violation . oU2e72) (asin . oU2e71) (apply . oU2e70) (append . oU2e6f) (angle . oU2e6e) (acos . oU2e6d) (abs . oU2e6c) (/ . oU2e6b) (* . oU2e6a) (- . oU2e69) (+ . oU2e68) (>= . oU2e67) (> . oU2e66) (= . oU2e65) (<= . oU2e64) (< . oU2e63) (unquote-splicing . oU2e30) (unquote . oU2e2f) (_ . oU2e2e) (else . oU2e2d) (=> . oU2e2c) (... . oU2e2b) (assert . oU2e2a) (cond . oU2e25) (let* . oU2e24) (let*-values . oU2e23) (let-values . oU2e22) (identifier-syntax . oU2e21) (quasiquote . oU2e1e) (syntax-rules . oU2e1d) (case . oU2e18) (or . oU2e14) (and . oU2e13) (if . oU2e12) (let . oU2e11) (letrec* . oU2e10) (letrec . oU2e0f) (lambda . oU2e0c) (quote . oU2e09) (letrec-syntax . oU2e07) (let-syntax . oU2e06) (set! . oU2e05) (begin . oU2e03) (define-syntax . oU2e01) (define . oU2e00)) '() values values '#f '#f '#t '#f) (oU98c@oU7d8@install-library 'oU313d '(rnrs lists) '(6) '() '() '() '((remove . oU2fda) (remv . oU2fd9) (remp . oU2fd8) (remq . oU2fd7) (partition . oU2fd6) (memv . oU2fd5) (memq . oU2fd4) (memp . oU2fd3) (member . oU2fd2) (exists . oU2fd1) (for-all . oU2fd0) (fold-right . oU2fcf) (fold-left . oU2fce) (find . oU2fcd) (filter . oU2fcc) (cons* . oU2fcb) (assv . oU2fca) (assq . oU2fc9) (assp . oU2fc8) (assoc . oU2fc7)) '() values values '#f '#f '#t '#f) (oU98c@oU7d8@install-library 'oU313e '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . oU3035) (call-with-input-file . oU3034) (write-char . oU3033) (write . oU3032) (with-output-to-file . oU3031) (with-input-from-file . oU3030) (read-char . oU302f) (read . oU302e) (peek-char . oU302d) (open-output-file . oU302c) (open-input-file . oU302b) (newline . oU302a) (display . oU3029) (close-output-port . oU3028) (close-input-port . oU3027) (eof-object? . oU3026) (eof-object . oU3025) (current-error-port . oU3024) (current-output-port . oU3023) (current-input-port . oU3022) (output-port? . oU3021) (input-port? . oU3020) (make-i/o-write-error . oU2a88) (make-i/o-read-error . oU2a73) (make-i/o-port-error . oU2b29) (make-i/o-invalid-position-error . oU2a9f) (make-i/o-filename-error . oU2aba) (make-i/o-file-protection-error . oU2ad3) (make-i/o-file-is-read-only-error . oU2ae8) (make-i/o-file-does-not-exist-error . oU2b12) (make-i/o-file-already-exists-error . oU2afd) (make-i/o-error . oU2a5e) (i/o-write-error? . oU2a8a) (i/o-read-error? . oU2a75) (i/o-port-error? . oU2b2d) (i/o-invalid-position-error? . oU2aa3) (i/o-filename-error? . oU2abe) (i/o-file-protection-error? . oU2ad5) (i/o-file-is-read-only-error? . oU2aea) (i/o-file-does-not-exist-error? . oU2b14) (i/o-file-already-exists-error? . oU2aff) (i/o-error? . oU2a60) (i/o-error-position . oU2aa5) (i/o-error-port . oU2b2f) (i/o-error-filename . oU2ac0) (&i/o-port . oU2e5d) (&i/o-file-does-not-exist . oU2e5c) (&i/o-file-already-exists . oU2e5b) (&i/o-file-is-read-only . oU2e5a) (&i/o-file-protection . oU2e59) (&i/o-filename . oU2e58) (&i/o-invalid-position . oU2e57) (&i/o-write . oU2e56) (&i/o-read . oU2e55) (&i/o . oU2e54)) '() values values '#f '#f '#t '#f) (oU98c@oU7d8@install-library 'oU313f '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . oU2ff6) (utf32->string . oU2fab) (utf16->string . oU2faa) (utf8->string . oU2fa9) (uint-list->bytevector . oU2fa8) (u8-list->bytevector . oU2fa7) (string->utf8 . oU2fa6) (string->utf32 . oU2fa5) (string->utf16 . oU2fa4) (sint-list->bytevector . oU2fa3) (native-endianness . oU2fa2) (bytevector? . oU2fa1) (bytevector=? . oU2fa0) (bytevector-uint-set! . oU2f9f) (bytevector-uint-ref . oU2f9e) (bytevector-u8-set! . oU2f9d) (bytevector-u8-ref . oU2f9c) (bytevector-u64-set! . oU2f9b) (bytevector-u64-ref . oU2f9a) (bytevector-u64-native-set! . oU2f99) (bytevector-u64-native-ref . oU2f98) (bytevector-u32-set! . oU2f97) (bytevector-u32-ref . oU2f96) (bytevector-u32-native-set! . oU2f95) (bytevector-u32-native-ref . oU2f94) (bytevector-u16-set! . oU2f93) (bytevector-u16-ref . oU2f92) (bytevector-u16-native-set! . oU2f91) (bytevector-u16-native-ref . oU2f90) (bytevector-sint-set! . oU2f8f) (bytevector-sint-ref . oU2f8e) (bytevector-s8-set! . oU2f8d) (bytevector-s8-ref . oU2f8c) (bytevector-s64-set! . oU2f8b) (bytevector-s64-ref . oU2f8a) (bytevector-s64-native-set! . oU2f89) (bytevector-s64-native-ref . oU2f88) (bytevector-s32-set! . oU2f87) (bytevector-s32-ref . oU2f86) (bytevector-s32-native-set! . oU2f85) (bytevector-s32-native-ref . oU2f84) (bytevector-s16-set! . oU2f83) (bytevector-s16-ref . oU2f82) (bytevector-s16-native-set! . oU2f81) (bytevector-s16-native-ref . oU2f80) (bytevector-length . oU2f7f) (bytevector-ieee-single-ref . oU2f7e) (bytevector-ieee-single-set! . oU2f7d) (bytevector-ieee-single-native-set! . oU2f7c) (bytevector-ieee-single-native-ref . oU2f7b) (bytevector-ieee-double-set! . oU2f7a) (bytevector-ieee-double-ref . oU2f79) (bytevector-ieee-double-native-set! . oU2f78) (bytevector-ieee-double-native-ref . oU2f77) (bytevector-fill! . oU2f76) (bytevector-copy! . oU2f75) (bytevector-copy . oU2f74) (bytevector->uint-list . oU2f73) (bytevector->u8-list . oU2f72) (bytevector->sint-list . oU2f71) (endianness . oU2e29)) '() values values '#f '#f '#t '#f) (oU98c@oU7d8@install-library 'oU3140 '(rnrs unicode) '(6) '() '() '() '((string-upcase . oU307d) (string-titlecase . oU307c) (string-normalize-nfkd . oU307b) (string-normalize-nfkc . oU307a) (string-normalize-nfd . oU3079) (string-normalize-nfc . oU3078) (string-foldcase . oU3077) (string-downcase . oU3076) (string-ci>? . oU3075) (string-ci>=? . oU3074) (string-ci=? . oU3073) (string-ci<? . oU3072) (string-ci<=? . oU3071) (char-whitespace? . oU3070) (char-upper-case? . oU306f) (char-title-case? . oU306e) (char-numeric? . oU306d) (char-lower-case? . oU306c) (char-general-category . oU306b) (char-upcase . oU306a) (char-titlecase . oU3069) (char-foldcase . oU3068) (char-downcase . oU3067) (char-ci>? . oU3066) (char-ci>=? . oU3065) (char-ci=? . oU3064) (char-ci<? . oU3063) (char-ci<=? . oU3062) (char-alphabetic? . oU3061)) '() values values '#f '#f '#t '#f) (oU98c@oU7d8@install-library 'oU3141 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . oU2fc0) (raise-continuable . oU2fbf) (raise . oU2fbe) (guard . oU2e35) (else . oU2e2d) (=> . oU2e2c)) '() values values '#f '#f '#t '#f) (oU98c@oU7d8@install-library 'oU3142 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . oU2f15) (bitwise-reverse-bit-field . oU2f14) (bitwise-length . oU2f13) (bitwise-if . oU2f12) (bitwise-first-bit-set . oU2f11) (bitwise-copy-bit-field . oU2f10) (bitwise-copy-bit . oU2f0f) (bitwise-bit-set? . oU2f0e) (bitwise-bit-field . oU2f0d) (bitwise-bit-count . oU2f0c) (bitwise-xor . oU2f0b) (bitwise-ior . oU2f0a) (bitwise-and . oU2f09) (bitwise-not . oU2f08) (bitwise-arithmetic-shift-right . oU2f07) (bitwise-arithmetic-shift-left . oU2f06) (bitwise-arithmetic-shift . oU2f05)) '() values values '#f '#f '#t '#f) (oU98c@oU7d8@install-library 'oU3143 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . oU2f42) (fxxor . oU2f41) (fxrotate-bit-field . oU2f40) (fxreverse-bit-field . oU2f3f) (fxpositive? . oU2f3e) (fxodd? . oU2f3d) (fxnot . oU2f3c) (fxnegative? . oU2f3b) (fxmod0 . oU2f3a) (fxmod . oU2f39) (fxmin . oU2f38) (fxmax . oU2f37) (fxlength . oU2f36) (fxior . oU2f35) (fxif . oU2f34) (fxfirst-bit-set . oU2f33) (fxeven? . oU2f32) (fxdiv0-and-mod0 . oU2f31) (fxdiv0 . oU2f30) (fxdiv-and-mod . oU2f2f) (fxdiv . oU2f2e) (fxcopy-bit-field . oU2f2d) (fxcopy-bit . oU2f2c) (fxbit-set? . oU2f2b) (fxbit-field . oU2f2a) (fxbit-count . oU2f29) (fxarithmetic-shift-right . oU2f28) (fxarithmetic-shift-left . oU2f27) (fxarithmetic-shift . oU2f26) (fxand . oU2f25) (fx>? . oU2f24) (fx>=? . oU2f23) (fx=? . oU2f22) (fx<? . oU2f21) (fx<=? . oU2f20) (fx-/carry . oU2f1f) (fx- . oU2f1e) (fx+/carry . oU2f1d) (fx+ . oU2f1c) (fx*/carry . oU2f1b) (fx* . oU2f1a) (greatest-fixnum . oU2f19) (least-fixnum . oU2f18) (fixnum-width . oU2f17) (fixnum? . oU2f16)) '() values values '#f '#f '#t '#f) (oU98c@oU7d8@install-library 'oU3144 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . oU2b89) (no-infinities-violation? . oU2b74) (make-no-nans-violation . oU2b87) (make-no-infinities-violation . oU2b72) (real->flonum . oU2f70) (flzero? . oU2f6f) (fltruncate . oU2f6e) (fltan . oU2f6d) (flsqrt . oU2f6c) (flsin . oU2f6b) (flround . oU2f6a) (flpositive? . oU2f69) (flonum? . oU2f68) (flodd? . oU2f67) (flnumerator . oU2f66) (flnegative? . oU2f65) (flnan? . oU2f64) (flmod0 . oU2f63) (flmod . oU2f62) (flmin . oU2f61) (flmax . oU2f60) (fllog . oU2f5f) (flinteger? . oU2f5e) (flinfinite? . oU2f5d) (flfloor . oU2f5c) (flfinite? . oU2f5b) (flexpt . oU2f5a) (flexp . oU2f59) (fleven? . oU2f58) (fldiv0-and-mod0 . oU2f57) (fldiv0 . oU2f56) (fldiv-and-mod . oU2f55) (fldiv . oU2f54) (fldenominator . oU2f53) (flcos . oU2f52) (flceiling . oU2f51) (flatan . oU2f50) (flasin . oU2f4f) (flacos . oU2f4e) (flabs . oU2f4d) (fl>? . oU2f4c) (fl>=? . oU2f4b) (fl=? . oU2f4a) (fl<? . oU2f49) (fl<=? . oU2f48) (fl/ . oU2f47) (fl- . oU2f46) (fl+ . oU2f45) (fl* . oU2f44) (fixnum->flonum . oU2f43) (&no-nans . oU2e61) (&no-infinities . oU2e60)) '() values values '#f '#f '#t '#f) (oU98c@oU7d8@install-library 'oU3145 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . oU304a) (string-ci-hash . oU3049) (string-hash . oU3048) (equal-hash . oU3047) (hashtable-equivalence-function . oU3046) (make-hashtable . oU3045) (hashtable-hash-function . oU3044) (make-eqv-hashtable . oU3043) (make-eq-hashtable . oU3042) (hashtable? . oU3041) (hashtable-update! . oU3040) (hashtable-size . oU303f) (hashtable-set! . oU303e) (hashtable-ref . oU303d) (hashtable-mutable? . oU303c) (hashtable-keys . oU303b) (hashtable-entries . oU303a) (hashtable-delete! . oU3039) (hashtable-copy . oU3038) (hashtable-contains? . oU3037) (hashtable-clear! . oU3036)) '() values values '#f '#f '#t '#f) (oU98c@oU7d8@install-library 'oU3146 '(rnrs io ports) '(6) '() '() '() '((eof-object? . oU3026) (eof-object . oU3025) (current-error-port . oU3024) (current-output-port . oU3023) (current-input-port . oU3022) (output-port? . oU3021) (input-port? . oU3020) (utf-8-codec . oU301f) (utf-16-codec . oU301e) (transcoder-error-handling-mode . oU301d) (transcoder-eol-style . oU301c) (transcoder-codec . oU301b) (transcoded-port . oU301a) (textual-port? . oU3019) (string->bytevector . oU3018) (standard-output-port . oU3017) (standard-input-port . oU3016) (standard-error-port . oU3015) (set-port-position! . oU3014) (put-u8 . oU3013) (put-string . oU3012) (put-datum . oU3011) (put-char . oU3010) (put-bytevector . oU300f) (port? . oU300e) (port-transcoder . oU300d) (port-position . oU300c) (port-has-set-port-position!? . oU300b) (port-has-port-position? . oU300a) (port-eof? . oU3009) (output-port-buffer-mode . oU3008) (open-string-output-port . oU3007) (open-string-input-port . oU3006) (open-file-output-port . oU3005) (open-file-input/output-port . oU3004) (open-file-input-port . oU3003) (open-bytevector-output-port . oU3002) (open-bytevector-input-port . oU3001) (native-transcoder . oU3000) (native-eol-style . oU2fff) (make-transcoder . oU2ffe) (latin-1-codec . oU2ffd) (make-i/o-write-error . oU2a88) (make-i/o-read-error . oU2a73) (make-i/o-port-error . oU2b29) (make-i/o-invalid-position-error . oU2a9f) (make-i/o-filename-error . oU2aba) (make-i/o-file-protection-error . oU2ad3) (make-i/o-file-is-read-only-error . oU2ae8) (make-i/o-file-does-not-exist-error . oU2b12) (make-i/o-file-already-exists-error . oU2afd) (make-i/o-error . oU2a5e) (make-i/o-encoding-error . oU2b59) (make-i/o-decoding-error . oU2b42) (make-custom-textual-output-port . oU2ffc) (make-custom-textual-input/output-port . oU2ffb) (make-custom-textual-input-port . oU2ffa) (make-custom-binary-output-port . oU2ff9) (make-custom-binary-input/output-port . oU2ff8) (make-custom-binary-input-port . oU2ff7) (lookahead-u8 . oU2ff5) (lookahead-char . oU2ff4) (i/o-write-error? . oU2a8a) (i/o-read-error? . oU2a75) (i/o-port-error? . oU2b2d) (i/o-invalid-position-error? . oU2aa3) (i/o-filename-error? . oU2abe) (i/o-file-protection-error? . oU2ad5) (i/o-file-is-read-only-error? . oU2aea) (i/o-file-does-not-exist-error? . oU2b14) (i/o-file-already-exists-error? . oU2aff) (i/o-error? . oU2a60) (i/o-error-position . oU2aa5) (i/o-error-port . oU2b2f) (i/o-error-filename . oU2ac0) (i/o-encoding-error? . oU2b5d) (i/o-encoding-error-char . oU2b5f) (i/o-decoding-error? . oU2b44) (get-u8 . oU2ff3) (get-string-n! . oU2ff2) (get-string-n . oU2ff1) (get-string-all . oU2ff0) (get-line . oU2fef) (get-datum . oU2fee) (get-char . oU2fed) (get-bytevector-some . oU2fec) (get-bytevector-n! . oU2feb) (get-bytevector-n . oU2fea) (get-bytevector-all . oU2fe9) (flush-output-port . oU2fe8) (close-port . oU2fe7) (call-with-string-output-port . oU2fc6) (call-with-port . oU2fc5) (call-with-bytevector-output-port . oU2fc4) (bytevector->string . oU2fc3) (buffer-mode? . oU2fc2) (binary-port? . oU2fc1) (&i/o-encoding . oU2e5f) (&i/o-decoding . oU2e5e) (&i/o-port . oU2e5d) (&i/o-file-does-not-exist . oU2e5c) (&i/o-file-already-exists . oU2e5b) (&i/o-file-is-read-only . oU2e5a) (&i/o-file-protection . oU2e59) (&i/o-filename . oU2e58) (&i/o-invalid-position . oU2e57) (&i/o-write . oU2e56) (&i/o-read . oU2e55) (&i/o . oU2e54) (error-handling-mode . oU2e39) (file-options . oU2e38) (buffer-mode . oU2e37) (eol-style . oU2e36)) '() values values '#f '#f '#t '#f) (oU98c@oU7d8@install-library 'oU3147 '(rnrs enums) '(6) '() '() '() '((make-enumeration . oU2fbd) (enum-set=? . oU2fbc) (enum-set-universe . oU2fbb) (enum-set-union . oU2fba) (enum-set-subset? . oU2fb9) (enum-set-projection . oU2fb8) (enum-set-member? . oU2fb7) (enum-set-intersection . oU2fb6) (enum-set-indexer . oU2fb5) (enum-set-difference . oU2fb4) (enum-set-constructor . oU2fb3) (enum-set-complement . oU2fb2) (enum-set->list . oU2fb1) (define-enumeration . oU2e44)) '() values values '#f '#f '#t '#f) (oU98c@oU7d8@install-library 'oU3148 '(rnrs conditions) '(6) '() '() '() '((who-condition? . oU29d4) (warning? . oU294c) (violation? . oU298b) (undefined-violation? . oU2a4b) (syntax-violation? . oU2a32) (syntax-violation-subform . oU2a36) (syntax-violation-form . oU2a34) (syntax-violation . oUe5e) (simple-conditions . oU2fb0) (serious-condition? . oU2961) (non-continuable-violation? . oU29eb) (message-condition? . oU2935) (make-who-condition . oU29d0) (make-warning . oU294a) (make-violation . oU2989) (make-undefined-violation . oU2a49) (make-syntax-violation . oU2a2c) (make-serious-condition . oU295f) (make-non-continuable-violation . oU29e9) (make-message-condition . oU2931) (make-lexical-violation . oU2a13) (make-irritants-condition . oU29b5) (make-implementation-restriction-violation . oU29fe) (make-error . oU2974) (make-assertion-violation . oU299e) (lexical-violation? . oU2a15) (irritants-condition? . oU29b9) (implementation-restriction-violation? . oU2a00) (error? . oU2976) (condition-who . oU29d6) (condition-predicate . oU2faf) (condition-message . oU2937) (condition-irritants . oU29bb) (condition-accessor . oU2fae) (condition . oU2fad) (assertion-violation? . oU29a0) (condition? . oU2fac) (&undefined . oU2e53) (&syntax . oU2e52) (&lexical . oU2e51) (&implementation-restriction . oU2e50) (&non-continuable . oU2e4f) (&who . oU2e4e) (&irritants . oU2e4d) (&assertion . oU2e4c) (&violation . oU2e4b) (&error . oU2e4a) (&serious . oU2e49) (&warning . oU2e48) (&message . oU2e47) (&condition . oU2e46) (define-condition-type . oU2e45)) '() values values '#f '#f '#t '#f) (oU98c@oU7d8@install-library 'oU3149 '(rnrs records inspection) '(6) '() '() '() '((record? . oU3059) (record-type-uid . oU3058) (record-type-sealed? . oU3057) (record-type-parent . oU3056) (record-type-opaque? . oU3055) (record-type-name . oU3054) (record-type-generative? . oU3053) (record-type-field-names . oU3052) (record-rtd . oU3051) (record-field-mutable? . oU3050)) '() values values '#f '#f '#t '#f) (oU98c@oU7d8@install-library 'oU314a '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . oU3060) (record-predicate . oU305f) (record-mutator . oU305e) (record-constructor . oU305d) (record-accessor . oU305c) (make-record-type-descriptor . oU305b) (make-record-constructor-descriptor . oU305a)) '() values values '#f '#f '#t '#f) (oU98c@oU7d8@install-library 'oU314b '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . oU2e43) (parent-rtd . oU2e42) (nongenerative . oU2e41) (opaque . oU2e40) (sealed . oU2e3f) (protocol . oU2e3e) (parent . oU2e3d) (immutable . oU2e3c) (mutable . oU2e3b) (fields . oU2e3a) (record-constructor-descriptor . oU2e1a) (record-type-descriptor . oU2e19)) '() values values '#f '#f '#t '#f) (oU98c@oU7d8@install-library 'oU314c '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . oU2b8d) (&no-nans-rtd . oU2b8b) (&no-infinities-rcd . oU2b78) (&no-infinities-rtd . oU2b76) (&i/o-encoding-rcd . oU2b63) (&i/o-encoding-rtd . oU2b61) (&i/o-decoding-rcd . oU2b48) (&i/o-decoding-rtd . oU2b46) (&i/o-port-rcd . oU2b33) (&i/o-port-rtd . oU2b31) (&i/o-file-does-not-exist-rcd . oU2b18) (&i/o-file-does-not-exist-rtd . oU2b16) (&i/o-file-already-exists-rcd . oU2b03) (&i/o-file-already-exists-rtd . oU2b01) (&i/o-file-is-read-only-rcd . oU2aee) (&i/o-file-is-read-only-rtd . oU2aec) (&i/o-file-protection-rcd . oU2ad9) (&i/o-file-protection-rtd . oU2ad7) (&i/o-filename-rcd . oU2ac4) (&i/o-filename-rtd . oU2ac2) (&i/o-invalid-position-rcd . oU2aa9) (&i/o-invalid-position-rtd . oU2aa7) (&i/o-write-rcd . oU2a8e) (&i/o-write-rtd . oU2a8c) (&i/o-read-rcd . oU2a79) (&i/o-read-rtd . oU2a77) (&i/o-rcd . oU2a64) (&i/o-rtd . oU2a62) (&undefined-rcd . oU2a4f) (&undefined-rtd . oU2a4d) (&syntax-rcd . oU2a3a) (&syntax-rtd . oU2a38) (&lexical-rcd . oU2a19) (&lexical-rtd . oU2a17) (&implementation-restriction-rcd . oU2a04) (&implementation-restriction-rtd . oU2a02) (&non-continuable-rcd . oU29ef) (&non-continuable-rtd . oU29ed) (&who-rcd . oU29da) (&who-rtd . oU29d8) (&irritants-rcd . oU29bf) (&irritants-rtd . oU29bd) (&assertion-rcd . oU29a4) (&assertion-rtd . oU29a2) (&violation-rcd . oU298f) (&violation-rtd . oU298d) (&error-rcd . oU297a) (&error-rtd . oU2978) (&serious-rcd . oU2965) (&serious-rtd . oU2963) (&warning-rcd . oU2950) (&warning-rtd . oU294e) (&message-rcd . oU293b) (&message-rtd . oU2939) (&condition-rcd . oU28dc) (&condition-rtd . oU28da) (syntax-error . oUe5a) (syntax-dispatch . oUd7e) (pretty-print . oU312c) (eval-core . oU312b) (set-symbol-value! . oU312a) (symbol-value . oU3129) (gensym . oU3128) (void . oU3127) (load . oU2c9e) (interaction-environment . oUe6c) (char-ready? . oU3126) (regexp? . oU3125) (read-line . oU3124) (gensym-prefix-set! . oU3123) (ungensym . oU3122) (alist->eq-hash-table . oU3121) (assoc-ref . oU3120) (print . oU311f) (format . oU311e) (host-os . oU311d) (library-path . oU7b7) (standard-library-path . oU311c) (file-newer? . oU311b) (stat-mtime . oU311a) (write-to-file . oU3119) (file->list . oU3118) (file->string . oU3117) (digit->integer . oU3116) (call-with-string-input-port . oU3115) (call-with-string-io . oU3114) (string-split . oU3113) (bytevector-for-each . oU3112) (string->regexp . oU3111) (rxmatch . oU3110) (regexp-replace-all . oU310f) (hashtable-for-each . oU310e) (mosh-cache-dir . oU5a2) (call-process . oU310d) (local-tz-offset . oU310c) (microseconds . oU310b) (directory-list . oU310a) (set-current-directory! . oU3109) (expand-path . oU3108) (current-directory . oU3107) (%spawn . oU3106) (%waitpid . oU3105) (simple-struct-name . oU3104) (simple-struct-set! . oU3103) (simple-struct-ref . oU3102) (make-simple-struct . oU3101) (simple-struct? . oU3100) (pointer-ref-c-int64 . oU30ff) (pointer-ref-c-int32 . oU30fe) (pointer-ref-c-int16 . oU30fd) (pointer-ref-c-int8 . oU30fc) (pointer-ref-c-uint64 . oU30fb) (pointer-ref-c-uint32 . oU30fa) (pointer-ref-c-uint16 . oU30f9) (pointer-ref-c-uint8 . oU30f8) (pointer-set-c-uint64! . oU30f7) (pointer-set-c-uint32! . oU30f6) (pointer-set-c-uint16! . oU30f5) (pointer-set-c-uint8! . oU30f4) (pointer-set-c-int64! . oU30f3) (pointer-set-c-int32! . oU30f2) (pointer-set-c-int16! . oU30f1) (pointer-set-c-int8! . oU30f0) (pointer-set-c-pointer! . oU30ef) (pointer-set-c-double! . oU30ee) (pointer-set-c-float! . oU30ed) (pointer-set-c-long-long! . oU30ec) (pointer-set-c-long! . oU30eb) (pointer-set-c-int! . oU30ea) (pointer-set-c-short! . oU30e9) (pointer-set-c-char! . oU30e8) (pointer-ref-c-pointer . oU30e7) (pointer-ref-c-double . oU30e6) (pointer-ref-c-float . oU30e5) (pointer-ref-c-unsigned-long-long . oU30e4) (pointer-ref-c-signed-long-long . oU30e3) (pointer-ref-c-unsigned-long . oU30e2) (pointer-ref-c-signed-long . oU30e1) (pointer-ref-c-unsigned-int . oU30e0) (pointer-ref-c-signed-int . oU30df) (pointer-ref-c-unsigned-short . oU30de) (pointer-ref-c-signed-short . oU30dd) (pointer-ref-c-unsigned-char . oU30dc) (pointer-ref-c-signed-char . oU30db) (pointer->integer . oU30da) (integer->pointer . oU30d9) (pointer? . oU30d8) (shared-errno . oU30d7) (get-c-address . oU30d6) (obj->integer . oU30d5) (u8-list->c-procedure . oU30d4) (%ffi-free-c-callback-trampoline . oU30d3) (%ffi-make-c-callback-trampoline . oU30d2) (%ffi-free . oU30d1) (%ffi-malloc . oU30d0) (%ffi-supported? . oU30cf) (%ffi-pointer->string . oU30ce) (%ffi-call->string-or-zero . oU30cd) (%ffi-call->double . oU30cc) (%ffi-call->void* . oU30cb) (%ffi-call->void . oU30ca) (%ffi-call->char . oU30c9) (%ffi-call->int . oU30c8) (%ffi-lookup . oU30c7) (%ffi-open . oU30c6) (%fork . oU30c5) (%pipe . oU30c4) (p . oU30c3) (open-output-string . oU30c2) (get-output-string . oU30c1) (file-stat-ctime . oU30c0) (file-stat-atime . oU30bf) (file-stat-mtime . oU30be) (file-size-in-bytes . oU30bd) (file-writable? . oU30bc) (file-executable? . oU30bb) (file-readable? . oU30ba) (file-regular? . oU30b9) (file-symbolic-link? . oU30b8) (file-directory? . oU30b7) (create-symbolic-link . oU30b6) (rename-file . oU30b5) (delete-directory . oU30b4) (create-directory . oU30b3) (create-mosh-cache-dir . oU30b2) (get-environment-variables . oU30b1) (current-exception-handler . oU30b0) (get-environment-variable . oU30af) (join-wraps . oU30ae) (id->real-label . oU30ad) (same-marks? . oU30ac) (same-marks*? . oU30ab) (get-timeofday . oU30aa) (get-command-line . oU30a9) (sys-display . oU30a8) (whereis . oU30a7) (register . oU30a6) (vm-join! . oU30a5) (vm-set-value! . oU30a4) (vm? . oU30a3) (main-vm? . oU30a2) (vm-eval . oU30a1) (vm-self . oU30a0) (vm-start! . oU309f) (make-vm . oU309e) (mutex-try-lock! . oU309d) (mutex-unlock! . oU309c) (mutex-lock! . oU309b) (mutex? . oU309a) (make-mutex . oU3099) (condition-variable-notify-all! . oU3098) (condition-variable-notify! . oU3097) (condition-variable-wait! . oU3096) (make-condition-variable . oU3095) (mosh-executable-path . oU3094) (make-file-options . oU3093) (source-info . oU3092) (make-compiler-instruction . oU3091) (make-instruction . oU3090) (set-source-info! . oU308f) (bignum? . oU308e) (fast-equal? . oU308d) (fasl-read . oU308c) (fasl-write . oU308b) (time-usage . oU308a) (os-constant . oU3089) (disasm . oU3088) (make-parameter . oU5a0) (socket-port . oU3087) (socket-shutdown . oU3086) (socket-close . oU3085) (socket-send . oU3084) (socket-recv! . oU3083) (socket-recv . oU3082) (make-server-socket . oU3081) (make-client-socket . oU3080) (socket-accept . oU307f) (socket? . oU307e) (string-upcase . oU307d) (string-titlecase . oU307c) (string-normalize-nfkd . oU307b) (string-normalize-nfkc . oU307a) (string-normalize-nfd . oU3079) (string-normalize-nfc . oU3078) (string-foldcase . oU3077) (string-downcase . oU3076) (string-ci>? . oU3075) (string-ci>=? . oU3074) (string-ci=? . oU3073) (string-ci<? . oU3072) (string-ci<=? . oU3071) (char-whitespace? . oU3070) (char-upper-case? . oU306f) (char-title-case? . oU306e) (char-numeric? . oU306d) (char-lower-case? . oU306c) (char-general-category . oU306b) (char-upcase . oU306a) (char-titlecase . oU3069) (char-foldcase . oU3068) (char-downcase . oU3067) (char-ci>? . oU3066) (char-ci>=? . oU3065) (char-ci=? . oU3064) (char-ci<? . oU3063) (char-ci<=? . oU3062) (char-alphabetic? . oU3061) (make-variable-transformer . oUba9) (identifier? . oUe60) (generate-temporaries . oUe4c) (free-identifier=? . oUe4e) (syntax->datum . oUe64) (datum->syntax . oUe62) (bound-identifier=? . oUe50) (record-type-descriptor? . oU3060) (record-predicate . oU305f) (record-mutator . oU305e) (record-constructor . oU305d) (record-accessor . oU305c) (make-record-type-descriptor . oU305b) (make-record-constructor-descriptor . oU305a) (record? . oU3059) (record-type-uid . oU3058) (record-type-sealed? . oU3057) (record-type-parent . oU3056) (record-type-opaque? . oU3055) (record-type-name . oU3054) (record-type-generative? . oU3053) (record-type-field-names . oU3052) (record-rtd . oU3051) (record-field-mutable? . oU3050) (delete-file . oU304f) (file-exists? . oU304e) (vector-sort! . oU304d) (vector-sort . oU304c) (list-sort . oU304b) (symbol-hash . oU304a) (string-ci-hash . oU3049) (string-hash . oU3048) (equal-hash . oU3047) (hashtable-equivalence-function . oU3046) (make-hashtable . oU3045) (hashtable-hash-function . oU3044) (make-eqv-hashtable . oU3043) (make-eq-hashtable . oU3042) (hashtable? . oU3041) (hashtable-update! . oU3040) (hashtable-size . oU303f) (hashtable-set! . oU303e) (hashtable-ref . oU303d) (hashtable-mutable? . oU303c) (hashtable-keys . oU303b) (hashtable-entries . oU303a) (hashtable-delete! . oU3039) (hashtable-copy . oU3038) (hashtable-contains? . oU3037) (hashtable-clear! . oU3036) (call-with-output-file . oU3035) (call-with-input-file . oU3034) (write-char . oU3033) (write . oU3032) (with-output-to-file . oU3031) (with-input-from-file . oU3030) (read-char . oU302f) (read . oU302e) (peek-char . oU302d) (open-output-file . oU302c) (open-input-file . oU302b) (newline . oU302a) (display . oU3029) (close-output-port . oU3028) (close-input-port . oU3027) (eof-object? . oU3026) (eof-object . oU3025) (current-error-port . oU3024) (current-output-port . oU3023) (current-input-port . oU3022) (output-port? . oU3021) (input-port? . oU3020) (utf-8-codec . oU301f) (utf-16-codec . oU301e) (transcoder-error-handling-mode . oU301d) (transcoder-eol-style . oU301c) (transcoder-codec . oU301b) (transcoded-port . oU301a) (textual-port? . oU3019) (string->bytevector . oU3018) (standard-output-port . oU3017) (standard-input-port . oU3016) (standard-error-port . oU3015) (set-port-position! . oU3014) (put-u8 . oU3013) (put-string . oU3012) (put-datum . oU3011) (put-char . oU3010) (put-bytevector . oU300f) (port? . oU300e) (port-transcoder . oU300d) (port-position . oU300c) (port-has-set-port-position!? . oU300b) (port-has-port-position? . oU300a) (port-eof? . oU3009) (output-port-buffer-mode . oU3008) (open-string-output-port . oU3007) (open-string-input-port . oU3006) (open-file-output-port . oU3005) (open-file-input/output-port . oU3004) (open-file-input-port . oU3003) (open-bytevector-output-port . oU3002) (open-bytevector-input-port . oU3001) (native-transcoder . oU3000) (native-eol-style . oU2fff) (make-transcoder . oU2ffe) (latin-1-codec . oU2ffd) (make-i/o-write-error . oU2a88) (make-i/o-read-error . oU2a73) (make-i/o-port-error . oU2b29) (make-i/o-invalid-position-error . oU2a9f) (make-i/o-filename-error . oU2aba) (make-i/o-file-protection-error . oU2ad3) (make-i/o-file-is-read-only-error . oU2ae8) (make-i/o-file-does-not-exist-error . oU2b12) (make-i/o-file-already-exists-error . oU2afd) (make-i/o-error . oU2a5e) (make-i/o-encoding-error . oU2b59) (make-i/o-decoding-error . oU2b42) (make-custom-textual-output-port . oU2ffc) (make-custom-textual-input/output-port . oU2ffb) (make-custom-textual-input-port . oU2ffa) (make-custom-binary-output-port . oU2ff9) (make-custom-binary-input/output-port . oU2ff8) (make-custom-binary-input-port . oU2ff7) (make-bytevector . oU2ff6) (lookahead-u8 . oU2ff5) (lookahead-char . oU2ff4) (i/o-write-error? . oU2a8a) (i/o-read-error? . oU2a75) (i/o-port-error? . oU2b2d) (i/o-invalid-position-error? . oU2aa3) (i/o-filename-error? . oU2abe) (i/o-file-protection-error? . oU2ad5) (i/o-file-is-read-only-error? . oU2aea) (i/o-file-does-not-exist-error? . oU2b14) (i/o-file-already-exists-error? . oU2aff) (i/o-error? . oU2a60) (i/o-error-position . oU2aa5) (i/o-error-port . oU2b2f) (i/o-error-filename . oU2ac0) (i/o-encoding-error? . oU2b5d) (i/o-encoding-error-char . oU2b5f) (i/o-decoding-error? . oU2b44) (get-u8 . oU2ff3) (get-string-n! . oU2ff2) (get-string-n . oU2ff1) (get-string-all . oU2ff0) (get-line . oU2fef) (get-datum . oU2fee) (get-char . oU2fed) (get-bytevector-some . oU2fec) (get-bytevector-n! . oU2feb) (get-bytevector-n . oU2fea) (get-bytevector-all . oU2fe9) (flush-output-port . oU2fe8) (close-port . oU2fe7) (scheme-report-environment . oUe3a) (quotient . oU2fe6) (null-environment . oUe38) (remainder . oU2fe5) (modulo . oU2fe4) (inexact->exact . oU2fe3) (force . oU2fe2) (exact->inexact . oU2fe1) (make-promise . oU2fe0) (exit . oU2fdf) (command-line . oU2c98) (string-fill! . oU2fde) (string-set! . oU2fdd) (set-cdr! . oU2fdc) (set-car! . oU2fdb) (remove . oU2fda) (remv . oU2fd9) (remp . oU2fd8) (remq . oU2fd7) (partition . oU2fd6) (memv . oU2fd5) (memq . oU2fd4) (memp . oU2fd3) (member . oU2fd2) (exists . oU2fd1) (for-all . oU2fd0) (fold-right . oU2fcf) (fold-left . oU2fce) (find . oU2fcd) (filter . oU2fcc) (cons* . oU2fcb) (assv . oU2fca) (assq . oU2fc9) (assp . oU2fc8) (assoc . oU2fc7) (call-with-string-output-port . oU2fc6) (call-with-port . oU2fc5) (call-with-bytevector-output-port . oU2fc4) (bytevector->string . oU2fc3) (buffer-mode? . oU2fc2) (binary-port? . oU2fc1) (with-exception-handler . oU2fc0) (raise-continuable . oU2fbf) (raise . oU2fbe) (eval . oUe3e) (environment . oUe36) (make-enumeration . oU2fbd) (enum-set=? . oU2fbc) (enum-set-universe . oU2fbb) (enum-set-union . oU2fba) (enum-set-subset? . oU2fb9) (enum-set-projection . oU2fb8) (enum-set-member? . oU2fb7) (enum-set-intersection . oU2fb6) (enum-set-indexer . oU2fb5) (enum-set-difference . oU2fb4) (enum-set-constructor . oU2fb3) (enum-set-complement . oU2fb2) (enum-set->list . oU2fb1) (who-condition? . oU29d4) (warning? . oU294c) (violation? . oU298b) (undefined-violation? . oU2a4b) (syntax-violation? . oU2a32) (syntax-violation-subform . oU2a36) (syntax-violation-form . oU2a34) (syntax-violation . oUe5e) (simple-conditions . oU2fb0) (serious-condition? . oU2961) (non-continuable-violation? . oU29eb) (message-condition? . oU2935) (make-who-condition . oU29d0) (make-warning . oU294a) (make-violation . oU2989) (make-undefined-violation . oU2a49) (make-syntax-violation . oU2a2c) (make-serious-condition . oU295f) (make-non-continuable-violation . oU29e9) (make-message-condition . oU2931) (make-lexical-violation . oU2a13) (make-irritants-condition . oU29b5) (make-implementation-restriction-violation . oU29fe) (make-error . oU2974) (make-assertion-violation . oU299e) (lexical-violation? . oU2a15) (irritants-condition? . oU29b9) (implementation-restriction-violation? . oU2a00) (error? . oU2976) (condition-who . oU29d6) (condition-predicate . oU2faf) (condition-message . oU2937) (condition-irritants . oU29bb) (condition-accessor . oU2fae) (condition . oU2fad) (assertion-violation? . oU29a0) (condition? . oU2fac) (utf32->string . oU2fab) (utf16->string . oU2faa) (utf8->string . oU2fa9) (uint-list->bytevector . oU2fa8) (u8-list->bytevector . oU2fa7) (string->utf8 . oU2fa6) (string->utf32 . oU2fa5) (string->utf16 . oU2fa4) (sint-list->bytevector . oU2fa3) (native-endianness . oU2fa2) (bytevector? . oU2fa1) (bytevector=? . oU2fa0) (bytevector-uint-set! . oU2f9f) (bytevector-uint-ref . oU2f9e) (bytevector-u8-set! . oU2f9d) (bytevector-u8-ref . oU2f9c) (bytevector-u64-set! . oU2f9b) (bytevector-u64-ref . oU2f9a) (bytevector-u64-native-set! . oU2f99) (bytevector-u64-native-ref . oU2f98) (bytevector-u32-set! . oU2f97) (bytevector-u32-ref . oU2f96) (bytevector-u32-native-set! . oU2f95) (bytevector-u32-native-ref . oU2f94) (bytevector-u16-set! . oU2f93) (bytevector-u16-ref . oU2f92) (bytevector-u16-native-set! . oU2f91) (bytevector-u16-native-ref . oU2f90) (bytevector-sint-set! . oU2f8f) (bytevector-sint-ref . oU2f8e) (bytevector-s8-set! . oU2f8d) (bytevector-s8-ref . oU2f8c) (bytevector-s64-set! . oU2f8b) (bytevector-s64-ref . oU2f8a) (bytevector-s64-native-set! . oU2f89) (bytevector-s64-native-ref . oU2f88) (bytevector-s32-set! . oU2f87) (bytevector-s32-ref . oU2f86) (bytevector-s32-native-set! . oU2f85) (bytevector-s32-native-ref . oU2f84) (bytevector-s16-set! . oU2f83) (bytevector-s16-ref . oU2f82) (bytevector-s16-native-set! . oU2f81) (bytevector-s16-native-ref . oU2f80) (bytevector-length . oU2f7f) (bytevector-ieee-single-ref . oU2f7e) (bytevector-ieee-single-set! . oU2f7d) (bytevector-ieee-single-native-set! . oU2f7c) (bytevector-ieee-single-native-ref . oU2f7b) (bytevector-ieee-double-set! . oU2f7a) (bytevector-ieee-double-ref . oU2f79) (bytevector-ieee-double-native-set! . oU2f78) (bytevector-ieee-double-native-ref . oU2f77) (bytevector-fill! . oU2f76) (bytevector-copy! . oU2f75) (bytevector-copy . oU2f74) (bytevector->uint-list . oU2f73) (bytevector->u8-list . oU2f72) (bytevector->sint-list . oU2f71) (no-nans-violation? . oU2b89) (no-infinities-violation? . oU2b74) (make-no-nans-violation . oU2b87) (make-no-infinities-violation . oU2b72) (real->flonum . oU2f70) (flzero? . oU2f6f) (fltruncate . oU2f6e) (fltan . oU2f6d) (flsqrt . oU2f6c) (flsin . oU2f6b) (flround . oU2f6a) (flpositive? . oU2f69) (flonum? . oU2f68) (flodd? . oU2f67) (flnumerator . oU2f66) (flnegative? . oU2f65) (flnan? . oU2f64) (flmod0 . oU2f63) (flmod . oU2f62) (flmin . oU2f61) (flmax . oU2f60) (fllog . oU2f5f) (flinteger? . oU2f5e) (flinfinite? . oU2f5d) (flfloor . oU2f5c) (flfinite? . oU2f5b) (flexpt . oU2f5a) (flexp . oU2f59) (fleven? . oU2f58) (fldiv0-and-mod0 . oU2f57) (fldiv0 . oU2f56) (fldiv-and-mod . oU2f55) (fldiv . oU2f54) (fldenominator . oU2f53) (flcos . oU2f52) (flceiling . oU2f51) (flatan . oU2f50) (flasin . oU2f4f) (flacos . oU2f4e) (flabs . oU2f4d) (fl>? . oU2f4c) (fl>=? . oU2f4b) (fl=? . oU2f4a) (fl<? . oU2f49) (fl<=? . oU2f48) (fl/ . oU2f47) (fl- . oU2f46) (fl+ . oU2f45) (fl* . oU2f44) (fixnum->flonum . oU2f43) (fxzero? . oU2f42) (fxxor . oU2f41) (fxrotate-bit-field . oU2f40) (fxreverse-bit-field . oU2f3f) (fxpositive? . oU2f3e) (fxodd? . oU2f3d) (fxnot . oU2f3c) (fxnegative? . oU2f3b) (fxmod0 . oU2f3a) (fxmod . oU2f39) (fxmin . oU2f38) (fxmax . oU2f37) (fxlength . oU2f36) (fxior . oU2f35) (fxif . oU2f34) (fxfirst-bit-set . oU2f33) (fxeven? . oU2f32) (fxdiv0-and-mod0 . oU2f31) (fxdiv0 . oU2f30) (fxdiv-and-mod . oU2f2f) (fxdiv . oU2f2e) (fxcopy-bit-field . oU2f2d) (fxcopy-bit . oU2f2c) (fxbit-set? . oU2f2b) (fxbit-field . oU2f2a) (fxbit-count . oU2f29) (fxarithmetic-shift-right . oU2f28) (fxarithmetic-shift-left . oU2f27) (fxarithmetic-shift . oU2f26) (fxand . oU2f25) (fx>? . oU2f24) (fx>=? . oU2f23) (fx=? . oU2f22) (fx<? . oU2f21) (fx<=? . oU2f20) (fx-/carry . oU2f1f) (fx- . oU2f1e) (fx+/carry . oU2f1d) (fx+ . oU2f1c) (fx*/carry . oU2f1b) (fx* . oU2f1a) (greatest-fixnum . oU2f19) (least-fixnum . oU2f18) (fixnum-width . oU2f17) (fixnum? . oU2f16) (bitwise-rotate-bit-field . oU2f15) (bitwise-reverse-bit-field . oU2f14) (bitwise-length . oU2f13) (bitwise-if . oU2f12) (bitwise-first-bit-set . oU2f11) (bitwise-copy-bit-field . oU2f10) (bitwise-copy-bit . oU2f0f) (bitwise-bit-set? . oU2f0e) (bitwise-bit-field . oU2f0d) (bitwise-bit-count . oU2f0c) (bitwise-xor . oU2f0b) (bitwise-ior . oU2f0a) (bitwise-and . oU2f09) (bitwise-not . oU2f08) (bitwise-arithmetic-shift-right . oU2f07) (bitwise-arithmetic-shift-left . oU2f06) (bitwise-arithmetic-shift . oU2f05) (zero? . oU2f04) (vector? . oU2f03) (vector-set! . oU2f02) (vector-ref . oU2f01) (vector-map . oU2f00) (vector-length . oU2eff) (vector-for-each . oU2efe) (vector-fill! . oU2efd) (vector->list . oU2efc) (vector . oU2efb) (values . oU2efa) (truncate . oU2ef9) (tan . oU2ef8) (symbol? . oU2ef7) (symbol=? . oU2ef6) (symbol->string . oU2ef5) (substring . oU2ef4) (string? . oU2ef3) (string>? . oU2ef2) (string>=? . oU2ef1) (string=? . oU2ef0) (string<? . oU2eef) (string<=? . oU2eee) (string-ref . oU2eed) (string-length . oU2eec) (string-for-each . oU2eeb) (string-copy . oU2eea) (string-append . oU2ee9) (string->symbol . oU2ee8) (string->number . oU2ee7) (string->list . oU2ee6) (string . oU2ee5) (sqrt . oU2ee4) (sin . oU2ee3) (round . oU2ee2) (reverse . oU2ee1) (real? . oU2ee0) (real-valued? . oU2edf) (real-part . oU2ede) (rationalize . oU2edd) (rational? . oU2edc) (rational-valued? . oU2edb) (procedure? . oU2eda) (positive? . oU2ed9) (pair? . oU2ed8) (odd? . oU2ed7) (numerator . oU2ed6) (number? . oU2ed5) (number->string . oU2ed4) (null? . oU2ed3) (not . oU2ed2) (negative? . oU2ed1) (nan? . oU2ed0) (min . oU2ecf) (max . oU2ece) (map . oU2ecd) (make-vector . oU2ecc) (make-string . oU2ecb) (make-rectangular . oU2eca) (make-polar . oU2ec9) (magnitude . oU2ec8) (log . oU2ec7) (list? . oU2ec6) (list-tail . oU2ec5) (list-ref . oU2ec4) (list->vector . oU2ec3) (list->string . oU2ec2) (list . oU2ec1) (length . oU2ec0) (lcm . oU2ebf) (integer? . oU2ebe) (integer-valued? . oU2ebd) (integer->char . oU2ebc) (infinite? . oU2ebb) (inexact? . oU2eba) (inexact . oU2eb9) (imag-part . oU2eb8) (gcd . oU2eb7) (for-each . oU2eb6) (floor . oU2eb5) (finite? . oU2eb4) (expt . oU2eb3) (exp . oU2eb2) (exact? . oU2eb1) (exact-integer-sqrt . oU2eb0) (exact . oU2eaf) (even? . oU2eae) (error . oU2ead) (eqv? . oU2eac) (equal? . oU2eab) (eq? . oU2eaa) (dynamic-wind . oU2ea9) (div0-and-mod0 . oU2ea8) (mod0 . oU2ea7) (div0 . oU2ea6) (div-and-mod . oU2ea5) (mod . oU2ea4) (div . oU2ea3) (denominator . oU2ea2) (cos . oU2ea1) (cons . oU2ea0) (complex? . oU2e9f) (char? . oU2e9e) (char>? . oU2e9d) (char>=? . oU2e9c) (char=? . oU2e9b) (char<? . oU2e9a) (char<=? . oU2e99) (char->integer . oU2e98) (ceiling . oU2e97) (call-with-values . oU2e96) (call/cc . oU2e95) (call-with-current-continuation . oU2e94) (cddddr . oU2e93) (cdddar . oU2e92) (cddadr . oU2e91) (cddaar . oU2e90) (cdaddr . oU2e8f) (cdadar . oU2e8e) (cdaadr . oU2e8d) (cdaaar . oU2e8c) (cadddr . oU2e8b) (caddar . oU2e8a) (cadadr . oU2e89) (cadaar . oU2e88) (caaddr . oU2e87) (caadar . oU2e86) (caaadr . oU2e85) (caaaar . oU2e84) (cdddr . oU2e83) (cddar . oU2e82) (cdadr . oU2e81) (cdaar . oU2e80) (caddr . oU2e7f) (cadar . oU2e7e) (caadr . oU2e7d) (caaar . oU2e7c) (cddr . oU2e7b) (cdar . oU2e7a) (cadr . oU2e79) (caar . oU2e78) (cdr . oU2e77) (car . oU2e76) (boolean? . oU2e75) (boolean=? . oU2e74) (atan . oU2e73) (assertion-violation . oU2e72) (assertion-error . oUe58) (asin . oU2e71) (apply . oU2e70) (append . oU2e6f) (angle . oU2e6e) (acos . oU2e6d) (abs . oU2e6c) (/ . oU2e6b) (* . oU2e6a) (- . oU2e69) (+ . oU2e68) (>= . oU2e67) (> . oU2e66) (= . oU2e65) (<= . oU2e64) (< . oU2e63) (library . oU2e62) (&no-nans . oU2e61) (&no-infinities . oU2e60) (&i/o-encoding . oU2e5f) (&i/o-decoding . oU2e5e) (&i/o-port . oU2e5d) (&i/o-file-does-not-exist . oU2e5c) (&i/o-file-already-exists . oU2e5b) (&i/o-file-is-read-only . oU2e5a) (&i/o-file-protection . oU2e59) (&i/o-filename . oU2e58) (&i/o-invalid-position . oU2e57) (&i/o-write . oU2e56) (&i/o-read . oU2e55) (&i/o . oU2e54) (&undefined . oU2e53) (&syntax . oU2e52) (&lexical . oU2e51) (&implementation-restriction . oU2e50) (&non-continuable . oU2e4f) (&who . oU2e4e) (&irritants . oU2e4d) (&assertion . oU2e4c) (&violation . oU2e4b) (&error . oU2e4a) (&serious . oU2e49) (&warning . oU2e48) (&message . oU2e47) (&condition . oU2e46) (define-condition-type . oU2e45) (define-enumeration . oU2e44) (define-record-type . oU2e43) (parent-rtd . oU2e42) (nongenerative . oU2e41) (opaque . oU2e40) (sealed . oU2e3f) (protocol . oU2e3e) (parent . oU2e3d) (immutable . oU2e3c) (mutable . oU2e3b) (fields . oU2e3a) (error-handling-mode . oU2e39) (file-options . oU2e38) (buffer-mode . oU2e37) (eol-style . oU2e36) (guard . oU2e35) (trace-define . oU2e34) (trace-lambda . oU2e33) (unsyntax-splicing . oU2e32) (unsyntax . oU2e31) (unquote-splicing . oU2e30) (unquote . oU2e2f) (_ . oU2e2e) (else . oU2e2d) (=> . oU2e2c) (... . oU2e2b) (assert . oU2e2a) (endianness . oU2e29) (delay . oU2e28) (time . oU2e27) (do . oU2e26) (cond . oU2e25) (let* . oU2e24) (let*-values . oU2e23) (let-values . oU2e22) (identifier-syntax . oU2e21) (with-syntax . oU2e20) (quasisyntax . oU2e1f) (quasiquote . oU2e1e) (syntax-rules . oU2e1d) (include . oU2e1c) (define-struct . oU2e1b) (record-constructor-descriptor . oU2e1a) (record-type-descriptor . oU2e19) (case . oU2e18) (parameterize . oU2e17) (unless . oU2e16) (when . oU2e15) (or . oU2e14) (and . oU2e13) (if . oU2e12) (let . oU2e11) (letrec* . oU2e10) (letrec . oU2e0f) (type-descriptor . oU2e0e) (case-lambda . oU2e0d) (lambda . oU2e0c) (syntax . oU2e0b) (syntax-case . oU2e0a) (quote . oU2e09) (foreign-call . oU2e08) (letrec-syntax . oU2e07) (let-syntax . oU2e06) (set! . oU2e05) (import . oU2e04) (begin . oU2e03) (module . oU2e02) (define-syntax . oU2e01) (define . oU2e00)) '((oU2b8d core-prim . &no-nans-rcd) (oU2b8b core-prim . &no-nans-rtd) (oU2b78 core-prim . &no-infinities-rcd) (oU2b76 core-prim . &no-infinities-rtd) (oU2b63 core-prim . &i/o-encoding-rcd) (oU2b61 core-prim . &i/o-encoding-rtd) (oU2b48 core-prim . &i/o-decoding-rcd) (oU2b46 core-prim . &i/o-decoding-rtd) (oU2b33 core-prim . &i/o-port-rcd) (oU2b31 core-prim . &i/o-port-rtd) (oU2b18 core-prim . &i/o-file-does-not-exist-rcd) (oU2b16 core-prim . &i/o-file-does-not-exist-rtd) (oU2b03 core-prim . &i/o-file-already-exists-rcd) (oU2b01 core-prim . &i/o-file-already-exists-rtd) (oU2aee core-prim . &i/o-file-is-read-only-rcd) (oU2aec core-prim . &i/o-file-is-read-only-rtd) (oU2ad9 core-prim . &i/o-file-protection-rcd) (oU2ad7 core-prim . &i/o-file-protection-rtd) (oU2ac4 core-prim . &i/o-filename-rcd) (oU2ac2 core-prim . &i/o-filename-rtd) (oU2aa9 core-prim . &i/o-invalid-position-rcd) (oU2aa7 core-prim . &i/o-invalid-position-rtd) (oU2a8e core-prim . &i/o-write-rcd) (oU2a8c core-prim . &i/o-write-rtd) (oU2a79 core-prim . &i/o-read-rcd) (oU2a77 core-prim . &i/o-read-rtd) (oU2a64 core-prim . &i/o-rcd) (oU2a62 core-prim . &i/o-rtd) (oU2a4f core-prim . &undefined-rcd) (oU2a4d core-prim . &undefined-rtd) (oU2a3a core-prim . &syntax-rcd) (oU2a38 core-prim . &syntax-rtd) (oU2a19 core-prim . &lexical-rcd) (oU2a17 core-prim . &lexical-rtd) (oU2a04 core-prim . &implementation-restriction-rcd) (oU2a02 core-prim . &implementation-restriction-rtd) (oU29ef core-prim . &non-continuable-rcd) (oU29ed core-prim . &non-continuable-rtd) (oU29da core-prim . &who-rcd) (oU29d8 core-prim . &who-rtd) (oU29bf core-prim . &irritants-rcd) (oU29bd core-prim . &irritants-rtd) (oU29a4 core-prim . &assertion-rcd) (oU29a2 core-prim . &assertion-rtd) (oU298f core-prim . &violation-rcd) (oU298d core-prim . &violation-rtd) (oU297a core-prim . &error-rcd) (oU2978 core-prim . &error-rtd) (oU2965 core-prim . &serious-rcd) (oU2963 core-prim . &serious-rtd) (oU2950 core-prim . &warning-rcd) (oU294e core-prim . &warning-rtd) (oU293b core-prim . &message-rcd) (oU2939 core-prim . &message-rtd) (oU28dc core-prim . &condition-rcd) (oU28da core-prim . &condition-rtd) (oUe5a core-prim . syntax-error) (oUd7e core-prim . syntax-dispatch) (oU312c core-prim . pretty-print) (oU312b core-prim . eval-core) (oU312a core-prim . set-symbol-value!) (oU3129 core-prim . symbol-value) (oU3128 core-prim . gensym) (oU3127 core-prim . void) (oU2c9e core-prim . load) (oUe6c core-prim . interaction-environment) (oU3126 core-prim . char-ready?) (oU3125 core-prim . regexp?) (oU3124 core-prim . read-line) (oU3123 core-prim . gensym-prefix-set!) (oU3122 core-prim . ungensym) (oU3121 core-prim . alist->eq-hash-table) (oU3120 core-prim . assoc-ref) (oU311f core-prim . print) (oU311e core-prim . format) (oU311d core-prim . host-os) (oU7b7 core-prim . library-path) (oU311c core-prim . standard-library-path) (oU311b core-prim . file-newer?) (oU311a core-prim . stat-mtime) (oU3119 core-prim . write-to-file) (oU3118 core-prim . file->list) (oU3117 core-prim . file->string) (oU3116 core-prim . digit->integer) (oU3115 core-prim . call-with-string-input-port) (oU3114 core-prim . call-with-string-io) (oU3113 core-prim . string-split) (oU3112 core-prim . bytevector-for-each) (oU3111 core-prim . string->regexp) (oU3110 core-prim . rxmatch) (oU310f core-prim . regexp-replace-all) (oU310e core-prim . hashtable-for-each) (oU5a2 core-prim . mosh-cache-dir) (oU310d core-prim . call-process) (oU310c core-prim . local-tz-offset) (oU310b core-prim . microseconds) (oU310a core-prim . directory-list) (oU3109 core-prim . set-current-directory!) (oU3108 core-prim . expand-path) (oU3107 core-prim . current-directory) (oU3106 core-prim . %spawn) (oU3105 core-prim . %waitpid) (oU3104 core-prim . simple-struct-name) (oU3103 core-prim . simple-struct-set!) (oU3102 core-prim . simple-struct-ref) (oU3101 core-prim . make-simple-struct) (oU3100 core-prim . simple-struct?) (oU30ff core-prim . pointer-ref-c-int64) (oU30fe core-prim . pointer-ref-c-int32) (oU30fd core-prim . pointer-ref-c-int16) (oU30fc core-prim . pointer-ref-c-int8) (oU30fb core-prim . pointer-ref-c-uint64) (oU30fa core-prim . pointer-ref-c-uint32) (oU30f9 core-prim . pointer-ref-c-uint16) (oU30f8 core-prim . pointer-ref-c-uint8) (oU30f7 core-prim . pointer-set-c-uint64!) (oU30f6 core-prim . pointer-set-c-uint32!) (oU30f5 core-prim . pointer-set-c-uint16!) (oU30f4 core-prim . pointer-set-c-uint8!) (oU30f3 core-prim . pointer-set-c-int64!) (oU30f2 core-prim . pointer-set-c-int32!) (oU30f1 core-prim . pointer-set-c-int16!) (oU30f0 core-prim . pointer-set-c-int8!) (oU30ef core-prim . pointer-set-c-pointer!) (oU30ee core-prim . pointer-set-c-double!) (oU30ed core-prim . pointer-set-c-float!) (oU30ec core-prim . pointer-set-c-long-long!) (oU30eb core-prim . pointer-set-c-long!) (oU30ea core-prim . pointer-set-c-int!) (oU30e9 core-prim . pointer-set-c-short!) (oU30e8 core-prim . pointer-set-c-char!) (oU30e7 core-prim . pointer-ref-c-pointer) (oU30e6 core-prim . pointer-ref-c-double) (oU30e5 core-prim . pointer-ref-c-float) (oU30e4 core-prim . pointer-ref-c-unsigned-long-long) (oU30e3 core-prim . pointer-ref-c-signed-long-long) (oU30e2 core-prim . pointer-ref-c-unsigned-long) (oU30e1 core-prim . pointer-ref-c-signed-long) (oU30e0 core-prim . pointer-ref-c-unsigned-int) (oU30df core-prim . pointer-ref-c-signed-int) (oU30de core-prim . pointer-ref-c-unsigned-short) (oU30dd core-prim . pointer-ref-c-signed-short) (oU30dc core-prim . pointer-ref-c-unsigned-char) (oU30db core-prim . pointer-ref-c-signed-char) (oU30da core-prim . pointer->integer) (oU30d9 core-prim . integer->pointer) (oU30d8 core-prim . pointer?) (oU30d7 core-prim . shared-errno) (oU30d6 core-prim . get-c-address) (oU30d5 core-prim . obj->integer) (oU30d4 core-prim . u8-list->c-procedure) (oU30d3 core-prim . %ffi-free-c-callback-trampoline) (oU30d2 core-prim . %ffi-make-c-callback-trampoline) (oU30d1 core-prim . %ffi-free) (oU30d0 core-prim . %ffi-malloc) (oU30cf core-prim . %ffi-supported?) (oU30ce core-prim . %ffi-pointer->string) (oU30cd core-prim . %ffi-call->string-or-zero) (oU30cc core-prim . %ffi-call->double) (oU30cb core-prim . %ffi-call->void*) (oU30ca core-prim . %ffi-call->void) (oU30c9 core-prim . %ffi-call->char) (oU30c8 core-prim . %ffi-call->int) (oU30c7 core-prim . %ffi-lookup) (oU30c6 core-prim . %ffi-open) (oU30c5 core-prim . %fork) (oU30c4 core-prim . %pipe) (oU30c3 core-prim . p) (oU30c2 core-prim . open-output-string) (oU30c1 core-prim . get-output-string) (oU30c0 core-prim . file-stat-ctime) (oU30bf core-prim . file-stat-atime) (oU30be core-prim . file-stat-mtime) (oU30bd core-prim . file-size-in-bytes) (oU30bc core-prim . file-writable?) (oU30bb core-prim . file-executable?) (oU30ba core-prim . file-readable?) (oU30b9 core-prim . file-regular?) (oU30b8 core-prim . file-symbolic-link?) (oU30b7 core-prim . file-directory?) (oU30b6 core-prim . create-symbolic-link) (oU30b5 core-prim . rename-file) (oU30b4 core-prim . delete-directory) (oU30b3 core-prim . create-directory) (oU30b2 core-prim . create-mosh-cache-dir) (oU30b1 core-prim . get-environment-variables) (oU30b0 core-prim . current-exception-handler) (oU30af core-prim . get-environment-variable) (oU30ae core-prim . join-wraps) (oU30ad core-prim . id->real-label) (oU30ac core-prim . same-marks?) (oU30ab core-prim . same-marks*?) (oU30aa core-prim . get-timeofday) (oU30a9 core-prim . get-command-line) (oU30a8 core-prim . sys-display) (oU30a7 core-prim . whereis) (oU30a6 core-prim . register) (oU30a5 core-prim . vm-join!) (oU30a4 core-prim . vm-set-value!) (oU30a3 core-prim . vm?) (oU30a2 core-prim . main-vm?) (oU30a1 core-prim . vm-eval) (oU30a0 core-prim . vm-self) (oU309f core-prim . vm-start!) (oU309e core-prim . make-vm) (oU309d core-prim . mutex-try-lock!) (oU309c core-prim . mutex-unlock!) (oU309b core-prim . mutex-lock!) (oU309a core-prim . mutex?) (oU3099 core-prim . make-mutex) (oU3098 core-prim . condition-variable-notify-all!) (oU3097 core-prim . condition-variable-notify!) (oU3096 core-prim . condition-variable-wait!) (oU3095 core-prim . make-condition-variable) (oU3094 core-prim . mosh-executable-path) (oU3093 core-prim . make-file-options) (oU3092 core-prim . source-info) (oU3091 core-prim . make-compiler-instruction) (oU3090 core-prim . make-instruction) (oU308f core-prim . set-source-info!) (oU308e core-prim . bignum?) (oU308d core-prim . fast-equal?) (oU308c core-prim . fasl-read) (oU308b core-prim . fasl-write) (oU308a core-prim . time-usage) (oU3089 core-prim . os-constant) (oU3088 core-prim . disasm) (oU5a0 core-prim . make-parameter) (oU3087 core-prim . socket-port) (oU3086 core-prim . socket-shutdown) (oU3085 core-prim . socket-close) (oU3084 core-prim . socket-send) (oU3083 core-prim . socket-recv!) (oU3082 core-prim . socket-recv) (oU3081 core-prim . make-server-socket) (oU3080 core-prim . make-client-socket) (oU307f core-prim . socket-accept) (oU307e core-prim . socket?) (oU307d core-prim . string-upcase) (oU307c core-prim . string-titlecase) (oU307b core-prim . string-normalize-nfkd) (oU307a core-prim . string-normalize-nfkc) (oU3079 core-prim . string-normalize-nfd) (oU3078 core-prim . string-normalize-nfc) (oU3077 core-prim . string-foldcase) (oU3076 core-prim . string-downcase) (oU3075 core-prim . string-ci>?) (oU3074 core-prim . string-ci>=?) (oU3073 core-prim . string-ci=?) (oU3072 core-prim . string-ci<?) (oU3071 core-prim . string-ci<=?) (oU3070 core-prim . char-whitespace?) (oU306f core-prim . char-upper-case?) (oU306e core-prim . char-title-case?) (oU306d core-prim . char-numeric?) (oU306c core-prim . char-lower-case?) (oU306b core-prim . char-general-category) (oU306a core-prim . char-upcase) (oU3069 core-prim . char-titlecase) (oU3068 core-prim . char-foldcase) (oU3067 core-prim . char-downcase) (oU3066 core-prim . char-ci>?) (oU3065 core-prim . char-ci>=?) (oU3064 core-prim . char-ci=?) (oU3063 core-prim . char-ci<?) (oU3062 core-prim . char-ci<=?) (oU3061 core-prim . char-alphabetic?) (oUba9 core-prim . make-variable-transformer) (oUe60 core-prim . identifier?) (oUe4c core-prim . generate-temporaries) (oUe4e core-prim . free-identifier=?) (oUe64 core-prim . syntax->datum) (oUe62 core-prim . datum->syntax) (oUe50 core-prim . bound-identifier=?) (oU3060 core-prim . record-type-descriptor?) (oU305f core-prim . record-predicate) (oU305e core-prim . record-mutator) (oU305d core-prim . record-constructor) (oU305c core-prim . record-accessor) (oU305b core-prim . make-record-type-descriptor) (oU305a core-prim . make-record-constructor-descriptor) (oU3059 core-prim . record?) (oU3058 core-prim . record-type-uid) (oU3057 core-prim . record-type-sealed?) (oU3056 core-prim . record-type-parent) (oU3055 core-prim . record-type-opaque?) (oU3054 core-prim . record-type-name) (oU3053 core-prim . record-type-generative?) (oU3052 core-prim . record-type-field-names) (oU3051 core-prim . record-rtd) (oU3050 core-prim . record-field-mutable?) (oU304f core-prim . delete-file) (oU304e core-prim . file-exists?) (oU304d core-prim . vector-sort!) (oU304c core-prim . vector-sort) (oU304b core-prim . list-sort) (oU304a core-prim . symbol-hash) (oU3049 core-prim . string-ci-hash) (oU3048 core-prim . string-hash) (oU3047 core-prim . equal-hash) (oU3046 core-prim . hashtable-equivalence-function) (oU3045 core-prim . make-hashtable) (oU3044 core-prim . hashtable-hash-function) (oU3043 core-prim . make-eqv-hashtable) (oU3042 core-prim . make-eq-hashtable) (oU3041 core-prim . hashtable?) (oU3040 core-prim . hashtable-update!) (oU303f core-prim . hashtable-size) (oU303e core-prim . hashtable-set!) (oU303d core-prim . hashtable-ref) (oU303c core-prim . hashtable-mutable?) (oU303b core-prim . hashtable-keys) (oU303a core-prim . hashtable-entries) (oU3039 core-prim . hashtable-delete!) (oU3038 core-prim . hashtable-copy) (oU3037 core-prim . hashtable-contains?) (oU3036 core-prim . hashtable-clear!) (oU3035 core-prim . call-with-output-file) (oU3034 core-prim . call-with-input-file) (oU3033 core-prim . write-char) (oU3032 core-prim . write) (oU3031 core-prim . with-output-to-file) (oU3030 core-prim . with-input-from-file) (oU302f core-prim . read-char) (oU302e core-prim . read) (oU302d core-prim . peek-char) (oU302c core-prim . open-output-file) (oU302b core-prim . open-input-file) (oU302a core-prim . newline) (oU3029 core-prim . display) (oU3028 core-prim . close-output-port) (oU3027 core-prim . close-input-port) (oU3026 core-prim . eof-object?) (oU3025 core-prim . eof-object) (oU3024 core-prim . current-error-port) (oU3023 core-prim . current-output-port) (oU3022 core-prim . current-input-port) (oU3021 core-prim . output-port?) (oU3020 core-prim . input-port?) (oU301f core-prim . utf-8-codec) (oU301e core-prim . utf-16-codec) (oU301d core-prim . transcoder-error-handling-mode) (oU301c core-prim . transcoder-eol-style) (oU301b core-prim . transcoder-codec) (oU301a core-prim . transcoded-port) (oU3019 core-prim . textual-port?) (oU3018 core-prim . string->bytevector) (oU3017 core-prim . standard-output-port) (oU3016 core-prim . standard-input-port) (oU3015 core-prim . standard-error-port) (oU3014 core-prim . set-port-position!) (oU3013 core-prim . put-u8) (oU3012 core-prim . put-string) (oU3011 core-prim . put-datum) (oU3010 core-prim . put-char) (oU300f core-prim . put-bytevector) (oU300e core-prim . port?) (oU300d core-prim . port-transcoder) (oU300c core-prim . port-position) (oU300b core-prim . port-has-set-port-position!?) (oU300a core-prim . port-has-port-position?) (oU3009 core-prim . port-eof?) (oU3008 core-prim . output-port-buffer-mode) (oU3007 core-prim . open-string-output-port) (oU3006 core-prim . open-string-input-port) (oU3005 core-prim . open-file-output-port) (oU3004 core-prim . open-file-input/output-port) (oU3003 core-prim . open-file-input-port) (oU3002 core-prim . open-bytevector-output-port) (oU3001 core-prim . open-bytevector-input-port) (oU3000 core-prim . native-transcoder) (oU2fff core-prim . native-eol-style) (oU2ffe core-prim . make-transcoder) (oU2ffd core-prim . latin-1-codec) (oU2a88 core-prim . make-i/o-write-error) (oU2a73 core-prim . make-i/o-read-error) (oU2b29 core-prim . make-i/o-port-error) (oU2a9f core-prim . make-i/o-invalid-position-error) (oU2aba core-prim . make-i/o-filename-error) (oU2ad3 core-prim . make-i/o-file-protection-error) (oU2ae8 core-prim . make-i/o-file-is-read-only-error) (oU2b12 core-prim . make-i/o-file-does-not-exist-error) (oU2afd core-prim . make-i/o-file-already-exists-error) (oU2a5e core-prim . make-i/o-error) (oU2b59 core-prim . make-i/o-encoding-error) (oU2b42 core-prim . make-i/o-decoding-error) (oU2ffc core-prim . make-custom-textual-output-port) (oU2ffb core-prim . make-custom-textual-input/output-port) (oU2ffa core-prim . make-custom-textual-input-port) (oU2ff9 core-prim . make-custom-binary-output-port) (oU2ff8 core-prim . make-custom-binary-input/output-port) (oU2ff7 core-prim . make-custom-binary-input-port) (oU2ff6 core-prim . make-bytevector) (oU2ff5 core-prim . lookahead-u8) (oU2ff4 core-prim . lookahead-char) (oU2a8a core-prim . i/o-write-error?) (oU2a75 core-prim . i/o-read-error?) (oU2b2d core-prim . i/o-port-error?) (oU2aa3 core-prim . i/o-invalid-position-error?) (oU2abe core-prim . i/o-filename-error?) (oU2ad5 core-prim . i/o-file-protection-error?) (oU2aea core-prim . i/o-file-is-read-only-error?) (oU2b14 core-prim . i/o-file-does-not-exist-error?) (oU2aff core-prim . i/o-file-already-exists-error?) (oU2a60 core-prim . i/o-error?) (oU2aa5 core-prim . i/o-error-position) (oU2b2f core-prim . i/o-error-port) (oU2ac0 core-prim . i/o-error-filename) (oU2b5d core-prim . i/o-encoding-error?) (oU2b5f core-prim . i/o-encoding-error-char) (oU2b44 core-prim . i/o-decoding-error?) (oU2ff3 core-prim . get-u8) (oU2ff2 core-prim . get-string-n!) (oU2ff1 core-prim . get-string-n) (oU2ff0 core-prim . get-string-all) (oU2fef core-prim . get-line) (oU2fee core-prim . get-datum) (oU2fed core-prim . get-char) (oU2fec core-prim . get-bytevector-some) (oU2feb core-prim . get-bytevector-n!) (oU2fea core-prim . get-bytevector-n) (oU2fe9 core-prim . get-bytevector-all) (oU2fe8 core-prim . flush-output-port) (oU2fe7 core-prim . close-port) (oUe3a core-prim . scheme-report-environment) (oU2fe6 core-prim . quotient) (oUe38 core-prim . null-environment) (oU2fe5 core-prim . remainder) (oU2fe4 core-prim . modulo) (oU2fe3 core-prim . inexact->exact) (oU2fe2 core-prim . force) (oU2fe1 core-prim . exact->inexact) (oU2fe0 core-prim . make-promise) (oU2fdf core-prim . exit) (oU2c98 core-prim . command-line) (oU2fde core-prim . string-fill!) (oU2fdd core-prim . string-set!) (oU2fdc core-prim . set-cdr!) (oU2fdb core-prim . set-car!) (oU2fda core-prim . remove) (oU2fd9 core-prim . remv) (oU2fd8 core-prim . remp) (oU2fd7 core-prim . remq) (oU2fd6 core-prim . partition) (oU2fd5 core-prim . memv) (oU2fd4 core-prim . memq) (oU2fd3 core-prim . memp) (oU2fd2 core-prim . member) (oU2fd1 core-prim . exists) (oU2fd0 core-prim . for-all) (oU2fcf core-prim . fold-right) (oU2fce core-prim . fold-left) (oU2fcd core-prim . find) (oU2fcc core-prim . filter) (oU2fcb core-prim . cons*) (oU2fca core-prim . assv) (oU2fc9 core-prim . assq) (oU2fc8 core-prim . assp) (oU2fc7 core-prim . assoc) (oU2fc6 core-prim . call-with-string-output-port) (oU2fc5 core-prim . call-with-port) (oU2fc4 core-prim . call-with-bytevector-output-port) (oU2fc3 core-prim . bytevector->string) (oU2fc2 core-prim . buffer-mode?) (oU2fc1 core-prim . binary-port?) (oU2fc0 core-prim . with-exception-handler) (oU2fbf core-prim . raise-continuable) (oU2fbe core-prim . raise) (oUe3e core-prim . eval) (oUe36 core-prim . environment) (oU2fbd core-prim . make-enumeration) (oU2fbc core-prim . enum-set=?) (oU2fbb core-prim . enum-set-universe) (oU2fba core-prim . enum-set-union) (oU2fb9 core-prim . enum-set-subset?) (oU2fb8 core-prim . enum-set-projection) (oU2fb7 core-prim . enum-set-member?) (oU2fb6 core-prim . enum-set-intersection) (oU2fb5 core-prim . enum-set-indexer) (oU2fb4 core-prim . enum-set-difference) (oU2fb3 core-prim . enum-set-constructor) (oU2fb2 core-prim . enum-set-complement) (oU2fb1 core-prim . enum-set->list) (oU29d4 core-prim . who-condition?) (oU294c core-prim . warning?) (oU298b core-prim . violation?) (oU2a4b core-prim . undefined-violation?) (oU2a32 core-prim . syntax-violation?) (oU2a36 core-prim . syntax-violation-subform) (oU2a34 core-prim . syntax-violation-form) (oUe5e core-prim . syntax-violation) (oU2fb0 core-prim . simple-conditions) (oU2961 core-prim . serious-condition?) (oU29eb core-prim . non-continuable-violation?) (oU2935 core-prim . message-condition?) (oU29d0 core-prim . make-who-condition) (oU294a core-prim . make-warning) (oU2989 core-prim . make-violation) (oU2a49 core-prim . make-undefined-violation) (oU2a2c core-prim . make-syntax-violation) (oU295f core-prim . make-serious-condition) (oU29e9 core-prim . make-non-continuable-violation) (oU2931 core-prim . make-message-condition) (oU2a13 core-prim . make-lexical-violation) (oU29b5 core-prim . make-irritants-condition) (oU29fe core-prim . make-implementation-restriction-violation) (oU2974 core-prim . make-error) (oU299e core-prim . make-assertion-violation) (oU2a15 core-prim . lexical-violation?) (oU29b9 core-prim . irritants-condition?) (oU2a00 core-prim . implementation-restriction-violation?) (oU2976 core-prim . error?) (oU29d6 core-prim . condition-who) (oU2faf core-prim . condition-predicate) (oU2937 core-prim . condition-message) (oU29bb core-prim . condition-irritants) (oU2fae core-prim . condition-accessor) (oU2fad core-prim . condition) (oU29a0 core-prim . assertion-violation?) (oU2fac core-prim . condition?) (oU2fab core-prim . utf32->string) (oU2faa core-prim . utf16->string) (oU2fa9 core-prim . utf8->string) (oU2fa8 core-prim . uint-list->bytevector) (oU2fa7 core-prim . u8-list->bytevector) (oU2fa6 core-prim . string->utf8) (oU2fa5 core-prim . string->utf32) (oU2fa4 core-prim . string->utf16) (oU2fa3 core-prim . sint-list->bytevector) (oU2fa2 core-prim . native-endianness) (oU2fa1 core-prim . bytevector?) (oU2fa0 core-prim . bytevector=?) (oU2f9f core-prim . bytevector-uint-set!) (oU2f9e core-prim . bytevector-uint-ref) (oU2f9d core-prim . bytevector-u8-set!) (oU2f9c core-prim . bytevector-u8-ref) (oU2f9b core-prim . bytevector-u64-set!) (oU2f9a core-prim . bytevector-u64-ref) (oU2f99 core-prim . bytevector-u64-native-set!) (oU2f98 core-prim . bytevector-u64-native-ref) (oU2f97 core-prim . bytevector-u32-set!) (oU2f96 core-prim . bytevector-u32-ref) (oU2f95 core-prim . bytevector-u32-native-set!) (oU2f94 core-prim . bytevector-u32-native-ref) (oU2f93 core-prim . bytevector-u16-set!) (oU2f92 core-prim . bytevector-u16-ref) (oU2f91 core-prim . bytevector-u16-native-set!) (oU2f90 core-prim . bytevector-u16-native-ref) (oU2f8f core-prim . bytevector-sint-set!) (oU2f8e core-prim . bytevector-sint-ref) (oU2f8d core-prim . bytevector-s8-set!) (oU2f8c core-prim . bytevector-s8-ref) (oU2f8b core-prim . bytevector-s64-set!) (oU2f8a core-prim . bytevector-s64-ref) (oU2f89 core-prim . bytevector-s64-native-set!) (oU2f88 core-prim . bytevector-s64-native-ref) (oU2f87 core-prim . bytevector-s32-set!) (oU2f86 core-prim . bytevector-s32-ref) (oU2f85 core-prim . bytevector-s32-native-set!) (oU2f84 core-prim . bytevector-s32-native-ref) (oU2f83 core-prim . bytevector-s16-set!) (oU2f82 core-prim . bytevector-s16-ref) (oU2f81 core-prim . bytevector-s16-native-set!) (oU2f80 core-prim . bytevector-s16-native-ref) (oU2f7f core-prim . bytevector-length) (oU2f7e core-prim . bytevector-ieee-single-ref) (oU2f7d core-prim . bytevector-ieee-single-set!) (oU2f7c core-prim . bytevector-ieee-single-native-set!) (oU2f7b core-prim . bytevector-ieee-single-native-ref) (oU2f7a core-prim . bytevector-ieee-double-set!) (oU2f79 core-prim . bytevector-ieee-double-ref) (oU2f78 core-prim . bytevector-ieee-double-native-set!) (oU2f77 core-prim . bytevector-ieee-double-native-ref) (oU2f76 core-prim . bytevector-fill!) (oU2f75 core-prim . bytevector-copy!) (oU2f74 core-prim . bytevector-copy) (oU2f73 core-prim . bytevector->uint-list) (oU2f72 core-prim . bytevector->u8-list) (oU2f71 core-prim . bytevector->sint-list) (oU2b89 core-prim . no-nans-violation?) (oU2b74 core-prim . no-infinities-violation?) (oU2b87 core-prim . make-no-nans-violation) (oU2b72 core-prim . make-no-infinities-violation) (oU2f70 core-prim . real->flonum) (oU2f6f core-prim . flzero?) (oU2f6e core-prim . fltruncate) (oU2f6d core-prim . fltan) (oU2f6c core-prim . flsqrt) (oU2f6b core-prim . flsin) (oU2f6a core-prim . flround) (oU2f69 core-prim . flpositive?) (oU2f68 core-prim . flonum?) (oU2f67 core-prim . flodd?) (oU2f66 core-prim . flnumerator) (oU2f65 core-prim . flnegative?) (oU2f64 core-prim . flnan?) (oU2f63 core-prim . flmod0) (oU2f62 core-prim . flmod) (oU2f61 core-prim . flmin) (oU2f60 core-prim . flmax) (oU2f5f core-prim . fllog) (oU2f5e core-prim . flinteger?) (oU2f5d core-prim . flinfinite?) (oU2f5c core-prim . flfloor) (oU2f5b core-prim . flfinite?) (oU2f5a core-prim . flexpt) (oU2f59 core-prim . flexp) (oU2f58 core-prim . fleven?) (oU2f57 core-prim . fldiv0-and-mod0) (oU2f56 core-prim . fldiv0) (oU2f55 core-prim . fldiv-and-mod) (oU2f54 core-prim . fldiv) (oU2f53 core-prim . fldenominator) (oU2f52 core-prim . flcos) (oU2f51 core-prim . flceiling) (oU2f50 core-prim . flatan) (oU2f4f core-prim . flasin) (oU2f4e core-prim . flacos) (oU2f4d core-prim . flabs) (oU2f4c core-prim . fl>?) (oU2f4b core-prim . fl>=?) (oU2f4a core-prim . fl=?) (oU2f49 core-prim . fl<?) (oU2f48 core-prim . fl<=?) (oU2f47 core-prim . fl/) (oU2f46 core-prim . fl-) (oU2f45 core-prim . fl+) (oU2f44 core-prim . fl*) (oU2f43 core-prim . fixnum->flonum) (oU2f42 core-prim . fxzero?) (oU2f41 core-prim . fxxor) (oU2f40 core-prim . fxrotate-bit-field) (oU2f3f core-prim . fxreverse-bit-field) (oU2f3e core-prim . fxpositive?) (oU2f3d core-prim . fxodd?) (oU2f3c core-prim . fxnot) (oU2f3b core-prim . fxnegative?) (oU2f3a core-prim . fxmod0) (oU2f39 core-prim . fxmod) (oU2f38 core-prim . fxmin) (oU2f37 core-prim . fxmax) (oU2f36 core-prim . fxlength) (oU2f35 core-prim . fxior) (oU2f34 core-prim . fxif) (oU2f33 core-prim . fxfirst-bit-set) (oU2f32 core-prim . fxeven?) (oU2f31 core-prim . fxdiv0-and-mod0) (oU2f30 core-prim . fxdiv0) (oU2f2f core-prim . fxdiv-and-mod) (oU2f2e core-prim . fxdiv) (oU2f2d core-prim . fxcopy-bit-field) (oU2f2c core-prim . fxcopy-bit) (oU2f2b core-prim . fxbit-set?) (oU2f2a core-prim . fxbit-field) (oU2f29 core-prim . fxbit-count) (oU2f28 core-prim . fxarithmetic-shift-right) (oU2f27 core-prim . fxarithmetic-shift-left) (oU2f26 core-prim . fxarithmetic-shift) (oU2f25 core-prim . fxand) (oU2f24 core-prim . fx>?) (oU2f23 core-prim . fx>=?) (oU2f22 core-prim . fx=?) (oU2f21 core-prim . fx<?) (oU2f20 core-prim . fx<=?) (oU2f1f core-prim . fx-/carry) (oU2f1e core-prim . fx-) (oU2f1d core-prim . fx+/carry) (oU2f1c core-prim . fx+) (oU2f1b core-prim . fx*/carry) (oU2f1a core-prim . fx*) (oU2f19 core-prim . greatest-fixnum) (oU2f18 core-prim . least-fixnum) (oU2f17 core-prim . fixnum-width) (oU2f16 core-prim . fixnum?) (oU2f15 core-prim . bitwise-rotate-bit-field) (oU2f14 core-prim . bitwise-reverse-bit-field) (oU2f13 core-prim . bitwise-length) (oU2f12 core-prim . bitwise-if) (oU2f11 core-prim . bitwise-first-bit-set) (oU2f10 core-prim . bitwise-copy-bit-field) (oU2f0f core-prim . bitwise-copy-bit) (oU2f0e core-prim . bitwise-bit-set?) (oU2f0d core-prim . bitwise-bit-field) (oU2f0c core-prim . bitwise-bit-count) (oU2f0b core-prim . bitwise-xor) (oU2f0a core-prim . bitwise-ior) (oU2f09 core-prim . bitwise-and) (oU2f08 core-prim . bitwise-not) (oU2f07 core-prim . bitwise-arithmetic-shift-right) (oU2f06 core-prim . bitwise-arithmetic-shift-left) (oU2f05 core-prim . bitwise-arithmetic-shift) (oU2f04 core-prim . zero?) (oU2f03 core-prim . vector?) (oU2f02 core-prim . vector-set!) (oU2f01 core-prim . vector-ref) (oU2f00 core-prim . vector-map) (oU2eff core-prim . vector-length) (oU2efe core-prim . vector-for-each) (oU2efd core-prim . vector-fill!) (oU2efc core-prim . vector->list) (oU2efb core-prim . vector) (oU2efa core-prim . values) (oU2ef9 core-prim . truncate) (oU2ef8 core-prim . tan) (oU2ef7 core-prim . symbol?) (oU2ef6 core-prim . symbol=?) (oU2ef5 core-prim . symbol->string) (oU2ef4 core-prim . substring) (oU2ef3 core-prim . string?) (oU2ef2 core-prim . string>?) (oU2ef1 core-prim . string>=?) (oU2ef0 core-prim . string=?) (oU2eef core-prim . string<?) (oU2eee core-prim . string<=?) (oU2eed core-prim . string-ref) (oU2eec core-prim . string-length) (oU2eeb core-prim . string-for-each) (oU2eea core-prim . string-copy) (oU2ee9 core-prim . string-append) (oU2ee8 core-prim . string->symbol) (oU2ee7 core-prim . string->number) (oU2ee6 core-prim . string->list) (oU2ee5 core-prim . string) (oU2ee4 core-prim . sqrt) (oU2ee3 core-prim . sin) (oU2ee2 core-prim . round) (oU2ee1 core-prim . reverse) (oU2ee0 core-prim . real?) (oU2edf core-prim . real-valued?) (oU2ede core-prim . real-part) (oU2edd core-prim . rationalize) (oU2edc core-prim . rational?) (oU2edb core-prim . rational-valued?) (oU2eda core-prim . procedure?) (oU2ed9 core-prim . positive?) (oU2ed8 core-prim . pair?) (oU2ed7 core-prim . odd?) (oU2ed6 core-prim . numerator) (oU2ed5 core-prim . number?) (oU2ed4 core-prim . number->string) (oU2ed3 core-prim . null?) (oU2ed2 core-prim . not) (oU2ed1 core-prim . negative?) (oU2ed0 core-prim . nan?) (oU2ecf core-prim . min) (oU2ece core-prim . max) (oU2ecd core-prim . map) (oU2ecc core-prim . make-vector) (oU2ecb core-prim . make-string) (oU2eca core-prim . make-rectangular) (oU2ec9 core-prim . make-polar) (oU2ec8 core-prim . magnitude) (oU2ec7 core-prim . log) (oU2ec6 core-prim . list?) (oU2ec5 core-prim . list-tail) (oU2ec4 core-prim . list-ref) (oU2ec3 core-prim . list->vector) (oU2ec2 core-prim . list->string) (oU2ec1 core-prim . list) (oU2ec0 core-prim . length) (oU2ebf core-prim . lcm) (oU2ebe core-prim . integer?) (oU2ebd core-prim . integer-valued?) (oU2ebc core-prim . integer->char) (oU2ebb core-prim . infinite?) (oU2eba core-prim . inexact?) (oU2eb9 core-prim . inexact) (oU2eb8 core-prim . imag-part) (oU2eb7 core-prim . gcd) (oU2eb6 core-prim . for-each) (oU2eb5 core-prim . floor) (oU2eb4 core-prim . finite?) (oU2eb3 core-prim . expt) (oU2eb2 core-prim . exp) (oU2eb1 core-prim . exact?) (oU2eb0 core-prim . exact-integer-sqrt) (oU2eaf core-prim . exact) (oU2eae core-prim . even?) (oU2ead core-prim . error) (oU2eac core-prim . eqv?) (oU2eab core-prim . equal?) (oU2eaa core-prim . eq?) (oU2ea9 core-prim . dynamic-wind) (oU2ea8 core-prim . div0-and-mod0) (oU2ea7 core-prim . mod0) (oU2ea6 core-prim . div0) (oU2ea5 core-prim . div-and-mod) (oU2ea4 core-prim . mod) (oU2ea3 core-prim . div) (oU2ea2 core-prim . denominator) (oU2ea1 core-prim . cos) (oU2ea0 core-prim . cons) (oU2e9f core-prim . complex?) (oU2e9e core-prim . char?) (oU2e9d core-prim . char>?) (oU2e9c core-prim . char>=?) (oU2e9b core-prim . char=?) (oU2e9a core-prim . char<?) (oU2e99 core-prim . char<=?) (oU2e98 core-prim . char->integer) (oU2e97 core-prim . ceiling) (oU2e96 core-prim . call-with-values) (oU2e95 core-prim . call/cc) (oU2e94 core-prim . call-with-current-continuation) (oU2e93 core-prim . cddddr) (oU2e92 core-prim . cdddar) (oU2e91 core-prim . cddadr) (oU2e90 core-prim . cddaar) (oU2e8f core-prim . cdaddr) (oU2e8e core-prim . cdadar) (oU2e8d core-prim . cdaadr) (oU2e8c core-prim . cdaaar) (oU2e8b core-prim . cadddr) (oU2e8a core-prim . caddar) (oU2e89 core-prim . cadadr) (oU2e88 core-prim . cadaar) (oU2e87 core-prim . caaddr) (oU2e86 core-prim . caadar) (oU2e85 core-prim . caaadr) (oU2e84 core-prim . caaaar) (oU2e83 core-prim . cdddr) (oU2e82 core-prim . cddar) (oU2e81 core-prim . cdadr) (oU2e80 core-prim . cdaar) (oU2e7f core-prim . caddr) (oU2e7e core-prim . cadar) (oU2e7d core-prim . caadr) (oU2e7c core-prim . caaar) (oU2e7b core-prim . cddr) (oU2e7a core-prim . cdar) (oU2e79 core-prim . cadr) (oU2e78 core-prim . caar) (oU2e77 core-prim . cdr) (oU2e76 core-prim . car) (oU2e75 core-prim . boolean?) (oU2e74 core-prim . boolean=?) (oU2e73 core-prim . atan) (oU2e72 core-prim . assertion-violation) (oUe58 core-prim . assertion-error) (oU2e71 core-prim . asin) (oU2e70 core-prim . apply) (oU2e6f core-prim . append) (oU2e6e core-prim . angle) (oU2e6d core-prim . acos) (oU2e6c core-prim . abs) (oU2e6b core-prim . /) (oU2e6a core-prim . *) (oU2e69 core-prim . -) (oU2e68 core-prim . +) (oU2e67 core-prim . >=) (oU2e66 core-prim . >) (oU2e65 core-prim . =) (oU2e64 core-prim . <=) (oU2e63 core-prim . <) (oU2e62 core-prim . library) (oU2e61 $core-rtd &no-nans-rtd &no-nans-rcd) (oU2e60 $core-rtd &no-infinities-rtd &no-infinities-rcd) (oU2e5f $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (oU2e5e $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (oU2e5d $core-rtd &i/o-port-rtd &i/o-port-rcd) (oU2e5c $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (oU2e5b $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (oU2e5a $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (oU2e59 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (oU2e58 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (oU2e57 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (oU2e56 $core-rtd &i/o-write-rtd &i/o-write-rcd) (oU2e55 $core-rtd &i/o-read-rtd &i/o-read-rcd) (oU2e54 $core-rtd &i/o-rtd &i/o-rcd) (oU2e53 $core-rtd &undefined-rtd &undefined-rcd) (oU2e52 $core-rtd &syntax-rtd &syntax-rcd) (oU2e51 $core-rtd &lexical-rtd &lexical-rcd) (oU2e50 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (oU2e4f $core-rtd &non-continuable-rtd &non-continuable-rcd) (oU2e4e $core-rtd &who-rtd &who-rcd) (oU2e4d $core-rtd &irritants-rtd &irritants-rcd) (oU2e4c $core-rtd &assertion-rtd &assertion-rcd) (oU2e4b $core-rtd &violation-rtd &violation-rcd) (oU2e4a $core-rtd &error-rtd &error-rcd) (oU2e49 $core-rtd &serious-rtd &serious-rcd) (oU2e48 $core-rtd &warning-rtd &warning-rcd) (oU2e47 $core-rtd &message-rtd &message-rcd) (oU2e46 $core-rtd &condition-rtd &condition-rcd) (oU2e45 macro . define-condition-type) (oU2e44 macro . define-enumeration) (oU2e43 macro . define-record-type) (oU2e42 macro . parent-rtd) (oU2e41 macro . nongenerative) (oU2e40 macro . opaque) (oU2e3f macro . sealed) (oU2e3e macro . protocol) (oU2e3d macro . parent) (oU2e3c macro . immutable) (oU2e3b macro . mutable) (oU2e3a macro . fields) (oU2e39 macro . error-handling-mode) (oU2e38 macro . file-options) (oU2e37 macro . buffer-mode) (oU2e36 macro . eol-style) (oU2e35 macro . guard) (oU2e34 macro . trace-define) (oU2e33 macro . trace-lambda) (oU2e32 macro . unsyntax-splicing) (oU2e31 macro . unsyntax) (oU2e30 macro . unquote-splicing) (oU2e2f macro . unquote) (oU2e2e macro . _) (oU2e2d macro . else) (oU2e2c macro . =>) (oU2e2b macro . ...) (oU2e2a macro . assert) (oU2e29 macro . endianness) (oU2e28 macro . delay) (oU2e27 macro . time) (oU2e26 macro . do) (oU2e25 macro . cond) (oU2e24 macro . let*) (oU2e23 macro . let*-values) (oU2e22 macro . let-values) (oU2e21 macro . identifier-syntax) (oU2e20 macro . with-syntax) (oU2e1f macro . quasisyntax) (oU2e1e macro . quasiquote) (oU2e1d macro . syntax-rules) (oU2e1c macro . include) (oU2e1b macro . define-struct) (oU2e1a core-macro . record-constructor-descriptor) (oU2e19 core-macro . record-type-descriptor) (oU2e18 macro . case) (oU2e17 macro . parameterize) (oU2e16 macro . unless) (oU2e15 macro . when) (oU2e14 core-macro . or) (oU2e13 core-macro . and) (oU2e12 core-macro . if) (oU2e11 core-macro . let) (oU2e10 core-macro . letrec*) (oU2e0f core-macro . letrec) (oU2e0e core-macro . type-descriptor) (oU2e0d core-macro . case-lambda) (oU2e0c core-macro . lambda) (oU2e0b core-macro . syntax) (oU2e0a core-macro . syntax-case) (oU2e09 core-macro . quote) (oU2e08 core-macro . foreign-call) (oU2e07 letrec-syntax) (oU2e06 let-syntax) (oU2e05 set!) (oU2e04 import) (oU2e03 begin) (oU2e02 module) (oU2e01 define-syntax) (oU2e00 define)) values values '#f '#f '#f '#f) (oU98c@oU7d8@install-library 'oU314d '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . oU312c) (eval-core . oU312b) (set-symbol-value! . oU312a) (symbol-value . oU3129) (gensym . oU3128) (void . oU3127)) '() values values '#f '#f '#f '#f) (oU98c@oU7d8@install-library 'oU314e '(mosh) '() '() '() '() '((set-symbol-value! . oU312a) (symbol-value . oU3129) (gensym . oU3128) (regexp? . oU3125) (read-line . oU3124) (ungensym . oU3122) (alist->eq-hash-table . oU3121) (assoc-ref . oU3120) (print . oU311f) (format . oU311e) (host-os . oU311d) (library-path . oU7b7) (standard-library-path . oU311c) (file-newer? . oU311b) (stat-mtime . oU311a) (digit->integer . oU3116) (call-with-string-input-port . oU3115) (call-with-string-io . oU3114) (string-split . oU3113) (bytevector-for-each . oU3112) (string->regexp . oU3111) (rxmatch . oU3110) (regexp-replace-all . oU310f) (hashtable-for-each . oU310e) (set-current-directory! . oU3109) (expand-path . oU3108) (current-directory . oU3107) (p . oU30c3) (get-timeofday . oU30aa) (get-command-line . oU30a9) (sys-display . oU30a8) (whereis . oU30a7) (register . oU30a6) (vm-join! . oU30a5) (vm-set-value! . oU30a4) (vm? . oU30a3) (main-vm? . oU30a2) (vm-eval . oU30a1) (vm-self . oU30a0) (vm-start! . oU309f) (make-vm . oU309e) (mutex-try-lock! . oU309d) (mutex-unlock! . oU309c) (mutex-lock! . oU309b) (mutex? . oU309a) (make-mutex . oU3099) (condition-variable-notify-all! . oU3098) (condition-variable-notify! . oU3097) (condition-variable-wait! . oU3096) (make-condition-variable . oU3095) (mosh-executable-path . oU3094) (make-file-options . oU3093) (source-info . oU3092) (make-compiler-instruction . oU3091) (make-instruction . oU3090) (set-source-info! . oU308f) (bignum? . oU308e) (fast-equal? . oU308d) (fasl-read . oU308c) (fasl-write . oU308b) (time-usage . oU308a) (os-constant . oU3089) (time . oU2e27) (include . oU2e1c)) '() values values '#f '#f '#f '#f) (oU98c@oU7d8@install-library 'oU314f '(system) '() '() '() '() '((gensym-prefix-set! . oU3123) (write-to-file . oU3119) (file->list . oU3118) (file->string . oU3117) (mosh-cache-dir . oU5a2) (call-process . oU310d) (local-tz-offset . oU310c) (microseconds . oU310b) (directory-list . oU310a) (expand-path . oU3108) (%spawn . oU3106) (%waitpid . oU3105) (simple-struct-name . oU3104) (simple-struct-set! . oU3103) (simple-struct-ref . oU3102) (make-simple-struct . oU3101) (simple-struct? . oU3100) (pointer-ref-c-int64 . oU30ff) (pointer-ref-c-int32 . oU30fe) (pointer-ref-c-int16 . oU30fd) (pointer-ref-c-int8 . oU30fc) (pointer-ref-c-uint64 . oU30fb) (pointer-ref-c-uint32 . oU30fa) (pointer-ref-c-uint16 . oU30f9) (pointer-ref-c-uint8 . oU30f8) (pointer-set-c-uint64! . oU30f7) (pointer-set-c-uint32! . oU30f6) (pointer-set-c-uint16! . oU30f5) (pointer-set-c-uint8! . oU30f4) (pointer-set-c-int64! . oU30f3) (pointer-set-c-int32! . oU30f2) (pointer-set-c-int16! . oU30f1) (pointer-set-c-int8! . oU30f0) (pointer-set-c-pointer! . oU30ef) (pointer-set-c-double! . oU30ee) (pointer-set-c-float! . oU30ed) (pointer-set-c-long-long! . oU30ec) (pointer-set-c-long! . oU30eb) (pointer-set-c-int! . oU30ea) (pointer-set-c-short! . oU30e9) (pointer-set-c-char! . oU30e8) (pointer-ref-c-pointer . oU30e7) (pointer-ref-c-double . oU30e6) (pointer-ref-c-float . oU30e5) (pointer-ref-c-unsigned-long-long . oU30e4) (pointer-ref-c-signed-long-long . oU30e3) (pointer-ref-c-unsigned-long . oU30e2) (pointer-ref-c-signed-long . oU30e1) (pointer-ref-c-unsigned-int . oU30e0) (pointer-ref-c-signed-int . oU30df) (pointer-ref-c-unsigned-short . oU30de) (pointer-ref-c-signed-short . oU30dd) (pointer-ref-c-unsigned-char . oU30dc) (pointer-ref-c-signed-char . oU30db) (pointer->integer . oU30da) (integer->pointer . oU30d9) (pointer? . oU30d8) (shared-errno . oU30d7) (get-c-address . oU30d6) (obj->integer . oU30d5) (u8-list->c-procedure . oU30d4) (%ffi-free-c-callback-trampoline . oU30d3) (%ffi-make-c-callback-trampoline . oU30d2) (%ffi-free . oU30d1) (%ffi-malloc . oU30d0) (%ffi-supported? . oU30cf) (%ffi-pointer->string . oU30ce) (%ffi-call->string-or-zero . oU30cd) (%ffi-call->double . oU30cc) (%ffi-call->void* . oU30cb) (%ffi-call->void . oU30ca) (%ffi-call->char . oU30c9) (%ffi-call->int . oU30c8) (%ffi-lookup . oU30c7) (%ffi-open . oU30c6) (%fork . oU30c5) (%pipe . oU30c4) (open-output-string . oU30c2) (get-output-string . oU30c1) (file-stat-ctime . oU30c0) (file-stat-atime . oU30bf) (file-stat-mtime . oU30be) (file-size-in-bytes . oU30bd) (file-writable? . oU30bc) (file-executable? . oU30bb) (file-readable? . oU30ba) (file-regular? . oU30b9) (file-symbolic-link? . oU30b8) (file-directory? . oU30b7) (create-symbolic-link . oU30b6) (rename-file . oU30b5) (delete-directory . oU30b4) (create-directory . oU30b3) (create-mosh-cache-dir . oU30b2) (get-environment-variables . oU30b1) (current-exception-handler . oU30b0) (get-environment-variable . oU30af) (join-wraps . oU30ae) (id->real-label . oU30ad) (same-marks? . oU30ac) (same-marks*? . oU30ab) (disasm . oU3088) (make-parameter . oU5a0) (socket-port . oU3087) (socket-shutdown . oU3086) (socket-close . oU3085) (socket-send . oU3084) (socket-recv! . oU3083) (socket-recv . oU3082) (make-server-socket . oU3081) (make-client-socket . oU3080) (socket-accept . oU307f) (socket? . oU307e) (parameterize . oU2e17)) '() values values '#f '#f '#f '#f)))
(begin (set! oU2c83@ref (unspecified)) (set! oU2c85@x* (unspecified)) (set! oU2c87@add-library-path! (unspecified)) (set! oU2c89@parse-and-add-library-path (unspecified)) (set! oU2c8b@for-each-with-index (unspecified)) (set! oU2c8d@rpad (unspecified)) (set! oU2c8f@condition-printer (unspecified)) (set! oU2c91@record->field-alist (unspecified)) (set! oU2c93@map-with-index (unspecified)) (set! oU2c95@repl (unspecified)) (set! oU2c97@trace-printer (unspecified)) (set! oU2c99@command-line (unspecified)) (set! oU2c9b@local-library-path (unspecified)) (set! oU2c9d@load/args (unspecified)) (set! oU2c9f@load (unspecified)) (set! oU2ca1@ironscheme-build (unspecified)) (set! oU2ca3@eval-top-level (unspecified)) (set! oU2ca5@compile-system-libraries (unspecified)) (set! oU2ca7@compile (unspecified)) (set! oU2ca9@compile->closure (unspecified)) (set! oU2cab@pre-compile-r6rs-file (unspecified)) (set! oU2cad@load-r6rs-top-level (unspecified)) (set! oU2caf@load-r6rs-top-level-sexp (unspecified)) (set! oU2cb1@prefix-inc (unspecified)) (set! oU2cb3@prefix-inc! (unspecified)) (set! oU2c83@ref (lambda (oU2cee@rtd oU2cef@i oU2cf0@x) (let ((oU2cf4@val ((record-accessor oU2cee@rtd oU2cef@i) oU2cf0@x))) (if (symbol? oU2cf4@val) (ungensym oU2cf4@val) oU2cf4@val)))) (set! oU2de6@oU2c83@ref oU2c83@ref) (set! oU2c85@x* '()) (set! oU2de7@oU2c85@x* oU2c85@x*) (set! oU2c87@add-library-path! (lambda (oU2cf6@path) (oU97c@oU7b8@library-path (append (oU97c@oU7b8@library-path) (list oU2cf6@path))))) (set! oU2de8@oU2c87@add-library-path! oU2c87@add-library-path!) (set! oU2c89@parse-and-add-library-path (lambda (oU2cf8@paths oU2cf9@message) (let ((oU2cfd@separator '#f)) (begin (set! oU2cfd@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((oU2cfe@t oU2cf8@paths)) (if oU2cfe@t ((lambda (oU2d00@paths) (for-each (lambda (oU2d02@path) (if (file-exists? oU2d02@path) (oU2c87@add-library-path! (expand-path oU2d02@path)) (format (current-error-port) oU2cf9@message oU2d02@path))) (string-split oU2d00@paths oU2cfd@separator))) oU2cfe@t) (void))))))) (set! oU2de9@oU2c89@parse-and-add-library-path oU2c89@parse-and-add-library-path) (set! oU2c8b@for-each-with-index (lambda (oU2d04@proc oU2d05@lst) (letrec ((oU2d08@loop (lambda (oU2d0a@i oU2d0b@lst) (if (null? oU2d0b@lst) (if '#f '#f (void)) (begin (oU2d04@proc oU2d0a@i (car oU2d0b@lst)) (oU2d08@loop (+ oU2d0a@i '1) (cdr oU2d0b@lst))))))) (oU2d08@loop '1 oU2d05@lst)))) (set! oU2dea@oU2c8b@for-each-with-index oU2c8b@for-each-with-index) (set! oU2c8d@rpad (lambda (oU2d0e@str oU2d0f@pad oU2d10@n) (let ((oU2d14@rest (- oU2d10@n (string-length (format '"~a" oU2d0e@str))))) (let oU2d1a@loop ((oU2d16@rest oU2d14@rest) (oU2d17@ret (format '"~a" oU2d0e@str))) (if (<= oU2d16@rest '0) oU2d17@ret (oU2d1a@loop (- oU2d16@rest '1) (string-append oU2d17@ret oU2d0f@pad))))))) (set! oU2deb@oU2c8d@rpad oU2c8d@rpad) (set! oU2c8f@condition-printer (lambda (oU2d1c@e oU2d1d@port) (let ((oU2d21@max-condition-len '#f)) (begin (set! oU2d21@max-condition-len (apply max (map (lambda (oU2d32@c) (string-length (symbol->string (record-type-name (record-rtd oU2d32@c))))) (simple-conditions oU2d1c@e)))) (begin (display '" Condition components:\n" oU2d1d@port) (oU2c8b@for-each-with-index (lambda (oU2d22@i oU2d23@x) (let ((oU2d26@rtd (record-rtd oU2d23@x)) (oU2d27@fields-alist (oU2c91@record->field-alist oU2d23@x))) (begin (format oU2d1d@port '" ~d. ~a" oU2d22@i (oU2c8d@rpad (symbol->string (record-type-name oU2d26@rtd)) '" " oU2d21@max-condition-len)) (if (null? oU2d27@fields-alist) (newline oU2d1d@port) (void)) (let oU2d2e@loop ((oU2d2a@first '#t) (oU2d2b@fields-alist oU2d27@fields-alist)) (if (null? oU2d2b@fields-alist) '() (let ((oU2d30@field (car oU2d2b@fields-alist))) (begin (if (not oU2d2a@first) (display (oU2c8d@rpad '"" '" " (+ '4 oU2d21@max-condition-len)) oU2d1d@port) (void)) (display '"       " oU2d1d@port) (display (car oU2d30@field) oU2d1d@port) (display '": " oU2d1d@port) (write (cdr oU2d30@field) oU2d1d@port) (newline oU2d1d@port) (oU2d2e@loop '#f (cdr oU2d2b@fields-alist))))))))) (simple-conditions oU2d1c@e))))))) (set! oU2dec@oU2c8f@condition-printer oU2c8f@condition-printer) (set! oU2c91@record->field-alist (lambda (oU2d34@r) (let ((oU2d37@ref '#f)) (begin (set! oU2d37@ref (lambda (oU2d42@rtd oU2d43@i oU2d44@x) (let ((oU2d48@val ((record-accessor oU2d42@rtd oU2d43@i) oU2d44@x))) (if (symbol? oU2d48@val) (ungensym oU2d48@val) oU2d48@val)))) (let oU2d3c@loop ((oU2d38@ret '()) (oU2d39@rtd (record-rtd oU2d34@r))) (if oU2d39@rtd (oU2d3c@loop (append oU2d38@ret (oU2c93@map-with-index (lambda (oU2d3e@i oU2d3f@field) (cons oU2d3f@field (oU2d37@ref oU2d39@rtd oU2d3e@i oU2d34@r))) (vector->list (record-type-field-names oU2d39@rtd)))) (record-type-parent oU2d39@rtd)) oU2d38@ret)))))) (set! oU2ded@oU2c91@record->field-alist oU2c91@record->field-alist) (set! oU2c93@map-with-index (lambda (oU2d4a@proc oU2d4b@lst) (let oU2d54@loop ((oU2d4e@i '0) (oU2d4f@lst oU2d4b@lst) (oU2d50@ret '())) (if (null? oU2d4f@lst) (reverse oU2d50@ret) (oU2d54@loop (+ oU2d4e@i '1) (cdr oU2d4f@lst) (cons (oU2d4a@proc oU2d4e@i (car oU2d4f@lst)) oU2d50@ret)))))) (set! oU2dee@oU2c93@map-with-index oU2c93@map-with-index) (set! oU2c95@repl (lambda oU2d56@x (let ((oU2d59@rec '#f)) (begin (set! oU2d59@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (oU2d5c@oU2d5a) (lambda () (with-exception-handler (lambda (oU2d5e@e) ((call/cc (lambda (oU2d60@oU2d5b) (oU2d5c@oU2d5a (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? oU2d5e@e) (oU2c8f@condition-printer oU2d5e@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" oU2d5e@e))) (oU2d60@oU2d5b (lambda () (raise-continuable oU2d5e@e)))))))))) (lambda () (let oU2d66@loop ((oU2d62@line (get-line (current-input-port))) (oU2d63@accum '"")) (let ((oU2d69@parentheses-ok? '#f) (oU2d6b@eval-string-print '#f)) (begin (set! oU2d69@parentheses-ok? (lambda (oU2d70@text) (let oU2d78@loop ((oU2d72@chars (string->list oU2d70@text)) (oU2d73@p0 '0) (oU2d74@p1 '0)) (if (null? oU2d72@chars) (= '0 oU2d73@p0 oU2d74@p1) (let ((oU2d7a@t (car oU2d72@chars))) (if (memv oU2d7a@t '(#\()) (oU2d78@loop (cdr oU2d72@chars) (+ oU2d73@p0 '1) oU2d74@p1) (if (memv oU2d7a@t '(#\))) (oU2d78@loop (cdr oU2d72@chars) (- oU2d73@p0 '1) oU2d74@p1) (if (memv oU2d7a@t '(#\[)) (oU2d78@loop (cdr oU2d72@chars) oU2d73@p0 (+ oU2d74@p1 '1)) (if (memv oU2d7a@t '(#\])) (oU2d78@loop (cdr oU2d72@chars) oU2d73@p0 (- oU2d74@p1 '1)) (oU2d78@loop (cdr oU2d72@chars) oU2d73@p0 oU2d74@p1)))))))))) (set! oU2d6b@eval-string-print (lambda (oU2d6e@text) (if (not (or (string=? '"\n" oU2d6e@text) (= '0 (string-length oU2d6e@text)))) (write (oU2ca3@eval-top-level (call-with-port (open-string-input-port oU2d6e@text) read))) (void)))) (if (eof-object? oU2d62@line) (begin (oU2d6b@eval-string-print oU2d63@accum) (exit)) (let ((oU2d6c@current (string-append oU2d63@accum oU2d62@line))) (if (oU2d69@parentheses-ok? oU2d6c@current) (oU2d6b@eval-string-print oU2d6c@current) (oU2d66@loop (get-line (current-input-port)) oU2d6c@current))))))))))))) (newline) (oU2d59@rec)))) (oU2d59@rec))))) (set! oU2def@oU2c95@repl oU2c95@repl) (set! oU2c97@trace-printer (oU6c2@oU5a1@make-parameter write)) (set! oU2df0@oU2c97@trace-printer oU2c97@trace-printer) (set! oU2c99@command-line (oU6c2@oU5a1@make-parameter (get-command-line))) (set! oU2df1@oU2c99@command-line oU2c99@command-line) (set! oU2c9b@local-library-path (lambda (oU2d7c@filename) (oU97c@oU7b8@library-path))) (set! oU2df2@oU2c9b@local-library-path oU2c9b@local-library-path) (set! oU2c9d@load/args (lambda (oU2d7e@filename . oU2d80@args) (begin (apply oU2cad@load-r6rs-top-level oU2d7e@filename 'load oU2d80@args) (void)))) (set! oU2df3@oU2c9d@load/args oU2c9d@load/args) (set! oU2c9f@load (lambda (oU2d82@filename) (begin (apply oU2cad@load-r6rs-top-level oU2d82@filename 'load (oU2c99@command-line)) (void)))) (set! oU2df4@oU2c9f@load oU2c9f@load) (set! oU2ca1@ironscheme-build (lambda () (oU2c9f@load '"ironscheme-buildscript.ss"))) (set! oU2df5@oU2ca1@ironscheme-build oU2ca1@ironscheme-build) (set! oU2ca3@eval-top-level (lambda (oU2d84@x) (oU28a9@oUe3f@eval oU2d84@x (oU28c0@oUe6d@interaction-environment)))) (set! oU2df6@oU2ca3@eval-top-level oU2ca3@eval-top-level) (set! oU2ca5@compile-system-libraries (lambda () (oU2ca3@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! oU2df7@oU2ca5@compile-system-libraries oU2ca5@compile-system-libraries) (set! oU2ca7@compile (lambda (oU2d86@filename) (oU2cad@load-r6rs-top-level oU2d86@filename 'compile))) (set! oU2df8@oU2ca7@compile oU2ca7@compile) (set! oU2ca9@compile->closure (lambda (oU2d88@filename) (oU2cad@load-r6rs-top-level oU2d88@filename 'closure))) (set! oU2df9@oU2ca9@compile->closure oU2ca9@compile->closure) (set! oU2cab@pre-compile-r6rs-file (lambda (oU2d8a@filename) (oU2cad@load-r6rs-top-level oU2d8a@filename 'compile))) (set! oU2dfa@oU2cab@pre-compile-r6rs-file oU2cab@pre-compile-r6rs-file) (set! oU2cad@load-r6rs-top-level (lambda (oU2d8c@filename oU2d8d@how . oU2d90@args) (begin (oU97c@oU7b8@library-path (oU2c9b@local-library-path oU2d8c@filename)) (let ((oU2d92@x* (with-input-from-file oU2d8c@filename (lambda () (let oU2d94@f () (let ((oU2d96@x (oU6b5@oU587@read-annotated))) (if (eof-object? oU2d96@x) '() (cons oU2d96@x (oU2d94@f))))))))) (let ((oU2d98@t oU2d8d@how)) (if (memv oU2d98@t '(closure)) (oU28bf@oUe6b@pre-compile-r6rs-top-level oU2d92@x*) (if (memv oU2d98@t '(load)) (begin (oU2c99@command-line (cons oU2d8c@filename (car oU2d90@args))) (oU6c3@oU5a3@mosh-cache-dir (create-mosh-cache-dir)) (if (oU6c3@oU5a3@mosh-cache-dir) (gensym-prefix-set! (oU2cb3@prefix-inc! (string-append (oU6c3@oU5a3@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (oU2d9a@file) ((call/cc (lambda (oU2d9e@oU2d9c) (lambda () (with-exception-handler (lambda (oU2da0@c) ((call/cc (lambda (oU2da2@oU2d9d) (oU2d9e@oU2d9c (lambda () (if '#t '#t (oU2da2@oU2d9d (lambda () (raise-continuable oU2da0@c)))))))))) (lambda () (delete-file (string-append (oU6c3@oU5a3@mosh-cache-dir) '"/" oU2d9a@file))))))))) (directory-list (oU6c3@oU5a3@mosh-cache-dir))) (void)) (let ((oU2da4@compiled (oU28be@oUe69@compile-r6rs-top-level oU2d92@x*))) (begin (if (and (oU6c3@oU5a3@mosh-cache-dir) (not (symbol-value '%disable-acc))) (oU980@oU7c0@serialize-all oU6bd@oU597@serialize-library oU719@oU6d2@compile-core-expr) (void)) (oU2da4@compiled)))) (if (memv oU2d98@t '(compile)) (begin (oU28be@oUe69@compile-r6rs-top-level oU2d92@x*) (oU980@oU7c0@serialize-all oU6bd@oU597@serialize-library oU719@oU6d2@compile-core-expr)) (if '#f '#f (void)))))))))) (set! oU2dfb@oU2cad@load-r6rs-top-level oU2cad@load-r6rs-top-level) (set! oU2caf@load-r6rs-top-level-sexp (lambda (oU2da6@import-spec oU2da7@thunk) (let ((oU2db2@oU2dab oU97c@oU7b8@library-path) (oU2db3@oU2dad oU6c3@oU5a3@mosh-cache-dir) (oU2db4@oU2daf (oU2c9b@local-library-path '"")) (oU2db5@oU2db1 (create-mosh-cache-dir))) (let ((oU2dba@swap (lambda () (begin (let ((oU2dbc@t (oU2db2@oU2dab))) (begin (oU2db2@oU2dab oU2db4@oU2daf) (set! oU2db4@oU2daf oU2dbc@t))) (let ((oU2dbe@t (oU2db3@oU2dad))) (begin (oU2db3@oU2dad oU2db5@oU2db1) (set! oU2db5@oU2db1 oU2dbe@t))))))) (dynamic-wind oU2dba@swap (lambda () (begin (if (oU6c3@oU5a3@mosh-cache-dir) (gensym-prefix-set! (oU2cb3@prefix-inc! (string-append (oU6c3@oU5a3@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((oU2dc4@oU2dc1 oU2c99@command-line) (oU2dc5@oU2dc3 '())) (let ((oU2dc8@swap (lambda () (let ((oU2dca@t (oU2dc4@oU2dc1))) (begin (oU2dc4@oU2dc1 oU2dc5@oU2dc3) (set! oU2dc5@oU2dc3 oU2dca@t)))))) (dynamic-wind oU2dc8@swap (lambda () ((oU28be@oUe69@compile-r6rs-top-level (list (cons 'import oU2da6@import-spec) (list oU2da7@thunk))))) oU2dc8@swap))))) oU2dba@swap))))) (set! oU2dfc@oU2caf@load-r6rs-top-level-sexp oU2caf@load-r6rs-top-level-sexp) (set! oU2cb1@prefix-inc (lambda (oU2dcc@prefix-string) (let ((oU2dce@prefix (symbol->string oU2dcc@prefix-string))) (let ((oU2dd0@len (string-length oU2dce@prefix))) (let oU2dd8@loop ((oU2dd2@i (- oU2dd0@len '1)) (oU2dd3@carry? '#t) (oU2dd4@accum '())) (if (< oU2dd2@i '0) (string->symbol (list->string (if oU2dd3@carry? (cons '#\a oU2dd4@accum) oU2dd4@accum))) (if oU2dd3@carry? (let ((oU2dda@next-integer (+ '1 (char->integer (string-ref oU2dce@prefix oU2dd2@i))))) (if (= oU2dda@next-integer '123) (oU2dd8@loop (- oU2dd2@i '1) '#f (cons '#\A oU2dd4@accum)) (if (= oU2dda@next-integer '91) (oU2dd8@loop (- oU2dd2@i '1) '#t (cons '#\a oU2dd4@accum)) (oU2dd8@loop (- oU2dd2@i '1) '#f (cons (integer->char oU2dda@next-integer) oU2dd4@accum))))) (oU2dd8@loop (- oU2dd2@i '1) '#f (cons (string-ref oU2dce@prefix oU2dd2@i) oU2dd4@accum))))))))) (set! oU2dfd@oU2cb1@prefix-inc oU2cb1@prefix-inc) (set! oU2cb3@prefix-inc! (lambda (oU2ddc@file) (begin (if (not (file-exists? oU2ddc@file)) (call-with-output-file oU2ddc@file (lambda (oU2dde@port) (write 'd oU2dde@port))) (void)) (let ((oU2de0@prefix (call-with-input-file oU2ddc@file read))) (let ((oU2de2@next-prefix (oU2cb1@prefix-inc oU2de0@prefix))) (begin (call-with-port (open-file-output-port oU2ddc@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (oU2de4@port) (write oU2de2@next-prefix oU2de4@port))) oU2de0@prefix)))))) (set! oU2dfe@oU2cb3@prefix-inc! oU2cb3@prefix-inc!) (begin (oU981@oU7c2@current-precompiled-library-loader oU6be@oU599@load-serialized-library) (set-symbol-value! 'load oU2c9f@load) (set-symbol-value! 'pre-compile-r6rs-file oU2cab@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs oU2ca3@eval-top-level) (set-symbol-value! 'int-env-syms oU28a0@oUe2d@interaction-environment-symbols) (set-symbol-value! 'expanded2core oU718@oU6d0@expanded->core) (set-symbol-value! 'trace-printer oU2c97@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (oU2cb4@c) (condition (oU2be0@oU29ea@make-non-continuable-violation) (oU2bd6@oU29d1@make-who-condition 'raise) (oU2b9a@oU2932@make-message-condition '"returned from non-continuable exception") (oU2bcc@oU29b6@make-irritants-condition (list oU2cb4@c))))) (oU2c89@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (oU2c89@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (oU2c87@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (oU2c87@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (oU2c87@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((oU2cb6@prefix (lambda (oU2cb8@ext oU2cb9@ls) (append (map (lambda (oU2cbc@x) (string-append oU2cb8@ext oU2cbc@x)) oU2cb9@ls) oU2cb9@ls)))) (oU97d@oU7ba@library-extensions (oU2cb6@prefix '".mosh" (oU97d@oU7ba@library-extensions)))) (current-exception-handler (lambda (oU2cbe@c) (if (condition? oU2cbe@c) (oU2c8f@condition-printer oU2cbe@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" oU2cbe@c)))) (if ((call/cc (lambda (oU2cc2@oU2cc0) (lambda () (with-exception-handler (lambda (oU2cc4@c) ((call/cc (lambda (oU2cc6@oU2cc1) (oU2cc2@oU2cc0 (lambda () (if '#t '#f (oU2cc6@oU2cc1 (lambda () (raise-continuable oU2cc4@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (oU2caf@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (oU2c99@command-line)) (let ((oU2cd0@oU2cc9 oU2c99@command-line) (oU2cd1@oU2ccb oU6c3@oU5a3@mosh-cache-dir) (oU2cd2@oU2ccd '()) (oU2cd3@oU2ccf (create-mosh-cache-dir))) (let ((oU2cd8@swap (lambda () (begin (let ((oU2cda@t (oU2cd0@oU2cc9))) (begin (oU2cd0@oU2cc9 oU2cd2@oU2ccd) (set! oU2cd2@oU2ccd oU2cda@t))) (let ((oU2cdc@t (oU2cd1@oU2ccb))) (begin (oU2cd1@oU2ccb oU2cd3@oU2ccf) (set! oU2cd3@oU2ccf oU2cdc@t))))))) (dynamic-wind oU2cd8@swap (lambda () (begin (if (oU6c3@oU5a3@mosh-cache-dir) (gensym-prefix-set! (oU2cb3@prefix-inc! (string-append (oU6c3@oU5a3@mosh-cache-dir) '"/prefix.txt"))) (void)) (oU2c95@repl))) oU2cd8@swap))) (begin (oU97c@oU7b8@library-path (oU2c9b@local-library-path (car (oU2c99@command-line)))) (set! oU2c85@x* (with-input-from-file (car (oU2c99@command-line)) (lambda () (let oU2cde@f () (let ((oU2ce0@x (oU6b5@oU587@read-annotated))) (if (eof-object? oU2ce0@x) '() (cons oU2ce0@x (oU2cde@f)))))))) (oU2c99@command-line (cons (car (oU2c99@command-line)) (cdr (oU2c99@command-line)))) (oU6c3@oU5a3@mosh-cache-dir (create-mosh-cache-dir)) (if (oU6c3@oU5a3@mosh-cache-dir) (gensym-prefix-set! (oU2cb3@prefix-inc! (string-append (oU6c3@oU5a3@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (oU2ce2@file) ((call/cc (lambda (oU2ce6@oU2ce4) (lambda () (with-exception-handler (lambda (oU2ce8@c) ((call/cc (lambda (oU2cea@oU2ce5) (oU2ce6@oU2ce4 (lambda () (if '#t '#t (oU2cea@oU2ce5 (lambda () (raise-continuable oU2ce8@c)))))))))) (lambda () (delete-file (string-append (oU6c3@oU5a3@mosh-cache-dir) '"/" oU2ce2@file))))))))) (directory-list (oU6c3@oU5a3@mosh-cache-dir))) (void)) (let ((oU2cec@compiled (oU28be@oUe69@compile-r6rs-top-level oU2c85@x*))) (begin (if (and (oU6c3@oU5a3@mosh-cache-dir) (not (symbol-value '%disable-acc))) (oU980@oU7c0@serialize-all oU6bd@oU597@serialize-library oU719@oU6d2@compile-core-expr) (void)) (oU2cec@compiled))))))))
