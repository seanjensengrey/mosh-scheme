;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! wU287d@library-file-path->cache-path (unspecified)) (set! wU287f@read-annotated (unspecified)) (set! wU2881@annotation-stripped (unspecified)) (set! wU2883@annotation? (unspecified)) (set! wU2885@annotation-source (unspecified)) (set! wU2887@annotation-expression (unspecified)) (set! wU2889@scm->fasl (unspecified)) (set! wU288b@fasl-save (unspecified)) (set! wU288d@fasl-load (unspecified)) (set! wU288f@serialize-library (unspecified)) (set! wU2891@load-serialized-library (unspecified)) (set! wU2893@make-record-printer (unspecified)) (set! wU2895@compile-core (unspecified)) (set! wU2897@read-library-source-file (unspecified)) (set! wU2899@make-parameter (unspecified)) (set! wU289b@mosh-cache-dir (unspecified)) (set! wU2931@file-options-spec (unspecified)) (set! wU287d@library-file-path->cache-path (lambda (wU2932@x) (call-with-values (lambda () (open-string-output-port)) (lambda (wU2938@wU2935 wU2939@wU2937) (let ((wU293c@extract wU2939@wU2937) (wU293d@p wU2938@wU2935)) (let ((wU2941@display-hex '#f)) (begin (set! wU2941@display-hex (lambda (wU294a@n) (if (<= '0 wU294a@n '9) (display wU294a@n wU293d@p) (display (integer->char (+ (char->integer '#\a) (- wU294a@n '10))) wU293d@p)))) (begin (let wU2944@f ((wU2942@ls (string-split wU2932@x '#\/))) (if (not (null? wU2942@ls)) (begin (display '"_" wU293d@p) (for-each (lambda (wU2946@c) (if (or (char<=? '#\a wU2946@c '#\z) (char<=? '#\A wU2946@c '#\Z) (char<=? '#\0 wU2946@c '#\9) (memv wU2946@c '(#\- #\. #\_ #\~))) (display wU2946@c wU293d@p) (begin (display '"%" wU293d@p) (let ((wU2948@n (char->integer wU2946@c))) (begin (wU2941@display-hex (quotient wU2948@n '16)) (wU2941@display-hex (remainder wU2948@n '16))))))) (string->list (car wU2942@ls))) (wU2944@f (cdr wU2942@ls))) (void))) (wU293c@extract))))))))) (set! wU29ac@wU287d@library-file-path->cache-path wU287d@library-file-path->cache-path) (set! wU287f@read-annotated read) (set! wU29ad@wU287f@read-annotated wU287f@read-annotated) (set! wU2881@annotation-stripped (lambda (wU294c@x) (wU2887@annotation-expression wU294c@x))) (set! wU29ae@wU2881@annotation-stripped wU2881@annotation-stripped) (set! wU2883@annotation? (lambda (wU294e@x) (source-info wU294e@x))) (set! wU29af@wU2883@annotation? wU2883@annotation?) (set! wU2885@annotation-source (lambda (wU2950@x) (source-info wU2950@x))) (set! wU29b0@wU2885@annotation-source wU2885@annotation-source) (set! wU2887@annotation-expression (lambda (wU2952@x) (if (pair? wU2952@x) (cons (car wU2952@x) (cdr wU2952@x)) wU2952@x))) (set! wU29b1@wU2887@annotation-expression wU2887@annotation-expression) (set! wU2889@scm->fasl (lambda (wU2954@filename) (string-append (wU289b@mosh-cache-dir) '"/" (wU287d@library-file-path->cache-path wU2954@filename) '".mosh-fasl"))) (set! wU29b2@wU2889@scm->fasl wU2889@scm->fasl) (set! wU288b@fasl-save (lambda (wU2956@filename wU2957@obj) (call-with-port (open-file-output-port wU2956@filename) (lambda (wU295a@port) ((symbol-value 'fasl-write!) wU2957@obj wU295a@port))))) (set! wU29b3@wU288b@fasl-save wU288b@fasl-save) (set! wU288d@fasl-load (lambda (wU295c@filename) (call-with-port (open-file-input-port wU295c@filename) (symbol-value 'fasl-read!)))) (set! wU29b4@wU288d@fasl-load wU288d@fasl-load) (set! wU288f@serialize-library (lambda (wU295e@filename wU295f@obj) (begin (let ((wU2962@expanded2core (symbol-value 'expanded2core))) (let ((wU2964@compile (symbol-value 'compile-w/o-halt))) (let ((wU2966@code wU295f@obj)) (let ((wU2968@pivot (cddddr (cddddr wU2966@code)))) (let ((wU296a@visit (wU2964@compile (wU2962@expanded2core (car wU2968@pivot))))) (begin (set-car! wU2968@pivot wU296a@visit) (let ((wU296c@pivot (cdr wU2968@pivot))) (let ((wU296e@invoke (wU2964@compile (wU2962@expanded2core (car wU296c@pivot))))) (set-car! wU296c@pivot wU296e@invoke))))))))) (let ((wU2970@fasl-file (wU2889@scm->fasl wU295e@filename))) (begin (if (file-exists? wU2970@fasl-file) (delete-file wU2970@fasl-file) (void)) ((call/cc (lambda (wU2974@wU2972) (lambda () (with-exception-handler (lambda (wU2976@c) ((call/cc (lambda (wU2978@wU2973) (wU2974@wU2972 (lambda () (if '#t (begin (format (current-error-port) '"Warning:serialize-library failed " wU295e@filename) (if (file-exists? wU2970@fasl-file) (delete-file wU2970@fasl-file) (void)) '#f) (wU2978@wU2973 (lambda () (raise-continuable wU2976@c)))))))))) (lambda () (wU288b@fasl-save wU2970@fasl-file wU295f@obj)))))))))))) (set! wU29b5@wU288f@serialize-library wU288f@serialize-library) (set! wU2891@load-serialized-library (lambda (wU297a@filename wU297b@obj) (and (wU289b@mosh-cache-dir) (let ((wU297e@fasl-file (wU2889@scm->fasl wU297a@filename))) (if (and (file-exists? wU297e@fasl-file) ((symbol-value 'file-newer?) wU297e@fasl-file wU297a@filename)) (let ((wU2980@expanded2core (symbol-value 'expanded2core))) (let ((wU2982@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((wU2984@code (wU288d@fasl-load wU297e@fasl-file))) (let ((wU2986@pivot (cddddr (cddddr wU2984@code)))) (let ((wU2988@visit (car wU2986@pivot))) (let ((wU298a@visit-proc (lambda () (wU2982@eval-compiled-core wU2988@visit)))) (begin (set-car! wU2986@pivot wU298a@visit-proc) (let ((wU298c@pivot (cdr wU2986@pivot))) (let ((wU298e@invoke (car wU298c@pivot))) (begin (set-car! wU298c@pivot (lambda () (wU2982@eval-compiled-core wU298e@invoke))) (apply wU297b@obj wU2984@code))))))))))) '#f))))) (set! wU29b6@wU2891@load-serialized-library wU2891@load-serialized-library) (set! wU2893@make-record-printer (lambda (wU2990@name wU2991@printer) (lambda wU2994@x (begin (display '"record printer") (for-each display wU2994@x))))) (set! wU29b7@wU2893@make-record-printer wU2893@make-record-printer) (set! wU2895@compile-core (lambda wU2996@x (apply error 'comile-core '"not implementated" wU2996@x))) (set! wU29b8@wU2895@compile-core wU2895@compile-core) (set! wU2897@read-library-source-file (lambda (wU2998@file-name) (with-input-from-file wU2998@file-name wU287f@read-annotated))) (set! wU29b9@wU2897@read-library-source-file wU2897@read-library-source-file) (set! wU2899@make-parameter (lambda wU29a8 (let ((wU29a9 (length wU29a8))) (if (= wU29a9 '1) (apply (lambda (wU299a@x) (wU2899@make-parameter wU299a@x (lambda (wU299c@x) wU299c@x))) wU29a8) (if (= wU29a9 '2) (apply (lambda (wU299e@x wU299f@fender) (let ((wU29a2@x (wU299f@fender wU299e@x))) (lambda wU29a6 (let ((wU29a7 (length wU29a6))) (if (= wU29a7 '0) (apply (lambda () wU29a2@x) wU29a6) (if (= wU29a7 '1) (apply (lambda (wU29a4@v) (set! wU29a2@x (wU299f@fender wU29a4@v))) wU29a6) (error 'apply '"invalid arg count"))))))) wU29a8) (error 'apply '"invalid arg count")))))) (set! wU29ba@wU2899@make-parameter wU2899@make-parameter) (set! wU289b@mosh-cache-dir (wU2899@make-parameter '#f)) (set! wU29bb@wU289b@mosh-cache-dir wU289b@mosh-cache-dir) (set! wU2931@file-options-spec (lambda (wU29aa@x) wU29aa@x)) (set! wU29bc@wU2931@file-options-spec wU2931@file-options-spec) (void))
(begin (set! wU29c2@current-primitive-locations (unspecified)) (set! wU29c4@mutable? (unspecified)) (set! wU29c6@rewriter (unspecified)) (set! wU29c8@expanded->core (unspecified)) (set! wU29ca@compile-core-expr (unspecified)) (set! wU29cc@pretty-print (unspecified)) (set! wU29ce@compile-core-expr-to-port (unspecified)) (set! wU29c2@current-primitive-locations (wU29ba@wU2899@make-parameter (lambda (wU29cf@x) '#f) (lambda (wU29d1@p) wU29d1@p))) (set! wU2a0d@wU29c2@current-primitive-locations wU29c2@current-primitive-locations) (set! wU29c4@mutable? (lambda (wU29d3@x) (or (pair? wU29d3@x) (vector? wU29d3@x) (hashtable? wU29d3@x)))) (set! wU2a0e@wU29c4@mutable? wU29c4@mutable?) (set! wU29c6@rewriter (lambda (wU29d5@quote-hack?) (let ((wU29d8@f '#f)) (begin (set! wU29d8@f (lambda (wU29d9@x) (if (pair? wU29d9@x) (let ((wU29db@t (car wU29d9@x))) (if (memv wU29db@t '(quote)) (if (and wU29d5@quote-hack? (wU29c4@mutable? (cadr wU29d9@x))) (let ((wU29dd@g (gensym))) (begin (set-symbol-value! wU29dd@g (cadr wU29d9@x)) wU29dd@g)) wU29d9@x) (if (memv wU29db@t '(case-lambda)) (cons 'case-lambda (map (lambda (wU29df@x) (cons (car wU29df@x) (map wU29d8@f (cdr wU29df@x)))) (cdr wU29d9@x))) (if (memv wU29db@t '(lambda)) (cons* 'lambda (cadr wU29d9@x) (map wU29d8@f (cddr wU29d9@x))) (if (memv wU29db@t '(letrec)) (let ((wU29e1@bindings (cadr wU29d9@x)) (wU29e2@body* (cddr wU29d9@x))) (let ((wU29e5@lhs* (map car wU29e1@bindings)) (wU29e6@rhs* (map cadr wU29e1@bindings))) (cons* 'letrec (map list wU29e5@lhs* (map wU29d8@f wU29e6@rhs*)) (map wU29d8@f wU29e2@body*)))) (if (memv wU29db@t '(letrec*)) (let ((wU29e9@bindings (cadr wU29d9@x)) (wU29ea@body* (cddr wU29d9@x))) (let ((wU29ed@lhs* (map car wU29e9@bindings)) (wU29ee@rhs* (map cadr wU29e9@bindings))) (cons* 'letrec* (map list wU29ed@lhs* (map wU29d8@f wU29ee@rhs*)) (map wU29d8@f wU29ea@body*)))) (if (memv wU29db@t '(library-letrec*)) (let ((wU29f1@name (cadr wU29d9@x)) (wU29f2@x (cdr wU29d9@x))) (let ((wU29f5@bindings (cadr wU29f2@x)) (wU29f6@body* (cddr wU29f2@x))) (let ((wU29f9@lhs* (map car wU29f5@bindings)) (wU29fa@lhs** (map cadr wU29f5@bindings)) (wU29fb@rhs* (map caddr wU29f5@bindings))) (cons* 'library-letrec* wU29f1@name (map list wU29f9@lhs* wU29fa@lhs** (map wU29d8@f wU29fb@rhs*)) (map wU29d8@f wU29f6@body*))))) (if (memv wU29db@t '(begin)) (cons 'begin (map wU29d8@f (cdr wU29d9@x))) (if (memv wU29db@t '(set!)) (list 'set! (cadr wU29d9@x) (wU29d8@f (caddr wU29d9@x))) (if (memv wU29db@t '(primitive)) (let ((wU29ff@op (cadr wU29d9@x))) (let ((wU2a01@t ((wU29c2@current-primitive-locations) wU29ff@op))) (if wU2a01@t ((lambda (wU2a03@loc) wU2a03@loc) wU2a01@t) wU29ff@op))) (if (memv wU29db@t '(define)) wU29d9@x (if (list? wU29d9@x) (map wU29d8@f wU29d9@x) (error 'rewrite '"invalid form ~s ~s" wU29d9@x (list? wU29d9@x)))))))))))))) wU29d9@x))) wU29d8@f)))) (set! wU2a0f@wU29c6@rewriter wU29c6@rewriter) (set! wU29c8@expanded->core (lambda (wU2a05@x) ((wU29c6@rewriter '#f) wU2a05@x))) (set! wU2a10@wU29c8@expanded->core wU29c8@expanded->core) (set! wU29ca@compile-core-expr (lambda (wU2a07@x) ((wU29c6@rewriter '#f) wU2a07@x))) (set! wU2a11@wU29ca@compile-core-expr wU29ca@compile-core-expr) (set! wU29cc@pretty-print write) (set! wU2a12@wU29cc@pretty-print wU29cc@pretty-print) (set! wU29ce@compile-core-expr-to-port (lambda (wU2a09@x wU2a0a@p) (wU29cc@pretty-print ((wU29c6@rewriter '#f) wU2a09@x) wU2a0a@p))) (set! wU2a13@wU29ce@compile-core-expr-to-port wU29ce@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! wU2a62@make-collection (unspecified)) (set! wU2a64@current-library-collection (unspecified)) (set! wU2a66@rp (unspecified)) (set! wU2a70@library? (unspecified)) (set! wU2a72@library-id (unspecified)) (set! wU2a74@set-library-id! (unspecified)) (set! wU2a76@library-name (unspecified)) (set! wU2a78@set-library-name! (unspecified)) (set! wU2a7a@library-version (unspecified)) (set! wU2a7c@set-library-version! (unspecified)) (set! wU2a7e@library-imp* (unspecified)) (set! wU2a80@set-library-imp*! (unspecified)) (set! wU2a82@library-vis* (unspecified)) (set! wU2a84@set-library-vis*! (unspecified)) (set! wU2a86@library-inv* (unspecified)) (set! wU2a88@set-library-inv*! (unspecified)) (set! wU2a8a@library-subst (unspecified)) (set! wU2a8c@set-library-subst! (unspecified)) (set! wU2a8e@library-env (unspecified)) (set! wU2a90@set-library-env! (unspecified)) (set! wU2a92@library-visit-state (unspecified)) (set! wU2a94@set-library-visit-state! (unspecified)) (set! wU2a96@library-invoke-state (unspecified)) (set! wU2a98@set-library-invoke-state! (unspecified)) (set! wU2a9a@library-visit-code (unspecified)) (set! wU2a9c@set-library-visit-code! (unspecified)) (set! wU2a9e@library-invoke-code (unspecified)) (set! wU2aa0@set-library-invoke-code! (unspecified)) (set! wU2aa2@library-visible? (unspecified)) (set! wU2aa4@set-library-visible?! (unspecified)) (set! wU2aa6@library-source-file-name (unspecified)) (set! wU2aa8@set-library-source-file-name! (unspecified)) (set! wU2aaa@dummy (unspecified)) (set! wU2aac@find-dependencies (unspecified)) (set! wU2aae@find-library-by (unspecified)) (set! wU2ab0@library-path (unspecified)) (set! wU2ab2@library-extensions (unspecified)) (set! wU2ab4@library-name->file-name (unspecified)) (set! wU2ab6@file-locator (unspecified)) (set! wU2ab8@serialize-all (unspecified)) (set! wU2aba@current-precompiled-library-loader (unspecified)) (set! wU2abc@try-load-from-file (unspecified)) (set! wU2abe@library-loader (unspecified)) (set! wU2ac0@current-library-expander (unspecified)) (set! wU2ac2@external-pending-libraries (unspecified)) (set! wU2ac4@find-external-library (unspecified)) (set! wU2ac6@find-library-by-name (unspecified)) (set! wU2ac8@library-exists? (unspecified)) (set! wU2aca@find-library-by-spec/die (unspecified)) (set! wU2acc@label->binding-table (unspecified)) (set! wU2ace@install-library-record (unspecified)) (set! wU2ad0@install-library (unspecified)) (set! wU2ad2@imported-label->binding (unspecified)) (set! wU2ad4@invoke-library (unspecified)) (set! wU2ad6@visit-library (unspecified)) (set! wU2ad8@invoke-library-by-spec (unspecified)) (set! wU2ada@installed-libraries (unspecified)) (set! wU2adc@library-spec (unspecified)) (set! wU2a62@make-collection (lambda () (let ((wU2add@set '())) (let ((wU2ae0@set-cons '#f)) (begin (set! wU2ae0@set-cons (lambda (wU2ae5@x wU2ae6@ls) (if (memq wU2ae5@x wU2ae6@ls) wU2ae6@ls (cons wU2ae5@x wU2ae6@ls)))) (lambda wU2ae3 (let ((wU2ae4 (length wU2ae3))) (if (= wU2ae4 '0) (apply (lambda () wU2add@set) wU2ae3) (if (= wU2ae4 '1) (apply (lambda (wU2ae1@x) (set! wU2add@set (wU2ae0@set-cons wU2ae1@x wU2add@set))) wU2ae3) (error 'apply '"invalid arg count")))))))))) (set! wU2c51@wU2a62@make-collection wU2a62@make-collection) (set! wU2a64@current-library-collection (wU29ba@wU2899@make-parameter (wU2a62@make-collection) (lambda (wU2ae9@x) (begin (if (not (procedure? wU2ae9@x)) (assertion-violation 'current-library-collection '"not a procedure" wU2ae9@x) (void)) wU2ae9@x)))) (set! wU2c52@wU2a64@current-library-collection wU2a64@current-library-collection) (set! wU2a66@rp (wU29b7@wU2893@make-record-printer 'library (lambda (wU2aeb@x wU2aec@p wU2aed@wr) (begin (if (not (wU2a70@library? wU2aeb@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (wU2a7a@library-version wU2aeb@x)) (wU2a76@library-name wU2aeb@x) (append (wU2a76@library-name wU2aeb@x) (list (wU2a7a@library-version wU2aeb@x))))) wU2aec@p))))) (set! wU2c53@wU2a66@rp wU2a66@rp) (set! wU2a70@library? (lambda (wU2af1@x) (and (simple-struct? wU2af1@x) (eq? (simple-struct-name wU2af1@x) 'library)))) (set! wU2c54@wU2a70@library? wU2a70@library?) (set! wU2a72@library-id (lambda (wU2af3@x) (simple-struct-ref wU2af3@x '0))) (set! wU2c55@wU2a72@library-id wU2a72@library-id) (set! wU2a74@set-library-id! (lambda (wU2af5@x wU2af6@val) (simple-struct-set! wU2af5@x '0 wU2af6@val))) (set! wU2c56@wU2a74@set-library-id! wU2a74@set-library-id!) (set! wU2a76@library-name (lambda (wU2af9@x) (simple-struct-ref wU2af9@x '1))) (set! wU2c57@wU2a76@library-name wU2a76@library-name) (set! wU2a78@set-library-name! (lambda (wU2afb@x wU2afc@val) (simple-struct-set! wU2afb@x '1 wU2afc@val))) (set! wU2c58@wU2a78@set-library-name! wU2a78@set-library-name!) (set! wU2a7a@library-version (lambda (wU2aff@x) (simple-struct-ref wU2aff@x '2))) (set! wU2c59@wU2a7a@library-version wU2a7a@library-version) (set! wU2a7c@set-library-version! (lambda (wU2b01@x wU2b02@val) (simple-struct-set! wU2b01@x '2 wU2b02@val))) (set! wU2c5a@wU2a7c@set-library-version! wU2a7c@set-library-version!) (set! wU2a7e@library-imp* (lambda (wU2b05@x) (simple-struct-ref wU2b05@x '3))) (set! wU2c5b@wU2a7e@library-imp* wU2a7e@library-imp*) (set! wU2a80@set-library-imp*! (lambda (wU2b07@x wU2b08@val) (simple-struct-set! wU2b07@x '3 wU2b08@val))) (set! wU2c5c@wU2a80@set-library-imp*! wU2a80@set-library-imp*!) (set! wU2a82@library-vis* (lambda (wU2b0b@x) (simple-struct-ref wU2b0b@x '4))) (set! wU2c5d@wU2a82@library-vis* wU2a82@library-vis*) (set! wU2a84@set-library-vis*! (lambda (wU2b0d@x wU2b0e@val) (simple-struct-set! wU2b0d@x '4 wU2b0e@val))) (set! wU2c5e@wU2a84@set-library-vis*! wU2a84@set-library-vis*!) (set! wU2a86@library-inv* (lambda (wU2b11@x) (simple-struct-ref wU2b11@x '5))) (set! wU2c5f@wU2a86@library-inv* wU2a86@library-inv*) (set! wU2a88@set-library-inv*! (lambda (wU2b13@x wU2b14@val) (simple-struct-set! wU2b13@x '5 wU2b14@val))) (set! wU2c60@wU2a88@set-library-inv*! wU2a88@set-library-inv*!) (set! wU2a8a@library-subst (lambda (wU2b17@x) (simple-struct-ref wU2b17@x '6))) (set! wU2c61@wU2a8a@library-subst wU2a8a@library-subst) (set! wU2a8c@set-library-subst! (lambda (wU2b19@x wU2b1a@val) (simple-struct-set! wU2b19@x '6 wU2b1a@val))) (set! wU2c62@wU2a8c@set-library-subst! wU2a8c@set-library-subst!) (set! wU2a8e@library-env (lambda (wU2b1d@x) (simple-struct-ref wU2b1d@x '7))) (set! wU2c63@wU2a8e@library-env wU2a8e@library-env) (set! wU2a90@set-library-env! (lambda (wU2b1f@x wU2b20@val) (simple-struct-set! wU2b1f@x '7 wU2b20@val))) (set! wU2c64@wU2a90@set-library-env! wU2a90@set-library-env!) (set! wU2a92@library-visit-state (lambda (wU2b23@x) (simple-struct-ref wU2b23@x '8))) (set! wU2c65@wU2a92@library-visit-state wU2a92@library-visit-state) (set! wU2a94@set-library-visit-state! (lambda (wU2b25@x wU2b26@val) (simple-struct-set! wU2b25@x '8 wU2b26@val))) (set! wU2c66@wU2a94@set-library-visit-state! wU2a94@set-library-visit-state!) (set! wU2a96@library-invoke-state (lambda (wU2b29@x) (simple-struct-ref wU2b29@x '9))) (set! wU2c67@wU2a96@library-invoke-state wU2a96@library-invoke-state) (set! wU2a98@set-library-invoke-state! (lambda (wU2b2b@x wU2b2c@val) (simple-struct-set! wU2b2b@x '9 wU2b2c@val))) (set! wU2c68@wU2a98@set-library-invoke-state! wU2a98@set-library-invoke-state!) (set! wU2a9a@library-visit-code (lambda (wU2b2f@x) (simple-struct-ref wU2b2f@x '10))) (set! wU2c69@wU2a9a@library-visit-code wU2a9a@library-visit-code) (set! wU2a9c@set-library-visit-code! (lambda (wU2b31@x wU2b32@val) (simple-struct-set! wU2b31@x '10 wU2b32@val))) (set! wU2c6a@wU2a9c@set-library-visit-code! wU2a9c@set-library-visit-code!) (set! wU2a9e@library-invoke-code (lambda (wU2b35@x) (simple-struct-ref wU2b35@x '11))) (set! wU2c6b@wU2a9e@library-invoke-code wU2a9e@library-invoke-code) (set! wU2aa0@set-library-invoke-code! (lambda (wU2b37@x wU2b38@val) (simple-struct-set! wU2b37@x '11 wU2b38@val))) (set! wU2c6c@wU2aa0@set-library-invoke-code! wU2aa0@set-library-invoke-code!) (set! wU2aa2@library-visible? (lambda (wU2b3b@x) (simple-struct-ref wU2b3b@x '12))) (set! wU2c6d@wU2aa2@library-visible? wU2aa2@library-visible?) (set! wU2aa4@set-library-visible?! (lambda (wU2b3d@x wU2b3e@val) (simple-struct-set! wU2b3d@x '12 wU2b3e@val))) (set! wU2c6e@wU2aa4@set-library-visible?! wU2aa4@set-library-visible?!) (set! wU2aa6@library-source-file-name (lambda (wU2b41@x) (simple-struct-ref wU2b41@x '13))) (set! wU2c6f@wU2aa6@library-source-file-name wU2aa6@library-source-file-name) (set! wU2aa8@set-library-source-file-name! (lambda (wU2b43@x wU2b44@val) (simple-struct-set! wU2b43@x '13 wU2b44@val))) (set! wU2c70@wU2aa8@set-library-source-file-name! wU2aa8@set-library-source-file-name!) (set! wU2aaa@dummy '3) (set! wU2c71@wU2aaa@dummy wU2aaa@dummy) (set! wU2aac@find-dependencies (lambda (wU2b47@ls) (if (null? wU2b47@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! wU2c72@wU2aac@find-dependencies wU2aac@find-dependencies) (set! wU2aae@find-library-by (lambda (wU2b49@pred) (let wU2b4d@f ((wU2b4b@ls ((wU2a64@current-library-collection)))) (if (null? wU2b4b@ls) '#f (if (wU2b49@pred (car wU2b4b@ls)) (car wU2b4b@ls) (wU2b4d@f (cdr wU2b4b@ls))))))) (set! wU2c73@wU2aae@find-library-by wU2aae@find-library-by) (set! wU2ab0@library-path (wU29ba@wU2899@make-parameter '(".") (lambda (wU2b4f@x) (if (and (list? wU2b4f@x) (for-all string? wU2b4f@x)) (map (lambda (wU2b51@x) wU2b51@x) wU2b4f@x) (assertion-violation 'library-path '"not a list of strings" wU2b4f@x))))) (set! wU2c74@wU2ab0@library-path wU2ab0@library-path) (set! wU2ab2@library-extensions (wU29ba@wU2899@make-parameter '(".sls" ".ss" ".scm") (lambda (wU2b53@x) (if (and (list? wU2b53@x) (for-all string? wU2b53@x)) (map (lambda (wU2b55@x) wU2b55@x) wU2b53@x) (assertion-violation 'library-extensions '"not a list of strings" wU2b53@x))))) (set! wU2c75@wU2ab2@library-extensions wU2ab2@library-extensions) (set! wU2ab4@library-name->file-name (lambda (wU2b57@x) (call-with-values (lambda () (open-string-output-port)) (lambda (wU2b5d@wU2b5a wU2b5e@wU2b5c) (let ((wU2b61@extract wU2b5e@wU2b5c) (wU2b62@p wU2b5d@wU2b5a)) (let ((wU2b66@display-hex '#f)) (begin (set! wU2b66@display-hex (lambda (wU2b6f@n) (if (<= '0 wU2b6f@n '9) (display wU2b6f@n wU2b62@p) (display (integer->char (+ (char->integer '#\a) (- wU2b6f@n '10))) wU2b62@p)))) (begin (let wU2b69@f ((wU2b67@ls wU2b57@x)) (if (not (null? wU2b67@ls)) (begin (display '"/" wU2b62@p) (for-each (lambda (wU2b6b@c) (if (or (char<=? '#\a wU2b6b@c '#\z) (char<=? '#\A wU2b6b@c '#\Z) (char<=? '#\0 wU2b6b@c '#\9) (memv wU2b6b@c '(#\- #\. #\_ #\~))) (display wU2b6b@c wU2b62@p) (begin (display '"%" wU2b62@p) (let ((wU2b6d@n (char->integer wU2b6b@c))) (begin (wU2b66@display-hex (quotient wU2b6d@n '16)) (wU2b66@display-hex (remainder wU2b6d@n '16))))))) (string->list (symbol->string (car wU2b67@ls)))) (wU2b69@f (cdr wU2b67@ls))) (void))) (wU2b61@extract))))))))) (set! wU2c76@wU2ab4@library-name->file-name wU2ab4@library-name->file-name) (set! wU2ab6@file-locator (wU29ba@wU2899@make-parameter (lambda (wU2b71@x) (let ((wU2b73@str (wU2ab4@library-name->file-name wU2b71@x))) (let wU2b7b@f ((wU2b75@ls (wU2ab0@library-path)) (wU2b76@exts (wU2ab2@library-extensions)) (wU2b77@failed-list '())) (if (null? wU2b75@ls) (let ((wU2b85@wU2b80 '#f) (wU2b87@wU2b82 '#f) (wU2b89@wU2b81 '#f) (wU2b8c@wU2b7f '#f) (wU2b8e@make-library-resolution-condition '#f) (wU2b90@wU2b7d '#f) (wU2b92@wU2b7e '#f) (wU2b94@library-resolution-condition? '#f) (wU2b96@condition-library '#f) (wU2b98@condition-files '#f)) (begin (set! wU2b85@wU2b80 (make-record-type-descriptor '&library-resolution wU4e8c@wU4bd3@&condition-rtd 'wU2b83 '#f '#f '#((immutable library) (immutable files)))) (set! wU2b87@wU2b82 '#f) (set! wU2b89@wU2b81 (make-record-constructor-descriptor wU2b85@wU2b80 wU4e8d@wU4bd5@&condition-rcd wU2b87@wU2b82)) (set! wU2b8c@wU2b7f (record-predicate wU2b85@wU2b80)) (set! wU2b8e@make-library-resolution-condition (record-constructor wU2b89@wU2b81)) (set! wU2b90@wU2b7d (record-accessor wU2b85@wU2b80 '0)) (set! wU2b92@wU2b7e (record-accessor wU2b85@wU2b80 '1)) (set! wU2b94@library-resolution-condition? (condition-predicate wU2b85@wU2b80)) (set! wU2b96@condition-library (condition-accessor wU2b85@wU2b80 wU2b90@wU2b7d)) (set! wU2b98@condition-files (condition-accessor wU2b85@wU2b80 wU2b92@wU2b7e)) (raise (condition (wU4eac@wU4c6d@make-error) (wU4ece@wU4cc9@make-who-condition 'expander) (wU4e92@wU4c2a@make-message-condition '"cannot locate library in library-path") (wU2b8e@make-library-resolution-condition wU2b71@x (reverse wU2b77@failed-list)))))) (if (null? wU2b76@exts) (wU2b7b@f (cdr wU2b75@ls) (wU2ab2@library-extensions) wU2b77@failed-list) (let ((wU2b99@name (string-append (car wU2b75@ls) wU2b73@str (car wU2b76@exts)))) (if (file-exists? wU2b99@name) wU2b99@name (wU2b7b@f wU2b75@ls (cdr wU2b76@exts) (cons wU2b99@name wU2b77@failed-list))))))))) (lambda (wU2b9b@f) (if (procedure? wU2b9b@f) wU2b9b@f (assertion-violation 'file-locator '"not a procedure" wU2b9b@f))))) (set! wU2c77@wU2ab6@file-locator wU2ab6@file-locator) (set! wU2ab8@serialize-all (lambda (wU2b9d@serialize wU2b9e@compile) (let ((wU2ba2@library-desc '#f)) (begin (set! wU2ba2@library-desc (lambda (wU2ba5@x) (list (wU2a72@library-id wU2ba5@x) (wU2a76@library-name wU2ba5@x)))) (for-each (lambda (wU2ba3@x) (if (wU2aa6@library-source-file-name wU2ba3@x) (wU2b9d@serialize (wU2aa6@library-source-file-name wU2ba3@x) (list (wU2a72@library-id wU2ba3@x) (wU2a76@library-name wU2ba3@x) (wU2a7a@library-version wU2ba3@x) (map wU2ba2@library-desc (wU2a7e@library-imp* wU2ba3@x)) (map wU2ba2@library-desc (wU2a82@library-vis* wU2ba3@x)) (map wU2ba2@library-desc (wU2a86@library-inv* wU2ba3@x)) (wU2a8a@library-subst wU2ba3@x) (wU2a8e@library-env wU2ba3@x) (wU2b9e@compile (wU2a9a@library-visit-code wU2ba3@x)) (wU2b9e@compile (wU2a9e@library-invoke-code wU2ba3@x)) (wU2aa2@library-visible? wU2ba3@x))) (void))) ((wU2a64@current-library-collection))))))) (set! wU2c78@wU2ab8@serialize-all wU2ab8@serialize-all) (set! wU2aba@current-precompiled-library-loader (wU29ba@wU2899@make-parameter (lambda (wU2ba7@filename wU2ba8@sk) '#f))) (set! wU2c79@wU2aba@current-precompiled-library-loader wU2aba@current-precompiled-library-loader) (set! wU2abc@try-load-from-file (lambda (wU2bab@filename) ((wU2aba@current-precompiled-library-loader) wU2bab@filename (lambda wU2bd1 (let ((wU2bd2 (length wU2bd1))) (if (= wU2bd2 '11) (apply (lambda (wU2bad@id wU2bae@name wU2baf@ver wU2bb0@imp* wU2bb1@vis* wU2bb2@inv* wU2bb3@exp-subst wU2bb4@exp-env wU2bb5@visit-proc wU2bb6@invoke-proc wU2bb7@visible?) (let wU2bc5@f ((wU2bc3@deps (append wU2bb0@imp* wU2bb1@vis* wU2bb2@inv*))) (if (null? wU2bc3@deps) (begin (wU2ad0@install-library wU2bad@id wU2bae@name wU2baf@ver wU2bb0@imp* wU2bb1@vis* wU2bb2@inv* wU2bb3@exp-subst wU2bb4@exp-env wU2bb5@visit-proc wU2bb6@invoke-proc '#f '#f wU2bb7@visible? '#f) '#t) (let ((wU2bc7@d (car wU2bc3@deps))) (let ((wU2bc9@label (car wU2bc7@d)) (wU2bca@dname (cadr wU2bc7@d))) (let ((wU2bcd@l (wU2ac6@find-library-by-name wU2bca@dname))) (if (and (wU2a70@library? wU2bcd@l) (eq? wU2bc9@label (wU2a72@library-id wU2bcd@l))) (wU2bc5@f (cdr wU2bc3@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" wU2bae@name wU2bca@dname wU2bab@filename wU2bcd@l wU2bc9@label (wU2a72@library-id wU2bcd@l)) '#f)))))))) wU2bd1) (if (>= wU2bd2 '0) (apply (lambda wU2bcf@others '#f) wU2bd1) (error 'apply '"invalid arg count")))))))) (set! wU2c7a@wU2abc@try-load-from-file wU2abc@try-load-from-file) (set! wU2abe@library-loader (wU29ba@wU2899@make-parameter (lambda (wU2bd3@x) (let ((wU2bd5@file-name ((wU2ab6@file-locator) wU2bd3@x))) (if (not wU2bd5@file-name) (assertion-violation '#f '"cannot file library" wU2bd3@x) (or (wU2abc@try-load-from-file wU2bd5@file-name) ((wU2ac0@current-library-expander) (wU29b9@wU2897@read-library-source-file wU2bd5@file-name) wU2bd5@file-name (lambda (wU2bd7@name) (if (not (fast-equal? wU2bd7@name wU2bd3@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (wU2bdd@wU2bda wU2bde@wU2bdc) (let ((wU2be1@e wU2bde@wU2bdc) (wU2be2@p wU2bdd@wU2bda)) (begin (display '"expected to find library " wU2be2@p) (write wU2bd3@x wU2be2@p) (display '" in file " wU2be2@p) (display wU2bd5@file-name wU2be2@p) (display '", found " wU2be2@p) (write wU2bd7@name wU2be2@p) (display '" instead" wU2be2@p) (wU2be1@e)))))) (void)))))))) (lambda (wU2be5@f) (if (procedure? wU2be5@f) wU2be5@f (assertion-violation 'library-locator '"not a procedure" wU2be5@f))))) (set! wU2c7b@wU2abe@library-loader wU2abe@library-loader) (set! wU2ac0@current-library-expander (wU29ba@wU2899@make-parameter (lambda (wU2be7@x) (assertion-violation 'library-expander '"not initialized")) (lambda (wU2be9@f) (if (procedure? wU2be9@f) wU2be9@f (assertion-violation 'library-expander '"not a procedure" wU2be9@f))))) (set! wU2c7c@wU2ac0@current-library-expander wU2ac0@current-library-expander) (set! wU2ac2@external-pending-libraries (wU29ba@wU2899@make-parameter '())) (set! wU2c7d@wU2ac2@external-pending-libraries wU2ac2@external-pending-libraries) (set! wU2ac4@find-external-library (lambda (wU2beb@name) (begin (if (member wU2beb@name (wU2ac2@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" wU2beb@name) (void)) (let ((wU2bf1@wU2bee wU2ac2@external-pending-libraries) (wU2bf2@wU2bf0 (cons wU2beb@name (wU2ac2@external-pending-libraries)))) (let ((wU2bf5@swap (lambda () (let ((wU2bf7@t (wU2bf1@wU2bee))) (begin (wU2bf1@wU2bee wU2bf2@wU2bf0) (set! wU2bf2@wU2bf0 wU2bf7@t)))))) (dynamic-wind wU2bf5@swap (lambda () (begin ((wU2abe@library-loader) wU2beb@name) (or (wU2aae@find-library-by (lambda (wU2bf9@x) (fast-equal? (wU2a76@library-name wU2bf9@x) wU2beb@name))) (assertion-violation '#f '"handling external library did not yield the correct library" wU2beb@name)))) wU2bf5@swap)))))) (set! wU2c7e@wU2ac4@find-external-library wU2ac4@find-external-library) (set! wU2ac6@find-library-by-name (lambda (wU2bfb@name) (or (wU2aae@find-library-by (lambda (wU2bfd@x) (fast-equal? (wU2a76@library-name wU2bfd@x) wU2bfb@name))) (wU2ac4@find-external-library wU2bfb@name)))) (set! wU2c7f@wU2ac6@find-library-by-name wU2ac6@find-library-by-name) (set! wU2ac8@library-exists? (lambda (wU2bff@name) (and (wU2aae@find-library-by (lambda (wU2c01@x) (fast-equal? (wU2a76@library-name wU2c01@x) wU2bff@name))) '#t))) (set! wU2c80@wU2ac8@library-exists? wU2ac8@library-exists?) (set! wU2aca@find-library-by-spec/die (lambda (wU2c03@spec) (let ((wU2c05@id (car wU2c03@spec))) (or (wU2aae@find-library-by (lambda (wU2c07@x) (eq? wU2c05@id (wU2a72@library-id wU2c07@x)))) (assertion-violation '#f '"cannot find library with required spec" wU2c03@spec))))) (set! wU2c81@wU2aca@find-library-by-spec/die wU2aca@find-library-by-spec/die) (set! wU2acc@label->binding-table (make-eq-hashtable)) (set! wU2c82@wU2acc@label->binding-table wU2acc@label->binding-table) (set! wU2ace@install-library-record (lambda (wU2c09@lib) (begin (let ((wU2c0b@exp-env (wU2a8e@library-env wU2c09@lib))) (for-each (lambda (wU2c0d@x) (let ((wU2c0f@label (car wU2c0d@x)) (wU2c10@binding (cdr wU2c0d@x))) (let ((wU2c13@binding (let ((wU2c15@t (car wU2c10@binding))) (if (memv wU2c15@t '(global)) (cons 'global (cons wU2c09@lib (cdr wU2c10@binding))) (if (memv wU2c15@t '(global-macro)) (cons 'global-macro (cons wU2c09@lib (cdr wU2c10@binding))) (if (memv wU2c15@t '(global-macro!)) (cons 'global-macro! (cons wU2c09@lib (cdr wU2c10@binding))) wU2c10@binding)))))) (begin (if (hashtable-ref wU2acc@label->binding-table wU2c0f@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" wU2c0f@label (hashtable-ref wU2acc@label->binding-table wU2c0f@label '#f) wU2c13@binding) (exit)) (void)) (hashtable-set! wU2acc@label->binding-table wU2c0f@label wU2c13@binding))))) wU2c0b@exp-env)) ((wU2a64@current-library-collection) wU2c09@lib)))) (set! wU2c83@wU2ace@install-library-record wU2ace@install-library-record) (set! wU2ad0@install-library (lambda (wU2c17@id wU2c18@name wU2c19@ver wU2c1a@imp* wU2c1b@vis* wU2c1c@inv* wU2c1d@exp-subst wU2c1e@exp-env wU2c1f@visit-proc wU2c20@invoke-proc wU2c21@visit-code wU2c22@invoke-code wU2c23@visible? wU2c24@source-file-name) (let ((wU2c33@imp-lib* (map wU2aca@find-library-by-spec/die wU2c1a@imp*)) (wU2c34@vis-lib* (map wU2aca@find-library-by-spec/die wU2c1b@vis*)) (wU2c35@inv-lib* (map wU2aca@find-library-by-spec/die wU2c1c@inv*))) (begin (if (not (and (symbol? wU2c17@id) (list? wU2c18@name) (list? wU2c19@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" wU2c17@id wU2c18@name wU2c19@ver) (void)) (if (wU2ac8@library-exists? wU2c18@name) (assertion-violation 'install-library '"library is already installed" wU2c18@name) (void)) (let ((wU2c39@lib (make-simple-struct 'library '15 (list wU2c17@id wU2c18@name wU2c19@ver wU2c33@imp-lib* wU2c34@vis-lib* wU2c35@inv-lib* wU2c1d@exp-subst wU2c1e@exp-env wU2c1f@visit-proc wU2c20@invoke-proc wU2c21@visit-code wU2c22@invoke-code wU2c23@visible? wU2c24@source-file-name)))) (wU2ace@install-library-record wU2c39@lib)))))) (set! wU2c84@wU2ad0@install-library wU2ad0@install-library) (set! wU2ad2@imported-label->binding (lambda (wU2c3b@lab) (hashtable-ref wU2acc@label->binding-table wU2c3b@lab '#f))) (set! wU2c85@wU2ad2@imported-label->binding wU2ad2@imported-label->binding) (set! wU2ad4@invoke-library (lambda (wU2c3d@lib) (let ((wU2c3f@invoke (wU2a96@library-invoke-state wU2c3d@lib))) (if (procedure? wU2c3f@invoke) (begin (wU2a98@set-library-invoke-state! wU2c3d@lib (lambda () (assertion-violation 'invoke '"circularity detected" wU2c3d@lib))) (for-each wU2ad4@invoke-library (wU2a86@library-inv* wU2c3d@lib)) (wU2a98@set-library-invoke-state! wU2c3d@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" wU2c3d@lib))) (wU2c3f@invoke) (wU2a98@set-library-invoke-state! wU2c3d@lib '#t)) (void))))) (set! wU2c86@wU2ad4@invoke-library wU2ad4@invoke-library) (set! wU2ad6@visit-library (lambda (wU2c41@lib) (let ((wU2c43@visit (wU2a92@library-visit-state wU2c41@lib))) (if (procedure? wU2c43@visit) (begin (wU2a94@set-library-visit-state! wU2c41@lib (lambda () (assertion-violation 'visit '"circularity detected" wU2c41@lib))) (for-each wU2ad4@invoke-library (wU2a82@library-vis* wU2c41@lib)) (wU2a94@set-library-visit-state! wU2c41@lib (lambda () (assertion-violation 'invoke '"first visit did not return" wU2c41@lib))) (wU2c43@visit) (wU2a94@set-library-visit-state! wU2c41@lib '#t)) (void))))) (set! wU2c87@wU2ad6@visit-library wU2ad6@visit-library) (set! wU2ad8@invoke-library-by-spec (lambda (wU2c45@spec) (wU2ad4@invoke-library (wU2aca@find-library-by-spec/die wU2c45@spec)))) (set! wU2c88@wU2ad8@invoke-library-by-spec wU2ad8@invoke-library-by-spec) (set! wU2ada@installed-libraries (lambda wU2c4d (let ((wU2c4e (length wU2c4d))) (if (= wU2c4e '1) (apply (lambda (wU2c47@all?) (let wU2c4b@f ((wU2c49@ls ((wU2a64@current-library-collection)))) (if (null? wU2c49@ls) '() (if (or wU2c47@all? (wU2aa2@library-visible? (car wU2c49@ls))) (cons (car wU2c49@ls) (wU2c4b@f (cdr wU2c49@ls))) (wU2c4b@f (cdr wU2c49@ls)))))) wU2c4d) (if (= wU2c4e '0) (apply (lambda () (wU2ada@installed-libraries '#f)) wU2c4d) (error 'apply '"invalid arg count")))))) (set! wU2c89@wU2ada@installed-libraries wU2ada@installed-libraries) (set! wU2adc@library-spec (lambda (wU2c4f@x) (begin (if (not (wU2a70@library? wU2c4f@x)) (assertion-violation 'library-spec '"not a library" wU2c4f@x) (void)) (list (wU2a72@library-id wU2c4f@x) (wU2a76@library-name wU2c4f@x) (wU2a7a@library-version wU2c4f@x))))) (set! wU2c8a@wU2adc@library-spec wU2adc@library-spec) (void))
(begin (set! wU2c8e@build-global-define (unspecified)) (set! wU2cff@build-lambda (unspecified)) (set! wU2d01@build-case-lambda (unspecified)) (set! wU2d2f@build-sequence (unspecified)) (set! wU2d31@build-void (unspecified)) (set! wU2d33@build-letrec (unspecified)) (set! wU2d35@build-let (unspecified)) (set! wU2d37@build-named-let (unspecified)) (set! wU2d39@build-letrec* (unspecified)) (set! wU2d3b@build-library-letrec* (unspecified)) (set! wU2d3d@build-receive (unspecified)) (set! wU2c8e@build-global-define (lambda (wU2d3e@x) (wU2d31@build-void))) (set! wU2dd2@wU2c8e@build-global-define wU2c8e@build-global-define) (set! wU2cff@build-lambda (lambda (wU2d40@ae wU2d41@vars wU2d42@exp) (list 'lambda wU2d41@vars wU2d42@exp))) (set! wU2dd3@wU2cff@build-lambda wU2cff@build-lambda) (set! wU2d01@build-case-lambda (lambda (wU2d46@ae wU2d47@vars* wU2d48@exp*) (let ((wU2d4d@build-error '#f) (wU2d4f@build-pred '#f) (wU2d51@build-apply '#f) (wU2d53@expand-case-lambda '#f)) (begin (set! wU2d4d@build-error (lambda (wU2d84@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! wU2d4f@build-pred (lambda (wU2d6c@ae wU2d6d@n wU2d6e@vars) (call-with-values (lambda () (let wU2d7a@f ((wU2d76@vars wU2d6e@vars) (wU2d77@count '0)) (if (pair? wU2d76@vars) (wU2d7a@f (cdr wU2d76@vars) (+ wU2d77@count '1)) (if (null? wU2d76@vars) (values wU2d77@count '=) (values wU2d77@count '>=))))) (lambda (wU2d7c@wU2d73 wU2d7d@wU2d75) (let ((wU2d80@pred wU2d7d@wU2d75) (wU2d81@count wU2d7c@wU2d73)) (list (list 'primitive wU2d80@pred) wU2d6d@n (list 'quote wU2d81@count))))))) (set! wU2d51@build-apply (lambda (wU2d64@ae wU2d65@g wU2d66@vars wU2d67@exp) (list '(primitive apply) (wU2cff@build-lambda wU2d64@ae wU2d66@vars wU2d67@exp) wU2d65@g))) (set! wU2d53@expand-case-lambda (lambda (wU2d54@ae wU2d55@vars wU2d56@exp*) (let ((wU2d5a@g (gensym)) (wU2d5b@n (gensym))) (list 'lambda wU2d5a@g (wU2d35@build-let wU2d54@ae (list wU2d5b@n) (list (list '(primitive length) wU2d5a@g)) (let wU2d62@f ((wU2d5e@vars* wU2d47@vars*) (wU2d5f@exp* wU2d56@exp*)) (if (null? wU2d5e@vars*) (wU2d4d@build-error wU2d54@ae) (list 'if (wU2d4f@build-pred wU2d54@ae wU2d5b@n (car wU2d5e@vars*)) (wU2d51@build-apply wU2d54@ae wU2d5a@g (car wU2d5e@vars*) (car wU2d5f@exp*)) (wU2d62@f (cdr wU2d5e@vars*) (cdr wU2d5f@exp*)))))))))) (if (= (length wU2d48@exp*) '1) (wU2cff@build-lambda wU2d46@ae (car wU2d47@vars*) (car wU2d48@exp*)) (wU2d53@expand-case-lambda wU2d46@ae wU2d47@vars* wU2d48@exp*)))))) (set! wU2dd4@wU2d01@build-case-lambda wU2d01@build-case-lambda) (set! wU2d2f@build-sequence (lambda (wU2d86@ae wU2d87@exps) (let wU2d8c@loop ((wU2d8a@exps wU2d87@exps)) (if (null? (cdr wU2d8a@exps)) (car wU2d8a@exps) (if (equal? (car wU2d8a@exps) (wU2d31@build-void)) (wU2d8c@loop (cdr wU2d8a@exps)) (cons 'begin wU2d8a@exps)))))) (set! wU2dd5@wU2d2f@build-sequence wU2d2f@build-sequence) (set! wU2d31@build-void (lambda () '((primitive void)))) (set! wU2dd6@wU2d31@build-void wU2d31@build-void) (set! wU2d33@build-letrec (lambda (wU2d8e@ae wU2d8f@vars wU2d90@val-exps wU2d91@body-exp) (if (null? wU2d8f@vars) wU2d91@body-exp (list 'letrec (map list wU2d8f@vars wU2d90@val-exps) wU2d91@body-exp)))) (set! wU2dd7@wU2d33@build-letrec wU2d33@build-letrec) (set! wU2d35@build-let (lambda (wU2d96@ae wU2d97@vars wU2d98@val-exps wU2d99@body-exp) (if (null? wU2d97@vars) wU2d99@body-exp (list 'let (map list wU2d97@vars wU2d98@val-exps) wU2d99@body-exp)))) (set! wU2dd8@wU2d35@build-let wU2d35@build-let) (set! wU2d37@build-named-let (lambda (wU2d9e@ae wU2d9f@name wU2da0@vars wU2da1@val-exps wU2da2@body-exp) (list 'let wU2d9f@name (map list wU2da0@vars wU2da1@val-exps) wU2da2@body-exp))) (set! wU2dd9@wU2d37@build-named-let wU2d37@build-named-let) (set! wU2d39@build-letrec* (lambda (wU2da8@ae wU2da9@vars wU2daa@val-exps wU2dab@body-exp) (if (null? wU2da9@vars) wU2dab@body-exp (wU2d35@build-let wU2da8@ae wU2da9@vars (map (lambda (wU2db0@x) (list 'quote '#f)) wU2da9@vars) (wU2d2f@build-sequence wU2da8@ae (append (map (lambda (wU2db2@lhs wU2db3@rhs) (list 'set! wU2db2@lhs wU2db3@rhs)) wU2da9@vars wU2daa@val-exps) (list wU2dab@body-exp))))))) (set! wU2dda@wU2d39@build-letrec* wU2d39@build-letrec*) (set! wU2d3b@build-library-letrec* (lambda (wU2db6@ae wU2db7@name wU2db8@vars wU2db9@locs wU2dba@val-exps wU2dbb@body-exp) (cons 'begin (append (map (lambda (wU2dc2@var) (cons 'set! (cons wU2dc2@var '((unspecified))))) wU2db8@vars) (append (apply append (map (lambda (wU2dc4@var wU2dc5@loc wU2dc6@val-exp) (list (list 'set! wU2dc4@var wU2dc6@val-exp) (list 'set! wU2dc5@loc wU2dc4@var))) wU2db8@vars wU2db9@locs wU2dba@val-exps)) (list wU2dbb@body-exp)))))) (set! wU2ddb@wU2d3b@build-library-letrec* wU2d3b@build-library-letrec*) (set! wU2d3d@build-receive (lambda (wU2dca@ae wU2dcb@vars wU2dcc@producer wU2dcd@body*) (begin (display '"************** in ") (cons 'receive (cons wU2dcb@vars (cons wU2dcc@producer wU2dcd@body*)))))) (set! wU2ddc@wU2d3d@build-receive wU2d3d@build-receive) (void))
(begin (set! wU2deb@file-options-macro (unspecified)) (set! wU2ded@set-cons (unspecified)) (set! wU2def@set-union (unspecified)) (set! wU2df4@top-mark* (unspecified)) (set! wU2df6@top-marked? (unspecified)) (set! wU2df8@gen-lexical (unspecified)) (set! wU2dfa@gen-global (unspecified)) (set! wU2dfc@gen-label (unspecified)) (set! wU2dfe@gen-top-level-label (unspecified)) (set! wU2e00@gen-define-label+loc (unspecified)) (set! wU2e02@gen-define-label (unspecified)) (set! wU2e0c@rib? (unspecified)) (set! wU2e0e@rib-sym* (unspecified)) (set! wU2e10@set-rib-sym*! (unspecified)) (set! wU2e12@rib-mark** (unspecified)) (set! wU2e14@set-rib-mark**! (unspecified)) (set! wU2e16@rib-label* (unspecified)) (set! wU2e18@set-rib-label*! (unspecified)) (set! wU2e1a@rib-sealed/freq (unspecified)) (set! wU2e1c@set-rib-sealed/freq! (unspecified)) (set! wU2e1e@rib-cache (unspecified)) (set! wU2e20@set-rib-cache! (unspecified)) (set! wU2e22@dummy (unspecified)) (set! wU2e24@make-empty-rib (unspecified)) (set! wU2e26@extend-rib! (unspecified)) (set! wU2e28@extend-rib/nc! (unspecified)) (set! wU2e2a@make-rib-map (unspecified)) (set! wU2e2c@seal-rib! (unspecified)) (set! wU2e2e@unseal-rib! (unspecified)) (set! wU2e30@make-full-rib (unspecified)) (set! wU2e32@rp (unspecified)) (set! wU2e3c@stx? (unspecified)) (set! wU2e3e@stx-expr (unspecified)) (set! wU2e40@set-stx-expr! (unspecified)) (set! wU2e42@stx-mark* (unspecified)) (set! wU2e44@set-stx-mark*! (unspecified)) (set! wU2e46@stx-subst* (unspecified)) (set! wU2e48@set-stx-subst*! (unspecified)) (set! wU2e4a@stx-ae* (unspecified)) (set! wU2e4c@set-stx-ae*! (unspecified)) (set! wU2e4e@dummy (unspecified)) (set! wU2e50@datum->stx (unspecified)) (set! wU2e52@gen-mark (unspecified)) (set! wU2e54@anti-mark (unspecified)) (set! wU2e56@anti-mark? (unspecified)) (set! wU2e58@mkstx (unspecified)) (set! wU2e5a@add-mark (unspecified)) (set! wU2e5c@add-subst (unspecified)) (set! wU2e5e@syntax-kind? (unspecified)) (set! wU2e60@syntax-vector->list (unspecified)) (set! wU2e62@syntax-pair? (unspecified)) (set! wU2e64@syntax-vector? (unspecified)) (set! wU2e66@syntax-null? (unspecified)) (set! wU2e68@syntax-list? (unspecified)) (set! wU2e6a@syntax-car (unspecified)) (set! wU2e6c@syntax-cdr (unspecified)) (set! wU2e6e@syntax->list (unspecified)) (set! wU2e70@id? (unspecified)) (set! wU2e72@id->sym (unspecified)) (set! wU2e74@bound-id=? (unspecified)) (set! wU2e76@free-id=? (unspecified)) (set! wU2e78@valid-bound-ids? (unspecified)) (set! wU2e7a@distinct-bound-ids? (unspecified)) (set! wU2e7c@bound-id-member? (unspecified)) (set! wU2e7e@self-evaluating? (unspecified)) (set! wU2e80@strip-annotations (unspecified)) (set! wU2e82@strip (unspecified)) (set! wU2e84@stx->datum (unspecified)) (set! wU2e86@id->label (unspecified)) (set! wU2e88@label->binding (unspecified)) (set! wU2e8a@make-binding (unspecified)) (set! wU2e8c@binding-type (unspecified)) (set! wU2e8e@binding-value (unspecified)) (set! wU2e90@raise-unbound-error (unspecified)) (set! wU2e92@syntax-type (unspecified)) (set! wU2ea0@sanitize-binding (unspecified)) (set! wU2ea2@make-variable-transformer (unspecified)) (set! wU2ea4@variable-transformer? (unspecified)) (set! wU2ea6@variable-transformer-procedure (unspecified)) (set! wU2ea8@make-eval-transformer (unspecified)) (set! wU2ff9@parse-define (unspecified)) (set! wU2ffb@parse-define-syntax (unspecified)) (set! wU2ffd@scheme-stx-hashtable (unspecified)) (set! wU2fff@scheme-stx (unspecified)) (set! wU3001@lexical-var (unspecified)) (set! wU3003@lexical-mutable? (unspecified)) (set! wU3005@set-lexical-mutable! (unspecified)) (set! wU3007@add-lexical (unspecified)) (set! wU3009@add-lexicals (unspecified)) (set! wU300b@letrec-helper (unspecified)) (set! wU300d@let-transformer (unspecified)) (set! wU300f@letrec-transformer (unspecified)) (set! wU3011@letrec*-transformer (unspecified)) (set! wU3013@fluid-let-syntax-transformer (unspecified)) (set! wU3015@type-descriptor-transformer (unspecified)) (set! wU3017@record-type-descriptor-transformer (unspecified)) (set! wU3019@record-constructor-descriptor-transformer (unspecified)) (set! wU301b@when-macro (unspecified)) (set! wU301d@unless-macro (unspecified)) (set! wU301f@if-transformer (unspecified)) (set! wU3021@and-transformer (unspecified)) (set! wU3023@or-transformer (unspecified)) (set! wU3025@case-macro (unspecified)) (set! wU3027@quote-transformer (unspecified)) (set! wU3029@case-lambda-transformer (unspecified)) (set! wU302b@lambda-transformer (unspecified)) (set! wU302d@bless (unspecified)) (set! wU302f@with-syntax-macro (unspecified)) (set! wU3031@invalid-fmls-error (unspecified)) (set! wU3033@let-macro (unspecified)) (set! wU3035@let-values-macro (unspecified)) (set! wU3037@let*-values-macro (unspecified)) (set! wU3039@trace-lambda-macro (unspecified)) (set! wU303b@trace-define-macro (unspecified)) (set! wU303d@trace-define-syntax-macro (unspecified)) (set! wU303f@trace-let/rec-syntax (unspecified)) (set! wU3041@trace-let-syntax-macro (unspecified)) (set! wU3043@trace-letrec-syntax-macro (unspecified)) (set! wU3045@guard-macro (unspecified)) (set! wU3047@define-enumeration-macro (unspecified)) (set! wU3049@time-macro (unspecified)) (set! wU304b@delay-macro (unspecified)) (set! wU304d@assert-macro (unspecified)) (set! wU304f@endianness-macro (unspecified)) (set! wU3051@identifier-syntax-macro (unspecified)) (set! wU3053@do-macro (unspecified)) (set! wU3055@let*-macro (unspecified)) (set! wU3057@or-macro (unspecified)) (set! wU3059@and-macro (unspecified)) (set! wU305b@cond-macro (unspecified)) (set! wU305d@do-include (unspecified)) (set! wU305f@include-macro (unspecified)) (set! wU3061@include-into-macro (unspecified)) (set! wU3063@syntax-rules-macro (unspecified)) (set! wU3065@quasiquote-macro (unspecified)) (set! wU3067@quasisyntax-macro (unspecified)) (set! wU3069@define-struct-macro (unspecified)) (set! wU306b@define-record-type-macro (unspecified)) (set! wU306d@define-condition-type-macro (unspecified)) (set! wU306f@incorrect-usage-macro (unspecified)) (set! wU3071@parameterize-macro (unspecified)) (set! wU3073@foreign-call-transformer (unspecified)) (set! wU3075@convert-pattern (unspecified)) (set! wU3077@syntax-dispatch (unspecified)) (set! wU3079@ellipsis? (unspecified)) (set! wU307b@underscore? (unspecified)) (set! wU307d@verify-literals (unspecified)) (set! wU307f@syntax-case-transformer (unspecified)) (set! wU3081@ellipsis-map (unspecified)) (set! wU3083@syntax-transformer (unspecified)) (set! wU3085@core-macro-transformer (unspecified)) (set! wU3087@symbol-macro (unspecified)) (set! wU3089@macro-transformer (unspecified)) (set! wU308b@local-macro-transformer (unspecified)) (set! wU308d@do-macro-call (unspecified)) (set! wU308f@chi-macro (unspecified)) (set! wU3091@chi-local-macro (unspecified)) (set! wU3093@chi-global-macro (unspecified)) (set! wU3095@chi-expr* (unspecified)) (set! wU3097@chi-application (unspecified)) (set! wU3099@chi-expr (unspecified)) (set! wU309b@chi-set! (unspecified)) (set! wU309d@verify-formals (unspecified)) (set! wU309f@chi-lambda-clause (unspecified)) (set! wU30a1@chi-lambda-clause* (unspecified)) (set! wU30a3@chi-defun (unspecified)) (set! wU30a5@chi-rhs (unspecified)) (set! wU30a7@expand-interaction-rhs*/init* (unspecified)) (set! wU30a9@chi-rhs* (unspecified)) (set! wU30ab@find-bound=? (unspecified)) (set! wU30ad@find-dups (unspecified)) (set! wU30af@chi-internal (unspecified)) (set! wU30b1@parse-module (unspecified)) (set! wU30bb@module-interface? (unspecified)) (set! wU30bd@module-interface-first-mark (unspecified)) (set! wU30bf@set-module-interface-first-mark! (unspecified)) (set! wU30c1@module-interface-exp-id-vec (unspecified)) (set! wU30c3@set-module-interface-exp-id-vec! (unspecified)) (set! wU30c5@module-interface-exp-lab-vec (unspecified)) (set! wU30c7@set-module-interface-exp-lab-vec! (unspecified)) (set! wU30c9@dummy (unspecified)) (set! wU30cb@module-interface-exp-id* (unspecified)) (set! wU30cd@chi-internal-module (unspecified)) (set! wU30cf@chi-body* (unspecified)) (set! wU30d1@expand-transformer (unspecified)) (set! wU30d3@parse-exports (unspecified)) (set! wU30d5@parse-library-name (unspecified)) (set! wU30d7@parse-library (unspecified)) (set! wU30d9@parse-import-spec* (unspecified)) (set! wU30db@make-top-rib (unspecified)) (set! wU30dd@make-collector (unspecified)) (set! wU30df@inv-collector (unspecified)) (set! wU30e1@vis-collector (unspecified)) (set! wU30e3@imp-collector (unspecified)) (set! wU30e5@chi-library-internal (unspecified)) (set! wU30e7@chi-interaction-expr (unspecified)) (set! wU30e9@library-body-expander (unspecified)) (set! wU30eb@core-library-expander (unspecified)) (set! wU30ed@parse-top-level-program (unspecified)) (set! wU30ef@top-level-expander (unspecified)) (set! wU30f1@rp (unspecified)) (set! wU30fb@env? (unspecified)) (set! wU30fd@env-names (unspecified)) (set! wU30ff@set-env-names! (unspecified)) (set! wU3101@env-labels (unspecified)) (set! wU3103@set-env-labels! (unspecified)) (set! wU3105@env-itc (unspecified)) (set! wU3107@set-env-itc! (unspecified)) (set! wU3109@dummy (unspecified)) (set! wU310b@rp (unspecified)) (set! wU3115@interaction-env? (unspecified)) (set! wU3117@interaction-env-rib (unspecified)) (set! wU3119@set-interaction-env-rib! (unspecified)) (set! wU311b@interaction-env-r (unspecified)) (set! wU311d@set-interaction-env-r! (unspecified)) (set! wU311f@interaction-env-locs (unspecified)) (set! wU3121@set-interaction-env-locs! (unspecified)) (set! wU3123@dummy (unspecified)) (set! wU3125@interaction-environment-symbols (unspecified)) (set! wU3127@environment-bindings (unspecified)) (set! wU3129@parse-binding (unspecified)) (set! wU312b@environment? (unspecified)) (set! wU312d@environment-symbols (unspecified)) (set! wU312f@environment (unspecified)) (set! wU3131@null-environment (unspecified)) (set! wU3133@scheme-report-environment (unspecified)) (set! wU3135@expand (unspecified)) (set! wU3137@eval (unspecified)) (set! wU3139@library-expander (unspecified)) (set! wU313b@boot-library-expand (unspecified)) (set! wU313d@rev-map-append (unspecified)) (set! wU313f@build-exports (unspecified)) (set! wU3141@make-export-subst (unspecified)) (set! wU3143@make-export-env/macros (unspecified)) (set! wU3145@generate-temporaries (unspecified)) (set! wU3147@free-identifier=? (unspecified)) (set! wU3149@bound-identifier=? (unspecified)) (set! wU314b@make-source-condition (unspecified)) (set! wU314d@extract-position-condition (unspecified)) (set! wU314f@expression-position (unspecified)) (set! wU3151@assertion-error (unspecified)) (set! wU3153@syntax-error (unspecified)) (set! wU3155@syntax-violation* (unspecified)) (set! wU3157@syntax-violation (unspecified)) (set! wU3159@identifier? (unspecified)) (set! wU315b@datum->syntax (unspecified)) (set! wU315d@syntax->datum (unspecified)) (set! wU315f@ungensym-all (unspecified)) (set! wU3161@compile-r6rs-top-level (unspecified)) (set! wU3163@pre-compile-r6rs-top-level (unspecified)) (set! wU3165@interaction-environment (unspecified)) (set! wU3167@top-level-context (unspecified)) (set! wU2deb@file-options-macro (lambda (wU3168@x) (let ((wU316b@valid-option? '#f)) (begin (set! wU316b@valid-option? (lambda (wU3174@x) (and (wU2e70@id? wU3174@x) (memq (wU2e72@id->sym wU3174@x) '(no-fail no-create no-truncate))))) (let ((wU316c@t wU3168@x)) (let ((wU316e@ls/false (wU3077@syntax-dispatch wU316c@t '(_ . each-any)))) (if (and wU316e@ls/false (apply (lambda (wU3170@opt*) (for-all wU316b@valid-option? wU3170@opt*)) wU316e@ls/false)) (apply (lambda (wU3172@opt*) (wU302d@bless (list 'make-file-options (list 'quote wU3172@opt*)))) wU316e@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU316c@t)))))))) (set! wU4abe@wU2deb@file-options-macro wU2deb@file-options-macro) (set! wU2ded@set-cons (lambda (wU3176@x wU3177@ls) (if (memq wU3176@x wU3177@ls) wU3177@ls (cons wU3176@x wU3177@ls)))) (set! wU4abf@wU2ded@set-cons wU2ded@set-cons) (set! wU2def@set-union (lambda (wU317a@ls1 wU317b@ls2) (if (null? wU317a@ls1) wU317b@ls2 (if (memq (car wU317a@ls1) wU317b@ls2) (wU2def@set-union (cdr wU317a@ls1) wU317b@ls2) (cons (car wU317a@ls1) (wU2def@set-union (cdr wU317a@ls1) wU317b@ls2)))))) (set! wU4ac0@wU2def@set-union wU2def@set-union) (set! wU2df4@top-mark* '(top)) (set! wU4ac1@wU2df4@top-mark* wU2df4@top-mark*) (set! wU2df6@top-marked? (lambda (wU317e@m*) (memq 'top wU317e@m*))) (set! wU4ac2@wU2df6@top-marked? wU2df6@top-marked?) (set! wU2df8@gen-lexical (lambda (wU3180@sym) (if (symbol? wU3180@sym) (gensym wU3180@sym) (if (wU2e3c@stx? wU3180@sym) (wU2df8@gen-lexical (wU2e72@id->sym wU3180@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" wU3180@sym))))) (set! wU4ac3@wU2df8@gen-lexical wU2df8@gen-lexical) (set! wU2dfa@gen-global (lambda (wU3182@x) (wU2df8@gen-lexical wU3182@x))) (set! wU4ac4@wU2dfa@gen-global wU2dfa@gen-global) (set! wU2dfc@gen-label (lambda (wU3184@_) (gensym))) (set! wU4ac5@wU2dfc@gen-label wU2dfc@gen-label) (set! wU2dfe@gen-top-level-label (lambda (wU3186@id wU3187@rib) (let ((wU318b@find '#f)) (begin (set! wU318b@find (lambda (wU3196@sym wU3197@mark* wU3198@sym* wU3199@mark** wU319a@label*) (and (pair? wU3198@sym*) (if (and (eq? wU3196@sym (car wU3198@sym*)) (same-marks? wU3197@mark* (car wU3199@mark**))) (car wU319a@label*) (wU318b@find wU3196@sym wU3197@mark* (cdr wU3198@sym*) (cdr wU3199@mark**) (cdr wU319a@label*)))))) (let ((wU318c@sym (wU2e72@id->sym wU3186@id)) (wU318d@mark* (wU2e42@stx-mark* wU3186@id))) (let ((wU3190@sym* (wU2e0e@rib-sym* wU3187@rib))) (let ((wU3192@t (and (memq wU318c@sym (wU2e0e@rib-sym* wU3187@rib)) (wU318b@find wU318c@sym wU318d@mark* wU3190@sym* (wU2e12@rib-mark** wU3187@rib) (wU2e16@rib-label* wU3187@rib))))) (if wU3192@t ((lambda (wU3194@label) (if (wU2c85@wU2ad2@imported-label->binding wU3194@label) (gensym) wU3194@label)) wU3192@t) (gensym))))))))) (set! wU4ac6@wU2dfe@gen-top-level-label wU2dfe@gen-top-level-label) (set! wU2e00@gen-define-label+loc (lambda (wU31a0@id wU31a1@rib) (let ((wU31a4@t (wU3167@top-level-context))) (if wU31a4@t ((lambda (wU31a6@env) (let ((wU31a8@label (wU2dfe@gen-top-level-label wU31a0@id wU31a1@rib)) (wU31a9@locs (wU311f@interaction-env-locs wU31a6@env))) (values wU31a8@label (let ((wU31ac@t (assq wU31a8@label wU31a9@locs))) (if wU31ac@t (cdr wU31ac@t) (let ((wU31ae@loc (wU2df8@gen-lexical wU31a0@id))) (begin (wU3121@set-interaction-env-locs! wU31a6@env (cons (cons wU31a8@label wU31ae@loc) wU31a9@locs)) wU31ae@loc))))))) wU31a4@t) (values (gensym) (wU2df8@gen-lexical wU31a0@id)))))) (set! wU4ac7@wU2e00@gen-define-label+loc wU2e00@gen-define-label+loc) (set! wU2e02@gen-define-label (lambda (wU31b0@id wU31b1@rib) (if (wU3167@top-level-context) (wU2dfe@gen-top-level-label wU31b0@id wU31b1@rib) (gensym)))) (set! wU4ac8@wU2e02@gen-define-label wU2e02@gen-define-label) (set! wU2e0c@rib? (lambda (wU31b4@x) (and (simple-struct? wU31b4@x) (eq? (simple-struct-name wU31b4@x) 'rib)))) (set! wU4ac9@wU2e0c@rib? wU2e0c@rib?) (set! wU2e0e@rib-sym* (lambda (wU31b6@x) (simple-struct-ref wU31b6@x '0))) (set! wU4aca@wU2e0e@rib-sym* wU2e0e@rib-sym*) (set! wU2e10@set-rib-sym*! (lambda (wU31b8@x wU31b9@val) (simple-struct-set! wU31b8@x '0 wU31b9@val))) (set! wU4acb@wU2e10@set-rib-sym*! wU2e10@set-rib-sym*!) (set! wU2e12@rib-mark** (lambda (wU31bc@x) (simple-struct-ref wU31bc@x '1))) (set! wU4acc@wU2e12@rib-mark** wU2e12@rib-mark**) (set! wU2e14@set-rib-mark**! (lambda (wU31be@x wU31bf@val) (simple-struct-set! wU31be@x '1 wU31bf@val))) (set! wU4acd@wU2e14@set-rib-mark**! wU2e14@set-rib-mark**!) (set! wU2e16@rib-label* (lambda (wU31c2@x) (simple-struct-ref wU31c2@x '2))) (set! wU4ace@wU2e16@rib-label* wU2e16@rib-label*) (set! wU2e18@set-rib-label*! (lambda (wU31c4@x wU31c5@val) (simple-struct-set! wU31c4@x '2 wU31c5@val))) (set! wU4acf@wU2e18@set-rib-label*! wU2e18@set-rib-label*!) (set! wU2e1a@rib-sealed/freq (lambda (wU31c8@x) (simple-struct-ref wU31c8@x '3))) (set! wU4ad0@wU2e1a@rib-sealed/freq wU2e1a@rib-sealed/freq) (set! wU2e1c@set-rib-sealed/freq! (lambda (wU31ca@x wU31cb@val) (simple-struct-set! wU31ca@x '3 wU31cb@val))) (set! wU4ad1@wU2e1c@set-rib-sealed/freq! wU2e1c@set-rib-sealed/freq!) (set! wU2e1e@rib-cache (lambda (wU31ce@x) (simple-struct-ref wU31ce@x '4))) (set! wU4ad2@wU2e1e@rib-cache wU2e1e@rib-cache) (set! wU2e20@set-rib-cache! (lambda (wU31d0@x wU31d1@val) (simple-struct-set! wU31d0@x '4 wU31d1@val))) (set! wU4ad3@wU2e20@set-rib-cache! wU2e20@set-rib-cache!) (set! wU2e22@dummy '3) (set! wU4ad4@wU2e22@dummy wU2e22@dummy) (set! wU2e24@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! wU4ad5@wU2e24@make-empty-rib wU2e24@make-empty-rib) (set! wU2e26@extend-rib! (lambda (wU31d4@rib wU31d5@id wU31d6@label) (let ((wU31db@find '#f)) (begin (set! wU31db@find (lambda (wU31e8@sym wU31e9@mark* wU31ea@sym* wU31eb@mark** wU31ec@label*) (and (pair? wU31ea@sym*) (if (and (eq? wU31e8@sym (car wU31ea@sym*)) (same-marks? wU31e9@mark* (car wU31eb@mark**))) wU31ec@label* (wU31db@find wU31e8@sym wU31e9@mark* (cdr wU31ea@sym*) (cdr wU31eb@mark**) (cdr wU31ec@label*)))))) (begin (if (wU2e1a@rib-sealed/freq wU31d4@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" wU31d4@rib) (void)) (let ((wU31dc@sym (wU2e72@id->sym wU31d5@id)) (wU31dd@mark* (wU2e42@stx-mark* wU31d5@id))) (let ((wU31e0@sym* (wU2e0e@rib-sym* wU31d4@rib))) (let ((wU31e2@t (and (memq wU31dc@sym (wU2e0e@rib-sym* wU31d4@rib)) (wU31db@find wU31dc@sym wU31dd@mark* wU31e0@sym* (wU2e12@rib-mark** wU31d4@rib) (wU2e16@rib-label* wU31d4@rib))))) (if wU31e2@t ((lambda (wU31e4@p) (if (not (eq? wU31d6@label (car wU31e4@p))) (if (wU3167@top-level-context) (set-car! wU31e4@p wU31d6@label) (wU3157@syntax-violation '#f '"multiple definitions of identifier" wU31d5@id)) (void))) wU31e2@t) (begin (if (wU2e1e@rib-cache wU31d4@rib) (hashtable-update! (wU2e1e@rib-cache wU31d4@rib) wU31dc@sym (lambda (wU31e6@e) (cons (cons wU31dd@mark* wU31d6@label) wU31e6@e)) '()) (void)) (wU2e10@set-rib-sym*! wU31d4@rib (cons wU31dc@sym wU31e0@sym*)) (wU2e14@set-rib-mark**! wU31d4@rib (cons wU31dd@mark* (wU2e12@rib-mark** wU31d4@rib))) (wU2e18@set-rib-label*! wU31d4@rib (cons wU31d6@label (wU2e16@rib-label* wU31d4@rib))))))))))))) (set! wU4ad6@wU2e26@extend-rib! wU2e26@extend-rib!) (set! wU2e28@extend-rib/nc! (lambda (wU31f2@rib wU31f3@id wU31f4@label) (let ((wU31f8@sym (wU2e72@id->sym wU31f3@id)) (wU31f9@mark* (wU2e42@stx-mark* wU31f3@id))) (let ((wU31fc@sym* (wU2e0e@rib-sym* wU31f2@rib))) (begin (if (wU2e1e@rib-cache wU31f2@rib) (hashtable-update! (wU2e1e@rib-cache wU31f2@rib) wU31f8@sym (lambda (wU31fe@e) (cons (cons wU31f9@mark* wU31f4@label) wU31fe@e)) '()) (void)) (wU2e10@set-rib-sym*! wU31f2@rib (cons wU31f8@sym wU31fc@sym*)) (wU2e14@set-rib-mark**! wU31f2@rib (cons wU31f9@mark* (wU2e12@rib-mark** wU31f2@rib))) (wU2e18@set-rib-label*! wU31f2@rib (cons wU31f4@label (wU2e16@rib-label* wU31f2@rib)))))))) (set! wU4ad7@wU2e28@extend-rib/nc! wU2e28@extend-rib/nc!) (set! wU2e2a@make-rib-map (lambda (wU3200@sym*) (let ((wU3202@ht (make-eq-hashtable))) (let wU3208@f ((wU3204@i '0) (wU3205@sym* wU3200@sym*)) (if (null? wU3205@sym*) wU3202@ht (begin (hashtable-update! wU3202@ht (car wU3205@sym*) (lambda (wU320a@x) (cons wU3204@i wU320a@x)) '()) (wU3208@f (+ wU3204@i '1) (cdr wU3205@sym*)))))))) (set! wU4ad8@wU2e2a@make-rib-map wU2e2a@make-rib-map) (set! wU2e2c@seal-rib! (lambda (wU320c@rib) (let ((wU320e@sym* (wU2e0e@rib-sym* wU320c@rib))) (if (not (null? wU320e@sym*)) (begin (wU2e10@set-rib-sym*! wU320c@rib (list->vector wU320e@sym*)) (wU2e14@set-rib-mark**! wU320c@rib (list->vector (wU2e12@rib-mark** wU320c@rib))) (wU2e18@set-rib-label*! wU320c@rib (list->vector (wU2e16@rib-label* wU320c@rib))) (wU2e1c@set-rib-sealed/freq! wU320c@rib (wU2e2a@make-rib-map wU320e@sym*))) (void))))) (set! wU4ad9@wU2e2c@seal-rib! wU2e2c@seal-rib!) (set! wU2e2e@unseal-rib! (lambda (wU3210@rib) (if (wU2e1a@rib-sealed/freq wU3210@rib) (begin (wU2e1c@set-rib-sealed/freq! wU3210@rib '#f) (wU2e10@set-rib-sym*! wU3210@rib (vector->list (wU2e0e@rib-sym* wU3210@rib))) (wU2e14@set-rib-mark**! wU3210@rib (vector->list (wU2e12@rib-mark** wU3210@rib))) (wU2e18@set-rib-label*! wU3210@rib (vector->list (wU2e16@rib-label* wU3210@rib)))) (void)))) (set! wU4ada@wU2e2e@unseal-rib! wU2e2e@unseal-rib!) (set! wU2e30@make-full-rib (lambda (wU3212@id* wU3213@label*) (let ((wU3216@r (make-simple-struct 'rib '6 (list (map wU2e72@id->sym wU3212@id*) (map wU2e42@stx-mark* wU3212@id*) wU3213@label* '#f '#f)))) (begin (wU2e2c@seal-rib! wU3216@r) wU3216@r)))) (set! wU4adb@wU2e30@make-full-rib wU2e30@make-full-rib) (set! wU2e32@rp (wU29b7@wU2893@make-record-printer 'stx (lambda (wU3218@x wU3219@p wU321a@wr) (begin (display '"#<syntax " wU3219@p) (write (wU2e84@stx->datum wU3218@x) wU3219@p) (let ((wU321e@expr (wU2e3e@stx-expr wU3218@x))) (if (wU29af@wU2883@annotation? wU321e@expr) (let ((wU3220@src (wU29b0@wU2885@annotation-source wU321e@expr))) (if (pair? wU3220@src) (begin (display '" [" wU3219@p) (display (cdr wU3220@src) wU3219@p) (display '" of " wU3219@p) (display (car wU3220@src) wU3219@p) (display '"]" wU3219@p)) (void))) (void))) (display '">" wU3219@p))))) (set! wU4adc@wU2e32@rp wU2e32@rp) (set! wU2e3c@stx? (lambda (wU3222@x) (and (simple-struct? wU3222@x) (eq? (simple-struct-name wU3222@x) 'stx)))) (set! wU4add@wU2e3c@stx? wU2e3c@stx?) (set! wU2e3e@stx-expr (lambda (wU3224@x) (simple-struct-ref wU3224@x '0))) (set! wU4ade@wU2e3e@stx-expr wU2e3e@stx-expr) (set! wU2e40@set-stx-expr! (lambda (wU3226@x wU3227@val) (simple-struct-set! wU3226@x '0 wU3227@val))) (set! wU4adf@wU2e40@set-stx-expr! wU2e40@set-stx-expr!) (set! wU2e42@stx-mark* (lambda (wU322a@x) (simple-struct-ref wU322a@x '1))) (set! wU4ae0@wU2e42@stx-mark* wU2e42@stx-mark*) (set! wU2e44@set-stx-mark*! (lambda (wU322c@x wU322d@val) (simple-struct-set! wU322c@x '1 wU322d@val))) (set! wU4ae1@wU2e44@set-stx-mark*! wU2e44@set-stx-mark*!) (set! wU2e46@stx-subst* (lambda (wU3230@x) (simple-struct-ref wU3230@x '2))) (set! wU4ae2@wU2e46@stx-subst* wU2e46@stx-subst*) (set! wU2e48@set-stx-subst*! (lambda (wU3232@x wU3233@val) (simple-struct-set! wU3232@x '2 wU3233@val))) (set! wU4ae3@wU2e48@set-stx-subst*! wU2e48@set-stx-subst*!) (set! wU2e4a@stx-ae* (lambda (wU3236@x) (simple-struct-ref wU3236@x '3))) (set! wU4ae4@wU2e4a@stx-ae* wU2e4a@stx-ae*) (set! wU2e4c@set-stx-ae*! (lambda (wU3238@x wU3239@val) (simple-struct-set! wU3238@x '3 wU3239@val))) (set! wU4ae5@wU2e4c@set-stx-ae*! wU2e4c@set-stx-ae*!) (set! wU2e4e@dummy '3) (set! wU4ae6@wU2e4e@dummy wU2e4e@dummy) (set! wU2e50@datum->stx (lambda (wU323c@id wU323d@datum) (make-simple-struct 'stx '5 (list wU323d@datum (wU2e42@stx-mark* wU323c@id) (wU2e46@stx-subst* wU323c@id) (wU2e4a@stx-ae* wU323c@id))))) (set! wU4ae7@wU2e50@datum->stx wU2e50@datum->stx) (set! wU2e52@gen-mark (lambda () (string '#\m))) (set! wU4ae8@wU2e52@gen-mark wU2e52@gen-mark) (set! wU2e54@anti-mark '#f) (set! wU4ae9@wU2e54@anti-mark wU2e54@anti-mark) (set! wU2e56@anti-mark? not) (set! wU4aea@wU2e56@anti-mark? wU2e56@anti-mark?) (set! wU2e58@mkstx (lambda (wU3240@e wU3241@m* wU3242@s* wU3243@ae*) (if (and (wU2e3c@stx? wU3240@e) (not (wU2df6@top-marked? wU3241@m*))) (call-with-values (lambda () (join-wraps wU3241@m* wU3242@s* wU3243@ae* wU3240@e)) (lambda (wU324e@wU3249 wU324f@wU324b wU3250@wU324d) (let ((wU3254@ae* wU3250@wU324d) (wU3255@s* wU324f@wU324b) (wU3256@m* wU324e@wU3249)) (make-simple-struct 'stx '5 (list (wU2e3e@stx-expr wU3240@e) wU3256@m* wU3255@s* wU3254@ae*))))) (make-simple-struct 'stx '5 (list wU3240@e wU3241@m* wU3242@s* wU3243@ae*))))) (set! wU4aeb@wU2e58@mkstx wU2e58@mkstx) (set! wU2e5a@add-mark (lambda (wU325a@m wU325b@e wU325c@ae) (wU2e58@mkstx wU325b@e (list wU325a@m) '(shift) (list wU325c@ae)))) (set! wU4aec@wU2e5a@add-mark wU2e5a@add-mark) (set! wU2e5c@add-subst (lambda (wU3260@subst wU3261@e) (wU2e58@mkstx wU3261@e '() (list wU3260@subst) '()))) (set! wU4aed@wU2e5c@add-subst wU2e5c@add-subst) (set! wU2e5e@syntax-kind? (lambda (wU3264@x wU3265@p?) (if (wU2e3c@stx? wU3264@x) (wU2e5e@syntax-kind? (wU2e3e@stx-expr wU3264@x) wU3265@p?) (if (wU29af@wU2883@annotation? wU3264@x) (wU2e5e@syntax-kind? (wU29b1@wU2887@annotation-expression wU3264@x) wU3265@p?) (wU3265@p? wU3264@x))))) (set! wU4aee@wU2e5e@syntax-kind? wU2e5e@syntax-kind?) (set! wU2e60@syntax-vector->list (lambda (wU3268@x) (if (wU2e3c@stx? wU3268@x) (let ((wU326a@ls (wU2e60@syntax-vector->list (wU2e3e@stx-expr wU3268@x))) (wU326b@m* (wU2e42@stx-mark* wU3268@x)) (wU326c@s* (wU2e46@stx-subst* wU3268@x)) (wU326d@ae* (wU2e4a@stx-ae* wU3268@x))) (map (lambda (wU3272@x) (wU2e58@mkstx wU3272@x wU326b@m* wU326c@s* wU326d@ae*)) wU326a@ls)) (if (wU29af@wU2883@annotation? wU3268@x) (wU2e60@syntax-vector->list (wU29b1@wU2887@annotation-expression wU3268@x)) (if (vector? wU3268@x) (vector->list wU3268@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" wU3268@x)))))) (set! wU4aef@wU2e60@syntax-vector->list wU2e60@syntax-vector->list) (set! wU2e62@syntax-pair? (lambda (wU3274@x) (wU2e5e@syntax-kind? wU3274@x pair?))) (set! wU4af0@wU2e62@syntax-pair? wU2e62@syntax-pair?) (set! wU2e64@syntax-vector? (lambda (wU3276@x) (wU2e5e@syntax-kind? wU3276@x vector?))) (set! wU4af1@wU2e64@syntax-vector? wU2e64@syntax-vector?) (set! wU2e66@syntax-null? (lambda (wU3278@x) (wU2e5e@syntax-kind? wU3278@x null?))) (set! wU4af2@wU2e66@syntax-null? wU2e66@syntax-null?) (set! wU2e68@syntax-list? (lambda (wU327a@x) (or (wU2e66@syntax-null? wU327a@x) (and (wU2e62@syntax-pair? wU327a@x) (wU2e68@syntax-list? (wU2e6c@syntax-cdr wU327a@x)))))) (set! wU4af3@wU2e68@syntax-list? wU2e68@syntax-list?) (set! wU2e6a@syntax-car (lambda (wU327c@x) (if (wU2e3c@stx? wU327c@x) (wU2e58@mkstx (wU2e6a@syntax-car (wU2e3e@stx-expr wU327c@x)) (wU2e42@stx-mark* wU327c@x) (wU2e46@stx-subst* wU327c@x) (wU2e4a@stx-ae* wU327c@x)) (if (wU29af@wU2883@annotation? wU327c@x) (wU2e6a@syntax-car (wU29b1@wU2887@annotation-expression wU327c@x)) (if (pair? wU327c@x) (car wU327c@x) (assertion-violation 'syntax-car '"BUG: not a pair" wU327c@x)))))) (set! wU4af4@wU2e6a@syntax-car wU2e6a@syntax-car) (set! wU2e6c@syntax-cdr (lambda (wU327e@x) (if (wU2e3c@stx? wU327e@x) (wU2e58@mkstx (wU2e6c@syntax-cdr (wU2e3e@stx-expr wU327e@x)) (wU2e42@stx-mark* wU327e@x) (wU2e46@stx-subst* wU327e@x) (wU2e4a@stx-ae* wU327e@x)) (if (wU29af@wU2883@annotation? wU327e@x) (wU2e6c@syntax-cdr (wU29b1@wU2887@annotation-expression wU327e@x)) (if (pair? wU327e@x) (cdr wU327e@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" wU327e@x)))))) (set! wU4af5@wU2e6c@syntax-cdr wU2e6c@syntax-cdr) (set! wU2e6e@syntax->list (lambda (wU3280@x) (if (wU2e62@syntax-pair? wU3280@x) (cons (wU2e6a@syntax-car wU3280@x) (wU2e6e@syntax->list (wU2e6c@syntax-cdr wU3280@x))) (if (wU2e66@syntax-null? wU3280@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" wU3280@x))))) (set! wU4af6@wU2e6e@syntax->list wU2e6e@syntax->list) (set! wU2e70@id? (lambda (wU3282@x) (and (wU2e3c@stx? wU3282@x) (symbol? (wU2e3e@stx-expr wU3282@x))))) (set! wU4af7@wU2e70@id? wU2e70@id?) (set! wU2e72@id->sym (lambda (wU3284@x) (wU2e3e@stx-expr wU3284@x))) (set! wU4af8@wU2e72@id->sym wU2e72@id->sym) (set! wU2e74@bound-id=? (lambda (wU3286@x wU3287@y) (and (eq? (wU2e72@id->sym wU3286@x) (wU2e72@id->sym wU3287@y)) (same-marks? (wU2e42@stx-mark* wU3286@x) (wU2e42@stx-mark* wU3287@y))))) (set! wU4af9@wU2e74@bound-id=? wU2e74@bound-id=?) (set! wU2e76@free-id=? (lambda (wU328a@i wU328b@j) (let ((wU328e@t0 (id->real-label wU328a@i)) (wU328f@t1 (id->real-label wU328b@j))) (if (or wU328e@t0 wU328f@t1) (eq? wU328e@t0 wU328f@t1) (eq? (wU2e72@id->sym wU328a@i) (wU2e72@id->sym wU328b@j)))))) (set! wU4afa@wU2e76@free-id=? wU2e76@free-id=?) (set! wU2e78@valid-bound-ids? (lambda (wU3292@id*) (and (for-all wU2e70@id? wU3292@id*) (wU2e7a@distinct-bound-ids? wU3292@id*)))) (set! wU4afb@wU2e78@valid-bound-ids? wU2e78@valid-bound-ids?) (set! wU2e7a@distinct-bound-ids? (lambda (wU3294@id*) (or (null? wU3294@id*) (and (not (wU2e7c@bound-id-member? (car wU3294@id*) (cdr wU3294@id*))) (wU2e7a@distinct-bound-ids? (cdr wU3294@id*)))))) (set! wU4afc@wU2e7a@distinct-bound-ids? wU2e7a@distinct-bound-ids?) (set! wU2e7c@bound-id-member? (lambda (wU3296@id wU3297@id*) (and (pair? wU3297@id*) (or (wU2e74@bound-id=? wU3296@id (car wU3297@id*)) (wU2e7c@bound-id-member? wU3296@id (cdr wU3297@id*)))))) (set! wU4afd@wU2e7c@bound-id-member? wU2e7c@bound-id-member?) (set! wU2e7e@self-evaluating? (lambda (wU329a@x) (or (number? wU329a@x) (string? wU329a@x) (char? wU329a@x) (boolean? wU329a@x) (regexp? wU329a@x) (bytevector? wU329a@x)))) (set! wU4afe@wU2e7e@self-evaluating? wU2e7e@self-evaluating?) (set! wU2e80@strip-annotations (lambda (wU329c@x) (if (pair? wU329c@x) (cons (wU2e80@strip-annotations (car wU329c@x)) (wU2e80@strip-annotations (cdr wU329c@x))) (if (vector? wU329c@x) (vector-map wU2e80@strip-annotations wU329c@x) (if (wU29af@wU2883@annotation? wU329c@x) (wU29ae@wU2881@annotation-stripped wU329c@x) wU329c@x))))) (set! wU4aff@wU2e80@strip-annotations wU2e80@strip-annotations) (set! wU2e82@strip (lambda (wU329e@x wU329f@m*) (if (wU2df6@top-marked? wU329f@m*) (if (or (wU29af@wU2883@annotation? wU329e@x) (and (pair? wU329e@x) (wU29af@wU2883@annotation? (car wU329e@x))) (and (vector? wU329e@x) (> (vector-length wU329e@x) '0) (wU29af@wU2883@annotation? (vector-ref wU329e@x '0)))) (wU2e80@strip-annotations wU329e@x) wU329e@x) (let wU32a4@f ((wU32a2@x wU329e@x)) (if (wU2e3c@stx? wU32a2@x) (wU2e82@strip (wU2e3e@stx-expr wU32a2@x) (wU2e42@stx-mark* wU32a2@x)) (if (wU29af@wU2883@annotation? wU32a2@x) (wU29ae@wU2881@annotation-stripped wU32a2@x) (if (pair? wU32a2@x) (let ((wU32a6@a (wU32a4@f (car wU32a2@x))) (wU32a7@d (wU32a4@f (cdr wU32a2@x)))) (if (and (eq? wU32a6@a (car wU32a2@x)) (eq? wU32a7@d (cdr wU32a2@x))) wU32a2@x (cons wU32a6@a wU32a7@d))) (if (vector? wU32a2@x) (let ((wU32aa@old (vector->list wU32a2@x))) (let ((wU32ac@new (map wU32a4@f wU32aa@old))) (if (for-all eq? wU32aa@old wU32ac@new) wU32a2@x (list->vector wU32ac@new)))) wU32a2@x)))))))) (set! wU4b00@wU2e82@strip wU2e82@strip) (set! wU2e84@stx->datum (lambda (wU32ae@x) (wU2e82@strip wU32ae@x '()))) (set! wU4b01@wU2e84@stx->datum wU2e84@stx->datum) (set! wU2e86@id->label (lambda (wU32b0@id) (or (id->real-label wU32b0@id) (let ((wU32b2@t (wU3167@top-level-context))) (if wU32b2@t ((lambda (wU32b4@env) (let ((wU32b6@rib (wU3117@interaction-env-rib wU32b4@env))) (call-with-values (lambda () (wU2e00@gen-define-label+loc wU32b0@id wU32b6@rib)) (lambda (wU32bc@wU32b9 wU32bd@wU32bb) (let ((wU32c0@loc_ wU32bd@wU32bb) (wU32c1@lab wU32bc@wU32b9)) (begin (wU2e26@extend-rib! wU32b6@rib wU32b0@id wU32c1@lab) wU32c1@lab)))))) wU32b2@t) '#f))))) (set! wU4b02@wU2e86@id->label wU2e86@id->label) (set! wU2e88@label->binding (lambda (wU32c4@x wU32c5@r) (let ((wU32c8@t (wU2c85@wU2ad2@imported-label->binding wU32c4@x))) (if wU32c8@t ((lambda (wU32ca@b) (if (and (pair? wU32ca@b) (eq? (car wU32ca@b) '$core-rtd)) (cons '$rtd (map wU302d@bless (cdr wU32ca@b))) (if (and (pair? wU32ca@b) (eq? (car wU32ca@b) 'global-rtd)) (let ((wU32cc@lib (cadr wU32ca@b)) (wU32cd@loc (cddr wU32ca@b))) (cons '$rtd (symbol-value wU32cd@loc))) wU32ca@b))) wU32c8@t) (let ((wU32d0@t (assq wU32c4@x wU32c5@r))) (if wU32d0@t (cdr wU32d0@t) (let ((wU32d2@t (wU3167@top-level-context))) (if wU32d2@t ((lambda (wU32d4@env) (let ((wU32d6@t (assq wU32c4@x (wU311f@interaction-env-locs wU32d4@env)))) (if wU32d6@t ((lambda (wU32d8@p) (cons* 'lexical (cdr wU32d8@p) '#f)) wU32d6@t) '(displaced-lexical . #f)))) wU32d2@t) '(displaced-lexical . #f))))))))) (set! wU4b03@wU2e88@label->binding wU2e88@label->binding) (set! wU2e8a@make-binding cons) (set! wU4b04@wU2e8a@make-binding wU2e8a@make-binding) (set! wU2e8c@binding-type car) (set! wU4b05@wU2e8c@binding-type wU2e8c@binding-type) (set! wU2e8e@binding-value cdr) (set! wU4b06@wU2e8e@binding-value wU2e8e@binding-value) (set! wU2e90@raise-unbound-error (lambda (wU32da@id) (wU3155@syntax-violation* '#f '"unbound identifier" wU32da@id (wU4efc@wU4d42@make-undefined-violation)))) (set! wU4b07@wU2e90@raise-unbound-error wU2e90@raise-unbound-error) (set! wU2e92@syntax-type (lambda (wU32dc@e wU32dd@r) (if (wU2e70@id? wU32dc@e) (let ((wU32e0@id wU32dc@e)) (let ((wU32e2@label (wU2e86@id->label wU32e0@id))) (let ((wU32e4@b (wU2e88@label->binding wU32e2@label wU32dd@r))) (let ((wU32e6@type (wU2e8c@binding-type wU32e4@b))) (begin (if (not wU32e2@label) (wU2e90@raise-unbound-error wU32e0@id) (void)) (let ((wU32e8@t wU32e6@type)) (if (memv wU32e8@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values wU32e6@type (wU2e8e@binding-value wU32e4@b) wU32e0@id) (values 'other '#f '#f)))))))) (if (wU2e62@syntax-pair? wU32dc@e) (let ((wU32ea@id (wU2e6a@syntax-car wU32dc@e))) (if (wU2e70@id? wU32ea@id) (let ((wU32ec@label (wU2e86@id->label wU32ea@id))) (let ((wU32ee@b (wU2e88@label->binding wU32ec@label wU32dd@r))) (let ((wU32f0@type (wU2e8c@binding-type wU32ee@b))) (begin (if (not wU32ec@label) (wU2e90@raise-unbound-error wU32ea@id) (void)) (let ((wU32f2@t wU32f0@type)) (if (memv wU32f2@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values wU32f0@type (wU2e8e@binding-value wU32ee@b) wU32ea@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((wU32f4@d (wU2e84@stx->datum wU32dc@e))) (if (wU2e7e@self-evaluating? wU32f4@d) (values 'constant wU32f4@d '#f) (values 'other '#f '#f))))))) (set! wU4b08@wU2e92@syntax-type wU2e92@syntax-type) (set! wU2ea0@sanitize-binding (lambda (wU32f6@x wU32f7@src) (if (procedure? wU32f6@x) (cons* 'local-macro wU32f6@x wU32f7@src) (if (and (pair? wU32f6@x) (eq? (car wU32f6@x) 'macro!) (procedure? (cdr wU32f6@x))) (cons* 'local-macro! (cdr wU32f6@x) wU32f7@src) (if (and (pair? wU32f6@x) (eq? (car wU32f6@x) '$rtd)) wU32f6@x (assertion-violation 'expand '"invalid transformer" wU32f6@x)))))) (set! wU4b09@wU2ea0@sanitize-binding wU2ea0@sanitize-binding) (set! wU2ea2@make-variable-transformer (lambda (wU32fa@x) (if (procedure? wU32fa@x) (cons 'macro! wU32fa@x) (assertion-violation 'make-variable-transformer '"not a procedure" wU32fa@x)))) (set! wU4b0a@wU2ea2@make-variable-transformer wU2ea2@make-variable-transformer) (set! wU2ea4@variable-transformer? (lambda (wU32fc@x) (and (pair? wU32fc@x) (eq? (car wU32fc@x) 'macro!) (procedure? (cdr wU32fc@x))))) (set! wU4b0b@wU2ea4@variable-transformer? wU2ea4@variable-transformer?) (set! wU2ea6@variable-transformer-procedure (lambda (wU32fe@x) (if (wU2ea4@variable-transformer? wU32fe@x) (cdr wU32fe@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" wU32fe@x)))) (set! wU4b0c@wU2ea6@variable-transformer-procedure wU2ea6@variable-transformer-procedure) (set! wU2ea8@make-eval-transformer (lambda (wU3300@x) (wU2ea0@sanitize-binding (eval-core (wU2a10@wU29c8@expanded->core wU3300@x)) wU3300@x))) (set! wU4b0d@wU2ea8@make-eval-transformer wU2ea8@make-eval-transformer) (set! wU2ff9@parse-define (lambda (wU3302@x) (let ((wU3304@t wU3302@x)) (let ((wU3306@ls/false (wU3077@syntax-dispatch wU3304@t '(_ (any . any) any . each-any)))) (if (and wU3306@ls/false (apply (lambda (wU3308@id wU3309@fmls wU330a@b wU330b@b*) (wU2e70@id? wU3308@id)) wU3306@ls/false)) (apply (lambda (wU3310@id wU3311@fmls wU3312@b wU3313@b*) (begin (wU309d@verify-formals wU3311@fmls wU3302@x) (values wU3310@id (cons 'defun (cons wU3311@fmls (cons wU3312@b wU3313@b*)))))) wU3306@ls/false) (let ((wU3318@t wU3304@t)) (let ((wU331a@ls/false (wU3077@syntax-dispatch wU3318@t '(_ any any)))) (if (and wU331a@ls/false (apply (lambda (wU331c@id wU331d@val) (wU2e70@id? wU331c@id)) wU331a@ls/false)) (apply (lambda (wU3320@id wU3321@val) (values wU3320@id (cons 'expr wU3321@val))) wU331a@ls/false) (let ((wU3324@t wU3318@t)) (let ((wU3326@ls/false (wU3077@syntax-dispatch wU3324@t '(_ any)))) (if (and wU3326@ls/false (apply (lambda (wU3328@id) (wU2e70@id? wU3328@id)) wU3326@ls/false)) (apply (lambda (wU332a@id) (values wU332a@id (cons 'expr (wU302d@bless '(void))))) wU3326@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3324@t)))))))))))) (set! wU4b0e@wU2ff9@parse-define wU2ff9@parse-define) (set! wU2ffb@parse-define-syntax (lambda (wU332c@x) (let ((wU332e@t wU332c@x)) (let ((wU3330@ls/false (wU3077@syntax-dispatch wU332e@t '(_ any any)))) (if (and wU3330@ls/false (apply (lambda (wU3332@id wU3333@val) (wU2e70@id? wU3332@id)) wU3330@ls/false)) (apply (lambda (wU3336@id wU3337@val) (values wU3336@id wU3337@val)) wU3330@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU332e@t)))))) (set! wU4b0f@wU2ffb@parse-define-syntax wU2ffb@parse-define-syntax) (set! wU2ffd@scheme-stx-hashtable (make-eq-hashtable)) (set! wU4b10@wU2ffd@scheme-stx-hashtable wU2ffd@scheme-stx-hashtable) (set! wU2fff@scheme-stx (lambda (wU333a@sym) (or (hashtable-ref wU2ffd@scheme-stx-hashtable wU333a@sym '#f) (let ((wU333c@subst (wU2c61@wU2a8a@library-subst (wU2c7f@wU2ac6@find-library-by-name '(psyntax system $all))))) (let ((wU333e@stx (make-simple-struct 'stx '5 (list wU333a@sym wU2df4@top-mark* '() '())))) (let ((wU3340@stx (let ((wU3342@t (assq wU333a@sym wU333c@subst))) (if wU3342@t ((lambda (wU3344@x) (let ((wU3346@name (car wU3344@x)) (wU3347@label (cdr wU3344@x))) (wU2e5c@add-subst (make-simple-struct 'rib '6 (list (list wU3346@name) (list wU2df4@top-mark*) (list wU3347@label) '#f '#f)) wU333e@stx))) wU3342@t) wU333e@stx)))) (begin (hashtable-set! wU2ffd@scheme-stx-hashtable wU333a@sym wU3340@stx) wU3340@stx))))))) (set! wU4b11@wU2fff@scheme-stx wU2fff@scheme-stx) (set! wU3001@lexical-var car) (set! wU4b12@wU3001@lexical-var wU3001@lexical-var) (set! wU3003@lexical-mutable? cdr) (set! wU4b13@wU3003@lexical-mutable? wU3003@lexical-mutable?) (set! wU3005@set-lexical-mutable! set-cdr!) (set! wU4b14@wU3005@set-lexical-mutable! wU3005@set-lexical-mutable!) (set! wU3007@add-lexical (lambda (wU334a@lab wU334b@lex wU334c@r) (cons (cons* wU334a@lab 'lexical wU334b@lex '#f) wU334c@r))) (set! wU4b15@wU3007@add-lexical wU3007@add-lexical) (set! wU3009@add-lexicals (lambda (wU3350@lab* wU3351@lex* wU3352@r) (if (null? wU3350@lab*) wU3352@r (wU3009@add-lexicals (cdr wU3350@lab*) (cdr wU3351@lex*) (wU3007@add-lexical (car wU3350@lab*) (car wU3351@lex*) wU3352@r))))) (set! wU4b16@wU3009@add-lexicals wU3009@add-lexicals) (set! wU300b@letrec-helper (lambda (wU3356@e wU3357@r wU3358@mr wU3359@build) (let ((wU335e@t wU3356@e)) (let ((wU3360@ls/false (wU3077@syntax-dispatch wU335e@t '(_ #(each (any any)) any . each-any)))) (if wU3360@ls/false (apply (lambda (wU3362@lhs* wU3363@rhs* wU3364@b wU3365@b*) (if (not (wU2e78@valid-bound-ids? wU3362@lhs*)) (wU3031@invalid-fmls-error wU3356@e wU3362@lhs*) (let ((wU336a@lex* (map wU2df8@gen-lexical wU3362@lhs*)) (wU336b@lab* (map wU2dfc@gen-label wU3362@lhs*))) (let ((wU336e@rib (wU2e30@make-full-rib wU3362@lhs* wU336b@lab*)) (wU336f@r (wU3009@add-lexicals wU336b@lab* wU336a@lex* wU3357@r))) (let ((wU3372@body (wU30af@chi-internal (wU2e5c@add-subst wU336e@rib (cons wU3364@b wU3365@b*)) wU336f@r wU3358@mr)) (wU3373@rhs* (wU3095@chi-expr* (map (lambda (wU3376@x) (wU2e5c@add-subst wU336e@rib wU3376@x)) wU3363@rhs*) wU336f@r wU3358@mr))) (wU3359@build '#f wU336a@lex* wU3373@rhs* wU3372@body)))))) wU3360@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU335e@t)))))) (set! wU4b17@wU300b@letrec-helper wU300b@letrec-helper) (set! wU300d@let-transformer (lambda (wU3378@e wU3379@r wU337a@mr) (let ((wU337e@t wU3378@e)) (let ((wU3380@ls/false (wU3077@syntax-dispatch wU337e@t '(_ #(each (any any)) any . each-any)))) (if wU3380@ls/false (apply (lambda (wU3382@lhs* wU3383@rhs* wU3384@b wU3385@b*) (if (not (wU2e78@valid-bound-ids? wU3382@lhs*)) (wU3031@invalid-fmls-error wU3378@e wU3382@lhs*) (let ((wU338a@lex* (map wU2df8@gen-lexical wU3382@lhs*)) (wU338b@lab* (map wU2dfc@gen-label wU3382@lhs*)) (wU338c@rhs* (wU3095@chi-expr* wU3383@rhs* wU3379@r wU337a@mr))) (let ((wU3390@rib (wU2e30@make-full-rib wU3382@lhs* wU338b@lab*)) (wU3391@r (wU3009@add-lexicals wU338b@lab* wU338a@lex* wU3379@r))) (let ((wU3394@body (wU30af@chi-internal (wU2e5c@add-subst wU3390@rib (cons wU3384@b wU3385@b*)) wU3391@r wU337a@mr))) (wU2dd8@wU2d35@build-let '#f wU338a@lex* wU338c@rhs* wU3394@body)))))) wU3380@ls/false) (let ((wU3396@t wU337e@t)) (let ((wU3398@ls/false (wU3077@syntax-dispatch wU3396@t '(_ any #(each (any any)) any . each-any)))) (if wU3398@ls/false (apply (lambda (wU339a@loop wU339b@lhs* wU339c@rhs* wU339d@b wU339e@b*) (if (not (wU2e78@valid-bound-ids? wU339b@lhs*)) (wU3031@invalid-fmls-error wU3378@e wU339b@lhs*) (let ((wU33a4@lex* (map wU2df8@gen-lexical wU339b@lhs*)) (wU33a5@lab* (map wU2dfc@gen-label wU339b@lhs*)) (wU33a6@rhs* (wU3095@chi-expr* wU339c@rhs* wU3379@r wU337a@mr)) (wU33a7@loop-lex (wU2df8@gen-lexical wU339a@loop)) (wU33a8@loop-lab (wU2dfc@gen-label wU339a@loop))) (let ((wU33ae@loop-rib (wU2e30@make-full-rib (list wU339a@loop) (list wU33a8@loop-lab))) (wU33af@rib (wU2e30@make-full-rib wU339b@lhs* wU33a5@lab*)) (wU33b0@r (wU3009@add-lexicals (cons wU33a8@loop-lab wU33a5@lab*) (cons wU33a7@loop-lex wU33a4@lex*) wU3379@r))) (let ((wU33b4@body (wU30af@chi-internal (wU2e5c@add-subst wU33ae@loop-rib (wU2e5c@add-subst wU33af@rib (cons wU339d@b wU339e@b*))) wU33b0@r wU337a@mr))) (wU2dd9@wU2d37@build-named-let '#f wU33a7@loop-lex wU33a4@lex* wU33a6@rhs* wU33b4@body)))))) wU3398@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3396@t))))))))) (set! wU4b18@wU300d@let-transformer wU300d@let-transformer) (set! wU300f@letrec-transformer (lambda (wU33b6@e wU33b7@r wU33b8@mr) (wU300b@letrec-helper wU33b6@e wU33b7@r wU33b8@mr wU2dd7@wU2d33@build-letrec))) (set! wU4b19@wU300f@letrec-transformer wU300f@letrec-transformer) (set! wU3011@letrec*-transformer (lambda (wU33bc@e wU33bd@r wU33be@mr) (wU300b@letrec-helper wU33bc@e wU33bd@r wU33be@mr wU2dda@wU2d39@build-letrec*))) (set! wU4b1a@wU3011@letrec*-transformer wU3011@letrec*-transformer) (set! wU3013@fluid-let-syntax-transformer (lambda (wU33c2@e wU33c3@r wU33c4@mr) (let ((wU33c9@lookup '#f)) (begin (set! wU33c9@lookup (lambda (wU33dc@x) (or (wU2e86@id->label wU33dc@x) (wU3157@syntax-violation '#f '"unbound identifier" wU33c2@e wU33dc@x)))) (let ((wU33ca@t wU33c2@e)) (let ((wU33cc@ls/false (wU3077@syntax-dispatch wU33ca@t '(_ #(each (any any)) any . each-any)))) (if wU33cc@ls/false (apply (lambda (wU33ce@lhs* wU33cf@rhs* wU33d0@b wU33d1@b*) (if (not (wU2e78@valid-bound-ids? wU33ce@lhs*)) (wU3031@invalid-fmls-error wU33c2@e wU33ce@lhs*) (let ((wU33d6@lab* (map wU33c9@lookup wU33ce@lhs*)) (wU33d7@rhs* (map (lambda (wU33da@x) (wU2ea8@make-eval-transformer (wU30d1@expand-transformer wU33da@x wU33c4@mr))) wU33cf@rhs*))) (wU30af@chi-internal (cons wU33d0@b wU33d1@b*) (append (map cons wU33d6@lab* wU33d7@rhs*) wU33c3@r) (append (map cons wU33d6@lab* wU33d7@rhs*) wU33c4@mr))))) wU33cc@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU33ca@t)))))))) (set! wU4b1b@wU3013@fluid-let-syntax-transformer wU3013@fluid-let-syntax-transformer) (set! wU3015@type-descriptor-transformer (lambda (wU33de@e wU33df@r wU33e0@mr) (let ((wU33e4@t wU33de@e)) (let ((wU33e6@ls/false (wU3077@syntax-dispatch wU33e4@t '(_ any)))) (if (and wU33e6@ls/false (apply (lambda (wU33e8@id) (wU2e70@id? wU33e8@id)) wU33e6@ls/false)) (apply (lambda (wU33ea@id) (let ((wU33ec@lab (wU2e86@id->label wU33ea@id))) (let ((wU33ee@b (wU2e88@label->binding wU33ec@lab wU33df@r))) (let ((wU33f0@type (wU2e8c@binding-type wU33ee@b))) (begin (if (not wU33ec@lab) (wU2e90@raise-unbound-error wU33ea@id) (void)) (if (not (and (eq? wU33f0@type '$rtd) (not (list? (wU2e8e@binding-value wU33ee@b))))) (wU3157@syntax-violation '#f '"not a record type" wU33de@e) (void)) (list 'quote (wU2e8e@binding-value wU33ee@b))))))) wU33e6@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU33e4@t)))))) (set! wU4b1c@wU3015@type-descriptor-transformer wU3015@type-descriptor-transformer) (set! wU3017@record-type-descriptor-transformer (lambda (wU33f2@e wU33f3@r wU33f4@mr) (let ((wU33f8@t wU33f2@e)) (let ((wU33fa@ls/false (wU3077@syntax-dispatch wU33f8@t '(_ any)))) (if (and wU33fa@ls/false (apply (lambda (wU33fc@id) (wU2e70@id? wU33fc@id)) wU33fa@ls/false)) (apply (lambda (wU33fe@id) (let ((wU3400@lab (wU2e86@id->label wU33fe@id))) (let ((wU3402@b (wU2e88@label->binding wU3400@lab wU33f3@r))) (let ((wU3404@type (wU2e8c@binding-type wU3402@b))) (begin (if (not wU3400@lab) (wU2e90@raise-unbound-error wU33fe@id) (void)) (if (not (and (eq? wU3404@type '$rtd) (list? (wU2e8e@binding-value wU3402@b)))) (wU3157@syntax-violation '#f '"not a record type" wU33f2@e) (void)) (wU3099@chi-expr (car (wU2e8e@binding-value wU3402@b)) wU33f3@r wU33f4@mr)))))) wU33fa@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU33f8@t)))))) (set! wU4b1d@wU3017@record-type-descriptor-transformer wU3017@record-type-descriptor-transformer) (set! wU3019@record-constructor-descriptor-transformer (lambda (wU3406@e wU3407@r wU3408@mr) (let ((wU340c@t wU3406@e)) (let ((wU340e@ls/false (wU3077@syntax-dispatch wU340c@t '(_ any)))) (if (and wU340e@ls/false (apply (lambda (wU3410@id) (wU2e70@id? wU3410@id)) wU340e@ls/false)) (apply (lambda (wU3412@id) (let ((wU3414@lab (wU2e86@id->label wU3412@id))) (let ((wU3416@b (wU2e88@label->binding wU3414@lab wU3407@r))) (let ((wU3418@type (wU2e8c@binding-type wU3416@b))) (begin (if (not wU3414@lab) (wU2e90@raise-unbound-error wU3412@id) (void)) (if (not (and (eq? wU3418@type '$rtd) (list? (wU2e8e@binding-value wU3416@b)))) (wU3157@syntax-violation '#f '"invalid type" wU3406@e) (void)) (wU3099@chi-expr (cadr (wU2e8e@binding-value wU3416@b)) wU3407@r wU3408@mr)))))) wU340e@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU340c@t)))))) (set! wU4b1e@wU3019@record-constructor-descriptor-transformer wU3019@record-constructor-descriptor-transformer) (set! wU301b@when-macro (lambda (wU341a@e) (let ((wU341c@t wU341a@e)) (let ((wU341e@ls/false (wU3077@syntax-dispatch wU341c@t '(_ any any . each-any)))) (if wU341e@ls/false (apply (lambda (wU3420@test wU3421@e wU3422@e*) (wU302d@bless (list 'if wU3420@test (cons 'begin (cons wU3421@e wU3422@e*))))) wU341e@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU341c@t)))))) (set! wU4b1f@wU301b@when-macro wU301b@when-macro) (set! wU301d@unless-macro (lambda (wU3426@e) (let ((wU3428@t wU3426@e)) (let ((wU342a@ls/false (wU3077@syntax-dispatch wU3428@t '(_ any any . each-any)))) (if wU342a@ls/false (apply (lambda (wU342c@test wU342d@e wU342e@e*) (wU302d@bless (list 'if (list 'not wU342c@test) (cons 'begin (cons wU342d@e wU342e@e*))))) wU342a@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3428@t)))))) (set! wU4b20@wU301d@unless-macro wU301d@unless-macro) (set! wU301f@if-transformer (lambda (wU3432@e wU3433@r wU3434@mr) (let ((wU3438@t wU3432@e)) (let ((wU343a@ls/false (wU3077@syntax-dispatch wU3438@t '(_ any any any)))) (if wU343a@ls/false (apply (lambda (wU343c@e0 wU343d@e1 wU343e@e2) (list 'if (wU3099@chi-expr wU343c@e0 wU3433@r wU3434@mr) (wU3099@chi-expr wU343d@e1 wU3433@r wU3434@mr) (wU3099@chi-expr wU343e@e2 wU3433@r wU3434@mr))) wU343a@ls/false) (let ((wU3442@t wU3438@t)) (let ((wU3444@ls/false (wU3077@syntax-dispatch wU3442@t '(_ any any)))) (if wU3444@ls/false (apply (lambda (wU3446@e0 wU3447@e1) (list 'if (wU3099@chi-expr wU3446@e0 wU3433@r wU3434@mr) (wU3099@chi-expr wU3447@e1 wU3433@r wU3434@mr) (wU2dd6@wU2d31@build-void))) wU3444@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3442@t))))))))) (set! wU4b21@wU301f@if-transformer wU301f@if-transformer) (set! wU3021@and-transformer (lambda (wU344a@e wU344b@r wU344c@mr) (let ((wU3450@t wU344a@e)) (let ((wU3452@ls/false (wU3077@syntax-dispatch wU3450@t '(_ . each-any)))) (if wU3452@ls/false (apply (lambda (wU3454@e*) (cons 'and (wU3095@chi-expr* wU3454@e* wU344b@r wU344c@mr))) wU3452@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3450@t)))))) (set! wU4b22@wU3021@and-transformer wU3021@and-transformer) (set! wU3023@or-transformer (lambda (wU3456@e wU3457@r wU3458@mr) (let ((wU345c@t wU3456@e)) (let ((wU345e@ls/false (wU3077@syntax-dispatch wU345c@t '(_ . each-any)))) (if wU345e@ls/false (apply (lambda (wU3460@e*) (cons 'or (wU3095@chi-expr* wU3460@e* wU3457@r wU3458@mr))) wU345e@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU345c@t)))))) (set! wU4b23@wU3023@or-transformer wU3023@or-transformer) (set! wU3025@case-macro (lambda (wU3462@e) (let ((wU3465@build-last '#f) (wU3467@build-one '#f)) (begin (set! wU3465@build-last (lambda (wU348c@cls) (let ((wU348e@t wU348c@cls)) (let ((wU3490@ls/false (wU3077@syntax-dispatch wU348e@t '(#(scheme-id else) any . each-any)))) (if wU3490@ls/false (apply (lambda (wU3492@e wU3493@e*) (cons 'begin (cons wU3492@e wU3493@e*))) wU3490@ls/false) (let ((wU3496@t wU348e@t)) (let ((wU3498@ls/false (wU3077@syntax-dispatch wU3496@t '_))) (if wU3498@ls/false (apply (lambda () (wU3467@build-one wU348c@cls '(if #f #f))) wU3498@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3496@t))))))))) (set! wU3467@build-one (lambda (wU347e@cls wU347f@k) (let ((wU3482@t wU347e@cls)) (let ((wU3484@ls/false (wU3077@syntax-dispatch wU3482@t '(each-any any . each-any)))) (if wU3484@ls/false (apply (lambda (wU3486@d* wU3487@e wU3488@e*) (list 'if (list 'memv 't (list 'quote wU3486@d*)) (cons 'begin (cons wU3487@e wU3488@e*)) wU347f@k)) wU3484@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3482@t)))))) (let ((wU3468@t wU3462@e)) (let ((wU346a@ls/false (wU3077@syntax-dispatch wU3468@t '(_ any)))) (if wU346a@ls/false (apply (lambda (wU346c@expr) (wU302d@bless (cons 'let (cons (list (list 't wU346c@expr)) '((if #f #f)))))) wU346a@ls/false) (let ((wU346e@t wU3468@t)) (let ((wU3470@ls/false (wU3077@syntax-dispatch wU346e@t '(_ any any . each-any)))) (if wU3470@ls/false (apply (lambda (wU3472@expr wU3473@cls wU3474@cls*) (wU302d@bless (list 'let (list (list 't wU3472@expr)) (let wU347c@f ((wU3478@cls wU3473@cls) (wU3479@cls* wU3474@cls*)) (if (null? wU3479@cls*) (wU3465@build-last wU3478@cls) (wU3467@build-one wU3478@cls (wU347c@f (car wU3479@cls*) (cdr wU3479@cls*)))))))) wU3470@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU346e@t))))))))))) (set! wU4b24@wU3025@case-macro wU3025@case-macro) (set! wU3027@quote-transformer (lambda (wU349a@e wU349b@r wU349c@mr) (let ((wU34a0@t wU349a@e)) (let ((wU34a2@ls/false (wU3077@syntax-dispatch wU34a0@t '(_ any)))) (if wU34a2@ls/false (apply (lambda (wU34a4@datum) (list 'quote (wU2e84@stx->datum wU34a4@datum))) wU34a2@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU34a0@t)))))) (set! wU4b25@wU3027@quote-transformer wU3027@quote-transformer) (set! wU3029@case-lambda-transformer (lambda (wU34a6@e wU34a7@r wU34a8@mr) (let ((wU34ac@t wU34a6@e)) (let ((wU34ae@ls/false (wU3077@syntax-dispatch wU34ac@t '(_ . #(each (any any . each-any)))))) (if wU34ae@ls/false (apply (lambda (wU34b0@fmls* wU34b1@b* wU34b2@b**) (call-with-values (lambda () (wU30a1@chi-lambda-clause* wU34a6@e wU34b0@fmls* (map cons wU34b1@b* wU34b2@b**) wU34a7@r wU34a8@mr)) (lambda (wU34ba@wU34b7 wU34bb@wU34b9) (let ((wU34be@body* wU34bb@wU34b9) (wU34bf@fmls* wU34ba@wU34b7)) (wU2dd4@wU2d01@build-case-lambda '#f wU34bf@fmls* wU34be@body*))))) wU34ae@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU34ac@t)))))) (set! wU4b26@wU3029@case-lambda-transformer wU3029@case-lambda-transformer) (set! wU302b@lambda-transformer (lambda (wU34c2@e wU34c3@r wU34c4@mr) (let ((wU34c8@t wU34c2@e)) (let ((wU34ca@ls/false (wU3077@syntax-dispatch wU34c8@t '(_ any any . each-any)))) (if wU34ca@ls/false (apply (lambda (wU34cc@fmls wU34cd@b wU34ce@b*) (call-with-values (lambda () (wU309f@chi-lambda-clause wU34c2@e wU34cc@fmls (cons wU34cd@b wU34ce@b*) wU34c3@r wU34c4@mr)) (lambda (wU34d6@wU34d3 wU34d7@wU34d5) (let ((wU34da@body wU34d7@wU34d5) (wU34db@fmls wU34d6@wU34d3)) (wU2dd3@wU2cff@build-lambda '#f wU34db@fmls wU34da@body))))) wU34ca@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU34c8@t)))))) (set! wU4b27@wU302b@lambda-transformer wU302b@lambda-transformer) (set! wU302d@bless (lambda (wU34de@x) (wU2e58@mkstx (let wU34e2@f ((wU34e0@x wU34de@x)) (if (wU2e3c@stx? wU34e0@x) wU34e0@x (if (pair? wU34e0@x) (cons (wU34e2@f (car wU34e0@x)) (wU34e2@f (cdr wU34e0@x))) (if (symbol? wU34e0@x) (wU2fff@scheme-stx wU34e0@x) (if (vector? wU34e0@x) (vector-map wU34e2@f wU34e0@x) wU34e0@x))))) '() '() '()))) (set! wU4b28@wU302d@bless wU302d@bless) (set! wU302f@with-syntax-macro (lambda (wU34e4@e) (let ((wU34e6@t wU34e4@e)) (let ((wU34e8@ls/false (wU3077@syntax-dispatch wU34e6@t '(_ #(each (any any)) any . each-any)))) (if wU34e8@ls/false (apply (lambda (wU34ea@pat* wU34eb@expr* wU34ec@b wU34ed@b*) (let ((wU34f2@idn* (let wU34f6@f ((wU34f4@pat* wU34ea@pat*)) (if (null? wU34f4@pat*) '() (call-with-values (lambda () (wU3075@convert-pattern (car wU34f4@pat*) '())) (lambda (wU34fc@wU34f9 wU34fd@wU34fb) (let ((wU3500@idn* wU34fd@wU34fb) (wU3501@pat wU34fc@wU34f9)) (append wU3500@idn* (wU34f6@f (cdr wU34f4@pat*)))))))))) (begin (wU309d@verify-formals (map car wU34f2@idn*) wU34e4@e) (let ((wU3504@t* (wU3145@generate-temporaries wU34eb@expr*))) (wU302d@bless (list 'let (map list wU3504@t* wU34eb@expr*) (let wU350a@f ((wU3506@pat* wU34ea@pat*) (wU3507@t* wU3504@t*)) (if (null? wU3506@pat*) (cons 'begin (cons '#f (cons wU34ec@b wU34ed@b*))) (list 'syntax-case (car wU3507@t*) '() (list (car wU3506@pat*) (wU350a@f (cdr wU3506@pat*) (cdr wU3507@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car wU3506@pat*)) (car wU3507@t*)))))))))))) wU34e8@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU34e6@t)))))) (set! wU4b29@wU302f@with-syntax-macro wU302f@with-syntax-macro) (set! wU3031@invalid-fmls-error (lambda (wU350c@stx wU350d@fmls) (let ((wU3510@t wU350d@fmls)) (let ((wU3512@ls/false (wU3077@syntax-dispatch wU3510@t '#(each+ any () any)))) (if wU3512@ls/false (apply (lambda (wU3514@id* wU3515@last) (let wU351a@f ((wU3518@id* (if (wU2e70@id? wU3515@last) (cons wU3515@last wU3514@id*) (if (wU2e66@syntax-null? wU3515@last) wU3514@id* (wU3157@syntax-violation '#f '"not an identifier" wU350c@stx wU3515@last))))) (if (null? wU3518@id*) (values) (if (not (wU2e70@id? (car wU3518@id*))) (wU3157@syntax-violation '#f '"not an identifier" wU350c@stx (car wU3518@id*)) (begin (wU351a@f (cdr wU3518@id*)) (if (wU2e7c@bound-id-member? (car wU3518@id*) (cdr wU3518@id*)) (wU3157@syntax-violation '#f '"duplicate binding" wU350c@stx (car wU3518@id*)) (void))))))) wU3512@ls/false) (let ((wU351c@t wU3510@t)) (let ((wU351e@ls/false (wU3077@syntax-dispatch wU351c@t '_))) (if wU351e@ls/false (apply (lambda () (wU3157@syntax-violation '#f '"malformed binding form" wU350c@stx wU350d@fmls)) wU351e@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU351c@t))))))))) (set! wU4b2a@wU3031@invalid-fmls-error wU3031@invalid-fmls-error) (set! wU3033@let-macro (lambda (wU3520@stx) (let ((wU3522@t wU3520@stx)) (let ((wU3524@ls/false (wU3077@syntax-dispatch wU3522@t '(_ #(each (any any)) any . each-any)))) (if wU3524@ls/false (apply (lambda (wU3526@lhs* wU3527@rhs* wU3528@b wU3529@b*) (if (wU2e78@valid-bound-ids? wU3526@lhs*) (wU302d@bless (cons (cons 'lambda (cons wU3526@lhs* (cons wU3528@b wU3529@b*))) wU3527@rhs*)) (wU3031@invalid-fmls-error wU3520@stx wU3526@lhs*))) wU3524@ls/false) (let ((wU352e@t wU3522@t)) (let ((wU3530@ls/false (wU3077@syntax-dispatch wU352e@t '(_ any #(each (any any)) any . each-any)))) (if (and wU3530@ls/false (apply (lambda (wU3532@f wU3533@lhs* wU3534@rhs* wU3535@b wU3536@b*) (wU2e70@id? wU3532@f)) wU3530@ls/false)) (apply (lambda (wU353c@f wU353d@lhs* wU353e@rhs* wU353f@b wU3540@b*) (if (wU2e78@valid-bound-ids? wU353d@lhs*) (wU302d@bless (cons (list 'letrec (list (list wU353c@f (cons 'lambda (cons wU353d@lhs* (cons wU353f@b wU3540@b*))))) wU353c@f) wU353e@rhs*)) (wU3031@invalid-fmls-error wU3520@stx wU353d@lhs*))) wU3530@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU352e@t))))))))) (set! wU4b2b@wU3033@let-macro wU3033@let-macro) (set! wU3035@let-values-macro (lambda (wU3546@stx) (let ((wU3549@rename '#f) (wU354b@rename* '#f)) (begin (set! wU3549@rename (lambda (wU35ae@x wU35af@old* wU35b0@new*) (begin (if (not (wU2e70@id? wU35ae@x)) (wU3157@syntax-violation '#f '"not an indentifier" wU3546@stx wU35ae@x) (void)) (if (wU2e7c@bound-id-member? wU35ae@x wU35af@old*) (wU3157@syntax-violation '#f '"duplicate binding" wU3546@stx wU35ae@x) (void)) (let ((wU35b4@y (gensym (wU315d@syntax->datum wU35ae@x)))) (values wU35b4@y (cons wU35ae@x wU35af@old*) (cons wU35b4@y wU35b0@new*)))))) (set! wU354b@rename* (lambda (wU359c@x* wU359d@old* wU359e@new*) (if (null? wU359c@x*) (values '() wU359d@old* wU359e@new*) (call-with-values (lambda () (wU3549@rename (car wU359c@x*) wU359d@old* wU359e@new*)) (lambda (wU35a2@x wU35a3@old* wU35a4@new*) (call-with-values (lambda () (wU354b@rename* (cdr wU359c@x*) wU35a3@old* wU35a4@new*)) (lambda (wU35a8@x* wU35a9@old* wU35aa@new*) (values (cons wU35a2@x wU35a8@x*) wU35a9@old* wU35aa@new*)))))))) (let ((wU354c@t wU3546@stx)) (let ((wU354e@ls/false (wU3077@syntax-dispatch wU354c@t '(_ () any . each-any)))) (if wU354e@ls/false (apply (lambda (wU3550@b wU3551@b*) (cons* (wU302d@bless 'let) '() wU3550@b wU3551@b*)) wU354e@ls/false) (let ((wU3554@t wU354c@t)) (let ((wU3556@ls/false (wU3077@syntax-dispatch wU3554@t '(_ #(each (any any)) any . each-any)))) (if wU3556@ls/false (apply (lambda (wU3558@lhs* wU3559@rhs* wU355a@b wU355b@b*) (wU302d@bless (let wU3568@f ((wU3560@lhs* wU3558@lhs*) (wU3561@rhs* wU3559@rhs*) (wU3562@old* '()) (wU3563@new* '())) (if (null? wU3560@lhs*) (cons 'let (cons (map list wU3562@old* wU3563@new*) (cons wU355a@b wU355b@b*))) (let ((wU356a@t (car wU3560@lhs*))) (let ((wU356c@ls/false (wU3077@syntax-dispatch wU356a@t 'each-any))) (if wU356c@ls/false (apply (lambda (wU356e@x*) (call-with-values (lambda () (wU354b@rename* wU356e@x* wU3562@old* wU3563@new*)) (lambda (wU3576@wU3571 wU3577@wU3573 wU3578@wU3575) (let ((wU357c@new* wU3578@wU3575) (wU357d@old* wU3577@wU3573) (wU357e@y* wU3576@wU3571)) (list 'call-with-values (list 'lambda '() (car wU3561@rhs*)) (list 'lambda wU357e@y* (wU3568@f (cdr wU3560@lhs*) (cdr wU3561@rhs*) wU357d@old* wU357c@new*))))))) wU356c@ls/false) (let ((wU3582@t wU356a@t)) (let ((wU3584@ls/false (wU3077@syntax-dispatch wU3582@t '#(each+ any () any)))) (if wU3584@ls/false (apply (lambda (wU3586@x* wU3587@x) (call-with-values (lambda () (wU3549@rename wU3587@x wU3562@old* wU3563@new*)) (lambda (wU358a@y wU358b@old* wU358c@new*) (call-with-values (lambda () (wU354b@rename* wU3586@x* wU358b@old* wU358c@new*)) (lambda (wU3590@y* wU3591@old* wU3592@new*) (list 'call-with-values (list 'lambda '() (car wU3561@rhs*)) (list 'lambda (append wU3590@y* wU358a@y) (wU3568@f (cdr wU3560@lhs*) (cdr wU3561@rhs*) wU3591@old* wU3592@new*)))))))) wU3584@ls/false) (let ((wU3596@t wU3582@t)) (let ((wU3598@ls/false (wU3077@syntax-dispatch wU3596@t 'any))) (if wU3598@ls/false (apply (lambda (wU359a@others) (wU3157@syntax-violation '#f '"malformed bindings" wU3546@stx wU359a@others)) wU3598@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3596@t)))))))))))))) wU3556@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3554@t))))))))))) (set! wU4b2c@wU3035@let-values-macro wU3035@let-values-macro) (set! wU3037@let*-values-macro (lambda (wU35b6@stx) (let ((wU35b9@check '#f)) (begin (set! wU35b9@check (lambda (wU35e8@x*) (if (not (null? wU35e8@x*)) (let ((wU35ea@x (car wU35e8@x*))) (begin (if (not (wU2e70@id? wU35ea@x)) (wU3157@syntax-violation '#f '"not an identifier" wU35b6@stx wU35ea@x) (void)) (wU35b9@check (cdr wU35e8@x*)) (if (wU2e7c@bound-id-member? wU35ea@x (cdr wU35e8@x*)) (wU3157@syntax-violation '#f '"duplicate identifier" wU35b6@stx wU35ea@x) (void)))) (void)))) (let ((wU35ba@t wU35b6@stx)) (let ((wU35bc@ls/false (wU3077@syntax-dispatch wU35ba@t '(_ () any . each-any)))) (if wU35bc@ls/false (apply (lambda (wU35be@b wU35bf@b*) (cons* (wU302d@bless 'let) '() wU35be@b wU35bf@b*)) wU35bc@ls/false) (let ((wU35c2@t wU35ba@t)) (let ((wU35c4@ls/false (wU3077@syntax-dispatch wU35c2@t '(_ #(each (any any)) any . each-any)))) (if wU35c4@ls/false (apply (lambda (wU35c6@lhs* wU35c7@rhs* wU35c8@b wU35c9@b*) (wU302d@bless (let wU35d2@f ((wU35ce@lhs* wU35c6@lhs*) (wU35cf@rhs* wU35c7@rhs*)) (if (null? wU35ce@lhs*) (cons 'begin (cons wU35c8@b wU35c9@b*)) (let ((wU35d4@t (car wU35ce@lhs*))) (let ((wU35d6@ls/false (wU3077@syntax-dispatch wU35d4@t 'each-any))) (if wU35d6@ls/false (apply (lambda (wU35d8@x*) (begin (wU35b9@check wU35d8@x*) (list 'call-with-values (list 'lambda '() (car wU35cf@rhs*)) (list 'lambda wU35d8@x* (wU35d2@f (cdr wU35ce@lhs*) (cdr wU35cf@rhs*)))))) wU35d6@ls/false) (let ((wU35da@t wU35d4@t)) (let ((wU35dc@ls/false (wU3077@syntax-dispatch wU35da@t '#(each+ any () any)))) (if wU35dc@ls/false (apply (lambda (wU35de@x* wU35df@x) (begin (wU35b9@check (cons wU35df@x wU35de@x*)) (list 'call-with-values (list 'lambda '() (car wU35cf@rhs*)) (list 'lambda (append wU35de@x* wU35df@x) (wU35d2@f (cdr wU35ce@lhs*) (cdr wU35cf@rhs*)))))) wU35dc@ls/false) (let ((wU35e2@t wU35da@t)) (let ((wU35e4@ls/false (wU3077@syntax-dispatch wU35e2@t 'any))) (if wU35e4@ls/false (apply (lambda (wU35e6@others) (wU3157@syntax-violation '#f '"malformed bindings" wU35b6@stx wU35e6@others)) wU35e4@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU35e2@t)))))))))))))) wU35c4@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU35c2@t))))))))))) (set! wU4b2d@wU3037@let*-values-macro wU3037@let*-values-macro) (set! wU3039@trace-lambda-macro (lambda (wU35ec@stx) (let ((wU35ee@t wU35ec@stx)) (let ((wU35f0@ls/false (wU3077@syntax-dispatch wU35ee@t '(_ any each-any any . each-any)))) (if wU35f0@ls/false (apply (lambda (wU35f2@who wU35f3@fmls wU35f4@b wU35f5@b*) (if (wU2e78@valid-bound-ids? wU35f3@fmls) (wU302d@bless (list 'make-traced-procedure (list 'quote wU35f2@who) (cons 'lambda (cons wU35f3@fmls (cons wU35f4@b wU35f5@b*))))) (wU3031@invalid-fmls-error wU35ec@stx wU35f3@fmls))) wU35f0@ls/false) (let ((wU35fa@t wU35ee@t)) (let ((wU35fc@ls/false (wU3077@syntax-dispatch wU35fa@t '(_ any #(each+ any () any) any . each-any)))) (if wU35fc@ls/false (apply (lambda (wU35fe@who wU35ff@fmls wU3600@last wU3601@b wU3602@b*) (if (wU2e78@valid-bound-ids? (cons wU3600@last wU35ff@fmls)) (wU302d@bless (list 'make-traced-procedure (list 'quote wU35fe@who) (cons 'lambda (cons (append wU35ff@fmls wU3600@last) (cons wU3601@b wU3602@b*))))) (wU3031@invalid-fmls-error wU35ec@stx (append wU35ff@fmls wU3600@last)))) wU35fc@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU35fa@t))))))))) (set! wU4b2e@wU3039@trace-lambda-macro wU3039@trace-lambda-macro) (set! wU303b@trace-define-macro (lambda (wU3608@stx) (let ((wU360a@t wU3608@stx)) (let ((wU360c@ls/false (wU3077@syntax-dispatch wU360a@t '(_ (any . each-any) any . each-any)))) (if wU360c@ls/false (apply (lambda (wU360e@who wU360f@fmls wU3610@b wU3611@b*) (if (wU2e78@valid-bound-ids? wU360f@fmls) (wU302d@bless (list 'define wU360e@who (list 'make-traced-procedure (list 'quote wU360e@who) (cons 'lambda (cons wU360f@fmls (cons wU3610@b wU3611@b*)))))) (wU3031@invalid-fmls-error wU3608@stx wU360f@fmls))) wU360c@ls/false) (let ((wU3616@t wU360a@t)) (let ((wU3618@ls/false (wU3077@syntax-dispatch wU3616@t '(_ (any . #(each+ any () any)) any . each-any)))) (if wU3618@ls/false (apply (lambda (wU361a@who wU361b@fmls wU361c@last wU361d@b wU361e@b*) (if (wU2e78@valid-bound-ids? (cons wU361c@last wU361b@fmls)) (wU302d@bless (list 'define wU361a@who (list 'make-traced-procedure (list 'quote wU361a@who) (cons 'lambda (cons (append wU361b@fmls wU361c@last) (cons wU361d@b wU361e@b*)))))) (wU3031@invalid-fmls-error wU3608@stx (append wU361b@fmls wU361c@last)))) wU3618@ls/false) (let ((wU3624@t wU3616@t)) (let ((wU3626@ls/false (wU3077@syntax-dispatch wU3624@t '(_ any any)))) (if wU3626@ls/false (apply (lambda (wU3628@who wU3629@expr) (if (wU2e70@id? wU3628@who) (wU302d@bless (list 'define wU3628@who (list 'let (list (list 'v wU3629@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote wU3628@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (wU3157@syntax-violation '#f '"invalid name" wU3608@stx))) wU3626@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3624@t)))))))))))) (set! wU4b2f@wU303b@trace-define-macro wU303b@trace-define-macro) (set! wU303d@trace-define-syntax-macro (lambda (wU362c@stx) (let ((wU362e@t wU362c@stx)) (let ((wU3630@ls/false (wU3077@syntax-dispatch wU362e@t '(_ any any)))) (if wU3630@ls/false (apply (lambda (wU3632@who wU3633@expr) (if (wU2e70@id? wU3632@who) (wU302d@bless (list 'define-syntax wU3632@who (list 'make-traced-macro (list 'quote wU3632@who) wU3633@expr))) (wU3157@syntax-violation '#f '"invalid name" wU362c@stx))) wU3630@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU362e@t)))))) (set! wU4b30@wU303d@trace-define-syntax-macro wU303d@trace-define-syntax-macro) (set! wU303f@trace-let/rec-syntax (lambda (wU3636@who) (lambda (wU3638@stx) (let ((wU363a@t wU3638@stx)) (let ((wU363c@ls/false (wU3077@syntax-dispatch wU363a@t '(_ #(each (any any)) any . each-any)))) (if wU363c@ls/false (apply (lambda (wU363e@lhs* wU363f@rhs* wU3640@b wU3641@b*) (if (wU2e78@valid-bound-ids? wU363e@lhs*) (let ((wU3646@rhs* (map (lambda (wU3648@lhs wU3649@rhs) (list 'make-traced-macro (list 'quote wU3648@lhs) wU3649@rhs)) wU363e@lhs* wU363f@rhs*))) (wU302d@bless (cons wU3636@who (cons (map list wU363e@lhs* wU3646@rhs*) (cons wU3640@b wU3641@b*))))) (wU3031@invalid-fmls-error wU3638@stx wU363e@lhs*))) wU363c@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU363a@t))))))) (set! wU4b31@wU303f@trace-let/rec-syntax wU303f@trace-let/rec-syntax) (set! wU3041@trace-let-syntax-macro (wU303f@trace-let/rec-syntax 'let-syntax)) (set! wU4b32@wU3041@trace-let-syntax-macro wU3041@trace-let-syntax-macro) (set! wU3043@trace-letrec-syntax-macro (wU303f@trace-let/rec-syntax 'letrec-syntax)) (set! wU4b33@wU3043@trace-letrec-syntax-macro wU3043@trace-letrec-syntax-macro) (set! wU3045@guard-macro (lambda (wU364c@x) (let ((wU364f@gen-clauses '#f)) (begin (set! wU364f@gen-clauses (lambda (wU3666@con wU3667@outerk wU3668@clause*) (let ((wU366d@f '#f) (wU366f@f* '#f)) (begin (set! wU366d@f (lambda (wU36a6@x wU36a7@k) (let ((wU36aa@t wU36a6@x)) (let ((wU36ac@ls/false (wU3077@syntax-dispatch wU36aa@t '(any #(scheme-id =>) any)))) (if wU36ac@ls/false (apply (lambda (wU36ae@e wU36af@p) (let ((wU36b2@t (gensym))) (list 'let (list (list wU36b2@t wU36ae@e)) (list 'if wU36b2@t (list wU36af@p wU36b2@t) wU36a7@k)))) wU36ac@ls/false) (let ((wU36b4@t wU36aa@t)) (let ((wU36b6@ls/false (wU3077@syntax-dispatch wU36b4@t '(any)))) (if wU36b6@ls/false (apply (lambda (wU36b8@e) (let ((wU36ba@t (gensym))) (list 'let (list (list wU36ba@t wU36b8@e)) (list 'if wU36ba@t wU36ba@t wU36a7@k)))) wU36b6@ls/false) (let ((wU36bc@t wU36b4@t)) (let ((wU36be@ls/false (wU3077@syntax-dispatch wU36bc@t '(any any . each-any)))) (if wU36be@ls/false (apply (lambda (wU36c0@e wU36c1@v wU36c2@v*) (list 'if wU36c0@e (cons 'begin (cons wU36c1@v wU36c2@v*)) wU36a7@k)) wU36be@ls/false) (let ((wU36c6@t wU36bc@t)) (let ((wU36c8@ls/false (wU3077@syntax-dispatch wU36c6@t '_))) (if wU36c8@ls/false (apply (lambda () (wU3157@syntax-violation '#f '"invalid guard clause" wU36a6@x)) wU36c8@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU36c6@t))))))))))))))) (set! wU366f@f* (lambda (wU367c@x*) (let ((wU367e@t wU367c@x*)) (let ((wU3680@ls/false (wU3077@syntax-dispatch wU367e@t '()))) (if wU3680@ls/false (apply (lambda () (let ((wU3682@g (gensym))) (values (list wU3682@g (list 'lambda '() (list 'raise-continuable wU3666@con))) wU3682@g))) wU3680@ls/false) (let ((wU3684@t wU367e@t)) (let ((wU3686@ls/false (wU3077@syntax-dispatch wU3684@t '((#(scheme-id else) any . each-any))))) (if wU3686@ls/false (apply (lambda (wU3688@e wU3689@e*) (values (cons 'begin (cons wU3688@e wU3689@e*)) '#f)) wU3686@ls/false) (let ((wU368c@t wU3684@t)) (let ((wU368e@ls/false (wU3077@syntax-dispatch wU368c@t '(any . any)))) (if wU368e@ls/false (apply (lambda (wU3690@cls wU3691@cls*) (call-with-values (lambda () (wU366f@f* wU3691@cls*)) (lambda (wU3698@wU3695 wU3699@wU3697) (let ((wU369c@g wU3699@wU3697) (wU369d@e wU3698@wU3695)) (values (wU366d@f wU3690@cls wU369d@e) wU369c@g))))) wU368e@ls/false) (let ((wU36a0@t wU368c@t)) (let ((wU36a2@ls/false (wU3077@syntax-dispatch wU36a0@t 'any))) (if wU36a2@ls/false (apply (lambda (wU36a4@others) (wU3157@syntax-violation '#f '"invalid guard clause" wU36a4@others)) wU36a2@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU36a0@t))))))))))))))) (call-with-values (lambda () (wU366f@f* wU3668@clause*)) (lambda (wU3674@wU3671 wU3675@wU3673) (let ((wU3678@raisek wU3675@wU3673) (wU3679@code wU3674@wU3671)) (if wU3678@raisek (list (list 'call/cc (list 'lambda (list wU3678@raisek) (list wU3667@outerk (list 'lambda '() wU3679@code))))) (list wU3667@outerk (list 'lambda '() wU3679@code)))))))))) (let ((wU3650@t wU364c@x)) (let ((wU3652@ls/false (wU3077@syntax-dispatch wU3650@t '(_ (any . each-any) any . each-any)))) (if (and wU3652@ls/false (apply (lambda (wU3654@con wU3655@clause* wU3656@b wU3657@b*) (wU2e70@id? wU3654@con)) wU3652@ls/false)) (apply (lambda (wU365c@con wU365d@clause* wU365e@b wU365f@b*) (let ((wU3664@outerk (gensym))) (wU302d@bless (list (list 'call/cc (list 'lambda (list wU3664@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list wU365c@con) (wU364f@gen-clauses wU365c@con wU3664@outerk wU365d@clause*)) (cons 'lambda (cons '() (cons wU365e@b wU365f@b*))))))))))) wU3652@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3650@t)))))))) (set! wU4b34@wU3045@guard-macro wU3045@guard-macro) (set! wU3047@define-enumeration-macro (lambda (wU36ca@stx) (let ((wU36cd@set? '#f) (wU36cf@remove-dups '#f)) (begin (set! wU36cd@set? (lambda (wU36e6@x) (or (null? wU36e6@x) (and (not (memq (car wU36e6@x) (cdr wU36e6@x))) (wU36cd@set? (cdr wU36e6@x)))))) (set! wU36cf@remove-dups (lambda (wU36e4@ls) (if (null? wU36e4@ls) '() (cons (car wU36e4@ls) (wU36cf@remove-dups (remq (car wU36e4@ls) (cdr wU36e4@ls))))))) (let ((wU36d0@t wU36ca@stx)) (let ((wU36d2@ls/false (wU3077@syntax-dispatch wU36d0@t '(_ any each-any any)))) (if (and wU36d2@ls/false (apply (lambda (wU36d4@name wU36d5@id* wU36d6@maker) (and (wU2e70@id? wU36d4@name) (wU2e70@id? wU36d6@maker) (for-all wU2e70@id? wU36d5@id*))) wU36d2@ls/false)) (apply (lambda (wU36da@name wU36db@id* wU36dc@maker) (let ((wU36e0@name* (wU36cf@remove-dups (wU315d@syntax->datum wU36db@id*))) (wU36e1@mk (gensym))) (wU302d@bless (list 'begin (list 'define wU36e1@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote wU36e0@name*)))) (list 'define-syntax wU36da@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote wU36e0@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote wU36da@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax wU36dc@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote wU36dc@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote wU36e0@name*)) (cons 'syntax-violation (cons (list 'quote wU36dc@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons wU36e1@mk '('(n* ...))))))))))))) wU36d2@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU36d0@t)))))))) (set! wU4b35@wU3047@define-enumeration-macro wU3047@define-enumeration-macro) (set! wU3049@time-macro (lambda (wU36e8@stx) (let ((wU36ea@t wU36e8@stx)) (let ((wU36ec@ls/false (wU3077@syntax-dispatch wU36ea@t '(_ any)))) (if wU36ec@ls/false (apply (lambda (wU36ee@expr) (wU302d@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() wU36ee@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) wU36ec@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU36ea@t)))))) (set! wU4b36@wU3049@time-macro wU3049@time-macro) (set! wU304b@delay-macro (lambda (wU36f0@stx) (let ((wU36f2@t wU36f0@stx)) (let ((wU36f4@ls/false (wU3077@syntax-dispatch wU36f2@t '(_ any)))) (if wU36f4@ls/false (apply (lambda (wU36f6@expr) (wU302d@bless (list 'make-promise (list 'lambda '() wU36f6@expr)))) wU36f4@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU36f2@t)))))) (set! wU4b37@wU304b@delay-macro wU304b@delay-macro) (set! wU304d@assert-macro (lambda (wU36f8@stx) (let ((wU36fa@t wU36f8@stx)) (let ((wU36fc@ls/false (wU3077@syntax-dispatch wU36fa@t '(_ any)))) (if wU36fc@ls/false (apply (lambda (wU36fe@expr) (let ((wU3700@pos (or (wU314f@expression-position wU36f8@stx) (wU314f@expression-position wU36fe@expr)))) (wU302d@bless (list 'let (list (list 'x wU36fe@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote wU36fe@expr) (list 'quote wU3700@pos))))))) wU36fc@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU36fa@t)))))) (set! wU4b38@wU304d@assert-macro wU304d@assert-macro) (set! wU304f@endianness-macro (lambda (wU3702@stx) (let ((wU3704@t wU3702@stx)) (let ((wU3706@ls/false (wU3077@syntax-dispatch wU3704@t '(_ any)))) (if wU3706@ls/false (apply (lambda (wU3708@e) (let ((wU370a@t (wU315d@syntax->datum wU3708@e))) (if (memv wU370a@t '(little)) (wU302d@bless ''little) (if (memv wU370a@t '(big)) (wU302d@bless ''big) (wU3157@syntax-violation '#f '"endianness must be big or little" wU3702@stx))))) wU3706@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3704@t)))))) (set! wU4b39@wU304f@endianness-macro wU304f@endianness-macro) (set! wU3051@identifier-syntax-macro (lambda (wU370c@stx) (let ((wU370e@t wU370c@stx)) (let ((wU3710@ls/false (wU3077@syntax-dispatch wU370e@t '(_ any)))) (if wU3710@ls/false (apply (lambda (wU3712@expr) (wU302d@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax wU3712@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax wU3712@expr) '((syntax (e* ...)))))))))) wU3710@ls/false) (let ((wU3714@t wU370e@t)) (let ((wU3716@ls/false (wU3077@syntax-dispatch wU3714@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and wU3716@ls/false (apply (lambda (wU3718@id1 wU3719@expr1 wU371a@id2 wU371b@expr2 wU371c@expr3) (and (wU2e70@id? wU3718@id1) (wU2e70@id? wU371a@id2) (wU2e70@id? wU371b@expr2))) wU3716@ls/false)) (apply (lambda (wU3722@id1 wU3723@expr1 wU3724@id2 wU3725@expr2 wU3726@expr3) (wU302d@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax wU3723@expr1)) (list (list 'set! 'id wU3725@expr2) (list 'syntax wU3726@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons wU3723@expr1 '(e* ...))))))))) wU3716@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3714@t))))))))) (set! wU4b3a@wU3051@identifier-syntax-macro wU3051@identifier-syntax-macro) (set! wU3053@do-macro (lambda (wU372c@stx) (let ((wU372f@bind '#f)) (begin (set! wU372f@bind (lambda (wU3746@x) (let ((wU3748@t wU3746@x)) (let ((wU374a@ls/false (wU3077@syntax-dispatch wU3748@t '(any any)))) (if wU374a@ls/false (apply (lambda (wU374c@x wU374d@init) (list wU374c@x wU374d@init wU374c@x)) wU374a@ls/false) (let ((wU3750@t wU3748@t)) (let ((wU3752@ls/false (wU3077@syntax-dispatch wU3750@t '(any any any)))) (if wU3752@ls/false (apply (lambda (wU3754@x wU3755@init wU3756@step) (list wU3754@x wU3755@init wU3756@step)) wU3752@ls/false) (let ((wU375a@t wU3750@t)) (let ((wU375c@ls/false (wU3077@syntax-dispatch wU375a@t '_))) (if wU375c@ls/false (apply (lambda () (wU3157@syntax-violation '#f '"invalid binding" wU372c@stx)) wU375c@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU375a@t)))))))))))) (let ((wU3730@t wU372c@stx)) (let ((wU3732@ls/false (wU3077@syntax-dispatch wU3730@t '(_ each-any (any . each-any) . each-any)))) (if wU3732@ls/false (apply (lambda (wU3734@binding* wU3735@test wU3736@expr* wU3737@command*) (let ((wU373c@t (map wU372f@bind wU3734@binding*))) (let ((wU373e@ls/false (wU3077@syntax-dispatch wU373c@t '#(each (any any any))))) (if wU373e@ls/false (apply (lambda (wU3740@x* wU3741@init* wU3742@step*) (if (wU2e78@valid-bound-ids? wU3740@x*) (wU302d@bless (list 'letrec (list (list 'loop (list 'lambda wU3740@x* (list 'if wU3735@test (cons 'begin (cons '(if #f #f) wU3736@expr*)) (cons 'begin (append wU3737@command* (list (cons 'loop wU3742@step*)))))))) (cons 'loop wU3741@init*))) (wU3157@syntax-violation '#f '"invalid bindings" wU372c@stx))) wU373e@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU373c@t))))) wU3732@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3730@t)))))))) (set! wU4b3b@wU3053@do-macro wU3053@do-macro) (set! wU3055@let*-macro (lambda (wU375e@stx) (let ((wU3760@t wU375e@stx)) (let ((wU3762@ls/false (wU3077@syntax-dispatch wU3760@t '(_ #(each (any any)) any . each-any)))) (if (and wU3762@ls/false (apply (lambda (wU3764@lhs* wU3765@rhs* wU3766@b wU3767@b*) (for-all wU2e70@id? wU3764@lhs*)) wU3762@ls/false)) (apply (lambda (wU376c@lhs* wU376d@rhs* wU376e@b wU376f@b*) (wU302d@bless (let wU3776@f ((wU3774@x* (map list wU376c@lhs* wU376d@rhs*))) (if (null? wU3774@x*) (cons 'let (cons '() (cons wU376e@b wU376f@b*))) (list 'let (list (car wU3774@x*)) (wU3776@f (cdr wU3774@x*))))))) wU3762@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3760@t)))))) (set! wU4b3c@wU3055@let*-macro wU3055@let*-macro) (set! wU3057@or-macro (lambda (wU3778@stx) (let ((wU377a@t wU3778@stx)) (let ((wU377c@ls/false (wU3077@syntax-dispatch wU377a@t '(_)))) (if wU377c@ls/false (apply (lambda () '#f) wU377c@ls/false) (let ((wU377e@t wU377a@t)) (let ((wU3780@ls/false (wU3077@syntax-dispatch wU377e@t '(_ any . each-any)))) (if wU3780@ls/false (apply (lambda (wU3782@e wU3783@e*) (wU302d@bless (let wU378a@f ((wU3786@e wU3782@e) (wU3787@e* wU3783@e*)) (if (null? wU3787@e*) (list 'begin '#f wU3786@e) (list 'let (list (list 't wU3786@e)) (list 'if 't 't (wU378a@f (car wU3787@e*) (cdr wU3787@e*)))))))) wU3780@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU377e@t))))))))) (set! wU4b3d@wU3057@or-macro wU3057@or-macro) (set! wU3059@and-macro (lambda (wU378c@stx) (let ((wU378e@t wU378c@stx)) (let ((wU3790@ls/false (wU3077@syntax-dispatch wU378e@t '(_)))) (if wU3790@ls/false (apply (lambda () '#t) wU3790@ls/false) (let ((wU3792@t wU378e@t)) (let ((wU3794@ls/false (wU3077@syntax-dispatch wU3792@t '(_ any . each-any)))) (if wU3794@ls/false (apply (lambda (wU3796@e wU3797@e*) (wU302d@bless (let wU379e@f ((wU379a@e wU3796@e) (wU379b@e* wU3797@e*)) (if (null? wU379b@e*) (list 'begin '#f wU379a@e) (cons 'if (cons wU379a@e (cons (wU379e@f (car wU379b@e*) (cdr wU379b@e*)) '(#f)))))))) wU3794@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3792@t))))))))) (set! wU4b3e@wU3059@and-macro wU3059@and-macro) (set! wU305b@cond-macro (lambda (wU37a0@stx) (let ((wU37a2@t wU37a0@stx)) (let ((wU37a4@ls/false (wU3077@syntax-dispatch wU37a2@t '(_ any . each-any)))) (if wU37a4@ls/false (apply (lambda (wU37a6@cls wU37a7@cls*) (wU302d@bless (let wU37ae@f ((wU37aa@cls wU37a6@cls) (wU37ab@cls* wU37a7@cls*)) (if (null? wU37ab@cls*) (let ((wU37b0@t wU37aa@cls)) (let ((wU37b2@ls/false (wU3077@syntax-dispatch wU37b0@t '(#(scheme-id else) any . each-any)))) (if wU37b2@ls/false (apply (lambda (wU37b4@e wU37b5@e*) (cons 'begin (cons wU37b4@e wU37b5@e*))) wU37b2@ls/false) (let ((wU37b8@t wU37b0@t)) (let ((wU37ba@ls/false (wU3077@syntax-dispatch wU37b8@t '(any #(scheme-id =>) any)))) (if wU37ba@ls/false (apply (lambda (wU37bc@e wU37bd@p) (list 'let (list (list 't wU37bc@e)) (list 'if 't (cons wU37bd@p '(t))))) wU37ba@ls/false) (let ((wU37c0@t wU37b8@t)) (let ((wU37c2@ls/false (wU3077@syntax-dispatch wU37c0@t '(any)))) (if wU37c2@ls/false (apply (lambda (wU37c4@e) (cons 'or (cons wU37c4@e '((if #f #f))))) wU37c2@ls/false) (let ((wU37c6@t wU37c0@t)) (let ((wU37c8@ls/false (wU3077@syntax-dispatch wU37c6@t '(any . each-any)))) (if wU37c8@ls/false (apply (lambda (wU37ca@e wU37cb@e*) (list 'if wU37ca@e (cons 'begin wU37cb@e*))) wU37c8@ls/false) (let ((wU37ce@t wU37c6@t)) (let ((wU37d0@ls/false (wU3077@syntax-dispatch wU37ce@t '_))) (if wU37d0@ls/false (apply (lambda () (wU3157@syntax-violation '#f '"invalid last clause" wU37a0@stx)) wU37d0@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU37ce@t)))))))))))))))) (let ((wU37d2@t wU37aa@cls)) (let ((wU37d4@ls/false (wU3077@syntax-dispatch wU37d2@t '(#(scheme-id else) any . each-any)))) (if wU37d4@ls/false (apply (lambda (wU37d6@e wU37d7@e*) (wU3157@syntax-violation '#f '"incorrect position of keyword else" wU37a0@stx)) wU37d4@ls/false) (let ((wU37da@t wU37d2@t)) (let ((wU37dc@ls/false (wU3077@syntax-dispatch wU37da@t '(any #(scheme-id =>) any)))) (if wU37dc@ls/false (apply (lambda (wU37de@e wU37df@p) (list 'let (list (list 't wU37de@e)) (list 'if 't (cons wU37df@p '(t)) (wU37ae@f (car wU37ab@cls*) (cdr wU37ab@cls*))))) wU37dc@ls/false) (let ((wU37e2@t wU37da@t)) (let ((wU37e4@ls/false (wU3077@syntax-dispatch wU37e2@t '(any)))) (if wU37e4@ls/false (apply (lambda (wU37e6@e) (list 'or wU37e6@e (wU37ae@f (car wU37ab@cls*) (cdr wU37ab@cls*)))) wU37e4@ls/false) (let ((wU37e8@t wU37e2@t)) (let ((wU37ea@ls/false (wU3077@syntax-dispatch wU37e8@t '(any . each-any)))) (if wU37ea@ls/false (apply (lambda (wU37ec@e wU37ed@e*) (list 'if wU37ec@e (cons 'begin wU37ed@e*) (wU37ae@f (car wU37ab@cls*) (cdr wU37ab@cls*)))) wU37ea@ls/false) (let ((wU37f0@t wU37e8@t)) (let ((wU37f2@ls/false (wU3077@syntax-dispatch wU37f0@t '_))) (if wU37f2@ls/false (apply (lambda () (wU3157@syntax-violation '#f '"invalid last clause" wU37a0@stx)) wU37f2@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU37f0@t)))))))))))))))))))) wU37a4@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU37a2@t)))))) (set! wU4b3f@wU305b@cond-macro wU305b@cond-macro) (set! wU305d@do-include (lambda (wU37f4@stx wU37f5@id wU37f6@filename) (let ((wU37fa@filename (wU2e84@stx->datum wU37f6@filename))) (begin (if (not (and (string? wU37fa@filename) (wU2e70@id? wU37f5@id))) (wU3157@syntax-violation '#f '"invalid syntax" wU37f4@stx) (void)) (cons (wU302d@bless 'begin) (with-input-from-file wU37fa@filename (lambda () (let wU37fe@f ((wU37fc@ls '())) (let ((wU3800@x (wU29ad@wU287f@read-annotated))) (if (eof-object? wU3800@x) (reverse wU37fc@ls) (wU37fe@f (cons (wU2e50@datum->stx wU37f5@id wU3800@x) wU37fc@ls)))))))))))) (set! wU4b40@wU305d@do-include wU305d@do-include) (set! wU305f@include-macro (lambda (wU3802@e) (let ((wU3804@t wU3802@e)) (let ((wU3806@ls/false (wU3077@syntax-dispatch wU3804@t '(any any)))) (if wU3806@ls/false (apply (lambda (wU3808@id wU3809@filename) (wU305d@do-include wU3802@e wU3808@id wU3809@filename)) wU3806@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3804@t)))))) (set! wU4b41@wU305f@include-macro wU305f@include-macro) (set! wU3061@include-into-macro (lambda (wU380c@e) (let ((wU380e@t wU380c@e)) (let ((wU3810@ls/false (wU3077@syntax-dispatch wU380e@t '(_ any any)))) (if wU3810@ls/false (apply (lambda (wU3812@id wU3813@filename) (wU305d@do-include wU380c@e wU3812@id wU3813@filename)) wU3810@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU380e@t)))))) (set! wU4b42@wU3061@include-into-macro wU3061@include-into-macro) (set! wU3063@syntax-rules-macro (lambda (wU3816@e) (let ((wU3818@t wU3816@e)) (let ((wU381a@ls/false (wU3077@syntax-dispatch wU3818@t '(_ each-any . #(each (any any)))))) (if wU381a@ls/false (apply (lambda (wU381c@lits wU381d@pat* wU381e@tmp*) (begin (wU307d@verify-literals wU381c@lits wU3816@e) (wU302d@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons wU381c@lits (map (lambda (wU3822@pat wU3823@tmp) (let ((wU3826@t wU3822@pat)) (let ((wU3828@ls/false (wU3077@syntax-dispatch wU3826@t '(_ . any)))) (if wU3828@ls/false (apply (lambda (wU382a@rest) (list (cons 'g wU382a@rest) (list 'syntax wU3823@tmp))) wU3828@ls/false) (let ((wU382c@t wU3826@t)) (let ((wU382e@ls/false (wU3077@syntax-dispatch wU382c@t '_))) (if wU382e@ls/false (apply (lambda () (wU3157@syntax-violation '#f '"invalid syntax-rules pattern" wU3816@e wU3822@pat)) wU382e@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU382c@t)))))))) wU381d@pat* wU381e@tmp*)))))))) wU381a@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3818@t)))))) (set! wU4b43@wU3063@syntax-rules-macro wU3063@syntax-rules-macro) (set! wU3065@quasiquote-macro (let ((wU3831@datum '#f) (wU384d@quasicons* '#f) (wU384f@quasicons '#f) (wU3851@quasiappend '#f) (wU3853@quasivector '#f) (wU3855@vquasi '#f) (wU3857@quasi '#f)) (begin (set! wU3831@datum (lambda (wU3932@x) (list (wU2fff@scheme-stx 'quote) (wU2e58@mkstx wU3932@x '() '() '())))) (set! wU384d@quasicons* (lambda (wU392a@x wU392b@y) (let wU3930@f ((wU392e@x wU392a@x)) (if (null? wU392e@x) wU392b@y (wU384f@quasicons (car wU392e@x) (wU3930@f (cdr wU392e@x))))))) (set! wU384f@quasicons (lambda (wU3904@x wU3905@y) (let ((wU3908@t wU3905@y)) (let ((wU390a@ls/false (wU3077@syntax-dispatch wU3908@t '(#(scheme-id quote) any)))) (if wU390a@ls/false (apply (lambda (wU390c@dy) (let ((wU390e@t wU3904@x)) (let ((wU3910@ls/false (wU3077@syntax-dispatch wU390e@t '(#(scheme-id quote) any)))) (if wU3910@ls/false (apply (lambda (wU3912@dx) (list (wU2fff@scheme-stx 'quote) (cons wU3912@dx wU390c@dy))) wU3910@ls/false) (let ((wU3914@t wU390e@t)) (let ((wU3916@ls/false (wU3077@syntax-dispatch wU3914@t '_))) (if wU3916@ls/false (apply (lambda () (let ((wU3918@t wU390c@dy)) (let ((wU391a@ls/false (wU3077@syntax-dispatch wU3918@t '()))) (if wU391a@ls/false (apply (lambda () (list (wU2fff@scheme-stx 'list) wU3904@x)) wU391a@ls/false) (let ((wU391c@t wU3918@t)) (let ((wU391e@ls/false (wU3077@syntax-dispatch wU391c@t '_))) (if wU391e@ls/false (apply (lambda () (list (wU2fff@scheme-stx 'cons) wU3904@x wU3905@y)) wU391e@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU391c@t)))))))) wU3916@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3914@t)))))))) wU390a@ls/false) (let ((wU3920@t wU3908@t)) (let ((wU3922@ls/false (wU3077@syntax-dispatch wU3920@t '(#(scheme-id list) . each-any)))) (if wU3922@ls/false (apply (lambda (wU3924@stuff) (cons* (wU2fff@scheme-stx 'list) wU3904@x wU3924@stuff)) wU3922@ls/false) (let ((wU3926@t wU3920@t)) (let ((wU3928@ls/false (wU3077@syntax-dispatch wU3926@t '_))) (if wU3928@ls/false (apply (lambda () (list (wU2fff@scheme-stx 'cons) wU3904@x wU3905@y)) wU3928@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3926@t)))))))))))) (set! wU3851@quasiappend (lambda (wU38ea@x wU38eb@y) (let ((wU38ee@ls (let wU38f2@f ((wU38f0@x wU38ea@x)) (if (null? wU38f0@x) (let ((wU38f4@t wU38eb@y)) (let ((wU38f6@ls/false (wU3077@syntax-dispatch wU38f4@t '(#(scheme-id quote) ())))) (if wU38f6@ls/false (apply (lambda () '()) wU38f6@ls/false) (let ((wU38f8@t wU38f4@t)) (let ((wU38fa@ls/false (wU3077@syntax-dispatch wU38f8@t '_))) (if wU38fa@ls/false (apply (lambda () (list wU38eb@y)) wU38fa@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU38f8@t))))))) (let ((wU38fc@t (car wU38f0@x))) (let ((wU38fe@ls/false (wU3077@syntax-dispatch wU38fc@t '(#(scheme-id quote) ())))) (if wU38fe@ls/false (apply (lambda () (wU38f2@f (cdr wU38f0@x))) wU38fe@ls/false) (let ((wU3900@t wU38fc@t)) (let ((wU3902@ls/false (wU3077@syntax-dispatch wU3900@t '_))) (if wU3902@ls/false (apply (lambda () (cons (car wU38f0@x) (wU38f2@f (cdr wU38f0@x)))) wU3902@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3900@t))))))))))) (if (null? wU38ee@ls) (list (wU2fff@scheme-stx 'quote) '()) (if (null? (cdr wU38ee@ls)) (car wU38ee@ls) (cons* (wU2fff@scheme-stx 'append) wU38ee@ls)))))) (set! wU3853@quasivector (lambda (wU38b8@x) (let ((wU38ba@pat-x wU38b8@x)) (let ((wU38bc@t wU38ba@pat-x)) (let ((wU38be@ls/false (wU3077@syntax-dispatch wU38bc@t '(#(scheme-id quote) each-any)))) (if wU38be@ls/false (apply (lambda (wU38c0@x*) (list (wU2fff@scheme-stx 'quote) (list->vector wU38c0@x*))) wU38be@ls/false) (let ((wU38c2@t wU38bc@t)) (let ((wU38c4@ls/false (wU3077@syntax-dispatch wU38c2@t '_))) (if wU38c4@ls/false (apply (lambda () (let wU38cc@f ((wU38c6@x wU38b8@x) (wU38c7@k (lambda (wU38ca@ls) (cons* (wU2fff@scheme-stx 'vector) wU38ca@ls)))) (let ((wU38ce@t wU38c6@x)) (let ((wU38d0@ls/false (wU3077@syntax-dispatch wU38ce@t '(#(scheme-id quote) each-any)))) (if wU38d0@ls/false (apply (lambda (wU38d2@x*) (wU38c7@k (map (lambda (wU38d4@x) (list (wU2fff@scheme-stx 'quote) wU38d4@x)) wU38d2@x*))) wU38d0@ls/false) (let ((wU38d6@t wU38ce@t)) (let ((wU38d8@ls/false (wU3077@syntax-dispatch wU38d6@t '(#(scheme-id list) . each-any)))) (if wU38d8@ls/false (apply (lambda (wU38da@x*) (wU38c7@k wU38da@x*)) wU38d8@ls/false) (let ((wU38dc@t wU38d6@t)) (let ((wU38de@ls/false (wU3077@syntax-dispatch wU38dc@t '(#(scheme-id cons) any any)))) (if wU38de@ls/false (apply (lambda (wU38e0@x wU38e1@y) (wU38cc@f wU38e1@y (lambda (wU38e4@ls) (wU38c7@k (cons wU38e0@x wU38e4@ls))))) wU38de@ls/false) (let ((wU38e6@t wU38dc@t)) (let ((wU38e8@ls/false (wU3077@syntax-dispatch wU38e6@t '_))) (if wU38e8@ls/false (apply (lambda () (list (wU2fff@scheme-stx 'list->vector) wU38ba@pat-x)) wU38e8@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU38e6@t))))))))))))))) wU38c4@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU38c2@t)))))))))) (set! wU3855@vquasi (lambda (wU3896@p wU3897@lev) (let ((wU389a@t wU3896@p)) (let ((wU389c@ls/false (wU3077@syntax-dispatch wU389a@t '(any . any)))) (if wU389c@ls/false (apply (lambda (wU389e@p wU389f@q) (let ((wU38a2@t wU389e@p)) (let ((wU38a4@ls/false (wU3077@syntax-dispatch wU38a2@t '(#(scheme-id unquote) . each-any)))) (if wU38a4@ls/false (apply (lambda (wU38a6@p) (if (= wU3897@lev '0) (wU384d@quasicons* wU38a6@p (wU3855@vquasi wU389f@q wU3897@lev)) (wU384f@quasicons (wU384f@quasicons (wU3831@datum 'unquote) (wU3857@quasi wU38a6@p (- wU3897@lev '1))) (wU3855@vquasi wU389f@q wU3897@lev)))) wU38a4@ls/false) (let ((wU38a8@t wU38a2@t)) (let ((wU38aa@ls/false (wU3077@syntax-dispatch wU38a8@t '(#(scheme-id unquote-splicing) . each-any)))) (if wU38aa@ls/false (apply (lambda (wU38ac@p) (if (= wU3897@lev '0) (wU3851@quasiappend wU38ac@p (wU3855@vquasi wU389f@q wU3897@lev)) (wU384f@quasicons (wU384f@quasicons (wU3831@datum 'unquote-splicing) (wU3857@quasi wU38ac@p (- wU3897@lev '1))) (wU3855@vquasi wU389f@q wU3897@lev)))) wU38aa@ls/false) (let ((wU38ae@t wU38a8@t)) (let ((wU38b0@ls/false (wU3077@syntax-dispatch wU38ae@t 'any))) (if wU38b0@ls/false (apply (lambda (wU38b2@p) (wU384f@quasicons (wU3857@quasi wU38b2@p wU3897@lev) (wU3855@vquasi wU389f@q wU3897@lev))) wU38b0@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU38ae@t))))))))))) wU389c@ls/false) (let ((wU38b4@t wU389a@t)) (let ((wU38b6@ls/false (wU3077@syntax-dispatch wU38b4@t '()))) (if wU38b6@ls/false (apply (lambda () (list (wU2fff@scheme-stx 'quote) '())) wU38b6@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU38b4@t))))))))) (set! wU3857@quasi (lambda (wU3860@p wU3861@lev) (let ((wU3864@t wU3860@p)) (let ((wU3866@ls/false (wU3077@syntax-dispatch wU3864@t '(#(scheme-id unquote) any)))) (if wU3866@ls/false (apply (lambda (wU3868@p) (if (= wU3861@lev '0) wU3868@p (wU384f@quasicons (wU3831@datum 'unquote) (wU3857@quasi (list wU3868@p) (- wU3861@lev '1))))) wU3866@ls/false) (let ((wU386a@t wU3864@t)) (let ((wU386c@ls/false (wU3077@syntax-dispatch wU386a@t '((#(scheme-id unquote) . each-any) . any)))) (if wU386c@ls/false (apply (lambda (wU386e@p wU386f@q) (if (= wU3861@lev '0) (wU384d@quasicons* wU386e@p (wU3857@quasi wU386f@q wU3861@lev)) (wU384f@quasicons (wU384f@quasicons (wU3831@datum 'unquote) (wU3857@quasi wU386e@p (- wU3861@lev '1))) (wU3857@quasi wU386f@q wU3861@lev)))) wU386c@ls/false) (let ((wU3872@t wU386a@t)) (let ((wU3874@ls/false (wU3077@syntax-dispatch wU3872@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if wU3874@ls/false (apply (lambda (wU3876@p wU3877@q) (if (= wU3861@lev '0) (wU3851@quasiappend wU3876@p (wU3857@quasi wU3877@q wU3861@lev)) (wU384f@quasicons (wU384f@quasicons (wU3831@datum 'unquote-splicing) (wU3857@quasi wU3876@p (- wU3861@lev '1))) (wU3857@quasi wU3877@q wU3861@lev)))) wU3874@ls/false) (let ((wU387a@t wU3872@t)) (let ((wU387c@ls/false (wU3077@syntax-dispatch wU387a@t '(#(scheme-id quasiquote) any)))) (if wU387c@ls/false (apply (lambda (wU387e@p) (wU384f@quasicons (wU3831@datum 'quasiquote) (wU3857@quasi (list wU387e@p) (+ wU3861@lev '1)))) wU387c@ls/false) (let ((wU3880@t wU387a@t)) (let ((wU3882@ls/false (wU3077@syntax-dispatch wU3880@t '(any . any)))) (if wU3882@ls/false (apply (lambda (wU3884@p wU3885@q) (wU384f@quasicons (wU3857@quasi wU3884@p wU3861@lev) (wU3857@quasi wU3885@q wU3861@lev))) wU3882@ls/false) (let ((wU3888@t wU3880@t)) (let ((wU388a@ls/false (wU3077@syntax-dispatch wU3888@t '#(vector each-any)))) (if (and wU388a@ls/false (apply (lambda (wU388c@x) (not (wU2e3c@stx? wU388c@x))) wU388a@ls/false)) (apply (lambda (wU388e@x) (wU3853@quasivector (wU3855@vquasi wU388e@x wU3861@lev))) wU388a@ls/false) (let ((wU3890@t wU3888@t)) (let ((wU3892@ls/false (wU3077@syntax-dispatch wU3890@t 'any))) (if wU3892@ls/false (apply (lambda (wU3894@p) (list (wU2fff@scheme-stx 'quote) wU3894@p)) wU3892@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3890@t)))))))))))))))))))))))) (lambda (wU3858@x) (let ((wU385a@t wU3858@x)) (let ((wU385c@ls/false (wU3077@syntax-dispatch wU385a@t '(_ any)))) (if wU385c@ls/false (apply (lambda (wU385e@e) (wU3857@quasi wU385e@e '0)) wU385c@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU385a@t)))))))) (set! wU4b44@wU3065@quasiquote-macro wU3065@quasiquote-macro) (set! wU3067@quasisyntax-macro (let ((wU3935@quasi '#f)) (begin (set! wU3935@quasi (lambda (wU3950@p wU3951@lev) (let ((wU3954@t wU3950@p)) (let ((wU3956@ls/false (wU3077@syntax-dispatch wU3954@t '(#(scheme-id unsyntax) any)))) (if wU3956@ls/false (apply (lambda (wU3958@p) (if (= wU3951@lev '0) (let ((wU395a@g (gensym))) (values (list wU395a@g) (list wU3958@p) wU395a@g)) (call-with-values (lambda () (wU3935@quasi wU3958@p (- wU3951@lev '1))) (lambda (wU3962@wU395d wU3963@wU395f wU3964@wU3961) (let ((wU3968@p wU3964@wU3961) (wU3969@rhs* wU3963@wU395f) (wU396a@lhs* wU3962@wU395d)) (values wU396a@lhs* wU3969@rhs* (list 'unsyntax wU3968@p))))))) wU3956@ls/false) (let ((wU396e@t wU3954@t)) (let ((wU3970@ls/false (wU3077@syntax-dispatch wU396e@t '#(scheme-id unsyntax)))) (if (and wU3970@ls/false (apply (lambda () (= wU3951@lev '0)) wU3970@ls/false)) (apply (lambda () (wU3157@syntax-violation '#f '"incorrect use of unsyntax" wU3950@p)) wU3970@ls/false) (let ((wU3972@t wU396e@t)) (let ((wU3974@ls/false (wU3077@syntax-dispatch wU3972@t '((#(scheme-id unsyntax) . each-any) . any)))) (if wU3974@ls/false (apply (lambda (wU3976@p* wU3977@q) (call-with-values (lambda () (wU3935@quasi wU3977@q wU3951@lev)) (lambda (wU3980@wU397b wU3981@wU397d wU3982@wU397f) (let ((wU3986@q wU3982@wU397f) (wU3987@rhs* wU3981@wU397d) (wU3988@lhs* wU3980@wU397b)) (if (= wU3951@lev '0) (let ((wU398c@g* (map (lambda (wU398e@x) (gensym)) wU3976@p*))) (values (append wU398c@g* wU3988@lhs*) (append wU3976@p* wU3987@rhs*) (append wU398c@g* wU3986@q))) (call-with-values (lambda () (wU3935@quasi wU3976@p* (- wU3951@lev '1))) (lambda (wU3996@wU3991 wU3997@wU3993 wU3998@wU3995) (let ((wU399c@p* wU3998@wU3995) (wU399d@rhs2* wU3997@wU3993) (wU399e@lhs2* wU3996@wU3991)) (values (append wU399e@lhs2* wU3988@lhs*) (append wU399d@rhs2* wU3987@rhs*) (cons (cons 'unsyntax wU399c@p*) wU3986@q)))))))))) wU3974@ls/false) (let ((wU39a2@t wU3972@t)) (let ((wU39a4@ls/false (wU3077@syntax-dispatch wU39a2@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if wU39a4@ls/false (apply (lambda (wU39a6@p* wU39a7@q) (call-with-values (lambda () (wU3935@quasi wU39a7@q wU3951@lev)) (lambda (wU39b0@wU39ab wU39b1@wU39ad wU39b2@wU39af) (let ((wU39b6@q wU39b2@wU39af) (wU39b7@rhs* wU39b1@wU39ad) (wU39b8@lhs* wU39b0@wU39ab)) (if (= wU3951@lev '0) (let ((wU39bc@g* (map (lambda (wU39be@x) (gensym)) wU39a6@p*))) (values (append (map (lambda (wU39c0@g) (cons wU39c0@g '(...))) wU39bc@g*) wU39b8@lhs*) (append wU39a6@p* wU39b7@rhs*) (append (apply append (map (lambda (wU39c2@g) (cons wU39c2@g '(...))) wU39bc@g*)) wU39b6@q))) (call-with-values (lambda () (wU3935@quasi wU39a6@p* (- wU3951@lev '1))) (lambda (wU39ca@wU39c5 wU39cb@wU39c7 wU39cc@wU39c9) (let ((wU39d0@p* wU39cc@wU39c9) (wU39d1@rhs2* wU39cb@wU39c7) (wU39d2@lhs2* wU39ca@wU39c5)) (values (append wU39d2@lhs2* wU39b8@lhs*) (append wU39d1@rhs2* wU39b7@rhs*) (cons (cons 'unsyntax-splicing wU39d0@p*) wU39b6@q)))))))))) wU39a4@ls/false) (let ((wU39d6@t wU39a2@t)) (let ((wU39d8@ls/false (wU3077@syntax-dispatch wU39d6@t '#(scheme-id unsyntax-splicing)))) (if (and wU39d8@ls/false (apply (lambda () (= wU3951@lev '0)) wU39d8@ls/false)) (apply (lambda () (wU3157@syntax-violation '#f '"incorrect use of unsyntax-splicing" wU3950@p)) wU39d8@ls/false) (let ((wU39da@t wU39d6@t)) (let ((wU39dc@ls/false (wU3077@syntax-dispatch wU39da@t '(#(scheme-id quasisyntax) any)))) (if wU39dc@ls/false (apply (lambda (wU39de@p) (call-with-values (lambda () (wU3935@quasi wU39de@p (+ wU3951@lev '1))) (lambda (wU39e6@wU39e1 wU39e7@wU39e3 wU39e8@wU39e5) (let ((wU39ec@p wU39e8@wU39e5) (wU39ed@rhs* wU39e7@wU39e3) (wU39ee@lhs* wU39e6@wU39e1)) (values wU39ee@lhs* wU39ed@rhs* (list 'quasisyntax wU39ec@p)))))) wU39dc@ls/false) (let ((wU39f2@t wU39da@t)) (let ((wU39f4@ls/false (wU3077@syntax-dispatch wU39f2@t '(any . any)))) (if wU39f4@ls/false (apply (lambda (wU39f6@p wU39f7@q) (call-with-values (lambda () (wU3935@quasi wU39f6@p wU3951@lev)) (lambda (wU3a06@wU39fb wU3a07@wU39fd wU3a08@wU39ff) (call-with-values (lambda () (wU3935@quasi wU39f7@q wU3951@lev)) (lambda (wU3a0c@wU3a01 wU3a0d@wU3a03 wU3a0e@wU3a05) (let ((wU3a12@q wU3a0e@wU3a05) (wU3a13@rhs2* wU3a0d@wU3a03) (wU3a14@lhs2* wU3a0c@wU3a01) (wU3a15@p wU3a08@wU39ff) (wU3a16@rhs* wU3a07@wU39fd) (wU3a17@lhs* wU3a06@wU39fb)) (values (append wU3a14@lhs2* wU3a17@lhs*) (append wU3a13@rhs2* wU3a16@rhs*) (cons wU3a15@p wU3a12@q)))))))) wU39f4@ls/false) (let ((wU3a1e@t wU39f2@t)) (let ((wU3a20@ls/false (wU3077@syntax-dispatch wU3a1e@t '#(vector each-any)))) (if wU3a20@ls/false (apply (lambda (wU3a22@x*) (call-with-values (lambda () (wU3935@quasi wU3a22@x* wU3951@lev)) (lambda (wU3a2a@wU3a25 wU3a2b@wU3a27 wU3a2c@wU3a29) (let ((wU3a30@x* wU3a2c@wU3a29) (wU3a31@rhs* wU3a2b@wU3a27) (wU3a32@lhs* wU3a2a@wU3a25)) (values wU3a32@lhs* wU3a31@rhs* (list->vector wU3a30@x*)))))) wU3a20@ls/false) (let ((wU3a36@t wU3a1e@t)) (let ((wU3a38@ls/false (wU3077@syntax-dispatch wU3a36@t '_))) (if wU3a38@ls/false (apply (lambda () (values '() '() wU3950@p)) wU3a38@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3a36@t)))))))))))))))))))))))))))))) (lambda (wU3936@x) (let ((wU3938@t wU3936@x)) (let ((wU393a@ls/false (wU3077@syntax-dispatch wU3938@t '(_ any)))) (if wU393a@ls/false (apply (lambda (wU393c@e) (call-with-values (lambda () (wU3935@quasi wU393c@e '0)) (lambda (wU3944@wU393f wU3945@wU3941 wU3946@wU3943) (let ((wU394a@v wU3946@wU3943) (wU394b@rhs* wU3945@wU3941) (wU394c@lhs* wU3944@wU393f)) (wU302d@bless (list 'syntax-case (cons 'list wU394b@rhs*) '() (list wU394c@lhs* (list 'syntax wU394a@v)))))))) wU393a@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3938@t)))))))) (set! wU4b45@wU3067@quasisyntax-macro wU3067@quasisyntax-macro) (set! wU3069@define-struct-macro (lambda (wU3a3a@stx) (wU3157@syntax-violation '#f '"define-struct not supported" wU3a3a@stx))) (set! wU4b46@wU3069@define-struct-macro wU3069@define-struct-macro) (set! wU306b@define-record-type-macro (lambda (wU3a3c@x) (let ((wU3a3f@id '#f) (wU3a41@get-record-name '#f) (wU3a43@get-record-constructor-name '#f) (wU3a45@get-record-predicate-name '#f) (wU3a47@get-clause '#f) (wU3a49@foo-rtd-code '#f) (wU3a4b@parent-rtd-code '#f) (wU3a4d@parent-rcd-code '#f) (wU3a4f@foo-rcd-code '#f) (wU3a51@get-protocol-code '#f) (wU3a53@get-fields '#f) (wU3a55@get-mutator-indices '#f) (wU3a57@get-mutators '#f) (wU3a59@get-accessors '#f) (wU3a5b@enumerate '#f) (wU3a5d@do-define-record '#f) (wU3a5f@verify-clauses '#f)) (begin (set! wU3a3f@id (lambda (wU3c32@ctxt . wU3c34@str*) (wU315b@datum->syntax wU3c32@ctxt (string->symbol (apply string-append (map (lambda (wU3c36@x) (if (symbol? wU3c36@x) (symbol->string wU3c36@x) (if (string? wU3c36@x) wU3c36@x (assertion-violation 'define-record-type '"BUG")))) wU3c34@str*)))))) (set! wU3a41@get-record-name (lambda (wU3c20@spec) (let ((wU3c22@t wU3c20@spec)) (let ((wU3c24@ls/false (wU3077@syntax-dispatch wU3c22@t '(any any any)))) (if wU3c24@ls/false (apply (lambda (wU3c26@foo wU3c27@make-foo wU3c28@foo?) wU3c26@foo) wU3c24@ls/false) (let ((wU3c2c@t wU3c22@t)) (let ((wU3c2e@ls/false (wU3077@syntax-dispatch wU3c2c@t 'any))) (if wU3c2e@ls/false (apply (lambda (wU3c30@foo) wU3c30@foo) wU3c2e@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3c2c@t))))))))) (set! wU3a43@get-record-constructor-name (lambda (wU3c0c@spec) (let ((wU3c0e@t wU3c0c@spec)) (let ((wU3c10@ls/false (wU3077@syntax-dispatch wU3c0e@t '(any any any)))) (if wU3c10@ls/false (apply (lambda (wU3c12@foo wU3c13@make-foo wU3c14@foo?) wU3c13@make-foo) wU3c10@ls/false) (let ((wU3c18@t wU3c0e@t)) (let ((wU3c1a@ls/false (wU3077@syntax-dispatch wU3c18@t 'any))) (if (and wU3c1a@ls/false (apply (lambda (wU3c1c@foo) (wU2e70@id? wU3c1c@foo)) wU3c1a@ls/false)) (apply (lambda (wU3c1e@foo) (wU3a3f@id wU3c1e@foo '"make-" (wU2e84@stx->datum wU3c1e@foo))) wU3c1a@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3c18@t))))))))) (set! wU3a45@get-record-predicate-name (lambda (wU3bf8@spec) (let ((wU3bfa@t wU3bf8@spec)) (let ((wU3bfc@ls/false (wU3077@syntax-dispatch wU3bfa@t '(any any any)))) (if wU3bfc@ls/false (apply (lambda (wU3bfe@foo wU3bff@make-foo wU3c00@foo?) wU3c00@foo?) wU3bfc@ls/false) (let ((wU3c04@t wU3bfa@t)) (let ((wU3c06@ls/false (wU3077@syntax-dispatch wU3c04@t 'any))) (if (and wU3c06@ls/false (apply (lambda (wU3c08@foo) (wU2e70@id? wU3c08@foo)) wU3c06@ls/false)) (apply (lambda (wU3c0a@foo) (wU3a3f@id wU3c0a@foo (wU2e84@stx->datum wU3c0a@foo) '"?")) wU3c06@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3c04@t))))))))) (set! wU3a47@get-clause (lambda (wU3be6@id wU3be7@ls) (let ((wU3bea@t wU3be7@ls)) (let ((wU3bec@ls/false (wU3077@syntax-dispatch wU3bea@t '()))) (if wU3bec@ls/false (apply (lambda () '#f) wU3bec@ls/false) (let ((wU3bee@t wU3bea@t)) (let ((wU3bf0@ls/false (wU3077@syntax-dispatch wU3bee@t '((any . any) . any)))) (if wU3bf0@ls/false (apply (lambda (wU3bf2@x wU3bf3@rest wU3bf4@ls) (if (wU2e76@free-id=? (wU302d@bless wU3be6@id) wU3bf2@x) (cons wU3bf2@x wU3bf3@rest) (wU3a47@get-clause wU3be6@id wU3bf4@ls))) wU3bf0@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3bee@t))))))))) (set! wU3a49@foo-rtd-code (lambda (wU3b94@name wU3b95@clause* wU3b96@parent-rtd-code) (let ((wU3b9b@convert-field-spec* '#f)) (begin (set! wU3b9b@convert-field-spec* (lambda (wU3bcc@ls) (list->vector (map (lambda (wU3bce@x) (let ((wU3bd0@t wU3bce@x)) (let ((wU3bd2@ls/false (wU3077@syntax-dispatch wU3bd0@t '(#(scheme-id mutable) any . any)))) (if wU3bd2@ls/false (apply (lambda (wU3bd4@name wU3bd5@rest) (list 'mutable wU3bd4@name)) wU3bd2@ls/false) (let ((wU3bd8@t wU3bd0@t)) (let ((wU3bda@ls/false (wU3077@syntax-dispatch wU3bd8@t '(#(scheme-id immutable) any . any)))) (if wU3bda@ls/false (apply (lambda (wU3bdc@name wU3bdd@rest) (list 'immutable wU3bdc@name)) wU3bda@ls/false) (let ((wU3be0@t wU3bd8@t)) (let ((wU3be2@ls/false (wU3077@syntax-dispatch wU3be0@t 'any))) (if wU3be2@ls/false (apply (lambda (wU3be4@name) (list 'immutable wU3be4@name)) wU3be2@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3be0@t))))))))))) wU3bcc@ls)))) (let ((wU3b9c@uid-code (let ((wU3ba4@t (wU3a47@get-clause 'nongenerative wU3b95@clause*))) (let ((wU3ba6@ls/false (wU3077@syntax-dispatch wU3ba4@t '(_)))) (if wU3ba6@ls/false (apply (lambda () (list 'quote (gensym))) wU3ba6@ls/false) (let ((wU3ba8@t wU3ba4@t)) (let ((wU3baa@ls/false (wU3077@syntax-dispatch wU3ba8@t '(_ any)))) (if wU3baa@ls/false (apply (lambda (wU3bac@uid) (list 'quote wU3bac@uid)) wU3baa@ls/false) (let ((wU3bae@t wU3ba8@t)) (let ((wU3bb0@ls/false (wU3077@syntax-dispatch wU3bae@t '_))) (if wU3bb0@ls/false (apply (lambda () '#f) wU3bb0@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3bae@t))))))))))) (wU3b9d@sealed? (let ((wU3bb2@t (wU3a47@get-clause 'sealed wU3b95@clause*))) (let ((wU3bb4@ls/false (wU3077@syntax-dispatch wU3bb2@t '(_ #(atom #t))))) (if wU3bb4@ls/false (apply (lambda () '#t) wU3bb4@ls/false) (let ((wU3bb6@t wU3bb2@t)) (let ((wU3bb8@ls/false (wU3077@syntax-dispatch wU3bb6@t '_))) (if wU3bb8@ls/false (apply (lambda () '#f) wU3bb8@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3bb6@t)))))))) (wU3b9e@opaque? (let ((wU3bba@t (wU3a47@get-clause 'opaque wU3b95@clause*))) (let ((wU3bbc@ls/false (wU3077@syntax-dispatch wU3bba@t '(_ #(atom #t))))) (if wU3bbc@ls/false (apply (lambda () '#t) wU3bbc@ls/false) (let ((wU3bbe@t wU3bba@t)) (let ((wU3bc0@ls/false (wU3077@syntax-dispatch wU3bbe@t '_))) (if wU3bc0@ls/false (apply (lambda () '#f) wU3bc0@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3bbe@t)))))))) (wU3b9f@fields (let ((wU3bc2@t (wU3a47@get-clause 'fields wU3b95@clause*))) (let ((wU3bc4@ls/false (wU3077@syntax-dispatch wU3bc2@t '(_ . each-any)))) (if wU3bc4@ls/false (apply (lambda (wU3bc6@field-spec*) (list 'quote (wU3b9b@convert-field-spec* wU3bc6@field-spec*))) wU3bc4@ls/false) (let ((wU3bc8@t wU3bc2@t)) (let ((wU3bca@ls/false (wU3077@syntax-dispatch wU3bc8@t '_))) (if wU3bca@ls/false (apply (lambda () ''#()) wU3bca@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3bc8@t))))))))) (wU302d@bless (list 'make-record-type-descriptor (list 'quote wU3b94@name) wU3b96@parent-rtd-code wU3b9c@uid-code wU3b9d@sealed? wU3b9e@opaque? wU3b9f@fields))))))) (set! wU3a4b@parent-rtd-code (lambda (wU3b7c@clause*) (let ((wU3b7e@t (wU3a47@get-clause 'parent wU3b7c@clause*))) (let ((wU3b80@ls/false (wU3077@syntax-dispatch wU3b7e@t '(_ any)))) (if wU3b80@ls/false (apply (lambda (wU3b82@name) (list 'record-type-descriptor wU3b82@name)) wU3b80@ls/false) (let ((wU3b84@t wU3b7e@t)) (let ((wU3b86@ls/false (wU3077@syntax-dispatch wU3b84@t '#(atom #f)))) (if wU3b86@ls/false (apply (lambda () (let ((wU3b88@t (wU3a47@get-clause 'parent-rtd wU3b7c@clause*))) (let ((wU3b8a@ls/false (wU3077@syntax-dispatch wU3b88@t '(_ any any)))) (if wU3b8a@ls/false (apply (lambda (wU3b8c@rtd wU3b8d@rcd) wU3b8c@rtd) wU3b8a@ls/false) (let ((wU3b90@t wU3b88@t)) (let ((wU3b92@ls/false (wU3077@syntax-dispatch wU3b90@t '#(atom #f)))) (if wU3b92@ls/false (apply (lambda () '#f) wU3b92@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3b90@t)))))))) wU3b86@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3b84@t))))))))) (set! wU3a4d@parent-rcd-code (lambda (wU3b64@clause*) (let ((wU3b66@t (wU3a47@get-clause 'parent wU3b64@clause*))) (let ((wU3b68@ls/false (wU3077@syntax-dispatch wU3b66@t '(_ any)))) (if wU3b68@ls/false (apply (lambda (wU3b6a@name) (list 'record-constructor-descriptor wU3b6a@name)) wU3b68@ls/false) (let ((wU3b6c@t wU3b66@t)) (let ((wU3b6e@ls/false (wU3077@syntax-dispatch wU3b6c@t '#(atom #f)))) (if wU3b6e@ls/false (apply (lambda () (let ((wU3b70@t (wU3a47@get-clause 'parent-rtd wU3b64@clause*))) (let ((wU3b72@ls/false (wU3077@syntax-dispatch wU3b70@t '(_ any any)))) (if wU3b72@ls/false (apply (lambda (wU3b74@rtd wU3b75@rcd) wU3b75@rcd) wU3b72@ls/false) (let ((wU3b78@t wU3b70@t)) (let ((wU3b7a@ls/false (wU3077@syntax-dispatch wU3b78@t '#(atom #f)))) (if wU3b7a@ls/false (apply (lambda () '#f) wU3b7a@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3b78@t)))))))) wU3b6e@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3b6c@t))))))))) (set! wU3a4f@foo-rcd-code (lambda (wU3b5c@clause* wU3b5d@foo-rtd wU3b5e@protocol wU3b5f@parent-rcd-code) (list 'make-record-constructor-descriptor wU3b5d@foo-rtd wU3b5f@parent-rcd-code wU3b5e@protocol))) (set! wU3a51@get-protocol-code (lambda (wU3b50@clause*) (let ((wU3b52@t (wU3a47@get-clause 'protocol wU3b50@clause*))) (let ((wU3b54@ls/false (wU3077@syntax-dispatch wU3b52@t '(_ any)))) (if wU3b54@ls/false (apply (lambda (wU3b56@expr) wU3b56@expr) wU3b54@ls/false) (let ((wU3b58@t wU3b52@t)) (let ((wU3b5a@ls/false (wU3077@syntax-dispatch wU3b58@t '_))) (if wU3b5a@ls/false (apply (lambda () '#f) wU3b5a@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3b58@t))))))))) (set! wU3a53@get-fields (lambda (wU3b3e@clause*) (let ((wU3b40@t wU3b3e@clause*)) (let ((wU3b42@ls/false (wU3077@syntax-dispatch wU3b40@t '()))) (if wU3b42@ls/false (apply (lambda () '()) wU3b42@ls/false) (let ((wU3b44@t wU3b40@t)) (let ((wU3b46@ls/false (wU3077@syntax-dispatch wU3b44@t '((#(scheme-id fields) . each-any) . _)))) (if wU3b46@ls/false (apply (lambda (wU3b48@f*) wU3b48@f*) wU3b46@ls/false) (let ((wU3b4a@t wU3b44@t)) (let ((wU3b4c@ls/false (wU3077@syntax-dispatch wU3b4a@t '(_ . any)))) (if wU3b4c@ls/false (apply (lambda (wU3b4e@rest) (wU3a53@get-fields wU3b4e@rest)) wU3b4c@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3b4a@t)))))))))))) (set! wU3a55@get-mutator-indices (lambda (wU3b26@fields) (let wU3b2c@f ((wU3b28@fields wU3b26@fields) (wU3b29@i '0)) (let ((wU3b2e@t wU3b28@fields)) (let ((wU3b30@ls/false (wU3077@syntax-dispatch wU3b2e@t '()))) (if wU3b30@ls/false (apply (lambda () '()) wU3b30@ls/false) (let ((wU3b32@t wU3b2e@t)) (let ((wU3b34@ls/false (wU3077@syntax-dispatch wU3b32@t '((#(scheme-id mutable) . _) . any)))) (if wU3b34@ls/false (apply (lambda (wU3b36@rest) (cons wU3b29@i (wU3b2c@f wU3b36@rest (+ wU3b29@i '1)))) wU3b34@ls/false) (let ((wU3b38@t wU3b32@t)) (let ((wU3b3a@ls/false (wU3077@syntax-dispatch wU3b38@t '(_ . any)))) (if wU3b3a@ls/false (apply (lambda (wU3b3c@rest) (wU3b2c@f wU3b3c@rest (+ wU3b29@i '1))) wU3b3a@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3b38@t))))))))))))) (set! wU3a57@get-mutators (lambda (wU3afc@foo wU3afd@fields) (let ((wU3b01@gen-name '#f)) (begin (set! wU3b01@gen-name (lambda (wU3b24@x) (wU315b@datum->syntax wU3afc@foo (string->symbol (string-append (symbol->string (wU315d@syntax->datum wU3afc@foo)) '"-" (symbol->string (wU315d@syntax->datum wU3b24@x)) '"-set!"))))) (let wU3b04@f ((wU3b02@fields wU3afd@fields)) (let ((wU3b06@t wU3b02@fields)) (let ((wU3b08@ls/false (wU3077@syntax-dispatch wU3b06@t '()))) (if wU3b08@ls/false (apply (lambda () '()) wU3b08@ls/false) (let ((wU3b0a@t wU3b06@t)) (let ((wU3b0c@ls/false (wU3077@syntax-dispatch wU3b0a@t '((#(scheme-id mutable) any any any) . any)))) (if wU3b0c@ls/false (apply (lambda (wU3b0e@name wU3b0f@accessor wU3b10@mutator wU3b11@rest) (cons wU3b10@mutator (wU3b04@f wU3b11@rest))) wU3b0c@ls/false) (let ((wU3b16@t wU3b0a@t)) (let ((wU3b18@ls/false (wU3077@syntax-dispatch wU3b16@t '((#(scheme-id mutable) any) . any)))) (if wU3b18@ls/false (apply (lambda (wU3b1a@name wU3b1b@rest) (cons (wU3b01@gen-name wU3b1a@name) (wU3b04@f wU3b1b@rest))) wU3b18@ls/false) (let ((wU3b1e@t wU3b16@t)) (let ((wU3b20@ls/false (wU3077@syntax-dispatch wU3b1e@t '(_ . any)))) (if wU3b20@ls/false (apply (lambda (wU3b22@rest) (wU3b04@f wU3b22@rest)) wU3b20@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3b1e@t)))))))))))))))))) (set! wU3a59@get-accessors (lambda (wU3ab8@foo wU3ab9@fields) (let ((wU3abd@gen-name '#f)) (begin (set! wU3abd@gen-name (lambda (wU3afa@x) (wU315b@datum->syntax wU3ab8@foo (string->symbol (string-append (symbol->string (wU315d@syntax->datum wU3ab8@foo)) '"-" (symbol->string (wU315d@syntax->datum wU3afa@x))))))) (map (lambda (wU3abe@field) (let ((wU3ac0@t wU3abe@field)) (let ((wU3ac2@ls/false (wU3077@syntax-dispatch wU3ac0@t '(#(scheme-id mutable) any any any)))) (if (and wU3ac2@ls/false (apply (lambda (wU3ac4@name wU3ac5@accessor wU3ac6@mutator) (wU2e70@id? wU3ac5@accessor)) wU3ac2@ls/false)) (apply (lambda (wU3aca@name wU3acb@accessor wU3acc@mutator) wU3acb@accessor) wU3ac2@ls/false) (let ((wU3ad0@t wU3ac0@t)) (let ((wU3ad2@ls/false (wU3077@syntax-dispatch wU3ad0@t '(#(scheme-id immutable) any any)))) (if (and wU3ad2@ls/false (apply (lambda (wU3ad4@name wU3ad5@accessor) (wU2e70@id? wU3ad5@accessor)) wU3ad2@ls/false)) (apply (lambda (wU3ad8@name wU3ad9@accessor) wU3ad9@accessor) wU3ad2@ls/false) (let ((wU3adc@t wU3ad0@t)) (let ((wU3ade@ls/false (wU3077@syntax-dispatch wU3adc@t '(#(scheme-id mutable) any)))) (if (and wU3ade@ls/false (apply (lambda (wU3ae0@name) (wU2e70@id? wU3ae0@name)) wU3ade@ls/false)) (apply (lambda (wU3ae2@name) (wU3abd@gen-name wU3ae2@name)) wU3ade@ls/false) (let ((wU3ae4@t wU3adc@t)) (let ((wU3ae6@ls/false (wU3077@syntax-dispatch wU3ae4@t '(#(scheme-id immutable) any)))) (if (and wU3ae6@ls/false (apply (lambda (wU3ae8@name) (wU2e70@id? wU3ae8@name)) wU3ae6@ls/false)) (apply (lambda (wU3aea@name) (wU3abd@gen-name wU3aea@name)) wU3ae6@ls/false) (let ((wU3aec@t wU3ae4@t)) (let ((wU3aee@ls/false (wU3077@syntax-dispatch wU3aec@t 'any))) (if (and wU3aee@ls/false (apply (lambda (wU3af0@name) (wU2e70@id? wU3af0@name)) wU3aee@ls/false)) (apply (lambda (wU3af2@name) (wU3abd@gen-name wU3af2@name)) wU3aee@ls/false) (let ((wU3af4@t wU3aec@t)) (let ((wU3af6@ls/false (wU3077@syntax-dispatch wU3af4@t 'any))) (if wU3af6@ls/false (apply (lambda (wU3af8@others) (wU3157@syntax-violation '#f '"invalid field spec" wU3abe@field)) wU3af6@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3af4@t)))))))))))))))))))) wU3ab9@fields))))) (set! wU3a5b@enumerate (lambda (wU3ab0@ls) (let wU3ab6@f ((wU3ab2@ls wU3ab0@ls) (wU3ab3@i '0)) (if (null? wU3ab2@ls) '() (cons wU3ab3@i (wU3ab6@f (cdr wU3ab2@ls) (+ wU3ab3@i '1))))))) (set! wU3a5d@do-define-record (lambda (wU3a88@namespec wU3a89@clause*) (let ((wU3a8c@foo (wU3a41@get-record-name wU3a88@namespec))) (let ((wU3a8e@foo-rtd (gensym))) (let ((wU3a90@foo-rcd (gensym))) (let ((wU3a92@protocol (gensym))) (let ((wU3a94@make-foo (wU3a43@get-record-constructor-name wU3a88@namespec))) (let ((wU3a96@fields (wU3a53@get-fields wU3a89@clause*))) (let ((wU3a98@idx* (wU3a5b@enumerate wU3a96@fields))) (let ((wU3a9a@foo-x* (wU3a59@get-accessors wU3a8c@foo wU3a96@fields))) (let ((wU3a9c@set-foo-x!* (wU3a57@get-mutators wU3a8c@foo wU3a96@fields))) (let ((wU3a9e@set-foo-idx* (wU3a55@get-mutator-indices wU3a96@fields))) (let ((wU3aa0@foo? (wU3a45@get-record-predicate-name wU3a88@namespec))) (let ((wU3aa2@foo-rtd-code (wU3a49@foo-rtd-code wU3a8c@foo wU3a89@clause* (wU3a4b@parent-rtd-code wU3a89@clause*)))) (let ((wU3aa4@foo-rcd-code (wU3a4f@foo-rcd-code wU3a89@clause* wU3a8e@foo-rtd wU3a92@protocol (wU3a4d@parent-rcd-code wU3a89@clause*)))) (let ((wU3aa6@protocol-code (wU3a51@get-protocol-code wU3a89@clause*))) (wU302d@bless (cons 'begin (cons (list 'define wU3a8e@foo-rtd wU3aa2@foo-rtd-code) (cons (list 'define wU3a92@protocol wU3aa6@protocol-code) (cons (list 'define wU3a90@foo-rcd wU3aa4@foo-rcd-code) (cons (list 'define-syntax wU3a8c@foo (list 'list ''$rtd (list 'syntax wU3a8e@foo-rtd) (list 'syntax wU3a90@foo-rcd))) (cons (list 'define wU3aa0@foo? (list 'record-predicate wU3a8e@foo-rtd)) (cons (list 'define wU3a94@make-foo (list 'record-constructor wU3a90@foo-rcd)) (append (map (lambda (wU3aa8@foo-x wU3aa9@idx) (list 'define wU3aa8@foo-x (list 'record-accessor wU3a8e@foo-rtd wU3aa9@idx))) wU3a9a@foo-x* wU3a98@idx*) (map (lambda (wU3aac@set-foo-x! wU3aad@idx) (list 'define wU3aac@set-foo-x! (list 'record-mutator wU3a8e@foo-rtd wU3aad@idx))) wU3a9c@set-foo-x!* wU3a9e@set-foo-idx*)))))))))))))))))))))))))) (set! wU3a5f@verify-clauses (lambda (wU3a68@x wU3a69@cls*) (let ((wU3a6d@valid-kwds '#f) (wU3a6f@free-id-member? '#f)) (begin (set! wU3a6d@valid-kwds (map wU302d@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! wU3a6f@free-id-member? (lambda (wU3a84@x wU3a85@ls) (and (pair? wU3a85@ls) (or (wU2e76@free-id=? wU3a84@x (car wU3a85@ls)) (wU3a6f@free-id-member? wU3a84@x (cdr wU3a85@ls)))))) (let wU3a74@f ((wU3a70@cls* wU3a69@cls*) (wU3a71@seen* '())) (if (not (null? wU3a70@cls*)) (let ((wU3a76@t (car wU3a70@cls*))) (let ((wU3a78@ls/false (wU3077@syntax-dispatch wU3a76@t '(any . any)))) (if wU3a78@ls/false (apply (lambda (wU3a7a@kwd wU3a7b@rest) (if (or (not (wU2e70@id? wU3a7a@kwd)) (not (wU3a6f@free-id-member? wU3a7a@kwd wU3a6d@valid-kwds))) (wU3157@syntax-violation '#f '"not a valid define-record-type keyword" wU3a7a@kwd) (if (wU2e7c@bound-id-member? wU3a7a@kwd wU3a71@seen*) (wU3157@syntax-violation '#f '"duplicate use of keyword " wU3a68@x wU3a7a@kwd) (wU3a74@f (cdr wU3a70@cls*) (cons wU3a7a@kwd wU3a71@seen*))))) wU3a78@ls/false) (let ((wU3a7e@t wU3a76@t)) (let ((wU3a80@ls/false (wU3077@syntax-dispatch wU3a7e@t 'any))) (if wU3a80@ls/false (apply (lambda (wU3a82@cls) (wU3157@syntax-violation '#f '"malformed define-record-type clause" wU3a82@cls)) wU3a80@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3a7e@t))))))) (void))))))) (let ((wU3a60@t wU3a3c@x)) (let ((wU3a62@ls/false (wU3077@syntax-dispatch wU3a60@t '(_ any . each-any)))) (if wU3a62@ls/false (apply (lambda (wU3a64@namespec wU3a65@clause*) (begin (wU3a5f@verify-clauses wU3a3c@x wU3a65@clause*) (wU3a5d@do-define-record wU3a64@namespec wU3a65@clause*))) wU3a62@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3a60@t)))))))) (set! wU4b47@wU306b@define-record-type-macro wU306b@define-record-type-macro) (set! wU306d@define-condition-type-macro (lambda (wU3c38@x) (let ((wU3c3b@mkname '#f)) (begin (set! wU3c3b@mkname (lambda (wU3c68@name wU3c69@suffix) (wU315b@datum->syntax wU3c68@name (string->symbol (string-append (symbol->string (wU315d@syntax->datum wU3c68@name)) wU3c69@suffix))))) (let ((wU3c3c@t wU3c38@x)) (let ((wU3c3e@ls/false (wU3077@syntax-dispatch wU3c3c@t '(any any any any any . #(each (any any)))))) (if (and wU3c3e@ls/false (apply (lambda (wU3c40@ctxt wU3c41@name wU3c42@super wU3c43@constructor wU3c44@predicate wU3c45@field* wU3c46@accessor*) (and (wU2e70@id? wU3c41@name) (wU2e70@id? wU3c42@super) (wU2e70@id? wU3c43@constructor) (wU2e70@id? wU3c44@predicate) (for-all wU2e70@id? wU3c45@field*) (for-all wU2e70@id? wU3c46@accessor*))) wU3c3e@ls/false)) (apply (lambda (wU3c4e@ctxt wU3c4f@name wU3c50@super wU3c51@constructor wU3c52@predicate wU3c53@field* wU3c54@accessor*) (let ((wU3c5c@aux-accessor* (map (lambda (wU3c5e@x) (gensym)) wU3c54@accessor*))) (wU302d@bless (cons 'begin (cons (cons 'define-record-type (cons (list wU3c4f@name wU3c51@constructor (gensym)) (cons (list 'parent wU3c50@super) (cons (cons 'fields (map (lambda (wU3c60@field wU3c61@aux) (list 'immutable wU3c60@field wU3c61@aux)) wU3c53@field* wU3c5c@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define wU3c52@predicate (list 'condition-predicate (list 'record-type-descriptor wU3c4f@name))) (map (lambda (wU3c64@accessor wU3c65@aux) (list 'define wU3c64@accessor (list 'condition-accessor (list 'record-type-descriptor wU3c4f@name) wU3c65@aux))) wU3c54@accessor* wU3c5c@aux-accessor*))))))) wU3c3e@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3c3c@t)))))))) (set! wU4b48@wU306d@define-condition-type-macro wU306d@define-condition-type-macro) (set! wU306f@incorrect-usage-macro (lambda (wU3c6c@e) (wU3157@syntax-violation '#f '"incorrect usage of auxiliary keyword" wU3c6c@e))) (set! wU4b49@wU306f@incorrect-usage-macro wU306f@incorrect-usage-macro) (set! wU3071@parameterize-macro (lambda (wU3c6e@e) (let ((wU3c70@t wU3c6e@e)) (let ((wU3c72@ls/false (wU3077@syntax-dispatch wU3c70@t '(_ () any . each-any)))) (if wU3c72@ls/false (apply (lambda (wU3c74@b wU3c75@b*) (wU302d@bless (cons 'let (cons '() (cons wU3c74@b wU3c75@b*))))) wU3c72@ls/false) (let ((wU3c78@t wU3c70@t)) (let ((wU3c7a@ls/false (wU3077@syntax-dispatch wU3c78@t '(_ #(each (any any)) any . each-any)))) (if wU3c7a@ls/false (apply (lambda (wU3c7c@olhs* wU3c7d@orhs* wU3c7e@b wU3c7f@b*) (let ((wU3c84@lhs* (wU3145@generate-temporaries wU3c7c@olhs*)) (wU3c85@rhs* (wU3145@generate-temporaries wU3c7d@orhs*))) (wU302d@bless (cons (list 'lambda (append wU3c84@lhs* wU3c85@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (wU3c88@lhs wU3c89@rhs) (list 'let (list (list 't (list wU3c88@lhs))) (list wU3c88@lhs wU3c89@rhs) (cons 'set! (cons wU3c89@rhs '(t))))) wU3c84@lhs* wU3c85@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons wU3c7e@b wU3c7f@b*))) '(swap)))))) (append wU3c7c@olhs* wU3c7d@orhs*))))) wU3c7a@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3c78@t))))))))) (set! wU4b4a@wU3071@parameterize-macro wU3071@parameterize-macro) (set! wU3073@foreign-call-transformer (lambda (wU3c8c@e wU3c8d@r wU3c8e@mr) (let ((wU3c92@t wU3c8c@e)) (let ((wU3c94@ls/false (wU3077@syntax-dispatch wU3c92@t '(_ any . each-any)))) (if wU3c94@ls/false (apply (lambda (wU3c96@name wU3c97@arg*) (cons 'foreign-call (cons (wU3099@chi-expr wU3c96@name wU3c8d@r wU3c8e@mr) (wU3095@chi-expr* wU3c97@arg* wU3c8d@r wU3c8e@mr)))) wU3c94@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3c92@t)))))) (set! wU4b4b@wU3073@foreign-call-transformer wU3073@foreign-call-transformer) (set! wU3075@convert-pattern (lambda (wU3c9a@pattern wU3c9b@keys) (let ((wU3c9f@cvt* '#f) (wU3ca1@cvt '#f)) (begin (set! wU3c9f@cvt* (lambda (wU3d3e@p* wU3d3f@n wU3d40@ids) (if (null? wU3d3e@p*) (values '() wU3d40@ids) (call-with-values (lambda () (wU3c9f@cvt* (cdr wU3d3e@p*) wU3d3f@n wU3d40@ids)) (lambda (wU3d48@wU3d45 wU3d49@wU3d47) (let ((wU3d4c@ids wU3d49@wU3d47) (wU3d4d@y wU3d48@wU3d45)) (call-with-values (lambda () (wU3ca1@cvt (car wU3d3e@p*) wU3d3f@n wU3d4c@ids)) (lambda (wU3d54@wU3d51 wU3d55@wU3d53) (let ((wU3d58@ids wU3d55@wU3d53) (wU3d59@x wU3d54@wU3d51)) (values (cons wU3d59@x wU3d4d@y) wU3d58@ids)))))))))) (set! wU3ca1@cvt (lambda (wU3ca2@p wU3ca3@n wU3ca4@ids) (let ((wU3ca8@t wU3ca2@p)) (let ((wU3caa@ls/false (wU3077@syntax-dispatch wU3ca8@t 'any))) (if (and wU3caa@ls/false (apply (lambda (wU3cac@id) (wU2e70@id? wU3cac@id)) wU3caa@ls/false)) (apply (lambda (wU3cae@id) (if (wU2e7c@bound-id-member? wU3ca2@p wU3c9b@keys) (values (vector 'free-id wU3ca2@p) wU3ca4@ids) (if (wU2e76@free-id=? wU3ca2@p (wU2fff@scheme-stx '_)) (values '_ wU3ca4@ids) (values 'any (cons (cons wU3ca2@p wU3ca3@n) wU3ca4@ids))))) wU3caa@ls/false) (let ((wU3cb0@t wU3ca8@t)) (let ((wU3cb2@ls/false (wU3077@syntax-dispatch wU3cb0@t '(any any)))) (if (and wU3cb2@ls/false (apply (lambda (wU3cb4@p wU3cb5@dots) (wU3079@ellipsis? wU3cb5@dots)) wU3cb2@ls/false)) (apply (lambda (wU3cb8@p wU3cb9@dots) (call-with-values (lambda () (wU3ca1@cvt wU3cb8@p (+ wU3ca3@n '1) wU3ca4@ids)) (lambda (wU3cc0@wU3cbd wU3cc1@wU3cbf) (let ((wU3cc4@ids wU3cc1@wU3cbf) (wU3cc5@p wU3cc0@wU3cbd)) (values (if (eq? wU3cc5@p 'any) 'each-any (vector 'each wU3cc5@p)) wU3cc4@ids))))) wU3cb2@ls/false) (let ((wU3cc8@t wU3cb0@t)) (let ((wU3cca@ls/false (wU3077@syntax-dispatch wU3cc8@t '(any any . #(each+ any () any))))) (if (and wU3cca@ls/false (apply (lambda (wU3ccc@x wU3ccd@dots wU3cce@ys wU3ccf@z) (wU3079@ellipsis? wU3ccd@dots)) wU3cca@ls/false)) (apply (lambda (wU3cd4@x wU3cd5@dots wU3cd6@ys wU3cd7@z) (call-with-values (lambda () (wU3ca1@cvt wU3cd7@z wU3ca3@n wU3ca4@ids)) (lambda (wU3ce0@wU3cdd wU3ce1@wU3cdf) (let ((wU3ce4@ids wU3ce1@wU3cdf) (wU3ce5@z wU3ce0@wU3cdd)) (call-with-values (lambda () (wU3c9f@cvt* wU3cd6@ys wU3ca3@n wU3ce4@ids)) (lambda (wU3cec@wU3ce9 wU3ced@wU3ceb) (let ((wU3cf0@ids wU3ced@wU3ceb) (wU3cf1@ys wU3cec@wU3ce9)) (call-with-values (lambda () (wU3ca1@cvt wU3cd4@x (+ wU3ca3@n '1) wU3cf0@ids)) (lambda (wU3cf8@wU3cf5 wU3cf9@wU3cf7) (let ((wU3cfc@ids wU3cf9@wU3cf7) (wU3cfd@x wU3cf8@wU3cf5)) (values (vector 'each+ wU3cfd@x (reverse wU3cf1@ys) wU3ce5@z) wU3cfc@ids))))))))))) wU3cca@ls/false) (let ((wU3d00@t wU3cc8@t)) (let ((wU3d02@ls/false (wU3077@syntax-dispatch wU3d00@t '(any . any)))) (if wU3d02@ls/false (apply (lambda (wU3d04@x wU3d05@y) (call-with-values (lambda () (wU3ca1@cvt wU3d05@y wU3ca3@n wU3ca4@ids)) (lambda (wU3d0c@wU3d09 wU3d0d@wU3d0b) (let ((wU3d10@ids wU3d0d@wU3d0b) (wU3d11@y wU3d0c@wU3d09)) (call-with-values (lambda () (wU3ca1@cvt wU3d04@x wU3ca3@n wU3d10@ids)) (lambda (wU3d18@wU3d15 wU3d19@wU3d17) (let ((wU3d1c@ids wU3d19@wU3d17) (wU3d1d@x wU3d18@wU3d15)) (values (cons wU3d1d@x wU3d11@y) wU3d1c@ids)))))))) wU3d02@ls/false) (let ((wU3d20@t wU3d00@t)) (let ((wU3d22@ls/false (wU3077@syntax-dispatch wU3d20@t '()))) (if wU3d22@ls/false (apply (lambda () (values '() wU3ca4@ids)) wU3d22@ls/false) (let ((wU3d24@t wU3d20@t)) (let ((wU3d26@ls/false (wU3077@syntax-dispatch wU3d24@t '#(vector each-any)))) (if (and wU3d26@ls/false (apply (lambda (wU3d28@p) (not (wU2e3c@stx? wU3d28@p))) wU3d26@ls/false)) (apply (lambda (wU3d2a@p) (call-with-values (lambda () (wU3ca1@cvt wU3d2a@p wU3ca3@n wU3ca4@ids)) (lambda (wU3d30@wU3d2d wU3d31@wU3d2f) (let ((wU3d34@ids wU3d31@wU3d2f) (wU3d35@p wU3d30@wU3d2d)) (values (vector 'vector wU3d35@p) wU3d34@ids))))) wU3d26@ls/false) (let ((wU3d38@t wU3d24@t)) (let ((wU3d3a@ls/false (wU3077@syntax-dispatch wU3d38@t 'any))) (if wU3d3a@ls/false (apply (lambda (wU3d3c@datum) (values (vector 'atom (wU2e84@stx->datum wU3d3c@datum)) wU3ca4@ids)) wU3d3a@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3d38@t)))))))))))))))))))))))) (wU3ca1@cvt wU3c9a@pattern '0 '()))))) (set! wU4b4c@wU3075@convert-pattern wU3075@convert-pattern) (set! wU3077@syntax-dispatch (let ((wU3d5d@stx^ '#f) (wU3d5f@match-each '#f) (wU3d61@match-each+ '#f) (wU3d63@match-each-any '#f) (wU3d65@match-empty '#f) (wU3d67@combine '#f) (wU3d69@match* '#f) (wU3d6b@match '#f)) (begin (set! wU3d5d@stx^ (lambda (wU3e38@e wU3e39@m* wU3e3a@s* wU3e3b@ae*) (if (and (null? wU3e39@m*) (null? wU3e3a@s*) (null? wU3e3b@ae*)) wU3e38@e (wU2e58@mkstx wU3e38@e wU3e39@m* wU3e3a@s* wU3e3b@ae*)))) (set! wU3d5f@match-each (lambda (wU3e18@e wU3e19@p wU3e1a@m* wU3e1b@s* wU3e1c@ae*) (if (pair? wU3e18@e) (let ((wU3e22@first (wU3d6b@match (car wU3e18@e) wU3e19@p wU3e1a@m* wU3e1b@s* wU3e1c@ae* '()))) (and wU3e22@first (let ((wU3e24@rest (wU3d5f@match-each (cdr wU3e18@e) wU3e19@p wU3e1a@m* wU3e1b@s* wU3e1c@ae*))) (and wU3e24@rest (cons wU3e22@first wU3e24@rest))))) (if (null? wU3e18@e) '() (if (wU2e3c@stx? wU3e18@e) (and (not (wU2df6@top-marked? wU3e1a@m*)) (call-with-values (lambda () (join-wraps wU3e1a@m* wU3e1b@s* wU3e1c@ae* wU3e18@e)) (lambda (wU3e2c@wU3e27 wU3e2d@wU3e29 wU3e2e@wU3e2b) (let ((wU3e32@ae* wU3e2e@wU3e2b) (wU3e33@s* wU3e2d@wU3e29) (wU3e34@m* wU3e2c@wU3e27)) (wU3d5f@match-each (wU2e3e@stx-expr wU3e18@e) wU3e19@p wU3e34@m* wU3e33@s* wU3e32@ae*))))) (if (wU29af@wU2883@annotation? wU3e18@e) (wU3d5f@match-each (wU29b1@wU2887@annotation-expression wU3e18@e) wU3e19@p wU3e1a@m* wU3e1b@s* wU3e1c@ae*) '#f)))))) (set! wU3d61@match-each+ (lambda (wU3dd8@e wU3dd9@x-pat wU3dda@y-pat wU3ddb@z-pat wU3ddc@m* wU3ddd@s* wU3dde@ae* wU3ddf@r) (let wU3df0@f ((wU3de8@e wU3dd8@e) (wU3de9@m* wU3ddc@m*) (wU3dea@s* wU3ddd@s*) (wU3deb@ae* wU3dde@ae*)) (if (pair? wU3de8@e) (call-with-values (lambda () (wU3df0@f (cdr wU3de8@e) wU3de9@m* wU3dea@s* wU3deb@ae*)) (lambda (wU3df8@wU3df3 wU3df9@wU3df5 wU3dfa@wU3df7) (let ((wU3dfe@r wU3dfa@wU3df7) (wU3dff@y-pat wU3df9@wU3df5) (wU3e00@xr* wU3df8@wU3df3)) (if wU3dfe@r (if (null? wU3dff@y-pat) (let ((wU3e04@xr (wU3d6b@match (car wU3de8@e) wU3dd9@x-pat wU3de9@m* wU3dea@s* wU3deb@ae* '()))) (if wU3e04@xr (values (cons wU3e04@xr wU3e00@xr*) wU3dff@y-pat wU3dfe@r) (values '#f '#f '#f))) (values '() (cdr wU3dff@y-pat) (wU3d6b@match (car wU3de8@e) (car wU3dff@y-pat) wU3de9@m* wU3dea@s* wU3deb@ae* wU3dfe@r))) (values '#f '#f '#f))))) (if (wU2e3c@stx? wU3de8@e) (if (wU2df6@top-marked? wU3de9@m*) (values '() wU3dda@y-pat (wU3d6b@match wU3de8@e wU3ddb@z-pat wU3de9@m* wU3dea@s* wU3deb@ae* wU3ddf@r)) (call-with-values (lambda () (join-wraps wU3de9@m* wU3dea@s* wU3deb@ae* wU3de8@e)) (lambda (wU3e0c@wU3e07 wU3e0d@wU3e09 wU3e0e@wU3e0b) (let ((wU3e12@ae* wU3e0e@wU3e0b) (wU3e13@s* wU3e0d@wU3e09) (wU3e14@m* wU3e0c@wU3e07)) (wU3df0@f (wU2e3e@stx-expr wU3de8@e) wU3e14@m* wU3e13@s* wU3e12@ae*))))) (if (wU29af@wU2883@annotation? wU3de8@e) (wU3df0@f (wU29b1@wU2887@annotation-expression wU3de8@e) wU3de9@m* wU3dea@s* wU3deb@ae*) (values '() wU3dda@y-pat (wU3d6b@match wU3de8@e wU3ddb@z-pat wU3de9@m* wU3dea@s* wU3deb@ae* wU3ddf@r)))))))) (set! wU3d63@match-each-any (lambda (wU3dbc@e wU3dbd@m* wU3dbe@s* wU3dbf@ae*) (if (pair? wU3dbc@e) (let ((wU3dc4@l (wU3d63@match-each-any (cdr wU3dbc@e) wU3dbd@m* wU3dbe@s* wU3dbf@ae*))) (and wU3dc4@l (cons (wU3d5d@stx^ (car wU3dbc@e) wU3dbd@m* wU3dbe@s* wU3dbf@ae*) wU3dc4@l))) (if (null? wU3dbc@e) '() (if (wU2e3c@stx? wU3dbc@e) (and (not (wU2df6@top-marked? wU3dbd@m*)) (call-with-values (lambda () (join-wraps wU3dbd@m* wU3dbe@s* wU3dbf@ae* wU3dbc@e)) (lambda (wU3dcc@wU3dc7 wU3dcd@wU3dc9 wU3dce@wU3dcb) (let ((wU3dd2@ae* wU3dce@wU3dcb) (wU3dd3@s* wU3dcd@wU3dc9) (wU3dd4@m* wU3dcc@wU3dc7)) (wU3d63@match-each-any (wU2e3e@stx-expr wU3dbc@e) wU3dd4@m* wU3dd3@s* wU3dd2@ae*))))) (if (wU29af@wU2883@annotation? wU3dbc@e) (wU3d63@match-each-any (wU29b1@wU2887@annotation-expression wU3dbc@e) wU3dbd@m* wU3dbe@s* wU3dbf@ae*) '#f)))))) (set! wU3d65@match-empty (lambda (wU3db6@p wU3db7@r) (if (null? wU3db6@p) wU3db7@r (if (eq? wU3db6@p '_) wU3db7@r (if (eq? wU3db6@p 'any) (cons '() wU3db7@r) (if (pair? wU3db6@p) (wU3d65@match-empty (car wU3db6@p) (wU3d65@match-empty (cdr wU3db6@p) wU3db7@r)) (if (eq? wU3db6@p 'each-any) (cons '() wU3db7@r) (let ((wU3dba@t (vector-ref wU3db6@p '0))) (if (memv wU3dba@t '(each)) (wU3d65@match-empty (vector-ref wU3db6@p '1) wU3db7@r) (if (memv wU3dba@t '(each+)) (wU3d65@match-empty (vector-ref wU3db6@p '1) (wU3d65@match-empty (reverse (vector-ref wU3db6@p '2)) (wU3d65@match-empty (vector-ref wU3db6@p '3) wU3db7@r))) (if (memv wU3dba@t '(free-id atom)) wU3db7@r (if (memv wU3dba@t '(scheme-id atom)) wU3db7@r (if (memv wU3dba@t '(vector)) (wU3d65@match-empty (vector-ref wU3db6@p '1) wU3db7@r) (assertion-violation 'syntax-dispatch '"invalid pattern" wU3db6@p)))))))))))))) (set! wU3d67@combine (lambda (wU3db2@r* wU3db3@r) (if (null? (car wU3db2@r*)) wU3db3@r (cons (map car wU3db2@r*) (wU3d67@combine (map cdr wU3db2@r*) wU3db3@r))))) (set! wU3d69@match* (lambda (wU3d8e@e wU3d8f@p wU3d90@m* wU3d91@s* wU3d92@ae* wU3d93@r) (if (null? wU3d8f@p) (and (null? wU3d8e@e) wU3d93@r) (if (pair? wU3d8f@p) (and (pair? wU3d8e@e) (wU3d6b@match (car wU3d8e@e) (car wU3d8f@p) wU3d90@m* wU3d91@s* wU3d92@ae* (wU3d6b@match (cdr wU3d8e@e) (cdr wU3d8f@p) wU3d90@m* wU3d91@s* wU3d92@ae* wU3d93@r))) (if (eq? wU3d8f@p 'each-any) (let ((wU3d9a@l (wU3d63@match-each-any wU3d8e@e wU3d90@m* wU3d91@s* wU3d92@ae*))) (and wU3d9a@l (cons wU3d9a@l wU3d93@r))) (let ((wU3d9c@t (vector-ref wU3d8f@p '0))) (if (memv wU3d9c@t '(each)) (if (null? wU3d8e@e) (wU3d65@match-empty (vector-ref wU3d8f@p '1) wU3d93@r) (let ((wU3d9e@r* (wU3d5f@match-each wU3d8e@e (vector-ref wU3d8f@p '1) wU3d90@m* wU3d91@s* wU3d92@ae*))) (and wU3d9e@r* (wU3d67@combine wU3d9e@r* wU3d93@r)))) (if (memv wU3d9c@t '(free-id)) (and (symbol? wU3d8e@e) (wU2df6@top-marked? wU3d90@m*) (wU2e76@free-id=? (wU3d5d@stx^ wU3d8e@e wU3d90@m* wU3d91@s* wU3d92@ae*) (vector-ref wU3d8f@p '1)) wU3d93@r) (if (memv wU3d9c@t '(scheme-id)) (and (symbol? wU3d8e@e) (wU2df6@top-marked? wU3d90@m*) (wU2e76@free-id=? (wU3d5d@stx^ wU3d8e@e wU3d90@m* wU3d91@s* wU3d92@ae*) (wU2fff@scheme-stx (vector-ref wU3d8f@p '1))) wU3d93@r) (if (memv wU3d9c@t '(each+)) (call-with-values (lambda () (wU3d61@match-each+ wU3d8e@e (vector-ref wU3d8f@p '1) (vector-ref wU3d8f@p '2) (vector-ref wU3d8f@p '3) wU3d90@m* wU3d91@s* wU3d92@ae* wU3d93@r)) (lambda (wU3da6@wU3da1 wU3da7@wU3da3 wU3da8@wU3da5) (let ((wU3dac@r wU3da8@wU3da5) (wU3dad@y-pat wU3da7@wU3da3) (wU3dae@xr* wU3da6@wU3da1)) (and wU3dac@r (null? wU3dad@y-pat) (if (null? wU3dae@xr*) (wU3d65@match-empty (vector-ref wU3d8f@p '1) wU3dac@r) (wU3d67@combine wU3dae@xr* wU3dac@r)))))) (if (memv wU3d9c@t '(atom)) (and (fast-equal? (vector-ref wU3d8f@p '1) (wU2e82@strip wU3d8e@e wU3d90@m*)) wU3d93@r) (if (memv wU3d9c@t '(vector)) (and (vector? wU3d8e@e) (wU3d6b@match (vector->list wU3d8e@e) (vector-ref wU3d8f@p '1) wU3d90@m* wU3d91@s* wU3d92@ae* wU3d93@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" wU3d8f@p))))))))))))) (set! wU3d6b@match (lambda (wU3d70@e wU3d71@p wU3d72@m* wU3d73@s* wU3d74@ae* wU3d75@r) (if (not wU3d75@r) '#f (if (eq? wU3d71@p '_) wU3d75@r (if (eq? wU3d71@p 'any) (cons (wU3d5d@stx^ wU3d70@e wU3d72@m* wU3d73@s* wU3d74@ae*) wU3d75@r) (if (wU2e3c@stx? wU3d70@e) (and (not (wU2df6@top-marked? wU3d72@m*)) (call-with-values (lambda () (join-wraps wU3d72@m* wU3d73@s* wU3d74@ae* wU3d70@e)) (lambda (wU3d82@wU3d7d wU3d83@wU3d7f wU3d84@wU3d81) (let ((wU3d88@ae* wU3d84@wU3d81) (wU3d89@s* wU3d83@wU3d7f) (wU3d8a@m* wU3d82@wU3d7d)) (wU3d6b@match (wU2e3e@stx-expr wU3d70@e) wU3d71@p wU3d8a@m* wU3d89@s* wU3d88@ae* wU3d75@r))))) (if (wU29af@wU2883@annotation? wU3d70@e) (wU3d6b@match (wU29b1@wU2887@annotation-expression wU3d70@e) wU3d71@p wU3d72@m* wU3d73@s* wU3d74@ae* wU3d75@r) (wU3d69@match* wU3d70@e wU3d71@p wU3d72@m* wU3d73@s* wU3d74@ae* wU3d75@r)))))))) (lambda (wU3d6c@e wU3d6d@p) (wU3d6b@match wU3d6c@e wU3d6d@p '() '() '() '()))))) (set! wU4b4d@wU3077@syntax-dispatch wU3077@syntax-dispatch) (set! wU3079@ellipsis? (lambda (wU3e40@x) (and (wU2e70@id? wU3e40@x) (wU2e76@free-id=? wU3e40@x (wU2fff@scheme-stx '...))))) (set! wU4b4e@wU3079@ellipsis? wU3079@ellipsis?) (set! wU307b@underscore? (lambda (wU3e42@x) (and (wU2e70@id? wU3e42@x) (wU2e76@free-id=? wU3e42@x (wU2fff@scheme-stx '_))))) (set! wU4b4f@wU307b@underscore? wU307b@underscore?) (set! wU307d@verify-literals (lambda (wU3e44@lits wU3e45@expr) (for-each (lambda (wU3e48@x) (if (or (not (wU2e70@id? wU3e48@x)) (wU3079@ellipsis? wU3e48@x) (wU307b@underscore? wU3e48@x)) (wU3157@syntax-violation '#f '"invalid literal" wU3e45@expr wU3e48@x) (void))) wU3e44@lits))) (set! wU4b50@wU307d@verify-literals wU307d@verify-literals) (set! wU307f@syntax-case-transformer (let ((wU3e4b@build-dispatch-call '#f) (wU3e4d@invalid-ids-error '#f) (wU3e4f@gen-clause '#f) (wU3e51@gen-syntax-case '#f)) (begin (set! wU3e4b@build-dispatch-call (lambda (wU3ebc@pvars wU3ebd@expr wU3ebe@y wU3ebf@r wU3ec0@mr) (let ((wU3ec6@ids (map car wU3ebc@pvars)) (wU3ec7@levels (map cdr wU3ebc@pvars))) (let ((wU3eca@labels (map wU2dfc@gen-label wU3ec6@ids)) (wU3ecb@new-vars (map wU2df8@gen-lexical wU3ec6@ids))) (let ((wU3ece@body (wU3099@chi-expr (wU2e5c@add-subst (wU2e30@make-full-rib wU3ec6@ids wU3eca@labels) wU3ebd@expr) (append (map (lambda (wU3ed0@label wU3ed1@var wU3ed2@level) (cons wU3ed0@label (wU2e8a@make-binding 'syntax (cons wU3ed1@var wU3ed2@level)))) wU3eca@labels wU3ecb@new-vars (map cdr wU3ebc@pvars)) wU3ebf@r) wU3ec0@mr))) (list '(primitive apply) (wU2dd3@wU2cff@build-lambda '#f wU3ecb@new-vars wU3ece@body) wU3ebe@y)))))) (set! wU3e4d@invalid-ids-error (lambda (wU3eb0@id* wU3eb1@e wU3eb2@class) (let wU3eba@find ((wU3eb6@id* wU3eb0@id*) (wU3eb7@ok* '())) (if (null? wU3eb6@id*) (wU3157@syntax-violation '#f '"invalid syntax" wU3eb1@e) (if (wU2e70@id? (car wU3eb6@id*)) (if (wU2e7c@bound-id-member? (car wU3eb6@id*) wU3eb7@ok*) (wU3153@syntax-error (car wU3eb6@id*) '"duplicate " wU3eb2@class) (wU3eba@find (cdr wU3eb6@id*) (cons (car wU3eb6@id*) wU3eb7@ok*))) (wU3153@syntax-error (car wU3eb6@id*) '"invalid " wU3eb2@class)))))) (set! wU3e4f@gen-clause (lambda (wU3e88@x wU3e89@keys wU3e8a@clauses wU3e8b@r wU3e8c@mr wU3e8d@pat wU3e8e@fender wU3e8f@expr) (call-with-values (lambda () (wU3075@convert-pattern wU3e8d@pat wU3e89@keys)) (lambda (wU3e9c@wU3e99 wU3e9d@wU3e9b) (let ((wU3ea0@pvars wU3e9d@wU3e9b) (wU3ea1@p wU3e9c@wU3e99)) (if (not (wU2e7a@distinct-bound-ids? (map car wU3ea0@pvars))) (wU3e4d@invalid-ids-error (map car wU3ea0@pvars) wU3e8d@pat '"pattern variable") (if (not (for-all (lambda (wU3ea4@x) (not (wU3079@ellipsis? (car wU3ea4@x)))) wU3ea0@pvars)) (wU3157@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" wU3e8d@pat) (let ((wU3ea6@y (wU2df8@gen-lexical 'tmp))) (let ((wU3ea8@test (if (eq? wU3e8e@fender '#t) wU3ea6@y (let ((wU3eaa@call (wU3e4b@build-dispatch-call wU3ea0@pvars wU3e8e@fender wU3ea6@y wU3e8b@r wU3e8c@mr))) (list 'if wU3ea6@y wU3eaa@call (list 'quote '#f)))))) (let ((wU3eac@conseq (wU3e4b@build-dispatch-call wU3ea0@pvars wU3e8f@expr wU3ea6@y wU3e8b@r wU3e8c@mr))) (let ((wU3eae@altern (wU3e51@gen-syntax-case wU3e88@x wU3e89@keys wU3e8a@clauses wU3e8b@r wU3e8c@mr))) (list (wU2dd3@wU2cff@build-lambda '#f (list wU3ea6@y) (list 'if wU3ea8@test wU3eac@conseq wU3eae@altern)) (list '(primitive syntax-dispatch) wU3e88@x (list 'quote wU3ea1@p)))))))))))))) (set! wU3e51@gen-syntax-case (lambda (wU3e66@x wU3e67@keys wU3e68@clauses wU3e69@r wU3e6a@mr) (if (null? wU3e68@clauses) (list '(primitive syntax-error) wU3e66@x) (let ((wU3e70@t (car wU3e68@clauses))) (let ((wU3e72@ls/false (wU3077@syntax-dispatch wU3e70@t '(any any)))) (if wU3e72@ls/false (apply (lambda (wU3e74@pat wU3e75@expr) (if (and (wU2e70@id? wU3e74@pat) (not (wU2e7c@bound-id-member? wU3e74@pat wU3e67@keys)) (not (wU3079@ellipsis? wU3e74@pat))) (if (wU2e76@free-id=? wU3e74@pat (wU2fff@scheme-stx '_)) (wU3099@chi-expr wU3e75@expr wU3e69@r wU3e6a@mr) (let ((wU3e78@lab (wU2dfc@gen-label wU3e74@pat)) (wU3e79@lex (wU2df8@gen-lexical wU3e74@pat))) (let ((wU3e7c@body (wU3099@chi-expr (wU2e5c@add-subst (wU2e30@make-full-rib (list wU3e74@pat) (list wU3e78@lab)) wU3e75@expr) (cons (cons wU3e78@lab (wU2e8a@make-binding 'syntax (cons wU3e79@lex '0))) wU3e69@r) wU3e6a@mr))) (list (wU2dd3@wU2cff@build-lambda '#f (list wU3e79@lex) wU3e7c@body) wU3e66@x)))) (wU3e4f@gen-clause wU3e66@x wU3e67@keys (cdr wU3e68@clauses) wU3e69@r wU3e6a@mr wU3e74@pat '#t wU3e75@expr))) wU3e72@ls/false) (let ((wU3e7e@t wU3e70@t)) (let ((wU3e80@ls/false (wU3077@syntax-dispatch wU3e7e@t '(any any any)))) (if wU3e80@ls/false (apply (lambda (wU3e82@pat wU3e83@fender wU3e84@expr) (wU3e4f@gen-clause wU3e66@x wU3e67@keys (cdr wU3e68@clauses) wU3e69@r wU3e6a@mr wU3e82@pat wU3e83@fender wU3e84@expr)) wU3e80@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3e7e@t)))))))))) (lambda (wU3e52@e wU3e53@r wU3e54@mr) (let ((wU3e58@t wU3e52@e)) (let ((wU3e5a@ls/false (wU3077@syntax-dispatch wU3e58@t '(_ any each-any . each-any)))) (if wU3e5a@ls/false (apply (lambda (wU3e5c@expr wU3e5d@keys wU3e5e@clauses) (begin (wU307d@verify-literals wU3e5d@keys wU3e52@e) (let ((wU3e62@x (wU2df8@gen-lexical 'tmp))) (let ((wU3e64@body (wU3e51@gen-syntax-case wU3e62@x wU3e5d@keys wU3e5e@clauses wU3e53@r wU3e54@mr))) (list (wU2dd3@wU2cff@build-lambda '#f (list wU3e62@x) wU3e64@body) (wU3099@chi-expr wU3e5c@expr wU3e53@r wU3e54@mr)))))) wU3e5a@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3e58@t)))))))) (set! wU4b51@wU307f@syntax-case-transformer wU307f@syntax-case-transformer) (set! wU3081@ellipsis-map (lambda (wU3ed6@proc wU3ed7@ls . wU3eda@ls*) (let ((wU3edd@who '#f)) (begin (set! wU3edd@who '...) (begin (if (not (list? wU3ed7@ls)) (assertion-violation wU3edd@who '"not a list" wU3ed7@ls) (void)) (if (not (null? wU3eda@ls*)) (let ((wU3ede@n (length wU3ed7@ls))) (for-each (lambda (wU3ee0@x) (begin (if (not (list? wU3ee0@x)) (assertion-violation wU3edd@who '"not a list" wU3ee0@x) (void)) (if (not (= (length wU3ee0@x) wU3ede@n)) (assertion-violation wU3edd@who '"length mismatch" wU3ed7@ls wU3ee0@x) (void)))) wU3eda@ls*)) (void)) (apply map wU3ed6@proc wU3ed7@ls wU3eda@ls*)))))) (set! wU4b52@wU3081@ellipsis-map wU3081@ellipsis-map) (set! wU3083@syntax-transformer (let ((wU3ee3@gen-syntax '#f) (wU3ee5@gen-ref '#f) (wU3ee7@gen-append '#f) (wU3ee9@gen-mappend '#f) (wU3eeb@gen-map '#f) (wU3eed@gen-cons '#f) (wU3eef@gen-vector '#f) (wU3ef1@regen '#f)) (begin (set! wU3ee3@gen-syntax (lambda (wU3f5a@src wU3f5b@e wU3f5c@r wU3f5d@maps wU3f5e@ellipsis? wU3f5f@vec?) (let ((wU3f66@t wU3f5b@e)) (let ((wU3f68@ls/false (wU3077@syntax-dispatch wU3f66@t 'any))) (if (and wU3f68@ls/false (apply (lambda (wU3f6a@dots) (wU3f5e@ellipsis? wU3f6a@dots)) wU3f68@ls/false)) (apply (lambda (wU3f6c@dots) (wU3157@syntax-violation '#f '"misplaced ellipsis in syntax form" wU3f5a@src)) wU3f68@ls/false) (let ((wU3f6e@t wU3f66@t)) (let ((wU3f70@ls/false (wU3077@syntax-dispatch wU3f6e@t 'any))) (if (and wU3f70@ls/false (apply (lambda (wU3f72@id) (wU2e70@id? wU3f72@id)) wU3f70@ls/false)) (apply (lambda (wU3f74@id) (let ((wU3f76@label (wU2e86@id->label wU3f5b@e))) (let ((wU3f78@b (wU2e88@label->binding wU3f76@label wU3f5c@r))) (if (eq? (wU2e8c@binding-type wU3f78@b) 'syntax) (call-with-values (lambda () (let ((wU3f7e@var.lev (wU2e8e@binding-value wU3f78@b))) (wU3ee5@gen-ref wU3f5a@src (car wU3f7e@var.lev) (cdr wU3f7e@var.lev) wU3f5d@maps))) (lambda (wU3f80@wU3f7b wU3f81@wU3f7d) (let ((wU3f84@maps wU3f81@wU3f7d) (wU3f85@var wU3f80@wU3f7b)) (values (list 'ref wU3f85@var) wU3f84@maps)))) (values (list 'quote wU3f5b@e) wU3f5d@maps))))) wU3f70@ls/false) (let ((wU3f88@t wU3f6e@t)) (let ((wU3f8a@ls/false (wU3077@syntax-dispatch wU3f88@t '(any any)))) (if (and wU3f8a@ls/false (apply (lambda (wU3f8c@dots wU3f8d@e) (wU3f5e@ellipsis? wU3f8c@dots)) wU3f8a@ls/false)) (apply (lambda (wU3f90@dots wU3f91@e) (if wU3f5f@vec? (wU3157@syntax-violation '#f '"misplaced ellipsis in syntax form" wU3f5a@src) (wU3ee3@gen-syntax wU3f5a@src wU3f91@e wU3f5c@r wU3f5d@maps (lambda (wU3f94@x) '#f) '#f))) wU3f8a@ls/false) (let ((wU3f96@t wU3f88@t)) (let ((wU3f98@ls/false (wU3077@syntax-dispatch wU3f96@t '(any any . any)))) (if (and wU3f98@ls/false (apply (lambda (wU3f9a@x wU3f9b@dots wU3f9c@y) (wU3f5e@ellipsis? wU3f9b@dots)) wU3f98@ls/false)) (apply (lambda (wU3fa0@x wU3fa1@dots wU3fa2@y) (let wU3fb8@f ((wU3fa6@y wU3fa2@y) (wU3fa7@k (lambda (wU3faa@maps) (call-with-values (lambda () (wU3ee3@gen-syntax wU3f5a@src wU3fa0@x wU3f5c@r (cons '() wU3faa@maps) wU3f5e@ellipsis? '#f)) (lambda (wU3fb0@wU3fad wU3fb1@wU3faf) (let ((wU3fb4@maps wU3fb1@wU3faf) (wU3fb5@x wU3fb0@wU3fad)) (if (null? (car wU3fb4@maps)) (wU3157@syntax-violation '#f '"extra ellipsis in syntax form" wU3f5a@src) (values (wU3eeb@gen-map wU3fb5@x (car wU3fb4@maps)) (cdr wU3fb4@maps))))))))) (let ((wU3fba@t wU3fa6@y)) (let ((wU3fbc@ls/false (wU3077@syntax-dispatch wU3fba@t '()))) (if wU3fbc@ls/false (apply (lambda () (wU3fa7@k wU3f5d@maps)) wU3fbc@ls/false) (let ((wU3fbe@t wU3fba@t)) (let ((wU3fc0@ls/false (wU3077@syntax-dispatch wU3fbe@t '(any . any)))) (if (and wU3fc0@ls/false (apply (lambda (wU3fc2@dots wU3fc3@y) (wU3f5e@ellipsis? wU3fc2@dots)) wU3fc0@ls/false)) (apply (lambda (wU3fc6@dots wU3fc7@y) (wU3fb8@f wU3fc7@y (lambda (wU3fca@maps) (call-with-values (lambda () (wU3fa7@k (cons '() wU3fca@maps))) (lambda (wU3fd0@wU3fcd wU3fd1@wU3fcf) (let ((wU3fd4@maps wU3fd1@wU3fcf) (wU3fd5@x wU3fd0@wU3fcd)) (if (null? (car wU3fd4@maps)) (wU3157@syntax-violation '#f '"extra ellipsis in syntax form" wU3f5a@src) (values (wU3ee9@gen-mappend wU3fd5@x (car wU3fd4@maps)) (cdr wU3fd4@maps))))))))) wU3fc0@ls/false) (let ((wU3fd8@t wU3fbe@t)) (let ((wU3fda@ls/false (wU3077@syntax-dispatch wU3fd8@t '_))) (if wU3fda@ls/false (apply (lambda () (call-with-values (lambda () (wU3ee3@gen-syntax wU3f5a@src wU3fa6@y wU3f5c@r wU3f5d@maps wU3f5e@ellipsis? wU3f5f@vec?)) (lambda (wU3fe0@wU3fdd wU3fe1@wU3fdf) (let ((wU3fe4@maps wU3fe1@wU3fdf) (wU3fe5@y wU3fe0@wU3fdd)) (call-with-values (lambda () (wU3fa7@k wU3fe4@maps)) (lambda (wU3fec@wU3fe9 wU3fed@wU3feb) (let ((wU3ff0@maps wU3fed@wU3feb) (wU3ff1@x wU3fec@wU3fe9)) (values (wU3ee7@gen-append wU3ff1@x wU3fe5@y) wU3ff0@maps)))))))) wU3fda@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3fd8@t)))))))))))) wU3f98@ls/false) (let ((wU3ff4@t wU3f96@t)) (let ((wU3ff6@ls/false (wU3077@syntax-dispatch wU3ff4@t '(any . any)))) (if wU3ff6@ls/false (apply (lambda (wU3ff8@x wU3ff9@y) (call-with-values (lambda () (wU3ee3@gen-syntax wU3f5a@src wU3ff8@x wU3f5c@r wU3f5d@maps wU3f5e@ellipsis? '#f)) (lambda (wU4000@wU3ffd wU4001@wU3fff) (let ((wU4004@maps wU4001@wU3fff) (wU4005@xnew wU4000@wU3ffd)) (call-with-values (lambda () (wU3ee3@gen-syntax wU3f5a@src wU3ff9@y wU3f5c@r wU4004@maps wU3f5e@ellipsis? wU3f5f@vec?)) (lambda (wU400c@wU4009 wU400d@wU400b) (let ((wU4010@maps wU400d@wU400b) (wU4011@ynew wU400c@wU4009)) (values (wU3eed@gen-cons wU3f5b@e wU3ff8@x wU3ff9@y wU4005@xnew wU4011@ynew) wU4010@maps)))))))) wU3ff6@ls/false) (let ((wU4014@t wU3ff4@t)) (let ((wU4016@ls/false (wU3077@syntax-dispatch wU4014@t '#(vector each-any)))) (if wU4016@ls/false (apply (lambda (wU4018@ls) (call-with-values (lambda () (wU3ee3@gen-syntax wU3f5a@src wU4018@ls wU3f5c@r wU3f5d@maps wU3f5e@ellipsis? '#t)) (lambda (wU401e@wU401b wU401f@wU401d) (let ((wU4022@maps wU401f@wU401d) (wU4023@lsnew wU401e@wU401b)) (values (wU3eef@gen-vector wU3f5b@e wU4018@ls wU4023@lsnew) wU4022@maps))))) wU4016@ls/false) (let ((wU4026@t wU4014@t)) (let ((wU4028@ls/false (wU3077@syntax-dispatch wU4026@t '_))) (if wU4028@ls/false (apply (lambda () (values (list 'quote wU3f5b@e) wU3f5d@maps)) wU4028@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU4026@t)))))))))))))))))))))))) (set! wU3ee5@gen-ref (lambda (wU3f40@src wU3f41@var wU3f42@level wU3f43@maps) (if (= wU3f42@level '0) (values wU3f41@var wU3f43@maps) (if (null? wU3f43@maps) (wU3157@syntax-violation '#f '"missing ellipsis in syntax form" wU3f40@src) (call-with-values (lambda () (wU3ee5@gen-ref wU3f40@src wU3f41@var (- wU3f42@level '1) (cdr wU3f43@maps))) (lambda (wU3f4c@wU3f49 wU3f4d@wU3f4b) (let ((wU3f50@outer-maps wU3f4d@wU3f4b) (wU3f51@outer-var wU3f4c@wU3f49)) (let ((wU3f54@t (assq wU3f51@outer-var (car wU3f43@maps)))) (if wU3f54@t ((lambda (wU3f56@b) (values (cdr wU3f56@b) wU3f43@maps)) wU3f54@t) (let ((wU3f58@inner-var (wU2df8@gen-lexical 'tmp))) (values wU3f58@inner-var (cons (cons (cons wU3f51@outer-var wU3f58@inner-var) (car wU3f43@maps)) wU3f50@outer-maps)))))))))))) (set! wU3ee7@gen-append (lambda (wU3f3c@x wU3f3d@y) (if (fast-equal? wU3f3d@y ''()) wU3f3c@x (list 'append wU3f3c@x wU3f3d@y)))) (set! wU3ee9@gen-mappend (lambda (wU3f38@e wU3f39@map-env) (list 'apply '(primitive append) (wU3eeb@gen-map wU3f38@e wU3f39@map-env)))) (set! wU3eeb@gen-map (lambda (wU3f26@e wU3f27@map-env) (let ((wU3f2a@formals (map cdr wU3f27@map-env)) (wU3f2b@actuals (map (lambda (wU3f2e@x) (list 'ref (car wU3f2e@x))) wU3f27@map-env))) (if (eq? (car wU3f26@e) 'ref) (car wU3f2b@actuals) (if (for-all (lambda (wU3f30@x) (and (eq? (car wU3f30@x) 'ref) (memq (cadr wU3f30@x) wU3f2a@formals))) (cdr wU3f26@e)) (let ((wU3f32@args (map (let ((wU3f34@r (map cons wU3f2a@formals wU3f2b@actuals))) (lambda (wU3f36@x) (cdr (assq (cadr wU3f36@x) wU3f34@r)))) (cdr wU3f26@e)))) (cons 'map (cons (list 'primitive (car wU3f26@e)) wU3f32@args))) (cons* 'map (list 'lambda wU3f2a@formals wU3f26@e) wU3f2b@actuals)))))) (set! wU3eed@gen-cons (lambda (wU3f16@e wU3f17@x wU3f18@y wU3f19@xnew wU3f1a@ynew) (let ((wU3f20@t (car wU3f1a@ynew))) (if (memv wU3f20@t '(quote)) (if (eq? (car wU3f19@xnew) 'quote) (let ((wU3f22@xnew (cadr wU3f19@xnew)) (wU3f23@ynew (cadr wU3f1a@ynew))) (if (and (eq? wU3f22@xnew wU3f17@x) (eq? wU3f23@ynew wU3f18@y)) (list 'quote wU3f16@e) (list 'quote (cons wU3f22@xnew wU3f23@ynew)))) (if (null? (cadr wU3f1a@ynew)) (list 'list wU3f19@xnew) (list 'cons wU3f19@xnew wU3f1a@ynew))) (if (memv wU3f20@t '(list)) (cons 'list (cons wU3f19@xnew (cdr wU3f1a@ynew))) (list 'cons wU3f19@xnew wU3f1a@ynew)))))) (set! wU3eef@gen-vector (lambda (wU3f10@e wU3f11@ls wU3f12@lsnew) (if (eq? (car wU3f12@lsnew) 'quote) (if (eq? (cadr wU3f12@lsnew) wU3f11@ls) (list 'quote wU3f10@e) (list 'quote (list->vector (cadr wU3f12@lsnew)))) (if (eq? (car wU3f12@lsnew) 'list) (cons 'vector (cdr wU3f12@lsnew)) (list 'list->vector wU3f12@lsnew))))) (set! wU3ef1@regen (lambda (wU3f0a@x) (let ((wU3f0c@t (car wU3f0a@x))) (if (memv wU3f0c@t '(ref)) (cadr wU3f0a@x) (if (memv wU3f0c@t '(primitive)) (list 'primitive (cadr wU3f0a@x)) (if (memv wU3f0c@t '(quote)) (list 'quote (cadr wU3f0a@x)) (if (memv wU3f0c@t '(lambda)) (wU2dd3@wU2cff@build-lambda '#f (cadr wU3f0a@x) (wU3ef1@regen (caddr wU3f0a@x))) (if (memv wU3f0c@t '(map)) (let ((wU3f0e@ls (map wU3ef1@regen (cdr wU3f0a@x)))) (cons '(primitive ellipsis-map) wU3f0e@ls)) (cons (list 'primitive (car wU3f0a@x)) (map wU3ef1@regen (cdr wU3f0a@x))))))))))) (lambda (wU3ef2@e wU3ef3@r wU3ef4@mr) (let ((wU3ef8@t wU3ef2@e)) (let ((wU3efa@ls/false (wU3077@syntax-dispatch wU3ef8@t '(_ any)))) (if wU3efa@ls/false (apply (lambda (wU3efc@x) (call-with-values (lambda () (wU3ee3@gen-syntax wU3ef2@e wU3efc@x wU3ef3@r '() wU3079@ellipsis? '#f)) (lambda (wU3f02@wU3eff wU3f03@wU3f01) (let ((wU3f06@maps wU3f03@wU3f01) (wU3f07@e wU3f02@wU3eff)) (wU3ef1@regen wU3f07@e))))) wU3efa@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU3ef8@t)))))))) (set! wU4b53@wU3083@syntax-transformer wU3083@syntax-transformer) (set! wU3085@core-macro-transformer (lambda (wU402a@name) (let ((wU402c@t wU402a@name)) (if (memv wU402c@t '(quote)) wU3027@quote-transformer (if (memv wU402c@t '(lambda)) wU302b@lambda-transformer (if (memv wU402c@t '(case-lambda)) wU3029@case-lambda-transformer (if (memv wU402c@t '(letrec)) wU300f@letrec-transformer (if (memv wU402c@t '(letrec*)) wU3011@letrec*-transformer (if (memv wU402c@t '(let)) wU300d@let-transformer (if (memv wU402c@t '(if)) wU301f@if-transformer (if (memv wU402c@t '(and)) wU3021@and-transformer (if (memv wU402c@t '(or)) wU3023@or-transformer (if (memv wU402c@t '(foreign-call)) wU3073@foreign-call-transformer (if (memv wU402c@t '(syntax-case)) wU307f@syntax-case-transformer (if (memv wU402c@t '(syntax)) wU3083@syntax-transformer (if (memv wU402c@t '(type-descriptor)) wU3015@type-descriptor-transformer (if (memv wU402c@t '(record-type-descriptor)) wU3017@record-type-descriptor-transformer (if (memv wU402c@t '(record-constructor-descriptor)) wU3019@record-constructor-descriptor-transformer (if (memv wU402c@t '(fluid-let-syntax)) wU3013@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" wU402a@name)))))))))))))))))))) (set! wU4b54@wU3085@core-macro-transformer wU3085@core-macro-transformer) (set! wU3087@symbol-macro (lambda (wU402e@x wU402f@set) (let ((wU4032@t wU402e@x)) (let ((wU4034@ls/false (wU3077@syntax-dispatch wU4032@t '(_ any)))) (if (and wU4034@ls/false (apply (lambda (wU4036@name) (and (wU2e70@id? wU4036@name) (memq (wU2e72@id->sym wU4036@name) wU402f@set))) wU4034@ls/false)) (apply (lambda (wU4038@name) (wU302d@bless (list 'quote wU4038@name))) wU4034@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU4032@t)))))) (set! wU4b55@wU3087@symbol-macro wU3087@symbol-macro) (set! wU3089@macro-transformer (lambda (wU403a@x) (if (procedure? wU403a@x) wU403a@x (if (symbol? wU403a@x) (let ((wU403c@t wU403a@x)) (if (memv wU403c@t '(define-record-type)) wU306b@define-record-type-macro (if (memv wU403c@t '(define-struct)) wU3069@define-struct-macro (if (memv wU403c@t '(include)) wU305f@include-macro (if (memv wU403c@t '(cond)) wU305b@cond-macro (if (memv wU403c@t '(let)) wU3033@let-macro (if (memv wU403c@t '(do)) wU3053@do-macro (if (memv wU403c@t '(or)) wU3057@or-macro (if (memv wU403c@t '(and)) wU3059@and-macro (if (memv wU403c@t '(let*)) wU3055@let*-macro (if (memv wU403c@t '(let-values)) wU3035@let-values-macro (if (memv wU403c@t '(let*-values)) wU3037@let*-values-macro (if (memv wU403c@t '(syntax-rules)) wU3063@syntax-rules-macro (if (memv wU403c@t '(quasiquote)) wU3065@quasiquote-macro (if (memv wU403c@t '(quasisyntax)) wU3067@quasisyntax-macro (if (memv wU403c@t '(with-syntax)) wU302f@with-syntax-macro (if (memv wU403c@t '(when)) wU301b@when-macro (if (memv wU403c@t '(unless)) wU301d@unless-macro (if (memv wU403c@t '(case)) wU3025@case-macro (if (memv wU403c@t '(identifier-syntax)) wU3051@identifier-syntax-macro (if (memv wU403c@t '(time)) wU3049@time-macro (if (memv wU403c@t '(delay)) wU304b@delay-macro (if (memv wU403c@t '(assert)) wU304d@assert-macro (if (memv wU403c@t '(endianness)) wU304f@endianness-macro (if (memv wU403c@t '(guard)) wU3045@guard-macro (if (memv wU403c@t '(define-enumeration)) wU3047@define-enumeration-macro (if (memv wU403c@t '(trace-lambda)) wU3039@trace-lambda-macro (if (memv wU403c@t '(trace-define)) wU303b@trace-define-macro (if (memv wU403c@t '(trace-define-syntax)) wU303d@trace-define-syntax-macro (if (memv wU403c@t '(trace-let-syntax)) wU3041@trace-let-syntax-macro (if (memv wU403c@t '(trace-letrec-syntax)) wU3043@trace-letrec-syntax-macro (if (memv wU403c@t '(define-condition-type)) wU306d@define-condition-type-macro (if (memv wU403c@t '(parameterize)) wU3071@parameterize-macro (if (memv wU403c@t '(include-into)) wU3061@include-into-macro (if (memv wU403c@t '(eol-style)) (lambda (wU403e@x) (wU3087@symbol-macro wU403e@x '(none lf cr crlf nel crnel ls))) (if (memv wU403c@t '(error-handling-mode)) (lambda (wU4040@x) (wU3087@symbol-macro wU4040@x '(ignore raise replace))) (if (memv wU403c@t '(buffer-mode)) (lambda (wU4042@x) (wU3087@symbol-macro wU4042@x '(none line block))) (if (memv wU403c@t '(file-options)) wU2deb@file-options-macro (if (memv wU403c@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) wU306f@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" wU403a@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" wU403a@x))))) (set! wU4b56@wU3089@macro-transformer wU3089@macro-transformer) (set! wU308b@local-macro-transformer (lambda (wU4044@x) (car wU4044@x))) (set! wU4b57@wU308b@local-macro-transformer wU308b@local-macro-transformer) (set! wU308d@do-macro-call (lambda (wU4046@transformer wU4047@expr) (let ((wU404a@out (wU4046@transformer (wU2e5a@add-mark wU2e54@anti-mark wU4047@expr '#f)))) (begin (let wU404e@f ((wU404c@x wU404a@out)) (if (not (wU2e3c@stx? wU404c@x)) (if (pair? wU404c@x) (begin (wU404e@f (car wU404c@x)) (wU404e@f (cdr wU404c@x))) (if (vector? wU404c@x) (vector-for-each wU404e@f wU404c@x) (if (symbol? wU404c@x) (wU3157@syntax-violation '#f '"raw symbol encountered in output of macro" wU4047@expr wU404c@x) (void)))) (void))) (wU2e5a@add-mark (wU2e52@gen-mark) wU404a@out wU4047@expr))))) (set! wU4b58@wU308d@do-macro-call wU308d@do-macro-call) (set! wU308f@chi-macro (lambda (wU4050@p wU4051@e) (wU308d@do-macro-call (wU3089@macro-transformer wU4050@p) wU4051@e))) (set! wU4b59@wU308f@chi-macro wU308f@chi-macro) (set! wU3091@chi-local-macro (lambda (wU4054@p wU4055@e) (wU308d@do-macro-call (wU308b@local-macro-transformer wU4054@p) wU4055@e))) (set! wU4b5a@wU3091@chi-local-macro wU3091@chi-local-macro) (set! wU3093@chi-global-macro (lambda (wU4058@p wU4059@e) (let ((wU405c@lib (car wU4058@p)) (wU405d@loc (cdr wU4058@p))) (begin (wU2c87@wU2ad6@visit-library wU405c@lib) (let ((wU4060@x (symbol-value wU405d@loc))) (let ((wU4062@transformer (if (procedure? wU4060@x) wU4060@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" wU4060@x)))) (wU308d@do-macro-call wU4062@transformer wU4059@e))))))) (set! wU4b5b@wU3093@chi-global-macro wU3093@chi-global-macro) (set! wU3095@chi-expr* (lambda (wU4064@e* wU4065@r wU4066@mr) (if (null? wU4064@e*) '() (let ((wU406a@e (wU3099@chi-expr (car wU4064@e*) wU4065@r wU4066@mr))) (cons wU406a@e (wU3095@chi-expr* (cdr wU4064@e*) wU4065@r wU4066@mr)))))) (set! wU4b5c@wU3095@chi-expr* wU3095@chi-expr*) (set! wU3097@chi-application (lambda (wU406c@e wU406d@r wU406e@mr) (let ((wU4072@t wU406c@e)) (let ((wU4074@ls/false (wU3077@syntax-dispatch wU4072@t '(any . each-any)))) (if wU4074@ls/false (apply (lambda (wU4076@rator wU4077@rands) (let ((wU407a@rator (wU3099@chi-expr wU4076@rator wU406d@r wU406e@mr))) (cons wU407a@rator (wU3095@chi-expr* wU4077@rands wU406d@r wU406e@mr)))) wU4074@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU4072@t)))))) (set! wU4b5d@wU3097@chi-application wU3097@chi-application) (set! wU3099@chi-expr (lambda (wU407c@e wU407d@r wU407e@mr) (call-with-values (lambda () (wU2e92@syntax-type wU407c@e wU407d@r)) (lambda (wU4088@wU4083 wU4089@wU4085 wU408a@wU4087) (let ((wU408e@kwd wU408a@wU4087) (wU408f@value wU4089@wU4085) (wU4090@type wU4088@wU4083)) (let ((wU4094@t wU4090@type)) (if (memv wU4094@t '(core-macro)) (let ((wU4096@transformer (wU3085@core-macro-transformer wU408f@value))) (wU4096@transformer wU407c@e wU407d@r wU407e@mr)) (if (memv wU4094@t '(global)) (let ((wU4098@lib (car wU408f@value))) (let ((wU409a@loc (cdr wU408f@value))) (begin ((wU30df@inv-collector) wU4098@lib) wU409a@loc))) (if (memv wU4094@t '(core-prim)) (let ((wU409c@name wU408f@value)) (list 'primitive wU409c@name)) (if (memv wU4094@t '(call)) (wU3097@chi-application wU407c@e wU407d@r wU407e@mr) (if (memv wU4094@t '(lexical)) (let ((wU409e@lex (wU3001@lexical-var wU408f@value))) wU409e@lex) (if (memv wU4094@t '(global-macro global-macro!)) (wU3099@chi-expr (wU3093@chi-global-macro wU408f@value wU407c@e) wU407d@r wU407e@mr) (if (memv wU4094@t '(local-macro local-macro!)) (wU3099@chi-expr (wU3091@chi-local-macro wU408f@value wU407c@e) wU407d@r wU407e@mr) (if (memv wU4094@t '(macro macro!)) (wU3099@chi-expr (wU308f@chi-macro wU408f@value wU407c@e) wU407d@r wU407e@mr) (if (memv wU4094@t '(constant)) (let ((wU40a0@datum wU408f@value)) (list 'quote wU40a0@datum)) (if (memv wU4094@t '(set!)) (wU309b@chi-set! wU407c@e wU407d@r wU407e@mr) (if (memv wU4094@t '(begin)) (let ((wU40a2@t wU407c@e)) (let ((wU40a4@ls/false (wU3077@syntax-dispatch wU40a2@t '(_ any . each-any)))) (if wU40a4@ls/false (apply (lambda (wU40a6@x wU40a7@x*) (wU2dd5@wU2d2f@build-sequence '#f (wU3095@chi-expr* (cons wU40a6@x wU40a7@x*) wU407d@r wU407e@mr))) wU40a4@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU40a2@t)))) (if (memv wU4094@t '(let-syntax letrec-syntax)) (let ((wU40aa@t wU407c@e)) (let ((wU40ac@ls/false (wU3077@syntax-dispatch wU40aa@t '(_ #(each (any any)) any . each-any)))) (if (and wU40ac@ls/false (apply (lambda (wU40ae@xlhs* wU40af@xrhs* wU40b0@xbody wU40b1@xbody*) (if (not (wU2e78@valid-bound-ids? wU40ae@xlhs*)) (wU3157@syntax-violation '#f '"invalid identifiers" wU407c@e) (void))) wU40ac@ls/false)) (apply (lambda (wU40b6@xlhs* wU40b7@xrhs* wU40b8@xbody wU40b9@xbody*) (let ((wU40be@xlab* (map wU2dfc@gen-label wU40b6@xlhs*))) (let ((wU40c0@xrib (wU2e30@make-full-rib wU40b6@xlhs* wU40be@xlab*))) (let ((wU40c2@xb* (map (lambda (wU40c4@x) (wU2ea8@make-eval-transformer (wU30d1@expand-transformer (if (eq? wU4090@type 'let-syntax) wU40c4@x (wU2e5c@add-subst wU40c0@xrib wU40c4@x)) wU407e@mr))) wU40b7@xrhs*))) (wU2dd5@wU2d2f@build-sequence '#f (wU3095@chi-expr* (map (lambda (wU40c6@x) (wU2e5c@add-subst wU40c0@xrib wU40c6@x)) (cons wU40b8@xbody wU40b9@xbody*)) (append (map cons wU40be@xlab* wU40c2@xb*) wU407d@r) (append (map cons wU40be@xlab* wU40c2@xb*) wU407e@mr))))))) wU40ac@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU40aa@t)))) (if (memv wU4094@t '(displaced-lexical)) (wU3157@syntax-violation '#f '"identifier out of context" wU407c@e) (if (memv wU4094@t '(syntax)) (wU3157@syntax-violation '#f '"reference to pattern variable outside a syntax form" wU407c@e) (if (memv wU4094@t '(define define-syntax module import library)) (wU3157@syntax-violation '#f (string-append (let ((wU40c8@t wU4090@type)) (if (memv wU40c8@t '(define)) '"a definition" (if (memv wU40c8@t '(define-syntax)) '"a define-syntax" (if (memv wU40c8@t '(module)) '"a module definition" (if (memv wU40c8@t '(library)) '"a library definition" (if (memv wU40c8@t '(import)) '"an import declaration" (if (memv wU40c8@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") wU407c@e) (if (memv wU4094@t '(mutable)) (wU3157@syntax-violation '#f '"attempt to reference an unexportable variable" wU407c@e) (wU3157@syntax-violation '#f '"invalid expression" wU407c@e))))))))))))))))))))))) (set! wU4b5e@wU3099@chi-expr wU3099@chi-expr) (set! wU309b@chi-set! (lambda (wU40ca@e wU40cb@r wU40cc@mr) (let ((wU40d0@t wU40ca@e)) (let ((wU40d2@ls/false (wU3077@syntax-dispatch wU40d0@t '(_ any any)))) (if (and wU40d2@ls/false (apply (lambda (wU40d4@x wU40d5@v) (wU2e70@id? wU40d4@x)) wU40d2@ls/false)) (apply (lambda (wU40d8@x wU40d9@v) (call-with-values (lambda () (wU2e92@syntax-type wU40d8@x wU40cb@r)) (lambda (wU40e2@wU40dd wU40e3@wU40df wU40e4@wU40e1) (let ((wU40e8@kwd wU40e4@wU40e1) (wU40e9@value wU40e3@wU40df) (wU40ea@type wU40e2@wU40dd)) (let ((wU40ee@t wU40ea@type)) (if (memv wU40ee@t '(lexical)) (begin (wU3005@set-lexical-mutable! wU40e9@value '#t) (list 'set! (wU3001@lexical-var wU40e9@value) (wU3099@chi-expr wU40d9@v wU40cb@r wU40cc@mr))) (if (memv wU40ee@t '(core-prim)) (wU3157@syntax-violation '#f '"cannot modify imported core primitive" wU40ca@e) (if (memv wU40ee@t '(global)) (wU3157@syntax-violation '#f '"attempt to modify imported binding" wU40ca@e) (if (memv wU40ee@t '(global-macro!)) (wU3099@chi-expr (wU3093@chi-global-macro wU40e9@value wU40ca@e) wU40cb@r wU40cc@mr) (if (memv wU40ee@t '(local-macro!)) (wU3099@chi-expr (wU3091@chi-local-macro wU40e9@value wU40ca@e) wU40cb@r wU40cc@mr) (if (memv wU40ee@t '(mutable)) (wU3157@syntax-violation '#f '"attempt to assign to an unexportable variable" wU40ca@e) (wU3157@syntax-violation '#f '"invalid syntax" wU40ca@e)))))))))))) wU40d2@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU40d0@t)))))) (set! wU4b5f@wU309b@chi-set! wU309b@chi-set!) (set! wU309d@verify-formals (lambda (wU40f0@fmls wU40f1@stx) (let ((wU40f4@t wU40f0@fmls)) (let ((wU40f6@ls/false (wU3077@syntax-dispatch wU40f4@t 'each-any))) (if wU40f6@ls/false (apply (lambda (wU40f8@x*) (if (not (wU2e78@valid-bound-ids? wU40f8@x*)) (wU3031@invalid-fmls-error wU40f1@stx wU40f0@fmls) (void))) wU40f6@ls/false) (let ((wU40fa@t wU40f4@t)) (let ((wU40fc@ls/false (wU3077@syntax-dispatch wU40fa@t '#(each+ any () any)))) (if wU40fc@ls/false (apply (lambda (wU40fe@x* wU40ff@x) (if (not (wU2e78@valid-bound-ids? (cons wU40ff@x wU40fe@x*))) (wU3031@invalid-fmls-error wU40f1@stx wU40f0@fmls) (void))) wU40fc@ls/false) (let ((wU4102@t wU40fa@t)) (let ((wU4104@ls/false (wU3077@syntax-dispatch wU4102@t '_))) (if wU4104@ls/false (apply (lambda () (wU3157@syntax-violation '#f '"invalid syntax" wU40f1@stx)) wU4104@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU4102@t)))))))))))) (set! wU4b60@wU309d@verify-formals wU309d@verify-formals) (set! wU309f@chi-lambda-clause (lambda (wU4106@stx wU4107@fmls wU4108@body* wU4109@r wU410a@mr) (let ((wU4110@t wU4107@fmls)) (let ((wU4112@ls/false (wU3077@syntax-dispatch wU4110@t 'each-any))) (if wU4112@ls/false (apply (lambda (wU4114@x*) (begin (wU309d@verify-formals wU4107@fmls wU4106@stx) (let ((wU4116@lex* (map wU2df8@gen-lexical wU4114@x*)) (wU4117@lab* (map wU2dfc@gen-label wU4114@x*))) (values wU4116@lex* (wU30af@chi-internal (wU2e5c@add-subst (wU2e30@make-full-rib wU4114@x* wU4117@lab*) wU4108@body*) (wU3009@add-lexicals wU4117@lab* wU4116@lex* wU4109@r) wU410a@mr))))) wU4112@ls/false) (let ((wU411a@t wU4110@t)) (let ((wU411c@ls/false (wU3077@syntax-dispatch wU411a@t '#(each+ any () any)))) (if wU411c@ls/false (apply (lambda (wU411e@x* wU411f@x) (begin (wU309d@verify-formals wU4107@fmls wU4106@stx) (let ((wU4122@lex* (map wU2df8@gen-lexical wU411e@x*)) (wU4123@lab* (map wU2dfc@gen-label wU411e@x*)) (wU4124@lex (wU2df8@gen-lexical wU411f@x)) (wU4125@lab (wU2dfc@gen-label wU411f@x))) (values (append wU4122@lex* wU4124@lex) (wU30af@chi-internal (wU2e5c@add-subst (wU2e30@make-full-rib (cons wU411f@x wU411e@x*) (cons wU4125@lab wU4123@lab*)) wU4108@body*) (wU3009@add-lexicals (cons wU4125@lab wU4123@lab*) (cons wU4124@lex wU4122@lex*) wU4109@r) wU410a@mr))))) wU411c@ls/false) (let ((wU412a@t wU411a@t)) (let ((wU412c@ls/false (wU3077@syntax-dispatch wU412a@t '_))) (if wU412c@ls/false (apply (lambda () (wU3157@syntax-violation '#f '"invalid syntax" wU4107@fmls)) wU412c@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU412a@t)))))))))))) (set! wU4b61@wU309f@chi-lambda-clause wU309f@chi-lambda-clause) (set! wU30a1@chi-lambda-clause* (lambda (wU412e@stx wU412f@fmls* wU4130@body** wU4131@r wU4132@mr) (if (null? wU412f@fmls*) (values '() '()) (call-with-values (lambda () (wU309f@chi-lambda-clause wU412e@stx (car wU412f@fmls*) (car wU4130@body**) wU4131@r wU4132@mr)) (lambda (wU413c@wU4139 wU413d@wU413b) (let ((wU4140@b wU413d@wU413b) (wU4141@a wU413c@wU4139)) (call-with-values (lambda () (wU30a1@chi-lambda-clause* wU412e@stx (cdr wU412f@fmls*) (cdr wU4130@body**) wU4131@r wU4132@mr)) (lambda (wU4148@wU4145 wU4149@wU4147) (let ((wU414c@b* wU4149@wU4147) (wU414d@a* wU4148@wU4145)) (values (cons wU4141@a wU414d@a*) (cons wU4140@b wU414c@b*))))))))))) (set! wU4b62@wU30a1@chi-lambda-clause* wU30a1@chi-lambda-clause*) (set! wU30a3@chi-defun (lambda (wU4150@x wU4151@r wU4152@mr) (let ((wU4156@fmls (car wU4150@x)) (wU4157@body* (cdr wU4150@x))) (call-with-values (lambda () (wU309f@chi-lambda-clause wU4156@fmls wU4156@fmls wU4157@body* wU4151@r wU4152@mr)) (lambda (wU415e@wU415b wU415f@wU415d) (let ((wU4162@body wU415f@wU415d) (wU4163@fmls wU415e@wU415b)) (wU2dd3@wU2cff@build-lambda '#f wU4163@fmls wU4162@body))))))) (set! wU4b63@wU30a3@chi-defun wU30a3@chi-defun) (set! wU30a5@chi-rhs (lambda (wU4166@rhs wU4167@r wU4168@mr) (let ((wU416c@t (car wU4166@rhs))) (if (memv wU416c@t '(defun)) (wU30a3@chi-defun (cdr wU4166@rhs) wU4167@r wU4168@mr) (if (memv wU416c@t '(expr)) (let ((wU416e@expr (cdr wU4166@rhs))) (wU3099@chi-expr wU416e@expr wU4167@r wU4168@mr)) (if (memv wU416c@t '(top-expr)) (let ((wU4170@expr (cdr wU4166@rhs))) (wU2dd5@wU2d2f@build-sequence '#f (list (wU3099@chi-expr wU4170@expr wU4167@r wU4168@mr) (wU2dd6@wU2d31@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" wU4166@rhs))))))) (set! wU4b64@wU30a5@chi-rhs wU30a5@chi-rhs) (set! wU30a7@expand-interaction-rhs*/init* (lambda (wU4172@lhs* wU4173@rhs* wU4174@init* wU4175@r wU4176@mr) (let wU4180@f ((wU417c@lhs* wU4172@lhs*) (wU417d@rhs* wU4173@rhs*)) (if (null? wU417c@lhs*) (map (lambda (wU4182@x) (wU3099@chi-expr wU4182@x wU4175@r wU4176@mr)) wU4174@init*) (let ((wU4184@lhs (car wU417c@lhs*)) (wU4185@rhs (car wU417d@rhs*))) (let ((wU4188@t (car wU4185@rhs))) (if (memv wU4188@t '(defun)) (let ((wU418a@rhs (wU30a3@chi-defun (cdr wU4185@rhs) wU4175@r wU4176@mr))) (cons (list 'set! wU4184@lhs wU418a@rhs) (wU4180@f (cdr wU417c@lhs*) (cdr wU417d@rhs*)))) (if (memv wU4188@t '(expr)) (let ((wU418c@rhs (wU3099@chi-expr (cdr wU4185@rhs) wU4175@r wU4176@mr))) (cons (list 'set! wU4184@lhs wU418c@rhs) (wU4180@f (cdr wU417c@lhs*) (cdr wU417d@rhs*)))) (if (memv wU4188@t '(top-expr)) (let ((wU418e@e (wU3099@chi-expr (cdr wU4185@rhs) wU4175@r wU4176@mr))) (cons wU418e@e (wU4180@f (cdr wU417c@lhs*) (cdr wU417d@rhs*)))) (error 'expand-interaction '"invallid" wU4185@rhs)))))))))) (set! wU4b65@wU30a7@expand-interaction-rhs*/init* wU30a7@expand-interaction-rhs*/init*) (set! wU30a9@chi-rhs* (lambda (wU4190@rhs* wU4191@r wU4192@mr) (let wU4198@f ((wU4196@ls wU4190@rhs*)) (if (null? wU4196@ls) '() (let ((wU419a@a (wU30a5@chi-rhs (car wU4196@ls) wU4191@r wU4192@mr))) (cons wU419a@a (wU4198@f (cdr wU4196@ls)))))))) (set! wU4b66@wU30a9@chi-rhs* wU30a9@chi-rhs*) (set! wU30ab@find-bound=? (lambda (wU419c@x wU419d@lhs* wU419e@rhs*) (if (null? wU419d@lhs*) '#f (if (wU2e74@bound-id=? wU419c@x (car wU419d@lhs*)) (car wU419e@rhs*) (wU30ab@find-bound=? wU419c@x (cdr wU419d@lhs*) (cdr wU419e@rhs*)))))) (set! wU4b67@wU30ab@find-bound=? wU30ab@find-bound=?) (set! wU30ad@find-dups (lambda (wU41a2@ls) (let wU41a8@f ((wU41a4@ls wU41a2@ls) (wU41a5@dups '())) (if (null? wU41a4@ls) wU41a5@dups (let ((wU41aa@t (wU30ab@find-bound=? (car wU41a4@ls) (cdr wU41a4@ls) (cdr wU41a4@ls)))) (if wU41aa@t ((lambda (wU41ac@x) (wU41a8@f (cdr wU41a4@ls) (cons (list (car wU41a4@ls) wU41ac@x) wU41a5@dups))) wU41aa@t) (wU41a8@f (cdr wU41a4@ls) wU41a5@dups))))))) (set! wU4b68@wU30ad@find-dups wU30ad@find-dups) (set! wU30af@chi-internal (lambda (wU41ae@e* wU41af@r wU41b0@mr) (let ((wU41b4@rib (wU2e24@make-empty-rib))) (call-with-values (lambda () (wU30cf@chi-body* (map (lambda (wU41c6@x) (wU2e5c@add-subst wU41b4@rib wU41c6@x)) (wU2e6e@syntax->list wU41ae@e*)) wU41af@r wU41b0@mr '() '() '() '() '() wU41b4@rib '#f)) (lambda (wU41c8@wU41b7 wU41c9@wU41b9 wU41ca@wU41bb wU41cb@wU41bd wU41cc@wU41bf wU41cd@wU41c1 wU41ce@wU41c3 wU41cf@wU41c5) (let ((wU41d8@_exp* wU41cf@wU41c5) (wU41d9@kwd* wU41ce@wU41c3) (wU41da@mod** wU41cd@wU41c1) (wU41db@rhs* wU41cc@wU41bf) (wU41dc@lex* wU41cb@wU41bd) (wU41dd@mr wU41ca@wU41bb) (wU41de@r wU41c9@wU41b9) (wU41df@e* wU41c8@wU41b7)) (begin (if (null? wU41df@e*) (wU3157@syntax-violation '#f '"no expression in body" wU41df@e*) (void)) (let ((wU41e8@init* (wU3095@chi-expr* (append (apply append (reverse wU41da@mod**)) wU41df@e*) wU41de@r wU41dd@mr))) (let ((wU41ea@rhs* (wU30a9@chi-rhs* wU41db@rhs* wU41de@r wU41dd@mr))) (wU2dda@wU2d39@build-letrec* '#f (reverse wU41dc@lex*) (reverse wU41ea@rhs*) (wU2dd5@wU2d2f@build-sequence '#f wU41e8@init*))))))))))) (set! wU4b69@wU30af@chi-internal wU30af@chi-internal) (set! wU30b1@parse-module (lambda (wU41ec@e) (let ((wU41ee@t wU41ec@e)) (let ((wU41f0@ls/false (wU3077@syntax-dispatch wU41ee@t '(_ each-any . each-any)))) (if wU41f0@ls/false (apply (lambda (wU41f2@export* wU41f3@b*) (begin (if (not (for-all wU2e70@id? wU41f2@export*)) (wU3157@syntax-violation '#f '"module exports must be identifiers" wU41ec@e) (void)) (values '#f (list->vector wU41f2@export*) wU41f3@b*))) wU41f0@ls/false) (let ((wU41f6@t wU41ee@t)) (let ((wU41f8@ls/false (wU3077@syntax-dispatch wU41f6@t '(_ any each-any . each-any)))) (if wU41f8@ls/false (apply (lambda (wU41fa@name wU41fb@export* wU41fc@b*) (begin (if (not (wU2e70@id? wU41fa@name)) (wU3157@syntax-violation '#f '"module name must be an identifier" wU41ec@e) (void)) (if (not (for-all wU2e70@id? wU41fb@export*)) (wU3157@syntax-violation '#f '"module exports must be identifiers" wU41ec@e) (void)) (values wU41fa@name (list->vector wU41fb@export*) wU41fc@b*))) wU41f8@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU41f6@t))))))))) (set! wU4b6a@wU30b1@parse-module wU30b1@parse-module) (set! wU30bb@module-interface? (lambda (wU4200@x) (and (simple-struct? wU4200@x) (eq? (simple-struct-name wU4200@x) 'module-interface)))) (set! wU4b6b@wU30bb@module-interface? wU30bb@module-interface?) (set! wU30bd@module-interface-first-mark (lambda (wU4202@x) (simple-struct-ref wU4202@x '0))) (set! wU4b6c@wU30bd@module-interface-first-mark wU30bd@module-interface-first-mark) (set! wU30bf@set-module-interface-first-mark! (lambda (wU4204@x wU4205@val) (simple-struct-set! wU4204@x '0 wU4205@val))) (set! wU4b6d@wU30bf@set-module-interface-first-mark! wU30bf@set-module-interface-first-mark!) (set! wU30c1@module-interface-exp-id-vec (lambda (wU4208@x) (simple-struct-ref wU4208@x '1))) (set! wU4b6e@wU30c1@module-interface-exp-id-vec wU30c1@module-interface-exp-id-vec) (set! wU30c3@set-module-interface-exp-id-vec! (lambda (wU420a@x wU420b@val) (simple-struct-set! wU420a@x '1 wU420b@val))) (set! wU4b6f@wU30c3@set-module-interface-exp-id-vec! wU30c3@set-module-interface-exp-id-vec!) (set! wU30c5@module-interface-exp-lab-vec (lambda (wU420e@x) (simple-struct-ref wU420e@x '2))) (set! wU4b70@wU30c5@module-interface-exp-lab-vec wU30c5@module-interface-exp-lab-vec) (set! wU30c7@set-module-interface-exp-lab-vec! (lambda (wU4210@x wU4211@val) (simple-struct-set! wU4210@x '2 wU4211@val))) (set! wU4b71@wU30c7@set-module-interface-exp-lab-vec! wU30c7@set-module-interface-exp-lab-vec!) (set! wU30c9@dummy '3) (set! wU4b72@wU30c9@dummy wU30c9@dummy) (set! wU30cb@module-interface-exp-id* (lambda (wU4214@iface wU4215@id) (let ((wU4219@diff-marks '#f)) (begin (set! wU4219@diff-marks (lambda (wU4220@ls wU4221@x) (begin (if (null? wU4220@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((wU4224@a (car wU4220@ls))) (if (eq? wU4224@a wU4221@x) '() (cons wU4224@a (wU4219@diff-marks (cdr wU4220@ls) wU4221@x))))))) (let ((wU421a@diff (wU4219@diff-marks (wU2e42@stx-mark* wU4215@id) (wU30bd@module-interface-first-mark wU4214@iface))) (wU421b@id-vec (wU30c1@module-interface-exp-id-vec wU4214@iface))) (if (null? wU421a@diff) wU421b@id-vec (vector-map (lambda (wU421e@x) (make-simple-struct 'stx '5 (list (wU2e3e@stx-expr wU421e@x) (append wU421a@diff (wU2e42@stx-mark* wU421e@x)) '() '()))) wU421b@id-vec))))))) (set! wU4b73@wU30cb@module-interface-exp-id* wU30cb@module-interface-exp-id*) (set! wU30cd@chi-internal-module (lambda (wU4226@e wU4227@r wU4228@mr wU4229@lex* wU422a@rhs* wU422b@mod** wU422c@kwd*) (call-with-values (lambda () (wU30b1@parse-module wU4226@e)) (lambda (wU423a@wU4235 wU423b@wU4237 wU423c@wU4239) (let ((wU4240@e* wU423c@wU4239) (wU4241@exp-id* wU423b@wU4237) (wU4242@name wU423a@wU4235)) (let ((wU4246@rib (wU2e24@make-empty-rib))) (let ((wU4248@e* (map (lambda (wU424a@x) (wU2e5c@add-subst wU4246@rib wU424a@x)) (wU2e6e@syntax->list wU4240@e*)))) (call-with-values (lambda () (wU30cf@chi-body* wU4248@e* wU4227@r wU4228@mr wU4229@lex* wU422a@rhs* wU422b@mod** wU422c@kwd* '() wU4246@rib '#f)) (lambda (wU425c@wU424d wU425d@wU424f wU425e@wU4251 wU425f@wU4253 wU4260@wU4255 wU4261@wU4257 wU4262@wU4259 wU4263@wU425b) (let ((wU426c@_exp* wU4263@wU425b) (wU426d@kwd* wU4262@wU4259) (wU426e@mod** wU4261@wU4257) (wU426f@rhs* wU4260@wU4255) (wU4270@lex* wU425f@wU4253) (wU4271@mr wU425e@wU4251) (wU4272@r wU425d@wU424f) (wU4273@e* wU425c@wU424d)) (let ((wU427c@exp-lab* (vector-map (lambda (wU4280@x) (or (wU2e86@id->label (make-simple-struct 'stx '5 (list (wU2e72@id->sym wU4280@x) (wU2e42@stx-mark* wU4280@x) (list wU4246@rib) '()))) (wU3157@syntax-violation '#f '"cannot find module export" wU4280@x))) wU4241@exp-id*)) (wU427d@mod** (cons wU4273@e* wU426e@mod**))) (if (not wU4242@name) (values wU4270@lex* wU426f@rhs* wU4241@exp-id* wU427c@exp-lab* wU4272@r wU4271@mr wU427d@mod** wU426d@kwd*) (let ((wU4282@lab (wU2dfc@gen-label 'module)) (wU4283@iface (make-simple-struct 'module-interface '4 (list (car (wU2e42@stx-mark* wU4242@name)) (vector-map (lambda (wU4286@x) (make-simple-struct 'stx '5 (list (wU2e3e@stx-expr wU4286@x) (wU2e42@stx-mark* wU4286@x) '() '()))) wU4241@exp-id*) wU427c@exp-lab*)))) (values wU4270@lex* wU426f@rhs* (vector wU4242@name) (vector wU4282@lab) (cons (cons wU4282@lab (cons '$module wU4283@iface)) wU4272@r) (cons (cons wU4282@lab (cons '$module wU4283@iface)) wU4271@mr) wU427d@mod** wU426d@kwd*)))))))))))))) (set! wU4b74@wU30cd@chi-internal-module wU30cd@chi-internal-module) (set! wU30cf@chi-body* (lambda (wU4288@e* wU4289@r wU428a@mr wU428b@lex* wU428c@rhs* wU428d@mod** wU428e@kwd* wU428f@exp* wU4290@rib wU4291@top?) (if (null? wU4288@e*) (values wU4288@e* wU4289@r wU428a@mr wU428b@lex* wU428c@rhs* wU428d@mod** wU428e@kwd* wU428f@exp*) (let ((wU429c@e (car wU4288@e*))) (call-with-values (lambda () (wU2e92@syntax-type wU429c@e wU4289@r)) (lambda (wU42a4@wU429f wU42a5@wU42a1 wU42a6@wU42a3) (let ((wU42aa@kwd wU42a6@wU42a3) (wU42ab@value wU42a5@wU42a1) (wU42ac@type wU42a4@wU429f)) (let ((wU42b0@kwd* (if (wU2e70@id? wU42aa@kwd) (cons wU42aa@kwd wU428e@kwd*) wU428e@kwd*))) (let ((wU42b2@t wU42ac@type)) (if (memv wU42b2@t '(define)) (call-with-values (lambda () (wU2ff9@parse-define wU429c@e)) (lambda (wU42b8@wU42b5 wU42b9@wU42b7) (let ((wU42bc@rhs wU42b9@wU42b7) (wU42bd@id wU42b8@wU42b5)) (begin (if (wU2e7c@bound-id-member? wU42bd@id wU42b0@kwd*) (wU3157@syntax-violation '#f '"cannot redefine keyword" wU429c@e) (void)) (call-with-values (lambda () (wU2e00@gen-define-label+loc wU42bd@id wU4290@rib)) (lambda (wU42c4@wU42c1 wU42c5@wU42c3) (let ((wU42c8@lex wU42c5@wU42c3) (wU42c9@lab wU42c4@wU42c1)) (begin (wU2e26@extend-rib! wU4290@rib wU42bd@id wU42c9@lab) (wU30cf@chi-body* (cdr wU4288@e*) (wU3007@add-lexical wU42c9@lab wU42c8@lex wU4289@r) wU428a@mr (cons wU42c8@lex wU428b@lex*) (cons wU42bc@rhs wU428c@rhs*) wU428d@mod** wU42b0@kwd* wU428f@exp* wU4290@rib wU4291@top?))))))))) (if (memv wU42b2@t '(define-syntax)) (call-with-values (lambda () (wU2ffb@parse-define-syntax wU429c@e)) (lambda (wU42d0@wU42cd wU42d1@wU42cf) (let ((wU42d4@rhs wU42d1@wU42cf) (wU42d5@id wU42d0@wU42cd)) (begin (if (wU2e7c@bound-id-member? wU42d5@id wU42b0@kwd*) (wU3157@syntax-violation '#f '"cannot redefine keyword" wU429c@e) (void)) (let ((wU42d8@lab (wU2e02@gen-define-label wU42d5@id wU4290@rib)) (wU42d9@expanded-rhs (wU30d1@expand-transformer wU42d4@rhs wU428a@mr))) (begin (wU2e26@extend-rib! wU4290@rib wU42d5@id wU42d8@lab) (let ((wU42dc@b (wU2ea8@make-eval-transformer wU42d9@expanded-rhs))) (wU30cf@chi-body* (cdr wU4288@e*) (cons (cons wU42d8@lab wU42dc@b) wU4289@r) (cons (cons wU42d8@lab wU42dc@b) wU428a@mr) wU428b@lex* wU428c@rhs* wU428d@mod** wU42b0@kwd* wU428f@exp* wU4290@rib wU4291@top?)))))))) (if (memv wU42b2@t '(let-syntax letrec-syntax)) (let ((wU42de@t wU429c@e)) (let ((wU42e0@ls/false (wU3077@syntax-dispatch wU42de@t '(_ #(each (any any)) . each-any)))) (if (and wU42e0@ls/false (apply (lambda (wU42e2@xlhs* wU42e3@xrhs* wU42e4@xbody*) (if (not (wU2e78@valid-bound-ids? wU42e2@xlhs*)) (wU3157@syntax-violation '#f '"invalid identifiers" wU429c@e) (void))) wU42e0@ls/false)) (apply (lambda (wU42e8@xlhs* wU42e9@xrhs* wU42ea@xbody*) (let ((wU42ee@xlab* (map wU2dfc@gen-label wU42e8@xlhs*))) (let ((wU42f0@xrib (wU2e30@make-full-rib wU42e8@xlhs* wU42ee@xlab*))) (let ((wU42f2@xb* (map (lambda (wU42f4@x) (wU2ea8@make-eval-transformer (wU30d1@expand-transformer (if (eq? wU42ac@type 'let-syntax) wU42f4@x (wU2e5c@add-subst wU42f0@xrib wU42f4@x)) wU428a@mr))) wU42e9@xrhs*))) (wU30cf@chi-body* (append (map (lambda (wU42f6@x) (wU2e5c@add-subst wU42f0@xrib wU42f6@x)) wU42ea@xbody*) (cdr wU4288@e*)) (append (map cons wU42ee@xlab* wU42f2@xb*) wU4289@r) (append (map cons wU42ee@xlab* wU42f2@xb*) wU428a@mr) wU428b@lex* wU428c@rhs* wU428d@mod** wU42b0@kwd* wU428f@exp* wU4290@rib wU4291@top?))))) wU42e0@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU42de@t)))) (if (memv wU42b2@t '(begin)) (let ((wU42f8@t wU429c@e)) (let ((wU42fa@ls/false (wU3077@syntax-dispatch wU42f8@t '(_ . each-any)))) (if wU42fa@ls/false (apply (lambda (wU42fc@x*) (wU30cf@chi-body* (append wU42fc@x* (cdr wU4288@e*)) wU4289@r wU428a@mr wU428b@lex* wU428c@rhs* wU428d@mod** wU42b0@kwd* wU428f@exp* wU4290@rib wU4291@top?)) wU42fa@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU42f8@t)))) (if (memv wU42b2@t '(global-macro global-macro!)) (wU30cf@chi-body* (cons (wU2e5c@add-subst wU4290@rib (wU3093@chi-global-macro wU42ab@value wU429c@e)) (cdr wU4288@e*)) wU4289@r wU428a@mr wU428b@lex* wU428c@rhs* wU428d@mod** wU42b0@kwd* wU428f@exp* wU4290@rib wU4291@top?) (if (memv wU42b2@t '(local-macro local-macro!)) (wU30cf@chi-body* (cons (wU2e5c@add-subst wU4290@rib (wU3091@chi-local-macro wU42ab@value wU429c@e)) (cdr wU4288@e*)) wU4289@r wU428a@mr wU428b@lex* wU428c@rhs* wU428d@mod** wU42b0@kwd* wU428f@exp* wU4290@rib wU4291@top?) (if (memv wU42b2@t '(macro macro!)) (wU30cf@chi-body* (cons (wU2e5c@add-subst wU4290@rib (wU308f@chi-macro wU42ab@value wU429c@e)) (cdr wU4288@e*)) wU4289@r wU428a@mr wU428b@lex* wU428c@rhs* wU428d@mod** wU42b0@kwd* wU428f@exp* wU4290@rib wU4291@top?) (if (memv wU42b2@t '(module)) (call-with-values (lambda () (wU30cd@chi-internal-module wU429c@e wU4289@r wU428a@mr wU428b@lex* wU428c@rhs* wU428d@mod** wU42b0@kwd*)) (lambda (wU430e@wU42ff wU430f@wU4301 wU4310@wU4303 wU4311@wU4305 wU4312@wU4307 wU4313@wU4309 wU4314@wU430b wU4315@wU430d) (let ((wU431e@kwd* wU4315@wU430d) (wU431f@mod** wU4314@wU430b) (wU4320@mr wU4313@wU4309) (wU4321@r wU4312@wU4307) (wU4322@m-exp-lab* wU4311@wU4305) (wU4323@m-exp-id* wU4310@wU4303) (wU4324@rhs* wU430f@wU4301) (wU4325@lex* wU430e@wU42ff)) (begin (vector-for-each (lambda (wU432e@id wU432f@lab) (wU2e26@extend-rib! wU4290@rib wU432e@id wU432f@lab)) wU4323@m-exp-id* wU4322@m-exp-lab*) (wU30cf@chi-body* (cdr wU4288@e*) wU4321@r wU4320@mr wU4325@lex* wU4324@rhs* wU431f@mod** wU431e@kwd* wU428f@exp* wU4290@rib wU4291@top?))))) (if (memv wU42b2@t '(library)) (begin (wU3139@library-expander (wU2e84@stx->datum wU429c@e)) (wU30cf@chi-body* (cdr wU4288@e*) wU4289@r wU428a@mr wU428b@lex* wU428c@rhs* wU428d@mod** wU42b0@kwd* wU428f@exp* wU4290@rib wU4291@top?)) (if (memv wU42b2@t '(export)) (let ((wU4332@t wU429c@e)) (let ((wU4334@ls/false (wU3077@syntax-dispatch wU4332@t '(_ . each-any)))) (if wU4334@ls/false (apply (lambda (wU4336@exp-decl*) (wU30cf@chi-body* (cdr wU4288@e*) wU4289@r wU428a@mr wU428b@lex* wU428c@rhs* wU428d@mod** wU42b0@kwd* (append wU4336@exp-decl* wU428f@exp*) wU4290@rib wU4291@top?)) wU4334@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU4332@t)))) (if (memv wU42b2@t '(import)) (let ((wU4339@module-import? '#f) (wU433b@module-import '#f) (wU433d@library-import '#f)) (begin (set! wU4339@module-import? (lambda (wU438c@e) (let ((wU438e@t wU438c@e)) (let ((wU4390@ls/false (wU3077@syntax-dispatch wU438e@t '(_ any)))) (if (and wU4390@ls/false (apply (lambda (wU4392@id) (wU2e70@id? wU4392@id)) wU4390@ls/false)) (apply (lambda (wU4394@id) '#t) wU4390@ls/false) (let ((wU4396@t wU438e@t)) (let ((wU4398@ls/false (wU3077@syntax-dispatch wU4396@t '(_ . each-any)))) (if wU4398@ls/false (apply (lambda (wU439a@imp*) '#f) wU4398@ls/false) (let ((wU439c@t wU4396@t)) (let ((wU439e@ls/false (wU3077@syntax-dispatch wU439c@t '_))) (if wU439e@ls/false (apply (lambda () (wU3157@syntax-violation '#f '"malformed import form" wU438c@e)) wU439e@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU439c@t)))))))))))) (set! wU433b@module-import (lambda (wU436a@e wU436b@r) (let ((wU436e@t wU436a@e)) (let ((wU4370@ls/false (wU3077@syntax-dispatch wU436e@t '(_ any)))) (if (and wU4370@ls/false (apply (lambda (wU4372@id) (wU2e70@id? wU4372@id)) wU4370@ls/false)) (apply (lambda (wU4374@id) (call-with-values (lambda () (wU2e92@syntax-type wU4374@id wU436b@r)) (lambda (wU437c@wU4377 wU437d@wU4379 wU437e@wU437b) (let ((wU4382@kwd wU437e@wU437b) (wU4383@value wU437d@wU4379) (wU4384@type wU437c@wU4377)) (let ((wU4388@t wU4384@type)) (if (memv wU4388@t '($module)) (let ((wU438a@iface wU4383@value)) (values (wU30cb@module-interface-exp-id* wU438a@iface wU4374@id) (wU30c5@module-interface-exp-lab-vec wU438a@iface))) (wU3157@syntax-violation '#f '"invalid import" wU436a@e))))))) wU4370@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU436e@t)))))) (set! wU433d@library-import (lambda (wU434e@e) (let ((wU4350@t wU434e@e)) (let ((wU4352@ls/false (wU3077@syntax-dispatch wU4350@t '(any . each-any)))) (if wU4352@ls/false (apply (lambda (wU4354@ctxt wU4355@imp*) (call-with-values (lambda () (wU30d9@parse-import-spec* (wU315d@syntax->datum wU4355@imp*))) (lambda (wU435c@wU4359 wU435d@wU435b) (let ((wU4360@subst-labels wU435d@wU435b) (wU4361@subst-names wU435c@wU4359)) (values (vector-map (lambda (wU4364@name) (wU2e50@datum->stx wU4354@ctxt wU4364@name)) wU4361@subst-names) wU4360@subst-labels))))) wU4352@ls/false) (let ((wU4366@t wU4350@t)) (let ((wU4368@ls/false (wU3077@syntax-dispatch wU4366@t '_))) (if wU4368@ls/false (apply (lambda () (wU3157@syntax-violation '#f '"invalid import form" wU434e@e)) wU4368@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU4366@t))))))))) (begin (call-with-values (lambda () (if (wU4339@module-import? wU429c@e) (wU433b@module-import wU429c@e wU4289@r) (wU433d@library-import wU429c@e))) (lambda (wU4342@wU433f wU4343@wU4341) (let ((wU4346@lab* wU4343@wU4341) (wU4347@id* wU4342@wU433f)) (vector-for-each (lambda (wU434a@id wU434b@lab) (wU2e26@extend-rib! wU4290@rib wU434a@id wU434b@lab)) wU4347@id* wU4346@lab*)))) (wU30cf@chi-body* (cdr wU4288@e*) wU4289@r wU428a@mr wU428b@lex* wU428c@rhs* wU428d@mod** wU42b0@kwd* wU428f@exp* wU4290@rib wU4291@top?)))) (if wU4291@top? (wU30cf@chi-body* (cdr wU4288@e*) wU4289@r wU428a@mr (cons (wU2df8@gen-lexical 'dummy) wU428b@lex*) (cons (cons 'top-expr wU429c@e) wU428c@rhs*) wU428d@mod** wU42b0@kwd* wU428f@exp* wU4290@rib wU4291@top?) (values wU4288@e* wU4289@r wU428a@mr wU428b@lex* wU428c@rhs* wU428d@mod** wU42b0@kwd* wU428f@exp*)))))))))))))))))))))) (set! wU4b75@wU30cf@chi-body* wU30cf@chi-body*) (set! wU30d1@expand-transformer (lambda (wU43a0@expr wU43a1@r) (let ((wU43a4@rtc (wU30dd@make-collector))) (let ((wU43a6@expanded-rhs (let ((wU43b0@wU43a9 wU30df@inv-collector) (wU43b1@wU43ab wU30e1@vis-collector) (wU43b2@wU43ad wU43a4@rtc) (wU43b3@wU43af (lambda (wU43b8@x) (values)))) (let ((wU43ba@swap (lambda () (begin (let ((wU43bc@t (wU43b0@wU43a9))) (begin (wU43b0@wU43a9 wU43b2@wU43ad) (set! wU43b2@wU43ad wU43bc@t))) (let ((wU43be@t (wU43b1@wU43ab))) (begin (wU43b1@wU43ab wU43b3@wU43af) (set! wU43b3@wU43af wU43be@t))))))) (dynamic-wind wU43ba@swap (lambda () (wU3099@chi-expr wU43a0@expr wU43a1@r wU43a1@r)) wU43ba@swap))))) (begin (for-each (let ((wU43c0@mark-visit (wU30e1@vis-collector))) (lambda (wU43c2@x) (begin (wU2c86@wU2ad4@invoke-library wU43c2@x) (wU43c0@mark-visit wU43c2@x)))) (wU43a4@rtc)) wU43a6@expanded-rhs))))) (set! wU4b76@wU30d1@expand-transformer wU30d1@expand-transformer) (set! wU30d3@parse-exports (lambda (wU43c4@exp*) (let wU43cc@f ((wU43c6@exp* wU43c4@exp*) (wU43c7@int* '()) (wU43c8@ext* '())) (if (null? wU43c6@exp*) (begin (if (not (wU2e78@valid-bound-ids? wU43c8@ext*)) (wU3157@syntax-violation 'export '"invalid exports" (wU30ad@find-dups wU43c8@ext*)) (void)) (values (map wU315d@syntax->datum wU43c8@ext*) wU43c7@int*)) (let ((wU43ce@t (car wU43c6@exp*))) (let ((wU43d0@ls/false (wU3077@syntax-dispatch wU43ce@t '(any . #(each (any any)))))) (if wU43d0@ls/false (apply (lambda (wU43d2@rename wU43d3@i* wU43d4@e*) (begin (if (not (and (eq? (wU315d@syntax->datum wU43d2@rename) 'rename) (for-all wU2e70@id? wU43d3@i*) (for-all wU2e70@id? wU43d4@e*))) (wU3157@syntax-violation 'export '"invalid export specifier" (car wU43c6@exp*)) (void)) (wU43cc@f (cdr wU43c6@exp*) (append wU43d3@i* wU43c7@int*) (append wU43d4@e* wU43c8@ext*)))) wU43d0@ls/false) (let ((wU43d8@t wU43ce@t)) (let ((wU43da@ls/false (wU3077@syntax-dispatch wU43d8@t 'any))) (if wU43da@ls/false (apply (lambda (wU43dc@ie) (begin (if (not (wU2e70@id? wU43dc@ie)) (wU3157@syntax-violation 'export '"invalid export" wU43dc@ie) (void)) (wU43cc@f (cdr wU43c6@exp*) (cons wU43dc@ie wU43c7@int*) (cons wU43dc@ie wU43c8@ext*)))) wU43da@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU43d8@t))))))))))) (set! wU4b77@wU30d3@parse-exports wU30d3@parse-exports) (set! wU30d5@parse-library-name (lambda (wU43de@spec) (let ((wU43e1@parse '#f)) (begin (set! wU43e1@parse (lambda (wU43ee@x) (let ((wU43f0@t wU43ee@x)) (let ((wU43f2@ls/false (wU3077@syntax-dispatch wU43f0@t '(each-any)))) (if (and wU43f2@ls/false (apply (lambda (wU43f4@v*) (for-all (lambda (wU43f6@x) (let ((wU43f8@x (wU315d@syntax->datum wU43f6@x))) (and (integer? wU43f8@x) (exact? wU43f8@x)))) wU43f4@v*)) wU43f2@ls/false)) (apply (lambda (wU43fa@v*) (values '() (map wU315d@syntax->datum wU43fa@v*))) wU43f2@ls/false) (let ((wU43fc@t wU43f0@t)) (let ((wU43fe@ls/false (wU3077@syntax-dispatch wU43fc@t '(any . any)))) (if (and wU43fe@ls/false (apply (lambda (wU4400@x wU4401@rest) (symbol? (wU315d@syntax->datum wU4400@x))) wU43fe@ls/false)) (apply (lambda (wU4404@x wU4405@rest) (call-with-values (lambda () (wU43e1@parse wU4405@rest)) (lambda (wU440c@wU4409 wU440d@wU440b) (let ((wU4410@v* wU440d@wU440b) (wU4411@x* wU440c@wU4409)) (values (cons (wU315d@syntax->datum wU4404@x) wU4411@x*) wU4410@v*))))) wU43fe@ls/false) (let ((wU4414@t wU43fc@t)) (let ((wU4416@ls/false (wU3077@syntax-dispatch wU4414@t '()))) (if wU4416@ls/false (apply (lambda () (values '() '())) wU4416@ls/false) (let ((wU4418@t wU4414@t)) (let ((wU441a@ls/false (wU3077@syntax-dispatch wU4418@t '_))) (if wU441a@ls/false (apply (lambda () (wU3157@syntax-violation '#f '"invalid library name" wU43de@spec)) wU441a@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU4418@t))))))))))))))) (call-with-values (lambda () (wU43e1@parse wU43de@spec)) (lambda (wU43e6@wU43e3 wU43e7@wU43e5) (let ((wU43ea@ver* wU43e7@wU43e5) (wU43eb@name* wU43e6@wU43e3)) (begin (if (null? wU43eb@name*) (wU3157@syntax-violation '#f '"empty library name" wU43de@spec) (void)) (values wU43eb@name* wU43ea@ver*))))))))) (set! wU4b78@wU30d5@parse-library-name wU30d5@parse-library-name) (set! wU30d7@parse-library (lambda (wU441c@e) (let ((wU441e@t wU441c@e)) (let ((wU4420@ls/false (wU3077@syntax-dispatch wU441e@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and wU4420@ls/false (apply (lambda (wU4422@library wU4423@name* wU4424@export wU4425@exp* wU4426@import wU4427@imp* wU4428@b*) (and (eq? (wU315d@syntax->datum wU4424@export) 'export) (eq? (wU315d@syntax->datum wU4426@import) 'import) (eq? (wU315d@syntax->datum wU4422@library) 'library))) wU4420@ls/false)) (apply (lambda (wU4430@library wU4431@name* wU4432@export wU4433@exp* wU4434@import wU4435@imp* wU4436@b*) (values wU4431@name* wU4433@exp* wU4435@imp* wU4436@b*)) wU4420@ls/false) (let ((wU443e@t wU441e@t)) (let ((wU4440@ls/false (wU3077@syntax-dispatch wU443e@t '_))) (if wU4440@ls/false (apply (lambda () (wU3157@syntax-violation '#f '"malformed library" wU441c@e)) wU4440@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU443e@t))))))))) (set! wU4b79@wU30d7@parse-library wU30d7@parse-library) (set! wU30d9@parse-import-spec* (let ((wU4443@idsyn? '#f) (wU4445@dup-error '#f) (wU4447@merge-substs '#f) (wU4449@exclude* '#f) (wU444b@find* '#f) (wU444d@rem* '#f) (wU444f@remove-dups '#f) (wU4451@parse-library-name '#f) (wU4453@import-library '#f) (wU4455@get-import '#f) (wU4457@add-imports! '#f)) (begin (set! wU4443@idsyn? (lambda (wU464c@x) (symbol? (wU315d@syntax->datum wU464c@x)))) (set! wU4445@dup-error (lambda (wU464a@name) (wU3157@syntax-violation 'import '"two imports with different bindings" wU464a@name))) (set! wU4447@merge-substs (lambda (wU4638@s wU4639@subst) (let ((wU463d@insert-to-subst '#f)) (begin (set! wU463d@insert-to-subst (lambda (wU463e@a wU463f@subst) (let ((wU4642@name (car wU463e@a)) (wU4643@label (cdr wU463e@a))) (let ((wU4646@t (assq wU4642@name wU463f@subst))) (if wU4646@t ((lambda (wU4648@x) (if (eq? (cdr wU4648@x) wU4643@label) wU463f@subst (wU4445@dup-error wU4642@name))) wU4646@t) (cons wU463e@a wU463f@subst)))))) (if (null? wU4638@s) wU4639@subst (wU463d@insert-to-subst (car wU4638@s) (wU4447@merge-substs (cdr wU4638@s) wU4639@subst))))))) (set! wU4449@exclude* (lambda (wU4608@sym* wU4609@subst) (let ((wU460d@exclude '#f)) (begin (set! wU460d@exclude (lambda (wU4626@sym wU4627@subst) (if (null? wU4627@subst) (wU3157@syntax-violation 'import '"cannot rename unbound identifier" wU4626@sym) (if (eq? wU4626@sym (caar wU4627@subst)) (values (cdar wU4627@subst) (cdr wU4627@subst)) (let ((wU462a@a (car wU4627@subst))) (call-with-values (lambda () (wU460d@exclude wU4626@sym (cdr wU4627@subst))) (lambda (wU4630@wU462d wU4631@wU462f) (let ((wU4634@subst wU4631@wU462f) (wU4635@old wU4630@wU462d)) (values wU4635@old (cons wU462a@a wU4634@subst)))))))))) (if (null? wU4608@sym*) (values '() wU4609@subst) (call-with-values (lambda () (wU460d@exclude (car wU4608@sym*) wU4609@subst)) (lambda (wU4612@wU460f wU4613@wU4611) (let ((wU4616@subst wU4613@wU4611) (wU4617@old wU4612@wU460f)) (call-with-values (lambda () (wU4449@exclude* (cdr wU4608@sym*) wU4616@subst)) (lambda (wU461e@wU461b wU461f@wU461d) (let ((wU4622@subst wU461f@wU461d) (wU4623@old* wU461e@wU461b)) (values (cons wU4617@old wU4623@old*) wU4622@subst)))))))))))) (set! wU444b@find* (lambda (wU4600@sym* wU4601@subst) (map (lambda (wU4604@x) (let ((wU4606@t (assq wU4604@x wU4601@subst))) (if wU4606@t (cdr wU4606@t) (wU3157@syntax-violation 'import '"cannot find identifier" wU4604@x)))) wU4600@sym*))) (set! wU444d@rem* (lambda (wU45f8@sym* wU45f9@subst) (let wU45fe@f ((wU45fc@subst wU45f9@subst)) (if (null? wU45fc@subst) '() (if (memq (caar wU45fc@subst) wU45f8@sym*) (wU45fe@f (cdr wU45fc@subst)) (cons (car wU45fc@subst) (wU45fe@f (cdr wU45fc@subst)))))))) (set! wU444f@remove-dups (lambda (wU45f6@ls) (if (null? wU45f6@ls) '() (if (memq (car wU45f6@ls) (cdr wU45f6@ls)) (wU444f@remove-dups (cdr wU45f6@ls)) (cons (car wU45f6@ls) (wU444f@remove-dups (cdr wU45f6@ls))))))) (set! wU4451@parse-library-name (lambda (wU450e@spec) (let ((wU4511@subversion? '#f) (wU4513@subversion-pred '#f) (wU4515@version-pred '#f)) (begin (set! wU4511@subversion? (lambda (wU45f2@x) (let ((wU45f4@x (wU315d@syntax->datum wU45f2@x))) (and (integer? wU45f4@x) (exact? wU45f4@x) (>= wU45f4@x '0))))) (set! wU4513@subversion-pred (lambda (wU4592@x*) (let ((wU4594@t wU4592@x*)) (let ((wU4596@ls/false (wU3077@syntax-dispatch wU4594@t 'any))) (if (and wU4596@ls/false (apply (lambda (wU4598@n) (wU4511@subversion? wU4598@n)) wU4596@ls/false)) (apply (lambda (wU459a@n) (lambda (wU459c@x) (= wU459c@x (wU315d@syntax->datum wU459a@n)))) wU4596@ls/false) (let ((wU459e@t wU4594@t)) (let ((wU45a0@ls/false (wU3077@syntax-dispatch wU459e@t '(any . each-any)))) (if (and wU45a0@ls/false (apply (lambda (wU45a2@p? wU45a3@sub*) (eq? (wU315d@syntax->datum wU45a2@p?) 'and)) wU45a0@ls/false)) (apply (lambda (wU45a6@p? wU45a7@sub*) (let ((wU45aa@p* (map wU4513@subversion-pred wU45a7@sub*))) (lambda (wU45ac@x) (for-all (lambda (wU45ae@p) (wU45ae@p wU45ac@x)) wU45aa@p*)))) wU45a0@ls/false) (let ((wU45b0@t wU459e@t)) (let ((wU45b2@ls/false (wU3077@syntax-dispatch wU45b0@t '(any . each-any)))) (if (and wU45b2@ls/false (apply (lambda (wU45b4@p? wU45b5@sub*) (eq? (wU315d@syntax->datum wU45b4@p?) 'or)) wU45b2@ls/false)) (apply (lambda (wU45b8@p? wU45b9@sub*) (let ((wU45bc@p* (map wU4513@subversion-pred wU45b9@sub*))) (lambda (wU45be@x) (exists (lambda (wU45c0@p) (wU45c0@p wU45be@x)) wU45bc@p*)))) wU45b2@ls/false) (let ((wU45c2@t wU45b0@t)) (let ((wU45c4@ls/false (wU3077@syntax-dispatch wU45c2@t '(any any)))) (if (and wU45c4@ls/false (apply (lambda (wU45c6@p? wU45c7@sub) (eq? (wU315d@syntax->datum wU45c6@p?) 'not)) wU45c4@ls/false)) (apply (lambda (wU45ca@p? wU45cb@sub) (let ((wU45ce@p (wU4513@subversion-pred wU45cb@sub))) (lambda (wU45d0@x) (not (wU45ce@p wU45d0@x))))) wU45c4@ls/false) (let ((wU45d2@t wU45c2@t)) (let ((wU45d4@ls/false (wU3077@syntax-dispatch wU45d2@t '(any any)))) (if (and wU45d4@ls/false (apply (lambda (wU45d6@p? wU45d7@n) (and (eq? (wU315d@syntax->datum wU45d6@p?) '<=) (wU4511@subversion? wU45d7@n))) wU45d4@ls/false)) (apply (lambda (wU45da@p? wU45db@n) (lambda (wU45de@x) (<= wU45de@x (wU315d@syntax->datum wU45db@n)))) wU45d4@ls/false) (let ((wU45e0@t wU45d2@t)) (let ((wU45e2@ls/false (wU3077@syntax-dispatch wU45e0@t '(any any)))) (if (and wU45e2@ls/false (apply (lambda (wU45e4@p? wU45e5@n) (and (eq? (wU315d@syntax->datum wU45e4@p?) '>=) (wU4511@subversion? wU45e5@n))) wU45e2@ls/false)) (apply (lambda (wU45e8@p? wU45e9@n) (lambda (wU45ec@x) (>= wU45ec@x (wU315d@syntax->datum wU45e9@n)))) wU45e2@ls/false) (let ((wU45ee@t wU45e0@t)) (let ((wU45f0@ls/false (wU3077@syntax-dispatch wU45ee@t '_))) (if wU45f0@ls/false (apply (lambda () (wU3157@syntax-violation 'import '"invalid sub-version spec" wU450e@spec wU4592@x*)) wU45f0@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU45ee@t)))))))))))))))))))))))) (set! wU4515@version-pred (lambda (wU4542@x*) (let ((wU4544@t wU4542@x*)) (let ((wU4546@ls/false (wU3077@syntax-dispatch wU4544@t '()))) (if wU4546@ls/false (apply (lambda () (lambda (wU4548@x) '#t)) wU4546@ls/false) (let ((wU454a@t wU4544@t)) (let ((wU454c@ls/false (wU3077@syntax-dispatch wU454a@t '(any . each-any)))) (if (and wU454c@ls/false (apply (lambda (wU454e@c wU454f@ver*) (eq? (wU315d@syntax->datum wU454e@c) 'and)) wU454c@ls/false)) (apply (lambda (wU4552@c wU4553@ver*) (let ((wU4556@p* (map wU4515@version-pred wU4553@ver*))) (lambda (wU4558@x) (for-all (lambda (wU455a@p) (wU455a@p wU4558@x)) wU4556@p*)))) wU454c@ls/false) (let ((wU455c@t wU454a@t)) (let ((wU455e@ls/false (wU3077@syntax-dispatch wU455c@t '(any . each-any)))) (if (and wU455e@ls/false (apply (lambda (wU4560@c wU4561@ver*) (eq? (wU315d@syntax->datum wU4560@c) 'or)) wU455e@ls/false)) (apply (lambda (wU4564@c wU4565@ver*) (let ((wU4568@p* (map wU4515@version-pred wU4565@ver*))) (lambda (wU456a@x) (exists (lambda (wU456c@p) (wU456c@p wU456a@x)) wU4568@p*)))) wU455e@ls/false) (let ((wU456e@t wU455c@t)) (let ((wU4570@ls/false (wU3077@syntax-dispatch wU456e@t '(any any)))) (if (and wU4570@ls/false (apply (lambda (wU4572@c wU4573@ver) (eq? (wU315d@syntax->datum wU4572@c) 'not)) wU4570@ls/false)) (apply (lambda (wU4576@c wU4577@ver) (let ((wU457a@p (wU4515@version-pred wU4577@ver))) (lambda (wU457c@x) (not (wU457a@p wU457c@x))))) wU4570@ls/false) (let ((wU457e@t wU456e@t)) (let ((wU4580@ls/false (wU3077@syntax-dispatch wU457e@t 'each-any))) (if wU4580@ls/false (apply (lambda (wU4582@sub*) (let ((wU4584@p* (map wU4513@subversion-pred wU4582@sub*))) (lambda (wU4586@x) (let wU458c@f ((wU4588@p* wU4584@p*) (wU4589@x wU4586@x)) (if (null? wU4588@p*) '#t (if (null? wU4589@x) '#f (and ((car wU4588@p*) (car wU4589@x)) (wU458c@f (cdr wU4588@p*) (cdr wU4589@x))))))))) wU4580@ls/false) (let ((wU458e@t wU457e@t)) (let ((wU4590@ls/false (wU3077@syntax-dispatch wU458e@t '_))) (if wU4590@ls/false (apply (lambda () (wU3157@syntax-violation 'import '"invalid version spec" wU450e@spec wU4542@x*)) wU4590@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU458e@t))))))))))))))))))))) (let wU4518@f ((wU4516@x wU450e@spec)) (let ((wU451a@t wU4516@x)) (let ((wU451c@ls/false (wU3077@syntax-dispatch wU451a@t '(each-any)))) (if wU451c@ls/false (apply (lambda (wU451e@version-spec*) (values '() (wU4515@version-pred wU451e@version-spec*))) wU451c@ls/false) (let ((wU4520@t wU451a@t)) (let ((wU4522@ls/false (wU3077@syntax-dispatch wU4520@t '(any . any)))) (if (and wU4522@ls/false (apply (lambda (wU4524@x wU4525@x*) (wU4443@idsyn? wU4524@x)) wU4522@ls/false)) (apply (lambda (wU4528@x wU4529@x*) (call-with-values (lambda () (wU4518@f wU4529@x*)) (lambda (wU4530@wU452d wU4531@wU452f) (let ((wU4534@pred wU4531@wU452f) (wU4535@name wU4530@wU452d)) (values (cons (wU315d@syntax->datum wU4528@x) wU4535@name) wU4534@pred))))) wU4522@ls/false) (let ((wU4538@t wU4520@t)) (let ((wU453a@ls/false (wU3077@syntax-dispatch wU4538@t '()))) (if wU453a@ls/false (apply (lambda () (values '() (lambda (wU453c@x) '#t))) wU453a@ls/false) (let ((wU453e@t wU4538@t)) (let ((wU4540@ls/false (wU3077@syntax-dispatch wU453e@t '_))) (if wU4540@ls/false (apply (lambda () (wU3157@syntax-violation '#f '"invalid import spec" wU450e@spec)) wU4540@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU453e@t)))))))))))))))))) (set! wU4453@import-library (lambda (wU44fe@spec*) (call-with-values (lambda () (wU4451@parse-library-name wU44fe@spec*)) (lambda (wU4504@wU4501 wU4505@wU4503) (let ((wU4508@pred wU4505@wU4503) (wU4509@name wU4504@wU4501)) (begin (if (null? wU4509@name) (wU3157@syntax-violation 'import '"empty library name" wU44fe@spec*) (void)) (let ((wU450c@lib (wU2c7f@wU2ac6@find-library-by-name wU4509@name))) (begin (if (not wU450c@lib) (wU3157@syntax-violation 'import '"cannot find library with required name" wU4509@name) (void)) (if (not (wU4508@pred (wU2c59@wU2a7a@library-version wU450c@lib))) (wU3157@syntax-violation 'import '"library does not satisfy version specification" wU44fe@spec* wU450c@lib) (void)) ((wU30e3@imp-collector) wU450c@lib) (wU2c61@wU2a8a@library-subst wU450c@lib))))))))) (set! wU4455@get-import (lambda (wU4470@spec) (let ((wU4472@t wU4470@spec)) (let ((wU4474@ls/false (wU3077@syntax-dispatch wU4472@t '(any . each-any)))) (if (and wU4474@ls/false (apply (lambda (wU4476@x wU4477@x*) (not (memq (wU315d@syntax->datum wU4476@x) '(for rename except only prefix library)))) wU4474@ls/false)) (apply (lambda (wU447a@x wU447b@x*) (wU4453@import-library (cons wU447a@x wU447b@x*))) wU4474@ls/false) (let ((wU447e@t wU4472@t)) (let ((wU4480@ls/false (wU3077@syntax-dispatch wU447e@t '(any any . #(each (any any)))))) (if (and wU4480@ls/false (apply (lambda (wU4482@rename wU4483@isp wU4484@old* wU4485@new*) (and (eq? (wU315d@syntax->datum wU4482@rename) 'rename) (for-all wU4443@idsyn? wU4484@old*) (for-all wU4443@idsyn? wU4485@new*))) wU4480@ls/false)) (apply (lambda (wU448a@rename wU448b@isp wU448c@old* wU448d@new*) (let ((wU4492@subst (wU4455@get-import wU448b@isp)) (wU4493@old* (map wU315d@syntax->datum wU448c@old*)) (wU4494@new* (map wU315d@syntax->datum wU448d@new*))) (let ((wU4498@old-label* (wU444b@find* wU4493@old* wU4492@subst))) (let ((wU449a@subst (wU444d@rem* wU4493@old* wU4492@subst))) (wU4447@merge-substs (map cons wU4494@new* wU4498@old-label*) wU449a@subst))))) wU4480@ls/false) (let ((wU449c@t wU447e@t)) (let ((wU449e@ls/false (wU3077@syntax-dispatch wU449c@t '(any any . each-any)))) (if (and wU449e@ls/false (apply (lambda (wU44a0@except wU44a1@isp wU44a2@sym*) (and (eq? (wU315d@syntax->datum wU44a0@except) 'except) (for-all wU4443@idsyn? wU44a2@sym*))) wU449e@ls/false)) (apply (lambda (wU44a6@except wU44a7@isp wU44a8@sym*) (let ((wU44ac@subst (wU4455@get-import wU44a7@isp))) (wU444d@rem* (map wU315d@syntax->datum wU44a8@sym*) wU44ac@subst))) wU449e@ls/false) (let ((wU44ae@t wU449c@t)) (let ((wU44b0@ls/false (wU3077@syntax-dispatch wU44ae@t '(any any . each-any)))) (if (and wU44b0@ls/false (apply (lambda (wU44b2@only wU44b3@isp wU44b4@sym*) (and (eq? (wU315d@syntax->datum wU44b2@only) 'only) (for-all wU4443@idsyn? wU44b4@sym*))) wU44b0@ls/false)) (apply (lambda (wU44b8@only wU44b9@isp wU44ba@sym*) (let ((wU44be@subst (wU4455@get-import wU44b9@isp)) (wU44bf@sym* (map wU315d@syntax->datum wU44ba@sym*))) (let ((wU44c2@sym* (wU444f@remove-dups wU44bf@sym*))) (let ((wU44c4@lab* (wU444b@find* wU44c2@sym* wU44be@subst))) (map cons wU44c2@sym* wU44c4@lab*))))) wU44b0@ls/false) (let ((wU44c6@t wU44ae@t)) (let ((wU44c8@ls/false (wU3077@syntax-dispatch wU44c6@t '(any any any)))) (if (and wU44c8@ls/false (apply (lambda (wU44ca@prefix wU44cb@isp wU44cc@p) (and (eq? (wU315d@syntax->datum wU44ca@prefix) 'prefix) (wU4443@idsyn? wU44cc@p))) wU44c8@ls/false)) (apply (lambda (wU44d0@prefix wU44d1@isp wU44d2@p) (let ((wU44d6@subst (wU4455@get-import wU44d1@isp)) (wU44d7@prefix (symbol->string (wU315d@syntax->datum wU44d2@p)))) (map (lambda (wU44da@x) (cons (string->symbol (string-append wU44d7@prefix (symbol->string (car wU44da@x)))) (cdr wU44da@x))) wU44d6@subst))) wU44c8@ls/false) (let ((wU44dc@t wU44c6@t)) (let ((wU44de@ls/false (wU3077@syntax-dispatch wU44dc@t '(any each-any)))) (if (and wU44de@ls/false (apply (lambda (wU44e0@library wU44e1@spec*) (eq? (wU315d@syntax->datum wU44e0@library) 'library)) wU44de@ls/false)) (apply (lambda (wU44e4@library wU44e5@spec*) (wU4453@import-library wU44e5@spec*)) wU44de@ls/false) (let ((wU44e8@t wU44dc@t)) (let ((wU44ea@ls/false (wU3077@syntax-dispatch wU44e8@t '(any any . any)))) (if (and wU44ea@ls/false (apply (lambda (wU44ec@for wU44ed@isp wU44ee@rest) (eq? (wU315d@syntax->datum wU44ec@for) 'for)) wU44ea@ls/false)) (apply (lambda (wU44f2@for wU44f3@isp wU44f4@rest) (wU4455@get-import wU44f3@isp)) wU44ea@ls/false) (let ((wU44f8@t wU44e8@t)) (let ((wU44fa@ls/false (wU3077@syntax-dispatch wU44f8@t 'any))) (if wU44fa@ls/false (apply (lambda (wU44fc@spec) (wU3157@syntax-violation 'import '"invalid import spec" wU44fc@spec)) wU44fa@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU44f8@t))))))))))))))))))))))))))) (set! wU4457@add-imports! (lambda (wU4460@imp wU4461@h) (let ((wU4464@subst (wU4455@get-import wU4460@imp))) (for-each (lambda (wU4466@x) (let ((wU4468@name (car wU4466@x)) (wU4469@label (cdr wU4466@x))) (let ((wU446c@t (hashtable-ref wU4461@h wU4468@name '#f))) (if wU446c@t ((lambda (wU446e@l) (if (not (eq? wU446e@l wU4469@label)) (wU4445@dup-error wU4468@name) (void))) wU446c@t) (hashtable-set! wU4461@h wU4468@name wU4469@label))))) wU4464@subst)))) (lambda (wU4458@imp*) (let wU445e@f ((wU445a@imp* wU4458@imp*) (wU445b@h (make-eq-hashtable))) (if (null? wU445a@imp*) (hashtable-entries wU445b@h) (begin (wU4457@add-imports! (car wU445a@imp*) wU445b@h) (wU445e@f (cdr wU445a@imp*) wU445b@h)))))))) (set! wU4b7a@wU30d9@parse-import-spec* wU30d9@parse-import-spec*) (set! wU30db@make-top-rib (lambda (wU464e@names wU464f@labels) (let ((wU4652@rib (wU2e24@make-empty-rib))) (begin (vector-for-each (lambda (wU4654@name wU4655@label) (begin (if (not (symbol? wU4654@name)) (error 'make-top-rib '"BUG: not a symbol" wU4654@name) (void)) (wU2e28@extend-rib/nc! wU4652@rib (make-simple-struct 'stx '5 (list wU4654@name wU2df4@top-mark* '() '())) wU4655@label))) wU464e@names wU464f@labels) wU4652@rib)))) (set! wU4b7b@wU30db@make-top-rib wU30db@make-top-rib) (set! wU30dd@make-collector (lambda () (let ((wU4658@ls '())) (lambda wU465c (let ((wU465d (length wU465c))) (if (= wU465d '0) (apply (lambda () wU4658@ls) wU465c) (if (= wU465d '1) (apply (lambda (wU465a@x) (set! wU4658@ls (wU2ded@set-cons wU465a@x wU4658@ls))) wU465c) (error 'apply '"invalid arg count")))))))) (set! wU4b7c@wU30dd@make-collector wU30dd@make-collector) (set! wU30df@inv-collector (wU29ba@wU2899@make-parameter (lambda wU465e@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (wU4660@x) (begin (if (not (procedure? wU4660@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" wU4660@x) (void)) wU4660@x)))) (set! wU4b7d@wU30df@inv-collector wU30df@inv-collector) (set! wU30e1@vis-collector (wU29ba@wU2899@make-parameter (lambda wU4662@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (wU4664@x) (begin (if (not (procedure? wU4664@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" wU4664@x) (void)) wU4664@x)))) (set! wU4b7e@wU30e1@vis-collector wU30e1@vis-collector) (set! wU30e3@imp-collector (wU29ba@wU2899@make-parameter (lambda wU4666@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (wU4668@x) (begin (if (not (procedure? wU4668@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" wU4668@x) (void)) wU4668@x)))) (set! wU4b7f@wU30e3@imp-collector wU30e3@imp-collector) (set! wU30e5@chi-library-internal (lambda (wU466a@e* wU466b@rib wU466c@top?) (call-with-values (lambda () (wU30cf@chi-body* wU466a@e* '() '() '() '() '() '() '() wU466b@rib wU466c@top?)) (lambda (wU4680@wU4671 wU4681@wU4673 wU4682@wU4675 wU4683@wU4677 wU4684@wU4679 wU4685@wU467b wU4686@wU467d wU4687@wU467f) (let ((wU4690@exp* wU4687@wU467f) (wU4691@_kwd* wU4686@wU467d) (wU4692@mod** wU4685@wU467b) (wU4693@rhs* wU4684@wU4679) (wU4694@lex* wU4683@wU4677) (wU4695@mr wU4682@wU4675) (wU4696@r wU4681@wU4673) (wU4697@e* wU4680@wU4671)) (values (append (apply append (reverse wU4692@mod**)) wU4697@e*) wU4696@r wU4695@mr (reverse wU4694@lex*) (reverse wU4693@rhs*) wU4690@exp*)))))) (set! wU4b80@wU30e5@chi-library-internal wU30e5@chi-library-internal) (set! wU30e7@chi-interaction-expr (lambda (wU46a0@e wU46a1@rib wU46a2@r) (call-with-values (lambda () (wU30cf@chi-body* (list wU46a0@e) wU46a2@r wU46a2@r '() '() '() '() '() wU46a1@rib '#t)) (lambda (wU46b6@wU46a7 wU46b7@wU46a9 wU46b8@wU46ab wU46b9@wU46ad wU46ba@wU46af wU46bb@wU46b1 wU46bc@wU46b3 wU46bd@wU46b5) (let ((wU46c6@_exp* wU46bd@wU46b5) (wU46c7@_kwd* wU46bc@wU46b3) (wU46c8@mod** wU46bb@wU46b1) (wU46c9@rhs* wU46ba@wU46af) (wU46ca@lex* wU46b9@wU46ad) (wU46cb@mr wU46b8@wU46ab) (wU46cc@r wU46b7@wU46a9) (wU46cd@e* wU46b6@wU46a7)) (let ((wU46d6@e* (wU30a7@expand-interaction-rhs*/init* (reverse wU46ca@lex*) (reverse wU46c9@rhs*) (append (apply append (reverse wU46c8@mod**)) wU46cd@e*) wU46cc@r wU46cb@mr))) (let ((wU46d8@e (if (null? wU46d6@e*) (wU2dd6@wU2d31@build-void) (if (null? (cdr wU46d6@e*)) (car wU46d6@e*) (wU2dd5@wU2d2f@build-sequence '#f wU46d6@e*))))) (values wU46d8@e wU46cc@r)))))))) (set! wU4b81@wU30e7@chi-interaction-expr wU30e7@chi-interaction-expr) (set! wU30e9@library-body-expander (lambda (wU46da@name wU46db@main-exp* wU46dc@imp* wU46dd@b* wU46de@top?) (let ((wU46e5@itc '#f)) (begin (set! wU46e5@itc (wU30dd@make-collector)) (let ((wU46ee@wU46e7 wU30e3@imp-collector) (wU46ef@wU46e9 wU3167@top-level-context) (wU46f0@wU46eb wU46e5@itc) (wU46f1@wU46ed '#f)) (let ((wU46f6@swap (lambda () (begin (let ((wU46f8@t (wU46ee@wU46e7))) (begin (wU46ee@wU46e7 wU46f0@wU46eb) (set! wU46f0@wU46eb wU46f8@t))) (let ((wU46fa@t (wU46ef@wU46e9))) (begin (wU46ef@wU46e9 wU46f1@wU46ed) (set! wU46f1@wU46ed wU46fa@t))))))) (dynamic-wind wU46f6@swap (lambda () (call-with-values (lambda () (wU30d9@parse-import-spec* wU46dc@imp*)) (lambda (wU4700@wU46fd wU4701@wU46ff) (let ((wU4704@subst-labels wU4701@wU46ff) (wU4705@subst-names wU4700@wU46fd)) (let ((wU4708@rib (wU30db@make-top-rib wU4705@subst-names wU4704@subst-labels))) (let ((wU470b@wrap '#f)) (begin (set! wU470b@wrap (lambda (wU4786@x) (make-simple-struct 'stx '5 (list wU4786@x wU2df4@top-mark* (list wU4708@rib) '())))) (let ((wU470c@b* (map wU470b@wrap wU46dd@b*)) (wU470d@main-exp* (map wU470b@wrap wU46db@main-exp*)) (wU470e@rtc (wU30dd@make-collector)) (wU470f@vtc (wU30dd@make-collector))) (let ((wU471c@wU4715 wU30df@inv-collector) (wU471d@wU4717 wU30e1@vis-collector) (wU471e@wU4719 wU470e@rtc) (wU471f@wU471b wU470f@vtc)) (let ((wU4724@swap (lambda () (begin (let ((wU4726@t (wU471c@wU4715))) (begin (wU471c@wU4715 wU471e@wU4719) (set! wU471e@wU4719 wU4726@t))) (let ((wU4728@t (wU471d@wU4717))) (begin (wU471d@wU4717 wU471f@wU471b) (set! wU471f@wU471b wU4728@t))))))) (dynamic-wind wU4724@swap (lambda () (call-with-values (lambda () (wU30e5@chi-library-internal wU470c@b* wU4708@rib wU46de@top?)) (lambda (wU4736@wU472b wU4737@wU472d wU4738@wU472f wU4739@wU4731 wU473a@wU4733 wU473b@wU4735) (let ((wU4742@internal-exp* wU473b@wU4735) (wU4743@rhs* wU473a@wU4733) (wU4744@lex* wU4739@wU4731) (wU4745@mr wU4738@wU472f) (wU4746@r wU4737@wU472d) (wU4747@init* wU4736@wU472b)) (call-with-values (lambda () (wU30d3@parse-exports (append wU470d@main-exp* wU4742@internal-exp*))) (lambda (wU4752@wU474f wU4753@wU4751) (let ((wU4756@exp-id* wU4753@wU4751) (wU4757@exp-name* wU4752@wU474f)) (begin (wU2e2c@seal-rib! wU4708@rib) (let ((wU475a@init* (wU3095@chi-expr* wU4747@init* wU4746@r wU4745@mr))) (let ((wU475c@rhs* (wU30a9@chi-rhs* wU4743@rhs* wU4746@r wU4745@mr))) (begin (wU2e2e@unseal-rib! wU4708@rib) (let ((wU475e@loc* (map wU2dfa@gen-global wU4744@lex*)) (wU475f@export-subst (wU3141@make-export-subst wU4757@exp-name* wU4756@exp-id*))) (let ((wU4763@errstr '#f)) (begin (set! wU4763@errstr '"attempt to export mutated variable") (call-with-values (lambda () (wU3143@make-export-env/macros wU4744@lex* wU475e@loc* wU4746@r)) (lambda (wU476a@wU4765 wU476b@wU4767 wU476c@wU4769) (let ((wU4770@macro* wU476c@wU4769) (wU4771@global* wU476b@wU4767) (wU4772@export-env wU476a@wU4765)) (begin (for-each (lambda (wU4776@s) (let ((wU4778@name (car wU4776@s)) (wU4779@label (cdr wU4776@s))) (let ((wU477c@p (assq wU4779@label wU4772@export-env))) (if wU477c@p (let ((wU477e@b (cdr wU477c@p))) (let ((wU4780@type (car wU477e@b))) (if (eq? wU4780@type 'mutable) (wU3157@syntax-violation 'export wU4763@errstr wU4778@name) (void)))) (void))))) wU475f@export-subst) (let ((wU4782@invoke-body (wU2ddb@wU2d3b@build-library-letrec* '#f wU46da@name wU4744@lex* wU475e@loc* wU475c@rhs* (if (null? wU475a@init*) (wU2dd6@wU2d31@build-void) (wU2dd5@wU2d2f@build-sequence '#f wU475a@init*)))) (wU4783@invoke-definitions (map wU2dd2@wU2c8e@build-global-define (map cdr wU4771@global*)))) (values (wU46e5@itc) (wU470e@rtc) (wU470f@vtc) (wU2dd5@wU2d2f@build-sequence '#f (append wU4783@invoke-definitions (list wU4782@invoke-body))) wU4770@macro* wU475f@export-subst wU4772@export-env)))))))))))))))))))) wU4724@swap))))))))))) wU46f6@swap))))))) (set! wU4b82@wU30e9@library-body-expander wU30e9@library-body-expander) (set! wU30eb@core-library-expander (lambda (wU4788@e wU4789@verify-name) (call-with-values (lambda () (wU30d7@parse-library wU4788@e)) (lambda (wU4794@wU478d wU4795@wU478f wU4796@wU4791 wU4797@wU4793) (let ((wU479c@b* wU4797@wU4793) (wU479d@imp* wU4796@wU4791) (wU479e@exp* wU4795@wU478f) (wU479f@name* wU4794@wU478d)) (call-with-values (lambda () (wU30d5@parse-library-name wU479f@name*)) (lambda (wU47a8@wU47a5 wU47a9@wU47a7) (let ((wU47ac@ver wU47a9@wU47a7) (wU47ad@name wU47a8@wU47a5)) (begin (wU4789@verify-name wU47ad@name) (call-with-values (lambda () (wU30e9@library-body-expander wU47ad@name wU479e@exp* wU479d@imp* wU479c@b* '#f)) (lambda (wU47be@wU47b1 wU47bf@wU47b3 wU47c0@wU47b5 wU47c1@wU47b7 wU47c2@wU47b9 wU47c3@wU47bb wU47c4@wU47bd) (let ((wU47cc@export-env wU47c4@wU47bd) (wU47cd@export-subst wU47c3@wU47bb) (wU47ce@visit-code wU47c2@wU47b9) (wU47cf@invoke-code wU47c1@wU47b7) (wU47d0@visit-req* wU47c0@wU47b5) (wU47d1@invoke-req* wU47bf@wU47b3) (wU47d2@imp* wU47be@wU47b1)) (values wU47ad@name wU47ac@ver wU47d2@imp* wU47d1@invoke-req* wU47d0@visit-req* wU47cf@invoke-code wU47ce@visit-code wU47cd@export-subst wU47cc@export-env))))))))))))) (set! wU4b83@wU30eb@core-library-expander wU30eb@core-library-expander) (set! wU30ed@parse-top-level-program (lambda (wU47da@e*) (let ((wU47dc@t wU47da@e*)) (let ((wU47de@ls/false (wU3077@syntax-dispatch wU47dc@t '((any . each-any) . each-any)))) (if (and wU47de@ls/false (apply (lambda (wU47e0@import wU47e1@imp* wU47e2@b*) (eq? (wU315d@syntax->datum wU47e0@import) 'import)) wU47de@ls/false)) (apply (lambda (wU47e6@import wU47e7@imp* wU47e8@b*) (values wU47e7@imp* wU47e8@b*)) wU47de@ls/false) (let ((wU47ec@t wU47dc@t)) (let ((wU47ee@ls/false (wU3077@syntax-dispatch wU47ec@t '((any . any) . any)))) (if (and wU47ee@ls/false (apply (lambda (wU47f0@import wU47f1@x wU47f2@y) (eq? (wU315d@syntax->datum wU47f0@import) 'import)) wU47ee@ls/false)) (apply (lambda (wU47f6@import wU47f7@x wU47f8@y) (wU3157@syntax-violation 'expander '"invalid syntax of top-level program" (wU2e6a@syntax-car wU47da@e*))) wU47ee@ls/false) (let ((wU47fc@t wU47ec@t)) (let ((wU47fe@ls/false (wU3077@syntax-dispatch wU47fc@t '_))) (if wU47fe@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) wU47fe@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU47fc@t)))))))))))) (set! wU4b84@wU30ed@parse-top-level-program wU30ed@parse-top-level-program) (set! wU30ef@top-level-expander (lambda (wU4800@e*) (call-with-values (lambda () (wU30ed@parse-top-level-program wU4800@e*)) (lambda (wU4806@wU4803 wU4807@wU4805) (let ((wU480a@b* wU4807@wU4805) (wU480b@imp* wU4806@wU4803)) (call-with-values (lambda () (wU30e9@library-body-expander '() '() wU480b@imp* wU480a@b* '#t)) (lambda (wU481c@wU480f wU481d@wU4811 wU481e@wU4813 wU481f@wU4815 wU4820@wU4817 wU4821@wU4819 wU4822@wU481b) (let ((wU482a@export-env wU4822@wU481b) (wU482b@export-subst wU4821@wU4819) (wU482c@visit-code wU4820@wU4817) (wU482d@invoke-code wU481f@wU4815) (wU482e@visit-req* wU481e@wU4813) (wU482f@invoke-req* wU481d@wU4811) (wU4830@imp* wU481c@wU480f)) (values wU482f@invoke-req* wU482d@invoke-code))))))))) (set! wU4b85@wU30ef@top-level-expander wU30ef@top-level-expander) (set! wU30f1@rp (wU29b7@wU2893@make-record-printer 'env (lambda (wU4838@x wU4839@p wU483a@wr) (display '"#<environment>" wU4839@p)))) (set! wU4b86@wU30f1@rp wU30f1@rp) (set! wU30fb@env? (lambda (wU483e@x) (and (simple-struct? wU483e@x) (eq? (simple-struct-name wU483e@x) 'env)))) (set! wU4b87@wU30fb@env? wU30fb@env?) (set! wU30fd@env-names (lambda (wU4840@x) (simple-struct-ref wU4840@x '0))) (set! wU4b88@wU30fd@env-names wU30fd@env-names) (set! wU30ff@set-env-names! (lambda (wU4842@x wU4843@val) (simple-struct-set! wU4842@x '0 wU4843@val))) (set! wU4b89@wU30ff@set-env-names! wU30ff@set-env-names!) (set! wU3101@env-labels (lambda (wU4846@x) (simple-struct-ref wU4846@x '1))) (set! wU4b8a@wU3101@env-labels wU3101@env-labels) (set! wU3103@set-env-labels! (lambda (wU4848@x wU4849@val) (simple-struct-set! wU4848@x '1 wU4849@val))) (set! wU4b8b@wU3103@set-env-labels! wU3103@set-env-labels!) (set! wU3105@env-itc (lambda (wU484c@x) (simple-struct-ref wU484c@x '2))) (set! wU4b8c@wU3105@env-itc wU3105@env-itc) (set! wU3107@set-env-itc! (lambda (wU484e@x wU484f@val) (simple-struct-set! wU484e@x '2 wU484f@val))) (set! wU4b8d@wU3107@set-env-itc! wU3107@set-env-itc!) (set! wU3109@dummy '3) (set! wU4b8e@wU3109@dummy wU3109@dummy) (set! wU310b@rp (wU29b7@wU2893@make-record-printer 'interaction-env (lambda (wU4852@x wU4853@p wU4854@wr) (display '"#<environment>" wU4853@p)))) (set! wU4b8f@wU310b@rp wU310b@rp) (set! wU3115@interaction-env? (lambda (wU4858@x) (and (simple-struct? wU4858@x) (eq? (simple-struct-name wU4858@x) 'interaction-env)))) (set! wU4b90@wU3115@interaction-env? wU3115@interaction-env?) (set! wU3117@interaction-env-rib (lambda (wU485a@x) (simple-struct-ref wU485a@x '0))) (set! wU4b91@wU3117@interaction-env-rib wU3117@interaction-env-rib) (set! wU3119@set-interaction-env-rib! (lambda (wU485c@x wU485d@val) (simple-struct-set! wU485c@x '0 wU485d@val))) (set! wU4b92@wU3119@set-interaction-env-rib! wU3119@set-interaction-env-rib!) (set! wU311b@interaction-env-r (lambda (wU4860@x) (simple-struct-ref wU4860@x '1))) (set! wU4b93@wU311b@interaction-env-r wU311b@interaction-env-r) (set! wU311d@set-interaction-env-r! (lambda (wU4862@x wU4863@val) (simple-struct-set! wU4862@x '1 wU4863@val))) (set! wU4b94@wU311d@set-interaction-env-r! wU311d@set-interaction-env-r!) (set! wU311f@interaction-env-locs (lambda (wU4866@x) (simple-struct-ref wU4866@x '2))) (set! wU4b95@wU311f@interaction-env-locs wU311f@interaction-env-locs) (set! wU3121@set-interaction-env-locs! (lambda (wU4868@x wU4869@val) (simple-struct-set! wU4868@x '2 wU4869@val))) (set! wU4b96@wU3121@set-interaction-env-locs! wU3121@set-interaction-env-locs!) (set! wU3123@dummy '3) (set! wU4b97@wU3123@dummy wU3123@dummy) (set! wU3125@interaction-environment-symbols (lambda () (wU312d@environment-symbols (wU3165@interaction-environment)))) (set! wU4b98@wU3125@interaction-environment-symbols wU3125@interaction-environment-symbols) (set! wU3127@environment-bindings (lambda (wU486c@e) (vector->list (vector-map (lambda (wU486e@name wU486f@label) (wU3129@parse-binding (cons wU486e@name (wU2c85@wU2ad2@imported-label->binding wU486f@label)))) (wU30fd@env-names wU486c@e) (wU3101@env-labels wU486c@e))))) (set! wU4b99@wU3127@environment-bindings wU3127@environment-bindings) (set! wU3129@parse-binding (lambda (wU4872@b) (cons (car wU4872@b) (let ((wU4874@t (cadr wU4872@b))) (if (memv wU4874@t '(core-prim global)) 'procedure (if (memv wU4874@t '(core-macro macro global-macro)) 'syntax (if (memv wU4874@t '($core-rtd)) 'record (if (eq? (car wU4872@b) (cadr wU4872@b)) 'syntax 'unknown)))))))) (set! wU4b9a@wU3129@parse-binding wU3129@parse-binding) (set! wU312b@environment? (lambda (wU4876@x) (or (wU30fb@env? wU4876@x) (wU3115@interaction-env? wU4876@x)))) (set! wU4b9b@wU312b@environment? wU312b@environment?) (set! wU312d@environment-symbols (lambda (wU4878@x) (if (wU30fb@env? wU4878@x) (vector->list (wU30fd@env-names wU4878@x)) (if (wU3115@interaction-env? wU4878@x) (map values (wU2e0e@rib-sym* (wU3117@interaction-env-rib wU4878@x))) (assertion-violation 'environment-symbols '"not an environment" wU4878@x))))) (set! wU4b9c@wU312d@environment-symbols wU312d@environment-symbols) (set! wU312f@environment (lambda wU487a@imp* (let ((wU487c@itc (wU30dd@make-collector))) (let ((wU4882@wU487f wU30e3@imp-collector) (wU4883@wU4881 wU487c@itc)) (let ((wU4886@swap (lambda () (let ((wU4888@t (wU4882@wU487f))) (begin (wU4882@wU487f wU4883@wU4881) (set! wU4883@wU4881 wU4888@t)))))) (dynamic-wind wU4886@swap (lambda () (call-with-values (lambda () (wU30d9@parse-import-spec* wU487a@imp*)) (lambda (wU488e@wU488b wU488f@wU488d) (let ((wU4892@subst-labels wU488f@wU488d) (wU4893@subst-names wU488e@wU488b)) (make-simple-struct 'env '4 (list wU4893@subst-names wU4892@subst-labels wU487c@itc)))))) wU4886@swap)))))) (set! wU4b9d@wU312f@environment wU312f@environment) (set! wU3131@null-environment (lambda (wU4896@n) (begin (if (not (eqv? wU4896@n '5)) (assertion-violation 'null-environment '"not 5" wU4896@n) (void)) (wU312f@environment '(psyntax null-environment-5))))) (set! wU4b9e@wU3131@null-environment wU3131@null-environment) (set! wU3133@scheme-report-environment (lambda (wU4898@n) (begin (if (not (eqv? wU4898@n '5)) (assertion-violation 'scheme-report-environment '"not 5" wU4898@n) (void)) (wU312f@environment '(psyntax scheme-report-environment-5))))) (set! wU4b9f@wU3133@scheme-report-environment wU3133@scheme-report-environment) (set! wU3135@expand (lambda (wU489a@x wU489b@env) (if (wU30fb@env? wU489b@env) (let ((wU489e@rib (wU30db@make-top-rib (wU30fd@env-names wU489b@env) (wU3101@env-labels wU489b@env)))) (let ((wU48a0@x (make-simple-struct 'stx '5 (list wU489a@x wU2df4@top-mark* (list wU489e@rib) '()))) (wU48a1@itc (wU3105@env-itc wU489b@env)) (wU48a2@rtc (wU30dd@make-collector)) (wU48a3@vtc (wU30dd@make-collector))) (let ((wU48a8@x (let ((wU48ba@wU48ab wU3167@top-level-context) (wU48bb@wU48ad wU30df@inv-collector) (wU48bc@wU48af wU30e1@vis-collector) (wU48bd@wU48b1 wU30e3@imp-collector) (wU48be@wU48b3 '#f) (wU48bf@wU48b5 wU48a2@rtc) (wU48c0@wU48b7 wU48a3@vtc) (wU48c1@wU48b9 wU48a1@itc)) (let ((wU48ca@swap (lambda () (begin (let ((wU48cc@t (wU48ba@wU48ab))) (begin (wU48ba@wU48ab wU48be@wU48b3) (set! wU48be@wU48b3 wU48cc@t))) (let ((wU48ce@t (wU48bb@wU48ad))) (begin (wU48bb@wU48ad wU48bf@wU48b5) (set! wU48bf@wU48b5 wU48ce@t))) (let ((wU48d0@t (wU48bc@wU48af))) (begin (wU48bc@wU48af wU48c0@wU48b7) (set! wU48c0@wU48b7 wU48d0@t))) (let ((wU48d2@t (wU48bd@wU48b1))) (begin (wU48bd@wU48b1 wU48c1@wU48b9) (set! wU48c1@wU48b9 wU48d2@t))))))) (dynamic-wind wU48ca@swap (lambda () (wU3099@chi-expr wU48a0@x '() '())) wU48ca@swap))))) (begin (wU2e2c@seal-rib! wU489e@rib) (values wU48a8@x (wU48a2@rtc)))))) (if (wU3115@interaction-env? wU489b@env) (let ((wU48d4@rib (wU3117@interaction-env-rib wU489b@env)) (wU48d5@r (wU311b@interaction-env-r wU489b@env)) (wU48d6@rtc (wU30dd@make-collector))) (let ((wU48da@x (make-simple-struct 'stx '5 (list wU489a@x wU2df4@top-mark* (list wU48d4@rib) '())))) (call-with-values (lambda () (let ((wU48f0@wU48e1 wU3167@top-level-context) (wU48f1@wU48e3 wU30df@inv-collector) (wU48f2@wU48e5 wU30e1@vis-collector) (wU48f3@wU48e7 wU30e3@imp-collector) (wU48f4@wU48e9 wU489b@env) (wU48f5@wU48eb wU48d6@rtc) (wU48f6@wU48ed (wU30dd@make-collector)) (wU48f7@wU48ef (wU30dd@make-collector))) (let ((wU4900@swap (lambda () (begin (let ((wU4902@t (wU48f0@wU48e1))) (begin (wU48f0@wU48e1 wU48f4@wU48e9) (set! wU48f4@wU48e9 wU4902@t))) (let ((wU4904@t (wU48f1@wU48e3))) (begin (wU48f1@wU48e3 wU48f5@wU48eb) (set! wU48f5@wU48eb wU4904@t))) (let ((wU4906@t (wU48f2@wU48e5))) (begin (wU48f2@wU48e5 wU48f6@wU48ed) (set! wU48f6@wU48ed wU4906@t))) (let ((wU4908@t (wU48f3@wU48e7))) (begin (wU48f3@wU48e7 wU48f7@wU48ef) (set! wU48f7@wU48ef wU4908@t))))))) (dynamic-wind wU4900@swap (lambda () (wU30e7@chi-interaction-expr wU48da@x wU48d4@rib wU48d5@r)) wU4900@swap)))) (lambda (wU490a@wU48dd wU490b@wU48df) (let ((wU490e@r^ wU490b@wU48df) (wU490f@e wU490a@wU48dd)) (begin (wU311d@set-interaction-env-r! wU489b@env wU490e@r^) (values wU490f@e (wU48d6@rtc)))))))) (assertion-violation 'expand '"not an environment" wU489b@env))))) (set! wU4ba0@wU3135@expand wU3135@expand) (set! wU3137@eval (lambda (wU4912@x wU4913@env) (begin (if (not (wU312b@environment? wU4913@env)) (error 'eval '"not an environment" wU4913@env) (void)) (call-with-values (lambda () (wU3135@expand wU4912@x wU4913@env)) (lambda (wU491a@wU4917 wU491b@wU4919) (let ((wU491e@invoke-req* wU491b@wU4919) (wU491f@x wU491a@wU4917)) (begin (for-each wU2c86@wU2ad4@invoke-library wU491e@invoke-req*) (eval-core (wU2a10@wU29c8@expanded->core wU491f@x))))))))) (set! wU4ba1@wU3137@eval wU3137@eval) (set! wU3139@library-expander (lambda wU4990 (let ((wU4991 (length wU4990))) (if (= wU4991 '3) (apply (lambda (wU4922@x wU4923@filename wU4924@verify-name) (let ((wU4929@build-visit-code '#f) (wU492b@visit! '#f)) (begin (set! wU4929@build-visit-code (lambda (wU497e@macro*) (if (null? wU497e@macro*) (wU2dd6@wU2d31@build-void) (wU2dd5@wU2d2f@build-sequence '#f (map (lambda (wU4980@x) (let ((wU4982@loc (car wU4980@x)) (wU4983@src (cddr wU4980@x))) (list 'set! wU4982@loc wU4983@src))) wU497e@macro*))))) (set! wU492b@visit! (lambda (wU4976@macro*) (for-each (lambda (wU4978@x) (let ((wU497a@loc (car wU4978@x)) (wU497b@proc (cadr wU4978@x))) (set-symbol-value! wU497a@loc wU497b@proc))) wU4976@macro*))) (call-with-values (lambda () (wU30eb@core-library-expander wU4922@x wU4924@verify-name)) (lambda (wU493e@wU492d wU493f@wU492f wU4940@wU4931 wU4941@wU4933 wU4942@wU4935 wU4943@wU4937 wU4944@wU4939 wU4945@wU493b wU4946@wU493d) (let ((wU4950@export-env wU4946@wU493d) (wU4951@export-subst wU4945@wU493b) (wU4952@macro* wU4944@wU4939) (wU4953@invoke-code wU4943@wU4937) (wU4954@vis* wU4942@wU4935) (wU4955@inv* wU4941@wU4933) (wU4956@imp* wU4940@wU4931) (wU4957@ver wU493f@wU492f) (wU4958@name wU493e@wU492d)) (let ((wU4962@id (gensym)) (wU4963@name wU4958@name) (wU4964@ver wU4957@ver) (wU4965@imp* (map wU2c8a@wU2adc@library-spec wU4956@imp*)) (wU4966@vis* (map wU2c8a@wU2adc@library-spec wU4954@vis*)) (wU4967@inv* (map wU2c8a@wU2adc@library-spec wU4955@inv*)) (wU4968@visit-proc (lambda () (wU492b@visit! wU4952@macro*))) (wU4969@invoke-proc (lambda () (eval-core (wU2a10@wU29c8@expanded->core wU4953@invoke-code)))) (wU496a@visit-code (wU4929@build-visit-code wU4952@macro*)) (wU496b@invoke-code wU4953@invoke-code)) (begin (wU2c84@wU2ad0@install-library wU4962@id wU4963@name wU4964@ver wU4965@imp* wU4966@vis* wU4967@inv* wU4951@export-subst wU4950@export-env wU4968@visit-proc wU4969@invoke-proc wU496a@visit-code wU496b@invoke-code '#t wU4923@filename) (values wU4962@id wU4963@name wU4964@ver wU4965@imp* wU4966@vis* wU4967@inv* wU496b@invoke-code wU496a@visit-code wU4951@export-subst wU4950@export-env))))))))) wU4990) (if (= wU4991 '2) (apply (lambda (wU4986@x wU4987@filename) (wU3139@library-expander wU4986@x wU4987@filename (lambda (wU498a@x) (values)))) wU4990) (if (= wU4991 '1) (apply (lambda (wU498c@x) (wU3139@library-expander wU498c@x '#f (lambda (wU498e@x) (values)))) wU4990) (error 'apply '"invalid arg count"))))))) (set! wU4ba2@wU3139@library-expander wU3139@library-expander) (set! wU313b@boot-library-expand (lambda (wU4992@x) (call-with-values (lambda () (wU3139@library-expander wU4992@x)) (lambda (wU49a8@wU4995 wU49a9@wU4997 wU49aa@wU4999 wU49ab@wU499b wU49ac@wU499d wU49ad@wU499f wU49ae@wU49a1 wU49af@wU49a3 wU49b0@wU49a5 wU49b1@wU49a7) (let ((wU49bc@export-env wU49b1@wU49a7) (wU49bd@export-subst wU49b0@wU49a5) (wU49be@visit-code wU49af@wU49a3) (wU49bf@invoke-code wU49ae@wU49a1) (wU49c0@inv* wU49ad@wU499f) (wU49c1@vis* wU49ac@wU499d) (wU49c2@imp* wU49ab@wU499b) (wU49c3@ver wU49aa@wU4999) (wU49c4@name wU49a9@wU4997) (wU49c5@id wU49a8@wU4995)) (values wU49c4@name wU49bf@invoke-code wU49bd@export-subst wU49bc@export-env)))))) (set! wU4ba3@wU313b@boot-library-expand wU313b@boot-library-expand) (set! wU313d@rev-map-append (lambda (wU49d0@f wU49d1@ls wU49d2@ac) (if (null? wU49d1@ls) wU49d2@ac (wU313d@rev-map-append wU49d0@f (cdr wU49d1@ls) (cons (wU49d0@f (car wU49d1@ls)) wU49d2@ac))))) (set! wU4ba4@wU313d@rev-map-append wU313d@rev-map-append) (set! wU313f@build-exports (lambda (wU49d6@lex*+loc* wU49d7@init*) (wU2dd5@wU2d2f@build-sequence '#f (cons (wU2dd6@wU2d31@build-void) (wU313d@rev-map-append (lambda (wU49da@x) (list 'set! (cdr wU49da@x) (car wU49da@x))) wU49d6@lex*+loc* wU49d7@init*))))) (set! wU4ba5@wU313f@build-exports wU313f@build-exports) (set! wU3141@make-export-subst (lambda (wU49dc@name* wU49dd@id*) (map (lambda (wU49e0@name wU49e1@id) (let ((wU49e4@label (wU2e86@id->label wU49e1@id))) (begin (if (not wU49e4@label) (wU3157@syntax-violation '#f '"cannot export unbound identifier" wU49e1@id) (void)) (cons wU49e0@name wU49e4@label)))) wU49dc@name* wU49dd@id*))) (set! wU4ba6@wU3141@make-export-subst wU3141@make-export-subst) (set! wU3143@make-export-env/macros (lambda (wU49e6@lex* wU49e7@loc* wU49e8@r) (let ((wU49ed@lookup '#f)) (begin (set! wU49ed@lookup (lambda (wU4a0a@x) (let wU4a12@f ((wU4a0c@x wU4a0a@x) (wU4a0d@lex* wU49e6@lex*) (wU4a0e@loc* wU49e7@loc*)) (if (pair? wU4a0d@lex*) (if (eq? wU4a0c@x (car wU4a0d@lex*)) (car wU4a0e@loc*) (wU4a12@f wU4a0c@x (cdr wU4a0d@lex*) (cdr wU4a0e@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let wU49f6@f ((wU49ee@r wU49e8@r) (wU49ef@env '()) (wU49f0@global* '()) (wU49f1@macro* '())) (if (null? wU49ee@r) (values wU49ef@env wU49f0@global* wU49f1@macro*) (let ((wU49f8@x (car wU49ee@r))) (let ((wU49fa@label (car wU49f8@x)) (wU49fb@b (cdr wU49f8@x))) (let ((wU49fe@t (wU2e8c@binding-type wU49fb@b))) (if (memv wU49fe@t '(lexical)) (let ((wU4a00@v (wU2e8e@binding-value wU49fb@b))) (let ((wU4a02@loc (wU49ed@lookup (wU3001@lexical-var wU4a00@v))) (wU4a03@type (if (wU3003@lexical-mutable? wU4a00@v) 'mutable 'global))) (wU49f6@f (cdr wU49ee@r) (cons (cons* wU49fa@label wU4a03@type wU4a02@loc) wU49ef@env) (cons (cons (wU3001@lexical-var wU4a00@v) wU4a02@loc) wU49f0@global*) wU49f1@macro*))) (if (memv wU49fe@t '(local-macro)) (let ((wU4a06@loc (gensym))) (wU49f6@f (cdr wU49ee@r) (cons (cons* wU49fa@label 'global-macro wU4a06@loc) wU49ef@env) wU49f0@global* (cons (cons wU4a06@loc (wU2e8e@binding-value wU49fb@b)) wU49f1@macro*))) (if (memv wU49fe@t '(local-macro!)) (let ((wU4a08@loc (gensym))) (wU49f6@f (cdr wU49ee@r) (cons (cons* wU49fa@label 'global-macro! wU4a08@loc) wU49ef@env) wU49f0@global* (cons (cons wU4a08@loc (wU2e8e@binding-value wU49fb@b)) wU49f1@macro*))) (if (memv wU49fe@t '($rtd $module)) (wU49f6@f (cdr wU49ee@r) (cons wU49f8@x wU49ef@env) wU49f0@global* wU49f1@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (wU2e8c@binding-type wU49fb@b) (wU2e8e@binding-value wU49fb@b))))))))))))))) (set! wU4ba7@wU3143@make-export-env/macros wU3143@make-export-env/macros) (set! wU3145@generate-temporaries (lambda (wU4a14@ls) (let ((wU4a16@t wU4a14@ls)) (let ((wU4a18@ls/false (wU3077@syntax-dispatch wU4a16@t 'each-any))) (if wU4a18@ls/false (apply (lambda (wU4a1a@ls) (map (lambda (wU4a1c@x) (make-simple-struct 'stx '5 (list (let ((wU4a1e@x (wU315d@syntax->datum wU4a1c@x))) (if (or (symbol? wU4a1e@x) (string? wU4a1e@x)) (gensym wU4a1e@x) (gensym 't))) wU2df4@top-mark* '() '()))) wU4a1a@ls)) wU4a18@ls/false) (let ((wU4a20@t wU4a16@t)) (let ((wU4a22@ls/false (wU3077@syntax-dispatch wU4a20@t '_))) (if wU4a22@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) wU4a22@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU4a20@t))))))))) (set! wU4ba8@wU3145@generate-temporaries wU3145@generate-temporaries) (set! wU3147@free-identifier=? (lambda (wU4a24@x wU4a25@y) (if (wU2e70@id? wU4a24@x) (if (wU2e70@id? wU4a25@y) (wU2e76@free-id=? wU4a24@x wU4a25@y) (assertion-violation 'free-identifier=? '"not an identifier" wU4a25@y)) (assertion-violation 'free-identifier=? '"not an identifier" wU4a24@x)))) (set! wU4ba9@wU3147@free-identifier=? wU3147@free-identifier=?) (set! wU3149@bound-identifier=? (lambda (wU4a28@x wU4a29@y) (if (wU2e70@id? wU4a28@x) (if (wU2e70@id? wU4a29@y) (wU2e74@bound-id=? wU4a28@x wU4a29@y) (assertion-violation 'bound-identifier=? '"not an identifier" wU4a29@y)) (assertion-violation 'bound-identifier=? '"not an identifier" wU4a28@x)))) (set! wU4baa@wU3149@bound-identifier=? wU3149@bound-identifier=?) (set! wU314b@make-source-condition (lambda (wU4a2c@x) (let ((wU4a36@wU4a31 '#f) (wU4a38@wU4a33 '#f) (wU4a3a@wU4a32 '#f) (wU4a3d@wU4a30 '#f) (wU4a3f@make-source-condition '#f) (wU4a41@wU4a2e '#f) (wU4a43@wU4a2f '#f) (wU4a45@source-condition? '#f) (wU4a47@source-filename '#f) (wU4a49@source-character '#f)) (begin (set! wU4a36@wU4a31 (make-record-type-descriptor '&source-information wU4e8c@wU4bd3@&condition-rtd 'wU4a34 '#f '#f '#((immutable file-name) (immutable character)))) (set! wU4a38@wU4a33 '#f) (set! wU4a3a@wU4a32 (make-record-constructor-descriptor wU4a36@wU4a31 wU4e8d@wU4bd5@&condition-rcd wU4a38@wU4a33)) (set! wU4a3d@wU4a30 (record-predicate wU4a36@wU4a31)) (set! wU4a3f@make-source-condition (record-constructor wU4a3a@wU4a32)) (set! wU4a41@wU4a2e (record-accessor wU4a36@wU4a31 '0)) (set! wU4a43@wU4a2f (record-accessor wU4a36@wU4a31 '1)) (set! wU4a45@source-condition? (condition-predicate wU4a36@wU4a31)) (set! wU4a47@source-filename (condition-accessor wU4a36@wU4a31 wU4a41@wU4a2e)) (set! wU4a49@source-character (condition-accessor wU4a36@wU4a31 wU4a43@wU4a2f)) (if (pair? wU4a2c@x) (wU4a3f@make-source-condition (car wU4a2c@x) (cdr wU4a2c@x)) (condition)))))) (set! wU4bab@wU314b@make-source-condition wU314b@make-source-condition) (set! wU314d@extract-position-condition (lambda (wU4a4a@x) (wU314b@make-source-condition (wU314f@expression-position wU4a4a@x)))) (set! wU4bac@wU314d@extract-position-condition wU314d@extract-position-condition) (set! wU314f@expression-position (lambda (wU4a4c@x) (and (wU2e3c@stx? wU4a4c@x) (let ((wU4a4e@x (wU2e3e@stx-expr wU4a4c@x))) (and (wU29af@wU2883@annotation? wU4a4e@x) (wU29b0@wU2885@annotation-source wU4a4e@x)))))) (set! wU4bad@wU314f@expression-position wU314f@expression-position) (set! wU3151@assertion-error (lambda (wU4a50@expr wU4a51@pos) (raise (condition (wU4ebc@wU4c97@make-assertion-violation) (wU4ece@wU4cc9@make-who-condition 'assert) (wU4e92@wU4c2a@make-message-condition '"assertion failed") (wU4ec4@wU4cae@make-irritants-condition (list wU4a50@expr)) (wU314b@make-source-condition wU4a51@pos))))) (set! wU4bae@wU3151@assertion-error wU3151@assertion-error) (set! wU3153@syntax-error (lambda (wU4a54@x . wU4a56@args) (begin (if (not (for-all string? wU4a56@args)) (assertion-violation 'syntax-error '"invalid argument" wU4a56@args) (void)) (raise (condition (wU4e92@wU4c2a@make-message-condition (if (null? wU4a56@args) '"invalid syntax" (apply string-append wU4a56@args))) (wU4ef0@wU4d25@make-syntax-violation (wU315d@syntax->datum wU4a54@x) '#f) (wU314d@extract-position-condition wU4a54@x)))))) (set! wU4baf@wU3153@syntax-error wU3153@syntax-error) (set! wU3155@syntax-violation* (lambda (wU4a58@who wU4a59@msg wU4a5a@form wU4a5b@condition-object) (begin (if (not (string? wU4a59@msg)) (assertion-violation 'syntax-violation '"message is not a string" wU4a59@msg) (void)) (let ((wU4a60@who (if (or (string? wU4a58@who) (symbol? wU4a58@who)) wU4a58@who (if (not wU4a58@who) (let ((wU4a62@t wU4a5a@form)) (let ((wU4a64@ls/false (wU3077@syntax-dispatch wU4a62@t 'any))) (if (and wU4a64@ls/false (apply (lambda (wU4a66@id) (wU2e70@id? wU4a66@id)) wU4a64@ls/false)) (apply (lambda (wU4a68@id) (wU315d@syntax->datum wU4a68@id)) wU4a64@ls/false) (let ((wU4a6a@t wU4a62@t)) (let ((wU4a6c@ls/false (wU3077@syntax-dispatch wU4a6a@t '(any . any)))) (if (and wU4a6c@ls/false (apply (lambda (wU4a6e@id wU4a6f@rest) (wU2e70@id? wU4a6e@id)) wU4a6c@ls/false)) (apply (lambda (wU4a72@id wU4a73@rest) (wU315d@syntax->datum wU4a72@id)) wU4a6c@ls/false) (let ((wU4a76@t wU4a6a@t)) (let ((wU4a78@ls/false (wU3077@syntax-dispatch wU4a76@t '_))) (if wU4a78@ls/false (apply (lambda () '#f) wU4a78@ls/false) (wU3157@syntax-violation '#f '"invalid syntax" wU4a76@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" wU4a58@who))))) (raise (condition (if wU4a60@who (wU4ece@wU4cc9@make-who-condition wU4a60@who) (condition)) (wU4e92@wU4c2a@make-message-condition wU4a59@msg) wU4a5b@condition-object (wU314d@extract-position-condition wU4a5a@form))))))) (set! wU4bb0@wU3155@syntax-violation* wU3155@syntax-violation*) (set! wU3157@syntax-violation (lambda wU4a88 (let ((wU4a89 (length wU4a88))) (if (= wU4a89 '3) (apply (lambda (wU4a7a@who wU4a7b@msg wU4a7c@form) (wU3157@syntax-violation wU4a7a@who wU4a7b@msg wU4a7c@form '#f)) wU4a88) (if (= wU4a89 '4) (apply (lambda (wU4a80@who wU4a81@msg wU4a82@form wU4a83@subform) (wU3155@syntax-violation* wU4a80@who wU4a81@msg wU4a82@form (wU4ef0@wU4d25@make-syntax-violation (wU315d@syntax->datum wU4a82@form) (wU315d@syntax->datum wU4a83@subform)))) wU4a88) (error 'apply '"invalid arg count")))))) (set! wU4bb1@wU3157@syntax-violation wU3157@syntax-violation) (set! wU3159@identifier? (lambda (wU4a8a@x) (wU2e70@id? wU4a8a@x))) (set! wU4bb2@wU3159@identifier? wU3159@identifier?) (set! wU315b@datum->syntax (lambda (wU4a8c@id wU4a8d@datum) (if (wU2e70@id? wU4a8c@id) (wU2e50@datum->stx wU4a8c@id wU4a8d@datum) (assertion-violation 'datum->syntax '"not an identifier" wU4a8c@id)))) (set! wU4bb3@wU315b@datum->syntax wU315b@datum->syntax) (set! wU315d@syntax->datum (lambda (wU4a90@x) (wU2e84@stx->datum wU4a90@x))) (set! wU4bb4@wU315d@syntax->datum wU315d@syntax->datum) (set! wU315f@ungensym-all (lambda (wU4a92@code) (if (pair? wU4a92@code) (cons (wU315f@ungensym-all (car wU4a92@code)) (wU315f@ungensym-all (cdr wU4a92@code))) (if (symbol? wU4a92@code) (ungensym wU4a92@code) wU4a92@code)))) (set! wU4bb5@wU315f@ungensym-all wU315f@ungensym-all) (set! wU3161@compile-r6rs-top-level (lambda (wU4a94@x*) (call-with-values (lambda () (wU30ef@top-level-expander wU4a94@x*)) (lambda (wU4a9a@wU4a97 wU4a9b@wU4a99) (let ((wU4a9e@invoke-code wU4a9b@wU4a99) (wU4a9f@lib* wU4a9a@wU4a97)) (lambda () (begin (for-each wU2c86@wU2ad4@invoke-library wU4a9f@lib*) (let ((wU4aa2@expanded (wU2a10@wU29c8@expanded->core wU4a9e@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (wU315f@ungensym-all wU4aa2@expanded)) (void)) (eval-core wU4aa2@expanded)))))))))) (set! wU4bb6@wU3161@compile-r6rs-top-level wU3161@compile-r6rs-top-level) (set! wU3163@pre-compile-r6rs-top-level (lambda (wU4aa4@x*) (call-with-values (lambda () (wU30ef@top-level-expander wU4aa4@x*)) (lambda (wU4aaa@wU4aa7 wU4aab@wU4aa9) (let ((wU4aae@invoke-code wU4aab@wU4aa9) (wU4aaf@lib* wU4aaa@wU4aa7)) (begin (for-each wU2c86@wU2ad4@invoke-library wU4aaf@lib*) (wU29b8@wU2895@compile-core (wU2a10@wU29c8@expanded->core wU4aae@invoke-code)))))))) (set! wU4bb7@wU3163@pre-compile-r6rs-top-level wU3163@pre-compile-r6rs-top-level) (set! wU3165@interaction-environment (let ((wU4ab2@the-env '#f)) (lambda () (or wU4ab2@the-env (let ((wU4ab4@lib (wU2c7f@wU2ac6@find-library-by-name '(mosh interaction))) (wU4ab5@rib (wU2e24@make-empty-rib))) (begin (let ((wU4ab8@subst (wU2c61@wU2a8a@library-subst wU4ab4@lib))) (begin (wU2e10@set-rib-sym*! wU4ab5@rib (map car wU4ab8@subst)) (wU2e14@set-rib-mark**! wU4ab5@rib (map (lambda (wU4aba@x) wU2df4@top-mark*) wU4ab8@subst)) (wU2e18@set-rib-label*! wU4ab5@rib (map cdr wU4ab8@subst)))) (let ((wU4abc@env (make-simple-struct 'interaction-env '4 (list wU4ab5@rib '() '())))) (begin (set! wU4ab2@the-env wU4abc@env) wU4abc@env)))))))) (set! wU4bb8@wU3165@interaction-environment wU3165@interaction-environment) (set! wU3167@top-level-context (wU29ba@wU2899@make-parameter '#f)) (set! wU4bb9@wU3167@top-level-context wU3167@top-level-context) (wU2c7c@wU2ac0@current-library-expander wU3139@library-expander))
(begin (set! wU4bc8@wU4bc3 (unspecified)) (set! wU4bca@wU4bc5 (unspecified)) (set! wU4bcc@wU4bc4 (unspecified)) (set! wU4bcf@&condition? (unspecified)) (set! wU4bd1@make-&condition (unspecified)) (set! wU4bd3@&condition-rtd (unspecified)) (set! wU4bd5@&condition-rcd (unspecified)) (set! wU4c21@wU4c1c (unspecified)) (set! wU4c23@wU4c1e (unspecified)) (set! wU4c25@wU4c1d (unspecified)) (set! wU4c28@p? (unspecified)) (set! wU4c2a@make-message-condition (unspecified)) (set! wU4c2c@wU4c1b (unspecified)) (set! wU4c2e@message-condition? (unspecified)) (set! wU4c30@condition-message (unspecified)) (set! wU4c32@&message-rtd (unspecified)) (set! wU4c34@&message-rcd (unspecified)) (set! wU4c3a@wU4c35 (unspecified)) (set! wU4c3c@wU4c37 (unspecified)) (set! wU4c3e@wU4c36 (unspecified)) (set! wU4c41@p? (unspecified)) (set! wU4c43@make-warning (unspecified)) (set! wU4c45@warning? (unspecified)) (set! wU4c47@&warning-rtd (unspecified)) (set! wU4c49@&warning-rcd (unspecified)) (set! wU4c4f@wU4c4a (unspecified)) (set! wU4c51@wU4c4c (unspecified)) (set! wU4c53@wU4c4b (unspecified)) (set! wU4c56@p? (unspecified)) (set! wU4c58@make-serious-condition (unspecified)) (set! wU4c5a@serious-condition? (unspecified)) (set! wU4c5c@&serious-rtd (unspecified)) (set! wU4c5e@&serious-rcd (unspecified)) (set! wU4c64@wU4c5f (unspecified)) (set! wU4c66@wU4c61 (unspecified)) (set! wU4c68@wU4c60 (unspecified)) (set! wU4c6b@p? (unspecified)) (set! wU4c6d@make-error (unspecified)) (set! wU4c6f@error? (unspecified)) (set! wU4c71@&error-rtd (unspecified)) (set! wU4c73@&error-rcd (unspecified)) (set! wU4c79@wU4c74 (unspecified)) (set! wU4c7b@wU4c76 (unspecified)) (set! wU4c7d@wU4c75 (unspecified)) (set! wU4c80@p? (unspecified)) (set! wU4c82@make-violation (unspecified)) (set! wU4c84@violation? (unspecified)) (set! wU4c86@&violation-rtd (unspecified)) (set! wU4c88@&violation-rcd (unspecified)) (set! wU4c8e@wU4c89 (unspecified)) (set! wU4c90@wU4c8b (unspecified)) (set! wU4c92@wU4c8a (unspecified)) (set! wU4c95@p? (unspecified)) (set! wU4c97@make-assertion-violation (unspecified)) (set! wU4c99@assertion-violation? (unspecified)) (set! wU4c9b@&assertion-rtd (unspecified)) (set! wU4c9d@&assertion-rcd (unspecified)) (set! wU4ca5@wU4ca0 (unspecified)) (set! wU4ca7@wU4ca2 (unspecified)) (set! wU4ca9@wU4ca1 (unspecified)) (set! wU4cac@p? (unspecified)) (set! wU4cae@make-irritants-condition (unspecified)) (set! wU4cb0@wU4c9f (unspecified)) (set! wU4cb2@irritants-condition? (unspecified)) (set! wU4cb4@condition-irritants (unspecified)) (set! wU4cb6@&irritants-rtd (unspecified)) (set! wU4cb8@&irritants-rcd (unspecified)) (set! wU4cc0@wU4cbb (unspecified)) (set! wU4cc2@wU4cbd (unspecified)) (set! wU4cc4@wU4cbc (unspecified)) (set! wU4cc7@p? (unspecified)) (set! wU4cc9@make-who-condition (unspecified)) (set! wU4ccb@wU4cba (unspecified)) (set! wU4ccd@who-condition? (unspecified)) (set! wU4ccf@condition-who (unspecified)) (set! wU4cd1@&who-rtd (unspecified)) (set! wU4cd3@&who-rcd (unspecified)) (set! wU4cd9@wU4cd4 (unspecified)) (set! wU4cdb@wU4cd6 (unspecified)) (set! wU4cdd@wU4cd5 (unspecified)) (set! wU4ce0@p? (unspecified)) (set! wU4ce2@make-non-continuable-violation (unspecified)) (set! wU4ce4@non-continuable-violation? (unspecified)) (set! wU4ce6@&non-continuable-rtd (unspecified)) (set! wU4ce8@&non-continuable-rcd (unspecified)) (set! wU4cee@wU4ce9 (unspecified)) (set! wU4cf0@wU4ceb (unspecified)) (set! wU4cf2@wU4cea (unspecified)) (set! wU4cf5@p? (unspecified)) (set! wU4cf7@make-implementation-restriction-violation (unspecified)) (set! wU4cf9@implementation-restriction-violation? (unspecified)) (set! wU4cfb@&implementation-restriction-rtd (unspecified)) (set! wU4cfd@&implementation-restriction-rcd (unspecified)) (set! wU4d03@wU4cfe (unspecified)) (set! wU4d05@wU4d00 (unspecified)) (set! wU4d07@wU4cff (unspecified)) (set! wU4d0a@p? (unspecified)) (set! wU4d0c@make-lexical-violation (unspecified)) (set! wU4d0e@lexical-violation? (unspecified)) (set! wU4d10@&lexical-rtd (unspecified)) (set! wU4d12@&lexical-rcd (unspecified)) (set! wU4d1c@wU4d17 (unspecified)) (set! wU4d1e@wU4d19 (unspecified)) (set! wU4d20@wU4d18 (unspecified)) (set! wU4d23@p? (unspecified)) (set! wU4d25@make-syntax-violation (unspecified)) (set! wU4d27@wU4d14 (unspecified)) (set! wU4d29@wU4d16 (unspecified)) (set! wU4d2b@syntax-violation? (unspecified)) (set! wU4d2d@syntax-violation-form (unspecified)) (set! wU4d2f@syntax-violation-subform (unspecified)) (set! wU4d31@&syntax-rtd (unspecified)) (set! wU4d33@&syntax-rcd (unspecified)) (set! wU4d39@wU4d34 (unspecified)) (set! wU4d3b@wU4d36 (unspecified)) (set! wU4d3d@wU4d35 (unspecified)) (set! wU4d40@p? (unspecified)) (set! wU4d42@make-undefined-violation (unspecified)) (set! wU4d44@undefined-violation? (unspecified)) (set! wU4d46@&undefined-rtd (unspecified)) (set! wU4d48@&undefined-rcd (unspecified)) (set! wU4d4e@wU4d49 (unspecified)) (set! wU4d50@wU4d4b (unspecified)) (set! wU4d52@wU4d4a (unspecified)) (set! wU4d55@p? (unspecified)) (set! wU4d57@make-i/o-error (unspecified)) (set! wU4d59@i/o-error? (unspecified)) (set! wU4d5b@&i/o-rtd (unspecified)) (set! wU4d5d@&i/o-rcd (unspecified)) (set! wU4d63@wU4d5e (unspecified)) (set! wU4d65@wU4d60 (unspecified)) (set! wU4d67@wU4d5f (unspecified)) (set! wU4d6a@p? (unspecified)) (set! wU4d6c@make-i/o-read-error (unspecified)) (set! wU4d6e@i/o-read-error? (unspecified)) (set! wU4d70@&i/o-read-rtd (unspecified)) (set! wU4d72@&i/o-read-rcd (unspecified)) (set! wU4d78@wU4d73 (unspecified)) (set! wU4d7a@wU4d75 (unspecified)) (set! wU4d7c@wU4d74 (unspecified)) (set! wU4d7f@p? (unspecified)) (set! wU4d81@make-i/o-write-error (unspecified)) (set! wU4d83@i/o-write-error? (unspecified)) (set! wU4d85@&i/o-write-rtd (unspecified)) (set! wU4d87@&i/o-write-rcd (unspecified)) (set! wU4d8f@wU4d8a (unspecified)) (set! wU4d91@wU4d8c (unspecified)) (set! wU4d93@wU4d8b (unspecified)) (set! wU4d96@p? (unspecified)) (set! wU4d98@make-i/o-invalid-position-error (unspecified)) (set! wU4d9a@wU4d89 (unspecified)) (set! wU4d9c@i/o-invalid-position-error? (unspecified)) (set! wU4d9e@i/o-error-position (unspecified)) (set! wU4da0@&i/o-invalid-position-rtd (unspecified)) (set! wU4da2@&i/o-invalid-position-rcd (unspecified)) (set! wU4daa@wU4da5 (unspecified)) (set! wU4dac@wU4da7 (unspecified)) (set! wU4dae@wU4da6 (unspecified)) (set! wU4db1@p? (unspecified)) (set! wU4db3@make-i/o-filename-error (unspecified)) (set! wU4db5@wU4da4 (unspecified)) (set! wU4db7@i/o-filename-error? (unspecified)) (set! wU4db9@i/o-error-filename (unspecified)) (set! wU4dbb@&i/o-filename-rtd (unspecified)) (set! wU4dbd@&i/o-filename-rcd (unspecified)) (set! wU4dc3@wU4dbe (unspecified)) (set! wU4dc5@wU4dc0 (unspecified)) (set! wU4dc7@wU4dbf (unspecified)) (set! wU4dca@p? (unspecified)) (set! wU4dcc@make-i/o-file-protection-error (unspecified)) (set! wU4dce@i/o-file-protection-error? (unspecified)) (set! wU4dd0@&i/o-file-protection-rtd (unspecified)) (set! wU4dd2@&i/o-file-protection-rcd (unspecified)) (set! wU4dd8@wU4dd3 (unspecified)) (set! wU4dda@wU4dd5 (unspecified)) (set! wU4ddc@wU4dd4 (unspecified)) (set! wU4ddf@p? (unspecified)) (set! wU4de1@make-i/o-file-is-read-only-error (unspecified)) (set! wU4de3@i/o-file-is-read-only-error? (unspecified)) (set! wU4de5@&i/o-file-is-read-only-rtd (unspecified)) (set! wU4de7@&i/o-file-is-read-only-rcd (unspecified)) (set! wU4ded@wU4de8 (unspecified)) (set! wU4def@wU4dea (unspecified)) (set! wU4df1@wU4de9 (unspecified)) (set! wU4df4@p? (unspecified)) (set! wU4df6@make-i/o-file-already-exists-error (unspecified)) (set! wU4df8@i/o-file-already-exists-error? (unspecified)) (set! wU4dfa@&i/o-file-already-exists-rtd (unspecified)) (set! wU4dfc@&i/o-file-already-exists-rcd (unspecified)) (set! wU4e02@wU4dfd (unspecified)) (set! wU4e04@wU4dff (unspecified)) (set! wU4e06@wU4dfe (unspecified)) (set! wU4e09@p? (unspecified)) (set! wU4e0b@make-i/o-file-does-not-exist-error (unspecified)) (set! wU4e0d@i/o-file-does-not-exist-error? (unspecified)) (set! wU4e0f@&i/o-file-does-not-exist-rtd (unspecified)) (set! wU4e11@&i/o-file-does-not-exist-rcd (unspecified)) (set! wU4e19@wU4e14 (unspecified)) (set! wU4e1b@wU4e16 (unspecified)) (set! wU4e1d@wU4e15 (unspecified)) (set! wU4e20@p? (unspecified)) (set! wU4e22@make-i/o-port-error (unspecified)) (set! wU4e24@wU4e13 (unspecified)) (set! wU4e26@i/o-port-error? (unspecified)) (set! wU4e28@i/o-error-port (unspecified)) (set! wU4e2a@&i/o-port-rtd (unspecified)) (set! wU4e2c@&i/o-port-rcd (unspecified)) (set! wU4e32@wU4e2d (unspecified)) (set! wU4e34@wU4e2f (unspecified)) (set! wU4e36@wU4e2e (unspecified)) (set! wU4e39@p? (unspecified)) (set! wU4e3b@make-i/o-decoding-error (unspecified)) (set! wU4e3d@i/o-decoding-error? (unspecified)) (set! wU4e3f@&i/o-decoding-rtd (unspecified)) (set! wU4e41@&i/o-decoding-rcd (unspecified)) (set! wU4e49@wU4e44 (unspecified)) (set! wU4e4b@wU4e46 (unspecified)) (set! wU4e4d@wU4e45 (unspecified)) (set! wU4e50@p? (unspecified)) (set! wU4e52@make-i/o-encoding-error (unspecified)) (set! wU4e54@wU4e43 (unspecified)) (set! wU4e56@i/o-encoding-error? (unspecified)) (set! wU4e58@i/o-encoding-error-char (unspecified)) (set! wU4e5a@&i/o-encoding-rtd (unspecified)) (set! wU4e5c@&i/o-encoding-rcd (unspecified)) (set! wU4e62@wU4e5d (unspecified)) (set! wU4e64@wU4e5f (unspecified)) (set! wU4e66@wU4e5e (unspecified)) (set! wU4e69@p? (unspecified)) (set! wU4e6b@make-no-infinities-violation (unspecified)) (set! wU4e6d@no-infinities-violation? (unspecified)) (set! wU4e6f@&no-infinities-rtd (unspecified)) (set! wU4e71@&no-infinities-rcd (unspecified)) (set! wU4e77@wU4e72 (unspecified)) (set! wU4e79@wU4e74 (unspecified)) (set! wU4e7b@wU4e73 (unspecified)) (set! wU4e7e@p? (unspecified)) (set! wU4e80@make-no-nans-violation (unspecified)) (set! wU4e82@no-nans-violation? (unspecified)) (set! wU4e84@&no-nans-rtd (unspecified)) (set! wU4e86@&no-nans-rcd (unspecified)) (set! wU4bc8@wU4bc3 (make-record-type-descriptor '&condition '#f 'wU4bc6 '#f '#f '#())) (set! wU4e87@wU4bc8@wU4bc3 wU4bc8@wU4bc3) (set! wU4bca@wU4bc5 '#f) (set! wU4e88@wU4bca@wU4bc5 wU4bca@wU4bc5) (set! wU4bcc@wU4bc4 (make-record-constructor-descriptor wU4bc8@wU4bc3 '#f wU4bca@wU4bc5)) (set! wU4e89@wU4bcc@wU4bc4 wU4bcc@wU4bc4) (set! wU4bcf@&condition? (record-predicate wU4bc8@wU4bc3)) (set! wU4e8a@wU4bcf@&condition? wU4bcf@&condition?) (set! wU4bd1@make-&condition (record-constructor wU4bcc@wU4bc4)) (set! wU4e8b@wU4bd1@make-&condition wU4bd1@make-&condition) (set! wU4bd3@&condition-rtd wU4bc8@wU4bc3) (set! wU4e8c@wU4bd3@&condition-rtd wU4bd3@&condition-rtd) (set! wU4bd5@&condition-rcd wU4bcc@wU4bc4) (set! wU4e8d@wU4bd5@&condition-rcd wU4bd5@&condition-rcd) (set! wU4c21@wU4c1c (make-record-type-descriptor '&message wU4bc8@wU4bc3 'wU4c1f '#f '#f '#((immutable message)))) (set! wU4e8e@wU4c21@wU4c1c wU4c21@wU4c1c) (set! wU4c23@wU4c1e '#f) (set! wU4e8f@wU4c23@wU4c1e wU4c23@wU4c1e) (set! wU4c25@wU4c1d (make-record-constructor-descriptor wU4c21@wU4c1c wU4bcc@wU4bc4 wU4c23@wU4c1e)) (set! wU4e90@wU4c25@wU4c1d wU4c25@wU4c1d) (set! wU4c28@p? (record-predicate wU4c21@wU4c1c)) (set! wU4e91@wU4c28@p? wU4c28@p?) (set! wU4c2a@make-message-condition (record-constructor wU4c25@wU4c1d)) (set! wU4e92@wU4c2a@make-message-condition wU4c2a@make-message-condition) (set! wU4c2c@wU4c1b (record-accessor wU4c21@wU4c1c '0)) (set! wU4e93@wU4c2c@wU4c1b wU4c2c@wU4c1b) (set! wU4c2e@message-condition? (condition-predicate wU4c21@wU4c1c)) (set! wU4e94@wU4c2e@message-condition? wU4c2e@message-condition?) (set! wU4c30@condition-message (condition-accessor wU4c21@wU4c1c wU4c2c@wU4c1b)) (set! wU4e95@wU4c30@condition-message wU4c30@condition-message) (set! wU4c32@&message-rtd wU4c21@wU4c1c) (set! wU4e96@wU4c32@&message-rtd wU4c32@&message-rtd) (set! wU4c34@&message-rcd wU4c25@wU4c1d) (set! wU4e97@wU4c34@&message-rcd wU4c34@&message-rcd) (set! wU4c3a@wU4c35 (make-record-type-descriptor '&warning wU4bc8@wU4bc3 'wU4c38 '#f '#f '#())) (set! wU4e98@wU4c3a@wU4c35 wU4c3a@wU4c35) (set! wU4c3c@wU4c37 '#f) (set! wU4e99@wU4c3c@wU4c37 wU4c3c@wU4c37) (set! wU4c3e@wU4c36 (make-record-constructor-descriptor wU4c3a@wU4c35 wU4bcc@wU4bc4 wU4c3c@wU4c37)) (set! wU4e9a@wU4c3e@wU4c36 wU4c3e@wU4c36) (set! wU4c41@p? (record-predicate wU4c3a@wU4c35)) (set! wU4e9b@wU4c41@p? wU4c41@p?) (set! wU4c43@make-warning (record-constructor wU4c3e@wU4c36)) (set! wU4e9c@wU4c43@make-warning wU4c43@make-warning) (set! wU4c45@warning? (condition-predicate wU4c3a@wU4c35)) (set! wU4e9d@wU4c45@warning? wU4c45@warning?) (set! wU4c47@&warning-rtd wU4c3a@wU4c35) (set! wU4e9e@wU4c47@&warning-rtd wU4c47@&warning-rtd) (set! wU4c49@&warning-rcd wU4c3e@wU4c36) (set! wU4e9f@wU4c49@&warning-rcd wU4c49@&warning-rcd) (set! wU4c4f@wU4c4a (make-record-type-descriptor '&serious wU4bc8@wU4bc3 'wU4c4d '#f '#f '#())) (set! wU4ea0@wU4c4f@wU4c4a wU4c4f@wU4c4a) (set! wU4c51@wU4c4c '#f) (set! wU4ea1@wU4c51@wU4c4c wU4c51@wU4c4c) (set! wU4c53@wU4c4b (make-record-constructor-descriptor wU4c4f@wU4c4a wU4bcc@wU4bc4 wU4c51@wU4c4c)) (set! wU4ea2@wU4c53@wU4c4b wU4c53@wU4c4b) (set! wU4c56@p? (record-predicate wU4c4f@wU4c4a)) (set! wU4ea3@wU4c56@p? wU4c56@p?) (set! wU4c58@make-serious-condition (record-constructor wU4c53@wU4c4b)) (set! wU4ea4@wU4c58@make-serious-condition wU4c58@make-serious-condition) (set! wU4c5a@serious-condition? (condition-predicate wU4c4f@wU4c4a)) (set! wU4ea5@wU4c5a@serious-condition? wU4c5a@serious-condition?) (set! wU4c5c@&serious-rtd wU4c4f@wU4c4a) (set! wU4ea6@wU4c5c@&serious-rtd wU4c5c@&serious-rtd) (set! wU4c5e@&serious-rcd wU4c53@wU4c4b) (set! wU4ea7@wU4c5e@&serious-rcd wU4c5e@&serious-rcd) (set! wU4c64@wU4c5f (make-record-type-descriptor '&error wU4c4f@wU4c4a 'wU4c62 '#f '#f '#())) (set! wU4ea8@wU4c64@wU4c5f wU4c64@wU4c5f) (set! wU4c66@wU4c61 '#f) (set! wU4ea9@wU4c66@wU4c61 wU4c66@wU4c61) (set! wU4c68@wU4c60 (make-record-constructor-descriptor wU4c64@wU4c5f wU4c53@wU4c4b wU4c66@wU4c61)) (set! wU4eaa@wU4c68@wU4c60 wU4c68@wU4c60) (set! wU4c6b@p? (record-predicate wU4c64@wU4c5f)) (set! wU4eab@wU4c6b@p? wU4c6b@p?) (set! wU4c6d@make-error (record-constructor wU4c68@wU4c60)) (set! wU4eac@wU4c6d@make-error wU4c6d@make-error) (set! wU4c6f@error? (condition-predicate wU4c64@wU4c5f)) (set! wU4ead@wU4c6f@error? wU4c6f@error?) (set! wU4c71@&error-rtd wU4c64@wU4c5f) (set! wU4eae@wU4c71@&error-rtd wU4c71@&error-rtd) (set! wU4c73@&error-rcd wU4c68@wU4c60) (set! wU4eaf@wU4c73@&error-rcd wU4c73@&error-rcd) (set! wU4c79@wU4c74 (make-record-type-descriptor '&violation wU4c4f@wU4c4a 'wU4c77 '#f '#f '#())) (set! wU4eb0@wU4c79@wU4c74 wU4c79@wU4c74) (set! wU4c7b@wU4c76 '#f) (set! wU4eb1@wU4c7b@wU4c76 wU4c7b@wU4c76) (set! wU4c7d@wU4c75 (make-record-constructor-descriptor wU4c79@wU4c74 wU4c53@wU4c4b wU4c7b@wU4c76)) (set! wU4eb2@wU4c7d@wU4c75 wU4c7d@wU4c75) (set! wU4c80@p? (record-predicate wU4c79@wU4c74)) (set! wU4eb3@wU4c80@p? wU4c80@p?) (set! wU4c82@make-violation (record-constructor wU4c7d@wU4c75)) (set! wU4eb4@wU4c82@make-violation wU4c82@make-violation) (set! wU4c84@violation? (condition-predicate wU4c79@wU4c74)) (set! wU4eb5@wU4c84@violation? wU4c84@violation?) (set! wU4c86@&violation-rtd wU4c79@wU4c74) (set! wU4eb6@wU4c86@&violation-rtd wU4c86@&violation-rtd) (set! wU4c88@&violation-rcd wU4c7d@wU4c75) (set! wU4eb7@wU4c88@&violation-rcd wU4c88@&violation-rcd) (set! wU4c8e@wU4c89 (make-record-type-descriptor '&assertion wU4c79@wU4c74 'wU4c8c '#f '#f '#())) (set! wU4eb8@wU4c8e@wU4c89 wU4c8e@wU4c89) (set! wU4c90@wU4c8b '#f) (set! wU4eb9@wU4c90@wU4c8b wU4c90@wU4c8b) (set! wU4c92@wU4c8a (make-record-constructor-descriptor wU4c8e@wU4c89 wU4c7d@wU4c75 wU4c90@wU4c8b)) (set! wU4eba@wU4c92@wU4c8a wU4c92@wU4c8a) (set! wU4c95@p? (record-predicate wU4c8e@wU4c89)) (set! wU4ebb@wU4c95@p? wU4c95@p?) (set! wU4c97@make-assertion-violation (record-constructor wU4c92@wU4c8a)) (set! wU4ebc@wU4c97@make-assertion-violation wU4c97@make-assertion-violation) (set! wU4c99@assertion-violation? (condition-predicate wU4c8e@wU4c89)) (set! wU4ebd@wU4c99@assertion-violation? wU4c99@assertion-violation?) (set! wU4c9b@&assertion-rtd wU4c8e@wU4c89) (set! wU4ebe@wU4c9b@&assertion-rtd wU4c9b@&assertion-rtd) (set! wU4c9d@&assertion-rcd wU4c92@wU4c8a) (set! wU4ebf@wU4c9d@&assertion-rcd wU4c9d@&assertion-rcd) (set! wU4ca5@wU4ca0 (make-record-type-descriptor '&irritants wU4bc8@wU4bc3 'wU4ca3 '#f '#f '#((immutable irritants)))) (set! wU4ec0@wU4ca5@wU4ca0 wU4ca5@wU4ca0) (set! wU4ca7@wU4ca2 '#f) (set! wU4ec1@wU4ca7@wU4ca2 wU4ca7@wU4ca2) (set! wU4ca9@wU4ca1 (make-record-constructor-descriptor wU4ca5@wU4ca0 wU4bcc@wU4bc4 wU4ca7@wU4ca2)) (set! wU4ec2@wU4ca9@wU4ca1 wU4ca9@wU4ca1) (set! wU4cac@p? (record-predicate wU4ca5@wU4ca0)) (set! wU4ec3@wU4cac@p? wU4cac@p?) (set! wU4cae@make-irritants-condition (record-constructor wU4ca9@wU4ca1)) (set! wU4ec4@wU4cae@make-irritants-condition wU4cae@make-irritants-condition) (set! wU4cb0@wU4c9f (record-accessor wU4ca5@wU4ca0 '0)) (set! wU4ec5@wU4cb0@wU4c9f wU4cb0@wU4c9f) (set! wU4cb2@irritants-condition? (condition-predicate wU4ca5@wU4ca0)) (set! wU4ec6@wU4cb2@irritants-condition? wU4cb2@irritants-condition?) (set! wU4cb4@condition-irritants (condition-accessor wU4ca5@wU4ca0 wU4cb0@wU4c9f)) (set! wU4ec7@wU4cb4@condition-irritants wU4cb4@condition-irritants) (set! wU4cb6@&irritants-rtd wU4ca5@wU4ca0) (set! wU4ec8@wU4cb6@&irritants-rtd wU4cb6@&irritants-rtd) (set! wU4cb8@&irritants-rcd wU4ca9@wU4ca1) (set! wU4ec9@wU4cb8@&irritants-rcd wU4cb8@&irritants-rcd) (set! wU4cc0@wU4cbb (make-record-type-descriptor '&who wU4bc8@wU4bc3 'wU4cbe '#f '#f '#((immutable who)))) (set! wU4eca@wU4cc0@wU4cbb wU4cc0@wU4cbb) (set! wU4cc2@wU4cbd '#f) (set! wU4ecb@wU4cc2@wU4cbd wU4cc2@wU4cbd) (set! wU4cc4@wU4cbc (make-record-constructor-descriptor wU4cc0@wU4cbb wU4bcc@wU4bc4 wU4cc2@wU4cbd)) (set! wU4ecc@wU4cc4@wU4cbc wU4cc4@wU4cbc) (set! wU4cc7@p? (record-predicate wU4cc0@wU4cbb)) (set! wU4ecd@wU4cc7@p? wU4cc7@p?) (set! wU4cc9@make-who-condition (record-constructor wU4cc4@wU4cbc)) (set! wU4ece@wU4cc9@make-who-condition wU4cc9@make-who-condition) (set! wU4ccb@wU4cba (record-accessor wU4cc0@wU4cbb '0)) (set! wU4ecf@wU4ccb@wU4cba wU4ccb@wU4cba) (set! wU4ccd@who-condition? (condition-predicate wU4cc0@wU4cbb)) (set! wU4ed0@wU4ccd@who-condition? wU4ccd@who-condition?) (set! wU4ccf@condition-who (condition-accessor wU4cc0@wU4cbb wU4ccb@wU4cba)) (set! wU4ed1@wU4ccf@condition-who wU4ccf@condition-who) (set! wU4cd1@&who-rtd wU4cc0@wU4cbb) (set! wU4ed2@wU4cd1@&who-rtd wU4cd1@&who-rtd) (set! wU4cd3@&who-rcd wU4cc4@wU4cbc) (set! wU4ed3@wU4cd3@&who-rcd wU4cd3@&who-rcd) (set! wU4cd9@wU4cd4 (make-record-type-descriptor '&non-continuable wU4c79@wU4c74 'wU4cd7 '#f '#f '#())) (set! wU4ed4@wU4cd9@wU4cd4 wU4cd9@wU4cd4) (set! wU4cdb@wU4cd6 '#f) (set! wU4ed5@wU4cdb@wU4cd6 wU4cdb@wU4cd6) (set! wU4cdd@wU4cd5 (make-record-constructor-descriptor wU4cd9@wU4cd4 wU4c7d@wU4c75 wU4cdb@wU4cd6)) (set! wU4ed6@wU4cdd@wU4cd5 wU4cdd@wU4cd5) (set! wU4ce0@p? (record-predicate wU4cd9@wU4cd4)) (set! wU4ed7@wU4ce0@p? wU4ce0@p?) (set! wU4ce2@make-non-continuable-violation (record-constructor wU4cdd@wU4cd5)) (set! wU4ed8@wU4ce2@make-non-continuable-violation wU4ce2@make-non-continuable-violation) (set! wU4ce4@non-continuable-violation? (condition-predicate wU4cd9@wU4cd4)) (set! wU4ed9@wU4ce4@non-continuable-violation? wU4ce4@non-continuable-violation?) (set! wU4ce6@&non-continuable-rtd wU4cd9@wU4cd4) (set! wU4eda@wU4ce6@&non-continuable-rtd wU4ce6@&non-continuable-rtd) (set! wU4ce8@&non-continuable-rcd wU4cdd@wU4cd5) (set! wU4edb@wU4ce8@&non-continuable-rcd wU4ce8@&non-continuable-rcd) (set! wU4cee@wU4ce9 (make-record-type-descriptor '&implementation-restriction wU4c79@wU4c74 'wU4cec '#f '#f '#())) (set! wU4edc@wU4cee@wU4ce9 wU4cee@wU4ce9) (set! wU4cf0@wU4ceb '#f) (set! wU4edd@wU4cf0@wU4ceb wU4cf0@wU4ceb) (set! wU4cf2@wU4cea (make-record-constructor-descriptor wU4cee@wU4ce9 wU4c7d@wU4c75 wU4cf0@wU4ceb)) (set! wU4ede@wU4cf2@wU4cea wU4cf2@wU4cea) (set! wU4cf5@p? (record-predicate wU4cee@wU4ce9)) (set! wU4edf@wU4cf5@p? wU4cf5@p?) (set! wU4cf7@make-implementation-restriction-violation (record-constructor wU4cf2@wU4cea)) (set! wU4ee0@wU4cf7@make-implementation-restriction-violation wU4cf7@make-implementation-restriction-violation) (set! wU4cf9@implementation-restriction-violation? (condition-predicate wU4cee@wU4ce9)) (set! wU4ee1@wU4cf9@implementation-restriction-violation? wU4cf9@implementation-restriction-violation?) (set! wU4cfb@&implementation-restriction-rtd wU4cee@wU4ce9) (set! wU4ee2@wU4cfb@&implementation-restriction-rtd wU4cfb@&implementation-restriction-rtd) (set! wU4cfd@&implementation-restriction-rcd wU4cf2@wU4cea) (set! wU4ee3@wU4cfd@&implementation-restriction-rcd wU4cfd@&implementation-restriction-rcd) (set! wU4d03@wU4cfe (make-record-type-descriptor '&lexical wU4c79@wU4c74 'wU4d01 '#f '#f '#())) (set! wU4ee4@wU4d03@wU4cfe wU4d03@wU4cfe) (set! wU4d05@wU4d00 '#f) (set! wU4ee5@wU4d05@wU4d00 wU4d05@wU4d00) (set! wU4d07@wU4cff (make-record-constructor-descriptor wU4d03@wU4cfe wU4c7d@wU4c75 wU4d05@wU4d00)) (set! wU4ee6@wU4d07@wU4cff wU4d07@wU4cff) (set! wU4d0a@p? (record-predicate wU4d03@wU4cfe)) (set! wU4ee7@wU4d0a@p? wU4d0a@p?) (set! wU4d0c@make-lexical-violation (record-constructor wU4d07@wU4cff)) (set! wU4ee8@wU4d0c@make-lexical-violation wU4d0c@make-lexical-violation) (set! wU4d0e@lexical-violation? (condition-predicate wU4d03@wU4cfe)) (set! wU4ee9@wU4d0e@lexical-violation? wU4d0e@lexical-violation?) (set! wU4d10@&lexical-rtd wU4d03@wU4cfe) (set! wU4eea@wU4d10@&lexical-rtd wU4d10@&lexical-rtd) (set! wU4d12@&lexical-rcd wU4d07@wU4cff) (set! wU4eeb@wU4d12@&lexical-rcd wU4d12@&lexical-rcd) (set! wU4d1c@wU4d17 (make-record-type-descriptor '&syntax wU4c79@wU4c74 'wU4d1a '#f '#f '#((immutable form) (immutable subform)))) (set! wU4eec@wU4d1c@wU4d17 wU4d1c@wU4d17) (set! wU4d1e@wU4d19 '#f) (set! wU4eed@wU4d1e@wU4d19 wU4d1e@wU4d19) (set! wU4d20@wU4d18 (make-record-constructor-descriptor wU4d1c@wU4d17 wU4c7d@wU4c75 wU4d1e@wU4d19)) (set! wU4eee@wU4d20@wU4d18 wU4d20@wU4d18) (set! wU4d23@p? (record-predicate wU4d1c@wU4d17)) (set! wU4eef@wU4d23@p? wU4d23@p?) (set! wU4d25@make-syntax-violation (record-constructor wU4d20@wU4d18)) (set! wU4ef0@wU4d25@make-syntax-violation wU4d25@make-syntax-violation) (set! wU4d27@wU4d14 (record-accessor wU4d1c@wU4d17 '0)) (set! wU4ef1@wU4d27@wU4d14 wU4d27@wU4d14) (set! wU4d29@wU4d16 (record-accessor wU4d1c@wU4d17 '1)) (set! wU4ef2@wU4d29@wU4d16 wU4d29@wU4d16) (set! wU4d2b@syntax-violation? (condition-predicate wU4d1c@wU4d17)) (set! wU4ef3@wU4d2b@syntax-violation? wU4d2b@syntax-violation?) (set! wU4d2d@syntax-violation-form (condition-accessor wU4d1c@wU4d17 wU4d27@wU4d14)) (set! wU4ef4@wU4d2d@syntax-violation-form wU4d2d@syntax-violation-form) (set! wU4d2f@syntax-violation-subform (condition-accessor wU4d1c@wU4d17 wU4d29@wU4d16)) (set! wU4ef5@wU4d2f@syntax-violation-subform wU4d2f@syntax-violation-subform) (set! wU4d31@&syntax-rtd wU4d1c@wU4d17) (set! wU4ef6@wU4d31@&syntax-rtd wU4d31@&syntax-rtd) (set! wU4d33@&syntax-rcd wU4d20@wU4d18) (set! wU4ef7@wU4d33@&syntax-rcd wU4d33@&syntax-rcd) (set! wU4d39@wU4d34 (make-record-type-descriptor '&undefined wU4c79@wU4c74 'wU4d37 '#f '#f '#())) (set! wU4ef8@wU4d39@wU4d34 wU4d39@wU4d34) (set! wU4d3b@wU4d36 '#f) (set! wU4ef9@wU4d3b@wU4d36 wU4d3b@wU4d36) (set! wU4d3d@wU4d35 (make-record-constructor-descriptor wU4d39@wU4d34 wU4c7d@wU4c75 wU4d3b@wU4d36)) (set! wU4efa@wU4d3d@wU4d35 wU4d3d@wU4d35) (set! wU4d40@p? (record-predicate wU4d39@wU4d34)) (set! wU4efb@wU4d40@p? wU4d40@p?) (set! wU4d42@make-undefined-violation (record-constructor wU4d3d@wU4d35)) (set! wU4efc@wU4d42@make-undefined-violation wU4d42@make-undefined-violation) (set! wU4d44@undefined-violation? (condition-predicate wU4d39@wU4d34)) (set! wU4efd@wU4d44@undefined-violation? wU4d44@undefined-violation?) (set! wU4d46@&undefined-rtd wU4d39@wU4d34) (set! wU4efe@wU4d46@&undefined-rtd wU4d46@&undefined-rtd) (set! wU4d48@&undefined-rcd wU4d3d@wU4d35) (set! wU4eff@wU4d48@&undefined-rcd wU4d48@&undefined-rcd) (set! wU4d4e@wU4d49 (make-record-type-descriptor '&i/o wU4c64@wU4c5f 'wU4d4c '#f '#f '#())) (set! wU4f00@wU4d4e@wU4d49 wU4d4e@wU4d49) (set! wU4d50@wU4d4b '#f) (set! wU4f01@wU4d50@wU4d4b wU4d50@wU4d4b) (set! wU4d52@wU4d4a (make-record-constructor-descriptor wU4d4e@wU4d49 wU4c68@wU4c60 wU4d50@wU4d4b)) (set! wU4f02@wU4d52@wU4d4a wU4d52@wU4d4a) (set! wU4d55@p? (record-predicate wU4d4e@wU4d49)) (set! wU4f03@wU4d55@p? wU4d55@p?) (set! wU4d57@make-i/o-error (record-constructor wU4d52@wU4d4a)) (set! wU4f04@wU4d57@make-i/o-error wU4d57@make-i/o-error) (set! wU4d59@i/o-error? (condition-predicate wU4d4e@wU4d49)) (set! wU4f05@wU4d59@i/o-error? wU4d59@i/o-error?) (set! wU4d5b@&i/o-rtd wU4d4e@wU4d49) (set! wU4f06@wU4d5b@&i/o-rtd wU4d5b@&i/o-rtd) (set! wU4d5d@&i/o-rcd wU4d52@wU4d4a) (set! wU4f07@wU4d5d@&i/o-rcd wU4d5d@&i/o-rcd) (set! wU4d63@wU4d5e (make-record-type-descriptor '&i/o-read wU4d4e@wU4d49 'wU4d61 '#f '#f '#())) (set! wU4f08@wU4d63@wU4d5e wU4d63@wU4d5e) (set! wU4d65@wU4d60 '#f) (set! wU4f09@wU4d65@wU4d60 wU4d65@wU4d60) (set! wU4d67@wU4d5f (make-record-constructor-descriptor wU4d63@wU4d5e wU4d52@wU4d4a wU4d65@wU4d60)) (set! wU4f0a@wU4d67@wU4d5f wU4d67@wU4d5f) (set! wU4d6a@p? (record-predicate wU4d63@wU4d5e)) (set! wU4f0b@wU4d6a@p? wU4d6a@p?) (set! wU4d6c@make-i/o-read-error (record-constructor wU4d67@wU4d5f)) (set! wU4f0c@wU4d6c@make-i/o-read-error wU4d6c@make-i/o-read-error) (set! wU4d6e@i/o-read-error? (condition-predicate wU4d63@wU4d5e)) (set! wU4f0d@wU4d6e@i/o-read-error? wU4d6e@i/o-read-error?) (set! wU4d70@&i/o-read-rtd wU4d63@wU4d5e) (set! wU4f0e@wU4d70@&i/o-read-rtd wU4d70@&i/o-read-rtd) (set! wU4d72@&i/o-read-rcd wU4d67@wU4d5f) (set! wU4f0f@wU4d72@&i/o-read-rcd wU4d72@&i/o-read-rcd) (set! wU4d78@wU4d73 (make-record-type-descriptor '&i/o-write wU4d4e@wU4d49 'wU4d76 '#f '#f '#())) (set! wU4f10@wU4d78@wU4d73 wU4d78@wU4d73) (set! wU4d7a@wU4d75 '#f) (set! wU4f11@wU4d7a@wU4d75 wU4d7a@wU4d75) (set! wU4d7c@wU4d74 (make-record-constructor-descriptor wU4d78@wU4d73 wU4d52@wU4d4a wU4d7a@wU4d75)) (set! wU4f12@wU4d7c@wU4d74 wU4d7c@wU4d74) (set! wU4d7f@p? (record-predicate wU4d78@wU4d73)) (set! wU4f13@wU4d7f@p? wU4d7f@p?) (set! wU4d81@make-i/o-write-error (record-constructor wU4d7c@wU4d74)) (set! wU4f14@wU4d81@make-i/o-write-error wU4d81@make-i/o-write-error) (set! wU4d83@i/o-write-error? (condition-predicate wU4d78@wU4d73)) (set! wU4f15@wU4d83@i/o-write-error? wU4d83@i/o-write-error?) (set! wU4d85@&i/o-write-rtd wU4d78@wU4d73) (set! wU4f16@wU4d85@&i/o-write-rtd wU4d85@&i/o-write-rtd) (set! wU4d87@&i/o-write-rcd wU4d7c@wU4d74) (set! wU4f17@wU4d87@&i/o-write-rcd wU4d87@&i/o-write-rcd) (set! wU4d8f@wU4d8a (make-record-type-descriptor '&i/o-invalid-position wU4d4e@wU4d49 'wU4d8d '#f '#f '#((immutable position)))) (set! wU4f18@wU4d8f@wU4d8a wU4d8f@wU4d8a) (set! wU4d91@wU4d8c '#f) (set! wU4f19@wU4d91@wU4d8c wU4d91@wU4d8c) (set! wU4d93@wU4d8b (make-record-constructor-descriptor wU4d8f@wU4d8a wU4d52@wU4d4a wU4d91@wU4d8c)) (set! wU4f1a@wU4d93@wU4d8b wU4d93@wU4d8b) (set! wU4d96@p? (record-predicate wU4d8f@wU4d8a)) (set! wU4f1b@wU4d96@p? wU4d96@p?) (set! wU4d98@make-i/o-invalid-position-error (record-constructor wU4d93@wU4d8b)) (set! wU4f1c@wU4d98@make-i/o-invalid-position-error wU4d98@make-i/o-invalid-position-error) (set! wU4d9a@wU4d89 (record-accessor wU4d8f@wU4d8a '0)) (set! wU4f1d@wU4d9a@wU4d89 wU4d9a@wU4d89) (set! wU4d9c@i/o-invalid-position-error? (condition-predicate wU4d8f@wU4d8a)) (set! wU4f1e@wU4d9c@i/o-invalid-position-error? wU4d9c@i/o-invalid-position-error?) (set! wU4d9e@i/o-error-position (condition-accessor wU4d8f@wU4d8a wU4d9a@wU4d89)) (set! wU4f1f@wU4d9e@i/o-error-position wU4d9e@i/o-error-position) (set! wU4da0@&i/o-invalid-position-rtd wU4d8f@wU4d8a) (set! wU4f20@wU4da0@&i/o-invalid-position-rtd wU4da0@&i/o-invalid-position-rtd) (set! wU4da2@&i/o-invalid-position-rcd wU4d93@wU4d8b) (set! wU4f21@wU4da2@&i/o-invalid-position-rcd wU4da2@&i/o-invalid-position-rcd) (set! wU4daa@wU4da5 (make-record-type-descriptor '&i/o-filename wU4d4e@wU4d49 'wU4da8 '#f '#f '#((immutable filename)))) (set! wU4f22@wU4daa@wU4da5 wU4daa@wU4da5) (set! wU4dac@wU4da7 '#f) (set! wU4f23@wU4dac@wU4da7 wU4dac@wU4da7) (set! wU4dae@wU4da6 (make-record-constructor-descriptor wU4daa@wU4da5 wU4d52@wU4d4a wU4dac@wU4da7)) (set! wU4f24@wU4dae@wU4da6 wU4dae@wU4da6) (set! wU4db1@p? (record-predicate wU4daa@wU4da5)) (set! wU4f25@wU4db1@p? wU4db1@p?) (set! wU4db3@make-i/o-filename-error (record-constructor wU4dae@wU4da6)) (set! wU4f26@wU4db3@make-i/o-filename-error wU4db3@make-i/o-filename-error) (set! wU4db5@wU4da4 (record-accessor wU4daa@wU4da5 '0)) (set! wU4f27@wU4db5@wU4da4 wU4db5@wU4da4) (set! wU4db7@i/o-filename-error? (condition-predicate wU4daa@wU4da5)) (set! wU4f28@wU4db7@i/o-filename-error? wU4db7@i/o-filename-error?) (set! wU4db9@i/o-error-filename (condition-accessor wU4daa@wU4da5 wU4db5@wU4da4)) (set! wU4f29@wU4db9@i/o-error-filename wU4db9@i/o-error-filename) (set! wU4dbb@&i/o-filename-rtd wU4daa@wU4da5) (set! wU4f2a@wU4dbb@&i/o-filename-rtd wU4dbb@&i/o-filename-rtd) (set! wU4dbd@&i/o-filename-rcd wU4dae@wU4da6) (set! wU4f2b@wU4dbd@&i/o-filename-rcd wU4dbd@&i/o-filename-rcd) (set! wU4dc3@wU4dbe (make-record-type-descriptor '&i/o-file-protection wU4daa@wU4da5 'wU4dc1 '#f '#f '#())) (set! wU4f2c@wU4dc3@wU4dbe wU4dc3@wU4dbe) (set! wU4dc5@wU4dc0 '#f) (set! wU4f2d@wU4dc5@wU4dc0 wU4dc5@wU4dc0) (set! wU4dc7@wU4dbf (make-record-constructor-descriptor wU4dc3@wU4dbe wU4dae@wU4da6 wU4dc5@wU4dc0)) (set! wU4f2e@wU4dc7@wU4dbf wU4dc7@wU4dbf) (set! wU4dca@p? (record-predicate wU4dc3@wU4dbe)) (set! wU4f2f@wU4dca@p? wU4dca@p?) (set! wU4dcc@make-i/o-file-protection-error (record-constructor wU4dc7@wU4dbf)) (set! wU4f30@wU4dcc@make-i/o-file-protection-error wU4dcc@make-i/o-file-protection-error) (set! wU4dce@i/o-file-protection-error? (condition-predicate wU4dc3@wU4dbe)) (set! wU4f31@wU4dce@i/o-file-protection-error? wU4dce@i/o-file-protection-error?) (set! wU4dd0@&i/o-file-protection-rtd wU4dc3@wU4dbe) (set! wU4f32@wU4dd0@&i/o-file-protection-rtd wU4dd0@&i/o-file-protection-rtd) (set! wU4dd2@&i/o-file-protection-rcd wU4dc7@wU4dbf) (set! wU4f33@wU4dd2@&i/o-file-protection-rcd wU4dd2@&i/o-file-protection-rcd) (set! wU4dd8@wU4dd3 (make-record-type-descriptor '&i/o-file-is-read-only wU4dc3@wU4dbe 'wU4dd6 '#f '#f '#())) (set! wU4f34@wU4dd8@wU4dd3 wU4dd8@wU4dd3) (set! wU4dda@wU4dd5 '#f) (set! wU4f35@wU4dda@wU4dd5 wU4dda@wU4dd5) (set! wU4ddc@wU4dd4 (make-record-constructor-descriptor wU4dd8@wU4dd3 wU4dc7@wU4dbf wU4dda@wU4dd5)) (set! wU4f36@wU4ddc@wU4dd4 wU4ddc@wU4dd4) (set! wU4ddf@p? (record-predicate wU4dd8@wU4dd3)) (set! wU4f37@wU4ddf@p? wU4ddf@p?) (set! wU4de1@make-i/o-file-is-read-only-error (record-constructor wU4ddc@wU4dd4)) (set! wU4f38@wU4de1@make-i/o-file-is-read-only-error wU4de1@make-i/o-file-is-read-only-error) (set! wU4de3@i/o-file-is-read-only-error? (condition-predicate wU4dd8@wU4dd3)) (set! wU4f39@wU4de3@i/o-file-is-read-only-error? wU4de3@i/o-file-is-read-only-error?) (set! wU4de5@&i/o-file-is-read-only-rtd wU4dd8@wU4dd3) (set! wU4f3a@wU4de5@&i/o-file-is-read-only-rtd wU4de5@&i/o-file-is-read-only-rtd) (set! wU4de7@&i/o-file-is-read-only-rcd wU4ddc@wU4dd4) (set! wU4f3b@wU4de7@&i/o-file-is-read-only-rcd wU4de7@&i/o-file-is-read-only-rcd) (set! wU4ded@wU4de8 (make-record-type-descriptor '&i/o-file-already-exists wU4daa@wU4da5 'wU4deb '#f '#f '#())) (set! wU4f3c@wU4ded@wU4de8 wU4ded@wU4de8) (set! wU4def@wU4dea '#f) (set! wU4f3d@wU4def@wU4dea wU4def@wU4dea) (set! wU4df1@wU4de9 (make-record-constructor-descriptor wU4ded@wU4de8 wU4dae@wU4da6 wU4def@wU4dea)) (set! wU4f3e@wU4df1@wU4de9 wU4df1@wU4de9) (set! wU4df4@p? (record-predicate wU4ded@wU4de8)) (set! wU4f3f@wU4df4@p? wU4df4@p?) (set! wU4df6@make-i/o-file-already-exists-error (record-constructor wU4df1@wU4de9)) (set! wU4f40@wU4df6@make-i/o-file-already-exists-error wU4df6@make-i/o-file-already-exists-error) (set! wU4df8@i/o-file-already-exists-error? (condition-predicate wU4ded@wU4de8)) (set! wU4f41@wU4df8@i/o-file-already-exists-error? wU4df8@i/o-file-already-exists-error?) (set! wU4dfa@&i/o-file-already-exists-rtd wU4ded@wU4de8) (set! wU4f42@wU4dfa@&i/o-file-already-exists-rtd wU4dfa@&i/o-file-already-exists-rtd) (set! wU4dfc@&i/o-file-already-exists-rcd wU4df1@wU4de9) (set! wU4f43@wU4dfc@&i/o-file-already-exists-rcd wU4dfc@&i/o-file-already-exists-rcd) (set! wU4e02@wU4dfd (make-record-type-descriptor '&i/o-file-does-not-exist wU4daa@wU4da5 'wU4e00 '#f '#f '#())) (set! wU4f44@wU4e02@wU4dfd wU4e02@wU4dfd) (set! wU4e04@wU4dff '#f) (set! wU4f45@wU4e04@wU4dff wU4e04@wU4dff) (set! wU4e06@wU4dfe (make-record-constructor-descriptor wU4e02@wU4dfd wU4dae@wU4da6 wU4e04@wU4dff)) (set! wU4f46@wU4e06@wU4dfe wU4e06@wU4dfe) (set! wU4e09@p? (record-predicate wU4e02@wU4dfd)) (set! wU4f47@wU4e09@p? wU4e09@p?) (set! wU4e0b@make-i/o-file-does-not-exist-error (record-constructor wU4e06@wU4dfe)) (set! wU4f48@wU4e0b@make-i/o-file-does-not-exist-error wU4e0b@make-i/o-file-does-not-exist-error) (set! wU4e0d@i/o-file-does-not-exist-error? (condition-predicate wU4e02@wU4dfd)) (set! wU4f49@wU4e0d@i/o-file-does-not-exist-error? wU4e0d@i/o-file-does-not-exist-error?) (set! wU4e0f@&i/o-file-does-not-exist-rtd wU4e02@wU4dfd) (set! wU4f4a@wU4e0f@&i/o-file-does-not-exist-rtd wU4e0f@&i/o-file-does-not-exist-rtd) (set! wU4e11@&i/o-file-does-not-exist-rcd wU4e06@wU4dfe) (set! wU4f4b@wU4e11@&i/o-file-does-not-exist-rcd wU4e11@&i/o-file-does-not-exist-rcd) (set! wU4e19@wU4e14 (make-record-type-descriptor '&i/o-port wU4d4e@wU4d49 'wU4e17 '#f '#f '#((immutable port)))) (set! wU4f4c@wU4e19@wU4e14 wU4e19@wU4e14) (set! wU4e1b@wU4e16 '#f) (set! wU4f4d@wU4e1b@wU4e16 wU4e1b@wU4e16) (set! wU4e1d@wU4e15 (make-record-constructor-descriptor wU4e19@wU4e14 wU4d52@wU4d4a wU4e1b@wU4e16)) (set! wU4f4e@wU4e1d@wU4e15 wU4e1d@wU4e15) (set! wU4e20@p? (record-predicate wU4e19@wU4e14)) (set! wU4f4f@wU4e20@p? wU4e20@p?) (set! wU4e22@make-i/o-port-error (record-constructor wU4e1d@wU4e15)) (set! wU4f50@wU4e22@make-i/o-port-error wU4e22@make-i/o-port-error) (set! wU4e24@wU4e13 (record-accessor wU4e19@wU4e14 '0)) (set! wU4f51@wU4e24@wU4e13 wU4e24@wU4e13) (set! wU4e26@i/o-port-error? (condition-predicate wU4e19@wU4e14)) (set! wU4f52@wU4e26@i/o-port-error? wU4e26@i/o-port-error?) (set! wU4e28@i/o-error-port (condition-accessor wU4e19@wU4e14 wU4e24@wU4e13)) (set! wU4f53@wU4e28@i/o-error-port wU4e28@i/o-error-port) (set! wU4e2a@&i/o-port-rtd wU4e19@wU4e14) (set! wU4f54@wU4e2a@&i/o-port-rtd wU4e2a@&i/o-port-rtd) (set! wU4e2c@&i/o-port-rcd wU4e1d@wU4e15) (set! wU4f55@wU4e2c@&i/o-port-rcd wU4e2c@&i/o-port-rcd) (set! wU4e32@wU4e2d (make-record-type-descriptor '&i/o-decoding wU4e19@wU4e14 'wU4e30 '#f '#f '#())) (set! wU4f56@wU4e32@wU4e2d wU4e32@wU4e2d) (set! wU4e34@wU4e2f '#f) (set! wU4f57@wU4e34@wU4e2f wU4e34@wU4e2f) (set! wU4e36@wU4e2e (make-record-constructor-descriptor wU4e32@wU4e2d wU4e1d@wU4e15 wU4e34@wU4e2f)) (set! wU4f58@wU4e36@wU4e2e wU4e36@wU4e2e) (set! wU4e39@p? (record-predicate wU4e32@wU4e2d)) (set! wU4f59@wU4e39@p? wU4e39@p?) (set! wU4e3b@make-i/o-decoding-error (record-constructor wU4e36@wU4e2e)) (set! wU4f5a@wU4e3b@make-i/o-decoding-error wU4e3b@make-i/o-decoding-error) (set! wU4e3d@i/o-decoding-error? (condition-predicate wU4e32@wU4e2d)) (set! wU4f5b@wU4e3d@i/o-decoding-error? wU4e3d@i/o-decoding-error?) (set! wU4e3f@&i/o-decoding-rtd wU4e32@wU4e2d) (set! wU4f5c@wU4e3f@&i/o-decoding-rtd wU4e3f@&i/o-decoding-rtd) (set! wU4e41@&i/o-decoding-rcd wU4e36@wU4e2e) (set! wU4f5d@wU4e41@&i/o-decoding-rcd wU4e41@&i/o-decoding-rcd) (set! wU4e49@wU4e44 (make-record-type-descriptor '&i/o-encoding wU4e19@wU4e14 'wU4e47 '#f '#f '#((immutable char)))) (set! wU4f5e@wU4e49@wU4e44 wU4e49@wU4e44) (set! wU4e4b@wU4e46 '#f) (set! wU4f5f@wU4e4b@wU4e46 wU4e4b@wU4e46) (set! wU4e4d@wU4e45 (make-record-constructor-descriptor wU4e49@wU4e44 wU4e1d@wU4e15 wU4e4b@wU4e46)) (set! wU4f60@wU4e4d@wU4e45 wU4e4d@wU4e45) (set! wU4e50@p? (record-predicate wU4e49@wU4e44)) (set! wU4f61@wU4e50@p? wU4e50@p?) (set! wU4e52@make-i/o-encoding-error (record-constructor wU4e4d@wU4e45)) (set! wU4f62@wU4e52@make-i/o-encoding-error wU4e52@make-i/o-encoding-error) (set! wU4e54@wU4e43 (record-accessor wU4e49@wU4e44 '0)) (set! wU4f63@wU4e54@wU4e43 wU4e54@wU4e43) (set! wU4e56@i/o-encoding-error? (condition-predicate wU4e49@wU4e44)) (set! wU4f64@wU4e56@i/o-encoding-error? wU4e56@i/o-encoding-error?) (set! wU4e58@i/o-encoding-error-char (condition-accessor wU4e49@wU4e44 wU4e54@wU4e43)) (set! wU4f65@wU4e58@i/o-encoding-error-char wU4e58@i/o-encoding-error-char) (set! wU4e5a@&i/o-encoding-rtd wU4e49@wU4e44) (set! wU4f66@wU4e5a@&i/o-encoding-rtd wU4e5a@&i/o-encoding-rtd) (set! wU4e5c@&i/o-encoding-rcd wU4e4d@wU4e45) (set! wU4f67@wU4e5c@&i/o-encoding-rcd wU4e5c@&i/o-encoding-rcd) (set! wU4e62@wU4e5d (make-record-type-descriptor '&no-infinities wU4cee@wU4ce9 'wU4e60 '#f '#f '#())) (set! wU4f68@wU4e62@wU4e5d wU4e62@wU4e5d) (set! wU4e64@wU4e5f '#f) (set! wU4f69@wU4e64@wU4e5f wU4e64@wU4e5f) (set! wU4e66@wU4e5e (make-record-constructor-descriptor wU4e62@wU4e5d wU4cf2@wU4cea wU4e64@wU4e5f)) (set! wU4f6a@wU4e66@wU4e5e wU4e66@wU4e5e) (set! wU4e69@p? (record-predicate wU4e62@wU4e5d)) (set! wU4f6b@wU4e69@p? wU4e69@p?) (set! wU4e6b@make-no-infinities-violation (record-constructor wU4e66@wU4e5e)) (set! wU4f6c@wU4e6b@make-no-infinities-violation wU4e6b@make-no-infinities-violation) (set! wU4e6d@no-infinities-violation? (condition-predicate wU4e62@wU4e5d)) (set! wU4f6d@wU4e6d@no-infinities-violation? wU4e6d@no-infinities-violation?) (set! wU4e6f@&no-infinities-rtd wU4e62@wU4e5d) (set! wU4f6e@wU4e6f@&no-infinities-rtd wU4e6f@&no-infinities-rtd) (set! wU4e71@&no-infinities-rcd wU4e66@wU4e5e) (set! wU4f6f@wU4e71@&no-infinities-rcd wU4e71@&no-infinities-rcd) (set! wU4e77@wU4e72 (make-record-type-descriptor '&no-nans wU4cee@wU4ce9 'wU4e75 '#f '#f '#())) (set! wU4f70@wU4e77@wU4e72 wU4e77@wU4e72) (set! wU4e79@wU4e74 '#f) (set! wU4f71@wU4e79@wU4e74 wU4e79@wU4e74) (set! wU4e7b@wU4e73 (make-record-constructor-descriptor wU4e77@wU4e72 wU4cf2@wU4cea wU4e79@wU4e74)) (set! wU4f72@wU4e7b@wU4e73 wU4e7b@wU4e73) (set! wU4e7e@p? (record-predicate wU4e77@wU4e72)) (set! wU4f73@wU4e7e@p? wU4e7e@p?) (set! wU4e80@make-no-nans-violation (record-constructor wU4e7b@wU4e73)) (set! wU4f74@wU4e80@make-no-nans-violation wU4e80@make-no-nans-violation) (set! wU4e82@no-nans-violation? (condition-predicate wU4e77@wU4e72)) (set! wU4f75@wU4e82@no-nans-violation? wU4e82@no-nans-violation?) (set! wU4e84@&no-nans-rtd wU4e77@wU4e72) (set! wU4f76@wU4e84@&no-nans-rtd wU4e84@&no-nans-rtd) (set! wU4e86@&no-nans-rcd wU4e7b@wU4e73) (set! wU4f77@wU4e86@&no-nans-rcd wU4e86@&no-nans-rcd) (void))
(begin (begin (wU2a0d@wU29c2@current-primitive-locations (lambda (wU5445@x) (let ((wU5447@t (assq wU5445@x '((&no-nans-rcd . wU4f77@wU4e86@&no-nans-rcd) (&no-nans-rtd . wU4f76@wU4e84@&no-nans-rtd) (&no-infinities-rcd . wU4f6f@wU4e71@&no-infinities-rcd) (&no-infinities-rtd . wU4f6e@wU4e6f@&no-infinities-rtd) (&i/o-encoding-rcd . wU4f67@wU4e5c@&i/o-encoding-rcd) (&i/o-encoding-rtd . wU4f66@wU4e5a@&i/o-encoding-rtd) (&i/o-decoding-rcd . wU4f5d@wU4e41@&i/o-decoding-rcd) (&i/o-decoding-rtd . wU4f5c@wU4e3f@&i/o-decoding-rtd) (&i/o-port-rcd . wU4f55@wU4e2c@&i/o-port-rcd) (&i/o-port-rtd . wU4f54@wU4e2a@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . wU4f4b@wU4e11@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . wU4f4a@wU4e0f@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . wU4f43@wU4dfc@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . wU4f42@wU4dfa@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . wU4f3b@wU4de7@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . wU4f3a@wU4de5@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . wU4f33@wU4dd2@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . wU4f32@wU4dd0@&i/o-file-protection-rtd) (&i/o-filename-rcd . wU4f2b@wU4dbd@&i/o-filename-rcd) (&i/o-filename-rtd . wU4f2a@wU4dbb@&i/o-filename-rtd) (&i/o-invalid-position-rcd . wU4f21@wU4da2@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . wU4f20@wU4da0@&i/o-invalid-position-rtd) (&i/o-write-rcd . wU4f17@wU4d87@&i/o-write-rcd) (&i/o-write-rtd . wU4f16@wU4d85@&i/o-write-rtd) (&i/o-read-rcd . wU4f0f@wU4d72@&i/o-read-rcd) (&i/o-read-rtd . wU4f0e@wU4d70@&i/o-read-rtd) (&i/o-rcd . wU4f07@wU4d5d@&i/o-rcd) (&i/o-rtd . wU4f06@wU4d5b@&i/o-rtd) (&undefined-rcd . wU4eff@wU4d48@&undefined-rcd) (&undefined-rtd . wU4efe@wU4d46@&undefined-rtd) (&syntax-rcd . wU4ef7@wU4d33@&syntax-rcd) (&syntax-rtd . wU4ef6@wU4d31@&syntax-rtd) (&lexical-rcd . wU4eeb@wU4d12@&lexical-rcd) (&lexical-rtd . wU4eea@wU4d10@&lexical-rtd) (&implementation-restriction-rcd . wU4ee3@wU4cfd@&implementation-restriction-rcd) (&implementation-restriction-rtd . wU4ee2@wU4cfb@&implementation-restriction-rtd) (&non-continuable-rcd . wU4edb@wU4ce8@&non-continuable-rcd) (&non-continuable-rtd . wU4eda@wU4ce6@&non-continuable-rtd) (&who-rcd . wU4ed3@wU4cd3@&who-rcd) (&who-rtd . wU4ed2@wU4cd1@&who-rtd) (&irritants-rcd . wU4ec9@wU4cb8@&irritants-rcd) (&irritants-rtd . wU4ec8@wU4cb6@&irritants-rtd) (&assertion-rcd . wU4ebf@wU4c9d@&assertion-rcd) (&assertion-rtd . wU4ebe@wU4c9b@&assertion-rtd) (&violation-rcd . wU4eb7@wU4c88@&violation-rcd) (&violation-rtd . wU4eb6@wU4c86@&violation-rtd) (&error-rcd . wU4eaf@wU4c73@&error-rcd) (&error-rtd . wU4eae@wU4c71@&error-rtd) (&serious-rcd . wU4ea7@wU4c5e@&serious-rcd) (&serious-rtd . wU4ea6@wU4c5c@&serious-rtd) (&warning-rcd . wU4e9f@wU4c49@&warning-rcd) (&warning-rtd . wU4e9e@wU4c47@&warning-rtd) (&message-rcd . wU4e97@wU4c34@&message-rcd) (&message-rtd . wU4e96@wU4c32@&message-rtd) (&condition-rcd . wU4e8d@wU4bd5@&condition-rcd) (&condition-rtd . wU4e8c@wU4bd3@&condition-rtd) (syntax-error . wU4baf@wU3153@syntax-error) (syntax-dispatch . wU4b4d@wU3077@syntax-dispatch) (load . wU50ec@wU4f97@load) (interaction-environment . wU4bb8@wU3165@interaction-environment) (library-path . wU2c74@wU2ab0@library-path) (mosh-cache-dir . wU29bb@wU289b@mosh-cache-dir) (make-parameter . wU29ba@wU2899@make-parameter) (make-variable-transformer . wU4b0a@wU2ea2@make-variable-transformer) (identifier? . wU4bb2@wU3159@identifier?) (generate-temporaries . wU4ba8@wU3145@generate-temporaries) (free-identifier=? . wU4ba9@wU3147@free-identifier=?) (syntax->datum . wU4bb4@wU315d@syntax->datum) (datum->syntax . wU4bb3@wU315b@datum->syntax) (bound-identifier=? . wU4baa@wU3149@bound-identifier=?) (make-i/o-write-error . wU4f14@wU4d81@make-i/o-write-error) (make-i/o-read-error . wU4f0c@wU4d6c@make-i/o-read-error) (make-i/o-port-error . wU4f50@wU4e22@make-i/o-port-error) (make-i/o-invalid-position-error . wU4f1c@wU4d98@make-i/o-invalid-position-error) (make-i/o-filename-error . wU4f26@wU4db3@make-i/o-filename-error) (make-i/o-file-protection-error . wU4f30@wU4dcc@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . wU4f38@wU4de1@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . wU4f48@wU4e0b@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . wU4f40@wU4df6@make-i/o-file-already-exists-error) (make-i/o-error . wU4f04@wU4d57@make-i/o-error) (make-i/o-encoding-error . wU4f62@wU4e52@make-i/o-encoding-error) (make-i/o-decoding-error . wU4f5a@wU4e3b@make-i/o-decoding-error) (i/o-write-error? . wU4f15@wU4d83@i/o-write-error?) (i/o-read-error? . wU4f0d@wU4d6e@i/o-read-error?) (i/o-port-error? . wU4f52@wU4e26@i/o-port-error?) (i/o-invalid-position-error? . wU4f1e@wU4d9c@i/o-invalid-position-error?) (i/o-filename-error? . wU4f28@wU4db7@i/o-filename-error?) (i/o-file-protection-error? . wU4f31@wU4dce@i/o-file-protection-error?) (i/o-file-is-read-only-error? . wU4f39@wU4de3@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . wU4f49@wU4e0d@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . wU4f41@wU4df8@i/o-file-already-exists-error?) (i/o-error? . wU4f05@wU4d59@i/o-error?) (i/o-error-position . wU4f1f@wU4d9e@i/o-error-position) (i/o-error-port . wU4f53@wU4e28@i/o-error-port) (i/o-error-filename . wU4f29@wU4db9@i/o-error-filename) (i/o-encoding-error? . wU4f64@wU4e56@i/o-encoding-error?) (i/o-encoding-error-char . wU4f65@wU4e58@i/o-encoding-error-char) (i/o-decoding-error? . wU4f5b@wU4e3d@i/o-decoding-error?) (scheme-report-environment . wU4b9f@wU3133@scheme-report-environment) (null-environment . wU4b9e@wU3131@null-environment) (command-line . wU50e9@wU4f91@command-line) (eval . wU4ba1@wU3137@eval) (environment . wU4b9d@wU312f@environment) (who-condition? . wU4ed0@wU4ccd@who-condition?) (warning? . wU4e9d@wU4c45@warning?) (violation? . wU4eb5@wU4c84@violation?) (undefined-violation? . wU4efd@wU4d44@undefined-violation?) (syntax-violation? . wU4ef3@wU4d2b@syntax-violation?) (syntax-violation-subform . wU4ef5@wU4d2f@syntax-violation-subform) (syntax-violation-form . wU4ef4@wU4d2d@syntax-violation-form) (syntax-violation . wU4bb1@wU3157@syntax-violation) (serious-condition? . wU4ea5@wU4c5a@serious-condition?) (non-continuable-violation? . wU4ed9@wU4ce4@non-continuable-violation?) (message-condition? . wU4e94@wU4c2e@message-condition?) (make-who-condition . wU4ece@wU4cc9@make-who-condition) (make-warning . wU4e9c@wU4c43@make-warning) (make-violation . wU4eb4@wU4c82@make-violation) (make-undefined-violation . wU4efc@wU4d42@make-undefined-violation) (make-syntax-violation . wU4ef0@wU4d25@make-syntax-violation) (make-serious-condition . wU4ea4@wU4c58@make-serious-condition) (make-non-continuable-violation . wU4ed8@wU4ce2@make-non-continuable-violation) (make-message-condition . wU4e92@wU4c2a@make-message-condition) (make-lexical-violation . wU4ee8@wU4d0c@make-lexical-violation) (make-irritants-condition . wU4ec4@wU4cae@make-irritants-condition) (make-implementation-restriction-violation . wU4ee0@wU4cf7@make-implementation-restriction-violation) (make-error . wU4eac@wU4c6d@make-error) (make-assertion-violation . wU4ebc@wU4c97@make-assertion-violation) (lexical-violation? . wU4ee9@wU4d0e@lexical-violation?) (irritants-condition? . wU4ec6@wU4cb2@irritants-condition?) (implementation-restriction-violation? . wU4ee1@wU4cf9@implementation-restriction-violation?) (error? . wU4ead@wU4c6f@error?) (condition-who . wU4ed1@wU4ccf@condition-who) (condition-message . wU4e95@wU4c30@condition-message) (condition-irritants . wU4ec7@wU4cb4@condition-irritants) (assertion-violation? . wU4ebd@wU4c99@assertion-violation?) (no-nans-violation? . wU4f75@wU4e82@no-nans-violation?) (no-infinities-violation? . wU4f6d@wU4e6d@no-infinities-violation?) (make-no-nans-violation . wU4f74@wU4e80@make-no-nans-violation) (make-no-infinities-violation . wU4f6c@wU4e6b@make-no-infinities-violation) (assertion-error . wU4bae@wU3151@assertion-error))))) (if wU5447@t (cdr wU5447@t) '#f)))) (wU2c84@wU2ad0@install-library 'wU5422 '(mosh interaction) '() '() '() '() '((regexp? . wU541a) (alist->eq-hash-table . wU5416) (format . wU5413) (string-split . wU5408) (call-process . wU5402) (set-current-directory! . wU53fe) (expand-path . wU53fd) (current-directory . wU53fc) (%spawn . wU53fb) (%waitpid . wU53fa) (simple-struct-name . wU53f9) (simple-struct-set! . wU53f8) (simple-struct-ref . wU53f7) (make-simple-struct . wU53f6) (simple-struct? . wU53f5) (pointer-ref-c-int64 . wU53f4) (pointer-ref-c-int32 . wU53f3) (pointer-ref-c-int16 . wU53f2) (pointer-ref-c-int8 . wU53f1) (pointer-ref-c-uint64 . wU53f0) (pointer-ref-c-uint32 . wU53ef) (pointer-ref-c-uint16 . wU53ee) (pointer-ref-c-uint8 . wU53ed) (pointer-set-c-uint64! . wU53ec) (pointer-set-c-uint32! . wU53eb) (pointer-set-c-uint16! . wU53ea) (pointer-set-c-uint8! . wU53e9) (pointer-set-c-int64! . wU53e8) (pointer-set-c-int32! . wU53e7) (pointer-set-c-int16! . wU53e6) (pointer-set-c-int8! . wU53e5) (pointer-set-c-pointer! . wU53e4) (pointer-set-c-double! . wU53e3) (pointer-set-c-float! . wU53e2) (pointer-set-c-long-long! . wU53e1) (pointer-set-c-long! . wU53e0) (pointer-set-c-int! . wU53df) (pointer-set-c-short! . wU53de) (pointer-set-c-char! . wU53dd) (pointer-ref-c-pointer . wU53dc) (pointer-ref-c-double . wU53db) (pointer-ref-c-float . wU53da) (pointer-ref-c-unsigned-long-long . wU53d9) (pointer-ref-c-signed-long-long . wU53d8) (pointer-ref-c-unsigned-long . wU53d7) (pointer-ref-c-signed-long . wU53d6) (pointer-ref-c-unsigned-int . wU53d5) (pointer-ref-c-signed-int . wU53d4) (pointer-ref-c-unsigned-short . wU53d3) (pointer-ref-c-signed-short . wU53d2) (pointer-ref-c-unsigned-char . wU53d1) (pointer-ref-c-signed-char . wU53d0) (pointer->integer . wU53cf) (integer->pointer . wU53ce) (pointer? . wU53cd) (shared-errno . wU53cc) (%ffi-supported? . wU53c7) (%ffi-pointer->string . wU53c6) (%ffi-call->string-or-zero . wU53c5) (%ffi-call->double . wU53c4) (%ffi-call->void* . wU53c3) (%ffi-call->void . wU53c2) (%ffi-call->char . wU53c1) (%ffi-call->int . wU53c0) (%ffi-lookup . wU53bf) (%ffi-open . wU53be) (%fork . wU53bd) (%pipe . wU53bc) (p . wU53bb) (whereis . wU539f) (register . wU539e) (vm-join! . wU539d) (vm-set-value! . wU539c) (vm? . wU539b) (main-vm? . wU539a) (vm-eval . wU5399) (vm-self . wU5398) (vm-start! . wU5397) (make-vm . wU5396) (mutex-try-lock! . wU5395) (mutex-unlock! . wU5394) (mutex-lock! . wU5393) (mutex? . wU5392) (make-mutex . wU5391) (condition-variable-notify-all! . wU5390) (condition-variable-notify! . wU538f) (condition-variable-wait! . wU538e) (make-condition-variable . wU538d) (string-upcase . wU5375) (string-titlecase . wU5374) (string-normalize-nfkd . wU5373) (string-normalize-nfkc . wU5372) (string-normalize-nfd . wU5371) (string-normalize-nfc . wU5370) (string-foldcase . wU536f) (string-downcase . wU536e) (string-ci>? . wU536d) (string-ci>=? . wU536c) (string-ci=? . wU536b) (string-ci<? . wU536a) (string-ci<=? . wU5369) (char-whitespace? . wU5368) (char-upper-case? . wU5367) (char-title-case? . wU5366) (char-numeric? . wU5365) (char-lower-case? . wU5364) (char-general-category . wU5363) (char-upcase . wU5362) (char-titlecase . wU5361) (char-foldcase . wU5360) (char-downcase . wU535f) (char-ci>? . wU535e) (char-ci>=? . wU535d) (char-ci=? . wU535c) (char-ci<? . wU535b) (char-ci<=? . wU535a) (char-alphabetic? . wU5359) (make-variable-transformer . wU2ea1) (identifier? . wU3158) (generate-temporaries . wU3144) (free-identifier=? . wU3146) (syntax->datum . wU315c) (datum->syntax . wU315a) (bound-identifier=? . wU3148) (record-type-descriptor? . wU5358) (record-predicate . wU5357) (record-mutator . wU5356) (record-constructor . wU5355) (record-accessor . wU5354) (make-record-type-descriptor . wU5353) (make-record-constructor-descriptor . wU5352) (record? . wU5351) (record-type-uid . wU5350) (record-type-sealed? . wU534f) (record-type-parent . wU534e) (record-type-opaque? . wU534d) (record-type-name . wU534c) (record-type-generative? . wU534b) (record-type-field-names . wU534a) (record-rtd . wU5349) (record-field-mutable? . wU5348) (delete-file . wU5347) (file-exists? . wU5346) (vector-sort! . wU5345) (vector-sort . wU5344) (list-sort . wU5343) (symbol-hash . wU5342) (string-ci-hash . wU5341) (string-hash . wU5340) (equal-hash . wU533f) (hashtable-equivalence-function . wU533e) (make-hashtable . wU533d) (hashtable-hash-function . wU533c) (make-eqv-hashtable . wU533b) (make-eq-hashtable . wU533a) (hashtable? . wU5339) (hashtable-update! . wU5338) (hashtable-size . wU5337) (hashtable-set! . wU5336) (hashtable-ref . wU5335) (hashtable-mutable? . wU5334) (hashtable-keys . wU5333) (hashtable-entries . wU5332) (hashtable-delete! . wU5331) (hashtable-copy . wU5330) (hashtable-contains? . wU532f) (hashtable-clear! . wU532e) (call-with-output-file . wU532d) (call-with-input-file . wU532c) (write-char . wU532b) (write . wU532a) (with-output-to-file . wU5329) (with-input-from-file . wU5328) (read-char . wU5327) (read . wU5326) (peek-char . wU5325) (open-output-file . wU5324) (open-input-file . wU5323) (newline . wU5322) (display . wU5321) (close-output-port . wU5320) (close-input-port . wU531f) (eof-object? . wU531e) (eof-object . wU531d) (current-error-port . wU531c) (current-output-port . wU531b) (current-input-port . wU531a) (output-port? . wU5319) (input-port? . wU5318) (utf-8-codec . wU5317) (utf-16-codec . wU5316) (transcoder-error-handling-mode . wU5315) (transcoder-eol-style . wU5314) (transcoder-codec . wU5313) (transcoded-port . wU5312) (textual-port? . wU5311) (string->bytevector . wU5310) (standard-output-port . wU530f) (standard-input-port . wU530e) (standard-error-port . wU530d) (set-port-position! . wU530c) (put-u8 . wU530b) (put-string . wU530a) (put-datum . wU5309) (put-char . wU5308) (put-bytevector . wU5307) (port? . wU5306) (port-transcoder . wU5305) (port-position . wU5304) (port-has-set-port-position!? . wU5303) (port-has-port-position? . wU5302) (port-eof? . wU5301) (output-port-buffer-mode . wU5300) (open-string-output-port . wU52ff) (open-string-input-port . wU52fe) (open-file-output-port . wU52fd) (open-file-input/output-port . wU52fc) (open-file-input-port . wU52fb) (open-bytevector-output-port . wU52fa) (open-bytevector-input-port . wU52f9) (native-transcoder . wU52f8) (native-eol-style . wU52f7) (make-transcoder . wU52f6) (latin-1-codec . wU52f5) (make-i/o-write-error . wU4d80) (make-i/o-read-error . wU4d6b) (make-i/o-port-error . wU4e21) (make-i/o-invalid-position-error . wU4d97) (make-i/o-filename-error . wU4db2) (make-i/o-file-protection-error . wU4dcb) (make-i/o-file-is-read-only-error . wU4de0) (make-i/o-file-does-not-exist-error . wU4e0a) (make-i/o-file-already-exists-error . wU4df5) (make-i/o-error . wU4d56) (make-i/o-encoding-error . wU4e51) (make-i/o-decoding-error . wU4e3a) (make-custom-textual-output-port . wU52f4) (make-custom-textual-input/output-port . wU52f3) (make-custom-textual-input-port . wU52f2) (make-custom-binary-output-port . wU52f1) (make-custom-binary-input/output-port . wU52f0) (make-custom-binary-input-port . wU52ef) (make-bytevector . wU52ee) (lookahead-u8 . wU52ed) (lookahead-char . wU52ec) (i/o-write-error? . wU4d82) (i/o-read-error? . wU4d6d) (i/o-port-error? . wU4e25) (i/o-invalid-position-error? . wU4d9b) (i/o-filename-error? . wU4db6) (i/o-file-protection-error? . wU4dcd) (i/o-file-is-read-only-error? . wU4de2) (i/o-file-does-not-exist-error? . wU4e0c) (i/o-file-already-exists-error? . wU4df7) (i/o-error? . wU4d58) (i/o-error-position . wU4d9d) (i/o-error-port . wU4e27) (i/o-error-filename . wU4db8) (i/o-encoding-error? . wU4e55) (i/o-encoding-error-char . wU4e57) (i/o-decoding-error? . wU4e3c) (get-u8 . wU52eb) (get-string-n! . wU52ea) (get-string-n . wU52e9) (get-string-all . wU52e8) (get-line . wU52e7) (get-datum . wU52e6) (get-char . wU52e5) (get-bytevector-some . wU52e4) (get-bytevector-n! . wU52e3) (get-bytevector-n . wU52e2) (get-bytevector-all . wU52e1) (flush-output-port . wU52e0) (close-port . wU52df) (exit . wU52d7) (command-line . wU4f90) (string-fill! . wU52d6) (string-set! . wU52d5) (set-cdr! . wU52d4) (set-car! . wU52d3) (remove . wU52d2) (remv . wU52d1) (remp . wU52d0) (remq . wU52cf) (partition . wU52ce) (memv . wU52cd) (memq . wU52cc) (memp . wU52cb) (member . wU52ca) (exists . wU52c9) (for-all . wU52c8) (fold-right . wU52c7) (fold-left . wU52c6) (find . wU52c5) (filter . wU52c4) (cons* . wU52c3) (assv . wU52c2) (assq . wU52c1) (assp . wU52c0) (assoc . wU52bf) (call-with-string-output-port . wU52be) (call-with-port . wU52bd) (call-with-bytevector-output-port . wU52bc) (bytevector->string . wU52bb) (buffer-mode? . wU52ba) (binary-port? . wU52b9) (with-exception-handler . wU52b8) (raise-continuable . wU52b7) (raise . wU52b6) (eval . wU3136) (environment . wU312e) (make-enumeration . wU52b5) (enum-set=? . wU52b4) (enum-set-universe . wU52b3) (enum-set-union . wU52b2) (enum-set-subset? . wU52b1) (enum-set-projection . wU52b0) (enum-set-member? . wU52af) (enum-set-intersection . wU52ae) (enum-set-indexer . wU52ad) (enum-set-difference . wU52ac) (enum-set-constructor . wU52ab) (enum-set-complement . wU52aa) (enum-set->list . wU52a9) (who-condition? . wU4ccc) (warning? . wU4c44) (violation? . wU4c83) (undefined-violation? . wU4d43) (syntax-violation? . wU4d2a) (syntax-violation-subform . wU4d2e) (syntax-violation-form . wU4d2c) (syntax-violation . wU3156) (simple-conditions . wU52a8) (serious-condition? . wU4c59) (non-continuable-violation? . wU4ce3) (message-condition? . wU4c2d) (make-who-condition . wU4cc8) (make-warning . wU4c42) (make-violation . wU4c81) (make-undefined-violation . wU4d41) (make-syntax-violation . wU4d24) (make-serious-condition . wU4c57) (make-non-continuable-violation . wU4ce1) (make-message-condition . wU4c29) (make-lexical-violation . wU4d0b) (make-irritants-condition . wU4cad) (make-implementation-restriction-violation . wU4cf6) (make-error . wU4c6c) (make-assertion-violation . wU4c96) (lexical-violation? . wU4d0d) (irritants-condition? . wU4cb1) (implementation-restriction-violation? . wU4cf8) (error? . wU4c6e) (condition-who . wU4cce) (condition-predicate . wU52a7) (condition-message . wU4c2f) (condition-irritants . wU4cb3) (condition-accessor . wU52a6) (condition . wU52a5) (assertion-violation? . wU4c98) (condition? . wU52a4) (utf32->string . wU52a3) (utf16->string . wU52a2) (utf8->string . wU52a1) (uint-list->bytevector . wU52a0) (u8-list->bytevector . wU529f) (string->utf8 . wU529e) (string->utf32 . wU529d) (string->utf16 . wU529c) (sint-list->bytevector . wU529b) (native-endianness . wU529a) (bytevector? . wU5299) (bytevector=? . wU5298) (bytevector-uint-set! . wU5297) (bytevector-uint-ref . wU5296) (bytevector-u8-set! . wU5295) (bytevector-u8-ref . wU5294) (bytevector-u64-set! . wU5293) (bytevector-u64-ref . wU5292) (bytevector-u64-native-set! . wU5291) (bytevector-u64-native-ref . wU5290) (bytevector-u32-set! . wU528f) (bytevector-u32-ref . wU528e) (bytevector-u32-native-set! . wU528d) (bytevector-u32-native-ref . wU528c) (bytevector-u16-set! . wU528b) (bytevector-u16-ref . wU528a) (bytevector-u16-native-set! . wU5289) (bytevector-u16-native-ref . wU5288) (bytevector-sint-set! . wU5287) (bytevector-sint-ref . wU5286) (bytevector-s8-set! . wU5285) (bytevector-s8-ref . wU5284) (bytevector-s64-set! . wU5283) (bytevector-s64-ref . wU5282) (bytevector-s64-native-set! . wU5281) (bytevector-s64-native-ref . wU5280) (bytevector-s32-set! . wU527f) (bytevector-s32-ref . wU527e) (bytevector-s32-native-set! . wU527d) (bytevector-s32-native-ref . wU527c) (bytevector-s16-set! . wU527b) (bytevector-s16-ref . wU527a) (bytevector-s16-native-set! . wU5279) (bytevector-s16-native-ref . wU5278) (bytevector-length . wU5277) (bytevector-ieee-single-ref . wU5276) (bytevector-ieee-single-set! . wU5275) (bytevector-ieee-single-native-set! . wU5274) (bytevector-ieee-single-native-ref . wU5273) (bytevector-ieee-double-set! . wU5272) (bytevector-ieee-double-ref . wU5271) (bytevector-ieee-double-native-set! . wU5270) (bytevector-ieee-double-native-ref . wU526f) (bytevector-fill! . wU526e) (bytevector-copy! . wU526d) (bytevector-copy . wU526c) (bytevector->uint-list . wU526b) (bytevector->u8-list . wU526a) (bytevector->sint-list . wU5269) (no-nans-violation? . wU4e81) (no-infinities-violation? . wU4e6c) (make-no-nans-violation . wU4e7f) (make-no-infinities-violation . wU4e6a) (real->flonum . wU5268) (flzero? . wU5267) (fltruncate . wU5266) (fltan . wU5265) (flsqrt . wU5264) (flsin . wU5263) (flround . wU5262) (flpositive? . wU5261) (flonum? . wU5260) (flodd? . wU525f) (flnumerator . wU525e) (flnegative? . wU525d) (flnan? . wU525c) (flmod0 . wU525b) (flmod . wU525a) (flmin . wU5259) (flmax . wU5258) (fllog . wU5257) (flinteger? . wU5256) (flinfinite? . wU5255) (flfloor . wU5254) (flfinite? . wU5253) (flexpt . wU5252) (flexp . wU5251) (fleven? . wU5250) (fldiv0-and-mod0 . wU524f) (fldiv0 . wU524e) (fldiv-and-mod . wU524d) (fldiv . wU524c) (fldenominator . wU524b) (flcos . wU524a) (flceiling . wU5249) (flatan . wU5248) (flasin . wU5247) (flacos . wU5246) (flabs . wU5245) (fl>? . wU5244) (fl>=? . wU5243) (fl=? . wU5242) (fl<? . wU5241) (fl<=? . wU5240) (fl/ . wU523f) (fl- . wU523e) (fl+ . wU523d) (fl* . wU523c) (fixnum->flonum . wU523b) (fxzero? . wU523a) (fxxor . wU5239) (fxrotate-bit-field . wU5238) (fxreverse-bit-field . wU5237) (fxpositive? . wU5236) (fxodd? . wU5235) (fxnot . wU5234) (fxnegative? . wU5233) (fxmod0 . wU5232) (fxmod . wU5231) (fxmin . wU5230) (fxmax . wU522f) (fxlength . wU522e) (fxior . wU522d) (fxif . wU522c) (fxfirst-bit-set . wU522b) (fxeven? . wU522a) (fxdiv0-and-mod0 . wU5229) (fxdiv0 . wU5228) (fxdiv-and-mod . wU5227) (fxdiv . wU5226) (fxcopy-bit-field . wU5225) (fxcopy-bit . wU5224) (fxbit-set? . wU5223) (fxbit-field . wU5222) (fxbit-count . wU5221) (fxarithmetic-shift-right . wU5220) (fxarithmetic-shift-left . wU521f) (fxarithmetic-shift . wU521e) (fxand . wU521d) (fx>? . wU521c) (fx>=? . wU521b) (fx=? . wU521a) (fx<? . wU5219) (fx<=? . wU5218) (fx-/carry . wU5217) (fx- . wU5216) (fx+/carry . wU5215) (fx+ . wU5214) (fx*/carry . wU5213) (fx* . wU5212) (greatest-fixnum . wU5211) (least-fixnum . wU5210) (fixnum-width . wU520f) (fixnum? . wU520e) (bitwise-rotate-bit-field . wU520d) (bitwise-reverse-bit-field . wU520c) (bitwise-length . wU520b) (bitwise-if . wU520a) (bitwise-first-bit-set . wU5209) (bitwise-copy-bit-field . wU5208) (bitwise-copy-bit . wU5207) (bitwise-bit-set? . wU5206) (bitwise-bit-field . wU5205) (bitwise-bit-count . wU5204) (bitwise-xor . wU5203) (bitwise-ior . wU5202) (bitwise-and . wU5201) (bitwise-not . wU5200) (bitwise-arithmetic-shift-right . wU51ff) (bitwise-arithmetic-shift-left . wU51fe) (bitwise-arithmetic-shift . wU51fd) (zero? . wU51fc) (vector? . wU51fb) (vector-set! . wU51fa) (vector-ref . wU51f9) (vector-map . wU51f8) (vector-length . wU51f7) (vector-for-each . wU51f6) (vector-fill! . wU51f5) (vector->list . wU51f4) (vector . wU51f3) (values . wU51f2) (truncate . wU51f1) (tan . wU51f0) (symbol? . wU51ef) (symbol=? . wU51ee) (symbol->string . wU51ed) (substring . wU51ec) (string? . wU51eb) (string>? . wU51ea) (string>=? . wU51e9) (string=? . wU51e8) (string<? . wU51e7) (string<=? . wU51e6) (string-ref . wU51e5) (string-length . wU51e4) (string-for-each . wU51e3) (string-copy . wU51e2) (string-append . wU51e1) (string->symbol . wU51e0) (string->number . wU51df) (string->list . wU51de) (string . wU51dd) (sqrt . wU51dc) (sin . wU51db) (round . wU51da) (reverse . wU51d9) (real? . wU51d8) (real-valued? . wU51d7) (real-part . wU51d6) (rationalize . wU51d5) (rational? . wU51d4) (rational-valued? . wU51d3) (procedure? . wU51d2) (positive? . wU51d1) (pair? . wU51d0) (odd? . wU51cf) (numerator . wU51ce) (number? . wU51cd) (number->string . wU51cc) (null? . wU51cb) (not . wU51ca) (negative? . wU51c9) (nan? . wU51c8) (min . wU51c7) (max . wU51c6) (map . wU51c5) (make-vector . wU51c4) (make-string . wU51c3) (make-rectangular . wU51c2) (make-polar . wU51c1) (magnitude . wU51c0) (log . wU51bf) (list? . wU51be) (list-tail . wU51bd) (list-ref . wU51bc) (list->vector . wU51bb) (list->string . wU51ba) (list . wU51b9) (length . wU51b8) (lcm . wU51b7) (integer? . wU51b6) (integer-valued? . wU51b5) (integer->char . wU51b4) (infinite? . wU51b3) (inexact? . wU51b2) (inexact . wU51b1) (imag-part . wU51b0) (gcd . wU51af) (for-each . wU51ae) (floor . wU51ad) (finite? . wU51ac) (expt . wU51ab) (exp . wU51aa) (exact? . wU51a9) (exact-integer-sqrt . wU51a8) (exact . wU51a7) (even? . wU51a6) (error . wU51a5) (eqv? . wU51a4) (equal? . wU51a3) (eq? . wU51a2) (dynamic-wind . wU51a1) (div0-and-mod0 . wU51a0) (mod0 . wU519f) (div0 . wU519e) (div-and-mod . wU519d) (mod . wU519c) (div . wU519b) (denominator . wU519a) (cos . wU5199) (cons . wU5198) (complex? . wU5197) (char? . wU5196) (char>? . wU5195) (char>=? . wU5194) (char=? . wU5193) (char<? . wU5192) (char<=? . wU5191) (char->integer . wU5190) (ceiling . wU518f) (call-with-values . wU518e) (call/cc . wU518d) (call-with-current-continuation . wU518c) (cddddr . wU518b) (cdddar . wU518a) (cddadr . wU5189) (cddaar . wU5188) (cdaddr . wU5187) (cdadar . wU5186) (cdaadr . wU5185) (cdaaar . wU5184) (cadddr . wU5183) (caddar . wU5182) (cadadr . wU5181) (cadaar . wU5180) (caaddr . wU517f) (caadar . wU517e) (caaadr . wU517d) (caaaar . wU517c) (cdddr . wU517b) (cddar . wU517a) (cdadr . wU5179) (cdaar . wU5178) (caddr . wU5177) (cadar . wU5176) (caadr . wU5175) (caaar . wU5174) (cddr . wU5173) (cdar . wU5172) (cadr . wU5171) (caar . wU5170) (cdr . wU516f) (car . wU516e) (boolean? . wU516d) (boolean=? . wU516c) (atan . wU516b) (assertion-violation . wU516a) (asin . wU5169) (apply . wU5168) (append . wU5167) (angle . wU5166) (acos . wU5165) (abs . wU5164) (/ . wU5163) (* . wU5162) (- . wU5161) (+ . wU5160) (>= . wU515f) (> . wU515e) (= . wU515d) (<= . wU515c) (< . wU515b) (library . wU515a) (&no-nans . wU5159) (&no-infinities . wU5158) (&i/o-encoding . wU5157) (&i/o-decoding . wU5156) (&i/o-port . wU5155) (&i/o-file-does-not-exist . wU5154) (&i/o-file-already-exists . wU5153) (&i/o-file-is-read-only . wU5152) (&i/o-file-protection . wU5151) (&i/o-filename . wU5150) (&i/o-invalid-position . wU514f) (&i/o-write . wU514e) (&i/o-read . wU514d) (&i/o . wU514c) (&undefined . wU514b) (&syntax . wU514a) (&lexical . wU5149) (&implementation-restriction . wU5148) (&non-continuable . wU5147) (&who . wU5146) (&irritants . wU5145) (&assertion . wU5144) (&violation . wU5143) (&error . wU5142) (&serious . wU5141) (&warning . wU5140) (&message . wU513f) (&condition . wU513e) (define-condition-type . wU513d) (define-enumeration . wU513c) (define-record-type . wU513b) (parent-rtd . wU513a) (nongenerative . wU5139) (opaque . wU5138) (sealed . wU5137) (protocol . wU5136) (parent . wU5135) (immutable . wU5134) (mutable . wU5133) (fields . wU5132) (error-handling-mode . wU5131) (file-options . wU5130) (buffer-mode . wU512f) (eol-style . wU512e) (guard . wU512d) (unsyntax-splicing . wU512a) (unsyntax . wU5129) (unquote-splicing . wU5128) (unquote . wU5127) (_ . wU5126) (else . wU5125) (=> . wU5124) (... . wU5123) (assert . wU5122) (endianness . wU5121) (time . wU511f) (do . wU511e) (cond . wU511d) (let* . wU511c) (let*-values . wU511b) (let-values . wU511a) (identifier-syntax . wU5119) (with-syntax . wU5118) (quasisyntax . wU5117) (quasiquote . wU5116) (syntax-rules . wU5115) (include . wU5114) (record-constructor-descriptor . wU5112) (record-type-descriptor . wU5111) (case . wU5110) (unless . wU510e) (when . wU510d) (or . wU510c) (and . wU510b) (if . wU510a) (let . wU5109) (letrec* . wU5108) (letrec . wU5107) (case-lambda . wU5105) (lambda . wU5104) (syntax . wU5103) (syntax-case . wU5102) (quote . wU5101) (letrec-syntax . wU50ff) (let-syntax . wU50fe) (set! . wU50fd) (import . wU50fc) (begin . wU50fb) (define-syntax . wU50f9) (define . wU50f8)) '() values values '#f '#f '#t '#f) (wU2c84@wU2ad0@install-library 'wU5423 '(psyntax null-environment-5) '() '() '() '() '((make-promise . wU52d8) (unquote-splicing . wU5128) (unquote . wU5127) (_ . wU5126) (else . wU5125) (=> . wU5124) (... . wU5123) (delay . wU5120) (do . wU511e) (cond . wU511d) (let* . wU511c) (quasiquote . wU5116) (syntax-rules . wU5115) (case . wU5110) (or . wU510c) (and . wU510b) (if . wU510a) (let . wU5109) (letrec . wU5107) (lambda . wU5104) (quote . wU5101) (letrec-syntax . wU50ff) (let-syntax . wU50fe) (set! . wU50fd) (begin . wU50fb) (define-syntax . wU50f9) (define . wU50f8)) '() values values '#f '#f '#t '#f) (wU2c84@wU2ad0@install-library 'wU5424 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . wU536d) (string-ci>=? . wU536c) (string-ci=? . wU536b) (string-ci<? . wU536a) (string-ci<=? . wU5369) (char-whitespace? . wU5368) (char-upper-case? . wU5367) (char-numeric? . wU5365) (char-lower-case? . wU5364) (char-upcase . wU5362) (char-downcase . wU535f) (char-ci>? . wU535e) (char-ci>=? . wU535d) (char-ci=? . wU535c) (char-ci<? . wU535b) (char-ci<=? . wU535a) (char-alphabetic? . wU5359) (call-with-output-file . wU532d) (call-with-input-file . wU532c) (write-char . wU532b) (write . wU532a) (with-output-to-file . wU5329) (with-input-from-file . wU5328) (read-char . wU5327) (read . wU5326) (peek-char . wU5325) (open-output-file . wU5324) (open-input-file . wU5323) (newline . wU5322) (display . wU5321) (close-output-port . wU5320) (close-input-port . wU531f) (eof-object . wU531d) (current-output-port . wU531b) (current-input-port . wU531a) (output-port? . wU5319) (input-port? . wU5318) (scheme-report-environment . wU3132) (quotient . wU52de) (null-environment . wU3130) (remainder . wU52dd) (modulo . wU52dc) (inexact->exact . wU52db) (force . wU52da) (exact->inexact . wU52d9) (make-promise . wU52d8) (string-fill! . wU52d6) (string-set! . wU52d5) (set-cdr! . wU52d4) (set-car! . wU52d3) (memv . wU52cd) (memq . wU52cc) (member . wU52ca) (assv . wU52c2) (assq . wU52c1) (assoc . wU52bf) (eval . wU3136) (zero? . wU51fc) (vector? . wU51fb) (vector-set! . wU51fa) (vector-ref . wU51f9) (vector-length . wU51f7) (vector-fill! . wU51f5) (vector->list . wU51f4) (vector . wU51f3) (values . wU51f2) (truncate . wU51f1) (tan . wU51f0) (symbol? . wU51ef) (symbol->string . wU51ed) (substring . wU51ec) (string? . wU51eb) (string>? . wU51ea) (string>=? . wU51e9) (string=? . wU51e8) (string<? . wU51e7) (string<=? . wU51e6) (string-ref . wU51e5) (string-length . wU51e4) (string-copy . wU51e2) (string-append . wU51e1) (string->symbol . wU51e0) (string->number . wU51df) (string->list . wU51de) (string . wU51dd) (sqrt . wU51dc) (sin . wU51db) (round . wU51da) (reverse . wU51d9) (real? . wU51d8) (real-part . wU51d6) (rationalize . wU51d5) (rational? . wU51d4) (procedure? . wU51d2) (positive? . wU51d1) (pair? . wU51d0) (odd? . wU51cf) (numerator . wU51ce) (number? . wU51cd) (number->string . wU51cc) (not . wU51ca) (negative? . wU51c9) (min . wU51c7) (max . wU51c6) (map . wU51c5) (make-vector . wU51c4) (make-string . wU51c3) (make-rectangular . wU51c2) (make-polar . wU51c1) (magnitude . wU51c0) (log . wU51bf) (list? . wU51be) (list-tail . wU51bd) (list-ref . wU51bc) (list->vector . wU51bb) (list->string . wU51ba) (list . wU51b9) (length . wU51b8) (lcm . wU51b7) (integer? . wU51b6) (integer->char . wU51b4) (inexact? . wU51b2) (imag-part . wU51b0) (gcd . wU51af) (for-each . wU51ae) (floor . wU51ad) (expt . wU51ab) (exp . wU51aa) (exact? . wU51a9) (even? . wU51a6) (eqv? . wU51a4) (equal? . wU51a3) (eq? . wU51a2) (dynamic-wind . wU51a1) (denominator . wU519a) (cos . wU5199) (cons . wU5198) (complex? . wU5197) (char? . wU5196) (char>? . wU5195) (char>=? . wU5194) (char=? . wU5193) (char<? . wU5192) (char<=? . wU5191) (char->integer . wU5190) (ceiling . wU518f) (call-with-values . wU518e) (call-with-current-continuation . wU518c) (cddddr . wU518b) (cdddar . wU518a) (cddadr . wU5189) (cddaar . wU5188) (cdaddr . wU5187) (cdadar . wU5186) (cdaadr . wU5185) (cdaaar . wU5184) (cadddr . wU5183) (caddar . wU5182) (cadadr . wU5181) (cadaar . wU5180) (caaddr . wU517f) (caadar . wU517e) (caaadr . wU517d) (caaaar . wU517c) (cdddr . wU517b) (cddar . wU517a) (cdadr . wU5179) (cdaar . wU5178) (caddr . wU5177) (cadar . wU5176) (caadr . wU5175) (caaar . wU5174) (cddr . wU5173) (cdar . wU5172) (cadr . wU5171) (caar . wU5170) (cdr . wU516f) (car . wU516e) (boolean? . wU516d) (atan . wU516b) (asin . wU5169) (apply . wU5168) (append . wU5167) (angle . wU5166) (acos . wU5165) (abs . wU5164) (/ . wU5163) (* . wU5162) (- . wU5161) (+ . wU5160) (>= . wU515f) (> . wU515e) (= . wU515d) (<= . wU515c) (< . wU515b) (unquote-splicing . wU5128) (unquote . wU5127) (else . wU5125) (=> . wU5124) (... . wU5123) (delay . wU5120) (do . wU511e) (cond . wU511d) (let* . wU511c) (quasiquote . wU5116) (syntax-rules . wU5115) (case . wU5110) (or . wU510c) (and . wU510b) (if . wU510a) (let . wU5109) (letrec . wU5107) (lambda . wU5104) (quote . wU5101) (letrec-syntax . wU50ff) (let-syntax . wU50fe) (set! . wU50fd) (begin . wU50fb) (define-syntax . wU50f9) (define . wU50f8)) '() values values '#f '#f '#t '#f) (wU2c84@wU2ad0@install-library 'wU5425 '(psyntax modules) '() '() '() '() '((module . wU50fa)) '() values values '#f '#f '#t '#f) (wU2c84@wU2ad0@install-library 'wU5426 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (wU2c84@wU2ad0@install-library 'wU5427 '(rnrs) '(6) '() '() '() '((regexp? . wU541a) (string-upcase . wU5375) (string-titlecase . wU5374) (string-normalize-nfkd . wU5373) (string-normalize-nfkc . wU5372) (string-normalize-nfd . wU5371) (string-normalize-nfc . wU5370) (string-foldcase . wU536f) (string-downcase . wU536e) (string-ci>? . wU536d) (string-ci>=? . wU536c) (string-ci=? . wU536b) (string-ci<? . wU536a) (string-ci<=? . wU5369) (char-whitespace? . wU5368) (char-upper-case? . wU5367) (char-title-case? . wU5366) (char-numeric? . wU5365) (char-lower-case? . wU5364) (char-general-category . wU5363) (char-upcase . wU5362) (char-titlecase . wU5361) (char-foldcase . wU5360) (char-downcase . wU535f) (char-ci>? . wU535e) (char-ci>=? . wU535d) (char-ci=? . wU535c) (char-ci<? . wU535b) (char-ci<=? . wU535a) (char-alphabetic? . wU5359) (make-variable-transformer . wU2ea1) (identifier? . wU3158) (generate-temporaries . wU3144) (free-identifier=? . wU3146) (syntax->datum . wU315c) (datum->syntax . wU315a) (bound-identifier=? . wU3148) (record-type-descriptor? . wU5358) (record-predicate . wU5357) (record-mutator . wU5356) (record-constructor . wU5355) (record-accessor . wU5354) (make-record-type-descriptor . wU5353) (make-record-constructor-descriptor . wU5352) (record? . wU5351) (record-type-uid . wU5350) (record-type-sealed? . wU534f) (record-type-parent . wU534e) (record-type-opaque? . wU534d) (record-type-name . wU534c) (record-type-generative? . wU534b) (record-type-field-names . wU534a) (record-rtd . wU5349) (record-field-mutable? . wU5348) (delete-file . wU5347) (file-exists? . wU5346) (vector-sort! . wU5345) (vector-sort . wU5344) (list-sort . wU5343) (symbol-hash . wU5342) (string-ci-hash . wU5341) (string-hash . wU5340) (equal-hash . wU533f) (hashtable-equivalence-function . wU533e) (make-hashtable . wU533d) (hashtable-hash-function . wU533c) (make-eqv-hashtable . wU533b) (make-eq-hashtable . wU533a) (hashtable? . wU5339) (hashtable-update! . wU5338) (hashtable-size . wU5337) (hashtable-set! . wU5336) (hashtable-ref . wU5335) (hashtable-mutable? . wU5334) (hashtable-keys . wU5333) (hashtable-entries . wU5332) (hashtable-delete! . wU5331) (hashtable-copy . wU5330) (hashtable-contains? . wU532f) (hashtable-clear! . wU532e) (call-with-output-file . wU532d) (call-with-input-file . wU532c) (write-char . wU532b) (write . wU532a) (with-output-to-file . wU5329) (with-input-from-file . wU5328) (read-char . wU5327) (read . wU5326) (peek-char . wU5325) (open-output-file . wU5324) (open-input-file . wU5323) (newline . wU5322) (display . wU5321) (close-output-port . wU5320) (close-input-port . wU531f) (eof-object? . wU531e) (eof-object . wU531d) (current-error-port . wU531c) (current-output-port . wU531b) (current-input-port . wU531a) (output-port? . wU5319) (input-port? . wU5318) (utf-8-codec . wU5317) (utf-16-codec . wU5316) (transcoder-error-handling-mode . wU5315) (transcoder-eol-style . wU5314) (transcoder-codec . wU5313) (transcoded-port . wU5312) (textual-port? . wU5311) (string->bytevector . wU5310) (standard-output-port . wU530f) (standard-input-port . wU530e) (standard-error-port . wU530d) (set-port-position! . wU530c) (put-u8 . wU530b) (put-string . wU530a) (put-datum . wU5309) (put-char . wU5308) (put-bytevector . wU5307) (port? . wU5306) (port-transcoder . wU5305) (port-position . wU5304) (port-has-set-port-position!? . wU5303) (port-has-port-position? . wU5302) (port-eof? . wU5301) (output-port-buffer-mode . wU5300) (open-string-output-port . wU52ff) (open-string-input-port . wU52fe) (open-file-output-port . wU52fd) (open-file-input/output-port . wU52fc) (open-file-input-port . wU52fb) (open-bytevector-output-port . wU52fa) (open-bytevector-input-port . wU52f9) (native-transcoder . wU52f8) (native-eol-style . wU52f7) (make-transcoder . wU52f6) (latin-1-codec . wU52f5) (make-i/o-write-error . wU4d80) (make-i/o-read-error . wU4d6b) (make-i/o-port-error . wU4e21) (make-i/o-invalid-position-error . wU4d97) (make-i/o-filename-error . wU4db2) (make-i/o-file-protection-error . wU4dcb) (make-i/o-file-is-read-only-error . wU4de0) (make-i/o-file-does-not-exist-error . wU4e0a) (make-i/o-file-already-exists-error . wU4df5) (make-i/o-error . wU4d56) (make-i/o-encoding-error . wU4e51) (make-i/o-decoding-error . wU4e3a) (make-custom-textual-output-port . wU52f4) (make-custom-textual-input/output-port . wU52f3) (make-custom-textual-input-port . wU52f2) (make-custom-binary-output-port . wU52f1) (make-custom-binary-input/output-port . wU52f0) (make-custom-binary-input-port . wU52ef) (make-bytevector . wU52ee) (lookahead-u8 . wU52ed) (lookahead-char . wU52ec) (i/o-write-error? . wU4d82) (i/o-read-error? . wU4d6d) (i/o-port-error? . wU4e25) (i/o-invalid-position-error? . wU4d9b) (i/o-filename-error? . wU4db6) (i/o-file-protection-error? . wU4dcd) (i/o-file-is-read-only-error? . wU4de2) (i/o-file-does-not-exist-error? . wU4e0c) (i/o-file-already-exists-error? . wU4df7) (i/o-error? . wU4d58) (i/o-error-position . wU4d9d) (i/o-error-port . wU4e27) (i/o-error-filename . wU4db8) (i/o-encoding-error? . wU4e55) (i/o-encoding-error-char . wU4e57) (i/o-decoding-error? . wU4e3c) (get-u8 . wU52eb) (get-string-n! . wU52ea) (get-string-n . wU52e9) (get-string-all . wU52e8) (get-line . wU52e7) (get-datum . wU52e6) (get-char . wU52e5) (get-bytevector-some . wU52e4) (get-bytevector-n! . wU52e3) (get-bytevector-n . wU52e2) (get-bytevector-all . wU52e1) (flush-output-port . wU52e0) (close-port . wU52df) (exit . wU52d7) (command-line . wU4f90) (remove . wU52d2) (remv . wU52d1) (remp . wU52d0) (remq . wU52cf) (partition . wU52ce) (memv . wU52cd) (memq . wU52cc) (memp . wU52cb) (member . wU52ca) (exists . wU52c9) (for-all . wU52c8) (fold-right . wU52c7) (fold-left . wU52c6) (find . wU52c5) (filter . wU52c4) (cons* . wU52c3) (assv . wU52c2) (assq . wU52c1) (assp . wU52c0) (assoc . wU52bf) (call-with-string-output-port . wU52be) (call-with-port . wU52bd) (call-with-bytevector-output-port . wU52bc) (bytevector->string . wU52bb) (buffer-mode? . wU52ba) (binary-port? . wU52b9) (with-exception-handler . wU52b8) (raise-continuable . wU52b7) (raise . wU52b6) (make-enumeration . wU52b5) (enum-set=? . wU52b4) (enum-set-universe . wU52b3) (enum-set-union . wU52b2) (enum-set-subset? . wU52b1) (enum-set-projection . wU52b0) (enum-set-member? . wU52af) (enum-set-intersection . wU52ae) (enum-set-indexer . wU52ad) (enum-set-difference . wU52ac) (enum-set-constructor . wU52ab) (enum-set-complement . wU52aa) (enum-set->list . wU52a9) (who-condition? . wU4ccc) (warning? . wU4c44) (violation? . wU4c83) (undefined-violation? . wU4d43) (syntax-violation? . wU4d2a) (syntax-violation-subform . wU4d2e) (syntax-violation-form . wU4d2c) (syntax-violation . wU3156) (simple-conditions . wU52a8) (serious-condition? . wU4c59) (non-continuable-violation? . wU4ce3) (message-condition? . wU4c2d) (make-who-condition . wU4cc8) (make-warning . wU4c42) (make-violation . wU4c81) (make-undefined-violation . wU4d41) (make-syntax-violation . wU4d24) (make-serious-condition . wU4c57) (make-non-continuable-violation . wU4ce1) (make-message-condition . wU4c29) (make-lexical-violation . wU4d0b) (make-irritants-condition . wU4cad) (make-implementation-restriction-violation . wU4cf6) (make-error . wU4c6c) (make-assertion-violation . wU4c96) (lexical-violation? . wU4d0d) (irritants-condition? . wU4cb1) (implementation-restriction-violation? . wU4cf8) (error? . wU4c6e) (condition-who . wU4cce) (condition-predicate . wU52a7) (condition-message . wU4c2f) (condition-irritants . wU4cb3) (condition-accessor . wU52a6) (condition . wU52a5) (assertion-violation? . wU4c98) (condition? . wU52a4) (utf32->string . wU52a3) (utf16->string . wU52a2) (utf8->string . wU52a1) (uint-list->bytevector . wU52a0) (u8-list->bytevector . wU529f) (string->utf8 . wU529e) (string->utf32 . wU529d) (string->utf16 . wU529c) (sint-list->bytevector . wU529b) (native-endianness . wU529a) (bytevector? . wU5299) (bytevector=? . wU5298) (bytevector-uint-set! . wU5297) (bytevector-uint-ref . wU5296) (bytevector-u8-set! . wU5295) (bytevector-u8-ref . wU5294) (bytevector-u64-set! . wU5293) (bytevector-u64-ref . wU5292) (bytevector-u64-native-set! . wU5291) (bytevector-u64-native-ref . wU5290) (bytevector-u32-set! . wU528f) (bytevector-u32-ref . wU528e) (bytevector-u32-native-set! . wU528d) (bytevector-u32-native-ref . wU528c) (bytevector-u16-set! . wU528b) (bytevector-u16-ref . wU528a) (bytevector-u16-native-set! . wU5289) (bytevector-u16-native-ref . wU5288) (bytevector-sint-set! . wU5287) (bytevector-sint-ref . wU5286) (bytevector-s8-set! . wU5285) (bytevector-s8-ref . wU5284) (bytevector-s64-set! . wU5283) (bytevector-s64-ref . wU5282) (bytevector-s64-native-set! . wU5281) (bytevector-s64-native-ref . wU5280) (bytevector-s32-set! . wU527f) (bytevector-s32-ref . wU527e) (bytevector-s32-native-set! . wU527d) (bytevector-s32-native-ref . wU527c) (bytevector-s16-set! . wU527b) (bytevector-s16-ref . wU527a) (bytevector-s16-native-set! . wU5279) (bytevector-s16-native-ref . wU5278) (bytevector-length . wU5277) (bytevector-ieee-single-ref . wU5276) (bytevector-ieee-single-set! . wU5275) (bytevector-ieee-single-native-set! . wU5274) (bytevector-ieee-single-native-ref . wU5273) (bytevector-ieee-double-set! . wU5272) (bytevector-ieee-double-ref . wU5271) (bytevector-ieee-double-native-set! . wU5270) (bytevector-ieee-double-native-ref . wU526f) (bytevector-fill! . wU526e) (bytevector-copy! . wU526d) (bytevector-copy . wU526c) (bytevector->uint-list . wU526b) (bytevector->u8-list . wU526a) (bytevector->sint-list . wU5269) (no-nans-violation? . wU4e81) (no-infinities-violation? . wU4e6c) (make-no-nans-violation . wU4e7f) (make-no-infinities-violation . wU4e6a) (real->flonum . wU5268) (flzero? . wU5267) (fltruncate . wU5266) (fltan . wU5265) (flsqrt . wU5264) (flsin . wU5263) (flround . wU5262) (flpositive? . wU5261) (flonum? . wU5260) (flodd? . wU525f) (flnumerator . wU525e) (flnegative? . wU525d) (flnan? . wU525c) (flmod0 . wU525b) (flmod . wU525a) (flmin . wU5259) (flmax . wU5258) (fllog . wU5257) (flinteger? . wU5256) (flinfinite? . wU5255) (flfloor . wU5254) (flfinite? . wU5253) (flexpt . wU5252) (flexp . wU5251) (fleven? . wU5250) (fldiv0-and-mod0 . wU524f) (fldiv0 . wU524e) (fldiv-and-mod . wU524d) (fldiv . wU524c) (fldenominator . wU524b) (flcos . wU524a) (flceiling . wU5249) (flatan . wU5248) (flasin . wU5247) (flacos . wU5246) (flabs . wU5245) (fl>? . wU5244) (fl>=? . wU5243) (fl=? . wU5242) (fl<? . wU5241) (fl<=? . wU5240) (fl/ . wU523f) (fl- . wU523e) (fl+ . wU523d) (fl* . wU523c) (fixnum->flonum . wU523b) (fxzero? . wU523a) (fxxor . wU5239) (fxrotate-bit-field . wU5238) (fxreverse-bit-field . wU5237) (fxpositive? . wU5236) (fxodd? . wU5235) (fxnot . wU5234) (fxnegative? . wU5233) (fxmod0 . wU5232) (fxmod . wU5231) (fxmin . wU5230) (fxmax . wU522f) (fxlength . wU522e) (fxior . wU522d) (fxif . wU522c) (fxfirst-bit-set . wU522b) (fxeven? . wU522a) (fxdiv0-and-mod0 . wU5229) (fxdiv0 . wU5228) (fxdiv-and-mod . wU5227) (fxdiv . wU5226) (fxcopy-bit-field . wU5225) (fxcopy-bit . wU5224) (fxbit-set? . wU5223) (fxbit-field . wU5222) (fxbit-count . wU5221) (fxarithmetic-shift-right . wU5220) (fxarithmetic-shift-left . wU521f) (fxarithmetic-shift . wU521e) (fxand . wU521d) (fx>? . wU521c) (fx>=? . wU521b) (fx=? . wU521a) (fx<? . wU5219) (fx<=? . wU5218) (fx-/carry . wU5217) (fx- . wU5216) (fx+/carry . wU5215) (fx+ . wU5214) (fx*/carry . wU5213) (fx* . wU5212) (greatest-fixnum . wU5211) (least-fixnum . wU5210) (fixnum-width . wU520f) (fixnum? . wU520e) (bitwise-rotate-bit-field . wU520d) (bitwise-reverse-bit-field . wU520c) (bitwise-length . wU520b) (bitwise-if . wU520a) (bitwise-first-bit-set . wU5209) (bitwise-copy-bit-field . wU5208) (bitwise-copy-bit . wU5207) (bitwise-bit-set? . wU5206) (bitwise-bit-field . wU5205) (bitwise-bit-count . wU5204) (bitwise-xor . wU5203) (bitwise-ior . wU5202) (bitwise-and . wU5201) (bitwise-not . wU5200) (bitwise-arithmetic-shift-right . wU51ff) (bitwise-arithmetic-shift-left . wU51fe) (bitwise-arithmetic-shift . wU51fd) (zero? . wU51fc) (vector? . wU51fb) (vector-set! . wU51fa) (vector-ref . wU51f9) (vector-map . wU51f8) (vector-length . wU51f7) (vector-for-each . wU51f6) (vector-fill! . wU51f5) (vector->list . wU51f4) (vector . wU51f3) (values . wU51f2) (truncate . wU51f1) (tan . wU51f0) (symbol? . wU51ef) (symbol=? . wU51ee) (symbol->string . wU51ed) (substring . wU51ec) (string? . wU51eb) (string>? . wU51ea) (string>=? . wU51e9) (string=? . wU51e8) (string<? . wU51e7) (string<=? . wU51e6) (string-ref . wU51e5) (string-length . wU51e4) (string-for-each . wU51e3) (string-copy . wU51e2) (string-append . wU51e1) (string->symbol . wU51e0) (string->number . wU51df) (string->list . wU51de) (string . wU51dd) (sqrt . wU51dc) (sin . wU51db) (round . wU51da) (reverse . wU51d9) (real? . wU51d8) (real-valued? . wU51d7) (real-part . wU51d6) (rationalize . wU51d5) (rational? . wU51d4) (rational-valued? . wU51d3) (procedure? . wU51d2) (positive? . wU51d1) (pair? . wU51d0) (odd? . wU51cf) (numerator . wU51ce) (number? . wU51cd) (number->string . wU51cc) (null? . wU51cb) (not . wU51ca) (negative? . wU51c9) (nan? . wU51c8) (min . wU51c7) (max . wU51c6) (map . wU51c5) (make-vector . wU51c4) (make-string . wU51c3) (make-rectangular . wU51c2) (make-polar . wU51c1) (magnitude . wU51c0) (log . wU51bf) (list? . wU51be) (list-tail . wU51bd) (list-ref . wU51bc) (list->vector . wU51bb) (list->string . wU51ba) (list . wU51b9) (length . wU51b8) (lcm . wU51b7) (integer? . wU51b6) (integer-valued? . wU51b5) (integer->char . wU51b4) (infinite? . wU51b3) (inexact? . wU51b2) (inexact . wU51b1) (imag-part . wU51b0) (gcd . wU51af) (for-each . wU51ae) (floor . wU51ad) (finite? . wU51ac) (expt . wU51ab) (exp . wU51aa) (exact? . wU51a9) (exact-integer-sqrt . wU51a8) (exact . wU51a7) (even? . wU51a6) (error . wU51a5) (eqv? . wU51a4) (equal? . wU51a3) (eq? . wU51a2) (dynamic-wind . wU51a1) (div0-and-mod0 . wU51a0) (mod0 . wU519f) (div0 . wU519e) (div-and-mod . wU519d) (mod . wU519c) (div . wU519b) (denominator . wU519a) (cos . wU5199) (cons . wU5198) (complex? . wU5197) (char? . wU5196) (char>? . wU5195) (char>=? . wU5194) (char=? . wU5193) (char<? . wU5192) (char<=? . wU5191) (char->integer . wU5190) (ceiling . wU518f) (call-with-values . wU518e) (call/cc . wU518d) (call-with-current-continuation . wU518c) (cddddr . wU518b) (cdddar . wU518a) (cddadr . wU5189) (cddaar . wU5188) (cdaddr . wU5187) (cdadar . wU5186) (cdaadr . wU5185) (cdaaar . wU5184) (cadddr . wU5183) (caddar . wU5182) (cadadr . wU5181) (cadaar . wU5180) (caaddr . wU517f) (caadar . wU517e) (caaadr . wU517d) (caaaar . wU517c) (cdddr . wU517b) (cddar . wU517a) (cdadr . wU5179) (cdaar . wU5178) (caddr . wU5177) (cadar . wU5176) (caadr . wU5175) (caaar . wU5174) (cddr . wU5173) (cdar . wU5172) (cadr . wU5171) (caar . wU5170) (cdr . wU516f) (car . wU516e) (boolean? . wU516d) (boolean=? . wU516c) (atan . wU516b) (assertion-violation . wU516a) (asin . wU5169) (apply . wU5168) (append . wU5167) (angle . wU5166) (acos . wU5165) (abs . wU5164) (/ . wU5163) (* . wU5162) (- . wU5161) (+ . wU5160) (>= . wU515f) (> . wU515e) (= . wU515d) (<= . wU515c) (< . wU515b) (&no-nans . wU5159) (&no-infinities . wU5158) (&i/o-encoding . wU5157) (&i/o-decoding . wU5156) (&i/o-port . wU5155) (&i/o-file-does-not-exist . wU5154) (&i/o-file-already-exists . wU5153) (&i/o-file-is-read-only . wU5152) (&i/o-file-protection . wU5151) (&i/o-filename . wU5150) (&i/o-invalid-position . wU514f) (&i/o-write . wU514e) (&i/o-read . wU514d) (&i/o . wU514c) (&undefined . wU514b) (&syntax . wU514a) (&lexical . wU5149) (&implementation-restriction . wU5148) (&non-continuable . wU5147) (&who . wU5146) (&irritants . wU5145) (&assertion . wU5144) (&violation . wU5143) (&error . wU5142) (&serious . wU5141) (&warning . wU5140) (&message . wU513f) (&condition . wU513e) (define-condition-type . wU513d) (define-enumeration . wU513c) (define-record-type . wU513b) (parent-rtd . wU513a) (nongenerative . wU5139) (opaque . wU5138) (sealed . wU5137) (protocol . wU5136) (parent . wU5135) (immutable . wU5134) (mutable . wU5133) (fields . wU5132) (error-handling-mode . wU5131) (file-options . wU5130) (buffer-mode . wU512f) (eol-style . wU512e) (guard . wU512d) (unsyntax-splicing . wU512a) (unsyntax . wU5129) (unquote-splicing . wU5128) (unquote . wU5127) (_ . wU5126) (else . wU5125) (=> . wU5124) (... . wU5123) (assert . wU5122) (endianness . wU5121) (do . wU511e) (cond . wU511d) (let* . wU511c) (let*-values . wU511b) (let-values . wU511a) (identifier-syntax . wU5119) (with-syntax . wU5118) (quasisyntax . wU5117) (quasiquote . wU5116) (syntax-rules . wU5115) (record-constructor-descriptor . wU5112) (record-type-descriptor . wU5111) (case . wU5110) (unless . wU510e) (when . wU510d) (or . wU510c) (and . wU510b) (if . wU510a) (let . wU5109) (letrec* . wU5108) (letrec . wU5107) (case-lambda . wU5105) (lambda . wU5104) (syntax . wU5103) (syntax-case . wU5102) (quote . wU5101) (letrec-syntax . wU50ff) (let-syntax . wU50fe) (set! . wU50fd) (begin . wU50fb) (define-syntax . wU50f9) (define . wU50f8)) '() values values '#f '#f '#t '#f) (wU2c84@wU2ad0@install-library 'wU5428 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . wU3132) (quotient . wU52de) (null-environment . wU3130) (remainder . wU52dd) (modulo . wU52dc) (inexact->exact . wU52db) (force . wU52da) (exact->inexact . wU52d9) (make-promise . wU52d8) (delay . wU5120)) '() values values '#f '#f '#t '#f) (wU2c84@wU2ad0@install-library 'wU5429 '(rnrs control) '(6) '() '() '() '((do . wU511e) (unless . wU510e) (when . wU510d) (case-lambda . wU5105)) '() values values '#f '#f '#t '#f) (wU2c84@wU2ad0@install-library 'wU542a '(rnrs eval) '(6) '() '() '() '((eval . wU3136) (environment . wU312e)) '() values values '#f '#f '#t '#f) (wU2c84@wU2ad0@install-library 'wU542b '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . wU52d4) (set-car! . wU52d3)) '() values values '#f '#f '#t '#f) (wU2c84@wU2ad0@install-library 'wU542c '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . wU52d6) (string-set! . wU52d5)) '() values values '#f '#f '#t '#f) (wU2c84@wU2ad0@install-library 'wU542d '(rnrs programs) '(6) '() '() '() '((exit . wU52d7) (command-line . wU4f90)) '() values values '#f '#f '#t '#f) (wU2c84@wU2ad0@install-library 'wU542e '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . wU2ea1) (identifier? . wU3158) (generate-temporaries . wU3144) (free-identifier=? . wU3146) (syntax->datum . wU315c) (datum->syntax . wU315a) (bound-identifier=? . wU3148) (syntax-violation . wU3156) (unsyntax-splicing . wU512a) (unsyntax . wU5129) (_ . wU5126) (... . wU5123) (with-syntax . wU5118) (quasisyntax . wU5117) (syntax . wU5103) (syntax-case . wU5102)) '() values values '#f '#f '#t '#f) (wU2c84@wU2ad0@install-library 'wU542f '(rnrs files) '(6) '() '() '() '((delete-file . wU5347) (file-exists? . wU5346) (make-i/o-write-error . wU4d80) (make-i/o-read-error . wU4d6b) (make-i/o-port-error . wU4e21) (make-i/o-invalid-position-error . wU4d97) (make-i/o-filename-error . wU4db2) (make-i/o-file-protection-error . wU4dcb) (make-i/o-file-is-read-only-error . wU4de0) (make-i/o-file-does-not-exist-error . wU4e0a) (make-i/o-file-already-exists-error . wU4df5) (make-i/o-error . wU4d56) (i/o-write-error? . wU4d82) (i/o-read-error? . wU4d6d) (i/o-port-error? . wU4e25) (i/o-invalid-position-error? . wU4d9b) (i/o-filename-error? . wU4db6) (i/o-file-protection-error? . wU4dcd) (i/o-file-is-read-only-error? . wU4de2) (i/o-file-does-not-exist-error? . wU4e0c) (i/o-file-already-exists-error? . wU4df7) (i/o-error? . wU4d58) (i/o-error-position . wU4d9d) (i/o-error-port . wU4e27) (i/o-error-filename . wU4db8) (&i/o-port . wU5155) (&i/o-file-does-not-exist . wU5154) (&i/o-file-already-exists . wU5153) (&i/o-file-is-read-only . wU5152) (&i/o-file-protection . wU5151) (&i/o-filename . wU5150) (&i/o-invalid-position . wU514f) (&i/o-write . wU514e) (&i/o-read . wU514d) (&i/o . wU514c)) '() values values '#f '#f '#t '#f) (wU2c84@wU2ad0@install-library 'wU5430 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . wU5345) (vector-sort . wU5344) (list-sort . wU5343)) '() values values '#f '#f '#t '#f) (wU2c84@wU2ad0@install-library 'wU5431 '(rnrs base) '(6) '() '() '() '((zero? . wU51fc) (vector? . wU51fb) (vector-set! . wU51fa) (vector-ref . wU51f9) (vector-map . wU51f8) (vector-length . wU51f7) (vector-for-each . wU51f6) (vector-fill! . wU51f5) (vector->list . wU51f4) (vector . wU51f3) (values . wU51f2) (truncate . wU51f1) (tan . wU51f0) (symbol? . wU51ef) (symbol=? . wU51ee) (symbol->string . wU51ed) (substring . wU51ec) (string? . wU51eb) (string>? . wU51ea) (string>=? . wU51e9) (string=? . wU51e8) (string<? . wU51e7) (string<=? . wU51e6) (string-ref . wU51e5) (string-length . wU51e4) (string-for-each . wU51e3) (string-copy . wU51e2) (string-append . wU51e1) (string->symbol . wU51e0) (string->number . wU51df) (string->list . wU51de) (string . wU51dd) (sqrt . wU51dc) (sin . wU51db) (round . wU51da) (reverse . wU51d9) (real? . wU51d8) (real-valued? . wU51d7) (real-part . wU51d6) (rationalize . wU51d5) (rational? . wU51d4) (rational-valued? . wU51d3) (procedure? . wU51d2) (positive? . wU51d1) (pair? . wU51d0) (odd? . wU51cf) (numerator . wU51ce) (number? . wU51cd) (number->string . wU51cc) (null? . wU51cb) (not . wU51ca) (negative? . wU51c9) (nan? . wU51c8) (min . wU51c7) (max . wU51c6) (map . wU51c5) (make-vector . wU51c4) (make-string . wU51c3) (make-rectangular . wU51c2) (make-polar . wU51c1) (magnitude . wU51c0) (log . wU51bf) (list? . wU51be) (list-tail . wU51bd) (list-ref . wU51bc) (list->vector . wU51bb) (list->string . wU51ba) (list . wU51b9) (length . wU51b8) (lcm . wU51b7) (integer? . wU51b6) (integer-valued? . wU51b5) (integer->char . wU51b4) (infinite? . wU51b3) (inexact? . wU51b2) (inexact . wU51b1) (imag-part . wU51b0) (gcd . wU51af) (for-each . wU51ae) (floor . wU51ad) (finite? . wU51ac) (expt . wU51ab) (exp . wU51aa) (exact? . wU51a9) (exact-integer-sqrt . wU51a8) (exact . wU51a7) (even? . wU51a6) (error . wU51a5) (eqv? . wU51a4) (equal? . wU51a3) (eq? . wU51a2) (dynamic-wind . wU51a1) (div0-and-mod0 . wU51a0) (mod0 . wU519f) (div0 . wU519e) (div-and-mod . wU519d) (mod . wU519c) (div . wU519b) (denominator . wU519a) (cos . wU5199) (cons . wU5198) (complex? . wU5197) (char? . wU5196) (char>? . wU5195) (char>=? . wU5194) (char=? . wU5193) (char<? . wU5192) (char<=? . wU5191) (char->integer . wU5190) (ceiling . wU518f) (call-with-values . wU518e) (call/cc . wU518d) (call-with-current-continuation . wU518c) (cddddr . wU518b) (cdddar . wU518a) (cddadr . wU5189) (cddaar . wU5188) (cdaddr . wU5187) (cdadar . wU5186) (cdaadr . wU5185) (cdaaar . wU5184) (cadddr . wU5183) (caddar . wU5182) (cadadr . wU5181) (cadaar . wU5180) (caaddr . wU517f) (caadar . wU517e) (caaadr . wU517d) (caaaar . wU517c) (cdddr . wU517b) (cddar . wU517a) (cdadr . wU5179) (cdaar . wU5178) (caddr . wU5177) (cadar . wU5176) (caadr . wU5175) (caaar . wU5174) (cddr . wU5173) (cdar . wU5172) (cadr . wU5171) (caar . wU5170) (cdr . wU516f) (car . wU516e) (boolean? . wU516d) (boolean=? . wU516c) (atan . wU516b) (assertion-violation . wU516a) (asin . wU5169) (apply . wU5168) (append . wU5167) (angle . wU5166) (acos . wU5165) (abs . wU5164) (/ . wU5163) (* . wU5162) (- . wU5161) (+ . wU5160) (>= . wU515f) (> . wU515e) (= . wU515d) (<= . wU515c) (< . wU515b) (unquote-splicing . wU5128) (unquote . wU5127) (_ . wU5126) (else . wU5125) (=> . wU5124) (... . wU5123) (assert . wU5122) (cond . wU511d) (let* . wU511c) (let*-values . wU511b) (let-values . wU511a) (identifier-syntax . wU5119) (quasiquote . wU5116) (syntax-rules . wU5115) (case . wU5110) (or . wU510c) (and . wU510b) (if . wU510a) (let . wU5109) (letrec* . wU5108) (letrec . wU5107) (lambda . wU5104) (quote . wU5101) (letrec-syntax . wU50ff) (let-syntax . wU50fe) (set! . wU50fd) (begin . wU50fb) (define-syntax . wU50f9) (define . wU50f8)) '() values values '#f '#f '#t '#f) (wU2c84@wU2ad0@install-library 'wU5432 '(rnrs lists) '(6) '() '() '() '((remove . wU52d2) (remv . wU52d1) (remp . wU52d0) (remq . wU52cf) (partition . wU52ce) (memv . wU52cd) (memq . wU52cc) (memp . wU52cb) (member . wU52ca) (exists . wU52c9) (for-all . wU52c8) (fold-right . wU52c7) (fold-left . wU52c6) (find . wU52c5) (filter . wU52c4) (cons* . wU52c3) (assv . wU52c2) (assq . wU52c1) (assp . wU52c0) (assoc . wU52bf)) '() values values '#f '#f '#t '#f) (wU2c84@wU2ad0@install-library 'wU5433 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . wU532d) (call-with-input-file . wU532c) (write-char . wU532b) (write . wU532a) (with-output-to-file . wU5329) (with-input-from-file . wU5328) (read-char . wU5327) (read . wU5326) (peek-char . wU5325) (open-output-file . wU5324) (open-input-file . wU5323) (newline . wU5322) (display . wU5321) (close-output-port . wU5320) (close-input-port . wU531f) (eof-object? . wU531e) (eof-object . wU531d) (current-error-port . wU531c) (current-output-port . wU531b) (current-input-port . wU531a) (output-port? . wU5319) (input-port? . wU5318) (make-i/o-write-error . wU4d80) (make-i/o-read-error . wU4d6b) (make-i/o-port-error . wU4e21) (make-i/o-invalid-position-error . wU4d97) (make-i/o-filename-error . wU4db2) (make-i/o-file-protection-error . wU4dcb) (make-i/o-file-is-read-only-error . wU4de0) (make-i/o-file-does-not-exist-error . wU4e0a) (make-i/o-file-already-exists-error . wU4df5) (make-i/o-error . wU4d56) (i/o-write-error? . wU4d82) (i/o-read-error? . wU4d6d) (i/o-port-error? . wU4e25) (i/o-invalid-position-error? . wU4d9b) (i/o-filename-error? . wU4db6) (i/o-file-protection-error? . wU4dcd) (i/o-file-is-read-only-error? . wU4de2) (i/o-file-does-not-exist-error? . wU4e0c) (i/o-file-already-exists-error? . wU4df7) (i/o-error? . wU4d58) (i/o-error-position . wU4d9d) (i/o-error-port . wU4e27) (i/o-error-filename . wU4db8) (&i/o-port . wU5155) (&i/o-file-does-not-exist . wU5154) (&i/o-file-already-exists . wU5153) (&i/o-file-is-read-only . wU5152) (&i/o-file-protection . wU5151) (&i/o-filename . wU5150) (&i/o-invalid-position . wU514f) (&i/o-write . wU514e) (&i/o-read . wU514d) (&i/o . wU514c)) '() values values '#f '#f '#t '#f) (wU2c84@wU2ad0@install-library 'wU5434 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . wU52ee) (utf32->string . wU52a3) (utf16->string . wU52a2) (utf8->string . wU52a1) (uint-list->bytevector . wU52a0) (u8-list->bytevector . wU529f) (string->utf8 . wU529e) (string->utf32 . wU529d) (string->utf16 . wU529c) (sint-list->bytevector . wU529b) (native-endianness . wU529a) (bytevector? . wU5299) (bytevector=? . wU5298) (bytevector-uint-set! . wU5297) (bytevector-uint-ref . wU5296) (bytevector-u8-set! . wU5295) (bytevector-u8-ref . wU5294) (bytevector-u64-set! . wU5293) (bytevector-u64-ref . wU5292) (bytevector-u64-native-set! . wU5291) (bytevector-u64-native-ref . wU5290) (bytevector-u32-set! . wU528f) (bytevector-u32-ref . wU528e) (bytevector-u32-native-set! . wU528d) (bytevector-u32-native-ref . wU528c) (bytevector-u16-set! . wU528b) (bytevector-u16-ref . wU528a) (bytevector-u16-native-set! . wU5289) (bytevector-u16-native-ref . wU5288) (bytevector-sint-set! . wU5287) (bytevector-sint-ref . wU5286) (bytevector-s8-set! . wU5285) (bytevector-s8-ref . wU5284) (bytevector-s64-set! . wU5283) (bytevector-s64-ref . wU5282) (bytevector-s64-native-set! . wU5281) (bytevector-s64-native-ref . wU5280) (bytevector-s32-set! . wU527f) (bytevector-s32-ref . wU527e) (bytevector-s32-native-set! . wU527d) (bytevector-s32-native-ref . wU527c) (bytevector-s16-set! . wU527b) (bytevector-s16-ref . wU527a) (bytevector-s16-native-set! . wU5279) (bytevector-s16-native-ref . wU5278) (bytevector-length . wU5277) (bytevector-ieee-single-ref . wU5276) (bytevector-ieee-single-set! . wU5275) (bytevector-ieee-single-native-set! . wU5274) (bytevector-ieee-single-native-ref . wU5273) (bytevector-ieee-double-set! . wU5272) (bytevector-ieee-double-ref . wU5271) (bytevector-ieee-double-native-set! . wU5270) (bytevector-ieee-double-native-ref . wU526f) (bytevector-fill! . wU526e) (bytevector-copy! . wU526d) (bytevector-copy . wU526c) (bytevector->uint-list . wU526b) (bytevector->u8-list . wU526a) (bytevector->sint-list . wU5269) (endianness . wU5121)) '() values values '#f '#f '#t '#f) (wU2c84@wU2ad0@install-library 'wU5435 '(rnrs unicode) '(6) '() '() '() '((string-upcase . wU5375) (string-titlecase . wU5374) (string-normalize-nfkd . wU5373) (string-normalize-nfkc . wU5372) (string-normalize-nfd . wU5371) (string-normalize-nfc . wU5370) (string-foldcase . wU536f) (string-downcase . wU536e) (string-ci>? . wU536d) (string-ci>=? . wU536c) (string-ci=? . wU536b) (string-ci<? . wU536a) (string-ci<=? . wU5369) (char-whitespace? . wU5368) (char-upper-case? . wU5367) (char-title-case? . wU5366) (char-numeric? . wU5365) (char-lower-case? . wU5364) (char-general-category . wU5363) (char-upcase . wU5362) (char-titlecase . wU5361) (char-foldcase . wU5360) (char-downcase . wU535f) (char-ci>? . wU535e) (char-ci>=? . wU535d) (char-ci=? . wU535c) (char-ci<? . wU535b) (char-ci<=? . wU535a) (char-alphabetic? . wU5359)) '() values values '#f '#f '#t '#f) (wU2c84@wU2ad0@install-library 'wU5436 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . wU52b8) (raise-continuable . wU52b7) (raise . wU52b6) (guard . wU512d) (else . wU5125) (=> . wU5124)) '() values values '#f '#f '#t '#f) (wU2c84@wU2ad0@install-library 'wU5437 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . wU520d) (bitwise-reverse-bit-field . wU520c) (bitwise-length . wU520b) (bitwise-if . wU520a) (bitwise-first-bit-set . wU5209) (bitwise-copy-bit-field . wU5208) (bitwise-copy-bit . wU5207) (bitwise-bit-set? . wU5206) (bitwise-bit-field . wU5205) (bitwise-bit-count . wU5204) (bitwise-xor . wU5203) (bitwise-ior . wU5202) (bitwise-and . wU5201) (bitwise-not . wU5200) (bitwise-arithmetic-shift-right . wU51ff) (bitwise-arithmetic-shift-left . wU51fe) (bitwise-arithmetic-shift . wU51fd)) '() values values '#f '#f '#t '#f) (wU2c84@wU2ad0@install-library 'wU5438 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . wU523a) (fxxor . wU5239) (fxrotate-bit-field . wU5238) (fxreverse-bit-field . wU5237) (fxpositive? . wU5236) (fxodd? . wU5235) (fxnot . wU5234) (fxnegative? . wU5233) (fxmod0 . wU5232) (fxmod . wU5231) (fxmin . wU5230) (fxmax . wU522f) (fxlength . wU522e) (fxior . wU522d) (fxif . wU522c) (fxfirst-bit-set . wU522b) (fxeven? . wU522a) (fxdiv0-and-mod0 . wU5229) (fxdiv0 . wU5228) (fxdiv-and-mod . wU5227) (fxdiv . wU5226) (fxcopy-bit-field . wU5225) (fxcopy-bit . wU5224) (fxbit-set? . wU5223) (fxbit-field . wU5222) (fxbit-count . wU5221) (fxarithmetic-shift-right . wU5220) (fxarithmetic-shift-left . wU521f) (fxarithmetic-shift . wU521e) (fxand . wU521d) (fx>? . wU521c) (fx>=? . wU521b) (fx=? . wU521a) (fx<? . wU5219) (fx<=? . wU5218) (fx-/carry . wU5217) (fx- . wU5216) (fx+/carry . wU5215) (fx+ . wU5214) (fx*/carry . wU5213) (fx* . wU5212) (greatest-fixnum . wU5211) (least-fixnum . wU5210) (fixnum-width . wU520f) (fixnum? . wU520e)) '() values values '#f '#f '#t '#f) (wU2c84@wU2ad0@install-library 'wU5439 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . wU4e81) (no-infinities-violation? . wU4e6c) (make-no-nans-violation . wU4e7f) (make-no-infinities-violation . wU4e6a) (real->flonum . wU5268) (flzero? . wU5267) (fltruncate . wU5266) (fltan . wU5265) (flsqrt . wU5264) (flsin . wU5263) (flround . wU5262) (flpositive? . wU5261) (flonum? . wU5260) (flodd? . wU525f) (flnumerator . wU525e) (flnegative? . wU525d) (flnan? . wU525c) (flmod0 . wU525b) (flmod . wU525a) (flmin . wU5259) (flmax . wU5258) (fllog . wU5257) (flinteger? . wU5256) (flinfinite? . wU5255) (flfloor . wU5254) (flfinite? . wU5253) (flexpt . wU5252) (flexp . wU5251) (fleven? . wU5250) (fldiv0-and-mod0 . wU524f) (fldiv0 . wU524e) (fldiv-and-mod . wU524d) (fldiv . wU524c) (fldenominator . wU524b) (flcos . wU524a) (flceiling . wU5249) (flatan . wU5248) (flasin . wU5247) (flacos . wU5246) (flabs . wU5245) (fl>? . wU5244) (fl>=? . wU5243) (fl=? . wU5242) (fl<? . wU5241) (fl<=? . wU5240) (fl/ . wU523f) (fl- . wU523e) (fl+ . wU523d) (fl* . wU523c) (fixnum->flonum . wU523b) (&no-nans . wU5159) (&no-infinities . wU5158)) '() values values '#f '#f '#t '#f) (wU2c84@wU2ad0@install-library 'wU543a '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . wU5342) (string-ci-hash . wU5341) (string-hash . wU5340) (equal-hash . wU533f) (hashtable-equivalence-function . wU533e) (make-hashtable . wU533d) (hashtable-hash-function . wU533c) (make-eqv-hashtable . wU533b) (make-eq-hashtable . wU533a) (hashtable? . wU5339) (hashtable-update! . wU5338) (hashtable-size . wU5337) (hashtable-set! . wU5336) (hashtable-ref . wU5335) (hashtable-mutable? . wU5334) (hashtable-keys . wU5333) (hashtable-entries . wU5332) (hashtable-delete! . wU5331) (hashtable-copy . wU5330) (hashtable-contains? . wU532f) (hashtable-clear! . wU532e)) '() values values '#f '#f '#t '#f) (wU2c84@wU2ad0@install-library 'wU543b '(rnrs io ports) '(6) '() '() '() '((eof-object? . wU531e) (eof-object . wU531d) (current-error-port . wU531c) (current-output-port . wU531b) (current-input-port . wU531a) (output-port? . wU5319) (input-port? . wU5318) (utf-8-codec . wU5317) (utf-16-codec . wU5316) (transcoder-error-handling-mode . wU5315) (transcoder-eol-style . wU5314) (transcoder-codec . wU5313) (transcoded-port . wU5312) (textual-port? . wU5311) (string->bytevector . wU5310) (standard-output-port . wU530f) (standard-input-port . wU530e) (standard-error-port . wU530d) (set-port-position! . wU530c) (put-u8 . wU530b) (put-string . wU530a) (put-datum . wU5309) (put-char . wU5308) (put-bytevector . wU5307) (port? . wU5306) (port-transcoder . wU5305) (port-position . wU5304) (port-has-set-port-position!? . wU5303) (port-has-port-position? . wU5302) (port-eof? . wU5301) (output-port-buffer-mode . wU5300) (open-string-output-port . wU52ff) (open-string-input-port . wU52fe) (open-file-output-port . wU52fd) (open-file-input/output-port . wU52fc) (open-file-input-port . wU52fb) (open-bytevector-output-port . wU52fa) (open-bytevector-input-port . wU52f9) (native-transcoder . wU52f8) (native-eol-style . wU52f7) (make-transcoder . wU52f6) (latin-1-codec . wU52f5) (make-i/o-write-error . wU4d80) (make-i/o-read-error . wU4d6b) (make-i/o-port-error . wU4e21) (make-i/o-invalid-position-error . wU4d97) (make-i/o-filename-error . wU4db2) (make-i/o-file-protection-error . wU4dcb) (make-i/o-file-is-read-only-error . wU4de0) (make-i/o-file-does-not-exist-error . wU4e0a) (make-i/o-file-already-exists-error . wU4df5) (make-i/o-error . wU4d56) (make-i/o-encoding-error . wU4e51) (make-i/o-decoding-error . wU4e3a) (make-custom-textual-output-port . wU52f4) (make-custom-textual-input/output-port . wU52f3) (make-custom-textual-input-port . wU52f2) (make-custom-binary-output-port . wU52f1) (make-custom-binary-input/output-port . wU52f0) (make-custom-binary-input-port . wU52ef) (lookahead-u8 . wU52ed) (lookahead-char . wU52ec) (i/o-write-error? . wU4d82) (i/o-read-error? . wU4d6d) (i/o-port-error? . wU4e25) (i/o-invalid-position-error? . wU4d9b) (i/o-filename-error? . wU4db6) (i/o-file-protection-error? . wU4dcd) (i/o-file-is-read-only-error? . wU4de2) (i/o-file-does-not-exist-error? . wU4e0c) (i/o-file-already-exists-error? . wU4df7) (i/o-error? . wU4d58) (i/o-error-position . wU4d9d) (i/o-error-port . wU4e27) (i/o-error-filename . wU4db8) (i/o-encoding-error? . wU4e55) (i/o-encoding-error-char . wU4e57) (i/o-decoding-error? . wU4e3c) (get-u8 . wU52eb) (get-string-n! . wU52ea) (get-string-n . wU52e9) (get-string-all . wU52e8) (get-line . wU52e7) (get-datum . wU52e6) (get-char . wU52e5) (get-bytevector-some . wU52e4) (get-bytevector-n! . wU52e3) (get-bytevector-n . wU52e2) (get-bytevector-all . wU52e1) (flush-output-port . wU52e0) (close-port . wU52df) (call-with-string-output-port . wU52be) (call-with-port . wU52bd) (call-with-bytevector-output-port . wU52bc) (bytevector->string . wU52bb) (buffer-mode? . wU52ba) (binary-port? . wU52b9) (&i/o-encoding . wU5157) (&i/o-decoding . wU5156) (&i/o-port . wU5155) (&i/o-file-does-not-exist . wU5154) (&i/o-file-already-exists . wU5153) (&i/o-file-is-read-only . wU5152) (&i/o-file-protection . wU5151) (&i/o-filename . wU5150) (&i/o-invalid-position . wU514f) (&i/o-write . wU514e) (&i/o-read . wU514d) (&i/o . wU514c) (error-handling-mode . wU5131) (file-options . wU5130) (buffer-mode . wU512f) (eol-style . wU512e)) '() values values '#f '#f '#t '#f) (wU2c84@wU2ad0@install-library 'wU543c '(rnrs enums) '(6) '() '() '() '((make-enumeration . wU52b5) (enum-set=? . wU52b4) (enum-set-universe . wU52b3) (enum-set-union . wU52b2) (enum-set-subset? . wU52b1) (enum-set-projection . wU52b0) (enum-set-member? . wU52af) (enum-set-intersection . wU52ae) (enum-set-indexer . wU52ad) (enum-set-difference . wU52ac) (enum-set-constructor . wU52ab) (enum-set-complement . wU52aa) (enum-set->list . wU52a9) (define-enumeration . wU513c)) '() values values '#f '#f '#t '#f) (wU2c84@wU2ad0@install-library 'wU543d '(rnrs conditions) '(6) '() '() '() '((who-condition? . wU4ccc) (warning? . wU4c44) (violation? . wU4c83) (undefined-violation? . wU4d43) (syntax-violation? . wU4d2a) (syntax-violation-subform . wU4d2e) (syntax-violation-form . wU4d2c) (syntax-violation . wU3156) (simple-conditions . wU52a8) (serious-condition? . wU4c59) (non-continuable-violation? . wU4ce3) (message-condition? . wU4c2d) (make-who-condition . wU4cc8) (make-warning . wU4c42) (make-violation . wU4c81) (make-undefined-violation . wU4d41) (make-syntax-violation . wU4d24) (make-serious-condition . wU4c57) (make-non-continuable-violation . wU4ce1) (make-message-condition . wU4c29) (make-lexical-violation . wU4d0b) (make-irritants-condition . wU4cad) (make-implementation-restriction-violation . wU4cf6) (make-error . wU4c6c) (make-assertion-violation . wU4c96) (lexical-violation? . wU4d0d) (irritants-condition? . wU4cb1) (implementation-restriction-violation? . wU4cf8) (error? . wU4c6e) (condition-who . wU4cce) (condition-predicate . wU52a7) (condition-message . wU4c2f) (condition-irritants . wU4cb3) (condition-accessor . wU52a6) (condition . wU52a5) (assertion-violation? . wU4c98) (condition? . wU52a4) (&undefined . wU514b) (&syntax . wU514a) (&lexical . wU5149) (&implementation-restriction . wU5148) (&non-continuable . wU5147) (&who . wU5146) (&irritants . wU5145) (&assertion . wU5144) (&violation . wU5143) (&error . wU5142) (&serious . wU5141) (&warning . wU5140) (&message . wU513f) (&condition . wU513e) (define-condition-type . wU513d)) '() values values '#f '#f '#t '#f) (wU2c84@wU2ad0@install-library 'wU543e '(rnrs records inspection) '(6) '() '() '() '((record? . wU5351) (record-type-uid . wU5350) (record-type-sealed? . wU534f) (record-type-parent . wU534e) (record-type-opaque? . wU534d) (record-type-name . wU534c) (record-type-generative? . wU534b) (record-type-field-names . wU534a) (record-rtd . wU5349) (record-field-mutable? . wU5348)) '() values values '#f '#f '#t '#f) (wU2c84@wU2ad0@install-library 'wU543f '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . wU5358) (record-predicate . wU5357) (record-mutator . wU5356) (record-constructor . wU5355) (record-accessor . wU5354) (make-record-type-descriptor . wU5353) (make-record-constructor-descriptor . wU5352)) '() values values '#f '#f '#t '#f) (wU2c84@wU2ad0@install-library 'wU5440 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . wU513b) (parent-rtd . wU513a) (nongenerative . wU5139) (opaque . wU5138) (sealed . wU5137) (protocol . wU5136) (parent . wU5135) (immutable . wU5134) (mutable . wU5133) (fields . wU5132) (record-constructor-descriptor . wU5112) (record-type-descriptor . wU5111)) '() values values '#f '#f '#t '#f) (wU2c84@wU2ad0@install-library 'wU5441 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . wU4e85) (&no-nans-rtd . wU4e83) (&no-infinities-rcd . wU4e70) (&no-infinities-rtd . wU4e6e) (&i/o-encoding-rcd . wU4e5b) (&i/o-encoding-rtd . wU4e59) (&i/o-decoding-rcd . wU4e40) (&i/o-decoding-rtd . wU4e3e) (&i/o-port-rcd . wU4e2b) (&i/o-port-rtd . wU4e29) (&i/o-file-does-not-exist-rcd . wU4e10) (&i/o-file-does-not-exist-rtd . wU4e0e) (&i/o-file-already-exists-rcd . wU4dfb) (&i/o-file-already-exists-rtd . wU4df9) (&i/o-file-is-read-only-rcd . wU4de6) (&i/o-file-is-read-only-rtd . wU4de4) (&i/o-file-protection-rcd . wU4dd1) (&i/o-file-protection-rtd . wU4dcf) (&i/o-filename-rcd . wU4dbc) (&i/o-filename-rtd . wU4dba) (&i/o-invalid-position-rcd . wU4da1) (&i/o-invalid-position-rtd . wU4d9f) (&i/o-write-rcd . wU4d86) (&i/o-write-rtd . wU4d84) (&i/o-read-rcd . wU4d71) (&i/o-read-rtd . wU4d6f) (&i/o-rcd . wU4d5c) (&i/o-rtd . wU4d5a) (&undefined-rcd . wU4d47) (&undefined-rtd . wU4d45) (&syntax-rcd . wU4d32) (&syntax-rtd . wU4d30) (&lexical-rcd . wU4d11) (&lexical-rtd . wU4d0f) (&implementation-restriction-rcd . wU4cfc) (&implementation-restriction-rtd . wU4cfa) (&non-continuable-rcd . wU4ce7) (&non-continuable-rtd . wU4ce5) (&who-rcd . wU4cd2) (&who-rtd . wU4cd0) (&irritants-rcd . wU4cb7) (&irritants-rtd . wU4cb5) (&assertion-rcd . wU4c9c) (&assertion-rtd . wU4c9a) (&violation-rcd . wU4c87) (&violation-rtd . wU4c85) (&error-rcd . wU4c72) (&error-rtd . wU4c70) (&serious-rcd . wU4c5d) (&serious-rtd . wU4c5b) (&warning-rcd . wU4c48) (&warning-rtd . wU4c46) (&message-rcd . wU4c33) (&message-rtd . wU4c31) (&condition-rcd . wU4bd4) (&condition-rtd . wU4bd2) (syntax-error . wU3152) (syntax-dispatch . wU3076) (pretty-print . wU5421) (eval-core . wU5420) (set-symbol-value! . wU541f) (symbol-value . wU541e) (gensym . wU541d) (void . wU541c) (load . wU4f96) (interaction-environment . wU3164) (char-ready? . wU541b) (regexp? . wU541a) (read-line . wU5419) (gensym-prefix-set! . wU5418) (ungensym . wU5417) (alist->eq-hash-table . wU5416) (assoc-ref . wU5415) (print . wU5414) (format . wU5413) (host-os . wU5412) (library-path . wU2aaf) (standard-library-path . wU5411) (file-newer? . wU5410) (stat-mtime . wU540f) (write-to-file . wU540e) (file->list . wU540d) (file->string . wU540c) (digit->integer . wU540b) (call-with-string-input-port . wU540a) (call-with-string-io . wU5409) (string-split . wU5408) (bytevector-for-each . wU5407) (string->regexp . wU5406) (rxmatch . wU5405) (regexp-replace-all . wU5404) (hashtable-for-each . wU5403) (mosh-cache-dir . wU289a) (call-process . wU5402) (local-tz-offset . wU5401) (microseconds . wU5400) (directory-list . wU53ff) (set-current-directory! . wU53fe) (expand-path . wU53fd) (current-directory . wU53fc) (%spawn . wU53fb) (%waitpid . wU53fa) (simple-struct-name . wU53f9) (simple-struct-set! . wU53f8) (simple-struct-ref . wU53f7) (make-simple-struct . wU53f6) (simple-struct? . wU53f5) (pointer-ref-c-int64 . wU53f4) (pointer-ref-c-int32 . wU53f3) (pointer-ref-c-int16 . wU53f2) (pointer-ref-c-int8 . wU53f1) (pointer-ref-c-uint64 . wU53f0) (pointer-ref-c-uint32 . wU53ef) (pointer-ref-c-uint16 . wU53ee) (pointer-ref-c-uint8 . wU53ed) (pointer-set-c-uint64! . wU53ec) (pointer-set-c-uint32! . wU53eb) (pointer-set-c-uint16! . wU53ea) (pointer-set-c-uint8! . wU53e9) (pointer-set-c-int64! . wU53e8) (pointer-set-c-int32! . wU53e7) (pointer-set-c-int16! . wU53e6) (pointer-set-c-int8! . wU53e5) (pointer-set-c-pointer! . wU53e4) (pointer-set-c-double! . wU53e3) (pointer-set-c-float! . wU53e2) (pointer-set-c-long-long! . wU53e1) (pointer-set-c-long! . wU53e0) (pointer-set-c-int! . wU53df) (pointer-set-c-short! . wU53de) (pointer-set-c-char! . wU53dd) (pointer-ref-c-pointer . wU53dc) (pointer-ref-c-double . wU53db) (pointer-ref-c-float . wU53da) (pointer-ref-c-unsigned-long-long . wU53d9) (pointer-ref-c-signed-long-long . wU53d8) (pointer-ref-c-unsigned-long . wU53d7) (pointer-ref-c-signed-long . wU53d6) (pointer-ref-c-unsigned-int . wU53d5) (pointer-ref-c-signed-int . wU53d4) (pointer-ref-c-unsigned-short . wU53d3) (pointer-ref-c-signed-short . wU53d2) (pointer-ref-c-unsigned-char . wU53d1) (pointer-ref-c-signed-char . wU53d0) (pointer->integer . wU53cf) (integer->pointer . wU53ce) (pointer? . wU53cd) (shared-errno . wU53cc) (%ffi-free-c-callback-trampoline . wU53cb) (%ffi-make-c-callback-trampoline . wU53ca) (%ffi-free . wU53c9) (%ffi-malloc . wU53c8) (%ffi-supported? . wU53c7) (%ffi-pointer->string . wU53c6) (%ffi-call->string-or-zero . wU53c5) (%ffi-call->double . wU53c4) (%ffi-call->void* . wU53c3) (%ffi-call->void . wU53c2) (%ffi-call->char . wU53c1) (%ffi-call->int . wU53c0) (%ffi-lookup . wU53bf) (%ffi-open . wU53be) (%fork . wU53bd) (%pipe . wU53bc) (p . wU53bb) (open-output-string . wU53ba) (get-output-string . wU53b9) (file-stat-ctime . wU53b8) (file-stat-atime . wU53b7) (file-stat-mtime . wU53b6) (file-size-in-bytes . wU53b5) (file-writable? . wU53b4) (file-executable? . wU53b3) (file-readable? . wU53b2) (file-regular? . wU53b1) (file-symbolic-link? . wU53b0) (file-directory? . wU53af) (create-symbolic-link . wU53ae) (rename-file . wU53ad) (delete-directory . wU53ac) (create-directory . wU53ab) (create-mosh-cache-dir . wU53aa) (get-environment-variables . wU53a9) (current-exception-handler . wU53a8) (get-environment-variable . wU53a7) (join-wraps . wU53a6) (id->real-label . wU53a5) (same-marks? . wU53a4) (same-marks*? . wU53a3) (get-timeofday . wU53a2) (get-command-line . wU53a1) (sys-display . wU53a0) (whereis . wU539f) (register . wU539e) (vm-join! . wU539d) (vm-set-value! . wU539c) (vm? . wU539b) (main-vm? . wU539a) (vm-eval . wU5399) (vm-self . wU5398) (vm-start! . wU5397) (make-vm . wU5396) (mutex-try-lock! . wU5395) (mutex-unlock! . wU5394) (mutex-lock! . wU5393) (mutex? . wU5392) (make-mutex . wU5391) (condition-variable-notify-all! . wU5390) (condition-variable-notify! . wU538f) (condition-variable-wait! . wU538e) (make-condition-variable . wU538d) (mosh-executable-path . wU538c) (make-file-options . wU538b) (source-info . wU538a) (make-compiler-instruction . wU5389) (make-instruction . wU5388) (set-source-info! . wU5387) (bignum? . wU5386) (fast-equal? . wU5385) (fasl-read . wU5384) (fasl-write . wU5383) (time-usage . wU5382) (os-constant . wU5381) (disasm . wU5380) (make-parameter . wU2898) (socket-port . wU537f) (socket-shutdown . wU537e) (socket-close . wU537d) (socket-send . wU537c) (socket-recv! . wU537b) (socket-recv . wU537a) (make-server-socket . wU5379) (make-client-socket . wU5378) (socket-accept . wU5377) (socket? . wU5376) (string-upcase . wU5375) (string-titlecase . wU5374) (string-normalize-nfkd . wU5373) (string-normalize-nfkc . wU5372) (string-normalize-nfd . wU5371) (string-normalize-nfc . wU5370) (string-foldcase . wU536f) (string-downcase . wU536e) (string-ci>? . wU536d) (string-ci>=? . wU536c) (string-ci=? . wU536b) (string-ci<? . wU536a) (string-ci<=? . wU5369) (char-whitespace? . wU5368) (char-upper-case? . wU5367) (char-title-case? . wU5366) (char-numeric? . wU5365) (char-lower-case? . wU5364) (char-general-category . wU5363) (char-upcase . wU5362) (char-titlecase . wU5361) (char-foldcase . wU5360) (char-downcase . wU535f) (char-ci>? . wU535e) (char-ci>=? . wU535d) (char-ci=? . wU535c) (char-ci<? . wU535b) (char-ci<=? . wU535a) (char-alphabetic? . wU5359) (make-variable-transformer . wU2ea1) (identifier? . wU3158) (generate-temporaries . wU3144) (free-identifier=? . wU3146) (syntax->datum . wU315c) (datum->syntax . wU315a) (bound-identifier=? . wU3148) (record-type-descriptor? . wU5358) (record-predicate . wU5357) (record-mutator . wU5356) (record-constructor . wU5355) (record-accessor . wU5354) (make-record-type-descriptor . wU5353) (make-record-constructor-descriptor . wU5352) (record? . wU5351) (record-type-uid . wU5350) (record-type-sealed? . wU534f) (record-type-parent . wU534e) (record-type-opaque? . wU534d) (record-type-name . wU534c) (record-type-generative? . wU534b) (record-type-field-names . wU534a) (record-rtd . wU5349) (record-field-mutable? . wU5348) (delete-file . wU5347) (file-exists? . wU5346) (vector-sort! . wU5345) (vector-sort . wU5344) (list-sort . wU5343) (symbol-hash . wU5342) (string-ci-hash . wU5341) (string-hash . wU5340) (equal-hash . wU533f) (hashtable-equivalence-function . wU533e) (make-hashtable . wU533d) (hashtable-hash-function . wU533c) (make-eqv-hashtable . wU533b) (make-eq-hashtable . wU533a) (hashtable? . wU5339) (hashtable-update! . wU5338) (hashtable-size . wU5337) (hashtable-set! . wU5336) (hashtable-ref . wU5335) (hashtable-mutable? . wU5334) (hashtable-keys . wU5333) (hashtable-entries . wU5332) (hashtable-delete! . wU5331) (hashtable-copy . wU5330) (hashtable-contains? . wU532f) (hashtable-clear! . wU532e) (call-with-output-file . wU532d) (call-with-input-file . wU532c) (write-char . wU532b) (write . wU532a) (with-output-to-file . wU5329) (with-input-from-file . wU5328) (read-char . wU5327) (read . wU5326) (peek-char . wU5325) (open-output-file . wU5324) (open-input-file . wU5323) (newline . wU5322) (display . wU5321) (close-output-port . wU5320) (close-input-port . wU531f) (eof-object? . wU531e) (eof-object . wU531d) (current-error-port . wU531c) (current-output-port . wU531b) (current-input-port . wU531a) (output-port? . wU5319) (input-port? . wU5318) (utf-8-codec . wU5317) (utf-16-codec . wU5316) (transcoder-error-handling-mode . wU5315) (transcoder-eol-style . wU5314) (transcoder-codec . wU5313) (transcoded-port . wU5312) (textual-port? . wU5311) (string->bytevector . wU5310) (standard-output-port . wU530f) (standard-input-port . wU530e) (standard-error-port . wU530d) (set-port-position! . wU530c) (put-u8 . wU530b) (put-string . wU530a) (put-datum . wU5309) (put-char . wU5308) (put-bytevector . wU5307) (port? . wU5306) (port-transcoder . wU5305) (port-position . wU5304) (port-has-set-port-position!? . wU5303) (port-has-port-position? . wU5302) (port-eof? . wU5301) (output-port-buffer-mode . wU5300) (open-string-output-port . wU52ff) (open-string-input-port . wU52fe) (open-file-output-port . wU52fd) (open-file-input/output-port . wU52fc) (open-file-input-port . wU52fb) (open-bytevector-output-port . wU52fa) (open-bytevector-input-port . wU52f9) (native-transcoder . wU52f8) (native-eol-style . wU52f7) (make-transcoder . wU52f6) (latin-1-codec . wU52f5) (make-i/o-write-error . wU4d80) (make-i/o-read-error . wU4d6b) (make-i/o-port-error . wU4e21) (make-i/o-invalid-position-error . wU4d97) (make-i/o-filename-error . wU4db2) (make-i/o-file-protection-error . wU4dcb) (make-i/o-file-is-read-only-error . wU4de0) (make-i/o-file-does-not-exist-error . wU4e0a) (make-i/o-file-already-exists-error . wU4df5) (make-i/o-error . wU4d56) (make-i/o-encoding-error . wU4e51) (make-i/o-decoding-error . wU4e3a) (make-custom-textual-output-port . wU52f4) (make-custom-textual-input/output-port . wU52f3) (make-custom-textual-input-port . wU52f2) (make-custom-binary-output-port . wU52f1) (make-custom-binary-input/output-port . wU52f0) (make-custom-binary-input-port . wU52ef) (make-bytevector . wU52ee) (lookahead-u8 . wU52ed) (lookahead-char . wU52ec) (i/o-write-error? . wU4d82) (i/o-read-error? . wU4d6d) (i/o-port-error? . wU4e25) (i/o-invalid-position-error? . wU4d9b) (i/o-filename-error? . wU4db6) (i/o-file-protection-error? . wU4dcd) (i/o-file-is-read-only-error? . wU4de2) (i/o-file-does-not-exist-error? . wU4e0c) (i/o-file-already-exists-error? . wU4df7) (i/o-error? . wU4d58) (i/o-error-position . wU4d9d) (i/o-error-port . wU4e27) (i/o-error-filename . wU4db8) (i/o-encoding-error? . wU4e55) (i/o-encoding-error-char . wU4e57) (i/o-decoding-error? . wU4e3c) (get-u8 . wU52eb) (get-string-n! . wU52ea) (get-string-n . wU52e9) (get-string-all . wU52e8) (get-line . wU52e7) (get-datum . wU52e6) (get-char . wU52e5) (get-bytevector-some . wU52e4) (get-bytevector-n! . wU52e3) (get-bytevector-n . wU52e2) (get-bytevector-all . wU52e1) (flush-output-port . wU52e0) (close-port . wU52df) (scheme-report-environment . wU3132) (quotient . wU52de) (null-environment . wU3130) (remainder . wU52dd) (modulo . wU52dc) (inexact->exact . wU52db) (force . wU52da) (exact->inexact . wU52d9) (make-promise . wU52d8) (exit . wU52d7) (command-line . wU4f90) (string-fill! . wU52d6) (string-set! . wU52d5) (set-cdr! . wU52d4) (set-car! . wU52d3) (remove . wU52d2) (remv . wU52d1) (remp . wU52d0) (remq . wU52cf) (partition . wU52ce) (memv . wU52cd) (memq . wU52cc) (memp . wU52cb) (member . wU52ca) (exists . wU52c9) (for-all . wU52c8) (fold-right . wU52c7) (fold-left . wU52c6) (find . wU52c5) (filter . wU52c4) (cons* . wU52c3) (assv . wU52c2) (assq . wU52c1) (assp . wU52c0) (assoc . wU52bf) (call-with-string-output-port . wU52be) (call-with-port . wU52bd) (call-with-bytevector-output-port . wU52bc) (bytevector->string . wU52bb) (buffer-mode? . wU52ba) (binary-port? . wU52b9) (with-exception-handler . wU52b8) (raise-continuable . wU52b7) (raise . wU52b6) (eval . wU3136) (environment . wU312e) (make-enumeration . wU52b5) (enum-set=? . wU52b4) (enum-set-universe . wU52b3) (enum-set-union . wU52b2) (enum-set-subset? . wU52b1) (enum-set-projection . wU52b0) (enum-set-member? . wU52af) (enum-set-intersection . wU52ae) (enum-set-indexer . wU52ad) (enum-set-difference . wU52ac) (enum-set-constructor . wU52ab) (enum-set-complement . wU52aa) (enum-set->list . wU52a9) (who-condition? . wU4ccc) (warning? . wU4c44) (violation? . wU4c83) (undefined-violation? . wU4d43) (syntax-violation? . wU4d2a) (syntax-violation-subform . wU4d2e) (syntax-violation-form . wU4d2c) (syntax-violation . wU3156) (simple-conditions . wU52a8) (serious-condition? . wU4c59) (non-continuable-violation? . wU4ce3) (message-condition? . wU4c2d) (make-who-condition . wU4cc8) (make-warning . wU4c42) (make-violation . wU4c81) (make-undefined-violation . wU4d41) (make-syntax-violation . wU4d24) (make-serious-condition . wU4c57) (make-non-continuable-violation . wU4ce1) (make-message-condition . wU4c29) (make-lexical-violation . wU4d0b) (make-irritants-condition . wU4cad) (make-implementation-restriction-violation . wU4cf6) (make-error . wU4c6c) (make-assertion-violation . wU4c96) (lexical-violation? . wU4d0d) (irritants-condition? . wU4cb1) (implementation-restriction-violation? . wU4cf8) (error? . wU4c6e) (condition-who . wU4cce) (condition-predicate . wU52a7) (condition-message . wU4c2f) (condition-irritants . wU4cb3) (condition-accessor . wU52a6) (condition . wU52a5) (assertion-violation? . wU4c98) (condition? . wU52a4) (utf32->string . wU52a3) (utf16->string . wU52a2) (utf8->string . wU52a1) (uint-list->bytevector . wU52a0) (u8-list->bytevector . wU529f) (string->utf8 . wU529e) (string->utf32 . wU529d) (string->utf16 . wU529c) (sint-list->bytevector . wU529b) (native-endianness . wU529a) (bytevector? . wU5299) (bytevector=? . wU5298) (bytevector-uint-set! . wU5297) (bytevector-uint-ref . wU5296) (bytevector-u8-set! . wU5295) (bytevector-u8-ref . wU5294) (bytevector-u64-set! . wU5293) (bytevector-u64-ref . wU5292) (bytevector-u64-native-set! . wU5291) (bytevector-u64-native-ref . wU5290) (bytevector-u32-set! . wU528f) (bytevector-u32-ref . wU528e) (bytevector-u32-native-set! . wU528d) (bytevector-u32-native-ref . wU528c) (bytevector-u16-set! . wU528b) (bytevector-u16-ref . wU528a) (bytevector-u16-native-set! . wU5289) (bytevector-u16-native-ref . wU5288) (bytevector-sint-set! . wU5287) (bytevector-sint-ref . wU5286) (bytevector-s8-set! . wU5285) (bytevector-s8-ref . wU5284) (bytevector-s64-set! . wU5283) (bytevector-s64-ref . wU5282) (bytevector-s64-native-set! . wU5281) (bytevector-s64-native-ref . wU5280) (bytevector-s32-set! . wU527f) (bytevector-s32-ref . wU527e) (bytevector-s32-native-set! . wU527d) (bytevector-s32-native-ref . wU527c) (bytevector-s16-set! . wU527b) (bytevector-s16-ref . wU527a) (bytevector-s16-native-set! . wU5279) (bytevector-s16-native-ref . wU5278) (bytevector-length . wU5277) (bytevector-ieee-single-ref . wU5276) (bytevector-ieee-single-set! . wU5275) (bytevector-ieee-single-native-set! . wU5274) (bytevector-ieee-single-native-ref . wU5273) (bytevector-ieee-double-set! . wU5272) (bytevector-ieee-double-ref . wU5271) (bytevector-ieee-double-native-set! . wU5270) (bytevector-ieee-double-native-ref . wU526f) (bytevector-fill! . wU526e) (bytevector-copy! . wU526d) (bytevector-copy . wU526c) (bytevector->uint-list . wU526b) (bytevector->u8-list . wU526a) (bytevector->sint-list . wU5269) (no-nans-violation? . wU4e81) (no-infinities-violation? . wU4e6c) (make-no-nans-violation . wU4e7f) (make-no-infinities-violation . wU4e6a) (real->flonum . wU5268) (flzero? . wU5267) (fltruncate . wU5266) (fltan . wU5265) (flsqrt . wU5264) (flsin . wU5263) (flround . wU5262) (flpositive? . wU5261) (flonum? . wU5260) (flodd? . wU525f) (flnumerator . wU525e) (flnegative? . wU525d) (flnan? . wU525c) (flmod0 . wU525b) (flmod . wU525a) (flmin . wU5259) (flmax . wU5258) (fllog . wU5257) (flinteger? . wU5256) (flinfinite? . wU5255) (flfloor . wU5254) (flfinite? . wU5253) (flexpt . wU5252) (flexp . wU5251) (fleven? . wU5250) (fldiv0-and-mod0 . wU524f) (fldiv0 . wU524e) (fldiv-and-mod . wU524d) (fldiv . wU524c) (fldenominator . wU524b) (flcos . wU524a) (flceiling . wU5249) (flatan . wU5248) (flasin . wU5247) (flacos . wU5246) (flabs . wU5245) (fl>? . wU5244) (fl>=? . wU5243) (fl=? . wU5242) (fl<? . wU5241) (fl<=? . wU5240) (fl/ . wU523f) (fl- . wU523e) (fl+ . wU523d) (fl* . wU523c) (fixnum->flonum . wU523b) (fxzero? . wU523a) (fxxor . wU5239) (fxrotate-bit-field . wU5238) (fxreverse-bit-field . wU5237) (fxpositive? . wU5236) (fxodd? . wU5235) (fxnot . wU5234) (fxnegative? . wU5233) (fxmod0 . wU5232) (fxmod . wU5231) (fxmin . wU5230) (fxmax . wU522f) (fxlength . wU522e) (fxior . wU522d) (fxif . wU522c) (fxfirst-bit-set . wU522b) (fxeven? . wU522a) (fxdiv0-and-mod0 . wU5229) (fxdiv0 . wU5228) (fxdiv-and-mod . wU5227) (fxdiv . wU5226) (fxcopy-bit-field . wU5225) (fxcopy-bit . wU5224) (fxbit-set? . wU5223) (fxbit-field . wU5222) (fxbit-count . wU5221) (fxarithmetic-shift-right . wU5220) (fxarithmetic-shift-left . wU521f) (fxarithmetic-shift . wU521e) (fxand . wU521d) (fx>? . wU521c) (fx>=? . wU521b) (fx=? . wU521a) (fx<? . wU5219) (fx<=? . wU5218) (fx-/carry . wU5217) (fx- . wU5216) (fx+/carry . wU5215) (fx+ . wU5214) (fx*/carry . wU5213) (fx* . wU5212) (greatest-fixnum . wU5211) (least-fixnum . wU5210) (fixnum-width . wU520f) (fixnum? . wU520e) (bitwise-rotate-bit-field . wU520d) (bitwise-reverse-bit-field . wU520c) (bitwise-length . wU520b) (bitwise-if . wU520a) (bitwise-first-bit-set . wU5209) (bitwise-copy-bit-field . wU5208) (bitwise-copy-bit . wU5207) (bitwise-bit-set? . wU5206) (bitwise-bit-field . wU5205) (bitwise-bit-count . wU5204) (bitwise-xor . wU5203) (bitwise-ior . wU5202) (bitwise-and . wU5201) (bitwise-not . wU5200) (bitwise-arithmetic-shift-right . wU51ff) (bitwise-arithmetic-shift-left . wU51fe) (bitwise-arithmetic-shift . wU51fd) (zero? . wU51fc) (vector? . wU51fb) (vector-set! . wU51fa) (vector-ref . wU51f9) (vector-map . wU51f8) (vector-length . wU51f7) (vector-for-each . wU51f6) (vector-fill! . wU51f5) (vector->list . wU51f4) (vector . wU51f3) (values . wU51f2) (truncate . wU51f1) (tan . wU51f0) (symbol? . wU51ef) (symbol=? . wU51ee) (symbol->string . wU51ed) (substring . wU51ec) (string? . wU51eb) (string>? . wU51ea) (string>=? . wU51e9) (string=? . wU51e8) (string<? . wU51e7) (string<=? . wU51e6) (string-ref . wU51e5) (string-length . wU51e4) (string-for-each . wU51e3) (string-copy . wU51e2) (string-append . wU51e1) (string->symbol . wU51e0) (string->number . wU51df) (string->list . wU51de) (string . wU51dd) (sqrt . wU51dc) (sin . wU51db) (round . wU51da) (reverse . wU51d9) (real? . wU51d8) (real-valued? . wU51d7) (real-part . wU51d6) (rationalize . wU51d5) (rational? . wU51d4) (rational-valued? . wU51d3) (procedure? . wU51d2) (positive? . wU51d1) (pair? . wU51d0) (odd? . wU51cf) (numerator . wU51ce) (number? . wU51cd) (number->string . wU51cc) (null? . wU51cb) (not . wU51ca) (negative? . wU51c9) (nan? . wU51c8) (min . wU51c7) (max . wU51c6) (map . wU51c5) (make-vector . wU51c4) (make-string . wU51c3) (make-rectangular . wU51c2) (make-polar . wU51c1) (magnitude . wU51c0) (log . wU51bf) (list? . wU51be) (list-tail . wU51bd) (list-ref . wU51bc) (list->vector . wU51bb) (list->string . wU51ba) (list . wU51b9) (length . wU51b8) (lcm . wU51b7) (integer? . wU51b6) (integer-valued? . wU51b5) (integer->char . wU51b4) (infinite? . wU51b3) (inexact? . wU51b2) (inexact . wU51b1) (imag-part . wU51b0) (gcd . wU51af) (for-each . wU51ae) (floor . wU51ad) (finite? . wU51ac) (expt . wU51ab) (exp . wU51aa) (exact? . wU51a9) (exact-integer-sqrt . wU51a8) (exact . wU51a7) (even? . wU51a6) (error . wU51a5) (eqv? . wU51a4) (equal? . wU51a3) (eq? . wU51a2) (dynamic-wind . wU51a1) (div0-and-mod0 . wU51a0) (mod0 . wU519f) (div0 . wU519e) (div-and-mod . wU519d) (mod . wU519c) (div . wU519b) (denominator . wU519a) (cos . wU5199) (cons . wU5198) (complex? . wU5197) (char? . wU5196) (char>? . wU5195) (char>=? . wU5194) (char=? . wU5193) (char<? . wU5192) (char<=? . wU5191) (char->integer . wU5190) (ceiling . wU518f) (call-with-values . wU518e) (call/cc . wU518d) (call-with-current-continuation . wU518c) (cddddr . wU518b) (cdddar . wU518a) (cddadr . wU5189) (cddaar . wU5188) (cdaddr . wU5187) (cdadar . wU5186) (cdaadr . wU5185) (cdaaar . wU5184) (cadddr . wU5183) (caddar . wU5182) (cadadr . wU5181) (cadaar . wU5180) (caaddr . wU517f) (caadar . wU517e) (caaadr . wU517d) (caaaar . wU517c) (cdddr . wU517b) (cddar . wU517a) (cdadr . wU5179) (cdaar . wU5178) (caddr . wU5177) (cadar . wU5176) (caadr . wU5175) (caaar . wU5174) (cddr . wU5173) (cdar . wU5172) (cadr . wU5171) (caar . wU5170) (cdr . wU516f) (car . wU516e) (boolean? . wU516d) (boolean=? . wU516c) (atan . wU516b) (assertion-violation . wU516a) (assertion-error . wU3150) (asin . wU5169) (apply . wU5168) (append . wU5167) (angle . wU5166) (acos . wU5165) (abs . wU5164) (/ . wU5163) (* . wU5162) (- . wU5161) (+ . wU5160) (>= . wU515f) (> . wU515e) (= . wU515d) (<= . wU515c) (< . wU515b) (library . wU515a) (&no-nans . wU5159) (&no-infinities . wU5158) (&i/o-encoding . wU5157) (&i/o-decoding . wU5156) (&i/o-port . wU5155) (&i/o-file-does-not-exist . wU5154) (&i/o-file-already-exists . wU5153) (&i/o-file-is-read-only . wU5152) (&i/o-file-protection . wU5151) (&i/o-filename . wU5150) (&i/o-invalid-position . wU514f) (&i/o-write . wU514e) (&i/o-read . wU514d) (&i/o . wU514c) (&undefined . wU514b) (&syntax . wU514a) (&lexical . wU5149) (&implementation-restriction . wU5148) (&non-continuable . wU5147) (&who . wU5146) (&irritants . wU5145) (&assertion . wU5144) (&violation . wU5143) (&error . wU5142) (&serious . wU5141) (&warning . wU5140) (&message . wU513f) (&condition . wU513e) (define-condition-type . wU513d) (define-enumeration . wU513c) (define-record-type . wU513b) (parent-rtd . wU513a) (nongenerative . wU5139) (opaque . wU5138) (sealed . wU5137) (protocol . wU5136) (parent . wU5135) (immutable . wU5134) (mutable . wU5133) (fields . wU5132) (error-handling-mode . wU5131) (file-options . wU5130) (buffer-mode . wU512f) (eol-style . wU512e) (guard . wU512d) (trace-define . wU512c) (trace-lambda . wU512b) (unsyntax-splicing . wU512a) (unsyntax . wU5129) (unquote-splicing . wU5128) (unquote . wU5127) (_ . wU5126) (else . wU5125) (=> . wU5124) (... . wU5123) (assert . wU5122) (endianness . wU5121) (delay . wU5120) (time . wU511f) (do . wU511e) (cond . wU511d) (let* . wU511c) (let*-values . wU511b) (let-values . wU511a) (identifier-syntax . wU5119) (with-syntax . wU5118) (quasisyntax . wU5117) (quasiquote . wU5116) (syntax-rules . wU5115) (include . wU5114) (define-struct . wU5113) (record-constructor-descriptor . wU5112) (record-type-descriptor . wU5111) (case . wU5110) (parameterize . wU510f) (unless . wU510e) (when . wU510d) (or . wU510c) (and . wU510b) (if . wU510a) (let . wU5109) (letrec* . wU5108) (letrec . wU5107) (type-descriptor . wU5106) (case-lambda . wU5105) (lambda . wU5104) (syntax . wU5103) (syntax-case . wU5102) (quote . wU5101) (foreign-call . wU5100) (letrec-syntax . wU50ff) (let-syntax . wU50fe) (set! . wU50fd) (import . wU50fc) (begin . wU50fb) (module . wU50fa) (define-syntax . wU50f9) (define . wU50f8)) '((wU4e85 core-prim . &no-nans-rcd) (wU4e83 core-prim . &no-nans-rtd) (wU4e70 core-prim . &no-infinities-rcd) (wU4e6e core-prim . &no-infinities-rtd) (wU4e5b core-prim . &i/o-encoding-rcd) (wU4e59 core-prim . &i/o-encoding-rtd) (wU4e40 core-prim . &i/o-decoding-rcd) (wU4e3e core-prim . &i/o-decoding-rtd) (wU4e2b core-prim . &i/o-port-rcd) (wU4e29 core-prim . &i/o-port-rtd) (wU4e10 core-prim . &i/o-file-does-not-exist-rcd) (wU4e0e core-prim . &i/o-file-does-not-exist-rtd) (wU4dfb core-prim . &i/o-file-already-exists-rcd) (wU4df9 core-prim . &i/o-file-already-exists-rtd) (wU4de6 core-prim . &i/o-file-is-read-only-rcd) (wU4de4 core-prim . &i/o-file-is-read-only-rtd) (wU4dd1 core-prim . &i/o-file-protection-rcd) (wU4dcf core-prim . &i/o-file-protection-rtd) (wU4dbc core-prim . &i/o-filename-rcd) (wU4dba core-prim . &i/o-filename-rtd) (wU4da1 core-prim . &i/o-invalid-position-rcd) (wU4d9f core-prim . &i/o-invalid-position-rtd) (wU4d86 core-prim . &i/o-write-rcd) (wU4d84 core-prim . &i/o-write-rtd) (wU4d71 core-prim . &i/o-read-rcd) (wU4d6f core-prim . &i/o-read-rtd) (wU4d5c core-prim . &i/o-rcd) (wU4d5a core-prim . &i/o-rtd) (wU4d47 core-prim . &undefined-rcd) (wU4d45 core-prim . &undefined-rtd) (wU4d32 core-prim . &syntax-rcd) (wU4d30 core-prim . &syntax-rtd) (wU4d11 core-prim . &lexical-rcd) (wU4d0f core-prim . &lexical-rtd) (wU4cfc core-prim . &implementation-restriction-rcd) (wU4cfa core-prim . &implementation-restriction-rtd) (wU4ce7 core-prim . &non-continuable-rcd) (wU4ce5 core-prim . &non-continuable-rtd) (wU4cd2 core-prim . &who-rcd) (wU4cd0 core-prim . &who-rtd) (wU4cb7 core-prim . &irritants-rcd) (wU4cb5 core-prim . &irritants-rtd) (wU4c9c core-prim . &assertion-rcd) (wU4c9a core-prim . &assertion-rtd) (wU4c87 core-prim . &violation-rcd) (wU4c85 core-prim . &violation-rtd) (wU4c72 core-prim . &error-rcd) (wU4c70 core-prim . &error-rtd) (wU4c5d core-prim . &serious-rcd) (wU4c5b core-prim . &serious-rtd) (wU4c48 core-prim . &warning-rcd) (wU4c46 core-prim . &warning-rtd) (wU4c33 core-prim . &message-rcd) (wU4c31 core-prim . &message-rtd) (wU4bd4 core-prim . &condition-rcd) (wU4bd2 core-prim . &condition-rtd) (wU3152 core-prim . syntax-error) (wU3076 core-prim . syntax-dispatch) (wU5421 core-prim . pretty-print) (wU5420 core-prim . eval-core) (wU541f core-prim . set-symbol-value!) (wU541e core-prim . symbol-value) (wU541d core-prim . gensym) (wU541c core-prim . void) (wU4f96 core-prim . load) (wU3164 core-prim . interaction-environment) (wU541b core-prim . char-ready?) (wU541a core-prim . regexp?) (wU5419 core-prim . read-line) (wU5418 core-prim . gensym-prefix-set!) (wU5417 core-prim . ungensym) (wU5416 core-prim . alist->eq-hash-table) (wU5415 core-prim . assoc-ref) (wU5414 core-prim . print) (wU5413 core-prim . format) (wU5412 core-prim . host-os) (wU2aaf core-prim . library-path) (wU5411 core-prim . standard-library-path) (wU5410 core-prim . file-newer?) (wU540f core-prim . stat-mtime) (wU540e core-prim . write-to-file) (wU540d core-prim . file->list) (wU540c core-prim . file->string) (wU540b core-prim . digit->integer) (wU540a core-prim . call-with-string-input-port) (wU5409 core-prim . call-with-string-io) (wU5408 core-prim . string-split) (wU5407 core-prim . bytevector-for-each) (wU5406 core-prim . string->regexp) (wU5405 core-prim . rxmatch) (wU5404 core-prim . regexp-replace-all) (wU5403 core-prim . hashtable-for-each) (wU289a core-prim . mosh-cache-dir) (wU5402 core-prim . call-process) (wU5401 core-prim . local-tz-offset) (wU5400 core-prim . microseconds) (wU53ff core-prim . directory-list) (wU53fe core-prim . set-current-directory!) (wU53fd core-prim . expand-path) (wU53fc core-prim . current-directory) (wU53fb core-prim . %spawn) (wU53fa core-prim . %waitpid) (wU53f9 core-prim . simple-struct-name) (wU53f8 core-prim . simple-struct-set!) (wU53f7 core-prim . simple-struct-ref) (wU53f6 core-prim . make-simple-struct) (wU53f5 core-prim . simple-struct?) (wU53f4 core-prim . pointer-ref-c-int64) (wU53f3 core-prim . pointer-ref-c-int32) (wU53f2 core-prim . pointer-ref-c-int16) (wU53f1 core-prim . pointer-ref-c-int8) (wU53f0 core-prim . pointer-ref-c-uint64) (wU53ef core-prim . pointer-ref-c-uint32) (wU53ee core-prim . pointer-ref-c-uint16) (wU53ed core-prim . pointer-ref-c-uint8) (wU53ec core-prim . pointer-set-c-uint64!) (wU53eb core-prim . pointer-set-c-uint32!) (wU53ea core-prim . pointer-set-c-uint16!) (wU53e9 core-prim . pointer-set-c-uint8!) (wU53e8 core-prim . pointer-set-c-int64!) (wU53e7 core-prim . pointer-set-c-int32!) (wU53e6 core-prim . pointer-set-c-int16!) (wU53e5 core-prim . pointer-set-c-int8!) (wU53e4 core-prim . pointer-set-c-pointer!) (wU53e3 core-prim . pointer-set-c-double!) (wU53e2 core-prim . pointer-set-c-float!) (wU53e1 core-prim . pointer-set-c-long-long!) (wU53e0 core-prim . pointer-set-c-long!) (wU53df core-prim . pointer-set-c-int!) (wU53de core-prim . pointer-set-c-short!) (wU53dd core-prim . pointer-set-c-char!) (wU53dc core-prim . pointer-ref-c-pointer) (wU53db core-prim . pointer-ref-c-double) (wU53da core-prim . pointer-ref-c-float) (wU53d9 core-prim . pointer-ref-c-unsigned-long-long) (wU53d8 core-prim . pointer-ref-c-signed-long-long) (wU53d7 core-prim . pointer-ref-c-unsigned-long) (wU53d6 core-prim . pointer-ref-c-signed-long) (wU53d5 core-prim . pointer-ref-c-unsigned-int) (wU53d4 core-prim . pointer-ref-c-signed-int) (wU53d3 core-prim . pointer-ref-c-unsigned-short) (wU53d2 core-prim . pointer-ref-c-signed-short) (wU53d1 core-prim . pointer-ref-c-unsigned-char) (wU53d0 core-prim . pointer-ref-c-signed-char) (wU53cf core-prim . pointer->integer) (wU53ce core-prim . integer->pointer) (wU53cd core-prim . pointer?) (wU53cc core-prim . shared-errno) (wU53cb core-prim . %ffi-free-c-callback-trampoline) (wU53ca core-prim . %ffi-make-c-callback-trampoline) (wU53c9 core-prim . %ffi-free) (wU53c8 core-prim . %ffi-malloc) (wU53c7 core-prim . %ffi-supported?) (wU53c6 core-prim . %ffi-pointer->string) (wU53c5 core-prim . %ffi-call->string-or-zero) (wU53c4 core-prim . %ffi-call->double) (wU53c3 core-prim . %ffi-call->void*) (wU53c2 core-prim . %ffi-call->void) (wU53c1 core-prim . %ffi-call->char) (wU53c0 core-prim . %ffi-call->int) (wU53bf core-prim . %ffi-lookup) (wU53be core-prim . %ffi-open) (wU53bd core-prim . %fork) (wU53bc core-prim . %pipe) (wU53bb core-prim . p) (wU53ba core-prim . open-output-string) (wU53b9 core-prim . get-output-string) (wU53b8 core-prim . file-stat-ctime) (wU53b7 core-prim . file-stat-atime) (wU53b6 core-prim . file-stat-mtime) (wU53b5 core-prim . file-size-in-bytes) (wU53b4 core-prim . file-writable?) (wU53b3 core-prim . file-executable?) (wU53b2 core-prim . file-readable?) (wU53b1 core-prim . file-regular?) (wU53b0 core-prim . file-symbolic-link?) (wU53af core-prim . file-directory?) (wU53ae core-prim . create-symbolic-link) (wU53ad core-prim . rename-file) (wU53ac core-prim . delete-directory) (wU53ab core-prim . create-directory) (wU53aa core-prim . create-mosh-cache-dir) (wU53a9 core-prim . get-environment-variables) (wU53a8 core-prim . current-exception-handler) (wU53a7 core-prim . get-environment-variable) (wU53a6 core-prim . join-wraps) (wU53a5 core-prim . id->real-label) (wU53a4 core-prim . same-marks?) (wU53a3 core-prim . same-marks*?) (wU53a2 core-prim . get-timeofday) (wU53a1 core-prim . get-command-line) (wU53a0 core-prim . sys-display) (wU539f core-prim . whereis) (wU539e core-prim . register) (wU539d core-prim . vm-join!) (wU539c core-prim . vm-set-value!) (wU539b core-prim . vm?) (wU539a core-prim . main-vm?) (wU5399 core-prim . vm-eval) (wU5398 core-prim . vm-self) (wU5397 core-prim . vm-start!) (wU5396 core-prim . make-vm) (wU5395 core-prim . mutex-try-lock!) (wU5394 core-prim . mutex-unlock!) (wU5393 core-prim . mutex-lock!) (wU5392 core-prim . mutex?) (wU5391 core-prim . make-mutex) (wU5390 core-prim . condition-variable-notify-all!) (wU538f core-prim . condition-variable-notify!) (wU538e core-prim . condition-variable-wait!) (wU538d core-prim . make-condition-variable) (wU538c core-prim . mosh-executable-path) (wU538b core-prim . make-file-options) (wU538a core-prim . source-info) (wU5389 core-prim . make-compiler-instruction) (wU5388 core-prim . make-instruction) (wU5387 core-prim . set-source-info!) (wU5386 core-prim . bignum?) (wU5385 core-prim . fast-equal?) (wU5384 core-prim . fasl-read) (wU5383 core-prim . fasl-write) (wU5382 core-prim . time-usage) (wU5381 core-prim . os-constant) (wU5380 core-prim . disasm) (wU2898 core-prim . make-parameter) (wU537f core-prim . socket-port) (wU537e core-prim . socket-shutdown) (wU537d core-prim . socket-close) (wU537c core-prim . socket-send) (wU537b core-prim . socket-recv!) (wU537a core-prim . socket-recv) (wU5379 core-prim . make-server-socket) (wU5378 core-prim . make-client-socket) (wU5377 core-prim . socket-accept) (wU5376 core-prim . socket?) (wU5375 core-prim . string-upcase) (wU5374 core-prim . string-titlecase) (wU5373 core-prim . string-normalize-nfkd) (wU5372 core-prim . string-normalize-nfkc) (wU5371 core-prim . string-normalize-nfd) (wU5370 core-prim . string-normalize-nfc) (wU536f core-prim . string-foldcase) (wU536e core-prim . string-downcase) (wU536d core-prim . string-ci>?) (wU536c core-prim . string-ci>=?) (wU536b core-prim . string-ci=?) (wU536a core-prim . string-ci<?) (wU5369 core-prim . string-ci<=?) (wU5368 core-prim . char-whitespace?) (wU5367 core-prim . char-upper-case?) (wU5366 core-prim . char-title-case?) (wU5365 core-prim . char-numeric?) (wU5364 core-prim . char-lower-case?) (wU5363 core-prim . char-general-category) (wU5362 core-prim . char-upcase) (wU5361 core-prim . char-titlecase) (wU5360 core-prim . char-foldcase) (wU535f core-prim . char-downcase) (wU535e core-prim . char-ci>?) (wU535d core-prim . char-ci>=?) (wU535c core-prim . char-ci=?) (wU535b core-prim . char-ci<?) (wU535a core-prim . char-ci<=?) (wU5359 core-prim . char-alphabetic?) (wU2ea1 core-prim . make-variable-transformer) (wU3158 core-prim . identifier?) (wU3144 core-prim . generate-temporaries) (wU3146 core-prim . free-identifier=?) (wU315c core-prim . syntax->datum) (wU315a core-prim . datum->syntax) (wU3148 core-prim . bound-identifier=?) (wU5358 core-prim . record-type-descriptor?) (wU5357 core-prim . record-predicate) (wU5356 core-prim . record-mutator) (wU5355 core-prim . record-constructor) (wU5354 core-prim . record-accessor) (wU5353 core-prim . make-record-type-descriptor) (wU5352 core-prim . make-record-constructor-descriptor) (wU5351 core-prim . record?) (wU5350 core-prim . record-type-uid) (wU534f core-prim . record-type-sealed?) (wU534e core-prim . record-type-parent) (wU534d core-prim . record-type-opaque?) (wU534c core-prim . record-type-name) (wU534b core-prim . record-type-generative?) (wU534a core-prim . record-type-field-names) (wU5349 core-prim . record-rtd) (wU5348 core-prim . record-field-mutable?) (wU5347 core-prim . delete-file) (wU5346 core-prim . file-exists?) (wU5345 core-prim . vector-sort!) (wU5344 core-prim . vector-sort) (wU5343 core-prim . list-sort) (wU5342 core-prim . symbol-hash) (wU5341 core-prim . string-ci-hash) (wU5340 core-prim . string-hash) (wU533f core-prim . equal-hash) (wU533e core-prim . hashtable-equivalence-function) (wU533d core-prim . make-hashtable) (wU533c core-prim . hashtable-hash-function) (wU533b core-prim . make-eqv-hashtable) (wU533a core-prim . make-eq-hashtable) (wU5339 core-prim . hashtable?) (wU5338 core-prim . hashtable-update!) (wU5337 core-prim . hashtable-size) (wU5336 core-prim . hashtable-set!) (wU5335 core-prim . hashtable-ref) (wU5334 core-prim . hashtable-mutable?) (wU5333 core-prim . hashtable-keys) (wU5332 core-prim . hashtable-entries) (wU5331 core-prim . hashtable-delete!) (wU5330 core-prim . hashtable-copy) (wU532f core-prim . hashtable-contains?) (wU532e core-prim . hashtable-clear!) (wU532d core-prim . call-with-output-file) (wU532c core-prim . call-with-input-file) (wU532b core-prim . write-char) (wU532a core-prim . write) (wU5329 core-prim . with-output-to-file) (wU5328 core-prim . with-input-from-file) (wU5327 core-prim . read-char) (wU5326 core-prim . read) (wU5325 core-prim . peek-char) (wU5324 core-prim . open-output-file) (wU5323 core-prim . open-input-file) (wU5322 core-prim . newline) (wU5321 core-prim . display) (wU5320 core-prim . close-output-port) (wU531f core-prim . close-input-port) (wU531e core-prim . eof-object?) (wU531d core-prim . eof-object) (wU531c core-prim . current-error-port) (wU531b core-prim . current-output-port) (wU531a core-prim . current-input-port) (wU5319 core-prim . output-port?) (wU5318 core-prim . input-port?) (wU5317 core-prim . utf-8-codec) (wU5316 core-prim . utf-16-codec) (wU5315 core-prim . transcoder-error-handling-mode) (wU5314 core-prim . transcoder-eol-style) (wU5313 core-prim . transcoder-codec) (wU5312 core-prim . transcoded-port) (wU5311 core-prim . textual-port?) (wU5310 core-prim . string->bytevector) (wU530f core-prim . standard-output-port) (wU530e core-prim . standard-input-port) (wU530d core-prim . standard-error-port) (wU530c core-prim . set-port-position!) (wU530b core-prim . put-u8) (wU530a core-prim . put-string) (wU5309 core-prim . put-datum) (wU5308 core-prim . put-char) (wU5307 core-prim . put-bytevector) (wU5306 core-prim . port?) (wU5305 core-prim . port-transcoder) (wU5304 core-prim . port-position) (wU5303 core-prim . port-has-set-port-position!?) (wU5302 core-prim . port-has-port-position?) (wU5301 core-prim . port-eof?) (wU5300 core-prim . output-port-buffer-mode) (wU52ff core-prim . open-string-output-port) (wU52fe core-prim . open-string-input-port) (wU52fd core-prim . open-file-output-port) (wU52fc core-prim . open-file-input/output-port) (wU52fb core-prim . open-file-input-port) (wU52fa core-prim . open-bytevector-output-port) (wU52f9 core-prim . open-bytevector-input-port) (wU52f8 core-prim . native-transcoder) (wU52f7 core-prim . native-eol-style) (wU52f6 core-prim . make-transcoder) (wU52f5 core-prim . latin-1-codec) (wU4d80 core-prim . make-i/o-write-error) (wU4d6b core-prim . make-i/o-read-error) (wU4e21 core-prim . make-i/o-port-error) (wU4d97 core-prim . make-i/o-invalid-position-error) (wU4db2 core-prim . make-i/o-filename-error) (wU4dcb core-prim . make-i/o-file-protection-error) (wU4de0 core-prim . make-i/o-file-is-read-only-error) (wU4e0a core-prim . make-i/o-file-does-not-exist-error) (wU4df5 core-prim . make-i/o-file-already-exists-error) (wU4d56 core-prim . make-i/o-error) (wU4e51 core-prim . make-i/o-encoding-error) (wU4e3a core-prim . make-i/o-decoding-error) (wU52f4 core-prim . make-custom-textual-output-port) (wU52f3 core-prim . make-custom-textual-input/output-port) (wU52f2 core-prim . make-custom-textual-input-port) (wU52f1 core-prim . make-custom-binary-output-port) (wU52f0 core-prim . make-custom-binary-input/output-port) (wU52ef core-prim . make-custom-binary-input-port) (wU52ee core-prim . make-bytevector) (wU52ed core-prim . lookahead-u8) (wU52ec core-prim . lookahead-char) (wU4d82 core-prim . i/o-write-error?) (wU4d6d core-prim . i/o-read-error?) (wU4e25 core-prim . i/o-port-error?) (wU4d9b core-prim . i/o-invalid-position-error?) (wU4db6 core-prim . i/o-filename-error?) (wU4dcd core-prim . i/o-file-protection-error?) (wU4de2 core-prim . i/o-file-is-read-only-error?) (wU4e0c core-prim . i/o-file-does-not-exist-error?) (wU4df7 core-prim . i/o-file-already-exists-error?) (wU4d58 core-prim . i/o-error?) (wU4d9d core-prim . i/o-error-position) (wU4e27 core-prim . i/o-error-port) (wU4db8 core-prim . i/o-error-filename) (wU4e55 core-prim . i/o-encoding-error?) (wU4e57 core-prim . i/o-encoding-error-char) (wU4e3c core-prim . i/o-decoding-error?) (wU52eb core-prim . get-u8) (wU52ea core-prim . get-string-n!) (wU52e9 core-prim . get-string-n) (wU52e8 core-prim . get-string-all) (wU52e7 core-prim . get-line) (wU52e6 core-prim . get-datum) (wU52e5 core-prim . get-char) (wU52e4 core-prim . get-bytevector-some) (wU52e3 core-prim . get-bytevector-n!) (wU52e2 core-prim . get-bytevector-n) (wU52e1 core-prim . get-bytevector-all) (wU52e0 core-prim . flush-output-port) (wU52df core-prim . close-port) (wU3132 core-prim . scheme-report-environment) (wU52de core-prim . quotient) (wU3130 core-prim . null-environment) (wU52dd core-prim . remainder) (wU52dc core-prim . modulo) (wU52db core-prim . inexact->exact) (wU52da core-prim . force) (wU52d9 core-prim . exact->inexact) (wU52d8 core-prim . make-promise) (wU52d7 core-prim . exit) (wU4f90 core-prim . command-line) (wU52d6 core-prim . string-fill!) (wU52d5 core-prim . string-set!) (wU52d4 core-prim . set-cdr!) (wU52d3 core-prim . set-car!) (wU52d2 core-prim . remove) (wU52d1 core-prim . remv) (wU52d0 core-prim . remp) (wU52cf core-prim . remq) (wU52ce core-prim . partition) (wU52cd core-prim . memv) (wU52cc core-prim . memq) (wU52cb core-prim . memp) (wU52ca core-prim . member) (wU52c9 core-prim . exists) (wU52c8 core-prim . for-all) (wU52c7 core-prim . fold-right) (wU52c6 core-prim . fold-left) (wU52c5 core-prim . find) (wU52c4 core-prim . filter) (wU52c3 core-prim . cons*) (wU52c2 core-prim . assv) (wU52c1 core-prim . assq) (wU52c0 core-prim . assp) (wU52bf core-prim . assoc) (wU52be core-prim . call-with-string-output-port) (wU52bd core-prim . call-with-port) (wU52bc core-prim . call-with-bytevector-output-port) (wU52bb core-prim . bytevector->string) (wU52ba core-prim . buffer-mode?) (wU52b9 core-prim . binary-port?) (wU52b8 core-prim . with-exception-handler) (wU52b7 core-prim . raise-continuable) (wU52b6 core-prim . raise) (wU3136 core-prim . eval) (wU312e core-prim . environment) (wU52b5 core-prim . make-enumeration) (wU52b4 core-prim . enum-set=?) (wU52b3 core-prim . enum-set-universe) (wU52b2 core-prim . enum-set-union) (wU52b1 core-prim . enum-set-subset?) (wU52b0 core-prim . enum-set-projection) (wU52af core-prim . enum-set-member?) (wU52ae core-prim . enum-set-intersection) (wU52ad core-prim . enum-set-indexer) (wU52ac core-prim . enum-set-difference) (wU52ab core-prim . enum-set-constructor) (wU52aa core-prim . enum-set-complement) (wU52a9 core-prim . enum-set->list) (wU4ccc core-prim . who-condition?) (wU4c44 core-prim . warning?) (wU4c83 core-prim . violation?) (wU4d43 core-prim . undefined-violation?) (wU4d2a core-prim . syntax-violation?) (wU4d2e core-prim . syntax-violation-subform) (wU4d2c core-prim . syntax-violation-form) (wU3156 core-prim . syntax-violation) (wU52a8 core-prim . simple-conditions) (wU4c59 core-prim . serious-condition?) (wU4ce3 core-prim . non-continuable-violation?) (wU4c2d core-prim . message-condition?) (wU4cc8 core-prim . make-who-condition) (wU4c42 core-prim . make-warning) (wU4c81 core-prim . make-violation) (wU4d41 core-prim . make-undefined-violation) (wU4d24 core-prim . make-syntax-violation) (wU4c57 core-prim . make-serious-condition) (wU4ce1 core-prim . make-non-continuable-violation) (wU4c29 core-prim . make-message-condition) (wU4d0b core-prim . make-lexical-violation) (wU4cad core-prim . make-irritants-condition) (wU4cf6 core-prim . make-implementation-restriction-violation) (wU4c6c core-prim . make-error) (wU4c96 core-prim . make-assertion-violation) (wU4d0d core-prim . lexical-violation?) (wU4cb1 core-prim . irritants-condition?) (wU4cf8 core-prim . implementation-restriction-violation?) (wU4c6e core-prim . error?) (wU4cce core-prim . condition-who) (wU52a7 core-prim . condition-predicate) (wU4c2f core-prim . condition-message) (wU4cb3 core-prim . condition-irritants) (wU52a6 core-prim . condition-accessor) (wU52a5 core-prim . condition) (wU4c98 core-prim . assertion-violation?) (wU52a4 core-prim . condition?) (wU52a3 core-prim . utf32->string) (wU52a2 core-prim . utf16->string) (wU52a1 core-prim . utf8->string) (wU52a0 core-prim . uint-list->bytevector) (wU529f core-prim . u8-list->bytevector) (wU529e core-prim . string->utf8) (wU529d core-prim . string->utf32) (wU529c core-prim . string->utf16) (wU529b core-prim . sint-list->bytevector) (wU529a core-prim . native-endianness) (wU5299 core-prim . bytevector?) (wU5298 core-prim . bytevector=?) (wU5297 core-prim . bytevector-uint-set!) (wU5296 core-prim . bytevector-uint-ref) (wU5295 core-prim . bytevector-u8-set!) (wU5294 core-prim . bytevector-u8-ref) (wU5293 core-prim . bytevector-u64-set!) (wU5292 core-prim . bytevector-u64-ref) (wU5291 core-prim . bytevector-u64-native-set!) (wU5290 core-prim . bytevector-u64-native-ref) (wU528f core-prim . bytevector-u32-set!) (wU528e core-prim . bytevector-u32-ref) (wU528d core-prim . bytevector-u32-native-set!) (wU528c core-prim . bytevector-u32-native-ref) (wU528b core-prim . bytevector-u16-set!) (wU528a core-prim . bytevector-u16-ref) (wU5289 core-prim . bytevector-u16-native-set!) (wU5288 core-prim . bytevector-u16-native-ref) (wU5287 core-prim . bytevector-sint-set!) (wU5286 core-prim . bytevector-sint-ref) (wU5285 core-prim . bytevector-s8-set!) (wU5284 core-prim . bytevector-s8-ref) (wU5283 core-prim . bytevector-s64-set!) (wU5282 core-prim . bytevector-s64-ref) (wU5281 core-prim . bytevector-s64-native-set!) (wU5280 core-prim . bytevector-s64-native-ref) (wU527f core-prim . bytevector-s32-set!) (wU527e core-prim . bytevector-s32-ref) (wU527d core-prim . bytevector-s32-native-set!) (wU527c core-prim . bytevector-s32-native-ref) (wU527b core-prim . bytevector-s16-set!) (wU527a core-prim . bytevector-s16-ref) (wU5279 core-prim . bytevector-s16-native-set!) (wU5278 core-prim . bytevector-s16-native-ref) (wU5277 core-prim . bytevector-length) (wU5276 core-prim . bytevector-ieee-single-ref) (wU5275 core-prim . bytevector-ieee-single-set!) (wU5274 core-prim . bytevector-ieee-single-native-set!) (wU5273 core-prim . bytevector-ieee-single-native-ref) (wU5272 core-prim . bytevector-ieee-double-set!) (wU5271 core-prim . bytevector-ieee-double-ref) (wU5270 core-prim . bytevector-ieee-double-native-set!) (wU526f core-prim . bytevector-ieee-double-native-ref) (wU526e core-prim . bytevector-fill!) (wU526d core-prim . bytevector-copy!) (wU526c core-prim . bytevector-copy) (wU526b core-prim . bytevector->uint-list) (wU526a core-prim . bytevector->u8-list) (wU5269 core-prim . bytevector->sint-list) (wU4e81 core-prim . no-nans-violation?) (wU4e6c core-prim . no-infinities-violation?) (wU4e7f core-prim . make-no-nans-violation) (wU4e6a core-prim . make-no-infinities-violation) (wU5268 core-prim . real->flonum) (wU5267 core-prim . flzero?) (wU5266 core-prim . fltruncate) (wU5265 core-prim . fltan) (wU5264 core-prim . flsqrt) (wU5263 core-prim . flsin) (wU5262 core-prim . flround) (wU5261 core-prim . flpositive?) (wU5260 core-prim . flonum?) (wU525f core-prim . flodd?) (wU525e core-prim . flnumerator) (wU525d core-prim . flnegative?) (wU525c core-prim . flnan?) (wU525b core-prim . flmod0) (wU525a core-prim . flmod) (wU5259 core-prim . flmin) (wU5258 core-prim . flmax) (wU5257 core-prim . fllog) (wU5256 core-prim . flinteger?) (wU5255 core-prim . flinfinite?) (wU5254 core-prim . flfloor) (wU5253 core-prim . flfinite?) (wU5252 core-prim . flexpt) (wU5251 core-prim . flexp) (wU5250 core-prim . fleven?) (wU524f core-prim . fldiv0-and-mod0) (wU524e core-prim . fldiv0) (wU524d core-prim . fldiv-and-mod) (wU524c core-prim . fldiv) (wU524b core-prim . fldenominator) (wU524a core-prim . flcos) (wU5249 core-prim . flceiling) (wU5248 core-prim . flatan) (wU5247 core-prim . flasin) (wU5246 core-prim . flacos) (wU5245 core-prim . flabs) (wU5244 core-prim . fl>?) (wU5243 core-prim . fl>=?) (wU5242 core-prim . fl=?) (wU5241 core-prim . fl<?) (wU5240 core-prim . fl<=?) (wU523f core-prim . fl/) (wU523e core-prim . fl-) (wU523d core-prim . fl+) (wU523c core-prim . fl*) (wU523b core-prim . fixnum->flonum) (wU523a core-prim . fxzero?) (wU5239 core-prim . fxxor) (wU5238 core-prim . fxrotate-bit-field) (wU5237 core-prim . fxreverse-bit-field) (wU5236 core-prim . fxpositive?) (wU5235 core-prim . fxodd?) (wU5234 core-prim . fxnot) (wU5233 core-prim . fxnegative?) (wU5232 core-prim . fxmod0) (wU5231 core-prim . fxmod) (wU5230 core-prim . fxmin) (wU522f core-prim . fxmax) (wU522e core-prim . fxlength) (wU522d core-prim . fxior) (wU522c core-prim . fxif) (wU522b core-prim . fxfirst-bit-set) (wU522a core-prim . fxeven?) (wU5229 core-prim . fxdiv0-and-mod0) (wU5228 core-prim . fxdiv0) (wU5227 core-prim . fxdiv-and-mod) (wU5226 core-prim . fxdiv) (wU5225 core-prim . fxcopy-bit-field) (wU5224 core-prim . fxcopy-bit) (wU5223 core-prim . fxbit-set?) (wU5222 core-prim . fxbit-field) (wU5221 core-prim . fxbit-count) (wU5220 core-prim . fxarithmetic-shift-right) (wU521f core-prim . fxarithmetic-shift-left) (wU521e core-prim . fxarithmetic-shift) (wU521d core-prim . fxand) (wU521c core-prim . fx>?) (wU521b core-prim . fx>=?) (wU521a core-prim . fx=?) (wU5219 core-prim . fx<?) (wU5218 core-prim . fx<=?) (wU5217 core-prim . fx-/carry) (wU5216 core-prim . fx-) (wU5215 core-prim . fx+/carry) (wU5214 core-prim . fx+) (wU5213 core-prim . fx*/carry) (wU5212 core-prim . fx*) (wU5211 core-prim . greatest-fixnum) (wU5210 core-prim . least-fixnum) (wU520f core-prim . fixnum-width) (wU520e core-prim . fixnum?) (wU520d core-prim . bitwise-rotate-bit-field) (wU520c core-prim . bitwise-reverse-bit-field) (wU520b core-prim . bitwise-length) (wU520a core-prim . bitwise-if) (wU5209 core-prim . bitwise-first-bit-set) (wU5208 core-prim . bitwise-copy-bit-field) (wU5207 core-prim . bitwise-copy-bit) (wU5206 core-prim . bitwise-bit-set?) (wU5205 core-prim . bitwise-bit-field) (wU5204 core-prim . bitwise-bit-count) (wU5203 core-prim . bitwise-xor) (wU5202 core-prim . bitwise-ior) (wU5201 core-prim . bitwise-and) (wU5200 core-prim . bitwise-not) (wU51ff core-prim . bitwise-arithmetic-shift-right) (wU51fe core-prim . bitwise-arithmetic-shift-left) (wU51fd core-prim . bitwise-arithmetic-shift) (wU51fc core-prim . zero?) (wU51fb core-prim . vector?) (wU51fa core-prim . vector-set!) (wU51f9 core-prim . vector-ref) (wU51f8 core-prim . vector-map) (wU51f7 core-prim . vector-length) (wU51f6 core-prim . vector-for-each) (wU51f5 core-prim . vector-fill!) (wU51f4 core-prim . vector->list) (wU51f3 core-prim . vector) (wU51f2 core-prim . values) (wU51f1 core-prim . truncate) (wU51f0 core-prim . tan) (wU51ef core-prim . symbol?) (wU51ee core-prim . symbol=?) (wU51ed core-prim . symbol->string) (wU51ec core-prim . substring) (wU51eb core-prim . string?) (wU51ea core-prim . string>?) (wU51e9 core-prim . string>=?) (wU51e8 core-prim . string=?) (wU51e7 core-prim . string<?) (wU51e6 core-prim . string<=?) (wU51e5 core-prim . string-ref) (wU51e4 core-prim . string-length) (wU51e3 core-prim . string-for-each) (wU51e2 core-prim . string-copy) (wU51e1 core-prim . string-append) (wU51e0 core-prim . string->symbol) (wU51df core-prim . string->number) (wU51de core-prim . string->list) (wU51dd core-prim . string) (wU51dc core-prim . sqrt) (wU51db core-prim . sin) (wU51da core-prim . round) (wU51d9 core-prim . reverse) (wU51d8 core-prim . real?) (wU51d7 core-prim . real-valued?) (wU51d6 core-prim . real-part) (wU51d5 core-prim . rationalize) (wU51d4 core-prim . rational?) (wU51d3 core-prim . rational-valued?) (wU51d2 core-prim . procedure?) (wU51d1 core-prim . positive?) (wU51d0 core-prim . pair?) (wU51cf core-prim . odd?) (wU51ce core-prim . numerator) (wU51cd core-prim . number?) (wU51cc core-prim . number->string) (wU51cb core-prim . null?) (wU51ca core-prim . not) (wU51c9 core-prim . negative?) (wU51c8 core-prim . nan?) (wU51c7 core-prim . min) (wU51c6 core-prim . max) (wU51c5 core-prim . map) (wU51c4 core-prim . make-vector) (wU51c3 core-prim . make-string) (wU51c2 core-prim . make-rectangular) (wU51c1 core-prim . make-polar) (wU51c0 core-prim . magnitude) (wU51bf core-prim . log) (wU51be core-prim . list?) (wU51bd core-prim . list-tail) (wU51bc core-prim . list-ref) (wU51bb core-prim . list->vector) (wU51ba core-prim . list->string) (wU51b9 core-prim . list) (wU51b8 core-prim . length) (wU51b7 core-prim . lcm) (wU51b6 core-prim . integer?) (wU51b5 core-prim . integer-valued?) (wU51b4 core-prim . integer->char) (wU51b3 core-prim . infinite?) (wU51b2 core-prim . inexact?) (wU51b1 core-prim . inexact) (wU51b0 core-prim . imag-part) (wU51af core-prim . gcd) (wU51ae core-prim . for-each) (wU51ad core-prim . floor) (wU51ac core-prim . finite?) (wU51ab core-prim . expt) (wU51aa core-prim . exp) (wU51a9 core-prim . exact?) (wU51a8 core-prim . exact-integer-sqrt) (wU51a7 core-prim . exact) (wU51a6 core-prim . even?) (wU51a5 core-prim . error) (wU51a4 core-prim . eqv?) (wU51a3 core-prim . equal?) (wU51a2 core-prim . eq?) (wU51a1 core-prim . dynamic-wind) (wU51a0 core-prim . div0-and-mod0) (wU519f core-prim . mod0) (wU519e core-prim . div0) (wU519d core-prim . div-and-mod) (wU519c core-prim . mod) (wU519b core-prim . div) (wU519a core-prim . denominator) (wU5199 core-prim . cos) (wU5198 core-prim . cons) (wU5197 core-prim . complex?) (wU5196 core-prim . char?) (wU5195 core-prim . char>?) (wU5194 core-prim . char>=?) (wU5193 core-prim . char=?) (wU5192 core-prim . char<?) (wU5191 core-prim . char<=?) (wU5190 core-prim . char->integer) (wU518f core-prim . ceiling) (wU518e core-prim . call-with-values) (wU518d core-prim . call/cc) (wU518c core-prim . call-with-current-continuation) (wU518b core-prim . cddddr) (wU518a core-prim . cdddar) (wU5189 core-prim . cddadr) (wU5188 core-prim . cddaar) (wU5187 core-prim . cdaddr) (wU5186 core-prim . cdadar) (wU5185 core-prim . cdaadr) (wU5184 core-prim . cdaaar) (wU5183 core-prim . cadddr) (wU5182 core-prim . caddar) (wU5181 core-prim . cadadr) (wU5180 core-prim . cadaar) (wU517f core-prim . caaddr) (wU517e core-prim . caadar) (wU517d core-prim . caaadr) (wU517c core-prim . caaaar) (wU517b core-prim . cdddr) (wU517a core-prim . cddar) (wU5179 core-prim . cdadr) (wU5178 core-prim . cdaar) (wU5177 core-prim . caddr) (wU5176 core-prim . cadar) (wU5175 core-prim . caadr) (wU5174 core-prim . caaar) (wU5173 core-prim . cddr) (wU5172 core-prim . cdar) (wU5171 core-prim . cadr) (wU5170 core-prim . caar) (wU516f core-prim . cdr) (wU516e core-prim . car) (wU516d core-prim . boolean?) (wU516c core-prim . boolean=?) (wU516b core-prim . atan) (wU516a core-prim . assertion-violation) (wU3150 core-prim . assertion-error) (wU5169 core-prim . asin) (wU5168 core-prim . apply) (wU5167 core-prim . append) (wU5166 core-prim . angle) (wU5165 core-prim . acos) (wU5164 core-prim . abs) (wU5163 core-prim . /) (wU5162 core-prim . *) (wU5161 core-prim . -) (wU5160 core-prim . +) (wU515f core-prim . >=) (wU515e core-prim . >) (wU515d core-prim . =) (wU515c core-prim . <=) (wU515b core-prim . <) (wU515a core-prim . library) (wU5159 $core-rtd &no-nans-rtd &no-nans-rcd) (wU5158 $core-rtd &no-infinities-rtd &no-infinities-rcd) (wU5157 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (wU5156 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (wU5155 $core-rtd &i/o-port-rtd &i/o-port-rcd) (wU5154 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (wU5153 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (wU5152 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (wU5151 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (wU5150 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (wU514f $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (wU514e $core-rtd &i/o-write-rtd &i/o-write-rcd) (wU514d $core-rtd &i/o-read-rtd &i/o-read-rcd) (wU514c $core-rtd &i/o-rtd &i/o-rcd) (wU514b $core-rtd &undefined-rtd &undefined-rcd) (wU514a $core-rtd &syntax-rtd &syntax-rcd) (wU5149 $core-rtd &lexical-rtd &lexical-rcd) (wU5148 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (wU5147 $core-rtd &non-continuable-rtd &non-continuable-rcd) (wU5146 $core-rtd &who-rtd &who-rcd) (wU5145 $core-rtd &irritants-rtd &irritants-rcd) (wU5144 $core-rtd &assertion-rtd &assertion-rcd) (wU5143 $core-rtd &violation-rtd &violation-rcd) (wU5142 $core-rtd &error-rtd &error-rcd) (wU5141 $core-rtd &serious-rtd &serious-rcd) (wU5140 $core-rtd &warning-rtd &warning-rcd) (wU513f $core-rtd &message-rtd &message-rcd) (wU513e $core-rtd &condition-rtd &condition-rcd) (wU513d macro . define-condition-type) (wU513c macro . define-enumeration) (wU513b macro . define-record-type) (wU513a macro . parent-rtd) (wU5139 macro . nongenerative) (wU5138 macro . opaque) (wU5137 macro . sealed) (wU5136 macro . protocol) (wU5135 macro . parent) (wU5134 macro . immutable) (wU5133 macro . mutable) (wU5132 macro . fields) (wU5131 macro . error-handling-mode) (wU5130 macro . file-options) (wU512f macro . buffer-mode) (wU512e macro . eol-style) (wU512d macro . guard) (wU512c macro . trace-define) (wU512b macro . trace-lambda) (wU512a macro . unsyntax-splicing) (wU5129 macro . unsyntax) (wU5128 macro . unquote-splicing) (wU5127 macro . unquote) (wU5126 macro . _) (wU5125 macro . else) (wU5124 macro . =>) (wU5123 macro . ...) (wU5122 macro . assert) (wU5121 macro . endianness) (wU5120 macro . delay) (wU511f macro . time) (wU511e macro . do) (wU511d macro . cond) (wU511c macro . let*) (wU511b macro . let*-values) (wU511a macro . let-values) (wU5119 macro . identifier-syntax) (wU5118 macro . with-syntax) (wU5117 macro . quasisyntax) (wU5116 macro . quasiquote) (wU5115 macro . syntax-rules) (wU5114 macro . include) (wU5113 macro . define-struct) (wU5112 core-macro . record-constructor-descriptor) (wU5111 core-macro . record-type-descriptor) (wU5110 macro . case) (wU510f macro . parameterize) (wU510e macro . unless) (wU510d macro . when) (wU510c core-macro . or) (wU510b core-macro . and) (wU510a core-macro . if) (wU5109 core-macro . let) (wU5108 core-macro . letrec*) (wU5107 core-macro . letrec) (wU5106 core-macro . type-descriptor) (wU5105 core-macro . case-lambda) (wU5104 core-macro . lambda) (wU5103 core-macro . syntax) (wU5102 core-macro . syntax-case) (wU5101 core-macro . quote) (wU5100 core-macro . foreign-call) (wU50ff letrec-syntax) (wU50fe let-syntax) (wU50fd set!) (wU50fc import) (wU50fb begin) (wU50fa module) (wU50f9 define-syntax) (wU50f8 define)) values values '#f '#f '#f '#f) (wU2c84@wU2ad0@install-library 'wU5442 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . wU5421) (eval-core . wU5420) (set-symbol-value! . wU541f) (symbol-value . wU541e) (gensym . wU541d) (void . wU541c)) '() values values '#f '#f '#f '#f) (wU2c84@wU2ad0@install-library 'wU5443 '(mosh) '() '() '() '() '((set-symbol-value! . wU541f) (symbol-value . wU541e) (regexp? . wU541a) (read-line . wU5419) (ungensym . wU5417) (alist->eq-hash-table . wU5416) (assoc-ref . wU5415) (print . wU5414) (format . wU5413) (host-os . wU5412) (library-path . wU2aaf) (standard-library-path . wU5411) (file-newer? . wU5410) (stat-mtime . wU540f) (digit->integer . wU540b) (call-with-string-input-port . wU540a) (call-with-string-io . wU5409) (string-split . wU5408) (bytevector-for-each . wU5407) (string->regexp . wU5406) (rxmatch . wU5405) (regexp-replace-all . wU5404) (hashtable-for-each . wU5403) (set-current-directory! . wU53fe) (expand-path . wU53fd) (current-directory . wU53fc) (p . wU53bb) (get-timeofday . wU53a2) (get-command-line . wU53a1) (sys-display . wU53a0) (whereis . wU539f) (register . wU539e) (vm-join! . wU539d) (vm-set-value! . wU539c) (vm? . wU539b) (main-vm? . wU539a) (vm-eval . wU5399) (vm-self . wU5398) (vm-start! . wU5397) (make-vm . wU5396) (mutex-try-lock! . wU5395) (mutex-unlock! . wU5394) (mutex-lock! . wU5393) (mutex? . wU5392) (make-mutex . wU5391) (condition-variable-notify-all! . wU5390) (condition-variable-notify! . wU538f) (condition-variable-wait! . wU538e) (make-condition-variable . wU538d) (mosh-executable-path . wU538c) (make-file-options . wU538b) (source-info . wU538a) (make-compiler-instruction . wU5389) (make-instruction . wU5388) (set-source-info! . wU5387) (bignum? . wU5386) (fast-equal? . wU5385) (fasl-read . wU5384) (fasl-write . wU5383) (time-usage . wU5382) (os-constant . wU5381) (time . wU511f) (include . wU5114)) '() values values '#f '#f '#f '#f) (wU2c84@wU2ad0@install-library 'wU5444 '(system) '() '() '() '() '((gensym-prefix-set! . wU5418) (write-to-file . wU540e) (file->list . wU540d) (file->string . wU540c) (mosh-cache-dir . wU289a) (call-process . wU5402) (local-tz-offset . wU5401) (microseconds . wU5400) (directory-list . wU53ff) (expand-path . wU53fd) (%spawn . wU53fb) (%waitpid . wU53fa) (simple-struct-name . wU53f9) (simple-struct-set! . wU53f8) (simple-struct-ref . wU53f7) (make-simple-struct . wU53f6) (simple-struct? . wU53f5) (pointer-ref-c-int64 . wU53f4) (pointer-ref-c-int32 . wU53f3) (pointer-ref-c-int16 . wU53f2) (pointer-ref-c-int8 . wU53f1) (pointer-ref-c-uint64 . wU53f0) (pointer-ref-c-uint32 . wU53ef) (pointer-ref-c-uint16 . wU53ee) (pointer-ref-c-uint8 . wU53ed) (pointer-set-c-uint64! . wU53ec) (pointer-set-c-uint32! . wU53eb) (pointer-set-c-uint16! . wU53ea) (pointer-set-c-uint8! . wU53e9) (pointer-set-c-int64! . wU53e8) (pointer-set-c-int32! . wU53e7) (pointer-set-c-int16! . wU53e6) (pointer-set-c-int8! . wU53e5) (pointer-set-c-pointer! . wU53e4) (pointer-set-c-double! . wU53e3) (pointer-set-c-float! . wU53e2) (pointer-set-c-long-long! . wU53e1) (pointer-set-c-long! . wU53e0) (pointer-set-c-int! . wU53df) (pointer-set-c-short! . wU53de) (pointer-set-c-char! . wU53dd) (pointer-ref-c-pointer . wU53dc) (pointer-ref-c-double . wU53db) (pointer-ref-c-float . wU53da) (pointer-ref-c-unsigned-long-long . wU53d9) (pointer-ref-c-signed-long-long . wU53d8) (pointer-ref-c-unsigned-long . wU53d7) (pointer-ref-c-signed-long . wU53d6) (pointer-ref-c-unsigned-int . wU53d5) (pointer-ref-c-signed-int . wU53d4) (pointer-ref-c-unsigned-short . wU53d3) (pointer-ref-c-signed-short . wU53d2) (pointer-ref-c-unsigned-char . wU53d1) (pointer-ref-c-signed-char . wU53d0) (pointer->integer . wU53cf) (integer->pointer . wU53ce) (pointer? . wU53cd) (shared-errno . wU53cc) (%ffi-free-c-callback-trampoline . wU53cb) (%ffi-make-c-callback-trampoline . wU53ca) (%ffi-free . wU53c9) (%ffi-malloc . wU53c8) (%ffi-supported? . wU53c7) (%ffi-pointer->string . wU53c6) (%ffi-call->string-or-zero . wU53c5) (%ffi-call->double . wU53c4) (%ffi-call->void* . wU53c3) (%ffi-call->void . wU53c2) (%ffi-call->char . wU53c1) (%ffi-call->int . wU53c0) (%ffi-lookup . wU53bf) (%ffi-open . wU53be) (%fork . wU53bd) (%pipe . wU53bc) (open-output-string . wU53ba) (get-output-string . wU53b9) (file-stat-ctime . wU53b8) (file-stat-atime . wU53b7) (file-stat-mtime . wU53b6) (file-size-in-bytes . wU53b5) (file-writable? . wU53b4) (file-executable? . wU53b3) (file-readable? . wU53b2) (file-regular? . wU53b1) (file-symbolic-link? . wU53b0) (file-directory? . wU53af) (create-symbolic-link . wU53ae) (rename-file . wU53ad) (delete-directory . wU53ac) (create-directory . wU53ab) (create-mosh-cache-dir . wU53aa) (get-environment-variables . wU53a9) (current-exception-handler . wU53a8) (get-environment-variable . wU53a7) (join-wraps . wU53a6) (id->real-label . wU53a5) (same-marks? . wU53a4) (same-marks*? . wU53a3) (disasm . wU5380) (make-parameter . wU2898) (socket-port . wU537f) (socket-shutdown . wU537e) (socket-close . wU537d) (socket-send . wU537c) (socket-recv! . wU537b) (socket-recv . wU537a) (make-server-socket . wU5379) (make-client-socket . wU5378) (socket-accept . wU5377) (socket? . wU5376) (parameterize . wU510f)) '() values values '#f '#f '#f '#f)))
(begin (set! wU4f7b@ref (unspecified)) (set! wU4f7d@x* (unspecified)) (set! wU4f7f@add-library-path! (unspecified)) (set! wU4f81@parse-and-add-library-path (unspecified)) (set! wU4f83@for-each-with-index (unspecified)) (set! wU4f85@rpad (unspecified)) (set! wU4f87@condition-printer (unspecified)) (set! wU4f89@record->field-alist (unspecified)) (set! wU4f8b@map-with-index (unspecified)) (set! wU4f8d@repl (unspecified)) (set! wU4f8f@trace-printer (unspecified)) (set! wU4f91@command-line (unspecified)) (set! wU4f93@local-library-path (unspecified)) (set! wU4f95@load/args (unspecified)) (set! wU4f97@load (unspecified)) (set! wU4f99@ironscheme-build (unspecified)) (set! wU4f9b@eval-top-level (unspecified)) (set! wU4f9d@compile-system-libraries (unspecified)) (set! wU4f9f@compile (unspecified)) (set! wU4fa1@compile->closure (unspecified)) (set! wU4fa3@pre-compile-r6rs-file (unspecified)) (set! wU4fa5@load-r6rs-top-level (unspecified)) (set! wU4fa7@load-r6rs-top-level-sexp (unspecified)) (set! wU4fa9@prefix-inc (unspecified)) (set! wU4fab@prefix-inc! (unspecified)) (set! wU4f7b@ref (lambda (wU4fe6@rtd wU4fe7@i wU4fe8@x) (let ((wU4fec@val ((record-accessor wU4fe6@rtd wU4fe7@i) wU4fe8@x))) (if (symbol? wU4fec@val) (ungensym wU4fec@val) wU4fec@val)))) (set! wU50de@wU4f7b@ref wU4f7b@ref) (set! wU4f7d@x* '()) (set! wU50df@wU4f7d@x* wU4f7d@x*) (set! wU4f7f@add-library-path! (lambda (wU4fee@path) (wU2c74@wU2ab0@library-path (append (wU2c74@wU2ab0@library-path) (list wU4fee@path))))) (set! wU50e0@wU4f7f@add-library-path! wU4f7f@add-library-path!) (set! wU4f81@parse-and-add-library-path (lambda (wU4ff0@paths wU4ff1@message) (let ((wU4ff5@separator '#f)) (begin (set! wU4ff5@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((wU4ff6@t wU4ff0@paths)) (if wU4ff6@t ((lambda (wU4ff8@paths) (for-each (lambda (wU4ffa@path) (if (file-exists? wU4ffa@path) (wU4f7f@add-library-path! (expand-path wU4ffa@path)) (format (current-error-port) wU4ff1@message wU4ffa@path))) (string-split wU4ff8@paths wU4ff5@separator))) wU4ff6@t) (void))))))) (set! wU50e1@wU4f81@parse-and-add-library-path wU4f81@parse-and-add-library-path) (set! wU4f83@for-each-with-index (lambda (wU4ffc@proc wU4ffd@lst) (letrec ((wU5000@loop (lambda (wU5002@i wU5003@lst) (if (null? wU5003@lst) (if '#f '#f (void)) (begin (wU4ffc@proc wU5002@i (car wU5003@lst)) (wU5000@loop (+ wU5002@i '1) (cdr wU5003@lst))))))) (wU5000@loop '1 wU4ffd@lst)))) (set! wU50e2@wU4f83@for-each-with-index wU4f83@for-each-with-index) (set! wU4f85@rpad (lambda (wU5006@str wU5007@pad wU5008@n) (let ((wU500c@rest (- wU5008@n (string-length (format '"~a" wU5006@str))))) (let wU5012@loop ((wU500e@rest wU500c@rest) (wU500f@ret (format '"~a" wU5006@str))) (if (<= wU500e@rest '0) wU500f@ret (wU5012@loop (- wU500e@rest '1) (string-append wU500f@ret wU5007@pad))))))) (set! wU50e3@wU4f85@rpad wU4f85@rpad) (set! wU4f87@condition-printer (lambda (wU5014@e wU5015@port) (let ((wU5019@max-condition-len '#f)) (begin (set! wU5019@max-condition-len (apply max (map (lambda (wU502a@c) (string-length (symbol->string (record-type-name (record-rtd wU502a@c))))) (simple-conditions wU5014@e)))) (begin (display '" Condition components:\n" wU5015@port) (wU4f83@for-each-with-index (lambda (wU501a@i wU501b@x) (let ((wU501e@rtd (record-rtd wU501b@x)) (wU501f@fields-alist (wU4f89@record->field-alist wU501b@x))) (begin (format wU5015@port '" ~d. ~a" wU501a@i (wU4f85@rpad (symbol->string (record-type-name wU501e@rtd)) '" " wU5019@max-condition-len)) (if (null? wU501f@fields-alist) (newline wU5015@port) (void)) (let wU5026@loop ((wU5022@first '#t) (wU5023@fields-alist wU501f@fields-alist)) (if (null? wU5023@fields-alist) '() (let ((wU5028@field (car wU5023@fields-alist))) (begin (if (not wU5022@first) (display (wU4f85@rpad '"" '" " (+ '4 wU5019@max-condition-len)) wU5015@port) (void)) (display '"       " wU5015@port) (display (car wU5028@field) wU5015@port) (display '": " wU5015@port) (write (cdr wU5028@field) wU5015@port) (newline wU5015@port) (wU5026@loop '#f (cdr wU5023@fields-alist))))))))) (simple-conditions wU5014@e))))))) (set! wU50e4@wU4f87@condition-printer wU4f87@condition-printer) (set! wU4f89@record->field-alist (lambda (wU502c@r) (let ((wU502f@ref '#f)) (begin (set! wU502f@ref (lambda (wU503a@rtd wU503b@i wU503c@x) (let ((wU5040@val ((record-accessor wU503a@rtd wU503b@i) wU503c@x))) (if (symbol? wU5040@val) (ungensym wU5040@val) wU5040@val)))) (let wU5034@loop ((wU5030@ret '()) (wU5031@rtd (record-rtd wU502c@r))) (if wU5031@rtd (wU5034@loop (append wU5030@ret (wU4f8b@map-with-index (lambda (wU5036@i wU5037@field) (cons wU5037@field (wU502f@ref wU5031@rtd wU5036@i wU502c@r))) (vector->list (record-type-field-names wU5031@rtd)))) (record-type-parent wU5031@rtd)) wU5030@ret)))))) (set! wU50e5@wU4f89@record->field-alist wU4f89@record->field-alist) (set! wU4f8b@map-with-index (lambda (wU5042@proc wU5043@lst) (let wU504c@loop ((wU5046@i '0) (wU5047@lst wU5043@lst) (wU5048@ret '())) (if (null? wU5047@lst) (reverse wU5048@ret) (wU504c@loop (+ wU5046@i '1) (cdr wU5047@lst) (cons (wU5042@proc wU5046@i (car wU5047@lst)) wU5048@ret)))))) (set! wU50e6@wU4f8b@map-with-index wU4f8b@map-with-index) (set! wU4f8d@repl (lambda wU504e@x (let ((wU5051@rec '#f)) (begin (set! wU5051@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (wU5054@wU5052) (lambda () (with-exception-handler (lambda (wU5056@e) ((call/cc (lambda (wU5058@wU5053) (wU5054@wU5052 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? wU5056@e) (wU4f87@condition-printer wU5056@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" wU5056@e))) (wU5058@wU5053 (lambda () (raise-continuable wU5056@e)))))))))) (lambda () (let wU505e@loop ((wU505a@line (get-line (current-input-port))) (wU505b@accum '"")) (let ((wU5061@parentheses-ok? '#f) (wU5063@eval-string-print '#f)) (begin (set! wU5061@parentheses-ok? (lambda (wU5068@text) (let wU5070@loop ((wU506a@chars (string->list wU5068@text)) (wU506b@p0 '0) (wU506c@p1 '0)) (if (null? wU506a@chars) (= '0 wU506b@p0 wU506c@p1) (let ((wU5072@t (car wU506a@chars))) (if (memv wU5072@t '(#\()) (wU5070@loop (cdr wU506a@chars) (+ wU506b@p0 '1) wU506c@p1) (if (memv wU5072@t '(#\))) (wU5070@loop (cdr wU506a@chars) (- wU506b@p0 '1) wU506c@p1) (if (memv wU5072@t '(#\[)) (wU5070@loop (cdr wU506a@chars) wU506b@p0 (+ wU506c@p1 '1)) (if (memv wU5072@t '(#\])) (wU5070@loop (cdr wU506a@chars) wU506b@p0 (- wU506c@p1 '1)) (wU5070@loop (cdr wU506a@chars) wU506b@p0 wU506c@p1)))))))))) (set! wU5063@eval-string-print (lambda (wU5066@text) (if (not (or (string=? '"\n" wU5066@text) (= '0 (string-length wU5066@text)))) (write (wU4f9b@eval-top-level (call-with-port (open-string-input-port wU5066@text) read))) (void)))) (if (eof-object? wU505a@line) (begin (wU5063@eval-string-print wU505b@accum) (exit)) (let ((wU5064@current (string-append wU505b@accum wU505a@line))) (if (wU5061@parentheses-ok? wU5064@current) (wU5063@eval-string-print wU5064@current) (wU505e@loop (get-line (current-input-port)) wU5064@current))))))))))))) (newline) (wU5051@rec)))) (wU5051@rec))))) (set! wU50e7@wU4f8d@repl wU4f8d@repl) (set! wU4f8f@trace-printer (wU29ba@wU2899@make-parameter write)) (set! wU50e8@wU4f8f@trace-printer wU4f8f@trace-printer) (set! wU4f91@command-line (wU29ba@wU2899@make-parameter (get-command-line))) (set! wU50e9@wU4f91@command-line wU4f91@command-line) (set! wU4f93@local-library-path (lambda (wU5074@filename) (wU2c74@wU2ab0@library-path))) (set! wU50ea@wU4f93@local-library-path wU4f93@local-library-path) (set! wU4f95@load/args (lambda (wU5076@filename . wU5078@args) (begin (apply wU4fa5@load-r6rs-top-level wU5076@filename 'load wU5078@args) (void)))) (set! wU50eb@wU4f95@load/args wU4f95@load/args) (set! wU4f97@load (lambda (wU507a@filename) (begin (apply wU4fa5@load-r6rs-top-level wU507a@filename 'load (wU4f91@command-line)) (void)))) (set! wU50ec@wU4f97@load wU4f97@load) (set! wU4f99@ironscheme-build (lambda () (wU4f97@load '"ironscheme-buildscript.ss"))) (set! wU50ed@wU4f99@ironscheme-build wU4f99@ironscheme-build) (set! wU4f9b@eval-top-level (lambda (wU507c@x) (wU4ba1@wU3137@eval wU507c@x (wU4bb8@wU3165@interaction-environment)))) (set! wU50ee@wU4f9b@eval-top-level wU4f9b@eval-top-level) (set! wU4f9d@compile-system-libraries (lambda () (wU4f9b@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! wU50ef@wU4f9d@compile-system-libraries wU4f9d@compile-system-libraries) (set! wU4f9f@compile (lambda (wU507e@filename) (wU4fa5@load-r6rs-top-level wU507e@filename 'compile))) (set! wU50f0@wU4f9f@compile wU4f9f@compile) (set! wU4fa1@compile->closure (lambda (wU5080@filename) (wU4fa5@load-r6rs-top-level wU5080@filename 'closure))) (set! wU50f1@wU4fa1@compile->closure wU4fa1@compile->closure) (set! wU4fa3@pre-compile-r6rs-file (lambda (wU5082@filename) (wU4fa5@load-r6rs-top-level wU5082@filename 'compile))) (set! wU50f2@wU4fa3@pre-compile-r6rs-file wU4fa3@pre-compile-r6rs-file) (set! wU4fa5@load-r6rs-top-level (lambda (wU5084@filename wU5085@how . wU5088@args) (begin (wU2c74@wU2ab0@library-path (wU4f93@local-library-path wU5084@filename)) (let ((wU508a@x* (with-input-from-file wU5084@filename (lambda () (let wU508c@f () (let ((wU508e@x (wU29ad@wU287f@read-annotated))) (if (eof-object? wU508e@x) '() (cons wU508e@x (wU508c@f))))))))) (let ((wU5090@t wU5085@how)) (if (memv wU5090@t '(closure)) (wU4bb7@wU3163@pre-compile-r6rs-top-level wU508a@x*) (if (memv wU5090@t '(load)) (begin (wU4f91@command-line (cons wU5084@filename (car wU5088@args))) (wU29bb@wU289b@mosh-cache-dir (create-mosh-cache-dir)) (if (wU29bb@wU289b@mosh-cache-dir) (gensym-prefix-set! (wU4fab@prefix-inc! (string-append (wU29bb@wU289b@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (wU5092@file) ((call/cc (lambda (wU5096@wU5094) (lambda () (with-exception-handler (lambda (wU5098@c) ((call/cc (lambda (wU509a@wU5095) (wU5096@wU5094 (lambda () (if '#t '#t (wU509a@wU5095 (lambda () (raise-continuable wU5098@c)))))))))) (lambda () (delete-file (string-append (wU29bb@wU289b@mosh-cache-dir) '"/" wU5092@file))))))))) (directory-list (wU29bb@wU289b@mosh-cache-dir))) (void)) (let ((wU509c@compiled (wU4bb6@wU3161@compile-r6rs-top-level wU508a@x*))) (begin (if (and (wU29bb@wU289b@mosh-cache-dir) (not (symbol-value '%disable-acc))) (wU2c78@wU2ab8@serialize-all wU29b5@wU288f@serialize-library wU2a11@wU29ca@compile-core-expr) (void)) (wU509c@compiled)))) (if (memv wU5090@t '(compile)) (begin (wU4bb6@wU3161@compile-r6rs-top-level wU508a@x*) (wU2c78@wU2ab8@serialize-all wU29b5@wU288f@serialize-library wU2a11@wU29ca@compile-core-expr)) (if '#f '#f (void)))))))))) (set! wU50f3@wU4fa5@load-r6rs-top-level wU4fa5@load-r6rs-top-level) (set! wU4fa7@load-r6rs-top-level-sexp (lambda (wU509e@import-spec wU509f@thunk) (let ((wU50aa@wU50a3 wU2c74@wU2ab0@library-path) (wU50ab@wU50a5 wU29bb@wU289b@mosh-cache-dir) (wU50ac@wU50a7 (wU4f93@local-library-path '"")) (wU50ad@wU50a9 (create-mosh-cache-dir))) (let ((wU50b2@swap (lambda () (begin (let ((wU50b4@t (wU50aa@wU50a3))) (begin (wU50aa@wU50a3 wU50ac@wU50a7) (set! wU50ac@wU50a7 wU50b4@t))) (let ((wU50b6@t (wU50ab@wU50a5))) (begin (wU50ab@wU50a5 wU50ad@wU50a9) (set! wU50ad@wU50a9 wU50b6@t))))))) (dynamic-wind wU50b2@swap (lambda () (begin (if (wU29bb@wU289b@mosh-cache-dir) (gensym-prefix-set! (wU4fab@prefix-inc! (string-append (wU29bb@wU289b@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((wU50bc@wU50b9 wU4f91@command-line) (wU50bd@wU50bb '())) (let ((wU50c0@swap (lambda () (let ((wU50c2@t (wU50bc@wU50b9))) (begin (wU50bc@wU50b9 wU50bd@wU50bb) (set! wU50bd@wU50bb wU50c2@t)))))) (dynamic-wind wU50c0@swap (lambda () ((wU4bb6@wU3161@compile-r6rs-top-level (list (cons 'import wU509e@import-spec) (list wU509f@thunk))))) wU50c0@swap))))) wU50b2@swap))))) (set! wU50f4@wU4fa7@load-r6rs-top-level-sexp wU4fa7@load-r6rs-top-level-sexp) (set! wU4fa9@prefix-inc (lambda (wU50c4@prefix-string) (let ((wU50c6@prefix (symbol->string wU50c4@prefix-string))) (let ((wU50c8@len (string-length wU50c6@prefix))) (let wU50d0@loop ((wU50ca@i (- wU50c8@len '1)) (wU50cb@carry? '#t) (wU50cc@accum '())) (if (< wU50ca@i '0) (string->symbol (list->string (if wU50cb@carry? (cons '#\a wU50cc@accum) wU50cc@accum))) (if wU50cb@carry? (let ((wU50d2@next-integer (+ '1 (char->integer (string-ref wU50c6@prefix wU50ca@i))))) (if (= wU50d2@next-integer '123) (wU50d0@loop (- wU50ca@i '1) '#f (cons '#\A wU50cc@accum)) (if (= wU50d2@next-integer '91) (wU50d0@loop (- wU50ca@i '1) '#t (cons '#\a wU50cc@accum)) (wU50d0@loop (- wU50ca@i '1) '#f (cons (integer->char wU50d2@next-integer) wU50cc@accum))))) (wU50d0@loop (- wU50ca@i '1) '#f (cons (string-ref wU50c6@prefix wU50ca@i) wU50cc@accum))))))))) (set! wU50f5@wU4fa9@prefix-inc wU4fa9@prefix-inc) (set! wU4fab@prefix-inc! (lambda (wU50d4@file) (begin (if (not (file-exists? wU50d4@file)) (call-with-output-file wU50d4@file (lambda (wU50d6@port) (write 'd wU50d6@port))) (void)) (let ((wU50d8@prefix (call-with-input-file wU50d4@file read))) (let ((wU50da@next-prefix (wU4fa9@prefix-inc wU50d8@prefix))) (begin (call-with-port (open-file-output-port wU50d4@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (wU50dc@port) (write wU50da@next-prefix wU50dc@port))) wU50d8@prefix)))))) (set! wU50f6@wU4fab@prefix-inc! wU4fab@prefix-inc!) (begin (wU2c79@wU2aba@current-precompiled-library-loader wU29b6@wU2891@load-serialized-library) (set-symbol-value! 'load wU4f97@load) (set-symbol-value! 'pre-compile-r6rs-file wU4fa3@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs wU4f9b@eval-top-level) (set-symbol-value! 'int-env-syms wU4b98@wU3125@interaction-environment-symbols) (set-symbol-value! 'expanded2core wU2a10@wU29c8@expanded->core) (set-symbol-value! 'trace-printer wU4f8f@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (wU4fac@c) (condition (wU4ed8@wU4ce2@make-non-continuable-violation) (wU4ece@wU4cc9@make-who-condition 'raise) (wU4e92@wU4c2a@make-message-condition '"returned from non-continuable exception") (wU4ec4@wU4cae@make-irritants-condition (list wU4fac@c))))) (wU4f81@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (wU4f81@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (wU4f7f@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (wU4f7f@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (wU4f7f@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((wU4fae@prefix (lambda (wU4fb0@ext wU4fb1@ls) (append (map (lambda (wU4fb4@x) (string-append wU4fb0@ext wU4fb4@x)) wU4fb1@ls) wU4fb1@ls)))) (wU2c75@wU2ab2@library-extensions (wU4fae@prefix '".mosh" (wU2c75@wU2ab2@library-extensions)))) (current-exception-handler (lambda (wU4fb6@c) (if (condition? wU4fb6@c) (wU4f87@condition-printer wU4fb6@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" wU4fb6@c)))) (if ((call/cc (lambda (wU4fba@wU4fb8) (lambda () (with-exception-handler (lambda (wU4fbc@c) ((call/cc (lambda (wU4fbe@wU4fb9) (wU4fba@wU4fb8 (lambda () (if '#t '#f (wU4fbe@wU4fb9 (lambda () (raise-continuable wU4fbc@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (wU4fa7@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (wU4f91@command-line)) (let ((wU4fc8@wU4fc1 wU4f91@command-line) (wU4fc9@wU4fc3 wU29bb@wU289b@mosh-cache-dir) (wU4fca@wU4fc5 '()) (wU4fcb@wU4fc7 (create-mosh-cache-dir))) (let ((wU4fd0@swap (lambda () (begin (let ((wU4fd2@t (wU4fc8@wU4fc1))) (begin (wU4fc8@wU4fc1 wU4fca@wU4fc5) (set! wU4fca@wU4fc5 wU4fd2@t))) (let ((wU4fd4@t (wU4fc9@wU4fc3))) (begin (wU4fc9@wU4fc3 wU4fcb@wU4fc7) (set! wU4fcb@wU4fc7 wU4fd4@t))))))) (dynamic-wind wU4fd0@swap (lambda () (begin (if (wU29bb@wU289b@mosh-cache-dir) (gensym-prefix-set! (wU4fab@prefix-inc! (string-append (wU29bb@wU289b@mosh-cache-dir) '"/prefix.txt"))) (void)) (wU4f8d@repl))) wU4fd0@swap))) (begin (wU2c74@wU2ab0@library-path (wU4f93@local-library-path (car (wU4f91@command-line)))) (set! wU4f7d@x* (with-input-from-file (car (wU4f91@command-line)) (lambda () (let wU4fd6@f () (let ((wU4fd8@x (wU29ad@wU287f@read-annotated))) (if (eof-object? wU4fd8@x) '() (cons wU4fd8@x (wU4fd6@f)))))))) (wU4f91@command-line (cons (car (wU4f91@command-line)) (cdr (wU4f91@command-line)))) (wU29bb@wU289b@mosh-cache-dir (create-mosh-cache-dir)) (if (wU29bb@wU289b@mosh-cache-dir) (gensym-prefix-set! (wU4fab@prefix-inc! (string-append (wU29bb@wU289b@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (wU4fda@file) ((call/cc (lambda (wU4fde@wU4fdc) (lambda () (with-exception-handler (lambda (wU4fe0@c) ((call/cc (lambda (wU4fe2@wU4fdd) (wU4fde@wU4fdc (lambda () (if '#t '#t (wU4fe2@wU4fdd (lambda () (raise-continuable wU4fe0@c)))))))))) (lambda () (delete-file (string-append (wU29bb@wU289b@mosh-cache-dir) '"/" wU4fda@file))))))))) (directory-list (wU29bb@wU289b@mosh-cache-dir))) (void)) (let ((wU4fe4@compiled (wU4bb6@wU3161@compile-r6rs-top-level wU4f7d@x*))) (begin (if (and (wU29bb@wU289b@mosh-cache-dir) (not (symbol-value '%disable-acc))) (wU2c78@wU2ab8@serialize-all wU29b5@wU288f@serialize-library wU2a11@wU29ca@compile-core-expr) (void)) (wU4fe4@compiled))))))))
